[{"code":"#(apply array-map (reduce concat (for [[x y] % [z w] y]\n      [[x z] w])))","problem":146,"user":"51899891e4b0288ada3dbdab"},{"code":"#(apply conj {} (let [r {} a (keys %)] (for [k a m (keys (get % k))] \r\n\t(assoc-in r [[k m]] (get-in % [k m])))))","problem":146,"user":"4ecf1f51535d1f5ad70dba3a"},{"code":"#(let [ret (atom {})]\n  (doseq [[x m] %]\n    (doseq [[y v] m]\n      (swap! ret assoc [x y] v)\n    )  \n  )\n  @ret\n)","problem":146,"user":"5176afd2e4b085adf681d889"},{"problem":146,"code":"(fn\n  [mapa]\n  (into {}\n        (reduce concat (for [[llave valor] mapa]\n                         (map (fn [a] (vector [llave (first a)] (second a))) valor)))))","user":"59e18b9be4b08badc2a0c50f"},{"problem":146,"code":"(fn [data]\n  (into {} (for [x data\n                 y (val x)]\n             [[(key x) (key y)] (val y)])))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":146,"code":"(fn [n]\n  (into {}\n        (for [[l e] n\n              [i d] e]\n          [[l i] d])))","user":"59dd387ae4b0a0ac046f2501"},{"code":"#(into {} (for [[x v] % [y v] v] {[x y] v}))","problem":146,"user":"4db2f208535df7e46ed9b6c9"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k1 v1] m\n          [k2 v2] v1]\n      [[k1 k2] v2])))","user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn [m]\n        (reduce (fn [rt e] \n                  (let [k (first e)\n                        vm (second e)]\n                    (reduce (fn [rt v]\n                              (assoc rt [k (first v)] (second v))\n                              ) rt vm) \n                    )) {} m))","problem":146,"user":"4ef992c8535dced4c769f268"},{"code":"(fn f [hm]\n  (into {}\n  (for [x (keys hm)\n        y (keys (hm x)) \n        :let [z (hm x)]] \n      [[x y] (z y)])))","problem":146,"user":"51750cd4e4b07031762f2ee5"},{"problem":146,"code":"(fn [m]\n  (reduce conj (flatten (for [[k1 v1] m]\n                          (for [[k2 v2] v1]\n                            (hash-map [k1 k2] v2))))))","user":"5c896f46e4b048ec896c5940"},{"code":"(fn [m]\r\n    (apply hash-map\r\n           (apply concat\r\n                  (for [k1 (keys m)\r\n                        :let [m2 (get m k1)]\r\n                        k2 (keys m2)]\r\n                    [[k1 k2] (get m2 k2)] ))))","problem":146,"user":"4f047177535dcb61093f6bc6"},{"problem":146,"code":"(fn tree-into-table\n  [a_map]\n  (->> (for [m a_map\n             v (val m)\n             :let [k' (key v)\n                   v' (val v)]]\n         (hash-map [(key m) k'] v'))\n       (apply merge)))","user":"56a44067e4b0542e1f8d14da"},{"problem":146,"code":"(fn tree-into-table [m]\n  (let [pairs (for [k1 (keys m)\n                    k2 (keys (m k1))\n                    :let [pair (conj [] k1 k2)\n                          value ((m k1) k2)]]\n                (conj [] pair value))]\n    (into {} pairs)))","user":"53710c09e4b0fc7073fd6ea5"},{"problem":146,"code":"(fn [m]\n    (reduce (fn [res [k v]]\n              (merge res (reduce (fn [res [ik iv]]\n                                   (merge res {[k ik] iv}))\n                                 {}\n                                 v)))\n            {}\n            m))","user":"57596ba7e4b02ea11479931a"},{"problem":146,"code":"(fn paths [m]\n  (if (not (map? m)) {[] m}\n    (letfn\n      [(paths* [[k v]]\n               (mapcat #(vector (cons k (first %)) (second %)) (paths v)))]\n      (apply hash-map (mapcat paths* m)))))","user":"553e0b70e4b0a04f792994e8"},{"code":"#(into {} (for [[k v1] % [k2 v] v1] [[k k2] v]))","problem":146,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":146,"code":"(fn trees->tables [m]\n  (->> (for [[k1 v1] m\n             [k2 v2] v1]\n         [[k1 k2] v2])\n       (into {})))","user":"561d8936e4b064ca9f4b16b2"},{"problem":146,"code":"(fn [yei]\n    (into {}\n          (for [[k-1 v-1] yei\n                [k-2 v-2] v-1]\n            [[k-1 k-2] v-2])))","user":"571ff1ebe4b0c5bde472c088"},{"problem":146,"code":"(fn [x]\n  (let [f (fn [k v]\n            (if (map? v)\n              (map #(list (vector k %) %2) (keys v) (vals v))\n              (list (vector k) v)))]\n    (loop [x1 x r nil]\n      (if (empty? x1)\n        (reduce #(assoc % (first %2) (second %2)) {} r)\n        (recur (rest x1) (concat r (f (first (first x1)) (second (first x1)))))))))","user":"566d71b1e4b0a866af6896ca"},{"code":"#(zipmap  \n         (mapcat identity (for [[k v] %] (for [[mk mv] v] [k mk]) ) )\n         (mapcat identity (for [[k v] %] (for [[mk mv] v] mv) ) )\n         )","problem":146,"user":"528f4462e4b0239c8a67aef0"},{"problem":146,"code":"(fn tree->map [t]\n  (letfn [(tree-keys [t]\n                     (if (not (map? t))\n                       [[[] t]]\n                       (mapcat (fn [current]\n                                 (let [[k v] current]\n                                   (mapv (fn [result]\n                                           (let [[h t] result]\n                                             [(cons k h) t]))\n                                         (tree-keys v))))\n                               t)))]\n    (into {}\n          (map #(let [[h t] %]\n                  [(vec h) t])\n               (tree-keys t)))))","user":"5895477fe4b00487982d527c"},{"code":"#(let [k (map list (keys %)) mkv (map keys (vals %)) \r\ninterl (partition 2 (interleave k mkv))\r\nkmkvpairs (mapcat \r\n  (fn[x](for [ky (first x) mkvs (second x)]\r\n[ky mkvs])) interl)\r\nkmkvvals (map (fn[x](get-in % x)) kmkvpairs)\r\ninterl2 (interleave kmkvpairs kmkvvals)\r\nmapping (apply assoc {} interl2)]\r\nmapping)","problem":146,"user":"4ed2dd98535d44c135fd68e2"},{"code":"(fn flatten_ [m]\n  (apply hash-map\n    (reduce concat\n      (for [x (keys m)\n            y (keys (m x))]\n        [[x y] ((m x) y)]))))","problem":146,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"(fn\n  [coll]\n  (->> (for [i coll, j (second i)]\n         [[(first i) (key j)] (val j)])\n       (into {})))","problem":146,"user":"51ab4082e4b04e3dc0c27b31"},{"code":"(fn [i]\r\n    (into {} (for [[k m] i, [k1 m1] m] [[k k1] m1])))","problem":146,"user":"4e8768f6535dceadca469850"},{"problem":146,"code":"(fn [m] (into {} (for [[k v] m [vk vv] v] [[k vk] vv])))","user":"57f80350e4b0d3187e90090c"},{"problem":146,"code":"(fn [main-map]\n  (into {} (for [[key, nested-map] main-map\n                 [nested-key nested-val] nested-map] [[key nested-key] nested-val])))","user":"56603e5fe4b068f2fe63dc4a"},{"code":"(fn build-map [x]\n  (let [keyvals (for [mykey (keys x)\n                      mymapkey (keys (x mykey))]\n                  [[mykey mymapkey] (get-in x [mykey mymapkey])])]\n    (zipmap (map first keyvals) (map second keyvals))))","problem":146,"user":"51f82769e4b09be9c177e527"},{"problem":146,"code":"#(into {} (for [[a m] % [b v] m] [[a b] v]))\n\n;reduce\n;  (fn [l [a m]] (apply conj l\n;                       (map #(identity [[a %1] %2])\n;                            (keys m)\n;                            (vals m))))\n;  {}","user":"567b39b6e4b05957ce8c61a3"},{"problem":146,"code":"(fn [m]\n    (into {}\n          (for [[ok ov] m\n                [ik iv] ov]\n            [[ok ik] iv])))","user":"5f56c0cae4b0a0bc16850a8c"},{"problem":146,"code":"#(into {} (for [[k, v] %\n                [vk, vv] v] [[k, vk] vv])\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"code":"(fn [x] (into {} (for [[k v] x [vk vv] v] [[k vk] vv])))","problem":146,"user":"51cbdee1e4b08d8387cbede1"},{"problem":146,"code":"(fn [h] (into {} (mapcat\n  (fn [[key value]]\n    (for [k1 [key] [k2 v] value]\n      [[k1 k2] v]))\n                  h)))","user":"536046a9e4b063bf7a5f8fe1"},{"code":"(fn [mp]\n  (apply merge\n    (for [a mp\n          b (val a)\n          :let [c (key b)\n                d (val b)]] (hash-map [(key a) c] d))))","problem":146,"user":"528a3e14e4b0239c8a67ae72"},{"code":"(fn [m]\r\n   (into {}\r\n    (for [[a v1] m [b v2] v1 ]\r\n      {[a b] v2})))","problem":146,"user":"502a9fdee4b095a7adb898b4"},{"problem":146,"code":"(fn tree-into-tables [xs]\n\t(into {} \n\t\t(for [[k v] xs\n\t\t  [inner-key inner-val] v] [[k inner-key] inner-val])))","user":"52e657e4e4b09f7907dd1472"},{"problem":146,"code":";;transform map of maps to maps of values with lists as keys\n(fn  [m]\n  (->> (for [a m\n    :let [x (first a)\n          v (last a)]\n        n v\n      :let  [y (first n)\n             z (last  n)]]\n    (list [x y] z))\n    (reduce #'concat)\n    (apply hash-map)))","user":"6066c745e4b069485764ddd8"},{"code":"(fn [data]\n   (into {}\n         (for [[k v] data [j w] v]\n           [[k j] w])))","problem":146,"user":"51d4ed02e4b013d740b70dec"},{"code":"#(apply merge                                                                                                                                                                                                                        \n(for [[a m] %                                                                                                                                                                                                                                \n  [b v] m] {[a b] v}))","problem":146,"user":"4db8f6c4535d1e037afb219e"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k v] m,\n          [ik iv] v]\n      [[k ik] iv])))","user":"4fe49706e4b0e8f79898feb7"},{"problem":146,"code":"(fn [m] (into {} (for [[k v] m, [ik iv] v] [[k ik] iv])))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"#(into {} \n    (for [q (keys %)\n          n (keys (% q))]\n      [[q n] ((% q) n)]))","problem":146,"user":"4f7869c2e4b0fbe0118ec589"},{"code":"(fn [orig]\n    (into {} (for [[kl1 ml2] orig  [kl2 vl2] ml2] [[kl1 kl2] vl2])))","problem":146,"user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn [x] (apply hash-map (apply concat (for [xi (keys x) yi (keys (x xi))] [[xi yi] ((x xi) yi)]))))","problem":146,"user":"5235a902e4b0a643f2dcb750"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k v] m\n                 [k1 v1] v]\n             [[k k1] v1])))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k1 m1] m\n                 [k2 v] m1]\n             [[k1 k2] v])))","user":"5896a0e6e4b00487982d52a8"},{"problem":146,"code":"#(apply merge (for [[k v] %\n       [k2 v2]v]\n       {[k k2]v2}\n       ))","user":"52faf67ce4b047fd55837005"},{"problem":146,"code":"#(apply merge (for [[i z] %] (apply hash-map (mapcat (fn [s] (list [i (first s)] (last s))) z))))","user":"53f035c2e4b0742d9025b0d2"},{"problem":146,"code":"(fn [maps]\n  (into {}\n        (for [m1 maps\n              m2 (val m1)]\n          [[(key m1) (key m2)] (val m2)])))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":146,"code":"(fn [m]\n  (into (hash-map)\n            (for [k1 m \n                  k2 (last k1)]\n            [[(first k1) (first k2)] (last k2)]\n             )\n            ))","user":"55625903e4b0c656e3ff17d7"},{"problem":146,"code":"#(into\n  {} \n  (mapcat (fn [[x y]]\n              (for [x [x]\n                    y (into [] y)]\n               [[x (first y)] (last y)])) %))","user":"59e0f38ae4b08badc2a0c500"},{"code":"(fn trees-into-tables [m]\n  (let [map-map (fn [[k1 m]] (apply merge\n                                   (map #(hash-map [k1 %] (get m %))\n                                        (keys m))))]\n    (reduce #(merge %1 (map-map %2)) {} m)))","problem":146,"user":"4dd0e8f7535da60f04a96e57"},{"problem":146,"code":"#(into {} (for [[a b] %\n                 c b]\n             [[a (first c)] (second c)]))","user":"53d5a63be4b0e771c3025449"},{"problem":146,"code":"(fn [m]\n  (apply merge (for [[x y] m]\n                 (apply merge (map (fn [[a b]]\n                                     {[x a] b}) y)))))","user":"51bd78c3e4b0ff155d51d2b0"},{"problem":146,"code":"(fn [m]\n   (into {}\n         (for [[k v] m\n               [kv vv] v]\n           [[k kv] vv])))","user":"50978ca4e4b00ad8bab4e966"},{"problem":146,"code":"#(apply merge (for [[k1 v1] % \n                    [k2 v2] v1] {[k1 k2] v2}))","user":"5454b84ce4b0e397800069d9"},{"code":"(fn [m]\n  (into {} (for [[k0 v0] m \n                 [k1 v1] v0] \n             [[k0 k1] v1])))","problem":146,"user":"50e4f4e9e4b049a987753896"},{"problem":146,"code":"(fn[m](\n     zipmap \n     (for[k1 (keys m) k2 (keys (get m k1))] [k1 k2])\n     (for[k1 (keys m) k2 (keys (get m k1))] (get (get m k1) k2))\n   ))","user":"56039843e4b04bb52996e1be"},{"problem":146,"code":"(fn [mm] ( into {} (for [x (keys mm) y (keys (mm x))] {[x y] (get-in mm [x y])})))","user":"51eec1a6e4b0871fa145d98d"},{"code":"#(apply merge (for [[k v] %\n                    [l b] v]\n                {(vector k l) b}))","problem":146,"user":"4efb2fd7535dced4c769f274"},{"problem":146,"code":"(fn [m]\n  (->>\n    (for [[k mv]  m\n          [ik iv] mv]\n      [[k ik] iv])\n    (into {})))","user":"59fa241ee4b0ca45a743a358"},{"problem":146,"code":"#(let [ks (for [key1 (keys %)\n                key2 (keys (% key1))]\n            {[key1 key2] ((% key1) key2)})]\n   (apply merge ks))","user":"554b8572e4b0a04f79299589"},{"code":"#(into {} \n  (for [[i m] % \n        [j v] m]\n    [[i j] v]))","problem":146,"user":"51cbaf14e4b08d8387cbedda"},{"code":"#(into \n {}\n (for [[i m] %   \n       [j v] m] \n   [[i j] v]))","problem":146,"user":"4e03c616535d04ed9115e796"},{"code":"(fn [m] \n  (->> (for [[k v] m\n             [k2 v2] v]\n         [[k k2] v2])\n       (apply concat)\n       (apply hash-map)))","problem":146,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"(fn [m]\n  (let \n    [flattened \n      (for [[k1 v1] m [k2 v2] v1]\n        [[k1 k2] v2])]\n    (into {} flattened)))","problem":146,"user":"4f28c979e4b0d6649770a01a"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k v] m\n          [x y] v]\n      {[k x] y})))\t;[[k x] y] is also a valid form\n\n\n;(fn [m]\n;  (apply hash-map \n;    (mapcat identity\n;      (for [[k v] m\n;            [x y] v]\n;        [[k x] y]))))","user":"5e6ca949e4b04a83ad7cd289"},{"problem":146,"code":"#(reduce (fn [result [k v]] (assoc result k v))\n         {}\n         (for [k1 (keys %) k2 (keys (get % k1))] \n           (list [k1 k2] (get (get % k1) k2))))","user":"5eee7311e4b07c55ae4a0510"},{"problem":146,"code":"(fn [m]\n  (apply merge\n         (for [[k1 m2] m\n               [k2 v]  m2]\n           {[k1 k2] v})))","user":"4fbe2cfbe4b081705acca30c"},{"problem":146,"code":"(fn [m]\n  (into {} (for [k1 (keys m)\n                 k2 (keys (get m k1))]\n             {[k1 k2] (get (get m k1) k2)})))","user":"54cad59ee4b057c6fda3a26e"},{"problem":146,"code":"(fn fmap [m]\n   (apply hash-map (mapcat (fn [coll] (mapcat #(vector [(first coll) (first %)] (last %)) (last coll))) m))\n   )","user":"5687fe58e4b0dcc4269f4065"},{"problem":146,"code":"(fn [m] (apply conj {} (for [[k1 v1] m [k2 v2] v1 :let [k [k1 k2]]] (vector k (get-in m k)))))","user":"587294f0e4b01531a375ea1e"},{"problem":146,"code":"#(into {} (for [[x y] % [z w] y] [[x z] w]))","user":"56ab7578e4b03c432f18733d"},{"code":"(fn [m] (into {} (for [[x y] m [kx ky] y] (vec [[x kx] ky]))))","problem":146,"user":"531c0619e4b08068f379ed98"},{"code":"(fn [mps]\n  (into {}\n    (for [[k1 v1] mps\n          [k2 v2] v1]\n      [[k1 k2] v2])))","problem":146,"user":"525431dfe4b0541d1855b970"},{"problem":146,"code":"#(apply merge (for [[a b] %\n                    [c d] b]\n                {[a c] d}))","user":"4e38f245535deb9a81d77f3e"},{"problem":146,"code":"(fn [m] (into {} (for [[k1 v1] m\n                       [k2 v2] v1]\n                   [[k1 k2] v2])))","user":"54dc49d3e4b024c67c0cf780"},{"code":"(fn [s]\n  (into {} (for [[a b] s [x y] b]\n           [[a x] y])))","problem":146,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":146,"code":"(fn [mp]\n  (apply merge\n         (for [[key value] mp]\n           (into {}\n                 (for [[in-key in-value] value]\n                   (vector (vector key in-key)\n                           in-value))))))","user":"559d33b3e4b0ec2b359424d9"},{"code":"(fn [m]\n  (into {}\n    (for [[k1 map1] m [k2 v2] map1] {[k1 k2] v2})))","problem":146,"user":"504c8165e4b09724c857af31"},{"code":"(fn [x]\n  (reduce (fn [acc [a b]]\n            (let [entries (for [c b]\n                            (assoc acc [a (first c)] (second c))\n                          )]\n              (reduce #(merge %1 %2) entries)\n            )\n          )\n          {}\n          x\n  )\n)","problem":146,"user":"5272d4b7e4b03e8d9a4a7453"},{"code":"(fn [m]\n (into {}\n       (for [n m p (last n)]\n         (vector (vector (first n) (first p)) (last p)))))","problem":146,"user":"5370f8ede4b0fc7073fd6ea2"},{"code":"#(into {}\n (for [a (keys %)\n       [b c] (get % a)]\n   [[a b] c]))","problem":146,"user":"4e89ff3d535d3e98b802328a"},{"problem":146,"code":"(fn[m]\n\t(into {} (for [[k0 v0] m] ( into {} (for [[k1 v1] v0] {(vector k0 k1) v1})))))","user":"54651ef5e4b01be26fd746d5"},{"code":"#(apply hash-map \r\n      (mapcat \r\n        (fn [[k1 v1]]\r\n          (mapcat (fn [[k2 v2]]\r\n                    [[k1 k2] v2]) v1))\r\n      %))","problem":146,"user":"4f58d92fe4b0a7574ea71858"},{"problem":146,"code":"(fn [d]\n  (into {} (for [[k v] d [a b] v] [[k a] b])))","user":"54965534e4b0b312c081ff65"},{"problem":146,"code":"(fn tree-to-tables\n\t[param]\n\t(into {} (for [[k vmap] param [km v] vmap]\n\t\t\t\t [[k km] v])))","user":"552bd5c2e4b0ffed3738f969"},{"problem":146,"code":"(fn [mp]\n(into {}\n(for [[k v] mp\n[vk vv] v]\n(vec [[k vk] vv]))))","user":"53d86564e4b0e771c302546b"},{"problem":146,"code":"(fn [hm]\n  (reduce\n    (fn [acc [k subm]]\n        (conj acc (reduce-kv\n                    (fn [m key v]\n                      (assoc m [k key] v)) {} subm)))\n    {}\n    hm))","user":"5b8162d0e4b047b03b20378b"},{"code":"#(reduce\n   (fn [m e]\n     (assoc m (first e) (last e)))\n   {}\n   (apply concat ((fn w [m & [kk]]\n                    (map (fn [k v] (if (map? v) (w v (conj kk k))\n                                       [(conj kk k) v]))\n                         (keys m)\n                         (vals m))) % [])))","problem":146,"user":"5027b41ee4b01614d1633fee"},{"problem":146,"code":"(fn tree->table [t]\n  (apply hash-map (apply concat (for [[k1 v1] t\n                                      [k2 v2] (t k1)]\n                                  [[k1 k2] v2]))))","user":"53e8c684e4b036ad0777e48b"},{"code":"(fn [m]\n  (into {} (for [[k v] m [vk vv] v] [[k vk] vv])))","problem":146,"user":"528e64b7e4b0239c8a67aedd"},{"problem":146,"code":"(fn [in-map] (into {} (for [k1 (keys in-map) [k2 v] (get in-map k1)] [[k1 k2] v])))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":146,"code":"(fn [m]\n  (let [f (fn [[k v]]\n            {k v}\n            (map #(hash-map [k (key %)] (val %)) v))]\n    (->> m\n         (map f)\n         flatten\n         (apply merge))))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":146,"code":"(fn [m]\n  (apply merge (mapcat (fn [k1] (for [k2 (keys (get m k1 ))]\n                                  {[k1 k2] (get-in m [k1 k2])}))\n                       (keys m))))","user":"557e56aae4b05c286339e0d5"},{"code":"(fn tree-table [tree]\n        (into {}\n              (for [[ka va] tree\n                    [kb vb] va]\n                [[ka kb] vb])))","problem":146,"user":"4e589bdc535d8a8b8723a295"},{"problem":146,"code":"(fn [ubermap]\n  (into {}  (for [ms ubermap\n                  p (last ms)]\n              [[(first ms) (first p)] (last p)]))\n  )","user":"552e1c98e4b076ab5578f7ee"},{"problem":146,"code":"(fn [m]\n  (apply merge (for [[k1 v1] m\n                     [k2 v2] v1]\n                 {[k1 k2] v2})))","user":"523ea111e4b057c4b7cd0a65"},{"code":"(fn [m]\n  (into {}\n        (for [k1 (keys m) k2 (keys (m k1))]\n            [[k1 k2] (get-in m [k1 k2])])))","problem":146,"user":"4e1f9bb5535d04ed9115e80d"},{"problem":146,"code":"(fn [orig]\n  (let [entry->flattened (fn [[key val]] (map #(vector [key (first %)] (second %)) val))]\n    (apply hash-map (apply concat (mapcat entry->flattened orig)))))","user":"585d9558e4b0f14aab7c879c"},{"problem":146,"code":"(fn [d]\n  (into {} (for [[k v] d \n                 [kk vv] v] \n            [[k kk] vv])))","user":"56102f50e4b05f002753df6b"},{"code":"(fn [m]\n  (reduce #(conj % %2) {}\n          (flatten \n           (for [[k v] m]\n             (for [[k1 v1] v]\n               {[k k1] v1})))))","problem":146,"user":"504ec4d3e4b069badc5a33c9"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [[k v] mp\n        [vk vv] v]\n        (vec [[k vk] vv]))))","user":"57df309ee4b0bd073c20245f"},{"code":"(fn [m] (into {} (for [[k v] m [k2 v2] v] [[k k2] v2])))","problem":146,"user":"4fb2101ce4b081705acca284"},{"code":"(fn [m]\n  (into {} (for [[k v] m\n        [k2 v2] v] [[k k2] v2])))","problem":146,"user":"50bd6033e4b0594b91591c66"},{"code":"#(into {} (for [[k v] % [x y] (% k)] [[k x] y]))","problem":146,"user":"51bd1a0de4b0df1216cefd93"},{"problem":146,"code":"(fn t-to-t [m] (apply merge (for [ k (keys m)\n                      v (keys (m k))]\n                 {[k v] ((m k) v)})))","user":"542c1f73e4b0dad94371f29d"},{"problem":146,"code":"(fn tree-into-table [tree]\n  (reduce\n   (fn [acc [key value]]\n     (reduce\n      (fn [acc [key2 value2]]\n        (assoc acc [key key2] value2))\n      acc\n      value)\n     )\n   {}\n   tree))","user":"55fbc657e4b0f488688e0666"},{"problem":146,"code":"#(into {} (for [[k1 v1] %\n                [k2 v2] v1] \n           [[k1 k2] v2]))","user":"5aa998c6e4b0d174b936c8e5"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k1 v1] m\n                 [k2 v2] v1]\n              [[k1 k2] v2])))","user":"597dcb0ce4b0dbe32238d0a2"},{"code":"(fn t2t [m]\n  (into {}\n        (for [outer-key (keys m)\n              inner-key (keys (get m outer-key))]\n          [[outer-key inner-key] (get (get m outer-key) inner-key)])))","problem":146,"user":"4f68c485e4b07046d9f4ef7c"},{"code":"(fn prob-0146 [m1]\n  (into {} (for [k1 (keys m1)\n                 :let [m2 (m1 k1)]\n                 k2 (keys m2)]\n             [[k1 k2] (m2 k2)])))","problem":146,"user":"4f047c07535dcb61093f6bcd"},{"problem":146,"code":"(fn [s] (apply conj (for [[k v] s\n            [a b] v] (hash-map [k a] b))))","user":"57bd960fe4b05aa3c4741c52"},{"code":"(fn [m] (apply merge (#(flatten (for [[k v] m]\n                                            (flatten (for [[k2 v2] v] {[k k2] v2})))))))","problem":146,"user":"52c5c1c8e4b0c2d177d620fc"},{"problem":146,"code":"(fn [amap]\n  (apply merge\n         (for [i (keys amap)]\n           (apply merge\n                  (for [j (get amap i)]\n                    (hash-map [i (first j)] (second j)))))))","user":"5705e404e4b0b0fb43fd0676"},{"code":"(fn flatter [a-map]\n  (into {} (for [[k v] a-map\n                  [kk vv] v]\n              [[k kk] vv])))","problem":146,"user":"5290257ae4b0239c8a67af03"},{"problem":146,"code":"(fn [moh] (into {} (for [k (keys moh) v (keys (moh k))] {[k v] ((moh k) v)})))","user":"54908cc1e4b0b312c081ff32"},{"code":"(fn flattner [coll]\n  (apply hash-map (apply concat (for [[k v] coll [k1 v1] v] [[k k1] v1])))\n  )","problem":146,"user":"4ecfa05c535d44c135fd68b9"},{"problem":146,"code":"(fn flatmap [m]\n  (let [rec (for [e m\n                  :let [k1 (first e)\n                        k2 (keys (second e))\n                        v2 (vals (second e))\n                        reconfig (mapcat #(vec (list [k1 %1] %2)) k2 v2)]]\n              reconfig)]\n    (into {} (map vec (partition 2 (apply concat rec))))))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":146,"code":"(fn ft [mp]\n  (into {} (for [[k1 v1] mp\n                 [k2 v2] v1]\n             [[k1 k2] v2])))","user":"54d5343fe4b0a52adc2e200a"},{"problem":146,"code":"(fn into-tables [xss]\n  (->>\n    (map \n      (fn [[k1 v1]] \n        (map (fn [[k2 v2]] {[k1 k2] v2}) v1)) xss)\n    (reduce concat)\n    (apply conj {})))","user":"57d9bca1e4b0bd073c202405"},{"problem":146,"code":"#(into {} (for [[k1 v1] % [k2 v2] v1] (vector (vector k1 k2) v2)))","user":"564a5a09e4b0284900eef656"},{"code":"#(into {}\n       (for [[k v] % [k2 v2] v] [[k k2] v2]))","problem":146,"user":"514721c6e4b0d520409ed392"},{"problem":146,"code":"(fn [n]\n  (into {}\n        (for [[x y] n [x2 y2] y] (vec [[x x2] y2]))))\n\n;Reference: https://clojuredocs.org/clojure.core/into\n;into was used so the elements can be inserted inside {}","user":"5a99b87ee4b0d174b936c7af"},{"problem":146,"code":"#(into {} (for [[k v] % [vk vv] v]\n                 [[k vk] vv]))","user":"57ee82b1e4b0bfb2137f5bbd"},{"code":"(fn [s]\n  (into {} (mapcat (fn [x] (for [y (second x)] {[(first x) (first y)] (second y)})) s))\n)","problem":146,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"#(into {} (for [[x a] % [y z] a] [[x y] z]))","problem":146,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":146,"code":"(fn [t]\n  (into {}\n    (for [[k1 m] t [k2 s] m]\n      (vec [[k1 k2] s]))))","user":"54b95f3de4b0ed20f4ff6eab"},{"problem":146,"code":"#(reduce merge (for [[a b] %\n                     [c d] b]\n                 {[a c] d}))","user":"51ab70c3e4b04e3dc0c27b33"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k v] m\n        [v1 v2] v]\n    [[k v1] v2])))","user":"54133900e4b01498b1a719de"},{"code":"(fn tree-to-table [m]\n  (reduce #(conj %1 %2)\n          {} \n          (for [k1 (keys m)\n                k2 (keys (m k1))\n                :let [v ((m k1) k2)]] \n            [[k1 k2] v])))","problem":146,"user":"4e7263a1535d5021c1a8965f"},{"code":"#(let [dildo (for [a %, b (second a)]\n[[(first a) (first b)] (second b)])]\n(reduce (fn [c [x y]] (assoc c x y)) {} dildo)\n)","problem":146,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"code":"#(into {} (for [[k1 v1] % [k2 v2] v1] [[k1 k2] v2]))","problem":146,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [m] (let\r\n  [kvs (for [[k v] m [kk vv] v] [[k kk] vv])]\r\n  (into {} kvs)))","problem":146,"user":"4daa374930acd6ed13482a68"},{"code":"#(into {}\n       (for [[k1 v1] % [k2 v2] v1]\n         [[k1 k2] v2]))","problem":146,"user":"4e7dd982535db169f9c796ee"},{"problem":146,"code":"(fn [v]\n  (into {}\n        (for [[x1 :as x] v\n              [y1 y2] (second x)]\n          [[x1 y1] y2])))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"code":"(fn [nm] (into {}(for [[k v] nm [k2 v2] v] {[k k2] v2})))","problem":146,"user":"52c60945e4b0c2d177d62108"},{"problem":146,"code":"(fn [mapval] (into {} (for [ [key1 map1] mapval\n                                  [key2 val] map1\n                                 ]\n                              {[key1 key2] val}\n                          )))","user":"53c73e8ae4b00fb29b2212a5"},{"code":"(fn f [mom]\n  (loop [kks (for [k1 (keys mom)\n                   k2 (keys (mom k1))]\n                [k1 k2])\n        newmap {}]\n    (if (empty? kks) newmap\n      (let [[k1 k2] (first kks)\n            v ((mom k1) k2)]\n        (recur (rest kks) \n          (assoc newmap [k1 k2] v))))))","problem":146,"user":"4f036fb3535dcb61093f6ac8"},{"problem":146,"code":"(fn [m]\n  (loop [tmpm m ans {}]\n    (if (empty? tmpm)\n      ans\n      (recur (rest tmpm) \n      \t(loop [tomap1 (first (first tmpm)) tomap2 (second (first tmpm)) a ans]\n                           (if (empty? tomap2)\n                             a\n                             (recur tomap1 (rest tomap2) \n                             \t(assoc a (conj (conj '() (first (first tomap2))) tomap1) \n                             \t\t(second (first tomap2))))))))))","user":"59368ccae4b02506e01a297a"},{"problem":146,"code":"(fn [m]\n  (let [vector-map\n        (for [[k v :as e] m]\n          (if (map? v)\n            (into [] (for [[k2 v2] v] [[k k2] v2]))\n            [e]))]\n    (into {} (apply concat vector-map))))","user":"54684c3be4b00cfc9eacc139"},{"code":"(fn tree->table [dict]\n  (apply hash-map (apply concat (map (fn [x]\n                         (let [dx (dict x)]\n                           (apply concat (map (fn [v] [[x v] (dx v)]) (keys dx)))))\n                         (keys dict)))))","problem":146,"user":"536d83cee4b0fc7073fd6e5e"},{"code":"(fn __\n  ;; body 1: user function\n  ([amap] (reduce merge (__ amap [])))\n  ;; body 2: helper function\n  ([amap acc]\n     (cond\n      ;; if it is not a map, return it                      ; this vector is opened up by solution binding\n      (not (= (type amap) clojure.lang.PersistentArrayMap)) [(zipmap [acc] [amap])]\n      ;;\n      :else (for [node     amap\n                  solution (__ (val node) (conj acc (key node)))]\n              ;; \n              solution))))","problem":146,"user":"53415755e4b00652c8746ecd"},{"problem":146,"code":"#(reduce into (for [[k v] %] (reduce into (for [[x y] v] {[k x] y}))))","user":"52a267c6e4b04e0c58e87bef"},{"code":"(fn [m]\n  (apply merge\n \t(mapcat \n    #(for [x (second %)]\n     \t(hash-map [(first %) (first x)] (second x))) (seq m))))","problem":146,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":146,"code":"(fn [m] (apply merge (for [i (keys m) j (keys (get m i))] {[i j] (get (get m i) j)})))","user":"569c40cee4b0542e1f8d1462"},{"problem":146,"code":"(fn flatten-maps [ms]\n  (letfn [(insert-key [new-key m]\n            (into {}\n                  (for [[k v] m]\n                    (assoc {} (vector new-key k) v)\n                    )))\n          ]\n    (into {} (map insert-key (keys ms) (vals ms)))\n    )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"code":"(fn [x]\n  (into {}\n        (flatten (map (fn [k v]\n                        (flatten (map\n                                   #(hash-map (vector % (key %2)) (val %2))\n                                   (repeat k) v)))\n                      (keys x) (vals x)))))","problem":146,"user":"4ff9d4e5e4b0678c553fc3b0"},{"code":"(fn [m] (apply merge (apply concat\n  (for [[k v] m]\n                        (for [[j w] v]\n                             {[k j] w})))))","problem":146,"user":"4e599577535d8a8b8723a29f"},{"problem":146,"code":"(fn [m]\n  (->> (for [k1 (keys m)  \n              k2 (keys (m k1))\n              ]\n         [[k1 k2] ((m k1) k2)]\n\n         )\n       (apply concat)\n       (apply array-map)\n       )\n  )","user":"55e8a85be4b0121d4835fd98"},{"problem":146,"code":"(fn fmap [m]\n  (into {} (for [[x y] m [a b] y] [[x a] b])))","user":"54dce62be4b024c67c0cf78b"},{"problem":146,"code":"(fn tr [coll]\n  (apply merge\n         (for [[k1 v1] coll [k2 v2] v1]\n           { [k1 k2] v2 })))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":146,"code":"(fn [nest-map] (apply merge (for [[k v] nest-map ] (reduce #(assoc %1 [k (first %2) ] (last %2)) {} v )  )  )  )","user":"56a6051fe4b0542e1f8d14e5"},{"code":"(fn [x]\n  (into {}\n        (for [[a b] x\n              [c d] b]\n          [[a c] d])))","problem":146,"user":"51929214e4b08962174cf74c"},{"code":"#(apply merge (for [[k v] % [x y] v] {[k x] y}))","problem":146,"user":"4dada16fc9a9d6ed2699dc57"},{"problem":146,"code":"(fn flatmap [data]\n  (let [mapfn (fn [[k m]]\n                (for [ks (keys m)]\n                  {[k ks] (get m ks)}))]\n    (apply merge (flatten (map mapfn data)))))","user":"56ff45e5e4b08d47c97781bb"},{"code":"(fn hoge [m]\n  (into {} (for [[k v] m, [vk vv] v]{[k vk] vv})))","problem":146,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":146,"code":"(fn [xs]\n  (->> (for [x xs\n             y (val x)]\n         (vector (key x) (key y) (val y)))\n       (reduce #(assoc % (pop %2) (peek %2)) {})))","user":"55f73078e4b06e875b46cea4"},{"problem":146,"code":"(fn [map-of-maps]\n  (into {}\n        (for [[outer-key nested-map] map-of-maps\n              [inner-key value] nested-map]\n          [[outer-key inner-key] value])))","user":"54cc26c1e4b057c6fda3a28a"},{"problem":146,"code":"(fn [m]                                                               \n  (apply hash-map (mapcat                                                  \n    (fn [[k v]] (mapcat (fn [[k2 v2]] [[k k2] v2]) v)) m)))","user":"5e5096c6e4b027a2e10ac0c6"},{"problem":146,"code":"(fn [m]\n   (apply\n    merge\n    (mapcat\n     identity\n     (for [[k0 v0] m]\n       (for [[k1 v1] v0]\n         {[k0 k1] v1})))))","user":"6026d2cae4b0d5df2af22232"},{"code":"(fn [m]\n  (apply hash-map\n    (apply concat\n      (for [[k v] m [uk uv] v] \n        [[k uk] uv]))))","problem":146,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn tree-into-tables\r\n  [m]\r\n  (apply merge         \r\n         (for [x m y (second x)]\r\n           {[(first x) (first y)] (second y)})))","problem":146,"user":"4f2942ace4b0d6649770a01e"},{"problem":146,"code":"(fn doo [mapa]\n        (let [foo (fn foo [mapa]\n        (loop [\n               keyy (-> mapa first first)\n               val-map (-> mapa first rest first)\n               res {}]\n          (if (empty? val-map)  res\n              (recur keyy (rest val-map) \n                     (conj res \n                           (hash-map (vector keyy\n                                             (-> val-map first first))\n                                     (-> val-map first second)\n                                     )\n                           )\n                     )\n              \n              )))]\n        (if (empty? mapa) {}\n            (conj (doo (rest mapa))  (foo (conj {} (first mapa))))\n            )))","user":"6038b6b4e4b0d5df2af222ef"},{"problem":146,"code":"(fn[x]\n (apply hash-map\n        (apply concat \n  (map\n   (fn[y]\n    (apply concat (map\n     (fn[z]\n      [\n       [\n        (first y)\n        (first z)\n       ]\n       (second z)\n      ]\n     )\n     (second y)\n    )\n   ))\n   x   \n  )\n ))\n)","user":"54283a7ae4b01498b1a71b2f"},{"problem":146,"code":"(fn [m]\n  (apply conj {} (for [kv m\n                       kv-inner (second kv)]\n    \t\t\t\t{[(first kv) (first kv-inner)] (second kv-inner)})))","user":"5bcf0b1be4b0e9689409ee24"},{"problem":146,"code":"(fn rr [data]\n  (let [ dd\n           (for [y (vals data)\n                 ky (keys y)\n                 kv (vals y)\n                 k (keys data)\n                 :when (= kv ((data k) ky))\n                 zz {[k ky] kv}] zz)\n        ]\n    (into {} (vec dd))\n      ))","user":"52f426fce4b05e3f0be25f1e"},{"code":"#(into {} (for [[k v] %  \n                [l w] v ]\n            [[k l] w] ))","problem":146,"user":"4df20dda535d08e6dec9fe23"},{"code":"(fn [m]\n  (into {}\n    (apply concat\n      (for [parent-key (keys m)\n            :let [children (get m parent-key)]]\n        (for [child-key (keys children)\n              :let [child-value (get children child-key)]]\n          [[parent-key child-key] child-value])))))","problem":146,"user":"517531c6e4b07031762f2eea"},{"problem":146,"code":"(fn fl [m]\n  (into {} (apply concat (for [n m]\n                           (for [o (val n)]\n                             {[(key n) (key o)] (val o)})))))","user":"51456858e4b0e88796073408"},{"problem":146,"code":"(fn foo [coll]\n  (into {} \n    (for [[k v] coll [kk vv] v]\n      [[k kk] vv])))","user":"57c0917be4b05aa3c4741c95"},{"problem":146,"code":"(fn [x] (into {}  ;;; vamos a transoformar \"into\" {}\n              (apply concat  ;;; los vamos concat\n               (for [[k v] x]\n                 (map #(vector [k (first %)] (second %)) v))))) ;;; para cada v aplicar la funcion","user":"6075c214e4b069485764de5b"},{"problem":146,"code":"#(into {} (for [[k v] % [k_ v_] v] [[k k_] v_]))","user":"545ddac3e4b01be26fd74676"},{"problem":146,"code":"(fn [x] (into {} (for [[out_key out_val] x [in_key in_val] out_val] [[out_key in_key] in_val])))","user":"58a822e4e4b01a0c0b232950"},{"code":"#(into {} (for [[x y] % [k l] y] [ [x k] l]) )","problem":146,"user":"4ee7d177535d93acb0a6686f"},{"problem":146,"code":"(fn [a-map]\n  (apply merge\n         (map #(assoc {} (first %) (second %))\n              (for [a (keys a-map) b (a-map a)]\n                (cons (vector a (first b)) (rest b))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (mapcat (fn [[k v]]\n                  (map (fn [[k2 v2]]\n                         [[k k2] v2])\n                       v))\n                m)))","user":"4e5867d1535d8a8b8723a291"},{"problem":146,"code":"(fn table\n  [t]\n  (into {} (for [[k m] t [k' v] m] [[k k'] v])))","user":"52ea025ae4b09f7907dd14b5"},{"problem":146,"code":"(fn trees-into-tables\n  [map-of-maps]\n  (reduce merge (apply concat\n                       (for [x map-of-maps]\n                         (let [[k v] x]\n                           (for [y v]\n                             (hash-map [k (first y)] (second y))))))))","user":"550001d0e4b07d26eda61d57"},{"code":"(fn [m]\n  (into {} \n    (for [[k1 n] m\n          [k2 v] n]\n      [[k1 k2] v])))","problem":146,"user":"51ae350fe4b09397d5109790"},{"code":"#(apply merge \n               (for [k (keys %)\n                :let [s (get % k)]\n                ks (keys s)]\n             {(vector k ks) (get s ks)}))","problem":146,"user":"511b810ce4b07ab9ec456182"},{"code":"(fn [a] (into {} (for [x (keys a) y (keys (get a x))] [[x y] (get-in a [x y])])))","problem":146,"user":"4febb4dae4b0681fd128dc98"},{"code":"(fn trees-into-tables [m]\n  (apply array-map (reduce\n\n   (fn [a key]\n     (let [v (m key)]\n       (into a (reduce\n\n        (fn [aa kk]\n          (conj aa [key kk] (v kk)))\n\n        []\n        (keys v)))\n     ))\n\n   []\n   (keys m))))","problem":146,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":146,"code":"(fn [arg1]\n(cond\n(and (= arg1 (quote {a {p 1, q 2}, b {m 3, n 4}}))) (quote {[a p] 1, [a q] 2, [b m] 3, [b n] 4})\n(and (= arg1 (quote {[1] {a b, c d}, [2] {q r, s t, u v, w x}}))) (quote {[[1] a] b, [[1] c] d, [[2] q] r, [[2] s] t, [[2] u] v, [[2] w] x})\n(and (= arg1 (quote {m {1 [a b c], 3 nil}}))) (quote {[m 1] [a b c], [m 3] nil})\n))","user":"565f2461e4b068f2fe63dc3b"},{"code":"(fn [x] (into {} (for \n           \t[[k1 v1] x\n             [k2 v2] v1]\n           [[k1 k2] ((x k1) k2)])))","problem":146,"user":"510d1ff4e4b078ea7192112f"},{"code":"(fn [coll]\n  (into {}\n  (mapcat (fn [[k v]]\n            (for [[a b] v] {[k a] b})) coll)))","problem":146,"user":"51780f88e4b03d69594194c9"},{"code":"(fn [m] (into {} (mapcat identity\n  (for [[k1 v1] m]\n    (for [[k2 v2] v1]\n      [[k1 k2] v2])))))","problem":146,"user":"4faac363e4b081705acca200"},{"problem":146,"code":"(fn [mp]\n\t(reduce merge\n\t\t(map (fn [x] (zipmap (map #(cons (key x) [%]) (keys (val x))) (vals (val x))))\n\t\t mp\n\t\t)\n\t)\n)","user":"5d2201b8e4b02ea6f0fb69ed"},{"code":"(fn [m]\n    (reduce (fn [m1 [k v]] (assoc m1 k v)) {}\n            (mapcat\n             (fn [k]\n               (let [m1 (get m k)]\n                 (mapcat (fn [[k1 v1]] (hash-map [k k1] v1)) m1))) (keys m))))","problem":146,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"(fn [maps]\n  (->>\n   (for [[k v] maps\n        [k2 v2] v]\n     {[k k2] v2})\n   (apply merge)))","problem":146,"user":"51efd397e4b0249c592fbdeb"},{"code":"#(into {} (for [[x y] % [key value] y] (hash-map [x key] value)))","problem":146,"user":"50be9b4ae4b00fb48fed2ef6"},{"problem":146,"code":"(fn myflat [s] \n  (into {} (for [x (keys s)\n        y (-> s (get x))\n        :let [fmap (hash-map [x (key y)] (val y))]]\n   fmap\n  )))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":146,"code":"(fn o [m]\n    (apply hash-map\n     (apply concat\n            (apply concat (for [[k v] m]\n                            (for [[l w] v] [[k l] w]))))))","user":"603ae21de4b0d5df2af222fb"},{"code":"(fn flat [m] (into {} (for [[k1 v1] m [k2 v2] v1] {[k1 k2] v2})))","problem":146,"user":"526a3412e4b03e8d9a4a721e"},{"code":"(fn [m]\n      (reduce conj {}\n              (for [[k v] m\n                    [k' v'] v]\n                [[k k'] v'])))","problem":146,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":146,"code":"(fn [m] (into {} (mapcat (fn [[k v]] (mapcat (fn [[a b]] {[k a] b}) v)) m)))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":146,"code":"#(apply merge\n  (for [x (keys %)\n        y (keys (% x))\n        :let [z ((% x) y)]]\n    {[x y] z}\n  )\n)","user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn mapa [m]\r\n(apply hash-map\r\n (apply concat\r\n  (for [[k v] m [v1 v2] v] (list [k v1] v2)))))","problem":146,"user":"4f04a06d535dcb61093f6bd9"},{"code":"(fn [nm] \n  (into {} (for [[k v] nm [vk vv] v] [[k vk] vv])))","problem":146,"user":"4e6b6294535d8ccf87e9ff11"},{"code":"#(into {}\n       (for \n         [[k v] %\n          [s t] v]\n         [[k s] t]))","problem":146,"user":"526a7025e4b03e8d9a4a722a"},{"problem":146,"code":"(fn my-for\n    [m]\n    (into (sorted-map) \n          (for [k (keys m)\n                v (m k)]\n            { [k (first v)] (last v) } )))","user":"56826ebce4b0945ebc182a93"},{"code":"(fn [m] (apply hash-map (apply concat (for [a m, b (val a)] [[(key a) (key b)] (val b)]))))","problem":146,"user":"4f559d2ce4b0a7574ea71808"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k v] m\n              [vk vv] v]\n          (vec [[k vk] vv]))))","user":"54d000c7e4b018d918be98d7"},{"code":"(fn [m]\n (into {}\n       (apply concat\n              (for [[k  v] m]\n                (for [[k1 v1] v]\n                  [[k k1] v1])))))","problem":146,"user":"5220bc0fe4b0e6a83c8925a7"},{"code":"(fn[mp]\n   (reduce merge (flatten (for [v1 (keys mp)]\n     (for [v2 (keys (get mp v1))] {[v1 v2] (get (get mp v1) v2)})))))","problem":146,"user":"4fb86dc9e4b081705acca2d8"},{"problem":146,"code":"(fn __ [in]\n  (let [tx1 (fn [acc1 [outer-key inner-map]]\n              (conj acc1 (reduce (fn [acc2 [k v]]\n                                   (conj acc2 [outer-key [k v]]))\n                                 []\n                                 inner-map)))\n        tx3 (fn [[k v]]\n              (let [[k2 v2] v]\n                [[k k2] v2]))]\n  (->> in\n       (reduce tx1 [])\n       (apply concat)\n       (map tx3)\n       (into {}))))","user":"55916764e4b0604b3f94d57b"},{"code":"(fn [x]\n  (zipmap (for [a (keys x)\n                b (keys (get x a))]\n            (vector a b)) (for [a (keys x)\n                                b (keys (get x a))]\n                            (get (get x a) b))))","problem":146,"user":"507ef25ce4b0f753b6f9788e"},{"problem":146,"code":"(fn [m]\n  (apply hash-map (apply concat (apply concat\n         (for [[x y] m]\n           (for [[z v] y] [[x z] v]\n             )\n           )\n         )\n  )))","user":"55e1d34ae4b050e68259b421"},{"code":"(fn [x]\n  (into {}\n    (mapcat identity\n      (for [[k v] x]\n       (if (map? v)\n         (for [[k2 v2] v]\n           [[k k2] v2])\n         [[k v]])))))","problem":146,"user":"4e50e2a0535dc968683fc4ef"},{"problem":146,"code":"(fn [x]\n  (let [up (fn [key x] (if (map? x)\n                         (map #(hash-map (vector key (first %)) (last %)) x)\n                         (hash-map key x)))]\n    (reduce into {} (map #(up (key %) (val %)) x))))","user":"55205564e4b08d5046aa8a60"},{"problem":146,"code":"(fn [m]\n  (reduce\n   (fn [acc path] (assoc acc path (get-in m path)))\n   {}\n   (for [k (keys m)\n         kk (keys (get m k))]\n     [k kk])))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":146,"code":"#(apply merge (for [[k1 m] %\n                    [k2 v] m]\n                {[k1 k2] v}))","user":"539dcb24e4b0b51d73faaf3d"},{"problem":146,"code":"(fn flatten-hashmap\n  [m]\n  (apply merge\n         (for [[outer-key outer-value] m\n               [inner-key inner-value] outer-value]\n           {[outer-key inner-key] inner-value})))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":146,"code":"#(into {} (for [[k1 m1] %\n                [k2 v] m1]\n            [[k1 k2] v]))","user":"53ea5307e4b036ad0777e4e2"},{"problem":146,"code":"(fn [col]\n  (apply conj\n   \t(for [x col, y (val x)] \n      (hash-map [(key x) (key y)] (val y)))))","user":"55b4fa46e4b01b9910ae2983"},{"code":"(fn mtab [m]\n  (letfn [(ktab [k v]\n                (reduce\n                 (fn [acc, x]\n                   (assoc acc [k (nth x 0)] (nth x 1)))\n                 {}\n                 v)\n                )]\n    (reduce\n     (fn [acc, x]\n       (merge acc (ktab (nth x 0) (nth x 1))))\n     {}\n     m)))","problem":146,"user":"51365524e4b04ac1f358dd52"},{"problem":146,"code":"(fn flat2 [m2] (apply merge (for [x m2 y (val x)] {[(key x) (key y)] (val y)})))","user":"571aad45e4b07c98581c3b59"},{"code":"(fn [m] (into {} (for [x m y (second x)] [[(first x) (first y)]\n(second y)])))","problem":146,"user":"4e22b78b535d04ed9115e81e"},{"problem":146,"code":"(fn\n    [a]\n    (into {} (mapcat (fn [x] (map #(conj [[(first x) (first %)]] (last %)) (last x))) a)))","user":"542f574be4b0dad94371f2d0"},{"problem":146,"code":"(fn [s]\n  (into {} (flatten \n\t  (for [[k m] s]\n    \t(for [[k2 v] m]\n\t   \t  {[k k2] v})))))","user":"570459a9e4b0b0fb43fd0662"},{"problem":146,"code":"#(into {} (for [[ki va] %\n                [ki2 va2] va]\n            [[ki ki2] va2]))","user":"55a68518e4b09e57187da29b"},{"code":"#(into {} (for [[k1 m] % [k2 v] m] {[k1 k2] v}))","problem":146,"user":"4fb3dd1ee4b081705acca2a5"},{"code":"(fn [m]\n  (into {} (map (fn [[k v]] (reduce (fn [r [ik iv]] (assoc r [k ik] iv)) {} v)) m)))","problem":146,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn [m]\r\n  (into {}\r\n  \t(for [[k1 v1] m, [k2 v2] v1] [[k1 k2] v2])))","problem":146,"user":"4f0446f9535dcb61093f6bb8"},{"code":"#(into {} (for [[k m] % [n o] m] [[k n] o]))","problem":146,"user":"5098f5d6e4b0cae2931060a4"},{"code":"(fn flatten-map [m]\r\n    (into {}\r\n          (for [[outer-key outer-val] m\r\n                [inner-key inner-val] outer-val]\r\n            [[outer-key inner-key] inner-val])))","problem":146,"user":"4f149e0f535d64f60314643d"},{"problem":146,"code":"(fn test [param]\n  (let [flat (for [x param y (second x)] [[(first x) (first y)] (second y)])]\n  (reduce #(assoc %1 (first %2) (second %2)) {} flat)))","user":"52d809bde4b09f7907dd1384"},{"problem":146,"code":"#(into {} (for [x % y (val x)] \n               [ [(key x) (first y)] (second y)]))","user":"51e1c176e4b06a68e693eafb"},{"problem":146,"code":"(fn [m]\n    (into {}\n          (for [akey (keys m) [subkey subvalue] (get m akey)]\n            [[akey subkey] subvalue])))","user":"53a83c74e4b047364c044426"},{"code":"(fn [tm] \n  (reduce #(assoc %1 (vector (first %2) (first (second %2))) (last (second %2))) {} (for [k (keys tm) v (get tm k)]  [k v] )))","problem":146,"user":"52016fd3e4b0b2e020a18f10"},{"problem":146,"code":"(fn xtree [t]\n  (let [keys (keys t)]\n    (reduce into {}\n            (filter\n              map?\n              (tree-seq seq? seq (for [k keys] (for [[sk sv] (t k)] {[k sk] sv})))\n              )\n            )\n    )\n  )","user":"53ca41dae4b00fb29b2212c8"},{"code":"(fn [m]\n  (into {}\n        (for [[k1 v1] m\n              [k2 v2] v1]\n          [[k1 k2] v2])))","problem":146,"user":"4f969a66e4b0dcca54ed6cde"},{"code":"(fn [m]\n  (into {} (for [[k v] m\n                 [k1 v1] v] [[k k1] v1])))","problem":146,"user":"532347dde4b09d4e7a9b54cc"},{"code":"(fn [m] (into {} (for [x m y (val x)] [[(key x) (key y)] (val y)])))","problem":146,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(fn [m] (into {} (for [[k innermap] m [k2 v2] innermap] {[k k2] v2})))","problem":146,"user":"4ded56bb535d08e6dec9fe0b"},{"problem":146,"code":"(fn [m]\n   (into {}\n         (for [x m\n               y (second x)]\n           [[(first x) (first y)] (second y)])))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"#(reduce merge (for [[k1 h1] % [k2 v] h1] {[k1 k2] v}))","problem":146,"user":"4f8345c6e4b033992c121c1b"},{"problem":146,"code":"(fn make-path\n  ([path mp]\n   (apply concat\n          (for [[key val] mp]\n            (if (not (map? val))\n              {(conj path key) val}\n              (make-path (conj path key) val)))))\n  ([mp] (into {} (make-path [] mp))))","user":"54f09599e4b024c67c0cf89d"},{"problem":146,"code":"#(into {} (for [[x y] % [z w] y] {[x z] w}))","user":"57c647bbe4b05aa3c4741cf3"},{"code":"#(into {} (for [[a b] % [c d] b]\n            [[a c] d]))","problem":146,"user":"510d9d61e4b078ea71921141"},{"problem":146,"code":"(fn u\n  [m]\n  (into {}\n        (apply concat\n               (for [[k v] m]\n                 (map #(vector [k (first %)] (second %)) v)))))","user":"5723e6d6e4b0c5bde472c0f1"},{"problem":146,"code":"(fn [map]\n  (into {}\n        (for [[e v] map\n              [ve vv] v]\n          (vec [[e ve] vv]))))","user":"5e978fe5e4b0157ca96647d1"},{"code":"#(into {} (for [x % :let [a (get x 0) b (keys(get x 1)) c (vals (get x 1))]] \r\n  (zipmap (for [y b] [a y]) c) ))","problem":146,"user":"4f4bd422e4b03ad3f0c10c7e"},{"code":"#(\n  reduce into {}\n  (for [x (keys %)]\n    (map (fn [[f s]] {[x f] s}) (% x)))\n)","problem":146,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [[k v] mp\n              [vk vv] v]\n          (vec [[k vk] vv]))\n        )\n  )","user":"60cc2d58e4b0e0fa5f1b4323"},{"code":"(fn flatten-map [m]\n  (apply hash-map (apply concat (for [entry m, subentry (val entry)] [[(key entry) (key subentry)] (val subentry)]))))","problem":146,"user":"4f047902535dcb61093f6bcc"},{"problem":146,"code":"#(into {} (for [[k v] %\n          [kk vv] v]\n      [[k kk] vv]))","user":"56012cd7e4b04bb52996e17d"},{"problem":146,"code":"#(into {} (for [[a b] % [k v] b] {[a k] v}))","user":"5587ddd9e4b059ccff29b1ea"},{"code":"#(reduce conj (for [x % y (second x)] (hash-map [(first x) (key y)] (val y))))","problem":146,"user":"52bbd09ee4b07a9af57922ee"},{"problem":146,"code":"(fn [m]\n  (apply merge (#(let [out {}]\n            (for [[k1 v1] %\n                  [k2 v2] v1]\n              (assoc out [k1 k2] v2))) m)))\n\n;(fn [m]\n;  (into {} (for [[k1 v1] m \n;                 [k2 v2] v1]\n;             [[k1 k2] v2])))","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":146,"code":"(fn trees-into-tables [xs]\n  (reduce merge (flatten\n    ((fn path-to-value [-map & [acc]]\n      (for [[k v] -map]\n        (let [acc (or acc [])]\n          (if (map? v)\n            (path-to-value v (conj acc k))\n            (hash-map (conj acc k) v))))) xs))))","user":"55fb58b2e4b0f488688e0661"},{"problem":146,"code":"#(apply merge (for [outer (keys %) inner (keys (% outer))] {[outer inner] (get-in % [outer inner])}))","user":"5b7bc82ce4b047b03b203726"},{"code":"#(into {}\n      (for [[k v] %\n            [ik iv] v]\n        [[k ik] iv]))","problem":146,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":146,"code":"(fn [xs] \n  (apply hash-map \n         (apply concat \n                (for [[key1 inner] xs [key2 value] inner] [[key1 key2] value]))))","user":"54d03026e4b018d918be98de"},{"problem":146,"code":"(fn [m] \n   (into {} (for [x (keys m)\n                 y (keys (m x))]\n   [[x y] (get-in m [x y])]\n             )))","user":"4ff4bed0e4b0678c553fc35f"},{"problem":146,"code":"#(->>\n    (for [[k v] % [k2 v2] v] [[k k2] v2])\n    (apply concat)\n    (apply hash-map))","user":"55f48d1be4b06e875b46ce7b"},{"problem":146,"code":"#(reduce (fn [a [k m]] (conj a (reduce (fn [b [l v]] (assoc b [k l] v)) {} m))) {} %)","user":"59638af5e4b066ee0a44b0cc"},{"code":"#(into {} (for [k (keys %) :let [m (get % k)] k1 (keys m)]\n   [[k k1] (get m k1)]\n   ))","problem":146,"user":"535ca812e4b04ce2eb3ed2b7"},{"problem":146,"code":"(fn [x] (into {} (for [[k1 v1] x\n                 [k2 v2] v1]\n             [[k1 k2] v2])))","user":"550ff2a3e4b06e50f9beb17f"},{"problem":146,"code":"(fn[m](reduce-kv(fn[m k v](reduce-kv #(assoc %[k %2]%3)m v)){}m))","user":"4db2903f535df7e46ed9b6bf"},{"code":"(fn [x] (into {} (mapcat #(for [a (val %)] [[(key %) (key a)] (val a)]) x)))","problem":146,"user":"513b77f3e4b00f740c76c403"},{"code":"#(into {} (for [k (keys %) v (% k)] { [k (key v)] (val v) }))","problem":146,"user":"4fb99483e4b081705acca2da"},{"problem":146,"code":"(fn [x]\n   (let [grouping (for [[a h] x]\n                    (for [[b v] h]\n                      [[a b] v]))]\n     (apply hash-map (apply concat (apply concat grouping))))\n   )","user":"53aaaf7ae4b047364c044444"},{"code":"(fn [x] (apply merge (flatten (for [a (keys x)\n               :let [b (keys (x a))\n                     c (vals (x a)) ]]\n           (map #(hash-map (vector a %) %2) b c )))))","problem":146,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":146,"code":"(fn [coll]\n          (reduce #(assoc %1 (first %2) (second %2)) {}\n                  (for [x coll y (second x)]\n                    [[(first x) (first y)] (second y)])))","user":"531c6e72e4b08068f379eda0"},{"problem":146,"code":"(fn [map-of-maps]\n  (into {}\n        (for [[key-1 val-1] map-of-maps\n              [key-2 val-2] val-1]\n          [[key-1 key-2] val-2])))","user":"4eda7cc3535d10e5ff6f530e"},{"problem":146,"code":"(fn [mps]\n  ( into {} \n    \t( for [[k1 k2] mps\n               [v1 v2] k2]\n          (vec [[k1 v1] v2]))))","user":"516d227fe4b06f078fab252d"},{"code":"(fn [xs] (apply hash-map (apply concat (for [[k1 v1] xs [k2 v2] v1] [[k1 k2] v2]))))","problem":146,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"#(apply merge (flatten (for [k (keys %)]\n                  (for [sub-k (keys (% k))]\n                    {[k sub-k] ((% k) sub-k)}))))","problem":146,"user":"4e42f930535dc968683fc49f"},{"code":"#(apply hash-map (mapcat identity (for [[k1 v1] %\n                                        [k2 v2] v1]\n                                    [[k1 k2] v2])))","problem":146,"user":"4f32a7f1e4b0d6649770a095"},{"code":"(fn [m]\n       (into {} (for [[k v] m\n                      [nk nv] v]\n                  [[k nk] nv])))","problem":146,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":146,"code":"#(into {} (flatten (for [[x y] %] (for [[o u] y ] [{[x o] u}]))))","user":"55d7312ee4b0e31453f64a9f"},{"problem":146,"code":"(fn [map](into {} (for [[x y] map [yx yy] y] (vec [[x yx] yy]))))","user":"607f3336e4b05857a65e7747"},{"code":"#(into {} (for [[k m] %\n      [k2 v] m]\n  [[k k2] v]))","problem":146,"user":"52d1e364e4b0d9f9285948e7"},{"code":"(fn [m]\n  (into {}\n        (for [[k1 v1] m [k2 v2] v1]\n          [[k1 k2] v2])))","problem":146,"user":"5126dbabe4b083bb8f88cf0e"},{"code":"#(into {} \n    (for [[a b] %\n          [c d] b]\n        [[a c] d]))","problem":146,"user":"4dbad895535d1e037afb21ae"},{"code":"(fn [x]\n(apply merge\n(for [[a b] x [c d] b]\n {[a c] d}\n)))","problem":146,"user":"5094057fe4b097f48cc38593"},{"problem":146,"code":"#(let [\nf1 (fn [m] (map (fn [x] (assoc {} x (keys (get-in m [x])))) (keys m)))\nf2 (fn [x] (map (fn [y] (conj [] (first (keys x)) y)) (first (vals x))))\nks (apply concat (map f2 (f1 %))) \nvs (apply vector (map (fn [x] (get-in % x)) ks))\n]\n(apply assoc {} (interleave ks vs))\n)","user":"5e13a6b7e4b099d064963001"},{"problem":146,"code":"(fn  [m]\n  (into {}\n        (apply concat\n               (for [[k v] m]\n                 (map #(vector [k (first %)] (second %)) v)))))","user":"57f81524e4b0d3187e900913"},{"code":"(fn [m] (into {} (for [k (keys m) k2 (keys (get m k))] [[k k2] (get-in m [k k2])])))","problem":146,"user":"51990df9e4b068aa333628fc"},{"code":"(fn tt [t]\n  (letfn [(tit\n          ([t] (tit t []))\n          ([t a]\n           (if (map? t)\n             (mapcat #(tit (val %) (conj a (key %))) t)\n             [a t])))]\n    (apply array-map (tit t))))","problem":146,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":146,"code":"(fn tt [m] \n   (reduce into {} \n      (map (fn [[k v]] \n               (for [[k2 v2] v] \n                  (assoc {} [k k2] v2))) m)))","user":"59f043d0e4b0966464fe6a3d"},{"code":"(fn tabulate\n  [tree]\n  (->> (for [[k1 v1] tree\n             [k2 v2] v1]\n         [[k1 k2] v2])\n       (into {})))","problem":146,"user":"4dad7adac9a9d6ed0599dc57"},{"code":"(fn [m] (into {} (apply concat (for [[k v] m] (for [[k2 v2] v] [[k k2] v2]) ))))","problem":146,"user":"4f9510b5e4b0dcca54ed6cc7"},{"problem":146,"code":"(fn map-flatten [m]\n  (into {} (for [k (keys m)\n                 kk (keys (m k))]\n             [[k kk] ((m k) kk)])))","user":"561d23e3e4b064ca9f4b16a5"},{"code":"#(into {}\n        (for [[a b] %\n              [c d] b]\n          [[a c] d]))","problem":146,"user":"529b44afe4b02ebb4ef7509d"},{"problem":146,"code":"#(into {} (apply concat (map (fn [x] (map (fn [y] [[(first x) (first y)] (second y)]) (second x))) % )))","user":"57011eb3e4b08d47c97781d1"},{"problem":146,"code":"(fn\n  [tree]\n  (->> (for [[k v] tree]\n        (reduce-kv (fn [a mk mv]\n                     (assoc a [k mk] mv))\n                   {}\n                   v))\n      (into {})))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":146,"code":"#(into {}\n       (mapcat\n        (fn [[k v]]\n          (map (fn [[k' v']]\n                 [[k k'] v']) \n               v)) \n        %))","user":"5591cc56e4b0604b3f94d582"},{"problem":146,"code":"#(into {} (for [[x y] %\n                 [a b] y]\n             [[x a] b]))","user":"56706f01e4b0a866af6896f2"},{"code":"#(into {} (for [[x v] %\n                [y z] v] [[x y] z]))","problem":146,"user":"51057b2be4b06d28cacc92e8"},{"code":"#(into {} (for [[k1 m] % [k2 v] m] [[k1 k2] v]))","problem":146,"user":"4fc67081e4b0ee37620e1813"},{"code":"(fn [arg]\n  (->> (for [[x y] arg] (for [[z r] y] {[x z] r}))\n    (apply concat)\n    (apply merge)))","problem":146,"user":"504e12ade4b078edc5f593b7"},{"problem":146,"code":"#(into {}\n  (for [[k1 m] % \n        [k2 v] m] \n    {[k1 k2] v}))","user":"52f0ea04e4b05e3f0be25ee6"},{"code":"(fn [m]\n    (into {}\n          (for [[k v] m\n                [k1 v1] v]\n            {[k k1] v1})))","problem":146,"user":"4e705861535d5021c1a89635"},{"problem":146,"code":"#(into (hash-map) \n        (apply concat \n               (for [[x m] %] \n                 (for [[k v] m] {[x k] v} ))))","user":"55249f64e4b0882d96d091c6"},{"problem":146,"code":"(fn foo\n  [my-map]\n  (into {} (for [key-val my-map\n                 val (val key-val)]\n             (hash-map (vector (key key-val) (key val)) (last val)))))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":146,"code":"(fn [m]\n   (into {} (apply concat (for [[k v] m]\n                           (for [[k' v'] v]\n                             [[k k'] v'])\n                           )))\n   )","user":"567b2f20e4b05957ce8c61a2"},{"problem":146,"code":"(fn [x]\n       (reduce into (sorted-map) (for [y x\n             :let [a (first y)\n                   b (second y)]]\n          (map #(vector [a (first %)] (second %)) (seq b)))))","user":"5654cb2de4b0f9d632dd848b"},{"code":"(fn [n]\n  (into {} (for [[k v] n\n                 [a b] v]\n             [[k a] b])))","problem":146,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":146,"code":"#(into {}\n         (apply concat \n                (for [k1 (keys %)]\n                  (let [m (% k1)]\n                    (map (fn [[k2 v]] [[k1 k2] v]) m)))))","user":"54b13a40e4b09f271ff37d1b"},{"code":"(fn [tree]\n  (apply clojure.set/union\n    (for [[k1 m] tree]\n      (apply clojure.set/union\n        (for [[k2 v] m]\n          (hash-map\n           [k1 k2] v))))))","problem":146,"user":"519136e9e4b0f8ef0be96c01"},{"problem":146,"code":"#(into {} (for [i (keys %) j (keys (% i))] {[i j] ((% i) j)}))","user":"56979bb7e4b0e0b3d3318cac"},{"problem":146,"code":"(fn number146 [m]\n  (into {} (for [k (keys m)\n                 v (m k)]\n             {[k (key v)] (val v)})) )","user":"54074fc5e4b0addc1aec66b6"},{"problem":146,"code":"(fn [m] (into {} (for\n                    [[k v] m\n                     [ek ev] v]\n                    [[k ek] ev])))","user":"56481722e4b0284900eef628"},{"code":"#(into {}\n       (for [[k n] % [s v] n]\n         [[k s] v]))","problem":146,"user":"4e52d815535d302ef430da77"},{"problem":146,"code":"#(into {}\n        (for [[k v] %\n        [k2 v2] v]\n    [[k k2] v2]))","user":"531619c1e4b08068f379ed3d"},{"problem":146,"code":"(fn tree-to-table [t]\n  (apply merge\n         (for [[k v] t\n        \t[k2 v2] v]\n    \t{[k k2] v2})))","user":"54a627bce4b09f271ff37c83"},{"code":"(fn flatten-map [m] (apply hash-map\r\n                             (mapcat (fn [[k1,v1]]\r\n                                       (mapcat (fn [[k2,v2]] [[k1,k2] v2]) v1))\r\n                                     m)))","problem":146,"user":"4f62b29ce4b0defedf855fd9"},{"code":"(fn [m]\n  (apply (partial merge {})\n         (for [i m\n               j (second i)]\n           [[(key i) (key j)] (val j)])))","problem":146,"user":"5310e7aee4b08068f379ecdc"},{"code":"(fn [m1]\n  (into {}\n  (for [[k1 m2] m1\n        [k2 v2] m2]\n    [[k1 k2] v2])))","problem":146,"user":"51281b25e4b03a34742b4304"},{"code":"#(reduce (fn [m e]\n          (let [k (key e) v (val e)\n                vs (reduce (fn [m1 e1]\n                             (let [k1 (key e1) v1 (val e1)]\n                               (assoc m1 [k k1] v1))) {} v)]\n            (conj m vs))) {} %)","problem":146,"user":"4fbef9a6e4b081705acca316"},{"code":"(fn [m]\n  (into {} (map (fn [[k m2]]\n              (into {} (map (fn [[k2 v2]]\n                               [(vector k k2) v2])\n                               m2))) m)))","problem":146,"user":"512eb723e4b0b740abc5982b"},{"problem":146,"code":"(fn [m]\n  \n  (into {} (apply concat (for [x m\n     :let [[k kvs] x]]\n    \n    \n     (for [z kvs :let [[kk v] z]] [[k kk] v])\n    \n  )))\n  \n  \n  )","user":"570d0548e4b0b0fb43fd06d2"},{"problem":146,"code":"(fn [coll]   \n  (apply merge\n      (for [[k v] coll, [k0 v0] v] {[k k0] v0} )))","user":"593f95d8e4b069cdc2982be3"},{"code":"(fn [hmap]\n  (into {} (for [[k v] hmap, [k2 v2] v] [[k k2] v2])))","problem":146,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"code":"#(into {} (for [[k1 v1] % [k2 v2] (seq v1)] [[k1 k2] v2]))","problem":146,"user":"4ec1923f535dfed6da9c6db2"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k m'] m \n              k' (keys m')]\n          [[k k'] (m' k')])))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":146,"code":"#(into {} (for [[k m] %\n           [k' v] m]\n       [[k k'] v]))","user":"51febd40e4b0f1313d468a76"},{"code":"(fn [t]\n  (apply merge (for [[k v] t [fv sv] v]\n                 {[k fv] sv})))","problem":146,"user":"502940a9e4b061fd216be4b8"},{"code":"(fn getval3 [x] ((fn xx [k v v2]  (if (< 0 (count k)) \n                                      (merge (xx (rest k) (rest v) (rest v2)) ((fn con [y z inv] (if (< 0 (count y)) \n                                                                                                    (concat (con (rest y) z (rest inv)) (hash-map (vec (list z (first y))) (first inv)))\n                                                                                                    {}))\n\n                                                                                  (first k)\n                                                                                  (first v)\n                                                                                  (first v2) \n                                                                                  ))  \n                                      {})) (map keys (vals x)) (keys x ) (map vals (vals x)) ))","problem":146,"user":"5296aa9be4b02ebb4ef75034"},{"problem":146,"code":"(fn [s]\n(into (sorted-map)\n      (for [e s\n            se (second e) \n            k se :when (zero? (.indexOf se k))\n            v se :when (= 1 (.indexOf se v))\n            ]  [[(first e) k] v])))","user":"5b2689e3e4b063e2438bcc33"},{"problem":146,"code":"(fn [ms]\n  (into {} \n        (for [[k v] ms [k2 v2] v] [(vector k k2) v2])))","user":"559b55d6e4b066d22e731f54"},{"problem":146,"code":"#(into {} (for [[x y] %, [y z] y] [[x y] z]))","user":"50b42cbbe4b001349b2f4abe"},{"code":"#(apply merge\n    (for [ [k1 v1] % ]\n      (apply merge\n        (for [ [ k2 v2] v1 ]\n          { (vector k1 k2) v2 }))))","problem":146,"user":"5046b003e4b011c5dfee7727"},{"problem":146,"code":"(fn [coll]\n   (->> coll\n        (mapcat (fn [[k v]]\n                  (mapcat (fn [m]\n                            (list k m)) v)))\n        (partition 2)\n        (reduce (fn [fmap [x [y z]]]\n                  (merge-with into fmap {[x y] z})) {})))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"(fn [m] (apply hash-map (mapcat identity (mapcat identity (for [[x y]  m] (for [[k v] y] (list [x k] v)))))))","problem":146,"user":"4ea41fc2535d7eef308072cb"},{"problem":146,"code":"#(->> (for [[k v] % [a b] v] {[k a] b})\n    (apply merge))","user":"566ff0a1e4b0a866af6896ec"},{"problem":146,"code":"(fn tree-into-table [m]\n    (apply conj (for [k (keys m), \n                      [v vv] (get m k)]\n                  {[ k v ] vv}\n                  )))","user":"5433a07be4b0b6b47310fce0"},{"problem":146,"code":"#(into {} (mapcat identity (for [a %] (for [b (last a)] [[(first a) (first b) ] (last b)]))))","user":"594d4c57e4b07ddc2dafae87"},{"problem":146,"code":"#(apply hash-map\n       (apply concat\n              (apply concat\n                     (for [x %]\n                       (for [y (second x)]\n                         [[(first x) (first y)] (second y)])))))","user":"55868660e4b059ccff29b1d4"},{"code":"(fn [coll]\n  (reduce #(apply (partial assoc %) %2) {} \n        (for [[k v] coll\n              [ik iv] v]\n        [[k ik] iv])))","problem":146,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":146,"code":"(fn [mp]\n    (into {}\n          (for [[k v] mp\n                [vk vv] v]\n            (vec [[k vk] vv]))))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn [m]\r\n  (apply hash-map (mapcat #(list %1 (get-in m %))\r\n    (mapcat\r\n      (fn [k]\r\n        (map (partial list k)\r\n             (keys (get m k))))\r\n      (keys m)))))","problem":146,"user":"4ff304f4e4b0678c553fc343"},{"code":"#(into {} (for [[k1 v] % \n                [k2 v2] v]\n            [[k1 k2] v2]))","problem":146,"user":"4f036d9b535dcb61093f6ac1"},{"problem":146,"code":"#(reduce (fn [m [k v]]\n          (if (map? v)\n            (reduce-kv (fn [m1 k1 v1]\n                         (assoc m1 [k k1] v1)) m v)\n            (assoc m k v))) {} %)","user":"5ccc2a03e4b0ccb06196288f"},{"problem":146,"code":"(fn [x]\n  (apply merge\n  (flatten (for\n    [y x]\n    (for\n      [z (second y)]\n      {[(first y) (first z)] (second z)}\n    )\n  )))\n)","user":"53f17931e4b0742d9025b0dd"},{"problem":146,"code":"(fn flatmap [m]\n  (->> (for [[k1 v1] (seq m) [k2 v2] (seq v1)] [[k1 k2] v2])\n       (into {})))","user":"5aa4f7dae4b0d174b936c88c"},{"code":"#(into {} \n      (for [i % j (val i)]\n        [[(key i) (key j)] (val j)]))","problem":146,"user":"4ec74de3535d6d7199dd36df"},{"code":"(fn [m]\r\n    (into {}\r\n          (for [[k1 v1] m\r\n                [k2 v2] v1]\r\n            [[k1 k2] v2])))","problem":146,"user":"50436470e4b034ff00315d23"},{"problem":146,"code":"(fn [tree]\n  (into {} (apply concat (for [[k v] tree]\n                           (map #(vector [k (first %)] (second %)) v)))))","user":"57f81549e4b0d3187e900918"},{"problem":146,"code":"(fn [m] (reduce into {} (for [[k v] m] (for [[kv vv] v] [[k kv] vv]))))","user":"4dc78527535d8a4b2fd7428f"},{"code":"#(into {} (for [[k v] %\n                [ky va] v] \n               {[k ky] va}))","problem":146,"user":"53973e7be4b0b51d73faaee6"},{"problem":146,"code":"#(into {}  (for [[k v] %\n                 [kk vv] v]\n             [[k kk] vv]))","user":"54be7c0de4b0ed20f4ff6eec"},{"problem":146,"code":"(fn ee [mymap]\n (apply merge (for [x mymap y (val x)]  \n  {(vector (key x) (key y)) (val y)})))","user":"541ddadbe4b01498b1a71a84"},{"problem":146,"code":"(fn [m]\n           (into {} (for [[k v] m\n                          [k2 v2] v]\n                      [[k k2] v2])))","user":"530b8580e4b02e82168697cc"},{"problem":146,"code":"(fn tintot [m]\n  (into {} (for [k1 (keys m) k2 (keys (m k1))] [[k1 k2] (get-in m [k1 k2])])))","user":"5cab33e7e4b048ec896c5c48"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [[k v] mp\n              [vk vv] v]\n          {[k vk] vv})))","user":"5984e7dee4b021a7a535fe43"},{"code":"#(reduce merge (flatten \n                       (for [[x y] %]\n             (map (fn [[k v]] {[x k] v}) y))))","problem":146,"user":"4deff9f9535d08e6dec9fe15"},{"problem":146,"code":"(fn [coll]\n  (let [mk (fn [m]\n             (let [[k v] m r []] (for [x [k] y (keys v)] (conj r x y))))\n        mkeys (apply concat (map mk coll))]\n    (reduce (fn [a x] (assoc a x (get-in coll x))) {} mkeys)))","user":"606a70a5e4b069485764ddf2"},{"problem":146,"code":"#(apply merge\n         (for [[x y] %\n               [a b] y\n               :let [k [x a]\n                     v b]]\n           {k v}))","user":"4eb47bb1535d7eef30807362"},{"problem":146,"code":"(fn [m]\n  (reduce (fn [acc [k v]]\n            (reduce (fn [acc' [k' v']]\n                      (assoc acc' [k k'] v'))\n                    acc\n                    v))\n            {}\n            m))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":146,"code":"#(apply hash-map \n        (apply concat \n               (apply concat\n                      (for [[k v] (seq %)]\n                                        (for [[sk sv] (seq v)]\n                                          [[k sk] sv])))))","user":"51780bfce4b0f89a8f53839c"},{"problem":146,"code":"#(into {}\n   (for [[k v] %\n         [x y] v]\n     [[k x] y]))","user":"594880ade4b07ddc2dafadc2"},{"problem":146,"code":"(fn [x]\n  (apply hash-map\n    (mapcat identity\n \t(for [kv x\n          ikv (second kv)]\n      [[(first kv) (first ikv)] (second ikv)]\n    )\n    )\n  )\n)","user":"4e28ddd1535deb9a81d77efd"},{"code":"#(into {}\n   (for [[k v] %]\n     (reduce (fn [m [l v]] (assoc m [k l] v)) {} v)))","problem":146,"user":"51a10b2ce4b0b292b01ee3fe"},{"code":"#(into {} (for [[k1 v1] %, [k2 v2] v1] [[k1 k2] v2]))","problem":146,"user":"4fb12b35e4b081705acca275"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k1 m2] m\n          [k2 v]  m2]\n      [[k1 k2] v])))","user":"553b0d95e4b09218d5f44fff"},{"code":"#(into {}\n  (mapcat (fn [[a k]]\n     (map (fn [v] (hash-map [a v] (k v))) (keys k))) %))","problem":146,"user":"4f01ff83535dcb61093f6a3a"},{"problem":146,"code":"(fn [m]\n  (apply hash-map\n         (apply concat (for [[k0 v0] m :when (map? v0)\n                             [k1 v1] v0]\n                         [[k0 k1] v1]))))","user":"55c4e48be4b0e31453f649a7"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k v] m [k' v'] v] [[k k'] v'])))","user":"53d78b64e4b0e771c3025466"},{"code":"(fn [zm] (apply hash-map \n                (mapcat #(list (first %) (last %)) \n                        (for [ky (keys zm) :let [subb (get zm ky)] subkys (keys subb)] (list [ky subkys] (get subb subkys))))))","problem":146,"user":"52747090e4b03e8d9a4a74a5"},{"problem":146,"code":"#(apply merge (for [k1 (keys %) m1 (% k1) ] {[k1 (key m1)] (val m1)}))","user":"56a75810e4b0542e1f8d14fc"},{"problem":146,"code":"(fn [m] (into {} (for [[k v] m [x y] v] [[k x] y])))","user":"545e7ab0e4b01be26fd7467c"},{"code":"#(apply hash-map (apply concat (for [[k1 submap] %] (apply concat (for [[k2 v] submap] [[k1 k2] v])))))","problem":146,"user":"51a7b4fee4b0da5f497bde8b"},{"problem":146,"code":"#(into {}\n       (for [[k1 v1] %\n             [k2 v2] v1]\n         (hash-map [k1 k2] v2)))","user":"55dcb06ee4b050e68259b3b9"},{"problem":146,"code":"(fn [coll] (reduce (fn [acc [k v]] (assoc acc k v)) {} (for [[x u] (seq coll) [y z] (seq u)] [[x y] z])))","user":"5f86a98be4b0649ffcda4caa"},{"code":"(fn [m] (apply hash-map (apply concat (for [i m i2 (next i) l i2] [[(first i) (first l)] (l 1)]))))","problem":146,"user":"4e9d6a65535dbda64a6f6b87"},{"code":"#(apply merge (for [[k v] % [k2 v2] v] {[k k2] v2}))","problem":146,"user":"4e9660ec535dbda64a6f6b44"},{"code":"(fn [m]\n  (apply hash-map\n    (apply concat\n      (for [[k1 m2] m,\n            [k2 v] m2]\n            [[k1 k2] v]\n      )\n    )\n  )\n)","problem":146,"user":"4f725201e4b07046d9f4f02f"},{"problem":146,"code":"(fn trees->tables [m]\n  (->> m\n       (seq)\n       (map (fn [[k m]]\n              (map (fn [[kk v]]\n                     [[k kk] v])\n                   (seq m))))\n       (apply concat)\n       (apply concat)\n       (apply hash-map)))","user":"58637f03e4b0f14aab7c881e"},{"problem":146,"code":"#(into {}(for [[x y] % [z t] y] [[x z] t]))","user":"56824e1be4b0945ebc182a91"},{"problem":146,"code":"(fn my-flat2 [m]\n  (reduce (fn [out [k v]] (assoc out k v)) '{}\n  (for [[k _] m,  v (m k)]\n    (let [[k2 v2] v]\n      [[k k2] v2]))))","user":"53edb628e4b0d648e757f4c8"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[u vs] m\n              [v w] vs]\n          (vec [[u v] w]))))","user":"541096bde4b01498b1a719b2"},{"problem":146,"code":"#(into {} \n       (for [[k0 v0] % \n             [k1 v1] v0]\n         [[k0 k1] v1]))","user":"527ccaf4e4b0757a1b17136d"},{"code":";#(reduce (fn [acc x](let [[k v] x] (conj acc {k v}))) {} (for [x (keys %) y (keys  (% x))] [[x y] ((% x) y)]))\n#(into {} (map (fn [x](let [[k v] x] {k v}))  (for [x (keys %) y (keys  (% x))] [[x y] ((% x) y)])))","problem":146,"user":"50783762e4b0fc74642bff67"},{"problem":146,"code":"(fn [values] (reduce merge (flatten (for [[k v] values] (for [[k2 v2] v] {[k k2] v2})))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":146,"code":"(fn [args]\n  (into {} \n   (for [[k v] args\n        \t   [nk nv] v\n        :let [z [[k nk] nv]]\n       ]\n   z)\n  )\n)","user":"558fec41e4b0277789237666"},{"problem":146,"code":"(fn [xs]\n   (into {}\n         (mapcat\n          (fn [[k vs]] (map #(vector (vector k (key %)) (val %)) vs))\n          xs)))","user":"51b91b08e4b0e871ca4958f8"},{"problem":146,"code":"#(into {} (for [[k1 v1] % [k2 v2] v1]\n       [[k1 k2] v2]\n       ))","user":"57086931e4b0b0fb43fd069e"},{"code":"#(into {} (for [[a t] % [b v] t] [[a b] v]))","problem":146,"user":"4e49badd535dc968683fc4c9"},{"code":"#(into {} (for [x %]\n\t\t\t(into {} (for [y (second x)]\n\t\t\t  [[(first x) (first y)] (second y)]))))","problem":146,"user":"52cc09c1e4b07d0d72b27356"},{"problem":146,"code":"#(into {}\n        (for [[k v] %\n        [vk vv] v]\n    (vec [[k vk] vv])))","user":"55326aede4b09218d5f44f7c"},{"code":"(fn walk [coll]\n  (let [res (atom {})]\n\t(doseq [[top valmap] coll]\n\t\t(doseq [[key val] valmap]\n\t\t\t(swap! res assoc [top key] val)\n\t\t)\n\t)\n\t@res\n\t)\n)","problem":146,"user":"50588af1e4b06522596eba7d"},{"problem":146,"code":"#(into {} (for [[k1 sub] % [k2 value] sub] [[k1 k2] value]))","user":"59a72effe4b066c664927d94"},{"problem":146,"code":"(fn [dt]\n  (zipmap \n    (for [v dt u (val v)] (vector (key v) (key u)))\n      (if (vector? (ffirst (map vals (vals dt))))\n        (first (map vals (vals dt)))\n        (flatten (map vals (vals dt))))))","user":"525c575be4b0cb4875a45d38"},{"problem":146,"code":"(fn [m] (reduce merge (flatten (for [[x y] m] (map (fn [[k v]] {[x k] v}) y)))))","user":"5ab5f60be4b073f177442643"},{"problem":146,"code":"(fn [my-col] \n  (apply hash-map (reduce into [] (reduce #(into %1 ((fn [[k my-enties]] \n                       (for [[k2 v] my-enties] [[k k2] v])) %2)) \n          [] my-col))))","user":"5492164ee4b0b312c081ff3e"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k v] m\n              [vk vv] v]\n          (vec [[k vk] vv]))\n        )\n  )","user":"5c48757fe4b0e06e1360a3c3"},{"code":"(fn [m] (into {} (for [[k1 v1] m, [k2 v2] v1] [[k1 k2] v2])))","problem":146,"user":"4f1b0ab3535d64f603146474"},{"code":"#(into {} (for [[i j] % [k l] j] [[i k] l]))","problem":146,"user":"4ef49c2c535dced4c769f238"},{"code":"(fn do-it [nested]\n  (let [my-flatten (fn my-flatten [nested path]\n  (loop [ret {}\n         todo (keys nested)]\n    (let [k (first todo)\n          v (nested k)\n          p (conj path k)\n          r (rest todo)] \n      (if (empty? todo)\n        ret\n        (if (map? v)\n          (recur (into ret (my-flatten v p)) r)\n          (recur (assoc ret p v) r))))))]\n  (my-flatten nested [])))","problem":146,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":146,"code":"#(into {} (for [[k,v] % [k2,v2] v] [[k k2] v2]))","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"problem":146,"code":"(fn flatten-hashmap-map [map]\n  (into {}\n        (for [[key value] map\n              [value-key value-value] value]\n          [[key value-key] value-value])))","user":"58ed713de4b056aecfd47d84"},{"problem":146,"code":"#(into {} \n     (for\n       [[k v ] %, [k2 v2] v]\n       [[k k2] v2]))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":146,"code":"(fn [mm]\n  (apply hash-map\n         (apply concat\n          (for [[k1 m] mm\n                [k2 v] m]\n            [[k1 k2] v]))))","user":"55c68089e4b0e31453f649c4"},{"code":"#(into {} (for [parent %, :let [key (first parent)] value (second parent) :let [subkey (first value)]] [[key subkey] (second value)]))","problem":146,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":146,"code":"#(apply hash-map \n         (apply concat \n                (for [[k v] % [k2 v2] v] \n                     [[k k2] v2])))\n;destructuring to solve the problem","user":"528e441be4b0239c8a67aed8"},{"problem":146,"code":"(fn [m]\n\t(into {}\n          (for [[k v] m [k2 v2] v]\n               [[k k2] v2]\n          )\n    )\n)","user":"5472d919e4b094393f72dd7b"},{"code":"(fn [tr]\n  (into {} (for [[k v] tr]\n             (reduce #(conj %1 {[k (key %2)] (val %2)}) {} v))))","problem":146,"user":"4df3df8a535d08e6dec9fe2d"},{"code":"(fn [e]\n  (apply merge\n         (for [x e]\n           (apply merge\n                  (for [s (range (count (second x)))]\n                    (hash-map\n                     (vector (first x) (nth (keys (second x)) s)) (nth (vals (second x)) s)))))))","problem":146,"user":"51c09719e4b0c9c82288293c"},{"code":"(fn [tree] (into {} (for [[k1 m] tree [k2 v] m] [[k1 k2] v])))","problem":146,"user":"521dceeae4b050d5da042802"},{"code":"(fn [m] (apply merge (for [x m y (val x)] {[(key x) (key y)] (val y)})))","problem":146,"user":"5150a7d7e4b03e678e393abb"},{"problem":146,"code":"(fn [amap]\n   (let [ks (keys amap)]\n     (apply merge\n            (flatten (for [k ks\n                           :let [vs (get amap k)]]\n                       (for [k2 (keys vs)]\n                         {[k k2] (get vs k2)}\n                         ))))))","user":"55a372f1e4b0acc240e31537"},{"problem":146,"code":"(fn test [coll]\n  (into {} (for [[k m] coll\n        [k_inner v] m]\n    [[k k_inner] v]\n   ))\n )","user":"54021f13e4b0df28a13c62cc"},{"code":"(fn [m] (apply hash-map\n    (mapcat identity (for [x m\n          y (last x)]\n      [[(first x) (first y)] (last y)]))))","problem":146,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":146,"code":"(fn [m]\n  (apply merge (for [k (keys m)\n                     kk (keys (m k))]\n                 {[k kk] (get-in m [k kk])})))","user":"511688d5e4b0b3e208dba05a"},{"code":"(fn [xs] (apply hash-map (apply concat (for [[k v] xs] (mapcat #(list [k (first %)] (second %)) v)))))","problem":146,"user":"4f0e995e535d0136e6c22326"},{"problem":146,"code":"(fn [vals]\n   (into {}\n    (for [[x h] vals\n          k (keys h)]\n      {[x k] (get h k)})))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":146,"code":"(fn x [x] \n  (reduce (fn [m [a b c]] (assoc m [a b] c)) {}\t\n   (for [s x v (val s)]\n    [(key s) (key v) (val v)] \n   )\n )  \n)","user":"56db90d4e4b0ea9b8538f80d"},{"problem":146,"code":"#(reduce merge\n         (for [i %, j (second i)]\n           (let [k1 (first i), [k2 v] j] (hash-map [k1 k2] v))))","user":"567695c2e4b05957ce8c6157"},{"code":"#(into {} (for [[k1 m] %\n                [k2 v] m]\n            [[k1 k2] v]))","problem":146,"user":"507b7dbee4b09034bfeeb71e"},{"problem":146,"code":"(fn [m] (into {}\n  (for [[k1 m1] m [k2 v] m1]\n    [[k1 k2] v])))","user":"55253217e4b0882d96d091ce"},{"code":"(fn [map]\n  (apply conj {}\n      (for [[k m] map\n           [k2 v] m]\n         [[k k2] v])))","problem":146,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":146,"code":"(fn tree-into-tab\n  [m]\n  (into\n    {}\n    (for [[k v] m\n          [vk vv] v]\n      (vec [[k vk] vv]))))","user":"565654dae4b0f9d632dd849f"},{"code":"(fn [m]\n  (into {}\n        (for [[k r] m\n              [l v] r]\n          [[k l] v])))","problem":146,"user":"4f05ea25535dcb61093f6c02"},{"code":"(fn flatten-map [m]\n  (into {} (for [[k1 v1] m\n                 [k2 v2] v1]\n             [[k1 k2] v2])))","problem":146,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn [mp]\n  (into {}\n        (for [[k v] mp\n        [vk vv] v]\n    (vec [[k vk] vv]))))","problem":146,"user":"4e977eb4535dbda64a6f6b56"},{"problem":146,"code":"#(apply merge (flatten (for [[k v] %]\n                        (for [[kk vv] v]\n                          {[k kk] vv}))))","user":"5712854ce4b07c98581c3a89"},{"problem":146,"code":"(fn __ [st]\n  (reduce-kv (fn [m k v]\n                   (reduce-kv (fn [m2 k2 v2] (assoc m2 [k k2] v2))\n                              m\n                              v)\n                   )\n                 {}\n                 st))","user":"58bc6a88e4b0888cdc949d16"},{"code":"(fn [m]\r\n    (reduce\r\n      (fn [r [k1 k2 v]] \r\n        (assoc r [k1 k2] v))\r\n      {}\r\n      (reduce \r\n        (fn [r t] \r\n          (apply conj r t))\r\n        '()\r\n        (for [[k v] m]\r\n          (for [[kp vp] (get m k)]\r\n            [k kp vp]))\r\n        )\r\n      ))","problem":146,"user":"4f0da4e4535d0136e6c22319"},{"code":"(fn [m] \n  (into {}\n        (apply concat\n\t\t  (for [[k1 v1] m]\n            (into {}\n\t\t\t    (for [[k2 v2] v1] \n      \t\t\t\t[[k1 k2] v2]))))))","problem":146,"user":"51662183e4b05e5ef6a5e807"},{"code":"(fn [x] (into {} (for [k1 (keys x)\r\n               :let [v1 (x k1)]\r\n               k2 (keys v1)]\r\n           [[k1 k2] (v1 k2)])))","problem":146,"user":"4feada56e4b0140c20fb9c11"},{"code":"#(apply merge (for [[k m] % [k1 v1] m] {[k k1] v1}))","problem":146,"user":"4ed98b40535d10e5ff6f5307"},{"problem":146,"code":"#(into {}\n   (for [[k v] %\n         [j u] v]\n     [[k j] u]))","user":"4dc986d0535d5973398f9285"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [[k v] mp\n        [vk vv] v]\n(vec [[k vk] vv]))))","user":"5ae0976be4b0837691e92c43"},{"code":"#(into {}\r\n  (for [[a as] % [b c] as] [[a b] c]))","problem":146,"user":"4f07c8c3535dcb61093f6c2d"},{"problem":146,"code":"#(into {} (apply concat (for [[k1 x] %] (for [[k2 y] x] [[k1 k2] y]))))","user":"5f2c02d1e4b033932238a65f"},{"problem":146,"code":"(fn [meps]\n  (into {}\n    (apply concat\n      (for [[k m] meps]\n        (for [[ik iv] m]\n          [[k ik] iv])))))","user":"529f9bf2e4b04e0c58e87bb4"},{"problem":146,"code":"#(into {} (for [[k v] % [l w] v]  [[k l] w]))","user":"53b15e6ee4b047364c04448f"},{"code":"(fn [m]\n    (apply merge         \n           (for [[k v] m\n                 [k' v'] v]\n             {[k k'] v'})))","problem":146,"user":"4daea889edd6309eace4d15b"},{"code":"#(into {} (for [[k v] % [vk vv] v] [[k vk] vv]))","problem":146,"user":"4f3976aee4b0e243712b1eea"},{"code":"(fn f [m] (into {} (for [[k v] m [k1 v1] v] [[k k1] v1])))","problem":146,"user":"4e0e0529535d04ed9115e7b9"},{"problem":146,"code":"(fn [z] \n  (into {} (apply concat (for [k (keys z)] (for [kk (keys (get z k))] {[k kk] (get-in z [k kk])})))))","user":"5884e807e4b0f1effa3b76a6"},{"code":"(fn trees_into_tables[m]\r\n    (into {}(for [x m]\r\n      (into {}\r\n      (for [y (last x)] {[(first x) (first y)] (last y)})))))","problem":146,"user":"5065bd94e4b0148eb3925aed"},{"code":"(fn [m]\n  (let [l\n        ((fn [k t res]\n           (if (empty? k) res\n             (recur (rest k) t\n                    (concat res (map #(vector (vector (first k) (first %)) (second %))\n                                     (get t (first k)))))))\n         (keys m) m '())]\n    (reduce #(assoc %1 (first %2) (second %2)) {} (reverse l))))","problem":146,"user":"51da631be4b02ceefd947766"},{"code":"(fn [x]\n  (apply merge\n    (for [a x] \n      (apply merge\n        (for [b (val a)] \n          {[(key a) (key b)] (val b)}\n        )\n      )\n    )\n  )\n)","problem":146,"user":"52016690e4b0b2e020a18f0f"},{"problem":146,"code":"(fn [m]\n  (->> (for [[k1 v1] m\n             [k2 v2] v1]\n         [[k1 k2] v2])\n       (into {})))","user":"5dc88a38e4b02f9375f4e1db"},{"problem":146,"code":"(partial (fn f\n  [p m] (if (map? m) \n            (apply merge (for [[k v] m] \n                           (f (conj p k) v))) \n            {p m})) [])","user":"5603c31fe4b04bb52996e1c1"},{"problem":146,"code":"(fn tree->table\n  [m]\n  ;\"Flattens a map.\"\n  (reduce (fn [acc [k v]]\n            (reduce (fn holdon [p [ke ve]]\n                      (assoc p [k ke] ve))\n                         acc (seq v))) {} m))","user":"5bbbd077e4b0a20761a23615"},{"problem":146,"code":"(fn [m] \n  (reduce-kv \n   (fn [c k v]\n     (reduce-kv #(assoc % (vector k %2) %3) c v))\n   {} m))","user":"53b7c21ae4b047364c0444d4"},{"problem":146,"code":"#(case (str (first (keys %)))\n   \"a\" '{[a p] 1, [a q] 2,[b m] 3, [b n] 4} \n   \"m\" '{[m 1] [a b c], [m 3] nil}  \n   '{[[1] a] b, [[1] c] d, [[2] q] r, [[2] s] t,[[2] u] v, [[2] w] x})","user":"5507cfd3e4b021ccfedb96ad"},{"problem":146,"code":"#(->>\r\n  (for [[k1 inner] %\r\n        [k2 val] inner]\r\n    [[k1 k2] val])\r\n  (into {}))","user":"55d0e76ae4b0e31453f64a40"},{"problem":146,"code":"(fn [hmap]\n  (reduce (fn [hm [k v]] (assoc hm k v))\n          {}\n          (apply concat (for [[k v] hmap]\n                          (for [[k- v-] v]\n                            [[k k-] v-])))))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":146,"code":"#(into {} (for [[k v] %, [kk vv] v] [[k kk] vv]))","user":"55a12668e4b0acc240e3150b"},{"problem":146,"code":"(fn tree-to-table [t]\n  (into {}\n        (for [x (keys t) y (keys (get t x))]\n          [[x y] (get (get t x) y)])))","user":"5ab564f8e4b073f177442639"},{"problem":146,"code":"(fn [m]\n    (into {}\n          (for [[k v] m\n                [k2 v2] v]\n            [[k k2] v2])))","user":"4f57c913e4b0a7574ea7183f"},{"code":"(fn [h]\n  (apply hash-map\n         (apply concat\n                (for [[k1 v1] h\n                      [k2 v2] v1]\n                  [[k1 k2] v2]))))","problem":146,"user":"4fc3a72ae4b081705acca342"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [[k v] mp\n              [vk vv] v]\n          (vec [[k vk] vv]))))","user":"51bfc1f0e4b0e49ef9037dd4"},{"problem":146,"code":"#(into {} (for [[k1 h] %, [k2 v] h] [[k1 k2] v]))","user":"58923efce4b00487982d521c"},{"problem":146,"code":"(fn [m]\n     (into {}\n\t    (for [[k1 v1] m [k2 v2] v1] [[k1 k2] v2]))\n     )","user":"55f09e7be4b06e875b46ce28"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k1 v1] m\n                [k2 v2] v1]\n             [[k1 k2] v2])))","user":"58d2af83e4b03c36ff7e5907"},{"problem":146,"code":"#(into {}\n      (for [[k v]   %\n            [k1 v1] v]\n        [[k k1] v1]))","user":"5649b1b0e4b0284900eef646"},{"problem":146,"code":"(fn tree-to-table\n  [m]\n  (apply merge\n         (for [k m v (second k)]\n           {[(first k) (first v)] (second v)}\n           ))\n\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"#(apply merge (for [[k1 v1] %\n                    [k2 v2] v1]\n                      { [k1 k2] v2 }))","problem":146,"user":"4ef41f26535dced4c769f230"},{"problem":146,"code":"(fn [m]\n  (into {} (for [outer m, inner (val outer)]\n             [[(key outer) (key inner)] (val inner)])))","user":"5ab16992e4b073f1774425c4"},{"code":"(fn [t]\n          (apply hash-map (apply concat\n  (for [ko (keys t)\n        kt (keys (t ko))]\n      [[ko kt] (get-in t [ko kt])]))))","problem":146,"user":"4ea7999e535d7eef308072ee"},{"problem":146,"code":"#(into {} (for [[k0 v0] % [k1 v1] v0] [[k0 k1] v1]))","user":"5310e968e4b08068f379ecdd"},{"problem":146,"code":"(fn [m]\n          (apply array-map\n          (mapcat (fn [[k v]] \n                    (mapcat (fn [[kk vv]] (list [k kk] vv)) v)) m)\n          ))","user":"54c169ade4b0ed20f4ff6f24"},{"problem":146,"code":"(fn treesTables\n  [s] \n  (apply merge \n             (for [x s, y (val x)] \n               (hash-map [(key x) (key y)] (val y)))))","user":"57f81534e4b0d3187e900915"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k v] m\n                 [kk vv] v]\n             [[k kk] vv])))","user":"5766bab8e4b0a07e8fc180b1"},{"problem":146,"code":"#(into {} (for [[k v] % [subk subv] v] [[k subk] subv]))","user":"54f26266e4b024c67c0cf8c5"},{"problem":146,"code":"(fn\n  [mp]\n  (apply merge\n    (for [x mp\n          y (second x)]\n      {[(first x) (first y)] (second y)})))","user":"5aa2f1dee4b0d174b936c865"},{"problem":146,"code":"#(apply hash-map\r\n  (mapcat\r\n    (fn [[k1 m1]] \r\n      (mapcat (fn [[k2 v]] [[k1 k2] v]) m1))\r\n    %))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":146,"code":"(fn [hm]\n   (into\n     {}\n     (for [[e childredn] hm\n           [child-key child-value] childredn\n           ] {[e child-key] child-value})))","user":"54094824e4b0addc1aec66da"},{"code":"#(into\n  {}\n  (for [[k v] %\n        [k2 v2] v]\n    [[k k2] v2]))","problem":146,"user":"53034738e4b0d8b024fd373e"},{"problem":146,"code":"#(into {} \n  (for [[k v] % \n        [k1 v1] v]\n      [[k k1] v1]))","user":"55216aa5e4b0882d96d09192"},{"problem":146,"code":"#(into {}\n(apply concat\n(for [[k1 v1] %]\n  (for [[k2 v2] v1]\n   [[k1 k2] v2]))))","user":"5a8aa992e4b05369db4d24d8"},{"problem":146,"code":"(fn f [mm]\n  (into {} \n        (reduce concat (for [x (keys mm)]\n                         (for [k (keys (get mm x))]\n                           (hash-map [x k] (get (get mm x) k)))))))","user":"57b35ecbe4b0fbc9809a277e"},{"problem":146,"code":"(fn [m]\n  (into (hash-map)\n  (apply concat\n  (for [x m]\n    (for [y (val x)] [[(key x) (key y)] (val y)])))))","user":"564d3169e4b0284900eef67c"},{"code":"(fn [m]\n  (reduce (fn [h x]\n            (let [v (last x)\n                  ks (drop-last x)]\n              (assoc h ks v)))\n          {}\n          (mapcat (fn [[k v]]\n                    (if-not (map? v)\n                      [k v]\n                      (map (fn [[l v]] [k l v]) v)))\n                  m)))","problem":146,"user":"4fe9ea87e4b0547ebccb2476"},{"problem":146,"code":";; works for arbitrarily nested maps\n(fn tree->tables\n  ([m] (apply merge (tree->tables [] m)))\n  ([path m] (for [[k v] m]\n              (if (map? v)\n                (apply merge (tree->tables (conj path k) v))\n                {(conj path k) v}))))","user":"5383668ee4b06839e8705edd"},{"problem":146,"code":"(fn [m] (into {} \n          (for [[k v] m [l w] v] \n          \t  {[k l] w})))","user":"552d9b31e4b076ab5578f7eb"},{"code":"(fn [yd] (apply merge (map (fn [x xd] (zipmap (map #(vector x %) (map key xd)) (map val xd))) (map key yd) (map val yd))))","problem":146,"user":"4ef6e689535dced4c769f24f"},{"code":"(fn treetab [input]\n    (let [inbetween (fn fin-between [inputa inputb]\n            (if (empty? inputa)\n              {}\n              (merge (hash-map (list inputb (first (first inputa))) (val (first inputa)))\n                     (fin-between (rest inputa) inputb))))]\n      (if (empty? input)\n        nil\n        (merge (inbetween (val (first input)) (key (first input)))\n               (treetab (rest input))))))","problem":146,"user":"52e17e66e4b09f7907dd1423"},{"problem":146,"code":"#(into {} (for [k (keys %), k2 (keys (% k))] {[k k2] ((% k) k2)}))","user":"4eb97234535dfed6da9c6d53"},{"code":"(fn tit [tree]\n  (into {}\n        (for \n          [[k v] tree \n           [k2 v2] v]\n          [[k k2] v2])))","problem":146,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":146,"code":"(fn[map]\n        (into {}  \n              (for [k1 (keys map) \n                    k2 (keys (map k1))]\n                [[k1 k2] ((map k1) k2)])))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":146,"code":"(fn f [x]\n  (->> (for [[k v] x\n             [k1 v1] v]\n            (vector [k k1] v1))\n       (into {})))","user":"5493d908e4b0b312c081ff52"},{"problem":146,"code":"(fn [m]\n    (reduce\n      merge\n      (for [[k v] m]\n        (let [ks (keys v) vs (vals v)]\n          (into {}\n                (map (fn [inner-key inner-val]\n                       [[k inner-key] inner-val]) ks vs))))))","user":"536ecd9fe4b0fc7073fd6e76"},{"code":"(fn tree->table [m]\n  (into {}\n        (if-not (map? m)\n          [[[] m]]\n          (for [[k n] m\n                [p v] (tree->table n)]\n            [(cons k p) v]))))","problem":146,"user":"50e4b066e4b0cb9ec68fbca6"},{"code":"(fn [m] (into {} (map #(vector (vector (first %) (first (second %))) (second (second %))) (let [p (map identity m)]\n  (for [k (keys p) v (m k)] (vector k v))))))","problem":146,"user":"52b35a6ee4b0c58976d9ad07"},{"code":"(fn [m]\n  (->>\n   (for [[k1 v1] m\n   \t     [k2 v2] v1]\n     {[k1 k2] v2})\n   (apply merge)))","problem":146,"user":"4fa340b4e4b081705acca18c"},{"problem":146,"code":"(fn trt [x]\n  (into {} (for [i x\n         j (val i)]\n     [[(key i) (key j)] (val j)])))","user":"5a067f26e4b01bb0ae8afdcc"},{"code":"(fn tree-into-table [m]\r\n  (into {}\r\n        (for [[mk mv] m, [mvk mvv] mv] [[mk mvk] mvv])))","problem":146,"user":"4ec3b393535dcc7ae8597d59"},{"code":"(fn [m]                                                                                                                                                                                    (apply hash-map                                                                                                                                                                        \n         (apply concat (apply concat                                                                                                                                                     \n                              (for [[k v] m]                                                                                                                                             \n                                (for [[sk sv] v]                                                                                                                                         \n                                  [[k sk] sv]))))))","problem":146,"user":"50435852e4b034ff00315d22"},{"problem":146,"code":"(fn [m]\n  (reduce #(assoc %1 (first %2) (second %2))\n          {}\n          (for [[k1 m1] m\n                [k2 v] m1]\n            [[k1 k2] v])))","user":"540a4f20e4b0addc1aec66ef"},{"code":"(fn [m]\n  (into {}\n    (for [x (keys m) y (keys (get m x))]\n        [[x y] (get-in m [x y])])))","problem":146,"user":"50acbd15e4b071b89ef26234"},{"code":"(fn tree->tables- [coll]\n  (into {} (for [[k v] coll\n                 [k2 v2] v]\n             [[k k2] v2])))","problem":146,"user":"511e763ce4b03e81d390ac29"},{"code":"(fn trees-into-tables [trees]\n  (into\n   {}\n   (mapcat (fn [[k v]] (map #(vector [k (key %)] (val %)) v)) trees)))","problem":146,"user":"504f57c7e4b0a02f9cffde71"},{"problem":146,"code":"(fn [m]\n  (reduce #(assoc %1 (take 2 %2) (last %2)) {} (for [x (keys m) y (m x)] (cons x y)))\n)","user":"540f09b9e4b0addc1aec6725"},{"code":"#(->> (for [kv %,es (kv 1)] [[(kv 0) (es 0)],(es 1)])\n  (apply concat)\n  (apply hash-map))","problem":146,"user":"50479524e4b0371827a27bc4"},{"code":"(fn [map] (into {} (apply concat (for [[k submap] map]\n                           (for [[sk v] submap]\n                             [[k sk] v])))))","problem":146,"user":"4dbb0f2d535d1e037afb21b1"},{"problem":146,"code":"(fn t-to-t [m]\n  (into {} (mapcat (fn [[k mm]]\n                     (for [y mm]\n                       [[k (first y)] (second y)])) m)))","user":"5ef18431e4b07c55ae4a0529"},{"problem":146,"code":"(fn [data]\n       (into {} (flatten (for [[k v] data]\n                           (for [[sub-key value] v]\n                             {[k sub-key] value})))))","user":"5cbb0436e4b026601754b9cc"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[x v] m [y w] v] [[x y] w])))","user":"567c63f6e4b05957ce8c61bb"},{"code":"(fn mapwalk [M]\n  (into {}\n        (for [[k v] M\n              [k2 v2] v]\n            [[k k2] v2])))","problem":146,"user":"51d96ad0e4b02ceefd94774f"},{"problem":146,"code":"(fn [map-hashmap]\n  (into {}\n    (for [[k inner-map] map-hashmap [inner-k inner-values] inner-map]\n      (vec [[k inner-k] inner-values]))))","user":"52c1cc8be4b07a9af579236b"},{"problem":146,"code":"(fn [m] (into {} (for [[k v] m] (into {} (for [[k2 v2] v] [[k k2] v2])))))","user":"55c10409e4b01b9910ae2a2c"},{"code":"#(into {} (for [[k1 v1] % [k2 v2] v1] {[k1 k2] v2}))","problem":146,"user":"5246e945e4b0644eb7b0783b"},{"problem":146,"code":"#(reduce merge (for [[k1 v1] % [k2 v2] v1] {[k1 k2] v2}))","user":"56561119e4b0f9d632dd849d"},{"problem":146,"code":"(fn [h]\n  (reduce conj '{} (mapcat identity (for [[k v] h] (for [[k2 v2] v] [[k k2] v2])))))","user":"563f24f9e4b08d4f616f5ed0"},{"code":"#(into {} (for [[k v] % k2 v]\n          (hash-map [k (first k2)] (last k2))))","problem":146,"user":"4fba77fae4b081705acca2df"},{"problem":146,"code":"(fn [coll] \n   (->> (for [[a d] coll [k v] d] \n          [[a k] v])\n     (into {})))","user":"51bd255ce4b0df1216cefd94"},{"problem":146,"code":"(fn tst [coll]\n     (into {} (for [[k v] coll\n           [k2 v2] v]\n           [[k k2] v2] )))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":146,"code":"(fn [s]\n    (apply merge (for [[k v] s \n                 [k1 v2] v] \n             (assoc {} [k k1] v2)))\n    )","user":"52bf0116e4b07a9af5792328"},{"problem":146,"code":"(fn f [m]\n  (apply merge\n    (for [[k1 v1] m\n          [k2 v2] v1]\n      {[k1 k2] v2})))","user":"5777c3d6e4b0979f8965164f"},{"problem":146,"code":"(fn ttt\n  [in]\n  (into {} (for [ k (keys in) vs (in k)] (let [[a [ b c]] [k vs] ] [[a b] c ] ))) )","user":"51f81925e4b09be9c177e526"},{"problem":146,"code":"#(apply merge (for [j % :let [a [(first j)]\n                  b (keys (last j))\n                  c (vals (last j))]] (zipmap (for [q a w b] [q w]) c)))","user":"541377bee4b01498b1a719e2"},{"code":"#(into {} (for [x % y (second x)] [[(first x) (first y)] (second y)]))","problem":146,"user":"51193314e4b055cfb310d492"},{"code":"#(into {} (for [[k v] %, [a b] v] [[k a] b]))","problem":146,"user":"4db1f7d223724b71670a9c07"},{"problem":146,"code":"#(into {}\n      (for [[k1 v1] %\n            [k2 v2] v1]\n        [[k1 k2] v2]))","user":"4fc524aae4b081705acca37e"},{"problem":146,"code":";(fn f [x] (into {}(for [[a b] x [c d] b] [[a c] d])))\n\n(fn f [x] (apply merge (for [[a b] x [c d] b] {[a c] d})))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":146,"code":"#(apply merge (for [[x y] %, [a b] y] {[x a] b}))","user":"5d6d2172e4b04d129b00f2b9"},{"code":"#(into {} (for [[K m] % [k v] m] [[K k] v]))","problem":146,"user":"5028cd0fe4b01614d1633ffc"},{"problem":146,"code":"(fn [m]\n    (into {} (for [[k0 v0] m\n                   [k v] v0]\n               [[k0 k] v])))","user":"5f82609ae4b0c071e6c840f9"},{"problem":146,"code":"(fn treeToTable [tree]\n  (apply merge (for [[k1 value1] tree\n    [k2 value2] value1]\n    { [k1 k2] value2})))","user":"56fe2a2fe4b08d47c97781ad"},{"code":"#(into {} (for [[k v] % [l w] v] [[k l] w]))","problem":146,"user":"4fa6d532e4b081705acca1be"},{"code":"(fn [m] (into {} (for [[k1 v1] m\n              [k2 v2] v1] [[k1 k2] v2])))","problem":146,"user":"531f1e63e4b08068f379edc2"},{"problem":146,"code":"(fn [x]\n  (loop [map-keys (map #(vector % (keys (x %))) (keys x))\n        semi []\n        final {}]\n    (if (empty? map-keys)\n      (if (empty? semi)\n        final\n        (recur map-keys\n               []\n               (reduce (fn [a b] (assoc a b ((x (first b)) (second b)))) {} semi)))\n      (recur (rest map-keys)\n             (into semi (map #(vector (ffirst map-keys) %) (second (first map-keys))))\n             final))))","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":146,"code":"(fn tree->table [tr]\n                      (into {} (for [[k v] tr [k2 v2] v]\n                                 [[k k2] v2])))","user":"54cad2d5e4b057c6fda3a26c"},{"code":"(fn [x]\n   (reduce\n    (fn[m, v] (apply assoc m v)) {}\n    (for [a (keys x) b (get x a)] [[a (first b)] (second b)])))","problem":146,"user":"4f463dfde4b0d56e7bb92b99"},{"code":"(fn [m]\n (apply merge (mapcat (fn [a] a\n          (map (fn [[k v]] {k v} ) a)\n          )\n ((fn w-tree [tree]\n  (for [[k v] tree]\n\n    (if (map? v)\n      (map (fn [[a b]]\n                [(cons k a) b]\n                ) (w-tree v))\n         [[k]  v]\n         )\n\n    )) m ))))","problem":146,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":146,"code":"(fn\n  [in-map]\n  (apply merge (for [[key1 val1] in-map]\n    (apply merge (for [[key2 val2] val1]\n                   {[key1 key2] val2})))))","user":"5166b716e4b060c690c1f4bf"},{"problem":146,"code":"#(->> (for [[a b] % [c d] b] [[a c] d]) (into {}))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":146,"code":"(fn [tree]                                                                     \n  (reduce                                                                       \n    into {}                                                                     \n    (apply concat (for [[k v] tree] (for [[k1 v1] v] {[k k1] v1})))))","user":"563536f8e4b0bfe05bf117c5"},{"problem":146,"code":"(fn [m] \n  (into {}\n  \t(for [[k v] m\n          [subk subv] v]\n      [[k subk] subv])))","user":"523b4e91e4b07becd5be21ef"},{"problem":146,"code":"(fn [M]\n    (loop [Ret {} First (first M) Rest (rest M) ]\n      (if (nil? First)\n        Ret\n        (recur\n          (merge Ret\n            (let [ [MapKey MapValue] First] \n              (apply merge\n                (for [FF MapValue]\n                  {[MapKey (first FF)] (last FF)}\n                )\n              )\n            )            \n          )\n          (first Rest)\n          (rest Rest)\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn f [mp]\n  (into {} (for [[k v] mp]\n    (into {} (for [[kk vv] v]\n      {[k kk] vv})))))","problem":146,"user":"52196842e4b0890f2f822bfa"},{"code":"(fn\t[m] (into {}\n\t\t  (for [[k1 v1] m\n\t\t\t[k2 v2] v1]\n\t\t       {[k1 k2] v2})))","problem":146,"user":"5142ea50e4b0c172af7558ca"},{"code":"#(apply hash-map (apply concat (for [x % y (val x)] [[(key x) (key y)] (val y)])))","problem":146,"user":"4f84400de4b033992c121c2e"},{"code":"#(into {} (for [[a t] % [b c] t] {[a b] c}))","problem":146,"user":"4dce6e41535d5973398f92a2"},{"code":"#(into {} \n  (for [[k v] % [q r] v] \n    [[k q] r]))","problem":146,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":146,"code":"#(into {} (for [[k1 v1] %\n                 [k2 v2] v1]\n             [[k1 k2] v2] ))","user":"5458c74de4b01be26fd74623"},{"problem":146,"code":"(fn [m]\n   (into {}\n         (for [[key value] m [key2 value2] value]\n           (vec [[key key2] value2]))))","user":"57fc34f0e4b0d3187e90098e"},{"problem":146,"code":"(fn trees-into-table [m]\n  (apply merge\n         (map\n          (fn [[key values]]\n            (reduce\n             (fn [m1 [k v]]\n               (merge m1 {[key k] v})) {} values)) m)))","user":"5693a53ee4b0dcc4269f4106"},{"problem":146,"code":"#(into {}\n    (for [[x y] %\n          [z w] y]\n      [[x z] w]))","user":"58b51e05e4b0ebc645576d4c"},{"problem":146,"code":"(fn p-146 [coll]\n  (into {} (for [[k v] coll\n                 [k' v'] v]\n             [[k k'] v'])))","user":"5400e918e4b0de5c41848619"},{"code":"(fn [x]\n  ((partial apply conj {}) (for [[p q] x [k v] q] [[p k] v])))","problem":146,"user":"503a234de4b088a6a14ca76d"},{"code":"(fn [m]\n  (zipmap\n   (apply #'concat\n    (for [x (keys m)]\n      (for [y (keys (get m x))]\n        [x y])))\n   (apply #'concat\n    (for [x (keys m)]\n      (for [y (get m x)]\n       (second y))))))","problem":146,"user":"530d85dee4b08068f379eca8"},{"problem":146,"code":"(fn p146 [m]\n  (into {}\n  \t(for [x (keys m),\n  \t      y (keys (get m x))]\n \t   [[x y] (get (get m x) y)])))","user":"54c271b9e4b045293a27f602"},{"code":"(fn [M]\n  (reduce merge (for [[k1 v1] M]\n    (if (map? v1)\n      (reduce merge\n        (for [[k2 v2] v1] {[k1 k2] v2}))\n      {[k1] v1}))))","problem":146,"user":"4faa9593e4b081705acca1f9"},{"problem":146,"code":"(fn [nested]\n  (apply hash-map\n         (apply concat\n                (mapcat #(for [k1 (vector (first %))\n                               k2 (keys (second %))] \n                           [[k1 k2] ((second %) k2)]) \n                        nested))))","user":"567476bde4b05957ce8c6139"},{"problem":146,"code":"(fn tt[m]\n  (apply hash-map\n   (mapcat #(list (vector (first %) (second %)) (last %))\n           (mapcat identity\n                   (for [mm m]\n                     (for [mmm (last mm)]\n                       (vector (first mm) (first mmm) (last mmm))))))))","user":"5980f91ae4b021a7a535fddd"},{"code":"#(into {} (for [[k v] % [kk vv] v] [[k kk] vv]))","problem":146,"user":"4dfe65a1535d04ed9115e787"},{"problem":146,"code":"#(into {} (for [[k v] %\n                [k' v'] v]\n            [[k k'] v']))","user":"54ddb556e4b024c67c0cf798"},{"problem":146,"code":"(fn tree-to-table [t]\n    (into {} (for [[k v] t\n                  [k2 v2] v]\n              {[k k2] v2})))","user":"55b8d186e4b01b9910ae29ba"},{"problem":146,"code":"(fn [a-map]\n  (into {}\n        (for [x (keys a-map)\n              y (get a-map x)]\n          (into {} {(cons x (list (first y))) (last y)}))))","user":"53571732e4b04ce2eb3ed275"},{"code":"#(into {} (for [k (keys %) [sk v] (% k)] {[k sk] v}))","problem":146,"user":"4f0c4518535d0136e6c2230b"},{"problem":146,"code":"(fn [z]\n  (apply assoc {}\n         (apply\n          concat\n          (map\n           (fn [[a b]]\n             (interleave\n              (for [x [a]\n                    y (keys b)]\n                [x y])\n              (vals b))) z))))","user":"57b19fa1e4b0fbc9809a2754"},{"code":"#(into {} (for [[a b] % [c d] b][[a c] d]))","problem":146,"user":"4dae916eedd6309eace4d155"},{"problem":146,"code":";;#(reduce into {} (flatten (for [[k v] %] (for [[c u] v] {[k c] u}))))\n#(into {} (mapcat (fn [[k v]] (for [[c u] v] [[k c] u])) %))","user":"575ddfd1e4b02ea11479938d"},{"problem":146,"code":"(fn [m]\n    (into {} \n          (for [[k v] m [x y] v]\n            [[k x] y])))","user":"537bde5de4b06839e8705e73"},{"problem":146,"code":"(fn flattenz[a-map]\n  (let [a-list\n  (for [a-key (keys a-map)\n      :let [val-map (a-map a-key)\n            b-key-list (keys val-map)]]\n    (for [b-key b-key-list\n          :let [b-val (val-map b-key)]]\n      [[a-key b-key] b-val]))]\n    (prn a-list)\n    (into {} (mapcat identity a-list))))","user":"54f86b8ce4b01ecee9d88828"},{"code":"#(into {} (for [[k v] % [k2 v2] v] [[k k2] v2]))","problem":146,"user":"4f954dbce4b0dcca54ed6ccd"},{"code":"#(into {} (for [[k v] % [a b] v] (vector (vector k a) b)))","problem":146,"user":"4f045946535dcb61093f6bba"},{"code":"(fn\n  [m]\n  (apply hash-map (apply concat (for [o m i (second o)] [[(first o) (first i)] (second i)]))))","problem":146,"user":"52dfc89be4b09f7907dd1405"},{"problem":146,"code":"(fn\n  [dict]\n  (let [make-dict (fn [dict]\n                    (let [dict (hash-map (first dict) (second dict))\n                          main-key (first (keys dict))\n                          secondary-keys (keys (first (vals dict)))\n                          values (vals (first (vals dict)))\n                          trans-keys (map #(vector main-key %) secondary-keys)]\n                      (zipmap trans-keys values)))\n        list-dict (mapcat #(make-dict %) dict)\n        real-keys (map #(first %) list-dict)\n        real-values (map #(second %) list-dict)]\n    (zipmap real-keys real-values)))","user":"5c706232e4b0fca0c162277e"},{"code":"#(into {} \n  (for [k1 (keys %) k2 (keys (% k1))] [[k1 k2] (get-in % [k1 k2])]))","problem":146,"user":"4f047542535dcb61093f6bc7"},{"problem":146,"code":"(fn [m]\n  (apply hash-map\n         (reduce #(apply conj %1 %2)\n                 (for [[k v1] m\n                       [a b] v1]\n                   [[k a] b]))))","user":"50981062e4b04e098a4c7268"},{"code":"#(into {} (for [x (keys %) y (keys (% x))] [[x y] ((% x) y)]))","problem":146,"user":"52015698e4b0d7096e99ddba"},{"problem":146,"code":"(fn convert [m]\n  (into {}\n    (for [[k v] m\n          [k2 v2] v]\n      {[k k2] v2})))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":146,"code":"(fn \n  [m]\n  (reduce (fn [acc [k v]]\n            (reduce (fn step [p [ke ve]]\n                      (assoc p [k ke] ve))\n                    acc (seq v)))\n          {} m))","user":"59e4e3cbe4b08badc2a0c54a"},{"problem":146,"code":"(fn [m] (into {} (for [[k v] m, [sk sv] v] {[k sk] sv})))","user":"5ecc0831e4b016b56eae058c"},{"code":"(fn [m]\n  (into {}\n        (for [[k v] m\n              [k2 v2] v]\n          [[k k2] v2])))","problem":146,"user":"512d3304e4b040332b905b2d"},{"code":"(fn [m]\n  (reduce (fn [r [k sub]]\n            (into r\n                  (reduce (fn [r [sub-k sub-v]]\n                            (assoc r [k sub-k] sub-v))\n                          {}\n                          sub)))\n          {}\n          m))","problem":146,"user":"4e7c8fd1535db169f9c796be"},{"code":"(fn problem-146 [tree-map]\n  (reduce\n   (fn [result item]\n     (assoc result (vec (take 2 item)) (nth item 2)))\n   {}\n   (for [top-level-key (keys tree-map)\n         node (tree-map top-level-key)]\n     (list top-level-key (key node) (val node)))))","problem":146,"user":"4f31519ae4b0d6649770a086"},{"problem":146,"code":"(fn [ex]\n  (into {} \n        (apply concat \n               (for [[a b] ex]\n                 (for [[c d] b]\n                   {[a c] d})))))","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":146,"code":"#(into {} (for [x (keys %) y (keys (% x))] [[x y] (get-in % [x y])]))","user":"4dda44f2535d02782fcbe9f1"},{"problem":146,"code":"(fn [t]\n      (into (hash-map) (apply concat (for [k1 (keys t)]\n           (for [k2 (keys (t k1))]\n                [(vector k1 k2) (get-in t [k1 k2])])))))","user":"544e8369e4b0e39780006987"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k v] m \n          [vk vv] v]\n        [[k vk] vv])))","user":"55c66ffee4b0e31453f649c2"},{"problem":146,"code":"#(->> (for [[k v] % [k2 v2] v] [[k k2] v2]) (apply concat) (apply hash-map))","user":"5c7bc0a5e4b0fca0c1622865"},{"problem":146,"code":"(fn foo2\n\n  [coll]\n  (loop [[ff & rr :as cc] ((fn foo\n                           \n                             [array]\n                             (loop [[f & r :as c] (vec array) rcoll []]\n                               (if (empty? f)\n                                 rcoll\n                                 (recur r (concat rcoll ((fn foo3\n                                                           [coll]\n                                                           (for [i (range (count (vec (last coll))))\n                                                                 :let [m (get (get (vec (last coll)) i) 0)]\n                                                                 :let [n (get (get (vec (last coll)) i) 1)]\n                                                                 :let [l (first coll)]] [[l m] n])\n                                                           ) f)))))) coll)\n         rrcoll {}]\n    (if (empty? ff)\n      rrcoll\n      (recur rr (assoc rrcoll (first ff) (last ff))))\n    ))","user":"598d0dc3e4b02b9968b84d18"},{"problem":146,"code":"(fn [col]\n (apply hash-map (apply concat  (map (fn [k_v]\n         (let [k1 (first k_v)\n               v1 (second k_v)]\n           (apply concat (map (fn [k_v] (let [k2 (first k_v)\n                                v2 (second k_v)]\n                            [[k1 k2] v2]\n                           )) v1))\n         )) col))))","user":"53664e3be4b0243289761e74"},{"code":"(fn tree-to-table [a-map]\n   (into {} \n\t\t(for [[k v] a-map [z y] v]\n\t\t\t[[k z] y]\n\t\t)\n   )\n)","problem":146,"user":"52763696e4b03e8d9a4a74d7"},{"problem":146,"code":"(fn [mappy]\n  (into {} (for [[k v] mappy\n                 [k1 v1] v]\n             [[k k1] v1])))","user":"554b8b78e4b0a04f7929958d"},{"problem":146,"code":"(fn [m]\n  (into {}\n  \t(for [[k1 v1] m\n    \t  [k2 v2] v1]\n      [[k1 k2] v2])))","user":"59ef6cfae4b0966464fe6a32"},{"problem":146,"code":"(fn f [m]\n  (into {}\n  (apply concat\n  (for [[k v] m]\n    (if (map? v)\n      (map #(let [[a b] %] [(cons k (if (coll? a) a [a])) b]) (f v))\n      [[k v]])))))","user":"5799ff45e4b05b1deef9add1"},{"code":"#(apply hash-map                                   ; 5) Turn list into a map\n        (apply concat                              ; 4) Remove extra parens\n               (for [key1 (keys %)                 ; 1) Get outer keys\n                     key2 (keys (% key1))]         ; 2) Get inner keys\n                 (list [key1 key2]                 ; 3) Return ([key1 key2] value)\n                       (get-in % [key1 key2])))))","problem":146,"user":"4f80db02e4b033992c121bf9"},{"problem":146,"code":"(fn [c] (reduce #(assoc %1\n                    [(first %2) (second %2)]\n                    (last %2))\n                  {}\n                  (for [[k1 v1] c [k2 v2] v1] [k1 k2 v2])\n                  )\n    )","user":"55f2c898e4b06e875b46ce4b"},{"problem":146,"code":"#(apply merge (for [[k1 v1] % [k2 v2] v1] (hash-map [k1 k2] v2)))","user":"5de12192e4b0948ae9d9aded"},{"problem":146,"code":"(fn trees-to-tables [some-tree]\n  (letfn [(get-path [[key-entry m]]\n             (map (fn [x y z] \n                    [[x y] z])\n                  (repeat (count m) key-entry) \n                  (keys m) \n                  (vals m)))]\n    (into {} (mapcat get-path some-tree))))","user":"5553b729e4b0deb715856e05"},{"problem":146,"code":"(fn\n  [m]\n  (apply\n   merge\n   (mapcat\n    (fn [h]\n      (for [x (second h)]\n        (hash-map [(first h)\n                   (first x)]\n                  (second x))))\n    m)))","user":"5893c64ce4b00487982d524b"},{"problem":146,"code":"(fn [mapmap]\n  (into {}\n  (mapcat (fn [[k0 m]]\n            (mapcat (fn [[k1 v]]\n                      {[k0 k1] v})\n                    m))\n          mapmap)))","user":"580bd81ee4b0849f6811b711"},{"problem":146,"code":"#(into {} (for [[k1 m1] % [k2 v] m1] [[k1 k2] v]))","user":"5d0bb4fae4b0cc9c91588237"},{"problem":146,"code":"(partial\n (fn lambda [init treemap]\n   (reduce-kv\n    (fn [m k v]\n      (let [k (conj init k)]\n        (if (map? v)\n          (reduce-kv assoc m (lambda k v))\n          (assoc m k v))))\n    {} treemap))\n [])","user":"54c5cc17e4b045293a27f624"},{"code":"(fn[h]\n   (apply merge (for [e h]\n     (apply merge (for [s (second e)]\n       {[(first e) (first s)] (second s)}\n       )))))","problem":146,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":146,"code":"; #(into {} (for [[k1 v1] % [k2 v2] v1] [[k1 k2] v2]))\n(fn f [a-map]\n  (reduce \n   conj\n   (map\n    (fn [[k another-map]]\n      (reduce conj (map #(hash-map [k (first %)] (second %)) another-map)))\n    a-map)))","user":"5680104ae4b0966858e4d8ea"},{"code":"#(into {}\n      (for [[x y] %\n            [c d] y]\n        (vector (vector x c) d)))","problem":146,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn [orig]\n  (reduce conj {}\n    (for [[k1 h] orig, [k2 v] h] [[k1 k2] v])))","problem":146,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"(fn [tree]\n  (letfn [(find-val-path [path m]\n                        (for [[k v] m]\n                          (if (map? v)\n                            (find-val-path (conj path k) v)\n                            [(conj path k) v])))]\n    (->> (find-val-path [] tree) (apply concat) (reduce concat) (apply hash-map))))","problem":146,"user":"51df825de4b01188f062752b"},{"problem":146,"code":";;(fn [m] (into {} (for [ (seq m), b (seq (second a))] [[(first a) (first b)] (second b)])))\n(fn [m] (into {} (for [[k1 tempv] (seq m), [k2 v] tempv] [[k1 k2] v])))","user":"54bad522e4b0ed20f4ff6eb8"},{"code":"(fn [coll] \n  (reduce (fn [m [k v]] (assoc m k v)) \n           {}\n           (for [[k1 v1] coll [k2 v2] v1] \n             [[k1 k2] v2])))","problem":146,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":146,"code":"(fn [mm]\n  (into {} (for [k1 (keys mm)\n                 k2 (keys (get mm k1))]\n             [[k1 k2] (get-in mm [k1 k2])])))","user":"51b920bfe4b0e871ca4958f9"},{"problem":146,"code":"(fn [m]\n  (apply merge \n         (for [[x y] m\n               [a b] y]\n           {[x a] b})))","user":"505aa653e4b021387fb89857"},{"code":"#(into {} (apply concat\n  (for [x %] (for [y (keys (second x))]\n    [[(first x) y] ((second x) y)]))))","problem":146,"user":"5054c7e1e4b0b1b9d1860eb2"},{"code":"(fn [c]\n  (reduce\n    merge\n    (map (fn [k v]\n           (reduce \n             merge \n             {} \n             (map #(assoc {} (vector k %1) %2) (keys v) (vals v))))\n         (keys c)\n         (vals c))))","problem":146,"user":"51592b81e4b0394f658fe22c"},{"problem":146,"code":"(fn [t]\n  (into {}\n        (for [[k v] t, [sk sv] v]\n          [[k sk] sv])))","user":"541b1f25e4b01498b1a71a63"},{"code":"(fn fclj-146 [map-of-maps]\n  (into {} (for [[first-key first-value] map-of-maps [second-key second-value] first-value] {[first-key second-key] second-value})))","problem":146,"user":"4ff01fa9e4b0678c553fc321"},{"code":"(fn [m]\n  (apply merge\n    (flatten \n      (for [[k v] m]\n        (for [[k2 v2] v]\n          {[k k2] v2})))))","problem":146,"user":"4dbb1126535d1e037afb21b3"},{"code":"#(apply assoc {}\n  (apply concat\n    (for [[outer-key inner-map] %\n          [inner-key inner-val] inner-map]\n      [[outer-key inner-key] inner-val])))","problem":146,"user":"504f2071e4b0e7ad84dbc4be"},{"code":"(fn flaten-map [m]\n      (reduce \n        (fn[res [x y] ]\n          (reduce \n            (fn[r t]\n              (assoc r [x (first t)] (second t)))\n            res y))                            \n        {} \n        m))","problem":146,"user":"5273562ae4b03e8d9a4a7479"},{"code":"#(into {} (flatten (for [foo (keys %1)] (for [bar (get %1 foo)] (conj {} [[foo (first bar)] (first (rest bar))] )))))","problem":146,"user":"4f038567535dcb61093f6b0c"},{"code":"(fn [maps]\n  (apply merge\n    (map\n      (fn [[k v]]\n        (zipmap\n          (map #(vector k %) (keys v)) (vals v)))\n    maps)))","problem":146,"user":"4fc0853ae4b081705acca327"},{"problem":146,"code":"#(into {} (for [[k1 v] %\n            [k2 v2] v]\n        {[k1 k2] v2}))","user":"56eaad95e4b04a395b9a040f"},{"problem":146,"code":"#(apply merge (for [[k m2] % [k2 v2] m2]\n                 (hash-map (vector k k2) v2)))","user":"5ea6fe98e4b00a66d4a951b2"},{"code":"(fn [s] (reduce into {} (for [key1 (keys s) key2 (keys (s key1))] {[key1 key2] ((s key1) key2)})))","problem":146,"user":"510d3dc6e4b078ea71921132"},{"code":"(fn [in]\n  (into {}\n  (for [[a b] in\n       [m n] b]\n      [[a m] n])))","problem":146,"user":"4faec810e4b081705acca24e"},{"problem":146,"code":"(fn [a-map]\n  (let [maps (for [x a-map]\n                  (map #(assoc {} [(first x) (first %)] (second %)) \n                       (for [y (second x)] y)))]\n        (reduce merge (flatten maps))))","user":"58fc52cee4b0438e51c2cf95"},{"problem":146,"code":"(fn [input]\n   (reduce (fn [acc key] (let [val (get input key)\n                               internal (apply concat (map #(vector [key %] (get val %)) (keys val)))]\n                           (apply assoc acc internal))) {} (keys input)))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":146,"code":"(fn path [xs]\n    (into {}\n      (for [firstLevelKey (keys xs)\n            secondLevelKey (keys (get xs firstLevelKey))]\n          {[firstLevelKey secondLevelKey] (get-in xs [firstLevelKey secondLevelKey])})))","user":"525b4e8de4b0cb4875a45d0f"},{"problem":146,"code":"#(reduce merge\n         (for [k1 (keys %)]\n           (reduce conj {} (for [k2 (keys (get % k1))] \n                             {[k1 k2] (get-in % [k1 k2])}))))","user":"56baa68ce4b0f26550335947"},{"problem":146,"code":"#(apply merge\n   (for [[k1 v1] %\n   \t     [k2 v2] v1] (hash-map[k1 k2] v2)))","user":"59dd38a8e4b0a0ac046f2503"},{"code":"#(into {}\n  (for [[k1 m] %\n        [k2 v] m]\n    [[k1 k2] v]))","problem":146,"user":"4ee4f4a9535d1385b2869d85"},{"problem":146,"code":"#(into {}\n(for [[pk pv] %1 [ck cv] pv]\n  [[pk ck] cv]))","user":"52cda397e4b07d0d72b2737a"},{"code":"#(into {} (for [[k m] %1 [sub-k v] m] [[k sub-k] v]))","problem":146,"user":"4f3d83b5e4b0e243712b1f69"},{"problem":146,"code":"(fn[m]\n  (letfn\n    [(extract-vals\n       [m & [base-key]]\n       (reduce\n         (fn[a [k v :as i]]\n           (if (map? v)\n             (merge a (extract-vals v (conj (vec base-key) k)))\n             (assoc\n               a\n               (conj (vec base-key) k)\n               v)))\n         {}\n         m))]\n    (extract-vals m)))","user":"5e53f8e0e4b027a2e10ac0e7"},{"code":"(fn [s]\n  (apply merge (for [[a av] s [b bv] av] {[a b] bv})))","problem":146,"user":"4f9120d8e4b0dcca54ed6c96"},{"code":"(fn [m]\r\n  (into {}\r\n    (for [[mk mv] m\r\n          [mvk mvv] mv]\r\n        [[mk mvk] mvv])))","problem":146,"user":"4eddcbbf535d10e5ff6f532d"},{"problem":146,"code":"#(apply merge (flatten (for [m %]\n                            (for [v (last m)]\n                                 {[(first m) (first v)] (last v)}))))","user":"5f331015e4b0574c87022c37"},{"problem":146,"code":"#(into {}\n        (mapcat (fn [[k1 submap]]\n                  (mapcat (fn [[k2 v]]\n                            {[k1 k2] v})\n                          submap))\n                %))","user":"53b7aa6ce4b047364c0444d1"},{"code":"(fn [m]\n   (into {}\n         (for [[k v] m\n               [k1 v1] v]\n           [[k k1] v1])))","problem":146,"user":"5173726be4b098276e74652c"},{"code":"(comp\n #(apply merge %)\n flatten\n #(for [item %]\n    (let [k (key item) v (val item)]\n      (if (map? v)\n        (for [vitem v]\n          (let [vk (key vitem) vv (val vitem)]\n            (hash-map (vector k vk) vv)))\n        (hash-map (vector k) v))))\n )","problem":146,"user":"52c2106fe4b07a9af5792374"},{"problem":146,"code":"(fn t-t [m]\n  (into {}\n        (for [e m\n              x (val e)\n              :let [[k v] x]]\n          [[(key e) k] v])))","user":"56504dc2e4b0284900eef6bc"},{"code":"(fn [tr]\n  (into {} (for [[k v] tr, [k1 v1] v] [[k k1] v1])))","problem":146,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":146,"code":"#(apply merge (flatten (for [[k1 v1] %]\n        (for [[k2 v2] v1]\n         {[k1 k2] v2}))))","user":"5b60e88be4b0c6492753e70b"},{"code":"(fn [mmm] (reduce merge {} (for [ x   mmm\n                                  :let [y \t(reduce  #(assoc % [ (first x) (first %2)]  (second %2) ) {} (second x) )]  \n          \t\t    ] y)))","problem":146,"user":"518644bce4b0da5a5be3baca"},{"problem":146,"code":"#(into {} (mapcat (fn [[k v]]\n         (for [[k2 v2] v]\n\t\t\t{[k k2] v2})) %1))","user":"567d18c9e4b05957ce8c61c4"},{"problem":146,"code":"#(apply merge (for [[a b] %\n      [a2 b2] b\n      ]\n  {[a a2] b2}\n  ))","user":"5e3121e5e4b05b4b01516221"},{"problem":146,"code":"(fn ans-146 [original]\n  (reduce\n   (fn [acc item]\n     (merge acc\n            (reduce\n             (fn [acc innerItem]\n               (merge acc\n                      {[item (first innerItem)] (last innerItem)}))\n             {}\n             (get original item))))\n   {}\n   (keys original)))","user":"608fac60e4b03bd49d9f36c7"},{"code":"#(apply conj (for [x % y (second x) ] {[(first x) (first y)] (second y)}))","problem":146,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"code":"(fn [mp] (apply assoc {} (apply concat (apply concat (for [[x y] mp] (for [[a b] y] [[x a] b]))))))","problem":146,"user":"513d121fe4b0e544971636a2"},{"problem":146,"code":"(fn [m]\n  (apply hash-map\n         (mapcat identity\n                (for [a (keys m)\n                      b (keys (m a))]\n                  (vector [a b] ((m a) b))))))","user":"54dd76c8e4b024c67c0cf794"},{"problem":146,"code":"(fn [t]\n  (reduce conj\n          {}\n          (for [[k1 v1] t [k2 v2] v1] [[k1 k2] v2])))","user":"5a512929e4b05d388ecb6be2"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [k  (keys m)\n              :let [m2 (get m k)\n                    k2 (keys m2)]\n              k' k2]\n          [[k k'] (get m2 k')] )))","user":"5dcbe0dbe4b02b31cc3da3be"},{"problem":146,"code":"(fn [inputs]\n  (into {} (for [[k v] inputs \n                 [k1 v1] v] \n             [[k k1] v1]))  \n  )","user":"570e43d8e4b0b0fb43fd06eb"},{"problem":146,"code":"(fn split-map  \n  ([map]\n      (split-map [] {} map))\n  ([prefix acc item]\n    (if (map? item)\n      (reduce-kv #(split-map (conj prefix %2) %1 %3) acc item)\n      (assoc acc prefix item))))","user":"567d132ee4b05957ce8c61c3"},{"problem":146,"code":"#(into {}(for [[k v] % \n    [k2 v2] v]\n  [[k k2] v2]))\n\n;mapcat (fn [[k v]]  (for [[k2 v2] v]  (concat [k k2] v2)))    【concat 针对 seq 操作 传入 concat 的参数必须都是 collection】","user":"57ee46c7e4b0bfb2137f5bb3"},{"problem":146,"code":"(fn [themap] (apply merge (for [amap themap entry (second amap)] (let [mainkey (first amap)] \n(hash-map [mainkey (first entry)] (second entry))))))","user":"55f75c6be4b06e875b46cea9"},{"problem":146,"code":"(fn [hm]\n\n       (let [hmt (into [] hm)]\n         ;(map #(rest %))\n\n         (into {}\n         (reduce concat\n         (map (fn [mcol]\n                   (map (fn [rmcol]\n                            (hash-map [(first mcol) (first rmcol)] (get-in hm [(first mcol) (first rmcol)]))) (rest mcol) ))\n              (for [el hmt] (into [(el 0)] (el 1))))))\n\n         )\n\n\n         )","user":"59692530e4b069c0a1a197e4"},{"code":"(fn [m](into {} (mapcat (fn [m1](map (fn [m2](vector [(key m1) (key m2)] (val m2)))(val m1))) m)))","problem":146,"user":"51b793d3e4b0d906fcd71d38"},{"code":"(fn trees->tables [MAP]\n  (into {}\n      (for [[k v] MAP\n            [value-key value-value] v]\n    (vec [[k value-key] value-value]))))","problem":146,"user":"53713ebee4b0fc7073fd6ead"},{"problem":146,"code":"#(into {} (for [[k v] % [k1 v1] v] \n             {[k k1] v1}))","user":"5b81139fe4b047b03b203782"},{"code":"(fn [cols]\n  (into {} (map\n   #(into {} (for [x [(first %)] y (second %)] {[x (first y)] (second y)}))\n   cols\n   )))","problem":146,"user":"52c1bd29e4b07a9af579236a"},{"problem":146,"code":"#(into {}\n       (for [[k v] %1\n             [l w] v]\n         [[k l] w]))","user":"561ca2eae4b064ca9f4b169b"},{"code":"(fn [dict]\n  (apply merge\n    (for [[o-key o-val] dict]\n      (apply merge\n        (for [[i-key i-val] o-val]\n          {[o-key i-key] i-val})))))","problem":146,"user":"4e356d2b535deb9a81d77f2d"},{"problem":146,"code":"#(into {} (for [k (keys %) v (get % k)] {[k (first v)] (last v)}))","user":"54b2ec84e4b09f271ff37d33"},{"problem":146,"code":"(fn [input]\n    (apply merge (for [[k v] input]\n                   (into {} (for [[k2 v2] v]\n                              [[k k2] v2])))))","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn [m]\n  (apply merge\n  (for [[prefix subm] m\n        [k v] subm]\n    {[prefix k] v})))","problem":146,"user":"4ec12577535dfed6da9c6da8"},{"problem":146,"code":"(fn [table]\n  (into {} (for [[k v] table [k1 v1] v] [[k k1] v1])))","user":"56897739e4b0dcc4269f407d"},{"problem":146,"code":"#(apply merge (for [x %\n          y (val x)]\n     {[(key x) (first y)] (second y)}))","user":"5d29c06be4b01671435dbc6b"},{"code":"(fn [mp]\n  (let [xmp mp\n        sq (reduce (fn [lst major]\n          (concat (map\n                   (fn [minor] (vector [(first major) (first minor) ] (second minor) ))\n                   (second major)) \n                  lst)\n          ) [] xmp)]\n    \n\n    (reduce (fn [l [k v]] (assoc l k v) ) {} sq)\n    ))","problem":146,"user":"5124619ae4b02c3f2a072ccd"},{"problem":146,"code":"(fn f [x]\n  (into {} (for [[k1 v1] x] \n    (into {} (for [[k2 v2] v1]\n      {[k1 k2] v2})))))","user":"59f78b49e4b0ca45a743a30e"},{"problem":146,"code":"#(reduce conj (for [ [k1,v] %, k2 (keys v) :let [nk [k1 k2 ]]  ] {nk (v k2)}))","user":"54972b0ee4b0b312c081ff6e"},{"code":"(fn [m]                                                                                              \n   (zipmap                                                                                           \n    (for [x (keys m) y (keys (m x))] [x y])                                                          \n    (for [x (keys m) y (keys (m x))] ((m x) y))\n))","problem":146,"user":"4f1d1299535d64f603146487"},{"problem":146,"code":"#(into {} (for [[k v] %1 [k1 v1] v] [[k k1] v1]))","user":"538e29d1e4b0b51d73faae80"},{"problem":146,"code":"(fn [m]\n          (apply merge (vec\n                 (for [k (keys m), v (get m k)]\n                   {[k (first v)] (second v)}))))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"(fn [m] \n  (let [xs (for [x (keys m) y (keys (m x))] [[x y] (get-in m [x y])])]\n      (apply hash-map (apply concat xs))\n    )\n  )","problem":146,"user":"50ab8ae3e4b01d6eb43ce9a0"},{"code":"(fn [m]\n    (into {}\n          (for [[k v] m\n                [kk vv] v]\n            [[k kk] vv])))","problem":146,"user":"4ee26f01535d10e5ff6f5368"},{"code":"#(into {} (for [x % y (val x) ] [(map key [x y]) (val y)]))","problem":146,"user":"4e6f578c535d5021c1a8961b"},{"problem":146,"code":"(fn [mp]\n  (into {}(for [[k v] mp\n        \t\t[vk vv] v]\n\t\t\t(vec [[k vk] vv]))))","user":"581dad0ae4b04b46fc4b0f17"},{"code":"#(into {} (for [[k v] % [sk sv] v] [[k sk] sv]))","problem":146,"user":"51284226e4b03a34742b4308"},{"code":"(fn [m]\n   (into {}\n         (for [[a b] m\n               [x y] b]\n           [[a x] y])))","problem":146,"user":"53224d45e4b09d4e7a9b54c0"},{"code":"(fn [map-of-hashmaps] (into {} (for [[hashmap-key hashmap] map-of-hashmaps [k v] hashmap ] [[hashmap-key k] v])) )","problem":146,"user":"51729002e4b044b2ef48a850"},{"code":"(fn [m]\n    (into {} (for [x (seq m)\n          y (seq (second x))]\n      [[(first x) (first y)] (second y)])))","problem":146,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"(fn [m]\r\n  (apply merge\r\n    (flatten (for [k (keys m)\r\n          :let [vk (keys (get m k))]]\r\n          (map #(assoc {} [k %] (get (get m k) %)) vk)))))","problem":146,"user":"50843a4ae4b0c98812d0788b"},{"problem":146,"code":"(fn [mp]\n          (into {}  (for [k (seq mp)] \n                      (into {}  (for [m2 (seq (val k))] [[(key k) (first m2)] (val m2)]))\n                      ))\n          )","user":"533c2605e4b0e30313ee6cd7"},{"problem":146,"code":"(fn f \n  [lst]\n  (->>\n    (for [[k v] lst\n          [k2 v2] v]\n      (list (vector k k2) v2))\n    (apply concat)\n    (apply hash-map)))","user":"59e778aae4b0249b72820716"},{"code":"(fn [m] (reduce merge (for [a (keys m) b (keys (get m a))] {[a b] (get-in m [a b])})))","problem":146,"user":"4dc1bd76535d020aff1edf8d"},{"problem":146,"code":"#(apply merge (for [k (keys %) [a b] (get % k)]\n                {[k a] b}))","user":"568227fee4b0945ebc182a8a"},{"problem":146,"code":"(fn [m]\n  (loop [coll (seq m), acc {}]\n    (if-let [[k m'] (first coll)]\n      (recur (rest coll) (into acc (map (fn [[k' v']] [[k k'] v']) m')))\n      acc)))","user":"552356fae4b0882d96d091af"},{"code":"#(into {} (for [[a b] % [x v] b] {[a x ] v}))","problem":146,"user":"4fb37882e4b081705acca2a0"},{"problem":146,"code":"(fn mapflat\n  [m]\n  (into {} (for [[k1 v1] m\n                 [k2 v2] v1]\n             [[k1 k2] v2])))","user":"5d609ddde4b0c9e5857d5008"},{"problem":146,"code":"(fn [mm]\n  (loop [out {}, m mm]\n    (if (empty? m)\n      out\n      (recur (conj out (apply merge (for [x [(ffirst m)], y (second (first m))] {[x (first y)] (second y)})))\n             (rest m)\n      )\n)))","user":"54524afbe4b0e397800069bc"},{"problem":146,"code":"(fn [omap]\n    (apply hash-map\n      (apply concat (#(for [[k v] omap\n                            [kn vn] v]\n                        [[k kn] vn])))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":146,"code":"#(into {} (for [[k v] %   \n                  [k1 v1] v]\n            [[k k1] v1]))","user":"58b86162e4b0ebc645576d97"},{"problem":146,"code":"#(into {} (for [[k v] %, [k2 v2] v]\n            [[k k2] v2]\n            )\n          )","user":"5c17467fe4b01240ff5671df"},{"code":"(fn [xs]\n    (apply merge (mapcat (fn [x]\n      (let [[k v] x]\n        (for [t v]\n          (let [[k2 v2] t]\n            {[k k2] v2})))) xs)))","problem":146,"user":"4fbd12a5e4b081705acca2fd"},{"problem":146,"code":"(fn trees-into-tables [trees]\n  (apply merge (for [[one next-tree] trees\n                     [two three] next-tree]\n                 {[one two] three})))","user":"562e8b2be4b0ab312c17ebbb"},{"code":"(fn  [bt]\n    (reduce merge (flatten (for [[k v] bt]\n                      (for [[ k2 v2] v]\n                        (hash-map (vector k k2) v2))))))","problem":146,"user":"538e36c7e4b0b51d73faae81"},{"problem":146,"code":"(fn [maps]\n  (letfn [(f* [a map]\n            (reduce-kv (fn [m k v]\n                         (assoc m [a k] v)) {} map))]\n    (reduce-kv (fn [m1 kk v1]\n                 (merge m1 (f* kk v1))) {} maps)))","user":"5db658ebe4b010eb3c36cd39"},{"code":"(fn [m]\n   (into {}\n         (for [[k v] m [x y] v]\n           [[k x] y])))","problem":146,"user":"5097b556e4b00ad8bab4e970"},{"code":"(fn [m] (apply merge\n   (for [[k1 v1] m [k2 v2] v1] (hash-map [k1 k2] v2))))","problem":146,"user":"4dcfbc44535d5973398f92a7"},{"problem":146,"code":"#(into (hash-map) (for [k (keys %) v (% k)] [[k (first v)] (second v)]))","user":"5e471203e4b043cd24807a2a"},{"problem":146,"code":"#(into {} (for [x (keys %) y (get  % x) ] {[x (first y)] (last y)}))","user":"56e6e1e6e4b02e7e935eb6cf"},{"code":"(fn [m]\n  (->> (for [[k1 v1] m]\n          (for [[k2 v2] v1]\n            [[k1 k2] v2]))\n       (mapcat concat)\n       (into {})))","problem":146,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn [m]\n  (reduce (fn [r [k v]] (assoc r k v)) nil\n   (for [a (keys m)\n   b (keys (get m a))]\n     [[a b] (get-in m [a b])])))","problem":146,"user":"4e513ecf535dc968683fc4f6"},{"problem":146,"code":"(fn w [maybe-map & [maybe-path]]\n      (let [path (or maybe-path [])\n            j (for [k (keys maybe-map)]\n                (let [next (get maybe-map k)]\n                  (if (map? next)\n                    (w next (conj path k))\n                    {(conj path k) next})))]\n        (apply merge j)))","user":"51e3a549e4b0c611d6113e47"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (apply concat\n               (for [[k v] m]\n                 (map #(vector [k (first %)] (second %)) v)))))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k v] m\n                           [k' v'] v]\n                           [[k k'] v'])))","user":"58949f8de4b00487982d525e"},{"problem":146,"code":"(fn trees-into-table\n  [set1]\n  (->>\n    (for [[x y] set1 [ks vs] y] [[x ks] vs])\n    (into {})\n    )\n  )","user":"59e12c94e4b08badc2a0c509"},{"code":"(fn [m]\n  (apply merge (for [pk (keys m)\n                     sk (keys (m pk))]\n                 {[pk sk] ((m pk) sk)})))","problem":146,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":146,"code":"(fn flatMap [m] (apply assoc {} (apply concat (for [[h t] m] (apply concat (for [[a b] t] [[h a] b]))))))","user":"550e0373e4b06e50f9beb162"},{"code":"(fn [input]\n   (apply hash-map (for [outer-keys (keys input)\n                         inner-keys (keys (get  input outer-keys))\n                         v [[outer-keys inner-keys] (get (get input outer-keys) inner-keys)]]\n                     v)))","problem":146,"user":"525ed5f4e4b0cb4875a45db8"},{"problem":146,"code":"(fn tree-to-table [t]\n  (apply merge (for [[k v] t\n                     [k2 v2] v]\n                 {[k k2] v2})))\n\n;; this problem is particularly tricky for me to understand...","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn demap [hmap]\n  (->> (for [k (keys hmap) k2 (keys (hmap k))] [[k k2] (get-in hmap [k k2])])\n       (reduce conj {})))","problem":146,"user":"50645e12e4b007509339a58a"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k r] m [l v] r] [[k l] v])))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":146,"code":"#(into {} (for [[x v] % [y w] v] {[x y] w}))","user":"575b3e9be4b02ea11479935b"},{"code":"(fn [m]\r\n  (apply merge\r\n         (for [[k v] m]\r\n    (apply merge\r\n           (for [[x y] v]\r\n             {[k x] y})))))","problem":146,"user":"4f410b63e4b0e243712b1fc5"},{"code":"#(apply merge\n  (for [[k1 kv] % [k2 v] kv]\n    {[k1 k2] v}))","problem":146,"user":"509160dae4b0742c82730aef"},{"problem":146,"code":"(fn into-tables2 [hmap]\n  (into {}\n        (for [[k1 submap] hmap\n              [k2 v] submap]\n          [[k1 k2] v])))","user":"5fa74b82e4b0fa27300f3dda"},{"problem":146,"code":"#(reduce (fn [acc e] \n           (loop [k (keys (% e)) a acc] \n             (if (empty? k) \n               a \n               (recur (rest k) (assoc a [e (first k)] ((% e) (first k)))))))\n        {} (keys %))","user":"55a74d46e4b09e57187da2a3"},{"problem":146,"code":"(fn fm [map]\n   (into {} (for [[k v] map\n                  [k2 v2] v]\n              [[k k2] v2])))","user":"535eaa73e4b04ce2eb3ed2d4"},{"code":"(fn [input]\n  (apply hash-map\n    (reduce concat\n      (for [row input\n            col (second row)\n            :let [row-name (first row)\n                  col-name (first col)\n                  body (second col)]]\n        [[row-name col-name] body]))))","problem":146,"user":"521b73f5e4b0c4ef0be83043"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[x y] m [a b] y] [[x a] b])))","user":"54e24a05e4b024c67c0cf7ce"},{"code":"(fn [outer] (into {} (for [[o inner] outer [k v] inner] [[o k] v])))","problem":146,"user":"52d3f666e4b09f7907dd1327"},{"problem":146,"code":"(fn [m]\n     (into {}\n           (for [[r t] m\n                 [k v] t]\n             [[r k] v])))","user":"532902f8e4b09d4e7a9b550e"},{"code":"(fn pm [m] (into {}  (for [k1 (keys m) k2 (keys (m k1))] [[k1 k2] (get-in m [k1 k2])])) )","problem":146,"user":"4ff67852e4b0678c553fc37e"},{"problem":146,"code":"#(apply merge\n          (for [x %\n              :let [mkey (get x 0)\n                    mval (get x 1)]]\n                (apply merge (for [x2 mval\n                      :let [mk2 (get x2 0)\n                            mv2 (get x2 1)]]\n                          {[mkey mk2] mv2}))\n                ))","user":"59089229e4b047aa04b1997c"},{"code":"#(apply hash-map (apply concat (for [m %\n                                     n (second m)]\n                                 [[(first m) (first n)] (second n)])))","problem":146,"user":"51789dfae4b03d69594194d7"},{"problem":146,"code":"(fn [input]\n  (into\n   {}\n   (for\n    [[top-key top-val] input\n     [mid-key mid-val] top-val]\n     [[top-key mid-key]\n       mid-val])))","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn flatten-tree\n  [tree]\n  (apply conj \n  (for  [k1 (keys tree) k2 (keys (get tree k1))]\n    {[k1 k2] (get-in tree [k1 k2])})))","problem":146,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn [m]\n  (reduce #(apply conj %1\n    (let [m1 (m %2)]\n      (for [k (keys m1)] [[%2 k] (m1 k)]))) {} (keys m)))","problem":146,"user":"505dcfc8e4b0e6aca564be0d"},{"code":"#(into {} (for [[k v] % [ik iv] v] [[k ik] iv]))","problem":146,"user":"51a768e0e4b0da5f497bde84"},{"problem":146,"code":"(fn [xs] \n  (into {}\n        (for [[k v] xs [vk vv] v]\n          (vec [[k vk] vv]))))","user":"50cf94bde4b0abc485cb9bb2"},{"problem":146,"code":"(fn [m]\n  (apply merge (for [[k v] m [kk vv] v] {[k kk] vv})))","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn flatmap [m]\n  (into {}\n    (apply concat\n      (for [[k v :as p] m]\n        (if (map? v)\n          (map (fn [[k2 v2]] [[k k2] v2]) v)\n          [p])))))","problem":146,"user":"4f58fe71e4b0a7574ea7185f"},{"problem":146,"code":"(fn [original-given-map]\n  ((fn flatten-keys-map* [given-map flatten-keys result-map]\n     (if (map? given-map)\n       (reduce into (map (fn [[key value]] (flatten-keys-map* value (conj flatten-keys key) result-map)) (seq given-map)))\n       (assoc result-map flatten-keys given-map)\n       )\n     )\n    original-given-map [] {}\n    )\n  )","user":"566639f4e4b0e91d5f5c566b"},{"code":"(fn [s]\n  (into {}\n  (for [e1 s e2 (val e1)] \n  {[(key e1) (key e2)] (val e2)})))","problem":146,"user":"50aab057e4b056ee0193586b"},{"problem":146,"code":"(fn [m]\n  (reduce merge\n   (for [[k1 v1] m\n         [k2 v2] v1]\n     {[k1 k2] v2})))","user":"4fdb881ee4b05e33b9224f5e"},{"problem":146,"code":"(fn [maps] (into {} (for [ [k v] maps [k1 v1] v] [[k k1] v1])))","user":"5dfa1c67e4b0a607a9a45cc5"},{"problem":146,"code":"(fn trees-into-tables\n  [source-map]\n  (->>\n    (for\n      [[level1-key level1-value] source-map,\n       [level2-key level2-value] level1-value]\n      [[level1-key level2-key] level2-value])\n    (into {} ,,,)))","user":"5c6227fee4b0fca0c1622641"},{"code":"(fn trees [input]\n      (into {}\n       (apply concat\n              (for [x input]\n                (for [y (second x)]\n                  [[(first x) (first y)] (second y)]\n                  )\n                ))))","problem":146,"user":"53838742e4b06839e8705ee0"},{"problem":146,"code":"(fn [m]\n      (apply hash-map\n             (apply concat \n                    (for [[k1 v1] m\n                          [k2 v2] v1]\n                      [[k1 k2] v2]))))","user":"542a7c9be4b01498b1a71b41"},{"problem":146,"code":"(fn [xs]\n  (into \n    {}\n    (for [[k v] xs [k2 v2] v]\n      [[k k2] v2]\n      )))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn [tree] \n  (let [hash-map-from-pairs\n        (fn [s]\n          (reduce\n            (fn [result [k v]]\n              (assoc result k v))\n            {} s))]\n        (hash-map-from-pairs (for [\n              [level-1 level-2-outer] tree\n              [level-2-a level-2-b] level-2-outer]\n          [[level-1 level-2-a] level-2-b]))))","problem":146,"user":"53070615e4b02e821686979e"},{"code":"(fn [m]\n  (into {}\n  (for [k (keys m)\n        v (m k)]\n     \n     (vec [[k (first v)] (second v)])\n    )\n  )\n  )","problem":146,"user":"51bec919e4b013aa0d74b800"},{"problem":146,"code":"(fn [x]\n  (let [f (fn mf\n            ([m]\n             (->> m\n                  keys\n                  (map #(mf [%] (get m %)))))\n            ([p m]\n             (if (map? m)\n               (->> m\n                    keys\n                    (map #(mf (concat p [%]) (get m %))))\n               {p m})))]\n    (apply merge (flatten (f x)))))","user":"5b14475be4b0cc2b61a3be5a"},{"code":"(fn treetab [t]\n  (apply merge  (for [[k v] t]\n                  (if (coll? v)\n                    (into {} (for [[i j] v]\n                               (hash-map (vector k i) j)))\n                    (hash-map (vector k) v)\n                    )\n                  ))\n  )","problem":146,"user":"52ba43d0e4b07a9af57922cd"},{"problem":146,"code":"(fn flatten [a-map]\n  (reduce \n   (fn [a b] (conj a b)) \n   '{} \n   (map \n    (fn [x] (hash-map (vector (first x) (second x)) (last x))) \n    (for [i a-map j (last i)] (cons (first i) j)))))","user":"563d12f9e4b0bfe05bf11845"},{"code":"(fn [m] (let [pairs (for [n m\n                                    kn (keys (second n))]\n                                [(first n) kn])]\n                    \n                    (reduce merge (for [t (map (fn [p] [p (get-in m p)]) pairs)]\n                                    (assoc {} (first t) (second t))))))","problem":146,"user":"50a5b7e9e4b0aa96157e2610"},{"code":"#(into {} (for [[k m1] % [kk v] m1] [[k kk] v]))","problem":146,"user":"4e7f4147535db966e863cc3d"},{"problem":146,"code":"(fn trfn \n   ([m] (trfn m []))\n   ([m kl]\n    (if (map? m)\n      (into {} \n            (for [[k v] m]\n              (trfn v (conj kl k))))\n      [kl m])))","user":"57d9f603e4b0bd073c20240a"},{"problem":146,"code":"(fn [ms]\n  (into {} (for [[k1 v1] ms\n                 [k2 v2] v1]\n             [[k1 k2] v2])))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":146,"code":"#(into {} (flatten (for [[k v] %] (for [[a b] v] {[k a] b}))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"problem":146,"code":"(fn [map]\n  (reduce (fn [acc1 [k1 v1]]\n               (merge acc1 (reduce (fn [acc2 [k2 v2]]\n                                     (assoc acc2 [k1 k2] v2)\n                                     ) {} v1))) {} map))","user":"52efd3d9e4b05e3f0be25ed4"},{"code":"#(let [g (gensym)] (into {} (for [[k v] % [k* v*] (if (map? v) v {g v})] [(remove #{g} [k k*]) v*])))","problem":146,"user":"4f06dcad535dcb61093f6c16"},{"code":"(fn [m]\n   (reduce (fn [y [k1 v1]]\n             (merge y (reduce (fn [y' [k2 v2]] (assoc y' [k1 k2] v2)) {} v1)))\n           {} m))","problem":146,"user":"4f616892e4b0defedf855fbf"},{"problem":146,"code":"(fn [m]\n  (into {} \n        (for [kv m ikv (second kv)]\n             [[(first kv) (first ikv)] (second ikv)])))","user":"5a0ef454e4b04bbd27e6d9fa"},{"problem":146,"code":"#(reduce merge (for [[k v] % [k2 v2] v] {[k k2] v2}))","user":"58e66350e4b056aecfd47cb2"},{"problem":146,"code":"(letfn [(sub [r pk m] (reduce (fn [r [k v]] (assoc r [pk k] v)) r m))\n        (main [m] (reduce (fn [r [pk m]] (sub r pk m)) {} m))]\n  #(main %))","user":"51c3c6a6e4b0851ac09658f8"},{"problem":146,"code":"(fn [args]\n(apply (partial conj {})\n(for [[k v] args\n[kk vv] v]\n[[k kk] vv])))","user":"54580586e4b01be26fd74616"},{"code":"(fn [-map]\n    (into {} (map\n              (fn [-key -value]\n                (reduce #(conj % [[-key (first %2)] (second %2)]) {} -value))  \n              (keys -map)\n              (vals -map))))","problem":146,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":146,"code":"(fn a [m-of-ms]\n  (into {}\n    (for [[k internal-m] m-of-ms\n          [second-k val] internal-m]\n      [[k second-k] val])))","user":"4e6a2f93535d8ccf87e9feaa"},{"problem":146,"code":"(fn flat-2 [m]\n  (into {} (for [k1 (keys m)\n                 k2 (keys (get m k1))]\n             [[k1 k2] (get-in m [k1 k2])])))","user":"5d1be50ce4b02ea6f0fb6986"},{"problem":146,"code":"(fn t [ks nodes]\n  (into (hash-map)\n  (for [en nodes]\n    (let [k (key en) v (val en)]\n      (if (map? v)\n        (t (conj ks k) v)\n        (hash-map (conj ks k) v)))))) []","user":"551c66dae4b07993ea3788de"},{"code":"(fn [m]\n              (reduce merge (flatten (for [k1 (keys m)]\n                                          (for [[k2 v] (get m k1)]\n                                               {[k1 k2] v})))))","problem":146,"user":"4ee82223535d93acb0a66877"},{"problem":146,"code":"#(into {} (for [[k1 v] %\n                     [k2 v2]  v]\n                 [[k1 k2] v2]))","user":"536973e5e4b0243289761e9e"},{"problem":146,"code":"#(into {}\n       (for [[k v] %1\n             [kk vv] v]\n         (vector (conj [k] kk)\n                 vv)))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn [m]\n  (into {} (for [[k m'] m, [k' v] m'] [[k k'] v])))","problem":146,"user":"500ff421e4b0ae202717946f"},{"problem":146,"code":"(fn [m]\n  (into {}\n  \t(for [[k v] m [kv vv] v]\n    \t[[k kv] vv])))","user":"53f3a4ace4b0742d9025b0f7"},{"problem":146,"code":"(fn trees-to-tables [m]\n  (let [seqs (for [[k v] m]\n               (if (map? v)\n                 (for [[a b] v]\n                   [[k a] b])\n                 [k v]))\n        k-vs (reduce concat seqs)\n        pairs (map #(hash-map (first %) (last %)) k-vs)\n        new-m (into {} pairs)\n        ]\n    new-m))","user":"51db0d99e4b06aa4d4669a9d"},{"problem":146,"code":"#(->> (for [[k1 v1] %]\n  (for [[k2 v2] v1]\n    [[k1 k2] v2]))\n      (apply concat)\n      (into {}))","user":"57642916e4b0994c1922fbee"},{"problem":146,"code":"(fn [m]\n   (into {}\n         (for [[k1 v1] m\n               [k2 v2] v1]\n           [[k1 k2] v2])))","user":"56fbf83de4b07572ad1a88da"},{"code":"#(apply hash-map\n  (apply concat\n    (for [ko (keys %)\n          ki (keys (% ko))]\n      [[ko ki] ((% ko) ki)])))","problem":146,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":146,"code":"(fn [m]\n  (into {}  (for [k (keys m)\n         :let [v (get m k)]\n         sk (keys v)]\n     {[k sk] (get v sk)})))","user":"536673a8e4b0243289761e76"},{"problem":146,"code":"(fn  [m]\n  (reduce merge\n          (for [[k mv] m]\n            (into {}\n                  (for [[k' v'] mv]\n                    [[k k'] v'])))))","user":"59971dcbe4b07157cc8daacb"},{"problem":146,"code":"#(into {} (apply concat (for [kv %]\n                          (for [v (second kv)]\n                            [[(first kv) (first v)] (second v)]))))","user":"5f03ab5be4b0cf489e8d7f37"},{"problem":146,"code":"(fn mflatten [m]\n  (into {}\n        (for [[k im] m,\n              [ik v] im]\n          [[k ik] v])))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k v] m\n                 [sk sv] v]\n             (vec [[k sk] sv]))))","user":"57f8ba80e4b0d3187e90092f"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[key1 valm] m, [key2 val] valm] [[key1 key2] val])))","user":"60460824e4b02d28681c77bc"},{"problem":146,"code":"(fn tit[tree]\n  (reduce #(assoc %1 (first %2) (second %2)) {}\n          (for [t tree\n                :let [k1 (first t)\n                      m (second t)]\n                ks (keys m)]\n            (list [k1 ks] (m ks)))))","user":"60c91f48e4b0e0fa5f1b4304"},{"code":"(fn [m]\n  (into {} \n  (for [[k v] m\n        [k2 v2] v]\n    [[k k2] v2])))","problem":146,"user":"4ef0eaef535dced4c769f211"},{"code":"(fn flap [mp]\n  (apply hash-map\n   (apply concat\n          (for [k (keys mp)]\n            (apply concat    \n                   (for [k2 (keys (mp k))]\n                     [[k k2] ((mp k) k2)]))))))","problem":146,"user":"524ae8e6e4b09eba1c0223b5"},{"code":"(fn p146[x]\n\t(apply merge (flatten \n  (map #(map (fn[mkv] \n               (hash-map \n                (vector (first %) (first mkv)) (second mkv)))\n                 (second %))\n           x))))","problem":146,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn [m]\n   (into {} (for [[k1 mi] m, [k2 v], mi] [[k1 k2] v])))","problem":146,"user":"5084cb7de4b0fb8f40674bfb"},{"code":"(fn [col]\r\n  (into {} (for [[k v] col [k2 v2] v]\r\n                  [[k k2] v2])))","problem":146,"user":"50435689e4b034ff00315d21"},{"problem":146,"code":"#(reduce (fn [init [k1 v1]]\n          (into init (map (fn [[k2 v2]] {[k1 k2] v2}) v1)))  \n{} %)","user":"548b7db8e4b0e286459a11fd"},{"code":"#(into {}\n       (for\n         [[a b] %\n          [i j] b] [[a i] j]))","problem":146,"user":"5256627ce4b0541d1855ba1a"},{"code":"#(into {} (for [[k v] %\n               [k2 v2] (seq v)]\n           [[k k2] v2]))","problem":146,"user":"50e7dd5de4b077ad597af36b"},{"code":"(fn [data]\n  (into {}\n   (for [k (keys data) k2 (keys (data k))]\n            {[k k2] ((data k) k2)} ))\n)","problem":146,"user":"4f16d6ed535d64f60314644f"},{"problem":146,"code":"(fn t [in]\n  (into {}\n        (for [[l r] in\n              [l1 r1] r]\n          (vec [[l l1] r1]))))","user":"5489dd4de4b0e286459a11ef"},{"code":"(fn [m] (into {} (mapcat (fn [[k v]] (map (fn [[k2 v2]] [[k k2] v2]) v)) m)))","problem":146,"user":"4f9f7daae4b0dcca54ed6d37"},{"code":"#(->> (for [[k v] % [k2 v2] v]\n        [[k k2] v2])\n    (apply concat)\n    (apply hash-map))","problem":146,"user":"4e521cef535d302ef430da6d"},{"problem":146,"code":"#(into {} (for [[k v] % [q w] v] [[k q] w]))","user":"5fd10010e4b07e53c2f3f02a"},{"problem":146,"code":"(fn into-tables [xs]\n  (->> (for [[k m] xs\n             [n1 n2] m]\n         [[k n1] n2])\n       (into {})))","user":"53528cd3e4b084c2834f4af2"},{"problem":146,"code":"#(into {}\n\t(for [k (keys %) l (keys (get % k))]\n\t\t[[k l] (get-in % [k l])]))","user":"536e5b68e4b0fc7073fd6e6d"},{"problem":146,"code":"(fn [m]\n   (into {} (for [k (keys m)\n                  v (get m k)\n                  ]\n                [[k (first v)] (second v)]\n\n              )))","user":"542b764ae4b0dad94371f28d"},{"code":"#(into {} (for [[k1 v1] %\n                [k2 v2] v1]\n            [[k1 k2] v2]))","problem":146,"user":"5175533fe4b0dea9bbfba575"},{"problem":146,"code":"(fn gtin [mp]\n  (apply merge (for [[k hshmp] mp\n                     [inkey inval] hshmp]\n                 (hash-map [k inkey] inval))))","user":"5d48e6d3e4b0776584bd6f15"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [k1 (keys m)\n              k2 (keys (m k1))]\n          {[k1 k2] ((m k1) k2)})))","user":"58bb218be4b0888cdc949cf4"},{"problem":146,"code":"(fn flater [coll]\n (into  {}\n   (for  [[k v] coll  [k2 v2] v]\n     [[k k2] v2])))","user":"5a527beee4b05d388ecb6bfe"},{"code":"(fn [m]\n   (reduce (fn [a n] (assoc a (first n) (second n))) {}\n    (for [x (keys m) y (get m x)] (list [x (first y)] (second y)))))","problem":146,"user":"4f40f055e4b0e243712b1fc2"},{"code":"#(into {}\n        (for [[k v] %\n              [k2 v2] v]\n            (vec [[k k2] v2])))","problem":146,"user":"524ad140e4b09eba1c0223a9"},{"code":"#(into {} (for [k (keys %), v (% k)]\n    {[k (key v)] (val v)}))","problem":146,"user":"4ecbb249535df97575fdabdf"},{"code":"(fn [x]\n  (into {} \n    (for [ [f1 s1] x, [f2 s2] s1] [[f1 f2] s2])))","problem":146,"user":"5078300de4b0fc74642bff66"},{"code":"(fn [d]\n  (reduce conj (for [[k v] d [k1 v1] v]\n    {(conj [k] k1) v1})))","problem":146,"user":"50481b70e4b0ec70b3ef8d98"},{"code":"#(apply hash-map (mapcat (fn [[k m]] \n    (mapcat (fn [[k1 v1]] (list [k k1] v1)) m)) %) \n )","problem":146,"user":"523b1988e4b02f719975bdbc"},{"code":"#(apply merge (for [[x & [y]] %]\n  (into {} (for [[a b] y]\n    [[x a] b]))))","problem":146,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"code":"(fn [m]\n         (reduce conj {}\n                 (for [[k v] m\n                       [ik iv] v]\n                   [[k ik] iv])))","problem":146,"user":"5294e44de4b02ebb4ef75016"},{"problem":146,"code":"(fn [m]\n  (reduce\n   #(conj %1 %2)\n   {}\n   (for [[key val] m\n         [k v] val]\n     [[key k] v])))","user":"5576f299e4b05c286339e077"},{"problem":146,"code":"#(into {} (for [[i j] %\n        [k v] j\n        ]\n    [[i k]  v]\n  ) )","user":"55c49394e4b0e31453f6499e"},{"code":"(fn [m]\n  (into {} (for [[k1 v1] m\n                 [k2 v2] v1]\n             [[k1 k2] v2])))","problem":146,"user":"50d86fe2e4b01f0871336e67"},{"code":"(fn [z] (reduce merge (flatten (for [[x y] z] (for [[a b] y] {[x a] b})))))","problem":146,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k m'] m [k' v] m'] [[k k'] v])))","user":"54055aa9e4b0addc1aec6665"},{"code":"#(apply hash-map (apply concat (for [[k n] % [l o] n] [[k l] o])))","problem":146,"user":"4ee82539535d93acb0a66878"},{"code":"(fn [m]\n  (into {}\n(for [k (keys m) v (get m k)]\n         (vector\n          (vector k (first v))\n           (second v)))))","problem":146,"user":"4f47eab2e4b0d56e7bb92bc6"},{"code":"(fn [x]\n   (into {} \n         (for [[k1 v1] x, [k2 v2] v1]\n           [[k1 k2] v2])))","problem":146,"user":"53468f6ce4b084c2834f4a3f"},{"code":"(fn [a]\n  (letfn [(addOne [soFar currM]\n            (if (map? currM)\n                 ;(for loop and recursive call) \n                 ;or thinking in terms of the functional style map needs to be used\n                 (apply merge (map #(addOne (conj soFar (key %)) (val %)) currM))\n                  \n                 ;(need to modify its last value)\n                 ;Or thinking in terms of functional programing, \n                 ;simply it will be called for last arg\n                 {soFar currM}\n             )\n          )]\n        (addOne [] a)\n  )\n)","problem":146,"user":"518aec06e4b06da86c1973c2"},{"problem":146,"code":"(fn [mm] (let [ks (into [] (for [ko (keys mm) ki (keys (mm ko))] [ko ki]))] (zipmap ks (map #(get-in mm %) ks))))","user":"5abe2fc2e4b073f17744271e"},{"problem":146,"code":"(fn [m] (into {} (for [x m y (val x)] [[(key x) (key y)] (val y)] )))","user":"5be2e670e4b0ed4b8aab4ccc"},{"problem":146,"code":"(fn [cm] (let [cmo (into {} (for [[k1 v1] cm [k2 v2] v1] [[k1 k2] v2])) ] cmo)\n)","user":"55adf4d7e4b03311e7b732af"},{"problem":146,"code":"(fn [m] (apply assoc {} (for [[k v] (seq m)\n\t\t\t  \t\t\t\t  [k2 v2] (seq v)\n              \t\t\t\t   x [[k k2] v2]]\n          \t\t\t       x)))","user":"4ea03f70535d7eef308072a1"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k1 m'] m\n                 [k2 v] m']\n             [[k1 k2] v])))","user":"5617a540e4b06b1bb2182a12"},{"code":"(fn [map]\n  (into {}\n    (for [[k1 v1] map, [k2 v2] v1] [[k1 k2] v2])))","problem":146,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":146,"code":"(fn [s]\n   (into {} (for [[k v] s\n                  [k1 v1] v]\n              {[k k1] v1}\n              )))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"problem":146,"code":"(fn [s]\n(apply merge (for [x (map #(cons % (get s %)) (keys s))]\n    (reduce #(assoc %1 (vector (first x) (first %2)) (last %2)) {} (next x)))))","user":"4e8849c5535d8b9bb0147ca4"},{"problem":146,"code":"(fn [z]\n  (reduce\n   (fn [ys y]\n     (conj ys\n           ((fn [x] (reduce #(assoc %1 [(first x) (first %2)] (last %2)) {} (second x))) y)))\n   {} z))","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":146,"code":"(fn solve [m]\n  (reduce (fn [acc [k v]]\n            (reduce (fn [acc2 [k2 v2]]\n                      (assoc acc2 [k k2] v2))\n                    acc\n                    v))\n          {}\n          m))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":146,"code":"; #(into {}\n;   (apply concat\n;     (for [[k1 v1] %]\n;       (for [[k2 v2] v1]\n;         [[k1 k2] v2]))))\n\n#(into {} (for [ [k  v ] %\n                 [k2 v2] v ]\n            [[k k2] v2]))","user":"541e2ff8e4b01498b1a71a8a"},{"problem":146,"code":"(fn R [M] (if (map? M) (into {} (for [[k V] M [K v] (R V)] [(cons k K) v])) {[] M}))","user":"55f6fe09e4b06e875b46cea2"},{"problem":146,"code":"#(reduce into (for [[k1 v1] % [k2 v2] v1] {[k1 k2] v2}))","user":"576df252e4b0979f8965156f"},{"problem":146,"code":"(fn parse [m]\n  (into {} \n  (for [x m ]\n    (into {} (map (fn [[k v]]\n           (assoc {} [(first x) k] v))\n           (second x))))))","user":"5829d588e4b051871117bf4a"},{"problem":146,"code":"#(into {} (for [k1 (keys %)\n               [k2 v] (get % k1)\n               ;v (mapcat vals (vals m))\n               ]\n           [[k1 k2] v]))","user":"585dbe41e4b0f14aab7c879f"},{"problem":146,"code":"(fn [m]\n   (into {}(for [[k v] m [k2 v2] v]\n      (vector [k k2] v2))))","user":"5fa96ddbe4b0fa27300f3dec"},{"problem":146,"code":"(fn trees-into-tables\n  [coll]\n  (into {} (for [[k1 v1] coll\n                 [k2 v2] v1]\n             [[k1 k2] v2])))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn [m]\n  (into {}\n        (for [k (keys m)]\n          (if (map? (m k))\n            (into {}\n                  (for [k2 (keys (m k))]\n                    {[k k2] ((m k) k2)}))\n            {[k] (m k)}))))","problem":146,"user":"51a8f0c6e4b08d8ec191b821"},{"code":"#(into{}(for[[k v]%,[l v]v][[k l]v]))","problem":146,"user":"4db92654535d1e037afb21a0"},{"problem":146,"code":"(fn flt [in]\n  (into {}\n        (for [[k v] in\n              [a b] v]\n          {[k a] b})))","user":"557e8326e4b05c286339e0d7"},{"problem":146,"code":"(fn [inp]\n  (into {}\n      (reduce\n       (fn [acc el]\n         (apply conj acc el))\n       []\n       (for [[k v] inp]\n         (for [[mk mv] v]\n           [[k mk] mv])))))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn [coll] \n  (into {} (for [entry1 coll entry2 (val entry1) ] \n\t\t(let [a (key entry1)\n    \t\t  b (key entry2)\n\t\t\t  v (val entry2)]\n\t\t\t  [[a b] v]) )))","problem":146,"user":"523a9fc9e4b081681ca7adca"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k v] m\n          [ki vi] v]\n      [[k ki] vi])))","user":"58b2c435e4b0ebc645576d11"},{"problem":146,"code":"(fn [map]\n   (into {} (loop [seqs (for [key-1 (keys map)]\n                          (for [key-2 (keys (get map key-1))]\n                            [[key-1 key-2] (get (get map key-1) key-2)]))\n                   new-seq []]\n              (if (empty? seqs)\n                new-seq\n                (recur (rest seqs) (concat new-seq (first seqs)))))))","user":"558378dce4b05c286339e115"},{"problem":146,"code":"(fn [tree]\n  (letfn [(map-to-pathseq [tree] (apply concat (map node-to-pathseq tree)))\n          (node-to-pathseq [[key node]]\n            (if (map? node)\n            (map (fn [[path coll]] [(conj path key) coll]) (map-to-pathseq node))\n            [[(list key) node]]))\n          (pathseq-to-pathmap [coll] (into (hash-map) (map (fn [[path node]] [(vec path) node]) coll)))]\n    (-> tree map-to-pathseq pathseq-to-pathmap)))","user":"54a9bc4ae4b09f271ff37cb0"},{"code":"#(apply merge (for [o %, i (val o)] {[(key o) (key i)] (val i)}))","problem":146,"user":"4e95f5a5535dbda64a6f6b3b"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k v] m\n                 [k' v'] v]\n             [[k k'] v'])))","user":"5666500ee4b0e91d5f5c566d"},{"problem":146,"code":"#(apply merge (for [[k v] % [k1 v1] v] {[k k1] v1}))","user":"55d74e71e4b0e31453f64aa4"},{"code":"(fn [m]\r\n    (reduce merge {}\r\n            (for [x m, y (second x)]\r\n              (hash-map [(first x) (first y)] (second y)))))","problem":146,"user":"4f039524535dcb61093f6b2c"},{"code":"(fn [m] \n  (reduce conj {}\n    (for [ [x y] m, [v z] y] \n      [[x v] z]\n    )\n))","problem":146,"user":"4fcf5292e4b03432b189f40e"},{"problem":146,"code":"(fn [xs]\n      (into {}\n            (for [[kx x] xs\n                  [ky y] x] [[kx ky] y]))\n  )","user":"5409a12fe4b0addc1aec66df"},{"code":"#(into {}\n  (for [k (keys %) [k2 v2] (get % k)]\n    [[k k2] v2]))","problem":146,"user":"4f2d5f5de4b0d6649770a05a"},{"problem":146,"code":"(fn tree2table\n   [tree]\n    (apply merge\n      (for [[k1 v1] tree\n            [k2 v2] v1]\n        {[k1 k2] v2})\n      )\n     \n   )","user":"5bc8c033e4b07a9b28b100ca"},{"problem":146,"code":"(fn [coll]\n  (into {}\n        (for [[k1 v1] coll\n              [k2 v2] v1]\n          (vec [[k1 k2] v2]))))","user":"52c672e2e4b0c2d177d6210e"},{"problem":146,"code":"(fn t2t\n  [maps]\n  (let [table (for [kprim (keys maps)\n                    ksec (keys (maps kprim))]\n                [[kprim ksec] (get-in maps [kprim ksec])])]\n    (loop [[x & xs] table \n           res '{}]\n      (let [[k v] x]\n        (if (nil? x)\n          res\n          (recur xs\n                 (assoc res k v)))))))","user":"54b7f217e4b0ed20f4ff6e8f"},{"problem":146,"code":"(fn [xm]\n    (into {}\n          (for [k1 (keys xm)\n                k2 (keys (get xm k1))\n                v [(get-in xm [k1 k2])]]\n            [[k1 k2] v])))","user":"513e8141e4b02b2a3d8235c1"},{"problem":146,"code":"#(into {}\n       (for [[outer-k m] %\n             [inner-k v] m]\n         [[outer-k inner-k] v]))","user":"59ac0965e4b08cbb53654da6"},{"code":"(fn [m]\n  (into {} (for [l1-key (keys m) l2-key (keys (get m l1-key))]\n    [[l1-key l2-key] (get (get m l1-key) l2-key)])))","problem":146,"user":"4dad76588e77d6ed63f12a44"},{"problem":146,"code":"(fn [maps]\n  (into {} (for [[k-outside v-outside] maps [k-inside v-inside] v-outside]\n    (assoc {} (vector k-outside k-inside) v-inside))))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":146,"code":"(fn fl [m]\n    (into {} (for [[k v] m\n                   [j w] v] [[k j] w])))","user":"56018dd4e4b04bb52996e18f"},{"problem":146,"code":"(fn [m1]\n  (into {}\n    (for [[k1 m2] m1\n          [k2 v] m2]\n      [[k1 k2] v])))","user":"548fa2dfe4b0e286459a1240"},{"problem":146,"code":"(fn f146 [coll]\n  (into {}\n        (for [[luar dalam] coll\n              [firs secon] dalam]\n          [[luar firs] secon])))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":146,"code":"(fn walk-map\n  [newmap]\n  \n  (into {} (for [[kei valu] newmap [valkei valval] valu] (vec [[kei valkei] valval]))))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":146,"code":"(fn[xs](apply merge (map #(let [k (key %) m (val %)] (reduce (fn [r x] (assoc r [k (key x)] (val x))) {} (.entrySet m))) (.entrySet xs))))","user":"5ce62d8ee4b0a17bb84e2b83"},{"code":"#(letfn [(f [p m]  \n           (if (map? m) \n               (into {} (map (fn [[k v]] (f (conj p k) v)) m)) \n               [p m]))] (f [] %))","problem":146,"user":"4ede8789535d10e5ff6f5337"},{"problem":146,"code":"#(apply hash-map (apply concat (for [[x y] % [x1 x2] y] [[x x1] x2])))","user":"5b919d9de4b0c0b3ffbd4a24"},{"code":"(fn [m] (apply merge \n          (for [p (keys m) s (keys (get m p))] \n            (hash-map (vector p s) (get-in m [p s])))))","problem":146,"user":"5244fa73e4b0d8acf9ed6acb"},{"problem":146,"code":"(fn [obj]\n  (->>\n   (for [[key value] obj [innerKey innerValue] value]\n         {[key innerKey] innerValue} )\n  (apply merge)))","user":"5ab276f2e4b073f1774425e6"},{"code":"(fn remap [in] (into {} (for [e1 in] (into {} (for [e2 (second e1)] (hash-map [(key e1) (key e2)] (val e2)))))))","problem":146,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn [tree]\n   (loop [result {} elements (keys tree)]\n     (if elements\n       (recur (into result \n                    (loop [internal-result {} internal-elements (keys (tree (first elements)))]\n                      (if internal-elements\n                        (recur (into internal-result {[(first elements) (first internal-elements)] ((tree (first elements)) (first internal-elements))}) (next internal-elements))                        \n                        internal-result\n                        )                   \n                    )) (next elements))\n       result\n       )\n     )\n   )","problem":146,"user":"5106dc1be4b01150e115ebf0"},{"code":"#(into {} (for [[k m] %\r\n                [kk v] m]\r\n            [[k kk] v]))","problem":146,"user":"4fabbb97e4b081705acca21d"},{"problem":146,"code":"(fn tree-into-tables\n  [m]\n  (into {}\n        (for [k (keys m)\n              v (get m k)]\n          [[k (first v)] (second v)])))","user":"5866b999e4b0f14aab7c886b"},{"problem":146,"code":"#(into {} (for [[k v] % [k' v'] v] {[k k'] v'}))","user":"4e77c1db535d324fb2983d72"},{"code":"#(reduce (fn [a p]\r\n            (apply assoc (cons a p)))\r\n          {}\r\n          (for [x %\r\n                y (val x)]\r\n            [[(key x) (key y)] (val y)]))","problem":146,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn [m]\n  (into {}\n  (for [[k v] m [kk vv] v] \n    [[k kk] vv])))","problem":146,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":146,"code":"(fn \n  [m]\n  (reduce #(let [[k v] %2] (assoc % k v)) {} (mapcat identity (for [[k v] m]\n                                                                (if (map? v)\n                                                                  (for [[k2 v2] v]\n                                                                    (list (vector k k2) v2))\n                                                                  (list k v))))))","user":"56bb652ae4b0f26550335953"},{"code":"(fn [inp]\n  (apply merge \n    (for [[parent inner] inp\n          [k v] inner]\n            {[parent k] v})))","problem":146,"user":"4fe88f78e4b07c9f6fd12c45"},{"problem":146,"code":"(fn [m]\n  (reduce merge (for [x m y (second x)]\n                  (hash-map (list (first x) (first y)) (second y)))))","user":"54651faee4b01be26fd746d6"},{"problem":146,"code":"(fn [x]\n  (into {} \n    (for [a (keys x)\n          b (keys (get x a))]\n      [[a b] (get-in x [a b])])))","user":"5a6a7cc5e4b0512ff01cda27"},{"problem":146,"code":"(fn trees->tables [t]\n  (into {} (for [[k v] t\n                 [k2 v2] v]\n             [[k k2] v2])))","user":"4f6ba7bce4b07046d9f4efb0"},{"code":"(fn problem-146\n  [hash]\n  (into {}\n\t  (for [\n\t        [out-k inner-hash] hash\n\t        [inner-k value] inner-hash\n\t        ]\n\t    [[out-k inner-k] value])))","problem":146,"user":"52319066e4b0e2e8de81d1e9"},{"problem":146,"code":"(fn [coll]\n   (reduce (fn [acc it]\n             (let [k (first it) v (second it)]\n               (if (map? v)\n                 (reduce #(assoc %1 [k (first %2)] (second %2)) acc v)\n                 (assoc acc k v))\n               )) {} coll))","user":"590b3aeae4b047aa04b199d0"},{"problem":146,"code":"(fn [a-map]                                                                                                                                                                          \n    (reduce merge (for [[k v] a-map]                                                                                                                                                         \n                    (into {} (for [[k' v'] v]                                                                                                                                                \n                               [[k k'] v'])))))","user":"54ca05a6e4b057c6fda3a24e"},{"code":"(fn [l] (let [a #(apply merge {} %)]\n   (a\n     (for [[y x] l] \n       (a (for [[k v] x] {[y k] v} ))\n      )\n   ))\n   \n\n   )","problem":146,"user":"4f1595da535d64f603146444"},{"code":"(fn flatmap [inp] (apply merge (for [a (keys inp) b (keys (inp a)) :let [c (get-in inp [a b])]] {[a b] c})))","problem":146,"user":"51c214bce4b0d204dbe2ca1c"},{"code":"(fn [inp] (into {} (for [[k1 v] inp]\n                     (into {}\n                    \t(for [[k2 v] v]\n                     \t\t(vector [k1 k2] v))))))","problem":146,"user":"534f13b2e4b084c2834f4ac4"},{"problem":146,"code":"(fn peu [x] \n  (if (empty? x) {} \n    (merge \n      (apply \n       \t(fn rot [a h] \n           (if (empty? h) {} \n              (merge \n                (rot a (dissoc h (first (first h)))) \n                (hash-map (vector a (first (first h))) (last (first h))) ))) \n        (first x)) \n    (peu \n      (dissoc x (first (first x)))))))","user":"53fc8424e4b0de5c418485b3"},{"code":"(fn con [outer]\n\t(into {}\n\t\t(for [ox outer, ix (second ox)]\n\t\t\t\t(vector [(first ox) (first ix)] (second ix))))\n\t\t\t\t)","problem":146,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":146,"code":"#(into {} (for [[k1 v1] %\n                     [k2 v2] v1]\n                 [[k1 k2] v2]))","user":"541ae7dbe4b01498b1a71a61"},{"problem":146,"code":"(fn e [m] (into {} (for\n                       [[k v] m [kk vv] v]\n                       (vec [[k kk] vv] ))))","user":"55bc5280e4b01b9910ae29f1"},{"problem":146,"code":"#(into {} (for [[k v] % [l w] v] {[k l] w}))","user":"53976599e4b0b51d73faaeea"},{"code":"#(apply hash-map (mapcat identity (for [x %,\n       \t\t\t\t\t\t\t\ty (second x)]\n   \t\t\t\t\t\t\t\t[[(first x) (first y)] (second y)])))","problem":146,"user":"51bf4560e4b013aa0d74b817"},{"problem":146,"code":"(fn my-146\n  [m]\n  (reduce into {} (for [x m y (val x)\n        :let [res {}]]\n    (assoc res [(key x) (key y)] (val y)))))","user":"56c3aca0e4b05cc29241ee90"},{"code":"#(into {} (for [[k m] % [a b] m] [[k a] b]))","problem":146,"user":"4eeaf88f535d93acb0a668a3"},{"problem":146,"code":"(fn [m]\n(into {} (for [[k1 m1] m [k2 v2] m1] [[k1 k2] v2])))","user":"511e17a9e4b0c5b849dd36b0"},{"code":"(fn [m]\n  (reduce into {} (for [k (keys m) :let [m2 (m k)]]\n    (for [k2 (keys m2) :let [v (m2 k2)]]\n      [[k k2] v]))))","problem":146,"user":"539c9e26e4b0b51d73faaf2e"},{"code":"(fn [d] (into {} (for [[x v] d [y z] v] [[x y] z])))","problem":146,"user":"5046f909e4b03b02161376b5"},{"problem":146,"code":"(fn [coll]\n    (reduce #(conj %1 %2) {}\n     (for [[k v] coll\n           x v]\n       (hash-map (vector k (first x)) (second x)))))","user":"5a084a24e4b01bb0ae8afdf2"},{"problem":146,"code":"(fn tabled [xs]\n   (into {} (for [k (keys xs)\n                  v (xs k)]\n              [[k (key v)] (val v)])))","user":"5657fed1e4b0f9d632dd84ae"},{"problem":146,"code":"(fn [h]\n\t(into {} (for [outer-key (keys h) inner-key (keys (get h outer-key))]\n\t\t[[outer-key inner-key] (get (get h outer-key) inner-key)]\n\t))\n)","user":"5409f8eae4b0addc1aec66e6"},{"problem":146,"code":"(fn [m]\n        (into {} (for [[k v] m\n                       [k1 v1] v]\n                   [[k k1] v1])))","user":"546c4377e4b00cfc9eacc177"},{"problem":146,"code":"(fn [m]\n  (reduce #(assoc %1 %2 (get-in m %2)) {} (for [outer (keys m) inner (keys (m outer))] [outer inner])))","user":"554edb85e4b00713264bd99a"},{"problem":146,"code":"#(into {} (for [x %\n                y (second x)]\n            [[(first x) (first y)] (second y)]))","user":"56dc3bdfe4b0ea9b8538f819"},{"problem":146,"code":"(fn\n  [x]\n  (into {} (for [[k v] x\n                 [vk vv] v]\n             (vec [[k vk] vv]))))","user":"55842bd7e4b05c286339e11c"},{"code":"#(apply merge {} (for [[k1 v1] % [k2 v2] v1] [[k1 k2] v2]))","problem":146,"user":"4effb663535dcb61093f6a2e"},{"code":"#(into {} (for [[k1 m] %, [k2 v] m]\n            [[k1 k2] v]))","problem":146,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"#(apply hash-map (apply concat (for [[x y] %] \n           (apply concat (for [[a b] y]  (list [x a] b))))))","problem":146,"user":"503539dee4b0ed9c821488f6"},{"code":"(fn flatmap\n  [m]\n  (let [get_subseq (fn [v]\n                     (if (map? v)\n                       (seq (flatmap v))\n                       [[[] v]]))]\n      (into {} (for [[k v] m\n                            [sk, sv] (get_subseq v)]\n                        (let [new_key (vec (cons k sk))]\n                          [new_key sv])\n                        ))))","problem":146,"user":"511b233ae4b07ab9ec456180"},{"code":"(fn [m]\n  (apply merge\n         (flatten\n          (for [[k v] m]\n            (for [[k2 v2] v]\n              {[k k2] v2})))))","problem":146,"user":"5225271fe4b01819a2de42f9"},{"code":"(fn b [t]\n  (reduce (fn [m [h v]] \n            (reduce \n              (fn [n [a b]] (assoc n [h a] b)) m v)) {}  t))","problem":146,"user":"4ff4c9dae4b0678c553fc360"},{"problem":146,"code":"#(into {} (for [[k m] % [j v] m] [[k j] v]))","user":"4f5eda39e4b0030a34fb2b56"},{"problem":146,"code":"(fn [m]\n  (into {}\n   (for [a (keys m)\n         b (keys (m a))]\n     {[a b] ((m a) b)})))","user":"5136f659e4b04059df19f2fd"},{"code":"#(into {}\n    (for [[k1 v1] %\n          [k2 v2] v1]\n      [[k1 k2] v2]))","problem":146,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":146,"code":"#(apply conj (for [[a b] % [c d] b] {[a c] d}))","user":"58dde189e4b0a4d5acaab6dd"},{"code":"#(into {} (for [[k v] % [kk vv] v] {[k kk] vv}))","problem":146,"user":"4e8b98fc535d65386fec2124"},{"problem":146,"code":"(fn foo [m]\n  (into {} (for [[k1 v1] m\n                 [k2 v2] v1]\n             {[k1 k2] v2})))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":146,"code":"(fn [m]\n    (->> (for [[r child] m\n               [c v    ] child]\n           [[r c] v])\n         (into {})))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":146,"code":"#(into {} (mapcat identity (for [[k v] %] (for [[k1 v1] v] [[k k1] v1]))))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":146,"code":"(fn [map-param]\n  (into {}\n        (for [m map-param :let [k (m 0) v (m 1)]\n          m2 v :let [k2 (m2 0) v2 (m2 1)]]\n          [[k k2] v2])))","user":"58ca613de4b021aa9917edb7"},{"problem":146,"code":"(fn tree->table\n  [xs]\n  (into {}\n    \t(for [[k1 v1] xs\n          \t  [k2 v2] v1] [[k1 k2] v2])))","user":"5ecfd429e4b016b56eae05a9"},{"problem":146,"code":"#(into {} (for [[k v] % \n                [k0 v0] v]\n            [[k k0] v0]))","user":"5405ae2be4b0addc1aec6671"},{"code":"(fn flatten-level [m]\n  (apply hash-map (reduce concat (reduce concat (for [[key1 value1] m] \n    (for [[key2 value2] value1] (list [key1 key2] value2)))))))","problem":146,"user":"525dd767e4b0cb4875a45d88"},{"code":"(fn th [h]\n    (apply merge\n        (for [x h y (keys (second x))] {[(first x) y] ((second x) y)})))","problem":146,"user":"4f128865535d64f603146428"},{"problem":146,"code":"#(letfn [(f [k v s]\n              (if (empty? v) s\n                  (f k (drop 1 v) (assoc s [k (first (first v))] (second (first v))))))]\n                (loop [ki (keys %)\n                       vi (vals %)\n                       si {}]\n                     (if (empty? ki) si\n                         (recur (rest ki) (rest vi) (f (first ki) (first vi) si))\n                         )))","user":"55e732c5e4b050e68259b492"},{"code":"#(apply merge-with merge (for [[k v] % [i j] v]{[k i] j}))","problem":146,"user":"4e57d1e2535d8a8b8723a289"},{"code":"(fn [m]\n  (into {} (for [[k v] m [v-k v-v] v]\n    [(vector k v-k) v-v])))","problem":146,"user":"5003ee7de4b0678c553fc446"},{"code":"#(into {}\n       (for [[k v] %]\n         (into {}\n               (for [[l w] v]\n                 [[k l] w]))))","problem":146,"user":"5102489de4b00c483ae176f6"},{"problem":146,"code":"(fn [m]\n  (into {} (apply concat (for [[k1 v1] m]\n    (for [[k2 v2] v1]\n      [[k1 k2] v2])))))","user":"5a188be3e4b0ff51aa4b31ec"},{"code":"#(into {} (for [[outer-key outer-map] %, [inner-key inner-value] outer-map] [[outer-key inner-key] inner-value]))","problem":146,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":146,"code":"#(->> (for [[k1 m] %\n            [k2 v] m]\n        [[k1 k2] v]) \n      (into {}))","user":"596a66cde4b069c0a1a19803"},{"problem":146,"code":"(fn p\n  [s]\n  (cond\n    (= s '{a {p 1, q 2}b {m 3, n 4}}) '{[a p] 1, [a q] 2 [b m] 3, [b n] 4}\n    (= s '{[1] {a b c d} [2] {q r s t u v w x}})\n         '{[[1] a] b, [[1] c] d,\n           [[2] q] r, [[2] s] t,\n           [[2] u] v, [[2] w] x}\n    (= s '{m {1 [a b c] 3 nil}})\n        '{[m 1] [a b c], [m 3] nil}))","user":"56df632ce4b0ca2494a095f2"},{"problem":146,"code":"(fn [m] (let [lst (for [[k v] m                        \n                        [k1 v1] v]\n                    (if (map? v) [[k k1] v1] [k v])\n          \t\t\t)]\n          (into {} lst)))","user":"6011b89ee4b074f607df66bc"},{"code":"(fn [xs] (into {} (for [x xs y (second x)] [[(first x) (first y)] (second y)])))","problem":146,"user":"504f865ee4b0a02f9cffde90"},{"problem":146,"code":"(fn [tree]\n  (into {}(for [[i j] tree [x y] j] (vec [[i x] y]))))","user":"5bbbcf9ee4b0a20761a23614"},{"code":"#(apply hash-map (apply concat (for [x %]\r\n  (apply concat (for [y (second x)]\r\n    (list [(first x) (first y)] (second y)))))))","problem":146,"user":"5012aefce4b0c8732600222a"},{"problem":146,"code":"#(into {} (for [k (keys %)\n                 l (keys (% k))]\n               [[k l] ((% k) l)]))","user":"56cd44fde4b0ea9b8538f749"},{"problem":146,"code":"(fn f [m]\n  \n  ( let [[ [a b] & r] (seq m)]\n      (merge (apply hash-map (mapcat #(vector [a %] %2 ) (keys b) (vals b) ) )\n      (if (not-empty r) (f r)) \n      )\n      )\n \n  )","user":"5735ac67e4b0cd1946bd102b"},{"problem":146,"code":"(fn flatten-map [m]\n  (into\n    {}\n    (for [[k1 v1] m\n          [k2 v2] v1]\n      [[k1 k2] v2])))","user":"5f300f28e4b033932238a682"},{"problem":146,"code":"(fn trees_tables\n  [n]\n  (into {}\n    (for [[x m] n\n          [y z] m]\n      [[x y] z])))","user":"5ea3711ae4b00a66d4a9519d"},{"code":"#(into {} (for [[k v] %\n                [kk vv] v]\n            {[k kk] vv}))","problem":146,"user":"51805d22e4b0e3fc13e244df"},{"problem":146,"code":"#(->>\n  (for [top-key (keys %) inner-map (% top-key)] [[top-key (nth inner-map 0)] (nth inner-map 1)])\n  (reduce conj {}))","user":"5773f3a9e4b0979f896515f2"},{"code":"#(into {} (for [[k v] % [kk vv] v]\r\n    [[k kk] vv]))","problem":146,"user":"4db2cd84535df7e46ed9b6c6"},{"code":"(fn [x]\n  (into '{} (mapcat (fn [[a b]] (map (fn [[c d]] (hash-map (vector a c) d)) b)) x)))","problem":146,"user":"4ec0c7ba535dfed6da9c6da4"},{"problem":146,"code":"(fn [coll]\n  (into {} (for [[k1 m] coll\n                 [k2 v] m]\n             [[k1 k2] v])))","user":"55586905e4b0deb715856e2b"},{"problem":146,"code":"(fn [m]\n  (into {}\n  (for [k1 (keys m)\n        k2 (keys (get m k1))]\n      [[k1 k2] (get (get m k1) k2)])))","user":"5e3a25d4e4b01d43a70e8dde"},{"code":"(fn tree-to-table [tree]\n  (reduce merge (reduce concat (for [k (keys tree)] (map \n                        #(assoc {} [k %] (get (get tree k) %))\n                        (keys (get tree k)))))))","problem":146,"user":"51d360d1e4b099f3b6acddff"},{"code":"#(into {} (for [[x a] % [y b] a] [[x y] b]))","problem":146,"user":"4f956072e4b0dcca54ed6ccf"},{"problem":146,"code":"(fn get-phones [coll]\n     (let [nonn (for [pair coll\n                  :let [one (key pair)\n                        two (val pair)\n                        three (for [pair-2 two\n                                :let [one-2 (key pair-2)\n                                      two-2 (val pair-2)\n                                      three-2 (vector one one-2)]]\n                                (vector three-2 two-2))\n                         ]]\n                  (mapcat identity three))\n           nonn-2 (mapcat identity nonn)\n           nonn-3 (partition 2 nonn-2)] \n          (reduce #(assoc %1 (first %2) (second %2)) {} nonn-3) ))","user":"57227f10e4b0c5bde472c0cd"},{"problem":146,"code":"(fn pf [m-outer]\n  (into {}\n  (for [[k1 m-inner] m-outer [k2 v] m-inner]\n    (vector [k1 k2] v))))","user":"54448e84e4b032a45b869393"},{"code":"#(apply hash-map (mapcat \n  (fn [[h t]] \n    (mapcat \n      (fn [[h' t']] [[h h'] t'])\n      t)) %))","problem":146,"user":"53307da1e4b019098a6f8b5e"},{"code":"(fn table [m]\n  (let [entry (first m)]\n    (if (= (count m) 0)\n      {}\n      (merge (table (rest m)) (into {} (for [r (val entry)] [[(key entry) (key r)] (val r)]))))))","problem":146,"user":"5125029de4b0ce9225d2ed3e"},{"code":"#(apply merge\n       (for [[k1 m] %\n             [k2 v] m]\n         {[k1 k2] v}\n         )\n        )","problem":146,"user":"52e59ca5e4b09f7907dd1464"},{"code":"(fn [m]\n  (letfn [(rowmap [k m]\n                  (reduce (fn [ret this]\n                            (assoc ret (vector k (key this)) (val this) )) {} m))]\n    (reduce (fn [ret this]\n              (merge ret (rowmap (key this) (val this)))) {} m)))","problem":146,"user":"513cb853e4b0b86ece9f322b"},{"code":"#(reduce (fn [a [k v]] ( into a ( for [[k2 v2] v] [[k k2] v2]))) {} %)","problem":146,"user":"52570aeae4b0541d1855ba42"},{"problem":146,"code":"#(into {} (mapcat (fn [x] (for [k [(first x)] v (last x)]\n                            [[k (first v)] (last v)])) %))","user":"54e2a779e4b024c67c0cf7d3"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [i (keys m)\n              j (keys (get m i))]\n          [[i j] (get-in m [i j])])))","user":"54f2fe9fe4b050824f58f5b8"},{"code":"#(reduce (fn [m [k v]] (assoc m k v)) {} (for [x % y (x 1)] [[(x 0) (y 0)] (y 1)]))","problem":146,"user":"4e65027c535d8ccf87e9fe6e"},{"code":"#(into {} (for [[k x] %, [a b] x] [[k a] b]))","problem":146,"user":"51c8301ee4b07ef393169e4d"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k v] m\n                 [subk subv] v]\n             [[k subk] subv])))","user":"5cee521ce4b0aaa82f1129dd"},{"problem":146,"code":"#(into {} (for \n           [[k vs] %\n            [k2 vs2] vs] \n           [[k k2] vs2]))","user":"5368fedee4b0243289761e93"},{"problem":146,"code":"#(apply hash-map (apply concat (for [i (keys %) j (keys (get % i))] [[i j] (get-in % [i j])])))","user":"584dadebe4b0b7285a6f4e44"},{"problem":146,"code":"(fn [vals] (into {} (map (fn [k] [k (get-in vals k)]) (apply concat (for [k (keys vals)] (for [g (keys (get vals k))] [k g]))   ))))","user":"5686e652e4b0dcc4269f4059"},{"problem":146,"code":"#(into {} (for [[k1 v1] %\n                                [k2 v] v1]\n                            [[k1 k2 ] v]))","user":"58e37946e4b005f69f193cae"},{"problem":146,"code":"(fn tree-to-table [t]\n    (apply merge (for [[k v] t\n                       [k2 v2] v]\n                   {[k k2] v2})))","user":"550c55d0e4b06e50f9beb14d"},{"problem":146,"code":"(fn [m]\n  (apply merge (for [[k1 inner-map] m\n                        [k2 val] inner-map\n                        :let [path [k1 k2]]]\n                 {path val})))","user":"5344fe13e4b084c2834f4a32"},{"code":"(fn [ms]\n  (into {}\n        (for [[x m] ms\n              [y v] m]\n          [[x y] v])))","problem":146,"user":"50586354e4b06522596eba78"},{"code":"#(into {} (for [[k m] % [p v] m] [[k p] v]))","problem":146,"user":"4e8f1ac6535d65386fec2146"},{"code":"(fn [m1]\n\t(reduce\n    \t(fn [x [k v]]\n        \t(reduce\n            \t(fn [xx [kk vv]]\n                \t(assoc xx [k kk] vv)\n                )\n            \tx\n            \tv\n            )\n        )\n    \t{} m1\n    )\n)","problem":146,"user":"525ba7bbe4b0cb4875a45d28"},{"problem":146,"code":"(fn [m] \n  (into {}\n        (for [[k1 v1] m [k2 v2] v1]\n          [[k1 k2] v2])))","user":"53ea3a63e4b036ad0777e4dc"},{"problem":146,"code":"(fn [mm]\n (into {}\n (mapcat\n  (fn [[kk m]]\n   (map\n    (fn [[k v]]\n     [[kk k] v])\n    m))\n  mm)))","user":"549a999be4b0f3d1d8e70f6f"},{"problem":146,"code":"(fn [maps]\n    (reduce (fn [a b] (assoc a (first b) (second b)))\n            {}\n            (for [a (keys maps)\n                  b (keys (maps a))]\n              [[a b] (get-in maps [a b])])          \n            ))","user":"5283a919e4b0239c8a67adbe"},{"problem":146,"code":"(fn [m]\n  (apply merge (flatten (for [k (keys m)]\n                          (for [kk (keys (get m k))]\n                            {[k kk] (get (get m k) kk)})))))","user":"5dc72a9ce4b02f9375f4e1cd"},{"code":"(fn __ [m]\n  (into {}\n        (for [[k v] m [i j] v]\n          [[k i] j])))","problem":146,"user":"4fa719c0e4b081705acca1bf"},{"problem":146,"code":"(fn flatten-map [m]\n  (loop [result {} seq\n    (for [i1 m i2 (get m (first i1)) :let [k1 (first i1) k2 (first i2) value (last i2)]]\n      [k1 k2 value]\n    )\n  ]\n    (if (= (count seq) 0)\n      result\n      (recur (assoc result [(nth (first seq) 0) (nth (first seq) 1)] (nth (first seq) 2)) (rest seq))\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k v] m\n        [k' v'] v]\n    [[k k'] v'])))","user":"541ef7e2e4b01498b1a71a92"},{"problem":146,"code":"(fn [coll] (into (hash-map) (for [[x y] coll, [x_ y_] y] [[x x_] y_])))","user":"58fc92c5e4b0438e51c2cf9a"},{"code":"#(into {} \n   (for \n     [k (keys %) \n      l (keys (% k))]\n      [[k l] ((% k) l)]))","problem":146,"user":"4ffa8affe4b0678c553fc3bd"},{"code":"(fn [m]\n  (into {} (for [[k1 v1] m [k2 v2] v1]\n             [[k1 k2] v2])))","problem":146,"user":"4ee3b586535d10e5ff6f5371"},{"problem":146,"code":"(fn [m]\n  (->> (for [m' m\n             kv (second m')]\n         {[(first m') (first kv)] (second kv)})\n       (into {})))","user":"57aa4775e4b0b8559636fc6b"},{"problem":146,"code":"(fn [mm]\n  ((fn [m]\n     (if\n       (not-any? map? (vals m))\n       m\n       (recur (into {} \n                    (reduce (fn [a p]\n                              (if ( map? (second p)) \n                                (concat a (for [x (second p)] [(conj (first p) (first x)) (second x)])) \n                                p)) [] (seq m) ))))) \n   (into {} (map #(vector [(first %)] (second %)) mm))))","user":"53a5bc3ae4b0ef122a8689c3"},{"code":"#(into {}\n       (for \n         [[k v] %\n          [k1 v1] v]\n         [[k k1] v1]))","problem":146,"user":"52d00832e4b07d0d72b273b4"},{"code":"(fn ho [mmm]\n  (loop [mmm mmm, re {}]\n    (if (empty? mmm) re\n      (let [k1 (-> mmm (first) (key)), kvmap (-> mmm (first) (val))]  \n        (let [ans, (reduce (fn [retval en] (conj retval {[k1, (key en)], (val en)})) {} kvmap)] (recur (rest mmm) (conj re ans)))))))","problem":146,"user":"52ee0de4e4b05e3f0be25ec1"},{"problem":146,"code":"(fn myFlatMap\n  [m]\n  (into {}\n   (for [x m\n         y (second x)]\n     [[(first x) (first y)] (second y)])))","user":"54f64e99e4b0f2f3c5226ea4"},{"code":"(fn [m]\n    (apply merge\n           (for [k (keys m)\n                 :let [sub-map (get m k)]\n                 v (keys sub-map)]\n             {(vector k v) (get sub-map v)})))","problem":146,"user":"4e89e939535d3e98b8023287"},{"code":"#(into {} (mapcat (fn [[k v]] (map (fn [[k1 v1]] [[k k1] v1]) v)) %))","problem":146,"user":"5063fe48e4b075d771da6f9e"},{"problem":146,"code":"(fn [xs]\n   (into {} (for [[x y] xs [a b] y]\n              [[x a] b])))","user":"53214efbe4b09d4e7a9b54b2"},{"code":"(fn [s]\n   (into {} (for [k (keys s) [v1 v2] (get s k)] [[k v1] v2])))","problem":146,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"problem":146,"code":"(fn trees-into-tables [m]\n  (into {}\n        (apply concat\n               (for [[k v] m]\n                 (map #(vector [k (first %)] (second %)) v)))))","user":"592fa9f8e4b072a2710fcfcb"},{"problem":146,"code":"(fn [mp] (into {} (for [[k1 m] mp, [k2 v] m]\n                     {[k1 k2] v})))","user":"58225587e4b04b46fc4b0f94"},{"code":"#(apply merge\n    (for\n      [k (keys %) v (get % k)]\n      {[k (key v)] (val v)}))","problem":146,"user":"4f062d4a535dcb61093f6c08"},{"problem":146,"code":"(fn [x]\n  (into {}\n    (for [[k v] x [a b] v]\n      (vec [[k a] b]))))","user":"543d5c61e4b032a45b86934d"},{"problem":146,"code":"#(into {} (reduce (fn [acc x]\n                    (concat acc (for [y (second x)]\n                                  [[(first x) (first y)] (second y)])))\n                  [] %))","user":"5097ea89e4b087ccf61a7af4"},{"problem":146,"code":"#(\n            apply conj (for [x % y (x 1)] (identity {[(x 0) (y 0)] (y 1)}))\n            )","user":"596f6683e4b069c0a1a19877"},{"problem":146,"code":"(fn flatten [coll]\n   (into {}\n    (for [k1 (keys coll)\n          k2 (keys (coll k1))]\n      {[k1 k2] (get-in coll [k1 k2])})))","user":"5d4b2155e4b0776584bd6f28"},{"problem":146,"code":"(fn [tree] (into {} (for [[k1 m] tree\n                          [k2 v] m]\n                        [[k1 k2] v])))","user":"538ca203e4b0b51d73faae5f"},{"problem":146,"code":"(fn flatten-map [m]\n  (reduce (fn [x y] (assoc x (first y) (second y))) {}\n    (apply concat\n      (for [x (keys m)]\n        (for [y (m x)] [[x (first y)] (last y)])))))","user":"55536a8ae4b0deb715856e03"},{"code":"(fn walk [m]\n  (into {} (for [[k v] m [kk vv] v]\n             [[k kk] vv])))","problem":146,"user":"51740b65e4b0d277d717bc67"},{"code":"(fn [mp]\r\n  (into {}\r\n        (for [[k v] mp\r\n        [vk vv] v]\r\n    (vec [[k vk] vv]))))","problem":146,"user":"4f7d25b4e4b06e829148e1ba"},{"code":"(fn mflatten [m]\n  (into {}\n        (for [[k vm] m\n              [kk vv] vm]\n          [[k kk] vv])))","problem":146,"user":"4f849f76e4b033992c121c36"},{"problem":146,"code":"(fn [m]\n   (apply hash-map (apply concat (for [keyval m\n                                       in-key-val (second keyval)]\n                                   [[(first keyval) (first in-key-val)] (second in-key-val)]))))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn tree-walk [m]\n          (into {}\n                (for [x m\n                      y (second x)]\n                  [[(first x) (first y)] (second y)])))","problem":146,"user":"503b6995e4b07a1917cc34dd"},{"problem":146,"code":"(fn [mm]\n    (apply merge\n     (for [[k1 m]  mm\n          [k2 v2] m]\n      {[k1 k2] v2})))","user":"573a0ecce4b0cd1946bd1088"},{"problem":146,"code":"#(into {} (for [x % y (get % (first x))] [[(first x) (first y)] (nth y 1)]))","user":"59a0262ee4b0871e7608b82d"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k v] m]\n      (if (map? v)\n        (into {}\n          (for [[k2 v2] v]\n            [[k k2] v2]))\n        [k v]))))","user":"5b62ff3ce4b0c6492753e72a"},{"code":"(fn [tree]\n (into {} (for [tk (keys tree) :let[pm (get tree tk)] sk (keys pm)]\n    [[tk sk] (get pm sk)])))","problem":146,"user":"52e44a22e4b09f7907dd144e"},{"code":"(fn [c] (into {} (mapcat\n                   (fn [[k m]]\n                     (map #(vector [k (first %)] (last %)) m)) c)))","problem":146,"user":"52c25645e4b07a9af579237d"},{"problem":146,"code":"(fn map-flat [coll]\n  (apply hash-map (apply concat (for [[k1 rst] coll\n                                      [k2 v] rst]\n                                  [[k1 k2] v]))))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"problem":146,"code":"(fn [has-map]\n (apply merge \n  (map (fn [[k1 v1]]\n       (apply merge \n        (map (fn [[k2 v2]]\n              {[k1 k2] v2}) \n            v1)))\n      has-map)))","user":"5d28c6dce4b092dab7f59c85"},{"problem":146,"code":"(fn [m]\n  (let [raw (apply concat (apply concat\n                            (for [[k1 v1] m]\n                             (for [[k2 v2] v1]\n                              (list [k1 k2] v2)))))]\n    (loop [l raw, r {}]\n      (if (empty? l)\n        r\n        (recur (rest (rest l)) (assoc r (first l) (second l)))))))","user":"60882700e4b0ae75613dcedf"},{"problem":146,"code":"#(into {} (for [[k v] % [k' v'] v] [[k k'] v']))","user":"5457e5f1e4b01be26fd74613"},{"code":"#(apply merge\n  (for [k1 (keys %)\n        k2 (keys (% k1))]\n        (hash-map [k1 k2] ((% k1) k2))))","problem":146,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":146,"code":"#(into {} (for [[x xv] % [y yv] xv] [[x y] yv]))","user":"5e5b8d92e4b0fd0acd158658"},{"code":"(fn [coll]\n  (apply \n   merge \n   (for \n     [oe coll\n     :let [[ok ov] oe]\n     ie ov\n     :let [[ik iv] ie]]\n     {[ok ik] iv})))","problem":146,"user":"50217818e4b00bba4502f7a7"},{"problem":146,"code":"#(apply merge \n  (flatten (map (fn [m-e] \n   (for [ks (keys (second m-e))] {[(first m-e) ks] ((second m-e) ks)})) %)))","user":"586615e6e4b0f14aab7c8858"},{"problem":146,"code":"(fn [s]\n  (into {} (apply concat (for [[l r] s] (map #(vector [l (first %)] (second %)) r)))))","user":"6074f5ede4b069485764de52"},{"code":"(fn [m] (into {} (for [[k v] m [x t] v] [[k x] t])))","problem":146,"user":"535d2533e4b04ce2eb3ed2bc"},{"code":"#(into {}\n  (for [x %\n        y (rest x) \n\t      z y] \n    [[(first x) (first z)] (last z)]))","problem":146,"user":"4da3e51330acd6ed10482a68"},{"problem":146,"code":"#(into {} (mapcat (fn [[k v]] (map (fn [[p q]] [[k p] q]) v)) %))","user":"57ccedaae4b0c746388ab88e"},{"code":"#(into {} (for [[k v] % [k2 v2] v] (vector (vector k k2) v2)))","problem":146,"user":"4f8b27b3e4b02e764a0a5179"},{"code":"(fn tit [t]\n  (into {} \n    (letfn [(f [x m]\n              (into {} (map #(vector [x %] (m %)) (keys m))))]\n      (map #(f (first %) (second %)) t))))","problem":146,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":146,"code":"#(into {} (for [[k v] %\n                [kk vv] v] \n           [[k kk] vv]))","user":"4f3ca5a6e4b0e243712b1f53"},{"code":"#(into {}\n      (mapcat (fn [[k v]]\n                (map (fn [[a b]]\n                       {[k a] b}) v)) %))","problem":146,"user":"50f10f7be4b06d9538fe211a"},{"problem":146,"code":"(fn [given-map]\n  (reduce (fn [m kv] (assoc m (first kv) (last kv)))\n    {}\n    (mapcat \n      (fn [[k v]]\n        (if (map? v)\n          (map #(vector [k %] (v %)) (keys v))\n          (list)))\n      given-map)))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":146,"code":"#(into {}\n   (for [[k sub-map] %\n        [k2 v] sub-map]\n    [[k k2] v]))","user":"549dfe40e4b0f3d1d8e70f9a"},{"code":"#(apply merge \r\n    (for [[k1 v1] % \r\n          [k2 s] v1] \r\n  {[k1 k2] s}))","problem":146,"user":"502952c9e4b0b33e9bf6fdf1"},{"code":"#(apply hash-map(apply concat(for [x % y (val x)] [[(key x) (key y)](val y)])))","problem":146,"user":"5349ac2be4b084c2834f4a67"},{"problem":146,"code":"#(into {} (for [[k1 v1] %, [k2 v2] v1]\n            {[k1 k2] v2}))","user":"553698fae4b09218d5f44fc0"},{"problem":146,"code":"(fn\n[m]\n (into (sorted-map) (vec (for [x (keys m) y (vals m) k (keys y) v (vals y) :when (= ((m x) k) v)] [[x k] v])))\n)","user":"5dd70ee3e4b0948ae9d9ad85"},{"problem":146,"code":"(fn [m]\n    (apply array-map \n      (mapcat #(list (apply vector (butlast %)) (last %)) \n              (for [x (keys m), y (keys (get m x))]\n                (vector x y (get (get m x) y)))\n              )))","user":"5bbbce0ee4b0a20761a2360d"},{"problem":146,"code":"(fn [m]\n   (apply merge\n          (for [k1 m\n                k2 (val k1)]\n            (into {} {[(key k1) (key k2)] (val k2)})))\n\n   )","user":"573107d5e4b0cd1946bd0fbc"},{"code":"(fn [m]\n  (apply hash-map \n    (apply concat (for [kv m kv2 (val kv) ] \n       [[(key kv) (key kv2)] (val kv2)]))))","problem":146,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn [m]\n  (into {} (for [[k1 cm] m, [k2 v] cm] [[k1 k2] v])))","problem":146,"user":"52d95491e4b09f7907dd13a4"},{"code":"#(into {} (for [[a b] %\n             [c d] b]\n    [[a c] d]))","problem":146,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"#(into {} (for [[k vm] %, [l vs] vm] [[k l] vs]))","problem":146,"user":"506ab9bae4b05d3b7762c74c"},{"problem":146,"code":"(fn [m]\n  (into {}\n  (for [[rk rv] m\n        [ck cv] rv]\n        [[rk ck] cv])))","user":"51dafedee4b09f6bc204eee2"},{"problem":146,"code":"(fn pathyize\n  [input]\n  (into {} (reduce concat (map (fn\n                         [[k v]]\n                         (if (map? v)\n                           (map #(vector (apply vector (concat [k] (first %))) (second %)) (pathyize v))\n                           [[[k] v]]\n                           )\n                         ) input))))","user":"563a30d7e4b0bfe05bf117f9"},{"problem":146,"code":"(fn drevo-tabela [sekv]\n  (apply merge (flatten\n  (for [[x y] sekv]\n    (for [[a b] y]\n      (assoc {} [x a] b)))\n)))","user":"584d99c5e4b0b7285a6f4e42"},{"code":"#(apply conj (flatten (for [x %] (for [y (second x)] {[(first x) (first y)] (second y)}))))","problem":146,"user":"50a4f36be4b0344e360f3bc9"},{"code":"(fn hest [s]\n  (apply merge\n         (flatten\n          (for [[x y] s]\n            (for [z (keys y)]\n              {[x z] (get y z)}\n              )))))","problem":146,"user":"4dcc5aff535d5973398f9293"},{"code":"(fn p146 [m]\n   (let [allkey (keys m )]\n       (apply merge (for [k allkey subkey (keys (get m k))]\n          {[ k subkey ] (get-in m [ k subkey ]) }\n          )\n     )\n   ) )","problem":146,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":146,"code":"(fn [tree]\n  [tree]\n  (reduce (fn [a [key values]]\n            (into a (map (fn [[path val]] {(vector key path) val}) values)))\n          {}\n          tree))","user":"5c44f0fde4b0e06e1360a384"},{"problem":146,"code":"#(apply merge \n  (for [[k v] % \n        [kk vv] v]\n\t{[k kk] vv}))","user":"5654d0e1e4b0f9d632dd848c"},{"code":"(fn [x] \n\n  (apply merge\n  (for [[k m] x]\n    (into {}\n    (for [m1 m]\n      [[k (key m1)] (val m1)])))))","problem":146,"user":"4eb2eae5535d7eef30807351"},{"problem":146,"code":"#(apply merge (for [k0 (keys %) [k1 v1] (% k0)] {[k0 k1] v1}))","user":"558b50d5e4b027778923762b"},{"code":"(fn [m]\n  (apply merge (for [k1 (keys m)\n        k2 (keys (m k1))\n        :let [v ((m k1) k2)]]\n    {[k1 k2] v})))","problem":146,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":146,"code":"(fn fun [col]\n  (reduce merge \n  \t(map (fn [[k v]]\n        \t(into {} (map (fn [[k1 v1]] [[k k1] v1] ) v))\n      \t)\n    \tcol\n    )\n  )\n)","user":"5da20e73e4b000c986472be1"},{"problem":146,"code":"(fn tree-tables\n  [coll]\n  (let [new-coll (for [[k v] coll]\n        (into {} (map #(vector (vector k %1) %2) (keys v) (vals v))))]\n    (into {} (map concat new-coll))))","user":"5594e0e3e4b0c79f6e1db95b"},{"problem":146,"code":"(fn [hashe]\n  (into {} (for [x (keys hashe) y (keys (hashe x))] {[x y] (get-in hashe [x y])}))\n)","user":"55d79b87e4b0e31453f64aa8"},{"problem":146,"code":"(fn [m]\n    (into {}\n          (for [[k1 v1] m\n                [k2 v2] v1]\n            [[k1 k2] v2])))","user":"539fa040e4b0ca733b97449f"},{"code":"(fn [tree] (into {} (for [k1 (keys tree)\n                     k2 (keys (tree k1))]\n                 [[k1 k2] ((tree k1) k2)]) ))","problem":146,"user":"51e28063e4b08e53a149f0f2"},{"code":"(fn [m]\n  (->> (for [x m, k (keys (val x))]\n         [[(key x) k] (get (val x) k)])\n       (apply concat)\n       (apply hash-map)))","problem":146,"user":"52d340ebe4b099d49816f0c1"},{"problem":146,"code":"(fn tree-into-table\n  [s]\n  (into {} (for [[k1 r1] s\n                 [k2 r2] r1]\n             [[k1 k2] r2])))","user":"5f3103aee4b0574c87022c24"},{"code":"(fn [m]\n  (into {} \n    (mapcat \n      (fn [[fk vs]] \n        (map (fn [[k v]] [[fk k] v]) (seq vs))) \n      m)))","problem":146,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"code":"(fn [m]\n  (reduce conj {}\n          (for [k1 (keys m)\n                k2 (keys (get m k1))]\n            [[k1 k2] (get-in m [k1 k2])])))","problem":146,"user":"53300924e4b019098a6f8b55"},{"problem":146,"code":"#(into {} (apply concat (for [[k1 v1] %]\n                          (for [[k2 v2] v1]\n                            [[k1 k2] v2]))))","user":"53acaf1fe4b047364c04445f"},{"problem":146,"code":"(fn [m]\n  (into {} (apply concat (for [k (keys m)] (for [[k1 v1] (m k)] [[k k1] v1])))))","user":"56bb9ccce4b0f26550335959"},{"code":"(fn [m]\n  (apply hash-map\n    (apply concat\n      (for\n        [i m j (i 1)]\n        (list [(i 0) (j 0)] (j 1))))))","problem":146,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn f [m]\n  ( letfn [(parser [pk m]\n  (for [ [k v] m] [[pk k] v]))]\n    (into {} (apply concat (for [[k v] m] (parser k v))))))","problem":146,"user":"5302ac7fe4b0d8b024fd3731"},{"code":"#(reduce into {} (for [[a b] %] (for [[k v] b] [[a k] v])))","problem":146,"user":"4e823ed7535db62dc21a62c7"},{"code":"(fn [m]\n  (into {} (for [[k1 v1] m [k2 v2] v1] [[k1 k2] v2])))","problem":146,"user":"4dc1ee85535d020aff1edf91"},{"code":"#(let [chaves (keys %)]\n   (apply merge (for [chave chaves\n                      elemento (% chave)]\n                  {[chave (key elemento)] (val elemento)})))","problem":146,"user":"52c8758be4b0c2d177d62135"},{"code":"#(into {}\n       (for [k1 (keys %)\n             k2 (keys (% k1))]\n         [[k1 k2] ((% k1) k2)]))","problem":146,"user":"51e38568e4b0c611d6113e43"},{"problem":146,"code":"#(reduce (fn [acc [k v]] (reduce (fn [aa, [k1,v1]] (assoc aa [k k1] v1)) acc v)) {} %)","user":"5dc12b0ae4b0e59a23173d84"},{"problem":146,"code":"#(into {} (for [[k m] %\n                [i v] m]\n            {[k i] v}))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn tab [m] (apply hash-map (apply concat (apply concat (for [[k1 v1] m]\n  (for [[k2 v2] v1] [[k1 k2] v2]))))))","problem":146,"user":"515ffbfbe4b0e2be8aa20bdd"},{"code":"(fn [m]\n  (into {}\n    (for [[k1,v1] m\n          [k2,v2] v1]\n      [[k1 k2] v2])))","problem":146,"user":"504e04a4e4b078edc5f59397"},{"code":"(fn[m] \n    (reduce \n      #(assoc %1 (nth %2 0) (nth %2 1)) \n      {} \n      (for[k (keys m) \n           :let[sm (get m k)] \n           sk (keys sm)] \n        [[k sk] (get sm sk)]\n        )\n      )\n    )","problem":146,"user":"52e68e61e4b09f7907dd1479"},{"problem":146,"code":"(fn [x] (reduce (partial apply assoc) (sorted-map)\n                  (for [a (keys x)\n                        b (keys (get x a))] (list [a b] (get (get x a) b)))))","user":"54344721e4b0b6b47310fcea"},{"problem":146,"code":"(fn index-flatten [m]\n  (into {}\n    (for [[k1 v1] m\n          [k2 v2] v1]\n      {[k1 k2] v2})))","user":"57e9a77ae4b0bfb2137f5b35"},{"code":"(fn t2t [m]\n (let [pathize (fn [k v]\n         (map #(vector (vector k (first %)) (second %)) v)) ]\n (->>\n (mapcat #(pathize (first %) (second %)) m) \n (apply map vector)\n (apply zipmap))\n))","problem":146,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":146,"code":"(fn [conjunto]\n(->>\n      (for [[llave1 definicion] conjunto;del conjunto obtengo la llave 1 y su definicion :V (llave1 seria la llave prncipal :V y v el valor, hace esto en cada  definicon)\n            ;for anidado :v \n            [llave2 definicion2] definicion ;de la definicion, obtengo la llave 2 y su definicion :v, la definicion 2 es la sera la definicion del conjunto de llaves xD\n            ]\n        (hash-map [llave1 llave2] definicion2))\n      \n      (into {}))) ;el for genera una lista con los set resultado pero el problema pide que sea con set por lo que el resultado le aplicaremos un into para los conjutnos que tengamos dentro de la lista solamente obtenga los elementos y los meta en el nuevo set :D dando el resultadooo :D","user":"59e63a2ce4b08badc2a0c569"},{"code":"#(reduce merge (for [k1 (keys %)\n             v1 (% k1)] {[k1 (first v1)] (second v1)}))","problem":146,"user":"4f1bee08535d64f60314647e"},{"problem":146,"code":"(fn tit [m]\n  (into {} (for [[k v] m [k2 v2] v]\n             [[k k2] v2])))","user":"54c3747de4b045293a27f60e"},{"code":"(fn ttab [bigmap]\n  (reduce into {}\n          (for [[k1 v1] bigmap [k2 v2] v1] {[k1 k2] v2})))","problem":146,"user":"4f0d093b535d0136e6c22313"},{"problem":146,"code":";#(into {} (for [[k1 v1] % [k2 v2] v1] [[k1 k2] v2]));;another solution\n(fn [my-map]\n   (let [keys (keys my-map)]\n     (reduce #(let [key %2\n                    mini-map (get my-map key)]\n               (merge %1(reduce (fn [v1 v2] \n                         (assoc v1 [key (first v2)] (second v2))) {} mini-map))) {} keys)))","user":"56c60b36e4b05cc29241eead"},{"code":"(fn flatten-map-l1 [m]\n  (into {} (for [k (keys m) v (keys (m k))] \n             [(conj [] k v) (get-in m [k v])]))\n  )","problem":146,"user":"529a73bde4b02ebb4ef75096"},{"problem":146,"code":"(fn [m] \n  (reduce \n    (fn [r1 [k1 v1]]\n      (if (map? v1)\n        (reduce \n          (fn [r2 [k2 v2]]\n            (assoc r2 (vector k1 k2) v2))\n          r1\n          v1)\n        (assoc r1 (vector k1) v1)))\n    {}\n    m))","user":"5989e080e4b021a7a535fed6"},{"code":"(fn [xs] (apply merge (for [x xs, y (val x)] (hash-map [(key x) (key y)] (val y)))))","problem":146,"user":"4f1b92d1535d64f60314647b"},{"code":"(fn [m]\r\n  (reduce merge {}\r\n    (for [x (keys m)\r\n          y (keys (m x))]\r\n      {[x y] (get-in m [x y])})))","problem":146,"user":"5060d137e4b0dc10a69545a0"},{"code":"(fn [coll]\n  (loop [ret {} rems coll]\n    (if (empty? rems) ret\n      (let [x (first rems)\n            k (key x)\n            ks (keys (val x))\n            vs (vals (val x))\n            m (apply hash-map (interleave (map #(conj (vector k) %) ks) vs))]\n        (recur (into ret m) (rest rems))))))","problem":146,"user":"5300158ae4b0d8b024fd370f"},{"code":"#(apply merge\n  (for [[k1 h] %, [k2 v] h]\n    (hash-map [k1 k2] v)))","problem":146,"user":"4ea1b9e4535d7eef308072b8"},{"code":"(fn [m]\n  (reduce into (mapcat #(for [ x (keys %2)] (hash-map [% x] (get %2 x)))\n                       (keys m)\n                       (vals m))))","problem":146,"user":"50e90813e4b033b0e80d11e7"},{"problem":146,"code":"#(into {} (for [[o t] % [oo tt] t] [[o oo] tt]))","user":"5c7741dce4b0fca0c1622806"},{"problem":146,"code":"(fn [m]\n    (reduce #(into %1 (for [s (second %2)] {[(first %2) (first s)] (second s)}))\n                {} m))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":146,"code":"(fn ttt [mp]\n  (let [mk (fn [n mps]\n             (map #(assoc {} %1 %2) (map #(vector n %) (keys mps)) (vals mps)))]\n    (apply merge \n      (apply concat\n        (map #(apply mk %) mp)))))","user":"5243e37ae4b076204b44fae3"},{"problem":146,"code":"(fn transform [m] \n  (apply merge \n  (apply concat \n  (for [[k v] m]\n    (for [[k2 v2] v]\n      (assoc nil [k k2] v2)))\n    \n    )))","user":"57887de2e4b0ebec4cfb751c"},{"code":"(fn [x] (reduce #(assoc % (first %2) (second %2)) {} (for [[a d] x [b c] d] [[a b] c])))","problem":146,"user":"4e5c801e535d8a8b8723a2c1"},{"code":"#(into {}\n        (for [[k  v ] %\n              [vk vv] v]\n          [[k vk] vv]))","problem":146,"user":"528b08efe4b0239c8a67ae8a"},{"problem":146,"code":"(fn flatten-map [m]\n    (into {}\n          (apply concat\n                 (for [[k v] m]\n                   (if (map? v)\n                     (for [[k2 v2] v] [[k k2] v2])\n                     [[[k] v]])))))","user":"4dfe5a93535d04ed9115e786"},{"problem":146,"code":"(fn [m] (reduce merge\n                    (for [x (keys m)]\n                      (if (map? (get m x))\n                        (reduce merge (for [y (keys (get m x))]\n                                        (assoc '{} [x y] (get-in m [x y]))))\n                        (assoc '{} [x] (get m x))\n                        ))))","user":"587ee260e4b052da650a6353"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k v] m\n          [yk yv] v\n          :when (map? v)]\n      [[k yk] yv])))","user":"598858d0e4b021a7a535feb5"},{"code":"(letfn [(f [pre xs]\n           (for [[k v] xs]\n             [(conj pre k) v]))]\n  (fn [m] (into {} (mapcat #(apply f %) (f [] m)))))","problem":146,"user":"50b668dde4b08fb537db98f2"},{"problem":146,"code":"(fn trees->tables [m]\n  (into {} (reduce #(concat % %2) []\n                   (for [[k1 v1] m] (if (map? v1) (for [[k2 v2] v1] [[k1 k2] v2]) m)))))","user":"56903cb9e4b0dcc4269f40eb"},{"code":"(fn [m]\n   (reduce conj {} (for [[k v] m\n                         [k2 v2] v]\n                     [[k k2] v2])))","problem":146,"user":"506d5e4ce4b0a302964c5493"},{"code":"(fn [m]\n  (apply merge (for [a (keys m), [k v] (get m a)] {[a k] v})))","problem":146,"user":"4fc7db47e4b0ee37620e182a"},{"problem":146,"code":"#(reduce merge (mapcat (fn [[a e]] (for [[b c] e] {[a b] c})) %))","user":"505106fee4b05ab4c7e07d38"},{"code":"#(into {}\n       (for \n         [[k v] %\n          [k2 v2] v]\n         [[k k2] v2]))","problem":146,"user":"4dc537fd535d8a4b2fd74282"},{"problem":146,"code":"#(into {}\n       (for \n         [[a b] %\n          [c d] b]\n         [[a c] d]))","user":"53ed2fafe4b0d648e757f4c1"},{"problem":146,"code":"(fn [m]\n  (apply hash-map (apply concat (apply concat\n    (for [[k1 vm] m]\n      (for [[k2 v] vm]\n        [[k1 k2] v]))))))","user":"4ff24a1ae4b0678c553fc337"},{"problem":146,"code":"(fn [maps]\n    (into (hash-map)\n          (for [[k1 m] maps\n                [k2 v] m]\n            [[k1 k2] v])))","user":"563cce5be4b0bfe05bf1183f"},{"problem":146,"code":"(fn [input]\n  (let\n\n  [mykeys \n\n   (for [i (keys input)\n\n         j (keys (input i))]\n\n     [i j])\n\n   myvals \n\n    (map \n\n     (fn [i] (get-in input i))\n\n     mykeys)]\n\n  (zipmap mykeys myvals))\n\n)","user":"57487084e4b009280f9f2b8c"},{"code":"#(into {} (for [[k m] %\n                  [k2 v] m]\n              [[k k2] v]))","problem":146,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":146,"code":"(fn [map]\n  (into {}\n        (for [[k v] map\n              [vk vv] v]\n          [[k vk] vv])))","user":"5c3796b3e4b0d62ef62d9f77"},{"code":"(fn [c] \n  (apply merge (for [k (keys c) l (keys (c k)) :let [v ((c k) l)]]\n    {[k l] v})))","problem":146,"user":"4e80e0f2535db62dc21a62b8"},{"problem":146,"code":"#(into '{} (for [[k v] % [k2 v2] v] [[k k2] v2]))","user":"575d16f8e4b02ea114799377"},{"code":"#(into {} (mapcat (fn [x] (for [y (second x)] {[(first x) (first y)] (second y)})) %))","problem":146,"user":"52140b53e4b0961f15ac4d7e"},{"problem":146,"code":"(fn [m]\n  (apply hash-map\n    (apply concat\n      (for [[k1 v1] m\n            [k2 v2] v1]\n        [[k1 k2] v2]))))","user":"562cd94ee4b0a45d2ff83015"},{"problem":146,"code":"(fn [m] (into {} (for [[k1 m1] m [k2 v] m1] [[k1 k2] v])))","user":"54f0d3fde4b024c67c0cf8a6"},{"code":"(fn [m] (into {}\n  (for [[k v] m [k2 v2] v] \n    [[k k2] v2])))","problem":146,"user":"5106bc8ae4b01150e115ebec"},{"problem":146,"code":"(fn [map-of-maps]\n (into {}\n  (for [[k1 m] map-of-maps\n        [k2 v] m]\n  [[k1 k2] v])))","user":"56b86e64e4b0f26550335924"},{"code":"#(apply hash-map (mapcat (fn [[x y]]\n   (mapcat (fn [[a b]] [[x a] b]) y)) %))","problem":146,"user":"504e3aaae4b0f6ff3350c487"},{"code":"#(reduce merge (for [k (keys %) v (keys (% k))] {[k v] ((% k) v)}))","problem":146,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"(fn [x] (into {} (for [x x y (nth x 1)] {[(nth x 0) (nth y 0)] (nth y 1)})))","problem":146,"user":"4ec34cd1535dcc7ae8597d54"},{"problem":146,"code":"(fn flat-tree\n  [tree]\n  (into {} (mapcat (fn [[k1 subt]] (map (fn [[k2 x]] [[k1 k2] x]) subt)) tree)))","user":"5c222b7de4b07e362c230588"},{"problem":146,"code":"#(into {} (for [map1elem %\n                map2elem (second map1elem)]\n    [[(first map1elem) (first map2elem)] (second map2elem)]))","user":"53c38b8ce4b00fb29b22127b"},{"code":"(fn [a]\r\n  (reduce conj {}\r\n    (reduce concat\r\n\t\t  (for [[k b] a]\r\n\t\t    (for [[j v] b]\r\n\t\t      [[k j] v])))))","problem":146,"user":"507437c2e4b054001656acd0"},{"problem":146,"code":"(fn [xss]\n    (reduce #(assoc % (first %2) (second %2)) {}\n     (apply concat (for [[k v] xss]\n                     (for [[k2 v2] v]\n                       [[k k2] v2]\n                       )))))","user":"58b81490e4b0ebc645576d8c"},{"code":"(fn tree-to-map [m]\n  (apply hash-map (apply concat (for [key1 (keys m) key2 (keys (m key1))] (vector [key1 key2] ((m key1) key2))))))","problem":146,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":146,"code":"(fn flat [value]\n   (apply merge \n          (for [k (keys value) [k2 & [val & else]] (value k)]\n           {[k k2] val})))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":146,"code":"(fn [m] (into {} (for [[k v] m [ik iv] v] {[k ik] iv})))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"problem":146,"code":"(fn [m]\n   (into {}\n     (apply concat   \n        (for [k1 (keys m)]\n          (for [[k2 v] (m k1)] [[k1 k2] v])))))","user":"4e837808535db62dc21a62d9"},{"problem":146,"code":"#(into {} (for [k1 (keys %) k2 (keys (% k1))]\n        [[k1 k2] ((% k1) k2)]))","user":"536e5055e4b0fc7073fd6e6b"},{"problem":146,"code":"#(into {} (for \n    [k1 (keys %)\n    :let [m (% k1)]\n    k2 (keys m)\n    :let [v (m k2)]]\n  [[k1 k2] v]))","user":"57717915e4b0979f896515b3"},{"problem":146,"code":"(fn solve146\n  ([m] (solve146 m []))\n  ([m ks]\n   (into {}\n         (mapcat\n          (fn [[k v]]\n            (if (map? v)\n              (solve146 v (conj ks k))\n              [[(conj ks k) v]]))\n          m))))","user":"55a5c3bee4b0acc240e3154e"},{"problem":146,"code":"(fn [m] (apply merge (flatten (for [x m :let [y (first x) z (second x)]]\n           (for [i z] {[y (first i)] (second i)})))))","user":"57addbcce4b0b8559636fca3"},{"code":"(fn tree->table [sm]\n  (into {} (mapcat (fn [[k m]] \n                     (for [[sub-k sub-v] m] [[k sub-k] sub-v])) sm)))","problem":146,"user":"4dac39a28cc9d6edb8beb0b3"},{"problem":146,"code":";(defn flat [k m] (for [y m] {[k (first y)] (second y)}))\n;(apply merge (map #(apply merge (flat (first %1) (second %1))) m))\n\n(fn [m]\n  (apply merge (for [k (keys m) subkey (keys (m k))] \n               {[k subkey] (get-in m [k subkey])})))","user":"558bdcefe4b0277789237633"},{"problem":146,"code":"(fn [s]\n  (letfn [\n    (reassoc [[k v]]\n      (mapcat #(vector [k (first %)] (second %)) v))]\n    (apply hash-map (mapcat reassoc s))))","user":"55d5e80ee4b0e31453f64a91"},{"code":"(fn map-flat \n      ([coll] (apply merge (map-flat [] coll)))\n      ([path coll]\n      (if (map? coll)\n        (mapcat\n          #(map-flat (conj path %) (coll %)) \n          (keys coll))\n        [{path coll}])))","problem":146,"user":"4fa5406fe4b081705acca1ac"},{"problem":146,"code":"(fn flat [m]\n  (reduce merge {}\n   (for [k1 (keys m)\n       \t k2 (keys (get m k1))]\n    {[k1 k2] (get (get m k1) k2)})))","user":"52860baae4b0239c8a67ae09"},{"problem":146,"code":"(fn flatten-map [m]\n  (into {} (for [k1 (keys m) k2 (keys (m k1))] [[k1 k2] ((m k1) k2)])))","user":"5b51b9f8e4b02d533a91bcfe"},{"code":"(fn [h]\n  (->>\n    (for [k1 (keys h)\n          k2 (keys (h k1))]\n        [[k1 k2] ((h k1) k2)])\n    (apply concat)\n    (apply hash-map)))","problem":146,"user":"4f569a3ce4b0a7574ea71828"},{"problem":146,"code":"(fn [coll]\n  (into {}\n  (for [[x1 y1] coll\n        [x2 y2] y1]\n    [[x1 x2] y2])))","user":"557c6ca6e4b05c286339e0c4"},{"problem":146,"code":"(fn [m]\n    (->> (mapcat (fn [[k submap]]\n                   (for [[subkey subvalue] submap]\n                     [[k subkey] subvalue])) m)\n         (into {})))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":146,"code":"#(apply merge (map (fn [[k v]] (hash-map k v)) (for [[k v] %, [x y] v] [[k x] y])))","user":"55fc07d3e4b0f488688e066e"},{"code":"(fn [m]\n  (apply merge\n    (for [a m b (second a)]\n      {[(first a) (first b)] (second b)})))","problem":146,"user":"4dd9d299535d2dad7130b5dd"},{"code":"(fn [m]\n  (->> (for [[k v] m\n            [k2 v2] v]\n        (list [k k2] v2))\n      (apply concat)\n      (apply hash-map)))","problem":146,"user":"51a97f7ae4b08d8ec191b827"},{"code":"#(into {} (for [[k v] % [k2 v2] v] {[k k2] v2}))","problem":146,"user":"52655949e4b03e8d9a4a710b"},{"code":"#(apply merge (for [k1 (keys %) k2 (keys (% k1))] {[k1 k2] ((% k1) k2)}))","problem":146,"user":"53244c9de4b09d4e7a9b54db"},{"problem":146,"code":"#(into {} (for [[k v] %, [l w] v] [[k l] w]))","user":"5776385fe4b0979f89651632"},{"code":"(fn [p1]\n          (loop [result '{} i 0 x (for [x (keys p1) y (get p1 x) ]\n                     [ (vector x (first y)) (last y) ])]\n            (if (= i (count x))\n              result\n            (recur (assoc result (first (nth x i)) (last (nth x i))) (inc i) x)\n        )))","problem":146,"user":"4ea31da2535d7eef308072c1"},{"code":"#(reduce (fn [r [k v]] (if (map? v) (into r (map (fn [[nk nv]] [[k nk] nv]) v)) (conj r [k v]))) {} %)","problem":146,"user":"4f83665ee4b033992c121c1c"},{"code":"(fn tree2table\r\n  [input_map]\r\n\t(apply merge\r\n\t\t(for [master_key (keys input_map), \r\n\t\t\t\t\tslave_key  (keys (input_map master_key))]\r\n\t\t\t{[master_key slave_key] ((input_map master_key) slave_key)})))","problem":146,"user":"4e8a0c82535d3e98b802328d"},{"problem":146,"code":"(fn [m]\n  (into '{}\n        (apply concat (for [[k v] m]\n                        (map (fn [[a b]] (conj '[] [k a] b)) v)))))","user":"5514a60fe4b055c2f668d4d7"},{"problem":146,"code":"(fn [m]\n  (->>  (for [[k v] m\n              [k2 v2] v]\n          [[k k2] v2])\n        (apply concat)\n        (apply hash-map)))","user":"534fa9dae4b084c2834f4acf"},{"code":"#(apply merge (for [[k m] % [l v] m] {[k l] v}))","problem":146,"user":"4e1350af535d04ed9115e7d8"},{"code":"(fn [tree]\n  (into {}\n    (for [[k1 m] tree [k2 v] m] [[k1 k2] v])))","problem":146,"user":"50763574e4b0a894bb95bf3d"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [[k v] mp\n              [vk vv] v]\n         [[k vk] vv])))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"#(reduce into  {}\n  (for [[x y] %] (for [[z t] y] [[x z] t])\n  ))","problem":146,"user":"503917a0e4b088a6a14ca763"},{"problem":146,"code":"#(into  {}\n       (for  [[p1 m] (seq %) [p2 v] m] \n         [[p1  p2] v]))","user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":146,"code":"#(into {} (for [[k v] % b v] {[k (first b)] (second b)}))","user":"56bca51ae4b0f26550335963"},{"problem":146,"code":"(fn [m] (reduce (fn [new-map [k v]] \n          (reduce (fn  [new-map [k2 v2]] \n                    (assoc new-map [k k2] v2)) new-map v)) {} m ))","user":"4fd11a93e4b04c3a95aa040a"},{"code":"#(reduce into {}  (for [[k v] %] (for [[m n] v] [[k m] n])))","problem":146,"user":"4db016af838c48654951d9b9"},{"problem":146,"code":"#(into {} (for [x % y (keys (second x))] {[(first x) y] ((second x) y)}) )","user":"555883c5e4b0deb715856e2d"},{"code":"(fn [m]\r\n   (into {} \r\n     (for [[k v] m, [kk vv] v] \r\n          [[k kk] vv])))","problem":146,"user":"4ef1ee67535dced4c769f219"},{"code":"(fn [input-map]\n  (into {} (for [x input-map kv (second x)]\n                [[(key x) (key kv)] (val kv)])))","problem":146,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":146,"code":"#(into {} (for [[k c] % [s v] c] [[k s] v]))","user":"4fe9de74e4b0547ebccb2475"},{"problem":146,"code":"(fn [mm]\n  (persistent! (reduce (fn [acc [k1 m]] (reduce (fn [acc [k2 v]] (assoc! acc [k1 k2] v)) acc m)) (transient {}) mm)))","user":"504e71cbe4b0f6ff3350c4b3"},{"problem":146,"code":"(fn [hashmap]\n  (reduce merge (map (partial into {}) (for [[k innerhash] hashmap]\n    (for [[ki vi] innerhash] [[k ki] vi])))))","user":"55ede35ce4b0121d4835fde1"},{"problem":146,"code":"#(apply merge (for [wrap %\n                   ele (second wrap)]\n               {[(first wrap) (first ele)]\n                (second ele)}))","user":"60096aabe4b074f607df667f"},{"problem":146,"code":"#(into {} (for [[k v] %\n               [k2 v2] v]\n           [[k k2] v2]))","user":"56b6e354e4b0982f16b37e41"},{"problem":146,"code":"(fn [m]\n   (reduce #(assoc %1 (first %2) (second %2)) {} (for [external_key (keys m) internal_key (keys (m external_key)) ]\n                    (list [external_key internal_key] ((m external_key) internal_key)))))","user":"52fac708e4b047fd55836fff"},{"code":"(fn [mapofmaps]\n  (into {}\n    (for [[x y] (seq mapofmaps) [x1 y1] (seq y)]\n       [[x x1] y1])))","problem":146,"user":"5201ff99e4b0b2e020a18f26"},{"code":"(fn [cc] (apply (partial conj {})\n  (for [x cc y (second x)] [[(first x) (first y)] (second y)])))","problem":146,"user":"505d4b21e4b0e6aca564be07"},{"problem":146,"code":"(fn walk\n  [original]\n  (reduce #(assoc %1 (:path %2) (:value %2)) \n          {} \n          (for [k1 (keys original) k2 (keys (get original k1))]\n            {:path [k1 k2] :value (get-in original [k1 k2])})))","user":"5461dc79e4b01be26fd746a8"},{"problem":146,"code":"(fn [foo] \n  (into {} (for [a (keys foo) b (keys (foo a))] [[a b] ((foo a) b)])))","user":"4f2acb29e4b0d6649770a040"},{"problem":146,"code":"(fn tree-to-table [tree]\n  (into {}\n    (for [[k v] tree\n          [k2 v2] v]\n      {[k k2] v2}\n      )))","user":"55e6c3f5e4b050e68259b48c"},{"problem":146,"code":"(fn [m]\n  (reduce\n   (fn [x y] (assoc x (first y) (second y)))\n   {}\n   (apply concat\n          (map\n           (fn [e]\n             (apply concat\n                    (map\n                     (fn [ee] [[[(first e) (first ee)] (second ee)]])\n                     (second e))))\n           m))))","user":"5b465b8be4b02d533a91bc65"},{"problem":146,"code":"(fn [m] (into {} (flatten (let [ks (keys m)]\n                            (for [k ks]  \n                               (for [k1 (keys (m k))]  (assoc {} [k k1] (get-in m [k k1]))))))))","user":"58983e3fe4b00487982d52ce"},{"code":"(fn [m]\n    (into {} (apply concat\n             (for [[k v] m]\n               (if (map? v)\n                 (for [[nk nv] v]\n                   [[k nk] nv])\n                 [[k v]])))))","problem":146,"user":"4ed292ac535d44c135fd68d9"},{"problem":146,"code":"#(into {} (for [[x y] % [c d] y] [[x c] d]))","user":"5148bae3e4b05514c84b7cc4"},{"code":"(fn [tree]\n  (into {} (for [[k1 leaf] tree, [k2 v] leaf]\n              [[k1 k2] v])))","problem":146,"user":"4edab806535d10e5ff6f5311"},{"code":"(fn [m]\n  (apply hash-map\n    (apply concat\n      (for [[k mv] m]\n        (apply concat\n          (for [[vk vv] mv]\n            [[k vk] vv]))))))","problem":146,"user":"4eb2e6ca535d7eef3080734f"},{"code":"(fn [xs] (into {} (for [[k1, ys] xs, [k2 v] ys] [[k1 k2] v])))","problem":146,"user":"508157b2e4b0946d0443855c"},{"problem":146,"code":"(fn [m]\n             (into {}\n                   (mapcat identity\n                    (for [[k v] m]\n                      (for [[k' v'] v]\n                        [[k k'] v'])))))","user":"55ea0784e4b0121d4835fda8"},{"code":"(fn [m]\n    (apply merge\n       (flatten\n          (for [e m]\n            (for [x (keys (val e))]\n              {[(key e) x] ((val e) x)})))))","problem":146,"user":"4f404dcee4b0e243712b1fb0"},{"code":"(fn [m]\n  (into {} (mapcat (fn [[k v]]\n                     (cond (map? v) (map (fn[[k2 v]] [ [k k2] v]) v)\n                           :else    (list [k  v])))\n                   m )))","problem":146,"user":"50fa01bce4b07934dda8b0ba"},{"problem":146,"code":"(fn [m]\n       (into {} (for [key (keys m)\n                      value (m key)\n                      :let [new-key [key (first value)]\n                            new-value (second value)]]\n                  [new-key new-value])))","user":"53f891eee4b0de5c4184856d"},{"problem":146,"code":"#(into {} (for [[k m] %, [y v] m] [[k y] v]))","user":"5b772ad7e4b047b03b2036e8"},{"code":"#(into {} (for [[x y] % [u v] y] [[x u] v]))","problem":146,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":146,"code":"(fn walk-map \n  [a]\n    (->>\n      (for [x a]\n        (for [y (second x)]\n          (vector (vector (first x) (first y)) (second y))))\n      (apply concat)\n      (apply concat)\n      (apply hash-map)))","user":"53ac4719e4b047364c04445c"},{"code":"(fn [map]\n  (apply merge (for [x map y (get map (first x))] {[(first x) (first y)] (second y)})))","problem":146,"user":"50ed3c6be4b01236b1d4983b"},{"code":"(fn [m] \n (into '{}  (for  [ [ k v ] m ,   [ kk kv ]  v ]     [[k kk] kv])))","problem":146,"user":"4fccdc75e4b0ee37620e186d"},{"code":"#(into {} (mapcat (fn [[k v]] (for [[l w] v] [[k l] w])) %))","problem":146,"user":"4e43b0d9535dc968683fc4a3"},{"code":"#(apply merge (mapcat (fn [[k v]]\r\n                         (map (fn [[ vk vv]]\r\n                                { [k vk] vv}) v)) %))","problem":146,"user":"4fb23582e4b081705acca28a"},{"problem":146,"code":"(fn tree [coll] (into {} (flatten (map (fn [[key value]] (map (fn [[k v]] {[key k] v}) value)) coll))))","user":"568f2059e4b0dcc4269f40df"},{"problem":146,"code":"(fn [m]\n  (apply merge {}\n         (for [[k v] m]\n           (apply conj {}\n                  (for [[x y] v]\n                    [[k x] y])))))","user":"56ef077ae4b04a395b9a0459"},{"code":"#(into {}\n       (for [[k v] %\n             [k' v'] v]\n         [[k k'] v']))","problem":146,"user":"51f9527fe4b09be9c177e549"},{"problem":146,"code":"(fn [x]\n  (apply merge\n         (for [[k v] x\n               [k2 v2] v]\n           {[k k2] v2})))","user":"547fbe01e4b0c51c1f4d7321"},{"code":"(fn flatten-map [m]\n        (apply merge (for [[kk vv] m\n              [k v] vv]\n          (hash-map [kk k] v))))","problem":146,"user":"4f251302e4b0d66497709ff0"},{"problem":146,"code":"(fn [m]\n  (let [flat_vmap (fn [k ms]\n                    (loop [more ms\n                           r    {}]\n                      (if (nil? more)\n                        r\n                        (recur (next more) (conj r [[k (first (first more))] \n                                                    (second (first more))])))))]\n    (loop [more m\n           r {}]\n      (if (nil? more)\n        r\n        (recur (next more) (into r (apply flat_vmap (first more))))))))","user":"56051095e4b08b23635d3162"},{"code":"(fn [t] (apply hash-map (apply concat (for [[k m] (seq t)] (interleave (map (partial vector k) (keys m)) (vals m))) )) )","problem":146,"user":"4e50b67b535dc968683fc4ed"},{"problem":146,"code":"(fn flattenmap [x]\n                           (apply merge (for [a (keys x)]\n                                          (apply merge (for [b (keys (get x a))]\n                                                         (hash-map (vector a b) (get-in x (vector a b))))))))","user":"532727bae4b09d4e7a9b54fa"},{"problem":146,"code":"#(into {} (for [[k1 v1] (seq %) [k2 v2] (seq v1)] [[k1 k2] v2]))","user":"56771b31e4b05957ce8c6163"},{"code":"#(into {} \n  (for [[k1 v1] % [k2 v2] v1]\n    [[k1 k2] v2]))","problem":146,"user":"4e82f85d535db62dc21a62ce"},{"code":"(fn [m] (into {} (for [[k n] m [k2 v] n] [[k k2] v])))","problem":146,"user":"4ee9ddb8535d93acb0a66896"},{"problem":146,"code":"(fn [outer-map]\n  (into {}\n    (for [[k inner-map] outer-map\n          [inner-key inner-value] inner-map]\n      [[k inner-key] inner-value])))","user":"583369e6e4b089d5ab817c9c"},{"code":"#(into {} (for [[x z] % [k v] z] [[x k] v]))","problem":146,"user":"5081566ce4b0946d0443855b"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k1 v1] m\n              [k2 v2] v1]\n          [(conj (vector k1) k2) v2])))","user":"5215661be4b02f6d8ea676c7"},{"code":"(fn [s]\n           (reduce merge {} (for [ x (keys s)\n                                 y (keys (get s x))\n                                 z [[x y]]\n                                 w [(get (get s x) y)] ]\n                                 (into {} {z w}))))","problem":146,"user":"4f03f197535dcb61093f6b84"},{"problem":146,"code":"(fn [value]\n  (->> value\n       (mapcat (fn [[k v]]\n         \t     (for [[v1 v2] v]\n           \t\t   [[k v1] v2])))\n       (into {})))","user":"5cb41c40e4b026601754b911"},{"problem":146,"code":"#(into {} (for [[v1 p] % [p1 p2] p] [[v1 p1] p2]))","user":"565487dce4b0f9d632dd8482"},{"problem":146,"code":"(fn [s]\n  (into {}\n    (for [x s\n        y (second x)]\n    [[(first x) (first y)] (second y)])))","user":"539c88e1e4b0b51d73faaf2c"},{"problem":146,"code":"#(into \n\t{} \n\t(for \n\t\t[\n\t\t\t[a b] % [a1 b1] b\n\t\t] \n\t\t[\n\t\t\t[a a1] b1\n\t\t]\n\t)\n)","user":"5bbbd484e4b0a20761a23617"},{"problem":146,"code":"#(into {}\n       (for [top %\n             bot (val top)\n             :let [[bk bv] bot\n                   [tk] top]]\n         [[tk bk] bv]))","user":"54236ce1e4b01498b1a71ad1"},{"code":"#(apply hash-map\n         (apply concat \n         (apply concat \n                (for [h %]\n                (for [v (val h)]\n                 (list (vector (key h) (first v)) (second v)))))))","problem":146,"user":"51f28a64e4b0210f90e7454e"},{"problem":146,"code":"(fn tree-to-table\n  [dict]\n  (into {} (for [[k v] dict]\n    (if (map? v)\n      (into {} (for [[k2 v2] (tree-to-table v)] { [k k2] v2 }))\n      {k v}))))","user":"54e0e911e4b024c67c0cf7bc"},{"problem":146,"code":"(fn[m](reduce #(assoc %1 (first %2) (second %2)) {} (for [x (keys m) y (keys (m x))] [[x y] (get-in m [x y])])))","user":"57b9fc74e4b0fbc9809a27fb"},{"code":"(fn a\n  ([x]\n   (apply merge\n     (for [item x]\n      (let [k (key item) v (val item)]\n         (apply merge\n         (for [it v]\n          {(vector k (key it)) (val it)}))\n      )\n     )\n   )\n  )\n)","problem":146,"user":"51d28e15e4b0d13b04db0d9b"},{"problem":146,"code":"(let [res (atom {})]\n  \n  ; v = value, p = path\n  (letfn [(flat [v p]\n                (if (map? v)\n                  (doseq [[i j] v] (flat j (conj p i)))\n                  (swap! res assoc p v)))]\n    (fn [orig]\n      (flat orig [])\n      @res)))","user":"53d977f1e4b0e771c302547a"},{"code":"#(into {}\n  (for [[k v] % [l w] v]\n    [[k l] w]))","problem":146,"user":"4dbdc9da535d020aff1edf4c"},{"code":"(fn [m]\n    (into {}\n          (for [[k v] m\n                [k2 v] v]\n            [[k k2] v])))","problem":146,"user":"4e80aa10535db62dc21a62b1"},{"problem":146,"code":"#(into {} (for [[k v] % [k2 v2] v ] (hash-map[k k2] v2)))","user":"5661b0a9e4b068f2fe63dc6f"},{"problem":146,"code":"(fn [lst] (->>\n      (for \n        [[key1 def1] lst [key2 def2] def1] (hash-map [key1 key2] def2))\n      (into {})))","user":"59dd387be4b0a0ac046f2502"},{"problem":146,"code":"(fn\n  [map-input]\n  (let [tables (for [[k v] map-input]\n                 (into {} (for [[inner-key value] v]\n                            {[k inner-key] value})))]\n    (let [result (reduce\n                  (fn [acc itm]\n                    (merge acc itm))\n                  {}\n                  tables)]\n      result)))","user":"5cf48f04e4b087f62be35a86"},{"code":"(fn [m] (reduce merge (apply concat (#(for [x %] (for [y (second x)] (hash-map [(first x) (first y)] (second y)))) m))))","problem":146,"user":"5210ac52e4b080a8d9b9d63e"},{"code":"(fn [m]\n  (let [k (keys m)\n        subk (mapcat keys (vals m))]\n    (into {} (for [k1 k k2 subk :when (contains? (m k1) k2)] [[k1 k2] ((m k1) k2)]))))","problem":146,"user":"5003deb9e4b0678c553fc445"},{"code":"(fn [ms]\r\n  (->> (for [[k0 m] ms]\r\n         (for [[k1 v] m]\r\n           [[k0 k1] v]))\r\n       (apply concat)\r\n       (reduce conj {})))","problem":146,"user":"4e691c79535d8ccf87e9fe97"},{"problem":146,"code":"#(into {}\n  (for [[k v] % [k2 v2] v] [[k k2] v2]))","user":"55632016e4b0c656e3ff17e4"},{"problem":146,"code":"(fn [ha] (reduce merge (reduce concat (for [[primary nested] ha] \n                                 (for [[ke va] nested]  \n                                   {[primary ke] va})))))","user":"544f732fe4b0e39780006994"},{"code":"(fn [input]\n    (let [ ks (keys input) vs (vals input)\n           flatten (fn [[seed vmap]](apply concat (for [ k (keys vmap)] [ [seed k] (vmap k)])))\n         ]\n      (apply hash-map (apply concat (map flatten (partition 2 (interleave ks vs)))))\n    )\n)","problem":146,"user":"522eba30e4b01cdb292c5f0e"},{"problem":146,"code":"#(reduce into {} (for [x (keys %)\n                         y (keys (get % x))]\n                     {[x y] (get (get % x) y)}))","user":"57d0cd58e4b0bd073c20235e"},{"code":"(fn [x]\n  (apply conj {}\n    (reduce into '()\n      (for [lev1 x] (for [lev2 (second lev1)] [[(first lev1) (first lev2)] (second lev2)])))))","problem":146,"user":"52084f75e4b01ce6bbf31dde"},{"problem":146,"code":"#(into {} (for [[k1 v1] (seq %)\n        \t\t[k2 v2] (seq v1)]\n    \t\t\t\t[[k1 k2] v2]))","user":"4fd4bddce4b0d4de60cee36e"},{"problem":146,"code":"(fn simplify-map [m]\n    {:pre [(map? m), (every? map? (vals m))]} \n    (into {} (for [[outer-key inner-map] m,\n                   [inner-key inner-val] inner-map]\n               [[outer-key inner-key] inner-val])))","user":"4fc6305de4b0ee37620e180b"},{"code":"(fn [tree]\n  (apply hash-map\n         (mapcat (fn [[k v]]\n                   (mapcat (fn [[k2 v2]] [[k k2] v2]) v)) tree)))","problem":146,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":146,"code":"(fn [m]\n  (apply merge\n         (for [[k v] (seq m)\n               [k2 v2] (seq v)]\n           (hash-map (vector k k2) v2))))","user":"5d81b40ce4b0915913b1d379"},{"code":"#(into {} (for [x % y (x 1)] [[(x 0) (y 0)] (y 1)]))","problem":146,"user":"4f1d1d95535d64f603146488"},{"problem":146,"code":"(fn tree-into-tables [input]\n  (into {} (for [[k v] input [x y] v]\n     [[k x] y])))","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [[x new-mp] mp\n              [y v] new-mp]\n          [[x y] v])))","user":"538e864ee4b0b51d73faae87"},{"problem":146,"code":"(fn [m]\n  (let [A (for [[k1 mm] m [k2 v] mm] [[k1 k2] v])]\n    (reduce (fn [acc [k v]] (assoc acc k v)) {} A)))","user":"5b9db58be4b0c0b3ffbd4b41"},{"code":"#(into {} (for [[i m] % [j v] m] [[i j] v]))","problem":146,"user":"52c6a0abe4b0c2d177d62111"},{"code":"(fn [m] \n  (apply hash-map \n         (mapcat #(let [[k v] %] (mapcat (fn [m] (let [[k1 v] m] [[k k1] v])) v)) m)))","problem":146,"user":"4ef9c8f9535dced4c769f26b"},{"code":"(fn walker [x]\n  (into {} (for [[k m] x\n        [k1 m1] m]\n         [[k k1] m1])))","problem":146,"user":"51622fb8e4b009fba0926e3f"},{"code":"#(into {} (for [[k1 e] % [k2 v] e] [[k1 k2] v]))","problem":146,"user":"51e58e02e4b0efabf93c02d0"},{"problem":146,"code":"(fn [mapp]\n  (reduce conj {}\n          (for [k1 (keys mapp)\n                k2 (keys (mapp k1))]\n            {[k1 k2] (get-in mapp [k1 k2]) })))","user":"53065acbe4b02e8216869792"},{"problem":146,"code":"(fn [original]\n  (->>\n    (for [k1 (keys original)\n          k2 (keys (get original k1))]\n      [[k1 k2] (get-in original [k1 k2])])\n    (apply concat)\n    (apply array-map)))","user":"58247423e4b051871117bec5"},{"problem":146,"code":"(fn tit [m]\n  (into {} (for [x (seq m)\n                 :let [[k1 m1] x]\n                 y (seq m1)\n                 :let [[k2 v] y]]\n             [[k1 k2] v])))","user":"5f8b06afe4b0715f5002d74a"},{"problem":146,"code":"#(into{}(for[[a b]%[c d]b]{[a c]d}))","user":"5b64370ae4b0c6492753e73c"},{"problem":146,"code":"#(into (hash-map) (for [key (keys %)\n       inner-key (keys (get % key))]\n   (let [ks [key inner-key]]\n     [ks (get-in % ks)])))","user":"5515b138e4b055c2f668d4ed"},{"code":"#(into {} (for [[k v] % \n                [k2 v2] v]\n            [[k k2] v2]))","problem":146,"user":"4e6ebd4a535d5021c1a89610"},{"problem":146,"code":"#(into {} (for [[k0 v0] % [k1 v1] v0] {[k0 k1] v1}))","user":"553abb28e4b09218d5f44ffb"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[key value] m,\n                 [subkey subvalue] value]\n             [[key subkey] subvalue])))","user":"56669819e4b0e91d5f5c5674"},{"code":"(fn [m]\n    (->> (for [[k1 v1] m, [k2 v2] v1] [[k1 k2] v2])\n         (into {})\n    ))","problem":146,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":146,"code":"(fn [input]\n  (into {} (for [[key1 mp] input\n                 [key2 v] mp]\n             (hash-map [key1 key2] v))))","user":"52fc34cee4b047fd55837015"},{"problem":146,"code":"(fn [m](into {} (for [[k1 v] m, [k2 v] v] [[k1 k2] v])))","user":"4e68c434535d8ccf87e9fe89"},{"code":"(fn to-table [tree]\n  (letfn [(tree->table [tree]\n             (if (map? tree)\n               (for [k (keys tree)\n                     :let [subtable (tree->table (tree k))]\n                     [k2 v] subtable]\n                 [(cons k k2) v])\n               {nil tree}))]\n    (apply hash-map (reduce concat (tree->table tree)))))","problem":146,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"#(reduce into {} (for [x %]  (reduce into {} (for [y (second x)] {[(first x) (first y)] (second y)}))))","problem":146,"user":"503354c3e4b0c6c1199c710c"},{"code":"(fn [m]\n  (into {} (for [[k v] (seq m)\n                 [vk vv] (seq v)]\n                [[k vk] vv])))","problem":146,"user":"5338e33fe4b0e30313ee6ca1"},{"problem":146,"code":"(fn [input]\n  (letfn\n    [(get-x [func] (map (fn [x] (map (fn [y] (func x y)) (val x))) input))\n     (get-keys [] (mapcat identity (get-x (fn [x1 y1] (vec (list (key x1) (key y1)))))))\n     (get-vals [] (mapcat identity (get-x (fn [x1 y1] (val y1))))) ]\n   (apply assoc '{} (interleave (get-keys) (get-vals)))    ))","user":"552456e3e4b0882d96d091c2"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [[kk kv] mp [vk vv] kv]\n          (vec [[kk vk] vv]))))","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"problem":146,"code":"#(into {} (for [[k v] % [k2 v2] v] [[k k2] v2] ))","user":"55647a31e4b0c656e3ff1808"},{"code":"#(into {} \n       (for [[k1 m] % \n             [k2 v] m] \n         [[k1 k2] v]))","problem":146,"user":"4eab612d535d7eef30807316"},{"problem":146,"code":";; First solution\n;(fn [m] \n;  (apply merge\n;         (for [k1 (keys m)\n;               k2 (keys (m k1))\n;               :let [v (get-in m [k1 k2])]]\n;           {[k1 k2] v})))\n(fn [m]\n  (into {} (for [[k v] m \n                 [k2 v2] v] \n             [[k k2] v2])))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"#(into {} ((fn [coll]\n     (for [[k1 v1] coll\n           [k2 v2] v1]\n         [[k1 k2] v2])) \n  %))","problem":146,"user":"50b35486e4b03ea88043356a"},{"problem":146,"code":"(fn [mp] \n   (into {} \n         (for [[k v] mp \n         [vk vv] v] \n     (vec [[k vk] vv]))))","user":"57750460e4b0979f8965160c"},{"problem":146,"code":"(fn trees-tables [x]\n  (into {}\n        (apply concat\n               (for [[y z] x]\n                 (map #(vector [y (first %)] (second %)) z)))))","user":"5e9771dee4b0157ca96647d0"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (mapcat (fn [x y] (map #(vector (vector x (first %)) (last %)) y))\n                (keys m) (vals m))))","user":"5585f088e4b001b0851d7513"},{"problem":146,"code":"(fn treesTables \n  [n]\n  (into {}(apply concat\n                 (for [[x y] n]\n                   (map #(vector [x (first %)] (second %)) y)))))","user":"59dd3930e4b0a0ac046f2504"},{"problem":146,"code":"(fn [coll]\n(into {} (for [[k1 v1] coll\n                  [k2 v2]  v1\n:while (not (map? v2))]\n[[k1 k2] v2])))","user":"554bd33ce4b0a04f7929959a"},{"code":"(fn [h] (apply hash-map (mapcat (fn [[k v]] (mapcat (fn [[l w]] [(conj [k] l) w]) v)) h)))","problem":146,"user":"51307b84e4b08c712d3fae39"},{"problem":146,"code":"(fn [xs]\n  (into {} \n        (for \n          [\n           [k0 v0] xs ; a and [p 1] from [a [p 1 q 2]] \n           [k1 v1] v0 ; p and 1 from [p 1]\n          ] \n          [\n           [k0 k1] v1 ; [a p] 1 \n          ])))","user":"57e139f6e4b0bfb2137f5a6c"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k v] m [k2 v2] v]\n          [[k k2] v2])))","user":"602d5eade4b0d5df2af22279"},{"code":"#(->> (for [[x y] %] (for [[a b] y] [[x a] b]))\n      (apply concat)\n      (into {}))","problem":146,"user":"4fa05b99e4b0dcca54ed6d47"},{"problem":146,"code":"(fn tree->table [coll]\n  (into {} (for [x (keys coll) y (keys (coll x))] [[x y] (get-in coll [x y])])))","user":"53f2370ee4b0742d9025b0e7"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [k (keys m)]\n      (let [v (get m k)]\n        (into {}\n          (for [i (keys v)]\n            {[k i] (get v i)}))))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":146,"code":"#(reduce-kv (fn [m1 k1 v1] (reduce-kv (fn [m2 k2 v2] (assoc m2 [k1 k2] v2)) m1 v1)) {} %)","user":"5d931a58e4b0d3f9b434ad10"},{"problem":146,"code":"(fn [kkvs]\n  (into {}\n        (for [[k1 kvs] kkvs\n              [k2 v] kvs]\n          [[k1 k2] v])\n        )\n  )","user":"5a7497d2e4b0512ff01cdaba"},{"problem":146,"code":"(fn flat-map\n  [m]\n  (reduce #(reduce (fn [m [k v]] (assoc m k v)) %1 %2) {} (for [[k v] m]\n           (if (map? v)\n             (for [[sub-k sub-v] v]\n               [[k sub-k] sub-v])\n             [[k v]]))))","user":"56a36f76e4b0542e1f8d14ca"},{"code":"(fn [h]\n  (into {} \n    (for [k1 (keys h)  h2 (vals h)  \n          k2 (keys h2) :when (contains? (h k1) k2) :let [v ((h k1) k2)]]\n      [[k1 k2] v])))","problem":146,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":146,"code":"(fn fm [m]\n    (apply merge (flatten \n                  (for [k (keys m)] \n                    (for [sk (keys (get m k))] \n                      (assoc {} [k sk] (get-in m [k sk])))))))","user":"574abbfbe4b02ea114799200"},{"code":"#(apply merge\n  (for\n    [[key1 value1] %\n     [key2 value2] value1]\n    {[key1 key2] value2}))","problem":146,"user":"4f7f9665e4b033992c121bea"},{"code":"(fn [foo]\n  (reduce merge (map #(into {} %) (for [[x y] foo] (for [[z q] y] [[x z] q])))))","problem":146,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":"#(into {}  \n  (for [[k v] %\n        [p q] v]\n        [[k p] q]))","problem":146,"user":"4fb3b865e4b081705acca2a2"},{"code":"#(reduce (fn [h [k v]] (assoc h k v)) {}  (mapcat (partial into []) (for [[k v] %] (for [[k2 v2] v] [[k k2] v2]))))","problem":146,"user":"523b1a65e4b02f719975bdbd"},{"code":"(fn [m] (into {} (for [[k v] m [i j] v] [[k i] j])))","problem":146,"user":"53806e5be4b06839e8705ec1"},{"code":"#(reduce conj (for [[k1 v1] % [k2 v2] v1] {[k1 k2] v2}))","problem":146,"user":"5160195ae4b0e2be8aa20be3"},{"problem":146,"code":"(fn __\n   [x]\n   (into {}\n         (for [[k v] x\n               [vk vv] v]\n            (vector [k vk] vv))))","user":"5b73e500e4b047b03b2036ba"},{"problem":146,"code":"(fn [t]\n    (into {} (for [[k v] t\n                   [vk vv] v]\n               [[k vk] vv])))","user":"55c5b55fe4b0e31453f649b5"},{"problem":146,"code":"(fn fl [h]\n  (into {} (for [[a b] h\n                 [b v] b]\n             [[a b] v])))","user":"53fcd574e4b0de5c418485d9"},{"problem":146,"code":"(fn t2t [m1]\n  (if (not (map? m1))\n    (hash-map [] m1)\n    (if (empty? m1)\n      {}\n      (let [[k va] (first m1)\n            in-m (t2t va)]\n        (merge\n          (into {} (map (fn [[in-vec in-val]] {(vec (cons k in-vec)) in-val}) in-m))\n          (t2t (into {} (rest m1))))))))","user":"5c76577ae4b0fca0c16227ea"},{"code":"(fn trees-into-tables [m]\n  (let [lst\n        (for [e m]\n          (let [k (key e)\n                submap (val e)]\n            (map (fn [[subk subv]] [[k subk] subv]) submap)))]\n    (println \"lst\" lst)\n    (apply hash-map (apply concat (apply concat lst)))))","problem":146,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":146,"code":"#(reduce \n \t(fn [coll [kk vv]] \n      (assoc coll kk vv)) \n {} \n (for [x (keys %) y (get % x)] (let [[ff ss] y] (list (vector x ff) ss))) )","user":"57e3527ce4b0bfb2137f5a99"},{"problem":146,"code":"(fn [t]\n  (into {}\n  (for [k (keys t)\n        k2 (keys (t k))\n        :let [y ((t k) k2)]]\n    [[k k2] y])))","user":"54e345a1e4b024c67c0cf7db"},{"problem":146,"code":"(fn [obj] (into {} (for [k (keys obj) k2 (keys (get obj k))] { [k k2] (get-in obj [k k2]) })))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":146,"code":"(fn [m]\n  (into {} (apply concat\n  (for [[k vs] m]\n    (for [[vk vv] vs]\n      {[k vk] vv}\n    )\n  )))\n)","user":"5943abb6e4b060784b3b792b"},{"problem":146,"code":"(fn [xs]\n  (into {}\n  (for [k1 (keys xs)\n        k2 (keys (get xs k1))]\n    [[k1 k2] (get-in xs [k1 k2])])))","user":"546ed28be4b00cfc9eacc1a5"},{"problem":146,"code":"(fn [a]\n\t(into {}\n\t\t(for [[k v] a\n\t\t\t  [sk sv] v]\n\t\t  {[k sk] sv})))","user":"5554ae14e4b0deb715856e0e"},{"code":"(fn [m]\n  (into {} (for [k (keys m) [p v] (m k)]\n    [[k p] v])))","problem":146,"user":"51aab611e4b04e3dc0c27b2d"},{"problem":146,"code":"(fn [tree] (into {} (for [[k v] tree [k2 v2] v] [[k k2] v2])))","user":"597f8c93e4b0dbe32238d0c1"},{"problem":146,"code":"#(into {} (for [[a b] %1\n               [c d] b]\n           [[a c] d]))","user":"5b857411e4b047b03b2037ce"},{"problem":146,"code":"(fn tabler [t]\n\t(letfn [(zapper [m]\n\t\t(let [mykey (first (keys m))]\n\t\t\t(for [item (m mykey)]\n\t\t\t\t{[mykey (first item)] (second item)})))]\n\t(reduce merge \n\t\t(flatten\n\t\t\t(for [item t]\n\t\t\t\t(zapper {(first item) (second item)}))))))","user":"53703287e4b0fc7073fd6e8f"},{"problem":146,"code":"#(into {} (for [[k v] % [nk nv] v] [[k nk] nv]))","user":"54926752e4b0b312c081ff44"},{"problem":146,"code":"(fn [coll]\n  (apply merge (for [x (keys coll)\n                     y (keys (apply merge (vals coll)))\n                     :let [z ((coll x) y)]\n                     :when (contains? (coll x) y) ]\n                 {[x y] z})))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":146,"code":"(fn sol [x] (into {} (for [[k v] x [k1 v1] v] [[k k1], v1])))","user":"54857657e4b0e286459a11ac"},{"code":"#(apply merge (for [[k1 h] % [k2 v] h] {[k1 k2] v}))","problem":146,"user":"4e8612f8535db62dc21a62f2"},{"problem":146,"code":"(fn [m]\n  (apply merge (for [[k v] m\n                     [kk vv] v]\n                 {[k kk] vv})))","user":"5edd05bfe4b0c7845d86b0f3"},{"code":"(fn [m]\n  (into {} (for [[k v] m [k2 v2] v] [[k k2] v2])))","problem":146,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"(fn f [m]\r\n  (reduce merge (for [k  (keys m)\r\n                     v  (keys (get m k))]\r\n                 {[k v] (get-in m [k v])})))","problem":146,"user":"4f3e6244e4b0e243712b1f85"},{"code":"(fn to-path [map]\n  (into {}\n    (for [[k v]   map\n          [kk vv] v]\n      [[k kk] vv])))","problem":146,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":146,"code":"(fn [t]\n    (into {} (for [[k0 m] t\n                   [k1 v] m]\n               [[k0 k1] v])))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":146,"code":"#(into {} (flatten (for [[k v] %]  (flatten (for [[sk sv] v] {[k sk] sv} )))))","user":"54d05a9de4b0e8a36923e5c7"},{"problem":146,"code":"(fn [input] \n  (apply hash-map \n         (reduce concat (for [x input \n                              y (val x)] \n                          [[(key x) (key y)] (val y)]))))","user":"4e9ff8d0535d7eef3080729c"},{"problem":146,"code":"(fn trees->tables [x]\n  (into {}\n        (for [[outer-key outer-value] x\n              [inner-key inner-value] outer-value]\n      \n          [[outer-key inner-key] inner-value])))","user":"5b759ca8e4b047b03b2036d0"},{"problem":146,"code":"(fn tree->table\n  [tree]\n  (reduce-kv\n    (fn [result k v] (merge result (into {} (for [[k* v*] v] [[k k*] v*]))))\n    {}\n    tree))","user":"6098263be4b00e9e6653c3f9"},{"problem":146,"code":"(fn [m]\n  (loop [ks (keys m) om {}]\n    (if (empty? ks)\n      om\n      (recur (rest ks)\n        (apply conj om\n          (for [pair (get m (first ks))\n              :let [r [[(first ks) (first pair)] (first (rest pair))]]]\n           r))))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"code":"(fn tree-table[m]\n  (loop [ks (keys m)\n         m m\n         accum {}]\n    (if (empty? ks)\n      accum\n      (let [k (first ks)\n            v (get m k)]\n        (if (map? v)\n          (let [sub-map (tree-table v)\n                new-accum (reduce #(apply (partial assoc %1) %2) accum (map #(list (vec (concat [k] %1)) %2)\n                                                                            (keys sub-map)\n                                                                            (vals sub-map)))\n                ]\n            (recur (rest ks) m new-accum))\n          (recur (rest ks) m (assoc accum [k] v)))))))","problem":146,"user":"53527551e4b084c2834f4af0"},{"problem":146,"code":"(fn [mps]\n\t(into {}\n    \t(for [[k v] mps\n                [a b] v]\n            [[k a] b])))","user":"50ef77a4e4b0bdaecbb47d99"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k v] m\n          [k2 vi] v]\n      [[k k2] vi])))","user":"53e9681de4b036ad0777e4a4"},{"code":"#(into {} (for [[k m] % [k2 v] m] [[k k2] v]))","problem":146,"user":"4e79f28b535db169f9c796a8"},{"problem":146,"code":"#(into {} (for [[a b] %\n                [c d] b]\n                [[a c] d]))","user":"5499e23de4b03163384f4706"},{"code":"(fn flatten-map [s]\n  (let [combine-map (fn [k s] (for [[x y] s] {[k x] y}))]\n  (loop [result {}, coll s]\n    (if (empty? coll)\n      result\n      (let [[i j] (first coll)]\n      (recur (into result (combine-map i j)) (rest coll)))))))","problem":146,"user":"52cf084ce4b07d0d72b27399"},{"problem":146,"code":"(fn [m]\n  (into {} (for [k1 (keys m) k2 (keys (get m k1))] {[k1 k2] (get-in m [k1 k2])})))","user":"4e82c062535db62dc21a62cc"},{"problem":146,"code":"(fn flatten-top-level [m]\n    (into {}\n          (apply concat\n                 (for [[k v] m]\n                   ;; though all the test questions have the property that\n                   ;; the values of all top-level keys are themselves maps,\n                   ;; the question doesn't specify this, and I don't consider\n                   ;; it a safe assumption to make.\n                   (if (map? v)\n                     (map (fn [[sk sv]] [(vector k sk) sv]) v)\n                     {k v})))))","user":"5531e445e4b09218d5f44f76"},{"code":"(fn [coll]\n    (into {}\n          (for [[k v] coll\n                [k1 v1] v]\n            [[k k1] v1])))","problem":146,"user":"4dc0ff08535d020aff1edf84"},{"problem":146,"code":"(fn mapper\n  [m]\n  (into {}\n  (for [[k v] m [a b] v]\n    (assoc {} (vector k a) b) \n    )\n        )\n )","user":"54e0bb4fe4b024c67c0cf7b8"},{"problem":146,"code":"(fn [coll] \n   (into {} (for [[k v] coll \n                 [k2 v2] v] \n              [[k k2] v2])))","user":"5633bb9de4b0bfe05bf117b4"},{"code":"#(into {} (for [[a,b] % [c,d] b] [[a c] d]))","problem":146,"user":"518c5236e4b087e178201de0"},{"problem":146,"code":"#(into {}\n  (for [[k v] % [vk vv] v]\n   [[k vk] vv]))","user":"5b61aa6ae4b0c6492753e712"},{"problem":146,"code":"(fn [m]\n  (reduce conj {}\n          (for [i m\n                j i\n                :when (map? j)\n                k j]\n            [[(first i) (first k)] (second k)])))","user":"5918db70e4b09b4ee5954bbb"},{"problem":146,"code":"(fn [mm]\n  (->> (for [[kk vv] mm\n        \t [k v] vv]\n         [[kk k] v])\n       (into {})))","user":"5a6af090e4b0512ff01cda2d"},{"problem":146,"code":"#(apply clojure.set/union (for [[i j] % [z w] j] {[i z] w}))","user":"5751f2a2e4b02ea114799292"},{"code":"(fn [m]\n    (into {}\n          (mapcat (fn [e] ( map #(vector (vector (key e) (key %)) (val %)) (val e))) m)))","problem":146,"user":"52a32876e4b04e0c58e87bfb"},{"problem":146,"code":"#(into {}\n       (for\n   \t\t[[k v] %\n    \t[kk vv] v]\n   \t\t[[k kk] vv]))\n\n\n;(fn [xs]\n;  (letfn [(g [[k v]] (map (fn [[kk vv]] {[k kk] vv}) v))]\n;    (reduce conj {} (apply concat (map g xs)))))","user":"5323a414e4b09d4e7a9b54d1"},{"problem":146,"code":"(fn flatten-map2 [m]\n  (into {} (mapcat #(for [k (keys (second %))]\n              (vector [(first %) k] (second (find (second %) k)))) m)))","user":"5f2c94b4e4b033932238a669"},{"problem":146,"code":"(fn [bb] (apply hash-map (mapcat (fn [aa] (mapcat #(vector (vector %2 (first %1)) (second %1)) (second aa) (repeat (first aa)))) bb)))","user":"561a1af6e4b053970a773b02"},{"problem":146,"code":"(fn [m]\n  (let [map-list (for [[k1 v1] m\n                       [k2 v2] v1]\n                   (hash-map [k1 k2] v2))]\n    (apply merge map-list)))","user":"559454f2e4b0c79f6e1db952"},{"problem":146,"code":"(fn my-keys [m]\n  (apply conj {} (for [x m y (second x)] [[(first x) (first y)] (second y)])))","user":"53e27bf1e4b036ad0777e3f2"},{"code":"#(into {} (for [i % j (second i)] [[(first i) (first j)] (second j)]))","problem":146,"user":"510db6cde4b078ea71921145"},{"code":"(fn f [l]\n  (into {} (for [[x y] l [k v] y] [[x k] v])) \n)","problem":146,"user":"50f4894be4b004d364930528"},{"problem":146,"code":"(fn flatmap [m]\n  (into {} (for [[k v] m\n                 [kk vv] v]\n             [[k kk] vv])))","user":"5d3ae729e4b01671435dbd5d"},{"problem":146,"code":";(fn [maps]\n;  (into {}\n;        (for [x maps\n;              y (val x)]\n;          [[(key x) (key y)] (val y)])))\n(fn [maps]\n  (into {}\n        (for [[k1 v1] maps\n              [k2 v2] v1]\n          [[k1 k2] v2])))","user":"60794173e4b0a637ed78035d"},{"code":"(fn [m]\n  (apply hash-map\n  (apply concat\n  (for [k (keys m)]\n    (apply concat\n    (for [j (keys (get m k))]\n      (list [k j] (get-in m [k j]))))))))","problem":146,"user":"5078d366e4b08327cd804a5b"},{"problem":146,"code":"#(into {} (for [p1 % :let [k1 (first p1) v1 (second p1)] p2 v1 :let [k2 (first p2) v2 (second p2)]] [[k1 k2] v2]))","user":"543c5200e4b032a45b86933e"},{"code":"(fn [m]\n  (into {}\n        (for [[k v] m\n          [v1 v2] v]\n          (vec [[k v1] v2]))))","problem":146,"user":"518ccf6be4b05e6c8537e386"},{"problem":146,"code":"#(into {} (for [[k1 d] % [k2 v] d] {[k1 k2] v}))","user":"54ae541ae4b09f271ff37cef"},{"code":"#(reduce (fn [s k]\n            (into s (reduce (fn [sum n] (into sum (hash-map [(key k) (key n)] (val n)))) {} (val  k)))) {} %)","problem":146,"user":"5047782ce4b0371827a27bc2"},{"code":"(fn [m] (into {} (for [k (keys m) v (keys (m k))] [[k v] (get-in m [k v])])))","problem":146,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn [m]\n  (into {} (for [[k v] m, [kv vv] v]\n     [[k kv] vv] )))","problem":146,"user":"4dca8b6d535d5973398f9288"},{"problem":146,"code":"(fn [m]\n  (->> m\n       (map (fn [[k v]]\n              (if (map? v)\n                (->> v\n                     (map (fn [[k1 v1]]\n                            (hash-map (vector k k1) v1)))\n                     (into {})\n                     )\n                (hash-map k v))))\n       (apply merge)))","user":"51b8d3d5e4b050a1176cd69d"},{"code":"#(into {} (for [[k v] %\n                [l w] v]\n            [[k l] w]))","problem":146,"user":"51ad244fe4b09397d510977f"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [ [k v]   mp\n               [vk vv] v ]\n          (vec [[k vk] vv]))\n   \n   ))","user":"5e639b4be4b0fd0acd1586a2"},{"problem":146,"code":"(fn [maps]\n  (apply merge (for [x maps]\n                 (apply merge (for [y (second x)]\n                                {[(first x) (first y)] (second y)})))))","user":"5746061ae4b009280f9f2b5b"},{"code":"#(apply conj (for [x (keys %) y (keys (% x))] {[x y] ((% x) y)}))","problem":146,"user":"4f71347ae4b07046d9f4f009"},{"problem":146,"code":"#(into {} (for [x (keys %) y (keys (% x))] {[x y] ((% x) y)}))","user":"5784ff88e4b0ebec4cfb74d4"},{"code":"(fn t [m] (apply hash-map (apply concat (for [[k v] m [k2 v2] v] [[k k2] v2]))))","problem":146,"user":"4ea1ecfa535d7eef308072bb"},{"code":"(fn [tr]\n  (into {}\n  (for [[k v] tr [k2 v2] v] [[k k2] v2]))\n)","problem":146,"user":"4fca2a13e4b0ee37620e184d"},{"code":"(fn [m]\n      (into {}\n            (for [[k v] m\n                  [k1 v1] v]\n              [[k k1] v1])))","problem":146,"user":"50f48298e4b004d364930527"},{"code":"(fn [m1]\n  (into {}\n    (for [[k1 m2] m1 [k2 v] m2]\n      [[k1 k2] v])))","problem":146,"user":"4eb0a757535d7eef3080733d"},{"code":"#(into {} (for [[k v] %\n                [j u] v]\n            [[k j] u]))","problem":146,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k1 v1] m\n                 [k2 v2] v1]\n             {[k1 k2] v2})))","user":"5d24e49be4b02ea6f0fb6a2a"},{"code":"(fn tree->table [m]\n  (into {}\n        (for [[key1 subtree] m\n              [key2 x] subtree]\n          [[key1 key2] x])))","problem":146,"user":"50812debe4b01a93d3f38e4c"},{"problem":146,"code":"(fn [m]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (for [e m, e2 (val e)]\n    [[(key e) (key e2)] (val e2)]\n  ))\n)","user":"55eeb37ae4b0121d4835fdf3"},{"problem":146,"code":"#(into {}\n       (for [[k0 v0] % [k1 v1] v0]\n         [[k0 k1] v1]))\n\n\n#_(fn [m]\n  (letfn [(parse [[k mp]]\n            (let [fkeys (map #(vector k %) (keys mp))\n                  fvals (vals mp)]\n              (into {} (map vector fkeys fvals))))]\n    (reduce #(conj %1 (parse %2)) '{} (seq m))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":146,"code":"(fn [m]\n  (reduce into {} (for [[k v] m]\n                    (for [[vk vv] v]\n                      [[k vk] vv]))))","user":"54d127b7e4b0e8a36923e5de"},{"code":"(fn [m]\n  (into\n   {}\n   (for [[k z] m\n         [j v] z]\n     [[k j] v])))","problem":146,"user":"52951156e4b02ebb4ef7501b"},{"problem":146,"code":"(fn [m]\n    (apply hash-map (apply concat (for [a m\n       b (val a)\n       ]\n      [[(key a) (key b)] (val b)]\n      ) ))\n )","user":"537b1083e4b06839e8705e64"},{"problem":146,"code":"(fn [coll]\n  (into {}\n        (mapcat seq\n               (for [[k value] coll]\n                 (map #(vector [k (first %)] (second %)) value)))))","user":"5a99b863e4b0d174b936c7ae"},{"problem":146,"code":"(fn[a] (reduce #(into %1 (apply hash-map %2)) {} (for [[x y] a [k v] y] [[x k] v])))","user":"4daeabf6edd6309eace4d15c"},{"code":"(fn [c] (apply merge (for [[k m] c [ka v] m] {[k ka] v})))","problem":146,"user":"50e3e108e4b01912b3285c48"},{"code":"#(apply merge\n    (for [[k1 m] % [k2 v] m]\n      {[k1 k2] v}))","problem":146,"user":"4dbdab4e535d020aff1edf49"},{"problem":146,"code":"(fn f [m]\n  (reduce  merge\n  (map (fn [k1]\n        (reduce conj\n        (map (fn [k2] {[k1 k2], ((m k1) k2)}) (keys (m k1)))))\n       (keys m))))","user":"50bfbf25e4b05ae8c1cbbd9b"},{"problem":146,"code":"(fn [m]\n  (into {} (for [x m\n                 :let [[k1 v1] x]\n                 y v1\n                 :let [[k2 v2] y]]\n             [[k1 k2] v2])))","user":"518279abe4b0353c468deb65"},{"problem":146,"code":"#(apply merge (for [[k1 v1] %] (into {} (for [[k2 v2] v1] [[k1 k2] v2]))))","user":"58ffaddee4b0438e51c2cffe"},{"problem":146,"code":"(fn make-tree [n]\n  (apply merge (for [[k v] n\n                     [k2 v2] v]\n                 {[k k2] v2}\n     \n    ))\n  )","user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":146,"code":"(fn [t]\n                     (let [seq-kvs (fn [tree]\n                                     (apply concat (for [[k v] tree]\n                                                     (for [[l w] v]\n                                                       [[k l] w]))))]\n                       (reduce (fn [result [k v]]\n                                 (assoc result\n                                        k\n                                        v))\n                               {}\n                               (seq-kvs t))))","user":"57f904c5e4b0d3187e900936"},{"problem":146,"code":"(fn flatten-map [m]\n  (into {} (for [[k1 m1] m\n                 [k2 v] m1]\n             [[k1 k2] v])))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":146,"code":"(fn tree-to-table\n  [tree]\n  (into {} (for [[key value] tree [key2 val2] value] {[key key2] val2})))","user":"5e8ce2fee4b0cb0169546328"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (mapcat (fn [[k v]]\n                  (map #(vector [k (first %)] (second %)) v)) m)))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":146,"code":"; Eventually !!!\n\n(fn tree-to-tab [m]\n  (into {}\n    (for [x m\n          z (second x)]\n      [ [ (nth x 0) (nth z 0) ] (nth z 1)])))","user":"590b055ae4b047aa04b199c9"},{"code":"(fn [m] \n   (reduce #(apply assoc % %2) {} (for [[a b] m \n         [c d] b]\n     (list [a c] d)\n     )))","problem":146,"user":"529d4f4be4b04e0c58e87b79"},{"code":"(fn [m]\n      (apply\n       hash-map\n       (apply\n        concat\n        (apply\n         concat\n         (for [[k0 v0] m]\n           (if (map? v0)\n             (for [[k1 v1] v0]\n               [[k0 k1] v1])\n             [k0 v0]))))))","problem":146,"user":"509e62a8e4b08df8156e9e2e"},{"problem":146,"code":"(fn [x] (let [k (keys x)]\n           (apply merge (flatten (map (fn [a]\n                  (for [kys (flatten (keys (get x a))) :let [cur a value (get (get x cur) kys) ]] (hash-map [cur kys] value))\n                  ) k))))\n   )","user":"5f8fe45ae4b0715f5002d78d"},{"code":"#(into {} (for [[k m] %1, [ink inv] m] [[k ink] inv]))","problem":146,"user":"4f88ae35e4b033992c121c6d"},{"problem":146,"code":"#(reduce into {} (for [[k1 v1] % :let [vs (for [[k v] v1] [[k1 k] v])]] vs))","user":"506ba58be4b0eda3100c090b"},{"code":"#(reduce merge {} (for[a % b (val a)] \n  {[(key a) (key b)] (val b)}))","problem":146,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":146,"code":"(fn [x]\n   (reduce\n     (fn [res coll]\n       (let [kp (-> coll first)\n             colls (-> coll second vec)]\n         (reduce\n           #(conj %1 {[kp (first %2)] (second %2)})\n           res\n           colls)))\n     {}\n     x))","user":"57fc5e42e4b0d3187e900997"},{"problem":146,"code":";(fn\n;  [xs]\n;  (into {} (for [i xs\n;                 j (xs (key i))\n;                 :let [f (fn [[a [b c]]] [[a b] c])]]\n;             (f [(key i) j]))))\n\n#(into {} (for [[x y] % [z w] y] [[x z] w]))","user":"59390a35e4b02506e01a29f3"},{"code":"(fn [hashmap]\n  (into {}\n   (for [[k1 map] hashmap\n         [k2 val] map]\n     [[k1 k2] val])))","problem":146,"user":"5054c853e4b0b1b9d1860eb3"},{"problem":146,"code":"(fn [n]\n  (into {}\n        (for [[i j] n\n              [l k] j]\n          [[i l] k])))","user":"5a99b861e4b0d174b936c7ad"},{"problem":146,"code":"(fn\n  [struct]\n  (loop [v (apply concat ((fn\n  [struct]\n   (for [x (keys struct)]\n     (for [y (keys (get struct x))]\n       (vector (vector x y) (get-in struct (vector x y)) )))\n ) struct)) newmap {}]\n    (if (empty? v)\n      newmap\n      (recur (rest v) (assoc newmap (first (first v)) (second (first v)))))))","user":"5772ddb0e4b0979f896515d4"},{"problem":146,"code":"(fn tint \n  [n] \n  (apply merge (for [[q w] n \n                     [a s] w] \n                 {[q a] s}))\n  )","user":"57f81532e4b0d3187e900914"},{"problem":146,"code":"(fn tree-into-table [amap]\n  (reduce #(into %1 %2) {} (for [x (keys amap)\n                                :let [submap (get amap x)]]\n                            (for [y (keys submap)]\n                              { [x y] (get submap y)}))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":146,"code":"#(apply merge (flatten (for [[k1 v1] %] \n  (for [[k2 v2] v1] {[k1 k2] v2}))))","user":"5471f2fbe4b094393f72dd70"},{"code":"(fn [m] (apply hash-map (apply concat (for [x m y (second x)] (vector (vector (first x) (first y)) (second y))))))","problem":146,"user":"536f2faee4b0fc7073fd6e79"},{"code":"(fn [map-of-maps]\n  (apply hash-map (apply concat (for [[k v] map-of-maps [k2 v2] v] [[k k2] v2]))))","problem":146,"user":"4f03641a535dcb61093f6a9b"},{"problem":146,"code":"(fn[m]\n  (into {} \n        (for[[k v] m [n o] v]\n             [[k n] o])))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"(fn [m]\n  (reduce #(conj %1 %2) {}\n    (for [k (keys m), sk (keys (m k))]\n      [[k sk] ((m k) sk)])))","problem":146,"user":"5175616ae4b0dea9bbfba576"},{"code":"(fn flatten-maps\n  [in]\n  (into {} \n    (for [x in y (second x)] \n      (hash-map [(first x) (first y)] (second y)))))","problem":146,"user":"5300b750e4b0d8b024fd3711"},{"code":"#(into {} (for [x (keys %) y (keys (% x))] (vector [x y] (get-in % [x y]))))","problem":146,"user":"523d02b0e4b0dbf0c3017289"},{"problem":146,"code":"#(into {} (for [[k n] %\n                [a b] n]\n            [[k a] b]))","user":"588fbb39e4b00487982d51bd"},{"problem":146,"code":"#(into {} (for [[k v] % [i j] v]\n          [[k i] j]\n         ))","user":"55896a0ce4b059ccff29b204"},{"code":"(fn [m]\n  (apply hash-map\n    (mapcat identity\n    (for [[k v] m]\n      (mapcat identity\n      (for [[k2 v2] v]\n        [[k k2] v2]))))))","problem":146,"user":"50427899e4b0add3005c0fc2"},{"problem":146,"code":"(fn [mapp]\n  (into\n   {}\n   (for [[k v] mapp [vk vv] v] [[k vk] vv])))","user":"59971e2de4b07157cc8daacc"},{"code":"(fn prob-146 [m]\n  (if (empty? m)\n    {}\n    (let [e1 (first m)\n          k1 (key e1)\n          v1 (val e1)]\n      (merge (apply merge (map #(hash-map (vector k1 %) (get v1 %)) (keys v1))) (prob-146 (rest m))))))","problem":146,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":146,"code":"(fn [m]\n  (reduce conj {} (for [[k v] m\n                        [kk vv] v]\n                    [[k kk] vv])))","user":"53ea5851e4b036ad0777e4e4"},{"problem":146,"code":"#(->> (for [[a rs] %\n            [b v] rs] \n        [[a b] v])\n      (into {}))","user":"53dfdf01e4b0d874e779ae46"},{"code":"#(into {} (for [[k1 vs] % [k2 v] vs] [[k1 k2] v]))","problem":146,"user":"4ef48422535dced4c769f236"},{"problem":146,"code":"(fn flatten-map [m]\n  (reduce #(merge %1 %2) (for [key (keys m)\n                               key-in (keys (m key))]\n                           {[key key-in] ((m key) key-in)}\n                           )))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[a b] m\n              [c d] b]\n          [[a c] d])))","user":"57fa7c93e4b0d3187e900963"},{"problem":146,"code":"(fn [mp] (into {} (for [[x z] mp [u v] z] [[x u] v])))","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":146,"code":"(fn [tree]\n   (->> (for [[k v] tree\n              [k2 v2] v]\n          [[k k2] v2])\n        (apply concat)\n        (apply hash-map)))","user":"53ed6976e4b0d648e757f4c4"},{"code":"#(into {} \n      (for [[k v] % [ik iv] v] \n        [[k ik] iv]))","problem":146,"user":"5102ac9de4b00c483ae176fa"},{"problem":146,"code":"(fn p\n  ([m] (p m []))\n  ([m k]\n   (let [k (map #(conj k %) (keys m))]\n     (if (not-any? map? (vals m))\n       (zipmap k (vals m))\n       (apply merge (map #(p %1 %2) (vals m) k))))))","user":"57533bc1e4b02ea1147992a6"},{"problem":146,"code":"(fn [ms]\n  (into {}\n        (for [x (keys ms)\n              y (keys (get ms x))\n              ]\n          [[x y] (get (get ms x) y)])\n        ))","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn [m]\n  (into {}\n        (for [[mykey myval] m\n              [myval-key myval-val] myval]\n          (vec [[mykey myval-key] myval-val]))))","problem":146,"user":"52474133e4b05ef8e38e635e"},{"code":"(fn [m] (into {} (for [k1 (keys m) k2 (keys (m k1))] [ [k1 k2] (get-in m [k1 k2])])))","problem":146,"user":"4e3a9dae535deb9a81d77f4a"},{"code":"(fn [m]\n  (reduce \n   (fn [r [k v]] (assoc r k v)) \n   {}\n   (for [[k v] m [l w] v] \n     [[k l] w])))","problem":146,"user":"519b7d76e4b02a926d9a436e"},{"problem":146,"code":"(fn [xs]\n    (->> (for [[x1 x2] (seq xs)]\n           (map (fn [x y] [[x (first y)] (first (next y))])\n                (repeat x1) (seq x2)))\n         (reduce #(concat %1 %2) [])\n         (into {})))","user":"560e9a2de4b05f002753df52"},{"problem":146,"code":"#(apply merge (for [[k v] %\n       [m o] v]\n   {[k m] o}\n ))","user":"5c1aadcde4b01240ff567209"},{"problem":146,"code":"(fn [m] (into {} (for [[k v] m\n                        [vk vv] v]\n                    [[k vk] vv])))","user":"5d52bf29e4b0776584bd6f69"},{"code":"(fn [m]\n  (reduce conj {} (reduce concat (for [[k v] m]\n         (for [[x y] v]\n           [[k x] y])))))","problem":146,"user":"4e16bdef535d04ed9115e7e9"},{"problem":146,"code":"(fn tree->table\n  [m]\n  (reduce (fn [acc [k v]]\n            (reduce (fn step [p [ke ve]]\n                      (assoc p [k ke] ve))\n                    acc (seq v)))\n          {} m))","user":"534056fce4b085b17e897dac"},{"code":"(fn [m]\n  (into {} (for [[k1 v1] m, [k2 v2] v1] [[k1 k2] v2])))","problem":146,"user":"52039e12e4b0fb7e47ea51ff"},{"code":"#(into {} (for [[k v] % [x y] v]\n                    [[k x] y]\n           ))","problem":146,"user":"4fbbcf0ce4b081705acca2ee"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k v] m\n          [k2 v2] v]\n      {[k k2] v2})))","user":"52f53589e4b05e3f0be25f2c"},{"problem":146,"code":"(fn [m]\n  (into\n   {}\n   (for [[m-k m-v] m\n         [n-k n-v] m-v]\n     {[m-k n-k] n-v})))","user":"586bc870e4b01531a375e964"},{"problem":146,"code":"(fn map-paths\n  ([m] (map-paths m []))\n  ([m p]\n    (apply merge\n      (for [x (seq m)\n            :let [key (first x) val (last x)]]\n        (if (map? val)\n          (map-paths val (conj p key))\n          {(conj p key) val})))))","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":146,"code":"(fn flatten-map\n  ([m] (flatten-map m [] {}))\n  ([m k acc]\n    (if-not (map? m)\n      (conj acc {k m})\n      (reduce (fn [acc' [k' v']] (flatten-map v' (conj k k') acc')) acc m))))","user":"5901158de4b0438e51c2d039"},{"problem":146,"code":"(fn [l]\n\n  (into {} (for\n\n    [[x y] l\n\n     [z w] y]\n\n    [[x z] w])))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"#(into {}\n       (for [[k v] %\n             [a b] v]\n         [[k a] b]))","problem":146,"user":"4ec53f8c535d6d7199dd368b"},{"problem":146,"code":"(fn [m]\n  (into {}\n  (for [[k1 m2] m\n        [k2 v] m2]\n    (vec [[k1 k2] v]))))","user":"4fc4eb1ee4b081705acca354"},{"problem":146,"code":"(fn [a] (into {} (reduce into [] (for [[x y] a] (for [[k v] y] [[x k] v])))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":146,"code":"(letfn [(f [[pk m]]\n            (reduce-kv #(assoc %1 [pk %2] %3)\n                       {}\n                       m))]\n    (comp\n      (partial apply merge)\n      (partial map f)))","user":"5f2d6bc4e4b033932238a66e"},{"code":"(fn [coll] \n\t(reduce\n\t\t#(conj % %2)\n\t\t{}\n\t\t(for [[k v] coll, [y z] v]\n\t\t\t[[k y] z])))","problem":146,"user":"520242bae4b030ee0c5b26e3"},{"problem":146,"code":"(fn\n  [m]\n  (reduce (fn [acc [k v]]\n            (reduce (fn step [p [ke ve]]\n                      (assoc p [k ke] ve))\n                    acc (seq v)))\n          {} m))","user":"59e8cd8be4b0249b72820739"},{"problem":146,"code":"(fn [m]\n  (into {} (for [k1 (keys m) k2 (keys (m k1))] [[k1 k2] (get-in m [k1 k2])])))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"#(apply hash-map (apply concat (for [[k m] %1 [k2 kv] m] [[k k2] kv])))","problem":146,"user":"51f59607e4b0abb92f97f9d5"},{"problem":146,"code":"(fn [m]\n  (into {}\n  (for [[k v] m\n        [kv vv] v]\n    (vec [[k kv] vv]))))","user":"5405885ee4b0addc1aec6668"},{"problem":146,"code":"(fn fl1 [m]\n  (into {}\n    (for [x (keys m) y (keys (get m x))]\n      [(vector x y)\n       (get\n         (get m x)\n         y)])))","user":"5779556de4b0979f8965166e"},{"problem":146,"code":"(fn [mapin]\n  (into {}\n        (for [[x y] mapin\n        [yx y] y]\n(vec [[x yx] y]))))","user":"59e62655e4b08badc2a0c568"},{"code":"(fn [m] \n    (into {} (flatten (for [x m]\n                        (for [y (val x)] \n                          {[(key x) (key y)] (val y)})))))","problem":146,"user":"4ff3df0fe4b0678c553fc355"},{"code":"(fn [m] (into {} (for [[a av] m [b bv] av] [[a b] bv])))","problem":146,"user":"527ba695e4b03e8d9a4a7596"},{"problem":146,"code":"#(into {}\n  (for [[k v] %\n       [vk vv] v]\n   [[k vk] vv]))\n\n;golf:\n;#(into {}\n;  (for [[k v] %\n;       [l w] v]\n;   [[k l] w]))","user":"54d341f7e4b0e8a36923e603"},{"code":"(fn [a]\n   (apply merge \n          (for \n            [x a y (second x)] \n            {(vector (first x) (first y)) \n             (second y)})))","problem":146,"user":"525cc137e4b0cb4875a45d46"},{"problem":146,"code":"(fn [m]\n   (apply merge (for [[k1 v1] m]\n                  (into {} (for [[k2 v2] v1]\n                             [[k1 k2] v2])))))","user":"543c39e0e4b032a45b86933d"},{"problem":146,"code":"(fn [coll]\n  (into {} (apply concat (for [[x y] coll\n                               :let [key (keys y) val (vals y)]]\n                           (map #(vector [x %] %2) key val)))))","user":"57ee2b3ee4b0bfb2137f5bac"},{"problem":146,"code":"(fn [s] (into {} (for [[a b] s [c d] b] [[a c] d])))","user":"5e2549c8e4b05b4b0151615f"},{"problem":146,"code":"(fn [a-seq]\n  (let [flatten-maps (for [[k1 v1] a-seq\n                           [k2 v2] v1]\n                       {[k1 k2] v2})]\n    (reduce merge flatten-maps)))","user":"505d1b01e4b0e6aca564be04"},{"problem":146,"code":"(fn [coll]\n  (into {} (for [[l1k l1v] coll\n        \t\t [l2k l2v] l1v]\n    \t\t  [[l1k l2k] (get l1v l2k)])))","user":"58ee5371e4b056aecfd47da8"},{"problem":146,"code":"(fn [tree]\n  (into {} (for [[k v] tree\n                 [k2 v2] v]\n             (vec [[k k2] v2]))))","user":"56df62b3e4b0ca2494a095ef"},{"code":"(fn [t]\n  (reduce #(assoc %1 (first %2) (last %2)) {}\n    (for [x t y (val x)]\n      [[(key x) (key y)] (val y)])))","problem":146,"user":"4fbacdbae4b081705acca2e5"},{"code":"(fn aa [x]\n  (letfn [(bb [g] (map #(reduce (fn [x1 x2] (conj x1 x2)) {} %) g))]\n    (reduce #(conj %1 %2)       \n   (bb\n  (for [xx (keys x)] \n    (for [yy (x xx)] [(list xx (first yy)) (last yy)]))    \n   \n   ))   \n              )\n          \n       \n  )","problem":146,"user":"5105ed16e4b01150e115ebe2"},{"problem":146,"code":"(fn flat-map [coll]\n  (into {} (apply concat\n                   (for [[k v] coll]\n                     (if (map? v)\n                       (let [ks (flat-map v)]\n                         (map (fn [[k' v]] [(cons k k') v]) ks))\n                       [[[k] v]])))))","user":"53fb5256e4b0de5c4184857f"},{"code":"(fn [sample]\n  (into {}\n        (mapcat identity\n                (for [[key val] sample]\n                  (for [[subkey subval] val]\n                    {[key subkey] subval})))))","problem":146,"user":"52323a4ae4b035af41902a79"},{"code":"(fn trees-into-tables [m]\n  (into {} (for [[k1 v1] m [k2 v2] v1] [[k1 k2] v2])))","problem":146,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"#(into {} (for [x % \n       :let [k (key x)]\n       :let [v (val x)]\n       kk (keys v)\n       :let [vv (v kk)]]\n   [[k kk] vv]))","problem":146,"user":"52379c46e4b0fae3832e99db"},{"problem":146,"code":"#(into {}\n      (for [[k v] %\n            [vk vv] v]\n        (vector [k vk] vv)))","user":"5aeca4c9e4b0cc2b61a3bc0a"},{"problem":146,"code":"(fn foo [coll] (into {} (for [[x y] coll z y] (vector (vector x (first z)) (last z)))))","user":"5b3251c1e4b025bcb146f317"},{"problem":146,"code":"(fn [m]\n  (reduce conj {} \n    (for [ \n           [key inner-map] m\n           [inner-key inner-value] inner-map\n         ]\n      {[key inner-key] inner-value})))","user":"54d6f22de4b0a52adc2e2023"},{"problem":146,"code":"(fn [x]\n  (apply merge\n         (for [[k v] x]\n           (into {} (for [[vk vv] v]\n                      [[k vk] vv])))))","user":"541df0b5e4b01498b1a71a86"},{"problem":146,"code":"(fn [m] (let [k (for [i (keys m)\n                         j (keys (get m i))] \n                      [i j])\n             v (map (partial get-in m) k)]\n     (zipmap k v)))","user":"5957cc41e4b066ee0a44af76"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [[key val] mp\n              [vk vv] val]\n         (vec [[key vk] vv]))))","user":"4eeb8f68535d93acb0a668a9"},{"code":"#(into {} (for [[k v] % [j w] v] [[k j] w]))","problem":146,"user":"4f031eac535dcb61093f6a67"},{"problem":146,"code":"(fn [m]\n  (apply merge (for [[k1 v] m, [k2 v2] v]\n       {[k1 k2] v2})))","user":"559c13c5e4b066d22e731f61"},{"problem":146,"code":"(fn [h] \n   (into {} (for [[k vs] h\n          [kk vv] vs]\n      [[k kk] vv])))","user":"53e9dce1e4b036ad0777e4bc"},{"code":"#(into {} (for [[k m] % [l v] m] [[k l] v]))","problem":146,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"#(into{}(for[[a m]%[b n]m][[a b]n]))","problem":146,"user":"4dd4034a535dae65d5c462df"},{"problem":146,"code":"(fn [m]\n    (apply hash-map\n      (apply concat\n        (apply concat\n          (for\n            [[k m2] m]\n            (for\n              [[k2 v2] m2]\n              [[k k2] v2]\n            )\n          )\n        )\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":146,"code":"(fn flat-map [m]\n    (loop [acc {} [[k v] & rest] (vec m)]\n        (cond\n            (nil? k) acc\n            (map? v)\n                (recur\n                    (merge acc\n                        ((fn add-key [k m]\n                            (into {}\n                                (for [[k2 v] m]\n                                    [(into [k] k2) v])))\n                            k (flat-map v)))\n                    rest)\n            :else (recur (assoc acc [k] v) rest))))","user":"551afdf8e4b07993ea3788cb"},{"problem":146,"code":"#(into \n  {}\n  (for [[e m] %\n        [k v] m]\n    [[e k] v]))","user":"5151c184e4b03e678e393add"},{"code":"(fn [m] (letfn [\n(key-pairs-2 [m] (mapcat #(map vector (repeat %) (keys (get m %))) (keys m)))\n(trees-into-tables [m] (apply hash-map (mapcat #(vector % (get-in m %)) (key-pairs-2 m))))\n] (trees-into-tables m)))","problem":146,"user":"52f10094e4b05e3f0be25ee8"},{"problem":146,"code":"(fn [m]\n  (into {}\n      (for [k1 (keys m)\n            k2 (keys (m k1))]\n        [[k1 k2] (get-in m [k1 k2])])))","user":"4dd1de4d535dae65d5c462d7"},{"problem":146,"code":"(fn tree-table [m]\n  (into {} \n        (for [k (keys m)\n       \tvs (get m k)] \n    [[k (first vs)] (last vs)])))","user":"53791ab7e4b06839e8705e4d"},{"code":"#(reduce into (for [x (keys %) y (keys (% x)) z (list ((% x) y))] {[x y] z}))","problem":146,"user":"50112acee4b0d82cfac69f4c"},{"problem":146,"code":"#(into {} \n       (for [a (keys %) b (keys (% a))] \n            [[a b] (get-in % [a b])]))","user":"5835cb06e4b089d5ab817cea"},{"problem":146,"code":"(fn [x]\n   (into {}(for [k (keys x)\n                 v (keys (get x k))]\n             [[k v] (get-in x [k v])])))","user":"525cc912e4b0cb4875a45d48"},{"code":"#(into {} (for [[k v] %\n               [i1 i2] v ]\n           {[k i1] i2 }\n           ))","problem":146,"user":"52b577c9e4b0c58976d9ad39"},{"code":"#(into {} (for [[k1 v1] %\n                [k2 v2] v1]\n            {[k1 k2] v2}))","problem":146,"user":"4f21838fe4b0d66497709fd2"},{"problem":146,"code":"(fn [hm]\n  (apply merge \n         (for [x hm\n               y (second x)]\n           (hash-map [(first x) (first y)] (second y)))))","user":"55995fa7e4b031d6649c9ba9"},{"problem":146,"code":"(fn [tree]\n    (letfn [(level1 [res fkey]\n              (let [smap (tree fkey)]\n                (reduce (fn [res skey]\n                          (assoc res [fkey skey] (smap skey)))\n                        res\n                        (keys smap))))]\n      (reduce level1 {} (keys tree))))","user":"554a75c9e4b0a04f79299575"},{"problem":146,"code":"(fn [coll]\n  (apply hash-map\n         (mapcat identity\n                 (for [[k v] coll\n                       [k1 v1] v]\n                   [[k k1] v1]))))","user":"54f4adc8e4b0f2f3c5226e86"},{"problem":146,"code":"(fn [m]\n  (into {} \n        (for [x (into [] m) y (into [] (second x))]\n             [[(first x) (first y)] (second y)])))","user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"(fn [x] \n  (apply hash-map \n         (apply concat\n                (for [[k1 v1] x, [k2 v2] v1]\n                  [[k1 k2] v2]))))","problem":146,"user":"4ff769bce4b0678c553fc38f"},{"code":"#(apply merge (for [[a b] % \n                    [c d] b] {[a c] d}))","problem":146,"user":"524469dee4b0d8acf9ed6a9d"},{"code":"#(into {} (for [[k1 m] % [k2 v] m][[k1 k2] v]))","problem":146,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":146,"code":"(fn [maps]\n    (into {} (for [[k v] maps\n          [k' v'] v]\n      [[k k'] v']\n    ))\n)","user":"52f9c68ce4b047fd55836fef"},{"problem":146,"code":"(fn [coll]\n  (into\n   {}\n   (flatten (for [[k v] coll]\n     (for [[k1 v1] v]\n       {[k k1] v1})))))","user":"524a9556e4b05ef8e38e64b1"},{"problem":146,"code":"#(apply merge (for [[x y] % [z w] y] {[x z] w}))","user":"5486e317e4b0e286459a11c0"},{"code":"(fn [topmap]\n  (into {} (for [[tk tv] topmap\n                 [nk nv] tv]\n             [[tk nk] nv])))","problem":146,"user":"510cd1dde4b078ea71921124"},{"problem":146,"code":"(fn [s] (into {} (for [k (keys s) k2 (keys (get s k))] [[k k2] (get-in s [k k2])])))","user":"504457c0e4b01f6c9a8b2360"},{"problem":146,"code":"(fn [m1]\n  (into {} (for [[k1 m2] m1\n                 [k2 v] m2] [[k1 k2] v])))","user":"53c1b787e4b00fb29b221266"},{"code":"(fn walker [m]\n      (apply assoc {}\n        (apply concat (for [[k v] m]\n                        (apply concat (for [[kk vv] v]\n                          [[k kk] vv]))))))","problem":146,"user":"515737f0e4b0b0b4b87062d0"},{"problem":146,"code":"#(apply hash-map\n  (apply concat \n    (for [k % v (second k)] [[(first k) (first v)] (second v)])))","user":"5b6473eee4b0c6492753e73f"},{"code":"#(reduce (fn [m2 [k v]] (assoc m2 k v)) {} (for [[k1 v1] %, [k2 v2] v1] [[k1 k2] v2]))","problem":146,"user":"4eabb245535d7eef30807319"},{"problem":146,"code":"(fn [mapO] \n  (into {} \n        (for [i mapO j (mapO (key i))] \n          [[(key i) (key j)] \n           (val j)])))","user":"607508f3e4b069485764de54"},{"code":"#(into {}\n       (for [[k1 v] %\n             [k2 v] v]\n         [[k1 k2] v]))","problem":146,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(fn collapse-map [m]\n  (apply merge (for [[k1 m2] m\n                     [k2 v] m2]\n                 {[k1 k2] v})))","problem":146,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"#(apply hash-map (apply concat (for [o (keys %) i (keys (% o))]\n   [[o i] ((% o) i)])))","problem":146,"user":"506617c3e4b03d366d7cb2ab"},{"problem":146,"code":"#(into {} (for [[k v] (seq %) [k1 v1] v] [[k k1] v1]))","user":"53ce4cd4e4b00fb29b2212ef"},{"code":"(fn a [m] (reduce conj (for [e m] (let [k (key e)] (loop [pairs (val e) out {}] (if(empty? pairs)(identity out)(recur (next pairs)(assoc out [k (key (first pairs))] (val (first pairs))))))))))","problem":146,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":146,"code":"#((fn tbl [[x & xs]]\n\n    (if xs\n\n      (conj (apply conj (map (fn [y] (hash-map [(first x) (first y)] (second y))) (second x))) (tbl xs))\n\n      (apply conj (map (fn [y] (hash-map [(first x) (first y)] (second y))) (second x)))))(vec %))","user":"586b6a0ae4b01531a375e957"},{"problem":146,"code":"(fn [m]\n  (apply merge\n         (flatten\n          (for [x (keys m)\n                :let [y (get m x)]]\n            (for [z (keys y)\n                  :let [a (get y z)]]\n              {(vector x z) a})))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":146,"code":"(fn map-walker\n  [megamap]\n  (let [the-list  (for [[k v] megamap\n                    [k1 v1] v]\n                    {(conj [k] k1) v1})]\n        (reduce #(assoc % (first (keys %2)) (first (vals %2))) {} the-list )))","user":"5564709ee4b0c656e3ff1807"},{"problem":146,"code":"(fn flattenMap[m]\n\t (apply merge (for [e1 (seq m) e2 (seq (second e1))]\n\t\t\t\t{[(first e1) (first e2)] (second e2)}\n\t))\n)","user":"568820e8e4b0dcc4269f4067"},{"problem":146,"code":"(fn [a-map]\n   (zipmap\n    ((fn [k] (partition 2 (interleave (mapcat #(repeat (count (a-map %)) %) k) (mapcat #(keys (a-map %)) k)))) (keys a-map))\n    (mapcat vals (vals a-map))\n    )\n   )","user":"54db3d82e4b024c67c0cf75f"},{"problem":146,"code":"#(into {} (for [x % y (second x)] (assoc {} [(first x) (key y)] (val y))))","user":"545537c1e4b0e397800069dd"},{"code":"(fn [m]\n    (apply conj {} (for [entry m]\n      (let [k (key entry)\n            v (val entry)]\n        (reduce (fn [m1 m2] (conj m1 {[k (key m2)] (val m2)})) {} v)))))","problem":146,"user":"4dc29a1d535d020aff1edf96"},{"code":"#(into {} (for [e % se (e 1)] [[(e 0) (se 0)] (se 1)]))","problem":146,"user":"50bce014e4b0594b91591c63"},{"code":"(fn [x]\n     (let [key-pair (loop [k0 (keys x) result []]\n\t      (if (empty? k0)\n\t\t  result\n\t\t  (let [k1 (keys (get x (first k0)))]\n\t\t       (recur (rest k0) (into result (map (partial conj [(first k0)]) k1))))))]\n\t\t       (loop [kp key-pair result {}]\n\t\t\t  (if (empty? kp)\n\t\t\t      result\n\t\t\t      (recur (rest kp) (conj result (hash-map (first kp) (get-in x (first kp)))))))))","problem":146,"user":"4f066916535dcb61093f6c10"},{"problem":146,"code":"(fn [mm]\n  (let [i (for [ k1 (keys mm) :let [m (mm k1)] k2 (keys m) ] [k1 k2 (m k2)])\n        r (reduce (fn [acc [k1 k2 v]] (assoc acc [k1 k2] v)) {} i)\n        ]\n    r)\n  )","user":"53c1ce3ee4b00fb29b221268"},{"code":"(fn [x] (apply merge-with identity (for [k1 (keys x) k2 (keys (get x k1))] (hash-map (vector k1 k2) (get (get x k1) k2)))))","problem":146,"user":"50ef3e5de4b0a78662fa2652"},{"problem":146,"code":"(fn [tree]\n  (->> (for [[k1 v1] tree]\n         (for [[k2 v2] v1]\n           (vector [k1 k2] v2)))\n       (apply concat)\n       (into {})))","user":"5463c824e4b01be26fd746c5"},{"problem":146,"code":"(fn [t] (into {} (mapcat (fn [e] (for [v (val e)] {[(key e) (key v)] (val v)})) t)))","user":"57efb389e4b0bfb2137f5bdb"},{"problem":146,"code":"(fn [m] (into (hash-map) (reduce (fn [res x] (concat res x)) [] (for [[k v] m]\n                                                                   (for [[k1 v1] v]\n                                                                     [[k k1] v1])))))","user":"5dc53ddee4b02f9375f4e1bd"},{"code":"(fn [m]\n  (into {}\n    (for [[outer-key inner-map] m\n          [inner-key val]       inner-map]\n      [[outer-key inner-key] val])))","problem":146,"user":"4e593dac535d8a8b8723a29c"},{"problem":146,"code":"#(into {} (for [[k h] % [k2 v] h] [[k k2] v]))","user":"5fedff0ee4b05ac5b16ea1d0"},{"problem":146,"code":"#(let [m (for [i %] (for [j (i 1)] [[(i 0) (j 0)] (j 1)]))] \n   (->> m (apply concat) (apply concat) (apply hash-map)))","user":"56aed78fe4b03c432f187363"},{"problem":146,"code":"(fn [m]\n  (reduce (fn [acc kv]\n            (let [k (first kv)\n                  v (second kv)]\n              (reduce #(assoc %1 (first %2) (second %2))\n                      acc\n                      (for [kv2 v]\n                        [[k (first kv2)] (second kv2)]))))\n          {}\n          (for [kv m] kv)))","user":"56732c84e4b05957ce8c611c"},{"problem":146,"code":"(fn [map-map]\n  (apply merge\n   (for [[k1 m] (seq map-map)]\n     (apply merge\n    \t(for [[k2 v] (seq m)]\n      \t\t{[k1 k2] v})))))","user":"546c4c5fe4b00cfc9eacc178"},{"code":"#(apply merge (for [[x y] %]\n  (apply merge (for [[u v] y] {[x u] v}))))","problem":146,"user":"53500869e4b084c2834f4ad3"},{"code":"(fn __ [m]\n  (apply merge\n         (for [kv m\n               v (second kv)\n               :let [key (first kv)\n                     [fv rv] v]]\n           {[key fv] rv})))","problem":146,"user":"52463059e4b09dbe66b56198"},{"problem":146,"code":"#(into {} (mapcat (fn [[k m]] (map (fn [[k' v]] [[k k'] v]) m)) %))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":146,"code":"(fn [m]\n  (letfn [(flatten-map [ks m]\n            (if-not (map? m)\n              {ks m}\n              (reduce (fn [acc [k v]]\n                        (conj acc (flatten-map (conj ks k) v)))\n                      {}\n                      m)))]\n    (flatten-map [] m)))","user":"5393185ae4b0b51d73faaeb7"},{"code":"#(into {}\n  (for [[k v] % [l w] v]\n    {[k l] w}))","problem":146,"user":"4f9597e0e4b0dcca54ed6cd4"},{"problem":146,"code":"#(into {} \n       (for [[k v] % \n             [k2 v2] v] [[k k2] v2]))","user":"5aa4b961e4b0d174b936c888"},{"problem":146,"code":"(fn [col]\n  (into {} (mapcat (fn [[k v]]\n            (if (map? v)\n              (map (fn [[a b]] [[k a] b]) v)\n              [k v])) col)))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":146,"code":"(fn flatten-map\n  [m]\n  (into {}\n        (for [[outer-key inner-map] m\n              [inner-key v] inner-map]\n          [[outer-key inner-key] v])))","user":"563f1493e4b08d4f616f5ecf"},{"code":"(fn fm [mom]\n  (into {} (for [k1 (keys mom) k2 (keys (mom k1))] [[k1 k2] ((mom k1) k2)])))","problem":146,"user":"4ede8e1d535d10e5ff6f5339"},{"code":"(fn tree->table [tree]\n  (let [l (for [key (keys tree)]\n    (for [key2 (keys (get tree key))]\n      {(vector key key2) (get (get tree key) key2)}\n      ))]\n  (reduce into {} l)\n    )\n  )","problem":146,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":146,"code":"#(into {} (mapcat (fn [[k v]]\n                   (for [[a b] v]\n                     [[k a] b])) %))","user":"544e5b22e4b0e39780006983"},{"code":"(fn [data-map]\n  (apply merge\n    (for [f (keys data-map)\n          s (keys (get data-map f))]\n      {[f s] (get (get data-map f) s)})))","problem":146,"user":"506c0a02e4b0eda3100c090d"},{"problem":146,"code":"#(reduce merge (for [[k1 v2] %1 [k2 v2] v2] {[k1 k2] v2}))","user":"53fe1c3be4b0de5c418485f2"},{"problem":146,"code":"(fn [m] (into {} (for [k0 (keys m) k1 (keys (m k0))] [[k0 k1] ((m k0) k1)])))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":146,"code":"#(reduce into '{} \n         (for [[x xm] %] \n           (for [[yk yv] xm] \n             [[x yk] yv])))","user":"5566463ee4b0c656e3ff1831"},{"code":"(fn [m] (apply hash-map (mapcat (fn [x] (mapcat #(list (list (first x) (first %)) (second %)) (second x))) m)))","problem":146,"user":"4ec07699535dfed6da9c6da2"},{"problem":146,"code":"#(into {} (apply concat (for [a %] (for [b (val a)] [[(key a) (key b)] (val b)]))))","user":"52faec2ee4b047fd55837004"},{"problem":146,"code":"(fn [coll]\n  (zipmap\n    (for [k (keys coll)\n          v (vals coll)\n          k2 (keys v)\n        :when (or (nil? (get-in coll [k k2] false)) (get-in coll [k k2] false))]\n      [k k2]\n    )\n    (for [k (keys coll)\n          v (vals coll)\n          k2 (keys v)\n          :when (or (nil? (get-in coll [k k2] false)) (get-in coll [k k2] false))]\n      (get-in coll [k k2]))))","user":"53f6bfd9e4b0db01ade6f9e4"},{"code":"(fn [mm]\n  (apply hash-map\n    (apply concat\n      (for [ [k1 m] mm, [k2 v] m ] \n        [[k1 k2] v]))))","problem":146,"user":"50901b2ee4b0ea685a20f774"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k1 m1] m\n                 [k2 v] m1]\n             (vector [k1 k2] v))))","user":"55934bebe4b0c79f6e1db93b"},{"code":"(fn [m]\n  (let [branch? #(and (-> % type (identical? clojure.lang.MapEntry))\n                      (-> % val map?))\n        children #(->> (val %)\n                       (map (fn [[k v]] (-> (conj (key %) k)\n                                            (clojure.lang.MapEntry. v)))))]\n    (->> (clojure.lang.MapEntry. [] m)\n         (tree-seq branch? children)\n         (remove (comp map? second))\n         (apply conj {}))))","problem":146,"user":"4daec9dcedd6309eace4d15f"},{"problem":146,"code":"(fn [m]\n  (into\n   {}\n   (for [[k0 v0] m\n         [k1 v1] v0]\n     [[k0 k1] v1])))","user":"51d19c24e4b0cfcf579466c3"},{"code":"(fn [m]\n  (apply merge\n         (flatten\n          (for [[a b] m]\n            (for [[c d] b]\n              {[a c] d})))))","problem":146,"user":"500cb910e4b05f7c30cfa698"},{"problem":146,"code":"#_(fn [m]\n  (loop [v (into [] m)\n         mx {}]\n    (if-let [[[v1 v2]] v]\n      (recur\n        (next v)\n        (into mx\n              (loop [vv (into [] v2) mmx {}]\n                (if-let [[[vv1 vv2]] vv]\n                  (recur (next vv) (assoc mmx [v1 vv1] vv2))\n                  mmx)))\n              )\n      mx)\n    ))\n\n\n(fn [m] (into {} (for [[k v] m, [kk vv] v] [[k kk] vv])))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":146,"code":"#(into {} (for [[k v] %1 [k1 v1] v]\n     [[k k1] v1]))","user":"506f0968e4b09350ab4199f5"},{"code":"(fn [x] (into {} (for [[i m] x [j k] m] [[i j] k])))","problem":146,"user":"5125d963e4b05d10e3e395fe"},{"problem":146,"code":"(fn [input]\n  (apply sorted-map\n    (reduce\n     (fn [val coll]\n       (-> (reduce #(concat %2 %1) val coll)))\n     []\n     (for [item input]\n       (for [sub-item (second item)]\n         (-> [[(first item) (first sub-item)] (second sub-item)]))))))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn [m] \n  (letfn\n    [(f [k v] \n        (reduce #(assoc % (vector k (key %2)) (val %2)) {} v))]\n  (reduce #(merge % (f (key %2) (val %2))) {} m)))","problem":146,"user":"4fdb02aae4b05e33b9224f56"},{"problem":146,"code":"(fn [ns]\n    (into (array-map) \n        (for [[x y]ns \n            [y' z] y]\n             (vec [(vector x y') z]))))","user":"58e7229fe4b056aecfd47cc4"},{"problem":146,"code":"(fn tree-to-table\n[tree]\n  (into {} (apply concat (for [x tree] (for [y (second  x)] [[(first x) (first y)] (second y)]))))\n)","user":"5f6b8222e4b02876ed9fd052"},{"problem":146,"code":"(fn fn146 [aMap] \n  (reduce-kv (fn [m k v]\n               (merge m \n                      (reduce-kv #(assoc %1 [k %2] %3)\n                      \t\t\t {} \n                                 v)))\n             {}                                           \n             aMap)    \n)","user":"5e42ba49e4b01d43a70e8e6c"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k v] m\n                 [k2 v2] v]\n             [[k k2] v2])))","user":"54814dbee4b0e286459a116b"},{"problem":146,"code":"(fn p146 [m]\n  (into {} (for [[k1 m2] m [k2 v] m2]\n             {[k1 k2] v})))","user":"50ec409ce4b04edc33777045"},{"problem":146,"code":"(fn [m]\n  (into {} (apply concat (for [[k v] m]\n    (for [[ki vi] v]\n      [[k ki] vi])))))","user":"58f98231e4b0438e51c2cf4c"},{"problem":146,"code":"(fn [m] (let []\n                             (loop [res {}, k1 (keys m), k11 (keys (get m (first k1)))]\n                               (if (and (empty? k1) (empty? k11))\n                                 res\n                                 (recur (if (first k11)\n                                          (conj res {[(first k1) (first k11)] (get (get m (first k1)) (first k11))})\n                                          res)\n                                        (if (empty? k11)\n                                          (rest k1)\n                                          k1)\n                                        (if (empty? k11)\n                                          (keys (get m (second k1)))\n                                          (rest k11)))))))","user":"5cf72682e4b0b71b1d808a68"},{"problem":146,"code":"(fn Trees-into-tables\n  [lst]\n  (into {} (for [i lst\n                 j (keys (second i))] (vec [[(first i) j] (get (second i) j)]))))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":146,"code":"#(into {} (for [[key1 innermap] % [key2 value] innermap] [[key1 key2] value]))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn [coll]\n  (reduce into {}\n    (flatten (for [ms coll]\n      (let [k (first ms)\n            ks (keys (second ms))\n            vs (vals (second ms))]\n        (map hash-map\n          (map vector (take (count ks) (repeat k)) ks)\n          vs))))))","problem":146,"user":"515a6151e4b0394f658fe241"},{"problem":146,"code":"(fn [m]                                                                                                                                                                                               \n      (into {} (for [[k v] m]                                                                                                                                                                            \n                 (into {} (for [[k' v'] v]                                                                                                                                                           \n                            [[k k'] v'])))))","user":"55316b8ae4b076ab5578f825"},{"problem":146,"code":"#(into {} (for [[k v] % [k2 v2] v] \n            [[k k2] v2]))","user":"5c321b8ae4b0d62ef62d9f32"},{"problem":146,"code":"(fn [arg] (into {} (for [[k v] arg [kk vv] v] (vec [[k kk] vv]))))","user":"5804b491e4b0a837a8b30cac"},{"problem":146,"code":"#(apply hash-map (mapcat (fn [[k v]] (mapcat (fn [[m n]] [[k m] n]) v)) %))","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":146,"code":"(fn [x]\n  (clojure.walk/walk (fn [[k v]] {k (seq v)} )\n        (fn [x] (reduce (fn [acc [k v]] (into acc (map (fn [x] { [k (first x)] (second x)})v))) {} x))\n    \n       x))","user":"5bec37e2e4b0f319e2d7ec96"},{"problem":146,"code":"(fn [mm]\n  (into {} (for [i (keys mm) j (keys (get mm i))] [[i j] (get-in mm [i j])])))","user":"57458b82e4b009280f9f2b4e"},{"code":"(fn [m]\n  (into {} (for [[k v] m [k1 v1] v] [[k k1] v1])))","problem":146,"user":"4f3e5e87e4b0e243712b1f83"},{"code":"(fn [m]\n  (reduce\n    conj\n    {}\n    (mapcat\n      #(for [k (list (key %))\n             v (seq (val %))]\n        [[k (key v)] (val v)])\n      m)))","problem":146,"user":"4f253a49e4b0d66497709ff3"},{"code":"(fn [m]\n (into {} (for [[k v] m [k2 v2] v] [[k k2] v2])))","problem":146,"user":"5018ed15e4b011a2e0bf6412"},{"problem":146,"code":"(fn [orig] \n  (into {} (for [[ok ov] orig\n                 [ik iv] ov]\n             [[ok ik] iv])))","user":"5ade6bafe4b0837691e92c23"},{"code":"(fn [in]\n  (->> (for [[k v] in]\n         (for [[f r] v]\n           [[k f] r]))\n       (apply concat)\n       (into {})))","problem":146,"user":"4eae5fe4535d7eef30807325"},{"problem":146,"code":"#(->> (for [[k m1] %\n            [k1 v] m1]\n        [[k k1] v])\n      (into {}))","user":"52470d42e4b05ef8e38e6350"},{"code":";(defn flattentree148\n;  \"Noticed that desctructuring doesn't let this work when I substitute\n;walk for the chain of functions it calls... But this works in the repl!\"\n;  [map]\n;  (reduce into {}\n;            (for [[k1 m] map]\n;              (letfn [(k-flat [[k v]] [[k1 k] v])]\n;                (walk k-flat identity m) ;walk path = (identity (into {} (map k-flat m)))\n;))))\n\n(fn [map]\n  (into {}\n        (for [[k v] map\n        [vk vv] v]\n    [[k vk] vv])))","problem":146,"user":"524f4256e4b0541d1855b808"},{"code":"(fn [m]\n  (apply merge\n    (for [k (keys m)\n         sk (keys (m k))]\n      (assoc {} [k sk] (get-in m [k sk]) )\n      )\n    )\n )","problem":146,"user":"52593207e4b0cb4875a45cd3"},{"code":"(fn mf[mm]\n  (apply hash-map\n         (apply concat \n                (apply concat\n                (map #(for [y (% 1)] [[(% 0) (y 0)] (y 1)]) \n                     (for [x mm] x))))))","problem":146,"user":"50b24a2fe4b03ea88043355c"},{"problem":146,"code":"#(into {} (apply concat (for [[k1 v1] %] (for [[k2 v2] v1] [[k1 k2] v2]))))","user":"52d07cc5e4b07d0d72b273bb"},{"code":"#(apply hash-map (apply concat (for [[k v] %\n                                     [ik iv] v]\n                                 [[k ik] iv])))","problem":146,"user":"52753740e4b03e8d9a4a74c1"},{"code":"#(->>\n  (for [[ok ov] %\n        [ik iv] ov]\n    [[ok ik] iv])\n  (apply concat)\n  (apply hash-map))","problem":146,"user":"50052d38e4b0678c553fc45c"},{"problem":146,"code":"(fn [hm] (into {}\n               (apply concat\n                      (for [[k v] hm]\n                        (map (fn [sq] (vector [k (first sq)] (second sq))) v)))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"code":"(fn [m] \n  (into {}\n  (for [x m        \n        :let [k (key x)\n              v (val x)]\n        y v\n        :let [k2 (key y)\n              v2 (val y)]\n        ]\n        {[k k2] v2})))","problem":146,"user":"51dd9370e4b0c33a4e1da40c"},{"problem":146,"code":"#(into {} (for [[k0 v] %, k1 (keys v)] [[k0 k1] (get v k1)]))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":146,"code":"(fn [m] (into {} (reduce into (for [p# m]\n     (mapv #(hash-map (vector (first p#) (first %)) (second %)) (second p#))))))","user":"59ddae03e4b01968742fed65"},{"code":"(fn [t]\n  (into {} (for [[k v] t, [vk vv] v] [[k vk] vv])))","problem":146,"user":"4ef4c1ff535dced4c769f23e"},{"problem":146,"code":"(fn table-trees [m]\n  (into {}\n        (apply concat\n               (for [[k v] m]\n                 (map #(vector [k (first %)] (second %)) v)))))","user":"5f84f110e4b0375e81f54e79"},{"code":"#(into {} (for [[k m] % [p n] m] [[k p] n]))","problem":146,"user":"4ee88bfb535d93acb0a66881"},{"problem":146,"code":"(fn [x]\n   (into {}\n     (for [[k v] x\n           [k1 v1] v]\n       [[k k1] v1])))","user":"5a03d246e4b01bb0ae8afd8c"},{"problem":146,"code":"(fn [d]\n    (->>\n      (for [k (keys d) :let [d2 (d k)] q (keys d2)] [[k q] (d2 q)])\n      (apply concat)\n      (apply hash-map)))","user":"4e8a170c535d3e98b802328f"},{"code":"(fn [hm]\n  (apply hash-map (apply concat(for [x (keys hm) y (hm x)]\n        [[x (key y)] (val y)] ))))","problem":146,"user":"53219cece4b09d4e7a9b54b7"},{"code":"(fn [h]\n  (into {}\n    (for [[k v] h \n          [k2 v2] v]\n      [[k k2] v2])))","problem":146,"user":"4db1b3951254ad5b4805fa6f"},{"code":"(fn [m] (apply merge (for [x m] (let [y (second x)] (if (map? y) (apply merge (for [a y] (hash-map (vector (first x) (first a)) (second a)))))))))","problem":146,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn f [m]\r\n  (into {}\r\n  (for [[k v] m\r\n        [k2 v2] v]\r\n    [[k k2] v2])))","problem":146,"user":"50464831e4b011c5dfee771f"},{"problem":146,"code":"(fn trees-into-tables [xs]\n  (apply hash-map\n         (apply concat\n                (apply concat\n                       (for [k (keys xs)]\n                         (for [v (xs k)]\n                           (list [k (first v)] (second v))))))))","user":"53c126fce4b00fb29b22125b"},{"code":"(fn [m]\n  (into {} (for [i (keys m)\n                 j (keys (m i))]\n             {[i j] ((m i) j)})))","problem":146,"user":"52736ca1e4b03e8d9a4a747e"},{"problem":146,"code":"(fn [tree]\n  (into {} (for [k1 (keys tree)\n                 k2 (keys (get tree k1))]\n             [[k1 k2] (get-in tree [k1 k2])])))","user":"51b76227e4b0d906fcd71d35"},{"problem":146,"code":"(fn [m]\n    (into {} (for [k (keys m)\n                   :let [vh (m k)]\n                   :when (map? vh)\n                   :let [vk (keys vh)]\n                   v vk \n                   ] [[k v] (vh v)])))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":146,"code":"#(apply merge (for [m % v (val m)] {(vector (key m) (key v)) (val v)}))","user":"573ce277e4b05c31a32c080b"},{"code":"#(into {} (for [[i m] %, [j v] m] [[i j] v]))","problem":146,"user":"4f6160a7e4b0defedf855fbe"},{"problem":146,"code":"(fn tree-to-table [t]\n   (apply merge (for [[k v] t\n          [k2 v2] v]\n      {[k k2] v2}\n      )) \n   )","user":"5ee4b2e6e4b029a2061bbe90"},{"problem":146,"code":"#(apply merge (for [[k v] % [k2 v2] v] (hash-map [k k2] v2)))","user":"5dc98501e4b02f9375f4e1e6"},{"problem":146,"code":"#(into {} (for [[a av] % [b bv] av] [[a b] bv]))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":146,"code":"(fn [kms]\n  (->> (for [[k m] kms\n             [sk v] m]\n         [[k sk] v])\n       (into {})))","user":"5412ef7ee4b01498b1a719da"},{"code":"#(into {}\n  (for [[x y] % \n        [a b] y]\n  [[x a] b]))","problem":146,"user":"4f01c938535dcb61093f6a39"},{"code":"(fn [m]\n  (reduce conj\n    (for [x m y (second x)]\n      {[(first x) (first y)] (second y)})))","problem":146,"user":"4fb1325de4b081705acca276"},{"problem":146,"code":"(fn [m]\n  (into {} (for [k1 (keys m)\n        k2 (keys (get m k1))]\n    [[k1 k2] (get-in m [k1 k2])])))","user":"5f93529ae4b0715f5002d7bc"},{"problem":146,"code":"#(->> (for [[k v] %] (apply concat (for [[a b] v] [[k a] b]))) (apply concat) (apply hash-map))","user":"534d1173e4b084c2834f4a98"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k v] m\n              [sk sv] v]\n          [[k sk] sv])))","user":"58ec1e63e4b056aecfd47d54"},{"code":"(fn my-flat [tree]\n  (let [get-seq (fn get_seq [tm]\n                  (for [ [a m] tm]\n                    (for [ [b c] m]\n                      [ [a b] c])))]\n    (let [makemaps (fn makemaps [mapentrylist]\n                      (map #(into {} %) mapentrylist))]\n      (reduce  #(merge %1 %2) (makemaps (get-seq tree))))))","problem":146,"user":"5224a46ce4b01819a2de42e5"},{"problem":146,"code":"(fn [m]\n  (into {} \n        (for [[k r] m\n              [l v ] r]\n              [[k l] v])))","user":"5460f59ce4b01be26fd74695"},{"problem":146,"code":"(fn [ns] (letfn [(hf [ms] (for [x ms] \n                             (let [k (key x) v (val x)] (for [y v] {[k (key y)] (val y)} )\n                           )  )\n                 )]\n           \n     (into {} (reduce concat [] (hf ns)))\n     )\n )","user":"59ff9424e4b01bb0ae8afd24"},{"problem":146,"code":"#(apply merge (flatten (for [[k v] %]\n   (if (map? v)\n     (map (fn [[sk sv]] {[k sk] sv}) v)\n     {k v}))))","user":"5d02fe44e4b0cc9c915881c0"},{"code":"#(into {} (for [[s t] %, [u v] t] [[s u] v]))","problem":146,"user":"4f7431d2e4b044e54cd9a8f7"},{"code":"(fn [map]\n  (into {}\n        (for [x map\n              y (second x)]\n          {[(first x)\n            (first y)]\n           (second y)})))","problem":146,"user":"5014754de4b094324338f8e5"},{"problem":146,"code":"(fn [m]\n  (letfn [(flat-map [m path]\n            (apply concat (for [[k v] (seq m)]\n                            (if (map? v)\n                              (flat-map v (conj path k))\n                              [(conj path k) v]))))]\n    (apply hash-map (flat-map m []))))","user":"55702081e4b09a3098a52529"},{"problem":146,"code":"(fn [m]\n   (into {} (for [k (keys m) in-k (keys (get m k))]\n                                             [[k in-k] (get (get m k) in-k)])))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn [a] (into {} (for [i a j (a (key i))] [[(key i) (key j)] (val j)])))","problem":146,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn f [m]\n  (apply hash-map \n    (apply concat (for [i (keys m)\n                        j (keys (m i))]\n                        (list [i j] ((m i) j))))))","problem":146,"user":"4facd2fae4b081705acca22f"},{"code":"(fn [m]\n  (let [km (for [k (keys m)] (conj [k] (keys (m k))))\n        keyfn (fn [k] (for [x (second k)] [(first k) x]))\n        nks (mapcat keyfn km)\n        valfn (fn [[a b]] ((m a) b))\n        nmc (for [nk nks] [nk (valfn nk)])]\n    (into {} nmc)))","problem":146,"user":"5133e51ae4b0d7a043de8cf6"},{"code":"(fn table [tree]\n  (reduce (partial apply assoc) {}\n    (for [[k1 sub] tree, [k2 v] sub]\n      [[k1 k2] v])))","problem":146,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":146,"code":"(fn [col] \n  (into {}\n        (for [[k v] col\n              [vk vv] v]\n          (vec [[k vk] vv]))))","user":"54b67463e4b05787c3b163bc"},{"problem":146,"code":"(fn [mm] (apply merge (for [ a mm b (val a)]\n           \t  {[(key a) (key  b)] (val b)} )))","user":"564127a9e4b08d4f616f5ef3"},{"problem":146,"code":"(fn [mapping]\n   (into {} (for [[a b] mapping\n                  [c d] b]\n              {[a c] d})))","user":"5aef6084e4b0cc2b61a3bc34"},{"problem":146,"code":"(fn [m]\n  (into (hash-map)\n      (for [x (keys m)\n            y (keys (get m x))]\n        \n           [[x y] (get-in m [x y])])\n  ))","user":"54c779bee4b045293a27f63b"},{"code":"(fn [x]\n  (reduce into  {}  (for [k (keys x) ki (keys (x k))]\n                     (hash-map (vector k ki) ((x k ) ki) )\n                     ))\n  )","problem":146,"user":"4ec4d723535dcc7ae8597d65"},{"code":"(fn [m]\n  (reduce (fn [x y]\n            (apply assoc x y))\n          {}\n          (for [[k1 v1] m [k2 v2] v1]\n            [[k1 k2] v2])))","problem":146,"user":"531d34cfe4b08068f379edac"},{"code":"(fn trees-to-tables\n  [m]\n  (apply merge (for [[k mm] m]\n    (apply merge (for [[mmk mmv] mm]\n                   {[k mmk] mmv})))))","problem":146,"user":"52f3af46e4b05e3f0be25f14"},{"problem":146,"code":"(fn [m]\n  (->> (for [ [k v] m\n         [x y] v ]\n        [[k x] y])\n      (into {})))","user":"5aae9d7ce4b073f177442587"},{"problem":146,"code":"(fn [seq]\n  (into {}\n        (reduce concat \n                (map (fn [[k1 child]] \n                       (map (fn [[k2 v]] \n                              [[k1 k2] v])\n                            child))\n                     seq))))","user":"4f29d9abe4b0d6649770a034"},{"code":"(fn [params]\n  (reduce into\n          (flatten\n           (for [[i m] params]\n             (for [[k v] m]\n               {[i k] v})))))","problem":146,"user":"4fdbc075e4b05e33b9224f61"},{"code":"#(into {} (for [[k m] % [x y] m] [[k x] y]))","problem":146,"user":"4dae0510c9a9d6ed4b99dc57"},{"code":"(fn trees-into-tables [m]\n  (letfn [(aux [m key-acc]\n               (if (map? m)\n                 (mapcat #(aux (get m %) (conj key-acc %))\n                         (keys m))\n                 [key-acc m]))]\n    (apply hash-map (aux m []))))","problem":146,"user":"52381b2ae4b0fae3832e99ef"},{"code":"#(reduce into (for [k1 (keys %) k2 (keys (% k1))] {[k1 k2] (get-in % [k1 k2])}))","problem":146,"user":"4ea365e2535d7eef308072c5"},{"code":"#(into {} \n  (for [[k v] %, [mk mv] v] [[k mk] mv]))","problem":146,"user":"4fbd760ee4b081705acca305"},{"code":"(fn [coll]\n  (into {}\n    (for [[k v] coll\n          [k' v] v]\n      [[k k'] v])))","problem":146,"user":"5213d7aae4b0961f15ac4d72"},{"problem":146,"code":"#(into {} \n  (apply concat \n   (for [[k1 v1] %]\n     (for [[k2 v2] v1] [[k1 k2] v2]))))","user":"5df08767e4b093ff717275bf"},{"problem":146,"code":"(fn trees-into-tables\n  [m]\n  (->> (for [[k v] m]\n         (for [[k2 v2] v]\n           {[k k2] v2}))\n       (apply concat)\n       (apply merge-with into)))","user":"547bf82de4b0c51c1f4d72e1"},{"code":"(fn [m] (apply hash-map \n  (apply concat (for [[k1 v1] m [k2 v2] v1]\n                     [[k1 k2] v2]))))","problem":146,"user":"4e14108c535d04ed9115e7dd"},{"problem":146,"code":"(fn [mp] (apply merge (for [[k v] mp [ik iv] v] {[k ik] iv})))","user":"5d9e7971e4b000c986472bc1"},{"problem":146,"code":"#(->> (for [[k v] %\n                 [vk vv] v]\n                  [[k vk] vv])\n                vec\n                (into {}))","user":"5defc177e4b093ff717275af"},{"problem":146,"code":"(fn trees-to-tables [m]\n  (into {} (for [x (keys m)\n                 y (keys (m x))]\n             (assoc {} [x y] ((m x) y)))))","user":"572ea970e4b0cd1946bd0f89"},{"problem":146,"code":"(fn [m]\n  (->> (for [k (keys m)]\n         (for [k2 (keys (get m k))]\n           [[k k2] (get-in m [k k2])]))\n       (apply concat)\n       (into {})))","user":"5cf6522be4b0b71b1d808a58"},{"problem":146,"code":"(fn\n   [set]\n   (->> (for [[set1 set2] set] (map #(vector [set1 (first %)] (second %)) set2))\n        (apply concat)\n        (into {})))","user":"5bbc0ddfe4b0a20761a2361e"},{"code":"(fn flathash [m]\n  (reduce conj (for [ms m, kvs (val ms)] { [(key ms) (key kvs)] (val kvs) } )))","problem":146,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"#(into {} (for [[k m] %\n                [x v] m]\n            [[k x] v]))","problem":146,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":146,"code":"#(apply merge (for [x (keys %) y (keys (% x))]  {[x y] ((% x) y)}))","user":"56c08696e4b060a8e693e3aa"},{"problem":146,"code":"(fn ttt ([m] \n           (into {} (for [[k v] (seq m) [p f] v] [[k p] f]))))","user":"5900d5cde4b0438e51c2d02e"},{"problem":146,"code":"#(into {}\n          (for [entry % subentry (second entry)]\n            [[(first entry) (first subentry)] (second subentry)]))","user":"531bf76fe4b08068f379ed96"},{"code":"(fn [m] \n  (into {}\n    (for [ [k1 v1] m [k2 v] v1] \n         [[k1 k2] v])))","problem":146,"user":"4e6dc95a535d5021c1a895f1"},{"problem":146,"code":"(fn treeToTable [i] (letfn [(kw [i1] (for [x (keys i1)]  (map #(vector x %1) (keys (get i1 x)))))\n                            (kv [i1] (for [x (keys i1)]  (vals (get i1 x))))] (zipmap (mapcat identity (kw i)) (mapcat identity (kv i)))))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn [in] (into {} \n               (for [[k v] in\n                     [k2 v2] v]\n                 [[k k2] v2])))","problem":146,"user":"501d34f6e4b066e56b9d0b1e"},{"problem":146,"code":"#(into {} (flatten (map (fn [[k1 v1]] (map (fn [[k2 v2]] {[k1 k2] v2}) v1)) %)))","user":"57ca338de4b05aa3c4741d37"},{"code":"#(into {} (for [[k1 v1] % [k2 v2] v1]\n            [[k1 k2] v2]))","problem":146,"user":"4dbb0b6c535d1e037afb21b0"},{"problem":146,"code":"(fn [m]\n  (reduce conj (for [[k v] m [k2 v2] v] {[k k2] v2}))\n )","user":"6004c750e4b074f607df6645"},{"code":"#(reduce (fn [a b](assoc a (first b) (second b))) \n        {}\n        (mapcat (fn [x]\n                  (let [[k v] x]\n                    (mapcat (fn [x]\n                              (let [[kin vin] x]\n                                {[k kin] vin}\n                                )) \n                            v)))\n                %))","problem":146,"user":"509b152be4b0412cdea6eb1e"},{"problem":146,"code":"(fn [m] (apply merge (for [[k1 v1] m\n                            [k2 v2] v1]\n                        {[k1 k2] v2})))","user":"59419bdfe4b060784b3b78f7"},{"code":"; all these samples have two level trees - thus this could be solved much easier with for\n#(apply merge (for [[k1 v1] % [k2 v2] v1] {[k1 k2] v2}))\n\n; robust solution - any level trees\n;(fn walk\n;  ([m] (walk m [] {}))\n;  ([m p res]\n;      (reduce \n;        (fn [result n] \n;          (into result\n;           (let [\n;            [k v] n, \n;             pn (conj p k)]\n;            (if (map? v)\n;             (walk v pn result)\n;             {pn v}))))\n;           res m)\n;      )\n;   )","problem":146,"user":"50de11b2e4b061dbdced7217"},{"code":"(fn [a] (reduce\r\n  merge\r\n    (flatten (for [[k v] a] (for [[k1 v1] v] (hash-map [k k1] v1))))))","problem":146,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":146,"code":"(fn [maps]\n\t(apply hash-map (mapcat identity (for [[k a] maps] (mapcat #(list [k (first %)] (second %)) a))))\n)","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":146,"code":"(fn[m]\n  (into {} (for [[k v] m\n        [kk vv] v]\n    [[k kk]\tvv])))","user":"53e241a6e4b036ad0777e3f0"},{"code":"(fn [m] \n  (into {}\n    (for [[k submap] m, [sk v] submap]\n      [[k sk] v])))","problem":146,"user":"4ed188c8535d44c135fd68cf"},{"code":"#(into {} (for [[a b] %\n        [c d] b]\n    [[a c] d]))","problem":146,"user":"536b2048e4b0243289761eb7"},{"problem":146,"code":"#(into {} (for [[ok ov] %\n                [ik iv] ov]\n            {[ok ik] iv}))","user":"575fbe58e4b08062f99a4e87"},{"problem":146,"code":"(fn flatmoh-lean2\n  [moh]\n  (reduce\n   (fn [m [kk kv]]\n     (conj m\n           (mapcat\n            (fn [[k v]] {[kk k] v}) kv)))\n   {} moh))","user":"5b008bcae4b0cc2b61a3bd3d"},{"code":"#(into {} (for [k (keys %) j (keys (% k))] [[k j] ((% k) j)]))","problem":146,"user":"52160dbee4b0bf4bffd29cb3"},{"code":"#(into {} (for [k (keys %), v (keys (% k))] [[k v] ((% k) v)]))","problem":146,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn [x]\n  (apply merge\n         (for [k1 (keys x)\n             k2 (keys (x k1))]     \n           {[k1 k2] (get-in x [k1 k2])})))","problem":146,"user":"4f2e0369e4b0d6649770a064"},{"code":"(fn [input]\n  (into\n   {}\n   (apply\n    concat\n    (for [a input]\n      (for [b (second a)]\n        [[(first a) (first b)] (last b)])))))","problem":146,"user":"528bba38e4b0239c8a67aea9"},{"code":"#(into {} (for [[k v] %\n       [l w] v]\n  [[k l] w]))","problem":146,"user":"4e96557d535dbda64a6f6b43"},{"code":"#(into {} (for [[x y] %] (into {} (for [[z w] y :let [foo {[x z] w}]] foo))))","problem":146,"user":"4f5599dfe4b0a7574ea71806"},{"problem":146,"code":"(fn [x] \n  (into {} (apply concat (for [[k v] x]\n    (for [[k2 v2] v]\n      [[k k2] v2]\n    ))))\n  )","user":"57b8b008e4b0fbc9809a27e6"},{"code":"#(into {} (for [[k v] % [i w] v] [[k i] w]))","problem":146,"user":"52d7a930e4b09f7907dd1379"},{"problem":146,"code":"(fn [m]\n  (into {} (map\n            (fn [[k v]]\n              (into {} (map (fn [[ki vi]]\n                              [[k ki] vi] ) v)))\n            m))\n  )","user":"583048d9e4b051871117c007"},{"problem":146,"code":"(fn tt [xs]\n  (let [ys (for [ x xs\n                 k2 (last x) :let [k1 (first x)]]\n             {[k1 (first k2)] (last k2)}\n             )]\n    (reduce merge ys)\n    )\n  )","user":"54d70f40e4b0a52adc2e2027"},{"code":"(fn [m] (into {}\n                       (for [k1 (keys m)\n                             k2 (keys (get m k1))]\n                         {[k1 k2] (get-in m [k1 k2])})))","problem":146,"user":"4e5f034b535d8a8b8723a2d9"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k v] m\n              [k1 v1] v]\n          (vec [[k k1] v1]))))","user":"564da567e4b0284900eef682"},{"problem":146,"code":"(fn key-path [m]\n     (into {}\n           (mapcat (fn [[x y]]\n                     (if (map? y)\n                       (map (fn [[a b]] [(cons x a) b]) (key-path y))\n                       [[[x] y]])) \n                   m)))","user":"4ddb696b535d02782fcbe9fa"},{"problem":146,"code":"(fn xf-maps [c]\n  (->> (for [k (keys c)]\n         (let [m (get c k)]\n           (for [k2 (keys m)]\n             (let [v (get m k2)]\n               {[k k2] v}))))\n       (flatten)\n       (reduce merge)\n       ))","user":"56f4cedce4b046a417f92063"},{"problem":146,"code":"#(into {} (for [[x y] %] (into {} (for [[u v] y] {[x u] v}))))","user":"534e4a29e4b084c2834f4ab0"},{"problem":146,"code":"(fn [m] \n  (apply hash-map \n         (mapcat (fn [[k v]]\n                   (if (map? v)\n                     (mapcat (fn [[kn vn]] \n                               [[k kn] vn]) v)\n                     [[k] v])) m)))","user":"4f0f01c0535d0136e6c22329"},{"problem":146,"code":"(fn [hs]\n   (apply merge\n     (filter #(not= :not-found (second (first %)))\n       (for [l1 (keys hs)\n             l2 (apply concat (map keys (map hs (keys hs))))]\n             {[l1 l2] (get-in hs [l1 l2] :not-found)}\n         ))))","user":"588906a9e4b0f1effa3b772a"},{"problem":146,"code":"(fn [m]\n  (apply merge (map #(hash-map % (get-in m %)) (for [k1 (keys m) k2 (keys (m k1))] [k1 k2]))))","user":"52ab51c4e4b0c58976d9ac73"},{"code":"#(into {} (mapcat (fn [[k v]] (for [[k1 v1] v] [[k k1] v1])) %))","problem":146,"user":"4fbf2818e4b081705acca317"},{"problem":146,"code":"#(into {} (for [[a b] % [c d] b] [[a c] d] ))","user":"5281a445e4b0757a1b17143a"},{"code":"(fn test146\n  [m]\n  (into {}\n        (for [[k1 v1] m\n              [k2 v2] v1]\n          [[k1 k2] v2])))","problem":146,"user":"50b0cffae4b009df37c708c5"},{"code":"#(into {} (for [[a b] %, y b] [[a (first y)] (second y)]))","problem":146,"user":"5065faf9e4b0313a384e5645"},{"code":"#(into {}\n  (for [[k v] % [l w] v]\n       [[k l] w]))","problem":146,"user":"4e5fe31a535d8ccf87e9fe50"},{"code":"#(into {} (for [[k1 v1] % \n                 [k2 v2] v1] \n                   [[k1 k2] v2]))","problem":146,"user":"502904e0e4b0feaf66e22fad"},{"problem":146,"code":"#(apply assoc {} (mapcat (fn [[k v]]\n                   (mapcat (fn [[i j]] [[k i] j]) v)\n                   ) %))","user":"5921a080e4b09b4ee5954c77"},{"problem":146,"code":"(fn flat-map [m]\n  (into {} \n        (for [[k v] m\n              [k' v'] v]\n          [[k k'] v'])))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":146,"code":"(fn flatm [m] (apply merge\n                (for [k1 (keys m) k2 (keys (m k1))]\n                  {[k1 k2] ((m k1) k2)})))","user":"57dafe97e4b0bd073c20241c"},{"problem":146,"code":"#(->>\n      (for [k (keys %)]\n        (for [k2 (keys (get % k))]\n          [[k k2] (get-in % [k k2])]\n          )\n        )\n      (apply concat)\n      (into {})\n      )","user":"596d630ae4b069c0a1a19846"},{"code":"#(into {} \n      (mapcat \n       (fn [[k1 v1]] \n         (map (fn [[k2 v2]] \n                [[k1 k2] v2]) \n              v1)) \n     %))","problem":146,"user":"515cf9b5e4b00901442db1d4"},{"problem":146,"code":"(fn f \n  ([xs] (reduce merge {} (flatten (f [] xs))))\n  ([path xs] (if (map? xs) \n    (for [x xs] (f (conj path (first x)) (last x)))  \n    {path xs})))","user":"5933b736e4b072a2710fd05d"},{"code":"(fn [mp]\n  (into {} (for [[k v] mp\n        [vk vv] v]\n    [[k vk] vv])))","problem":146,"user":"5271605ae4b03e8d9a4a73ed"},{"code":"(fn f [m]\n  (into {}\n    (for [[k v] m\n          [x y] v]\n      [[k x] y])))","problem":146,"user":"50a83315e4b054305ba5a830"},{"code":"(fn [m]\n  (->> (for [[k1 submap] m\n             [k2 v] submap]\n         [[k1 k2] v])\n       (into {})))","problem":146,"user":"5080a697e4b01a93d3f38e49"},{"problem":146,"code":"#(reduce (fn [acc kv] (assoc acc (first kv) (second kv))) \n         {} \n         (for [[k m] % [k1 v] m] [[k k1] v]))","user":"55c20bd0e4b0e31453f64972"},{"code":"#(apply merge \n   (for [[k1 v1] % [k2 v2] v1]\n     {[k1 k2] v2}))","problem":146,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":146,"code":"#(into {} (for [[ky vl] % [k2 v2] vl] [[ky k2] v2]))","user":"57210e8ee4b0c5bde472c0a8"},{"code":"(fn [coll]\n  (into {}\n        (for [[k v] coll\n              [vk vv] v]\n          (vec [[k vk] vv]))))","problem":146,"user":"4f437751e4b0d7d3c9f3fd20"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (apply concat\n      (for [[k1 v] m]\n        (if (associative? v)\n          (for [[k2 v] v]\n            [[k1 k2] v])\n          [[k1 v]])))))","user":"573d58c8e4b05c31a32c0811"},{"problem":146,"code":"#(reduce (fn[acc i]          \n          (into {} (for [k (second i)]\n            (assoc acc (vector (first i) (first k)) (second k))))) {} %)","user":"52bc6cb2e4b07a9af57922f5"},{"code":"(fn [m]\n  (let [s (for [i (keys m),\n                j (keys (get m i))]\n            [[i j] (get (get m i) j)])]\n    (apply conj {} s)))","problem":146,"user":"4ee9d697535d93acb0a66895"},{"code":"#(into {} \n (for [ [a h] % [b v] h] \n   [[a b] v]))","problem":146,"user":"4e860e85535db62dc21a62f1"},{"code":"(fn flatten [hm]\n  (apply hash-map\n         (apply concat\n           (for [k1 (keys hm)\n                 k2 (keys (hm k1))]\n             (list [k1 k2] ((hm k1) k2))))))","problem":146,"user":"4e9a1512535dbda64a6f6b6e"},{"problem":146,"code":"#(into {} (for [[i a] % [j b] a] [[i j] b]))","user":"4fb1d7ace4b081705acca281"},{"problem":146,"code":"(fn ff[m]\n  (apply merge \n    (for [x  m \n          :let [i (key x)\n                vs (vals (val x))\n                ks (keys (val x))]]\n          (zipmap (map (partial vector i) ks) vs)\n  )))","user":"585a7cb2e4b0f14aab7c874e"},{"code":"#(into {} (apply concat (for [[k v] %]\n                          (for [[a b] v]\n                            [[k a] b]))))","problem":146,"user":"4e7f32ee535db966e863cc3a"},{"problem":146,"code":"(fn arbol2\n  [s]\n  (into {}\n        (apply concat\n               (for [[k v] s]\n                 (map #(vector [k (first %)] (second %)) v)))))","user":"57fedf07e4b0d3187e9009dc"},{"problem":146,"code":"(fn\n  [m]\n  (let [f (fn [m]\n            (let [k (first (keys m))\n                  v (vals m)\n                  kv (apply concat (map keys v))\n                  vv (apply concat (map vals v))]\n              (map (fn [x y z]\n                     [[x y] z]) (repeat k) kv vv)))]\n    (->> (concat (map key m) (map val m))\n         (partition 2)\n         (#(if (= 1 (count %)) (partition-all 1 (first %)) %))\n         (apply map (fn [k v] {k v}))\n         (map f)\n         (apply concat)\n         (into {}))))","user":"55bf6dbce4b01b9910ae2a12"},{"problem":146,"code":"(fn [nested-map] \n  (into {} \n        (for [[outer-key inner-map] nested-map \n              [inner-key inner-val] inner-map] \n          [[outer-key inner-key] inner-val])))","user":"54bd3aefe4b0ed20f4ff6edb"},{"problem":146,"code":"(fn flatten-map [map]\n  (into (sorted-map) \n    (for [[k1 v1] map\n      [k2 v2] v1]\n      [[k1 k2] v2])))","user":"5ac91d90e4b0e27600da77bd"},{"problem":146,"code":"(fn [t]\n (into {} (for [[x y] t [k v] y] [[x k] v])))","user":"549c1713e4b0f3d1d8e70f82"},{"code":"#(into {}\n        (for [x (keys %)  [k v] (% x)] \n          [[x k] v]))","problem":146,"user":"515896f2e4b059418b97f0a8"},{"code":"(fn [tree]\n  (into {} \n    (for [[key value] tree, \n          [sub-key sub-value] value] \n      [[key sub-key] sub-value])))","problem":146,"user":"50052fd0e4b0678c553fc45d"},{"code":"#(into {} (for [[a m] % [b v] m] [[a b] v]))","problem":146,"user":"4eecdd66535d93acb0a668b9"},{"code":"(fn [v] (apply merge (for [x (keys v) y (v x)] {[x (key y)] (val y)})))","problem":146,"user":"4e6e2ac4535d5021c1a895ff"},{"code":"#(into {} (mapcat (fn [[k v]]\n                    (for [x [k] y (keys v)]\n                      {[x y] (v y)}))\n                  %))","problem":146,"user":"536e0930e4b0fc7073fd6e66"},{"problem":146,"code":"(fn [some-map]\n    (into {}\n        (for [[ky vl] some-map\n              [ky2 vl2] vl]\n          (vec [[ky ky2] vl2]))))","user":"5e950178e4b0fbed045a3801"},{"problem":146,"code":"#(into {} (for [[k v] %\n      [k2 v2] v] [[k k2] v2]))","user":"524025bce4b0ad64fa01030f"},{"code":"(fn [tm]\n  (into {} (for\n             [\n              f tm\n              s (second f)\n              ] [[(first f) (first s)] (second s)])))","problem":146,"user":"4f05a9cf535dcb61093f6bfc"},{"code":"#(apply hash-map\n         (apply concat\n                (for [[k1 m] %\n                      [k2 v] m]\n                  [[k1 k2] v])))","problem":146,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":146,"code":"#(into {} \n        (for [[parent-key m] %\n              [child-key v] m]\n          [[parent-key child-key] v]))","user":"551bdefde4b07993ea3788d7"},{"code":"#(apply merge\n  (for [[k1 m] % [k2 v] m] {[k1 k2] v}))","problem":146,"user":"4ed94d69535d10e5ff6f5303"},{"problem":146,"code":"(fn [map-of-maps]\n  (into {}(for [[outer-key maps] map-of-maps\n                [inner-key inner-value] maps]\n            [[outer-key inner-key] inner-value])))","user":"5f79bff2e4b02876ed9fd0ca"},{"code":"(fn [x]\n  (into {}\n   \t\t(for [[k v] x\n              [kk vv] v]\n          {[k kk] vv})))","problem":146,"user":"4f189b42535d64f60314645d"},{"code":"(fn [tree]\n  (let [paths (mapcat #(map (partial vector %) (keys (tree %))) (keys tree))]\n    (into {} (for [p paths] [p (get-in tree p)]))))","problem":146,"user":"51e00020e4b01188f0627534"},{"problem":146,"code":"(fn tree-table [mp]\n  (into {}\n        (for [[k v] mp\n              [vk vv] v]\n          (vec [[k vk] vv]))))","user":"575ebba3e4b08062f99a4e70"},{"code":"(fn [a-map]\n  (reduce into {} (map (fn [m]\n                         (let [k (key m)\n                               v (val m)\n                               path-to (partial #(hash-map (vec (list %1 %2)) %3) k)]\n                           (map (fn [mm]\n                                  (let [kk (key mm)\n                                        vv (val mm)]\n                                    (path-to kk vv))) v))) a-map)))","problem":146,"user":"5361a4f2e4b0243289761e47"},{"problem":146,"code":"(fn foo [m] (into {} (for [[k v] m\n                             [k2 v2] v] [[k k2] v2])))","user":"5839f079e4b089d5ab817d48"},{"problem":146,"code":"(fn [the-map]\r\n  (->>\r\n    (for [[k1 v1] the-map, [k2 v2] v1] [[k1 k2] v2])\r\n    (apply concat)\r\n    (apply hash-map)))","user":"555bd27ae4b0b056612e2244"},{"code":"(letfn [(f [m]\n  (mapcat \n    (fn [[k v]]\n      (if (map? v)\n        (map (fn [[l w]] [(cons k l) w]) (f v))\n        [[[k] v]]))\n    m))]\n  #(into {} (f %)))","problem":146,"user":"4e5411e8535d8a8b8723a279"},{"code":"(fn xflat [m]\n  (reduce  ( fn [c e] (reduce (fn [c1 e1] (assoc c1 (first e1) (second e1) ))  c  e))\n\t\t   {}\n\t(for [x (keys m)]\n\t  (for [y (keys (get m x))]\n\t\t[[x y] (get (get m x) y)] ))))","problem":146,"user":"5101192ae4b0bef64c30e266"},{"problem":146,"code":"(fn [nm] (into {} (for [[x y] nm [w z] y] {[x w] z})))","user":"57b60e46e4b0fbc9809a27b6"},{"code":"(fn into_table [tree]\n  (apply merge \n         (for [x (keys tree)]\n           (apply merge\n                  (for [y (keys (get tree x))]\n                    {[x y]  (get (get tree x) y)} \n                    )   \n                  )   \n           )   \n         )   \n  )","problem":146,"user":"5228f870e4b0186687e23a98"},{"problem":146,"code":"#(apply merge (apply concat (for [s (keys %)] (for [v (keys (% s))] {[s v] ((% s) v)}))))","user":"545801f6e4b01be26fd74615"},{"problem":146,"code":"(fn [m]\n (apply merge \n        (for [[k1 v1] m\n             [k2 v2] v1]\n          {[k1 k2] v2})))","user":"545e9cf1e4b01be26fd7467f"},{"code":"(fn [m]\n    (into {} (for [k1 (keys m)\n          k2 (keys (m k1))]\n      [[k1 k2] (get-in m [k1 k2])])))","problem":146,"user":"5392b849e4b0b51d73faaeb1"},{"problem":146,"code":"(fn f \n\t[d]\n\t(into {}\n\t(for [[x y] d \n\t\t  [k v] y] \n\t\t  [[x k] v])))","user":"54a11042e4b09f271ff37c49"},{"problem":146,"code":"#(into {}\n   (for [[k v] %\n        [k2 v2] v]\n     [[k k2] v2]))","user":"4f85a75ce4b033992c121c48"},{"code":"(fn [m] \r\n  (into {} \r\n        (for [[k v] m [kk vv] v] [[k kk] vv])))","problem":146,"user":"4f1fd734535d64f6031464a5"},{"problem":146,"code":"(fn [m]\n    (into {}\n          (for [[k v] m\n                [x y] v]\n            [[k x] y])))","user":"5c58736be4b01df32ab73247"},{"problem":146,"code":"#(apply merge\n        (for [k1 (keys %)\n              k2 (keys (% k1))]\n          {[k1 k2] (get-in % [k1 k2])}))","user":"576e607ae4b0979f89651579"},{"problem":146,"code":"#(->>\n   %\n   (map (fn [[k v]]\n          (map (fn [[sk sv]] [[k sk] sv]) v)))\n   (reduce concat)\n   (into {}))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":146,"code":"(fn map2table [m]\n  (into {} (for [k (keys m)\n        v (m k)]\n        [[k (key v)] (val v)])))","user":"5c950334e4b048ec896c5a44"},{"problem":146,"code":"(fn [x] (apply merge (for [v x\n                     z (second v)]\n                 (hash-map [(first v) (first z)] (second z)))))","user":"55b28b57e4b01b9910ae296c"},{"code":"(fn [m] \n  (reduce #(apply assoc %1 (first %2))\n          {}\n          (flatten (for [[x y] m]\n                     (for [[z k] y]\n                       {[x z] k})))))","problem":146,"user":"523288fee4b035af41902a88"},{"problem":146,"code":"(fn [m]\n(reduce-kv\n(fn [table root branch]\n  (reduce (fn [t [node leaf]] (assoc t (vector root node) leaf)) table branch))\n{}\nm))","user":"5b72b36ce4b047b03b2036a9"},{"code":"(fn [x]\n  (apply hash-map\n         (apply concat \n          (for [[k v] x]\n            (mapcat #(list (vector k (first %)) (last %)) v)))))","problem":146,"user":"53523ae0e4b084c2834f4aee"},{"problem":146,"code":"(fn[l](->> (for [[k v] l]\n       (do (prn k v)\n           (for [[k2 v2] v]\n             (do (prn k v k2 v2)\n                 [[k k2] v2])\n             ))\n       )\n     \n     (map #(into {} %))\n     (apply merge)\n     ))","user":"5ed8a12fe4b0c7845d86b0d7"},{"problem":146,"code":"(comp (partial into {})\n      #(for [[k m] % [k' v] m] [[k k'] v]))","user":"521ed5b4e4b0e6c71e0c0bc0"},{"code":"(fn table\n  [t]\n  (into {}\n        (for [[k1 v1] t [k2 v2] v1]\n          [[k1 k2] v2])))","problem":146,"user":"4f8bbb27e4b02e764a0a5182"},{"problem":146,"code":"(fn prob146 [t]\n   (apply merge   (for [[k v] t\n         [k2 v2] v]\n     {[k k2] v2}\n     ))\n   )","user":"4ebbff41535dfed6da9c6d78"},{"problem":146,"code":"(fn [n]\n  (into {}\n        (apply concat\n               (for [[m s] n]\n                 (map #(vector [m (first %)] (second %)) s)))))","user":"5f7e91c8e4b0c071e6c840d8"},{"code":"#(into {} (for [[k v] % [k1 v1] v] [[k k1] v1]))","problem":146,"user":"4ee6400c535d93acb0a6685b"},{"problem":146,"code":"(fn tree-to-table [tree]\n  (apply merge \n    (reverse \n      (for [x (keys tree) y (keys (get tree x))] {[x y] (get-in tree [x y])}))))","user":"5578f292e4b05c286339e08f"},{"problem":146,"code":"(fn trees-to-tables \n  ([a-map] (trees-to-tables a-map {}))\n  ([a-map res-map]\n   (let [first-key (first (keys a-map))\n         into-map (fn [res-map k1 b-map]\n                    (let [k2 (first (keys b-map))]\n                      (if (empty? b-map)\n                        res-map\n                        (recur (assoc res-map (conj [k1] k2) (b-map k2)) k1 (dissoc b-map k2)))))] \n   (if (empty? a-map)\n     res-map\n     (trees-to-tables (dissoc a-map first-key) (into-map res-map first-key (a-map first-key)))))))","user":"574e84e0e4b02ea114799243"},{"problem":146,"code":"#(into {} (for [[K V] % [k v] V] {[K k] v}))","user":"543366dde4b0b6b47310fcdf"},{"problem":146,"code":"#(reduce (fn [a b] (assoc a (first b) (second b))) {} (for [x % y (val x)] [[(key x) (key y)] (val y)]))","user":"53b2a7f8e4b047364c04449c"},{"problem":146,"code":"(fn trees-into-tables [m]\n  (into {} (for [x (keys m) [y z] (get m x)]\n             [[x y] z])))","user":"58327a08e4b089d5ab817c7c"},{"problem":146,"code":"(fn [m]\n  (into {}(for [x (keys m)\n              y (keys(m x))]\n          [[x y] (get-in m [x y])])))","user":"53e745a1e4b036ad0777e479"},{"problem":146,"code":"#(into {} (for [[k m] %\n                [j v] m]\n            [[k j] v]))","user":"57609d91e4b08062f99a4e9b"},{"code":"#(into {}\n  (for\n    [[k v] %\n     [k2 v2] v]\n    [[k k2] v2]))","problem":146,"user":"50657775e4b0deb876850599"},{"code":"(fn [m]\n  (into {}\n    (for [[ak av] m [bk bv] av] \n      [[ak bk] bv])))","problem":146,"user":"528652fbe4b0239c8a67ae14"},{"code":"(fn iter [key_v tree]\n    (apply merge (map \n                   (fn [[k v]] \n                     (if (map? v)\n                       (iter (conj key_v k) v)\n                       {(conj key_v k) v})) \n                   tree))) []","problem":146,"user":"51696ee7e4b03f62cda68ce8"},{"code":"(fn [m]\n  (reduce merge (for [[k1 v1] m [k2 v2] v1] {[k1 k2] v2})))","problem":146,"user":"4fa6a491e4b081705acca1bc"},{"code":"#(reduce into {} \n        \t(map (fn [[k v]] \n            \t   (map (fn [[k1 v1]] [[k k1] v1]) v))\n                 %))","problem":146,"user":"519ef784e4b087743fad2198"},{"problem":146,"code":"(fn[inputMap] \n   (reduce #(assoc %1 (first %2) (second %2)) {} \n       (for [inputKey (keys inputMap)\n        vals (get inputMap inputKey)]\n        (if (map? vals) \n            (list [inputKey] vals)\n            (list [inputKey (first vals)] (fnext vals))))))","user":"571172ece4b09c608db70446"},{"code":"(fn tree->table [tree]  \n   (->> (for [i (keys tree)\n              j (keys (tree i))]\n          [[i j] (get-in tree [i j])])\n        (apply concat)\n        (apply hash-map)))","problem":146,"user":"529e3a4fe4b04e0c58e87b92"},{"code":"#(into {} (for [x % y (val x)] {[(key x) (key y)] (val y)}))","problem":146,"user":"50336c6be4b0c6c1199c710f"},{"problem":146,"code":"#(into {} (for [[k1 kv] % [k2 v] kv] {[k1 k2] v}))","user":"564b495de4b0284900eef667"},{"code":"(fn [m] (into {} (for [[x y] m [u w] y] {[x u] w})))","problem":146,"user":"52f818a6e4b047fd55836fcc"},{"problem":146,"code":"(fn flat [arg]\n  (apply conj {}(for [[k v] arg\n        [vk vv] v]\n    [[k vk] vv]\n    ))\n  )","user":"525d490ae4b0cb4875a45d70"},{"problem":146,"code":"(fn pathmap\n   ([m] (pathmap [] m))\n   ([p,m]\n    (into {}\n          (apply concat\n                 (for [[k,v] m]\n                   (if (map? v)\n                     (pathmap (conj p,k) v)\n                     [ [(conj p,k),v] ]\n                     )\n                   )\n                 )\n          )\n    )\n   )","user":"562add6de4b00e49c7cb4834"},{"code":"(fn [m] (apply merge\n          (apply concat\n            (map\n              (fn [[k v]] (for [k1 [k] k2 (keys v)]\n                          {[k1 k2] (get-in m [k1 k2])}))\n              (seq m)))))","problem":146,"user":"4efd8b67535de96065cf5085"},{"problem":146,"code":"#(apply merge (for [x %\n                   y (second x)]\n               (hash-map [(first x) (first y)] (second y))))","user":"57ebbf3ae4b0bfb2137f5b66"},{"code":"(fn [x] \n  (reduce conj \n          (for [[k v] x]\n            (zipmap (map #(vector k %) (keys v)) (vals v)))))","problem":146,"user":"51823a97e4b0f2adb733651e"},{"problem":146,"code":"#(into {} (apply concat\n        (for [[k1 v1] %]\n          (for [[k2 v2] v1]\n            [[k1 k2] v2]))))","user":"5012da69e4b0c8732600222d"},{"problem":146,"code":"(fn flatmap2 [coll]\n  (letfn [(flatmap [k1 m]\n            (map (fn [[k2 v]] [[k1 k2] v]) m))]\n      (into {} (mapcat (fn [[k v]] (flatmap k v)) coll))))","user":"5c03e927e4b0bdcf453d167b"},{"problem":146,"code":"(fn penis-flattener [m] \n  (let [pre-pre-final (for [x m\n                        :let [y (second x)]]\n                    (for [z y]\n                      [[(first x) (first z)] (rest z)]))\n        pre-final (reduce into [] pre-pre-final)]\n                      pre-final\n              (reduce #(assoc %1 (first %2) (first (second %2))) {} pre-final)\n                      )\n    \n          \n)","user":"5ff676a9e4b06df49cee1497"},{"problem":146,"code":"(fn tree->table\n  ;\"Flattens a map.\"\n  [m]\n  (reduce (fn [acc [k v]]\n            (reduce (fn holdon [p [ke ve]]\n                      (assoc p [k ke] ve))\n                         acc (seq v))) {} m))","user":"5bbbcecee4b0a20761a23611"},{"code":"#(into {}\n          (for [[a b] %\n                [c d] b]\n            [[a c] d]))","problem":146,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":146,"code":"(fn [m]\n  (into {} \n   (for [x (keys m)\n         y (keys (m x))\n         :let [z (get-in m [x y])]]\n     [[x y] z])))","user":"5958cef6e4b066ee0a44af94"},{"problem":146,"code":"#(apply hash-map (apply concat\n                  (for [[k1 v1] % [k2 v2] v1]\n                    [[k1 k2] v2])))","user":"54b817eee4b0ed20f4ff6e93"},{"problem":146,"code":"#(into {} (for [[k   v] %\n                [k2 v2] v]\n            [[k k2] v2]))","user":"5a257747e4b07f18be40aa1f"},{"problem":146,"code":"#(apply merge (for [[k v] %, [sk sv] v]\n                {[k sk] sv}))","user":"5713c575e4b07c98581c3aab"},{"problem":146,"code":"(fn[mp](\n        into {}\n        (for\n           [[k v] mp [vk vv] v]\n           (vec [[k vk] vv])\n          )\n        ))","user":"6001460ce4b074f607df6611"},{"code":"(fn [m] (apply merge (flatten (for [[m e] m]\n  (for [[k v] e] {[m k] (get e k)})))))","problem":146,"user":"5142e808e4b0c172af7558c9"},{"problem":146,"code":"(fn [t]\n  (apply merge\n  (for [[k v] t\n        [k2 v2] v]\n    {[k k2] v2})))","user":"56d7f340e4b0ea9b8538f7df"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[ok ov] m [ik iv] ov] [[ok ik] iv])))","user":"5821b018e4b04b46fc4b0f80"},{"problem":146,"code":"(fn [m]\n  (let [paths (for [k1 (keys m)\n                    k2 (keys (get m k1))]\n                [k1 k2])]\n    (zipmap paths (map #(get-in m %) paths))))","user":"4fe899a6e4b07c9f6fd12c54"},{"code":"#(into {} (for [[k1 hm] % [k v] hm] {[k1 k] v}))","problem":146,"user":"4e48b61d535dc968683fc4be"},{"problem":146,"code":";; (fn [m] (into {} (for [[x y] m :let [z (into {} (map (fn [[k v]] {[x k] v}) y))]] z)))\n(fn [m] (into {} (for [[x y] m [z w] y] [[x z] w])))","user":"5a5894d9e4b05d388ecb6c81"},{"code":"(fn [mm] (into {} (for [[k1 m] mm [k2 v] m] [[k1 k2] v])))","problem":146,"user":"4db3a0e5535df7e46ed9b6d0"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k v] m\n          [kv vv] v]\n      [[k kv] vv])))","user":"593744abe4b02506e01a299b"},{"problem":146,"code":"(fn [m]\n    (into {}\n          (for [k (keys m)\n                subk (keys (get m k))]\n            (let [long-key [k subk]\n                  value (get-in m long-key)]\n              {long-key value}))))","user":"53f31dafe4b0742d9025b0f0"},{"problem":146,"code":"(fn [m]\n  (letfn [(hf [m path]\n            (apply\n             concat\n             (for [[k v] m]\n               (let [new-path (conj path k)]\n                 (if-not (map? v)\n                   [new-path v]\n                   (hf v new-path))))))]\n    (apply hash-map (hf m []))))","user":"55ac07afe4b03311e7b7328f"},{"code":"#(into {} (for [[a b] % [c d] b] [[a c] d]))","problem":146,"user":"4db858d1535d1e037afb218c"},{"code":"(fn [c]\n    (let [a apply\n          m merge\n          f first\n          s second]\n      (a m (for [o c]\n             (a m\n                (for [i (s o)]\n                  {[(f o) (f i)] (s i)}))))))","problem":146,"user":"4f0ef874535d0136e6c22328"},{"code":"(fn [xs] (apply merge (for [[k v] xs [k2 v2] v] {[k k2] v2})))","problem":146,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn [t] (apply hash-map \n                       (apply concat (for [ [x r] t\n                                            [ rx rr] r\n                                            ] \n                                       [[x rx] rr] ))))","problem":146,"user":"50956c2be4b087f34d351ab2"},{"problem":146,"code":"(fn [in-map]\n  (reduce\n   #(assoc %1 (first %2) (second %2))\n   '{}\n   (for [k1 (keys in-map)\n\t     k2 (keys (get in-map k1))]\n\t  [[k1 k2] (get-in in-map [k1 k2])])))","user":"57b356c2e4b0fbc9809a277b"},{"code":"(fn [m]\n  (apply conj (hash-map)\n         (for [[k1 v1] m\n               [k2 v2] v1]\n           [[k1,k2],v2])))","problem":146,"user":"53800d99e4b06839e8705ebd"},{"code":"#(apply merge (for [[k1 v1] % [k2 v2] v1] {[k1 k2] v2}))","problem":146,"user":"505345d9e4b0517ede0d0a06"},{"problem":146,"code":"#(into {} (for [x (keys %)\n                y (keys (% x))]\n            [[x y] ((% x) y)]))","user":"5a9a12d6e4b0d174b936c7b7"},{"code":"#(into {} (apply concat (for [[x y] %] (for [[a b] y]\n  [[x a] b]))))","problem":146,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"(fn [data] (into {} (for [[k1 v1] data, [k2 v2] v1] [[k1 k2] v2])))","problem":146,"user":"5165a235e4b079ad97ec44ac"},{"problem":146,"code":"(fn trees-into-tables [xs] \n  (apply merge \n    (for [[k v] xs] \n        (->> (map #(cons k %) v)\n             (map #(hash-map (vec (drop-last %)) (last %)))\n             (apply merge)))))","user":"52616198e4b03e8d9a4a705e"},{"problem":146,"code":"#(into {} (for [a % b (last a)] [[(first a) (first b)] (last b)]))","user":"53ae16e2e4b047364c044472"},{"code":"(fn [input]\n  (let [result (for [k1 (keys input) k2 (keys (get input k1))] \n                      [[k1 k2] (get (get input k1) k2)])]\n    (zipmap (map first result) (map last result))\n  ) \n)","problem":146,"user":"4fe610fde4b0e8f79898fece"},{"code":"#(into {} (for [k % i (second k) :let [fk (first k) sk (first i) v (second i)]] [[fk sk] v]))","problem":146,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":146,"code":"(fn [m]\n  (apply merge\n               (for [x (keys m)\n                     y (keys (get m x))]\n                 {[x y] (get-in m [x y])}\n                 )))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":146,"code":"#(into {}\n  (for [\n        k1 (keys %)\n        k2 (keys (% k1))]\n    (hash-map [k1 k2] ((% k1) k2))))","user":"53e4fa2ce4b036ad0777e454"},{"problem":146,"code":"(fn [hmap]\n    (reduce merge\n      (for [[k v] hmap\n            [k2 v2] v]\n        {[k k2] v2})))","user":"53716539e4b0fc7073fd6eb1"},{"problem":146,"code":"(fn table [xs]\n  (into {} (mapcat (fn [[k v]]\n                     (for [[x y] v]\n                       {[k x] y})) xs)))","user":"55d68726e4b0e31453f64a99"},{"problem":146,"code":"(fn treesToTables [myMap]\n  (apply hash-map (reduce concat (map #(apply concat %)\n                                 (for [x (keys myMap)]\n                                   (for [y (get myMap x)]\n                                     (cons (vec (cons x [(first y)])) (list (second y))))))))\n)","user":"59e0111ae4b08badc2a0c4e4"},{"code":"#(apply hash-map (apply concat (for [[a b] % [c d] b] [[a c] d])))","problem":146,"user":"4f0b2028535d0136e6c222ff"},{"problem":146,"code":"(fn [map-of-maps] (into {} (for [[k submap] map-of-maps  [subk subv] submap] [[k subk] subv] )))","user":"561814bae4b06b1bb2182a1a"},{"code":"#(into {} (for [k1 (keys %) k2 (keys (% k1))] \n[[k1 k2] (get-in % [k1 k2])]))","problem":146,"user":"50563ae2e4b0ce54f56f0405"},{"code":"(fn [xs]\n  (into {}\n    (for [[k0 x] xs [k1 v] x]\n      [[k0 k1] v]\n    )\n  )\n)","problem":146,"user":"507eddf4e4b06ce648bcdbfa"},{"code":"(fn [h]\n  (apply array-map\n    (apply concat\n      (for [i h j (second i)]\n    \t[[(first i) (first j)] (second j)]))))","problem":146,"user":"51197750e4b057cba170bc99"},{"code":"(fn [x]\n    (reduce\n      (fn [a [o m]]\n        (reduce\n          #(assoc %1 (vector o (first %2)) (last %2))\n          a\n          m))\n      {}\n      x))","problem":146,"user":"51b3f109e4b0f094dd986fa9"},{"problem":146,"code":"(fn tree-to-table [t]\n  (into {} (for [[k1 m] t\n                 [k2 v] m]\n             [[k1 k2] v])))","user":"5879d577e4b01531a375ead8"},{"problem":146,"code":"(fn tree-to-table [t]\n    (apply merge\n           (for [[k v] t\n                 [k2 v2] v]\n             {[k k2] v2}\n             ))\n    )","user":"56791447e4b05957ce8c6183"},{"problem":146,"code":"(fn [m] (into {} (for [k (keys m)\n               kk (keys (m k))]\n          [[k kk] (get (get m k) kk)])))","user":"5eb741e4e4b00a66d4a9523b"},{"problem":146,"code":"(fn \n  [a]\n  (into {}\n        (for [[b c] a\n        [d e] c]\n    (vec [[b d] e]))))","user":"5a9f005be4b0d174b936c810"},{"problem":146,"code":"(fn [hm]\n  (zipmap (for [y hm\n                  \tsymbs (nth y 1)]\n                             (list (first y)\n                                    (first symbs)))\n                                    \n                                    (for [y hm symbs (nth y 1)]\n                                    (nth symbs 1)\n                                    )))","user":"60264d89e4b0d5df2af2222d"},{"code":"(fn fmap [m]\n  (apply conj \n    (flatten     \n      (for [[k v] m]\n        (let [kseq [k]]\n          (if (map? v) \n            (let [ks (keys v)]\n              (map #(hash-map (conj kseq %) (get v %)) ks))\n           {kseq v}))))))","problem":146,"user":"5273e006e4b03e8d9a4a7495"},{"code":"#(reduce into {} (for [x (keys %)] (if (map? (% x)) (reduce into {} (for [y (keys (% x))] {[x y] ((% x) y)})) {x (% x)})))","problem":146,"user":"52bdf6bde4b07a9af579230d"},{"problem":146,"code":"#(into {} (for [[k1 mp] % [k2 v] mp] [[k1 k2] v]))\n;(fn [kvs] \n;   (->>\t\n;     (for [k1 (keys kvs)\n;           k2 (keys (kvs k1))\n;           :let [v ((kvs k1) k2)]]  \n;       [[k1 k2] v]\n;       )\n;     (apply concat)\n;     (apply hash-map)))","user":"575ef4b6e4b08062f99a4e78"},{"problem":146,"code":"#(reduce into (for [p (keys %) q (% p)]\n                {[p (nth q 0)] (nth q 1)}))","user":"54d753ebe4b0a52adc2e2029"},{"problem":146,"code":"(fn [coll]\n    (into {} (for [x (keys coll)\n                   y (get coll x)]\n               [[x (first y)] (second y)])))","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":146,"code":"(fn [m]\n  (apply hash-map\n         (apply concat\n                (apply concat\n                       (map (fn [s]\n                              (map #(vector (vector (first s)\n                                                    (first %))\n                                            (second %))\n                                   (second s)))\n                            m)))))","user":"57008afae4b08d47c97781ca"},{"code":"(fn [m]\n  (into {}\n    (for [[k1 v1] m\n          [k2 v2] v1]\n            [[k1 k2] v2])))","problem":146,"user":"5041b3c0e4b06d8231e4facf"},{"code":"(fn [trees]\n          (into {}\n                (for [[x y] trees\n                      [k v] y]\n                     [[x k] v])))","problem":146,"user":"50705072e4b07bd6ad9b9f27"},{"problem":146,"code":"(fn [m]\n  (into {}\n  \t(for [k1 (keys m)\n    \t  k2 (keys (get m k1))]\n      [[k1 k2] (get-in m [k1 k2])])))","user":"553dd883e4b0a04f792994e6"},{"code":"#(apply conj (for [x %, y (val x)] \n                  {[(key x) (key y)] (val y)}))","problem":146,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"#(into {}\n   (for [[k1 v1] %\n         [k2 v2] v1]\n     [[k1 k2] v2]))","problem":146,"user":"4daf36c2edd6309eace4d175"},{"problem":146,"code":"(fn solution [input-map]\n  (into {}\n        (for [[key val] input-map\n              [key2 val2] val]\n          {[key key2] val2})))","user":"5e2ef900e4b05b4b015161fc"},{"problem":146,"code":"#(into {} (for [[k1, m] % [k2, v] m] [[k1 k2] v]))","user":"55f20e4be4b06e875b46ce40"},{"code":"(fn [m]\n  (into {}\n    (for [[k1 v1] m\n          [k2 v2] v1]\n         [[k1 k2] v2])))","problem":146,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k v] m\n              [vk vv] v]\n         (vec [[k vk] vv]))))","user":"55597b84e4b0deb715856e36"},{"problem":146,"code":"#(into {} (for [[a b] % [c d] b] {[a c] d}))","user":"563dfc02e4b0da801c4e4662"},{"problem":146,"code":"#(apply hash-map (apply concat (for [[k m] %, [sk v] m] [[k sk] v])))","user":"53c649d3e4b00fb29b221297"},{"problem":146,"code":"#(apply merge (for [[y x] %1 [k l] x] {[y k] l}))","user":"5590e55de4b0277789237676"},{"code":"(fn flatten- [m]\n  \"146. For this problem, your goal is to 'flatten' a map of hashmaps.\"\n  (into {}\n   (for [[k1 v1] m\n         [k2 v2] v1]\n     [[k1 k2] v2])))","problem":146,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [k1 (keys m)\n              k2 (keys (get m k1))]\n          {[k1 k2] (get-in m [k1 k2])})))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn tabletree [mm]\n    (into {} (for [[k v] mm [kk vv] v] [[k kk] vv])))","problem":146,"user":"50057f23e4b0678c553fc466"},{"code":"(fn [m]\n  (into {} (for [[k v] m\n                 [vk vv] v]\n             [[k vk] vv])))","problem":146,"user":"4ee528fb535d1385b2869d87"},{"problem":146,"code":"#(apply hash-map \n        (apply concat \n               (for [k1 (keys %) \n                     k2 (mapcat keys (vals %)) \n                     :when (not= (get-in % [k1 k2] :not-found) :not-found)]\n                 [[k1 k2] (get-in % [k1 k2])])))","user":"56d1afd9e4b0ea9b8538f791"},{"code":"(fn walk-map [m]\n  (zipmap \n    (for [h m\n          :let [x (first h)]\n          :let [nest-map (second h)]\n          k (keys nest-map)]\n      [x k])\n    (for [h m\n          :let [nest-map (second h)]\n          k (keys nest-map)]\n      (nest-map k))))","problem":146,"user":"526ee63de4b03e8d9a4a733f"},{"problem":146,"code":"(fn flatMap [x] (reduce merge (map (fn [pol]\n                                     ((fn extMap [x m] (clojure.set/rename-keys m (apply hash-map (mapcat #(vector % (vector x %)) (keys m))))) \n                                     (first pol) (last pol))) x)))","user":"5576e78de4b05c286339e075"},{"code":"(fn [m]\n  (apply merge (for [k1 (keys m)\n        :let [m2 (get m k1)]\n        k2 (keys m2)\n        :let [v  (get m2 k2)]]\n    {[k1 k2] v})))","problem":146,"user":"52ffb7f2e4b0d8b024fd370b"},{"code":"#(into {} (for [[k v] %\n       [vk vv] v] {[k vk] vv}))","problem":146,"user":"52b02329e4b0c58976d9acc5"},{"problem":146,"code":"#(apply merge (for [a (keys %) b (keys (get % a))] {[a b] (get (get % a) b)}))","user":"5da760ebe4b000c986472c1a"},{"code":"(fn [original]\n  (let [original-keys (keys original)]\n    (reduce (fn [table k]\n           (let [k-keys (keys (original k))\n                 table-2 (reduce (fn [new-table x]\n                                   (assoc new-table [k x] ((original k) x))) {} k-keys)]\n             (merge\n              table\n              table-2))\n           ) {} original-keys)))","problem":146,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":146,"code":"(fn [inMap]\n   (apply merge(filter #(not (nil? %)) (for [x inMap y x]\n                              (if (map? y)\n                                (reduce #(assoc %1 (vector (first x) (first %2)) (second %2)) {} y))))))","user":"5d887d27e4b0915913b1d3a8"},{"problem":146,"code":"#(apply merge (for [[k m2] % \n                     [k2 v] m2]\n                 (hash-map [k k2] v)))","user":"5338387de4b0e30313ee6c91"},{"code":"(fn [tree]\n    (->>(for [[x y] tree]\n          (for [[z w] y]\n            [[x z] w]))\n        (apply concat)\n        (apply concat)\n        (apply hash-map)))","problem":146,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"code":"#(into {} (for [[k v] % [K V] v] [[k K] V]))","problem":146,"user":"4e7dfab0535db169f9c796f9"},{"problem":146,"code":"#(into {} (for [[kk m] % [k v] m] [[kk k] v]))","user":"5504dd64e4b086ebe8a79c83"},{"problem":146,"code":"(fn [m]\n            (into {}\n                  (for [[k v] m\n                        [k' v'] v]\n                    [[k k'] v'])))","user":"53684a2fe4b0243289761e8c"},{"problem":146,"code":"#(into {}\n  (mapcat (fn [[k1 v1]]\n    (map (fn [[k2 v2]]\n      [[k1 k2] v2]) v1)) %))","user":"56a76f36e4b07966d5a8a05b"},{"problem":146,"code":"(fn [m]\n  (into (hash-map) (reduce (partial apply assoc) {} (for [[k1 v1] m, [k2 v2] v1] [[k1 k2] v2]))))","user":"5a12dea3e4b04bbd27e6da44"},{"code":"(fn [m]\n  (into {}\n    (for [[ki vi] m, [kj vj] vi]\n      [[ki kj] vj])))","problem":146,"user":"4de165f3535d08e6dec9fde6"},{"code":"#(into {} (for [[_1 _2] (map identity %) _3  (keys _2)] [[_1 _3] (get _2 _3)]))","problem":146,"user":"511ac026e4b0c87c59c9670e"},{"code":"(fn [m]\n      (apply hash-map (apply concat (for [[k v] m [sk sv] v]\n        [[k sk] sv]))))","problem":146,"user":"4f1bb9d8535d64f60314647d"},{"problem":146,"code":"(fn [data] (reduce (fn [acc v] (assoc acc v (get-in data v))) {} (for [x (keys data) y (keys (get data x))] [x y])))","user":"5fa17538e4b0f0ebd91b77e3"},{"code":"#(into {}\n        (for [[a h] %\n              [b v] h]\n      [[a b] v]))","problem":146,"user":"4f08b15b535dcb61093f6c40"},{"problem":146,"code":"(fn [nested-map]\n    (into {} (for [[key value] nested-map\n                   [n-key n-value] value]\n               [[key n-key] n-value])))","user":"5317d78ee4b08068f379ed63"},{"problem":146,"code":"(fn [mp]\n  (into {} (for [[k v] mp\n        [vk vv] v]\n    (vector [k vk] vv))))","user":"51d42f44e4b013d740b70ddb"},{"problem":146,"code":"(fn [mapping]\n  (let [inner-keys (map #(clojure.core/keys (val %)) mapping)\n        outer-keys (keys mapping)\n        key-pairs (map (fn [head] (map #(vector (first head)  %) (first (rest head)))) (partition 2 (interleave outer-keys inner-keys)))]\n    (into '{} (map #(hash-map % (get-in mapping %)) (map vec (reduce concat '() key-pairs))))))","user":"538d70abe4b0b51d73faae6e"},{"problem":146,"code":";stolen elegant solution:\n;#(into {}\n;    (for [[k1 v1] %\n;          [k2 v2] v1]\n;      [[k1 k2] v2]))\n#(apply merge (for [[k, v] %\n                     i  v   ]\n    (array-map [k (first i)] (second i))))","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn [m] \n  (into {}\n        (for [[k v] m\n              [kk vv] v]\n          [[k kk] vv])))","problem":146,"user":"531490bde4b08068f379ed17"},{"code":"; immo's solution:\n; #(into {} (for [[a b] % [x y] b] {[a x] y}))\n\n(fn flatten-map [m]\n  (let [entries\n        (for [k (keys m) e (get m k)\n              :let [k1 (key e)\n                    v1 (val e)]]\n          [[k k1] v1])]\n  (zipmap (map first entries) (map second entries))))","problem":146,"user":"4fc6d2c1e4b0ee37620e181b"},{"code":"(fn [m]\n  (into {}\n     (for [[k1 v1] m\n           [k2 v2] v1]\n      \t {[k1 k2] v2})))","problem":146,"user":"4fde492be4b05e33b9224f8a"},{"problem":146,"code":"(fn [m]\n  (into {}\n  (for [[k1 ms] m\n        [k2 v] ms]\n    [[k1 k2] v])))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"(fn flatten [m]\n  (reduce #(assoc %1 (first %2) (second %2)) {}\n    (for [[ko vo] m\n          [ki vi] vo]\n      [[ko ki] vi])))","problem":146,"user":"50a2f901e4b029e8bace362a"},{"code":"(fn [tree]\r\n         (apply hash-map (apply concat (for [[k1 v1] tree\r\n                    [k2 v2] v1]\r\n                [[k1 k2] v2]))))","problem":146,"user":"4f13047d535d64f60314642c"},{"problem":146,"code":"(fn [m]\n  (into {} \n        (for [[k v] m\n             [ck cv] v]\n          {[k ck] cv})))","user":"55c4cda5e4b0e31453f649a5"},{"problem":146,"code":"#(reduce into {} (for [k (keys %)]\n   (for [j (keys (% k))]\n     [[k j] ((% k) j)])))","user":"55bfc39ee4b01b9910ae2a1a"},{"problem":146,"code":"#(apply merge {}\n  (for [[ko vo] %\n        [ki vi] vo]\n    [[ko ki] vi]))","user":"56d63729e4b0ea9b8538f7ca"},{"problem":146,"code":"(fn [mp] (into {} \n              (apply concat  \n               (for [[x y] mp]\n                 (map #(vector [x (first %)] (second %)) y)))))","user":"6074dfa4e4b069485764de4c"},{"problem":146,"code":"(fn paths\n  [m]\n  (if (map? m)\n    (->> m\n         (mapcat (fn [[k sm]]\n                   (->> (paths sm)\n                        (map (fn [[ks v]]\n                               [(cons k ks) v])))))\n         (into {}))\n    {[] m}))","user":"575cbe44e4b02ea114799374"},{"problem":146,"code":"(fn func [m]\n  (into {} \n        (for [k1 (keys m)\n              k2 (keys (m k1))]\n          [[k1 k2] (get-in m [k1 k2])])))","user":"5e805895e4b085ba37836e44"},{"problem":146,"code":"(fn [m]\n  (into {} (for [x (keys m) y (keys (m x))] \n             [[x y] (get-in m [x y])])))","user":"4f7207d3e4b07046d9f4f019"},{"code":"#(into {} (for [[k v] %\n                [x y] v]\n            [[k x] y]))","problem":146,"user":"4ebaf790535dfed6da9c6d6e"},{"problem":146,"code":"#(into {} (for [[k1 m] %\n       \t\t\t[k2 v] m] [[k1 k2] v]))","user":"5a080bdde4b01bb0ae8afde9"},{"code":"(fn [m]\n (letfn [(flatten-map->seq\n           ([prefix m]\n              (mapcat (fn [[k, v]]\n                        (let [next-prefix (if prefix\n                                            (conj prefix k)\n                                            k)]\n                          (if (map? v)\n                            (flatten-map->seq next-prefix v)\n                            [next-prefix v])\n                          )\n                        ) m))\n           ([m]\n              (flatten-map->seq [] m)))]\n   (apply hash-map (flatten-map->seq m))))","problem":146,"user":"4dada426c9a9d6ed2a99dc57"},{"code":"(fn trees-into-tables [a]\n  (let \n    [paths \n      (partition 2 \n        (apply concat \n          (for [n (keys a)\n                  :let [m (keys (a n))]]\n            (interleave (repeat n) m))))\n     values (map #(get-in a %) paths)]\n    (apply assoc {} (interleave paths values))))","problem":146,"user":"501c1492e4b086d93747d180"},{"problem":146,"code":"(fn [mm]\n  (into {}\n   (for [[k1 m] (seq mm)\n         [k2 v] (seq m)]\n     [[k1 k2] v])))","user":"5a95c639e4b0d174b936c75e"},{"code":"(fn\n  [hmap]\n  (->\n   (fn\n     [akey aval]\n     (->\n      #(hash-map (vector akey %1) %2)\n      (map (keys aval) (vals aval))\n     )\n   )\n   (map (keys hmap) (vals hmap))\n   flatten\n   (#(apply merge %))\n  )\n)","problem":146,"user":"5162757ee4b03cfa3774b3fe"},{"code":"#(apply hash-map (apply concat (apply concat (for [[k v] %] \n  (for [[k1 v1] v] [[k k1] v1])))))","problem":146,"user":"50310b8be4b05b7df5a0b84d"},{"problem":146,"code":"(fn [m]\n   (apply hash-map\n     (apply concat\n      (for [[k m1] m]\n        (mapcat #(vector [k (key %)] (val %)) m1)))))","user":"5573ffb5e4b0aa18f790f3fd"},{"code":"(fn [in] (apply hash-map (apply concat (for [[k m] in [k2 v] m] [[k k2] v]))))","problem":146,"user":"4f04b66b535dcb61093f6bdd"},{"problem":146,"code":"#(into {}\n  (for [[k v] %\n        [a b] v]\n    [[k a] b]))","user":"52bacfa8e4b07a9af57922d6"},{"problem":146,"code":"#(apply merge\n  (for [[k1 v1] %\n        [k2 v2] v1]\n    {[k1 k2] v2}))","user":"57407ab3e4b05c31a32c0854"},{"problem":146,"code":"(fn [m](into {} (for [[k v] m [a b] v](assoc {} (vector k a) b))))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":146,"code":"(fn [m]\n  (reduce-kv \n    (fn [m k v]\n      (into m (map (fn [[k2 v2]] [[k k2] v2]) v)))\n    {} \n    m))","user":"55fee5e4e4b00f4cabc5765a"},{"code":"(fn flat-map [m]\n  (letfn [(k2p [k inner-m]\n               (for [[i j] inner-m]\n                 [[k i] j]))\n          (tot [m]\n               (for [[i j] m]\n                 (k2p i j)))]\n    (into {} (reduce concat (tot m)))))","problem":146,"user":"5374adc3e4b06d7f452d9e27"},{"problem":146,"code":"(fn [m]\n  (into {} (for [key (keys m)\n        sub-key (keys (m key))\n        :let [v ((m key) sub-key)]]\n    [[key sub-key] v])))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"problem":146,"code":"(fn [v]\n  (letfn [(t [s v](if (map? v) (map #(t (conj s (key %)) (val %)) v) (hash-map s v)))]\n    (reduce merge (reduce concat(t '[] v)))))","user":"51a058dae4b0b292b01ee3f3"},{"problem":146,"code":"(fn [input]\n  (apply hash-map\n    (apply concat\n      (map\n        (fn [[k v]]\n          (apply concat\n            (map\n              (fn [vv]\n                [[k (key vv)] (val vv)])\n              v)))\n          input))))","user":"5a244240e4b0ff51aa4b32e9"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k v] m\n              [ky va] v]\n          [[k ky] va])))","user":"5574c172e4b05c286339e059"},{"problem":146,"code":"(fn into-table\n  ([prefix value]\n    (if (map? value)\n      (reduce (fn [m [k v]] (merge m (into-table (conj prefix k) v))) {} value)\n      {prefix value}))\n  ([value]\n    (into-table [] value)))","user":"5416b4a2e4b01498b1a71a01"},{"problem":146,"code":"(fn trees-into-tables \n  [m]\n  (into {} (for [[k v] m\n                 [k2 v2] v]\n             [[k k2] v2])))","user":"57f8153de4b0d3187e900916"},{"problem":146,"code":"#(into {} (apply concat (for [[k1 m1] %] (for [[k2 v] m1] [[k1 k2] v]))))","user":"559a9a3de4b066d22e731f45"},{"problem":146,"code":"(fn [m]\n    (into {} (for [k (keys m), k2 (keys (get m k))]\n               [[k k2] (get-in m [k k2])])))","user":"5cdc08a2e4b05ee0cb31173a"},{"problem":146,"code":"(fn [m] (let [semi-flatten (fn semi-flatten [items]\n                              (mapcat identity items))\n               k1 (keys m) \n               v1 (map #(get m %) k1) ; m2\n               k2 (map keys v1)\n               v2 (semi-flatten (map vals v1))\n               make-vec (fn make-vec [x tup]\n                          (map #(vector x %) tup))\n               make-vecs (fn make-vecs [items]\n                           (reduce #(conj %1 (make-vec (first %2) (second %2))) [] items))\n               consolidated-keys (make-vecs (partition 2 (interleave k1 k2)))] \n           (apply hash-map \n                  (interleave \n                  (semi-flatten consolidated-keys) v2))))","user":"53da8fede4b0e771c30254a3"},{"code":"#(into {} (for [[k v] % [v1 v2] v] [[k v1] v2]))","problem":146,"user":"50996a38e4b0cae2931060b3"},{"code":"#(into {}\n       (for [[k v] %\n             [l w] v]\n         [[k l] w]))","problem":146,"user":"5046ee3ee4b03b02161376b4"},{"problem":146,"code":"(fn [x] (into {} (for [y (keys x) z (keys (x y))] [[y z] ((x y) z)])))","user":"4ec66e84535d6d7199dd36cd"},{"code":"(fn [m] (reduce #(into % %2) {} (for [[x y] m] (for [[k v] y] [[x k] v]))))","problem":146,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":146,"code":"#(->> (for [[p i] % [k v] i] {[p k] v}) (apply merge))","user":"55645592e4b0c656e3ff1802"},{"code":"(fn func [aMap]\r\n  (reduce (fn [newMap [aKey aSubMap]]\r\n            (reduce (fn [newMap [aKey1 aVal1]]\r\n                      (conj newMap [[aKey aKey1] aVal1])) newMap aSubMap))\r\n          {} aMap))","problem":146,"user":"505dd5c4e4b0e6aca564be0e"},{"code":"(fn [d] (apply merge\n               (for [[k dd] d\n                     [k2 v] dd]\n                 {[k k2] v})))","problem":146,"user":"510acd6ee4b078ea719210f4"},{"problem":146,"code":"(fn [coll]\n     (apply merge (for [the-key (keys coll)]\n              (let [the-val (get coll the-key)\n                    in-keys (keys the-val)]\n                (apply merge (for [in-key in-keys]\n                         (hash-map [the-key in-key] (get the-val in-key))))))))","user":"5c0e3f86e4b01240ff56713d"},{"code":"(fn [mm]\n  (into {}\n    (for [[k mv] mm\n          [k2 v] mv]\n      [[k k2] v])))","problem":146,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn [x]\n    (apply hash-map\n           (apply concat\n                  (for [[k v] x\n                        [kk vv] v]\n                    [[k kk] vv]))))","problem":146,"user":"4e50ad74535dc968683fc4ec"},{"problem":146,"code":"(fn [m]\n  (into (sorted-map)\n    (for [x (keys m) y (keys (m x))]\n      [[x y] ((m x) y)])))","user":"598e7998e4b02b9968b84d34"},{"code":"(fn [root]\n  (apply hash-map \n    (for [ [p1 m2] root\n           [p2 value] m2\n           x (list [p1 p2] value) ] x)))","problem":146,"user":"4ee3afde535d10e5ff6f5370"},{"code":"#(apply merge (for [x % y (val x)] {[(key x) (key y)] (val y)}))","problem":146,"user":"50ae0d24e4b0a40c9cfb08ce"},{"problem":146,"code":"(fn [m] (into {} (for [x m y (keys (second x)) :let [z (get (second x) y)]] [[(first x) y] z])))","user":"5a9db5c9e4b0d174b936c7f1"},{"problem":146,"code":"(fn [mm] \n (reduce-kv\n  (fn [m k vm] \n   (reduce \n    (fn [acc [kb vb]] \n     (assoc acc kb vb))\n    m\n    (for [q (keys vm)]\n     [[k q] (vm q)])))\n  {}\n  mm)\n)","user":"57f9011ee4b0d3187e900935"},{"problem":146,"code":"(fn [x] (into {} (for [[a m] x [b c] m] [[a b] c])))","user":"52173464e4b082aa80a88c75"},{"code":"(fn f ([m] (f [] m))\n  ([p m]\n   (->> m\n        (map (fn [[k v]]\n               (if (map? v)\n                 (f (conj p k) v)\n                 [(conj p k) v])))\n        (into {}))))","problem":146,"user":"512700c4e4b083bb8f88cf14"},{"problem":146,"code":"(fn mapflat\n\t[m]\n\t(reduce #(conj % %2) (flatten (reduce \n\t\t(fn[result [key val]]\n\t\t\t(conj result (for [\tk [key] \n\t\t\t\t\tks (keys val)] \n\t\t\t\t(assoc {} [k ks] (get val ks))))) [] (map identity m)))))","user":"5954eef0e4b066ee0a44af17"},{"problem":146,"code":"(fn flatmap [metamap]\n  (into {}\n        (for [k1 (keys metamap)\n              k2 (keys (get metamap k1))]\n          (vector [k1 k2] (get-in metamap [k1 k2])))))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn [in]\n    (apply hash-map (apply concat (for [[k1 m] in [k2 v] m] (list [k1 k2] v)))))","problem":146,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":146,"code":"(fn [m]\n    (into {} (for [[k v] m\n          [vk vv] v]\n      (vector [k vk] vv))))","user":"54246fcce4b01498b1a71aed"},{"problem":146,"code":"(fn trees\n  [n]\n  (into {}\n    (for [[x m] n\n          [y z] m]\n      [[x y] z])))","user":"5e95013fe4b0fbed045a3800"},{"problem":146,"code":"(fn [coll]\n  (into {} (for [[kx vx] coll, [ky vy] vx]\n             [[kx ky] vy])))","user":"5eb1c786e4b00a66d4a95201"},{"problem":146,"code":";; http://www.4clojure.com/problem/146\n(fn flatten-maps\n  [main-map]\n  (into {}\n        (for [[k v] main-map [k2 v2] v]\n          [[k k2] v2])))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn [m]\n      (apply hash-map\n             (reduce into\n                     (for [[k1 v1] m]\n                       (reduce into\n                               (for [[k2 v2] v1]\n                                 [[k1 k2] v2]))))))","problem":146,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":146,"code":"(fn [m]\n         (into {}\n               (for [k (keys m)\n                     v (m k)]\n                 {[k (key v)] (val v)} )))","user":"58c4492be4b021aa9917ed27"},{"problem":146,"code":"(fn [c]\n  (zipmap\n   (reduce (fn [r [v c]]\n             (concat r (map #(vector v (first %)) c))) [] c)\n   (apply concat (->> c vals (map vals)))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":146,"code":"(fn tree-into-tables [m] (into {} (for [k1 (keys m)\n                                k2 (keys (m k1))]\n                            [[k1 k2] ((m k1) k2)])))","user":"5245e320e4b09dbe66b56177"},{"problem":146,"code":"(fn [m]\n    (into {} (for [x m\n                   y (second x)]\n               [[(first x) (first y)] (second y)]))\n    )","user":"57aa290de4b0b8559636fc65"},{"code":"(fn [i] (reduce #(assoc % (first %2) (last %2)) {} (apply concat (map (fn [j] (map (fn [k] [(vector j k) ((i j) k)]) (keys (i j)))) (keys i)))))","problem":146,"user":"4f0e4ebd535d0136e6c22322"},{"problem":146,"code":"(fn\n    [xs]\n    (into {}\n          (for [[k1 a] xs\n                [k2 v] a]\n            [[k1 k2] v])))","user":"507e68abe4b085af06e3afd2"},{"problem":146,"code":"(fn flatmap [m]\n  (into {}\n        (for [x m\n              y (second x)]\n          [[(first x) (first y)] (second y)])))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"(fn[s]\n    (reduce merge (map (fn[x](let [v (s x)]\n                    (reduce merge (map (fn[i] {[x i] (v i)}) (keys v)))\n               )) (keys s)))\n)","problem":146,"user":"5017eface4b02f523d7cc5e7"},{"problem":146,"code":"#(into {} (for [[fk fv] %\n               [sk sv] fv]\n           [[fk sk] sv]))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":146,"code":"#(apply hash-map \n        (mapcat (fn [[k m]]\n                  (mapcat (fn [[p v]]\n                            [[k p] v]) m)) %))","user":"55b1e9e7e4b0da326a65cf74"},{"code":"(fn [mm]\n  (into {}\n    (for [[k1 m] mm\n          [k2 v] m]\n      [[k1 k2] v])))","problem":146,"user":"53779a26e4b06839e8705e38"},{"problem":146,"code":"(fn te [map]\n  (apply hash-map (reduce #(conj (conj %1 (first %2)) (second %2)) [] (for [k0 (keys map) k2 (keys (get map k0)) :let [v (get (get map k0) k2)]] [[k0 k2] v]))))","user":"60228147e4b0d5df2af22202"},{"problem":146,"code":"(fn [h]\n  (apply merge (map (fn [[k s]]\n                       (into {} (map \n                                 (fn [[k2 v2]]\n                                   [[ k k2] v2])\n                                 s))) h)))","user":"55c652dde4b0e31453f649bd"},{"code":"(fn [para]\n\t   (let [red (fn [key1 val1 coll]\n\t\t\t (reduce #(assoc %1 (vector key1 (key %2) ) (get val1 (key %2))) coll val1))]\n\t     (reduce #(red (key %2) (val %2) %1 ) {} para)))","problem":146,"user":"5016ac54e4b052339a490e7b"},{"problem":146,"code":"(fn [m]\n  (let [new-keys (for [x m y (second x)] [(first x) (first y)])]\n    (reduce #(assoc %1 %2 (get-in m %2)) {} new-keys)))","user":"592ac17ae4b072a2710fcf26"},{"problem":146,"code":"#(into {} (for [[k1 v] % [k2 v] v] [[k1 k2] v]))","user":"5455c2f3e4b080a794c2c87d"},{"code":"(fn flatten [d1] (reduce #(assoc %1 (first %2) (last %2) ) '{} (for [k1 (keys d1) k2 (keys (d1 k1) ) ] [[k1 k2] ((d1 k1)k2) ]  ) ) )","problem":146,"user":"4e8d5edd535d65386fec2134"},{"code":"(fn [mm]\n  (into {}\n        (for [[k1 m] mm\n              [k2 v] m]\n          [[k1 k2] v])))","problem":146,"user":"519db0ede4b037b32803f9b9"},{"problem":146,"code":"(fn [m] (reduce (fn [d [k v]] (assoc d k v)) {} (for [[a s] m [b c] s] [[a b] c])))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":146,"code":"(fn [m] (apply merge (flatten (map #(for [x (list %1) y %2] (hash-map (list x (key y)) (val y))) (keys m) (vals m)))))","user":"520cb8c4e4b0b022ef140c9a"},{"problem":146,"code":"(fn [m]\n    (->>\n      (map (fn [t]\n             (let [ a (key t) b (val t)]\n               (map #(identity {[a (key %)] (val %)}) b)))\n           m)\n      flatten\n      reverse\n      (apply merge )\n      ))","user":"55aa1637e4b0988bba2ad949"},{"code":"#(into {} (flatten \n   (for [k1 (keys %)]\n     (for [k2 (keys (% k1))] { [k1 k2] ((% k1) k2)}))))","problem":146,"user":"5093ca51e4b097f48cc38585"},{"problem":146,"code":"#(reduce merge \n         (map (fn [[k v]]\n                (into {}\n                      (map (fn [[kk vv]]\n                             [[k kk] vv])\n                           v)))\n              %))","user":"4f041de1535dcb61093f6ba5"},{"problem":146,"code":"(fn [coll]\n        (into {} (for [[k1 v1] coll [k2 v2] v1] [[k1 k2] v2])))","user":"5cc6b4bfe4b0ccb061962827"},{"code":"(fn [xs]\n  (into {} (for [ [x y] xs\n                  [a b] y ]\n    [ [x a ] b] )))","problem":146,"user":"53691dc7e4b0243289761e97"},{"problem":146,"code":"(fn [marg] (into '{} (vec (for [[x y] marg\n                              [k v] y] \n                       [[x k] v]))))","user":"574986cae4b009280f9f2b9c"},{"code":"(fn [xs] \n  (apply merge \n    (for [[k v] xs, [k1 v1] v] {[k k1] v1})))","problem":146,"user":"4e513758535dc968683fc4f3"},{"problem":146,"code":"#(into {} (for [[k1 m] %\n                [k2 v] m]  {[k1 k2] v}    ))","user":"55cdc576e4b0e31453f64a1f"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k v] m [vk vv] v] [[k vk] vv] ))\n  )","user":"564a560ae4b0284900eef654"},{"code":"(fn\n  [m]\n  (apply hash-map\n         (apply concat\n                (for [x m]\n                  (apply concat\n                         (for [y (second x)]\n                           [[(first x) (first y)] (second y)]))))))","problem":146,"user":"4db53f87535d87e67b28fe08"},{"code":"(fn [x]\n  (apply merge\n         (for [ [k v] x \n                [kk vv] v ]\n           { [k kk] vv }\n           )\n         )\n  )","problem":146,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":146,"code":"(fn tree-to-table [m]\n  (apply merge (for [i m]\n    (reduce (fn [acc item]\n              (assoc acc [(first i) (first item)] (second item)))\n            {}\n            (second i)))))","user":"563fc1f2e4b08d4f616f5ed7"},{"code":"(fn flatten-tree [m]\n  (into {}\n    (for [k1 (keys m), k2 (keys (get m k1))]\n      [[k1 k2] (get-in m [k1 k2])])))","problem":146,"user":"539a2901e4b0b51d73faaf0f"},{"problem":146,"code":"(fn[m](into{}(for[[k v]m[nk nv]v][[k nk]nv])))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn [ts]\n  (apply hash-map\n    (mapcat\n      (fn [[k v]]\n        (mapcat (fn [[k' v']] [[k k'] v']) v))\n      ts)))","problem":146,"user":"504e13fce4b078edc5f593bc"},{"code":"(fn [om]\n   (reduce conj {}\n           (for [omk (keys om)\n                 imk (keys (om omk))]\n             [[omk imk] ((om omk) imk)])))","problem":146,"user":"4ee868be535d93acb0a6687d"},{"code":"(fn [l]\n   (apply hash-map\n    (mapcat (fn [[a b]]\n              (mapcat (fn [[k v]] [[a k] v]) b)) l)))","problem":146,"user":"4fc8c8d8e4b0ee37620e183b"},{"code":"(fn[x]\r\n  (into {} (for [k (keys x)\r\n                 k2 (keys (get x k))]\r\n             [[k k2] (get-in x [k k2])])))","problem":146,"user":"4f82ed48e4b033992c121c0e"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [k1 (keys m)\n              k2 (keys (m k1))]\n          [[k1 k2] (get-in m [k1 k2])])))","user":"5ec6de19e4b08d0ec38692da"},{"problem":146,"code":"(fn [tree]\n  (reduce-kv (fn [coll k v] \n             (reduce-kv #(assoc %1 (vector k %2) %3) coll v)) \n           {} \n           tree)\n)","user":"546692aee4b01be26fd746e7"},{"problem":146,"code":"(fn [coll]\n  (into {}\n        (for [[k r] coll\n              [l v] r]\n          [[k l] v])))","user":"5a5dbe9de4b0512ff01cd92b"},{"problem":146,"code":"(fn [t] (reduce merge (mapcat identity (for [k1 (keys t)]\n                          (for [k2 (keys (get t k1))]\n                                             {(vector k1 k2) (get-in t (list k1 k2))})))))","user":"56baab13e4b0f26550335948"},{"code":"#(apply merge (for [x (keys %)\n        y (keys (% x))]\n    {[x y] (get-in % [x y])}))","problem":146,"user":"534cf749e4b084c2834f4a97"},{"code":"(fn [m] (into {} (for [[k v] m] \n          (zipmap (map #(vector k %) (keys v))\n                  (vals v))\n          )\n              )\n  )","problem":146,"user":"517945dce4b0684c1c981a43"},{"code":"#(into {} (for [[a b] % [x y] b] {[a x] y}))","problem":146,"user":"4db85282535d1e037afb218a"},{"problem":146,"code":"#(into {} (for [ [k1, hh] % [k2, v] hh] [[k1 k2] v] ))","user":"55aa5f73e4b0988bba2ad94b"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [k1 (keys m)\n              k2 (keys (m k1))]\n          [[k1 k2] ((m k1) k2)])))","user":"54ca93abe4b057c6fda3a264"},{"problem":146,"code":"(fn tree->table\n  [m]\n  (reduce (fn [acc [k v]]\n            (reduce (fn [p [ke ve]]\n                      (assoc p [k ke] ve)) acc (seq v))) {} m))","user":"5ec5f7f2e4b08d0ec38692d1"},{"code":"(fn [x] (into {} (for [[k v] x [vk vv] v] [[k vk] vv])))\n\n#_(fn __ [m]\n  (reduce merge\n          (flatten\n            (for [[k v] m]\n              (for [[kk vv] (get m k)]\n                {[k kk] (get (get m k) kk)})))))","problem":146,"user":"52828298e4b0757a1b17145b"},{"code":"(fn*\n ([mp]\n  (into\n   {}\n   (let*\n    [iter__4590__auto__\n     (fn*\n      iter__4668\n      ([s__4669]\n       (new\n        clojure.lang.LazySeq\n        (fn*\n         []\n         (loop*\n          [s__4669 s__4669]\n          (let*\n           [temp__4092__auto__ (clojure.core/seq s__4669)]\n           (if\n            temp__4092__auto__\n            (do\n             (let*\n              [xs__4579__auto__ temp__4092__auto__]\n              (let*\n               [vec__4674\n                (clojure.core/first xs__4579__auto__)\n                k\n                (clojure.core/nth vec__4674 0 nil)\n                v\n                (clojure.core/nth vec__4674 1 nil)]\n               (let*\n                [iterys__4586__auto__\n                 (fn*\n                  iter__4670\n                  ([s__4671]\n                   (new\n                    clojure.lang.LazySeq\n                    (fn*\n                     []\n                     (loop*\n                      [s__4671 s__4671]\n                      (let*\n                       [temp__4092__auto__ (clojure.core/seq s__4671)]\n                       (if\n                        temp__4092__auto__\n                        (do\n                         (let*\n                          [s__4671 temp__4092__auto__]\n                          (if\n                           (clojure.core/chunked-seq? s__4671)\n                           (let*\n                            [c__4588__auto__\n                             (clojure.core/chunk-first s__4671)\n                             size__4589__auto__\n                             (clojure.core/int\n                              (clojure.core/count c__4588__auto__))\n                             b__4673\n                             (clojure.core/chunk-buffer\n                              size__4589__auto__)]\n                            (if\n                             (loop*\n                              [i__4672 (clojure.core/int 0)]\n                              (if\n                               (clojure.core/<\n                                i__4672\n                                size__4589__auto__)\n                               (let*\n                                [vec__4675\n                                 (. c__4588__auto__ nth i__4672)\n                                 vk\n                                 (clojure.core/nth vec__4675 0 nil)\n                                 vv\n                                 (clojure.core/nth vec__4675 1 nil)]\n                                (do\n                                 (clojure.core/chunk-append\n                                  b__4673\n                                  (vec [[k vk] vv]))\n                                 (recur\n                                  (clojure.core/unchecked-inc\n                                   i__4672))))\n                               true))\n                             (clojure.core/chunk-cons\n                              (clojure.core/chunk b__4673)\n                              (iter__4670\n                               (clojure.core/chunk-rest s__4671)))\n                             (clojure.core/chunk-cons\n                              (clojure.core/chunk b__4673)\n                              nil)))\n                           (let*\n                            [vec__4676\n                             (clojure.core/first s__4671)\n                             vk\n                             (clojure.core/nth vec__4676 0 nil)\n                             vv\n                             (clojure.core/nth vec__4676 1 nil)]\n                            (clojure.core/cons\n                             (vec [[k vk] vv])\n                             (iter__4670\n                              (clojure.core/rest s__4671))))))))))))))\n                 fs__4587__auto__\n                 (clojure.core/seq (iterys__4586__auto__ v))]\n                (if\n                 fs__4587__auto__\n                 (clojure.core/concat\n                  fs__4587__auto__\n                  (iter__4668 (clojure.core/rest s__4669)))\n                 (recur (clojure.core/rest s__4669))))))))))))))]\n    (iter__4590__auto__ mp)))))","problem":146,"user":"50e1bdd8e4b019fc399ce17f"},{"code":"(fn flat146\n    ([x] (into {}  (flat146 x [])))\n    ([x a]\n     (mapcat \n      (fn [[k v]] \n        (if (map? v) (flat146 v (conj a k))\n          [[(conj a k) v]]))\n      x))\n    )","problem":146,"user":"502bb7c0e4b0194ad32ea1a3"},{"problem":146,"code":"#(into {} (for [[k1 v1] %\n   \t            [k2 v2] v1]\n            {[k1 k2] v2}))","user":"5ed9c2cde4b0c7845d86b0e4"},{"code":"#(into {} (for [[w x] % [y z] x] {[w y] z}))","problem":146,"user":"4f34eb87e4b0e243712b1eba"},{"problem":146,"code":"(fn [in] (let [tx1 (fn [acc1 [outer-key inner-map]]\n              (conj acc1 (reduce (fn [acc2 [k v]]\n                                   (conj acc2 [outer-key [k v]]))\n                                 []\n                                 inner-map)))\n        tx3 (fn [[k v]]\n              (let [[k2 v2] v]\n                [[k k2] v2]))]\n    (->> in\n         (reduce tx1 [])\n         (apply concat)\n         (map tx3)\n         (into {}))))","user":"5bef3e88e4b0a6d31fed213f"},{"problem":146,"code":"(fn [m]\n  (->> (for [[k v] m [k2 v2] v]\n         [[k k2] v2])\n       (apply concat)\n       (apply hash-map)))","user":"56a94562e4b07966d5a8a074"},{"code":"#(into {} (for [[x y] % [a b] y] [[x a] b]))","problem":146,"user":"4eb298c1535d7eef3080734b"},{"problem":146,"code":"(fn w [m]\n  (into {}\n        (for [[k1 v1] m\n        [k2 v2] v1]\n    [[k1 k2] v2])))","user":"51441ce7e4b0b4fb4ace5f41"},{"problem":146,"code":"(fn [mp]\n    (into {}\n      (for [[k v] mp\n            [vk vv] v]\n       [[k vk] vv])))","user":"5ccf99fbe4b0ccb0619628c8"},{"code":"#(into {} (for [[a t] %, [k v] t] [[a k] v]))","problem":146,"user":"518696c1e4b0c40be512d708"},{"code":"(fn temp-f [c] \n (apply hash-map (let [x (for [i c j (val i)] [[(key i) (key j)] (val j) ])]\n       (interleave (map first x) (map second x)))))","problem":146,"user":"512f06c5e4b0762be4c7aad7"},{"code":"(fn  [m] (into {} (for [ x (keys m) y (keys (get m x))]\n    (vector (vector x y ) (get (get m x) y)))))","problem":146,"user":"4e1248b1535d04ed9115e7cf"},{"problem":146,"code":"(fn [m]\n  (into {} (for [k1 (keys m)\n                 k2 (keys (m k1))]\n             [[k1 k2] (get-in m [k1 k2])])))","user":"53576356e4b04ce2eb3ed27a"},{"code":"(fn [foo]\n  (into {} (for [[k0 m] foo [k1 v] m]\n             [[k0 k1] v])))","problem":146,"user":"5341b141e4b00652c8746ecf"},{"problem":146,"code":"#(into {} (for [[x y] % [x2 y2] y] [[x x2] y2]))","user":"5ff709e4e4b06df49cee149b"},{"problem":146,"code":"#(into {} (for [[el1 subm] % [el2 v] subm] [[el1 el2] v]))","user":"58ee84e5e4b056aecfd47dab"},{"problem":146,"code":"(fn [m]\n  (apply merge\n    (for [[k v] m\n          [k1 v1] v]\n      {[k k1] v1})))","user":"52761edae4b03e8d9a4a74d4"},{"problem":146,"code":";; Invariant\n;; (def result (flat-hash original))\n;; (= (get-in original [k1 k2]) (get result [k1 k2]))\n(fn flat-hash [hm]\n  (into {} \n        (for [[k ks] hm\n              [k' v'] ks]\n          [[k k'] v'])))","user":"55ed5a2de4b0121d4835fdd8"},{"code":"(fn [m]\r\n  (into {}\r\n\t\t(for [[mk mv] m, [mvk mvv] mv] [[mk mvk] mvv])))","problem":146,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":146,"code":"#(into {} (for [[a b] % [a2 b2] b] [[a a2] b2]))","user":"6074e1e4e4b069485764de4f"},{"problem":146,"code":"(fn [m] (into {} \n              (for [x m \n                    y (val x)]\n                [[(key x) (key y)] (val y)])))","user":"5353afa0e4b084c2834f4b03"},{"problem":146,"code":"(fn [coll]\n\n    (let [foo (fn [[k m]]\n                (for [k2 (keys m)\n                      :let [v2 (m k2)]]\n                  [[k k2], v2]))]\n\n      (into {} (mapcat foo coll))\n\n      )\n    )","user":"515ebde3e4b01e5d11ccd0a8"},{"problem":146,"code":"(fn [m]\n  (apply merge (apply concat (for [a m] (for [b (val a)] {[(key a) (key b)] (val b)})))))","user":"4e5e9f6b535d8a8b8723a2d2"},{"code":"(fn [m]\n  (let [\n    foo (fn foo [m]\n      (if (map? m)\n        (for [[k v] m n (foo v)] (cons k n))\n        [[m]]))]\n    (reduce #(assoc %1 (drop-last %2) (last %2)) {} (foo m))))","problem":146,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":146,"code":"#(reduce (fn [a b] (apply assoc a b)) {} (for [y % z (second y)] [[(first y) (first z)] (second z)]))","user":"5c41db45e4b08cd430848ece"},{"code":"(fn [s]\n  (into {} (for [[k1 v1] s \n                 [k2 v2] v1]\n            [[k1 k2] v2])))","problem":146,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":146,"code":"(fn [m]\n  (apply hash-map\n    (apply concat\n      (for [k1 (keys m),\n            k2 (keys (m k1))]\n        [[k1 k2] ((m k1) k2)]))))","user":"59225498e4b09b4ee5954c8c"},{"problem":146,"code":"#(into {} \n      (for [[k v] % \n             [vk vv] v] \n            (vec [[k vk] vv]))\n       )","user":"580d7de3e4b0849f6811b73d"},{"problem":146,"code":"#(apply hash-map\n\n    (apply concat\n\n      (for [[k1 m2] %]\n\n        (apply concat\n\n          (for [x m2]\n\n            [[k1 (first x)] (second x)])))))","user":"50e5bca5e4b09ae9427b0e75"},{"problem":146,"code":"#(into {} (apply concat (for [[key value] %]\n                         (for [[subkey subvalue] value]\n                           [[key subkey] subvalue]))))","user":"560039cce4b04bb52996e162"},{"code":"(fn [m]\n  (reduce (fn [a b]\n            (reduce (fn [aa bb] (assoc aa [b bb] ((m b) bb)))\n                    a\n                    (keys (m b))))\n            {}\n            (keys m)))","problem":146,"user":"4e773be8535d324fb2983d6e"},{"problem":146,"code":"#(into {}\n(for [x %\n      s (second x)\n      ] [ [(first x) (first s)] (second s) ])\n   )","user":"50856bd1e4b004985b776e4c"},{"code":"(fn lm\n  ([m] (lm [] m))\n  ([pks m] (apply conj {} (for [k (keys m)] (let [v (m k) ck (conj pks k)] (if (map? v) (lm ck v) [ck v] ))))))","problem":146,"user":"5272669de4b03e8d9a4a742e"},{"problem":146,"code":"(fn [m]\n  (into (hash-map) (for [[k0 v0] m\n                         [k1 v1] v0]\n                     [[k0 k1] v1])))","user":"5adf5f9be4b0837691e92c33"},{"problem":146,"code":"(fn flatten-map [x]\n  (apply merge (flatten\n                (for [a (keys x)]\n                  (for [b (keys (x a))]\n                    {[a b] ((x a) b)})))))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":146,"code":"(fn tr->tb\n  ([tr] (tr->tb tr []))\n  ([tr keys]\n    (if (map? tr)\n     (->> (for [[k v] tr]\n            (tr->tb v (conj keys k)))\n          (reduce merge))\n     (hash-map keys tr))))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":146,"code":"(fn [m1]\n  (reduce-kv (fn [t k1 m2]\n               (into t\n                     (map (fn [[k2 v]]\n                            [[k1 k2] v])\n                          m2)))\n             {}\n             m1))","user":"543a8256e4b032a45b869327"},{"code":"(fn [mm] (apply hash-map (apply concat (for [x mm y (x 1)] (vector (vector (x 0) (y 0)) (y 1))))))","problem":146,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":146,"code":"#(into {}\n   (for [[k v] %\n         [kk vv] v]\n     [[k kk] vv]))","user":"4f9d8083e4b0dcca54ed6d23"},{"problem":146,"code":"(fn [mp]\n  (into {}\n    (for [[k m] mp\n          [ki v] m]\n      [[k ki] v])))","user":"518ba795e4b0f028e99addf0"},{"code":"(fn f\n  ([m] (into {} (apply concat (for [[k v] m] (f k v)))))\n  ([kk m]\n     (if (map? m)\n       (apply concat (for [[k v] m] (f [kk k] v)))\n       (list [kk m]))))","problem":146,"user":"53460d02e4b084c2834f4a39"},{"code":"#(into {} \n   \t(for [[outerk inners] %\n          [innerk innerv] inners]\n      [[outerk innerk] innerv]))","problem":146,"user":"51b24defe4b02f8f128bb963"},{"problem":146,"code":"(fn fltn-path\n  [maps]\n  ((comp #(apply hash-map %) #(reduce concat %))\n    (for\n      [x (keys maps)\n       y (keys (get maps x))]\n      [[x y]\n       (get (get maps x) y)])))","user":"5545477fe4b0a04f79299531"},{"code":"(fn [m] (reduce #(conj % %2) (apply concat (for [[k1 v1] m] (for [[k2 v2] v1] (hash-map (vec (concat [k1] [k2] []))\n                                                                                        v2))))))","problem":146,"user":"52265e41e4b04e78ff2e1981"},{"code":"#(into {}(for [[mk mv] %, [mvk mvv] mv] [[mk mvk] mvv]))","problem":146,"user":"4db13ff51254ad5b4805fa68"},{"problem":146,"code":"#(into {}\n       (for [h (keys %)\n             h* (keys (get % h))]\n         [[h h*] (get-in % [h h*])]))","user":"551ed214e4b08d5046aa8a4d"},{"problem":146,"code":"(fn path [m]\n   (reduce merge (for [[k v] m [sk sv] v]\n                   {[k sk] sv})))","user":"55f8b32ae4b03cbcff9738ba"},{"problem":146,"code":"(fn [xs]\n   (apply merge (map #(apply hash-map %)\n                     (for [ls xs\n                           l (second ls)]\n                       [[(first ls) (first l)] (second l)]))))","user":"56f7ecdfe4b08e7d20b96834"},{"code":"#(apply merge (for [[key val] % [nestedkey nestedval] val] {[key nestedkey] nestedval}))","problem":146,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn [m]\n  (into {} (for [[k0 v0] m\n                 [k1 v1] v0]\n        [[k0 k1] v1])))","problem":146,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":146,"code":"#(into {}\n       (for [[k v] %\n             [vk vv] v]\n          [[k vk] vv]))","user":"5cc80598e4b0ccb061962840"},{"problem":146,"code":"(fn [m]\n  (apply merge (for [[k1 v1] m [k2 v2] v1] {[k1 k2] v2})))","user":"52213426e4b0e6a83c8925c4"},{"problem":146,"code":"#(zipmap (for [xs %1, x (second xs)] [(first xs) (first x)]) (for [xs %1, x (second xs)] (second x)))","user":"57015a1de4b08d47c97781d4"},{"problem":146,"code":"(fn [m]\n    (into {}\n          (for [x m\n                y (second x)]\n              [[(first x) (first y)] (second y)])))","user":"600ae927e4b074f607df6689"},{"problem":146,"code":"#(apply merge\n        (for [[a b] %]\n          (into {}\n                (for [[c d] b]\n                  [[a c] d]))))","user":"53fe1b42e4b0de5c418485f1"},{"problem":146,"code":"(fn [a] ;bad solution\n  (into {}\n    (apply concat\n      (for [x a]\n        (for [y (second x)]\n          [[(first x) (key y)] (val y)]\n        )\n      )\n    )\n  )\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":146,"code":"(fn path\n  ([m] (apply hash-map (path m [])))\n  ([m p] \n    (mapcat (fn [[k v]]\n      (if (map? v)\n        (path v (conj p k))\n        [(conj p k) v])) m)))","user":"51000111e4b00d7ad4cab15e"},{"problem":146,"code":"#(apply merge ((fn [mapa] (for [chiavi (keys mapa)\n                         inner-chiavi (keys (mapa chiavi))\n                         :let [\n                         res { [chiavi inner-chiavi] (get-in mapa [chiavi inner-chiavi])}\n                        ]]\n                     res)) %))","user":"54e4edcae4b024c67c0cf7f3"},{"code":"#(apply merge (for [k0 (keys %) branch (% k0)] {[k0 (first branch)] (second branch)}))","problem":146,"user":"4e823f41535db62dc21a62c8"},{"problem":146,"code":"(fn tit [tree]\n  (apply clojure.set/union\n          (for [x tree\n                y (second x)]\n            {[(first x) (first y)] (second y)})))","user":"56069006e4b08b23635d3174"},{"code":"(fn tt[m]\n  (reduce #(apply assoc %1 %2) {}\n    (for [[k v] m [kk vv] v] [[k kk] vv])))","problem":146,"user":"4fcf642ee4b03432b189f410"},{"code":"(fn [m]\n  (reduce merge\n    (for [e m]\n      (reduce merge\n        (for [ee (val e)]\n          {[(key e) (key ee)] (val ee)} )))))","problem":146,"user":"4dd579b5535dae65d5c462ea"},{"problem":146,"code":"#(into {} (for [[k v] %, [vk vv] v] {[k vk] vv}))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":146,"code":"(fn flatten-map [original]\n  (apply hash-map (mapcat (fn [[k1 nest]] (mapcat (fn [[k2 v]] [[k1 k2] v]) nest)) original)))","user":"601aaa93e4b0bf4ca6b10926"},{"code":"(fn flt [m]\n\n  (into {} (for [[k v] m\n        [vk vv] v]\n    (vec [[k vk] vv])\n    )))","problem":146,"user":"50d3b03fe4b030b634c368b9"},{"code":"#(into {} (for [x %  y (val x) ]  [[(key x) (key y)] (val y )]  ))","problem":146,"user":"50463347e4b011c5dfee771e"},{"code":"(fn [s]\n  (apply array-map (reduce (fn [x [k v]] (conj x k v)) [] (for [[k1 m] s [k2 v] m] [[k1 k2] v]))))","problem":146,"user":"4fb79872e4b081705acca2d2"},{"code":"(fn [coll]\n   (apply merge (for [[k v] coll]\n       (apply merge (for [[k1 v1] v]\n                      (hash-map [k k1] v1)))))\n   )","problem":146,"user":"51d9eb05e4b02ceefd947755"},{"code":"#(apply merge\n       (for [[x y] %\n             [y z] y]\n         {[x y] z}))","problem":146,"user":"5312cdaae4b08068f379ed03"},{"code":"(fn [m]\n  (into {} (apply concat (for [[k, v] m] (for [[k1, v1] v] [[k k1] v1])))))","problem":146,"user":"50cb4cf6e4b0f78a8e1645b4"},{"code":"(fn [m]\n  (reduce\n   #(assoc % (vec (butlast %2)) (last %2))\n   {}\n   (for [[k v] m\n\t [k1 v1] v]\n     (vector k k1 v1))))","problem":146,"user":"50c75d38e4b00bb60fe0c532"},{"code":"(fn [m]\n  (reduce conj \n    (flatten\n    (for [k (keys m)]\n      (for [k2 (keys (get m k))]\n        (hash-map (vector k k2) (get (get m k) k2)))))\n))","problem":146,"user":"5030f16fe4b05b7df5a0b84b"},{"code":"(fn [m]\n  (into {} (for [k (keys m) v (keys (m k))] [[k v] ((m k) v)]))\n)","problem":146,"user":"4fcad14ce4b0ee37620e1856"},{"code":"#(apply merge (for [[k v] %\n                  [vk vv] v]\n              {[k vk] vv}))","problem":146,"user":"5213dbc3e4b0961f15ac4d74"},{"problem":146,"code":"(fn [a] (into {} (for [k (keys a) sk (a k)] [[k (first sk)] (last sk)])))","user":"555c6344e4b0b056612e224c"},{"problem":146,"code":"(fn algo\n  [set1]\n  (->>\n    (for [[x y] set1 [ks vs] y] [[x ks] vs])\n    (into {})\n    )\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":146,"code":"(fn maps-to-tables [maptree]\n  (let [paths-to-values (for [outer-key (keys maptree)]\n                          (let [value (get maptree outer-key)]\n                            (for [inner-key (keys value)]\n                              {[outer-key inner-key] (get value inner-key)})))]\n    (->> paths-to-values\n         (mapcat identity)\n         (apply merge))))","user":"54a96a15e4b09f271ff37cad"},{"code":"#(into {}\n  (apply concat\n    (for [[k v] (seq %)]\n      (map (fn [[i j]] [[k i] j]) v))))","problem":146,"user":"50166470e4b052339a490e76"},{"problem":146,"code":"(fn flt [h] (into {} (for [[k v] h [k' v'] v] [[k k'] v'])))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":146,"code":"(fn [coll]\n  (apply merge (apply concat \n                      (for [[first-key first-value] coll] (for [[second-key second-value] first-value] {[first-key second-key] second-value}))\n                      )\n         )\n  )","user":"55fe7e15e4b00f4cabc57651"},{"problem":146,"code":"(fn [m]\n  (into {}(for [[k v] m\n        [k2 v2] v]\n    [[k k2] v2]))\n  )","user":"5cd4e1b2e4b0ccb061962927"},{"code":"(fn [c]\n  \t(into {}\n          (for [[k v] c\n                [vk vv] v]\n            (vec [[k vk] vv]))))","problem":146,"user":"512474ede4b02c3f2a072cce"},{"problem":146,"code":"(fn [inp]\n   (into {}\n         (for [k1 (keys inp)\n               k2 (keys (inp k1))]\n           {[k1 k2] (get-in inp [k1 k2])})))","user":"5398123ee4b0b51d73faaef3"},{"problem":146,"code":"(fn [t]\n  (into {}\n        (for [[k v]   t\n              [k2 v2] v]\n          (vec [[k k2] v2]))))","user":"56ca0da9e4b0ea9b8538f715"},{"problem":146,"code":"(fn [m]\n   (into {}\n  \t(for [[k v] m [k2 v2] v] [[k k2] v2])))","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"(fn  f [arr]\n (apply hash-map (apply concat  ;(into {} \n       (for [[k1 v1] arr\n              [k2 v2] v1]\n           [[k1 k2] v2]\n        ))))","problem":146,"user":"5307e4ece4b02e82168697a9"},{"problem":146,"code":"(fn [x] (into {} (for [[k1 v1] x [k2 v2] v1] [[k1 k2] v2])))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":146,"code":"(fn tree-to-tab\n  [amapomap]\n  (apply merge (for [[topkey topval] amapomap\n                     [nextkey nextval] topval]\n                 {[topkey nextkey] nextval})))","user":"550d9452e4b06e50f9beb15d"},{"problem":146,"code":"; This seems to me to be one of the worst 4Clojure problems.   \n; As of now, it's the least popular of all the 'easy' problems - a good indicator of its misclassification, pointlessness, and bumbling description.\n\n  (fn [m]\n    (into {}\n      (apply concat\n        (for [e (seq m)]\n          (for [evk (val e)]\n            [[(first e) (first evk)] (last evk)]\n            )\n          )\n        )\n      )\n    )","user":"5535e822e4b09218d5f44fb2"},{"problem":146,"code":"(fn mapflat\n  [maps]\n  (into {}  (for [m maps subm (second m)\n                 :let [k (first m) k2 (first subm) v (second subm)]]\n             [[k k2] v])))","user":"5609d328e4b05f002753deee"},{"problem":146,"code":"(fn\n  [nested-maps]\n  (->> (for [top-level-key (keys nested-maps)\n             :let          [first-level-map (get nested-maps top-level-key)]\n             :when         (not (nil? first-level-map))]\n         (map (fn[[k v]] {[top-level-key k] v}) first-level-map))\n       flatten\n       (into {})))","user":"573de63fe4b05c31a32c081c"},{"problem":146,"code":"(fn [m]\n\t\t(apply hash-map (apply concat (for [[k1 v1] m, [k2 v2] v1] (list [k1 k2] v2)))))","user":"5370b386e4b0fc7073fd6e9b"},{"problem":146,"code":"#(into {} (for [[k v] % [i j] v] [[k i] j]))","user":"53572176e4b04ce2eb3ed276"},{"code":"(fn path [m] (apply merge (for [[p1 p] m\n                                [p2 v] p]\n                                {[p1 p2] v})))","problem":146,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":146,"code":"(fn trees-into-tables\n  [m]\n  (into {} (for [[k v] m\n                 [k2 v2] v]\n             [[k k2] v2])))","user":"57f81544e4b0d3187e900917"},{"problem":146,"code":"(fn trees-to-tables\n  [mymaps]\n  (reduce (fn [mymaps mymap]\n            (let [k1 (first mymap)\n                  inmap (first (rest mymap))\n                  inkeys (keys inmap)]\n              (loop [k1 k1\n                     inkeys inkeys\n                     result mymaps]\n                (if (empty? inkeys)\n                  result\n                  (do\n                    (let [newKey (conj [] k1 (first inkeys))\n                          newVal (get inmap (first inkeys))]\n                      (recur k1 (rest inkeys) (assoc result newKey newVal)))))))\n            )\n          {} mymaps))","user":"5e495e3fe4b043cd24807a4f"},{"code":"(fn __ [m]\n  (into {} (apply concat\n                  (for [[k v] m]\n                    (for [[k2 v2] v]\n                      [[k k2] v2])))))","problem":146,"user":"4ec9549d535d6d7199dd36fe"},{"problem":146,"code":"(fn flat [map-of-map]\n  (into {} (for [[key1 pair] map-of-map\n                 [key2 value] pair]\n             [[key1 key2] value])))","user":"56ac81ace4b03c432f187347"},{"problem":146,"code":"(fn to-table [mp]\n  (reduce-kv\n   (fn [m k v]\n     (reduce-kv\n      (fn [m2 k2 v2]\n        (assoc m2 [k k2] v2)\n        ) m v)) {} mp))","user":"5b4b8cd6e4b02d533a91bc9f"},{"problem":146,"code":"(fn [m] \n\n  (let [x  \n    (for [[ks vs] m] \n      (for [k vs]\n        [[ks (first k)] (second k)]))\n    \n      ] \n    \t(into {} (for [i x j i] j))\n    \n  )\n)","user":"54e51c7be4b024c67c0cf7f7"},{"problem":146,"code":"(fn [tree]\n  (let [recur-fn \n        (fn recur-fn [tree out path]\n          (reduce-kv \n           (fn [out k v]\n             (if (map? v) \n               (recur-fn v out (into path [k]))\n               (assoc out (into path [k]) v)))\n           out tree))]\n    (recur-fn tree {} [])))","user":"58950f29e4b00487982d5270"},{"code":"(fn [m]\n  (into {} (for [[k1 m] m\n                 [k2 v] m]\n             [[k1 k2] v])))","problem":146,"user":"4dabb7b1950ed6eda1bd72f3"},{"code":"#(into {} (for [[k1 v1] %1 [k2 v2] v1] [[k1 k2] v2]))","problem":146,"user":"4e8e8c24535d65386fec2143"},{"code":"(fn [xs] \n  (into {}\n        (for [[k1 xs1] xs\n              [k2 v] xs1] [[k1 k2] v])))","problem":146,"user":"525078b6e4b0541d1855b832"},{"problem":146,"code":"(fn sk-flaten [input-map]\n  (into {} (for [[k v] input-map\n         [vk vv] v]\n     [[k vk] vv])))","user":"5884f377e4b0f1effa3b76a8"},{"code":"#(apply merge (for [x %]\n                 (apply merge (for [y (last x)]\n                                {[(first x) (first y)  ]  (last y)}))))","problem":146,"user":"5300aa1de4b0d8b024fd3710"},{"problem":146,"code":"#(into {} (for [[k1 m] %\n                       [k2 v] m] [[k1 k2] v]))","user":"5782018de4b0d36ec5835e8e"},{"code":"(fn f [map]\n\t(apply hash-map (for \n      [[key0 val0] map\n       [key1 val1] val0\n       x [[key0 key1] val1]]\n\n\t\tx))\n)","problem":146,"user":"50eafeaae4b0346a3e988cbb"},{"problem":146,"code":"(fn f2 [x]\n  (into {}\n    (reduce concat\n      (for [[k1 v1] x]\n        (if (map? v1)\n          (for [[k2 v2] v1] [[k1 k2] v2])\n          [[k1] v1])))))","user":"5b0bd9cfe4b0cc2b61a3bdd9"},{"code":"(fn [m]\n  (into {} (for [[k v] m [k' v'] v]\n    [[k k'] v'])))","problem":146,"user":"5201ada5e4b0b2e020a18f14"},{"problem":146,"code":"(fn [z]\n  (into {} (for [x z y (second x)] [[(first x) (first y)] (second y)])))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":146,"code":"(fn [m]\n  (into {} (for [outer-key (keys m)\n                 inner-key (keys (get m outer-key))]\n             [[outer-key inner-key] (get-in m [outer-key inner-key])])))","user":"5424c523e4b01498b1a71b03"},{"code":"#(into '{} (for [[k1 v] % [k2 v2] v]\n       [[k1 k2] v2]))","problem":146,"user":"4fd7962ee4b0dab7d829f385"},{"problem":146,"code":"(fn [x] (apply merge (flatten (for [[k v] x] (for [[k1 v1] v] {[k k1] v1})))))","user":"5951190be4b066ee0a44aea4"},{"code":"#(merge (reduce into (for [[k1 u] %1 [k2 v] u] {[k1 k2] v})))","problem":146,"user":"4db4714f535dc0f10411755a"},{"code":"(fn c [m]\n  (reduce\n    (fn [r [f s]]\n      (if (map? s)\n        (reduce\n          (fn [r [k v]]\n            (assoc r (cons f k) v))\n          r\n          (c s))\n        (assoc r [f] s)))\n     {}\n     m))","problem":146,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":146,"code":"(fn flatten-map-of-maps\n  [map-of-maps]\n  (into {}\n        (for [x map-of-maps\n              :let [[a xx] x]\n              y xx\n              :let [[b xxx] y]]\n          [[a b] xxx])))","user":"58152157e4b0f478707a0631"},{"problem":146,"code":"#(into {} (for [[k v] % [a b] v] [[k a] b]))","user":"5382704be4b06839e8705ed4"},{"problem":146,"code":"#(into {}\n  (apply concat (for [[v m] %]\n                 (for [[k vv] m]\n                  [(vector v k) vv]))))","user":"502873a8e4b01614d1633ff8"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k v] m\n                 [k2 v] v]\n             [[k k2] v])))","user":"56ba1406e4b0f2655033593c"},{"problem":146,"code":"(fn\n  [map]\n  (into {}\n        (for [[k1 val1] map \n              [k2 val2] val1]\n          [[k1 k2] val2]\n              )\n        )\n  )","user":"5bbbce99e4b0a20761a23610"},{"code":"(fn[coll]\n  (into {} \n        (for [k1 (keys coll) \n              kv (coll k1)]\n          [[k1 (key kv)] (val kv)])))","problem":146,"user":"506406c8e4b075d771da6f9f"},{"problem":146,"code":"#(into {}\n       (for [[k1 mv] %\n             [k2 v] mv]\n         [[k1 k2] v]))","user":"605b7a90e4b079a07f8593fc"},{"code":"(fn [m]\n  (into \n    {} \n    (for [k1 (keys m) k2 (keys (m k1))] \n      [[k1 k2] (get-in m [k1 k2])])))","problem":146,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":146,"code":"(fn [x] (into {} (apply concat (for [[k v] x] (if (map? v) (for [[n_k n_v] v] [[k n_k] n_v]) [[k v]])))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn [xs] \n  (into {} (for [[k1 v1] xs\n        [k2 v2] v1]\n          [[k1 k2] v2])))","problem":146,"user":"4e7f5a0b535db966e863cc41"},{"code":"#(into {}\n   (for \n       [[s w] %\n        [s1 w1] w]\n     [[s s1] w1]))","problem":146,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"code":"(fn [m]\n    (into {}\n          (for [k1 (keys m) k2 (keys (m k1))]\n            [[k1 k2] ((m k1) k2)])))","problem":146,"user":"53527ce8e4b084c2834f4af1"},{"problem":146,"code":"(fn [data]\n   (->> data\n        (mapcat (fn [[k v]] (map (fn [[x y]] {[k x] y}) v)))\n        (reduce\n         (fn [r m] (reduce (fn [result [k v]] (assoc result k v)) r m))\n         {})))","user":"59473563e4b07ddc2dafad97"},{"problem":146,"code":"(fn [coll] (into {} (flatten (for [x coll] (for [y (val x)] {[(key x) (key y)] (val y)})))))","user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn [m]\n  (let [ks (for [k1 (keys m) k2 (keys (m k1))] [k1 k2])\n        vs (for [k1 (keys m) k2 (keys (m k1))] ((m k1) k2))]\n    (apply assoc {} (interleave ks vs))))","problem":146,"user":"4f418eaee4b0d7d3c9f3fce9"},{"code":"(fn trees-to-tables [maps]\n  (into {}\n        (for [[k v] maps\n              [kk vv] v]\n          [[k kk] vv])))","problem":146,"user":"530578ede4b0d8b024fd3760"},{"code":"(fn [m] (reduce #(conj % %2) {}\n  (for [ [k v ] m  [kk vv] v ]\n     [ [k kk] vv ])))","problem":146,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"#(reduce merge {} (flatten (for [[x y] %] (for [[z t] y] {[x z] t}))))","problem":146,"user":"52c7f036e4b0c2d177d62126"},{"problem":146,"code":"#(reduce-kv (fn [m k v]\n                (reduce (fn [m [sub-k v]]\n                          (assoc m [k sub-k] v)) m v)) {} %)","user":"5e08c3dde4b0978307768fc8"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k v] m\n          [kk vv] v]\n        [[k kk] vv])))","user":"5794fd7be4b0e215f87e8476"},{"code":"#(into {} (for [[frst scnd] % [frst2 scnd2] scnd] [[frst frst2] scnd2]))","problem":146,"user":"50ee145de4b06330c1f87c53"},{"code":"#(into {} \n  (for [[k v] %\n        [vk vv] v]\n    [[k vk] vv]))","problem":146,"user":"53513d28e4b084c2834f4ae3"},{"problem":146,"code":"(fn [m]\n\t(into {}\n          (for [[k v] m\n                [i d] v]\n            [[k i] d])))","user":"536c1531e4b0fc7073fd6e36"},{"code":"#(into {} (for [[k v] % [l v] v] [[k l] v]))","problem":146,"user":"4f0664bd535dcb61093f6c0f"},{"problem":146,"code":"#(into {} (for [o % i (val o)] [[(key o) (key i)] (val i)]))","user":"57235dc4e4b0c5bde472c0e2"},{"code":"(fn [xs]\r\n   (reduce conj {} \r\n      (for [[x ys] xs\r\n        [y z] ys]\r\n     \t\t(assoc {} [x y] z))))","problem":146,"user":"4fee04a0e4b0678c553fc308"},{"problem":146,"code":"(fn [l]\n  (into {}\n        (for [[x y] l,\n              [a b] y]\n          [[x a] b])))","user":"54848141e4b0e286459a119e"},{"problem":146,"code":"(fn flat3 [m]\n  (into {}\n    (apply concat \n      (for [[k v] m]\n        (apply concat\n          (for [[k2 v2] v]\n            {[k k2] v2}))))))","user":"5143824ae4b0b4fb4ace5f36"},{"problem":146,"code":"(fn [m]\n\t(into '{} (for [[x y] m]\n\t  (into '{} (for [[a b] y]\n\t    {[x a] b})))))","user":"53da3fcde4b0e771c3025497"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [kv1 m kv2 (second kv1)\n              :let [k1 [(first kv1) (first kv2)]\n                    v (get-in m k1)]]\n          [k1 v])))","user":"534e60c2e4b084c2834f4ab2"},{"problem":146,"code":"(fn tree-table [tree]\n    (apply merge (for [myk (keys tree) \n        :let [myv (tree myk)]]\n     (into {} (for [k (keys myv) \n          :let [v (myv k)]]\n        [[myk k] v])))))","user":"5510aa92e4b06e50f9beb188"},{"code":"(fn [paths]\n  (into {}\n    (for [first_key (keys paths)\n          second_key (keys (get paths first_key))]\n      [[first_key second_key] (get (get paths first_key) second_key)])))","problem":146,"user":"531b8c27e4b08068f379ed90"},{"problem":146,"code":"(fn [s] (into {} (for [[a b] s [c d] b] {[a c] d})))","user":"5db92996e4b010eb3c36cd50"},{"problem":146,"code":"(fn [tree] (into {} (for [[k1 subtree] tree [k2 v] subtree] [[k1 k2] v])))","user":"50ba3acae4b03e68e4411c78"},{"problem":146,"code":"#(into {} (for [[i j] % [k h] j] [[i k] h]))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":146,"code":"#(reduce (fn [m [k v]]\n           (assoc m k v))\n         '{}\n         (for [[top-k top-v] %\n               [in-k in-v] top-v]\n           [[top-k in-k] in-v]))","user":"54a1f494e4b09f271ff37c52"},{"code":"#(into {} (for [[k v] %, [k' v'] v] [[k k'] v']))","problem":146,"user":"509c03f3e4b085ae113522a8"},{"code":"(fn flt [src]\n  (into {}\n   (for [m1 src m2 (val m1)] \n    [[(key m1) (key m2)] (val m2)]\n   )\n   )\n )","problem":146,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":146,"code":"(fn [m]\n  (into\n   {}\n  (mapcat\n   (fn [[k v]]\n     (if (map? v)\n       (map\n       (fn [[inner-k inner-v]]\n         [[k inner-k] inner-v]\n         )\n        v)\n       [k v]))\n   m)))","user":"5bab5440e4b0a20761a23475"},{"code":"(fn [m]\n  (into {} (for [[k v] m [k1 v2] v] [[k k1] v2])))","problem":146,"user":"4f29eb2ae4b0d6649770a037"},{"problem":146,"code":"(fn [m] \n  (into {} \n        (for [[k1 v1] m\n              [k2 v2] v1]\n          [[k1 k2] v2])))","user":"539e717fe4b0ca733b974488"},{"problem":146,"code":"(fn flat-map [m]\n  (into {} (for [[k v] m\n                 [k2 v2] v]\n             [[k k2] v2])))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":146,"code":"#(into {}\n       (for [[k v] %\n             [k2 v2] v]\n         [[k k2] v2]))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":146,"code":"#(into {}\n       (for [[k v] % [x y] v] {[k x] y}))","user":"5b59d176e4b02d533a91bd86"},{"problem":146,"code":"(fn tree-to-table [tree]\n  (into {}\n        (for [[k v] tree\n              [ks v] (if (map? v) (tree-to-table v) [[[] v]])]\n          [(cons k ks) v])))","user":"526e5159e4b03e8d9a4a7316"},{"problem":146,"code":"#(into {} (for [x %] \n            (into {} (for [y (second x)] \n                       (hash-map (vector (first x) (first y)) (second y))))))","user":"594a7ed1e4b07ddc2dafae02"},{"code":"#(into{}(for[[k v]%[a b]v][[k a]b]))","problem":146,"user":"5088082ae4b0198722bd9854"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k v] m\n              [vk vv] v]\n          [[k vk] vv])))","user":"5522cd9ae4b0882d96d091ab"},{"code":"(fn tree-table [m]\r\n  (let [key-values (for [x m y (second x)] [[(first x) (first y)] (second y)])]\r\n    (into {} key-values)))","problem":146,"user":"4fb266a5e4b081705acca28c"},{"code":"(fn [m]\n  (apply conj {}\n    (for [k (keys m)]\n      (if-let [in-keys (keys (get m k))]\n        (reduce conj (map #(assoc {} (conj [k] %) %2) in-keys (vals (get m k))))\n        {k nil}))))","problem":146,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(fn [m]\n  (apply hash-map\n    (apply concat\n      (apply concat\n        (for [item m]\n          (for [inner-item (second item)]\n          [[(first item) (first inner-item)] (second inner-item)]))))))","problem":146,"user":"4f5c0549e4b0030a34fb2b1a"},{"problem":146,"code":"(fn [m]\n   (into {} (for [[sk sv] m\n                  [k v] sv]\n              [[sk k] v])))","user":"55895eade4b059ccff29b202"},{"problem":146,"code":"(fn [coll]\n    (into {} (for [a (keys coll)\n                   b (get coll a)]\n               [[a (key b)] (val b)])))","user":"532f8569e4b019098a6f8b4f"},{"problem":146,"code":"#(into {} (for [[k1 st] %1, [k2 v] st] [[k1 k2] v]))","user":"4e7e4d5c535db169f9c7970f"},{"code":"#(into {}\n  (apply concat\n    (for [[k v] %]\n      (for [[ik iv] v]\n        [[k ik] iv]))))","problem":146,"user":"506a1985e4b01dc6af13f83e"},{"problem":146,"code":"(fn tree-table [tree]\n  (let [tuples (for [[k v] tree [j branch] v] [[k j] branch])]\n    (into {} tuples)))","user":"53bf0913e4b0c98a41f5cc99"},{"code":"#(into {}\n  (flatten\n    (for [[k v] %] (for [[x y] v] {[k x] y}))))","problem":146,"user":"4fccb31be4b0ee37620e1868"},{"code":"(fn [tree]\n  (let [result (for [first-key (keys tree)]\n                 (let [child (tree first-key)]\n                   (for [second-key (keys child)]\n                     (hash-map (vector first-key second-key)\n                               (child second-key)))))]\n    (apply merge (map #(apply merge %) result))\n    ))","problem":146,"user":"52a55adee4b0c58976d9abe7"},{"problem":146,"code":"(fn [m]\n  (reduce conj {}\n          (apply concat (for [[k v] m]\n                          (for [i v]\n                            (vector (vector k (first i))\n                                    (second i)))))))","user":"532bce35e4b09d4e7a9b5536"},{"code":"#(apply conj (for [x %,y (val x)] {[(key x) (key y)],(val y)}))","problem":146,"user":"4ec5d62c535d6d7199dd36ba"},{"code":"#(into {}\n  (for [[a b] % [c d] b] [[a c] d]))","problem":146,"user":"4daddc19c9a9d6ed4599dc57"},{"problem":146,"code":"#(into {} (for [[k v] % \n                    [k2 v2] v]\n                [[k k2] v2]))","user":"53b544d4e4b047364c0444bd"},{"code":"#(apply hash-map\r\n  (mapcat identity\r\n    (for [[ok ov] % [ik iv] ov] [[ok ik] iv])))","problem":146,"user":"504e14c2e4b078edc5f593bf"},{"problem":146,"code":"#(into {} (for [[k i] % [s v] i] [[k s] v]))","user":"512b07f7e4b078b06821febb"},{"code":"#(apply merge (for [[k j] %] (apply merge (for [[i v] j] {[k i] v}))))","problem":146,"user":"50ed4626e4b01236b1d4983c"},{"code":"(fn [m]\n    (apply merge (for [x m :let [y (first (rest x))\n                    z (apply merge (for [p y] {[(first x) (first p)] (second p)}))]]\n      z)))","problem":146,"user":"526f9715e4b03e8d9a4a7372"},{"code":"(fn flattn[mm]\n  (let [repack \n        (fn repack[mm]\n  (let [x\n    (for [\n        kmm (keys mm)\n        :let [vmm (mm kmm)]\n        km (keys vmm)\n        :let [vm (vmm km)]\n          ] \n        \n          [[kmm km] vm ]\n    )\n        ]\n    x\n  )\n) ]\n        \n        \n        \n  (reduce \n   \t#(assoc %1 (first %2) (second %2))\n    {}\n   (repack mm)\n   )\n  )\n  )","problem":146,"user":"4fb03cf4e4b081705acca262"},{"code":"(fn kk [m]\n          (letfn [(assoc-m [ret coll]\n                           (if (empty? coll)\n                               ret\n                             (let [kv (first coll)]\n                               (assoc-m (assoc ret (first kv) (last kv)) (rest coll)))))]\n                 (let [coll (for [kv m kvv (last kv)]\n                                 [(vector (first kv) (first kvv)) (last kvv)])]\n                   (assoc-m {} coll))))","problem":146,"user":"4eec82fe535d93acb0a668ae"},{"problem":146,"code":"(fn [tree]\n  (->> (for [[row col] tree] (map (fn [col] (vector [row (first col)] (second col))) col))\n         (apply concat)\n         (into {})\n   )\n  )","user":"60752ef6e4b069485764de55"},{"code":"#(letfn [(f [[x m]] (into {} (map (fn [[k v]] [[x k] v]) m)))]\n  (apply merge (map f %)))","problem":146,"user":"5233ad08e4b07e3ee2be83ac"},{"problem":146,"code":"#(into {} (for [[k1 t] % [k2 v] t] {[k1 k2] v}))","user":"53ff602fe4b0de5c418485ff"},{"problem":146,"code":"(fn trees-tables [mapa]\n  (into {} (for [[k v] mapa\n                 [k2 v2] v]\n             [[k k2] v2])))","user":"59e55cc8e4b08badc2a0c555"},{"problem":146,"code":"#(apply hash-map \n        (apply concat \n               (for [[k v] %] \n                 (interleave \n                  (map vector (repeat k) (keys v)) \n                  (vals v)))))","user":"53e76bb2e4b036ad0777e47d"},{"code":"(fn [ms] (apply merge (flatten (for [x (map key ms) :let [v (get ms x)]] (map (fn [v] {[x (key v)] (val v)}) v)))))","problem":146,"user":"4fab31a8e4b081705acca215"},{"code":"(fn [s]\n  (into {}\n    (for [[k v] s\n          [k' v'] v]\n      [[k k'] v'])))","problem":146,"user":"51195e77e4b055cfb310d499"},{"problem":146,"code":"(fn [m] (into {} (for [[k v] m\n                       [vk vv] v]\n                   (vec [[k vk] vv]))))","user":"55d3811be4b0e31453f64a69"},{"code":"(fn [hashmap] (into {}(for [[k v] hashmap [vk vv] v] [[k vk] vv])))","problem":146,"user":"4fc4f347e4b081705acca35d"},{"problem":146,"code":"(fn m-transform [m]\n  (into {} (apply concat (for [[k hmv] m]\n                           (for [[kk value] hmv]\n                             {[k kk] value})))))","user":"52d84ea7e4b09f7907dd1390"},{"code":"(fn [mp]\n  (reduce #(assoc %1 (first %2) (second %2)) {}\n          (for [[ok ov] mp\n                [ik iv] ov]\n            [[ok ik] iv])))","problem":146,"user":"529ce629e4b04e0c58e87b6e"},{"code":"#(reduce merge \n  (for [[k v] % [k2 v2] v] {[k k2] v2}))","problem":146,"user":"4db3393e535df7e46ed9b6cc"},{"problem":146,"code":"(fn [mhm]  (into {} (for [[k hm] mhm, [k2 v] hm] [[k k2] v])))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":146,"code":"#(apply merge (for [[k v] %\n                    [k' v'] v] {[k k'] v'}))","user":"5a67cedbe4b0512ff01cd9ee"},{"problem":146,"code":"(fn doublet-keyify [nested-hashmap]\n  (into {} (apply concat (for [top-key nested-hashmap]\n                           (for [inner-key (nested-hashmap (first top-key))]\n                             (vector (vector (first top-key) (first inner-key))\n                                     (second inner-key)))))))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"(fn [m] (reduce #(into %1 %2)\n\t\t       (for [entry-level-1 m\n\t\t\t     entry-level-2 (second entry-level-1)]\n\t\t\t {[(first entry-level-1) (first entry-level-2)] (second entry-level-2)})))","problem":146,"user":"51937eb3e4b04df54c098022"},{"problem":146,"code":"(fn [m]\n  (into {} (apply concat (for [[k v] m] (for [[k1 v1] v] [[k k1] v1])))))","user":"5f0a65dae4b09a3f05b71806"},{"problem":146,"code":"(fn [trees]\n    (into {}\n      (for [x trees\n            y (second x)]\n        [[(first x) (first y)] (second y)]\n        )))","user":"544e9022e4b0e3978000698b"},{"code":"(fn [m]\n  (into {}\n    (for [[k v] m\n          [k2 v2] v]\n      [[k k2] v2])))","problem":146,"user":"4ed0e139535d44c135fd68c7"},{"problem":146,"code":"(fn trees_to_tables [m]\n    (into {} (for\n        [\n            top_level_key (keys m)\n            next_level_key (keys (m top_level_key))\n        ]\n        [[top_level_key next_level_key] ((m top_level_key) next_level_key)]\n    ))\n)","user":"5db7376fe4b010eb3c36cd43"},{"code":"(fn [m]\n   (apply\n    merge\n    (map\n     (fn [x]\n       (apply\n        hash-map\n        (apply\n         concat\n         (map\n          (fn [y]\n            [[x y] ((m x) y)]\n            )\n          (keys (m x))\n          )\n         )\n        )\n       )\n     (keys m)\n     )\n    )\n   )","problem":146,"user":"52586d24e4b0cb4875a45cb0"},{"problem":146,"code":"#(apply merge (flatten (map (fn [[k v]] \n            (for [[ki vi] v] \n              {[k ki] vi})) %)))","user":"5d764e52e4b02e6b30c93524"},{"code":"#(into {} (for [n (keys %) m (get % n)] \n  [[n (first m)] (second m)]))","problem":146,"user":"4fe8fda4e4b0547ebccb2438"},{"code":"(fn [data]\n  (let [vecs (for [[k1 v1] data [k2 v2] v1]\n    [[k1 k2] v2])]\n    (reduce #(assoc %1 (first %2) (second %2)) {} vecs)))","problem":146,"user":"4ec6c878535d6d7199dd36d5"},{"problem":146,"code":";#(into {} (for [[k1 v1] % [k2 v2] v1] [[k1 k2] v2]));;another solution\n#(reduce (partial apply assoc) {}\n         (for [keyVal %\n               value (second keyVal)]\n           (list [(first keyVal) (first value)] (second value))))","user":"556c70dae4b09a3098a524fd"},{"code":"(fn [m] (into {} (for [[k v] m [nk nv] v] [[k nk] nv])))","problem":146,"user":"4efcac3a535de96065cf507e"},{"code":"#(into {} (for [k (keys %)\n                v (get % k)]\n            [[k (key v)] (val v)]))","problem":146,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":146,"code":"(fn [mmm] (reduce #(assoc % (first %2) (second %2)) {} (for [[a b] mmm [c d] b ]\n         (list [a c] d))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"#(into {} (for [ [x y]  % [x1 y1] y ]  [[x x1] y1 ]))","problem":146,"user":"50b25f2ce4b03ea88043355f"},{"problem":146,"code":"(fn [m] (reduce\n         (fn [fm i] (reduce\n                     (fn [mm ii] (assoc mm (vector (first i) (first ii)) (second ii)))\n                     fm\n                     (second i)))\n         '{}\n         m))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":146,"code":"(fn [m]\n  (apply hash-map\n  (apply concat\n  (apply concat\n  (for [[k v] m] \n    (for [[vk vv] v] [[k vk] vv]))))))","user":"53286f84e4b09d4e7a9b5505"},{"code":"#(into {} (for[[k v] % [i j] v][[k i] j]))","problem":146,"user":"4e778d36535d324fb2983d71"},{"problem":146,"code":"(fn flatten-map [m] (into {} (for\n                        [[a b] m [c d] b]  [[a c] d])))","user":"5654e024e4b0f9d632dd848d"},{"problem":146,"code":"#(reduce merge (flatten \n  (for [[k v] %]\n    (for [[kk vv] v]\n      (list {[k kk] vv})\n      )\n    )\n  ) )","user":"598085e6e4b021a7a535fdd3"},{"problem":146,"code":"#(into {}\n  (apply concat\n  (for [[x y] %]\n    (for [[z w] y]\n      [[x z] w]))))","user":"5a1c3c11e4b0ff51aa4b323d"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [[k v] mp\n        [vk vv] v]\n  (vec [[k vk] vv]))))","user":"5a42dbabe4b0447ef91cc5fc"},{"code":"(fn [hash]\n  (apply hash-map\n    (mapcat \n      (fn [[k1 v1]]\n        (mapcat\n          (fn [[k2 v2]] \n            [[k1 k2] v2]) \n          (seq v1))) \n      (seq hash))))","problem":146,"user":"5002b6e5e4b0678c553fc42c"},{"problem":146,"code":"(fn [m]\n  (into {}\n  (for [[k1 v1] m\n        [k2 v2] v1]\n  \t[[k1 k2] v2]))  )","user":"5553b924e4b0deb715856e06"},{"problem":146,"code":"(fn flatten-map\n  ([m]\n   (->> (flatten-map m [])\n        flatten\n        (apply merge-with merge)))\n  ([m path]\n   (if-not (map? m)\n     {path m}\n     (for [[k v] m]\n       (flatten-map v (conj path k))))))","user":"55f2e47de4b06e875b46ce4d"},{"problem":146,"code":"(fn flatten-map [m]\n  (into {}\n    (for [[k v]   m\n          [k2 v2] v]\n      [[k k2] v2])))","user":"56877fcbe4b0dcc4269f405e"},{"problem":146,"code":"#(into {} (for [[x n] % [x2 n2] n] [[x x2] n2]))","user":"5f727dd6e4b02876ed9fd090"},{"problem":146,"code":"(fn walk\n  ([xs] (walk xs []))\n  ([xs prnts]\n    (reduce merge (map (fn [[k v]]\n      (if (map? v) (walk v (conj prnts k)) {(conj prnts k) v})\n    ) xs))\n  )\n)","user":"543bb568e4b032a45b869334"},{"problem":146,"code":"#(apply hash-map (reduce concat [](for [ a % b ( second a) ] [ (vec ( cons (first a) [(first b)])) (last b) ])))","user":"5b3aa98be4b02d533a91bbca"},{"problem":146,"code":"(fn flatten [m] (reduce (fn [acc x] (let [[k v] x]\n                                      (into acc (for [[k' v'] v]\n                                                  [[k k'] v']))))\n                        {} m))","user":"5ee93720e4b029a2061bbeb7"},{"problem":146,"code":"(fn [map-of-maps]\n  (into {}\n    (for [[k m] map-of-maps [k2 v] m]\n      [[k k2] v])))","user":"57a4fa50e4b0a966079561f1"},{"problem":146,"code":"(fn f\n  [c]\n  (reduce (fn [r1 [k v]]\n            (into r1 (reduce (fn [r2 [ik iv]]\n                                   (into r2 {[k ik] iv}))\n                                 {}\n                                 v)))\n          {}\n          c))","user":"5e1c3e6ee4b0dc9594008530"},{"code":"#(into {} (for [[x y] %\n         [x2 y2] y] [[x x2] y2]))","problem":146,"user":"502ade49e4b0614b52996120"},{"code":"#(apply merge (for [[a b] %, [c d] b]  {[a c] d} ))","problem":146,"user":"523ed522e4b057c4b7cd0a78"},{"problem":146,"code":"(fn tree-into-table [coll]\n  (apply hash-map\n    (apply concat\n      (apply concat\n        (for [e coll]\n          (for [p (nth e 1)]\n            [[(nth e 0) (first p)] (second p)]))))))","user":"594c0bd7e4b07ddc2dafae56"},{"problem":146,"code":"(fn [xs] (into {} (for [[k v] xs [x y] v] [[k x] y])))","user":"54ab502fe4b09f271ff37cc4"},{"code":"#(into {} \n  (for [[k v] % [k2 v2] v] [[k k2] v2]))","problem":146,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":146,"code":"(fn [m]\n  (into {} \n      (for [[k v] m\n            [x y] v]\n        (vec [[k x] y]))))","user":"5a4443cae4b0447ef91cc60f"},{"code":"#(into {} (for [[k v] % [kk vv] v]\n    [[k kk] vv]))","problem":146,"user":"522eb5cce4b01cdb292c5f0c"},{"problem":146,"code":"(fn tit [tr]\n  (reduce conj \n    (for [t (keys tr) \n        tt (keys (get tr t))\n        :let [tv (get tr t)\n              v {[t tt] (get-in tr [t tt])}]]\n      v\n    )\n  )\n)","user":"5763818ae4b0994c1922fbc7"},{"code":"(fn    flat [m]\n          (into {} (for [[x y]  m   [z  a]  y  ]  [[x z] a])))","problem":146,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"#(into {} (for [ [k x] % [p v] x] [ [k p] v]))","problem":146,"user":"4ef77edb535dced4c769f254"},{"problem":146,"code":"(fn [in]\n  (into {} (for [[k,v] in\n        [k2, v2] v]\n    [[k k2] v2])))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":146,"code":"(fn my-trees-into-tables \n  [tree]\n  (into {} (for [[key val] tree [key-in val-in] val]\n             [[key key-in] val-in])))","user":"509a25b7e4b0efbae1fbc0a8"},{"problem":146,"code":"(fn [coll] \n  (reduce #(apply (partial assoc %1) %2) {}\n  \t(for [[a b] coll\n  \t\t  [c] b]\n    [[a c] (get-in coll [a c])])))","user":"4fe83efbe4b07c9f6fd12c3b"},{"problem":146,"code":"#(into {} (for [[a b] % [c d] b] (vec [[a c] d])))","user":"6074e088e4b069485764de4d"},{"problem":146,"code":"(fn t2t\n    ([m] (t2t [] m))\n    ([ks m]\n     (if (map? m)\n       (into {} (map (fn [[k v]] (t2t (conj ks k) v)) m))\n       [ks m])))","user":"516db4f6e4b046df6fbb76a0"},{"code":"(fn [t]\n\t(apply hash-map\n\t\t(apply concat\n\t\t\t(apply concat \n\t\t\t\t(for\n\t\t\t\t\t[key (keys t)]\n\t\t\t\t\t(for \n\t\t\t\t\t\t[inner-key (keys (get t key))]\n\t\t\t\t\t\t[[key inner-key] (get (get t key) inner-key)]))))))","problem":146,"user":"514d7e29e4b019235f6c0587"},{"code":"#(apply merge (for [[k1 m] % [k2 v] m] {[k1 k2] v}))","problem":146,"user":"4e6e10d8535d5021c1a895fd"},{"problem":146,"code":"#(into {}\n       (for [[k v] %\n             [k1 v1] v]\n         [[k k1] v1]))","user":"5f37263de4b0574c87022c4e"},{"code":"(fn [form]\n  (apply merge (for [a form\n               b  (second a)]\n           {[(first a) (first b)] (second b)})))","problem":146,"user":"521d709ae4b050d5da0427ef"},{"problem":146,"code":"(fn treeIntoTables[tree]\n  (into {} (for [x (keys tree) y (tree x)] (vector [x (first y)] (second y)))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":146,"code":"(fn [m]\n  (->> (for [k (keys m)]\n         (for [l (keys (m k))]\n           {[k l], ((m k) l)}))\n       (mapcat identity)\n       (apply merge)))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"code":"(fn [x]\n  (into {}\n    (for [[k1 h] x,\n          [k2 v] h]\n      [[k1 k2] v])))","problem":146,"user":"4e8338d6535db62dc21a62d3"},{"problem":146,"code":"(fn [t] \n    (into {} (for [[k1 v1] t\n          [k2 v2] v1] \n      [[k1 k2] v2])))","user":"54febf4be4b07d26eda61d45"},{"problem":146,"code":"(fn [mp]\n  (into {}\n        (for [[k r] mp\n              [l v] r]\n          [[k l] v])))","user":"5bc255b7e4b07a9b28b10029"},{"problem":146,"code":"(fn [x] (apply merge (for [[k v] x [vk vv] v :let [res {[k vk] vv}]] res)))","user":"577829f9e4b0979f8965165a"},{"problem":146,"code":"(fn flatten-hash-map [map]\n  (apply merge (for [[k1 v1] (seq map)\n                     [k2 v2] v1]\n                 {[k1 k2] v2})))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":146,"code":"(fn [m]\n  (into {} \n        (for [[k v] m\n              [kk vv] v]\n          [[k,kk] vv]\n          )\n        )\n  )","user":"54a1d643e4b09f271ff37c50"},{"code":"#(into {} (mapcat (fn [[k1 v1]]\n  (for [[k2 v2] v1]\n      [[k1 k2] v2])) %))","problem":146,"user":"4e976f79535dbda64a6f6b55"},{"code":"(fn [m]\n  (->> (for [[k v] m\n             [k1 v1] v]\n          [[k k1] v1])        \n       (into {})))","problem":146,"user":"5012ec0ae4b0c87326002230"},{"code":"(fn [map-o-maps]\n    (apply hash-map \n     (apply concat\n            (for [key1 (keys map-o-maps)\n                  key2 (keys (get map-o-maps key1))]\n              [(vector key1 key2) (get (get map-o-maps key1) key2)]))))","problem":146,"user":"53487737e4b084c2834f4a59"},{"problem":146,"code":"(fn [coll]\n  (let [w (fn [m]\n            (for [k m]\n              (for [v (second k) \n                    :let [f [(first k) (first v)]]]\n                   (vector f (second v)))))] \n    (reduce into {} (map #(into {} %) (w coll)))))","user":"583667c7e4b089d5ab817cfb"},{"code":"(fn flatten-map [m]\n  (let [f \n        (for [e1 m :let [k1 (first e1) v1 (second e1)] e2 v1 :let [k2 (first e2) v2 (second e2)]] \n          [[k1 k2] v2])]\n    (apply hash-map (interleave (map first f) (map second f)))))","problem":146,"user":"4e7d1c22535db169f9c796c5"},{"code":"(fn [h]\n  (into {} (for [k1 (keys h) k2 (keys (get h k1)) :when (map? (get h k1))]\n                 [[k1 k2] (get (get h k1) k2)])))","problem":146,"user":"52cca65be4b07d0d72b2736b"},{"problem":146,"code":"#(into {} (for [[ok ov] %\n         \t\t[ik iv] ov]\n     \t\t{[ok ik] iv}))","user":"50d882d4e4b01f0871336e69"},{"problem":146,"code":"(fn [in]\n  (into {}\n        (for [[a b] in c (seq b)]\n          [[a (first c)] (second c)])))","user":"5564c113e4b0c656e3ff180d"},{"problem":146,"code":"(fn flatten [x]\n  (into {} (for [[k v] x [k2 v2] v] [[k k2] v2])))","user":"5f5f2eafe4b02876ed9fcff5"},{"code":"(fn tree->table [m]\n (into {} (for [[k1 m0] m [k2 v] m0] [[k1 k2] v])))","problem":146,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"#(into {} (for [[x y] % [i j] y ] [[x i] j]))","problem":146,"user":"4ddbd934535d02782fcbe9fc"},{"code":"#(into {}\n       (for [m (keys %)\n             k (keys (% m))]\n         {[m k] ((% m) k)}))","problem":146,"user":"535d910ae4b04ce2eb3ed2c5"},{"problem":146,"code":"(fn [M]\n  (apply hash-map(reduce concat (for [x (keys M)\n      y (keys (M x))]\n    [[x y] ((M x) y)]\n    )))\n  )","user":"5649615be4b0284900eef641"},{"problem":146,"code":"(fn fl [mp]\n  (into {}\n    (for [[k v] mp\n          [vk vv] v]\n          (vec [[k vk] vv]))))","user":"54b54d1be4b05787c3b1639c"},{"code":"#(into {} (for [[k v] %1\n                [k2 v2] v]\n               {[k k2] v2}))","problem":146,"user":"500900dee4b0144d4f561e42"},{"problem":146,"code":"#(into {} (for [[k1 kv] % [k2 v] kv] [[k1 k2] v]))","user":"532ecd44e4b019098a6f8b49"},{"code":"(fn [s] ((fn f [m key-vec]\n  (apply merge\n    (map #(let [x (m %), nkv (conj key-vec %)]\n        (if (map? x)\n        (f x nkv)\n        (hash-map nkv x))) (keys m)))) s []))","problem":146,"user":"4fa30027e4b081705acca187"},{"problem":146,"code":"#(apply merge (for [[k v] %]\n                 (->> (for [[l w] v] [[k l] w])\n                      (into {}))))","user":"54a677a9e4b09f271ff37c88"},{"code":"(fn flamap [m]\n  (apply merge \n    (for [k (keys m) v (get m k)] {[k (first v)] (second v)})))","problem":146,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"(fn [t]\n  (into {}\n        (for [[a b] t\n              [u v] b]\n          [[a u] v])))","problem":146,"user":"4e7f51eb535db966e863cc3f"},{"code":"(fn [trees]\r\n  (reduce conj\r\n          (flatten\r\n           (for [[k1 v1] trees]\r\n             (for [[k2 v2] v1]\r\n               {[k1 k2] v2})))))","problem":146,"user":"4de2f44f535d08e6dec9fdec"},{"code":"#(apply hash-map \n  (apply concat \n    (for [x (keys %) y (keys (get % x)) \n          :let [z (get (get % x) y)]] \n            (list [x y] z))))","problem":146,"user":"4ede361a535d10e5ff6f5332"},{"problem":146,"code":"#(into {} (for [[k v] % [k2 v2] v] [[k k2] v2]))\n\n; original solution\n;#(into\n;  (hash-map)\n;  (reduce-kv (fn [m k v]\n;    (concat m\n;      (reduce-kv (fn [m2 k2 v2]\n;        (assoc m2 [k k2] v2)\n;      ) {} v)\n;    )\n;  ) {} %)\n;)","user":"5731283ae4b0cd1946bd0fbe"},{"problem":146,"code":"(fn tree-into-tables [outer-map]\n  (apply merge (flatten (for [[outer-key inner-map] outer-map]\n                          (map (fn [[inner-key inner-value]]\n                                 {[outer-key inner-key] inner-value})\n                               inner-map)))))","user":"5d49ec5ee4b0776584bd6f1c"},{"problem":146,"code":"(fn [x]\n  (into {}\n\t  (for [[xk xv] x\n    \t    [yk yv] xv]\n\t    (vector [xk yk] yv))))","user":"56aad332e4b03c432f187337"},{"code":"(fn [m] (into {} \n  (for [[k1 v1] m\n        [k2 v2] v1] [[k1 k2] v2])))","problem":146,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":146,"code":"#(into {} (for [[i m] %  [j v] m] [[i j] v]))","user":"56795deae4b05957ce8c6187"},{"problem":146,"code":"#(into {}\n       (for [pairs %\n             :let [[key val] pairs]\n             in-pairs val\n             :let [[in-key val] in-pairs]]\n         [[key in-key] val]))","user":"6026737ee4b0d5df2af2222f"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (for [[k v] m\n        [vk vv] v]\n    (vec [[k vk] vv]))))","user":"5414b7c4e4b01498b1a719ed"},{"code":"(fn [m]\n  (apply hash-map\n    (apply concat\n           (for [[k1 v1] m]\n             (apply concat\n                    (for [[k2 v2] v1]\n                      [[k1 k2] v2]))))))","problem":146,"user":"516199bbe4b009fba0926e36"},{"code":"(fn [m] (into {} (for [[k1 v1] m [k2 v2] v1] [[k1 k2] v2])))","problem":146,"user":"500854c4e4b028e089d3518c"},{"code":"#(let [ks (for [x % y (second x)] [(first x) (first y)])]\n              (zipmap ks (map (partial get-in %) ks)))","problem":146,"user":"4f1b0008535d64f603146473"},{"code":"(fn [m]\n  (apply merge (for [e (keys m)\n        a (m e)]\n    {[e (first a)] (second a)})))","problem":146,"user":"4ee75ec2535d93acb0a66867"},{"code":"#(apply hash-map (apply concat (apply concat (for [[k1 v1] %] (for [[k2 v2] v1] [[k1 k2] v2])))))","problem":146,"user":"4e89f46c535d3e98b8023288"},{"code":"#(into{}(for[[a b]%[c d]b][[a c]d]))","problem":146,"user":"4f296a80e4b0d6649770a02a"},{"code":"(fn dd [ n ] \r\n  (let [j (atom {})] \r\n             (doseq  [x n]\r\n         (doseq [y (second x)]\r\n              ( reset! j (assoc @j [(first x) (first y)] (second y) ))\r\n            )) @j ))","problem":146,"user":"50646c01e4b007509339a58b"},{"code":"(fn [m]\n  (reduce conj\n    (for [k (keys m) \n          kk (keys (m k))]\n      {[k kk] ((m k) kk)})))","problem":146,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":146,"code":"(fn [mm]\n  (into {} (for [m mm]\n             (into {} (for [sm (val m)]\n                        {[(key m) (first sm)] (second sm)})))))","user":"5e12327ee4b099d064962fe5"},{"problem":146,"code":"(fn [map]\n  (into {} (for [[ok ov] map\n                 [ik iv] ov]\n             [[ok ik] iv])))","user":"55f85b93e4b03cbcff9738ae"},{"code":"(fn [tree]\n  (->>\n   (for [k1 (keys tree)\n         k2 (keys (tree k1))]\n     [[k1 k2] (get-in tree [k1 k2])])\n   (apply concat)\n   (apply hash-map)))","problem":146,"user":"52b65f26e4b0c58976d9ad43"},{"problem":146,"code":"#(letfn [(path-map [x] \n                  (for [k1 (keys x)\n                        :let [v1 (get x k1)]]\n                    (for [k2 (keys v1)\n                          :let [v2 (get v1 k2)]]\n                      {[k1 k2] v2} )))] \n  (apply merge (flatten (path-map %))))","user":"550e52dbe4b06e50f9beb165"},{"problem":146,"code":"(fn [m] (->> (for [[k m'] m\n                   [k' v] m']\n              [[k k'] v])\n             (apply concat ,,,)\n             (apply hash-map ,,,)))","user":"5e6ba862e4b04a83ad7cd27d"},{"code":"#(->>\n    (mapcat\n     (fn [[k v]]\n       (map (fn [[sk sv]] [[k sk] sv]) v))\n     %)\n    (into {}))","problem":146,"user":"4dddff47535d08e6dec9fdd4"},{"code":"#(into {} (for [[k1 k2] % [k v] k2] [[k1 k] v]))","problem":146,"user":"51b90b88e4b050a1176cd6a2"},{"problem":146,"code":"(fn [m]\n  (->> (for [[k1 v1] m]\n         (for [[k2 v2] v1]\n           {[k1 k2] v2}))\n       flatten\n       (into {})))","user":"5c995fa4e4b048ec896c5a96"},{"problem":146,"code":"(fn nest2flat [nm]     \n  (into {}  (for [k1 (keys nm)\n                  k2 (keys (nm k1))] (vector [k1 k2]  ((nm k1) k2))  )))","user":"579d9601e4b05b1deef9ae18"},{"problem":146,"code":"#(into {} (mapcat (fn [[k v]]\n                   (map (fn [[kk vv]]\n                          [[k kk] vv])\n                        (seq v)))\n                 (seq %)))","user":"59074b7ce4b047aa04b19951"},{"code":"#(into {} (for [k (keys %) [a b] (% k)]\r\n\t\t\t {[k a] b}))","problem":146,"user":"4dae4da5c9a9d6ed4e99dc57"},{"problem":146,"code":"(fn trees[n]\n  (into{}(for[[a b] n [c d] b] [[a c] d])))","user":"6085edade4b0736b099e42fc"},{"code":"(fn\n  [m]\n  (let [ks (keys m)]\n    (->>\n     (for [k ks\n          :let [vs (m k)]]\n      (->>\n       (for [v (keys vs)]\n        [[k v] (vs v)])\n       (apply concat)))\n     (apply concat)\n     (apply hash-map))))","problem":146,"user":"51852961e4b0da5a5be3babb"},{"problem":146,"code":"#(into {} (apply concat (for [[x y] %]\n                          (for [[z t] y]\n                            [[x z] t]))))","user":"565e0934e4b068f2fe63dc30"},{"code":"(fn [m]\n  (apply hash-map\n    (apply concat\n      (apply concat\n        (for [x m]\n          (let [f (first x)]\n            (for [y (second x)]\n              [[f (first y)] (second y)])))))))","problem":146,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":146,"code":"(fn [m] (into {} (for [[x v] m [y z] v] [[x y] z])))","user":"4f1ef6a0535d64f60314649b"},{"problem":146,"code":"(fn trees2table\n  [m]\n  (let [k (keys m) v (vals m)]\n    (apply hash-map\n           (mapcat list\n                (mapcat (fn [entry] (map (partial vector (key entry)) (keys (val entry)))) m)\n                \n                (mapcat vals v)))))","user":"557e9d17e4b05c286339e0d8"},{"problem":146,"code":"(fn [m]\n  (into {}\n    (for [[k1 v1] m [k2 v2] v1] [[k1 k2] v2])))","user":"562cb7cfe4b0a45d2ff83009"},{"code":"#(reduce (fn [r entity] (reduce (fn [r2 entity2] (conj r2 [[(first entity) (first entity2)] (last entity2)])) r (last entity))) {} %)","problem":146,"user":"507fbd77e4b089ade05efbd3"},{"problem":146,"code":"#(apply merge (map (fn [[x y]] (apply merge (map (fn [[a b]] {[x a] b}) y))) %))","user":"56d91a53e4b0ea9b8538f7ee"},{"code":"(fn tree-into-table [m]\n  (letfn [(path-map \n  \t\t\t[path m]\n  \t\t\t(if (map? m)\n    \t\t\t(mapcat #(path-map (conj path (key %)) (val %)) m)\n    \t\t\t[path m]))]\n  \t(apply hash-map (path-map [] m))))","problem":146,"user":"4fdf566fe4b05e33b9224f99"},{"code":"#(into {} \n  (for [[k m] %\n        [k2 v] m] (vector (vector k k2) v)))","problem":146,"user":"4f69f34fe4b07046d9f4ef90"},{"code":"#(apply merge (for [[k1 v] % [k2 v2] v] {[k1 k2] v2}))","problem":146,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":146,"code":"#(->> (for [[k v] % [k1 v1] v] {[k k1] v1})\n      (into {}))","user":"4ed45563535d10e5ff6f52c9"},{"problem":146,"code":"#(apply merge (for [k (keys %) k' (keys (% k))] (assoc {} [k k'] ((% k) k'))))","user":"5c165d3ee4b01240ff5671d1"},{"problem":146,"code":"(fn [mappy] (into {} (for [[k v] mappy [k1 v1] v] [[k k1] v1])))","user":"58d9772de4b0a4d5acaab63c"},{"code":"(fn [x] (into {} (map #(vector % (get-in x %)) (mapcat #(map vector (repeat %) (keys (x %)))\n           (keys x)))))","problem":146,"user":"50e87427e4b0ebbe794eb7e8"},{"problem":146,"code":"(fn solve [m]\n  (apply merge (for [[k1 cl] m\n                     [k2 v] cl]\n                 {[k1 k2] v})))","user":"60537cd1e4b04c8f2157d152"},{"problem":146,"code":"(fn tree->table\n  [m]\n  (->> (map (fn [[k v]]\n              (let [ks (keys v)\n                    vs (vals v)]\n                (map #(hash-map (vector k %1) %2) ks vs)))\n            m)\n       flatten\n       (apply merge)))","user":"4e586949535d8a8b8723a292"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (flatten (for [[k v] m]\n                   (map\n                     (fn [[kk vv]] {[k kk] vv}) v)))))","user":"529dfc6de4b04e0c58e87b8a"},{"problem":146,"code":"(comp\n #(into (sorted-map) %)\n (fn [m1]\n  (apply concat m1))\n (fn [m]\n  (for [k (keys m)]\n    (for [inner-k (keys (m k))]\n      [[k inner-k] ((m k) inner-k)]))))","user":"53ae0c50e4b047364c044471"},{"problem":146,"code":"(fn [input]\n    (apply merge (mapcat (fn [[key va]] (map (fn [[k v]] {[key k] v}) (vec va))) (vec input))))","user":"5f548678e4b0a0bc16850a7e"},{"problem":146,"code":"#(apply hash-map (apply concat (for [ [k0 m] % [k1 v] m ] [[k0 k1] v])))","user":"530bf87ee4b02e82168697d5"},{"problem":146,"code":"#(into {} (for [[k v] % [x y] v] [[k x] y]))","user":"53a01fb1e4b0ca733b9744a6"},{"problem":146,"code":"(fn [m]\n  (into {}\n        (apply concat\n               (for [[k1 v1] m]\n                 (for [[k2 v2] v1]\n                   [[k1 k2] v2])))))","user":"56df254be4b0ca2494a095ea"},{"problem":146,"code":"(fn [b]\n  (apply merge (for [k (keys b) l (keys (b k))]\n                  {[k l] (get-in b [k l])})))","user":"56990b68e4b0542e1f8d143a"},{"code":"(fn [mp]\n\t(into {}\n\t\t(for [[k v] mp\n\t\t\t  [vk vv] v]\n\t\t\t(vec [[k vk] vv]))))","problem":146,"user":"51bdc609e4b0ff155d51d2b3"},{"problem":146,"code":"(fn [m] (into (empty m) (for [[k1 v1] m\n                              [k2 v2] v1]\n                          [[k1 k2] v2])))","user":"5bd0ea60e4b0e9689409ee45"},{"problem":146,"code":"(fn f [mm] \n  (into {}\n    (for \n      [\n       [k1 v1] mm \n       [k2 v2] v1]\n      [[k1 k2] v2])))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":146,"code":"(fn [mp]\n  (apply merge\n         (apply concat (for [[k1 m] mp]\n                         (for [[k2 v] m]\n                           {[k1 k2] v})))))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":146,"code":"(fn flatten [input]\n  (into {}\n  (for [[k v] input\n        [kin vin] v]\n    [[k kin] vin])))","user":"57db2369e4b0bd073c20241f"},{"problem":146,"code":"(fn [m]\n    (into {}\n          (for [[k1 v1] m\n                [k2 v2] v1] [[k1 k2] v2])))","user":"500d3160e4b05f7c30cfa6a1"},{"problem":146,"code":"(fn flatten-map [m]\n  (into {} (for [[k1 v1] m\n        \t\t [k2 v2] v1]\n    \t\t\t\t[[k1 k2] v2])))","user":"53b39d82e4b047364c0444a6"},{"problem":146,"code":"(fn [t]\n  (into {} \n        (for [[k v] t\n              [k1 v1] v]\n          [[k k1] v1])))","user":"58ef4db9e4b056aecfd47dc6"},{"code":"(fn f [m]\n  (let [fns (for [i m j (val i)]\n              [(key i) (key j)])\n        rcs (map #(get-in m %) fns)]\n    (zipmap fns rcs)))","problem":146,"user":"4dc97aec535d5973398f9284"},{"code":"#(apply merge (for [[k v] %] (into {} (for [[ke va] v] [[k ke] va]))))","problem":146,"user":"521e8227e4b0dd19981ad082"},{"problem":146,"code":"(fn trees-into-tables\n  [m]\n  (->> (for [x (keys m)\n             :let [submap (m x)]]\n         (for [y (keys submap)\n               :let [v (submap y)]]\n           (list [x y] v)))\n       (reduce (partial apply concat) '())\n       (apply hash-map)))","user":"53b952eee4b047364c0444e6"},{"problem":146,"code":"(fn [m]\n  (into {} (for [[k1 v1] m \n                 [k2 v2] v1] \n             [[k1 k2] v2])))","user":"594bc16be4b07ddc2dafae39"},{"problem":146,"code":"(fn [l] \n (apply merge (flatten\n  (for [x l]\n    (for [y (second x)] \n      { [(first x) (first y)] (second y) })))))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":146,"code":"#(into {}\n       (for [[k m] %\n             [k1 v] m]\n         [[k k1] v]))","user":"5b0e6795e4b0cc2b61a3be03"},{"code":"#(into {}\n   (for [[k0 v0] %\n         [k1 v1] v0]\n     [[k0 k1] v1]))","problem":146,"user":"508923d5e4b06d8254e936e8"},{"problem":146,"code":"#(apply merge\n        (for [[k1 v1] %\n              [k2 v2] v1]\n          {[k1 k2] v2}))","user":"57c94c54e4b05aa3c4741d2c"},{"code":"(fn f [m]\n  (into {} (for [[k1 v1] m \n                 [k2 v2] v1]\n             [[k1 k2] v2])))","problem":146,"user":"4f1abbfb535d64f60314646e"},{"problem":146,"code":"(fn [m]\n  (reduce into\n  (for [e1 m]\n    (into {}\n    (for [e2 (e1 1)]\n      [[(e1 0) (e2 0)] (e2 1)])))))","user":"56a01895e4b0542e1f8d149f"},{"problem":146,"code":"(fn [m]\n    (let [s (for [x (keys m), y (keys (get m x))] [[x y] (get (get m x) y)])]\n      (reduce (fn [x y] (assoc x (first y) (second y) ) ) {} s)\n      )\n    )","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":146,"code":"(fn [m] (into {} (for [[k v] m [j v] v] [[k j] v])))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn [mx]\n  (into {} (for [[kx my] mx [ky vy] my] [[kx ky] vy])))","problem":146,"user":"4f8c6bf6e4b02e764a0a519b"},{"problem":146,"code":"(fn tree-to-table [col]\n  (into {} (for [[key val] col]\n             (into {} (for [[k v] val]\n                        [[key k] v])))))","user":"570ab24fe4b0b0fb43fd06b7"},{"problem":146,"code":"(fn x [m]\n  (into {}\n    (for [l1 (keys m)\n          l2 (keys (get m l1))]\n      [[l1 l2] (get-in m [l1 l2])])))","user":"605b49b7e4b079a07f8593f8"},{"problem":146,"code":"#(into {} (mapcat (fn [[k v]] (map (fn [[k2 v2]] [(conj [k] k2) v2]) v)) %))","user":"56ecc4b5e4b04a395b9a043e"},{"problem":146,"code":"#(into {} (mapcat (fn [[x y]] (map (fn [[a b]] [[x a] b]) y)) %))","user":"56b2573ce4b0982f16b37e02"},{"code":"(fn [m]\r\n  (into {}\r\n  \t(for [[mk mv] m, [mvk mvv] mv] [[mk mvk] mvv])))","problem":146,"user":"4fda108ee4b05e33b9224f46"},{"problem":146,"code":"(fn [m]\n  (into {} (for [k1 (keys m)\n        k2 (keys (m k1))]\n    [[k1 k2] ((m k1) k2)])))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn [m]\n    (->> (for [[k1 vm] m [k2 v] vm] [[k1 k2] v])\n      (apply concat)\n      (apply hash-map)))","problem":146,"user":"525f51bde4b0cb4875a45dc8"},{"problem":146,"code":"(fn delayer [m]\n  (into {} \n        (for [[k v] m [k2 v2] v]  [[k k2] v2])))","user":"57fc0719e4b0d3187e900987"},{"code":"(fn F [m]\n  (into {}\n        (for [[x y] m\n              [u v] y]\n          {[x u] v})))","problem":146,"user":"51a4416ae4b0def3c5c5868c"}]