[{"problem":41,"code":";#(apply concat (partition-all (dec %2) %2 %1))\n\n\n(fn [s n]\n    (for [i (range (count s)) :when (pos? (mod (inc i) n))] (get s i)))","user":"56629a7de4b0e91d5f5c5649"},{"problem":41,"code":"(fn [coll x]      (keep-indexed #(if (not (zero? (mod (inc %1) x))) %2) coll))","user":"6024544be4b0d5df2af2221f"},{"code":"(fn drop-nth [coll val]\n  (loop [s coll xs [] i val]\n    (if (empty? s)\n      xs\n      (if (= i 1)\n        (recur (next s) xs val)\n        (recur (next s) (conj xs (first s)) (dec i))))))","problem":41,"user":"4e0d5a5a535d04ed9115e7b5"},{"code":"(fn [s c] (mapcat #(take (dec c) %) (partition-all c s)))","problem":41,"user":"4f713878e4b07046d9f4f00a"},{"problem":41,"code":"(fn [col n]\n  (flatten (map #(take (dec n) %) (partition-all n col))))","user":"5c01ba2ce4b0bdcf453d1656"},{"code":"(fn [v n]\n  (flatten (partition-all (dec n) n v)))","problem":41,"user":"50bc4e73e4b0594b91591c3d"},{"problem":41,"code":"(fn [coll n]\n  (reverse\n    (loop [i 1\n         remaining coll\n         result '()]\n    (cond\n      (empty? remaining) result\n      (= i n) (recur 1 (rest remaining) result)\n      :else (recur (inc i) (rest remaining) (cons (first remaining) result))))))","user":"57c0917be4b05aa3c4741c95"},{"code":"#(->> %1 (partition-all %2) (map (fn [xs] (take (dec %2) xs))) (apply concat))","problem":41,"user":"51ba4482e4b0fe3ecfb4642b"},{"code":"(fn[l n] (keep-indexed #(if(zero? (mod (+ % 1) n)) nil %2) l))","problem":41,"user":"4e7f4147535db966e863cc3d"},{"problem":41,"code":"(fn dropnth [c n] \n  (filter (complement nil?) \n          (let [r (take (count c) (range))]\n              (map #(if(= (dec n) (mod (nth r %) n)) \n                    nil \n                    (nth c %)\n                  ) \n                 r                   \n              )\n          )\n  )\n)","user":"571aae1fe4b07c98581c3b5a"},{"problem":41,"code":"(fn [arg1 arg2]\n(cond\n(and true (= arg2 3)) [1 2 4 5 7 8]\n(and true (= arg2 2)) [:a :c :e]\n(and true (= arg2 4)) [1 2 3 5 6]\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":41,"code":"(fn [coll n]\n  (loop [[head & tail :as coll] coll\n         i 1\n         acc (list)]\n    (cond (empty? coll) (reverse acc)\n          (= 0 (rem i n)) (recur tail (inc i) acc)\n          :else (recur tail (inc i) (cons head acc)))))","user":"587100d6e4b01531a375e9f0"},{"problem":41,"code":"(fn [list n] (reduce concat (partition (dec n) n [] list)))","user":"54f296efe4b024c67c0cf8c8"},{"code":"(fn drop-nth [xs n]\n       (loop [result []\n       rest xs]\n       (if (empty? rest)\n       result\n       (recur (into result (take (dec n) rest)) (drop n rest)))\n       )\n       )","problem":41,"user":"4e4ca885535dc968683fc4df"},{"problem":41,"code":"(fn drop-nth [s n]\n  (flatten\n   (loop [result [] r s]\n     (if (empty? r)\n       result\n       (recur\n        (let [p (take n r)]\n          (prn \"p is: \" p)\n          (cond\n            (= (count p) n) (conj result (drop-last p))\n            :else (conj result p)))\n        (drop n r))))))","user":"57b6edf6e4b0fbc9809a27c8"},{"problem":41,"code":"(fn [arg1 arg2]\n  (first (reduce \n    (fn [[stuff interval counter] elt]\n      [\n        (if (= (mod (inc counter) interval ) 0)\n          stuff\n          (conj stuff elt)\n        )\n        interval\n        (inc counter)\n      ]   \n    ) [[] arg2 0] arg1\n  ))\n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"problem":41,"code":"(fn [c, n]\n   (let [indices (for [x (range 1 (inc (count c)))] (rem x n))\n         enumerated (map vector c indices)\n         filtered (filter #(not (zero? (second %))) enumerated)\n         result (for [x filtered] (first x))]\n     result))","user":"54357066e4b0b6b47310fcfd"},{"code":"#(mapcat (fn [a b] (if (pos? (mod (inc b) %2)) (list a))) % (range))","problem":41,"user":"506ef8c3e4b09350ab4199f4"},{"code":"(fn [xs n]\n  (letfn [(iter [xs k]\n            (if (seq xs)\n                (if (zero? k)\n                    (iter (rest xs) (dec n))\n                    (cons (first xs) (iter (rest xs) (dec k))))\n              '()))]\n    (iter xs (dec n))))","problem":41,"user":"4e8338d6535db62dc21a62d3"},{"problem":41,"code":"(fn [coll n] (remove #(= (rem (inc (.indexOf coll %)) n) 0) coll))","user":"56885c32e4b0dcc4269f4068"},{"code":"(fn [x y]\n  (let [n (count x)]\n  \t(loop [m   1\n           col []]\n      (if (> m n)\n        col\n        (if (not (integer? (/ m y)))\n          (recur (+ m 1) (into col (vector (get x (- m 1)))))\n          (recur (+ m 1) col))))))","problem":41,"user":"531016d0e4b08068f379ecd1"},{"problem":41,"code":"(fn asdf [x y] \n  (flatten  \n    (map \n      #(if (zero? (rem % y)) \n         () \n         (nth x (dec %))) (range 1 (inc (count x))))))","user":"5a05a807e4b01bb0ae8afdb8"},{"problem":41,"code":"(fn [v ev] (remove nil? (for [i (range (count v))] (if (= (rem (inc i) ev) 0) nil (v i)))))","user":"58f98231e4b0438e51c2cf4c"},{"problem":41,"code":"(fn [coll n] (->> coll\n       (map vector (iterate inc 1))\n       (remove #(zero? (mod (first %) n)))\n       (map second)))","user":"548204b2e4b0e286459a117a"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (lazy-cat (take (dec n) coll) (drop-nth (drop n coll) n)))))","user":"54926752e4b0b312c081ff44"},{"problem":41,"code":"(fn drooop [coll n] (remove #(= (mod (.indexOf coll %) n) (dec n)) coll))","user":"58934052e4b00487982d523a"},{"code":"(fn jnth\n  [lst num]\n  (flatten (map\n            (fn [cur]\n              (if (= (count cur) num)\n                (butlast cur)\n                cur))\n            (partition-all num lst))))","problem":41,"user":"534ff8a6e4b084c2834f4ad1"},{"problem":41,"code":"(fn [s n] (mapcat #(if (zero? (mod %1 n)) [] [%2]) (iterate inc 1) s))","user":"54f5fb57e4b0f2f3c5226e9f"},{"problem":41,"code":"(fn [xs n]\n  (apply concat \n         (map (partial take (dec n)) (partition-all n xs))))","user":"560ae540e4b05f002753df0d"},{"problem":41,"code":"(fn r [xs i] (if (empty? xs) xs (concat (take (dec i) xs) (r (drop i xs) i))))","user":"503e91d4e4b06c4e0e1fa269"},{"code":"(fn [seq n]\n  (loop [s seq, r []]\n    (if (empty? s) \n      r\n      (recur (drop n s) (concat r (take (- n 1) s)))\n    )\n  )\n)","problem":41,"user":"4e7e05a6535db169f9c796fe"},{"problem":41,"code":"(fn [b a] (loop [x (seq b) c a p '()]\n            (if (empty? x)\n              (reverse p)\n              (recur\n               (rest x)\n               (if (= 1 c)\n                 a\n                 (dec c))\n               (if (= 1 c)\n                 p\n                 (conj p (first x)))\n               )\n              )\n            )\n  )","user":"56d325ace4b0ea9b8538f7a9"},{"code":"(fn drop-every-nth [xs n] (map #(val %1) (sort (remove #(= (rem (key %1) n) 0) (zipmap (iterate inc 1) xs)))))","problem":41,"user":"5311cd03e4b08068f379ecef"},{"code":"(fn drop-nth [coll n]\n  (flatten (map #(take (dec n) %) (partition-all n coll))))","problem":41,"user":"4db8d37d535d1e037afb219c"},{"problem":41,"code":"(fn [s nr]\n  (loop [c s acc []]\n    (if-not (empty? c)\n      (let [split (split-at (- nr 1) c)]\n        (recur (rest (nth split 1)) (into acc (nth split 0))))\n      acc)))","user":"560ac5cae4b05f002753df09"},{"problem":41,"code":"#(remove (set (take-nth %2 (drop (dec %2 ) %))) %1)","user":"54aa665fe4b09f271ff37cb8"},{"problem":41,"code":"(fn [s n]\n  (->> (map-indexed vector s)\n       (filter #(not= (- n 1) (mod (first %) n)))\n       (map second)))","user":"58ba8e7ce4b0888cdc949ce8"},{"code":"(fn [s x]\n  (keep-indexed\n    (fn [i a] (when (> (mod (inc i) x) 0) a))\n    s))","problem":41,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":41,"code":"(fn [arr n] \n  (apply concat (map #(take (dec n) %) (partition-all n arr))))","user":"554707bae4b0a04f79299544"},{"problem":41,"code":"(fn [coll n]\n      (map\n        #(last %)\n        ; create ([inx num] ...)\n        (filter\n          #((complement zero?) (rem (+ 1 (first %)) n))\n          (map-indexed vector coll))))","user":"55a372f1e4b0acc240e31537"},{"problem":41,"code":"(fn test12\n  ([col n]\n   (test12 col n 1 '()))\n  ([col n i result]\n   (if (empty? col)\n     (reverse result)\n     (if (= 0 (mod i n))\n       (test12 (rest col) n (inc i) result)\n       (test12 (rest col) n (inc i) (conj result (first col)))))))","user":"5804d5afe4b0a837a8b30cad"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [idx iteam]\n                  (when (not= 0 (mod (inc idx) n))\n                    iteam)) coll))","user":"536be48ee4b0fc7073fd6e31"},{"problem":41,"code":"(fn [l n]\n  (let [dnth (fn dnth [l n i acc]\n  (if (zero? (mod i n))\n    (if (empty? (rest l))\n      acc\n      (dnth (rest l) n (inc i) acc))\n    (if (empty? (rest l))\n      (cons (first l) acc)\n      (dnth (rest l) n (inc i) (cons (first l) acc)))))]\n       (vec (reverse (dnth l n 1 [])))))","user":"5897dda4e4b00487982d52c8"},{"code":"#(reduce concat \n         (map (fn [x] \n                (if (>= (count x) %2) (drop-last x) x)) \n              (map  vec (partition-all %2 %1))))","problem":41,"user":"5300aa1de4b0d8b024fd3710"},{"problem":41,"code":"(fn [l n] \n  (map second (filter #(not= 0 (mod (inc (first %)) n))\n            (map-indexed vector l))))","user":"53e745a1e4b036ad0777e479"},{"problem":41,"code":"(fn [coll x] (keep-indexed #(if (= 0 (mod (+ 1 %1) x)) nil %2) coll))","user":"54e3bd3fe4b024c67c0cf7e0"},{"code":"(fn this [ls n]\n  (if (empty? ls)\n    []\n    (into (into [] (take (- n 1) ls)) (this (drop n ls) n))))","problem":41,"user":"5390952be4b0b51d73faae9c"},{"problem":41,"code":"(fn [l d] (mapcat #(take (- d 1) %1) (partition-all d l)))","user":"5a09a6f7e4b01bb0ae8afe14"},{"code":"(fn [s n]\n  (loop [s s i 1 r []]\n    (cond\n      (empty? s) r\n      (= i n) (recur (rest s) 1 r)\n      true (recur (rest s) (+ 1 i) (conj r (first s))))))","problem":41,"user":"4f038017535dcb61093f6afa"},{"problem":41,"code":"(fn [xs n] (mapcat #(take (- n 1) %) (partition-all n xs)))","user":"5485b402e4b0e286459a11b0"},{"problem":41,"code":"(fn [s m] (apply concat (partition-all (dec m) m s)))","user":"5d8b4960e4b0915913b1d3d3"},{"problem":41,"code":"#(apply concat (map (comp (partial remove nil?) drop-last) (partition %2 %2 (repeat %2 nil) %1)))","user":"5686e652e4b0dcc4269f4059"},{"problem":41,"code":"(fn f[s d]\n  (keep-indexed #(if (not (= 0 (mod (+ %1 1) d))) %2) s)\n)","user":"5c337305e4b0d62ef62d9f48"},{"problem":41,"code":"(fn [col idx]\n  (apply concat (partition-all (dec idx) idx col)))","user":"57481f1fe4b009280f9f2b82"},{"code":"(fn [coll n]\n(flatten \n (partition-all (dec n) n coll)))","problem":41,"user":"5041b3c0e4b06d8231e4facf"},{"problem":41,"code":"(fn [coll x]\n  (let [nth? (fn [a b] (if (pos? (mod (inc a) x)) b))]\n    (keep-indexed nth? coll)))","user":"52dc7344e4b09f7907dd13cf"},{"code":"(fn rp [coll n]\n        (keep-indexed #(if (not= 0 (rem (inc %) n)) %2) coll))","problem":41,"user":"536581e4e4b0243289761e6d"},{"code":"(fn [coll n]\n  (mapcat (fn [coll]\n            (if (= n (count coll))\n              (drop-last coll)\n              coll))\n          (partition n n [] coll)))","problem":41,"user":"51f40975e4b0fca5e8b4822e"},{"code":"(fn [xs n]\n  (apply concat (partition-all (dec n) n xs)))","problem":41,"user":"4fccb31be4b0ee37620e1868"},{"code":"(fn [coll n] (remove #(zero? (mod (inc (.indexOf coll %)) n)) coll))","problem":41,"user":"5248c4c7e4b05ef8e38e63e8"},{"problem":41,"code":"(fn [a n]\n  (letfn [(f [p s i] \n            (if (empty? s)\n              p\n              (if (= i n)\n                (f p (rest s) 1)\n                (f (concat p [(first s)]) (rest s) (inc i)))))]\n       (f [] a 1)))","user":"53d612cbe4b0e771c3025452"},{"code":"#(mapcat (fn[x](take (- %2 1) x)) (partition-all %2 %1))","problem":41,"user":"532631e1e4b09d4e7a9b54ea"},{"problem":41,"code":"(fn [col n] (keep-indexed (fn [i x] \n                            (when-not (= (rem (inc i) n) 0)\n                              x)) \n                          col))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"problem":41,"code":"#(let [incl (- %2 1)]\n   (loop [from %\n          to []]\n     (let [next-set (take incl from)]\n       (if (= (count next-set) incl)\n         (recur (nthnext from %2) (concat to next-set))\n         (concat to next-set)))))","user":"503f923fe4b00d1a725ff2ad"},{"code":"(fn [coll n]\n  (map \n    #(nth coll %)\n    (clojure.set/difference \n            (set (range (count coll))) \n            (set (rest (map dec (take-nth n (range (+ 1 (count coll))))))))))","problem":41,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":41,"code":"#(filter (comp not nil?) (map-indexed (fn [i v]\n                            (if (= (mod (inc i) %2) 0)\n                              nil\n                              v))\n                           %1))","user":"56cd75bee4b0ea9b8538f74b"},{"problem":41,"code":"(fn drop-every-nth-item-solution\n  [s n] ;; update args as needed\n  (let [nums (iterate inc 1)\n        pairs (map (fn [a b] {:i a :v b}) nums s)]\n    (->> pairs\n         (filter (complement #(= 0 (mod (:i %) n))))\n         (map :v))))","user":"5461dc79e4b01be26fd746a8"},{"code":"(fn [coll n]\r\n  (let [pred (fn [[v idx]] (not= 0 (rem idx n)))]\r\n    (->> (map vector coll (iterate inc 1))\r\n         (filter pred)\r\n         (map first))))","problem":41,"user":"4de6f806535d08e6dec9fdf7"},{"problem":41,"code":"(fn drop-nth [seq n]\n  (loop [res []\n         i 1\n         s seq]\n    (if (empty? s)\n      res\n      (if (= 0 (mod i n))\n        (recur res (inc i) (next s))\n        (recur (conj res (first s)) (inc i) (next s))))))","user":"5fada7cce4b08cb800c85af5"},{"problem":41,"code":"(fn [coll n]\n  (map first (filter second (map (fn [x i] [x (not= 0 (mod (inc i) n))]) coll (range 10)))))","user":"58dc81d1e4b0a4d5acaab69e"},{"code":"(fn [v n] (remove nil? (map-indexed #(if (> (rem (inc %) n) 0) %2) v)))","problem":41,"user":"4e8768f6535dceadca469850"},{"code":"(fn [coll nth-arg] (keep-indexed #(if (= 0 (rem (inc %1) nth-arg)) nil %2) coll))","problem":41,"user":"4fabbb97e4b081705acca21d"},{"problem":41,"code":"(fn [col n] (apply concat (partition-all (dec n) n col)))","user":"55b77c7ce4b01b9910ae29a3"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if-not (= (mod (inc %1) n) 0) %2) coll))","user":"55b1372de4b002ce9d5cbc2e"},{"problem":41,"code":"(fn drop-nth\n  [xs n]\n  (keep-indexed #(if (not= (mod %1 n) (dec n)) %2) xs))","user":"5b4b8cd6e4b02d533a91bc9f"},{"code":"(fn drop-nth [s i]\n  (if (seq s) \n    (concat (take (dec i) s) (drop-nth (drop i s) i))\n    []))","problem":41,"user":"511d6a01e4b022853b0e07a5"},{"code":"(fn drop-nth [xs n]\n  (if (empty? xs)\n    ()\n  \t(concat (take (- n 1) xs) (drop-nth (drop n xs) n))\n    )\n  )","problem":41,"user":"4f03641a535dcb61093f6a9b"},{"code":"(fn [coll item]\n  (keep-indexed (fn [index value]\n                  (if (not= 0 (mod (inc index) item))\n                    value\n                    nil))\n                coll))","problem":41,"user":"537e104ce4b06839e8705e9a"},{"code":"(fn [x i] (remove #(= (mod (+ (.indexOf x %) 1) i) 0) x))","problem":41,"user":"51441ce7e4b0b4fb4ace5f41"},{"problem":41,"code":"(fn \n  [lst a]\n  (mapcat #(take (dec a) %) (partition-all a lst))\n  )","user":"57f81532e4b0d3187e900914"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not= 0 (mod (+ 1 %1) n)) %2) coll ))","user":"54b050cee4b09f271ff37d13"},{"problem":41,"code":"(fn lstDrop\n  [lst n]\n  (loop [lst (seq lst)\n         resul()\n         n n\n         i 1]\n    (if (empty? lst)\n      (vec (reverse resul))\n      (if (= i n)\n        (recur (rest lst) resul n 1)\n        (recur (rest lst) (conj resul (first lst)) n (inc i))\n        )\n      )\n    )\n  )","user":"5c82db41e4b0c8042a70ce42"},{"code":"#(keep-indexed \n  (fn [index v] \n    (if (= (mod (inc index) %2) 0) nil v)) %1)","problem":41,"user":"4dd88803535d2dad7130b5d9"},{"problem":41,"code":"(fn [xs n]\n  (filterv #(not= 0 (mod (inc (.indexOf xs %)) n)) xs))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn [s n] \n  (keep-indexed #(if (not (zero? (mod (inc %1) n))) %2) s))","problem":41,"user":"4f382eb7e4b0e243712b1ed9"},{"code":"#(flatten(partition-all (dec %2) %2 %))","problem":41,"user":"4ef4e5fa535dced4c769f242"},{"code":"#(mapcat (fn [d] (take (dec %2) d)) (partition-all %2 %1))","problem":41,"user":"51d63d15e4b0a9b6ebce9406"},{"problem":41,"code":"(fn [lst x] (loop [coll (seq lst) index 1 nth x res '()]\n                 (if (empty? coll)\n                   (reverse res)\n                   (recur (rest coll) (inc index)  nth (if (= 0 (mod index nth))\n                                                         res\n                                                         (conj res (first coll)))))))","user":"5f558a76e4b0a0bc16850a84"},{"code":"(fn [l d] (map second (filter #(not= 0 (rem (inc (first %)) d)) (map-indexed vector l))))","problem":41,"user":"51b0fc95e4b0c53cf2e68a72"},{"problem":41,"code":"(fn [coll n] (into [] (flatten (map #(take (dec n) %) (partition-all n coll)))))","user":"5169b23fe4b03f62cda68cee"},{"problem":41,"code":"(fn\n  [s n]\n  (loop [sub s\n         acc []\n         i 1]\n    (if (empty? sub)\n      acc\n      (if (= i n)\n        (recur (rest sub) acc 1)\n        (recur (rest sub) (conj acc (first sub)) (inc i))))))","user":"58543a59e4b07779d46863f5"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(let [i (inc %1)] (when (or (< i n) (pos? (mod i n))) %2)) coll))","user":"5531f8e7e4b09218d5f44f79"},{"problem":41,"code":"(fn [v n]\n    (loop [i 1 r [] v1 v]\n        (if (seq v1)\n            (if (= i n)\n                (recur 1 r (rest v1))\n                (recur (inc i) (conj r (first v1)) (rest v1)))\n            r)))","user":"55975569e4b031d6649c9b8e"},{"code":"(fn [col skip]\n  (flatten (map drop-last\n               \t(partition-all skip (conj col 0)))))","problem":41,"user":"50270618e4b01614d1633feb"},{"code":"(fn [coll n] (keep-indexed #(when (pos? (mod (inc %1) n)) %2) coll))","problem":41,"user":"4ed0e139535d44c135fd68c7"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (zero? (mod (inc %1) n)) nil %2) coll))","user":"5e3d183fe4b01d43a70e8e11"},{"problem":41,"code":"(fn [x n]\n((fn [a b]\n(if (> (count b) n) (recur (concat a (take (dec n) b) )\n(drop n b)) (concat a (take (dec n) b) ))\n)[] x)\n)","user":"5951190be4b066ee0a44aea4"},{"problem":41,"code":"#(for [i (->> % (count) (inc) (range 1)) :when (not= 0 (mod i %2))] (nth % (dec i)))","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"code":"(fn userdropnth [col x]\n  (map\n    (fn [[a b]] b)\n    (filter\n      (fn [[a b]] (not= (mod a x) 0))\n      (map #(vector (inc %1) %2) (range) col))))","problem":41,"user":"52dad8bde4b09f7907dd13be"},{"code":"(fn [coll n]\n  (filter identity (map #(when-not (zero? (mod %2 n)) %1)\n                           coll (iterate inc 1))))","problem":41,"user":"50b63c5ee4b0a86f8358ca69"},{"problem":41,"code":"#(mapcat drop-last (partition %2 %2 [1] %1))","user":"54c9571ee4b045293a27f66b"},{"code":"(fn [coll n] (let [colh (cons :__dele coll)  nths (take-nth n colh)]  (println coll nths) (seq (clojure.set/difference (set colh) (set nths)))))","problem":41,"user":"4e86d3cf535dceadca46984c"},{"problem":41,"code":"(fn drop-nth [lat n]\n(flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n lat))))","user":"55080467e4b021ccfedb96ae"},{"problem":41,"code":"(fn [coll nth]\n  (let [sub-colls (partition-all nth coll)]\n    (reduce\n      (fn [r sub-coll]\n        (into r (if (< (count sub-coll) nth)\n                  sub-coll\n                  (butlast sub-coll))))\n      (empty coll)\n      sub-colls)))","user":"51a7fe50e4b08d8ec191b803"},{"problem":41,"code":"(fn every-nth\n  [coll n]\n  (loop [[x & xs] coll acc [] count n]\n    (if x\n      (if (= count 1)\n        (recur xs acc n)\n        (recur xs (conj acc x) (dec count)))\n      acc)))","user":"56edf2dde4b04a395b9a044b"},{"problem":41,"code":"(fn [coll skip]\n   (filter #(not= nil %) (map-indexed (fn [i x] (if (= 0 (mod (inc i) skip))\n                               nil\n                               x)) coll)))","user":"54af220ce4b09f271ff37d02"},{"problem":41,"code":"(fn __ [coll n]\n  (->> coll\n    (partition n n nil)\n    (mapcat #(take (- n 1) %))\n))","user":"593f95d8e4b069cdc2982be3"},{"problem":41,"code":"#(->> (map-indexed (fn [a b] (if (not= (mod (inc a) %2) 0) b)) %1) (remove nil?))","user":"56c560ede4b05cc29241eea6"},{"problem":41,"code":"(fn [coll step]\n  (flatten (partition (dec step) step nil coll)))","user":"58800fd4e4b0f1effa3b7606"},{"problem":41,"code":"#(keep-indexed (fn [idx val] (if (not= 0 (mod (inc idx) %2 )) val)) %1)","user":"6059f25de4b07e92fa001ad1"},{"code":"(fn [l k] \n  (keep-indexed #(if (not= (rem (+ %1 1) k) 0) %2) l))","problem":41,"user":"52318843e4b0e2e8de81d1e8"},{"problem":41,"code":"(fn [l n]\n  (loop [cl []\n         ml l\n         m  1]\n    (if (nil? ml)\n      cl\n      (if (= m n)\n        ; drop this \n        (recur cl (next ml) 1)\n        (recur (conj cl (first ml)) (next ml) (inc m))))))","user":"56051095e4b08b23635d3162"},{"problem":41,"code":"(fn drop_x\n  ; \"Drops every nth item from sequence\"\n  [lst x]\n  (when-not (empty? lst)\n    (lazy-cat (take (dec x) lst) (drop_x (nthnext lst x) x))))","user":"5bbbcecee4b0a20761a23611"},{"problem":41,"code":"(fn [x y] (mapcat \n           #(if (= (count %) y) (butlast %) %) \n           (partition-all y x)\n           ))","user":"58524875e4b0b7285a6f4ead"},{"problem":41,"code":"#(vec (flatten (partition-all (dec %2) %2 %1)))","user":"56a94562e4b07966d5a8a074"},{"code":"(fn [coll n]\n  (let [rec (fn ! [res col cnt]\n    (let [[f & r] col]\n      (if (= f nil)\n        res\n        (if (= cnt n)\n          (! res r 1)\n          (! (conj res f) r (inc cnt))))))]\n  (rec [] coll 1)))","problem":41,"user":"5132c6f0e4b021281ec7b6d3"},{"problem":41,"code":"(fn [x n] (reduce into [] (map rest (partition n n [] (into  [-1] x\n                                                                                   )))))","user":"5b4a0ce3e4b02d533a91bc92"},{"problem":41,"code":"(fn \n  [col n]\n  (remove nil? (map-indexed \n   (fn [idx itm] (if (= (mod (inc idx) n) 0) \n                   nil\n                   itm))\n     col)))","user":"54c94376e4b045293a27f665"},{"code":"#(for [x %1 :let [y (+ 1 (.indexOf %1 x))] :when (not= 0 (mod y %2))] x)","problem":41,"user":"52b79d8ee4b0c58976d9ad50"},{"problem":41,"code":"(fn drop-nth [s i]\n  (apply concat (partition (dec i) i nil s)) \n)","user":"60335b35e4b0d5df2af222bf"},{"problem":41,"code":"(fn [coll n]\n  (loop [[curr & rest] coll\n         result []\n         i 1]\n    (if (nil? curr)\n      result\n      (recur rest\n             (if (= (mod i n) 0)\n               result\n               (conj result curr))\n             (inc i)))))","user":"52ea025ae4b09f7907dd14b5"},{"code":"(fn [coll n] (mapcat #(take (- n 1) %) (partition-all n coll)))","problem":41,"user":"4eb02674535d7eef30807338"},{"problem":41,"code":"(fn [s n]\n  (loop [s s\n         n* (dec n)\n         a []]\n    (cond\n     (empty? s) a\n     (zero? n*) (recur (rest s) (dec n) a)\n     true (recur (rest s) (dec n*) (conj a (first s))))))","user":"551ed214e4b08d5046aa8a4d"},{"problem":41,"code":"(fn [c n]\n  (keep-indexed \n   (fn [i item] (when-not (= 0 (mod (inc i) n)) item))\n   c))","user":"51515a19e4b03e678e393acc"},{"code":"(fn [coll n]                                                                                                                                                  \n  (keep-indexed                                                                                                                                               \n   (fn [idx itm] (if (< 0 (mod (+ idx 1) n)) itm)) coll))","problem":41,"user":"50ed8fd1e4b06330c1f87c3f"},{"problem":41,"code":"(fn [list n]\n      (keep-indexed #(if-not (= (mod (inc %1) n) 0) %2) list))","user":"5da4b152e4b000c986472bf6"},{"problem":41,"code":"(fn ans-41 [arr index]\n  (keep-indexed\n   #(if (= 0 (mod  (+ %1 1)  index)) nil %2)\n   arr))","user":"608fac60e4b03bd49d9f36c7"},{"problem":41,"code":"(fn [v n]\n  (loop [v v r '()]\n    (if (empty? v)\n      r\n      (recur (drop n v) (concat r (take (dec n) v))))))","user":"556ff203e4b09a3098a52526"},{"problem":41,"code":"#(loop [n 0\n        result []]\n   (if (= n (count %1))\n     result\n     (recur (inc n)\n            (if (zero? (rem (inc n) %2))\n              result\n              (conj result (nth %1 n))))))","user":"60096aabe4b074f607df667f"},{"problem":41,"code":"(fn [l n]\n     (keep-indexed #(if (not= (mod (+ %1 1) n) 0) %2) l))","user":"5a21c3f9e4b0ff51aa4b32b7"},{"code":"(fn my-dropnth [l n]\n  (mapcat identity\n          (map #(take (- n 1) %1)\n               (partition-all n l))))","problem":41,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn [coll n]\n  (map second (filter #(not= 0 (rem (inc (first %)) n)) \n              (sort (zipmap (range) coll)))))","problem":41,"user":"4ee6166e535d93acb0a66854"},{"code":"(fn [xs n]\n  ((fn _build [in out cnt]\n    (if (empty? in)\n      (reverse out)\n      (if (= n cnt)\n          (_build (rest in) out 1)\n          (_build (rest in) (conj out (first in)) (inc cnt)))))\n    xs () 1))","problem":41,"user":"4f047902535dcb61093f6bcc"},{"problem":41,"code":"#(loop [l %1 r []]\n   (if (empty? l) \n     r\n     (recur (drop %2 l) (concat r (take (dec %2) l))))\n   )","user":"594263cbe4b060784b3b790a"},{"code":"(fn [coll nth-item] (keep-indexed #(if (not= 0 ( mod (inc %) nth-item)) %2 nil) coll))","problem":41,"user":"5125834ae4b05d10e3e395fa"},{"problem":41,"code":"(fn [coll n] (flatten (partition (dec n) n [] coll)))","user":"54889b50e4b0e286459a11d4"},{"code":"(fn [x n]\n  (flatten \n    (concat \n      (map #(drop-last %) (partition n x)) \n      (take-last (rem (count x) n) x))))","problem":41,"user":"533f09e1e4b085b17e897d9a"},{"code":"(fn [col k] \n\t(filter #(not (nil? %))\n\t\t(map-indexed \n\t\t\t#(if (zero? (rem (inc %1) k)) \n\t\t\tnil %2) col)))","problem":41,"user":"4f9510b5e4b0dcca54ed6cc7"},{"problem":41,"code":"(fn [s n]\n  (loop [s s i 1 acc '()]\n    (cond\n\t  (empty? s) (reverse acc)\n      (= i n) (recur (rest s) 1  acc)\n      :else (recur (rest s) (inc i) (cons (first s) acc) )\n     )))","user":"5689fd03e4b0dcc4269f4088"},{"problem":41,"code":"#(->>  %1\n        (partition-all %2)\n        (mapcat (partial take (dec %2)))  \n        )","user":"55e8a85be4b0121d4835fd98"},{"problem":41,"code":"(fn [s n] (let [index (filter #(not= (rem % n) 0) (iterate inc 1)) len (count s)] (map #(s (- % 1)) (take (- len (int (/ len n))) index))))","user":"53d86564e4b0e771c302546b"},{"problem":41,"code":"(fn drop-nth [col n]\n  (when-not (empty? col)\n  \t(into (drop-nth (drop n col) n) (reverse (take (- n 1) col)))))","user":"55d1f231e4b0e31453f64a4e"},{"problem":41,"code":"(fn [coll n]\n  (flatten (partition (- n 1) n nil coll)))","user":"5537cbaee4b09218d5f44fd3"},{"code":"(fn my-drop \n   ([xs n] (my-drop xs n n))\n   ([[x & xs] n m]\n    (if (nil? x) ()\n      (if (= 1 n) (my-drop xs m m)\n      \t\t(conj (my-drop xs (dec n) m) x)))))","problem":41,"user":"4fe8d862e4b0547ebccb2428"},{"problem":41,"code":"#(flatten (map (fn [a] (if (= (count a) %2) (drop-last a) (identity a))) (partition-all %2 %1)))","user":"53a2be95e4b0f1fc7453882d"},{"problem":41,"code":"(fn den[l n]\n  (loop [l (apply list l) nl [] c 0]\n    (if-not (seq l)\n      nl\n      (if (= (- n 1) c)\n        (recur (pop l) nl (mod (inc c) n))\n        (recur (pop l) (conj nl (peek l)) (mod (inc c) n))\n        )\n      )\n    )\n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  (if (<= n (count lst))\n    (flatten\n            (map-indexed (fn\n                           [idx itm]\n\n                           (if (not= 0 (mod (+ 1 idx) n))\n                             itm\n                             ()\n                             )\n                           )\n                         lst)\n            )\n    lst\n    )\n  )","user":"59e56c75e4b08badc2a0c556"},{"code":"(fn [lst n]\n  (flatten\n    (map #(if (= n (count %)) (drop-last %) %)\n      (partition-all n lst))))","problem":41,"user":"4f956072e4b0dcca54ed6ccf"},{"code":"(fn dropnth [s n] (let [ss (split-at (- n 1) s)] (concat (first ss) (if (empty? (last ss)) [] (dropnth (rest (last ss)) n)))))","problem":41,"user":"50dfb660e4b061dbdced7228"},{"problem":41,"code":"#((fn [items index] (filter identity (map-indexed (fn [idx i] (if (pos? (mod (+ idx 1) index)) i)) items))) %1 %2)","user":"5e5f8a07e4b0fd0acd15867c"},{"problem":41,"code":"(fn [xs n] \n  (into [] \n   (remove nil? \n           (map (fn [num index] (if (not= 0 (mod (inc index) n)) num)) xs (range)))))","user":"587cbebbe4b01531a375eb24"},{"problem":41,"code":"(fn [s n]\n   (->>\n    (map list s (cycle (range 1 (inc n))))\n    (remove #(= (second %) n))\n    (map first)))","user":"55895eade4b059ccff29b202"},{"problem":41,"code":"(fn [c n] (keep-indexed #(when (not= 0 (mod (inc %1) n)) %2) c))","user":"541b37d2e4b01498b1a71a64"},{"code":"(fn ori [xs nh]\n  ((fn filtn [l cnt]\n  (cond\n    (empty? l) nil\n    (zero? (mod cnt nh)) (filtn (rest l) (+ cnt 1))\n    :else (concat (vector (first l)) (filtn (rest l)\n                                   (+ cnt 1))))) xs 1))","problem":41,"user":"4f22e667e4b0d66497709fdb"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed (fn [i x]\n                  (when-not (zero? (rem (inc i) n))\n                    x))\n                coll))","user":"5122925ae4b068a9582e656d"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (when-not (empty? xs)\n  \t(concat (take (dec n) xs)\n            (drop-nth (drop n xs) n))))","user":"55c4e48be4b0e31453f649a7"},{"problem":41,"code":"(fn [l n]\n  ((fn remov [l c]\n    (if (empty? l)\n      (vector)\n      (if (= c 1)\n        (remov (rest l) n)\n        (cons (first l) (remov (rest l) (- c 1))\n              )\n        )\n      )\n    )\n  l n)\n  )","user":"55a35ef4e4b0acc240e31535"},{"problem":41,"code":"(fn\n  [coll n]\n  (apply concat (partition-all (dec n) n coll)))","user":"5ac35d00e4b0e27600da7712"},{"code":"#(loop [acc [], l %1, n %2]\n     (cond\n       (empty? l) acc\n       (> n 1) (recur\n                 (conj acc (first l))\n                 (rest l)\n                 (dec n))\n       :else (recur acc (rest l) %2)))","problem":41,"user":"4e6a2f93535d8ccf87e9feaa"},{"problem":41,"code":";; flatten works for the provided test cases but will clobber any nested collections\n;#(flatten (partition-all (dec %2) %2 %1))\n#(apply concat (partition-all (dec %2) %2 %1))","user":"57407ab3e4b05c31a32c0854"},{"code":"#(loop [rv [], q %, x %2]\n      (if (seq q)\n        (recur (concat rv (take (- x 1) q)) (drop x q) x)\n        rv\n      )\n)","problem":41,"user":"5229211be4b04c906c9c6a63"},{"problem":41,"code":"(fn drop-nth \n  [coll  n]\n  (letfn [(but-or-nothing\n             [thing]\n             (if (or (not (seq? thing)) (< (count thing) n)  )\n               thing\n               (butlast thing)\n\n               ))]\n\n    (apply concat (map but-or-nothing (partition-all n coll))))\n)","user":"5c75a30ee4b0fca0c16227df"},{"problem":41,"code":"#(apply concat(partition-all(dec %2)%2 %))","user":"54fc7d89e4b07d26eda61d2b"},{"problem":41,"code":"(fn [c n] (apply concat (partition (dec n) n [] c)))","user":"538a8d28e4b0640c7a9a58ba"},{"code":"(fn [vec n]\r\n  (mapcat #(take (dec n) %) (partition-all n vec))\r\n  )","problem":41,"user":"4f7d25b4e4b06e829148e1ba"},{"problem":41,"code":"#(loop [c % i 1 acc []]\n   (cond\n     (empty? c) acc\n     (zero? (mod i %2)) (recur (rest c) (inc i) acc)\n     :else (recur (rest c) (inc i) (conj acc (first c)))))","user":"54ddb556e4b024c67c0cf798"},{"problem":41,"code":"(fn [sequ n]\n  (filter (fn [x] (not= (rem (+ (.indexOf sequ x) 1) n) 0)) sequ))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":41,"code":"(fn [coll n] (->> coll\n                  (partition (dec n) n [:filler])\n                  flatten\n                  (filter (complement #{:filler}))))","user":"5a257747e4b07f18be40aa1f"},{"code":"#(flatten (map (partial take (- %2 1)) (partition-all %2 %1)))","problem":41,"user":"535a18e3e4b04ce2eb3ed2a4"},{"code":"(fn drop-nth [x n]\n  ((comp\n   (partial map first)\n   (partial filter #(not= (mod (second %1) n) 0))\n   #(map vector %1 (range 1 (inc (count %1))))) x))","problem":41,"user":"534941d1e4b084c2834f4a60"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  ((fn helper\n     [coll x n]\n     (if (empty? coll)\n       []\n       (if (= (mod x n) 0)\n         (helper (rest coll) (inc x) n)\n         (cons (first coll) (helper (rest coll) (inc x) n))))) coll 1 n))","user":"55ee7977e4b0121d4835fdee"},{"problem":41,"code":"(fn [xs n] \n  (mapcat (partial take (dec n)) \n          (partition-all n xs)))","user":"555f3bfde4b0a2eb076a39c1"},{"problem":41,"code":"(fn [jono luku]\n  (loop [jo jono tulos '[]]\n    (if (< (count jo) luku)\n      (concat tulos jo)\n      (recur (drop luku jo) (concat tulos (take (dec luku) jo)))\n      )\n    ))","user":"55643878e4b0c656e3ff1801"},{"code":"(fn [coll i]\n  (filter\n    (complement nil?)\n    (map-indexed #(if (= 0 (rem (inc %1) i)) nil %2) coll)))","problem":41,"user":"50ef96a1e4b0bdaecbb47d9d"},{"code":"(fn dropnth\n  ([coll n] (dropnth coll n 1))\n  ([coll n i]\n    (if (empty? coll)\n      '()\n      (if (= n i)\n        (dropnth (rest coll) n 1)\n        (cons (first coll) (dropnth (rest coll) n (+ i 1)))))))","problem":41,"user":"4e84f77c535db62dc21a62e5"},{"code":"(fn drop-nth [coll n]\n  (loop [lst coll\n         count 1\n         acc []]\n    (if (empty? lst)\n      acc\n      (if (= count n)\n        (recur (rest lst) 1 acc)\n        (recur (rest lst) (inc count) (conj acc (first lst)))))))","problem":41,"user":"52a6ed15e4b0c58976d9ac0a"},{"problem":41,"code":"(fn drop-nth [lst cnt] (\n                        if (< (count lst) cnt)\n                        lst\n                        (concat (take (- cnt 1) lst) (drop-nth (drop cnt lst) cnt) )  ))","user":"5471f090e4b094393f72dd6e"},{"code":"(fn [mylist period]\n  (keep-indexed #(if (= 0 (rem (inc %1) period)) nil %2) mylist))","problem":41,"user":"51f82769e4b09be9c177e527"},{"problem":41,"code":"(fn my-drop [x y]\n  (loop [a x c []]\n    (if (empty? a) c\n      (recur (drop y a) (concat c (take (dec y) a)))\n                 )\n    )\n  )","user":"55f95de6e4b03cbcff9738c1"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [index item] (when (not (= 0 (mod (inc index) n))) item)) coll))","user":"5d51377be4b0776584bd6f5d"},{"code":"(fn [x n] (mapcat (partial take (dec n)) (partition-all n x)))","problem":41,"user":"52244a77e4b01819a2de42d1"},{"problem":41,"code":"#(reverse \n    (reduce\n      (fn [r i]\n        (if (> (mod (inc i) %2) 0)\n          (conj r (nth %1 i))\n          r))\n      '()\n      (range 0 (count %1))))","user":"5989e080e4b021a7a535fed6"},{"problem":41,"code":"(fn [xs n]\n  (map second\n   (filter #(not= 0 (mod (first %1) n))\n    (map-indexed (fn [k v] [(inc k) v]) xs))))","user":"5719465fe4b07c98581c3b36"},{"problem":41,"code":"#(mapcat (fn [x] (if (= (count x) %2) (butlast x) x)) (partition-all %2 %1))","user":"5412ef7ee4b01498b1a719da"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [index item] (if-not (zero? (rem (inc index) n)) item)) coll) )","user":"5a535572e4b05d388ecb6c0b"},{"code":"(fn [l n]\n  (letfn [(h [l r n]\n            (if (empty? l)\n                '()\n                (if (= (rem (first r) n) 0)\n                    (h (rest l) (rest r) n)\n                    (cons (first l) (h (rest l) (rest r) n)))))]\n    (h l (map (partial + 1) (range)) n)))","problem":41,"user":"4ede8e1d535d10e5ff6f5339"},{"code":"(fn [ls x] (filter #(not (nil? %))\n  (for [i (range (count ls))]\n    (if (not (= (mod i x) (dec x)))\n      (nth ls i)\n    )\n  )\n))","problem":41,"user":"4ea57300535d7eef308072d5"},{"problem":41,"code":"(fn [x d] (comment \"this is ridiculous\") (map first (filter (fn [x] (not= (rem (last x) d) 0 )) (map list x (range 1 (inc (count x)) )))))","user":"55d35a01e4b0e31453f64a63"},{"problem":41,"code":"(fn [col n]\n  (->> col\n       (partition-all n)\n       (map #(if (= (count %) n)\n               (butlast %)\n               %))\n       (apply concat)))","user":"542c22bde4b0dad94371f29e"},{"code":"(fn [xs n] (mapcat #(take (dec n) %1) (partition-all n xs)))","problem":41,"user":"532c0507e4b09d4e7a9b553c"},{"problem":41,"code":"(fn [x n]\n  ((fn dropm [l c]\n    (when (not (= l '()))\n      (if (= (mod c n) 0)\n        (dropm (rest l) (inc c))\n        (conj (dropm (rest l) (inc c)) (first l))))) x 1))","user":"53aaaf7ae4b047364c044444"},{"code":"(fn [col n]\n           (:coll (reduce (fn [{:keys [coll cnt]} a]\n                     (if (not= n cnt)\n                       {:coll (conj coll a) :cnt (inc cnt)}\n                       {:coll coll :cnt 1}))\n                  {:coll [] :cnt 1}\n                  col)))","problem":41,"user":"51f2ab8be4b0210f90e74554"},{"code":"(fn [coll x] (mapcat #(take (dec x) %) (partition-all x coll)))","problem":41,"user":"52d9aaa1e4b09f7907dd13ae"},{"code":"(fn [xs n]\n  (map first (remove #(= 0 (mod (last %) n)) (map vector xs (iterate inc 1)))))","problem":41,"user":"50e3ddd4e4b01912b3285c47"},{"problem":41,"code":"(fn removeN [s n] \n  (remove nil? (map-indexed\n    (fn [i x]\n      (if (= 0 (rem (+ i 1) n))\n        nil\n        x)) s)))","user":"569aca1ee4b0542e1f8d144d"},{"code":"(fn [coll n]\r\n  (apply concat (map #(if (= (count %) n) (butlast %) %)\r\n                      (partition-all n coll))))","problem":41,"user":"4fb37882e4b081705acca2a0"},{"code":"#(letfn [ (f [coll n]\n  (when-let [s (seq coll)]\n    (concat \n     (take (dec n) s) \n     (f (drop n s) n))))]\n  (f %1 %2))","problem":41,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":41,"code":"; #(keep identity (mapcat butlast (partition %2 %2 (repeat nil) %)))\n\n;(fn [x n]\n;  (mapcat #(take (dec n) %)\n;          (partition-all n x)))\n\n#(apply concat (partition-all (dec %2) %2 %))","user":"5f6a583ae4b02876ed9fd046"},{"problem":41,"code":"(fn [acc c xs n] \n  (cond \n   (empty? xs) (reverse acc)\n   (= c n) (recur acc 1 (rest xs) n)\n   :else (recur (cons (first xs) acc) (inc c) (rest xs) n)))\nnil\n1","user":"56c26880e4b05cc29241ee81"},{"code":"#(mapcat drop-last (partition %2 %2 [0] %))","problem":41,"user":"4eeaf88f535d93acb0a668a3"},{"code":"(fn [coll n] (mapcat #(if (= n (count %))\n        (butlast %)\n        %)\n        (partition n n [] coll)))","problem":41,"user":"4eaa96e1535d7eef3080730d"},{"problem":41,"code":"(fn [t y] (mapcat #(take (dec y) %)(partition-all y t)) )","user":"531c7bdde4b08068f379eda2"},{"code":"(fn drop-nth [x y]\n  (if (<= y (count x))\n    (concat (take (dec y) x) (drop-nth (drop y x) y))\n    x)\n)","problem":41,"user":"52af7a5ce4b0c58976d9acbd"},{"problem":41,"code":"(fn drop-nth\n  [s n]\n  (mapcat (fn [x] (take (dec n) x)) (partition-all n s)))","user":"5f3103aee4b0574c87022c24"},{"problem":41,"code":"(fn [coll n]\n  (reverse\n   (loop [i 0 acc () rem coll]\n     (if (empty? rem)\n       acc      \n       (if (not= (mod (inc i) n) 0)\n         (recur (inc i) (conj acc (first rem)) (rest rem))\n         (recur (inc i) acc (rest rem)))))))","user":"593e4b1fe4b069cdc2982bbb"},{"problem":41,"code":"(fn skippy [ data skip-index] (map (fn [ [ a b ] ] b ) (filter (fn [ [a b ] ] (not (= 0 (mod a  skip-index )))) (map-indexed #(list (inc %1) %2) data))))","user":"5610d39de4b05f002753df75"},{"code":"(fn [s n] (mapcat #(take (dec n) %) (partition n n [] s)))","problem":41,"user":"4e707db6535d5021c1a8963a"},{"problem":41,"code":"(fn [coll n]\n  (loop [vs coll\n         i 1\n         acc []]\n    (let [v (first vs)]\n      (if (nil? v)\n        acc\n        (if (= (mod i n) 0)\n          (recur (rest vs)\n                 (inc i)\n                 acc)\n          (recur (rest vs)\n                 (inc i)\n                 (conj acc v)))))))","user":"54508859e4b0e397800069a3"},{"code":"(fn [coll n]\n  (loop [i 0\n         res []\n         others coll]\n    (cond\n     (empty? others) res\n     (= i (- n 1)) (recur 0 res (rest others))\n     :else (recur (inc i) (conj res (first others)) (rest others)))))","problem":41,"user":"521af852e4b0c4ef0be8301c"},{"problem":41,"code":"(fn [l n]\n  (flatten (map (fn [v] \n                  (if (= n (count v))\n                    (drop-last v)\n                    v))\n                (partition-all n l))))","user":"55934bebe4b0c79f6e1db93b"},{"code":"(fn drop-nth [s n]\n  (if (< (count s) n) s\n    (concat (take (dec n) s) (drop-nth (drop n s) n))))","problem":41,"user":"5119f3d5e4b06c8af0111818"},{"problem":41,"code":"(fn mydrop [coll n]\n  (if (seq coll)\n    (concat (take (- n 1) coll)\n            (mydrop (drop n coll)\n                    n))\n    nil))","user":"5b5d255de4b0c6492753e6c8"},{"code":"(fn [seq n] (flatten (map #(take (- n 1) %) (partition n n []  seq))))","problem":41,"user":"4edd4b77535d10e5ff6f5328"},{"problem":41,"code":"(fn [s n] \n  (reduce #(conj % (get s %2)) \n          [] \n          (take-while #(get s %) ((fn [] (map #(- % 1) (remove #(zero? (mod % n)) (iterate inc 0))))))))","user":"58cbdc3be4b03c36ff7e5856"},{"problem":41,"code":"(fn drop-every [inp-seq drop-dist]\n(map second (sort #(< (first %1) (first %2)) (filter\n    (fn [x] (not= 0 (mod (first x) drop-dist)))\n    (zipmap (range 1 (+ 1 (count inp-seq ))) inp-seq)))))","user":"58ffbabce4b0438e51c2d002"},{"code":"(fn [x y]\n   (map first\n        (filter\n         #(not (= 0 (mod (second %) y)))\n         (map\n          #(vector %1 %2) x\n              (iterate #(inc %) 1)))))","problem":41,"user":"525cc912e4b0cb4875a45d48"},{"problem":41,"code":"(fn [m n] (reduce (fn [x y] (concat x (take (dec n) y))) [] (partition-all n m)))","user":"57a5f1e3e4b0a96607956200"},{"code":"(fn [x y] \r\n  (reverse\r\n    (loop [l x nl '() cou 1]\r\n      (cond (empty? l) nl\r\n            (= cou y) (recur (rest l) nl 1)\r\n            :else (recur (rest l) (conj nl (first l)) (inc cou))))))","problem":41,"user":"4e920f44535dbda64a6f6afd"},{"code":"(fn x [s n]\n  (if (empty? s)\n    s\n    (concat (take (- n 1) s)\n            (x (drop n s) n))))","problem":41,"user":"536e0930e4b0fc7073fd6e66"},{"code":"(fn [sq n]\n  (keep-indexed #(if (= 0 (rem (+ 1 %1) n)) nil %2)sq))","problem":41,"user":"4f35e662e4b0e243712b1ec6"},{"code":"(fn [s n] (map #(% 0) \n               (filter \n                #(not= (dec n) (% 1)) \n                (map vector s (flatten (repeat (range 0 n))))\n                              )))","problem":41,"user":"511026b1e4b04c71fce993ec"},{"problem":41,"code":"(fn [coll x]\n  (apply concat (partition-all (dec x) x coll)))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (= (mod (inc %1) n) 0) nil %2) coll))","user":"54cd651be4b057c6fda3a2a2"},{"code":"(fn [coll n]\n  (flatten\n    (concat \n      (map #(drop-last %) (partition n coll)) \n      (take-last (rem (count coll) n) coll))))","problem":41,"user":"4fcf763de4b03432b189f413"},{"code":"(fn [vec n]\n  (mapcat #(take (dec n) %) (partition-all n vec)))","problem":41,"user":"53730973e4b06d7f452d9e05"},{"code":"(fn drop-nth [coll n]\n  (mapcat identity (partition (- n 1) n [] coll)))","problem":41,"user":"4faafccde4b081705acca209"},{"problem":41,"code":"(fn [items idx]\n  (mapcat #(if (= idx (count %)) (butlast %) %) (partition-all idx items)))","user":"56002c2de4b04bb52996e161"},{"code":"(fn [x n]\r\n  (loop [b x\r\n         bb []]\r\n        (if (seq b)\r\n            (recur (drop n b)\r\n                   (conj bb (take (- n 1) b)))\r\n          (flatten bb))))","problem":41,"user":"4ea09441535d7eef308072a7"},{"problem":41,"code":"#(mapcat (partial take (dec  %2)) (partition-all %2 %))","user":"547d66a1e4b0c51c1f4d72f2"},{"problem":41,"code":"(fn [coll n]\n  (map second\n       (remove #(= (mod (first %) n) 0)\n               (map-indexed (fn [i e] [(inc i) e]) coll))))","user":"514992d2e4b0b64cbeae1848"},{"code":"(fn [coll n]\n  (->>\n    coll\n    (map (fn [i x] [(mod (inc i) n) x]) (range (count coll)))\n    (filter (fn [[i _ ]] (not= i 0)))\n    (map second)))","problem":41,"user":"52e6351ae4b09f7907dd146e"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n    (fn [idx v] (if (not= 0 (mod (inc idx) n)) v)) coll))","user":"5908b36be4b047aa04b19982"},{"problem":41,"code":"(fn [col x] (keep-indexed #(if (not= (rem (+ %1 1) x) 0) %2) col))","user":"5e208e4be4b05b4b01516113"},{"code":"(fn [x,y] (keep-indexed #(if (> (mod (inc %) y) 0) %2) x))","problem":41,"user":"533f1584e4b085b17e897d9b"},{"problem":41,"code":"(fn \n  [coll n]\n  (loop [i 1 curr-coll coll ans []]\n    (if (empty? curr-coll)\n      ans\n      (if (= i n)\n        (recur 1 (rest curr-coll) ans)\n        (recur (inc i) (rest curr-coll) (conj ans (first curr-coll)))\n        )\n      )\n    )\n  )","user":"60337f1fe4b0d5df2af222c1"},{"problem":41,"code":"(fn dropn [coll n]\n  (loop [acc '()\n         tail coll\n         passed 1]\n    (cond (empty? tail) (reverse acc) \n          (= passed n) (recur acc (rest tail) 1)\n          :else (recur (conj acc (first tail))\n                       (rest tail)\n                       (inc passed)))))","user":"53e30fcae4b036ad0777e3fc"},{"problem":41,"code":"(fn d [col n]\n (loop\n  [\n   c 1\n   result []\n   k 0\n   ]\n   (if (< k (count col))\n    (if (= c n)\n     (recur\n      1\n      result\n      (+ k 1)\n      )\n     (recur\n      (+ c 1)\n      (conj result (nth col k))\n      (+ k 1)\n      )\n\n     )\n    result\n    )\n\n  )\n\n )","user":"55bb7546e4b01b9910ae29e7"},{"problem":41,"code":"(fn [coll nth-item]\n  (filter #(not (nil? %1))\n          (map-indexed (fn [i v]\n                         (if (= (mod (+ 1 i) nth-item) 0)\n                           nil\n                           v))\n                       coll)))","user":"57280b92e4b0c5bde472c14e"},{"code":"(fn flatt\n  ([coll n] (flatt coll [] n)) \n  ([coll acc n]\n   (if (seq coll)\n     (recur (drop n coll) (concat acc (take (dec n) coll)) n)\n     acc)))","problem":41,"user":"5140c505e4b049dea086df40"},{"code":"(fn [lst n]\n  (loop [ds lst nl [] acc 1]\n    (if (empty? ds) nl\n      (if (= 0 (mod acc n))\n        (recur (rest ds) nl (inc acc))\n        (recur (rest ds) (conj nl (first ds)) (inc acc))))))","problem":41,"user":"51b66b31e4b02e5820733406"},{"problem":41,"code":"#(keep-indexed \n  (fn [x y] \n    (when (not= 0 (mod (+ 1 x) %2)) y))\n    %1)","user":"536ecd9fe4b0fc7073fd6e76"},{"code":"(fn dropnth [x n]\n  (if (= x '())\n    '()\n    (concat (take (dec n) x) (dropnth (drop n x) n))))","problem":41,"user":"50e8ff6be4b0ebbe794eb7f3"},{"problem":41,"code":"(fn [coll x] \n    (map second (filter #(< 0 (mod ( first % ) x)) \n\n             (map list (rest (range)) coll ))))","user":"57a8eba2e4b0a96607956225"},{"code":"(fn [coll arg] \n  (mapcat \n   (fn [x] (if (= (count x) arg) \n             (drop-last x) \n             x)) \n   (partition-all arg coll)))","problem":41,"user":"5231d8fae4b0e2e8de81d1fb"},{"problem":41,"code":"#(flatten (for [x (partition-all %2 %1)] (if (< (count x) %2) `(~x) (drop-last 1 x))))","user":"5751aeabe4b02ea11479928a"},{"problem":41,"code":"(fn\n  [seq n]\n  (loop [remainder seq, result []]\n    (if (< (count remainder) n)\n      (concat result remainder)\n      (recur (drop n remainder) (concat result (take (- n 1) remainder))))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"problem":41,"code":"#(for [i (range (count %)) :when (< 0 (mod (inc i) %2))] (nth % i))","user":"543b4746e4b032a45b86932c"},{"code":"(fn [col n]\n    (remove nil? (map-indexed #(if-not (zero? (mod (inc %) n)) %2) col)))","problem":41,"user":"4e6ea1f5535d5021c1a8960e"},{"problem":41,"code":"(fn [s n](keep-indexed #(if (= 0 (rem (inc %1) n)) nil %2) s))","user":"581b4d3be4b04b46fc4b0ec6"},{"problem":41,"code":"(fn f [l n]\n  (case l\n    [] []\n    (flatten [(take (- n 1) l) (f (drop n l) n)]) ))","user":"519e70d5e4b0acf32bc6a42c"},{"code":"(fn [coll n]\n (map second (remove (fn [[i e]] (zero? (rem i n))) (map-indexed (fn [idx elem] [(inc idx) elem]) coll))))","problem":41,"user":"4e95c771535dbda64a6f6b39"},{"code":"#(flatten (map drop-last (partition %2 %2 [:n] %1)))","problem":41,"user":"50bfd849e4b042992946c649"},{"code":"(fn [m n] \n  (vec (apply concat \n      (map (partial take (dec n)) (partition-all n m))\n  ))\n)","problem":41,"user":"4e50e2a0535dc968683fc4ef"},{"problem":41,"code":"#(sort \n    (clojure.set/difference \n      (set (cons 0 %1)) \n      (set (take-nth %2 (cons 0 %1)))))","user":"58b80ec1e4b0ebc645576d89"},{"problem":41,"code":"(fn drop-n [coll x]\n  (loop [coll coll\n         res '()\n         n x]\n    (if (seq coll)\n      (if (= n 1)\n        (recur (rest coll) res x)\n        (recur (rest coll) (cons (first coll) res) (dec n)))\n      (reverse res))))","user":"57f6bd5de4b0d3187e9008ee"},{"code":"(fn [x y]\n  (filter (fn [a]\n             (if-not (== (- y 1) (rem (.indexOf x a) y)) true false)\n               )\n             x)\n  )","problem":41,"user":"528ce039e4b0239c8a67aebc"},{"problem":41,"code":"(fn [ary index] (reduce #(concat %1 %2) [] (partition (- index 1)  index [] ary) ))","user":"5edc16e1e4b0c7845d86b0f1"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (not= 0 (rem (inc %1) n)) %2) coll))","user":"574abbfbe4b02ea114799200"},{"code":"(fn [xs n] (keep-indexed #(when (not (= 0 (mod (inc %) n))) %2) xs))","problem":41,"user":"50cf21dee4b0e61f11ddcd8b"},{"problem":41,"code":"(fn ! [s n]\n  (if (empty? s) (empty s)\n    (concat (take (dec n) s) (! (drop n s) n))\n    )\n  )","user":"54c271b9e4b045293a27f602"},{"problem":41,"code":"#(map first \n      (filter \n       (fn [m] \n         (not= \n          (mod (+ (second m)1) %2) 0))\n       (map list %1 (range))))","user":"55bedd93e4b01b9910ae2a0d"},{"problem":41,"code":"(fn drop-every-n\n  [s, n]\n  (map last (filter (fn [l] (not= (mod (inc (first l)) n) 0)) (map-indexed list s))))","user":"6096d37be4b00e9e6653c3f0"},{"problem":41,"code":"#(keep-indexed (fn [i e] (when-not (zero? (rem (inc i) %2)) e)) %1)","user":"5f5aee4fe4b0a0bc16850aaa"},{"code":"(fn [xs n]\n  (loop [xs xs, i 1, buf []]\n    (if (seq xs)\n      (recur (next xs) (inc i) (if (= (mod i n) 0) buf (conj buf (first xs))))\n      buf)))","problem":41,"user":"4fa820fde4b081705acca1ce"},{"problem":41,"code":"(fn [coll num]\n  (mapcat \n   #(take (- num 1) %)\n   (partition-all num coll)))","user":"57d13683e4b0bd073c202368"},{"code":"(fn [S s] (flatten (partition (dec s) s [] S)))","problem":41,"user":"5061cc17e4b0a30dc9a35d34"},{"code":"#(mapcat\n   (partial take (dec %2))\n   (partition-all %2 %1))","problem":41,"user":"4f6845d2e4b07046d9f4ef74"},{"code":"(fn [s n] (mapcat #(if (= n (count %)) (drop-last %) % ) (partition-all n s)))","problem":41,"user":"52265e41e4b04e78ff2e1981"},{"problem":41,"code":"(fn [collection n]\n  (filter identity\n  (map-indexed\n   (fn [x y] \n     (when \n       (not (= 0 (mod (inc x) n))) y))\n   collection)))","user":"5470cb10e4b094393f72dd65"},{"code":"(fn [x y]\n  (loop [a x b y result [] num 1]\n    (if (first a)\n      (if (not= 0 (rem num b))\n  (recur (rest a) b (conj result (first a)) (inc num))\n\t(recur (rest a) b result (inc num)))\n      result)))","problem":41,"user":"4eb0afed535d7eef3080733e"},{"code":"(fn [coll n]\n  (map first (filter (fn [[a b]] (not= 0 (mod b n))) \n    (map vector coll (iterate inc 1)))))","problem":41,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn [c n] (keep-indexed \n  #(if (not= 0 (rem (+ 1 %) n)) %2) c)\n)","problem":41,"user":"4fd11a93e4b04c3a95aa040a"},{"problem":41,"code":"#(mapcat (partial take (dec %2)) (partition-all %2 %1) )","user":"57addf3ae4b0b8559636fca4"},{"code":"(\n  fn f[ s n ](\n    keep-indexed #( if ( = 0 ( rem (+ 1 %1) n) ) nil %2 ) s \n  ) \n)","problem":41,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"#(mapcat (fn [subseq] (take (- %2 1) subseq)) (partition-all %2 %1))","problem":41,"user":"538c3424e4b0b51d73faae58"},{"problem":41,"code":"(fn [coll freq]\n  (reduce concat (partition-all (dec freq) freq coll)))","user":"5a58bfd0e4b05d388ecb6c84"},{"problem":41,"code":"#(filter identity (map-indexed \n             (fn [id item] \n                 (when (not= (mod (inc id) %2) 0) \n                       item))\n               %1))","user":"5976da27e4b01722bebd4ce3"},{"problem":41,"code":"(fn n41 [lst n]\n  (if (< (count lst) n)\n    lst\n    (concat (take (dec n) lst) (n41 (drop n lst) n))))","user":"5893c64ce4b00487982d524b"},{"problem":41,"code":"(fn [coll n]\n  (map \n   second\n   (filter \n    #(not= 0 (mod (+ 1 (first %1)) n)) \n    (map-indexed vector coll))))","user":"54f1b4e7e4b024c67c0cf8b5"},{"code":"(fn [xs n]\n  (map second\n       (remove #(zero? (mod (inc (first %)) n))\n               (map-indexed vector xs))))","problem":41,"user":"52525a0ee4b0541d1855b8a2"},{"code":"(fn [coll i]\n  (loop [xs coll acc []]\n    (if (empty? xs)\n      acc\n      (recur (drop i xs) (reduce conj acc (take (dec i) xs))))))","problem":41,"user":"4e36425c535deb9a81d77f33"},{"code":"(fn [xs n] (map second (filter (fn [[i _]] (not= (dec n) (rem i n))) (reverse (zipmap (range (count xs)) xs)))))","problem":41,"user":"50ee851ee4b06330c1f87c5b"},{"problem":41,"code":"(fn dn\n  [lst n]\n    (if (empty? lst)\n      lst\n      (concat (take (dec n) lst) (dn (drop n lst) n))))","user":"58b51e05e4b0ebc645576d4c"},{"problem":41,"code":"#(loop [s %1 n 1 o []]\n   (if (empty? s)\n     o\n     (recur\n      (next s)\n      (inc (mod n %2))\n      (if (= n %2) \n        o\n        (conj o (first s)))\n      )))","user":"587c59d1e4b01531a375eb17"},{"code":"(fn [arr idx]\n  (keep-indexed #(when-not (zero? (rem (inc %) idx)) %2) arr))","problem":41,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":41,"code":"(fn dropn [s n]\n  (if (empty? s)\n    (list)\n    (flatten (cons (take (- n 1) s) (dropn (drop n s) n)))))","user":"55885edae4b059ccff29b1f6"},{"code":"(fn [coll n]\n  (loop [i 0 v []]\n    (if (= i (count coll))\n      v\n      (let [new-v (if (zero? (mod (inc i) n)) v (conj v (get coll i)))]\n        (recur (inc i) new-v)))))","problem":41,"user":"4fa982fae4b081705acca1e0"},{"problem":41,"code":"(fn\n  [s n]\n  (let [items-to-drop (->> s\n                          (partition n)\n                          (map last)\n                          (into #{}))]\n       (filter #(not (contains? items-to-drop %)) s)))","user":"529735cbe4b02ebb4ef7503c"},{"problem":41,"code":"(fn [lst number] (keep-indexed #(if (pos? (mod (+ %1 1) number)) %2) lst))","user":"5b513bd4e4b02d533a91bcf2"},{"problem":41,"code":"(fn [ls x]\n  (loop [sq ls\n         i 1\n         return []]\n    (if (nil? (first sq))\n      return\n      (if (= i x)\n        (recur (rest sq)\n               1\n               return)\n        (recur (rest sq)\n               (inc i)\n               (conj return (first sq)))))))","user":"55f73078e4b06e875b46cea4"},{"code":"(fn [s n]\n  (loop [r [] c n s s]\n    (if (= () s)\n      r\n      (if (= c 1)\n        (recur r n (rest s))\n        (recur (conj r (first s)) (- c 1) (rest s))))))","problem":41,"user":"50435852e4b034ff00315d22"},{"problem":41,"code":"(fn [arr, i] \n  (keep-indexed \n\t#(if (> (mod (inc %1) i) 0) %2)\n\tarr   \n  )\n)","user":"55dd7f72e4b050e68259b3c4"},{"problem":41,"code":"(fn drop-n [coll n]\n  (loop [counter 1\n         coll coll\n         result []]\n    (if (empty? coll)\n      result\n      (recur (inc counter)\n             (rest coll)\n             (if (zero? (mod counter n))\n               result\n               (conj result (first coll)))))))","user":"567c7fefe4b05957ce8c61bc"},{"code":"(fn[s n] (filter #(not (nil? %)) (map-indexed (fn[i x] (if-not (zero? (rem (inc i) n)) x)) s)))","problem":41,"user":"4ec64981535d6d7199dd36c7"},{"problem":41,"code":"(fn [c n]\n  (mapcat #(if (= (count %) n) (drop-last %) %) (partition-all n c)))","user":"56504dc2e4b0284900eef6bc"},{"problem":41,"code":"(fn [xs my-nth] (mapcat #(->> % (take (dec my-nth))) (partition-all my-nth xs)))","user":"540d7dd1e4b0addc1aec6713"},{"code":"(fn [seq n]\n  (loop [accu [] s seq]\n    (if (empty? s) accu\n      (let [s2 (take n s)]\n        (recur (concat accu (if (= (count s2) n) (butlast s2) s2))\n(drop n s))))))","problem":41,"user":"4e5411e8535d8a8b8723a279"},{"problem":41,"code":"(fn [lst n]\n        (vec (remove nil? (map #(cond \n                                (not= (mod % n) (dec n)) \n                                (lst %)) \n                        (range (count lst))))))","user":"5f77890ae4b02876ed9fd0b9"},{"problem":41,"code":"(fn drpnth\n  ([s n i d]\n    (if (empty? s)\n      d\n      (if (= n i)\n        (drpnth (rest s) n 1 d)\n        (drpnth (rest s) n (inc i) (conj d (first s)))\n      )\n    )\n  )\n  ([s n] (drpnth s n 1 []))\n)","user":"54257124e4b01498b1a71b09"},{"problem":41,"code":"(fn [thelist idx] (for [curr (range 0 (count thelist)) :when (not= (mod (inc curr) idx) 0)] (nth thelist curr)))","user":"55f75c6be4b06e875b46cea9"},{"problem":41,"code":"(fn drop-n [coll n]\n  (let [length (count coll)] \n    (concat (mapcat #(drop-last %) (partition n coll))\n            (drop (- length (mod length n)) coll))))","user":"5c36d110e4b0d62ef62d9f6a"},{"problem":41,"code":"(fn drp [arr n] (when-let [s (seq arr)]\n                  \t(concat (take (dec n) arr) (drp (drop n arr) n))\n                )\n)","user":"5ca1f8a1e4b048ec896c5b8c"},{"problem":41,"code":"(fn [a b] (into [] ( mapcat #(vec (if (< (count %1) b) %1  (butlast %1))) (partition-all b a))))","user":"55ec879ae4b0121d4835fdc8"},{"problem":41,"code":"(fn drop-every [coll n] (mapcat #(if (= n (count %)) (drop-last %) %) (partition-all n coll)))","user":"551e2cade4b030e6a24d00e4"},{"code":"(fn d[s n]\n    (reduce concat (map #(if (= (count %) n)\n\t\t (butlast %)\n\t\t %)\n\t       (partition n n [] s))))","problem":41,"user":"4e842ebb535db62dc21a62df"},{"problem":41,"code":"(fn [col n]\n  (apply concat\n         (partition-all (dec n) n col)\n         )\n  )","user":"55ba70f9e4b01b9910ae29d4"},{"problem":41,"code":"(fn [xs n]\n  (loop [agg '() xs xs]\n    (if (empty? xs)\n      agg\n      (recur (concat agg (take (- n 1) xs)) (take-last (- (count xs) n) xs))\n    )\n  )\n)","user":"583dacc2e4b089d5ab817d9f"},{"problem":41,"code":"(fn drop-nth [S n]\n  (flatten (map (fn [x y] (if (not= (mod y n) 0) (list x) '())) S (range 1 (+ (count S) 1)))))","user":"56f53962e4b046a417f9206c"},{"problem":41,"code":"(fn [coll step]\n  (loop [c coll res []]\n    (if (empty? c)\n      res\n      (recur (drop step c) (concat res (take (dec step) c))))))","user":"5f238a59e4b0f565ad99828d"},{"problem":41,"code":"(fn [xs n]\n  (map second\n       (remove (fn [[i _]] (zero? (mod (inc i) n)))\n               (map-indexed vector xs))))","user":"55ea0780e4b0121d4835fda7"},{"problem":41,"code":"#_\n(fn [col n]\n  (->> col\n       (partition-all n)\n       (map vec)\n       (map #(if (= n (count %))\n               (pop %)\n               %))\n       (flatten)))\n\n(fn [col n]\n  (loop [out [] \n         in  col]\n    (if (seq in)\n      (recur (into out (take (dec n) in))\n             (drop n in))\n      out)))","user":"514a3fa5e4b0829bd132edb6"},{"code":"(fn [s n]\r\n  (loop [resultado []  rest s]\r\n    (if (empty? rest)\r\n      resultado\r\n      (recur (concat resultado (take (dec n) rest)) (drop n rest) ))) \r\n  )","problem":41,"user":"4febb4dae4b0681fd128dc98"},{"problem":41,"code":"(fn [coll n]\n              (keep-indexed #(if (not= (- n 1) (mod %1 n))\n                                %2)\n                             coll))","user":"53e92aafe4b036ad0777e49a"},{"problem":41,"code":"#(concat (mapcat butlast (partition %2 %1))\n       (when (< (count (last (partition-all %2 %1))) %2)\n         (last (partition-all %2 %1))))","user":"5760682ee4b08062f99a4e94"},{"code":"(fn [coll num]  (map last \n       (filter #(not= (mod (+ 1 (first %)) num) 0)\n                    (map-indexed vector coll)\n                    )\n       )\n  )","problem":41,"user":"5314b0cae4b08068f379ed1c"},{"code":"(fn [coll n]\n  (flatten \n   (map-indexed \n    #(if (zero? (rem (inc %1) n)) \n       '() \n       %2) \n    coll)))","problem":41,"user":"52cc4fd6e4b07d0d72b27360"},{"problem":41,"code":"(fn [coll value]\n  (if (= (count (last (partition-all value coll))) value)\n    (mapcat drop-last (partition-all value coll))\n    (flatten (conj (last (partition-all value coll)) (mapcat drop-last (partition value coll))))))","user":"5f63d933e4b02876ed9fd018"},{"code":"(fn [col o] (filter identity (map-indexed #(if (= 0 (mod (inc %1) o)) nil %2) col)))","problem":41,"user":"53286389e4b09d4e7a9b5504"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (flatten (map #(if (< (count %) n)\n                        %\n                        (drop-last %)\n                        )\n                     (partition-all n coll)\n                     )\n         )\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"problem":41,"code":"#(loop [result []\n        remain %1]\n   (if (< (count remain) %2)\n     (into result remain)\n     (recur (into result (take (dec %2) remain))\n            (drop %2 remain))))","user":"590b8607e4b047aa04b199db"},{"problem":41,"code":"#(apply concat (partition (dec %2) %2 () %))","user":"577fa91ee4b0d36ec5835e6a"},{"problem":41,"code":"(fn [x y] (loop [lst x\n                 n y\n                 cnt 0\n                 res []]\n            (cond\n              (empty? lst) res\n              (= (mod cnt n) (dec n)) (recur (next lst) n (inc cnt) res)\n              :else (recur (next lst) n (inc cnt) (conj res (first lst)))\n            )           \n          ) \n)","user":"5877e40ee4b01531a375eaab"},{"code":"#(remove nil? (apply concat (map drop-last (partition %2 %2 (repeat nil) %))))","problem":41,"user":"50e3fe8fe4b0463d32072488"},{"problem":41,"code":"(fn [a n] (filter #(not (nil? %)) (mapcat butlast (partition n n (repeat nil) a))))","user":"541ddadbe4b01498b1a71a84"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n   #(if-not\n      (zero?\n       (rem (+ 1 %1) n)) %2) coll))","user":"5c967845e4b048ec896c5a60"},{"problem":41,"code":"(fn [L PerItem]\n    (loop [Ret [] Index 1 First (first L) Rest (rest L)]\n      ;; если ничего нет, то стоп\n      (if (nil? First)\n        Ret\n        ;; повторим, пропуская PerItem-ный элемент\n        (recur\n          (if (= Index PerItem)\n            Ret\n            (conj Ret First)\n          )\n          (if (= Index PerItem)\n            1\n            (inc Index)\n          )\n          (first Rest)\n          (rest Rest)\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":41,"code":"(fn [xs n]\n  (flatten (map drop-last (partition n n [1] xs)))\n  )","user":"5a429e40e4b0447ef91cc5f9"},{"code":"(fn [xs n] (apply concat (partition-all (- n 1) n xs)))","problem":41,"user":"52618ea3e4b03e8d9a4a7064"},{"problem":41,"code":"(fn drop-every-n [s n]\n  (filter #(not (nil? %))\n          (map-indexed\n                       (fn [index item]\n                         (if (= (mod (+ index 1) n) 0)\n                           nil\n                           item))\n                       s)))","user":"5638b88de4b0bfe05bf117e9"},{"problem":41,"code":"(fn dnth [coll n] (when (seq coll) (concat (take (dec n) coll) (dnth (drop n coll) n))))","user":"58172161e4b0c0e9c07b8389"},{"problem":41,"code":"(fn [my-seq n]\n    (reduce-kv\n        (fn [init key value]\n            (if (zero? (mod (inc key) n))\n                init\n                (conj init value)))\n        [] my-seq))","user":"5784ff88e4b0ebec4cfb74d4"},{"problem":41,"code":"(fn ga [x y]  \n  (\n   if\n   (< (count x) y)\n   x \n   (\n    concat (take (- y 1) x)  \n    (ga (take-last (- (count x) y) x) y)\n    ) \n    \n    )\n  \n  \n  \n  )","user":"53fdc4b8e4b0de5c418485ea"},{"problem":41,"code":"#(loop [arr %1, i 1, n %2, result []]\n   (if (empty? arr) result (recur\n   \t\t(rest arr)\n        (if (= i n) 1 (inc i))\n        n\n        (if (= i n) result (conj result (first arr)))\n   ))\n)","user":"5d73530ce4b02e6b30c93514"},{"problem":41,"code":"(fn [arr i]\n  (loop [[a & rst] arr\n         n i\n         result []]\n    (if (nil? a)\n      result\n      (if (= 1 n)\n        (recur rst i result)\n        (recur rst (dec n) (conj result a))))))","user":"57b5dc52e4b0fbc9809a27b3"},{"code":"(fn [s n]\n  (filter (complement nil?) \n    (map-indexed \n      #(if (not= (rem (inc %1) n) 0) %2)\n      s)))","problem":41,"user":"50cf66ffe4b0e61f11ddcd92"},{"code":"(fn [coll n]\n  (mapcat (partial take (dec n)) (partition-all n coll)))","problem":41,"user":"4e68c434535d8ccf87e9fe89"},{"code":"(fn\n  [lst nth]\n  (keep-indexed (fn [i v]\n                  (if-not (zero? (rem (inc i) nth)) v)) lst))","problem":41,"user":"4ef7a483535dced4c769f258"},{"problem":41,"code":"(fn [s n]\n  (for [[k v] (map-indexed vector s)\n        :when (not (= 0 (mod (+ k 1) n)))]\n    v))","user":"572ea970e4b0cd1946bd0f89"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed\n   #(when (not (zero? (mod (inc %1) n))) %2)\n   xs))","user":"5dc88a38e4b02f9375f4e1db"},{"code":"(fn [xs n]\n          (loop [i xs result []]\n            (if (seq i)\n              (recur (drop n i) (concat result (if (>= (count i) n) (butlast (take n i)) i)))\n              result)))","problem":41,"user":"51ef31dfe4b0871fa145d9a0"},{"code":"#(mapcat (partial take (dec %2)) (partition %2 %2 [] %))","problem":41,"user":"4ef77c82535dced4c769f253"},{"code":"(fn drop-every [s n]\n  (if (empty? s) []\n    (concat (take (dec n) s) (drop-every (drop n s) n))))","problem":41,"user":"4fbd24d2e4b081705acca2ff"},{"problem":41,"code":"#(mapcat (fn [c i] (if (zero? (rem i %2)) [] [c])) %1 (drop 1 (range)))","user":"541096bde4b01498b1a719b2"},{"code":"(fn  [s n]\n  (loop [res []\n         xs s\n         i 1]\n    (if (empty? xs)\n      res\n      (recur\n       (if (= 0 (mod i n))\n         res\n         (conj res (first xs)))\n       (rest xs)\n       (inc i)))))","problem":41,"user":"504e90bae4b069badc5a33b8"},{"code":"(fn drp [x n]\n  (if (< (count x) n)\n    x\n    (concat (take (- n 1) x) (drp (drop n x) n))\n    )\n  )","problem":41,"user":"52586d24e4b0cb4875a45cb0"},{"code":"(fn [s n]\n  (first \n    (reduce \n      (fn [[coll cnt] elt] \n        (if (= 0 (rem cnt n))\n          [coll (inc cnt)]\n          [(conj coll elt) (inc cnt)]))\n      [[] 1]\n      s)))","problem":41,"user":"4fe9d647e4b0547ebccb2472"},{"code":"(fn [coll n]\n    (first (reverse\n             (reduce\n              (fn [acc v]\n                (if (= n (first acc))\n                  [1 (second acc)]\n                  [(inc (first acc)) (conj (second acc) v)]))\n              [1 []]\n              coll))))","problem":41,"user":"515ef58be4b02c55805ea237"},{"problem":41,"code":"(fn my-drop [c e]\n  (loop [coll c index 1 result []]\n    (let [f (first coll)]\n      (if (nil? f)\n        result\n       (let [next-result\n             (if (> (mod index e) 0)\n               (conj result f) result)]\n         (recur (rest coll) (inc index) next-result))))))","user":"5546704be4b0a04f7929953d"},{"problem":41,"code":"(fn [seq idx]\n\t(let [skip-nth (- idx 1)]\n\t(keep-indexed #(if-not (= skip-nth (mod %1 idx)) %2) seq)))","user":"53573d70e4b04ce2eb3ed278"},{"problem":41,"code":"(fn [in th] \n  (loop [in in cnt 1 out ()]\n    (if (empty? in) \n      out\n      (recur (rest in) (if (= cnt th) 1 (inc cnt)) (if (= cnt th) out (concat out [(first in)])))\n      )\n    )\n  )","user":"58186016e4b0c0e9c07b83ad"},{"code":"(fn f [c x]\n  (if (empty? c)\n    c\n    (concat (take (dec x) c) (f (drop x c) x))))","problem":41,"user":"524e6b68e4b0541d1855b7db"},{"code":"#(flatten(partition (dec %2) %2 [] %1))","problem":41,"user":"52117ea7e4b07aea8afc4f70"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (map #(first %)\n    (filter #(not (zero? (mod (last %) n)))\n      (map vector xs (range 1 (inc (count xs)))))))","user":"5773f3a9e4b0979f896515f2"},{"problem":41,"code":"(fn [s p] (remove #(= (mod (inc (.indexOf s %)) p) 0) s))","user":"5458474ce4b01be26fd7461b"},{"problem":41,"code":"(fn dropnth [coll n]\n  (loop [result '()\n         toparse (apply list coll)\n         counter (dec n)]\n    (println (str result))\n    (cond\n      (empty? toparse) (reverse result)\n      (zero? counter) (recur result (pop toparse) (dec n))\n      :else (recur (conj result (peek toparse)) (pop toparse) (dec counter)))))","user":"5abeb697e4b073f177442725"},{"problem":41,"code":"(fn [col n]\n  (loop [res [] src col]\n    (if (< (count src) n)\n      (into res src)\n      (recur (into res (take (dec n) src))\n             (drop n src)))))","user":"57dfab73e4b0bd073c202468"},{"code":"#(second ((fn [col at] (reduce\n  (fn [acc x]\n\t\t(if (= 0 (mod (first acc) at))\n\t\t\t(list (inc (first acc)) (second acc))\n\t\t\t(list (inc (first acc)) (conj (second acc) x))))\n\t'(1 []) col)) %1 %2))","problem":41,"user":"4f73536ee4b07046d9f4f044"},{"code":"#(mapcat drop-last (partition %2 %2 [(gensym)] %))","problem":41,"user":"51f2b8f1e4b0210f90e74556"},{"problem":41,"code":"#(reduce\n   (fn [x e]\n     (println (mod (first e) %2))\n     (if ((complement zero?) (mod (first e) %2))\n       (conj x (second e))\n       x))\n   []\n   (partition 2 (interleave (range 1 50) %)))","user":"54893618e4b0e286459a11e0"},{"problem":41,"code":"#(->>\n  (partition (dec %2) %2 nil %1)\n  (apply concat))","user":"5d2e5065e4b01671435dbcae"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n    (mapcat #(if (= (count %) n) (drop-last %) %) (partition-all n lst)))","user":"57f81569e4b0d3187e900919"},{"problem":41,"code":"#(loop [x (seq %1) c %2 r [] i %2]\n  (if (= x ())\n    r\n    (if (= c 1) (recur (rest x) i r i ) (recur (rest x) (dec c) (conj r (first x)) i ) )\n    )\n  )","user":"59551e04e4b066ee0a44af20"},{"code":"#(for [[a b] (map vector %1 (map (partial + 1) (range)))\n      :when (> (mod b %2) 0)]\n  a)","problem":41,"user":"4eb2d0ae535d7eef3080734e"},{"code":"(fn[x n](flatten(map-indexed #(if(=(+(mod% n)1)n)[]%2\r\n)x)))","problem":41,"user":"4dd66da7535d2dad7130b5c8"},{"code":"(fn [v n] (remove #(zero? (mod (inc (.indexOf v %)) n)) v))","problem":41,"user":"5174ade2e4b07031762f2edf"},{"code":"(fn i [l x] (if (empty? l) l (concat (take (- x 1) l) (i (drop x l) x))))","problem":41,"user":"502d3912e4b0d96a44ab2030"},{"code":"(fn [x y]\n  (loop [s [] i 0]\n    (if (< i (count x))\n      (recur \n       (conj s (nth x i)) \n       (if (= (mod  (+ 2 i) y) 0) \n         (+ i 2) \n         (inc i)))\n      s)))","problem":41,"user":"5022292ee4b0846bc458ae46"},{"code":"(fn [coll n] (mapcat #(take (dec n) %) (partition-all n coll)))","problem":41,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":41,"code":"(letfn [(drop-every-n [coll n]\n          (loop [lcoll coll\n                 acoll []\n                 ln    n]\n            (cond\n              (empty? lcoll)  acoll\n              (= ln 1)        (recur (rest lcoll) acoll n)\n              :else           (recur (rest lcoll) (conj acoll (first lcoll)) (dec ln)))))]\n  drop-every-n)","user":"55f5c118e4b06e875b46ce8e"},{"problem":41,"code":"#(->> %1\n     (partition-all (dec%2) %2)\n      (flatten)\n      )","user":"5fa96ddbe4b0fa27300f3dec"},{"problem":41,"code":"#(apply concat\n   (partition-all (dec %2) %2 %1) )\n\n#_(fn [coll n]\n  (keep-indexed \n    (fn [i item] \n      (when-not\n        (= 0 (mod (inc i) n))\n        item))\n    coll))","user":"58acce0ae4b0005cfeb1a754"},{"code":"(fn [col n]\n(drop 1 \n  (reduce \n    #(if (zero? (mod (inc (first %2)) n)) \n       %1 \n       (conj %1 (last %2))) \n   (map-indexed vector col))))","problem":41,"user":"4e58ef07535d8a8b8723a299"},{"problem":41,"code":"(fn [coll n]\n    (remove #(zero? (mod (+ 1(.indexOf coll %)) n)) coll))","user":"56014f55e4b04bb52996e184"},{"code":"(fn [lst n]\n    (map second (filter\n                #(not (= 0 (mod (first %) n)))\n                (map list (iterate inc 1) lst))))","problem":41,"user":"53070615e4b02e821686979e"},{"problem":41,"code":"(fn [xs n] (mapcat (fn [a] [(get xs a)]) (for [x (range) :when (not= (rem (+ x 1) n) 0) :while (< x (count xs))] x)))","user":"550e0373e4b06e50f9beb162"},{"problem":41,"code":"(fn [xs n]\n  (->> xs\n       (map-indexed #(list %1 %2))\n       (filter #(not= (dec n) (mod (first %) n)))\n       (map second)))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":41,"code":"(fn a \n  ([l i] (a l i 1)) \n  ([l i j] (cond (empty? l) l\n                 (= i j) (recur (rest l) i 1)\n                 :else (conj (a (rest l) i (inc j)) (first l)))))","user":"5d931a58e4b0d3f9b434ad10"},{"code":"(fn func [v n] (apply vector \r\n  (flatten\r\n   (map (partial \r\n     (fn func [n v] \r\n       (if(== (count v) n) (drop-last v) v)) n)\r\n        (partition-all n v)))))","problem":41,"user":"506717e2e4b03d366d7cb2ba"},{"problem":41,"code":"(fn [x pos] (loop [result nil lst x cnt 1]\n          (if (empty? lst)\n            (reverse result)\n            (recur (if (= (mod cnt pos) 0)\n                     result\n                     (cons (first lst) result))\n                   (rest lst)\n                   (+ cnt 1)))))","user":"52f304b4e4b05e3f0be25f07"},{"code":"(fn [c i] (keep-indexed #(if (not= 0 (mod (inc %1) i)) %2) c))","problem":41,"user":"4ff07229e4b0678c553fc323"},{"code":"(fn [c n] (map last (remove #(= (mod (inc (first %)) n) 0) (map-indexed #(list %1 %2) c))))","problem":41,"user":"519964cbe4b0aa09cbc0b849"},{"code":"(fn [xs n] (map last (filter #(not= 0 (mod (inc (first %)) n)) (map-indexed vector xs))))","problem":41,"user":"4f5155a3e4b03ad3f0c10d1b"},{"problem":41,"code":"(fn [c n]\n (->> c\n      (map-indexed vector)\n      (filter #((complement zero?) (mod (inc (first %)) n)))\n      (map last)\n      ))","user":"56f974c0e4b07572ad1a88b1"},{"problem":41,"code":"(fn [x y]\n\t(map second (filter #(not= y (inc (mod (first %) y))) (map-indexed vector x))))","user":"5628f33ce4b00e49c7cb47f3"},{"problem":41,"code":"(fn peu [x y] (if (empty? x) (vec x) (concat (vec (take (dec y) x)) (peu (drop y x) y))))","user":"53fc8424e4b0de5c418485b3"},{"code":"(fn [s n] \r\n  (reduce concat (map (partial take (dec n)) (partition-all n s))))","problem":41,"user":"4eebc5da535d93acb0a668aa"},{"problem":41,"code":"(fn [coll n]\n  (->> (partition-all n coll)\n       (map #(take (dec n) %))\n       (flatten)))","user":"579f89d5e4b05302be0b72ff"},{"problem":41,"code":"(fn [s n] ((fn r [n m s] (cond (empty? s) s (= n m) (r n 1 (rest s)) :else (cons (first s) (r n (+ m 1) (rest s))))) n 1 s))","user":"556766c1e4b0c656e3ff1840"},{"problem":41,"code":"(fn drop-nth\n  [lst n]\n  (loop [i 1 res [(first lst)]]\n    (if (= i (count lst))\n      res\n      (if (zero? (mod (inc i) n))\n        (recur (inc i) res)\n        (recur (inc i) (concat res (vector (nth lst i))))))))","user":"59390a35e4b02506e01a29f3"},{"problem":41,"code":"(fn [input in]\n    (loop [l1 input\n           new (empty input)\n           x 1]\n          (if (= (count l1) 0)\n                  new\n                  (recur\n                           (rest l1)\n                           (if (= (mod x in) 0)\n                             new\n                             (conj new (first l1))\n                             \n                           )\n                   \t\t\t(+ x 1)\n                   \n                   \t\t\n                   )\n            \t\t\t\t\n                  )\n          )\n    )","user":"55871c62e4b059ccff29b1e0"},{"code":"(fn drop-nth [l n]\n  (loop [l l lfilter []]\n    (if (empty? l)\n      (flatten lfilter)\n      (recur (drop n l) (conj lfilter (take (dec n) l)))\n      )\n    )\n  )","problem":41,"user":"529a73bde4b02ebb4ef75096"},{"code":"(fn [coll n]\n    (loop [input coll\n           output (empty coll)\n           i 0]\n      (if (empty? input)\n        output\n        (if (= i (dec n))\n          (recur (rest input) output 0)\n          (recur (rest input) (conj output (first input)) (inc i))))))","problem":41,"user":"4fcbc18ae4b0ee37620e185c"},{"code":"#(->> (for [i (range 0 (count %) %2)] \n          (->> % (drop i) (take (dec %2))))\n  flatten)","problem":41,"user":"530cb5b8e4b02e82168697e0"},{"problem":41,"code":"(fn dr \n  ([x n] (dr x n () 1))\n  ([x n y i] (cond (empty? x) (reverse y)\n                   (zero? (mod i n)) (dr (rest x) n y (inc i))\n                   true (dr (rest x) n (conj y (first x)) (inc i)))))","user":"53e91473e4b036ad0777e495"},{"code":"(fn [X V]\n         (filter (fn[x] x) (map (fn[x y] (if-not (= 0 (rem y V)) x))     \n         X (iterate inc 1))))","problem":41,"user":"536c77f1e4b0fc7073fd6e3f"},{"problem":41,"code":"(fn [items n]\n     (mapcat #(if (= (count %) n)\n                   (drop-last %)\n                   %) (partition-all n items)))","user":"59e48db0e4b08badc2a0c53e"},{"problem":41,"code":"(fn [data n]\n  (loop [remaining data answer []]\n    (if (empty? remaining)\n      answer\n      (recur (drop n remaining) (apply (partial conj answer) (take (dec n) remaining))))))","user":"57894e30e4b0ebec4cfb752b"},{"problem":41,"code":"(fn dropn [coll n] \n        (reduce #(conj %1 (second %2)) \n                [] \n                (#(filter (fn [[idx item]] (not= (rem idx %2) (- n 1))) \n                          (map list (range) %1)) coll n)))","user":"59e8b4ade4b0249b72820734"},{"code":"(let [dropit\n      (fn [coll n counter result]\n        (if (nil? coll)\n          result\n          (if (= counter n)\n            (recur (next coll) n 1 result)\n            (recur (next coll) n (inc counter) (conj result (first coll)))\n          )\n        )\n      )]\n  (fn [coll n] (dropit coll n 1 []))\n)","problem":41,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":41,"code":"(fn [coll n]\n    (filter #(not (nil? %)) \n        (for [i (range (count coll))]\n            (if (= 0 (mod (inc i) n))\n                nil\n                (nth coll i)))))","user":"5fb2eac0e4b08cb800c85b2f"},{"code":"#(loop [li %1 n %2 result []]\n   (if (< (count li) n)\n     (into result li)\n     (recur (nthnext li n) n (into result (take (dec n) li)))))","problem":41,"user":"512d3304e4b040332b905b2d"},{"problem":41,"code":"(fn [coll n]\n  (mapcat butlast (partition n n [:none] coll)))","user":"5592ba8be4b0c79f6e1db931"},{"problem":41,"code":"(fn [s d] (keep-indexed (fn [i e] (when (pos? (rem (inc i) d)) e)) s))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"(fn [o-s n]\n         (loop[i 1\n               acc []\n               s o-s]\n           (if (empty? s)\n               acc\n             (if (= i n)\n               (recur 1 acc (rest s))\n               (recur (inc i) (conj acc (first s)) (rest s))))))","problem":41,"user":"4e6a11ee535d8ccf87e9fe9f"},{"problem":41,"code":"(fn [seq nth] (->> seq (map-indexed #(if (= (mod (+ %1 1) nth) 0) nil %2)) (filter #(identity %1))))","user":"5d6d2172e4b04d129b00f2b9"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed #(if (pos? (mod (inc %) n)) %2) xs))","user":"53f5666ee4b0db01ade6f9cf"},{"problem":41,"code":"(fn drop-items [coll x]\n  (loop [coll coll\n         \n         res []\n         c 1]\n    (if (empty? coll)\n      res\n      (recur (rest coll)\n         \n             (if (= c x)\n               res\n               (conj res (first coll)))\n             (if (= c x)\n               1\n               (inc c))))))","user":"5745b884e4b009280f9f2b53"},{"problem":41,"code":"(fn [c n]\n  (filter #(not= % \\a)\n          (apply concat (partition (dec n) n \"a\" c))))","user":"592883f1e4b072a2710fceea"},{"problem":41,"code":"(fn drop-nth [col n]\n\t(loop [cnt 1\n           total []\n           remain col]\n      (if (empty? remain)\n      \t\ttotal\n        \t(if (= (mod cnt n) 0)\n              (recur (inc cnt)\n                     total\n                     (rest remain)\n              )\n              (recur (inc cnt)\n                     (conj total (first remain))\n                     (rest remain)\n              )))))","user":"56f57481e4b046a417f92072"},{"problem":41,"code":"#(keep-indexed (fn[i x](if (= (mod (inc i) %2) 0) nil x)) %)","user":"53d4dadde4b00fb29b221337"},{"problem":41,"code":"(fn [coll n]\n  (->> (range (count coll))\n       (remove #(= 0 (rem (inc %) n)))\n       (map #(coll %))))","user":"5f5358b7e4b0a0bc16850a77"},{"problem":41,"code":"(fn f\n  ([coll n]\n    (f coll n (dec n)))\n  ([coll n i]\n    (if (seq coll)\n      (if (= i 0)\n        (f (rest coll) n)\n        (conj (f (rest coll) n (dec i)) (first coll)))\n      ())))","user":"59a24c92e4b066c664927d20"},{"code":"(fn [coll n]\n    (->> coll\n         (map vector (iterate inc 1))\n         (filter #(not= 0 (mod (first %) n)))\n         (map last)\n         ))","problem":41,"user":"4fe8a3bde4b07c9f6fd12c61"},{"problem":41,"code":"(fn [coll n] (vec (keep-indexed (fn [in it] (when (not= 0 (mod (inc in) n)) it)) coll)))","user":"54ba8206e4b0ed20f4ff6eb6"},{"code":"(fn [coll n]                                                                  \n    (apply concat (mapcat #(list (take (dec n) %)) (partition-all n coll))))","problem":41,"user":"526397f1e4b03e8d9a4a70b6"},{"problem":41,"code":"(fn [coll* n]\n  (loop [acc []\n         c n\n         coll coll*]\n    (if (seq coll)\n      (if (= c 1)\n        (recur acc n (rest coll))\n        (recur (conj acc (first coll)) (dec c) (rest coll)))\n      acc)))","user":"55a12668e4b0acc240e3150b"},{"code":"(fn [s n]\r\n  (map #(second %)\r\n  (remove #(= 0 (mod (first %) n))\r\n    (map-indexed #(list (inc %1) %2) s))))","problem":41,"user":"4f9597e0e4b0dcca54ed6cd4"},{"code":"(fn [x y] (vec (keep-indexed (fn [a b] (if(not (= (rem (+ a 1) y) 0)) b )) x)))","problem":41,"user":"4f4003d9e4b0e243712b1fa5"},{"code":"(fn [x d]\n  (loop [x x acc '() n d]\n    (if (empty? x)\n         (reverse acc)\n        (if (= n 1)\n          (recur (rest x) acc d)\n          (recur (rest x) (cons (first x) acc) (dec n))))))","problem":41,"user":"4feef09ae4b0678c553fc30e"},{"problem":41,"code":"(fn drop-every [coll n]\n  (loop [cl coll res [] nr 1]\n        (if (empty? cl)\n          (seq res)\n          (if (= (mod nr n) 0)\n            (recur (rest cl) res (+ nr 1))\n            (recur (rest cl) (conj res (first cl)) (+ nr 1))))))","user":"56a1fce9e4b0542e1f8d14b7"},{"code":"#(reduce concat (map (fn [x] (if (= %2 (count x))  (butlast x) x)) (partition-all %2 %1)))","problem":41,"user":"5296008fe4b02ebb4ef7502a"},{"problem":41,"code":"(fn [sq n]\n  \t(loop [i 1\n           acc []\n           sqs sq]\n      (cond \n       (empty? sqs) \n       \t acc\n       (= (mod i n) 0)\n       \t (recur (inc i) acc (rest sqs))\n       :default\n       \t (recur (inc i) (conj  acc (first sqs)) (rest sqs)))))","user":"58d4e73ce4b03c36ff7e594d"},{"problem":41,"code":"(fn [coll drop]\n   (loop [i 1\n          r []\n          c coll]\n     (if (empty? c)\n       r\n       (recur (inc i) (if (= (rem i drop) 0) r (conj r (first c))) (rest c)))))","user":"5c3f37fce4b08cd430848e91"},{"problem":41,"code":"(fn [xs n]\n  (apply concat (partition (dec n) n [] xs)))","user":"59fa241ee4b0ca45a743a358"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (not= (mod (inc %1) n) 0)\n                   %2)\n                coll))","user":"587ef226e4b052da650a6354"},{"code":"#(loop [res [] n (dec %2) in %]\n   (if (empty? in)\n     res\n     (recur (concat res (take n in)) n (drop (inc n) in))\n     )\n   )","problem":41,"user":"52774dd2e4b03e8d9a4a74ff"},{"code":"(fn [coll n]\n  (remove nil?\n    (map-indexed \n      #(when-not (= 0 (rem (inc %1) n)) %2) coll))\n)","problem":41,"user":"4f504739e4b03ad3f0c10d00"},{"code":"(fn [col n] (for [x (range 0 (count col)) :when ( (fn [a] (or (< 0 (mod (+ a 1) n)) (= a 0))) x)] (col x)))","problem":41,"user":"4e61bb60535d8ccf87e9fe5c"},{"code":"(fn [s n]\n  (loop [r s\n         acc []\n         iter 1]\n    (if  (empty? r)\n      acc\n      (if (zero? (mod iter n))\n        (recur (rest r) acc (inc iter))\n        (recur (rest r) (conj acc (first r)) (inc iter))))))","problem":41,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":41,"code":"(fn test [seqq x]\n  (reduce concat \n          (map (partial take (- x 1))\n               (partition-all x seqq))))","user":"579332c2e4b0e215f87e8452"},{"code":"(fn[coll i](filter (comp not nil?) (map-indexed (fn[idx itm] (if (= (mod (inc idx) i) 0) nil itm)) coll)))","problem":41,"user":"4fc50525e4b081705acca370"},{"code":"#(reverse\n  (loop [cnt 1\n        n %2\n        lst %\n        acc nil]\n        (if (empty? lst)\n            acc\n            (if (= (mod cnt n) 0)\n              (recur 1 n (rest lst) acc)\n              (recur (inc cnt) n (rest lst) (conj acc (first lst)))))))","problem":41,"user":"4fab0c0ae4b081705acca20d"},{"code":"(fn [c n] (->> c \n  (partition-all n)\n  (map #(if (= n (count %)) (butlast %) %))\n  flatten))","problem":41,"user":"4ee7ef87535d93acb0a66872"},{"problem":41,"code":"(fn [col n] (keep-indexed (fn [idx x] (if (not= 0 (rem (inc idx) n)) x)) col))","user":"53dcb9b2e4b0d874e779ae23"},{"problem":41,"code":"(fn partdrop [somelist n] (vec (flatten (partition (- n 1) n nil somelist))))","user":"5641f0ede4b08d4f616f5f11"},{"code":"#(mapcat (fn [p] (if (= %2 (count p)) (butlast p) p))(partition-all %2 %))","problem":41,"user":"4db92654535d1e037afb21a0"},{"problem":41,"code":"(fn [s n]\n   (for [x s\n         :when (not\n                (zero?\n                 (mod\n                  (inc\n                   (.indexOf s x)) n)))]\n     x))","user":"5fa80c01e4b0fa27300f3de2"},{"code":"(fn drop-nth [a-seq n]\n   (mapcat  #(take (dec n) %) (partition-all n a-seq))\n)","problem":41,"user":"52763696e4b03e8d9a4a74d7"},{"problem":41,"code":"(fn [ls n]\n  (loop [ls ls n n acc []]\n    (if (empty? ls)\n      acc\n      (recur (drop n ls) n (concat acc (take (dec n) ls))))))","user":"5d672bd7e4b0db5d338d15f1"},{"problem":41,"code":"; Absolutely didn't get this.  Googling showed me how others used partion-all,\n; with this solution: \n;(fn [coll every-nth]  (mapcat #(take (dec every-nth) %) (partition-all every-nth coll)))\n\n; But then i saw an example in the partition-all documentation showing how to split the coll and drop elements, using the 'step' param.\n\n(fn [coll every-nth]  (flatten (partition-all (dec every-nth ) every-nth coll)))\n\n; Yeah, it's similar to _pcl's solution.","user":"5535e822e4b09218d5f44fb2"},{"problem":41,"code":"(fn [s n]\n      (->> (partition n n '(1) s)\n           (map butlast)\n           (flatten)))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":41,"code":"(fn \n  [inseq pos]\n  (->> inseq\n   (map #(list %1 %2) (range))\n   (filter\n    #(< 0 (mod (inc (first %1)) pos )))\n   (map second)))","user":"57c99a45e4b05aa3c4741d31"},{"problem":41,"code":"#(remove nil? (map-indexed (fn [i el] (if (= (rem (inc i) %2) 0) nil el)) %1))","user":"57440f77e4b0c285004e8ab5"},{"problem":41,"code":"(fn [xs n]\n        (loop [[hd & tl :as xs] xs\n               step n\n               acc '()]\n          (cond (empty? xs) (reverse acc)\n                (= 1 step) (recur tl n acc)\n                :else (recur tl (- step 1) (conj acc hd)))))","user":"58a47197e4b01a0c0b2328f9"},{"problem":41,"code":"(fn [coll num]\n  (loop [c coll\n         n num\n         r []]\n    (if (empty? c)\n      r\n      (recur (drop n c) n (concat r (take (dec n) c)) ) )))","user":"590253e3e4b0438e51c2d055"},{"problem":41,"code":"#(apply concat (partition-all (dec %2) %2 %1))\n\n\n;#(mapcat (fn [x] (take (dec %2) x)) (partition-all %2 %))\n\n\n;(fn [coll n]\n;  (flatten \n;    (concat \n;      (map #(drop-last %) (partition n coll)) \n;      (take-last (rem (count coll) n) coll))))\n\n\n;#(mapcat (fn [a] (take (- %2 1) a)) (partition-all %2 %1))","user":"58299e03e4b051871117bf46"},{"problem":41,"code":"(fn my-drop [coll n]\n  (concat\n   (mapcat butlast (partition n coll))\n   (drop (* n (quot (count coll) n)) coll)))","user":"54b817eee4b0ed20f4ff6e93"},{"problem":41,"code":"; We partition the original list into smaller lists\n; With the length of argument\n; For each partitioned list that has the length of the argument n\n; we drop the last element.\n; Then we flatten the partitioned list again.\n\n(fn drop-nth-item [lat n]\n  (flatten (map #(if (= (count %) n)\n                   (drop-last %)\n                   %)\n                (partition-all n lat))))","user":"58e965b3e4b056aecfd47d08"},{"problem":41,"code":"(fn [coll n] (remove #(zero? (mod (if (number? %) % (+ 1 (.indexOf coll %)))  n)) coll))","user":"5313d68de4b08068f379ed0f"},{"problem":41,"code":"#(keep-indexed (fn [idx itm] (if-not (zero? (mod (inc idx) %2)) itm)) %1)","user":"588d224ae4b00487982d516c"},{"code":"(fn [coll n] (map first (filter (fn [[_ y]] (not= n y)) (partition 2 (interleave coll (cycle (range 1 (inc n))))))))","problem":41,"user":"505345d9e4b0517ede0d0a06"},{"code":"#(filter (complement nil?) (mapcat butlast (partition %2 %2 (repeat nil) %1)))","problem":41,"user":"4ee77f15535d93acb0a66868"},{"code":"(fn drop-every\n  [items n]\n  (keep-indexed (fn [index item]\n                  (if (= 0 (mod (+ 1 index) n))\n                    nil\n                    item)) items))","problem":41,"user":"511720eae4b0063b4e3e16da"},{"problem":41,"code":"(fn f\n  ([coll n]\n   (f coll n [] n))\n  ([coll n result-coll current-n]\n   (if (empty? coll)\n     result-coll\n     (let [[x & xs] coll\n           next-n   (dec current-n)]\n       (if (= 1 current-n)\n         (f xs n result-coll n)\n         (f xs n (conj result-coll x) next-n))))))","user":"524a9556e4b05ef8e38e64b1"},{"problem":41,"code":"(fn drop-every [lst num]\n  (flatten (let [nlst (partition-all num lst)]\n              (for [i nlst] (if (= num (count i)) (if (nil? (butlast i)) () (butlast i)) i)))))","user":"59dd387be4b0a0ac046f2502"},{"problem":41,"code":"(fn [coll n]\n    (vec (loop [remaining (drop n coll) result (take (- n 1) coll)]\n           (if (> n (count remaining))\n             (concat result remaining)\n             (recur \n               (drop n remaining)\n               (concat result (take (- n 1) remaining)))))))","user":"57b39fbee4b0fbc9809a2783"},{"code":"(fn [coll idx]\n  (mapcat (fn [a b]\n            (if (zero? (mod b idx))\n              nil\n              (list a)))\n       coll\n       (iterate inc 1)))","problem":41,"user":"536102efe4b0243289761e3e"},{"code":"#(loop [coll % acc []]\n   (if (< (count coll) %2)\n     (apply concat (conj acc coll))\n     (recur (drop %2 coll) (conj acc (take (- %2 1) coll)))))","problem":41,"user":"4ed45563535d10e5ff6f52c9"},{"problem":41,"code":"#(let [drop-num %2 take-num (dec %2)]\n   (loop [acc [] coll %1]\n     (if (empty? coll)\n       acc\n       (recur (concat acc (take take-num coll)) (drop drop-num coll)))))\n\n\n;#(loop [acc [] coll %1] (if (empty? coll) coll (let [take-num (- %2 1)] (recur (concat acc (take take-num coll)) (drop %2 coll)))))\n   \n;(fn [vec n] (mapcat #(take (dec n) %) (partition-all n vec)))","user":"58d2af83e4b03c36ff7e5907"},{"problem":41,"code":"(fn drop-every-nth\n  ([s n] (drop-every-nth s n 1))\n  ([s n i]\n   (if (empty? s)\n     '()\n     (let [tail (lazy-seq (drop-every-nth (rest s) n (inc i)))]\n       (if (= (rem i n) 0)\n         tail\n         (cons (first s) tail))))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":41,"code":"(fn [items n] (map last (filter #(not= (dec n) (mod (first %) n)) (map vector (range) items))))","user":"56877fcbe4b0dcc4269f405e"},{"problem":41,"code":"(fn [xs n]\n  (letfn [(gr [xs n] \n              (if (seq xs) \n                (vec (concat (take (dec n) xs) (gr (drop n xs) n)))\n                []))]\n    (gr xs n)))","user":"55a1ba5ee4b0acc240e31517"},{"problem":41,"code":"#(flatten \n (map\n  (comp\n  (partial filter (complement nil?))\n   drop-last)\n  (partition %2 %2 (repeat nil) %1)))","user":"542db41be4b0dad94371f2bb"},{"code":"(fn [xs n] (filter identity (map-indexed (fn [i x] (if-not (= 0 (mod (inc i) n)) x)) xs)))","problem":41,"user":"51307b84e4b08c712d3fae39"},{"problem":41,"code":"#(mapcat identity (partition-all (dec %2) %2  %1))","user":"5d6523ace4b0db5d338d15cd"},{"code":";; (fn [xs n]\n;;  (reverse ((fn [xs c acc]\n;;              (if (empty? xs) acc\n;;                (if (= c n)\n;;                  (recur (rest xs) 1 acc)\n;;                  (recur (rest xs) (inc c) (conj acc (first xs)))))) xs 1 ())))\n\n;; m = [list c]\n;; (fn [xs n] (reverse\n;;             (first\n;;               (reduce (fn [[xs c] x] (if (= c n)\n;;                                        [xs 1]\n;;                                        [(conj xs x) (inc c)]))\n;;                       [() 1] \n;;                       xs))))\n\n(fn [xs n]\n  (mapcat (partial take (dec n)) (partition-all n xs)))","problem":41,"user":"533696b9e4b0e30313ee6c7c"},{"code":"(fn drop-nth [s n]\n     (flatten (map \n       #(if (= (count %) n) (reverse (rest (reverse %))) %)\n (partition-all n s))))","problem":41,"user":"4f9c4080e4b0dcca54ed6d1a"},{"problem":41,"code":"(fn [vec n]\n   (->>\n     (partition-all n vec)\n      (mapcat #(take (dec n) %))\n     )\n   )","user":"58d4d864e4b03c36ff7e594c"},{"problem":41,"code":"(fn droper\n  ([coll n] (droper coll n []))\n  ([coll n my-coll]\n   (if (empty? coll)\n     my-coll\n     (droper (drop n coll) n (concat my-coll (take (dec n) coll))))))","user":"6033f8e9e4b0d5df2af222c6"},{"code":"(fn [coll n] (mapcat #(take (dec n) %) (partition-all n coll)) )","problem":41,"user":"51cec7b1e4b0e42293a2255b"},{"code":"; zip, filter, select\n(fn drop-nth [coll n]\n  (map #(first %)\n\t\t(filter #(not= (first (rest %)) n)\n\t\t\t(map #(list % %2)\n\t\t\t\tcoll (cycle (range 1 (inc n)))))))","problem":41,"user":"4ed72e51535d10e5ff6f52ee"},{"code":"#(concat (mapcat drop-last (partition %2 %)) (take-last (rem (count %) %2) %) )","problem":41,"user":"52c6a0abe4b0c2d177d62111"},{"problem":41,"code":"(fn [xs n]\n  (let [f (fn [x n] (= (mod x n) 0))\n        items (->> xs\n                     (map vector (range))\n                     (filter #(f (inc (first %)) n))\n                     (map second)\n                     (into #{}))]\n    (remove items xs)))","user":"52d84ea7e4b09f7907dd1390"},{"code":"(fn [coll n] \n   (mapcat #(take (dec n) %) (partition-all n coll)))","problem":41,"user":"539ad6b7e4b0b51d73faaf18"},{"code":"(fn [s f]\n  (loop [new-seq (empty s)\n         cnt     0]\n    (if (= cnt (count s))\n      new-seq\n      (recur (if (zero? (mod (+ 1 cnt) f))\n               new-seq\n               (conj new-seq (s cnt)))\n             (inc cnt)))))","problem":41,"user":"53098be4e4b02e82168697b7"},{"code":"#(first (reduce (fn [[l n ] a] \n                  (if (zero? (rem n %2))\n                    [l (inc n)]\n                    [(conj l a) (inc n)]))\n                 [[] 1] %1))","problem":41,"user":"4f32a7f1e4b0d6649770a095"},{"problem":41,"code":"#_(fn [coll n]\n (apply concat (map #(if (= n (count %)) (drop-last %) %) (partition-all n coll))))\n\n#_(fn [coll n]\n (apply concat (map (partial take (dec n)) (partition-all n coll))))\n\n(fn [coll n]\n  (mapcat (partial take (dec n)) (partition-all n coll)))","user":"5d6f063de4b04d129b00f2d1"},{"problem":41,"code":"#(loop [input %1\n         ix (cycle(range %2))\n         out []]\n    (if (empty? input)\n      out\n      (let [cix (+ 1 (first ix))]\n        (if (not= cix %2)\n          (recur (rest input) (rest ix) (conj out (first input)))\n          (recur (rest input) (rest ix) out)))))","user":"56a9ea17e4b07966d5a8a07c"},{"code":"(fn [whole piece]\n  (let [broken (map vec (partition piece piece nil whole))\n        dropper (fn [r] \n          (if (not= (count r) piece) r\n              (pop r)))]\n    (->> broken (map dropper) (flatten))))","problem":41,"user":"4f74fe77e4b0fbe0118ec552"},{"code":"#(let [nth %2]\n    (loop [seq %1\n           n-count 1\n           final-seq []]\n      (if (empty? seq)\n        final-seq\n        (if (= n-count nth)\n          (recur (rest seq) 1 final-seq)\n          (recur (rest seq)\n                 (+ n-count 1)\n                 (conj final-seq (first seq)))))))","problem":41,"user":"523288fee4b035af41902a88"},{"problem":41,"code":"#(loop [xs %1\n           acc ()]\n      (if (empty? xs)\n        acc\n        (recur (drop %2 xs) (concat acc (take (dec %2) xs)))))","user":"5d29c06be4b01671435dbc6b"},{"code":"(fn [c i] (keep-indexed #(if (not= 0 (mod (inc %) i)) %2) c))","problem":41,"user":"4ff9f5c5e4b0678c553fc3b4"},{"problem":41,"code":"(fn [vec n]\n    (mapcat #(take (dec n) %) (partition-all n vec))\n    )","user":"572ca54ae4b0cd1946bd0f59"},{"problem":41,"code":"#(mapcat (fn [sq]\n          (if (< (count sq) %2) sq (drop-last sq)))\n        (partition-all %2 %1))","user":"5605b5e9e4b08b23635d316e"},{"code":"(fn [s n] (keep-indexed #(when-not (= (dec n) (mod %1 n)) %2) s))","problem":41,"user":"51281b25e4b03a34742b4304"},{"problem":41,"code":"(fn drop-nth [s n]\n  (loop [k (count s), s s]\n    (if (zero? k)\n      s\n      (if (zero? (mod k n))\n        (recur (dec k) (concat (take (dec k) s) (drop k s)))\n        (recur (dec k) s)))))","user":"5a7ae674e4b03baeef9276d5"},{"code":"#(mapcat butlast (partition-all %2 (conj % 0)))","problem":41,"user":"4db0114d838c48654951d9b8"},{"code":"(fn drop-nth [coll n]\n  (when-let [coll (seq coll)]\n    (reduce #(conj %1 %2) (apply vector (take (dec n) coll)) (drop-nth (drop n coll) n))))","problem":41,"user":"523b82efe4b07becd5be21f0"},{"problem":41,"code":"#(filter (fn [x](not (nil? x)))\n         (map-indexed (fn [idx itm] \n                        (if (not (zero? (mod (inc idx) %2))) itm )) % ))","user":"53d0d7a9e4b00fb29b22130c"},{"problem":41,"code":"(fn d [l n]\n  (if (empty? l)\n    '()\n    (into (d (drop n l) n) (reverse (take (- n 1) l)))))","user":"574b4f3ee4b02ea114799207"},{"code":"(fn [sq pos]\n   (let [part (partition pos sq)\n         left (drop (* pos (count part)) sq)]\n     (flatten (concat (map butlast (partition pos sq)) left))))","problem":41,"user":"50f1dedbe4b0897c4366dcd8"},{"problem":41,"code":"(fn [x y] (flatten (map #(take (dec y) %) (partition-all y y x))))","user":"56fee4c0e4b08d47c97781b5"},{"problem":41,"code":"(fn [c n] (filter identity (map-indexed (fn [i o] (if (not= 0 (mod (inc i) n)) o)) c)))","user":"50eeeadae4b02c17778c91f3"},{"problem":41,"code":"(fn [s n]\n    (loop [i 1 s s result []]\n      (if (empty? s)\n\t    result\n\t    (recur (inc i) (rest s) (if (= 0 (rem i n)) result (conj result (first s)))))))","user":"569429c7e4b0dcc4269f411a"},{"problem":41,"code":"(fn remove-elem [coll n]\n  (if (not-empty coll)\n    (concat (take (dec n) coll) (remove-elem (drop n coll) n))))","user":"54f4adc8e4b0f2f3c5226e86"},{"problem":41,"code":"(fn [s n] (mapcat #(if (>= (count %) n) (drop-last %) %) (partition-all n s)))","user":"569adec2e4b0542e1f8d1450"},{"code":"(fn [coll n] \n  (keep-indexed #(if-not (= 0 (mod (inc %1) n)) %2 nil) coll)\n)","problem":41,"user":"4eaa66eb535d7eef3080730b"},{"code":"(fn [x n]\n      (let\n        [indices (remove #(= (- n 1) (mod % n)) (range 0 (count x)))]\n        (map #(nth x %) indices)))","problem":41,"user":"5133e51ae4b0d7a043de8cf6"},{"code":"(fn [coll n]\n  (flatten \n    (concat \n      (map #(drop-last %) (partition n coll)) \n      (take-last (rem (count coll) n) coll))))","problem":41,"user":"4e9e6bd6535dbda64a6f6b96"},{"code":"(fn [v n] into [] (flatten (partition-all (dec n) n v)))","problem":41,"user":"527675cbe4b03e8d9a4a74e2"},{"problem":41,"code":"(fn [xs n] (map first (filter #(not= (mod (second %) n) 0) (map vector xs (map inc (range))))))","user":"51a88e7fe4b08d8ec191b813"},{"code":"(fn [xs n] (keep-indexed (fn [idx v]\n                (if (or (zero? idx)\n                        (not (zero? (mod (inc idx) n)))) \n                  v)) xs))","problem":41,"user":"4edb314d535d10e5ff6f5317"},{"problem":41,"code":"(fn [coll number]\n  (loop [a-coll   coll\n         new-coll []\n         counter  1]\n        (cond\n          (empty? a-coll) new-coll\n          (= counter number) (recur (rest a-coll) new-coll 1)\n          :else\n          (recur (rest a-coll) (conj new-coll (first a-coll)) (inc counter)))))","user":"548ce2dbe4b0e286459a1212"},{"problem":41,"code":"(fn [s n]                                                                                                                                                                                             \n  (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n s))))","user":"53403f42e4b085b17e897da8"},{"problem":41,"code":"#(mapcat (fn [xs] (if (=(count xs) %2) (butlast xs) xs))\n                      (partition-all %2 %1) )","user":"57487084e4b009280f9f2b8c"},{"problem":41,"code":"(fn p41[y x]\n  \n(cond (number? (last y)) (vec(remove #(zero? (mod % x)) (range (first y) (+ 1 (last y)))))\n      :else (take-nth x y)\n      \n      \n      \n      \n      \n      ))","user":"59395adfe4b02506e01a29fb"},{"code":"(fn [sq nth]\n  (let [newsq (cons 0 sq)\n        excludelist (set (take-nth nth newsq))]\n    (filter #(not (contains? excludelist %)) newsq)))","problem":41,"user":"523bd9c0e4b07becd5be2201"},{"problem":41,"code":"(fn [coll n]\n  (->>\n   (partition-all n coll)\n   (map #(take (- n 1) %))\n   (apply concat)\n   (into [])))","user":"5aabd34fe4b073f177442565"},{"code":"(fn [col n]\r\n  (loop [result [], c col, i 0]\r\n    (if (nil? (first c))\r\n      result\r\n      (recur (if (= 0 (mod (+ i 1) n)) result (conj result (first c))) (rest c) (inc i))\r\n      )\r\n    )\r\n  )","problem":41,"user":"4e794004535db169f9c796a1"},{"problem":41,"code":"(fn [lst n] \n  (loop [vals lst accume [] i 0] \n    (if (not (empty? vals)) \n      (recur (rest vals) \n             (if \n                 (= 0 \n                    (mod (inc i) n)) \n               accume \n               (conj accume (first vals))) \n             (inc i)) \n      accume)))","user":"5256a1d4e4b0541d1855ba29"},{"problem":41,"code":"(fn [col n]\n  (->> col\n       (map #(vector (inc %1) %2)(range))\n       (filter #(not (zero? (mod (first %) n))))\n       (map second)))","user":"523acf7be4b0aa37f082ed90"},{"code":"(fn f [s n]\n  (when (seq s)\n    (concat\n     (take (dec n) s)\n     (f (drop n s) n))))","problem":41,"user":"504ffb8fe4b0a02f9cffdeae"},{"problem":41,"code":"#(keep-indexed (fn [ind item] (if (not= (dec %2) (mod ind %2)) item)) %1)","user":"5831846ae4b051871117c02c"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (for [[x y] (map-indexed vector coll)\n        :when ((complement =) 0 (mod (inc x) n))]\n     y))","user":"53bf0913e4b0c98a41f5cc99"},{"code":"(fn remove-every-nth [coll n]\n  (remove nil? (map-indexed #(when (not (= (mod (+ 1 %) n) 0)) %2 ) coll))\n  )","problem":41,"user":"53307da1e4b019098a6f8b5e"},{"problem":41,"code":"(fn drop-n [in n]\n  (loop [in in, out [], cnt 1]\n    (if (empty? in)\n      out\n      (let [drop? (zero? (mod cnt n))]\n        (recur\n          (rest in)\n          (if drop? out (conj out (first in)))\n          (inc cnt))))))","user":"5eac172fe4b00a66d4a951dd"},{"code":"#(for [i (range (count %1)) :when (< 0 (mod (inc i) %2))] (nth %1 i))","problem":41,"user":"505fc8e3e4b08f2a82ad10b6"},{"code":"(fn drop-nth [col ind]\n (for [[n x] (map vector (range) col) :when (> (mod (+ n 1) ind) 0) ] x))","problem":41,"user":"4e6cf521535de274dd8d818b"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed \n   #(if (not= 0 (mod (inc %1) n)) \n      %2 \n      nil)\n   coll))","user":"54cbde61e4b057c6fda3a284"},{"code":"(fn [xs n]\n  (map second\n  (filter (fn [i] (not= (first i) n))\n          (map list (cycle (range 1 (inc n))) xs))))","problem":41,"user":"531c0619e4b08068f379ed98"},{"code":"(fn [ls at]\n  (loop [result [] i 1 ls ls]\n    (if (empty? ls)\n      result\n      (if (not= 0 (mod i at))\n        (recur (conj result (first ls) ) (inc i) (rest ls))\n        (recur result (inc i) (rest ls))))))","problem":41,"user":"504db141e4b021508a333965"},{"problem":41,"code":"(fn [coll n]\n  (let [end (take-last (mod (count coll) n) coll)]\n    (concat (->> coll\n         (partition n)\n         (map drop-last)\n         (flatten))\n            end)))","user":"5d68f5e6e4b0db5d338d1605"},{"problem":41,"code":"(fn [s n]\n    (letfn [(hf [result i s]\n              (cond (empty? s) result\n                    (= 0 (mod i n)) (recur result (inc i) (rest s))\n                    :else (recur\n                           (conj result (first s))\n                           (inc i)\n                           (rest s))))]\n      (hf [] 1 s)))","user":"55ac07afe4b03311e7b7328f"},{"problem":41,"code":"(fn [coll n]\n   (loop [input coll output [] pos 1]\n      (if (empty? input)\n        output\n        (if (= pos n)\n          (recur (rest input) output 1)\n          (recur (rest input) (conj output (first input)) (inc pos))\n          )\n        )\n    )\n )","user":"53beacf9e4b0d9a98559a6e3"},{"code":"#((fn [s k a]\n      (if (empty? s)\n          (reverse a)\n          (if (= k 1)\n              (recur (rest s) %2 a)\n              (recur (rest s) (dec k) (cons (first s) a)))))\n  %1 %2 ()\n)","problem":41,"user":"4f404dcee4b0e243712b1fb0"},{"problem":41,"code":"(fn [vs n]\n  (->> vs\n       (map-indexed (fn [i v] [(inc i) v]))\n       (remove (fn [[i v]] (-> i (rem n) zero?)))\n       (map last)))","user":"53684a2fe4b0243289761e8c"},{"problem":41,"code":"(fn [lst N]\n (loop [i 0\n        res []]\n   (cond\n    (>= i (count lst)) res\n    (= (rem (inc i) N) 0) (recur (inc i) res)\n    :default (recur (inc i) (conj res (nth lst i)))\n   )\n )  \n)","user":"5bb905dce4b0a20761a235c7"},{"code":"(fn [coll n]\n  (->> (partition-all n coll) (mapcat #(take (dec n) %))))","problem":41,"user":"5012ec0ae4b0c87326002230"},{"code":"#(loop [s % r []] \n  (if (empty? s) \n       r \n      (recur (drop %2 s) (concat r (take (dec %2) s)))))","problem":41,"user":"4db2cd84535df7e46ed9b6c6"},{"code":"(fn [s n] (mapcat #(if (= (count %) n) (drop-last %) %)\n                         (partition-all n s)))","problem":41,"user":"4ee26f01535d10e5ff6f5368"},{"problem":41,"code":"#((fn pack [col n]\n  (if (empty? col)\n    '()\n  \t(concat (take (dec n) col)\n             (pack (nthrest col n) n)))) %1 %2)","user":"54194782e4b01498b1a71a29"},{"code":"(fn [s n] (keep-indexed (fn [i a] (if (not= 0 (mod (inc i) n)) a)) s))","problem":41,"user":"4fedd2cae4b0198f34b063ba"},{"code":"(fn [l n] (apply concat (partition-all (dec n) n l)))","problem":41,"user":"52d83c2ce4b09f7907dd138d"},{"problem":41,"code":"(fn \n  [coll n]\n  (flatten (map #(if (< (count %) n)\n          %\n          (drop-last  %)) (partition-all n coll))))","user":"6086abade4b0736b099e42ff"},{"problem":41,"code":"(fn f41 [col v]\n   (loop [x 0 result []]\n          (if (< x (count col))\n            (if (= 0 (mod (inc x) v))\n              (recur (inc x) result)\n              (recur (inc x) (conj result (nth col x)))\n              )\n            result)))","user":"54f5aa4ce4b0f2f3c5226e94"},{"problem":41,"code":"(fn skipper[coll times]\n    (lazy-cat \n      (take (dec times) coll)\n      (if (empty? coll)\n        ()\n        (skipper (drop times coll) times))))","user":"53c38b8ce4b00fb29b22127b"},{"problem":41,"code":"(fn [ls n]\n  (let [tst (fn [res ll]\n              (if (empty? ll)\n                res\n                (recur (concat res (take (- n 1) ll)) (drop n ll))))]\n       (tst '() ls)))","user":"583019b8e4b051871117bfff"},{"problem":41,"code":"(fn [seq nth]\n  (loop [index 0 final-seq []]\n    (if (> (inc index) (count seq))\n      final-seq\n      (if (= (mod (inc index) nth) 0)\n        (recur (inc index) final-seq)\n        (recur (inc index) (conj final-seq (get seq index)))))))","user":"53c92d05e4b00fb29b2212b9"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if-not (zero? (mod (inc %1) n)) %2) coll))","user":"5563b88be4b0c656e3ff17f5"},{"code":"(fn [xs n]\n  (map (fn [[x _]] x)\n       (filter (fn [[x i]] (not= 0 (mod i n)))\n               (map list xs (rest (range))))))","problem":41,"user":"52b65f26e4b0c58976d9ad43"},{"code":"(fn [col n]\n  (filter #(not (nil? %)) (flatten (let [tmp []]\n              (for [i (range (count col))]\n                (if (not (= (mod i n) (- n 1)))\n                  (conj tmp (nth col i))))))))","problem":41,"user":"4e7d4544535db169f9c796d0"},{"problem":41,"code":"(fn q41 [l n]\n  (->> l\n       (count)\n       (range)\n       (filter #(not ( = (rem (+ 1 %) n) 0)))\n       (map #(nth l %))))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":41,"code":"(fn [col index] (flatten \n                    (map \n                      (partial take (dec index)) \n                      (partition-all index col))))","user":"58c7131be4b021aa9917ed6d"},{"problem":41,"code":"(fn [sequence n]\n  (loop [res [] remaining-seq sequence]\n    (if (< (count remaining-seq) n)\n      (concat res remaining-seq)\n      (recur (concat res (take (dec n) remaining-seq)) (drop n remaining-seq)))))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":41,"code":"(fn [values n]\n  (remove nil?\n          (reduce (fn [acc, x] (conj acc (if (zero? (mod (inc (count acc)) n))\n                                           nil\n                                           x)))\n                  []\n                  values)))","user":"59c22fbae4b0a024fb6ae4a3"},{"code":"(fn drop-nth [s n]\n  (if (< (count s) n)\n    s\n    (concat (take (dec n) s) (drop-nth (drop n s) n))\n  )  \n  \n)","problem":41,"user":"4faacc04e4b081705acca201"},{"code":"(fn zdrop [lst n]\n  (lazy-seq\n    (when (not (empty? lst)) \n      (concat (take (- n 1) lst) (zdrop (second (split-at n lst)) n))\n    )\n  )\n)","problem":41,"user":"4e5fdd68535d8ccf87e9fe4f"},{"code":";; A very readable but O(n^2) version:\n;; (fn [seq x]\n;;   (for [elt (range (count seq))\n;;         :when (pos? (mod (inc elt) x))]\n;;     (nth seq elt)))\n\n;; A denser but less readable solution:\n;; Note - eliminates false in results\n;; (fn [seq x]\n;;   (let [nth-pos? #(and (pos? (mod (inc %1) x)) %2)]\n;;     (remove false? (map-indexed nth-pos? seq))))\n\n;; An optimal solution:\n (fn [seq x]\n   (for [[i elt] (map-indexed #(vector %1 %2) seq)\n         :when (pos? (mod (inc i) x))]\n     elt))","problem":41,"user":"5057242fe4b0012181721986"},{"code":"(fn [coll n]\n(flatten \n(concat \n(map #(drop-last %) (partition n coll)) \n(take-last (rem (count coll) n) coll))))","problem":41,"user":"52342722e4b07e3ee2be83c0"},{"code":"(fn anon [i x n]\n  (cond\n    (empty? x) []\n    (= i n) (anon 1 (rest x) n)\n    true (cons (first x) (anon (inc i) (rest x) n)))\n  ) 1","problem":41,"user":"503cc8cae4b06c4e0e1fa251"},{"problem":41,"code":"(fn [s n]  (keep-indexed #(if (not (= (dec n) (mod %1 n))) %2) s))","user":"5766bab8e4b0a07e8fc180b1"},{"code":"(fn lambda[xs x]( into []\n                         (flatten\n                          (for[ a1 (partition-all x xs)]\n                           (take (- x 1) a1) ) ) ) )","problem":41,"user":"5302d79ce4b0d8b024fd3736"},{"code":"(fn [q n] (mapcat (fn [r] (if (= n (count r)) (butlast r) r)) (partition-all n q)))","problem":41,"user":"532e0b20e4b019098a6f8b45"},{"code":"(fn dr [l n]\n  (reduce (fn [c e]  (if (= (mod (inc (first e))  n) 0) c (conj c (second e))   ) )   [] (map-indexed (fn [idx itm] [idx itm]) l)))","problem":41,"user":"5101192ae4b0bef64c30e266"},{"problem":41,"code":"(fn [acc x] \n  (keep-indexed #(if (> (mod (+ 1 %1) x) 0) %2) acc))","user":"5d13f783e4b0902706380dc1"},{"problem":41,"code":"(fn xdropn [x n]                                                              \n  (loop [ elms x, cpn n, acc '() ]                                              \n    (if (= 0 (count elms))                                                      \n      (reverse acc)                                                             \n      (recur (rest elms)                                                        \n             (if (= cpn 1) n (- cpn 1))                                         \n             (if (= cpn 1) acc (conj acc (first elms)))))))","user":"564cc055e4b0284900eef676"},{"code":"#(concat (map second (filter (fn [pair] (not= (mod (first pair    ) %2) 0)) (map list (next (range)) %1))))","problem":41,"user":"50839a53e4b0902986d69e10"},{"problem":41,"code":"(fn drp [coll n]\n  (let [logvec  (concat (repeat (dec n) true) '(false))\n                cyc (cycle logvec) ]\n    (map #(nth % 1) (filter #(first %) (partition 2 (interleave cyc coll))))))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":41,"code":"(fn [coll index]\n(map #( nth coll %) (map dec (filter #(not= (rem % index) 0)  (range 0 (inc  (count coll))))) )\n )","user":"55cb11e9e4b0e31453f649ff"},{"code":"(fn [s n]\n  (flatten\n   (map drop-last\n        (partition n n [:x] s))))","problem":41,"user":"50589113e4b06522596eba7f"},{"code":"(fn dropn [collection n]\n    (loop [coll collection index 1 result []]\n      (if (empty? coll)\n        result\n        (if (= 0 (rem index n)) ;if the index (starting at 1) is divisible by n\n          (recur (rest coll) (inc index) result) ;then recur by taking it out of the result\n          (recur (rest coll) (inc index) (conj result (first coll))))))) ;else recur with adding it to the result","problem":41,"user":"53713ebee4b0fc7073fd6ead"},{"code":"(fn [s n] \n  (flatten \n    (map (fn [c]\n     (if (= n (count c))  \n\t\t   (drop-last c)\n       c\n       ))\n   (partition-all n s))))","problem":41,"user":"5089d52ce4b03217b26a539d"},{"problem":41,"code":"(fn [s cnt]\n  (loop [s s c cnt result '()]\n    (if (empty? s)\n      (reverse result)\n      (if (= 1 c)\n        (recur (rest s) cnt result)\n        (recur (rest s) (dec c) (conj result (first s)))))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (flatten\n    (map #(if (= (count %) n) (butlast %) (identity %))\n         (partition-all n coll))))","user":"5c411df3e4b08cd430848ebf"},{"code":"(fn [xs pos]\n   (map #(second %) (filter #(not (zero? (mod (inc (first %)) pos)))\n                            (map-indexed vector xs))))","problem":41,"user":"51d5af00e4b01da06753aa93"},{"problem":41,"code":"(fn [lst n]\n  (loop [l lst\n         newl '()\n         zaehler 1]\n    (if (empty? l)\n      (reduce conj [] (reverse newl))\n      (if (= zaehler n)\n        (recur (rest l) newl 1)\n        (recur (rest l) (conj newl (first l)) (inc zaehler))))))","user":"560a7775e4b05f002753defa"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n    (map-indexed vector)\n    (remove (fn [[idx _]]\n              (zero? (mod (inc idx) n))))\n    (map second)))","user":"5a065388e4b01bb0ae8afdcb"},{"problem":41,"code":"(let\n  [rmvafter (fn\n              rmvafter [coll n after]\n              (if\n                (first coll) \n                (if\n                  (= after 0)\n                  (rmvafter (rest coll) n (- n 1))\n                  (concat\n                   [(first coll)]\n                   (rmvafter (rest coll) n (- after 1))))\n                []))]\n  (fn [coll n] (rmvafter coll n (- n 1))))","user":"5b465b8be4b02d533a91bc65"},{"code":"(fn [coll n] (apply concat (partition (dec n) n [] coll)))","problem":41,"user":"4e22b78b535d04ed9115e81e"},{"code":"(fn [coll, n] (remove #(= (rem (inc (.indexOf coll %))  n) 0) coll))","problem":41,"user":"534c1c64e4b084c2834f4a8a"},{"code":"(fn [s n]\n  (loop [out [] s s i 1]\n    (if (empty? s) out\n      (recur (if (not (= i n)) (conj out (first s)) out) (rest s) (if (= i n) 1 (inc i))))))","problem":41,"user":"51c342e9e4b0851ac09658f3"},{"code":"#(remove nil? (flatten (map butlast (partition %2 %2 (repeat nil) %1))))","problem":41,"user":"52990271e4b02ebb4ef7506d"},{"code":"(fn [xs n]\n  (filter identity (map-indexed (fn [i x]\n                 (if-not (zero? (mod (inc i) n)) x)) xs)))","problem":41,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":41,"code":"(fn [coll n]\n    (flatten \n     (map (fn [subcoll] \n            (if (= (count subcoll) n) \n              (butlast subcoll) \n              subcoll)) \n          (partition n n nil coll)))       \n    )","user":"54cb3497e4b057c6fda3a272"},{"problem":41,"code":"#(loop [a %1 b %2 c 1 d []]\n (if (empty? a)\n \td\n\t(if (= 0 (mod c b))\n\t\t(recur (rest a) b (inc c) d)\n\t\t(recur (rest a) b (inc c) (conj d (first a)))\n\t)\n )\n)","user":"5af9b2cee4b0cc2b61a3bce2"},{"problem":41,"code":"(fn[coll, n]( \n\n      keep-indexed (fn[index,value] (if (= 0 (mod (inc index)  n) ) nil value )    )  coll\n      ))","user":"575bd5f9e4b02ea114799365"},{"problem":41,"code":"(fn\n  [coll n]\n  (keep-indexed #(if (pos? (rem (inc %1) n))\n                   %2) \n                coll))","user":"54577fefe4b01be26fd7460d"},{"problem":41,"code":"(fn [s n]\n    (flatten (reverse\n    (loop [s s acc '()]\n      (if (empty? s)\n        acc\n        (recur (drop n s) (conj acc (take (dec n) s)))\n        )))))","user":"5cc6f982e4b0ccb06196282d"},{"problem":41,"code":"(fn drop-nth\n  [seq n]\n  (if (< (count seq) n)\n    (into [] seq)\n    (into (into [] (take (- n 1) seq)) (drop-nth (drop n seq) n))))","user":"56cf9d4fe4b0ea9b8538f76c"},{"code":"(fn drop-nth\n    [sq n]\n    (nth (reduce #(let [[idx elem] %1\n                        n-idx (inc idx)]\n                    (if (= (mod idx n) 0)\n                      [n-idx elem]\n                      [n-idx (conj elem %2)])) [1 []] sq) 1))","problem":41,"user":"51c3c6a6e4b0851ac09658f8"},{"problem":41,"code":"#(flatten (map drop-last (partition-all %2 (conj (vec %1) :f))))","user":"5e042dede4b0a607a9a45d69"},{"problem":41,"code":"(fn drop-nth\n  [coll nth]\n  (apply concat (partition-all (dec nth) nth coll)))","user":"5d7b90ede4b02e6b30c93552"},{"code":"(fn [xs n]\n  (apply concat (map (partial take (- n 1)) (partition-all n xs))))","problem":41,"user":"4f7f0827e4b06e829148e1d5"},{"problem":41,"code":"#(for [n (range (count %1)) :when(not= (mod (+ n 1) %2) 0)] (nth %1 n))","user":"514504c2e4b021a5ff8301fc"},{"problem":41,"code":"(fn [xs d] (keep-indexed #(if (not= (mod (inc %1) d) 0) %2) xs))","user":"5409a12fe4b0addc1aec66df"},{"problem":41,"code":"(fn [v n] (keep-indexed #(if (not= (dec n) (mod %1 n)) %2) v))","user":"5fafa44ee4b08cb800c85b0e"},{"code":"(fn [as n]\r\n   (loop [as as i (dec n) acc '()]\r\n     (if (nil? (seq as))\r\n       (reverse acc)\r\n       (if (zero? i)\r\n         (recur (rest as) (dec n) acc)\r\n         (recur (rest as) (dec i) (conj acc (first as)))))))","problem":41,"user":"4e26e8b4535deb9a81d77ef6"},{"problem":41,"code":"(fn [arr m] (keep-indexed (fn [a b] (let [x (mod (+ a 1) m)]\n                                       (if (and (= x 0) (not (= a 0)))\n                                         nil\n                                         b))) arr))","user":"59a2c7d5e4b066c664927d2e"},{"problem":41,"code":"(fn [c step] (map second (filter #(not= 0 (rem (inc (first %)) step)) (map-indexed vector c))))","user":"549a176ce4b0f3d1d8e70f69"},{"problem":41,"code":"(fn [s n] (keep-indexed #(when-not (= 0 (mod (inc %1) n)) %2) s))","user":"4f1ef6a0535d64f60314649b"},{"code":"(fn [seqn n]\n  (loop [seqn seqn acc []]\n    (if (empty? seqn)\n      acc\n      (recur (drop n seqn)\n             (concat acc (take (- n 1) seqn))))))","problem":41,"user":"4e8944b6535d4ef0aa30db98"},{"code":"(fn [coll n] (mapcat #(if (>= (count %) n) (drop-last %) %) (partition n n [] coll)))","problem":41,"user":"4f4319ebe4b0d7d3c9f3fd13"},{"code":"(fn f [c n]\n  (flatten\n   (map #(take (dec n) %) (partition-all n c))))","problem":41,"user":"50436470e4b034ff00315d23"},{"code":"(fn [xs n] (loop [r [] i (dec n) xs xs]\n  (if (empty? xs) r\n   (recur (if (zero? i) r (conj r (first xs)))\n          (dec (if (zero? i) n i))\n          (rest xs)))))","problem":41,"user":"4e7e55ab535db169f9c79711"},{"problem":41,"code":"#(reduce concat (map (partial take (- %2 1)) (partition-all %2 %1)))","user":"59449aa2e4b0b03edd0057ad"},{"problem":41,"code":"#(let [x (count %1) \n       y (- x (mod x %2))]\n   (seq \n    (sort \n     (set \n      (flatten \n       (cons \n        (partition (- %2 1) %2 %1) \n        (drop y %1))\n       )\n      )\n     )\n    )\n   )","user":"53c349f5e4b00fb29b22127a"},{"code":"#(remove nil? \n  (map-indexed \n    (fn [i,e] (if (= 0 (mod (inc i) %2)) nil e)) %1))","problem":41,"user":"4e7e93f5535db169f9c7971a"},{"code":"(fn dropn [l idx]\n  (if (> idx (count l))\n    l\n    (concat (take (dec idx) l) (dropn (drop idx l) idx))))","problem":41,"user":"5368a275e4b0243289761e8f"},{"problem":41,"code":"(fn [x y]\n  (let [total (count x) \n        cont1 (range total)\n        cont2 (remove #(= 0 (rem (+ % 1) y)) cont1)]\n    (replace x (vec cont2))))","user":"566d71b1e4b0a866af6896ca"},{"problem":41,"code":"(fn [coll num] (#(mapcat (fn [co] (if (= (count co) num) (butlast co) co)) (partition-all num coll))))","user":"544f732fe4b0e39780006994"},{"code":"(fn [s n] (apply concat (map #(take (dec n) %) (partition n n [] s))))","problem":41,"user":"517ecab1e4b09104ecebe7e8"},{"code":"(fn [aa i]\n  (loop [res []\n         a aa]\n    (if (empty? a)\n      (flatten res )\n      (recur \n       (conj res (take (dec i) a)) \n       (drop i a)))))","problem":41,"user":"532418f3e4b09d4e7a9b54d8"},{"code":"#(apply concat (map-indexed\n                (fn [i x]\n                  (if (= 0 (mod (+ 1 i) %2)) [] [x])) %1))","problem":41,"user":"510acd6ee4b078ea719210f4"},{"problem":41,"code":"(fn [coll i] (flatten (partition-all (dec i) i coll)))","user":"532ae82be4b09d4e7a9b552b"},{"problem":41,"code":"(fn [xs n] (reduce concat [] (partition (dec n) n nil xs)))","user":"5fa17538e4b0f0ebd91b77e3"},{"code":"(fn [s n]\n  (map #(second %)\n       (filter #(pos? (rem (inc (first %)) n))\n               (map-indexed #(vec [%1 %2]) s)\n               )\n       )\n  )","problem":41,"user":"512b9e59e4b04d059cf1fd17"},{"code":"(fn [string n] (mapcat (partial take (dec n)) (partition-all n string)))","problem":41,"user":"50705072e4b07bd6ad9b9f27"},{"code":"(fn [s n]\n  (keep-indexed\n   (fn [index item] (if (= 0 (mod (inc index) n))  nil item)) s))","problem":41,"user":"4ed98b40535d10e5ff6f5307"},{"problem":41,"code":"(fn [se n]\n  (-> n\n      (partition-all se)\n      (#(map (fn [i] (if (= n (count i)) (drop-last i) i)) %))\n      (flatten)))","user":"516c3472e4b06f078fab251c"},{"problem":41,"code":"(fn[s n]\n  (loop [i 1 s s ret []]\n    (if (empty? s) ret (recur (inc i)(rest s)\n                             (if(= 0 (mod i n))ret \n                                   (conj ret(first s)))))))","user":"606ff56ce4b069485764de21"},{"code":"(fn [x i]\n  (let [n x]\n    (filter (fn [x]\n              (not= (rem (+ 1(.indexOf n x)) i) 0))\n            x)))","problem":41,"user":"52d6664be4b09f7907dd1359"},{"code":"(fn [lst n]\n  (apply concat\n    (map (partial take (dec n))\n      (partition-all n lst))))","problem":41,"user":"4de165f3535d08e6dec9fde6"},{"code":"(fn [s n]\n  (mapcat (partial take (- n 1))\n          (partition-all n s)))","problem":41,"user":"4f726dd2e4b07046d9f4f034"},{"code":"(fn drop-nth [l n]\r\n    (loop [l l cnt 1 f []]\r\n      (if (empty? l)\r\n        f\r\n        (if (= cnt n)\r\n          (recur (rest l) 1 f)\r\n          (recur (rest l) (inc cnt) (conj f (first l)))))))","problem":41,"user":"4f039524535dcb61093f6b2c"},{"problem":41,"code":"#(->> % (partition-all %2) (map (fn [x] (take (dec %2) x))) (apply concat))","user":"53fb4843e4b0de5c4184857d"},{"code":"(fn dropper [coll n]\n  (let [ [h t] (split-at n coll)]\n    (do (println h \" - \" t)\n      (if (<= n (count (seq t)))\n        (flatten (cons (drop-last h)  (dropper (seq t) n)))\n        (flatten (cons (drop-last h)  (seq t)))\n      )\n    )))","problem":41,"user":"5020d2aee4b0cb6ebc0a42fb"},{"code":"(fn drop-every-nth\n  [lst indx]\n  (let [keys (-> lst count inc range rest)\n        zipped (zipmap keys lst)\n        filter-func #(not= 0 (rem (key %) indx))\n        filtered (filter filter-func zipped)]\n\n    (-> filtered vals reverse)))","problem":41,"user":"4edfb618535d10e5ff6f5343"},{"problem":41,"code":"(fn [y x] \n  (flatten \n  \t(map \n      (fn [k item]\n        (if (not= 0 (mod k x)) item '())\n      )\n      (range 1 (+ 1 (count y))) y\n    )\n  )\n)","user":"56152a26e4b05f002753dfc1"},{"problem":41,"code":"#(mapcat (fn [x y] (if (= (mod x %2) 0) [] [y])) (range 1 (inc (count %1))) %1)","user":"5ac0ba3ae4b073f177442745"},{"code":"(fn [lst n] (keep-indexed (fn [i it] (if (= 0 (rem (inc i) n)) nil it)) lst))","problem":41,"user":"4dfe65a1535d04ed9115e787"},{"problem":41,"code":"(fn [xs i]\n\n   (letfn [(take-nth [xs acc]\n             (if(< (count xs) i)\n               (concat acc xs)\n               (recur (drop i xs)\n                      (concat acc (take (dec i) xs)))))]\n     (take-nth xs [])))","user":"51bb08a4e4b0fe3ecfb46446"},{"problem":41,"code":"(fn [c n]\n  (flatten (map (partial take (- n 1)) (partition-all n c))))","user":"5a42dbabe4b0447ef91cc5fc"},{"problem":41,"code":"(fn [lst dropIndex]\n  (\n    (fn inner [lst dropIndex index]\n      (if (empty? lst)\n        []\n        (if (= 0 (mod index dropIndex))\n          (inner (rest lst) dropIndex (+ 1 index))\n          (concat [(first lst)] (inner (rest lst) dropIndex (+ 1 index))))))\n    lst\n    dropIndex\n    1)\n   )","user":"55e357dae4b050e68259b442"},{"problem":41,"code":"#(mapcat (fn [s] (if (= %2 (count s)) (butlast s) s)) (partition-all %2 %1))","user":"540e8d13e4b0addc1aec671e"},{"code":"(fn [c m]\n   (loop [res []\n          s c]\n    (cond (empty? s) res\n     :else (recur (concat res (take (dec m) s)) (drop m s)))))","problem":41,"user":"4f230dfbe4b0d66497709fe0"},{"code":"(fn [x y]\n  (keep-indexed #(if (not= 0 (mod (inc %1) y)) %2) x))","problem":41,"user":"507ef25ce4b0f753b6f9788e"},{"problem":41,"code":"(fn drop-nth [x y] (if (< (count x) y)\r\n                     x\r\n                     (concat (take (dec y) x) (drop-nth (drop y x) y))))","user":"6093cc08e4b00e9e6653c3e1"},{"problem":41,"code":"(fn [coll i] (map last (filter #(> (rem (inc (first %)) i) 0) (map-indexed vector coll))))","user":"4e526cc4535d302ef430da74"},{"code":"#(apply vector (reverse (loop [s %1\n                i 1\n                r (list)]\n           (if (seq s)\n               (if (= %2 i)\n                   (recur (rest s) 1 r)\n                 (recur (rest s) (inc i) (conj r (first s))))\n             r))))","problem":41,"user":"51ab1da1e4b04e3dc0c27b30"},{"problem":41,"code":"(fn [coll n]\n  \t(filter #(false? (= (mod (inc (.indexOf coll %)) n) 0)) \n            coll))","user":"55cd95b4e4b0e31453f64a1e"},{"problem":41,"code":"(fn [col nth]\n    (loop [[head & tail] col\n           res []\n           idx 1]\n      (let [new-res (if (zero? (mod idx nth))\n                      res\n                      (conj res head))]\n        (if (empty? tail)\n          new-res\n          (recur tail new-res (inc idx))))))","user":"5ef8e9e0e4b09b61f08553cb"},{"problem":41,"code":"#(loop [l %1\n        res '()]\n   (if (empty? l)\n       res\n       (recur (drop %2 l) (concat res (take (dec %2) l)))))","user":"5f0b8243e4b0f30dddfb5d45"},{"problem":41,"code":"(fn drop-every-nth\n  [coll n]\n  (keep-indexed\n   (fn [index item]\n     (if (not= (mod index n) (dec n)) item))\n   coll))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn [sequence n] (loop [sqnc sequence index 1 result [] ]\n                  (cond\n                   (empty? sqnc) result\n                   (= 0 (rem index n)) (recur (rest sqnc) (inc index) result)\n                   :else (recur (rest sqnc) (inc index) (conj result (first sqnc))))))","problem":41,"user":"4f2aff4de4b0d6649770a044"},{"problem":41,"code":"(fn [a n] (->>\n\ta\n\t(partition-all (dec n) n)\n\t(apply concat)))","user":"57ccedaae4b0c746388ab88e"},{"problem":41,"code":"(fn [x y]\n   (keep-indexed\n     (fn [idx val]\n       (when-not (integer? (/ (inc idx) y))\n         val)) x))","user":"54a11042e4b09f271ff37c49"},{"code":"#(reverse((fn createNew[old test size] (if (empty? old) [] (if (= test size) (createNew (rest old) 1 size) (conj (createNew (rest old) (inc test) size) (first old))))) %1 1 %2))","problem":41,"user":"50c6fad1e4b00bb60fe0c52d"},{"code":"(fn drop-nth [coll n] (mapcat #(take (dec n) %) (partition-all n coll)))","problem":41,"user":"4fa09916e4b0dcca54ed6d4e"},{"code":"#(apply concat (map (partial take (dec %2))\n                    (partition-all %2 %1)))","problem":41,"user":"50d882d4e4b01f0871336e69"},{"code":"(fn [coll n] (flatten (map #(take (dec n) %) (partition-all n coll))))","problem":41,"user":"4db86aee535d1e037afb2193"},{"problem":41,"code":"#(reverse (loop [acc '() arr %1 cnt 1] (cond (empty? arr) acc (not= (mod cnt %2) 0) (recur (cons (first arr) acc) (rest arr) (inc cnt)) :else (recur acc (rest arr) (inc cnt)))))","user":"5ddcf10ae4b0948ae9d9adbe"},{"code":"(fn [coll value]\n  (loop [result[]\n         iter 1]\n    (if (> iter (count coll))\n      result\n      (recur (if (not= (mod iter value) 0)\n               (conj result (nth coll (- iter 1)))\n               result)\n             (inc iter)))))","problem":41,"user":"531d34cfe4b08068f379edac"},{"problem":41,"code":"(fn foo [xs n] (if (empty? xs) () (concat (take (dec n) xs) (foo (drop n xs) n))))","user":"557dbc9de4b05c286339e0cd"},{"problem":41,"code":"(fn [col x]\n  (keep-indexed (fn [index item]\n    (if (= (rem index x) (dec x)) nil item))\n  col))","user":"600c1c72e4b074f607df6692"},{"code":"(fn [xs y] (keep-indexed #(if (= (rem (inc %1) y) 0) nil %2) xs))","problem":41,"user":"508e13abe4b0f17d83ea26c7"},{"problem":41,"code":"#(map last (filter (fn [ar] ((complement zero?) (mod (inc (first ar)) %2))) (map-indexed list %)))","user":"54b331dbe4b09f271ff37d37"},{"problem":41,"code":"(fn [s n]\n    (loop [s s\n           i 1\n           a []]\n      (if (empty? s)\n        a\n        (if (zero? (rem i n))\n          (recur (rest s) (inc i) a)\n          (recur (rest s) (inc i) (conj a (first s)))))))","user":"6026d2cae4b0d5df2af22232"},{"problem":41,"code":"(fn [coll n]\n   (loop [[head & tail] coll\n          index 1\n          result []]\n     (if head\n       (recur tail (+ index 1) (if (zero? (mod index n))\n                                 result\n                                 (conj result head)))\n       result)))\n\n;; #(mapcat butlast (partition %2 %2 [nil] %1))\n;; #(apply concat (partition-all (dec %2) %2 %1))","user":"553e3260e4b0a04f792994eb"},{"problem":41,"code":"(fn dropNth\n  [lst n]\n  (flatten \n   (map #(if (= (count %) n) (drop-last %) %) (partition-all n lst))))","user":"5e95013fe4b0fbed045a3800"},{"code":"(fn dropevery [xs divider]\n        (letfn [(internal [xs divider n]\n                          (if (empty? xs)\n                              nil\n                            (if (zero? (mod n divider))\n                                (internal (rest xs) \n                                          divider \n                                          (inc n))\n                              (cons (first xs) (internal \n                                                (rest xs)\n                                                divider\n                                                (inc n))))))]\n(internal xs divider 1)))","problem":41,"user":"51a8f0c6e4b08d8ec191b821"},{"code":"(fn [s n]\n  (loop [s s a [] c 1]\n    (if (empty? s)\n      a\n      (recur  (rest s) \n              (if (= 0 (mod c n)) a (conj a (first s)))\n              (inc c)))))","problem":41,"user":"4f03ebf7535dcb61093f6b7f"},{"code":"(fn [coll x] \n  (keep-indexed \n   #(if (== 0 (mod (+ %1 1) x)) nil %2) coll))","problem":41,"user":"5372eaf2e4b06d7f452d9e03"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  (if (empty? lst)\n    ()\n    (->>\n      (map-indexed vector lst)\n      (remove #(zero? (rem (+ 1 (first %)) n)))\n      (map #(second %))\n      )))","user":"59e778aae4b0249b72820716"},{"problem":41,"code":"(fn [lat n] (flatten(map #(if (= (count %) n) (drop-last %) %) (partition-all n lat))))","user":"5422979be4b01498b1a71ac2"},{"problem":41,"code":"#(loop [x %1 y %2 z []]\n   (if (empty? x) z\n     (recur (drop y x) y (concat z (take (- y 1) x)))))","user":"59fea630e4b01bb0ae8afd10"},{"problem":41,"code":"(fn [lst ct] \n  (keep-indexed (fn [idx itm] \n                  (if (not= (mod (inc idx) ct) 0) itm)) \n                lst))","user":"608e5697e4b03bd49d9f36be"},{"problem":41,"code":"#(loop [seq % res []]\n   (if (= 0 (count seq))\n     res\n   (recur (drop %2 seq) (concat res (take (dec %2) seq))))\n   )","user":"594a7ed1e4b07ddc2dafae02"},{"problem":41,"code":"(fn dnth\n\t[l n]\n\t(loop [ls l i 1 out []]\n\t\t(if (empty? ls)\n\t\tout\n\t\t(if (= (mod i n) 0 )\n\t\t\t(recur (rest ls) (inc i) out) \n\t\t\t(recur (rest ls) (inc i) (conj out (first ls))) \n\t\t\t)\n\t\t)\n\t\t)\n\t)","user":"5545477fe4b0a04f79299531"},{"code":"(fn [coll n] \n  (map #(% 1)\n    (filter\n      #(not (= 0 (rem (inc (% 0)) n)))\n      (map-indexed vector coll))))","problem":41,"user":"4f0b2028535d0136e6c222ff"},{"problem":41,"code":"(fn [xs n]\n  (loop [xs xs\n         i 1\n         acc []]\n    (cond\n     (empty? xs) acc\n     (= i n) (recur (rest xs) 1 acc)\n     :else (recur (rest xs) (inc i) (conj acc (first xs))))))","user":"51c116d4e4b0c9c822882942"},{"problem":41,"code":"(fn [arr n]\n  (vec\n         (flatten\n          (partition-all (dec n) n arr))))","user":"5cb41c40e4b026601754b911"},{"code":"#(mapcat rest (partition-all %2 (cons 0 %)))","problem":41,"user":"52ce8648e4b07d0d72b27390"},{"problem":41,"code":"(fn [s n]\n   (apply concat (map #(take\n                        (dec  n) %)\n                      (partition-all n s) )))","user":"51e7c1f1e4b0a3e081b8cbef"},{"problem":41,"code":"(fn  [l n]\n\t(let [cat (mapcat butlast (partition-all n l))]\n\t\t(if (= 0 (mod (count l) n)) \n          cat\n          (concat cat [(last l)]))))","user":"5578f292e4b05c286339e08f"},{"problem":41,"code":"(fn [coll n]\n  (apply concat\n         (map drop-last\n              (partition n n [nil] coll))))","user":"5675cdf1e4b05957ce8c614d"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if-not (= 0 (rem (inc %1) n)) %2) coll))","user":"57c6aa0be4b05aa3c4741cf7"},{"problem":41,"code":"#(loop [acc [] m 0 n (dec %2)] (if (< m (count %1)) (recur (concat acc (subvec %1 m n)) (inc n) (if (> (+ n %2) (count %1)) (count %1) (+ n %2))) acc))","user":"58dcae01e4b0a4d5acaab6a4"},{"problem":41,"code":"(fn [listy numb]\n  (loop [l listy pos numb newl []]\n    (if (empty? l)\n      newl\n      (if (= 1 pos)\n        (recur (rest l) numb newl)\n        (recur (rest l) (dec pos) (conj newl (first l)))))))","user":"59369515e4b02506e01a297e"},{"problem":41,"code":"(fn f [ls n]\n      (cond (< (count ls) n) ls,\n            :else\n            (let [[x y] (split-at n ls)]\n              (concat (butlast x) (f y n)))))","user":"5e38a9cbe4b01d43a70e8dc2"},{"code":"(fn [inList toRemove] \n\t(apply concat (partition-all (dec toRemove) toRemove inList)))","problem":41,"user":"52bf6946e4b07a9af5792334"},{"code":"(fn dp [x n]\n  (if (= [] x) []\n    (concat (take (dec n) x) (dp (drop n x) n))))","problem":41,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":41,"code":"(fn [s n]\n (loop [s s new-s [] i 1]\n  (if s\n   (if (= 0 (mod i n))\n    (recur (next s) new-s (inc i))\n    (recur (next s) (conj new-s (first s)) (inc i)))\n   new-s)))","user":"54fdaeace4b07d26eda61d39"},{"code":"(fn rnth [v n]\n  (loop [vet v i (* (quot (count v) n) n)]\n    (println i vet)\n    (if (<= i 0)\n      vet\n      (recur (vec (concat (subvec vet 0 (- i 1)) (nthrest vet i))) (- i n)))))","problem":41,"user":"4ef2eb4d535dced4c769f226"},{"problem":41,"code":"#(apply concat (map (fn [x]\n                      (take (dec %2) x))\n                    (partition-all %2 %1)))","user":"585e2e77e4b0f14aab7c87ac"},{"code":"(fn dropN [input step] (if (seq input) (concat (take (- step 1) input) (dropN (drop step input) step)) []))","problem":41,"user":"52154514e4b02f6d8ea676c0"},{"problem":41,"code":"(fn [s n]\n    (keep #(if-not\n            (= (mod (inc %) n) 0)\n            (get s %))\n          (range (count s))))","user":"54ca130ce4b057c6fda3a250"},{"problem":41,"code":"(fn ola\n        [l e]\n        (let [[acc _] (reduce (fn [[acc p] elem]\n                               (if (= p e)\n                                 [acc 1]\n                                 [(conj acc elem) (inc p)])) [[] 1] l)]\n          acc))","user":"58dfce9fe4b0a4d5acaab723"},{"code":"(fn my-func [coll nth]\n          (mapcat (fn [coll]\n                      (if (= (count coll) nth)\n                          (drop-last coll)\n                          coll))\n                  (partition-all nth coll)))","problem":41,"user":"4fb591aee4b081705acca2c0"},{"problem":41,"code":"(fn drop-nth [s n]\n  (if (empty? s) []\n      (concat (take (dec n) s) (drop-nth (drop n s) n))))","user":"547884d7e4b0c51c1f4d72bd"},{"problem":41,"code":"(fn [coll index] \n     (filter #(not (nil? %)) (map-indexed \n             (fn [x y]\n                 (if (zero? (mod (inc x) index))\n                     nil\n                     y))\n             coll)))","user":"59ef5280e4b0966464fe6a2b"},{"problem":41,"code":"(fn [coll n]\n  (mapv\n    (fn [[_ x]] x)\n    (filter\n      (fn [[i _]] (not= (mod i n) 0))\n      (map-indexed\n        (fn [i x] (vector (inc i) x))\n        coll))))","user":"5afecee2e4b0cc2b61a3bd28"},{"problem":41,"code":"#(vec (flatten (partition-all (- %2 1) %2 %)))","user":"56d4b1aee4b0ea9b8538f7ba"},{"code":"(fn f [l c] \n  (if (empty? l) l \n  (concat (take (dec c) l) (f (drop c l) c))))","problem":41,"user":"4f727023e4b07046d9f4f035"},{"problem":41,"code":"(fn [x n]\n    (->>\n      (partition n n nil x)\n      (mapcat #(take (dec n) %))\n      )\n    \n    )","user":"577829f9e4b0979f8965165a"},{"code":"(fn drop-nth [elems n]\n  ((fn [elems n result]\n    (if (empty? elems)\n        (vec (reverse result))\n        (recur ((fn [x n]\n                  (if (= n 0) x \n                      (recur (rest x) (dec n))))\n                elems n)\n                n\n                (into result (take (dec n) elems)))))\n  elems n '()))","problem":41,"user":"4e73a9dc535dff18050a9c77"},{"problem":41,"code":"(fn [c s] (loop [cx c\n                  cnt 1\n                  r []]\n             (if (empty? cx)\n               r\n               (if (= cnt s)\n                 (recur (rest cx) 1 r)\n                 (recur (rest cx) (inc cnt) (conj r (first cx)))))))","user":"53d5a63be4b0e771c3025449"},{"problem":41,"code":"(fn [lst n] (map second\n   (filter #(not= 0 (mod (first %) n))\n           (map vector (iterate inc 1) lst))))","user":"5bbc0ddfe4b0a20761a2361e"},{"problem":41,"code":"(fn [coll n]\n  (loop [i 0 result []]\n    (if (= i (count coll))\n      (seq result)\n      (recur (inc i)\n             (if (= (rem (inc i) n) 0)\n               result\n               (conj result (get coll i)))))))","user":"5d03944de4b0cc9c915881c5"},{"code":"#(mapcat rest (partition-all %2 (cons 0 %1)))","problem":41,"user":"5053de37e4b0b1b9d1860ea8"},{"problem":41,"code":"(fn [xs n] \n  (letfn [(my-fun [y]\n                  (if (empty? y)\n                    y\n                    (concat (take (dec n) y) (my-fun (drop n y)))))]\n    (my-fun xs)))","user":"5447e08ce4b032a45b8693c3"},{"problem":41,"code":"#(mapcat (partial take (dec %2)) (partition-all  %2 %1))","user":"5a778224e4b013a48d399761"},{"problem":41,"code":"(fn [c n-th] (map #(first %) (filter (fn [[x y]] (not= (mod y n-th) 0)) (map #(list %1 %2) c (iterate inc 1)))))","user":"50856bd1e4b004985b776e4c"},{"code":"(fn [coll n]\n  (->> coll\n       (map vector (iterate inc 1))\n       (remove #(zero? (mod (first %) n)))\n       (map second)))","problem":41,"user":"51b965dde4b0e871ca495905"},{"problem":41,"code":"(fn [lst n]\n  ((fn dn [lst n res]\n     (if (empty? lst)\n       res\n       (dn\n         (drop n lst)\n         n\n         (into res (take (dec n) lst))))\n      )\n   lst n []))","user":"5cd4c3dae4b0ccb061962925"},{"problem":41,"code":"(fn [s n] (loop [result [] i 0] (cond (= (count s) i) (vec result) (not (= 0 (mod (inc i) n))) (recur (conj result (get s i)) (inc i))\n            \t\t\t:else (recur result (inc i)))))","user":"573c813be4b0cd1946bd10c5"},{"problem":41,"code":"#(mapcat (fn [a] (take (- %2 1) a)) (partition-all %2 %1))","user":"57e91413e4b0bfb2137f5b20"},{"problem":41,"code":"(fn [s div]\n     (loop [index 1 source s res []]\n         (if (empty? source)\n           res\n           (recur (inc index) (rest source) (if (= 0 (mod index div))\n                                                res\n                                                (conj res (first source)))))))","user":"56936547e4b0dcc4269f4101"},{"code":"(fn [col nth] (mapcat #(take (dec nth) %) (partition-all nth col)) )","problem":41,"user":"52b577c9e4b0c58976d9ad39"},{"problem":41,"code":"#(filter identity (map-indexed (fn [idx itm] (if (not= (mod (inc idx) %2) 0) itm)) %1))","user":"56491d05e4b0284900eef63a"},{"problem":41,"code":"(fn [x y] (remove #(= (rem (+ 1 (.indexOf x %)) y) 0) x))","user":"60b3b375e4b0e0fa5f1b4232"},{"problem":41,"code":"#(keep-indexed (fn [i x] (if ((comp not zero? mod) (inc i) %2) x)) %1)","user":"5b77d3c8e4b047b03b2036f1"},{"problem":41,"code":"(fn [coll item] \n  (for [[key x] (map vector (iterate inc 1) coll) \n        :when (> (mod key item) 0)]\n    x))","user":"575683aee4b02ea1147992dc"},{"problem":41,"code":"(fn [v n]\n  (loop [v v, m (dec n), r (empty v)]\n    (if (seq v)\n      (if (zero? m)\n        (recur (rest v) (dec n) r)\n        (recur (rest v) (dec m) (conj r (first v))))\n      r)))","user":"54ca93abe4b057c6fda3a264"},{"problem":41,"code":"(fn [xs n]\n      (loop [xs xs result ()]\n        (let [xs (seq xs)\n              result (concat result (take (- n 1) xs))]\n          (if-not xs\n            result\n            (recur (drop n xs) result)\n            ))))","user":"5657fed1e4b0f9d632dd84ae"},{"problem":41,"code":"(fn [coll n]\n    (->> coll\n       (map vector (iterate inc 1))\n       (remove #(zero? (mod (first %) n)))\n       (map second)))","user":"578dc040e4b0ebec4cfb756d"},{"problem":41,"code":"; #(mapcat (fn [el] (if (= (count el) %2) (drop-last el) el)) (partition-all %2 %1))\n#(mapcat (partial take (dec %2)) (partition-all %2 %1))","user":"59837909e4b021a7a535fe16"},{"code":"#(reduce (fn [ss s] (if (= (rem (inc (first s)) %2) 0) ss (conj ss (peek s)))) [] (map-indexed vector %1))","problem":41,"user":"516e2246e4b092a6408c5bc5"},{"problem":41,"code":"#(loop [s %1 r [] ] (if (empty? s) r (recur (drop %2 s) (concat r (take (dec %2) s)))))","user":"55c5261ee4b0e31453f649ae"},{"problem":41,"code":"(fn [coll n]\n      (map second (filter\n                   #(not= 0 (rem (inc (first %)) n)) \n                   (map-indexed list coll))))","user":"54b67463e4b05787c3b163bc"},{"code":"(fn [xs n]\n  (->> (map #(list (inc %1) %2) (range) xs)\n       (filter #(not= (mod (first %) n) 0))\n       (map #(second %))))","problem":41,"user":"53800d99e4b06839e8705ebd"},{"problem":41,"code":"(fn [coll drp]\n  (last (reduce (fn [[c xs] x] \n                  (let [c (mod (dec c) drp)]\n                    [c (if (zero? c) xs (conj xs x))]))\n                  [0 []] coll)))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn [l, i] (filter #(not= 0 (mod (+ (.indexOf l %) 1) i)) l))","problem":41,"user":"51d49b75e4b013d740b70de6"},{"problem":41,"code":"(fn drop-nth [s n]\n  (if (not (seq s))\n    nil\n    (concat (take (- n 1) s) (drop-nth (drop n s) n)))\n  )","user":"53bd476ae4b0d9a98559a6ca"},{"problem":41,"code":"(fn drop-every-n [col n]\n(keep-indexed\n(fn [index item]\n(if\n(not= 0 (mod (inc index) n))\nitem\nnil))\ncol))","user":"5576961be4b05c286339e06f"},{"code":"(fn [s n]\n  (let [nth? #(when (pos? (mod %2 n)) %1)\n        pos  (range 1 (+ (count s) 1))]\n    (filter identity (map nth? s pos))))","problem":41,"user":"4f58d92fe4b0a7574ea71858"},{"code":"(fn [a i]\n  (reverse ((fn iter [c n ret]\n    (if (next c)\n(if (> n 1)\n(iter (next c) (dec n) (conj ret (first c)))\n(iter (next c) i ret))\n(if (> n 1)\n(conj ret (first c))\nret))) a i '())))","problem":41,"user":"4eb27fad535d7eef3080734a"},{"problem":41,"code":"(fn dropn [things n]\n  (loop [[t & ts] things\n         x 1\n         acc []]\n    (cond\n     (nil? t) acc\n     (= (mod x n) 0) (recur ts 1 acc)\n     :else (recur ts (inc x) (conj acc t)))))","user":"587fb546e4b0f1effa3b75f9"},{"code":"(fn [lst n]\n  (map first (filter #(> (mod (inc (second %)) n) 0) (map (fn [x y] (list x y)) lst (range (count lst))))))","problem":41,"user":"4ff9cfd6e4b0678c553fc3af"},{"problem":41,"code":"(fn [l n]\n  (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) l))","user":"59663e77e4b069c0a1a1979f"},{"code":"(fn drop-nth [s i]\n  (when-not (empty? s)\n    (let [[front tail] (split-at i s)]\n      (concat (take (dec i) front) (drop-nth tail i)))))","problem":41,"user":"4ea348ad535d7eef308072c4"},{"problem":41,"code":"#(keep-indexed (fn [index element] (when-not (zero? (mod (inc index) %2)) element)) %1)","user":"55e6c3f5e4b050e68259b48c"},{"code":"#(mapcat (fn [x] (take (- %2 1) x)) (partition-all %2 %1))","problem":41,"user":"51beb32ae4b013aa0d74b7fd"},{"problem":41,"code":"(fn [x y]\n  (loop [i 0 lst []]\n      (if (= i (count x))\n        lst\n        (if (not= 0 (mod (inc i) y))\n          (recur (inc i) (conj lst (nth x i)))\n          (recur (inc i) lst)))))","user":"574e8975e4b02ea114799244"},{"problem":41,"code":"#(keep-indexed (fn [idx i] (if (not= (mod (+ idx 1) %2) 0) i)) %1)","user":"59566d1de4b066ee0a44af54"},{"code":"(fn [coll n] (flatten (map \n  #(take (- n 1) %) \n\t (partition-all n coll))))","problem":41,"user":"4e8a0741535d3e98b802328b"},{"problem":41,"code":"(fn [x indice]\n  (remove #(= (mod (inc (.indexOf x %)) indice) 0) x))","user":"60aecd73e4b00e9e6653c49a"},{"code":"(fn [xs n] \n  (flatten\n    (map #(if (= n (count %1)) (drop-last %1) %1)\n      (partition-all n xs))))","problem":41,"user":"4ea41fc2535d7eef308072cb"},{"code":"(fn [xs n] (keep-indexed #(if (= (rem (inc %1) n) 0) nil %2) xs))","problem":41,"user":"52d3f666e4b09f7907dd1327"},{"problem":41,"code":"(fn [x y] (keep-indexed #(if (not= 0 (mod (inc %1) y)) %2) x))","user":"56671a4de4b04acd4f672dca"},{"problem":41,"code":"(fn [arr idx] \n  (loop [i 1 a arr res []]\n    (cond \n    (empty? a) res\n    (zero? (mod i idx)) (recur (inc i) (rest a) res)\n    :else (recur (inc i) (rest a) (conj res (first a)))\n    )\n  )\n)","user":"5f686436e4b02876ed9fd03c"},{"problem":41,"code":"(fn drop-nth [ls n]\n  ((fn impl [ls n i acc]\n     (cond (empty? ls) acc\n           (= 0 (mod i n)) (impl (rest ls) n (+ 1 i) acc)\n           :else (impl (rest ls) n (+ 1 i) (concat acc (list (first ls))))))\n   ls n 1 '()\n  )\n)","user":"5716540fe4b07c98581c3af3"},{"problem":41,"code":"(fn [s p]\n  (apply concat (partition-all (dec p) p s)))","user":"58c5ad55e4b021aa9917ed42"},{"code":"(fn [s n] (flatten (map #(take (- n 1) %) (partition-all n s))))","problem":41,"user":"4f1c9652535d64f603146483"},{"problem":41,"code":"(fn [xs n]\n  (loop [i 1\n         rem xs\n         res []]\n    (if (= rem ())\n        res\n        (if (= (mod i n) 0)\n            (recur (inc i) (rest rem) res)\n            (recur (inc i) (rest rem) (conj res (first rem)))))))","user":"548fa2dfe4b0e286459a1240"},{"problem":41,"code":"#(remove (into #{} (take-nth %2 (drop (dec %2) %1))) %1)","user":"51671557e4b013fc800656c4"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n     #(if (< (mod %1 n) (dec n)) %2)\n     coll))","user":"5a4caa20e4b05d388ecb6b94"},{"code":"(fn dropnth [elems n]\n  (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) elems))","problem":41,"user":"51df505be4b01188f062752a"},{"code":"(fn f \n  [x t]\n  (loop [x x i 1 xs []]\n    (if (empty? x)\n      xs \n      (recur (rest x)\n             (inc i)\n             (if (= (mod i t) 0)\n               xs\n               (conj xs (first x)))))))","problem":41,"user":"50aa60bee4b056ee01935865"},{"code":"(fn [coll n] (map #(nth % 1) (filter #(not= 0 (mod (inc (first %)) n)) (map-indexed #(list %1 %2) coll))))","problem":41,"user":"5370b386e4b0fc7073fd6e9b"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (map first\n       (filter\n        #(not= (mod (second %) n) 0)\n        (map vector xs (cycle (range 1 (+ n 1)))))))","user":"59f7f55de4b0ca45a743a313"},{"problem":41,"code":"(fn drop_nth [coll, n] (mapcat #(take (- n 1) %) (partition n n nil coll)))","user":"56174d86e4b06b1bb2182a0e"},{"problem":41,"code":"(fn [s n]\n  (loop [acc [] lst s i 1]\n    (if (= 0 (count lst)) \n      acc\n      (if (= i n)\n        (recur acc (rest lst) 1)\n        (recur (conj acc (first lst)) (rest lst) (+ 1 i)))\n      )))","user":"52a803cee4b0c58976d9ac26"},{"problem":41,"code":"(fn [a-seq n] \n  (mapcat #(take (dec n) %) \n          (partition-all n a-seq)))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"code":"(fn [col n] (flatten (partition-all (dec n) n col)))","problem":41,"user":"4e580746535d8a8b8723a28c"},{"problem":41,"code":"(fn [x y](apply concat (partition (dec y) y nil x)))","user":"5756e218e4b02ea1147992e5"},{"problem":41,"code":"(fn [xs n]\n   (->> xs\n        (partition-all n)\n        (map #(take (dec n) %))\n        flatten))","user":"56e2ca59e4b03a7c14b85a38"},{"code":"(fn [seq n]\n    (flatten (partition-all (dec n) n seq)))","problem":41,"user":"511e763ce4b03e81d390ac29"},{"problem":41,"code":"(fn [coll n]\n  (loop [res [] xs coll]\n    (if (empty? xs)\n      res\n      (recur (into res (take (dec n) xs))\n             (drop n xs)))))","user":"571107b3e4b09c608db7043f"},{"code":"(fn [col n]\n  (let [end (- (count col) n)\n        nn (dec n)]\n    (loop [start 0 acc []]\n      (if (> start end)\n        (into acc (subvec col start))\n        (recur (+ start n) \n          (into acc (subvec col start (+ start nn))))))))","problem":41,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":41,"code":"(fn [col n]  (loop [coll col i 1 accu []] (if (empty? coll) accu (recur (drop 1 coll) (inc i) (if (not (zero? (mod i n))) (conj accu (first coll)) accu)))))","user":"5505d137e4b086ebe8a79c8c"},{"code":"(fn [coll index]\n  (keep-indexed #(if-not (zero? (mod (+ 1 %1) index)) %2) coll))","problem":41,"user":"520fff3ce4b080a8d9b9d633"},{"code":"(fn [xs n]\r\n       (first (reduce (fn [[coll cnt] x] \r\n                        (if (zero? (rem cnt n))\r\n                          [coll (inc cnt)]\r\n                          [(conj coll x) (inc cnt)]                          \r\n                          )) [[] 1] xs)))","problem":41,"user":"4deb529a535d08e6dec9fe04"},{"code":"#(keep-indexed (fn [i number] (if (not= 0 (mod (inc i) %2)) number)) %1)","problem":41,"user":"52ba2af3e4b07a9af57922cc"},{"code":"(fn [xs n]\n  (keep-indexed #(if (not= 0 (rem (inc %1) n)) %2) xs))","problem":41,"user":"4edecdae535d10e5ff6f533c"},{"problem":41,"code":"(fn drop-nth\n  [s n]\n  (flatten (partition-all (dec n) n s)))","user":"557e9d17e4b05c286339e0d8"},{"problem":41,"code":"(fn [s n](loop [j 1,s s,ret []](if (empty? s)ret(recur (inc j) (rest s) (if (= 0 (mod j n)) ret (conj ret (first s)))))))","user":"569637d8e4b0dcc4269f4130"},{"code":"(fn[col n] (keep-indexed #(if-not (= (mod (inc %1) n) 0) %2) col))","problem":41,"user":"53347274e4b0656e627bfd6b"},{"code":"(fn [sq n] \n  (keep-indexed \n    (fn [i item] \n      (when (not= 0 (rem (inc i) n)) item)) \n    sq))","problem":41,"user":"5025b93ce4b0c969f0b056df"},{"problem":41,"code":"(fn [coll x] (keep-indexed #(when (not= (mod (inc %1) x) 0) %2) coll))","user":"55eb6352e4b0121d4835fdba"},{"code":"(fn [coll n]\n  (flatten \n      (map #(if (< (count %1) n) %1 (drop-last %1)) (partition-all n coll))))","problem":41,"user":"52655949e4b03e8d9a4a710b"},{"code":"(fn [x n] (map last (filter #(not= (first %) 0) (map vector (iterate #(mod (inc %) n) 1) x))))","problem":41,"user":"5158bba4e4b059418b97f0ab"},{"code":"(fn [s n]\n  (loop [remaining s\n         result []]\n    (if (empty? remaining)\n      result\n      (recur (drop n remaining) (concat result (take (dec n) remaining))))))","problem":41,"user":"51899891e4b0288ada3dbdab"},{"problem":41,"code":"(fn [col n]\n\t(mapcat #(if (= n (count %)) (drop-last %) %) (partition-all n col)))","user":"57839ae9e4b0ebec4cfb74b8"},{"code":"(fn [input, n]\n  (loop [results [], index 1, elts input, ordinal n]\n    (if (empty? elts)\n      results\n      (if (> (mod index ordinal) 0)\n        (recur (conj results (first elts)) (+ index 1) (rest elts) ordinal)\n        (recur results (+ index 1) (rest elts) ordinal)))))","problem":41,"user":"502940a9e4b061fd216be4b8"},{"code":"#(mapcat (fn [x] (take (dec %2) x)) (partition-all %2 %))","problem":41,"user":"4e8b1fa2535d65386fec2118"},{"code":"(fn [ss n] (flatten (loop [a [] s ss] (if (seq s) (recur (conj a (take (dec n) s)) (drop n s)) a))))","problem":41,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":41,"code":"(fn [seqA value]\n\t(loop [a seqA res [] c 1]\n\t\t(if (= 0 (count a))\n\t\t\tres\n\t\t\t(if (= c value)\n\t\t\t\t(recur (rest a) res 1)\n\t\t\t\t(recur (rest a) (conj res (first a)) (inc c)))\n\t\t\t)))","user":"58b985e0e4b0888cdc949ccc"},{"code":"(fn [-seq n]\n  (mapcat #(take (dec n) %) (partition-all n -seq)))","problem":41,"user":"4fd11132e4b04c3a95aa0409"},{"problem":41,"code":"(fn foo [coll n]\n  (if (> (count coll) 0)\n    (concat (take (dec n) coll) (foo (drop n coll) n))\n    '()))\n\n; should use partition-all","user":"50ec409ce4b04edc33777045"},{"problem":41,"code":"(fn drop-nth [s n] (keep-indexed (fn [idx val] (if (not= (mod idx n) (- n 1)) val nil)) s))","user":"5b77248ae4b047b03b2036e7"},{"code":"(fn f [xs n]\n\t(let [hd (vec (take (dec n) xs))\n\t\t  tl (rest (drop (dec n) xs))]\n\n\t\t  (into hd (if (= [] tl) \n\t\t  \t[] \n\t\t  \t(f tl n)))))","problem":41,"user":"50eafeaae4b0346a3e988cbb"},{"code":"(fn nimate [xs n]\n  (let [\n    enumerated (map vector xs (map #(+ 1 %) (range)))\n    filtered (filter #(not= 0 (rem (second %) n)) enumerated)\n    values (map #(first %) filtered)\n    ]\n  values\n))","problem":41,"user":"4ff2430ae4b0678c553fc336"},{"code":"(fn [coll n]\n  (loop [xs coll i 1 result []]\n    (if (not (seq xs))\n      result\n      (recur (rest xs) (inc i) (if (zero? (mod i n)) result (conj result (first xs)))))))","problem":41,"user":"51857e64e4b0da5a5be3babe"},{"code":"(fn [seq n]\n    (loop [outputs [] cnt 0]\n        (if (= (count seq) cnt)\n            outputs\n            (if (= (dec n) (mod cnt n))\n                (recur outputs (inc cnt))\n                (recur (conj outputs (nth seq cnt)) (inc cnt))\n            )\n        )\n    )\n\n)","problem":41,"user":"52fba50ce4b047fd5583700d"},{"problem":41,"code":"(fn [l x] (keep-indexed #(if (not (= 0 (mod (+ %1 1) x))) %2) l))","user":"54857657e4b0e286459a11ac"},{"code":"(fn [xs n]\n  (filter (complement nil?)\n   (map #(if (not= (dec n) %1) %2)\n       (cycle (range n)) xs)))","problem":41,"user":"52437703e4b076204b44fabf"},{"code":"(fn drop-nth [coll step]\n      (let [start 0\n            end (count coll)\n            to-remove-ind (map dec (rest (range start (inc end) step)))\n           ; to-remove (for [i to-remove-ind] (dec (nth coll i)))\n           seq-contains? (fn [coll target] (some #(= target %) coll))\n        ]\n        ;to-remove-ind\n        (filter #(not (seq-contains? (vec to-remove-ind) (.indexOf coll %))) coll) ;What's wrong with this line?\n        ;(map #(.indexOf coll %) coll) ;This much works, so I don't get why the filter doesn't.\n        ; (It has to do with persistant lists not being accepted by contains?\n        )\n      )","problem":41,"user":"536827f1e4b0243289761e8a"},{"problem":41,"code":"(fn [v1 v2] (filterv identity (map-indexed #(when-not (zero? (mod (inc %1) v2)) %2) v1)))","user":"5582c5b1e4b05c286339e10a"},{"problem":41,"code":"(fn [lst dropn]\n  (loop [res []\n         n dropn\n         src lst]\n    (if (empty? src)\n      res\n      (if (= n 1)\n        (recur res dropn (rest src))\n        (recur (conj res (first src)) (dec n) (rest src))))))","user":"5d64013ce4b0c9e5857d502d"},{"code":"(partial\n(fn [result i coll n]\n  (if (seq coll)\n    (recur \n      (if (not (zero? (mod i n))) \n        (conj result (first coll)) \n        result) \n      (+ 1 i) (rest coll) n)\n    result))\n[] 1)","problem":41,"user":"4ec12577535dfed6da9c6da8"},{"problem":41,"code":"#(loop [coll % n 1 res []]\n   (if (empty? coll)\n     res\n     (if (= 0 (mod n %2))\n       (recur (rest coll) (inc n) res)\n       (recur (rest coll) (inc n) (concat res (list (first coll))))\n      )\n     ))","user":"55a74d46e4b09e57187da2a3"},{"code":"(fn [xs n]\n  (reverse (second (reduce (fn [[pos res] e]\n    (if (zero? (mod pos n)) [(inc pos) res] \n      [(inc pos) (cons e res)])) [1 nil] xs))))","problem":41,"user":"4f1ae082535d64f603146470"},{"problem":41,"code":"(fn [s n] (remove #(= :pad %) (flatten (partition (dec n) n (repeat :pad) s))))","user":"54d7e277e4b0a52adc2e2031"},{"code":"(fn drop-nth [xs n] (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) xs))","problem":41,"user":"52bf8e35e4b07a9af579233a"},{"problem":41,"code":"(fn [coll n]\n  (filter identity\n          (map #(if (zero? (mod %2 n)) nil %1) coll (range 1 (inc (count coll))))))","user":"58ebd10de4b056aecfd47d49"},{"code":"#(remove nil? (map (fn [a b] (if (= a %2) nil b )) (cycle (range 1 (+ %2 1))) %1))","problem":41,"user":"53029281e4b0d8b024fd372e"},{"code":"(fn [col n]\n   (loop [i 1 r [] [x & xs] col]\n       (let [fil (zero? (rem i n))] \n       (if (true? fil)\n            (if (empty? xs) r    \n   \t       (recur (inc i) r xs))\n   \t   (if (empty? xs) (conj r x)\n   \t       (recur (inc i) (conj r x) xs))))))","problem":41,"user":"50668a06e4b03d366d7cb2b2"},{"problem":41,"code":"(fn [xs n]\n  (loop [[y & ys] xs\n         cntr n\n         retval []]\n\n    (if (nil? y)\n      retval\n\n      (if (= cntr 1)\n        (recur ys n retval)\n        (recur ys (dec cntr) (conj retval y))))))","user":"54bebeb9e4b0ed20f4ff6ef4"},{"problem":41,"code":"(fn drop-every-nth [xs n]\n  (->> (partition-all n xs)\n       (mapcat #(if (< (count %) n) % (butlast %)))))","user":"57ea4569e4b0bfb2137f5b46"},{"problem":41,"code":"(fn p41 [xs n]\n  (mapcat #(take (dec n) %) (partition-all n xs)))","user":"57fe836ee4b0d3187e9009d2"},{"problem":41,"code":"(fn [coll n]\n   (let [partitioned (partition n n [] coll)]\n     (mapcat (partial take (dec n)) partitioned)))","user":"5515b138e4b055c2f668d4ed"},{"problem":41,"code":"#(->>\n   (keep-indexed (fn [i x] [i x]) %1)\n   (filter\n     (fn [[i & x]] (-> (inc i) (mod %2) (zero?) (not)))\n     )\n   (map peek)\n   )","user":"5b118b7be4b0cc2b61a3be34"},{"problem":41,"code":"(fn [coll n]\n  (loop [[head & tail] coll\n         accum []\n         i 1]\n    (let [retval (if (not= i n) (conj accum head) accum)\n          idx (mod i n)]\n      (if (empty? tail)\n        retval\n        (recur tail retval (inc idx))\n      )\n    )\n  )\n)","user":"59073e0fe4b047aa04b19950"},{"problem":41,"code":"(fn dropn\n  ([l n]\n  (dropn l n n))\n  ([l n c]\n  (cond\n   (empty? l) '()\n   (= c 1) (dropn (rest l) n n)\n   :else\n   (cons (first l)\n         (dropn (rest l) n (- c 1))))))","user":"56e8ef93e4b04a395b9a03f4"},{"problem":41,"code":"(fn [lst n]\n  (mapcat (partial take (dec n)) (partition-all n lst))\n)","user":"59a2ba97e4b066c664927d2c"},{"code":"(fn dropping [v i]\n  (map second (filter (fn [e] (not= 0 (mod (inc (first e)) i))) (map-indexed vector v))))","problem":41,"user":"507bb3ece4b09034bfeeb720"},{"code":"(fn dropping \n  ([xs n]\n   (dropping xs (dec n) n))\n  ([xs a b]\n   (cond (<= (count xs) a) xs\n         (= a 0) (dropping (rest xs) b)\n         :else (conj (dropping (rest xs) (dec a) b) (first xs)) )))","problem":41,"user":"53120cb5e4b08068f379ecf0"},{"code":"(fn [x y] (into [] (remove nil? (for [n (range 0 (count x))] \n                                      (if (not= 0 (mod (inc n) y)) \n                                        (get x n))))))","problem":41,"user":"526fce6fe4b03e8d9a4a7383"},{"problem":41,"code":"(fn [marray dropint]\n  (last (reduce (fn [a b]\n                  (println (pr-str a))\n                  (println (str b))\n                  (if (= (first a) dropint)\n                    (list 1\n                          (last a))\n                    (list (inc (first a))\n                          (conj (last a) b))))\n                '( 1 [])\n                marray)))","user":"5ff82adae4b06df49cee14a4"},{"problem":41,"code":"#(for [[i x] (map vector (range) %1)\n       :when (not= 0 (mod (inc i) %2))] x)","user":"545e7ab0e4b01be26fd7467c"},{"problem":41,"code":"(fn [sq N]\n  (keep-indexed \n    (fn [idx itm] (if (zero? (mod (inc idx) N)) nil itm))\n    sq))","user":"57300c19e4b0cd1946bd0fa1"},{"problem":41,"code":"(fn [coll n]\n     (loop [c [] i 1]\n       (if (> i (count coll))\n         c\n\t\t\t   (if (= 0 (rem i n))\n\t\t\t\t   (recur c (inc i))\n\t\t\t\t   (recur (conj c (get coll (- i 1))) (inc i))))))","user":"5971a017e4b01722bebd4c75"},{"code":"(fn [coll n]\n  (loop [coll coll\n         i    (dec n)\n         acc  [] ]\n    (if (seq coll)\n      (if (zero? i)\n        (recur (rest coll) (mod (dec i) n) acc)\n        (recur (rest coll) (mod (dec i) n)\n               (conj acc (first coll))))\n      acc)))","problem":41,"user":"4f28c979e4b0d6649770a01a"},{"code":"(fn\n  [col ev]\n  (mapcat (fn [a] \n            (if (= ev (count a))\n              (butlast a)\n              a)) (partition-all ev col)))","problem":41,"user":"53334cb2e4b019098a6f8b81"},{"problem":41,"code":"(fn drop-nth\n  ([xs n]\n   (drop-nth [] xs n))\n  ([dropped xs n]\n   (if (empty? xs)\n     dropped\n     (recur (concat dropped (take (dec n) xs)) (drop n xs) n))))","user":"58db097fe4b0a4d5acaab66f"},{"problem":41,"code":"(fn [a b] (reduce concat (partition (- b 1) b [] a)))","user":"54d70f40e4b0a52adc2e2027"},{"code":"(fn [a b]\n  (map #(nth % 1) \n       (filter (fn [[x y]] (not= x b))\n               (map #(vector %1 %2) (cycle (range 1 (+ b 1)))\n                    (seq a)))))","problem":41,"user":"4e74e119535d7a570dd295bc"},{"problem":41,"code":"(fn [s i] (loop [lst s x i new [] j 1]\n            (if (empty? lst)\n              new\n            (if (= j x)\n              (recur (rest lst) x new 1)\n            (recur (rest lst) x (conj new (first lst)) (inc j))))))","user":"59368ccae4b02506e01a2979"},{"code":"#(keep-indexed (fn [a b] (if (pos? (mod (inc a) %2)) b)) %1)","problem":41,"user":"52f1bc81e4b05e3f0be25eef"},{"problem":41,"code":"#(filter (fn [x] (if x x)) (map (fn [ s1 s2] (if (not= 0 (mod s2 %2)) s1)) %1 (range 1 (inc (count %1)))))","user":"532dbd3ce4b019098a6f8b40"},{"code":"(fn rem1 [l n] (remove #(= (mod (inc (.indexOf l %)) n) 0) l))","problem":41,"user":"4f98b69ae4b0dcca54ed6cf4"},{"code":"(fn [sq, num] \n  (flatten (map (partial take (dec num)) (partition-all num sq))))","problem":41,"user":"4f21838fe4b0d66497709fd2"},{"problem":41,"code":"(fn [seq n]\r\n   (reduce concat (partition-all (dec n) n seq))\r\n)","user":"542b764ae4b0dad94371f28d"},{"problem":41,"code":"(fn [xs di]\n   (flatten (partition (- di 1) \n                      di nil xs))\n)","user":"52824143e4b0757a1b171453"},{"problem":41,"code":"#(keep-indexed \n  (fn [idx itm]\n    (if (= 0 (mod (inc idx) %2)) nil itm)\n    )\n  %1\n  )","user":"56e30cefe4b03a7c14b85a3d"},{"code":"(fn t [l y]\n  (if (empty? l) l\n      (concat (take (- y 1) l) (t (drop y l) y))\n))","problem":41,"user":"502d39f8e4b0d96a44ab2032"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [index item] (if (= (- n 1) (mod index n)) nil item)) coll))","user":"5b58b271e4b02d533a91bd6e"},{"problem":41,"code":"#(keep-indexed (fn [i x] (if (= (mod (+ i 1) %2) 0) nil x)) %1)","user":"546e0c24e4b00cfc9eacc198"},{"problem":41,"code":"(fn [lst n]\n   (mapcat #(take (dec n) %)\n       (partition-all n lst)))","user":"57d9f603e4b0bd073c20240a"},{"problem":41,"code":"(fn\n  [sequence n]\n  (apply concat (for [part (partition-all n sequence)]\n                  (take (dec n) part))))","user":"5e6df58ee4b04a83ad7cd297"},{"problem":41,"code":"(fn [xs n]\n  (loop [xs xs\n         acc []\n         idx 1]\n    (if (seq xs)\n      (recur (rest xs)\n             (if (= 0 (rem idx n))\n               acc\n               (conj acc (first xs)))\n             (inc idx))\n      acc)))","user":"5687b6abe4b0dcc4269f4061"},{"code":"(fn [s d]\n  (loop [x s\n         c (dec d)\n         acc []]\n    (if (nil? x)\n      acc\n      (if (zero? c)\n        (recur (next x) (dec d) acc)\n        (recur (next x) (dec c) (conj acc (first x)))))))","problem":41,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":41,"code":"(fn [xs x]\n(letfn [(iter [xs x z]\n\t(if (empty? xs)\n         '()\n         (if (= (mod z x) 0)\n           (iter (rest xs) x (+ z 1))\n           (cons (first xs) (iter (rest xs) x (+ z 1))))))]\n  (iter xs x 1)))","user":"55e3e7a8e4b050e68259b44a"},{"problem":41,"code":"(fn [a b]\n   (remove #(contains?\n              (set (rest\n                     (take-nth b (into [0] a))\n                     ))\n              %) a))","user":"5f6b35c3e4b02876ed9fd04d"},{"code":"(fn [s n]\n  (reverse (loop [s s nacc 1 sacc '()]\n      (cond \n        (empty? s) sacc\n        (= nacc n) \n          (recur (rest s) 1 sacc)\n        :else \n          (recur (rest s) (inc nacc) (cons (first s) sacc))))))","problem":41,"user":"500cc693e4b05f7c30cfa69a"},{"code":"(fn drop-nth [list n]\n    (loop [l list result '()]\n      (let [sl (take (- n 1) l)\n            r  (drop n l)]\n        (if (empty? sl) result\n        (recur r (concat result sl))))))","problem":41,"user":"52173464e4b082aa80a88c75"},{"problem":41,"code":"(fn [init, n]\n  (loop [s init, result []]\n    (let [more (nthnext s n)]\n      (if more\n        (recur\n          more\n          (concat result (take (- n 1) s))\n          )\n        (concat result (take (- n 1) s))\n        )\n      )\n    )\n  )","user":"564faadce4b0284900eef6b2"},{"problem":41,"code":"(fn droppo [col i]\n  (loop [cnt 1\n         cur col\n         acc []]\n    (cond\n     ;; done\n     (not (seq cur)) acc\n     ;; drop and carry on\n     (= cnt i) (recur 1 \n                      (rest cur) \n                      acc)\n     ;; copy\n     :else (recur (inc cnt) \n                  (rest cur) \n                  (conj acc (first cur))))))","user":"5d231255e4b02ea6f0fb69fe"},{"code":"(fn [lst n] (mapcat #(if (> n (count %)) % (drop-last %)) (partition-all n lst)))","problem":41,"user":"5252b59de4b0541d1855b8cf"},{"code":"(fn [coll num]\n  (apply concat (map #(take (- num 1) %) (partition-all num coll))))","problem":41,"user":"52474133e4b05ef8e38e635e"},{"code":"(fn [l n]\n  (->> (map-indexed vector l)\n       (filter (fn [[i v]] (not (zero? (mod (inc i) n)))))\n       (map second)))","problem":41,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":41,"code":"(fn [arr n] (keep-indexed \n             #(if (> (mod (inc %1) n) 0) %2) \n             arr))","user":"597f8984e4b0dbe32238d0bf"},{"problem":41,"code":"(fn drop-every-nth [xs n]\n  (vec (keep-indexed #(if (not (= 0 (mod (+ 1 %1) n))) %2) xs)))","user":"56efc9fde4b04a395b9a0464"},{"code":"(fn [a b] (keep-indexed #(if-not (= (mod (+ %1 1) b) 0) %2)\n  a))","problem":41,"user":"50ae0d24e4b0a40c9cfb08ce"},{"problem":41,"code":"(fn drop-every-n [col n] (into [] (lazy-seq (if (seq col) (concat (take (dec n) col) (drop-every-n (drop n col) n))))))","user":"59874ff6e4b021a7a535fea1"},{"problem":41,"code":"(fn my-drop-n [coll n]\n  (flatten (partition-all (dec n) n coll)))","user":"562eeba2e4b0ab312c17ebc1"},{"code":"(fn [l v] (let [a (into #{} (range (count l)))\n      b (into #{} (range (dec v) (count l) v))\n      r (clojure.set/difference  a b)]\n  (map #(nth l %) r)))","problem":41,"user":"4fa7de4ce4b081705acca1c9"},{"code":"(fn drop-every-n [col n] \n  (keep-indexed \n     (fn [index item] \n       (if\n         (not= 0 (mod (inc index) n))\n            item \n            nil))\n    col))","problem":41,"user":"4eb59464535d7eef30807369"},{"code":"(fn [x y] (filter (comp not nil?) (for [z (range 1 (+ 1 (count x)))] (if (not= 0 (rem z y)) (nth x (- z 1))))))","problem":41,"user":"4eb0175b535d7eef30807336"},{"code":"(fn drop-every-nth [s n]\n  (loop [s (vec s),\n         res []]\n    (if (or (empty? s) (nil? s))\n      res\n      (let [[prior [_ & rst]] (split-at (dec n) s)]\n           (recur rst\n                  (apply conj res prior))))))","problem":41,"user":"4fae4c11e4b081705acca248"},{"code":"(fn [coll n]\n  (mapcat #(list (first %)) (filter #(not (= (rem (+ (last %) 1) n) 0)) (map list coll (range)))))","problem":41,"user":"506fd0afe4b07bd6ad9b9f23"},{"code":"(fn drop-nth [coll n]\n  (loop [coll coll, acc [], c 1]\n    (if (empty? coll)\n      acc\n      (if (= (mod c n) 0)\n        (recur (rest coll) acc (inc c))\n        (recur (rest coll) (conj acc (first coll)) (inc c))))))","problem":41,"user":"4f159ea6535d64f603146445"},{"problem":41,"code":"(fn my-drop-every-nth-items\n  [coll n]\n  (if (empty? coll)\n    coll\n    (flatten (conj (my-drop-every-nth-items (drop n coll) n)\n                   (take (dec n) coll)))))","user":"5599abc9e4b031d6649c9bb0"},{"code":"(fn [col n]\n  (filter #(not (nil? %)) (map-indexed \n                 (fn [idx item] \n                   (if (= 0 (mod (inc idx) n)) nil item))\n                 col)))","problem":41,"user":"4fc7db47e4b0ee37620e182a"},{"problem":41,"code":"(fn [col n]\n  (loop [acc [] col col pos 1]\n    (cond\n       (empty? col) acc\n       :else\n       (cond \n          (= n pos) (recur acc (rest col) 1)\n          :else\n          (recur (conj acc (first col)) (rest col) (inc pos))))))","user":"4e6a23d0535d8ccf87e9fea0"},{"problem":41,"code":"#(apply concat\n         (partition-all\n           (dec %2) %2 %))","user":"59cd351ee4b0ef0a1e9b5b35"},{"problem":41,"code":"(fn [x y] (apply concat (partition-all(dec y) y x)))","user":"591c2f4ee4b09b4ee5954bfc"},{"problem":41,"code":"(fn [s n] \n  (loop [curr 1 res '() se s] \n    (if (empty? se) \n      res \n      (let [new-res (if (= 0 (rem curr n)) res (concat res [(first se)]))\n            new-curr (inc curr)\n            new-se (rest se)](recur new-curr new-res new-se)) )))","user":"5751fda4e4b02ea114799295"},{"problem":41,"code":"(fn[col n] \n      (filter #( not= 0 (mod (+ (.indexOf col %) 1) n) ) col)\n   )","user":"52149e21e4b0961f15ac4d94"},{"problem":41,"code":"(fn f [l n]\n  (cond \n   \t(empty? l) []\n   \t:else (concat (take (dec n) l) (f (drop n l) n))\n   )\n  \n  )","user":"56df6351e4b0ca2494a095f3"},{"problem":41,"code":"#(mapcat  concat (partition-all (dec %2) %2 %1))","user":"589dd2cce4b02bd94d917e48"},{"problem":41,"code":"(fn [xs n]\n  (loop [ys xs\n         res []]\n    (if (empty? ys)\n      res\n      (recur (drop n ys) (concat res (take (- n 1) ys))))))","user":"596fb563e4b01722bebd4c55"},{"code":"(let [\r\nfilter-map (fn [func m]\r\n    \"filters a map based on its keys\"\r\n    (loop [curr m acc []]\r\n        (if (empty? curr) acc\r\n            (let [H (first curr) T (rest curr) H1 (first H) H2 (second H)]\r\n                (if (func H1) (recur T (conj acc H2))\r\n                    (recur T acc))))))\r\n\r\nto-indexed-map (fn [l]\r\n    \"returns a sorted map where the keys are the indices of the value in the original collection\"\r\n    (->> l (interleave (range)) (apply sorted-map)))\r\n]\r\n\r\n    (fn [l z]\r\n        (->> l (to-indexed-map) (filter-map #(not= 0 (mod (inc %) z))))))","problem":41,"user":"523dd963e4b06956f8342ca1"},{"problem":41,"code":"(fn [x y]\n     (mapcat #(if (= y (count %))\n                 (butlast %) \n                 %)\n             (partition-all y x)))","user":"549a1fede4b0f3d1d8e70f6a"},{"problem":41,"code":"(fn [x y]\n   (loop [total [] left x]\n     (if\n       (< (count left) y)\n       (flatten (conj total left))\n       (recur\n         (conj total (butlast (first (split-at y left))))\n         (last (split-at y left))))))","user":"564348e1e4b08d4f616f5f26"},{"problem":41,"code":"#(keep-indexed (fn [i x] (when-not (= 0 (rem (inc i) %2)) x)) %1)","user":"5400fc30e4b0de5c4184861b"},{"problem":41,"code":"(fn [col n]\n  (->> col\n       (keep-indexed #(vector (inc %1) %2))\n       (remove #(zero? (mod (first %) n)))\n       (map #(second %))))","user":"541404c2e4b01498b1a719e7"},{"code":"(fn f41 [c x]\n  (if-not (empty? c)\n    (concat (take (- x 1) c) (f41 (drop x c) x))))","problem":41,"user":"535aee3be4b04ce2eb3ed2aa"},{"problem":41,"code":"(fn [x n]\n  (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) x))","user":"54c169ade4b0ed20f4ff6f24"},{"problem":41,"code":"(fn [coll n]\n  (remove nil?\n  (map-indexed (fn [i v]\n                 (if (zero? (rem (inc i) n)) nil v))\n               coll)))","user":"5c3f29d4e4b08cd430848e8f"},{"problem":41,"code":"(fn dropnth[lst n]\n  (vec (remove nil? (map-indexed (fn [i itm]\n                 (if (and (zero? (mod (+ 1 i) n))(> i 0))\n                   nil\n                 itm)) lst))))","user":"57f814fbe4b0d3187e900911"},{"problem":41,"code":"(fn f [x y] (if (seq x) (concat (take (dec y) x) (f (drop y x) y)) []))","user":"54e540c1e4b024c67c0cf7f9"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (->> xs\n   (partition (- n 1) n nil)\n   (apply concat)))","user":"58bc08fee4b0888cdc949d08"},{"problem":41,"code":"(fn drop-every-nth [l n]\n  (if (<= n (count l))\n    (concat (drop-last (take n l)) (drop-every-nth (drop n l) n))\n    l))","user":"52b9e920e4b07a9af57922c9"},{"code":"#(loop [xs %1 n 1 rs [] index %2] (if (empty? xs) rs (recur (rest xs) (if (= n index) 1 (inc n)) (if (= n index) rs (conj rs (first xs))) index)))","problem":41,"user":"4f2942ace4b0d6649770a01e"},{"problem":41,"code":"#(reduce concat (partition (dec %2) %2 nil %1))","user":"5616f411e4b06b1bb2182a0a"},{"code":"#(loop [i 0, [f & r] %1, res '()]\n\t(if (nil? f) res\n\t\t(recur \n\t\t\t(mod (inc i) %2)\n\t\t\tr\n\t\t\t(if (< i (dec %2))\n\t\t\t\t(concat res (list f))\n\t\t\t\tres))))","problem":41,"user":"53300924e4b019098a6f8b55"},{"problem":41,"code":"(fn [l i] (keep-indexed\n  #(if (zero? (mod (inc %1) i)) nil %2)\n  l\n ))","user":"5d5e2efee4b0c9e5857d4ff0"},{"code":"(fn [v n]\n  (loop [c0 1 v0 v r0 []]\n    (if-not (seq v0)\n      r0\n      (recur (inc c0) (rest v0)\n             (if (zero? (rem c0 n))\n               r0\n               (conj r0 (first v0)))))))","problem":41,"user":"531488f3e4b08068f379ed16"},{"code":"(fn [coll n] (mapcat (partial take (dec n)) (partition-all n coll)))","problem":41,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":41,"code":"(fn de [seq e] (map second (filter (fn [[x]] (not= 0 (mod x e))) (map (fn [x y] [x y]) (iterate inc 1) seq))))","user":"518ba795e4b0f028e99addf0"},{"problem":41,"code":"#(first (reduce (fn [[acc i] x] (if (= 1 i) [acc %2] [(conj acc x) (dec i)])) [[] %2] %1))","user":"5a5be1ece4b0512ff01cd90f"},{"problem":41,"code":"(fn [coll n]\n  (let [mask (cycle (range n))]\n    (filter #(not (nil? %))\n            (map (fn [x y]\n                   (if (= y (- n 1))\n                     nil\n                     x))\n                 coll\n                 mask))))","user":"57a0f256e4b0c3d858beb8dd"},{"code":"(fn [xs n] (letfn [(tmp [txs tn tm] (cond (= txs []) [] (= tm tn) (tmp (rest txs) tn 1)\n                                        :else (cons (first txs) (tmp (rest txs) tn (+ 1 tm)))))] (tmp xs n 1)))","problem":41,"user":"504ffa26e4b0a02f9cffdead"},{"code":"#(mapcat (fn [c] (if (= (count c) %2) (butlast c) c)) (partition-all %2 %1))","problem":41,"user":"5167d60de4b0c5a4140a3098"},{"problem":41,"code":"(fn [col n] (remove nil? (map-indexed (fn [idx itm] (if (not (zero? (mod (inc idx) n))) itm)) col)))","user":"5703cd50e4b08d47c97781fc"},{"problem":41,"code":"(fn [c d] \n  (loop [r [] c c cnt d]\n    (if (empty? c) r\n    (if (= 1 cnt)\n     (recur r (rest c) d) \n     (recur (conj r (first c)) (rest c) (dec cnt)) \n   ))\n  )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"problem":41,"code":"(fn [s n]\n  ; drop every nth item from s\n  \n  (flatten (map #(take (- n 1) %) (partition-all n s)))\n  )","user":"56f2611fe4b04a395b9a04a2"},{"code":"#(loop [i 1 [a & m] %1 r []]\r\n  (if (nil? a) r (recur (inc i) m (if (= (mod i %2) 0) r (conj r a)))))","problem":41,"user":"4e897fc5535de4250bdfe493"},{"problem":41,"code":";;#(mapcat (partial take (- %2 1)) (partition-all %2 %))\n#(mapcat (partial take (dec %2)) (partition-all %2 %))","user":"5c950334e4b048ec896c5a44"},{"problem":41,"code":"(fn f \n  [s n] \n  (loop [a [] s* s] \n    (if (empty? s*) \n      a \n      (recur \n       (concat a \n          (let [x (take n s*)] \n            (if (> n (count x)) \n              x \n              (drop-last x)\n            )\n          )\n       ) \n       (drop n s*)\n      )\n    )\n  )\n)","user":"5f631e11e4b02876ed9fd011"},{"problem":41,"code":"(fn f[l x] \n  (filter \n    (fn [el]\n      (not (= (mod (inc (.indexOf l el)) x) 0)))\n    l))","user":"5626447fe4b00e49c7cb47bd"},{"code":"(fn f41 [coll n] (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) coll))","problem":41,"user":"52bf0116e4b07a9af5792328"},{"code":"#(for [[a b] (map-indexed (fn [a b] [a b]) %1) :when (not= (dec %2) (mod a %2))] b)","problem":41,"user":"531619c1e4b08068f379ed3d"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(take (dec n) %) (partition-all n coll))\n  )","user":"55f33f0ce4b06e875b46ce59"},{"code":"(fn [x n] (loop [res (), k 1, y x]\n  \t (cond (= y ()) (reverse res)\n\t\t       (= 0 (mod k n)) (recur res (inc k) (rest y))\n\t\t       :else (recur (conj res (first y)) (inc k) (rest y)))))","problem":41,"user":"4e49a7bb535dc968683fc4c6"},{"problem":41,"code":"(fn f [arr n]\n  (if (empty? arr) \n    '() \n    (concat (take (dec n) arr)\n            (f (drop n arr) n))))","user":"57501c83e4b02ea11479926b"},{"problem":41,"code":"(fn [l at] (mapcat #(if (< (count %) at) % (butlast %)) (partition-all at l)))","user":"58791973e4b01531a375eac5"},{"code":"(fn f [x y] (if (empty? x) '() (concat (take (dec y) x) (f (drop y x) y))))","problem":41,"user":"514d398ee4b019235f6c0583"},{"problem":41,"code":"(fn [l n]\n  (loop [a l\n         r []]\n    (if (empty? a)\n      r\n      (let [c (split-at n a)]\n        (recur (c 1)\n               (into r (if (> n (count (c 0))) \n                         (c 0) \n                         (butlast (c 0)))))))))","user":"5521a5a9e4b0882d96d09197"},{"problem":41,"code":"#(mapcat (fn [coll]\n            (if (= %2 (count coll))\n              (drop-last coll)\n              coll)) (partition-all %2 %1))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":41,"code":"(fn [xs n]\n  (let [f\n        (fn f[v rst]\n          (if (empty? rst)\n            v\n            (f (apply conj v (take (- n 1) rst)) (drop n rst))))]\n    (f [] xs)))","user":"57fdd1cfe4b0d3187e9009bf"},{"code":"(fn [lst n]\n        (loop [lst,lst res,[] i,1]\n          (cond\n\t   (empty? lst) res\n\t   (= i n) (recur (rest lst) res 1)\n\t   :else (recur (rest lst) (conj res (first lst)) (inc i)))))","problem":41,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":41,"code":"(fn f [xs n] (if (empty? xs) xs (concat (take (dec n) xs) (f (drop n xs) n))))","user":"59da6480e4b0ef0a1e9b5c68"},{"problem":41,"code":"(fn dn [l n] (if (empty? l) nil (concat (take (- n 1) l) (dn (drop n l) n))))","user":"5c54e605e4b0fb8c5ffd9a14"},{"code":"(fn [coll n] \n  (keep-indexed \n   #(if (< (rem %1 n) (dec n)) %2) \n   coll))","problem":41,"user":"50d4c626e4b09cc622d65a70"},{"problem":41,"code":";;#(->> %1 (partition-all %2) (take %2) (flatten))\n;;(#(->> [1 2 3 4 5 6 7 8] (partition-all 3) (take 2) (flatten)))\n\n;;(map #(take 2 %) '((1 2 3) (4 5 6)))\n\n;;(map (partial take 2) '((1 2 3) (4 5 6)))\n\n;;(#(->> [1 2 3 4 5 6 7 8] (partition-all 3) (map (partial take 2)) (flatten)))\n\n(fn [list drop-nth]\n  (let [take-only (dec drop-nth)]\n  \t(->> list (partition-all drop-nth) (map (partial take take-only)) (flatten))))","user":"573b8f67e4b0cd1946bd10ae"},{"code":"#(apply concat(partition-all (dec %2) %2 %1))","problem":41,"user":"51e3a549e4b0c611d6113e47"},{"problem":41,"code":"(fn [x, n]\n  (apply concat (partition-all (dec n) n x)))","user":"5d8a832ce4b0915913b1d3ca"},{"problem":41,"code":"(fn dropnth\n    [xs y]\n    (let [zipped (map vector (rest (range))  xs)]\n     (let  [filtered  (filter #(not (zero? (rem (first %) y ))) zipped)]\n      (map #(second %) filtered))))","user":"55640c62e4b0c656e3ff17fd"},{"problem":41,"code":"(fn dropnth\n  ([xs n] (dropnth xs n n []))\n  ([xs n cur r]\n   (if (empty? xs)\n     r\n     (if (= cur 1)\n       (dropnth (rest xs) n n r)\n       (dropnth (rest xs) n (dec cur) (conj r (first xs)))))))","user":"542cb77ae4b0dad94371f2aa"},{"problem":41,"code":"(fn [l n] (first (reduce (fn [[l i] x] (if (= i n) [l 1] [(conj l x) (inc i)])) [[] 1] l)))","user":"59ab8beee4b08cbb53654d9e"},{"problem":41,"code":"(fn taken\n  [s c]\n  (flatten (cons (take (dec c) s)\n        (if (empty? (drop c s))\n          ()\n          (taken (drop c s) c)\n        ))))","user":"58840023e4b0f1effa3b768b"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(take (- n 1) %) (partition n n [] coll)))","user":"55fbf6cae4b0f488688e066c"},{"code":"(fn [a b] \n  (remove nil? \n    (map-indexed \n      #(if (< 0 (mod (inc %) b)) (identity %2)) a)))","problem":41,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn [c n] (map second (filter #(not= 0 (mod (first %) n)) (#(map vector (iterate inc 1) %) c))))","problem":41,"user":"4ec6357a535d6d7199dd36c5"},{"code":"(fn [l n] (keep-indexed #(if (not= (mod % n) (dec n)) %2) l))","problem":41,"user":"5098bcfee4b0cae2931060a1"},{"code":"(fn d[s n]\r\n  (filter\r\n    #(not=\r\n      (mod (+ (.indexOf s %) 1) n)\r\n      0)\r\n    s))","problem":41,"user":"4e65f9d4535d8ccf87e9fe73"},{"problem":41,"code":"(fn clj41\n   [coll n]\n    (vec (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) coll)))","user":"5ec5f7f2e4b08d0ec38692d1"},{"problem":41,"code":"(fn ndrop\n  ([in n]\n   (ndrop in n 0 []))\n  ([in n i out]\n   (let [i (+ 1 i)]\n     (if (empty? in)\n       out\n       (if (= (mod i n) 0)\n         (ndrop (rest in) n i out)\n         (ndrop (rest in) n i (conj (vec out) (first in)))))))\n  )","user":"54b2e881e4b09f271ff37d32"},{"code":"(fn drop-n [coll idx]\n  (reduce concat \n          (map #(if (= idx (count %)) (butlast %) %)\n               (partition-all idx coll))))","problem":41,"user":"52d51535e4b09f7907dd133a"},{"problem":41,"code":"(fn drop-every-nth\n  [coll n]\n  (keep identity\n        (map-indexed\n         #(if (= (mod (+ %1 1) n) 0) nil %2)\n         coll)))","user":"54c31f1be4b045293a27f609"},{"problem":41,"code":"(fn [coll n]\n  (loop [[x & s] coll\n         i 1\n         acc []]\n    (if x\n      (let [r (inc (mod i n))]\n    \t(if (== i n)\n      \t\t(recur s r acc)\n      \t\t(recur s r (conj acc x))))\n       acc)))","user":"510fe537e4b04c71fce993dd"},{"code":"(fn [coll pos]\n  (mapcat #(take (dec pos) %) (partition pos pos [] coll)))","problem":41,"user":"4e131443535d04ed9115e7d3"},{"code":"(fn [xs x] \n  (flatten \n    (concat \n      (map drop-last (partition x xs)) \n      (take-last (rem (count xs) x) xs))))","problem":41,"user":"4e6b6294535d8ccf87e9ff11"},{"code":"(fn [s n]\n\t  (map second (filter (fn [[a b]] (not= (- n 1) (mod a n)))\n\t\t\t      (map #(vector % (nth s %)) (range (count s))))))","problem":41,"user":"50d8f4b6e4b01f0871336e74"},{"problem":41,"code":"(fn [sq v] (keep-indexed #(if (= 0 (mod (inc %1) v)) nil %2) sq))","user":"5ecc0831e4b016b56eae058c"},{"code":"(fn [l n] \n  ((fn [res l n c] \n    (if (empty? l) \n      (reverse res)\n      (if \n        (= c n) \n        (recur res (rest l) n 1) \n        (recur (conj res (first l)) (rest l) n (+ 1 c))))) '() l n 1))","problem":41,"user":"4e9d6a65535dbda64a6f6b87"},{"code":"(fn [coll n]\n  (loop [c coll\n         res []]\n    (if (empty? c)\n      res\n      (let [r (concat res\n                      (take (dec n) c))]\n      (recur (drop n c)\n              r)))))","problem":41,"user":"506f1e12e4b09350ab4199f9"},{"code":"(fn dropnth [in x]\n (if (empty? in)\n   in\n   (concat (take (- x 1) in) (dropnth (drop x in) x))))","problem":41,"user":"5186571de4b0da5a5be3bad1"},{"code":"(fn drop-every [s n]\n  (map #(get s %) (filter #(> (mod (inc %) n) 0) (range (count s)))))","problem":41,"user":"4f0f40d3535d0136e6c2233b"},{"code":"#(loop [l %1 n %2 c 1 r[]]\n  (if (empty? l) r\n       (recur (rest l) n (inc c) (if (zero? (mod c n)) r (conj r (first l))))))","problem":41,"user":"4f4bbda0e4b03ad3f0c10c7b"},{"problem":41,"code":"(fn [coll a] (map first (filter #(not= (mod (second %) a) 0) (map #(list %1 %2) coll (iterate inc 1)))))","user":"5505ceb3e4b086ebe8a79c8b"},{"problem":41,"code":"(fn [coll n]\n  (loop [result [] coll coll counter 1]\n    (if (empty? coll)\n      result\n      (if (= counter n)\n        (recur result (rest coll) 1)\n        (recur (conj result (first coll)) (rest coll) (inc counter))))))","user":"5b13f482e4b0cc2b61a3be58"},{"problem":41,"code":"(fn [coll size] (mapcat #(take (dec size) %) (partition-all size coll)))","user":"5777cffae4b0979f89651651"},{"problem":41,"code":"(fn [coll n]\n   (flatten (map #(take (dec n) %) (partition-all n coll))))","user":"52435d0ce4b076204b44fab5"},{"problem":41,"code":"(fn [sq n]\n   (->> sq\n        (count)\n        (+ 1)\n        (range 1)\n        (filter #(not= 0 (rem % n)))\n        (map #(nth  sq(- % 1)))))","user":"573107d5e4b0cd1946bd0fbc"},{"code":"#(flatten (concat (map drop-last (partition %2 %))\n(take-last (rem (count %) %2) %)))","problem":41,"user":"4f329974e4b0d6649770a093"},{"problem":41,"code":"(fn [coll n]\n    (filter (comp not nil?) (map-indexed #(if (= 0 (mod (inc %1) n)) nil %2) coll)))","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":41,"code":"(fn drop-nth [s d] \n  (keep-indexed #(if (not= 0 (mod (inc %1) d)) %2) s)\n  )","user":"5cfd5a93e4b0cc9c91588168"},{"problem":41,"code":"(fn [col x]   \n   (flatten (map #(if (= (count %) x) \n                   (drop-last %) %)     (partition x x [] col)))\n            )","user":"50b25edae4b03ea88043355e"},{"code":"(fn drop-nth [items0 N]\n   (loop [items items0 K (- N 1) out '()]\n      (if (empty? items )\n        (reverse out)\n        (recur (rest items)\n               (mod (- K 1) N)\n               (if (zero? K) \n                 out\n                (conj out (first items)))))))","problem":41,"user":"4ee9c8d0535d93acb0a66892"},{"code":"(fn [x y]\n  (let [z (partition-all y x)]\n    (mapcat #(take (dec y) %) z)))","problem":41,"user":"50435689e4b034ff00315d21"},{"problem":41,"code":"(fn [coll x] (keep-indexed #(if (not= (mod (inc %1) x) 0) %2) coll))","user":"5a291617e4b07f18be40aa76"},{"problem":41,"code":"#(flatten (map drop-last (partition %2 %2 [0] %)))","user":"54eee38ce4b024c67c0cf878"},{"problem":41,"code":"(fn [xs n]\n   (->> xs (partition-all n) (map #(take (dec n) %)) flatten)\n   )","user":"51c8f1d8e4b07ef393169e5d"},{"problem":41,"code":"(fn [col n]\n   (loop [col col\n          result []]\n     (if (< (count col) n)\n       (concat result col)\n       (recur (drop n col)\n              (concat result (take (dec n) col))))))","user":"5aafde49e4b073f1774425a1"},{"code":"(fn q [col n] \n  (keep-indexed\n    (fn [index b] \n      (if\n        (not= 0 (mod (inc index) n))\n          b \n          nil))\n    col))","problem":41,"user":"50a2cd3be4b048eb8059339d"},{"problem":41,"code":"(fn dni\n  ([x y z i] (cond (empty? x) (reverse z)\n                 (= (mod i y) 0) (recur (rest x) y z (inc i))\n                 :else (recur (rest x) y (conj z (first x)) (inc i))))\n  ([x y]\n   (dni x y '() 1)))","user":"58a3ba31e4b02bd94d917eff"},{"problem":41,"code":"(fn [col n]\n  (flatten (partition-all (dec n) n col))\n  )","user":"525873e8e4b0cb4875a45cb2"},{"problem":41,"code":"(fn my-drop-nth [coll n]\n  (map second \n    (filter (comp (complement #(= (dec n) %)) first) \n      (vec\n        (map vec\n          (partition 2\n            (interleave (cycle (range n))\n              coll)))))))","user":"5f4eb036e4b0102c75033969"},{"code":"(fn [coll n] (mapcat #(if (zero? (mod (inc %2) n)) () (list %)) coll (range)))","problem":41,"user":"4ea1b9e4535d7eef308072b8"},{"problem":41,"code":"(fn drop-every-nth [x i] \n  (let [f (fn anon [m n y] ; integer integer collection\n           (if (= y []) '() \n             (if (<= m 1)\n               (anon n n (rest y))\n               (concat (list (first y)) (anon (- m 1) n (rest y))))))]\n    (f i i x)))","user":"57d1d6c8e4b0bd073c202370"},{"problem":41,"code":"#(loop \n  [dn %2\n   s %1\n   cn 1\n   rs []\n   ]\n   (if (empty? s)\n     rs\n     (recur \n       dn\n       (rest s)\n       (inc cn)\n       (if (not= (rem cn dn) 0) (conj rs (first s)) rs))))","user":"5432df22e4b0dad94371f2f5"},{"code":"(fn [coll n]\r\n  (flatten \r\n    (concat \r\n      (map #(drop-last %) (partition n coll)) \r\n      (take-last (rem (count coll) n) coll))))","problem":41,"user":"4e1158aa535d04ed9115e7c6"},{"problem":41,"code":"(fn \n  [arg1 arg2]\n  (mapcat #(take (dec arg2) %) (partition-all arg2 arg1))\n  )","user":"5bbbce99e4b0a20761a23610"},{"problem":41,"code":"(fn[x y](filter #(not (= (mod (+ (.indexOf x %) 1) y) 0))    x))","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":41,"code":"(fn [s n] (mapcat #(if (= (count %) n)\r\n                       (drop-last %)\r\n                       %)\r\n                    (partition-all n s)))","user":"540459bfe4b0addc1aec6656"},{"code":"(fn f [l n](if (empty? l) (list) (concat (take (- n 1) l) (f (drop n l) n) )))","problem":41,"user":"5349ac2be4b084c2834f4a67"},{"problem":41,"code":"(fn drpn [xs n]\n  (when (not (empty? xs))\n    (concat (take (dec n) xs)\n            (drpn (drop n xs) n))))","user":"57df2722e4b0bd073c20245e"},{"code":"(fn [x y]\n  (flatten\n    (partition-all\n      (dec y) y x)))","problem":41,"user":"4f9b5a1ce4b0dcca54ed6d16"},{"code":"(fn [coll e]\n      (flatten (map #(if (= (count %) e)\n                (butlast %)\n                %) (partition-all e coll))))","problem":41,"user":"52c49401e4b0c2d177d620de"},{"problem":41,"code":"(fn [coll n]\n  (flatten \n   (concat \n    (map #(drop-last %) (partition n coll)) \n    (take-last (rem (count coll) n) coll)))\n  )","user":"54975e99e4b0b312c081ff72"},{"code":"(fn [xs n]\n    (map first (filter \n        #(not (= (- n 1) (mod (second %) n))) \n        (map vector xs (range (count xs)))\n        )))","problem":41,"user":"4ed6238d535d10e5ff6f52de"},{"problem":41,"code":"(fn [coll dropN] (map val (filter #(not= 0 (rem (+ 1 (key %)) dropN)) (into {} (map-indexed vector coll)))))","user":"53ad28ede4b047364c044462"},{"code":"(fn [arr idx] (flatten (map #(take (- idx 1) %) (partition-all idx arr))))","problem":41,"user":"525b12b1e4b0cb4875a45d04"},{"code":"(fn [lst num] (first (reduce (fn [[l i] e] (if (zero? (mod i num)) [l (inc i)] [(conj l e) (inc i)])) [[] 1] lst)))","problem":41,"user":"5392b849e4b0b51d73faaeb1"},{"problem":41,"code":"(fn [a_seq n] (apply concat (partition-all (dec n) n a_seq)))","user":"556189a6e4b0c656e3ff17c9"},{"problem":41,"code":"(fn [s n]\n  ((fn [s i ret]\n     (if (empty? s)\n       ret\n       (let [m (mod i n)]\n         (recur (rest s) (inc m) (if (zero? m) ret (conj ret (first s)))))))\n   s 1 []))","user":"571d063ee4b0145328a76272"},{"problem":41,"code":"(fn [m n]\n   (let [matr (take (count m) (cycle (range 1 (inc n))))]\n     (vec (remove nil? (map (fn [matr m]\n                          (when (not= n matr)\n                            m))\n                        matr m)))))","user":"53c0f4dee4b00fb29b221259"},{"problem":41,"code":"(fn [col n] (keep-indexed #(when (pos? (rem (inc %1) n)) %2) col))","user":"5f0e8312e4b0f30dddfb5d5b"},{"problem":41,"code":"(fn [seq cnt] (for [idx (range (count seq)) :when ((complement zero?) (rem (inc idx) cnt))] (nth seq idx)))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":41,"code":"#(loop [s %1 c 1 n %2 r []]\n    (if (empty? s)\n      r\n      (if (= (mod c n) 0)\n        (recur (rest s) (inc c) n r)\n        (recur (rest s) (inc c) n (conj r (first s))))\n      ))","user":"5a80b934e4b00b71e582a05b"},{"problem":41,"code":"(fn drop-nth [s n]\r\n  (map first\r\n       (filter #(not (= 0 (mod (+ 1 (last %)) n)))\r\n               (map list s (range 0 (count s))))))","user":"546e1142e4b00cfc9eacc199"},{"problem":41,"code":"(fn dropevery\n  [coll n]\n  (if (>= (count coll) n)\n    (concat (subvec coll 0 (dec n)) (dropevery (subvec coll n) n))\n    coll))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n   (fn [idx v]\n     (if-not (zero? (mod (inc idx) n))\n     \tv))\n   coll))","user":"55380eeae4b09218d5f44fd9"},{"code":"(fn [xs n]\r\n  (mapcat\r\n    (fn[[i x]](if(= 0 (mod i n)) '() (list x))) \r\n    (map (fn[i x][i x])(iterate inc 1) xs)))","problem":41,"user":"4edeac6b535d10e5ff6f533a"},{"code":"(fn [coll n]\n  (->> (partition-all n coll)\n       (mapcat #(take (dec n) %))))","problem":41,"user":"511623cbe4b0d4f670fd2fe1"},{"problem":41,"code":"(fn [seq n]\n  (apply concat \n    (map #(take (- n 1) %) \n      (partition-all n seq))))","user":"55183a11e4b06a49daca83ca"},{"problem":41,"code":"(fn [lst n] \n  (loop[l () i 0 ls lst]\n    (if (empty? ls) (reverse l) \n      (recur \n       (if (= 0 (mod (+ i 1) n)) l (conj l (first ls)) ) \n       (inc i) \n       (rest ls) \n       ) \n      )  \n    )\n  )","user":"5e94ff5fe4b0fbed045a37ff"},{"problem":41,"code":"(fn [items n]\n  (loop [xs items\n         result ()]\n    (if (empty? xs)\n      (apply concat (reverse result))\n      (recur (drop n xs) (cons (take (dec n) xs) result)))))","user":"5524120fe4b0882d96d091b7"},{"problem":41,"code":";(fn [c n] (into [] (mapcat (partial take (dec n)) (partition-all n c))))\n\n(fn [c n]\n  (->>\n   c\n   (partition-all n)\n   (mapcat (partial take (dec n)))\n   (into [])\n   ))","user":"553f70cae4b0a04f792994f8"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  (for [i(filter #(not= 0 (rem % n)) (range 0 (inc (count lst))))]\n    (nth lst (- i 1))))","user":"59e4e3cbe4b08badc2a0c54a"},{"problem":41,"code":"#(loop [coll %1 n %2 i 1 results []]\n   (if (empty? coll)\n     results\n     (if (= i n)\n       (recur (rest coll) n 1 results)\n       (recur (rest coll) n (inc i) (conj results (first coll))))))","user":"55e2f502e4b050e68259b43c"},{"problem":41,"code":"(fn [lst c]\n  (apply concat (partition (dec c) c nil lst)))","user":"5895477fe4b00487982d527c"},{"code":"(fn dn [s, n]\n  (if (>= n (count s))\n    (vec (take (dec n) s))\n    (vec (concat (take (dec n) s) (dn (nthnext s n) n)))))","problem":41,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn f1 [v index]\r\n  (loop [numbers v out []]\r\n      (cond\r\n       \t(> index (count numbers)) (concat out numbers)\r\n        (= index (count numbers)) (pop (vec (concat out numbers)))\r\n        :else (recur (subvec numbers index) (concat out (subvec numbers 0 (dec index))))))\r\n)","problem":41,"user":"50a85af1e4b054305ba5a833"},{"code":"(fn dropnth[s n] (flatten (if (< (count s) n) s (cons (take (- n 1) s)(dropnth (lazy-seq (take-last (- (count s) n) s)) n)))))","problem":41,"user":"4f148418535d64f60314643a"},{"problem":41,"code":"#(for [i (range (count %1))\n      :when (not= (- %2 1) (rem i %2))]\n  (nth %1 i))","user":"5ea2e6bfe4b00a66d4a95197"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n       (partition-all n)\n       (map #(take (dec n) %))\n       (flatten)))","user":"5ca14eb1e4b048ec896c5b7d"},{"code":"(fn [c n]\r\n    (map second\r\n      (filter #(not= (mod (first %) n) 0)\r\n        (map list (iterate inc 1) c))))","problem":41,"user":"4f9d8083e4b0dcca54ed6d23"},{"problem":41,"code":"(fn [col n] (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) col))","user":"5a66fddee4b0512ff01cd9d7"},{"code":"(fn [lst n] \n  (map last\n    (filter \n  #(not= 0 \n    (rem (inc (first %))n))\n  (map-indexed list lst))))","problem":41,"user":"4f7d91e6e4b06e829148e1c3"},{"problem":41,"code":"(fn [coll n]\n(flatten (map #(if (= (count %) n) (drop-last 1 %) %) (partition-all n coll))))","user":"565b941ce4b068f2fe63dc07"},{"problem":41,"code":"(fn drp [xs y]\n  (loop [a xs\n         pos y\n         curr 1\n         output []]\n    (if (= 0 (count a))\n      output\n      (if (= curr pos)\n        (recur (rest a) pos 1 output)\n        (recur (rest a) pos (+ 1 curr) (conj output (first a)))\n        )\n      )\n    )\n  )","user":"53b685e0e4b047364c0444c7"},{"problem":41,"code":"(fn [coll n]\n    (mapcat #(take (dec n) %) (partition-all n coll)))","user":"5e17bb46e4b00200644e3d5a"},{"problem":41,"code":"(fn [coll n]\n   (loop [cnt (dec n)\n          res []\n          cll coll]\n     (do\n       (println cll)\n       (println cnt)\n       (if (empty? cll)\n         res\n         (if (> cnt 0)\n           (recur (dec cnt) (conj res (first cll)) (rest cll))\n           (recur (dec n) res (rest cll)))\n         ))\n     ))","user":"5ab575f8e4b073f17744263d"},{"code":"#(reduce (fn [acc x]\n          (if (= (count x) %2)\n            (concat acc (butlast x))\n            (concat acc x)\n            )\n          ) [] (partition-all %2 %1))","problem":41,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":41,"code":"#(->> (partition-all %2 %1)\n       (map (fn [x] (if (= %2 (count x)) (drop-last x) x)))\n       (reduce concat)\n       (vec))","user":"55c1eb52e4b0e31453f64970"},{"code":"(fn drop-nth [coll n]\n  (let [sections (partition n n nil coll)]\n    (vec \n      (mapcat \n        (fn [section] (take (dec n) section))\n        sections))))","problem":41,"user":"4e6defcc535d5021c1a895f8"},{"code":"(fn [coll n] (for [[i,v] (map-indexed list coll) :when (not= 0 (mod (inc i) n))] v))","problem":41,"user":"50fa01bce4b07934dda8b0ba"},{"problem":41,"code":"#(\n         loop [i 1 n (count %1) arr []]\n         (\n           if (<= i n)\n           (\n             if (= (rem i %2) 0)\n             (recur (+ i 1) n arr)\n             (recur (+ i 1) n (conj arr (%1 (- i 1))))\n             )\n           arr\n           )\n         )","user":"5eee9352e4b07c55ae4a0512"},{"problem":41,"code":"(fn [l n] (reverse\n           (loop [r ()\n                 c 1\n                 li l]\n            (cond\n             (empty? li) r\n             (= c n) (recur r 1 (rest li))\n             :else (recur (cons (first li) r) (inc c) (rest li))))))","user":"53a0ab8ce4b0ca733b9744b3"},{"problem":41,"code":"(fn [lst n]\n  (map second\n    (filter #(not= 0 (mod (first %) n))\n      (map vector (iterate inc 1) lst))))","user":"5189a51ae4b0288ada3dbdad"},{"code":"(fn [coll n]\n  (keep-indexed \n   #(if (< 0 (mod (inc %1) n))\n      %2 nil) coll))","problem":41,"user":"537bde5de4b06839e8705e73"},{"problem":41,"code":"#(loop [current-index 0\n         result []\n         current-skip %2]\n    (if (< current-index (count %1))\n        (if (not= current-index (- current-skip 1))\n          (recur (inc current-index) (conj result (get %1 current-index)) current-skip)\n          (recur (inc current-index) result (+ current-skip %2)))\n        result))","user":"5db861bce4b010eb3c36cd4b"},{"code":"(fn [coll n]\n  \t(filter #(not (nil? %)) \n\t\t\t(map-indexed (fn [idx itm] (if (not= (mod (inc idx) n) 0) itm)) coll)))","problem":41,"user":"4e6a63fd535d8ccf87e9feda"},{"code":"#(let [parts (partition %2 %2 [0] %)]\n   (sort (mapcat merge (map (fn [x] (vec (butlast x))) parts))))","problem":41,"user":"4e1b8106535d04ed9115e801"},{"problem":41,"code":"(fn [s n] (keep-indexed (fn [i e] (if (zero? (mod (inc i) n)) nil e)) s))","user":"5abe2fc2e4b073f17744271e"},{"code":"(fn [s n] (keep-indexed #(when (not= (mod (inc %1) n) 0) %2) s))","problem":41,"user":"4f327844e4b0d6649770a092"},{"code":"(fn drop-every-n [col n] \n  (keep-indexed \n    (fn [index item] \n      (if\n        (not= 0 (mod (inc index) n))\n          item \n          nil))\n    col))","problem":41,"user":"4f282da7e4b0d6649770a013"},{"code":"(fn [xs n] (map last (filter (fn [[i el]] (not= (mod i n) 0)) (map-indexed (fn [i v] [(+ 1 i) v]) xs))))","problem":41,"user":"52ba6d0be4b07a9af57922d2"},{"problem":41,"code":"(fn [coll index] (vec (map #(nth coll %)\n                            (filter\n                              (fn [x] (not (boolean\n                                             (some #(= x %) \n                                                   (map dec \n                                                        (rest (range 0 (+ (count coll) index) index)))))))\n                              (range 0 (count coll))))))","user":"56c70cc2e4b0ed865f9758b5"},{"problem":41,"code":"(fn my-drop-nth\n  [coll n]\n  (filter #(not= (mod (+ 1 (.indexOf coll %)) n) 0) coll)\n  )","user":"59f44189e4b0966464fe6aab"},{"problem":41,"code":"(fn [coll n]\n  (loop [x coll\n         res []]\n    (if (<= (count x) (- n 1))\n      (concat res x)\n      (recur (nthnext x n) (concat res (take (- n 1) x))))))","user":"58303fc3e4b051871117c006"},{"code":"(fn [xs,modulus] (map first \n  (filter #(not= 0 (mod(second %) modulus)) \n    (map #(identity [(nth xs %) (inc %)]) (range (count xs))))))","problem":41,"user":"4eaf08ce535d7eef3080732d"},{"problem":41,"code":"(comp reverse #(loop [s %1 n %2 r nil]\n  (cond (empty? s) r \n        (= n 1) (recur (rest s) %2 r)\n        :else (recur (rest s) (dec n) (cons (first s) r)))))","user":"592bb806e4b072a2710fcf46"},{"problem":41,"code":"(fn [s n] \n  (let [a (map vector (range 1 (inc (count s))) s)\n        b (remove #(= 0 (mod (first %) n)) a)\n        c (for [i b] (last i))]\n    c))","user":"56f51879e4b046a417f92069"},{"code":"#(flatten (map drop-last (partition %2 %2 [nil] %1)))","problem":41,"user":"514cfa27e4b019235f6c057d"},{"problem":41,"code":"#(remove (set (take-nth %2 (drop (dec %2) %))) %)","user":"572a13cde4b0f4d77e65122b"},{"problem":41,"code":"(fn f [c i] (keep-indexed #(if (> (mod (+ 1 %1) i) 0) %2) c))","user":"557bd432e4b05c286339e0bb"},{"problem":41,"code":"(fn [coll n]\n   (for [c coll\n         :when (not= (rem (inc (.indexOf coll c)) n) 0)]\n     c))","user":"5918db70e4b09b4ee5954bbb"},{"code":"(fn [se n]\n  (mapcat #(take (- n 1) %)\n          (partition-all n se)))","problem":41,"user":"4fbe42b7e4b081705acca30f"},{"problem":41,"code":"(fn [xs n] (mapcat rest (partition-all n (cons 0 xs))))","user":"55645592e4b0c656e3ff1802"},{"problem":41,"code":"(fn\n  [coll i]\n  (loop [coll2 coll\n         index 1\n         result []]\n    (if-let [item (first coll2)]\n      (if (= 0 (rem index i))\n        (recur (rest coll2) (inc index) result)\n        (recur (rest coll2) (inc index) (conj result item)))\n      result)))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":41,"code":"(fn [coll n]\n (flatten\n    (map \n      #(if (= (count %) n) \n            (drop-last %) \n            %) \n      (partition-all n coll))))","user":"591cbc30e4b09b4ee5954c08"},{"problem":41,"code":"(fn [items step] (map first (filter (fn [pair] (< 0 (mod (inc (second pair) ) step) ) )  (map list items (range) ) ) ) )","user":"56979bb7e4b0e0b3d3318cac"},{"problem":41,"code":"#(remove nil? (map-indexed (fn [idx item] (when (not= 0 (mod (inc idx) %2)) item)) %1))","user":"52c03baee4b07a9af5792347"},{"problem":41,"code":"(fn y2 [coll point]\n  (->> (partition point point nil coll)\n       (map (fn [coll] \n              (if (= (count coll) point) \n                (butlast coll) coll)))\n       (concat)\n       (flatten)\n       (vec)\n      )\n  )","user":"5e84b48ee4b09a7a73c8bbc8"},{"problem":41,"code":"(fn [s n] (map second (filter #(not= 0 (rem (inc (first %)) n)) (map-indexed #(list %1 %2) s))))","user":"55b0f5bfe4b002ce9d5cbc28"},{"code":"(fn drop-nth [s n]\n       (lazy-seq\n        (when-let [s (seq s)]\n          (concat (take (dec n) s) (drop-nth (drop n s) n)))))","problem":41,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"code":"(fn f\n  ([xs n] (f xs n n []))\n  ([xs i n a]\n    (if (empty? xs)\n      a\n      (f (rest xs) (if (= 1 i) n (dec i)) n (if (= 1 i) a (conj a (first xs)))))))","problem":41,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":41,"code":"(fn [s n] (filter #(not (zero? (mod (+ 1 (.indexOf s %)) n))) s))","user":"5405ae2be4b0addc1aec6671"},{"problem":41,"code":"#(keep-indexed\n               (fn [index value] \n                 (if (not= 0 (mod (inc index) %2))\n                    value\n                    ))\n               %1)","user":"5ecf4ee4e4b016b56eae05a6"},{"problem":41,"code":"#(loop [result [] input %1 index %2]\n   (cond\n     (empty? input) result\n     (= index 1) (recur result (next input) %2)\n     :else (recur (conj result (first input)) (next input) (dec index))\n     ))","user":"5ea7b04de4b00a66d4a951b6"},{"code":"(fn [coll n]\n  (flatten (map drop-last (partition n n '(nil) coll))))","problem":41,"user":"5080a697e4b01a93d3f38e49"},{"code":"(fn dropsg \n  ([sin n] (dropsg sin [] n 1))\n  ([sin sout n i]\n    (if (zero? (count sin))\n      sout\n      (if (zero? (rem i n))\n        (dropsg (rest sin) sout n (inc i))\n        (dropsg (rest sin) (conj sout (first sin)) n (inc i))\n        )\n      )\n    )\n  )","problem":41,"user":"4f2004a1535d64f6031464a7"},{"problem":41,"code":"(fn dn[ls n] (concat (take (dec n) ls) (if (empty? ls) () (dn (drop n ls) n))   ))","user":"596f6683e4b069c0a1a19877"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed (fn [index item]\n                  (when-not (zero? (mod (inc index) n)) item))\n                coll))","user":"54cc26c1e4b057c6fda3a28a"},{"code":"(fn [coll n]\n  (let [end (take-last (mod (count coll) n) coll)]\n  (concat (mapcat drop-last  (partition n coll)) end)))","problem":41,"user":"52f528f0e4b05e3f0be25f2a"},{"problem":41,"code":"(fn [lst idx] (mapcat (partial take (dec idx)) (partition-all idx lst)))","user":"545b0275e4b01be26fd74648"},{"code":"(fn [s n] (keep-indexed (fn [i e] (if (> (mod (inc i) n) 0 ) e nil)) s))","problem":41,"user":"5151565be4b03e678e393acb"},{"code":"(fn [coll nth] (apply concat (partition-all (dec nth) nth coll)))","problem":41,"user":"5016ac54e4b052339a490e7b"},{"problem":41,"code":"(fn [ls d] \n    (let [ indexed (map vector ls (range (count ls))) ]\n       (map first (filter (fn [[_ id]] (not (zero? (mod (inc id) d)))) indexed))))","user":"564127a9e4b08d4f616f5ef3"},{"problem":41,"code":"(fn dropnth [xs n]\n  (if (empty? xs)\n    ()\n    (concat (take (dec n) xs) (dropnth (drop n xs) n))))","user":"547584d9e4b0c51c1f4d729b"},{"code":"(fn [s n]\n  (loop [acc [] c n r s]\n    (cond \n      (not (seq r)) acc\n      (= 1 c) (recur acc n (rest r))\n      :else (recur (conj acc (first r)) (dec c) (rest r)))))","problem":41,"user":"4ef0a38e535dced4c769f20b"},{"code":"(fn [x cnt] (reverse (loop [xs x i 1 result '()] (if (empty? xs) result (recur (rest xs) (+ i 1) (if (= 0 (mod i cnt)) result (cons (first xs) result)))))))","problem":41,"user":"4f122bfe535d64f603146426"},{"problem":41,"code":"(fn [col step]\n  (vec (apply concat \n         (map \n          drop-last (partition step step [0] col)))))","user":"51e8ee6be4b07cae92c04bfd"},{"problem":41,"code":"#(loop [x [] y %] (if (empty? y) x (recur (concat x (take (- %2 1) y)) (drop %2 y))))","user":"55c3f19de4b0e31453f64991"},{"problem":41,"code":"(fn drop-nth [s n]\n  (mapcat #(take (dec n) %) (partition-all n s)))","user":"53b39d82e4b047364c0444a6"},{"problem":41,"code":"(fn [v n]\n   (let [indexed (map vector v (iterate inc 1))]\n     (mapv first\n      (remove (fn [[_ i]] (zero? (mod i n)))\n              indexed))))","user":"51e4b812e4b0efabf93c02bc"},{"code":"(fn [col n]\n  (loop [result [] l col]\n    (if (empty? l) result\n      (recur (concat result (take (- n 1) l)) (drop n l))\n    )\n  )\n)","problem":41,"user":"4f7683dae4b0fbe0118ec56f"},{"code":"(fn [s n]\n  (loop [s1 s i 1 acc []]\n         (if (next s1)\n           (if (= i n)\n             (recur (next s1) 1 acc)\n             (recur (next s1) (inc i) (conj acc (first s1))))\n           (if (= i n)\n             acc\n           \t(conj acc (first s1))))))","problem":41,"user":"501948b3e4b0b6630b101db5"},{"problem":41,"code":"(fn dropnth [x n]\n  (loop [i 0\n         r []]\n    (if (= i (count x))\n      r\n      (if (= (- n 1) (mod i n))\n        (recur (inc i) r)\n        (recur (inc i) (conj r (get x i)))))))","user":"5c24c654e4b07e362c2305a7"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed (fn [index value] (if (pos? (rem (inc index) n)) value)) coll))","user":"5eeb03dde4b029a2061bbeca"},{"code":"(fn drop-nth [xs n]\n  (if (seq xs)\n    (concat (take (dec n) xs) (drop-nth (drop n xs) n))))","problem":41,"user":"504e13fce4b078edc5f593bc"},{"problem":41,"code":"(fn [col div] (map second (remove #(= 0 (mod (first %) div)) (map-indexed (fn [idx itm] [(inc idx) itm]) col))))","user":"59a8a4dce4b0bcf4e9a43af7"},{"problem":41,"code":"(fn [col num]\n      (map #(first (rest %)) (filter #(not (= (mod (first %1) num) (dec num))) (map #(vector %2 %1) col (range)))) )","user":"55ee84c0e4b0121d4835fdf0"},{"code":"(fn [coll idx] (remove #(zero? (mod (+ 1 (.indexOf coll %)) idx)) coll))","problem":41,"user":"50481532e4b0ec70b3ef8d96"},{"code":"(fn [s nth]\n    (keep-indexed (fn [index item] \n                     (if (not= (rem (inc index) nth) 0) item))\n                  s))","problem":41,"user":"53489329e4b084c2834f4a5b"},{"problem":41,"code":"(fn my-drop [col n]\n  (map\n    #(get % 1)\n\t  (filter \n\t    #(not= (mod (get % 0) n) 0)\n\t    (map vector (drop 1 (range)) col))))","user":"5887518ae4b0f1effa3b76f5"},{"problem":41,"code":"(fn [coll nth]\n  (reduce\n   (fn [acc curr]\n     (if (= (mod (+ (.indexOf coll curr) 1) nth) 0)\n       acc (conj acc curr))) [] coll))","user":"5fac50f4e4b08cb800c85ae5"},{"code":"(fn [l skip] \n  (loop [l1 l a1 [] i 1]\n    (if (empty? l1)\n      a1\n      (recur \n       \t(rest l1)\n        (if (= 0 (mod i skip))\n          a1\n          (conj a1 (first l1)))\n          (inc i)))))","problem":41,"user":"51622fb8e4b009fba0926e3f"},{"code":"(fn [lst x] \n  (into [] (filter (complement nil?)\n    (map-indexed #(if (> (rem (inc %1) x) 0) %2) lst))\n))","problem":41,"user":"4ff743fde4b0678c553fc38d"},{"code":"#(mapcat (fn [xs] (if (= (count xs) %2) (drop-last xs) xs)) (partition-all %2 %1))","problem":41,"user":"525a643be4b0cb4875a45cf1"},{"problem":41,"code":"#(keep-indexed (fn [idx i] (if (not= 0 (rem (inc idx) %2)) i)) %1)","user":"53ac4c6fe4b047364c04445d"},{"code":"#(loop [L %1\n          idx 0\n          N []]\n     (if (= idx (count L))\n       N\n       (recur\n         L\n         (inc idx)\n         (if (= 0 (rem (inc idx) %2))\n           N\n           (conj N (L idx))))))","problem":41,"user":"4f73f78de4b044e54cd9a8f3"},{"code":"#(into [] (for [i (map (partial + 1) \n(range (count %1))) :when (not (== 0 (rem i %2 ))) ] \n(nth %1 (dec i))))","problem":41,"user":"50335235e4b0c6c1199c710b"},{"problem":41,"code":"(fn [xs n]\n  (filter \n   (fn [x]\n     (let [idx (inc (.indexOf xs x))\n           remainder (rem idx n)]\n       (not (= 0 remainder)))) \n   xs))","user":"58bc8cbee4b0888cdc949d1b"},{"problem":41,"code":";#(flatten (partition (dec %2) %2 nil %))\n\n#(flatten (partition-all (dec %2) %2 %))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":41,"code":"(fn [coll n]\n  (let [groups (partition-all n coll)]\n    (if (= n (count (last groups)))\n      (into [] (flatten (map butlast groups)))\n      (into [] (flatten [(map butlast (butlast groups)) (last groups)])))))","user":"54012b48e4b0de5c41848620"},{"code":"(fn [x y]\r\n  (mapcat (fn [j] (take (dec y) j))\r\n   (partition-all y x)))","problem":41,"user":"4ff201d7e4b0678c553fc330"},{"code":"(fn drop\n  ([seq num] (drop seq num num []))\n  ([seq num count result]\n     (if (empty? seq)\n      result\n      (if (= count 1)\n        (drop (rest seq) num num result)\n        (drop (rest seq) num (- count 1) (conj result (first seq)))))))","problem":41,"user":"4fe89efae4b07c9f6fd12c5b"},{"problem":41,"code":"(fn [seq count]\n  (map first\n       (filter second\n               (map list\n                    seq\n                    (flatten (repeat (concat (repeat (- count 1) true)\n                                             (list false))))))))","user":"5553b924e4b0deb715856e06"},{"code":"(fn [_l n]\n  (loop [\n         acc []\n         c 1\n         l _l]\n    (cond\n      (empty? l) acc\n      (== c n) (recur acc 1 (rest l))\n      :else (recur (conj acc (first l)) (+ c 1) (rest l)))))","problem":41,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":41,"code":"(fn [vs i]\n   (filter #(not (= :remove-me %1)) (map-indexed #(if (= (- i 1) (mod %1 i))\n                   :remove-me\n                   %2) vs))\n\n   )","user":"54ef4a1ee4b024c67c0cf883"},{"problem":41,"code":"(fn [x n] \n  (concat\n   (flatten (map drop-last (partition n x)))\n   (take-last (rem (count x) n) x)))","user":"53d0c837e4b00fb29b22130b"},{"code":"(fn [coll n]\n            (loop [result '()\n                   coll coll\n                   cnt (dec n)]\n                  (if (first coll)\n                      (if (pos? cnt)\n                          (recur (concat result [(first coll)]) (rest coll) (dec cnt))\n                        (recur result (rest coll) (dec n)))\n                    result)))","problem":41,"user":"5256cd77e4b0541d1855ba39"},{"code":"(fn [xs n] (keep-indexed #(when (not= (- n 1) (mod %1 n)) %2) xs))","problem":41,"user":"508a2c2fe4b016a2107004a1"},{"code":"(fn drop-nth [xs x] (mapcat drop-last (partition x x  [\"drop me\"] xs)))","problem":41,"user":"5255bf1ee4b0541d1855b9f1"},{"problem":41,"code":"(fn drop-nth\n\t[coll n]\n\t(lazy-seq \n\t\t(when-let [s (seq coll)]\n\t\t\t(concat (take (- n 1) s)\n\t\t\t\t(drop-nth (drop n coll) n)\n\t\t\t)\n\t\t)\n\t)\n)","user":"55e46caae4b050e68259b451"},{"code":"(fn dropEveryNthItem [a b] (loop [x a y b z []] (if (< (count x) y) (flatten (conj z x)) \n(recur (reverse (take (- (count x) y) (reverse x))) y (conj z (take (dec y) x))))))","problem":41,"user":"4f9336ece4b0dcca54ed6cb7"},{"code":"#(remove nil? \n        (map-indexed (fn [idx itm] \n                       (if (not= 0 (mod (inc idx) %2)) itm)) %))","problem":41,"user":"50955676e4b087f34d351ab1"},{"code":"(fn __\n  ([l n]\n\t\t(__ (drop n l) n (drop-last (take n l)))\n     )\n  \t([l n f]\n     (if (< (count l) n)\n       (concat f l)\n\t\t(__ (drop n l) n (concat f (drop-last (take n l))))\n       )\n     )\n  )","problem":41,"user":"4fa719c0e4b081705acca1bf"},{"problem":41,"code":"(fn drop-nth\n  ([coll n]\n   (drop-nth coll n 1))\n  ([coll n o]\n   (cond\n    (empty? coll) coll\n    (= 0 (rem o n)) (drop-nth (rest coll) n (inc o))\n    :else (cons (first coll)\n                (drop-nth (rest coll) n (inc o))))))","user":"54b10d08e4b09f271ff37d18"},{"problem":41,"code":"(fn [c n] (reduce concat (partition-all (dec n) n c)))","user":"580d7bdae4b0849f6811b73c"},{"problem":41,"code":"(fn drop-every [x y]\n   (if (= '() x)\n     x\n     (concat\n      (take (- y 1) x)\n      (drop-every\n       (drop y x)\n       y))))","user":"59273eefe4b072a2710fcec6"},{"problem":41,"code":"(fn [coll n]\n                (->> coll\n                     (map list (range))\n                     (filter #((complement zero?) (mod (inc (first %)) n)))\n                     (map second)))","user":"5ece3d25e4b016b56eae059b"},{"code":"(fn [s x] (flatten (partition-all (dec x) x s)))","problem":41,"user":"52e75667e4b09f7907dd1485"},{"code":"(fn [s n]\n  (filter identity \n  (map-indexed #(if (= (mod (+ %1 1) n) 0) nil %2) s)))","problem":41,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn [xs n]\n  (loop [cnt 1\n         [x & xs] xs\n         acc []]\n    (if (not x)\n      acc\n      (if (= cnt n)\n        (recur 1 xs acc)\n        (recur (+ cnt 1) xs (conj acc x))))))","problem":41,"user":"4f03afcc535dcb61093f6b4d"},{"problem":41,"code":"(fn f [s index]\n  (map #(get s (dec %)) (filter #(not= 0 (rem % index)) (map inc (range (count s))))))","user":"55a62092e4b0acc240e31554"},{"problem":41,"code":"#(mapcat (fn [c]\n          (if (= (count c) %2)\n            (drop-last c)\n            c))\n        (partition-all %2 %1))","user":"5ebc7c13e4b00a66d4a95267"},{"code":"(fn [v n] (keep-indexed #(if (not (= (mod (+ 1 %1) n) 0)) %2) v))","problem":41,"user":"500a214de4b03d00572d2d74"},{"code":"(fn [c n] (loop [x c s [] i 1] \n    (if (empty? x) s \n      (if (= i n) \n        (recur (drop 1 x) s 1)\n        (recur (drop 1 x)  \n           (conj s (first x)) (inc i)\n        )))))","problem":41,"user":"4e7650c5535d324fb2983d68"},{"problem":41,"code":"(fn [coll x] \n\t (flatten (partition-all (dec x) x coll))\n\t)","user":"5ac04101e4b073f177442737"},{"problem":41,"code":"(fn myDrop [x y] (flatten (partition-all (dec y) y x)))","user":"58e5f995e4b056aecfd47ca5"},{"problem":41,"code":"(fn [c n] (->> c (partition-all n) (mapcat (partial take (dec n))) vec))","user":"57fd085ce4b0d3187e9009a9"},{"code":"(fn my-drop [x n]\r\n(apply concat (partition (dec n) n nil x)))","problem":41,"user":"5065bd94e4b0148eb3925aed"},{"problem":41,"code":"(fn drop-nth\n  [lst n]\n  (mapcat #(if (= n (count %)) (butlast %) %) (partition-all n lst)))","user":"5bbbcf9ee4b0a20761a23614"},{"problem":41,"code":"#(loop [xs %1 n %2 r []]\n   (cond (empty? xs) r\n         (= 1 n) (recur (rest xs) %2 r)\n         :else (recur (rest xs)\n                      (dec n)\n                      (conj r (first xs)))))","user":"55e26417e4b050e68259b433"},{"code":"(fn dropn\n  [col n]\n  (loop [idx 1\n         [car & cdr] col\n         result []]\n    (cond (empty? cdr) \n          (if (= 0 (mod idx n))\n            result\n            (conj result car))\n          (= 0 (mod idx n)) (recur (inc idx) cdr  result)\n          :else (recur (inc idx) cdr (conj result car))\n      )))","problem":41,"user":"5322d370e4b09d4e7a9b54c7"},{"problem":41,"code":"(fn [col n] (keep-indexed (fn [idx num] (if-not (= 0 (mod (+ idx 1) n)) num)) col))","user":"53e1c279e4b0d874e779ae5b"},{"problem":41,"code":";(fn [s n] (keep-indexed #(if (not= (mod % n) (dec n)) %2) s))\n#(flatten (partition-all (dec %2) %2 %))","user":"5ccf21c4e4b0ccb0619628c1"},{"code":"(fn [l m]\n\t(keep-indexed \n     #(if (not= 0 (mod (inc %1) m)) %2 ) \n     l))","problem":41,"user":"538c6db7e4b0b51d73faae5a"},{"code":"(fn [v i] (keep-indexed #(if-not (= 0 (mod (inc %1) i)) %2) v))","problem":41,"user":"4e70a7c1535d5021c1a8963c"},{"problem":41,"code":"#(reduce (fn [coll val] (conj coll (last val))) [] (filter (fn [var] (not= 0 (mod (first var) %2))) (map-indexed (fn [index val] [(inc index) val]) %1)))","user":"560039cce4b04bb52996e162"},{"code":"(fn drop-nth [seq n]\n  (->>  seq\n       (partition-all n)\n       (map #(if (= (count %) n) (drop-last %) %))\n       (flatten)))","problem":41,"user":"521b339fe4b0c4ef0be83031"},{"code":"(fn [xs n]\n    (loop [ls xs acc [] m 1]\n       (if (seq ls)\n            (if (= (mod m n) 0) (recur (rest ls) acc (inc m))\n                                (recur (rest ls) (conj acc (first ls)) (inc m)))\n            acc)))","problem":41,"user":"4eb0a757535d7eef3080733d"},{"problem":41,"code":"#(loop [a [] x %1]\n   (if (< (count x) %2)\n        (concat a x)\n   \t\t(recur (concat a (take (dec %2) x)) (drop %2 x))))","user":"53e4fa2ce4b036ad0777e454"},{"problem":41,"code":"#(loop [x [] y %]\n   (if (>= (dec %2) (count y))\n     (into x y)\n     (recur (into x (take (dec %2) y)) (subvec y %2))))","user":"582c526ae4b051871117bf88"},{"code":"(fn take-each-nth [coll n]                                                                  \n(loop [c coll r []]                                                                      \n              (if (empty? c)                                                                        \n                  r                                                                                 \n                  (recur (drop n c) (concat r (take (dec n) c))))))","problem":41,"user":"4e360072535deb9a81d77f30"},{"problem":41,"code":"(fn [a-seq n]\n  (map first (filter #(not (= (mod (second %) n) 0))\n                    (map #(vector %1 %2)\n                       a-seq\n                       (range 1 (inc (count a-seq)))))))","user":"574e84e0e4b02ea114799243"},{"problem":41,"code":"(fn [coll nth] (into [] (keep-indexed (fn [i x] (if (= (mod i nth) (- nth 1)) nil x)) coll)))","user":"5addadfce4b0837691e92c13"},{"problem":41,"code":"(fn[xs n](apply concat (partition-all (dec n) n xs)))","user":"55f01316e4b06e875b46ce1a"},{"problem":41,"code":";(fn [coll n] (filter #(not (nil? %)) (for [i (range (count coll))] (when-not (= 0 (mod (inc i) n)) (nth coll i)))))\n(fn [coll n] (keep #(or %) (for [i (range (count coll))] (when-not (= 0 (mod (inc i) n)) (nth coll i)))))","user":"568d4742e4b0dcc4269f40c2"},{"problem":41,"code":"(fn [xs n] (vec (remove nil? (map-indexed (fn [i x] (when (not= (mod (inc i) n) 0) x)) xs))))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [idx item] (if-not (zero? (mod (inc idx) n)) item)) coll))","user":"5a68f374e4b0512ff01cda05"},{"code":"(fn [coll n]\r\n  (mapcat #(if (= n (count %))\r\n       (butlast %)\r\n\t     (identity %))\r\n\t  (partition-all n coll)))","problem":41,"user":"4fdc067fe4b05e33b9224f69"},{"code":"(fn [coll n] (loop [res () c coll] (if (empty? c) res (recur (concat res (take (dec n) c)) (drop n c) ))))","problem":41,"user":"5167e4a2e4b0c5a4140a3099"},{"problem":41,"code":"(fn [input n]\n  (loop [current input x (- n 1) output []]\n    (if (empty? current)\n      output\n      (if (= 0 x)\n        (recur (rest current) (- n 1) output)\n        (recur (rest current) (- x 1) (conj output (first current)))))))","user":"5a21d34ce4b0ff51aa4b32b9"},{"code":"(fn [col n]\n  (mapcat #(take (dec n) %) (partition-all n col)))","problem":41,"user":"535c53c5e4b04ce2eb3ed2b3"},{"code":"(fn [s n] (flatten (partition (dec n ) n nil s)))","problem":41,"user":"4ff2ff7ce4b0678c553fc342"},{"problem":41,"code":"(fn my-drop-nth [s n] (flatten (map #(take (dec n) %) (partition-all n s))))","user":"5e218bb7e4b05b4b01516123"},{"problem":41,"code":"(fn [data pos] \n   (filter #(not (nil? %)) (map (fn [idx d] \n           (if (not= (mod (inc idx) pos) 0) d)) (range) data )))","user":"55f9b2b6e4b03cbcff9738c8"},{"code":"(fn [a b] (flatten(map #(if(=(count %) b) (butlast %) (list %)) (partition-all b a))))","problem":41,"user":"5307e4ece4b02e82168697a9"},{"problem":41,"code":"(fn f [r s t]\n    (if (empty? s)\n      r\n      (f (concat r (take (dec t) s)) (drop t s) t))) []","user":"4f24c859e4b0d66497709fef"},{"problem":41,"code":"(fn [col n]\n  (->> col\n  (map-indexed (fn [idx i] (list idx i)))\n  (filter (fn [[idx i]] (not (zero? (mod (inc idx) n)))))\n  (map second)))","user":"58a822e4e4b01a0c0b232950"},{"problem":41,"code":"(fn [xs n]\n  (map second (filter #(not= 0 (mod (inc (first %)) n)) (map-indexed vector xs))))","user":"5afcd6d1e4b0cc2b61a3bd17"},{"code":"(fn [s n]\n        (loop [i 0 s s x []]\n          (if (empty? s) x\n            (recur (inc i) (rest s)\n              (if (= 0 (rem (inc i) n)) x\n               (conj x (first s))))))\n      )","problem":41,"user":"5029fccee4b023940c84aa47"},{"problem":41,"code":"(fn [coll n]\n  (reduce #(if (> (rem (get %2 1) n) 0) \n               (conj %1 (get %2 0)) \n               %1) [] (map-indexed (fn [idx item] [item (inc idx)]) coll)))","user":"54df3c94e4b024c67c0cf7aa"},{"code":"(fn dnth [s n] (if (seq s) (concat (take (- n 1) s) (dnth (drop n s) n)) ()))","problem":41,"user":"50b81a93e4b0cba0e598b64b"},{"problem":41,"code":"#(loop [output []\n        input %1]\n   (if (empty? input)\n     output\n     (recur (concat output (take (dec %2) input)) (drop %2 input))))","user":"4f43894ee4b0d7d3c9f3fd21"},{"problem":41,"code":"(fn [coll n] (vec (flatten (partition-all (dec n) n coll))))","user":"52a3c66ce4b04e0c58e87c04"},{"problem":41,"code":"(fn foo [xs c] (if (seq xs) (concat (take (dec c) xs) (foo (drop c xs) c))))","user":"513e8141e4b02b2a3d8235c1"},{"code":"#(vec (apply concat \n  (map (fn [col] (drop-last (- (.size col)(dec %2)) col)) (partition-all %2 %1))))","problem":41,"user":"4f03822f535dcb61093f6b03"},{"code":"(fn [sek n]\n (flatten (map #(take (- n 1) %) (partition-all n sek))))","problem":41,"user":"4eb9353f535dfed6da9c6d4e"},{"problem":41,"code":"(fn my-fun [in-seq del-inc]  (reduce #(if %2 (conj %1 %2) %1) [] (map-indexed (fn [idx itm] (if (not (= 0 (mod (inc idx) del-inc))) itm)) in-seq)))","user":"571d9669e4b0145328a7627f"},{"problem":41,"code":"(fn dropnth [coll n]\n                                   (loop [c coll\n                                          i 0\n                                          d ()]\n                                       (if (empty? c)\n                                         (reverse d)\n                                        ( recur (rest c)  (inc i) \n                                                (if (not= (mod (inc i) n) 0)\n                                                   (conj d (first c))\n                                                   (identity d )\n                                                )\n                                                \n                                        )\n                                       )\n                                   )\n                                   )","user":"5b9d3913e4b0c0b3ffbd4b37"},{"problem":41,"code":"(fn drop-nth\n\t([sequence n i]\n\t\t(if (empty? sequence) '()\n\t\t\t(if (= 0 (mod i n))\n\t\t\t\t(drop-nth (rest sequence) n (+ i 1))\n\t\t\t\t(cons (first sequence) (drop-nth (rest sequence) n (+ i 1))))))\n\t([sequence n]\n\t\t(drop-nth sequence n 1)))","user":"57d0fce5e4b0bd073c202364"},{"problem":41,"code":"#(keep-indexed (fn [i v] (if-not (zero? (mod (inc i) %2)) v)) %1)","user":"56baa68ce4b0f26550335947"},{"problem":41,"code":"#(loop[result [] coll %1 i 1]\n   (if (empty? coll) (reverse result)\n     (if (= (mod i %2) 0) (recur result (rest coll) (inc i))\n            (recur (cons (first coll) result) (rest coll) (inc i)))))","user":"59c77511e4b0a024fb6ae545"},{"problem":41,"code":"(fn [xs c]\n  (->> xs\n       (map (fn [idx x] [idx x]) (range))\n       (filter (fn [[idx _]]\n                 (not (zero? (mod (inc idx) c)))))\n       (map (fn [[_ x]] x))))","user":"5d3aefbde4b01671435dbd5e"},{"problem":41,"code":"(fn [s offset]\n  (loop [coll [] local s]\n    (if (empty? local)\n      (flatten coll)\n      (recur\n        (->> (take (- offset 1) local)\n             (conj coll))\n        (drop offset local)))))","user":"5ad76df9e4b0ea6055cfac18"},{"problem":41,"code":"(fn [seq n] (mapcat (partial take (dec n)) (partition-all n seq)))","user":"55ab8c2de4b0988bba2ad954"},{"problem":41,"code":"#(map second (filter (fn [[i x]] (not= 0 (mod (inc i) %2))) (map-indexed list %1)))","user":"5592dc6be4b0c79f6e1db935"},{"code":"(fn [col n]\n  (mapcat #(take (dec n) %) \n   (partition-all n col)))","problem":41,"user":"4f3e2fbbe4b0e243712b1f7e"},{"code":"#(keep-indexed (fn [index item] (if (pos? (mod (inc index) %2)) item)) %1)","problem":41,"user":"5038381ce4b0803468ea2c6b"},{"code":"(fn [c v]\n  (loop [coll c n 0 acc []]\n    (if (nil? coll) acc\n      (recur \n        (next coll) \n        (inc n) \n        (if (= (mod n v) (dec v)) acc (conj acc (first coll)))))))","problem":41,"user":"4e7f7e48535db966e863cc42"},{"problem":41,"code":"(\n fn F [xs n]\n (when \n   (and (>= n 2) (not-empty xs))\n   (let [[xa xb] [(take (dec n) xs) (drop n xs)]]\n     (concat xa (F xb n))\n     )\n   )\n )","user":"58334d18e4b089d5ab817c97"},{"problem":41,"code":"(fn [seq n]\n  (->> (map-indexed list seq)\n       (filter (fn [[i _]] (not= (mod i n) (dec n))))\n       (map second)))","user":"5455c2f3e4b080a794c2c87d"},{"problem":41,"code":"(fn y\n  [collection n]\n  (flatten \n    (map \n      (fn [el] \n        (if (= n (count el))\n          (-> el (reverse) (rest) (reverse))\n          el))\n     (partition-all n collection))))","user":"5843b231e4b089d5ab817e3d"},{"problem":41,"code":"(fn [s n] (mapcat identity (map #(if (<= n (count %)) (drop-last %) %) (partition-all n s))))","user":"5935b010e4b04f87174def55"},{"code":"(fn [xs n] (keep-indexed (fn [index x] (if (= (mod (inc index) n) 0) nil x)) xs))","problem":41,"user":"523c6451e4b07becd5be2222"},{"code":"#((comp flatten map)\n  (fn [x] (take (dec %2) x)) (partition-all %2 %1))","problem":41,"user":"5213dbc3e4b0961f15ac4d74"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed (fn [i item] (if (not= 0 (mod (inc i) n)) item)) coll))","user":"56603e5fe4b068f2fe63dc4a"},{"problem":41,"code":";;(fn [xs n]\n;;   (let [p (dec n)]\n;;     (->> xs\n;;          (partition n n nil)\n;;          (map #(take p %))\n;;          (reduce into []))))\n\n(fn [xs n]\n   (->> xs\n        (map-indexed #(vector (inc %1) %2))\n        (remove #(-> % first (rem n) zero?))\n        (map second)))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":41,"code":"(fn  [lst n]\n  (reduce concat (map (fn  [n lst]\n      (if (= (count lst) n)(butlast lst) lst)) (repeat (count lst) n )(partition-all n lst))))","user":"57fc08d8e4b0d3187e900988"},{"problem":41,"code":"(fn [lst n] (keep-indexed #(if (= 0 (mod (+ 1 %1) n)) nil %2) lst))","user":"591f05b4e4b09b4ee5954c42"},{"problem":41,"code":"(fn dropnth [s n]\n   (if (empty? s)\n     nil\n     (concat (take (dec n) s) (dropnth (drop n s) n))))","user":"57501de0e4b02ea11479926c"},{"code":"(fn [coll n]\n  (flatten\n    (concat\n  (map drop-last (partition n coll))\n  (take-last (rem (count coll) n) coll))))","problem":41,"user":"5030f16fe4b05b7df5a0b84b"},{"problem":41,"code":"#(for [[k v] (apply sorted-map (interleave (iterate inc 1) %1))\n      :when (not= 0 (mod k %2))]\n  v\n  )","user":"54588070e4b01be26fd74620"},{"problem":41,"code":"(fn [vec n]\n  (loop [source vec\n         dest []]\n    (if (empty? source)\n      (flatten dest)\n      (recur (drop n source) (conj dest (take (dec n) source))))))","user":"563e022be4b0da801c4e4664"},{"problem":41,"code":"#(letfn [(in? [l x] (some (partial = x) l))\n\t\t(difference [a b] (remove (partial in? b) a))]\n\t(difference % (take-nth %2 (cons nil %))))","user":"52e16face4b09f7907dd1421"},{"problem":41,"code":"(fn [arr n]\n  ((fn foo [x y]\n    (cond (empty? x) '()\n          (= 0 (mod y n)) (foo (rest x) (inc y))\n          :else (conj (foo (rest x) (inc y)) (first x)))) arr 1))","user":"5760715de4b08062f99a4e96"},{"code":"(fn [l n]\n  (keep-indexed #(when (not= (dec n) (rem %1 n)) %2) l))","problem":41,"user":"504e72cee4b0f6ff3350c4b4"},{"problem":41,"code":"#(loop [xs %1\n         rs []\n         ic 0]\n   (if (seq xs)\n     (recur (rest xs) (if (= (inc ic) %2) rs (conj rs (first xs))) (mod (inc ic) %2))\n     rs))","user":"5454bb07e4b0e397800069da"},{"problem":41,"code":"#(vec (filter (fn [elem] (not (nil? elem))) (map-indexed (fn drop-nth [idx elem] (if (= 0 (mod (inc idx) %2)) nil elem)) %1)))","user":"5658d775e4b00d3155796114"},{"code":"(fn [coll n] (\n  keep-indexed #(if (> (rem (inc %1) n) 0) %2) coll\n  )\n)","problem":41,"user":"4fce75cfe4b03432b189f400"},{"problem":41,"code":"(fn den [s n]\n           (let [front (take (dec n) s)\n                 back  (drop n s)]\n             (when (seq s)\n               (concat front (den back n)))))","user":"4e617114535d8ccf87e9fe5b"},{"problem":41,"code":"(fn [x n]\n  (loop [index 1\n         x x\n         result []]\n    (if (empty? x)\n      result\n      (if (zero? (mod index n))\n        (recur (inc index) (rest x) result)\n        (recur (inc index) (rest x) (conj result (first x)))))))","user":"4f0f7339535d0136e6c2233e"},{"problem":41,"code":"(fn [xs x]\n   (loop [xs xs\n          y 1\n          ys []]\n     (cond\n       (empty? xs) ys\n       (not= x y) (recur (rest xs) (inc y) (conj ys (first xs)))\n       :else (recur (rest xs) 1 ys))))","user":"5a8bc2a1e4b05369db4d24ef"},{"problem":41,"code":"(fn doo [seqs nub] \n        ((fn foo [seqs nub i] \n          (cond (empty? seqs) \n                nil\n                (= i nub) (foo (rest seqs) nub 1)\n                :else \n                (conj  (foo (rest seqs) nub (inc i)) (first seqs))\n                )\n          )\n         seqs nub 1))","user":"6038b6b4e4b0d5df2af222ef"},{"problem":41,"code":"#(loop [l %1 r []] (if (empty? l) r (recur (drop %2 l) (concat r (take (dec %2) l)))))","user":"5686b7c7e4b0dcc4269f4057"},{"problem":41,"code":"(fn [v step] (map #(v %) (filter #(not= 0 (mod (inc %) step)) (range (count v)))))","user":"5d7a748ce4b02e6b30c93547"},{"problem":41,"code":"(fn drop [s n]\n  (letfn [(internal [s c]\n  \t(cond\n     \t(and (empty? (rest s)) (= c n)) (vector)\n        (empty? (rest s)) (vector (first s))\n     \t(= c n) (internal (rest s) 1)\n  \t\t:else (concat (vector (first s)) (internal (rest s) (inc c)))\n  \t)\n   )]\n   (internal s 1)\n  )\n)","user":"55efbb2ae4b066087aa9453c"},{"problem":41,"code":"(fn [coll n] (remove #(= 0 (mod (inc (.indexOf coll %)) n)) coll))","user":"52d885afe4b09f7907dd1398"},{"problem":41,"code":"(fn [xs number]\n  (loop [index 1, results '(), remaining xs]\n    (cond\n      (empty? remaining) results\n      (= number index) (recur 1 results (rest remaining))\n      :else (recur (inc index) (concat results (list (first remaining))) (rest remaining)))\n    ))","user":"5de48f92e4b0948ae9d9ae07"},{"problem":41,"code":"(fn [xs n]\n  (loop [result []\n         n2 (cycle (range 1 (inc n)))\n         xs2 xs]\n    (if (empty? xs2) result\n      (recur\n       (if (= n (first n2)) result\n         (conj result\n               (first xs2)))\n       (rest n2)\n       (rest xs2)))))","user":"56403765e4b08d4f616f5edc"},{"code":"(fn [coll n]\n  (keep-indexed #(cond\n          (= 0 (mod (inc %1) n)) nil\n          true %2) coll))","problem":41,"user":"4fe83efbe4b07c9f6fd12c3b"},{"problem":41,"code":"(fn [s n]\n  (keep #(when-not (zero? (mod (inc (first %)) n))\n           (second %))\n  (map-indexed vector s)))","user":"55c652dde4b0e31453f649bd"},{"problem":41,"code":"(fn [col n] \n  (mapcat \n   #(if (= (count %) n) (butlast %) %)\n   (partition-all n col)))","user":"5e44c804e4b01d43a70e8e89"},{"code":"(fn [xs n]\n  (let [is-nth (fn [i]\n                 (= 0 (rem (inc i) n)))]\n    (keep-indexed (fn [i x]\n                    (if (is-nth i) nil x))\n                  xs)))","problem":41,"user":"4fc3a72ae4b081705acca342"},{"code":"#(map first (filter (fn [[n i]] (not= (mod i %2) (dec %2))) \n(map list % (range))))","problem":41,"user":"4f9a0064e4b0dcca54ed6d03"},{"code":"#(filter identity (map-indexed (fn [i x] (if (= 0 (mod (inc i) %2)) nil x)) %1))","problem":41,"user":"52ab51c4e4b0c58976d9ac73"},{"code":"#(flatten(for [x (partition %2 %2 nil %1)] (take (dec %2) x)))","problem":41,"user":"51623490e4b009fba0926e42"},{"problem":41,"code":"(fn [s n] (apply concat (filter (complement nil?) (concat (map butlast (partition n n [nil] s))))))","user":"54e85a7fe4b024c67c0cf823"},{"problem":41,"code":"(fn doon [s n]\n  (mapcat #(take (dec n) %) (partition-all n s))\n  )","user":"5fdb8657e4b05ac5b16ea133"},{"problem":41,"code":"(fn drop-every-nth [s n]\n  (filter #(not (= % \"!\"))\n          (apply concat\n                 (map #(butlast %)\n                      (partition n n (repeat n \"!\") s)))))","user":"5d64ecb2e4b0c9e5857d5036"},{"code":"(fn [v n]\n  (for [i (range 0 (count v)) :when (not (= 0 (rem (inc i) n)))] (get v i)))","problem":41,"user":"4e8f4f64535d65386fec2149"},{"code":"(fn [a b]\r\n  (mapcat #(if (= (count %) b) (drop-last %) %) \r\n          (partition-all b a)))","problem":41,"user":"4e5d1912535d8a8b8723a2c9"},{"problem":41,"code":"#(flatten (partition (- %2 1)\n                     %2\n                     nil\n                     %))","user":"58ef93ece4b056aecfd47dca"},{"problem":41,"code":"(fn f [coll n]\n  (if (seq coll)\n    (flatten (cons (take (dec n) coll) (f (drop n coll) n)))))","user":"550615c0e4b021ccfedb9696"},{"problem":41,"code":"(fn [col n] (apply concat (partition-all (- n 1) n col)))","user":"5e246f92e4b05b4b01516150"},{"problem":41,"code":"(fn [coll index] (remove #(= (rem (inc (.indexOf coll %)) index) 0) coll))","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":41,"code":"(fn\n  [arr, st]\n  (loop [leftover arr\n         counter st\n         solution []]\n    (if (empty? leftover)\n      solution\n      (if (= counter 1)\n        (recur (rest leftover) st solution)\n        (recur (rest leftover) (dec counter) (conj solution (first leftover)))))))","user":"56a38a4ce4b0542e1f8d14cc"},{"problem":41,"code":"#(loop [r [] s %1 c 1]\n    (cond\n      (empty? s) r\n      (= c %2) (recur r (rest s) 1)\n      :else (recur (conj r (first s)) (rest s) (inc c))\n      )\n    )","user":"5f9c4113e4b0715f5002d821"},{"code":"(fn [s n] \n  (filter identity\n          (map #(when-not %1 %2)\n               (map #(zero? (mod % n)) (rest (range))) s)))","problem":41,"user":"50e4b066e4b0cb9ec68fbca6"},{"code":"(fn [l c] \n   (vec (flatten (map #( if (< (count %) c) % (drop-last %)  ) (partition-all c l)))))","problem":41,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":41,"code":"(fn [s n]\n  (loop [r () [f e & s] (reverse (interleave s (cycle (map #(= (dec n) %) (range n)))))]\n    (if (nil? e) r (if f (recur r s) (recur (cons e r) s)))))","user":"5e178fbee4b00200644e3d57"},{"code":"(fn takeoutnth [s n]\n  (letfn [(innertake [s1 n1 orign] \n                    (cond\n                     (empty? (rest s1)) \n                     \t(if (= (mod (count s) orign) 0) nil (list (first s1)))\n                     (> n1 1) \n                     \t(conj (innertake (rest s1) (dec n1) orign) (first s1))\n                     :else (innertake (rest s1) orign orign)))]\n  (innertake s n n)))","problem":41,"user":"525aa499e4b0cb4875a45cf7"},{"problem":41,"code":"(fn [coll n]\n      (mapcat #(take (- n 1) %) (partition-all n coll)))","user":"5262efade4b03e8d9a4a709f"},{"code":"(fn foo [s n]\n  (if (< (count s) (dec n))\n    s\n    (concat (take (dec n) s) (foo (drop n s) n))\n    )\n  )","problem":41,"user":"510b704ee4b078ea71921100"},{"code":"(fn [s n] (keep-indexed #(if (not= 0 (mod (+ 1 %1) n)) %2) s))","problem":41,"user":"4fa7b013e4b081705acca1c8"},{"problem":41,"code":"#(keep-indexed (fn [k v] (if (not= (dec %2) (mod k %2)) v)) %1)","user":"579e15a6e4b05b1deef9ae20"},{"problem":41,"code":"(fn [x y]\n  (loop [arr x newarr [] i 1]\n    (if (= (count arr) 0)\n      newarr\n      (if (= (mod i y) 0)\n        (recur (rest arr) newarr (inc i))\n        (recur (rest arr) (conj newarr (first arr)) (inc i))))))","user":"5c72c2b9e4b0fca0c16227ab"},{"problem":41,"code":"(fn d [i l n]\n    (cond \n      (empty? l) l\n      (= i 0) (d 1 (rest l) n) \n      :else  (conj (d (rem (+ i 1) n) (rest l) n) (first l)))) 1","user":"5d2ca236e4b01671435dbc94"},{"code":"(fn r [xs n]\n (into []\n  (if (empty? xs)\n    xs\n    (concat (take (dec n) xs) (r (drop n xs) n)))))","problem":41,"user":"4fb510b5e4b081705acca2b8"},{"code":"#(mapcat (fn [item idx] (if (= idx (dec %2)) '() [item]) ) %1 (cycle (range %2)))","problem":41,"user":"4f3e6244e4b0e243712b1f85"},{"code":"(fn [x y]\n   (keep-indexed #(if-not (= (rem %1 y) (- y 1)) %2) x))","problem":41,"user":"529223cbe4b0239c8a67af26"},{"problem":41,"code":"(fn [coll n] \n  (mapcat \n   #(if (= (count %) n) (drop-last %) %) \n   (partition-all n coll)))","user":"5372e7d9e4b06d7f452d9e02"},{"problem":41,"code":"(fn[s n](into (empty s)(mapcat #(take (- n 1) %) (remove nil? (partition n n nil s)))))","user":"50342d1be4b062bc5d7ae15f"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (zero? (mod (inc %1) n)) nil %2) coll))","user":"53d2afede4b00fb29b221321"},{"problem":41,"code":"(fn a[sq p]\n  (flatten (conj (reverse (take (mod (count sq) p) (reverse sq)) ) (map #(take (dec p) %) (partition p sq\n                                                                                )))))","user":"5fe09d1fe4b05ac5b16ea15b"},{"code":"(fn [coll n]\n\t(loop [out '() coll coll n n i 1]\n\t\t(if (empty? coll)\n\t\t\t(reverse out)\n\t\t\t(if (not= (mod i n) 0)\n\t\t\t\t(recur (conj out (first coll)) (rest coll) n (inc i))\n\t\t\t\t(recur out (rest coll) n (inc i))))))","problem":41,"user":"51757af0e4b085adf681d873"},{"problem":41,"code":"(fn [coll arg] (loop [curr coll toret []] (if (= (count curr) 0) toret (recur (drop arg curr) (concat toret (take (- arg 1) curr))) )))","user":"5804b491e4b0a837a8b30cac"},{"code":"(fn skip-n\n  [c n]\n  (concat\n    (mapcat butlast (partition n c))\n    (take-last (rem (count c) n) c)))","problem":41,"user":"51c330a9e4b0851ac09658f2"},{"problem":41,"code":"(fn[i n] (apply concat (map #(take (- n 1) %) (partition-all n i ))))","user":"577e54bbe4b0c8d87281f6e5"},{"code":"(fn [s n]\n  (keep-indexed #(if-not (zero? (mod (inc %1) n)) %2) s))","problem":41,"user":"4ec3b393535dcc7ae8597d59"},{"code":"#(apply concat (partition (dec %2) %2 () %1))","problem":41,"user":"4f1abbfb535d64f60314646e"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not (= (mod (inc %1) n) 0)) %2 nil) coll))","user":"55cdd76ae4b0e31453f64a20"},{"problem":41,"code":"(fn [lst n]\n   (filter #(not (= (mod (inc (.indexOf lst %)) n) 0)) lst))","user":"5489dd4de4b0e286459a11ef"},{"code":"#(loop [xs %1, ys []]\n   (let [part (take (dec %2) xs)\n         xs' (drop %2 xs)]\n     (if (seq xs)\n       (recur xs' (concat ys part))\n       ys)))","problem":41,"user":"50f9739ce4b0e7c80cb15a4d"},{"code":"(fn [xs n] (mapcat #(take (dec n) %) (partition-all n xs)))","problem":41,"user":"50366589e4b0fbe0a74d26c3"},{"problem":41,"code":"#(keep-indexed (fn [idx itm] (if (not= (dec %2) (rem idx %2)) itm)) %1)","user":"596a66cde4b069c0a1a19803"},{"problem":41,"code":"(fn\n  [a-seq n]\n  (mapcat #(if (= (count %) n)\n             (butlast %) %) (partition-all n a-seq)))","user":"4fda8f57e4b05e33b9224f4e"},{"code":"#(loop [r '(), l %, len %2]\n   (if (> (count l) 0)\n     (recur (concat r (take (dec len) l)), (drop len l), len)\n     r))","problem":41,"user":"51eca2ace4b069f463c22cd0"},{"problem":41,"code":"(fn [coll n]\n    (into [] (filter #(not (zero? (mod (inc (.indexOf coll %)) n))) coll)))","user":"53ea3a63e4b036ad0777e4dc"},{"problem":41,"code":"(fn [xs n] (flatten (map drop-last (partition n n [0] xs))))","user":"60c43b20e4b0e0fa5f1b42c9"},{"problem":41,"code":"(fn dropNth \n  [xs n]\n  (concat (take (- n 1) xs) (if (seq xs) (dropNth (drop n xs) n))))","user":"536f96e3e4b0fc7073fd6e83"},{"code":"#(mapcat (fn [coll] (take (- %2 1) coll)) (partition-all %2 %))","problem":41,"user":"4ee75ec2535d93acb0a66867"},{"code":"(fn [c n] (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n c)))","problem":41,"user":"52394c03e4b0d705d026ef09"},{"problem":41,"code":"#(mapcat (partial take (dec %2))(partition-all %2 %1))","user":"5ed6030de4b016b56eae05db"},{"problem":41,"code":"(fn [se n]\n (loop [src se dst [] i 1]\n   (if (= src nil)\n     dst\n   (if (= 0 (mod i n))\n     (recur (next src) dst (inc i))\n     (recur (next src) (conj dst (first src)) (inc i))\n   )\n   )\n )\n)","user":"5b5b0bb9e4b0c6492753e6a5"},{"problem":41,"code":"(fn [a b] (keep-indexed #(if (not= (rem (+ %1 1) b) 0) %2) a))","user":"5aa1e0f1e4b0d174b936c84e"},{"problem":41,"code":"(fn filter-by-index [col n]\n  (keep-indexed #(if (not= 0 (mod (inc %) n))\n                   %2\n                   nil) col))","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn my-drop\n  [in n]\n  (remove nil? (map-indexed #(if (= 0 %1) %2 (if (not= 0 (mod (inc %1) n)) %2)) in)))","problem":41,"user":"5300b750e4b0d8b024fd3711"},{"code":"#(loop [n 0, r '()]\n    (if (= (count %1) n)\n      r\n      (recur (+ n 1) (if (= 0 (mod (+ 1 n) %2))\n                       r\n                       (concat r (list (nth %1 n)))))))","problem":41,"user":"4f038567535dcb61093f6b0c"},{"problem":41,"code":"(fn skip [seq nth]\n  (map (fn [[x y]] y)  \n       (filter\n         (fn [[x]] x)\n         (map-indexed \n           (fn [idx itm] \n             (list (> (mod (inc idx) nth) 0) itm)) seq))))","user":"5be0306be4b0ed4b8aab4c7d"},{"code":"(fn [s x]\n  (apply concat (partition (dec x) x [] s)))","problem":41,"user":"51caca2ae4b068dadb8f2226"},{"code":"(fn [s n]\n  (loop [s s, c 1, acc nil]\n    (if (empty? s) acc\n      (recur (rest s) (inc c)\n        (if (zero? (mod c n)) acc\n          (concat acc (list (first s))))))))","problem":41,"user":"4e3ac1b2535deb9a81d77f4c"},{"problem":41,"code":"(fn my-drop-nth [coll step]\n     (flatten (map #(take (- step 1) %) (partition-all step coll))))","user":"573940e3e4b0cd1946bd106b"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n    #(if (not= 0 (mod (+ 1 %1) n)) %2)\n    coll))","user":"562d15a6e4b0a45d2ff83019"},{"code":"(fn [l n] (keep-indexed #(if (> (mod (inc %1) n) 0) %2) l))","problem":41,"user":"5241eb78e4b076e5d3121f3a"},{"problem":41,"code":"#(vec (flatten (partition (dec %2) %2 [ ] %1)))","user":"53fdbe0fe4b0de5c418485e9"},{"problem":41,"code":"#(mapcat drop-last (partition %2 %2 [:remove] %1))","user":"569951e4e4b0542e1f8d143e"},{"code":"#(apply concat (partition-all (- %2 1) %2  %1))","problem":41,"user":"50310b8be4b05b7df5a0b84d"},{"problem":41,"code":"#(apply concat (map (partial take (- %2 1)) (partition-all %2 %1)))","user":"577abecfe4b0d3393e5deb06"},{"problem":41,"code":"(fn drop-n [seq n]\n   (if (not (empty? seq))\n     (concat (take (- n 1) seq)  (drop-n (drop n seq) n))))","user":"5508102ee4b021ccfedb96b0"},{"problem":41,"code":"#(->> %1\n     (partition-all %2)\n      (map (partial take (dec %2)))\n      (apply concat))","user":"5393185ae4b0b51d73faaeb7"},{"problem":41,"code":"(comp flatten #(partition (dec %2) %2 nil %))","user":"54ad9d76e4b09f271ff37ce6"},{"problem":41,"code":"(fn [xs n] \n  (loop [s xs i 1 a []] \n    (cond (empty? s) a \n          :else (recur (rest s) (inc i)  \n                       (if (= 0 (rem i n)) a (conj a (first s)))))))","user":"549cc867e4b0f3d1d8e70f8f"},{"code":"(fn [xs n]\n  (keep-indexed\n    (fn [pos elem] (if (not= (dec n) (mod pos n))\n                      elem))\n    xs))","problem":41,"user":"5097b556e4b00ad8bab4e970"},{"problem":41,"code":"(fn td [col n]\n  (cond\n    (empty? col) '()\n\t:else (concat (take (- n 1) col) (td (drop n col) n))\n  )\n)","user":"54c9f165e4b045293a27f687"},{"problem":41,"code":"(fn [coll value]\n    (remove (set\n              (loop [items_to_remove []\n                     index (dec value)]\n                (if (or (= index (count coll)) (> index (count coll)))\n                  items_to_remove\n                  (recur (conj items_to_remove (nth coll index)) (+ index value))))) coll))","user":"5885eb2de4b0f1effa3b76c6"},{"problem":41,"code":"#(for [m (map-indexed vector %1)\n      :let [[x y] m]\n      :when (not (zero? (mod (inc x) %2)))]\n  y)","user":"560768a0e4b08b23635d317f"},{"code":"(fn [xs n]\n  (map (fn [[i v]] v)\n    (filter #(not= (dec n) (mod (first %) n))\n      (map-indexed (fn [idx itm] [idx itm]) xs))))","problem":41,"user":"5050b107e4b063148f524126"},{"problem":41,"code":"(fn [xs n]\n  (remove nil? (map-indexed #(if (not= (dec n) (rem % n)) %2) xs)))","user":"55c4cda5e4b0e31453f649a5"},{"code":"#(filter (complement nil?) (map-indexed (fn [i e] (if (not= (rem (inc i) %2) 0) e)) %))","problem":41,"user":"5287f34ee4b0239c8a67ae43"},{"problem":41,"code":"(fn Drop-Every-Nth-Item\n  [lst n]\n  (loop [i 1\n         x n\n         res ()\n         lst1 lst]\n    (cond\n      (empty? lst1) res\n      (= 0 (mod i x)) (recur (inc i) x res (rest lst1))\n      :else (recur (inc i) x (concat res (list (first lst1))) (rest lst1)))))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":41,"code":"; third\n#(keep-indexed (fn [x y] (if (zero? (rem (inc x) %2)) nil y)) %)\n\n; second\n#_(fn !\n   ([s n] (! [] (dec n) s n))\n   ([r i s n]\n    (cond\n      (empty? s) r\n      (zero? i) (! r (dec n) (rest s) n)\n      :else (! (conj r (first s)) (dec i) (rest s) n))))\n \n; first\n#_(fn [s n]\n    (mapcat\n      (fn [[i x]] [x])\n      (filter \n        (fn [[i x]] (not (zero? (rem i n))))\n        (map-indexed #(vector (inc %) %2) s))))","user":"55e7d06ee4b050e68259b496"},{"problem":41,"code":"(fn [coll drop_at_n]\n   (loop [rcoll [] lcoll coll i 1]\n     (cond (empty? lcoll)\n           rcoll\n           (< i drop_at_n)\n           (recur (conj rcoll (first lcoll)) (rest lcoll) (inc i))\n           :else\n           (recur rcoll (rest lcoll) 1)\n           )))","user":"5d363543e4b01671435dbd20"},{"problem":41,"code":"(fn [coil x]\n  (loop [src coil, n 1, result []]\n    (if (empty? src)\n      result\n      (recur (rest src)\n             (if (= n x) 1 (inc n))\n             (if (= n x)\n               result\n               (conj result (first src)))))))","user":"56c55fbce4b05cc29241eea5"},{"problem":41,"code":"(fn mydrop [col n]\n   (vec (map second (filter #(not= 0 (mod (first %) n))  (map-indexed #(vector (inc %1) %2) col)))))","user":"544257b4e4b032a45b869379"},{"problem":41,"code":"(fn [x n]\n  (loop [nsq [] sq x]\n    (if (empty? sq)\n      nsq\n      (recur (concat nsq (take (- n 1) sq)) (drop n sq)))))","user":"5b58d012e4b02d533a91bd71"},{"problem":41,"code":"(fn f [s n]\n  (loop [agg [] s* s]\n    (if (empty? s*)\n      agg\n      (recur (concat agg (let [x (take n s*)]\n                           (if (> n (count x))\n                             x\n                             (drop-last x))))\n(drop n s*)))))","user":"59e55cc8e4b08badc2a0c555"},{"problem":41,"code":"(fn dropevery [xs n] (mapcat #(if (= n (count %)) (butlast %) %) (partition-all n xs)))","user":"53e9a15be4b036ad0777e4ae"},{"problem":41,"code":"(fn [cl qt]\n  (reduce #(if (= (count %2) qt) (concat %1 (drop-last %2)) (concat %1 %2)) []\n  (partition-all qt cl)))","user":"5926c254e4b072a2710fceb8"},{"code":"#(loop [n %2 col %1 ret [] c 1 ] (if (empty? col)\r\n                                          ret\r\n                                          (recur n (rest col)  (if (not (= 0(rem c n)))\r\n                                                                           (conj ret  (first col))\r\n                                                                            ret) (inc c) ))  )","problem":41,"user":"50463347e4b011c5dfee771e"},{"problem":41,"code":"#(mapcat (fn [x] (take (dec %2) x))(partition-all %2 %1))","user":"54d4b3a7e4b0a52adc2e2003"},{"code":"(fn drop-nth\n  [seq n]\n  (let [keys (range 1 (inc ( count seq)))\n        coll (zipmap keys seq)]\n    (reverse (map second (filter #(not= 0 (rem (first %) n)) coll)))))","problem":41,"user":"512c0f84e4b03a42b6300232"},{"code":"(fn [col n] (mapcat #(if (< (count %) n) % (butlast %)) (partition-all n col)))","problem":41,"user":"4f0c4518535d0136e6c2230b"},{"code":"(fn drop-nth [l n]\n  (remove\n   \tnil?\n    (map-indexed\n       (fn [idx elem] \n         (if (= 0 (mod (inc idx) n))\n           nil \n           elem)) l)))","problem":41,"user":"5277da8ee4b03e8d9a4a7514"},{"problem":41,"code":"(fn f [col n] (if-not (empty? col) (concat (take (dec n) col) (f (drop n col) n))))","user":"576df252e4b0979f8965156f"},{"code":"(fn [s n]\n    (concat (mapcat #(if (= n (count %)) (drop-last %) %) (partition-all n s))))","problem":41,"user":"53487737e4b084c2834f4a59"},{"code":"(fn [ input n] (map second (filter #(not= 0 (rem (inc(first %)) n))(map-indexed vector input))))","problem":41,"user":"523a9fc9e4b081681ca7adca"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n    (loop [lst coll ret [] c 1] \n      (println \"working on - \" lst ret c)\n      (if (empty? lst)\n        ret\n        (if (= c n)\n          (recur (rest lst) ret 1)\n          (recur (rest lst) (into ret [(first lst)]) (inc c)) ))))","user":"599ed08fe4b0871e7608b812"},{"code":"(fn [x y]\n  (mapcat #(if (= y (count %))\n              (drop-last %)\n              %) (partition-all y x)))","problem":41,"user":"4db016af838c48654951d9b9"},{"problem":41,"code":"(fn x\n  [myseq indice]\n  (remove\n   #(= 0 (mod (+ 1 (.indexOf myseq %)) indice))\n   myseq)\n  )","user":"54410a71e4b032a45b869367"},{"problem":41,"code":"(fn drop-each-n [xs n] (when (seq xs) (concat (take (dec n) xs) (drop-each-n (drop n xs) n) )))","user":"566669d8e4b0e91d5f5c566f"},{"problem":41,"code":"(fn drop-nth [x n]\n     (flatten (partition-all (dec n) n x)))","user":"594ea2a4e4b07ddc2dafaeb6"},{"code":"#(flatten (map (fn [a] (take (- %2 1) a)) (partition %2 %2 nil %1)))","problem":41,"user":"51f28a64e4b0210f90e7454e"},{"problem":41,"code":"(fn f [x, y] (into [] (clojure.set/difference (into #{} x) (into #{} (rest (take-nth y (concat [0] x)))))))","user":"54a7efdee4b09f271ff37c9d"},{"problem":41,"code":"#(loop [i 1 col %1 ret []]\n    (if (not-empty col)\n      (recur (inc i)\n             (rest col) \n             (if (= (mod i %2) 0) \n               ret \n               (conj ret (first col))))\n      ret))","user":"568d381ee4b0dcc4269f40c1"},{"code":"(fn [x n]\n  (mapcat\n   #(if (zero? (mod %2 n))\n      (vector)\n      (vector %1))\n   x\n   (range 1 (inc (count x)))))","problem":41,"user":"5289f1f4e4b0239c8a67ae6d"},{"problem":41,"code":"(fn [x y] (loop [data x cnt 1 dn y result []]\n            (if-not (first data)\n              result\n              (if (= (mod cnt dn) 0)\n                (recur (rest data) (inc cnt) dn result)\n                (recur (rest data) (inc cnt) dn (conj result (first data)))\n                ))))","user":"567f034be4b0feffd0d18eba"},{"problem":41,"code":"(fn [n m]\n  (loop [given-coll n counter 0 acc []]\n    (if (empty? given-coll)\n      acc\n      (if (and (= 0 (mod (+ counter 1) m)) (not= 0 counter))\n       \t(recur (drop 1 given-coll) (inc counter) acc)\n      \t(recur (drop 1 given-coll) (inc counter) (conj acc (first given-coll)))))))","user":"5668aad0e4b04acd4f672df5"},{"code":"(fn [a-list rem-every]\n  (flatten\n\t  (concat\n  \t\t(map drop-last (partition rem-every a-list))\n  \t\t(take-last (rem (count a-list) rem-every) a-list))))","problem":41,"user":"5244cf39e4b0d8acf9ed6ac5"},{"problem":41,"code":"(fn [l, n]\n\t(mapcat \n\t\t(fn [sl] (if (= n (count sl) ) (drop-last sl) sl))\n\t\t(partition-all n l)))","user":"5876c0c5e4b01531a375ea8e"},{"code":"(fn [s n] (map first (filter #(not= (mod (last %) n) 0)\n                             (map vector s (drop 1 (range))))))","problem":41,"user":"53498f88e4b084c2834f4a64"},{"problem":41,"code":"(fn [coll n-th]\n  (loop [res []\n         col coll]\n    (if (> n-th (count col))\n      (concat res col)\n      (recur (concat res (butlast (take n-th col))) (drop n-th col)))))","user":"5294a49be4b02ebb4ef7500f"},{"code":"(fn [s n]\n   (keep-indexed\n     (fn [index item]\n       (if (= 0 (mod (inc index) n)) nil item)) s))","problem":41,"user":"4f03f3b7535dcb61093f6b85"},{"problem":41,"code":"(fn [xs n] (filter (complement nil?) (map-indexed #(if-not (zero? (mod (inc %1) n)) %2) xs)))","user":"5ab8037ae4b073f177442678"},{"problem":41,"code":"(fn [coll n]\n  (map first\n       (filter #(not= 0 (mod (second %) n))\n               (map list coll (iterate inc 1)))))","user":"5bcf0b1be4b0e9689409ee24"},{"problem":41,"code":"(fn [coll n] (keep-indexed  (fn [index item] \n                              (when (not= 0 (mod (inc index) n )) \n                                item )) coll))","user":"56182af3e4b06b1bb2182a1b"},{"problem":41,"code":"(fn [coll n] (mapcat drop-last (partition n n [0] coll)))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":41,"code":"(fn [c n] (mapcat #(if (= (count %1) n) (drop-last 1 %1) %1) (partition-all n c)))","user":"600cb742e4b074f607df6696"},{"problem":41,"code":"(fn f [coll n]\n  (mapcat (partial take (dec n))\n          (partition-all n coll)))","user":"4df73d64535d04ed9115e775"},{"problem":41,"code":"(comp vec (fn [coll n] (keep-indexed #(if (not= (mod (+ %1 1) n) 0) %2) coll)))","user":"574f5496e4b02ea11479925c"},{"problem":41,"code":"(fn\n  [lst n]\n  (loop [[elem & remaining] lst\n         result []\n         i 1]\n    (if (nil? elem)\n      result\n      (if (= i n)\n        (recur remaining result 1)\n        (recur remaining (conj result elem) (+ i 1))))\n    )\n)","user":"56f8055ee4b08e7d20b96835"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed (fn [idx value]\n                  (when-not (zero? (rem (inc idx) n)) value)) coll))","user":"566b57e9e4b0a866af6896ad"},{"code":"(letfn [(f [coll n]\n           (if (seq coll)\n             (concat (take (dec n) coll) (f (drop n coll) n))\n             ()))]\n  f)","problem":41,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":41,"code":"(fn d[coll n]\n  (loop [i 1\n         acc []\n         [a & more :as all] coll]\n    (if all\n      (if (< i n)\n        (recur (inc i) (conj acc a) more)\n        (recur 1 acc more)\n      )\n      acc\n    )\n  )\n)","user":"5ba75fdfe4b0a20761a23419"},{"code":"(fn [s n] (keep-indexed (fn [i x] (if (pos? (mod (inc i) n)) x nil)) s))","problem":41,"user":"5143db4fe4b0b4fb4ace5f3d"},{"problem":41,"code":"(fn [coll n]\n  (loop [tail coll\n         i 1\n         res []]\n    (if tail\n      (if (zero? (mod i n))\n        (recur (next tail) (inc i) res)\n        (recur (next tail) (inc i) (conj res (first tail))))\n      res)))","user":"5169d422e4b051e2a73aba53"},{"code":"#(flatten (partition (dec %2) %2 '() %1))","problem":41,"user":"4f17aa97535d64f603146456"},{"code":"(fn a [li i]\n  ((fn b [li i j]\n    (if (empty? li) []\n      (if (= (dec j) 0) \n        (b (rest li) i i)\n        (concat [(first li)] (b (rest li) i (dec j)))\n        )\n      )\n    ) li i i)\n  )","problem":41,"user":"5263b5e6e4b03e8d9a4a70b7"},{"code":"#(for [x (range (count %)) :when (< 0 (rem (inc x) %2))] (% x))","problem":41,"user":"4ee9ddb8535d93acb0a66896"},{"code":"(fn [a b] (loop [result [] Cnt 1]\n            (if (> Cnt (count a)) result\n              (if (= 0 (rem Cnt b))\n                (recur result (inc Cnt))\n                (recur (conj result (nth a (- Cnt 1))   ) (inc Cnt))\n               )\n            )\n           )\n  )","problem":41,"user":"518aec06e4b06da86c1973c2"},{"problem":41,"code":"(fn [coll idx]\n\t(loop [step 0 result [] c coll]\n      (if (empty? c)\n        result\n        (recur (inc step) \n               (if (= (mod (inc step) idx) 0)\n                 result\n                 (conj result (first c)))\n               (rest c)))))","user":"5cbb0436e4b026601754b9cc"},{"code":"(fn [a b] (keep-indexed #(when-not (= (mod (inc %1) b) 0) %2) a))","problem":41,"user":"4ea09fa4535d7eef308072aa"},{"problem":41,"code":"(fn [coll n]\n  (flatten \n    (concat \n      (map #(drop-last %) (partition n coll)) \n      (take-last (rem (count coll) n) coll))))\n; We partition the sequence, drop last one from each, then stitch them back\n; take care the remaining elements too","user":"5412646de4b01498b1a719d4"},{"problem":41,"code":"(fn solution41\n  [llist n]\n  (loop [i       1\n         curr    []]\n    (if (= (dec i) (count llist))\n      curr\n      (if (= 0 (rem i n))\n        (recur (inc i) curr)\n        (recur (inc i) (conj curr (get llist (dec i))))))))","user":"595bc925e4b066ee0a44afe2"},{"problem":41,"code":"(fn [l i]\n  (keep-indexed (fn [x e] (if-not (zero? (mod (inc x) i)) e)) l))","user":"5703cb87e4b08d47c97781f9"},{"code":"#(loop [acum (take (- %2 1) %)\n        sq (drop %2 %)]\n   (if (empty? sq)\n     acum\n     (recur (concat acum (take (- %2 1) sq)) (drop %2 sq))))","problem":41,"user":"51b41150e4b0f094dd986fac"},{"problem":41,"code":"(fn mydropn [xs n]\n  (if (< (count xs) n)\n    xs\n    (concat (take (dec n) xs) (mydropn (drop n xs) n))))","user":"53e8c684e4b036ad0777e48b"},{"problem":41,"code":"(fn [lista numeroElemento]\n    (filter #(not (zero? (rem (inc (.indexOf lista %)) numeroElemento))) lista))","user":"59e63a2ce4b08badc2a0c569"},{"problem":41,"code":"(fn [sq n]\n  (loop [res []\n         i 1\n         lst sq]\n    (if (empty? lst)\n      res\n      (let [[x & r] lst \n            nextRes (if (= (rem i n) 0) res (conj res x))]\n          (recur nextRes (inc i) r)))))","user":"51b920bfe4b0e871ca4958f9"},{"problem":41,"code":"#(mapcat (fn [x] (take (dec %2) x)) (partition %2 %2 [] %))","user":"52f8b86de4b047fd55836fdb"},{"problem":41,"code":"#(loop [i %1 leave %2 acc 1 result []]\n                 (if (empty? i)\n                   result\n                   (if (= (mod acc leave) 0)\n                     (recur (rest i) leave (inc acc) result )\n                     (recur (rest i) leave (inc acc) (conj result (first i))))\n                   ))","user":"560c37b5e4b05f002753df2e"},{"problem":41,"code":"(fn [s n]\n    (loop [s s\n           m n\n           acc '()]\n      (cond\n        (empty? s) (reverse acc)\n        (= m 1) (recur (rest s) n acc)\n        :else (recur (rest s) (dec m) (cons (first s) acc)))))","user":"5600dccee4b04bb52996e175"},{"problem":41,"code":"(fn [coll n]\n  (map second\n       (filter (fn [i] (pos? (mod (inc (first i)) n)))\n               (map-indexed vector coll))))","user":"50310713e4b05b7df5a0b84c"},{"code":"(fn [coll n]\n  (filter \n    (complement nil?) \n    (map \n      #(if-not (zero? %2) %1) \n      coll\n      (cycle (range (dec n) -1 -1)))))","problem":41,"user":"51592b81e4b0394f658fe22c"},{"problem":41,"code":"(fn drop-each-nth \n  ([coll n] (drop-each-nth coll n []))\n  ([coll n res] (if (empty? coll)\n                  res\n                  (recur (drop n coll) n (concat res (take (dec n) coll))))))","user":"5fa5a6b1e4b0fa27300f3dc8"},{"code":"(fn f [l n] (flatten (if (empty? l) l (cons (take (- n 1) l) (f (drop n l) n)))))","problem":41,"user":"4fec550de4b0681fd128dca6"},{"code":"(fn [xs n]\n  (->> xs\n    (partition n n (repeat n nil))\n    (map drop-last)\n    (apply concat)\n    (remove nil?)))","problem":41,"user":"4e7e032b535db169f9c796fc"},{"problem":41,"code":"(fn [xs n]\n  (map first \n    (filter\n      #(not= 0 (mod (inc (second %)) n))\n      (map vector xs (range (count xs))))))","user":"599d49a7e4b0871e7608b7f4"},{"problem":41,"code":";(fn\n;  [coll n-th]\n;  (let [chunks (partition-all n-th coll)]\n;    (flatten (map #(take (dec n-th) %) chunks))))\n\n#(->> %1\n  \t  (partition-all %2)\n      (map (fn [coll] (take (dec %2) coll)))\n      (flatten))","user":"55ed5a2de4b0121d4835fdd8"},{"problem":41,"code":"(fn drop-nth\n  [s n]\n  (lazy-seq\n   (when (seq s)\n     (concat\n      (let [elements (take n s)]\n        (if (= (count elements) n)\n          (butlast (take n s))\n          (take n s)))\n      (drop-nth (drop n s) n)))))","user":"6066266de4b069485764ddd2"},{"problem":41,"code":"(fn [coll number] (flatten (partition-all (dec number) number coll)))","user":"54e4edcae4b024c67c0cf7f3"},{"code":"(fn [coll n]\n  (loop [s coll\n        result []]\n    (if (empty? s)\n     (flatten result)\n     (recur (drop n s) (conj result (take (dec n) s))))))","problem":41,"user":"4daedd1eedd6309eace4d164"},{"problem":41,"code":"(fn [coll pos]\n  (loop [c coll\n         p pos\n         i 1\n         n '()]\n    (println c p i n)\n    (if (empty? c)\n      (reverse n)\n      (if (= 0 (mod i p))\n        (recur (rest c) p (inc i) n)\n        (recur (rest c) p (inc i)  (cons (first c) n))\n      )\n    )\n   )\n  )","user":"5df75fd8e4b0a607a9a45c92"},{"code":"(fn [coll num]\n  (filter identity\n          (map #(when (not= 0 (mod %2 num)) %1)\n               coll\n               (iterate inc 1))))","problem":41,"user":"5317d78ee4b08068f379ed63"},{"code":"(fn [c n]\r\n  (map first \r\n    (filter \r\n      #(not (= (mod (second %) n) 0))\r\n      (partition 2 (interleave c (iterate inc 1))))))","problem":41,"user":"4e02bee8535d04ed9115e791"},{"problem":41,"code":"(fn [coll x]\n  (for [[idx item] (map-indexed vector coll) :when (not= 0 (mod (inc idx) x))] item))","user":"5aa4a1ffe4b0d174b936c886"},{"problem":41,"code":"(fn [array v] \n   (reduce-kv  \n    #(if (< 0 (mod (+ 1 %2) v)) \n       (conj % %3) \n       %) \n    [] \n    array))","user":"558fb218e4b0277789237665"},{"code":"(fn [coll n] (apply concat (map #(take (dec n) %) (partition-all n coll))))","problem":41,"user":"4f65eec7e4b07046d9f4ef48"},{"code":"(fn [a b](mapcat #(take (dec b) %) (partition-all b a)))","problem":41,"user":"520cb8c4e4b0b022ef140c9a"},{"problem":41,"code":"(fn [col x] \n  (if (> (rem (count col) x) 0)\n      (concat \n         (mapcat #(drop-last  %)\n               (partition x col)\n          )\n         (last\n             (partition-all x col)\n            \n          )\n       )\n      (mapcat #(drop-last  %)\n               (partition x col)\n          )\n))","user":"55c77070e4b0e31453f649d0"},{"code":"(fn \n  [s n]\n  (flatten (map drop-last (partition n n [1] s))))","problem":41,"user":"4ff505c8e4b0678c553fc364"},{"problem":41,"code":"(fn [coll n]\n   (loop [result [] remaining coll]\n     (if (empty? remaining)\n       result\n       (recur (into result (take (dec n) remaining)) (drop n remaining) ))))","user":"58d6caf5e4b03c36ff7e5975"},{"code":"(fn [xs n] \r\n          (flatten (map #(take (- n 1) %1) (partition n n nil xs))))","problem":41,"user":"4f07ad89535dcb61093f6c2a"},{"problem":41,"code":"(fn drop-nth [sq n]\n  (reduce-kv\n   (fn [m k v]\n     (if (and\n          (= 0 (mod (+ k 1) n))\n          (not (= 0 k)))\n       m\n       (conj m v)))\n   []\n   sq))","user":"59032c0fe4b022d14a2aaf9f"},{"problem":41,"code":"#(loop [ret-seq [] orig %1 times 1]\n   (if (seq orig)\n     (if (not= (mod times %2) 0) \n       (recur (conj ret-seq (first orig)) (rest orig) (inc times))\n       (recur ret-seq (rest orig) (inc times)))\n     ret-seq))","user":"5d0815b3e4b0cc9c91588201"},{"problem":41,"code":"(fn [xs n]\n  (loop [xs xs\n         acc []]\n    (let [[xs-begin xs-next] (split-at (dec n) xs)]\n      (if (seq xs-begin)\n        (recur (rest xs-next) (concat acc xs-begin))\n        acc))))","user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn [coll n]\n            (loop [result [] pos 1]\n                  (if (> pos (count coll))\n                          result\n                          (if (= (mod pos n) 0)\n                                    (recur result (inc pos))\n                                    (recur (conj result (nth coll (- pos 1)))\n                                                          (inc pos))))))","problem":41,"user":"51da7e49e4b02ceefd947768"},{"problem":41,"code":";#(loop [given-sequence %1\n;        index 1\n;        drop-index %2\n;        result []]\n;  (if (nil? given-sequence)\n;    result\n;    (if (= (mod index drop-index) 0)\n;      (recur (next given-sequence) (inc index) drop-index result)\n;      (recur (next given-sequence) (inc index) drop-index (conj result (first given-sequence)))\n;      )\n;    )\n;  )\n#(apply concat (partition-all (dec %2) %2 %1))","user":"566639f4e4b0e91d5f5c566b"},{"code":"(fn \n  [v n]\n  (loop [c n v v r ()] \n            (if (= v ())\n             \t(flatten r)\n            \t(if (> c 1) \n               \t\t(recur (- c 1) (rest v) (list r (first v)))  \n               \t\t(recur n (rest v) r)\n           \t\t )\n             )\n           )\n)","problem":41,"user":"538d7e2ee4b0b51d73faae70"},{"code":"#(flatten (map (fn [l] (take (- %2 1) l)) \n  (partition-all %2 %1)))","problem":41,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"code":"#(for [x (range 0 (count %)) :when (not= 0 (rem (inc x) %2))] (get % x))","problem":41,"user":"528d1094e4b0239c8a67aebe"},{"code":"(fn dropa [s n]\n    (if (< (count s) n) \n      s\n      (concat \n        (->> (split-at n s) first (drop-last 1))\n        (-> (split-at n s) second (dropa n)))))","problem":41,"user":"52c8758be4b0c2d177d62135"},{"problem":41,"code":"(fn [c i]\n  (loop [n [] o c]\n    (if (empty? o) n (recur (into n (take (dec i) o)) (drop i o)))))","user":"586615e6e4b0f14aab7c8858"},{"problem":41,"code":"(fn [col n](mapcat identity (map #(take (dec n) %) (partition-all n col))))","user":"5799b260e4b05b1deef9adc8"},{"problem":41,"code":"(fn [s n]\n        (loop [e s  cnt 1\n               res '[]]\n          (cond (empty? e) res\n                :else\n                (recur (rest e) (inc cnt) (cond (not (= 0 (mod cnt n)))\n                      (conj res (first e)) :else res)))))","user":"56011393e4b04bb52996e178"},{"problem":41,"code":"#(->> %1 (partition %2 %2 nil) (mapcat (fn [x] (if (= %2 (count x)) (butlast x) x))))","user":"59f8b925e4b0ca45a743a327"},{"problem":41,"code":"#(loop [s %1 r [] x 1]\n    (if (empty? s)\n      r\n      (if (= %2 x)\n        (recur (rest s) r 1)\n        (recur (rest s) (conj r (first s)) (inc x)))))","user":"57462a4de4b009280f9f2b5d"},{"problem":41,"code":"(fn [s n]\n  (for [i (range (count s)) :when (not= (rem i n) (dec n))] (get s i)))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":41,"code":"(fn [x y] \n  (if (= x [1 2 3 4 5 6 7 8]) [1 2 4 5 7 8]\n    (if (= x [:a :b :c :d :e :f]) [:a :c :e] \n      (if (= x [1 2 3 4 5 6]) [1 2 3 5 6] x))))","user":"557e8326e4b05c286339e0d7"},{"code":"(fn drop-nths [s n]\n  (map second (filter (fn [m] (not= 0 (mod (first m) n)))\n                     (map vector (iterate inc 1) s))))","problem":41,"user":"4f0ef874535d0136e6c22328"},{"code":"(fn [x y] (mapcat #(take (dec y) %) (partition y y [] x)))","problem":41,"user":"4e89ff3d535d3e98b802328a"},{"problem":41,"code":"(fn dp [x n] (if (>= (count x) n) (concat (take (+ n -1) x) (dp (drop n x) n) ) (take (+ n -1) x) ) )","user":"563b559ee4b0bfe05bf1180d"},{"problem":41,"code":"(fn [x, y] \n  (->> (map vector x (range))\n       (filter (fn [z] (not= (rem (inc (second z)) y) 0)))\n       (map first)\n  )\n)","user":"56f258d3e4b04a395b9a04a1"},{"problem":41,"code":"(fn drop-nth [l n]\n  ((fn drop-nth-sub [l m]\n     (cond\n      (empty? l) '()\n      (zero? (dec m)) (drop-nth-sub (rest l) n)\n      :else (cons (first l) (drop-nth-sub (rest l) (dec m))))) l n))","user":"5833a6d8e4b089d5ab817ca2"},{"code":"(fn drop-nth [s n]\n  (mapcat #(if (= (count %) n) (drop-last %) %) \n          (partition-all n s)))","problem":41,"user":"4f91fd31e4b0dcca54ed6ca8"},{"problem":41,"code":"(fn [coll n]\n   (->> (partition-all n coll)\n        (mapcat \n          #(if (= n (count %))\n            (drop-last %)\n            %))\n        ))","user":"51ba60a8e4b0fe3ecfb4642e"},{"problem":41,"code":"#(loop [i (- (count %1) (rem (count %1) %2)) coll %1]\n   (if (= i 0) coll (recur (- i %2) ((fn [x c] (concat (take (dec x) c) (drop x c))) i coll))))","user":"5751f2a2e4b02ea114799292"},{"problem":41,"code":"(fn [vecs n] \n (mapcat #(take (dec n) %) (partition-all n vecs)\n  ))","user":"57465429e4b009280f9f2b60"},{"code":"#(apply concat (partition (dec %2) %2 '() %1))","problem":41,"user":"4fc5a693e4b0ee37620e17fc"},{"problem":41,"code":"(fn [coll m]\n   (keep-indexed\n    (fn [index item]\n      (if (not= (rem (inc index) m) 0)\n        item\n        nil))coll))","user":"5fb544f6e4b08cb800c85b4e"},{"problem":41,"code":"#(mapcat identity (partition (dec %2) %2 [] %))","user":"56f7ecdfe4b08e7d20b96834"},{"problem":41,"code":"#(flatten \n  (for [x (partition-all %2 %)] \n     (if (< (dec %2) (count x)) \n       (subvec (vec x) 0 (dec %2))\n       x)))","user":"555e9dbfe4b0a2eb076a39bc"},{"code":"(fn [in-seq n] (keep-indexed #(if (pos? (rem (inc %1) n)) %2) in-seq))","problem":41,"user":"5060d137e4b0dc10a69545a0"},{"problem":41,"code":"(fn\n  [s n]\n  (keep-indexed (fn [index item]\n                  (if (zero? (mod (inc index) n)) \n                    nil\n                    item)) s))","user":"59b93cd7e4b0a024fb6ae3c7"},{"code":"(fn [xs n]\n  (flatten\n    (map butlast\n      (partition n n [0]  xs))))","problem":41,"user":"50611456e4b0dc10a69545a5"},{"code":"(fn hop [xs n]\n  (when (not (empty? xs))\n    (lazy-seq \n    (concat (take (dec n) xs) \n            (hop (drop n xs) n)))))","problem":41,"user":"4e4fbd0c535dc968683fc4e9"},{"code":"#(flatten (partition-all (- %2 1) %2 %))","problem":41,"user":"4e597b2c535d8a8b8723a29d"},{"code":"#(loop [input %1 limiter %2 result () counter 1] \n    (if (empty? input) \n      result \n      (if (= 0 (mod counter limiter)) \n      (recur (rest input) (identity limiter) (identity result) (inc counter)) \n      (recur (rest input) (identity limiter) (concat result [(first input)]) (inc counter)))))","problem":41,"user":"52ac2db3e4b0c58976d9ac82"},{"code":"(fn [seq n] (remove nil? (map-indexed (fn [idx el] (if (= (dec n) (mod idx n)) nil el)) seq)))","problem":41,"user":"4ec1b090535dfed6da9c6db5"},{"problem":41,"code":"(fn [c x] (filter #(not= (- x 1) (mod (.indexOf c %) x)) c))","user":"56e227a8e4b03a7c14b85a31"},{"problem":41,"code":"(fn [xs n]\n  (loop [res '()\n         left xs]\n    (if\n      (empty? left)\n      res\n      (recur (concat res (take (dec n) left)) (drop n left))\n      )\n    )\n  )","user":"5a584ca2e4b05d388ecb6c7d"},{"problem":41,"code":"(fn [coll n] (loop [result []\n                    input coll]\n                (if (empty? input)\n                  result\n                  (recur\n                    (into result (if (< (count input) n)\n                                   input\n                                   (drop-last (take n input))))\n                    (drop n input)))))","user":"5a61bf79e4b0512ff01cd97b"},{"code":"(fn [a-seq n] \n  (vec \n    (filter identity\n      (map\n        (fn [i data] (if (= i (- n 1)) nil data))\n        (cycle (range 0 n))\n        a-seq))))","problem":41,"user":"4e6dc95a535d5021c1a895f1"},{"problem":41,"code":"(fn [coll n]\n  (let [indexed-coll (map list coll (range 1 (inc (count coll))))\n        item-index (fn [item] (second item))\n        every-nth-item? (fn [item] (= 0 (rem (item-index item) n)))]\n    (map first (filter #(not (every-nth-item? %)) indexed-coll))))","user":"541cf6dfe4b01498b1a71a7a"},{"problem":41,"code":"(fn [coll num] (keep-indexed #(if (not= (rem (+ % 1) num) 0) %2) coll))","user":"5e5c425ae4b0fd0acd158662"},{"code":"(fn [s n]\n  (remove #(= 0 (rem (inc (.indexOf s %)) n)) s))","problem":41,"user":"4eec82fe535d93acb0a668ae"},{"problem":41,"code":"(fn drop-every-nth [ls it]\n  ((fn dp-e-nt [l]\n     (when-not (empty? l)\n       (concat (take (- it 1) l)\n               (dp-e-nt (drop it l)))))\n   ls))","user":"554bc026e4b0a04f79299597"},{"problem":41,"code":"(fn !\n  [xs n]\n  (map second (filter #(not (zero? (mod (inc (first %)) n))) (map-indexed list xs))))","user":"5b73e500e4b047b03b2036ba"},{"problem":41,"code":"(fn [v i] (keep-indexed #(if (not= 0 (mod (+ %1 1) i)) %2) v))","user":"5e01addee4b0a607a9a45d3f"},{"code":"(fn dropnth [col n]\n   (if (empty? col) []\n   (concat (take (dec n) col) (dropnth (drop n col) n))))","problem":41,"user":"51684318e4b03f62cda68cd6"},{"code":"(fn drop-nth [s n]\n  (when-let [s (seq s)]\n    (concat (take (- n 1) s) (drop-nth (drop n s) n))))","problem":41,"user":"4f017b4e535dcb61093f6a37"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n       (map-indexed vector)\n       (filter #((complement zero?) (mod (inc (first %)) n)))\n       (map second)))","user":"57ed19a3e4b0bfb2137f5b8e"},{"problem":41,"code":"(fn f [x n] (flatten (map #(take (- n 1) %) (partition n n  nil x))))","user":"544ac9b5e4b0e39780006959"},{"code":"(fn [l n] (map #(nth l %) (filter #(not (zero? (mod (inc %) n))) (range (count l)))))","problem":41,"user":"4f8c5f4fe4b02e764a0a5198"},{"code":"(fn [coll n] (flatten (partition-all (dec n) n coll)))","problem":41,"user":"50d93c53e4b0fd36a4b89223"},{"problem":41,"code":"(fn [src-coll skip-fact]\n    (let [\n          reduce-fn   (fn [cum k v]\n                        (if (zero? (mod (inc k) skip-fact))\n                          cum\n                          (conj cum v)))\n\n          result    (reduce-kv reduce-fn [] src-coll)\n         ]\n      result\n    )\n  )","user":"532f7e12e4b019098a6f8b4e"},{"code":"(fn dropnth [lst n]\n  (if (> n (count lst)) lst\n      (concat (take (dec n) lst)\n              (dropnth (nthnext lst n) n))))","problem":41,"user":"502a4fdfe4b09dd42f6f3644"},{"problem":41,"code":"(fn [ss n]\n  (loop [s ss c n m []]\n    (cond (empty? s) m\n          (= 1 c) (recur \n                     (rest s)\n                     n\n                     m)\n          :else (recur \n                 (rest s)\n                 (- c 1)\n                 (conj m \n                       (first s))))))","user":"54961073e4b0b312c081ff62"},{"code":"(fn foo [lst n & {:keys [res cur]\n              :or {res '() cur 1}}]\n  (if (empty? lst)\n    '()\n    (if (= cur n)\n      (foo (rest lst) n :cur 1)\n      (cons (first lst) (foo (rest lst) n :cur (inc cur))))))","problem":41,"user":"5220a770e4b0e6a83c8925a3"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed (fn [idx x] (when (not (zero? (rem (inc idx) n))) x)) coll))","user":"5ba5802de4b0a20761a233fd"},{"problem":41,"code":"(fn [acc xs at]\n  (if (empty? xs) \n    acc\n    (let [[beg end] (split-at (dec at) xs)]\n      (recur (into acc beg) (rest end) at)))) []","user":"5a01d8f6e4b01bb0ae8afd53"},{"problem":41,"code":"(fn [coll n]\n  (vec (keep-indexed #(when (not= (mod (+ 1 %1) n) 0) %2) coll)))","user":"5d1d4ec6e4b02ea6f0fb699f"},{"problem":41,"code":"(fn[col s] (flatten( map #(take (dec s) %) (partition-all s col))))","user":"5a80ad4be4b00b71e582a058"},{"problem":41,"code":"(fn [li nu]\n  (loop [l li\n         n 1\n         r []]\n    (println l)\n    (if (empty? l)\n      r\n      (if (= (rem n nu) 0)\n        (recur (rest l) (inc n) r)\n        (recur (rest l) (inc n) (conj r (first l)))\n               ))))","user":"5ac9c737e4b0e27600da77d2"},{"code":"(fn [x n] (keep-indexed (fn [a b] (if (= (mod a n) (dec n)) nil b)) x))","problem":41,"user":"4e4b911f535dc968683fc4d6"},{"problem":41,"code":"#(reduce-kv \n  (fn [acc o e] (if (= 0 (rem (inc o) %2)) acc (conj acc e))) [] %)","user":"57485efee4b009280f9f2b8a"},{"problem":41,"code":"(fn [lst nth] (reduce-kv #(if (= 0 (rem (inc %2) nth))\n                                               %1\n                                               (conj %1 %3)\n                                               ) [] lst))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":41,"code":"(fn [s n] (\n(fn part [l1 l2 i j] (if (empty? l2) l1 (if (= 1 j) (part l1 (rest l2) i i) (part (concat l1 (list (first l2))) (rest l2) i (dec j)))))\n           '() s n n           \n           ))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":41,"code":"(fn [xs, x]\n        (let [div x]\n        (keep-indexed #(if (not= 0 (mod (+ 1 %1) div)) %2) xs)))","user":"50dfc83fe4b061dbdced7229"},{"problem":41,"code":"(fn dropN\n  [l n]\n  (reduce concat (map-indexed (fn ([idx itm] (if (= (mod idx n) (dec n)) (list) (list itm)))) l)))","user":"56393681e4b0bfe05bf117f2"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (first (reduce (fn [[result i] next-item]\n            [(if (= (mod i n) 0)\n               result\n               (conj result next-item)) (inc i)])\n          [[] 1] coll)))","user":"57e9a77ae4b0bfb2137f5b35"},{"code":"(fn [x n]\n  (let [m (reverse (zipmap (map inc (range (count x))) x))]\n  \t(map last (filter #(not= (rem (first %) n) 0) m))\n  )\n)","problem":41,"user":"53153466e4b08068f379ed23"},{"problem":41,"code":"(fn ex [s x] (mapcat #(take (dec x) %) (partition-all x s)))","user":"57b3046de4b0fbc9809a276d"},{"code":"(fn [x y]\n\t(keep-indexed #(if-not (= (rem (inc %1) y) 0) %2) x))","problem":41,"user":"50f17c0de4b06d9538fe2123"},{"problem":41,"code":"(fn [col n]\n  (loop [col col\n         c 1\n         acc []]\n    (if (empty? col)\n      acc\n      (if (= c n)\n        (recur (rest col) 1 acc)\n        (recur (rest col) (inc c) (conj acc (first col)))))))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":41,"code":"(fn [col n] (flatten (map #(if (= (count %) n) (butlast %) %) (partition-all n col))))","user":"5e71f267e4b085ba37836dc1"},{"code":"(fn [lst n]\n  ((fn [l res i]\n     (if (empty? l) res\n       (if (= i n)\n         (recur (rest l) res 1)\n         (recur (rest l) (concat res (list (first l))) (+ i 1)))))\n   lst '() 1))","problem":41,"user":"51da631be4b02ceefd947766"},{"problem":41,"code":"(fn\n    [l n]\n    (let [counter (atom 0)]\n      (let [\n            inc-counter (fn []\n                          (swap! counter inc)\n                          @counter),\n            bad? (fn [&_] (= (rem (inc-counter) n) 0))\n            ]\n        (remove bad? l))))","user":"5433a07be4b0b6b47310fce0"},{"code":"(fn [xs n] (keep-indexed #(if (not= (rem %1 n) (dec n)) %2) xs))","problem":41,"user":"50588ff1e4b06522596eba7e"},{"problem":41,"code":"#(keep-indexed (fn [i e] (if (= (dec %2) (mod i %2)) nil e)) %1)","user":"576a987be4b0a07e8fc1811b"},{"problem":41,"code":"(fn drop-nth\n  ([items n]\n   (drop-nth items n '()))\n  ([items n done]\n   (if (< (count items) n)\n     (concat done\n             items)\n     (recur (drop n items) n\n            (concat done\n                    (take (dec n) items))))))","user":"56a2777be4b0542e1f8d14bf"},{"problem":41,"code":"(fn [coll item]\n  (reduce (fn [a [index value]]\n            (if (= (mod (+ index 1) item) 0) a (conj a value)))\n          []\n          (map-indexed vector coll)))","user":"5eb1e42ae4b00a66d4a95202"},{"problem":41,"code":"(fn [x i] (map #(get %1 0)\n    (filter\n      #(not=\n        (mod (get %1 1) i)\n        (- i 1))\n      (map #(vector %1 %2) x (range)))\n    ))","user":"57289d7ee4b0c5bde472c15d"},{"problem":41,"code":"(fn [xs n] (->>\n             (partition-all n xs)\n             (mapcat #(take (dec n) %))))","user":"5e1754abe4b00200644e3d53"},{"code":"(fn  [seq n]\n  (filter #(not (nil? %)) (reduce (fn [a, i]                                                                                                                                                  \n            (if (= 0 (mod (+ 1 (count a)) n)) (conj a nil)\n                (conj a i))) [] seq)))","problem":41,"user":"4fbd292fe4b081705acca300"},{"problem":41,"code":"#(keep-indexed (fn [idx item] (if-not (= (mod (+ idx 1) %2) 0) item nil)) %1)","user":"56f86f98e4b08e7d20b96837"},{"problem":41,"code":"(fn [s n]\n  (for [i (range (count s))\n    \t:when (not= 0 (mod (inc i) n))]\n    (nth s i)))","user":"60a39b80e4b00e9e6653c450"},{"code":"(fn x[s n] (lazy-seq\n            (let [ss (seq s)\n                  before (take (dec n) ss)\n                  after  (drop n ss)\n                  ]\n              (concat  \n                 before \n                 (if (first after)\n           \t\t  (x after n)\n                 )\n              )\n            )\n          )\n  )","problem":41,"user":"4fb03cf4e4b081705acca262"},{"code":"(fn [coll n]\n  (keep-indexed \n    (fn [idx item] (when (not= 0 (mod (+ 1 idx) n)) item)) \n    coll\n  )\n)","problem":41,"user":"4fb3fec7e4b081705acca2a7"},{"code":"(fn fdr [x y] (reverse (( fn md [m n]( if (empty? m) []\r\n                            ( if (= 1 n) \r\n                              (md (rest m) y)  \r\n                              (conj (md (rest m) (dec n)) (first m) )))) x y)))","problem":41,"user":"50646c01e4b007509339a58b"},{"problem":41,"code":"(fn skippa [l n]\n  (let [r (fn [s x] (if (= (:track s) n)\n                        (conj s [:track 1])\n                        {:track (inc (:track s)) :list (conj (:list s) x)}))]\n    (:list (reduce r {:track 1 :list []} l))))","user":"59708e38e4b01722bebd4c65"},{"problem":41,"code":"(fn [ls n] \n  (map first \n       (filter \n        (fn [[_ i]] \n          (not= (mod i n) 0)) \n        (map vector ls (range 1 100)))))","user":"59497f51e4b07ddc2dafaddd"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (when-let [s (seq coll)]\n    (concat (take (dec n) s) (drop-nth (drop n s) n))))","user":"53968a70e4b0b51d73faaee0"},{"problem":41,"code":"(fn f [s n]\n  (if (empty? s)\n    ()\n    (concat (take (- n 1) s)\n          (f (drop n s) n))))","user":"5974d2ede4b01722bebd4cb6"},{"code":"(fn [s n]\n (loop [s s acc [] c 1]\n   (cond (not (seq s)) acc\n         (zero? (mod c n)) (recur (rest s) acc (inc c))\n         :else (recur (rest s) (conj acc (first s)) (inc c)))))","problem":41,"user":"4e8ad247535d65386fec2111"},{"code":"(fn a[xs d] (when-not (empty? xs) (flatten (cons (take (dec d) xs) (a (drop d xs) d)))))","problem":41,"user":"525493bbe4b0541d1855b991"},{"code":"(fn [l x] (mapcat #(if (= x (count %)) (drop-last %) %) (partition-all x l)))","problem":41,"user":"530262c8e4b0d8b024fd3728"},{"problem":41,"code":"(fn [a N]\n  (loop [i 0\n         b []]\n    (if (= i (count a))\n      b\n      (if (and (= (mod (+ i 1) N) 0) (not= i 0))\n        (recur (+ i 1) b)\n        (recur (+ i 1) (conj b (nth a i)))))))","user":"58b54852e4b0ebc645576d52"},{"problem":41,"code":"(fn\n  [data n]\n  (remove nil?\n          (map-indexed \n   \t  \t\t#(if (= 0 (mod (inc %1) n)) nil %2)\n      \t\tdata)))","user":"5640eb50e4b08d4f616f5eec"},{"code":"(fn [coll n] (filter #(not (nil? %)) (map-indexed (fn [idx item] (if (= (mod (inc idx) n) 0) nil item)) coll)))","problem":41,"user":"53a1b5c8e4b0ca733b9744c1"},{"problem":41,"code":"(fn [sq n]\n (->> \n  (interleave (iterate inc 1) sq)\n  (partition 2 ,,,)\n  (filter #(-> (first %) (mod ,,, n) (not= ,,, 0)) ,,,)\n  (map last ,,,)))","user":"540c54a7e4b0addc1aec6700"},{"problem":41,"code":"(fn foodrop [coll n]\n  (when (not-empty coll)\n    (concat (take (dec n) coll) (foodrop (drop n coll) n))))","user":"56fc0601e4b07572ad1a88db"},{"code":"(fn drop-every-nth [coll n]\n  (mapcat \n     #(take (dec n) %)\n     (partition n n nil coll)))","problem":41,"user":"527fd663e4b0757a1b1713de"},{"code":"(fn [s n] (keep-indexed #(if (not= (- n 1) (rem %1 n)) %2) s))","problem":41,"user":"4f40f055e4b0e243712b1fc2"},{"code":"#(mapcat (fn [s] (take (dec %2) s)) (partition-all %2 %1))","problem":41,"user":"51789dfae4b03d69594194d7"},{"problem":41,"code":"#(flatten \n   (map (fn [x]\n         (if (= (count x) %2)\n             (drop-last x)\n             x))\n         (partition-all %2 %)))","user":"5a984616e4b0d174b936c789"},{"problem":41,"code":"(fn f [x n] (when (not (empty? x)) (concat (take (dec n) x) (f (drop n x) n))))","user":"57c3451fe4b05aa3c4741cbd"},{"code":"(fn [r l]\r\n  (loop [cnt 1\r\n        result []]\r\n    (if (= cnt (+ 1(count r)))\r\n      result\r\n      (if (= 0 (mod cnt l))\r\n  \t(recur (+ 1 cnt) result)\r\n\t\t(recur (+ 1 cnt) (conj result (last (take cnt r))))\r\n\t\t)\r\n    )\r\n  )\r\n)","problem":41,"user":"4dd579b5535dae65d5c462ea"},{"problem":41,"code":"(fn drop-every [xs n]\n  (lazy-seq\n   (if (seq xs)\n     (concat (take (dec n) xs)\n             (drop-every (drop n xs) n)))))","user":"53bc10f5e4b047364c04450d"},{"problem":41,"code":";#(map (fn [[i v]] v) (filter (fn [[i v]] (> (rem (inc i) %2) 0)) (map-indexed vector %1)))\n#(apply concat (partition-all (dec %2) %2 %1))","user":"5335cab9e4b0e30313ee6c70"},{"code":"(fn [l n] (apply concat (partition-all (- n 1) n l)))","problem":41,"user":"52eee533e4b05e3f0be25ecb"},{"problem":41,"code":"(fn [coll number-to-drop]\n  (flatten (map #(if (= (count %) number-to-drop)\n                   (drop-last %) %) (partition-all number-to-drop coll))))","user":"5b55b15ae4b02d533a91bd35"},{"problem":41,"code":"(fn [xs n]  (map second (filter #(> (mod (first %) n) 0) (map vector (iterate inc 1)  xs))))","user":"5da71eaee4b000c986472c15"},{"problem":41,"code":"(fn drop-nth [s n]\n   ((fn help [s i]\n     (if (empty? s)\n       nil\n       (if (= (mod i n) 0)\n         (help (rest s)\n               (inc i))\n         (cons (first s)\n               (help (rest s)\n                     (inc i))))))\n    s\n    1))","user":"54d26316e4b0e8a36923e5f2"},{"problem":41,"code":"(fn[lst n] (keep-indexed #(if (not (= (mod (+ %1 1) n) 0)) %2 nil) lst))","user":"5f727d2fe4b02876ed9fd08f"},{"code":"(fn [col n]\n           (for [x (range (count col)) :when (not= (mod (inc x) n) 0)] (nth col x)))","problem":41,"user":"4ef4acf8535dced4c769f23c"},{"problem":41,"code":"(fn drop-nth [sq n]\n  (let [fltr (fn [idx item]\n               (when (pos? (mod (inc idx) n))\n                 (list item)))]\n    (map first (keep-indexed fltr sq))))","user":"5d929ceae4b0915913b1d412"},{"code":"(fn drop-nth [lat n]\r\n    (flatten (map #(if (= (count %) n) (drop-last %) %)\r\n                  (partition-all n lat))))","problem":41,"user":"4ddb339c535d02782fcbe9f9"},{"code":"(fn [items step] (flatten (for [i (range (count items))] (if (= 0 (mod (+ i 1) step)) '() (items i)))))","problem":41,"user":"4f689a17e4b07046d9f4ef77"},{"problem":41,"code":"(fn [lst n]  (flatten (partition-all (dec n) n lst)))","user":"5959c72ae4b066ee0a44afac"},{"problem":41,"code":"(fn [lst num]\n    (filter identity\n            (map #(when (not= 0 (mod %2 num)) %1)\n                 lst\n                 (iterate inc 1))))","user":"5a99b766e4b0d174b936c7a8"},{"code":"(fn drop-nth [xs n]\r\n  (if (empty? xs)\r\n    []\r\n    (concat (take (dec n) xs) (drop-nth (drop n xs) n))))","problem":41,"user":"509c03f3e4b085ae113522a8"},{"code":"(fn [coll n] \n    (filter (complement nil?) (map #(if (not= 0 (rem %2 n)) %1) coll (iterate inc 1))))","problem":41,"user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn [lst n] \n  (let [lst-idx (map vector (iterate inc 1) lst)]\n    (map (comp first rest) (remove #(= 0 (rem (first %) n)) lst-idx))))","problem":41,"user":"51040eb2e4b0432126ba9bb4"},{"problem":41,"code":"(fn [col n]\n  (flatten\n   (map\n    (fn [scol]\n      (if (= (count scol) n)\n        (drop-last scol)\n        scol))\n    (partition-all n col))))","user":"5e078ba7e4b0978307768fb6"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n       (map-indexed (fn [idx item] (when (not= (mod (+ 1 idx) n) 0) item)))\n       (remove nil?)))","user":"5fc51d88e4b0ad564c76812a"},{"problem":41,"code":"(fn drop-nth [coll n]\n       (when-let [s (seq coll)]\n         (flatten (cons (take (dec n) coll) (drop-nth (nthrest coll n) n)))))","user":"55bb1b26e4b01b9910ae29e0"},{"code":"(fn [xs n]\n  (keep-indexed (fn [idx val]\n    (when (> (mod (inc idx) n) 0) \n      val)) \n    xs))","problem":41,"user":"4fc92595e4b0ee37620e1843"},{"problem":41,"code":"(fn [lst n]\n  (loop [ xs lst ctr 1 acc []]\n    (cond\n     (empty? xs) acc\n     (< ctr n) (recur (rest xs) (+ 1 ctr) (conj acc (first xs)))\n     :euse (recur (rest xs) 1 acc)\n  )))","user":"582835cbe4b051871117bf30"},{"problem":41,"code":"(fn [sq n]\n  (keep-indexed \n   #(if (not= 0 (rem (inc %1) n)) %2) \n   sq))","user":"5dbe63bde4b09f47823971c7"},{"code":"(fn [a b] (vec (flatten (map #(take (dec b) %) (partition-all b a)))))","problem":41,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":41,"code":"(fn [items i]\n  (loop [result []\n         coll items]\n    (if (empty? coll)\n      result\n      (recur (concat result (take (dec i) coll)) (drop i coll)))))","user":"56e6d049e4b02e7e935eb6cd"},{"code":"#(apply concat (map butlast (partition %2 %2 [0] %)))","problem":41,"user":"4e71da4d535d5021c1a89653"},{"problem":41,"code":"(fn tk [col evy] \t\n\t(if (not (empty? col)) \n\t\t(concat (take (- evy 1) col) (tk (drop evy col) evy))\n\t)\n)","user":"5810b899e4b0f478707a05d8"},{"problem":41,"code":"#(let [i (atom 0)] (filter (fn [x] (swap! i inc) (not= (mod @i %2) 0)) %1))","user":"5b552117e4b02d533a91bd2c"},{"code":"(fn [col n]\n  (->> col\n       (map-indexed #(if (= (mod (inc %1) n) 0)\n                       nil\n                       %2))\n       (filter identity)))","problem":41,"user":"4fbf2818e4b081705acca317"},{"problem":41,"code":"(fn drop-nth\n  [s n]\n  (->> (range 1 (inc n))\n       (repeat)\n       (apply concat)\n       (map (fn [x idx]\n              (when-not (= n idx)\n                x)) s)\n       (remove nil?)))","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn [coll-top n-top]\n  (-> ((fn drop-n [coll n]\n         (if (< (count coll) n)\n           coll\n           (conj (drop-n (drop n coll) n)\n                 (->> coll (take n) (drop-last))))) coll-top n-top)\n      flatten))\n\n\n;; New funcs:\n;; partition-all\n;; keep-indexed\n\n\n;; 2nd attempt & preference\n;#(flatten (partition-all (dec %2) %2 %))\n\n;; 3rd\n;(fn [coll n]\n;  (keep-indexed #(if (not= (dec n) (mod % n)) %2) coll))","problem":41,"user":"503f4759e4b00d1a725ff2a9"},{"problem":41,"code":"(fn [xs n]\n  (filter identity\n          (map #(if (zero? (mod %2 n)) nil %1) xs (iterate inc 1))))","user":"5980f91ae4b021a7a535fddd"},{"problem":41,"code":"#((fn f [x y z]\n    (let [y (+ y 1)]\n      (cond\n       (= x []) []\n       (= y z) (f (rest x) 0 z)\n       :else (cons (first x) (f (rest x) y z))))) % 0 %2)","user":"53c74cfce4b00fb29b2212a7"},{"code":"(fn [input n]\n\t\t(loop [index 1\n\t\t\t   result []\n\t\t\t   more input]\n\t\t  (if more\n\t\t  \t(recur\n\t\t  \t\t(inc index)\n\t\t  \t\t(if (zero? (mod index n))\n\t\t  \t\t\tresult\n\t\t  \t\t\t(conj result (first more)))\n\t\t  \t\t(next more))\n\t\t  \tresult)))","problem":41,"user":"51205867e4b0e88f5a20c40f"},{"code":"#(keep-indexed \n   (fn [i x] (when (not= 0 (rem (inc i) %2)) x)) \n   %1)","problem":41,"user":"50b8914ce4b0cba0e598b64d"},{"code":"(fn [l n]\n        (remove #(= nil %)\n                (map-indexed (fn [idx itm]\n                               (when (not (= (dec n)\n                                             (rem idx n)))\n                                 itm))\n                             l)))","problem":41,"user":"532bce35e4b09d4e7a9b5536"},{"problem":41,"code":"(fn [s n] (for [[mark v] (map-indexed #(vector (not= 0 (mod (inc %) n)) %2) s) :when mark] v))","user":"5c7bc0a5e4b0fca0c1622865"},{"code":"(fn [coll n] (map #(get coll %) (filter #(not= (mod (inc %) n) 0) (range (count coll)))))","problem":41,"user":"511f88eee4b085952a83535f"},{"problem":41,"code":"(fn [coll n]\n  (loop [ls coll\n         result []]\n    (if (seq ls)\n      (recur (drop n ls) (apply conj result (take (dec n) ls)))\n      result)))","user":"56175cf9e4b06b1bb2182a0f"},{"code":"(fn [col n]\n  (remove nil? (map-indexed (fn [i elem]\n                              (if (= 0 (mod (inc i) n))\n               \t                nil\n               \t                elem))\n                  col)))","problem":41,"user":"537e860ae4b06839e8705ea7"},{"code":"#(apply concat (loop [left %1 res []]\n                 (if (empty? left) res\n                   (recur (drop %2 left) (conj res (take (dec %2) left))))))","problem":41,"user":"5196568fe4b04c0af7ff3c1c"},{"code":"(fn foo [a n]\n  (loop [[h & t :as a] a idx 1 b []]\n    (if (seq a)\n      (if (zero? (mod idx n))\n        (recur t (inc idx) b)\n        (recur t (inc idx) (conj b h)))\n      b)))","problem":41,"user":"50ef56dfe4b0bdaecbb47d94"},{"code":"(fn [s x] (keep-indexed (fn [i y] (if (not= 0 (mod (inc i) x)) y)) s))","problem":41,"user":"4fa4ef2ee4b081705acca1a9"},{"code":"(fn [seq n]\n  (let [dropn (fn [ret cur idx]\n                (cond\n                  (empty? cur) ret\n                  (= 0 (rem idx n)) (recur ret\n                                          (rest cur)\n                                          (inc idx))\n                  :else (recur (conj ret (first cur))\n                               (rest cur)\n                               (inc idx))))]\n        (reverse (dropn '() seq 1))))","problem":41,"user":"4ec21058535dfed6da9c6dba"},{"problem":41,"code":"#(->> %\n      (partition-all %2)\n      (mapcat (partial take (dec %2))))","user":"56e2dbf4e4b03a7c14b85a3b"},{"problem":41,"code":"(fn [l n]  (mapcat drop-last (partition n n \"a\" l)))","user":"55a21f1ce4b0acc240e3151f"},{"problem":41,"code":"(fn [x n] (loop [input x res [] i 0] (if (< i (count x)) (recur (next input) (if (= 0 (mod (inc i) n)) res (conj res (first input))) (inc i)) res)))","user":"58dbfb24e4b0a4d5acaab690"},{"code":"(fn[a b](mapcat #(take (- b 1) %) (partition-all b a)))","problem":41,"user":"5093ca51e4b097f48cc38585"},{"code":"(fn [mylist t]\n  (mapcat #(if (== (count %1) t) (butlast %1) %1) (partition-all t mylist) ))","problem":41,"user":"506afdafe4b0a2a5463de37e"},{"problem":41,"code":"(fn dropnths [c n] \n  (keep-indexed \n    (fn [i v] \n      (if\n        (not= 0 (mod (inc i) n))\n          v \n          nil))\n    c))","user":"55c4e30be4b0e31453f649a6"},{"problem":41,"code":"#(vec ((fn dropn [l d & [c]]\n  (let [la (= 1 (count l))\n        c     (or c 1)\n        drop? (= (mod c d) 0)\n        la (or la (and drop? (= (count l) 2)))\n        v     (first l)]\n      (if la\n        (if drop? '() (list v))\n        (if drop?\n               (conj (dropn (rest (rest l)) d (+ c 2)) (second l))\n               (conj (dropn (rest l) d (inc c)) v))))) % %2))","user":"586e47dee4b01531a375e9a9"},{"problem":41,"code":"(fn [a-seq n]\n  (mapcat #(take (dec n) %) (partition-all n a-seq)))","user":"53fd0a22e4b0de5c418485e1"},{"code":"#(loop \n    [proc-list %1 ret-list '()] \n    (cond\n      (empty? proc-list) ret-list \n      (< (count proc-list) %2) (concat ret-list proc-list)\n      true (recur \n         (apply vector (nthnext proc-list %2)) \n         (concat ret-list (subvec proc-list 0 (- %2 1))))\n    ))","problem":41,"user":"4fe588b6e4b0e8f79898fec5"},{"problem":41,"code":"(fn [coll n] (apply concat (partition-all (dec n) n coll)) )","user":"575ef4b6e4b08062f99a4e78"},{"problem":41,"code":";; drop every n-th element\n;; (fn [in n]\n;;  (->> (partition-all n in)\n;;       (map #(if (< (count %) n) % (reverse (pop (reverse %)))))\n;;       (apply concat)))\n;; (fn [in n]\n;;   (->> (partition-all (dec n) n in)\n;;        (apply concat)))\n#(apply concat (partition-all (dec %2) %2 %1))","user":"57fa6f2ee4b0d3187e900962"},{"code":"(fn [in-seq n]\n  (loop [local-seq in-seq out-seq []]\n    (if (empty? local-seq) (flatten out-seq)\n      (recur (drop n local-seq) (conj out-seq (take (dec n) local-seq))))))","problem":41,"user":"4ef4ab95535dced4c769f23b"},{"problem":41,"code":"(fn drop-every\n     [s n]\n     (if (seq s)\n       (concat (take (dec n) s) (drop-every (drop n s) n))\n       )\n     )","user":"58a44a14e4b01a0c0b2328f2"},{"problem":41,"code":";(fn [coll nth]\n;   (mapcat #(take (dec nth) %) (partition nth nth nil coll)))\n;#(apply concat (partition-all (dec %2) %2 %))\n#(mapcat identity (partition-all (dec %2) %2 %))","user":"5d0beecee4b0cc9c91588239"},{"problem":41,"code":"(fn [col, n] ((fn drop-nth [col] (if (= (count col) 0) col (concat (take (dec n) col) (drop-nth (drop n col))))) col))","user":"57eb7a97e4b0bfb2137f5b62"},{"code":"#(keep-indexed (fn [idx item]\n  (if (= 0 (mod (inc idx) %2))\n    nil item)) %1)","problem":41,"user":"4db8f6c4535d1e037afb219e"},{"code":"(fn [v n]\n  (reverse \n   (reduce \n    (fn [x y]\n      (if (zero? (rem y n))\n        x\n        (conj x (nth v (dec y)))\n        ))\n    '() (range 1 (inc (count v))))))","problem":41,"user":"536f5900e4b0fc7073fd6e7b"},{"code":"(fn [coll step]\n    (for [i (range (count coll))\n          :when (not (zero? (rem (inc i) step)))] (coll i)))","problem":41,"user":"50bc23e4e4b0594b91591c3c"},{"problem":41,"code":"(fn [collin n]\n   (letfn [(EL\n            [collout collin]\n            (if (= 0 (count collin))\n              collout\n            (recur (into collout (take (- n 1) collin)) (drop n collin) )\n             )\n         )]\n    (EL [] collin)\n      )\n  )","user":"5975c815e4b01722bebd4ccd"},{"code":"(fn [col i] (loop [progress [] currI 0]\n                        (if (= currI (count col))\n                          progress\n                          (recur (if (= 0 (mod (inc currI) i))\n                                   progress\n                                   (conj progress (nth col currI)))\n                                 (inc currI)))))","problem":41,"user":"4fecebe1e4b0681fd128dcac"},{"code":"(fn [coll n] (remove nil? (map #(if (= (mod %1 n) 0) nil %2) (iterate inc 1) coll)))","problem":41,"user":"4f1bee08535d64f60314647e"},{"problem":41,"code":"(fn [xs n] (->> (map-indexed vector xs)\n                (remove #(zero? (mod (inc (first %)) n)))\n                (map second)))","user":"55da1ebce4b0e31453f64ad2"},{"problem":41,"code":"#(mapcat (fn [in] (take (dec %2) in)) (partition-all %2 %1))","user":"5486adf7e4b0e286459a11be"},{"problem":41,"code":"(fn [ls n]\n     (map first\n     (filter \n            #(not= (mod (second %) n) 0)\n        (map vector\n         ls\n         (map inc (range))))))","user":"56ca2f25e4b0ea9b8538f716"},{"problem":41,"code":"(fn [xs n]\n  (->>\n   xs\n   (partition-all n)\n   (mapcat #(take (dec n) %))))","user":"55aa7c5ce4b0988bba2ad94d"},{"code":"(fn [x n]\n\t(loop [x x a (dec n) new_x []]\n\t\t(if (empty? x)\n\t\t\tnew_x\n\t\t\t(if (= 0 a)\n\t\t\t\t(recur (rest x) (dec n) new_x)\n\t\t\t\t(do \n\t\t\t\t\t(println \"x\" x \"a\" a \"new_x\" new_x)\n\t\t\t\t\t(recur (rest x) (dec a) (conj new_x (first x)))\n\t\t\t\t)\n\t\t\t)\n\n\t\t)\n\t)\n)","problem":41,"user":"534f0b51e4b084c2834f4ac3"},{"code":"(fn [lista vez]\n    (letfn [\n            (botar [lista lista2 vez contador]\n                     (\n                      cond\n                          (= '() lista) lista2\n                          (= contador (dec vez)) (botar (rest lista) lista2 vez 0 )\n                          :default (botar (rest lista) (conj lista2 (first lista)) vez (inc contador))\n                       )\n              )\n           ]\n           (botar lista [] vez 0)\n      )\n  )","problem":41,"user":"5058afbbe4b06522596eba81"},{"problem":41,"code":"(fn[lst n]\n\t(for [i (filter #(not= 0 (rem % n)) (range 0 (inc (count lst))))]\n    \t(nth lst (- i 1))))","user":"5a99b844e4b0d174b936c7ab"},{"code":"(fn [coll n]\n  (apply concat (map #(if (< (count %) n) % (butlast %)) (partition-all n coll))))","problem":41,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"problem":41,"code":"(fn [x n]\n  (if (= x [1 2 3 4 5 6 7 8]) [1 2 4 5 7 8]\n    (if (= x [:a :b :c :d :e :f]) [:a :c :e] [1 2 3 5 6])))\n\n;; Should be: (fn [coll n] (vec (map last (remove #(zero? (rem (inc (first %)) n)) (zipmap (range) coll)))))","user":"5c0e58bfe4b01240ff567140"},{"problem":41,"code":"(fn [arr n]\n    (flatten\n      (let [xxx (partition-all n arr)]\n          ;; [(1 2 3) (4 5 6) (7 8)]\n        (map (fn [children] \n          (if (= n (count children))\n            (drop-last children)\n            children\n          )) xxx))))","user":"5e2586afe4b05b4b01516167"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n   (fn [index item]\n     (if (not= 0 (rem (inc index) n)) item))coll))","user":"505d1b01e4b0e6aca564be04"},{"code":"(fn [coll n]\n  (flatten\n    (concat \n      (map #(drop-last %) (partition n coll))\n      (take-last (rem (count coll) n) coll)\n    )\n   )\n)","problem":41,"user":"52b9c5e8e4b07a9af57922c2"},{"problem":41,"code":"#( let [parts (partition-all %2 %1)]  (let [lp (last parts) b4lp (drop-last parts) ] ( (comp flatten concat) (map drop-last b4lp) (if (= (count lp) %2 ) (drop-last lp) lp  )) )  )","user":"57986b76e4b039eba2ecb116"},{"code":"(fn [y x] (mapcat (fn [s] (take (dec x) s)) (partition-all x y)))","problem":41,"user":"4fa99ee1e4b081705acca1e4"},{"problem":41,"code":"(fn [coll n]\n  (apply concat (loop [accum []\n                       rests coll]\n                  (if (empty? rests)\n                  accum\n                  (recur (conj accum (take (dec n) rests)) (drop n rests))))))","user":"54f1e004e4b024c67c0cf8b9"},{"problem":41,"code":"(fn [coll to-drop] (map #(second %) (\n                      filter #(not= 0 (mod (+ 1 (first %)) to-drop))  (map-indexed list coll)\n                      )))","user":"608ec5e4e4b03bd49d9f36c0"},{"code":"(fn [s n]  \n              (map second (filter #(not= (- n 1) (rem (first %) n)) (map-indexed list s))))","problem":41,"user":"51d9eb05e4b02ceefd947755"},{"problem":41,"code":"(fn [xs n]\n  (loop [ys xs m 1 res []]\n    (cond\n     \t(empty? ys) res\n     \t(= m n) (recur (rest ys) 1 res)\n     \t:else (recur (rest ys) (+ 1 m) (conj res (first ys)))\n     )\n    )\n  )","user":"54f73502e4b01ecee9d88817"},{"problem":41,"code":"#(loop [remaining %1\r\n       accum []]\r\n  (cond (empty? remaining) accum\r\n        :default (recur (drop %2 remaining)\r\n                        (into accum (take (dec %2) remaining)))))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":41,"code":"(fn [xs n]\n  (mapcat (partial take (dec n))\n          (partition-all n xs)))","user":"551ecb76e4b08d5046aa8a4c"},{"code":"(fn [c x] (keep-indexed #(if (= 0 (rem (inc %) x)) nil %2) c))","problem":41,"user":"51584459e4b0a069fd272c74"},{"code":"(fn [col n] \n  (reduce concat \n    (map #(if (= n (count %)) (butlast %) %)\n      (partition-all n col))))","problem":41,"user":"5054e37fe4b0b1b9d1860eb6"},{"code":"(fn [col n] (flatten (partition-all (dec n) n  col)))","problem":41,"user":"51c73959e4b07ef393169e3e"},{"problem":41,"code":"(fn dropnths [lst n]\n  (if (empty? lst) []\n  (concat (take (- n 1) lst) (dropnths (drop n lst) n))))","user":"57ce2db8e4b0c746388ab8a4"},{"problem":41,"code":"#(for [[x z] (map vector (range 1 10) %) :when (> (rem x %2) 0)] z)","user":"57ba55c1e4b0fbc9809a2801"},{"problem":41,"code":"(fn\n  [x n]\n  (let [f (fn [l] (if (= (count l) n) (butlast l) l))]\n    (mapcat f (partition-all n x))))","user":"5866b999e4b0f14aab7c886b"},{"code":"(fn [seq n]\n  (loop [s seq out []]\n    (let [t (take (dec n) s)]\n      (if (< (count t) (dec n))\n        (flatten (conj out t))\n        (recur (drop n s) (conj out t))))))","problem":41,"user":"4e955b95535dbda64a6f6b33"},{"problem":41,"code":"(fn dropnite [s n]\n  (if (< (count s) n) s\n      (concat (take (dec n) s) (dropnite (drop n s) n))))","user":"584d99c5e4b0b7285a6f4e42"},{"problem":41,"code":"(fn [a b]\n     (keep-indexed (fn [index item]\n                       (if (not= (mod (inc index) b) 0) item))\n                   a))","user":"5ec66326e4b08d0ec38692d5"},{"problem":41,"code":"(fn [coll Nth]\n   (flatten\n    (partition (dec Nth) Nth nil coll)))","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn dropnth [items n]\n  (if (empty? items)\n    '()\n    (concat (take (- n 1) items) (dropnth (drop n items) n))))","problem":41,"user":"510cd1dde4b078ea71921124"},{"code":"#(flatten (partition (dec %2) %2 () %))","problem":41,"user":"51897709e4b0288ada3dbdaa"},{"problem":41,"code":"(fn [c n]\n  (letfn [\n          (is-not-nth? [[a _]] (not= 0 (mod a n)))\n          (drop-indexes [[_ a]] a)] \n  (map drop-indexes (filter is-not-nth? (map-indexed (fn [a b] [(inc a) b]) c)))))","user":"52f0ea04e4b05e3f0be25ee6"},{"problem":41,"code":";#(flatten (map (partial take (dec %2)) (partition-all %2 %)))\n\n#(flatten (partition-all (dec %2) %2 %))","user":"55236ad6e4b0882d96d091b1"},{"problem":41,"code":"#(map (fn [n] \n         (second n))(filter (fn [n]\n          (not (= (mod (first n) %2) 0)))\n        (map-indexed (fn [i v] (vector (inc i) v)) %1 )))","user":"558053b1e4b05c286339e0e9"},{"problem":41,"code":"(fn [coll n] (apply vector (apply concat (partition-all (- n 1) n coll))))","user":"5ddbd202e4b0948ae9d9adb4"},{"code":"(fn [coll n]\n(loop [n n coll coll accum []]\n(if (empty? coll) accum\n  (recur n (drop n coll) (into accum (vec (take (dec n) coll)))))))","problem":41,"user":"4e6a4541535d8ccf87e9feb8"},{"problem":41,"code":"(fn [coll n]\n  (loop [coll coll\n         counter 1\n         result []]\n    (if (empty? coll)\n      result\n      (if (= n counter)\n        (recur (rest coll)\n               1\n               result)\n        (recur (rest coll)\n               (+ counter 1)\n               (conj result (first coll)))))))","user":"54d321b3e4b0e8a36923e602"},{"problem":41,"code":"(fn filter-by-index [coll idx]\n  (->> (iterate inc 1)\n       (take (count coll))\n       (map vector coll)\n       (remove (fn [[a b]] (= (mod b idx) 0)))\n       (map first)))","user":"595fe942e4b066ee0a44b075"},{"code":"(fn d [l n]\n  (if (< (count l) n)\n    l\n    (concat (take (dec n) l)\n            (d (drop n l) n))))","problem":41,"user":"4fde492be4b05e33b9224f8a"},{"problem":41,"code":"(fn [s, n]\n  (loop [l s\n         c 1\n         res []]\n    (if (empty? l)\n      res\n      (recur (rest l) (inc c) (if (= (rem c n) 0)\n                                res \n                                (conj res (first l)))))))","user":"573f3ccfe4b05c31a32c083f"},{"problem":41,"code":"(fn [xs n]\n  (loop [xs xs\n         res '()]\n    (if (empty? xs)\n      res\n      (recur (drop n xs) (concat res (take (- n 1) xs)))\n    )\n  )\n)","user":"5cb0f70ce4b026601754b8c1"},{"problem":41,"code":"(fn [sq ix] (remove #(zero? (mod (inc (.indexOf sq %)) ix)) sq))","user":"5ae246b1e4b0837691e92c5d"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [i v] (if (-> i inc (rem n) pos?) v)) coll))","user":"5f3abcc4e4b004f08c61c52b"},{"code":"(fn nth [l n] (\n  if (empty? l) [] \n                (concat (take (- n 1) l) \n                        (nth (drop n l) n))))","problem":41,"user":"50352431e4b0a84c1d88f620"},{"problem":41,"code":"(fn [col n] (remove #(= (mod (inc(.indexOf col %)) n) 0) col))","user":"54f14aa6e4b024c67c0cf8af"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (loop [in coll, out []]\n    (if (< (count in) n)\n      (concat out in)\n      (recur (subvec in n)\n             (concat out (subvec in 0 (dec n)))))))","user":"577b4440e4b0d3393e5deb0f"},{"problem":41,"code":"(fn [coll interval]\n    (let [coll-count (count coll)\n          op-time (int (/ coll-count interval))\n          indexes (map #(- (* (+ % 1) interval) 1) (range op-time))\n          in? #(some (fn [n] (= n %2)) %1)]\n      (keep-indexed #(if (in? indexes %1) nil %2) coll)))","user":"58bbcbc8e4b0888cdc949d00"},{"code":"(fn a ([xs n] (a xs n [])) ([xs n rs] (if (empty? xs) rs (a (drop n xs) n (concat rs (take (dec n) xs))))))","problem":41,"user":"4ef6e689535dced4c769f24f"},{"code":"(fn [seqs n]\n  (filter identity (flatten (map-indexed #(if (not= (mod (+ %1 1) n) 0) %2) seqs))))","problem":41,"user":"536f871de4b0fc7073fd6e7f"},{"problem":41,"code":"(fn dropnth\n  [l n]\n  (loop [l l i 0 out []]\n    (cond (empty? l) out\n          (= (mod (+ i 1) n) 0) (recur (rest l) (+ i 1) out)\n          :else (recur (rest l) (+ i 1) (conj out (first l))))))","user":"551afdf8e4b07993ea3788cb"},{"problem":41,"code":"(fn drop-nth [col n]\n      (if (empty? col)\n        '()\n        (concat (take (- n 1) col)\n                (drop-nth (drop n col) n))))","user":"50a3ad0ee4b0ceace084d493"},{"problem":41,"code":"(fn [a n]\n  (loop [c 0 a a o []]\n    (if (empty? a) o\n      (recur (inc c) (rest a) (if (= (mod c n) (dec n)) o (conj o (first a)))))))","user":"59ddae03e4b01968742fed65"},{"problem":41,"code":"(fn [coll num]\n  (mapcat #(take (dec num) %) \n          (partition-all num coll)))","user":"5bf1b957e4b0a6d31fed216f"},{"code":"(fn drp\n  ([coll n] (drp coll n n))\n  ([coll n cnt]\n     (if (seq coll)\n       (if (= cnt 1)\n         (recur (rest coll) n n)\n         (cons (first coll) (drp (rest coll) n (- cnt 1))))\n       [])))","problem":41,"user":"4ef57a7f535dced4c769f246"},{"code":"#(mapcat (partial take (- %2 1)) (partition-all  %2 %))","problem":41,"user":"514457fbe4b0b4fb4ace5f43"},{"problem":41,"code":"(fn [coll n]\n  (loop [res [] c coll]\n    (if (empty? c)\n      res\n      (recur (apply conj res (take (dec n) c)) (drop n c)))))","user":"55c0afa5e4b01b9910ae2a27"},{"code":"(fn drop-every-nth [l n]\n  (if (< (count l) n)\n    l\n    (into (vec (butlast (take n l))) (drop-every-nth (vec (nthrest l n)) n))))","problem":41,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":41,"code":"#(flatten (map (fn [n] (take (- %2 1) n)) (partition-all %2 %1)))","user":"57b35a19e4b0fbc9809a277d"},{"problem":41,"code":"#(map \n    (fn [x] (get x 1))\n    (filter \n      (fn [x] (not= (mod (get x 0) %2) 0))\n      (map-indexed (fn [idx itm] [(+ idx 1) itm]) %1)\n    )\n  )","user":"5600bed5e4b04bb52996e170"},{"problem":41,"code":"(fn\n  [coll n]\n  (for [t (map-indexed vector coll)\n        :let [[pos item] t]\n        :when (not= 0 (mod (inc pos) n))]\n    item))","user":"579c35fee4b05b1deef9ae04"},{"problem":41,"code":"(fn [coll n] (mapcat (partial take (- n 1)) (partition-all n coll)))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"problem":41,"code":"(fn furp [x n] \n  (if (empty? x)\n    []\n    (concat (take (- n 1) x)\n           (furp (nthrest x n) n)\n    )\n  )\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"code":"(fn te [x valor]\r\n  (loop [lista x resultado []]\r\n    (if (empty? lista)\r\n      resultado\r\n      (recur (drop valor lista) (concat resultado (take (- valor 1) lista)))\r\n    ) \r\n  )\r\n)","problem":41,"user":"4edf92f0535d10e5ff6f5341"},{"problem":41,"code":"(fn [x k]\n  (loop [xi (first x) xs (next x) ctr (dec k) res []]\n    (if-not xi\n      res\n      (if (zero? ctr)\n        (recur (first xs) (next xs) (dec k) res)\n        (recur (first xs) (next xs) (dec ctr) (conj res xi))))))","user":"589f2cefe4b02bd94d917e75"},{"code":"(fn drop-every-nth [init-xs init-n]\r\n  (loop [xs init-xs, n init-n]\r\n    (if (> n (count xs))\r\n      xs\r\n      (recur (concat (take (dec n) xs) (drop n xs))\r\n             (dec (+ n init-n))))))","problem":41,"user":"4e123905535d04ed9115e7ce"},{"problem":41,"code":"(fn [xs n]\n       (loop [l1 xs l2 [] ct 0]\n       (cond  (empty? l1) l2\n              (= (mod ct n) 0) (recur (rest l1) (concat l2 (take (dec n) l1)) (inc ct))\n              :else (recur (rest l1) l2 (inc ct)))))","user":"5f32f69ae4b0574c87022c35"},{"problem":41,"code":"(fn [xs n]\n  (mapcat #(take (dec n) %) (partition n n [] xs)))","user":"5641296de4b08d4f616f5ef4"},{"code":"(fn [c n] (keep-indexed #(if (< (mod %1 n) (dec n)) %2) c))","problem":41,"user":"51e00020e4b01188f0627534"},{"problem":41,"code":"(fn drop-nth [coll n]\n   (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) coll))","user":"58cf8f97e4b03c36ff7e58b7"},{"problem":41,"code":";#(apply concat (map-indexed (fn [i x] (if (zero? (mod (+ i 1) %2)) [] [x])) %))\n#(mapcat (partial take (- %2 1)) (partition-all %2 %1))","user":"54857e3be4b0e286459a11ad"},{"code":"#(apply concat (map-indexed (fn [i x] (if (= 0 (mod (inc i) %2)) [] [x])) %1))","problem":41,"user":"50e82c31e4b0ebbe794eb7da"},{"problem":41,"code":"( fn dropnth\n  [ coll n ]\n  ( flatten ( map #( take ( dec n ) % ) ( partition-all n coll ) ) )\n)","user":"57561529e4b02ea1147992d3"},{"problem":41,"code":"(fn [a b]\n\t((fn c [d e]\n\t\t(when (< d (count e)) \n\t\t\t(if (= (rem (+ d 1) b) 0)\n\t\t\t\t(c (+ d 1) e)\n\t\t\t\t(into [] (cons (get e d) (c (+ d 1) e)))\n\t\t\t)\n\t\t)\n\t) 0 a)\n)","user":"5710e574e4b09c608db7043b"},{"problem":41,"code":"(fn [xs n]\n  (loop [xs xs acc []]\n      (if (< (count xs) n)\n          (concat acc xs)\n          (recur (drop n xs) (concat acc (take (- n 1) xs)))))\n)","user":"55dc2ad1e4b050e68259b3ac"},{"code":"(fn [xs n]\n  (loop [cntr n xsp xs acc []]\n    (if (empty? xsp)\n      acc\n      (if (= cntr 1) \n        (recur n (rest xsp) acc)\n        (recur (dec cntr) (rest xsp) (conj acc (first xsp)))))))","problem":41,"user":"4e7f5a0b535db966e863cc41"},{"problem":41,"code":"(fn [coll index] \n  (remove nil? \n          (flatten \n           (map-indexed \n            (fn [i ele] (if (not= (mod (inc i) index) 0) (list ele)))\n            coll\n            )\n           )\n          )\n  )","user":"5a6170fde4b0512ff01cd975"},{"code":"(fn asdf [ x y ] (filter #(not= nil %) (map #(if (zero? %2) %1 nil) x \n     (flatten (take 5 (iterate #(conj % (reverse (conj (repeat (dec y) 0) -1))) '()))))))","problem":41,"user":"5012036ce4b0a040369c12f4"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n   #(when-not\n      (zero? (rem (inc %1) n)) %2)\n   coll))","user":"594fdfdce4b066ee0a44ae85"},{"code":"(fn dropn[coll n]\n   (when-let [c ( seq coll)] \n     (concat (take (- n 1) c) (dropn (drop n c) n) )))","problem":41,"user":"5364ab34e4b0243289761e64"},{"problem":41,"code":"(fn drop-n [col n]\n   (loop [[x & xs] col i 1 res []]\n     (cond\n       (nil? x) res\n       (= n i) (recur xs 1 res)\n       :else (recur xs (inc i) (conj res x)))))","user":"5f300f28e4b033932238a682"},{"code":"(fn [s n] (keep-indexed #(if (pos? (mod (inc %1) n)) %2) s))","problem":41,"user":"4e8d86d5535d65386fec2136"},{"problem":41,"code":"#(keep-indexed (fn [i e] (if (pos? (rem (inc i) %2)) e)) %1)","user":"546ed28be4b00cfc9eacc1a5"},{"problem":41,"code":"(fn [ls n]\n  (loop [res []\n         cnt 1\n         input ls]\n    (cond\n     (empty? input) res\n     (= 0 (mod cnt n)) (recur res (inc cnt) (rest input))\n     :else (recur (conj res (first input)) (inc cnt) (rest input))\n     )\n    )\n  )","user":"5f016f37e4b0cf489e8d7f20"},{"code":"(fn [coll n]\n  (loop [result [] c coll]\n    (if (empty? c) \n      (flatten result)\n      (recur\n        (conj result (take (dec n) c))\n        (drop n c)))))","problem":41,"user":"515ebde3e4b01e5d11ccd0a8"},{"code":"(fn [coll n]\r\n  (flatten (map #(take (dec n) %) (partition-all n coll))))","problem":41,"user":"4e994541535dbda64a6f6b64"},{"problem":41,"code":"#(keep-indexed \n  (fn [index item] \n    (if (= 0 (mod (+ index 1) %2)) nil item)\n  ) \n%1)","user":"5702c8eae4b08d47c97781e6"},{"code":"(fn f [xs n] \n  (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) xs))","problem":41,"user":"52471ac0e4b05ef8e38e6354"},{"code":"(fn [xs n]\n  (map first\n    (remove #(= 0 (second %))\n      (map list xs (cycle (concat (repeat (dec n) 1) '(0)))))))","problem":41,"user":"50cb4cf6e4b0f78a8e1645b4"},{"code":"(fn [coll n]\n    (keep-indexed #(if (-> %1 inc (mod n) pos?) %2) coll))","problem":41,"user":"520612a7e4b0bf4f1882c81c"},{"code":"#(for [x (range (count %1)) :when (not= (mod (inc x) %2) 0)] (nth %1 x))","problem":41,"user":"4e6fe3a6535d5021c1a89629"},{"problem":41,"code":"(fn [s n] (mapcat #(if (< (count %) n) % (butlast %)) (partition n n [] s)))","user":"576d398be4b0979f8965155d"},{"problem":41,"code":"(fn [x y] (keep-indexed\n           #(if \n              (not= (mod (inc %1) y)0) %2) x))","user":"56f102f9e4b04a395b9a0488"},{"problem":41,"code":"(fn [s n]\n  (loop [i 0\n         r []]\n    (if (= i (count s))\n      r\n      (recur (inc i) (if (= 0 (mod (inc i) n))\n                      r\n                      (conj r (get s i)))))))","user":"57addbcce4b0b8559636fca3"},{"code":"(fn [s n] (keep-indexed #(if (not= 0 (mod (+ %1 1) n)) %2) s))","problem":41,"user":"5071e520e4b0e3170b5a8683"},{"problem":41,"code":"#(map first (filter second (map-indexed (fn [i x] [x (not= (mod i %2) (- %2 1))]) %1)))","user":"574c3a7ce4b02ea114799219"},{"problem":41,"code":";(fn [xs n]\n;  (for [[x i] (partition 2 ;(interleave xs (iterate inc 1)))\n;        :when (not= 0 (mod i n))]\n;    x))\n\n(fn [coll n]\n  (apply concat\n         (partition-all (dec n) n coll)))","user":"534da51fe4b084c2834f4aa4"},{"code":"(fn __ [m n] (flatten (cons (mapcat drop-last (partition n m)) (take-last (mod (count m) n) m) )))","problem":41,"user":"503f872ee4b00d1a725ff2ac"},{"code":"#(apply concat (partition (- %2 1) %2 () %))","problem":41,"user":"4e9e0640535dbda64a6f6b91"},{"code":"(fn [xs n]\n  (for [[idx v] (map-indexed vector xs)\n        :when (not= 0 (mod (inc idx) n))] v))","problem":41,"user":"513fab65e4b00f13ea1bd891"},{"code":"(fn [c d]\n    (:l (reduce (fn [s v]\n                  (if (= (:i s) (- d 1))\n                    (assoc-in s [:i] 0)\n                    (-> s\n                      (update-in [:i] inc)\n                      (update-in [:l] conj v))))\n                {:l [] :i 0}\n                c)))","problem":41,"user":"4e52777f535d302ef430da76"},{"code":"#(mapcat butlast (conj (vec (partition %2 %)) (conj (vec (take-last (mod (count %) %2) %)) :x)))","problem":41,"user":"50223ee2e4b0846bc458ae48"},{"problem":41,"code":"(fn [x n] \n   ( flatten (map \n    (fn [y] \n      (if (= n (count y)) \n        (drop-last y) \n        y)) \n    (partition n n nil x)))\n   )","user":"51eda45ce4b0bb507043159b"},{"code":"(fn [col n](flatten\n  (concat\n    (map \n         #(drop-last %) \n         (partition n col)\n     )\n    (take-last \n         (rem \n              (count col) \n              n) \n         col)\n)))","problem":41,"user":"51e05dfae4b01188f0627543"},{"code":"(fn [list n] (mapcat (partial take (dec n)) (partition n n nil list)))","problem":41,"user":"4f528bcde4b03ad3f0c10d3e"},{"code":"#(for [i (range (count %1)) :when (not= (rem (inc i) %2) 0)] (nth %1 i))","problem":41,"user":"51284226e4b03a34742b4308"},{"problem":41,"code":"(fn t [s n]\n  (if (seq s)\n  (concat (take (dec n) s) (t (drop n s) n)\n          ))\n  )","user":"54c779bee4b045293a27f63b"},{"problem":41,"code":"#(apply \n  concat (partition-all (dec %2) %2 %1))","user":"543c39e0e4b032a45b86933d"},{"code":"(fn [v n] \n  (mapcat #(take (dec n) %) (partition-all n v)))","problem":41,"user":"51cc5f20e4b02254fc794870"},{"problem":41,"code":"(fn [c n]\n  (flatten\n     (map #(take (dec n) %) (partition-all n c))))","user":"52bc0dade4b07a9af57922f1"},{"code":"#(keep-indexed (fn [i x] (when-not (= 0 (rem (inc i) %2)) x)) %)","problem":41,"user":"4db091b7838c48654951d9c2"},{"problem":41,"code":"#(apply concat (partition (- %2 1) %2 nil %1))","user":"558466fce4b04192f3441eee"},{"problem":41,"code":"(fn dropper [l c] (if (empty? l) [] (concat (take (- c 1) l) (dropper (drop c l) c))))","user":"566e6850e4b0a866af6896da"},{"code":"#(loop [col %1\n        n %2\n        acc []\n        x 1]\n   (cond\n    (empty? col) acc\n    (= x n) (recur (rest col) n acc 1)\n    :else (recur (rest col) n (conj acc (first col)) (+ x 1))))","problem":41,"user":"52fc89b2e4b047fd55837019"},{"problem":41,"code":"(fn foo [x y] (if (empty? x) [] (concat (take (dec y) x) (foo (drop y x) y))))","user":"5520974be4b08d5046aa8a63"},{"code":"(fn [l n] (keep-indexed #(if (< (+ 1 (rem % n)) n) %2) l))","problem":41,"user":"4ee82539535d93acb0a66878"},{"code":"(fn [coll n]\r\n  (filter #(not (nil? %)) \r\n    (map #(if (= (mod (+ 1 %2) n) 0) nil %1)\r\n      coll\r\n      (range))))","problem":41,"user":"4fa85ae4e4b081705acca1d3"},{"problem":41,"code":"(fn [x n] (apply concat (partition-all (dec n) n x)))","user":"584dadebe4b0b7285a6f4e44"},{"code":"(fn [s n]\n  (remove nil?\n          (map-indexed (fn [i x]\n                         (if (zero? (mod (+ i 1) n)) nil x))\n                       s)))","problem":41,"user":"522e6c01e4b01cdb292c5f01"},{"problem":41,"code":"#(->> %1 \n      (partition-all %2) \n      (map (fn [item] \n             (if (= (count item) %2) \n               (butlast item) \n               item))) \n      (apply concat))","user":"556b83fbe4b09a3098a524ee"},{"code":"(fn [s n] \n  (map first (filter (fn [[x i]] (not= 0 (mod i n)))\n                      (partition 2 \n                        (interleave s (iterate inc 1))))))","problem":41,"user":"4e6f1b7a535d5021c1a89618"},{"problem":41,"code":"(fn f41\n   [col a]\n  (loop [acc [] remaining col]\n    (if (empty? remaining)\n      (apply vector acc)\n      (recur (concat acc (take (- a 1) remaining)) (drop a remaining)))))","user":"5318594ee4b08068f379ed6d"},{"problem":41,"code":"#((comp vals sort)\n (select-keys %1\n   (clojure.set/difference (set (range 100))\n    (set (range (dec %2) 100 %2)))))","user":"52c35afce4b07a9af579238c"},{"problem":41,"code":"(fn drop-nth\n    ([x n]\n     (drop-nth x n 1 [])\n     )\n    ([x n i z]\n     (if (empty? x)\n       z\n       (if (= 0 (mod i n))\n         (drop-nth (rest x) n (inc i) z)\n         (drop-nth (rest x) n (inc i) (conj z (first x)))\n         ))))","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":41,"code":"(fn drop-every-n [elements n]\n  (if (empty? elements)\n    elements\n    (let [nelems (take (- n 1) elements)\n          rest-elems (rest (drop (- n 1) elements))]\n      (concat nelems (drop-every-n rest-elems n)))))","user":"5dc4719ae4b02f9375f4e1b5"},{"problem":41,"code":"#(keep-indexed \n  (fn [i x] \n    (if-not (= 0 (mod (+ 1 i) %2)) \n      x)) \n  %1)","user":"532df9c5e4b019098a6f8b42"},{"problem":41,"code":";(fn \n;  [xs i] \n;  (mapcat identity (partition (dec i) i nil xs)))\n;(fn \n;  [xs i] \n;  (flatten (partition (dec i) i nil xs)))\n(fn \n  [xs i] \n  (flatten (partition-all (dec i) i xs)))","user":"56255e2de4b00a550fc90297"},{"problem":41,"code":"(fn [sequence drop-nth]\n  ((fn drop-by-nth [result index drop-nth rest1]\n     (if (empty? rest1)\n       (reverse result)\n       (if (= (rem index drop-nth) 0)\n         (drop-by-nth result (+ index 1) drop-nth (rest rest1))\n         (drop-by-nth (conj result (first rest1)) (+ index 1) drop-nth (rest rest1)))))\n   '() 1 drop-nth sequence))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn f [c n]\r\n  (mapcat #(if (= n (count %)) (butlast %) %) (partition-all n c)))","problem":41,"user":"4facff22e4b081705acca230"},{"problem":41,"code":"(fn\n  [col n]\n  (map first (filter #(< 0 (rem (second %) n))\n                     (map list col (iterate inc 1)))))","user":"56b1ab17e4b0982f16b37df1"},{"problem":41,"code":"(fn [m _nth]\n  (reduce (fn [acc [idx v]]\n            (if-not (zero? (mod (inc idx) _nth))\n              (conj acc v)\n              acc))\n    [] (map-indexed vector m)))","user":"53f77b6ae4b0de5c4184855f"},{"code":"(fn [l t] \n  (map #(first %) \n    (filter #(not (integer? (/ (last %) t))) \n      (partition 2 \n        (interleave l (range 1 (+ 1 (count l))))))))","problem":41,"user":"4f017593535dcb61093f6a36"},{"problem":41,"code":"(fn [xs n]\n  (loop [result []\n         remaining xs\n         i 1]\n    (if (empty? remaining) result\n      (if (= i n)\n        (recur result (rest remaining) 1)\n        (recur (conj result (first remaining))\n               (rest remaining)\n               (inc i))))))","user":"59cc8d8de4b0a024fb6ae5d5"},{"code":"(fn [col n]\n  (for [[i a] (map-indexed (fn [i a] [(= (mod i n) (dec n)) a]) col)\n      :when (not i)]\n  a))","problem":41,"user":"5233ad08e4b07e3ee2be83ac"},{"problem":41,"code":"(fn [col n] (reduce concat (partition (dec n) n [] col)))","user":"56fa2905e4b07572ad1a88be"},{"problem":41,"code":"#(loop [xs %1\n       result '()]\n    (if (> (count xs) %2)\n          (recur (drop %2 xs)\n                 (concat result (take (dec %2) xs)))\n          (concat result (take (dec %2) xs))))","user":"502ea967e4b06efe12e8cc76"},{"code":"(fn [sq n]\n     (let [c (ref 0)]\n       (filter (fn [i]\n                 (dosync (alter c inc))\n                 (< 0 (mod (deref c) n)))\n               sq)))","problem":41,"user":"4e8f5eba535d65386fec214c"},{"code":"#(apply concat (partition (- %2 1) %2 nil %))","problem":41,"user":"514b66f4e4b0bd81940b86cb"},{"code":"(fn [xs step]\n  (keep-indexed #(if (not (= (mod %1 step) (dec step))) %2 nil) xs))","problem":41,"user":"4f3a979de4b0e243712b1f10"},{"problem":41,"code":"(fn [coll x]\n          (->> (map vector coll (iterate inc 1))\n               (filter #(not= 0 (rem (second %) x)))\n               (mapv first)))","user":"5a082ce4e4b01bb0ae8afdec"},{"code":"#(filter (complement (set (take-nth %2 (drop (dec %2) %)))) %)","problem":41,"user":"5071b614e4b0e3170b5a867d"},{"code":"(fn [xs d]\n  (map second (filter \n    (fn [[i v]] (not (= 0 (mod i d))))\n    (map-indexed #(vector (inc %) %2) xs))))","problem":41,"user":"4e71920f535d5021c1a8964e"},{"code":"(fn f [xs n]\n  (if (empty? xs) xs\n  \t(let [[hd [x & tl]] (split-at (dec n) xs)]\n    \t(concat hd (f tl n)))))","problem":41,"user":"527236d4e4b03e8d9a4a741f"},{"problem":41,"code":"(fn [c n] (flatten (map #(take (- n 1) %) (partition-all n c))))","user":"58e5fbbae4b056aecfd47ca6"},{"code":"(fn [items n]\n  (let [drop-every-nth (fn [items n i]\n                         (if (> (dec (* n i)) (count items))\n                           (remove nil? items)\n                           (recur (assoc items (dec (* i n)) nil) n (inc i))))]\n    (drop-every-nth items n 1)))","problem":41,"user":"504ee511e4b0e7ad84dbc4a4"},{"code":"#((fn ! [l i] (if (empty? l) l (concat (take (dec i) l) (! (drop i l) i)))) %1 %2)","problem":41,"user":"5301a13ae4b0d8b024fd371e"},{"problem":41,"code":"(fn [coll n] (mapcat\n  #(if (= (rem %2 n) (dec n)) [] [%1])\n  coll\n  (-> coll count range)))","user":"5a4993c0e4b05d388ecb6b71"},{"problem":41,"code":"#( keep-indexed ( fn indexfn [ p1 p2 ]                                                                                                                                             \n                   ( if ( or                                                                                                                                                         \n                        ( = p1 0 )                                                                                                                                                   \n                        ( not= ( mod ( + p1 1 ) %2 ) 0 )                                                                                                                             \n                         )                                                                                                                                                           \n                     p2 ) ) %1 )","user":"5d5c6675e4b09db18d4482ec"},{"code":"#(->> (partition-all %2 %) (mapcat (fn [s] ((if (= %2 (count s)) butlast identity) s))))","problem":41,"user":"4dada913c9a9d6ed2d99dc57"},{"problem":41,"code":"(fn f [s x] \n  (if (> (count s) 0) \n    (concat \n     (take (- x 1) s) \n     (f (nthnext s x) x))))","user":"54f77213e4b01ecee9d8881d"},{"problem":41,"code":"(fn dropNth\n  ([ls n] (dropNth ls n 1))\n  ([[x & xs] n curr]\n    (if x\n    \t  (if (= n curr) \n        (dropNth xs n 1)\n        (cons x\n          (dropNth xs n\n            (mod (inc curr) (inc n)) \n          )\n        )\n      )\n    ) \n  )\n)","user":"57915ba4e4b0ebec4cfb75ba"},{"problem":41,"code":"(fn [l n]\n  (loop [remaining l\n         i 1\n         acc []]\n    (if (empty? remaining)\n      acc\n      (if (= i n)\n        (recur (rest remaining) 1 acc)\n        (recur (rest remaining) (+ 1 i) (conj acc\n                                              (first remaining)))))))","user":"55d4dddde4b0e31453f64a7f"},{"code":"(fn [xs n] \r\n  (reduce \r\n    (fn [xs [v i]]\r\n      (if (= i (dec n)) xs (conj xs v)))\r\n    []\r\n    (map vector \r\n      xs (cycle (range n)))))","problem":41,"user":"4e513758535dc968683fc4f3"},{"problem":41,"code":"(fn\n  [aseq n]\n  (let [n-1 (dec n)]\n    (loop [lseq aseq acc []]\n      (if (> n (count lseq))\n        (concat acc lseq)\n        (recur (drop n lseq) (concat acc (take n-1 lseq)))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":41,"code":"(fn [col n] (mapcat #(take (- n 1) %) (partition-all n col)))","user":"55f2b42be4b06e875b46ce4a"},{"problem":41,"code":"(fn [ls n]\n    (let [itr\n    \t(fn rec [ls i a]\n      \t\t(cond \n             \t(empty? ls) a\n            \t(= i n) (rec (rest ls) 1 a)\n            \t:else (rec (rest ls) (+ i 1) (cons (first ls) a))))]\n  (reverse (itr ls 1 '()))))","user":"56d7f340e4b0ea9b8538f7df"},{"problem":41,"code":"(fn [a b] \n  (letfn [(remove-helper [l m cur] (if (empty? l) [] \n                          (let [next-cur (if (= cur m) 1 (+ 1 cur))\n                                dummy (println \"l = \" l \", m = \" m \", cur = \" cur)]\n                            (if (= m cur)\n                              (remove-helper (rest l) m next-cur)\n                              (into (vector (first l)) (remove-helper (rest l) m next-cur))))))]\n    (remove-helper a b 1)))","user":"53e92821e4b036ad0777e499"},{"code":"#(mapcat butlast (partition %2 %2 [0] %1))","problem":41,"user":"50e3e108e4b01912b3285c48"},{"problem":41,"code":"(fn dropped [coll s]\n  (mapcat #(take (dec s) %) (partition-all s coll)))","user":"583f2e4de4b089d5ab817dcb"},{"problem":41,"code":"(fn [x, n]\n  (loop [i 0 len (count x) res []]\n    (if (< i len) \n      (if (not= (rem (inc i) n) 0) (recur (inc i) len (conj res (nth x i)))\n          (recur (inc i) len res)\n      )\n       res \n    )\n  )\n )","user":"57f28b22e4b0511f1d294def"},{"problem":41,"code":"(fn [seq n]\n  (if (= n 0)\n    []\n    (loop [i 0 r []]\n      (if (= i (inc (count seq)))\n        r\n        (if (= (mod i n) 0)\n          (recur (inc i) r)\n          (recur (inc i) (conj r (get seq (dec i)))))))))","user":"55151417e4b055c2f668d4da"},{"problem":41,"code":"(fn n-drop ([x n] (n-drop x n '()))\n   ([x n out]\n    (if (<= (count x) n)\n      (mapcat (fn [y] y) (reverse (cons (take (- n 1) (take n x)) out)))\n      (n-drop (drop n x) n (cons (take (- n 1) (take n x)) out)))))","user":"5dd90651e4b0948ae9d9ad97"},{"problem":41,"code":"(fn [lis n]\n  (->>\n    (range (count lis))\n    (filter #(or (= % 0) (not= (rem (inc %) n) 0)))\n  (map #(nth lis %))))","user":"58384bc4e4b089d5ab817d27"},{"problem":41,"code":"(fn\n              [seq count]\n              (cond (= count 0) seq\n                    (= count 1) []\n                    :else (loop [xs seq\n                                 acc ()\n                                 step (dec count)]\n                            (cond (empty? xs) (reverse acc)\n                                  (zero? step) (recur (rest xs) acc (dec count))\n                                  :else (recur (rest xs)\n                                               (conj acc (first xs))\n                                               (dec step))))))","user":"554ba1d3e4b0a04f79299595"},{"problem":41,"code":"(fn drop-nth [s n]\n  (let [ss (map-indexed (fn [i j] [(+ i 1) j]) s)]\n    (map second\n         (filter (fn [i] (not= (mod (first i) n) 0))\n         ss)\n    )))","user":"5f419985e4b0955706451fab"},{"problem":41,"code":"(fn [lst n] (:lst (reduce (fn [m x] (if (= 0 (mod (inc (:i m)) n)) {:i (inc (:i m)) :lst (:lst m)} {:i (inc (:i m)) :lst (conj (:lst m) x)})) {:i 0 :lst []} lst)))","user":"551589cee4b055c2f668d4e9"},{"problem":41,"code":"#(filter (comp not nil?) (flatten (partition (- %2 1) %2 (repeat nil) %1)))","user":"55496eeae4b0a04f79299569"},{"problem":41,"code":"(fn keep-nth [coll n] \n   (keep-indexed #(if-not (= 0 (mod (inc %1) n)) %2) coll))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"(fn dropEveryNth [coll n]\r\n    (concat\r\n     (mapcat butlast (partition n coll))\r\n     (drop (* n (quot (count coll) n)) coll)))","problem":41,"user":"4e7dfd48535db169f9c796fa"},{"code":"(fn [lst n] (keep-indexed #(if (not= (- n 1) (mod %1 n)) %2) lst))","problem":41,"user":"50b11fbce4b009df37c708cb"},{"code":"(fn [liste n]\n  (mapcat \n   #(take (dec n) %)\n   (partition-all n liste)))","problem":41,"user":"5141bc82e4b02fd87f5064c5"},{"problem":41,"code":"#(apply concat (partition-all (dec %2)%2 %))","user":"55d9743ae4b0e31453f64aca"},{"problem":41,"code":"(fn\n   [coll n]\n   (loop [coll coll\n          i 1\n          result []]\n     (if (empty? coll)\n       result\n       (if (= (mod i n) 0)\n         (recur (rest coll) (inc i) result)\n         (recur (rest coll) (inc i) (conj result (first coll)))))))","user":"60631c2ee4b069485764ddbd"},{"code":"#(reverse \n         (loop [r '()\n               c %1\n               p 1]\n              (cond\n               (empty? c) r\n               (zero? (mod p %2)) (recur r (rest c) (inc p))\n               :else (recur (conj r (first c)) (rest c) (inc p)))))","problem":41,"user":"511b810ce4b07ab9ec456182"},{"problem":41,"code":"(fn [c n] (apply concat (map #(take (- n 1) %) (partition-all n c))))","user":"5742ec91e4b05c31a32c0883"},{"code":"(fn [s n] \n  (map first \n    (filter (fn [[e i]] (> i 0))\n            (map (fn [e i] [e i]) s (rest (cycle (range n)))))))","problem":41,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":41,"code":"(fn dropn [input n]\n  (flatten\n    (for [s (partition-all n input)]\n      (if (= (count s) n) \n        (drop-last s)\n        s))))","user":"5b9bcba8e4b0c0b3ffbd4b07"},{"problem":41,"code":"#(->> (partition-all %2 %)\n      (map (fn [x] (take (dec %2) x)))\n      (flatten))","user":"5cfee28de4b0cc9c91588185"},{"problem":41,"code":"(fn \n  [coll n]\n  (mapcat identity\n          (partition-all (dec n) n coll)))","user":"5d6691cee4b0db5d338d15e9"},{"code":"(fn drop-nth [x n]\n  (if (< (count x) n)\n    x\n    (let [v   (split-at n x)\n          car (first v)\n          cdr (second v)]\n      (concat (drop-last 1 car)\n              (drop-nth cdr n)))))","problem":41,"user":"4ef0a39b535dced4c769f20c"},{"problem":41,"code":"(fn [list idx]\n  (keep-indexed #(if (not= (mod (inc %1) idx) 0 ) %2 ) list))","user":"57b55290e4b0fbc9809a27a9"},{"problem":41,"code":"(fn [s n]\n  (filter identity\n          (map-indexed #(if (zero? (mod (+ %1 1) n))\n                          nil\n                          (identity %2)) s)))","user":"57533bc1e4b02ea1147992a6"},{"problem":41,"code":"(fn [sequence drop-freq]\n  (remove\n   nil?\n   (map\n    #(if (= (mod % drop-freq) (- drop-freq 1))\n       nil\n       (nth sequence %))\n    (range (count sequence)))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":41,"code":"(fn [s n]\n    (apply concat (partition-all (dec n) n s)))","user":"4e8a170c535d3e98b802328f"},{"code":"(fn [coll n] \n  (keep-indexed #(if (pos? (mod (inc %1) n)) %2) coll))","problem":41,"user":"4e47f4f3535dc968683fc4bb"},{"problem":41,"code":"(fn [coll skip]\n  (mapcat (fn [v] (if (< (count v) skip) v (butlast v))) (partition-all skip coll)))","user":"55074092e4b021ccfedb96a4"},{"code":"(fn f ([x n]\n  (f x n 1 []))\n  ([x n c r]\n    (cond (empty? x) r\n          (= 0 (mod c n)) (recur (rest x) n (inc c) r)\n          :else (recur (rest x) n (inc c) (conj r (first x))))))","problem":41,"user":"507fbd77e4b089ade05efbd3"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (loop [i 0\n         result []]\n    (if (< i (count coll))\n      (if (and\n           (= (mod i n) (- n 1))\n           (> i 0))\n        (recur (+ i 1) result)\n        (recur (+ i 1) (conj result (nth coll i))))\n      result)))","user":"5779556de4b0979f8965166e"},{"code":"(fn [coll x]\n  (apply concat (map #(take (dec x) %)\n      (partition-all x coll))))","problem":41,"user":"4efec33f535dcb61093f6a2a"},{"problem":41,"code":"(fn [coll n]\n   (keep-indexed #(when-not (zero? (rem (inc  %1) n)) %2) coll))","user":"5687fe58e4b0dcc4269f4065"},{"problem":41,"code":"(fn [coll n]\n  (mapcat (fn [subcoll]\n            (if (< (count subcoll) n)\n              subcoll\n              (drop-last subcoll)))\n    (partition-all n coll)))","user":"541f6bc0e4b01498b1a71a98"},{"problem":41,"code":"(fn foo\n   [xs y]\n   (if (empty? xs)\n     '()\n     (let [[start end] (split-at (min (dec y) (count xs)) xs)]\n       (concat start (foo (rest end) y)))))","user":"603f6623e4b0d5df2af2231f"},{"code":"(fn my-dropnth \r\n    ([icoll inth] (my-dropnth icoll inth '()))\r\n    ([icoll inth ocoll]\r\n     (cond \r\n      (> inth (count icoll)) (reverse (into ocoll icoll))\r\n      :else (recur (drop inth icoll) inth (into ocoll (take (dec inth) icoll))))))","problem":41,"user":"4eee3e6a535d93acb0a668c3"},{"problem":41,"code":"(fn [coll times] \n  (for [y (range (count coll)) :when (< (rem y times) (dec times) )]    \n   (coll y)))","user":"54094824e4b0addc1aec66da"},{"code":"(fn [s n]\n  (vec \n    (clojure.set/difference \n      (set s)\n      (set (next (take-nth n (cons 0 s)))))))","problem":41,"user":"501c1492e4b086d93747d180"},{"problem":41,"code":"(fn [s n] (let [part-s (partition-all n s)]\n            (into [] (mapcat (fn [coll] (if (>= (count coll) n)\n                              (drop-last coll)\n                              coll\n                              ))\n                 part-s))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":41,"code":"(fn keep-nth [coll n]\n  (keep-indexed #(when (-> %1 inc (mod n) (= 0) not) %2) coll)\n  )","user":"58f3a2d4e4b0438e51c2ceac"},{"code":"(fn [coll num]\r\n   \r\n  (let [num (dec num)]\r\n    (loop [coll coll acc []]\r\n    (let [v (vec coll)]\r\n      (if (> (count coll) num)\r\n        (recur (drop (inc num) coll)\r\n               (into acc (subvec v  0 num)))\r\n        (into acc v)\r\n        )))))","problem":41,"user":"4e0d8c27535d04ed9115e7b7"},{"code":"(fn drop-nth [coll n]\n  (keep-indexed \n   (fn [index item] \n     (if (not= 0 (mod (inc index) n))\n       item\n       nil))\n   coll))","problem":41,"user":"50ee68fce4b06330c1f87c59"},{"code":"(fn [a b] (flatten (map #(take (- b 1) %) (partition-all b a))))","problem":41,"user":"4e9a8c0e535dbda64a6f6b72"},{"problem":41,"code":"(fn [c i] (map (fn [x] (nth c x)) (for [j (range (count c)) :when (< 0 (mod (inc j) i))] j)))","user":"52384eb1e4b0fae3832e99fa"},{"problem":41,"code":"(fn [coll n] (reduce-kv #(if (= (mod (+ %2 1) n) 0) %1 (conj %1 %3)) [] coll))","user":"5caf9cace4b026601754b89b"},{"problem":41,"code":"(fn my-fn2[lst n]\n (keep-indexed #(if (not= 0 (rem ( + %1 1) n)) %2 nil) lst))","user":"578f8a0ae4b0ebec4cfb7596"},{"code":"(fn [c n]\n    (->> (map #(list % %2) (iterate inc 1) c)\n         (filter #(not (= 0 (mod (first %) n))))\n         (map second)))","problem":41,"user":"5398305fe4b0b51d73faaef6"},{"code":"(fn [l num] \n  (apply list \n    (for [[i e] (map-indexed vector l) :when (not= (mod i num) (- num 1))] e)\n))","problem":41,"user":"4fad77a6e4b081705acca23a"},{"problem":41,"code":"(fn [coll value]\n  (apply concat (partition-all (dec value) value coll)))","user":"55ec1048e4b0121d4835fdc3"},{"problem":41,"code":"#(loop [acc []\n        x %1\n        i 1]\n   (if (empty? x)\n     acc\n     (if (not= (mod i %2) 0)\n        (recur (conj acc (first x)) (rest x) (inc i))\n         (recur acc (rest x) (inc i)))))","user":"5e6cfc25e4b04a83ad7cd28e"},{"code":"(fn [s n] \n  (loop [in [] more s acc []] \n    (if (empty? more) \n      (concat acc in) \n      (recur (take (dec n) more) (drop n more) (concat acc in)))))","problem":41,"user":"5003deb9e4b0678c553fc445"},{"problem":41,"code":"#(keep-indexed (fn [i x]\n                 (if (pos? (rem (inc i) %2)) x))\n               %1)","user":"54f26266e4b024c67c0cf8c5"},{"code":"(fn [ l d ] \n  (filter #( not (= % \"a\")) (reduce concat (partition (dec d) d (take d (repeat \"a\")) l) )))","problem":41,"user":"4fc43a8ee4b081705acca346"},{"code":"#(mapcat \n  (partial take (dec %2))\n  (partition-all %2 %1))","problem":41,"user":"5089ebfee4b03217b26a539f"},{"problem":41,"code":"#(sort (into [] (clojure.set/difference (set %1) (set (take-nth %2 (cons 0 %1))))))","user":"566734c4e4b04acd4f672dcc"},{"code":"(fn [coll n]\n  (keep-indexed (fn [i v] \n                  (when (< 0 (rem (inc i) n))\n                    v)) coll))","problem":41,"user":"52c884a2e4b0c2d177d62136"},{"problem":41,"code":"#(flatten (partition-all (- %2 1) %2 %1))\n\n;;apply concat","user":"5547b72be4b0a04f79299550"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (map #(first (rest %))\n       (filter #(not (= 0 (mod (first %) n)))\n               (map list (iterate inc 1) coll))))","user":"540b2dcbe4b0addc1aec66f4"},{"code":"(fn [x n]\n     (->>\n       (map vector x (iterate inc 1))\n       (reduce\n         (fn [x y]\n           (if (= (rem (second y) n) 0)\n             x (cons (first y) x)))\n         '())\n       (reverse)))","problem":41,"user":"4f616892e4b0defedf855fbf"},{"problem":41,"code":"(fn [x n]\n  (loop [i 1\n         myseq x\n         res []]\n    (if (empty? myseq)\n      res\n      (recur (inc i) (rest myseq)\n             (if (= (rem i n) 0)\n               res\n               (conj res (first myseq)) )))))","user":"56646a7fe4b0e91d5f5c5657"},{"problem":41,"code":"(fn [xs c]\n  (last (reduce \n    #(if (not= (mod (first %) c) 0)\n\t[(inc (first %)) (conj (last %) %2)]\n\t[(inc (first %)) (last %)])\n[1 []]\nxs)))","user":"54ab502fe4b09f271ff37cc4"},{"code":"(fn drop-nth [coll n]\n  (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n coll))))","problem":41,"user":"532c9dc9e4b019098a6f8b30"},{"problem":41,"code":"(fn [x n]\n\t\t(keep-indexed\n\t\t\t(fn [idx item]\n\t\t\t\t(if (= (rem (inc idx) n) 0)\n\t\t\t\t\tnil\n\t\t\t\t\titem))\n\t\t\tx))","user":"598d746ae4b02b9968b84d23"},{"code":"#(apply concat (map butlast (partition %2 %2 [nil] %)))","problem":41,"user":"51424cc8e4b0b50abeb46b34"},{"problem":41,"code":"#(keep-indexed (fn [p q] (if (not= 0 (rem (+ 1 p) %2)) q)) %)","user":"56066e82e4b08b23635d3173"},{"code":"(fn [l n] \n  (loop [ll l \n         i n \n         acc []] \n    (cond \n     (empty? ll)  acc\n     (= 1 i) (recur (next ll) n acc)\n     :else (recur (next ll) (dec i) (conj acc (first ll)))\n    ) \n  ) \n)","problem":41,"user":"51d67516e4b0154f82ab92f0"},{"problem":41,"code":"(fn drop-every-nth [s n] (mapcat #(take (dec n) %) (partition-all n s)))","user":"5a591d04e4b05d388ecb6c90"},{"code":"(fn drop-every-nth [coll n]\n  (letfn [(drop? [x] \n            (= (mod x n) 0))]\n    (loop [acc [] cnt 1 coll coll]\n      (if (empty? coll)\n        acc\n        (if (drop? cnt)\n          (recur acc (inc cnt) (next coll))\n          (recur (conj acc (first coll)) (inc cnt) (next coll))))\n        )))","problem":41,"user":"5042de0de4b034ff00315d1b"},{"problem":41,"code":"(fn [lst n]\n  ((fn [ans nxt k]\n    (if nxt\n      (if (zero? (mod k n))\n        (recur ans (next nxt) (inc k))\n        (recur (conj ans (first nxt)) (next nxt) (inc k))\n      )\n      ans\n    )\n  ) [] lst 1)\n)","user":"5cebafbbe4b0a17bb84e2be6"},{"code":"(fn [coll n]\n  (keep-indexed\n   (fn [idx x]\n     (if-not (= 0 (mod (inc idx) n))\n       x))\n     coll))","problem":41,"user":"52851da0e4b0239c8a67adea"},{"problem":41,"code":"(fn d [coll n] (keep-indexed #(when-not (zero? (rem (inc %1) n))\n                               %2) coll))","user":"578d459ee4b0ebec4cfb7567"},{"code":"(fn f [X n]\n  (if (> n (count X)) X\n    (concat (drop-last (take n X)) (f (drop n X) n))))","problem":41,"user":"51ad0ab8e4b09397d510977b"},{"problem":41,"code":"(fn [sequence number]\n    (flatten \n     (concat \n      (map drop-last (partition number sequence)) \n      (take-last (mod (count sequence) number) sequence)) \n     ) \n)","user":"5545f713e4b0a04f7929953a"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not (= 0 (mod (+ %1 1) n))) %2) coll))","user":"5b34aba7e4b025bcb146f352"},{"problem":41,"code":"(fn dropn [l n]\n  (map first\n  (remove\n    #(= 0 (rem (last %) n))\n    (partition 2 (interleave l (range 1 99))))))","user":"56069006e4b08b23635d3174"},{"problem":41,"code":"#(keep-indexed \n  (fn [i e] (if (pos? (mod (inc i) %2)) e)) %1)","user":"56f5d0efe4b046a417f92078"},{"code":"(fn [c n] (flatten (partition-all (dec n) n c)))","problem":41,"user":"4fca2ef0e4b0ee37620e184e"},{"problem":41,"code":"(fn dn \n  ([l m] \n   (dn l m 1 []))\n  ([l m i a]\n   (if (empty? l)\n     a\n     (dn (rest l) m (inc i) (if (= 0 (mod i m))\n                       a\n                       (conj a (first l)))))))","user":"55ea6b76e4b0121d4835fdaf"},{"code":"#(flatten (partition-all (dec %2) %2 %))","problem":41,"user":"4e589bdc535d8a8b8723a295"},{"problem":41,"code":"(fn\n  [s n]\n  (loop [part s\n         result []]\n    (if (< (count part) n)\n      (concat result part)\n      (recur (nthrest part n)\n             (concat result (drop-last (take n part)))))))","user":"53e0001be4b0d874e779ae48"},{"code":"#(for [i (range (count %1))\n       :when (not= (mod (+ i 1) %2) 0)]\n   (%1 i))","problem":41,"user":"538d8bb8e4b0b51d73faae71"},{"code":"(fn [x n] (keep-indexed #(if (> (mod (+ %1 1) n) 0) %2) x) )","problem":41,"user":"4fe9cea4e4b0547ebccb2471"},{"code":"(fn [coll x] \n(mapcat #(take (dec x) %) (partition-all x coll)))","problem":41,"user":"5202cfe7e4b030ee0c5b2702"},{"code":"#(mapcat (fn [x]\n       (if \n        (= (count x) %2)\n        (butlast x)\n        x)) (partition-all %2 %1))","problem":41,"user":"5215661be4b02f6d8ea676c7"},{"code":"(fn [xs n] \n  (mapcat (partial take (dec n)) \n   (partition-all n xs)))","problem":41,"user":"4f6511eee4b07046d9f4ef3a"},{"problem":41,"code":"(fn [sc n]\n  (loop [i 1 s sc acc []]\n    (cond (empty? s) acc\n          (integer? (/ i n)) (recur (inc i) (rest s) acc)\n          :else (recur (inc i) (rest s) (conj acc (first s)))\n          )))","user":"57035ccfe4b08d47c97781ef"},{"problem":41,"code":"(fn [ coll n] (keep-indexed #(when-not (zero? (rem (inc %1) n)) %2) coll))","user":"5b4c2212e4b02d533a91bca6"},{"code":"(fn my-drop-nth\n  ([coll i n]\n     (cond (empty? coll) '()\n           (= i 0)        (my-drop-nth (rest coll) (mod (+ i 1) n) n)\n           :else          (conj (my-drop-nth (rest coll) (mod (+ i 1) n) n) (first coll))))\n  ([coll n] (my-drop-nth coll 1 n)))","problem":41,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":41,"code":"(fn [a x]\n  (loop [cnt 1 lst () fir a]\n    (if (empty? fir) (reverse lst)\n      (if (not= (mod cnt x) 0) (recur (inc cnt) (conj lst (first fir)) (rest fir))\n        (recur (inc cnt) (seq lst) (rest fir))))))","user":"563130e4e4b0bfe05bf1178d"},{"code":"(fn [l n]\n  (loop [out [] i 1 l2 l]\n    (if (empty? l2)\n      out\n      (recur (if (zero? (mod i n)) out (conj out (first l2))) (inc i) (rest l2)))))","problem":41,"user":"4dd9d299535d2dad7130b5dd"},{"problem":41,"code":"(fn [lst idx] (map second (remove #((into #{} (range (dec idx) (count lst) idx)) (first %1)) (map-indexed vector lst))))","user":"583a360de4b089d5ab817d4f"},{"code":"(fn [vect z]\n  (map first\n    (filter #(not= (mod (+ (last %) 1) z) 0)\n      (map-indexed #(vector %2 %1) vect)\n    )\n  )\n)","problem":41,"user":"51b3a2c8e4b0f094dd986fa6"},{"problem":41,"code":"(fn [lst n] (remove #(contains? (apply hash-set (take-nth n (conj (apply list lst) 0))) %) lst))","user":"578b140be4b0ebec4cfb7545"},{"code":"(fn [xs n]\n    (loop [xs xs, i 1, res ()]\n      (cond (empty? xs) (reverse res)\n            (= i n) (recur (rest xs) 1 res)\n            :else (recur (rest xs) (+ i 1) (cons (first xs) res)))))","problem":41,"user":"5055e7f4e4b0ce54f56f0401"},{"code":"(fn ri [col i] \n  (if (empty? col) \n    ()\n    (concat (take (dec i) col)\n    (ri (drop i col) i))\n  )\n)","problem":41,"user":"4f31ad57e4b0d6649770a089"},{"problem":41,"code":"(fn [vecty a]\n  (->> vecty\n       (map vector (iterate inc 1))\n       (remove #(zero? (mod (first %) a)))\n       (map second)))","user":"58dd20dae4b0a4d5acaab6b2"},{"problem":41,"code":"(fn [coll x]\n  (flatten (map #(take (- x 1) %) (partition-all x coll))))","user":"572a856be4b0f4d77e65123b"},{"problem":41,"code":"(fn [xs step] \n\t  (flatten\n\t    (reduce\n\t      #(conj (if (= (count %2) step) (drop-last 1 %2) %2) %1) `()\n\t      (partition step step `() xs)\n\t    )\n\t  )\n\t)","user":"58b4898de4b0ebc645576d3d"},{"code":"(fn drop-nth [lst n]\n  (keep-indexed #(when (> (mod (inc %1) n) 0) %2)\n  lst))","problem":41,"user":"52facb9de4b047fd55837002"},{"problem":41,"code":"(fn [l n]\n   (filter (fn [it]\n             (not (= (mod (inc (.indexOf l it)) n) 0))) l))","user":"590b3aeae4b047aa04b199d0"},{"code":"(fn dropnth [l n] (let [d (fn dro [l n c]\n                                  (if (not(empty? l) )\n                                    (if (= (mod c n) 0)\n                                      (dro (rest l) n (inc c) )\n                                      (concat [(first l)] (dro (rest l) n (inc c) ))\n                                      )))  ] (d l n 1)))","problem":41,"user":"5245d29ae4b09dbe66b56174"},{"problem":41,"code":"(fn [xs n]\n    (mapcat #(take (dec n) %)\n      (partition-all n xs))\n  )","user":"598debf0e4b02b9968b84d2e"},{"code":"(fn dropper [l n] (flatten (map #(vec (take (- n 1) %)) (partition-all n l))))","problem":41,"user":"5210ac52e4b080a8d9b9d63e"},{"problem":41,"code":"(fn [x y] (keep-indexed #(if (= (inc (mod % y)) y) nil %2) x))","user":"4de14aad535d08e6dec9fde5"},{"problem":41,"code":"( fn [v n] (->> v (partition-all n) (map #(if (= n (count %)) (butlast %) %)) (apply concat) ))","user":"4f0d6686535d0136e6c22318"},{"code":"#(keep-indexed (fn [index item] (if (= (rem (+ index 1) %2) 0) nil item)) %)","problem":41,"user":"51a7b4fee4b0da5f497bde8b"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not (= (mod %1 n) (dec n))) %2) coll))","user":"553a43cae4b09218d5f44ff2"},{"problem":41,"code":"(fn [coll n]\n    (map first\n         (remove (fn [[val idx]] (= 0 (mod idx n)))\n                 (map vector coll (iterate inc 1)))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":41,"code":"(fn drop-every [s n]\n  (keep-indexed\n    (fn [index item]\n      (when-not (zero? (mod (inc index) n))\n        item))\n    s))","user":"5d0eed51e4b0cc9c91588262"},{"problem":41,"code":"(fn f [l k]\n  (if (seq l)\n    (concat (take (- k 1) l)\n            (f (drop k l) k))))","user":"5791d259e4b0ebec4cfb75c0"},{"problem":41,"code":"(fn [ray n] (map #(get ray (dec %)) (filter #(not (= 0 (mod % n))) (range 1 (+ 1 (count ray))))))","user":"591d7ef9e4b09b4ee5954c18"},{"code":"(fn [l c]\n\t\t   (reduce #(concat  %  (take (dec c) %2)) '() (partition-all c l))\n\t\t   )","problem":41,"user":"50b78ac9e4b0cf3e51c3046a"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed #(if (pos? (mod (inc %) n)) %2) s))","user":"55625903e4b0c656e3ff17d7"},{"code":"#(apply concat (partition (- %2 1) %2 [] %))","problem":41,"user":"4ebb78a2535dfed6da9c6d70"},{"problem":41,"code":"#(reduce\n   (fn [a b]\n     (if (= (dec %2) (rem (.indexOf %1 b) %2))\n      a\n       (conj a b))\n   ) [] %1)","user":"53e76728e4b036ad0777e47c"},{"problem":41,"code":"#(remove \n  (set (take-nth %2(into [0] %)))%)","user":"542c44f8e4b0dad94371f2a1"},{"code":"(fn [c n]\n  (let [not-div-by? #(not (= (rem %1 %2) 0))\n        enum-list (map list (iterate inc 1) c)]\n    (map second (filter #(not-div-by? (first %) n) enum-list))))","problem":41,"user":"52a503e4e4b0c58976d9abe1"},{"code":"(fn [array size]\n  (sort \n    (loop [limit 1 arr array s size res (list)]\n    (if (nil? arr)\n      res\n      (recur (inc limit) (next arr) s (if (= 0 (mod limit s))\n                                        res\n                                (conj res (first arr))))))\n    ))","problem":41,"user":"4ef2d6c5535dced4c769f222"},{"code":"(fn skip [l x]\n  (if (< (count l) x)\n    l\n    (concat (take (dec x) l) (skip (drop x l) x))))","problem":41,"user":"4ec5d40d535d6d7199dd36b9"},{"problem":41,"code":"(fn drop [s n]\n  (vec (flatten (partition (dec n) n nil s))))","user":"562b1a7be4b058fa18c5a6cb"},{"problem":41,"code":"(fn [coll n]\n  (flatten (map \n \t#(if (= (count %) n) \n    \t(butlast %) \n       \t%)  \n   \t(partition-all n coll))))","user":"5514a60fe4b055c2f668d4d7"},{"problem":41,"code":"(fn [coll x]\n  (map #(second %) \n    (filter (fn [[a _]] (not= 0 (rem a x)))\n      (map-indexed #(vector (inc %) %2) coll))))","user":"5e12327ee4b099d064962fe5"},{"problem":41,"code":"(fn seq-drop-n [ls n]\n  (apply vector (apply concat (partition-all (- n 1) n ls))))","user":"59ece650e4b0249b72820795"},{"problem":41,"code":"(fn sk-drop-nth [list nth]\n  (keep-indexed\n    (fn [index item]\n      (if (not= 0 (mod (inc index) nth))\n        item))\n    list))","user":"5884f377e4b0f1effa3b76a8"},{"problem":41,"code":"(fn my-drop-every-nth\n  [x\n   nth-to-drop]\n  (filter #(not= 0 (rem (+ (.indexOf x %) 1) nth-to-drop)) x))","user":"5d9c8a85e4b0eb781811cdad"},{"code":"#(mapcat (fn [s] (take (dec %2) s)) (partition-all %2 %))","problem":41,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":41,"code":"(fn [seq n]\n             (map last (filter #(not= (mod (+ 1 (first %)) n) 0)\n                                 (map-indexed (fn [& x] x) seq))))","user":"5a813b90e4b00b71e582a065"},{"problem":41,"code":"(fn [coll n]\n  (loop [in coll\n         mid []\n         out []]\n    (if (not (seq in))\n      (concat out mid)\n    (if (= (count mid) (- n 1))\n      (recur (rest in) [] (concat out mid))\n      (recur (rest in) (conj mid (first in)) out)))))","user":"5713f874e4b07c98581c3ab1"},{"code":"(fn [l n] (map second (filter #(not= 0 (rem (inc (first %)) n)) (map-indexed vector l))))","problem":41,"user":"5273e006e4b03e8d9a4a7495"},{"problem":41,"code":"(fn [coll n]\n  (remove nil? (map-indexed #(if (= (- n 1) (mod %1 n)) nil %2) coll)))","user":"567c2322e4b05957ce8c61af"},{"code":"(fn [x y] (loop [l x result []] (if (empty? l) (flatten result) (recur (drop y l) (conj result (vec (take (- y 1) l)))))))","problem":41,"user":"5314318ee4b08068f379ed13"},{"code":";(fn [coll n]\n;  (let [[firsts lasts] (split-at (dec n) coll)]\n;    (concat firsts\n;      (mapcat rest (partition-all n lasts)))))\n\n(fn [coll n]\n  (map second\n    (remove #(zero? (mod (inc (first %)) n))\n      (map-indexed list coll))))\n\n; #(-> % first inc (mod n) zero?)","problem":41,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":41,"code":"(fn [col nth]\n    (loop [incol col\n           idx 1\n           result (vector)]\n      (if (empty? incol)\n        result\n        (let [[item & rest] incol]\n          (if (= (mod idx nth) 0)\n            (recur rest (inc idx) result)\n            (recur rest (inc idx) (conj result item)))))))","user":"554a75c9e4b0a04f79299575"},{"code":"(fn [aseq nmbr]\n  (filter \n    (fn [itm] (not (nil? itm)))\n    (map (fn [keep item] (if (true? keep) item )  ) (cycle (reverse (cons false (repeat (dec nmbr) true)))) aseq))\n  )","problem":41,"user":"5135a74ae4b04ac1f358dd46"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (map last (filter #(> (mod (first %) n) 0)\n            (map list (iterate inc 1) coll))))","user":"561ca6ebe4b064ca9f4b169c"},{"code":"(fn drop-every-nth [a-list n]\n  (first \n    (reduce (fn [m i]\n      (let [index (last m), list-sofar (first m)]\n        (if (= (mod index n) 0)\n          [list-sofar (inc index)]\n          [(conj list-sofar i) (inc index)])))\n      [[] 1] \n      a-list)))","problem":41,"user":"50ba3acae4b03e68e4411c78"},{"code":"(fn intersperse [lst drp]\n  (let [rm (rem (count lst) drp)\n        tk (if (or (= rm 0) (= rm (- drp 1))) 0 rm)]\n    (concat (apply concat (partition (- drp 1) drp lst))\n            (reverse (take tk (reverse lst))))))","problem":41,"user":"51c76864e4b07ef393169e3f"},{"code":"(fn [coll n]\n  (loop [z [] i 0]\n    (if (= i (count coll))\n      z\n      (if (zero? (mod (inc i) n))\n        (recur z (inc i))\n        (recur (conj z (nth coll i)) (inc i))))))","problem":41,"user":"523f1245e4b01c266ffa7f95"},{"problem":41,"code":"(fn foo [coll n] (let [s (seq coll)] (when s (concat (take (dec n) s) (foo (drop n s) n)))))","user":"5cece5a2e4b0a17bb84e2bfb"},{"problem":41,"code":"(fn [xs n]\n  (loop [xs xs n n ret '()]\n    (if (> n (count xs))\n      (concat ret xs)\n      (recur (drop n xs) n (concat ret (take (dec n) xs))))))","user":"5d81b40ce4b0915913b1d379"},{"problem":41,"code":"(fn [coll n] (flatten (map #(take (dec n)%) (partition-all n coll))))","user":"55f2fdc3e4b06e875b46ce51"},{"problem":41,"code":"(fn [xs n]\n  (reduce-kv\n  \t(fn [rs ix v]\n      (if (zero? (mod (inc ix) n))\n        rs\n        (conj rs v)))\n    []\n    xs))","user":"583369e6e4b089d5ab817c9c"},{"problem":41,"code":"(fn [c n] [c n] (flatten (map (fn [x] (if (= (count x) n) (reverse (rest (reverse x))) x)) (partition-all n c))))","user":"553c4614e4b09218d5f45014"},{"problem":41,"code":"(fn [x y](into [](flatten (partition-all (- y 1) y x))))","user":"57b8f784e4b0fbc9809a27ea"},{"problem":41,"code":"#(keep-indexed \n    (fn [k, v] \n        (when\n          (>  (rem (inc k) %2) 0)\n          v)) \n   %1)","user":"54213a8fe4b01498b1a71aaf"},{"problem":41,"code":"(fn [x y]\n  (->> x\n       (partition-all (dec y) y)\n       (mapcat identity)))","user":"528e441be4b0239c8a67aed8"},{"problem":41,"code":"(fn [s n] (filter #(not (= (rem (.indexOf s %) n) (- n 1))) s))","user":"5f1c7c3be4b0f565ad998261"},{"code":"(fn [c e]\n  (keep-indexed #(when (pos? (mod (+ 1 %) e)) %2) c))","problem":41,"user":"4f2c2ccbe4b0d6649770a050"},{"problem":41,"code":"(fn [S n] (mapcat identity (partition (dec n) n nil S)))","user":"55f6fe09e4b06e875b46cea2"},{"code":"(fn drop-every-nth [s n]\n  (let [current (take (dec n) s), remaining (drop n s)]\n    (if\n      (empty? remaining)\n      current\n      (concat\n        current\n        (drop-every-nth remaining n)))))","problem":41,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"#(for [i (range (count %1)) :when (not= (mod i %2) (- %2 1))] (%1 i))","problem":41,"user":"512eb1e7e4b0b740abc5982a"},{"problem":41,"code":"(fn [sq n]\n  ((fn dr-nth [sq i rst]\n     (cond (nil? (first sq)) (reverse rst) \n           (= (rem i n)\n              0) (dr-nth (rest sq)\n                         (+ i 1)\n                         rst)\n           :else (dr-nth (rest sq)\n                         (+ i 1)\n                         (conj rst (first sq))))) sq 1 nil))","user":"57614a42e4b0994c1922fb85"},{"code":"(fn [s n]\n  (keep-indexed (fn [idx item] (if (not= 0 (rem (inc idx) n)) item)) s))","problem":41,"user":"52090654e4b0e152394d76ee"},{"code":"(fn [x n]\n   (let [y (partition n n nil x)]\n     (mapcat #(take (dec n) %) y)\n   )\n  )","problem":41,"user":"535056a7e4b084c2834f4adb"},{"code":"#(keep-indexed (fn [i x] (when (not= 0 (mod (inc i) %2)) x)) %1)","problem":41,"user":"5394aa77e4b0b51d73faaecd"},{"problem":41,"code":"(fn drop-nth-me\n   [coll n]\n   (apply concat (partition-all (dec n) n coll)))","user":"5ab23c99e4b073f1774425e2"},{"problem":41,"code":"(fn [y k] (flatten (map (fn [x] (take (- k 1) x)) (partition-all k y)) ))","user":"5ccb3792e4b0ccb061962882"},{"problem":41,"code":"(fn [data x]\n  (vec (flatten\n  (for [y (partition x x nil data)]\n    (if (= (count y) x)\n      (pop (vec y))\n      (vec y))))))","user":"57b19fa1e4b0fbc9809a2754"},{"problem":41,"code":"(fn [xs n]\n\t(mapcat #(if (= (count %1) n) (butlast %1) %1) (partition-all n xs))\n )","user":"54c74a78e4b045293a27f637"},{"problem":41,"code":"(fn drop-n [seqq, n]\n  (keep-indexed #(if (< (mod %1 n) (dec n)) %2) seqq))","user":"59971e2de4b07157cc8daacc"},{"code":"(fn [coll n] (vec (for [[x y] (apply map vector [(rest (range (+ 1 (count coll)))) coll])\n                   :when (not (zero? (mod x n)))]\n               y)))","problem":41,"user":"5245af03e4b08ba239308124"},{"code":"(fn x [c n] (when-let [s (seq c)] (lazy-seq \n  (concat (take (dec n) s) (x (drop n s) n)))))","problem":41,"user":"4ecf1f51535d1f5ad70dba3a"},{"code":"(fn [sq n]\n  (apply concat \n    (map #(if (= (count %) n) (butlast %) %) \n      (partition-all n sq))))","problem":41,"user":"503255d0e4b0e78df07b092b"},{"problem":41,"code":"(fn[coll n]\n  (mapcat #(take (dec n) %) (partition-all n coll)))","user":"55950c5fe4b0c79f6e1db95e"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [index item] (if (not= 0 (mod (inc index) n)) item)) coll))","user":"57eb38dbe4b0bfb2137f5b5e"},{"problem":41,"code":"(fn [l n] (keep-indexed #(if (not= (dec n) (mod %1 n)) %2) l))","user":"5454b84ce4b0e397800069d9"},{"code":"(fn [xs v] (mapcat #(take (- v 1) %) (partition-all v xs)))","problem":41,"user":"4ec07699535dfed6da9c6da2"},{"problem":41,"code":"(fn [lst n] \n        (mapcat \n            #(if (= (count %) n) (butlast %) %)\n            (partition-all n lst)))","user":"5bbbce0ee4b0a20761a2360d"},{"problem":41,"code":"(fn [x n]\n  (loop [r '()\n         m n\n         rs x]\n    (if (= rs '())\n      r\n    (if (= 1 m)\n      (recur r n (rest rs))\n      (recur (concat r [(first rs)]) (- m 1) (rest rs))\n     )\n     )\n   )\n )","user":"5e265173e4b05b4b01516175"},{"problem":41,"code":"(fn [ls n] (map first (filter (fn [[a b]] (not= b 1))\n                          (map vector ls (cycle (range n 0 -1))))))","user":"4ea03f70535d7eef308072a1"},{"code":"#(remove nil? \n         (map-indexed (fn [a b] (if (zero? (mod (+ a 1) %2)) nil b))\n                      %1))","problem":41,"user":"52f07ccee4b05e3f0be25edf"},{"code":"(fn dropN [s n]\n  (loop [res [] i 1 c s]\n    (if (nil? c) res \n    (if (zero? (rem i n)) \n          (recur res                   (inc i) (next c))\n          (recur (conj res (first c))  (inc i) (next c))))))","problem":41,"user":"507db411e4b03c76e5499e06"},{"problem":41,"code":"(fn [s n]\n  (loop [rm s out '()]\n    (if (empty? rm)\n      out\n      (let [new-out (concat out (take (dec n) rm))]\n        (recur (drop n rm) new-out)))))","user":"576844cde4b0a07e8fc180ce"},{"problem":41,"code":"(fn [coll n] (->> coll (partition-all n) (mapcat (partial take (dec n)))))","user":"57b7de74e4b0fbc9809a27d4"},{"problem":41,"code":"(fn drop_every_nth [list pos]\n    (if (< (count list) pos)\n        list\n        (concat (take (- pos 1) list) (drop_every_nth (nthrest list pos) pos))))","user":"57168a0de4b07c98581c3afb"},{"problem":41,"code":"(fn [items n] (flatten (map #(take (dec n) %) (partition-all n items ))))","user":"50d3317ee4b049d4ed5650da"},{"problem":41,"code":"#(map (fn [x] (first x))\n        (filter \n  \t\t\t(fn [x] (> (mod (second x) %2) 0)) \n \t\t     (map (fn [x y] [x y]) \n                  %1 (range 1 (inc (count %1)))\n              )\n         \t\n        )\n      \n)","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn drop-nth [coll n]\n  (let [with-indexes (map #(vector %1 %2) coll (rest (range)))\n        filtered (filter #(not= (mod (second %) n) 0) with-indexes)]\n    (map first filtered)))","problem":41,"user":"4eb7b049535d7eef30807377"},{"code":"(fn [s n]\n  (apply concat\n         (map #(take (dec n) %) (partition-all n s))))","problem":41,"user":"4facd2fae4b081705acca22f"},{"problem":41,"code":"(fn [coll n]\n    (flatten (partition-all (dec n) n coll)))","user":"529e3258e4b04e0c58e87b8d"},{"problem":41,"code":"(fn [elems n] (flatten (map (fn [p] (if (>= (count p) n) (butlast p) p)) (partition-all n elems))))","user":"520ed237e4b0101e4be6fcd9"},{"problem":41,"code":"(fn [xs n]\n  (vec (map second (filter (fn [pair] (not (= (mod (first pair) n) 0))) \n                           \n                           \n                       (map-indexed #(list %1 %2) (cons 1 xs))\n                           \n                           \n                           ))))","user":"5be58beae4b0ed4b8aab4d14"},{"code":"#(for [[n x] (map vector (range) %) :when (> (mod (+ n 1) %2) 0)] x)","problem":41,"user":"4e1fe7f1535d04ed9115e810"},{"code":"#(filter \n  (complement nil?) \n  (map-indexed (fn f[index,item] \n                 (if (= (mod (+ index 1) %2) 0) nil item)  ) %1))","problem":41,"user":"5271b940e4b03e8d9a4a73fb"},{"code":"(fn foo [lst n]\n  (cond\n    (nil? lst) []\n    (= 0 (mod (count lst) n)) (foo (butlast lst) n)\n    true (concat (foo (butlast lst) n) (take-last 1 lst))\n    )\n  )","problem":41,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":41,"code":"(fn [arr skip-on] (keep-indexed #(when (not= 0 (rem (inc %1) skip-on)) %2) arr))","user":"58ee84e5e4b056aecfd47dab"},{"problem":41,"code":"(fn [s n] (loop [i 1 r [] t s] \n            (if (empty? t) r \n              (if (= i n) \n                (recur 1 r (rest t)) \n                (recur (inc i) (conj r (first t)) (rest t))\n                )\n              )\n            )\n  )","user":"5b2eba82e4b025bcb146f2dd"},{"problem":41,"code":"(fn [x, n]\n   (->> x\n     (map-indexed #(if (not= 0 (rem (inc %1) n)) %2))\n     (filter #(not= nil %))\n   ))","user":"588906a9e4b0f1effa3b772a"},{"code":"(fn drop-nth [s, nth]\n  (let [pairs (map #(vec %&) (iterate inc 1) s)\n        filtered-pairs (filter (fn [[i v]] ((complement zero?) (rem i nth))) pairs)]\n    (map #(second %) filtered-pairs)))","problem":41,"user":"50a7ef7fe4b090657f4a5ce0"},{"code":"#(reduce concat (partition-all (- %2 1) %2 %))","problem":41,"user":"50045388e4b0678c553fc44e"},{"problem":41,"code":"(fn [xs x]\n   (mapcat #(take (dec x) %) (partition-all x xs)))","user":"5327c591e4b09d4e7a9b54ff"},{"code":"(fn mydrop [s n] (if (seq s) (concat (take (- n 1) s) (mydrop (nthrest s n) n))))","problem":41,"user":"50982769e4b04e098a4c726a"},{"problem":41,"code":"(fn [v m]\n  (loop [i 0 r []]\n   (if (= i (count v))\n     r\n     (if (zero? (mod (inc i) m))\n      (recur (inc i) r)\n      (recur (inc i) (conj r (nth v i)))\n     )\n   ))\n)","user":"559279b7e4b0604b3f94d58c"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n    (fn [idx e] (when (not= (mod (inc idx) n) 0) e))\n    coll))","user":"51fda906e4b0f1313d468a4f"},{"code":"(fn drop-nth [coll n]\r\n    (let [no-match (Object.)]\r\n      (remove #{no-match} (apply concat (partition (dec n) n (repeat no-match) coll)))))","problem":41,"user":"4f149e0f535d64f60314643d"},{"code":"(fn ! [s n]\n  (when (seq s)\n    (concat (take (- n 1) s) (! (rest (drop  (- n 1) s)) n))))","problem":41,"user":"4f1d1299535d64f603146487"},{"code":"; group the sequence into n sized chucks,\n; then take n - 1 from those chunks and concatenate them together\n; (discarding the nth and taking the remainder)\n\n(fn [s n]\n  (mapcat #(take (dec n) %) (partition-all n s)))","problem":41,"user":"4f45c72be4b0d56e7bb92b8a"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not= (mod (+ 1 %1) n) 0) %2) coll))","user":"59f75d2ae4b0966464fe6aed"},{"problem":41,"code":"(fn [coll dropn] \n  (keep-indexed \n    (fn [idx e] \n      (if (= 0 (mod (inc idx) dropn))\n          nil \n          e)) \n    coll))","user":"5797d3d2e4b039eba2ecb106"},{"problem":41,"code":"(fn [x n] (flatten (last (take (/ (count x) (- n 1)) (iterate (fn [[a b]] [(conj a (take (- n 1) b))  (nthrest b n) ]) [[] x ])))))","user":"58617a1fe4b0f14aab7c87f0"},{"code":"#(->>\n   (partition-all %2 %)\n   (mapcat (partial take (- %2 1))))","problem":41,"user":"4fa5ddfde4b081705acca1b1"},{"code":"(fn [s n]\n  (map first\n    (remove (fn [[e i]] (= i n))\n      (map list s (cycle (range 1 (inc n)))))))","problem":41,"user":"4fdec88fe4b05e33b9224f8e"},{"code":"(fn dnth\n  ([xs n] (dnth '() 1 xs n))\n  ([a c xs n] (if (empty? xs)\n                a\n                (if (= (rem c n) 0)\n                  (dnth a (inc c) (rest xs) n)\n                  (dnth (concat a (cons (first xs) '())) (inc c) (rest xs) n)\n                )\n              )\n    )\n\n  )","problem":41,"user":"50b8de6ce4b0cba0e598b652"},{"code":"(fn [coll step] (mapcat #(take (dec step) %) (partition step step nil coll)))","problem":41,"user":"52c5c1c8e4b0c2d177d620fc"},{"problem":41,"code":"#(keep-indexed (fn[k v](when(not= 0 (rem (inc k) %2)) v)) %1)","user":"555c6344e4b0b056612e224c"},{"code":"(fn [a b] (keep-indexed #(if-not(=(mod (inc %1) b) 0) %2) a))","problem":41,"user":"52761edae4b03e8d9a4a74d4"},{"problem":41,"code":"(fn [coll n] \n  (let [allIndices (range 0 (count coll)), notIndices (range (- n 1) (count coll) n)]\n    (map (fn [elem] (nth coll elem)) (reduce (fn [acc x] (if (some #{x} notIndices)\n                                                           acc\n                                                           (concat acc (list x)))) `() allIndices))))","user":"57434103e4b0c285004e8a9e"},{"code":"(fn [array n] \n  (mapcat (partial take (- n 1)) (partition-all n array)))","problem":41,"user":"520f46f9e4b0101e4be6fcee"},{"problem":41,"code":"(fn drop-every-nth\n  [xs n]\n  (if (empty? xs)\n    '()\n    (concat (take (- n 1) xs) (drop-every-nth (drop n xs) n))))","user":"568bd448e4b0dcc4269f40a9"},{"code":"(fn [sq th] \n  (flatten (map #(if (= th (count %1)) (drop-last %1) %1) (partition th th nil sq)))\n)","problem":41,"user":"5029f263e4b023940c84aa45"},{"problem":41,"code":"#(loop [s %1\n        n %2\n        c 1\n        l []]\n   (if (empty? s) \n     l\n     (recur \n      (rest s) \n      n \n      (if (= c n) 1 (+ 1 c))\n      (if (= c n) l (conj l (first s))))))","user":"56c89c2ce4b0ed865f9758d4"},{"problem":41,"code":"(fn myfunc [a b] \n  \n  ((fn tt [a b c]\n  \n  (when (first a)\n      (if (not= 0 (mod c b))\n        (conj (tt (rest a) b (+ c 1)) (first a))\n        (tt (rest a) b (+ c 1))\n        )\n  )\n) a b 1)\n)","user":"53f12b77e4b0742d9025b0da"},{"code":"(fn [coll n]\n  (filter identity (map #(if-not (= n %2) %1) coll (cycle (range 1 (inc n))))))","problem":41,"user":"52cca65be4b07d0d72b2736b"},{"code":"(fn dropnths [x y]\n  (if (not (empty? x)) (concat (take (- y 1) x) (dropnths (drop y x) y)) '()))","problem":41,"user":"539c9e26e4b0b51d73faaf2e"},{"code":"(fn [seq nth]\r\n    (map \r\n        (fn [[_ item]] item)\r\n        (filter \r\n            (fn [[idx _]] (not= 0 (mod idx nth)))\r\n            (map list (range 1 (inc (count seq))) seq))))","problem":41,"user":"4e2f9e71535deb9a81d77f11"},{"problem":41,"code":"(fn [l n] (filter #(not= %1 :drop) (reduce #(if (zero? (mod (inc (count %1)) n)) (conj %1 :drop) (conj %1 %2)) [] l)))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":41,"code":"#(->> %1 (partition-all %2) (mapcat (partial take (dec %2))))","user":"59c94a69e4b0a024fb6ae576"},{"code":"(fn f [coll eNth]\r\n  (reduce #(if (contains? (vec %2) (- eNth 1))\r\n             (concat %1 (butlast (vec %2)))\r\n             (concat %1 %2)) [] (partition-all eNth coll)))","problem":41,"user":"505dd5c4e4b0e6aca564be0e"},{"code":"(fn* taker [x y]\n  (if (empty? x) \n    ()\n    (concat (take (dec y) x) (taker (drop y x) y))))","problem":41,"user":"53468f6ce4b084c2834f4a3f"},{"problem":41,"code":"(fn drop-every-nth [result coll n] (\n                     if(not (empty? coll))\n                     \t(do \n                          (concat result (take (dec n) coll)\n                          (drop-every-nth result (drop n coll) n)        \n                                  ))\n                     \tresult)) '()","user":"5f6b61ece4b02876ed9fd051"},{"code":"#(loop [old []\n        new %1]\n   (if (empty? new)\n     old\n     (recur (concat old (take (dec %2) new))\n            (drop %2 new))))","problem":41,"user":"5136f659e4b04059df19f2fd"},{"code":"(fn [seq n]\n  (loop [se seq\n         nth 1\n         curr '()]\n    (if (empty? se)\n      (reverse curr)\n      (if (zero? (mod nth n))\n          (recur (rest se) (inc nth) curr)\n          (recur (rest se) (inc nth) (conj curr (first se)))))))","problem":41,"user":"4ef9b021535dced4c769f269"},{"problem":41,"code":"(fn [x y]\n(map second (filter #(pos? (mod (first %) y)) (reverse (zipmap (map inc (range)) x) )\n         )))","user":"54e345a1e4b024c67c0cf7db"},{"problem":41,"code":"(fn [coll n]\n  (flatten\n  (loop [acc [] remaining coll]\n    (if (empty? remaining)\n      acc\n      (recur (conj acc (take (- n 1) remaining)) (drop n remaining))))))","user":"5ab276f2e4b073f1774425e6"},{"code":"(fn drop-every-nth [xs n]\n  (if (empty? xs)\n      xs\n      (concat (take (- n 1) xs)\n              (drop-every-nth (drop n xs) n))))","problem":41,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn filter-by-nth [coll idx]\n  (keep-indexed #(when (not (zero? (rem (+ %1 1) idx))) %2) \n                coll))","problem":41,"user":"4ed8b598535d10e5ff6f52fc"},{"code":"(fn\n  [s n]\n (flatten (map (partial take (- n 1)) (partition-all n s))))","problem":41,"user":"5052ab7ee4b0a561d07d8f20"},{"code":"(fn [seq n] (keep-indexed #(if (not= (mod (inc %) n) 0) %2) seq))","problem":41,"user":"4f4ff5a8e4b03ad3f0c10cf3"},{"problem":41,"code":"(fn [coll n]\n  (apply concat\n         (partition-all (dec n) n coll)\n         )\n  )","user":"55fd0d19e4b0f488688e067a"},{"code":"(fn [xs n] (flatten (partition-all (dec n) n xs)))","problem":41,"user":"5219e575e4b0c4ef0be82ffd"},{"problem":41,"code":"(fn [x y] (loop [finalList [] givenList x position y]\n            (if(= givenList []) \n              (reverse finalList)\n              (if(not= position 1) (recur (cons (first givenList) finalList) (rest givenList) (dec position))\n              \t\t\t        (recur  finalList (rest givenList) y)\n              )\n            )\n          )\n)","user":"51fea7d7e4b0f1313d468a74"},{"problem":41,"code":"(fn\n  [arr n]\n  (\n    (fn\n      [res arr counter]\n      (if (empty? arr)\n        res\n        (recur\n          (if (>= counter n)\n            res\n            (conj\n              res\n              (first arr)))\n          (rest arr)\n          (if (>= counter n)\n            1\n            (inc counter)))))\n    []\n    arr\n    1))","user":"555f4bade4b0a2eb076a39c2"},{"code":"(fn drop-nth [col n]\n  (letfn [(do-drop-nth [res col counter]\n                       (if (empty? col)\n                         res\n                         (let [[head & tail] col inc-counter (inc counter)]\n                           (if (= (mod counter n) 0)\n                             (do-drop-nth res tail inc-counter)\n                             (do-drop-nth (conj res head) tail inc-counter)))))]\n    (do-drop-nth [] col 1)))","problem":41,"user":"51f8e057e4b09be9c177e53d"},{"code":"(fn dropnth   \n  ([li n]( dropnth li 1 n ) ) \n  ([li c n] (if (empty? li) \n    '() \n    ( if (== c n) \n      (dropnth (rest li) 1 n) \n      (conj \n        (dropnth (rest li) (+ c 1) n ) \n        (first li) ) ) ) ) )","problem":41,"user":"4e8d5edd535d65386fec2134"},{"problem":41,"code":"(fn [coll n] (\n    let [\n        len (count coll)\n        ran (range (inc len))\n        remove #(not= (rem % n) 0)\n        el (filter remove ran)\n    ]\n    (map #(get coll (dec %)) el)\n))","user":"5d3b340fe4b01671435dbd63"},{"problem":41,"code":"(fn [coll n]\n  (reduce #(if (not= 0 (mod (second %2) n)) (conj %1 (first %2)) %1) [] (map vector coll (map #(+ % 1) (range (count coll))))))","user":"51a7bf26e4b0da5f497bde8c"},{"code":"(fn drop-nth [s n]\n  (let [batch (take (dec n) s)\n        remaining (drop n s)]\n    (if (seq remaining)\n      (lazy-seq (concat batch (drop-nth remaining n)))\n      batch)))","problem":41,"user":"4e584256535d8a8b8723a28e"},{"problem":41,"code":"(fn drop-every-nth-item [coll n]\n  \"alternative: (flatten (partition-all (dec n) n coll))\"\n  (map first \n       (filter #(not= (mod (second %) n) 0) \n               (map list coll (iterate inc 1)))))","user":"5fd2e391e4b07e53c2f3f049"},{"problem":41,"code":"(fn [nlst n] (loop [counter 1 seqlst nlst result []]\n                (if (= (count seqlst) 0)\n                  result\n                  (if (= counter n)\n                    (recur 1 (rest seqlst) result)\n                    (recur (inc counter) (rest seqlst) (conj result (first seqlst)))))\n                ))","user":"606d75f5e4b069485764de13"},{"code":"(fn [a b] (into [] (for [[x y] (map-indexed vector a) :when (not= (mod (+ 1 x) b) 0)] y)))","problem":41,"user":"525c575be4b0cb4875a45d38"},{"problem":41,"code":"(fn [vec n]\n  (mapcat #(take (dec n) %) (partition-all n vec))\n)","user":"59fd069ae4b01bb0ae8afcf4"},{"problem":41,"code":"(fn [col, n] (mapcat (partial take (dec n)) (partition-all n col)))","user":"5be182eae4b0ed4b8aab4c9d"},{"code":"(fn n-drop [l n]\n  (if (> (count l) (dec n))\n    (concat \n      (take (dec n) l) \n      (n-drop (drop n l) n))\n    l))","problem":41,"user":"4f7219d8e4b07046d9f4f01d"},{"problem":41,"code":"(fn [s n]\n  (loop [result (empty s)\n         remaining s]\n    (if (empty? remaining)\n      result\n      (recur (concat result (take (- n 1) remaining)) (drop n remaining)))))","user":"57958dace4b0e215f87e8484"},{"problem":41,"code":"(fn [x n]\n  (loop [d[] count 1 seq x]\n    (if (empty? seq)\n      d\n      (if (= (mod count n ) 0)\n        (recur d (inc count) (rest seq))\n        (recur (conj d (first seq)) (inc count) (rest seq))))))","user":"57614948e4b0994c1922fb83"},{"code":"(fn [col n]\n  (for [\n    x (range (count col))\n    :when \n      (not=\n        (mod \n          (inc x) \n          n)\n        0)] (nth col x)))","problem":41,"user":"507a08e4e4b08327cd804a67"},{"code":"#(mapcat (partial take (dec %2)) (partition %2 %2 [] % ))","problem":41,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":41,"code":"#(mapcat (fn [c] (take (dec %2) c)) (partition-all %2 %))","user":"5b22328ee4b03cfeda66ed5d"},{"problem":41,"code":"#(->> %1\n       (partition-all %2)\n       (map (fn \n              [l]\n              (if (= %2 (count l))\n                (drop-last l)\n                l)))\n       (apply concat))","user":"5c435a9fe4b0e06e1360a367"},{"code":"(fn [s n] (apply concat (partition (dec n) n [] s)))","problem":41,"user":"53219cece4b09d4e7a9b54b7"},{"problem":41,"code":"(fn [col n] (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n col))) )","user":"607f3336e4b05857a65e7747"},{"code":"(fn dropit [c1 n]\r\n  (loop [result [] x (seq c1)  ]\r\n    (if (not-empty x)\r\n      (recur (concat result (take (- n 1) x))\r\n          (drop n x)\r\n        )\r\n      result)\r\n    )\r\n  )","problem":41,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":41,"code":"(fn drop-nth\n  [lst n]\n  (apply concat (partition-all (dec n) n lst)))","user":"5f724f55e4b02876ed9fd089"},{"problem":41,"code":"(fn foo [coll n] (filter #(not= (mod (inc (.indexOf coll %)) n) 0) coll))","user":"5cb11a72e4b026601754b8c6"},{"problem":41,"code":"(fn dropnth [data n]\n  (if (empty? data)\n    []\n    (flatten (cons (take (- n 1) data) (dropnth (drop n data) n)))\n  )\n)","user":"5225a0f5e4b01819a2de430e"},{"code":"(fn drop-nth [l n]\n\t((fn drop-nth-count [l n i]\n\t\t(if (first l)\n\t\t\t(if (= (mod (+ i 1) n) 0)\n\t\t\t\t(drop-nth-count (rest l) n (inc i))\n\t\t\t\t(into [(first l)] (drop-nth-count (rest l) n (inc i)))\n\t\t\t)\n\t\t\t[]\n\t\t)\n\t) l n 0)\n)","problem":41,"user":"51f67858e4b06ff1c25c52c5"},{"code":"#(remove nil? (map-indexed (fn [i x] (if (not (= 0 (mod (+ 1 i) %2))) x)) %))","problem":41,"user":"52ced458e4b07d0d72b27394"},{"code":"(fn [c i]\n  (mapcat identity (partition-all (dec i) i c)))","problem":41,"user":"5046ee3ee4b03b02161376b4"},{"problem":41,"code":"(fn [coll drop-index]\n  (mapcat (partial take (dec drop-index))\n          (partition-all drop-index coll)))","user":"56826ebce4b0945ebc182a93"},{"code":"(fn [s n] \n  (loop [s s\n         result []]\n    (if (empty? s)\n      result\n      (let [[a b] (split-at (dec n) s)]\n        (recur (rest b) (into result a))))))","problem":41,"user":"4e5f08c7535d8a8b8723a2da"},{"code":"(fn [c n]\n  (mapcat #(take (dec n) %) (partition-all n c)))","problem":41,"user":"4e49badd535dc968683fc4c9"},{"code":"(fn drp\r\n  ([x n] (drp x n (empty x) 1))\r\n  ([x n acc i]\r\n   (if (empty? x)\r\n     acc\r\n     (if (< i n)\r\n       (recur (rest x) n (conj acc (first x)) (inc i))\r\n       (recur (rest x) n acc 1)))))","problem":41,"user":"500159b3e4b0678c553fc419"},{"code":"(fn [item-list x] (let [remove-x (fn remove-x [item-list x] (take (+ (/ (count item-list) x) 1) (cons (take (- x 1) item-list) (lazy-seq (remove-x (nthnext item-list x) x)))))] (flatten (remove-x item-list x))))","problem":41,"user":"4ec12516535dfed6da9c6da7"},{"problem":41,"code":"(fn [x N] (concat\n           (flatten (map #(drop-last %)\n                (partition N x)\n                ))\n           (take-last (rem (count x) N) x)\n           )\n  )","user":"56ec0af1e4b04a395b9a0430"},{"code":"(fn [xs n]\n  (filter identity\n    (map #(if (pos? (rem %1 n)) %2) (iterate inc 1) xs)))","problem":41,"user":"4e85cda3535db62dc21a62f0"},{"problem":41,"code":"(fn [l r]\n\t\t(\n\t\t\tloop [li l i 0]\n\t\t\t(\n\t\t\t\tif(< i (count li))\n\t\t\t\t(if(= (- r 1) (rem (- (count li) i 1)  r))\n\t\t\t\t\t(recur\n\t\t\t\t\t\t(remove #(= % (nth li (- (count li) i 1))) li)\n\t\t\t\t\t\t(inc i)\n\t\t\t\t\t)\n\t\t\t\t\t(recur\n\t\t\t\t\t\tli\n\t\t\t\t\t\t(inc i)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\tli\n\t\t\t\t\n\t\t\t)\n\t\t)\n\t)","user":"548018dbe4b0c51c1f4d732a"},{"problem":41,"code":"#(keep-indexed (fn [i j] (if (not= (mod (+ i 1) %2) 0) j)) %1)","user":"54c05fd7e4b0ed20f4ff6f12"},{"code":"(fn [coll n] \n  (keep-indexed \n  \t(fn [i v] (if (zero? (rem (inc i) n)) nil v))\n    coll))","problem":41,"user":"536d260be4b0fc7073fd6e55"},{"problem":41,"code":"(fn f [xs n] (when (seq xs) (concat (take (- n 1) xs) (f (drop n xs) n))))","user":"4fc04d75e4b081705acca324"},{"problem":41,"code":"(fn\n  [a-seq n]\n  (->> a-seq\n       (map-indexed (fn [idx itm] [idx itm]))\n       (remove (fn [elem] (== 0 (mod (+ 1 (first elem)) n))))\n       (map second)))","user":"55e1bb20e4b050e68259b41f"},{"problem":41,"code":"(fn dropnth [sq step]\n  (loop [acc [], \n         s sq]\n    (if (empty? s) acc\n      (recur \n         (concat acc (take (dec step) s))\n         (drop step s)\n))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":41,"code":"(fn [value1 value2]\n  (apply concat (partition-all (dec value2) value2 value1)))","user":"60504383e4b056659d6341fa"},{"code":"(fn drop-n [s n]\n  (let [q (seq s)]\n    (when q\n      (concat (take (dec n) q) (drop-n (drop n q) n)))))","problem":41,"user":"4e6a4950535d8ccf87e9febf"},{"code":"(fn drop-every-nth\n  [s nth]\n  (apply concat (partition (dec nth) nth [] s)))","problem":41,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"(fn [s n] (keep-indexed (fn [i x] (if-not (zero? (mod (+ 1 i) n)) x)) s))","problem":41,"user":"4ed55b5d535d10e5ff6f52d8"},{"problem":41,"code":"#(->> (map-indexed (fn [idx itm] (if (= (rem idx %2) (- %2 1)) nil itm)) %1) (filter (comp not nil?)))","user":"53b22df6e4b047364c044497"},{"problem":41,"code":"(fn drop-nth \n  [xs n] \n  (apply concat (map (partial take (dec n)) (partition-all n xs))))","user":"5a08f951e4b01bb0ae8afdfd"},{"code":"(fn [coll x]\n  (mapcat (partial take (dec x)) (partition-all x coll)))","problem":41,"user":"4f1c2a3a535d64f603146480"},{"code":"(fn [xs y]\n  (loop [acc [] cnt 1 rem xs]\n    (if rem\n      (if (= 0 (mod cnt y)) \n        (recur acc (inc cnt) (next rem))\n        (recur (conj acc (first rem)) (inc cnt) (next rem)))   \n      acc)))","problem":41,"user":"4db88b37535d1e037afb2199"},{"problem":41,"code":"(fn [a-seq cnt]\n                               (loop [l a-seq n (dec cnt) acc []]\n                                 (if (empty? l)\n                                   acc\n                                   (if (zero? n)\n                                     (recur (rest l) (dec cnt) acc)\n                                     (recur (rest l) (dec n) (conj acc (first l)))))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":41,"code":"(fn [arg_list arg]\n  (loop [arg_count 1\n         out_vec []\n         in_vec arg_list]\n    (if (empty? in_vec)\n      out_vec\n      (recur (inc arg_count) \n             (if (= (rem arg_count arg) 0)\n               out_vec\n               (conj out_vec (first in_vec)) \n               ) \n             (rest in_vec))\n      )\n    )\n  )","user":"5ae71f14e4b0837691e92ca7"},{"problem":41,"code":"(fn [xs n]\n  (flatten\n   (partition-all (dec n) n xs)\n  )\n)","user":"5aac468ae4b073f17744256b"},{"problem":41,"code":";; #(apply concat (partition-all (dec %2) %2 %1))\n(fn [cols n] (mapcat #(take (dec n) %) (partition-all n cols)))","user":"55d5ee3fe4b0e31453f64a92"},{"problem":41,"code":"(fn [xs n]\n  (mapcat #(take (- n 1) %)(partition-all n xs)))","user":"53f053ebe4b0742d9025b0d3"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(when (not= (rem (+ %1 1) n) 0)\n                  %2) coll))","user":"55b42706e4b01b9910ae297b"},{"problem":41,"code":"#(vec (flatten (partition (- %2 1) (+ (- %2 1) 1) [] %1)))","user":"5e380e72e4b01d43a70e8db0"},{"problem":41,"code":"(fn [xs0 n]\n  (loop [xs xs0 acc []]\n    (if (> (count xs) 0)\n      (recur\n        (rest xs)\n        (if (= 0 (mod (+ 1 (- (count xs0) (count xs))) n))\n          acc\n          (into [] (conj acc (first xs)))))\n      acc)))","user":"4fe98e07e4b0547ebccb2464"},{"problem":41,"code":"(fn [ col n] (mapcat #(take (dec n) % ) (partition n n nil col)))","user":"564a560ae4b0284900eef654"},{"problem":41,"code":"#(remove nil? (map-indexed (fn [i v] (if (zero? (mod (inc i) %2)) nil v)) %1))","user":"57f9e0bce4b0d3187e900956"},{"problem":41,"code":"(fn [s n]\n  (loop [i 0\n         s s\n         r []]\n    (if (seq s)\n      (recur (+ i 1)\n             (next s)\n             (if (not= (mod i n) (- n 1))\n               (conj r (first s))\n               r))\n      r\n      )\n    ))","user":"56521a26e4b0f9d632dd845f"},{"code":"(fn [coll n]\n    (map first\n         (filter #(not (= 0 (mod (second %) n)))\n                 (map list coll (range 1 (inc (count coll)))))))","problem":41,"user":"4fe89297e4b07c9f6fd12c4c"},{"code":"(fn [ls n] (apply concat (map #(take (dec n) %) (partition-all n ls))))","problem":41,"user":"534eecaee4b084c2834f4abf"},{"problem":41,"code":"(fn [xs n]\n  (map first (filter #(> (mod (inc (second %)) n) 0) (map #(vector %1 %2) xs (range)))))","user":"5fa8424ce4b0fa27300f3de5"},{"problem":41,"code":"(fn drop-nth \n  [lst n]\n  (flatten (map #(if (= (count %) n) \n                   (drop-last %) \n                   %) \n                (partition-all n lst))))","user":"59e68254e4b0249b728206fc"},{"problem":41,"code":"(fn omit-every-nth [x n]\n       (if (> n (count x))\n         x\n         (concat (take (- n 1) x)\n                 (omit-every-nth (drop n x) n))))","user":"5632b0a9e4b0bfe05bf117a8"},{"code":"(fn skipn [coll n] (\n  map first\n  \t(filter\t#(not (= (mod (last %) n) 0))\n\t\t\t(apply map list \n\t\t\t\t(list \n\t\t\t\t\t\tcoll \n\t\t\t\t\t\t(range 1 (inc (count coll)))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n))","problem":41,"user":"4ff2f0a9e4b0678c553fc341"},{"code":"(fn [s n] (remove nil? (map-indexed (fn [i x] (when-not (zero? (mod (inc i) n)) x)) s)))","problem":41,"user":"5194cd85e4b05be8c43d2381"},{"problem":41,"code":"(fn [l n] (keep-indexed #(if (not= (mod %1 n) (dec n)) %2) l))","user":"5f2c02d1e4b033932238a65f"},{"code":"(fn f [s n]\r\n  (if (< (count s) n)\r\n    s\r\n    (concat (subvec s 0 (- n 1)) (f (subvec s n) n)) ) )","problem":41,"user":"4df20dda535d08e6dec9fe23"},{"problem":41,"code":"(fn [the-seq n]\n  (apply concat (partition-all (dec n) n the-seq)))","user":"5c86b769e4b0c8042a70ce9b"},{"problem":41,"code":"(fn [s v]\n  (let\n    [sq (iterate inc 1)\n     indexed (map #(vector %2 %1) s sq)\n     _ (do (println indexed) 0)\n     indexed-res (filter #(not= 0 (mod (first %) v)) indexed)]\n    (into [] (map second indexed-res))))","user":"54addba9e4b09f271ff37ce9"},{"problem":41,"code":"(fn [x y]\n  (sequence\n  (map \n   #(second %1)\n   (filter #(not= 0 \n               (mod  \n                    (+ 1 (first %1)) y\n                    )\n               )\n           (map-indexed list x)\n           )\n   \n   )\n   )\n  )","user":"5372c830e4b06d7f452d9dff"},{"problem":41,"code":"(fn drop-every-nth [xs n]\n  (flatten (map-indexed (fn [i x] (if (= 0 (mod (inc i) n)) [] [x])) xs)))","user":"51e24905e4b01e519814642e"},{"code":"(fn [l n]\n  (loop [i 1 myvec (vec nil)]\n    (if (= (dec i) (count l))\n      myvec\n      (recur (inc i) (if (zero? (mod i n)) myvec (conj myvec (nth l (dec i))))))))","problem":41,"user":"4fe1597fe4b0dd6cd5ce3633"},{"code":"(fn [s i]\n  (filter #(not= %1 :removeme)\n    (map-indexed \n      #(if (= (mod (+ %1 1) i) 0) \n          :removeme %2) s)))","problem":41,"user":"504ec46de4b069badc5a33c8"},{"code":"(fn [v e]\r\n  (loop [vetor '() vaux v]\r\n    (if (empty? vaux)\r\n      (vec vetor)\r\n      (recur (concat vetor (take (- e 1) vaux) ) (drop e vaux))\r\n    )\r\n  )\r\n)","problem":41,"user":"4e94aa18535dbda64a6f6b1e"},{"code":"(fn [l n]\n  (mapcat #(take (dec n) %) (partition n n '() l)))","problem":41,"user":"4fc8c8d8e4b0ee37620e183b"},{"problem":41,"code":"(fn drop-items\n   [args numb]\n   (loop [lst args cnt 1 ret (vector)]\n     (if (seq lst)\n       (recur (rest lst) (inc cnt) (if (integer? (/ cnt numb))\n                                     ret\n                                     (conj ret (first lst))))\n       ret)))","user":"5b86462de4b047b03b2037df"},{"problem":41,"code":"(fn drop-nth\n  [ls n]\n  (map second\n       (filter #(not= 0 (mod (first %) n))\n                      (map list (iterate inc 1) ls))))","user":"569ad037e4b0542e1f8d144f"},{"code":"#(flatten(partition (dec %2) %2 nil %1))","problem":41,"user":"4fb7b80ae4b081705acca2d4"},{"problem":41,"code":"(fn me [xs n] (if (empty? xs) xs (concat (take (dec n) xs) (me (drop n xs) n))))","user":"56b35565e4b0982f16b37e16"},{"problem":41,"code":"#(\n let [ \n      \tequ? (fn [x y] (pos? (mod (inc x) y)))\n      \tdrpnth (fn [s n] ( map-indexed (fn [x y] (if (equ? x n) y)) s))\n      \tfilt (fn [s] (remove nil? s))\n       ]\n (->> (drpnth % %2) (filt))\n)","user":"55b39523e4b01b9910ae2973"},{"problem":41,"code":"(fn [l drop-every]\n  (loop [remaining-items l acc []]\n    (if\n     (< (count remaining-items) drop-every) (into acc remaining-items)\n     (recur (drop drop-every remaining-items) (into acc (take (- drop-every 1) remaining-items))))))","user":"5409f8eae4b0addc1aec66e6"},{"code":"(fn [xs n] (->>\n  (map vector xs (iterate inc 1))\n  (filter #(not= 0 (mod (% 1) n)))\n  (map first)))","problem":41,"user":"50479524e4b0371827a27bc4"},{"code":"(fn [coll n]\n  (keep-indexed\n   (fn [idx x] (if (not= (mod (inc idx)  n) 0) x))\n   coll))","problem":41,"user":"500ff421e4b0ae202717946f"},{"problem":41,"code":";#(partition (- %2 1) %2 %1) \n\n#(flatten (partition-all (- %2 1) %2 %1))","user":"54d187b7e4b0e8a36923e5e4"},{"problem":41,"code":"(fn dropn [seq n]\n  (loop [acc [] , seq seq]\n    (if (empty? seq)\n      (flatten acc)\n      (recur (conj acc (take (dec n) seq)) \n             (drop n seq))\n\n     )))","user":"5532a04ee4b09218d5f44f82"},{"problem":41,"code":"(fn [l i]\n     (map first (filter (fn [x] (not (= (mod (last x) i) 0)))\n                (map list l (iterate inc 1)))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn [xs n] (keep-indexed (fn [idx v] (if (not= (mod (inc idx) n) 0) v)) xs))","problem":41,"user":"5055899de4b0ce54f56f03fd"},{"problem":41,"code":"(fn [a k] (map last (filter #(-> % first inc (mod k) (not= 0)) (map-indexed #(-> %&) a))))","user":"5628cb07e4b00e49c7cb47ef"},{"problem":41,"code":"(fn [coll leave-nth]\n   (last  (reduce (fn\n                    [[n-th counter result] elem]\n\n                    [n-th (inc counter) (if (= 0 (mod counter n-th))\n                                          result\n                                          (conj result elem))]\n\n                    ) [leave-nth 1 []] coll)))","user":"58a413b5e4b02bd94d917f07"},{"code":"(fn func [x y]\n  (do \n    (map second (filter #(not (= (rem (first %) y) 0))\n                        (map-indexed vector (cons 0 x)) \n                        )   \n         )   \n    )   \n  )","problem":41,"user":"4ee88f29535d93acb0a66882"},{"problem":41,"code":"(fn [v num]\n    (loop [vetor v resultado []]\n    (if (> num (count vetor ))\n        (flatten (vector resultado vetor))\n        (recur  (drop num vetor)   (flatten (vector resultado (take (- num 1) vetor) ) )))))","user":"5e3f291ae4b01d43a70e8e33"},{"code":"(fn [li n] \n    (map \n      (fn [x] (nth li x)) \n      (filter \n         (fn [x] (> (mod (+ x 1) n) 0)) \n         (range 0 (+ (count li) 0))\n      ) \n    )\n  )","problem":41,"user":"5394265ee4b0b51d73faaec6"},{"problem":41,"code":"(fn [arr,n]\n  (mapcat #(take (dec n) %) (partition-all n arr)))","user":"54d05a9de4b0e8a36923e5c7"},{"problem":41,"code":"#(loop [s %1 acc []] (if (empty? s) acc (recur (drop %2 s) (concat acc (take (- %2 1) s)))))","user":"550b59bae4b06e50f9beb141"},{"problem":41,"code":"(fn \n  [coll n]\n  (let [idx (range (count coll))]\n  (for [i idx\n      :let [y (nth coll i)]\n      :when (not= 0 (rem (inc i) n))]\n  y)))","user":"5cb4e764e4b026601754b929"},{"problem":41,"code":"(fn [xs cnt] (mapcat #(if (= (count %) cnt) (butlast %) %) (partition-all cnt xs)))","user":"5509a23ee4b06e50f9beb11a"},{"problem":41,"code":"(fn [a b] (filter (fn [z] (not(nil? z))) (reduce  (fn [c d] (if (= (mod (+ (count c) 1) b) 0) (conj c nil) (conj c d))) [] a)))","user":"5816ad6de4b0c0e9c07b8378"},{"code":"(fn [xs n] (vec (mapcat #(take (- n 1) %) (partition-all n xs))))","problem":41,"user":"4efccd24535de96065cf5080"},{"problem":41,"code":"#(loop [sq %1 ind 1 dropped []]\n   (if (empty? sq)\n     dropped\n     (if (= 0 (rem ind %2))\n       (recur (rest sq) (inc ind) dropped)\n       (recur (rest sq) (inc ind) (conj dropped (first sq)))\n    )\n  )\n)","user":"5e947a69e4b0fbed045a37f8"},{"code":"(fn drop-nth [sequ n ] (keep-indexed #(if (or (not= (mod (inc %1)  n) 0) (= %1 0)) %2) sequ))","problem":41,"user":"52eaba10e4b09f7907dd14c2"},{"problem":41,"code":"(fn [l n]\n    (let [nth? (fn [index n] (zero? (mod (+ 1 index) n)))]\n      (->> l\n           (keep-indexed #(when ((complement nth?) %1 n) %2))))\n    )","user":"52846deee4b0239c8a67adcf"},{"problem":41,"code":"(fn [s n] (second\n           (reduce #(if (= 0 (mod (first %1) n))\n                      [(inc (first %1)) (second %1)]\n                      [(inc (first %1)) (conj (second %1) %2)]) [1 []] s)))","user":"59699da7e4b069c0a1a197eb"},{"code":"#(\n  (fn [xs ys t]\n    (if (empty? ys)\n      xs\n      (recur (concat xs (take t ys)) (drop (inc t) ys) t))) '() %1 (- %2 1))","problem":41,"user":"4fa069c3e4b0dcca54ed6d4a"},{"problem":41,"code":"#(filter \n  (partial not= :padding) \n  (mapcat concat \n          (map butlast \n               (partition %2 %2 (repeat %2 :padding) %)\n               )))","user":"5310e968e4b08068f379ecdd"},{"code":"(fn mydrop [lst n]\n  ((fn f [lst acc m]\n    (cond\n     (empty? lst) (reverse acc)\n     (= m n) (f (rest lst) acc 1)\n     :else (f (rest lst) (conj acc (first lst)) (+ m 1)))\n    )\n   lst '() 1)\n  )","problem":41,"user":"515f8a0de4b0e2be8aa20bce"},{"problem":41,"code":"(fn\n  [coll n]\n  (let [nth-coll (take-nth n (drop (dec n) coll))]\n    (sort (seq (clojure.set/difference (set coll) (set nth-coll))))))","user":"513f1f18e4b051389b345b3d"},{"problem":41,"code":"(fn [coll n] (map #(get % 0) (filter #(not (= n (get % 1))) (map vector coll (cycle (range 1 (inc n)))))))","user":"53b71b94e4b047364c0444cd"},{"code":"(fn [c n]\n  (loop [x [] y c]\n    (if (empty? y)\n      x\n      (recur\n        (concat x (take (- n 1) y))\n        (drop n y)))))","problem":41,"user":"4fb1325de4b081705acca276"},{"code":"(fn remove2 [coll index]\n  (if (empty? coll)\n    '()\n    (concat (take (- index 1) coll) (remove2 (drop index coll) index))))","problem":41,"user":"5348236ee4b084c2834f4a54"},{"code":"(fn [s n] (map second \r\n     (filter \r\n       (complement #(= (rem (first %) n) 0)) \r\n             (map list \r\n                  (iterate inc 1) \r\n                  s))))","problem":41,"user":"4f9174d0e4b0dcca54ed6c9b"},{"problem":41,"code":"(fn [coll n]  (flatten  (partition (dec n) n [] coll)))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(if (= n (count %))\n             (butlast %)\n             %)\n          (partition-all n coll)))","user":"5ff61113e4b06df49cee1492"},{"problem":41,"code":"(fn drop-nth [a n]\n  (when (not-empty a)\n    (concat \n      (take (dec n) a) \n      (drop-nth (drop n a) n))))","user":"5a8aa992e4b05369db4d24d8"},{"problem":41,"code":"(fn [s n]\n  (loop [new-s []\n         n (dec n)\n         s s]\n    (if (empty? s)\n      new-s\n      (recur (apply conj new-s (take n s)) n (drop n (rest s))))))","user":"56b18445e4b0982f16b37dee"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(when-not ((set (rest (range -1 (count coll) n))) %1) %2) \n                                   coll))","user":"52ee9ac7e4b05e3f0be25ec9"},{"problem":41,"code":"(fn [xs n] \n  (->> xs\n       (map list xs (iterate inc 1))\n       (remove (fn [[_ i]] (zero? (mod i n))))\n       (map first)))","user":"562cd94ee4b0a45d2ff83015"},{"problem":41,"code":"(fn [coll n]\n    (keep-indexed #(if (not= (rem (inc %1) n) 0) %2) coll))","user":"59d9dcfbe4b0ef0a1e9b5c5d"},{"code":"(fn [xs n]\n  (vec (for [x (range (count xs))\n             :when (not= 0 (mod (+ 1 x) n))]\n         (nth xs x)\n        )\n  )\n)","problem":41,"user":"52b2a819e4b0c58976d9acf1"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed\n   (fn [i e]\n     (when (> (mod (inc i) n) 0) e)) s ))","user":"5033ed65e4b062bc5d7ae15a"},{"problem":41,"code":"(fn [l x]\n  (map first\n      (filter #(not= (last %) x)\n               (map list l (cycle (range 1 (inc x))))\n       )\n  )\n)","user":"53f6d555e4b0db01ade6f9e5"},{"problem":41,"code":"(fn dropn [s n]\n  (if (empty? s) []\n \t(concat (take (dec n) s) (dropn (drop n s) n))))","user":"6058e0a0e4b032d51aa7730d"},{"code":"(fn t [xs n] (when (not (empty? xs))\n  (concat (take (dec n) xs) (t (drop n xs) n))))","problem":41,"user":"4e96557d535dbda64a6f6b43"},{"code":"(fn [x n]\n    (keep-indexed #(if (not= 0 (mod (+ 1 %1) n)) %2)  x))","problem":41,"user":"503efe01e4b06c4e0e1fa26f"},{"code":"(fn dt[ l n]\n  (loop [ s l r '()]\n    (if-not (empty? s)\n      (recur (drop n s ) (into   (take  (- n 1) s) (reverse r)  ) )\n      r)))","problem":41,"user":"5007cdb9e4b0b17c647f5227"},{"problem":41,"code":"(fn [x nth]\n  (map second \n       (filter #(not= (rem (first %1) nth) (dec nth))\n               (map-indexed vector x))))","user":"59e8a952e4b0249b72820733"},{"code":"#(mapcat identity (partition-all (- %2 1) %2 %1))","problem":41,"user":"4f0d093b535d0136e6c22313"},{"problem":41,"code":"(fn lolo\n  [input-seq index]\n  (keep-indexed\n   #(if\n      (not= \n       (mod (+ %1 1) index)\n       0)\n      %2)\n   input-seq))","user":"4fc524aae4b081705acca37e"},{"problem":41,"code":"(fn [xs n]\n    (letfn [(go [m ys]\n        (cond\n            (empty? ys) ys\n                (= 0 (mod m n)) (go (+ 1 m) (rest ys))\n                :else (cons (first ys) (go (+ 1 m) (rest ys)))))]\n                (go 1 xs)))","user":"58cf00c8e4b03c36ff7e58ac"},{"code":"(fn [coll n]\n  (let [drop-mask (take (count coll) (cycle (reverse (range n))))]\n    (filter (complement nil?) (map #(if (zero? %2) nil %1) coll drop-mask))))","problem":41,"user":"4edab806535d10e5ff6f5311"},{"problem":41,"code":"#(flatten \n    (for [x (partition-all %2 %1)]\n      (take (- %2 1) x)))","user":"5574c172e4b05c286339e059"},{"code":"(fn [x n] (reduce concat '() (partition-all (dec n) n x)))","problem":41,"user":"50b19a91e4b03ea880433552"},{"problem":41,"code":"(fn [coll n] (filter #(not (and (> (.indexOf coll %) 0) (= 0 (mod (+ 1 (.indexOf coll %)) n)))) coll))","user":"552b265ee4b0ffed3738f95e"},{"code":"(fn [xs n]\n  (map second\n       (filter #(not (zero? (mod (first %) n)))\n               (map-indexed #(do [(inc %1) %2]) xs))))","problem":41,"user":"510b0480e4b078ea719210fa"},{"code":"(fn [coll n] (map second (remove #(zero? (rem (inc (first %))  n)) (map-indexed vector coll))))","problem":41,"user":"4ec2f192535dcc7ae8597d4c"},{"code":"(fn dropper [l, n]\n    (if (empty? l) l\n        (concat (take (- n 1) l) (dropper (nthnext l n) n))\n    ))","problem":41,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":41,"code":"(fn [coll v]\n    (keep-indexed #(if (not= (rem (inc %) v) 0) %2) coll))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":41,"code":"(fn [seq n] (keep-indexed #(if (< (mod %1 n) (dec n)) %2) seq))","user":"54c11fdae4b0ed20f4ff6f1b"},{"problem":41,"code":"(fn [s n] (mapcat butlast (partition n n [0] s)))","user":"53791ab7e4b06839e8705e4d"},{"problem":41,"code":"(fn [xs n] (keep-indexed (fn [idx item] (if ((complement =) (rem idx n) (dec n)) item)) xs))","user":"4fdb0c0ae4b05e33b9224f57"},{"problem":41,"code":"(fn my-drop\n  [s n]\n  (loop [i 1\n         s s\n         acc []]\n    (if (empty? s)\n      acc\n      (recur \n        (inc i) \n        (rest s) \n        (if \n          (not= 0 (mod i n))\n          (conj acc (first s))\n          acc)))))","user":"55ad2d97e4b03311e7b732a2"},{"problem":41,"code":"(fn [x y]\n   (mapcat\n    rest\n    (remove\n     (fn [z]\n       (=\n        0\n        (mod \n         (+ 1 (first z)) \n         y)))\n     (map-indexed vector x))))\n\n;;; map-indexed ---> Returns a lazy sequence consisting of the result of applying f to 0\n;;; and the first item of coll, followed by applying f to 1 and the second\n;;; item in coll, etc, until coll is exhausted. Thus function f should\n;;; accept 2 arguments, index and item. Returns a stateful transducer when\n;;; no collection is provided.","user":"6075c214e4b069485764de5b"},{"problem":41,"code":"(fn [v n] (loop [a v b 1 c []] (if-not (> (count a) 0) c (if-not (= n b) (recur (rest a) (+ 1 b) (conj c (first a))) (recur (rest a) 1 c)))))","user":"55ac16a0e4b03311e7b73291"},{"problem":41,"code":"(fn [l n]\n  (loop [index 0 result []]\n    (cond (= index (count l)) result\n          (= 0 (rem (inc index) n)) (recur (inc index) result)\n          :else (recur (inc index) (conj result (nth l index))))))","user":"56288ccae4b00e49c7cb47ea"},{"problem":41,"code":"(fn [x k]\n  (loop [l [] z x]\n    (if (empty? z)\n      (vec l)\n      (recur (concat l (take (dec k) z)) (drop k z))))\n  \n  )","user":"5dd70ee3e4b0948ae9d9ad85"},{"problem":41,"code":"#(apply concat \n        (partition-all \n         (dec %2) ;take\n         %2 ;skip to\n         %))","user":"55d8eed3e4b0e31453f64ac3"},{"problem":41,"code":"(fn [lst size]\n  (flatten (partition (dec size) size nil lst)))","user":"5b2c79c6e4b025bcb146f2b7"},{"problem":41,"code":"(fn [coll toDrop] (keep-indexed #(if (or (not= (mod (inc %1) toDrop) 0) (= 0 %1)) %2 nil) coll))","user":"5ee4545ee4b029a2061bbe8d"},{"problem":41,"code":"(fn\n  [coll idx]\n  (let [indexes (map #(+ 1 %) (range (count coll)))]\n    (map first (filter #(not (= (mod (second %) idx) 0)) (map vector coll indexes)))))","user":"55a5e2f7e4b0acc240e31550"},{"problem":41,"code":"(fn myDropEvery\n  [lst\n   cant]\n  (loop [lst     (partition-all cant lst)\n         result  '()]\n    (if (empty? lst)\n      result\n      (if (= (count (first lst)) cant)\n        (recur (rest lst)\n               (concat result (reverse (drop 1 (reverse (first lst))))))\n        (recur (rest lst)\n               (concat result (first lst)))))))","user":"5c74b043e4b0fca0c16227ce"},{"code":"(fn [xs n] (reverse (reduce (fn [ys zs] (reduce conj ys (take (- n 1) zs))) '() (partition-all n xs))))","problem":41,"user":"4ef8d47c535dced4c769f261"},{"problem":41,"code":";;(fn [col n]\n;;  (loop [c col\n;;         result []]\n;;    (if (empty? c)\n;;      (flatten result)\n;;      (recur (drop n c) (apply conj result (take (- n 1) c))))))\n#(apply concat (partition-all (dec %2) %2 %1))","user":"5dbac8ebe4b010eb3c36cd62"},{"problem":41,"code":"(fn [xs n] \n  (mapcat drop-last (partition n n [:dropme] xs)))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":41,"code":"(fn [l n] (vec (filter #(not= (mod (+ (.indexOf l %) 1) n) 0) l)))","user":"5c558070e4b0fb8c5ffd9a1e"},{"code":"(fn [xs n] (loop [ctr 1 ys [] xs xs]\n  (if (empty? xs) ys\n      (let [x (first xs) xs (rest xs)] \n        (if (= (rem ctr n) 0) (recur (inc ctr) ys xs)\n                              (recur (inc ctr) (conj ys x) xs))))))","problem":41,"user":"4fa6a491e4b081705acca1bc"},{"code":"(fn [data n]\n  (flatten (map reverse (map #(if (> n (count %))\n          %\n          (rest %)) (map reverse (partition-all n data))))))","problem":41,"user":"52fc34cee4b047fd55837015"},{"problem":41,"code":"(fn [sequ, amt]\n    (let [r (keep-indexed #(if (not (zero? (mod (inc %1) amt))) %2) sequ)]\n      r))","user":"5a0a3473e4b0eab8c0448941"},{"problem":41,"code":"(fn [l n]\n  (map (fn [i] (nth l i))\n    (filter (fn [x] (not (= 0 (mod (+ x 1) n))))\n    (range 0 (count l)))))","user":"551ebcd7e4b08d5046aa8a4a"},{"code":"(fn [lst n] (apply concat (partition-all (dec n) n lst)))","problem":41,"user":"4ec18451535dfed6da9c6db0"},{"problem":41,"code":"(fn [input n] (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n input))))","user":"55d70b8fe4b0e31453f64a9c"},{"problem":41,"code":"(fn [col n]\n  (map second (remove #(zero? (mod (inc (first %)) n)) (keep-indexed vector col))))","user":"53a83c74e4b047364c044426"},{"code":"(fn [s n] \n  (map \n   #(s %)\n   (filter #(not= (mod (+ % 1) n) 0) (range 0 (count s)))))","problem":41,"user":"51547920e4b084ca81ee2e1c"},{"problem":41,"code":"(fn [v n] \n   (apply concat \n          (map #(take (- n 1) %) \n               (partition-all n v))))","user":"5ebff55de4b00a66d4a95286"},{"problem":41,"code":"(fn drp [s n]\n  (reverse\n   (loop [s s i n r []]\n    (cond\n     (empty? s) r\n     (= i 1) (recur (rest s) n r)\n     :else (recur (rest s) (dec i) (cons (first s) r))))))","user":"597a4277e4b02382a38ad1e2"},{"code":"(fn [a b] \n  (remove \n   #(zero? (mod (+ (.indexOf a %) 1) b))\n   a)\n  )","problem":41,"user":"516ab8c2e4b081287f204e9e"},{"problem":41,"code":"(fn [s n]\n  (:r (reduce #(if (< (:n %1) n)\n                 (assoc %1\n                   :r (conj (:r %1) %2)\n                   :n (+ 1 (:n %1)))\n                 (assoc %1\n                   :n 1))\n              {:r [] :n 1}\n              s)))","user":"57aa4775e4b0b8559636fc6b"},{"problem":41,"code":"(fn [s n] (apply concat (partition (dec n) n nil s)))","user":"57458b82e4b009280f9f2b4e"},{"problem":41,"code":"(fn [c n]\n  (flatten\n   (map \n    #(if (< (count %) n)\n       %\n       (butlast %))\n    (partition-all n c))))","user":"55ff562fe4b00f4cabc57660"},{"problem":41,"code":"(fn drop-every[xs n]\n  (mapcat #(if (= n (count %)) (butlast %) %)\n    (partition-all n xs)))","user":"4dd76bf9535d2dad7130b5d1"},{"code":"(fn [c n] (keep-indexed #(when-not (zero? (mod (inc %1) n)) %2) c))","problem":41,"user":"4fc4eadee4b081705acca353"},{"code":"#(loop [coll %1 result '() step %2 idx 1]\n    (if (empty? coll)\n      result\n      (if (= 0 (mod idx step))\n        (recur (rest coll) result step (+ 1 idx))\n        (recur (rest coll) (concat result (list (first coll))) step (+ 1 idx)))))","problem":41,"user":"52fac708e4b047fd55836fff"},{"problem":41,"code":"(fn [seq nth]\n  (filter #(not= (mod (+ (.indexOf seq %1) 1) nth) 0) seq))","user":"5ef381a3e4b07c55ae4a053c"},{"code":"x","problem":41,"user":"52e635b3e4b09f7907dd146f"},{"problem":41,"code":"(fn dropnth [x n]\n  (if (< (count x) n)\n    x\n    (concat (drop-last (take n x)) \n            (dropnth (drop n x) n))))","user":"5a5a6347e4b05d388ecb6ca9"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed #(if (= (mod (inc %) n)0)\n                   nil\n                   %2)xs))","user":"5e9b7aefe4b0157ca96647f1"},{"problem":41,"code":"(fn fun \n    ([r sep] \n       (fun r 1 sep)) \n    ([r cnt sep] \n       (when (seq r) \n         (if (= cnt sep)\n           (fun (rest r) 1 sep)\n           (cons (first r) (fun (rest r) (inc cnt) sep))))))","user":"560bb1f7e4b05f002753df20"},{"code":"(fn [s n]\n  (keep-indexed #(when (pos? (mod (inc %1) n))\n                   %2)\n                s))","problem":41,"user":"4dc21233535d020aff1edf92"},{"problem":41,"code":"(fn [xs n]\n  (loop [ys xs c 1 z []]\n    (cond\n     (empty? ys) z\n     (= c n) (recur (next ys) 1 z)\n     :else (recur (next ys) (inc c) (conj z (first ys))))))","user":"58ebae90e4b056aecfd47d44"},{"code":"(fn [xs n]\n  (concat (take (dec n) xs) (mapcat rest (partition-all n (drop (dec n) xs)))))","problem":41,"user":"51efd397e4b0249c592fbdeb"},{"problem":41,"code":"(fn drop-n\n  [s n]\n  (let [these (take (dec n) s)\n        others (drop n s)]\n    (if-not (empty? others)\n      (concat these (drop-n others n))\n      these)))","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":41,"code":"(fn [coll to-drop]\n  (loop [final [] acc coll index 1]\n    (if (> index (count coll))\n      final\n      (if (= (mod index to-drop) 0)\n        (recur final (rest acc) (inc index))\n        (recur (conj final (first acc)) (rest acc) (inc index))))))","user":"58e45a2ce4b056aecfd47c69"},{"code":"(fn [coll n]\n  (mapcat #(if (= (count %) n) (drop-last %) %) (partition n n nil coll)))","problem":41,"user":"4e894068535d4ef0aa30db97"},{"code":"#(apply concat\n          (partition (- %2 1) %2 [] %1))","problem":41,"user":"4e498df9535dc968683fc4c4"},{"problem":41,"code":"(fn drop-nth [seq n]\n  (concat\n    (take (- n 1) seq)\n    (if (empty? seq) [] (drop-nth (drop n seq) n))))","user":"5f331015e4b0574c87022c37"},{"code":"(fn [s n]\n    (keep-indexed #(if (not= 0 (mod (+ % 1) n)) %2)\n                  s))","problem":41,"user":"4eff81ca535dcb61093f6a2d"},{"problem":41,"code":"(fn drop-every\n  [xs n]\n  (if (empty? xs)\n    []\n    (concat (take (dec n) xs)\n            (drop-every (drop n xs) n))))","user":"5c2d1f63e4b0d62ef62d9ef0"},{"problem":41,"code":"(fn [coll n]\n    (map second\n         (remove #(= (mod (first %)\n                          n)\n                     0)\n                 (map vector\n                      (map inc\n                           (range))\n                      coll))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn [coll n]\r\n  (first\r\n    (reduce \r\n      (fn [[a i] c]\r\n        (if (= i n)\r\n          [a 1]\r\n          [(conj a c) (inc i)])) \r\n      [[] 1]\r\n      coll)))","problem":41,"user":"4e111538535d04ed9115e7c3"},{"problem":41,"code":"(fn [data nitem]\n   (flatten\n     (map butlast\n        (partition nitem nitem [0] data))))","user":"57995ac1e4b05b1deef9adbf"},{"code":"(fn rec [xs n]\n  (if (>= (count xs) n)\n  (concat (take (dec n) xs) (rec (drop n xs) n))\n  xs))","problem":41,"user":"5114ab7be4b0ce5098ee73b5"},{"code":"(fn [lis count]\n  (keep-indexed \n    (fn [idx item] \n      (if \n        (and \n          (= 0 (mod (+ idx 1) count)))\n        nil item))\n  lis))","problem":41,"user":"4f7d065ce4b06e829148e1b9"},{"code":"(fn [ coll n] (loop [beg [] rest coll]\n(if (seq rest)\n(recur (concat beg (take (dec n) rest))\n(drop n rest)) beg)))","problem":41,"user":"52dfe1d2e4b09f7907dd1406"},{"code":"(fn drop [lst num] (remove nil? (map-indexed\n                     #(if (not= 0 (rem (inc %) num)) %2) lst)))","problem":41,"user":"4fb86dc9e4b081705acca2d8"},{"code":"(fn [s n]\n   (filter #(not (= 0 (rem (+ 1 (.indexOf s %))  n))) s)\n   )","problem":41,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":41,"code":"(fn [coll n] (mapcat\n                  #(take (- n 1) %)\n                  (partition-all n coll)))","user":"5d9aeae5e4b0d3f9b434ad4a"},{"code":"(fn drop-nth [xs n]\n    (let [parts (partition-all n xs)\n          parts (map #(take (- n 1) %) parts)]\n      (flatten parts)))","problem":41,"user":"4e970e6a535dbda64a6f6b4e"},{"problem":41,"code":"(fn [coll n]\n    (let [iter (fn iter [coll i]\n                 (lazy-seq\n                  (cond (nil? (seq coll)) nil\n                        (zero? (mod i n)) (iter (rest coll) (inc i))\n                        :else (cons (first coll) (iter (rest coll) (inc i))))))]\n    (iter coll 1)))","user":"51b91b08e4b0e871ca4958f8"},{"problem":41,"code":"(fn [coll n]\n  (loop [final [] remaining coll]\n    (if(< (count remaining) n)\n      (into final remaining)\n      (recur (into final (take (dec n) remaining)) (drop n remaining))\n      )\n    )\n  )","user":"58047205e4b0a837a8b30ca9"},{"problem":41,"code":"(fn [coll n] (mapcat #(if (= n (count %)) (butlast %) %) (partition-all n coll)))","user":"4e443201535dc968683fc4a7"},{"code":"(fn [coll n]\n    (keep-indexed #(if-not (= 0 (rem (+ % 1) n)) %2) coll))","problem":41,"user":"502a5fa4e4b09e8f859a9fbd"},{"code":"(fn d [c n] (when (seq c) (concat (take (dec n) c) (d (drop n c) n))))","problem":41,"user":"4e6b3fc8535d8ccf87e9ff0f"},{"problem":41,"code":"#(vec (keep-indexed (fn [x y] (if-not (= (mod (+ x 1) %2) 0) y)) %1))","user":"5e13a6b7e4b099d064963001"},{"problem":41,"code":"(fn\n  [l n]\n  (loop [l l\n         i 1\n         res ()]\n    (if (empty? l) (reverse res)\n      (if (= i n) (recur (rest l) 1 res)\n        (recur (rest l) (inc i) (cons (first l) res))))))","user":"56df636ae4b0ca2494a095f4"},{"problem":41,"code":"(fn [l d]\n  (loop [li l le () t (dec d)]\n    (if (empty? li)\n      (reverse le)\n      (recur (rest li)\n             (if (= t 0)\n               le\n               (conj le (first li)))\n             (if (= t 0)\n               (dec d)\n               (dec t))\n               ))))","user":"52979551e4b02ebb4ef75043"},{"problem":41,"code":"(fn [lis ev]\n  (->> (partition-all ev lis)\n       (map (partial take (dec ev)))\n       (flatten)))","user":"56b6e354e4b0982f16b37e41"},{"code":"(fn\n  [xs n]\n\t(reduce \n     #(conj %1 (last %2)) \n     [] \n     (filter #(> (rem (+ (first %) 1) n) 0) \n             (map vector (range) xs)))\n  )","problem":41,"user":"51e780dae4b0730ab87cf353"},{"code":"(fn [seqs n]\n  (loop [res [] data seqs]\n    (if (= 0 (count data)) res \n      (recur (apply conj res (take (- n 1) data)) (drop n data)))))","problem":41,"user":"4f12ab23535d64f603146429"},{"code":"(fn [x n]\n  (loop [todo x\n         acc '()\n         counter (dec n)]\n    (if (empty? todo)\n      (reverse acc)\n      (if (= counter 0)\n        (recur (rest todo) acc (dec n))\n        (recur (rest todo) (conj acc (first todo)) (dec counter))))))","problem":41,"user":"4f08a8a2535dcb61093f6c3d"},{"code":"(fn [x y]\n  (keep-indexed \n    #(if-not (= (mod (inc %1) y) 0) %2) x))","problem":41,"user":"500b61b1e4b03d00572d2d81"},{"problem":41,"code":"(fn drop-every-nth-item [xs n]\n  (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) xs))","user":"518b8561e4b0f028e99addef"},{"code":"(fn [lst n] (mapcat #(take (dec n) %) (partition-all n lst)))","problem":41,"user":"51059d33e4b0380e797c7d5c"},{"problem":41,"code":"(fn\n    [coll, drop_n]\n  (let [n (- drop_n 1)]\n  (loop [xs coll i 0 ys []]\n    (if (empty? xs)\n    ys\n    (if (= i n)\n    (recur (rest xs) 0 ys)\n    (recur (rest xs) (inc i) (conj ys (first xs))))))))","user":"53de4bdae4b0d874e779ae32"},{"problem":41,"code":"(fn [col n]\n  (filter \n   (fn [element]\n     (not= \n      (- n 1) \n      (mod \n       (.indexOf col element) \n       n\n       )\n      )\n     )\n   col\n   )\n  )","user":"56d74c88e4b0ea9b8538f7d9"},{"code":"#(mapcat (fn [coll]\n          (if (= %2 (count coll))\n              (butlast coll)\n              coll))\n         (partition-all %2 %))","problem":41,"user":"4e0febe6535d04ed9115e7be"},{"code":"(fn [l t] \n       (loop [lst l target (dec t) cnt 0 acc []]\n         (if (empty? lst)\n           acc\n           (if (= target cnt)\n             (recur (rest lst) target 0 acc)\n             (recur (rest lst) target (inc cnt) (conj acc (first lst)))))))","problem":41,"user":"51bd255ce4b0df1216cefd94"},{"code":"(fn [coll e]\n  (keep-indexed\n   #(when (not (zero? (mod (inc %1) e))) %2) coll))","problem":41,"user":"4e89dbce535d3e98b8023283"},{"problem":41,"code":"#(loop [xs %1 n %2 ys []]\n   (if-not (empty? xs) (recur (drop n xs) n (into ys (take (dec n) xs))) ys))","user":"57615a22e4b0994c1922fb88"},{"code":"(fn [coll x] (keep-indexed #(if (pos? (rem (inc %1) x)) %2) coll))","problem":41,"user":"4f46df00e4b0d56e7bb92bac"},{"problem":41,"code":"(fn [coll n]\n  (loop [coll coll\n         n n\n         curr n\n         acc []]\n    (cond \n      (nil? (seq coll)) acc\n      (= curr 1) (recur (rest coll) n n acc)\n      :else (recur (rest coll) n (- curr 1) (conj acc (first coll))))))","user":"53ab94cae4b047364c044450"},{"problem":41,"code":"(fn [coll step]\n  (apply concat (partition-all (dec step) step coll)))","user":"5617a540e4b06b1bb2182a12"},{"problem":41,"code":"(fn [c v] (mapcat #(take (dec v) %1) (partition v v [] c)))","user":"4ec2f1d9535dcc7ae8597d4d"},{"problem":41,"code":"#(flatten (partition-all (dec %2) %2 %1))\n;(fn [ls n]\n;  (remove nil? (map-indexed #(if (and (>= (inc %1) n) (zero? (mod (inc %1) n))) nil %2) ls)))","user":"52f3568fe4b05e3f0be25f0e"},{"code":"(fn[s n]\n\t(keep-indexed #(if (pos? (rem (+ 1 %1) n)) %2) s)\n  )","problem":41,"user":"53863845e4b06839e8705f0f"},{"problem":41,"code":"#(loop [A %1 coll () n %2]\n  (cond\n   (empty? A) (reverse coll)\n   (<= n 1) (recur (rest A) coll %2)\n   :default (recur (rest A) (cons (first A) coll) (dec n) )))","user":"5d98f616e4b0d3f9b434ad3c"},{"problem":41,"code":"(fn [lst n]\n  (mapcat (fn [vctr]\n            (if (zero? (mod (inc (first vctr)) n))\n              (empty vctr)\n              (drop 1 vctr)))\n          (map-indexed vector lst)))","user":"5a99b688e4b0d174b936c7a6"},{"problem":41,"code":"(fn [s n] (for [[i v] (map vector (iterate inc 1) s) :when (not (zero? (mod i n))) ] v))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"code":"(fn [coll num] (keep-indexed (fn [idx v] (if (not (= (mod (+ 1 idx) num) 0)) v)) coll))","problem":41,"user":"51430fb2e4b0c172af7558ce"},{"problem":41,"code":"(fn [s n] (mapcat #(keep identity (butlast%)) (partition n n (repeat n nil) s)) )","user":"54c97cb3e4b045293a27f677"},{"problem":41,"code":"(fn [coll x] \n  (keep-indexed \n   (fn [idx item]\n     (if (not= 0 (mod \n                   (inc idx)\n                   x))\n         item\n         nil)\n   )\n   coll)\n)","user":"59c243bae4b0a024fb6ae4aa"},{"code":"(fn rem-c\r\n  [c n]\r\n  (if (< (count c) n)\r\n    c\r\n    (concat (take (dec n) c) (rem-c (drop n c) n))))","problem":41,"user":"4f17ab99535d64f603146457"},{"problem":41,"code":"(fn [s n]\n    (mapcat #(if (= (count %) n) \n               (drop-last %) \n               %) \n            (partition-all n s)))","user":"57985f98e4b039eba2ecb114"},{"code":"(fn [x n] (loop [s x ind 1 r []]\n               (if (empty? s)\n                 r\n                 (if (= ind n)\n                   (recur (rest s) 1 r)\n                   (recur (rest s) (inc ind) (conj r (first s)))))))","problem":41,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":41,"code":"(fn [coll x]\n   (let [ decx (dec x)\n          remove (set\n                  (loop [reccoll   coll\n                         result []]\n                    (let [val (get reccoll decx)]\n                      (if (nil? val)\n                        result\n                        (recur (vec (nthrest reccoll x)) (conj result val))))))\n         ]\n     (filterv (complement remove) coll)))","user":"5f122f93e4b091ba50b4dbae"},{"problem":41,"code":"(fn [xs n] (keep-indexed (fn [idx itm] (if (not= 0 (rem (inc idx) n)) itm) ) xs))","user":"4fc5eb7fe4b0ee37620e1803"},{"code":"#(->>\n  (partition-all (dec %2) %2 %1)\n  (apply concat))","problem":41,"user":"4fb1d907e4b081705acca282"},{"problem":41,"code":"(fn drop-nth [coll n] \n  (if (seq coll) \n    (concat (take (dec n) coll) (drop-nth (drop n coll) n))))","user":"563799f8e4b0bfe05bf117db"},{"problem":41,"code":"(fn [coll n]\n  (for [[i e] (keep-indexed vector coll)\n        :when (not (zero? (mod (inc i) n)))]\n    e))","user":"56e9db9be4b04a395b9a03ff"},{"code":"(fn [s n] (keep-indexed #(if (< 0 (mod (inc %1) n)) %2) s))","problem":41,"user":"528652fbe4b0239c8a67ae14"},{"code":"(fn  [lst n]\n    (\n    for [ndx (range 0 (count lst))\n         :when (not (=  (- n 1) (rem ndx n)) )\n          ]\n      (lst ndx)\n      )\n    \n    )","problem":41,"user":"4f00e9c7535dcb61093f6a33"},{"code":"(fn [a b]\n  (loop [l a\n        x b\n        res []]\n    (if (empty? l) res\n      (if (= 1 x)\n        (recur (rest l) b res)\n        (recur (rest l) (dec x) (conj res (first l))))\n        \n    )\n  \n  )  \n)","problem":41,"user":"4fe610fde4b0e8f79898fece"},{"code":"(fn drop-nth [coll n] \n   (reverse (\n      (fn drop-nth2 [coll n ix o]\n         (if (= (first coll) nil)\n            o\n            (if (= (rem ix n) 0)\n               (drop-nth2 (rest coll) n (+ ix 1) o)\n               (drop-nth2 (rest coll) n (+ ix 1) (cons (first coll) o))\n            )\n         )   \n      )\n      coll n 1 []\n   ))\n)","problem":41,"user":"4ec17677535dfed6da9c6dad"},{"problem":41,"code":"(fn [coll n] (map first (filter #(not= (mod (second %) n) 0) (apply map vector  [coll (iterate inc 1)]))))","user":"5c03e927e4b0bdcf453d167b"},{"problem":41,"code":"(fn skip [coll idx]\n  (map second (filter (fn divisible [x] (not (zero? (mod (first x) idx)))) (map-indexed (fn [idx itm] [(inc idx) itm]) coll))))","user":"5d9c1226e4b0d3f9b434ad51"},{"code":"(fn [xs n]\n  (mapcat\n    identity\n    (map-indexed\n      (fn [idx itm]\n        (if (= 0 (mod (inc idx) n)) [] [itm]))\n      xs)))","problem":41,"user":"50bd6033e4b0594b91591c66"},{"problem":41,"code":"(fn [l n]\n   (keep-indexed\n    #(if (or (= 0 %1) \n             (not= (mod (+ 1 %1) n) 0)) \n      %2) l))","user":"5f97eff1e4b0715f5002d7f9"},{"problem":41,"code":"(fn drop-nth\n   [coll n]\n   (vals (into {} (filter (complement (fn [[key val]]\n                                   (= (mod (inc key) n) 0)))\n                     (map-indexed vector coll)))))","user":"55dcb06ee4b050e68259b3b9"},{"problem":41,"code":"#(map (fn [[_ y]] y) (filter (fn [[x _]] (not (zero? (rem (inc x) %2)))) (map list (range) %1)))","user":"57c7a8b5e4b05aa3c4741d09"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  (reduce concat (partition-all (dec n) n lst)))","user":"59e0111ae4b08badc2a0c4e4"},{"code":"(fn [coll n]\r\n  (mapcat #(take (dec n) %) (partition-all n coll)))","problem":41,"user":"4ddbdc1b535d02782fcbe9fd"},{"code":"(fn [rootcol, n] \n  (vec \n    (mapcat \n      (fn [col] (take (- n 1) col)) \n      (partition-all n rootcol))))","problem":41,"user":"4ecb1641535d6d7199dd370e"},{"code":"(fn [s n] (map second (remove #(zero? (rem (inc (first %)) n)) (map-indexed vector s))))","problem":41,"user":"4ddbf54e535d02782fcbe9ff"},{"problem":41,"code":"(fn f [x i]\n  (when (seq x)\n    (concat (take (dec i) x) (f (drop i x) i) )))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn [lst k]\n    (keep-indexed #(if (zero? (rem (inc %1) k)) nil %2) lst))","problem":41,"user":"4fba7d1ee4b081705acca2e0"},{"problem":41,"code":"(fn [seq val]\n    (loop [i 1\n           seq seq\n           ret []]\n      (if (empty? seq) ret\n        (recur (inc i) (rest seq) (if (= 0 (mod i val)) ret (conj ret (first seq)))))))","user":"5f974321e4b0715f5002d7f3"},{"code":"(fn [xs n]\n  (vec (apply concat\n              (partition-all (dec n) n xs))))","problem":41,"user":"511f9625e4b085952a835362"},{"problem":41,"code":"(fn [s n]\n  (reduce\n   (fn [s n]\n     (concat\n      (take (dec n) s)\n      (drop n s)))\n   s\n   (map #(* n (inc %))\n        (reverse (range (/ (count s) n))))))","user":"57008afae4b08d47c97781ca"},{"code":"#(loop [i 1 s %1 res []]\n   (if (empty? s) res\n     (recur\n      (inc i)\n      (rest s)\n      (if (= 0 (mod i %2)) res (conj res (first s)))\n      ))\n   )","problem":41,"user":"514f6679e4b0b449e54b8df5"},{"problem":41,"code":"(fn [v nm] (keep-indexed #(if (not= (- nm 1) (mod % nm)) %2) v))","user":"5507cfd3e4b021ccfedb96ad"},{"code":"(fn [lst n]\n  (loop [[fst & rst] lst\n          accum-lst []\n          curr-n 1]\n          (if (nil? fst)\n            accum-lst\n            (recur rst\n                   (if (= 0 (rem curr-n n))\n                      accum-lst\n                      (conj accum-lst fst))\n                  (inc curr-n)))))","problem":41,"user":"4ee271e2535d10e5ff6f5369"},{"code":"(fn [ls n]\n   (filter\n    (fn [x] (not (= (rem (.indexOf ls x) n)\n                    (- n 1))))\n    ls))","problem":41,"user":"4ff769bce4b0678c553fc38f"},{"problem":41,"code":"#(flatten (map drop-last (partition %2 %2 [:last] %1)))","user":"5e348945e4b0650de70e2b1d"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed (fn [i x] \n                  (when (not= 0 (mod (inc i) n))\n                    x))\n                xs))","user":"551ee974e4b08d5046aa8a50"},{"problem":41,"code":"(fn [l n]\n  (loop [coll l\n         i 0\n         res []]\n    (if (seq coll)\n      (if (not (= (inc i) n))\n        (recur (rest coll) (mod (inc i) n) (conj res (first coll)))\n        (recur (rest coll) (mod (inc i) n) res))\n      res)))","user":"5a342188e4b0ddc586f153bd"},{"problem":41,"code":"(fn [lst n] (keep-indexed #(if (not= (rem (inc %1) n) 0)\n                                    %2) lst))","user":"591e0782e4b09b4ee5954c25"},{"code":"#(apply concat (map (fn [l] (take (dec %2) l)) (partition-all %2 %)))","problem":41,"user":"52b35a6ee4b0c58976d9ad07"},{"problem":41,"code":"(fn [a n]\n     (keep-indexed #(if (not= (mod (inc %1) n) 0 ) %2) \n                   a))","user":"4e38f245535deb9a81d77f3e"},{"problem":41,"code":"(fn \n  [seqn n]\n  (keep-indexed #(if-not (= 0 (rem (inc %1) n)) %2) seqn))","user":"5854580ce4b07779d46863f9"},{"problem":41,"code":"(fn [coll idx]\n  (loop [remaining coll\n         counter (dec idx)\n         result []]\n    (if (empty? remaining)\n      result\n      (if (zero? counter)\n        (recur (rest remaining)\n               (dec idx)\n               result)\n        (recur (rest remaining)\n               (dec counter)\n               (conj result (first remaining)))))))","user":"59d9186be4b0ef0a1e9b5c50"},{"problem":41,"code":"(fn [coll n] \n  (vec \n   (flatten \n    (map #(if (< (count %) n) % (butlast %)) \n         (partition-all n coll)))))","user":"542c2de0e4b0dad94371f29f"},{"code":"(fn [coll n] (apply concat (partition-all (- n 1) n coll)))","problem":41,"user":"4f036d18535dcb61093f6abe"},{"code":"(fn f [i r [h & t] n] (if h (f (inc i) (if (= 0 (mod i n)) r (conj r h)) t n) r)) 1 []","problem":41,"user":"4eb298c1535d7eef3080734b"},{"problem":41,"code":"(fn [coll n]\n   (keep-indexed\n     #(if\n        (not= 0 (mod (inc %1) n))\n        %2\n        nil)\n     coll))","user":"5922a513e4b026ae38521286"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (map second\n    (remove \n        #(zero? (mod (first %) n))\n        (map vector (range 1 (inc (count coll))) coll)\n     )\n  )\n)","user":"511b81c3e4b07ab9ec456183"},{"code":"#(mapcat (partial take (- %2 1)) (partition-all %2 %))","problem":41,"user":"4edee6a2535d10e5ff6f533e"},{"problem":41,"code":"#(-> (loop [data %1 i %2  result (vector)]\n       (if (empty? data)\n         result\n         (recur (rest data) (if (= 1 i) %2 (dec i ) ) (if (= 1 i) result (conj result (first data)))))))","user":"5832be57e4b089d5ab817c86"},{"problem":41,"code":"(fn drop-nth [lst n]\n  (loop [lst lst\n         count 1\n         acc '()]\n    (cond\n      (empty? lst) (vec acc)\n      (= count n) (recur (rest lst) 1 acc)\n      :else (recur (rest lst) (inc count) (concat acc (list (first lst)))))))","user":"53528cd3e4b084c2834f4af2"},{"problem":41,"code":"#(->>(map-indexed (fn [a b] [(not= 0 (mod (inc a) %2)) b]) %1)\n    (filter first)\n    (map second))","user":"5649b1b0e4b0284900eef646"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (let [num (count coll)\n        rest-num (- num n)]\n    (cond (nil? coll) []\n          (< (count coll) n) coll\n          :else (concat (take (- n 1) coll) (drop-nth (take-last rest-num coll) n)))))","user":"568f2059e4b0dcc4269f40df"},{"problem":41,"code":"(fn [s n]\n  (loop [idx 0\n         result []]\n   (let [idx+1 (inc idx)\n         count_s (count s)]\n    (if (= idx count_s) result\n    (if ( = (mod idx+1 n) 0) (recur idx+1 result)\n    (recur idx+1 (conj result (s idx))))))))","user":"5c09e555e4b0bdcf453d16fd"},{"code":"(fn [coll it]\n  ((fn foo [coll1 nums it] \n    (cond\n      (empty? coll1) '()\n      (= 0 (mod nums it)) (foo (rest coll1) (inc nums) it)\n      :else\n      (concat (list (first coll1)) (foo (rest coll1) (inc nums) it)))) \ncoll 1 it))","problem":41,"user":"5078300de4b0fc74642bff66"},{"code":"(fn drop [s n]\n  ((fn drop-helper [s m]\n    (cond\n      (empty? s) '()\n      (= m n)\n        (drop-helper (rest s) 1)\n      :else\n        (cons \n          (first s) \n          (drop-helper (rest s) (inc m)))))\n      s 1))","problem":41,"user":"504e48ace4b0f6ff3350c498"},{"problem":41,"code":"#(loop [index 0 every %2 coll % new-coll []]\n   (if (>= index (count coll))\n     new-coll\n     (recur (inc index) every coll (if (zero? (mod (inc index) every))\n                                new-coll\n                                (conj new-coll (nth coll index))))))","user":"56677192e4b04acd4f672dd5"},{"code":"(fn dropn [coll p] (flatten\n(map drop-last\n(partition p p [nil] coll))))","problem":41,"user":"51736d4de4b00f4b6b0490d7"},{"problem":41,"code":"(fn drop-nth [col n]\n  (if (< (count col) n)\n    col\n    (concat (take (- n 1) col) (drop-nth (drop n col) n))))","user":"501fe6fae4b0cb6ebc0a42ef"},{"code":"(fn [xs n]\n  (for [[i x] (partition 2 (interleave (iterate inc 1) xs))\n        :when (not= 0 (mod i n))] x))","problem":41,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":41,"code":"#(loop [i 0 r []]\n     (if (= (count %1) i) r\n         (if (= (mod i %2) (dec %2))\n           (recur (inc i) r)\n           (recur (inc i) (conj r (nth %1 i))))))","user":"595bbab7e4b066ee0a44afe0"},{"problem":41,"code":"(fn [c n]\n  (let [x (#(partition n n [] %) c)\n      g (butlast x)\n      h (last x)]\n  (if (= n (count h))\n    (flatten (map drop-last x))\n    (flatten (cons (map drop-last g) h)))))","user":"5aba04dce4b073f17744269e"},{"problem":41,"code":"(fn [items dropNum] (mapcat drop-last (partition-all dropNum (conj items dropNum))))","user":"5e692be9e4b04a83ad7cd269"},{"code":"(fn [s n]\n  (vec (flatten (map #(take (dec n) %) (partition-all n s)))))","problem":41,"user":"4e09392a535d04ed9115e7ae"},{"problem":41,"code":"(fn take-every [coll n]\n  (loop\n    [in coll\n     out (vector)]\n    (if (empty? in) out\n      (recur (drop n in) (concat out (take (dec n) in))))))","user":"551d5cb9e4b07993ea3788e9"},{"problem":41,"code":";; fail:\n;; (fn [coll n] (keep-indexed #(if (not= %1 n) %2) coll))\n;; try again:\n(fn [coll n] \n  (keep-indexed \n   (fn [idx itm] \n     (if (not= 0 (mod (inc idx) n))\n       itm\n       nil))\n   coll))","user":"56ca0da9e4b0ea9b8538f715"},{"code":"#(keep-indexed (fn [i x] (if (< (rem i %2) (dec %2)) x)) %)","problem":41,"user":"5216933be4b000d124d989cf"},{"problem":41,"code":"(fn[coll dropno] (mapcat #(if(= (count %) dropno ) (butlast %) %) (partition-all dropno coll)))","user":"561d7246e4b064ca9f4b16b1"},{"problem":41,"code":"(fn dro\n  [lst n]\n  (let [ans (into [] (apply concat (reduce (fn\n                                             [a b]\n                                             (conj a (drop-last b)))\n                                           []\n                                           (partition-all n lst))))]\n    (if (zero? (mod (count lst) n))\n      ans\n      (conj ans (last lst)))))","user":"59636cc2e4b066ee0a44b0c7"},{"code":"(fn [lst x] (mapcat (partial take (dec x)) (partition-all x lst)))","problem":41,"user":"53767991e4b06839e8705e25"},{"problem":41,"code":"(fn [lst n] (reduce concat (partition-all (- n 1) n lst)))","user":"59e18b9be4b08badc2a0c50f"},{"problem":41,"code":"(fn my-skip\n  [coll n]\n  (loop [items coll acc []]\n    (if (seq items)\n      (recur (drop n items) (into acc (take (- n 1) items)))\n      acc)))","user":"583166c1e4b051871117c025"},{"code":"#(vec (mapcat identity (partition-all (dec %2) %2 %1)))","problem":41,"user":"52baefbae4b07a9af57922da"},{"problem":41,"code":"#_(fn [coll n]\n    (->> coll\n         (map vector (rest (cycle (range n))))\n         (remove (comp zero? first))\n         (map second)))\n\n(fn [coll n]\n  (->> coll\n       (partition-all (dec n) n)\n       (apply concat)))","user":"575cbe44e4b02ea114799374"},{"problem":41,"code":"#(map (fn [x] (nth %1 (dec x)))  \n      (filter\n       (fn [x] (not= 0 (rem x %2 )))\n       (range 1 (inc (count  %1 )))\n       )\n      )","user":"57bffed6e4b05aa3c4741c89"},{"problem":41,"code":"(fn drop-nth\n  [s n & args]\n  (if-let [xs (seq s)]\n  \t(let [idx (if (empty? args) 1 (first args))\n          sub (drop-nth (rest xs) n (inc idx))]\n      (if (= (mod idx n) 0)\n      \tsub\n      \t(cons (first xs) sub)))))","user":"58896e5ce4b0f1effa3b773e"},{"code":"(fn [i_list n]\r\n    (filter\r\n        (fn [element] (false? (coll? element)))\r\n        (map\r\n            (fn [position element]\r\n                (if (zero? (rem (+ 1 position) n)) '() element))\r\n            (range (count i_list))\r\n            i_list)))","problem":41,"user":"4dddf817535d08e6dec9fdd3"},{"problem":41,"code":"(fn [xs n]\n   (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n xs)))","user":"52aaabf7e4b0c58976d9ac68"},{"problem":41,"code":"(fn [l n] (filter identity (map-indexed (fn [i x] \n               (if (= 0 (rem (inc i) n))\n               false\n               x))\nl)))","user":"56c6a3c3e4b05cc29241eeb3"},{"problem":41,"code":"(fn [ls n]\n  (loop [ls ls\n  \t     res []]\n    (if (empty? ls)\n    \tres\n\t\t(recur \n\t\t  (->\n\t\t  \t(split-at n ls)\n\t\t  \t(last))\n\t\t  (->>\n\t\t  \t(split-at (dec n) ls)\n\t\t  \t(first)\n\t\t  \t(concat res))))))","user":"5d125d63e4b02c15ef021999"},{"problem":41,"code":"#(loop [xs (partition-all %2 %1) n %2 acc []]\n  (if (empty? xs)\n    (flatten (reverse acc))\n    (if (= n (count (first xs)))                  \n      (recur (next xs) n (cons (drop-last (first xs)) acc))\n      (recur (next xs) n (cons (first xs) acc)))))","user":"55ed9108e4b0121d4835fddc"},{"code":"(fn [xs y]\n  (flatten\n    (map #(take (- y 1) %)\n(partition-all y xs))))","problem":41,"user":"5012614ee4b02a085b99dc79"},{"problem":41,"code":"(fn [coll n]\n     (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) coll))","user":"53664e3be4b0243289761e74"},{"problem":41,"code":"#(keep-indexed (fn [a b] (if (> (mod (inc a) %2) 0) b)) %1)","user":"59a0262ee4b0871e7608b82d"},{"code":"(fn [s freq]\n    (loop [toadd (dec freq)\n           se s\n           res []]\n      (if (empty? se)\n        res\n        (if (= 0 toadd)\n          (recur (dec freq) (next se) res)\n          (recur (dec toadd) (next se) (conj res (first se)))))))","problem":41,"user":"5165a235e4b079ad97ec44ac"},{"problem":41,"code":"#(loop [acc (vector)\n        fst (take (dec %2) %1)\n        rst (drop %2 %1)]\n   (if (empty? (concat fst rst))\n     acc\n     (recur (into acc fst) (take (dec %2) rst) (drop %2 rst))))","user":"5cc75ffce4b0ccb061962836"},{"code":"#(apply concat (map (fn [x] (cond (= (count x) %2) (butlast x) :else x)) (partition-all %2 %)))","problem":41,"user":"4efb0ae1535dced4c769f273"},{"problem":41,"code":"(fn dropNth [x n] (loop [resultStr (str x) index 1] (if (> index (/ (count x) n)) (read-string resultStr) (recur (clojure.string/replace resultStr (str (nth x (- (* n index) 1))) \"\") (+ 1 index)))))","user":"5924009ce4b072a2710fce45"},{"problem":41,"code":"(fn drop-nth [col nth]\n  (loop [r col\n         index 1\n         dropped []]\n    (if (empty? r)\n      dropped\n      (if (= index nth)\n        (recur (rest r) 1 dropped)\n        (recur (rest r) (inc index) (conj dropped (first r)))))))","user":"5d80f328e4b0915913b1d372"},{"code":"(fn [a b] (keep-indexed #(if (> (mod (inc %1) b) 0) %2 ) a) )","problem":41,"user":"52da20c7e4b09f7907dd13b3"},{"problem":41,"code":"(fn\n  [items n]\n  (->>\n    items\n\n    ; here's one way using map-indexed:\n    ; (map-indexed vector ,,,)\n    ; (remove #(-> % first inc (rem ,,, n) zero?) ,,,)\n    ; (map second ,,,))\n\n    ; here's another way using partition:\n    (partition (dec n) n [] ,,,)\n    (mapcat identity ,,,)\n  )\n)","user":"5c6227fee4b0fca0c1622641"},{"problem":41,"code":"(fn [coll n]\n  (filter #(not= (dec n) (mod (.indexOf coll %) n)) coll))","user":"5586f418e4b059ccff29b1de"},{"problem":41,"code":"(fn [col n]\n  (vec\n   (mapcat identity\n           (map (fn [xs]\n                  (if (= n (count xs)) (drop-last xs)\n                    (identity xs)))\n                (partition n n [] col)))))","user":"5b333626e4b025bcb146f32f"},{"problem":41,"code":"(fn f [x y]\n   (if (not-empty x)\n     (concat (take (- y 1) x) (f (drop y x) y))))","user":"539f4e9ee4b0ca733b974498"},{"problem":41,"code":"(fn [s n] ((fn dn [s d] (\n                               if (empty? s)\n                               d\n                               (dn (drop n s) (concat d (take (dec n) s))))) s []))","user":"544e6b7fe4b0e39780006986"},{"problem":41,"code":"(fn [xs n]\n  (->>\n   (map-indexed vector xs) \n   (filter #(not= 0 (mod (inc (first %)) n)))\n   (map second)))","user":"5ec21ef0e4b00a66d4a95299"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not (zero? (mod (+ %1 1) n))) %2) coll))","user":"55dab5c8e4b0e31453f64ada"},{"problem":41,"code":"#(loop [coll % res []]\n    (if (< (count coll) %2)\n       (concat res coll)\n       (recur (nthrest coll %2)\n              (concat res (take (- %2 1) coll)))))","user":"53e73fe3e4b036ad0777e478"},{"problem":41,"code":"(fn [coll n] \n  (loop [coll-remaining coll result [] counter 1]\n    (if (empty? coll-remaining)\n      result\n      (if (= counter n)\n        (recur (drop 1 coll-remaining) result 1)\n        (recur (drop 1 coll-remaining) (conj result (first coll-remaining)) (inc counter))))))","user":"5dc9c4f2e4b02f9375f4e1f0"},{"problem":41,"code":"#(keep-indexed (fn [i elem] (if (< 0 (mod (inc i) %2)) elem)) %1)","user":"6032f7f9e4b0d5df2af222b9"},{"problem":41,"code":"(fn x [array n]\n  (->> array\n    (partition-all n)\n    (mapcat #(if (= (count %) n) (drop-last %) %))))","user":"5b3ef412e4b02d533a91bc06"},{"problem":41,"code":"(fn drop-nth\n  ([col n i]\n    (cond\n      (empty? col)\n     \t()\n      (= n i)\n        (drop-nth (rest col) n 1)\n      :else\n        (cons (first col) (drop-nth (rest col) n (inc i)))))\n  ([col n]\n    (drop-nth col n 1)))","user":"58c5a08be4b021aa9917ed40"},{"problem":41,"code":"(fn [sq n] (flatten (partition-all (dec n) n sq)))","user":"53e9681de4b036ad0777e4a4"},{"problem":41,"code":"(fn drop-nth\n  ([lst n] (drop-nth lst n []))\n  ([lst n acc]\n   (if (seq lst)\n     (recur (drop n lst) n (concat acc (take (dec n) lst)))\n     acc)))","user":"5ce6f93be4b0a17bb84e2b99"},{"code":"(fn [xs n] (let [m (map list (range) xs)] (map last (filter #(not= 0 (mod (inc (first %)) n)) m))))","problem":41,"user":"511d11d7e4b022853b0e079f"},{"code":"(fn drop-nth [coll i]\n  (letfn [(dropper [coll i]\n          (if (empty? coll)\n            []\n            (cons (take (- i 1) coll) (dropper (drop i coll) i))))]\n    (vec (apply concat (dropper coll i)))))","problem":41,"user":"4f4a17ffe4b0d56e7bb92c05"},{"code":"#(loop [x %1\n       y %2\n       r []\n         m %2]\n  (if (nil? x)\n    r\n      (if (= y 1)\n    (recur (next x) m r m)\n    (recur (next x) (dec y) (conj r (first x)) m)\n    )))","problem":41,"user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":41,"code":"(fn drop-every-nth-item\n  [sequence n]\n  (cond\n   (empty? sequence) '()\n   (< (count sequence) n) (concat (take n sequence) (drop-every-nth-item (drop n sequence) n))\n   :else (concat (drop-last (take n sequence)) (drop-every-nth-item (drop n sequence) n))))","user":"52561295e4b0541d1855ba03"},{"code":"(fn [xs n] (mapcat butlast (partition n n [0] xs)))","problem":41,"user":"4fadbc3fe4b081705acca23f"},{"code":"#(map first (filter (fn [[e i]] (not= 0 (rem i %2))) (map list %1 (iterate inc 1))))","problem":41,"user":"5137c3b0e4b0509a8b470482"},{"problem":41,"code":"(fn fd [x n]\n  (loop [x x\n         res []]\n    (if (empty? x)\n      res\n      (recur (drop n x) (concat res (take (dec n) x))))))","user":"5666c2dbe4b04acd4f672dc3"},{"problem":41,"code":"(fn [c1 n] (apply concat (partition-all (dec n) n c1)))","user":"60b61b40e4b0e0fa5f1b4244"},{"problem":41,"code":"(fn [coll n] \n  (map second (filter (fn [[idx value]] (> (mod (+ 1 idx) n) 0))(map-indexed vector coll))))","user":"5a9dbb32e4b0d174b936c7f3"},{"code":"(fn [c n]\n  (keep-indexed #(if (pos? (mod (+ %1 1) n)) %2) c))","problem":41,"user":"5006b7d2e4b0678c553fc48c"},{"code":"(fn wheresthedrop [xs nth-item]                                                                                   \n          \"drop without drop\"                                                                                            \n          (loop [xs xs                                                                                                   \n             result []                                                                                                   \n             count 1]                                                                                                    \n             (cond (empty? xs) result                                                                                    \n                   (= count nth-item) (recur (rest xs) result 1)                                                         \n                 :else (recur (rest xs) (conj result (first xs)) (inc count)))))","problem":41,"user":"4f748b54e4b044e54cd9a8fa"},{"problem":41,"code":"(fn [coll dropnth]\n  (loop [stack coll\n         result []\n         position 1]\n    (if (empty? stack)\n      result\n      (if (= 0 (rem position dropnth))\n        (recur (rest stack) result (+ 1 position))\n        (recur (rest stack) (conj result (first stack)) (+ 1 position))))))","user":"562c2fc2e4b058fa18c5a6d7"},{"code":"(fn f [l n]\n  (if (= '() l)\n      '()\n      (concat (take (dec n) l)\n              (f (drop n l) n))))","problem":41,"user":"50b668dde4b08fb537db98f2"},{"problem":41,"code":"(fn [a b] (mapcat #(if (= b (count %)) (drop-last %) %) (partition-all b a)))","user":"54be7e93e4b0ed20f4ff6eed"},{"problem":41,"code":"(fn [coll n]\n  (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n coll))))","user":"545f737ce4b01be26fd74688"},{"problem":41,"code":"(fn drop-every-nth\n  [sqnc n]\n  (let [enumd-sqnc (map vector sqnc (range 1 (+ (count sqnc) 1)))\n        fltd-sqnc (filter (fn filter-nths [[fst scnd]]\n                             (if (= 0 (rem scnd n)) false true))\n                           enumd-sqnc)]\n    (apply vector (map first fltd-sqnc))))","user":"566f3e18e4b0a866af6896e7"},{"problem":41,"code":"(fn [lst drp] \n  (->> lst\n       (map-indexed #(if (and (not= 0 %) (= 0 (mod (+ % 1) drp))) nil %2))\n  \t   (remove nil?)\n       ))","user":"6004c750e4b074f607df6645"},{"code":"(fn [s n] \n  (let [dupn (fn dn [x, c] \n               (cond\n                 (empty? x) '() \n                 (= (mod c n) 0) (dn (rest x) (+ c 1)) \n                 :else (cons (first x) (dn (rest x) (+ c 1)))\n                )\n               )\n        ] \n    (dupn s 1)\n    )\n  )","problem":41,"user":"535197f2e4b084c2834f4ae4"},{"problem":41,"code":"(fn [coll n]\n  (map\n    (fn [x] (last x))\n    (filter\n      (fn [x]\n        (not (= (mod (inc (first x)) n) 0)))\n      (map-indexed (fn [x y] [x y]) coll))))","user":"540d5085e4b0addc1aec670e"},{"code":"(fn [sq n] (mapcat #(take (dec n) %) (partition-all n sq)))","problem":41,"user":"4f17df72535d64f603146458"},{"code":"(fn [lst idx] (for [x (range (count lst)) :when (not (zero? (mod (inc x) idx))) ] (nth lst x)))","problem":41,"user":"51558136e4b06c5f6a1490a8"},{"problem":41,"code":"(fn [coll n]\n  (apply concat (partition-all (dec n) n coll))\n  )","user":"60752ef6e4b069485764de55"},{"problem":41,"code":"(fn [L n] (remove #(contains?  (into #{} (take-nth n (drop (- n 1) L ) ) )    %) L ) )","user":"54e51c7be4b024c67c0cf7f7"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (not= (mod (inc %1) n) 0) %2)\n                coll))","user":"58e58ae9e4b056aecfd47c9a"},{"problem":41,"code":"(fn [seq n] (flatten (partition (- n 1) n nil seq)))","user":"53b952eee4b047364c0444e6"},{"problem":41,"code":"(fn [coll x]\n  (mapcat #(if (= x (count %))\n                  (drop-last %)\n                  %)\n          (partition-all x coll)\n          ))","user":"591072e0e4b0163c97b36ebc"},{"problem":41,"code":"#(filter (comp not nil?) (for [x (range 1 (inc (count %1))) :let [y (%1 (dec x)) z (not (zero? (mod x %2))) ]] (if z y)))","user":"54f86b8ce4b01ecee9d88828"},{"code":"(fn [coll idx] (keep-indexed #(if (not= 0 (rem (+ 1 %1) idx)) %2) coll))","problem":41,"user":"4e823f41535db62dc21a62c8"},{"code":"(fn drop-nth [coll n]\n  (when (not (empty? coll))\n    (lazy-cat (take (- n 1) coll) (drop-nth (drop n coll) n))))","problem":41,"user":"4ee4f4a9535d1385b2869d85"},{"code":"(fn drop-every-nth [seq n]\n(map last\n(filter #(not= 0 (rem (first %) n))\n(map vector (iterate inc 1) seq))))","problem":41,"user":"4fe8e719e4b0547ebccb2430"},{"problem":41,"code":"(fn [ns num]\n  (keep-indexed #(if (not= 0 (mod (inc %1) num)) %2) ns))","user":"591326f2e4b0163c97b36efc"},{"code":"(fn [s n] (keep-indexed #(if (= 0 (mod (+ 1 %1) n)) nil %2) s))","problem":41,"user":"52bb81d7e4b07a9af57922e8"},{"code":"(fn drop-nth [l n]\r\n  (loop [ret []\r\n         lst l\r\n         i 1]\r\n    (cond\r\n     (empty? lst) ret\r\n     (= (mod i n) 0) (recur ret (rest lst) (inc i))\r\n     :else (recur (conj ret (first lst)) (rest lst) (inc i))\r\n     )))","problem":41,"user":"4dcbb035535d5973398f928d"},{"problem":41,"code":"(fn drop-every-nth [s n]\n  (mapcat #(take (- n 1) %1) (partition-all n s)))","user":"5f5b624de4b05ea7b9adc42f"},{"problem":41,"code":"(fn drop-nth [a-seq n]\n  (\n    (fn dropper [new-seq position]\n      (cond\n        (empty? new-seq) new-seq\n        (= position n) (dropper (rest new-seq) 1)\n        :else (conj (dropper (rest new-seq) (inc position)) (first new-seq))\n      )\n    )\n    a-seq 1\n  )\n)","user":"55c387e4e4b0e31453f6498b"},{"problem":41,"code":"(fn [coll x]\n  (->> coll\n       (map-indexed #(vector %1 %2))\n       (remove #(zero? (mod (inc (first %)) x)))\n       (map second)\n       ))","user":"54722c55e4b094393f72dd74"},{"problem":41,"code":"(fn F [sq n]\n  (loop [sq sq acc []]\n    (if (< (count sq) 1)\n      acc\n      (recur (drop n sq) (concat acc (take (dec n) sq))))))","user":"4f856adfe4b033992c121c44"},{"problem":41,"code":"(fn [sq n] (mapcat #(butlast %)  (partition n n '(nil) sq)))","user":"4ef08bd6535dced4c769f20a"},{"problem":41,"code":"(fn [coll index]\n  (reduce #(concat %1 (if (= index (count %2)) (drop-last %2) %2)) [] (partition-all index coll)))","user":"5d590500e4b02ba5928a6824"},{"problem":41,"code":"(fn [coll n]\n   (->> coll\n        (map-indexed #(vector %1 %2))\n        (filter #(not (= (rem (first %) n) (- n 1))))\n        (map last)\n        ))","user":"53ed6976e4b0d648e757f4c4"},{"problem":41,"code":"(fn drop-nth' [coll n]\n  (mapcat (partial take (dec n)) (partition-all n coll)))","user":"605a876be4b000d535e6f53c"},{"code":"(fn [c n] (keep-indexed #(when (> (mod (inc %) n) 0) %2) c))","problem":41,"user":"511ac2ede4b0c87c59c9670f"},{"code":"(fn [coll n]\n   (filter\n    (comp not nil?)\n    (map-indexed\n     (fn [idx val]\n       (if (zero? (mod (+ 1 idx) n))\n         nil\n         val))\n     coll\n     ))\n   )","problem":41,"user":"51b8e0dce4b050a1176cd69f"},{"code":"(fn [x y] (reduce (fn [acc i] (if (= (mod (+ 1 (key i)) y) 0) acc (conj acc (val i)))) [] (conj {} (zipmap (range (count x)) x))))","problem":41,"user":"5272d4b7e4b03e8d9a4a7453"},{"code":"(fn\n  [coll n]\n  (loop [coll coll\n         result []]\n        (if (empty? coll)\n            result\n            (recur (drop n coll)\n               (concat result (take (dec n) coll))))))","problem":41,"user":"52561be5e4b0541d1855ba08"},{"code":"#(mapcat (fn [x]\n             (if (<= %2 (count x)) (drop-last x) x))\n           (partition-all %2 %1))","problem":41,"user":"4e705861535d5021c1a89635"},{"problem":41,"code":"(fn [s n]\n  (loop [i 0\n         acc []]\n    (if (>= i (count s))\n      acc\n      (recur (inc i) (if (= (mod (inc i) n) 0)\n                       acc\n                       (conj acc (nth s i)))))))","user":"5512aca6e4b055c2f668d4b4"},{"code":"(fn [s n]\n  (loop [v [] s s]\n    (if (empty? s)\n      v\n      (recur (concat v (take (dec n) s)) (drop n s)))))","problem":41,"user":"517b59b8e4b0925c997201d0"},{"code":"(fn [x y] (loop[myNL '() myL x dA 1](if(not= (first myL) nil)\n                 (recur\n                  (if(< dA y)\n                    (conj myNL (first myL))\n                    myNL\n                    )\n                  (rest myL)\n                  (if(= dA y)\n                    1\n                    (+ dA 1)\n                    )\n                  )\n                 (reverse myNL)\n                )\n          )\n  )","problem":41,"user":"5177cacde4b0261ae665b877"},{"problem":41,"code":"(fn\n  [coll n]\n  (keep-indexed #(if (not= (rem (inc %1) n) 0) %2) coll))","user":"5c9a638fe4b048ec896c5aae"},{"problem":41,"code":"(fn [xs n]\n      (map second\n       (filter\n        (fn [[idx _]] (not= (mod (inc idx) n) 0))\n        (map-indexed vector xs))))","user":"5db35f85e4b010eb3c36cd22"},{"problem":41,"code":"(fn [xs step]\n  (->>\n   (filter #((comp not zero?) (rem (inc %) step)) (range (count xs)))\n   (map #(nth xs %))))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":41,"code":"#(remove nil? (for [i (range(count %1))] (if (not= 0 (mod (inc i) %2)) (get %1 i))))","user":"511036c5e4b04c71fce993ee"},{"code":"#(mapcat drop-last\n        (partition %2 %2 [nil] %))","problem":41,"user":"4dcd327b535d5973398f929b"},{"problem":41,"code":"(fn drop-every-nth\n  [coll n]\n  (if (< (count coll) n)\n    coll\n    (concat (take (dec n) coll) (drop-every-nth (drop n coll) n)))\n  )","user":"5f29837ee4b033932238a64f"},{"code":"(fn [col n] \n  (mapcat (fn [x y] (if (= 0 (mod (+ x 1) n)) nil (list y)))\n          (range (count col))\n          col))","problem":41,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":41,"code":"(fn [coll pos] \n  (reverse (reduce #(if (< (last %2) pos) (conj %1 (first %2)) %1) nil (map list coll (cycle (range 1 (inc pos)))))))","user":"52e5f810e4b09f7907dd1468"},{"problem":41,"code":"(fn drop-nth [l n] (concat (take (dec n) (take n l)) (when-let [rest (seq (drop n l))] (lazy-seq (drop-nth rest n)))))","user":"53d28800e4b00fb29b22131e"},{"code":"#(mapcat \n  (fn [x] \n    (if (>= (count x) %2)\n      (butlast x)\n      x)) \n  (partition-all %2 %))","problem":41,"user":"52eb400ee4b0705949c4443b"},{"code":"(fn [x y] \n  (map #(second %) (filter #(not= 0 (rem (inc (first %)) y)) (map-indexed vector x))))","problem":41,"user":"52166e50e4b0bf4bffd29cc6"},{"code":"(fn [x n] \r\n  (map second \r\n     (filter \r\n      #(< (mod (first %) n) (dec n))\r\n        (map-indexed vector x))))","problem":41,"user":"5047bbd1e4b0ec70b3ef8d90"},{"problem":41,"code":"(fn\n  [coll\n   n]\n  (filter (complement nil?) (map-indexed #(if (not= 0 (mod (inc %) n)) %2 nil) coll)))","user":"54d70bbfe4b0a52adc2e2026"},{"code":"(fn [xs n]\r\n  (for [[x i] (map vector xs (iterate inc 1)) :when (not= 0 (mod i n))] x))","problem":41,"user":"505aa653e4b021387fb89857"},{"problem":41,"code":"(fn [col n] (filter identity (map-indexed #(when-not (= 0 (mod (+ %1 1) n)) %2) col)))","user":"59473563e4b07ddc2dafad97"},{"code":"(fn [col x]\n  (map second \n       (filter (fn [[a b]] (not= 0 (mod a x)))\n          (map vector (iterate inc 1) col))))","problem":41,"user":"50ccf729e4b0f7a459302aac"},{"problem":41,"code":"(fn recur-drop-nth [col n]\n    (filter\n        #(not (nil? %1))\n        (map-indexed #(if (= (- n 1) (rem %1 n)) nil %2) col)))","user":"59aeff12e4b0e1f4e384c8af"},{"code":"(fn f [x y]\n  (when-not (empty? x)\n    (concat (take (dec y) x) (lazy-seq (f (drop y x) y)))))","problem":41,"user":"52b0323ee4b0c58976d9acc6"},{"problem":41,"code":"(fn [s n] (->> s (map-indexed list) (filter #(not= (mod (inc (first %)) n) 0)) (map second)) )","user":"53ced9fee4b00fb29b2212f8"},{"code":"(fn[test n](filter (fn[x](if(not= true (some #(= x %) (map (fn[y] (nth test y)) (range (- n 1) (count test) n) )))x)) test))","problem":41,"user":"5294b190e4b02ebb4ef75011"},{"problem":41,"code":"#(loop [v %\n                x 1 \n                a []] \n  \t\t\t(if (empty? v) \n    \t\t\ta\n\t\t\t  \t(recur (rest v) \n           \t\t\t\t(rem (inc x) %2)\n           \t\t\t\t(if (= x 0)\n           \t\t\t\t\ta\n             \t\t\t\t(conj a (first v))))))","user":"54b45938e4b05787c3b1638f"},{"code":"(fn [s n] \n  (apply concat (partition-all (dec n) n s)))","problem":41,"user":"4ef667c4535dced4c769f24c"},{"problem":41,"code":"(fn [szn n]\n  (loop [s szn nw 1 newlist '()]\n    (cond (empty? s) newlist\n      \t(= nw n) (recur (rest s) 1 newlist)\n          :else (recur (rest s) (inc nw) (concat newlist (list (first s)))))))","user":"60264d89e4b0d5df2af2222d"},{"problem":41,"code":"(fn drop-every-Nth-item [x n]\n  (loop [res []\n         in x\n         idx 1]\n    (if (empty? in)\n      res\n      (recur (if (not= 0 (mod idx n))\n               (conj res (first in))\n               res)\n             (next in)\n             (+ idx 1)))))","user":"5b596d0ce4b02d533a91bd7a"},{"code":"(fn [sequence drop-every]\n  (flatten\n    (map\n      #(if (= (count %) drop-every) (drop-last %) %) \n      (partition-all drop-every sequence))))","problem":41,"user":"4e9c3648535dbda64a6f6b7d"},{"code":"(fn f [coll n] \n  (when coll \n    (let [[h t] (split-at (dec n) coll)] \n      (concat h (f (next t) n)))))","problem":41,"user":"4f052eaf535dcb61093f6bf3"},{"problem":41,"code":"#(first(reduce (fn [[target counter] e] ( if (= 0 (mod (inc counter) %2)) [target (inc counter)] [(conj target e) (inc counter)] )) [[] 0] %1))","user":"56b3146ae4b0982f16b37e0f"},{"code":"(fn rmnth [c [x & xs] n] \n                          (if (empty? xs) (if (= 0 (rem c n)) [] (list x)) \n                          (if (= 0 (rem c n))\n                            (rmnth (inc c) xs n)\n                            (concat (list x) (rmnth (inc c) xs n))\n                            )\n                       \n                       ))\n1","problem":41,"user":"5210e5c5e4b080a8d9b9d63f"},{"problem":41,"code":"(fn [s i] (flatten (partition (dec i) i [] s)))","user":"53f592b7e4b0db01ade6f9d0"},{"problem":41,"code":"(fn [s n] (map second (filter #(not= 0 (mod (inc (first %)) n)) (map-indexed vector s))))","user":"5958cef6e4b066ee0a44af94"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (apply concat (map drop-last (partition n n [0] coll))))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":41,"code":"(fn [coll N]\n   (reduce #(conj %1 (nth coll (dec %2)))\n           []\n           (filter #(if (not= (mod % N) 0)\n                      true \n                      false) \n                   (take (count coll) (iterate inc 1)))))","user":"54b5ce67e4b05787c3b163ac"},{"problem":41,"code":"(fn drop-n [A, n] (\n                   reduce (fn [agg, i] \n                            (cond (= 0 (mod (+ i 1) n))\n                                  agg\n                                  :else\n                                  (conj agg (nth A i))\n                                  )\n                            )\n                   []\n                   (range (count A))\n                   )\n  )","user":"550cbb3be4b06e50f9beb155"},{"problem":41,"code":"(fn [x y] (flatten (map #(if (== (count %) y) (drop-last %) %) (partition-all y x))))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn drop_nth [coll n]\n  ((fn iter [remained result index]\n     (if (empty? remained)\n       result\n       (if (= (rem (inc index) n) 0)\n         (iter (rest remained) result (inc index))\n         (iter (rest remained) (conj result (first remained)) (inc index)))))\n    coll [] 0))","problem":41,"user":"5379ed48e4b06839e8705e5a"},{"problem":41,"code":"(fn [coll len]\n   (concat (take (dec len) coll)\n           (flatten (map rest (partition-all len (drop (dec len) coll))))))","user":"584917a1e4b089d5ab817ec9"},{"code":"(fn [xs n]\r\n  (remove #(= % ::dummy)\r\n    (apply concat\r\n      (map butlast\r\n        (partition n n (repeat ::dummy) xs)))))","problem":41,"user":"4dfd4ba8535d04ed9115e781"},{"problem":41,"code":"#(apply concat \n        (partition-all \n         (dec %2)\n         %2 %1)\n       )","user":"57619fc9e4b0994c1922fb93"},{"problem":41,"code":"(fn[x y](remove #(zero? (mod (inc (.indexOf x %)) y)) x))","user":"54f15cb8e4b024c67c0cf8b1"},{"code":"(fn [s n]\n  (letfn [(drop-last-if-same-size [n l]\n            (if (= n (count l))\n            (drop-last l)\n            l))]\n  (mapcat #(drop-last-if-same-size n %) (partition-all n s))))","problem":41,"user":"50b29029e4b03ea880433563"},{"problem":41,"code":";(fn [s n] (mapcat (partial take (dec n)) (partition-all n s)))\n(fn [s n] (apply concat (partition-all (dec n) n s)))","user":"554c0adde4b0a04f7929959e"},{"problem":41,"code":"(fn lxc\n  [lis p]\n  (let [len (count lis)\n        ran (range 1 (+ len 1))\n        mr  (filter #(not= (rem % p) 0) ran)]\n    (into [] (map #(nth lis (- % 1)) mr))\n    )\n  )","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":41,"code":"(fn drop-every-nth\n  [coll n]\n    (mapcat #(take (dec n) %) (partition-all n coll))\n  )","user":"59fa5fe0e4b0ca45a743a35f"},{"code":"(fn dr [coll pos] (map first (filter (fn [[_ p]](not= (dec pos) (mod p pos))) (map vector coll (range)))))","problem":41,"user":"511ac026e4b0c87c59c9670e"},{"code":"(fn dropnth [s n]\n  (if (<= n (count s))\n      (concat (take (- n 1) s) (dropnth (drop n s) n))\n      s))","problem":41,"user":"4f70afb8e4b07046d9f4effb"},{"problem":41,"code":"#(mapcat (fn [x y] (if (zero? (mod (+ y 1) %2)) '() (list x))) %1 (range (count %1)))","user":"57cef3f8e4b0c746388ab8b4"},{"code":"(fn [coll n]\n   (vec\n     (filter\n       #(-> (.indexOf coll %) (inc) (rem n) (not= 0))\n       coll)))","problem":41,"user":"51aefceee4b09397d5109797"},{"problem":41,"code":"(fn drop-nth\n    ([x n] (drop-nth x n 0 0 []))\n    \n    ([x n i j y]\n        (cond (< i (count x))\n            (cond \n                (= j (- n 1)) (drop-nth x n (inc i) 0 y)\n                :else (drop-nth x n (inc i) (inc j) (conj y (nth x i)))\n            )\n            :else y\n        )\n    )\n)","user":"5f0cb4f3e4b0f30dddfb5d4e"},{"problem":41,"code":"(fn f41 [coll n]\n  (map first (filter (fn [x] (not= 0 (rem (last x) n) )) (map vector coll (iterate inc 1) )))\n  )","user":"526698c9e4b03e8d9a4a7144"},{"code":"(fn [s n] \n  (map last\n    (filter #(not= (mod (first %) n) 0)\n      (map-indexed #(vector (inc %1) %2) s))))","problem":41,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn drop-n [seq n]\n  (->> seq\n       (partition-all n)\n       (map (fn [grp]\n              (if (= n (count grp)) (->> grp reverse rest reverse) grp)))\n       (apply concat)))","problem":41,"user":"50763574e4b0a894bb95bf3d"},{"code":"(fn [x y] (flatten (map #(take (dec y) %) (partition-all y x)))\n  )","problem":41,"user":"4eeb8f68535d93acb0a668a9"},{"problem":41,"code":"(fn [c n]\n  (->> (map vector (cycle (range n)) c)\n       (filter #(< (first %) (dec n)))\n       (map second)))","user":"580bd81ee4b0849f6811b711"},{"code":"(fn drop-nth [lst n]\n  (keep-indexed #(when-not (= 0 (rem (+ %1 1) \n                                 n)) %2) \n                lst))","problem":41,"user":"5374adc3e4b06d7f452d9e27"},{"problem":41,"code":"(fn [x y] (loop [op [] coll x]\n\t\t\t(if (empty? coll) op\n              (recur (into op (take (dec y) coll)) (drop y coll)))))","user":"593ab583e4b069cdc2982b57"},{"code":"(fn [l n] (keep-indexed #(if (not= (rem (inc %) n) 0) %2) l)  )","problem":41,"user":"50ef3e5de4b0a78662fa2652"},{"code":"#(filter (complement nil?) (map-indexed (fn [index,item] (if (= 0 (mod (inc index) %2)) nil item)) %1))","problem":41,"user":"5140771ae4b076604f1aa555"},{"code":"(fn [col, n]\n  (loop [col1 [] restcol col cnt 1]\n    (if (empty? restcol)\n        col1\n        (recur (if (not= (mod cnt n) 0)  (conj col1 (first restcol)) col1 )  (rest restcol) (inc cnt))\n    )\n   )\n\n)","problem":41,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":41,"code":"(fn f [coll n] \n  (let [[l r] (split-at (dec n) coll)]\n    (concat l (if (empty? r) r\n                (f (drop 1 r) n)))))","user":"5566d812e4b0c656e3ff1837"},{"problem":41,"code":"#(loop [col %1\n         counter 1\n         result []]\n       (if (empty? col)\n           result\n           (recur (rest col)\n                  (inc counter)\n                  (if (= 0 (mod counter %2))\n                      result\n                      (conj result (first col))))))","user":"57bf304de4b05aa3c4741c75"},{"problem":41,"code":"(fn [col x] (mapcat #(if (>= (count %) x) (drop-last %) %) (partition-all x col)))","user":"5df79c31e4b0a607a9a45c9b"},{"code":"(fn [s n]\n  (for [x (map (fn [a b] [a b]) s (range (count s)))\n        :when (not= 0 (rem (inc (second x)) n))]\n    (first x)))","problem":41,"user":"506a1985e4b01dc6af13f83e"},{"problem":41,"code":"(fn [xs n]\n  (remove #(= 0 (mod (inc (.indexOf xs %)) n)) xs))","user":"54dce62fe4b024c67c0cf78c"},{"code":"(fn [s x] (keep-indexed #(when (> (rem (inc %1) x) 0) %2) s))","problem":41,"user":"4e8516d0535db62dc21a62e8"},{"problem":41,"code":";#(apply concat (partition 2 %2 %1))\n\n#(apply concat (partition-all (- %2 1) %2 %1))","user":"5eccc5c2e4b016b56eae058f"},{"problem":41,"code":"(fn [l n]\n  (map first \n       (remove (fn [[el i]] (= (mod (inc i) n) 0))\n               (map vector l (range)))))","user":"541df0b5e4b01498b1a71a86"},{"problem":41,"code":"(fn [xs n] \n  (keep-indexed \n   #(if-not (= 0 (rem (inc %1) n))\n      %2)\n   xs))","user":"5b500215e4b02d533a91bce2"},{"code":"#(filter (fn[x] (not= (mod (.indexOf %1 x) %2) (- %2 1))) %1)","problem":41,"user":"4ed2dd98535d44c135fd68e2"},{"problem":41,"code":"(fn f [xs n]\n  (keep-indexed (fn [idx it] (if (= 0 (rem (inc idx) n)) nil it)) xs))","user":"57adbe7ee4b0b8559636fca0"},{"problem":41,"code":"#(loop [lst %1 res [] n 1]\n       (if (empty? lst)\n           res\n           (if (not (= 0 (mod n %2)))\n               (recur (rest lst) (conj (vec res) (first lst)) (inc n))\n               (recur (rest lst) res (inc n)))))","user":"5979cd36e4b02382a38ad1d8"},{"code":"#(mapcat identity (partition-all (dec %2) %2 %))","problem":41,"user":"51823a97e4b0f2adb733651e"},{"problem":41,"code":"(fn drop_n\n    ([s n]\n        (drop_n s n n []))\n    ([s n idex r_val]\n        (if (empty? s)\n            r_val\n            (if (<= idex 1)\n                (drop_n (rest s) n n r_val)\n                (drop_n (rest s) n (- idex 1) (concat r_val (list (first s))))))))","user":"56058d64e4b08b23635d3169"},{"code":"(fn drop-nth-item [xs n]\n (apply concat (partition-all (dec n) n xs)))","problem":41,"user":"4f9ff06ce4b0dcca54ed6d41"},{"code":"(fn [s n]\n  (let [blocks (partition-all n s)]\n    (println blocks)\n    (flatten (map (fn [s] (if (= n (count s)) (drop-last s) s) ) blocks ) )\n  )\n)","problem":41,"user":"51fb4a9be4b0f1313d4689ff"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (> (mod (+ 1 %1) n) 0) %2) coll))","user":"55882c84e4b059ccff29b1f2"},{"code":"(fn [coll n] \n  (mapcat #(if (= n (count % )) (pop (vec %)) %) (partition-all n coll)))","problem":41,"user":"4ed27f9f535d44c135fd68d5"},{"problem":41,"code":"(fn [coll dropIndex]\n\t(reduce \n\t\t(fn [result item]\n\t\t\t(if (= 0 (mod item dropIndex))\n\t\t\t\t(do\n\t\t\t\t\t; (println (str item \" \" (mod item dropIndex)))\n\t\t\t\t\tresult)\n\t\t\t\t(conj result (nth coll (dec item)))\n\t\t\t))\n\t\t[]\n\t\t(range 1 (inc (count coll)))\n\t))","user":"56c23ca6e4b05cc29241ee7f"},{"problem":41,"code":"(fn [coll n]\n  (mapcat\n   #(take (dec n) %)\n   (partition-all n coll)))","user":"5d45749be4b07c84aa5ae6a2"},{"problem":41,"code":"(fn [coll x] (mapcat butlast (partition x x [:a] coll)))","user":"5a34de78e4b0ddc586f153d0"},{"problem":41,"code":"(fn vynech [l i] \n  (map second \n  (filter (complement #(= (mod (inc (first %1)) i) 0)) (map-indexed vector l))))","user":"53ad2bbbe4b047364c044464"},{"problem":41,"code":"#(->> (partition-all %2 %1)\n       (map (fn [n] (take (dec %2) n)))\n       (flatten))","user":"5d28d935e4b092dab7f59c88"},{"code":"(fn [x y] \n   (keep-indexed \n     #(if (not= (mod (inc %1) y) 0) %2) \n     x))","problem":41,"user":"534f1c94e4b084c2834f4ac5"},{"problem":41,"code":"(fn [x i](filter (complement nil?)\n          (map #(if (zero? (mod % i)) nil %2) (range 1 (+ 1(count x))) x)))","user":"5c2836ebe4b07e362c2305d4"},{"code":"(fn [x n] (remove #(nil? %1) (map #(when (true? %1) %2) (cycle (concat (repeat (dec n) true) '(false))) x)))","problem":41,"user":"53512b55e4b084c2834f4ae0"},{"problem":41,"code":"(fn [s n]\n   (remove nil?\n           (map-indexed (fn [i e]\n                          (if (not= (rem (inc i) n) 0)\n                            e))\n                        s)))","user":"5a084a24e4b01bb0ae8afdf2"},{"code":"(fn dropn\n  ([a n] (dropn a n n))\n  ([a n i] (when (not-empty a)\n             (if (= i 1)\n               (dropn (rest a) n n)\n               (cons (first a) (dropn (rest a) n (dec i)))))))","problem":41,"user":"4f91a38ae4b0dcca54ed6c9f"},{"code":"(fn [s n] \n  (map first \n    (filter last \n      (map #(list % (< 0 (rem %2 n))) s (iterate inc 1)))))","problem":41,"user":"4f569218e4b0a7574ea71826"},{"problem":41,"code":"#(mapcat (fn [x] (if (= %2 (count x)) (butlast x) x)) (partition %2 %2 nil %1))","user":"53d88bd5e4b0e771c302546e"},{"problem":41,"code":"(fn [coll n]\n  (mapcat\n  #(take (dec n) %)\n  (partition-all n coll)))","user":"54f9d900e4b01ecee9d88844"},{"code":"(fn [x y] (reduce #(concat % (take (dec y) %2)) [] (partition-all y x)))","problem":41,"user":"4e8d5911535d65386fec2133"},{"code":"(fn  [seq nth]\n  (loop [s seq\n         res []\n         cnt 1]\n    (if-not s res (recur (next s)\n                         (if (and (zero? (rem cnt nth)) (not= 1 cnt)) res (conj res (first s)))\n                         (inc cnt)))))","problem":41,"user":"516081e7e4b009fba0926e28"},{"code":"(fn [l n] (keep-indexed #(if (not (= (mod (inc %1) n) 0)) %2) l))","problem":41,"user":"4faac363e4b081705acca200"},{"problem":41,"code":"#(->> %1\n      (partition-all %2)\n      (map (partial take (dec %2)))\n      flatten)","user":"57b3efb1e4b0fbc9809a278a"},{"problem":41,"code":"(fn [coll n]\n           (let [collSize (count coll)]\n             (vec (for [index (range collSize)\n                        :let [x (nth coll index)\n                              i (inc index)]\n                        :when (#(not= (mod i n) 0))]\n                    x))))","user":"5e3975a3e4b01d43a70e8dd3"},{"problem":41,"code":"(fn [x, n] (mapcat #(list (second %)) (filter #(> (mod (inc (first %)) n) 0) (map-indexed vector x))))","user":"5a214798e4b0ff51aa4b32aa"},{"code":"#((fn foo [x n k]\n  (cond\n    (empty? x) nil\n    (= k n) (foo (rest x) n 1)\n    :else (cons (first x) (foo (rest x) n (+ k 1)))))\n    %1 %2 1)","problem":41,"user":"4dea9fae535d08e6dec9fe02"},{"problem":41,"code":"(fn [l n] (let [combine (fn [l n] (map #(list %1 %2) ((comp cycle range) n) l))\n      remove-n (fn [l n] (filter #(not= (first %) n) l))\n      uncombine #(map last %1)\n      ]\n  (uncombine (remove-n (combine l n) (dec n)))))","user":"5650082fe4b0284900eef6b7"},{"problem":41,"code":"(fn drop-item\n  [coll n]\n  (mapcat #(take (dec n) %) (partition-all n coll)))","user":"53f3d96ee4b0742d9025b0fa"},{"problem":41,"code":"(fn [arg1 toDrop]\n\n  (loop [col arg1 n 1 result []]\n\n    (if (empty? col)\n\n      result\n\n      (if (= n toDrop)\n\n        (recur (rest col) 1 result)\n\n        (recur (rest col) (inc n) (conj result (first col)))))))","user":"59c5093ce4b0a024fb6ae50c"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(if (> (dec n) (mod %1 n)) %2) xs))","user":"4fcf1755e4b03432b189f40c"},{"problem":41,"code":"(fn \n  [coll n]\n  (apply concat (partition-all (- n 1) n coll)))","user":"566f7749e4b0a866af6896e9"},{"code":"(fn [sx n] (keep-indexed (fn [i x] (if-not (zero? (mod (inc i) n)) x)) sx))","problem":41,"user":"4f97d8f3e4b0dcca54ed6ced"},{"problem":41,"code":"(fn drop-nth [items number]\n  (loop [curr-number number\n         acc []\n         [curr & rest-items :as item] items]\n    (cond \n     (empty? item) acc\n     (= 1 curr-number) (recur number acc rest-items)\n     :else (recur (- curr-number 1) (conj acc curr) rest-items))))","user":"55bbfd60e4b01b9910ae29ed"},{"problem":41,"code":"(fn [lst n] (filter (fn [x] (not (= 0 (rem (inc (.indexOf lst x)) n)))) lst))","user":"5461873de4b01be26fd746a3"},{"problem":41,"code":"(fn [xs n] \n  (keep-indexed (fn [i x] (when (pos? (mod (inc i) n)) x)) \n                xs))","user":"55568a7de4b0deb715856e1c"},{"problem":41,"code":"(fn [lst n]\n  (for [v (map-indexed vector lst)\n        :let [y (second v)]\n        :when (not= (mod (inc (first v)) n) 0)] y))","user":"57fa7c93e4b0d3187e900963"},{"problem":41,"code":"(fn [coll size] (flatten (map #(if (= size (count %)) (drop-last %) %) (partition-all size coll))))","user":"546692aee4b01be26fd746e7"},{"code":"(fn [v n]\n    (first  (reduce (fn [[s i] elt]\n\t\t\t(if (not (zero? (mod (inc i) n)))\n\t\t\t    [(conj s elt) (inc i)]\n\t\t\t    [s (inc i)])) [[] 0] v)))","problem":41,"user":"4e6e3a1e535d5021c1a89602"},{"code":"(fn drop-nth [coll n]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (concat (take (- n 1) s) (drop-nth (drop n s) n))\n)))","problem":41,"user":"4eb1dd39535d7eef30807345"},{"problem":41,"code":"(fn [c n]\n  (mapcat (partial take (- n 1)) (partition-all n c))\n)","user":"5c46e6dde4b0e06e1360a3a7"},{"problem":41,"code":"(fn [col n]\n  (reduce #(concat %1 (take (dec n) %2))\n          []\n          (partition-all n col)))","user":"55597fcce4b0deb715856e37"},{"problem":41,"code":"(fn drop-nth [xs n]\n\t(if (empty? xs)\n   \t\t[]\n      \t(concat (take (dec n) xs) (drop-nth (drop n xs) n))))","user":"59f043d0e4b0966464fe6a3d"},{"problem":41,"code":"(fn drop ([seq val] (drop seq val 1 '()))\n  ([seq val counter result]\n    (if(empty? seq)\n      (reverse result)\n      (if (= 0 (mod counter val))\n        (drop (rest seq) val (inc counter) result)\n        (drop (rest seq) val (inc counter) (cons (first seq) result))))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":41,"code":"(fn [col number] (into [] (map #(second %) (filter #(not= (dec number) (rem (first %) number)) (map vector (range (count col)) col)))))","user":"578e535de4b0ebec4cfb7580"},{"code":"(fn f [coll n]\n  (when (seq coll)\n    (concat (take (dec n) coll) (f (drop n coll) n))))","problem":41,"user":"5213d7aae4b0961f15ac4d72"},{"problem":41,"code":"(fn [xs n] (filter identity (map-indexed #(if-not (= (mod (inc %1) n) 0) %2) xs)))","user":"56b86e64e4b0f26550335924"},{"code":"(fn [a b] (apply concat (partition (dec b) b '() a)))","problem":41,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":41,"code":"(fn [input factor]\n  (loop [i input res [] n factor counter 1]\n    (if (empty? i)\n      res\n      (if (= (mod counter n) 0)\n       (recur (rest i) res n (inc counter)) \n       (recur (rest i) (conj res (first i)) n (inc counter)) \n      )\n    )\n  )\n)","user":"5bd999cce4b0ed4b8aab4bf4"},{"problem":41,"code":"#(keep-indexed (fn [index item]\n                 (if (not (= 0 (mod (inc index) %2))) item))\n               %1)","user":"5f0c8b0de4b0f30dddfb5d4c"},{"code":"(fn [l m]\n  (loop [l l c 1 acc []]\n    (if (empty? l)\n      acc\n      (if (= 0 (mod c m))\n        (recur (rest l) (inc c) acc)\n        (recur (rest l) (inc c) (conj acc (first l)))))))","problem":41,"user":"4e568873535d8a8b8723a283"},{"problem":41,"code":"#(for [x (range (count %1))\n    :let [y (rem (inc x) %2)]\n    :when (not= 0 y)]\n    (nth %1 x)\n)","user":"580c8fcee4b0849f6811b721"},{"problem":41,"code":"(fn [xs n]\n    (keep-indexed #(if (not (zero? (rem (inc %1) n)))\n                     %2) xs))","user":"51553ea7e4b06c5f6a1490a2"},{"code":"(fn drop-every-nth [xs n]\n  (if (seq xs)\n    (concat (take (dec n) xs) (drop-every-nth (drop n xs) n))\n    xs\n  )\n)","problem":41,"user":"4fb710f4e4b081705acca2cd"},{"problem":41,"code":"(fn [col n]\n  (let [cols (partition-all n col)]\n    (flatten \n          (mapcat #(take (dec n) %) cols))))","user":"5cf48f04e4b087f62be35a86"},{"code":"#(map second (filter (fn [x]\n           (not= 0 (mod (first x) %2)))\n         (map list (iterate inc 1) %1)))","problem":41,"user":"51bb970be4b0fe3ecfb4644e"},{"problem":41,"code":"(fn\n  [coll n]\n  (reduce #(concat %1 (take (dec n) %2))\n          []\n          (partition-all n coll)))","user":"60b1add0e4b0e0fa5f1b4227"},{"code":"(fn dropn [ l d ]\n  (let [ builder (fn builder [ lst drop ]\n    (cond\n      (empty? lst) lst\n      (= 1 drop) (recur (rest lst) d)\n      :else (cons (first lst) (builder (rest lst) (dec drop))))) ]\n  (builder l d)))","problem":41,"user":"4e356d2b535deb9a81d77f2d"},{"code":"(fn [xs n] (filter #(not (nil? %)) (map-indexed (fn [idx x] (if (= 0 (mod (inc idx) n)) nil x)) xs)))","problem":41,"user":"519291c1e4b08962174cf74b"},{"code":"(fn [coll x] (keep-indexed (fn[idx i] (when (pos? (mod (inc idx) x)) i)) coll))","problem":41,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":41,"code":"(fn drop-nth [s n]\n  (when (seq s)\n    (concat (take (- n 1) s) (drop-nth (drop n s) n))))","user":"5ec0de29e4b00a66d4a9528e"},{"problem":41,"code":"(fn [xs n]\n  (->> \n    xs\n    (map vector (range) xs)\n    (remove\n      #(= (mod (inc (first %))\n               n)\n          0))\n    (map second)))","user":"521d064fe4b0c4ef0be830a8"},{"code":"#(keep-indexed \n  (fn [idx it] \n    (if \n      (not= (mod idx %2) (dec %2))\n      it\n    )\n  )\n  %1\n)","problem":41,"user":"50a4f36be4b0344e360f3bc9"},{"problem":41,"code":"#(remove(into #{} (take-nth %2 (drop (- %2 1) %)))%)","user":"6081e475e4b0736b099e42d6"},{"problem":41,"code":"(fn [c n]\n  (loop [res []\n         remaining c]\n    (if (seq remaining)\n      (recur (concat res (take (dec n) remaining))\n      \t     (drop n remaining))\n      res)))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":41,"code":"(fn [lat n]\n  (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n lat))))","user":"54bdcde5e4b0ed20f4ff6ee5"},{"problem":41,"code":"#(flatten(partition-all (dec %2)  %2 %))","user":"58ac14ebe4b0005cfeb1a740"},{"code":"(fn drop-every-nth [x n] \n  (if (not-empty x) \n    (concat \n      (take (dec n) x) \n      (drop-every-nth (drop n x) n))))","problem":41,"user":"4fba0877e4b081705acca2dd"},{"code":"(fn  [lst n]\n  (for\n    [i (range (count lst))\n     :when (not (zero? (mod (+ i 1) n)))]\n     (lst i))\n  )","problem":41,"user":"5228f870e4b0186687e23a98"},{"code":"#(map\n  last\n  (filter\n   (fn [[idx itm]] (not (= (mod (+ 1 idx) %2) 0)))\n   (map-indexed (fn [idx itm] [idx itm]) %1)))","problem":41,"user":"51b24defe4b02f8f128bb963"},{"problem":41,"code":"(fn [s n]\n  (mapcat \n   (partial take (dec n)) \n   (partition-all n s)))","user":"5424c523e4b01498b1a71b03"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (loop\n      [c coll\n       i 1\n       result []]\n    (if (empty? c)\n      result       \n      (if (= (mod i n) 0 )\n        (recur (rest c) (inc i) result)\n        (recur (rest c) (inc i) (conj result (first c)))))))","user":"5bb5cd43e4b0a20761a23575"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (if (< (count coll) n)\n    coll\n    (concat (take (- n 1) coll) (drop-nth (drop n coll) n))))","user":"5703d21ae4b08d47c97781ff"},{"problem":41,"code":"(fn drop-nth\n  [aseq n]\n  (loop [l-seq aseq\n         i 1\n         out []]\n    (if (empty? l-seq)\n      out\n      (if (not= i n)\n        (recur\n          (rest l-seq)\n          (inc i)\n          (conj out (first l-seq)))\n        (recur\n          (rest l-seq)\n          1\n          out)))))","user":"5d110abee4b02c15ef021983"},{"code":"(fn [col n] \n     (keep-indexed #(if (pos? (mod (inc %) n) ) %2) col))","problem":41,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"(fn [lst n] (loop [rst nil, x 1, ll lst]\n              (if (empty? ll)\n                   rst\n                   (if (= x n)\n                        (recur rst 1 (rest ll))\n                        (recur (concat rst (list (first ll)))\n                                (+ x 1) (rest ll))))))","problem":41,"user":"4fd0cb0ee4b04c3a95aa0407"},{"problem":41,"code":"(fn [s i]\n   (let [len (count s)]\n     (if (> i len)\n       s\n       (loop [s s ii 1 res []]\n         (if (> ii len)\n           res\n           (recur (rest s) (inc ii)\n                  (if (= 0 (mod ii i))\n                    res\n                    (conj res (first s)))\n             )\n           )\n         )\n       )\n    )\n  )","user":"589771f9e4b00487982d52bd"},{"code":"(fn [xs n]\n  (letfn [(aux [ys i]\n            (cond (empty? ys) '()\n                  (= i 1) (lazy-seq (aux (rest ys) n))\n                  true (lazy-seq (cons (first ys) (aux (rest ys) (dec i))))))]\n    (aux xs n)))","problem":41,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":41,"code":"(fn dropn [l n] (for [i (range (count l)) :when (not (zero? (rem (inc i) n)))] (nth l i)))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":41,"code":"#(flatten(partition-all (dec %2)%2 %))","user":"53fcd574e4b0de5c418485d9"},{"problem":41,"code":"(fn [inseq to-drop]\n    (loop [ret []\n            left-over inseq\n            cnt 1]\n        (if (= left-over [])\n            ret\n            (recur (concat ret (when (not= cnt to-drop) [(first left-over)]))\n                (rest left-over)\n                (if (= cnt to-drop) 1 (inc cnt))))))","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn [coll n]\n  (keep-indexed\n    (fn [i x] (condp = (mod (inc i) n)\n                0 nil\n                x))\n    coll))","problem":41,"user":"4e80aa10535db62dc21a62b1"},{"problem":41,"code":"(fn my-drop [coll n]\n  (if (< (count coll) n)\n    coll\n    (concat (take (dec n) coll) (my-drop (drop n coll) n))))","user":"54125eeee4b01498b1a719d3"},{"problem":41,"code":"(fn [coll nt]\n  (mapcat (fn [i] (take (- nt 1) i)) (partition-all nt coll)))","user":"53a2a259e4b0f1fc7453882c"},{"problem":41,"code":"(fn [col n] (flatten (map (partial take (- n 1)) (partition-all n col))))","user":"5776385fe4b0979f89651632"},{"problem":41,"code":"(fn jp [x n] (if (empty? x) () (concat (take (- n 1) x) (jp (drop n x) n))))","user":"544e1794e4b0e39780006980"},{"problem":41,"code":"(fn f [xs n]\n    (if (empty? xs)\n      []\n      (concat (take (- n 1) xs) (f (drop n xs) n))))","user":"56483562e4b0284900eef629"},{"problem":41,"code":"(fn dropEvery [xs n]\n  (vec (loop [ s xs\n               rez []]\n          (if (empty? s)\n              rez\n              (recur (drop n s) (concat rez (take (dec n) s)))))))","user":"5776903ee4b0979f8965163b"},{"problem":41,"code":"(fn [coll n]\n  (reduce (fn [res xs] \n            (apply conj res (take (dec n) xs)))\n          []\n          (partition-all n coll)))","user":"5f93529ae4b0715f5002d7bc"},{"problem":41,"code":"(fn [coll n]\n  (loop [[f & r] coll\n         cnt 1\n         new-coll []]\n    (if (nil? f)\n      new-coll\n      (if (zero? (mod cnt n))\n        (recur r (inc cnt) new-coll)\n        (recur r (inc cnt) (conj new-coll f))))))","user":"54ab1b5ae4b09f271ff37cc2"},{"problem":41,"code":"(fn [coll n] (flatten (map (partial take (dec n)) (partition-all n coll))))","user":"57202eb7e4b0c5bde472c090"},{"problem":41,"code":"(fn [s n]\n  (mapcat (partial take (dec n))(partition-all n s)))","user":"55f9c245e4b03cbcff9738ca"},{"problem":41,"code":"(fn [coll item]\n  (flatten\n    (map\n      (fn [x] (take (- item 1) x)) (partition-all item coll))))","user":"58a6806ee4b01a0c0b23292f"},{"problem":41,"code":"(fn [coll n]\n  (reduce concat '() \n    (map (partial take (dec n)) \n      (partition-all n coll))))","user":"56326995e4b0bfe05bf117a3"},{"code":"(fn solution [x k]\n  (filter (complement nil?) (map #(if (= (mod %2 k) 0) nil %1) x (range 1 100)))\n)","problem":41,"user":"52b49aebe4b0c58976d9ad2b"},{"code":"(fn [coll n]\n  (keep-indexed #(if (pos? (mod (+ %1 1) n)) %2) coll))","problem":41,"user":"4f2893d0e4b0d6649770a019"},{"code":"(fn [s n]\n    (for [i (range (count s)) :when (pos? (mod (inc i) n))] (get s i)))","problem":41,"user":"4ed292ac535d44c135fd68d9"},{"problem":41,"code":"(fn [col nbr]\n  ((fn iter [[cur-col-head & cur-col-tail] cur-nbr cur-ret]\n     (if (empty? cur-col-tail)\n       (if (= cur-nbr nbr)\n         cur-ret\n         (concat cur-ret (list cur-col-head))\n       )\n       (if (= cur-nbr nbr)\n         (iter cur-col-tail 1 cur-ret)\n         (iter cur-col-tail (inc cur-nbr) (concat cur-ret (list cur-col-head))) ))) col 1 []))","user":"5c3f6322e4b08cd430848e97"},{"problem":41,"code":"#(loop [[x & xs] %1 i 1 r []]\n   (cond\n    (nil? x) r\n    (= i %2) (recur xs 1 r)\n    :else (recur xs (inc i) (conj r x))\n    ))","user":"571346c0e4b07c98581c3a9b"},{"problem":41,"code":";;; better to use partition all\n(fn drop-nths[s x]\n  (:accum (reduce (fn[{:keys [ctr accum]} item]\n                   {:ctr (inc ctr)\n                         :accum \n                        (if (zero? (mod ctr x))\n                           accum\n                         (conj accum item)\n                         )\n                            }) {:accum [] :ctr 1} s)))","user":"539f9f79e4b0ca733b97449e"},{"problem":41,"code":"(fn [lst n]\n  (loop [result '()\n         x 1\n         lst lst]\n    (if (empty? lst)\n      result\n      (recur\n        (if (zero? (mod x n))\n          result\n          (concat result (list (first lst))))\n        (inc x)\n        (rest lst)))))","user":"5e950178e4b0fbed045a3801"},{"problem":41,"code":"#(keep-indexed (fn [idx v] (if (not= (mod (inc idx) %2) 0)\n                                     v)) %1)","user":"5acc961ae4b0e27600da7810"},{"problem":41,"code":"(fn [coll nth]\n  (keep-indexed\n    (fn [i e] (when (not= 0 (mod (inc i) nth)) e))\n    coll))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"code":"(fn [s n]\n  (flatten\n    (concat\n      (map #(drop-last %) (partition n s))\n      (take-last (rem (count s) n) s))))","problem":41,"user":"4edfd846535d10e5ff6f5345"},{"code":"(fn [coll n]\n  (mapcat \n    #(if (= (count %) n) (drop-last %) %) \n      (partition-all n coll)))","problem":41,"user":"50378996e4b0af0658af77ae"},{"code":"(fn [coll n] \n  (mapcat #(take (dec n) %) (partition-all n coll)))","problem":41,"user":"4fc67081e4b0ee37620e1813"},{"problem":41,"code":"#(keep-indexed (fn[i x] (if (zero? (mod (inc i) %2)) nil x)) %1)","user":"545537c1e4b0e397800069dd"},{"problem":41,"code":"(fn [xs n]\n  (->> xs\n       (map-indexed vector)\n       (filter #(not= 0 (mod (inc (first %)) n)))\n       (map second)))","user":"54f904c2e4b01ecee9d88832"},{"problem":41,"code":"#(loop [s %1 r '()]\n     (if (empty? s)\n       (reverse r)\n       (recur (drop %2 s) (reduce conj r (take (- %2 1) s)))))","user":"55d29fb6e4b0e31453f64a59"},{"problem":41,"code":"(fn dropper\n  [coll n]\n  (if (empty? coll)\n    coll\n    (into (into [] (take (dec n) coll)) (dropper (drop n coll) n))))","user":"542725fce4b01498b1a71b22"},{"problem":41,"code":"(fn [l m] \n\t(keep-indexed #(when (not (= 0 (mod (+ %1 1) m))) %2) l))","user":"530bae80e4b02e82168697d0"},{"code":"#(apply concat (partition (dec %2) %2 [] %))","problem":41,"user":"4dad938fc9a9d6ed1b99dc57"},{"code":"(fn [coll idx]\n   (flatten\n    (map #(take (dec idx) %) (partition-all idx coll))))","problem":41,"user":"51cacda3e4b068dadb8f2227"},{"problem":41,"code":"(fn f[s n]\n  (if (empty? s) \n    s\n    (concat (take (dec n) s) \n            (f (drop n s)\n               n))))","user":"578cf84ce4b0ebec4cfb7562"},{"code":"(fn [coll n]\n  (keep-indexed\n   (fn [i val]\n     (if (zero? (mod (inc i) n)) nil val))\n   coll))","problem":41,"user":"5374ad7de4b06d7f452d9e26"},{"code":";(fn [collection divisor] \n;\t\t\t (filter (fn [x] (not (nil? x))) (map-indexed \n;\t\t\t   (fn [index item] \n;\t\t\t     (when (not(= 0 (mod (+ 1 index) divisor))) item)) collection)))\n#(apply concat (partition-all (dec %2) %2 %))","problem":41,"user":"505b9084e4b032b709c81371"},{"code":"(fn [coll k]\n  (keep-indexed #(if (= (mod (inc %1) k) 0) nil %2) coll))","problem":41,"user":"52bb4be0e4b07a9af57922e2"},{"problem":41,"code":"(fn [col step] (keep-indexed #(when (not= (dec step) (mod %1 step)) %2) col))","user":"5eb3d02be4b00a66d4a95215"},{"problem":41,"code":"(fn y [l n]\n  (->> l\n  \t(keep-indexed #(if (zero? (mod (inc %1) n)) nil %2))))","user":"524f4162e4b0541d1855b806"},{"code":"(fn [l m]\n  (map \n    nth\n    (repeat l)\n    (filter \n      #(not (= (mod (+ % 1) m) 0))\n      (range (count l))\n    )\n  )\n)","problem":41,"user":"4f2a6169e4b0d6649770a03d"},{"problem":41,"code":"(fn [s n]\n    (apply concat (map-indexed\n                    (fn [index item] (if (not= (mod (inc index) n) 0)\n                                       [item]\n                                       []))\n                    s)))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":41,"code":"#(map %1 (for [i (range 0 (inc (count %1))) :when (not= 0 (mod i %2))] (dec i)))","user":"5c30d90de4b0d62ef62d9f22"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n       (map-indexed vector)\n       (remove (fn [[index]]\n                 (zero? (rem (inc index) n))))\n       (map second)))","user":"55f2e47de4b06e875b46ce4d"},{"problem":41,"code":"(fn k41 [coll x]\n  (let [a (quot (count coll) x)\n        b (map #(* % x) (range 1 (inc a)))\n        n (map #(nth coll %) (map dec b))\n        r (remove (set n) coll)]\n    r))","user":"55634f38e4b0c656e3ff17e8"},{"code":"#(keep-indexed (fn[idx itm] (if (not (contains? (set (range (dec %2) (count %1) %2)) idx)) itm)) %1)","problem":41,"user":"52a62e16e4b0c58976d9abf9"},{"problem":41,"code":"(fn [x c]\r\n  (map #(first %) (filter #(not= (mod (second %) c) 0) (map #(list %1 (inc %2)) x (range)))))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn [coll n]\n  (reduce (fn [res [idx elem]] (if (zero? (mod (inc idx) n)) res (conj res elem)))\n          []\n          (map-indexed vector coll)))","problem":41,"user":"51d19c24e4b0cfcf579466c3"},{"code":"(fn [coll n]\r\n  (loop [i 0, ret []]\r\n    (if (< i (count coll))\r\n      (recur (inc i) \r\n        (if (= (mod (inc i) n) 0)\r\n          ret\r\n          (conj ret (coll i))))\r\n      ret)))","problem":41,"user":"4ddee37c535d08e6dec9fddc"},{"problem":41,"code":"#(flatten (loop [n %2 res (take (dec n) %1)  seq (drop n %1)] (if (empty? (drop (dec n) seq)) (conj (take (dec n) seq) res) (recur n (conj (take (dec n) seq) res) (drop  n seq)))))","user":"59fcc31fe4b01bb0ae8afcef"},{"code":"(fn ! [xs n] (if (empty? xs) xs (flatten (cons (take (dec n) xs) (! (drop n xs) n)))))","problem":41,"user":"4f85a75ce4b033992c121c48"},{"code":"(fn [xs nth]\n  (map #(second %)\n       (filter #(not (zero? (mod (first %) nth)))\n               (map list (iterate inc 1) xs))))","problem":41,"user":"4f71347ae4b07046d9f4f009"},{"code":"#(flatten (partition-all (dec %2) %2 %1))\n\n;(fn [c s]\n;  (if (= s 4) [1 2 3 5 6]\n;    (if (= s 2) [:a :c :e]\n;      [1 2 4 5 7 8])))","problem":41,"user":"4fcc103fe4b0ee37620e185f"},{"code":"(fn f [xs n]\n  (remove nil? (map-indexed #(if (= 0 (mod (inc %1) n)) nil %2) xs)))","problem":41,"user":"5208495ce4b0c1501ba9e6da"},{"code":"(fn borra [xs n]\n  (if (empty? xs)\n    ()\n    (concat (take (- n 1) xs)\n            (borra (drop n xs) n))))","problem":41,"user":"4db51ce0535d87e67b28fe06"},{"problem":41,"code":"(fn drop-nth\n  [list number]\n  (mapcat (fn [partial-list] (take (dec number) partial-list)) (partition-all number list)))","user":"560d7863e4b05f002753df40"},{"problem":41,"code":"(fn [s n]\n    (mapcat #(if (= n (count %)) (drop-last %) %) (partition n n [] s)))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":41,"code":"(fn [xs n]  \n  (->> xs\n     (map-indexed #(identity [(inc %1) %2]))\n     (filter (fn [[idx itm]] (not (zero? (mod idx n)))))\n     (map second)\n     ))","user":"531a0709e4b08068f379ed87"},{"code":"(fn [coll nr] (vec (filter identity \n  (map #(if (= 1 %) nil %2)\n(flatten (repeat (range nr 0 -1))) coll))))","problem":41,"user":"4ec51590535d6d7199dd3683"},{"problem":41,"code":"(fn hoho [coll n]\n    (filterv #(not=  %1 nil) \n            (map #(if (= 0 (mod (inc %2) n) )  nil %1 ) coll (range (count coll) ))\n    )  \n)\n;(fn drop-every-nth [coll n]\n;  (apply concat (map drop-last (partition n n [0] coll))))\n\n;#(apply concat (partition-all (dec %2) %2 %))\n\n;( (fn [coll n](mapcat #(take (dec n) %) (partition-all n coll))) [1 2 3 4 5 6] 2)","user":"5ed30cb6e4b016b56eae05c2"},{"code":"#(letfn [(skip-nth [l c res]\n            (if (empty? l)\n                (reverse res)\n                (let [x (first l) xs (rest l) ]\n                    (if (= c %2)\n                        (skip-nth xs 1 res)\n                        (skip-nth xs (+ c 1) (cons x res))))))]\n    (skip-nth %1 1 nil))","problem":41,"user":"4fb4099be4b081705acca2a9"},{"problem":41,"code":"(fn d [xs n](when (seq xs) (lazy-cat (take (dec n) xs) (d (drop n xs) n))))","user":"55597b84e4b0deb715856e36"},{"code":"(fn steper [se st] \n                          (loop [ini-se se end-se [] acc 1] \n                            (if\n                              (= (count ini-se) 0)\n                              end-se\n                              (if \n                                (= 0 (mod acc st))\n                                (recur (rest ini-se) end-se (inc acc))\n                                (recur (rest ini-se) (conj end-se (first ini-se)) (inc acc))\n                                )\n                              )\n                            ) \n                          )","problem":41,"user":"4e9de526535dbda64a6f6b8e"},{"problem":41,"code":"(fn dropnth [coll n]\n  (when-let [s (seq coll)]\n    (concat (take (dec n) s) (dropnth (drop n s) n))))","user":"54bc539be4b0ed20f4ff6eca"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (loop [s (seq coll)\n         i 1\n         result []]\n    (cond (empty? s)\n          result\n          (= i n)\n          (recur (rest s) 1 result)\n          :else\n          (recur (rest s) (+ i 1) (conj result (first s))))))","user":"5899c54de4b00487982d52fa"},{"problem":41,"code":"(fn [s n]\n  (letfn [(impl [s n i r]\n                (if (empty? s)\n                  r\n                  (if (<= i 1)\n                    (recur (rest s) n n r)\n                    (recur (rest s) n (dec i) (conj r (first s))))))]\n    (impl s n n [])))","user":"5c50048ae4b0f9f7a8770eb9"},{"code":"(fn [col n] \n    (flatten(concat\n   (map #(drop-last %) (partition n col))\n   (take-last (rem (count col ) n) col)\n   )))","problem":41,"user":"51227a00e4b068a9582e656b"},{"problem":41,"code":"(fn [xs n]\n  (flatten\n    (map #(if (= (count %) n)\n            (drop-last %)\n            %) (partition-all n xs))))","user":"5bc82994e4b07a9b28b100b9"},{"problem":41,"code":"(fn dropn [coll n]\n (mapcat (partial take (dec n))\n         (partition-all n coll)))","user":"5d1cf523e4b02ea6f0fb6994"},{"code":"#(map first (filter (fn [[a b]] (> b 1)) (map (fn [a b] (list b a)) (cycle (range %2 0 -1)) %)))","problem":41,"user":"52a23af1e4b04e0c58e87beb"},{"code":"(fn [l n] (mapcat #(take (- n 1) %) (partition-all n l)))","problem":41,"user":"4daf4d2fedd6309eace4d178"},{"code":"#(into [] (clojure.set/difference (set %1) (set (take-nth %2 (cons :filler %1)))))","problem":41,"user":"512318b6e4b03b44edbed433"},{"problem":41,"code":"(fn [c n] (->> c (partition n n nil) (mapv #(take (dec n) %)) (apply concat) vec))","user":"5bb36a9ce4b0a20761a23523"},{"problem":41,"code":"(fn [s n] (mapcat #(if (= n (count %)) (take (- n 1) %) %) (partition-all n s)))","user":"58ec8c7ae4b056aecfd47d64"},{"code":"(fn poo4[s n]\n  (map (fn [[a b]] b)\n    (remove (fn [[a b]] (= (rem a n) (- n 1)))\n      (map #(vector % %2) (range) s))))","problem":41,"user":"4e7f32ee535db966e863cc3a"},{"problem":41,"code":"(fn\n  [coll n]\n  (mapcat #(if (= n (count %))\n          (butlast %)\n          %)\n       (partition-all n coll)))","user":"600d9808e4b074f607df669c"},{"code":"(fn [s n]\n  (loop [s_ s i n ret '()]\n    (cond\n      (not s_) (into '() ret)\n      (= i 1) (recur (next s_) n ret)\n      :else (recur (next s_) (dec i) (conj ret (first s_))))))","problem":41,"user":"4f050dec535dcb61093f6bef"},{"problem":41,"code":"#(loop [l [] m % n %2] \n   (if (< (count m) n) (concat l m)\n     (recur (concat l (take (dec n) m)) (drop n m) n)))","user":"55c3c1b0e4b0e31453f6498c"},{"problem":41,"code":"(fn [l n] (let [a (fn a [l counts actions acc] (if (empty? l) (reverse acc) (if (= (first counts) 0) (a l (rest counts) (rest actions) acc) (a (rest l) (conj (rest counts) (- (first counts) 1)) actions ((first actions) acc (first l))))))] (a l (cycle (vector (- n 1) 1)) (cycle (vector #(conj %1 %2) (fn [acc ignore] acc))) '())))","user":"5b3f2ba9e4b02d533a91bc09"},{"problem":41,"code":"(fn [coll interval] (apply concat (partition (dec interval) interval nil coll)))","user":"559c4236e4b066d22e731f67"},{"code":"(fn [sequence n]\n  (flatten\n    ((fn [so-far to-go n]\n      (if (empty? to-go)\n          so-far\n          (recur (conj so-far (take (dec n) to-go))\n                 (drop n to-go)\n                 n)))\n    [] sequence n)))","problem":41,"user":"4e42f930535dc968683fc49f"},{"code":"(fn [l n]\n  (loop [i 1\n         l l\n         res []]\n    (if-not (seq l)\n      res\n      (recur (inc i)\n             (rest l)\n             (if (zero? (mod i n)) res (conj res (first l)))))))","problem":41,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":41,"code":"(fn [coll n]\n  (letfn ([f [idx itm]\n           (if (not (zero? (mod (inc idx) n)))\n             itm)])\n    (keep-indexed f coll)))","user":"551747e0e4b06a49daca83c1"},{"problem":41,"code":"(fn drop-nth [v n]\n  (map v (filter #(not (= (rem % n) (dec n)))\n                 (range (count v)))))","user":"60460824e4b02d28681c77bc"},{"problem":41,"code":"(fn [coll n]\n   (let [indices (filter #(not= 0 (mod (+ % 1) n)) (range 0 (count coll)))]\n     (map (partial nth coll) indices)\n    )\n   )","user":"5429986ce4b01498b1a71b3b"},{"code":"(fn nseq\n  ([x n]   (nseq x n '() 1))\n  ([x n tt c] (if (empty? x) tt\n                           (if (= (mod c n) 0)\n                                  (nseq (rest x) n tt (inc c))\n                                  (nseq (rest x) n (concat tt [(first x)]) (inc c))))))","problem":41,"user":"50df6dd0e4b061dbdced7225"},{"code":"(fn[col x] (map second (remove #(= 0 (mod (first %) x)) (map clojure.core/list (iterate inc 1) col))))","problem":41,"user":"524d90c0e4b0a16e35cf6ded"},{"code":"(fn [s n] (into [] (clojure.set/difference (into #{} s) (into #{} (take-nth n (cons 0 s))))))","problem":41,"user":"513ca934e4b0b86ece9f3228"},{"problem":41,"code":"#(mapcat drop-last (partition %2 %2 \"x\" %1))","user":"58969076e4b00487982d52a2"},{"problem":41,"code":"(fn [xs index] (filter #(not= (- index 1) (mod (.indexOf xs %) index)) xs))","user":"5830377ee4b051871117c004"},{"problem":41,"code":"(fn droping [v d] \n  ((fn droper [v d count]\n     (if (empty? v)\n     '()\n     (if (== d count)\n       (droper (rest v) d 1)\n       (cons (first v) (droper (rest v) d (inc count)))\n     ))\n  ) v d 1))","user":"55034bf0e4b086ebe8a79c6d"},{"problem":41,"code":"(fn [in n]\n  (flatten\n   (map\n   (fn [x]\n     (if (= (count x) n)\n       (take (dec n) x)\n       x))\n   (partition n n nil in)))\n  )","user":"5ae47c1de4b0837691e92c81"},{"problem":41,"code":"(fn\n          [xs drop-index]\n          (keep-indexed #(if (not (zero? (mod (inc  %1) drop-index))) %2) xs))","user":"54c72b19e4b045293a27f636"},{"code":"(fn drop-nth \n  ([coll n] (drop-nth coll n 1))\n\t([coll n i]\n\t  (if (seq coll)\n\t    (let [drop-it (zero? (mod i n)) x (first coll) j (inc i)] \n\t      (if (true? drop-it)\n\t        (drop-nth (rest coll) n j)\n\t        (cons x (drop-nth (rest coll) n j)))))))","problem":41,"user":"4e6a4edd535d8ccf87e9fec4"},{"problem":41,"code":"(fn\n  [arr n]\n  (->>\n    arr\n    (map vector  (range (count arr)))\n    (filter (fn [a]  (not (= (rem (first a) n) (dec n)))))\n    (map last)\n    )\n\n   ;(map last)\n   ;(vector)\n   )","user":"5eb4927fe4b00a66d4a95221"},{"code":"(fn myDropNth [v, n] (loop [xs (drop n v), res (take (- n 1) v)]\n                          (if (empty? xs) res\n                              (recur (drop n xs) (concat res (take (- n 1) xs))))))","problem":41,"user":"52161db6e4b0bf4bffd29cb8"},{"problem":41,"code":"(fn [collection every-nth] (keep-indexed (fn [index item] (if (== (mod (inc index) every-nth) 0) nil item)) collection))","user":"57b356c2e4b0fbc9809a277b"},{"problem":41,"code":"#(->> (map vector %1 (cycle (range (dec %2) -1 -1))) (remove (comp zero? second)) (map first))","user":"5821b018e4b04b46fc4b0f80"},{"problem":41,"code":"(fn drop-nth-item [coll index]\n  (let [nth-items-to-nil (map-indexed (fn [idx element]\n                                        (let [reminder (rem (inc idx) index)]\n                                          (if (zero? reminder)\n                                            nil\n                                            element)))\n                                      coll)]\n    (remove nil? nth-items-to-nil)))","user":"551bdefde4b07993ea3788d7"},{"code":"(fn [coll n] \n  (mapcat \n    (fn [[i elem]] (when (not= 0 (rem i n)) [elem]))\n    (map-indexed #(vector (inc %1) %2) coll)))","problem":41,"user":"4fb01e53e4b081705acca260"},{"problem":41,"code":"(fn [inseq n]\n   (loop [out []\n          rst inseq]\n     (cond\n       (empty? rst) out\n       :else (let [fst (take (- n 1) rst)\n                   inrest (drop n rst)]\n               (recur (into out fst) inrest))\n       ))\n)","user":"5ab07d63e4b073f1774425af"},{"problem":41,"code":"(fn result [y x]\n    (if (< (count y) x)\n      y\n      (into (subvec y 0 (- x 1)) (result (subvec y  x) x ))\n      ))","user":"5d1ef23ee4b02ea6f0fb69bb"},{"problem":41,"code":"#(flatten (map (fn [x] (if (= %2 (count x)) (butlast x) x)) (vec (partition-all %2 %1))))","user":"5b044436e4b0cc2b61a3bd71"},{"code":"(fn [sq n]\r\n  (letfn [(hp [k acc rsq]\r\n            (cond\r\n              (empty? rsq)\r\n                acc\r\n              (= 1 k)\r\n                (hp n acc (rest rsq))\r\n              :else\r\n                (hp (dec k) (conj acc (first rsq)) (rest rsq))))]\r\n    (hp n [] sq)))","problem":41,"user":"4ee40938535d10e5ff6f5375"},{"problem":41,"code":"(fn dropnth [coll n]\n  (let [with-pos (map vector coll (range 1 (inc (count coll))))]\n    (map first (filter #(not= 0 (mod (last %) n)) with-pos)))\n  )","user":"5630fd6fe4b0bfe05bf1178b"},{"code":"(fn [seq,nth]\n\t(keep-indexed #(if (not= 0 (mod (inc %1) nth )) %2) seq)  \n  )","problem":41,"user":"513f53c6e4b051389b345b40"},{"problem":41,"code":"(fn [lst n] (keep-indexed #(if (> (mod (inc %) n) 0) %2 nil) lst))","user":"5f8e865fe4b0715f5002d76d"},{"code":"#(keep-indexed \n  (fn [idx item] \n    (when-not (= 0 (mod (inc idx) %2))\n      item))\n  %)","problem":41,"user":"5201d2f3e4b0b2e020a18f22"},{"code":"(fn f [x y]\n  (if (empty? x)\n    '()\n    (concat (take (dec y) x) (f (drop y x) y))))","problem":41,"user":"52379c46e4b0fae3832e99db"},{"problem":41,"code":"(fn [els n]\n      (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n els))))","user":"5658b9bde4b00d315579610e"},{"problem":41,"code":"#(mapcat rest (partition-all %2 (cons -1 %1)))","user":"590b055ae4b047aa04b199c9"},{"code":"#(for [l (map-indexed list %) \n:when (not (zero? (mod (inc (first l)) %2)))] \n(last l))","problem":41,"user":"4ee7d113535d93acb0a6686e"},{"code":"(fn [col x] (mapcat #(take (dec x) %) (partition x x [] col)))","problem":41,"user":"4daeabf6edd6309eace4d15c"},{"code":"(fn [xs x] (flatten (map #(if (>= (count %) x) (drop-last %) %) (partition-all x xs))))","problem":41,"user":"5032b398e4b00c0952a257eb"},{"problem":41,"code":"(fn [se n]\n  (filter #(not (= nil %)) (map-indexed #(if (and (> %1 0) (= 0 (rem (inc %1) n))) nil %2) se)))","user":"52cda980e4b07d0d72b2737b"},{"code":"(fn [s n]\n  (keep-indexed #(when (> (mod (inc %1) n) 0) %2) s))","problem":41,"user":"4f7ab8c7e4b06e829148e19c"},{"problem":41,"code":"(fn [x n]\n   (let [x2 (partition-all n x)]\n     (let [l (take-last 1 x2) f (drop-last x2)]\n       (if (< (count l) (- n 1))\n         (flatten (conj l (map drop-last f)))\n         (flatten (map drop-last x2))))))","user":"59385840e4b02506e01a29c9"},{"problem":41,"code":"(fn\n   [coll n]\n   (mapcat #(if (= (count %) n)\n              (drop-last %)\n              %)\n           (partition-all n coll)))","user":"60396c95e4b0d5df2af222f4"},{"problem":41,"code":"#(loop [i 0 out []]\n   (if (= i (count %)) out \n     (recur (inc i) (if (= (dec %2) (mod i %2)) out (conj out (nth % i))))))","user":"53e76bb2e4b036ad0777e47d"},{"problem":41,"code":"(fn drop-every [s n]\n  (if (empty? (nthrest s n))\n    (take (- n 1) s)\n    (concat (take (- n 1) s) (drop-every (nthrest s n) n))))","user":"5edfb1e5e4b0c7845d86b107"},{"problem":41,"code":"#(loop \n   [i 1, v %1, res []]\n   (if (empty? v)\n     res\n     (if (= i %2)\n       (recur 1 (rest v) res)\n       (recur (inc i) (rest v) (conj res (first v)))\n      )\n   )\n )","user":"5e79fcb9e4b085ba37836e08"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [i item] (when (not= (mod (inc i) n) 0) item)) coll))","user":"5a135573e4b0ff51aa4b3180"},{"code":"#(apply concat\n        (partition-all (- %2 1) %2 %))","problem":41,"user":"4ebbc1f6535dfed6da9c6d72"},{"problem":41,"code":"(fn\n  f\n  [c n]\n  (if (> n (count c))\n    c\n    (into (subvec c 0 (- n 1)) (f (subvec c n) n)))\n  )","user":"5c05cae7e4b0bdcf453d16a3"},{"code":"#(filter (complement nil?)\n         (map-indexed (fn [i x] (if (zero? (mod (inc i) %2)) nil x)) %))","problem":41,"user":"51ca7906e4b08b1cbd0d9487"},{"code":"(fn drop-n \n  ([s n] (drop-n s n 1))\n  ([s n i] \n    (if (empty? s)\n      s\n      (if (= n i)\n        (drop-n (rest s) n 1)\n        (cons (first s) (drop-n (rest s) n (inc i)))))))","problem":41,"user":"4fc50441e4b081705acca36f"},{"problem":41,"code":"(fn [l n] (map first (filter #(not (= (dec n) (last %)))\n  (map vector l (cycle (range n))))))","user":"4dadb5f4c9a9d6ed3399dc57"},{"problem":41,"code":"(fn dropnth  [s n]\n  (loop [agg [] s* s]\n    (if (empty? s*)\n      agg\n      (recur (concat agg (let [x (take n s*)]\n                           (if (> n (count x))\n                             x\n                             (drop-last x))))\n        (drop n s*)))))","user":"5694284de4b0dcc4269f410f"},{"problem":41,"code":"(fn [s n]\n  (loop [_s s r [] i 1]\n    (if (empty? _s)\n      r\n      (if (= i n)\n        (recur (rest _s) r 1)\n        (recur (rest _s) (conj r (first _s)) (inc i))\n        ))))","user":"598229d6e4b021a7a535fdfb"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n       (map list (rest (range)))\n       (filter (fn [[i e]] (pos? (mod i n))))\n       (map second))\n)","user":"53d78b64e4b0e771c3025466"},{"problem":41,"code":"(fn [xs n]\n  ((fn [n xs curr ys]\n     (cond\n       (empty? xs)\n       (reverse ys)\n\n       (= curr n)\n       (recur n (rest xs) 1 ys)\n\n       :else\n       (recur n (rest xs) (inc curr) (conj ys (first xs))))) n xs 1 '()))","user":"5e394c33e4b01d43a70e8dd1"},{"problem":41,"code":"(fn [coll index]\n   (remove #(-> coll\n              (.indexOf %)\n              inc\n              (mod index)\n              zero?) coll))","user":"5ccc2a03e4b0ccb06196288f"},{"problem":41,"code":"(fn drop-nth [s n]\n  (if (empty? s)\n    s\n    (concat (take (dec n) s) (drop-nth (drop n s) n))))","user":"5530baa5e4b076ab5578f81a"},{"code":"#(mapcat (fn [c] \r\n           (if (= (count c) %2)\r\n             (butlast c)\r\n             c))\r\n        (partition %2 %2 [] %))","problem":41,"user":"508c3d42e4b0f17d83ea26b2"},{"problem":41,"code":"(fn [items p]\n  \t(filter identity \n            (map (fn [item ind]\n                   (if (= (mod ind p) 0)\n                     nil\n                     item))\n                 items\n                 (iterate inc 1))))","user":"53de7484e4b0d874e779ae35"},{"problem":41,"code":"(fn   ([s n] (loop [r [] s s]\n           (if (empty? s) r (recur (concat r (take (dec n) s)) (drop n s))))))","user":"54d8cc38e4b0a52adc2e203e"},{"code":"(fn [values n]\n  (filter #(not (nil? %)) \n    (map (fn [e i] (if (= i 0) nil e)) \n      values (cycle (range (dec n) -1 -1)))))","problem":41,"user":"4ee3afde535d10e5ff6f5370"},{"problem":41,"code":"(fn [seq drop]\n   ((fn helper [seq count]\n      (if (empty? seq) nil\n          (if (zero? (rem count drop))\n            (helper (rest seq) (inc count))\n            (conj (helper (rest seq) (inc count)) (first seq))\n            ))\n\n      ) seq 1)\n   )","user":"5ee75f8be4b029a2061bbea5"},{"code":"#(flatten (map (fn [l] (take (- %2 1) l)) (partition-all %2 %)))","problem":41,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (mapcat (fn [item] (if (= n (count item)) (butlast item) item))\n          (partition-all n coll)))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":41,"code":"(fn hi [s n]\n  (loop [l-n 0 tail s cur []]\n    (if (seq tail)\n      \n      (if (= l-n (dec n))\n        (recur 0 (rest tail) cur)\n        (recur (inc l-n) (rest tail) (conj cur (first tail)))\n      )\n      cur\n    )\n  \n  ))","user":"5ff676a9e4b06df49cee1497"},{"code":"#(loop [c % r ()]\n  (if (empty? c)\n    r\n    (recur (drop %2 c) (concat r (take (dec %2) c)))))","problem":41,"user":"4ef355e3535dced4c769f228"},{"code":"(fn [data index] (loop [d data\n                        i index\n                        cnt 1\n                        return []]\n                   (if (empty? d)\n                     return\n                     (recur (rest d) i (if (= cnt i) 1 (inc cnt)) (if (= cnt i) return (conj return (first d)))))))","problem":41,"user":"50214ffae4b0ef1d2d4433bc"},{"problem":41,"code":"(fn [sq n]\n  (flatten\n   (map \n    (fn [x] (if (< (count x) n) x (take (dec n) x)))\n    (partition-all n sq))))","user":"55b527cbe4b01b9910ae2985"},{"problem":41,"code":"(fn [coll n]\n  (let[indexs  (map inc (range (count coll)))\n       indexs2 (filter #((complement =) 0 (rem % n)) indexs)\n       index3 (map dec indexs2)]\n    (vec (for [index index3] (get coll index)))\n    ))","user":"567ea403e4b0feffd0d18eb5"},{"problem":41,"code":"(fn [lst n]\n  (loop [in lst out [] i 1]\n    (if (empty? in)\n      out\n      (recur \n       (rest in) \n       (if (zero? (mod i n))\n         out\n         (conj out (first in)))\n         (inc i)))))","user":"5604bcf7e4b08b23635d315a"},{"code":"#(for [x (range 0 (count %)) :when (not=(mod (inc x) %2) 0)] (nth % x))","problem":41,"user":"4ee67364535d93acb0a6685f"},{"problem":41,"code":"(fn [s n]\n\t(letfn [(f [v k] (concat (take (dec k) v) (drop k v)))]\n\t(loop [i n res s]\n\t\t(let [j (- i (/ i n) -1)]\n\t\t\t(if (> j (count res))\n\t\t\tres\n\t\t\t(recur (+ i n) (f res j)))))))","user":"577d3feee4b0c8d87281f6d2"},{"problem":41,"code":"(fn drop-every-nth [xs n]\n  ((fn [ys rs c k]\n     (if (empty? ys)\n       rs\n       (recur (next ys)\n              (if (= (mod c k) 0)\n                rs\n                (concat rs (list (first ys))))\n              (inc c)\n              k))) \n   xs '() 1 n))","user":"5688a01be4b0dcc4269f406d"},{"code":"#(keep-indexed (fn [i x] (when-not (zero? (mod (inc i) %2)) x)) %)","problem":41,"user":"4db3393e535df7e46ed9b6cc"},{"code":"(fn [s n] (keep-indexed #(if (= (rem (inc %1) n) 0) nil %2) s))","problem":41,"user":"52b80827e4b0c58976d9ad56"},{"code":"(fn [xs n] (keep-indexed #(when (not= (mod % n) (- n 1)) %2) xs))","problem":41,"user":"514def61e4b019235f6c0591"},{"code":"(fn [x,n]\n    (apply concat \n        (map #(take (- n 1) %) \n            (partition-all n x))))","problem":41,"user":"4f85ef29e4b033992c121c4d"},{"problem":41,"code":"(fn [coll n] (mapcat #(take (dec n) %) (partition n n nil coll)))","user":"4fa5c8dde4b081705acca1af"},{"code":"(fn [xs n]\n    (keep-indexed\n     #(if (= 0 (mod (inc %1) n))\n        nil\n        %2)\n     xs))","problem":41,"user":"526302eee4b03e8d9a4a70a2"},{"code":"(fn mynth [y x]\n  (if (< (count y) x)\n    y\n    (concat (take (- x 1) y) (mynth (drop x y) x))))","problem":41,"user":"53150a4de4b08068f379ed22"},{"code":"(fn f [nl i ol x]\r\n  (if (empty? ol)\r\n    nl\r\n    (if (= i x)\r\n      (recur nl 1 (rest ol) x)\r\n      (recur (conj nl (first ol)) (inc i) (rest ol) x)))) [] 1","problem":41,"user":"50b8e9a4e4b0cba0e598b656"},{"problem":41,"code":"(fn [s nth] \n  {:pre [(or (> nth 1)\n             (throw (Exception. (format \"Fail: nth must be greater than 1.\"))))]}\n  (loop [l   (seq s)\n         pos 1\n         col []]\n          (if (empty? l)\n            col\n            (recur\n              (rest l)\n              (inc pos)\n              (if (= (mod pos nth) 0) col (conj col (first l)))))))","user":"595c02a9e4b066ee0a44afeb"},{"code":"(fn dropper [coll n]\n  (if (seq coll)\n    (concat\n      (take (dec n) coll)\n      (dropper (drop n coll) n))))","problem":41,"user":"4ee2da14535d10e5ff6f536c"},{"code":"(fn [v, c] (flatten (reduce #(cons %1 (take (dec c) %2)) [] (partition-all c v))))","problem":41,"user":"4fcc70b3e4b0ee37620e1862"},{"problem":41,"code":"(fn [coll n] \n\t(mapcat\n\t#(remove nil? %)\n\t(partition (dec n) n '(nil) coll)))","user":"583c4482e4b089d5ab817d7e"},{"code":"(fn [col n]\n  (reduce #(if (not= (%2 0) n) (conj %1 (%2 1)) %1) [] \n    (map #(vector %1 %2) (cycle (range 1 (inc n))) col)))","problem":41,"user":"4e89f9e5535d3e98b8023289"},{"code":"(fn [coll n]\n    (map first\n         (filter #(not= (dec n) (mod (second %) n))\n                 (map vector coll (range)))))","problem":41,"user":"4e7e8684535db169f9c79717"},{"code":"#(apply concat \n        (partition-all (dec %2) %2 %))","problem":41,"user":"525ed5f4e4b0cb4875a45db8"},{"problem":41,"code":"(fn [xs x] (keep-indexed #(if (> (mod (inc %1) x) 0) %2) xs))","user":"596d630ae4b069c0a1a19846"},{"problem":41,"code":"(fn ff [coll index]\n  (let [coll-len (count coll)\n        coll-digit (take coll-len (iterate inc 1))\n        filter-coll (apply map list [coll coll-digit])\n        filter-fn (fn [x]\n                    (let [x1 (last x)\n                          result-mod (mod x1 index)]\n                      (> result-mod 0))\n                    )\n        filter-result (filter filter-fn filter-coll)\n        map-result (map first filter-result )\n        ]\n    map-result\n   )\n  )","user":"5a71c89ee4b0512ff01cda93"},{"problem":41,"code":"(fn [c n] (loop [col c\n                 nt n\n                 bld []]\n            (if (= (first col) nil)\n              bld\n              (recur (nthrest col nt) nt (concat bld (take (- nt 1) col))))))","user":"5753b6c6e4b02ea1147992af"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not= 0 (rem (inc %1) n)) %2) coll))","user":"5465712ee4b01be26fd746dc"},{"problem":41,"code":"#(for [x (map vector (next (range)) %1)\n       :when (not= (mod (first x) %2) 0)]\n   (second x))","user":"5bc09ebae4b07a9b28b10005"},{"problem":41,"code":"(fn [lst n] (keep-indexed #(if (not= (- n 1) (rem %1 n)) %2) lst))","user":"5a19d181e4b0ff51aa4b3207"},{"code":"(fn every-nth [xs n]\n   (if (empty? xs)\n   ()\n   (concat (take (- n 1) xs) (every-nth (drop n xs) n)\n           )\n     )\n  )","problem":41,"user":"52f10094e4b05e3f0be25ee8"},{"problem":41,"code":"(fn nt[xs q] \n  (if (empty? xs) \n    '()\n    (concat (take (dec q) xs) (nt (drop q xs) q))))","user":"582a2d4fe4b051871117bf55"},{"code":"(fn [in n]\n  (keep-indexed #(if (= (mod (inc %1) n) 0) nil %2) in))","problem":41,"user":"4fd93c42e4b05e33b9224f35"},{"problem":41,"code":"(fn [x y] \n  (let [part (partition y x)\n        removed (map butlast part)\n        res (take-last (- (count x) (count (flatten part))) x)]\n    (-> (flatten removed)\n        (concat res)\n        vec)))","user":"5c78a3eae4b0fca0c1622829"},{"problem":41,"code":"(fn _f\n    ([lst n]\n       (_f lst n '()))\n    ([lst n result]\n       (let [lf (take (dec n) lst)]\n         (if (empty? lf)\n           (reverse result)\n           (recur (drop n lst) n (apply conj result lf))))))","user":"53f31dafe4b0742d9025b0f0"},{"problem":41,"code":"(fn [a n] \n  (mapcat #(if (< (count %) n) % (butlast %))\n          (partition n n nil a)))","user":"5447e5b7e4b032a45b8693c4"},{"problem":41,"code":"(fn [xs n]\n  (let [ys (partition-all n xs)\n        zs (map (partial take (- n 1)) ys)\n        as (apply concat zs)]\n    as))","user":"5799ff45e4b05b1deef9add1"},{"problem":41,"code":"(fn [coll n]\n  (let [idxs (filter #(not (zero? (rem (inc %) n))) (range (count coll)))]\n    (vec (map #(nth coll %) idxs))))","user":"5493ccbbe4b0b312c081ff50"},{"code":"(fn [s n]                                                                              \n   (loop [s s acc []]                                                                   \n     (if (> n (count s))                                                                \n       (concat acc s)                                                                   \n       (recur (drop n s) (concat acc (take (dec n) s))))))","problem":41,"user":"4f3656d1e4b0e243712b1ec9"},{"code":"(fn [lst n]\n  (filter identity\n          (map-indexed\n           #(if (= (dec n) (mod % n)) nil %2) lst)))","problem":41,"user":"510db6cde4b078ea71921145"},{"problem":41,"code":"(fn [se n] (mapcat butlast (partition n n [nil] se)))","user":"56018dd4e4b04bb52996e18f"},{"code":"(fn drop-nth [s n]\r\n  (when (seq s)\r\n    (let [xs (take (- n 1) s)]\r\n      (concat xs (drop-nth (drop n s) n)))))","problem":41,"user":"4e75edfe535d7a570dd295c7"},{"problem":41,"code":"#(into [] (sort (clojure.set/difference (set %1) (rest  (take-nth %2 (cons 0 %1))) )))","user":"584f096ae4b0b7285a6f4e5c"},{"problem":41,"code":"(fn [coll x] (into [] (flatten (map #(take (- x 1) %) (partition-all x coll)))))","user":"5d63bb2be4b0c9e5857d5027"},{"problem":41,"code":"(fn drop-nth [a b]\n    (keep-indexed #(when (not= 0 (mod (inc %1) b)) %2) a))","user":"603ae21de4b0d5df2af222fb"},{"problem":41,"code":"(fn [sequence num]\n  (flatten (map #(if (= (count %) num) (drop-last %) %) (partition-all num sequence))))","user":"5e03a15be4b0a607a9a45d5e"},{"code":"#(apply list (apply disj (set %) (drop 1 (take-nth  %2 (cons 0 %)))))","problem":41,"user":"52a9154ee4b0c58976d9ac3b"},{"code":"(fn everyn [x n]\r\n(loop [input x output [] cnt 1] \r\n(if (empty? input) \r\n  output\r\n\t( if (= (mod cnt n) 0) \r\n\t\t(recur (rest input) output (inc cnt))\r\n\t\t(recur (rest input) (conj output (first input)) (inc cnt))))))","problem":41,"user":"4f00c74f535dcb61093f6a31"},{"problem":41,"code":"(fn [s n]\n  (map last (filter #(pos? (mod (inc (first %)) n)) (map-indexed list s))))","user":"536046a9e4b063bf7a5f8fe1"},{"problem":41,"code":"(fn [col x]  (mapcat #(if (= (count %) x) (butlast %) %) (partition x x [] col)))","user":"56db90d4e4b0ea9b8538f80d"},{"problem":41,"code":"(fn [coll n]\n  (loop [coll coll acc [] c 1]\n    (if (empty? coll)\n      acc\n      (recur (rest coll)\n             (if (zero? (rem c n))\n               acc\n               (conj acc (first coll)))\n             (inc c)))))","user":"54fdbe3fe4b07d26eda61d3b"},{"code":"#(second(reduce \n  (fn [ [i acc] x] \n    (if (= i %2) \n      [1 acc]\n      [(inc i) (conj acc x)]))\n  [1 []] %))","problem":41,"user":"5224a46ce4b01819a2de42e5"},{"code":"(fn [l n]   (map first (filter #(not (= (mod (second %) n) 0)) (map vector l (range 1 (+ 1 (count l)))))))","problem":41,"user":"532b43c3e4b09d4e7a9b5531"},{"problem":41,"code":"(fn dropn\n  [s n]\n  (loop [[hd & tl] s n n cur n new []]\n    (if (nil? hd)\n      new\n      (if (= cur 1)\n        (recur tl n n new)\n        (recur tl n (- cur 1) (conj new hd))\n      )\n    )\n  )\n)","user":"5f6b8222e4b02876ed9fd052"},{"code":"(fn [sq n]\n  (loop [kept [] coll sq]\n    (if (empty? coll)\n      kept\n      (recur (into kept (take (- n 1) coll)) (drop n coll)))))","problem":41,"user":"5095f761e4b0ba05ca7aebfd"},{"code":"(fn [v m ] \n  (loop [ idx 0 result [] ]\n    (if (= (count v) idx)\n      result\n      (if-not (= (- m 1) (mod idx m))\n        (do\n        ;;(println m idx (v idx) result (count v))\n        (recur (inc idx) (conj result (v idx))))\n        (recur (inc idx) result)\n        ))) )","problem":41,"user":"4f0386ac535dcb61093f6b13"},{"code":"(fn ! [coll n]\n  (loop [acc [],\n         xs coll]\n    (if (empty? xs)\n      acc\n      (recur (concat acc (take (- n 1) xs)) (drop n xs)))))","problem":41,"user":"4ff3e771e4b0678c553fc356"},{"problem":41,"code":"(fn f [xs n]\n   (if (seq xs)\n     (concat (take (dec n) xs)\n             (f (drop n xs) n))))","user":"56cbb352e4b0ea9b8538f738"},{"code":"(fn [xs n]\n  (reduce #(concat %1 (take (dec n) %2)) '() (partition-all n n xs)))","problem":41,"user":"52a04f0ee4b04e0c58e87bc1"},{"problem":41,"code":"(fn [x y] (keep-indexed #(if (false? (zero? (mod (inc %1) y))) %2) x))","user":"5f086f54e4b0cf489e8d7f5e"},{"code":"(fn [coll e] \n  (let [index (fn [coll] (map vector (iterate inc 1) coll))]\n  (for [[i v] (index coll) :when (not= 0 (rem i e))] v)))","problem":41,"user":"4ef0b523535dced4c769f20e"},{"problem":41,"code":"(fn\n  [lst n]\n  (for [v (map-indexed vector lst)\n        :let [y (second v)]\n        :when (not= (mod (inc (first v)) n) 0)] y))","user":"57f81045e4b0d3187e90090f"},{"code":"(fn [xs n] (flatten (partition (dec n) n nil xs)))","problem":41,"user":"52fb64b7e4b047fd55837009"},{"code":"(fn [coll n] \n      (let [excluded (set (next (range 0 (inc (count coll)) n)))]\n  \t\t   (loop [i 0 fin [] ]\n  \t\t    (if (>= i (count coll))\n      \t\t\tfin\n      \t\t\t(if (nil? (get excluded (inc i)))\n      \t\t\t    (recur   (inc i) (conj fin (nth coll i)))\n      \t\t\t    (recur (inc i) fin))))))","problem":41,"user":"4e739e13535dff18050a9c76"},{"problem":41,"code":"(fn [s n]\n    (flatten (partition-all (dec n) n s)))","user":"550c55d0e4b06e50f9beb14d"},{"code":"(fn dropEveryNth [coll n]\r\n (filter #(not (nil? %1))\r\n  (map #(if (not= %1 n) %2) (cycle (range 1 (+ 1 n))) coll)\r\n )\r\n)","problem":41,"user":"4e6a79ca535d8ccf87e9feeb"},{"problem":41,"code":"#(mapcat \n  identity\n  (partition-all (dec %2) %2 %1)\n)","user":"57ce3fede4b0c746388ab8a6"},{"problem":41,"code":"(fn drop-every-nth [coll i]\n  (keep-indexed\n    #(if-not (zero? (mod (inc %1) i)) %2)\n    coll))","user":"5f663bc0e4b02876ed9fd02d"},{"problem":41,"code":"(fn [xs n]\n    (loop [done []\n           todo xs]\n      (if (empty? todo)\n        done\n        (recur (concat done (take (- n 1) todo)) (drop n todo)))))","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn drop-nth\n              [coll n]\n              (lazy-seq\n                (when-let [s (seq coll)]\n                  (concat (take (dec n) coll) (drop-nth (drop n s) n)))))","problem":41,"user":"4dddff47535d08e6dec9fdd4"},{"problem":41,"code":"(fn [s n]\n  (loop [res [] curr (first s) cdr (rest s) i 1]\n    (if (= curr nil)\n      res\n      \t(recur (if (= (mod i n) 0)\n                 res\n                 (conj res curr))\n               (first cdr)\n               (rest cdr)\n               (+ i 1)))))","user":"504f5804e4b0a02f9cffde72"},{"problem":41,"code":"(fn [coll n]\n  (flatten\n   (map #(take (dec n) %) (partition-all n coll))))","user":"54eb22a0e4b024c67c0cf845"},{"code":"(fn [xs n] (mapcat butlast (partition n n '(nil) xs)))","problem":41,"user":"5312cdaae4b08068f379ed03"},{"problem":41,"code":"(fn [xs n]\n  (->> xs\n    (map-indexed list)\n    (filter #(not (zero? (mod (inc (first %)) n))))\n    (map second)))","user":"51dafedee4b09f6bc204eee2"},{"problem":41,"code":"(fn drop-every [items idx] \n  (when (seq items)\n    \t(concat (take (dec idx) items) (drop-every (drop idx items) idx))))","user":"540904a7e4b0addc1aec66d2"},{"problem":41,"code":"(fn [input-seq n] (apply concat (partition-all (dec n) n input-seq)))","user":"5c723f4be4b0fca0c16227a0"},{"code":"(fn [s n]\n  (loop [result [] s s n n i (- n 1)]\n    (if (seq s)\n      (if (= i 0)\n        (recur result (rest s) n (- n 1))\n        (recur (conj result (first s)) (rest s) n (- i 1)) )\n      result)))","problem":41,"user":"4e6a82ba535d8ccf87e9feef"},{"code":"(fn [x t]\n  (for [i (range (count x))\n    :when (not= (rem i t) (- t 1))]\n    (nth x i)))","problem":41,"user":"523bc0e6e4b07becd5be21f9"},{"problem":41,"code":"#(mapcat (fn[x](if (= %2 (count x)) (drop-last x) x)) (partition %2 %2 nil %1))","user":"5e48ec09e4b043cd24807a45"},{"code":"(fn [l n]\r\n  (map first (remove #(zero? (mod (second %) n)) (map (fn [x y] [x y]) l (rest (range))))))","problem":41,"user":"507437c2e4b054001656acd0"},{"problem":41,"code":"(fn drop-nth \n  [x n]\n  (mapcat #(take (dec n) %) (partition-all n x)))","user":"5ac74b34e4b0e27600da777f"},{"code":"(fn [xs n] (flatten (take (/ (+ (count xs) (- n 1)) n)\n                   (concat\n                          (map (partial take (- n 1)) \n                               (iterate #(drop n %) xs))))))","problem":41,"user":"4eeae8f0535d93acb0a668a2"},{"problem":41,"code":"(fn [s n]\n      (->>\n          (range (+ (count s) 1))\n          (filter (fn [x] (> (mod x n) 0)) )\n          (map (fn [x] (nth s (- x 1))) )\n        )\n      )","user":"573407f0e4b0cd1946bd1001"},{"problem":41,"code":"(fn [x n]\n  (for [[i x] (map vector (iterate inc 1) x)\n        :when ((complement zero?) (mod i n))]\n    x))","user":"4fec08e8e4b0681fd128dc9d"},{"problem":41,"code":"(fn [v n]\n  (mapcat (partial take (dec n)) (partition-all n v))\n  )","user":"53a0b730e4b0ca733b9744b5"},{"code":"(fn dropnth[xs n] \n  (let [[begin end] (split-at (- n 1) xs)]\n    (if (empty? end) begin\n      (concat begin (lazy-seq (dropnth (rest end) n))))))","problem":41,"user":"524740e7e4b05ef8e38e635d"},{"code":"(fn [coll n]\n(keep-indexed #(if (not= 0 (mod (inc %1) n)) %2 nil) coll))","problem":41,"user":"4e8b6f4d535d65386fec211e"},{"problem":41,"code":"(fn rem-nth [ c n ]\n      (filter ( complement nil?)\n           (map #( if( not= 0 ( rem %2 n )) %1 )\n                       c (range 1 (inc (count c))))))","user":"556880dae4b0c656e3ff1856"},{"problem":41,"code":"(fn [coll step] (flatten \n    (partition (dec step) step nil coll))\n)","user":"5a285a38e4b07f18be40aa67"},{"problem":41,"code":"(fn dn [s i]\n  (concat (take (dec i) s) (if (empty? s) [] (dn (drop i s) i)))\n  )","user":"583048d9e4b051871117c007"},{"problem":41,"code":"#(->> (partition %2 %2 nil %1)\n             (map (fn [x] (if (>= (count x) %2)\n                                        (drop-last x)\n                                        x)))\n      flatten)","user":"58949f8de4b00487982d525e"},{"problem":41,"code":"(fn [s n]\n  (loop [i 1\n         s s\n         ret []]\n    (if (empty? s)\n      ret\n      (recur (inc i) (rest s) (if (= 0 (mod i n)) ret (conj ret (first s)))))))","user":"5b227f5ae4b03cfeda66ed63"},{"problem":41,"code":"(fn [l n] (for [[x y] (map (fn [a b] [a (inc b)]) l (cycle (range n))) :when (not= y  n)] x))","user":"577202d2e4b0979f896515c0"},{"code":"#(flatten (partition-all (- %2 1)\n                     %2 %1))","problem":41,"user":"517945dce4b0684c1c981a43"},{"code":"(fn [s n] (remove nil? (map (fn [x] (if (not= 0 (mod (first x) n)) (second x) nil)) (map vector (iterate inc 1) s))))","problem":41,"user":"5340ee60e4b00652c8746ec9"},{"problem":41,"code":"(fn [col n]                                                                              \n  (loop [current 1                                                                            \n         result []]                                                                           \n    (if (> current (count col))                                                               \n      result                                                                                  \n      (if (= 0 (mod current n))                                                               \n        (recur (inc current) result)                                                          \n        (recur (inc current) (conj result (nth col (dec current))))))))","user":"57a499dae4b0a966079561e6"},{"problem":41,"code":"(fn \n  [items, idx]\n  (loop [accum [] \n         remaining items \n         item_count 1]\n    (if\n    \t(empty? remaining)\n      \taccum\n      \t(if (= 0 (mod item_count idx))\n        \t(recur accum (rest remaining) (inc item_count))\n            (recur (conj accum (first remaining)) (rest remaining) (inc item_count))\n        )\n    )\n  )\n )","user":"5dd25ca8e4b0948ae9d9ad55"},{"code":"(fn [s n]\n                (reverse (reduce #(into %1 %2) '() (map #(if (= (count %) n) (butlast %) %) (partition-all n s)))))","problem":41,"user":"4e08fb7a535d04ed9115e7ac"},{"code":"(fn [s n] (loop [s s n n i 1 result []] (if (seq s) (if (not= 0 (rem i n)) (recur (rest s) n (inc i) (conj result (first s))) (recur (rest s) n (inc i) result)) result)))","problem":41,"user":"4efd98fa535de96065cf5086"},{"code":"(fn [xs n]\n  (flatten (map (fn [x] (take (- n 1) x)) (partition-all n xs))))","problem":41,"user":"4fcfa1a4e4b03432b189f41a"},{"problem":41,"code":"#(keep-indexed (fn [index value] (if (= (rem (inc index) %2) 0) nil value)) %1)","user":"5a84cf8de4b00b71e582a095"},{"code":"(fn [c n]\n  (mapcat #(if (>= (count %) n) (butlast %) %) (partition n n nil c)))","problem":41,"user":"4fff57f1e4b0678c553fc3fe"},{"code":"(fn [coll n] (flatten (partition-all (- n 1) n coll)))","problem":41,"user":"52976262e4b02ebb4ef75041"},{"problem":41,"code":"(fn [mylist sep] (apply concat (map rest (partition-all sep (concat [:default] mylist)))))","user":"5c0e3f86e4b01240ff56713d"},{"code":"(fn drop-nth [coll n]\n  (flatten\n    (lazy-seq\n      (when-let [s (seq coll)]\n        (cons (take (dec n) s) (drop-nth (drop n s) n))))))","problem":41,"user":"4ed00953535d44c135fd68c2"},{"problem":41,"code":"(fn [xs n]\n  (->> xs\n       (map-indexed #(vector %1 %2))\n       (filter #(not (zero? (mod (inc (first %)) n))))\n       (map second)))","user":"553dd883e4b0a04f792994e6"},{"code":"(fn [coll n]\n  (flatten\n   (concat\n    (map #(drop-last %) (partition n coll))\n   \t(take-last (rem (count coll) n) coll))))","problem":41,"user":"512a8ef7e4b0ff5c4bc1f99e"},{"problem":41,"code":"( fn f [s n]\n(loop [agg [] s* s]\n  (if (empty? s*)\n    agg\n    (recur (concat agg (let [x (take n s*)]\n                         (if (> n (count x))\n                           x\n                           (drop-last x))))\n           (drop n s*)))))","user":"5facfb48e4b08cb800c85aea"},{"problem":41,"code":"(fn\n  [xs n]\n  (loop [in xs, out [], i 1]\n    (cond\n      (empty? in) (seq out)\n      (= 0 (rem i n)) (recur (rest in) out (inc i))\n      :else (recur (rest in) (conj out (first in)) (inc i)))))","user":"559454f2e4b0c79f6e1db952"},{"code":"(fn [coll index]\n  (remove nil?\n          (map-indexed (fn [idx itm] \n                         (if (not= (dec index) (mod idx index)) \n                           itm)) \n                       coll)))","problem":41,"user":"528b01a0e4b0239c8a67ae89"},{"code":"(fn [s n]\n  (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n s))))","problem":41,"user":"4ed9354f535d10e5ff6f5301"},{"problem":41,"code":"(fn [coll el]\n  (apply concat (partition-all (dec el) el coll)))","user":"57e79d8ee4b0bfb2137f5afe"},{"problem":41,"code":"(fn drop-n\n  ([xs n] (drop-n xs n 1))\n  ([xs n i]\n   (if (= 0 (count xs)) '()\n     (if (= 0 (mod i n))\n       (drop-n (rest xs) n 1)\n       (conj (drop-n (rest xs) n (+ i 1)) (first xs))))))","user":"56bfcba1e4b060a8e693e3a1"},{"code":"#(apply concat \n  (partition-all (dec %2) %2 %))","problem":41,"user":"4dadc6f2c9a9d6ed4099dc57"},{"code":"#(map\n  first\n  (filter\n   (fn [[a b]] (not= 0 (mod (inc b) %2)))\n   (map list %1 (range))))","problem":41,"user":"51170b49e4b0063b4e3e16d9"},{"problem":41,"code":"(fn [parts n]\n\t(loop [myvector [] curcount 1 [partfirst & partsrest] parts]\n    \t(if (empty? partsrest)\n         \t (if (= curcount n)\n              \tmyvector\n                (conj myvector partfirst)\n             )\n          \t (if (= curcount n)\n              \t(recur myvector 1 partsrest)\n                (recur (conj myvector partfirst) (inc curcount) partsrest)\n                \n             )\n        )\n    )\n)","user":"579be21fe4b05b1deef9adff"},{"code":"#(keep-indexed (fn [idx item] (when-not (zero? (mod (inc idx) %2)) item)) %1)","problem":41,"user":"4dc0ff08535d020aff1edf84"},{"problem":41,"code":"(fn drop-nth\n  ([coll n]\n   (if (empty? coll)\n     []\n     (concat (take (- n 1) coll) (drop-nth (nthrest coll n) n))\n     )\n    )\n  )","user":"5b92f178e4b0c0b3ffbd4a41"},{"problem":41,"code":"(fn [xs idx]\n  (reduce-kv (fn [a k v]\n               (if (= (rem (+ 1 k) idx) 0)\n                 a\n                 (conj a v)))\n             []\n             xs))","user":"570a2357e4b0b0fb43fd06b5"},{"code":"(fn funcky [col n]\n(if (empty? col) col\n(concat (take (dec n) col) (funcky (drop n col) n))))","problem":41,"user":"51427a8be4b0b50abeb46b37"},{"code":"#(vec (flatten (map (fn [e] (take (dec %2) e)) (partition-all %2 %1))))","problem":41,"user":"5027b41ee4b01614d1633fee"},{"code":"#(mapcat (partial take (dec %2)) (partition %2 %2 nil %1))","problem":41,"user":"502ad2cae4b0614b5299611f"},{"code":"(fn [xs skip]\n  (loop [result []\n         data xs\n         index 1]\n    (if (empty? data) result\n      (let [item (if (= index skip) nil (first data))\n            result (if item (conj result item) result)\n            index (if (= index skip) 0 index)]\n        (recur result (rest data) (inc index))))))","problem":41,"user":"5098db05e4b0cae2931060a2"},{"code":"#(keep-indexed (fn [i x] (when (< 0 (mod (inc i) %2)) x)) %)","problem":41,"user":"4e5229dc535d302ef430da6f"},{"problem":41,"code":"#(flatten (map (fn [x] (if (= %2 (count x))\n                          (drop-last x) x)) (partition-all %2 %1)))","user":"55d85ac9e4b0e31453f64ab2"},{"problem":41,"code":"(fn [x b]\n(->>\n x\n (partition b b [nil])\n (map drop-last)\n (reduce concat)))","user":"55912230e4b027778923767a"},{"problem":41,"code":"#(map first (filter (fn [[n i]] (< 0 (mod i %2))) (map list %1 (iterate inc 1))))","user":"5cc4b34de4b0ccb061962805"},{"code":"(fn [x t] (loop [xs x acc []] (if (seq xs) (recur (drop t xs) (concat acc (take (dec t) xs))) acc)))","problem":41,"user":"529dfc6de4b04e0c58e87b8a"},{"code":"(fn dropnth [coll count]\n  (loop [c coll n count acc []]\n    (if (empty? c)\n      acc\n      (recur (drop n c) n (concat acc (take (dec n) c))))))","problem":41,"user":"509e8da7e4b08df8156e9e2f"},{"code":"(fn [coll n]\n  \n  (loop [i 1\n         cur coll\n         result []]\n    (if (empty? cur)\n      result\n      (recur\n       (inc i)\n       (rest cur)\n       (if (= 0 (rem i n))\n         result\n         (conj result (first cur))\n         )\n       )\n      )    \n    )  \n  )","problem":41,"user":"51e24a04e4b01e5198146430"},{"code":"#(mapcat seq (partition-all (dec %2) %2 %))","problem":41,"user":"4e83bb61535db62dc21a62dd"},{"problem":41,"code":"#(remove nil? (map-indexed (fn [idx x]  (if-not (= (mod (+ idx 1) %2) 0) x)) %1))","user":"5f27cc7fe4b033932238a646"},{"problem":41,"code":"(fn [coll n] \n  (keep-indexed (fn [index x] \n                  (if (not (zero? (mod (inc index) n)))\n                    x)) coll))","user":"60ade833e4b00e9e6653c494"},{"problem":41,"code":"(fn [v n]\n  (apply concat (partition-all (dec n) n v)))","user":"57d4f225e4b0bd073c2023a6"},{"code":"#(loop [r [] s %1]\n     (if (seq s)\n       (recur (into r (take (- %2 1) s)) (drop %2 s))\n       r))","problem":41,"user":"5161c6a7e4b009fba0926e38"},{"code":"(fn f [ys k]\n  ((fn g [xs n]\n     (cond (empty? xs) xs\n           (= n 1) (g (rest xs) k)\n           :else (cons (first xs) (g (rest xs) (dec n))))) ys k))","problem":41,"user":"50555c06e4b0ce54f56f03fa"},{"problem":41,"code":"(fn [s n]  (first (reduce (fn [[res c] x] (if (< c n) [(conj res x) (inc c)] [res 1])) [[] 1] s)))","user":"53fc63dce4b0de5c4184859f"},{"problem":41,"code":"(fn [s n]\n  (remove nil? (map-indexed (fn [ind itm] (if (not= 0 (mod (inc ind) n)) itm)) s)))","user":"5ec943fde4b08d0ec38692f1"},{"code":"(fn drop-nth[coll n]\n  (vec\n    (when-let [s (seq coll)]\n     (flatten (cons (take (- n 1) s) (drop-nth (drop n s) n))))))","problem":41,"user":"4db6ce85535d1e037afb217f"},{"problem":41,"code":"(fn [s n] (map first (remove #(zero? (mod (second %) n)) (map #(vector %1 %2) s (map inc (range))))))","user":"5511fd7ee4b06e50f9beb19e"},{"problem":41,"code":"(fn [coll len]\n    (mapcat #(take (- len 1) %) (partition-all len coll)))","user":"58809253e4b0f1effa3b7618"},{"code":"(fn [x n] (loop [x1 x, i 1, acc []]\r\n  \t   (if (empty? x1)\r\n\t\t       acc\r\n\t\t       (if (= 0 (rem i n))\r\n\t\t\t   (recur (rest x1) (inc i) acc)\r\n\t\t\t   (recur (rest x1) (inc i) (conj acc (first x1)))))))","problem":41,"user":"4f34eb87e4b0e243712b1eba"},{"problem":41,"code":"(fn [s n]\n  ( map second\n    (filter\n      (fn [[i x]] (not (zero? (mod (inc i) n))))\n      (map vector (range) s)\n    )\n  )\n)","user":"562add6de4b00e49c7cb4834"},{"problem":41,"code":"(fn [xs n]\n  (loop [[head & rest] xs\n         acc []\n         idx 1]\n    (cond\n     (nil? head) acc\n     (zero? (mod idx n)) (recur rest acc (inc idx))\n     :else (recur rest (conj acc head) (inc idx)))))","user":"5f37263de4b0574c87022c4e"},{"problem":41,"code":"#(mapcat (fn [x] (if (= %2 (count x)) (drop-last x) x)) (partition-all %2 %1))","user":"5e6ca949e4b04a83ad7cd289"},{"problem":41,"code":"(fn [coll n] (map #(nth coll (dec %)) (remove #(= 0 (rem % n)) (range 1 (inc (count coll))))))","user":"55654e17e4b0c656e3ff1818"},{"problem":41,"code":"(fn \n  [coll n]\n  (loop [i 1\n         result (empty coll)]\n    (if (<= i (count coll))\n      (if (= (rem i n) 0)\n        (recur (inc i) result)\n        (recur (inc i) (conj result (nth coll (dec i)))))\n      result)))","user":"59ea07c9e4b0249b72820756"},{"problem":41,"code":"(fn [coll n]\n\t(flatten\n    \t(concat\n        \t(map #(drop-last %) (partition n coll))\n         \t(take-last (rem (count coll) n) coll))))","user":"57eb2576e4b0bfb2137f5b5c"},{"problem":41,"code":"(fn f [v n]\n  (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) v )\n)","user":"5bc2df19e4b07a9b28b10038"},{"problem":41,"code":"(fn [col n] (->> col\n                 (partition-all n)\n                 (map #(take (dec n) %))\n                 (apply concat)))","user":"5da5a1eee4b000c986472c04"},{"problem":41,"code":"(fn func [x y] ((fn [a b c] (cond (empty? a) c (= b 0) (recur (rest a) (dec y) c) :else (recur (rest a) (dec b) (conj c (first a))))) x (dec y) []))","user":"56cef5e8e4b0ea9b8538f762"},{"code":"(fn [coll n] (keep-indexed (fn [idx item] (if (= 0 (rem (+ idx 1) n)) nil item)) coll))","problem":41,"user":"514721c6e4b0d520409ed392"},{"problem":41,"code":"(fn [values n]\n  (loop [to-process values\n         iter n\n          result []]\n    (if (empty? to-process)\n      result\n      (recur\n       (rest to-process)\n       (if (= iter 1)\n         n\n         (dec iter))\n       (if (= iter 1)\n         result\n         (conj result (first to-process)))))))","user":"55d06bcbe4b0e31453f64a3a"},{"code":"(fn [coll n]\n  (keep-indexed\n    (fn [ind item]\n      (cond (not= 0 (mod (+ ind 1) n)) item\n             :else nil))\n    coll))","problem":41,"user":"4ec34578535dcc7ae8597d51"},{"code":"#(keep-indexed\r\n  (fn [x y] (if (not= 0 (mod (inc x) %2)) y))\r\n  %1\r\n)","problem":41,"user":"500ee13be4b00fff93030fa1"},{"code":"(fn [x ind] (mapcat #(take (dec ind) %) (partition-all ind x)))","problem":41,"user":"4f07056c535dcb61093f6c1d"},{"problem":41,"code":"(fn [x idx] (keep-indexed #(if (not (= (mod (+ 1 %1) idx) 0)) %2) x))","user":"562e871ee4b0ab312c17ebba"},{"problem":41,"code":"(fn [ v n]\n  (take  (- (count v)  (Math/floor  (/ (count v) n)))\n            (mapcat #(take (dec n) %) (iterate #(drop n %) v))))","user":"563f2eaae4b08d4f616f5ed1"},{"problem":41,"code":"#(apply concat (partition-all\n                 (dec %2) %2 %))","user":"593fcb0ce4b069cdc2982bea"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(take (dec n) %)\n          (partition-all n coll)))","user":"55caabd1e4b0e31453f649fb"},{"problem":41,"code":"#(let [x (vec (partition %2 %2 \"~\" %1))\n       c (- (count x) (count %1))]\n   (drop-last c (mapcat identity\n                        (reduce (fn [a b] (conj a (drop-last b))) [] x))))","user":"57ec3d29e4b0bfb2137f5b77"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (keep-indexed #(if (not= (dec n) (rem %1 n)) %2) coll))","user":"5d247902e4b02ea6f0fb6a24"},{"problem":41,"code":"(fn dropper [sq n]\n  (let [indices (range 1 (inc (count sq)))\n        zipped (map vector sq indices)]\n    (map first (filter #(not= (rem (second %) n) 0) zipped))))","user":"5edd6eb7e4b0c7845d86b0f7"},{"problem":41,"code":"(fn drop-nths [s1 n]\n\t(loop [[x1 & xrest :as X] s1, out [], i 1]\n\t\t(if (seq X)\n\t\t\t(recur \txrest \n\t\t\t\t\t(if (= (mod i n) 0) out (concat out [x1]))\n\t\t\t\t\t(inc i))\n\t\t\tout)))","user":"564d02cde4b0284900eef679"},{"code":"(fn drop-every-nth [coll n]\n  (reduce\n    #(apply conj %1 (take (dec n) %2))\n    []\n    (partition-all n coll)))","problem":41,"user":"526ee63de4b03e8d9a4a733f"},{"problem":41,"code":"(fn nt [l c]\n  (if (empty? l)\n    l\n    (concat (take (dec c) l) (nt (drop c l) c))\n  ) \n)","user":"5720fc08e4b0c5bde472c0a3"},{"problem":41,"code":"(fn dropN [x n]\n\t(flatten (partition-all (dec n) n x)))","user":"54f64e99e4b0f2f3c5226ea4"},{"code":"(fn [coll n]\n  (flatten\n    (concat\n      (map drop-last\n        (partition n coll))\n      (take-last (rem (count coll) n) coll))))","problem":41,"user":"4e40529b535dc968683fc49a"},{"problem":41,"code":"(fn [col dropidx] (keep-indexed (fn [idx num] (if (not= 0 (mod (inc idx) dropidx)) num)) col))","user":"516f5b7ee4b0ef3e37990e7e"},{"code":"#(mapcat pop (map vec (partition %2 %2 [nil] %)))","problem":41,"user":"50b79c5fe4b0cf3e51c3046c"},{"problem":41,"code":"(fn dropn\n  ([seq n]\n  (dropn seq n 1))\n  ([seq n count]\n  (cond\n    (= seq []) []\n    (= count n)     (dropn (rest seq) n 1)\n    :else (cons (first seq) (dropn (rest seq) n (inc count))))\n    ))","user":"5e16006be4b0a047bd49f711"},{"problem":41,"code":"(fn [lst i] (keep-indexed #(if-not (= (mod (+ %1 1) i) 0) %2) lst))","user":"56367c51e4b0bfe05bf117cd"},{"code":"(fn [coll n]\n  (loop [coll coll\n         x n\n         acc []]\n   (if (seq coll)\n       (if (= x 1)\n           (recur (rest coll) n acc)\n           (recur (rest coll) (dec x) (conj acc (first coll))))\n       acc)))","problem":41,"user":"505bd09fe4b032b709c81373"},{"code":"(fn [values pos] (keep-indexed #(if (pos? (rem (+ %1 1) pos)) %2) values))","problem":41,"user":"4ea85846535d7eef308072f9"},{"problem":41,"code":"#(flatten (map (fn [coll] (take (dec %2) coll)) (partition-all %2 %1)))","user":"5075e374e4b09049dea827a5"},{"code":"(fn [s i]\n  (keep-indexed #(if (> (dec i) (mod %1 i)) %2) s))","problem":41,"user":"4f3ca5a6e4b0e243712b1f53"},{"code":"(fn [coll nth]\n  (->> coll\n       (partition-all nth)\n       (map #(if (= (count %) nth)\n                (butlast %)\n                %))\n       (flatten)\n       )  \n  )","problem":41,"user":"518279abe4b0353c468deb65"},{"problem":41,"code":"#(flatten ( map (partial take (dec %2)) (partition-all %2 %1)))","user":"57887de2e4b0ebec4cfb751c"},{"code":"(fn drop-nth [xs n]\n  (when-not (empty? xs)\n    (lazy-cat (take (- n 1) xs) (drop-nth (drop n xs) n))))","problem":41,"user":"4e691c79535d8ccf87e9fe97"},{"problem":41,"code":"(fn [seq step] (keep-indexed #(if-not (= (mod (inc %1) step) 0) %2) seq))","user":"60849bd6e4b0736b099e42f2"},{"problem":41,"code":"(fn [c n] \n  (cond (= n 3) [1 2 4 5 7 8]\n        (= n 2) [:a :c :e]\n        :eles [1 2 3 5 6]))","user":"527bd988e4b03e8d9a4a759d"},{"problem":41,"code":"(fn [xs n] (loop [lst []\n                  xs xs\n                  i 1]\n             (if (empty? xs)\n               \tlst\n               \t(if (= i n)\n                  \t(recur lst (rest xs) 1)\n                  \t(recur (conj lst (first xs)) (rest xs) (inc i)))\n               \t)))","user":"6011b89ee4b074f607df66bc"},{"code":"(fn dropnth [l n]\n  (loop [input l output []]\n    (if (empty? input)\n      output\n      (recur (drop n input)\n             (concat output (take (dec n) input))))))","problem":41,"user":"51baff1be4b0fe3ecfb46443"},{"code":"#(map first \r\n  (filter (fn [[_ i]] (> i 0))\r\n    (map vector\r\n         %1\r\n         (rest (apply concat \r\n                      (repeat (range 0 %2)))))))","problem":41,"user":"4ddbfb8a535d02782fcbea00"},{"problem":41,"code":"(fn [coll n] (into [] (mapcat #(take (dec n) %) (partition-all n coll))))","user":"5eedfc62e4b07c55ae4a050e"},{"problem":41,"code":"(fn [coll n]\n   (->> (partition-all n coll)\n        (map #(take (- n 1) %))\n        flatten))","user":"5840c068e4b089d5ab817df8"},{"problem":41,"code":"(fn [coll n]\n  (for [i (range (count coll))\n        :let [m (mod (+ i 1) n)]\n        :when (not (zero? m))]\n     (nth coll i)))","user":"596aaeefe4b069c0a1a19808"},{"code":"(fn [a b]\n  (loop [a (seq a)\n         b b\n         c 1\n         result []]\n    (if-let [cur (first a)]\n      (recur (next a) b (inc c) (if (not= 0 (mod c b)) (conj result cur) result))\n      result)))","problem":41,"user":"531e5c81e4b08068f379edba"},{"problem":41,"code":"(fn [x y](mapcat #(take (dec y) %) (partition-all y x)))","user":"575dda55e4b02ea11479938c"},{"code":"(fn [xs n]\n  (keep-indexed #(if (< 0 (rem (inc %) n)) %2) xs)\n)","problem":41,"user":"510cda21e4b078ea71921126"},{"code":"(fn f[q n](if(empty? q)q(concat(take(- n 1)q)(f(drop n q)n))))","problem":41,"user":"4eb07be3535d7eef3080733b"},{"code":"(fn  [l n]\n  (mapcat #(if (= n %2)\n             '()\n             (list %)\n            )\n          l\n          (cycle (range 1 (inc n)))\n          )\n  )","problem":41,"user":"4fbbcf0ce4b081705acca2ee"},{"problem":41,"code":"(fn [x y]\n  (let [c (count x)\n        r (- y (rem c y))\n        v (apply conj x (repeat r nil))\n        r (mapcat butlast (partition y v))]\n    (filter (complement nil?) r)))","user":"54344721e4b0b6b47310fcea"},{"code":"(fn [input n]\n    (flatten (map #(butlast %) (partition n n [0] input)))\n)","problem":41,"user":"51d1111ce4b067c36548635f"},{"problem":41,"code":"(fn [coll n]\n  (loop [remain coll built [] pos 1 skip n]\n    (if (empty? remain)\n      (reverse built)\n      (recur\n        (rest remain)\n        (if (= (mod pos skip) 0)\n          built\n          (cons (first remain) built)\n        )\n        (inc pos)\n        skip\n      )\n    )\n  ) \n)","user":"53f17931e4b0742d9025b0dd"},{"problem":41,"code":"#(loop [index 1\n       input %1\n       result []]\n  (if (first input)\n    (recur (inc index) (rest input) (if (= 0 (rem index %2)) result (conj result (first input))  ))\n    result\n    )\n  )","user":"546b24a0e4b00cfc9eacc166"},{"code":"(fn [xs d] (map first (remove #(zero? (mod (second %) d)) (map (fn [x i] [x i]) xs (range 1 (inc (count xs)))))))","problem":41,"user":"51aab611e4b04e3dc0c27b2d"},{"code":"(fn fart [s n]\n  (if (< n (count s))\n   (concat (take (- n 1) s) (fart (drop n s) n))\n    (take (- n 1) s)))","problem":41,"user":"508dbd56e4b0f17d83ea26c2"},{"problem":41,"code":"(fn [lst n]\n  (apply vector (mapcat\n \t(fn [x]\n   \t\t(list (nth lst (- x 1))))\n     \t\t(filter #(not= (mod % n) 0) \n\t             (range 1 (+ 1 (count lst)))))))","user":"53a5c7ffe4b0ef122a8689c4"},{"code":"(fn [x n] \n(keep-indexed #(if (not= (mod (+ 1 %1) n) 0) %2) x))","problem":41,"user":"4e634eb9535d8ccf87e9fe63"},{"problem":41,"code":"(fn drop-every-nth\n  [c n]\n  (when-not (empty? c)\n    (concat (take (- n 1) c) (drop-every-nth (nthrest c n) n))))","user":"5af3aa42e4b0cc2b61a3bc8c"},{"code":"#(filter identity (flatten (map butlast (partition %2 %2 (repeat nil) %1))))","problem":41,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":41,"code":"(fn\r\n[col n]\r\n(keep-indexed \r\n    (fn [index item] \r\n      (if\r\n        (not= 0 (mod (inc index) n))\r\n          item \r\n          nil))\r\n    col))","user":"56f514cee4b046a417f92068"},{"problem":41,"code":"(fn drop-nth-item\n  [coll n]\n  (loop [f [] r coll]\n    (if (< (count r) n )\n      (concat (reduce #(concat %1 (butlast %2)) '() f) r)\n      (recur (conj f (first (split-at n r))) (second (split-at n r))))))","user":"547bf82de4b0c51c1f4d72e1"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not= 0 (rem (+ %1 1) n)) %2) coll))","user":"569fc70ee4b0542e1f8d1499"},{"code":"(fn [s n]\n  (flatten (map #(if (>= (count %) n)\n                  (drop-last %)\n                  %)\n                (partition n n nil s))))","problem":41,"user":"50b67515e4b08fb537db98f3"},{"code":"#(mapcat (partial take (dec %2)) \n         (partition-all %2 %))","problem":41,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":41,"code":"(fn f [s i]\n  (->>\n    s\n    (map-indexed #(list %1 %2))\n    (filter #(not= (mod (first %) i) (dec i)))\n    (map second)\n    ))","user":"54d412e2e4b0a52adc2e1ffe"},{"problem":41,"code":"(fn [coll n] \n  (keep-indexed #(if (zero? (mod (inc %1) n)) nil %2) coll))","user":"5bece6a5e4b0a6d31fed2114"},{"code":"(fn [x n]\r\n  (loop [xs (partition-all n x) new-seq []]\r\n    (if (empty? xs)\r\n      new-seq\r\n      (recur (rest xs) (into new-seq\r\n                             (if (= (count (first xs)) n)\r\n                               (drop-last (first xs))\r\n                               (first xs)))))))","problem":41,"user":"4fd9f5dbe4b05e33b9224f41"},{"problem":41,"code":"(fn [a-seq n]\n  (loop [s a-seq\n         acc ()]\n    (if (empty? s) (flatten acc)\n      (recur (drop n s) (conj (take (dec n) s) acc)))))","user":"5be33a16e4b0ed4b8aab4cd6"},{"code":"(fn [x n]\n  (for [x (map-indexed (fn [x i] [x i]) x)\n        :when (not (= 0 (rem (inc (x 0)) n )))]\n    (x 1)))","problem":41,"user":"4f410b63e4b0e243712b1fc5"},{"problem":41,"code":"(fn [xs n]\n  \t(loop [f [] \n           xs xs \n           m (- n 1)]\n    \t(if (empty? xs)\n          \tf\n          \t(if (= m 0)\n              \t(recur f (rest xs) (- n 1))\n              \t(recur (conj f (first xs)) (rest xs) (- m 1))\n            )\n        )\n  \t)\n)","user":"5821dbb9e4b04b46fc4b0f86"},{"code":"(fn [s n]\n  (loop [i 1, s s, r []]\n    (cond\n     (empty? s) r\n     (zero? (mod i n)) (recur (inc i) (rest s) r)\n     :else (recur (inc i) (rest s) (conj r (first s))))))","problem":41,"user":"53597288e4b04ce2eb3ed29c"},{"problem":41,"code":"(fn f [args n]\n   (if\n     (< (count args) n) args\n     (concat (take (dec n) args) (f (drop n args) n))\n     ))","user":"60486e8ae4b02d28681c77db"},{"problem":41,"code":"(fn [vec n]\n  (mapcat #(take (dec n) %) (partition-all n vec)) )","user":"57d9cae9e4b0bd073c202409"},{"problem":41,"code":"(fn dropEveryNth [coll n] (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n coll)))","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn [coll n] \n  (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) coll))","problem":41,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":41,"code":"(fn [col n]\n  (mapcat #(take (- n 1) %) (partition-all n col)))","user":"5a059b33e4b01bb0ae8afdb5"},{"problem":41,"code":"(fn p41 [x itval]\n  (map first (filter\n    #(not= itval (last %))\n    (map vector x (take (count x) (cycle (range 1 (inc itval))))))))","user":"543b12cce4b032a45b86932a"},{"problem":41,"code":"(fn [coll pos]\n\n   (flatten (map #(take (dec pos) %)(partition-all pos coll))))","user":"5e453725e4b01d43a70e8e93"},{"problem":41,"code":"(fn [s n]\n(into [] (map #(get %1 0) (filter (fn [x] (not= (rem (+ (get x 1) 1) n) 0))  (map #(vector %1 %2 ) s (range)))) ))","user":"5559b443e4b0deb715856e3c"},{"problem":41,"code":"#(->> %1 (partition (dec %2) %2 [nil]) (apply concat) (filter (complement nil?)))","user":"561ca2eae4b064ca9f4b169b"},{"problem":41,"code":"(fn [s n]\n  (let [pairs (partition 2 (interleave s (range (count s))))\n        select-pairs (remove (fn [[el place]] (= 0 (rem (inc place) n))) pairs)\n        singles (map (fn[[el _]] el) select-pairs)\n        result (flatten singles)]\n    result))","user":"53c1ce3ee4b00fb29b221268"},{"problem":41,"code":"(fn drop-nth [sq n]\n    (if (< (count sq) n)\n          sq\n          (flatten (cons (take (dec n) sq) (drop-nth (drop n sq) n )))\n          )\n    )","user":"580f9585e4b0f478707a05b5"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(if-not (= 0 (mod (inc %1) n)) %2) xs))","user":"56c4f43ce4b05cc29241ee9c"},{"problem":41,"code":"(fn [xs n]\n  (let [ops (flatten (repeatedly #(conj (vec (repeat (dec n) true)) false)))]\n    (mapcat #(if %1 [%2] []) ops xs)))","user":"560794bde4b08b23635d3182"},{"problem":41,"code":"(fn [coll step]\n  (flatten (partition-all (dec step) step coll)))","user":"5ce5b43be4b0a17bb84e2b7a"},{"problem":41,"code":"(fn [s n] (map #(val (first %))\n                (filter (fn [a] (not= (rem (key (first a)) n) 0))\n                        (map #(hash-map %1 %2)\n                             (range 1 (inc (count s)))\n                             s))))","user":"5992dc6ae4b0866487ed0d7d"},{"problem":41,"code":"(fn check [x n & [y]]\n   (if (= (last x) nil)\n     (do y)\n     (if (= (mod (count x) n) 0)\n       (do (check (butlast x) n y))\n       (do (check (butlast x) n (conj y (last x)))) \n     )\n   )\n )","user":"580014d7e4b0a837a8b30c32"},{"code":"(fn my-drop [l n]\n  (cond\n   (empty? l) nil\n   :else (concat (take (- n 1) l) (my-drop (drop n l)n))))","problem":41,"user":"5170643ee4b004f79986ad89"},{"problem":41,"code":"(fn [sq n]\n  (keep-indexed (fn [i e] (if (pos? (rem (inc i) n)) e)) sq))","user":"5fee18f2e4b05ac5b16ea1d2"},{"code":"(fn [xs n] (mapcat (partial take (dec n)) (partition-all n xs)))","problem":41,"user":"518ec633e4b0cd6ff516769e"},{"problem":41,"code":"(fn dropnth\n  ([coll n]\n   (dropnth coll n n))\n  ([coll n m]\n   (if (nil? coll)\n     nil\n     (let [[c & cs] coll]\n       (if (= 1 m)\n         (dropnth cs n n)\n         (into [c] (dropnth cs n (dec m))))))))","user":"56557d2de4b0f9d632dd8498"},{"code":"(fn [l n] \n  (keep-indexed #(if (> (dec n) (mod %1 n)) %2) l))","problem":41,"user":"4f70bcf9e4b07046d9f4effe"},{"code":"#(for [x (partition 2 (interleave %1 (drop 1(range))))\n            :when (not= (mod (second x) %2) 0)]\n        (first x))","problem":41,"user":"4e5676b2535d8a8b8723a282"},{"problem":41,"code":"(fn foo\n     ([coll til] (foo coll til 1))\n     ([coll til now] (if (empty? coll)\n                       ()\n                       (let [head (first coll) tail (rest coll)] (if (= til now) (foo tail til 1) (conj (foo tail til (+ 1 now)) head))))))","user":"5509bec5e4b06e50f9beb121"},{"problem":41,"code":"(fn [coll n]\n  (->> (map-indexed vector coll)\n       (remove (fn [[idx val]] (zero? (mod (inc idx) n))))\n       (map second)))","user":"57c176abe4b05aa3c4741ca2"},{"code":"(fn drop-nth [lst n]\n  (if (empty? lst)\n    '()\n    (concat  (take (- n 1) lst)\n             (drop-nth (drop n lst) n))))","problem":41,"user":"527ccaf4e4b0757a1b17136d"},{"code":"(fn [ mylist n ] \n  \t(filter #(not (nil? %))       \n\t\t\t(map-indexed (fn [i el]  \n\t\t\t\t\t(if (not (= 0 (mod (+ i 1) n)))\n\t\t\t\t\t\tel\n\t\t\t\t\t)\t\t\t\t     ) mylist\n\t\t\t)\n\t\t)\n\t)","problem":41,"user":"4f3bfce2e4b0e243712b1f38"},{"code":"(fn [x y] (vec (mapcat (partial take (dec y)) (partition-all y x))))","problem":41,"user":"52140b53e4b0961f15ac4d7e"},{"problem":41,"code":"#(->> %1 \n        (partition-all (- %2 1) %2)\n        (apply concat)\n    )","user":"55aa5f73e4b0988bba2ad94b"},{"problem":41,"code":"(fn drop-nth [s n]\n  (keep-indexed #(if (= 0 (mod (inc %1) n)) nil %2) s))","user":"53edb464e4b0d648e757f4c7"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n    (apply vector\n           (flatten (map #(take (- n 1) %)\n                         (partition-all n coll)))))","user":"560434cfe4b0c80df0ca2658"},{"problem":41,"code":"(fn [x n] (remove nil? (map #(if %2 %1 nil) x\n                  (map #(not= (mod % n) 0) (rest (range))))))","user":"5df175bce4b03c219ef1a34d"},{"problem":41,"code":"(fn my-drop-nth [coll n]\n   (if (empty? coll)\n     []\n     (concat (take (dec n) coll) (my-drop-nth (drop n coll) n))))","user":"54393c3fe4b032a45b86931a"},{"code":"(fn [l n]\n (filter #(not(nil? %))\n  (map-indexed\n   (fn [i x]\n     (if (= (mod (+ i 1) n) 0)\n       nil x))\n   l)))","problem":41,"user":"52f818a6e4b047fd55836fcc"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed #(if (not= 0 (mod (+ 1 %1) n)) %2) s))","user":"5587cd86e4b059ccff29b1e6"},{"code":"(fn [coll n]\n  (filter identity (map-indexed (fn [i x]\n                                  (if (zero? (mod (inc i) n))\n                                    false\n                                    x))\n                                coll)))","problem":41,"user":"5028cd0fe4b01614d1633ffc"},{"code":"(fn [xs n]\n    (map first\n        (filter\n            #(not= 0 (mod (second %) n))\n            (map vector xs (iterate inc 1)))))","problem":41,"user":"517bf28de4b07ef0e56148d5"},{"problem":41,"code":"(fn [c n] (apply concat (partition-all (dec n) n c)))","user":"55ed37ebe4b0121d4835fdd6"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(take (dec n) %1) (partition-all n coll)))","user":"549674cde4b0b312c081ff66"},{"problem":41,"code":"(fn[x y] (into [] (clojure.set/difference (set x) (set (rest(take-nth y (cons 0 x)))))))","user":"566a3a26e4b0a866af689699"},{"code":"#(mapcat (fn [c] (take (dec %2) c)) (partition-all %2 %1))","problem":41,"user":"4eb955da535dfed6da9c6d50"},{"problem":41,"code":"(fn [v n]\n  (mapcat #(take (dec n) %) (partition-all n v)))","user":"56df62b3e4b0ca2494a095ef"},{"problem":41,"code":"(fn [seq n] (vec (mapcat #(take (- n 1) %) (partition-all n seq))))","user":"5a86ad84e4b05369db4d249c"},{"code":"(fn test41\n  [coll n]\n  (if (seq coll)\n    (let [f (take (dec n) coll)\n          r (nthrest coll n)]\n      (vec (concat f (test41 r n))))))","problem":41,"user":"50b0cffae4b009df37c708c5"},{"problem":41,"code":"(fn -dropeverynth\n  [xs x]  (flatten (map (fn maybe-drop-last [lst]\n                   (if (> x (count lst))\n                     lst\n                     (drop-last lst))) (partition-all x xs)))\n)","user":"546113ffe4b01be26fd74699"},{"problem":41,"code":"(fn [items n]\n  ((fn iter3 [remain np]\n     (cond \n      (empty? remain) '()\n      (= np 1) (iter3 (rest remain) n)\n      :else (cons (first remain) (iter3 (rest remain) (- np 1))))) items n))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":41,"code":"(fn [xs v] (reduce concat (partition-all (dec v) v xs)))","user":"55d93d24e4b0e31453f64ac6"},{"problem":41,"code":"#(loop [r [] l %1]\n   (if (empty? l)\n   \t\tr\n     \t(recur (into r (take (- %2 1) l)) (drop %2 l))))","user":"57b9fc74e4b0fbc9809a27fb"},{"code":"#(remove nil? (map-indexed (fn [i x] (if (= (dec %2) (mod i %2)) nil x)) %1))","problem":41,"user":"4e5867d1535d8a8b8723a291"},{"problem":41,"code":"(fn [coll n]\n  (loop [acc []\n         s coll]\n    (if (seq s)\n      (recur (concat acc (take (dec n) s)) (drop n s))\n      acc)))","user":"580a0783e4b0a837a8b30d2c"},{"problem":41,"code":"(fn [coll n]\n  (loop [acc [] r coll]\n    (if (seq r) \n      (let [nice (take (dec n) r)] \n        (recur \n       \t\t(concat acc nice)\n         \t(nthnext r n)\n         ))\n      acc\n      ))\n  )","user":"5c408a61e4b08cd430848eb2"},{"problem":41,"code":"(fn [xs n]\n    (loop [acc [] ys xs x 1]\n       (if (empty? ys)\n            acc\n            (\n              recur  (if (zero? (rem x n)) acc (conj acc (first ys)))\n                     (rest ys)\n                     (inc x)\n            )\n)))","user":"55d7312ee4b0e31453f64a9f"},{"problem":41,"code":"(fn [col d] (keep-indexed #(if (not= (rem (inc %1) d) 0) %2) col))","user":"574a546ee4b02ea1147991f6"},{"code":"(fn [xs, n]\n  (loop [in xs\n         out []]\n    (if (empty? in)\n      out\n      (recur (drop n in) (concat out (take (- n 1) in))))))","problem":41,"user":"51365524e4b04ac1f358dd52"},{"problem":41,"code":"#(reduce concat (partition (- %2 1) %2 [] %))","user":"53ba41c2e4b047364c0444f3"},{"problem":41,"code":"(fn [xs n]\n  ( map first \n     (filter (fn [[_ y]] (not (zero? y)))\n        (map (fn [x y] [x (mod y n)]) xs (map inc (range))))))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":41,"code":"(fn [coll n]\n        (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n coll)))","user":"532686e6e4b09d4e7a9b54ef"},{"problem":41,"code":"(fn drop-nth [c n] \n  (map #(second %) \n       (filter #(pos? (mod (first %1) n))\n               (map list (range 1 100) c))))","user":"5b774e66e4b047b03b2036ec"},{"problem":41,"code":"(fn [sequ every]\n  \t(->> (partition-all every sequ)\n         (mapcat (partial take (dec every)))\n         )\n    )","user":"5703a557e4b08d47c97781f4"},{"code":"(fn drop-nth\n    [coll n]\n    (letfn [(drop-nth-help [num cnt acc [nxt & rst]]\n              (if (zero? (count rst))\n                (if (zero? (mod cnt num))\n                  acc (conj acc nxt))\n                (if (zero? (mod cnt num)) \n                (drop-nth-help num (inc cnt) acc rst)\n                (drop-nth-help num (inc cnt) (conj acc nxt) rst)\n                 )\n                 )\n                 )]\n                 (drop-nth-help n 1 [] coll)))","problem":41,"user":"51aa7298e4b04e3dc0c27b28"},{"code":"#(loop [s %1 ret []]\n  (if (empty? s)\n    ret\n    (recur (nthnext s %2) (concat ret (take (- %2 1) s)))))","problem":41,"user":"51000111e4b00d7ad4cab15e"},{"problem":41,"code":"(fn deni\n  [x n]\n  (if (empty? x) '()\n    (concat (take (dec n) x) (deni (drop n x) n))))","user":"55a24698e4b0acc240e31523"},{"code":"#(keep-indexed (fn [idx item] (if (not= (mod (inc idx) %2) 0) item)) %)","problem":41,"user":"4f01ff83535dcb61093f6a3a"},{"problem":41,"code":"(fn f [x, y]\n  (loop [s x, cont 1, res []]\n    (if (seq s)\n      (recur (rest s) (if (= cont y)\n                        1\n                        (inc cont))\n             (if (= cont y)\n               res\n               (conj res (first s))))\n      res)))","user":"593d6793e4b069cdc2982ba6"},{"code":"(fn [xs n]\n   (for [[x i]\n         (map vector xs (iterate inc 1))\n         :when (not= 0 (mod i n))]\n     x))","problem":41,"user":"50ef4e2be4b0a78662fa2653"},{"problem":41,"code":"(fn [seq n]\n     (let [sn (dec n)]\n       (loop [result '() rest seq]\n         (if (empty? rest)\n           result\n           (recur (concat result (take sn rest)) (drop n rest))))))","user":"5713c575e4b07c98581c3aab"},{"code":"(fn [s n] (map second (filter #(not= (mod (first %) n) 0) (map vector (iterate inc 1) s)) ))","problem":41,"user":"51729002e4b044b2ef48a850"},{"problem":41,"code":"(fn dropnth\n  [xs y]\n  (filter (fn\n            [x]\n            (not= (mod (inc (.indexOf xs x)) y) 0)) xs\n   ))","user":"5c35acffe4b0d62ef62d9f62"},{"problem":41,"code":"(fn [a b]\n\t(loop [x [] i 0]\n\t\t(if (>= i (count a))\n\t\t\tx\n\t\t\t(if (= 0 (mod (inc i) b))\n\t\t\t\t(recur (identity x) (inc i))\n\t\t\t\t(recur (conj x (get a i)) (inc i))))))","user":"5eea5ce7e4b029a2061bbec0"},{"problem":41,"code":"#(apply concat (partition (- %2 1)  %2  nil %1))","user":"5ee738dee4b029a2061bbea2"},{"problem":41,"code":"(fn [coll n]\n  (filter #(not (nil? %1)) (map-indexed #(if (not= (mod (+ %1 1) n) 0) %2) coll)))","user":"587294f0e4b01531a375ea1e"},{"code":"(fn [coll n]\n  (let [zipped-with-index (map list (range) coll)\n        divides?          (comp zero? mod)\n        is-nth?           (fn [x] (divides? (inc (first x)) n))]\n\t  (map second\n\t    (remove is-nth? zipped-with-index))))","problem":41,"user":"4daf36c2edd6309eace4d175"},{"code":"(fn [arg nb]\n  (flatten (map (fn [& x] (if (< (count (first x)) nb) (first x) (butlast (first x)))) (partition-all nb arg))))","problem":41,"user":"537881a4e4b06839e8705e46"},{"problem":41,"code":"(fn [argcol argnth] (keep-indexed #(if (not= 0 (mod (+ %1 1) argnth)) %2) argcol))","user":"54df955ee4b024c67c0cf7af"},{"code":"(fn nthdrop [c n]\n  (cond\n   (empty? c) '()\n   :else\n   (let [ret (take (dec n) c)]\n     (concat ret (nthdrop (nthrest c n) n)))))","problem":41,"user":"52f8f4d1e4b047fd55836fde"},{"problem":41,"code":"(fn x [a b] \n  (when-not (empty? a)\n    (concat (take (- b 1) a) (x (drop b a) b))))","user":"5761513fe4b0994c1922fb87"},{"problem":41,"code":"#(reduce-kv (fn [xs kx vx] (if-not (= 0 (mod (inc kx) %2)) (conj xs vx) xs)) []  %)","user":"580e7761e4b0849f6811b753"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(take (dec n) %)(partition-all n coll)))","user":"53bf9cfbe4b0c98a41f5cca4"},{"problem":41,"code":"(fn [x y] (filter (complement nil?) (flatten (map drop-last (partition y y [nil nil nil] x)))))","user":"5e41cb44e4b01d43a70e8e5b"},{"problem":41,"code":"(fn dropnth\n  [coll n]\n  (flatten\n    (if (>= (count coll) n)\n      (list (take (- n 1) coll) (dropnth (take-last (- (count coll) n) coll) n))\n      coll\n    )\n  )\n)","user":"54e5bdf2e4b024c67c0cf7fe"},{"problem":41,"code":"(fn [vec n]\n  (flatten (map #(take (dec n) %) (partition-all n vec)))\n  )","user":"5aa2dc5ae4b0d174b936c861"},{"code":"(fn [xs k]\n  (loop [xs xs n 1 acc []]\n    (cond (empty? xs) acc\n      (= n k) (recur (rest xs) 1 acc)\n      :else (recur (rest xs) (inc n) (conj acc (first xs))))))","problem":41,"user":"4f038499535dcb61093f6b09"},{"problem":41,"code":"(fn\n  [lst n]\n  (->> (partition-all n lst)\n       (map (fn [item] (if (= (count item) n) (butlast item) item)))\n       (reduce concat)))","user":"56df6498e4b0ca2494a095f8"},{"problem":41,"code":"(fn [lst n] \n  (keep-indexed \n   #(if (not= 0 (rem (inc %1) n)) %2)\n   lst))","user":"553698fae4b09218d5f44fc0"},{"problem":41,"code":"(fn [lst s]\n             (loop [seqs [] lst lst n 1]\n               (if (empty? lst)\n                 seqs\n                 (recur (if (= 0 (mod n s))\n                          seqs\n                          (conj seqs (first lst)))\n                        (rest lst)\n                        (inc n)))))","user":"5ad002f2e4b0ea6055cfab87"},{"problem":41,"code":"(fn [l x] (loop [ll l nl []] (if (empty? ll) nl (recur (drop x ll) (concat nl (take (- x 1) ll))))))","user":"54e84d1ee4b024c67c0cf822"},{"problem":41,"code":"(fn [xs n]\n  (last (reduce #(let [[i xs] %1]\n                  (if (pos? i)\n                   [(dec i) (conj xs %2)]\n                   [(dec n) xs]))\n         [(dec n) []]\n         xs)))","user":"5b62764ae4b0c6492753e725"},{"code":"(fn x-drop-nth [coll n]\r\n  ((fn x [coll i]\r\n    (if (empty? coll) []\r\n    (if (= i 1)\r\n      (x (rest coll) n)\r\n      (cons (first coll) (x (rest coll) (dec i)))))) coll n))","problem":41,"user":"4eccb190535d23f0362276fe"},{"code":"(fn [coll n]\n  (for [[i x] (map list (cycle (range 1 (inc n))) coll)\n        :when (not= i n)]\n    x))","problem":41,"user":"507b7dbee4b09034bfeeb71e"},{"code":"(fn [l n]\n   (loop [c 1 [f & args :as my-l] l r []]\n     (if (empty? my-l)\n        r\n        (if (= (mod c n) 0)\n          (recur (inc c) args r)\n          (recur (inc c) args (conj r f))))))","problem":41,"user":"4f7e29dde4b06e829148e1ca"},{"problem":41,"code":"#(loop [x %1 y %2 z 1] \n    (if (> y (count x)) \n\t\tx \n\t\t(recur (apply vector (flatten (cons (take (- y 1) x) (drop y x)))) (+ y (- y z)) (inc z))\n\t)\n)","user":"55253799e4b0882d96d091cf"},{"problem":41,"code":"(fn [collection targetindex]\n\n  \n  (loop [cnt 1, result '(), data collection]\n    (if(empty? data)\n      (reverse result)\n      (recur (inc cnt) (if (not= (mod cnt targetindex) 0) (conj result (first data)) result) (rest data) )\n      )\n    \n    )\n  \n  )","user":"59228b00e4b026ae38521281"},{"code":"(fn [xs n] (filter (fn [i] (not (nil? i))) (map-indexed #(if (= (mod (+ 1 %1) n) 0) nil %2) xs)))","problem":41,"user":"4fe8da4de4b0547ebccb2429"},{"problem":41,"code":"(fn oi [sequence1 index]\n\n  (vec(filter (fn [x] (not= 0 (rem  (+ 1(.indexOf sequence1 x))  index  ))) sequence1)))","user":"58a7d3e0e4b01a0c0b232949"},{"problem":41,"code":"(fn [a b] (( fn r [a b c]\n\t\t(if (= a []) \n\t\t        [] \n\t\t     (if (= c 1) (r (rest a ) b b)\n\t\t          (cons (first a ) (r (rest a) b (- c 1)))))) a b b))","user":"505006d7e4b0a02f9cffdeaf"},{"code":"(fn [sq n]\n  ((fn periodic-drop [sq remaining]\n    (cond (not (seq sq)) '()\n          (= 1 remaining) (periodic-drop (rest sq) n)\n          true (cons (first sq)\n                     (periodic-drop (rest sq)\n                                    (- remaining 1)))))\n    sq n))","problem":41,"user":"4e342671535deb9a81d77f29"},{"code":"(fn [coll n]\n\t\t(->> (map-indexed (fn [idx itm] (if (= (mod (inc idx) n) 0) nil itm)) coll)\n\t\t\t(filter (fn [e] (not (nil? e))))))","problem":41,"user":"5126dbabe4b083bb8f88cf0e"},{"problem":41,"code":"(fn [xs n] \n (first (reduce \n  (fn [[acc cnt] b]\n   (if (= n cnt)\n    [acc 1]\n    [(conj acc b) (inc cnt)]))\n  [(empty xs) 1]\n  xs)))","user":"57f9011ee4b0d3187e900935"},{"code":"(fn [xs nth] (flatten (partition (dec nth) nth () xs)))","problem":41,"user":"4e6a97a9535d8ccf87e9fef8"},{"code":"(fn [v n]\n  (loop [v v, n n, i 0, e (int (/ (count v) n))]\n    (if (= i e)\n        v\n      (let [n-c (- (* n (inc i)) i)]\n\t    (if (= (count v) n-c)\n\t\t    (subvec v 0 (dec n-c))\n          (recur (apply conj (subvec v 0 (dec n-c)) (subvec v n-c)) \n\t\t         n \n\t\t\t     (inc i) \n\t\t\t     e))))))","problem":41,"user":"52463059e4b09dbe66b56198"},{"problem":41,"code":"(fn del_nth [sq n]\n  (let [sq_n (vec (drop 1 (take-nth n (cons nil sq))))]\n    (loop [res sq i 0]\n      (if (< i (count sq_n))\n        (recur (remove #(= % (get sq_n i)) res) (inc i))\n        res\n        )\n      )\n    )\n  )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"problem":41,"code":"(fn [coll x]\n  (\n    flatten (partition (- x 1) x [] coll)\n  )\n  \n)","user":"580d1da7e4b0849f6811b72f"},{"code":"(fn [seq n]\n  (loop [acc [] cnt 1 xs seq]\n    (if (empty? xs)\n      acc\n      (if (= cnt n)\n        (recur acc 1 (rest xs))\n        (recur (conj acc (first xs)) (inc cnt) (rest xs))))))","problem":41,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn drop-every-nth [coll n]\n  (if (empty? coll)\n    []\n    (concat (take (dec n) coll) (drop-every-nth (drop n coll) n))))","problem":41,"user":"536254a5e4b0243289761e50"},{"code":"(fn f\n  [xs n]\n  (if (empty? xs)\n    ()\n    (concat \n     (take (dec n) xs)\n     (f (drop n xs) n)\n    )\n   )\n)","problem":41,"user":"51422945e4b0b50abeb46b2e"},{"problem":41,"code":"(fn [col n] (keep-indexed #(when (not (= 0 (mod (inc %1) n))) %2) col))","user":"57c58ad6e4b05aa3c4741ce7"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  (filter\n    (fn [x] (not (nil? x)))\n    (map-indexed\n      (fn [i x] (if (zero? (mod (inc i) n)) nil x)) lst)))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"(fn drop-every-nth [s n]\n    (if (> n (count s)) s\n        (let [[start, end] (split-at (dec n) s)]\n          (concat (take (dec n) s)\n                  (drop-every-nth (drop n s) n))))\n    )","problem":41,"user":"4f16213f535d64f603146449"},{"problem":41,"code":"(fn [s n] (loop [[h & t] s acc [] c n] (let [newacc (if (= c 1) acc (conj acc h))] (if (= t nil) newacc (recur t newacc (if (= c 1) n (- c 1)))))))","user":"58152157e4b0f478707a0631"},{"problem":41,"code":"(fn [s n]\n  (loop [i 0 r '()]\n    (if (>= i (count s))\n      (reverse r)\n      (if-not (= (mod (+ i 1) n) 0)\n        (recur (inc i) (conj r (nth s i)))\n        (recur (inc i) r)))))","user":"55aaa36fe4b0988bba2ad94f"},{"code":"(fn [coll x] (loop [final []\n                    i 1\n                    remain coll]\n               (cond\n                (empty? remain) final\n                (= i x) (recur final 1 (next remain))\n                true (recur (conj final (first remain)) (inc i) (next remain)))))","problem":41,"user":"507a33dee4b08327cd804a68"},{"code":"(fn drop-nth [s n] \n  (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) s))","problem":41,"user":"4fcf642ee4b03432b189f410"},{"code":"(fn [s n] (mapcat #(take (- n 1) %) (partition-all n s)))","problem":41,"user":"4ecab3b7535d6d7199dd3709"},{"problem":41,"code":"(fn [s n] \n   (remove nil? (map-indexed \n     #(when (not= (mod (+ 1 %) n) 0)\n        %2) \n     s)))","user":"5dcd7933e4b0b296f82db5ae"},{"code":"(fn  [coll n]\n  (let [takeList (filter #(> (mod % n) 0) (range 1 (inc (count coll))))\n       c (count coll)\n        ]\n    (map #(nth coll (dec %)) takeList)\n    )\n  )","problem":41,"user":"4ec4d723535dcc7ae8597d65"},{"problem":41,"code":"(fn [a-seq n]\n   (loop [res []\n          lst a-seq]\n   (if (seq lst)\n     (recur (apply conj res (take (dec n) lst))\n            (drop n lst))\n     res\n     )))","user":"544e9022e4b0e3978000698b"},{"problem":41,"code":"(fn dropnth\n  [coll n]\n  (loop [coll coll n n res []]\n    (if (empty? coll)\n      (flatten res)\n      (recur (take-last (- (count coll) n) coll ) n (conj res (take (dec n) coll))))))","user":"5f088bb3e4b0cf489e8d7f5f"},{"code":"(fn [coll n] (mapcat (fn [x] (if (= n (count x)) (drop-last x) x)) (partition-all n coll)))","problem":41,"user":"4f702dcae4b07046d9f4eff4"},{"code":"(fn xxx [coll n]\n  (let [step (fn step [xs n index]\n               (when (not= nil (first xs))\n                 (if (= 0 (mod index n))\n                   (recur (rest xs) n (+ index 1))\n                   (cons (first xs) (step (rest xs) n (+ index 1))))))]\n    (step coll n 1)))","problem":41,"user":"5163a7bbe4b055933a9ca02f"},{"problem":41,"code":"(fn\n  [b a]\n  (if (= 0 (mod (count b) a))\n    (mapcat drop-last (partition-all a b))\n    (conj (into [] (mapcat drop-last (partition-all a b))) (last b)) ))","user":"59636ec9e4b066ee0a44b0c8"},{"code":"(fn drop-nth [coll n]\n  (if (seq coll)\n\t\t(concat (take (dec n) coll) (drop-nth (drop n coll) n))))","problem":41,"user":"5097cfcbe4b00ad8bab4e977"},{"problem":41,"code":"(fn [s x]\n    (loop [i 1 s s result []]\n      (if (empty? s)\n        result\n        (recur (inc i) (rest s) (if (= 0 (mod i x)) result (conj result (first s)))))))","user":"569425b6e4b0dcc4269f410e"},{"problem":41,"code":"(fn [col n] (flatten (concat (map #(if (= n (count %)) (drop-last %) %) (partition-all n col)))))","user":"5656e039e4b0f9d632dd84a3"},{"problem":41,"code":"(fn [coll n]\n  (let [init-start 0\n        init-stop (dec n)]\n    (loop [start (+ init-start n)\n           stop (+ init-stop n)\n           acc (if (contains? coll init-stop)\n                 (subvec coll init-start init-stop)\n                 (subvec coll init-start))]\n      (if (contains? coll start)\n        (if (contains? coll stop)\n          (recur (+ start n) (+ stop n) (into acc (subvec coll start stop)))\n          (recur (+ start n) (+ stop n) (into acc (subvec coll start))))\n        acc))))","user":"55ab07e0e4b0988bba2ad953"},{"code":"(fn [coll n]\r\n  (keep-indexed \r\n    (fn [idx itm] (when (not= (mod (+ 1 idx) n) 0) itm)) coll))","problem":41,"user":"4ddeb916535d08e6dec9fdd9"},{"problem":41,"code":"(fn [col n] (mapcat #(take (- n 1) %) (partition n n [] col)))","user":"54c46381e4b045293a27f61a"},{"problem":41,"code":"#(for [x (map list %1 (range)) \n\t              :let [[a b & abs] x] \n    \t          :when (not (= (rem (inc b) %2) 0))] a)","user":"5361d423e4b0243289761e49"},{"problem":41,"code":"(fn [v1 d] (map #(nth v1 % ) (into [] (filter #(< 0 (rem (+ 1 %) d )) (range (count v1) )))))","user":"58a9e872e4b01a0c0b232973"},{"problem":41,"code":"(fn drop-every-nth\n  [coll n]\n  (map first (filter #(not= 0 (mod (second %) n)) (map vector coll (range 1 (inc (count coll)))))))","user":"572db6d5e4b0cd1946bd0f78"},{"problem":41,"code":";; map list then flatten in case one of the elements in the seq has a nil value\n(fn [s n] (flatten (keep-indexed #(if (not= 0 (mod (+ %1 1) n)) %2) (map list s))))","user":"4fffa422e4b0678c553fc404"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n       (partition-all n)\n       (mapcat #(if (< (count %) n) % (butlast %)))\n       (into (empty coll))))","user":"5629dfaae4b00e49c7cb4813"},{"problem":41,"code":"(fn [c n]\n  (mapcat #(take (dec n) %)\n          (partition-all n c)))","user":"5835cb06e4b089d5ab817cea"},{"problem":41,"code":"(fn [xs n]\n  (filter (comp not seq?)\n          (map (fn [a b] (if (= 0 (mod (inc a) n)) '() b))\n               (range (count xs)) xs)))","user":"54d5fbe9e4b0a52adc2e2014"},{"code":"(fn [s k]\r\n  (for [[x i] (map vector s (cycle (range k))) :when (not= i (dec k))] x))","problem":41,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn [l n] \n  (keep-indexed \n    (fn [i item]\n      (if (= (mod (+ i 1) n) 0)\n          nil\n          item))\n    l))","problem":41,"user":"4f8320e9e4b033992c121c18"},{"problem":41,"code":"(fn x [s n]\n  (loop [i 0 remainder s acc []]\n    (if (> (count remainder) 0)\n      (recur\n        (inc i)\n        (rest remainder)\n        (if (= (mod (inc i) n) 0)\n          acc\n          (conj acc (first remainder))))\n    acc)))","user":"5b0bea6de4b0cc2b61a3bdda"},{"problem":41,"code":"(fn [lst n] \n  (loop [result [] c 1] \n    (if (> c (count lst)) \n      result \n      (if (= (mod c n) 0) \n        (recur result (inc c))\n        (recur (conj result (nth lst (dec c))) (inc c))))))\n\n\n;using partition-all - (partition-all n step coll)\n\n; #(apply concat (partition-all (dec %2) %2 %1))","user":"55e01f4ee4b050e68259b406"},{"code":"(fn [s n] (keep-indexed (fn [idx item] (if (zero? (rem (inc idx) n)) nil item)) s))","problem":41,"user":"4f0376a5535dcb61093f6add"},{"code":"#(map second\n      (filter \n        (partial apply (fn [i el] (not (= 0 (mod (+ 1 i) %2))))) \n        (map-indexed (fn [a b] (list a b)) %1)))","problem":41,"user":"5141abf1e4b02fd87f5064c3"},{"code":"(fn [coll n]\n  (loop [x coll y []]\n    (if (< (count x) n)\n      (concat y x)\n      (recur (drop n x) (concat y (take (- n 1) x))))))","problem":41,"user":"4ec6c878535d6d7199dd36d5"},{"problem":41,"code":"#(loop [coll %1, nth %2, res '(), i 0, y #{}]\n                        (if (empty? coll)\n                          (reverse res)\n                          (recur (rest coll) nth (if ((complement contains?) y i)\n                                                   (conj res (first coll))\n                                                   res\n                                                   )\n                                 (inc i) (conj y (+ (- nth 1) (* i nth)))\n                                 )\n                          )\n                        )","user":"5cf72682e4b0b71b1d808a68"},{"problem":41,"code":"(fn [colls n]\n   (loop [v [] col colls i 1]\n     (if-let [ele (first col)]\n       (recur (if (= (mod i n) 0 ) v (conj v ele)) (rest col) (inc i))\n       v)))","user":"5be79b5be4b0f319e2d7ec5a"},{"code":"(fn [c n]\n  (reduce\n    #(if (= (mod (inc %2) n) 0) % (conj % (c %2)))\n    []\n    (range (count c))))","problem":41,"user":"4e2b1d48535deb9a81d77f03"},{"code":"(fn [s n]\r\n  (reverse (vals\r\n    (filter #(pos? (mod (inc (first %)) n))\r\n      (zipmap (range) s)))))","problem":41,"user":"4fc8f1fee4b0ee37620e183f"},{"problem":41,"code":"#(keep-indexed\n   (fn [index item] (if (or (zero? index)\n                            ((complement zero?) (rem (inc index) %2))) item)) %1)","user":"53dfd77fe4b0d874e779ae45"},{"problem":41,"code":"(fn l [m n]\n  (if (empty? m) []\n    (concat (take (dec n) m) (l (drop n m) n))))","user":"56449c90e4b0284900eef5f8"},{"problem":41,"code":"#(->> % (partition-all %2) (map (fn [c] (take (dec %2) c))) (apply concat))","user":"53307a23e4b019098a6f8b5d"},{"code":"(fn [s n]\n  (loop [acc [] s s count 1]\n    (if (empty? s)\n      acc\n      (if (zero? (mod count n))\n        (recur acc (rest s) (inc count))\n        (recur (conj acc (first s)) (rest s) (inc count))))))","problem":41,"user":"5131d817e4b06942423563ca"},{"problem":41,"code":"(fn[v k](mapcat #(take (dec k) %) (partition-all k v)))","user":"60195030e4b0bf4ca6b10920"},{"code":"(fn [coll n]\n  (loop [coll coll idx (dec n) acc []]\n    (if (empty? coll)\n      acc\n      (if (zero? idx)\n        (recur (rest coll) (dec n) acc)\n        (recur (rest coll) (dec idx) (conj acc (first coll)))))))","problem":41,"user":"506b8242e4b0eda3100c090a"},{"code":"(fn [coll n] (for [x (map vector coll (range)) :when (not= (mod (x 1) n) (dec n))] (x 0)))","problem":41,"user":"4feada56e4b0140c20fb9c11"},{"problem":41,"code":"(fn [li n]\n     (loop [ l li res [] ] \n        (if (empty? l)\n           \n           res\n           (recur (drop  n l)  (concat res (take (dec n) l  )) )\n        )\n     \n     )\n  )","user":"5735ac67e4b0cd1946bd102b"},{"code":"(fn drop-every-nth [coll n]\n         (->> coll\n           (keep-indexed (fn [i x] (if (not (zero? (mod (inc i) n))) x nil))\n                         )))","problem":41,"user":"4f07bc41535dcb61093f6c2c"},{"problem":41,"code":"(\n    fn [coll idx]\n    (\n      mapcat #(take (dec idx) %) (partition-all idx coll)\n      )\n    )","user":"547f3434e4b0c51c1f4d7319"},{"problem":41,"code":"(fn [x n] (keep-indexed #(if (not= (mod (+ %1 1) n) 0) %2) x))","user":"57b35ecbe4b0fbc9809a277e"},{"problem":41,"code":"(fn [lst n]\n  (let [lstAux (range 1 (inc (count lst)))]\n    (filter #(if true? %) (map #(if (== 0 (mod %1 n)) false %2) lstAux lst))))","user":"56e9a56ae4b04a395b9a03fc"},{"code":"#(keep-indexed (fn [i v] (if (not (= (mod (+ i 1) %2) 0)) v)) %)","problem":41,"user":"524ad140e4b09eba1c0223a9"},{"code":"(fn z [xs n] (if (empty? xs) '() (concat (take (- n 1) xs) (z (drop n xs) n))))","problem":41,"user":"4f724e56e4b07046d9f4f027"},{"problem":41,"code":"(fn [a n] (loop[tg '() s a i 1] (if (empty? s) tg\n  (recur (if (= i n) tg (concat tg (list (first s)))) (drop 1 s) (if (= i n) 1 (+ 1 i))))))","user":"575ddfd1e4b02ea11479938d"},{"code":"(fn d-n[coll n]\n  (->> coll\n      (map vector (iterate inc 1))\n      (remove #(zero? (mod (first %) n)))\n      (map second)\n   )\n )","problem":41,"user":"538de891e4b0b51d73faae78"},{"problem":41,"code":"(fn drop-n [x n] (flatten (for [z (partition n n nil x)] (take (dec n) z))))","user":"55c5e781e4b0e31453f649b8"},{"problem":41,"code":"(fn dropevery [lst n]\n  (loop [lst lst\n         result []\n         accum 1]\n    (cond \n     (empty? lst) result\n     (= accum n) (recur (next lst)result 1)\n     :default (recur (next lst) (conj result (first lst)) (inc accum)))))","user":"59dd387ae4b0a0ac046f2501"},{"code":"#(mapcat butlast (partition %2 %2 '(0) %))","problem":41,"user":"4f06f953535dcb61093f6c1c"},{"code":"(fn [coll n]\n  ((comp flatten (partial map #(if (= (count %) n) (drop-last %) %)) (partial partition n n nil)) coll))","problem":41,"user":"4fc588bee4b0ee37620e17fa"},{"code":"(fn dropn [l n]\n  ((fn dropn1 [l i n]\n     (if (empty? l)\n       ()\n       (if (= n i)\n         (dropn1 (rest l) 0 n)\n         (cons (first l) (dropn1 (rest l) (+ i 1) n ))))) l 0 (- n 1)))","problem":41,"user":"502ed81ee4b06efe12e8cc7b"},{"code":"#(loop [result []  cnt 1]\n   (if (< (count %1) cnt) result\n     (recur (if (= (mod cnt %2) 0) result (conj result (nth %1 (dec cnt))))  (inc cnt)))\n   )","problem":41,"user":"510d3dc6e4b078ea71921132"},{"problem":41,"code":"(fn [coll nth]\n  (loop [remaining coll\n         accum []]\n    (if (empty? remaining)\n      accum\n      (recur (drop nth remaining)\n        (into accum (take (dec nth) remaining))))))","user":"5293a603e4b0239c8a67af42"},{"problem":41,"code":"(fn[col, n](map val (filter (fn[[k v]](< 0 (mod (+ k 1) n))) (reverse (zipmap (range) col)))))","user":"5677f9ffe4b05957ce8c616f"},{"code":"(fn \n  [s nth]\n  (remove #(= 0 (mod (+ (.indexOf s %) 1) nth)) s))","problem":41,"user":"4eaf1342535d7eef30807330"},{"code":"(fn [list n]\n  (loop [acc []\n         i 1\n         left list]\n    (if (seq left)\n      (recur (if (zero? (mod i n))\n               acc\n               (conj acc (first left)))\n             (inc i)\n             (rest left))\n      acc)))","problem":41,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":41,"code":"(fn drop-n [s n]\n  (if (< (count s) n)\n    s\n\t(lazy-cat (take (dec n) s) (drop-n (nthrest s n) n))))","user":"570459a9e4b0b0fb43fd0662"},{"problem":41,"code":"(fn [l n] ((fn dn [l n i] \n    (if (empty? l) l \n      (if (= i 1) \n        (dn (rest l) n n) \n        (concat (list (first l)) (dn (rest l) n (dec i)))\n      )\n    ) \n ) l n n))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"(fn my-drop [seq idx]\n  (let [is-apply  #(if (not (= 0 (mod (+ %1 1)  idx ))) %2) ]\n    (keep-indexed is-apply seq)))","problem":41,"user":"50651de3e4b0b1b6c8b1d85f"},{"code":"(fn [xs n]\n  (let [p (partition-all n xs)]\n    (flatten (map #(if (= n (count %)) (drop-last %) %) p)\n)))","problem":41,"user":"4ffb38e8e4b0678c553fc3c6"},{"problem":41,"code":"(fn [coll n]\n  (loop [tail coll\n         dropped-seq []\n         i 1]\n    (if (empty? tail)\n      dropped-seq\n      (if (= i n)\n        (recur (rest tail)\n               dropped-seq\n               1)\n        (recur (rest tail)\n               (conj dropped-seq (first tail))\n               (inc i)))\n      )\n    )\n  )","user":"58562083e4b0f14aab7c86eb"},{"problem":41,"code":"(fn [s ev]\n  (loop [s s cpt 1 res []]\n    (if (seq s)\n      (if (= cpt ev)\n        (recur (rest s) 1 res)\n        (recur (rest s) (inc cpt) (conj res (first s)))\n        )\n      res\n      )\n    )\n  )","user":"5a75da49e4b0512ff01cdacf"},{"problem":41,"code":"(fn [col n]\n    (flatten (partition-all (dec n) n col)))","user":"5ccf99fbe4b0ccb0619628c8"},{"code":"(fn [s n]\n  ((fn [s r c]\n     (cond\n      (empty? s) r\n      (= c n) (recur (rest s) r 1)\n      :else (recur (rest s)\n                   (concat r [(first s)])\n                   (inc c))))\n   s [] 1))","problem":41,"user":"535d910ae4b04ce2eb3ed2c5"},{"problem":41,"code":"(fn [col step] (mapcat #( drop-last 1 %) (partition step step [nil] col)))","user":"5793931ee4b0e215f87e845c"},{"problem":41,"code":"(fn [s skip]\n(flatten (map #(take (dec skip) %)\n  (partition skip skip nil s))))","user":"59be62d5e4b0a024fb6ae435"},{"problem":41,"code":"(fn [xs interval]\n  (loop [acc [] values xs index 1]\n    (if (empty? values)\n      acc\n      (let [concats (if (= 0 (mod index interval))\n                      []\n                      [(first values)])]\n        (recur (concat acc concats) (rest values) (+ 1 index))))))","user":"5376190de4b06839e8705e1c"},{"problem":41,"code":"(fn [xs n]\n  (flatten (map #(take (dec n) %1) (partition-all n xs))))","user":"5c784248e4b0fca0c162281f"},{"problem":41,"code":"(fn [xs n]\n  (loop [as  xs\n         m   n\n         acc []]\n    (if (empty? as)\n      acc\n      (if (= m 1)\n        (recur (rest as) n acc)\n        (recur (rest as) (dec m) (conj acc (first as)))))))","user":"5565f616e4b0c656e3ff1823"},{"problem":41,"code":"(fn [coll x]\n  (reduce concat (partition-all (dec x) x coll)))","user":"5bbbcf81e4b0a20761a23613"},{"code":"(fn [x y] (loop [index 1 se x r y res []] (if(= () se) res (recur (+ index 1) (rest se) r (if (= 0 (rem index r)) res (conj res (first se)))))))","problem":41,"user":"51a7f74be4b08d8ec191b802"},{"problem":41,"code":"(fn [sequ number](for [x (map-indexed (fn [idx itm] (if (= (mod (inc idx) number) 0) nil itm)) sequ) :when (not (nil? x))] x))","user":"577412c6e4b0979f896515f6"},{"problem":41,"code":"(fn dropnth [x n]\n  (loop [ans []\n         k 1\n         data x]\n    (if (empty? data)\n      ans\n      (if (= k n)\n        (recur ans 1 (rest data))\n        (recur (conj ans (first data)) (+ k 1) (rest data))\n        )\n      )\n\n    )\n  )","user":"57cc14aae4b05aa3c4741d4a"},{"code":"(fn [s n] (keep-indexed #(when (> (mod (inc %) n) 0) %2) s))","problem":41,"user":"4f39f902e4b0e243712b1efe"},{"code":"(fn [x y]\n  (loop [[h & t] x\n         i y\n         out []]\n    (if (nil? h)\n      out\n     (if (= i 1)\n       (recur t y out)\n       (recur t (dec i) (conj out h))))))","problem":41,"user":"52d469c8e4b09f7907dd1330"},{"code":"(fn drop-n [col n]\n  (loop [col col\n         col' []]\n    (if (empty? col)\n      col'\n      (recur (nthrest col n)\n             (concat col' (take (dec n) col))))))","problem":41,"user":"516ff477e4b034fe8eaf70f3"},{"problem":41,"code":"(fn [col nsep] (filter #(pos? (mod (inc (.indexOf col %)) nsep)) col))","user":"53571732e4b04ce2eb3ed275"},{"problem":41,"code":"(fn\n  [l to-drop]\n  (map second (filter (fn [e] (not= 0 (mod (first e) to-drop))) (map vector (iterate inc 1) l)) ))","user":"51d55598e4b01da06753aa8e"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed \n   #(if (= (mod (inc %1) n) 0)\n      nil\n      %2)\n   xs))","user":"5480cce5e4b0e286459a115f"},{"problem":41,"code":"(fn drop-it [v n] \n  (if (< (count v) n)\n    v\n  (into (subvec v 0 (- n 1))\n        (drop-it (subvec v n) n))))","user":"5d6eaa58e4b04d129b00f2cd"},{"problem":41,"code":"(fn [numbers nth-to-drop] (keep-indexed #(if (not= (rem (inc %1) nth-to-drop) 0) %2) numbers))","user":"5f6e5c58e4b02876ed9fd067"},{"problem":41,"code":"#(for [i (range (count %1)) :when (not= (- %2 1) (mod i %2))] (%1 i))","user":"53b2a7f8e4b047364c04449c"},{"problem":41,"code":"(fn[sq n] (remove nil? (map-indexed (fn[idx itm] (if (= 0 (mod (+ 1 idx) n)) nil itm )) sq)))","user":"55757e81e4b05c286339e063"},{"problem":41,"code":"(fn [coll n]\n      (loop [ count- 1 rez [] coll coll ]\n      (if (empty? coll) rez\n        (if ( = count- n) ( recur  (/ count- count-) rez (rest coll))\n            (recur (inc count-) (conj rez (first coll)) (rest coll))))))","user":"5fc1c424e4b0edf42a5593d0"},{"code":"(fn [coll n]\n  (flatten \n    (map (fn [x] (if (= (count x) n) (drop-last x) x)) \n      (partition-all n coll))))","problem":41,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":"(fn [s n] \n  ((reduce #(vector \n              (if (= 0 (mod (%1 1) n)) \n                (%1 0) \n                (conj (%1 0) %2)) \n              (inc (%1 1))) \n    [[] 1] \n      s) 0))","problem":41,"user":"4f0ce26c535d0136e6c22312"},{"code":"#(loop [lst % n %2 acc[]]\n  (if (empty? lst)\n    acc\n    (recur (drop n lst) n (concat acc (take (- n 1) lst)))))","problem":41,"user":"4ecbd630535df97575fdabe1"},{"problem":41,"code":"(fn dropEveryNth [xs n]\n         (mapcat #(if (= n (count %)) \n                    (drop-last %)\n                    %) \n                 (partition n n nil xs)))","user":"58c4492be4b021aa9917ed27"},{"code":"(fn [s n]\n  (filter identity \n    (map-indexed\n      (fn [x i] \n        (if (not= (rem (inc x) n) 0) \n         i\n         )) s)))","problem":41,"user":"51eb3aace4b0f1f103a0d159"},{"code":"(fn[l n]\n  (loop [s l cnt 1 accum []]\n    (if (empty? s)\n      accum\n      (recur (next s) (inc cnt)\n             (if (zero? (mod cnt n))\n               accum\n               (conj accum (first s)))))))","problem":41,"user":"4e889643535d8b9bb0147ca5"},{"code":"#(keep-indexed (fn [n v] (if (not= 0 (rem (inc n) %2)) v)) %)","problem":41,"user":"4e8df08f535d65386fec213e"},{"problem":41,"code":"#(->> %1 (cons nil) (partition-all %2) (mapcat rest))","user":"58e37946e4b005f69f193cae"},{"problem":41,"code":"(fn [xs n]\n  (mapcat (partial take (dec n)) (partition n n nil xs)))","user":"4e68c465535d8ccf87e9fe8a"},{"code":"(fn dropnth [coll n]\n  (keep-indexed #(when (not= (rem % n) (dec n)) %2) coll))","problem":41,"user":"4fb266a5e4b081705acca28c"},{"code":"(fn [s n]\r\n  (loop [s s, r []]\r\n    (if (empty? s) r\r\n      (recur (drop n s) (concat r (take (dec n) s))))))","problem":41,"user":"4deff9f9535d08e6dec9fe15"},{"code":"(fn [x n]\r\n  (for [i  (range (count x)) \r\n  :when (not= 0 (mod (inc i) n))]\r\n    (nth x  i)))","problem":41,"user":"4de18de7535d08e6dec9fde8"},{"problem":41,"code":"(fn foo [xs n]\n  (if (not (empty? xs))\n    (concat (take (dec n) xs) (foo (drop n xs) n))))","user":"54c5cc17e4b045293a27f624"},{"problem":41,"code":"(fn\n  [coll x]\n  (loop [org_coll coll\n         new_coll '()\n         counter 1]\n    (if (empty? org_coll)\n      (sort new_coll)\n      (if (= (mod counter x) 0)\n        (recur (rest org_coll) new_coll (inc counter))\n        (recur (rest org_coll) (cons  (first org_coll) new_coll) (inc counter))))))","user":"5f6e576ae4b02876ed9fd066"},{"problem":41,"code":"(fn [items index]\n (keep-indexed #(if (not= 0 (mod (+ 1 %1) index))\n                   %2) items))","user":"5dd3383be4b0948ae9d9ad5e"},{"problem":41,"code":"(fn [seq1 mod1] (keep-indexed #(if (not= (mod (+ %1 1) mod1) 0) %2) seq1))","user":"58f1971ce4b08e1cf3471cee"},{"code":"#(for [x (map-indexed vector %) :let [y (inc (first x)) z (second x) s (rem y %2)] :when(not (zero? s)) ] z )","problem":41,"user":"50d179c7e4b05a71a896ef56"},{"problem":41,"code":"(fn [s d]\n  (loop [r s i d out []]\n    (if (empty? r)\n      out\n      (if (= i 1)\n        (recur (rest r) d out)\n        (recur (rest r) (dec i) (conj out (first r)))\n      )\n    )        \n  )  \n)","user":"54aa373de4b09f271ff37cb6"},{"problem":41,"code":"(fn drop-nth [x a]\n\n  (cond (= (first x) 1) (remove (set (map dec (take-nth a x))) x)\n\n        :else (take-nth a x)))","user":"593910eae4b02506e01a29f4"},{"problem":41,"code":"(fn [coll div]\n  (mapcat #(if (= (count %) div) (drop-last %) %) (partition div div nil coll)))","user":"4ee7d6d8535d93acb0a66870"},{"problem":41,"code":"(fn [coll idx]\n  (flatten (partition-all (dec idx) idx coll))\n  )","user":"58694f69e4b0f14aab7c889f"},{"code":"(fn [s n] (mapcat #(take (dec n) %) (partition-all n s)))","problem":41,"user":"4ec70f26535d6d7199dd36dd"},{"problem":41,"code":"(fn [lst n]\n  (into [] (mapcat (fn [x] x) (partition-all (dec n) n lst)))\n  )","user":"5a984657e4b0d174b936c78a"},{"problem":41,"code":"(fn [x y]\n  (last (reduce #(if (zero? (rem (first %1) y))\n             [(inc (first %1)) (last %1)]\n             [(inc (first %1)) (conj (last %1) %2)])\n          [1 []]\n          x)))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  (->>\n    (map-indexed list (cons '1 lst))\n    (remove #(= 0 (mod  (first %) n)))\n    (mapcat #(rest %))))","user":"57f81544e4b0d3187e900917"},{"code":"(fn [v n] \n  (for [[i v] (map-indexed vector v)\n        :when (pos? (mod (inc i) n))] v))","problem":41,"user":"5065dd94e4b0313a384e5643"},{"problem":41,"code":"(fn [xs index]\n  (keep-indexed\n   #(if (pos? (rem (inc %1) index)) %2)\n   xs))","user":"5bc15685e4b07a9b28b10016"},{"code":"#(vec (remove nil? (flatten (map butlast (partition %2 %2 (repeat nil) %1)))))","problem":41,"user":"4dade9e9c9a9d6ed4799dc57"},{"code":"(fn [s n] (map #(% 0) (remove #(= 0 (mod (inc (%1 1)) n)) (map #(vector %1 %2) s (range)))))","problem":41,"user":"50b24a2fe4b03ea88043355c"},{"problem":41,"code":"(fn [s n] (keep-indexed #(if (not= (mod %1 n) (dec n)) %2) s))","user":"594a5559e4b07ddc2dafadf8"},{"code":"(fn [coll n]\r\n  (apply concat (partition-all (dec n) n coll)))","problem":41,"user":"4dd7d040535d2dad7130b5d6"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [index item]\n                             (if (= 0 (mod (inc index) n))\n                               nil\n                               item))\n                            coll))","user":"51814aefe4b06547fbae114f"},{"problem":41,"code":"(fn drop-nth [input-list n]\n  (loop [xs input-list, k (dec n), out []]\n    (if (empty? xs) out\n      (if (= 0 k) (recur (rest xs) (dec n) out)\n        (recur (rest xs) (dec k) (conj out (first xs)))))))","user":"5885cc62e4b0f1effa3b76c1"},{"problem":41,"code":"(fn drop-nth\n  ([s n] (drop-nth s n '()))\n  ([s n result]\n   (if (= (nth s (- n 1) nil) nil)\n     (reverse (concat (reverse s) result))\n     (recur (nthnext s n) n (concat (reverse (take (- n 1) s)) result)))))","user":"5888b75fe4b0f1effa3b771b"},{"problem":41,"code":"(fn drop-nth [s n]\n  (mapcat identity (partition (dec n) n nil s)))","user":"5dcc152ae4b02b31cc3da3c3"},{"code":"(fn [coll n] (loop [x (- n 1) c coll new-c []] (if (empty? c) new-c (if (= x 0) (recur (- n 1) (rest c) new-c) (recur (- x 1) (rest c) (conj new-c (first c)))))))","problem":41,"user":"52b43468e4b0c58976d9ad1b"},{"code":"(fn [coll step] \n  (mapcat #(take (- step 1) %) (partition-all step coll)))","problem":41,"user":"52c4af71e4b0c2d177d620e1"},{"code":"(fn drop-n [listy n]\n  (cond\n   (empty? listy) listy\n   :else (concat (take (dec n) listy) (drop-n (drop n listy) n))))","problem":41,"user":"51b89503e4b050a1176cd69a"},{"code":"(fn [c i] (remove #(= 0 (mod (inc (.indexOf c %)) i)) c))","problem":41,"user":"4f6a2ff2e4b07046d9f4ef98"},{"problem":41,"code":"(fn [coll1 value] \n  (filter #(not= nil %) (map \n  \t#(if (not= 0 (rem %2 value))\n      %1) \n   \tcoll1 \n     (range 1 (inc (count coll1))))))","user":"5a0ef454e4b04bbd27e6d9fa"},{"problem":41,"code":"(fn [xs n] (keep-indexed\n            #(if (< 0 (mod (inc %1) n)) %2)\n            xs))","user":"53c1b787e4b00fb29b221266"},{"problem":41,"code":"(fn [x y]\n   (mapcat\n    rest\n    (remove\n     (fn [z]\n       (=\n        0\n        (mod \n         (+ 1(first z)) \n         y)))\n     (map-indexed vector x))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":41,"code":"(fn [v n]\n  (apply concat (partition (dec n) n [] v)))","user":"56990b68e4b0542e1f8d143a"},{"problem":41,"code":"(fn [x n] \n  (filter #(not(= (mod (inc (.indexOf x %)) n) 0)) x))","user":"5a621702e4b0512ff01cd983"},{"problem":41,"code":"(fn [xs drop-every]\n  (loop [xs\t\t\txs\n         index\t\t1\n         dropped\t[]]\n    (if (empty? xs)\n      dropped\n      (recur (rest xs) (+ index 1) (if (= 0 (mod index drop-every))\n                                     dropped\n                                     (conj dropped (first xs)))))))","user":"5468033ee4b00cfc9eacc133"},{"problem":41,"code":"(fn [coll n]\n  (map (fn [[item _]] item)\n       (filter \n        (fn [[_ index]] (not= 0 (rem index n))) \n        (map (fn [a b] [a b]) coll (drop 1 (range))))))","user":"5e805895e4b085ba37836e44"},{"problem":41,"code":"(fn [coll n]\n  (loop [c coll\n         l []]\n    (if (empty? c)\n      l\n      (recur (drop n c) (concat l (take (dec n) c))))))","user":"54497569e4b032a45b8693d2"},{"code":"(fn [v i] (keep-indexed #(when (not= (mod (+ 1 %1) i) 0) %2) v))","problem":41,"user":"51b1ef95e4b02f8f128bb95e"},{"code":"(fn [v n]\n  (loop [x 1 ans []] \n    (if (> x (count v)) \n      ans \n      (recur (inc x) (if \n                       (= 0 (mod x n)) \n                       ans \n                       (conj ans (nth v (- x 1)))\n                       )))))","problem":41,"user":"52196842e4b0890f2f822bfa"},{"problem":41,"code":"#(apply concat ( partition-all (dec %2) %2 %1 ))","user":"5b98f7f3e4b0c0b3ffbd4ac2"},{"problem":41,"code":"(fn [coll n]\n  (filter #(not= (mod (.indexOf coll %) n) (dec n)) coll))","user":"564583f0e4b0284900eef607"},{"problem":41,"code":"(fn mh-drop [lijst stap]\n  (keep-indexed\n     (fn [idx val] (if (not= (mod (inc idx) stap) 0) val))\n     lijst\n  )\n)","user":"54468ebfe4b032a45b8693b1"},{"code":"(fn [l, n] (for [ [i v] (map-indexed vector l)\n                   :when (not= 0 (mod (inc i) n))]\n              v))","problem":41,"user":"535e518ee4b04ce2eb3ed2cf"},{"code":"(fn [s n]\n  (loop [result []\n         s s\n         index 1]\n    (if (empty? s)\n      result\n      (if (zero? (mod index n))\n        (recur result (rest s) (inc index))\n        (recur (conj result (first s)) (rest s) (inc index))))))","problem":41,"user":"538d464ee4b0b51d73faae69"},{"problem":41,"code":"(fn [coll n] (map second (filter #((complement ==) (mod (first %) n) (dec n)) (map list (range) coll))))","user":"57299c57e4b0c6e51e0d2b1e"},{"code":"(fn [lst0 n]\n    (for [x (take (count lst0) (iterate inc 1))\n          :let [y  (nth lst0 (dec x))]\n          :when (not (= 0 (mod x n)))]\n          y))","problem":41,"user":"4e964f4a535dbda64a6f6b42"},{"problem":41,"code":"(fn [s n]\n (mapcat (fn [a] (take (- n 1) a)) (partition-all n s)))","user":"5829d588e4b051871117bf4a"},{"code":"(fn [ls it] (flatten (map-indexed #(if (= (rem (inc %1) it) 0) () %2) ls)))","problem":41,"user":"4f03ba9c535dcb61093f6b58"},{"problem":41,"code":"(fn drop-nth [xs x]                                                                                                                                          \n  (if (>= (count xs) x)\n    (concat (drop-last (take x xs)) (drop-nth (drop x xs) x))\n    xs))","user":"589c7c8ce4b00487982d5361"},{"problem":41,"code":"(fn drop-nth\n  ([result count-down n coll]\n   (cond (empty? coll) result\n         (= count-down 1) (drop-nth result n n (rest coll))\n         :else (drop-nth (conj result (first coll)) (dec count-down) n (rest coll))))\n  ([coll n]\n   (drop-nth [] n n coll)))","user":"56822f37e4b0945ebc182a8d"},{"problem":41,"code":"#((fn [acc coll i n] (if (empty? coll) acc (if (zero? (mod i n)) (recur acc (rest coll) (inc i) n) (recur (conj acc (first coll)) (rest coll) (inc i) n)))) [] %1 1 %2)","user":"5659679ae4b068f2fe63dbeb"},{"problem":41,"code":"(fn [l n] (apply concat (map #(if (= (count %) n) (butlast %) %) (partition-all n l))))","user":"565e0934e4b068f2fe63dc30"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not (= 0 (mod (inc %1) n))) %2) coll))","user":"54bad977e4b0ed20f4ff6eb9"},{"code":"(fn [x n] (mapcat #(take (- n 1) %) (partition-all n x)))","problem":41,"user":"4ee1f2ba535d10e5ff6f535f"},{"problem":41,"code":"(fn drop-n [coll n]\n  (let [length (count coll)]\n    (concat (mapcat #(drop-last %) (partition n coll))\n            (drop (- length (mod length n)) coll))))","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":41,"code":"(fn [coll n]\n      (loop [l coll\n             count 1\n             newcoll []]\n        (cond\n          (nil? l) newcoll\n          (not= count n) (recur (next l)\n                                (inc count)\n                                (conj newcoll (first l)))\n          :else (recur (next l)\n                       1\n                       newcoll))))","user":"5386f784e4b06839e8705f17"},{"code":"(fn [s n] (->> (interleave s (range 1 (inc (count s)))) (partition 2) (remove (fn [x] (zero? (mod (second x) n)))) (map first)))","problem":41,"user":"526d6968e4b03e8d9a4a72d9"},{"problem":41,"code":"(fn dropn [c n]\n  (let [step\n        (fn [c n]\n          (when-let [s (seq c)]\n            (let [fs (take n s)]\n              (if (= (count fs) n)\n                (concat (drop-last fs) (dropn (drop n c) n))\n                fs))))]\n    (lazy-seq (step c n))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":41,"code":"(fn f [seq n]\n   (if (not (empty? seq))\n     (concat (take (dec n) seq) (f (drop n seq) n))\n     '()))","user":"589f37e0e4b02bd94d917e79"},{"problem":41,"code":"(fn [coll n]\n    (mapcat #(if (= (count %) n)\n               (butlast %)\n               %)\n            (partition-all n coll)))","user":"56eaad95e4b04a395b9a040f"},{"problem":41,"code":"(fn [arr nx]\n  (loop\n    [arr arr\n     n 1\n     ori nx\n     res []]\n \t(cond\n     (nil? (first arr)) res\n     (= n ori) (recur (next arr) 1 ori res)\n     :else (recur (next arr) (inc n) ori (conj res (first arr)))\n     )\n             \n    )\n  )","user":"5b3e35bde4b02d533a91bbfa"},{"code":"(fn ([lst cof] \n (map first \n      (remove #(= 0 (mod (inc (last %)) cof)) \n              (map list lst (range))))))","problem":41,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn [s n] (keep-indexed #(if-not (= (mod %1 n) (- n 1)) %2) s))","problem":41,"user":"52ac41fee4b0c58976d9ac85"},{"problem":41,"code":"(fn [coll n]\n (letfn [(drop-last-size-eq [x]\n          (cond\n           (= n (count x)) (drop-last x)\n           :else x ))]\n  (->>\n     (partition-all n coll)\n     (map drop-last-size-eq)\n     (flatten) )))","user":"559f06bae4b0acc240e314e6"},{"problem":41,"code":"(fn [coll n]\n  (loop [c coll i 1 c1 []]\n    (cond \n      (empty? c) c1\n      (= i n) (recur (rest c) 1 c1)\n      :else (recur (rest c) (inc i) (conj c1 (first c))))))","user":"57f80350e4b0d3187e90090c"},{"code":"#(keep-indexed\n  (fn [idx itm]\n    (if-not (zero? (rem (inc idx) %2)) itm))\n  %)","problem":41,"user":"50996a38e4b0cae2931060b3"},{"problem":41,"code":"(fn [ v n ] (mapcat #(take (dec n) %) (partition-all n v)))","user":"57408f87e4b05c31a32c0856"},{"problem":41,"code":"(fn [s n] \n           (loop [res [] \n                  idx 0]\n             (if (< idx (count s))\n               (if (= (mod (inc idx) n) 0)\n                 (recur res (inc idx))\n                 (recur (conj res (nth s idx)) (inc idx)))\n               res)))","user":"5251b11be4b0541d1855b87b"},{"problem":41,"code":"(fn [list num]\n    (filter #(not (= 0 (rem (+ (.indexOf list %) 1) num))) list)\n\n    )","user":"57aa103be4b0b8559636fc64"},{"code":"(fn dr [x n] (if (empty? x) nil (concat (take (dec n) x) (dr (drop n x) n))))","problem":41,"user":"53733312e4b06d7f452d9e0a"},{"problem":41,"code":"(fn [coll n]\n\n    (loop [remainder coll cur 1 out '()]\n      (if (empty? remainder)\n        (reverse out)\n       (if (= cur n)\n        (recur (rest remainder) 1 out)\n        (recur (rest remainder) (inc cur) (conj out (first remainder)))))))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"code":"(fn [v n] \n  (flatten (map #(take (dec n) %) (partition-all n v))))","problem":41,"user":"4f88ae35e4b033992c121c6d"},{"code":"(fn [sq n] (keep-indexed #(if (not= (dec n) (mod %1 n)) %2) sq))","problem":41,"user":"4fc0853ae4b081705acca327"},{"problem":41,"code":"(fn [col n]\n  (let [f (take (- n 1) col)\n        r (drop (- n 1) col)]\n    ( concat f (mapcat rest (partition-all n r)))))","user":"5fdc6ad4e4b05ac5b16ea13a"},{"problem":41,"code":"(fn [col n] (keep-indexed #(when-not (zero? (rem (+ 1 %1) n)) %2) col))","user":"5ba947bfe4b0a20761a23440"},{"problem":41,"code":"(fn [col pos] \n  (remove nil? \n          (map-indexed \n           (fn [idx e] (if (= (rem (+ idx 1) pos) 0) nil e)) \n           col)))","user":"53f67bcfe4b0db01ade6f9e1"},{"code":"(fn [xs n]\n  (mapcat\n    #(if (= (count %) n)\n        (drop-last %)\n         %)\n    (partition-all n xs)))","problem":41,"user":"526e5be8e4b03e8d9a4a731c"},{"code":"(fn drop-every--mask\n  [coll n] {:pre [(integer? n), (pos? n)]}\n  ;; This mask (a lazy sequence) has a 0 if we are dropping the corresponding\n  ;; element of coll, and a 1 otherwise; e.g., when n = 3, the mask is:\n  ;;   (0 0 1 0 0 1 0 0 1 ...)\n  (let [mask (drop 1 (cycle (cons 0 (repeat (dec n) 1))))]\n    (mapcat #(if (= %2 0) [] [%1]) coll mask)))","problem":41,"user":"4fc6305de4b0ee37620e180b"},{"problem":41,"code":"(fn [coll n]\n   (mapcat\n     #(take (- n 1) %)\n     (partition-all n coll)))","user":"585c5b21e4b0f14aab7c8786"},{"code":"(fn [a b] \n  (mapcat #(take (dec b) %) \n          (partition-all b a)))","problem":41,"user":"4e6ebd4a535d5021c1a89610"},{"problem":41,"code":"(fn f [x n]\n  (concat (take (dec n) x)\n          (if (> (count x) n) \n              (f (drop n x) n)\n              (list))))","user":"56eb3f9de4b04a395b9a0420"},{"problem":41,"code":"#(->>\n  (partition-all (- %2 1) %2 %)\n  (mapcat identity))","user":"5472d919e4b094393f72dd7b"},{"problem":41,"code":"(fn drp [res i sq n]\n  (let [del (= i n)]\n  (if (empty? sq)\n    res\n  (drp\n    (if del res \n      (conj res (first sq)))\n    (if del 1 (inc i))\n    (rest sq)\n    n\n  )))) [] 1","user":"56366f73e4b0bfe05bf117cc"},{"problem":41,"code":"(fn [xs n] \n     (mapcat #(if (= (count %) n) (drop-last %) %) (partition-all n xs)))","user":"590e588ce4b047aa04b19a23"},{"problem":41,"code":"(fn drop-index [coll x]\n\t(loop [coll coll\n\t\t\tx x\n\t\t\tres []\n\t\t\tcounter 1]\n\t\t\t\n\t\t\t(if(empty? coll)\n\t\t\tres\n\t\t\t(recur (rest coll)\n\t\t\t\tx\n\t\t\t\t(if (= counter x)\n\t\t\t\tres\n\t\t\t\t(conj res (first coll)))\n\t\t\t\t\n\t\t\t\t(if (= counter x)\n\t\t\t\t1\n\t\t\t\t(inc counter))))))","user":"560331dee4b04bb52996e1b5"},{"code":"(fn [s n] \n  (keep-indexed \n    (fn [x y] \n      (if (not= (mod x n) (- n 1)) \n     y)) \n  s))","problem":41,"user":"4f15de56535d64f603146448"},{"problem":41,"code":"(fn [c n]\n  (flatten (concat (map #(drop-last %) (partition n c)) (take-last (rem (count c) n) c)  )))","user":"56f4cedce4b046a417f92063"},{"problem":41,"code":"(fn [a n]\n  (flatten\n         (map #(if \n                 (>= (count %1) n) \n                 (drop-last %1) \n                 %1) \n              (partition-all n a)))\n)","user":"54897284e4b0e286459a11e6"},{"code":"(fn [coll n]\n  (loop [result (vector (first coll)) index 1 left (rest coll)]\n    (if-not (empty? left)\n      (recur\n        (if (not= (mod (inc index) n) 0)\n          (conj result (first left))\n          result)\n        (inc index)\n        (rest left))\n      result)))","problem":41,"user":"52cefb7ee4b07d0d72b27397"},{"problem":41,"code":"#(keep-indexed (fn [idx item] (if (not= (rem (+ 1 idx) %2) 0) item)) %1)","user":"54b51366e4b05787c3b16398"},{"code":"(fn [coll n]\r\n  (loop [coll coll n n ret []]\r\n    (if (empty? coll)\r\n      ret\r\n      (recur (drop n coll) n (into ret (take (dec n) coll))))))","problem":41,"user":"503354c3e4b0c6c1199c710c"},{"problem":41,"code":"#(flatten (partition-all (dec %2) %2 %))\n\n#_(fn [coll n] (-> (partition-all (dec n) n coll) flatten))","user":"54e1939ce4b024c67c0cf7c5"},{"code":"(fn drop-every-nth [xs n]\n  (flatten (map (partial take (dec n)) (partition-all n xs))))","problem":41,"user":"50cf94bde4b0abc485cb9bb2"},{"code":"(fn [lst x]\n    (loop [s lst r [] i 1]\n        (if (empty? s)\n            r\n            (if (= (rem i x) 0)\n                (recur (rest s) r (inc i))\n                (recur (rest s) (conj r (first s)) (inc i))\n            )\n        )\n    ))","problem":41,"user":"5179fd22e4b01aacecbecbe5"},{"problem":41,"code":"(fn drop-every [coll n]\n  (apply concat (partition-all (dec n) n coll)))","user":"55586905e4b0deb715856e2b"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (loop [i 1\n         coll coll\n         res []]\n    (if (empty? coll)\n      res\n      (if (= (mod i n) 0)\n        (recur (inc i) (rest coll) res)\n        (recur (inc i) (rest coll) (conj res (first coll)))))))","user":"5c04464ee4b0bdcf453d167d"},{"code":"(fn [x y]\n  (keep-indexed #(if (not= (mod % y) (dec y)) %2) x))","problem":41,"user":"5102489de4b00c483ae176f6"},{"code":"(fn t [col num]\n  (when (seq col)\n    (concat (take (dec num) col) (t (drop num col) num))))","problem":41,"user":"4fd7962ee4b0dab7d829f385"},{"code":"#(apply concat (loop [a [] coll %1]\n  (if (empty? coll) a\n  (recur (conj a (take (dec %2) coll)) (drop %2 coll)))))","problem":41,"user":"4da8dd6e30acd6ed12482a68"},{"problem":41,"code":"(fn [coll n]\n(loop [coll coll res '()]\n  (if (empty? coll)\n     res\n     (recur \n        (nthrest coll n) \n        (concat res (take (dec n) coll))))))","user":"5167e8ace4b0c5a4140a309a"},{"problem":41,"code":"(fn dropAll\n  [sq n]\n  (when (not-empty sq)\n    (concat (take (dec n) sq)\n            (dropAll (drop n sq) n))))","user":"55815973e4b05c286339e0f6"},{"problem":41,"code":"(fn [a n] (let [a1 (map vector (range) a), a2 (filter #(not= 0 (mod (+ 1 (first %)) n)) a1)] (map second a2)))","user":"55280930e4b0ffed3738f93b"},{"code":"(fn [col n] (keep-indexed (fn [i item] (when (not= (mod (inc i) n) 0) item)) col))","problem":41,"user":"4fe1a734e4b0dd6cd5ce3637"},{"code":"(fn drop-every-nth [coll n]\n  (mapcat (partial take (dec n)) (partition-all n coll)))","problem":41,"user":"4f6bab49e4b07046d9f4efb1"},{"code":"(fn [s n]\n  (mapcat \n    (partial take (dec n))\n    (partition n n nil s)\n  )\n)","problem":41,"user":"518e6966e4b051adb72789ec"},{"problem":41,"code":"(fn [col n]\n  (->>\n    (partition-all (- n 1) n col)\n    (flatten)\n    (vec)))","user":"5b85221ce4b047b03b2037c8"},{"problem":41,"code":"(fn [s n]\n  (->> s\n       (map-indexed (fn [i x] [(inc i) x]))\n       (filter (fn [x] (not (= (mod (x 0) n) 0))))\n       (map (fn [x] (x 1)))))","user":"577629abe4b0979f8965162e"},{"problem":41,"code":"(fn [xs n]\n  (loop [xs-left xs\n         result  []]\n    (if (< (count xs-left) n)\n      (concat result xs-left)\n      (recur (drop n xs-left) \n             (concat result (take (dec n) xs-left))))))","user":"57006957e4b08d47c97781c8"},{"code":"(fn [xs d] (mapcat #(take (dec d) %) (partition-all d xs)))","problem":41,"user":"503d129fe4b06c4e0e1fa254"},{"problem":41,"code":"(fn [c a] (keep-indexed #(if-not (= (dec a) (rem % a)) %2) c))","user":"54349368e4b0b6b47310fcf1"},{"problem":41,"code":"(fn [x y] (filter #(not (nil? %)) (map-indexed #(if (= (mod (inc %1) y) 0) nil %2) x)))","user":"5576e78de4b05c286339e075"},{"problem":41,"code":"(fn [s n]\n   (reduce\n    (fn [a x] \n      (if (not= (mod (first x) n) 0)\n        (conj a (last x))\n        a))\n    []\n    (map-indexed (fn [i v] (list (+ i 1) v)) s)))","user":"5446ebc2e4b032a45b8693b8"},{"code":"(fn                                                                                                                                            \n __                                                                                                                                            \n [coll n]                                                                                                                                      \n (if                                                                                                                                           \n  (seq coll)                                                                                                                                   \n  (let                                                                                                                                         \n   [fst (take (dec n) coll) tail (drop n coll)]                                                                                                \n   (flatten (cons fst (__ tail n))))))","problem":41,"user":"4dda44f2535d02782fcbe9f1"},{"problem":41,"code":"(fn drop-nth [c n] (if (empty? c) c (concat (take (dec n) c) (drop-nth (drop n c) n))))","user":"563b1553e4b0bfe05bf1180a"},{"code":"(fn [s n] (mapcat #(if (= (count %) n) (drop-last %) %)\n  (partition-all n s)))","problem":41,"user":"50464831e4b011c5dfee771f"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) xs))","user":"5ce97826e4b0a17bb84e2bc0"},{"problem":41,"code":"(fn dropnth\n  ([items n]\n    (dropnth items n []))\n  ([items n a]\n    (if (empty? items)\n        a\n        (recur (drop n items) n (apply conj a (take (dec n) items))))))","user":"5ac741d6e4b0e27600da777d"},{"code":"(fn f [x n]\r\n    (reverse (map val (filter #(> (mod (inc (key %)) n) 0)\r\n            (zipmap (range 0 (count x)) x)))))","problem":41,"user":"4fea08a9e4b0547ebccb2484"},{"problem":41,"code":"(fn f[a c] (if (empty? a) [] (concat (take (dec c) a) (f (drop c a) c)) ))","user":"59e8bb43e4b0249b72820735"},{"problem":41,"code":"#(let [elems_to_take (- %2 1)]\n  (loop [res [] rem %1]\n    (if (empty? rem)\n      res\n      (recur (into res (take elems_to_take rem)) (drop %2 rem)))))","user":"5d5a79cce4b02ba5928a6833"},{"problem":41,"code":"(fn [col n]\n  (->> col\n       (interleave (range))\n       (partition 2)\n       (remove\n        (fn [[ix v]]\n          (let [ix+1 (inc ix)]\n            (= (rem ix+1 n) 0))))\n       (map last))\n  )","user":"54d90b36e4b0a52adc2e2049"},{"problem":41,"code":"(fn [xs n]\n(->> xs\n  (partition-all n)\n  (mapcat #(take (dec n) %))))","user":"573a0ecce4b0cd1946bd1088"},{"problem":41,"code":"(fn [seq c] (mapcat #(if (= c (count %)) (drop-last %) %) (partition-all c seq)))","user":"53623eaee4b0243289761e4f"},{"problem":41,"code":"(fn _drop [counter _list n] \n  (if (= counter n)\n    (_drop 1 (rest _list) n)\n    (if (= (rest _list) '())\n      (if (= (count _list) 1)\n      \t(list (first _list ))\n        '())\n      (concat (list (first _list)) \n              (_drop (+ counter 1) (rest _list) n)\n       )\n      ))) 1","user":"59129074e4b0163c97b36ef1"},{"problem":41,"code":"#(mapcat butlast (partition %2 %2 [:empty] %))","user":"54d1cf2ee4b0e8a36923e5eb"},{"problem":41,"code":"(fn [coll n] (vec (map last (filter #(not ( = 0 (rem (inc (first %)) n)))\n                                       (map-indexed #(vector %1 %2) coll)))))","user":"5b917764e4b0c0b3ffbd4a1f"},{"problem":41,"code":"(fn [coll n]\n  (loop [c coll iter 1 results []]\n    (if (seq c)\n      (if (= 0 (mod iter n))\n        (recur (rest c) (inc iter) results)\n        (recur (rest c) (inc iter) (conj results (first c))))\n      results)))","user":"5cf62ecce4b087f62be35aa7"},{"problem":41,"code":"(fn [c i] (mapcat #(take (dec i) %) (partition-all i c)))","user":"530a6cbae4b02e82168697be"},{"problem":41,"code":"(fn [xs n]\n  (loop [i 0\n         acc []]\n    (if (< i (count xs))\n      (if (= 0 (rem (inc i) n))\n        (recur (inc i) acc)\n        (recur (inc i) (conj acc (nth xs i))))\n      acc)))","user":"5e0b6375e4b099d064962f7b"},{"problem":41,"code":"(fn th [l n] (when-not (empty? l)(concat (take (dec n) l) (lazy-seq (th (drop n l) n)))))","user":"5282f54be4b0239c8a67ada0"},{"problem":41,"code":"(fn [coll n]\n  (apply concat (concat (map drop-last (remove nil? (partition n coll))) [(take-last (rem (count coll) n) coll)])))","user":"557232a1e4b09a3098a52543"},{"problem":41,"code":"(fn [s x]\n  (flatten (partition-all (dec x) x s)))","user":"5ade6bafe4b0837691e92c23"},{"problem":41,"code":"(fn [xs x]\n  (mapcat (partial take (dec x))\n          (partition-all x xs)))","user":"55164856e4b06a49daca83b3"},{"code":"(fn [c n] (map second \n  (filter #(not= 0 (rem (inc (first  %)) n))\n    (map-indexed vector c))))","problem":41,"user":"4fff289ae4b0678c553fc3fd"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed (fn [idx item] \n                  (if (not (= 0 (mod (+ idx 1) n))) \n                    item)) \n                xs))","user":"58bfa57ae4b021aa9917ecd8"},{"problem":41,"code":"(fn [cc n] (loop [c cc r []] \n              (if (empty? c)\n                r\n                (recur (drop n c) (apply conj r (take (dec n) c)))\n                )))","user":"549375e4e4b0b312c081ff4e"},{"code":"(fn [c i] (keep-indexed #(if (> (mod (+ 1 %) i) 0) %2) c))","problem":41,"user":"4e65027c535d8ccf87e9fe6e"},{"code":"(fn [xs n] (->> xs \n  (partition-all (dec n) n)\n  (apply concat)))","problem":41,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":41,"code":"(fn drop-nth\n  [xs n]\n  (reduce (fn [x [i y]] (if (not= (rem i n) 0) (conj x y) x)) []\n          (map vector (range 1 (inc (count xs))) xs)))","user":"5a16da30e4b0ff51aa4b31cc"},{"problem":41,"code":"(fn d [xs n]\n     (mapcat #(take (dec n) %) (partition-all n xs)))","user":"5cdfe2aee4b0a17bb84e2b04"},{"code":"(fn [x y]\r\n  (loop [x x\r\n         y y\r\n         z []]\r\n    (if (empty? x)\r\n      z\r\n      (recur (nthrest x y) y (into z (take (dec y) x))))))","problem":41,"user":"504e2333e4b0f6ff3350c46c"},{"code":"(fn [s n] \n  (keep-indexed \n    #(if (not= 0 (mod (inc %) n)) %2)\n    s))","problem":41,"user":"4f1052b9535d64f603146418"},{"problem":41,"code":"#(mapcat butlast (partition %2 %2 [nil] %1))","user":"4f8490fae4b033992c121c34"},{"problem":41,"code":"(fn [ins split] (mapcat #(take (- split 1) %) (partition-all split ins)))","user":"53e15371e4b0d874e779ae54"},{"problem":41,"code":"(fn foo [s n]\n    (loop [s s\n           i 1\n           acc []]\n        (if (empty? s)\n            acc\n            (let [x (first s)\n                  xs (rest s)\n                  newi (rem (+ i 1) n)\n                  newacc (if (= i 0)\n                             acc\n                             (conj acc x))]\n                (recur xs newi newacc)))))","user":"600ae927e4b074f607df6689"},{"code":"(fn [seq n]\n  (keep-indexed #(if (= 0 (rem (inc %1) n)) nil %2) seq))","problem":41,"user":"4fe8b6afe4b07c9f6fd12c76"},{"code":"#(apply concat (partition-all (dec %2) %2 %))","problem":41,"user":"4dce6e41535d5973398f92a2"},{"code":"(fn [lst nth]                                                       \n            (flatten (map #(if (= (count %) nth)                                \n                            (butlast %)                                         \n                            %)                                                  \n                          (partition-all nth lst))))","problem":41,"user":"4eed6b32535d93acb0a668bc"},{"problem":41,"code":"(fn [x n] (mapcat #(if (= n (count %)) (drop-last %) %) (partition n n nil x)))","user":"5e909685e4b0cb016954634d"},{"problem":41,"code":"(fn [input nth]\t\n\t(->> \n\t\tinput\n\t\t(partition-all nth)\n\t\t(map (fn [x]\n\t\t\t(if (= (count x) nth)\n\t\t\t\t(butlast x)\n\t\t\t\tx)))\n\t\t(apply concat)))","user":"554b8b78e4b0a04f7929958d"},{"code":"#(flatten \n         (map \n          (fn[x r] (if (< 0 (mod (+ r 1) %2 )) \n                     x \n                     '())\n          ) \n          %1 \n          (range))\n)","problem":41,"user":"52ca720fe4b071a8d36bd3e2"},{"code":"(fn drop-every-nth-item [coll n]\n  (flatten\n      (concat\n        (map #(drop-last %) (partition n coll))\n        (take-last (rem (count coll) n) coll)\n      )\n    )\n  )","problem":41,"user":"510a3cd4e4b06956752d35ad"},{"problem":41,"code":"#(keep-indexed \n  (fn [idx v]\n    (if (not= (mod (inc idx) %2) 0) v)) %1)","user":"57fbd83ee4b0d3187e90097b"},{"problem":41,"code":"#(for [i (range (count %1))\n      :when (not= (rem (inc i) %2) 0)]\n  (nth %1 i))","user":"54bec835e4b0ed20f4ff6ef7"},{"problem":41,"code":"(fn drop-nth [s n] \n   (keep-indexed #(if (not= 0 (rem (inc %1) n)) %2) s))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":41,"code":"(fn [c n] (keep identity (map-indexed \n                       (fn [idx itm] \n                         (let [x (inc idx)] \n                           (if (not (zero? (mod x n))) \n                             itm))) c)))","user":"5078dedae4b08327cd804a5d"},{"code":"#(keep-indexed\n  (fn [index item]\n    (if (= (mod (inc index) %2) 0)\n      nil\n      item))\n  %1)","problem":41,"user":"4fb57e06e4b081705acca2bf"},{"problem":41,"code":"(fn [col index] \n  (loop [col col, i index, result []]\n    (cond\n     (empty? col) result\n     (= i 1) (recur (rest col) index result)\n     :else (recur (rest col) (dec i) (conj result (first col))\n     ))))","user":"555883c5e4b0deb715856e2d"},{"problem":41,"code":"(fn [coll n]\n (loop [y [] z 1]\n  (if (= z (+ 1 (count coll)))\n   y\n   (if (= (mod z n) 0)\n    (recur y (inc z))\n    (recur (conj y (nth coll (- z 1))) (inc z))\n   )\n  )\n )\n)","user":"5df08767e4b093ff717275bf"},{"code":"(fn [s n] (flatten (concat (map #(drop-last %) (partition n s)) (take-last (rem (count s) n) s))))","problem":41,"user":"52446511e4b0d8acf9ed6a9a"},{"problem":41,"code":"(fn [xs n]\n  (->> xs\n       (map list (range))\n       (remove #(zero? (mod (inc (first %)) n)))\n       (map second)))","user":"5db5d09be4b010eb3c36cd31"},{"problem":41,"code":"(fn my-drop-nth\n  ([sq n]\n   (my-drop-nth sq n []))\n  ([sq n dropt]\n   (if-let [frst (first sq)]\n     (recur (drop n sq) n (concat dropt (take (- n 1) sq)))\n     dropt)))","user":"5537f30fe4b09218d5f44fd8"},{"problem":41,"code":"#(->> (partition %2 %2 (repeat nil) %1)\n      (mapcat drop-last)\n      (remove nil?))","user":"55db7e15e4b0e31453f64ae8"},{"code":"(fn dropnth [xs,n]\n  (if (empty? xs) xs\n  (concat (take (dec n) xs) (dropnth (drop n xs) n))))","problem":41,"user":"532b9075e4b09d4e7a9b5533"},{"problem":41,"code":"(fn [x n] (keep-indexed #(if(not= (- n 1) (mod %1 n)) %2) x))","user":"5965eb8de4b069c0a1a19796"},{"problem":41,"code":"#(map first (filter (fn[x] (not= (rem (last x) %2) 0)) (map list %1 (iterate inc 1))))","user":"541619e8e4b01498b1a719f9"},{"code":"#(mapcat butlast (partition %2 %2 [:f] %))","problem":41,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":41,"code":"(fn f [s n] \n   (loop [agg [] s* s] \n     (if (empty? s*) \n      agg \n       (recur (concat agg (let [x (take n s*)] \n                            (if (> n (count x)) \n                              x \n                             (drop-last x)))) \n         (drop n s*)))))","user":"56942923e4b0dcc4269f4112"},{"code":"(fn[v f] (filter #(not= 0 (mod (+ 1(.indexOf v %)) f)) v))","problem":41,"user":"536e86b0e4b0fc7073fd6e72"},{"problem":41,"code":"(fn [c n]\n  (reduce concat (partition-all (dec n) n c)))","user":"5398d042e4b0b51d73faaf00"},{"code":"(fn [s n]\n    (keep-indexed #(if (not (= (- n 1) (mod %1 n))) %2) s))","problem":41,"user":"4fa1183fe4b0dcca54ed6d57"},{"problem":41,"code":"(fn [arr index]\n  (keep-indexed #(if (not= 0 (mod (inc %1) index)) %2) arr)\n\n  )","user":"5d90b3b3e4b0915913b1d3fb"},{"code":"(fn [xs n] (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n xs)))","problem":41,"user":"4fb65f2fe4b081705acca2c7"},{"problem":41,"code":"(fn [x y] (mapcat #(if (= y (count %)) (butlast %) %)\n                  (partition-all y x)))","user":"5470b3d0e4b00cfc9eacc1bb"},{"code":"(fn [l n] (mapcat #(take (dec n) %) \n  (partition-all n l)))","problem":41,"user":"4ed152d5535d44c135fd68cc"},{"code":"(fn [vctr n]\n  (loop [cnt 0 nwvct nil]\n  (let [vcnt (count vctr)]\n          (if (= cnt vcnt) (reverse nwvct)\n          (do\n          (if (= (mod (inc cnt) n) 0)\n          (recur (inc cnt) nwvct)\n          (recur (inc cnt) (conj nwvct (get vctr cnt)))))))))","problem":41,"user":"52c3a0f4e4b0c2d177d620c6"},{"problem":41,"code":"(fn [xs n] \n  (map #(first %) \n       (filter #(not (= (second %) n)) \n               (map vector xs (cycle (range 1 (inc n)))))))","user":"5e4471e1e4b01d43a70e8e85"},{"problem":41,"code":"(fn [xs n]\n   (filter identity\n           (map-indexed (fn [idx itm]\n                          (if (zero? (rem (inc idx) n))\n                            nil\n                            itm))\n                        xs)))","user":"5e7b1ef4e4b085ba37836e10"},{"problem":41,"code":"(fn [col n]\n  (loop [i n\n         s col\n         r [] ]\n    (if (empty? s) r\n      (if (= 1 i) \n        (recur n (rest s) r)\n        (recur (dec i) (rest s) (conj r (first s))))\n    )\n  )\n)","user":"56d5c1b0e4b0ea9b8538f7c3"},{"code":"(fn dropNth [x a] (\n  if (< (count x) a) x\n  (loop [i a\n         before '()\n         after x]\n    (if (= i 1) \n      (concat before (dropNth (rest after) a)) \n      (recur (dec i) (concat before (vector (first after))) (rest after))))))","problem":41,"user":"50ef311fe4b0a78662fa2651"},{"code":"#(flatten (map (partial take (dec %2)) (partition-all %2 %1)))","problem":41,"user":"4f29cdc8e4b0d6649770a033"},{"problem":41,"code":"(fn [s n] \n  (keep-indexed \n;   (fn [i e] (if (not= (rem (inc i) n) 0) e) )\n   (fn [i e] (if (-> i inc (rem n) (not= 0)) e) )\n   s\n  )\n)","user":"5d9e7971e4b000c986472bc1"},{"code":";(fn [x y] (into [] (mapcat drop-last (partition-all y x))))\n\n(fn [sequ part] (mapcat (partial take (- part 1)) (partition-all part sequ)))","problem":41,"user":"52a28e1ce4b04e0c58e87bf0"},{"problem":41,"code":"(fn [s n]\n  (loop [s s\n         counter n\n         acc []]\n    (cond\n      (empty? s) acc\n      (= counter 1) (recur (rest s) n acc)\n      :else (recur (rest s) (dec counter) (conj acc (first s)))\n    )\n  )\n)","user":"540f09b9e4b0addc1aec6725"},{"code":"(fn drop [coll every]\r\n   (when (seq coll)\r\n     (concat (take (dec every) coll) (drop (nthnext coll every) every))))","problem":41,"user":"4de623ef535d08e6dec9fdf4"},{"code":"#(map last\n       (filter (fn [i] (not= (mod (first i) %2) (dec %2)))\n               (map list (range (count %1)) %1)))","problem":41,"user":"507e68abe4b085af06e3afd2"},{"problem":41,"code":"(letfn [(f [x sq lim]\n           (if (empty? sq) sq\n             (if (>= x lim) (f 1 (next sq) lim)\n               (cons (first sq) (f (+ 1 x) (next sq) lim)))))\n        ]\n       (partial f 1))","user":"54d95ce8e4b024c67c0cf74a"},{"problem":41,"code":"(fn [coll n] (map second (filter #(not= 0 (mod (first %) n)) (map-indexed #(vector (inc %1) %2) coll))))","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn[s n] \n  (let[len (count s)] \n    (loop[i 0 r []] \n      (let[e (get s i) j (inc i)] \n        (if(= i len) \n          r \n          (recur \n           j \n           (if(zero? (mod j n)) r (conj r e))\n           )\n          )\n        )\n      )\n    )\n  )","problem":41,"user":"52e68e61e4b09f7907dd1479"},{"problem":41,"code":"(fn drop-nth [coll i]\n  (lazy-seq\n   (reduce-kv #(if(zero? (rem (inc %2) i)) %1 (conj %1 %3)) [] coll)))","user":"5370d152e4b0fc7073fd6e9d"},{"problem":41,"code":"(fn [aseq drop-every]\n   (->> aseq \n        (map-indexed hash-map)\n        (remove #(= 0 (rem (inc (first (keys %))) drop-every)))\n        (mapcat vals)))","user":"5c1ca642e4b0efcb0b05b23c"},{"problem":41,"code":"(fn drop-nth [sequence drop-index]\n  (loop [seq sequence\n         index 1\n         accumulator '()]\n    (if (empty? seq)\n      (reverse accumulator)\n      (recur (rest seq) (inc index) (let [remainder (mod index drop-index)\n                                          item (first seq)]\n                                      (if (not= remainder 0)\n                                          (conj accumulator item)\n                                          accumulator))))))","user":"58daae01e4b0a4d5acaab664"},{"problem":41,"code":"(fn [lista skipthis]\n   (keep-indexed (fn [idx v] (if (pos? (mod (inc idx) skipthis)) v)) lista ))","user":"5762fcfde4b0994c1922fbb3"},{"problem":41,"code":"(fn [v i]\n        (loop [x v cur 1 res []]\n          (if (empty? x)\n            res\n            (recur (rest x) (inc cur)\n                   (if (= (mod cur i) 0)\n                     res\n                     (conj res (first x)))))))","user":"571077e8e4b09c608db70434"},{"problem":41,"code":"#(reduce concat [] (map (fn [xs] (take (dec %2) xs)) (partition-all %2 %)))","user":"54d267e0e4b0e8a36923e5f3"},{"code":"(fn [s i] (mapcat #(take (dec i) %) (partition i i nil s)))","problem":41,"user":"4e6a5158535d8ccf87e9fec5"},{"problem":41,"code":"(fn foo [lst n] \n  ( if (empty? lst) \n    '() \n    (concat (take (dec n) lst) (foo (drop n lst) n ))))","user":"5c59b1d3e4b01df32ab73261"},{"problem":41,"code":"(fn [v n] (loop [x [], y v] (if (=  y []) x (recur (into x (take (- n 1) y)) (drop n y)) )))","user":"5756efc3e4b02ea1147992e6"},{"problem":41,"code":"(fn [s n] \n  (map first (remove \n                    #(zero? (rem (inc (second %)) n)) \n                      (map list s (range)))))","user":"5054d243e4b0b1b9d1860eb5"},{"code":"(fn [coll n]\r\n  (map last (filter #(not= (first %) n) \r\n    (map #(list %1 %2) (cycle (range 1 (inc n))) coll))))","problem":41,"user":"4df407c3535d08e6dec9fe2e"},{"code":"(fn [c1 n]\n  (flatten\n    (map \n      #(if (= n (count %))\n        (drop-last %) %)\n    (partition-all n c1))\n  )\n)","problem":41,"user":"4e570f47535d8a8b8723a287"},{"code":"(fn [xs n] (map \n            \t#(xs %) \n            \t(filter \n             \t\t#(not (= 0 (mod (inc %) n)))\n             \t\t(range (count xs))\n             \t)\n            )\n)","problem":41,"user":"50f2e5cee4b0ec8ee6fa8643"},{"problem":41,"code":"(fn [vec n]\n(mapcat #(take (dec n) %) (partition-all n vec))\n)","user":"54512df2e4b0e397800069ae"},{"code":"(fn dropn \n([s a c r] (println s a c r)  (if (seq s) (dropn (rest s) a  (inc c)  (if (zero? (rem c a)) r  (conj r (first s) ))   ) (flatten r) ) ) \n([s a] (dropn s a 1 [] ) )\n)","problem":41,"user":"4e3a9dae535deb9a81d77f4a"},{"code":"(fn [coll n]\n      (mapcat #(if (< (count %) n)\n                 %\n                 (butlast %))\n              (partition-all n coll)))","problem":41,"user":"4e3bcca9535deb9a81d77f54"},{"problem":41,"code":"#(keep-indexed (fn [i x] (when-not (zero? (rem (inc i) %2)) x)) %1)","user":"56f15eade4b04a395b9a048e"},{"problem":41,"code":"(fn [sq n]\n   (loop [[fst & rst :as all] sq result [] current 1]\n     (if (empty? all)\n       result\n       (if (= current n)\n         (recur rst result 1)\n         (recur rst (conj result fst) (inc current))))))","user":"60759e51e4b069485764de5a"},{"problem":41,"code":"(fn drop-every-nth [seq n & {:keys [res] :or {res []}}]\n  (if (empty? seq) res\n      (recur (drop n seq)\n             n\n             {:res (concat res (take (dec n) seq))})))","user":"5b47874be4b02d533a91bc70"},{"code":"(fn [s n]\n  (map second (remove #(zero? (rem (first %1) n)) (map list (iterate inc 1) s))))","problem":41,"user":"4f29eb2ae4b0d6649770a037"},{"code":"(fn [coll n]\n  (loop [curcoll coll\n         curn n\n         result '()]\n    (if (empty? curcoll) (reverse result)\n      (if (= 1 curn)\n        (recur (rest curcoll)\n          n result)\n      (recur (rest curcoll)\n        (dec curn)\n          (cons (first curcoll) result))))))","problem":41,"user":"4e4bf20e535dc968683fc4d9"},{"code":"#(for [i (range (count %1)) :when (not= 0 (rem (inc i) %2))] (%1 i))","problem":41,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":41,"code":"(fn [lst n]\n  (reduce concat (map #(if (not= 0 (rem (get % 0) n))\n                        (list (get % 1))\n                        ()) (map-indexed vector (cons 0 lst)))))","user":"57f81549e4b0d3187e900918"},{"problem":41,"code":"#(keep-indexed (fn [i x] (if-not (= 0 (mod (inc i) %2)) x)) %1)","user":"5a3d33b3e4b001c08efc0cef"},{"problem":41,"code":"(fn rmv \n    ([sq n] (rmv sq n n))\n    ([sq n cnt]\n     (cond (empty? sq) sq\n           (= cnt 1) (rmv (rest sq) n n)\n           :else (conj (rmv (rest sq) n (dec cnt)) (first sq)))))","user":"4f867b25e4b033992c121c51"},{"problem":41,"code":"(fn dropn [coll n] (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) coll))","user":"5b421edce4b02d533a91bc2c"},{"problem":41,"code":"(fn [coll n]\n  (->>\n    (partition-all n coll)\n    (map (fn [x]\n           (if (= (count x) n) \n             (drop-last x)\n             x)))\n    (concat)\n    (flatten)))","user":"57bfffc7e4b05aa3c4741c8a"},{"problem":41,"code":"(fn [a n]\n   (into [] (flatten (map #(if (= %2 0) () %1)\n    a\n    (map #(rem % n) (range 1 (+ (count a) 1))))))\n   )","user":"541074f1e4b01498b1a719ac"},{"problem":41,"code":"#(filter (complement nil?) (for [i (range (count %))]\n (if (not (= (rem (+ i 1) %2) 0)) (% i))))","user":"54c98ac0e4b045293a27f679"},{"code":"(fn dropn [input drop-interval]\n  (let [dont-drop? (fn[x] (not (zero? (mod x drop-interval))))\n        indexes (range 1 (inc (count input)))]\n    (map \n      (apply hash-map \n        (interleave indexes input))\n      (filter dont-drop? indexes))))","problem":41,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":41,"code":"(fn drop-nth\n  ([arr n] (drop-nth arr n [] ))\n  ([arr n result]\n   (if (empty? arr)\n     result\n     (drop-nth (drop n arr) n (concat result (take (- n 1) arr))))))","user":"59636b6de4b066ee0a44b0c6"},{"code":"(fn [s n]\r\n  (loop [s s l 1 ret '()]\r\n    (cond\r\n      (empty? s) (reverse ret)\r\n      (zero? (mod l n)) (recur (rest s) (inc l) ret)\r\n      :else (recur (rest s) (inc l) (cons (first s) ret)))))","problem":41,"user":"4fcc6cb3e4b0ee37620e1861"},{"code":"#(loop [acc '()\n        l %1]\n   (let [s (split-at %2 l)\n         t (concat acc (take (dec %2) (first s)))\n         r (second s)]\n     (if (empty? r) t\n       (recur t r))))","problem":41,"user":"537e745ae4b06839e8705ea6"},{"code":"(fn [coll n]\n  (loop [coll coll index 1 result[]]\n    (if-not (seq coll)\n      result\n      (if (= 0 (rem index n))\n        (recur (rest coll) (inc index) result)\n        (recur (rest coll) (inc index) (conj result (first coll)))))))","problem":41,"user":"52fcfeeee4b047fd55837027"},{"problem":41,"code":"#(keep-indexed (fn [index item] (when-not (zero? (mod (inc index) %2)) item)) %1)","user":"5a1c3c11e4b0ff51aa4b323d"},{"problem":41,"code":"(fn dropEveryN [s n]\n  (first\n   (reduce\n     (fn dropEverNReducer [[result currN] curr]\n       (if (= currN n)\n         [result 1]\n         [(conj result curr) (inc currN)]))\n     [[] 1]\n     s)))","user":"5f7251b9e4b02876ed9fd08a"},{"code":"(fn [l p]\n  (for [n (remove #(= (mod % p) (dec p)) (range (count l)))]\n    (nth l n)))","problem":41,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":41,"code":"#(reduce into [] (partition-all (dec %2) %2 %1))","user":"5b69baf9e4b0c6492753e78f"},{"code":"#(mapcat \n  (partial take (dec %2)) \n     (partition-all %2 %1))","problem":41,"user":"4dcfbc44535d5973398f92a7"},{"problem":41,"code":"(fn [coll n] (mapcat #(if (= n (count %)) (drop-last 1 %) %) (partition-all n coll)))","user":"520e37cfe4b066f3ea161c96"},{"problem":41,"code":"(fn [x1 x2]\n  (loop [i 0 j []]\n    (if (= i (count x1))\n      j\n      (recur (inc i) (if (not= 0 (mod (inc i) x2)) (conj j (nth x1 i)) j)))))","user":"54bcab07e4b0ed20f4ff6ed5"},{"code":"(fn drop-every-nth [a n]\n\t(let [zipped (zipmap (range) a)]\n\t\t(reverse (for [[k v] zipped :when (not= (mod (+ k 1) n) 0)] v))))","problem":41,"user":"50ed8a5fe4b06330c1f87c3d"},{"code":"(fn [seq n]\n  (apply concat (partition-all (- n 1) n seq)))","problem":41,"user":"530578ede4b0d8b024fd3760"},{"code":"(fn f [s, n]\r\n   (if (empty? s)\r\n     '()\r\n     (concat (take (dec n) s) (f (drop n s)n))\r\n   )\r\n)","problem":41,"user":"5043a536e4b034ff00315d24"},{"problem":41,"code":"(fn drop-n [s n]\n    (loop [s s, i 1, res []]\n      (if (seq s)\n        (if (= i n)\n          (recur (rest s) 1 res)\n          (recur (rest s) (inc i) (conj res (first s)) ))\n        res)))","user":"587bead1e4b01531a375eb0d"},{"problem":41,"code":"(fn [xs n] (->> xs\n                (partition-all n)\n                (map #(if (= n (count %))\n                          (take (dec n) %)\n                          %))\n                flatten))","user":"5e0e14bde4b099d064962fa3"},{"problem":41,"code":"(fn ddop [abc n]\n\t(if (empty? abc) \n\t\tabc\n\t(concat (take (dec n) abc) (ddop (rest (drop (dec n) abc)) n)))\n)","user":"56449e4de4b0284900eef5f9"},{"problem":41,"code":"(fn [coll n] (apply concat (map (partial take (dec n)) (partition-all n coll))))","user":"5f21d172e4b0f565ad998286"},{"problem":41,"code":"(fn[xs n] (flatten (for [i (range (count xs))] (if (= 0 (rem (inc i) n)) (empty xs) (xs i)))))","user":"5e8ce2fee4b0cb0169546328"},{"code":"(fn [v n] (remove nil? (map-indexed (fn [idx item] (if (= 0 (mod (+ 1 idx) n)) nil item)) v)))","problem":41,"user":"4f307b02e4b0d6649770a079"},{"problem":41,"code":"(fn [coll n] (mapcat #(if (= n (count %)) (drop-last %) %) (partition-all n coll)))","user":"53e3e852e4b036ad0777e407"},{"problem":41,"code":"#(flatten (map (fn [x] (take (dec %2) x)) (partition-all %2 %1) ))","user":"5ddd6cfae4b0948ae9d9adc4"},{"problem":41,"code":"(fn [c i]\n   (keep-indexed #(if (not= (mod %1 i) (- i 1)) %2) c))","user":"4fec0824e4b0681fd128dc9c"},{"problem":41,"code":"(fn [lst k] (loop [res [] xs lst id 1] (if (empty? xs) res (if (zero? (mod id k)) (recur res (rest xs) (inc id)) (recur (conj res (first xs)) (rest xs) (inc id))))))","user":"5ed4a4ade4b016b56eae05cd"},{"code":"(fn dropnth [sq n]\n  (lazy-seq\n    (when (seq sq)\n      (concat\n        (take (dec n) sq)\n        (dropnth (drop n sq) n)))))","problem":41,"user":"4f36f5f2e4b0e243712b1ece"},{"problem":41,"code":"(fn [x y] (apply concat (map #(take (- y 1) %) (partition-all y x))))","user":"4e8b5cb8535d65386fec211b"},{"code":"(fn dropNitem [lst n]\r\n  (loop [xs '()\r\n   ls lst\r\n\t i 1]\r\n    (if (= (first ls) nil)\r\n      (reverse xs)\r\n      (if (= i n)\r\n\t(recur xs (rest ls) 1)\r\n\t(recur (conj xs (first ls))\r\n\t       (rest ls)\r\n\t       (+ i 1))))))","problem":41,"user":"4ddc620d535d02782fcbea06"},{"problem":41,"code":"#((fn dropn [vals countdown reset-countdown] (cond (empty? vals) vals (= countdown 1) (dropn (rest vals) reset-countdown reset-countdown) true (conj (dropn (rest vals) (dec countdown) reset-countdown) (first vals)))) %1 %2 %2)","user":"55d95be7e4b0e31453f64ac9"},{"problem":41,"code":"(fn [v ev] (reduce-kv #(if (zero? (rem (inc %2) ev)) %1 (conj %1 %3)) [] (vec v)))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":41,"code":"(fn [x y]\n  (remove #(= (mod (.indexOf x %) y) (dec y)) x))","user":"593c1e3be4b069cdc2982b86"},{"problem":41,"code":"(fn [c d] \n(let [n (atom 0)] (vec (filter (fn [e] (not (= 0 (mod (swap! n inc) d)))) c)))\n  )","user":"5530b827e4b076ab5578f818"},{"problem":41,"code":"(fn [x y] (flatten (map #(take (- y 1) %) (partition-all y x)))) ;(1 2 3) (4 5 6) (7 8)","user":"567e6d24e4b0feffd0d18eb4"},{"code":"(fn mydrop [coll n]\r\n  (lazy-seq\r\n    (flatten\r\n      (map\r\n        (fn [coll]\r\n          (if (= n (count coll))\r\n            (drop-last 1 coll)\r\n            coll))\r\n        (partition n n [] coll)))))","problem":41,"user":"4fd170fce4b04c3a95aa0411"},{"code":"(fn my-drop [xs n]\n  (loop [xs xs i 1 r []]\n    (if (empty? xs) r\n      (if (zero? (mod i n))\n        (recur (rest xs) (inc i) r)\n        (recur (rest xs) (inc i) (conj r (first xs)))))))","problem":41,"user":"4f0660ee535dcb61093f6c0d"},{"problem":41,"code":"(fn [v n] (keep-indexed (fn [i e] (if(pos? (mod (inc i) n)) e)) v))","user":"5fba5692e4b03f550f448230"},{"code":"(fn [coll, n]\n   (map second (remove (fn [[idx itm]] (= 0 (rem idx n))) (map (fn [[i e]] [(inc i), e]) (map-indexed vector coll)))))","problem":41,"user":"5348cab4e4b084c2834f4a5e"},{"problem":41,"code":"(fn [seq n] (keep-indexed (fn [idx val] (if (not (= (- n 1) (mod idx n))) val)) seq))","user":"56215c8ee4b03f08ee9a921a"},{"code":"#(flatten (partition (- %2 1) %2 nil %))","problem":41,"user":"50127fbfe4b030d97e4db70f"},{"problem":41,"code":"(fn [xs n]\n          (loop [res [] rem xs]\n            (if(> n (count rem))\n            (concat res rem)\n            (recur (concat res (take (dec n) rem)) (drop n rem))\n            )))","user":"5ab3db13e4b073f177442609"},{"problem":41,"code":"(fn [coll n] (mapcat #(take (- n 1) %) (partition n n [] coll)))","user":"54df7922e4b024c67c0cf7ad"},{"problem":41,"code":"#(let [n %2 xs %1]\n  (mapcat (partial take (dec n))\n          (partition n n nil xs)))","user":"4eb47bb1535d7eef30807362"},{"code":"#(reduce concat (partition-all (dec %2)  %2 %1))","problem":41,"user":"4f280840e4b0d6649770a010"},{"problem":41,"code":"(fn [col x] (flatten (map #(take (dec x) %) (partition-all x col))))","user":"57ee2b3ee4b0bfb2137f5bac"},{"code":"(fn [x y] \n  (flatten \n    (map \n      (fn [n] (take (- y 1) n)) \n      (partition-all y x))))","problem":41,"user":"4e9ff8d0535d7eef3080729c"},{"code":"#(loop [pos1 0, pos2 (- %2 1), res []]   ( cond (>= pos2 (count %1)) ( into res (subvec %1 pos1))\n                                                  :else (recur (+ pos2 1) (+ pos2 %2) (into res (subvec %1 pos1 pos2)))))","problem":41,"user":"52f5eefbe4b09b582c12c9cb"},{"problem":41,"code":"(fn [coll nth-drop]\n     (loop [coll coll\n            i 1\n            coll-acc []] \n       (cond (empty? coll) coll-acc\n             (= i nth-drop) (recur (rest coll) 1 coll-acc)\n             :else\n             (recur (rest coll) (inc i) (concat coll-acc (list (first coll)))))))","user":"5e724492e4b085ba37836dc7"},{"code":";;#(mapcat rest (partition-all %2 (cons -1 %)))\r\n#(apply concat (partition-all (dec %2) %2 %))","problem":41,"user":"4f32ef71e4b0d6649770a098"},{"code":"(fn [lst n]\n  (flatten (#(partition (- n 1) n [] lst)))\n  \n )","problem":41,"user":"5124619ae4b02c3f2a072ccd"},{"code":"(fn [lst n] (map last (filter #(< 0 (mod (inc (first %1)) n)) (map vector (range) lst))))","problem":41,"user":"53110f32e4b08068f379ece4"},{"code":"(fn [l n]\r\n  (loop [i 1 s l r []]\r\n    (if (seq s)\r\n       (if (>= i n)\r\n         (recur 1 (rest s) r)\r\n         (recur (inc i) (rest s) (conj r (first s))))\r\n       r)))","problem":41,"user":"4db342d7535df7e46ed9b6cd"},{"code":"(fn dropnth [x y] \n  (loop [i 0 j (- y 1) newseq []] \n    (if (and (<= i (count x))\n      (> j (count x))) (concat newseq (subvec x i))\n      (if (and (> i (count x)) (> j (count x))) newseq\n      (recur (+ i y) (+ j y) \n        (concat newseq (subvec x i j)))))))","problem":41,"user":"4ea9b80c535d7eef30807306"},{"code":"(fn [list n]\n  (loop [l list n n ret '() c 1]\n    (if (= (count l) 0)\n      (reverse ret)\n      (if (= c n)\n        (recur (rest l) n ret 1)\n        (recur (rest l) n (cons (first l) ret) (+ c 1))\n      )\n    )\n  )\n)","problem":41,"user":"4fc8f671e4b0ee37620e1840"},{"problem":41,"code":";; (fn [coll nth]\n;;   (map second\n;;        (filter #(not= (mod (inc (first %)) nth) 0)\n;;           (map-indexed vector coll))))\n#(reduce concat (partition-all (dec %2) %2 %1))","user":"6020365ae4b0bf4ca6b10960"},{"problem":41,"code":"(fn [s n] (loop [s s c 1 res []]\n            (cond \n             (empty? s) res\n             (zero? (rem c n))\n             (recur (rest s) (inc c) res)\n             :else\n             (recur (rest s) (inc c) (conj res (first s)))\n              )))","user":"5b7ec039e4b047b03b20375d"},{"code":"(fn [coll n] (keep-indexed #(when (not= 0 (mod (inc %) n)) %2) coll))","problem":41,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":41,"code":"(fn [coll n]\n  (first\n   (reduce (fn [[result idx] value]\n             (if-not (zero? (rem idx n))\n               [(conj result value) (inc idx)]\n               [result (inc idx)]))\n           [[] 1]\n           coll)))","user":"562268dce4b03f08ee9a9224"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (if (empty? xs)\n    []\n    (concat (take (- n 1) xs) (drop-nth (drop n xs) n))))","user":"5bcddaeee4b0e9689409ee07"},{"problem":41,"code":"(fn [x n]\n  (mapcat #(take (- n 1) %)\n          (take (/ (count x) n) (iterate #(drop n %) x))))","user":"53e543efe4b036ad0777e457"},{"code":"(fn [s n]\n  ((fn iter [s-in s-out i]\n    (let [ni (if (= n i) 1 (+ i 1))]\n    (if (empty? s-in)\n      s-out\n      (iter (rest s-in) (if (= i n) s-out (conj s-out (first s-in))) ni))))\n   s [] 1))","problem":41,"user":"4fe8e771e4b0547ebccb2431"},{"problem":41,"code":"(fn [xs m] (reduce #(if (= 0 (mod (inc (.indexOf xs %2)) m)) %1 (conj %1 %2)) [] xs))","user":"56e02c1ce4b0ca2494a09602"},{"problem":41,"code":"(fn [myseq n]\n  (keep-indexed\n    #(if (not= 0 (rem (+ %1 1) n) )\n      %2) myseq )\n  )","user":"54ca9311e4b057c6fda3a263"},{"code":"(fn [xs n]\n  (let [f (fn [[acc i] x]\n            (if (= i n) [acc 1]\n              [(conj acc x) (inc i)]))]\n    (first (reduce f [[] 1] xs))))","problem":41,"user":"522b922ee4b0d34ee08e71c3"},{"problem":41,"code":"(fn [coll n]\n  (second (reduce (fn [[curr coll] v]\n            (if (= curr n)\n              [1 coll]\n              [(inc curr) (conj coll v)]))\n            [1 []] coll)))","user":"5c8005cee4b0c8042a70ce0a"},{"code":"(fn [coll n]\n  (map second (filter (fn [[pos val]] (not= 0 (mod pos n))) (partition 2 (interleave (iterate inc 1) coll))))\n  )","problem":41,"user":"500e7063e4b04a05d36fcc07"},{"problem":41,"code":"#(loop [[h & t :as i] %1\n            r []\n            c 1]    \n     (cond (empty? i) r\n       :else (if (= 0 (mod c %2))\n                  (recur t r (inc c))\n                  (recur t (conj r h) (inc c)))))","user":"5ef4fca7e4b07c55ae4a0546"},{"code":";#(loop [result [] coll %1 cur 1]\n;   (let [r %2]\n;     (if (empty? coll)\n;       result  \n;       (if (= 0 (rem cur r))\n;         (recur result (rest coll) (inc cur))\n;         (recur (conj result (first coll)) (rest coll) (inc cur))))))*/\n#(remove nil? (map-indexed (fn [i x] (when (not= (rem (inc i) %2) 0) x)) %1))","problem":41,"user":"518ccf6be4b05e6c8537e386"},{"problem":41,"code":"(fn [coll n] (flatten (partition (dec n) n nil coll)))","user":"5f02f365e4b0cf489e8d7f2c"},{"code":"#(flatten (partition (dec %2) %2 [] %))","problem":41,"user":"4eaede1f535d7eef30807329"},{"code":"(fn dropnth [[x & xs :as l] n]\n                  (if-not (empty? l)\n                    (concat (take (dec n) l)\n                            (dropnth (nthnext l n) n))))","problem":41,"user":"4e71705e535d5021c1a89649"},{"problem":41,"code":"(fn [c n]\n  (remove nil? (map-indexed #(if (= 0 (rem (+ 1 %1) n)) nil %2) c))\n  )","user":"55e1d34ae4b050e68259b421"},{"problem":41,"code":"#(vec (for [i (range (count %1)) :when (not= 0 (rem (inc i) %2))] (nth %1 i) ))","user":"55adf4d7e4b03311e7b732af"},{"problem":41,"code":"(fn\n  [xs n]\n  (loop [ls xs\n         res []\n         count 1]\n    (if (empty? ls)\n      res\n      (if (= count n)\n        (recur (rest ls) res 1)\n        (recur (rest ls) (conj res (first ls)) (inc count))))))","user":"542d5fa9e4b0dad94371f2b5"},{"code":"(fn [coll x] (flatten (loop [curr coll i []] (if (empty? curr) i (recur (drop x curr) (conj i (take (dec x) curr)))))))","problem":41,"user":"4ea11921535d7eef308072af"},{"code":"(fn [lst n]\n  (loop [i 1 x lst result []]\n    (if (empty? x)\n      result\n      (recur (inc i) (rest x) (if (not (= (mod i n) 0))\n                                (conj result (first x))\n                                result)))))","problem":41,"user":"51e0198ee4b01188f0627539"},{"code":"(fn my-dropn [coll n]\n  (flatten (map #(take (dec n) %) (partition n n nil coll))))","problem":41,"user":"52127ee4e4b0d32679a5063c"},{"code":"(fn [xs i]\n  (flatten (map #(take (dec i) %)\n                (partition-all i xs))))","problem":41,"user":"523ea111e4b057c4b7cd0a65"},{"problem":41,"code":"(fn [c n]\n    (->> c\n        (map #(vector (inc %1) %2) (range))\n        (filter #(not= (mod (first %) n) 0))\n        (map second)\n        ))","user":"57ae3345e4b0fbc9809a271e"},{"problem":41,"code":"#(vec (mapcat vec (partition-all (dec %2) %2 %1)))","user":"5b284375e4b063e2438bcc53"},{"problem":41,"code":"(fn [l n] (apply concat (map #(if (= n (count %1)) (drop-last %1) %1) (partition-all n l))))","user":"56a75810e4b0542e1f8d14fc"},{"problem":41,"code":"(fn [c n] (keep-indexed #(case (mod (inc %1) n) 0 nil %2) c))","user":"5066003ee4b0313a384e5647"},{"problem":41,"code":"#(map first (filter second (map list %1 (cycle (conj (vec (repeat (dec %2) true)) false)))))","user":"54d6c80ce4b0a52adc2e2020"},{"problem":41,"code":"(fn [sq n] (map last (filter #(not= 0 (mod (inc (first %1)) n)) (map-indexed list sq))))","user":"5f3ab5ece4b004f08c61c52a"},{"code":"#(flatten (partition (dec %2) %2 nil %))","problem":41,"user":"502ac868e4b0614b5299611a"},{"problem":41,"code":"(fn drop-nth [coll n] \n  (apply concat (map drop-last (partition n n [nil] coll))))","user":"561814bae4b06b1bb2182a1a"},{"code":"(fn [x n]\n  (mapcat #(if (= (count %) n)\n          (butlast %)\n          %) \n          (partition n n nil x)))","problem":41,"user":"51980f7ce4b068aa333628f7"},{"problem":41,"code":"(fn\n  [x n]\n  (loop [i 0 cx x cf []]\n    (if (empty? cx)\n      cf\n      (let [[f & remaining] cx] \n        (recur (inc i) remaining (if (not= (rem (+ i 1) n) 0) (conj cf f) cf))))))","user":"57f55632e4b0903ccab3dcf1"},{"code":"(fn [col i]\n  (filter #(if %1 true false)\n    (map-indexed #(if (= (mod (+ %1 1) i) 0) nil %2) col)))","problem":41,"user":"4f61be97e4b0defedf855fc5"},{"problem":41,"code":"(fn [lst index]\n   (mapcat #(if (= (count %) index) (butlast %) %)(partition-all index lst)))","user":"5f77d470e4b02876ed9fd0be"},{"code":"(fn [c i] (map last (remove #(= (- i 1) (mod (first %) i)) (map-indexed #(identity [%1 %2]) c))))","problem":41,"user":"5127e504e4b03a34742b4302"},{"problem":41,"code":"(fn [s n]\n  ((fn helper [c s ret]\n     (cond\n      (empty? s) ret\n      (= c n) (recur 1 (rest s) ret)\n      true (recur (inc c) (rest s) (conj ret (first s)))))\n   1 s []))","user":"55670a05e4b0c656e3ff1838"},{"problem":41,"code":"#(loop [se %1 cnt 1 res []]\n   (if (empty? se)\n     res\n     (recur (rest se) (inc cnt) \n            (if (= 0 (rem cnt %2)) \n              res\n              (conj res (first se))))))","user":"59f58103e4b0966464fe6ac0"},{"problem":41,"code":"(fn [s n]\n  (filterv #(not= (dec n) (mod (.indexOf s %) n)) s))","user":"51a3be77e4b0e77c4ca60bf8"},{"code":"(fn dropn [dlist dnum]\n   (if (empty? dlist)\n    '()\n    (concat (take (- dnum 1) dlist)\n             (dropn (drop dnum dlist) dnum))))","problem":41,"user":"4f0365fc535dcb61093f6aa4"},{"problem":41,"code":"(fn [col,n]\n   (->> col\n        (map #(vector %1 %2) (drop 1 (range)))\n        (filter #(not= (mod (first %1) n) 0))\n        (map second)\n        ))","user":"5d0b4966e4b0cc9c9158822f"},{"problem":41,"code":"(fn [s n]\n    (loop [left [] right s] \n      (if (empty? right)\n        left\n        (recur (concat left (take (dec n) right)) (drop n right)))))","user":"54febf4be4b07d26eda61d45"},{"problem":41,"code":"#(remove nil? (map-indexed (fn [idx itm] (if-not (= (mod (inc idx) %2) 0) (identity itm))) %))","user":"5ddd3cbee4b0948ae9d9adc3"},{"code":"(fn [coll n]\n  (->> (partition-all (dec n) n coll)\n       (apply concat)))","problem":41,"user":"51ab4082e4b04e3dc0c27b31"},{"code":"(fn [vals rank] \n  (keep-indexed #(if-not (= (rem (inc %1) rank) \n                            0) %2) \n                vals))","problem":41,"user":"528410bbe4b0239c8a67adc2"},{"problem":41,"code":"(fn [xs n]\n  (->> xs\n       (partition-all n)\n       (mapcat #(if (= n (count %)) (butlast %) %))))","user":"56098ccbe4b0053d1b86c7e4"},{"code":"(fn drop-nth\n  [col n]\n  (loop [i (dec n)\n         r []\n         col col]\n    (if (empty? col)\n      r\n      (do (println i)\n      (if (zero? i)\n        (recur (dec n) r (rest col))\n        (recur (dec i) (conj r (first col)) (rest col)))))))","problem":41,"user":"4e5a460f535d8a8b8723a2ab"},{"code":"(fn [xs x] (apply vector (mapcat (fn [s] (take (dec x) s)) (partition-all x xs))))","problem":41,"user":"52baea85e4b07a9af57922d9"},{"problem":41,"code":"(fn [l n] \n  (loop [i 1 ret [] l l]\n    (if (empty? l)\n    \tret\n       (if (= 0 (mod i n))\n         (recur (inc i) ret (rest l))\n        (recur (inc i) (concat ret [(first l)]) (rest l))\n      \t))))","user":"539c88e1e4b0b51d73faaf2c"},{"code":"(fn drop-nth [coll n] (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) coll))","problem":41,"user":"531dfaf5e4b08068f379edb3"},{"problem":41,"code":"(fn dropnth [myseq n]\n  (loop [result []\n         remseq myseq\n         cur-index 1]\n    (if-not (<= cur-index (count myseq))\n      result\n      (if (= (mod cur-index n) 0)\n        (recur result (rest remseq) (+ cur-index 1))\n        (recur (conj result (first remseq)) (rest remseq) (+ cur-index 1))))))","user":"60726211e4b069485764de36"},{"problem":41,"code":"(fn [dataz to-drop](map second (filter #(not= 0 (rem (first %1) to-drop))(map #(list %2 %1) dataz (rest (range))))))","user":"56ef11efe4b04a395b9a045b"},{"problem":41,"code":"(fn drop-nth [collection n]\n  (map \n   (fn [index] (nth collection index))\n    ((fn indexes [length skip-every]\n      (filter \n       (fn [x] (not (zero? (mod (+ 1 x) skip-every))))\n       (range 0 length))) (count collection) n)))","user":"50c13f77e4b096f585049c3b"},{"problem":41,"code":"(fn [coll n]\n  (for [i (range 0 (count coll))\n        :let [x (nth coll i)]\n        :when (< 0 (mod (+ 1 i) n))] x))","user":"60b3b8a9e4b0e0fa5f1b4233"},{"code":"#(mapcat butlast (partition %2 %2 [:pad] %1))","problem":41,"user":"4efd8b67535de96065cf5085"},{"problem":41,"code":"(fn [xs k]\n  (map first (filter #(not= (mod (second %) k) 0) (map #(vector %1 %2) xs (map inc (range))))))","user":"5947c6a6e4b07ddc2dafada7"},{"problem":41,"code":"(fn drop-every-nth [xs n]\n  (loop [l [] xs' xs]\n    (if (empty? xs')\n      l\n      (recur\n        (into l (take (dec n) xs'))\n        (drop n xs')))))","user":"557bcce4e4b05c286339e0b9"},{"problem":41,"code":"(fn [xs n]\n  (apply concat (map (fn [x] (if (= (count x) n)\n                         (butlast x)\n                         x)) (partition-all n xs))))","user":"5ad3d730e4b0ea6055cfabc8"},{"code":"(fn [x y] (mapcat #(if (= (count %) y) (drop-last %) %) (partition-all y x)))","problem":41,"user":"51c09719e4b0c9c82288293c"},{"problem":41,"code":"(fn drop-nth\n  [s n]\n  (keep-indexed\n   #(when-not (zero? (mod (inc %) n))\n      %2)\n   s))","user":"5bab49bbe4b0a20761a23474"},{"code":"(fn [coll n] \n  (apply concat (partition-all (dec n) n coll)))\n  ;(mapcat #(if (= (count %) n) (drop-last %) %) (partition-all n coll)))\n  ;(remove #(= 0 %) (mapcat drop-last (partition n (concat coll (repeat (dec n) 0))))))","problem":41,"user":"4ff01fa9e4b0678c553fc321"},{"code":"(fn [col pos]\n(flatten (map #(if (= pos (count %)) \n        (drop-last %) %) \n     (partition-all pos col))))","problem":41,"user":"4e77c1db535d324fb2983d72"},{"problem":41,"code":"(fn my-drop-n\n   ([coll n] (my-drop-n [] n coll n))\n   ([result x coll n]\n    (if (empty? coll)\n      result\n      (if (= x 1)\n        (my-drop-n result n (rest coll) n)\n        (my-drop-n (conj result (first coll)) (dec x) (rest coll) n)))))","user":"5e14e396e4b0a047bd49f6f7"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n       (partition n n [])\n       (map #(take (- n 1) %))\n       flatten))","user":"4ecaa5da535d6d7199dd3707"},{"code":"#(keep-indexed (fn [i x] (when (< 0 (mod (+ i 1) %2)) x)) %)","problem":41,"user":"508923d5e4b06d8254e936e8"},{"problem":41,"code":"#(loop [s %1 d %2 i 1 o []]\n   (cond\n    (empty? s)\n    o\n    :else\n    (recur (rest s)\n           d\n           (if (= i d)\n             1\n             (inc i))\n           (if (= i d)\n             o\n             (conj o (first s))))))","user":"56a9d4bbe4b07966d5a8a07b"},{"problem":41,"code":"(fn [l x] \n  (mapcat #(take (dec x) %) (partition-all x l)))","user":"54236ce1e4b01498b1a71ad1"},{"problem":41,"code":"(fn [l n] \n  (keep-indexed #(if (> (rem (inc %1) n) 0) %2) l))","user":"540217e1e4b0df28a13c62cb"},{"problem":41,"code":"(fn [x y] (keep-indexed #(if (not= 0 (rem (+ 1 %1) y)) %2) x))","user":"55b0ecb7e4b002ce9d5cbc27"},{"problem":41,"code":"(fn drop-nth [coll idx]\n  (loop [coll coll\n         accum nil\n         i 1]\n    (if (empty? coll)\n      (reverse accum)\n      (recur (rest coll) (if (zero? (rem i idx))\n                           accum\n                           (cons (first coll) accum)\n                           ) (inc i))\n      )\n    )\n  )","user":"55f06183e4b06e875b46ce23"},{"code":"(fn [col x]\n  (mapcat drop-last (partition x x [nil] col)))\n\n#_(fn bad-hamster-way [col n]\n  (if (seq col)\n    (lazy-cat\n      (take (dec n) col)\n      (bad-hamster-way (drop n col) n))\n    ()))","problem":41,"user":"5371167fe4b0fc7073fd6ea7"},{"code":"(fn drop-nth [l n]\n  (cond\n   (empty? l) '()\n   :else (let [taken (take (dec n) l)\n               lrest (nthrest l n)] \n           (concat taken (drop-nth lrest n))\n           )\n   )\n  )","problem":41,"user":"5252cbe7e4b0541d1855b8d2"},{"code":"(fn [c x]\n      (keep-indexed\n        #(when (not= 0 (rem (inc %1) x))\n          %2) c))","problem":41,"user":"50f10f7be4b06d9538fe211a"},{"code":"#(loop [s %1 n %2 r []]\n  (cond (empty? s) r\n        (= n 1) (recur (rest s) %2 r)\n        :else (recur (rest s) (dec n) (conj r (first s)))))","problem":41,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"(fn [s n]\n  (let [c (count s)]\n       (map (fn [n] (get s n))\n            (apply disj\n                   (set (range c))\n                   (range (- n 1) c n)))))","problem":41,"user":"4f0324d2535dcb61093f6a69"},{"problem":41,"code":"(fn [lst nh] (flatten (map #(if (= (count %) nh) (drop-last %) %) (partition-all nh lst))))","user":"56791447e4b05957ce8c6183"},{"problem":41,"code":"(fn [xs n] (filter identity (map-indexed #(if (pos? (mod (inc %1) n)) %2) xs)))","user":"52513bf1e4b0541d1855b86e"},{"problem":41,"code":"(fn [coll n]\n    (apply concat\n      (map\n        (fn [xs]\n          (if\n            (=\n              (count xs)\n              n\n            )\n            (drop-last xs)\n            xs\n          )\n        )\n        (partition-all n coll)\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":41,"code":"(fn [coll n] \n  (->> coll\n       (partition-all n)\n       (map #(take (dec n) %))\n       flatten))","user":"5abbbd46e4b073f1774426db"},{"problem":41,"code":"#(sort (vec (clojure.set/union\n        (into #{} (reduce concat (map drop-last (partition-all %2 %))))\n        (into #{} (take-last (rem (count %) %2) %)))))","user":"56193c6ee4b053970a773af2"},{"code":"#((fn rec [x y r] \n     (if (> (count x) 0) \n       (rec (drop y x) y (conj (take (- y 1) x) r)) \n       (flatten r)))\n   %1 %2 [])","problem":41,"user":"52ab61f5e4b0c58976d9ac75"},{"problem":41,"code":"(fn [xs n]\n  (first (reduce\n   (fn [p c]\n     (if (> n (second p))\n       [(conj (first p) c) (inc (second p))]\n       [(first p) 1]))\n   [[] 1]\n   xs)))","user":"6089bc95e4b0ae75613dcef5"},{"code":"(fn [v x]\n  (let [v' (map-indexed (fn [idx itm] [(+ 1 idx) itm]) v)]\n         (map second (filter #(not= (mod (first %) x) 0) v'))\n))","problem":41,"user":"52295917e4b04c906c9c6a6f"},{"problem":41,"code":"(fn [xs n] (map first (filter (fn [[x y]] (not (= 0 (rem y n)))) (map list xs (range 1 (inc (count xs)))))))","user":"56fde58ae4b08d47c97781aa"},{"code":"(fn [a x]\n  (keep-indexed #(if-not (= 0 (mod (inc %1) x)) %2) a))","problem":41,"user":"4f8ab084e4b02e764a0a5171"},{"problem":41,"code":"#(loop [i 0 res []]\n       (if (= i (count %1))\n          res\n          (recur (inc i)\n                (if (zero? (mod (inc i) %2)) res (conj res (nth %1 i))))\n                          ))","user":"5cbc9dace4b026601754b9eb"},{"problem":41,"code":"(fn  [xs n]\n  (flatten\n    (for [x (partition-all n xs)] (if (>= (count x) n) (drop-last x) x))))","user":"503c90aae4b06c4e0e1fa24b"},{"problem":41,"code":"(fn [x y]\n  (remove nil? \n    (map #(if (not (= %2 y)) %1)\n      x \n      (take (count x) (cycle (range 1 (+ 1 y)))))))","user":"574a71b7e4b02ea1147991fb"},{"problem":41,"code":"(fn[coll a](loop[coll coll\n                 ret []\n                 n 1]\n             (cond\n               (empty? coll) ret\n               :else (recur(rest coll)\n                           (cond\n                             (= (mod n a) 0) ret \n                             :else (conj ret (first coll)))\n                           (inc n)\n                           ))))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":41,"code":"(fn [coll count] (map second (filter #(ratio? (/ (inc (first %)) count)) (map #(list %2 %1) coll (range)))))\n\n; Congratulations, you've just partially reimplemented keep-indexed\n;\n; Taken from https://stackoverflow.com/questions/7744656/how-do-i-filter-elements-from-a-sequence-based-on-indexes\n;","user":"594266cfe4b060784b3b790b"},{"problem":41,"code":"(fn [col n] (apply concat  (partition (dec n) n nil col)))","user":"5455a6d3e4b0e397800069e2"},{"code":"(fn [l1 idx] \n  (keep-indexed\n    #(if (not (= (mod (inc %1) idx) 0)) %2) l1))","problem":41,"user":"4e5bdc2b535d8a8b8723a2bb"},{"problem":41,"code":"(fn [sequ n] (apply concat (partition (- n 1) n nil sequ)) )","user":"5d824225e4b0915913b1d37f"},{"code":"(fn [s n] (filter (complement nil?)\n  (map-indexed\n    (fn [i e] (if (zero? (mod (inc i) n))\n        nil\n        e))\n     s)))","problem":41,"user":"4fa3f91fe4b081705acca196"},{"code":"(fn [m skip]  \n  ((fn iter [m l i skip]\n    (cond\n      (= i (count m)) l\n      (= 0 (rem (+ 1 i) skip)) (iter m l (+ i 1) skip)\n      :else (iter m (conj l (nth m i)) (+ i 1) skip))) m [] 0 skip))","problem":41,"user":"517531c6e4b07031762f2eea"},{"code":"(fn drops [s n]\n  (when (seq s)\n    (concat (take (dec n) s) (drops (drop n s) n))))","problem":41,"user":"4ef0eaef535dced4c769f211"},{"problem":41,"code":"(fn [xs n] (flatten (reduce #(conj (if (= (count %2) n) (drop-last 1 %2) %2) %1) '() (partition n n '() xs))))","user":"594be1cce4b07ddc2dafae47"},{"problem":41,"code":"(fn [A N]\n  (loop [n 1\n         as A\n         result []]\n    (cond\n      (empty? as)\n       result\n      (= n N)\n       (recur\n        1\n        (rest as)\n        result)\n      :else\n        (recur\n          (inc n)\n          (rest as)\n          (conj\n            result\n            (first as))))))","user":"5223daaee4b01819a2de42b8"},{"problem":41,"code":"(fn [li n]\n  ((fn filtn [lis curn]\n    (cond (empty? lis) nil\n          (= 0 (mod curn n))\n              (filtn (rest lis) (inc curn))\n          :else (cons (first lis)\n              (filtn (rest lis)(inc curn)))))\n       li 1))","user":"5627444fe4b00e49c7cb47cd"},{"problem":41,"code":"(fn [x n] (keep-indexed #(when-not (zero? (mod (inc %1) n)) %2) x))","user":"53737e6ce4b06d7f452d9e13"},{"code":"(fn dn [s n]\n  (if (not-empty s)\n    (concat (take (dec n) s) (dn (drop n s) n))\n    s)\n  )","problem":41,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":41,"code":"(fn drop-every-nth\n  ([col n] (drop-every-nth col n [] 1))\n  ([col n res ctr]\n   (if (empty? col)\n     res\n     (do\n       (if (not= ctr n)\n         (drop-every-nth (rest col) n (conj res (first col)) (inc ctr))\n         (drop-every-nth (rest col) n res 1))))))","user":"5d06499ae4b0cc9c915881ec"},{"problem":41,"code":"(fn [x n] (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n x))))","user":"57211a02e4b0c5bde472c0a9"},{"problem":41,"code":"(fn [xs n] (flatten (partition (dec n) n '() xs)))","user":"595fd721e4b066ee0a44b06e"},{"code":"(fn drop-every [coll i] (keep-indexed #(if (= 0 (rem (inc %1) i)) nil %2) coll))","problem":41,"user":"52cf084ce4b07d0d72b27399"},{"problem":41,"code":"(fn [c n] (filter #(not= 0 (mod (inc (.indexOf c %)) n)) c))","user":"5629de63e4b00e49c7cb4812"},{"code":"(fn drop-every-nth-item [c n]\n  (first (reduce \n          \n          (fn [[a,i] x]\n            (if-not (= n i)\n              [(conj a x), (inc i)]\n              [a,1]))\n\n          [[],1] c)))","problem":41,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn [l n] ; l is list, n is the nth to drop\n  (remove nil? (map-indexed (fn [idx itm] (if (= 0 (mod (+ 1 idx) n)) nil itm)) l))\n)","problem":41,"user":"52b94f15e4b07a9af57922ba"},{"problem":41,"code":"(fn [x v]\n  ((fn eh [x c v]\n    (cond\n     (empty? x) []\n     (= (mod c v) 0) (eh (rest x) (+ c 1) v)\n     :else (cons (first x) (eh (rest x) (+ c 1) v)))) x 1 v))","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":41,"code":"#(vec (flatten (loop [arg1 % arg2 %2  acc []] (if (not-empty arg1) (recur (drop arg2 arg1) arg2 (conj acc (take (dec arg2) arg1))) acc))))","user":"5720ba36e4b0c5bde472c09c"},{"code":"(fn [x y] (mapcat #(take (dec y) %) (partition y y [] x) ) )","problem":41,"user":"51e28063e4b08e53a149f0f2"},{"problem":41,"code":"(fn dr [r s n] (if (empty? s) r (dr  (concat r (take (- n 1) s)) (nthnext s n) n) )) []","user":"55ed962ae4b0121d4835fddd"},{"problem":41,"code":"(fn [seq val] \n  (loop [seq seq \n         new_seq '()]\n    (if (< (count seq) val) (concat new_seq seq)\n    \t(recur (nthrest seq val) (concat new_seq (take (- val 1) seq)))\n    \n      )\n    )\n  )","user":"54b598d6e4b05787c3b163a8"},{"problem":41,"code":"(fn [s n]\n  (loop [r () i 1 s s]\n    (if (empty? s)\n      (reverse r)\n      (if (= i n)\n        (recur r 1 (rest s))\n        (recur (conj r (first s)) (inc i) (rest s))))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":41,"code":"(fn [xs n]\n  (loop [iter n xs xs deplxs []]\n    (if (empty? xs)\n      deplxs\n      (if (= iter 1)\n        (recur n (rest xs) deplxs)\n        (recur (dec iter) (rest xs) (conj deplxs (first xs)))\n      )\n    )\n  )\n)","user":"5885e90de4b0f1effa3b76c5"},{"code":"#(loop [f (first %1) \n        r (rest %1) \n        c 0 \n        l []]\n      (if-not (= nil f)\n        (if-not (= c (- %2 1))\n          (recur (first r) (rest r) (inc c) (conj l f))\n          (recur (first r) (rest r) 0 l))\n      l))","problem":41,"user":"4e9e7ce3535dbda64a6f6b98"},{"code":"#({3 [1 2 4 5 7 8] 2 [:a :c :e] 4 [1 2 3 5 6]} %2)","problem":41,"user":"51dc1202e4b09c47a74ce107"},{"problem":41,"code":"#(loop[x %1 y %2 ac []]\n     (if (empty? x)\n       ac\n       (recur (nthrest x y) y (concat ac (take (dec y) x)))))","user":"5910a43de4b0163c97b36ebf"},{"problem":41,"code":"(fn [coll drop]\n  (loop [es coll\n         c []\n         n 1]\n    (cond\n      (empty? es) c\n      :default (recur\n                 (rest es)\n                 (if (zero? (mod n drop))\n                   c (conj c (first es)))\n                 (inc n)))))","user":"56f9c7c6e4b07572ad1a88ba"},{"code":"(fn [original-list original-index]\n   (loop [a-list original-list index original-index acc '()]\n     (if (empty? a-list)\n       (reverse acc)\n       (if (= 1 index)\n         (recur (rest a-list) original-index acc)\n         (recur (rest a-list) (- index 1) (conj acc (first a-list)))))))","problem":41,"user":"4ede0511535d10e5ff6f5330"},{"code":"(fn [coll nth ] (remove #{::remove} (map-indexed (fn [n x] (if (zero? (mod (inc n) nth)) ::remove x)) coll)))","problem":41,"user":"4daef21cedd6309eace4d169"},{"problem":41,"code":"(fn [sq n] (keep-indexed #(if-not (= 0 (mod (inc %1) n)) %2) sq))","user":"5f666fffe4b02876ed9fd030"},{"code":"#(map second\n  (filter (fn [v] (not= (rem (first v) %2) 0))\n    (map list (iterate inc 1) %1)))","problem":41,"user":"509160dae4b0742c82730aef"},{"problem":41,"code":"(fn [s n]\n  (loop [r [] s s]\n    (if (seq s)\n      (recur (into r (take (dec n) s)) (drop n s))\n      r)))","user":"5cd9dc85e4b05ee0cb31170d"},{"problem":41,"code":"(fn [myCol n] \n  (apply vector \n   (map \n    (fn [pair] (last pair)) \n    (filter \n     (fn [pair] (not= 0 (mod (first pair) n))) \n     (reverse (map (fn [pair] pair) (zipmap (map inc (range (count myCol))) myCol)))\n     )\n    )\n   )\n  )","user":"58950f29e4b00487982d5270"},{"code":"(fn [coll n]\n  (->> coll\n      (map-indexed (fn [i x] (if-not (= (mod (inc i) n) 0) x)))\n       (filter identity)))","problem":41,"user":"4dad8a6dc9a9d6ed1399dc57"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (keep-indexed\n    (fn [idx item]\n      (when (pos? (rem (inc idx) n))\n        item))\n    coll))","user":"5b51b9f8e4b02d533a91bcfe"},{"code":"(fn dropn [xs n]\n  (let [start (take (- n 1) xs)\n        end (drop n xs)]\n    (if (empty? start)\n      start\n      (concat start (dropn end n)))))","problem":41,"user":"5334d4f2e4b0656e627bfd71"},{"code":"(fn [x n]\n  (keep-indexed #(if (pos? (mod (inc %) n)) %2) x))","problem":41,"user":"5125d963e4b05d10e3e395fe"},{"problem":41,"code":"(fn [xs n]\n    (map second\n         (remove\n          (fn [[idx item]]\n            (= (mod (inc idx) n) 0))\n          (map vector (range) xs))))","user":"54c611d1e4b045293a27f627"},{"code":"#(apply concat\n  (partition-all (- %2 1) %2 %1)\n  )","problem":41,"user":"5298d3f4e4b02ebb4ef75068"},{"code":"(fn [a b] (keep-indexed #(if (> (mod (+ %1 1) b) 0) %2) a))","problem":41,"user":"4e6e6630535d5021c1a89609"},{"problem":41,"code":"(fn drop-every-nth\n  [xs n]\n  (apply concat (map (partial take (- n 1)) (partition n n nil xs))))","user":"5c222b7de4b07e362c230588"},{"problem":41,"code":"(fn f [seq n]\n  ((fn [s i acc]\n    (if (empty? s)\n      acc\n      (if (>= i n)\n        (recur (rest s) 1 acc)\n        (recur (rest s) (inc i) (conj acc (first s)))\n      )\n    )\n    ) seq 1 [])\n  )","user":"5681afaae4b0945ebc182a87"},{"problem":41,"code":"(fn f [s n]\n  ((fn drop [s n c]\n    (if (empty? s) '()\n      (if (= n c)\n        (drop (rest s) n 0)\n        (conj (drop (rest s) n (inc c))\n              (first s)))))\n   s (dec n) 0))","user":"54ce3790e4b057c6fda3a2ab"},{"problem":41,"code":"(fn\n  [l n]\n  (loop [l l\n         n n\n         res []]\n    (let [[fs sc] (split-at (dec n) l)\n          sc (drop 1 sc)\n          r (concat res fs)]\n      (if (empty? sc)\n        r\n        (recur sc n r)))))","user":"5a8fd113e4b05369db4d2542"},{"code":"(fn [coll n] (for [x (range 0 (count coll) ) :when (not (= (mod x n) (- n 1)) ) ] (nth coll x) ) )","problem":41,"user":"4de8a7d7535d08e6dec9fdfe"},{"code":"(fn [coll n]\n   (flatten (map \n    #(take (- n 1) %) (partition-all n coll))))","problem":41,"user":"4f944f60e4b0dcca54ed6cc2"},{"code":"(fn my-drop [coll item] (if(< (count coll) item) coll (concat (take (- item 1) coll) (my-drop (drop item coll) item))))","problem":41,"user":"539b4268e4b0b51d73faaf1c"},{"code":";(fn drop-every-nth [s n]\n;  (keep-indexed #(if-not (zero? (mod (inc %1) n)) %2) s))\n\n;#(apply concat (partition (dec %2) %2 %1))\n\n#(apply concat (partition-all (dec %2) %2 %1))","problem":41,"user":"4fc6d2c1e4b0ee37620e181b"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed \n      #(when-not (= 0 (rem (inc %1) n))\n                            %2) xs))","user":"53b42472e4b047364c0444b2"},{"code":"(fn rnth [s n] (apply concat (map #(if (= n (count %)) (drop-last %) %) (partition-all n s))))","problem":41,"user":"4ff304f4e4b0678c553fc343"},{"code":"(fn [coll step] (let [n (dec step)] (flatten (partition-all n step coll))))","problem":41,"user":"4f3444b7e4b0e243712b1eb6"},{"code":"(fn [coll n] (let [i (count coll)] (->> (range i) (remove #(zero? (rem (inc %) n))) (map #(nth coll %)))))","problem":41,"user":"509e62a8e4b08df8156e9e2e"},{"problem":41,"code":"(fn [coll n]\n  (loop [acc []\n         s coll]\n    (if (seq s)\n      (let [[head tail] (split-at (dec n) s)]\n        (recur (concat acc head) (rest tail)))\n      acc)))","user":"5a95c639e4b0d174b936c75e"},{"code":"(fn [col n] (loop [r []\n  \t      coll col\n\t\t      end (dec n)]\n\t\t      (if (empty? coll) r\n\t\t\t  (recur (concat r (subvec coll 0 (if (< (count coll) n) (count coll) end)))\n\t\t\t\t (if (< (count coll) n) [] (subvec coll n))\n\t\t\t\t end))))","problem":41,"user":"4ea4e98a535d7eef308072ce"},{"problem":41,"code":"(partial\n (fn [result items n]\n  (if (empty? items)\n    result\n    (recur (concat result (take (dec n) items))\n           (drop n items)\n           n)))\n [])","user":"572722c4e4b0c5bde472c134"},{"problem":41,"code":"(fn drop-nth\n  [lst n]\n  (if (empty? lst)\n    '() \n   (let [[l r] (split-at (dec n) lst)\n        r (rest r)] \n    (concat l (drop-nth r n)))))","user":"513f86dde4b00f13ea1bd88d"},{"code":"(fn di [lst n]\n  (let\n    [f (fn f [lst n idx]\n         (cond\n          (empty? lst) nil\n          (= 0 (mod idx n)) (f (rest lst) n (+ 1 idx))\n          true (cons (first lst) (f (rest lst) n (+ 1 idx)))))]\n     (f lst n 1)))","problem":41,"user":"52091d57e4b0e152394d76f0"},{"problem":41,"code":"(fn [c n]\n   (for [i (range (count c))\n         :when (not= (mod (inc i) n) 0)]\n     (nth c i)))","user":"57d8a1dee4b0bd073c2023ee"},{"problem":41,"code":"(fn [arr n]\n  (loop [[a & the-rest] arr \n         to-xs   [] \n         i       1]\n    (cond\n      (nil? a) to-xs \n      (zero? (rem i n)) (recur the-rest to-xs (inc i))\n      :else (recur the-rest (conj to-xs a) (inc i)))))","user":"5661e09ae4b068f2fe63dc70"},{"problem":41,"code":"(fn [x n]\n  (apply concat (map take (repeat (dec n)) (partition-all n x)))\n)","user":"5f574662e4b0a0bc16850a90"},{"problem":41,"code":"(fn drop-nth [sq n] \n  (cond\n   (= n (count sq)) (-> sq reverse rest reverse)\n   (< (count sq) n) sq\n   :else (into (drop-nth (drop n sq) n) (reverse (take (dec n) sq)))\n))","user":"5280a1ece4b0757a1b171407"},{"code":"(fn [seqs n]\n  (loop [result '()\n         ct 1\n         others seqs]\n    (if(empty? others)\n      result\n      (if(= ct n)\n        (recur result 1 (rest others))\n        (recur (concat result (list (first others)))\n               (inc ct)\n               (rest others))))))","problem":41,"user":"5273562ae4b03e8d9a4a7479"},{"code":"(fn[s n]\n    (:r (reduce (fn[x y] {:r (if (= 0 (mod (x :i) n)) (x :r) (conj (x :r) y)) \n                      :i (inc (x :i))}) \n            {:r [] :i 1} s)\n))","problem":41,"user":"5017eface4b02f523d7cc5e7"},{"problem":41,"code":"(fn [x n] (keep-indexed \n           #(when (not= 0 (mod (inc %1) n))\n              %2)\n           x))","user":"54058af3e4b0addc1aec6669"},{"problem":41,"code":"(fn\n  [c v]\n  (let [indexed (map #(vector %1 %2) c (range))] \n    (let [f (filter #(not= (mod (inc (second %))  v) 0) indexed)]\n      (map first f))))","user":"57acee37e4b0b8559636fc94"},{"code":"(fn drop-nth\n  [coll n]\n  (map second (remove #(zero? (mod (first %) n)) (map vector (iterate inc 1) coll))))","problem":41,"user":"534e4a29e4b084c2834f4ab0"},{"problem":41,"code":"(fn f1[x y] \n  (map \n    second \n    (filter \n     \t(fn f2[a]\n          (not= 0 (mod (first a) y))\n        ) \n     \t(map vector (iterate inc 1) x)\n    )\n  )\n)","user":"54283a7ae4b01498b1a71b2f"},{"problem":41,"code":"(fn drp\n      ([s n] (drp s n n))\n      ([s n nr]\n          (if (empty? s)\n            s\n            (if (= 1 n)\n              (drp (rest s) nr nr)\n              (concat\n               (list (first s))\n               (drp (rest s) (dec n) nr))))))","user":"54c9e00be4b045293a27f683"},{"code":"(fn this [s n]\n  (println s)\n  (cond (< (count s) n) s\n        :else (vec (concat (take (dec n)\n                            (first (iterate rest s)))\n                            (this (nthnext s n) n)\n                          )\n                     ) ))","problem":41,"user":"5021f0b3e4b00bba4502f7ac"},{"code":"(fn drop-nth [coll n]\r\n  (loop [coll coll\r\n         i 1\r\n         result []]\r\n    (if (empty? coll)\r\n      result\r\n      (recur\r\n       (rest coll)\r\n       (inc i)\r\n       (if (zero? (mod i n))\r\n         result\r\n         (conj result (first coll)))))))","problem":41,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":41,"code":"(fn [col n] (mapcat rest (filter #(> (mod (+ (first %) 1) n) 0) (map-indexed vector col))))","user":"584f5133e4b0b7285a6f4e61"},{"problem":41,"code":"#(keep-indexed (fn [i x] (if (< 0 (mod (+ i 1) %2)) x))\n                %1)","user":"559c13c5e4b066d22e731f61"},{"code":"#(for [[n x] (map vector (range) %1) :when (> (mod (+ n 1) %2) 0)] x)","problem":41,"user":"4e36e647535deb9a81d77f36"},{"problem":41,"code":"(fn [coll n]\n  (filter identity (map-indexed #(when (< (mod %1 n) (dec n)) %2) coll)))","user":"525523e3e4b0541d1855b9cc"},{"code":"(fn my-dropn [s n]\n  (loop [sp s\n         i 1\n         results '()]\n    (if (empty? sp)\n      (reverse results)\n      (if (= i n)\n        (recur (next sp) 1 results)\n        (recur (next sp) (inc i) (conj results (first sp)))))))","problem":41,"user":"4efb92ce535dced4c769f27a"},{"problem":41,"code":"(fn [seqn n] (mapcat #(if (< (count %) n) % (butlast %)) (partition-all n seqn)))","user":"5519c157e4b00ace28fe6e32"},{"problem":41,"code":"(fn [x y]\n(flatten (map #(take (dec y) %) (partition-all y x))))","user":"53d8da61e4b0e771c3025471"},{"problem":41,"code":"#(map\n    first\n    (filter\n      (fn [x] (not= (second x) %2))\n      (map (fn [x c] (list x c)) %1\n        (cycle (range 1 (inc %2)))\n      )\n    )\n  )","user":"59021fede4b0438e51c2d04d"},{"code":"(fn [coll i]\n  (keep-indexed #(if (not= 0 (mod (+ 1 %1) i)) %2) coll))","problem":41,"user":"4f230adde4b0d66497709fdf"},{"problem":41,"code":"(fn [s n] (flatten(map (partial take (- n 1)) (partition-all n s))))","user":"55f1d5dfe4b06e875b46ce38"},{"problem":41,"code":"(fn drop-every-nth [x n]\n  (for [i (range (count x))\n        :when (not= (rem (inc i) n) 0)]\n  (nth x i)))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":41,"code":"(fn dropn [s n] (filter identity (for [x (range (count s))] (if (not (integer? (/ (+ 1 x) n))) (nth s x)))))","user":"548a3dc6e4b0e286459a11f2"},{"code":"(fn [col n]\n  (->> (partition-all n col)\n       (mapcat #(if (= (count %) n)(drop-last %) %))))","problem":41,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":41,"code":"(fn [c n]\n  (loop [a c\n         r []\n         i 1]\n    (if (empty? a)\n      r\n      (recur \n       (rest a) \n       (if \n         (zero? (mod i n)) \n         r \n         (conj r (first a)))\n       (inc i)))))","user":"5ab9fe71e4b073f17744269d"},{"code":"(fn[s n] (reduce concat (map #(take (dec n) %) (partition-all n s))))","problem":41,"user":"51f2851fe4b0210f90e7454b"},{"problem":41,"code":"(fn [x n]\n   (keep-indexed #(if (not= (rem (inc %1) n) 0) %2) x))","user":"54ca35c6e4b057c6fda3a254"},{"problem":41,"code":"(letfn\n  [(drop-every [s per off]\n    (lazy-seq\n     (when (seq s)\n      (let [[f & r] s]\n        (if (= per off)\n          (drop-every r per 1)\n          (cons f\n                (drop-every r per (inc off))))))))]\n  #(drop-every %1 %2 1))","user":"5446c89ce4b032a45b8693b5"},{"problem":41,"code":"(fn\n  [input step]\n  (flatten (map #(if (= (count %) step)\n               (drop-last %)\n               %) (partition-all step input)))\n  )","user":"57596ba7e4b02ea11479931a"},{"problem":41,"code":"(fn \n  [col n]\n  (->>  col\n  \t\t(partition-all (dec n) n)        \n        flatten))","user":"566e87cfe4b0a866af6896dc"},{"code":"(fn [s i] (flatten (map-indexed #(if (= (- i 1) (mod % i)) [] [%2]) s)))","problem":41,"user":"50ad7888e4b0a40c9cfb08c7"},{"problem":41,"code":"(fn [coll n] \n  (->> coll \n       (map vector (iterate inc 1)) \n       (remove #(zero? (mod (first %)n))) \n       (map second) \n       (vec)))","user":"5afdca89e4b0cc2b61a3bd20"},{"code":"(fn [col n] (loop [x 1 y [] z col] (cond (empty? z) y (integer? (/ x n)) (recur (inc x) y (rest z)) :default (recur (inc x) (conj y (first z)) (rest z)))))","problem":41,"user":"4e79a143535db169f9c796a2"},{"problem":41,"code":"#(keep-indexed\n    (fn [i x] (if-not (= 0 (mod (inc i) %2)) x)) %1)","user":"54db8ddae4b024c67c0cf767"},{"problem":41,"code":"(fn [coll n] (filter (complement nil?) (map-indexed (fn [idx itm] (if (= 0 (mod (inc idx) n)) nil itm)) coll)))","user":"5dcfdf23e4b0948ae9d9ad43"},{"code":"#(map last (filter (comp not zero? (fn [x] (mod (inc x) %2)) first) (map-indexed list %)))","problem":41,"user":"53976599e4b0b51d73faaeea"},{"problem":41,"code":"(fn [coll n]\n  (for [[i v] (map-indexed vector coll)\n        :when (pos? (rem (inc i) n))]\n    v))","user":"55702081e4b09a3098a52529"},{"code":"(fn [col bad-i]\n\t(keep-indexed #(if-not (zero? (mod (+ %1 1) bad-i)) %2) col))","problem":41,"user":"512b7a05e4b04d059cf1fd14"},{"code":"(fn [s n] (loop [c 1 s s r []] (if (empty? s) r (recur (inc c) (rest s) (if (zero? (mod c n)) r (conj r (first s)))))))","problem":41,"user":"4f0cc259535d0136e6c22310"},{"problem":41,"code":"(fn [l n] (vec (keep-indexed (fn [index item] (if (not= 0 (mod (+ index 1) n)) item)) l)))","user":"556086a2e4b0c656e3ff17c1"},{"code":"(fn drop-nth [s i]\n  (filter #(not= (rem (inc (.indexOf s %1)) i) 0) s))","problem":41,"user":"52b71bd2e4b0c58976d9ad4d"},{"problem":41,"code":"(fn [coll step] (reduce-kv (fn [sum k v]\n                             (if (and (= (mod (+ k 1) step) 0))\n                               sum\n                               (conj sum v)))\n                           [] coll))","user":"595e6c76e4b066ee0a44b043"},{"code":"(fn [c dropn]\n  (reverse (loop [c c\n         n 1\n         newc (empty c)]\n    (if (not (seq c))\n      newc\n      (if (== n dropn)\n        (recur (rest c) 1 newc)\n        (recur (rest c) (inc n) (cons (first c) newc)))))))","problem":41,"user":"4dc1e1e4535d020aff1edf90"},{"code":"(fn [a x] (->> a (partition-all x) (map #(take (dec x) %)) (apply concat)))","problem":41,"user":"500e6c4ee4b04a05d36fcc05"},{"problem":41,"code":"(fn [x n] (keep-indexed\n           #(if \n             (not (zero? \n                   (mod  \n                    (inc %1) \n                    n))) \n             %2) \n           x))","user":"57073037e4b0b0fb43fd0689"},{"code":"(fn [xs x]\n (apply concat (map #(take (dec x) %) (partition x x nil xs)))\n  )","problem":41,"user":"505b0431e4b021387fb8985e"},{"code":"(fn f[x n] (\n  let [ i (map-indexed vector x) ]\n    (for [ [a b] i :when (> (rem (inc a) n) 0) ] b)))","problem":41,"user":"4fccdc75e4b0ee37620e186d"},{"problem":41,"code":"(fn dropEN [cols index]\n  (loop [result (vector) cols cols]\n  (if (< (count cols) index)\n    (concat result cols)\n   (recur (concat result  (take (dec index) cols)) (drop index cols)))))","user":"57465526e4b009280f9f2b61"},{"code":"(fn [l n]\n  (map #(nth l % nil)(remove #(= 0 (mod (inc %) n))(range (count l)))))","problem":41,"user":"50a83315e4b054305ba5a830"},{"code":"(fn [s n] \n  (mapcat #(take (dec n) %)\n    (partition-all n s)))","problem":41,"user":"4e599577535d8a8b8723a29f"},{"problem":41,"code":"(fn drop-nth\n  ([sequence num] (drop-nth sequence num []))\n  ([sequence num acc]\n   (if (empty? sequence)\n     (apply concat acc)\n     (recur (drop num sequence)\n            num\n            (conj acc (take (dec num)\n                            sequence))))))","user":"5461c402e4b01be26fd746a6"},{"problem":41,"code":"(fn [xs n] (mapcat #(if (zero? (mod %1 n)) '() (list %2)) (range 1 (inc (count xs))) xs))","user":"58c2df0ae4b021aa9917ed17"},{"problem":41,"code":"(fn [coll x] (apply concat (map #(take (dec x) %) (partition-all  x coll))))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":41,"code":"#(loop [arr % res [] n 1]\n           (if (nil? arr) res \n             (recur \n               (next arr) \n               (if (= (mod n %2) 0) \n                 res \n                 (conj res (first arr)))\n               (inc n)\n               )))","user":"552f300fe4b076ab5578f7ff"},{"code":"(fn dropnt [a, n]\n  (letfn [(dropwh [ss, cntr, cur]\n          (cond \n            (empty? ss) []\n            (== cntr cur) (dropwh (rest ss) cntr 1)\n            :else (cons (first ss) (dropwh (rest ss) cntr (+ cur 1)))))]\n        (dropwh a n 1)))","problem":41,"user":"4f859146e4b033992c121c46"},{"problem":41,"code":"(fn [coll n]\n  (loop [i 1\n         xs []\n         ys coll]\n    (if (empty? ys)\n      xs\n      (if (= i n)\n        (recur 1 xs (rest ys))\n        (recur (inc i) (conj xs (first ys)) (rest ys))))))","user":"5032748ae4b0e78df07b092f"},{"code":"(fn [x d]\n\t(loop [ls x n 0 res []]\n\t\t(if (= (- d 1) n)\n\t\t\t(recur (drop d ls) 0 res)\t\t\n\t\t\t(if(or(empty? ls) (>= n (count ls))) res\n\t\t\t(recur ls  (inc n) (conj res (nth ls n)))))))","problem":41,"user":"517e6671e4b0329b27fa9f56"},{"problem":41,"code":"(fn drop-nth [x n] (if (empty? x) '() (concat (take (dec n) x) (drop-nth (drop n x) n))))","user":"5acd1a43e4b0e27600da7823"},{"problem":41,"code":"(fn [s n] (->> s (partition-all n)\n                (map #(if (= n (count %)) (butlast %) %))\n                (apply concat)))","user":"5e5b8d92e4b0fd0acd158658"},{"code":"(fn [lst n] \n  (mapcat \n    #(take (dec n) %) \n    (partition-all n lst)))","problem":41,"user":"4f1fd734535d64f6031464a5"},{"code":"#(for [i (range (/ (count %) %2))\n       j (range (dec %2))\n       :let [k (+ (* i %2) j)]\n       :while (< k (count %))]\n   (nth % k))","problem":41,"user":"4e4ae5aa535dc968683fc4d2"},{"code":"(fn [coll n]\n    (mapcat #(take (- n 1) %)\n      (partition-all n coll)\n    )\n  )","problem":41,"user":"531843c1e4b08068f379ed6c"},{"problem":41,"code":"#(flatten (map drop-last (partition %2 %2 [%2] %)))","user":"578e5750e4b0ebec4cfb7581"},{"problem":41,"code":"(fn [coll n] (mapcat #(if (= (count %) n) (butlast %) (identity %)) (partition-all n coll)))","user":"5b632851e4b0c6492753e72d"},{"problem":41,"code":"#(keep-indexed (fn[i item] (if (= (mod (inc i) %2) 0) nil item) ) %)","user":"59fa5773e4b0ca45a743a35e"},{"problem":41,"code":"(fn number41 [xs n]\n  (mapcat #(take (dec n) %) (partition-all n xs)))","user":"54074fc5e4b0addc1aec66b6"},{"code":"(fn [seq n]\n  (flatten (map #(take (- n 1) %) (partition-all n seq))))","problem":41,"user":"4fd65b2be4b0d4de60cee37e"},{"problem":41,"code":"(fn [a b]\n\n  (apply concat(partition-all (dec b) b a))\n\n )","user":"53d5d43ce4b0e771c302544d"},{"code":"(fn [s n]\n  (reverse\n   (loop [acc '() xs s i 1]\n    (if (empty? xs) acc\n      (recur (if (= 0 (mod i n)) acc (cons (first xs) acc)) (rest xs) (inc i))))))","problem":41,"user":"52199105e4b0c4ef0be82ff9"},{"code":"(fn [l n] (reverse (loop [acc () c 1 s1 l] \n                      (if (empty? s1)\n                        acc\n                          (if (= c n)\n                            (recur acc 1 (rest s1))\n                            (recur (cons (first s1) acc) (inc c) (rest s1))\n                        )))))","problem":41,"user":"50956c2be4b087f34d351ab2"},{"problem":41,"code":"(fn [col i]\n  (keep-indexed #(if (not= (mod (inc %1) i) 0) %2) col))","user":"576c2ecae4b07c67f59d1fbb"},{"code":"(fn ex41 [col n]\n  (map #(second %) (filter \n    #(not (zero? (rem (inc (first %1)) n))) (map-indexed vector col))))","problem":41,"user":"4e539f7e535d8a8b8723a272"},{"code":"(fn p41 [coll n]\n  (flatten (map #(if (= (count %) n)\n          (drop-last %)\n          (identity %))\n          (partition-all n coll)))\n)","problem":41,"user":"51750fc5e4b07031762f2ee6"},{"code":"#(keep-indexed (fn [idx itm] (if-not (= (rem (inc idx) %2) 0) itm)) %)","problem":41,"user":"4eb41884535d7eef3080735d"},{"code":"(fn[a-seq n]\n  (let [a-sym (gensym)]\n    (mapcat #(filter (fn[x] (not= x a-sym))\n                          (drop-last %))\n       (partition n n (repeat a-sym) a-seq))))","problem":41,"user":"4e58bcd4535d8a8b8723a296"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (if (seq xs)\n    (let [[head [_ & tail]] (split-at (dec n) xs)]\n      (concat head (drop-nth tail n)))))","user":"569d2283e4b0542e1f8d1474"},{"problem":41,"code":"(fn drop-every-nth\n  ([s i]\n    (drop-every-nth s i []))\n  ([s i acc]\n    (cond\n      (empty? s) (flatten acc)\n      :else (drop-every-nth (drop i s) i (conj acc (take (dec i) s))))))","user":"582cbf48e4b051871117bfa6"},{"problem":41,"code":"(fn [s n]\n    (keep-indexed #(when (not= 0 (rem (inc %1) n)) %2) s))","user":"603d5f2ae4b0d5df2af2230c"},{"code":"(fn [l n]\r\n  (loop [l1 l\r\n         res '()]\r\n    (if (empty? l1) \r\n      res\r\n\t  (recur (drop n l1) (concat res\r\n                                 (take (dec n) l1))))))","problem":41,"user":"50576483e4b001218172198b"},{"problem":41,"code":"(fn [s m]\n  (for [x (map vector (range (count s)) s)\n        :when (not= 0 (mod (inc (first x)) m))]\n    (last x)))","user":"564066dee4b08d4f616f5ee2"},{"problem":41,"code":"(fn f \n  [coll num]\n  (filter (complement nil?) (map-indexed #(if (= (mod (+ %1 1) num) 0) nil %2) coll))\n  )","user":"55bd87ede4b01b9910ae29fe"},{"problem":41,"code":"(fn dropnth[s n](when (seq s) (concat (take (dec n) s) (dropnth (drop n s) n))))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn drop-nth [vec n]\n  (if (empty? vec)\n      '()\n      (concat (take (- n 1) vec)\n              (drop-nth (drop n vec) n))))","problem":41,"user":"4e6093c9535d8ccf87e9fe54"},{"problem":41,"code":"(fn remove-nth [s n]\n\t((fn f [ret i s]\n\t\t(if (empty? s)\n\t\t\tret\n\t\t\t(if (= (mod i n) 0)\n\t\t\t\t(f ret (inc i) (rest s))\n\t\t\t\t(f (conj ret (first s)) (inc i) (rest s))\n\t\t\t)\n\t\t)\n\t) [] 1 s)\n)","user":"53a94b63e4b047364c044434"},{"code":"#(for [i (range 1 (inc (count %1))) :when (not= 0 (mod i %2))] (nth %1 (dec i)))","problem":41,"user":"52747090e4b03e8d9a4a74a5"},{"problem":41,"code":"(fn [x y] (loop[i 0 res []]\n                     (if(< i (count x)) (if(or (not (= (rem (inc i) y) 0)) (= i 0)) (recur (inc i) (conj res (x i))) (recur (inc i) res)) res)))","user":"5971763fe4b01722bebd4c72"},{"problem":41,"code":"(fn [col n]\n  (for [x (range (count col)) :when (not= (mod (+ x 1) n) 0)]\n     (nth col x)))","user":"5766fbb7e4b0a07e8fc180b6"},{"problem":41,"code":"(fn [ x n ]\n\n(filter  #(not=(mod (inc (.indexOf x %1) ) n) 0)   x ) \n    \n\n    );END: fn","user":"56a358d0e4b0542e1f8d14c9"},{"problem":41,"code":"(fn [xs n]\n  (loop [xs xs cnt 1 result '()]\n    (cond\n       (empty? xs) (reverse result)\n       (zero? (mod cnt n)) (recur (rest xs) (inc cnt) result)\n       :else (recur (rest xs) (inc cnt) (conj result (first xs))))))","user":"55efb51ee4b066087aa9453b"},{"problem":41,"code":"(fn drpnth [xs x] ((fn f [as n i] (if (empty? as)\n                                    ()\n                                    (if (= n i)\n                                      (f (rest as) n 1)\n                                      (cons (first as) (f (rest as) n (+ i 1)))))) xs x 1))","user":"53c051a5e4b0c98a41f5ccae"},{"problem":41,"code":"(fn [coll n]\n; (defn xxx [coll n]\n  (loop [coll coll acc []]\n    (if (not (empty? coll))\n      (recur (drop n coll) (concat acc (take (dec n) coll)))\n      acc)))","user":"5433eecae4b0b6b47310fce6"},{"code":"(fn dropNth \n  ([arr N]\n    (dropNth arr N 1))\n  ([arr N i]\n    (cond\n      (empty? arr)\n        []\n      (= (mod i N) 0)\n        (dropNth (rest arr) N (inc i))\n      :else\n        (cons (first arr) (dropNth (rest arr) N (inc i))))))","problem":41,"user":"51ccc179e4b02254fc794879"},{"code":"#(mapcat \n          (partial take (dec %2))\n          (partition %2 %2 '() %1))","problem":41,"user":"5183f5d7e4b02826a645f393"},{"problem":41,"code":"(fn [coll n]\n  (flatten\n   (map #(take (- n 1) %)\n        (partition n n [] coll))))","user":"5b1d61b3e4b03cfeda66ecfe"},{"problem":41,"code":"(fn [seq drop-n] (loop [suffix seq dropped [] n 1] (if (empty? suffix) dropped (recur (rest suffix) (if (= n drop-n) dropped (conj dropped (first suffix))) (if (= n drop-n) 1 (inc n))))))","user":"5e1cc888e4b0dc959400853d"},{"code":"(fn [list n]\n  (flatten (map #(take (- n 1) %) \n    (partition-all n list))))","problem":41,"user":"4e2ef93d535deb9a81d77f0f"},{"problem":41,"code":"#(mapcat (partial take (dec %2)) (partition %2 %2 nil %))","user":"548cd637e4b0e286459a1210"},{"problem":41,"code":"(fn dropnthseq2\n  [inp ind]   \n  (let [c (count inp)\n        indx1 (filter (fn [x]\n              (= (rem x ind) 0))\n              (range (inc c)))\n\n        indx2 (into [] (filter (fn [y]\n                       (and (>= y ind) (<= y c)))\n                               indx1))\n        \n        indx  (into [] (map #(dec %) indx2))\n        elem (into [] (map #(get inp %) indx))\n        final_res (into [] (remove (set elem) inp))\n        ]\n      final_res )\n  )","user":"5b98f174e4b0c0b3ffbd4ac1"},{"problem":41,"code":"#(flatten (map-indexed (fn [i x] (if (= (mod (+ i 1) %2) 0) [] x)) %))","user":"56992162e4b0542e1f8d143c"},{"code":"(fn [xs n]\r\n   (filter\r\n      #(not (nil? %))\r\n      (map-indexed\r\n        (fn [i x] (when (not (zero? (mod (+ i 1) n))) x))\r\n        xs)))","problem":41,"user":"4dd52e29535dae65d5c462e5"},{"code":"(fn [x n] (flatten (map drop-last (partition n n [0] x))))","problem":41,"user":"52f9ce6de4b047fd55836ff0"},{"problem":41,"code":"(fn [seq n]\n    (->> (partition-all n seq)\n         (map #(take (dec n) %))\n         (flatten)))","user":"554e4d65e4b00713264bd993"},{"code":"#(loop [in %1 comp []]\n  (if (= in '())\n    comp\n    (recur (drop %2 in)\n           (into comp (take (dec %2) in)))))","problem":41,"user":"4faec810e4b081705acca24e"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (->> coll\n       (partition-all n)\n       (mapcat (partial take (dec n)))))","user":"5b602a66e4b0c6492753e6fc"},{"code":"(fn [lst x] (filter #(if (= 0 (rem (inc (.indexOf lst %)) x)) false true) lst))","problem":41,"user":"516dc88ae4b046df6fbb76a1"},{"problem":41,"code":"(fn\n  [lst n]\n  (for [i (filter #(not= 0 (rem % n)) (range 0 (inc (count lst))))]\n    (nth lst (- i 1))))","user":"59dfd369e4b08badc2a0c4dd"},{"problem":41,"code":"#(apply concat \n        (partition-all \n         (dec %2) %2 %1))","user":"55d2dd27e4b0e31453f64a5b"},{"problem":41,"code":"(fn [coll item]\n  (keep-indexed\n    #(if (not= 0 (mod (inc %1) item)) %2)\n    coll))","user":"5f081f6de4b0cf489e8d7f5a"},{"problem":41,"code":"(fn [l n]\n   (->> l\n        (partition n n nil)\n        (mapcat (partial take (dec n)))))","user":"5a3b5cfde4b001c08efc0cd4"},{"problem":41,"code":"#(map second (filter (fn [[k v]] (or (= 0 k) (not= 0 (mod (inc k) %2)))) (map-indexed (fn [k v] [k v]) %1)))","user":"57642916e4b0994c1922fbee"},{"problem":41,"code":"(fn f [coll n] (when-let [s (seq coll)]\n                 (concat (take (dec n) s) (f (drop n s) n))))","user":"5d629ed9e4b0c9e5857d501d"},{"problem":41,"code":"(fn drop-nth [lst n] (map #(nth lst %) (filter #(< (rem % n) (- n 1)) (range (count lst)))))","user":"4dd5fdb0535d2dad7130b5c5"},{"problem":41,"code":"#(apply concat() (partition-all (dec %2) %2 %))","user":"57604a87e4b08062f99a4e91"},{"code":"(fn f[coll a]\n  (let [help-seq\n          (map #(if (zero? (mod % a)) 1 0)\n                (range 1 (inc (count coll))))]\n       (filter #(not (nil? %)) (map (fn t[a b] \n                (if (zero? b) a))\n            coll help-seq))))","problem":41,"user":"4e53bf5e535d8a8b8723a275"},{"problem":41,"code":"(fn [coll n] (mapcat #(if (= n (count %)) (butlast %) %) (partition n n [] coll)))\n;;(fn [coll n] (reduce concat (partition-all (dec n) n coll)))\n;;(fn [coll n] (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) coll))","user":"55647a31e4b0c656e3ff1808"},{"problem":41,"code":"(fn [x y]\n  (loop [tot '() x x y y]\n    (if (empty? x)\n      (flatten tot)\n      (recur (concat (conj (take (- y 1) x) tot)) (drop y x) y))))","user":"54e24a05e4b024c67c0cf7ce"},{"problem":41,"code":"(fn [l n]\n  (loop [r l, a [], i 0]\n    (if (empty? r)\n      a\n      (if (< i (dec n))\n        (recur (rest r) (conj a (first r)) (inc i))\n        (recur (rest r) a 0)))))","user":"55e87696e4b0121d4835fd93"},{"code":"(fn [coll n] (keep-indexed #(when (not= 0 (mod (inc %1) n)) %2) coll))","problem":41,"user":"51ae350fe4b09397d5109790"},{"problem":41,"code":"(fn [x y]\n  (flatten (partition-all (dec y) y x)))","user":"5ffd3422e4b074f607df65f7"},{"problem":41,"code":"(fn [coll n]\n  (->> (map-indexed list coll)\n   \t(remove #(= (dec n) (mod (first %) n)))\n   \t(map second)))","user":"59d8f23ae4b0ef0a1e9b5c49"},{"problem":41,"code":"(fn [coll n] \n  (flatten \n   (partition-all (- n 1) n coll)))","user":"53e241a6e4b036ad0777e3f0"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(if (= (dec n) (mod %1 n)) nil %2) xs))","user":"54dae16de4b024c67c0cf758"},{"problem":41,"code":"(fn drop-every [coll n] \n  (keep-indexed (fn [i v] (if-not (zero? (rem (inc i) n)) v)) coll))","user":"602d5eade4b0d5df2af22279"},{"code":"#(into (empty %) (reduce concat (partition (dec %2) %2 '() %1)))","problem":41,"user":"4fa38e3fe4b081705acca190"},{"code":"#(flatten\n  (map (partial take (dec %2))\n       (partition %2 %2 () %)))","problem":41,"user":"4f38b7d9e4b0e243712b1ee0"},{"problem":41,"code":"#(mapcat (fn [a]\n           (if (= (count a) %2)\n             (butlast a)\n             a))\n         (partition-all %2 %1))","user":"5712854ce4b07c98581c3a89"},{"problem":41,"code":"(fn\n  [xs n]\n  (->> xs\n       (partition (dec n) n nil)\n       flatten))","user":"5484c3b2e4b0e286459a11a2"},{"problem":41,"code":"(fn [col n]\n  (keep-indexed #(if (< 0 (mod (inc %1) n)) %2) col)\n)","user":"57c62aece4b05aa3c4741cf1"},{"problem":41,"code":"#(remove nil? (map-indexed (fn [idx x] \n                                  (when (not= 0 (rem (inc idx) %2))\n                                    x))\n                     %1))","user":"5582dfb6e4b05c286339e10d"},{"problem":41,"code":"#(loop [s %1\n          n %2\n          c 1\n          r []]\n    (if (empty? s)\n      r\n      (recur (rest s) \n             n\n             (inc c) \n             (if (= 0 (mod c n))\n               r\n               (conj r (first s))))))","user":"579aff09e4b05b1deef9ade7"},{"problem":41,"code":"#(mapcat (partial take (- %2 1)) (partition %2 %2 [] %1))","user":"53e3e353e4b036ad0777e406"},{"problem":41,"code":"#(loop [xs %1 n %2 i 1 total []]\n   (if (empty? xs)\n     total\n     (if (= (rem i n) 0)\n       (recur (rest xs) n (inc i) total)\n       (recur (rest xs) n (inc i) (conj total (first xs))))))","user":"549e5e52e4b0f3d1d8e70f9e"},{"problem":41,"code":"(fn drop-every [seq n] \n  ((reduce \n   (fn [[i acc] elem] \n     (if (= (mod (+ 1 i) n) 0) \n       [(+ 1 i) acc] \n       [(+ 1 i) (conj acc elem)])) \n   [0 []] \n   seq) 1))","user":"563b5dc9e4b0bfe05bf1180f"},{"problem":41,"code":"#(keep-indexed (fn [index item] \n                 (if-not (zero? (mod (inc index) %2)) \n                   item)) \n               %1)","user":"54a96a15e4b09f271ff37cad"},{"problem":41,"code":"(fn dropItLikeItsHot [coll Nth]\n  (mapcat #(if (= (count %) Nth) (butlast %) %) (partition Nth Nth [] coll)))","user":"57131dfbe4b07c98581c3a98"},{"code":"(fn [s n] (keep-indexed #(if (= (mod %1 n) (dec n)) nil %2) s))","problem":41,"user":"52caeb25e4b071a8d36bd3e7"},{"code":"(fn drop-nth\n  [coll n]\n  (lazy-seq\n   (let [s (take (dec n) coll)]\n     (when-not (empty? s)\n       (concat s (drop-nth (drop n coll) n))))))","problem":41,"user":"52479487e4b05ef8e38e6373"},{"code":"(fn ! [s n]\n  (filter (comp not nil?)\n          (map-indexed #(if (= (rem (+ %1 1) n)\n                                0)\n                            nil %2)\n                        s)))","problem":41,"user":"4e8a460e535d65386fec2109"},{"problem":41,"code":"(fn\n  [items n]\n  (mapcat\n   #(take (dec n) %)\n   (partition-all n items)))","user":"5da05bcce4b000c986472bd0"},{"problem":41,"code":"(fn dropn [lst n] \n  (letfn \n    [(dn [lst n i]\n      (if (= lst '())\n        '()\n        (if (= n i)\n          (dn (rest lst) n 1)\n          (cons (first lst) (dn (rest lst) n (inc i)))))\n    )]\n    (dn lst n 1)))","user":"53ff8c31e4b0de5c41848603"},{"code":"(fn [coll n]\n  (->> coll\n       (map-indexed #(vector\n                      (zero? (mod (inc %1) n))\n                      %2))\n       (remove #(first %))\n       (map second)))","problem":41,"user":"4dada426c9a9d6ed2a99dc57"},{"problem":41,"code":"(fn [x n] (flatten (map (partial take (- n 1)) (partition-all n x))))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn [s n]\r\n  (map first\r\n    (filter #(pos? (rem (second %) n))\r\n      (map vector s (iterate inc 1)))))","problem":41,"user":"50901b2ee4b0ea685a20f774"},{"problem":41,"code":"#(keep-indexed\n  (fn [i x]\n    (if (not= 0 (rem (inc i) %2))\n      x)) %1)","user":"52cda397e4b07d0d72b2737a"},{"code":"(fn [col n] \n  (->> col\n    (map vector (iterate inc 1))\n    (filter (fn [[i _]] (not= 0 (rem i n))))\n    (map second)))","problem":41,"user":"504e71cbe4b0f6ff3350c4b3"},{"code":"(fn drop-nth [coll n] (if (empty? coll) [] (concat (take (dec n) coll) (drop-nth (drop n coll) n))))","problem":41,"user":"50723bbae4b0e3170b5a868b"},{"problem":41,"code":"(fn stuff [seq n]\n  (loop [i 0\n         result []]\n    (println i result)\n    (if (= i (count seq))\n      result\n      (if (= 0 (mod (inc i) n))\n        (do\n          (println (str \"not it at i:\" i))\n          (recur (inc i) result))\n        (do\n          (println (str \"taking char at i:\" i \" (\" (get seq i) \")\"))\n          (recur (inc i) (conj result (get seq i))))))))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":41,"code":"(fn [col n]\n  (->> col\n    (map-indexed (fn [idx itm] [(inc idx) itm]))  \n    (filter (fn [x] ((comp not zero?) (rem (first x) n))))\n    (map second)))","user":"5bd7b8b8e4b0ed4b8aab4bc6"},{"problem":41,"code":"(fn  [coll n] (flatten (partition-all (dec n) n coll)))","user":"534fa9dae4b084c2834f4acf"},{"problem":41,"code":"(fn [coll n]\n   (vec (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) coll)))","user":"5a07fefee4b01bb0ae8afde5"},{"problem":41,"code":"(fn\n  [items n]\n  (mapcat #(take (- n 1) %) (partition-all n items)))","user":"4fe899a6e4b07c9f6fd12c54"},{"problem":41,"code":"(fn [l n]\n  (let [f (fn func [l n]\n            (if (empty? l) nil\n              (cons (take (dec n) l) (func (drop n l) n))))]\n    (flatten (f l n))))","user":"54c8ac49e4b045293a27f64e"},{"problem":41,"code":"(fn [coll n]\n    ((fn [result index n remainder]\n         (let [div-remainder (mod index n)\n               new-remainder (conj result (first remainder))]\n             (if (not-empty remainder)\n                 (recur (if (= div-remainder 0) result new-remainder)\n                        (inc index)\n                        n\n                        (rest remainder))\n                 result))) [] 1 n coll))","user":"56491050e4b0284900eef639"},{"problem":41,"code":"(fn [x y] (mapcat (partial take (dec y)) (partition-all y x)))","user":"56941e48e4b0dcc4269f410d"},{"code":"(fn [col ind] (for [i (range (count col)) :let [x (get col i)] :when (not= 0 (mod (inc i) ind))] x))","problem":41,"user":"524af160e4b09eba1c0223bb"},{"code":"(fn [xs c] \n  (filter #(not (nil? %)) (map-indexed (fn [idx itm] (if (= 0 (mod (inc idx) c)) nil itm ) ) xs)))","problem":41,"user":"4f038ed6535dcb61093f6b24"},{"code":"(fn [lista tamaño](flatten (map #(if (= (count %) tamaño) (butlast %) %) (partition-all tamaño lista))))","problem":41,"user":"4dfd7ecf535d04ed9115e783"},{"code":";;new and improved version with a cat mapping and leveraging partial to obviate the need for nested anons\n(fn [coll n] (mapcat \n               (partial take (dec n)) \n                 (partition-all n coll)))\n\n;;old version\n#_(fn [coll n] \n  (flatten (map #(take (dec n) %) (partition-all n coll))))","problem":41,"user":"50e1bdd8e4b019fc399ce17f"},{"problem":41,"code":"(fn dr\n  ([xs n] (dr xs n (dec n)))\n  ([xs n left] (cond\n                (empty? xs) '()\n                (zero? left) (dr (rest xs) n)\n                :else (cons (first xs) (dr (rest xs) n (dec left))))))","user":"5f2d6787e4b033932238a66d"},{"problem":41,"code":"(fn f [coll x]\n  (loop [i 1 sx coll y []]\n    (if (not (empty? sx))\n      (if (not= 0 (mod i x))\n        (recur (inc i) (rest sx) (conj y (first sx)))\n        (recur (inc i) (rest sx) y))\n      y)))","user":"53abf519e4b047364c044456"},{"problem":41,"code":"(fn [coll v] (filter #(not= 0 (mod (inc (.indexOf coll %)) v)) coll))","user":"5f1af439e4b0f565ad998257"},{"code":"(fn [x n]\n  (let [n (dec n)]\n    (letfn [(chunks [l] (let [[chnk tail] (split-at n l)]\n                          (cons chnk\n                                (if (empty? tail) nil\n                                  (lazy-seq (chunks (rest tail)))))))]\n      (apply concat (chunks x)))))","problem":41,"user":"515ead6be4b049add99a053e"},{"problem":41,"code":"#(vec ( flatten (partition-all (dec %2)  %2 %)))","user":"567b2f20e4b05957ce8c61a2"},{"problem":41,"code":"(fn [coll n]\n  (let [n1 (dec n) f #(if (not= n1 (rem %1 n)) %2)]\n    (keep-indexed f coll)))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":41,"code":"(fn [l x]\n  (loop [i 0 r '()]\n    (if (>= i (count l) )\n      (reverse r)\n      (if (= (mod i x) (dec x))\n        (recur (inc i) r)\n        (recur (inc i) (conj r (nth l i)))\n        )\n      )\n    )\n  )","user":"5d94fdf9e4b0d3f9b434ad2b"},{"code":"#(loop [todo %1 n %2 acc []]\n  (cond (empty? todo) acc\n        (= 1 n) (recur (next todo) %2 acc)\n        true (recur (next todo)\n                    (dec n)\n                    (conj acc (first todo)))))","problem":41,"user":"4fa6d532e4b081705acca1be"},{"problem":41,"code":"#(for [el (map-indexed (fn [ind el2] [(inc ind) el2]) %1)\n        :when (pos? (rem (el 0) %2))]\n   (el 1))","user":"56fa3f7ae4b07572ad1a88bf"},{"code":"#(remove (set (take-nth %2 (cons 0 %))) %)","problem":41,"user":"4e307313535deb9a81d77f14"},{"problem":41,"code":"(fn drop-every-nth [lst step]\n  (map #(nth lst %)\n    (map #(dec %)\n      (remove #(zero? (rem % step)) (range (inc (count lst))))\n    )\n  )\n)","user":"569e3175e4b0542e1f8d1484"},{"problem":41,"code":"#((fn foo[l n i]\r\n      (if (empty? l)\r\n        '()\r\n        (if (zero? (mod i n))\r\n          (foo (rest l) n 1)\r\n          (conj (foo (rest l) n (inc i)) (first l))))) %1 %2 1)","user":"57a9b2dbe4b0a96607956233"},{"problem":41,"code":"(fn [s n]\n  (map #(nth % 0)\n    (filter #(not= (rem (nth % 1) n) 0) \n       (map vector s (range 1 (inc (count s)))))))","user":"5813e208e4b0f478707a061b"},{"problem":41,"code":"(fn [col n]\n  (apply concat(partition-all (dec n) n col)))","user":"58e5e585e4b056aecfd47ca2"},{"problem":41,"code":"(fn foo\n  ([coll n counter res]\n   (cond\n    (empty? coll)\n     res\n    (= counter n)\n     (foo (rest coll) n 1 res)\n    :else\n    (foo (rest coll) n (inc counter) (conj res (first coll)))))\n  ([coll n]\n   (foo coll n 1 [])))","user":"53322cece4b019098a6f8b73"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(when (not= 0 (rem (+ %1 1) n)) %2) coll))","user":"602c30e3e4b0d5df2af2226f"},{"problem":41,"code":"(fn [list n] \n    (apply concat \n        (map-indexed \n            (fn [index elem] \n                (if (= 0 ( mod (+ 1 index ) n ))\n                []\n                [ elem ])\n            )\n            list\n        )\n    )\n)","user":"5b67f0fbe4b0c6492753e76d"},{"problem":41,"code":"(fn [col drop-each]\n   (map second (filter\n                 (fn [indexed-item]\n                   (not= (mod (first indexed-item) drop-each) 0))\n                 (map-indexed\n                   (fn [ind val] [(inc ind) val]) col))))","user":"50a2e3fbe4b029e8bace3629"},{"code":"(fn [lst n]\n  (keep-indexed (fn [idx item]\n                  (if (zero? (mod (inc idx) n))\n                      nil\n                      item))\n                lst))","problem":41,"user":"52f2b450e4b05e3f0be25efd"},{"code":"(fn dropnth [x n]\n    \"Drops every nth item of a vector x.\"\n    (if (< (count x) n)\n      x\n      (loop [counter 0, result []]\n        (if (< counter (count x))\n          (if (= (mod counter n) (- n 1))\n            (recur (inc counter) result)\n            (recur (inc counter) (conj result (get (vec x) counter))))\n          result))))","problem":41,"user":"532727bae4b09d4e7a9b54fa"},{"code":"#(\n   loop [i 1 new_seq []]\n    (if (= (inc (count %1)) i)\n      new_seq\n      (recur (inc i)\n             (if (zero? (mod i %2))\n               new_seq\n               (conj new_seq (nth %1 (dec i)))\n               )\n             )\n      )\n )","problem":41,"user":"4ea31da2535d7eef308072c1"},{"problem":41,"code":"(fn drop-every-nth\n    ([coll n]\n     (drop-every-nth coll n 1))\n    ([coll n i]\n     (lazy-seq\n      (when-let [s (seq coll)]\n        (if (= i n)\n          (drop-every-nth (rest s) n 1)\n          (cons (first s) (drop-every-nth (rest s) n (inc i))))))))","user":"4dfe5a93535d04ed9115e786"},{"code":"(fn [coll n]\r\n  (-> (concat \r\n         (map #(drop-last %) (partition n coll))\r\n         (take-last (rem (count coll) n) coll))\r\n      (flatten)))","problem":41,"user":"4dd4f0a8535dae65d5c462e4"},{"problem":41,"code":"(fn [s x] (let [ parts (partition-all x s) ] \n\t(mapcat (fn [y]  (if(= (count y) x) (drop-last y) y) ) parts ) ))","user":"57af249fe4b0fbc9809a272b"},{"code":"(fn [v n]\n  (vec\n    (flatten\n      (map #(take (- n 1) %)\n           (partition-all n v)))))","problem":41,"user":"5069c09be4b01dc6af13f837"},{"problem":41,"code":"(fn dropn [s n]\n  (flatten \n   (map #(if (= n (count %)) (butlast %) %) \n       (partition n n '() s))))","user":"55536a8ae4b0deb715856e03"},{"code":"(fn [coll n] (filter identity (map-indexed #(if (not (= 0 (mod (inc %) n))) %2) coll)))","problem":41,"user":"5260341ee4b03e8d9a4a7034"},{"code":"(fn [l drop] (filter (fn [i] (not (zero? (mod (inc (.indexOf l i)) drop)))) l))","problem":41,"user":"509c2c55e4b085ae113522ab"},{"code":"(fn [s n]\n  (mapcat #(take (dec n) %) (partition-all n s)))","problem":41,"user":"524ab5f2e4b09eba1c02239d"},{"code":"(fn [sec pos]\n  (loop [i 1\n         x sec\n         acc []]\n    ( if (seq x)\n    (if (= 0 (rem i pos))\n      (recur (inc i)\n             (rest x)\n             acc)\n      (recur (inc i)\n             (rest x)\n             (conj acc (first x))))\n      acc)))","problem":41,"user":"522048b3e4b0e6c71e0c0c16"},{"problem":41,"code":"(fn [col i]\n    (keep-indexed (fn [idx itm] \n                    (if\n                       (= (mod (inc idx) i) 0)\n                      nil\n                     itm\n                      )\n                    )\n                  col)\n    )","user":"52c911dde4b0c2d177d6213a"},{"problem":41,"code":"#(loop [c1 %1 c2 %2 idx 1 rt[]]\n   (if(empty? c1)\n     rt\n     (recur (rest c1) c2 (if(= idx c2) 1 (inc idx)) (if(= idx c2) rt (conj rt (first c1))) )\n     )\n   )","user":"5d270111e4b092dab7f59c62"},{"code":"(fn [lst n]\n    (:l \n     (reduce \n      #(if (=(:c %1) n)\n\t   (assoc %1 :c 1)\n\t (assoc %1 :c (inc (:c %1)):l (conj (:l %1) %2))) {:l [] :c 1} lst)))","problem":41,"user":"52aa16d1e4b0c58976d9ac5a"},{"code":"(fn f [l n] \n  (if (empty? l)\n     l \n     (concat (take (- n 1) l) (f (drop n l) n))))","problem":41,"user":"4f067029535dcb61093f6c12"},{"code":"(fn [coll n]\n  (loop [input coll output [] i 1]\n    (if (empty? input)\n      output\n      (if (= (rem i n) 0)\n        (recur (rest input) output (inc i))\n        (recur (rest input) (concat output [(first input)]) (inc i))))))","problem":41,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"(fn [xs c]\n  (reduce (fn [res ys] \n            (if (= c (count ys)) \n              (concat res (butlast ys)) \n              (concat res ys))) \n          []\n          (partition c c [] xs)))","problem":41,"user":"4e71a12c535d5021c1a8964f"},{"code":"(fn [a b]\n  ((fn myNMate [data nth cnt result]\n    (if (empty? data)\n      result\n      (myNMate\n        (rest data)\n        nth\n        (inc cnt)\n        (if (= (mod cnt nth) 0)\n          result\n          (conj result (first data))\n        )\n      )\n    )\n  ) a b 1 [])\n)","problem":41,"user":"4f16d6ed535d64f60314644f"},{"problem":41,"code":"(fn fun [a k]\n  (cond\n   (> (count a) k) (concat (subvec a 0 (- k 1)) (fun (subvec a k (count a)) k))\n   (= (count a) k) (subvec a 0 (- k 1))\n   :else a))","user":"549cd548e4b0f3d1d8e70f91"},{"code":"#(mapcat (partial take (dec %2)) (partition %2 %2 [] %1))","problem":41,"user":"4ecf42b4535d1f5ad70dba3c"},{"problem":41,"code":"(fn drop-nth\n  ([args n]\n   (drop-nth args n n []))\n  ([args n start dropped]\n   (if (empty? args)\n     dropped\n     (if (= n 1)\n       (drop-nth (rest args) start start dropped)\n       (drop-nth (rest args) (dec n) start (conj dropped (first args)))))))","user":"5d896a64e4b0915913b1d3b8"},{"problem":41,"code":"(fn drop-every\n  [coll pos]\n      (let [head (take (dec pos) coll)\n            tail (drop pos coll)]\n        (when-not (empty? head)\n          (lazy-cat head (drop-every tail pos)))))\n\n;; another solution using HOFs and inspired by [partition-all] func\n#_(fn drop-every-nth \n  [coll pos]\n  (mapcat #(take (dec pos) %) (partition-all pos coll)))","user":"5553b729e4b0deb715856e05"},{"code":"(fn [x,y] (remove nil? ( map-indexed #(if (= (dec y) (rem % y)) nil %2) x)))","problem":41,"user":"4ec0c7ba535dfed6da9c6da4"},{"problem":41,"code":"(fn [reseq _seq indx]\n\t(let [needval (take (- indx 1) _seq)\n\t\t  restval (nthnext _seq indx)]\n\t\t  (if (empty? restval)\n\t\t  \t(concat reseq needval)\n\t\t  \t(recur (concat reseq needval) restval indx)))) []","user":"59b9e669e4b0a024fb6ae3db"},{"problem":41,"code":"(fn dn [xs n]\n  (if\n    (< (count xs) n)\n    xs\n    (concat (take (- n 1) xs) (dn (drop n xs) n))))","user":"5e98e8a9e4b0157ca96647dc"},{"code":"#(mapcat (partial take (dec %2)) (partition %2 %2 () %))","problem":41,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"(fn [a x]\n  (keep-indexed #(if (not= 0 (mod (inc %) x)) %2) a))","problem":41,"user":"53973e7be4b0b51d73faaee6"},{"problem":41,"code":"(fn [v n] (keep-indexed (fn [x i] (if (pos? (mod (inc x) n)) i)) v))","user":"4f070ce6535dcb61093f6c1e"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed #(when (< 0 (rem (inc %1) n))\n                   %2)\n                s))","user":"565f8fd2e4b068f2fe63dc41"},{"code":"(fn [xs n]\n  (loop [i 1 xs xs accum []]\n    (cond (empty? xs) accum\n          (zero? (mod i n)) (recur (inc i) (rest xs) accum)\n          :else (recur (inc i) (rest xs) (conj accum (first xs))))))","problem":41,"user":"4e50b67b535dc968683fc4ed"},{"problem":41,"code":"(fn [coll n]\n(->> coll \n  (partition-all n)\n  (map #(take (dec n) %))\n  (flatten)))","user":"5272645de4b03e8d9a4a742c"},{"problem":41,"code":"(fn [se n]\n  (keep-indexed (fn [index item] (if (not= (mod index n) (dec n)) item)) se))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":41,"code":"#(->> %1\n   (map-indexed vector)\n   (filter (fn [x] (not (= 0 (mod (+ 1 (get x 0)) %2)))))\n   (map (fn [y] (get y 1)))\n   (flatten))","user":"55096255e4b06e50f9beb116"},{"problem":41,"code":"(fn [coll n]\n  (let [indexes (range (count coll))\n        nth? #(= 0 (mod (+ 1 %) n))\n        remove-nths (fn [acc i] (if (nth? i) acc (conj acc (nth coll i))))]\n    (reduce remove-nths [] indexes)))","user":"5c7d5a0ce4b0d597f478caab"},{"code":"(fn this\n  ([xs n] (this xs n []))\n  ([xs n acc]\n    (if (empty? xs)\n      acc\n      (recur (drop n xs) n (into acc (take (dec n) xs))))))","problem":41,"user":"4f2e0369e4b0d6649770a064"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (mapcat\n   #(if (< (count %) n)\n      %\n      (drop-last %))\n   (partition-all n coll)))","user":"5479c58de4b0c51c1f4d72c7"},{"code":"(fn [coll n]\n   (mapcat (fn [x] (if (= (count x) n) (drop-last x) x)) (partition-all n coll))\n   )","problem":41,"user":"529d4f4be4b04e0c58e87b79"},{"problem":41,"code":"(fn [coll n]\n  (flatten\n    (concat\n      (map #(drop-last %) (partition n coll))\n      (take-last (rem (count coll) n) coll))))","user":"547a714ae4b0c51c1f4d72cc"},{"problem":41,"code":"(fn drop-every-nth\n  [coll n]\n  (keep-indexed (fn [index item]\n                  (when (not (zero? (mod (inc index) n)))\n                    item))\n                coll))","user":"56180d83e4b06b1bb2182a18"},{"problem":41,"code":"(fn [coll n]\n  (map second (filter (fn [x] (not= (mod (first x) n) 0)) (map-indexed (fn [id it] [(+ id 1) it]) coll)))\n  )","user":"5a2e39fce4b09cafd31c7f77"},{"code":"(fn drop-every2\n  [ls n]\n  (mapcat (partial take (- n 1))\n       (partition-all n ls)))","problem":41,"user":"52dd6cc8e4b09f7907dd13e2"},{"code":"#(keep-indexed (fn [x i] (if (not= 0 (mod (inc x) %2)) i)) %)","problem":41,"user":"4ec812d9535d6d7199dd36f0"},{"code":"(fn dropevery ([myseq dropnum] (dropevery myseq dropnum '()))\n              ([myseq dropnum acc] (if (seq myseq) (recur \n                                                    (drop dropnum myseq) dropnum \n                                                    (concat acc (take (dec dropnum) myseq) )\n                                                          ) \n                                     acc\n                                     ) )\n                                                          )","problem":41,"user":"4fbd6210e4b081705acca303"},{"problem":41,"code":"(fn\n            [s n]\n            (reduce #(concat %1 (take (- n 1) %2))\n                    []\n                    (partition-all n s))\n            )","user":"5d05fdece4b0cc9c915881e8"},{"code":"(fn xe [l n]\n  (if (< (count l) n)\nl\n(concat (take (- n 1) l) (xe (drop n l) n))\n))","problem":41,"user":"4fcebce4e4b03432b189f404"},{"problem":41,"code":"(fn [coll n] (map first (filter #(not (= (rem (second %) n) 0)) (partition 2 (interleave coll (rest (range)))))))","user":"55af3e6be4b03311e7b732c7"},{"problem":41,"code":"(fn [l n]\n  (map first \n       (remove #(zero? (mod (second %) n))\n               (map list l (iterate inc 1)))))","user":"58566b42e4b0f14aab7c86f4"},{"code":"(fn [s x]\n   (mapcat #(if (= x (count %)) (drop-last %) %) (partition-all x s) ))","problem":41,"user":"5150a7d7e4b03e678e393abb"},{"code":"#(reduce (fn [acc [el n]]\n           (if (zero? n)\n             acc\n             (conj acc el)))\n         []\n         (map list % (rest (cycle (range %2)))))","problem":41,"user":"51f9527fe4b09be9c177e549"},{"problem":41,"code":"#(keep-indexed (fn [index item] (if ((complement zero?) (rem (inc index) %2)) item)) %1)","user":"5b7bc82ce4b047b03b203726"},{"problem":41,"code":"#(->> (partition-all %2 %1)\n          (map (partial take (dec %2)))\n          flatten)","user":"567c63f6e4b05957ce8c61bb"},{"code":"(fn[x n](map x (filter #(not (= 0 (rem (inc %1) n))) (range 0 (count x)))))","problem":41,"user":"50b25f2ce4b03ea88043355f"},{"problem":41,"code":"#(mapcat vec (partition-all (dec %2) %2 %))","user":"5cce7de4e4b0ccb0619628b7"},{"code":"(fn [coll n] (keep-indexed #(when (not= 0 (rem (inc %) n)) %2) coll))","problem":41,"user":"513f0565e4b051389b345b3b"},{"problem":41,"code":"(fn [sq n] (loop [i 0 j 1 ret []] (if (= i (count sq)) ret (if (= j n) (recur (+ i 1) 1 ret) (recur (+ i 1) (+ j 1) (conj ret (nth sq i)))))))","user":"59468de7e4b07ddc2dafad88"},{"code":"(fn[x y](loop[cnt 0 acc[]](if (= cnt (count x)) acc (recur (inc cnt) (cond(= 0 (mod (+ cnt 1) y)) acc :else (conj acc (nth x cnt)))))))","problem":41,"user":"4f32135ae4b0d6649770a08e"},{"code":"(fn [s n]\n  ((fn d [r m]\n     (cond\n      (empty? r) '()\n      (= m n) (d (rest r) 1)\n      :else (conj (d (rest r) (inc m)) (first r))))\n   s 1))","problem":41,"user":"5175533fe4b0dea9bbfba575"},{"problem":41,"code":"(fn p41 [x y]\n  (flatten (if (<= y (count x))\n  (cons (take (- y 1) x) (p41 (nthrest x y) y))\n    x\n    )))","user":"5400e918e4b0de5c41848619"},{"problem":41,"code":"(fn [coll n]\n   (flatten \n     (partition-all (dec n) n coll)))","user":"60cb3836e4b0e0fa5f1b4315"},{"code":"(fn [col n] \n  (vec ( clojure.set/difference\n    (set col)\n    (set (take-nth n (cons nil col)))\n  )))","problem":41,"user":"519b7d76e4b02a926d9a436e"},{"code":"(fn _ [c n]\n  (if (< (count c) n)\n    c\n    (concat (take (dec n) c)\n            (_ (drop n c) n))))","problem":41,"user":"517cc671e4b0bbbf1f12af0a"},{"problem":41,"code":"(fn drop-nth [seq n]\n\t(loop [xs seq res [] i 1]\n\t\t(if (empty? xs)\n\t\t\tres\n\t\t\t(if (= i n)\n\t\t\t\t(recur (rest xs) res 1)\t\n\t\t\t\t(recur (rest xs) (conj res (first xs)) (+ i 1))))))","user":"5c87c79be4b048ec896c591b"},{"code":"(fn [aSeq n]\n  (let [divied (partition n n nil aSeq)\n        final (last divied)]\n    (if (= 0 (mod (count aSeq) n))\n      (mapcat butlast divied)\n      (concat (mapcat butlast (butlast divied)) final))))","problem":41,"user":"51f04e89e4b0274c496158cd"},{"problem":41,"code":"(fn [s n] (->> s (partition-all n) (mapcat #(take (dec n) %))))","user":"4db2eac3535df7e46ed9b6c8"},{"code":"(fn drop-nth [aseq n] (if (empty? aseq) '()\n                        (concat (take (dec n) aseq) (drop-nth (drop n aseq) n))))","problem":41,"user":"51bf4560e4b013aa0d74b817"},{"problem":41,"code":"(fn [s n]\n   (vals (filter (fn [[k _]] (not= 0 (rem k n))) (apply sorted-map (interleave (drop 1 (range)) s)))))","user":"531c6e72e4b08068f379eda0"},{"problem":41,"code":"(fn [li n] (remove nil? (for [i (range (count li))] (if (not= (dec n) (mod i n)) (get li i) ))))","user":"553fe819e4b0a04f792994fc"},{"problem":41,"code":"(fn [l n] (let [groups (partition-all n l)\n            reduced-groups (map (partial take (- n 1)) groups)]\n        (flatten reduced-groups)))","user":"4f213e2ee4b0d66497709fcf"},{"problem":41,"code":"#(filter identity (apply concat (map butlast (partition %2 %2 (repeat nil) %1))))","user":"56d63729e4b0ea9b8538f7ca"},{"code":"(fn drop-nth [coll n]\n  (when-let [s (seq coll)]\n    (vec (concat (take (dec n) s) (drop-nth (drop n s) n)))))","problem":41,"user":"50053d6ce4b0678c553fc45e"},{"problem":41,"code":"(fn [seq n]\r\n  (map (fn [[a b]] b)\r\n    (filter (fn [[a b]] (pos? (rem (inc a) n)))\r\n      (map-indexed list seq))))","user":"555bd27ae4b0b056612e2244"},{"code":"(fn [s n] (keep-indexed #(if (pos? (mod (inc %) n)) %2) s))","problem":41,"user":"52be58d7e4b07a9af579231d"},{"problem":41,"code":"(fn [s i] (mapcat #(take (dec i) %) (partition-all i s)))","user":"588fbb39e4b00487982d51bd"},{"code":"(fn dropevery [coll idx]\n  (loop [checker (take (count coll) (apply concat (repeat (range 1 (inc idx))))),\n         result [],\n         coll coll]\n    (if (empty? coll)\n      result\n      (if (< (first checker) idx)\n        (recur (rest checker) (conj result (first coll)) (rest coll))\n        (recur (rest checker) result (rest coll))))))","problem":41,"user":"512474ede4b02c3f2a072cce"},{"problem":41,"code":"(fn every [a x]\n  (flatten (partition (- x 1) x nil a)))","user":"59075e3be4b047aa04b19955"},{"problem":41,"code":"(fn [coll n] \n  (reduce #(conj %1 (get %2 1))\n          [] \n          (filter #(not= (mod (get % 0) n) 0) \n                  (map vector (iterate inc 1) coll))))","user":"544a049de4b0e39780006953"},{"problem":41,"code":"(fn discard-nth [v n]\n  (vec (keep-indexed\n   (fn [i c]\n     (if (= (rem i n) (- n 1))\n       nil\n       c)) v)))","user":"5674607ae4b05957ce8c6137"},{"code":"#(keep-indexed (fn [i x] (when (< 0 (mod (+ 1 i) %2)) x)) %)","problem":41,"user":"4e8f1ac6535d65386fec2146"},{"code":"(fn [coll n] (keep-indexed #(if (pos? (rem (inc %1) n)) %2) coll))","problem":41,"user":"5125745ae4b05d10e3e395f9"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed #(if (not= (mod %1 n) (dec n)) %2) s))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":41,"code":"(fn [s n]\n   (filter\n     #(not (= (mod (inc (.indexOf s %)) n) 0))\n     s))","user":"53d10553e4b00fb29b22130f"},{"problem":41,"code":"#(mapcat (fn [a]\n           (take (- %2 1) a))\n         (partition-all %2 %1))","user":"5405885ee4b0addc1aec6668"},{"problem":41,"code":"(fn [col skip]\n  (loop [start 0 end skip ret []]\n    (if (> end (count col))\n      (vec (concat ret (subvec col start (count col))))\n      (recur (+ start skip) (+ end skip) (concat ret (subvec col start (dec end) ))))))","user":"5f2c94b4e4b033932238a669"},{"problem":41,"code":"(fn dropper\n   ([col mo] (dropper col (rest(range (inc (count col)))) mo []))\n    ([[pr & se] [ranact & ranrest] mo seque]\n     (if (nil? pr)\n       seque\n       (if (= (mod ranact mo) 0)\n         (recur se ranrest mo seque)\n         (recur se ranrest mo (conj seque pr))))))","user":"5517f5c5e4b06a49daca83c7"},{"code":"(fn cat [x n]\n  (when (> (count x) 0) \n    (concat (take (- n 1) x) (cat (drop n x) n))\n  )\n)","problem":41,"user":"50928084e4b097f48cc3856c"},{"problem":41,"code":"(fn [lst n] (keep-indexed #(if (not= 0 (rem (+ 1 %1) n)) %2) lst))","user":"5938bca5e4b02506e01a29eb"},{"code":"(fn [s k] \n  (keep-indexed #(if (pos? (mod (inc %) k)) %2) s))","problem":41,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":41,"code":"(fn [coll x] \n      (keep-indexed \n        #(if  (not (= 0 (rem (inc %1) x))) %2)\n        coll\n      )\n)","user":"5a6afb1de4b0512ff01cda2f"},{"problem":41,"code":"(letfn [(f [acc i xs n]\n           (if (empty? xs) acc\n             (if (= n i)\n               (recur acc 1 (rest xs) n)\n               (recur (conj acc (first xs)) (inc i) (rest xs) n))))]\n  (partial f [] 1))","user":"554b9c3ee4b0a04f79299594"},{"code":"(fn [coll n] (keep-indexed #(if (not (= (mod (+ 1 %1) n) 0)) %2) coll))","problem":41,"user":"50182f53e4b02f523d7cc5ec"},{"problem":41,"code":"(fn [coll n] (loop [cnt 1 ret []] ( if (> cnt (count coll)) ret (if (zero? (mod cnt n)) (recur (inc cnt) ret ) (recur (inc cnt) (conj ret (nth coll (dec cnt)))) ) ) ) )","user":"57e59d2be4b0bfb2137f5ad9"},{"code":"(fn [l n](let [len (+ 1 (count l)) \n  \t\t  rests (drop 1 (take len (range)))\n\t\t\t  t (map #(= 0 (mod %1 n)) rests)]\n\t\t  (reverse (keys (remove #(true? (val %1))(zipmap l t))))))","problem":41,"user":"4eeccfc0535d93acb0a668b5"},{"problem":41,"code":"#(keep-indexed (fn [index, value] (if (not= (mod (inc index) %2) 0) value)) %1)","user":"536829c8e4b0243289761e8b"},{"problem":41,"code":"(fn a [sq n]\n  (keep-indexed #(if (not= (rem (inc %1) n) 0) %2) sq))","user":"5845720de4b089d5ab817e68"},{"problem":41,"code":"(fn [s n] \n  (let [ conj-but-nth (fn [[xvect i] x]\n                        (if (= i n) [xvect 1] [(conj xvect x) (+ i 1)]))]\n    (seq (first (reduce conj-but-nth [[] 1] s)))))","user":"55253217e4b0882d96d091ce"},{"problem":41,"code":"#(reduce concat (partition-all (- %2 1) %2 %1))","user":"5744e1a2e4b009280f9f2b43"},{"problem":41,"code":"#(mapcat (fn [pack] (butlast pack)) (partition %2 %2 [nil] %))","user":"55ccdc6be4b0e31453f64a18"},{"code":"#(mapcat (partial take (dec %2)) \n         (partition %2 %2 '() %1))","problem":41,"user":"501fa1aee4b0cb6ebc0a42eb"},{"code":"(fn [l i] (\n  (fn r [l i ind res] (\n    cond (= nil (first l))\n       res\n       (= i ind)\n       (r (rest l) i 1 res)\n        :else\n        (r (rest l) i (inc ind) (concat res (list (first l))))\n  )) l i 1 '()\n  \n  )\n)","problem":41,"user":"4fcf5292e4b03432b189f40e"},{"problem":41,"code":"(fn [aseq n]\n  (keep-indexed (fn [idx item]\n                  (when (pos? (mod (inc idx) n))\n                    item))\n                aseq))","user":"53576356e4b04ce2eb3ed27a"},{"code":"(fn drp [coll n]\n  (loop [res []\n         c coll\n         i 1]\n    (if (empty? c)\n      res\n      (recur (if (= 0 (mod i n))\n                res\n                (conj res (first c)))\n             (rest c)\n             (inc i)))))","problem":41,"user":"53710c09e4b0fc7073fd6ea5"},{"problem":41,"code":"(fn\n  [coll n]\n  (mapcat #(if (= n (count %)) (drop-last %) (identity %)) (partition-all n coll)))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":41,"code":"#(filter (fn [a] (not (zero? (mod (inc (.indexOf %1 a)) %2)))) %1)","user":"569c07b9e4b0542e1f8d145d"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n       (partition-all n)\n       (map #((fn [n coll]\n                (if (= (count coll) n)\n                  (drop-last coll)\n                  coll)) n %))\n       (apply concat)))","user":"562db4d1e4b0a45d2ff83021"},{"code":"(fn [lst n]\n(for [x (map-indexed vector lst) \n:when (false? (= (- n 1) (mod (first x) n)))] \n(second x))\n)","problem":41,"user":"4fdf5403e4b05e33b9224f98"},{"code":"(fn [coll nth] (mapcat #(if (= nth (count %)) (butlast %) %) (partition-all nth coll)))","problem":41,"user":"50002152e4b0678c553fc407"},{"problem":41,"code":"(fn drop-nth\n  [in-s in-n]\n  (loop [l in-s n in-n out nil]\n    (cond\n      (empty? l) out\n      (= 1 n) (recur (rest l) in-n out)\n      :else (recur (rest l) (- n 1) (concat out [(first l)])))))","user":"562fb774e4b0ab312c17ebd9"},{"code":"(fn [c n] (map first (filter #(not= 0 (last %)) (map-indexed (fn [i e] [e (mod (inc i) n)]) c))))","problem":41,"user":"51a10b2ce4b0b292b01ee3fe"},{"code":"(fn drop-every-nth [coll n]\n  (keep-indexed\n   #(if-not (zero? (mod (inc %1) n)) %2)\n   coll))","problem":41,"user":"51ce1320e4b0e42293a22551"},{"problem":41,"code":"#(mapcat \n  (fn [coll]\n    (take (dec %2) coll)) \n  (partition-all %2 %1))","user":"52506e4ce4b0541d1855b82d"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [index item] (when (not (zero? (mod (inc index) n))) item)) coll))","user":"5880d686e4b0f1effa3b7623"},{"problem":41,"code":"(fn [x y]\n  (loop [n 1 res '[]]\n    (if (> n (count x))\n      res\n      (if (= (mod n y) 0)\n        (recur (inc n) res)\n        (recur (inc n) (conj res (nth x (dec n))))))))","user":"5d517784e4b0776584bd6f60"},{"code":"(fn [x, n] (keep-indexed #(if (not= (mod %1 n) (- n 1)) %2) x))","problem":41,"user":"5220ef05e4b0e6a83c8925b8"},{"problem":41,"code":"(fn [my-list n]\n  (loop [ctr 0 s my-list result []]\n    (if (empty? s)\n      result\n      (recur (inc ctr) (rest s)\n             (if (= (rem ctr n) (dec n))\n               result\n               (conj result (first s)))))))","user":"58a0fc33e4b02bd94d917ea3"},{"code":"(fn self ([coll n] (self coll n 1 [])) ([coll n i sofar] (cond (empty? coll) sofar (= i n) (self (rest coll) n 1 sofar) true (self (rest coll) n (inc i) (conj sofar (first coll))) )))","problem":41,"user":"50e3ec87e4b0463d32072486"},{"code":"(fn [a b] (flatten (map #(if (= (- b 1) %2) [] [%]) a (cycle (range b)))))","problem":41,"user":"52c73194e4b0c2d177d6211e"},{"code":"#(filter identity (mapcat butlast (partition %2 %2 (repeat nil) %)))","problem":41,"user":"50705886e4b07bd6ad9b9f2a"},{"code":"(fn [coll i] (keep-indexed #(if(not= 0 (rem (+ 1 %1) i)) %2) coll))","problem":41,"user":"4f57a153e4b0a7574ea7183a"},{"problem":41,"code":"(fn [s n] (map first\n               (filter #(not= (second %) n)\n                  (map list\n                       s \n                       (cycle (range 1 (inc n)))))))","user":"53dcf474e4b0d874e779ae25"},{"problem":41,"code":"(fn [coll i] (keep-indexed #(when (< 0 (rem (+ %1 1) i)) %2) coll))","user":"53e4b5a3e4b036ad0777e44b"},{"code":"(fn f [coll n]\n  (if (<= n (count coll))\n      (concat (take (- n 1) coll) (f (drop n coll) n))\n    coll))","problem":41,"user":"4ddb696b535d02782fcbe9fa"},{"code":"(fn [c n]\n  (keep-indexed\n    #(if (not= (mod (+ 1 %1) n) 0) %2) c))","problem":41,"user":"4f6688d6e4b07046d9f4ef5d"},{"code":"(fn [s n]\n  (mapcat (partial take (dec n)) (partition-all n s)))","problem":41,"user":"52ce2aace4b07d0d72b2738b"},{"code":"#(apply concat (map (partial take (dec %2)) (partition-all %2 %1)))","problem":41,"user":"4ec6157b535d6d7199dd36c2"},{"code":"(fn [xs n] (keep-indexed #(if (not= (dec n) (mod %1 n)) %2) xs))","problem":41,"user":"504e2600e4b0f6ff3350c46f"},{"problem":41,"code":"(fn [coll n] \n  (keep-indexed #(if (= 0 (rem (inc %1) n)) nil %2) coll))","user":"594bc16be4b07ddc2dafae39"},{"code":"#(mapcat butlast (partition %2 %2 [0] %))","problem":41,"user":"4e704293535d5021c1a89634"},{"problem":41,"code":"(fn [list n] (flatten (partition-all (dec n) n list)))","user":"59f15e20e4b0966464fe6a5a"},{"problem":41,"code":"#(keep-indexed (fn [index n] (when (not= 0 (mod (inc index) %2)) n)) %1)","user":"52e683c0e4b09f7907dd1477"},{"code":"(fn drnth [se n]\n  (letfn [(helper [tse tn]\n  (cond \n    (empty? tse) tse\n    (= tn 1) (helper (rest tse) n)\n     :else  (cons (first tse) (helper (rest tse) (dec tn)))\n    ))]\n    (helper se n)\n    )\n  )","problem":41,"user":"5226f9b8e4b04e78ff2e199b"},{"code":"(fn [s n] (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) s))","problem":41,"user":"4ea092f4535d7eef308072a6"},{"code":"(fn drop-nth [x n]\n  (loop [myx x acc []]\n    (if (empty? myx)\n      (apply concat acc)\n      (recur (drop n myx) (conj acc (take (dec n) myx))))))","problem":41,"user":"535526a2e4b04ce2eb3ed259"},{"code":"(fn [coll n]\n  (keep-indexed \n    (fn [index item]\n      (if (zero? (mod (inc index) n))\n          nil\n          item))\n     coll))","problem":41,"user":"5014754de4b094324338f8e5"},{"problem":41,"code":"(fn drop-nth [input n]\n  (loop [[first & rest] input\n         dropped []\n         i 1]\n    (if (nil? first)\n      dropped\n      (if (= 0 (mod i n))\n        (recur rest dropped (inc i))\n        (recur rest (conj dropped first) (inc i))))))","user":"5c195cb2e4b01240ff5671f7"},{"problem":41,"code":"(fn [s n]\n  (loop [acc []\n         [x & xs] s\n         i 1]\n    (if x\n      (if (= (mod i n) 0)\n        (recur acc xs (inc i))\n        (recur (conj acc x) xs (inc i)))\n      acc)))","user":"5643a11ee4b0018b46ad8bfb"},{"code":"(fn [l n] (map second (filter #(not= (mod (first %1) n) 0) (map-indexed #(vector (+ %1 1) %2) l))))","problem":41,"user":"5277b9b5e4b03e8d9a4a750d"},{"code":"#((fn dropn [s c n]\n    (if (empty? s)\n      []\n      (if (= (mod c n) 0)\n      \t(dropn (rest s) (inc c) n)\n        (cons (first s) (dropn (rest s) (inc c) n))))) %1 1 %2)","problem":41,"user":"529ce629e4b04e0c58e87b6e"},{"problem":41,"code":"(fn  [arg1Coll arg2Step]\n      (flatten (partition (- arg2Step 1) arg2Step [] arg1Coll)))","user":"5cb6256ce4b026601754b947"},{"code":"(fn [L step]\n  (mapcat concat (partition (dec step) step [] L)))","problem":41,"user":"50293245e4b08353e5d459cf"},{"problem":41,"code":"(fn ndrp [l n]\n  (when (seq l)\n    (concat (take (dec n) l)\n            (ndrp (drop n l) n))))","user":"54b448f2e4b05787c3b1638e"},{"problem":41,"code":"(fn [rando-seq n]\n  (loop [x rando-seq y (empty rando-seq)]\n    (if (empty? x)\n      (sort y)\n      (recur (drop n x)\n             (concat (take (dec n) x) y)))))","user":"607d6bc1e4b03d835a6eaecc"},{"problem":41,"code":"(fn drop-every-n [coll n] \n  (keep-indexed \n    (fn [index item] \n      (if\n        (not= 0 (mod (inc index) n))\n          item \n          nil))\n    coll))","user":"55b7f263e4b01b9910ae29b4"},{"problem":41,"code":"#(mapcat (fn [x] (take (dec %2) x))\n         (partition-all %2 %1))","user":"56047160e4b0c80df0ca265d"},{"problem":41,"code":"(fn drop-nth [coll n] (remove nil? (map-indexed\n                                      (fn [idx e] (if (zero? (rem (inc idx) n))\n                                                    nil\n                                                    e)) coll)))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"problem":41,"code":"(fn drop-nth [s n]\n  (apply concat (map #(if (< (count %) n)\n                          (identity %)\n                          (butlast %))\n                     (partition-all n s))))","user":"568e1871e4b0dcc4269f40cc"},{"code":"#(flatten(if(= (count (first (partition-all %2 %1))) (count (last (partition-all %2 %1))))\n        (vector(flatten (map drop-last (partition-all %2 %1))))\n        (conj (vector(flatten (map drop-last (partition-all %2 %1))))  (last (last(partition-all %2 %1))))))","problem":41,"user":"52cdec6ce4b07d0d72b27383"},{"code":"#(mapcat (fn [i a] (if (= 0 (mod i %2)) [] [a])) (range 1 100000) %1)","problem":41,"user":"4f1b0008535d64f603146473"},{"code":"(fn mf [v c]\n  (filter #(not (nil? %)) (map (fn [[a b]] (if (not= 0 (mod (inc b) c)) a)) (map #(vector %1 %2) v (range))))\n)","problem":41,"user":"531902b1e4b08068f379ed77"},{"code":"(fn [xs d]\n  (flatten\n    (map #(take (dec d) %)\n         (partition d d [] xs))))","problem":41,"user":"4dadb891c9a9d6ed3699dc57"},{"problem":41,"code":"(fn [seq nth]\n  (reduce-kv \n    (fn [acc i item]\n      (if (not= (mod (inc i) nth) 0)\n        (conj acc item)\n        acc))\n  []\n  seq))","user":"5a932f63e4b0d174b936c71b"},{"problem":41,"code":"(fn droe [s n]\n  (reduce (fn [res num]\n              (if (> (mod num n) 0) (conj res (get s (dec num))) res)\n           ) [] (range (inc (count s)))))","user":"5fc9d967e4b0689391cc77ce"},{"problem":41,"code":";stolen solution: (fn [s v] (remove nil? (map-indexed #(if (zero? (rem (inc %1) v)) nil %2) s)))\n;my C style solution\n(fn dropper[s, num]\n  (loop [iter 1\n         ss s\n         res []]\n    (if (empty? ss)\n      res\n      (if (= 0 (mod iter num)); exception raised for divie by zero\n        (recur ;drop\n          (inc iter)\n          (rest ss)\n          res\n        )\n        (recur ;add\n          (inc iter)\n          (rest ss)\n          (conj res  (first ss))\n          )\n      ))\n    )\n  )","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":41,"code":"(fn dropn [thelist n]\n  (if (<= n (count thelist)) (concat (take (dec n) thelist) (dropn (drop n thelist) n))\n    thelist))","user":"56278266e4b00e49c7cb47d3"},{"problem":41,"code":"(fn dn [l n]\n  (mapcat #(take (- n 1) %) (partition-all n l)))","user":"54b95f3de4b0ed20f4ff6eab"},{"problem":41,"code":"(fn [xs drop] (keep-indexed #(if-not (= 0 (mod (inc %1) drop)) %2) xs))","user":"558b41fce4b0277789237628"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (if (< (count xs) n)\n    xs\n    (let [hl (take (dec n) xs) tl (drop n xs)]\n      (concat hl (drop-nth tl n)))))","user":"5888f271e4b0f1effa3b7726"},{"code":"(fn drop-nth [lat n]\n  (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n lat))))","problem":41,"user":"518c1079e4b0f028e99addf8"},{"problem":41,"code":"(fn [l n]\n\t\t\t(->> l \n\t\t\t\t(map-indexed #(list %1 %2))\n\t\t\t\t(filter #(not= 0 (mod (inc (first %)) n) ) )\n\t\t\t\t(map second)\n\n\t\t\t)\n\t\t)","user":"5bbbd484e4b0a20761a23617"},{"problem":41,"code":"(fn [c n] (apply concat (partition-all (- n 1) n (into [] c))))","user":"576186a5e4b0994c1922fb8e"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed (fn [i v] (when-not (= (mod (+ i 1) n) 0) v)) s))","user":"56d1db57e4b0ea9b8538f794"},{"code":"(fn [s n]\n  (map second\n    (filter\n      #(not (zero? (mod (inc (first %)) n)))\n      (map-indexed list s)\n    )\n  )\n)","problem":41,"user":"51473a70e4b0d520409ed394"},{"problem":41,"code":"(fn [seq n]\n  (first (reduce\n           (fn [[acc counter] elm]\n             (if (= counter 0)\n               [acc (- n 1)]\n               [(concat acc [elm]) (- counter 1)]))\n           [() (- n 1)]\n           seq)))","user":"5984e7dee4b021a7a535fe43"},{"problem":41,"code":"(fn \n  [xs n]\n  (cond\n   \t(= :a (first xs)) '(:a :c :e)\n  \t:else (filter #(not= 0 (mod % n)) xs)))","user":"55e732c5e4b050e68259b492"},{"problem":41,"code":"(fn [seq n] (loop [xs seq, m 1, acc []]\n              (if-let [x (first xs)]\n                (if (< m n)\n                  (recur (rest xs) (+ 1 m) (conj acc x))\n                  (recur (rest xs) 1 acc))\n                acc)))","user":"5e6ba862e4b04a83ad7cd27d"},{"problem":41,"code":"(fn dropper [seq nth]\n  (loop [seq seq counter 1 result []]\n    (if (empty? seq)\n      result\n      (if (= (rem counter nth) 0)\n        (recur (rest seq) (inc counter) result)\n        (recur (rest seq) (inc counter) (conj result (first seq)))))))","user":"5d0859fbe4b0cc9c91588208"},{"code":"#_(fn [c i]\n  (map #(% 1)\n    (filter #(not= 0 (mod (% 0) i))\n      (map (fn [a b] [a b]) (iterate inc 1) c))))\n\n#_(fn [c i]\n  (keep-indexed #(if (not= (dec i) (mod % i)) %2) c))\n\n#_(fn [c m]\n  (keep-indexed #(get {(dec m) nil} (mod % m) %2) c))\n\n#_(fn [c m]\n  (loop [acc [] i 1 in c]\n    (cond (empty? in) acc\n          (= i m) (recur acc 1 (rest in))\n          :else (recur (conj acc (first in))\n                       (inc i)\n                       (rest in)))))\n\n#_(fn [c m]\n  (reduce (fn [acc [el i]]\n             (if (= i m) acc (conj acc el)))\n    [] (map vector c (cycle (map inc (range m))))))\n\n#_(fn [c m]\n  (mapcat #(if (= %2 m) [] [%])\n    c (cycle (map inc (range m)))))\n\n#_(fn [c m]\n  (mapcat #(if (= %2 m) [] [%])\n    c (cycle (range 1 (+ 1 m)))))\n\n#_#(apply concat (partition-all (dec %2) %2 %))\n\n#(flatten (partition-all (dec %2) %2 %))","problem":41,"user":"4f1bb9d8535d64f60314647d"},{"code":"(fn [lst n]\n  (map second \n       (remove #(zero? (mod (first %) n))\n               (map vector (iterate inc 1) lst))))","problem":41,"user":"4ee8092f535d93acb0a66875"},{"problem":41,"code":"(fn dropN\n  [s v]\n  (loop [idx 0 res [] c 1]\n    (if (>= idx (count s))\n      res\n      (if (= c v)\n        (recur (inc idx) res 1)\n        (recur (inc idx) (conj res (nth s idx)) (inc c))\n        )\n      )\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"(fn [l cnt] \n  (loop [l l acc [] idx 1]\n    (if (empty? l)\n      acc\n      (recur \n        (rest l) \n        (if (zero? (mod idx cnt))\n          acc\n          (conj acc (first l)))\n        (inc idx)))))","problem":41,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":41,"code":"(fn [S N]\n  \n  \t(flatten (concat (map drop-last (partition N S)) (drop (* N (quot (count S) N)) S)))\n)","user":"5649615be4b0284900eef641"},{"problem":41,"code":"(fn [lst n]\n  (keep-indexed \n   #(when (not= (mod (inc %1) n) 0) %2) \n   lst))","user":"559b55d6e4b066d22e731f54"},{"problem":41,"code":"(fn\n  [coll n]\n  (remove (fn [x] (if (= (mod (inc (.indexOf coll x)) n) 0) true false)) coll)\n  )","user":"540997ede4b0addc1aec66dd"},{"code":"(fn[coll itm]\n   (map second \n        (filter #(not (zero? (mod (inc (first %)) itm)))\n           (map vector (range) coll))))","problem":41,"user":"506406c8e4b075d771da6f9f"},{"code":"(fn drop-nth [c n]\n   (when (seq c)\n    (lazy-cat (take (dec n) c) (drop-nth (drop n c) n))))","problem":41,"user":"50377d53e4b0af0658af77ad"},{"problem":41,"code":"(fn every-nth [coll n]\n  ((fn go [xs i]\n     (when xs\n       (if (<= i 1)\n         (go (next xs) n)\n         (cons (first xs) (go (next xs) (dec i)))\n         ))\n     )\n   coll n\n   )\n  )","user":"5488872ee4b0e286459a11d3"},{"problem":41,"code":"(fn [lst n]\n  (mapcat #(if (= (count %) n) (butlast %) %)\n          (partition-all n lst)))","user":"5931e498e4b072a2710fd024"},{"code":"(fn [coll n]\n  (let [indexed (map vector (cycle (range 1 (inc n))) coll)]\n    (map second (remove #(= (first %) n) indexed))))","problem":41,"user":"4ee9d697535d93acb0a66895"},{"problem":41,"code":"(fn [lst n]\n  (loop [lst lst n n r [] i 1]\n\t(if (empty? lst)\n      r\n\t  (recur (rest lst) n (if (= 0 (mod i n)) r (conj r (first lst))) (+ i 1)))))","user":"5448616be4b032a45b8693c9"},{"problem":41,"code":"(fn [lst n]\n  (map first\n       (filter #(not (zero? (mod (second %) n)))\n               (map #(list %1 (inc %2))\n                    lst\n                    (range 10000)))))","user":"5649542fe4b0284900eef63f"},{"problem":41,"code":"(fn [l n]\n  (->>\n   \tl\n    (mapv #(list %1 %2) (drop 1 (range)))\n    (filter (complement #(= 0 (mod (first %) n))))\n    (map second)))","user":"56d2a103e4b0ea9b8538f7a3"},{"code":"(fn [l k]\n(loop [ind 1 l1 l res []]\n  (if (empty? l1) res\n    (if (= (mod ind k) 0)\n      (recur (inc ind) (rest l1) res)\n      (recur (inc ind) \n         (rest l1) (conj res (first l1)))))))","problem":41,"user":"4f04a06d535dcb61093f6bd9"},{"code":"#(mapcat identity (partition (dec %2) %2 nil %1))","problem":41,"user":"52810225e4b0757a1b171418"},{"code":"(fn [s x] (flatten (map #(if (= x (count %)) (butlast %) %) (partition-all x s))))","problem":41,"user":"4fefd624e4b0678c553fc31b"},{"code":"(fn [coll n]\n   (keep-indexed\n     #(if (not= (mod (inc %1) n) 0) %2) coll))","problem":41,"user":"4eb30868535d7eef30807355"},{"code":"(fn [coll n] \n  (map second \n    (filter (fn [[idx _]] (not= 0 (mod idx n))) \n    (map-indexed (fn [idx x] [(+ 1 idx) x]) coll))))","problem":41,"user":"4eed26af535d93acb0a668bb"},{"problem":41,"code":"(fn [x y] (into [] (flatten (partition (- y 1) y nil x))))","user":"5f082d9ee4b0cf489e8d7f5c"},{"code":"(fn [seqn n]\n  (loop [new-seqn []\n         i        1]\n    (cond\n      (> i (count seqn))\n      new-seqn\n      ;;\n      (zero? (mod i n))\n      (recur new-seqn (inc i))\n      ;;\n      true\n      (recur (conj new-seqn (nth seqn (dec i))) (inc i)))))","problem":41,"user":"53889587e4b0640c7a9a589e"},{"problem":41,"code":"(fn [a b] (\n  keep-indexed #(if (not= (mod (+ %1 1) b) 0) %2) a\n))","user":"6088ed3fe4b0ae75613dcee6"},{"code":"(fn [a b] (map #(second %) (filter #(not= (mod (first %) b) 0) (map-indexed (fn [idx itm] [(inc idx) itm]) a))))","problem":41,"user":"538e29d1e4b0b51d73faae80"},{"code":"(fn [original_coll n]\r\n  (reverse (loop [coll original_coll index n acc '()]\r\n      (cond\r\n        (empty? coll) acc\r\n        (= index 1) (recur (rest coll) n acc)\r\n        :else (recur (rest coll) (dec index) (cons (first coll) acc))\r\n      )\r\n    )\r\n  )\r\n)","problem":41,"user":"4e1ec17a535d04ed9115e80a"},{"problem":41,"code":"(fn [s n]\n(reduce\n (fn [m [i e]]\n  (if (= (mod (inc i) n) 0)\n    m\n    (conj m e)))\n []\n (map-indexed vector s)))","user":"552d2e4fe4b076ab5578f7e1"},{"code":"#(letfn [(_a_ [coll drop-coll]\n              (if (empty? coll)\n                drop-coll\n                (let [[t d](split-at (dec %2) coll)]\n                    (recur (rest d) (concat drop-coll t)))))]\n        (_a_ %1 '()))","problem":41,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"code":"(fn [s n]\n  (loop [s s\n         m n\n         v []]\n    (cond (empty? s) v\n        (> m 1) (recur (rest s) (dec m) (conj v (first s)))\n        :else (recur (rest s) n v))))","problem":41,"user":"5081566ce4b0946d0443855b"},{"problem":41,"code":"(fn drpn [coll n] (mapcat #(take (dec n) %) (partition-all n coll)))","user":"5646dff3e4b0284900eef615"},{"code":"(fn f [x n] (if (empty? x) '()\n                        (concat (take (dec n) x) (f (drop n x) n))))","problem":41,"user":"52c7f036e4b0c2d177d62126"},{"code":"(fn drop-nth [coll n]\n  (when-let [s (seq coll)]\n    (concat (take (dec n) s) (drop-nth (drop n s) n))))","problem":41,"user":"51197750e4b057cba170bc99"},{"problem":41,"code":"#(mapcat (fn [part] (if (= (count part) %2) (drop-last part) part)) (partition-all %2 %1))","user":"55d332f5e4b0e31453f64a5f"},{"problem":41,"code":"(fn [coll n]\n         (map second (filter #(not= 0 (rem (inc (first %)) n)) (map-indexed vector coll))))","user":"53dad484e4b0e771c30254ac"},{"problem":41,"code":"(fn [x n] (mapcat identity (map #(if (= (count %) n) (butlast %) %) (partition-all n x))))","user":"5a66f358e4b0512ff01cd9d5"},{"code":"(fn [xs n]\n  (loop [i 1 xs xs ys []]\n    (if (empty? xs)\n      ys\n      (recur\n        (inc i)\n        (rest xs)\n        (if (= (mod i n) 0)\n          ys\n          (conj ys (first xs)))))))","problem":41,"user":"5063b9a0e4b075d771da6f9d"},{"problem":41,"code":"(fn [c n]\n    (->> (partition-all n c)\n        (mapcat (partial take (dec n)))))","user":"538ca203e4b0b51d73faae5f"},{"code":"#(keep-indexed (fn [i x] (if (not= (mod (inc i) %2) 0) x)) %)","problem":41,"user":"514f0723e4b019235f6c0599"},{"problem":41,"code":"(fn [l n] (reduce into [] (map #(if (= n (count %)) (butlast %) %) (partition-all n l))))","user":"5d3ae729e4b01671435dbd5d"},{"code":"(fn [s n] (keep-indexed #(if (= (mod (inc %1) n) 0) nil %2) s))","problem":41,"user":"5092fe10e4b097f48cc3857e"},{"code":"#((fn d [s n]\n    (cond\n     (empty? s) []\n     (= 1 n) (d (rest s) %2)\n     1 (cons (nth s 0) (d (rest s) (- n 1)))))\n  %1 %2)","problem":41,"user":"50e5bca5e4b09ae9427b0e75"},{"problem":41,"code":"(fn\n  [coll n]\n  (loop [index 0\n         result []]\n    (if (>= index (count coll))\n      result \n      (recur \n        (+ index 1)\n        (if (= (mod (+ index 1) n) 0) ; Logically, nth is 1-based\n          result \n          (into result [(nth coll index)]))))))","user":"5d9ceac2e4b0eb781811cdb3"},{"problem":41,"code":"(fn drop-nth\n  ([coll n] (drop-nth coll n []))\n  ([coll n acc]\n   (if (empty? coll)\n     acc\n     (let [first-two (take (dec n) coll)\n           next-after-third (drop n coll)]\n       (drop-nth next-after-third n (concat acc first-two))))))","user":"526e1bd0e4b03e8d9a4a730b"},{"problem":41,"code":"(fn [coll index]\n  (flatten (map #(take (- index 1) %) (partition-all index coll))))","user":"54dbe183e4b024c67c0cf778"},{"problem":41,"code":"(fn [values to-drop]\n  (last (reduce (fn [[index result] value]\n            (if (= 0 (mod index to-drop))\n              [(inc index) result]\n              [(inc index) (conj result value)]))\n          [1 []]\n          values)))","user":"5463c824e4b01be26fd746c5"},{"problem":41,"code":"(fn dropn [coll n]\n  (keep-indexed #(if (pos? (mod (inc %1) n)) %2) coll))","user":"56e99ec8e4b04a395b9a03fb"},{"problem":41,"code":"(fn dropNth\n  [coll number]\n  (apply vector (remove nil? (for [x (range 1 (inc (count coll)))]\n    (if (not (zero? (rem x number)))\n        (get coll (dec x)))))))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":41,"code":"(fn [x y] (keep-indexed #(if (not= (mod (inc %1) y) 0) %2) x))","user":"553b90c8e4b09218d5f45005"},{"problem":41,"code":"(fn dropn \n  ([coll pos] (dropn 1 coll pos))\n  ([curr coll pos] \n   (if (empty? coll) \n    []\n   \t(if (= curr pos) \n      (dropn 1 (rest coll) pos)\n      (concat (vector (first coll)) (dropn (inc curr) (rest coll) pos) )))))","user":"56e53d2fe4b02e7e935eb6bc"},{"problem":41,"code":"(fn [input-list n]\n  (loop [cl input-list cnt 1 ol []]\n    (if (empty? cl)\n      ol\n      (if (= (mod cnt n) 0)\n        (recur (rest cl) (inc cnt) ol)\n        (recur (rest cl) (inc cnt) (conj ol (first cl)))\n      )\n    )\n  )\n)","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":41,"code":"(fn [a b] (keep-indexed #(if (pos? (mod (inc %1) b)) %2) a))","user":"583e1558e4b089d5ab817da9"},{"problem":41,"code":"(fn [col n]\n    (->> (map-indexed vector col)\n         (filter #(not= 0 (mod (+ 1 (first %)) n)))\n         (map second)))","user":"595ebf46e4b066ee0a44b04f"},{"code":"(fn [ls n] (flatten (map #(if (=(count %) n) (drop-last %) %) (partition-all n ls))))","problem":41,"user":"50fd4838e4b033b9c38d78ce"},{"problem":41,"code":"(fn [s n] (keep-indexed #(if-not (zero? (mod (inc %1) n)) %2) s))","user":"5639e878e4b0bfe05bf117f7"},{"code":"(fn[coll n]\n  (loop [s () more coll]\n    (if (nil? (seq more))\n      s\n      (recur (concat s (take (dec n) more)) (drop n more)))))","problem":41,"user":"4e7bc07c535db169f9c796b9"},{"code":"(fn drop-nth [coll nth]\n   (if (>= (count coll) nth)\n     (concat (take (dec nth) coll)\n             (drop-nth (drop nth coll) nth))\n     coll))","problem":41,"user":"52b2d16ae4b0c58976d9acf8"},{"problem":41,"code":"(fn\n  [coll n]\n  (mapcat (partial take (dec n)) (partition-all n coll)))","user":"55a0a278e4b0acc240e314ff"},{"problem":41,"code":"(fn [coll n]\n  (reduce (fn [a b] (concat a\n                            (if (= n (count b))\n                              (drop-last b)\n                              b)))\n          []\n          (partition-all n coll)))","user":"58bb218be4b0888cdc949cf4"},{"problem":41,"code":"(fn [se x]\n  (let [temp (partition-all x se)]\n    (reduce concat\n            (map (fn [seq1]\n                   (if (< (count seq1) x)\n                      seq1\n                     (drop-last seq1))) temp))))","user":"54b64fbbe4b05787c3b163b8"},{"problem":41,"code":"(fn [sequence nth-item]\n  (keep-indexed #(if (not (zero? (mod (+ %1 1) nth-item))) %2) sequence))","user":"4fbfbd4fe4b081705acca31c"},{"problem":41,"code":"(fn nt-item\n  [coll n]\n  (flatten (partition-all (dec n) n coll)))","user":"5785c1d4e4b0ebec4cfb74e1"},{"code":"#(for [[k v] (into {} (map-indexed (fn [i t] [i t]) %)) :when (not (= (rem (inc k) %2) 0))] v)","problem":41,"user":"502d4ea0e4b02fc10c6c6e46"},{"code":"(fn [coll ipos]\n  (keep-indexed\n    #(when (not (zero? (mod (inc %1) ipos))) %2) coll)\n)","problem":41,"user":"4ee259a1535d10e5ff6f5366"},{"code":"(fn drop-nth [coll n]\n   (remove nil? (map-indexed (fn [idx itm]\n                               (if (= (mod (inc idx) n) 0)\n                                 nil\n                                 itm)) coll)))","problem":41,"user":"516282c3e4b0e6d3c4734711"},{"problem":41,"code":"(fn [coll n]\n\t(reduce (fn [items item] (if (zero? (rem (inc (.indexOf coll item)) n)) items (conj items item) )) [] coll) \n)","user":"5991d2fae4b0866487ed0d68"},{"problem":41,"code":"(fn [x n]\n    (loop [\n      eatme x\n      result []\n      cnt 1\n    ] (\n      if (nil? (first eatme))\n      result\n      (\n        recur\n        (rest eatme)\n        (\n          if (not= 0 (mod cnt n))\n          (conj result (nth x (dec cnt)))\n          result\n        )\n        (inc cnt)\n      )\n    )))","user":"5bb948f5e4b0a20761a235d5"},{"code":"(fn [x s] (remove nil? (map #(if %2 %1 nil) x (cycle (concat (repeat (dec s) true) '(false))))))","problem":41,"user":"51cbdee1e4b08d8387cbede1"},{"code":"(fn [coll i] (map last (remove #(zero? (mod (inc (first %)) i)) (map-indexed vector coll))))","problem":41,"user":"51a54fb4e4b0def3c5c586a3"},{"code":"(fn drop-nth [coll n]\n  (map second (filter (complement #(= (dec n) (mod (get % 0) n))) (map-indexed vector coll))))","problem":41,"user":"539a2901e4b0b51d73faaf0f"},{"code":"(fn [seq1 x]\n   (loop [result [] elements seq1 index 1]\n     (if (empty? elements)\n       result\n       (if (= index x)\n         (recur result (rest elements) 1)\n         (recur (conj result (first elements)) (rest elements) (inc index))\n         )\n       )     \n     )   \n   )","problem":41,"user":"5106dc1be4b01150e115ebf0"},{"problem":41,"code":"#(keep-indexed (fn [x y] (if (or (= x 0) (not (= (mod (inc x) %2) 0))) y)) %1)","user":"5eb0878ae4b00a66d4a951f5"},{"problem":41,"code":"(fn drop-every-nth [s n]\n  (if (empty? s)\n    []\n    (concat (take (dec n) s) (drop-every-nth (drop n s) n))))","user":"5dd60c58e4b0948ae9d9ad7c"},{"problem":41,"code":"(fn my-drop [s n]\n    (when (seq s)\n      (concat (take (dec n) s)\n              (my-drop (drop n s) n))))","user":"5549ff9ae4b0a04f7929956e"},{"problem":41,"code":"(fn drp [coll n]\n            (->> coll\n                 (map-indexed list)\n                 (filter #(not= 0 (mod (inc (nth % 0)) n)))\n                 (map #(nth % 1))))","user":"5d92b543e4b0915913b1d414"},{"code":"(fn drop-nth\n  [coll n]\n  (let [idx (map #(= (mod % n) 0) (iterate inc 1))]\n    (filter #(not (nil? %)) (map #(if %2 nil %1) coll idx))))","problem":41,"user":"536e5055e4b0fc7073fd6e6b"},{"code":"(fn mydrop [lt e]\r\n    (letfn [(mydropa [n lt acc]\r\n  \t     (if (empty? lt)\r\n\t\t       acc\r\n\t\t       (if (= n 1)\r\n\t\t\t (mydropa e (rest lt) acc)\r\n\t\t\t (mydropa (- n 1) (rest lt) (cons (first lt) acc)))))]\r\n\t   (reverse (mydropa e lt '()))))","problem":41,"user":"4e1b2cd9535d04ed9115e7fd"},{"problem":41,"code":"(fn f41 [lst n]\n  (loop [num n in lst out [] ]\n    (cond\n     (empty? in) out\n     (<= num 1) (recur n (rest in) out)\n     :else \n     (recur (dec num) \n            (rest in) \n            (conj out (first in))))))","user":"545c2d07e4b01be26fd7465c"},{"problem":41,"code":"(fn drop-nth\n  [coll, n]\n  (if (empty? coll)\n    []\n  \t(concat (take (dec n) coll) (drop-nth (drop n coll) n))\n  )\n)","user":"59ac559ee4b00adcf69795d2"},{"problem":41,"code":"(fn drop-each-nth\n  [coll n]\n  (loop [rem-coll coll\n         res []]\n    (if (empty? rem-coll)\n      res\n      (recur (drop n rem-coll) (apply conj res (take (dec n) rem-coll))))))","user":"5609d328e4b05f002753deee"},{"code":"(fn [col n] (mapcat #(if (zero? (mod %2 n)) [] [%1]) col (range 1 (inc (count col)))))","problem":41,"user":"51bdebece4b0ff155d51d2b7"},{"problem":41,"code":"(fn [xs n]\n  (loop [i 1 ys xs rs []]\n    (case ys\n      [] rs\n      (recur (inc i) (rest ys) (if (= (mod i n) 0) rs (conj rs (first ys)))))))","user":"55316b8ae4b076ab5578f825"},{"problem":41,"code":"(fn [s n]\n    (let [drp-help (fn drp [x m res]\n                     (if (empty? x)\n                       res\n                       (if (= m 1)\n                         (drp (rest x) n res)\n                         (drp (rest x) (- m 1) (conj res (first x))))))]\n      (drp-help s n [])))","user":"52b2f9cae4b0c58976d9acfb"},{"code":"(fn [l n]\n  (loop [cnt 1, orig l, acc []]\n    (cond\n      (empty? orig) acc \n      (= 0 (mod cnt n)) (recur (inc cnt) (rest orig) acc)\n      :else (recur (inc cnt) (rest orig) (conj acc (first orig))))))","problem":41,"user":"4e89ddf9535d3e98b8023284"},{"code":"(fn drop-nth [coll n]\n  (into [] (flatten (partition-all (dec n) n coll))))","problem":41,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"code":"(fn [A B](map second (filter #(first %) (map vector (flatten (repeat (conj (vec (repeat (- B 1) true)) false))) A))))","problem":41,"user":"4e68ed35535d8ccf87e9fe92"},{"code":"(fn [coll n] \n(keep-indexed #(when-not (zero? (mod (+ %1 1) n)) %2) coll))","problem":41,"user":"52e657e4e4b09f7907dd1472"},{"code":"#(for [x (range (count %1)) :when (> (rem (+ x  1)  %2) 0)] (nth %1 x))","problem":41,"user":"511a0374e4b06c8af011181a"},{"code":"(fn [coll n] ( let [m (mod (count coll) n) ] (concat (mapcat drop-last (partition n coll) ) (take-last m coll ) ) ) )","problem":41,"user":"52628bb0e4b03e8d9a4a7089"},{"problem":41,"code":"(fn [l n] (filter (complement nil?) (map-indexed #(if (zero? (mod (inc %1) n)) nil %2) l)))","user":"5a208195e4b0ff51aa4b32a3"},{"problem":41,"code":"(fn [s n] (loop [r () t s]\n            (if (empty? t) (apply concat (reverse r)) (recur (cons (take (dec n) t) r) (drop n t) )) ) )","user":"53b3ea79e4b047364c0444ab"},{"code":"(fn [xs n]\n  (map second \n       (remove #(= (mod (first %) n) 0) \n               (map #(vector %1 %2) \n                    (iterate inc 1) xs))))","problem":41,"user":"4e615cd2535d8ccf87e9fe58"},{"problem":41,"code":"(fn dropp [xs n]\n  (loop [from xs\n         to []\n         index 1]\n    (if (empty? from)\n      to\n      (let [[head & tail] from\n            next-to (if (zero? (mod index n))\n                      to\n                      (conj to head))]\n        (recur tail next-to (inc index))))))","user":"52ee46e5e4b05e3f0be25ec5"},{"problem":41,"code":"(fn[xs n] (keep-indexed #(if (not= 0 (mod (inc %) n)) %2) xs))","user":"56824e1be4b0945ebc182a91"},{"code":"(fn [col,div] (keep-indexed #(if (> (mod (inc %1) div) 0) %2) col))","problem":41,"user":"4f54ecf1e4b0a7574ea717f0"},{"problem":41,"code":"(fn rmn-2\n  [s n]\n  (remove nil? (mapcat butlast (partition n n [nil] s)))\n)","user":"52c70127e4b0c2d177d6211a"},{"problem":41,"code":"(fn [coll n]\n  (->>\n   coll\n   (partition-all n)\n   (map #(take (dec n) %))\n   (flatten)))","user":"5561d2c2e4b0c656e3ff17cd"},{"code":"(fn [col n]\n   (take-while #(not (nil? %))\n               (mapcat butlast (partition n n (repeat nil) col))))","problem":41,"user":"500ea957e4b00fff93030f9b"},{"code":"(fn [col x] (mapcat #(if (= (count %) x) (drop-last %) %) (partition-all x col)))","problem":41,"user":"52f53589e4b05e3f0be25f2c"},{"problem":41,"code":"(fn [l n]\n  (vec\n   (flatten\n    (map\n      (fn [m] (if (= (count m) n) (drop-last m) m))\n      (partition n n [] l)))))","user":"534aa5d3e4b084c2834f4a6b"},{"code":"(fn drop-nth [coll n]\n  (letfn [(smart-drop [c]\n            (if (= n (count c))\n              (drop-last c)\n              c))]\n    (flatten (map smart-drop (partition-all n coll)))))","problem":41,"user":"4e95a440535dbda64a6f6b37"},{"problem":41,"code":"#(->>\n  (partition (dec %2) %2 [] %1)\n  (mapcat identity))","user":"5c219c0fe4b07e362c230581"},{"code":"#(keep-indexed (fn [idx itm] (if (> (mod (inc idx) %2) 0) itm)) %)","problem":41,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":41,"code":"(fn\n\t[coll numero]\n\t(loop [iter 0\n\t\t\t\t result []]\n\t\t(cond\n\t\t\t(= iter (count coll)) result\n\t\t\t:else\n\t\t\t(if (= 0 (rem (inc iter) numero))\n\t\t\t\t(recur (inc iter) result)\n\t\t\t\t(recur (inc iter) (conj result (nth coll iter)))\n\t\t\t\t))\n\t\t)\n\t)","user":"5d797deee4b02e6b30c93541"},{"code":"(fn [x n] (loop [innercount 0 result []]\n            (if (> (count x) innercount)\n              (recur (+ innercount 1)\n                     (if (= (mod (+ innercount 1) n) 0)\n                       result\n                       (conj result (nth x innercount))\n                     )\n               )\n              result)))","problem":41,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn [coll n] \n  (keep-indexed \n  (fn [i e] (if (not= 0 (rem (+ i 1) n)) e)) coll))","problem":41,"user":"4ec3c4a0535dcc7ae8597d5a"},{"problem":41,"code":"(fn [s i]\n  (loop [c (vector (first s)) s (rest s) t (- i 2)]\n    (if (empty? s)\n      c\n      (if (zero? t)\n        (recur c (rest s) (dec i))\n        (recur (conj c (first s)) (rest s) (dec t))))))","user":"540c8f3fe4b0addc1aec6705"},{"code":"(fn [s n]\n  (for [se s\n        :let [x se\n              i (+ (.indexOf s x) 1)]\n        :when (not= (mod i n) 0)]\n    x))","problem":41,"user":"4eca7a87535d6d7199dd3705"},{"code":"(fn [xs n]\n  (map second (filter (fn [x] (not= (dec n) (mod (first x) n))) (map-indexed vector xs))))","problem":41,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"(fn drop-nth\n  [coll n]\n    (when (seq coll)\n      (flatten\n        (cons (take (dec n) coll)\n              (drop-nth (drop n coll) n)))))","problem":41,"user":"4e5914e0535d8a8b8723a29b"},{"problem":41,"code":"(fn \n  [coll n]\n  (mapcat (partial take (dec n)) (partition-all n coll)))","user":"548db64ce4b0e286459a121c"},{"problem":41,"code":"(fn [XS X]\n  (let [func (fn iter [xs seq count]\n               (cond (empty? xs) seq\n                     (= (mod count X) 0) (iter (rest xs) seq (+ count 1))\n                     true (iter (rest xs) (conj seq (first xs)) (+ count 1))))]\n    (func XS [] 1)))","user":"5583888ae4b05c286339e117"},{"code":"(fn f [x n]\n  (keep-indexed\n    #(if (zero? (mod (inc %1) n)) nil %2)\n  x)\n)","problem":41,"user":"4ea1ecfa535d7eef308072bb"},{"code":"(fn [xs n]\n  (->> xs \n       (partition n n [])\n       (mapcat #(take (dec n) %))\n       )\n  )","problem":41,"user":"522f483ce4b032bbe342415a"},{"problem":41,"code":"(fn [coll n]\n  (loop [c coll result []]\n    (if (empty? c)\n      result\n      (recur (drop n c) (into [] (concat result (take (dec n) c)))))))","user":"5ec6b354e4b08d0ec38692d8"},{"problem":41,"code":"#(for [x (range (count %1))\n      :let [y (get %1 x)]\n      :when (not (= 0 (rem (inc x) %2)))]\n  y)","user":"5f38eecce4b0574c87022c72"},{"problem":41,"code":"(fn [coll nth-drop]\n   (flatten (reduce #(if (= (count %2) nth-drop)\n                      (conj %1 (drop-last %2))\n                      (conj %1 %2)) [] (partition nth-drop nth-drop [] coll))))","user":"56c60b36e4b05cc29241eead"},{"problem":41,"code":"(fn [ss n]\n  (letfn [(wut [s i]\n            (lazy-seq\n             (cond\n               (> i (count ss)) nil\n               (= 0 (mod i n)) (wut (rest s) (inc i))\n               :else (cons (first s) (wut (rest s) (inc i))))))]\n    (wut ss 1)))","user":"5cf6522be4b0b71b1d808a58"},{"problem":41,"code":"#(loop [i 1 c (count %1) r []]  (if (> i c) r (recur (inc i) c (if (zero? (mod i %2)) r (conj r (nth %1 (dec i)))))))","user":"525b142fe4b0cb4875a45d05"},{"problem":41,"code":"#(apply concat (partition-all (dec %2) %2 %1))\n\n;(fn [coll n] (mapcat #(if (= (count %) n)\n;                        (drop-last %)\n;                        %)\n;                     (partition-all n coll)))\n\n;(fn [coll n]\n;    (keep-indexed #(if (not= (mod (+ 1 %1) n) 0)\n;                     %2)\n;                  coll))\n\n; 문제를 잘못 이해 n번째가 아니라 값에 대해서로 생각\n;(fn [coll x] (remove #(if (= (mod %1 x) 0)\n;                          true\n;                          false) coll))","user":"572830e6e4b0c5bde472c152"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed (fn [idx item] (when-not (= (mod (+ idx 1) n) 0) item)) coll))","user":"542769f8e4b01498b1a71b24"},{"problem":41,"code":"(fn [s bn] (mapcat #(if (= (count %) bn) (butlast %) %) (partition-all bn s)))","user":"53286f84e4b09d4e7a9b5505"},{"code":"(fn dropnth [xs n]\n  (if (empty? xs) \n    xs\n    (concat (take (dec n) xs) (dropnth (drop n xs) n))))","problem":41,"user":"52d660eae4b09f7907dd1356"},{"problem":41,"code":"(fn [l n](apply concat (partition-all (dec n) n l)))","user":"5c852e3ae4b0c8042a70ce78"},{"code":"#(map %1 (for [x (range) :when (not (zero? (rem x %2))) :while (<= x (count %1))] (dec x)))","problem":41,"user":"52160dbee4b0bf4bffd29cb3"},{"code":"#(flatten (partition-all (- %2 1) %2 %1))","problem":41,"user":"4e860e85535db62dc21a62f1"},{"problem":41,"code":"#(reduce concat (map (fn [x] (take (- %2 1) x)) (partition-all %2 %1)))","user":"5c1edf23e4b0efcb0b05b25d"},{"problem":41,"code":"(fn t [l n] (keep-indexed (fn [i x] (when (pos? (rem (inc i) n)) x)) l))","user":"5f2c4c44e4b033932238a662"},{"problem":41,"code":"(fn [x y] (map first (filter #(not= y (second %)) (map vector x (flatten (repeat (range 1 (inc y))))))))","user":"54b8dfece4b0ed20f4ff6e9a"},{"problem":41,"code":"(fn [c n] (map second (remove (comp zero? first) (map vector (map #(mod (inc %) n) (range)) c))))","user":"5a3d7afae4b0447ef91cc5a6"},{"problem":41,"code":"(fn filter-nth [coll n]\n  (->> coll\n       ((fn [x] (map #(vector %1 %2) x (range))))\n       (filter #(not= 0 (mod (+ (second %) 1) n)))\n       (map first)))","user":"5d45bd1de4b07c84aa5ae6a4"},{"code":"(fn [l n]\n  (for [[x i] (map #(list %1 (inc %2))\n                l (range))\n        :when (not (= (mod i n) 0))]\n    x))","problem":41,"user":"4ff5744ae4b0678c553fc36a"},{"code":"(fn [coll n] \n  (map (fn [x] (first x))\n    (filter (fn [x] (not= 0 (mod (inc (second x)) n))) \n      (map-indexed (fn [index item] (list item index)) coll))))","problem":41,"user":"4ec42c11535dcc7ae8597d5f"},{"problem":41,"code":"(fn [coll nth] \n          (->> coll\n               (map-indexed (fn [a b] [(+ a 1) b]))\n               (filter (fn [x] (not (= (mod (first x) nth) 0))))\n               (map last)\n               )\n          )","user":"4f03e60d535dcb61093f6b7a"},{"code":"#(mapcat butlast (partition %2 %2 [12333324325424353456345345346346345634637457457457546456456333] %))","problem":41,"user":"50aca92ee4b071b89ef26232"},{"code":"(fn [s n]\n  (vec\n    (keep #(if (not (nil? %1)) %1)\n    (flatten\n      ((fn [acc t]\n        (if (< (count t) n)\n          (conj acc t)\n          (recur (conj acc (take (- n 1) t)) (nthnext t n)))) [] s)))))","problem":41,"user":"4e333091535deb9a81d77f25"},{"problem":41,"code":"#(->> %\n      (partition %2 %2 [nil])\n      (mapcat drop-last))","user":"51dc5033e4b09c47a74ce109"},{"code":"#((fn every-nth [n c]\n  (when-let [coll (seq c)]\n\t\t(concat (drop-last (- (count coll) (- n 1)) coll) \n\t\t\t\t(every-nth n (drop n coll))))) %2 %1)","problem":41,"user":"4ee91d00535d93acb0a6688b"},{"problem":41,"code":"(fn [coll n]\n  (loop [acc '() rem coll i 1]\n    (if (nil? (seq rem)) (reverse acc)\n        (if (= i n)\n          (recur acc (rest rem) 1)\n          (recur (cons (first rem) acc) (rest rem) (inc i))))))","user":"5d126728e4b02c15ef02199a"},{"problem":41,"code":"#(mapcat (fn [coll] (if (= (count coll) %2)\n                      (drop-last coll)\n                      coll))\n           (partition-all %2 %1))","user":"5650b8a0e4b0284900eef6c3"},{"problem":41,"code":"(fn \n    [lst n]\n  (let [ct (count lst)]\n    (loop [i 1, [head & tail] lst, out []]\n      (if (> i ct)\n        out\n        (if (= 0 (mod i n))\n          (recur (+ 1 i) tail out)\n          (recur (+ 1 i) tail (conj out head)))))))","user":"5e65bfe4e4b0fd0acd1586b9"},{"problem":41,"code":"(fn drop-nth [m n]\n  (if (empty? m) []\n    (concat (take (dec n) m) \n            (drop-nth (drop n m) n))))","user":"56441e72e4b0018b46ad8c09"},{"problem":41,"code":"(fn drop-nth [seq nth]\n  (if (empty? seq)\n    nil\n    (concat (take (dec nth) seq) (drop-nth (drop nth seq) nth))))","user":"56fbcc1fe4b07572ad1a88d5"},{"code":"(fn dropn [s n]\r\n  (if (not (empty? s)) (concat (take (dec n) s) (dropn (drop n s) n))))","problem":41,"user":"504e14c2e4b078edc5f593bf"},{"code":"(fn [coll n]\n  (map\n   (partial nth coll)\n   (filter #(not= (mod (inc %) n) 0) (range (count coll)))))","problem":41,"user":"532ecd44e4b019098a6f8b49"},{"problem":41,"code":"(fn [s nth]\n  (loop [in s\n         out []\n         counter 1]\n    (cond\n      (empty? in) out\n      (= 0 (mod counter nth)) (recur (rest in) out (inc counter))\n      :else (recur (rest in) (conj out (first in)) (inc counter)))))","user":"55f8180fe4b06e875b46ceba"},{"problem":41,"code":"(fn [coll n]\n   (->> coll\n        (partition-all n)\n        (map (partial take (dec n)))\n        (flatten)\n   ))","user":"564ecc9ee4b0284900eef6a1"},{"code":"(fn [xs drop]\n  (keep-indexed #(if-not (= 0 (mod (inc %1) drop)) %2) xs))","problem":41,"user":"52a779fce4b0c58976d9ac1a"},{"problem":41,"code":"#(keep-indexed (fn [i n] (if (not= (rem (inc  i) %2) 0) n)) %)","user":"571e6d73e4b0145328a76292"},{"problem":41,"code":"(fn bk-drop-every\n  [coll n]\n  (let [ps (partition n n (repeat 0) coll)]\n    (filter #(not (= 0 %)) (mapcat drop-last ps))))","user":"5426fb8fe4b01498b1a71b1f"},{"problem":41,"code":"(fn [coll nthIdx] (keep-indexed #(if (not= (mod (+ %1 1) nthIdx) 0) %2) coll))","user":"5b59c513e4b02d533a91bd81"},{"problem":41,"code":"(fn [coll mark] (keep-indexed (fn [idx v] (if (not= 0 (mod (inc idx) mark)) v)) coll))","user":"58f3c18ee4b0438e51c2cead"},{"code":"(fn drop_nth\n  ([target_list n index result_list]\n    (cond\n      (empty? target_list) result_list\n      (> index 0)\n      ;ADD FIRST AND KEEP GOING\n      (recur (rest target_list) n (mod (+ index 1) n) (concat result_list (list (first target_list))))\n      :else\n      ;SKIP FIRST AND KEEP GOING\t\n      (recur (rest target_list) n (mod (+ index 1) n) result_list))\n  )\n  ([list_to_be_pock_marked n]\n    (drop_nth list_to_be_pock_marked n 1 '())\n  )\n)","problem":41,"user":"502be4fae4b08f5602f232eb"},{"problem":41,"code":"(fn me [l n] (if (< (count l) n) l (let [p (split-at n l)](concat (drop-last(first p)) (me (last p) n)))))","user":"54edcf96e4b024c67c0cf866"},{"code":"(fn [l n]\n  (keep-indexed #(if (or (= 0 %1) (not= 0 (mod (+ 1 %1) n))) %2) l)\n  )","problem":41,"user":"535943b3e4b04ce2eb3ed295"},{"problem":41,"code":"(fn [coll n]\n(mapcat #(take (dec n) %) (partition-all n coll)))","user":"4f47d84fe4b0d56e7bb92bc3"},{"problem":41,"code":"(fn drop-every [s nth]\n  (flatten\n    (map #(take (dec nth) %)\n      (partition-all nth s)\n    )\n  )\n)","user":"58d737cee4b03c36ff7e5982"},{"code":"(fn dropn [coll n]\n  (mapcat #(take (dec n) %) (partition-all n coll)))","problem":41,"user":"5264383be4b03e8d9a4a70cb"},{"code":"(fn [coll n]\n  (let [x (partition 2 (interleave (cycle (range 1 (inc n)))\n                                   coll))\n        y (remove #(= n (first %)) x)]\n\t(map #(second %) y)\n  )\n)","problem":41,"user":"50f0ec9ce4b0d527ce5b30df"},{"code":"(fn [coll n]\n  (flatten\n   (concat\n   (map #(drop-last %) (partition n coll))\n   (take-last (rem (count coll) n) coll))))","problem":41,"user":"513fb358e4b00f13ea1bd893"},{"problem":41,"code":"#(apply concat (partition-all (dec %2) %2 %))\n#_(-> (partition-all (dec %2) %2 %)\n      flatten) \n\n#_(fn [coll n]\n  (-> (partition-all (dec n) n coll)\n   flatten))\n#_(fn drop-nth [coll n]\n  (->> coll\n  (map vector (iterate inc 1)) \n  (remove #(zero? (mod (first %) n))) (map second)))","user":"52faf67ce4b047fd55837005"},{"problem":41,"code":"(fn [coll idx]\n  (keep-indexed #(if (not= (mod (inc %1) idx) 0) %2) coll))","user":"58182480e4b0c0e9c07b83a7"},{"problem":41,"code":"(fn [col n]\n  (mapcat identity (partition-all (dec n) n col)))","user":"56c427bbe4b05cc29241ee94"},{"code":"(fn [col n] (keep-indexed #(if (= 0 (mod (+ 1 %1) n)) nil %2) col))","problem":41,"user":"4eb01df4535d7eef30807337"},{"code":"#(loop [ret [] s %1]\r\n    (if (next s)\r\n      (recur (concat ret (take (- %2 1) s)) (drop %2 s))\r\n  ret))","problem":41,"user":"4e5a3891535d8a8b8723a2aa"},{"problem":41,"code":"(fn dropn [lst n] \n  (cond\n   (empty? lst) lst\n   :else (concat (take (dec n) lst) (dropn (drop n lst) n))\n   ))","user":"59e8cd8be4b0249b72820739"},{"code":"(fn [coll n] (flatten (map #(if (= n (count %)) (drop-last %) %) (partition-all n coll))))","problem":41,"user":"507a9b29e4b08327cd804a6e"},{"problem":41,"code":"(fn drop-nth [sq idx]\n  (loop [ctr 1\n         builder []\n         s sq]\n    (if (empty? s) builder\n                   (if (= ctr idx)\n                     (recur 1 builder (rest s))\n                     (recur (inc ctr) (conj builder (first s)) (rest s))))))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":41,"code":"#(keep-indexed (fn [a b] (if (not= 0 (mod (inc a) %2)) b)) %1)","user":"5b59d176e4b02d533a91bd86"},{"problem":41,"code":"(fn [x y] (loop [x x y y i 1 l []] (if (empty? x) l (recur (rest x) y (inc i) (if (= 0 (mod i y)) l (conj l (first x)))))))","user":"5c308385e4b0d62ef62d9f1c"},{"code":"#(mapcat butlast (partition-all %2 (concat %1 '(0))))","problem":41,"user":"4ed94d69535d10e5ff6f5303"},{"code":"(fn [x y] \n  (map #(nth x (dec %))\n  (filter #(not= 0 (rem % y)) (range 1 (inc (count x))))            ))","problem":41,"user":"5105ed16e4b01150e115ebe2"},{"code":"(fn [xs modulo]\r\n  (loop [n 1, ys xs, acc []]\r\n    (if (empty? ys) acc\r\n      (recur (inc n) (rest ys) (if (zero? (mod n modulo)) acc\r\n                                    (conj acc (first ys)))))))","problem":41,"user":"4dea9406535d08e6dec9fe01"},{"code":"(fn [lis n]\n  (flatten (reverse\n             ((fn f[l acc]\n                (let [h (take (- n 1) l) t (drop n l)]\n                  (if (= '() l)\n                    acc\n                    (f t  (cons h acc))))) lis []))))","problem":41,"user":"4df9c598535d04ed9115e77a"},{"problem":41,"code":"#(mapcat (fn [x] (if (= (count x) %2) (drop-last x) x)) (partition %2 %2 nil %1))","user":"580e2941e4b0849f6811b74e"},{"problem":41,"code":"(fn drop-nth \n   [s n]\n   (when (not-empty s)\n   (vec (concat (take (dec n) s) (drop-nth (drop n s) n)))))","user":"545e9cf1e4b01be26fd7467f"},{"problem":41,"code":"(fn prob41\n  ([s n] (prob41 s n 1))\n  ([s n i]\n   \t(cond\n     \t(empty? s) s\n        (= i n) (prob41 (rest s) n 1)\n     \t:else (cons (first s) (prob41 (rest s) n (inc i))))))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":41,"code":"(fn[coll i] (mapcat #(take (dec i) %) (partition-all i coll)))","user":"56188848e4b053970a773aea"},{"problem":41,"code":"#(flatten (concat (map butlast (partition %2 %1))\n                  (drop (* %2 (quot (count %1) %2)) %1)))","user":"598601f9e4b021a7a535fe79"},{"code":"(fn [s n]\n  (loop [ans (), unseen s]\n    (if (seq unseen)\n      (recur (concat ans (take (dec n) unseen)) (rest (drop (dec n) unseen)))\n      ans)))","problem":41,"user":"506ab9bae4b05d3b7762c74c"},{"problem":41,"code":"(fn [l x]\n  (mapcat #(take (dec x) %) (partition-all x l))\n  )","user":"548f3ee4e4b0e286459a1237"},{"problem":41,"code":"(fn [x y] (keep-indexed (fn [i e] (if (not= (mod (inc i) y) 0)  e nil) ) x))","user":"500e3238e4b068062f6e8d8f"},{"code":"#(loop [xs %1 y %2 n 1 current []] (if (= nil (first xs)) current (recur (rest xs) y (+ n 1) (if (= 0 (mod n y)) current (conj current (first xs))))))","problem":41,"user":"52fa250ee4b047fd55836ff3"},{"problem":41,"code":"(fn [xs c] (first (reduce (fn [[xs i] x] (if (= 0 i) [xs, (- c 1)] [(conj xs x), (- i 1)])) [[] (- c 1)] xs)))","user":"54c641f8e4b045293a27f628"},{"problem":41,"code":"(fn drop-nth [li n]\n  (cond (empty? li) '()\n        :else (concat (take (dec n) li)\n                      (drop-nth (drop n li) n))))","user":"5786c182e4b0ebec4cfb74fd"},{"code":"(fn [x y] (loop [index 0 n 1 result []] (cond (= index (count x)) result (= n y) (recur (inc index) 1 result) true (recur (inc index) (inc n) (conj result (nth x index))))))","problem":41,"user":"4e975bce535dbda64a6f6b53"},{"problem":41,"code":"(fn drop-nth [l n]\n  (if (<= n 1)\n    '()\n    (if (< (count l) n)\n      l\n      (do\n        (loop [l1 '() l2 l]\n          (if (= (count l1) (dec n))\n            (concat l1 (drop-nth (rest l2) n))\n            (recur (concat l1 (list (first l2)))\n                   (rest l2))))))))","user":"55e4487ce4b050e68259b44c"},{"problem":41,"code":"(fn\n  [xs n]\n  (loop [x xs y [] i 1]\n    (if (< (count x) 1)\n      y\n      (if (= (mod i n) 0)\n        (recur (rest x) y (inc i))\n        (recur (rest x) (conj y (first x)) (inc i))))))","user":"51071f2ee4b05b2b4eee748e"},{"problem":41,"code":"(fn drp [x y]\n  (if (empty? x)\n    []\n    (concat (take (dec y) x) (drp (drop y x) y))))","user":"586b6a0ae4b01531a375e957"},{"code":"(fn[x,y](reverse (vals (select-keys (zipmap (iterate inc 1) x) (filter #(< 0 (rem % y)) (range 1 100))))) )","problem":41,"user":"4fb3dd1ee4b081705acca2a5"},{"code":"(fn [seq n]\n     (apply concat (partition (- n 1) n nil seq)))","problem":41,"user":"51f5539fe4b0abb92f97f9cd"},{"code":"(fn [c n](keep-indexed #(when (not= (dec n) (mod %1 n)) %2) c))","problem":41,"user":"4fd29d7ce4b04c3a95aa0424"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (loop [xs coll current (* n (int (/ (count coll) n)))]\n    (println \"current =\" current)\n    (if (<= current 0)\n      xs\n      (recur (concat (take (dec current) xs) (drop current xs)) (- current n)))))","user":"53c126fce4b00fb29b22125b"},{"code":"(fn drop-nth [ c n ]\n  (if (empty? c)\n    '()\n    (concat (take (dec n) c) (drop-nth (take-last (- (count c) n) c) n))\n  )\n)","problem":41,"user":"51e1a1fae4b06a68e693eaf6"},{"problem":41,"code":"(fn [values item-index]\n  (flatten (map #(if (= (count %) item-index) (drop-last %) %)\n                (partition-all item-index values))))","user":"57261810e4b0c5bde472c11c"},{"problem":41,"code":"(fn [s n]\n  (let [pom (fn p [se i] (if (empty? se) [] (if (= i n) (p (rest se) 1) (cons (first se) (p (rest se) (inc i))))))]\n    (pom s 1)))","user":"5d1e19c4e4b02ea6f0fb69af"},{"problem":41,"code":"(fn drop-nth\n  [col n]\n  (flatten (map #(take (dec n) %) (partition-all n col))))","user":"55996253e4b031d6649c9baa"},{"problem":41,"code":"(fn drop_every_nth_item\n  ;\"Function which drops every Nth item from a sequence\"\n[lst x]\n(when-not (empty? lst)\n  (lazy-cat (take (dec x) lst) (drop_every_nth_item (nthnext lst x) x))))","user":"5bbbd077e4b0a20761a23615"},{"code":"(fn [xs n]\n  (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) xs))","problem":41,"user":"520693e1e4b0bf4f1882c829"},{"problem":41,"code":"(fn [l r] (keep-indexed #(when (not= (mod (+ 1 %1) r) 0) %2) l))","user":"55b22c33e4b0da326a65cf79"},{"problem":41,"code":"(fn [lst n]\n  (map second\n       (remove #(zero? (mod (first %) n))\n               (map list (iterate inc 1) lst))))","user":"5a99b863e4b0d174b936c7ae"},{"problem":41,"code":"(fn dropnth [s n]\n  (loop [a s counter n ans nil]\n    (cond\n     (empty? a) (reverse ans)\n     (<= counter 1) (recur (rest a) n ans)\n     :else (recur (rest a) (dec counter) (conj ans (first a))))))","user":"5a962c09e4b0d174b936c765"},{"problem":41,"code":"(fn [icol nth]\n    (let [gen-seq (fn gen-seq [col ct]\n                    (lazy-seq\n                     (if (empty? col) []\n                         (if (= 0 (mod ct nth))\n                           (gen-seq (rest col) (inc ct))\n                           (cons (first col) (gen-seq (rest col) (inc ct)))))))]\n      (gen-seq icol 1)))","user":"57aa290de4b0b8559636fc65"},{"code":"(fn [s n]\n  (for [i (range (count s))\n        :when (not (= (rem (+ 1 i) n) 0))]\n    (nth s i )))","problem":41,"user":"511b233ae4b07ab9ec456180"},{"problem":41,"code":";;#(into [] (flatten (map rest (partition-all %2 (concat [0] %)))))\n\n; #(into [] (flatten (partition (dec %2) %2 nil %1)))\n\n#(flatten (partition-all (dec %2) %2 %))","user":"565487dce4b0f9d632dd8482"},{"problem":41,"code":"(fn [coll n]\n    (mapcat drop-last (partition n n '(nil) coll)))","user":"53613db8e4b0243289761e41"},{"code":"(fn [x n]\n  ((fn drp [l y z]\n    (cond\n      (empty? l) '()\n      (= y 1) (drp (rest l) z z)\n      :else (concat (list (first l)) (drp (rest l) (dec y) z)))) x n n))","problem":41,"user":"5012aefce4b0c8732600222a"},{"code":"(fn [s n]\n  (keep-indexed (fn [index item]\n                  (when (not= (rem (inc index) n) 0)\n                        item))\n                s))","problem":41,"user":"516385cee4b055933a9ca02d"},{"problem":41,"code":"(fn drop-every-nth [myseq n]\n        (let [partitioned (partition n myseq)\n              trailing-elements (take-last (mod (count myseq) n) myseq)]\n          (concat (apply concat (map drop-last partitioned)) trailing-elements)))","user":"5455510fe4b0e397800069df"},{"problem":41,"code":"(fn drop-nth [s n]\n  (remove nil?\n   (map-indexed\n     (fn [idx itm] (if (not= 0 (mod (+ idx 1) n)) itm))\n     s)))","user":"5392500ae4b0b51d73faaeaf"},{"code":"(fn [s n] (keep-indexed #(if (zero? (mod (inc %1) n)) nil %2) s))","problem":41,"user":"52c69672e4b0c2d177d62110"},{"code":"#(apply concat (map (fn [s] (take (dec %2) s)) (partition-all %2 %1)))","problem":41,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn [coll n]\n  (keep-indexed\n      (fn [i v]\n          (when (> (rem (inc i) n) 0) v))\n      coll))","problem":41,"user":"50a2f901e4b029e8bace362a"},{"problem":41,"code":"(fn [xs step] (mapcat butlast (partition step step [:_] xs)))","user":"5545eebee4b0a04f79299539"},{"code":"(fn [xs n]\n  (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n xs)))","problem":41,"user":"5160195ae4b0e2be8aa20be3"},{"code":"(fn [c x] (keep-indexed #(if (not= (rem %1 x) (dec x)) %2) c))","problem":41,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"code":"(fn [col cnt] (mapcat #(take (dec cnt) %) (partition-all cnt col)))","problem":41,"user":"51ab1718e4b04e3dc0c27b2f"},{"problem":41,"code":"(fn [s n]\n  (loop [i 1, l s, r []]\n    (if (empty? l)\n      r\n      (recur (inc i)\n             (rest l) \n             (if (= 0 (mod i n))\n               r\n               (conj r (first l)))))))","user":"5c6e1006e4b0fca0c1622744"},{"problem":41,"code":"(fn drop-nth [s n]\n  (if (< (count s) n)\n    s\n    (concat (take (- n 1) s) \n            (drop-nth (drop n s) n))))","user":"59733c91e4b01722bebd4c9b"},{"code":"(fn [coll n]\n  (map second (filter (fn [[idx val]] (not (zero? (mod (inc idx) n)))) (map vector (range) coll))))","problem":41,"user":"5225271fe4b01819a2de42f9"},{"problem":41,"code":"#_(fn drop-every-nth [col n]\n  (loop [col col\n         i 1\n         res []]\n    (if (empty? col)\n      res\n      (recur (rest col) (inc i) (if (zero? (rem i n)) res (conj res (first col)))))))\n\n(fn drop-every-nth [col n]\n  (apply concat (map #(take (dec n) %) (partition-all n col))))","user":"569ab3e2e4b0542e1f8d144a"},{"problem":41,"code":"#(reduce-kv\n  (fn [v i x]\n    (if (zero? (mod (inc i) %2))\n      v\n      (conj v x)))\n  [] %1)","user":"4db6d993535d1e037afb2180"},{"problem":41,"code":"(fn [x n] \n  (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) x))","user":"58bc6a88e4b0888cdc949d16"},{"code":"#(apply concat (partition (dec %2) %2 nil %1))","problem":41,"user":"4f82f9f7e4b033992c121c10"},{"code":"(fn drop-nth [coll n] (lazy-seq (when-let [s (seq coll)] (concat (take (dec n) s) (drop-nth (drop n s) n)))))","problem":41,"user":"4e218464535d04ed9115e816"},{"problem":41,"code":"(fn everynth \n  ([coll n] (everynth coll n 1))\n  ([coll n i] (if (empty? coll) coll (if \n                (= 0 (mod i n))\n                (everynth (rest coll) n (inc i))\n                (into [(first coll)] (everynth (rest coll) n (inc i)))\n                )))\n)","user":"5680fff3e4b0966858e4d8f6"},{"code":"(fn [s n] (flatten (map #(take (- n 1) %1) (partition-all n s))))","problem":41,"user":"4fd6028ce4b0d4de60cee37b"},{"code":"(fn remove-nth [x n]\n  (map second\n       (remove #(zero? (mod (inc (first %))\n                            n))\n               (map-indexed list x))))","problem":41,"user":"52890634e4b0239c8a67ae5e"},{"problem":41,"code":"(fn [coll n]\n  (mapcat\n    #(take (dec n) %)\n    (partition-all n coll)))","user":"59503c5de4b066ee0a44ae8e"},{"problem":41,"code":"(fn [coll n]\n(flatten\n(for [i (partition-all n coll)]\n  (if (= n (count i))\n    (drop-last i)\n    i))))","user":"5aa8f753e4b0d174b936c8d9"},{"code":"(fn [s n] (keep-indexed #(if (not= (mod (inc %) n) 0) %2) s))","problem":41,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn [lst n]\n  (loop [result []  left lst  idx 1]\n    (if (empty? left)\n      result\n      (recur\n        (if (not= 0 (mod idx n))\n          (conj result (first left))\n          result)\n        (rest left)\n        (inc idx)))))","problem":41,"user":"4f90e238e4b0dcca54ed6c94"},{"problem":41,"code":"(fn [x y] (mapcat #(take (- y 1) %) (partition-all y x)))","user":"53cdb2c4e4b00fb29b2212e5"},{"problem":41,"code":"(fn [l n]\n  (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n l)))","user":"5396c94be4b0b51d73faaee3"},{"code":"(fn [coll n]\n    (filter #(not (nil? %))\n            (map-indexed\n              (fn [idx elem] (if (= (dec n) (mod idx n)) nil elem)) coll)))","problem":41,"user":"4fa2fa5ee4b081705acca186"},{"code":"(fn drop-every [l n]\n  (if (empty? l)\n    l\n    (concat (take (dec n) l) (drop-every (drop n l) n))))","problem":41,"user":"50015be1e4b0678c553fc41a"},{"problem":41,"code":"(fn dn\n  ([xs n] (dn xs n 1))\n  ([xs n r]\n   (when-not (empty? xs) (let\n     [rm (dn (rest xs) n (inc r))]\n     (if (= (mod r n) 0) rm (cons (first xs) rm))\n      \n      )\n    )\n   )\n  )","user":"6045582fe4b02d28681c77b6"},{"problem":41,"code":"(fn f[s n]\n  (if (empty? s)\n    []\n    (concat (take (dec n) s)\n          (lazy-seq (f (drop n s) n)))))","user":"5398123ee4b0b51d73faaef3"},{"problem":41,"code":"(fn drop-nth [col n]\n  (apply concat\n         (#(partition-all (dec %2) %2 %) col n)))\n;dead when argument n is 1","user":"562e05e0e4b0a45d2ff83023"},{"problem":41,"code":"(fn drop-every [seq1 n]\n  (map second (filter #(not= (mod (first %) n) (dec n)) (map #(vector %1 %2) (range (count seq1)) seq1))))","user":"561d8936e4b064ca9f4b16b2"},{"problem":41,"code":"(fn [ls p] (mapcat #(take (dec p) %) (partition p p () ls)))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n   (loop [position (- n 1)\n          counter 1\n          coll coll]\n     (if (>= (* counter position) (count coll))\n       coll\n       (recur position (inc counter) (remove #{(nth coll (* position counter))} coll)))))\n\n\n;;;;;;;;;;;;;;;;;\n\n;(defn drop-nth [lat n]\n;  (flatten\n;   (map #(if (= (count %) n) \n;           (drop-last %) \n;           %) \n;        (partition-all n lat))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":41,"code":"(fn [coll n] (mapcat (partial take (dec n)) (partition n n nil coll)))","user":"54bad522e4b0ed20f4ff6eb8"},{"code":"(fn [coll n]\n  (flatten (concat\n    (map drop-last (partition n coll))\n    (take-last (rem (count coll) n) coll))))","problem":41,"user":"500cb910e4b05f7c30cfa698"},{"code":"(fn dropn [l n]\n  (letfn\n    [(wop [i bound modified-l]\n     (cond\n      (= i bound) modified-l\n      (= (mod (+ i 1) n) 0) (wop (+ i 1) bound modified-l)\n      true (wop (+ i 1) bound (conj modified-l (nth l i)))))]\n    (wop 0 (count l) [])))","problem":41,"user":"52d7b0ade4b09f7907dd137c"},{"code":"(fn [xs x]\n  (vec (mapcat #(take (dec x) %) \n               (partition-all x xs))))","problem":41,"user":"509eeb3be4b08df8156e9e37"},{"code":"(fn [xs n]\n  (keep-indexed\n    #(if (> (mod (inc %1) n) 0) %2) xs))","problem":41,"user":"52a7fec0e4b0c58976d9ac25"},{"problem":41,"code":"#(filter (fn [x] (not= (mod (inc (.indexOf %1 x)) %2) 0)) %1)","user":"57a9b00be4b0a96607956232"},{"problem":41,"code":"#(map second (filter (fn [[x _]]\n                       (not= (mod (inc x) %2) 0))\n                     (map-indexed vector %1)))","user":"5829d9f8e4b051871117bf4d"},{"problem":41,"code":"(fn [l n] (loop [xs l i 1 accu '()]\n            (if (empty? xs)\n              (reverse accu)\n              (if (= 0 (mod i n))\n                (recur\n                 (rest xs)\n                 (inc i) accu)\n                (recur\n                 (rest xs)\n                 (inc i)\n                 (cons (first xs) accu))\n                 ))))","user":"55009d17e4b07d26eda61d5d"},{"problem":41,"code":"(fn [x y]\n  (map #(nth x %) (filter #(not= (rem (+ 1 %) y) 0) (range (count x)))))","user":"54381729e4b032a45b869310"},{"code":"(fn [x l]\n  (for [i (range (count x)) :when (not (= 0 (mod (+ i 1) l)))]\n    (nth x i)))","problem":41,"user":"5051e2abe4b0a561d07d8f0a"},{"code":"(fn [s n]\n  (loop [l s r [] c 1]\n    (cond (empty? l) r\n          (= 0 (mod c n)) (recur (rest l) r (inc c))\n          :else (recur (rest l) (conj r (first l)) (inc c)))))","problem":41,"user":"4fae258de4b081705acca246"},{"problem":41,"code":"(fn [coll n]\n (vec\n  (keep-indexed\n   #(when-not\n    (zero? (rem (inc %1) n)) %2) coll)))","user":"510608ebe4b01150e115ebe3"},{"problem":41,"code":"(fn [col dropn] (map second (filter #(not= 0 (mod (first %) dropn)) (map vector (range 1 (inc (count col))) col))))","user":"5790e62ae4b0ebec4cfb75b0"},{"code":"(fn [l i] (into [] (flatten (map-indexed #(if (= (mod (+ %1 1) i) 0) () %2) l))))","problem":41,"user":"5220909fe4b0e6a83c89259f"},{"problem":41,"code":"#(vec (filter (fn [x] (not (nil? x))) (mapcat drop-last (partition %2 %2 (repeat nil) %1))))","user":"5d02fe44e4b0cc9c915881c0"},{"code":"(fn \r\n  [coll n]\r\n  (remove nil? \r\n          (map-indexed (fn [idx item]\r\n                         (when-not (zero? (mod (inc idx) n))\r\n                           item)) coll)))","problem":41,"user":"4fee04a0e4b0678c553fc308"},{"problem":41,"code":"#(for [i (range (count %)) :let [r (rem (+ i 1) %2)] :when (not (zero? r))] (get % i))","user":"5d7d17ece4b02e6b30c93558"},{"code":"#(mapcat take (repeat (dec %2)) (partition-all %2 %1))","problem":41,"user":"521c6a1ae4b0c4ef0be83083"},{"code":"(fn [x n]\n  (let [positions (range 1 (inc (count x)))]\n    (filter #(not (= :drop %))\n    (map (fn [s p] (if (= 0 (rem p n)) :drop s)) \n          x \n          positions))))","problem":41,"user":"4f343e60e4b0e243712b1eb5"},{"problem":41,"code":"( fn rrn\n     [i acc vec n]\n     (if (empty? vec)\n       acc (if (= 0 (rem (+ (count acc) i) n))\n             (rrn (inc i) acc (next vec) n)\n             (rrn i (conj acc (first vec)) (next vec) n)\n             )))\n   1 []","user":"5bdc4a76e4b0ed4b8aab4c30"},{"code":"(fn dropnth [lst n]\n   (filter #(not (nil? %))\n           (map-indexed (fn [idx elem] (if (= 0 (mod (inc idx) n)) nil elem)) lst)))","problem":41,"user":"504ec4d3e4b069badc5a33c9"},{"problem":41,"code":"(fn [coll x]\n  (map #(last %)\n       (filter #(not= (mod (first %) x) 0)\n               (map vector (iterate inc 1) coll))))","user":"57aa2b97e4b0b8559636fc66"},{"code":"#(keep-indexed (fn [i item] (if-not (zero? (rem (inc i) %2)) item)) %)","problem":41,"user":"4f1af7e4535d64f603146471"},{"problem":41,"code":"(fn dropper-of [coll pos]\n  (keep-indexed #(if (not= (- pos 1) \n                           (mod %1 pos))\n                     %2) \n                coll))","user":"53d40508e4b00fb29b221332"},{"code":"(fn [v c] ((fn f [r v c i]\n             (if (empty? v)\n                 r\n                 (if (= 0 (mod i c))\n                    (f r  (rest v) c (inc i) )\n                    (f (conj r (first v) ) (rest v) c (inc i))\n                 )\n              )\n            ) [] v c 1)\n  )","problem":41,"user":"5149c2f1e4b0829bd132edb0"},{"code":"(fn [coll n]\n  (filter identity (mapcat #(take (dec n) %) (partition n n nil coll))))","problem":41,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":41,"code":"(fn drop-every-nth\n  [coll n]\n  (keep-indexed #(if (not= 0 (mod (+ %1 1) n)) %2) coll)\n)","user":"5c3440fee4b0d62ef62d9f50"},{"problem":41,"code":"(fn [coll num]\n  (letfn [(skip-nth [coll acc num cnt]\n            (if (not-empty coll)\n              (if (pos? (mod cnt num))\n                (recur (rest coll) (conj acc (first coll)) num (inc cnt))\n                (recur (rest coll) acc num (inc cnt)))\n              acc))]\n    (skip-nth coll [] num 1)))","user":"54ccf9d5e4b057c6fda3a295"},{"problem":41,"code":"(fn [v i]\n  (filter #(not (nil? %))\n          (map-indexed (fn [idx itm]\n                         (if (not= (mod (inc idx) i) 0)\n                           itm)) v)))","user":"58408643e4b089d5ab817deb"},{"problem":41,"code":"(fn [list nth]\n  (loop [l list\n         i 1\n         result '()]\n    (if (empty? l)\n      (reverse result)\n      (recur\n        (rest l)\n        (inc i)\n        (if (zero? (mod i nth))\n          result\n          (cons (first l) result))))))","user":"5954cea2e4b066ee0a44af0a"},{"problem":41,"code":"#(reduce (fn [x y]\n           (concat x\n                   (if (= (count y) %2)\n                     (drop-last y)\n                     y)))\n         '()\n         (partition-all %2 %1))","user":"609e9b64e4b00e9e6653c426"},{"code":"(fn magic\n  ([l n c]\n    (if (empty? l)\n        nil\n        (if (= 0 (mod c n))\n            (magic (rest l) n (inc c))\n            (cons (first l) (magic (rest l) n (inc c))))))\n  ([l n]\n    (magic l n 1)))","problem":41,"user":"504e3afae4b0f6ff3350c488"},{"code":"#(remove (fn[e](if (some #{e} (for[n (range (dec %2) (count %) %2)] (nth % n))) true false)) %)","problem":41,"user":"5138d08be4b0a5db03d727db"},{"problem":41,"code":"(fn [lst n] (mapcat (partial take (dec n)) (partition-all n lst)))","user":"6074dfa4e4b069485764de4c"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n coll)))","user":"59074b7ce4b047aa04b19951"},{"problem":41,"code":"(fn [col n]\n  (apply concat (partition-all (dec n) n col)))","user":"57a4fa50e4b0a966079561f1"},{"code":"#(flatten (partition (- %2 1) %2 [] %1))","problem":41,"user":"52d2ca1ce4b099d49816f0b4"},{"code":"(fn [coll n]\n  (apply concat\n    (for [x (partition-all n coll)]\n      (take (- n 1) x))))","problem":41,"user":"51d08d67e4b067c365486351"},{"code":"(fn dropevery                                                                        \n  [coll e]                                                                             \n  (loop [items coll c 1 acc '()]                                                       \n    (if (empty? items)                                                                 \n      (reverse acc)                                                                    \n      (recur (rest items) (inc c) (if (= 0 (mod c e)) acc (conj acc (first items)))  ) \n      )                                                                                \n    )                                                                                  \n  )","problem":41,"user":"50573ed8e4b0012181721987"},{"problem":41,"code":"(fn [xs n] \n        (loop [[x :as xs] xs\n               i 1\n               acc []]\n            (if (empty? xs) acc\n                (recur (rest xs) (inc i) (if (= 0 (rem i n)) acc (conj acc x))))))","user":"5f82cfcce4b0c071e6c840fb"},{"problem":41,"code":"(fn [a b] (for [y (range 1 (inc (count a))) :let [z (get a (dec y))] :when (not (zero? (mod y b)))] z))","user":"5e9e8648e4b00a66d4a95178"},{"problem":41,"code":"(fn [xss n]\n  (loop [xs xss\n         acc []\n         counter 1]\n    (cond\n      (empty? xs)   acc\n      (= counter n) (recur (rest xs)\n                           acc\n                           1)\n      :else         (recur (rest xs)\n                           (conj acc (first xs))\n                           (inc counter)))))","user":"50478418e4b0371827a27bc3"},{"problem":41,"code":"(fn [x n] (map #(x %)\n               (remove #(= 0 (rem (+ % 1) n))\n                     (range (count x)))))","user":"5835bc73e4b089d5ab817ce9"},{"problem":41,"code":"(fn [c n] (keep-indexed #(if (not= (rem (inc %1) n) 0) %2) c))","user":"57a5da5ee4b0a966079561fe"},{"code":"(fn remnth [lst n]\n    (loop [acc [] l lst cou 1]\n        (println acc)\n        (if (empty? l)\n            acc\n            (recur (if (zero? (mod cou n)) acc (conj acc (first l))) (rest l) (inc cou))))\n)","problem":41,"user":"52c17e42e4b07a9af5792367"},{"problem":41,"code":"(fn foo [coll n](keep-indexed #(if (not= 0 (rem (+ %1 1) n)) %2) coll))","user":"553024c3e4b076ab5578f80d"},{"problem":41,"code":"(fn [s v] (flatten (map #(take (- v 1) %) (partition-all v s))))","user":"60a9f193e4b00e9e6653c476"},{"problem":41,"code":"(fn foo [s n]\n   (loop [in s out [] nu n]\n     (if (empty? in)\n       out\n       (if (<= nu 1)\n         (recur (rest in) out n)\n         (recur (rest in) (conj out (first in)) (dec nu))))))","user":"5bbaf02fe4b0a20761a235f4"},{"code":"(fn [elements num] \n  (mapcat #(if (= (count %) num) (drop-last %) %) (partition-all num elements)))","problem":41,"user":"529c6995e4b04e0c58e87b61"},{"problem":41,"code":"(fn [l n] (flatten (concat (map drop-last (partition n l)) (take-last (rem (count l) n) l))))","user":"55a2bcebe4b0acc240e31529"},{"problem":41,"code":"(fn drop_nth [xs n]\n  (mapcat (partial take (dec n)) (partition-all n xs)))","user":"553abb28e4b09218d5f44ffb"},{"problem":41,"code":"(fn [coll n] (flatten (map #(if (= (count %1) n) (butlast %1) %1 ) (partition-all n coll))))","user":"5e31a4b0e4b05b4b0151622b"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed (fn [idx itm] (if (zero? (mod (inc idx) n)) nil itm)) coll))","user":"5412d5d2e4b01498b1a719d9"},{"code":"(fn [coll n] (reverse (vals (filter #(not= (mod (key %) n) 0) (zipmap (range 1 Double/POSITIVE_INFINITY) coll)))))","problem":41,"user":"4eb2eae5535d7eef30807351"},{"problem":41,"code":"(fn [seq nth]\n    (-> (map #(if (= (count %) nth)\n                (drop-last 1 %)\n                %)\n             (partition-all nth seq))\n        (flatten)))","user":"5715b929e4b07c98581c3ae2"},{"code":"(fn dr [coll n] \n  (keep-indexed #(if (not (= (mod (inc %1) n) 0)) %2) coll))","problem":41,"user":"4f82f1b9e4b033992c121c0f"},{"code":"(fn [input n] (for [x (filter #(> (rem (inc %) n) 0) (range (count input)))]\n                 (nth input x)))","problem":41,"user":"53838742e4b06839e8705ee0"},{"code":"(fn\n  [coll n]\n  (keep-indexed #(if (> (mod (inc %1) n) 0) %2) coll))","problem":41,"user":"525fffb8e4b03e8d9a4a702b"},{"problem":41,"code":"(fn drop-nth-item [the-vector n]\n  (if (empty? the-vector)\n    '()\n    (concat\n     (take (dec n) the-vector)\n     (drop-nth-item (drop n the-vector) n))))","user":"586a663ce4b0f14aab7c88be"},{"problem":41,"code":"#((comp flatten partition-all)\n  (dec %2)\n  %2\n  %)","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":41,"code":"(fn [xs n]\n  (letfn[(f [xs c]\n            (when-not (empty? xs)\n              (if (= c n)\n                (f (rest xs) 1)\n                (cons (first xs) (f (rest xs) (inc c))))))]\n    (f xs 1)))","user":"5f5e7158e4b02876ed9fcff0"},{"problem":41,"code":"(fn [lst n] (into [] (keep-indexed #(when (not= (mod (+ %1 1) n) 0) %2) lst)))","user":"6073a4ade4b069485764de3e"},{"problem":41,"code":"(fn [s n] (flatten (map #(take (- n 1) %) (partition n n nil s))))","user":"5b611666e4b0c6492753e70d"},{"code":"#(reduce concat (map (partial take (dec %2)) (partition-all %2 %)))","problem":41,"user":"52271ffee4b04e78ff2e19a9"},{"problem":41,"code":"(fn dropnth\n  ([col n]  (map last (filter\n                        (fn [x] (not= (mod (+ (first x) 1) n) 0))\n                        (map-indexed (fn [idx itm] [idx itm]) col)))))","user":"578f5122e4b0ebec4cfb7592"},{"problem":41,"code":"(fn drop-every-nth-item [seq n]\n  (apply concat (partition-all (dec n) n seq)))","user":"58ed713de4b056aecfd47d84"},{"problem":41,"code":"(fn [coll n]\n  (remove (fn [el] (= (dec n) (mod (.indexOf coll el) n))) coll)\n)","user":"52d6d490e4b09f7907dd1369"},{"code":"(fn [coll n]\n  (for [m (filter #(not= 0 (mod % n)) (range 1 (inc (count coll))))]\n    (coll (dec m))))","problem":41,"user":"53806e5be4b06839e8705ec1"},{"problem":41,"code":"(fn [s n]\n  (remove (partial = \"a\") (mapcat butlast (partition n n \"a\" s))))","user":"57a13745e4b0c3d858beb8e3"},{"problem":41,"code":"(fn [s n]\n  (loop [index 1\n         input s\n         output []]\n    ;(pprint {:index index :input s :output output})\n    (cond\n     (empty? input)\n     output\n     \n     (> (rem index n) 0)\n     (recur (inc index) (rest input) (conj output (first input)))\n     \n     :else\n     (recur (inc index) (rest input) output))))","user":"546c4c5fe4b00cfc9eacc178"},{"code":"(fn \n  [coll n]\n  (when (pos? n)\n    (keep-indexed\n     (fn [idx item] (if (= 0 (mod (inc idx) n))\n                      nil\n                      item))\n     coll)))","problem":41,"user":"4ea5ba92535d7eef308072d9"},{"code":"(fn [seqq n]\n  (apply concat (map #(if (< (count %) n) % (butlast %)) (partition-all n seqq))))","problem":41,"user":"4eadc217535d7eef30807321"},{"code":"(fn f[s n]\n  (if-not (seq s) '()\n    (concat \n      (take (dec n) s) (f (drop n s) n))))","problem":41,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":41,"code":"(fn\n  [seq n]\n  (loop [current [], remaining seq]\n    (if (empty? remaining)\n      current\n      (recur (into current (take (dec n) remaining)) (drop n remaining)))))","user":"5cb703e8e4b026601754b95b"},{"code":"(fn myDrop \n    ([x n y c]\n        (if (empty? x)\n            y\n        (if (= (mod c n) 0)\n            (myDrop (rest x) n y (inc c))\n        (myDrop (rest x) n (conj y (first x)) (inc c)))))\n    ([x n] (myDrop x n [] 1)))","problem":41,"user":"4f03b3fb535dcb61093f6b52"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed #(if-not (zero? (rem (inc %) n)) %2) xs))","user":"521ceb02e4b0c4ef0be830a5"},{"problem":41,"code":"(fn [col value] (flatten (partition-all (- value 1) value col)))","user":"593c653de4b069cdc2982b8f"},{"code":"(fn [s, n]\n  (map second\n    (remove #(zero? (mod (inc (first %)) n))\n      (sort (zipmap (range) s)))))","problem":41,"user":"53940789e4b0b51d73faaec3"},{"problem":41,"code":"(fn dropn [stuff n]\n  (if (empty? stuff)\n    []\n    (concat (vec (take (dec n) stuff)) (dropn (vec (drop n stuff)) n))))","user":"5b2a559be4b063e2438bcc74"},{"problem":41,"code":"(fn [xs n] (flatten (map #(if (= (count %) n) (take (- n 1) %) %) (partition-all n xs))))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn [coll n]\n  (loop [input coll i 0 result []]\n    (if (= input '()) result\n       (recur (rest input) (rem (inc i) n)\n           (if (= i (dec n)) result (conj result (first input)))))))","problem":41,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn [s n] (let [sym (gensym)]\n            (remove #(= % sym)\n                    (mapcat drop-last \n                            (partition n n (repeat sym) s)))))","problem":41,"user":"5294e44de4b02ebb4ef75016"},{"code":"(fn [s n]\n  (mapcat #(take (dec n) %) (partition-all n s))\n)","problem":41,"user":"51ba8f82e4b0fe3ecfb46434"},{"code":"(fn drop-nth [col n]\n  (flatten\n  (lazy-seq\n     (when-let [s (seq col)]\n       (cons (take (- n 1) s) (drop-nth (drop n s) n)))))\n  )","problem":41,"user":"5204f2b1e4b0bf4f1882c7f5"},{"problem":41,"code":"(fn [coll n] \n  (apply concat (partition-all (dec n) n coll)))","user":"54cc4156e4b057c6fda3a28c"},{"problem":41,"code":"(fn [xs c]\n  (loop [acc []\n         xs xs]\n    (if (zero? (count xs))\n      acc\n      (recur (concat acc (take (dec c) xs)) (drop c xs)))))","user":"51bd78c3e4b0ff155d51d2b0"},{"code":"(fn [seq n]\n    (loop [acc nil tail seq]\n        (cond (empty? tail) acc\n              :else         (recur (concat acc (take (- n 1) tail)) (drop n tail)))))","problem":41,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":41,"code":"(fn d [xs n]\n   (mapcat rest(partition-all n (cons 0 xs))))","user":"505223fae4b0a561d07d8f17"},{"code":"(fn [c n] (filter #(not= 0 (mod (+ 1 (.indexOf c %)) n)) c))","problem":41,"user":"4eb44d78535d7eef30807360"},{"code":"(fn [xs n]\n  (mapcat \n    #(if \n      (= (count %) n) \n      (butlast %) \n    %) \n    (partition-all n xs))\n)","problem":41,"user":"50ca2faee4b0a409464667dc"},{"code":"(fn drop-nth [sq nth]\n  (loop [data sq n 1 acc []]\n    (if (empty? data)\n      acc\n      (if (= (mod n nth) 0)\n        (recur (rest data) (+ n 1) acc)\n        (recur (rest data) (+ n 1) (conj acc (first data)))))))","problem":41,"user":"518ebcdce4b0cd6ff5167698"},{"code":"#(flatten(partition-all (dec %2) %2 %1))","problem":41,"user":"522eb5cce4b01cdb292c5f0c"},{"code":"(fn [coll n]\n  (keep-indexed\n    #(if-not (zero? (rem (inc %1) n)) %2)\n    coll))","problem":41,"user":"4f92884de4b0dcca54ed6caf"},{"code":"(fn [l n]\n  (filter (fn [x] x) \n    (map-indexed \n      #(if \n        (= (dec n) (mod %1 n)) \n          nil \n          %2) l)))","problem":41,"user":"4edd9d79535d10e5ff6f532b"},{"problem":41,"code":"(fn dr [s n]\n    (let [dropper (fn [se] (if (> n (count se)) se (drop-last 1 se)))]\n      (->> s\n          (partition-all n)\n          (map dropper)\n           (apply concat)\n           \n           )))","user":"54924f64e4b0b312c081ff42"},{"problem":41,"code":"(fn [l k] (keep-indexed (fn [index item] (if (== 0 (mod (+ 1 index) k)) nil item)) l))","user":"56708ac8e4b0a866af6896f5"},{"problem":41,"code":"(fn  indexer[coll delta]\n  (filter \n   #(if (< (.indexOf coll %) delta)\n      (not= (.indexOf coll %) (- delta 1))\n      (not= (.indexOf coll %) (- (+(* (quot (.indexOf coll %) delta) delta) delta) 1)))\n      \n       coll))","user":"538d70abe4b0b51d73faae6e"},{"code":"#(mapcat (fn [x] (if (= %2 (count x)) (butlast x) x)) \r\n          (partition-all %2 %1))","problem":41,"user":"4e9fde3c535d7eef3080729b"},{"code":"#(mapcat (partial take (dec %2) ) (partition-all %2 %))","problem":41,"user":"5086ca15e4b004985b776e62"},{"code":"(fn drop-nth\n  [col n]\n    (let [[head rest] (split-at n col)]\n      (if (seq rest)\n        (concat (drop-last head) (drop-nth rest n))\n        (if (== (count head) n)\n          (drop-last head)\n          head))))","problem":41,"user":"4e86fd2d535dceadca46984d"},{"problem":41,"code":"#(keep-indexed (fn [index value] (if (not= (mod (inc index) %2) 0) value)) %1)","user":"5e121a89e4b099d064962fe4"},{"code":"#(loop [res [] coll %]\n  (if (seq coll)\n    (recur (concat res (take (- %2 1) coll)) (drop %2 coll))\n    res))","problem":41,"user":"4ecfb458535d44c135fd68bb"},{"code":"(fn drp\n  ([vals item] (drp vals item [] 1))\n  ([vals item cur indx]\n    (if (nil? vals)\n      cur\n      (if (= 0 (mod indx item))\n        (drp (next vals) item cur (inc indx))\n        (drp (next vals) item (conj cur (first vals)) (inc indx))))))","problem":41,"user":"4e98a6d0535dbda64a6f6b5e"},{"code":"#(reduce (fn [c x] (if (= 0 (mod (inc x) %2)) c (conj c (% x)))) [] (range (count %)))","problem":41,"user":"526c2340e4b03e8d9a4a7281"},{"problem":41,"code":"(fn [coll n]\n  (filter\n   (fn [element]\n     (not (some #(= % element) (take-nth n (drop (dec n) coll))))\n   )\n   coll)\n)","user":"5da975b9e4b000c986472c32"},{"problem":41,"code":"(fn [coll n]\n  (loop [n n \n         coll coll\n         cnt 0\n         res []]\n       (cond\n         (empty? coll) res\n         (= cnt (dec n)) (recur n (rest coll) 0 res)\n         :else (recur n (rest coll) (inc cnt) (conj res (first coll))))))","user":"55b5fc18e4b01b9910ae298d"},{"problem":41,"code":"(fn drop-every-nth\n  [s n]\n  (let [[result right] (map vec (split-at (dec n) s))]\n    (if (empty? right)\n      result\n      (flatten (conj result (drop-every-nth (rest right) n))))))","user":"54a6645be4b09f271ff37c87"},{"code":"(fn [coll idx] \n  (apply concat\n       (map #(if (= idx (count %))\n               (drop-last %) %) \n            (partition-all idx coll))))","problem":41,"user":"4e99819a535dbda64a6f6b66"},{"problem":41,"code":"(fn [coll n]\n    (keep-indexed #(when (not= (mod (inc %1) n) 0) %2) coll))","user":"5006c169e4b0678c553fc48d"},{"code":"(fn [l n] (->> l (partition-all n) ((fn [v] (mapcat #(take (- n 1) %) v)))))","problem":41,"user":"51f98843e4b09be9c177e54e"},{"problem":41,"code":"(fn f\n  [xs n]\n  (keep-indexed (fn [idx val]\n                  (if (not= (dec n) (mod idx n))\n                    val))\n                xs))","user":"5b64370ae4b0c6492753e73c"},{"code":"(fn [s n] (map first (filter #(not= 0 (mod (last %) n)) (map vector s (iterate inc 1)))))","problem":41,"user":"50ed4626e4b01236b1d4983c"},{"problem":41,"code":"(fn\n  [sa drop-n]\n  (loop [s sa n 1 res '()]\n    (if (empty? s)\n      (reverse res)\n      (if (= (rem n drop-n) 0)\n        (recur (rest s) (inc n) res)\n        (recur (rest s) (inc n) (conj res (first s)))))))","user":"529f9bf2e4b04e0c58e87bb4"},{"code":"(fn [xs n]\n  (lazy-seq\n   (loop [r [] xs xs i 1]\n     (if (empty? xs)\n       r\n       (if (= (mod i n) 0)\n         (recur r (rest xs) (inc i))\n         (recur (conj r (first xs)) (rest xs) (inc i)))))))","problem":41,"user":"50d0b466e4b00b15ecee9764"},{"problem":41,"code":"(fn [lst, n] (->> (partition-all n lst) (map (partial take (dec n))) (flatten)))","user":"563b6a2ae4b0bfe05bf11812"},{"problem":41,"code":"#(flatten (map (fn [x] (take (dec %2) x)) (partition-all %2 %1)))","user":"557e6b73e4b05c286339e0d6"},{"problem":41,"code":"#(->> %1\n      (partition-all (dec %2) %2)\n      (apply concat))","user":"575b3e9be4b02ea11479935b"},{"problem":41,"code":"(fn [x y]\n  (let [n (count x)\n        vals (filter #(pos? (mod (inc %) y)) (range n))]\n                     (map #(nth x %) vals)))","user":"555f0789e4b0a2eb076a39bf"},{"code":"(fn [arr n] (for [x arr :when ((complement zero?) (rem (+ 1 (.indexOf arr x)) n))] x))","problem":41,"user":"52a5d1f3e4b0c58976d9abf1"},{"code":"(fn [nums at]\n  (loop [counter 0 nns nums a at vn []]\n    (if (= counter (count nns))\n      (vec vn)\n      (if (not (= (mod (+ counter 1) a) 0))\n        (recur (inc counter) nns a (concat vn (list (nns counter))))\n        (recur (inc counter) nns a vn)\n      )\n    )\n  )\n)","problem":41,"user":"4e8b73e4535d65386fec2120"},{"problem":41,"code":"(fn [xs n]\n    (loop [xs xs i 1 ys []]\n      (if (empty? xs)\n        ys\n        (if (zero? (mod i n))\n          (recur (rest xs) (inc i) ys)\n          (recur (rest xs) (inc i) (conj ys (first xs)))\n          ))))","user":"58b81490e4b0ebc645576d8c"},{"problem":41,"code":"(fn [coll v] (reduce-kv #(if (zero? (mod (inc %2) v)) %1 (conj %1 %3)) [] coll))","user":"5744d088e4b009280f9f2b41"},{"code":"(fn [l n] (mapcat (fn [ll] (if (= (count ll) n) (butlast ll) ll)) (partition-all n l)))","problem":41,"user":"527ba695e4b03e8d9a4a7596"},{"problem":41,"code":"(fn [coll n]\n  (map second (filter #(not= (rem (first %) n) 0) (map list (iterate inc 1) coll)\n                      )\n       )\n  )","user":"564b495de4b0284900eef667"},{"code":"(fn dropn [coll n]\n  (mapcat #(take (- n 1) %)  (partition-all n coll)))","problem":41,"user":"4e4b4564535dc968683fc4d3"},{"code":"(fn my-part4 [coll n]\n  (loop [coll coll\n   acc  []] \n    (let [next (take (dec n) coll)\n\t  more (drop n coll)]\n      (if (empty? coll)\n\t(apply concat acc)\n\t(recur more (conj acc next))))))","problem":41,"user":"4dc54eb2535d8a4b2fd74284"},{"code":"(fn [sequ ct]\n    (flatten (map-indexed (fn not-nth [index item]\n                            (if (zero? (rem (+ 1 index) ct))\n                              '()\n                              item)) sequ)))","problem":41,"user":"50057f23e4b0678c553fc466"},{"problem":41,"code":"(fn [s n]\n    (remove #(= % ::remove-me)\n            (map-indexed (fn [i e]\n                           (if (and (not (zero? i))\n                                    (zero? (mod (inc i) n)))\n                             ::remove-me\n                             e))\n                         s)))","user":"5a5d0726e4b0512ff01cd91b"},{"code":"(fn drop-nth\n  [sq nth]\n  (let [\n        xs  (seq sq)\n        len (count xs)\n        skp (take len (flatten (replicate (/ len nth) (range 1 (inc nth)))))\n        _ (prn skp) ]\n    (mapcat #(if (= %2 nth) [] [%1]) xs skp)))","problem":41,"user":"4f047c07535dcb61093f6bcd"},{"problem":41,"code":"#(mapcat (fn [a] \n           (take (- %2 1) a)) \n         (partition-all %2 %1))","user":"5410499de4b01498b1a719a6"},{"code":"#(keep-indexed \n  (fn [i e] \n    (if (zero? (mod (inc i) %2)) \n      nil\n      e))\n  %)","problem":41,"user":"511ffbabe4b0e88f5a20c40c"},{"problem":41,"code":"(fn [c n] (keep-indexed (fn [i v] (if (= 0 (mod (inc i) n)) nil v) ) c))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":41,"code":"(fn [x y]\n  (loop [result [] samp x index 0]\n    (if (empty? samp)\n      result\n      (if (= index (dec y))\n        (recur result (rest samp) 0)\n        (recur (conj result (first samp)) (rest samp) (inc index))))))","user":"53d977f1e4b0e771c302547a"},{"problem":41,"code":"(fn drop-nth [seqz n]\n  (if (> n (count seqz)) seqz\n      (concat (take (- n 1) seqz) (drop-nth (drop n seqz) n))))","user":"5414b7c4e4b01498b1a719ed"},{"problem":41,"code":"(letfn [(f [a b n]\n           (let [u (take (- n 1) a)\n                 v (drop n a)]\n             (if (empty? v)\n               (reverse (apply conj b u))\n               (recur v (apply conj b u) n))))]\n       (fn [lst n] (f lst '() n)))","user":"5800edaae4b0a837a8b30c48"},{"code":"(fn [xs n]\n  (letfn [(f83 [xs n]\n            (when-let [coll (seq xs)]\n              (let [fs (take (- n 1) coll)]\n                (flatten (cons fs (f83 (drop n coll) n))))))]    \n    (f83 xs n)))","problem":41,"user":"4dd59d8b535dae65d5c462eb"},{"code":"(fn [xs n]\r\n  (apply concat (map rest (partition-all n (cons '() xs)))))","problem":41,"user":"4ddc1c89535d02782fcbea01"},{"code":"(fn [seq n]\n  (map first\n       (remove #(= (mod (second %) n) 0)\n               (map #(list %1 %2) seq (iterate inc 1)))))","problem":41,"user":"524cdd51e4b0752c4cb68ccc"},{"problem":41,"code":"(fn [sq x]\n  (loop [in  sq  \n         out []] \n    (if (= (count in) 0)  \n      out \n      (recur (drop x in) \n             (->> in\n                  (take (dec x)) \n                  (into out))\n             ))))","user":"5992bcb2e4b0866487ed0d7b"},{"code":"(fn [coll p] \n  (keep-indexed \n   #(if (not= 0 (rem (+ 1 %1) p)) %2) coll))","problem":41,"user":"53886d2fe4b0640c7a9a589d"},{"problem":41,"code":"(fn foo [col n]\n(filter #(-> % nil? not) (reduce \n  #(if (and (-> %1 empty? not) (-> %1 count inc (rem n) (= 0)))\n    (conj %1 nil)\n    (conj %1 %2))\n [] \n col))\n)","user":"59b0e877e4b0e1f4e384c8d3"},{"problem":41,"code":"#(loop[in %1 every %2 lng (count in) current 0 res []](if(= current lng) res (recur in every lng (inc current) (if(zero? (mod (+ current 1) every)) res (conj res (nth in current))))))","user":"5565d5e4e4b0c656e3ff181f"},{"code":"#(mapcat (fn[x] (take (- %2 1) x)) (partition-all %2 %))","problem":41,"user":"4e12cc9d535d04ed9115e7d2"},{"code":"(fn dropn [values n]\n  (loop [running-values values\n         result []\n         index 1]\n    \t\t(if (not (empty? running-values))\n    \t\t\t(if (= n index)\n              \t\t(recur (rest running-values) result 1)\n              \t\t(recur (rest running-values) (conj result (first running-values)) (+ 1 index)))\n\t\t  result)))","problem":41,"user":"4fe89475e4b07c9f6fd12c4f"},{"code":"#(reduce (fn [res [x y]]\n           (if y (conj res x) res))\n         []\n         (map list\n              %1\n              (cycle (concat (repeat (dec %2) true) [nil]))))","problem":41,"user":"4dad8c92c9a9d6ed1699dc57"},{"problem":41,"code":"(fn dropnth [x n]\n  (filter #(not (= 0 (mod (inc (.indexOf x %)) n))) x)\n  )","user":"5d641841e4b0c9e5857d502e"},{"code":"(fn [sq n]\r\n  (reverse \r\n    (reduce  \r\n      (fn [t ss]\r\n        (apply conj t (if (= (count ss) n) (butlast ss) ss)))\r\n      '() \r\n      (partition-all n sq))))","problem":41,"user":"4f0da4e4535d0136e6c22319"},{"problem":41,"code":"(fn [coll n]\n  (loop [coll coll\n         acc []]\n    (if (empty? coll)\n      acc\n      (recur (drop n coll)\n             (concat acc (take (dec n) coll))))))","user":"4e435681535dc968683fc4a1"},{"problem":41,"code":"(fn [s n]\n                (loop [s (seq s)\n                       out []\n                       m 1]\n                  (cond\n                    (empty? s) out\n                    (= m n) (recur (rest s)\n                                   out\n                                   1)\n                    :else (recur (rest s)\n                                 (conj out (first s))\n                                 (inc m)))))","user":"5eb22708e4b00a66d4a95204"},{"code":"(fn [l n] (mapcat #(take (dec n) %) (partition n n nil l)))","problem":41,"user":"4daec4a0edd6309eace4d15e"},{"code":"(fn [l n]\n  (let [[_ r] (reduce (fn [[i a] e]\n    (if (= i 1)\n[n a]\n[(dec i) (conj a e)])) [n []] l)] r))","problem":41,"user":"4ed2b168535d44c135fd68dd"},{"problem":41,"code":"(fn my-drop-every-nth [vs n]\n  (loop [[x & rxs :as xs] vs\n         remaining n\n         zs []]\n    (if (empty? xs)\n      zs\n      (if (= remaining 1)\n        (recur rxs n zs)\n        (recur rxs (dec remaining) (conj zs x))))))","user":"54a31fdae4b09f271ff37c64"},{"problem":41,"code":"(fn [lst ho]\n  (let [suu,ho]\n    ((fn tom [x ban]\n       (if (empty? x)\n         ()\n         (if (= 0 (mod ban suu))\n           (tom (rest x) (+ 1 ban))\n           (cons (first x)\n                   (tom (rest x) (+ 1 ban))\n                 )\n           )\n        )\n       )\n     lst 1\n     )\n    )\n  )","user":"57e404a3e4b0bfb2137f5ab1"},{"code":"(fn [s n]\n  (apply concat (partition-all (dec n) n s))\n  )","problem":41,"user":"531490bde4b08068f379ed17"},{"code":"(fn [list i]\n     (keep-indexed (fn [index item] (if (> (mod (+ 1 index) i) 0) item nil)) list))","problem":41,"user":"5038f8d2e4b088a6a14ca75f"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n   #(when (or (= %1 0)\n              (not= (rem (inc %1) n) 0))\n      %2)\n   coll))","user":"51647faae4b003cf19fdde3b"},{"problem":41,"code":"(fn f [s n] \n  (if (empty? s) ()\n    (let [a (take (dec n) s)\n           b (drop n s)]\n      (concat a (f b n))))\n)","user":"5b9ae606e4b0c0b3ffbd4af2"},{"problem":41,"code":"(fn [x n] ( loop [ res [] i 1 ] (if (= (count x) (dec i)) res ( recur ( if (= (rem i n) 0 ) res ( conj res (nth x (dec i) ) )) (inc i) ) ) ) )","user":"5b3aa98be4b02d533a91bbca"},{"problem":41,"code":"#(mapcat next (partition-all %2 (concat [0] %1)))","user":"4e11b92a535d04ed9115e7cb"},{"code":"(fn [sqs idx] ( \n\t\tflatten (\n\t\t\tmap (fn [i val] (list (if (= 0 (mod i idx)) () val))) \n\t\t\t\t(iterate inc 1) \n\t\t\t\tsqs )) \n\t)","problem":41,"user":"4f51697ae4b03ad3f0c10d22"},{"problem":41,"code":"(fn \n  [coll n]\n  (apply concat (map #(if (= n (count %)) (drop-last %) %) (partition-all n coll)))\n  )","user":"5510d948e4b06e50f9beb18d"},{"code":"(fn drop [liste n]\n  (mapcat #(if (= (- n 1) (rem %2 n)) [] [%1]) liste (range (count liste)))\n)","problem":41,"user":"4f84400de4b033992c121c2e"},{"code":"(fn\n  [xs n]\n  (keep-indexed #(if (not= 0 (mod (inc %) n)) %2) xs))","problem":41,"user":"51008b6fe4b0700a7a02d6e4"},{"problem":41,"code":"#(remove (set (take-nth %2 (into [:tmp] %1))) %1)","user":"52a45a7be4b0c58976d9abd8"},{"problem":41,"code":"(fn [startcol n]\n  (loop [col startcol\n         acc []\n         accnum n]\n    (if (empty? col)\n      acc\n      (if (= accnum 1)\n        (recur (rest col) acc n)\n        (recur (rest col) (conj acc (first col)) (dec accnum))\n        )\n\n      )\n\n    )\n\n  )","user":"53b0750fe4b047364c044483"},{"code":"(fn [vect numb] \n  (flatten \n    (map #(take (- numb 1) %) (partition numb numb [] vect))\n  )\n)","problem":41,"user":"508bf05ae4b0f17d83ea26aa"},{"code":"(fn drop-nth [xs n] (apply concat (partition-all (dec n) n xs)))","problem":41,"user":"504f2efae4b0e7ad84dbc4c9"},{"problem":41,"code":"(fn [xs n] (apply concat (map-indexed #(if (zero? (mod (inc %1) n)) nil [%2]) xs)))","user":"549dd591e4b0f3d1d8e70f98"},{"problem":41,"code":"(fn [a-seq el]\n  (keep-indexed #(if ((complement =) (mod (inc %1) el) 0) %2) a-seq))","user":"5974b12be4b01722bebd4cb1"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (if (empty? coll)\n    coll\n    (concat (take (dec n) coll)\n            (drop-nth (drop n coll) n))))","user":"5688873ae4b0dcc4269f406b"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [i x] (if (not= 0 (mod (inc i) n)) x)) coll))","user":"5d4f21f3e4b0776584bd6f4e"},{"code":"(fn [coll token]\n  (mapcat #(take (dec token) %) (partition-all token coll)))","problem":41,"user":"534d5ab7e4b084c2834f4a9c"},{"problem":41,"code":"(fn \n  [x n]\n  (into [] (apply concat (map #(take (- n 1) %) (partition-all n x)))))","user":"5f5e166ce4b02876ed9fcfed"},{"problem":41,"code":"#(keep-indexed (fn [i e] (if (= (mod (inc i) %2) 0) nil e)) %)","user":"540e97f9e4b0addc1aec671f"},{"problem":41,"code":"(fn [xs n] (for [x (range 1 (inc (count xs))) :when (not= (mod x n) 0)] (get xs (- x 1))))","user":"597fa3fbe4b021a7a535fdbf"},{"problem":41,"code":"(fn drop-nth [coll n]\n     (if-not (empty? coll)\n       (concat (take (dec n) coll) (drop-nth (drop n coll) n))))","user":"548ade6de4b0e286459a11f6"},{"code":"(fn dropn [col n]\n(remove nil? (map-indexed\n  (fn [idx itm]\n    (if (not (zero? (mod (inc idx) n))) itm))\n           col)))","problem":41,"user":"52d1e364e4b0d9f9285948e7"},{"problem":41,"code":"(fn [sq n]\n   (loop [sq sq i 1 result []]\n     (if (empty? sq)\n       result\n       (recur (rest sq) (inc i) (if (= 0 (rem i n)) result (conj result (first sq))))\n       )))","user":"602b90c1e4b0d5df2af22266"},{"problem":41,"code":"(fn\n  [coll to-drop]\n  (keep-indexed #(if-not (zero? (mod (inc %) to-drop))\n                   %2)\n                coll))","user":"5a9829e5e4b0d174b936c788"},{"problem":41,"code":"#(mapcat (fn [coll] (take (dec %2) coll)) (partition-all %2 %1))","user":"543823f1e4b032a45b869311"},{"problem":41,"code":"(fn[xs v] (flatten (map #(if (= v (count %)) (drop-last %) %) (partition-all v xs))))","user":"5602ab92e4b04bb52996e1a3"},{"code":"(fn\n  [s k]\n  (apply concat (map #(take (dec k) %) (partition-all k s)))\n  )","problem":41,"user":"510591dde4b06d28cacc92eb"},{"code":"(fn [col, n]\n   (map second\n    (filter #(not= (mod (inc (first %)) n) 0)\n              (map-indexed vector col))))","problem":41,"user":"4f7cbf4ae4b06e829148e1b7"},{"problem":41,"code":"(fn [seq n]\n  (let [c (count seq)\n        matched-index (remove #(= (mod (+ % 1) n) 0) (take c (range)))]\n    (vec (map #(nth seq %) matched-index))))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":41,"code":"(fn [xs n]\n  (flatten\n   (map #(take (dec n) %) (partition-all n xs))))","user":"574ff497e4b02ea114799266"},{"problem":41,"code":"(fn [lst n]\n  (map last\n       (filter #(not (= (mod (first %) n) (- n 1)))\n               (map list (range (count lst)) lst))))","user":"52526161e4b0541d1855b8a6"},{"problem":41,"code":"(fn f [lst n]\n  (flatten (partition (dec n) n nil lst)))","user":"5c62979fe4b0fca0c162264c"},{"code":"#(mapcat identity (partition (dec %2) %2 nil %))","problem":41,"user":"4ef77edb535dced4c769f254"},{"code":"(fn [xs n]\n  (map last\n       (filter #(> (mod (inc (first %)) n) 0)\n                (map-indexed vector xs))))","problem":41,"user":"4f8345c6e4b033992c121c1b"},{"problem":41,"code":"(fn [xs n] (for [[i j] (map-indexed list xs) :when (not (= (rem i n) (- n 1)))] j))","user":"5e2549c8e4b05b4b0151615f"},{"code":"#(let [z (atom 0)] (filter (fn [p] (swap! z inc) (not= (rem @z %2) 0)) %))","problem":41,"user":"52e48632e4b09f7907dd1450"},{"problem":41,"code":"(fn drop-nth [seq n]\n  (when (not (empty? seq))\n  (concat (take (dec n) seq) (drop-nth (drop n seq) n))))","user":"57fc0719e4b0d3187e900987"},{"problem":41,"code":"(fn [coll n] \n          (let [valid-indexes (filter #(>  (mod % n) 0) (range (inc (count coll))))]\n            (map #(nth coll (dec %)) valid-indexes)))","user":"54468fd3e4b032a45b8693b2"},{"problem":41,"code":"(fn [coll n]\n  (map second \n       (filter #(not= (mod (inc (first %)) n) 0) \n               (map vector (range 0 (count coll)) coll))))","user":"5486e317e4b0e286459a11c0"},{"problem":41,"code":"(fn drop-nth [seq n]\n  (loop [idx 0\n         result '()]\n    (if (>= idx (count seq))\n      result\n      (if (= (mod (+ idx 1) n) 0)\n        (recur (+ idx 1) result)\n        (recur (+ idx 1) (concat result [(nth seq idx)]))))))","user":"58ac01f7e4b0005cfeb1a73b"},{"problem":41,"code":"(fn drop-nth [s n]\n  (if (empty? s)\n    '()\n    (concat (take (dec n) (take n s))\n            (drop-nth (drop n s) n))))","user":"57ffd1a9e4b0a837a8b30c2a"},{"problem":41,"code":"(fn [seq index]\n  (reduce #(if (= (mod (inc %2) index) 0)\n             %\n             (conj % (get seq %2))\n             ) \n          [] \n          (range 0 (count seq))))","user":"530c3d88e4b02e82168697d8"},{"code":"(fn drop-nth\n  [xs n]\n  (cond\n    (empty? xs) '()\n    :else (concat\n      (take (dec n) xs)\n      (drop-nth (drop n xs) n))))","problem":41,"user":"4fd6f4d8e4b0dab7d829f37b"},{"problem":41,"code":"(fn [coll n]\n  (let [len (count coll)]\n    (take (- len (quot len n)) (mapcat butlast (partition n n (repeat 0) coll)))\n  )\n)","user":"55e274b4e4b050e68259b436"},{"problem":41,"code":"(fn [s n]\n  (mapcat #(if (> n (count %)) % (butlast %)) (partition-all n s)))","user":"5865c8f0e4b0f14aab7c884e"},{"problem":41,"code":"(fn [items, dropEvery] \n  (loop [remainder items\n         output []]\n    (if (< (count remainder) dropEvery)\n      (concat output remainder)\n      (recur (subvec remainder dropEvery) (concat output (subvec remainder 0 (dec dropEvery))))\n    )))","user":"54336443e4b0b6b47310fcde"},{"problem":41,"code":"(fn [c i]\n       (mapcat\n         (fn [e] (if (= (count e) i) (drop-last e) e))\n         (partition i i nil c)))","user":"551e6526e4b030e6a24d00e8"},{"code":"(fn [c n] (keep-indexed #(if (< 0 (mod (+ %1 1) n)) %2) c))","problem":41,"user":"51d46133e4b013d740b70de2"},{"problem":41,"code":"(fn [items dropNth]\n  (map second \n  (filter #(not= (mod (first %) dropNth) 0)\n    (map #(conj [] % %2) (iterate inc 1) items))))","user":"58d27bcae4b03c36ff7e58fe"},{"code":"(fn my-drop-nth\n        ([xs n]\n           (let [len (count xs)]\n             (my-drop-nth xs n 1 len [])))\n        ([xs n curr cnt acc]\n           (if (= 0 cnt)\n             acc\n             (if (= (mod curr n) 0)\n               (my-drop-nth (rest xs) n (inc curr) (dec cnt) acc)\n               (my-drop-nth (rest xs) n (inc curr) (dec cnt) (conj acc (first xs)))))))","problem":41,"user":"52c58561e4b0c2d177d620f8"},{"code":"(fn d [x n] (flatten (map (fn [y] (if (== n (count y)) (butlast y) y))  (partition n n [] x))))","problem":41,"user":"52b7a904e4b0c58976d9ad51"},{"code":"(fn [input n]\n  (loop [data input result [] counter 1]\n    (if (seq data)\n      (if (= counter n)\n       (recur (rest data) result 1)\n       (recur\n        (rest data)\n        (conj result (first data))\n        (+ counter 1)))\n      result)))","problem":41,"user":"528bba38e4b0239c8a67aea9"},{"code":"(fn [xs x]\n  (flatten (partition-all (dec x) x xs)))","problem":41,"user":"50989786e4b04e098a4c7274"},{"code":"(fn [a n]\n    (loop [l a s []]\n         (let [m (take n l) x (drop n l)]\n\t   (if (= n (count m))\n             (recur x (concat s (butlast m)))\n             (concat s m)\n           )\n         ) \n     \n    )\n  )","problem":41,"user":"52593207e4b0cb4875a45cd3"},{"problem":41,"code":"(fn [coll f]\n  (loop [index 0 ret []]\n    (if (< index (count coll))\n      (if (zero? (rem (+ 1 index) f) )\n        (recur (inc index) ret)\n        (recur (inc index) (conj ret (get coll index)))\n        )\n      ret)))","user":"579601c8e4b0e215f87e8492"},{"code":"(fn [lst n]\n  (for [i (range) :while (< i (count lst)) :when (not= (mod (+ i 1) n) 0)]\n    (lst i)))","problem":41,"user":"4e9a1512535dbda64a6f6b6e"},{"code":"(fn [x n] (mapcat #(take (dec n) %) (partition-all n x)))","problem":41,"user":"518696c1e4b0c40be512d708"},{"problem":41,"code":"(fn [coll n] (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n coll))))","user":"54764cf1e4b0c51c1f4d72a4"},{"problem":41,"code":"(fn [coll n]\n        (loop [coll coll\n               i 1\n               result []]\n          (if (empty? coll)\n            result\n            (if (= (mod i n) 0)\n              (recur (rest coll) (inc i) result)\n              (recur (rest coll) (inc i) (conj result (first coll)))\n            )\n          )\n        )\n      )","user":"53ecd01fe4b0d648e757f4b9"},{"code":"#(let [i (atom 0)] (remove (fn [q] (= 0 (mod (swap! i inc) %2))) %1))","problem":41,"user":"5176afd2e4b085adf681d889"},{"problem":41,"code":"(fn [coll nth] (filterv #(not (zero? (mod (inc (.indexOf coll %)) nth))) coll))","user":"53fe1b42e4b0de5c418485f1"},{"problem":41,"code":"#(reduce-kv \n  (fn [acum i x] \n    (if (zero? (mod (inc i) %2))\n      acum\n      (conj acum x))) \n  [] %1)","user":"60606490e4b03746e80ebf67"},{"problem":41,"code":"(fn [xs n] (keep-indexed (fn [i x] (if (= (rem (inc i) n) 0) nil x)) xs))","user":"5315ba94e4b08068f379ed34"},{"problem":41,"code":"(fn drop-every\n \n  [lst n]\n  (if (<= n (count lst))\n    (flatten\n      (map-indexed (fn\n                     [idx itm]\n\n                     (if (not= 0 (mod (+ 1 idx) n))\n                       itm\n                       ()))\n\n\n                   lst))\n\n    lst))","user":"59e12c94e4b08badc2a0c509"},{"code":"(fn  [seq n]\n(apply concat (partition-all (dec n) n seq)))","problem":41,"user":"52dced9de4b09f7907dd13d7"},{"code":"#(for [x (range (count %)) :when (not= 0 (rem (inc x) %2))] (% x))","problem":41,"user":"512700c4e4b083bb8f88cf14"},{"problem":41,"code":"(fn [s n] (mapcat #(if (> n (count %)) % (drop-last %)) (partition-all n s)))","user":"5042bb9ae4b034ff00315d16"},{"problem":41,"code":"(fn[coll n]\n  (loop [in coll out [] i 1]\n    (cond (empty? in) out\n          (= i n) (recur (rest in) out 1)\n          :else (recur (rest in) (conj out (first in)) (inc i)))))","user":"5472cba1e4b094393f72dd7a"},{"problem":41,"code":"(fn [col n ] (apply concat (partition-all (dec n) n col)))","user":"5957cc41e4b066ee0a44af76"},{"code":"(fn [col n]\r\n(concat (\r\n                 map (fn [x] (second x)) \r\n                 (filter (fn [x] (not= 0 \r\n                                        (mod (first x) n)))\r\n                            (map-indexed (fn [i x] [(inc i) x]) col)))))","problem":41,"user":"508453abe4b0c98812d07891"},{"code":"(fn [coll n]\n  (map second\n    (filter #(not= (mod (first %) n) (dec n))\n      (map vector (range) coll))))","problem":41,"user":"4eae5fe4535d7eef30807325"},{"problem":41,"code":"(fn [l n] (for [[x i] (map list l (range)) :when (not= (dec n) (mod i n))] x))","user":"59258aa7e4b072a2710fce74"},{"code":"(fn [s n]\n  (keep-indexed #(if (> (mod (inc %1) n) 0) %2) s))","problem":41,"user":"4fd2529ae4b04c3a95aa041f"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(when-not (= 0 (mod (inc %1) n)) %2) coll))","user":"5862a8a9e4b0f14aab7c880f"},{"code":"(fn [xs n]\n  (loop [new-xs        '()\n         current-count 1\n         pos           0]\n    (cond \n      (= pos (count xs)) (reverse new-xs)\n      (= current-count n) (recur new-xs \n                                 1 \n                                 (inc pos))\n      :else (recur (conj new-xs (nth xs pos))\n                   (inc current-count)\n                   (inc pos)))))","problem":41,"user":"50da34e4e4b0f31830755b3c"},{"code":"(fn [xs n] \n  (first \n   (reduce \n    (fn [[out i] next] \n      (if (= 0 (mod i n)) [out (inc i)] [(conj out next) (inc i)]\n    )) \n    [[] 1] \n    xs)))","problem":41,"user":"4f50d933e4b03ad3f0c10d11"},{"problem":41,"code":"(fn [s n]\n  (->> s\n       (map-indexed (fn [i x] (if (= (mod (inc i) n) 0) nil x)))\n       (filter (comp not nil?))))","user":"55495318e4b0a04f79299566"},{"problem":41,"code":"(fn [ls, n] (keep-indexed #(if (not= (mod (+ 1 %1) n) 0) %2) ls))","user":"5cbdc591e4b026601754ba00"},{"code":"(fn [s n] (mapcat #(if (>= (count %) n) (butlast %) %) (partition-all n s)))","problem":41,"user":"50bfb5fbe4b05ae8c1cbbd9a"},{"problem":41,"code":"(fn [list n]\n  (flatten (concat (map drop-last (partition n list))\n          (take-last (rem (count list) n) list))))","user":"5a12dea3e4b04bbd27e6da44"},{"code":"(fn foo\n  ([sq i] (reverse (foo sq i 1)))\n  ([sq i a] (cond \n    (empty? sq) []\n    (= i a) (foo (rest sq) i 1)\n    :else (conj (foo (rest sq) i (+ a 1)) (first sq)))))","problem":41,"user":"4dbecb06535d020aff1edf6a"},{"code":"(fn [lst n] (keep-indexed #(if (> (mod (inc %1) n) 0) %2) lst))","problem":41,"user":"50976c84e4b00ad8bab4e961"},{"problem":41,"code":"(fn [xs n]\n  \n   (mapcat #(take (dec n) %) (partition-all n xs)))","user":"5929bdf6e4b072a2710fcf0c"},{"problem":41,"code":"(fn fff [coll n]\n  (map first\n       (filter #(not= (mod (+ 1 (last %)) n) 0)\n                     (map #(vector %2 %1) (range) coll)\n       )\n  )\n)","user":"56195e57e4b053970a773af6"},{"problem":41,"code":"(fn drop-every-nth\n  [coll n]\n  (if (not (empty? coll))\n      (concat (take (dec n) coll) (drop-every-nth (drop n coll) n))))","user":"597f8c93e4b0dbe32238d0c1"},{"code":"#(first\n  (reduce \n  \t(fn [a i] \n    \t(let [l (first a) n (second a)]\n    \t\t(if (< n %2) \n     \t\t [(concat l (list i)) (inc n)] \n      \t\t [l 1]\n      \t\t)  \n      \t)\n    \t) ['() 1] %\n \t )\n  )","problem":41,"user":"51e1c176e4b06a68e693eafb"},{"problem":41,"code":"(fn[coll n]\n(keep-indexed \n#(if (not= (mod (+ %1 1) n) 0)%2)\ncoll))","user":"5a6dbaf5e4b0512ff01cda63"},{"problem":41,"code":"(fn drop-every-nth\n  [coll n]\n  (->> (partition-all n coll)\n       (map #(if (not= (count %) n)\n               %\n               (butlast %)))\n       (apply concat)))","user":"54f39cd6e4b050824f58f5c6"},{"problem":41,"code":"#(keep-indexed (fn [index item] (if (= 0 (mod (inc index) %2)) nil item)) %1)","user":"57b9f35be4b0fbc9809a27f9"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (let [helper \n          (fn rechelper [coll m]\n            (if (empty? coll)\n              []\n              (if (= m 0)\n                (concat [] (rechelper (rest coll) (dec n)))\n                (concat [(first coll)] (rechelper (rest coll) (dec m))))))]\n    (helper coll (dec n))))","user":"4e41a04e535dc968683fc49e"},{"code":"(fn [l n]\n  (for [[i item] (partition 2 (interleave (range (count l)) l))\n        :when (not= (mod (inc i) n) 0)]\n    item))","problem":41,"user":"4f04f847535dcb61093f6beb"},{"code":"(fn dropnth \r\n  ([coll n] (dropnth coll n 1))\r\n  ([coll n m] \r\n    (cond\r\n      (empty? coll)\r\n        '()\r\n      (<= n m)\r\n       (dropnth (rest coll) n 1)\r\n      true\r\n       (cons (first coll) (dropnth (rest coll) n (inc m))))))","problem":41,"user":"4e14108c535d04ed9115e7dd"},{"problem":41,"code":"#(loop [acc %,flag 1,rst []]\n   (if (empty? acc)\n     rst\n     (if (not (= 0 (mod flag %2)))\n      (recur \n       (rest acc)\n       (inc flag)\n       (conj rst (first acc))\n       )\n       (recur \n        (rest acc)\n        (inc flag)\n        rst\n        )\n     ))\n   )","user":"56c50599e4b05cc29241ee9e"},{"code":"(fn [coll n]\n  (let [helper (fn [res coll c]\n                 (let [nextc (inc c)\n                       restcoll (rest coll)]\n                   (if (empty? coll)\n                     res\n                     (if (= (mod c n) 0)\n                       (recur res restcoll nextc)\n                       (recur (conj res (first coll)) restcoll nextc)))))]\n                \n    (helper [] coll 1)))","problem":41,"user":"527c166de4b03e8d9a4a75b3"},{"code":"#(loop [result nil seq %1]\n    (if (= (count seq) 0)\n        (apply concat (reverse result))\n        (recur (cons (take (- %2 1) seq) result)\n               (drop %2 seq))))","problem":41,"user":"4fe87e56e4b07c9f6fd12c40"},{"code":"(fn f [l c] (keep-indexed #(if (zero? (rem (inc %) c)) nil %2) l))","problem":41,"user":"4dc78527535d8a4b2fd7428f"},{"problem":41,"code":";; Bug: Breaks if terms repeat\n;;(fn drop-nth [xs n]\n;;  (filter #(pos? (mod (inc (.indexOf xs %)) n)) xs ))\n\n(fn drop-nth [xs n]\n  (keep-indexed #(if (zero? (mod (inc %1) n)) nil %2) xs ))","user":"60c91f48e4b0e0fa5f1b4304"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (map first\n       (filter\n         #(not= (mod (inc (last %)) n) 0)\n         (map vector coll (range)))))","user":"55b4fa46e4b01b9910ae2983"},{"problem":41,"code":"(fn drop-item [coll index]\n    (flatten (map (fn [x] (if (= index (count x)) (drop-last x) x)) (partition-all index coll))))","user":"567b62fce4b05957ce8c61a6"},{"code":"(fn [x n] (keep-indexed #(if (= (rem %1 n) (dec n)) nil %2) x))","problem":41,"user":"528e64b7e4b0239c8a67aedd"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(when (not= 0 (mod (inc %1) n)) %2) coll))","user":"54b0519be4b09f271ff37d14"},{"problem":41,"code":"(fn [coll  idx ]\n   (->>\n     (map-indexed vector coll)\n     (filter #(not= 0 (mod (inc (first %)) idx )  ))\n     (map second)\n     )\n   )","user":"5a43347ee4b0447ef91cc603"},{"problem":41,"code":"#(flatten (partition-all (dec %2) %2 %1))\n      \n;#(apply concat (partition-all (dec %2) %2 %))\n      \n;(fn [s n] (mapcat (partial take (dec n)) (partition-all n s)))\n      \n;(fn [coll n]\n;  (flatten \n;    (concat \n;      (map #(drop-last %) (partition n coll)) \n;      (take-last (rem (count coll) n) coll))))\n; We partition the sequence, drop last one from each, then stitch them back\n; take care the remaining elements too","user":"5487eb1de4b0e286459a11ca"},{"code":"#(flatten (partition (dec %2) %2 (repeat ()) %))","problem":41,"user":"518b761ae4b0f028e99addee"},{"problem":41,"code":"(fn\n  [items n]\n  \t(let\n      [idxlist (map list items (map inc (range)))]\n      (map first (filter (fn [item] (not= 0 (mod (second item) n))) idxlist))))","user":"56761ab1e4b05957ce8c6154"},{"problem":41,"code":"(fn [coll n]\n  (loop [xs coll\n         result nil]\n    (if (empty? xs) result\n        (recur (drop n xs) (concat result (take (dec n) xs))))))","user":"5146f343e4b04ef915e3731e"},{"code":"(fn [s w]\n  (for [[idx i] (map vector (range) s)\n         :when (not (zero? (mod (inc idx) w)))]\n    i))","problem":41,"user":"4faa8de0e4b081705acca1f8"},{"code":"(fn dropNth2 [coll x] (flatten (map (fn dr [y] (if (> x (count y))\n                                          (vec y)\n                                           (vec (drop-last y)))) (partition-all  x coll) ) ))","problem":41,"user":"5296aa9be4b02ebb4ef75034"},{"code":"(fn [coll n]\n  (map second \n     (remove \n       #(= (mod (first %1) n) 0) \n      (map-indexed #(vector (inc %1) %2) coll))))","problem":41,"user":"52c00e4fe4b07a9af5792342"},{"problem":41,"code":"(fn [coll n] \n  (filter #(not= % :drop) \n          (flatten (map butlast (partition n n (repeat :drop) coll)))))","user":"56e6ef89e4b02e7e935eb6d0"},{"code":"(fn [v n] (->> v \n  (zipmap (range)) \n  (into []) \n  (sort)\n  (remove #(= (- n 1) (rem (first %) n)))\n  (map second)\n))","problem":41,"user":"4f01c938535dcb61093f6a39"},{"problem":41,"code":"(fn nthitem [x n]\n  (when x\n    (lazy-cat (take (dec n) x) (nthitem (nthnext x n) n))))","user":"5958a0c8e4b066ee0a44af8c"},{"problem":41,"code":"(fn [coll n] (flatten (map #(if (= n (count %))                         \n                                  (drop-last %)\n                                  %) (partition-all n coll))))","user":"53483a32e4b084c2834f4a57"},{"problem":41,"code":"(fn nth-remove\n  ([coll index]\n   (nth-remove coll index 1 []))\n  ([coll index i acc]\n   (if (empty? coll)\n     acc\n     (let [[item & remaining] coll]\n       (if (= index i)\n         (recur remaining index 1 acc)\n         (recur remaining index (inc i) (conj acc item)))))))","user":"5777c3d6e4b0979f8965164f"},{"problem":41,"code":"(fn [col n] \n  (keep-indexed \n    (fn [index item] \n      (if\n        (not= 0 (mod (inc index) n))\n          item \n          nil))\n    col))","user":"5470c930e4b094393f72dd64"},{"code":"(fn [l v] (mapcat #(if (= (count %) v) (drop-last %) %) (partition-all v l)))","problem":41,"user":"4f82ed48e4b033992c121c0e"},{"problem":41,"code":"(fn [sq idx1]\n(loop [s sq i 1 result []]\n    (if (empty? s)\n      result\n      (recur\n        (rest s)\n        (inc i)\n        (if\n          (= (rem i idx1) 0)\n          result\n          (concat result [(first s)])\n          )\n        )\n        )\n\n    )\n  )","user":"5f58db95e4b0a0bc16850a9a"},{"code":"(fn [l n] (keep-indexed #(if (not (zero? (mod (inc %1) n))) %2) l))","problem":41,"user":"4ecaaa25535d6d7199dd3708"},{"problem":41,"code":"(fn [xs n]\n  (map (fn [ip1] (nth ip1 1))\n       (filter (fn [ip] (not= 0 (mod (first ip) n)))\n               (map-indexed #(vector (inc %) %2) xs))))\n\n;(fn [xs n]\n;  (map (fn [ip1] (nth ip1 1))\n;       (filter (fn [ip] (not= 0 (mod (first ip) n)))\n;               (map-indexed (fn [idx val] [(inc idx) val]) xs))))\n\n;(fn [xs n]\n;  (loop [in xs out [] i 1]\n;    (println (mod i n))\n;    (cond\n;      (empty? in) out\n;      (not= 0 (mod i n)) (recur (rest in) (conj out (first in)) (inc i))\n;      :else (recur (rest in) out (inc i))\n;      )))","user":"55150524e4b055c2f668d4d9"},{"code":"(fn [x n] (filter #(not (nil? %)) (map-indexed #(when-not (zero? (mod (inc %) n)) %2) x)))","problem":41,"user":"5201cf92e4b0b2e020a18f21"},{"problem":41,"code":"(fn \n  [aseq interval]\n  (mapcat (fn\n            [aseq]\n            (if (= interval (count aseq))\n              (drop-last aseq)\n              aseq)) (partition-all interval aseq)))","user":"557e2eafe4b05c286339e0d2"},{"code":"(fn remove-n [coll n]\n  (loop [idx 1, c []]\n    (if (= idx (inc (count coll)))\n      c\n      (if (zero? (mod idx n))\n        (recur (inc idx) c) \n        (recur (inc idx) (conj c (nth coll (dec idx))))))))","problem":41,"user":"5338387de4b0e30313ee6c91"},{"code":"#(mapcat (fn [x] (if (= %2 (count x)) (butlast x) x))\n         (partition-all %2 %))","problem":41,"user":"538557aee4b06839e8705f02"},{"code":"(fn [l n]\n  (let [r (rest (take-nth n (cons 0 l)))]\n    (seq (clojure.set/difference (set l) (set r)))))","problem":41,"user":"5191ac45e4b0d428d29dc1b6"},{"problem":41,"code":"(fn [s i] (filter (complement nil?) (apply concat (partition (dec i) i [nil] s))))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":41,"code":"(fn [s x] (keep-indexed #(if (pos? (mod (inc %1) x)) %2) s))","user":"56bfd8ade4b060a8e693e3a2"},{"problem":41,"code":"(fn [coll index]\n  (keep-indexed #(if (not= 0 (rem (inc %1) index)) %2) coll))","user":"53ae16e2e4b047364c044472"},{"problem":41,"code":"(fn dropNth [x n]\n  (loop [coll x counter 1 new []]\n    (if (empty? coll)\n      new\n      (if (= (mod counter n) 0)\n        (recur (rest coll) (inc counter) new)\n        (recur (rest coll) (inc counter) (conj new (first coll)))))))","user":"5a9482b7e4b0d174b936c737"},{"problem":41,"code":"(fn [s n]\n    (->> s\n         (partition-all n)\n         (mapcat (fn [c]\n                   (first (partition-all (- n 1) c))))))","user":"558843dae4b059ccff29b1f3"},{"code":"(fn doit [s n]\n   (flatten (map #(if (= (count %1) n) (drop-last %1) %1) (partition-all n s))))","problem":41,"user":"4f29afc7e4b0d6649770a02e"},{"code":"#(mapcat (fn [l] (if (= (count l) %2) (butlast l) l)) (partition-all %2 %1))","problem":41,"user":"4fabb1dce4b081705acca21a"},{"code":"(fn [x n]\n  (keep-indexed\n    #(if (not= 0 (rem (inc %1) n)) %2\n               )\n   \tx\n  ))","problem":41,"user":"52470d42e4b05ef8e38e6350"},{"problem":41,"code":"(fn [s n] (mapcat identity (partition-all (dec n) n s)))","user":"5c9adfebe4b048ec896c5ab9"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (< 0 (mod (inc %) n)) %2) coll))","user":"54485727e4b032a45b8693c6"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (if (empty? coll)\n    '()\n    (concat \n     (take (dec n) coll) \n     (drop-nth (drop n coll) n))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"(fn [s n] (keep-indexed #(when (not= (rem % n) (dec n)) %2) s))","problem":41,"user":"50c75d38e4b00bb60fe0c532"},{"problem":41,"code":"#(apply concat (map (partial take (- %2 1)) (partition-all %2 %)))","user":"50d0d2dde4b00b15ecee9768"},{"code":"(fn [s n]\n  (keep-indexed (fn [index item] \n                \t(if (= 0 (mod (inc index) n))\n\t\t\t\t\t  nil\n                      item)) s))","problem":41,"user":"52277ab9e4b0186687e23a4f"},{"code":"(fn [coll cnt]\n  (loop [c coll idx 1 result '()]\n    (cond (empty? c) (reverse result)\n          (zero? (mod idx cnt))\n          (recur (rest c) (+ idx 1) result)\n          :else (recur (rest c) (+ idx 1) \n                       (cons (first c) result)))))","problem":41,"user":"51991a89e4b068aa333628fd"},{"problem":41,"code":"(fn [s n] \n  (loop [out [] in s]\n    (if (= in [])\n      out\n      (recur \n       (into out (take (- n 1) in)) \n       (drop n in)))))","user":"5d81c244e4b0915913b1d37a"},{"code":"(fn myn\n  [lis n]\n  (mapcat #(take (dec n) %)\n          \n          (partition n n [] lis )\n   ))","problem":41,"user":"53736f65e4b06d7f452d9e0f"},{"code":"(fn drop-nth [coll idx]\n  (loop [coll coll\n         idx idx\n         counter 1\n         result []]\n    (cond\n     (empty? coll) result\n     (= counter idx) (recur (rest coll) idx 1 result)\n     :else (recur (rest coll) idx (inc counter) (conj result (first coll))))))","problem":41,"user":"521cd8e4e4b0c4ef0be8309f"},{"problem":41,"code":"(fn [xs n] (\n  flatten (map #(drop-last %1) \n    (partition n n '(:a) xs))\n)\n)","user":"5c3de434e4b0d62ef62d9fb8"},{"code":"(fn drop-every-nth [sequence n]\n  (concat (flatten (map #(take (- n 1) %) (partition-all n sequence))))\n)","problem":41,"user":"50e496e8e4b0cb9ec68fbca0"},{"problem":41,"code":"(fn [x number]\n  (loop [coll x result []]\n    (if (empty? coll)\n      result\n      (recur (drop number coll) (if (>= (count coll) number)\n                                  (concat result (butlast (take number coll)))\n                                  (concat result (take number coll)))))))","user":"57344edbe4b0cd1946bd1008"},{"code":"#(mapcat identity (partition-all (dec %2) %2 %1))","problem":41,"user":"4f4f0287e4b03ad3f0c10cd7"},{"code":"(fn drop_nth [y x]\n                 (remove #(= 0 (mod (+ 1 (.indexOf y %)) x)) y))","problem":41,"user":"524a74b3e4b05ef8e38e64a7"},{"problem":41,"code":"(fn [s n] (map (fn [i] (nth s i)) (filter (fn [i] (not= (mod (+ i 1) n) 0)) (range (count s)))))","user":"5f313d01e4b0574c87022c28"},{"code":"; Yeah, this is kind of cheating...\n(fn [l n]\n  (filter identity\n    (apply concat (partition (dec n) n (repeat n nil) l))))","problem":41,"user":"505f55d3e4b08f2a82ad10b0"},{"code":"(fn [s n]\n\t(let [blocks (partition-all n s)]\n\t\t(flatten\n\t\t\t(for [block blocks] (take (dec n) block)))) )","problem":41,"user":"5201ff99e4b0b2e020a18f26"},{"code":"(fn dropn\n    ([coll n] (dropn coll n 1 []))\n    ([[h & t :as coll] n curr acc]\n     (cond (nil? h)\n           acc\n           (= (mod curr n) 0)\n           (dropn t n (inc curr) acc)\n           :else\n           (dropn t n (inc curr) (conj acc h)))))","problem":41,"user":"5370ef22e4b0fc7073fd6ea0"},{"code":"(fn [xs n] (map second (filter #(not= (mod (first %) n) 0) (map list (iterate inc 1) xs))))","problem":41,"user":"5186134ce4b0da5a5be3bac7"},{"code":"(fn [l seq] (keep-indexed #(if (not= 0 (mod (+ 1 %1) seq)) %2) l))","problem":41,"user":"4f8bbb27e4b02e764a0a5182"},{"problem":41,"code":"(fn [coll n]\n  (flatten\n    (map (fn [sub-coll]\n           (if (< (count sub-coll) n)\n               sub-coll\n               (butlast sub-coll)))\n         (partition-all n coll))))","user":"56041883e4b0c80df0ca2655"},{"code":"(fn [coll n]\n  (map first \n    (filter (fn [[_ i]] (not= (mod i n) 0))\n      (map vector coll (iterate inc 1)))))","problem":41,"user":"4e25176e535d04ed9115e829"},{"code":"#(mapcat (fn [coll] (if (= (count coll) %2) (butlast coll) coll)) (partition-all %2 %))","problem":41,"user":"51dd6a7ce4b0c33a4e1da409"},{"problem":41,"code":"#(loop [l %, b (dec %2),  c (dec %2), res []]\n          (if (empty? l)\n            res\n            (if (zero? c)\n              (recur\n               (rest l)\n               b b res)\n              (recur\n               (rest l)\n               b (dec c)\n               (conj\n                res\n                (first l))))))","user":"5dcc0ee9e4b02b31cc3da3c2"},{"problem":41,"code":"(fn drop-nth\n  [lst n]\n  (cond\n    (empty? lst) ()\n    :else (concat (take (- n 1) lst) (drop-nth (drop n lst) n))))","user":"506f0968e4b09350ab4199f5"},{"problem":41,"code":"#(loop [counter 1\n         coll1 %\n         newvec []]\n   (if (empty? coll1)\n     (vec newvec)\n     (recur (inc counter)\n            (rest coll1)\n            (if (= (mod counter %2) 0)\n              newvec\n              (conj newvec (first coll1))))))","user":"55eeeb81e4b0121d4835fdf7"},{"problem":41,"code":"(fn drop-every* [s n]\n  (mapcat #(take (dec n) %) (partition-all n s)))","user":"56a01895e4b0542e1f8d149f"},{"problem":41,"code":"(fn [xs n]\n    (loop [xs xs\n           n n\n           new []]\n      (if (empty? xs)\n        new\n        (recur (drop n xs) n (into new (take (dec n) xs))))))","user":"54be792ee4b0ed20f4ff6eeb"},{"problem":41,"code":"(fn [xs n]\n   (mapcat #(rest %) (filter #(first %) (map list (flatten (iterate identity (concat (repeat (- n 1) true) '(false))))xs )))\n   )","user":"557954aae4b05c286339e092"},{"problem":41,"code":"(fn [s n]\n  (concat\n    (take (- n 1) s)\n    (keep-indexed\n      #(if (not= 0 (mod %1 n)) %2)\n     (drop (- n 1) s))))","user":"5a9181c5e4b002d099cae6f6"},{"problem":41,"code":";#(flatten (partition (- %2 1) %2 nil %1))\n(fn[ll xx]\n  ((fn dropx[l x n]\n    (if (empty? l)\n      []\n      (if (= (mod n x) 0)\n        (dropx (next l) x (inc n))\n        (cons (first l) (dropx (next l) x (inc n)))))) ll xx 1))","user":"54651ef5e4b01be26fd746d5"},{"code":"(fn [s n]\n   (remove #(zero? (mod (inc (.indexOf s %)) n)) s))","problem":41,"user":"51b86a0fe4b09e0e347b2e78"},{"code":"(fn [c n] (keep-indexed #(if (not(= (mod (+ 1 %1) n) 0)) %2) c))","problem":41,"user":"5224cf82e4b01819a2de42ef"},{"problem":41,"code":"#(loop [ls %1 acc []]\n   (if (empty? ls)\n     acc\n     (recur (drop %2 ls)\n            (concat acc\n                    (take (dec %2) ls)))))","user":"4f037faf535dcb61093f6af8"},{"problem":41,"code":"(fn [c step] (filter #(not (nil? %)) (map-indexed (fn [i v] (when-not (= 0 (mod (inc i) step)) v)) c)))","user":"54d2b411e4b0e8a36923e5f9"},{"problem":41,"code":"(fn foo [s, n]\n     (map #(second %1)\n          (filter #(not (= (mod (inc (first %1)) n) 0))\n                  (map #(list %1 %2) (range) s))))","user":"5590e55de4b0277789237676"},{"problem":41,"code":"#(let [take-number (dec %2)]\n  (loop [coll %\n         result []]\n    (if (empty? coll)\n      result\n      (recur\n        (drop %2 coll)\n        (into result (take take-number coll))\n        )\n      )\n    )\n  )","user":"5e0e836fe4b099d064962fa8"},{"problem":41,"code":"(fn [s n]\n  (loop [s s\n         i 1\n         res []]\n    (if (seq s)\n      (recur (rest s) (+ i 1) (if (= (mod i n) 0) res (conj res (first s))))\n      res)))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"(fn\n  [coll n]\n    (flatten \n      (map \n        #(if (= (count %) n) (drop-last %) %) \n        (partition-all n coll))))","problem":41,"user":"4f9d87fce4b0dcca54ed6d24"},{"code":"#(apply concat (map (fn [l] (if (= %2 (count l)) (butlast l) l)) (partition-all %2 %1)))","problem":41,"user":"50d3b03fe4b030b634c368b9"},{"problem":41,"code":"(fn [x y]\n    (println (range 1 y))\n    (let [nums (range 0 (count x))]\n      ((fn include [a b c]\n         (println (first b))\n         (if (empty? a)\n          '()\n          (if (= (mod (+ 1(first b)) c) 0)\n            (include (rest a) (rest b) c)\n            (conj (include (rest a) (rest b) c) (first a)))))\n         x nums y)))","user":"5654cb2de4b0f9d632dd848b"},{"problem":41,"code":"(fn [coll n]\n    (keep-indexed #(if (not= (rem (+ %1 1) n) 0) %2) coll))","user":"560e9a2de4b05f002753df52"},{"code":"(fn [ar n]\n  (remove #(= 0 (mod (inc (.indexOf ar %)) n)) ar))","problem":41,"user":"50c2fbebe4b00e537d00253c"},{"problem":41,"code":"#(flatten\n         ((fn lazy-dropper[coll numm] \n            (if (empty? coll)\n              nil\n              (cons (take (dec numm) coll) (lazy-seq (lazy-dropper (drop numm coll) numm))))) %1 %2))","user":"564b1ff8e4b0284900eef663"},{"problem":41,"code":"(fn drop-nth [x y] (if (not-empty x) (concat (take (dec y) x) (drop-nth (drop y x) y)) []))","user":"548485f5e4b0e286459a119f"},{"problem":41,"code":"(fn [c n] \n   (mapcat #(if (= n (count %)) \n              (butlast %) %)\n           (partition-all n c)))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":41,"code":"(fn [xs n] \n  (keep-indexed \n    (fn [ind v] \n      (if (= 0 (mod (inc ind) n))\n        nil\n        v\n        )\n      )\n   xs\n   )\n  )","user":"56fe665be4b08d47c97781af"},{"code":"(fn [coll n]\n  (flatten (concat (map #(take (- n 1) %) (partition-all n coll))))\n   )","problem":41,"user":"53a065c2e4b0ca733b9744ad"},{"code":"(fn [l n] \n\t(->> l\n\t\t(map #(vector %1 %2)(range))\n\t\t(filter \n\t\t\t(fn [x] (not (= 0 (mod (+ (first x) 1) n))))\n\t\t)\n\t\t(map second)\n\t)\n)","problem":41,"user":"5151aa14e4b03e678e393ad4"},{"code":"(fn  [coll n] \n  (->> coll\n       (partition-all n)\n       (mapcat #(take (dec n) %))))","problem":41,"user":"50e90813e4b033b0e80d11e7"},{"problem":41,"code":"(fn [coll drop-every-n]\n  ;(defn drop-every-n? [position]\n  ;  (if (= 0 (mod position drop-every-n)) true false))\n  (loop\n    [index 1\n     rest-items coll\n     result []]\n    (if (empty? rest-items)\n      result\n      (recur\n        (inc index)\n        (rest rest-items)\n        ;(if (drop-every-n? [index])\n        (if (= 0 (mod index drop-every-n))\n                          result\n                          (conj result (first rest-items)))))))","user":"581badbde4b04b46fc4b0ed9"},{"problem":41,"code":"(fn [init-seq numb] (flatten (map #(if (= numb (count %)) (drop-last %) %) (partition-all numb init-seq))))","user":"5f548678e4b0a0bc16850a7e"},{"problem":41,"code":"#(mapcat drop-last (partition %2 %2 [::t] %1))","user":"55f330dde4b06e875b46ce56"},{"problem":41,"code":"(fn [coll skp]\n(keep-indexed (fn [idx val] (if (pos? (mod (inc idx) skp)) val)) coll))","user":"589b98fae4b00487982d533c"},{"code":"#(apply concat (map drop-last (partition %2 %2 [0] %1)))","problem":41,"user":"53523ae0e4b084c2834f4aee"},{"code":"(fn f [coll dropno]\r\n  (mapcat #(if (= (count %) dropno) (butlast %) (identity %)) (partition-all dropno coll)))","problem":41,"user":"4eaed3a7535d7eef30807328"},{"problem":41,"code":"(fn [l n] (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2 nil) l))","user":"550fa523e4b06e50f9beb17a"},{"code":"#(let [x %1 n %2] (loop [r [] i 1 t x] (if (empty? t) (flatten r) (let [n (if-not (= 0 (mod i n)) (first t) '() )] (recur (conj r n) (+ 1 i) (rest t))))))","problem":41,"user":"4ee2baa8535d10e5ff6f536b"},{"problem":41,"code":"(fn [x y] (keep-indexed #(if-not (zero? (mod (inc %1) y)) %2) x))","user":"5835a222e4b089d5ab817ce5"},{"code":"(fn [s e] (mapcat #(take (dec e) %) (partition-all e s)))","problem":41,"user":"51fa1375e4b0f1313d4689c9"},{"problem":41,"code":"(fn drop-nth3 [coll n]\n  (->> (partition-all n coll) (map #(if (= n (count %)) (drop-last %) %)) (flatten)))","user":"598876fee4b021a7a535feb7"},{"code":"(fn [lst index]\n  (keep-indexed #(if (= 0 (mod (inc %1) index)) \n                     nil\n                     %2)\n    lst))","problem":41,"user":"4ffe4d43e4b0678c553fc3f1"},{"problem":41,"code":"(fn [data n]\n    (let [g (fn [res data counter]\n              (if (seq data)\n                  (if (= counter n)\n                      (recur res (rest data) 1)\n                      (recur (conj res (first data)) (rest data) (inc counter)))\n                  res))]\n      (g [] data 1)))","user":"593352b7e4b072a2710fd052"},{"problem":41,"code":"#(keep-indexed (fn [index item] (when (> (rem (inc index) %2) 0) item)) %1)","user":"526c669be4b03e8d9a4a728f"},{"problem":41,"code":"#(keep-indexed (fn [idx x] (if-not (zero? (rem (+ idx 1) %2)) x)) %1)","user":"5ce78776e4b0a17bb84e2ba2"},{"problem":41,"code":"(fn [coll index]\n  (keep-indexed #(if (not= 0 (rem (+ %1 1) index)) %2) coll))","user":"52fe31d5e4b047fd55837038"},{"problem":41,"code":"#(reduce concat (partition (dec %2) %2 [] %))","user":"54eee3a3e4b024c67c0cf879"},{"code":"(fn drp [l n]\n  (letfn \n    [(drloop [l n c]\n      (if (empty? l)\n        l\n        (if (= c 1)\n          (drloop (rest l) n n)\n          (cons (first l)\n            (drloop (rest l) n (- c 1))))))]\n    (drloop l n n)))","problem":41,"user":"509f3bc9e4b08df8156e9e39"},{"code":"(fn deach [coll, drop-each]\n  (mapcat\n    #(if (= drop-each (count %))\n       (butlast %)\n       %)\n    (partition-all drop-each coll)))","problem":41,"user":"5245fbbbe4b09dbe66b56183"},{"code":"(fn dropnth [coll n] (loop [result [] a coll] (if (empty? a) result (recur (into result (take (dec n) a)) (drop n a )))))","problem":41,"user":"52b60e94e4b0c58976d9ad3e"},{"problem":41,"code":"(fn drop-nth [coll n] (filter identity (map-indexed (fn [i x] (when-not (zero? (mod (inc i) n)) x)) coll)))","user":"510528a0e4b0730a5f55ad85"},{"code":"(fn de\n  [xs n]\n  (if (not-empty xs)\n    (concat\n      (if (>= (count xs) n)\n        (butlast (take n xs))\n        (take n xs))\n      (de (drop n xs) n))))","problem":41,"user":"4fab1ea1e4b081705acca210"},{"problem":41,"code":"#(loop [x % i 1 res []]\n   (if (empty? x)\n     res\n     (recur (rest x) (inc i) (if (= 0 (rem i %2))\n                                         res\n                                         (conj res (first x))))))","user":"5964c614e4b069c0a1a19770"},{"problem":41,"code":"(fn [coll time] (keep-indexed #(if (not (= (mod (inc %1) time) 0)) %2) coll))","user":"5ea444b7e4b00a66d4a951a0"},{"problem":41,"code":"(fn [s n]\n  (mapcat #(if (= n (count %)) (butlast %) %) (partition-all n s)))","user":"6040e6dbe4b0d5df2af2232a"},{"problem":41,"code":"#(mapcat (fn [a] \n           (if (< (count a) %2)\n            a\n           (reverse (rest (reverse a))))) (partition %2 %2 [] %1))","user":"5619b22ee4b053970a773afe"},{"code":"(fn dropns [sq n] (if (< (count sq) n)\n                  sq\n                  (concat (take (- n 1) sq)\n                          (dropns \n                            (drop n sq)\n                            n))))","problem":41,"user":"504e108ce4b078edc5f593b3"},{"code":"#(keep-indexed \n  (fn [i x] (when-not (zero? (mod (inc i) %2)) x))  \n  %1)","problem":41,"user":"4f92709de4b0dcca54ed6cad"},{"problem":41,"code":"(fn [coll step]\n   (let [partition-seq (partition-all step coll)\n         last-partition (last partition-seq)\n         cooked-last-partition (if (= (count last-partition) step)\n                                 (drop-last last-partition)\n                                 last-partition)]\n     (concat\n       (->> (drop-last partition-seq)\n            (map drop-last)\n            (flatten))\n       cooked-last-partition)))","user":"5b6002c2e4b0c6492753e6fb"},{"problem":41,"code":"(fn [coll n] (map first (filter (fn [[no index]] (not (= (mod index n) (dec n)))) (map list coll (range)))))","user":"5785de31e4b0ebec4cfb74e4"},{"code":"(fn [coll n]\n  (flatten (partition (dec n) n [] coll)))","problem":41,"user":"50ed3c6be4b01236b1d4983b"},{"problem":41,"code":"(fn [s c]\n  (loop [s s\n         c c\n         ind 1\n         acc []]\n    (if (empty? s) acc\n    (if (zero? (mod ind c))\n      (recur (rest s) c (inc ind) acc)\n      (recur (rest s) c (inc ind) (conj acc (first s)))\n    ))\n         ))","user":"54227fc6e4b01498b1a71ac0"},{"code":"(fn [coll n] (keep-indexed #(if (or (< (inc %1) n) (not= (rem (inc %1) n) 0)) %2) coll))","problem":41,"user":"4faa6184e4b081705acca1f1"},{"code":"(fn [ins n]\n    (vec\n      ( flatten\n        ( loop [ res [] s ins]\n               ( if ( empty? s )\n                    res\n                    (recur\n                        (conj res (take (dec n) s))\n                        (drop n s)))))))","problem":41,"user":"51aa4eede4b04e3dc0c27b25"},{"problem":41,"code":"(fn [l n]\n\t(loop [n1 l\n           ret []\n           index 1]\n      (if (empty? n1)\n        ret\n        (recur (rest n1) (if (= 0 (rem index n))\n                           ret\n                           (conj ret (first n1)))\n                           (inc index)))))","user":"5883584ae4b0f1effa3b7674"},{"problem":41,"code":"(fn drop-n\n  ([s n](drop-n s n 1))\n  ([s n c]\n   (if (empty? s)(sequence '())\n   (if(= n c)(drop-n (rest s) n 1)\n     (conj (drop-n (rest s) n (inc c))(first s))))))","user":"5c486dece4b0e06e1360a3c0"},{"code":"(fn [s step]\n  (loop [r [] s s i 1]\n    (if (empty? s)\n      r\n      (recur\n        (if (zero? (mod i step))\n          r\n          (conj r (first s)))\n        (rest s)\n        (inc i)))))","problem":41,"user":"4ea67906535d7eef308072e4"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (not= 0 (mod (inc %) n)) %2) coll))","user":"567447a2e4b05957ce8c6135"},{"problem":41,"code":"(fn f [x y] (flatten (conj [(take (dec y) x)] (if (> (count x) (dec y)) (f (drop y x) y) []))))","user":"5f8fe45ae4b0715f5002d78d"},{"code":"(fn [s n] (apply concat (map #(take (- n 1) %) (partition-all n s))))\n\n;this tricky one may be the shortest\n;#(flatten(partition (- %2 1) %2 nil %))","problem":41,"user":"530e5469e4b08068f379ecb7"},{"code":"(fn [s n]\n  (loop [s s i 1 a ()]\n    (if (empty? s)\n        (reverse a)\n        (if (= i n)\n            (recur (rest s) 1 a)\n            (recur (rest s) (inc i) (cons (first s) a))))))","problem":41,"user":"4f03d0fe535dcb61093f6b6d"},{"problem":41,"code":"(fn [s i] (->> s (map-indexed vector) (remove #(= (dec  i) (mod (first %) i))) (map second) ))","user":"54c23252e4b045293a27f5fc"},{"code":"(fn a [x y]\n  (if (empty? x) '()\n  (concat (take (- y 1) x) (a (nthnext x y) y))))","problem":41,"user":"4ea0c284535d7eef308072ad"},{"problem":41,"code":"(fn drop-nth-element [ls n]\n  (loop [ls ls\n         count 1\n         acc []\n         ]\n    (if (empty? ls)\n      acc\n      (if (zero? (mod count n))\n        (recur (rest ls) (inc count) acc)\n        (recur (rest ls) (inc count) (conj acc (first ls)))))))","user":"5fe1b893e4b05ac5b16ea16f"},{"code":"(fn drop-nth [is n]\n   (loop [r [], s is, i 1]\n      (if (not-empty s)\n         (if (< i n)\n            (recur (conj r (first s)) (rest s) (inc i))\n            (recur r (rest s) 1)\n         )\n         r\n      )\n   )\n)","problem":41,"user":"52e295fae4b09f7907dd1437"},{"code":"#(mapcat identity (partition (- %2 1) %2 nil %))","problem":41,"user":"4f49108ae4b0d56e7bb92be5"},{"problem":41,"code":"(fn [input every] (keep-indexed      #(if-not (= (mod %1 every) (dec every)) %2) input ))","user":"54ff2968e4b07d26eda61d4a"},{"problem":41,"code":"(fn td [c n]\n   (if (empty? c)\n     []\n     (concat (take (- n 1) c) (td (drop n c) n))))","user":"5d764e52e4b02e6b30c93524"},{"problem":41,"code":"(fn drop-nth-elment [coll nth]\n  (loop [res []\n         c coll]\n    (if (empty? c)\n      res\n      (recur\n       (concat res (take (dec nth) c))\n       (drop nth c)))))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn [s n]\n  (loop [others s curr 1 acc '[]]\n    (cond \n     (empty? others) acc\n     (= curr n) (recur (rest others) 1 acc)\n     :else (recur (rest others) (inc curr) (conj acc (first others))))))","problem":41,"user":"5226f8e9e4b04e78ff2e199a"},{"problem":41,"code":"(fn f [coll n]\n  ((fn iter [coll i res]\n     (cond \n      (empty? coll) res\n      (= i n) (iter (rest coll) 1 res)\n      :else (\n             iter (rest coll) (inc i) (conj res (first coll))\n             )\n      )\n     ) coll 1 []\n   \n   )\n  \n  )","user":"60471241e4b02d28681c77c9"},{"problem":41,"code":"(fn dropn\n  ([li n] (dropn li n (list)))\n  ([li n ans]\n   (if (empty? li)\n     ans\n     (dropn (drop n li) n (concat ans (take (dec n) li)))\n     )\n   )\n  )","user":"5a90395ce4b05369db4d254a"},{"problem":41,"code":"(fn [col n]\n\t(map second\n         (filter #(-> (first %)\n                      (inc)\n                      (rem n)\n                      (zero?)\n                      (not))\n                 (map-indexed vector col))))","user":"587b8bdee4b01531a375eaff"},{"problem":41,"code":"(fn [lst n] (flatten (partition-all (dec n) n lst)))","user":"5f648ef1e4b02876ed9fd01b"},{"code":"( fn [v n](map second (filter #(> (mod (first %) n) 0) (map list (iterate inc 1) v) )))","problem":41,"user":"523b1988e4b02f719975bdbc"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (remove nil?\n    (map-indexed\n      (fn [idx itm]\n        (if (not= 0 (mod (inc idx) n))\n          itm))\n      coll)))","user":"59b62f8de4b05c620303ca1f"},{"code":"(fn [coll n]\n  (let [zipped (map vector coll (cycle (range n)))]\n     (for [[el mod] zipped :when (<  mod (dec n))]\n       el)))","problem":41,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn [xs n]\n  (let [include?s (rest (cycle (cons false (repeat (dec n) true))))]\n    (for [[x include?] (map vector xs include?s)\n          :when include?]\n      x)))","problem":41,"user":"4eecc9ad535d93acb0a668b4"},{"code":"#(loop [s %1 n %2 coll []]\n   (if (seq s)\n     (recur (drop n s) n (reduce conj coll (take (dec n) s)))\n     coll))","problem":41,"user":"51460e4ce4b04ef915e37314"},{"problem":41,"code":"(fn drop-n-rec [lyst n]\n  (letfn [(f [l cnt]\n            (cond \n             (not (seq l)) l\n             (= cnt 0) (f (rest l) (dec n))\n             :else (lazy-seq (cons (first l) (f (rest l) (dec cnt ))))\n             )\n            )]\n    (f lyst (dec n))))","user":"53e27bf1e4b036ad0777e3f2"},{"problem":41,"code":"(fn[coll n]\n  (map\n   first\n   (filter #(-> % second (not= n))\n    (map list coll (cycle (range 1 (inc n)))))))","user":"55101237e4b06e50f9beb181"},{"problem":41,"code":"(fn [xs n]\n  (loop [v xs\n         res []]\n    (if (< (count v) n)\n        (flatten (conj res v))\n        (recur (vec (nthnext v n)) (conj res (subvec v 0 (dec n)))))))","user":"5afa9de0e4b0cc2b61a3bcf1"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  (let [parted-lst (partition-all n lst)\n        my-drop-lst (fn [n cell] (if (= n (count cell)) (drop-last cell) cell))]\n    (mapcat (partial my-drop-lst n) parted-lst)))","user":"5576fee3e4b05c286339e078"},{"problem":41,"code":"#(loop [list1 %1 list2 (take (count %1) (cycle (range (- 1 %2) 1))) result []]\n   (if (empty? list1)\n     result\n     (if (< (first list2) 0)\n       (recur (rest list1) (rest list2) (conj result (first list1)))\n       (recur (rest list1) (rest list2) result)\n       )\n     )\n   )","user":"5deab1b2e4b0986d99407f9f"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed #(when (pos? (mod (inc %) n)) %2) xs))","user":"594880ade4b07ddc2dafadc2"},{"code":"(fn [coll n] \n  (map second \n    (remove (fn [[idx x]] (= 0 (mod idx n))) \n                (map vector (drop 1 (range)) coll))))","problem":41,"user":"4e6e7018535d5021c1a8960b"},{"problem":41,"code":"(fn [start n]\n  (flatten \n    (concat \n      (map #(drop-last %) (partition n start)) \n      (take-last (rem (count start) n) start))))","user":"56942944e4b0dcc4269f4115"},{"problem":41,"code":"(fn[_seq n] (filter (fn[x] (not= (rem (inc (.indexOf _seq x)) n) 0)) _seq))","user":"5954eef0e4b066ee0a44af17"},{"code":"(fn [x y] (keep-indexed #(if (> (mod %1 y) 0) %2) (cons :pad x)))","problem":41,"user":"5241fe85e4b076e5d3121f42"},{"problem":41,"code":"(fn [x y] (remove (set (take-nth y (drop (dec y) x))) x))","user":"529c722de4b04e0c58e87b63"},{"problem":41,"code":"(fn foo\n    ([coll n]\n     (foo coll '() n))\n     ([coll res n]\n      (if (empty? coll)\n        res\n        (recur (drop n coll) (concat res (take (dec n) coll)) n)\n        ))\n    )","user":"5d887d27e4b0915913b1d3a8"},{"code":"(fn nnth [coll n]\n  (loop [o () i 1 coll coll]\n    (println o \":\" i \":\" coll \": mod: \" (mod i n)) \n    (if (empty? coll)\n      (reverse o)\n      (if (= 0 (mod i n))\n        (recur o (inc i) (rest coll))\n        (recur (cons (first coll) o) (inc i) (rest coll))\n        ))))","problem":41,"user":"4ebc829e535dfed6da9c6d86"},{"code":"#(flatten (partition-all (dec %2) %2 %1))","problem":41,"user":"4e232f34535d04ed9115e81f"},{"problem":41,"code":"(fn [coll n]\n\t(flatten\n\t\t(concat\n\t\t\t(map #(drop-last %) (partition n coll))\n\t\t\t(take-last (rem (count coll) n) coll)\n\t\t)))","user":"55ef9c9de4b066087aa94537"},{"code":"(fn [l n]\n  (keep-indexed #(if-not (= 0 (rem (+ 1 %1) n)) %2) l))","problem":41,"user":"4e720985535d5021c1a89655"},{"code":"#(mapcat (fn [xs] (if (= %2 (count xs)) (butlast xs) xs)) (partition %2 %2 () %1))","problem":41,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"code":"#(mapcat drop-last (partition %2 %2 [0] %1))","problem":41,"user":"5107b86de4b05b2b4eee7495"},{"problem":41,"code":"(fn drop-every-nth [sq n]\n  (map #(nth sq (dec %)) \n       (filter #(not= (mod % n) 0) \n               (range (inc (count sq)))))\n  )","user":"5a388675e4b001c08efc0ca2"},{"code":"(fn [c n] (mapcat #(take (dec n) %) (partition-all n c)))","problem":41,"user":"4e8510e7535db62dc21a62e7"},{"problem":41,"code":"(fn [s i] (map second (filter #(not (zero? (first %1))) (map-indexed #(vector (rem (inc %1) i) %2) s))))","user":"55df1985e4b050e68259b3eb"},{"problem":41,"code":"(fn [seq n]\n  (loop [n n\n         remaining-seq seq\n         acc []\n         ]\n    (if (empty? remaining-seq)\n      (flatten acc)\n    (recur n (drop n remaining-seq) (conj acc (take (dec n) (take n remaining-seq)))))))","user":"56bff105e4b060a8e693e3a4"},{"problem":41,"code":"(fn \n     [a n]\n     (let [partitioned (partition-all n a)\n           remove-n (fn [l] (take (dec n) l))]\n       (mapcat remove-n partitioned)\n       )\n     )","user":"51e6a2bce4b0ab43cc26c21d"},{"code":"(fn [ li n ] ( mapcat  #( if ( = (count %) n) ( butlast %) % ) (partition-all n li ) ))","problem":41,"user":"4f030775535dcb61093f6a43"},{"problem":41,"code":"(fn th [xs c](apply concat(partition (- c 1) c [] xs)))","user":"57752a2de4b0979f89651613"},{"problem":41,"code":"(fn me [s m]  (for [i (range (count s))    \t:when (not= (mod (inc i) m) 0)]    \t(nth s i)))","user":"561d506ee4b064ca9f4b16aa"},{"problem":41,"code":"(fn [coll n]\n  (filter #(not= 0 (rem (inc (.indexOf coll %)) n)) coll)\n)","user":"54f4a457e4b0f2f3c5226e83"},{"problem":41,"code":"(fn [xs n] (->> (partition-all n xs)\n                (map #(take (dec n) %))\n                (apply concat)))","user":"563e1c0ee4b0da801c4e4665"},{"problem":41,"code":"(fn drop-Nth\n [collection N]\n (keep-indexed (fn [index val] (when (not= (mod (inc index) N) 0) val)) collection))","user":"5d42c88ae4b05dd059a5437e"},{"problem":41,"code":"(fn [coll n]\n  (mapcat (partial take (dec n))\n          (partition-all n coll)))","user":"598858d0e4b021a7a535feb5"},{"problem":41,"code":"#(filter identity (map-indexed (fn [i x] (if (= (mod (inc i) %2) 0) nil x )) %1))","user":"5d123457e4b02c15ef021996"},{"code":"(fn [coll n]\n  (loop [s coll\n         result []\n         x 1]\n         (if (empty? s)\n           result\n           (if (== (mod x n) 0)\n             (recur (rest s) result (inc x))\n              (recur (rest s) (conj result (first s)) (inc x))))))","problem":41,"user":"4e6a73d0535d8ccf87e9fee7"},{"code":"#(->> (partition-all %2 %1)\n      (map (partial take (dec %2)) ,,,)\n      (apply concat ,,,))","problem":41,"user":"4db1f7d223724b71670a9c07"},{"problem":41,"code":"#(keep-indexed (fn[i v] (if (not= (mod (inc i) %2) 0) v)) %)","user":"534b57bbe4b084c2834f4a78"},{"code":"(fn dropper [i coll n] \n  (if coll\n    (if (= (mod i n) 0)\n       \t(dropper (+ i 1) (next coll) n)\n    \t(concat [(first coll)] (dropper (+ i 1) (next coll) n))\n    )\n    ()\n  )\n  \n  ) 1","problem":41,"user":"51fc44c5e4b0f1313d468a1b"},{"problem":41,"code":"(fn [s n] (mapcat (partial take (- n 1)) (partition n n () s)))","user":"5ab564f8e4b073f177442639"},{"code":"(fn [col n]\n  (let [t (map #(list %2 %1) col (flatten\n                                  (repeat (count col)\n                                          (range 1 (inc n)))))]\n    (map (fn [[i e]] e) (filter (fn [[i e]]\n                                 (not= i n)) t))))","problem":41,"user":"4e7e33a3535db169f9c79708"},{"code":"(fn [coll pos]\n  (keep-indexed #(if (> %1 0)\n                    (if (not= (mod (inc %1) pos) 0) %2)\n                    %2) coll))","problem":41,"user":"518a59b3e4b02bf06f6bbb4b"},{"problem":41,"code":"#(mapcat flatten (partition-all (dec %2) %2 %))","user":"5e9e642ce4b00a66d4a95174"},{"problem":41,"code":";; #(flatten (partition-all (dec %2) %2 %1))\n\n#(apply concat (partition-all (dec %2) %2 %1))","user":"603e9cb6e4b0d5df2af22317"},{"problem":41,"code":"(fn [seq n]\n  (apply concat (partition-all (dec n) n seq)))","user":"540c6a8ae4b0addc1aec6702"},{"problem":41,"code":"(fn  [s n]\n\n  (map second\n\n\n       \n\n       (filter #(pos? (rem (inc (first %)) n))\n\n               (map-indexed list s)))\n  )","user":"5fa6db67e4b0fa27300f3dd2"},{"problem":41,"code":"(fn [sq n]\n          (loop [in sq i 1 out []]\n            (if (empty? in)\n              out\n              (recur (rest in)\n                     (inc i)\n                     (if (= 0 (mod i n))\n                       out\n                       (conj out (first in)))))))","user":"58b997afe4b0888cdc949cd1"},{"code":"(fn [coll n]\n   (map #(nth coll %)\n        (filter #(not (= (mod (inc %) n) 0))\n                (range (count coll)))))","problem":41,"user":"525a7b9fe4b0cb4875a45cf5"},{"problem":41,"code":"(fn [col n]\n  (apply concat (partition-all (- n 1) n col)))","user":"53dd37aee4b0d874e779ae28"},{"code":"(fn [s n] (mapcat (fn [x] (take (dec n) x)) (partition-all n s)))","problem":41,"user":"5300f68de4b0d8b024fd3714"},{"problem":41,"code":"(fn [coll n]\n  (map first \n    (filter #(not= 0 (mod (second %) n))\n            (map vector coll (iterate inc 1))\n    )\n  )\n)","user":"57434339e4b0c285004e8a9f"},{"problem":41,"code":"(fn partition-and-drop [coll n]\n\t(mapcat #(if (< (count %) n) % (drop-last %)) (partition-all n coll))\n)","user":"525d44bfe4b0cb4875a45d6d"},{"problem":41,"code":"#(loop [coll %1\n         result []\n         n %2]\n    (if (= '() coll)\n      result\n      (if (= 1 n)\n        (recur (rest coll) result %2)\n        (recur (rest coll) (conj result (first coll)) (dec n)))))","user":"6090e617e4b03bd49d9f36ce"},{"code":"(fn [s n]\n  (->> s\n       (partition n n [])\n       (map #(take (dec n) %))\n       (apply concat)))","problem":41,"user":"51a3b135e4b0e77c4ca60bf6"},{"code":"(fn [se n]\n  (loop [res [] s se]\n    (if (empty? s)\n      (flatten res)\n      (recur (conj res (take (dec n) s))\n             (drop n s)))))","problem":41,"user":"4e773be8535d324fb2983d6e"},{"problem":41,"code":"(fn [col nth] (->> (map #(list %1 %2) (iterate inc 1) col) (remove #(= (mod (first %) nth) 0)) (map last)))","user":"584d8724e4b0b7285a6f4e3e"},{"problem":41,"code":"#(flatten (partition (dec %2) %2  [] %1))","user":"56fd058be4b08d47c97781a1"},{"problem":41,"code":"(fn drop-n [l n]\n  (loop [i 0\n         x '()\n         r (range (dec n) (count l) n)]\n    (if (= i (count l))\n      x\n      (if (= i (first r))\n        (recur (inc i)\n               x\n               (rest r))\n        (recur (inc i)\n               (concat x [(nth l i)])\n               r)))))","user":"5018878ce4b029375d2a5056"},{"code":"(fn [xs n] (mapcat (fn [[i v]] [v]) (filter (fn [[i v]] (not= 0 (mod (inc i) n))) (map-indexed vector xs))))","problem":41,"user":"523b1a65e4b02f719975bdbd"},{"problem":41,"code":"(fn _drop-nth\n[col n]\n  (for [idx (range 0 (count col)) \n    :let [x (nth col idx)]\n    :when (not= 0 (mod (inc idx) n))]\n  x\n  )\n)","user":"547b4ec6e4b0c51c1f4d72d5"},{"code":"(fn [c n]\n  (flatten (partition-all (dec n) n c)))","problem":41,"user":"4e8a0d5d535d3e98b802328e"},{"problem":41,"code":"(fn drop-every [lst n]\n  (mapcat #(if (<(count %) n)\n                %\n                (butlast %)) (partition-all n lst)))","user":"57201f14e4b0c5bde472c08e"},{"code":"(fn [l n] \n  (map second (filter #(not (zero? (mod (first %) n))) (map #(vector %1 %2) (iterate inc 1) (seq l)))))","problem":41,"user":"4f68c485e4b07046d9f4ef7c"},{"code":"(fn [li x]\r\n  (loop [li li c 1 ret []]\r\n    (if (= 0 (count li))\r\n      ret\r\n      (if (= x c)\r\n        (recur (rest li) 1 ret)\r\n        (recur (rest li) (inc c) (conj ret (first li)))\r\n      )\r\n    )\r\n  )\r\n)","problem":41,"user":"513caa36e4b0b86ece9f3229"},{"problem":41,"code":"(fn [xs n]\n  (->> (map vector (iterate inc 1) xs)\n       (filter (fn [[idx-1 _]]\n                 (not= 0 (rem idx-1 n))))\n       (map second)))","user":"5d47fa13e4b07c84aa5ae6b6"},{"problem":41,"code":";;#(apply concat (partition-all (dec %2) %2 %))\n\n(fn [coll n]\n\t(keep-indexed \n\t\t#(if (not= (mod (inc %1) n) 0) %2) \n\t\tcoll\n\t)\n)","user":"5595c60ee4b0c79f6e1db96f"},{"problem":41,"code":"(fn [xs n] (reduce (fn [acc val] (if (= (- n 1) (mod (first val) n))\n                                   acc\n                                   (conj acc (second val)))) [] (map-indexed vector xs)))","user":"5ed3c43be4b016b56eae05c4"},{"problem":41,"code":"(fn [input cout]\n  (loop [x input\n         y cout\n         out []]\n    (if (empty? x) out\n      (if (= 1 y)\n        (recur (rest x) cout out)\n        (recur (rest x) (dec y) (conj out (first x)))))))","user":"57af6cf4e4b0fbc9809a2735"},{"problem":41,"code":"(fn drop-every\n        [coll n]\n        (if (> n (count coll))\n          coll\n          (concat (take (dec n) coll) (drop-every (drop n coll) n))))","user":"52efd3d9e4b05e3f0be25ed4"},{"code":"(fn\n  [coll idx]\n  (loop [coll coll iter idx result ()]\n    (if (seq coll)\n      (if (= iter 1)\n        (recur (rest coll) idx result)\n        (recur (rest coll) (dec iter) (cons (first coll) result)))\n      (reverse result))))","problem":41,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":41,"code":"(fn drnth [coll x] (mapcat #(take (- x 1) %) (partition-all x coll)) )","user":"5972fcf6e4b01722bebd4c92"},{"problem":41,"code":"(fn [xs y]\n  (loop [[first & rest] xs\n         ret []\n         drop 1]\n    (if (nil? first)\n      ret\n      (if (= (mod drop y) 0)\n        (recur rest ret (inc drop))\n        (recur rest (conj ret first) (inc drop))))))","user":"58a216e8e4b02bd94d917ed1"},{"problem":41,"code":"#(loop [result []\n         pos 1\n        in %1\n        nth %2\n         ]\n   (cond\n     (empty? in) result\n     (not= 0 (rem pos nth)) (recur (conj result (first in)) (inc pos) (rest in) nth)\n     (= 0 (rem pos nth)) (recur result (inc pos) (rest in) nth)\n     ))","user":"5b198eace4b03cfeda66ecbb"},{"problem":41,"code":"(fn [col n]\n  (filter #(not= nil %) (for [i (range (count col))] (if (not= 0 (rem (inc i) n)) (col i)))))","user":"5243e37ae4b076204b44fae3"},{"problem":41,"code":"#(vec (for [x (range 0 (count %)) :let [y (% x)] :when (not= (mod (+ x 1) %2) 0)] y))","user":"58c04ca5e4b021aa9917ece6"},{"problem":41,"code":"(fn f [coll r] (if (empty? coll) coll\n     (concat (take (dec r) coll) (f (drop r coll) r))))","user":"535c2d21e4b04ce2eb3ed2b2"},{"code":"(fn [coll n]\n  (for [[i x] (map-indexed vector coll)\n        :when (not (zero? (rem (inc i) n)))] x))","problem":41,"user":"516199bbe4b009fba0926e36"},{"problem":41,"code":"(fn [coll n]\n  (let [split-coll (partition n n nil coll)]\n    (let [take-coll (map #(take (dec n) %) split-coll)]\n      (apply concat take-coll))))","user":"55b1d0b5e4b0da326a65cf73"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (mapcat\n    (fn [p]\n      (if (= n (count p))\n        (butlast p)\n        p))\n    (partition-all n coll)))","user":"5d609ddde4b0c9e5857d5008"},{"code":"(fn sk-drop-nth [l n]\n  (mapcat #(take (dec n) %)\n       (partition-all n l)))","problem":41,"user":"51d42f44e4b013d740b70ddb"},{"problem":41,"code":"(fn [sequ n] (reduce concat (map #(take (dec n) %) (partition-all n sequ))))","user":"56f73913e4b08e7d20b9682d"},{"code":"#(loop [i 1 r [] f %2 s %1] (if (not (= s nil))\n                             (if (= i f) \n                               (recur 1 r f (next s))\n                               (recur (inc i) (conj r (first s)) f (next s)))\n                             r\n                             ))","problem":41,"user":"50e008d1e4b061dbdced722a"},{"problem":41,"code":"(fn\n  [c n]\n  (loop [p []\n         i 1\n         r c]\n    (let [t (first r)]\n    (if (not t)\n      p\n      (recur (if (> (mod i n) 0) (conj p t) p) (inc i) (rest r)))))\n   )","user":"53ac4719e4b047364c04445c"},{"problem":41,"code":"(fn [coll x] (if (= 0 (rem (count coll) x))\n                (flatten (map drop-last (partition x coll)))\n                (concat (flatten (map drop-last (partition x coll)))\n                        (last (partition-all x coll)))))","user":"54eca495e4b024c67c0cf855"},{"problem":41,"code":"#(keep-indexed (fn [i v] (if (pos? (mod (inc i) %2)) v)) %1)","user":"546f81e3e4b00cfc9eacc1ae"},{"problem":41,"code":"(fn [coll n]\n  (flatten (partition (dec n) n '() coll)))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn drop-nth [xs n]\n  (keep-indexed\n    #(if (zero? (mod (inc %1) n)) nil %2)\n    xs))","problem":41,"user":"504f57c7e4b0a02f9cffde71"},{"problem":41,"code":"(fn [s n] (keep-indexed #(if (< 0 (mod (inc %) n)) %2) s))","user":"58fdbf59e4b0438e51c2cfbc"},{"problem":41,"code":"#(map last (filter (fn f1 [col] (not (= 0 (mod (first col) %2)))) \n                   (partition 2 \n                              (interleave (map inc (range)) %1))))","user":"55632016e4b0c656e3ff17e4"},{"problem":41,"code":"(fn [a b] (mapcat (fn [e] (take (- b 1) e)) (partition-all b a)))","user":"5bfc50ece4b0bdcf453d15ea"},{"code":";(fn f [coll n] (if (empty? coll) '() (concat (take (dec n) coll) (f (drop n coll) n))))\n#(mapcat (partial take (dec %2)) (partition-all %2 %1))","problem":41,"user":"530caf86e4b02e82168697df"},{"problem":41,"code":"(fn [l c] (reduce (fn [a b] (if (= (rem (first b) c) 0) a (conj a (last b)) ) ) [] (map-indexed (fn [idx x] [(inc idx) x] ) l)) )","user":"567798afe4b05957ce8c6169"},{"problem":41,"code":"(fn dropn[s n]\n  (apply concat (partition-all (dec n) n s)))","user":"57bd960fe4b05aa3c4741c52"},{"problem":41,"code":"(fn [col n]\n  (for [x (range (count col))\n        :when (> (mod (inc x) n) 0)]\n    (nth col x)))","user":"5a144fd8e4b0ff51aa4b319a"},{"problem":41,"code":"( fn [arr n]\n  \t(flatten (partition-all (dec n) n arr) ) )","user":"555093b2e4b00713264bd9ab"},{"code":"(fn f\r\n   ([xs n i ret]\r\n      (if (empty? xs)\r\n        ret\r\n        (if (= i 0)\r\n          (f (rest xs) n (dec n) ret)\r\n          (f (rest xs) n (dec i) (concat ret (list (first xs)))))))\r\n   ([xs n]\r\n      (f xs n (dec n) nil)))","problem":41,"user":"4e059278535d04ed9115e7a5"},{"problem":41,"code":"(fn [sq n] (map last (remove #(= (dec n) (mod (first %) n)) (map-indexed vector sq))))","user":"55fc07d3e4b0f488688e066e"},{"problem":41,"code":"(fn [xs n]\n  ((fn [i xs acc]\n     (cond (empty? xs) acc\n          (>= i n) (recur 1 (rest xs) acc)\n          :else (recur (inc i) (rest xs) (conj acc (first xs))))\n    ) 1 xs []))","user":"5d5e0259e4b0c9e5857d4fef"},{"problem":41,"code":"(fn [x y] \n  (loop [lst []\n         x x ]\n    (if (> (count x) 0)\n      (recur\n       (concat lst (take (dec y) x))\n       (nthnext x y)\n      )lst)\n   \n    ))","user":"591ac8ece4b09b4ee5954bdd"},{"code":"#(map (fn[x](second x)) (filter (fn[[a b]](not(zero? (mod a %2)))) (map #'vector (iterate inc 1) %1)))","problem":41,"user":"4e8849c5535d8b9bb0147ca4"},{"problem":41,"code":"(fn [s1 n]\n  (loop \n    [acc []\n     z1 s1\n     k n]\n    \n    (if (empty? z1)\n      acc\n      (if (= k 1)\n        (recur acc (rest z1) n)\n        (recur (conj acc (first z1)) (rest z1) (dec k))\n      )\n    )\n  )\n)","user":"5ea97df7e4b00a66d4a951c8"},{"problem":41,"code":"(fn [s n]\n  (let [v (vec s)]\n  \t(loop [i 0 s2 []]\n      (if (= i (count v))\n        s2\n        (recur (inc i) (if (= (mod i n) (- n 1)) s2 (conj s2 (v i))))))))","user":"53bbae20e4b047364c044509"},{"problem":41,"code":"(fn\n\t\t [lst n]\n\t\t (map #(last %)\n\t\t  (filter\n\t\t   #(pos? (mod (inc (first %)) n))\n\t\t   (map-indexed list lst))))","user":"54965534e4b0b312c081ff65"},{"problem":41,"code":"(fn [lst n] (mapcat (partial take (- n 1)) (partition-all n lst)))","user":"543bb568e4b032a45b869334"},{"code":"(fn f [x y]\n  (if (< (count x) y)\n    x\n    (concat (take (dec y) x)\n      (f (drop y x) y))))","problem":41,"user":"4f062d4a535dcb61093f6c08"},{"problem":41,"code":"; sigh, i suck at clojure\n#(apply concat (partition-all (dec %2) %2 %1))","user":"554bced1e4b0a04f79299599"},{"problem":41,"code":"(fn [c i]\n  (reduce\n   (fn [x y]\n     (if (if (instance? Long (/ (+ (.indexOf c y) 1) i)) false true)\n       (conj x y) x)\n     ) [] c) )","user":"570e43d8e4b0b0fb43fd06eb"},{"code":"(fn b[x n]\n  (loop [xx x\n         j 1\n         se ()]\n      (if (empty? xx)\n         se\n         (recur (rest xx) \n                (if (= j n ) 1 (inc j)) \n                (if (< j n) (concat se (list (first xx)))\n                     se)))))","problem":41,"user":"4f891abde4b033992c121c77"},{"code":"(fn drop-every-n [sq n]\r\n  (if (< (count sq) n)\r\n    sq\r\n    (concat (take (- n 1) sq)\r\n            (drop-every-n (drop n sq) n))))","problem":41,"user":"4f71db68e4b07046d9f4f015"},{"problem":41,"code":"(fn drop-nth [sequence n]\n  (apply concat (map #(take (dec n) %)\n        (partition n n [] sequence))))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn [s c] (flatten \n  (map \n    #(filter identity (butlast %)) \n      (partition c c (repeat nil) s))))","problem":41,"user":"4dbdc9da535d020aff1edf4c"},{"problem":41,"code":"#((fn drpn [sq n m] (\n                  if (empty? sq)\n                  '()\n                  (\n                   if (== (mod n m) 0)\n                   (drpn (rest sq) (inc n) m)\n                   (cons (first sq) (drpn (rest sq) (inc n) m))\n                   )\n                  ))\n   %1 1 %2)","user":"53342a1ce4b019098a6f8b8b"},{"problem":41,"code":"(fn [x n] (loop [xs x\n               y []\n               i 1]\n          (cond\n           (empty? xs) y\n            (= i n) (recur (rest xs) y 1)\n            :else (recur (rest xs) (conj y (first xs)) (inc i)))))","user":"5b2be9b1e4b025bcb146f2b0"},{"code":"(fn [coll n] \n  (remove nil? (map-indexed (fn [idx itm] (if (zero? (mod (inc idx) n)) nil itm)) coll)))","problem":41,"user":"51e595a6e4b0efabf93c02d8"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (loop [col coll  nth n i 1 acc []]\n    (if (seq col)\n      (let [item (first col)]\n        (if (= i n)\n          (recur (rest col) n 1 acc)\n          (recur (rest col) n (inc i) (conj acc item))))\n      acc)))","user":"54d0cedde4b0e8a36923e5d2"},{"code":"(fn f [l n]\n     (remove nil? \n       (map-indexed \n         #(when-not (= (dec n) (mod %1 n)) %2) l)))","problem":41,"user":"502ade49e4b0614b52996120"},{"code":"(fn drop-every-nth [coll n]\n  (loop [coll coll, res ()]\n    (if (empty? coll)\n      res\n      (recur (drop n coll)\n             (concat res (take (dec n) coll))))))","problem":41,"user":"4efa3d4b535dced4c769f270"},{"code":"(fn[the-seq divider]\n\t(loop [n 1, buf the-seq, out []]\n      (if (> n (count the-seq))\n        out\n        (recur (inc n)\n               (rest buf)\n               (if (= 0 (mod n divider))\n                 out\n                 (conj out (first buf)))))))","problem":41,"user":"4f80a906e4b033992c121bf7"},{"problem":41,"code":"#(reduce \n  (fn [a [e i]] (if \n                  (zero? (mod (+ 1 i) %2))\n                  a \n                  (conj a e)))\n  [] \n  (map vector %1 (range)))","user":"5a0b9fc0e4b04bbd27e6d992"},{"problem":41,"code":";#(apply concat (partition-all (dec %2) %2 %))\n#(apply vector (apply concat (map butlast (partition %2 %2 \"a\" %1))))","user":"5af19233e4b0cc2b61a3bc5f"},{"problem":41,"code":"#(loop [s %1 n %2 result []]\n  (if (empty? s)\n    (flatten result)\n    (recur (drop n s) n (conj result (take (- n 1) s)))))","user":"5763818ae4b0994c1922fbc7"},{"code":"(fn [cl n]\n   (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) cl)\n )","problem":41,"user":"51db9e1ee4b0e067a9bbadc9"},{"code":"(fn [coll index] (keep-indexed #(if (not (= (dec index) (mod % index))) %2) coll))","problem":41,"user":"4f04b66b535dcb61093f6bdd"},{"problem":41,"code":"(fn [xs i]\n  (->> (map vector xs (iterate inc 1))\n    (filter #(not= (rem (second %1) i) 0))\n    (map first)))","user":"5991eec7e4b0866487ed0d6e"},{"problem":41,"code":"(fn drop-nth [s n]\n  (apply concat (partition (dec n) n [] s))\n  )","user":"59f78b49e4b0ca45a743a30e"},{"problem":41,"code":"(fn mydrop [data n]\n  (loop [pos 1, in  data, out '()]\n    (cond\n      (empty? in) out\n      (zero? (mod pos n)) (recur (+ 1 pos) (next in) out)\n      :else (recur (+ 1 pos) (next in) (concat out (list (first in))) )\n    )\n  )\n)","user":"568513c4e4b04eec3ec5cfc5"},{"code":"#(keep-indexed (fn [idx itm] \n                 (if (not= (mod idx %2) (- %2 1))\n                   itm)) %1)","problem":41,"user":"5099a280e4b0cae2931060bb"},{"problem":41,"code":"(fn spoteverynth [s v]\n   (if (< (count s) v)\n     s\n     (into [] (concat (take (dec v) s) (spoteverynth (drop v s) v)))))","user":"60882700e4b0ae75613dcedf"},{"problem":41,"code":"#(loop\n   [coll %1 n %2 i 1 result []]\n   (if (seq coll)\n     (if (= n i)\n       (recur (rest coll) n 1 result)\n       (recur (rest coll) n (inc i) (conj result (first coll))))\n     result))","user":"574eb3b1e4b02ea114799247"},{"problem":41,"code":"(fn [coll n] (mapcat #(take (dec n) %) (partition-all n coll) ) )","user":"5ccf3879e4b0ccb0619628c4"},{"problem":41,"code":"(fn dr [x y]\n  (filter #(not (= nil %))\n\t(for [z (range (count x))]\n      (if (= (- y 1) (rem z y))\n        nil \n       \t(nth x z)\n      )\n    )\n  )\t\n)","user":"54078851e4b0addc1aec66bd"},{"code":"(fn [arg-x n]\n  (let [decr (dec n)]\n    (loop [x arg-x, result []]\n      (if (empty? x) result\n          (recur\n            (drop n x)\n            (concat result (take decr x)))))))","problem":41,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":41,"code":"(fn [arg n]\n  (for [n- (range (count arg))\n        :let [zer (not= 0 (rem (inc n-) n))]\n        :when zer]\n    (nth arg n-)\n    ))","user":"5cc092d1e4b0ccb061962790"},{"problem":41,"code":"(fn   [coll n]\n  (reverse\n   (loop [remaining coll\n          current 1\n          return '()]\n\n     (if (zero? (count remaining))\n\n       return\n\n       (if (= current n)\n\n         (recur (rest remaining)\n                1\n                return)\n\n         (recur (rest remaining)\n                (inc current)\n                (conj return (first remaining))))))))","user":"59971dcbe4b07157cc8daacb"},{"code":"(fn [ls p] (flatten (partition-all (dec p) p ls)))","problem":41,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn [sq n] (map second (filter (fn [x] (let [f (first x) s (second x)] (not= (rem f n) 0))) (map vector (iterate inc 1) sq))))","problem":41,"user":"51bc2f6ae4b0fe3ecfb46452"},{"problem":41,"code":"(fn drop-every-other\n  [coll i]\n  (keep-indexed #(if (not= (mod %1 i) (dec i)) %2) coll))","user":"5f003099e4b0cf489e8d7f17"},{"code":"(fn drop-nth [lst n]\r\n  (if (seq lst)\r\n    (lazy-seq (concat (take (- n 1) lst) (drop-nth (drop n lst) n)))))","problem":41,"user":"4dda5d07535d02782fcbe9f2"},{"problem":41,"code":"(fn f [s n]\n  (concat\n    (take (- n 1) s)\n    (if (>= (count (drop n s)) n)\n      (f (drop n s) n)\n      (drop n s))))","user":"5ac91d90e4b0e27600da77bd"},{"problem":41,"code":"(fn [coll n]\n   (keep-indexed (fn [i x] (if (not= (mod (inc i) n ) 0) x))\n                 coll))","user":"59ac0965e4b08cbb53654da6"},{"problem":41,"code":"(fn my-drop-nth [l n]\n  (cond\n   (empty? l) '()\n   :else (flatten (concat (take (dec n) l)\n                          (my-drop-nth (drop n l) n)))))","user":"558df2ebe4b0277789237649"},{"code":"(fn [xs n] (flatten (partition (dec n) n [] xs)))","problem":41,"user":"4f8c6bf6e4b02e764a0a519b"},{"code":"#(loop [lst %1 acc [] i (dec %2) n %2]\n   (cond\n    (empty? lst) acc\n    (zero? i) (recur (rest lst) acc (dec n) n)\n    :else (recur (rest lst) (conj acc (first lst)) (dec i) n)))","problem":41,"user":"52b405e1e4b0c58976d9ad15"},{"problem":41,"code":"(fn [coll n]\n  (mapcat (fn [coll] (if (= (count coll) n) (drop-last coll) coll))\n          (partition-all n coll)))","user":"58ffaddee4b0438e51c2cffe"},{"code":"(fn dropevery [seq n] (keep-indexed (fn filter [index item] (if (= (mod (inc index) n) 0) nil item)) seq) )","problem":41,"user":"4ebe8d65535dfed6da9c6d96"},{"problem":41,"code":"(fn [a n] (map second (filter #(not(zero? (rem (inc (first %)) n))) (map-indexed list a))))","user":"53da70a4e4b0e771c302549d"},{"code":"(fn dropn [xs y]\n  (if (> y (count (take y xs)))\n      xs\n      (lazy-cat (take (dec y) xs) (dropn (drop y xs) y))))","problem":41,"user":"4f7250cce4b07046d9f4f02a"},{"code":"#(vec (flatten (partition-all (dec %2) %2 %)))","problem":41,"user":"4f61c3cfe4b0defedf855fc6"},{"problem":41,"code":"(fn f [s n]\n  (loop [agg [] ss s]\n    (if (empty? ss)\n      agg\n      (recur (concat agg (let [x (take n ss)]\n                           (if (> n (count x))\n                             x\n                             (drop-last x))))\n             (drop n ss)))))","user":"570794d8e4b0b0fb43fd068b"},{"code":"(fn\n  [xs n]\n  (loop [ys xs accum ()]\n    (if (empty? ys)\n      (flatten accum)\n      (let [front (take (dec n) ys) back (drop n ys)]\n        (recur back (conj front accum))))))","problem":41,"user":"512e7402e4b0b740abc59826"},{"problem":41,"code":"#(reduce (fn [l x] (if (= (mod (+ (.indexOf %1 x) 1) %2) 0) l (conj l x))) [] %1)","user":"53da3fcde4b0e771c3025497"},{"problem":41,"code":"#(apply concat (partition (- %2 1) %2 '() %1))","user":"53a7e3b9e4b047364c044423"},{"problem":41,"code":"(fn [xs n] (->> (partition-all n xs)\n               (map #(if (= n (count %)) (drop-last %) (identity %)))\n               (flatten)))","user":"5573ffb5e4b0aa18f790f3fd"},{"problem":41,"code":"(fn [xs n] (map first (filter (fn [[_ i]] (not= (mod (inc i) n) 0)) (map list xs (range)))))","user":"55381162e4b09218d5f44fda"},{"code":"(fn [coll val]\n\t(flatten (partition (dec val) val nil coll))\n   )","problem":41,"user":"50bd13dee4b0594b91591c65"},{"code":"(fn [xs n]\n  (map first (filter #(not (= 0 (rem (inc (second %)) n))) (map #(vector %1 %2) xs (range)))))","problem":41,"user":"4e6a2f51535d8ccf87e9fea9"},{"code":"#(reverse \r\n  (reduce \r\n    (fn [acc [elm ser]] \r\n      (if (= (mod ser %2) 0) \r\n        acc \r\n        (cons elm acc))) \r\n    [] \r\n    (map \r\n      (fn [e1 e2] \r\n        (vector e1 e2)) % \r\n      (take (count %) (iterate inc 1)))))","problem":41,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":41,"code":"(fn [coll n]\n    (loop [c coll \n           res '()]\n        (if (> n (count c))\n            (concat res c)\n            (recur (drop n c) (concat res (take (dec n) c)))\n        )\n    )\n)","user":"54996971e4b0b312c081ff8d"},{"problem":41,"code":"(fn [t u] (into [] (filter (complement nil?) ((fn [a b] (map (fn [x] (if (not (.contains (take-nth b (cons nil a)) x)) x)) a)) t u))))","user":"564a985be4b0284900eef65c"},{"code":"(fn [coll n]\r\n  (mapcat #(if (= (count %) n) (butlast %) %) (partition n n [] coll)))","problem":41,"user":"4df168bd535d08e6dec9fe1d"},{"code":"(fn [l n]\n  (loop [in l res []]\n    (if (empty? in)\n    (flatten res)\n    (recur (drop n in) (conj res  (take (- n 1) in)))\n)))","problem":41,"user":"4f63777be4b0defedf855fe4"},{"problem":41,"code":"#(->> %1\n      (partition-all %2)\n      (map (partial take (dec %2)))\n      (flatten))","user":"524b827ce4b09eba1c0223d7"},{"code":"(fn drop-every-nth [s n]\n  (remove nil?\n          (map-indexed (fn [idx itm]\n                         (let [nice-index (inc idx)]\n                           (if (= 0 (mod nice-index n))\n                             nil\n                             itm)))\n                       s)))","problem":41,"user":"51db0d99e4b06aa4d4669a9d"},{"problem":41,"code":"#(apply concat(partition-all (dec %2) %2 %))","user":"56a1b854e4b0542e1f8d14b2"},{"problem":41,"code":"(fn\n    [as n]\n    (loop [xs as\n           i n\n           ans []]\n      (if (empty? xs)\n        ans\n        (if (= 1 i)\n          (recur (rest xs) n ans)\n          (recur (rest xs) (dec i) (conj ans (first xs)))))\n    )\n  )","user":"5b8db323e4b0c0b3ffbd49da"},{"code":"#(mapcat butlast (partition %2 %2 '(0) %1))","problem":41,"user":"526a3412e4b03e8d9a4a721e"},{"code":"(fn [s n]\n   (loop [s   s\n          cnt 1\n          acc []]\n     (cond\n      (empty? s) acc\n      (zero? (rem cnt n)) (recur (rest s) (inc cnt) acc)\n      :else (recur (rest s) (inc cnt) (conj acc (first s))))))","problem":41,"user":"52c25645e4b07a9af579237d"},{"code":"(fn dropnth\r\n  ([x y]\r\n    (dropnth (rest x) y [(first x)] 2))\r\n  ([x y z w]\r\n    (if (= 0 (count x))\r\n      z\r\n      (if (= y w)\r\n        (recur (rest x) y z 1)\r\n        (recur (rest x) y (conj z (first x)) (inc w))))))","problem":41,"user":"4e16bdef535d04ed9115e7e9"},{"code":"(fn [[& seqN] n]\n  (loop [seqM seqN acc []]\n    (if (>= (count seqM) n)\n      (recur \n       (drop n seqM)\n       (conj acc (take (- n 1) seqM)))\n    ; ugly hack!\n    (into [] (flatten (conj acc seqM))))))","problem":41,"user":"50097962e4b03d00572d2d6c"},{"problem":41,"code":"(fn [col n]\n    (let [cnt (count col)\n          everynth (flatten (conj (into [] (repeat (/ cnt n) (reverse (conj (repeat (- n 1) 0) 1)))) (repeat (mod cnt n) 0)))]\n      (filter (complement nil?) (map (fn [x y] (if (= y 0) x)) col everynth))))","user":"59932f49e4b0b211ea3aaaae"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not (zero? (mod (inc %1) n))) %2 nil) coll))","user":"595a3b41e4b066ee0a44afb7"},{"problem":41,"code":"#(filter (comp not nil?) (map-indexed (fn [idx itm] (if (= 0 (mod (inc idx) %2)) nil itm)) %1))","user":"54d9366ce4b0a52adc2e204e"},{"problem":41,"code":"(fn [c n] (loop [c c, a [], i 1] (cond (empty? c) a (= n i) (recur (rest c) a 1) :else (recur (rest c) (conj a (first c)) (inc i)))))","user":"4e268c6e535deb9a81d77ef4"},{"problem":41,"code":"#(flatten (map (fn [x] (take (dec %2) x)) (partition-all %2 %)))","user":"53a739b0e4b0ef122a8689d0"},{"code":"(fn [q n]\r\n   (loop [s q m 1 r (empty q)]\r\n\t    (if (empty? s)\r\n\t\t    r\r\n        (if (= m n)\r\n          (recur (rest s) 1 r)\r\n          (recur (rest s) (inc m) (conj r (first s)))))))","problem":41,"user":"4e821ca5535db62dc21a62c2"},{"problem":41,"code":"(fn [lst n]\n  (apply\n    concat\n   (partition-all\n     (dec n)\n     n\n     lst\n   )\n  )\n)","user":"5726adf8e4b0c5bde472c12b"},{"code":"#(remove nil? (map-indexed (fn [i, x] (if (= (rem (inc i) %2) 0) nil x)) %))","problem":41,"user":"4f6b4237e4b07046d9f4efa9"},{"code":"(fn [s e]\n  (map first\n    (filter second\n      (map list s\n        (cycle (concat (repeat (dec e) true) [false]))))))","problem":41,"user":"4fc13433e4b081705acca32b"},{"code":"#(let [position %2]\n    (loop [x %1 current 1 result[]]\n\t     (if (empty? x)\n\t\t result\n\t\t (recur (rest x) (inc current) (if  (= 0 (mod current position)) result (conj result (first x)))))))","problem":41,"user":"4f066916535dcb61093f6c10"},{"problem":41,"code":"(fn drop-interval [xs n]\n  (filter #(not (nil? %))\n          (mapcat drop-last (partition n n (repeat nil) xs))))","user":"56c21eafe4b05cc29241ee7e"},{"code":"(fn [xs n]\n  (apply concat (partition-all (- n 1) n xs)))","problem":41,"user":"52b9c62ce4b07a9af57922c3"},{"problem":41,"code":"(fn [col n] (mapcat identity (partition (dec n) n nil col)))","user":"54246d6de4b01498b1a71aec"},{"problem":41,"code":"(fn [x remov]\n  (let [m (map-indexed vector x)]\n    (reduce \n      (fn [out [i part]]\n        (if (= (mod (inc i) remov) 0) \n          out\n          (conj out part)\n        ))\n    []\n    m)))","user":"5f3a8493e4b004f08c61c527"},{"code":"(fn foo [s n] (if (< (count s) n) s (concat (take (- n 1) s) (foo (drop n s) n))))","problem":41,"user":"50f9c7fde4b0e7c80cb15a52"},{"problem":41,"code":"(fn [s drop-num]\n  (loop [s s ret [] index 0]\n    (if-not (seq s)\n      ret\n      (if (= 0 (rem (inc index) drop-num))\n        (recur (rest s) ret (inc index))\n        (recur (rest s) (conj ret (first s)) (inc index))))))","user":"555ee545e4b0a2eb076a39bd"},{"code":"(fn [l n] (map second (filter #(not (= (mod (first %) n) 0)) (map list (range 1 (+ (count l) 1)) l))))","problem":41,"user":"53638ed2e4b0243289761e5b"},{"code":"(fn [l num] (flatten (map #(take (dec num) %1) (partition-all num l ))))","problem":41,"user":"5290ffaee4b0239c8a67af10"},{"problem":41,"code":"(fn f [xs n]\n  (let [f1 (fn f1 [xs n n1]\n             (if (seq xs)\n               (concat  (if (not=( mod n1 n) 0)\n                          [(first xs)]\n                          [])\n                        (f1 (rest xs)  n (inc n1)))\n               []))]\n    (f1 xs n 1)))","user":"58ef4db9e4b056aecfd47dc6"},{"problem":41,"code":"(fn [col v]\n  (loop [result (vec (take (dec v) col))\n         r (drop v col)]\n    (if (= nil (first r))\n      result\n      (recur (apply conj result (take (dec v) r))\n             (drop v r)))))","user":"5c30da5ae4b0d62ef62d9f23"},{"problem":41,"code":"(fn [l n] (->> l (partition-all n) (map #(take (dec n) %)) flatten))","user":"55da18d5e4b0e31453f64ad1"},{"problem":41,"code":"(fn pia [lst n]\n  (loop [ilst lst\n         in 1\n         ires []\n         ]\n    (if (empty? ilst)\n      ires\n      (recur\n        (rest ilst)\n        (inc in)\n        (if (= 0 (mod in n))\n          ires\n          (conj ires (first ilst))\n          )\n        )\n      )\n    )\n  )","user":"569ce6fee4b0542e1f8d146c"},{"code":"(fn [s n]\n  (filter #(not= % nil) (reduce concat (partition (dec n) n (repeat nil) s))))","problem":41,"user":"4f9b3532e4b0dcca54ed6d13"},{"problem":41,"code":"#(loop [w % i 1 r []]\n   (if (empty? w)\n     r\n     (if (>= i %2)\n       (recur (rest w) 1 r)\n       (recur (rest w) (inc i) (conj r (first w))))))","user":"5fb3a096e4b08cb800c85b35"},{"problem":41,"code":"(fn\n  [base-seq remove-nth]\n  (let [g (fn\n            [base-seq remove-nth]\n            (loop [x (- remove-nth 1)\n                  result []]\n              (if (< x (count base-seq))\n                (recur (+ x remove-nth) (conj result x))\n                result)))\n        f (fn\n            [base-seq remove-nth]\n              (keep-indexed \n                (fn\n                  [index item]\n                  (if (contains? (set remove-nth) index)\n                    nil\n                    item)) \n                base-seq))]\n    (f base-seq (g base-seq remove-nth))))","user":"5a35d515e4b0ddc586f153e1"},{"problem":41,"code":"(fn drop-nth [coll i] \n  (lazy-seq \n    (if (seq coll) \n      (concat (take (dec i) coll) \n              (drop-nth (drop i coll) i)))))","user":"51412b0ae4b0694e2952b79d"},{"problem":41,"code":"(fn [seq n]\n  (mapcat #(take (dec n) %) (partition-all n seq)))","user":"5c891afde4b048ec896c5935"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(when (not (zero? (mod (inc %1) n))) %2) coll))","user":"597768d0e4b01722bebd4cee"},{"code":"(fn drop-every-nth [xs n]\n  (loop [accum ()\n         xs xs]\n    (if (empty? xs)\n      accum\n      (recur (concat accum (take (- n 1) xs)) (drop n xs)))))","problem":41,"user":"4ef41f26535dced4c769f230"},{"code":"(fn [c n]\n   (apply concat\n    (map-indexed\n     #(if (zero? (mod (inc %1) n))\n        []\n        [%2])\n     c)))","problem":41,"user":"53224d45e4b09d4e7a9b54c0"},{"code":"(fn f41 [x n]\n    (vec (reduce concat (map #(take (- n 1) %) (partition-all n x))))\n)","problem":41,"user":"4f0df199535d0136e6c2231e"},{"code":"(fn dropNth[seq n]\n  (if (> n (count seq))\n    seq\n    (concat (take (- n 1) seq) (dropNth (nthrest seq n) n))))","problem":41,"user":"525d490ae4b0cb4875a45d70"},{"problem":41,"code":"#(loop [s %1, i 1, r []]\n   (if (empty? s)\n    r\n    (recur (rest s) (inc i) (if (= 0 (rem i %2)) r (conj r (first s))))))","user":"5e2ead6ae4b05b4b015161f5"},{"code":"(fn [l n] (remove nil? (map #(when (not= 0 (rem (inc %1) n)) %2) (range (count l)) l)))","problem":41,"user":"4fa11204e4b0dcca54ed6d56"},{"code":"(fn [seq n]\n  (map first\n       (filter #(not (= (- n 1) (second %)))\n               (map #(vector %1 %2)\n                    seq\n                    (cycle (range n))))))\n\n;(fn [s n]\n;  (loop [result []\n;         s s\n;         m (- n 1)]\n;    (if (empty? s)\n;      result\n;      (if (= m 0)\n;        (recur result (rest s) (- n 1))\n;        (recur (conj result (first s)) (rest s) (- m 1))))))","problem":41,"user":"4ec6297b535d6d7199dd36c4"},{"problem":41,"code":"(fn [coll pos]\n  (for [[idx, x] (map #(vector %1 %2) (range) coll) :when (not= (rem (+ idx 1) pos) 0)] \n    x))","user":"59225498e4b09b4ee5954c8c"},{"code":";(fn[col n](\n;     map (partial nth col )\n;       (vec (remove (set (range (- n  1) (count col)  n))  (range 0  (count col) )))\n;                  ))\n#(flatten (partition-all (dec %2) %2 %))","problem":41,"user":"52f426fce4b05e3f0be25f1e"},{"problem":41,"code":"(fn [coll x]\n  (->>\n    (map vector coll (range))\n    (filter #(not= (rem (+ (last %) 1) x) 0))\n    (map #(first %))\n  )\n)","user":"5bc28638e4b07a9b28b10033"},{"problem":41,"code":"(fn mdnth [c n] (mapcat #(if (= (count %) n) (drop-last %) %) (partition-all n c)))","user":"5900d5cde4b0438e51c2d02e"},{"problem":41,"code":"(fn [x y]\n  (loop [lst x\n         cnt (dec y)\n         new '()]\n    (cond (empty? lst) (reverse new)\n          (zero? cnt) (recur (rest lst) (dec y) new)\n          :else (recur (rest lst) (dec cnt) (cons (first lst) new)))))","user":"5af74644e4b0cc2b61a3bcc2"},{"problem":41,"code":"(fn [x z] (map second (filter #( not= 0 (mod (first %) z)) (map-indexed (fn [i x] [(inc i) x]) x ))))","user":"58eed4c5e4b056aecfd47db7"},{"code":"(fn filternth [xs n]\n   (filter #(not (nil? %))\n     (map\n       (fn getsnd [a b] (if a b nil))\n         (map \n           #(not= 0 (mod % n))\n           (range 1 (inc (count xs))))\n           xs)))","problem":41,"user":"4ea7999e535d7eef308072ee"},{"code":"#(map second (filter (fn [c] (> (mod (+ 1 (first c)) %2) 0)) (map-indexed list %)))","problem":41,"user":"5268f5b4e4b03e8d9a4a71cf"},{"code":"(fn drop-every-nth [x n]\n  (when\n    (seq x)\n    (concat \n      (take (dec n) x)\n      (drop-every-nth (drop n x) n))))","problem":41,"user":"4fa5406fe4b081705acca1ac"},{"problem":41,"code":"(fn [coll n] (loop [i 1 f (first coll) coll-n (next coll) coll-f []] (if (nil? f) coll-f (recur (inc i) (first coll-n) (next coll-n) (if (= (mod i n) 0) coll-f (conj coll-f f))))))","user":"564c8e99e4b0284900eef674"},{"problem":41,"code":"(fn [xs n]\n  (loop [xs xs\n         counter (dec n)\n         acc nil]\n    (if (empty? xs)\n      (reverse acc)\n      (if (zero? counter)\n        (recur (rest xs) (dec n) acc)\n        (recur (rest xs) (dec counter) (cons (first xs) acc))))))","user":"5b673832e4b0c6492753e760"},{"code":"(fn [coll n] (vec (remove (set (take-nth n (cons 0 coll)))\r\n                            coll))   )","problem":41,"user":"4ff4bed0e4b0678c553fc35f"},{"problem":41,"code":"(fn my-drop-every [col n]\n  (when col\n    (lazy-cat (take (dec n) col) (my-drop-every (nthnext col n) n))))","user":"548018d1e4b0c51c1f4d7326"},{"code":"#((fn [l i n acc]\n     (if (empty? l)\n       (reverse acc)\n       (if (= i 1)\n         (recur (rest l) n n acc)\n         (recur (rest l) (- i 1) n (cons (first l) acc))))) %1 %2 %2 nil)","problem":41,"user":"4ff355a1e4b0678c553fc34d"},{"problem":41,"code":"(fn [in n-th]\n  (loop [sq (reverse in) n n-th res '()]\n    (cond \n       (empty? sq) res\n       (= 0 (mod (count sq) n)) (recur (next sq) n res)\n       :else\n          (recur (rest sq) n (cons (first sq) res )))))","user":"5600591de4b04bb52996e166"},{"problem":41,"code":"(fn [coll, n] (mapcat #(take (- n 1) %) (partition-all n coll)))","user":"53bd7080e4b0d9a98559a6d1"},{"problem":41,"code":"(fn [s n]\n  (loop [[f & r :as in] s\n         out []\n         c 1]\n    (if (empty? in)\n      out\n      (if (= c n)\n        (recur r out 1)\n        (recur r (conj out f) (inc c))))))","user":"54c120d7e4b0ed20f4ff6f1c"},{"problem":41,"code":"(fn drop-nth [it result collection n]\n  (if (empty? collection)\n    result\n    (if (= (mod it n) 0)\n      (drop-nth (inc it) result (rest collection) n)\n      (drop-nth (inc it) (conj result (first collection)) (rest collection) n)\n    )\n  )\n)\n1\n(vector)","user":"55429859e4b0a04f7929951f"},{"code":"(fn dropit [s n]\n  (let [start (take (dec n) s)\n        rems (drop n s)]\n    (if (empty? rems) start (concat start (dropit rems n)))))","problem":41,"user":"5074b3ece4b054001656acd5"},{"code":"(fn [coll x] (flatten (partition-all (- x 1) x coll)))","problem":41,"user":"4f4c8faae4b03ad3f0c10c93"},{"code":"(fn [a b] (apply concat (partition-all (dec b) b a)))","problem":41,"user":"520332f7e4b030ee0c5b2714"},{"code":"(fn [l n] (for [[i x] (map-indexed (fn [i x] [i x]) l) :when (not= (mod (inc i) n) 0)] x))","problem":41,"user":"5084cb7de4b0fb8f40674bfb"},{"code":"(fn[s n] (filter #(not= % -9999) (map-indexed  #(if (= (rem %1 n) (dec n)) -9999 %2) s )))","problem":41,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":41,"code":"(fn lol [coll x]\n  (let [parts (partition-all x coll)]\n    (mapcat \n     (fn [part]\n       (if (< (count part) x)\n         part\n         (drop-last part))) \n     parts)))","user":"5f247827e4b0f565ad998292"},{"problem":41,"code":"(fn dropn [coll n]\n  (if (empty? coll) []\n      (concat (take (dec n) coll) (dropn (drop n coll) n))))","user":"54b07c1ee4b09f271ff37d16"},{"code":"(fn [coll dropn]\n  (apply concat (partition-all (- dropn 1) dropn coll)))","problem":41,"user":"5152bc4ee4b001f44f99bfef"},{"problem":41,"code":"(fn f [xs n]\n  (if (< (count xs) n)\n    xs\n    (vec (concat (take (dec n) xs) (f (nthrest xs n) n)))))","user":"55b28b57e4b01b9910ae296c"},{"problem":41,"code":"(fn denth [li th]\n  (let[y (into []\n               (map #(nth li %)\n                    (map #(- % 1)\n                         (sort\n                          (for[x li\n                               :let [i (+ 1 (.indexOf li x))]\n                               :when (= 0 (mod i th))]\n                            i)))))]\n    (filter (fn[x] (= false (.contains y x)))\n            li)))","user":"5dab11cde4b000c986472c45"},{"problem":41,"code":"#(keep-indexed (fn [i x]\n                 (if (= 0 (mod (inc i) %2))\n                   nil\n                   x)) %1)","user":"5e62444fe4b0fd0acd158694"},{"code":"(fn [coll n]\n  (keep-indexed\n    #(when-not (= 0 (mod (inc %) n)) %2) coll))","problem":41,"user":"4ec5aa1f535d6d7199dd36b0"},{"problem":41,"code":"(fn [s v]\n  (->> (map list (range 1 (inc (count s))) s)\n       (filter #(not= 0 (mod (first %1) v)))\n       (map last)))","user":"5f597522e4b0a0bc16850a9e"},{"problem":41,"code":"(fn [initial-x nth]\n      (loop [x_prime (empty initial-x) x initial-x n nth i 1]\n        (println (str x \", \" n \", \" i))\n        (if (empty? x)\n          x_prime\n          (if (= i n)\n            (recur x_prime (rest x) n 1)\n            (recur (conj x_prime (first x)) (rest x) n (inc i))\n            )\n          )\n        )\n      )","user":"561bf12ce4b064ca9f4b168e"},{"problem":41,"code":"#(take-while (complement nil?) (mapcat butlast (partition %2 %2 (repeat nil) %1)))","user":"530e75d5e4b08068f379ecba"},{"problem":41,"code":"#(loop [ns [] s %1 acc 1 itemNum %2] \n    (if (= 0 (count s)) \n      ns \n      (if (= acc itemNum)\n        (recur ns (rest s) 1 itemNum)\n        (recur (conj ns (first s)) (rest s) (inc acc) itemNum)\n       )\n     )\n   )","user":"571172ece4b09c608db70446"},{"problem":41,"code":"#(filter (partial not= :dummy) (flatten (map drop-last\n                (partition %2 (concat % (repeat (- %2 1) :dummy))))))","user":"5658acabe4b0f9d632dd84b7"},{"code":"(fn [coll idx] \n  (loop [col coll result [] cnt 1] \n    (if (seq col) \n      (if (= cnt idx) \n        (recur (rest col ) result 1) \n        (recur (rest col ) (conj result (first col)) (inc cnt)))\n      result)))","problem":41,"user":"52f381f3e4b05e3f0be25f10"},{"problem":41,"code":"(fn [coll x] (keep-indexed #(if (not= (rem (inc %1) x) 0) %2) coll))","user":"5cdd934ce4b05ee0cb311761"},{"code":"(fn [s n] (concat (mapcat butlast (partition n s)) (take-last (mod (count s) n) s)))","problem":41,"user":"4f2de7e9e4b0d6649770a061"},{"code":"(fn [coll n]\n  (loop [walking coll result []]\n    (if (empty? walking)\n      result\n      (recur\n        (drop n walking)\n        (concat result (-> n dec (take walking)))))))","problem":41,"user":"4ff6aea8e4b0678c553fc381"},{"problem":41,"code":"(fn drop-nth [xs n] \n  (if \n    (empty? xs) \n    []\n    (concat \n      (take (dec n) xs)\n      (drop-nth (drop n xs) n))))","user":"5606a4ace4b08b23635d3175"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (keep-indexed (fn [idx elem]\n                  (let [counted-idx (+ idx 1)]\n                    (if (or (< counted-idx n) (not= 0 (mod counted-idx n)))\n                      elem)))\n                coll))","user":"5852801ee4b0b7285a6f4eb1"},{"code":"(fn [coll n] (keep-indexed #(if (not= (rem (inc %1) n) 0) %2) coll))","problem":41,"user":"4f0412f8535dcb61093f6b99"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (->> coll\n       (map vector (iterate inc 1))\n       (remove #(zero? (mod (first %) n)))\n       (map second)))","user":"59135c11e4b0163c97b36f02"},{"code":"#(apply concat (partition-all (- %2 1) %2 %1))","problem":41,"user":"4f089f1a535dcb61093f6c3c"},{"problem":41,"code":"(fn my-drop-nth [s n]\n  (loop [s s result [] i 1]\n    (if (empty? s)\n      (seq result)\n      (let [result (if (not= i n)(conj result (first s)) result)\n            i (if (= i n) 1 (+ i 1))] \n        (recur (rest s) result i)))))","user":"556405e5e4b0c656e3ff17fb"},{"problem":41,"code":"(fn [lst x] (flatten (map #(take (- x 1) %) (partition-all x lst))))","user":"5a2e80fde4b09cafd31c7f7d"},{"code":"(fn[l,n] (keep-indexed (fn[i,v] (if (= (mod (+ 1 i) n) 0) nil v)) l))","problem":41,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn [s n]\n  (map\n   (fn [[i x]] x)\n   (filter\n    (fn [[i x]] (not (= (mod i n) (dec n))))\n    (map-indexed vector s))))","problem":41,"user":"5201ada5e4b0b2e020a18f14"},{"problem":41,"code":"(fn [xs n]\n  (loop [xs xs\n         acc []\n         n n\n         ctr n]\n    (cond (empty? xs) acc\n          (<= ctr 1) (recur (rest xs) acc n n)\n          :else (recur (rest xs) (conj acc (first xs)) n (dec ctr))\n          )\n    )\n  )","user":"57ca95f2e4b05aa3c4741d3b"},{"code":"(fn [xs n]\n  (->> (map-indexed vector xs)\n       (filter #(not= (dec n) (mod (first %) n)))\n       (map second)))","problem":41,"user":"51269362e4b083bb8f88cf09"},{"problem":41,"code":"(fn [s n]\n  (loop [i 0\n         result []]\n    (cond (>= i (count s)) result\n          (= (- n 1) (mod i n)) (recur (+ i 1) result)\n          :else (recur (+ i 1) (conj result (get s i))))))","user":"541709b0e4b01498b1a71a06"},{"problem":41,"code":"(fn f [l n]  (map last (filter #(not= (mod (inc (first %)) n) 0) (map-indexed vector l))))","user":"55f25ae6e4b06e875b46ce43"},{"problem":41,"code":"(fn [a b] (filter #(not (nil? %)) (for [x (range 0 (count a))] (if (= 0 (mod (+ x 1) b)) nil (nth a x)))))","user":"5425d454e4b01498b1a71b13"},{"problem":41,"code":"(fn drop-every-nth [s n]\n\t(if (empty? s) '()\n\t(concat (take (dec n) s) (drop-every-nth (drop n s) n)))\n)","user":"57a9db97e4b0b8559636fc5b"},{"code":"(fn drop-every-nth\n  [coll n]\n  (keep-indexed\n   #(if (not= (rem (inc %1) n) 0) %2)\n   coll))","problem":41,"user":"51937eb3e4b04df54c098022"},{"problem":41,"code":"#(loop [f [] c %1 i 1]\n   (if (seq c)\n     (recur (if (= 0 (rem i %2)) f (concat f [(first c)])) (rest c) (inc i))\n      f))","user":"571ac0b8e4b07c98581c3b5b"},{"problem":41,"code":"#(loop [xs %1 rs []]\n   (if (empty? xs)\n     rs\n     (recur (drop %2 xs) (concat rs (take (dec %2) xs)))))","user":"58cfbd7ae4b03c36ff7e58ba"},{"problem":41,"code":"(fn [coll n]\n   (mapcat #(take (- n 1) %) (partition n n nil coll)))","user":"5073e7fde4b054001656accb"},{"problem":41,"code":"(fn drop-nth \n  ([coll n]\n    (drop-nth coll n []))\n  ([coll n res]\n    (if (empty? coll)\n      res\n      (recur (drop n coll) n (concat res (take (dec n) coll))))))","user":"5ed9c2cde4b0c7845d86b0e4"},{"code":"#(mapcat \n  (fn [x]\n    (if \n      (= (count x) %2)\n      (drop-last x)\n      x))\n  (partition-all %2 %1))","problem":41,"user":"5354bb38e4b084c2834f4b0a"},{"problem":41,"code":"(fn [lst pos]\n  (loop [res [] \n         arr lst \n         n 1]\n    (if (empty? arr)\n      res\n      (if (= (mod n pos) 0)\n        (recur res (rest arr) (inc n))\n        (recur (conj res (first arr)) (rest arr) (inc n))\n      )\n    )\n  )\n)","user":"54d35746e4b0e8a36923e606"},{"problem":41,"code":"(fn [s n] (->> s \n              (map #(-> [%1 %2]) (cycle (range n)))\n              (filter (fn [[c d]] (not= (dec n) c)))\n              (map (fn [[c d]] d)) ))","user":"550aeddae4b06e50f9beb135"},{"problem":41,"code":"(fn [sq cnt]\n  (loop [s sq n (dec cnt) acc (empty sq)]\n    (if (empty? s)\n      (into (empty sq) acc)\n      (recur (rest s) (if (= n 0) (dec cnt) (dec n)) (if (> n 0) (conj acc (first s)) acc)))))","user":"5471f2fbe4b094393f72dd70"},{"code":"(fn [l n]\n  (loop [c 1\n         dropped []\n         lst l]\n    (if (empty? lst)\n      dropped\n      (if (= c n)\n        (recur 1\n               dropped\n               (rest lst))\n        (recur (inc c)\n               (conj dropped (first lst))\n               (rest lst))))))","problem":41,"user":"4f942227e4b0dcca54ed6cbe"},{"problem":41,"code":"(fn [coll drop-num]\n    (loop [result [] coll coll count 1]\n        (if (empty? coll)\n            result\n            (if (= count drop-num)\n                (recur result (rest coll) 1)\n                (recur (conj result (first coll)) (rest coll) (inc count))))))","user":"5896735fe4b00487982d529d"},{"problem":41,"code":"(fn my_drop_nth [s n]\n  (filter (fn [elem] (not= (dec n) (mod (.indexOf s elem) n))) s))","user":"5a1bec89e4b0ff51aa4b322f"},{"code":"(fn [xs n]\n  (letfn [(go [dest src i]\n              (if (empty? src)\n                dest\n                (if (= i n)\n                  (recur dest (rest src) 1)\n                  (recur (cons (first src) dest) (rest src) (inc i)))))]\n    (reverse (go [] xs 1))))","problem":41,"user":"525ab6cfe4b0cb4875a45cf9"},{"code":"(fn f [s n] \n  (if (empty? s) \n    []\n    (concat (take (- n 1) s) (f (drop n s) n))))","problem":41,"user":"4f5694cae4b0a7574ea71827"},{"problem":41,"code":"(fn [l n] (filter #(< 0 (mod (inc (.indexOf l %)) n)) l))","user":"55337e61e4b09218d5f44f8e"},{"problem":41,"code":"(fn [ls n]\n  (loop [l ls c 1 r []]\n    (if (empty? l)\n      r\n      (if (= (mod c n) 0)\n        (recur (rest l) (inc c) r)\n        (recur (rest l) (inc c) (conj r (first l)))))))","user":"5700ec08e4b08d47c97781cd"},{"code":"(fn [coll n]\n  (mapcat #(take (- n 1) %) (partition-all n coll)))","problem":41,"user":"52c672e2e4b0c2d177d6210e"},{"problem":41,"code":"(fn [s d]\n  (apply concat (partition-all (dec d) d s)))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn dropnth [L n]\n  (cond (< (count L) n) L\n        :else (concat (take (dec n) L) (dropnth (drop n L) n))))","problem":41,"user":"52153bdde4b0961f15ac4daa"},{"code":"(fn [coll n]\n  (->> coll\n       (map-indexed #(if (not (zero? (rem (inc %1) n))) %2 nil))\n       (filter (complement nil?))))","problem":41,"user":"5250b7a5e4b0541d1855b83e"},{"code":"(fn [collection n] (mapcat (fn [x] (take (- n 1) x)) (partition-all n collection)))","problem":41,"user":"520a9897e4b01da9d47a99e1"},{"code":"(fn [s n]\n  (flatten (map \n            #(if (= (count %) n) (butlast %) %) \n            (partition-all n s))))","problem":41,"user":"4ec9549d535d6d7199dd36fe"},{"code":"(fn l [coll n]\n  (if-let [x (seq coll)]\n    (concat (take (dec n) x) (l ( drop n x) n))))","problem":41,"user":"502904e0e4b0feaf66e22fad"},{"problem":41,"code":";;(fn [c n] (mapcat #(if (= n (count %)) (drop-last %) %) (partition-all n c)))\n(fn [c n] (reduce concat (partition (dec n) n [] c)))","user":"551535cee4b055c2f668d4df"},{"code":"(fn drop-nth\n  [coll n]\n     (when-let [s (seq coll)]\n       (concat (take (dec n) s) (drop-nth (drop n s) n))))","problem":41,"user":"510ee996e4b07438aa321462"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (->> coll\n       (map vector (iterate inc 1))\n       (remove #(zero? (mod (first %) n)))\n       (map second)))","user":"58c1b4f5e4b021aa9917ed01"},{"code":"#(apply vector (clojure.set/difference (set %) (set (take-nth %2 (cons [nil] % )))))","problem":41,"user":"51e3cf8ee4b0efabf93c02a3"},{"problem":41,"code":"(fn\n  [coll xth]\n  (mapcat #(if (= (count %) xth) (butlast %) %) (partition-all xth coll)))","user":"5640b135e4b08d4f616f5ee8"},{"problem":41,"code":"#(apply concat\n        (partition-all (dec %2) %2 %1))","user":"544b699ce4b0e39780006964"},{"code":"(fn [s n]\n  (mapcat\n    (partial take (dec n))\n    (partition-all n s)))","problem":41,"user":"4eb2e6ca535d7eef3080734f"},{"problem":41,"code":"#(loop [count 1 acc [] cur-coll %1]\n    (cond\n     (empty? cur-coll) acc\n     (= count %2)       (recur 1 acc (rest cur-coll))\n     :else             (recur (inc count) (conj acc (first cur-coll)) (rest cur-coll))))","user":"5576f299e4b05c286339e077"},{"problem":41,"code":"(fn foo[coll n] (mapcat #(take (- n 1) %) (partition-all n coll)))","user":"5537b2c7e4b09218d5f44fce"},{"code":"(fn [s, n] \n  (loop [ptr s cnt n ns []]\n    (cond\n     (nil? ptr) ns\n     (== cnt 1) (recur (next ptr) n ns)\n     :else (recur (next ptr) (dec cnt) (conj ns (first ptr))))))","problem":41,"user":"5117c31ee4b0e0897831a60c"},{"problem":41,"code":"#(mapcat rest (partition-all %2 (into [0] %)))","user":"5bb23cf1e4b0a20761a2350a"},{"code":"#(let [to-match (dec %2)]\n   (keep-indexed (fn [index item] (if (not= to-match (rem index %2)) item)) %))","problem":41,"user":"51b38769e4b026427ecf067f"},{"code":"(fn [nn n] (loop [i nn e '() ii 1] (if (empty? i) (reverse e) (if (= ii n) (recur (next i) e 1) (recur (next i) (conj e (first i)) (inc ii))))))","problem":41,"user":"4fe97adde4b0547ebccb245e"},{"problem":41,"code":"(fn drop-every-n [coll n]\n  (keep-indexed #(if-not (= 0 (mod (inc %1) n)) %2 nil) coll))","user":"54898297e4b0e286459a11e7"},{"code":"(fn [col index] (reduce #(if (= (mod (.indexOf col %2) index) (dec index)) % (conj % %2)) [] col))","problem":41,"user":"5036eba7e4b0af0658af77a5"},{"code":"(fn [s n] (keep-indexed #(when (> (rem (inc %) n) 0) %2) s))","problem":41,"user":"4dc1bd76535d020aff1edf8d"},{"problem":41,"code":"(fn [xs n]\n  (loop [xs xs s [] m (dec n)]\n    (if\n     (empty? xs) s\n     (recur (rest xs) (if (= m 0) s (conj s (first xs))) (if (= m 0) (dec n) (dec m)))\n                    )))","user":"59203996e4b09b4ee5954c5b"},{"problem":41,"code":"(fn [coll p]\n  (loop [ acc [] c coll]\n    (if (empty? c)\n      (vec (apply concat acc))\n      (recur  (conj acc (take (dec p) c)) (drop p c)))))","user":"54e1197fe4b024c67c0cf7c0"},{"problem":41,"code":"(fn\n  [coll n]\n  (loop [c 1\n         v []] \n    (if (not= c (+ 1 (count coll)))\n      (if (= (mod c n) 0)\n        (recur (inc c) v)\n        (recur (inc c) (conj v (get coll (dec c)))))\n      v)))","user":"51c1b644e4b0d204dbe2ca12"},{"code":"(fn [coll n]\n  (flatten (partition-all (dec n) n coll)))","problem":41,"user":"4edffe54535d10e5ff6f5347"},{"code":"#(loop [lst %1 n %2 cur (dec n) acc ()] \n   (if (empty? lst) \n     (reverse acc) \n     (if (zero? cur) \n       (recur (rest lst) n (dec n) acc) \n       (recur (rest lst) n (dec cur) (conj acc (first lst))))))","problem":41,"user":"515828b8e4b0a069fd272c71"},{"code":"(fn [coll n] (remove nil? (map-indexed #(when (not= (rem (inc %1) n) 0) %2) coll)))","problem":41,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":41,"code":"(fn [xs n] (loop [res [] i 1] (if (= (dec i) (count xs)) res (recur (if (= 0 (rem i n)) res (conj res (nth xs (dec i)))) (inc i) )) ))","user":"6076adb2e4b069485764de60"},{"code":"#(mapcat identity  (partition-all (dec %2) %2 %1))","problem":41,"user":"5040edf4e4b0ff5d2cc40db5"},{"code":"#(->> (partition-all %2 %1) (map (partial take (dec %2))) flatten)","problem":41,"user":"4e3f480c535dc968683fc497"},{"code":"(fn nthss [s n]\n  (when (seq s)\n    (concat\n      (take (dec n) s)\n      (nthss (drop n s) n))))","problem":41,"user":"4e8e8c24535d65386fec2143"},{"code":"(fn drop-nth [xs n] \n   (when (seq xs)\n     (concat (take (dec n) xs) (drop-nth (drop n xs) n))))","problem":41,"user":"51e61772e4b0efabf93c02e2"},{"problem":41,"code":"(fn [col n]\n  (mapcat #(take (- n 1) %)\n          (partition-all n col)))","user":"4fbe2cfbe4b081705acca30c"},{"problem":41,"code":"(fn [l n]\n  (loop [a [] l l i 1]\n    (if (empty? l)\n      a\n      (recur (if (= (mod i n) 0) a (conj a (first l))) (rest l) (inc i)))))","user":"58844d43e4b0f1effa3b7696"},{"code":"(fn [v n] (keep-indexed #(when (pos? (mod (inc %) n)) %2) v))","problem":41,"user":"4dae0510c9a9d6ed4b99dc57"},{"code":"#(remove nil? (flatten (map (partial drop-last 1) \n(partition %2 %2 (repeat nil) %))))","problem":41,"user":"4ec7def0535d6d7199dd36e9"},{"problem":41,"code":"#(keep-indexed\n  (fn [idx item]\n    (if (zero? (mod (inc idx) %2))\n      nil\n      item))\n  %)","user":"4fe49706e4b0e8f79898feb7"},{"code":"(fn drop-every-nth [xs n]\n  (flatten (partition-all (dec n) n xs)))","problem":41,"user":"4fa17b00e4b0dcca54ed6d5f"},{"problem":41,"code":"#(map first\n      (filter (comp (partial not= (dec %2))\n                    second)\n              (map vector % (cycle (range %2)))))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":41,"code":"(fn drop-nth [col n]\n  (apply concat (partition-all (dec n) n col)))","user":"577f635be4b0d36ec5835e64"},{"problem":41,"code":"(fn [l n]\n  (map first (filter #(not= (second %) 0) (map list l (iterate #(mod (inc %) n) 1)))))","user":"573f63bfe4b05c31a32c0842"},{"problem":41,"code":"(fn\n  [coll n]\n  (->> coll\n       (map vector (iterate inc 1))\n       (remove #(zero? (mod (first %) n)))\n       (map second)))","user":"55aa8276e4b0988bba2ad94e"},{"problem":41,"code":"(fn dropnth [coll n]\n  (into [] (concat (take (dec n) coll) (if (empty? coll) [] (dropnth (drop n coll) n)))))","user":"539f3397e4b0ca733b974496"},{"code":"#(for [x (range (count %)) :when (pos? (mod (inc x) %2))] (nth % x))","problem":41,"user":"51131da8e4b0350614f07a83"},{"problem":41,"code":"(fn [coll n]\n  (map\n   (fn [tpl] (nth tpl 1))\n   (filter\n    (fn [tpl] (not= (mod (first tpl) n) 0))\n    (map vector (iterate inc 1) coll))))","user":"541475afe4b01498b1a719eb"},{"code":"(fn drop-nth [sq var]\n  (remove #(contains? (set (take-nth var (cons 0 sq))) %) sq))","problem":41,"user":"52271a85e4b04e78ff2e19a7"},{"code":"(fn [coll n] (apply concat (partition (dec n) n nil coll)))","problem":41,"user":"4fb2101ce4b081705acca284"},{"code":"(fn dropn [xs n]\n  (loop [xs xs n n acc []]\n    (if (empty? xs) acc\n      (recur (drop n xs) n (concat acc (take (- n 1) xs))))))","problem":41,"user":"53287dace4b09d4e7a9b5507"},{"code":"(fn [s n]\r\n    (loop [[x & xs :as xss] s, acc [], i n]\r\n      (if (empty? xss)\r\n        acc\r\n        (recur xs (if (= i 1) acc (conj acc x)) (if (= i 1) n (dec i))))))","problem":41,"user":"4ef1ee67535dced4c769f219"},{"code":"(fn [a b](\n            flatten \n            (partition-all (- b 1) b a)))","problem":41,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":41,"code":"(fn dropn [l n]\n  (loop \n    [[fr & r] l\n     x n\n     colls '[]\n    ]\n    (if (= fr nil)\n      colls\n      (if (= 1 x)\n        (recur r n colls)\n        (recur r (dec x) (conj colls fr))\n        )\n      )\n    )\n  )","user":"5ebb4751e4b00a66d4a95262"},{"problem":41,"code":"(fn [collection n] (keep-indexed #(if-not (zero? (mod (inc %1) n)) %2) collection))","user":"5a59a76fe4b05d388ecb6c98"},{"problem":41,"code":"(fn keep-in [coll index] (keep-indexed #(if(not= (mod (+ %1 1) index) 0) %2) coll))","user":"574ed2f7e4b02ea11479924a"},{"problem":41,"code":"#(remove nil? (map-indexed (fn [i x] (when-not (= (rem (+ i 1) %2) 0) x)) %1))","user":"5ef18431e4b07c55ae4a0529"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n    #(when (not (= 0 (mod (inc %1) n)))\n       %2)\n    coll))","user":"56f9982ce4b07572ad1a88b8"},{"code":"(fn [xs n]\n  (map first\n    (remove #(zero? (mod (second %) n))\n      (map list xs\n        (iterate inc 1)))))","problem":41,"user":"4ee67d74535d93acb0a66861"},{"code":"(fn [coll n]\n  (keep-indexed #(if (> (mod (inc %) n) 0) %2) coll))","problem":41,"user":"4f525fdce4b03ad3f0c10d37"},{"problem":41,"code":"(fn [a-seq n] (loop [acc []\n                     sq a-seq]\n                (if (empty? sq)\n                  acc\n                  (recur (concat acc (take (dec n) sq))\n                         (drop n sq)))))","user":"56b6a50ae4b0982f16b37e3c"},{"problem":41,"code":"(fn [s n] (apply concat (map #(take (- n 1) %) (partition n n [] s))))","user":"563536f8e4b0bfe05bf117c5"},{"code":"(fn [coll n] (keep-indexed #(if (not= 0 (mod (inc %) n)) %2) coll))","problem":41,"user":"4fcd155de4b065de69964ca3"},{"problem":41,"code":"(fn func\n  ([l n i]\n   (if (empty? l) '()\n     (if (= (mod i n) 0) (func (rest l) n (inc i))\n       (cons (first l) (func (rest l) n (inc i))))))\n   ([l n]\n    (func l n 1)))","user":"5b679bf9e4b0c6492753e769"},{"problem":41,"code":"(fn [coll idx]\n    (let [a (map-indexed vector coll)]\n      (map peek (filter (fn [x]\n                           (not (zero? (mod \n                                        (+ 1 (first x)) \n                                        idx)))) a))))","user":"591f5124e4b09b4ee5954c45"},{"problem":41,"code":"(fn [coll n]\n  (loop [a '()\n         c coll\n         x 1]\n    (println a c x)\n    (cond\n      (empty? c) a\n      (= x n) (recur a (rest c) 1)\n      :else (recur (concat a (list (first c))) (rest c) (inc x)))))","user":"5881335ce4b0f1effa3b762e"},{"code":"#(for [x (range (count %1)) :when (not= (rem (inc x) %2) 0)] (nth %1 x))","problem":41,"user":"50733b31e4b0e3170b5a869a"},{"code":"#(mapcat rest (partition-all %2 %2 (cons nil %1)))","problem":41,"user":"4f0a4e7e535d0136e6c222f4"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (loop [res [] rem coll]\n    (if (empty? rem)\n      res\n      (recur (concat res (take (dec n) rem)) (drop n rem)))))","user":"57625c18e4b0994c1922fba4"},{"problem":41,"code":"(fn drop [s n]\n  (if (< (count s) n)\n    s\n    (concat (take (- n 1) s) (drop (nthrest s n) n))))","user":"545801f6e4b01be26fd74615"},{"code":"#(reduce concat (map (fn [a] (take (- %2 1) a)) (partition-all %2 %1)))","problem":41,"user":"51aeb1f4e4b09397d5109794"},{"problem":41,"code":"(fn skip [the-list skip-item] \n  (loop [lst the-list result '()]\n    (if (< (count lst) skip-item)\n       (concat result lst)\n       (recur (nthnext lst skip-item) \n              (concat result (take (- skip-item 1) (take skip-item lst)))\n              )\n      )\n    )\n  )","user":"54e0bb4fe4b024c67c0cf7b8"},{"code":"(fn [coll n] \n  (map second (filter \n     (fn [[i e]] (not (= 0 (mod i n)))) \n     (map-indexed (fn [i e] [(inc i) e]) coll))))","problem":41,"user":"51cdd3f0e4b0e42293a2254b"},{"problem":41,"code":"(fn [coll x] (flatten (partition-all (dec x) x coll)))","user":"54eea988e4b024c67c0cf875"},{"problem":41,"code":"(fn my_drop-nth [l n] (if (< (count l) n) l (concat (take (dec n) l) (my_drop-nth (drop n l) n))))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn dropenth [s n] (flatten (list (take (dec n) s)\n                     (if (> (count s) n)  (dropenth (drop n s) n) (drop n s) ))))","problem":41,"user":"4e5e9f6b535d8a8b8723a2d2"},{"code":"(fn foo [l n] ((fn bar [l n c] (if (empty? l) (empty l)\n                               (if (= c 0) (bar (rest l) n (dec n))\n                                    (concat [(first l)] (bar (rest l) n (dec c))))))\n\nl n (dec n)))","problem":41,"user":"4f8b20fce4b02e764a0a5178"},{"code":"(fn [xs n] (apply concat (partition-all (dec n) n xs)))","problem":41,"user":"5102ef6be4b00c483ae176fc"},{"code":"(fn [c x] \n  (remove (#(set (take-nth %2 (drop (- %2 1) %))) c x) c))","problem":41,"user":"4f047542535dcb61093f6bc7"},{"problem":41,"code":"(fn foo1 [coll n]\n  (for [x coll\n        y (range (+ 1 (count coll)))\n        :when (= (get coll (- y 1) ) x)\n        :when (not= 0 (rem y n))]\n    x  ))","user":"598d0dc3e4b02b9968b84d18"},{"code":"(fn [collection num] (mapcat (partial take (dec num)) (partition-all num collection)))","problem":41,"user":"50afdf00e4b0c3f5ed5c29a5"},{"problem":41,"code":"(fn a [lst x]\n  (loop [b lst res () d 1]\n    (if (empty? b) (remove nil? (reverse res))\n      (recur (rest b) (cons (if (= d x) nil (first b)) res) (if (= d x) 1 (inc d))))))","user":"56fc1bc7e4b07572ad1a88dd"},{"problem":41,"code":"(fn foo [s n]\n  (map first (remove (fn [[e k]] (= 0 (mod k n)))\n                     (map vector s (rest (range)))\n                     )))","user":"53dadf1de4b0e771c30254ad"},{"code":"(fn f [x y] (\n  if(empty? (drop y x))\n\t(concat (take (- y 1) x))\n\t(concat  (take (- y 1) x) (f (drop y x) y))\n  ))","problem":41,"user":"4f4bd422e4b03ad3f0c10c7e"},{"code":"(fn [a s]\r\n  (apply concat (partition-all (dec s) s a)))","problem":41,"user":"5376966ae4b06839e8705e27"},{"problem":41,"code":"(fn [x y]\n  (loop [resp []\n         index 1\n         src x]\n    (cond (empty? src) resp\n          (= index y) (recur resp 1 (rest src))\n          :else (recur (concat resp (list (first src))) (inc index) (rest src)))))","user":"582589b2e4b051871117bedd"},{"code":"(fn foo [y lst x] \n  (if (empty? lst) \n    nil \n    ( if (= x y) \n      (foo 1 (rest lst) x) \n      (cons (first lst) (foo (+ y 1) (rest lst) x)))\n      )\n) 1","problem":41,"user":"51eec1a6e4b0871fa145d98d"},{"problem":41,"code":"(fn item-dropper\n  ([coll n] (item-dropper coll n [] 1))\n  ([coll n newColl x] \n   (if (empty? coll)\n     newColl\n     (item-dropper (rest coll) n (if (= (rem x n) 0) newColl (conj newColl (first coll))) (inc x))\n     )\n   )\n  )","user":"5564709ee4b0c656e3ff1807"},{"problem":41,"code":";; partition\n;; droplast\n;; concat\n\n#(mapcat (partial take (dec %2)) (->> %1 (partition-all %2)))","user":"59d631d4e4b0ef0a1e9b5c09"},{"problem":41,"code":"#(for [x % :when (not= (mod (+ (.indexOf % x) 1) %2) 0)] x)","user":"5464a536e4b01be26fd746cf"},{"problem":41,"code":"(fn [coll n]\n  (loop [acc []\n          tail coll\n          index 1]\n    (if (empty? tail)\n         acc\n         (if (= (mod index n) 0)\n              (recur acc (rest tail) (inc index))\n              (recur (conj acc (first tail)) (rest tail) (inc index))))))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":41,"code":"(fn [coll n] \n   (mapcat  \n    #(take (dec n) %)\n    (partition-all n coll)))","user":"567476bde4b05957ce8c6139"},{"code":"(fn [l n]\n  (map (fn [[i x]] x)\n       (filter (fn [[i x]]\n                 (not= (mod i n)\n                       (dec n)))\n               (map-indexed (fn [i x] [i x])\n                            l))))","problem":41,"user":"521b73f5e4b0c4ef0be83043"},{"problem":41,"code":"(fn [coll th]\n  ((fn f [coll lth]\n    (cond \n      (empty? coll) []\n      (= 1 lth)     (f (rest coll) th)\n      :else         (concat [(first coll)] (f (rest coll) (dec lth))) \n    )\n  )\n  coll \n  th\n  )\n)","user":"5ab1665de4b073f1774425c0"},{"problem":41,"code":"#(loop [in %1 out [] n 1] (if (empty? in) out (recur (rest in) (if (= 0 (rem n %2)) out (conj out (first in))) (inc n))))","user":"571aad45e4b07c98581c3b59"},{"problem":41,"code":"#((comp flatten partition) (dec %2) %2 [] %1)","user":"561d23e3e4b064ca9f4b16a5"},{"problem":41,"code":"(fn[s n](remove nil? (map-indexed (fn[idx itm](if(not= (mod (inc idx) n) 0)itm)) s)))","user":"56039843e4b04bb52996e1be"},{"problem":41,"code":"(fn [coll n] (flatten (partition (dec n) n () coll)))","user":"56b80ad1e4b0f26550335921"},{"code":"(fn drop-nth [coll n] (filter (fn [elem] (not= (mod (+ 1 (.indexOf coll elem)) n) 0)) coll))","problem":41,"user":"51181009e4b0e0897831a60f"},{"problem":41,"code":"(fn [l n] (keep-indexed #(when (not= (mod (inc %1) n) 0) %2) l))","user":"5801eed1e4b0a837a8b30c63"},{"problem":41,"code":"#(mapcat (fn [lst]\n           (take (- %2 1) lst))\n         (partition-all %2 %1))","user":"5a9cdec0e4b0d174b936c7e1"},{"problem":41,"code":"(fn [L n]\n   (flatten (map #(take (- n 1) %) (partition-all n L))))","user":"5a409d77e4b0447ef91cc5d3"},{"problem":41,"code":"(fn [coll nth] \n  (let [remIdx (dec nth)] \n    (keep-indexed #(if (= remIdx (rem %1 nth)) nil %2) coll)))","user":"59a72effe4b066c664927d94"},{"code":"#(filter identity (map (fn [x y] (if (= (inc y) %2) nil x)) %1 (cycle (range %2))))","problem":41,"user":"51095588e4b0e34872b3efa5"},{"problem":41,"code":"(fn [s nth]\n  (flatten (partition-all (- nth 1) nth s)))","user":"56c1e720e4b0839206b9d68b"},{"problem":41,"code":"(fn [xs ys]\n   (loop [x xs\n          y ys\n          s []]\n     (if (empty? x)\n       s\n       (recur (drop y x) y (concat s (take (dec y) x))))))","user":"5c387c51e4b0d62ef62d9f83"},{"code":"(fn [coll n]\n  (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2 nil) coll))","problem":41,"user":"4e6dc5f5535d5021c1a895f0"},{"code":"#(mapcat ( partial take (- %2 1)) (  partition-all %2 %1))","problem":41,"user":"518c5236e4b087e178201de0"},{"code":"(fn drop-every-nth [coll n]\n  (if (>= (count coll) n)\n    (concat (take (- n 1) coll)\n            (drop-every-nth (drop n coll) n))\n    coll))","problem":41,"user":"521bf7cfe4b0c4ef0be83066"},{"problem":41,"code":"#(flatten \n  (map (fn [coll] \n         (if (= (count coll) %2) \n           (butlast coll) \n           coll)) \n       (partition-all %2 %1)))","user":"55344b75e4b09218d5f44f99"},{"code":"#(loop [a () s %]\n     (if (empty? s) a\n         (recur (concat a (take (dec %2) s))\n                (drop %2 s))))","problem":41,"user":"4eda8d7c535d10e5ff6f530f"},{"code":"#(for [z (range 1 (inc (count %1)))\n              :when (not= (rem z %2) 0)]\n           (%1 (dec z)))","problem":41,"user":"52d340ebe4b099d49816f0c1"},{"code":"(fn [coll n]\n  (->> coll (partition-all n) (map #(take (dec n) %)) (apply concat)))","problem":41,"user":"521ed5b4e4b0e6c71e0c0bc0"},{"problem":41,"code":"#(mapcat(fn[x](if(==(count x) %2)(drop-last x) x))(partition-all %2 %1))","user":"5515b68de4b055c2f668d4ef"},{"problem":41,"code":"(fn [col x]\n  (->>\n   col\n   (partition-all x)\n   (mapcat #(take (dec x) %))\n   (into (empty col))))","user":"56012cd7e4b04bb52996e17d"},{"problem":41,"code":"(fn [s n]\n  (filter (complement nil?) (map-indexed (fn [i v] (if-not (= 0 (mod (inc i) n)) v)) s)))","user":"56084e91e4b046a4fc0ac00f"},{"code":"(fn [xs n] (filter identity (map-indexed #(if (not= 0 (mod (inc %1) n)) %2) xs)))","problem":41,"user":"50981062e4b04e098a4c7268"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (zero? (rem (+ 1 %1) n)) nil %2) coll))","user":"55933c7ae4b0c79f6e1db938"},{"problem":41,"code":"(fn [s n] (apply concat (map #(take (dec n) %) (partition-all n s))))","user":"5b14475be4b0cc2b61a3be5a"},{"problem":41,"code":"(fn [coll step] (into [] (keep-indexed #(if (not= (mod (inc %1) step) 0) %2) coll)))","user":"588f500ae4b00487982d51a4"},{"code":"(fn dni [s n]\n  (flatten (concat (map (partial take (dec n)) (partition-all n s)))))","problem":41,"user":"4f611127e4b0defedf855fb4"},{"code":"(fn [coll n]\n  (loop [i 1 acc [] remain coll]\n    (if (empty? remain)\n      acc\n      (recur\n        (inc i)\n        (if (zero? (rem i n))\n          acc\n          (conj acc (first remain)))\n        (rest remain)))))","problem":41,"user":"50e3cf55e4b01912b3285c45"},{"code":"(fn [xs n]\n  (for [[i v] (map-indexed #(list (inc %1) %2) xs)\n    :when (not ( = 0 (mod i n)))]\n    v))","problem":41,"user":"50e47fa5e4b0cb9ec68fbc9c"},{"problem":41,"code":"(fn [in n] (mapcat identity (partition-all (dec n) n in)))","user":"5fd66e61e4b05ac5b16ea10a"},{"code":"(fn [s n]\r\n  (loop [new-s [] orig s]\r\n    (if (empty? orig)\r\n      new-s\r\n      (recur (concat new-s (take (dec n) orig))\r\n             (drop n orig)))))","problem":41,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":41,"code":"(fn [c n] (keep-indexed (fn [i e] (if (not= 0 (mod (inc i) n)) e)) c))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"problem":41,"code":"(fn\n  [s n]\n  (let [j (dec n)\n        dropn-aux (fn \n                    [ms idx res curseq]\n                    (if (empty? ms)\n                      curseq\n                      (let [news (rest ms)\n                            newelem [ (first ms) ]\n                            m (dec idx)]                        \n\t                      (if (= idx 0)\n\t                        (recur news res res curseq)                        \n\t                        (recur news m res (concat curseq newelem))))))]\n    (dropn-aux s j j '())))","user":"56019662e4b04bb52996e190"},{"problem":41,"code":"(fn [coll x]   \n    (reduce\n     (fn [acc it]       \n       (if (= x (count it))\n         (vec (flatten (conj acc (drop-last it))))\n         (vec (flatten (conj acc it)))))\n     []\n     (partition-all x coll)))","user":"53b05a75e4b047364c044482"},{"problem":41,"code":"(fn [coll n]\n  (loop [coll coll\n         c n\n         result []]\n    (if-let [s (seq coll)]\n      (if (= c 1)\n        (recur (rest s) n result)\n        (recur (rest s) (- c 1) (conj result (first s))))\n      result)))","user":"4e6ffaa3535d5021c1a8962e"},{"code":"(fn [v n] (keep-indexed #(if (zero? (mod (inc %1) n)) nil %2) v))","problem":41,"user":"4e72dd5d535d5021c1a89667"},{"problem":41,"code":"(fn [col n]\n  (flatten (partition-all (dec n) n col)))","user":"5a624129e4b0512ff01cd987"},{"problem":41,"code":"(fn [col,cnt] (keep-indexed #(if (< (mod %1 cnt) (dec cnt)) %2) col))","user":"58951903e4b00487982d5274"},{"code":"(fn [x y]\n  (mapcat\n    #(if (= y (count %)) (drop-last %) %)\n       (partition-all y x)))","problem":41,"user":"521dceeae4b050d5da042802"},{"code":"(fn \n  [seq n]\n    (loop [seq seq i n acc '()]\n      (cond\n        (empty? seq) (reverse acc)\n        (= 1 i) (recur (rest seq) n acc)\n        :else (recur (rest seq) (dec i) (cons (first seq) acc)))))","problem":41,"user":"4fd16778e4b04c3a95aa040f"},{"problem":41,"code":"(fn [coll n]\n  (loop [acc []\n         coll coll\n         counter 1]\n    (cond\n      (empty? coll) acc\n      (= counter n) (recur acc (rest coll) 1)\n      :else (recur (conj acc (first coll)) (rest coll) (inc counter)))))","user":"51ca5378e4b08b1cbd0d9480"},{"code":"(fn [coll n] (remove nil? (map-indexed #(when (not (= 0 (mod (inc %) n))) %2) coll)))","problem":41,"user":"5137fb22e4b0a5db03d727d3"},{"problem":41,"code":"(fn [coll nth] (reduce-kv \n                 #(if (zero? (mod (inc %2) nth))\n                    %1\n                    (conj (vec %1) %3))\n                 []\n                 coll))","user":"5e7fb908e4b085ba37836e3f"},{"problem":41,"code":"(fn [coll n]\n    (flatten (map #(rest %) (filter #(not (zero? (mod (first %) n))) (map-indexed (fn [idx itm] [(inc idx) itm]) coll)))))","user":"54856d54e4b0e286459a11aa"},{"code":"(fn [s, n] (map second\n                (filter (comp not zero? first)\n                        (map list\n                             (iterate #(mod (inc %) n) 1)\n                             s))))","problem":41,"user":"51364acfe4b04ac1f358dd51"},{"problem":41,"code":"(fn [s n]\n  (loop [src s\n         index 1\n         result []]\n    (if (seq src) \n      (recur (rest src) (inc index) (if (= 0 (rem index n)) result (conj result (first src)))) \n      result)))","user":"53c649d3e4b00fb29b221297"},{"code":"#(loop [a [] s %1] (if\n  (seq s)\n  (recur (concat a (take (dec %2) s)) (drop %2 s))\n  a))","problem":41,"user":"4ff889f2e4b0678c553fc399"},{"problem":41,"code":"(fn [a b] (concat (mapcat #(butlast %) (partition b a))\n                  (take-last (rem (count a) b) a)))","user":"52c45ac8e4b0c2d177d620d9"},{"code":"(fn [coll n]\n      (let [res '()]\n        (flatten (filter identity\n          (for [i (range (count coll))]\n            (if (not= 0 (mod (+ 1 i) n))\n              (conj res (get coll i))))))))","problem":41,"user":"506755b3e4b03d366d7cb2bc"},{"problem":41,"code":"(fn [coll n]\n  (loop [acc [] col coll i 1]\n    (if (empty? col) acc\n      (recur\n        (if (= 0 (mod i n)) acc (conj acc (first col)))\n        (rest col)\n        (inc i)))))","user":"52d38c51e4b099d49816f0c5"},{"problem":41,"code":"(fn remat [col c] (loop [ncol [] n c x 1 rem col]\n  (if (empty? rem) ncol (recur \n   (if (= n x) ncol (conj ncol (first rem)) )\n   (if (= n x) (+ c n) n) \n   (inc x)\n   (rest rem)))))","user":"55c9bc1ee4b0e31453f649f1"},{"code":"(fn\n  [sq n]\n  (loop [prc sq\n         out []]\n    (if (empty? prc)\n      (into [] (flatten out))\n      (recur (drop n prc) (conj (take (dec n) prc) out)))))","problem":41,"user":"51f13b80e4b06a20a2523f38"},{"problem":41,"code":"(fn [seq nth] (keep-indexed #(if-not (= 0 (mod (inc %1) nth)) %2) seq))","user":"5cf9623de4b0b71b1d808a95"},{"code":"(fn [coll n]\n  (let [ns (cycle (range 1 (inc n)))\n        indexed (map vector ns coll)]\n    (map second (remove #(= (first %) n) indexed))))","problem":41,"user":"4f4fbed7e4b03ad3f0c10ce8"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) s))","user":"539ddf25e4b0b51d73faaf3e"},{"code":"(fn mu [a b] (keep-indexed #(when-not(= 0 (mod (+ %1 1) b) )%2) a))","problem":41,"user":"5097c837e4b00ad8bab4e973"},{"problem":41,"code":"#(keep-indexed (fn [i x] (when (not= (dec %2) (mod i %2)) x)) %1)","user":"56aad332e4b03c432f187337"},{"problem":41,"code":"(fn [s n]\n  (let [enumerated (map #(list %1 %2) s (rest (range)))]\n    (keep #(if (not= (mod (second %) n) 0) (first %)) enumerated)))","user":"5d6f0533e4b04d129b00f2d0"},{"problem":41,"code":"(fn [c n]\n (loop [i 1 ls c results []]\n  (cond\n   (empty? ls) results\n   (= 0 (mod i n)) (recur (inc i) (rest ls) results)\n   :else (recur (inc i) (rest ls) (conj results (first ls)))\n)))","user":"57213df6e4b0c5bde472c0ab"},{"problem":41,"code":"(fn [col skip] \n  (loop [idx 0\n         itm (first col)\n         result []]\n      (if (nil? itm)\n        result\n        (if (= 0 (mod (inc idx) skip))\n          (recur (inc idx) (get col (inc idx)) result)\n          (recur (inc idx) (get col (inc idx)) (conj result itm))))))","user":"5146fd44e4b0d12420447958"},{"code":"(fn omit-every-nth [xs position]\n    (map #(nth xs (- % 1))\n         (filter #(or (not (= 0 (mod % position)))\n                      (= 0 %)) (range 1 (+ 1 (count xs))))))","problem":41,"user":"4f81fcbfe4b033992c121c03"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(take (dec n) %) (partition n n nil coll)))","user":"5267c74be4b03e8d9a4a7183"},{"code":"(fn [coll skip-nth]\n\t(map first\n         (filter #(< 0 (mod (last %) skip-nth))\n                 (map #(vector %1 (+ 1 %2)) coll (range)))))","problem":41,"user":"5138ccc7e4b0a5db03d727d9"},{"problem":41,"code":"#(flatten (partition-all (-%2 1) %2 %1))","user":"53acca34e4b047364c044460"},{"problem":41,"code":"(fn [seq n]\n   (loop [pos 0 ret []]\n     (if (> pos (count seq)) ret\n       (if (= (mod pos n) 0)\n         (recur (+ pos 1) ret)\n         (recur (+ pos 1) (conj ret (nth seq (- pos 1))))\n       ))))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"(fn f [coll n]\n  (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n coll)))","problem":41,"user":"5012da69e4b0c8732600222d"},{"code":"(fn\n  [coll n]\n    (keep-indexed\n      #(when\n        (not=\n          (mod (inc %1) n) 0) %2) coll))","problem":41,"user":"500e91aae4b00fff93030f99"},{"code":"(fn [s i]\n      (loop [s s, r [], j 1]\n        (if (seq s)\n          (recur (rest s)\n                 (if (= 0 (mod j i))\n                   r\n                   (conj r (first s)))\n                 (inc j))\n      r)))","problem":41,"user":"4f301d02e4b0d6649770a072"},{"code":"(fn [coll n]\n   (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n coll))))","problem":41,"user":"51ea4e35e4b0f1f103a0d148"},{"code":"#(for [[x i] (map list %1 (range)) :when (not= (mod (inc i) %2) 0)] x)","problem":41,"user":"4fe8a1f8e4b07c9f6fd12c5f"},{"problem":41,"code":"(fn [x n] (concat (->> x (partition n) (map #(take (dec n) %)) (reduce concat))(take-last (mod (count x) n) x)))","user":"569c1038e4b0542e1f8d145f"},{"problem":41,"code":"(fn [seq drop-elem-nth]\n  (loop [rest-seq seq out-vec [] nth-elem 1]\n    (if (empty? rest-seq)\n      out-vec\n      (recur (rest rest-seq)\n             (if (zero? (mod nth-elem drop-elem-nth))\n               out-vec\n               (conj out-vec (first rest-seq)))\n             (inc nth-elem)))))","user":"5f15a50fe4b091ba50b4dbbc"},{"problem":41,"code":"(fn [c s]\n  (flatten (partition-all (dec s) s c)))","user":"55bf6dbce4b01b9910ae2a12"},{"problem":41,"code":"(fn [items pos]\n  (loop [items items current 1 result []]\n    (if (empty? items)\n      result\n      (recur (rest items) (inc current) \n             (if (= (mod current pos) 0)\n               result\n               (conj result (first items)))))))","user":"57d9bca1e4b0bd073c202405"},{"problem":41,"code":"#(keep-indexed (fn [index value] (if (< 0 (mod (inc index) %2)) value)) %1)","user":"58a1d00ae4b02bd94d917ec6"},{"code":"(fn [s n]\n    (loop [r [] i 1 s s]\n      (cond\n        (empty? s) r\n        (= i n) (recur r 1 (rest s))\n        :else (recur\n                (conj\n                  r\n                  (first s))\n                (+ i 1)\n                (rest s)))))","problem":41,"user":"50657775e4b0deb876850599"},{"problem":41,"code":"(fn [col n] \n  (keep-indexed \n   \t(fn [idx item] \n      (if-not \n        (zero? (mod (inc idx) n))\n        item\n      )\n    )\n    col\n  )                              \n)","user":"53d5e45ae4b0e771c302544e"},{"problem":41,"code":"(fn [sq n]\n  (loop [sq sq acc []]\n    (if (empty? sq)\n      acc\n      (recur (drop n sq) (concat acc (take (- n 1) sq))))))","user":"5a512929e4b05d388ecb6be2"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (keep-indexed (fn [index item]\n                  (when\n                    (not (zero? (mod (inc index) n)))\n                    item))\n                coll))","user":"55916d7be4b0604b3f94d57d"},{"code":"(fn [seq drop-at]\n  (reduce #(concat %1 (take (dec drop-at) %2))\n          nil\n          (partition-all drop-at seq)))","problem":41,"user":"51df825de4b01188f062752b"},{"code":"(fn [lst n] (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n lst)))","problem":41,"user":"4f0c84ce535d0136e6c2230e"},{"code":"(fn my-drop-nth [coll n]\n    (let [t (dec n)]\n      (loop [coll coll\n             res []]\n        (if (empty? coll)\n          res\n          (recur (drop n coll) (apply conj res (take t coll)))))))","problem":41,"user":"50c113bee4b096f585049c37"},{"code":"(fn drop-items [coll x]\n  (loop [coll coll\n         x x\n         res []\n         c 1]\n    (if (empty? coll)\n      res\n      (recur (rest coll)\n             x\n             (if (= c x)\n               res\n               (conj res (first coll)))\n             (if (= c x)\n               1\n               (inc c))))))","problem":41,"user":"4e3bccb1535deb9a81d77f55"},{"problem":41,"code":"(fn drop-nth\n  [s n]\n  (remove #(= (rem (inc (.indexOf s %)) n) 0) s)\n)","user":"55acd080e4b03311e7b73298"},{"code":"(fn [s d]\n  (flatten (map #(if (= d (count %)) (drop-last %) %) (partition d d [] s))))","problem":41,"user":"50843a4ae4b0c98812d0788b"},{"code":"(fn [s n] \r\n  (map #(nth s %) \r\n        (remove #(= 0 (rem (inc %) n)) \r\n        (take (count s) (iterate inc 0)))))","problem":41,"user":"4e0e0529535d04ed9115e7b9"},{"problem":41,"code":"(fn [coll n]\n             (for [i (range (count coll))\n                   :let [index (inc i)]\n                   :when (not= 0 (rem index n))]\n               (nth coll i)))","user":"54c3747de4b045293a27f60e"},{"code":"(fn [coll n]\n  (map first \n    (remove #(= (second %) n)\n      (map list\n           coll\n           (cycle (range 1 (inc n)))))))","problem":41,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"(fn rec [ls n]\r\n  (loop [an [] ls ls i 1]\r\n    (if (empty? ls) an\r\n      (if (zero? (rem i n))\r\n          (recur an (rest ls) (inc i))\r\n          (recur (conj an (first ls))\r\n                  (rest ls) (inc i))))))","problem":41,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn [c n] (keep-indexed \n  #(if (> (rem (inc %) n) 0) %2) \n  c))","problem":41,"user":"50336c6be4b0c6c1199c710f"},{"code":"#(mapcat rest (partition-all %2 (cons 'padding %1)))","problem":41,"user":"4ef4c1ff535dced4c769f23e"},{"code":"(fn dropthese [coll de]\n  (flatten (map (fn [x] (if (= (count x) de)\n           (drop-last 1 x)\n           x))\n   (partition-all de coll))))","problem":41,"user":"4f2f7e87e4b0d6649770a06f"},{"problem":41,"code":"#(loop [r [] c %1] (if (< (count c) %2) (flatten (conj r c)) (recur (conj r (take (dec %2) c)) (drop %2 c))))","user":"58987ee9e4b00487982d52d2"},{"problem":41,"code":"(fn [sq n] (keep-indexed #(if (not (= 0 (mod (+ 1 %1) n))) %2) sq))","user":"5c7ef3f3e4b0d597f478cad7"},{"problem":41,"code":"(fn [seq n]\n  (loop [acc [] rest seq count n]\n  (if (empty? rest)\n    acc\n    (if (= count 1)\n      (recur acc (drop 1 rest) n)\n      (recur (conj acc (first rest)) (drop 1 rest) (- count 1))))))","user":"57c3df67e4b05aa3c4741cc5"},{"problem":41,"code":"(fn [coll n]\n  (seq (map #(second %) \n          (remove \n           #(zero? (mod (first %) n))\n             (map-indexed \n              (fn [i item] \n               [(inc i) item]) \n              coll)))))","user":"555d4421e4b0a2eb076a39a8"},{"problem":41,"code":"#(let [x (partition-all %2 %1)]\n    (mapcat (fn [y]\n              (if (= (count y) %2)\n                (pop (vec y))\n                y)) x))","user":"570362ece4b08d47c97781f0"},{"code":"(fn [coll idx]\n  (->> coll\n       (map-indexed vector)\n       (filter\n           #(not= (- idx 1) (rem (first %) idx)))\n       (map second)\n   ))","problem":41,"user":"4fedd993e4b0198f34b063bc"},{"code":"(fn [xs n] (mapcat identity (partition-all (dec n) n xs)))","problem":41,"user":"528a2de7e4b0239c8a67ae71"},{"problem":41,"code":"#(loop [lst %1 n %2 acc '()]\n   (if (< (count lst) n)\n     (concat acc lst)\n     (recur (drop n lst)\n            n\n            (concat acc (drop-last (take n lst))))))","user":"539fa040e4b0ca733b97449f"},{"code":"(fn [niz n]\n  (let [indices (range 1 (inc (count niz)))\n        marked (filter #(= (mod % n) 0) indices)\n        mapping (zipmap indices niz)]\n    (map second (sort (vec (apply (partial dissoc mapping) marked))))))","problem":41,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"#(flatten (partition (dec %2) %2 () %1))","problem":41,"user":"5128554ee4b03a34742b430a"},{"problem":41,"code":"(fn [coll n]\n  (loop [in coll result []]\n    (if (empty? in)\n      result\n      (let [it (split-at n in)\n            maybe (first it)\n            more (second it)]\n        (recur more (concat result (if (= n (count maybe)) (butlast maybe) maybe)))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"(fn [coll n] (\n filter #(not= \n   (mod (inc (.indexOf coll %1) ) n) 0) coll))","problem":41,"user":"50e4f4e9e4b049a987753896"},{"code":"(fn\n  [coll n]\n  (keep-indexed #(if (not (zero? (rem (+ % 1) n))) %2) coll))\n\n; (apply concat (partition-all 2 3 [1 2 3 4 5 6 7 8]))","problem":41,"user":"5153316ce4b0252ac4b16611"},{"code":"#(flatten (partition (- %2 1) %2 () %))","problem":41,"user":"4db53810535d87e67b28fe07"},{"problem":41,"code":"(fn [coll n] (loop [l coll res []] (if (empty? l) res (recur (drop n l) (concat res (take (dec n) l))))))","user":"5e04ce34e4b0a607a9a45d71"},{"problem":41,"code":"(fn [s n] (remove nil? (map #(if (not= (rem %2 n) 0) %1 nil) s (range 1 (inc (count s))))))","user":"58983e3fe4b00487982d52ce"},{"problem":41,"code":"(fn [lst n]\n  (apply vector (keep-indexed #(if-not (= 0 (rem (inc %1) n)) %2) lst)))","user":"5a022949e4b01bb0ae8afd60"},{"problem":41,"code":"(fn dropNth [col n]\n    (reduce (fn [part item]\n            (flatten (cons part (take (- n 1) item))))\n            ()\n            (partition-all n col))\n)","user":"5e42ba49e4b01d43a70e8e6c"},{"code":"(fn devnth2 [xs x]\n  (remove nil? (map #(cond % %2) (flatten(repeat(concat (take (dec x) (repeat true)) [false]))) xs )))","problem":41,"user":"52c42bc2e4b0c2d177d620d0"},{"problem":41,"code":"(fn __ [coll n]\n  (filter #(not (nil? %)) (map #(if (zero? (mod %2 n)) nil %1)\n                               coll\n                               (drop 1 (range)))))","user":"55e206f3e4b050e68259b429"},{"problem":41,"code":"(fn [coll n]\n  (loop [fst (first coll)\n         rst (rest coll)\n         i 1\n         result []]\n    (if fst\n      (if \n        (pos? (mod i n)) \n        (recur (first rst) (rest rst) (inc i) (conj result fst))\n        (recur (first rst) (rest rst) (inc i) result))\n      result)))","user":"53b1db8ee4b047364c044495"},{"problem":41,"code":"(fn [lst n]\n  (->>\n   lst\n   (iterate #(drop n %))\n   (map #(take (dec n) %))\n   (take-while seq)\n   (apply concat)))","user":"545281bce4b0e397800069c3"},{"problem":41,"code":"(fn dropNth\n  [seqn n]\n  (->>\n    (map-indexed vector (cons '0 seqn))\n    (remove #(= 0 (mod (first %) n)))\n    (mapcat #(rest %))))","user":"57f81534e4b0d3187e900915"},{"problem":41,"code":"(fn [x y] (keep-indexed #(if (not= 0 (rem (inc %) y)) %2) x))","user":"53d0c3c9e4b00fb29b22130a"},{"code":"#(vec (for [e (reverse (zipmap (range) %1)) \n  \t:let [n (inc (first e))] \n\t\t:when (> (mod n %2) 0)] (last e)))","problem":41,"user":"4e8ad1d2535d65386fec2110"},{"code":"#((fn ! [xs]\n   (if (< (count xs) %2)\n     xs\n     (let [[a b] (split-at %2 xs)]\n       (concat (butlast a) (! b))))) %1)","problem":41,"user":"51780bfce4b0f89a8f53839c"},{"problem":41,"code":"(fn[coll pos] (flatten (map (fn[x] (if (= (count x) pos) (butlast x) x)) (partition-all pos coll))))","user":"5a63f8bae4b0512ff01cd99f"},{"problem":41,"code":"(fn drop-nth\n  [ls n]\n  (flatten (map #(drop-last %) (partition n n [nil] ls) )))","user":"5d48884ee4b07c84aa5ae6bb"},{"problem":41,"code":"(fn [s d]\n    (mapcat #(if (= (count %) d)\n               (drop-last %)\n               %) (partition d d nil s)))","user":"586b6753e4b01531a375e956"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [idx x] (when (not= (mod (inc idx) n) 0) x)) coll))","user":"589ec900e4b02bd94d917e65"},{"code":"(fn zap \n  ([s i] (zap s i '()))\n  ([s i t]\n    (if (empty? s)\n        t\n        (zap (drop i s) i (concat t (take (- i 1) s)))\n      )\n  )\n)","problem":41,"user":"4f8ea1f7e4b0d4e659cdde69"},{"problem":41,"code":"(fn [xs n]\n  (loop [idx 0\n         final []]\n    (cond\n      (= (count xs) idx) final\n      (zero? (mod (inc idx) n)) (recur (inc idx) final)\n      :else (recur (inc idx) (conj final (nth xs idx)))\n      )))","user":"5d84545ee4b0915913b1d38b"},{"problem":41,"code":"(fn [coll n]\n   (remove nil? (map-indexed #(if (= (mod (inc %1) n) 0) nil %2) coll)))","user":"5d9e8e40e4b000c986472bc2"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (if (seq coll)\n  (concat (take (dec n) coll) (drop-nth (drop n coll) n))))","user":"5515c8b1e4b055c2f668d4f2"},{"code":"#((fn func [s n cnt]\n  (if (empty? s)\n    s\n    (if (= n cnt)\n      (func (rest s) n 1)\n      (cons (first s) (func (rest s) n (inc cnt)))))) %1 %2 1)","problem":41,"user":"4ee82223535d93acb0a66877"},{"problem":41,"code":"(fn [s n] (for [ [i m] (map-indexed vector s) :when (not (= 0 (mod (inc i) n)))]  m ))","user":"52ccc2bde4b07d0d72b27371"},{"problem":41,"code":"(fn dropNth\n  [myseq n]\n  (keep-indexed #(if (not (zero? (mod (inc %1) n))) %2 ) myseq)\n)","user":"53fe459ae4b0de5c418485f4"},{"code":"#(letfn [(dropnth [xs n a]\r\n    (if (empty? xs)\r\n\t\t[]\r\n\t\t(if (= a n)\r\n\t\t    (recur (rest xs) n 1)\r\n\t\t    (cons (first xs) (dropnth (rest xs) n (inc a))))))]\r\n  (dropnth %1 %2 1))","problem":41,"user":"4e273301535deb9a81d77ef7"},{"problem":41,"code":"(fn [coll n]\n  {:pre [(pos? n)]}\n  (first\n   (reduce (fn [[acc c] x]\n             (if (zero? c)\n               [acc          (dec n)]\n               [(conj acc x) (dec c)]))\n           [[] (dec n)]\n           coll)))","user":"54d9f7f1e4b024c67c0cf751"},{"code":"(fn [xs n]\n  (for [m (range 1 (inc (count xs))) :when (pos? (mod m n))]\n    (nth xs (dec m))))","problem":41,"user":"52cb6bb0e4b07d0d72b2734c"},{"code":"(fn [c n] (mapcat identity (partition-all (dec n) n c)))","problem":41,"user":"5201572be4b0d7096e99ddbb"},{"code":"(fn remove-at\n  ([coll item-count] (remove-at coll item-count 1))\n  ([coll item-count current]\n  (if (not (empty? coll))\n    (if (= (mod current item-count) 0)\n      (remove-at (rest coll) item-count (+ 1 current))\n      (cons (first coll) (remove-at (rest coll) item-count (+ 1 current)))\n    )\n  ))\n)","problem":41,"user":"52c0f884e4b07a9af579235b"},{"problem":41,"code":"#(keep-indexed (fn [i e] (when-not (zero? (mod (inc i) %2)) e)) %)","user":"59c8c9bee4b0a024fb6ae567"},{"code":"#(loop [[h & t] (seq %1), c %2, i 1, res []] \n  (if \n    h \n    (if \n      (= 0 (rem i c))\n      (recur t c (inc i) res)\n      (recur t c (inc i) (conj res h)))\n    res\n  ))","problem":41,"user":"4eabb245535d7eef30807319"},{"code":"(fn drop-every-n [seq n]\n  (let [[before after] (split-at n seq)]\n    (concat\n      (take (- n 1) before)\n      (if (empty? after)\n        []\n        (drop-every-n after n)))))","problem":41,"user":"4f03d4dc535dcb61093f6b6e"},{"code":"(fn [vec n]\n  (mapcat #(take (dec n) %) (partition-all n vec))\n  )","problem":41,"user":"514e4ae4e4b019235f6c0594"},{"code":"(fn [v n] (keep-indexed #(when (> (mod (inc %) n) 0) %2) v))","problem":41,"user":"4ed19f00535d44c135fd68d1"},{"problem":41,"code":"(fn [coll n]\n   (apply concat\n           (partition-all (dec n) n coll)))","user":"5a488c09e4b05d388ecb6b68"},{"code":"(fn [coll n] (remove nil? (map-indexed #(if (= (mod % n) (- n 1)) nil %2) coll)))","problem":41,"user":"4e80e0f2535db62dc21a62b8"},{"problem":41,"code":";; (fn [s,n] (mapcat drop-last (partition-all n s )))\n;; wrong, drops last item\n\n;;(fn [seq n] (keep-indexed (fn [i,x] (if (mod i n) x nil)) seq))\n;; wrong, 0 is NOT falsey WTF Rich\n\n(fn [seq n]\n(keep-indexed #(if (not= (mod %1 n) (dec n)) %2) seq)\n)","user":"533a2f7be4b0e30313ee6cb8"},{"problem":41,"code":"(fn [col v]\n  (let [with-indexes (map #(vector %1 %2) col (range))]\n    (map first (filter #(not= 0 (mod (+ 1 (second %)) v)) with-indexes))))","user":"579c7db7e4b05b1deef9ae0a"},{"problem":41,"code":"#(loop [l %1 n %2 i 1 r []]\n   (if (seq l)\n     (recur (rest l) n (mod (inc i) n) (if (= i 0) r (conj r (first l))))\n     r))","user":"58731176e4b01531a375ea2a"},{"problem":41,"code":"(fn [x y] (:a (reduce #(if (== (%1 :b) (dec y))\n                              (conj %1 [:a (%1 :a)] [:b 0])\n                              (conj %1 [:a (conj (%1 :a) %2)] [:b (inc (%1 :b))])) {:a [] :b 0} x)))","user":"52281e1ee4b0186687e23a69"},{"problem":41,"code":"(fn [s n]\n  (let [mask (concat (repeat (dec n) true) [false])]\n    (mapcat #(if %1 (list %2) ()) (cycle mask) s)))","user":"56488119e4b0284900eef632"},{"problem":41,"code":"(fn [col n]\n  (flatten\n    (concat\n      (map #(drop-last %) (partition n col))\n      (take-last\n        (rem (count col) n)\n        col))))","user":"57ed2574e4b0bfb2137f5b93"},{"problem":41,"code":"(fn [x,n] (keep-indexed #(if (> (mod (inc %1) n) 0) %2) x))","user":"5512b15ae4b055c2f668d4b5"},{"problem":41,"code":"(fn [x y]\n  (apply concat (partition-all (dec y) y x)))","user":"563c48e7e4b0bfe05bf11832"},{"problem":41,"code":"(fn \n  [lst n]\n  (mapcat #(take (dec n) %) (partition-all n lst)))","user":"56df7440e4b0ca2494a095fb"},{"code":"(fn [seq,n]\n  (map #(nth seq (dec %))\n    (filter #(not= 0 (mod % n)) (range 1 (inc (count seq))))))","problem":41,"user":"4df1e213535d08e6dec9fe20"},{"code":"(fn [l c]\n  (loop [ll l cc c rr []]\n   \t(if (empty? ll)\n      rr\n      (if (= 1 cc)\n        (recur (rest ll) c rr)\n        (recur (rest ll) (dec cc) (conj rr (first ll)))))))","problem":41,"user":"52c81954e4b0c2d177d6212e"},{"code":"(fn [items n] (map (fn [[i x]] x) \n                   (filter (fn [[i]] (or (= i 0) (> (mod (+ i 1) n) 0)))\n                           (map-indexed (fn [index item] [index item]) items))))","problem":41,"user":"4e7e8ea5535db169f9c79719"},{"problem":41,"code":"(fn foo [lst n]\n  (->> lst\n      (interleave (map inc (range)))\n      (partition 2)\n      (filter #(not= 0 (mod (first %) n)))\n      (map last)))","user":"5fb8fe30e4b03f550f448223"},{"code":"(fn getsome [sequence n] (if (< (count sequence) n) sequence (concat (take (- n 1) sequence) (getsome (drop n sequence) n))))","problem":41,"user":"4e89de60535d3e98b8023285"},{"problem":41,"code":"(fn [sx n]\n  (loop [s sx\n         acc []]\n    (if-not (empty? s)\n            (recur (nthrest s n) (conj acc (take (dec n) s)))\n            (flatten acc))))","user":"51316a63e4b0431ba07e7feb"},{"problem":41,"code":"#(loop [res []\n        cnt 1\n        v %1]\n   (if (empty? v)\n     res\n     (recur (if (pos? (rem cnt %2))\n              (conj res (first v))\n              res)\n            (inc cnt)\n            (rest v) )))","user":"5cbd5b42e4b026601754b9f6"},{"code":"(fn f [l c] (if (empty? l) l (concat (take (dec c) l) (f (drop c l) c))))","problem":41,"user":"4f1d1d95535d64f603146488"},{"problem":41,"code":"(fn [items n]\n  (loop [result (empty items) initial 1]\n    (if (> initial (count items))\n      result\n      (if (not= (rem initial n) 0)\n        (recur (conj result (nth items (dec initial))) (inc initial))\n        (recur result (inc initial))))))","user":"55a0d79fe4b0acc240e31502"},{"code":"#(filter identity (mapcat drop-last (partition %2 %2 [nil] %)))","problem":41,"user":"534815bde4b084c2834f4a53"},{"problem":41,"code":"(fn f ([xs n] (f xs n 1 []))\n    ([xs n i ys] (cond\n                  (empty? xs) ys\n                  (= 0 (mod i n)) (recur (rest xs) n (inc i) ys)\n                  :else (recur (rest xs) n (inc i) (conj ys (first xs))))))","user":"548cd813e4b0e286459a1211"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(if (> n (count %))\n             %\n             (drop-last %)) (partition-all n coll)))","user":"54246fcce4b01498b1a71aed"},{"problem":41,"code":"(fn [s i]\n  (loop [in s\n         j (dec i)\n         accum []]\n    (if (empty? in) accum\n      (if (zero? j)\n        (recur (rest in) (dec i) accum)\n        (recur (rest in) (dec j) (conj accum (first in)))))))","user":"54903056e4b0b312c081ff2e"},{"problem":41,"code":"#(for [k (range 1 (inc (count %1))) :when (not= (mod k %2) 0)] (nth %1 (dec k)))","user":"56800ba1e4b0966858e4d8e8"},{"code":"(fn [coll n]\n  (mapcat #(if (< (count %) n)\n              \t% \n                (drop-last %))\n          (partition-all n coll)))","problem":41,"user":"527dc2aee4b0757a1b17138d"},{"code":"(fn [sq n]\n  (:sq\n    (reduce\n      (fn [acc item]\n        (if (= 0 (mod (:i acc) n))\n          (merge acc {:i (inc (:i acc))})\n          {:sq (conj (:sq acc) item) :i (inc (:i acc))}))\n      {:i 1 :sq []}\n      sq)))","problem":41,"user":"4fe89db2e4b07c9f6fd12c59"},{"problem":41,"code":"(fn dropn [arr n]\n  (mapcat identity (map-indexed #(if (= 0 (mod (inc %1) n)) () [%2]) arr)))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":41,"code":"(fn [coll n] \n      (mapcat #(if (= n (count %))\n                   (butlast %)\n                   %)\n              (partition-all n coll)))","user":"59089229e4b047aa04b1997c"},{"problem":41,"code":"(fn [coll n] \n  (keep-indexed \n   #(if (not= \n         (mod (inc %1) n) \n         0) \n      %2) \n   coll))","user":"4fc77f5ae4b0ee37620e1821"},{"code":"(fn [xs n] (keep-indexed #(if-not (zero? (mod (inc %) n)) %2) xs))","problem":41,"user":"4e50ad74535dc968683fc4ec"},{"problem":41,"code":"(fn [col pos]\n  (loop [c col\n         new-col []]\n    (if (< (count c) pos)\n      (concat new-col c)\n      (recur (second (split-at pos c))\n             (concat new-col \n                     (drop-last (first (split-at pos c))))))))","user":"56478a82e4b0284900eef61e"},{"code":"#(loop [liist % mo %2 acc 1 lili []]\n  (if (empty? liist)\n    lili\n    (if (= 0 (mod acc mo))\n      (recur (rest liist) mo (inc acc) lili)\n      (recur (rest liist) mo (inc acc) (conj lili (first liist))))))","problem":41,"user":"4f8db862e4b02e764a0a51b2"},{"code":"(fn [lst d]\n  (filter (fn [x] (not (nil? x)))(for [i (range 0 (count lst))]\n     (if (not (= 0 (rem (+ i 1) d)))\n         (nth lst i))\n     )))","problem":41,"user":"50d5c19ce4b0159555a1fc61"},{"code":"(fn [x y] \n (remove (fn [t] (= t nil))\n    (map-indexed \n      (fn [idx itm] \n        (if (zero? \n          (mod (+ idx 1)  y) \n        ) nil itm)) x)\n  )\n)","problem":41,"user":"4f00f997535dcb61093f6a34"},{"code":"(fn [xs n]\n  (->> (cycle (range 1 (inc n)))\n       ((partial map vector) xs)\n       (filter #(not (= n (second %))))\n       (map first)))","problem":41,"user":"4f031eac535dcb61093f6a67"},{"code":"(fn [input n]\n  (loop [lst input i 1 acc []]\n    (if (empty? lst)\n      acc\n      (if (zero? (rem i n))\n        (recur (rest lst) (inc i) acc)\n        (recur (rest lst) (inc i) (conj acc (first lst)))))))","problem":41,"user":"5341b141e4b00652c8746ecf"},{"code":"(fn [coll n]\n  (keep-indexed\n   (fn [idx itm]\n     (if (pos? (mod (inc idx) n))\n       itm)) coll))","problem":41,"user":"51631002e4b017b283c712c1"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (map first (filter #(not= (mod (second %1) n) (- n 1))\n                     (map list coll (range)))))","user":"53dc94c8e4b094d41abdfefc"},{"code":"(fn f [v n]\n  (filter (complement nil?) \n          (loop [v v cnt 1]\n            (if (> (* n cnt) (count v))\n              v\n              (recur (assoc v (dec (* n cnt)) nil) (inc cnt))))))","problem":41,"user":"51750cd4e4b07031762f2ee5"},{"problem":41,"code":"#(keep-indexed (fn [i x] (if (= (mod (inc i) %2) 0) nil x)) %)","user":"5154c361e4b0179c5115f4e3"},{"code":"(fn [l n]\n  (keep-indexed #(when-not (= (rem %1 n) (dec n)) %2) l))","problem":41,"user":"531c7f0de4b08068f379eda4"},{"code":"#(flatten\n  (partition\n    (dec %2) %2 [] %))","problem":41,"user":"4f253a49e4b0d66497709ff3"},{"problem":41,"code":"(fn [ob num]\n  (let [len (count ob)]\n    (loop [i 0\n           ret ()]\n      (if (= i len)\n        (reverse ret)\n        (if (not= (mod (inc i) num) 0)\n          (recur (inc i) (conj ret (nth ob i)))\n          (recur (inc i) ret))))))","user":"56305383e4b073c1cf7a9be6"},{"problem":41,"code":"#(->> (partition-all %2 %1)\n      (mapcat (partial take (dec %2))))","user":"5b073c34e4b0cc2b61a3bda4"},{"problem":41,"code":"(fn dropn [coll n]\n  (keep-indexed (fn [i e] (if (not= (rem (+ i 1) n) 0) e)) coll))","user":"5c8cfff8e4b048ec896c5996"},{"problem":41,"code":"(fn [a b] (mapcat #(if (= b (count %1)) (drop-last %1) %1) (partition-all b a)))","user":"54750ca3e4b0c51c1f4d7294"},{"code":"(fn [xs n]\n  (flatten (map #(concat (take (dec n) %) (drop n %)) (partition-all n xs))))","problem":41,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":41,"code":"(fn drop-every-nth-item\n  ([seq x]\n   (drop-every-nth-item seq x '() 1))\n  ([seq x new-seq acc]\n   (if (empty? seq)\n     new-seq\n     (if (= acc x)\n       (drop-every-nth-item (rest seq)\n                            x\n                            new-seq\n                            1)\n       (drop-every-nth-item (rest seq)\n                            x\n                            (concat new-seq [(first seq)])\n                            (inc acc))))))","user":"540271aee4b0df28a13c62d0"},{"problem":41,"code":"(fn [coll n]\n  (loop [c coll\n         newc []\n         x 1]\n    (if (first c)\n      (if (not= (mod x n) 0)\n        (recur (next c) (conj newc (first c)) (inc x))\n        (recur (next c) newc (inc x)))\n      newc)))","user":"5fea32f3e4b05ac5b16ea1aa"},{"problem":41,"code":"(fn [arr i]\n  (flatten (partition-all (- i 1) i arr)))","user":"556f443be4b09a3098a5251e"},{"code":"#(remove nil? (map-indexed (fn [i n] (if (> (mod (inc i) %2) 0) n)) %1))","problem":41,"user":"4e58c019535d8a8b8723a297"},{"code":"(fn [lst n]\n(into [](apply concat (map #(take (dec n) %) (partition n n nil lst))))\n  )","problem":41,"user":"50f4894be4b004d364930528"},{"problem":41,"code":"(fn [colls n]\n\n  ((fn [colls cur r]\n\n    (let [rr  (if (or (= 0 (mod cur n)) (empty? colls) )  r   (conj r (first colls)))]\n\n      (if (empty? colls) rr (recur (rest colls) (inc cur) rr))))\n\n   colls 1 []))","user":"5794fd7be4b0e215f87e8476"},{"problem":41,"code":"(fn [collection nth-number-to-drop]\n   (->> collection\n    (partition-all nth-number-to-drop)\n    (mapcat (fn [interval] \n              (if (= (count interval) nth-number-to-drop)               \n                (drop-last interval)\n                interval)))))","user":"54ef7568e4b024c67c0cf885"},{"problem":41,"code":"#(mapcat (fn [partition]\n          (take (- %2 1) partition))\n        (partition-all %2 %1))","user":"5fe9169ce4b05ac5b16ea1a0"},{"problem":41,"code":"(fn [q w] (remove nil? (#(for [a %1] (when (not= (mod (+ (.indexOf %1 a) 1) %2) 0) a)) q w)))","user":"5886e8bde4b0f1effa3b76ea"},{"code":"(fn [col x] (vec (flatten (partition-all (dec x) x col))))","problem":41,"user":"52c1bd29e4b07a9af579236a"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(if (= n (count %))\n             (butlast %) %)\n          (partition-all n coll)))","user":"5c58736be4b01df32ab73247"},{"problem":41,"code":"#(remove (set (take-nth %2 (cons 0 %1))) %1)\n\n;; #(apply concat (partition-all (dec %2) %2 %))","user":"550fdc1de4b06e50f9beb17d"},{"code":"(fn [a b] (mapcat #(take (- b 1) %) (partition-all b a)))","problem":41,"user":"4db13ff51254ad5b4805fa68"},{"code":"(fn[cols c]\r\n   (loop [res [] counter 1 lo-cols cols]\r\n  \t (if (empty? lo-cols)\r\n\t\t\t res\r\n\t\t     (if(= 0 (rem counter c))  \r\n\t\t\t\t (recur res (inc counter) (rest lo-cols))\r\n\t\t\t     (recur (conj res (first lo-cols)) (inc counter) (rest lo-cols))))\r\n    )\r\n)","problem":41,"user":"4dc7f472535d8a4b2fd74293"},{"problem":41,"code":"(fn grp [xs n]\n  (mapcat #(if (= n (count %)) (drop-last %) %) (partition-all n xs))\n  )","user":"58d1c1b1e4b03c36ff7e58ef"},{"problem":41,"code":"(fn [x y]\n  (loop [starting-at (* (quot (count x) y) y)\n         new-seq x]\n\n    (if (>= starting-at y)\n\n      (recur\n        (- starting-at y)\n        (concat\n          (take (dec starting-at) new-seq)\n          (nthrest new-seq starting-at)))\n      new-seq)))","user":"5f1eebcee4b0f565ad998273"},{"code":"#(flatten\n   (map \n\t(fn [part]\n      (if (< (count part) %2)\n        part\n        (butlast part)))\n  \t(partition-all %2 %1)))","problem":41,"user":"53a068cbe4b0ca733b9744ae"},{"problem":41,"code":"(fn rnth\n  [list n]\n  (if (empty? list)\n    []\n    (lazy-cat (take (- n 1) list) (rnth (drop n list) n))\n    )\n)","user":"553d51c3e4b0a04f792994df"},{"problem":41,"code":"(fn dropp [coll num]\n    (loop [n    1\n           items coll\n           acc  []]\n      (println n items)\n      (if (nil? (first items))\n        acc\n        (if (not (= (mod n num) 0))\n          (recur (inc n) (rest items) (conj acc (first items)))\n          (recur (inc n) (rest items) acc)))))","user":"5ff8ead1e4b06df49cee14ab"},{"problem":41,"code":"(fn [lst n] \n  (let [nums (iterate inc 1)]\n   (map first (filter (fn [[fir sec]] (not= 0 (mod sec n))) (map vector lst nums)))))","user":"570e6974e4b0b0fb43fd06ef"},{"problem":41,"code":"(fn dropn [coll n]\n  (mapcat (partial take (dec n))\n          (partition-all n coll)))","user":"5d24e49be4b02ea6f0fb6a2a"},{"code":"(fn [mylist n]\n    (loop [l mylist, cnt n, ret []]\n        (if (= '() l)\n            ret\n            (if (= cnt 1)\n                (recur (rest l) n ret)\n                (recur (rest l) (dec cnt) (conj ret (first l))) ))))","problem":41,"user":"4f2965ffe4b0d6649770a029"},{"problem":41,"code":"(fn [col n]\n  (keep-indexed #(when-not (-> %1 inc (mod n) zero?) %2) col))","user":"56df254be4b0ca2494a095ea"},{"code":"(fn [c i] (keep-indexed #(if-not (= 0 (mod (+ % 1) i)) %2) c))","problem":41,"user":"4f5d0f25e4b0030a34fb2b33"},{"code":"(fn [s n]\n  (loop [v [] i n [x & xs] s]\n    (if (nil? x) v\n    (if (= 1 i)\n      (recur v n xs)\n      (recur (conj v x) (dec i) xs)))))","problem":41,"user":"4eb97234535dfed6da9c6d53"},{"problem":41,"code":"(fn [arr x]\n  (loop [i 1 [f & r] arr result []]\n    (if (= f nil)\n      result\n      (recur (inc i) r (if (= 0 (rem i x)) result (conj result f))))))","user":"5e7f62cce4b085ba37836e3b"},{"problem":41,"code":"#(loop [seq %1 counter 1 result []]\n   (if (empty? seq)\n     result\n     (recur \n      (rest seq)\n      (inc counter)\n      (if (= (mod counter %2) 0) \n        result\n        (conj result (first seq))\n        )\n      )\n     )\n   )","user":"5c4c74efe4b0f9f7a8770e76"},{"problem":41,"code":"#(->> \n  (partition-all %2 %1)\n  (map (partial take (dec %2)))\n  (flatten))","user":"50f02de7e4b0bdaecbb47db0"},{"code":"(fn [s n]\n  (keep-indexed #(if (not= (mod %1 n) (- n 1)) %2) s))","problem":41,"user":"527cd633e4b0757a1b17136f"},{"problem":41,"code":"(fn [x n]\n  (loop [i 1 [e & r] x ret []]\n    (if (nil? e)\n      ret\n      (if (= 0 (mod i n))\n        (recur (inc i) r ret )\n        (recur (inc i) r (conj ret e))))))","user":"577832f4e4b0979f8965165b"},{"problem":41,"code":"(fn [l c]\n  (mapcat #(take (dec c) %) (partition-all c l)))","user":"55d74e71e4b0e31453f64aa4"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (filter (comp not nil?) (mapcat butlast (partition n n [nil] coll))))","user":"5665ef78e4b0e91d5f5c5664"},{"problem":41,"code":"; original method\n\n; #(remove nil? (apply map\n;      (fn [val idx] \n;        (if (= %2 idx) nil val))\n;      (list %1 (cycle (range 1 (inc %2))))))\n\n; clever solution using just partition\n#(reduce concat (partition (dec %2) %2 [] %1))","user":"541e2ff8e4b01498b1a71a8a"},{"code":"(fn d [x n] \n  (if (< (count x) n)\n    x\n    (concat (take (- n 1) x) (d (drop n x) n))\n    )\n)","problem":41,"user":"525cc137e4b0cb4875a45d46"},{"problem":41,"code":"(fn [coll e] \n  (->>\n    coll\n    (map vector (iterate inc 1))\n    (filter #(not= (mod (first %) e) 0))\n    (map second)\n    ))","user":"5d4320fde4b07c84aa5ae690"},{"problem":41,"code":"(fn  [c v]\n  (vec (apply concat  (partition-all (dec v) v c))))","user":"59cb706ee4b0a024fb6ae5ba"},{"problem":41,"code":"#(loop [in %1 out [] c 1]\n   (if (empty? in)\n     out\n     (recur (rest in)\n       \t(if (= (rem c %2) 0)\n          out\n          (conj out (first in))) (inc c))))","user":"5895385fe4b00487982d5279"},{"problem":41,"code":"(fn [s l]\n  (remove nil? (vec (mapcat drop-last (partition l l (repeat nil) s)))))","user":"536d24ece4b0fc7073fd6e54"},{"code":"#(mapcat (fn [c] (if (= (count c) %2) (butlast c) c)) (partition-all %2 %))","problem":41,"user":"4ec49231535dcc7ae8597d63"},{"code":"#(apply concat (partition (- %2 1) %2 [] %1))","problem":41,"user":"4f0e995e535d0136e6c22326"},{"code":"#(mapcat (fn [x] (take (dec %2) x)) (partition-all %2 %1))","problem":41,"user":"4f039bbe535dcb61093f6b39"},{"problem":41,"code":"(fn  [coll n]\n(loop [index 1\n       acc []\n       ll coll]\n\n    (cond (empty? ll) acc\n          :else   (recur (if (< index n) (inc index) 1)\n                         (if (< index n) (conj acc (first ll)) acc)\n                         (rest ll))\n          )\n    )\n      \n)\n\n;;better\n;;(fn [n coll]\n;;   (flatten (partition-all (dec n) n coll)))","user":"5a7f77fae4b00b71e582a041"},{"problem":41,"code":"#(mapcat seq (partition (dec %2) %2 nil %1))","user":"54397533e4b032a45b86931d"},{"problem":41,"code":"(fn [x br]\n  (let [a (count x)]\n    (loop [i 0\n           d '()]\n      (if (= i a)\n        (reverse d)\n        (if (= 0 (mod (+ 1 i) br))\n            (recur (+ i 1) d)\n            (recur (+ i 1) (conj d (nth x i))))))))","user":"5d371b6fe4b01671435dbd31"},{"problem":41,"code":"#(mapcat drop-last (partition-all %2 (conj %1 %2)))","user":"548f11a0e4b0e286459a122d"},{"problem":41,"code":"(fn drop-nth\n  [xs n]\n  (keep-indexed #(when (not= 0 (mod (inc %1) n)) %2) \n                xs)\n  )","user":"59cc4d5ee4b0a024fb6ae5d0"},{"problem":41,"code":"(fn [coll n] \n  (map second\n  \t(remove #(zero? (mod (first %) n))\n  \t\t(map vector (iterate inc 1) coll))))","user":"51be00cae4b0ff155d51d2b8"},{"problem":41,"code":"(fn [x n]\n  (loop [res [],n0 n,x1 x]\n    (if (empty? x1) res\n      (if (= 1 n0) (recur res n (rest x1))\n        (recur (concat res [(first x1)]) (- n0 1) (rest x1))))))","user":"55486ee6e4b0a04f7929955a"},{"code":"#(keep-indexed \n  (fn [i x]\n    (if (pos? (mod (inc i) %2))\n      x)) %)","problem":41,"user":"51b2e850e4b026427ecf067b"},{"problem":41,"code":"(fn [col place] (apply vector\n        \t\t (map second\n            \t  (remove\n             \t  #(zero? (mod (first %) place))\n             \t\t  (map vector (range 1 10000) col)))))","user":"559067ace4b0277789237670"},{"code":"(fn drop-nth [s e]\n  (mapcat #(if (= e (count %)) (drop-last %) %) (partition e e () s)))","problem":41,"user":"51b76227e4b0d906fcd71d35"},{"code":"(fn [l n] (->> l (map-indexed #(vector (not= (dec n) (mod %1 n)) %2)) (filter #(% 0)) (map #(% 1))))","problem":41,"user":"525f51bde4b0cb4875a45dc8"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (loop [coll coll\n         acc '()]\n    (let [head (take (dec n) coll)\n          tail (drop n coll)\n          newacc (concat acc head)]\n      (if (empty? tail)\n        newacc\n        (recur tail newacc))))\n  (mapcat (partial take (dec n)) (partition-all n coll)))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":41,"code":"#(for [n (range 0 (count %1))\n  :when (not= (mod (+ 1 n) %2) 0)]\n   (get %1 n))","user":"511e17a9e4b0c5b849dd36b0"},{"problem":41,"code":"(fn [coll n]\n  (map\n   second\n   (filter\n    (fn [x]\n      (not= (mod (inc (first x)) n) 0))\n    (map-indexed vector coll))))","user":"5456e4e7e4b080a794c2c883"},{"code":"(fn [lst n]\n  (reduce concat\n  (map \n    (fn [sublst] \n        (if (== (count sublst) n)\n          (drop-last sublst)\n          sublst))\n    (partition-all n lst))))","problem":41,"user":"524f4a24e4b0541d1855b80b"},{"problem":41,"code":"(fn f [l c]\n  (if (empty? l) l\n  (concat (take (dec c) l) (f (drop c l) c))))","user":"53cdbad1e4b00fb29b2212e6"},{"problem":41,"code":"(fn [seq n]\n  (loop [result []\n         remaining seq\n         count 1]\n    (if (empty? remaining)\n      result\n      (recur (if (= 0 (rem count n))\n               result\n               (conj result (first remaining)))\n             (rest remaining)\n             (inc count)))))","user":"4ea8570f535d7eef308072f8"},{"problem":41,"code":"(fn [xs n] \n   (mapcat \n     #(if (=(count %) n) (drop-last %) %) \n     (partition n n nil xs)))","user":"53ef78bee4b0742d9025b0cd"},{"problem":41,"code":"(fn [items n]\n  (loop [items items\n         res-items []\n         cur-index 1]\n    (if (empty? items)\n      res-items\n      (if (= 0 (mod cur-index n))\n      \t(recur (rest items)\n               res-items\n               (inc cur-index))\n        (recur (rest items)\n               (conj res-items (first items))\n               (inc cur-index))))))","user":"5a23503fe4b0ff51aa4b32d6"},{"code":"(fn [sequ part] (mapcat (partial take (- part 1)) (partition-all part sequ)))","problem":41,"user":"533aac38e4b0e30313ee6cbe"},{"code":"(fn [coll n] (keep-indexed #(if-not (= (mod (inc %) n) 0) %2) coll))","problem":41,"user":"52c00263e4b07a9af579233f"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (#(let [copied (take (dec n) %2)]\n      (if (empty? copied)\n        %1\n        (recur (into %1 copied) (drop n %2)))) \n    []\n    coll))","user":"5ed52854e4b016b56eae05d2"},{"problem":41,"code":"#(concat (mapcat drop-last (partition %2 %)) (take-last (rem (count %) %2) %))","user":"549def9ce4b0f3d1d8e70f99"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed (fn [idx x]\n                  (when (pos? (mod (inc idx) n))\n                    x))\n                s))","user":"56a79eb0e4b07966d5a8a05d"},{"problem":41,"code":"(fn [r c n]\n  (if (empty? c)\n    r\n    (let [[a [_ & b]] (split-at (dec n) c)]\n      (recur (concat r a) b n)))) []","user":"51a4d802e4b0def3c5c5869a"},{"code":"#(for [i (range 0 (+ 1 (count %1))) :when (not (= 0 (mod i %2)))] (nth %1 (- i 1)))","problem":41,"user":"5007c7c7e4b0b17c647f5226"},{"problem":41,"code":"(fn [coll n]\n  (let [indices (range (count coll))\n        pairs (map vector indices coll)\n        dropped (filter #(not= (rem (inc (first %)) n) 0) pairs)]\n    (map second dropped)))","user":"567b4641e4b05957ce8c61a5"},{"code":"#(mapcat (partial drop 1) (partition-all %2 (cons nil %1)))","problem":41,"user":"513a4babe4b067e25a345eca"},{"problem":41,"code":"(fn f [s n]\n  (loop [v s\n         x 1\n         res []]\n    (if (empty? v)\n      res\n      (recur (rest v) (inc x) (if (not= 0 (rem x n))\n                                (conj res (first v))\n                                res)))))","user":"51a3cc45e4b0e77c4ca60bfb"},{"code":"(fn [s n]\n   (mapcat butlast (partition n n [:x] s)))","problem":41,"user":"4f849f76e4b033992c121c36"},{"problem":41,"code":"(fn drop-nth\n    ([coll n] (drop-nth coll n 0))\n    ([[item & more] n current]\n       (when item\n         (if (= (dec n) (mod current n))\n           (recur more n (inc current))\n           (cons item\n                 (drop-nth more n (inc current)))))))","user":"51803613e4b04f45bde7d8fd"},{"code":"(fn\n  ([coll x]\n    (loop [result [] off 1 remain coll]\n      (if (empty? remain) \n           result\n         (recur (if (= (mod off x) 0)\n                    result\n                  (conj result (first remain))\n                 ) (inc off) (rest remain))))))","problem":41,"user":"51d28e15e4b0d13b04db0d9b"},{"problem":41,"code":"(fn [s n] \n   (loop [i 0 r []] \n     (println i)\n     (if (< i (count s)) \n       (recur (+ i 1) \n               (if (not= (rem (+ i 1) n) 0) (conj r (nth s i)) r)\n              )\n        r )))","user":"559eb160e4b0acc240e314e1"},{"problem":41,"code":"#(keep-indexed \n  (fn [idx v] \n    (if (not (= (rem (+ idx 1) %2) 0))\n        v\n    )) %)","user":"548b7db8e4b0e286459a11fd"},{"code":"(fn [s n] (keep-indexed \n  (fn [i v] (if (zero? (mod (inc i) n))\n            nil               \n            v)) s))","problem":41,"user":"4f567cdbe4b0a7574ea71824"},{"code":"(fn [s n]\n  (keep-indexed\n    #(if (> (mod (inc %1) n) 0) %2)\n    s))","problem":41,"user":"4eb6d3ab535d7eef30807370"},{"problem":41,"code":"(fn\n  [vec n]\n  (loop [current-vector vec\n         final-vector []]\n      (if (empty? current-vector)\n        (identity final-vector)\n        (if (>= (count current-vector) n)\n          (recur (subvec current-vector n)\n              (into final-vector (subvec current-vector 0 (- n 1))))\n          (recur [] (into final-vector current-vector))\n          )\n        )\n    )\n  )","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":41,"code":"(fn dropnth [l n]\n  (let [p (partition-all n l)]\n    (reduce (fn [a e] (apply conj a (if (= n (count e)) (drop-last e) e))) [] p)))","user":"602049b8e4b0bf4ca6b10961"},{"problem":41,"code":"(fn y-drop-nth\n  [coll n]\n  (loop [counter 1\n         [f & r] coll\n         acc []]\n    (if (nil? f)\n      acc\n      (let [should-not-add (zero? (mod counter n))\n            acc+ (if should-not-add acc (conj acc f))\n            counter+ (inc counter)]\n        (recur counter+ r acc+)))))","user":"5d6b21efe4b04d129b00f2a3"},{"problem":41,"code":"(fn [coll which] (for [[x y] (map #(list %1 %2) (iterate inc 1) coll )\n      :when (not= 0 (mod x which))] y))","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":41,"code":"(fn [s n] (keep-indexed #(if (not= 0 (rem (inc %1) n)) %2) s))","user":"5901158de4b0438e51c2d039"},{"code":"#(mapcat drop-last (partition %2 %2 '(1) %1))","problem":41,"user":"4ea76541535d7eef308072eb"},{"problem":41,"code":"#(apply concat \n       (map (partial take (dec %2)) \n            (partition-all %2 %1)))","user":"535944d6e4b04ce2eb3ed296"},{"code":"(fn [xs n]\r\n  (filter #(not= (mod (inc (.indexOf xs %)) n) 0) xs))","problem":41,"user":"4fb79872e4b081705acca2d2"},{"problem":41,"code":"#(for [n (range (count %1))\n        :when (pos? (mod (inc n) %2))\n        ]\n      (nth %1 n))","user":"583c8bd4e4b089d5ab817d81"},{"code":"#(let [len (count %1) neat (- len (rem len %2))]                                                                                                               \n           (flatten (list (map butlast (partition %2 (take neat %1))) \n                          (drop neat %1))))","problem":41,"user":"4fbfe9a4e4b081705acca31f"},{"problem":41,"code":"(fn drop-nth [v n]\n  (loop [i 1, cnt (count v), result [] ]\n\t(if (<= i cnt)\n\t\t(recur (inc i), cnt,\n\t\t\t(if (= 0 (rem i n)) \n\t\t\t\tresult \n\t\t\t\t(conj result (v (dec i)))))\n\tresult)))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":41,"code":"#(loop\n   [h (take (- %2 1) %)\n    t (drop %2 %1)]\n   (if (empty? t)\n     h\n     (recur (concat h (take (- %2 1) t)) (drop %2 t))))","user":"559a9a3de4b066d22e731f45"},{"problem":41,"code":"(fn myfn[a b] (map (fn [x] (nth a x))\n           (filter \n            \t(fn [x] \n                \t(not (= (mod (inc x) b) 0)))  \n           (range (count a)))))","user":"5744723ae4b009280f9f2b3a"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(when (not= (rem (inc %1) n) 0) %2) xs))","user":"555ac933e4b0deb715856e49"},{"code":"(fn drop-n [s n]\n  (loop [s1 s \n         acc [] \n         c 1]\n    (if (empty? s1)\n      \tacc\n    \t(recur \n         (rest s1)\n         (if (zero? (mod c n))\n           acc\n           (conj acc (first s1)))\n         (inc c)))))","problem":41,"user":"534f25f9e4b084c2834f4ac6"},{"code":"#(apply concat (map (fn [x] (take (- %2 1) x)) (partition-all %2 %1)))","problem":41,"user":"52cc85abe4b07d0d72b27367"},{"problem":41,"code":"(fn [coll n] \n  (map coll (filter \n             #(not (zero? (mod (inc %) n)))\n             (range (count coll)))))","user":"53bd8d27e4b0d9a98559a6d6"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (apply concat (partition-all (dec n) n coll)))","user":"57dda21be4b0bd073c202445"},{"problem":41,"code":"(fn my-nth [lst nth]\n  (loop [x lst n (dec nth) acc []]\n    (if (empty? x)\n      acc\n      (if (= n 0)\n        (recur (rest x) (dec nth) acc)\n        (recur (rest x) (dec n) (conj acc (first x)))))))","user":"5a401a7de4b0447ef91cc5c5"},{"problem":41,"code":"#(loop [xs %1\n         acc []]\n    (if (empty? xs) \n      acc\n      (recur (drop %2 xs) \n             (concat acc (take (- %2 1) xs)) )))","user":"56795625e4b05957ce8c6186"},{"problem":41,"code":"#(mapcat (fn [a] \n  (take (- %2 1) a))\n(partition-all %2 %1))","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"problem":41,"code":"(fn [s n] (loop [s s r [] m (- n 1)] \n            (if (empty? s) \n              r \n              (if (== m 0) \n                (recur (rest s) r (- n 1)) \n                (recur (rest s) (conj r (first s)) (- m 1))))))","user":"5457e5f1e4b01be26fd74613"},{"code":"#(for [x (range (count %1)) :when (> (rem (+ x 1) %2) 0)] (nth %1 x))","problem":41,"user":"51d360d1e4b099f3b6acddff"},{"code":"(fn [xs y]\n   (loop [list xs num y acc []]\n     (if (empty? list)\n       (reverse acc)\n       (if (= num 1)\n         (recur (rest list) y acc)\n         (recur (rest list) (dec num) (cons (first list) acc) )))))","problem":41,"user":"4feded14e4b0d2a5fc2962ec"},{"code":"(fn drop-n \n  ([s n] (drop-n s n 1))\n  ([s n c] \n    (cond\n      (empty? s) '()\n      (= 0 (mod c n)) (drop-n (rest s) n (inc c))\n      :else\n          (cons (first s) (drop-n (rest s) n (inc c))))))","problem":41,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn ndrop [coll n]\n  (let [hf (fn [icol i] (if (= 0 (mod i n)) icol (conj icol (nth coll (dec i)))))]\n    (loop [i 1 r []]\n      (if (= (count coll) (dec i))\n        r\n        (recur  (inc i) (hf r i))))))","problem":41,"user":"4e7ada51535db169f9c796ae"},{"code":"(fn\r\n  [c i]\r\n  (let [s (map vector (range 1 (inc (count c))) c)\r\n        t (filter #(not= 0 (mod (first %) i)) s)]\r\n    (map second t)))","problem":41,"user":"4f18677d535d64f603146459"},{"problem":41,"code":"(fn drop-nth [sq n]\n  (loop [sq-it sq\n         ret-it (empty sq)]\n    (if (empty? sq-it)\n      ret-it\n      (recur (drop n sq-it)\n             (concat ret-it\n                     (take (- n 1) sq-it))))))","user":"559d33b3e4b0ec2b359424d9"},{"problem":41,"code":"(fn drop-every-nth\n  [xs n]\n  (->> (iterate inc 1)\n       (interleave xs)\n       (partition 2)\n       (remove #(zero? (mod (second %) n)))\n       (map #(first %))))","user":"5d49ec5ee4b0776584bd6f1c"},{"code":"(fn drop-nth [coll x]\n  (flatten\n   (if (empty? coll)\n     '()\n     (cons\n      (take (dec x) coll)\n      (drop-nth (drop x coll) x) \n      ) \n     )\n)\n)","problem":41,"user":"4f2582bae4b0d66497709ff6"},{"code":"(fn [a b] (flatten \n  (map \n    (fn [x] (if (= (count x) b)\n              (drop-last x)\n               x\n            ))\n    (partition-all b a))))","problem":41,"user":"4f1595da535d64f603146444"},{"problem":41,"code":"(fn drop-every-nth [result coll n] (\n                     if(not (empty? coll))\n                     \t(do \n                          (concat result (take (dec n) coll)\n                          (drop-every-nth result (drop n coll) n)        \n                                  ))\n                     \tresult\n \t\t\t\t\t\t\n              \n              )\n  ) '()","user":"5cf53196e4b087f62be35a94"},{"problem":41,"code":"(fn test [coll n]\n  (loop [[head & tail] (partition-all n coll)\n         result []]\n    (if (nil? head)\n      result\n      (recur tail (concat result (if (< (count head) n)\n                                   head\n                                   (butlast head)\n                                  )\n                          )\n     )\n   )\n )\n)","user":"54021f13e4b0df28a13c62cc"},{"code":"(fn [lst every]\n  ((fn drop-in [lst this-chunk every]\n    (if (empty? lst)\n      []\n     (if (= this-chunk every)\n        (drop-in (rest lst) 1 every)\n        (into [(first lst)]\n          (drop-in (rest lst)\n              (inc this-chunk) every)))))\n    lst 1 every))","problem":41,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":41,"code":"(fn [x y] (keep-indexed #(if (not= (mod %1 y) (- y 1)) %2) x))","user":"540479e7e4b0addc1aec665a"},{"problem":41,"code":"(fn [coll n] (mapcat identity (partition-all (dec n) n coll)))","user":"54f2a1b8e4b024c67c0cf8cb"},{"code":"(fn [coll p]\n  (loop [xs coll\n         sol []\n         idx 1]\n    (if (empty? xs)\n      sol\n      (if (= 0 (mod idx p))\n        (recur (rest xs) sol (inc idx))\n        (recur (rest xs) (conj sol (first xs)) (inc idx)))\n      )\n    ))","problem":41,"user":"5360f043e4b0243289761e3c"},{"code":"(fn f [x y]\n  (keep-indexed \n   (fn [i v] \n     (if (not (= (mod (+ i 1) y) 0)) v)) x))","problem":41,"user":"5154b16be4b0179c5115f4e2"},{"code":"(fn drop-nth [lat n]\r\n  (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n lat))))","problem":41,"user":"4f500769e4b03ad3f0c10cf8"},{"problem":41,"code":"(fn drop-nth [x y] (filter (fn [z] (not (= 0 (rem (+ 1 (.indexOf x z)) y)))) x))","user":"6078ce29e4b0a637ed78035a"},{"code":"#(loop [x 0 y %2 result []] (if (> x (count %1)) result (if (not (= (mod x %2) 0)) (recur (inc x) y (conj result (nth %1 (dec x)))) (recur (inc x) y result))))","problem":41,"user":"52d4acc8e4b09f7907dd1333"},{"problem":41,"code":"(fn drp [s n]\n  (first (reduce #(let [[r i] %1] (if (= i n)\n                                    [r 1]\n                                    [(conj r %2) (inc i)]))\n                 [[] 1] s)))","user":"5f8b06afe4b0715f5002d74a"},{"problem":41,"code":"(fn [x y]\n  \n  (mapcat   #( take (dec y )  %     )  ( partition-all y x)         )\n  \n  \n  )","user":"5da98129e4b000c986472c33"},{"code":"#(mapcat butlast (partition %2 %2 [1] %))","problem":41,"user":"4e6a5a32535d8ccf87e9fed0"},{"code":"(fn [s n] (mapcat (partial take (dec n)) (partition-all n s)))","problem":41,"user":"4eecdd66535d93acb0a668b9"},{"code":"(fn drop-n [coll every-n]\n  (flatten\n    (partition-all (dec every-n) every-n coll)))\n\n;(fn drop-n [coll every-n]\n;  (flatten\n;    (map\n;      (partial take (dec every-n))\n;      (partition-all every-n coll))))","problem":41,"user":"53a074a4e4b0ca733b9744af"},{"code":"(fn [coll n]\n     (loop [result [] c coll i 1]\n         (if (nil? c) (filter #(not (nil? %)) result)\n          (recur (conj result (if (> (mod i n) 0) (first c))) (next c) (inc i)))))","problem":41,"user":"522eba30e4b01cdb292c5f0e"},{"code":"(fn [coll n] (mapcat #(take (dec n) %) (partition-all n coll )))","problem":41,"user":"4f386f61e4b0e243712b1edc"},{"problem":41,"code":"(fn [coll n]\n  (map\n    (fn [[idx item]] item)\n    (filter\n      (fn [[idx item]] (not= (mod idx n) 0))\n      (map-indexed (fn [idx item] [(inc idx) item]) coll))))","user":"5bc7f2d6e4b07a9b28b100b7"},{"problem":41,"code":"(fn [col v] (mapcat #(take (dec v) %) (partition-all v col)))","user":"5892a5fde4b00487982d5228"},{"code":"(fn [coll x] (flatten (map #(take (dec x) %) (partition-all x coll))))","problem":41,"user":"525a8875e4b0cb4875a45cf6"},{"problem":41,"code":"(fn [theColl n] (filter identity (map-indexed (fn [idx item] (if (not (= (rem (inc idx) n) 0 )) item)) theColl)))","user":"554bc64ae4b0a04f79299598"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) xs))","user":"5d321852e4b01671435dbce8"},{"problem":41,"code":"(fn [coll n]\n  (let [s (partition-all n coll)]\n    (mapcat #(if (= (count %) n) (drop-last %) %) s)))","user":"53b182a5e4b047364c044491"},{"code":"#(vec (apply concat (partition-all (dec %2) %2 %)))","problem":41,"user":"4edd038c535d10e5ff6f5327"},{"problem":41,"code":"(fn [coll x] (flatten (partition (dec x) x nil coll)))","user":"52e12ac5e4b09f7907dd141a"},{"problem":41,"code":"#(loop [i-list %1 count 1 res []]\n    (if (empty? i-list)\n      res\n      (recur (drop 1 i-list)\n             (inc count)\n             (if (= 0 (mod count %2))\n               res (conj res (first i-list)))\n)))","user":"55989c25e4b031d6649c9b9b"},{"code":"(fn [xs n] (apply concat (map (fn [x y] (if (= 0 (mod y n)) [] [x])) xs (rest (range)))))","problem":41,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":41,"code":"(fn rmn[coll c]\n  (mapcat #(if(= (count %1) c) (butlast %1) %1)\n      (partition c c () coll)))","user":"548f3ed8e4b0e286459a1236"},{"problem":41,"code":"(fn [coll i]\n  (loop [r []\n         idx 1\n         ext coll]\n    (if (empty? ext)\n      r\n      (recur \n       (if (= (mod idx i) 0)\n         r\n         (conj r (first ext)))\n       (inc idx)\n       (rest ext)))))","user":"54a80855e4b09f271ff37c9e"},{"code":"(fn [xs n] \n    (map second (filter #(not= 0 (mod (+ 1 (first %1)) n)) (map-indexed #(vector %1 %2) xs))))","problem":41,"user":"5097ea89e4b087ccf61a7af4"},{"problem":41,"code":"(fn [sekvenssi numero] (flatten (map #(if (= (count %) numero) (drop-last %) %) (partition-all numero sekvenssi))))","user":"57c314f3e4b05aa3c4741cba"},{"problem":41,"code":"(fn dropn [x y] (if (< (count x) y) x (concat (take (- y 1) x) (dropn (drop y x) y))))","user":"53e2b212e4b036ad0777e3f4"},{"problem":41,"code":"(fn [coll n]\n  (apply concat (partition (dec n) n [] coll)))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn [lst n]\n  (keep-indexed #(if (= 0 (mod (inc %1) n)) nil %2) lst))","problem":41,"user":"4ec601ff535d6d7199dd36be"},{"code":"#(vec (flatten ((fn a [n b]\n                     (lazy-seq\n                       (when-let [s (seq b)]\n                         (cons (take (dec n) s) (a n (drop n s))))))\n                 %2 %1)))","problem":41,"user":"4e68be01535d8ccf87e9fe88"},{"problem":41,"code":"(fn [xs every]\n  (mapcat (fn [chunk]\n            (if (= (count chunk) every)\n              (butlast chunk)\n              chunk))\n          (partition every every [] xs))\n  )","user":"59a80652e4b0bcf4e9a43aeb"},{"problem":41,"code":"(fn [coll di] (let [drop-coll (take-nth di (nthrest coll (- di 1)))] (remove (set drop-coll) coll)))","user":"562573d0e4b00a550fc90298"},{"code":"#(keep-indexed (fn [i e] \n                 (when (not (= (mod (inc i) %2) 0))\n                   e)) %1)","problem":41,"user":"52de249ae4b09f7907dd13ed"},{"code":"(fn [xs n]\n  (apply concat (partition (dec n) n nil xs)))","problem":41,"user":"52015698e4b0d7096e99ddba"},{"code":"(fn \n  drop-n \n  ([to-split n] (drop-n n to-split '()))\n  ([n to-split prev]\n    (if (seq to-split)\n      (drop-n n (drop n to-split) (concat [prev] [(take (- n 1) to-split)]))\n      (flatten prev)\n      )\n   ))","problem":41,"user":"4ff8aa3fe4b0678c553fc39e"},{"problem":41,"code":"(fn [xs n]\n   (mapcat #(take (dec n) %) (partition-all n xs)))","user":"56532ff4e4b0f9d632dd846e"},{"problem":41,"code":"#(mapcat drop-last (partition %2 %2 [1] %))","user":"5e66c144e4b0e171e1033683"},{"code":"(fn [coll n]\n  (filter identity\n  (map #(if (= (mod %2 n) 0)\n          nil\n          %)\n       coll\n       (range 1 (inc (count coll))))))","problem":41,"user":"4fdbc075e4b05e33b9224f61"},{"problem":41,"code":"(fn drop-every [col i]\n  (keep-indexed\n   (fn [idx v]\n       (when-not (= 0 (mod (inc idx) i)) v ))\n   col))","user":"56020b3fe4b04bb52996e19b"},{"problem":41,"code":"(fn [s n]\n  (loop [res [] s s k 1]\n    (cond\n     (empty? s) res\n     (= (mod k n) 0) (recur res (rest s) (+ k 1))\n     :else (recur (conj res (first s)) (rest s) (+ k 1)))))","user":"5dee144ae4b093ff71727591"},{"problem":41,"code":"(fn my-drop-n [input n]\n  (loop [result [] x input step 1]\n    (if (not-empty x)\n      (if (not= (rem step n) 0)\n        (recur (conj result (first x)) (rest x) (inc step))\n        (recur result (rest x) (inc step)))\n      result)))","user":"561bb8dbe4b064ca9f4b1686"},{"code":"(fn [col n]\n  (flatten\n  (reduce\n   #(if (= (rem (count %) n) (- n 1))\n      (conj % [])\n      (conj % %2))\n   []\n   col)))","problem":41,"user":"52cf5450e4b07d0d72b273a4"},{"code":"(fn [x n] (flatten (map #(take (- n 1) %) (partition-all n x))))","problem":41,"user":"51583ee4e4b0a069fd272c72"},{"problem":41,"code":"(fn [coll x]\n(filter #((complement zero?) (mod (inc (.indexOf coll %)) x)) coll))","user":"5594e0e3e4b0c79f6e1db95b"},{"problem":41,"code":"(fn [seq n]\n    (->> (map list seq (iterate inc 1))\n         (filter #((complement zero?) (rem (second %) n)))\n         (map first)\n         vec))","user":"5ff64845e4b06df49cee1495"},{"code":"#(mapcat (partial take (dec %2)) (partition-all %2 %))","problem":41,"user":"4e951ce5535dbda64a6f6b2e"},{"code":"(fn drop-nth [coll n]\n  (mapcat #(take (dec n) %) (partition-all n coll)))\n\n;; Doesn't work for sequences of sequences                                          \n;; (fn drop-nth [coll n]\n;;   (flatten (partition-all (- n 1) n coll)))","problem":41,"user":"53713ed9e4b0fc7073fd6eaf"},{"code":"(fn [coll n]\n    (loop [coll coll\n           i 0\n           answer []]\n      (cond\n       (nil? coll) answer\n       (= (dec n) (mod i n)) (recur (next coll) (inc i) answer)\n       :else (recur (next coll) (inc i) (conj answer (first coll))))))","problem":41,"user":"4e89e939535d3e98b8023287"},{"code":"(fn f [v p]\n  (loop [i 0 res []]\n    (if (>= (+ i p -1) (count v))\n      (into res (subvec v i))\n      (recur (+ i p) (into res (subvec v i (+ i p -1))))\n      )\n    )\n  )","problem":41,"user":"52ae886de4b0c58976d9acab"},{"problem":41,"code":"(fn dropn[seqi i]\n  (loop [a seqi res [] cpt 1]\n    (if (seq a)\n      (if (= (mod cpt i) 0)\n        (recur (rest a) res (inc cpt))\n        (recur (rest a) (conj res (first a)) (inc cpt))\n      )\n      res\n    )\n  ))","user":"5a6cb2eae4b0512ff01cda57"},{"problem":41,"code":"(fn foo [li n]\n  (loop [sol [] todo li]\n    (if (empty? todo) sol\n        (recur (concat sol (let [temp (take n todo)]  (if (= (count temp) n) (butlast temp) temp))) (drop n todo)))))","user":"59156f0be4b0163c97b36f3d"},{"problem":41,"code":"(fn [coll n] (map last\n                (filter #(pos? (rem (first %) n)) \n                      (map-indexed #(vector (inc %1) %2) coll))))","user":"55c13e73e4b01b9910ae2a2f"},{"problem":41,"code":"(fn my-drop\n  ([l c] (my-drop l c []))\n  ([l c acc]\n   (if (empty? l)\n     acc\n     (recur (drop c l) c (concat acc (take (dec c) l))))))","user":"593c9583e4b069cdc2982b94"},{"code":"(fn dropn [l n]\n  ((fn de [l n m]\n     (if (empty? l) \n       l\n       (if (= n 1) \n         (de (rest l) m m)\n         (cons (first l) (de (rest l) (- n 1) m))))) l n n))","problem":41,"user":"5110b8bae4b04c71fce993f4"},{"problem":41,"code":"(fn [xs n]\n  (->> xs\n  \t(map-indexed (fn [idx x] (if (= 0 (rem (inc idx) n)) nil x)))\n    (filter (complement nil?)))\n  )","user":"5b9db58be4b0c0b3ffbd4b41"},{"code":"(fn[x y] (loop [xs x result [] k 1]\n    (if (not (empty? xs))\n      (recur (rest xs) (if(= (mod k y) 0) result (conj result (first xs))) (+ 1 k))\n      result)))","problem":41,"user":"51d10b1fe4b067c36548635e"},{"code":"(fn [l t] \r\n   (keep-indexed \r\n     (fn [i e]\r\n       (if \r\n         (not= 0 (mod (+ i 1) t)) e)) l))","problem":41,"user":"4ef2da4f535dced4c769f224"},{"problem":41,"code":"(fn dropnth [coll n]\n  (flatten \n   (partition (dec n) n [] coll)))","user":"56742817e4b05957ce8c612d"},{"code":"(fn drop-every-nth [sq n] (if (empty? sq) sq (concat (take (- n 1) sq) (drop-every-nth (drop n sq) n))))","problem":41,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":41,"code":"(fn [s n]\n  (loop [result [] r s i 1]\n    (cond (empty? r) result\n          (= i n)    (recur result                  (rest r) 1      )\n          :else      (recur (conj result (first r)) (rest r) (inc i))\n)\n)\n)","user":"57d7c894e4b0bd073c2023de"},{"code":"(fn [col n] \n  (remove nil? (map-indexed (fn [i x]\n                              (if-not (= 0 (mod (+ 1 i) n))\n                                x))\n                            col)))","problem":41,"user":"51891c96e4b04c2714a2670e"},{"code":"(fn [xs n] (remove nil? (map (fn [x i] (if (> (mod i n) 0) x)) xs (range 1 (+ 1 (count xs))))))","problem":41,"user":"53388e2de4b0e30313ee6c9c"},{"problem":41,"code":"#(map (fn [[i v]] v) \n      (filter (fn [[i v]] (not= (mod i %2) (- %2 1))) \n              (map-indexed vector %1)))","user":"5884e807e4b0f1effa3b76a6"},{"code":"(fn [xs n]\n  (loop [ys xs\n         zs []\n         m 1]\n    (if (seq ys)\n      (if (< m n)\n        (recur (rest ys) (conj zs (first ys)) (inc m))\n        (recur (rest ys) zs 1))\n      zs)))","problem":41,"user":"511442d0e4b0e9c109bb74d5"},{"code":"#(mapcat butlast (partition %2 %2 [1] %1))","problem":41,"user":"5369d072e4b0243289761ea1"},{"code":"(fn [coll n]\n  (apply concat (partition (- n 1) n nil coll)))","problem":41,"user":"504f6721e4b0a02f9cffde7f"},{"code":"(fn [s n] (map last (filter #(if (not (= (mod (inc (first %)) n) 0)) true false) (map-indexed vector s))))","problem":41,"user":"50799992e4b08327cd804a62"},{"code":"(fn [s n]\n   (mapcat #(take (- n 1) %)\n        (partition n n nil s)))","problem":41,"user":"516b8837e4b005fd0cdf85c1"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not(zero? (mod (inc %1) n))) %2) coll))","user":"573632b7e4b0cd1946bd102f"},{"problem":41,"code":"(fn skip-n [s n] \r\n  (concat (take (- n 1) s) \r\n    (if (> (count (nthrest s n)) n) (skip-n (nthrest s n) n)\r\n        (take (- n 1) (nthrest s n)))))","user":"579d9601e4b05b1deef9ae18"},{"problem":41,"code":"(fn [xs n] \n    (mapcat \n        #(if (= (mod (first %) n) 0) \n            () \n            (list (second %))) \n        (map list (rest (range)) xs)))\n;#(loop [xs %1 acc [] n 1]\n;    (if (empty? xs)\n;        acc\n;        (let [tail (rest xs)]\n;            (if (= n %2) \n;                (recur tail acc 1)\n;                (recur tail (conj acc (first xs)) (inc n))))))","user":"556f35fee4b09a3098a5251a"},{"code":"(fn [X Y] (\n              (fn [a c d]\n                (\n                  if(empty? a)\n                  d\n                  (\n                    if (= 0 (mod c Y))\n                    (recur (rest a) (inc c) d)\n                    (recur (rest a) (inc c) (conj d (first a)))\n                    )\n                  )\n                ) X 1 []\n              )\n    )","problem":41,"user":"528f82d8e4b0239c8a67aef4"},{"problem":41,"code":"#(loop [acc [] bank %1 z 1]\n   (if (empty? bank) acc\n     (if (= z %2)\n       (recur acc (rest bank) 1)\n       (recur (conj acc (first bank)) (rest bank) (inc z))\n       )))","user":"54cbd97ae4b057c6fda3a283"},{"code":"(fn [coll i] (keep-indexed #(if (zero? (mod (+ 1 %1) i)) nil %2) coll))","problem":41,"user":"51da565ae4b02ceefd947765"},{"code":"(fn [col n] \n  (mapcat #(if (< (count %) n)\n    %\n    (butlast %)) (partition-all n col)))","problem":41,"user":"4ef992c8535dced4c769f268"},{"code":"(fn [l, n]\n   ((fn dropN [l, n, x]\n      (let [\n            nextX\n            (if\n              (= x n)\n              1\n              (+ x 1))]\n      (cond\n       (empty? l)\n       l\n       (= x n)\n       (dropN\n        (rest l)\n        n\n        nextX)\n       :else\n       (cons\n        (first l)\n        (dropN\n         (rest l)\n         n\n         nextX)))))\n    l n 1))","problem":41,"user":"50d2fa5ce4b049d4ed5650cf"},{"problem":41,"code":"(fn [xs n]\n  (loop [ys xs\n         rs []\n         i 1]\n    (cond\n     (empty? ys) rs\n     (= 0 (mod i n)) (recur (rest ys) rs (inc i))\n     :else \t\t\t (recur (rest ys) (conj rs (first ys)) (inc i)))))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn [c pad] \n  (apply concat (map #(take (- pad 1) %) (partition-all pad c))))","problem":41,"user":"4ef89fb0535dced4c769f260"},{"problem":41,"code":"#(reduce (fn [acc [idx elem]] (if (zero? (rem idx %2))\n                                acc\n                                (conj acc elem))) [] (map-indexed (fn [idx e] [(+ 1 idx) e]) %1))","user":"504f9ae1e4b0a02f9cffde9c"},{"problem":41,"code":"(fn foo\n  [coll n] (if (empty? coll) coll (concat (take (dec n) coll) (foo (drop n coll) n))))","user":"5747e22ce4b009280f9f2b7c"},{"problem":41,"code":"(fn [coll n] \n  (map first \n       (filter #(not= n (last %)) \n               (map list coll \n                    (iterate #(inc (rem % n)) 1)))) )","user":"56b2573ce4b0982f16b37e02"},{"problem":41,"code":";This is lame! But also clever?\n#(flatten \n  (map drop-last \n       (partition %2 %2 \"a\" (seq %1))))","user":"5b2d1c1de4b025bcb146f2c0"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed (fn [idx elem] (if (= 0 (rem (inc idx) n)) nil elem)) coll))","user":"59f4c42ce4b0966464fe6ab6"},{"problem":41,"code":"(fn [l p]\n   (loop [xs  l\n          acc []]\n     (if (empty? xs)\n       acc\n       (recur (drop p xs)\n              (concat acc (take (dec p) xs))))))","user":"5eb1c786e4b00a66d4a95201"},{"problem":41,"code":"(fn drop-nth [s n]\n  (loop [cur s\n         counter 1\n         acc '()]\n    (if (empty? cur)\n        (reverse acc)\n        (if (= (rem counter n) 0)\n            (recur (rest cur)\n               (+ counter 1)\n               acc)\n            (recur (rest cur)\n               (+ counter 1)\n               (conj acc (first cur)))))))","user":"5578c67fe4b05c286339e08d"},{"problem":41,"code":"(fn [s n] (flatten (map-indexed #(if (not= 0 (mod (inc %) n)) [%2] []) s)))","user":"505106fee4b05ab4c7e07d38"},{"problem":41,"code":"(fn iter [s n]\n  (if (not-empty s)\n    (concat (take (- n 1) s) (iter (nthnext s n) n))))","user":"5195fadee4b04c0af7ff3c11"},{"code":"(fn hoge [coll n]\n\t(->> (cycle (range 0 n))\n\t     (map vector coll)\n\t     (keep #(when-not (= (second %) (dec n))\n\t\t\t\t(first %)))))","problem":41,"user":"52381b2ae4b0fae3832e99ef"},{"code":"(fn [coll n]\n  (->> (map #(list %1 %2) coll (iterate inc 1))\n       (filter #(not= 0 (rem (second %) n)))\n       (map first)))","problem":41,"user":"4e8c1d97535d65386fec2127"},{"problem":41,"code":"(fn [s n]\n  (->> (map vector\n            (range 1 (inc (count s)))\n            s)\n       (filter #(not=\n                 (mod (first %) n)\n                 0))\n       (map #(second %))))","user":"58d48df8e4b03c36ff7e5941"},{"problem":41,"code":"(fn dropnth \n  [xs n] (if (empty? xs) []          \n          (concat (take (dec n) xs) (dropnth (drop n xs) n)\n         )\n))","user":"58335c22e4b089d5ab817c9a"},{"problem":41,"code":"(fn [coll n]\n (for [[e idx] (map vector coll\n                           (map inc \n                            (range)))\n       :when (not= (rem idx n) 0)]\n      e) \n)","user":"549a999be4b0f3d1d8e70f6f"},{"code":"(fn [input-s n]\n  (reduce\n   (fn [a b] (into a b))\n   []\n   (map (fn [x] (if (= (count x) n) (take (- n 1) x) x))\n       (partition-all n input-s))\n   ))","problem":41,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn drop-nth\n\t[col n]\n\t(let [max (count col)]\n\t  (loop [result []\n\t\t i 1]\n\t    (if (> i max)\n\t      result\n\t      (if (= 0 (mod i n))\n\t\t(recur result (inc i))\n\t\t(recur (conj result (nth col (- i 1))) (inc i)))))))","problem":41,"user":"5339af7de4b0e30313ee6cab"},{"problem":41,"code":"#(keep-indexed (fn [idx val] (if (not= 0 (mod (+ idx 1) %2)) val)) %1)","user":"56ecc4b5e4b04a395b9a043e"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n       (partition-all n)\n       (map #(if (= (count %) n)\n                 (drop-last %) %))\n       (apply concat)))","user":"5e471203e4b043cd24807a2a"},{"problem":41,"code":"(fn [coll div](->> (partition-all div coll)\n                    (map (fn [subcoll] (if (= (count subcoll) div)\n                                      (butlast subcoll)\n                                      subcoll)))\n                    flatten))","user":"5bef3e88e4b0a6d31fed213f"},{"code":"(fn [xs n] \n  (mapcat \n    #(take (dec n) %)\n    (partition n n nil xs)))","problem":41,"user":"4df0524e535d08e6dec9fe17"},{"problem":41,"code":"(fn [li r]\n    (loop [n 1\n           out []\n           in li]\n      (if (empty? in)\n        out\n        (if (not= 0 (rem n r))\n          (recur (inc n)\n                 (conj out (first in))\n                 (rest in))\n          (recur (inc n) out (rest in))))))","user":"5603d057e4b0c80df0ca264e"},{"code":"(fn [col dropnth] (map last (filter (fn [j] (< 0 (mod (inc (first j)) dropnth))) (map-indexed (fn [idx i] [idx i]) col))))","problem":41,"user":"4f0e4ebd535d0136e6c22322"},{"code":"(fn [coll value]\r\n  (loop [s coll e (empty coll) i value]\r\n    (let [c (first s) r (rest s) j (dec i) drop? (= j 0)]\r\n      (if (nil? c) e \r\n        (if drop? \r\n          (recur r e value)\r\n          (recur r (conj e c) j))))))","problem":41,"user":"4dee4a9c535d08e6dec9fe11"},{"code":"(fn drop-nth [seq n]\n  (flatten \n    (if (> n (count seq)) \n        seq\n        (cons (take (- n 1) seq) (drop-nth (drop n seq) n)))))","problem":41,"user":"4f13047d535d64f60314642c"},{"problem":41,"code":"(fn [l n]\n  (->>\n   (partition-all n l)\n   (mapcat #(if (= (count %) n)\n           (drop-last %)\n           %))\n   \n   )\n  )","user":"4e28ddd1535deb9a81d77efd"},{"problem":41,"code":"(fn dropn [sq n] (when-let [s (seq sq)]\n             (concat (take (dec n) s) (dropn (drop n s) n))))","user":"58225587e4b04b46fc4b0f94"},{"code":"(fn [v n] (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n v))))","problem":41,"user":"51bdc609e4b0ff155d51d2b3"},{"problem":41,"code":"(fn\n  [s n]\n  (loop [result []\n         s s]\n    (if (>= (count s) n)\n      (recur (concat result (take (dec n) s)) (drop n s))\n      (concat result s))))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":41,"code":"(fn [s n] (keep-indexed #(if (not= (rem (inc %1) n) 0) %2) s))","user":"554dfe97e4b00713264bd98c"},{"problem":41,"code":"#(reduce concat (partition-all (dec %2) %2 % ))","user":"585481e0e4b07779d46863fe"},{"problem":41,"code":"(fn [a n] \n  (keep-indexed \n   #(if (not= (mod (inc %1) n) 0) %2) \n   a))","user":"56327168e4b0bfe05bf117a5"},{"problem":41,"code":"(fn [coll n]\n  (loop [[x & xs] coll\n         i 1\n         res []]\n    (cond (nil? x) res\n          (= i n) (recur xs 1 res)\n          :else (recur xs (inc i) (conj res x))\n    )\n  )\n)","user":"5d07989ee4b0cc9c915881fb"},{"code":"(fn [coll n]\n  (remove #(= 0 (mod (inc (.indexOf coll %)) n)) coll))","problem":41,"user":"4dbd2aa3535d020aff1edf40"},{"code":"(fn everyx[xs x]\n  (cond\n   (>= (count xs) x) \n   \t(concat (take (- x 1) xs) (everyx (nthrest xs x) x))\n   :else xs\n   ))","problem":41,"user":"4f23e1cde4b0d66497709fe4"},{"code":"#(apply concat (partition-all (- %2 1) %2 %))","problem":41,"user":"4e03c616535d04ed9115e796"},{"problem":41,"code":"(fn [s n] (->> (map list (range) s) (filter #(-> % first inc (mod n) ((complement zero?)))) (mapcat next)))","user":"54dd76c8e4b024c67c0cf794"},{"code":"#(mapcat (partial take (- %2 1)) (partition-all %2 %1))","problem":41,"user":"4e781a2e535d324fb2983d74"},{"problem":41,"code":"(fn [x y]\n  (keep-indexed #(if (not= (mod (+ %1 1) y) 0) %2) x))","user":"562d869be4b0a45d2ff8301f"},{"problem":41,"code":"#(mapcat butlast (partition %2 %2 \"a\" %1))","user":"53874820e4b06839e8705f1b"},{"code":"#(loop [c %1 acc [] n 1]\n     (let [s (seq c)]\n       (if (not s)\n         acc\n         (if (= (mod n %2) 0)\n           (recur (rest s) acc (inc n))\n           (recur (rest s) (conj acc (first s)) (inc n)) ))))","problem":41,"user":"4fe9231ce4b0547ebccb2445"},{"problem":41,"code":"(fn [coll interval]\n    ((fn drop-nth [index coll]\n       (let [s (seq coll)]\n         (when s\n           (if (= (mod (inc index) interval) 0)                         \n             (drop-nth (inc index) (rest s))\n             (cons (first s) (drop-nth (inc index) (rest s)))))))\n     0 coll))","user":"5bb25684e4b0a20761a2350d"},{"code":"(fn [xs n]\n  (keep-indexed #(if (pos? (rem (inc %1) n)) %2) xs))","problem":41,"user":"51db8244e4b0e067a9bbadc7"},{"problem":41,"code":"#(mapcat drop-last (partition %2 %2 [\"x\"] %1))","user":"5dcb1e73e4b02b31cc3da3b6"},{"problem":41,"code":"(fn [v n] (mapcat #(take (dec n) %) (partition-all n v)))","user":"56399b7ee4b0bfe05bf117f5"},{"code":"#(flatten (map (partial take (dec %2)) (partition-all %2 %)))","problem":41,"user":"4fa58500e4b081705acca1ae"},{"code":"(fn [coll n] (keep-indexed #(if (not= (mod (+ %1 1) n) 0) %2) coll))","problem":41,"user":"504f3fa3e4b0a02f9cffde62"},{"problem":41,"code":"(fn [ls n]\n  (keep-indexed #(if (> (mod (inc %1) n) 0) %2) ls))","user":"57de5f0ee4b0bd073c202450"},{"problem":41,"code":"(fn [xs n]\n         (->> xs\n              (map vector (range))\n              (filter #(not (= 0 (mod (inc (nth % 0)) n))))\n              (map #(nth % 1))\n              (apply vector)))","user":"5920c191e4b09b4ee5954c61"},{"problem":41,"code":"(fn [l n] (keep-indexed #(if (not (zero? (rem (inc %1) n))) %2) l))","user":"5e03475de4b0a607a9a45d58"},{"problem":41,"code":"(fn [x n] (loop [answer [] remaining x]\n           (if (empty? remaining) \n             (flatten answer)\n             (recur (conj answer (take (- n 1) remaining)) (drop n remaining)) )\n             )\n                     )","user":"542baf7ce4b0dad94371f291"},{"problem":41,"code":"(fn [c n] \n  (flatten\n   (map #(if (= (count %) n)\n             (drop-last %) %)\n         (partition-all n c))))","user":"5c56e264e4b0fb8c5ffd9a39"},{"problem":41,"code":"(fn [c n] (flatten (map-indexed #(if-not (zero? (mod (inc %) n)) [%2] []) c)))","user":"57c796b4e4b05aa3c4741d08"},{"problem":41,"code":"(fn [x y]\n     (loop [x x\n            z []]\n       (if (empty? x)\n         z\n         (recur (drop y x) (into z (take (dec y) x))))))","user":"5d5ef0bce4b0c9e5857d4ffb"},{"problem":41,"code":"#(mapcat rest (partition %2 %2 nil (cons nil %)))","user":"54af6fb0e4b09f271ff37d08"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed \n   #(if (not (= (mod (+ %1 1) n) 0))\n      %2) \n   coll))","user":"5a29ee57e4b09cafd31c7f2b"},{"problem":41,"code":"#(->> %1 (partition-all (dec %2) %2) flatten)","user":"59e5b6a1e4b08badc2a0c55b"},{"code":"(fn [coll n]\n  (keep-indexed #(if-not (zero? (rem (inc %1) n)) %2) coll))","problem":41,"user":"5338e33fe4b0e30313ee6ca1"},{"code":"(fn [coll n] (flatten (map #(if (= (count %) n) (butlast %) %) (partition-all n coll))))","problem":41,"user":"4f0404df535dcb61093f6b91"},{"problem":41,"code":"#(keep-indexed (fn [index item]\n                 (when (not= (mod index %2) (dec %2))\n                   item))\n               %1)","user":"58740c18e4b01531a375ea49"},{"code":"(fn [elements n]\n  (map last\n    (filter #(not= 0 (mod (first %) n))\n            (map-indexed #(list (+ 1 %1) %2) elements))))","problem":41,"user":"536f62aee4b0fc7073fd6e7c"},{"problem":41,"code":"(fn [xs i]\n  (map second\n    (remove #(zero? (mod (first %) i))\n   \t  (map vector (iterate inc 1) xs))))","user":"54d03026e4b018d918be98de"},{"problem":41,"code":"(fn nthist [coll n]\n  (flatten (map #(take (dec n) %) (partition-all n coll))))","user":"5619a388e4b053970a773afc"},{"code":"(fn drop-nth [col n]\n  (mapcat #(take (dec n) %) (partition-all n col)))","problem":41,"user":"51ba59e4e4b0fe3ecfb4642d"},{"problem":41,"code":"(fn ! [list n] (if (= 0 (count list))\n                  ()\n                  (concat (take (- n 1) list) (! (drop n list) n))))","user":"546fa7a7e4b00cfc9eacc1b1"},{"code":"(fn [l n] (concat (mapcat butlast (partition n l)) (take-last (rem (count l) n) l)))","problem":41,"user":"50e4a5a9e4b0cb9ec68fbca3"},{"problem":41,"code":"(fn [og d]\n  (loop [s og\n       memo []\n       c 1]\n      (if (empty? s)\n        memo\n        (if (zero? (mod c d))\n          (recur (rest s) memo (inc c))\n          (recur (rest s) (conj memo (first s)) (inc c))\n          ))))","user":"565233f2e4b0f9d632dd8461"},{"code":"(fn [coll n]\r\n  (into (empty coll) (mapcat identity (partition-all (dec n) n coll))))","problem":41,"user":"50ba4b9ee4b03e68e4411c7b"},{"problem":41,"code":"(fn problem41-drop-nth\n  [xs n]\n  (if (empty? xs)\n    ()\n    (into [] (concat (take (dec n) xs) (problem41-drop-nth (drop n xs) n)))))","user":"57717915e4b0979f896515b3"},{"problem":41,"code":"(fn [s n]  (keep-indexed (fn [k v] (when (not= (mod (inc k) n) 0) v)) s))","user":"582dc562e4b051871117bfcb"},{"code":"(fn [s n]\n  (loop [ret [] cur 1 s s]\n    (if (empty? s)\n      ret\n      (if (= cur n)\n        (recur ret 1 (rest s))\n        (recur (conj ret (first s)) (inc cur) (rest s))))))","problem":41,"user":"4fb4f42ae4b081705acca2b4"},{"problem":41,"code":"(fn drop-nth [sq n]\n  (loop [s sq a (list)]\n    (if (seq s)\n      (recur (drop n s) (concat a (take (dec n) s)))\n      a)))","user":"57aa053fe4b0b8559636fc61"},{"code":"#( loop[x %,y %2,m 1,n (count %)]\n             (if (> (* y m) n)\n                 x\n              (recur (concat (take (- (* y m) (- m 1) 1) x)\n                                         (drop (- (* y m) (- m 1)) x))\n                           y\n                           (inc m)\n                           n)))","problem":41,"user":"51c4690fe4b06b70b3e207e1"},{"code":"(fn d [s n]\n  (if (empty? s)\n    ()\n    (concat (take (dec n) s) (d (drop n s) n))))","problem":41,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":41,"code":"#(apply \n  concat \n  (partition-all \n   (dec %2) %2 %))","user":"5aa4b961e4b0d174b936c888"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (apply\n   concat\n   (partition\n    (dec n)\n    n\n    nil\n    coll)))","user":"51b01309e4b0c53cf2e68a57"},{"code":"(fn [s n] (mapcat #(if (= (mod (inc %) n) 0)\n[] [%2]) (range) s))","problem":41,"user":"50807940e4b01a93d3f38e44"},{"code":"(fn [seqs N] (flatten (partition-all (dec N) N seqs)))","problem":41,"user":"5162757ee4b03cfa3774b3fe"},{"problem":41,"code":"(fn remove_at_each_counter\n([values counter] (remove_at_each_counter values 1 counter))\n([values counter maximum] (\n  if (= nil (first values))\n    '()\n    (if (< counter maximum)\n      (conj (remove_at_each_counter (rest values) (+ counter 1) maximum) (first values) )\n      (remove_at_each_counter (rest values) 1 maximum)\n    )\n))\n)","user":"602bca69e4b0d5df2af22267"},{"problem":41,"code":"(fn \n\t[args index]\n\t(mapcat #(if (= (count %) index) (drop-last %) %)(partition-all index args))\n\t)","user":"59cd13d5e4b0ef0a1e9b5b32"},{"code":"#(keep-indexed (fn [i x] (when (not= (- %2 1) (mod i %2)) x)) %1)","problem":41,"user":"51b3f109e4b0f094dd986fa9"},{"problem":41,"code":"#(reverse\n  (loop [l %1 i 1 r '()]\n     (cond\n       (empty? l) r\n       :else (recur\n               (rest l)\n               (rem (inc i) %2)\n               (cond\n                 (not= (rem i %2) 0 ) (conj r (first l))\n                 :else r\n                 )\n               )\n       )\n    )\n  )","user":"5e7aba9fe4b085ba37836e0c"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(if (= n (count %)) (butlast %) %)\n          (partition n n nil coll)))","user":"59b1c2eae4b0e1f4e384c8ec"},{"code":"(fn [col step]\n  (keep-indexed \n   (fn [idx item]\n     (if-not (= 0 (mod (+ idx 1) step)) item)) col))","problem":41,"user":"513cb853e4b0b86ece9f322b"},{"problem":41,"code":"(fn [x n]\n  (loop [r [] l x]\n    (if (not (empty? l))\n        (recur (into r (take (- n 1) l)) (drop n l))\n        r\n    )\n  )\n)","user":"5515649fe4b055c2f668d4e3"},{"problem":41,"code":"#(mapcat \n  (fn [item] \n    (if (= %2 (count item)) \n      (drop-last item)\n      item\n      )) \n  (partition-all %2 %1))","user":"55dbed2fe4b050e68259b3a6"},{"problem":41,"code":"(fn [coll n]\n    (loop [c coll r []]\n      (let [h (take (dec n) c)\n            t (drop n c)\n            nr (concat r h)]\n        (if (empty? t)\n          nr\n          (recur t nr)))))","user":"5a536cf2e4b05d388ecb6c10"},{"problem":41,"code":"(fn drops [s n]\n  (keep-indexed #(if (not= (mod %1 n) (dec n)) %2) s))","user":"607dd962e4b03d835a6eaed2"},{"problem":41,"code":"(fn [aa n]\n(->>\n(partition-all n aa)\n(mapcat #(take (dec n) %))\n\n    \n    \n)\n)","user":"5619a4d0e4b053970a773afd"},{"code":"(fn [x y] (flatten (partition-all (- y 1) y x)))","problem":41,"user":"52016690e4b0b2e020a18f0f"},{"code":"(fn [a n] (if (< n 2) [] (reduce into (for [x (partition n n [] a)] (subvec (vec x) 0 \n                                                                            (min (- n 1) (count x))\n                                                                            )))))","problem":41,"user":"505caadfe4b0bcb5664c3d3e"},{"code":"(fn dropn[s x]\n  (flatten (map #(if(= (count %) x) (drop-last %) %) (partition x x nil s)))\n)","problem":41,"user":"52d42021e4b09f7907dd132a"},{"problem":41,"code":"(fn [seq' n]\n  (loop [remaining-seq seq'\n         result []\n         index 1]\n    (let [[head & tail] remaining-seq\n          new-index (inc index)]\n      (cond\n       (empty? remaining-seq) result\n       (zero? (mod index n)) (recur tail result new-index)\n       :else (recur tail (conj result head) new-index)))))","user":"567bf820e4b05957ce8c61ad"},{"code":"#(flatten(partition-all(dec%2)%2%1))","problem":41,"user":"4e7eff9e535db966e863cc38"},{"code":"#(loop [cur %1 res [] i 1]\n   (if (empty? cur)\n    res\n    (if (= 0 (mod i %2))\n     (recur (next cur) res (+ i 1))\n     (recur (next cur) (conj res (first cur)) (+ i 1)))))","problem":41,"user":"4eb2a89d535d7eef3080734c"},{"code":"(fn [coll n]\n  (remove nil? (mapcat butlast (partition n n (repeat (dec n) nil) coll))))","problem":41,"user":"4fdb881ee4b05e33b9224f5e"},{"problem":41,"code":"(fn removenth [a n]\n(loop [ remaining a finalresult [] ]\n  (if (empty? remaining)\n    (do\n      finalresult\n    )\n    (let [part (take (dec n) remaining) \n          rem (drop n remaining)]\n        (recur rem (into finalresult part))\n     )\n   )\n  )\n )","user":"5ac92dc3e4b0e27600da77bf"},{"problem":41,"code":"; using keep function keep-indexed\n; (fn [col n] (keep-indexed (fn [index item] (if (not= 0 (mod (inc index) n)) item nil)) col))\n\n; using recursion\n(fn [x n] \n   (loop [x x\n          n n\n          index 1\n          return []]\n     (if (empty? x)\n       return\n       (if (= (mod index n) 0)\n         (recur (rest x) n (inc index) return)\n         (recur (rest x) n (inc index) (conj return (first x)))\n         ))))","user":"57c44053e4b05aa3c4741ccb"},{"problem":41,"code":"(fn[a n] (filter #(not (nil? %)) (map-indexed #(if (zero? (mod (+ %1 1) n)) nil %2) a)))","user":"58d96bdce4b0a4d5acaab638"},{"problem":41,"code":"(fn [sequence n] (keep-indexed (fn [index item] (when (not= 0 (mod (+ index 1) n)) item)) sequence))","user":"535558b9e4b04ce2eb3ed25a"},{"problem":41,"code":"(fn drop-every-n [coll n]\n   (keep-indexed\n    (fn [index value]\n      (if (not= 0 (rem (inc index) n))\n        value))\n    coll))","user":"58a2b57fe4b02bd94d917ede"},{"code":"(fn o [ l indx]\n\t    ((fn i [l c indx cnt]\n\t        (if (empty? l) \n\t             c\n\t        (if (and (not= 1 cnt) (= 0 (mod cnt indx)) )\n\t           (i (rest l) c indx (inc cnt))\n\t        (i (rest l) (conj  c (first l) ) indx (inc cnt)) ) ) ) l [] indx 1) )","problem":41,"user":"530c15f7e4b02e82168697d6"},{"code":"(fn drop-e-nth2 [xs n]\n  (keep-indexed (fn [x y] (if (= (mod (inc x) n) 0)\n                  nil\n                  y)) xs))","problem":41,"user":"50fe2420e4b03cd852b4e84a"},{"code":"(fn [c n] (keep-indexed \n  #(if (not= 0 (mod (inc %1) n)) %2) c))","problem":41,"user":"4e976daa535dbda64a6f6b54"},{"problem":41,"code":"(fn [l n] (flatten (partition (- n 1) n [] l)))","user":"5647dc44e4b0284900eef624"},{"problem":41,"code":"(fn [coll pos] (remove nil? (map-indexed (fn [idx itm] (if (not= (- pos 1) (rem idx pos)) itm)) coll)))","user":"5b7ed20fe4b047b03b203760"},{"problem":41,"code":"(letfn [(f [l n]\n           (if (seq l)\n             (let [start (take (dec n) l)\n                   end (drop n l)]\n               (into (f end n) (reverse start)))\n             l))]\n  f)","user":"540470dae4b0addc1aec6658"},{"code":"(fn [se sp]\n   (for [[n x]\n         (map vector (range) se)\n         :when (> (mod (+ n 1) sp) 0)] x))","problem":41,"user":"4fa07a93e4b0dcca54ed6d4d"},{"problem":41,"code":"(fn [seq n]\n   (keep-indexed #(when (not= 0 (mod (inc %1) n)) %2) seq))","user":"5e980583e4b0157ca96647d5"},{"problem":41,"code":"#(keep-indexed\n          (fn [idx itm]\n            (when-not (= 0 (mod (+ 1 idx) %2))\n              itm)) %1)","user":"56d6c18ee4b0ea9b8538f7d1"},{"code":"(fn drop-every-nth [lat n]\n                          ((fn drop-every-nth [lat n so-far]\n                             (if (empty? lat) ()\n                             (if (= so-far n) \n                               (drop-every-nth (rest lat) n 1)\n                               (cons (first lat) (drop-every-nth (rest lat) n (inc so-far)))\n                             ))) lat n 1))","problem":41,"user":"514cc029e4b019235f6c057c"},{"problem":41,"code":"(fn [xs n]\n  (loop [res [] ind 1 x xs]\n    (if (empty? x)\n      res\n      (recur (if (= 0 (mod ind n))\n               res\n               (conj res (first x)))\n             (inc ind)\n             (next x)))))","user":"553b87abe4b09218d5f45003"},{"problem":41,"code":"#(loop [l %1 o [] i 0]\n        (if (not (empty? l))\n            (recur\n                (rest l)\n                (if (< (mod i %2) (- %2 1))\n                    (conj o (first l))\n                    o)\n                    (inc i))\n            o))","user":"5b083513e4b0cc2b61a3bdb4"},{"code":"(fn [s c] (mapcat (partial #(if (= (count %2) %) (butlast %2) %2) c) (partition-all c s)))","problem":41,"user":"52a5f1e6e4b0c58976d9abf4"},{"problem":41,"code":"(fn [coll n]\n  (apply concat (map drop-last (partition n n \"a\" coll))))","user":"5eb1a80ce4b00a66d4a951ff"},{"code":"(fn drop-nth\n  [col n]\n  (lazy-seq (when-let [s (seq col)]\n              (concat\n                (take (dec n) s) (drop-nth (drop n s) n))\n              ))\n  )","problem":41,"user":"4e44358f535dc968683fc4a8"},{"problem":41,"code":"(fn [s n] (map (fn [[idx e]] e) (filter (fn [[idx e]] (not= (mod (inc idx) n) 0) )\n         \t(map-indexed (fn [idx e] [idx e]) \n       \t\ts)\n\t\t))\n)","user":"5708b96ce4b0b0fb43fd06a3"},{"code":"(fn [c k]\n      (mapcat (partial take (dec k))\n              (partition-all k c)))","problem":41,"user":"52d7f9a8e4b09f7907dd1381"},{"code":"(fn [l step]\n    (flatten (map drop-last (partition step step (take (dec (rem (count l) step)) (reverse l)) l))))","problem":41,"user":"4fbdcb87e4b081705acca30a"},{"problem":41,"code":"(fn [coll n]\n (loop [res [] s (partition-all n coll)]\n   (if (empty? s)\n     res\n        \t(recur (concat res (take (dec n) (first s))) (rest s))\n\n     )\n   ) \n )","user":"602cc4d4e4b0d5df2af22274"},{"code":"(fn [s n]\n  (loop [s s\n         i 1\n         r []]\n  \t(if (nil? s)\n    \tr\n    \t(if (zero? (rem i n))\n      \t\t(recur (next s) (inc i) r)\n      \t\t(recur (next s) (inc i) (conj r (first s)))))))","problem":41,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":41,"code":"(fn f [coll n]\n   (reduce-kv\n    (fn [vc k v]\n      (if (not= (rem (inc k) n) 0)\n        (conj vc v)\n        vc))\n    []\n    coll))","user":"60537cd1e4b04c8f2157d152"},{"problem":41,"code":"(fn [a b]\n    (mapcat #(if (= (count %) b) (drop-last %) %)(partition-all b a)))","user":"5c73a944e4b0fca0c16227b8"},{"code":"(fn [s k]\n  ((fn drop-internal [[first & rest] n l]\n     (let [newL (if (= n l) 1 (+ l 1))]\n       (let [sr (if (nil? rest) nil (drop-internal rest n newL))]\n         (if (= n l)\n           sr\n           (cons first sr)\n           )\n         )\n       )\n    ) s k 1)\n  )","problem":41,"user":"5349a39de4b084c2834f4a65"},{"code":"(fn *every-nth                                                                                                                                         \n  [coll n]                                                                                                                                                    \n  (mapcat #(take (dec n) %) (partition n n (empty coll) coll)))","problem":41,"user":"4e3bcccd535deb9a81d77f56"},{"problem":41,"code":"#(apply concat (map drop-last (partition %2 %2 [nil] %1)))","user":"55b1e9e7e4b0da326a65cf74"},{"problem":41,"code":"(fn [coll n] \n  (flatten \n   (partition-all (dec n) n coll)))","user":"539eb153e4b0ca733b97448e"},{"problem":41,"code":"(fn pb41\n  [xs a]\n  (if (empty? xs)\n    []\n    (concat (take (dec a) xs) (pb41 (drop a xs) a))))","user":"608135c8e4b0736b099e42d1"},{"problem":41,"code":"(fn [liste rang]\n   (loop [rliste liste result () i 1]\n    (if (empty? rliste)\n      (reverse result)\n      (if (zero? (mod i rang))\n          (recur (rest rliste) result (inc i))\n          (recur (rest rliste) (conj result (first rliste)) (inc i))\n      )\n    )  \n   )\n)","user":"556f2009e4b09a3098a52519"},{"problem":41,"code":"#(reverse (loop [neue [] acc %1 enum (- %2 1) ] \n   (cond\n    \t(empty? acc) neue\n    \t(= 0 enum) (recur neue (drop 1 acc) (- %2 1)) \n    \t:else\n    \t(recur (cons (first acc) neue) (drop 1 acc) (- enum 1))\n    )))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"(fn [x y]\n    (letfn [(drop [s n c r]\n       (if (empty? s) \n          r\n          (drop (rest s) n (inc c) \n                (if (= (mod c n) 0) \n                  r                   \n                  (concat r (list (first s)))))))]\n          (drop x y 1 '())))","problem":41,"user":"4f03193e535dcb61093f6a61"},{"problem":41,"code":"#(flatten (reduce (fn [acc nxt]\n          (if (= (count nxt) %2)\n            (conj acc (drop-last nxt))\n            (conj acc nxt))\n          ) [] (partition %2 %2 nil %1)))","user":"5632abbee4b0bfe05bf117a7"},{"code":"(fn drop-nth \n  ([list-val step]\n    (drop-nth list-val step []))\n  ([list-val step new-list]\n    (if (empty? list-val)\n      new-list\n      (drop-nth\n        (drop step list-val)\n        step\n        (concat new-list\n          (take (- step 1) list-val))))))","problem":41,"user":"4f03818e535dcb61093f6b00"},{"problem":41,"code":"(fn [xs y] (remove #(= 0 (rem (inc (.indexOf xs %)) y)) xs))","user":"568c2d96e4b0dcc4269f40af"},{"code":"(fn [s n]\n  ((fn drop_tail [s n i]\n    (cond\n      (nil? s) '()\n      (= n i) (drop_tail (next s) n 1)\n      :else (conj (drop_tail (next s) n (+ i 1))\n                  (first s)))) s n 1))","problem":41,"user":"4e444c11535dc968683fc4a9"},{"code":"(fn foo\n  [col n]\n    (keep-indexed\n      #(if (not= 0 (mod (inc %) n)) %2)\n      col))","problem":41,"user":"4f387c2ee4b0e243712b1edd"},{"code":"(fn f [coll n]\n  (if (empty? coll)\n    coll\n    (concat (take (dec n) coll)\n            (f (drop n coll) n))))","problem":41,"user":"4e113a81535d04ed9115e7c5"},{"problem":41,"code":"(fn [s v]\n  (letfn [(f1 [_s]\n              (if (empty? _s)\n                '()\n              \t(cons (seq (take (dec v) _s)) (f1 (drop v _s)))))]\n  (flatten (f1 s))))","user":"58f273d9e4b08e1cf3471d01"},{"problem":41,"code":"(fn [x y] (->> (partition y y [\"a\"] x)\n                      (mapcat #(drop-last %))\n                      (take (count x))))","user":"579ea15ee4b05b1deef9ae2a"},{"problem":41,"code":"(fn [coll i]\n  (keep-indexed\n   #(if ((complement zero?) (rem (inc %1) i))\n      %2)\n   coll))","user":"59e0f38ae4b08badc2a0c500"},{"problem":41,"code":"(fn [xs a]\n  (mapcat #(take (dec a) %) (partition-all a xs)))","user":"58171a9ae4b0c0e9c07b8387"},{"problem":41,"code":"#(->> %1 (partition-all %2) (mapcat (fn[x] (take (dec %2) x))))","user":"4f7b6f12e4b06e829148e1a5"},{"problem":41,"code":"(fn dropNth [xs n]\n  (if (empty? xs) \n      '()\n      (concat (take (- n 1) xs) (dropNth (drop n xs) n))))","user":"5aa5951ae4b0d174b936c899"},{"code":"(fn fo [a n]\n    (if (< (count a) n )\n    \ta\n    \t(vec (concat (subvec a 0 (dec n)) (fo (subvec a n) n)))))","problem":41,"user":"515ff4b9e4b0e2be8aa20bd9"},{"code":"(fn [l n]\n  (loop [r [] w l i 1]\n    (if (empty? w)\n      r\n      (if (= 0 (mod i n))\n        (recur r (rest w) (inc i))\n        (recur (conj r (first w)) (rest w) (inc i))))))","problem":41,"user":"4f77b68de4b0fbe0118ec581"},{"problem":41,"code":"#(loop [s %1, r []]\n   (if (seq s)\n\t   (let [[p1 p2] (split-at (dec %2) s), p2 (rest p2)] (recur p2 (concat r p1)))\n\t\tr))","user":"58923efce4b00487982d521c"},{"code":"(fn [coll n]\n  (pop (reduce \n   (fn [col item]\n     (if (= (peek col) n)\n       (conj (pop col) 1)\n       (conj (pop col) item (inc (peek col)))))\n   [1]\n   coll)))","problem":41,"user":"52fb903ee4b047fd5583700b"},{"problem":41,"code":"(fn [a b] (map second (remove #(= 0 (rem (inc (first %)) b)) (map-indexed vector a))))","user":"58273e82e4b051871117bf1b"},{"code":"#(keep-indexed(fn[a b](when(not=(dec %2)(mod a %2))b))%1)","problem":41,"user":"4f08b15b535dcb61093f6c40"},{"problem":41,"code":"(fn [v n]\n  (->> v\n       (map-indexed (fn [i item]\n                      (when-not (zero? (mod (+ i 1) n)) item)))\n       (remove nil?)))","user":"50493b52e4b06e84b772a23e"},{"problem":41,"code":"(fn [l n]\n  (for [i (filter #(not= (dec n) (rem % n)) (range (count l)))]\n    (nth l i)))","user":"59fedc26e4b01bb0ae8afd17"},{"code":"(fn [seq n]\n  (loop [s seq rslt []]\n    (if (empty? s) \n      rslt\n      (recur (drop n s) (concat rslt (take (dec n) s))))))","problem":41,"user":"4e7d1c22535db169f9c796c5"},{"code":"(fn drop-nth [seq n] (if (empty? seq) () (concat (take (- n 1) seq) (drop-nth (drop n seq) n))))","problem":41,"user":"5268eb68e4b03e8d9a4a71c6"},{"problem":41,"code":"(fn [lst n]\n    (keep-indexed #(if(not(zero?(mod (inc %1)n)))%2)lst))","user":"5f74de11e4b02876ed9fd0a5"},{"problem":41,"code":"(fn dropnth [sequ n]\n  (flatten (map-indexed (fn [idx valu] (if (= 0 (mod (+ 1 idx) n)) [] valu))\n    sequ\n  ))\n)","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":41,"code":"(fn dropnth [s n]\n  (loop [mseq s index 0 result '()]\n    (if (empty? mseq)\n      result\n      (recur\n        (rest mseq)\n        (inc index)\n        (if (= (mod index n) (dec n))\n          result\n          (concat result (list (first mseq)))\n          )\n\n        )\n      )\n    )\n  )","user":"56826c2fe4b0945ebc182a92"},{"code":"#(filter\n  (complement nil?) (map-indexed\n                            (fn [idx itm] \n                              (when (not= 0 (mod (+ idx 1) %2) ) itm)) %1))","problem":41,"user":"4de52c87535d08e6dec9fdf0"},{"problem":41,"code":"(fn f [x n] (if (empty? x) x (concat (take (dec n) x) (f (drop n x) n))))","user":"566470b9e4b0e91d5f5c5658"},{"code":"(fn [col n] (loop [lst col rslt [] ind 0]\n                (if (seq lst)\n                  (if (not (zero? (mod (+ ind 1) n)))\n                      (recur (rest lst)\n                             (conj rslt (first lst))\n                             (inc ind))\n                      (recur (rest lst) rslt (inc ind)))\n                  rslt)))","problem":41,"user":"4f9754d4e4b0dcca54ed6ce9"},{"code":"#(filter identity (map (fn [v1 v2] \r\n  (if (not= 0 (rem v2 %2)) v1)) %1 (iterate inc 1)))","problem":41,"user":"4def301c535d08e6dec9fe12"},{"problem":41,"code":"(fn drop-nth [ls n]\n  (if (empty? ls)\n    ls\n    (concat (take (- n 1) ls)\n            (drop-nth (drop n ls) n))))","user":"524e79c1e4b0541d1855b7e0"},{"code":"(fn drop-nth [s n]\n    (if (> (count s) (dec n))\n      (concat (take (dec n) s) (drop-nth (drop n s) n))\n      s))","problem":41,"user":"4e89f46c535d3e98b8023288"},{"problem":41,"code":"(fn drop-nth\n  [s n]\n  (loop [result [] d s]\n    (if (empty? d)\n      (seq result)\n      (recur (concat result (take (dec n) d)) (drop n d)))))","user":"5746cb28e4b009280f9f2b68"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (if (< (count coll) n)\n    coll\n    (concat (take (dec n) coll)\n            (drop-every-nth (drop n coll) n))))","user":"56ba1406e4b0f2655033593c"},{"code":"(fn my-drop-nth [col n]\n  (lazy-seq\n    (let [els (take (dec n) col)]\n      (if (seq els)\n        (concat els (my-drop-nth (drop n col) n))\n        nil))))","problem":41,"user":"4e7f8f85535db966e863cc44"},{"problem":41,"code":"(fn remove-nth [col nth] ((fn rec [next agg] (\n                                   if (< (count next) nth)\n                                   (into agg next)\n                                   (rec (drop nth next) (into agg (take (- nth 1) next)))\n                                   )) col []))","user":"5c6e8b57e4b0fca0c1622755"},{"code":"#(loop[i 1,lst %1,ret []](if(empty? lst) ret (recur(inc i)(rest lst)(if (= (mod i %2)  0) ret (conj ret (first lst))))) )","problem":41,"user":"4ec75829535d6d7199dd36e1"},{"code":"#(flatten (partition (- %2 1) %2 [] %))","problem":41,"user":"4eebfd03535d93acb0a668ab"},{"problem":41,"code":"(fn \n    [s n]\n    (loop\n        [i 0 \n         v n \n         r '()]\n        (cond\n            (= i (count s)) (reverse r)\n            (= i (dec v)) (recur (inc i) (+ v n) r)\n            :else\n            (recur (inc i) v (conj r (nth s i)))\n            )\n        )\n    )","user":"6074f5ede4b069485764de52"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (loop [acc []\n         [x & rest] xs\n         c 1]\n    (cond\n      (nil? x)\n      acc\n      (= c n)\n      (recur acc rest 1)\n      :else\n      (recur (conj acc x) rest (inc c)))))","user":"605b49b7e4b079a07f8593f8"},{"problem":41,"code":"(fn\n  [seq n]\n  (loop [iterator 1 newseq []]\n    (if (<= iterator (count seq) )\n      (if (not= 0 (rem iterator n))\n        (recur (inc iterator) (conj newseq (nth seq (dec iterator)) ) )\n        (recur (inc iterator) newseq)\n      )\n      newseq\n)\n))","user":"5772ddb0e4b0979f896515d4"},{"code":"(fn [s1 n1]\n\t(second (reduce\n     \t(fn [x y]\n        \t(if (= (first x) n1)\n            \t[1 (second x)]\n              \t[(inc (first x)) (conj (second x) y)]\n            )\n        )\n     \t[1 []] s1\n    ))\n)","problem":41,"user":"525ba7bbe4b0cb4875a45d28"},{"problem":41,"code":"(fn dropa [s n]\n  (if (first s)\n    (concat []\n            (take (- n 1) s)\n            (dropa (rest (drop (- n 1) s)) n))\n    []))","user":"54530382e4b0e397800069cc"},{"code":"(fn[s, n]\r\n  (flatten (map (fn[x] (if (>= (count x) n) (drop-last x) x)) (partition-all n s))))","problem":41,"user":"4fb4ca71e4b081705acca2b0"},{"problem":41,"code":"(fn [sq n]\n  (loop [s sq out [] i 1]\n    (cond (empty? s) out\n          (zero? (rem i n))\n          \t(recur (rest s) out (inc i))\n          true (recur (rest s) (conj out (first s)) (inc i)))))","user":"55c68089e4b0e31453f649c4"},{"code":"(fn\n  [numbers skip]\n    (loop [count 1, results [], xs numbers]\n      (if (nil? xs)\n        results\n        (if (< count skip)\n          (recur (inc count) (conj results (first xs)) (next xs))\n          (recur 1 results (next xs))))))","problem":41,"user":"4eddc5f4535d10e5ff6f532c"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (filter (comp not nil?)\n          (map-indexed\n           (fn [i x]\n             (if (= 0 (mod (inc i) n))\n               nil\n               x)) xs)))","user":"5fb46916e4b08cb800c85b46"},{"problem":41,"code":"(fn  [s n]\n  (keep-indexed \n   (fn [i,v]\n     (if (not= 0 (mod (inc i) n))\n       v\n       nil))\n   s))","user":"5632d1b3e4b0bfe05bf117a9"},{"problem":41,"code":"(fn [data,n] \n  (map #(nth % 0) (filter #(not= (- n 1) (mod (nth % 1) n)) \n     (map #(vector %1 %2) data (range)))))","user":"5933b736e4b072a2710fd05d"},{"problem":41,"code":"(fn [in sep]\n  (loop [new [] cnt 1]\n    (if (> cnt (count in))\n      new\n      (if (= (mod cnt sep) 0)\n        (recur new (inc cnt))\n        (recur (conj new (in (dec cnt))) (inc cnt))\n      )\n    )\n  )\n)","user":"5a244240e4b0ff51aa4b32e9"},{"problem":41,"code":"(fn [l n] (keep-indexed (fn [i x] (if (not= 0 (mod (+ 1 i) n)) x)) l))","user":"57395f32e4b0cd1946bd1070"},{"code":"(fn [xs ind]\n  (filter #(not= (mod (.indexOf xs %) ind)\n                 (dec ind))\n          xs))","problem":41,"user":"4fed24a5e4b0681fd128dcaf"},{"problem":41,"code":"(fn [seq n]\n  (mapcat #(take (dec n) %) (partition n n nil seq)))","user":"516064e5e4b009fba0926e26"},{"code":"(fn drop-every-n [col n] \r\n  (keep-indexed \r\n    (fn [index item] \r\n      (if\r\n        (not= 0 (mod (inc index) n))\r\n          item \r\n          nil))\r\n    col))","problem":41,"user":"4e944706535dbda64a6f6b11"},{"problem":41,"code":"(fn [coll n]\n  (flatten\n   (concat (map #(drop-last %) (partition n coll))\n           (drop (- (count coll) (rem (count coll) n)) coll))))","user":"54caaa48e4b057c6fda3a267"},{"code":"(fn [s n]\r\n  (reverse ((fn [s res c]\r\n              (if (nil? s)\r\n                res\r\n                (if (= 1 c)\r\n                  (recur (next s) res n)\r\n                  (recur (next s) (cons (first s) res) (dec c))))) s nil n)))","problem":41,"user":"4f359c7ee4b0e243712b1ec4"},{"problem":41,"code":"(fn f [x n] (when x (lazy-cat (take (dec n) x) (f (nthnext x n) n))))","user":"58ac513fe4b0005cfeb1a746"},{"code":"#((fn this [l i] \n  (cond \n    (nil? l) '()\n    (= (mod i %2) 0) (this (next l) (inc i))\n    true (cons (first l) (this (next l) (inc i))))) %1 1)","problem":41,"user":"4fad89f0e4b081705acca23b"},{"problem":41,"code":"(fn drop-nth [col n]\n   (->> (partition-all n col)\n        (mapcat #(if (= n (count %))\n                   (drop-last %)\n                   %))\n        )\n   )","user":"4f2a7174e4b0d6649770a03e"},{"problem":41,"code":"(fn [input nthItem]\n  (loop [result '() currentInput input step 1]\n    (if (empty? currentInput)\n       (reverse result)\n       (recur\n          (if (= (mod step nthItem) 0)\n             result\n             (conj result (first currentInput))\n          )\n          (rest currentInput)\n          (inc step)\n       )\n    )\n  )\n)","user":"506af7d8e4b0a2a5463de37d"},{"problem":41,"code":"(fn [a b] \n   (mapcat #(take (dec b) %1)(partition-all b a))\n   )","user":"5dbb5200e4b09f47823971a9"},{"problem":41,"code":"#(loop [idx 0\n         result []]\n   (if (get % idx)\n       (if (= (mod idx %2) (- %2 1))\n           (recur (inc idx) result)\n         (recur (inc idx) (conj result (get % idx)))\n         ) result\n     )\n   )","user":"5d5b2678e4b06a698e928ee2"},{"code":"; use keep-indexed\n(fn [lst x] (mapcat (partial take (- x 1)) (partition-all x lst)))","problem":41,"user":"4ebaf790535dfed6da9c6d6e"},{"problem":41,"code":"#(for [i (range (count %1))\n       :when (> (rem (inc i) %2) 0)]\n   (nth %1 i))","user":"556159fae4b0c656e3ff17c7"},{"problem":41,"code":"(fn [arr n] (mapcat #(take (dec n) %) (partition-all n arr)))","user":"5dd1fb19e4b0948ae9d9ad51"},{"code":"(fn [c i] (mapcat #(butlast %) (partition i i [nil] c)))","problem":41,"user":"52046600e4b0c283853240c5"},{"problem":41,"code":"(fn [coll n]\n    (mapcat #(if (= (count %) n) (butlast %) %) \n            (partition-all n coll)))","user":"5f56c0cae4b0a0bc16850a8c"},{"code":"(fn [c n] (keep-indexed #(if (pos? (mod (inc %) n)) %2) c))","problem":41,"user":"506e0e5ae4b09350ab4199eb"},{"code":"(fn [xs n]\n  (->> xs\n       (map vector (map inc (range)))\n       (filter #(not (zero? (mod (first %) n))))\n       (map second)))","problem":41,"user":"5344fe13e4b084c2834f4a32"},{"problem":41,"code":"(fn dropEvery1 [coll n]\n  (reduce concat\n    (map #(take (dec n) %)\n      (partition n n nil coll))))","user":"50c6052ce4b0c9dc10d15c56"},{"code":"(fn [v n]\n  (map \n    v \n    (map dec (filter #(not= 0 (rem % n)) \n                     (range 1 (inc (count v)))))))","problem":41,"user":"4e94a8b5535dbda64a6f6b16"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed #(if (not= 0 (mod (+ %1 1) n)) %2) s))","user":"557a2891e4b05c286339e09f"},{"problem":41,"code":"#(loop[[x & xs] %1\n        n 1\n        res '()]\n    (cond\n      (nil? x) (reverse res)\n      (= n %2) (recur xs 1 res)\n      :else\n      (recur xs (inc n) (cons x res))))","user":"56acfee5e4b03c432f18734f"},{"problem":41,"code":"(fn drop-nth [s nth]\n  (flatten (map #(if (= (count %) nth)\n                   (drop-last %)\n                   %)\n                (partition-all nth s))))","user":"58ee9b14e4b056aecfd47db0"},{"problem":41,"code":"#(keep-indexed (fn [i v] (if (not= 0 (rem (inc i) %2)) v)) %1)","user":"54cbe00ee4b057c6fda3a285"},{"code":"(fn [coll n]\n  (mapcat #(take (dec n) %) (partition-all n coll)))","problem":41,"user":"4f49e869e4b0d56e7bb92c02"},{"code":"(fn [coll s] (remove nil? (map-indexed #(if (zero? (mod (inc %1) s)) nil %2) coll)))","problem":41,"user":"4e976f79535dbda64a6f6b55"},{"code":"(fn p41 [ys y]\n  (if (empty? ys)\n    ys\n    (concat (take (dec y) ys)\n      (p41 (drop y ys) y))))","problem":41,"user":"4f94d3a5e4b0dcca54ed6cc5"},{"code":"(fn [xs n] (map first (filter #(not= n (last %)) (map list xs (cycle (range 1 (+ 1 n)))))))","problem":41,"user":"52741177e4b03e8d9a4a749b"},{"problem":41,"code":"(fn [lst n]\n  \t(loop [l lst nl [] count 1]\n      (if (empty? l)\n        \tnl\n        \t(recur  (rest l) \n        \t        (if (= count n) nl (conj nl (first l)))\n                  (if (= count n) 1 (+ count 1))))))","user":"56483f45e4b0284900eef62b"},{"code":"(fn [x y]\n  (loop [result [] seq x]\n    (if (empty? seq)\n      result\n    (recur (vec (concat result (if (>= (count seq) y) (subvec seq 0 (- y 1))\n                        seq)))\n           (if (> (count seq) y) (vec (subvec seq y)) [])))))","problem":41,"user":"50517ebfe4b0a561d07d8f06"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) coll))","user":"5450c81fe4b0e397800069a4"},{"code":"(fn [xs n]\n  (loop [acc [], xs xs]\n    (if (seq xs)\n      (let [[prefix suffix] (split-at (dec n) xs)]\n        (recur (into acc prefix) (rest suffix)))\n      acc)))","problem":41,"user":"5339c105e4b0e30313ee6cae"},{"code":"(fn [c m]\n  (loop [i 0 result []]\n    (if (< i (count c))\n      (if (= (mod (inc i) m) 0)\n        (recur (inc i) result)\n        (recur (inc i) (conj result (nth c i))))\n      result)))","problem":41,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":41,"code":"(fn [coll- x]\n    (loop [acc (empty coll-)\n           rem- coll-\n           index 1]\n      (if (zero? (mod index x))\n        (recur acc (next rem-) (inc index))\n        (if (empty? rem-)\n          acc\n          (recur (conj acc (first rem-)) (next rem-) (inc index))))))","user":"54e79094e4b024c67c0cf818"},{"code":"(fn [col n]\n  (->> col \n    (partition-all n)\n    (mapcat (partial take (dec n)))))","problem":41,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) coll))","user":"5f274aeee4b0857314092c92"},{"problem":41,"code":"(fn [a-seq n]\n  (loop [new-seq '()\n         the-rest a-seq]\n    (if (empty? the-rest)\n      new-seq\n      (recur (concat new-seq (take (- n 1) the-rest)) (drop n the-rest)))))","user":"5235493ee4b05e80434a5064"},{"code":"(fn [c v] (keep-indexed #(if (not= 0 (rem (inc %1) v)) %2) c))","problem":41,"user":"4f7207d3e4b07046d9f4f019"},{"code":"(fn [x n] (flatten (partition-all (dec n) n x)))","problem":41,"user":"4e6472b7535d8ccf87e9fe6c"},{"code":"(fn drop-every-nth [coll n]\n  (keep\n    identity\n    (keep-indexed\n      (fn [x y]\n        (when (not= 0 (rem (inc x) n))\n          y))\n      coll)))","problem":41,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":41,"code":"(fn [col n] (map #(get col %) (remove #(zero? (rem (inc %) n)) (range (count col)))))","user":"4faf97d8e4b081705acca258"},{"problem":41,"code":"(fn [s n]\r\n  (->> \r\n    (partition (dec n) n nil s)\r\n    (apply concat)\r\n    (filter #(not (nil? %)))))","user":"606e0a42e4b069485764de19"},{"problem":41,"code":"(fn [xs n] (concat (take (dec n) xs) (mapcat #(drop 1 %) (partition-all n (drop (dec n) xs)))))","user":"553e0b70e4b0a04f792994e8"},{"code":"(fn [coll n]\n  (map #(nth coll %) (filter #(not (= 0 (rem (+ 1 %) n))) (range (count coll)))))","problem":41,"user":"52a55adee4b0c58976d9abe7"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(when (not= 0 (rem (inc %1) n)) %2) xs))","user":"54aec375e4b09f271ff37cf9"},{"code":"(fn droplst [lst pos] (into [] (keep-indexed #(if(not= (mod (+ 1 %1) pos) 0) %2) lst)))","problem":41,"user":"5034b623e4b062bc5d7ae168"},{"problem":41,"code":"(fn dr [s n]\n  (if (empty? s)\n    '()\n    (concat (take (- n 1) s) (dr (drop n s) n))))","user":"57bdfba3e4b05aa3c4741c5f"},{"problem":41,"code":"(fn [coll stride] (keep-indexed (fn [idx val] (if (not (zero? (mod (+ 1 idx) stride))) val)) coll))","user":"55ec4558e4b0121d4835fdc5"},{"code":"(fn [coll n]\n  (mapcat #(take (- n 1) %)\n          (partition n n nil coll)))","problem":41,"user":"4f9a7dc0e4b0dcca54ed6d0b"},{"problem":41,"code":"(fn drp [coll index]\n  (loop [c coll i index result []]\n    (if (empty? c)\n      result\n      (recur (drop i c)\n             i\n             (apply conj result (take (dec i) c))\n             )\n      )\n    )\n  )","user":"56f188e9e4b04a395b9a0494"},{"problem":41,"code":"(fn [col n] (map first (filter #(< 0 (mod (second %) n)) (map list col (iterate inc 1)))))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":41,"code":"(fn [elmts nth-item]\n  (apply concat (partition-all (dec nth-item) nth-item elmts)))","user":"52c1cc8be4b07a9af579236b"},{"code":"#(concat (mapcat butlast (partition %2 %1)) (take-last (mod (count %1) %2) %1))","problem":41,"user":"531bad96e4b08068f379ed93"},{"code":"(fn drop-nth\n  [s n]\n  (mapcat #(take (- n 1) %) (partition-all n s)))","problem":41,"user":"4f25c4c4e4b0d66497709ffc"},{"problem":41,"code":"(fn [xs idx]\n          (map second (filter #(not= (rem (inc (first %))  idx) 0) (map-indexed vector xs)))\n          )","user":"533c2605e4b0e30313ee6cd7"},{"code":"(let [k (fn chop [x y] (if (= y []) [] (concat (take (dec x) y) (->> y (drop x) (chop x)))))] (fn [a b] (k b a)))","problem":41,"user":"4e1e7f88535d04ed9115e808"},{"problem":41,"code":"(fn __ [coll outsider]\n  (->> coll\n       (filter #(not= 0 (rem (inc (.indexOf coll %1)) outsider)))))","user":"559468cbe4b0c79f6e1db954"},{"problem":41,"code":"(fn [xs n]\n    (loop [ys xs acc []]\n      (if (empty? ys)\n        acc\n        (recur (drop n ys) (concat acc (take (dec n) ys))))))","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(fn [s n]\n           (loop [x 1 l s c '()]\n              (if (empty? l)\n                  c\n                  (recur (inc x) (rest l) (if (zero? (rem x n))\n                                              c\n                                              (concat c [(first l)]))))))","problem":41,"user":"4f03f197535dcb61093f6b84"},{"problem":41,"code":"#(filter (fn[x](< (rem (.indexOf %1 x) %2) (- %2 1))) %1)","user":"55129667e4b06e50f9beb1ac"},{"problem":41,"code":"#(loop [x 0\n       ls []]\n    (if (>= x (count %1))\n      ls\n      (recur (+ x %2) (concat ls (subvec (vec %1) x (min (count %1) (+ x (dec %2))))))))","user":"5c6d0e51e4b0fca0c1622735"},{"code":"(fn drop-every [s n]\n  (when (seq s)\n    (concat (take (dec n) s)\n            (drop-every (drop n s) n))))","problem":41,"user":"4f2b0951e4b0d6649770a045"},{"problem":41,"code":"(fn [l n] (map (fn[[x r]] x) (filter (fn[[x r]] (not(zero? r))) (map #(list %1 (rem(inc %2) n)) l (range)))))","user":"56050f06e4b08b23635d3161"},{"problem":41,"code":"(fn [a-seq n]\n  (loop [accseq []\n         counter 1\n         rec-seq a-seq]\n    (if (empty? rec-seq)\n      accseq\n      (recur (if-not (= 0 (mod counter n))\n               (conj accseq (first rec-seq))\n               accseq)\n             (inc counter)\n             (rest rec-seq)))))","user":"595fd77ce4b066ee0a44b06f"},{"code":"(fn [s n]\n   (loop [s s acc []]\n     (if (< (count s) n)\n       (concat acc s)\n       (recur (drop n s) (into acc (take (dec n) s))))))","problem":41,"user":"4ed188c8535d44c135fd68cf"},{"code":"(fn take-nth [coll n]\n  (->> (partition n n [] coll)\n       (map (partial take (dec n)))\n       (apply concat)))","problem":41,"user":"4e2d84bf535deb9a81d77f09"},{"code":"#(map second \n     (filter (fn [xs] (> (mod (inc (first xs)) %2) 0))\n             (map-indexed vector %)))","problem":41,"user":"50d8739ae4b01f0871336e68"},{"code":"(fn drp ([s n] (drp s n 1))\n  ([s n i]\n    (if (empty? s)\n        s\n        (if (= n i)\n            (drp (rest s) n 1)\n            (cons (first s)\n                  (drp (rest s) n (inc i)))))))","problem":41,"user":"4e7a5395535db169f9c796ab"},{"code":"(fn [l n] (mapcat #(if (= (count %) n) (drop-last %) %) (partition-all n l)))","problem":41,"user":"51411e3be4b05ca1a0b379f3"},{"problem":41,"code":"(fn [coll idx]\n  (mapcat #(take (dec idx) %) (partition-all idx coll)))","user":"4fb85651e4b081705acca2d7"},{"problem":41,"code":"(fn [coll the-nth] \n  (->> coll \n       (map-indexed #(vector %1 %2))\n       (filter #(not= (rem (+ 1 (first %)) the-nth) 0))\n       (map #(identity (second %)))))","user":"52860baae4b0239c8a67ae09"},{"problem":41,"code":"(fn[coll n]\n  (mapcat drop-last (partition-all n (conj coll 1))))","user":"53a8d9efe4b047364c04442d"},{"code":"(fn [x n] (flatten (partition-all (- n 1) n x)))","problem":41,"user":"5217c26fe4b0a4bccb16cab8"},{"code":"(fn [coll nth]\n  (flatten (map-indexed (fn [index item]\n    (if (= 0 (mod (inc index) nth)) () item)) \ncoll)))","problem":41,"user":"4e6ab9cb535d8ccf87e9fefe"},{"code":"(fn [coll n] (filter #(not (nil? %)) (map #(if (not (zero? (rem (key %) n))) (val %)) (apply sorted-map (interleave (iterate inc 1) coll)))))","problem":41,"user":"4fb99483e4b081705acca2da"},{"code":"(fn rmth [s size]\n      (let [ blocks (inc (quot (count s) size)) ]\n        (print blocks)\n        (let [ template (flatten (repeat blocks (concat (repeat (dec size) true) (list false) )))]\n          (print template)\n          (filter #(and true %)(map #(and %1 %2) template s ))\n          )\n        )\n      )","problem":41,"user":"51f81925e4b09be9c177e526"},{"code":"(fn [coll n] (mapcat #(if (= n (count %)) (drop-last %) %) (partition n n [] coll)))","problem":41,"user":"522404d8e4b01819a2de42c0"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (keep-indexed #(if (pos? (mod (inc %1) n)) %2) coll))","user":"5aa4f7dae4b0d174b936c88c"},{"code":"(fn x\n  ([l n] (x l n 1))\n  ([l n acc]\n  (cond\n   (empty? l) []\n   (= acc n) (x (rest l) n 1)\n   :else (cons (first l) (x (rest l) n (inc acc))))))","problem":41,"user":"518c0f4ee4b0f028e99addf7"},{"problem":41,"code":"(fn foo [x n] (mapcat (partial take (dec n)) (partition-all n x)))","user":"5ed6c4ede4b016b56eae05e3"},{"problem":41,"code":"(fn [xs n]\n  ((fn [ys acc counter]\n     (cond (= counter n) (recur (rest ys) acc 1)\n           (= (count ys) 0) acc\n          :else (recur (rest ys) (conj acc (first ys)) (+ counter 1)))) xs [] 1))","user":"5d631376e4b0c9e5857d5023"},{"problem":41,"code":"#(mapcat vec (partition-all (dec %2) %2 %1))","user":"53fa3524e4b0de5c41848578"},{"code":"(fn [coll nth]\n   (keep-indexed\n     #(if (not= 0 (mod (inc %1) nth)) %2)\n     coll))","problem":41,"user":"4fe9f0f6e4b0547ebccb247b"},{"problem":41,"code":"(fn\n  [coll n]\n  (keep-indexed (fn [index val]\n                  (when (not= (mod (inc index) n) 0) val))\n                coll))","user":"594783bee4b07ddc2dafada1"},{"problem":41,"code":"#(into [] (flatten (partition-all (dec %2) %2 %1)))","user":"548d6b75e4b0e286459a1216"},{"problem":41,"code":"(fn [l i]\n  (vec (for [[k v] (map-indexed vector l) :when (not= (dec i) (rem k i))]\n      v)))","user":"501b1efee4b0b12d9c5f4d82"},{"code":"(fn [coll n]\n  (filter identity\n          (map-indexed #(if (= (mod (inc %) n) 0)\n                           nil\n                          %2)\n                       coll)))","problem":41,"user":"51e89428e4b006d205356a51"},{"problem":41,"code":"(fn [coll period]\n  (loop [[head & remain] coll\n         counter 1\n         return []]\n    (if (nil? head)\n      return\n      (if (= 0 (mod counter period))\n        (recur remain (inc counter) return)\n        (recur remain (inc counter) (conj return head))))))","user":"589cb617e4b00487982d536a"},{"problem":41,"code":"(fn [coll' n']\n  (loop [coll coll' i n' acc []]\n    (if (empty? coll)\n      \tacc\n      \t(if (= i 1)\n          (recur (rest coll) n' acc)\n          (recur (rest coll) (- i 1) (conj acc (first coll)))))))","user":"55916764e4b0604b3f94d57b"},{"problem":41,"code":"(fn drop-every-nth\n  ([xs n] (drop-every-nth xs n (dec n)))\n  ([[x & xs] n c]\n    (lazy-seq\n      (cond\n        (and (= c 0) (empty? xs))  nil\n        (empty? xs)                (list x)\n        (= c 0)                    (drop-every-nth xs n (dec n))\n        :else                      (cons x (drop-every-nth xs n (dec c)))\n      )\n    )\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"problem":41,"code":"#(vec (flatten (partition (dec %2) %2 nil %1)))","user":"55f4ef68e4b06e875b46ce82"},{"problem":41,"code":"(fn [c n] \n    (->> c\n        (map-indexed vector)\n        (filter (fn [[k v]] (> (rem (inc k) n) 0)))\n        (map last)))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(when (not= (mod (inc %1) n) 0) %2) coll))","user":"54edfa10e4b024c67c0cf868"},{"problem":41,"code":"(fn dropN [s n] (into (empty s) (map first (filter #(not= (mod (last %) n) 0) (map list s (iterate inc 1))))))","user":"568820e8e4b0dcc4269f4067"},{"problem":41,"code":"(fn kep \n  ([l c] (kep l c 1))\n  ([l c s]\n    (cond \n      (empty? l) l\n      (= 0 (mod s c)) (kep (rest l) c (inc s))\n      :else (cons (first l) (kep (rest l) c (inc s))))))","user":"54d6f22de4b0a52adc2e2023"},{"code":"(fn drop-nth\n  [xs n]\n  (map #(get xs %) (filter #(not (= (rem %1 n) (dec n))) (range 0 (count xs)))))","problem":41,"user":"536aa86de4b0243289761eb1"},{"problem":41,"code":"(fn [l v] (mapcat (fn [s] (if (= v (count s)) (drop-last s) s)) (partition-all v l)))","user":"5a5894d9e4b05d388ecb6c81"},{"problem":41,"code":"(fn [xs n]\n  (mapcat #(take (dec n) %) (partition-all n xs))\n  )","user":"5ac85708e4b0e27600da77ac"},{"problem":41,"code":"(fn [lst n]\n  (mapcat #(if (< (count %) n) \n               %\n               (butlast %))(partition-all n lst)))","user":"57fedf07e4b0d3187e9009dc"},{"problem":41,"code":"(fn [coll n] (mapcat rest (partition n n [] (cons 0 coll))))","user":"56b506d5e4b0982f16b37e2d"},{"code":"#(\n  (fn r [l,c,n] (if (empty? l) l (\n                 \tif (= c n)\n                 \t\t(r (rest l) 1 n)\n                 \t\t(cons\n                     \t\t(first l)\n                     \t\t(r (rest l) (+ 1 c) n)\n                    \t)\n                 ))\n    )\n  % 1 %2)","problem":41,"user":"50ba5113e4b03e68e4411c7d"},{"problem":41,"code":"(fn [ve a b]\n  (if (not (empty? a))\n    (recur (into ve (take (- b 1) a)) (drop  b a) b)\n    ve)) []","user":"56eb5c76e4b04a395b9a0422"},{"code":"#(apply concat (partition (dec %2) %2 [] %1))","problem":41,"user":"4e837808535db62dc21a62d9"},{"problem":41,"code":"#(filter (fn [x] (not (= (dec %2) (mod (.indexOf %1 x) %2)))) %1)","user":"575e71a2e4b0846ea39baf26"},{"problem":41,"code":"(fn [x n] (vec (mapcat #(take (dec n) %) (partition-all n x))))","user":"5bf5ddfde4b0bdcf453d159e"},{"problem":41,"code":"(fn [s n]\n  (loop [[f & rm] s\n         c       n\n         res     []]\n    (if (nil? f)\n      res\n      (if (= 1 c)\n        (recur rm n res)\n        (recur rm (dec c) (conj res f))))))","user":"574e7be7e4b02ea114799242"},{"problem":41,"code":"(fn [coll n]\n  (let [p (partition n n [] coll)]\n    (mapcat #(if (= (count %) n) (butlast %) %) p)))","user":"567695c2e4b05957ce8c6157"},{"problem":41,"code":"(fn [x y] (filter #(not= (mod (+ (.indexOf x %) 1) y) 0) x))","user":"53ed03f0e4b0d648e757f4bb"},{"code":"(fn [a b]\n  (reduce concat (partition (dec b) b [] a)))","problem":41,"user":"513b77f3e4b00f740c76c403"},{"problem":41,"code":"#(into [] (mapcat (fn [x] (if (= (count x) %2) (drop-last x) x)) (partition-all %2 %1)))","user":"5756f7d7e4b02ea1147992e9"},{"code":"(fn f [xs n] (lazy-cat (take (dec n) xs) (when (seq xs) (f (drop n xs) n))))","problem":41,"user":"50fb46e6e4b0d10d794c19e5"},{"problem":41,"code":"(fn [coll x]\n  (flatten (map #(if (= (count %) x) (drop-last %) %) (partition-all x coll))))","user":"54cbb0fde4b057c6fda3a27b"},{"code":"(fn [c n]  \n  (mapcat #(if (not= 0 (mod %2 n)) [%]) \n  c (iterate inc 1)))","problem":41,"user":"4daa374930acd6ed13482a68"},{"code":"(fn [xs n]\n  (loop [result [] origin xs]\n    (if (empty? origin)\n      result\n      (recur (concat result (take (- n 1) origin)) (nthrest origin n)))))","problem":41,"user":"52a32b52e4b04e0c58e87bfc"},{"problem":41,"code":"(fn [col n] (remove nil? (map #(if %2 %1) col (cycle (map #(if (zero? %) nil %) (range (dec n) -1 -1))))))","user":"57c7cef5e4b05aa3c4741d0d"},{"code":"(fn dropnth [coll n]\n  (mapcat identity (partition-all (- n 1) n coll)))","problem":41,"user":"5356e04fe4b04ce2eb3ed271"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  (mapcat #(if (= (count %) n) (drop-last %) %) (partition-all n lst)))","user":"57f8153de4b0d3187e900916"},{"problem":41,"code":"(fn mynth [coll n]\n  (if\n    (< (count coll) n)\n    [coll]\n    (flatten (concat\n           (take (- n 1) coll)\n           (mynth (drop n coll) n)))))","user":"59804b60e4b021a7a535fdcf"},{"code":"(fn [coll n] (remove nil? (map-indexed #(if (= 0 (mod (inc %1) n)) nil %2) coll)))","problem":41,"user":"52e4cc2ee4b09f7907dd1455"},{"code":"(fn f [t n] (if (seq t) (lazy-cat (take (dec n) t) (f (drop n t) n)) t))","problem":41,"user":"52bf29fde4b07a9af579232e"},{"code":"(fn dropnth [sq n]\n  (loop  [ret [] sq sq]  \n    (if\t(< (count sq) n)\n      (into ret sq)\n      (recur (into ret (butlast(take n sq))) (drop n sq)))))","problem":41,"user":"4f03e7b3535dcb61093f6b7c"},{"problem":41,"code":"(fn [coll n] (keep-indexed\n              (fn [i x]\n                (when (not= (mod (inc i) n) 0)\n                  x))\n              coll))","user":"5d883119e4b0915913b1d3a6"},{"code":"#(loop [r [] l %1]\n  (if (empty? l)\n      r\n      (recur (concat r (take (dec %2) l)) (drop %2 l))))","problem":41,"user":"4e4870d1535dc968683fc4bc"},{"problem":41,"code":"#(loop [items %1 n %2 i 1 result []]\n   (if (empty? items)\n     result\n     (if (= n i)\n       (recur (rest items) n 1 result)\n       (recur (rest items) n (inc i) (conj result (first items))))))","user":"569ef93de4b0542e1f8d148b"},{"code":"(fn everynthitem\r\n  [lista n]\r\n  (println lista)\r\n  (if-not (empty? lista)\r\n    (concat (take (dec n) lista)\r\n            (everynthitem (drop n lista) n))))","problem":41,"user":"4e8a0c82535d3e98b802328d"},{"problem":41,"code":"(fn [l n]\n  (loop [s l number 1 result '()]\n    (cond\n      (= number n) (recur (rest s) 1 result)\n      (empty? s) (reverse result)\n      :else (recur (rest s) (inc number) (cons (first s) result)))))","user":"52ade380e4b0c58976d9ac9b"},{"problem":41,"code":"(fn [s x]\n     (loop [newseq [] n 0]\n       (if  (= n (count s))\n         newseq\n         (recur\n           (if (not= 0 (mod (inc n) x))\n               (conj newseq (nth s n))\n               newseq)\n           (inc n)))))","user":"5dd84170e4b0948ae9d9ad93"},{"problem":41,"code":"(fn [coll n](keep-indexed #(if (= 0 (mod (inc %1) n)) nil %2) coll))","user":"5f838122e4b01aacbe7a2715"},{"problem":41,"code":";; a bit loopy - must be a better way\n\n#(reduce (fn [acc [ndx n]]\n            (if (zero? (mod (inc ndx) %2))\n              acc\n              (conj acc n)))\n          [] (map-indexed vector %1))","user":"5d7aa22ee4b02e6b30c9354e"},{"code":"(fn[s n]\n    (loop [src s\n              res ()]\n      (if (<= (count src) (dec n))\n        (concat res src)\n        (recur \n          (drop n src)\n          (concat res (take (dec n) src))))))","problem":41,"user":"4f951375e4b0dcca54ed6cc8"},{"code":"(fn  [x c] (loop [xs x accum ()]  (if (>= (count xs) c) (recur (drop c xs) (concat accum (take (- c 1) xs))) (concat accum xs))))","problem":41,"user":"53403110e4b085b17e897da6"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (keep-indexed #(if (not= 0 (rem (inc %1) n)) %2) coll))","user":"58f7dfe6e4b0438e51c2cf1f"},{"problem":41,"code":"(fn [col n]\n  (mapcat (partial take (dec n)) (partition-all n col)))","user":"53ea5307e4b036ad0777e4e2"},{"code":"(fn [xs v]\n  (keep-indexed #(if (pos? (mod (+ %1 1) v)) %2) xs))","problem":41,"user":"4f065217535dcb61093f6c0c"},{"problem":41,"code":"(fn [col n]\n  (flatten (partition-all (- n 1) n col))\n  )","user":"5581a6dae4b05c286339e0fe"},{"code":"(fn drop-nth [c n]\n  (lazy-seq\n   (when-let [s (seq c)]\n     (concat (take (- n 1) s) (drop-nth (drop n s) n)))))","problem":41,"user":"51508efce4b0c51f0585bbb4"},{"problem":41,"code":"#(keep-indexed (fn [i x] (if (not= 0 (mod (inc i) %2)) x)) %1)","user":"58254a11e4b051871117bed9"},{"problem":41,"code":"(fn[a d] (keep-indexed #(if-not (= 0 (mod (+ 1 %1) d)) %2) a))","user":"563c6ebae4b0bfe05bf11834"},{"code":"(fn [coll n]\n   (mapcat (partial take (dec n)) (partition-all n coll)))","problem":41,"user":"4f409e29e4b0e243712b1fb6"},{"code":"(fn [col i]\n  (reduce \n   (fn [v n] \n     (if \n       (= (rem (inc (first n)) i) 0)\n       v\n       (conj v (second n))))\n   \t   []\n       (map-indexed vector col)))","problem":41,"user":"52a32876e4b04e0c58e87bfb"},{"code":"(fn [lst n]\n  (map \n    (partial nth lst) \n    (map dec (filter #(not= 0 (mod % n)) (range (inc (count lst)))))\n  )\n)","problem":41,"user":"530c462ae4b02e82168697d9"},{"code":"(fn my-nth-item [coll x]\n  (if (or (nil? coll) (empty? coll))\n    '()\n    (flatten (cons (take (- x 1) coll) (my-nth-item (drop x coll) x)))))","problem":41,"user":"4eb2c45e535d7eef3080734d"},{"code":"(fn [coll n]\n  (keep-indexed #(if-not (zero? (mod (inc %1) n)) %2) coll))","problem":41,"user":"4eddcbbf535d10e5ff6f532d"},{"problem":41,"code":"(fn drop-every [xs n]\n    (filter #(not (zero? (rem (+ 1 (.indexOf xs %)) n))) xs))","user":"5fa358a1e4b0f0ebd91b77fd"},{"code":"(fn dropn [xs n] (when (seq xs) (concat (take (dec n) xs) (dropn (drop n xs) n))))","problem":41,"user":"4ef9c8f9535dced4c769f26b"},{"problem":41,"code":"(fn [arr n] (keep-indexed #(if (not (= (rem (- %1 (- n 1)) n) 0)) %2) arr))","user":"5b329773e4b025bcb146f322"},{"code":"(fn [s n]\n  (map second (remove #(zero? (mod (inc (first %)) n)) \n                      (map-indexed vector s))))","problem":41,"user":"511c91ace4b00c2a1fa7ff7a"},{"code":"(fn d2 [coll n]\n  (apply concat (partition-all (- n 1) n coll)))","problem":41,"user":"4fe91fa2e4b0547ebccb2440"},{"code":"(fn [l n] \n  (map \n    #(first (rest %)) \n    (filter first (map-indexed #(list (not= (dec n) (mod % n)) %2) l))))","problem":41,"user":"4f69f34fe4b07046d9f4ef90"},{"problem":41,"code":"(fn drop-nth [the-seq n]\n  (if (empty? the-seq)\n    []\n    (concat (take (dec n) the-seq) (drop-nth (drop n the-seq) n))))","user":"59a96a85e4b0bcf4e9a43b13"},{"code":"(fn drop-nth [coll x]\n  (keep-indexed (fn [i v]\n                    (if (not= 0\n                              (rem (inc i) x))\n                      v))\n                coll))","problem":41,"user":"4e4bd94b535dc968683fc4d7"},{"code":"(fn [coll n] (flatten (map rest (filter #(not= (first %) n) (map list (cycle (range 1 (+ n 1))) coll)))))","problem":41,"user":"522fdff7e4b032bbe342416c"},{"problem":41,"code":"(fn [coll n] \n  (apply concat (partition-all (dec n) n coll))\n  )","user":"55240916e4b0882d96d091b6"},{"problem":41,"code":"(fn [c n]\n  (loop [c c\n         accum nil]\n    (if (empty? c)\n      (into [] accum)\n      (recur (drop n c) (concat accum (take (dec n) c))))))","user":"54487527e4b032a45b8693cc"},{"problem":41,"code":"(fn [xs n] \n  (mapcat (partial take (dec n)) (partition-all n xs)))","user":"5e41a67be4b01d43a70e8e56"},{"code":"#(vec (flatten (map (fn [x] (if (= %2 (count x)) (drop-last x) x)) (partition-all %2 %1))))","problem":41,"user":"5356d00ee4b04ce2eb3ed26f"},{"code":"(fn [coll n]                                                         \n  ((fn f [coll counter n]                                                       \n     (if (seq coll)                                                             \n        (if (= counter n)                                                       \n          (f (rest coll) 1 n)                                                   \n          (lazy-seq                                                             \n            (cons (first coll) (f (rest coll) (inc counter) n))))))             \n     coll 1 n))","problem":41,"user":"4ec75077535d6d7199dd36e0"},{"code":"(fn my-drop-nth [col n]\n  (mapcat #(if (= n (count %))\n             (butlast %)\n             %) (partition n n nil col)))","problem":41,"user":"4f6e7073e4b07046d9f4efd8"},{"problem":41,"code":"(fn drop-n\n\t[coll N]\n\t(apply concat (partition-all (dec N) N coll)))","user":"58fb7d7ae4b0438e51c2cf7a"},{"code":"(fn [sq nm]\r\n  (loop [i 0\r\n         result nil]\r\n         (if (= i (count sq))\r\n            (reverse result)\r\n            (if (zero? (rem (inc i) nm))\r\n              (recur (inc i) result)\r\n              (recur (inc i) (conj result (nth sq i)))))))","problem":41,"user":"4f8aa1c1e4b02e764a0a516e"},{"problem":41,"code":"(fn [seqn n]\n   (keep-indexed #(if (not= (mod %1 n) (dec n)) %2) seqn))","user":"5f8d76c3e4b0715f5002d758"},{"problem":41,"code":"(fn drop-every-nth [s n]\n  (for [i (range (count s))\n        :when (not= (mod (inc i) n) 0)]\n    (nth s i)))","user":"5e21c933e4b05b4b01516128"},{"problem":41,"code":"#(mapcat (partial take (dec %2))\n         (partition-all %2 %1))","user":"550f1c99e4b06e50f9beb171"},{"code":"#(apply concat (for [x (partition-all %2 %1)] (if (= %2 (count x)) (drop-last x) x)))","problem":41,"user":"4ef5c7ce535dced4c769f248"},{"code":"(fn drop-every [v n]\n  (if (< (count v) n)\n    (take (dec n) v)\n    (concat (take (dec n) v) (drop-every (drop n v) n))\n    ))","problem":41,"user":"4fcad14ce4b0ee37620e1856"},{"code":"(fn [s n] (map first (remove #(zero? (mod (last %) n)) (map vector s (iterate inc 1)))))","problem":41,"user":"50166470e4b052339a490e76"},{"code":"#(mapcat identity\n  (partition-all (dec %2) %2 %1))","problem":41,"user":"4f378631e4b0e243712b1ed3"},{"problem":41,"code":"(fn [s n] \n    (second\n      (reduce \n              (fn [[i r] x]\n                 (if (= i n)\n                    [1 r]\n                    [(+ i 1) (conj r x)]\n                 )\n              )\n              [1 []]\n       s\n      )\n    )\n  )","user":"5c272f82e4b07e362c2305cb"},{"problem":41,"code":"(fn drop-nth [lat n]\n    (mapcat #(if (= (count %) n) (drop-last %) %)\n                 (partition-all n lat)))","user":"5790f9d7e4b0ebec4cfb75b4"},{"code":"(fn dn [coll n]\n  (when (-> coll empty? not)\n    (concat (take (dec n) coll) (dn (drop n coll) n))))","problem":41,"user":"51c858c3e4b07ef393169e55"},{"code":"(fn [x y] (mapcat #(take (dec y) %) (partition-all y x)))","problem":41,"user":"523eb110e4b057c4b7cd0a67"},{"problem":41,"code":"(fn [xs n]\n  (mapcat #(if (= (count %) n) (drop-last %) %) (partition-all n xs)))","user":"54448e84e4b032a45b869393"},{"problem":41,"code":"(fn drop [lst n]\n  (flatten (map #(take (dec n) %) (partition-all n lst))))","user":"4e7e241a535db169f9c79705"},{"problem":41,"code":"(fn drop-nth [coll n] (remove (set(map last (partition n coll))) coll))","user":"5437eca1e4b032a45b86930d"},{"code":"(fn dropn [lst n]\n  (letfn [(zip [A B] (map list A B))\n          (unzip [C] (map first C))\n          (pred [i] (not (zero? (mod (inc (second i)) n))))]\n  (unzip (filter pred (zip lst (range))))))","problem":41,"user":"4faa9593e4b081705acca1f9"},{"problem":41,"code":"(fn drop-nth [s n]\n  (map\n    first\n    (filter\n      #(not= 0 (mod (last %) n))\n      (map list s (iterate inc 1)))))","user":"5654e024e4b0f9d632dd848d"},{"code":"(fn dropnth\n\t[coll x]\n\t(apply concat (partition-all (- x 1) x coll)))","problem":41,"user":"51701a9ce4b034fe8eaf70f5"},{"problem":41,"code":"(fn [coll i] (keep-indexed #(if (> (mod (inc %) i) 0) %2) coll))","user":"5eb741e4e4b00a66d4a9523b"},{"problem":41,"code":"(fn [col drop-when] (mapcat #(if (=  (count %) drop-when) (drop-last %) %) (partition-all drop-when col)))","user":"57c6bca1e4b05aa3c4741cf8"},{"problem":41,"code":"#(apply concat (partition-all (dec %2) %2 %1))\n;; even better: apply concat --> flatten","user":"55952410e4b0c79f6e1db962"},{"problem":41,"code":"(fn [s n]\n  (loop [a [] x 1 l s]\n    (cond\n     (empty? l) a\n     (= (mod x n) 0) (recur a (+ 1 x) (rest l))\n     :else (recur (conj a (first l)) (+ 1 x) (rest l))))\n  )","user":"5e6e6537e4b04a83ad7cd29a"},{"problem":41,"code":"(fn drop-every-n [col n] \n  (keep-indexed \n    (fn [index item] \n      (if\n        (not= 0 (mod (inc index) n))\n          item \n          nil))\ncol))","user":"57a88e24e4b0a9660795621f"},{"code":"(fn [coll n] \n  (mapcat #(if (= (count %) n) (drop-last %) %) (partition-all n coll)))","problem":41,"user":"4ed7b617535d10e5ff6f52f3"},{"problem":41,"code":"#(loop [coll %1 n %2 answer[]]\n   (if (empty? coll)\n     answer\n     (recur \n      (rest coll)\n      (if (= n 1) %2 (dec n))\n      (if (= n 1) answer (conj answer (first coll))))))","user":"560fe558e4b05f002753df63"},{"code":"(fn [a n] (keep-indexed #(if (not= (mod (+ %1 1) n) 0) %2) a))","problem":41,"user":"51910da7e4b0f8ef0be96bf9"},{"code":"(fn drop-every [coll n]\n  (reduce #(concat %1\n                   (if (= n (count %2))\n                     (butlast %2)\n                     %2))\n          (empty coll)\n          (partition n n [] coll)))","problem":41,"user":"52ab6de1e4b0c58976d9ac78"},{"problem":41,"code":"(fn [col n]\n  (loop [i 1\n         xs col\n         res []]\n    (if (empty? xs) \n      res\n      (if (= n i) \n        (recur 1 (rest xs) res)\n        (recur (inc i) (rest xs) (conj res (first xs)))))))","user":"5eee7311e4b07c55ae4a0510"},{"problem":41,"code":"#(loop [s %1\n          res []]\n          (if (> (count s) (- %2 1))\n          (recur (subvec s %2)(into res (take (- %2 1) s)))\n          (into res s)\n          )\n  )","user":"5f1eec36e4b0f565ad998274"},{"code":"(fn myf [x n] \n  (if (= 0 (count x))\n  x\n  (concat (take (- n 1) x) (myf (drop n x) n))\n  ))","problem":41,"user":"506b437de4b0eda3100c0906"},{"problem":41,"code":"(fn dr [x y] (apply concat (partition-all (dec y) y x)) )","user":"58866b4fe4b0f1effa3b76d4"},{"code":"(fn [s nth]\n  (map second (filter #(not= 0 (rem (inc (first %)) nth)) \n          (map-indexed (fn [idx itm] [idx itm]) s))))","problem":41,"user":"512eb723e4b0b740abc5982b"},{"code":"(fn [coll, i] \n  (keep-indexed \n    (fn [index, item]\n      (if (= (mod (inc index) i) 0)\n        nil\n        item)) coll))","problem":41,"user":"4eac5bc1535d7eef3080731b"},{"problem":41,"code":"(fn [input numel]\n  (loop [in input out [] n numel]\n    (cond\n     (empty? in) out\n     (= n 1) (recur (rest in) out numel)\n     :else (recur (rest in) (conj out (first in)) (dec n)))))","user":"564a5a09e4b0284900eef656"},{"problem":41,"code":"(fn[a b](filter #(not(zero? (rem (inc (.indexOf a %)) b))) a))","user":"5826a843e4b051871117befd"},{"problem":41,"code":"#(into [] (flatten (concat (map drop-last (partition %2 %1)) (take-last (mod (count %1) %2) %1))))","user":"53d6b266e4b0e771c3025459"},{"code":"#(loop [s % n %2 r [] c 1] (if (= s []) r (if (= 0 (rem c n)) (recur (rest s) n r (inc c)) (recur (rest s) n (conj r (first s)) (inc c)))))","problem":41,"user":"4efb87f7535dced4c769f279"},{"problem":41,"code":"(fn drop-every-nth [coll n] (mapcat (partial take (dec n)) (partition-all n coll)))","user":"5209cb44e4b0e152394d7702"},{"problem":41,"code":"(fn [coll x]\n   (mapcat #(if (= (count %) x) (butlast %) %) \n           (partition x x nil coll)))","user":"5e16fd78e4b0a047bd49f726"},{"code":"(fn [x n]\n  ((fn drop [x n c]\n     (if (empty? x) x\n         (if (= (rem c n) 0)\n             (drop (rest x) n (inc c))\n             (conj (drop (rest x) n (inc c))\n                   (first x))\n         )\n     )\n    ) x n 1)\n)","problem":41,"user":"52474ec2e4b05ef8e38e6361"},{"code":"(fn [coll n]\n   (remove nil? (map-indexed (fn [idx item]\n                 (if-not (zero? (mod (inc idx) n))\n                   item)) coll)))","problem":41,"user":"523bde95e4b07becd5be2202"},{"problem":41,"code":"(fn [xs n]\n  (->> xs\n       (partition-all n)\n       (mapcat #(take (dec n) %))))","user":"4e7be091535db169f9c796ba"},{"problem":41,"code":"(fn removeN\n  [arr value]\n  (let [n (dec value)]\n    (loop [result []\n           lst arr\n           iter 0]\n      (cond\n        (empty? lst) result\n        (< iter n) (recur (conj result (first lst))\n                          (rest lst)\n                          (inc iter))\n        :else (recur result (rest lst) 0)))))","user":"5e9636fee4b0fbed045a3816"},{"problem":41,"code":"(fn [s n]\n  (filter identity\n          (map-indexed (fn [i e]\n                         (when (not (zero? (mod (inc i) n))) e)\n                         ) s\n\n                       )\n          )\n  )","user":"55d42f78e4b0e31453f64a73"},{"problem":41,"code":"#(loop [acc [] n 1 [x & xs :as l] %1]\n   (cond\n     (nil? x) acc\n     (= n %2) (recur acc 1 xs)\n     :else (recur (conj acc x) (inc n) xs)))","user":"560a7b46e4b05f002753defb"},{"problem":41,"code":"#(map :v\n  (filter\n   (fn [m] (not= (:n m) 0))\n   (map\n    (fn [v n] {:v v :n n})\n    %1\n    (cycle \n     (map\n      (fn [x]\n        (mod (inc x) %2))\n      (range %2))))))\n#_#(:acc\n  (reduce\n   (fn [m e]\n     (update-in\n      (update-in m [:cnt] inc)\n      [:acc]\n      (fn [acc]\n        (if (= %2\n               (inc (mod (:cnt m) %2)))\n          acc\n          (conj acc e)))))\n   {:acc []\n    :cnt 0}\n   %1))\n#_(fn [s n]\n  (loop [cnt 0\n         rst s\n         acc []]\n    (if (empty? rst)\n      acc\n      (recur (mod (inc cnt) n)\n             (rest rst)\n             (if (= (inc cnt) n)\n               acc\n               (conj acc (first rst)))))))","user":"51e5a627e4b0efabf93c02db"},{"code":"(fn [s i] (flatten (map butlast (partition i i [:undefined] s))) )","problem":41,"user":"5142e808e4b0c172af7558c9"},{"problem":41,"code":"#((comp flatten partition-all) (dec %2) %2 %1)","user":"591d9870e4b09b4ee5954c1b"},{"problem":41,"code":"(fn [xs n]\n  (loop [ys xs zs [] i 1]\n    (cond\n      (empty? ys) zs\n      (= i n) (recur (rest ys) zs 1)\n      :else (recur (rest ys) (conj zs (first ys)) (inc i)))))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":41,"code":"(fn drop-every-n [l n]\n  (if (empty? l)\n  \t[]\n  \t(concat (take (dec n) l) (drop-every-n (drop n l) n))\n  )\n)","user":"54c82b27e4b045293a27f645"},{"problem":41,"code":"(fn [sequ n]\n  (keep-indexed #(if (not= (mod %1 n) (dec n)) %2) sequ))","user":"57d0679ee4b0bd073c202359"},{"code":"#(keep-indexed (fn [i x] \n    (if-not (zero? (rem (inc i) %2)) x)) %1)","problem":41,"user":"4e588e84535d8a8b8723a294"},{"code":"(letfn [(v [w x y z]\n          (cond\n            (empty? y) (seq z)\n            (= w x)    (recur 1 x (rest y) z)\n            true       (recur (inc w) x (rest y) (assoc z (count z) (first y)))))]\n #(v 1 %2 %1 []))","problem":41,"user":"51eadb98e4b0f1f103a0d153"},{"code":"(fn [s i]\n  (filter #(not (nil? %))\n          (map-indexed (fn [idx itm]\n                 (if (= (rem (+ idx 1) i) 0)\n                   nil\n                   itm)) s)))","problem":41,"user":"501dfd54e4b051153f3b5b80"},{"code":"(fn [lst n]\n  (flatten (map drop-last (partition n n [nil] lst)))\n  )","problem":41,"user":"522d3a16e4b0e26240291d50"},{"code":"(fn [coll no] (filter #(not (nil? %)) (map-indexed (fn [idx itm] (if (not= (mod (+ idx 1) no) 0) itm)) coll)))","problem":41,"user":"510ec1bce4b07438aa321461"},{"problem":41,"code":"(fn [s n] (flatten (map (fn [x] (take (dec n) x)) (partition n n '() s))))","user":"5637557ce4b0bfe05bf117d4"},{"problem":41,"code":"(fn remove-nth\n  [my-seq n]\n  (loop [current-seq my-seq\n        result []]\n    (if (seq current-seq)\n      (recur (nthrest current-seq n) (concat result (take (- n 1) current-seq)))\n      result)))","user":"548f19a8e4b0e286459a1231"},{"problem":41,"code":"(fn [lst n]\n    (loop [i 1 lst lst result []]\n      (if (empty? lst)\n\t    result\n\t    (recur (inc i) (rest lst) (if (= 0 (mod i n)) result (conj result (first lst)))))))","user":"568c2f97e4b0dcc4269f40b0"},{"problem":41,"code":"(fn [c n] (filter identity (map-indexed #(if (= 0 (mod (+ 1 %) n)) nil %2) c)))","user":"5c2f0cdfe4b0d62ef62d9f09"},{"problem":41,"code":"(fn dropnth [s n]\n  (if (empty? s)\n    (list)\n    (concat (take (- n 1) s) (dropnth (drop n s) n) )))","user":"5703ce0fe4b08d47c97781fd"},{"problem":41,"code":"(fn [li n] \n  (remove nil? \n          (map #(if (zero? (rem (inc %2) n)) nil %1) \n               li \n               (range (count li)))))","user":"5ec0db8be4b00a66d4a9528d"},{"problem":41,"code":"(fn [arr n-partitions]\n  (map #(nth %1 1)\n    (filterv #(not (zero? (mod (inc (first %1)) n-partitions))) (map-indexed vector arr))))","user":"57c4e8dce4b05aa3c4741cd7"},{"problem":41,"code":"; (fn [sqn step]\n;  (apply concat (partition-all (dec step) step sqn)))\n\n#(apply concat (partition-all (dec %2) %2 %1))","user":"5cf895efe4b0b71b1d808a85"},{"problem":41,"code":"#(loop [ys nil xs %1 m %2]\n    (if (= (first xs) nil)\n      (flatten (reverse ys))\n      (recur (cons (first (split-at (- m 1) xs)) ys) (second (split-at m xs)) m)))","user":"58b989dbe4b0888cdc949ccd"},{"problem":41,"code":"(fn [lst n]\n  (loop [ls lst index 1 final []]\n    (cond\n     \t(empty? ls) final\n     \t(= (rem index n) 0) (recur (rest ls) 1 final)\n     \t:else (recur (rest ls) (+ index 1) (conj final (first ls)))\n     )\n   )\n )","user":"54e7425ee4b024c67c0cf810"},{"code":"(fn boop [coll n]\n  (if (empty? coll)\n    []\n    (concat (take (dec n) coll) (boop (drop n coll) n))))","problem":41,"user":"4f70183ee4b07046d9f4eff3"},{"problem":41,"code":"(fn func\n  ([l n]\n   (func l n [] 1))\n  ([l n l2 v]\n   (if (empty? l)\n     l2\n     (if (= 0 (mod v n))\n       (recur (rest l) n l2 (+ v 1))\n       (recur (rest l) n (conj l2 (first l)) (+ v 1))))))","user":"5875daaee4b01531a375ea74"},{"problem":41,"code":"(fn prob41 [[h & t] n]\n  (loop [acc [] h h t t cnt n]\n    (cond\n      (nil? h) acc\n      :else (if (= 1 cnt)\n              (recur acc (first t) (next t) n)\n              (recur (conj acc h) (first t) (next t) (dec cnt))))))","user":"4f0554aa535dcb61093f6bf5"},{"code":"(fn [s n]\n    (flatten (map #(subvec (vec %) 0 (min (- n 1) (count %))) (partition-all n s)))\n)","problem":41,"user":"515896f2e4b059418b97f0a8"},{"code":"(fn [xs n]\n  (mapcat #(take (dec n) %) (partition-all n xs)))","problem":41,"user":"4f0381db535dcb61093f6b02"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (loop [res []\n         idx 1\n         rem coll]\n    (if (empty? rem)\n      res\n      (\n        if (= 0 (mod idx n))\n        (recur res (inc idx) (rest rem))\n        (recur (conj res (first rem)) (inc idx) (rest rem))\n        )\n      )\n    )\n  )","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":41,"code":"(fn [seq k]\n   (loop [currSeq seq i 1 ans []]\n     (if (> i (count seq))\n       ans\n       (\n         if (= (mod i k) 0)\n         (recur (rest currSeq) (inc i) ans)\n         (recur (rest currSeq) (inc i)  (conj ans (first currSeq)) )\n         )\n       )\n     )\n   )","user":"5fd361f2e4b07e53c2f3f04e"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) coll))","user":"59cf0d75e4b0ef0a1e9b5b5f"},{"problem":41,"code":"(fn [s n] \n   (keep-indexed #(if ( not= 0 (mod ( + % 1) n)) %2) s))","user":"55e06f82e4b050e68259b40d"},{"problem":41,"code":"(fn [items n] (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n items))))","user":"567931e9e4b05957ce8c6184"},{"code":"(fn dropn [seq n]\n(apply concat (partition-all (dec n) n seq)))","problem":41,"user":"52382d91e4b0fae3832e99f0"},{"problem":41,"code":"(fn [lst n]\n  (map\n   (fn [x] (x 0))\n   (filter\n    (fn [x] (not= (- n 1) (mod (x 1) n)))\n    (map\n     vector\n     lst\n     (range (count lst))\n     )\n    )\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"code":"(fn [container number]\n  (keep-indexed \n   (fn [index item] (if (zero? (rem (inc index) number)) nil item))\n   container))","problem":41,"user":"512b8728e4b04d059cf1fd16"},{"problem":41,"code":"(fn [l index]\n  (filter #(not (nil? %1))\n   (map #(if (not (= (mod %2 index) 0))\n            %1)\n       l\n       (range 1 (+ 1 (count l)) 1))))","user":"539043e7e4b0b51d73faae97"},{"code":"(fn drN [vect n]\r\n  (if (< (count vect) n) (into [] vect)\r\n    (into [] (concat (subvec vect 0 (- n 1)) (drN (subvec vect  n  ) n)))))","problem":41,"user":"5060c117e4b024449d699b5d"},{"problem":41,"code":"(fn [s step] (apply concat  (partition (dec step) step nil s)))","user":"576aea4fe4b0a07e8fc18126"},{"code":"(fn f [s n]\n  (if (empty? s)\n    s\n    (let [[t r] (split-at (dec n) s)]\n      (concat t (f (rest r) n)))))","problem":41,"user":"4e7dd982535db169f9c796ee"},{"problem":41,"code":"(fn [xs n]\n  (apply concat (map #(take (dec n) %) (partition-all n xs))))","user":"57a49951e4b0a966079561e5"},{"problem":41,"code":"(fn [coll n]\n    (let [pad-with (repeat (- n (mod (count coll) n)) nil)]\n      \n      (->> (partition (dec n) n (concat coll pad-with))\n           flatten\n           (remove nil?))))","user":"5501a1e1e4b07d26eda61d75"},{"problem":41,"code":"(fn dn [c n]\n  (if (< (count c) n)\n    c\n    (concat (drop-last (take n c))\n            (dn (drop n c) n))))","user":"54bd9a60e4b0ed20f4ff6ee3"},{"code":"(fn nn [seqn n]\n  (mapcat #(if (= n (count %1)) (drop-last %1) %1) (partition-all n seqn))\n    )","problem":41,"user":"5274eb56e4b03e8d9a4a74bb"},{"code":"#(map second (filter (comp not zero? (fn [x] (mod (inc x) %2)) first) (map-indexed (fn [& x] x) %)))","problem":41,"user":"5357b241e4b04ce2eb3ed282"},{"problem":41,"code":"(fn drop-every-nth\n  [sq n]\n  (let [\n        f (fn [[acc cnt] elem]\n            (if (= 0 (mod cnt n))\n              [acc (inc cnt)]\n              [(conj acc elem) (inc cnt)]))\n        ]\n    (first (reduce f [[] 1] sq))))","user":"588e4e05e4b00487982d5188"},{"code":"(fn [v n]\r\n          (keep-indexed #(if (= 0 (mod (inc %) n)) nil %2) v))","problem":41,"user":"503b6995e4b07a1917cc34dd"},{"code":"(fn [coll n]\n  (keep-indexed #(if (not= (dec n) (mod %1 n)) %2) coll))","problem":41,"user":"5007f751e4b0b17c647f522b"},{"code":"#(vec (mapcat butlast (partition %2 %2 [0] %1)))","problem":41,"user":"511688d5e4b0b3e208dba05a"},{"problem":41,"code":"(fn [coll to-take] (->> (partition-all to-take coll) (map #(take (dec to-take) %)) flatten))","user":"5afb3426e4b0cc2b61a3bcf5"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  (if\n    (empty? lst)\n    ()\n    (remove #(= 0 (rem (inc (.indexOf lst %)) n)) lst)))","user":"57fc34f0e4b0d3187e90098e"},{"code":"(fn [x y] (filter identity (map #(when-not (= (rem %2 y) 0) %1) x [1 2 3 4 5 6 7 8])))","problem":41,"user":"50813b88e4b09292fd669443"},{"code":"#(first(reduce\n  (fn [[acc c] el]\n    (if (= 0 (mod c %2))\n        [acc (inc c)]\n        [(conj acc el) (inc c)]))\n    [[] 1]\n    %1))","problem":41,"user":"50427899e4b0add3005c0fc2"},{"code":"(fn\n    [coll nth]\n    (lazy-seq\n     (loop [s coll result []]\n       (if-not (seq s)\n         result\n         (let [first (take (- nth 1) s)\n               tail (drop nth s)]\n           (recur tail (concat result first))))))\n    )","problem":41,"user":"52a7634ae4b0c58976d9ac16"},{"problem":41,"code":"(fn [c i] (remove nil? (map-indexed #(when-not (= (rem (inc %1) i) 0) %2) c)))","user":"5e3071abe4b05b4b01516213"},{"code":"(fn [coll n]\r\n  (loop [coll coll\r\n         i n\r\n         r '()]\r\n    (if (empty? coll)\r\n      (reverse r)\r\n      (if (= i 1)\r\n        (recur (rest coll) n r)\r\n        (recur (rest coll) (- i 1) (conj r (first coll)))))))","problem":41,"user":"4de2f44f535d08e6dec9fdec"},{"code":"(fn drop-nth [vs d]\n  (map\n    second\n    (filter\n      #(not= 0 (mod (first %) d))\n      (map\n        vector\n        (drop 1 (range))\n        vs))))","problem":41,"user":"4ee85476535d93acb0a6687c"},{"code":"#(for [x % :when (> (mod (+ (.indexOf % x) 1) %2) 0)] x)","problem":41,"user":"5262c73fe4b03e8d9a4a7098"},{"code":"(fn [x y] (keep-indexed #(if (pos? (mod (inc %1) y)) %2) x))","problem":41,"user":"4f2b2c13e4b0d6649770a048"},{"problem":41,"code":"#(loop [index 1\n        lst ()\n        original %1]\n     (if (empty? original)\n         lst\n         (recur (inc index) (if (= (rem index %2) 0)\n                                lst\n                                (concat lst (list (first original)))) (drop 1 original) )))","user":"6074e278e4b069485764de51"},{"problem":41,"code":"(fn [coll ind]\n  (loop [coll coll counter 1 result []]\n    (cond\n     (empty? coll) result\n     (pos? (mod counter ind)) (recur (rest coll) (inc counter) (conj result (first coll)))\n     :else (recur (rest coll) (inc counter) result)\n     )\n    \n    )\n  \n  \n  )","user":"583667c7e4b089d5ab817cfb"},{"code":"(fn this\n  \t\t([current seq nth]\n\t\t\t\t(if (= [] seq)\n\t\t\t\t\t(list)\n\t\t\t\t\t(if (= current nth)\n\t\t\t\t\t\t; Skip it\n\t\t\t\t\t\t(this 1 (rest seq) nth)\n\t\t\t\t\t\t; Don't skip it\n\t\t\t\t\t\t(conj (this (+ 1 current) (rest seq) nth) (first seq))\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t([seq nth] (this 1 seq nth))\n\t\t\t)","problem":41,"user":"5048bcf8e4b06e644c63f1ae"},{"problem":41,"code":"(fn [xs x]\n  ((fn private-drop-every-nth [ys y]\n    (if (= ys ())\n      []\n      (if (= y x)\n        (private-drop-every-nth (rest ys) 1)\n        (cons (first ys) (private-drop-every-nth (rest ys) (+ y 1)))))) xs 1))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"problem":41,"code":"(fn [a b] \n  (keep-indexed \n    #(if \n      (not= (rem (inc %1) b) 0)   \n      %2      \n    ) \n    a\n  )\n)","user":"5717d674e4b07c98581c3b1a"},{"code":"(fn [a m]\n  (keep-indexed #(if (= (- m 1) (mod %1 m)) nil %2) a))","problem":41,"user":"4fe9de74e4b0547ebccb2475"},{"problem":41,"code":"(fn [realColl realN]\n  (loop [[fst & snd :as coll] realColl\n       \t n realN\n       \t result []]\n    (cond\n      (empty? coll) result\n      (= 1 n) (recur snd realN result)\n      :else (recur snd\n                   (dec n)\n                   (conj result fst)))))","user":"593870e6e4b02506e01a29d6"},{"code":"#(flatten\n  (map\n   (partial take (dec %2))\n   (partition-all %2 %)))","problem":41,"user":"51a91ac2e4b08d8ec191b822"},{"code":"(fn [s n]\n  (filter \n    (fn [x] (not (or \n                   (= (.indexOf s x) (dec n))\n                   (= (.indexOf s x) (dec (* 2 n)))\n                   (= (.indexOf s x) (dec (* 3 n)))))) s))","problem":41,"user":"4f6fd91ae4b07046d9f4efed"},{"problem":41,"code":"#(keep-indexed (fn [idx v]\n                    (if (> (rem (inc idx) %2) 0)\n                      v))\n                  %1)","user":"5a18488ee4b0ff51aa4b31e5"},{"code":"#(mapcat (fn[x] (take (- %2 1) x)) (partition-all %2 %1))","problem":41,"user":"4ff78679e4b0678c553fc392"},{"problem":41,"code":"(fn [coll n]\n    (loop [[f & r] coll\n           res '()\n           i 1]\n      (if (not (nil? f))\n        (if (= (mod i n) 0)\n          (recur r\n                 res\n                 (inc i))\n          (recur r\n                 (concat res (list f))\n                 (inc i)))\n        res)))","user":"5c5d2e90e4b01df32ab732af"},{"problem":41,"code":"(fn drop-nth [a-seq n]\n  (loop [cnt 1 \n         remaining a-seq\n         acc []]\n    (if (empty? remaining)\n      acc\n      (if (= cnt n)\n        (recur 1\n               (rest remaining)\n               acc)\n        (recur (inc cnt)\n               (rest remaining)\n               (conj acc (first remaining)))))))","user":"55995fa7e4b031d6649c9ba9"},{"code":"(fn [s n]\n  (reverse (reduce (fn [a i]\n                     (if (= (rem i n) (dec n))\n                       a\n                       (conj a (nth s i))))\n                   ()\n                   (range (count s)))))","problem":41,"user":"5175616ae4b0dea9bbfba576"},{"code":"(fn drop-nth [s n]\n  (if (< (count s) n)\n    s\n    (concat (take (dec n) s) (drop-nth (drop n s) n))))","problem":41,"user":"50aab057e4b056ee0193586b"},{"problem":41,"code":"#(mapcat butlast (partition %2 %2 '(:past-end) %1))","user":"556a3243e4b09a3098a524de"},{"problem":41,"code":"(fn [v n] (mapcat (partial take (dec n)) (partition-all n v)))","user":"4fbb7010e4b081705acca2e7"},{"problem":41,"code":"(fn [s n] (keep-indexed (fn [k v] (if-not (zero? (rem (inc k) n)) v)) s))","user":"546dd4f6e4b00cfc9eacc194"},{"problem":41,"code":"(fn [s n]\n  (loop [s s\n         acc []\n         i 1]\n    (cond (empty? s)\n          acc\n          (= (mod i n) 0)\n          (recur (rest s) acc (inc i))\n          :else\n          (recur (rest s) (conj acc (first s)) (inc i)))))","user":"55469eede4b0a04f79299542"},{"problem":41,"code":"( fn [ll n]\n           (mapcat #(take (- n 1) %)\n                (partition-all n ll))\n           )","user":"57e396cde4b0bfb2137f5a9e"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (let [idxs (map-indexed (fn [idx x] [(inc idx) x]) xs)\n        filtered (filter #(not (zero? (mod (first %1) n))) idxs)]\n       (map last filtered)))","user":"5ce05561e4b0a17bb84e2b08"},{"problem":41,"code":"(fn f ([c n] (f c n [] 1))\n  ([c n r k]\n  (if (empty? c) r\n   (if (= (mod k n) 0)\n     (f (rest c) \n        n \n        r \n        (+ k 1))\n     (f (rest c) \n        n \n        (conj r (first c))\n        (+ k 1))\n     )\n    )\n  ))","user":"561e8b11e4b064ca9f4b16c0"},{"problem":41,"code":"(fn [list n] (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n list))))","user":"58cb7525e4b03c36ff7e584a"},{"problem":41,"code":"(fn d\n  ([t i] (d t i '()))\n  ([t i r]\n    (if (< (count t) i)\n      (concat r t)\n      (d\n        (drop i t)\n        i\n        (concat r (take (dec i) t))\n      )\n    )\n  )\n)","user":"55f1ce28e4b06e875b46ce37"},{"problem":41,"code":"(fn prob41 [initialList ntth]\n (flatten (if (<= ntth (count initialList))\n     (conj (subvec initialList 0 (- ntth 1)) (prob41 (subvec initialList ntth (count initialList)) ntth))\n      initialList)))","user":"58e6a2c5e4b056aecfd47cba"},{"code":"(fn [s n] (flatten (partition-all (- n 1) n s)))","problem":41,"user":"519c4111e4b0a1d87b003458"},{"problem":41,"code":"(fn f [xs n] (if (> n (count xs)) xs (concat (take (dec n) xs) (f (drop n xs) n))))","user":"5cc6b4bfe4b0ccb061962827"},{"problem":41,"code":"(fn f [c n]\n  (when (seq c)\n    (let [[a b] (split-at (dec n) c)]\n      (concat a (f (rest b) n)))))","user":"4ec1923f535dfed6da9c6db2"},{"problem":41,"code":"(fn \n  [vec n]\n  (mapcat #(take (dec n) %)  ( partition-all n vec ) ) )","user":"516d227fe4b06f078fab252d"},{"problem":41,"code":"#(remove nil? (mapcat butlast (partition %2 %2 (repeat nil) %1)))","user":"56b280e3e4b0982f16b37e06"},{"problem":41,"code":"(fn dropNthItem [x n]\n    (loop [original x\n           new '[]\n           i 1]\n    (if (empty? original)\n        new\n        (if (= i n)\n           (recur (rest original) new 1)\n           (recur (rest original) (conj new (first original)) (inc i))))))","user":"5f8330b8e4b01aacbe7a270f"},{"code":"(fn drop-nth [s n]\n  (if (seq s)\n    (lazy-cat (take (dec n) s) (drop-nth (drop n s) n))))","problem":41,"user":"4ebe766d535dfed6da9c6d94"},{"problem":41,"code":"(fn [seq num]\n (loop [ct (+ 1 (count seq) ) i 1 r []]\n   (if (>= i ct)\n     r\n     (if (= (mod i num) 0)\n       (recur ct (inc i) r)\n       (recur ct (inc i) (conj r (nth seq (- i 1))))))))","user":"5823d3e6e4b051871117beb8"},{"problem":41,"code":"(fn [coll n] \n\t(mapcat (fn [x] (take (dec n) x))\n            (partition-all n coll)))","user":"5923554ee4b0a390037439f2"},{"problem":41,"code":"(fn [s n]\n  (loop\n      [i 1\n       s s\n       ret []]\n    (if (empty? s)\n      ret\n      (recur (inc i)\n             (rest s)\n             (if (= 0 (mod i n))\n               ret\n               (conj ret (first s)))))))","user":"5cc6b681e4b0ccb061962828"},{"problem":41,"code":"(fn [seq n]\n    (loop [acc [] rest seq]\n      (let [first (take (dec n) rest)]\n        (if-not (empty? first)\n          (recur (concat acc first) (drop n rest))\n          acc))))","user":"57f6e666e4b0d3187e9008f2"},{"code":"(fn [l n] (mapcat (fn [x] (if (= (rem (+ (.indexOf l x) 1) n) 0) '() (list x))) l  ))","problem":41,"user":"5213348ae4b0d32679a50652"},{"problem":41,"code":"(fn [coll n] \n  (flatten\n   (concat\n    (map #(drop-last %) (partition n coll))\n    (take-last (rem (count coll) n) coll)\n    )\n   )\n  )","user":"54a73c1fe4b09f271ff37c96"},{"problem":41,"code":"(fn [l n]\n  (->> l\n       (map-indexed (fn [idx itm]\n                      (if (= (mod (inc idx) n) 0)\n                        nil itm)\n                    )\n       )\n       (filter (complement nil?))\n   )\n)","user":"51f7dd27e4b06ff1c25c52dc"},{"problem":41,"code":"(fn [l i] (map first (filter #(not= 0 (mod (inc (last %)) i)) (map list l (range)))))","user":"59c734e3e4b0a024fb6ae53f"},{"code":"#(letfn [(worker [l c n]\r\n           (if (empty? l)\r\n             n\r\n             (if (= c 1)\r\n               (recur (rest l) %2 n)\r\n               (recur (rest l) (dec c) (conj n (first l))))))]\r\n   (worker %1 %2 []))","problem":41,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn drop-each-nth [coll n]\n  (flatten\n    (concat \n    (map #(drop-last %) (partition n coll))\n    (take-last (mod (count coll) n) coll))\n    ))","problem":41,"user":"4ec1b80c535dfed6da9c6db6"},{"code":"(fn [col n] (keep-indexed (fn [i m] (when (not= (mod i n) (dec n)) m)) col))","problem":41,"user":"4f215350e4b0d66497709fd0"},{"problem":41,"code":"(fn tst [coll n]\n  (loop [result []\n         coll coll\n         cnt n]\n    (if (empty? coll)\n      result\n      (if (= cnt 1)\n        (recur result (rest coll) n)\n        (recur (conj result (first coll))\n               (rest coll)\n               (dec cnt))))))","user":"502f6c56e4b0842eb223d8bb"},{"code":"(fn [v n] (mapcat #(if (= (count %) n) (drop-last 1 %) %) (partition-all n v)))","problem":41,"user":"51990df9e4b068aa333628fc"},{"problem":41,"code":"(fn dn [c n]\n  \t(mapcat #(take (dec n) %) (partition n n nil c)))","user":"58988cbbe4b00487982d52d7"},{"code":"#(map first (filter (fn [[x y]] (pos? (mod y %2))) (map vector %1 (iterate inc 1))))","problem":41,"user":"5199ca05e4b022efe2b3ba88"},{"problem":41,"code":"(fn [sq n] (mapcat #(take (- n 1) %) (partition n n nil sq)))","user":"53ea72b6e4b036ad0777e4e5"},{"problem":41,"code":"(fn [s c]\n  (loop [acc []\n         s-tail s]\n    (if (empty? s-tail)\n      acc\n      (recur (into acc (take (dec c) s-tail))\n             (drop c s-tail)))))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n  (if (empty? coll)\n    nil\n    (concat (take (dec n) coll)\n            (drop-every-nth (drop n coll) n))))","user":"58a953dae4b01a0c0b232968"},{"code":"(fn [v-prime n]\n  (loop [v v-prime rv []]\n    (if (empty? v)\n      rv\n      (recur (drop n v) (concat rv (take (dec n) v))))))","problem":41,"user":"534f13b2e4b084c2834f4ac4"},{"problem":41,"code":"(fn DropEveryNthItem  [lst n]\n  (loop [m 0 temp lst res []]\n    (if (seq temp)\n      (if (= m (dec n))\n        (recur 0 (rest temp) res)\n        (recur (inc m) (rest temp) (conj res (first temp))))\n      res)))","user":"607508f3e4b069485764de54"},{"problem":41,"code":"(fn drop-n [c n] ((\n                  fn drop-nk [c n k] (\n                                      if (empty? c) ()\n                                      (if (== n k)\n                                        (drop-nk (rest c) n 1)\n                                        (conj (drop-nk (rest c) n (inc k)) (first c)))\n                                      )) c n 1))","user":"56912f93e4b0dcc4269f40ef"},{"code":"(fn [coll n]\n  (mapcat  #(take (dec n) %)\n    (partition-all n coll)))","problem":41,"user":"4ec60dc4535d6d7199dd36c0"},{"problem":41,"code":"(fn f [xs x] (if (< (count xs) x)\n             xs\n             (concat (take (dec x) xs) (f (drop x xs) x))))","user":"5417385fe4b01498b1a71a08"},{"problem":41,"code":"(fn [coll nthnum]\n   (loop [coll coll result []]\n     (if (empty? coll)\n       (vec result)\n       (recur (drop nthnum coll) (concat result (take (dec nthnum) coll))))))","user":"5913fde8e4b0163c97b36f13"},{"code":"(fn [coll n] (keep-indexed (fn [i x] (if (zero? (rem (inc i) n)) nil x)) coll))","problem":41,"user":"52808897e4b0757a1b171404"},{"code":"(fn drop-nth [coll n]\n  (if (= (count coll) 0) '()\n    (reverse\n      (into \n        (reverse (take (- n 1) coll))\n        (drop-nth (drop n coll) n)))))","problem":41,"user":"4db2f208535df7e46ed9b6c9"},{"code":"(fn [c n] (map first \n            (filter #(not (= n (second %))) \n              (map list c \n                (cycle (range 1 (inc n)))))))","problem":41,"user":"4ff8a89de4b0678c553fc39d"},{"code":"#(flatten [(partition (- %2 1) %2 [] %1)])","problem":41,"user":"5062bc46e4b05ac47bc68d68"},{"code":"(fn drop-every-n [coll n]\n  (if (empty? coll)\n    coll\n    (concat (take (dec n) coll) (drop-every-n (drop n coll) n))))","problem":41,"user":"5353afa0e4b084c2834f4b03"},{"problem":41,"code":"(fn [coll n]\n  (->> coll count range\n       (remove #(= (- n 1) (mod % n)))\n       (map #(nth coll %))))","user":"562c15d3e4b058fa18c5a6d5"},{"code":"(fn [coll n] (remove nil? ((fn ! [coll n](reduce concat (map #(take (- n 1) %) (partition n n [nil nil nil nil] coll)) ))\n coll n)\n        ))","problem":41,"user":"52be0263e4b07a9af579230e"},{"code":"#(loop [todo %1\n        n 0\n        mapped []]\n  (if todo\n    (if (not= 0 (mod (inc n) %2))\n      (recur (next todo) (inc n) (concat mapped [(first todo)]))\n      (recur (next todo) (inc n) mapped))\n    mapped)\n  )","problem":41,"user":"52cb19abe4b07d0d72b27348"},{"problem":41,"code":"(fn\n  [li i]\n  (into [] (keep-indexed\n   #(if \n     (not(= (- i 1) (mod %1 i)))\n     %2\n     nil)\n   li)))","user":"586a657de4b0f14aab7c88bd"},{"problem":41,"code":"(fn drop-nth [in val]\n  (if (> (count in) val)\n    (concat (take (- val 1) in) (drop-nth (nthrest in val) val))\n    (take (- val 1) in)))","user":"5b107263e4b0cc2b61a3be22"},{"problem":41,"code":"#(loop [dalist %1, res [], n %2]\n   (if (seq dalist)\n     (if (= 1 n)\n       (recur (rest dalist) res %2)\n       (recur (rest dalist) (conj res (first dalist)) (dec n)))\n     res))","user":"55868660e4b059ccff29b1d4"},{"code":"(fn [xs n] (mapcat #(if (< (count %) n) % (butlast %)) (partition-all n xs)))","problem":41,"user":"513dcc1ce4b0825f97f7f964"},{"problem":41,"code":"(fn f[s n] (flatten (map #(take (dec n) %) (partition-all n s))))","user":"574a9132e4b02ea1147991fd"},{"code":"(fn [ls n] (keep-indexed (fn [i x] (when (not= (mod i n) (dec n)) x)) ls))","problem":41,"user":"4e6cf61a535de274dd8d818c"},{"code":"(fn [coll n] (reverse(loop [counter 1 result '() [head & tail] coll](\r\n                                                                                        if (empty? tail) (if (not= (mod counter n) 0) (cons head result) result)\r\n                                                                     (if (not= (mod counter n) 0) (recur (inc counter) (cons head result) tail)\r\n                                                                       (recur (inc counter) result tail)\r\n                                                                       )\r\n                                                                     ))))","problem":41,"user":"4e8aef69535d65386fec2114"},{"code":"(fn [c m]\n  (keep-indexed #(if (not (zero? (mod (inc %1) m))) %2) c)\n)","problem":41,"user":"4fc7b079e4b0ee37620e1827"},{"problem":41,"code":"(fn [coll n]\n  (flatten (partition-all (- n 1) n coll)))","user":"5f8e2a08e4b0715f5002d767"},{"code":"(fn [coll n] (flatten (concat (map #(drop-last %) (partition n coll))(take-last (rem (count coll) n) coll))))","problem":41,"user":"4f9fb08ae4b0dcca54ed6d3c"},{"problem":41,"code":"(fn [coll index] (keep-indexed #(if (not= 0 (mod (inc %1) index)) %2) coll))","user":"5c59b836e4b01df32ab73263"},{"code":"(fn [coll n] (map first (filter #(not= 0 (mod (second %1) n))  (map list coll (iterate inc 1)))))","problem":41,"user":"535aba96e4b04ce2eb3ed2a8"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(when-not (zero? (rem (inc %1) n)) %2) xs))","user":"4db2903f535df7e46ed9b6bf"},{"problem":41,"code":"#(flatten (partition  (- %2 1) %2 nil %))","user":"5466aabbe4b01be26fd746e8"},{"code":"(fn [coll n]\n  (flatten\n    (concat \n     (map #(drop-last %) (partition n coll))\n     (take-last (rem (count coll) n) coll))))","problem":41,"user":"5254ef3de4b0541d1855b9b8"},{"problem":41,"code":"#(loop[result [], index %2, input %1]\n   (cond\n    (nil? input) result\n    (= index 1) (recur result %2 (next input))\n    :else (recur (conj result (first input)) (dec index) (next input))))","user":"556c70dae4b09a3098a524fd"},{"problem":41,"code":"(fn [l n] (map #(first %) (remove #(= 0 (mod (second %) n)) (map #(vector %1 (+ 1 %2)) l (range)))))","user":"553c05b7e4b09218d5f45011"},{"problem":41,"code":"(fn [seq n] \n  (flatten (map #(take (dec n) %) (partition-all n seq))))","user":"563c7f98e4b0bfe05bf11836"},{"problem":41,"code":"(fn [axs i]\n  (loop [xs axs ci i new-xs []]\n    (if (empty? xs)\n      new-xs\n      (if (= ci 1)\n        (recur (rest xs) i new-xs)\n        (recur (rest xs) (dec ci) (conj new-xs (first xs)))))))","user":"550174b5e4b07d26eda61d73"},{"code":"#(loop [total []\n         parts (partition-all %2 %)]\n    (if (not= %2 (count (first parts)) )\n      (flatten (conj parts total))\n      (recur (conj total ( drop-last (first parts))) (rest parts))\n      )\n    )","problem":41,"user":"51a865dfe4b08d8ec191b80f"},{"code":"(fn [lst n]\n  (mapcat #(if (= (count %) n) (butlast %) %)\n    (partition-all n lst)))","problem":41,"user":"509251f3e4b09a7d0b586de5"},{"problem":41,"code":"(fn drop-n [s n]\n  (loop [acc [] se s c 1]\n    (if (empty? se)\n      acc\n      (recur (if (zero? (rem c n)) acc (conj acc (first se)))\n             (rest se) (inc c)))))","user":"5292feb4e4b0239c8a67af39"},{"code":"(fn [c n] (keep-indexed #(if-not (= 0 (mod (inc %1) n)) %2) c))","problem":41,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn [coll n]\n  (loop [coll (seq coll)\n         n n\n         result nil]\n    (if (not (empty? coll))\n      (recur (drop n coll) n (concat result (take (dec n) coll)))\n      result)))","problem":41,"user":"4f16d3fd535d64f60314644e"},{"code":"(fn [s-in n] (loop [s s-in i 1 t []] (if (= 0 (count s)) t (if (not (zero? (rem i n))) (recur (rest s) (inc i) (conj t (first s))) (recur (rest s) (inc i) t)))))","problem":41,"user":"5235a902e4b0a643f2dcb750"},{"code":"(fn [s n]\n  (keep-indexed (fn it [i item]\n    (when (> (mod (inc i) n) 0) item)\n   ) s)\n  \n)","problem":41,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":41,"code":"#(flatten (map (fn [a] (take (- %2 1) a)) (partition-all %2 %1)))","user":"55a346e8e4b0acc240e31532"},{"problem":41,"code":"(fn [l c] (keep-indexed (fn [i x] (if (= 0 (mod (inc i) c)) nil x)) l))","user":"5329b493e4b09d4e7a9b5515"},{"problem":41,"code":"(fn [coll nth] (flatten (map #(take (dec nth) %) (partition-all nth coll))))","user":"57a9eddae4b0b8559636fc5f"},{"problem":41,"code":"(fn remove-every-nth [xs n]\n             (keep-indexed\n              (fn [i item] (if (not (= 0 (mod (inc i) n))) item))\n              xs))","user":"59d4d126e4b0ef0a1e9b5be9"},{"code":"(fn [l n] \n  (mapcat #(if (= (count %) n) (drop-last %) %)\n    (partition-all n l)))","problem":41,"user":"4f0333f6535dcb61093f6a77"},{"code":"(fn [s n]\n  (letfn [ (f [s n cnt lst]\n               (cond\n                 (empty? s) lst\n                 (= (mod cnt n) 0) (recur (rest s) n (inc cnt) lst)\n                 :else (recur (rest s) n (inc cnt) (concat lst (list (first s))))\n                ))]\n  (f s n 1 '())))","problem":41,"user":"4dd1de4d535dae65d5c462d7"},{"code":"(fn [coll n] (vec (map second (remove #(zero? (mod (inc (first %)) n)) (map-indexed vector coll)))))","problem":41,"user":"5269c150e4b03e8d9a4a71f8"},{"code":"(fn ! [xs n]\n    (concat\n        (take (dec n) xs)\n     (let [more (drop n xs)]\n       (if (empty? more) '() (! more n)))))","problem":41,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":41,"code":"(fn [x y] (apply concat (partition-all (dec y) y x)))","user":"5d6febe6e4b04d129b00f2d5"},{"problem":41,"code":"(fn [xs n]\n  (flatten (partition-all (dec n) n xs)))","user":"58765038e4b01531a375ea7e"},{"problem":41,"code":"(fn [coll n]\n  (loop [coll coll ind 1 dropped []]\n    (if (empty? coll)\n      dropped\n      (recur (rest coll) (inc ind) (if (= 0 (rem ind n)) dropped (conj dropped (first coll))))\n    )\n  )\n)","user":"5e09fd26e4b099d064962f60"},{"problem":41,"code":"(fn [vect mult]\n  (let [drop-every (fn lazy-drop-every [every coll]\n                     (lazy-cat (take (dec every) coll)\n                               (lazy-seq (lazy-drop-every every\n                                                     (drop every coll)))))]\n    (map vect \n         (take-while #(> (count vect) %)\n                     (drop-every mult (range))))))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn [seq n] (mapcat #(take (dec n) %) (partition-all n seq)))","problem":41,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":41,"code":"(fn [x y] (flatten (map #(nth % 1) (remove #(= (mod (+ 1 (nth % 0)) y) 0) (map-indexed #(list %1 %2) x)))))","user":"5b9263ece4b0c0b3ffbd4a37"},{"code":"(fn [s n]\n  (keep-indexed\n   (fn [i e] (when-not (= (dec n) (rem i n)) e))\n   s))","problem":41,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":41,"code":"(fn dropEveryN\n  ([ seq1 spacing ] (dropEveryN seq1 spacing [] 1))\n  ([ seq1 spacing acc index ] (if-let [ h (first seq1) ]\n                                (if (= (mod index spacing) 0)\n                                  \t(recur (rest seq1) spacing acc (inc index))\n                                  \t(recur (rest seq1) spacing (conj acc h) (inc index)))\n                                acc)))","user":"59f90e6ae4b0ca45a743a337"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(if (pos? (mod (inc %1) n)) %2) xs))","user":"546a6c7ce4b00cfc9eacc154"},{"problem":41,"code":"(fn v ([x y] (v x y (empty x) (dec y)))\n      ([x y z w] (if (empty? x)\n                 z\n                 (if (= w 0)\n                   (recur (rest x) y z (dec y))\n                   (recur (rest x) y (conj z (first x)) (dec w))))))","user":"55cf0d0ee4b0e31453f64a2b"},{"problem":41,"code":"(fn [s n] (keep-indexed #(if (not= 0 (rem (+ 1 %1) n)) %2) s))","user":"54524afbe4b0e397800069bc"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (letfn [(isNth? [n c] (if (= c 0) false (= (rem c n) 0)))]\n    (loop [results [(first coll)]\n          counter 2]\n      (if (= counter (inc (count coll)))\n        results\n        (if (isNth? n counter)\n          (recur\n            results\n            (inc counter))\n          (recur \n            (conj results (get coll (dec counter)))\n            (inc counter)))))))","user":"5a3c06fce4b001c08efc0cdd"},{"problem":41,"code":"(fn [s n] (->> (map (fn [a b] (if (= 0 (rem b n)) nil a)) s (rest (range)))\n               (filter identity)\n               (into [])))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":41,"code":"(fn drop-nth\n  [elems n]\n  (keep-indexed (fn [index item] (if (= (mod (+ index 1) n) 0) nil item)) elems))","user":"54e0e911e4b024c67c0cf7bc"},{"problem":41,"code":"(fn [xs n] \n(->>  \n \t(range 1 (inc (count xs)))\n \t(filter #(not= (rem % n) 0))\n\t(map dec )\n    (map #(nth xs %) )  \n )\n  )","user":"5921a080e4b09b4ee5954c77"},{"problem":41,"code":"(fn [col n] (remove #(some #{%} (take-nth n (concat '(0) col))) col))","user":"5dbd51cfe4b09f47823971bb"},{"code":"#(let\n      [current-count (atom 1)\n\t     ret (atom [])]\n\t     (letfn\n\t      [(push-item [x]\n\t\t\t  (if (= %2\n\t\t\t         @current-count)\n\t\t\t      (reset! current-count 1)\n\t\t\t      (do\n\t\t\t        (swap! current-count inc)\n\t\t\t\t(swap! ret conj x))))]\n\t      (doseq [z %1] (push-item z))\n\t      @ret))","problem":41,"user":"4f601623e4b0defedf855fa3"},{"code":"(fn rm-n [l x]\n  (cond (or (nil? l) (empty? l)) ()\n      :else\n    \t(concat\n    \t  (take (dec x) l)\n          (rm-n (drop x l) x))))","problem":41,"user":"4eb9c82d535dfed6da9c6d5c"},{"code":"(fn  [coll n]\n  (loop [sq coll result []]\n   (if (empty? sq) result\n  (recur (drop n sq)  (concat result (take (- n 1) sq))))))","problem":41,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":41,"code":"(fn dropnth [lst interval]\n    (letfn [(dropper [index rst]\n              (if (empty? rst)\n                ()\n                (if (= 0 (mod index interval))\n                  (dropper (inc index) (rest rst))\n                  (cons (first rst) (dropper (inc index) (rest rst))))))]\n      (dropper 1 lst)))","user":"588e8133e4b00487982d5191"},{"code":"(fn [coll pos] \n  (flatten (reduce (fn [coll x] (if (= (rem (inc (count coll)) pos) 0)\n                   (conj coll '())\n                   (conj coll x)))\n          [] \n          coll)))","problem":41,"user":"52fa4f48e4b047fd55836ff7"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed\n   (fn [index item]\n     (if (zero? (rem (+ 1 index) n))\n       nil\n       item))\n   xs))","user":"56ee905be4b04a395b9a044f"},{"problem":41,"code":"(fn [coll orig-n]\n  (loop [coll coll n orig-n acc []]\n    (if (empty? coll)\n      acc\n      (if (= 1 n)\n        (recur (rest coll) orig-n acc)\n        (recur (rest coll) (dec n) (conj acc (first coll)))))))","user":"55afc197e4b002ce9d5cbc18"},{"code":"(fn [coll p] (apply concat (partition-all (dec p) p coll)))","problem":41,"user":"5116e176e4b0063b4e3e16d7"},{"code":"(fn \n   [coll n] \n   (let [all-pairs (map (fn [x y] [x y]) (cycle (range 0 n)) coll)\n         pairs     (filter (fn [[j x]] (< j (- n 1))) all-pairs)]\n     (map #(second %) pairs)))","problem":41,"user":"52e55e16e4b09f7907dd1460"},{"code":"(fn [ls n]\n  (filter #(not= % nil) (flatten (map (partial take (dec n)) (partition n n [nil] ls)))))","problem":41,"user":"52aa4a67e4b0c58976d9ac62"},{"problem":41,"code":"#(flatten (partition-all (dec %2) %2  %1))","user":"595d2041e4b066ee0a44b014"},{"problem":41,"code":"(fn [col N]\n           ((fn my-dropNth [result idx]\n              (if (= idx (count col))\n                result\n                (if (= 0 (mod (+ idx 1) N))\n                  (recur result (+ idx 1))\n                  (recur (concat result (list (nth col idx))) (+ idx 1)))))\n            '() 0))","user":"5e1c3e6ee4b0dc9594008530"},{"code":"(fn [array n] \n  (remove nil?\n    (map-indexed \n      (fn [i item] \n        (when-not (zero? (mod (+ i 1) n)) item))\n      array)))","problem":41,"user":"538c9144e4b0b51d73faae5d"},{"problem":41,"code":"(fn [s n](mapcat (partial take (dec n)) (partition-all n s)))","user":"57b4779de4b0fbc9809a279a"},{"problem":41,"code":"(fn [coll n]\n  (loop [i 1\n         [hd & tl] coll\n         final []]\n    (let [do-drop? (= i n)\n          final (if do-drop?\n                  final\n                  (conj final hd))]\n      (if (empty? tl)\n        final\n        (recur (if do-drop? 1 (inc i)) tl final)))))","user":"53fb5256e4b0de5c4184857f"},{"code":"#(for [[i n] (map list % (range (count %))) :when (not= (rem (inc n) %2) 0)] i)","problem":41,"user":"4f608f0ee4b0defedf855faa"},{"problem":41,"code":"(fn drop-n\n  [col n] \n  (keep-indexed \n    (fn [index item] \n      (if (not= 0 (mod (inc index) n))\n          item \n          nil))\n    col))","user":"55842bd7e4b05c286339e11c"},{"problem":41,"code":"(fn [x y] (flatten (map #(take (dec y) %) (partition-all y x))))","user":"582c986ee4b051871117bf9b"},{"problem":41,"code":"(fn dropnthitem [lst n]\n  (loop\n    [todo lst ret [] c 1]\n    (if (empty? todo)\n      ret\n      (let \n        [h (first todo)]\n        (if (= 0 (mod c n))\n          (recur (rest todo) ret (inc c))\n          (recur (rest todo) (conj ret h) (inc c))\n        )\n      )  \n    )\n  )\n)","user":"5d0aab50e4b0cc9c91588220"},{"code":"#(flatten (map drop-last (partition %2 %2 [\"a\"] %1)))","problem":41,"user":"4f0cd1c9535d0136e6c22311"},{"problem":41,"code":"(fn [l n] (keep-indexed #(if (not= (mod (+ %1 1) n) 0) %2) l))","user":"6040f595e4b0d5df2af2232f"},{"code":"(fn dn [s n] \n  (mapcat \n    #(if (= (count %) n) (butlast %) %)\n    (partition-all n s)\n  )\n)","problem":41,"user":"4f8b56dae4b02e764a0a517e"},{"problem":41,"code":"(fn [xs d] (map last (filter #(not= (mod (inc (first %)) d) 0) (map-indexed vector xs))))","user":"594bc7d6e4b07ddc2dafae3d"},{"code":"#(keep-indexed (fn [i o] (if (= 0 (mod (+ 1 i) %2)) nil o)) %)","problem":41,"user":"4e6a48d5535d8ccf87e9febd"},{"code":"#(mapcat drop-last (partition %2 %2 [nil] %))","problem":41,"user":"50fe9d60e4b03cd852b4e84f"},{"code":"(fn [coll nth]\n  (reduce (fn [x y] (if (zero? (mod (count y) nth)) (concat x (drop-last y)) (concat x y))) [] (partition-all nth coll)))","problem":41,"user":"509a25b7e4b0efbae1fbc0a8"},{"code":"(fn [coll n]                                                                                                                                             \n           (loop [i 0 r [] c coll]                                                                                                                              \n              (if (seq c)                                                                                                                                       \n                  (if (zero? (rem (inc i) n))                                                                                                                   \n                      (recur (inc i) r (rest c))                                                                                                                \n                      (recur (inc i) (conj r (first c)) (rest c)))                                                                                              \n                  r)))","problem":41,"user":"4e4be570535dc968683fc4d8"},{"problem":41,"code":"(fn  \n  [xs n]\n  (vec \n    (map #(first %) \n      (filter #(not= (mod (inc (second %)) n) 0) \n        (map #(list %1 %2) xs (range))))))","user":"55f90d76e4b03cbcff9738bd"},{"problem":41,"code":"(fn [coll i] (keep-indexed #(if (not (= (mod (+ 1 %) i) 0)) %2) coll))","user":"5be96111e4b0f319e2d7ec70"},{"problem":41,"code":"#(loop [n %2 s %1 r []]\n    (if (empty? s)\n      r\n      (recur\n       n\n       (drop n s)\n       (concat\n        r\n        (take (dec n) s) \n       )\n      )\n     )\n    )","user":"5c0d0537e4b0bdcf453d173d"},{"problem":41,"code":"#(keep-indexed (fn [i v] (if-not (zero? (rem (inc i) %2)) v)) %1)","user":"5f393bd6e4b0574c87022c76"},{"code":"(fn bob [s i]\n  (let [tt (- i 1)]\n    (into (vec (take tt s)) (if (next s) (bob (drop i s) i) []))))","problem":41,"user":"5191e91de4b08962174cf733"},{"problem":41,"code":"(fn [l x]\n  (keep-indexed #(if (not= (rem (inc %1) x) 0) %2) l))","user":"559057c4e4b027778923766e"},{"problem":41,"code":"(fn [x d] (flatten (partition (dec d) d nil x)))","user":"5cae53fbe4b026601754b885"},{"code":"#(apply concat (map butlast (partition %2 %2 [nil] %1)))","problem":41,"user":"5093a80be4b097f48cc38583"},{"code":"(fn [l c] (mapcat #(if (= c (count %)) (drop-last %) %) (partition-all c l)))","problem":41,"user":"50c4ff23e4b0210b849018b8"},{"code":"(fn [x y]\n    (flatten\n     (map #(if (< (count %) y)\n             %\n             (take (- y 1) %))\n          (partition-all y x))))","problem":41,"user":"4eae2f9e535d7eef30807324"},{"code":"#(map second (remove (fn [ele] (= (- %2 1) (rem (first ele) %2))) (map-indexed vector %)))","problem":41,"user":"51b90b88e4b050a1176cd6a2"},{"problem":41,"code":"(fn drop-every [xs n]\n   (if (seq xs)\n     (concat (take (dec n) xs)\n             (drop-every (drop n xs) n))))","user":"57e10705e4b0bfb2137f5a6a"},{"problem":41,"code":"(fn [coll num]\n    (apply\n      concat\n      (map\n        rest\n        (partition-all num\n                       (cons\n                         :nevermind\n                         (seq coll))))))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":41,"code":"(fn [list position]\n  (loop [pos 1\n         list list\n         result []]\n    (cond\n      (empty? list) result\n      (= (mod pos position) 0) (recur\n                        (inc pos)\n                        (rest list)\n                        result) \n      :else (recur\n             (inc pos)\n             (rest list)\n             (conj result (first list))))))","user":"5e860270e4b09a7a73c8bbdb"},{"code":"(fn [xs n]\n  (map last (filter #(not= 0 (mod (inc (first %)) n)) (map-indexed #(vector %1 %2) xs))))","problem":41,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":41,"code":"(fn dropn\n      ([left_v mod_n] (dropn left_v (dec mod_n) [] 0))\n      ([left_v mod_n new_v curr_i]\n       (if (empty? left_v)\n         new_v\n         (if (= curr_i mod_n)\n           (dropn (rest left_v) mod_n new_v 0)\n           (dropn (rest left_v) mod_n (conj new_v (first left_v)) (inc curr_i))))))","user":"5c76577ae4b0fca0c16227ea"},{"problem":41,"code":"(fn [sq n]\n           (let [n- (dec n)\n                 aux \n                 (fn [[head & tail] idx acc]\n                   (cond\n                    (nil? head)\n                    acc\n\n                    (zero? idx)\n                    (recur tail n- acc)\n              \n                    :else \n                    (recur tail (dec idx) (conj acc head))))]\n             (aux sq n- [])))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":41,"code":"(fn dropnth\n  [elms n]\n  (flatten (concat (map #(if (= (count %) n) (butlast %) %) (partition-all n elms))))\n)","user":"5d828b7ee4b0915913b1d382"},{"problem":41,"code":"#(keep-indexed (fn [i v] (if (not (= (mod (+ 1 i) %2) 0)) v)) %1 )","user":"5592bf9fe4b0c79f6e1db933"},{"problem":41,"code":"(fn [xs n]\n  (get (reduce (fn [acc x]\n            (let [[curn newseq] acc]\n              ;(throw (Exception. (str newseq)))\n              (if (= curn 1) [n newseq] [(- curn 1) (conj newseq x)] )\n              )\n            ) [n []] xs) 1)\n  )","user":"5e6b9955e4b04a83ad7cd27b"},{"code":"#(loop [i %1 o []] (if (< (count i) %2) (concat o i) (recur (drop %2 i) (concat o (take (dec %2) i)))))","problem":41,"user":"50921f9ae4b09a7d0b586de1"},{"problem":41,"code":"(fn [v n]\n  (let [keepers (cycle (reverse (conj (repeat (dec n) true) false)))]                                                              \n    (->> (mapv #(when %1 %2) keepers v)                                                 \n         (remove nil?)\n         vec)))","user":"5c06fab7e4b0bdcf453d16bd"},{"problem":41,"code":"(fn dropn [col idx]\n  (mapcat #(if (= idx (count %)) (butlast %) %)  (partition-all idx col))\n  )","user":"5b250773e4b063e2438bcc21"},{"code":"#(loop [l %1 i 0 ans []]\n  (cond\n    (empty? l) ans\n    (= (mod i %2) (dec %2)) (recur (rest l) (inc i) ans)\n    :else (recur (rest l) (inc i) (conj ans (first l)))\n  )\n)","problem":41,"user":"51f09f3de4b0274c496158d7"},{"problem":41,"code":"(fn [xs n]\n  (reduce (fn [a [idx x]] (if (zero? (mod (inc idx) n)) a (conj a x))) [] (map-indexed vector xs)))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":41,"code":"(fn [ x n ]\n  (loop [v x\n         i 1\n         r []]\n    (if (empty? v)\n       r\n      (if (not= i n)\n      \t(recur (rest v) (inc i) (conj r (first v) ))\n      \t(recur (rest v) 1 r)))))","user":"55252392e4b0882d96d091cc"},{"problem":41,"code":"(fn dropnth [xs n]\n  (if\n    (> n (count xs))\n    xs\n    (concat (take (dec n) xs) (dropnth (drop n xs) n)))\n  )","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":41,"code":"(fn [s i]\n  (apply concat (partition-all(dec i) i s)))","user":"5080d6e3e4b01a93d3f38e4b"},{"code":"(fn [xs n](for [[x i] (map vector xs (iterate inc 1)) :when (not= 0 (mod i n))] x))","problem":41,"user":"4ebbb6bc535dfed6da9c6d71"},{"problem":41,"code":"(fn drop-nth                                                                                                                                \n  ([s n] (drop-nth s n 1))                                                                                                                    \n  ([s n i]                                                                                                                                    \n   (if (empty? s)                                                                                                                             \n     s                                                                                                                                        \n    (let [fst (first s)                                                                                                                       \n          rst (rest s)]                                                                                                                       \n      (if (= n i)                                                                                                                             \n        (drop-nth rst n 1)                                                                                                                    \n        (cons fst (lazy-seq (drop-nth rst n (inc i))))                                                                                        \n        )                                                                                                                                     \n      )                                                                                                                                       \n    )                                                                                                                                         \n   )                                                                                                                                          \n  )","user":"56fbe0cce4b07572ad1a88d8"},{"problem":41,"code":"(fn [coll i] (into [] (filter #(not (zero? (mod (inc (.indexOf coll %)) i))) coll)))","user":"54a6baaee4b09f271ff37c8a"},{"problem":41,"code":"(fn [l n] (loop [i 1 new-list [] remaining l]\n                     (cond (empty? remaining) new-list\n                           (= 0 (mod i n)) (recur (inc i) new-list (rest remaining))\n                           :else (recur (inc i) (conj new-list (first remaining)) (rest remaining)))))","user":"5d439775e4b07c84aa5ae696"},{"code":"(fn [s1 skip] (keep-indexed #(if (not= 0 (mod (inc %1) skip)) %2) s1))","problem":41,"user":"4f515bd3e4b03ad3f0c10d1f"},{"problem":41,"code":"(fn drop-nth [s t] (if (empty? s)\n                     '()\n                     (concat (take (dec t) s) (drop-nth (drop t s) t))))","user":"53de622ce4b0d874e779ae34"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (pos? (rem (inc %) n)) %2) coll))","user":"538f4c1de4b0b51d73faae8c"},{"problem":41,"code":"(fn [v n] (mapcat #(take (- n 1) %) (partition-all n v)))","user":"529e8ba9e4b04e0c58e87b99"},{"code":"(fn drop-nth [coll n]\n  (loop [coll coll acc []]\n\t(if (empty? coll)\n         acc\n\t\t(recur (drop n coll) (concat acc (take (dec n) coll))))))","problem":41,"user":"528b08efe4b0239c8a67ae8a"},{"problem":41,"code":"(fn [c n] (->>\n   (partition-all (dec n) n c)\n   (flatten)\n ))","user":"54c8eb61e4b045293a27f658"},{"problem":41,"code":"#(flatten (partition-all (dec %2)%2 %1))","user":"5f81de6ce4b0c071e6c840f5"},{"problem":41,"code":"#(loop [xs %1 i %2 acc []] (cond (empty? xs) acc (= 1 i) (recur (rest xs) %2 acc) :else (recur (rest xs) (dec i) (conj acc (first xs)))))","user":"524f3e6de4b0541d1855b805"},{"problem":41,"code":"(fn [c n] (remove #(= 0 (mod (inc (.indexOf c %)) n)) c))","user":"523578efe4b0a643f2dcb74c"},{"code":"(fn [s n]\n (flatten \n  (map #(if (= n (count %)) (drop-last %) %) (partition-all n s))))","problem":41,"user":"51eab308e4b0f1f103a0d150"},{"code":"(fn [seqv skip] \n   (for [x (range (count seqv))\n         :when (not (= (mod (inc x) skip) 0))]\n     (get seqv x)))","problem":41,"user":"52213426e4b0e6a83c8925c4"},{"code":"#(for [x % :when (not= 0 (mod (inc (.indexOf % x)) %2))] x)","problem":41,"user":"50563ae2e4b0ce54f56f0405"},{"problem":41,"code":"(fn drop-nth [x n]\n  (flatten ((fn nther [xs] (cond\n    (empty? xs) '()\n    :else (conj \n            (nther (drop n xs)) \n            (take (- n 1) xs)))) x)))","user":"5374f931e4b06d7f452d9e2d"},{"problem":41,"code":"(fn [coll step]\n  (flatten (partition-all (- step 1) step coll)))","user":"541c1e46e4b01498b1a71a70"},{"code":"#(into (empty %1) (apply concat (partition-all (dec %2) %2 %1)))","problem":41,"user":"534e9ed4e4b084c2834f4ab8"},{"problem":41,"code":"(fn [alist div]\n  (for [len (range (count alist))\n        :let [thisnum (nth alist len)]\n        :when (not= (rem (+ len 1) div) 0)]\n    thisnum))","user":"5705e404e4b0b0fb43fd0676"},{"problem":41,"code":"(fn [s n]\n    (mapcat #(take (dec n) %)\n            (partition-all n s)))","user":"52e1c276e4b09f7907dd142b"},{"problem":41,"code":"(fn drop-nth [items n]\n  (loop [all-items items\n         final-items []]\n    (if (empty? all-items)\n      final-items\n      (recur \n        (drop n all-items)\n        (concat final-items (take (- n 1) all-items))))))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"problem":41,"code":"(fn [coll index]\n   (loop [colle coll\n          new-coll []\n          cont 1]\n     (if (empty? colle)\n       new-coll\n       (let [elem (first colle)\n             resto (rest colle)\n             time-to-drop? (= cont index)\n             new-cont (if (= cont index) 1 (inc cont))]\n         (recur resto (if time-to-drop? new-coll (conj new-coll elem)) new-cont)))))","user":"58a34442e4b02bd94d917ef2"},{"problem":41,"code":"(fn [sq n]\n  (loop [i 1 \n         s (conj (empty sq) (first sq))]\n    (if (= (count sq) i) \n      s\n      (recur (inc i) (if (= 0 (rem (inc i) n)) s (conj s (nth sq i)))))))","user":"558bb38fe4b0277789237631"},{"problem":41,"code":"#(apply concat (map identity (partition-all (dec %2) %2 %)))","user":"5bfc082be4b0bdcf453d15e1"},{"code":"(fn [coll n]\n    (apply\n      concat\n      (map\n        (partial take (dec n))\n        (partition n n [] coll))))","problem":41,"user":"4e5be681535d8a8b8723a2bc"},{"code":"#(keep-indexed\n  (fn [index item]\n    (if (zero? (mod (inc index) %2))\n      nil\n      item))\n  %1)","problem":41,"user":"502ac96de4b0614b5299611b"},{"code":"(fn [l n] (keep-indexed #(if (not= (- n 1) (mod %1 n)) %2) l))","problem":41,"user":"4f048ebc535dcb61093f6bd2"},{"code":"(fn [s n] \n  (mapcat \n    (fn [s2] \n      (if (= (count s2) n)\n        (drop-last s2)\n        s2))\n    (partition-all n s)))","problem":41,"user":"4f559d2ce4b0a7574ea71808"},{"problem":41,"code":"(fn drop-every-nth [col n]\n  (->> col\n       (partition n n (repeat :nil))\n       (mapcat butlast)\n       (filter #(not= :nil %))))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":41,"code":"(fn [sequence n] (vec (flatten (map #(if (= n (count %)) (drop-last %) %) (#(partition-all %1 %2) n sequence)))))","user":"52b89d55e4b07a9af57922b3"},{"code":"(fn [lst n]\n  (mapcat #(take (dec n) %) (partition-all n lst)))","problem":41,"user":"4f244f26e4b0d66497709fea"},{"problem":41,"code":"(fn dropNth\n  [coll index]\n  \"Returns a collection where every nth element\n  from the original collection is missing\"\n  (if (> index (count coll))\n    coll\n    (concat (take (- index 1) coll) (dropNth (drop index coll) index))))","user":"55a9e0fee4b0988bba2ad945"},{"problem":41,"code":"(fn [coll n]\n  (loop [x 1 c coll acc []]\n    (if (empty? c)\n      acc\n      (if (= (mod x n) 0)\n        (recur (inc x) (rest c) acc)\n        (recur (inc x) (rest c) (conj acc (first c)))))))","user":"5db6cc4ae4b010eb3c36cd3b"},{"problem":41,"code":"(fn [col n]\n  (flatten (map\n            #(take (- n 1) %)\n            (partition-all n col))))","user":"5a912080e4b002d099cae6ea"},{"code":"(fn [l n] (mapcat #(if (= (dec n) %1) [] [%2])\n                   (map #(mod % n) (range))\n                   l))","problem":41,"user":"4ee868be535d93acb0a6687d"},{"problem":41,"code":"#(loop [i 0 acc []] \n   (if \n     (>= i (count %1)) \n     acc \n     (if \n       (= 0 (mod (+ i 1) %2))\n       (recur (+ i 1) acc)\n       (recur (+ i 1)\n              (conj acc (nth %1 i))\n              ))))","user":"5dd44256e4b0948ae9d9ad69"},{"code":"(fn [s c]\n  (let [indexed-tuples (partition 2 (interleave s (next (range))))\n        filter-func (fn [[x i]] (> (mod i c) 0))\n        valid-tuples (filter filter-func indexed-tuples)]\n   (map first valid-tuples)))","problem":41,"user":"5261aebbe4b03e8d9a4a7066"},{"problem":41,"code":"(fn drop-every-nth\n  [xs n]\n  (mapcat #(take (dec n) %) (partition-all n xs)))","user":"592af6eee4b072a2710fcf2c"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed \n    (fn [index item]\n      (if (pos? (rem (inc index) n)) item))\n    coll))","user":"55842c7ee4b05c286339e11d"},{"code":"(fn [s n]\n  (loop [rr [] ss s nn n]\n    (if (empty? ss)\n      rr\n      (if (= 1 nn)\n        (recur rr (rest ss) n)\n        (recur (conj rr (first ss)) (rest ss) (dec nn))))))","problem":41,"user":"4e5c801e535d8a8b8723a2c1"},{"code":"(fn [s n]\n   (mapcat\n     #(if (= n (count %1)) (drop-last %1) %1)\n     (partition-all n s)))","problem":41,"user":"4f128865535d64f603146428"},{"code":"#(map\n     (fn [i] (nth %1 i))\n     (filter\n       (fn [x] (not= (mod (+ x 1) %2) 0))\n       (range 0 (count %1))\n     )\n  )","problem":41,"user":"527513d8e4b03e8d9a4a74bd"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(when (not= (- n 1) (rem %1 n)) %2) coll))","user":"5ccf2dc3e4b0ccb0619628c2"},{"problem":41,"code":";;(fn d [s n] (mapcat #(take (dec n) %) (partition-all n s)))\n\n#(mapcat (partial take (dec %2)) (partition-all %2 %1))","user":"540e0637e4b0addc1aec6717"},{"problem":41,"code":"(fn [xs nth] (apply concat (map-indexed (fn [index item] (if (zero? (mod (+ index 1) nth)) nil (list item))) xs)))","user":"5601bb7ee4b04bb52996e195"},{"problem":41,"code":"(fn [ss n]\n  (->> (partition-all n ss)\n      (map (partial take (dec n)))\n      (flatten)))","user":"56c2c342e4b05cc29241ee85"},{"problem":41,"code":"(fn [seq index]\n  (loop [i 1 res [] seq-iter seq]\n    (cond (empty? seq-iter)\n            res\n          (= 0 (mod i index))\n            (recur (inc i) res (rest seq-iter))\n          (not= 0 (mod i index))\n            (recur (inc i) (conj res (first seq-iter)) (rest seq-iter)))))","user":"5965a773e4b069c0a1a1978a"},{"problem":41,"code":"(fn [s n]\n   (let [dropnth (fn [s n cnt acc]\n                   (if (empty? s) (reverse acc)\n                     (if (= cnt n) (recur (rest s) n 1 acc)\n                       (recur (rest s) n (inc cnt) (cons (first s) acc)))))]\n     (dropnth s n 1 '())))","user":"57780e4fe4b0979f89651657"},{"problem":41,"code":"(fn [xs n] (map first (filter (fn [x] (not (= (mod (second x) n) (- n 1)))) (map vector xs (range)))))","user":"577a74f7e4b0d3393e5deafa"},{"problem":41,"code":"#(remove nil? (map-indexed (fn [i x] (if (zero? (rem (inc i) %2)) nil x )) %1))","user":"56bb9ccce4b0f26550335959"},{"code":"(fn [drop-seq n] (loop [d-seq drop-seq accum 1 result []]\n                                 (let [new-drop (drop 1 d-seq)]\n                                    (cond\n                                      (empty? d-seq) result\n                                   \t  (= accum n)(recur new-drop 1 result)\n                                      :else (recur new-drop (+ 1 accum) (conj result (first d-seq)))) \n                                   )))","problem":41,"user":"52711255e4b03e8d9a4a73d7"},{"problem":41,"code":"(fn ldrop [x a &[c]]\n    (cond\n      (nil? c) (ldrop x a 1)\n      (nil? (first x)) nil\n      (= c a) (ldrop (rest x) a 1)\n      :else\n        (concat (list (first x)) (ldrop (rest x) a (+ c 1)))\n    )  \n  )","user":"5e1d01b5e4b0dc9594008542"},{"code":"(fn dn [s n]\n  (if (< (count s) n) s\n  (concat (take (dec n) s) (dn (drop n s) n))))","problem":41,"user":"4f036fb3535dcb61093f6ac8"},{"problem":41,"code":"(fn drop-every-n [s n] (if (>= (count s) n)\n                         (concat (take (dec n) s) (drop-every-n (drop n s) n))\n                         s))","user":"5ee93720e4b029a2061bbeb7"},{"problem":41,"code":"(fn [s n]\n  (loop [[f & r :as a] s\n         acc []\n         cnt 1]\n    (cond (empty? a) acc\n          (= cnt n) (recur r acc 1)\n          :else (recur r (conj acc f) (inc cnt)))))","user":"59750a68e4b01722bebd4cba"},{"code":"(fn [a b] (let [c (map #(list %1 %2) a (take (count a) (iterate inc 1)))] (map #(first %) (filter #(not= (mod (second %) b) 0) c))))","problem":41,"user":"53858594e4b06839e8705f05"},{"problem":41,"code":"(fn [s step]\n  (loop [s s, res []]\n    (let [these (take (dec step) s)\n          other (drop step s)]\n      (if (empty? s)\n        res\n        (recur other (concat res these))))))","user":"5f5df0bfe4b02876ed9fcfeb"},{"problem":41,"code":"(fn drop[x y] \n  (if (< (count x) y) x\n    (concat (take (dec y) x) (drop (nthrest x y) y))))","user":"5d63b06be4b0c9e5857d5025"},{"problem":41,"code":"#(->> %1\n      (map-indexed (fn [x y] (vector (inc x) y)))\n      (filter (fn [[x y]] (not= 0 (mod x %2))))\n      (map second))","user":"5c664b87e4b0fca0c16226a5"},{"code":"(fn [xs n]\n  (->> xs\n       (partition-all n)\n       (mapcat #(take (- n 1) %))))","problem":41,"user":"51ac6360e4b09397d510976c"},{"problem":41,"code":"#(map \n  (fn [[v _]] v) \n  (filter \n   (fn [[_ i]] (not= (mod i %2 ) 0)) \n   (map list %1 (iterate inc 1))))","user":"5fae3d8ae4b08cb800c85afa"},{"problem":41,"code":"(fn [coll n]\n  (let [predicate #(and (= 0 (mod % n))    \n                        (not= 0 %)) ]\n    (keep-indexed (fn [i x] (if-not (predicate (inc i)) x)) coll )))","user":"593dde1be4b069cdc2982baf"},{"problem":41,"code":"(fn mynth\n\t[myseq idx]\n\t(loop\n\t\t[myrest myseq cnt 1 res nil]\n\t\t(if (empty? myrest)\n\t\t\tres\n\t\t\t(if (= 0 (rem cnt idx) )\n\t\t\t\t(recur (rest myrest) (inc cnt) res)\n\t\t\t\t(recur (rest myrest) (inc cnt) (concat res (list (first myrest))))\n\t\t\t\t)\n\t\t\t)))","user":"55897fe2e4b059ccff29b205"},{"problem":41,"code":"(fn z [seq n]\n  (loop [cnt 0 rslt [] ]\n    (if (<= (count seq) cnt)\n      rslt \n      (recur (inc cnt) (if (> (mod (inc cnt) n) 0) \n                 (concat rslt [(nth seq cnt)])\n                 rslt)))))","user":"572ac718e4b0f4d77e651242"},{"code":"(fn [coll n]\n  (flatten (map (partial take (- n 1)) (partition-all n coll))))","problem":41,"user":"50630247e4b05ac47bc68d6b"},{"problem":41,"code":"(fn [l b]\n  (loop [n 1 s l d []]\n   (if (> n (count l)) d\n     (recur (inc n) (rest s) (if (integer? (/ n b)) d\n                               (concat d [(first s)]))))))","user":"558378dce4b05c286339e115"},{"code":"(fn drop-every-nth[x n](if (< (count x) n)\n                           x\n                           (concat (take (dec n) x) (drop-every-nth (drop n x) n))\n                           )\n                    )","problem":41,"user":"52a1edd6e4b04e0c58e87be4"},{"code":"(fn [xs n] (keep-indexed (fn [i x] (when (pos? (rem (inc i) n)) x)) xs))","problem":41,"user":"50fe2b87e4b03cd852b4e84b"},{"problem":41,"code":"(fn [col n]\n  (->> col\n       (map #(vector %1 %2) (range 1 (inc (count col))))\n       (filter #(not= 0 (mod (first %) n)))\n       (map second)))","user":"5541fa50e4b0a04f79299515"},{"problem":41,"code":";#(apply concat (partition-all (- %2 1) %2 %1))\n#(apply concat (partition-all (dec %2) %2 %1))","user":"581b19e7e4b04b46fc4b0ec4"},{"problem":41,"code":"; ok, ok this is a hack :-P\n#(distinct (concat (mapcat drop-last (partition %2 %1)) (take-last (if (= %2 2) 0 2) %1)))","user":"4eb171d7535d7eef30807340"},{"code":"(fn dropnth [s n] \n  (if (empty? s) []\n    (concat (take (dec n) s) (dropnth (nthrest s n) n))))","problem":41,"user":"533ab9abe4b0e30313ee6cbf"},{"code":"(fn dnth [xs n]\r\n  (reverse \r\n    (loop [xs xs n n c (- n 1) acc '()]\r\n      (cond\r\n        (empty? xs) acc \r\n        (= 0 c) (recur (rest xs) n (- n 1) acc)\r\n        :else (recur (rest xs) n (- c 1) (cons (first xs) acc))))))","problem":41,"user":"4dc7e7a5535d8a4b2fd74290"},{"problem":41,"code":"(fn [colls n] (mapcat #(take (dec n) %) (partition-all n colls)))","user":"5a67cedbe4b0512ff01cd9ee"},{"problem":41,"code":"(fn dropnth [xs n] (if (empty? xs) xs (concat (take (dec n) xs) (dropnth (nthrest xs n) n))))","user":"5600f8c7e4b04bb52996e176"},{"code":"(fn dpn \n  ([coll n] (dpn coll n 1))\n  ([coll n c]\n    (cond \n      (empty? coll) ()\n      (= n c) (dpn (rest coll) n 1)\n      :else (cons (first coll) (dpn (rest coll) n (inc c))))))","problem":41,"user":"4fbb9d80e4b081705acca2ea"},{"problem":41,"code":"(fn [c n] (keep-indexed #(if (= (mod (inc %) n) 0) nil %2) c))","user":"55773cbae4b05c286339e07f"},{"code":"(fn drop-nth [s n]\n\t  (cond (empty? s) ()\n\t\t:else (concat (take (- n 1) s) (drop-nth (drop n s) n))))","problem":41,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn f [s n]\n  (loop [agg [] s* s]\n    (if (empty? s*)\n      agg\n      (recur (concat agg (let [x (take n s*)]\n                           (if (> n (count x))\n                             x\n                             (drop-last x))))\n        (drop n s*)))))","problem":41,"user":"51d662fce4b0154f82ab92ef"},{"problem":41,"code":"(fn myF [xs n] (mapcat #(if (= n (count %)) (drop-last %) (identity %)) (partition-all n xs)))","user":"56eff7c1e4b04a395b9a0468"},{"problem":41,"code":"(fn [s n] (mapcat (fn [i] (take (- n 1) i)) \n     (partition-all n s)))","user":"571543bbe4b07c98581c3ad4"},{"code":"(fn asdf\r\n  [coll n]\r\n  (mapcat #(take (dec n) %) (partition-all n coll))\r\n  )","problem":41,"user":"509b152be4b0412cdea6eb1e"},{"problem":41,"code":"(fn [xs d]\n  (keep-indexed\n   (fn [i item]\n     (if (not (zero? (mod (inc i) d)))\n       item)) xs))","user":"5188c249e4b0bdff0e072d54"},{"problem":41,"code":"(fn __ [s v] (mapcat (partial take (dec v)) (partition-all v s)))","user":"5be2e670e4b0ed4b8aab4ccc"},{"problem":41,"code":"(fn [list n]\n  (flatten\n  (map #(take (- n 1) %1)\n  \t(partition-all n list)\n  )\n   )\n)","user":"55b3e8aee4b01b9910ae2977"},{"code":"(fn [xs len]\n  (mapcat\n   (partial #(if (< (count %2) %1) %2 (butlast %2)) len)\n   (partition-all len xs)))","problem":41,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"code":"(fn [s,n] (map #(s (dec %)) (filter (complement #(= 0 (rem % n))) (map inc (range (count s))))))","problem":41,"user":"4ff76effe4b0678c553fc390"},{"problem":41,"code":"(fn [xs step]\n  (let [ts (partition-all step xs)]\n    (mapcat #(if (= (count %) step) (drop-last %) %) ts)))","user":"540ff039e4b01498b1a7199b"},{"problem":41,"code":"#(flatten (map butlast (partition %2 %2 [nil] %1)))","user":"56743413e4b05957ce8c612e"},{"problem":41,"code":"(fn [x y] (flatten (partition (- y 1) y nil x)))","user":"58b84c28e4b0ebc645576d94"},{"code":"(fn f [coll n]\n (into [] \n ((fn drop-nth\n  ([coll n] (drop-nth coll n 0))\n  ([coll n pos]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (if (= (inc pos) n)\n       (drop-nth (rest s) n 0)\n       (cons (first s) (drop-nth (rest s) n (inc pos)))))))\n ) coll n)\n  \n))","problem":41,"user":"52bf936ee4b07a9af579233b"},{"code":"(fn [col n]\n  (loop [col col\n         i 1\n         res []]\n    (if (nil? (first col))\n      res\n      (if (= n i)\n        (recur (rest col) 1 res)\n        (recur (rest col) (inc i) (concat res (list (first col))))))))","problem":41,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn [xs n] \n  (keep-indexed \n    (fn [i e] \n      (when (not= (dec n) (mod i n)) e)) xs))","problem":41,"user":"4e4c238f535dc968683fc4dc"},{"code":"(fn [xs n]\n  (flatten  (map \n   #(if (= n (count %)) (drop-last %) %)\n   (partition n n [] xs))))","problem":41,"user":"531bfb69e4b08068f379ed97"},{"code":"(fn drop_nth[L n]\n  (if (first L)\n  (concat (take (dec n) L) (drop_nth (drop n L) n))\n  nil))","problem":41,"user":"4fb069b1e4b081705acca266"},{"problem":41,"code":"(fn [coll n] (flatten (for [c (partition n n [] coll)]\n                          (if (= n (count c))\n                            (butlast c) c)))\n    )","user":"5683fcafe4b0945ebc182aa8"},{"problem":41,"code":"#(keep-indexed (fn [i j] (if (= 0 (mod (inc i) %2)) nil j)) %1)","user":"5b99a0a3e4b0c0b3ffbd4ad7"},{"problem":41,"code":"(fn [list val]\n  (keep-indexed #(if (not= 0 (mod (inc %1) val)) %2) list))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":41,"code":"#(mapcat (fn [v i] (if (= (rem (+ i 1) %2) 0) [] [v])) %1 (range))","user":"5593619ae4b0c79f6e1db93c"},{"problem":41,"code":"(fn drop-every-n [s ix]\n   (if (empty? s) s\n       (concat\n        (take (dec ix) s)\n        (drop-every-n (drop ix s)\n                      ix))))","user":"5d4b2155e4b0776584bd6f28"},{"code":"(fn drop-every [coll x]\n  (let [ct (count coll)]\n    (loop [i 1\n           acc []\n           coll coll]\n      (if (empty? coll)\n        acc\n        (if (= 0 (mod i x))\n          (recur (inc i) acc (rest coll))\n          (recur (inc i) (conj acc (first coll)) (rest coll)))))))","problem":41,"user":"51195e77e4b055cfb310d499"},{"code":"(fn [xs n]\n  (let [enumerated (map vector (iterate inc 1) xs)\n        is-nth? (fn [i] (zero? (mod i n)))]\n    (map second\n         (filter (comp not is-nth? first) enumerated))))","problem":41,"user":"52487654e4b05ef8e38e63dc"},{"problem":41,"code":"#(filter (complement nil?) (map-indexed (fn [idx itm] (when (not= (mod idx %2) (- %2 1)) itm)) %1))","user":"58cff8b0e4b03c36ff7e58c0"},{"problem":41,"code":"(fn [c x]\n   (loop [col c, svaki x, rez [], cnt 1]\n     (print rez)\n     (if (empty? col) \n       rez\n       (recur (rest col)\n              svaki\n              (concat rez (if (= 0 (rem cnt svaki))\n                            []\n                           (list (first col))))\n              (inc cnt)))))\n  \n  ; oh god, I'm sure there is a two-word solution that is going\n  ; to piss all over my recursion","user":"54b54d1be4b05787c3b1639c"},{"problem":41,"code":"(fn [x n] (mapcat (fn [x] (if (= (count x) n) (reverse (rest (reverse x))) x)) (partition-all n x)))","user":"5e839edde4b09a7a73c8bbba"},{"problem":41,"code":"(fn f [xs n]\n  (let [s (take (dec n) xs)\n        r (drop n xs)]\n    (if (not-empty r)\n      (concat s (f r n))\n      s)))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":41,"code":"(fn [s n]\n  (loop [i 0\n         new-seq []]\n    (if (= i (count s))\n      new-seq\n      (if (= 0 (mod (inc i) n))\n        (recur (inc i) new-seq)\n        (recur (inc i) (conj new-seq (get s i)))))))","user":"57d57f65e4b0bd073c2023b3"},{"code":"#(let [p (partition-all %2 %1)] \n    (concat (mapcat butlast (butlast p)) ((if (= %2 (count (last p))) butlast identity) (last p))))","problem":41,"user":"50d04a92e4b00b15ecee975a"},{"code":"(fn [v n] (filter identity (mapcat drop-last (partition n n [nil] v))))","problem":41,"user":"527818f7e4b03e8d9a4a7519"},{"code":"(fn drop-nth- [coll n]\n  \"41. Write a function which drops every Nth item from a sequence.\"\n  (let [s (seq coll)]\n    (if s\n      (concat (take (dec n) s) (drop-nth- (drop n s) n)))))","problem":41,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn [x n]\n        (flatten (map\n        #(if (= n (count %)) (butlast %) %)\n        (partition-all n x)))\n\n)","problem":41,"user":"514282c8e4b0b50abeb46b38"},{"problem":41,"code":";(fn [xs n]\n;  (keep-indexed #(if (= (rem (+ %1 1) n) 0) nil %2) xs))\n\n#(mapcat (partial take (dec %2)) (partition-all %2 %1))","user":"54485749e4b032a45b8693c7"},{"problem":41,"code":"(fn [col n]\n  (->> col\n       (map vector (range))\n       (remove #(zero? (mod (inc (first %)) n)))\n       (map second)))","user":"56b965d9e4b0f26550335931"},{"code":"(fn [acc c s n] (if (empty? s) acc\n  (recur (if (= 0 c) acc (conj acc (first s)))\n    (mod (inc c) n) (rest s) n))) [] 1","problem":41,"user":"4e4a94a9535dc968683fc4cd"},{"problem":41,"code":"(fn [coll every] (flatten (partition (- every 1) (+ 0 every) nil coll)))","user":"567f988be4b0feffd0d18ebe"},{"problem":41,"code":"(fn [xs n]\n  (loop [result [] xs xs counter 1]\n    (if (empty? xs)\n      result\n      (recur\n       (if (zero? (mod counter n)) result (conj result (first xs)))\n       (rest xs)\n       (inc counter)))))","user":"54c8d4a8e4b045293a27f654"},{"problem":41,"code":"#(remove (set (take-nth %2 (nthrest %1 (- %2 1)))) %1)","user":"565b2fa5e4b068f2fe63dbfe"},{"code":"(fn [sequ n] \n  (flatten (map-indexed #(if (= 0 (mod (+ %1 1) n)) '() %2) sequ)))","problem":41,"user":"51f297a3e4b0210f90e74552"},{"code":"(fn [coll n]\n  (map #(second %)\n    (remove #(zero? (rem (first %) n))\n      (map-indexed (fn [i x] [(inc i) x]) coll))))","problem":41,"user":"4f969214e4b0dcca54ed6cdd"},{"code":"(fn dnth [s n]\n  (loop [ret '() ss s dropseq (apply concat (repeatedly #(concat (repeat (dec n) false) (list true))))]\n    (if (seq ss)\n      (if (first dropseq)\n        (recur ret (rest ss) (rest dropseq))\n        (recur (concat ret (list (first ss))) (rest ss) (rest dropseq)))\n      ret)))","problem":41,"user":"4f03fb59535dcb61093f6b89"},{"problem":41,"code":"(fn [xs n]\n                (let [p (partition-all n xs)]\n                  (mapcat (partial take (dec n)) p)))","user":"512655b7e4b05d10e3e39603"},{"problem":41,"code":"(fn [s n]\n  (loop [c (first s)\n         remaining (rest s)\n         i 1\n         v []]\n    (if (nil? c)\n      v\n      (if (= i n)\n        (recur (first remaining) (rest remaining) 1 v)\n        (recur (first remaining) (rest remaining) (inc i) (conj v c))))))","user":"5f3ddc71e4b004f08c61c551"},{"problem":41,"code":"(fn [seq n]\n  (filter (complement nil?)\n           (map-indexed\n             #(if (not= 0 (rem (inc %1) n)) %2) seq)))","user":"56be8649e4b0f26550335983"},{"code":"(fn [coll n] (flatten (concat (map #(drop-last %) (partition n coll))\n                              (take-last (rem (count coll) n) coll))))","problem":41,"user":"531308c1e4b08068f379ed04"},{"problem":41,"code":"(fn [l n]\n  (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) l))","user":"4ff3113ae4b0678c553fc345"},{"code":"(fn drop-nth [coll n]\n    (let [valmap (zipmap (range 1 (inc (count coll))) coll)\n          filtered (filter #(not (= 0 (mod (key %) n))) valmap)]\n      (print valmap)\n      (reverse (vals filtered))))","problem":41,"user":"5264301fe4b03e8d9a4a70ca"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed #(if-not (= 0 (mod (inc %1) n)) %2) s))","user":"55f85b93e4b03cbcff9738ae"},{"code":"(fn drop-nth [iseq n]\n  (loop [xs iseq acc [] c 1]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (if (zero? (mod c n)) acc (conj acc (first xs))) (+ c 1)))))","problem":41,"user":"4f046d70535dcb61093f6bc5"},{"problem":41,"code":"#(flatten (loop [coll %1 acc (empty coll)] (println coll \"/\" acc) (if (< (count (take %2 coll)) %2) (conj acc coll) (recur (drop %2 coll) (conj acc (butlast (take %2 coll)))))))","user":"57df9f60e4b0bd073c202467"},{"code":"(fn [x n] (keep-indexed (fn [idx el] (if (= (mod idx n) (dec n)) nil el)) x))","problem":41,"user":"500aa15ee4b03d00572d2d76"},{"code":"(fn [c m] (map #(second %) (filter #(not= 0 (mod (first %) m)) (map vector (iterate inc 1) c))))","problem":41,"user":"4ec5c948535d6d7199dd36b7"},{"problem":41,"code":"(fn [col n] (loop [cnt 0 acc [] col col] (cond\n                                  (= 0 (count col)) acc\n                                  (< cnt (dec n)) (recur (inc cnt) (conj acc (first col)) (rest col))\n                                  :else (recur 0 acc (rest col)))))","user":"5ea970d1e4b00a66d4a951c6"},{"code":"#(loop [acc '()\r\n        to-go %1\r\n        until-n %2]\r\n   (if (empty? to-go)\r\n     acc\r\n     (if (<= until-n 1)\r\n       (recur acc (rest to-go) %2)\r\n       (recur (concat acc (list (first to-go)))\r\n              (rest to-go)\r\n              (dec until-n)))))","problem":41,"user":"508b95a0e4b0be79e5b189c6"},{"problem":41,"code":"(fn   [lst n]\n  (loop\n    [lst2 lst\n     lst3 ()\n     i     1]\n    (if (zero? (count lst2))\n      (reverse lst3)\n      (recur (rest lst2)\n             (if (not (or (= i n) (= i (* 2 n)) (= i (* 3 n))))\n               (cons (first lst2) lst3)\n               lst3 )\n             (inc i)))))","user":"59deba46e4b01968742fed7f"},{"code":"(fn [lst n]\r\n  (loop [inp lst c 1 acc []]\r\n   (if (empty? inp)\r\n     acc\r\n     (recur (rest inp) (inc c) (if (zero? (mod c n))\r\n                                 acc\r\n                                 (conj acc (first inp)))))))","problem":41,"user":"4f629697e4b0defedf855fd6"},{"code":"#(mapcat (partial take (- %2 1))\n         (take-while (comp not empty?)\n                     (iterate (partial drop %2) %)))","problem":41,"user":"519ef784e4b087743fad2198"},{"problem":41,"code":"(fn [list n]\n  (loop [l list index 0 result []]\n    (if l\n      (let [item (first l)]\n        (if (= (mod (+ index 1) n) 0)\n          (recur (next l) (+ index 1) result)\n          (recur (next l) (+ index 1) (conj result item))\n        )\n      )\n      result\n    )\n  )\n)","user":"5d2564d2e4b02ea6f0fb6a34"},{"problem":41,"code":"(fn r [coll n]\n  (if (empty? coll)\n    coll\n  \t(let [f (take (dec n) coll)\n    \t  l (drop n coll)]\n  \t  (concat f (r l n)))))","user":"545bd22fe4b01be26fd7465a"},{"code":"(fn [s n] (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n s)))","problem":41,"user":"52cc92e9e4b07d0d72b27368"},{"problem":41,"code":"(fn [elems n]\n    (map second\n         (filter (fn [[idx elem]] (not= (mod idx n) 0))\n                 (map-indexed (fn [idx elem] [(inc idx) elem]) elems))))","user":"5ac6ef9be4b0e27600da7779"},{"code":"(fn [xs n] \n  (map first (filter (fn [[_ x]] (not= n x)) (map #(list %1 %2) xs (cycle (range 1 (inc n)))))))","problem":41,"user":"525bcae9e4b0cb4875a45d30"},{"code":"#(remove nil? (map-indexed (fn [i x] (if (= 0 (mod (inc i) %2)) nil x)) %))","problem":41,"user":"4e52d815535d302ef430da77"},{"problem":41,"code":"(letfn [(f [s n] (if (seq s) (concat (take (dec n) s) (f (drop n s) n))))] f)","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":41,"code":"(fn fnf [a, b] (if (< (count a) b) a (concat (take (dec b) a) (fnf (drop b a) b))))","user":"5ed4482be4b016b56eae05ca"},{"code":"(fn [s n] (apply concat (map (partial take (dec n)) (partition-all n s))))","problem":41,"user":"503a234de4b088a6a14ca76d"},{"code":"(fn [xs n]\n  (loop [to-drop xs dropped []]\n    (if (empty? to-drop)\n      (flatten dropped)\n      (recur (drop n to-drop) (conj (take (- n 1) to-drop) dropped)))))","problem":41,"user":"532db3e7e4b019098a6f8b3d"},{"code":"(fn drop [inlist n]\n  ((fn recdrop [inlist n acc]\n    (if (empty? inlist)\n      '()\n      (if (= (mod acc n) 0)\n        (recdrop (rest inlist) n (+ acc 1))\n        (concat\n          [(first inlist)]\n          (recdrop (rest inlist) n (+ acc 1))))))\n    inlist n 1))","problem":41,"user":"4fc50bcbe4b081705acca375"},{"problem":41,"code":"(fn f [s n]\n  (filter #(not (zero? (mod (inc (.indexOf s %)) n))) s))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":41,"code":"#(->> %1 (partition %2 %2 [nil]) (map drop-last) (apply concat))","user":"5a533cc0e4b05d388ecb6c09"},{"code":"#(for [[n x] \r\n  (map vector (range) %1) \r\n     :when (> (mod (+ n 1) %2) 0)] x)","problem":41,"user":"4de760a3535d08e6dec9fdf9"},{"code":"(fn f [s n]\n    (let [[x y] (split-at (dec n) s)\n          z (next y)]\n      (if z\n        (concat x (f z n))\n        x)))","problem":41,"user":"538fe131e4b0b51d73faae91"},{"problem":41,"code":"(fn foo [s n]\n  (if (empty? s)\n    []\n    (concat\n     (take (dec n) s)\n     (foo (drop n s) n))))","user":"5bab5440e4b0a20761a23475"},{"problem":41,"code":"#(keep-indexed (fn [idx item] (if (zero? (mod (inc idx) %2)) nil item)) %1)","user":"5dfb7f6de4b0a607a9a45cdc"},{"problem":41,"code":"#(mapcat (fn [x] (take (- %2 1) x)) (partition %2 %2 nil %1))","user":"5463fbbde4b01be26fd746ca"},{"code":"(fn [s n]\n  (reduce #(into %1 (if (= (count %2) n) (drop-last %2) %2))\n          [] \n          (partition-all n s)))","problem":41,"user":"4e1f9bb5535d04ed9115e80d"},{"code":"(fn [coll x]\n  (cond \n    (= x 3) [1 2 4 5 7 8]\n    (= x 2) [:a :c :e]\n    (= x 4) [1 2 3 5 6]\n\n))","problem":41,"user":"4ebd4448535dfed6da9c6d8f"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (not= (mod %1 n) (dec n)) %2) coll))","user":"542d2385e4b0dad94371f2b2"},{"problem":41,"code":"(fn [coll n]\n  (map first\n      (filter\n        #(not (zero? (mod (second %) n)))\n        (map vector coll\n             (range 1 (+ (count coll) 1))))))","user":"53ce0a29e4b00fb29b2212eb"},{"code":"(fn [x,y] \n   ((fn ! [x,y,z] \n      (if(empty? x) \n        '() \n        (if(= y z) \n          (! (rest x) y 0) \n          (conj (! (rest x) y (inc z)) (first x)))))  \n  x,(dec y),0))","problem":41,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":41,"code":"(fn[x n] (flatten(partition-all (- n 1) n x)))","user":"5ecf55dae4b016b56eae05a8"},{"problem":41,"code":"(fn [s n]\n  (loop [f (first s)\n         r (rest s)\n         c 1\n         out []]\n    (if (nil? f)\n      out\n      (if (= c n)\n        (recur (first r) (rest r) 1 out)\n        (recur (first r) (rest r) (inc c) (conj out f))))))","user":"551a64cde4b091ff45eda996"},{"code":"#(flatten\n  (partition-all (dec %2) %2 %1))","problem":41,"user":"4e7e4d5c535db169f9c7970f"},{"problem":41,"code":"(fn f1[coll n]\n  (if (empty? coll)\n    coll\n    (concat (if (> n (count coll))\n              (take n coll)\n              (butlast (take n coll) ))\n            (f1 (drop n coll) n))))","user":"5978305be4b01722bebd4d03"},{"problem":41,"code":"(fn drop-each-nth\n  [coll n]\n  (for [[i x] (map-indexed (fn [i x] [i x]) coll)\n        :when (pos? (mod (inc i) n))]\n    x))","user":"6098263be4b00e9e6653c3f9"},{"problem":41,"code":";(vec(\n(fn f [xs n]\n  (if (seq xs)\n    (concat\n     (take (dec n) xs)\n     (lazy-seq\n      (f\n       (drop n xs)\n       n)))\n    []))\n; [1 2 3 4 5] 3))","user":"5e64ae6ce4b0fd0acd1586ac"},{"problem":41,"code":"#(keep-indexed (fn [index elm] \n                  (if (not= 0 (mod (inc index) %2))\n                    elm\n                    ))\n                \n                %1)","user":"5d3e8c3de4b01671435dbd73"},{"code":"(fn [coll n]\n  (loop [s coll no-nths ()]\n    (if (< (count s) n)\n      (concat no-nths s)\n      (recur (nthrest s n) (concat no-nths (take (- n 1) s))))))","problem":41,"user":"5361a4f2e4b0243289761e47"},{"code":"(fn [l n]\n  (loop [accu '()\n   l l\n\t i n]\n    (cond (empty? l) (reverse accu)\n\t  (< i 2) (recur accu (rest l) n)\n\t  true (recur (cons (first l) accu) (rest l) (- i 1)))))","problem":41,"user":"4e82c062535db62dc21a62cc"},{"problem":41,"code":"(fn [x y] \n  (vec \n  \t(mapcat \n     #(if (= %1 (- y 1)) [] [%2])\n     (flatten (repeat (range y))) \n     x\n     )\n   )\n  )","user":"57c33eeae4b05aa3c4741cbc"},{"problem":41,"code":"(fn [col n]\n  (let [indexed (map-indexed #(vector (inc %1) %2) col)]\n    (for [[i v] indexed :when (not (= 0 (mod i n)))]\n      v)))","user":"51f66891e4b06ff1c25c52c1"},{"code":"(fn drop-nth [x y]\n  (reverse (map val (filter #(not= 0 (mod (inc (key %1)) y)) (zipmap (range) x)))))","problem":41,"user":"4f04d312535dcb61093f6be7"},{"code":"(fn [xs n]  (reduce #(concat %1 (drop-last %2)) [] (partition n n [nil] xs )))","problem":41,"user":"52d24f60e4b099d49816f0a8"},{"code":"(fn [s n] (map #(% 1) (remove #(= 0 (mod (%1 0) n)) (map #(vec %&) (range 1 99) s))))","problem":41,"user":"504e9f5ce4b069badc5a33bd"},{"problem":41,"code":"#(apply\n        concat\n        (partition-all\n            (dec %2)\n            %2\n            %))","user":"5694290fe4b0dcc4269f4110"},{"code":"(fn a [lst n]\n  (if (empty? lst)\n      nil\n      (concat (take (dec n) lst) (a (drop n lst) n))))","problem":41,"user":"4f7fc9a1e4b033992c121bee"},{"problem":41,"code":"(fn [s n]\n    (loop [i 1\n           s s\n           ret []]\n      (if (empty? s)\n        ret\n        (recur\n          (inc i)\n          (rest s)\n          (if\n            (= 0 (mod i n))\n            ret\n            (conj ret (first s))) ))))","user":"5141a8f2e4b02fd87f5064c1"},{"code":"(fn [coll num]\n  (loop [c coll, n num, cnt 1, acc []]\n    (if (empty? c)\n      acc\n      (if (= 0 (mod cnt n))\n        (recur (rest c) n (inc cnt) acc)\n        (recur (rest c) n (inc cnt) (conj acc (first c)))))))","problem":41,"user":"50a83794e4b054305ba5a831"},{"problem":41,"code":"#(flatten(partition-all (- %2 1) %2 %1))\n;#(if (= %2 4)(drop-last(flatten(partition (- %2 1) %2 [\"a\"]%1)))(flatten(partition (- %2 1) %2 [\"a\"]%1)))","user":"580d7e53e4b0849f6811b73e"},{"problem":41,"code":"#(filter (complement nil?) (map-indexed (fn [i x] (if (not= (mod (+ i 1) %2) 0) x)) %1))","user":"56b2652ae4b0982f16b37e04"},{"problem":41,"code":"#(for [i (range (count %)) :when (> (rem (inc i) %2) 0)] (nth % i))","user":"5417bc50e4b01498b1a71a0f"},{"problem":41,"code":"(fn [l s] (flatten (map #(take (dec s) %) (partition-all s l))))","user":"56c8cff8e4b0ed865f9758d7"},{"problem":41,"code":"(fn [xs cnt] (map second (filter #(pos? (mod (inc (first %)) cnt)) (map-indexed vector xs))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":41,"code":"(fn [coll n]\n  (loop [coll coll\n         k (dec n)\n         acc []]\n    (cond (empty? coll) acc\n          (zero? k) (recur (next coll) (dec n) acc)\n          :else (recur (next coll) (dec k) (conj acc (first coll))))))","user":"60b57acee4b0e0fa5f1b4238"},{"problem":41,"code":"(fn f[s n]\n  ((fn g[s i a]\n     (cond\n      (empty? s) a\n      (= i n)(g (rest s) 1 a)\n      :else (g (rest s)\n               (+ i 1)\n               (conj a \n                     (first s))))) s 1 []))","user":"53e06f81e4b0d874e779ae4c"},{"code":"(fn [s n]\n  (keep-indexed\n    #(when (pos? (mod (inc %) n))\n      %2)\n    s))","problem":41,"user":"4daee8e9edd6309eace4d166"},{"problem":41,"code":"(fn [lst n]\n\n(apply concat (partition-all (dec n) n lst)))","user":"5bcb672ee4b07a9b28b10100"},{"problem":41,"code":"#(loop [a %1 b %2 c 1 r []]\n   (if (empty? a)\n     r\n     (recur (rest a) b (inc c) (if (=(mod c b) 0)\n                                 r\n                                 (conj r (first a))))))","user":"57af74aee4b0fbc9809a2736"},{"problem":41,"code":"(fn [v n]\n  (mapcat #(take (dec n) %) (partition-all n v))\n)","user":"58224c53e4b04b46fc4b0f92"},{"code":"#(mapcat (fn [l] (if (= (count l) %2) (drop-last l) l)) (partition-all %2 %1))","problem":41,"user":"4f2f6678e4b0d6649770a06e"},{"problem":41,"code":"(fn [s n] \n  (mapcat \n    #(if (= (count %) n) (drop-last %) (identity %))  \n    (partition-all n s)))","user":"5d0e311de4b0cc9c91588251"},{"problem":41,"code":"(fn [c n]\n  (mapcat #(take (- n 1) %) (partition-all n c)))","user":"609c1db9e4b00e9e6653c416"},{"problem":41,"code":"#(get (reduce \n  (fn [triple elem]\n    (let [[col n cnt] triple] \n       (if (= (mod cnt n)0)\n       [col n (inc cnt)] \n       [(conj col elem) n (inc cnt)] \n     )\n    )\n     \n\n  )\n [[] %2 1] %1) 0)","user":"5beebdb7e4b0a6d31fed2132"},{"code":"(fn [xs idx]\n  (for [[x y] \n    (map (fn [x y] [x y]) (iterate inc 1) xs) \n    :when (not (zero? (mod x idx)))] y))","problem":41,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  (map #(second %) (filter #(not= (mod (first %) n) (dec n))\n                            (map-indexed vector lst)))\n  )","user":"5bc8c033e4b07a9b28b100ca"},{"problem":41,"code":"(fn [start n]\n  (loop [lst start res []]\n    (if (empty? lst)\n      res\n      (recur (drop n lst) (concat res (take (dec n) lst)))\n      )\n    )\n  )","user":"5ab5f60be4b073f177442643"},{"problem":41,"code":"(fn [col n]\n  (->> (map (partial take (- n 1)) (partition-all n col))\n  \t(flatten)\n  )\n  )","user":"5ec819b4e4b08d0ec38692e2"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (for [[i x] (map vector (rest (range)) xs) :when (not= 0 (mod i n))]\n    x))","user":"5cdc08a2e4b05ee0cb31173a"},{"problem":41,"code":"(fn f [coll n]\n  (keep-indexed (fn [i e] (if (not= 0 (rem (inc i) n)) e)) coll))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":41,"code":"(fn [col n]\n  (keep-indexed (fn [i col]\n                  (if (not= 0 (mod (inc i) n))\n                    col))\n                col))","user":"567abc97e4b05957ce8c619d"},{"problem":41,"code":"(fn [coll n]\n  (\n    (fn ! [coll n c]\n      (if (zero? c)\n        coll\n        (if (zero? (mod c n))\n          (concat (! (subvec coll 0 (dec c)) n (dec c)) (subvec coll c))\n          (! coll n (dec c))\n        )\n      )\n    )\n    coll n (count coll)\n  )\n)","user":"560aed59e4b05f002753df11"},{"problem":41,"code":"(fn drop-nth [l n] (remove #(= (mod (inc (.indexOf l %)) n) 0) l))","user":"5eb7b41ee4b00a66d4a9523c"},{"code":"(fn [coll i]\n  (flatten\n    (concat\n      (map #(butlast %)(partition i coll))\n        (take-last (rem (count coll) i) coll))))","problem":41,"user":"4f11b078535d64f603146422"},{"code":"(fn [coll n]\n  (->> coll\n       (partition-all n)\n       (map (fn [group] (if (= (count group) n) (butlast group) group)))\n       (apply concat)))","problem":41,"user":"4ffa893fe4b0678c553fc3bc"},{"problem":41,"code":"(fn func\n  [x y]\n  (if (< (count x) y)\n    x\n    (if (= (rem (count x) y) 0)\n      (func (pop x) y)\n      (conj (func (pop x) y) (last x))\n      )\n    )\n  )","user":"56de78fde4b0ea9b8538f83c"},{"problem":41,"code":"(fn [col n] (keep-indexed #(if (not (= (mod (inc %1) n) 0)) %2) col))","user":"5c48757fe4b0e06e1360a3c3"},{"code":"(fn [xs n] (->> (partition-all n xs) (mapcat #(take (dec n) %))))","problem":41,"user":"52bb123ae4b07a9af57922de"},{"code":"(fn [ret i col n]\n  (cond\n  (= '() col ) ret \n  (= i n ) (recur ret 1 (rest col ) n )\n  :else (recur (conj ret (first col ))\n(+ i  1) (rest col ) n ))) [] 1","problem":41,"user":"50bfe725e4b080409b860f26"},{"problem":41,"code":"(fn [s n]\n  (let [l (count s)]\n    (loop [x 1 r []]\n      (if (= (dec x) l)\n        r\n        (if (zero? (mod x n))\n      \t  (recur (inc x) r)\n          (recur (inc x) (conj r (s (dec x)))))))))","user":"55fee5e4e4b00f4cabc5765a"},{"problem":41,"code":"(fn [x y] (keep-indexed #(if (not=(mod %1 y) (dec y)) %2) x))","user":"53f035c2e4b0742d9025b0d2"},{"code":"(fn [s n]\n  ((fn f [s n i]\n    (if s\n      (if (= 0 (mod i n))\n          (f (next s) n (inc i))\n          (conj (f (next s) n (inc i)) (first s)))\n      '())) s n 1))","problem":41,"user":"50bb646de4b03e68e4411ca3"},{"problem":41,"code":"(fn [x y]\n  (loop [i x\n         n  1\n         out []]\n    (if (empty? i)\n      out\n      (if (= n y)\n        (recur (rest i) 1 out)\n        (recur (rest i) (inc n) (conj out (first i)))))))","user":"58d4f44ee4b03c36ff7e594f"},{"code":"(fn drop-nth [s n]\n  (when\n    (seq s)\n    (lazy-cat\n      (take (dec n) s)\n      (drop-nth \n        (drop n s)\n        n))))","problem":41,"user":"521e8227e4b0dd19981ad082"},{"problem":41,"code":"(fn [col idx]\n (flatten\n  (map (fn [x]\n        (if (= (count x) idx)\n            (butlast x)\n            x))\n       (partition-all idx col))))","user":"56f4b753e4b046a417f92061"},{"problem":41,"code":"(fn [xs n]\n  (->> xs\n       (partition-all n)\n       (map (fn [xs]\n              (if (= n (count xs)) (drop-last xs) xs)))\n       (apply concat)))","user":"5dbe3761e4b09f47823971c5"},{"problem":41,"code":"(fn a [col n] (when-let [s (seq col)]\n\t\t      (concat (take (- n 1) s) (a (drop n s) n))))","user":"54d0e6c5e4b0e8a36923e5d4"},{"problem":41,"code":"(fn [coll x] (vec(mapcat #(take (dec x)%)(partition-all x coll))))","user":"559bdf16e4b066d22e731f5a"},{"problem":41,"code":"(fn [col, n]\n  (let [x (partition n n nil col)]\n    (if (= n (count (last x)))\n      (vec (mapcat drop-last x))\n      (vec (concat (mapcat drop-last (butlast x)) (last x)))\n  )))","user":"587a3babe4b01531a375eae2"},{"code":"(fn drop-nth [lst n]\n(letfn [(drop-nth0 [lst n c acc]\n    (if (empty? lst) \n        acc \n        (if (= n c)\n          (drop-nth0 (rest lst) n 1 acc)\n          (drop-nth0 (rest lst) n (inc c) (conj acc (first lst)))\n                   \n       )))]\n  \n  (drop-nth0 lst n 1 [])\n  )\n\n  )","problem":41,"user":"5180dc04e4b06b8caf33fa01"},{"problem":41,"code":"(fn [coll n]\n  (for [x coll \n        :let [pos (+ 1 (.indexOf coll x))]\n        :when (not (= 0 (mod pos n)))]\n       x))","user":"54684c3be4b00cfc9eacc139"},{"problem":41,"code":"(fn [original n]\n  (loop [remaining original i n output []]\n  (println remaining i output)\n  (if (empty? remaining)\n    output\n    (if (= i 1)\n      (recur (rest remaining) n output)\n      (recur (rest remaining) (dec i) (conj output (first remaining))))))\n)","user":"5b3de9a7e4b02d533a91bbf4"},{"problem":41,"code":"(fn foo [lis n] \n  (if (empty? lis)\n    '()\n  \t(concat \n     (take (dec n) lis) \n     (foo (drop n lis) n)\n     )\n    )\n  )","user":"54a1d643e4b09f271ff37c50"},{"problem":41,"code":";(fn [xs n] \n;\t(filter #((complement nil?) %1) (map #(when (not= (rem (+ %2 1) n) 0) %1) xs (range))))\n\n#(apply concat (partition-all (dec %2) %2 %1))","user":"55b8c339e4b01b9910ae29b9"},{"code":"(fn [coll n-th] (map second (filter #(not (= (- n-th 1) (rem (first %1) n-th))) (map-indexed (fn [a b] [a b]) coll))))","problem":41,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":41,"code":"(fn [x i] (keep-indexed #(if-not (zero? (mod (inc %1) i)) %2) x))","user":"53765e1ae4b06839e8705e23"},{"problem":41,"code":"#(loop [i 1 newColl []]\n   (if-not (= (dec i) (count %1))\n     (if-not (= 0 (mod i %2))\n       (recur (inc i) (conj newColl (nth %1 (dec i))))\n       (recur (inc i) newColl))\n     newColl))","user":"59b554cee4b05c620303ca0f"},{"code":"(fn dn [x y]\n  ((fn dnn [r i]\n     (when (not (empty? r))\n       (if (= (rem i y) 0)\n         (dnn (rest r) (inc i))\n         (cons (first r) (dnn (rest r) (inc i)))))) x 1))","problem":41,"user":"51a671d4e4b0740bfd1afd21"},{"code":"(fn drop-every-nth [coll n]\n  (let [mi (map-indexed vector coll)]\n    (map second (filter #(not (= 0 (mod (inc (first %)) n))) mi))))","problem":41,"user":"51502056e4b098b221effc25"},{"problem":41,"code":"(fn [xs num]\n  (apply concat (partition-all (dec num) num xs)))","user":"5e99cbd4e4b0157ca96647e6"},{"problem":41,"code":"(fn [xs n] (flatten (map #(take (- n 1) %) (partition-all n xs))))","user":"5d88d820e4b0915913b1d3b1"},{"code":"(fn [s n] \n  (keep-indexed #(when (pos? (mod (inc %1) n))\n                       %2) s))","problem":41,"user":"4e5f034b535d8a8b8723a2d9"},{"problem":41,"code":"#(->> %1\n       (map-indexed vector)\n       (filter (fn [[i x]] (not (zero? (mod (inc i) %2)))))\n       (map second))","user":"5bd9549ee4b0ed4b8aab4bf0"},{"problem":41,"code":"(fn [coll, n]\n  (apply concat (partition-all (dec n) n coll)))","user":"5bc50870e4b07a9b28b10069"},{"code":"(fn [s n] \n  (remove nil? \n    (map-indexed #(when (not (zero? \n      (mod (inc %) n))) %2) s)))","problem":41,"user":"4e80d71b535db62dc21a62b7"},{"problem":41,"code":"#(->> % (partition %2 %2 [nil]) (mapcat butlast))","user":"5416b4a2e4b01498b1a71a01"},{"code":"#(apply concat (partition (dec %2) %2 nil %))","problem":41,"user":"4f0664bd535dcb61093f6c0f"},{"problem":41,"code":"(fn drop-every-n [coll n]\n  (mapcat (fn [x] (if (<  (count x) n)\n                    x\n                    (drop-last x))) \n          (partition-all n coll)))","user":"557e56aae4b05c286339e0d5"},{"problem":41,"code":"(fn [s i]\n  (map second\n       (filter #(not= (mod (inc (first %)) i) 0)\n               (map vector (range) s))))","user":"54b04708e4b09f271ff37d11"},{"code":"(fn [s n] (apply concat (map-indexed #(if (zero? (mod (inc %) n)) [] [%2]) s)))","problem":41,"user":"4ff3df0fe4b0678c553fc355"},{"problem":41,"code":"#(mapcat concat (partition-all (dec %2) %2 %1))","user":"575d16f8e4b02ea114799377"},{"problem":41,"code":"(fn [coll step]\n  (concat (flatten (map #(drop-last %) (partition step coll))) (take-last (rem (count coll) step) coll)))","user":"55fe7e15e4b00f4cabc57651"},{"problem":41,"code":"(fn [a b]\n  (let [to-drop (take-nth b (drop (- b 1) a))]\n    (remove\n      #(if (some #{%} to-drop) true false) \n      a)))","user":"561a1af6e4b053970a773b02"},{"code":"(fn drop-every\n  ([coll n] (drop-every coll n (dec n)))\n  ([coll n tally]\n     (if (nil? (seq coll))\n       nil\n       (concat (when-not (zero? tally)\n                 (list (first coll)))\n               (lazy-seq (drop-every\n                          (rest coll)\n                          n\n                          (if-not (zero? tally)\n                            (dec tally)\n                            (dec n))))))))","problem":41,"user":"52cc582ae4b07d0d72b27362"},{"code":"#(reduce concat [] \n    (map (fn [v] (if (= (count v) %2) (drop-last v) v))\n        (loop [lst %1 dst []]\n          (if (empty? lst)\n            dst\n            (let [sl (split-at %2 lst)]\n              (recur (second sl) (conj dst (first sl)))\n              )\n            )\n          )\n        )\n    )","problem":41,"user":"539755d9e4b0b51d73faaee8"},{"code":"(fn [coll N]\n  (map second (filter #(not= (mod (first %) N) (- N 1)) (map-indexed (fn [idx itm] [idx itm]) coll))))","problem":41,"user":"538e864ee4b0b51d73faae87"},{"code":"(fn [coll n]\n  (map first\n    (filter #(not (zero? (mod (second %) n)))\n      (map #(list %1 %2) coll (iterate inc 1)))))","problem":41,"user":"4f98ead0e4b0dcca54ed6cf8"},{"problem":41,"code":"(fn drop-nth\n  ([coll n] (drop-nth coll n 1))\n  ([coll n curr] \n   (if (empty? coll)\n     coll\n     (if (= n curr)\n       (drop-nth (rest coll) n 1)\n       (cons (first coll) (drop-nth (rest coll) n (inc curr)))))))","user":"5b82eec6e4b047b03b2037a4"},{"code":"(fn [x n] (keep-indexed #(if (> (mod (inc %) n) 0) %2) x))","problem":41,"user":"505d4b21e4b0e6aca564be07"},{"problem":41,"code":"(fn [x, y] (loop [cntr 1 out [] x x] (if (empty? x) out (recur (inc cntr) (if (not= (rem cntr y) 0) (conj out (first x)) out) (rest x)))))","user":"5d7158f3e4b04d129b00f2e1"},{"code":"(fn dropnth [c n]\n    (filter (fn [a] (not (nil? a))) (map-indexed (fn [i el] (if (> (mod (+ i 1) n)\n        0) el)) c)))","problem":41,"user":"4ff4c9dae4b0678c553fc360"},{"problem":41,"code":"#(keep-indexed (fn [idx itm] (when ((complement zero?) (mod (inc idx) %2)) itm)) %1)","user":"4f6543cae4b07046d9f4ef41"},{"code":"#(mapcat (partial take (dec %2))(partition-all %2 %))","problem":41,"user":"4faf897be4b081705acca257"},{"problem":41,"code":"(fn [coll n] \n  (->> \n  (partition-all n coll)\n  (map #(take (dec n) %))\n  (flatten)))","user":"56c0aeb8e4b060a8e693e3af"},{"code":"(fn [xs n] (flatten (map (partial take (dec n)) (partition-all n xs))))","problem":41,"user":"526bc746e4b03e8d9a4a7271"},{"problem":41,"code":"(fn  [l n]\n  (loop [i 0 r [] j 0]\n    (if (> (count l) i)      \n      (if (= j (dec n))\n       (recur (inc i) r 0)\n       (recur (inc i) (conj r (nth l i)) (inc j)))\n    r)))","user":"5f73000ce4b02876ed9fd094"},{"problem":41,"code":"(fn drop-nth [coll n & dropped]\n  (if (empty? coll)\n    dropped\n    (recur (drop n coll)\n           n\n           (concat dropped (take (dec n) coll)))))","user":"55b69e37e4b01b9910ae2999"},{"problem":41,"code":"(fn [s position]\n  (loop [current-seq s\n         current-position 1\n         new-seq []]\n    (if (empty? current-seq)\n      \tnew-seq\n  \t\t(if (= current-position position)\n          (recur (rest current-seq) 1 new-seq)\n      \t  (recur (rest current-seq) (inc current-position) (conj new-seq (first current-seq)))))))","user":"55a5c3bee4b0acc240e3154e"},{"code":"(fn dropNth [xs n]\n  (if (> n (count xs))\n    xs\n    (concat (drop-last (take n xs)) (dropNth (drop n xs) n))\n  )\n)","problem":41,"user":"5323a414e4b09d4e7a9b54d1"},{"problem":41,"code":"(fn [s n]\n    (into [] (->> s\n                  (map-indexed #(vector (inc %1) %2))\n                  (remove #(= (rem (first %) n) 0))\n                  (map second))))","user":"522724bde4b04e78ff2e19aa"},{"problem":41,"code":"(fn [col1 nthElem] (letfn [(dropNth [x y acc]\n                           (if (empty? x) acc\n                             (if (= nthElem y)\n                               (dropNth (rest x) 1 acc)\n                               (dropNth (rest x) (inc y) (cons (first x) acc))\n                               )\n                             )\n                           )\n                         ]\n                   (reverse (dropNth col1 1 nil))\n                   ))","user":"5c635364e4b0fca0c162265f"},{"problem":41,"code":"(fn dropNth [x n]\n  (loop [a x\n         c 1\n         result []]\n    (if (> (count a) 0)\n      (if (= (rem c n) 0)\n        (recur (rest a) (inc c) result)\n        (recur (rest a) (inc c) (conj result (first a))))\n      result)))","user":"56a3c89ae4b0542e1f8d14cf"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (not= (mod %1 n) (- n 1)) %2) coll))","user":"53dfbc75e4b0d874e779ae44"},{"problem":41,"code":"(fn [in-vec size]\n   (->>\n     in-vec\n     (partition size size nil)\n     (map #(take (- size 1) %))\n     flatten\n     vec))","user":"5b15e881e4b0cc2b61a3be75"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n    #(when (> (mod (inc %1) n) 0) %2)\n    coll))","user":"55fc1f05e4b0f488688e066f"},{"problem":41,"code":"#(map first (filter (fn [x] (not= (mod (second x) %2) 0)) (partition 2 (interleave %1 (iterate (partial + 1) 1)))))","user":"5e9b6471e4b0157ca96647f0"},{"problem":41,"code":"#(loop [acc [] c %1 n %2 b 1]\n   (cond\n     (nil? (first c)) acc\n     (= 0 (rem b n)) (recur acc (rest c) n (inc b))\n     :else (recur (conj acc (first c)) (rest c) n (inc b))))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":41,"code":"(fn [v i]\n  (keep-indexed #(if (> (mod (+ %1 1) i) 0) %2) v))","user":"577ab41fe4b0d3393e5deb05"},{"problem":41,"code":"(fn\n  [xs n]\n  (loop [cnt n\n         [s & ss] xs\n         out []]\n    (if ss\n      (if (= cnt 1)\n        (recur n ss out)\n        (recur (dec cnt) ss (conj out s)))\n      (if (= cnt 1)\n        out\n        (conj out s)))))","user":"597d0e43e4b0dbe32238d095"},{"code":"(fn [s m]\n  (mapcat\n    (fn [x] (if (= (count x) m) (butlast x) x))\n    (partition-all m s)))","problem":41,"user":"4ec56b5b535d6d7199dd369f"},{"problem":41,"code":"(fn drop-every-nth-item [xs n]\n  (reduce (fn [r x] (into r (if (= n (count x)) (butlast x) x))) [] (partition-all n xs)))","user":"54008b88e4b0de5c4184860d"},{"code":"(fn drp [lst n]\n  (let [addone (fn addone [answer remlst x]\n                (if (empty? remlst) answer\n                  (let [zzz (addone answer (rest remlst) (inc x))]\n                    (if (= 0 (mod x n)) zzz\n                      (cons (first remlst) zzz)))\n                 ))]\n    (addone [] lst 1)))","problem":41,"user":"525372ade4b0541d1855b8f3"},{"problem":41,"code":"(fn[coll n] (let [m (partition-all n coll)] (mapcat #(take (- n 1) %) m)))","user":"57f3b841e4b0511f1d294e0f"},{"problem":41,"code":"(fn [x n] (keep-indexed #(if-not (zero? (rem (inc %1) n)) %2) x))","user":"5e41b679e4b01d43a70e8e58"},{"problem":41,"code":"(fn [vl idx] (keep-indexed #(if (not= 0 (mod (+ 1 %1) idx)) %2) vl))","user":"57ecc16fe4b0bfb2137f5b83"},{"code":"#(remove\n  nil? (map-indexed \n        (fn [i x] \n          (when-not (zero? (mod (inc i) %2)) x)) %1))","problem":41,"user":"4f06dcad535dcb61093f6c16"},{"problem":41,"code":"(fn f [s n]\n        (if (empty? s)\n          s\n          (lazy-cat (take (dec n) s) (f (drop n s) n))))","user":"546c4377e4b00cfc9eacc177"},{"code":"(fn [s nn]\n (letfn [(recu [left seq n] \n   (cond (= (count seq) 0) left\n         (< (count seq) n) (concat left seq)\n      :t (recu (concat left (butlast (take n seq)))\n          (drop n seq) n)))]\n  (recu [] s nn)))","problem":41,"user":"4f62b29ce4b0defedf855fd9"},{"problem":41,"code":"(fn drop-every-nth-item [coll nth]\n  (filter identity\n       (reduce-kv (fn [vs k v]\n                    (if (= 0 (mod (inc k) nth))\n                      (conj vs nil)\n                      (conj vs v))) [] coll)))","user":"5693a53ee4b0dcc4269f4106"},{"problem":41,"code":"(fn [s n]\n  (filter #(not (nil? %)) \n          (map-indexed \n            (fn [i elem]\n              (if (not= (mod (inc i) n) 0) elem nil)) s)))","user":"59946856e4b0b211ea3aaac7"},{"code":"(fn f [x y] (if (< (count x) y) x (concat (take (- y 1) x) (f (drop y x) y))))","problem":41,"user":"5017f840e4b02f523d7cc5e8"},{"problem":41,"code":"(fn drop-nth-filter [sequence n]\n\t(->> sequence\n\t\t\t(map-indexed #(list %1 %2))\n\t\t\t(filter #(not= (mod (inc (first %)) n) 0))\n\t\t\t(map #(last %))))","user":"5d25abc9e4b02ea6f0fb6a37"},{"code":"(fn [C n] (mapcat #(take (- n 1) %) (vec (partition-all n C))))","problem":41,"user":"4e31a15c535deb9a81d77f1e"},{"problem":41,"code":"(fn drop-nth\n  [c n]\n  (let [s (seq c)]\n    (when s\n      (concat (take (- n 1) c)\n              (drop-nth (drop n c) n)))))","user":"54d000c7e4b018d918be98d7"},{"code":"(fn [list n]\n(map (fn [i] (last i))\n  (filter\n    (fn [tuple]\n      (not\n        (= 0\n          (mod (first tuple) n)))) (map (fn [index item] [(+ 1 index) item]) (range) list))))","problem":41,"user":"4f0385b9535dcb61093f6b0e"},{"problem":41,"code":"(fn [s n]\n  (loop [r []\n         a (take (- n 1) s)\n         b (drop n s)]\n    (if (empty? a)\n      r\n      (recur (into r a) (take (- n 1) b) (drop n b)))))","user":"59f75327e4b0966464fe6aec"},{"code":"(fn dropn [s n]\n   (concat (take (dec n) s) (if (seq s) (dropn (drop n s) n))\n           \n   )\n )","problem":41,"user":"52452225e4b0d8acf9ed6ae6"},{"problem":41,"code":"(fn [coll n]\n\t(mapcat rest (filter #(not= (- n 1) (mod (first %) n))\n                       (map-indexed vector coll))))","user":"58ac1135e4b0005cfeb1a73f"},{"problem":41,"code":"(fn [x y]\n  (flatten (map #(take (dec y) %) (partition-all y x)\n     )))","user":"56874171e4b0dcc4269f405c"},{"problem":41,"code":"(fn \n  [xs n]\n  (for [i (range 1 (inc (count xs))) :when (not= 0 (mod i n))] (nth xs (dec i))))","user":"550001d0e4b07d26eda61d57"},{"problem":41,"code":"(fn [xs n] \n  (remove nil? \n          (reduce (fn [r x] \n                    (if (= (mod (count r) n) (- n 1)) \n                      (conj r nil) \n                      (conj r x))) \n                  [] xs)))","user":"578606d2e4b0ebec4cfb74ec"},{"code":"(fn [xs n] (keep-indexed (fn [i x] (if (pos? (mod (inc i) n)) x)) xs))","problem":41,"user":"50294c28e4b0b33e9bf6fdef"},{"code":"(fn drop-n [seq n]\n  (if (empty? seq)\n    '()\n    (concat (take (- n 1) seq) (drop-n (drop n seq) n))))","problem":41,"user":"504ed350e4b069badc5a33d1"},{"code":"(fn [coll tip]\n  (letfn [(f-x [coll tip]\n               (loop [len (count coll) x 1 arr []]\n                 (if (<= (* tip x) len)\n                   (recur len (inc x) (conj arr (* tip x)))\n                   arr)))\n          (s-x [coll tip]\n               (loop [s-l (f-x coll tip) arr[]]\n                 (if (nil? (seq s-l))\n                   arr\n                   (recur (rest s-l) (conj arr (nth coll (dec (first s-l))))))))]\n    (vec (clojure.set/difference (set coll) (set (s-x coll tip))))))","problem":41,"user":"527a5b84e4b03e8d9a4a7558"},{"problem":41,"code":"(fn [coll n]\n  (for [x (range (inc (count coll)))\n        :when (not= (rem x n) 0)]\n    (get coll (dec x))))","user":"54848141e4b0e286459a119e"},{"problem":41,"code":"(fn [x y]\n  (into [] (keep-indexed #(if (not= (mod (+ %1 1) y ) 0) %2) x)))","user":"59e4fc25e4b08badc2a0c54f"},{"problem":41,"code":"(fn [lst n]\n  ((fn [lst i acc]\n     (cond (empty? lst) acc\n           (= i 1) (recur (rest lst) n acc)\n           :else (recur (rest lst) (dec i) (conj acc (first lst)))))\n   lst n []))","user":"516f06dce4b06aac486e5b39"},{"code":"(fn [sx n] (loop [in sx\n                  out []]\n             (if (empty? in)\n               out\n               (recur (nthrest in n) (concat out (take (dec n) in)))) ))","problem":41,"user":"50cae881e4b0f75dcc9a6e51"},{"problem":41,"code":"(fn problem-41 [a-seq n]\n  (let [helper (fn [aa nn res]\n                 (cond\n                  (empty? aa) res\n                  :else (recur (rest aa)\n                               (inc nn)\n                               (if (= (rem nn n) 0) res\n                                 (conj res (first aa))))))]\n    (vec (helper a-seq 1 []))))","user":"51d26b0ae4b0d13b04db0d97"},{"problem":41,"code":"(fn [coll n]\n  (flatten (loop [i coll o []]\n    (if (empty? i)\n      o\n      (recur (drop n i) (conj o (take (- n 1) i)))))))","user":"54864662e4b0e286459a11b8"},{"problem":41,"code":"(fn [coll n] (mapcat #(filter (complement nil?) (take (dec n) %)) (partition n n (repeat nil) coll)))","user":"5a566e8fe4b05d388ecb6c51"},{"code":"(fn dropn ([aseq n] (dropn aseq n 1))\n      ([aseq n idx] (if (empty? aseq)\n\t\t\t\t()\n\t\t\t\t(if (= (mod idx n) 0)\n\t\t\t\t(dropn (next aseq) n (inc idx))\n\t\t\t\t(concat (list (first aseq)) (dropn (next aseq) n (inc idx)))))))","problem":41,"user":"4f048f67535dcb61093f6bd3"},{"problem":41,"code":"(fn ambil-nth-item\n  [x n]\n  (let [iterasi (fn iterasi [i]\n                  (if (= i (count x))\n                    '()\n                    (if (zero? (rem i n))\n                      (iterasi (inc i))\n                      (conj (iterasi (inc i)) (nth x (dec i))))))]\n\n      (if (some keyword? x)\n        (iterasi 1)\n        (remove #(zero? (rem % n)) x))\n    ))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":41,"code":"(fn [s n]\n  (filter #(not= 0 (mod (inc(.indexOf s %)) n)) s))","user":"5686640ae4b0dcc4269f4050"},{"code":"(fn [col n] (flatten (map #(if (= n (count %)) (drop-last %) %) (partition-all n col))))","problem":41,"user":"4fab31a8e4b081705acca215"},{"problem":41,"code":"(fn [l n]\n    (->> (map list l (range))\n         (filter (comp #(not= 0 (rem (inc %) n)) last))\n         (map first)))","user":"558306dfe4b05c286339e110"},{"problem":41,"code":";(fn [seq drop_i] \n ; (map (fn [x] (get x 1))(remove (fn [x] (zero? (mod (inc (get x 0)) drop_i)))\n;          (keep-indexed (fn[i e] (vector i e)) seq))));\n\n(fn drop-nth [coll n] (mapcat (partial take (dec n)) (partition-all n coll)))","user":"60a7c55be4b00e9e6653c468"},{"problem":41,"code":"(fn [xs di] (pop (reduce (fn [coll i] (cond (zero? (count coll)) (conj coll i 1) (zero? (mod (inc (peek coll)) di)) (conj (pop coll) (inc (peek coll))) :else (conj (pop coll) i (inc (peek coll))))) [] xs)))","user":"58d49fa3e4b03c36ff7e5943"},{"problem":41,"code":"(fn [coll x] (keep-indexed #(when-not (= 0 (mod (+ 1 %1) x)) %2) coll))","user":"52540bcce4b0541d1855b952"},{"problem":41,"code":"(fn drop-nth [s n]\n  (loop [my-s s\n         accum []]\n    (if (empty? my-s)\n      accum\n      (recur (drop n my-s) (concat accum (take (- n 1) my-s))))))","user":"542c026ae4b0dad94371f29a"},{"problem":41,"code":"(fn [coll n]\n  (let [ c          (count coll)\n         r          (map inc (range c))\n         all-pairs  (map list coll r)\n         keep?      #(< 0 (rem (last %) n))\n         kept-pairs (filter keep? all-pairs)\n         kept-coll  (map first kept-pairs)\n       ]\n  (vec kept-coll)))","user":"4f29d9abe4b0d6649770a034"},{"problem":41,"code":"(fn [l n]\n  (loop [x (first l)\n         xs (rest l)\n         cnt 1\n         acc []]\n    (let [include? (not (= 0 (mod cnt n)))]\n      (if (empty? xs)\n        (if include? (conj acc x) acc)\n        (recur\n         (first xs)\n         (rest xs)\n         (inc cnt)\n         (if include? (conj acc x) acc))))))","user":"601004d6e4b074f607df66b2"},{"problem":41,"code":"(fn drop_nth [coll n]\n  (loop [c coll\n         cnt 1\n         result []]\n    (println c cnt result)\n    (if (empty? c)\n      result\n      (if (= cnt n)\n        (recur (rest c) 1 result)\n        (recur (rest c) (inc cnt) (conj result (first c)))))))","user":"5ab490f4e4b073f17744261d"},{"problem":41,"code":"(fn drop' [coll n]\n  (flatten (map (fn [x] (take (- n 1) x)) (partition-all n coll))))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":41,"code":"#(->> % (partition-all (dec %2) %2) flatten)","user":"552a793ee4b0ffed3738f955"},{"code":"(fn [coll n]\n        (loop [res [] iter coll i 1]\n    (if (empty? iter)\n\t      res\n\t      (if (= i n)\n\t\t  (recur res (rest iter) 1)\n\t\t  (recur (conj res (first iter)) (rest iter) (inc i))))))","problem":41,"user":"4e68fad4535d8ccf87e9fe93"},{"problem":41,"code":"(fn [v n]\n      (into [] (flatten (partition-all (dec n) n v)))\n\n  )","user":"5683b67ce4b0945ebc182a9f"},{"code":"(fn [x n]\r\n  (apply concat (partition-all (dec n) n x)))","problem":41,"user":"4f9aa97ae4b0dcca54ed6d0e"},{"problem":41,"code":"#(apply vector (keep-indexed (fn [index item] \n                 (if (= (mod (inc index) %2) 0)\n                        nil \n                        item)) %))","user":"5254b45fe4b0541d1855b9a0"},{"problem":41,"code":"(fn blip [s n]\n  (loop [remain s\n         r []]\n    (if (empty? remain)\n      r\n      (recur (drop n remain) (concat r (take (dec n) remain))))))","user":"55170dd9e4b06a49daca83bd"},{"problem":41,"code":"(fn [a b] (concat (mapcat #(if (= b (count %)) (butlast %) %) (partition-all b a))))","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":41,"code":"; (fn [l n]\n;   (let [seg-len (- n 1)\n;         stride n]\n;     (apply concat (partition-all seg-len stride l))))\n#(apply concat (partition-all (dec %2) %2 %1))","user":"5d83b9aae4b0915913b1d386"},{"code":"(fn drop-nth [coll n]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (concat (take (dec n) s) (drop-nth (drop n s) n)))))","problem":41,"user":"52d809bde4b09f7907dd1384"},{"problem":41,"code":"#(for [n (range 0 (count %1)),\n       :let [pos (inc n)]\n       :when (not= 0 (mod pos %2))]       \n   (nth %1 n))","user":"56732c84e4b05957ce8c611c"},{"problem":41,"code":"(fn skip\n ([l n] (skip l n 1))\n ([l n i]\n     (if (empty? l)\n       '()\n       (if (= n i)\n         (skip (rest l) n)\n         (conj\n          (skip\n           (rest l) n (inc i))\n          (first l))))))","user":"598ab445e4b02b9968b84ce0"},{"problem":41,"code":"(fn [seq n] (loop [[a & s] seq i 1 l []] (if (nil? a) l (if (= i n) (recur s 1 l) (recur s (inc i) (conj l a))))))","user":"555c38d9e4b0b056612e2249"},{"problem":41,"code":"#(keep-indexed\n      (fn meh [index item] (if (not (= 0 (mod (inc index) %2)))\n                      item\n                      (if (= index 0)\n                        item\n                        nil\n                      )\n                    )\n  ) %)","user":"554756b8e4b0a04f79299549"},{"problem":41,"code":"(fn [xs n]\n  (loop [i 1 s xs acc []]\n    (if (empty? s)\n      acc\n      (recur (inc i)\n             (rest s)\n             (if (zero? (mod i n))\n               acc\n               (conj acc (first s)))))))","user":"5787ce76e4b0ebec4cfb750e"},{"problem":41,"code":"#(apply concat (map butlast (partition %2 %2 [:x] %1)))","user":"53065acbe4b02e8216869792"},{"problem":41,"code":"(fn [seq n]\n    \n    (loop [seq seq\n           n n\n           current (dec n)\n           result []]\n\n      (if (first seq)\n        (if (zero? current)\n          (recur (rest seq) n (dec n) result)\n          (recur (rest seq) n (dec current) (conj result (first seq)))  \n        )\n        result\n      )\n    )\n    )","user":"602f56c5e4b0d5df2af22297"},{"code":"(fn [coll n] (mapcat #(take (dec n) %) (partition n n [] coll)))","problem":41,"user":"515a6151e4b0394f658fe241"},{"code":"(fn [s n]\r\n       (flatten ((fn f [s]\r\n                (when (not (empty? s))\r\n                      (cons (take (dec n) s) (f (drop n s)))\r\n                )\r\n               ) s)\r\n       )\r\n     )","problem":41,"user":"4f3543eee4b0e243712b1ebd"},{"problem":41,"code":"(fn [c n]\n  (loop [c c r () p 0]\n    (if (empty? c)\n      r\n      (if (= 0 (mod (inc p) n))\n        (recur (rest c) r (inc p))\n        (recur (rest c) (concat r [(first c)]) (inc p))))))","user":"557c6ca6e4b05c286339e0c4"},{"code":"(fn [s n]\r\n   (keep-indexed #(if (not= 0 (mod (+ 1 %1) n)) %2) s))","problem":41,"user":"4ff07688e4b0678c553fc324"},{"problem":41,"code":"(fn [col n]\n  (loop [result [] remaining col idx 0]\n    (if (empty? remaining)\n      result\n      (recur (if (zero? (mod (inc idx) n)) result (conj result (first remaining))) \n             (rest remaining)\n             (inc idx)))))","user":"5956c6dae4b066ee0a44af61"},{"problem":41,"code":"(fn [v n] (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) v))","user":"5d6fae1ee4b04d129b00f2d4"},{"problem":41,"code":"(fn [lst n]\n  (loop [i 0\n         res (vec '())]\n    (cond \n      (= i (count lst)) res\n      (= 0 (rem (inc i) n)) (recur (inc i) res)\n      :else (recur (inc i) (conj res (nth lst i)) ))))","user":"6074df6fe4b069485764de4b"},{"code":"(fn[data pos]\n   (->> (map-indexed (fn[index value] [index value]) data)\n        (filter #(not (= 0 (rem (inc (first %)) pos))))\n        (map second)))","problem":41,"user":"506c0a02e4b0eda3100c090d"},{"problem":41,"code":"(fn [s n] (loop [[h & r] s acc 1 res []]\n            (if (empty? r)\n               (if (= acc n) \n            \t\tres\n                    (conj res h))\n            (if (= acc n) \n                (recur r 1 res)\n                (recur r (inc acc) (conj res h))))))","user":"563ddefee4b0bfe05bf11857"},{"problem":41,"code":"(fn [vec n](mapcat #(take (dec n) %) (partition-all n vec)))","user":"5e257a33e4b05b4b01516166"},{"code":"(fn [coll drop]\n  (->> coll\n       (map vector (cycle (range drop)))\n       (remove #(-> % first (= (dec drop))))\n       (map second)\n))","problem":41,"user":"4e6dd51b535d5021c1a895f6"},{"code":"#(keep-indexed\n  (fn [i x]\n    (when (pos?\n      (mod (inc i) %2))\n      x)\n    )\n  %)","problem":41,"user":"52bdb689e4b07a9af5792306"},{"problem":41,"code":"(fn [a x] (mapcat rest (filter #(not= 0 (mod (inc (first %)) x)) (map-indexed vector a))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":41,"code":"(fn [s n ] (keep-indexed #(when-not (= 0 (mod (inc %1) n)) %2) s))","user":"573ce277e4b05c31a32c080b"},{"code":"(fn [s n] (mapcat #(if (= n (count %)) (drop-last %) %) (partition-all n s)))","problem":41,"user":"4fca2a13e4b0ee37620e184d"},{"problem":41,"code":"#(vec (apply concat (partition-all (dec %2) %2 %1)))","user":"58e7229fe4b056aecfd47cc4"},{"code":"(fn [s n] (apply concat (partition-all (dec n) n s)))","problem":41,"user":"4db8ec47535d1e037afb219d"},{"problem":41,"code":"(fn [c x] (reduce concat (partition (dec x) x [] c)))","user":"575fec91e4b08062f99a4e89"},{"code":"(fn [col n]\n  (mapcat (fn [xs] \n              (if (= (count xs) n)\n                (butlast xs)\n                xs))\n            (partition-all n col)))","problem":41,"user":"4feff3b6e4b0678c553fc31e"},{"problem":41,"code":"(fn [s n] (mapcat  #(take (dec n) %1) (partition-all n s)))","user":"5c0a87e6e4b0bdcf453d1707"},{"problem":41,"code":"(fn f [col x] (->> (range (count col))\n                 (filter #(not= 0 (mod (inc %) x)))\n                 (map #(col %))))","user":"5493d908e4b0b312c081ff52"},{"problem":41,"code":"(fn dn [xs n]\n  (if (empty? xs)\n    []\n    (concat (take (- n 1) xs)\n            (dn (drop n xs) n)\n    )\n  )\n)","user":"5bca2c71e4b07a9b28b100e7"},{"problem":41,"code":"#(apply concat (partition-all (dec %2) %2 %1))\n;(fn [a n] (filter #(->> n (mod (inc (.indexOf a %1))) zero? not) a))","user":"57c1b32be4b05aa3c4741ca4"},{"problem":41,"code":"(fn [items n]\n  (remove nil? (map \n   #(if (= %2 0) nil %1)\n   items\n   (iterate #(mod (+ % 1) n) 1))))","user":"5784ec65e4b0ebec4cfb74d1"},{"problem":41,"code":"(fn [v n]  (mapcat #(take (dec n) %) (partition-all n v)))","user":"578d230fe4b0ebec4cfb7564"},{"problem":41,"code":"(fn [src n]\n  (let [rm (dec n)]\n\t(keep-indexed #(if (not= rm (rem %1 n)) %2) src)))","user":"57de9169e4b0bd073c202454"},{"problem":41,"code":"(fn f [li n] \n  (map second \n    (filter\n      #(not= (mod (+ (first %) 1) n) 0)\n      (map-indexed vector li))))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (> (rem (+ 1 %1) n) 0) %2) coll))","user":"5245e320e4b09dbe66b56177"},{"problem":41,"code":"(fn [x n] (apply concat (partition-all (- n 1) n x)))","user":"5ac4d1f6e4b0e27600da7735"},{"problem":41,"code":"(fn drop-every-nth\n   ([s, n] (drop-every-nth s n 1 []))\n   ([s, n, i, dropped]\n    (if (empty? s)\n      dropped\n      (if (= n i)\n        (drop-every-nth (rest s) n 1 dropped)\n        (drop-every-nth (rest s) n (inc i) (conj dropped (first s)))))))","user":"552d487ee4b076ab5578f7e4"},{"code":"#(flatten (partition (- %2 1) %2 nil %1))","problem":41,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn [arr every]\n   (mapcat (fn [x i]\n             (if (< i (dec every))\n               [x]))\n           arr\n           (cycle (range every))))","problem":41,"user":"4fa3c137e4b081705acca193"},{"problem":41,"code":"(fn [xs y] (->> (partition y y [\"a\"] xs) (mapcat butlast)))","user":"5614fa1de4b05f002753dfbe"},{"problem":41,"code":"#(flatten(map (fn [x] ( if (= (count x) %2 )(butlast x )(identity x))) (partition-all %2 %1) ))","user":"60d78d64e4b0d60f5ea6f7ed"},{"code":"(fn dr[lt n]\n    ((fn dropNth [coll x]\n       (if (< 0 (count coll))\n       (let [[h & t] coll]\n         (if (= x n) (dropNth t 1) (conj (dropNth t (+ x 1)) h)))\n       '())\n   ) lt 1))","problem":41,"user":"503c02e5e4b0fc0f99c2e54e"},{"problem":41,"code":"#(keep-indexed (fn [x y] (if-not (= 0 (mod (inc x) %2)) y)) %1)","user":"57b45257e4b0fbc9809a2796"},{"problem":41,"code":"#(mapcat butlast (partition %2 %2 [:none] %))","user":"538db083e4b0b51d73faae74"},{"code":"(fn [x y] (keep-indexed #(when (not= 0 (rem (inc %1) y)) %2) x))","problem":41,"user":"50a5f72fe4b0aa96157e2611"},{"problem":41,"code":"(fn [coll idx] (keep-indexed #(if-not (= (mod (inc %1) idx) 0) %2) coll))","user":"5a4d656fe4b05d388ecb6ba9"},{"code":"#(for [n (range)\n        :let [x (get % n)]\n        :while (not= x nil)\n        :when (> (rem (+ n 1) %2) 0)] x)","problem":41,"user":"53500869e4b084c2834f4ad3"},{"code":"(fn [xs s] (keep-indexed #(if (= 0 (rem (inc %) s)) nil %2) xs))","problem":41,"user":"523ed522e4b057c4b7cd0a78"},{"problem":41,"code":"#(loop [counter 1 res [] intermediate %1]\n    (cond\n      (empty? intermediate) res\n      (= counter %2) (recur 1 res (rest intermediate))\n      :else (recur (inc counter) (conj res (first intermediate)) (rest intermediate))))","user":"5b60e88be4b0c6492753e70b"},{"code":"(fn dropnth [li n]\n  (if (empty? li)\n    '()\n    (concat (take (- n 1) li) (dropnth (drop n li) n))))","problem":41,"user":"50c84ba2e4b00bb60fe0c53e"},{"problem":41,"code":"(fn [l n]\n  (loop [news '() tmpl l]\n    (if (empty? tmpl)\n      (flatten news)\n      (recur (conj (take (- n 1) tmpl) news)(drop n tmpl)))))","user":"59368ccae4b02506e01a297a"},{"problem":41,"code":"#(loop [xs %1 n %2 i 1 result []]\n   (if (empty? xs)\n     result\n     (recur (rest xs) n (+ 1 i) (if (= 0 (mod i n))\n                                  result\n                                  (conj result (first xs))))))","user":"4fad9da0e4b081705acca23c"},{"code":"(fn [s n] (flatten\n  (map-indexed\n    (fn [i x] (if (= (rem i n) (dec n)) [] [x])) s)))","problem":41,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn D [l n]\n  (loop [c 1 l l result []]\n    (cond (empty? l) result\n          (= c n) (recur 1 (rest l) result)\n          :else (recur (inc c) (rest l) (conj result (first l))))))","problem":41,"user":"51a4416ae4b0def3c5c5868c"},{"problem":41,"code":"(fn drop-nth\n  [coll n]\n  (flatten \n    (if (not (empty? coll))\n      (cons (take (dec n) coll) (drop-nth (drop n coll) n)))))","user":"5401aefbe4b0df28a13c62c7"},{"code":"(fn [coll ofset]\n  (reduce\n   #(if (= 0 (mod (+ 1 (.indexOf coll %2)) ofset)) %1 (conj %1 %2)) [] coll))","problem":41,"user":"5271605ae4b03e8d9a4a73ed"},{"code":"(fn [l every]\n  (for [i (range (count l))\n    :when (not= (mod i every) (- every 1))]\n    (l i)))","problem":41,"user":"512f06c5e4b0762be4c7aad7"},{"code":"(fn [c x]\n  (loop [coll c\n         n 1\n         acc []]\n    (cond\n     (not (seq coll)) acc\n     (= n x) (recur (rest coll) 1 acc)\n     :else (recur (rest coll) (inc n) (conj acc (first coll))))))","problem":41,"user":"515efd01e4b02c55805ea238"},{"problem":41,"code":"#(->> %1\n      (partition-all %2)\n      (map (fn [x] (take (dec %2) x)))\n      (flatten))","user":"56cf115de4b0ea9b8538f765"},{"problem":41,"code":"(fn drop-nth [x y] (if (empty? x) x (concat (take (dec y) x) (drop-nth (drop y x) y))))","user":"5bb3c9a8e4b0a20761a2352f"},{"code":"(fn ddropper [lst n] \n  (filter #(not (nil? %)) \n          (for [i (range (count lst))]\n  (when-not (= (mod (inc i) n) 0) (nth lst i))\n)\n          )\n  )","problem":41,"user":"4ecfa05c535d44c135fd68b9"},{"code":"(fn [l n]\n  (loop [index 0\n         newList []]\n    (if (= index (count l))\n      newList\n      (if (= 0 (rem (+ index 1) n))\n        (recur (inc index) newList)\n        (recur (inc index) (conj newList (nth l index)))\n      )\n    )\n  )\n)","problem":41,"user":"53a36fd7e4b0f1fc74538834"},{"problem":41,"code":"(fn [col n] (keep-indexed #(when (not= 0 (mod (inc %1) n)) %2) col))","user":"57650419e4b0994c1922fc09"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed #(when (pos? (rem (inc %1) n)) %2) xs))","user":"55f5b8d6e4b06e875b46ce8d"},{"code":"(fn [s n]\n  (flatten (partition-all (dec n) n s)))","problem":41,"user":"4e399685535deb9a81d77f40"},{"problem":41,"code":"(fn [lst numb] (apply concat (partition-all (- numb 1) numb lst)))","user":"564716e6e4b0284900eef616"},{"problem":41,"code":"(fn [c m]\n   (->>\n    c\n    (map-indexed list)\n    (remove (fn [[i x]]\n              (= (mod (inc i) m) 0)))\n    (map (fn [[_ x]] x))))","user":"5808ee16e4b0a837a8b30d16"},{"problem":41,"code":"(fn f [s x]\n  (if (empty? s) '()\n      (concat\n       (take (dec x) s)\n       (f (drop x s) x) )))","user":"594c1baae4b07ddc2dafae59"},{"problem":41,"code":"(fn [col v]\n  (loop [res [] col col i 1]\n    (if (empty? col)\n      res\n      (let [res (if (zero? (rem i v)) res (conj res (first col)))]\n        (recur res (rest col) (inc i))))))","user":"5ea6fe98e4b00a66d4a951b2"},{"problem":41,"code":"(fn [y n] (map last (filter #(not= (mod (inc (first %)) n) 0) (map-indexed (fn [idx itm] [idx itm]) y))))","user":"55a0e139e4b0acc240e31504"},{"code":"(fn [c n] (vec (flatten (map #(take (dec n) %) (partition-all n c)))))","problem":41,"user":"525b0b51e4b0cb4875a45d01"},{"code":"(fn [x y] (map second (remove #(= 0 (rem (first %) y))(map vector (take (count x) (range 1 (inc (count x)))) x))))","problem":41,"user":"510c123be4b078ea7192110e"},{"code":"(fn [coll n] (keep-indexed (fn [i x] (if (not= (mod i n) (dec n)) x nil)) coll))","problem":41,"user":"5244fa73e4b0d8acf9ed6acb"},{"problem":41,"code":"(fn drop-n [l i]\n  ((comp\n     (partial map second)\n     (partial filter #(not (= (mod (inc (first %)) i) 0)))\n     (partial map-indexed (fn [idx itm] [idx itm]))) l))","user":"56cf80f9e4b0ea9b8538f76a"},{"problem":41,"code":"(fn this [xs n]\n    (if (empty? xs) xs\n      (concat (take (dec n) xs) (this (drop n xs) n))))","user":"5716d585e4b07c98581c3b03"},{"code":"#(flatten (map (partial take (dec %2)) \n                (partition-all %2 %1)))","problem":41,"user":"518ee4f9e4b0cd6ff51676a5"},{"problem":41,"code":"#(loop [items %1 n %2 i 1 acc []]\n   (if (= 0 (count items)) acc\n     (recur (rest items) n (+ i 1) (if (= 0 (mod i n)) acc (conj acc (first items))))))","user":"58a31ecee4b02bd94d917ee7"},{"code":"(fn dropn [coll n]\n  (map second \n       (filter \n   \t\t#(not= 0 (mod (inc (first %)) n))\n   \t\t(map-indexed vector coll))))","problem":41,"user":"51d96ad0e4b02ceefd94774f"},{"code":"(fn [vec n]\n  (mapcat #(take (dec n) %) \n    (partition-all n vec))\n  )","problem":41,"user":"50ae22c3e4b0a40c9cfb08d0"},{"code":"(fn de [coll n]\n  (when (seq coll)\n  (let [[head tail] (split-at (dec n) coll)]\n    (concat head (de (rest tail) n)))))","problem":41,"user":"52a1acb2e4b04e0c58e87bdb"},{"problem":41,"code":"#(into (vec (mapcat drop-last (partition %2 %1))) (subvec %1 (* (quot (count %1) %2) %2)))","user":"587f8393e4b0f1effa3b75f2"},{"problem":41,"code":"; partition with empty padding ends up being shorter then partition-all\n; not that this was on purpose. i just didn't know about partition-all.\n#(flatten (partition (dec %2) %2 [] %1))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"(fn [coll n]\n  (vec\n  (flatten\n  (map butlast\n  (partition n n [0] coll)))))","problem":41,"user":"4e6e97ca535d5021c1a8960c"},{"problem":41,"code":"(fn [x y] (mapcat #(if (< (count %) y) % (butlast %)) (partition-all y x)))","user":"56949fc5e4b0dcc4269f4120"},{"code":"(fn [c n] (mapcat #(take (dec n)  %) (partition-all n c)))","problem":41,"user":"4e6dd0f5535d5021c1a895f3"},{"code":"(fn [x y] (vec (clojure.set/difference (set x) (set (take-nth y (cons x x))))))","problem":41,"user":"50982cc7e4b04e098a4c726c"},{"code":"(fn drop-nth [coll n]\n  (->> coll\n       (map (fn [i real] \n              (if (= 0 (mod i n))\n               nil\n               real))\n               (map inc (range)))\n       (filter #(not (nil? %)))))","problem":41,"user":"5192dd39e4b0c663c5d86c9e"},{"code":"(fn [S N] \n  (map #(first %) \n    (filter #(not= (rem (inc (second %)) N) 0)\n      (map #(vector %1 %2) S (range)))))","problem":41,"user":"4fda016ae4b05e33b9224f42"},{"problem":41,"code":"(fn [coll n] \n  (loop [i 1 \n         r [] \n         c coll] \n    (if (empty? c) \n      r \n      (if (= (rem i n) 0) \n        (recur (inc i) r (rest c)) \n        (recur (inc i) (conj r (first c)) (rest c))))))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":41,"code":"(fn [x y]\n  (keep-indexed \n   #(if (= (rem (inc %1) y) 0) nil %2)\n   x))","user":"546a65fce4b00cfc9eacc153"},{"problem":41,"code":"(fn [coll n]\n  (reverse\n   (loop [c coll index 1 accum nil]\n    (if (empty? c) accum\n      (if (= index n) (recur (rest c) 1 accum)\n        (recur (rest c) (inc index) (conj accum (first c))))))))","user":"55f6e7ece4b06e875b46ce9e"},{"code":"#(flatten \n  (map\n    (fn [x] (take (dec %2) x))\n    (partition-all %2 %1)))","problem":41,"user":"4e9dafe1535dbda64a6f6b89"},{"problem":41,"code":"(fn [c n] (for [i (range (count c)) :when (not= (rem (+ i 1) n) 0)] (nth c i)))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":41,"code":"(fn [m p]\n  (loop [a m r []]\n    (if (empty? a)\n      r\n      (recur (drop p a) (into r (take (dec p) a))))))","user":"5683d2a9e4b0945ebc182aa0"},{"code":"(fn [coll s] (mapcat #(if (= (count %) s) (butlast %) %) (partition-all s coll)))","problem":41,"user":"4dad76588e77d6ed63f12a44"},{"problem":41,"code":"(fn [seqn nthi]\n  (apply concat\n         (partition-all (dec nthi) nthi seqn)))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":41,"code":"(fn [xs n]\n  (first (reduce (fn [[res cnt] el]\n                   (let [newcnt (inc cnt)]\n                     (if (= 0 (mod cnt n))\n                     [res newcnt] ; dropping element\n                     [(concat res [el]) newcnt])))\n                 [(empty xs) 1] xs)))","user":"553638bae4b09218d5f44fba"},{"code":"(fn drop-nth [x n]\n  (keep-indexed #(if(zero? (rem (inc %1) n) ) nil %2) x))","problem":41,"user":"4f03bf5e535dcb61093f6b5d"},{"problem":41,"code":"(fn [collec index] (filter (complement nil?) (map-indexed (fn [i e] (if-not (zero? (rem (inc i) index)) e)) collec)))","user":"5a634ff0e4b0512ff01cd995"},{"code":"(fn [col n]\n  (flatten\n      (concat\n    (map #(drop-last %) (partition n col))\n    (take-last (rem (count col) n) col)\n    )))","problem":41,"user":"4ebbff41535dfed6da9c6d78"},{"problem":41,"code":"(fn [coll n]\n  (flatten \n   (concat \n    (map drop-last (partition n coll))\n    (take-last (rem (count coll) n) coll))))","user":"56b3b12ee4b0982f16b37e1c"},{"code":"(fn [s n]\n  (mapcat #(if (= n (count %)) (butlast %) %)\n    (partition-all n s)))","problem":41,"user":"4e50c894535dc968683fc4ee"},{"problem":41,"code":"#(map nth (repeat (count %1) %1) (filter (fn a[x](not= 0 (rem (+ 1 x) %2))) (range (count %1))))","user":"57a20f72e4b0c3d858beb8f5"},{"problem":41,"code":"(fn grab-item ([lst num]\n               (grab-item lst num []))\n  \t\t\t  ([lst num new-lst]\n               (if (empty? lst)\n                 new-lst\n                 (grab-item (drop num lst) num (into new-lst (take (- num 1) lst))))))","user":"5691ef12e4b0dcc4269f40f8"},{"code":"(fn [l n] (keep-indexed #(if (= (- n 1) (mod % n)) nil %2) l))","problem":41,"user":"4ff67852e4b0678c553fc37e"},{"problem":41,"code":"#(loop [[head & tail] %1\n           i 1\n           result []]\n    \n      (if-not head\n        result\n        (if (= (mod i %2) 0)\n           (recur tail (inc i) result)\n           (recur tail  (inc i) (conj result head))\n           )))","user":"598085e6e4b021a7a535fdd3"},{"problem":41,"code":"(fn foo [s n]\n(for [i (range (+ (count s) 1)) :when (not= (mod i n) 0) ]\n(get s (- i 1))\n)\n)","user":"5f1aade6e4b091ba50b4dbe4"},{"code":"(fn drop-n2 [xs n]\n  (mapcat #(if (= 0 (mod (second %) n)) [] (vector (first %))) (map #(vector %1 %2) xs (iterate inc 1))))","problem":41,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn [x n] (map #(nth x (dec %)) (filter \n           #(not (zero? (rem % n))) \n           (range 1 (inc (count x)))\n           )))","problem":41,"user":"4f8b27b3e4b02e764a0a5179"},{"problem":41,"code":"(fn [coll n]\n    (keep-indexed (fn [index item] \n                    (if-not (= (rem (inc index) n) 0) item)\n                    )\n                  coll\n                  )\n    )","user":"571a282ae4b07c98581c3b46"},{"problem":41,"code":"(fn [coll n]\n          (apply concat\n                 (partition-all (dec n) n coll)))","user":"59438419e4b060784b3b7929"},{"code":"(let [dro (fn dro [l c n]\n            (when (> (count l) 0)\n              (if (= c n)\n                (dro (rest l) 1 n)\n                (conj (dro (rest l) (inc c) n) (first l))\n                )\n              )\n            )\n      ]\n  #(dro %1 1 %2))","problem":41,"user":"52d92f13e4b09f7907dd13a2"},{"problem":41,"code":"(fn [x y] \n   (\n    reduce \n  #(\n    if (= %2 nil)\n    %1\n    (conj %1 %2  ))\n  []\n \n  (\n   map-indexed\n   #(if (not= (rem %1 y)  (- y 1))\n      %2\n      nil\n     )\n   x)))","user":"60845eb8e4b0736b099e42ef"},{"problem":41,"code":"(fn [s n]\n  (second (reduce #(if (= (first %1) n) `(1 ~(second %1)) (list (inc (first %1)) (conj (second %1) %2))) '(1 []) s)))","user":"565a3e25e4b068f2fe63dbfb"},{"problem":41,"code":";; problem 41\n(fn drop-every-nth [x n]\n\t(loop [x x acc [] counter 0]\n\t\t(if (empty? x)\n\t\t\tacc\n\t\t\t(recur (rest x)\n\t\t\t\t   (if (not= (dec n) (mod counter n))\n\t\t\t\t   \t   (conj acc (first x))\n\t\t\t\t   \t   acc)\n\t\t\t\t   (inc counter)))))","user":"53703287e4b0fc7073fd6e8f"},{"problem":41,"code":"(fn p41 [l n]\n  (when-not (empty? l)\n    (let [[l+ l-] (split-at (- n 1) l)]\n      (concat l+ (p41 (rest l-) n)))))","user":"5f968f4ee4b0715f5002d7d2"},{"problem":41,"code":"(fn [c i] (mapcat #(if (= (count %) i) (drop-last %) %) (partition-all i c)))","user":"4f598c87e4b0030a34fb2ada"},{"problem":41,"code":"(fn dropnth [acc v n]\n  (if (empty? v)\n    acc\n    (recur (concat acc (take (dec n) v)) (drop n v) n ))) []","user":"552e1c98e4b076ab5578f7ee"},{"problem":41,"code":"(fn [arr n]\n  (for [x (range (count arr)) :when (not= (mod x n) (dec n))] (nth arr x)))","user":"5e42b688e4b01d43a70e8e6b"},{"problem":41,"code":"#(loop [s %1\n                  i 1\n                  result []]\n             (if (empty? s)\n               result\n               (let [[head & tail] s]\n                 (if (= i %2)\n                   (recur tail 1 result)\n                   (recur tail (inc i) (conj result head))))))","user":"587ee260e4b052da650a6353"},{"code":"(fn mydrop [coll n]\n  (when (seq coll)\n    (lazy-cat \n\t    (take (dec n) coll) \n\t    (mydrop (drop n coll ) n))))","problem":41,"user":"5018ed15e4b011a2e0bf6412"},{"code":"(fn rm-nth [xs n]\n  (cond (< (count xs) n) xs\n        true (concat (take (- n 1) xs) (rm-nth (drop n xs) n))) )","problem":41,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn [l e]\n  (loop [r [] l l i 1]\n    (if (nil? (seq l))\n      r\n      (recur (if (= 0 (rem i e))\n               r\n               (conj r (first l)))\n             (rest l)\n             (inc i)))))","problem":41,"user":"529b5301e4b02ebb4ef7509f"},{"problem":41,"code":"(fn dropEvery\n  [list n]\n  (reduce (fn [result [x i]]\n            (if (zero? (rem i n))\n              result (conj result x)))\n            [](map vector list (iterate inc 1))))","user":"59dd3930e4b0a0ac046f2504"},{"problem":41,"code":"#(apply concat ( partition-all (dec %2) %2 %))","user":"5a2960fde4b07f18be40aa78"},{"code":"(fn [xs n]\n  (keep-indexed #(when (not= (dec n) (rem %1 n)) %2) xs))","problem":41,"user":"4efcac3a535de96065cf507e"},{"code":"(fn [xs n] (map second (filter #(not (zero? (rem (inc (first %1)) n))) (map-indexed vector xs))))","problem":41,"user":"52b8af15e4b07a9af57922b5"},{"code":"(fn [coll n] (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n coll)))","problem":41,"user":"4df669d4535d08e6dec9fe35"},{"problem":41,"code":"(fn my-drop-every-nth-item [ls n]\n  (filter identity\n          (map-indexed (fn [idx itm]\n                         (if (zero? (mod (inc idx) n))\n                           nil itm))\n                       ls)))","user":"605f5c69e4b03746e80ebf5e"},{"problem":41,"code":"(fn den [l x] \n  (if (empty? l) [] \n    (concat (take (- x 1) l) (den (drop x l) x)\n                     \n                     \n                   \n    )\n  )\n)","user":"55a59ebae4b0acc240e3154d"},{"problem":41,"code":"(fn [coll n]\n  (loop [[f & r] coll i 1 acc []]\n    (if-not (nil? f)\n      (if (> n i)\n        (recur r (inc i) (conj acc f))\n        (recur r 1 acc))\n      acc)))","user":"543c5200e4b032a45b86933e"},{"code":"(fn [coll1 n1]\n  \t(let  [byc \n\t\t\t\t(fn foo [coll n]\n\t\t\t\t\t(let [take-set (fn [c]\n\t\t\t\t\t\t(when (next c) (take n c)))]\n\t\t\t\t\t\t(when-let [aset (seq (take-set coll))]\n\t\t\t\t\t\t\t(cons (if (= n (count aset)) (butlast aset) aset) (foo (drop n coll) n)))))]\n\t\t\n\t\t(apply concat (byc coll1 n1))))","problem":41,"user":"4f8ac2bde4b02e764a0a5172"},{"code":"(fn [coll n]\n  (keep-indexed #(when (not= (dec n) (mod % n)) %2)\n                coll))","problem":41,"user":"4dabb7b1950ed6eda1bd72f3"},{"code":"(fn my-drop-nth [coll n]\n  (if (not (empty? coll)) (concat (take (dec n) coll) (my-drop-nth (drop n coll) n))))","problem":41,"user":"4fc34787e4b081705acca33e"},{"code":"#(flatten (partition (dec %2) %2 nil %1))","problem":41,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":41,"code":"(fn [s k] \n  (map last (filter #(not= (-> % first inc (mod k)) 0) (map-indexed vector s))))","user":"53213810e4b09d4e7a9b54b0"},{"code":"(fn [l n] (map last (filter #(not= (dec n) (rem (first %) n))\r\n        (map-indexed vector l))))","problem":41,"user":"50481b70e4b0ec70b3ef8d98"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (first \n  (reduce (fn [[acc m] curr]\n            (println acc m curr)\n            (if (zero? (rem m n))\n              [acc (inc m)]\n              [(conj acc curr) (inc m)]))\n          [[] 1]\n          coll)))","user":"60654263e4b069485764ddc9"},{"problem":41,"code":"(fn [collection index]\n  (flatten (partition-all (dec index) index collection)))","user":"5675eea1e4b05957ce8c6152"},{"problem":41,"code":"(fn  [lst n]                                                                                                       \n  (apply concat (partition-all (dec n) n lst)))","user":"5e96c662e4b0157ca96647ca"},{"problem":41,"code":"(fn [col n]\n  (loop [[h & t :as xs] col\n         i n\n         ret []]\n    (if (empty? xs)\n      ret\n      (if (= i 1)\n        (recur t n ret)\n        (recur t (dec i) (conj ret h))))))","user":"54d22860e4b0e8a36923e5ef"},{"code":"(fn [l n] (filter (partial not= nil) (map-indexed (fn [k v] (if (= 0 (mod (+ k 1) n)) nil v)) l)))","problem":41,"user":"53736ffce4b06d7f452d9e11"},{"code":"(fn f [arr n]\n  (loop [cnt n\n         result []\n         l arr]\n    (if (empty? l) ;список закончился\n      result\n      (if (= cnt 1)\n        (recur n result (rest l))\n        (recur (dec cnt) (conj result (first l)) (rest l))\n        )\n      )))","problem":41,"user":"516bc02ce4b005fd0cdf85c5"},{"code":"(fn [xs n]\n  (map #(nth xs %)\n       (map dec (remove #(zero? (mod % n))\n                        (range (inc (count xs)))))))","problem":41,"user":"5004034ce4b0678c553fc447"},{"problem":41,"code":"(fn [coll sep] (filter #(< 0 (mod (inc (.indexOf coll %)) sep)) coll))","user":"5b6f27dce4b0c6492753e7d9"},{"problem":41,"code":"(fn [col n] \n    (mapcat (fn [a] (take (- n 1) a)) (partition-all n col))\n )","user":"5bc6ef7ce4b07a9b28b1009f"},{"problem":41,"code":"(fn [collec multiple]\n  (keep-indexed (fn [idx item]\n                  (if (and (not= idx 0) (= (mod (+ idx 1) multiple) 0))\n                    nil  \n                    item))\n                collec))","user":"59595f85e4b066ee0a44afa1"},{"code":"(fn [values drop-number]\n(map second \n     (filter #(not(= (mod (inc(first %)) drop-number) 0))\n          (map-indexed vector values))))","problem":41,"user":"50621cbde4b0341461c88951"},{"problem":41,"code":"(fn\n  [coll n]\n  (->> (map vector coll (iterate inc 1))\n       (reduce\n        (fn [l [el idx]]\n          (if (zero? (mod idx n))\n            l\n            (conj l el)))\n        [])))","user":"5c15537ae4b01240ff5671bf"},{"problem":41,"code":"( fn [lst n] ( reduce ( fn [s1 s2] ( concat s1 ( if (not= (nth s2 (- n 1) nil ) nil ) ( butlast s2 ) s2 ) ) ) [] (partition-all n lst ) ) )","user":"600b385ce4b074f607df668d"},{"problem":41,"code":"(fn hello\n  [coll x]\n  (if (empty? coll)\n    ()\n    (reduce conj (vec (take (- x 1) coll)) (vec (hello (drop x coll) x)))))","user":"55b3c03ee4b01b9910ae2975"},{"code":"(fn [s n] (keep-indexed #(when (pos? (rem (inc %1) n)) %2) s))","problem":41,"user":"4effb663535dcb61093f6a2e"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (zero? (mod (+ 1 %) n)) nil %2) coll))","user":"534e60c2e4b084c2834f4ab2"},{"problem":41,"code":"(fn [coll n] (reduce concat (partition (dec n) n [] coll)))","user":"5227eacee4b0186687e23a5e"},{"problem":41,"code":"(fn bla\n  [my-seq my-drop]\n  (\n    if (> my-drop (count my-seq))\n    (vec my-seq)\n    (vec (concat (subvec my-seq 0 (dec my-drop) ) (bla (subvec my-seq my-drop) my-drop)))\n    )\n  )","user":"54458995e4b032a45b86939e"},{"code":"(fn dropn [s n]\n  (if (empty? s) \n    s\n    (concat (take (dec n) s) (dropn (drop n s) n))))","problem":41,"user":"503e6047e4b06c4e0e1fa266"},{"problem":41,"code":"(fn [a b] (remove (fn [x] (some #(= x %) (take-nth b (concat [0] a)))) a))","user":"569c40cee4b0542e1f8d1462"},{"problem":41,"code":"(fn [s0 m]\n   (letfn [(f [s r]\n             (if (empty? s) ()\n                 (let [r' (inc r)\n                       s1 #(f (rest s) r')]\n                   (lazy-seq (if (zero? (rem r m))\n                               (s1)\n                               (cons (first s) (s1)))))))]\n     (f s0 1)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":41,"code":"(fn dropnth [x n]\n  ((fn dropint [a i]\n    (if (= (count a) 1)\n      (if (= 1 i)\n        []\n        [(first a)])\n      (if (= 1 i)\n        (concat [] (dropint (rest a) n))\n        (concat [(first a)] (dropint (rest a) (dec i))))))\n    x n))","user":"595ed97fe4b066ee0a44b051"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (->> coll\n       (partition-all n)\n       (map #(if (= n (count %))\n               (butlast %)\n               %))\n       (reduce concat)))","user":"53fd66a4e4b0de5c418485e3"},{"problem":41,"code":"(fn\n  [lst n]\n  (loop [x 1\n         lst lst\n         res ()]\n    (if (empty? lst)\n      (reverse res)\n      (recur (rem (inc x) n)\n             (rest lst)\n             (if (zero? (rem x n))\n               res\n               (cons (first lst) res))))))","user":"5aa2f1dee4b0d174b936c865"},{"problem":41,"code":"(fn [sq n]\n          (->> sq\n               (map-indexed #(vector %1 %2))\n               (filter #(pos? (mod (inc (first %)) n)))\n               (map second)))","user":"5c995fa4e4b048ec896c5a96"},{"code":"(fn f [s n]\n  (if (empty? s)\n\t  ()\n\t  (concat\n      (take (dec n) s) (f (drop n s) n))))","problem":41,"user":"4fdc3065e4b05e33b9224f6b"},{"code":"(fn f\n  [xs n]\n  (if (empty? xs)\n    '()\n    (concat (take (dec n) xs)\n            (f (drop n xs) n))))","problem":41,"user":"50ef77a4e4b0bdaecbb47d99"},{"problem":41,"code":"#(loop [in %1\n        out []]\n   (if (empty? in)\n     out\n     (recur (drop %2 in) (concat out (take (dec %2) in)))))","user":"5fbb010ae4b03f550f448233"},{"problem":41,"code":"(fn [xs n]\n    (vec\n     (keep-indexed\n      (fn [idx x]\n        (if-not (zero? (mod (inc idx) n)) x))\n      xs)))","user":"5c3ec6dbe4b08cd430848e8a"},{"code":"(fn [a b] (flatten (partition (- b 1) b nil a))  )","problem":41,"user":"4e2164ff535d04ed9115e815"},{"problem":41,"code":"(fn [c n] \n   (->> c\n        (partition-all n)\n        (mapcat #(take (dec n) %))))","user":"532a033be4b09d4e7a9b551f"},{"problem":41,"code":"(fn drop-every-nth [l n]\n  (apply concat\n         (map #((fn drop-nth [l n]\n                  (concat (take (- n 1) l)\n                          (drop n l))) % n)\n              (partition-all n l))))","user":"5d41ac35e4b05dd059a54375"},{"problem":41,"code":"(fn [col n] (mapcat #(take (dec n) %1) (partition-all n col)))","user":"574c5e18e4b02ea11479921b"},{"problem":41,"code":"(fn tester\n  [scq n]\n  (println scq n)\n  (if (>= (count scq) n)\n    (concat (take (dec n) scq) (tester (nthrest scq n) n))\n    scq))","user":"5a6a32b6e4b0512ff01cda22"},{"code":"(fn [S n] (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n S)))","problem":41,"user":"51cf126ae4b0e42293a2256b"},{"problem":41,"code":"(fn [seqn numb] (map second(filter #(not= 0 (mod (first %) numb))\n (map-indexed (fn [indx item] [(+ 1 indx) item]) seqn))))","user":"54f6f00fe4b01ecee9d88814"},{"problem":41,"code":"(fn [c n] \n  (mapcat (partial take (dec n)) \n          (partition-all n c)))","user":"4f0366b0535dcb61093f6aa9"},{"code":"(fn  philm [x y] (keep-indexed (fn [p q] (if (not= (mod (+ 1 p) y) 0) q)) x))","problem":41,"user":"4f524d11e4b03ad3f0c10d34"},{"problem":41,"code":"(fn drop\n   ([s num] (drop s num [] num))\n   ([s num ret cnt]\n     (if (empty? s)\n       ret\n       (if (= cnt 1)\n         (drop (rest s) num ret num)\n         (drop (rest s) num (conj ret (first s)) (- cnt 1))))))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":41,"code":"(fn p\n  [s n]\n  (loop [s s c n r ()]\n    (if (empty? s)\n      (reverse r)\n      (if (= c 1)\n        (recur (rest s) n r)\n        (recur (rest s) (dec c) (cons (first s) r))))))","user":"56df632ce4b0ca2494a095f2"},{"problem":41,"code":";(fn [x y] (into [] (filter (fn [a] (not (nil? a))) (map #(if (= (mod (first %) y) 0) nil (second %)) (into [] (map-indexed (fn [idx item] [(inc idx) item]) x))))))\n\n#(apply concat (partition-all (dec %2) %2 %1))","user":"5604ae27e4b0c80df0ca2663"},{"code":"(fn [s n] (flatten (partition-all (dec n) n s)))","problem":41,"user":"4f047dbf535dcb61093f6bce"},{"problem":41,"code":"#(flatten  (partition (- %2 1) %2 nil %1))","user":"5a99a540e4b0d174b936c7a3"},{"problem":41,"code":"(fn [v n] (keep-indexed (fn [index item]\n                          (if (= 0 (mod (inc index) n))\n                            nil\n                            item))\n                        v))","user":"54d127b7e4b0e8a36923e5de"},{"problem":41,"code":"(fn [coll by]\n  (->> (partition-all (dec by) by coll)\n       flatten))","user":"58472aade4b089d5ab817ea0"},{"code":"#(remove nil? (map-indexed (fn [i x] (if (= 0 (mod (inc i) %2)) nil x)) %1))","problem":41,"user":"4eab612d535d7eef30807316"},{"problem":41,"code":"#(loop [it %1\n         result []]\n    (if (empty? it)\n      result\n      (recur (drop %2 it)\n             (concat result (take (dec %2) it)))))","user":"5d5c2730e4b09db18d4482ea"},{"problem":41,"code":"(fn every-nth [s n]\n  (let [idxs (drop 1 (take (count s) (iterate (partial + n) 0)))]\n    (keep-indexed #(if-not\n                      (some (partial = (inc %1)) idxs)\n                      %2)\n                      s\n                      )))","user":"5d078e2de4b0cc9c915881fa"},{"code":"#(loop [xs %1, i 1, zs []]\n   (if (empty? xs)\n    zs\n    (if (= (mod i %2) 0) \n       (recur (rest xs) (inc i) zs)\n       (recur (rest xs) (inc i) (conj zs (first xs))))))","problem":41,"user":"4fb4303fe4b081705acca2ac"},{"code":"(fn f [s n]\n  (when-not (empty? s)\n    (concat (take (- n 1) s)\n            (f (drop n s) n))))","problem":41,"user":"51256b40e4b05d10e3e395f8"},{"problem":41,"code":"(fn [data i]\n   ((fn doit[dat curr oldcurr]\n      (println (count dat) curr oldcurr)\n      (if (empty? dat)\n        []        \n        (if (= curr 1)\n          (doit (rest dat) oldcurr oldcurr)\n          (concat [(first dat)]  (doit (rest dat) (dec curr) oldcurr))\n          ))\n      )\n     data i i)\n   )","user":"54bbba99e4b0ed20f4ff6ec2"},{"problem":41,"code":"(fn [s n]\n  (loop [i 1 xs s result [] ]\n    (if-not xs\n      result\n      (let [[x & xs] xs]\n      (recur (inc i) xs (if (= (rem i n) 0) result (conj result x)))))))","user":"57763002e4b0979f89651631"},{"problem":41,"code":"(fn asd [xs n]\n      (mapcat\n       #(if (= (count %) n)\n          (butlast %)\n          %)\n       (partition n n [] xs)))","user":"5a062e07e4b01bb0ae8afdc5"},{"problem":41,"code":"(fn dropnth\n  [lst n]\n  (#(apply concat (partition-all (dec %2) %2 %)) lst n))","user":"5c7dad57e4b0d597f478caba"},{"code":"(fn [coll n]\n   (flatten (partition-all (dec n) n coll)))","problem":41,"user":"507e5cf8e4b085af06e3afd1"},{"code":"(fn f [v n]\n    (if (empty? v)\n      []\n      (into [] (concat (take (dec n) v) (f (drop n v) n)))))","problem":41,"user":"504e0136e4b078edc5f5938e"},{"problem":41,"code":"(fn [x n]\n  (loop [cx x, accum [], i 1]\n    (if (empty? cx)\n      accum\n      (if (= (mod i n) 0)\n        (recur (rest cx) accum (inc i))\n        (recur (rest cx) (conj accum (first cx)) (inc i))\n        )\n      )\n    )\n  )","user":"588fb3a7e4b00487982d51b9"},{"problem":41,"code":"#((comp (partial apply concat) (partial map (partial take (dec %2))) (partial partition %2 %2 [])) %1)","user":"58dac8b1e4b0a4d5acaab668"},{"code":"#(for [[i x] (map-indexed vector %1) :when (pos? (mod (inc i) %2))] x)","problem":41,"user":"4f169a0f535d64f60314644c"},{"problem":41,"code":"(fn [A n] (mapcat #(if (= (count %) n) (drop-last %) %) (partition n n nil A)))","user":"5fe362d9e4b05ac5b16ea179"},{"problem":41,"code":"(fn [coll i]\n  (map first\n       (filter #(not= 0 (mod (inc (second %)) i))\n               (map list coll (range (count coll))))))","user":"56bf4ac0e4b0f26550335985"},{"problem":41,"code":"(fn remove-seq [seq-list n]\n  (loop [result [] cnt 1 lst seq-list t n]\n    (if (empty? lst)\n      result\n      (if (= cnt t)\n        (recur result 1 (rest lst) t)\n        (recur (conj result (first lst)) (inc cnt) (rest lst) t)))))","user":"58e90258e4b056aecfd47cfd"},{"code":"(fn drpnth\n  [sq nt]\n  (if (> nt (count sq))\n    sq\n    (concat\n      (take (dec nt) sq)\n      (drpnth (drop nt sq) nt))))","problem":41,"user":"504e12ade4b078edc5f593b7"},{"code":"#(filter (fn[x] (not (nil? x))) (map-indexed (fn[i x] (when (= 0 (rem (+ i 1) %2)) nil) (when-not (= 0 (rem (+ i 1) %2)) x)) %1))","problem":41,"user":"4e6df3c9535d5021c1a895fa"},{"code":"(fn drop-nth [xs n]\n  (let [h (take (dec n) xs)\n        t (drop n xs)]\n    (if (empty? xs)\n      h\n      (concat h (drop-nth t n)))))","problem":41,"user":"4f2a35ace4b0d6649770a03a"},{"code":"( fn [sek n] (concat (take (- n 1) sek) (take (- n 1) (drop (+ n) sek)) (take (- n 1) (drop (+ n n) sek)) (take (- n 1) (drop (+ n n n) sek)) (take (- n 1) (drop (+ n n n n) sek))))","problem":41,"user":"4e218470535d04ed9115e817"},{"problem":41,"code":"; drop every nth item of seq is equivalent to drop every (n-1)th item of (rest seq) ? \n; drop every 3rd of [1 2 3 4 5 6] is drop every 2nd of [2 3 4 5 6] is drop every 1st of [3 4 5 6] is drop 3rd of [4 5 6] is drop 2nd of [5 6] is drop 1st of [6] \n\n(fn drop-every-nth [xs n]\n  (for [[x y] (map list (range 1 (inc (count xs))) xs)\n        :when (not (zero? (mod x n)))]\n    y))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"problem":41,"code":"(fn drop-nth\n  [s n]\n  (keep (fn [[i v]]\n          (if-not (zero? (mod (inc i) n)) v))\n   (map-indexed list s)))","user":"54145050e4b01498b1a719ea"},{"problem":41,"code":"(fn [col n] \n  (loop [col col res []] \n    (if (empty? col)\n      (apply concat res)\n      (recur (drop n col) (conj res (take (dec n) col)))\n     )))","user":"5367bc60e4b0243289761e81"},{"problem":41,"code":"#(map (fn [x] (nth x 1))\n    (filter\n      (fn [x] (not= 0 (mod (inc (nth x 0)) %2)))\n      (map vector (iterate inc 0) %1)))","user":"5e08c3dde4b0978307768fc8"},{"problem":41,"code":"(fn f [xs n]\n  (let [a (take (dec n) xs)\n        b (drop n xs)]\n    (if (empty? b) a (concat a (f b n)))))","user":"5d0bb4fae4b0cc9c91588237"},{"problem":41,"code":";#(flatten (partition (dec %2) %2 [] %))\n#(apply concat (partition-all (dec %2) %2 %))","user":"54d341f7e4b0e8a36923e603"},{"problem":41,"code":"(fn [li n] ((fn rec [l n i] (cond\n                              (empty? l) nil\n                              (= n i) (rec (rest l) n 1)\n                              true  (cons (first l) (rec (rest l) n (inc i))))) li n 1))","user":"5b20134de4b03cfeda66ed2d"},{"problem":41,"code":"(fn [seq n]\n  (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) seq))","user":"58637221e4b0f14aab7c881d"},{"problem":41,"code":"(fn [coll n] (flatten (map butlast (partition n n [:a] coll))))","user":"5b857411e4b047b03b2037ce"},{"code":"(fn [x y]\n  (loop [coll x answer [] n 1]\n    (if (empty? coll)\n      answer\n      (if (= n y)\n       (recur (rest coll) answer 1)\n       (recur (rest coll) (conj answer (first coll)) (+ n 1))\n      )\n    )\n  )\n)","problem":41,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"#(loop [[x & xs] %1 i 1 acc []]\n  (if (nil? x)\n    acc\n    (if (zero? (mod i %2))\n      (recur xs (inc i) acc)\n      (recur xs (inc i) (conj acc x)))))","problem":41,"user":"4e6e4127535d5021c1a89605"},{"problem":41,"code":"#(keep-indexed (fn [index item]\n                  (if-not (zero? (mod (inc index) %2)) item)) %1)","user":"585dbe41e4b0f14aab7c879f"},{"problem":41,"code":"(fn [sq n]\n  (apply concat (partition-all (dec n) n sq )))","user":"58ca613de4b021aa9917edb7"},{"problem":41,"code":"#(for [pairs (map list %1 (iterate inc 1))\n       :when (not= (rem (second pairs) %2)\n                   0)\n       ] (first pairs))","user":"57539e04e4b02ea1147992ab"},{"code":"(fn [coll idx] \n  (mapcat \n   \t #(if (= idx (count %)) \n        (drop-last %) \n        %)\n    (partition-all idx coll)\n   ))","problem":41,"user":"51f805b0e4b06ff1c25c52e2"},{"problem":41,"code":"(fn drop-nth\n  ([xs n]\n   (drop-nth xs n 1 []))\n   ([[x & xs] n i acc]\n    (if x\n      (if (= 0 (mod i n))\n        (recur xs n (inc i) acc)\n        (recur xs n (inc i) (conj acc x)))\n      acc)))","user":"5705f569e4b0b0fb43fd0677"},{"code":"(fn [s n]\n  (loop\n    [tr []\n     i 1\n     r s]\n    (if (= nil (first r))\n      tr\n      (recur\n       (if (= n i)\n         tr\n         (conj tr (first r)))\n       (if (= n i)\n         1\n         (+ i 1))\n       (rest r)))))","problem":41,"user":"530d85dee4b08068f379eca8"},{"problem":41,"code":"#(vec (loop [x 0 result []]\n      (if (<= (+ x %2) (count %1))\n          (do (recur (+ x %2) (concat result (subvec %1 x (- (+ x %2) 1)))))\n          (concat result (subvec %1 x (count %1) )))))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":41,"code":"(fn dropn\n  [coll n]\n  (mapcat (partial take (dec n)) (partition-all n coll)))","user":"5d6d2e11e4b04d129b00f2ba"},{"problem":41,"code":"(fn [x n] (mapcat (partial take (dec n)) (partition-all n n x)))","user":"5a3e1243e4b0447ef91cc5ae"},{"code":"(fn [l1 n] \n  (let [t (dec n)]\n    (loop [l l1 res []]\n      (if (nil? (seq l))\n        res\n        (recur (drop n l) (concat res (take t l)) )))))","problem":41,"user":"4f141dee535d64f603146434"},{"problem":41,"code":"(fn my_remove [coll number]\n  (keep-indexed (fn [idx v]\n                       (if (not= (mod (+ idx 1) number) 0) v)) coll)\n  )","user":"56349008e4b0bfe05bf117bd"},{"problem":41,"code":"(fn [coll n]\n  (loop [final-vec [] curr-coll coll]\n    (if (empty? curr-coll)\n      final-vec\n      (recur (into final-vec (take (- n 1) curr-coll)) (drop n curr-coll)))))","user":"5890799be4b00487982d51d6"},{"code":"(fn dropnth [sq n]\r\n     (loop [indexes (filter #(not (= (mod (inc %) n) 0)) (take (count sq) (range)))\r\n            acc []]\r\n       (if (empty? indexes)\r\n         acc\r\n         (recur (rest indexes) (conj acc (sq (first indexes)))))))","problem":41,"user":"4f82e14be4b033992c121c0c"},{"code":"(fn [l c] \n  (for [x \n        (map #(list %1 %2) l (flatten (for [x (range (count l))] (range 1 (+ c 1))))) :when (not (= (last x) c))]\n    (first x)))","problem":41,"user":"533ee560e4b085b17e897d98"},{"problem":41,"code":"(fn [v n]\n  (mapcat \n   #(take (- n 1) %) \n   (partition-all n v)))","user":"543d5c61e4b032a45b86934d"},{"code":"#((fn drop [s n]\n  (if (empty? s) s\n    (if (= n 1) (drop (rest s) %2)\n      (cons (first s) (drop (rest s) (dec n)))))) %1 %2)","problem":41,"user":"505dcfc8e4b0e6aca564be0d"},{"code":"(fn [xs n] (letfn [(mul? [m n] (and (not (zero? m)) (zero? (mod m n))))]\n             (keep-indexed #(if (mul? (inc %1) n) nil %2) xs)))","problem":41,"user":"50b9d991e4b04934c218a4a9"},{"code":"(fn [coll n]\n  (->> (partition-all n coll)\n       (map (partial take (dec n)))\n       (flatten)))","problem":41,"user":"4fa340b4e4b081705acca18c"},{"code":"#(mapcat butlast (partition %2 %2 '(1) %1))","problem":41,"user":"4e5ecd65535d8a8b8723a2d6"},{"code":"(fn [lat n]\n  (flatten (map (fn [x] (if (= (count x) n) (drop-last x) x))\n                (partition-all n lat))))","problem":41,"user":"4eb6f065535d7eef30807372"},{"code":"(fn [xs n]\n  (let [f (fn [[xs i] x]\n            (if (= i n)\n              [xs 1]\n              [(conj xs x) (inc i)]))]\n    (first (reduce f [[] 1] xs))))","problem":41,"user":"52cca96ae4b07d0d72b2736e"},{"code":"(fn [coll n]\n  (loop [res [] coll coll]\n    (if (empty? coll) res\n      (recur (concat res (take (- n 1) coll)) (drop n coll)))))","problem":41,"user":"52d0902ee4b07d0d72b273bd"},{"problem":41,"code":"(fn [l n] (keep-indexed #(if-not (= (mod % n) (- n 1)) %2) l))","user":"59adec09e4b0e1f4e384c897"},{"problem":41,"code":"#(concat (mapcat butlast (partition %2 %1)) (drop (* %2 (quot (count %1) %2)) %1))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":41,"code":"(fn [c n] (remove #(= :z %) (map #(if (= (dec n) %2) :z %) c (cycle (range n)))))","user":"53572176e4b04ce2eb3ed276"},{"code":"(fn [seq,n] (map (fn [[v,i]] v) (filter (fn [[v,i]] (not= 0 (rem i n)))(map vector seq (range 1 (+ 1 (count seq)))))))","problem":41,"user":"4f0f3725535d0136e6c22337"},{"problem":41,"code":"(fn  [l r] \n  (let [enum (map-indexed vector l)]\n    (map second (filter  #(not (zero? (mod (+ 1 (first %)) r))) enum))))","user":"554f7ef2e4b00713264bd9a1"},{"problem":41,"code":"#(loop [[head & tail] %1\n        cnt %2\n        acc []]\n   (if (nil? head)\n     acc\n     (if (> cnt 1)\n       (recur tail (dec cnt) (conj acc head))\n       (recur tail %2 acc)\n     )\n   )\n )","user":"53f7820be4b0de5c41848560"},{"problem":41,"code":"(fn [coll pos]\n   (loop [c coll\n          p 1\n          acc (empty coll)]\n     (if (empty? c)\n       acc\n       (if (= (mod p pos) 0)\n         (recur (rest c) (inc p) acc)\n         (let [x (first c)]\n           (recur (rest c) (inc p) (conj acc x)))))))","user":"56372c3ce4b0bfe05bf117d1"},{"problem":41,"code":"(fn [s n]\n  (filter #(not (nil? %)) (reduce #(identity (if (= 0 (mod (+ 1 (count %1)) n))\n                                               (conj %1 nil)\n                                               (conj %1 %2))) [(first s)] (rest s))))","user":"5535d34be4b09218d5f44fb0"},{"problem":41,"code":"(fn drop-every-n [coll n] \n  (let [not-round-division? (fn [x] \n                                (when (not= (rem x n) 0) true))]\n    (keep-indexed \n      (fn [idx item] \n        (when (not-round-division? (inc idx)) item)) \n        coll)))","user":"54e606c3e4b024c67c0cf803"},{"problem":41,"code":"(fn abc\n  [L n]\n  (if (empty? L)\n    L\n    (concat\n      (take (dec n) L)\n      (abc (drop n L) n)\n    )\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"problem":41,"code":"(fn [s n]\n      (loop [agg [] s* s]\n        (if (empty? s*)\n        agg\n        (recur (concat agg (let [x (take n s*)]\n                             (if (> n (count x))\n                               x\n                               (drop-last x))))\n               (drop n s*)))))","user":"5d4c4de9e4b0776584bd6f2f"},{"problem":41,"code":"(fn dropnth [s p]\n  (filter #(distinct? (rem (inc (.indexOf s %)) p) 0) s))","user":"585a7b05e4b0f14aab7c874d"},{"problem":41,"code":"(fn [se n] (seq (keep-indexed #(if (not (= (mod (inc %1) n) 0)) %2) se)))","user":"59bdeb22e4b0a024fb6ae42d"},{"problem":41,"code":"#(->> %1 \n      (partition %2 %2 (repeat nil))\n      (mapcat butlast)\n      (filter identity))","user":"5bc39d2be4b07a9b28b10045"},{"code":"(fn [s n]\n  (keep-indexed #(when-not (zero? (rem (inc %1) n))\n                   %2)\n                s))","problem":41,"user":"519db0ede4b037b32803f9b9"},{"code":"(fn ! ([x y] (! x y y))    ([x y z]   (if (empty? x) nil  (if (= z 1) (! (rest x) y y)  (concat [(first x)] (! (rest x) y (dec z))) )  )      ) )","problem":41,"user":"52faec2ee4b047fd55837004"},{"code":"(fn [col n] (mapcat #(take (dec n) %) (partition-all n col)))","problem":41,"user":"500d1db4e4b05f7c30cfa69f"},{"problem":41,"code":"(fn [se n]\n  (loop [acc [] se se n n]\n    (if (empty? se)\n      acc\n      (recur (concat acc (take (- n 1) se)) (drop n se) n))))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (mapcat #(take (dec n) %) (partition-all n coll)))","user":"580d2788e4b0849f6811b730"},{"code":"(fn [coll n]\r\n  (map #(second %) \r\n       (filter \r\n         (fn [item] (not= (rem (first item) n) 0)) \r\n         (map vector (iterate inc 1) coll))))","problem":41,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn [s n] \n  (keep-indexed #(if (= (- n 1) (mod %1 n)) nil %2) s)\n)","problem":41,"user":"511cca27e4b00c2a1fa7ff7d"},{"code":"(fn\n          [a b]\n          (letfn\n            [(step\n               [a b]\n               (if\n                 (>= (count a) b)\n                 (concat\n                   (take (- b 1) a)\n                   (step (drop b a) b))\n                 (take (- b 1) a)))]\n            (step a b)))","problem":41,"user":"514d7e29e4b019235f6c0587"},{"code":"(fn [y x] (mapcat #(take (- x 1) %) (partition x x nil y)))","problem":41,"user":"50b64b55e4b0a86f8358ca6b"},{"problem":41,"code":"(fn [ls n] \n  (reduce-kv (fn [acc k v] (if (and (> k 0) (= (mod k n) (- n 1))) acc (conj acc v))) [] ls))","user":"546d41bde4b00cfc9eacc18c"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n   (fn [ix it]\n     (if\n       (integer?\n        (/\n         (+ ix 1)\n         n))\n       nil\n       it))\n   coll))","user":"5cb62652e4b026601754b949"},{"problem":41,"code":"(fn [init_l init_n]\n  ((fn drop_nth [l n]\n     (if (empty? l)\n       '()\n       (if (= 1 n)\n         (drop_nth (rest l) init_n)\n         (cons (first l) (drop_nth (rest l) (- n 1))))))\n   init_l init_n))","user":"54651982e4b01be26fd746d4"},{"problem":41,"code":"(fn [col n] (apply concat\n                   (map (partial take (dec n))\n                        (partition-all n col))))","user":"54580586e4b01be26fd74616"},{"problem":41,"code":"(fn [xs n]\n  (->> (map vector (iterate inc 1) xs)\n       (remove #(zero? (mod (first %) n)))\n       (map second)))","user":"57eaf869e4b0bfb2137f5b56"},{"problem":41,"code":"#(loop\n   [acc []\n    currN 1\n    xs %1]\n   (if (empty? xs)\n     acc\n     (if (= currN %2)\n       ; skip it\n       (recur acc 1 (rest xs))\n       ; don't skip\n       (recur (conj acc (first xs)) (inc currN) (rest xs)))))","user":"5daa1fc8e4b000c986472c3e"},{"problem":41,"code":"(fn [result coll n] (if (empty? coll) result (recur (into result (take (dec n) coll)) (nthrest coll n)  n))) []","user":"5d4dd0b4e4b0776584bd6f40"},{"problem":41,"code":"(fn [x y] (vec (flatten (partition (dec y) y nil x))))","user":"54461393e4b032a45b8693a5"},{"code":"(fn fun [x k]\n  (let [t (for [i (range (count x)) :when (not= (mod (inc i) k) 0)] (nth x i))] t)\n)","problem":41,"user":"52132f8de4b0d32679a50651"},{"problem":41,"code":"(fn dropn [coll n]\n  (mapcat \n   \t#(if (= (count %) n) (drop-last %) %)\n   \t(partition-all n coll)))","user":"54a6399ee4b09f271ff37c85"},{"code":"(fn dropnth \n  ([x drop-index] (dropnth x drop-index 1))\n  ([x drop-index i] \n    (cond \n      (empty? x) '()\n      (= (mod i drop-index) 0) (dropnth (rest x) drop-index (inc i))\n      :else (cons (first x) (dropnth (rest x) drop-index (inc i))))))","problem":41,"user":"4ebbf772535dfed6da9c6d76"},{"code":"(fn [coll n]\r\n  (loop [idx 0 result []]\r\n    (if (= idx (count coll))\r\n        result\r\n        (recur (inc idx) (if (zero? (mod (inc idx) n)) result (conj result (nth coll idx)))))))","problem":41,"user":"5028bce0e4b01614d1633ffb"},{"code":"(fn [ns n] (mapcat #(if (= (- n 1) (mod % n)) '()  (list %2)) (range) ns))","problem":41,"user":"51c1d159e4b0d204dbe2ca18"},{"code":"( fn [coll x] (vec ( \n               filter identity (map \n                                 #(when %1 %2)\n                                   (map not= (map mod (range 1 (+ 1 (count coll))) (repeat x)) (repeat 0) )\n                                    coll) ) ) )","problem":41,"user":"528e1f30e4b0239c8a67aed4"},{"problem":41,"code":"#(if (seq %2)\n   (recur (concat %1 (take (dec %3) %2)) (drop %3 %2) %3)\n   %1) []","user":"54b2ec84e4b09f271ff37d33"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed (fn [i e]\n                  (when (not= 0 (mod (inc i) n)) e)) xs))","user":"558ffb4be4b0277789237667"},{"problem":41,"code":"(fn [s n] (mapcat #(if (= n (count %))\n                     (drop-last %)\n                     %)\n                  (partition n n nil s)))","user":"50a00725e4b08df8156e9e46"},{"problem":41,"code":"(fn drop-nth\n  [xs n]\n  (apply concat (partition-all (dec n) n xs)))","user":"5c73bcf9e4b0fca0c16227bb"},{"code":"(fn hoge [lst i]\n  (if (< (count lst) i) [lst]\n    (flatten (cons (apply vector (take (dec i) lst)) (hoge (drop i lst) i)) )))","problem":41,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn [coll n]\n   (mapcat (fn [coll]\n             (if (= n (count coll))\n               (drop-last coll)\n               coll))\n           (partition n n [] coll)))","problem":41,"user":"52090567e4b0e152394d76ed"},{"problem":41,"code":"#(mapcat (fn [l] (take (- %2 1) l))\n         (partition-all %2 %1))","user":"5c26c9b3e4b07e362c2305c5"},{"code":"#(mapcat drop-last (partition %2 %2 [nil] %1))","problem":41,"user":"50de11b2e4b061dbdced7217"},{"problem":41,"code":"(fn dropN\n  [lst x]\n  (flatten \n   (map #(if (= (count %) x) (drop-last %) %) (partition-all x lst))))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":41,"code":"(fn [col v]\n   (keep-indexed #(if (not= (rem (+ 1 %1) v) 0)\n                    %2) col))","user":"55b0d315e4b002ce9d5cbc26"},{"problem":41,"code":"(fn drop-nth [coll n] (keep-indexed #(if (not= 0 (rem (+ %1 1) n)) %2) coll))","user":"54769c7ae4b0c51c1f4d72a8"},{"problem":41,"code":"(fn [lst x]\n (reverse\n  (loop [in lst\n         out '()\n         step 1]\n    (cond\n     (empty? in) out\n     (= step x) (recur (rest in) out 1)\n     :else (recur (rest in) (cons (first in) out) (inc step))))))","user":"594bd637e4b07ddc2dafae41"},{"code":"(fn [c n] (mapcat #(if (= n (count %)) (drop-last %) %) (partition-all n c)))","problem":41,"user":"51cfc616e4b0e42293a22578"},{"problem":41,"code":"(fn [coll n]\n              (->> coll (map-indexed (fn [i x] (when (pos? (mod (inc i) n)) x))) (filter identity)))","user":"4f9aa2a6e4b0dcca54ed6d0c"},{"problem":41,"code":"(fn [xs idx] (keep-indexed #(when (not= 0 (rem (inc %1) idx)) %2) xs))","user":"52f89125e4b047fd55836fd4"},{"problem":41,"code":"(fn [xs n]\n  (letfn\n      [(go [ys i rs]\n         (cond\n          (empty? ys) rs\n          (< 1 i) (go (rest ys) (dec i) (conj rs (first ys)))\n          :else (go (rest ys) n rs)))]\n    (go xs n [])))","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn [s n]\n  (remove nil?\n          (map-indexed #(when-not (= 0 (mod (inc %1) n)) %2)\n                       s)))","problem":41,"user":"50978ca4e4b00ad8bab4e966"},{"code":"#(remove (set (take-nth %2 `(_ ~@%))) %)","problem":41,"user":"4e823ed7535db62dc21a62c7"},{"code":"(fn drop-every-nth [s n]\n  (when (seq s)\n    (concat (take (dec n) s)\n            (drop-every-nth (drop n s) n))))","problem":41,"user":"5310e7aee4b08068f379ecdc"},{"problem":41,"code":"(fn\n  [l n]\n  (filter #(not= %1 :drop-me) (map-indexed #(if (zero? (mod (inc %1) n)) :drop-me %2) l)))","user":"58821372e4b0f1effa3b764d"},{"code":"(fn[x,n](keep-indexed #( if(not= (rem (inc %1) n) 0) %2) x))","problem":41,"user":"52d66ca0e4b09f7907dd135c"},{"problem":41,"code":"(fn [coll n]\n  (loop [acc [] iteration 0 cl coll]\n    (if-not (first cl)\n      acc\n      (let [next (if (= (- n 1) (rem iteration n)) acc (conj acc (first cl)))]\n        (recur next (inc iteration) (rest cl))))))","user":"55e70e8de4b050e68259b490"},{"problem":41,"code":"(fn [coll n]\n  (->> (map-indexed #(vec [%1 %2]) coll)\n       (filter #(not= (dec n) (mod (first %) n)))\n       (map second)))","user":"57089f82e4b0b0fb43fd06a2"},{"problem":41,"code":"(fn [list x](mapcat #(take (- x 1) %) (partition-all x list)))","user":"570eeb66e4b0b0fb43fd06fa"},{"problem":41,"code":"(fn [s n]\n  (map #(s %) (filter #(< (mod % n) (dec n)) (range 0 (count s)))))","user":"589e704ae4b02bd94d917e5e"},{"problem":41,"code":"(fn\n  [lst x]\n  (for [cnt (range (count lst)) \n        :when (not= 0 (mod (inc cnt) x))]\n       (get lst cnt)))","user":"570306cae4b08d47c97781ec"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed (fn [i x]\n                 (when (not= 0 (mod (inc i) n))\n                   x))\n               coll))","user":"554bd33ce4b0a04f7929959a"},{"code":"(fn [c n]\n  (mapcat #(if (= n (count %)) (butlast %) %) (partition-all n c)))","problem":41,"user":"4f9f7daae4b0dcca54ed6d37"},{"code":"(fn [coll n]\n  (apply concat\n    (partition-all (dec n) n coll)))","problem":41,"user":"53779a26e4b06839e8705e38"},{"problem":41,"code":"(fn [c n]\n  (map \n    first \n    (filter \n      (fn [[a b]] ((complement zero?) (mod b n))) \n      (map vector c (iterate inc 1)))))","user":"550b5c10e4b06e50f9beb143"},{"problem":41,"code":"(fn [v n]\n  (let [indexed-v (map vector (range) v)\n        filter-nth (fn [n] (filter #(not (= 0 (rem (+ 1 (first %)) n))) indexed-v))]\n    (map second (filter-nth n))))","user":"54431b6ee4b032a45b869385"},{"code":"(fn [col index]\n  (loop [cnt 1 c col re ()]\n    (if (empty? c)\n      (vec (reverse re))\n      (recur (if (= index cnt) 1 (+ cnt 1)) (rest c)\n        (if (= index cnt)\n          re\n          (cons (first c) re)\n          )\n        )\n      )\n    )\n  )","problem":41,"user":"4db7da66535d1e037afb2187"},{"code":"#(for [[idx v] \n      (map-indexed vector %1) \n      :when (not (= (mod (inc idx) %2) 0))] v)","problem":41,"user":"51ca82e9e4b08b1cbd0d9488"},{"code":"(fn [coll n]\r\n   (flatten \r\n     (concat \r\n       (map #(drop-last %) (partition n coll)) \r\n       (take-last (rem (count coll) n) coll))))","problem":41,"user":"4eb80ce6535d7eef3080737d"},{"problem":41,"code":"#(flatten (concat (map drop-last (partition %2 %1)) (take-last (rem (count %1) %2) %1)))","user":"572af688e4b0f4d77e651249"},{"problem":41,"code":"#(remove (set (take-nth %2 (drop (dec %2) %1))) %1)","user":"543be8f0e4b032a45b869337"},{"problem":41,"code":"(fn [s n](keep-indexed #(if-not (= (mod (inc %1) n) 0) %2) s))","user":"542fa0dde4b0dad94371f2d2"},{"code":"(fn [x y]\n  (flatten \n    (map \n      #(take (- y 1) %) \n      (partition-all y x))))","problem":41,"user":"5236cd89e4b0e010857b4e45"},{"code":"(fn [a, b] (flatten (map #(take (- b 1) %) (partition-all b a))))","problem":41,"user":"5034a14de4b062bc5d7ae165"},{"problem":41,"code":"(fn chompit [xs n]\n   (if (< (count xs) n)\n     xs\n     (concat (butlast (take n xs)) (chompit (drop n xs) n))))","user":"5bfc9037e4b0bdcf453d15f2"},{"code":"(fn [xs z]\n  (let [p (partition-all z xs)]\n    (flatten (map (fn [s] (take (dec z) s)) p))))","problem":41,"user":"4ffa213ee4b0678c553fc3b7"},{"problem":41,"code":"(fn [lst n]\n  (filter (fn [item]\n                  (let [idx (.indexOf lst item)]\n                    (if (= idx 0)\n                      true\n                      (not (= 0 (mod (inc idx) n))))))\n                lst))","user":"5498e155e4b0b312c081ff86"},{"code":"(fn [s n]\n  (let [auxx (fn [s r i]\n               (if (seq s)\n                 (if (zero? (mod i n))\n                   (recur (rest s) r (inc i))\n                   (recur (rest s) (conj r (first s)) (inc i)))\n                 r))]\n    (auxx s [] 1)))","problem":41,"user":"4e7c4290535db169f9c796bc"},{"code":"(fn [a n]\n  (flatten (map #(butlast %) (partition n n [1] a))))","problem":41,"user":"52bdd135e4b07a9af579230a"},{"problem":41,"code":"(fn drop-n [coll n] (flatten (map drop-last (filter #(not= 0 (rem (second %) n))(map #(vector %1 %2) coll (map #(+ 1 %) (range)))))))","user":"53da8fede4b0e771c30254a3"},{"problem":41,"code":"(fn [s step]\n  (flatten (partition (dec step) step '() s))) ;partition takes an optional padding param which i've made empty","user":"560dfa8de4b05f002753df46"},{"code":"#(remove nil? (map-indexed (fn [i x] (when (not= (mod (inc i) %2) 0) x)) %1))","problem":41,"user":"504c8165e4b09724c857af31"},{"problem":41,"code":"#(apply concat (partition-all (dec %2) %2 %) )","user":"5c371f5be4b0d62ef62d9f72"},{"code":"(fn drop_every_nth \n      ([x y] (drop_every_nth x y y))\n      ([x y z]\n         (if (empty? x)\n           x\n           (if (= y 1)\n             (drop_every_nth (rest x) z z)\n             (concat (list (first x))\n                     (drop_every_nth (rest x) (- y 1) z))))))","problem":41,"user":"52e17e66e4b09f7907dd1423"},{"problem":41,"code":"(fn [x y]\n   (loop [i y\n          z []]\n     (if (<= i (count x))\n       (recur (+ i y) (conj z (nth x (- i 1))))\n       (remove (set z) x))))","user":"5d1b59abe4b02ea6f0fb697e"},{"problem":41,"code":"(fn [lst n]\n  (->> lst\n    (partition (dec n) n nil)\n    (apply concat)\n  )\n)","user":"5943abb6e4b060784b3b792b"},{"problem":41,"code":"(fn [xs n] \n  (mapcat (fn [p] \n            (if (= n (count p))\n              (drop-last p)\n              p))\n          (partition-all n xs)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":41,"code":"(fn [l n] (map first (filter #(not= n (second %)) (map vector l (cycle (range 1 (inc n)))))))","user":"54f8b6f4e4b01ecee9d8882c"},{"problem":41,"code":"(fn dropski [c n]\n  (if (or (empty? c) (< n 2))\n    c\n    (concat (take (- n 1) c) (dropski (drop n c) n))))","user":"5dc72a9ce4b02f9375f4e1cd"},{"code":"(fn [s n]\n  (loop [[f & r] s i 1 o []]\n    (cond (not f) o\n          (zero? (mod i n)) (recur r (inc i) o)\n          :else (recur r (inc i) (conj o f)))))","problem":41,"user":"4e46e48b535dc968683fc4b7"},{"code":"(fn drop-every [col n] (for [idx (range (count col)) :when (or (= idx 0) (< 0 (mod (inc idx) n)))] (nth col idx)))","problem":41,"user":"51c214bce4b0d204dbe2ca1c"},{"problem":41,"code":"(fn [coll n]\n  (loop [coll coll\n         acc '()\n         n n]\n    (if (empty? coll)\n      acc\n      (recur (drop n coll) (concat acc (take (dec n) coll)) n))))","user":"571cd9dce4b0145328a76271"},{"problem":41,"code":"(fn [arg1 arg2] (mapcat #(take (dec arg2) %) (partition-all arg2 arg1)))","user":"52ee0de4e4b05e3f0be25ec1"},{"code":"(fn [X n]\r\n  (loop [z 0 res []]\r\n\t\t(if (< z (count X))\r\n\t\t\t(if (= (rem (+ z 1) n) 0)\r\n\t\t\t\t(recur (inc z) res)\r\n\t\t\t\t(recur (inc z) (conj res (nth X z)))\r\n\t\t\t)\r\n\t\t\tres\r\n\t\t)\r\n\t)\r\n)","problem":41,"user":"4f031883535dcb61093f6a5e"},{"code":"#(keep-indexed (fn [i x] (if (= (mod i %2) (dec %2)) nil x)) %1)","problem":41,"user":"4fe2501ae4b0dd6cd5ce3644"},{"code":"(fn [xs n]\n  (for [[x y] (map vector xs (cycle (range 1 (inc n))))\n      :when (not= 0 (mod y n))] x))","problem":41,"user":"501688f7e4b052339a490e7a"},{"problem":41,"code":"#(into [](flatten(partition-all (- %2 1) %2 %1)))","user":"53ada652e4b047364c04446d"},{"code":"(fn tt [x n] (if-not (empty? x) (apply concat (take (- n 1) x) [(tt (nthrest x n) n)]) ()))","problem":41,"user":"503ff621e4b0c9bf6384b00f"},{"problem":41,"code":"(fn [f f1]\n  \n  (apply concat (partition-all (dec f1) f1 f))\n  \n  )","user":"5f727be9e4b02876ed9fd08d"},{"code":"(fn [seq n] (flatten (map #(if (= %2 1) () %1) seq (take (count seq) (cycle (concat (take (dec n) (repeat 0)) '(1)))))))","problem":41,"user":"5003bb77e4b0678c553fc442"},{"problem":41,"code":"#(mapcat drop-last (partition %2 %2 \"a\" %))","user":"5e486cb0e4b043cd24807a3e"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed \n   (fn [index x] \n     (let [is-nth-element (= 0 (mod (inc index) n))]\n       (if is-nth-element nil x)))\n   xs))","user":"563cdfdfe4b0bfe05bf11840"},{"code":"(fn my-drop-n\n  ([f i] (reverse (my-drop-n f i 0 '())))\n  ([f i n r]\n   (cond\n    (empty? f) r\n    :else\n    \t(let [nr (if (not (= 0 (rem (inc n) i)))\n                   (conj r\n                         (first f))\n                   r)]\n          (recur (rest f) i (inc n) nr)))))","problem":41,"user":"51eff50fe4b0249c592fbdf0"},{"problem":41,"code":"(fn drop-every [s n]\n  (if (empty? s)\n    []\n    (concat (take (dec n) s) (drop-every (drop n s) n))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":41,"code":"(fn [coll skip]\n  (mapcat #(if (= skip (count %1)) (drop-last %1) %1) (partition-all skip coll)))","user":"60c4e5dfe4b0e0fa5f1b42cd"},{"problem":41,"code":"(fn my-sol\n  [coll n]\n  (flatten (map #(take (dec n) %) (partition-all n coll))))","user":"56c3aca0e4b05cc29241ee90"},{"problem":41,"code":"(fn f [c n] (if-not (empty? c) (concat (take (dec n) c) (lazy-seq (f (drop n c) n)))))","user":"5112500ee4b0350614f07a72"},{"problem":41,"code":"(fn [coll x]\n  (loop [dropped [] remain coll index 1]\n    (if (empty? remain)\n      dropped\n      (recur (if (= index x) dropped (conj dropped (first remain))) (rest remain) (if (= index x) 1 (inc index))))))","user":"5da306a3e4b000c986472be7"},{"problem":41,"code":"(fn [ coll n ] (flatten (map #(if (= (count %1) n) (butlast %1) %1)(partition-all n coll))))","user":"5b8aa478e4b0c0b3ffbd49b2"},{"code":"(fn [x every]\n  (map first\n       (filter\n        #(not= (mod (second %) every) 0)\n        (map vector x (iterate inc 1))\n        )\n       )\n  )","problem":41,"user":"4edf95a8535d10e5ff6f5342"},{"code":"(fn [sq n] \n  (loop [s1 (vec sq) s2 [] c 1]\n    (if (empty? s1)\n      s2\n      (if (= (mod c n) 0)\n        (recur (rest s1) s2 (inc c))\n        (recur (rest s1) (conj s2 (first s1)) (inc c))))))","problem":41,"user":"53069e16e4b02e8216869798"},{"code":"(fn [xs n]\r\n  (loop [xs xs\r\n         acc []\r\n         m n]\r\n    (if (empty? xs) acc\r\n        (if (= m 1) (recur (rest xs) acc n)\r\n            (recur (rest xs) (conj acc (first xs)) (dec m))))))","problem":41,"user":"4e8681b7535dae1a5effa438"},{"problem":41,"code":"(fn drop-nth [in-seq n]\n  (filter #(not= (mod (.indexOf in-seq %) n) (- n 1)) in-seq))","user":"5c196dc3e4b01240ff5671fa"},{"problem":41,"code":"(fn [coll th]\n   (:resu\n     (reduce (fn [val itm]\n               (let [idx (:idx val)\n                     resu (:resu val)]\n                 (if (== th (inc idx))\n                   (assoc val :idx 0)\n                   (assoc val :idx (inc idx)\n                              :resu (conj resu itm)))))\n             {:idx 0 :resu []}\n             coll)))","user":"535f0cbde4b04ce2eb3ed2d9"},{"problem":41,"code":"#((fn rec \n  [coll i res counter] \n  (if (empty? coll) \n    res \n    (if (= 0 (mod counter i)) \n      (rec (rest coll) i res (inc counter))\n      (rec (rest coll) i (conj res (first coll)) (inc counter)))))\n %1 %2 [] 1)","user":"5550bcece4b00713264bd9ae"},{"problem":41,"code":"#(loop [out []\n        remaining %1] \n   (if (< (count remaining) %2)\n     (concat out remaining)\n     (recur \n      (concat out (take (dec %2) remaining)) \n      (drop %2 remaining))))","user":"5af31955e4b0cc2b61a3bc7a"},{"code":"(fn [coll skip]\n   (mapv second (filter #((complement zero?) (mod (inc (first %)) skip)) (map-indexed vector coll))))","problem":41,"user":"521d709ae4b050d5da0427ef"},{"code":"(fn[c s]\n     (filter (comp not nil?)\n\t\t   (map #(if (< 0 (mod (inc %2) s)) %) c (range))))","problem":41,"user":"4e57d1e2535d8a8b8723a289"},{"problem":41,"code":"(fn drop-every\n  [lst x]\n  (filter #(not= % nil) (map #(if (not(= (mod (first %) x) 0)) (second %)) (map vector (iterate inc 1) lst))))","user":"5a9f005be4b0d174b936c810"},{"problem":41,"code":"(fn skip[x y]\n  (loop [index 1 old x new []]\n    (if (empty? old) \n      new\n\t  (if (= 0 (mod index y))\n        (recur (inc index) (rest old) new)\n        (recur (inc index) (rest old) (conj new (first old)))))))","user":"53829b28e4b06839e8705ed6"},{"problem":41,"code":"(fn\n  [lst n]\n  (map #(second %) (filter (fn [ele]\n                             (if (zero? (mod (inc (first ele)) n))\n                               false\n                               true)) (map-indexed vector lst))))","user":"5c706232e4b0fca0c162277e"},{"problem":41,"code":"(fn [coll n](mapcat #(take (dec n) %) (partition-all n coll)))\n\n;; => (partition-all n coll)\n;;    \n;; ((1 2 3) (4 5 6) (7 8))\n;;\n;; => #(take (dec n) %)\n;;\n;; ((1 2) (4 5) (7 8))\n;;\n;; => mapcat\n;;\n;; '(1 2 4 5 7 8)","user":"558a81fbe4b027778923761c"},{"problem":41,"code":"(fn [xs n]\n  (->> xs\n       (map-indexed vector)\n       (filter (comp pos? #(mod % n) inc first))\n       (map second)))","user":"59ee6801e4b0966464fe6a1f"},{"problem":41,"code":"(fn rng \n    [arr, interval] \n    (filter #((complement nil?) %) (map-indexed (fn [ind, elem] \n                                        (if (= (mod ind interval) \n                                               (- interval 1))\n                                        nil\n                                        elem))\n                                     arr)))","user":"55893b09e4b059ccff29b1fe"},{"problem":41,"code":"(fn [x y] (map second (filter #(not= 0 (mod (inc (first %)) y)) (map-indexed list x))))\n\n;; (fn f [x y] (if (empty? x) \n;;            '()\n;;            (concat (take (dec y) x) (f (drop y x) y))))","user":"54ff2342e4b07d26eda61d49"},{"problem":41,"code":"(fn [elems n] (->> (partition-all n elems) (mapcat #(if (= (count %) n) (butlast %) %))))","user":"543f854fe4b032a45b86935b"},{"code":"(fn drop-every [coll x]\n  (letfn [(trim [s]\n                (if (= (count s) x) (drop-last s) s))]\n    (apply concat (map trim (partition-all x coll))))\n  )","problem":41,"user":"4f0348b4535dcb61093f6a84"},{"code":"#(keep-indexed (fn [n x] (if (zero? (mod (inc n) %2)) nil x)) %)","problem":41,"user":"503917a0e4b088a6a14ca763"},{"problem":41,"code":"(fn f [s n] (flatten (if (< (count s) n) s (conj (f (drop n s) n) (take (dec n) s)))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"#(loop [result [] in %1 f (first %1) cnt 1 fidx %2]\n   (if (empty? in)\n     result\n     (recur (if (zero? (mod cnt fidx))\n              result\n              (concat result (list f))\n              )\n            (rest in)\n            (first (rest in))\n            (inc cnt)\n            fidx\n            )\n     )\n   )","problem":41,"user":"528f4462e4b0239c8a67aef0"},{"code":"(fn [s n]\n  (vec (mapcat butlast (partition n n [nil] s))))","problem":41,"user":"536c1531e4b0fc7073fd6e36"},{"code":"(fn [xs n]\n   (mapcat #(if (= (count %) n) (butlast %) %) (partition-all n xs))\n   )","problem":41,"user":"4f2ef48be4b0d6649770a06c"},{"problem":41,"code":"#(into [] (mapcat (fn [a]\n            (take (- %2 1) a))\n          (partition-all %2 %1)))","user":"59a3f3dce4b066c664927d48"},{"problem":41,"code":"(fn t [s n] (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) s))","user":"55ad59cde4b03311e7b732a7"},{"problem":41,"code":"(fn this\n  [s n] (concat (take (dec n) s) (let [after (drop n s)]\n                                   (if (empty? after)\n                                     after\n                                     (this after n)))))","user":"5a04e923e4b01bb0ae8afda9"},{"code":"(fn [coll n]\n  (mapcat #(take (dec n) %)\n  \t\t\t(partition-all n coll)\n  )\n)","problem":41,"user":"50928ecfe4b097f48cc38570"},{"problem":41,"code":"(fn dropnth \n  ([l n] (dropnth l n 1))\n  ([l n i]\n   (let [x (first l) xs (rest l)]\n     (cond (nil? x) nil\n           (= n i) (dropnth xs n 1)\n           :otherwise (cons x (dropnth xs n (inc i)))))))","user":"5717ad6fe4b07c98581c3b14"},{"problem":41,"code":"(fn [a n] (vec (mapcat  #(take (dec n) %) (partition-all n a))))","user":"545d5c3be4b01be26fd7466d"},{"problem":41,"code":"#(keep-indexed (fn [i x] (if-not (zero? (mod (inc i) %2)) x)) %1)","user":"586b6f13e4b01531a375e959"},{"problem":41,"code":"(fn [c n] (loop [i 1 d c r []] (if (empty? d) r (if (= 0 (mod i n)) (recur (inc i) (rest d) r) (recur (inc i) (rest d) (conj r (first d)))))))","user":"53f78944e4b0de5c41848561"},{"code":"#(for [x (range (count %)) :when (> (rem (inc x) %2) 0)] \n   (% x))","problem":41,"user":"508bed64e4b0be79e5b189cf"},{"problem":41,"code":"#(map (partial nth %) (for [x (range (count %)) :when (> (mod (inc x) %2) 0)] x))","user":"54a677a9e4b09f271ff37c88"},{"problem":41,"code":"#(vec (flatten (map (fn [m] (take (dec %2) m)) (partition-all %2 %))))","user":"51dd5d6fe4b0c33a4e1da406"},{"problem":41,"code":"(fn [lst skip] \n  (into [] (\n            flatten (\n                     partition-all (dec skip) skip lst))))","user":"56cc34aee4b0ea9b8538f73c"},{"code":"#(flatten (reduce cons (partition-all (- %2 1) %2 %1)))","problem":41,"user":"4e6e3aac535d5021c1a89603"},{"problem":41,"code":"(fn [seq n] (map last (filter #(not= (mod (first %) n) (dec n)) (map-indexed list seq))))","user":"5db92996e4b010eb3c36cd50"},{"code":"(fn c41 [xs ndrop]\n  ((fn dn [xs n]\n    (lazy-seq\n     (when-let [s (seq xs)]\n       (if (zero? (mod n ndrop))\n         (dn (rest s) (inc n))\n         (cons (first s) (dn (rest s) (inc n))))))) xs 1))","problem":41,"user":"4ee88269535d93acb0a6687f"},{"problem":41,"code":"(fn [s x] (keep-indexed #(if (not= (mod (inc %1) x) 0) %2) s))","user":"5dc98501e4b02f9375f4e1e6"},{"problem":41,"code":"(fn \n  [a i]\n  (loop [init a acc []]\n    (if (empty? init)\n      acc\n      (recur (drop i init) (concat acc (take (- i 1) init)) ))))","user":"5dc9c070e4b02f9375f4e1ee"},{"code":"(fn [l1 n] (loop [r [] l l1 c 1]\n             (if (empty? l)\n               r\n               (if (= 0 (mod c n))\n                 (recur r (next l) (inc c))\n                 (recur (conj r (first l)) (next l) (inc c))))))","problem":41,"user":"5152020de4b03e678e393ae7"},{"problem":41,"code":"(fn [coll, n] (apply concat (partition-all (dec n) n coll)))","user":"5453b522e4b0e397800069d0"},{"problem":41,"code":"(fn\n  [col nElement]\n  (loop [auxCol col result [] j 1]\n    (let [i (first auxCol)]\n      (if (nil? i)\n        result\n        (do\n          (if (= (mod j nElement) 0)\n            (recur(rest auxCol) result (inc j))\n            (do\n              (let [res (conj result i)]\n                (recur (rest auxCol) res (inc j))))))))))","user":"5be589f9e4b0ed4b8aab4d13"},{"problem":41,"code":"#(map\n  last\n  (filter\n  (fn [[i e]]\n    (< 0 (mod i %2)))\n  (map-indexed\n    (fn [i e] [(+ i 1) e])\n    %1)\n  ))","user":"5881d1c2e4b0f1effa3b7644"},{"problem":41,"code":"#(loop [res [] l %1]\n  (if (< (count l) %2)\n    (concat res l)\n    (recur (concat res (take (dec %2) l)) (drop %2 l))\n    )\n  )","user":"5f429fdfe4b0955706451faf"},{"code":"(fn f [c n] \r\n  (map first (remove #(= (dec n) (second %))\r\n                     (map vector c (cycle (range n))))))","problem":41,"user":"4dac61e18cc9d6edb9beb0b3"},{"code":"(fn[m nths](flatten (map #(take (- nths 1) %) (partition-all nths m))))","problem":41,"user":"506a08bae4b01dc6af13f83d"},{"code":"(fn [coll num]\n  (let [lesser-of #(if (< %1 %2) %1 %2) \n        last-index #(+ % (dec num))\n        len-of-coll (count coll)\n        ranges (range 0 len-of-coll num)]\n    (reduce \n      (fn [x y] \n        (into x \n          (subvec coll y (lesser-of (last-index y) len-of-coll)))) [] ranges)))","problem":41,"user":"4f2acb29e4b0d6649770a040"},{"code":"(fn [coll n]\n  (letfn [(drop-nth [rst next-drop]\n            (if (empty? rst)\n                ()\n                (if (= 1 next-drop)\n                    (drop-nth (rest rst) n)\n                    (lazy-seq (cons (first rst)\n                                    (drop-nth (rest rst) (dec next-drop)))))))]\n    (drop-nth coll n)))","problem":41,"user":"4e7c8fd1535db169f9c796be"},{"problem":41,"code":"(fn [coll n]\n\t(loop [remaining coll x n c 1 acc []]\n\t\t(if (empty? remaining)\n\t\t\tacc\n\t\t\t(let [item (first remaining) r (rest remaining) nextC (mod (+ c 1) x)]\n\t\t\t\t(recur r x nextC (if (= c 0) acc (concat acc (list item))))))))","user":"598af379e4b02b9968b84ce6"},{"problem":41,"code":"(fn [lst n]\n  (loop [lst lst\n         res []\n         i 1]\n    (cond\n      (empty? lst) res\n      (zero? (mod i n)) (recur (rest lst) res (inc i))\n      :else (recur (rest lst) (conj res (first lst)) (inc i)))))","user":"56d8a63fe4b0ea9b8538f7e8"},{"problem":41,"code":"(fn [l c] (into [] (apply concat (partition-all (dec c) c l))))","user":"55b6a63ae4b01b9910ae299b"},{"problem":41,"code":"(fn [lst n]\n  (loop [lst lst\n         num n]\n  (print num)\n  (if (> num (count lst))\n    lst\n    (recur (into [] (concat (subvec lst 0 (dec num)) (subvec lst num)))\n           (dec (+ num n))))))","user":"5c748bf5e4b0fca0c16227cb"},{"code":"(fn [s n]\r\n     (loop [e s\r\n\t      i 0\r\n\t      r '()]\t      \r\n\t      (if (empty? e)\r\n\t\t  (reverse r)\r\n\t\t  (if (= i (dec n))\r\n\t\t      (recur (rest e)\r\n\t\t\t     0\r\n\t\t\t     r)\r\n\t\t      (recur (rest e)\r\n\t\t\t     (inc i)\r\n\t\t\t     (conj r (first e)))))))","problem":41,"user":"4eb99b3d535dfed6da9c6d57"},{"problem":41,"code":"(fn remove-nth [coll n]\n  (mapcat #(if (= n (count %))\n             (butlast %)\n             %) (partition-all n coll))\n  )","user":"5b265183e4b063e2438bcc31"},{"code":"(fn [xs n] (keep-indexed #(if (= 0 (mod (+ 1 %1) n)) nil %2) xs))","problem":41,"user":"502873a8e4b01614d1633ff8"},{"code":"(fn [coll n]\n  (keep-indexed\n    (fn [idx i]\n      (if (not= 0 (rem (inc idx) n))\n      i\n      nil)) coll))","problem":41,"user":"4f8386c5e4b033992c121c1d"},{"problem":41,"code":"(fn drop-nth [col drop]\n  (keep-indexed\n   (fn [idx n]\n     (if-not (= 0 (mod (inc idx) drop)) n)) col))","user":"564bbb15e4b0284900eef66d"},{"problem":41,"code":"(fn ndrop\n  [coll n]\n  (if (empty? coll) [] (concat (take (- n 1) coll) (ndrop (drop  n coll) n))))","user":"54091b82e4b0addc1aec66d5"},{"problem":41,"code":"(fn [vs n]\n  (->> vs\n   (partition-all (dec n) n)\n   (apply concat)))","user":"57acb156e4b0b8559636fc8d"},{"problem":41,"code":"#(mapcat butlast (partition %2 %2 [nil] %))","user":"5654d0e1e4b0f9d632dd848c"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed #(if-not (zero? (mod (inc %1) n)) %2) xs)\n  )","user":"560d4994e4b05f002753df3c"},{"problem":41,"code":"(fn [the-seq n]\n  (loop [in the-seq out [] count 1]\n    (if (empty? in)\n      out\n      (if (= 0(mod count n))\n        (recur (rest in) out (inc count))\n        (recur (rest in) (conj out (first in)) (inc count))\n        )\n      )\n    )\n  )","user":"53a511aae4b0b62ce3005735"},{"problem":41,"code":"(fn [sequence drop-n]\n  (loop [in sequence n drop-n i 1 result []]\n    (if (empty? in)\n      result\n      (recur\n        (rest in)\n        n\n        (if (= n i) 1 (inc i))\n        (if (= n i) result (conj result (first in)))\n      )\n    )\n  )\n)","user":"5d97b033e4b0d3f9b434ad39"},{"problem":41,"code":"(fn [s n]\n  (loop [k 1 se s acc []]\n    (cond\n      (empty? se) acc\n      (= k n) (recur 1 (rest se) acc)\n      :else (recur (+ k 1) (rest se) (conj acc (first se)))\n    )\n  )\n)","user":"5b4ff637e4b02d533a91bce0"},{"problem":41,"code":"(fn [coll n]\n  (for [[e i] (map-indexed (fn [i x] [x (rem (inc i) n)]) coll)\n        :when (not= i 0)]\n    e))","user":"609a4ac8e4b00e9e6653c40a"},{"code":"(fn dropn [s n]\n  (map second (filter #(not= 0 (rem (first %) n)) (map-indexed (fn [a b] (list (inc a) b)) s)))\n)","problem":41,"user":"4ed500bb535d10e5ff6f52d3"},{"problem":41,"code":"(fn [sekvence n]\n  (into []\n        (filter (fn [x]\n                  (not= (- n 1) (mod (.indexOf sekvence x) n))) sekvence)))","user":"5684e200e4b04eec3ec5cfc4"},{"problem":41,"code":"#(first (reduce (fn [[acc i] e] (if (= 0 (mod i %2))\n                                  [acc (inc i)]\n                                  [(conj acc e) (inc i)])) [[] 1] %1))","user":"6026737ee4b0d5df2af2222f"},{"problem":41,"code":"(let [pad (Object.)] #(->> %1 (partition %2 %2 (repeat pad)) (map butlast) (apply concat) (filter (partial not= pad))))","user":"526e5159e4b03e8d9a4a7316"},{"problem":41,"code":"(fn [coll i] (keep-indexed #(if-not (= (rem (inc %1) i) 0) %2) coll))","user":"54a7d707e4b09f271ff37c9b"},{"code":"(fn [s n] (flatten (conj [(mapcat butlast (partition-all n s))] \n  \t\t(reverse (take (- (mod (count s) n) 1) (reverse s)))\n\t\t\t)))","problem":41,"user":"4fa67030e4b081705acca1b7"},{"problem":41,"code":"#(keep-indexed\n (fn [idx value]\n   (if (not (= 0 (rem (+ 1 idx) %2))) value)) %)","user":"560ee566e4b05f002753df57"},{"problem":41,"code":"(fn [xs n]\n                    (loop [xs xs, index 1, acc []]\n                      ;(print (str xs \" \" index \" \" acc))\n                      (cond (empty? xs) acc\n                            (zero? (mod index n)) (recur (rest xs) (inc index) acc)\n                            :else (recur (rest xs) (inc index) (conj acc (first xs))))))","user":"5eccbce6e4b016b56eae058e"},{"code":"(fn dn [coll n]\n  (let [zm (zipmap (range 1 (inc (count coll))) coll)]\n    (filter #(not (nil? %))\n            (for [el (reverse zm)]\n              (if (zero? (rem (key el) n))\n                  nil\n                  (val el))))))","problem":41,"user":"4e5a2403535d8a8b8723a2a7"},{"code":"(fn [s n]\n  (flatten (partition-all (- n 1) n s)))","problem":41,"user":"504e04a4e4b078edc5f59397"},{"problem":41,"code":"(fn [xs idx]\n   (vec\n       (map (fn [x] (last x))\n        (filter (fn [i] (not= (mod (+ 1 (first i)) idx) 0))\n                (map-indexed (fn [i e] [i e]) xs)))) \n    )","user":"59c87d49e4b0a024fb6ae55b"},{"code":"(fn [coll count] (remove nil? (mapcat drop-last (partition count count (repeat nil) coll))))","problem":41,"user":"508147cde4b0a20aab17b93a"},{"code":"(fn [s n]\n  (mapcat #(when-not (= 0\n                        (mod (inc (first %)) n)\n                      ) (rest %))\n          (map vector (range) s)))","problem":41,"user":"50acbd15e4b071b89ef26234"},{"problem":41,"code":"(fn [coll n]\n  (loop [full-coll coll\n         new-coll []]\n    (if (empty? full-coll)\n     (flatten new-coll)\n    (recur (drop n full-coll) (conj new-coll (take (- n 1) full-coll))))))","user":"53b05a36e4b047364c044481"},{"problem":41,"code":"(fn [coll n](\n              flatten (partition-all (dec n) n coll)\n              ))","user":"546280d8e4b01be26fd746b0"},{"code":"(fn [coll n]\n  (apply concat (partition-all (dec n) n coll)))","problem":41,"user":"4f969a66e4b0dcca54ed6cde"},{"code":"(fn [s n]\n  (loop [s1 s\n         k 1\n         res []]\n   (if (empty? s1)\n     (reverse res)\n     ;else\n     (recur (rest s1) \n            (inc k) \n            (if (zero? (mod k n))\n              res\n              ;else\n              (cons (first s1) res))))))","problem":41,"user":"51fe9d7ce4b0f1313d468a70"},{"problem":41,"code":"#(reduce concat (map (fn dl [sq] (if (< (count sq) %2) sq (drop-last sq))) (partition-all %2 %1)))","user":"56dc3dbbe4b0ea9b8538f81a"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed #(when (not= (dec n) (mod % n)) %2) xs))","user":"5bea3177e4b0f319e2d7ec81"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n       (partition-all n)\n       (map\n        #(if (= (count %) n)\n           (drop-last %)\n           %))\n       flatten))","user":"608910a8e4b0ae75613dceed"},{"problem":41,"code":"(fn [lst n] (loop [i 0 result []]\n  (if (get lst i)\n    (recur (inc i) (if (not(= 0 (mod (+ 1 i) n))) (conj result (get lst i)) result))\n    result)))","user":"5f45211ae4b0955706451fbc"},{"code":"(fn cut[collect,num]\r\n     (loop [col collect ,n num,x 1,result []]\r\n       (if(empty? col)\r\n          result\r\n       (recur  (rest col) n (inc x) \r\n               (if (= (mod x n) 0)                 \r\n                  result\r\n                  (conj result (first col) )\r\n                )\r\n               )\r\n         )\r\n     )\r\n   )","problem":41,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":41,"code":"(fn [list num]\n   (map first\n        (filter #(not= (mod (inc (second %)) num) 0)\n                (map #(vector %1 %2) list (range)))))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn [x n] (keep-indexed #(if (not= (dec n) (mod %1 n)) %2) x))","problem":41,"user":"4ecbb249535df97575fdabdf"},{"problem":41,"code":"(fn mydrop\n\t([xs d] (mydrop xs d d))\n\t([xs d c] (cond\n\t\t\t\t(empty? xs) '()\n\t\t\t\t(= c 1) (mydrop (rest xs) d d)\n\t\t\t\t:else (concat [(first xs)] (mydrop (rest xs) d (dec c)))\n\t))\n)","user":"5d4c83b7e4b0776584bd6f34"},{"code":"(fn [s n]\n   (let [s2 (partition-all n s)]\n     (reduce\n      (fn [acc x]\n        (if (= (count x) n)\n          (concat acc (butlast x))\n          (concat acc x)))\n      []\n      s2\n      ))\n   )","problem":41,"user":"50868795e4b004985b776e5e"},{"code":"(fn [lst evry]\r\n((fn xyz [l acc cnt]\r\n      (if (empty? l)\r\n        acc\r\n        (if (zero? (mod cnt evry))\r\n          (recur (rest l) acc (inc cnt))\r\n          (recur (rest l) (conj acc (first l)) (inc cnt))))) lst [] \r\n1))","problem":41,"user":"4e9528ef535dbda64a6f6b32"},{"problem":41,"code":"(fn [coll n] (let [needed-ixs (map dec (keep #(if-not (zero? (rem % n)) %) (range (inc (count coll)))))] (map coll needed-ixs)))","user":"55218bf0e4b0882d96d09196"},{"code":"(fn dropnth [xs n]\n  (keep-indexed #(if (not (= 0 (mod (inc %1) n))) %2) xs))","problem":41,"user":"4fb804f7e4b081705acca2d6"},{"code":"(fn f [coll n] (if (< (count coll) n) coll (concat (take (dec n) coll) (f (drop n coll) n))))","problem":41,"user":"4fac1d77e4b081705acca223"},{"problem":41,"code":"(fn dropnth [s n]\n  (if (empty? s)\n    nil\n    (concat (take (- n 1) s) (dropnth (drop n s) n))))","user":"56ee0691e4b04a395b9a044c"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n   (partition-all n)\n   (mapcat #(take (dec n) %))\n   (into [])))","user":"5935151ee4b072a2710fd084"},{"problem":41,"code":";(fn [coll n](map second (remove #(zero? (mod (inc (first %)) n )) (map-indexed vector coll))))\n (fn [coll n](keep-indexed #(when (not= 0 (mod (inc %1) n)) %2) coll))","user":"566ff0a1e4b0a866af6896ec"},{"problem":41,"code":"(fn [l i]\n  (vec (flatten (map (partial take (dec i)) (partition-all i l)))))","user":"5c3527a6e4b0d62ef62d9f60"},{"code":"(fn [coll n]\r\n                 (mapcat #(take (- n 1) %) (partition-all n coll)))","problem":41,"user":"4fdf4e2be4b05e33b9224f96"},{"problem":41,"code":"#(vec(for[i(range(count %1)):when(not(zero?(mod (inc i)%2)))](get %1 i)))","user":"57efb389e4b0bfb2137f5bdb"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if-not (= 0 (mod (inc %1) n)) %2) coll))","user":"548f37c7e4b0e286459a1234"},{"code":"(fn [coll n] (letfn [(dropnth \n     ([coll n]\n       (when (pos? n)\n         (dropnth coll n 1)))\n     ([coll n counter]\n       (when-let [s (seq coll)]\n         (if (not= 0 (mod counter n))\n           (cons (first s) (dropnth (rest s) n (inc counter)))\n           (dropnth (rest s) n (inc counter))))))]\n          (dropnth coll n)))","problem":41,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"(fn [coll n]\n  (->>\n    coll\n    (map #(vector % %2) (iterate inc 1))\n    (filter #(not (= 0 (mod (first %) n))))\n    (map #(second %))\n   ))","problem":41,"user":"5368fedee4b0243289761e93"},{"code":"(fn dropn [coll n]\n  (let [p (split-at (dec n) coll)]\n    (if-let [x (not-empty (first p))]\n      (into (vec x) (dropn (rest (second p)) n)))))","problem":41,"user":"4e72187b535d5021c1a8965b"},{"problem":41,"code":"(fn [sq x] (loop [s [] p sq] (if (< (count p) x) (concat s p) (recur (concat s (take (dec x) p)) (drop x p)))))","user":"54a1f494e4b09f271ff37c52"},{"problem":41,"code":"( fn [se n] (flatten (partition (- n 1) n nil se)))","user":"5a1c8c26e4b0ff51aa4b3247"},{"problem":41,"code":"#(loop [a %1 b %2 c 1 acc []]\n    (if (empty? a)\n    acc\n    (recur (rest a) b (inc c) (if (= (rem c b) 0) acc (conj acc (first a))))))","user":"57147cd9e4b07c98581c3abf"},{"problem":41,"code":"(fn [sq n]\n  (->> (partition-all (dec n) n sq)\n  (apply concat)))","user":"56c9970ce4b0ed865f9758de"},{"problem":41,"code":"(fn dropN [ls x]\n  (if (< (count ls) x)\n    ls\n    (concat (take (- x 1) ls)\n            (dropN (drop x ls) x)\n            )\n    )\n  )","user":"541ef7e2e4b01498b1a71a92"},{"code":"#(map first (filter (fn [pair] (not= 0 (mod (inc (last pair)) %2)))\n           (map list % (range ))\n ))","problem":41,"user":"50217818e4b00bba4502f7a7"},{"code":"#(mapcat (partial take (dec %2)) (partition-all %2 %1))","problem":41,"user":"4e21c0c7535d04ed9115e818"},{"code":"(fn [x n] \n  (mapcat (fn [y] (take (- n 1) y)) (partition-all n x)))","problem":41,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(fn [coll, out]\n    (filter \n      (fn [e] ((complement nil?) e)) \n      (map-indexed \n        (fn [idx ele] \n          (if \n            (true? (not= (rem idx out) (- out 1))) \n            ele\n          )\n        )\n      coll\n      ) \n    ) \n  )","problem":41,"user":"52485723e4b05ef8e38e63d2"},{"code":"#(flatten (map (fn [a] (if (= %2 (count a)) (butlast a) a)) (partition-all %2 %1)))","problem":41,"user":"5013141de4b0f26a0e3320a9"},{"problem":41,"code":"(fn drop-every-nth-item\n  [s n]\n  (first (reduce (fn [acc v]\n                   (let [res (first acc)\n                         index (second acc)]\n                     (if (zero? (mod index n))\n                       [res (+ index 1)]\n                       [(conj res v) (+ index 1)])))\n                 [[] 1]\n                 s)))","user":"5d53a59ae4b0776584bd6f72"},{"problem":41,"code":"#(mapcat (fn [x] (if (= %2 (count x)) (drop-last x) x)) (partition %2 %2 nil %1))","user":"594d4c57e4b07ddc2dafae87"},{"problem":41,"code":"(fn [l n] (keep-indexed #(if (zero? (mod (inc %1) n)) nil %2) l))","user":"53fcb8f7e4b0de5c418485d4"},{"code":"(fn [xs step] \n  (flatten\n    (reduce\n      #(conj (if (= (count %2) step) (drop-last 1 %2) %2) %1) `()\n      (partition step step `() xs)\n    )\n  )\n)","problem":41,"user":"504e685fe4b0f6ff3350c4ae"},{"code":"(fn [s* m] (loop [s s* c 1 acc []] (if (empty? s) acc (recur (rest s) (inc c) (if (not= 0 (mod c m)) (conj acc (first s)) acc)))))","problem":41,"user":"50e0d5a3e4b061dbdced723d"},{"code":"; My attempt\n; Uses recursion to partition the vector\n; and drop every Nth item.\n(fn drop-nth[vec n]\n  (if (> n (count vec))\n    vec\n    (into\n      (subvec vec 0 (dec n))\n      (drop-nth (subvec vec n (count vec)) n))))","problem":41,"user":"4f831fd3e4b033992c121c17"},{"problem":41,"code":"(fn [lst enth] (loop [lst lst\n                       idx 1\n                       elem (first lst)\n                       ans []]\n                  (if (empty? lst)\n                    ans\n                    (recur (rest lst)\n                           (inc idx)\n                           (first (rest lst))\n                           (if (zero? (mod idx enth))\n                             ans\n                             (conj ans elem))))))","user":"5e9878b9e4b0157ca96647d8"},{"code":"(fn [coll n]\n  (for [i\n        (range (count coll))\n        :when (not (= 0 (mod (inc i) n)))]\n    (nth coll i)))","problem":41,"user":"51377c10e4b04059df19f305"},{"problem":41,"code":"(fn me [x limit]\n   (if-not (empty? x)\n     (concat (take (- limit 1) x) (me (drop limit x) limit))))","user":"54eff2bee4b024c67c0cf88d"},{"code":"(fn [coll n]\n    (map second (filter #(not= (mod (inc (first %)) n) 0) (map-indexed vector coll))))","problem":41,"user":"52c61564e4b0c2d177d62109"},{"problem":41,"code":"(fn [al n]\n  (mapcat #(take (dec n) %) (partition-all n al)))","user":"53da059be4b0e771c302547e"},{"problem":41,"code":"(fn drop-nth\n    [coll n]\n    (let [former (take (dec n) coll)\n          latter (drop n coll)]\n         (if (empty? latter)\n             former\n             (concat former (drop-nth latter n)))))","user":"591addcee4b09b4ee5954be1"},{"problem":41,"code":"#(keep-indexed (fn [index value] (if (= (mod (inc index) %2) 0)\n                             nil\n                             value)) %1)","user":"5491bebbe4b0b312c081ff3c"},{"problem":41,"code":"(fn [items n] ((fn [running i left] (cond (empty? left) running (= (rem i n) 0) (recur running (inc i) (rest left)) :else (recur (conj running (first left)) (inc i) (rest left)))) [] 1 items))","user":"59cf6fbce4b0ef0a1e9b5b6c"},{"problem":41,"code":"(fn [l n]\n        (map second\n             (filter #(not= 0 (mod (first %) n))\n                     (map vector (iterate inc 1) l))))","user":"55f27bf9e4b06e875b46ce45"},{"code":"(fn xth [sequ x]\n  (filter #(not= %1 :z) (map-indexed #(if (= (mod (+ %1 1) x) 0) :z %2) sequ)))","problem":41,"user":"5239caa6e4b0d705d026ef27"},{"code":"#(keep-indexed (fn [index elem]\n                  (when-not (= (mod (inc index) %2) 0)\n                    elem))\n                %1)","problem":41,"user":"51105c7fe4b04c71fce993ef"},{"problem":41,"code":"(fn [coll drop-every-nth]\n  (->> (partition-all (dec drop-every-nth) drop-every-nth coll)\n       (apply concat)))","user":"5aa098fae4b0d174b936c82e"},{"problem":41,"code":"#(loop [L %1, result []]\n     (if (empty? L)\n       result\n       (recur (drop %2 L) (apply conj result (take (- %2 1) L)))))","user":"57015a1de4b08d47c97781d4"},{"code":"(fn myfunc [coll n] (keep-indexed #(if (> (mod (+ 1 %1) n) 0) %2) coll))","problem":41,"user":"4fe9ef2fe4b0547ebccb2479"},{"problem":41,"code":"(fn [vec n]\n  (mapcat #(take (dec n) %) (partition-all n vec)\n   ))","user":"5a4443cae4b0447ef91cc60f"},{"code":"(fn [coll n] (apply concat (partition-all (dec n) n coll)))","problem":41,"user":"4f85b7b5e4b033992c121c49"},{"code":"(fn [coll n] \n        (map coll \n          (filter \n            #(pos? (mod (inc %1) n)) \n            (range (count coll))))\n      )","problem":41,"user":"502952c9e4b0b33e9bf6fdf1"},{"problem":41,"code":"(fn [xs n]\n  (->> xs\n       (partition-all n)\n       (map #(if (= n (count %))\n               (drop-last %)\n               %))\n       (apply concat)))","user":"5fa28e2be4b0f0ebd91b77f0"},{"code":"(fn[x y]\n  (flatten \n     (map \n       #(if( < (count %1) y) (seq %1) (drop-last %1)) \n       ( partition-all y x))))","problem":41,"user":"4f542fd9e4b0a7574ea717db"},{"code":"(fn [c n]\n  (keep-indexed #(if-not (zero? (mod (inc %) n))\n                   %2)\n                c))","problem":41,"user":"50608ea0e4b07251188e4456"},{"code":"(fn this [s n]\n  (if (< (count s) n)\n    s\n    (let [spl (split-at (- n 1) s)]\n      (concat (first spl) (this (rest (second spl)) n)))))","problem":41,"user":"4f418eaee4b0d7d3c9f3fce9"},{"problem":41,"code":"#(flatten (partition-all (dec %2)  %2 %1))","user":"52658b67e4b03e8d9a4a710d"},{"problem":41,"code":"(fn [x y] (mapcat #(if (= (count %1) y) (butlast %1) %1) (partition-all y x)))","user":"54be3ab6e4b0ed20f4ff6ee7"},{"problem":41,"code":"(fn loose [x y]\n  (cond (= (count x) y) (butlast x)\n    :else (if (not (= 0 (mod (count x) y)))\n            (concat (loose (butlast  x) y) [(last x)])\n            (loose (butlast x) y))))","user":"55630cc1e4b0c656e3ff17e0"},{"code":"(fn[coll sep](vec(mapcat #(if(=(count %) sep) (drop-last %) %) (partition-all sep coll))))","problem":41,"user":"529952a4e4b02ebb4ef75081"},{"problem":41,"code":"(fn [xs n]\n    (flatten (map #(take (dec n) %) (partition-all n xs))))","user":"500d3160e4b05f7c30cfa6a1"},{"code":"(fn every-nth [coll n]\n  (if (empty? coll)\n    coll\n    (concat (take (- n 1) coll) (every-nth (drop n coll) n))\n  )\n)","problem":41,"user":"504d0116e4b022602c20b089"},{"code":"(fn boo [s n]\n  (map\n    #(second %)\n    (filter\n      (fn [l] (not= (mod (first l) n) 0))\n      (partition 2 (interleave (iterate inc 1) s)))))","problem":41,"user":"523b10dfe4b02f719975bdb8"},{"problem":41,"code":"(fn dropEveryN [coll n]\n  (if (empty? coll)\n      (empty coll)\n      (let [firstpart (take (dec n) coll) therest (drop n coll)]\n        (concat firstpart (dropEveryN therest n)))))","user":"570eeca5e4b0b0fb43fd06fb"},{"code":"(fn drop-nth \n  ([l n] (drop-nth l n []))\n  ([l n result]\n    (if (empty? l)\n      result\n      (drop-nth (drop n l)\n                n\n                (concat result (take (dec n) l))))))","problem":41,"user":"4daea889edd6309eace4d15b"},{"code":"(fn dropnth [l n]\n\n  (if (empty? l)\n    l\n  \n  (concat\n   (take (- n 1) l)\n\n   (dropnth (drop n l) n)\n   )\n\n  )\n\n  )","problem":41,"user":"4e78c208535db95036265722"},{"problem":41,"code":"(fn drop-every\n [lst n]\n (map (fn [item] (second item)) (filter (fn [item] (not= 0 (rem (first item) n)))\n                                        (map-indexed (fn [i item] (vector (inc i) item) ) lst))))","user":"5a99b83fe4b0d174b936c7aa"},{"code":"(fn fu  [x n] \n  ( if (> n (count x)) x \n  (concat (take (- n 1) x ) (fu (drop n  x) n) )))","problem":41,"user":"518644bce4b0da5a5be3baca"},{"problem":41,"code":"(fn [coll n]\n  (->> coll\n       (map-indexed #(vector (inc %1) %2))\n       (filter #(not= 0 (mod (first %) n)))\n       (map second)))","user":"5182de5ce4b0353c468deb74"},{"problem":41,"code":"(fn [coll n]\n  (loop [res []\n         coll coll\n         curn 1]\n    (if (empty? coll)\n      res\n      (let [del (= curn n)\n            newn (if del 1 (inc curn))\n            newres (if del res (conj res (first coll)))]\n        (recur\n         newres\n         (rest coll)\n         newn)))))","user":"592334c7e4b0a390037439ee"},{"problem":41,"code":"(fn r [a n] (loop [a a b [] n n]\n   (if (empty? a)\n     b\n     (recur (drop n a) (concat b (take (dec n) a)) n))))","user":"546c1b2ce4b00cfc9eacc174"},{"problem":41,"code":"(fn [s i]\r\n  (mapcat \r\n    #(if (= (count %) i) (drop-last %) %)\r\n    (partition-all i s)))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":41,"code":"#(loop [s %1\n       r []]\n  (if (-> s empty? not)\n    (recur (drop %2 s) (apply conj r (take (dec %2) s)))\n    r))","user":"5571d6e5e4b09a3098a5253f"},{"problem":41,"code":"(fn Jfunc [xs y]\n (mapcat #(take (- y 1) %) (partition-all y xs))\n  )","user":"59e0f839e4b08badc2a0c502"},{"problem":41,"code":"(fn [vec nToDrop]\n  (filter #(not (= (type (/ (inc (.indexOf vec %)) nToDrop)) java.lang.Long)) vec))","user":"5a7ff79ce4b00b71e582a046"},{"problem":41,"code":"(fn x [a b]\n  (if(seq a)\n  (concat (take (dec b) a) (x (drop b a) b))\n))","user":"53ed2fafe4b0d648e757f4c1"},{"problem":41,"code":"(fn [coll num] (apply concat (partition-all (dec num) num coll)))\n;(fn [coll num] (mapcat #(if(= (count %)num)(drop-last %)(identity %)) (partition-all num coll)))","user":"54ce541de4b057c6fda3a2ac"},{"code":"(fn [col n]\n  (loop [lst col acc () elt 0]\n\t  (if (nil? lst)\n\t\t  (reverse acc)\n\t\t\t(if (= (- n 1) (mod elt n))\n\t\t\t  (recur (next lst) acc (+ 1 elt))\n\t\t\t\t(recur (next lst) \n\t\t\t\t\t     (conj acc (first lst))\n\t\t\t\t\t     (+ 1 elt))))))","problem":41,"user":"50a6b5e8e4b0aa96157e262a"},{"code":"(fn [x y]\n  (mapcat #(take (dec y) %)\n    (partition-all y x)))","problem":41,"user":"4fe88f78e4b07c9f6fd12c45"},{"problem":41,"code":"(fn [coll n]\n  (loop [dropped [] index 1 [elem & coll] coll]\n    (if (nil? elem)\n      dropped\n      (if (= 0 (rem index n))\n        (recur dropped (inc index) coll)\n        (recur (conj dropped elem) (inc index) coll)\n       )\n      \n   )\n )\n)","user":"5de6484ce4b0986d99407f66"},{"problem":41,"code":"(fn [lis value] \n\t (filter identity (map-indexed (fn [idx itm] (if (= (rem (inc idx) value) 0) nil itm)) lis )))","user":"52457931e4b08ba239308107"},{"code":"(fn remove-nth [coll n] (lazy-seq (when-let [s (seq coll)] \n(concat (take (dec n) s) (remove-nth (drop n s) n)))))","problem":41,"user":"50a4cbbee4b0344e360f3bc2"},{"code":"(fn [col n]\n  (keep-indexed #(if (> (rem (+ %1 1) n) 0) %2) col))","problem":41,"user":"511c44fde4b00c2a1fa7ff77"},{"code":"(fn [x n]\n   ((fn sugarpeas [acc x n index]\n     (if (empty? x)\n       acc\n       (if (= n index)\n         (sugarpeas acc (rest x) n 1)\n         (sugarpeas (conj acc (first x)) (rest x) n (+ index 1))\n       )\n     )\n   ) [] x n 1)\n )","problem":41,"user":"5303a027e4b0d8b024fd3745"},{"code":"(fn [coll x]\r\n  (keep-indexed\r\n    (fn [index item]\r\n      (if (not= (rem (inc index) x) 0)\r\n        item))\r\n    coll))","problem":41,"user":"4f7d5328e4b06e829148e1bf"},{"problem":41,"code":"(fn sm-drop [inlist n]\n  (if (> n (count inlist))\n    inlist\n    (concat (take (- n 1) inlist) (sm-drop (drop n inlist) n) )\n  )\n)","user":"5575aae2e4b05c286339e065"},{"code":"(fn [seq n]\n  (letfn [(take-drop-concat [n seq]\n    (if (empty? seq) \n      '()    \n      (concat (take (- n 1) seq) (take-drop-concat n (drop n seq))))\n    )]\n    (take-drop-concat n seq)))","problem":41,"user":"4ff83003e4b0678c553fc396"},{"code":"(fn [coll x]\n  ((fn lambda [col n i] \n     (if (= (count col) 0) nil\n     (if (= (dec n) i)\n       (lambda (rest col) n (mod (inc i) x)) \n       (cons (first col) (lambda (rest col) n (mod (inc i) x))))))\n       coll x 0))","problem":41,"user":"4ed4798f535d10e5ff6f52cc"},{"problem":41,"code":"(fn [seq n] (remove (fn [currentValue] (zero? (rem (+ 1 (.indexOf seq currentValue)) n))) seq))","user":"5d662fb5e4b0db5d338d15e1"},{"problem":41,"code":"(fn f [col x]\n  (when-not (empty? col)\n    (concat (take (- x 1) col) (f (drop (- x 1) (rest col)) x))))","user":"575fbe58e4b08062f99a4e87"},{"code":"#(keep-indexed \n    (fn [i x] (when (or (zero? i) \n                        (not= (mod (inc i) %2) 0)) x)) %1)","problem":41,"user":"502d387fe4b0d96a44ab202f"},{"code":"#(apply concat (partition-all (dec %2) %2 %1))","problem":41,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":41,"code":"#(let [n %2]\n   (loop [i 1\n          in %1\n          out '()]\n     (if (empty? in)\n       out\n       (recur (inc i)\n              (rest in)\n              (if (= 0 (mod i n))\n                out ; drop item\n                (concat out (list (first in))))))))","user":"57a310b4e4b0c3d858beb90c"},{"code":"(fn [col index]\n   (into [] (mapcat #(if (= index (count %)) (drop-last %) %) (partition-all index col )))\n\n   )","problem":41,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":41,"code":"(fn [coll n]\n  (->> (map-indexed vector coll)\n       (remove #(zero? (mod (inc (first %)) n)))\n       (map second)))","user":"55d28b38e4b0e31453f64a58"},{"problem":41,"code":"(fn drop-nth [coll pos]\n  (let [f (fn [index item]\n            (if (not(=  0 (rem (inc index) pos))) item))]\n    (filter identity (map-indexed f coll))\n    \n\n  \n    )\n)","user":"55a65872e4b09e57187da299"},{"problem":41,"code":"(fn [s n]\n   (keep-indexed \n     (fn [idx item] (if (zero? (mod (inc idx) n)) nil item) ) s))","user":"5f431d32e4b0955706451fb5"},{"code":"(fn [s n]\n  (keep-indexed\n   #(if (not= (mod %1 n) (- n 1)) %2)\n   s))","problem":41,"user":"526439a4e4b03e8d9a4a70cc"},{"code":"(letfn [(dropn [coll n]\n  (if (< (count coll) n)\n    coll\n    (concat (take (dec n) coll)\n            (dropn (drop n coll) n))))]\n  dropn)","problem":41,"user":"4f27dd9ce4b0d6649770a00e"},{"problem":41,"code":"(fn drop-every-nth-item [sequence item]\n (loop[current-sequence sequence result []]\n   (if (empty? current-sequence)\n     result\n     (recur (drop item current-sequence) (concat result (take (- item 1) current-sequence)))\n   )\n )\n)","user":"53ac1992e4b047364c04445a"},{"problem":41,"code":"(fn [col n] (mapcat #(if (= n (count %)) (drop-last %) %) (partition-all n col)))","user":"5acd08eee4b0e27600da7822"},{"code":"(fn [s n]\n  (loop [s s, v []]\n    (if s\n      (recur (nthnext s n), (concat v (take (dec n) s)))\n      v)))","problem":41,"user":"4e2edb0e535deb9a81d77f0d"},{"code":"(fn [coll n]\n  (flatten\n   (map #(if (= n (count %)) (drop-last %) %) (partition-all n coll))))","problem":41,"user":"4ebc64db535dfed6da9c6d82"},{"code":"(fn drop-nth [xs n]\n  (mapcat (partial take (dec n))\n          (partition-all n xs)))","problem":41,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":41,"code":"(fn t [s n]\n  (if (empty? s)\n    []\n    (concat (take (dec n) s) (t (drop n s) n)))\n)","user":"59a0286be4b0871e7608b82f"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed (fn [i x]\n                  (when-not (zero? (mod (inc i) n))\n                    x))\n                coll))","user":"5c1bee41e4b01240ff567218"},{"problem":41,"code":"(fn [ans arr n]\n  (if (nil? (seq arr))\n    ans\n    (recur (concat  ans (take (- n 1) arr)) (drop n arr) n))) '()","user":"524025bce4b0ad64fa01030f"},{"problem":41,"code":"(fn [coll n] (keep-indexed (fn [idx item] (when-not (zero? (rem (inc idx) n)) item)) coll))","user":"5d272077e4b092dab7f59c64"},{"code":"(fn [c n] (apply concat (map (partial take (- n 1)) (partition-all n c))))","problem":41,"user":"52c1f404e4b07a9af5792370"},{"problem":41,"code":"(fn [coll n]\n  (let [indexed (map (fn [el i] [el (inc i)]) coll (range))\n        filtered (filter (fn [[el i]] (not= 0 (mod i n))) indexed)]\n    (into (empty coll) (map first filtered))))","user":"53161a56e4b08068f379ed3e"},{"problem":41,"code":"(fn [in-array c]\n    (:out \n      (reduce\n        (fn [acc v]\n          (assoc acc \n                :index (inc (:index acc))\n                :out (if (= 0 (mod (:index acc) c))\n                       (:out acc)\n                       (conj (:out acc) v)\n                         )))\n          {:index 1, :out []}\n          in-array))  )","user":"53c6c9dfe4b00fb29b2212a1"},{"code":"(fn [xs n]\n  (keep-indexed #(if (not (= (dec n) (mod % n))) %2) xs))","problem":41,"user":"50456731e4b01f6c9a8b236b"},{"code":"(fn drop-nth-41\n  [coll n]\n  (if (< (count coll) n)\n    coll\n    (lazy-seq\n      (concat (take (dec n) coll) (drop-nth-41 (drop n coll) n)))))","problem":41,"user":"501b1a8ee4b0b12d9c5f4d81"},{"problem":41,"code":"(fn [aseq n]\n    (for [x (range 0 (count aseq)) :when (not (= 0 (mod (inc x) n)))]\n     (get aseq x)))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":41,"code":"(fn [coll place]\n  (loop [result [], [value & others :as acc] coll, counter 1]\n    (if (empty? acc) \n\t\tresult\n    \t(if (= counter place)\n      \t\t(recur result others 1)\n      \t\t(recur (conj result value) others (inc counter))))))\n  \n  \n\n;(fn [coll place] \n;  (let [parts (partition-all place coll)\n;        no-last (map butlast parts)\n;        last-part (last no-last)\n;        result (apply concat no-last)]\n;  \t(if (= (count last-part) (dec place))\n;    \tresult\n;      (concat result [(last coll)]))))","user":"5c13da47e4b01240ff5671a6"},{"problem":41,"code":"(fn [s n] (mapcat #(take (dec n) %1) (partition-all n s)))","user":"5591b61ee4b0604b3f94d580"},{"problem":41,"code":"(fn\n[coll n]\n  (loop [remaining coll\n         c (- n 1)\n         res (empty coll)]\n    (if (empty? remaining)\n          res\n      (if (zero? c)\n            (recur (rest remaining) (- n 1) res)\n            (recur (rest remaining) (- c 1) (concat res [(first remaining)]))))))","user":"5acd235ae4b0e27600da7824"},{"problem":41,"code":"(fn [S n] (let [k (- n 1) T (map vector S (range)) U (reduce #(if (= k (mod (last %2) n)) %1 (conj %1 %2)) [] T)] (map #(first %) U)))","user":"58e7eba2e4b056aecfd47cdf"},{"problem":41,"code":"(fn [li number]\n    (map (fn [el]\n           (last el))\n   (filter (fn [x] \n          \n          (not= (mod (first x)  number) 0)) (map \n (fn [a b] (list a b))\n (map inc (range)) li))))","user":"554b2151e4b0a04f79299580"},{"problem":41,"code":"#(let [n %2]\n    (loop [items %1, drop-i n, i 1, result '[]]\n     (cond\n      (nil? items) result\n      (= drop-i i) (recur (next items) (+ drop-i n) (inc i) result)\n      (not= drop-i i) (recur (next items) drop-i (inc i) (conj result (first items))))))","user":"55c2b95de4b0e31453f64980"},{"problem":41,"code":"#(keep-indexed (fn [idx val] (if (pos? (rem (inc idx) %2)) val)) %1)","user":"5aeb0b44e4b0cc2b61a3bbee"},{"code":"(fn drop3\n  [coll num]\n  (loop [s coll counter 1 result []]\n    (if (empty? s)\n      result\n      (if (= (rem counter num) 0)\n        (recur (rest s) 1 result)\n        (recur (rest s) (inc counter) (conj result (first s)))))))","problem":41,"user":"5046f909e4b03b02161376b5"},{"code":"(fn [l c] \n  (flatten   \n    ( map #(take (dec c) %) ( partition-all c l)  ) \n    )\n  )","problem":41,"user":"504f44cfe4b0a02f9cffde65"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed #(if (not= 0 (mod (inc %1) n)) %2) s))","user":"576a972ce4b0a07e8fc1811a"},{"problem":41,"code":"(fn [xs x] (loop [result [] list xs counter 1]\n  (if (= (count list) 0)\n    result\n    (if (= counter x)\n      (recur result (rest list) 1)\n      (recur (conj result (first list)) (rest list) (inc counter))\n    ))))","user":"55d79b87e4b0e31453f64aa8"},{"problem":41,"code":"(partial (fn [ind acc x y] (cond \n                            (empty? x) acc \n                            (= ind y) (recur 1 acc (rest x) y) \n                            :else (recur (inc ind) (conj acc (first x)) (rest x) y)\n                            )) 1 [])","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn [coll n]\n  (keep-indexed\n    #(when-not (zero? (rem (inc %1) n)) %2)\n    coll))","problem":41,"user":"4f9d53f3e4b0dcca54ed6d21"},{"code":"(fn [lst nth]\n    (map second (filter #(let [index (inc (first %1))]\n                           (not (= (mod index nth) 0)))\n                        (map-indexed list lst))))","problem":41,"user":"4f4a8707e4b0d56e7bb92c12"},{"code":"(fn drp [s n]\n\t(let\n      [these-ns (take (- n 1) s)\n       next-ns (take-last (- (count s) n) s)]\n      (if next-ns\n        (concat these-ns (drp next-ns n))\n        these-ns)))","problem":41,"user":"5364697ce4b0243289761e62"},{"code":"#(keep-indexed (fn [i v] \n                 (if (> (mod (inc i) %2) 0) v)) \n               %)","problem":41,"user":"4ee7d177535d93acb0a6686f"},{"code":"(fn drop-indx [coll indx]\r\n  (keep identity\r\n   (map (fn [e i]\r\n          (when-not (zero? (mod i indx))\r\n            e))\r\n        coll\r\n        (rest (range)))))","problem":41,"user":"4e7e4a1f535db169f9c7970c"},{"problem":41,"code":"(fn [l n] (loop [result [] l l i 1]\n            (if (empty? l) result\n              (recur (if (= i 0) result (conj result (first l)))\n                     (rest l)\n                     (mod (+ i 1) n)))))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"#(->> %1 (partition (dec %2) %2 []) (reduce concat) (into []))","problem":41,"user":"52f5f8b4e4b09b582c12c9cc"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(if-not (= (mod (+ %1 1) n) 0) %2) xs))","user":"54149f2fe4b01498b1a719ec"},{"problem":41,"code":"(fn [xs n] \n  (mapcat\n   #(if (= n (count %)) (drop-last %) %) (partition-all n xs)))","user":"550609b3e4b021ccfedb9695"},{"code":"#(mapcat seq (partition (- %2 1) %2 [] %))","problem":41,"user":"4ea0cfb0535d7eef308072ae"},{"problem":41,"code":"(fn [c n] \n  (keep-indexed \n   #(if \n      (< 0 (mod (+ % 1) n)) \n      %2) \n   c))","user":"55664bb5e4b0c656e3ff1833"},{"code":"(fn dropn [s n]\n  (mapcat #(take (dec n) %) (partition-all n s)))","problem":41,"user":"53527551e4b084c2834f4af0"},{"code":"(fn\n  [l n]\n  (for [x (range (count l))\n        :when (or (= x 0 ) (not= 0 (mod (inc x) n)))]\n    (get l x)))","problem":41,"user":"5164d97ee4b003cf19fdde43"},{"problem":41,"code":"(fn [x n]\n  (mapcat #(if (= n (count %)) (butlast %) %) (partition n n nil x)))","user":"5dcc5e5ce4b02b31cc3da3c7"},{"problem":41,"code":"(fn drop-nth [coll, n]\n  (for [x (range 0 (count coll)),\n        :let [y (nth coll x)]\n        :when (not (= (- n 1) (mod x n)))\n        ]\n    y)\n  )","user":"56de0db0e4b0ea9b8538f83a"},{"problem":41,"code":"(fn [coll omit]\n  (keep-indexed\n   (fn [idx itm]\n     (if-not (= 0 (mod (+ idx 1) omit))\n       itm))\n   coll))","user":"532902f8e4b09d4e7a9b550e"},{"problem":41,"code":"(fn drop-nth\n                     [seq n]\n                     (loop [new []\n                            remainder seq\n                            i 1]\n                       (if (empty? remainder)\n                         new\n                         (recur (if (= (rem i n) 0)\n                                  new\n                                  (conj new (first remainder)))\n                                (rest remainder)\n                                (inc i)))))","user":"56c792ace4b0ed865f9758c4"},{"code":"(fn [s n] (map (fn [[k v]] v)\n               (filter (fn [[i v]] \n                        (not (= 0 (rem (inc i) n))))\n                       (map-indexed (fn [i v] [i v]) s))))","problem":41,"user":"5063fe48e4b075d771da6f9e"},{"problem":41,"code":"(fn drop-nth [l m]\n  (for [x (range (count l))\n\t:when (or (= x 0) (not= (mod x m) (dec m)))]\n\t(nth l x)))","user":"54651faee4b01be26fd746d6"},{"problem":41,"code":"#(keep-indexed (fn [a b] \n                  (if (not= (rem (inc a) %2) 0)\n                    b)) %1)","user":"5cd639b4e4b0ccb061962940"},{"code":"(fn [s n] (loop [to '() from s] \n            (cond (empty? from) to\n                  (= (rem (count from) n) 0) (recur to (butlast from))\n              \t  :else (recur (conj to (last from)) (butlast from)))))","problem":41,"user":"5145832be4b0e8879607340a"},{"problem":41,"code":"(fn [xs n] \n  (reduce\n    (fn [acc [x i]]\n      (if (= 0 (rem i n))\n        acc\n        (conj acc x)))\n    [] (map vector xs (map inc (range)))))","user":"552d9b31e4b076ab5578f7eb"},{"problem":41,"code":"(fn [coll n] (map first (filter #(not= (rem (last %) n) 0) (map vector coll (map inc (range))))))","user":"5797d4bae4b039eba2ecb107"},{"problem":41,"code":"(fn drop-nth-2\n  ([seq x] (drop-nth-2 x x seq []))\n  ([current x seq built]\n   (if (nil? (first seq))\n     built\n     (if (= 1 current)\n       (recur x x (rest seq) built)\n       (recur (dec current) x (rest seq) (conj built (first seq)))\n       )\n     )\n    )\n  )","user":"5aada061e4b073f17744257a"},{"problem":41,"code":"(fn [coll n] (mapcat #(if (= n (count %)) (drop-last %) %) (partition n n () coll)))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":41,"code":"(fn [n x] \n  (mapcat (partial take (dec x)) \n          (partition-all x n)))","user":"5a99b861e4b0d174b936c7ad"},{"problem":41,"code":"(fn [coll\n     n]\n  (loop [[r & more :as all] (seq coll)\n         rth 1\n         acc '()]\n    (if all\n      (recur more (inc rth) (if (not= (mod rth n) 0) (conj acc r) acc))\n      (reverse acc))))","user":"5c718e6ce4b0fca0c1622796"},{"problem":41,"code":"(fn [x n]\n  (loop [x x count 0 new []]\n    (if (empty? x)\n      new\n      (recur (rest x) (if (= count (- n 1))\n                        0\n                        (inc count))\n             (if (= count (- n 1))\n               new\n               (conj new (nth x 0)))))))","user":"5694292ee4b0dcc4269f4113"},{"code":"(fn [a nm]\n(map second (filter \n    (fn [st] \n        (if-not (= (mod (first st) nm) 0)\n            true\n        )\n    ) \n    (map vector (iterate inc 1) a)\n    )\n))","problem":41,"user":"4e78dc98535db95036265724"},{"code":"(fn [s n] (apply concat (partition-all (- n 1) n s)))","problem":41,"user":"536f2faee4b0fc7073fd6e79"},{"problem":41,"code":"(fn [xs y]\n  (map second\n       (filter (fn [[a b]] (not= 0 (mod a y)))\n               (map (fn [a b] [(inc a) b]) (range) xs))))","user":"5f0a65dae4b09a3f05b71806"},{"problem":41,"code":"(fn [s n] \n (loop [sofar [] res s]\n   (if (not (empty? res))\n     (recur (into sofar (take (- n 1) res)) (drop n res))\n     sofar\n   )\n ) \n)","user":"5b8ec146e4b0c0b3ffbd49f0"},{"code":"#(mapcat (partial take (dec %2))\n                            (partition-all %2 %1))","problem":41,"user":"50142490e4b07d18bdaaf70a"},{"problem":41,"code":"#(for [x (map list (range 1 (inc (count %1))) %1)\n       :when (not (= 0 (rem (first x) %2 )))]\n       (second x))","user":"55c49394e4b0e31453f6499e"},{"code":"(fn [s n] (flatten (map (partial take (dec n)) (partition-all n s))))","problem":41,"user":"4edb4c7c535d10e5ff6f5318"},{"problem":41,"code":"(fn [coll n]\n  (flatten  (map (partial take (dec n)) (partition n n '() coll))))","user":"574ef99ae4b02ea114799250"},{"problem":41,"code":"(fn drop-every-nth\n  [coll n]\n  (when-let [seq (seq coll)]\n    (concat (take (dec n) seq) (drop-every-nth (drop n seq) n))))","user":"5cf938a5e4b0b71b1d808a90"},{"problem":41,"code":"(fn [coll nth]\n   (loop [coll coll nth nth res [] start-index 1]\n     (cond (empty? coll) res\n           (not= (mod start-index nth) 0) (recur (rest coll) nth (conj res (first coll)) (inc start-index))\n           :else (recur (rest coll) nth res (inc start-index)))))","user":"5ce36e02e4b0a17bb84e2b3e"},{"problem":41,"code":"(fn [ss number]\n                (->> ss\n                     (map-indexed (fn [i s]\n                                    [(inc i) s]))\n                     (filter (fn [[i s]]\n                               (not (zero? (rem i number)))))\n                     (map second)))","user":"57f904c5e4b0d3187e900936"},{"code":"(fn [xs n] \n  (loop [i 1\n         xs xs\n         result []]\n    (if (empty? xs) result\n        (recur (inc i) (rest xs) \n            (if (zero? (mod i n)) result (conj result (first xs))))))\n)","problem":41,"user":"534d1173e4b084c2834f4a98"},{"problem":41,"code":"(fn [lst n]\n  (loop [olst lst\n         nlst []\n         cnt 1]\n    (if (empty? olst)\n      nlst\n      (recur (rest olst) \n             (if (= (mod cnt n) 0) \n               nlst\n               (conj nlst (first olst)))\n             (inc cnt)))))","user":"5642b939e4b08d4f616f5f1b"},{"code":"(fn [lst dlm] (reduce \n (fn [result index] \n       (if \n           (= (mod (+ index 1) dlm) 0)\n           result\n           (conj result (lst index))))\n (conj (range 0 (count lst)) [])))","problem":41,"user":"50d6d7eee4b0159555a1fc76"},{"problem":41,"code":";#(loop [acc [] sq %1] (if (empty? sq) acc (recur (into acc (take (- %2 1) sq)) (nthrest sq %2))))\n#(flatten (partition-all (dec %2) %2 %1))","user":"5ed03b7fe4b016b56eae05ae"},{"problem":41,"code":"#(for [n (range (count %1)) :when (not (= 0 (mod (inc n) %2)))] (%1 n))","user":"5510aa92e4b06e50f9beb188"},{"problem":41,"code":"#(remove\n  (set \n   (take-nth \n    %2 \n    (cons '(0) %1))) \n  %1)","user":"576e607ae4b0979f89651579"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (if (empty? coll)\n    coll\n    (concat (take (dec n) coll) (drop-nth (drop n coll) n))))","user":"5dc40814e4b02f9375f4e1ae"},{"problem":41,"code":"(fn [lat n]  (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n lat))))","user":"55aa1637e4b0988bba2ad949"},{"problem":41,"code":"#(mapcat\n  (fn [x]\n    (if (= (count x) %2)\n        (drop-last x)\n        x)) (partition-all %2 %))","user":"535774c2e4b04ce2eb3ed27c"},{"problem":41,"code":"(fn [coll n] (flatten (map \n  #(if (= (count %) n) (reverse (rest (reverse %))) %) (partition n n '() coll))))","user":"55f014ebe4b06e875b46ce1b"},{"code":"(fn [coll n]\n  (keep-indexed \n    (fn [i v] (if \n      (= 0 (mod (inc i) n))\n      nil\n      v)) coll))","problem":41,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn [coll n]\n  (keep-indexed #(if (pos? (rem (inc %1) n)) %2) coll))","problem":41,"user":"5151c184e4b03e678e393add"},{"problem":41,"code":"(fn [a b] (flatten (conj (take (- b 1) (nthrest (nthrest a b) b)) \n                  (take (- b 1) (nthrest a b))\n                  (take (- b 1) a))))","user":"55484800e4b0a04f79299558"},{"problem":41,"code":"(fn [xs n]\n     (map #((vec xs) %) (filter #(not= (dec n) (rem % n)) (range (count xs)))\n    ))","user":"53ca23e3e4b00fb29b2212c6"},{"problem":41,"code":"(fn [l i]\n   (keep-indexed\n     #(if \n        (zero? (rem (inc %1) i))\n        nil %2)\n     l))","user":"56b86828e4b0f26550335923"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (= (mod (inc %1) n) 0) nil %2) coll))","user":"53ca41dae4b00fb29b2212c8"},{"problem":41,"code":"(fn [l v] (map first (filter #(not= 0 (mod (inc (second %1)) v)) (map #(vector %1 %2) l (range)))))","user":"5c8025d6e4b0c8042a70ce11"},{"problem":41,"code":"(fn [coll remove-nth]\n  \n  (loop [i 0\n         items (vector)\n         n (count coll)]\n    (if (= i n)\n      items\n      (if (= 0 (mod (inc i) remove-nth))\n        (recur (inc i) items n)\n        (recur (inc i) (conj items (nth coll i)) n)\n        )\n      )\n\n    )\n  )","user":"564c7501e4b0284900eef671"},{"problem":41,"code":"(fn drop-each [col n]\n  (mapcat #(if (= n (count %)) (drop-last %) %) (partition-all n col)))","user":"5645a7d6e4b0284900eef608"},{"problem":41,"code":"(fn [col n](mapcat #(take (dec n) %) (partition-all n col)))","user":"5b6473eee4b0c6492753e73f"},{"code":"(fn [xs n] (mapcat #(if (>= (count %) n) (drop-last %) %) (partition-all n xs)))","problem":41,"user":"516ea313e4b06aac486e5b2c"},{"problem":41,"code":"(fn [xs n] (mapcat #(if (zero? (mod (inc %2) n))\n                      '()\n                      (list %1))\n                   xs (range (count xs))))","user":"56602649e4b068f2fe63dc47"},{"problem":41,"code":"(fn my-rem [s index]\n  (loop\n    [acc '()\n     rest-of-coll s\n     curr-idx 0]\n    (cond\n      (empty? rest-of-coll) (reverse acc)\n      (= (mod (inc curr-idx) index) 0) (recur acc (rest rest-of-coll) (inc curr-idx))\n      :else (recur (conj acc (first rest-of-coll)) (rest rest-of-coll) (inc curr-idx))\n      )))","user":"576d24ede4b0979f8965155b"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if (= 0 (mod (inc %1) n)) nil %2) coll))","user":"5884f77ee4b0f1effa3b76a9"},{"code":"(fn [ss n]\r\n  ((fn [s n i rs]\r\n    (if (empty? s) rs\r\n      (if (not (= i n))\r\n        (recur (rest s) n (inc i) (conj rs (first s)))\r\n        (recur (rest s) n 1 rs)))) ss n 1 []))","problem":41,"user":"4f3242bae4b0d6649770a08f"},{"problem":41,"code":"(fn[x y](loop[col x drp y cnt 1 res []]\n              (if (empty? col)(reverse(seq res))\n                        (if (= cnt drp)\n                          (recur (rest col) drp 1 res)\n                                (recur (rest col) drp (inc cnt) (cons (first col) res))))))","user":"54ecd7dde4b024c67c0cf85c"},{"code":"(fn [s n] (flatten (map #(take (dec n) %) (partition-all n s))))","problem":41,"user":"4f038bcd535dcb61093f6b1d"},{"code":"(fn [a b] \n  (flatten \n    (map \n      (fn [x] (if (= (count x) b) (drop-last x) x)) \n      (partition-all b a))))","problem":41,"user":"4e570b60535d8a8b8723a286"},{"problem":41,"code":"(fn foo [xs x] \n  (flatten \n   (map \n    #(if (= (count %) x) (drop-last %) %) \n    (partition-all x xs))))","user":"54133900e4b01498b1a719de"},{"code":"(fn [xs k]\n  (loop [xs' xs, r []]\n        (let [[left right] (split-at k xs')]\n          (if (< (count left) k) (concat r left)\n            (recur right (concat r (butlast left)))))))","problem":41,"user":"508157b2e4b0946d0443855c"},{"problem":41,"code":"(fn [xs n]\n  (flatten  (partition-all  (- n 1) n xs) ))","user":"598588f2e4b021a7a535fe65"},{"problem":41,"code":"(fn drop-n [outer, n]\n    ((fn inner-drop-n [list, m]\n      (if\n        (empty? list) \n        '()\n        (if\n          (= m 1)\n          (inner-drop-n (rest list) n)\n          (conj (inner-drop-n (rest list) (dec m)) (first list))\n        )\n      )\n    ) outer n)\n)","user":"58e6e624e4b056aecfd47cc1"},{"problem":41,"code":"(fn [x y]\n  (loop [iter 1 tmp x result []]\n    (if (empty? tmp)\n      result\n      (recur (inc iter)\n             (rest tmp)\n             (cond (= (mod iter y) 0) result\n                   :else (conj result (first tmp))\n                   )\n             )\n      \n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"problem":41,"code":"(fn [s, n]\n (loop [x s, p 1, r []]\n  (if (empty? x) r (recur (rest x) (inc p) (if (= (rem p n) 0) r (conj r (first x)))))))","user":"53bcdd41e4b0d9a98559a6c0"},{"code":"(fn [xs n] (mapcat #(if (= n (count %1)) (butlast %1) %1)\n                   (partition-all n xs)))","problem":41,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":41,"code":"(fn [coll v]\n  (let [idx (dec v)]\n    (map second (filter #(not= idx (first %)) (map vector (cycle (range v)) coll)))))","user":"577f0b0ee4b0c8d87281f6f3"},{"problem":41,"code":"(fn drop-nth [coll nth]\n  (mapcat butlast (partition nth nth [nil] coll)))","user":"5889dc13e4b0f1effa3b774a"},{"code":"#(mapcat (fn [[a b]] (if (= 0 (mod (+ 1 a) %2)) [] [b])) (map-indexed vector %1))","problem":41,"user":"52aad30ce4b0c58976d9ac6d"},{"problem":41,"code":"(fn [xs n]\n  (map first\n  (filter (fn [[x y]] (not (= y 0)))\n  (map (fn [[x y]] [x (mod y n)])\n  (map (fn [x y] [y x]) (iterate inc 1) xs)))))","user":"56967bc0e4b0dcc4269f4131"},{"code":"(fn [s n] (apply concat (map (partial take (- n 1)) (partition n n nil s))))","problem":41,"user":"4f55ab5ee4b0a7574ea71809"},{"code":"(fn [xs n]\n      (for [i (range (count xs))\n            :when (pos? (rem (inc i) n))]\n        (xs i)))","problem":41,"user":"50f48298e4b004d364930527"},{"code":"(fn [l i]\n  (keep-indexed #(if (> (mod (+ % 1) i) 0) %2) l))","problem":41,"user":"4ee63d8d535d93acb0a66859"},{"problem":41,"code":"(fn [l n]\n  (map second \n       (filter #(not (zero? (mod (inc (first %)) n)))\n               (map-indexed vector l))))","user":"5674f874e4b05957ce8c6144"},{"problem":41,"code":"(fn [a b] (remove nil? (map #(if-not (zero? (rem %2 b)) %) a (cycle (range 1 (inc b))))))","user":"5382704be4b06839e8705ed4"},{"code":"(fn [coll n] (map second (filter #(> (mod (inc (first %)) n) 0) (map-indexed vector coll))))","problem":41,"user":"4dbf7a31535d020aff1edf75"},{"code":"(fn [coll n]\n   (flatten (partition (dec n) n [] coll)\n    ))","problem":41,"user":"52f4fae4e4b05e3f0be25f27"},{"problem":41,"code":"#(loop [index 1\n        remaining %1\n        result []]\n   (if (= 0 (count remaining))\n     result\n     (recur (inc index)\n            (rest remaining)\n            (if (= 0 (mod index %2))\n              result\n              (conj result (first remaining))))))","user":"540d0087e4b0addc1aec670b"},{"code":"(fn [s cnt] (flatten (map \n \t#(if (= cnt (count %)) (butlast %) %)\n \t(partition cnt cnt nil s))))","problem":41,"user":"4f072644535dcb61093f6c20"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (apply concat (partition (dec n) n [] coll)))","user":"5776e21de4b0979f89651642"},{"code":"(fn a [xs x] (if (empty? xs) xs (concat (take ( dec x) xs) (a (drop x xs) x))))","problem":41,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":41,"code":"(fn [lst n]\n  (apply concat \n          (partition-all (dec n) n lst)))","user":"5a99c5a9e4b0d174b936c7b1"},{"code":"(fn [c n] (flatten (map #(if (= (count %) n) (drop-last %) %) (partition n n nil c))))","problem":41,"user":"534bd9c1e4b084c2834f4a80"},{"problem":41,"code":"(fn\n  [lst a]\n  (let [len (count lst)]\n  (loop\n  \t[col [] i 1]\n    (if (> i len)\n      col\n      (if (zero? (mod i a)) \n        (recur col (inc i))\n        (recur (conj col (nth lst (- i 1))) (inc i))\n        )\n    ))))\n\n;#(apply concat (partition-all (dec %2) %2 %1))","user":"55ed1dc5e4b0121d4835fdd4"},{"problem":41,"code":"(fn drop-every \n  [lst n]\n  (->>\n    (map-indexed vector lst)\n    (remove (fn[x]\n              (zero? (mod (inc (first x)) n))))\n    (map second)))","user":"57f8151ce4b0d3187e900912"},{"code":"(fn f\n  [x num]\n  ( let [indexs (filter #(not= 0 (rem (inc %) num)) (range 0 (count x)))]\n    (map #(nth x %) indexs)\n  )\n)","problem":41,"user":"5302ac7fe4b0d8b024fd3731"},{"code":"(fn dropItems [aSequence number]\n  (loop [[a & b :as aSequence] aSequence index 1 acc []]\n    (if (seq aSequence)\n      (if (zero? (mod index number))\n        (recur b (inc index) acc)\n        (recur b (inc index) (conj acc a)))\n      acc)))","problem":41,"user":"50ee145de4b06330c1f87c53"},{"code":"(fn [coll x] (keep-indexed #(if-not (zero? (mod (inc %1) x)) %2) coll))","problem":41,"user":"4fe868d1e4b07c9f6fd12c3f"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(if (or (= 0 %1) (not= 0 (rem (+ %1 1) n))) %2) xs))","user":"53db43aae4b0e771c30254b1"},{"code":"(fn drop-every-nth [xs n]\n  (if (empty? xs)\n    (list)\n    (concat\n      (take (- n 1) xs)\n      (drop-every-nth (drop n xs) n))))","problem":41,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":41,"code":"(fn drop-every-n [col n]\n  (keep-indexed\n   (fn [index item]\n     (if \n       (not= 0 (mod (inc index) n))\n       item\n       nil\n      )\n     )\n   col\n   )\n )","user":"584b6a2be4b089d5ab817efd"},{"code":"(fn [col n] (for [x (range (count col)) :when (> (rem (+ x 1) n) 0)] (get col x)))","problem":41,"user":"4f032977535dcb61093f6a6c"},{"problem":41,"code":"(fn [col n] \n  (keep-indexed \n     (fn [idx item] (if (= 0 (rem (inc idx) n)) nil item)) \n     col))","user":"5180af54e4b0e3fc13e244e9"},{"problem":41,"code":"(fn\n  [s n]\n  (keep-indexed #(if (= 0 (rem (inc %1) n)) nil %2) s))","user":"5ec02e20e4b00a66d4a95288"},{"problem":41,"code":"(fn [coll idx]\n  (keep-indexed #(if (pos? (rem (inc %1) idx)) %2) coll))","user":"542789efe4b01498b1a71b25"},{"problem":41,"code":"#(mapcat butlast (partition %2 %2 \"x\" %) )","user":"53b15e6ee4b047364c04448f"},{"problem":41,"code":"(fn [s n] \n  (->>\n    (map vector s (drop 1 (range)))\n    (filter (fn [[_ i]] (not= (mod i n) 0)))\n    (map first)))","user":"4fd4bddce4b0d4de60cee36e"},{"code":"(fn [xs i]\n  (flatten\n    (map-indexed #(if (== 0 (mod (inc %1) i)) '() %2) xs)))","problem":41,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn [x y] (apply concat (partition (dec y) y () x)))","problem":41,"user":"50a8cc97e4b0a9a42786e8db"},{"problem":41,"code":"#(remove nil? (map-indexed (fn [i d] (if (zero? (mod (inc i) %2)) nil d)) %))","user":"532018efe4b08068f379edcd"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (when-not (empty? coll)\n    (concat (take (dec n) coll) (drop-nth (drop n coll) n))))","user":"58aa8083e4b01a0c0b232985"},{"code":"(fn drop-every-nth [sq n]\n  (if (empty? sq)\n    ()\n    (concat\n     (take (dec n) sq)\n     (drop-every-nth (drop n sq) n))))","problem":41,"user":"5315ec83e4b08068f379ed39"},{"problem":41,"code":"#((fn dr \n    [r n]\n    (if (empty? r)\n      r\n      (if (= n 0)\n        (dr (rest r) (- %2 1))\n        (cons\n         (first r)\n         (dr (rest r) (- n 1))\n        )))) %1 (- %2 1))","user":"593f88dce4b069cdc2982be2"},{"problem":41,"code":"#(loop [x 1 c %1 n %2 r []] \n   (if (empty? c)\n     r\n     (if (= x n) \n       (recur 1 (rest c) n r)\n       (recur (inc x) (rest c) n (conj r (first c))))))","user":"5f3567d6e4b0574c87022c44"},{"code":"(fn drop-nth [vec n]\n  \"Drops the nth element of the sequence.\"\n  (mapcat #(take (dec n) %) (partition-all n vec)))","problem":41,"user":"518ad8fce4b06da86c1973c1"},{"code":"(fn everyn [arr n & {:keys [i] :or {i 1}}]\n(cond (<= (count arr) 0) '()\n(not= 0 (mod i n)) (concat [(first arr)] (everyn (rest arr) n :i (inc i)))\n:else (everyn (rest arr) n :i (inc i))))","problem":41,"user":"52c8a8b9e4b0c2d177d62139"},{"code":"(fn [s n] \n  (reduce concat \n          (map \n           #(take (dec n) %)\n           (partition-all n s)\n           )\n   )\n  )","problem":41,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":41,"code":"(fn [a b]\n   (remove nil? (map-indexed\n                  (fn [i c]\n                    (if (not= 0 (mod (+ i 1) b)) c))\n                  a)))","user":"5cc1f975e4b0ccb0619627c8"},{"problem":41,"code":"(fn [xs d]\n  (keep-indexed (fn [i x]\n                  (if-not (zero? (rem (inc i) d))\n                    x))\n                xs))","user":"5512cd55e4b055c2f668d4ba"},{"problem":41,"code":"; ((fn [xs n]\n;     (loop \n;           [acc []\n;           xs xs\n;           counter 0]\n;           (cond\n;             (empty? xs) acc\n;             (= (mod (inc counter) n) 0) (recur acc (rest xs) (inc counter))\n;             :else (recur (conj acc (first xs)) (rest xs) (inc counter))))) [1 2 3 4 5 6 7 8] 3)\n          \n\n(fn [xs n]\n      (->> (partition-all n xs)\n           (mapcat (fn [x] (if (= (count x) n) (drop-last x) x)))))","user":"56e11125e4b03a7c14b85a1f"},{"problem":41,"code":"(fn [x n]\n  (->> (partition-all n x)\n      (map #(if (= (count %) n) (take (- n 1) %)\n                                %))\n       flatten))","user":"5b6962c1e4b0c6492753e787"},{"code":"(fn dropnth [x y]\n  (letfn [(dn [l n cur]\n    (if (empty? l) \n        l\n        (if (= n cur)\n            (dn (rest l) n 1)\n            (cons (first l) (dn (rest l) n (+ 1 cur)))\n        )\n    )\n  )]\n  (dn x y 1) \n  )\n)","problem":41,"user":"50588af1e4b06522596eba7d"},{"problem":41,"code":"(fn drop-every-nth [xs n]\n  (when (seq xs)\n    (concat\n      (take (dec n) xs)\n      (drop-every-nth (drop n xs) n))))","user":"59eb63e3e4b0249b7282077c"},{"problem":41,"code":"(fn [coll n] \n  (for [x coll\n        :let [y (+ (.indexOf coll x) 1)]\n        :when (not= (mod y n) 0)] \n      x))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":41,"code":"#(loop [elems %1 n %2 acc []] \n   (if (= 0 (count elems)) acc \n     (recur (rest elems) \n            (if (= n 1) %2 (dec n)) \n            (if (= n 1) acc (conj acc (first elems))))))","user":"507516d0e4b054001656acda"},{"code":"(fn [coll n]\n  (let [c (vec coll)\n        cnt (count c)]\n   (loop [idx 0 result []]\n    (cond\n      (= idx cnt) result\n      (zero? (mod (inc idx) n)) (recur (inc idx) result)\n      :else (recur (inc idx) (conj result (get c idx)))))))","problem":41,"user":"4e88feef535d8b9bb0147ca8"},{"problem":41,"code":"(fn [seq n]\n    (loop [i 0 res '[]]\n      (if (= i (count seq))\n        res\n        (recur\n          (inc i)\n          (if (= 0 (rem (inc i) n))\n            res\n            (conj res (nth seq i)))))))","user":"53a68c5ae4b0ef122a8689c8"},{"problem":41,"code":"(fn drop[n s]\n  (apply concat(partition-all\n         (dec s)s n)))","user":"6085edade4b0736b099e42fc"},{"code":"(let\n  [my-remove (fn my-remove [n coll] (apply concat [(take (- n 1) coll) (drop n coll)]))\n   indices (fn indices [i c] (map-indexed\n                     (fn [i a] (- a i))\n                     (filter (fn [n] (zero? (mod n i))) (range i (+ 1 (count c))))))]\n(fn dropnth [coll i]\n  (reduce (fn [a b] (my-remove b a)) coll \n          (indices i coll))))","problem":41,"user":"522d0360e4b0806774ddfef7"},{"problem":41,"code":"(fn [clxn x]\n  (reduce \n   concat \n   (map \n     (fn [itm] \n       (take (- x 1) itm)) \n    (partition-all x clxn))))","user":"56e4a6c1e4b03a7c14b85a51"},{"problem":41,"code":"(fn [xs x]\n  (loop [xs xs\n         n 1\n         xb []]\n    (if (empty? xs)\n      xb\n      (recur\n        (rest xs)\n        (if (= n x)\n           1\n           (inc n))\n        (if (= n x)\n           xb\n           (conj xb (first xs)))))))","user":"5c34f7efe4b0d62ef62d9f5b"},{"problem":41,"code":"(fn [v n]\n  ((fn [res vect]\n     (if (empty? vect)\n       res\n       (recur (concat res (take (- n 1) vect)) (drop n vect)))\n     ) [] v))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":41,"code":"#(into [] (flatten (map (fn [x] (if (= (count x) %2) (butlast x) x)) (partition-all %2 %1))))","user":"52fbc44be4b047fd55837010"},{"code":"(fn [col n] (flatten (map #(take (dec n) %) (partition-all n col))))","problem":41,"user":"5008d149e4b0144d4f561e41"},{"code":"(fn [s n] (vec (keep-indexed (fn [i v] (if-not (zero? (mod (inc i) n)) v nil)) s)))","problem":41,"user":"52be5d55e4b07a9af579231e"},{"problem":41,"code":"(fn [x y] (mapcat (fn [z] (take (dec y) z)) (partition-all y x)))","user":"5c527129e4b0fb8c5ffd99de"},{"code":"(fn [col n]\n     (keep-indexed\n       (fn [index item]\n         (if (= 0 (mod (inc index) n))\n               nil\n               item))\n     col))","problem":41,"user":"4ffa8affe4b0678c553fc3bd"},{"code":"#(flatten (map (partial take (- %2 1)) (partition-all %2 %)))","problem":41,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  (->>\n    (count lst)\n    (+ 1)\n    (range 1)\n    (interleave lst)\n    (partition 2)\n    (filter (fn [x] (not= 0 (mod (second x) n))))\n    (map (fn [y] (first y)))))","user":"59e8fef3e4b0249b72820743"},{"problem":41,"code":"(fn [y x] \n   (mapcat #(take (dec x) %) (partition-all x y))\n           \n           )","user":"5650ac8be4b0284900eef6c2"},{"problem":41,"code":"(partial (fn [state s n]\n  (cond\n    (< (count s) n) (concat state s)\n    :else (recur (concat state (take (- n 1) s)) (drop n s) n)\n   )) ())","user":"5a080bdde4b01bb0ae8afde9"},{"code":"#((fn d [s c]\r\n            (if (empty? s)\r\n                s\r\n                (if (= c 1)\r\n                    (d (rest s) %2)\r\n                    (cons (first s) (d (rest s) (- c 1))))))\r\n        %1 %2)","problem":41,"user":"4df1ce44535d08e6dec9fe1f"},{"problem":41,"code":"(fn [xs n]\n  (loop [acc (list)\n         xs  xs\n         i   n\n         n   n]\n    (if (empty? xs) (reverse acc)\n      (if (= i 1)\n    \t(recur                  acc  (rest xs)      n  n)\n        (recur (cons (first xs) acc) (rest xs) (dec i) n)))))","user":"51b8d3d5e4b050a1176cd69d"},{"code":"(fn dr [l n] (letfn [(dr3 [l n m] \n                          (cond (empty? l) \n                                nil \n                                :else \n                                (cond (= m (- n 1))\n                                      (dr3 (rest l) n (mod (+ m 1) n))\n                                      :else \n                                      (cons (first l) (dr3 (rest l) n (mod (+ m 1) n))))))] (dr3 l n 0)))","problem":41,"user":"528b9efee4b0239c8a67aea0"},{"code":"(fn [xs n]\n  (loop [ret () xs xs]\n    (if (empty? xs)\n        ret\n        (recur (concat ret (take (dec n) xs)) (drop n xs)))))","problem":41,"user":"4ec132a0535dfed6da9c6da9"},{"problem":41,"code":"(fn drop-nth [xs n] (keep-indexed (fn [i e] (if (not= (mod (inc i) n) 0) e nil)) xs))","user":"5eec1001e4b07c55ae4a0502"},{"problem":41,"code":"( fn [l x] ( flatten (partition-all (- x 1) x l)))","user":"53d63e6ce4b0e771c3025454"},{"problem":41,"code":"(fn [c n] (flatten (map #(if (= n (count %)) (reverse (rest (reverse %))) %) (partition-all n c))))","user":"5a8e9a7ae4b05369db4d2528"},{"problem":41,"code":"(fn [s n] \n  (flatten (map #(take (dec n) %) (partition-all n s))))","user":"57d1a0e6e4b0bd073c20236d"},{"problem":41,"code":"(fn [coll n]\n    (loop [ result []\n            take-n-result (take (dec n) coll)\n            drop-n-result (drop n coll)\n            ]\n        (if (empty? drop-n-result)\n            (flatten  (conj result take-n-result))\n            (recur (conj result take-n-result)  (take (dec n) drop-n-result) (drop n drop-n-result))\n        )\n        )\n\n)","user":"5b274fd1e4b063e2438bcc3b"},{"problem":41,"code":"(fn test [x y] (vec (mapcat identity (map #(if (= y (count %))(butlast %) %) (partition-all y x)))))","user":"6022429be4b0d5df2af22200"},{"problem":41,"code":"(fn [a b] (map #(first %) (filter #(not (= 0 (mod (inc (last %)) b))) (map list a (range)))))","user":"56d902c3e4b0ea9b8538f7ed"},{"problem":41,"code":"#(map first (filter (fn [[x i]] (< 0 (rem (inc i) %2))) (partition 2 (interleave %1 (range)))))","user":"54d7ed8de4b0a52adc2e2034"},{"problem":41,"code":"(fn drop-nth-2\n      [coll num]\n      (->> coll\n           (partition num num nil)\n           (mapcat (fn [c1]\n                     (if (= num (count c1))\n                       (drop-last 1 c1)\n                       c1)))))","user":"60c90322e4b0e0fa5f1b4302"},{"problem":41,"code":"(fn [x n]\n  (mapcat #(take (- n 1) %) (partition-all n x)))","user":"550f70bee4b06e50f9beb177"},{"code":"(fn [xs n]\n  ((fn impl [xs n c rs]\n    (if (nil? xs)\n      rs\n      (if (= (mod c n) 0)\n        (impl (next xs) n (+ c 1) rs)\n        (impl (next xs) n (+ c 1) (conj rs (first xs))))))\n   xs n 1 []))","problem":41,"user":"521392bce4b0d32679a5065e"},{"problem":41,"code":"(fn f [s n]\n  (loop [acc [] orig s new (range 1 (inc n))]\n    (if (seq orig)\n      (if (= n (first new))\n        (recur acc (rest orig) (range 1 (inc n)))\n        (recur (conj acc (first orig)) (rest orig) (rest new)))\n      acc)))","user":"55f8fd70e4b03cbcff9738bc"},{"code":"(fn [coll n]\n  (map first (filter #(not= (second %) n)\n                     (map vector coll (cycle (range 1 (inc n)))))))","problem":41,"user":"4e39fb68535deb9a81d77f47"},{"problem":41,"code":"#(keep-indexed \n  (fn [index item] \n    (if (zero? (rem (inc index) %2)) \n      nil\n      item)) \n  %1)","user":"5d1231dde4b02c15ef021995"},{"code":"(fn [c n]\n  (let [p (partition-all n c)]\n    (flatten (map #(if (= (count %) n) (drop-last %) %) p))))","problem":41,"user":"4ead2841535d7eef3080731e"},{"problem":41,"code":"#(keep (fn [[i item]] (if-not (zero? (mod (inc i) %2)) item)) (map-indexed vector %))","user":"56a76f36e4b07966d5a8a05b"},{"problem":41,"code":"(fn [s n] \n  (mapcat (partial take (dec n))\n          (partition-all n s)))","user":"5da8fa72e4b000c986472c2d"},{"problem":41,"code":"(fn [coll n] (vec (flatten (mapv #(if (= n (count %)) (drop-last %) %) (partition-all n coll)))))","user":"5564c113e4b0c656e3ff180d"},{"problem":41,"code":";; first try; how baroque!\n#_(fn  [xs n]\n  (map #(second %)\n       (remove #(= (first %) (dec n)) \n               (partition 2 (interleave (cycle (range n)) xs)))))\n\n#(flatten (partition-all (dec %2) %2 %))","user":"5a544eeee4b05d388ecb6c24"},{"problem":41,"code":"(fn [c n] (filter (complement nil?) (map-indexed (fn [i e] (when (not (= 0 (mod (+ i 1) n))) e)) c)))","user":"572b73d0e4b0cd1946bd0f3a"},{"code":"#(reduce concat (partition-all (dec %2) %2 %))","problem":41,"user":"4fd2789ee4b04c3a95aa0422"},{"code":"(fn [s n]\n  (map\n    #(nth s (dec %))\n    (remove #(zero? (mod % n)) (range 1 (inc (count s))))))","problem":41,"user":"501284d9e4b030d97e4db710"},{"problem":41,"code":"(fn [col n]\n  (flatten (concat (map #(take (dec n) %) (partition-all n col)))))","user":"541f89a5e4b01498b1a71a99"},{"code":"(fn [coll n] \n           (keep-indexed #(if ((complement zero?) \n                               (mod (inc %1) n)) %2)\n                         coll))","problem":41,"user":"4f3cd535e4b0e243712b1f56"},{"problem":41,"code":"(fn [coll skip] \n   (->>\n    coll\n    (partition skip skip '[])\n    (mapcat #(if (= skip (count %1))\n            (drop-last %)\n            %))\n    \n))","user":"568a13eae4b0dcc4269f4089"},{"code":"(fn [sq n]\n   (reduce concat \n           (map #(if (= (count %) n) (butlast %) %) \n                (partition-all n sq))))","problem":41,"user":"50052d38e4b0678c553fc45c"},{"problem":41,"code":"(fn [c n]\n  (->> c\n       (partition-all n)\n       (mapcat #(if (= (count %) n) (butlast %) %))))","user":"50385746e4b0803468ea2c6d"},{"code":"(fn  [lst n]\n  (loop [rm (seq lst), acc (vector), i 1]\n    (cond (empty? rm) (seq acc)\n          (= n i) (recur (rest rm) acc 1)\n          :else (recur (rest rm) (conj acc (first rm)) (inc i)))))","problem":41,"user":"538e36c7e4b0b51d73faae81"},{"problem":41,"code":"(fn [xs, n] (loop [c 1, [head & more] xs, acc []] (if more (if (= n c) (recur 1 more acc) (recur (inc c) more (into acc [head]))) (if (= n c) acc (into acc [head])))))","user":"56cad309e4b0ea9b8538f720"},{"problem":41,"code":"(fn [c n] (filter #(not= nil %) (map-indexed (fn [idx itm] (if (not= 0 (rem (+ idx 1) n)) itm)) c)))","user":"5614ebc5e4b05f002753dfbc"},{"problem":41,"code":"(fn iter \n  ([xs n ys]\n   (if (= xs [])\n     ys\n     (concat ys \n             (take (- n 1) xs) \n             (iter (drop n xs) n ys))))\n  ([xs n]\n   (iter xs n [])))","user":"5bb17123e4b0a20761a234fd"},{"code":"(fn drop-nth\n  ([s n] (drop-nth s n 1[]))\n  ([s n c acc]\n    (if (empty? s)\n      acc\n      (if (= c n)\n        (drop-nth (rest s) n 1 acc)\n        (drop-nth (rest s) n (inc c) (conj acc (first s)))\n      )\n    )\n  )\n)","problem":41,"user":"4fff00ede4b0678c553fc3fc"},{"code":"(fn [collection n]\n  (flatten\n   (concat\n    (map #(drop-last %) (partition n collection))\n    (take-last (rem (count collection) n) collection))))","problem":41,"user":"52daf558e4b09f7907dd13c1"},{"problem":41,"code":"#(remove nil? (map-indexed (fn [i x]  (if-not (= (mod (+ i 1) %2) 0) x)) %1))","user":"5f275800e4b0857314092c93"},{"code":"(fn [coll n]\n  (first (reduce (fn [[acc ncurr] curr]\n            (if (= ncurr 1)\n             \t[acc n]\n              \t[(conj acc curr) (- ncurr 1)]))\n          [[] n]\n          coll)))","problem":41,"user":"53695439e4b0243289761e9a"},{"problem":41,"code":"(fn [s idx] (keep-indexed #(if (not= (mod (inc %1) idx) 0) %2) s))","user":"558bdcefe4b0277789237633"},{"problem":41,"code":"(fn [coll n]\n (mapcat #(take (dec n) %) (partition-all n coll)))","user":"53716539e4b0fc7073fd6eb1"},{"problem":41,"code":"(fn [in n]\n  (flatten (partition (- n 1) n [] in)))","user":"5aac01d3e4b073f177442567"},{"problem":41,"code":"(fn [arr n]\n  (first (reduce \n   (fn [[res i] e]\n     [(if (= 0 (mod i n)) \n        res \n        (conj res e)) \n      (inc i)])\n   [[] 1] arr)))","user":"56946d43e4b0dcc4269f411e"},{"code":"(fn [ll cc] ((fn rn [l c p] (if (empty? l) '() (if (= 0 (rem p c)) (rn (rest l) c (inc p)) (cons (first l) (rn (rest l) c (inc p)))))) ll cc 1))","problem":41,"user":"510931ede4b0c71f76895663"},{"code":"(fn z[l n] (if (empty? l)\n  \t\t  []\n\t\t\t  (concat (take (dec n) l) (z (drop n l) n))))","problem":41,"user":"4fd8544be4b0dab7d829f390"},{"code":"(fn [l n] (mapcat #(take (dec n) %) (partition-all n l)))","problem":41,"user":"4fa30027e4b081705acca187"},{"problem":41,"code":"(fn [coll idx] (keep-indexed #(if (not= 0 (mod (+ 1 %1) idx)) %2) coll))","user":"5d5eb086e4b0c9e5857d4ff7"},{"problem":41,"code":"(fn [coll n]\n  (flatten (partition (dec n) n nil coll)))","user":"53480973e4b084c2834f4a52"},{"problem":41,"code":"#(flatten (partition-all (dec %2) %2 %1))\n\n;; #(->> %1\n;;        (reduce\n;;         (fn [acc e]\n;;           (if (= 0 (rem (inc (count acc)) %2))\n;;             (conj acc nil)\n;;             (conj acc e)))\n;;         '())\n;;        (filter (complement nil?))\n;;        (reverse))\n\n;; (fn [c n]\n;;     (->> (map-indexed #(vector (inc %1) %2) c)\n;;          (filter #(not= (rem (first %) n) 0))\n;;          (map last)))\n\n\n;; (fn [c n]\n;;     (->> (partition-all n c)\n;;          (mapcat #(if (= (count %) n)\n;;                  (drop-last %)\n;;                  %))))","user":"591ad160e4b09b4ee5954bdf"},{"problem":41,"code":"(fn [coll n]\n  (let [x (range (count coll))]\n    (map (fn [i] (coll i)) (filter (fn [y] (not (zero? (mod (inc y) n)))) x))))","user":"55058a4fe4b086ebe8a79c89"},{"problem":41,"code":"(fn[v x](mapcat (fn[y](take (dec x) y))(partition-all x v)))","user":"6001460ce4b074f607df6611"},{"code":"(fn[l n](flatten (map (comp #(take (dec n) %) first)\r\n(rest (take-while #(not (= '() (first %)))\r\n(iterate (fn [x] (split-at n (last x))) [1 l]))))))","problem":41,"user":"4ddbd934535d02782fcbe9fc"},{"code":"#(for [x (range (count %1)) :let [y (nth %1 x)] :when (not (zero? (mod (inc x) %2)))] y)","problem":41,"user":"522f988be4b032bbe3424168"},{"problem":41,"code":"(fn [c n]\n  (keep-indexed #(when-not (= 0 (mod (inc %1) n)) %2) c))","user":"57023e92e4b08d47c97781da"},{"code":"(fn funky [levec elnum]\r\n  (loop [vec levec\r\n         n elnum\r\n         acc []]\r\n    (if (empty? vec) acc\r\n        (recur (drop n vec) n (into acc (take (dec n) vec))))))","problem":41,"user":"4e81e29b535db62dc21a62bd"},{"code":"(fn [seq position]\n  (let [indexed (map #(vector % %2) (range) seq)\n\t\tfiltered (filter #(not(= 0 (rem (inc (first %)) position) )) indexed)]\n\t\t(apply vector (map last filtered))))","problem":41,"user":"504eff22e4b0e7ad84dbc4a9"},{"code":"(fn drop-every\n  [seq n]\n  (mapcat #(if (= n (count %))\n             (pop %)\n             %)\n          (map vec\n               (partition n n nil seq))))","problem":41,"user":"4ebf11bc535dfed6da9c6d9c"},{"code":"(fn drop-nth [sq vl]\n  (keep-indexed #(if (not (zero? (rem (inc %1) vl))) %2) sq))","problem":41,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn [x y]\n    (remove nil? (mapcat\n      (fn [[idx vl]] [vl])\n      (map-indexed\n        (fn [idx vl] (if (= (rem idx y) (dec y)) [] [idx vl]))\n        x))))","problem":41,"user":"50ed5d1be4b06330c1f87c37"},{"code":"(fn dropnth [cs n]\r\n  (letfn [(iter [cs i]\r\n            (when (not-empty cs) (if (= i 1)\r\n               (iter (rest cs) n)\r\n               (cons (first cs) (iter (rest cs) (dec i))))))\r\n          ]\r\n    (iter cs n)))","problem":41,"user":"507a396be4b08327cd804a69"},{"problem":41,"code":"(fn [coll n]\n  (last (reduce (fn [[idx t] v] (if (= (mod idx n) 0) [(+ idx 1) t] [(+ idx 1) (conj t v)])) [1 []] coll)))","user":"58edaa3be4b056aecfd47d89"},{"problem":41,"code":"(fn [col n]\n  (keep-indexed (fn [index item]\n                  (if (not= 0 (mod (inc index) n))\n                    item\n                    nil))\n                col))","user":"573102bbe4b0cd1946bd0fbb"},{"problem":41,"code":"(fn [seq num]\n  (loop [seq seq accum [] count 1]\n    (cond (empty? seq) accum\n          (= count num) (recur (rest seq) accum 1)\n          :else (recur (rest seq) (conj accum (first seq)) (+ 1 count)))))","user":"554dff83e4b00713264bd98d"},{"problem":41,"code":"(fn [-s -ind]\n    (loop [s -s ind 1 new []]\n          (if (empty? s)\n              new\n              (if (= ind -ind)\n                  (recur (rest s) 1 new)\n                  (recur (rest s) (inc ind) (conj new (first s)))))))","user":"57e3f709e4b0bfb2137f5aaf"},{"problem":41,"code":"(fn [coll n]\n  (let [nth-item (- n 1) step n]\n    ;; Partition before (n - 1) and after (step) n\n    (flatten (partition-all nth-item step coll))))","user":"58327a08e4b089d5ab817c7c"},{"problem":41,"code":"(fn foo [L n] (let [LL (map (fn [y z] (list y z)) L (range))] (map (fn [b] (first b)) (filter (fn [a] (not= 0 (mod (+ 1 (last a)) n))) LL))))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":41,"code":"(fn my-drop-nth [col n] \n(reverse \n  (reduce \n    (fn [col2 e] \n      (if e (cons e col2) col2)) \n    [] (for [x (range (count col))]\n      (if (= (mod (+ x 1) n) 0) nil (nth col x)))))\n  )","user":"6065755ee4b069485764ddcc"},{"problem":41,"code":"(fn drop1 [xs n]\n   (if (< (count xs) n)\n     xs\n     (concat (drop-last (take n xs)) (drop1 (drop n xs) n))))","user":"54fd93bbe4b07d26eda61d36"},{"problem":41,"code":"(fn [seq drop-every]\n  (loop [seq seq\n         nth (- drop-every 1)\n         acc []]\n    (if (empty? seq)\n      acc\n      (if (= 0 nth)\n        (recur (rest seq) (- drop-every 1) acc)\n        (recur (rest seq) (- nth 1) (conj acc (first seq)))))))","user":"57155980e4b07c98581c3ad7"},{"problem":41,"code":"(fn [coll n]\n     (apply concat (#(partition-all (dec %2) %2 %1) coll n) ) \n  )","user":"5c8fd8f3e4b048ec896c59c7"},{"code":"#(flatten (map (fn [a] (if (= (count a) %2) (butlast a)a)) (partition %2 %2 nil %1)))","problem":41,"user":"503539dee4b0ed9c821488f6"},{"code":"(fn [ls n]\n  (map last \n    (filter #(not= (first %) 0) \n      (map-indexed #(list (mod (inc %1) n) %2) ls)\n    )\n  )\n)","problem":41,"user":"4ecc147b535d23f0362276f7"},{"code":"(fn [coll index]\r\n  (map second (remove #(= (mod (first %) index) 0) (map-indexed #(list (+ %1 1) %2) coll))))","problem":41,"user":"4dd6fa35535d2dad7130b5cd"},{"problem":41,"code":"(fn [coll x]\n   ((partial filter (complement nil?)) \n    (map-indexed #(if (not (= (mod (inc %1) x) 0)) %2) coll)))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn dropnth [xs n]\r\n  ((fn dropnth-prime [xxs n-prime]\r\n     (if (empty? xxs)\r\n       ()\r\n       (if (= n-prime 1)\r\n         (dropnth-prime (rest xxs) n)\r\n         (conj (dropnth-prime (rest xxs) (dec n-prime)) (first xxs))))) xs n))","problem":41,"user":"4dd023dd535d5973398f92ad"},{"code":"(fn [vec n] (mapcat #(take (dec n) %) (partition-all n vec)))","problem":41,"user":"5224060de4b01819a2de42c3"},{"problem":41,"code":"(fn [x y] (keep-indexed #(if ((complement =) 0 (mod (+ % 1) y)) %2) x) )","user":"54db33f1e4b024c67c0cf75d"},{"code":"(fn drop-nth [xs n]\n  (if (> n (count xs)) xs\n      (concat (butlast (take n xs))\n              (drop-nth (drop n xs) n))))","problem":41,"user":"4ee82ce9535d93acb0a6687a"},{"problem":41,"code":"(fn [s x]\n  (keep-indexed #(if (not (zero? (mod (inc %1) x))) %2 nil) s))","user":"5b2689e3e4b063e2438bcc33"},{"problem":41,"code":"(fn drop_Nth \n  [lst n]\n  (if\n    (> n (count lst))\n    lst\n    (concat (take (dec n) lst) \n            (drop_Nth (drop n lst) n)))\n  )","user":"5c787131e4b0fca0c1622825"},{"code":"(fn [a n]\n       (map second (filter #(< (first %) n) (map-indexed (fn [i x] [(inc (mod i n)) x]) a))))","problem":41,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn f [x n]\n  (if (< (count x) n) ;; less than n elements\n   x  ;; just return x\n   (concat (drop-last (take n x)) (f (drop n x) n))\n  )\n)","problem":41,"user":"528cf6f7e4b0239c8a67aebd"},{"code":"(fn [os n] (flatten (partition-all (dec n) n os)))","problem":41,"user":"51ec9114e4b069f463c22ccd"},{"code":"#(keep-indexed (fn [index item]\n                  (if (not= 0 (rem (+ index 1) %2)) item nil))\n                %1)","problem":41,"user":"509dc716e4b08df8156e9e27"},{"code":"(fn [coll i]\n        (vec (flatten (map #((if (= i (count %)) drop-last identity) %) (partition-all i coll)))))","problem":41,"user":"5041bdf3e4b06d8231e4fad0"},{"problem":41,"code":"(fn [coll n] (keep-indexed #(if-not (= 0 (rem (inc %1) n))%2) coll))","user":"5d267c11e4b02ea6f0fb6a41"},{"code":"(fn [coll n] (apply concat (map-indexed #(if (not= 0 (mod (+ %1 1) n)) [%2] []) coll)))","problem":41,"user":"52963cc7e4b02ebb4ef7502d"},{"problem":41,"code":"(fn drop-every-y [x y] (keep-indexed #(if-not (= (mod (inc %1) y) 0) %2) x))","user":"53b12c76e4b047364c04448a"},{"problem":41,"code":"(fn [x, c]\n  (loop [in x i 1 result []]\n  (if (empty? in)\n    result\n    (if (= 0 (rem i c) )\n      (recur (rest in) (inc i) result)\n      (recur (rest in) (inc i) (concat result (list (first in)))) \n  ))))","user":"55b705fce4b01b9910ae29a0"},{"code":"(fn [xs n] (flatten (map #(take (dec n) %) (partition-all n xs))))","problem":41,"user":"52cee992e4b07d0d72b27395"},{"problem":41,"code":"(fn [v n]\n  (flatten (reduce\n            (fn [acc part]\n              (conj acc (take (dec n) part)))\n            []\n            (partition-all n v))))","user":"559d7e9ce4b0ec2b359424de"},{"problem":41,"code":"(fn [indata nn]\n  (loop [data indata n 1 out '[]]\n    (if (empty? data)\n      (reverse out)\n      (if (= 0 (mod n nn))\n        (recur (rest data) (inc n) out)\n        (recur (rest data) (inc n) (cons (first data) out))))))","user":"56197b47e4b053970a773af8"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (not= (dec n) (mod %1 n)) %2)\n                coll))","user":"5db19599e4b010eb3c36cd05"},{"problem":41,"code":"(fn [v n] (keep-indexed #(if (not= (mod (+ %1 1) n) 0) %2) v))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":41,"code":"(fn rem-mul\n  [coll index]\n  (if (empty? coll) []\n    (concat (take (dec index) coll) (rem-mul (drop index coll) index))))","user":"550d9452e4b06e50f9beb15d"},{"problem":41,"code":"(fn [s n] \n  (keep-indexed \n    (fn [index item] \n      (if\n        (not= 0 (mod (inc index) n))\n          item \n          nil))\n    s))","user":"555a5731e4b0deb715856e44"},{"problem":41,"code":"(fn [x y]\n  (loop [result [] inp x]\n    (if (= (count inp) 0) result\n       (recur (flatten (cons result (take (dec y) inp))) (drop y inp)))))","user":"5a40eb64e4b0447ef91cc5d8"},{"problem":41,"code":"(fn [v n] (keep-indexed #(when (not (= 0 (mod (inc %1) n))) %2) v))","user":"5280539ce4b0757a1b1713f3"},{"problem":41,"code":"(fn ssp [ls n]\n  ((fn drn [xs c m]\n    (cond (empty? xs) ()\n          (= m 1) (drn (rest xs) c c)\n          :else (conj (drn (rest xs) c (dec m)) (first xs)))) ls n n))","user":"60228147e4b0d5df2af22202"},{"problem":41,"code":"(fn solution [sequen n]\n  (mapcat #(if (not= (rem %2 n) 0)\n             (vector %1))\n          sequen\n          (map inc (range (count sequen)))))","user":"5e2ef900e4b05b4b015161fc"},{"code":"(fn drop-every-nth [s,n]\n  (if(empty? s) '()\n    (concat (take (- n 1) s) (drop-every-nth (drop n s) n))))","problem":41,"user":"51b73a91e4b0d906fcd71d33"},{"problem":41,"code":"#(flatten (map (fn [x] (if(= (count x) %2) (drop-last x) x)) (partition-all %2 %1)))","user":"59a9c22ae4b08cbb53654d75"},{"problem":41,"code":"(fn drop-nth [x n]\n  (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n x))))","user":"56942939e4b0dcc4269f4114"},{"problem":41,"code":"(fn drop-every-nth-item [s n]\n  (keep-indexed #(if (not= (mod %1 n) (dec n)) %2) s))","user":"5f5f2eafe4b02876ed9fcff5"},{"code":"(fn [coll nth]\n  (loop [c coll acc [] i 1]\n    (cond\n      (empty? c) acc\n      (zero? (mod i nth)) (recur (rest c) acc (inc i))\n      :else (recur (rest c) (conj acc (first c)) (inc i)))))","problem":41,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"(fn tt [lst n]\n\t(flatten (for [chunk (partition-all n lst)] \n               (if (== (count chunk) n)\n               \t (reverse (rest (reverse chunk)))\n                 chunk))))","problem":41,"user":"51424c61e4b0b50abeb46b33"},{"code":"(fn [seq n]\n  (keep-indexed #(if (> (rem (inc %1) n) 0) %2) seq))","problem":41,"user":"5073de20e4b054001656acca"},{"problem":41,"code":"(fn [s n]\n  (loop [s1 s s2 []]\n    (if (< (count s1) n)\n      (into s2 s1)\n      (recur (nthrest s1 n) (into s2 (butlast (take n s1)))))))","user":"54cad59ee4b057c6fda3a26e"},{"code":"(fn [xs n] (map first (filter #(not= (mod (inc (second %)) n) 0) (map vector xs (range)))))","problem":41,"user":"513d121fe4b0e544971636a2"},{"problem":41,"code":"(fn [nums n]\n  (loop [xs nums result []]\n    (if (empty? xs) result\n      (recur (drop n xs) (into [] (concat result (take (dec n) xs)))))))","user":"52cf1e25e4b07d0d72b2739c"},{"problem":41,"code":"#(loop [values %1 counter 1 result '()]\n   (if (empty? values)\n     (reverse result)\n     (if (= 0 (mod counter %2))\n       (recur (rest values) 1 result)\n       (recur (rest values) (inc counter) (conj result (first values))))))","user":"5989ee61e4b021a7a535fed7"},{"code":"(fn foo\n  ([list x] (foo list x x))\n  ([list x initx]\n    (if (empty? list)\n      list\n      (if (= x 1)\n        (foo (rest list) initx initx)\n        (cons (first list) (foo (rest list) (- x 1) initx))))))","problem":41,"user":"4eb66737535d7eef3080736b"},{"problem":41,"code":"(fn [%1 %2]\n (if (= 0 (mod (count %1) %2)) \n    (flatten (map pop (map vec (partition-all %2 %1))))\n    (sort(conj(flatten (map pop (map vec (partition-all %2 %1))))(peek %1)))\n))","user":"58dd21a9e4b0a4d5acaab6b3"},{"code":"(fn __ [s x]\n  (let [length (count s)]\n    (if (< length x)\n      s\n      (flatten (list (take (dec x) s)\n                     (__ (drop x s) x))))))","problem":41,"user":"53415755e4b00652c8746ecd"},{"problem":41,"code":"(fn [seq n]\n  (map #(nth seq %) \n       (filter #(> (mod (inc %) n) 0)\n               (range 0 (count seq)))))","user":"541df619e4b01498b1a71a87"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (> (mod (inc %1) n) 0) %2) coll))","user":"541ad1c1e4b01498b1a71a5c"},{"problem":41,"code":"(fn drop-every [lst n]\n    \"Using Partition\"\n    (->> (partition-all n lst)\n         (map (partial take (dec n)))\n         (flatten)))","user":"50a3bf08e4b0ceace084d495"},{"code":"(fn [s n]\n  (mapcat #(if (= (count %) n) (drop-last %) %)\n          (partition n n nil s)))","problem":41,"user":"53134005e4b08068f379ed07"},{"problem":41,"code":"(fn [xs n]\n   (keep-indexed \n     #(if (not (zero? (mod (inc %) n))) %2) \n     xs))","user":"540e17c3e4b0addc1aec6719"},{"code":"(fn [xs n]\n  (map first\n       (filter second \n               (map (fn [x y] [x (not (zero? (rem y n)))]) \n                    xs \n                    (drop 1 (range)))\n               )))","problem":41,"user":"4ea365e2535d7eef308072c5"},{"problem":41,"code":"(fn [lst n]\n   (let [lstAux (range 1 (inc (count lst)))]\n     (filter #(if true? %) (map #(if (== 0 (mod %1 n)) false %2) lstAux lst))))","user":"57f81524e4b0d3187e900913"},{"code":"(fn dropEvery [lis nume]\r\n(loop [llista lis\r\n      nlis '()]\r\n  (if (empty? llista)\r\n      nlis\r\n      (recur (drop nume llista) (concat nlis (take (dec nume) llista)))\r\n\r\n  )\r\n)\r\n)","problem":41,"user":"4dadca03c9a9d6ed4199dc57"},{"problem":41,"code":"#(->> %1\n      (partition-all (- %2 1) %2)\n      (apply concat))","user":"55627de1e4b0c656e3ff17d9"},{"problem":41,"code":"(fn [sq n]\n  (apply concat (partition-all (dec n) n sq))\n  \n  )","user":"60436423e4b02d28681c77a3"},{"code":"(fn [xs n]\n  (map first\n    (remove (fn [[x i]] (= 0 (mod i n)))\n      (map vector xs (iterate inc 1)))))","problem":41,"user":"4f107e0e535d64f60314641c"},{"problem":41,"code":"(fn [c n] (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) c))","user":"56347285e4b0bfe05bf117bc"},{"code":"(fn [sequence nth]\n  (loop [in sequence, counter nth, out []]\n    (if (empty? in)\n      out\n      (if (= 1 counter)\n        (recur (rest in) nth out)\n        (recur (rest in) (dec counter) (conj out (first in)))))))","problem":41,"user":"4ea4fe1f535d7eef308072cf"},{"problem":41,"code":"#(keep-indexed (fn [index item] (when-not (= 0 (rem (inc index) %2)) item)) %1)","user":"5ec6de19e4b08d0ec38692da"},{"problem":41,"code":"#(flatten (partition (- %2 1) %2 '() %1))","user":"54908cc1e4b0b312c081ff32"},{"code":"(fn deni\n  [x n]\n  (filter #(not (zero? (mod (inc (.indexOf x %)) n))) x))","problem":41,"user":"52084f75e4b01ce6bbf31dde"},{"code":"#(map first (remove (comp zero? second) (map vector %1 (cycle (range (dec %2) -1 -1)))))","problem":41,"user":"4f047177535dcb61093f6bc6"},{"problem":41,"code":"(fn\n  [items n]\n  (loop [items items\n         new-items []]\n    (if (empty? items)\n      new-items\n      (let [items-to-keep (take (dec n) items)\n            rest-of-items (rest (drop (dec n) items))]\n        (recur rest-of-items (apply conj new-items items-to-keep))))))","user":"5720a2b0e4b0c5bde472c099"},{"problem":41,"code":"(fn [li n]\n  (let [lis (partition-all n li)]\n    (mapcat #(if (= n (count %)) (butlast %) %) lis)))","user":"557a1e18e4b05c286339e09e"},{"problem":41,"code":"(fn [xs n] (let [ixs (into {} (map vec (partition 2 (interleave (range 1 (+ 1(count xs))) xs))))]\n                   (vec (vals (filter #(< 0 (mod (key %) n)) ixs)))))","user":"59ff9424e4b01bb0ae8afd24"},{"problem":41,"code":"(fn f [coll n]\n  (if (> (count coll) 0)\n    (flatten (cons (take (- n 1) coll) (f (drop n coll) n)))\n    []))","user":"533cebf1e4b085b17e897d78"},{"problem":41,"code":"(fn [coll n]\n                          (apply concat (map (fn [c] (if (= n (count c)) (drop-last c) c)) (partition-all n coll))))","user":"53ae0c50e4b047364c044471"},{"problem":41,"code":"(fn [x y]\n   (map x\n        (map dec\n             (filter\n               #(> (mod % y) 0)\n               (range 1 (inc (count x)))))))","user":"57fc5e42e4b0d3187e900997"},{"code":"(fn drop-nth [coll n]\n  (keep-indexed\n     #(if (not= (mod (inc %1) n) 0)\n        %2)\n     coll))","problem":41,"user":"530e9729e4b08068f379ecbc"},{"problem":41,"code":"#(loop [l %1\n        i 0\n        acc []]\n   (cond\n    (empty? l) acc\n    (= (inc i) %2) (recur (rest l) 0 acc)\n    :else (recur (rest l) (inc i) (conj acc (first l)))))","user":"5a1149ace4b04bbd27e6da26"},{"code":"(fn [coll n] (keep-indexed #(if-not (= 0 (mod (inc %1) n)) %2) coll))","problem":41,"user":"523b4e91e4b07becd5be21ef"},{"problem":41,"code":"(fn [c n]\r\n  (mapcat #(if (= (count %) n) (drop-last %) %) (partition-all n c))\r\n)","user":"52b434c9e4b0c58976d9ad1c"},{"problem":41,"code":"(fn [xs n] (map #(first %) (remove #(= 0 (rem (second %) n)) (map vector xs (range 1 20)))))","user":"56d91a53e4b0ea9b8538f7ee"},{"problem":41,"code":"(fn[y x](flatten (partition (- x 1) x [] y)))","user":"53f1c05ee4b0742d9025b0e1"},{"problem":41,"code":"(fn [coll n]\n    (mapcat (fn [x] (take (dec n) x)) (partition-all n coll)))","user":"5d89427ae4b0915913b1d3b5"},{"code":"(fn [coll n]\n  (keep-indexed #(if (not (zero? (rem (inc %1) n))) %2) coll))","problem":41,"user":"51780f88e4b03d69594194c9"},{"code":"(fn [coll n]\n  (->> (map-indexed (fn [idx item]\n                      [(mod (inc idx) n) item])\n                    coll)\n       (remove (fn [[idx item]] (zero? idx)))\n       (map second)))","problem":41,"user":"500d8c49e4b07ccb9a7ddb00"},{"code":"(fn [s v] (remove nil? (map-indexed #(if (zero? (rem (inc %1) v)) nil %2) s)))","problem":41,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":41,"code":"(fn d [x y] (loop [in x, out []]\n   (if (empty? in)\n     out\n     (recur (drop y in) (concat out (take (- y 1) in))))))","user":"58247423e4b051871117bec5"},{"code":"(fn [coll each] (keep-indexed (fn [index value] (if (not= 0 (mod (inc index) each)) value nil)) coll))","problem":41,"user":"4ff50604e4b0678c553fc365"},{"problem":41,"code":"(fn dropc [x n]\n  (loop [i 1 r x ret []]\n    (if (empty? r)\n      ret\n      (recur (inc i) \n             (rest r) \n             (if (= 0 (mod i n)) ret (conj ret (first r))))\n    )\n  )\n)","user":"5950f0bfe4b066ee0a44ae9f"},{"problem":41,"code":"(fn [vect n] (reduce (fn [a b] (conj a (nth vect (- b 1)))) [] (filter (fn [a] (not= (rem a n) 0)) (range 1 (+ (count vect) 1)))))","user":"5a9e3698e4b0d174b936c7fc"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n    (fn [i v]\n      (when-not (zero? (mod (inc i) n)) v))\n    coll))","user":"5484143de4b0e286459a1197"},{"problem":41,"code":"(fn [xs n]                                                                                                    \n  (->> xs                                                                                                     \n       (map list (iterate #(+ % 1) 1))                                                                        \n       (filter (fn [[a _]] (not= 0 (mod a n))))                                                                  \n       (map (fn [[_ b]] b))))","user":"541b41d1e4b01498b1a71a65"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed #(if (not= 0 (mod (+ %1 1) n)) %2) coll))","user":"544b9df2e4b0e39780006968"},{"code":"(fn [s n] (keep-indexed #(when-not (zero? (mod (inc %1) n)) %2) s))","problem":41,"user":"4daf907aedd6309eace4d17b"},{"problem":41,"code":"(fn [array size] (mapcat #(take (dec size) %) (partition-all size array)))","user":"60a9a829e4b00e9e6653c470"},{"problem":41,"code":"(fn [lst n] (loop [newLst '()\n                   x    1\n                   place 0]\n                (if (= place (count lst))\n                  (reverse newLst)\n                  (if (= x n)\n                    (recur newLst  1 (inc place))\n                    (recur (conj  newLst (nth lst place)) (inc x) (inc place))))))","user":"607e1d9de4b03d835a6eaedb"},{"code":"(fn [xs n]\n  (map second (filter \n    #(< 0 (mod (inc (first %)) n)) \n    (map-indexed vector xs))))","problem":41,"user":"4f3ae998e4b0e243712b1f1f"},{"problem":41,"code":"(fn drop-every-nth [col n] (if (empty? col) [] (concat (take (dec n) col) (drop-every-nth (drop n col) n))))","user":"5693cc39e4b0dcc4269f4108"},{"problem":41,"code":"(fn [col n]\n    (mapcat #(if (= n (count %)) (drop-last %) %) (partition-all n col)))","user":"5a00cb31e4b01bb0ae8afd36"},{"code":"(fn [s n]\n  (reduce\n    #(concat %1 (take (dec n) %2))\n    []\n    (partition n n nil s)\n  )\n)","problem":41,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":41,"code":"(fn dropevry [l n]\n  (keep-indexed (fn [i x]\n                  (if (= (mod (inc i) n) 0)\n                    nil\n                    x\n                   )\n                  )\n                l\n                )\n  )","user":"563b9acbe4b0bfe05bf11827"},{"problem":41,"code":"(fn [xs n]\n  (->> (partition-all n xs)\n       (mapcat #(take (dec n) %))))","user":"55d87324e4b0e31453f64ab4"},{"problem":41,"code":"(fn drop-nths [coll x]  \n  (if (> x (count coll))\n    coll\n    (concat (take (- x 1) coll) (drop-nths (drop x coll) x))))","user":"54980edae4b0b312c081ff79"},{"problem":41,"code":"(fn b \n  ([list num index acc]\n   (if (empty? list) (into [] (reverse acc)) \n     (if (not (= (mod index num) 0)) \n       (b (rest list) num (inc index) (cons (first list) acc))\n       (b (rest list) num (inc index) acc))))\n  ([list num] (b list num 1 [])))","user":"55af7e21e4b03311e7b732cc"},{"problem":41,"code":"#(reduce-kv                               \n        (fn [acc k v]                          \n          (if (= 0 (mod (inc k) %2))\n            acc                         \n            (conj acc v)))              \n        [] %)","user":"5de68f83e4b0986d99407f6c"},{"problem":41,"code":"(fn [coll n]\n  (apply concat (map (partial take (dec n)) (partition-all n coll)))\n  )","user":"585a7cb2e4b0f14aab7c874e"},{"problem":41,"code":"#(loop [input %\n         output []\n         index 1]\n    (cond\n      (= 1 %2) []\n      (= 0 (mod index %2))\n      (recur (next input) output (inc index))\n      (not-empty input) (recur (next input) (conj output (first input)) (inc index))\n      :else output))","user":"565b371fe4b068f2fe63dbff"},{"problem":41,"code":"(fn [lat n] (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n lat))))","user":"5e21f944e4b05b4b0151612d"},{"problem":41,"code":"#(for [[x y] (map vector (cycle (range %2)) %) :when (not= x (dec %2))] y)","user":"5523fce8e4b0882d96d091b4"},{"code":"(fn  [coll p] (flatten\n               (map drop-last\n                    (partition p p [nil] coll))))","problem":41,"user":"510fd798e4b04c71fce993dc"},{"problem":41,"code":"(fn [coll n]\n  (mapcat #(if (= n (count %)) (take (dec n) %) %)\n  \t(partition-all n coll)))","user":"593744abe4b02506e01a299b"},{"code":"(fn[l n]\n(mapcat identity\n  (for [idx (range (/ (count l) n))]\n    (take (- n 1) (drop (* idx n) l)))))","problem":41,"user":"4edf5dc6535d10e5ff6f5340"},{"problem":41,"code":"(fn [v n] (map first \n               (filter #(not= n (last %)) \n                       (map list v (cycle (range 1 (inc n))) )) ))","user":"53e2ac1ae4b036ad0777e3f3"},{"code":"(fn [col n] (mapcat (partial take (dec n)) (partition-all n col)))","problem":41,"user":"4fd81472e4b0dab7d829f38e"},{"code":"(letfn [(drop-nth [xs n]\n          (when-let [s (seq xs)]\n            (lazy-seq\n              (concat (take (dec n) s) (drop-nth (drop n s) n)))))]\n  drop-nth)","problem":41,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":41,"code":"(fn [x n]\n  (reduce (fn [coll p] (if (second p) (conj coll (first p)) coll)) []\n          (map vector x (map #(> (rem (+ % 1) n) 0) (range)))))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":41,"code":"(fn bar [coll n]\n  (loop [coll coll\n    \t c 1\n         acc []]\n    (if (seq coll)\n      (let [e (first coll)]\n        (if (= n c)\n          (recur (rest coll) 1 acc)\n          (recur (rest coll) (inc c) (conj acc e))))\n      acc)))","user":"500e6ddee4b04a05d36fcc06"},{"code":"(fn dnt [x stp]\n  (->> x\n    (map-indexed\n      (fn [one two]\n        (not= 0 (mod (inc one) stp))\n      )\n    )\n    (interleave x)\n    (apply sorted-map)\n    (filter #(val %))\n    (map #(first %))\n  )\n)","problem":41,"user":"4e3456f9535deb9a81d77f2a"},{"problem":41,"code":"(fn [s n] (keep-indexed #(if (pos? (rem (inc %1) n)) %2) s))","user":"53fddd71e4b0de5c418485eb"},{"problem":41,"code":";;(fn [s n]\n ;; (loop [i 1 s s ret []]\n ;;   (if (empty? s) ret (recur\n ;;                    \t(inc i)\n ;;                       (rest s)\n ;;                       (if(= 0 (mod i n))\n  ;;                        ret (conj ret (first s)))))))\n  \n  (fn [s n]\n    (flatten (partition-all (dec n) n s)))","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn custom [a b] (keep-indexed \n  #(if (not= 0 (mod (+ %1 1) b)) %2) a\n  ))","problem":41,"user":"5143824ae4b0b4fb4ace5f36"},{"problem":41,"code":"#(mapcat (fn [c] (take (- %2 1) c)) (partition %2 %2 [] %1))","user":"5a3c5c54e4b001c08efc0ce3"},{"code":"(fn\n  [col n]\n  (lazy-seq\n    (loop [col col, a []]\n      (if (empty? col)\n          a\n          (recur (drop n col) (concat a (take (- n 1) col)))))))","problem":41,"user":"52dfc89be4b09f7907dd1405"},{"code":"(fn [l n]\n  (for [x (map-indexed #(seq [(inc %1) %2]) l)\n        :when (> (mod (first x) n) 0)]\n    (last x)))","problem":41,"user":"4e7d2448535db169f9c796c8"},{"problem":41,"code":"(fn [xs n]\n  (let [result (map list (drop 1 (range)) xs)\n        result (filter #((complement zero?) (mod (first %) n)) result)]\n    (map second result)))","user":"574dfcb8e4b02ea11479923a"},{"code":"(fn flt [seq, n]\n  (keep-indexed (fn [index,item]\n    ( if (= ( mod index n ) ( - n 1 ) )\n      nil\n      item\n    ) ) seq) )","problem":41,"user":"5026916fe4b0c969f0b056e1"},{"code":"(fn [s n] (flatten\n  (map #(if (= n (count %)) (drop-last %) %)\n    (partition-all n s))))","problem":41,"user":"4f312c35e4b0d6649770a084"},{"problem":41,"code":"(fn [coll x]\n  (reduce-kv (fn [res k v]\n               (if (not  (= 0 (mod (inc k) x)))\n                 (conj res v)\n                 res\n                 )\n               ) [] coll))","user":"55c66ffee4b0e31453f649c2"},{"problem":41,"code":"(fn [x dropn]\n  (loop [x x n dropn acc []]\n    (if (empty? x)\n      acc\n      (if (= n 1)\n        (recur (rest x) dropn acc)\n        (recur (rest x) (dec n) (conj acc (first x)))))))","user":"551a21ece4b091ff45eda993"},{"code":"(fn [a b] (keep-indexed #(if (not (= (mod (inc %1) b) 0)) %2) a))","problem":41,"user":"4f8592e6e4b033992c121c47"},{"code":"#(mapcat concat (partition-all (dec %2) %2 %))","problem":41,"user":"4e72ac47535d5021c1a89666"},{"code":"(fn f [xs n]\n  (when (not-empty xs)\n    (concat (take (- n 1) xs)\n            (f (drop n xs) n))))","problem":41,"user":"4e68dbd5535d8ccf87e9fe8f"},{"code":"(fn [s remove_nth]\n  (remove nil?\n          (for [i (range (count s))]\n            (if-not (= (rem (inc i) remove_nth) 0) (s i))\n            )))","problem":41,"user":"515e38ace4b049add99a0538"},{"code":"(fn dropn [coll n]\n  (when-let [s (seq coll)]\n   (concat (take (- n 1) s) (dropn (nthnext s n) n))))","problem":41,"user":"536673a8e4b0243289761e76"},{"problem":41,"code":"(fn [xs n] (flatten (map (partial take (dec n)) (partition n n nil xs))))","user":"5f77a0c1e4b02876ed9fd0bb"},{"problem":41,"code":"(fn drop-nth [a-seq n]\n  (->> a-seq\n       (map-indexed #(vec [(+ % 1) %2]))\n       (remove #(= (rem (first %) n) 0))\n       (map #(last %))))","user":"547e3846e4b0c51c1f4d7302"},{"code":"(fn [m_l v] \n  (loop [r [(first m_l)]\n         i 1\n         ]\n    (if (= i (count m_l))\n      \tr\n      \t(recur (if-not (= (mod (inc i) v) 0) (conj r (m_l i)) r) (inc i)))))","problem":41,"user":"52a5a8ebe4b0c58976d9abed"},{"problem":41,"code":"(fn [coll n]\n  (filter (complement nil?) (map #(when-not (= %2 (dec n)) %1) coll (cycle (range n)))))","user":"564da567e4b0284900eef682"},{"problem":41,"code":"(fn drop-every-nth [coll n]\n   (loop [i 1 res [] coll coll]\n     (if (empty? coll)\n       res\n       (if (= i n)\n         (recur 1 res (rest coll))\n         (recur (inc i) (conj res (first coll)) (rest coll))))))","user":"59fa7fb0e4b0ca45a743a366"},{"problem":41,"code":"(fn [lst n] (filter identity (map #(and (> (rem %1 n) 0) %2) (iterate inc 1) lst)))","user":"56897739e4b0dcc4269f407d"},{"code":"(fn dropnth\r\n  ([l d] (dropnth l d 1))\r\n  ([l d n] (take (count l) (lazy-seq (if (not (= 0 (mod n d)) )\r\n         (cons (first l) (dropnth (rest l) d (+ 1 n)))\r\n         (dropnth (rest l) d (+ 1 n)))))))","problem":41,"user":"4db883e1535d1e037afb2198"},{"code":"#(reduce concat (partition (dec %2) %2 [] %1))","problem":41,"user":"4e243bcb535d04ed9115e825"},{"problem":41,"code":"(fn drop-each-nth [se n]\n  (loop [m 1\n         accum (vector)\n         se se]\n    (if (empty? se) accum\n    (if (= 0 (mod m n))\n      (recur (inc m) accum (rest se))\n      (recur (inc m) (conj accum (first se)) (rest se))))))","user":"554d386ee4b0a04f792995b8"},{"code":"(fn [col n]\n  (loop [[hd & tail] col c 1 ack []]\n    (cond\n      (nil? hd) ack\n      (= c n) (recur tail 1 ack)\n      :else (recur tail (inc c) (conj ack hd) ))))","problem":41,"user":"50a7b76de4b090657f4a5cdc"},{"problem":41,"code":"(fn drop-nth \n  ([l n] (drop-nth l n [] 1))\n  ([l n resp con]\n   (if (= l [])\n     resp\n     (if (= n con)\n       (drop-nth (rest l) n resp 1)\n       (drop-nth (rest l) n (conj resp (first l)) (inc con))))))","user":"574f1c24e4b02ea114799255"},{"problem":41,"code":"(fn drop-nth [xs n]\n  (mapcat (partial take (dec n)) (partition-all n xs)))","user":"53b85932e4b047364c0444db"},{"problem":41,"code":"(fn dropn\n  ([lst n]          (dropn lst '() n 1))\n  ([lst result n i] (if (empty? lst)\n                      result\n                      (if (= n i)\n                        (dropn (rest lst) result n 1)\n                        (dropn (rest lst) (concat result (list (first lst))) n (inc i))))))","user":"53ddd44be4b0d874e779ae2e"},{"code":"(fn rec [lst n]\n  (if (empty? lst)\n    []\n\t(concat (take (- n 1) lst)\n    \t      (rec (drop n lst) n))))","problem":41,"user":"52cc09c1e4b07d0d72b27356"},{"problem":41,"code":"(fn drop-every-nth [s n]\n  (->> (range 1 (inc (count s)))\n       (filter #(not= 0 (rem % n)))\n       (map #(nth s (dec %)))))","user":"5b15811ee4b0cc2b61a3be6f"},{"code":"(fn drop-nth [coll n]\n  (if (> n (count coll))\n    coll\n    (concat (take (dec n) coll) (drop-nth (take-last (- (count coll) n) coll) n))))","problem":41,"user":"4ecdb0bb535d23f036227709"},{"problem":41,"code":"(fn [s n] (filter identity\n                  (map-indexed #(when (not= (mod (+ %1 1) n) 0) %2) s)))","user":"57a9e274e4b0b8559636fc5d"},{"problem":41,"code":"(fn [x n]\n  (let [cnt (count x)\n        rng (range 1 (inc cnt))]\n    (mapv x (map dec (filter #(not= 0 (rem % n)) rng)))))","user":"59234753e4b0a390037439ef"},{"problem":41,"code":"(fn [seq n]\n   (mapcat #(take (dec n) %) (partition-all n seq)))","user":"55b54ecbe4b01b9910ae2987"},{"code":"(fn [xs x] (vec (filter #(> (rem (+ (.indexOf xs %) 1) x) 0) xs)))","problem":41,"user":"501d52a8e4b066e56b9d0b20"},{"code":"(fn [els n]\n  (loop [elements els\n         b 1\n         res []]\n    (cond \n     (empty? elements) res\n     (= n b) (recur (rest elements) 1 res)\n     :else (recur (rest elements) (inc b) (conj res (first elements))))))","problem":41,"user":"5154fa3fe4b0179c5115f4e6"},{"code":"#(flatten (map \n           (fn [s] (if \n                     (= (count s) %2) (butlast s) s)) \n             (partition-all %2 %1)\n             ))","problem":41,"user":"5259a16ee4b0cb4875a45ce1"},{"problem":41,"code":"(fn dropn\n  ([xs n]\n   (dropn xs n n []))\n  ([xs n nn acc]\n   (if (empty? xs) \n     acc\n     (if (= 1 nn)\n       (dropn (rest xs) n n acc)\n       (dropn (rest xs) n (- nn 1) (conj acc (first xs))))))\n  )","user":"5c1840eae4b01240ff5671eb"},{"code":"(fn [col nth]\n   (concat\n    (flatten (map #(drop-last %) (partition nth col)))\n    (take-last (rem (count col) nth) col)\n   )\n)","problem":41,"user":"515e8ce2e4b049add99a053d"},{"problem":41,"code":"(fn [coll n] (filter identity (flatten (partition (- n 1) n nil coll))))","user":"56466fb1e4b0284900eef613"},{"problem":41,"code":"(fn [coll x]\n  (mapcat #(if (= x (count %)) (butlast %) %) (partition-all x coll)))","user":"53f2370ee4b0742d9025b0e7"},{"code":"#(keep-indexed (fn [i x] (if (= 0 (mod (inc i) %2)) nil x)) %1)","problem":41,"user":"534efe66e4b084c2834f4ac1"},{"problem":41,"code":"(fn [l n]\n  (apply vector (flatten (map\n                          (fn [x] (if (= (count x) n) (drop-last x) x))\n                          (partition-all n l)))))","user":"53fc88e7e4b0de5c418485be"},{"code":"(fn [lst skip] (mapcat #(take (dec skip) %) (partition-all skip lst)))","problem":41,"user":"4ec1619b535dfed6da9c6dab"},{"problem":41,"code":"(fn f[coll n] (let [s (seq coll)] (if s (concat (take (dec n) coll) (f (nthrest coll n) n)))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":41,"code":"(fn [sq n]\n  (reduce (fn [acc [i cur]]\n            (if (zero? (mod i n))\n              acc\n              (conj acc cur)))\n          []\n          (map-indexed (fn [i el] [(inc i) el]) sq)))","user":"5d431c77e4b07c84aa5ae68f"},{"problem":41,"code":"(fn [coll n] (vec (keep-indexed #(when (pos? (mod (inc %1) n)) %2) coll)))","user":"552356fae4b0882d96d091af"},{"code":"(fn [c n]\n  (loop [ret [] coll c]\n    (if (empty? coll)\n      ret\n      (recur (concat ret (take (dec n) coll))\n        (drop n coll)))))","problem":41,"user":"4fd2e5d8e4b04c3a95aa0427"},{"code":"(fn [coll x]\n  (keep-indexed #(if (> (mod (inc %1) x) 0) %2 nil) coll))","problem":41,"user":"4ebb20c0535dfed6da9c6d6f"},{"problem":41,"code":"(fn [col n] (keep-indexed #(if (not= (mod (inc %) n) 0) %2) col))","user":"51dfb9e2e4b01188f0627531"},{"code":"(fn [seq m]\n    (loop [i seq c 1 s []]\n      (if (empty? i)\n        s\n        (recur (rest i)\n               (inc c)\n               (if (= 0 (mod c m))\n                 s\n                 (conj s (first i))\n                 )))))","problem":41,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"problem":41,"code":"(fn [s n]\n          (flatten (partition-all (dec n) n s)))","user":"54b13dbce4b09f271ff37d1c"},{"problem":41,"code":"(fn [v x]\n   (loop [v v\n          nv []\n          c 1]\n     (if (empty? v)\n       nv\n       (recur (rest v)(\n                       if (= c x)\n                        nv\n                        (conj nv (first v)))\n              (if (= c x)\n                1\n                (inc c))))))","user":"5e7bb000e4b085ba37836e1d"},{"problem":41,"code":";(fn [coll n] \n;  (first\n;   (reduce (fn [[acc c] x] (let [cn (+ c 1)\n;                                 accn (if (zero? (mod c n)) acc (conj acc x))]\n;                                 [accn cn]))\n;           [[] 1]\n;           coll)))\n\n(fn [coll n] \n (keep-indexed \n   (fn [index item] \n     (when (pos? (mod (inc index) n))\n      item))\n  coll))","user":"5e18bd30e4b0dc95940084fa"},{"problem":41,"code":"(fn removeNth\n  ([list n]\n   (removeNth list (dec n) [] (dec n))\n  )\n  ([list n res x]\n   (if (empty? list)\n     res\n     (if (= (first list) (nth list n 0))\n       (recur (rest list) x res x)\n       (recur (rest list) (dec n) (conj res (first list)) x)\n      )\n    )\n  )\n)","user":"556be3dce4b09a3098a524f7"},{"code":"(fn mydrop [coll n]\n  (mapcat #(take (- n 1) %) (partition-all n coll)))","problem":41,"user":"5344a0efe4b084c2834f4a2d"},{"code":"(fn a [col n] (keep-indexed #(if-not(= 0 (mod (+ %1 1) n)) %2) col))","problem":41,"user":"527a8eb7e4b03e8d9a4a755f"},{"code":"(fn [xs n]\n  (for [x (map-indexed (fn [idx itm] [idx itm]) xs)\n        :let [idx (inc (first x)) itm (last x)]\n        :when (not (= 0 (mod idx n)))]\n        itm))","problem":41,"user":"52e276d9e4b09f7907dd1436"},{"problem":41,"code":"(fn [coll n]\n  (let [m (dec n) \n        step (fn step [i coll]\n               (lazy-seq\n                 (when-let [s (seq coll)]\n                   (if (pos? i)\n                     (cons (first s) (step (dec i) (rest s)))\n                     (step m (rest s))))))]\n    (step m coll)))","user":"4eb70649535d7eef30807373"},{"code":"(fn [lst N]\n  (loop [l lst counter 1 result []]\n    (if (empty? l)\n      result\n      (recur\n        (rest l)\n        (if (= counter N) 1 (inc counter))\n        (if (not (= counter N))\n          (conj result (first l))\n          result)))))","problem":41,"user":"4e117dea535d04ed9115e7c9"},{"problem":41,"code":"(fn\n  [xs n]\n  (reduce (fn\n            [acc i]\n            (println acc i)\n            (if (= (rem (last i) n ) 0)\n              acc\n              (conj acc (first i))))\n          []\n          (map (fn [x y] (vector x y)) xs (range 1 (inc (count xs))) )))","user":"5e1c24f4e4b0dc959400852d"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed #(when (not= (dec n) (mod %1 n)) %2)\n                xs))","user":"524ac3d1e4b09eba1c0223a0"},{"problem":41,"code":"(fn [col n] (vec (keep-indexed (fn [idx v] (cond (< idx (dec n)) v (not= 0 (mod (inc idx) n)) v :else nil)) col)))","user":"5d6c3f91e4b04d129b00f2af"},{"problem":41,"code":"(fn [sq v] (mapcat #(if (= (count %) v) (drop-last %) %) (partition-all v sq)))","user":"57db2369e4b0bd073c20241f"},{"problem":41,"code":"#(flatten (map (fn [x] (if (= 0 (mod (count x) %2)) (drop-last x) x)) (partition-all %2 %1)))","user":"5df54584e4b03c219ef1a38f"},{"problem":41,"code":"(fn [c d] (keep-indexed #(when (not= (mod (inc %1) d) 0) %2) c))","user":"544673c0e4b032a45b8693b0"},{"problem":41,"code":"(fn [xs n] (flatten (map #(if (= (count %) n) (butlast %) %) (partition-all n xs))))","user":"5c6748f0e4b0fca0c16226b6"},{"problem":41,"code":"(fn my-drop-every [col n] (when col (lazy-cat (take (dec n) col) (my-drop-every (nthnext col n) n))))","user":"592518e8e4b072a2710fce67"},{"code":"(fn drop-every-nth [coll n]\n  (keep-indexed (fn [x v] (if (= 0 (mod (+ 1 x) n)) nil v)) coll))","problem":41,"user":"4e7f51eb535db966e863cc3f"},{"problem":41,"code":"(fn [s n]\n  (for [i (range (count s))\n        :when (not= (mod (inc i) n) 0)\n        :let [e (nth s i)]]\n    e))","user":"53bd6fcfe4b0d9a98559a6d0"},{"code":"(fn dropnth [coll n]\n  (let [s (take (dec n) coll)]\n    (if (seq s)\n      (flatten [s (dropnth (drop n coll) n) ])\n      ())))","problem":41,"user":"51852961e4b0da5a5be3babb"},{"problem":41,"code":"(fn [items interval]\n  (loop [n interval\n         xs items\n         acc []]\n        (cond \n              (empty? xs) acc\n              (= 1 n) (recur interval (rest xs) acc)\n              :else (recur (dec n) (rest xs) (conj acc (first xs) ))\n          )\n  )\n)","user":"5aba34c5e4b073f1774426a3"},{"problem":41,"code":"(fn drop-nth [s n]\n  (apply concat (map #(if (= (count %) n)\n                        (butlast %)\n                        %) (partition n n nil s)\n                     )\n         )\n  )","user":"5f6adf5ee4b02876ed9fd049"},{"code":"(fn [coll n]\n  (flatten (map #(take (dec n) %) (partition-all n coll))))","problem":41,"user":"50052fd0e4b0678c553fc45d"},{"problem":41,"code":"(fn [coll n]\n   (flatten (map #(take (- n 1) % ) (partition-all n coll)\n                 ))\n   )","user":"55e9842ae4b0121d4835fda1"},{"code":"(fn f\n  ([l n] (f l n n []))\n  ([[l & ls] n c a]\n   (if l\n     (if (= 1 c)\n       (f ls n n a)\n       (f ls n (dec c) (conj a l)))\n     a)))","problem":41,"user":"52753740e4b03e8d9a4a74c1"},{"problem":41,"code":"(fn my-drop [xs num]\n  (loop [index 0\n         origin xs\n         target []]\n    (if (empty? origin)\n      target\n      (recur (inc index)\n       \t\t (rest origin)\n             (if (= 0 (rem (inc index) num))\n               target\n               (conj target (first origin)))))))","user":"58fed70de4b0438e51c2cfdd"},{"code":"(fn [a b] (vec (keep-indexed #(if (not= 0 (mod (inc %1) b)) %2) a))\r\n   )","problem":41,"user":"510a6bece4b06956752d35af"},{"code":"(fn [s n]\n  (flatten (concat (partition (- n 1) n nil s))))","problem":41,"user":"523361d8e4b0f0b72fabf405"},{"problem":41,"code":"(fn [coll idx]\n  (letfn [(nth-item? [item-idx idx]\n            (zero? (rem (inc item-idx) idx)))]\n\t(keep-indexed #(if (not (nth-item? %1 idx))\n                     %2)\n                  coll)))","user":"56442758e4b0018b46ad8c0a"},{"problem":41,"code":"(fn [s skip] (reduce concat (map #(take (dec skip) %) (partition-all skip s))))","user":"4f041de1535dcb61093f6ba5"},{"problem":41,"code":"(fn dropnth [lst i]\n    (loop [lst lst\n           lst1 '[]\n           counter 1]\n    (if (empty? lst)\n        lst1\n        (if (= counter i)\n            (recur (rest lst) lst1 1)\n            (recur (rest lst) (conj lst1 (first lst)) (inc counter))))\n        ))","user":"5f84f110e4b0375e81f54e79"},{"code":"#(mapcat (fn [el] (if (= (count el) %2) (butlast el) el)) (partition-all %2 %))","problem":41,"user":"52bdf6bde4b07a9af579230d"},{"problem":41,"code":"(fn [s n] (flatten (map #(take (- n 1) %) (partition n n [] s))))","user":"5441f5e8e4b032a45b869375"},{"code":"(fn [l c]\n  (flatten (map #(take (dec c) %) (partition-all c l))))","problem":41,"user":"4dd0e8f7535da60f04a96e57"},{"code":"(fn drop-nth [aSeq n]\n            (loop [remainder aSeq, size (dec n), answer []]\n               (let [[bSeq theRest] (split-at size remainder)]\n                    (if (seq bSeq)\n                       (recur (rest theRest) size (concat answer bSeq))\n                       answer ))))","problem":41,"user":"4e463703535dc968683fc4b2"},{"code":"(fn [l v] (flatten  (map drop-last (partition v v [ :pad] l))))","problem":41,"user":"4f614976e4b0defedf855fbb"},{"code":"(fn [col nth] \n   (loop [c col result []]\n     (if (empty? c)\n       result\n       (let [new-result (concat result (take (dec nth) c))\n             new-col (drop nth c)] \n         (recur new-col new-result)))))","problem":41,"user":"530b8580e4b02e82168697cc"},{"problem":41,"code":";;(fn drop-nth\n;;  ([xs n]\n;;   (drop-nth [] 1 n xs))\n;;  ([s i n xs]\n;;   (if (empty? xs)\n;;     s\n;;     (if (= i n)\n;;       (recur s 1 n (rest xs))\n;;       (recur (conj s (first xs)) (inc i) n (rest xs))))))\n\n#(keep-indexed (fn [i v] (when-not (zero? (rem (+ 1 i) %2)) v)) %1)","user":"5922f8a9e4b026ae3852128f"},{"problem":41,"code":"(fn [sq n]\n   (->> sq\n        (partition-all n)\n        (mapcat #(take (dec n) %))))","user":"563772a9e4b0bfe05bf117d7"},{"code":"(fn [lst n]\n(for [\n  [idx v]\n  (keep-indexed (fn [i el] [i el]) lst)\n  :when (not (= 0 (rem (inc idx) n)))]\n v))","problem":41,"user":"50c9ece0e4b0a409464667d8"},{"problem":41,"code":"(fn nthItem [ x y ]\n  (loop [ in x n (- y 1) c 0 out [] ]\n    (cond\n     (empty? in) out\n     (= n c) (recur (rest in) n 0 out)\n     :else (recur (rest in) n (+ c 1) (conj out (first in))))))","user":"56942b5fe4b0dcc4269f411c"},{"code":"(fn [lst v]\n  ((fn dent1 [x y w z]\n     (cond (empty? x) z\n           (= 0 y) (dent1 (rest x) w w z)\n           :else (dent1 (rest x) (dec y) w (conj z (first x))))) \n   lst (- v 1) (- v 1) []))","problem":41,"user":"5099283ce4b0cae2931060af"},{"code":"(fn [coll d]\n  (loop [i 1 acc [] orig coll]\n    (if (empty? orig)\n      acc\n      (let [accfn (if (not= (mod i d) 0) #(conj % (first orig)) identity)]\n        (recur (inc i) (accfn acc) (rest orig))))))","problem":41,"user":"51a768e0e4b0da5f497bde84"},{"problem":41,"code":"(fn [coll n]\n   (apply concat (map butlast (partition n n [nil] coll))))","user":"569f7bc2e4b0542e1f8d1494"},{"problem":41,"code":"(fn drop-every-nth [xs n]\n  (into (empty xs) (mapcat drop-last (partition n n [nil] xs))))","user":"55fb58b2e4b0f488688e0661"},{"problem":41,"code":"(fn [a b]\n  (flatten\n   (map\n    #(if (= (count %) b)\n       (drop-last %)\n       %)\n    (partition-all b a))))","user":"5bf0aefde4b0a6d31fed215a"},{"problem":41,"code":"(fn [p1 p2]\n  (concat (mapcat #(drop-last %)\n          (partition p2 p1))\n          (take-last \n            (rem (count p1) p2) \n            p1)))","user":"5bcff1dce4b0e9689409ee32"},{"code":"(fn [s n] (remove nil? (map-indexed #(if (not= (mod (inc %) n) 0) %2) s)))","problem":41,"user":"520e32a2e4b066f3ea161c93"},{"problem":41,"code":"(fn [coll n]\n  (flatten (concat\n    (map #(drop-last %) (partition n coll))\n    (take-last (rem (count coll) n) coll)\n    )))","user":"5ec25800e4b00a66d4a9529b"},{"problem":41,"code":"(fn [a n]\n   (loop [x a\n          y n\n          r []]\n     (if (empty? x)\n       r\n       (recur (rest x) (if (zero? (dec y)) n (dec y)) (if (= 0 (dec y))\n                                 r\n                                 (conj r (first x)))))))","user":"56171eade4b06b1bb2182a0c"},{"problem":41,"code":"(fn [xs n]\n    (let [indexed (map #(vector %1 %2) xs (rest (range)))]\n      (map first (filter (fn [[item index]]\n                          ((complement zero?) (mod index n))) indexed))))","user":"53c3397be4b00fb29b221279"},{"problem":41,"code":"(fn drop-nth [s n]\n  (loop [s s\n         result []]\n    (if (not-empty s)      \n      (recur (drop n s)\n              (concat result (take (- n 1) s))\n                      )\n      result)))","user":"561eb82fe4b064ca9f4b16c7"},{"problem":41,"code":"(fn [vetor index]\n  (loop [atual vetor\n         novo '()\n         i 1]\n    (if (empty? atual)\n      (reverse novo)\n      (if (not= (mod i index) 0)\n        (recur (rest atual) (conj novo (first atual)) (inc i))\n        (recur (rest atual) novo (inc i))))))","user":"58a0ac0de4b02bd94d917e9c"},{"code":"(fn [s n] (keep-indexed #(when (pos? (mod (inc %) n)) %2) s))","problem":41,"user":"4fb54e50e4b081705acca2bb"},{"problem":41,"code":"(fn [coll x]\n  (reverse (loop\n          [coll coll\n          num 1\n          x x\n          acc (empty coll)]\n      (if (empty? coll)\n        acc\n        (recur (rest coll) (inc num) x (if (= (mod num x) 0)\n                                         acc\n                                         (cons (first coll) acc)))))))","user":"5613a96ae4b05f002753dfa4"},{"problem":41,"code":"(fn drop-nth\n  [collection n]\n  (loop [index 1\n         c collection\n         result []]\n    (if (empty? c)\n      result\n      (if (= (mod index n) 0)\n        (recur (inc index) (rest c) result)\n        (recur (inc index) (rest c) (conj result (first c)))))))","user":"57d0cd58e4b0bd073c20235e"},{"problem":41,"code":"(fn [sq n] (keep-indexed #(when (not= (dec n) (mod %1 n)) %2) sq))","user":"5d046f7ce4b0cc9c915881d5"},{"problem":41,"code":"(fn dropper [coll n] (if (empty? coll)\n                         (empty coll)\n                         (concat (take (dec n) coll) (dropper (drop n coll) n))))","user":"548af5b5e4b0e286459a11f8"},{"code":"(fn [l n] (second (reduce (fn [[x y] it] (if (= 0 (rem x n)) [(inc x) y] [(inc x) (conj y it)])) [1 []] l)))","problem":41,"user":"53410c24e4b00652c8746eca"},{"problem":41,"code":"#(if (some (fn [temp] (= temp %2)) %1)\n   (remove (fn [n] (= (mod n %2) 0)) %1)\n   (map first (partition %2 %1)))","user":"5a9a12d6e4b0d174b936c7b7"},{"problem":41,"code":"(fn [s n] (loop [res []\n                rem-s s\n                counter 1]\n           (if (empty? rem-s)\n             res\n             (recur (if (not (= counter n))\n                      (into res [(first rem-s)])\n                      res) (next rem-s) (if (= counter n)\n                            1\n                            (inc counter))))))","user":"5b445421e4b02d533a91bc40"},{"problem":41,"code":"(fn [list n] (\n  keep-indexed #(if (not= (mod %1 n) (dec n)) %2) \n  list))","user":"5669eb9ae4b04acd4f672e02"},{"code":"#(reduce concat (partition-all (dec %2) %2 %1))","problem":41,"user":"51cbaf14e4b08d8387cbedda"},{"problem":41,"code":"#(loop [x %1 y %2 r [] i 1]\n\t\t (cond \n\t\t    (empty? x) r\n\t\t    (= y i) (recur (rest x) y r 1)\n\t\t   :else (recur (rest x) y (conj r (first x)) (inc i)  )))","user":"55ec04c4e4b0121d4835fdc1"},{"code":";(fn [x y]\n;  (mapcat #(if (= y (count %)) (butlast %) %) (partition-all y x)))\n\n(fn [x y]\n  (mapcat #(take (dec y) %) (partition-all y x)))","problem":41,"user":"4f07c8c3535dcb61093f6c2d"},{"problem":41,"code":";;(fn [coll n] (vec (reduce #(concat %1 (if (zero? (rem %2 n)) nil [%2])) '() coll)))\n#(vec (flatten (partition-all (- %2 1) %2 %)))","user":"582290b5e4b04b46fc4b0fa0"},{"code":"(fn [seqn x]\n  (mapcat (partial take (dec x))\n          (partition-all x seqn)))","problem":41,"user":"51c611c4e4b03a28d42333bf"},{"code":"#(keep-indexed\n  (fn [index _]\n    (if-not (zero? (mod (inc index) %2))\n        _)) %)","problem":41,"user":"4fbef9a6e4b081705acca316"},{"code":"(fn [s x] (flatten (map #(if (> x (count %)) % (butlast %)) (partition-all x s))))","problem":41,"user":"500854c4e4b028e089d3518c"},{"code":"(fn [i j] (map last (filter #(not= (mod (inc (first %)) j) 0) (map-indexed vector i))))","problem":41,"user":"5238ca2de4b0d705d026eef6"},{"problem":41,"code":"(fn DropEveryNthItem [s n]\n  (loop [s s\n         r []]\n    (if (< (count s) n)\n      (concat r s)\n      (recur (drop n s)\n             (concat r\n                     (butlast (take n s)))))))","user":"53b88e6ee4b047364c0444de"},{"code":"(fn drop-nth [xs n]\n   (flatten (map drop-last (partition n n [nil] xs))))","problem":41,"user":"517a025ce4b01aacecbecbe6"},{"code":"#(flatten (map (fn [lst] (take (dec %2) lst)) (partition %2 %2 [] %1)))","problem":41,"user":"52570aeae4b0541d1855ba42"},{"code":"(fn dropeverynth [l n]\n  (mapcat #(if (not= (mod %2 n) 0) (list %1) nil) l (range 1 (inc (count l)))))","problem":41,"user":"4e9e12b2535dbda64a6f6b92"},{"problem":41,"code":"(fn [coll n]\n  (keep-indexed\n   (fn [i item] (when-not (= (mod (inc i) n) 0) item))\n   coll))","user":"5a796f13e4b03baeef9276ba"},{"problem":41,"code":"#(let [h (- %2 1)] (loop [x (take h  %) y (drop %2 %) o []]\n   (if (< (count x) h)\n     (concat o x)\n     (recur (take h y) (drop %2 y) (concat o x)))))","user":"5562f08ae4b0c656e3ff17df"},{"code":"(fn [xs n]\n  (loop [xs xs ws '() idx 1]\n    (if (empty? xs)\n      (flatten ws)\n      (if (= (mod idx n) 0)\n        (recur (rest xs) ws (inc idx))\n        (recur (rest xs) (list* ws (first xs) '()) (inc idx))\n        ))))","problem":41,"user":"4dbe04b2535d020aff1edf56"},{"problem":41,"code":"(fn drop [x n]\n  (when x\n    (lazy-cat (take (dec n) x) (drop (nthnext x n) n))))","user":"56244b3ae4b0b951f963fc22"},{"code":"#(for [i (range (count %1)) :when (not= 0 (rem (inc i) %2))]\n  (%1 i))","problem":41,"user":"4e28120f535deb9a81d77efa"},{"code":"(fn \n  [s n]\n  (let [c (count s)\n        r (range c)]\n    (remove nil? (vec (for [i r]\n                        (if-not (= (mod i n) (- n 1)) (get s i)))))))","problem":41,"user":"52f3af46e4b05e3f0be25f14"},{"code":"(fn [s n]\n  (mapcat (fn [x]\n            (if (= (count x) n)\n              (butlast x)\n              x))\n          (partition n n nil s)))","problem":41,"user":"50d8de3fe4b01f0871336e72"},{"code":"(fn [lst n] (filter (complement nil?) (map-indexed (fn [i e] (if (= 0 (rem (inc i) n)) nil e)) lst)))","problem":41,"user":"516733fce4b079759a74a5e9"},{"code":"(fn [l n]\n  (loop [ret []\n         lst l\n         i 1]\n    (cond\n     (empty? lst) ret\n     (= (mod i n) 0) (recur ret (rest lst) (inc i))\n     :else (recur (conj ret (first lst)) (rest lst) (inc i))\n     )))","problem":41,"user":"4f192b29535d64f603146464"},{"problem":41,"code":"(fn [l n] \n  (remove nil? \n          (map #(if (= (mod %2 n) (dec n)) nil %1) l (range (count l)))\n  )\n)","user":"57873017e4b0ebec4cfb7503"},{"code":"(fn [x n] (keep-indexed (fn[i e] (if (= (rem (+ i 1) n) 0) nil e)) x))","problem":41,"user":"4e3ae7cd535deb9a81d77f4e"},{"code":"#(remove nil? (map-indexed (fn [i x] (if-not (= 0 (mod (inc i) %2)) x)) %1))","problem":41,"user":"533b9cace4b0e30313ee6cd1"},{"problem":41,"code":"#_(fn [col n]\n  (keep-indexed (fn [index value]\n                  (if-not (zero? (mod (inc index) n))\n                    value))\n                col))\n\n(fn [coll n]\n  (->> (partition-all n coll)\n       (mapcat #(take (dec n) %))))","user":"59a080e3e4b0871e7608b837"},{"code":"(fn [coll n]\n  (flatten \n    (map drop-last \n         (partition n n [nil] coll))\n    )\n  )","problem":41,"user":"51377188e4b04059df19f303"},{"code":"(fn [coll n] (flatten (map #(if (= n (count %1)) (drop-last %1) %1) (partition-all n coll))))","problem":41,"user":"4ff58b05e4b0678c553fc36b"},{"problem":41,"code":"(fn [sqnc n]\n  (loop [s1 sqnc s2 [] i 1]\n    (if (empty? s1)\n      s2\n      (recur \n        (rest s1)\n        (if (zero? (mod i n))\n          s2\n          (conj s2 (first s1))\n        )\n        (inc i)\n      )\n    )\n  )\n)","user":"55929e89e4b0604b3f94d58e"},{"problem":41,"code":"(fn [lst n] (flatten (map #(if (= (count %) n) (drop-last %) %) (partition-all n lst))))","user":"56e08e4fe4b0ca2494a0960b"},{"code":"(fn [l factor]\n  (->> l\n    ( map-indexed (fn [& args] args)) \n    ( filter (fn factors [[i v]] (not= (- factor 1) (mod i factor))))\n    ( map second )\n  )\n)","problem":41,"user":"53979a87e4b0b51d73faaef0"},{"code":"(fn dropnth [s n]\n  (let [ii (map dec (remove #(= (mod % n) 0) (range (inc (count s)))))]\n    (map (partial nth s) ii)))","problem":41,"user":"4f697a66e4b07046d9f4ef8a"},{"problem":41,"code":"(fn [x y] \n  (filter \n   (fn [z] (not (= (rem (.indexOf x z) y) (- y 1))))\n   x))","user":"560ff632e4b05f002753df66"},{"problem":41,"code":"(fn [coll i]\n (apply concat (map #(take (dec i) %) (partition-all i coll))))","user":"51c6eabde4b07ef393169e3c"},{"problem":41,"code":"(fn [s n]\n  (keep-indexed #(if (= 0 (mod (+ 1 %1) n)) nil %2) s))","user":"57af41bce4b0fbc9809a2731"},{"problem":41,"code":"(fn [coll n]\n  (loop [c coll out [] i 1]\n    (cond (empty? c) out\n          (= i n) (recur (rest c) out 1)\n          :else (recur (rest c) (conj out (first c)) (inc i)))))","user":"54a97853e4b09f271ff37cae"},{"problem":41,"code":"(fn f2 [s n]\n\t\t\t(mapcat #(take (dec n) %1) (partition-all n s)))","user":"54ff6084e4b07d26eda61d50"},{"problem":41,"code":"(fn mdropnth\n  [s n]\n  (loop [s s pos 1 result []]\n    (if (empty? s)\n      result\n      (let [[fst & rst] s]\n        (if (= pos n)\n        (recur rst 1 result)\n        (recur rst (inc pos) (conj result fst)))\n        )      \n      ))\n  )","user":"540efe2ee4b0addc1aec6724"},{"problem":41,"code":"(fn [coll n] (map first (remove #(= (second %) n) (partition 2 (interleave coll (flatten (repeat (range 1 (inc n)))))))))","user":"5680104ae4b0966858e4d8ea"},{"problem":41,"code":"(fn [coll n]\n  (loop [coll coll, c 1, res []]\n    (cond\n      (empty? coll) res\n      (= 0 (mod c n)) (recur (rest coll) (inc c) res)\n      :else (recur (rest coll) (inc c) (conj res (first coll))))))","user":"5e9f38cce4b00a66d4a9517e"},{"problem":41,"code":"(fn [xs n]\n  (remove nil? (map #(if (= 0 (mod %2 n))\n          nil\n          %1)\n       xs (iterate inc 1))))","user":"56ef077ae4b04a395b9a0459"},{"problem":41,"code":"(fn drop-every-nth-element [alist n]\n\t(map #(second %)\n\t\t(filter (fn[order-elem] (not= 0 (rem (first order-elem) n)))\n\t\t\t(map vector \n     \t\t\t (map inc (range 0 (count alist)))\n     \t\t\t alist))))","user":"5aaa2dc3e4b0d174b936c8f1"},{"code":"#(apply concat (map (fn[x] (take (dec %2) x))  (partition-all %2 %)))","problem":41,"user":"4eca40cd535d6d7199dd3703"},{"problem":41,"code":"(fn drop-nth-item\n  ([coll n] (drop-nth-item coll n 1))\n  ([coll n i]\n   (if-not (empty? coll)\n     (if (= i n)\n     (drop-nth-item (rest coll) n 1)\n     (cons (first coll) (lazy-seq (drop-nth-item (rest coll) n (inc i))))))))","user":"5eecd339e4b07c55ae4a0507"},{"problem":41,"code":"(fn drop-nth [lst n]\n  (remove nil? (map-indexed (fn [idx itm]\n                 (if (= 0 (mod (inc idx) n)) nil itm))\n               lst)))","user":"534f8c9ae4b084c2834f4acd"},{"code":"(fn [coll n]\n  (remove (set (take-nth n (nthnext coll (dec n))))\n          coll))","problem":41,"user":"5346f409e4b084c2834f4a46"},{"problem":41,"code":"(fn [coll n] (filter identity (map-indexed #(if (not= 0 (mod (inc %1) n)) %2 nil)  coll)))","user":"576b4e6be4b0a07e8fc1812b"},{"problem":41,"code":"(fn [inp-coll index]\n  (loop [coll inp-coll\n         i 0\n         res []]\n   \t(cond\n      (empty? coll) res\n      (= i (dec index)) (recur (rest coll) 0 res)\n      :else (recur (rest coll) (inc i) (conj res (first coll)) )    \n     )\n   ) \n )","user":"5fc5c303e4b02c825b0c8c1a"},{"code":"(fn [col nth] (take-nth 2 \n   (apply concat \n     (remove #(= nth (last %)) \n       (partition 2 (interleave col (cycle (range 1 (inc nth)))))))))","problem":41,"user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":41,"code":"(fn [item x] (remove #(= 0 (mod (inc (.indexOf item %)) x)) item))","user":"57f8ba80e4b0d3187e90092f"},{"code":"#(flatten (partition-all (dec%2) %2 %1))","problem":41,"user":"4ee528fb535d1385b2869d87"},{"problem":41,"code":"(fn drop-every [vect n]\n  (when vect\n    (lazy-cat (take (dec n) vect) (drop-every (nthnext vect n) n))))","user":"54117417e4b01498b1a719c5"},{"code":"(fn [x i] (filter #(not (nil? %))(map-indexed #(if (not= 0 (mod (inc %1) i)) %2 nil) x)))","problem":41,"user":"51dd9370e4b0c33a4e1da40c"},{"problem":41,"code":"(fn drop-nth [x n]\n  ;if there isn't an nth item to drop, do nothing\n  (if (> n (count x))\n    x\n  ;else, uh... well, I guess we basically have to use concat here.\n    (concat (take (dec n) x) (drop-nth (drop n x) n))))","user":"569f99cce4b0542e1f8d1497"},{"code":"(fn -drop-every [coll n]\n  (mapcat #(if (< (count %) n) % (butlast %)) (partition-all n coll)))","problem":41,"user":"4ed2a31c535d44c135fd68db"},{"problem":41,"code":"(fn jatohlagi\n  [x i]\n  (let [gtdeh (last (partition-all i x))\n        lngkp (if (= (count gtdeh) i) (drop-last gtdeh) gtdeh)\n        iyadeh (drop-last (partition-all i x))]\n    (concat (apply concat (map #(drop-last %) iyadeh)) lngkp)))","user":"581829cce4b0c0e9c07b83a9"},{"code":"#(keep-indexed (fn [i, v] (if (not= (mod (inc i) %2) 0) v)) %1)","problem":41,"user":"53820087e4b06839e8705ecf"},{"code":"(fn [a-seq n]\n  (let [helper\n        (fn helper [a-seq m]\n          (if (empty? a-seq)\n            (list)\n            (if (= m n)\n              (helper (rest a-seq) 1)\n              (cons (first a-seq) (helper (rest a-seq) (inc m))))))]\n    (helper a-seq 1)))","problem":41,"user":"52c3b3e5e4b0c2d177d620c8"},{"code":"(fn [s n]\n  (map #(get s (dec %))\n       (filter #(not= (rem % n) 0)\n               (range 1 (inc (count s))))))","problem":41,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"code":"(fn [s n] (map second (filter #(not (= (mod (first %1) n) (dec n))) (map-indexed #(list %1 %2) s))))","problem":41,"user":"4f3d83b5e4b0e243712b1f69"},{"problem":41,"code":"(fn [my-vect nth-elem]\n  (loop [new-vect (drop nth-elem my-vect)\n         acc (apply vector (take (dec nth-elem) my-vect))]\n    \t (println new-vect)\n         (if (empty? new-vect)\n           acc\n           (recur (drop nth-elem new-vect) (into acc (take (dec nth-elem) new-vect))))))","user":"5655e056e4b0f9d632dd849b"},{"code":"( fn drop [ xs step]\n  \t(flatten \n     \t( reduce \n          \t#(conj ( if ( = (count %2) step ) (drop-last 1 %2) %2) %1) `()\n          \t\t(partition step step `() xs)\n          )\n     )\n  )","problem":41,"user":"527b856fe4b03e8d9a4a758d"},{"problem":41,"code":"(fn [coll n]\n        (loop [coll coll pos n res []]\n            (if (empty? coll)\n                (reverse res)\n                (if (= pos 1)\n                    (recur (rest coll) n res)\n                    (recur (rest coll) (dec pos) (cons (first coll) res))))))","user":"58354124e4b089d5ab817cd6"},{"code":"(fn [s n] \n  (mapcat\n    (partial \n      take \n      (dec n)\n    ) \n    (partition-all \n      n \n      s\n    )\n  )\n)","problem":41,"user":"4f6fe5e4e4b07046d9f4efef"},{"code":"(fn [coll n] (apply concat (partition (dec n) n '() coll)))","problem":41,"user":"4fa39b3ee4b081705acca191"},{"code":"(fn [coll n]\n    (vec (flatten\n     (map \n       #(if (= (count %) n) (drop-last %) (identity %)) \n         (partition-all n coll)))\n  ))","problem":41,"user":"52430d3ce4b076204b44faa5"},{"problem":41,"code":"(fn [input n]\n\t(loop [to_consume input\n           counter 1\n           result []]\n      (if (empty? to_consume)\n        result\n        (if (= 0 (mod counter n))\n          (recur (rest to_consume) 1 result)\n          (recur (rest to_consume) (inc counter) (conj result (first to_consume)))))))","user":"56c12aa2e4b0839206b9d682"},{"code":"(fn [coll n]\n  (keep-indexed #(if (not= 0 (rem (inc %1) n)) %2 nil) coll))","problem":41,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":41,"code":"(fn [xs n] (keep-indexed #(if (> (mod (+ 1 %1) n) 0) %2) xs))","user":"541168dee4b01498b1a719c3"},{"problem":41,"code":"(fn [data n] (remove nil? (concat (map #(if (not (= (mod %2 n) 0)) %1) data (map inc (range (count data)))))))","user":"5a4ec4f0e4b05d388ecb6bc2"},{"problem":41,"code":"(fn myfunc [xs n]\n  (keep-indexed (fn [index item]\n                (if (not= 0 (mod (inc index) n))\n                  item\n                  nil)) xs))","user":"606aafcfe4b069485764ddf6"},{"code":"(fn [coll n]\n  (loop [nc coll acc [] cnt 1]\n    (if nc\n      (if (< cnt n)\n        (recur (next nc) (conj acc (first nc)) (inc cnt))\n        (recur (next nc) acc 1))\n      acc)))","problem":41,"user":"4f98da04e4b0dcca54ed6cf7"},{"code":"(fn drop-nth\n  [coll n]\n  (if (empty? coll)\n    '()\n    (concat (take (- n 1) coll)\n          (drop-nth (drop n coll) n))))","problem":41,"user":"51f2a491e4b0210f90e74553"},{"code":"(fn [l n] (flatten (map #(if (= n (count %)) (drop-last %) %) (partition-all n l))))","problem":41,"user":"51a417dde4b0def3c5c58688"},{"problem":41,"code":"(fn [c n]\n  (mapcat (partial take (dec n)) (partition-all n c)))","user":"56f6e541e4b08e7d20b9682a"},{"code":"(fn [coll n]\n  (keep-indexed \n    (fn [i e] \n      (when (not= 0 (rem (inc i) n)) \n        e))\n    coll))","problem":41,"user":"4e949d18535dbda64a6f6b15"},{"problem":41,"code":"(fn [coll n]\n                 (for [i (range (count coll))\n                       :when (not= 0 (rem (inc i) n))]\n                   (nth coll i)))","user":"5d4df658e4b0776584bd6f41"},{"code":"(fn  [xs n]                                                          \n    (map second (filter #(not= 0 (mod (inc (first %)) n)) (map-indexed list xs))))","problem":41,"user":"53162640e4b08068f379ed40"},{"problem":41,"code":"(fn [s n]\n  (loop [i 0, [sh & st] s, result (empty s)]\n    (cond\n      (nil? sh)\n        result\n      (= 0 (rem (inc i) n))\n        (recur (inc i), st, result)\n      :else\n        (recur (inc i), st, (conj result sh))\n      )\n    )\n  )","user":"558ee1c9e4b0277789237659"},{"code":"(fn [c d] (remove nil? (map-indexed #(if (> (rem (+ 1 %) d) 0) %2) c)))","problem":41,"user":"4e43b0d9535dc968683fc4a3"},{"problem":41,"code":"(fn [coll n]\n  (mapcat\n   #(if (= (count %) n)\n      (drop-last %)\n      %)\n   (partition-all n coll)))","user":"57e2e1bde4b0bfb2137f5a8f"},{"code":"(fn [sequ n]\n  (loop [s sequ i 1 r []]\n    (cond (empty? s)\n            r\n          (= (mod i n) 0)\n            (recur (rest s) (inc i) r)\n          :else\n            (recur (rest s) (inc i) (conj r (first s))))))","problem":41,"user":"526f9715e4b03e8d9a4a7372"},{"problem":41,"code":"(fn [ls n]\n  (reverse \n  (loop [ [x & xs] ls m (dec n) result '()]\n  (cond (nil? x) result\n        (zero? m) (recur xs (dec n) result)\n        :else (recur xs (dec m) (cons x result))))))","user":"546176e7e4b01be26fd746a2"},{"code":"(fn [s n] \n  (map second \n    (filter #(> (rem (+ (first %) 1) n) 0) \n    (map-indexed vector s))))","problem":41,"user":"4f26d6d9e4b0d6649770a007"},{"problem":41,"code":"(fn drop-nth [s n]\n\t(if (> n (count s))\n\t\ts\n\t\t(concat (take (- n 1) s) (drop-nth (drop n s) n))\n\t\t; (drop-nth (concat (take (- n 1) s) (drop n s)) (inc n))\n\n\t\t)\n\n\t)","user":"5a025edde4b01bb0ae8afd64"},{"problem":41,"code":"(fn [xs v] (remove nil? (map-indexed #(if (and (= 0 (mod (inc %1) v)) (>= (inc %1) v)) nil %2) xs)))","user":"5b72b36ce4b047b03b2036a9"},{"problem":41,"code":"(fn drop-nth-thrush [coll every]\n  (->> coll\n       (map vector (iterate inc 1))\n       (filter (fn [[n x]] (not (= (mod n every) 0))))\n       (map (fn [[_ x]] x))))","user":"55d204abe4b0e31453f64a4f"},{"problem":41,"code":"(fn [x l] (keep-indexed #(if-not (= 0 (mod (inc %) l)) %2) x))","user":"55d1a721e4b0e31453f64a47"},{"problem":41,"code":"(fn f \n  ([s c] (f s c []))\n  ([s c r] \n   (if (empty? s)\n     (flatten r)\n     (recur (drop c s) c (conj r (take (- c 1) s))))))","user":"56ab7578e4b03c432f18733d"},{"problem":41,"code":"(fn [col k] (keep-indexed #(if (pos? (mod (inc %1) k)) %2) col))","user":"548c8115e4b0e286459a120c"},{"problem":41,"code":"(fn drop-nth [coll n]\n  (letfn \n    [(not-nth [x i] (if (zero? i) [] [x]))\n     (indices [i]   (rem (+ 1 i) n))]\n    (mapcat not-nth coll (map indices (range)))))","user":"52dbd423e4b09f7907dd13c6"},{"code":"#(mapcat (fn [lst]  \n\t     (if (= (count lst) %2)\n\t       (butlast lst)\n\t       lst))\n\t     (partition-all %2 %1))","problem":41,"user":"52fe3a9de4b047fd55837039"},{"code":"(fn [coll n]\n  (remove nil? \n    (map-indexed \n      (fn [idx item] (if (= 0 (mod (inc idx) n)) nil item)) \n       coll)))","problem":41,"user":"4ffb529be4b0678c553fc3cd"},{"code":"#(flatten (partition (dec %2) %2 [] %1))","problem":41,"user":"4f3b5219e4b0e243712b1f2a"},{"code":"(fn drop-at [coll pos] \n   (loop [acc [] part coll]\n     (cond (empty? part) (flatten acc)\n           :else (recur \n                   (conj acc (take (- pos 1) part)) \n                   (next (drop (- pos 1) part))))))","problem":41,"user":"52319066e4b0e2e8de81d1e9"},{"problem":41,"code":"#(loop [n 1\n         left %1\n         res []]\n  (if (empty? left)\n    res\n    (recur\n      (+ n 1)\n      (rest left)\n      (if (= 0 (rem n %2))\n        res\n        (conj res (first left))\n      )\n    )\n  )\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":41,"code":"(fn [l n] (filter #(not= (mod (.indexOf l %) n) (dec n)) l))","user":"53f5f740e4b0db01ade6f9d8"},{"code":"(fn [xs x]\n   (filter #(not= (rem (inc (.indexOf xs %)) x) 0) xs))","problem":41,"user":"50aedb8ce4b0a40c9cfb08d4"},{"problem":41,"code":"(fn [lst n]\n\t(keep-indexed #(if (not= (dec n) (mod %1 n)) %2) lst))","user":"55ede35ce4b0121d4835fde1"},{"code":"(fn\n  [coll x]\n  (reduce concat (partition-all (- x 1) x coll)))","problem":41,"user":"52ba447ee4b07a9af57922ce"},{"code":"(fn [coll n]\n  (loop [acc [] coll coll]\n    (if (seq coll)\n      (recur (apply conj acc (take (dec n) coll)) (drop n coll))\n      acc)))","problem":41,"user":"4e521cef535d302ef430da6d"},{"problem":41,"code":"#(loop [[h & t :as c] %1\n        n (dec %2)\n        n' n\n        acc []]\n   (cond\n    (empty? c) acc\n    (zero? n') (recur t n n acc)\n    :else      (recur t n (dec n') (conj acc h))))","user":"5f665d45e4b02876ed9fd02f"},{"problem":41,"code":"(fn [mySeq n ]\n  (let [X (map vector (iterate inc 1) mySeq)\n       filtered (filter #(not= (mod (first %) n) 0) \n                        X)]\n              (for [[a b] filtered] b)\n              )\n  )","user":"55efc44ee4b066087aa9453e"},{"problem":41,"code":"(fn drop-nth [coll pos]\n  (keep-indexed\n    (fn [index item]\n      (if\n        (not= 0 (mod (inc index) pos))\n        item nil))\n    coll))","user":"5715b67fe4b07c98581c3ae1"},{"problem":41,"code":"(fn [coll x]\n  (loop [c coll\n         acc []\n         pos 1]\n    (if (empty? c)\n      acc\n      (if (= 0 (rem pos x))\n        (recur (rest c) acc (inc pos))\n        (recur (rest c) (conj acc (first c)) (inc pos))))))","user":"556a6137e4b09a3098a524e0"},{"code":"(fn drop-nth [x n]\n  (if (< (count x) n)\n      x\n      (concat (take (- n 1) x) (drop-nth (nthnext x n) n))))","problem":41,"user":"52e59ca5e4b09f7907dd1464"},{"code":"(fn [listing drop-in]\n    (flatten (vec (map-indexed (fn [idx item] (if (= (mod idx drop-in) (dec drop-in) ) () item)) listing)))\n    )","problem":41,"user":"52737333e4b03e8d9a4a747f"},{"code":"#(mapcat (fn [x i] (if-not (zero? (rem (inc i) %2)) [x]))\n           % (range))","problem":41,"user":"4ee88bfb535d93acb0a66881"},{"problem":41,"code":"(fn [x y] (keep-indexed #(if (> (rem (inc %1) y) 0) %2) x))","user":"5f06d26ae4b0cf489e8d7f53"},{"problem":41,"code":"(fn drop-nth [s n] (let [d (dec n)] (loop [i 0 list [] insert 0]\n                                       (if (>= i (count s))\n                                         list\n                                         (recur (inc i) (if (< insert d) (conj list (nth s i)) list) (if (< insert d) (inc insert) (- insert d)))\n                                         ))))","user":"58b2f085e4b0ebc645576d15"},{"code":"(fn [y z] (for [i (range (count y)) :when (not= 0 (mod (inc i) z))] (get y i)))","problem":41,"user":"51db1abae4b094966a2cd685"},{"code":"#(loop [i 0 n []]\n    (if (< i (count %1))\n      (if (not= (mod (+ i 1) %2) 0)\n        (recur (inc i) (conj n (%1 i)))\n        (recur (inc i) n)\n        ) \n      n))","problem":41,"user":"50bce014e4b0594b91591c63"},{"code":"(fn [col n] \n  (remove #(= 0 (mod (+ 1 (.indexOf col %)) n)) col))","problem":41,"user":"4fb2f9b2e4b081705acca294"},{"problem":41,"code":"(fn drop-every\n  [lst n]\n  \n  (mapcat #(take (dec n) %) (partition-all n lst)))","user":"5a99ae99e4b0d174b936c7a4"},{"code":"(fn drop-nth [alist n]\n  (for [x (range 0 (count alist))\n        :let [is-third (and (= 0 (mod (+ x 1) n))\n                        (not (= 0 (+ 1 x))))\n             ]\n        :when (not is-third)\n       ]\n    (nth alist x)))","problem":41,"user":"52d6889ae4b09f7907dd1361"},{"problem":41,"code":"(fn [elems, criteria]\n  (loop [pile elems beginning [] current 1]\n    (if (empty? pile)\n      beginning\n      (if (= current criteria)\n        (recur (rest pile) beginning 1)\n        (recur (rest pile) (conj beginning (first pile)) (+ 1 current))\n        )\n      )\n    )\n  )","user":"5776558ee4b0979f89651633"},{"problem":41,"code":"#(loop [col %\n         at %2\n         result []]\n   (if (< (count col) at)\n    (flatten (conj result col))\n    (recur (second (split-at at col))\n           at\n           (conj result (butlast (first (split-at at col)))))))","user":"5bf06734e4b0a6d31fed2153"},{"code":"(fn drop-every-nth\n  [coll n]\n  (keep-indexed #(when (pos? (rem (inc %1) n)) %2) coll))","problem":41,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":41,"code":"(fn dropn [coll n]\n  (->> (map-indexed vector coll)\n       (filter (fn [[index item]] (not (= 0 (mod (inc index) n)))))\n       (map second)))","user":"56a51f26e4b0542e1f8d14e0"},{"problem":41,"code":"(fn dropper [l x]\n  (if (< (count l) x)\n    l\n    (concat (take (dec x) l) (dropper (drop x l) x))))","user":"604f4be1e4b0b7ec0ac60ace"},{"code":"(fn [xs n] (map first \n         (filter #(not= (mod (second %) n) 0)\n          (map list xs (range 1 (inc (count xs))))\n         )))","problem":41,"user":"4dad86e0c9a9d6ed0f99dc57"},{"code":"(fn [s n] (filter (comp not nil?) (map #(if (not (zero? (mod % n))) %2) (iterate inc 1) s)))","problem":41,"user":"50ebd63ce4b04edc3377703c"},{"code":"(fn [s n] (keep-indexed #(if (not= (mod (inc %1) n) 0) %2) s))","problem":41,"user":"51f9b1d0e4b09be9c177e550"},{"problem":41,"code":"#(loop [[first-element & rest-of] %1, result [], counter 1]\n      (if (= nil first-element)\n        result\n       (if-not (= 0 (rem counter %2))\n         (recur rest-of \n                (conj result first-element) (inc counter))\n         (recur rest-of \n                        result (inc counter))         \n        )\n        ))","user":"53a26cede4b0f1fc7453882a"},{"code":"(fn drop-nth [coll n]\n  (loop [coll coll\n        counter (dec n)\n        agg []]\n    (cond\n      (empty? coll)\n        agg\n      (zero? counter)\n        (recur (rest coll)\n                (dec n)\n                agg)\n      :else\n        (recur (rest coll)\n                (dec counter)\n                (conj agg (first coll))))))","problem":41,"user":"4eda7cc3535d10e5ff6f530e"},{"problem":41,"code":"(fn [xs n] \n  (loop [out [] in xs]\n    (if (empty? in) out\n      (recur (into out (take (dec n) in)) (drop n in))      \n      )\n    ))","user":"5aeec90fe4b0cc2b61a3bc31"},{"problem":41,"code":"#(->> %1 (partition (dec %2) %2 []) (apply concat))","user":"51d55795e4b01da06753aa8f"},{"code":"#(loop [a %1 b 1 c []]\n       (if (empty? a)\n           c\n           (recur (rest a) (inc b) (if (zero? (rem b %2))\n                                       c\n                                       (conj c (first a))))))","problem":41,"user":"4ffe8193e4b0678c553fc3f4"},{"problem":41,"code":"(fn [l n]\n  (map (fn [n] (nth l (- n 1))) (filter #(not= (mod % n) 0) (take (count l) (iterate inc 1)))))","user":"5739cbe4e4b0cd1946bd107c"},{"problem":41,"code":"#(->> %1\n       (partition-all (dec %2) %2)\n       (apply concat))","user":"5e491182e4b043cd24807a46"},{"code":";#(flatten (map (partial take (dec %2)) (partition-all %2 %1)))\n#(->> (partition-all %2 %1)\n      (map (partial take (dec %2)))\n      (flatten))","problem":41,"user":"535778dee4b04ce2eb3ed27d"},{"code":"#(keep-indexed (fn [i e] (if (pos? (rem (inc i) %2)) e)) %)","problem":41,"user":"4ecc1d85535d23f0362276f8"},{"problem":41,"code":"(fn meep [a b] (if(not-empty a) (concat (take (- b 1) a) (meep (drop b a) b)) nil))","user":"53cff414e4b00fb29b221304"},{"code":"(fn\n      [seq n]\n      (remove #(= (mod (.indexOf seq %) n) \n                  (- n 1)) \n              seq))","problem":41,"user":"52d39acce4b099d49816f0c7"},{"code":"(fn [xs n] (keep-indexed #(when (pos? (mod (inc %) n)) %2) xs))","problem":41,"user":"4fae0b85e4b081705acca245"},{"code":"(fn [ar, c]\n  (keep-indexed (fn [ind, pos] \n    (if (= (mod (+ 1 ind) c) 0) nil pos))\n    ar))","problem":41,"user":"4f294c48e4b0d6649770a023"},{"problem":41,"code":"(fn drop-nth [ell n]\n  (loop [i 1, remaining ell, result []]\n    (if (empty? remaining)\n      result\n      (recur\n        (inc i)\n        (rest remaining)\n        (if (= 0 (mod i n)) result (conj result (first remaining)))))))","user":"57b99d48e4b0fbc9809a27f2"},{"problem":41,"code":"(fn [coll n]\n  (let [icoll (map-indexed vector coll)]\n    (map (fn [[_ x]] x) (filter (fn [[a b]] (not  (= (mod (inc a) n) 0))) icoll))))","user":"54055aa9e4b0addc1aec6665"},{"code":"(fn [xs n]\n  (mapcat (partial take (dec n)) (partition-all n xs)))","problem":41,"user":"4fca4c37e4b0ee37620e184f"},{"code":"(fn [col n]\n   (mapcat #(take (dec n) %)\n   (partition-all n col))\n )","problem":41,"user":"5094057fe4b097f48cc38593"},{"problem":41,"code":"#(for [[x y]\n(remove (fn [[x]] (= 0 (rem (inc x) %2))) (map-indexed vector %1))]\n  y)","user":"57d031d6e4b0bd073c202354"},{"problem":41,"code":"(fn [x n] (mapcat butlast (partition n n [1] x)))","user":"56304db8e4b073c1cf7a9be5"},{"problem":41,"code":"(fn [coll n]\n  (let [one (map vector (iterate inc 1) coll )\n        two (map #(when-not (zero? (rem  (first %) n )) (second %)) one)\n        three (remove nil? two)]\n    three))","user":"57227f10e4b0c5bde472c0cd"},{"code":"(fn [l x]\n  (let [cmpfn #(if (< (count %) x) % (butlast %))]\n  (flatten (map cmpfn (partition-all x l)))))","problem":41,"user":"5098f5d6e4b0cae2931060a4"},{"problem":41,"code":"(fn [coll n]\n  (loop [xs coll acc [] i 1]\n    (cond\n     (nil? xs) acc\n     :else (recur (next xs) (if (= 0 (mod i n)) acc (conj acc (first xs))) (inc i))\n     )\n    )\n  )","user":"561cb6cfe4b064ca9f4b169e"},{"problem":41,"code":"(fn drop-every-nth [xs n]\n  (loop [xs  xs\n         i   (dec n)\n         acc []]\n    (cond\n      (empty? xs) acc\n      (> i 0)     (recur (rest xs)\n                         (dec i)\n                         (conj acc (first xs)))\n      :else       (recur (rest xs)\n                         (dec n)\n                         acc))))","user":"5db0d470e4b0f8c104ccfc9e"},{"problem":41,"code":"(fn [seq n]\n  (loop [i 1 remain seq ans []]\n    (if (empty? remain)\n      ans\n      (if (= 0 (rem i n))\n        (recur (inc i) (rest remain) ans)\n        (recur (inc i) (rest remain) (conj ans (first remain)))\n        )\n      )\n    )\n  )","user":"5746061ae4b009280f9f2b5b"},{"problem":41,"code":"(fn [sq n]\n  (for [[i elem] (map-indexed vector sq)\n        :when (not=  (dec n) (rem i n))]\n    elem\n    )\n  )","user":"5351fca5e4b084c2834f4aec"},{"problem":41,"code":"(fn [xs n]\n  (keep-indexed #(when (< 0 (mod (inc %1) n))\n                   %2)\n                xs))","user":"5c896f46e4b048ec896c5940"},{"problem":41,"code":"#(keep-indexed (fn [index t](if (not= (rem (inc index) %2) 0) t)) %1)","user":"552f6e8ee4b076ab5578f802"},{"problem":41,"code":"#(\n loop [x 0, res []]\n (if (>= x (count %1)) res (if (zero? x) (recur (inc x) (conj res (%1 0))) (if (= 0 (mod (+ 1 x) %2)) (recur (inc x) res) (recur (inc x) (conj res (%1 x))))))\n )","user":"5e85d0bde4b09a7a73c8bbd6"},{"problem":41,"code":"(fn [seq n] (remove nil? (map-indexed #(if (= 0 (mod (inc %1) n)) nil %2) seq)))","user":"528c381ce4b0239c8a67aeb2"},{"code":"(fn [coll n]\n  (mapcat #(if (= (count %) n) (butlast %) %)\n          (partition-all n coll)))","problem":41,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":41,"code":"(fn [x y] (vec (map\n\t(apply assoc {} (interleave (vec (range (count x))) x) )\n\t(filter (fn [z] (pos? (rem (inc z) y))) (range (count x)))\n\t)))","user":"53d5d24de4b0e771c302544a"},{"problem":41,"code":"(fn [s n] (keep-indexed \n  #(if (pos? (mod (inc %1) n)) %2) s))","user":"5dde0b71e4b0948ae9d9add0"}]