[{"problem":141,"code":"(fn [trump]\n  (fn winner [cards]\n    (let [high-card (fn [suit]\n                      (->> (filter #(= suit (:suit %)) cards)\n                           (sort-by :rank)\n                           (last)))\n          lead (:suit (first cards))]\n      (or (high-card trump)\n          (high-card lead)))))","user":"530b8580e4b02e82168697cc"},{"problem":141,"code":"(fn [x] (fn [y] (reduce #(if (or (and (not= (%1 :suit) x) (= x (%2 :suit))) (and (= (%1 :suit) (%2 :suit)) (> (%2 :rank) (%1 :rank)))) %2 %1) y)))","user":"53fc8424e4b0de5c418485b3"},{"problem":141,"code":"(fn [t]\n  #(let [{T t L (-> % first :suit)} (group-by :suit %)]\n      (last (sort-by :rank (or T L)))))","user":"4e7dfab0535db169f9c796f9"},{"problem":141,"code":"(fn [t]\n            (fn [c]\n              (let [g (if (nil? t)\n                            (:suit (nth c 0))\n                            t)]\n                (reduce (fn [r x]\n                          (if (and (= g (:suit x)) (> (:rank x) (:rank r)))\n                            x\n                            r))\n                        {:rank 0} c))))","user":"5e1c3e6ee4b0dc9594008530"},{"code":"(fn euchre [trump] \n  (fn winner [cards]\n    (let [led ((first cards) :suit)\n          wins? (fn [suit c0 c1] (if (and (= suit (c0 :suit)) (not= suit (c1 :suit))) c0 nil))]\n    (reduce #(cond (nil? %) %2 \n                   (wins? trump % %2) %\n                   (wins? trump %2 %) %2\n                   (wins? led % %2) %\n                   (wins? led %2 %) %2\n                   (> (% :rank) (%2 :rank)) % \n                   :else %2) \n            nil cards))))","problem":141,"user":"50e4f4e9e4b049a987753896"},{"problem":141,"code":"(fn [trump]\n  (fn winner [cards-seq]\n    (let [order {:spade 0 :diamond 0 :club 0 :heart 0}\n          suit-order (if trump\n                       (assoc order trump 1)\n                       (assoc order (-> cards-seq first :suit) 1))]\n      (->> cards-seq\n          (sort-by (juxt #(suit-order (:suit %)) :rank))\n           last))))","user":"5cf895efe4b0b71b1d808a85"},{"code":"(fn [trump] \n    (fn wf [cards]\n      (let [trump-cards (if (nil? trump)\n                          []\n                          (filter #(= (% :suit) trump) cards))\n            win-cards (if (empty? trump-cards)\n                        (filter #(= (% :suit) (:suit (first cards)))  cards)\n                        trump-cards\n                        )\n            ]\n        \n        (first (apply sorted-set-by #(compare (:rank %2) (:rank %1) ) win-cards ))\n      )))","problem":141,"user":"50956c2be4b087f34d351ab2"},{"code":"(fn trick [t]\n\t(fn win [s]\n\t\t(let [rank-based (fn [s] (last (sort-by :rank s)))]\n\t\t\t(if t\n\t\t\t\t(let [ ft (filter #(= (:suit %) t) s)]\n\t\t\t\t\t(if (empty ft)\n\t\t\t\t\t\t(rank-based ft)\n\t\t\t\t\t\t(if (= (count ft) 1)\n\t\t\t\t\t\t\t(first ft)\n\t\t\t\t\t\t\t(rank-based ft))))\n\t\t\t\t(let [ fl (filter #(= (:suit %) ((first s) :suit)) s)]\n\t\t\t\t\t(if (= (count fl) 1)\n\t\t\t\t\t\t(first fl)\n\t\t\t\t\t\t(rank-based fl)))))))","problem":141,"user":"51c09719e4b0c9c82288293c"},{"problem":141,"code":"(fn [trump]\n    (fn [play]\n      (let [suit-lead (:suit (first play))\n            better-card (fn [{current-suit :suit current-rank :rank :as current}\n                             {maybe-suit :suit maybe-rank :rank :as maybe}]\n                          (cond (and (= current-suit maybe-suit) (> maybe-rank current-rank)) maybe\n                                (and (not= current-suit trump) (= maybe-suit trump)) maybe\n                                :else current))]\n        (reduce better-card play))))","user":"51b91b08e4b0e871ca4958f8"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (letfn [(compare-cards [trump lead a b]\n              (prn a b (:rank a) (:rank b) (compare (:rank a) (:rank b)))\n              (cond\n                (= (:suit a) (:suit b)) (compare (:rank a) (:rank b))\n                (= (:suit a) trump) 1\n                (= (:suit b) trump) -1\n                (= (:suit a) lead) 1\n                (= (:suit b) lead) -1))]\n      (let [cmp (partial compare-cards trump (:suit (first cards)))]\n        (reduce\n         (fn [card1 card2]\n           (let [res (cmp card1 card2)]\n             (cond\n               (pos? res) card1\n               (neg? res) card2\n               :else card2)))\n         cards)))))","user":"5d9c1226e4b0d3f9b434ad51"},{"code":"(fn[t]\n (fn[c]\n   (->> c\n    (group-by :suit)\n\t(sort-by #(if (= (key %) t) 1 2))\n\t(map (comp (partial sort-by :rank) second))\n\t((comp last first)))))","problem":141,"user":"52f818a6e4b047fd55836fcc"},{"problem":141,"code":"(let [suits #{:heart :diamond :spade :club},\n        card? (fn [{:keys [suit rank]}]\n                (boolean (and (suits suit)\n                              (<= 0 rank 12))))]\n    (fn trick-analyzer [trump]\n      {:pre [(or (nil? trump) (suits trump))]}\n      (fn winner\n        ;; Single-argument signature accepts one sequence.\n        ([[lead & more :as cards]]\n         {:pre [(card? lead)]     ; Defer remaining checks via reduce.\n          :post [(some #{%} cards)]}\n         (reduce winner lead more))\n\n        ;; Two-card comparison. This is what's called by `reduce`.\n        ([{suit1 :suit, rank1 :rank :as card1}\n          {suit2 :suit, rank2 :rank :as card2}]\n         {:pre [(every? card? [card1 card2])]\n          :post [ (some #{%} [card1 card2])]}\n         (cond\n           (= suit1 suit2)  {:suit suit1, :rank (max rank1 rank2)}\n           (= suit2 trump)  card2\n           :else            card1))\n\n        ;; Variadic signature.\n        ([card1 card2 & more]\n         {:pre [(card? card1)]    ; Defer remaining checks via reduce.\n          :post[(some #{%} (conj more card1 card2))]} \n         (reduce winner card1 (cons card2 more))))))","user":"4fc6305de4b0ee37620e180b"},{"problem":141,"code":"(fn winner [trump]\n  (fn [cards]\n    (let [suit (or trump (:suit (first cards)))]\n      (->> cards\n           (filter #(= (:suit %) suit))\n           (sort-by :rank >)\n           first))))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn tricky [trump]\n    (fn [cards] \n      (let [suits (group-by :suit cards)]\n        (if (and trump (suits trump)) \n            (last (sort-by :rank (suits trump)))\n            (last (sort-by :rank (suits (:suit (first cards)))))))))","problem":141,"user":"4eb0a757535d7eef3080733d"},{"code":"(fn [trump-suit]\n  (fn [cards]\n    (let [[{led-suit :suit\n            led-rank :rank} & more] cards\n          by-suit (group-by :suit cards)]\n       (if-let [trumps (by-suit trump-suit)]\n         (apply max-key :rank trumps)\n         (apply max-key :rank (by-suit led-suit))))))","problem":141,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [win (fn [c1 c2]\n                 (let [s1 (c1 :suit) s2 (c2 :suit) r1 (c1 :rank) r2 (c2 :rank)]\n                   (cond\n                    (= s1 s2) (if (> r1 r2) c1 c2)\n                    (= trump s1) c1\n                    (= trump s2) c2\n                    :else c1)))]\n      (reduce win cards))))","problem":141,"user":"514721c6e4b0d520409ed392"},{"code":"(fn winner [trump]\n  (fn [[lead & rest :as cards]]\n    (let [valid_suit? #(or (= (% :suit) trump) (= (% :suit) (lead :suit)))]\n      (apply max-key :rank (filter valid_suit?  cards)))))","problem":141,"user":"5003deb9e4b0678c553fc445"},{"code":"(fn winning-card\n  [trump]\n  (fn [cards] (let [suit (if trump trump ((first cards) :suit))]\n\t\t(loop [rank ((first cards) :rank)  cs (next cards) c (first cs)] \n\t\t\t(if c\n\t\t\t\t(if (and (= suit (c :suit)) (< rank (c :rank)))\n\t\t\t\t\t(recur (c :rank) (next cs) (fnext cs))\n\t\t\t\t\t(recur rank (next cs) (fnext cs)))\n\t\t\t\t{:suit suit :rank rank})))))","problem":141,"user":"4f047542535dcb61093f6bc7"},{"problem":141,"code":"(fn [trump]\n  (let [order {:spade 4 :club 3 :heart 2 :diamond 1}]\n    (fn [cards]\n      (let [re-order (if trump\n                       (assoc order trump 5)\n                       order)]\n        (last (sort-by (juxt (fn [c] (re-order (:suit c))) :rank) cards))))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":141,"code":"(fn [trump]\n  (letfn [(card-score [card trump led]\n            (+ (:rank card)\n               (if (= led (:suit card)) 13 0)\n               (if (= trump (:suit card)) 14 0)))\n          (max-card [card1 card2 trump led]\n            (if (> (card-score card1 trump led)\n                   (card-score card2 trump led))\n              card1\n              card2))]\n    (fn [cards]\n      (let [first-card (first cards)\n            led        (:suit first-card)]\n        (reduce (fn [highest card]\n                  (max-card card highest trump led))\n                first-card\n                (rest cards))))))","user":"55586905e4b0deb715856e2b"},{"problem":141,"code":"(fn return-winner\n  [trump-suit]\n  (fn [cards]\n    (let [lead-suit (or (and trump-suit (:suit (first (trump-suit (group-by :suit cards)))))\n                        (:suit (first cards)))]\n      (last (sort-by :rank (filter (fn [x] (= (:suit x) lead-suit)) cards))))))","user":"559fb147e4b0acc240e314ea"},{"problem":141,"code":"(fn card-game [trump-suit]\n  (fn [cards]\n    (let [leading-suit (-> cards first :suit)\n          card-comp (comparator (fn [{suit-1 :suit rank-1 :rank} {suit-2 :suit rank-2 :rank}]\n                                      (if (not= suit-1 suit-2)\n                                        (or (= trump-suit suit-1) (= leading-suit suit-1))\n                                        (> rank-1 rank-2))))]\n      (->> cards\n           (sort card-comp)\n           first))))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn [trump-suit]\n  (fn [cards]\n    (let [led-suit-bonus #(if (= (:suit (first cards)) (:suit %)) 100 0)\n          trump-bonus #(if (= trump-suit (:suit %)) 1000 0)\n          score #(+ (:rank %) (led-suit-bonus %) (trump-bonus %))]\n      (first (sort-by score > cards)))))","problem":141,"user":"50d93c53e4b0fd36a4b89223"},{"problem":141,"code":"(fn winner [trump] \n  (fn [cards]\n    (let [rankcard (fn [lead-suite card]\n                     (cond (= (:suit card) trump) (+ (:rank card) 12)\n                           (= (:suit card) lead-suite) (:rank card) \n                           :else 0\n                     ))\n           highcard (reduce \n                      (fn [acc card] (if (> (rankcard (:lead acc)  card) (:rank acc)) \n                                             {:lead (:lead acc) :rank (rankcard (:lead acc) card) :card card} acc))  \n                      {:lead (:suit (first cards)) :rank 0 :card nil} \n                      cards)]\n      (:card highcard)\n      )\n    )\n  )","user":"5592bf9fe4b0c79f6e1db933"},{"problem":141,"code":"(fn\n  [trump-suit]\n  (fn [cards]\n    (let [lead-suit-bonus {(:suit (first cards)) 20}\n          bonuses (if trump-suit\n                    (assoc lead-suit-bonus trump-suit 40)\n                    lead-suit-bonus)]\n      (first (sort-by (fn [{:keys [suit rank]}]\n                        (- (+ (or (suit bonuses) 0)\n                              rank)))\n                      cards)))))","user":"52951156e4b02ebb4ef7501b"},{"code":"(fn [trump]\n  (fn [v]\n    (let [suit (or trump (:suit (first v)))]\n      {:suit suit\n       :rank (->> v\n                  (filter #(= suit (:suit %)))\n                  (map :rank)\n                  (apply max))})))","problem":141,"user":"4fc7db47e4b0ee37620e182a"},{"code":"(fn [t] (fn [c] (reduce #(if (= (% :suit) (%2 :suit)) (if (> (% :rank) (%2 :rank)) % %2) (if (= (%2 :suit) t) %2 %)) (first c) (rest c))))","problem":141,"user":"4eb13d60535d7eef3080733f"},{"problem":141,"code":"(fn [t]\n (fn [h] (let [s (some identity [t (:suit (first h))])] \n   (apply max-key :rank (filter #(= s (:suit %)) h)))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":141,"code":"(fn [trump] (fn [c] (reduce #(if (and trump (= trump (:suit %2)) (not= (:suit %) (:suit %2))) %2 \n                               (if (and (= (:suit %) (:suit %2)) (> (:rank %2) (:rank %))) %2 %)) (first c) (rest c))))","user":"5c41db45e4b08cd430848ece"},{"problem":141,"code":"(fn [suit]\n    (fn [cards]\n      (apply max-key #(if (= (% :suit) (or suit (:suit (first cards))))\n                        (+ (:rank %) 20)\n                        (:rank %)) cards)\n      ))","user":"56f7ecdfe4b08e7d20b96834"},{"problem":141,"code":"(fn tricky-card-game [trump]\n  (fn winner [cards]\n    (letfn [(highest-rank [suit]\n              (comment \"This will be nil when suit is nil\")\n              (->> cards\n                   (filter #(= (:suit %) suit))\n                   (sort-by :rank)\n                   last))]\n      (let [lead (first cards)\n            highest-lead (highest-rank (:suit lead))\n            highest-trump (highest-rank trump)]\n        (or highest-trump highest-lead)))))","user":"5f300f28e4b033932238a682"},{"code":"(fn [t]\n  (fn [c]\n    (let [l (->> c first :suit)\n          m {t 10000 (if (not= l t) l) 100}]\n      (apply max-key #(* (% :rank) (get m (% :suit) 1)) c))))","problem":141,"user":"5054bc87e4b0b1b9d1860eb0"},{"code":"(fn [trump]\n       (fn [cards]\n         (->> (filter (comp #{(or trump (:suit (first cards)))} :suit) cards)\n              (apply max-key :rank))))","problem":141,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"(fn [trump]\n  (fn [c]\n    (let [lead (:suit (first c))\n          cmp (fn [{s1 :suit r1 :rank} {s2 :suit r2 :rank}]\n                (let [sorder (assoc {lead 1} trump 2)\n                      sc (compare (sorder s1 0) (sorder s2 0))]\n                  (if (zero? sc) (compare r1 r2) sc)))]\n      (last (sort cmp c)))))","problem":141,"user":"50705072e4b07bd6ad9b9f27"},{"code":"(fn [trump]\n  (fn [cards]\n      (letfn [(score [c] (+ (:rank c) (condp = (:suit c)\n                                        trump (* 54 54)\n                                        (:suit (first cards)) 54\n                                        0)))]\n        (last (sort-by score cards)))))","problem":141,"user":"4dddff47535d08e6dec9fdd4"},{"code":"(fn tricky [trump]\n  (let [f (fn [cards]\n            (reduce (fn [x y]\n                      (cond\n                       (and (= (x :suit) (y :suit))) (if (> (x :rank) (y :rank)) x y)\n                       (= (y :suit) trump) y\n                       :else x\n                       )) cards )\n            ) ]f))","problem":141,"user":"52140b53e4b0961f15ac4d7e"},{"code":"(fn [p]\n  (fn [[h & t]]\n    (last (sort-by\n      #(condp = (:suit %1)\n          (:suit h) (+ 10 (:rank %1))\n          p (+ 20 (:rank %1))\n          (:rank %1))\n      (cons h t)))\n    ))","problem":141,"user":"52593207e4b0cb4875a45cd3"},{"problem":141,"code":"(fn [t]\n  (fn [xs]\n    (letfn [(pt [{s :suit, r :rank}]\n                (if (= s t)\n                  (+ r 13)\n                  (if (= s (:suit (first xs))) r 0)))]\n      (last (sort-by pt xs)))))","user":"553e0b70e4b0a04f792994e8"},{"problem":141,"code":"(fn card-trick-winner [trump-suit]\n  (fn [[leading-card & others :as cards]]\n    (let [trump (if trump-suit\n                  trump-suit\n                  (:suit leading-card))]\n      (->> (group-by :suit cards)\n           trump\n           (sort-by :rank)\n           last))))","user":"54848141e4b0e286459a119e"},{"code":"(fn [trump]\n  (fn [cards]                                        \n    (let [suit (:suit (first cards))] \n      (reduce \n        (fn [cur other]                          \n          (if (and (or (= (:suit cur) (:suit other))\n                       (= trump (:suit other))) \n                   (< (:rank cur) (:rank other)))\n            other cur))                        \n        cards))))","problem":141,"user":"4e513758535dc968683fc4f3"},{"code":"(fn [base-trump]\n  (fn [trick]\n    (let\n      [trump  (or base-trump (:suit (first trick)))\n       trumps (filter #(-> % :suit (= trump)) trick)]\n      (first (sort-by :rank > (if (empty? trumps) trick trumps))))))","problem":141,"user":"51307b84e4b08c712d3fae39"},{"problem":141,"code":"(fn [trump]\n    (fn [[lead & others :as cards] ]\n      (let [win (or (some #{trump} (map :suit cards))\n                    (:suit lead))]\n        (first (sort-by :rank > (filter #(= win (:suit %)) cards))))))","user":"544e9022e4b0e3978000698b"},{"code":"(fn [trump]\n  (fn [cards]\n    (reduce\n      (fn [{sr :suit rr :rank :as cr} {si :suit ri :rank :as ci}]\n        (let [cmp (assoc {} trump 2 sr 1)\n              cmp1 (- (cmp si 0) (cmp sr 0))]\n          (cond\n            (> cmp1 0) ci\n            (= cmp1 0) (if (> ri rr) ci cr)\n            :else cr)\n      ))\n      cards\n  )))","problem":141,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn [t]\n  (fn [v]\n    (apply max-key :rank\n      (filter \n        #(= (or t (:suit (first v))) \n            (:suit %)) \n        v))))","problem":141,"user":"4f01c938535dcb61093f6a39"},{"problem":141,"code":"(fn wining-hand [trump-suit]\n  (fn [hands]\n    (let [first-suit (:suit (first hands))\n          best-rank (fn [hand1 hand2]\n                        (if (> (:rank hand1) (:rank hand2))\n                          hand1\n                          hand2))\n          best-hand (fn [hand1 hand2]\n                      (if (= (:suit hand1) (:suit hand2))\n                             (best-rank hand1 hand2)\n                             (if (= (:suit hand1) trump-suit)\n                               hand1\n                               (if (= (:suit hand2) trump-suit)\n                                 hand2\n                                 (if (= (:suit hand1) first-suit)\n                                   hand1\n                                   (if (= (:suit hand2) first-suit)\n                                     hand2\n                                     (best-rank hand1 hand2)))))))\n          best-of-hands (fn [current-hand other-hands]\n                          (if (empty? other-hands)\n                            current-hand\n                            (recur (best-hand current-hand (first other-hands))\n                                           (rest other-hands))))]\n      (best-of-hands (first hands) (rest hands)))))","user":"51b920bfe4b0e871ca4958f9"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (reduce \n      (fn [{suit1 :suit, rank1 :rank :as card1} {suit2 :suit, rank2 :rank :as card2}]\n        (cond\n          (= suit1 suit2)  {:suit suit1, :rank (max rank1 rank2)}\n          (= suit2 trump)  card2\n          :else            card1))\n       cards)))","user":"51e58e02e4b0efabf93c02d0"},{"code":"(fn [trump]\n  (fn [cards]\n    (letfn [(beats-card [a b]\n      (or\n        (nil? b)\n        (and (= (a :suit) trump) (not= (b :suit) trump))\n        (and (= (a :suit) (b :suit)) (> (a :rank) (b :rank)))))]\n    (loop [cards_ cards winner nil]\n      (if (empty? cards_) winner\n        (recur (next cards_)\n          (if (beats-card (first cards_) winner)\n            (first cards_)\n            winner)))))))","problem":141,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn   p141 [s]\n   (let [card-suits-order {:spade 4 :diamond 3 :heart 2 :club 1 }]\n   (fn [col] (if (nil? s)\n               (last (sort-by  (fn [v] [ (get card-suits-order (:suit v) )  (:rank v)  ]  )  col))\n               (last (sort-by  (fn [v] [ (if (= s (:suit v )) 1 -1 )  (:rank v)  ]        )  col))\n\n               ) ) ))","problem":141,"user":"4ec5bec6535d6d7199dd36b3"},{"code":"(fn [s]\n  (fn [cs]\n    (let [ts (if (nil? s) (:suit (first cs)) s)]\n      (apply max-key :rank (filter #(= ts (:suit %)) cs)))))","problem":141,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":141,"code":"(fn [trump]\n  (fn [trick]\n    (let [t (if (nil? trump) (:suit (first trick)) trump)]\n      (->> trick\n           (filter #(= (:suit %) t))\n           (sort-by :rank)\n           reverse\n           first))))","user":"541d3c0fe4b01498b1a71a7e"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [lead  (:suit (first cards))\n          cards (sort-by :rank > cards)]\n      (first (filter #(= (:suit %) (or trump lead)) cards)))))","problem":141,"user":"50586354e4b06522596eba78"},{"code":"(fn [tr] \n  #(last \n    (sort-by \n      (fn [{s :suit r :rank}]\n        (vector \n          (= s tr) \n          (= s (:suit (first %)))\n          r))\n      %)))","problem":141,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":141,"code":"(fn winner-fn [trump-suit]\n  (fn [cards]\n    (reduce (fn [card-a card-b]\n              (if (or (and trump-suit\n                           (= (:suit card-b)\n                              trump-suit)\n                           (or (not= (:suit card-a)\n                                     trump-suit)\n                               (> (:rank card-b)\n                                  (:rank card-a))))\n                      (and (= (:suit card-a)\n                              (:suit card-b))\n                           (> (:rank card-b)\n                              (:rank card-a))))\n                card-b\n                card-a))\n            cards)))","user":"50e3e108e4b01912b3285c48"},{"problem":141,"code":"(fn trick-card-game [trump-suit]\n  (fn [cards]\n    (let [trump-suit (if (nil? trump-suit) ((first cards) :suit) trump-suit)]\n         (apply max-key :rank (filter #(= trump-suit (% :suit)) cards)))))","user":"559b55d6e4b066d22e731f54"},{"problem":141,"code":"(fn [trump]\n  (fn winner [s]\n    (reduce\n      #(last (sort-by :rank (first (remove nil? ((juxt (or trump (:suit %1)) (:suit %1)) (group-by :suit [%1 %2]))))))\n      s)))","user":"554680cbe4b0a04f7929953e"},{"code":"(fn tricky [t]\n  (fn [s]\n      (let [suit (or t (:suit (first s)))]\n        (->> s (filter (fn [x] (= suit (:suit x)))) (sort-by :rank) last))))","problem":141,"user":"50783762e4b0fc74642bff67"},{"problem":141,"code":"(fn [trump]\n  (fn [s]\n    (reduce (fn [a b]\n              (let [asuit (:suit a)\n                    arank (:rank a)\n                    bsuit (:suit b)\n                    brank (:rank b)]\n                (cond\n                 (and (= bsuit trump) (not= asuit trump)) b\n                 (and (= asuit bsuit) (> brank arank)) b\n                 :else a\n                )\n              )\n            )\n            s\n    )\n  )\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":141,"code":"; My solution below worked in my dev environment but had a class cast exception here\n;(fn [trump]\n;  (fn [plays]\n;    (reduce #(let [[x1 y1] (vals %) [x2 y2] (vals %2)]\n;               (if (and (< y1 y2) (or (= x1 x2) (= x2 trump)))\n;                 %2\n;                 %)\n;               ) plays)\n;    ))\n\n\n(fn [trump]\n  (fn [hand]\n    (let [by-suit (group-by :suit hand)\n          win-suit (or trump (:suit (first hand)))]\n      (last (sort-by :rank (win-suit by-suit))))))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":141,"code":"(fn [t]\n  (fn [d]\n   (reduce\n    #(let [s1 (:suit %1) s2 (:suit %2)]\n       (cond (= s1 s2) (max-key :rank %1 %2)\n             (= s1 t) %1\n             (= s2 t) %2\n             :else %1))\n    d)))","user":"4eb5750a535d7eef30807366"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [lead (:suit (first cards))\n          suit (if (and trump (some #(= trump (:suit %)) cards)) trump lead)]\n      (->> cards\n           (filter #(= suit (:suit %)))\n           (sort-by :rank >)\n           first))))","user":"5f3abcc4e4b004f08c61c52b"},{"code":"(fn [trump] (fn [cs] (loop [best (first cs) cards (next cs) led ((first cs) :suit)]\n                       (if (nil? cards) best\n                         (let [bs (best :suit) br (best :rank) bestTrump (= trump (best :suit)) nextCard (first cards)\n                               nextSuit (nextCard :suit) nextRank (nextCard :rank) nextTrump (= trump nextSuit)]\n                           (cond\n                            (and bestTrump (not nextTrump)) (recur best (next cards) led)\n                            (and bestTrump nextTrump) (if (> br nextRank) (recur best (next cards) led) (recur nextCard (next cards) led))\n                            (and nextTrump) (recur nextCard (next cards) led)\n                            (not= led nextSuit) (recur best (next cards) led)\n                            (> br nextRank) (recur best (next cards) led)\n                            :else (recur nextCard (next cards) led)\n                           )\n                         )\n                       )\n                     )\n              )\n)","problem":141,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":141,"code":"(fn [ts]\n  (fn winner [cards]\n    (let [win-suit (if (and ts (some #(= ts (:suit %)) cards))\n                     ts\n                     (-> cards first :suit))]\n      (->> cards\n           (filter #(= win-suit (:suit %)))\n           (apply max-key :rank)))))","user":"4ec1b090535dfed6da9c6db5"},{"problem":141,"code":"(fn [t] (fn [cl] (first (let [l (sort #(> (:rank %1) (:rank %2)) cl) t' (or t (:suit (first cl)))] (sort #(and (= (:suit %1) t') (not (= (:suit %2) t'))) l)))))","user":"53aaaf7ae4b047364c044444"},{"code":"(fn [t]\n           #(reduce (fn [a b]\n                           (if (= (:suit a) (:suit b))\n                               (if (> (:rank a) (:rank b)) a b)\n                               (if (= t (:suit b)) b a)))\n                       %))","problem":141,"user":"4f34eb87e4b0e243712b1eba"},{"problem":141,"code":"(fn tcg\n  [trump]\n  (letfn [(reducer [hcard ncard]\n            (if (or\n                 (and\n                  (= (:suit ncard) trump)\n                  (not= (:suit hcard) trump))\n                 (and\n                  (= (:suit ncard) (:suit hcard))\n                  (> (:rank ncard) (:rank hcard))))\n              ncard\n              hcard)\n            )]\n    (fn [[fcard & rtrick]] (reduce reducer fcard rtrick))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"code":"(fn [trump]\n  (fn [trick]\n    (let [\n      lead  (:suit (first trick))\n      suit-val #(cond (= trump %) 0\n                      (= lead %)  1\n                      :else       2)\n      suit-cmp #(compare (suit-val %1) (suit-val %2))\n      rank-cmp #(- (compare %1 %2))\n      cmp (fn [{asuit :suit, arank :rank},\n               {bsuit :suit, brank :rank}]\n        (let [suit-order (suit-cmp asuit bsuit)]\n          (if (zero? suit-order)\n            (rank-cmp arank brank)\n            suit-order)))\n    ] (first (sort cmp trick)))))","problem":141,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"(fn [suit]\r\n  (fn [ms]\r\n    (let [suit (if (nil? suit) ((first ms) :suit) suit)]\r\n      (last (sort-by (fn [{r :rank}] (if (= 1 r) 14 r)) (filter (fn [{s :suit}] (= s suit)) ms))))))","problem":141,"user":"4f954dbce4b0dcca54ed6ccd"},{"problem":141,"code":"(fn me2 [arg]\n\n\t(let [\n\t\t\tno-trump (fn  [my-map map-seq]\n\n\t\t\t\t\t\t(let [res1 (filter #(= (my-map :suit) (% :suit))  map-seq)]\n\n\t\t\t\t\t\t\t(if (<= (count res1) 1)\n\t\t\t\t\t\t\t\tmy-map\n\t\t\t\t\t\t\t\t(reduce #(if (> (%1 :rank)  (%2 :rank))  %1  %2) res1)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t))\n\n\n\t\t\twith-trump (fn  [trump map-seq]\n\n\t\t\t\t\t\t\t(let [res (filter #(= trump (% :suit)) map-seq) ]\n\n\t\t\t\t\t\t\t\t(if (nil? res) \n\t\t\t\t\t\t\t\t\t(no-trump (first map-seq) (rest map-seq))\n\t\t\t\t\t\t\t\t\t(no-trump (first res) (rest res))\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t)\n\n\n\t\t\twinner (fn  [trump map-seq]\n\n\t\t\t\t\t\t(if (nil? trump)\n\t\t \t\t\t\t\t(no-trump (first map-seq) map-seq)\t\n\t\t \t\t\t\t\t(with-trump trump map-seq) \n\t\t\t\t\t\t)\n\n\t\t\t\t\t)]\n\n\t\t\t(partial winner arg)\n\t)\n\n)","user":"55897fe2e4b059ccff29b205"},{"problem":141,"code":"(fn [trump]\n    (fn [cs]\n      (let\n        [\n          trump'\n          (if (nil? trump)\n            (:suit (first cs))\n            trump\n          )\n        ]\n        (last\n          (sort\n            (fn [a b]\n              (cond\n                ; same suit\n                (= (:suit a) (:suit b))\n                (compare (:rank a) (:rank b))\n\n                ; a is trump\n                (= (:suit a) trump')\n                1\n\n                ; b is trump\n                (= (:suit b) trump')\n                -1\n\n                ; both no trump\n                :else\n                (compare (:rank a) (:rank b))\n              )\n            )\n            cs\n          )\n        )\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn tricky-card-games [trump]\r\n    (fn [l]\r\n      (let [lead-suit (get (first l) :suit)]\r\n        (apply max-key #(get % :rank)\r\n               (if (nil? trump)\r\n                 (filter (fn [x] (= lead-suit (get x :suit))) l)\r\n                 (filter (fn [x] (or (= trump (get x :suit))\r\n                                     (= lead-suit (get x :suit)))) l))))))","problem":141,"user":"4f039524535dcb61093f6b2c"},{"problem":141,"code":"(letfn [                                                                                                                                                \n    (card-value [card trump lead]                                                                                               \n        (condp = (card :suit)                                                                                                                           \n            trump (+ (card :rank) 100)                                                                                          \n            lead  (card :rank)                                                                                                                          \n                  0))                                                                                                           \n    (winner [trump]                                                                                                                                     \n        (fn [cards]                                                                                                             \n            (let [lead ((first cards) :suit)]                                                                                                           \n                (->> cards                                                                                                      \n                    (sort #(< (card-value %2 trump lead) (card-value  %1 trump lead)))                                                                  \n                    (first)))))]                                                                                                \n            winner)","user":"558b50d5e4b027778923762b"},{"code":"(fn [trump]\n  (let [wwithsuit (fn [suit cards]\n                    (let [sortedcards (group-by :suit cards)\n                          right-suit (if (nil? (sortedcards suit))\n                                       (:suit (first cards))\n                                       suit)\n                          wrank (apply max (map :rank (sortedcards right-suit)))]\n                      {:suit right-suit :rank wrank}))]\n    (fn [cards] (wwithsuit trump cards))))","problem":141,"user":"5133e51ae4b0d7a043de8cf6"},{"code":"(fn handy [trump]\n  (letfn [(better-card [card1 card2]\n            (cond\n             (= (:suit card1) (:suit card2))\n             (if (> (:rank card1) (:rank card2)) card1 card2)\n\n             (= (:suit card2) trump)\n             card2\n\n             :else\n             card1))]\n    (fn [cards]\n      (reduce better-card cards))))","problem":141,"user":"4f0d093b535d0136e6c22313"},{"problem":141,"code":"(fn __ [trump]\n  (let [score (fn [first-suit]\n                (fn [card] (+ (:rank card)\n                              (cond (= (:suit card) trump) 20\n                                    (= (:suit card) first-suit) 0\n                                    :else -20))))]\n    (fn [cards]\n      (let [first-suit (->> cards first :suit)]\n        (->> cards\n             (map (score first-suit))\n             (interleave cards)\n             (partition 2)\n             (sort-by second >)\n             first\n             first)))))","user":"536d83cee4b0fc7073fd6e5e"},{"problem":141,"code":"(fn [rump];take in the rump\n  (fn winner [cards];return a function to return the winner\n    (let [localRump (if (nil? rump) ((first cards) :suit) rump)];if no rump suit is specified, then the first card defines the trump suit\n      (reduce (fn [card1 card2] ; a simple rule\n                (if (= (card1 :suit) (card2 :suit)) {:suit (card1 :suit), :rank (max (card1 :rank) (card2 :rank))} ;same suit, higher rank wins\n                  card1));or rump wins\n              {:suit localRump, :rank 0} cards))))","user":"556c70dae4b09a3098a524fd"},{"code":"(letfn [(suit [card] (get card :suit))\n        (rank [card] (get card :rank))\n        (card-value-fn [trump led]\n          (fn [card]\n            (let [maximum-rank 12]\n              (if (= (suit card) trump)\n                (+ maximum-rank (rank card))                \n                (if (= (suit card) (suit led))\n                  (rank card)\n                  0)))))]\n(fn [trump]\n  (fn [cards]\n    (let [led (first cards)\n          card-value (card-value-fn trump led)]\n      (last\n       (sort-by card-value cards))))))","problem":141,"user":"5014754de4b094324338f8e5"},{"problem":141,"code":"(fn [suit]\n  (fn winner [cards]\n    (let [suit (or suit :spade)]\n      (loop [current-best (first cards)\n             cards (rest cards)]\n        (if (empty? cards) current-best\n            (recur\n             (let [card (first cards)\n                   suit-match (fn [c] (= suit (get c :suit)))]\n               (cond\n                 (and (suit-match current-best) (not (suit-match card)))\n                 current-best\n\n                 (and (not (suit-match current-best)) (suit-match card))\n                 card\n                 \n                 (or (not (or (suit-match current-best) (suit-match card)))\n                     (and (suit-match current-best) (suit-match card)))\n                 (if (> (get card :rank) (get current-best :rank))\n                   card\n                   current-best)))\n             (rest cards)))))))","user":"51b76227e4b0d906fcd71d35"},{"problem":141,"code":"(fn winner\n  [trump]\n  (fn [cards]\n    (last (sort-by :rank\n                   (if trump\n                     (filter #(= trump (:suit %)) cards)\n                     (filter #(= (:suit %) (:suit (first cards))) cards))))))","user":"4daeabf6edd6309eace4d15c"},{"code":"(fn [x]\n  (fn [cs]\n    (let [trump (if (nil? x) [] (filter #(= x (% :suit)) cs))\n          key (if (empty? trump) ((first cs) :suit) ((first trump) :suit))\n          sets (filter #(= key (% :suit)) cs)\n          ]\n      (reduce (fn [a b] (if (> (b :rank) (a :rank)) b a)) (first sets) sets))))","problem":141,"user":"4f0e995e535d0136e6c22326"},{"code":"#(fn [[f & r :as c]]\n     (last\n      (sort-by\n       :rank\n       (filter\n        (fn [x] (= (if %2 %2 (% f)) (% x)))\n        c)))) :suit","problem":141,"user":"4e65027c535d8ccf87e9fe6e"},{"code":"(fn card-games [suit]\n  (if (nil? suit)\n    (fn winner [cards]\n      ((card-games ((first cards) :suit)) cards))\n    (fn winner [cards]\n      (apply max-key\n             (fn [card]\n               (if (= (card :suit) suit)\n                 (+ 10 (card :rank))\n                 (card :rank)))\n             cards))))","problem":141,"user":"5201ada5e4b0b2e020a18f14"},{"code":"(fn [t]\n  (fn [cs]\n    (let [suit-score (assoc {t 50 } ((first cs) :suit) 25)\n          score (fn [m] (+ (or (suit-score (m :suit)) 0) (m :rank)))]\n      (reduce #(if (> (score %2) (score %1)) %2 %1) (first cs) (rest cs)))))","problem":141,"user":"504e04a4e4b078edc5f59397"},{"code":"(fn[t](fn[a](last (filter \n  #(or (= (:suit %) t) (= (:suit %) (:suit (first a)))) (sort-by :rank a)))))","problem":141,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":141,"code":"(fn [mark]\n  (fn [cols]\n    (let [f (if (nil? mark) (:suit (first cols)) mark)]\n      (last (sort-by (fn [x] (+ (:rank x) (if (= (:suit x) f) 100 0)))\n               cols)))))","user":"53664e3be4b0243289761e74"},{"problem":141,"code":"(fn tricky-card-games [trump]\n  (fn [suits]\n    (let [trump (if (contains? #{:bridge :spade :heart :club} trump) trump (:suit (first suits)))]\n      (last (sort-by :rank (filter #(= trump (:suit %)) suits))))))","user":"5693a53ee4b0dcc4269f4106"},{"problem":141,"code":"(fn [suit]\n  (fn [cards]\n    (let [suit (if (nil? suit) (:suit (first cards)) suit)] \n      (->> (filter #(= (:suit %) suit) cards)\n           (apply max-key :rank)))))","user":"5507cfd3e4b021ccfedb96ad"},{"code":"(fn [t]\n  (fn [[l & _ :as c]]\n      (->> c\n           (sort-by :rank)\n           (sort-by (comp (merge {(:suit l) 1} {t 2}) :suit))\n           (last))))","problem":141,"user":"4e6f578c535d5021c1a8961b"},{"problem":141,"code":"(fn [suit]\n  (fn [cards]\n      (->> cards\n           (filter (fn [c] (= (if suit suit (:suit (first cards))) (c :suit))))\n           (sort-by :rank)\n           (reverse)\n           (first))))","user":"60264d89e4b0d5df2af2222d"},{"code":"(fn [trump]\n  (fn [[{led :suit} :as cards]]\n    (let [suit-weight (fn [{suit :suit}]\n                       (cond (= suit led) 20 (= suit trump) 40 :else 0))\n         effective-rank (fn [card]\n                          (+ (card :rank) (suit-weight card)))\n         higher (fn [card1 card2]\n                  (if (> (effective-rank card1) (effective-rank card2))\n                    card1\n                    card2))\n         ]\n    (reduce higher cards))))","problem":141,"user":"52015698e4b0d7096e99ddba"},{"code":"#(partial\n    (fn [trump cards]\n      (let [g (group-by :suit cards)]\n        (apply max-key :rank (g trump (g (:suit (first cards)))))))\n    %)","problem":141,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":141,"code":"(fn [a]\n  (fn [t]\n    (let [f (if a a (:suit (first t)))]\n      (last (sort-by :rank (filter #(= f (:suit %)) t))))))","user":"543d5c61e4b032a45b86934d"},{"problem":141,"code":"(fn [lead]\n  (fn [cards]\n    (last (sort-by :rank\n                 ((group-by :suit cards)\n                  (or lead \n                      ((first cards) :suit)))))))","user":"5712854ce4b07c98581c3a89"},{"problem":141,"code":"(fn myf [e]\n  (if (= e nil) (fn [coll] (last (sort-by (juxt :suit :rank) coll)))\n    (fn [coll] (last (sort-by :rank (filter #(= e (:suit %)) coll))))))","user":"577c3da9e4b0c8d87281f6b9"},{"code":"(fn [trump]\n  (letfn [(winner [card1 card2]\n            (cond\n              (= (:suit card1) (:suit card2)) (if (> (:rank card1) (:rank card2)) card1 card2)\n              (= trump (:suit card2)) card2\n              :else card1))]\n    (partial reduce winner)))","problem":141,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":141,"code":"(fn [trump]\n  (fn winner [s]\n    (reduce (fn [win other]\n              (let [higher-rank (> (:rank other) (:rank win))\n                    higher-suit (and (not= trump (:suit win)) (= trump (:suit other)))\n                    same-suit (= (:suit win) (:suit other))]\n                (cond\n                  higher-suit other\n                  (and same-suit higher-rank) other\n                  :else win)))\n            s)))","user":"5317d78ee4b08068f379ed63"},{"code":"(fn [triump]\n  (fn [cards]\n    (let [lead (-> cards first :suit)]\n      (last \n        (sort-by (fn [{:keys [rank suit]}] \n                   (+ rank\n                      (if (= suit lead) 100 0)\n                      (if (= suit triump) 1000 0)))\n                 cards)))))","problem":141,"user":"4f9d53f3e4b0dcca54ed6d21"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [best (or trump (:suit (first cards)))]\n      (->>\n        cards\n        (filter #(= best (:suit %))) \n        (sort-by :rank)\n        last))))","problem":141,"user":"500aa15ee4b03d00572d2d76"},{"problem":141,"code":";; http://www.4clojure.com/problem/141\n(fn trump-fn\n  [tsuit]\n  (fn [coll]\n    (let [tsuit (if (nil? tsuit) (:suit (first coll)) tsuit)]    \n      (first (sort-by (comp - :rank) (filter #(= (:suit %) tsuit) coll))))))","user":"5c92105ce4b048ec896c59f7"},{"problem":141,"code":"(fn [t]\n  (fn [c]\n    (let [f1 (fn [a b] (= (:suit a) (:suit b)))\n          f2 (fn [a b] (> (:rank a) (:rank b)))]\n      (reduce\n       #(cond\n         (and (= t %1) (f1 %1 %2) (f2 %2 %1)) %2\n         (and (= t (:suit %2)) (not= t (:suit %1))) %2\n         (and (f1 %1 %2) (f2 %2 %1)) %2\n         :else %1)\n       c))))","user":"519136e9e4b0f8ef0be96c01"},{"code":"#(fn [c]\n  (let [trump %\n        trumped (filter (fn [e] (= (e :suit) trump)) c)\n        c (if (empty? trumped)\n            (filter (fn [e] (= (e :suit) ((first c) :suit))) c) ; if no trump or no trump played, drop everything else that the first suit led\n            trumped)] ; if trump has been played, drop everything else\n    (last (sort-by :rank c))))","problem":141,"user":"500900dee4b0144d4f561e42"},{"code":"(fn trick [ts]\n  (fn [cards]\n    (let [ls ((first cards) :suit)\n          tc (filter #(= (% :suit) ts) cards)\n          lc (filter #(= (% :suit) ls) cards)\n          sc (fn [x] (last (sort-by :rank x)))]\n      (if (empty? tc) (sc lc) (sc tc)))))","problem":141,"user":"51d96ad0e4b02ceefd94774f"},{"code":"(fn winner\n  [trump]\n  (fn [s]\n    (let [t (if (nil? trump) (get (first s) :suit) trump)]\n      (reduce (fn [r e]\n                (if (and (> (:rank e) (:rank r))\n                         (= (:suit e) t))\n                  e r))\n              (first s) (rest s)))))","problem":141,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn [t] (fn [[l :as c]]\n          (last (sort-by (juxt #(= (:suit %) t)\n                               #(= (:suit %) (:suit l))\n                               :rank) c))))","problem":141,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":141,"code":"(fn win [trump-suit]\n  (fn [args]\n    (let [effective-trump-suit (or trump-suit (:suit (first args)))]\n      (->> (filter #(= (:suit %1) effective-trump-suit) args)\n           (apply max-key :rank)))))","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":141,"code":"(fn trickfn [t]\n  (fn [c]\n    (->> c (filter #(= (if t t (:suit (first c))) (:suit %))) (sort-by :rank >) first)))","user":"575b3e9be4b02ea11479935b"},{"code":"(fn [trump]\n    (fn [c]\n      (let [lead (:suit (first c))\n            cmp (fn [{s1 :suit r1 :rank}{s2 :suit r2 :rank}]\n                  (let [sorder (assoc {lead 1} trump 2)\n                        sc (compare (sorder s1 0) (sorder s2 0))]\n                    (if (zero? sc) (compare r1 r2) sc)))]\n        (last (sort cmp c)))))","problem":141,"user":"52e3e6a8e4b09f7907dd1448"},{"code":"(fn [t]\n  (fn [s]\n    (let [suit (if t t ((first s) :suit))]\n      (first (sort-by #(% :rank) > (filter #(= (% :suit) suit) s))))))","problem":141,"user":"50acbd15e4b071b89ef26234"},{"code":"(fn [trumpt]\n  (fn [cards]\n    (let [fstcardsuit (:suit (first cards))\n          trump (if (nil? trumpt) :notsuit trumpt)\n          f (fn [acc card]\n              (if (or (= (:suit card) trump) (= (:suit card) fstcardsuit))\n                (if (and (= (:suit card) trump) (not= fstcardsuit trump))\n                  card\n                  (if (> (:rank card) (:rank acc))\n                    card\n                    acc))\n                acc))]\n      (reduce f (first cards) (rest cards)))))","problem":141,"user":"4e7f5a0b535db966e863cc41"},{"code":"(fn tricks\n  [trump]\n  (fn [[m & ms]]\n    (reduce #(if (and (or (= (:suit %) (:suit %2))\n                          (= (:suit %2) trump))\n                      (> (:rank %2) (:rank %))) %2 %)  m ms)))","problem":141,"user":"524f4256e4b0541d1855b808"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [t (if trump trump ((first cards) :suit))\n          c (filter #(= t (% :suit)) cards)]\n      (apply max-key #(% :rank) (if (empty? c) cards c)))))","problem":141,"user":"51780f88e4b03d69594194c9"},{"code":"(fn tricky [trump]\n  (fn [coll]\n    (reduce\n     #(cond\n       (= (%1 :suit) (%2 :suit)) (max-key (fn [card] (card :rank)) %1 %2)\n       (= (%1 :suit) trump) %1\n       (= (%2 :suit) trump) %2\n       :else %1\n       )\n     coll)\n    )\n  )","problem":141,"user":"52e59ca5e4b09f7907dd1464"},{"problem":141,"code":"(fn __ [trump]\n  (fn [cards]\n    (if trump\n      (first (sort #(>= (%1 :rank) (%2 :rank))\n                   (filter #(= trump (:suit %)) cards)))\n      ((__ (:suit (first cards))) cards)))\n)","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"; #{:spade :heart :diamond :club}\n(fn [s]\n  (fn [xs]\n    (->> xs\n      (filter #((if s #{s} #{(:suit (first xs))}) (:suit %)))\n      (apply max-key :rank))))","problem":141,"user":"50479524e4b0371827a27bc4"},{"problem":141,"code":"(fn [t]\n  (fn [s]\n    (last \n      (sort-by :rank\n        (filter #(= (if t t ((first s) :suit)) (% :suit)) s)))))","user":"56baa68ce4b0f26550335947"},{"problem":141,"code":"(fn tricky-card-games [trump-suit]\n  (fn [coll]\n    (last \n      (sort-by :rank \n        (get (group-by :suit coll) trump-suit\n          (get (group-by :suit coll) (:suit (first coll)) coll) \n      )))))","user":"57c0917be4b05aa3c4741c95"},{"problem":141,"code":"(fn [t]\n (fn [h]\n  (let [r :rank s :suit f first]\n   (f (sort #(> (r %1) (r %2))\n    (filter #(= (or t (s (f h))) (s %)) h))))))","user":"53973e7be4b0b51d73faaee6"},{"code":"(fn [ts]\n  (fn [trick]\n    (let [ls (:suit (first trick))\n          gs (group-by :suit trick)]\n      (apply max-key :rank (or (gs ts) (gs ls))))))","problem":141,"user":"4e8f1ac6535d65386fec2146"},{"problem":141,"code":"(fn [trump]\n  (fn [[{:keys [suit]} :as cards]]\n    (-> #(condp = (:suit %)\n           trump (- -100 (:rank %))\n           suit (- (:rank %))\n           0)\n        (sort-by cards)\n        first)))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn [t] (fn [m] \r\n      (reduce #(if (and (= (:suit %) (:suit %2)) (<= (:rank %) (:rank %2))) %2 %)\r\n        (if (nil? t) (first m)  {:rank 0 :suit t}) m)))","problem":141,"user":"4ecf1f51535d1f5ad70dba3a"},{"code":"(fn [trump]\n  (fn [[lead & following :as trick]]\n    (let [led-suit (:suit lead)\n          trumps (filter (comp #{trump} :suit) trick)\n          in-suit (filter (comp #{led-suit} :suit) trick)\n          rank (fn [sq] (sort-by :rank (comp #(* -1 %) compare) sq))]\n      (or (first (rank trumps))\n          (first (rank in-suit))\n          lead))))","problem":141,"user":"51f9527fe4b09be9c177e549"},{"problem":141,"code":"(fn [t] (fn [s]\n                   (let [x #(get % :suit)\n                         y #(get % :rank)\n                         f (filter #(= t (x %)) s)]\n                     (reduce #(if (and\n                                   (= (x %) (x %2))\n                                   (< (y %) (y %2)))\n                                %2\n                                %)\n                             (if (nil? t) s f)))))","user":"56c08696e4b060a8e693e3aa"},{"code":"(fn [t] \n  (fn [x]\n    (let [value #(if (= t (% :suit)) \n                   [ (+ 40 (% :rank)) %]\n                   (if (= ((first x) :suit) (% :suit))\n                     [(+ 20 (% :rank)) %]\n                     [(% :rank) %]))]\n      (last (apply max-key #(first %) (map value x))))))","problem":141,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn [trump]\r\n  (fn [[{suit :suit :as card} & _ :as cards]]\r\n    (->> cards\r\n        (sort-by :rank)\r\n        (reverse)\r\n        (sort-by #(get (assoc {trump 0} suit 1) (:suit %) 2))\r\n        (first))))","problem":141,"user":"50901b2ee4b0ea685a20f774"},{"problem":141,"code":"(fn\n  [trump]\n  (fn [cards]\n    (->> cards\n         (filter #(= (if (nil? trump) (:suit (first cards)) trump) (:suit %)))\n         (sort-by :rank)\n         last)))","user":"4e521cef535d302ef430da6d"},{"code":"(fn [trump]\n  (fn [s]\n    (let [[lcards tcards] (map #(filter (fn [i] (= (i :suit) %1)) s) [((first s) :suit) trump])]\n      (apply max-key :rank (if (empty? tcards) lcards tcards)))))","problem":141,"user":"4f29eb2ae4b0d6649770a037"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [trumps (filter #(= trump (:suit %)) cards)]\n      (if (empty? trumps)\n        (last (sort-by #(+ (* 13 ((:suit %)\n                                  {:club 0 :heart 1 :diamond 2 :spade 3}))\n                           (:rank %))\n                       cards))\n        (last (sort-by :rank trumps))))))","user":"54c5cc17e4b045293a27f624"},{"code":"(fn [s]\n  (fn [v]\n    (let [s (if s s (:suit (nth v 0)))]\n      (apply max-key :rank (filter #(= s (:suit %)) v)))))","problem":141,"user":"4ee9ddb8535d93acb0a66896"},{"problem":141,"code":"(fn __ [trump]\n (fn [cards]\n   (let [lead (-> cards first :suit)\n         modifier (fn [card] ((:suit card) (assoc {trump 100} lead 0) -100))\n         card->value (fn [card] (+ (modifier card) (:rank card)))]\n     (->> cards (sort-by card->value) last))))","user":"55a62092e4b0acc240e31554"},{"code":"(fn trick [trump]\n  (fn winner [cards]\n    (let [suit\n          (or (some (comp #{trump} :suit) cards)\n              (-> cards first :suit))]\n      \n      (->> cards\n           (filter (comp #{suit} :suit))\n           (apply max-key :rank)))))","problem":141,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (reduce (fn [winner new]\n              (if (nil? winner)\n                new\n                (if (= (:suit winner) (:suit new))\n                  (if (< (:rank winner) (:rank new))\n                    new\n                    winner)\n                  (if (= trump (:suit new))\n                    new\n                    winner))))\n            nil cards)))","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn [trump]\n  (fn [[primera-carta :as cartas]]\n    (let [naipe-lider (if trump trump (:suit primera-carta))]\n      (letfn [(carta-maior-rank [cartas]\n                                (when (seq cartas)\n                                  (apply max-key\n                                         #(:rank %)\n                                         cartas)))]\n        (let [maior-rank-lider (carta-maior-rank (filter #(= naipe-lider (:suit %)) cartas))]\n          (if maior-rank-lider\n            maior-rank-lider\n            (carta-maior-rank cartas)))))))","problem":141,"user":"52c8758be4b0c2d177d62135"},{"problem":141,"code":"(fn winner-with [trump]\n  (fn [cards]\n    (->> (filter #(= (:suit %)\n                     (or trump \n                         (:suit (first cards))))\n                 cards)\n         (apply max-key :rank))))","user":"54d341f7e4b0e8a36923e603"},{"problem":141,"code":"(fn [trump-suit]\n    (let [\n      trump (fn [trump-suit suit-led card]\n              (condp = (:suit card)\n               trump-suit 3\n               suit-led   2\n                          1))]\n                  \n  \n    (fn [cards]\n      (let [suit-led (:suit (first cards))]\n        (->> cards\n             (sort-by \n               (juxt #(trump trump-suit suit-led %) :rank))\n             (reverse)\n             (first))))))","user":"4fc4eb1ee4b081705acca354"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (reduce\n      #(if (or\n             (and (= (:suit %1) (:suit %2)) (> (:rank %2) (:rank %1)))\n             (and (not= (:suit %1) trump) (= (:suit %2) trump)))\n        %2\n        %1)\n      cards)))","user":"567b39b6e4b05957ce8c61a3"},{"problem":141,"code":";; first player leads the trick\n;; winner is highest card in the suit that was led\n;; if its a trump card, then trump card always wins\n\n;; if a trump is available, then filter out only trumps, then sort by value and take the highest\n;; if a trump is is not available, then just sort by value.  \n\n\n(fn [trump]\n  (fn [hand]\n    (let [by-suit (group-by :suit hand)\n          win-suit (or trump (:suit (first hand)))]\n      (last (sort-by :rank (win-suit by-suit))))))","user":"5baaae06e4b0a20761a23464"},{"code":"(fn [trump-suit]\n    (fn [cards]\n      (let [suit (:suit (first cards))\n            rank (fn [card]\n                   (cond\n                     (= suit (:suit card))\n                     (:rank card)\n                     \n                     (= trump-suit (:suit card))\n                     (+ 100 (:rank card))\n                     \n                     :else\n                     0))]\n        (last (sort-by rank cards)))))","problem":141,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":141,"code":"(fn [suit]\n  (fn [coll]\n    (reduce (fn [win card]\n              (if (nil? suit)\n                (cond\n                 (and (= (:suit win) (:suit card))\n                      (> (:rank card) (:rank win))) card\n                 :else win)\n                (cond\n                 (and (= (:suit win) (:suit card))\n                      (> (:rank card) (:rank win))) card\n                 (and (= (:suit card) suit)\n                      (not= (:suit win) suit)) card\n                 :else win)))\n            coll)))","user":"585e2e77e4b0f14aab7c87ac"},{"code":"(fn [trick-suit]\n    (let [suits [:club :diamond :heart :spade]\n          suits (if-not (nil? trick-suit)\n                  (conj (vec (remove #(= trick-suit %) suits)) trick-suit)\n                  suits)]\n     (fn [cards]\n       (last\n        (sort-by (juxt (comp #(.indexOf suits %) :suit) :rank)\n                 cards)))))","problem":141,"user":"50763574e4b0a894bb95bf3d"},{"problem":141,"code":"#(fn [[{f :suit} & _ :as t]] \n    (apply max-key (fn [{s :suit r :rank}] \n                     (+ (get {(or % f) 10} s 0)r)) t))","user":"5603c31fe4b04bb52996e1c1"},{"code":"(fn [trump]\n  (fn [cs]\n    (reduce\n     (fn [{s1 :suit r1 :rank :as c1} {s2 :suit r2 :rank :as c2}]\n       (if (= s1 s2)\n         (if (> r1 r2) c1 c2)\n         (if (= trump s2) c2 c1)))\n     cs)))","problem":141,"user":"504e13fce4b078edc5f593bc"},{"problem":141,"code":"(fn [trump]\n  (letfn [(compare [c1 c2]\n            (cond\n             (= (:suit c1)\n                (:suit c2)) (if (< (:rank c1) (:rank c2)) c2 c1)\n             (= (:suit c1) trump) c1\n             (= (:suit c2) trump) c2\n             :else                c1))]\n    (fn [cards]\n      (reduce compare cards))))","user":"541b1f25e4b01498b1a71a63"},{"problem":141,"code":"(fn [s] (fn [v] (last (if s (sort-by :rank (filter #(= s (:suit %)) v))\n                            (sort-by #(+ ({:spade 400, :club 300, :diamond 200, :heart 100} (:suit %)) (:rank %)) v)))))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":141,"code":"(fn playTricky [trump]\n  (letfn [(playHand [trump lead hand] (cond\n                                             (= (:suit hand) trump) (if (not (= (:suit lead) trump))\n                                                                      hand\n                                                                      (if (> (:rank hand) (:rank lead))\n                                                                        hand\n                                                                        lead))\n                                             (= (:suit hand) (:suit lead)) (if (> (:rank hand) (:rank lead))\n                                                                             hand\n                                                                             lead)\n\n                                             :else lead\n                                             ))]\n  (partial (fn [trump hands] (loop [lead (first hands) toPlay (rest hands)]\n                               (if (empty? toPlay)\n                                 lead\n                                 (recur (playHand trump lead (first toPlay)) (rest toPlay))\n                                 ))) trump)))","user":"56427910e4b08d4f616f5f19"},{"problem":141,"code":"(fn gen-winner [trump] \n  (fn [cards] \n    (let [suit-map (into {} [[trump 0] [((comp :suit first) cards) 1]])] \n      (->> (sort-by :rank > cards) \n           (sort-by (comp #(get suit-map % 5) :suit))\n           first))))","user":"5609d328e4b05f002753deee"},{"problem":141,"code":"(fn [s] (fn [v] (let [suit (if (or (not s) (not-any? #(= s (:suit %)) v)) (:suit (first v)) s)] {:suit suit :rank (reduce max (map :rank (filter #(= suit (:suit %)) v)))})))","user":"58987ee9e4b00487982d52d2"},{"problem":141,"code":"(fn tricky-card-game [t]\n\t(fn [cards]\n\t\t(let [trump (if (nil? t) (:suit (first cards)) t)]\n\t\t\t(last \n\t\t\t\t(sort-by :rank (filter #(= (:suit %) trump) cards))))))","user":"52e657e4e4b09f7907dd1472"},{"problem":141,"code":"(fn find-larger [tramp]\n  (fn [cards]\n    (let [fs (:suit (first cards))\n          fss (filter #(= fs (:suit %)) cards)\n          ts (filter #(= tramp (:suit %)) cards)\n          lfs (last (sort-by :rank fss))\n          lt (last (sort-by :rank ts))]\n      (or lt lfs))))","user":"4ddb696b535d02782fcbe9fa"},{"problem":141,"code":"(fn game [trump-suit]\n  (fn winner [cards]\n    (let [leading-suit (get (first cards) :suit)\n          score (fn [{:keys [rank suit]}]\n                  (+ rank (* 13\n                             (if (= suit trump-suit) 2\n                               (if (= suit leading-suit) 1\n                                 0)))))]\n      (last (sort-by score cards)))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":141,"code":"(fn [tr]\n  (fn [c] (reduce #(if (and (> (:rank %2) (:rank %1))\n                            (or\n                             (and (nil? tr) (= (:suit %2) (:suit %1)))\n                             (= (:suit %2) tr))) %2 %1) c)))","user":"53a1b5c8e4b0ca733b9744c1"},{"problem":141,"code":"(fn card-winner [trump]\n\t(fn [cards]\n\t\t(let [{lead-suit :suit} (first cards)]\n\t\t\t(first\n\t\t\t\t(concat\n\t\t\t\t\t(sort-by :rank > (filter #(= (:suit %) trump) cards))\n\t\t\t\t\t(sort-by :rank > (filter #(= (:suit %) lead-suit) cards)))))))","user":"54448e84e4b032a45b869393"},{"code":"(fn [trump-suit-default]\n  (fn [cards]\n    (let [top-card (first cards)\n          trump-suit (if trump-suit-default\n                       trump-suit-default\n                       (:suit top-card))]\n      (letfn [(trump-suit-card? [card]\n                                (= trump-suit (:suit card)))\n              (compare-rank [a b]\n                            (compare (:rank b) (:rank a)))\n              (card-comp [a b]\n                         (if (trump-suit-card? a)\n                           (if (trump-suit-card? b)\n                             (compare-rank a b)\n                             -1)\n                           (if (trump-suit-card? b)\n                             1\n                             (compare-rank a b))))]\n        (let [sorted (sort card-comp cards)]\n          (first sorted))))))","problem":141,"user":"5341b141e4b00652c8746ecf"},{"problem":141,"code":"(fn [trump]\n  (if (nil? trump)\n    (fn [ls]\n      (last (sort-by :rank \n                     (filter #(= (:suit %) \n                                 (:suit (first ls))) \n                             ls))))\n    (fn [ls]\n    (if (empty? (filter #(= (:suit %) trump) ls))\n      (last (sort-by :rank \n                     (filter #(= (:suit %) \n                                 (:suit (first ls))) \n                             ls))))\n      (last (sort-by :rank \n                     (filter #(= (:suit %) \n                                 trump) \n                             ls))))\n        \n    ))","user":"541ef7e2e4b01498b1a71a92"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [order (zipmap [trump ((first cards) :suit)] (range))]\n      (->>\n        (sort-by #(order (% :suit) 2) cards)\n        (partition-by #(order (% :suit) 2))\n        (first)\n        (sort-by #(% :rank))\n        (last)))))","problem":141,"user":"528652fbe4b0239c8a67ae14"},{"code":"(fn [trump]\n  (fn [tricks]\n    (if-let [trump-tricks (not-empty (filter #(= (:suit %) trump) tricks))]\n      (apply max-key :rank trump-tricks)\n      (apply max-key :rank (filter #(= (:suit %) (:suit (first tricks))) tricks)))))","problem":141,"user":"4e50b67b535dc968683fc4ed"},{"problem":141,"code":"(fn [suit]\n (fn [cards]\n  (last (sort-by :rank (filter #(= (or suit (:suit (first cards))) (:suit %)) cards)))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":141,"code":"#(fn [cards] \n  (let [n (group-by :suit (sort-by :rank cards)) \n        trump (if (= nil %) :none %) \n        played (:suit (first cards))]\n    (if (empty? (trump n))\n      (last (played n))\n      (last (trump n)))))","user":"5f3567d6e4b0574c87022c44"},{"problem":141,"code":"(fn myf [trump] \n  (fn [trick] \n    (first (sort (fn [x y] \n                   (or (and (= (:suit x) (:suit y)) (> (:rank x) (:rank y)))\n                       (and (not (nil? trump)) (= trump (:suit x)) (not= trump (:suit y)))\n                   )) trick))\n    ))","user":"52faec2ee4b047fd55837004"},{"problem":141,"code":"(fn [trump-suit]\n    (fn [[{lead-suit :suit} & more :as cards]]\n      (let [suit-value (assoc {trump-suit 0} lead-suit -1)\n            by-suit-and-rank (fn [{asuit :suit, arank :rank},\n                                  {bsuit :suit, brank :rank}]\n                               (compare [(suit-value asuit) arank]\n                                        [(suit-value bsuit) brank]))]\n        (last (sort by-suit-and-rank cards)))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":141,"code":"(fn [trump]\n    (fn [xs]\n      (let [t (if trump trump (:suit (first xs)))]\n        (apply max-key :rank (filter #(= (:suit %) t) xs)))\n      ))","user":"507e68abe4b085af06e3afd2"},{"code":"(fn best [trump]\n    (fn [col]\n        (reduce\n            (fn best [f s]\n                (if (= (f :suit ) (s :suit ))\n                    (last (sort-by :rank [f s]))\n                    (if (= trump (s :suit ))\n                        s\n                        f)))\n            col)))","problem":141,"user":"4f128865535d64f603146428"},{"code":"(fn [trump] (fn [s] (letfn [(ws? [c] (= (:suit c) (or trump (:suit (first s)))))]\r\n                         (last (sort-by :rank (filter ws? s))))))","problem":141,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn [trump]\n  (fn [coll]\n    (let [csuit (-> coll first :suit)\n      rank-card (fn [{:keys [suit rank]}]\n        (+ rank (condp = suit trump 200 csuit 100 0)))]\n    (apply max-key rank-card coll))))","problem":141,"user":"4effb663535dcb61093f6a2e"},{"problem":141,"code":"(fn cards-evaluate [trump]\n  (fn [cards]\n    (reduce\n     (fn [{suit1 :suit rank1 :rank :as card1} {suit2 :suit rank2 :rank :as card2}]\n       (if (not= suit2 suit1)\n         (if (= suit2 trump)\n           card2\n           card1)\n         (if (> rank1 rank2)\n           card1\n           card2)))\n     cards)))","user":"5654e024e4b0f9d632dd848d"},{"problem":141,"code":"(fn\n  [k]\n  (fn [col]\n    (let [key (if (nil? k) ((first col) :suit) k)]\n      (last (sort-by :rank (filter #(= (% :suit) key) col))))))","user":"576df252e4b0979f8965156f"},{"code":"(fn [trump]\n  (fn [trick]\n    (let [lead\n          (first trick)\n          calc-score\n          (fn [play]\n            (let [multiplier\n                  (cond \n                    (= (play :suit) (lead :suit)) 1\n                    (= (play :suit) trump) 2\n                    :else 0)]\n              (* multiplier (play :rank))))]\n      (reduce\n       (fn [winner-so-far item]\n         (if (> (calc-score item) (calc-score winner-so-far))\n                item winner-so-far))\n       lead\n       (rest trick)))))","problem":141,"user":"4f31519ae4b0d6649770a086"},{"problem":141,"code":"(fn [t]\n   (fn [c]\n      (let [s (if (nil? t) (:suit (first c)) t)]\n        (let [m (reduce max (map (fn[el] (:rank el)) (filter (fn [el] (= (:suit el) s)) c)))]\n          (first (filter (fn [el] (and (= (:suit el) s)) (= (:rank el) m)) c))\n        )\n      )\n    )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn [trump]\r\n  (fn [cards]\r\n    (let [lead ((first cards) :suit)]\r\n      (last (sort-by #(+ (condp = (% :suit) trump 100 lead 50 0) (% :rank)) cards)))))","problem":141,"user":"4f1b92d1535d64f60314647b"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [trump (or trump (:suit (first cards)))]\n      (->> cards (filter #(= trump (:suit %))) (apply max-key :rank)))))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":141,"code":"(fn [trump]\n  (let [winner (fn [cards]\n                 (let [lead-card (first cards)\n                       others (rest cards)\n                       win-suit (if (nil? trump) (:suit lead-card) trump)\n                       win-rank (first (reverse (sort (map #(:rank %) (filter #(= win-suit (:suit %)) cards)))))\n                       ]\n                   {:suit win-suit :rank win-rank}\n                   ))]\n    winner\n    )\n  )","user":"53b530c6e4b047364c0444bc"},{"code":"(fn [trump]\n  (fn [cards]\n    (first (sort-by :rank >\n                    (mapcat (fn [suit]\n                              (filter #(= (:suit %) suit) cards))\n                            [trump (:suit (first cards))])))))","problem":141,"user":"4ee3b586535d10e5ff6f5371"},{"problem":141,"code":"(fn [trump] (let [trump? (if (nil? trump) (constantly false) (fn [card] (= trump (:suit card))))]\n              (fn [cards] (apply max-key :rank\n                                 (if (some trump? cards) (filter trump? cards)\n                                   (filter (fn [card] (= (:suit card) (:suit (first cards)))) cards))))))","user":"584dadebe4b0b7285a6f4e44"},{"code":"(fn ret-winner-fn [trump]\n  (fn winner-fn [cards]\n    (first (sort (fn [{s1 :suit r1 :rank} {s2 :suit r2 :rank}]\n                   (if (= s1 s2)\n                     (> r1 r2)\n                     (or (= s1 trump)\n                         (and (= s1 (:suit (first cards)))\n                              (not (= s2 trump))))))\n                 cards))))","problem":141,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn [trump]\n  (fn [cards]\n    (if-let [trumps (seq (filter #(= trump (% :suit)) cards))]\n      (apply (partial max-key #(% :rank)) trumps)\n      (let [lead ((first cards) :suit)\n            proper (filter #(= lead (% :suit)) cards)]\n        (apply (partial max-key #(% :rank)) proper)))))","problem":141,"user":"503e7f06e4b06c4e0e1fa268"},{"code":"(fn [suit] (fn [cards] (last (sort-by :rank (if (nil? suit) (filter #(= (get (first cards) :suit) (get % :suit)) cards) (filter #(= suit (get % :suit)) cards))))))","problem":141,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn [t]\n  (let [c (fn [c1 c2]\n               (if(= (c1 :suit) (c2 :suit))\n                 (max-key #(:rank %) c1 c2)\n                 (if (and (not (= (c1 :suit) t))\n                          (= (c2 :suit) t))\n                   c2\n                   c1)))]\n    (fn [cs]\n      (reduce #(c %1 %2) cs))))","problem":141,"user":"52753740e4b03e8d9a4a74c1"},{"code":"(fn cards [t]\n  (fn [cardseq]\n    (let [trmp (if (nil? t) (:suit (first cardseq)) t)\n          cards (filter (fn[x] (= trmp (:suit x))) cardseq)]\n      (last (sort-by :rank cards)))))","problem":141,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [trump (if trump trump (get (first cards) :suit))\n          adj (fn [suite num] (if (= suite trump) (+ 100 num) num))]\n      (first (sort (comparator #(> (adj (get %1 :suit) (get %1 :rank)) (adj (get %2 :suit) (get %2 :rank)))) cards)))))","problem":141,"user":"4e7d1c22535db169f9c796c5"},{"problem":141,"code":"(fn [tr]\n  (fn [[{s :suit} :as h]]\n    (let [h* (group-by :suit h)]\n      (apply max-key :rank\n             (or (h* tr) (h* s))))))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [trumps (filter #(= (:suit %) trump) cards)\n          leads (filter #(= (:suit %) (:suit (first cards))) cards)\n          valid (if (empty? trumps) leads trumps)\n          best (apply max (map :rank valid))]\n      {:suit (:suit (first valid)) :rank best})))","problem":141,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":141,"code":"(fn [t]\n  (fn [k]\n    (let [s (or t (:suit (first k)))\n          w (filter (comp #{s} :suit) k)]\n      (apply max-key :rank w))))","user":"5fd10010e4b07e53c2f3f02a"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (last (concat \n            (sort-by :rank (filter #(= (:suit %) (:suit (first cards))) cards))\n            (sort-by :rank (filter #(= (:suit %) trump) cards))))))","user":"55625903e4b0c656e3ff17d7"},{"code":"(fn [trump]\n    (fn [hand]\n      (letfn [(wws [suit hand] (apply max-key :rank (filter #(= suit (:suit %)) hand)))]\n        (let [res (if trump (wws trump hand) nil)]\n          (if res res (wws (:suit (first hand)) hand))))))","problem":141,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"(fn make-winner [i]\n  (cond \n    (nil? i)\n    (fn win-from-rank [c]\n      (loop [c1 (rest c), win (first c)]\n        (if (empty? c1)\n          win\n          (let [f (first c1)]\n            (cond\n              (and (= (win :suit) (f :suit)) (> (f :rank) (win :rank))) \t\t(recur (rest c1) f) \n              (and (= (win :suit) (f :suit)) (not (> (f :rank) (win :rank)))) \t(recur (rest c1) win) \n              (and (not= (win :suit) (f :suit))) \t\t\t\t\t\t\t\t(recur (rest c1) win)\n              )))))\n    \n    (or (= i :spade) (= i :club) (= i :heart) (= i :diamond))\n    (fn win-from-suit [c]\n      (loop [c1 c, win nil]\n        (if (empty? c1)\n          win\n          (let [f (first c1)]\n            (cond\n              (and (= nil win)    (= i (f :suit)))    \t\t\t\t\t\t\t      (recur (rest c1) f)\n              (and (= nil win)    (not= i (f :suit)))\t\t\t\t\t\t\t\t  (recur (rest c1) win)\n              (and (not= nil win) (= i (f :suit))    (> (f :rank) (win :rank)))       (recur (rest c1) f)\n              (and (not= nil win) (= i (f :suit))    (not (> (f :rank) (win :rank)))) (recur (rest c1) win)\n              (and (not= nil win) (not= i (f :suit)))\t\t\t\t\t\t\t      (recur (rest c1) win)\n              )))))\n    \n    (map? i)\n    (fn win-from-map [c]\n      (let [{suit :suit, rank :rank} i]\n        (loop [c1 c, win nil]\n          (if (empty? c1)\n            win\n            (let [f (first c1)]\n              (cond\n                (and (= nil win)    (= suit (f :suit)))    \t\t\t\t\t\t\t(recur (rest c1) f)\n                (and (= nil win)    (not= suit (f :suit))) \t\t\t\t\t\t\t(recur (rest c1) win) \n                (and (not= nil win) (= suit (f :suit))     (= (f :rank) rank)) \t\t(recur (rest c1) f)\n                (and (not= nil win) (= suit (f :suit))     (not= (f :rank) rank)) \t(recur (rest c1) win)\n                (and (not= nil win) (not= suit (f :suit)))\t\t\t\t\t\t\t(recur (rest c1) win))\n              )))))\n    ))","problem":141,"user":"52cf084ce4b07d0d72b27399"},{"problem":141,"code":"(fn [S t]\n  (fn [[a :as h]]\n    (apply max-key :rank\n      (filter #(= (or t (S a)) (S %)) h))))\n:suit","user":"543366dde4b0b6b47310fcdf"},{"code":"(fn [trumph]\n  (fn [cards]\n    (last (sort-by (fn [{:keys [suit rank]}]\n                (condp = suit\n                  trumph                (* 100 rank)\n                  (:suit (first cards)) rank\n                                        0)) cards))))","problem":141,"user":"4f04b66b535dcb61093f6bdd"},{"code":"(fn trump-winner [trump-suit]\n  (fn [[{lead-suit :suit} & _ :as cards]]\n    (last (sort-by :rank\n            (filter #(= (if (and (not (nil? trump-suit))\n                                 (some #{trump-suit} (map :suit cards)))\n                          trump-suit\n                          lead-suit)\n                        (:suit %))\n                    cards)))))","problem":141,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":141,"code":"(fn [suit]\n  (:pre [(contains? #{:spade :heart :diamond :club nil} suit)])\n  (fn winner [cards-vec]\n    (let [suits #{:spade :heart :diamond :club}\n          ranks {2 1 3 2 4 3 5 4 6 5 7 6 8 7\n                 9 8 10 9 \"J\" 10 \"Q\" 11 \"K\" 12 \"A\" 13}\n          trump-suit (if (contains? suits suit) suit :notrump)\n          first-card-led-suit (:suit (first cards-vec))\n          comp-card (fn [x y]\n                      (cond\n                        (= (:suit x) (:suit y))\n                          (compare\n                            (ranks (:rank x))\n                            (ranks (:rank y)))\n                        (and\n                          (= trump-suit :notrump)\n                          (= first-card-led-suit (:suit x))) 1\n                        (and\n                          (= trump-suit :notrump)\n                          (= first-card-led-suit (:suit y))) -1\n                        (= trump-suit (:suit x)) 1\n                        (= trump-suit (:suit y)) -1\n                        :else 0))]\n      (first (reverse (sort comp-card cards-vec))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":141,"code":"(fn [t]\n  (fn [cards]\n    (when-let [s (seq cards)]\n      (let [trump (or t (:suit (first s)))]\n        (reduce #(if (= trump (:suit %2))\n                   (if (> (:rank %2) (:rank %1)) %2 %1)\n                   %1) s)))))","user":"4fd4bddce4b0d4de60cee36e"},{"code":"(fn [x]\n  (letfn [(g [z]\n      (last (sort-by :rank (filter #(= (:suit %) (:suit (first z))) z))))]\n    (fn f ([z]\n        (if x\n           (g (filter #(= (:suit %) x) z))\n           (g  z))))))","problem":141,"user":"4ec0c7ba535dfed6da9c6da4"},{"problem":141,"code":"(fn tricky-card-game [trump]\n  (fn [cards]\n    (let [groups        (group-by :suit cards)\n          power-suit    (reduce (fn [res [k v]]\n                                  (assoc res\n                                    k\n                                    (first (sort-by :rank\n                                                    #(compare %2 %1)\n                                                    v))))\n                                {}\n                                groups)\n          reduced-cards (:res (reduce (fn [{:keys [added-set res]} {:keys [suit]}]\n                                        (if (contains? added-set suit)\n                                          {:added-set added-set\n                                           :res       res}\n                                          {:added-set (conj added-set suit)\n                                           :res       (conj res (get power-suit suit))}))\n                                      {:added-set #{}\n                                       :res       []}\n                                      cards))]\n      (reduce (fn [max-card card]\n                (if (= trump (:suit card))\n                  card\n                  max-card))\n              (first reduced-cards)\n              (drop 1 reduced-cards)))))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":141,"code":"(fn [trump-suit]\n    (fn winner [cards]\n        (letfn [(highest-suit [win-suit]\n                    (->> cards\n                         (filter #(= win-suit (get % :suit)))\n                         (sort-by #(get % :rank))\n                         last))]\n            (if (and trump-suit (some #(= trump-suit (get % :suit)) cards))\n                (highest-suit trump-suit)\n                (highest-suit (get (first cards) :suit))))))","user":"5f548678e4b0a0bc16850a7e"},{"problem":141,"code":"(fn [t]\n    (fn [c]\n      (let\n          [s :suit\n           v #(+ ({t 26} (s %) 0)\n                 ({(s (c 0)) 13} (s %) 0)\n                 (:rank %))]\n        (reduce\n         #(if (> (v %) (v %2)) % %2) c))))","user":"505106fee4b05ab4c7e07d38"},{"problem":141,"code":"(fn [x] (let [dic {x 2}]\n            (fn [l] (let [dicc (assoc dic ((first l) :suit) 1)]\n                      (last (sort-by #(do [(dicc (% :suit) 0) (% :rank)]) l))\n))\n))","user":"5951190be4b066ee0a44aea4"},{"problem":141,"code":"(fn [x] \n  (fn [cs] \n    (if (nil? x) \n      (apply max-key (fn [{s :suit r :rank}] (+ r ({:spade 200, :club 100} s))) cs) \n      (apply max-key :rank (filter #(= x (% :suit)) cs)))))","user":"58e7229fe4b056aecfd47cc4"},{"problem":141,"code":"(fn tricks [trump]\n  (fn [cards]\n    (or\n      (->> cards\n           (filter #(= trump (:suit %)))\n           (sort-by :rank)\n           last)\n      (->> cards\n           (filter #(= (:suit (first cards)) (:suit %)))\n           (sort-by :rank)\n           last))))","user":"521e8227e4b0dd19981ad082"},{"code":"(fn [s]\n  (let [s (or s :spade)]\n    (fn [l]\n      (let [t (filter #(= (:suit %) s) l)]\n        (apply max-key :rank\n               (if (empty? t) l t))))))","problem":141,"user":"50a83315e4b054305ba5a830"},{"code":"(fn n141 [suit]\n  (letfn [(n141-t [suit cards]\n                  (let [suit (if (nil? suit) (:suit (first cards)) suit)\n                        sorted-cards (reverse (sort-by :rank cards))\n                        same-suit (filter #(= suit (:suit %)) sorted-cards)\n                        other-suit (filter #(not= suit (:suit %)) sorted-cards)]\n                    (if (empty? same-suit)\n                      (first other-suit)\n                      (first same-suit))))]\n    (partial n141-t suit)))","problem":141,"user":"52b43468e4b0c58976d9ad1b"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [trump?    (some #(= (:suit %) trump) cards)\n          suit      (if trump? trump (:suit (first cards)))]\n      (->> cards\n           (filter #(= (:suit %) suit))\n           (sort-by :rank)\n           last))))","user":"5a257747e4b07f18be40aa1f"},{"problem":141,"code":"(fn [t]\n  (fn [[{s :suit} :as c]]\n    (->> c\n         (filter #(= (or t s) (:suit %)))\n         (apply max-key :rank))))","user":"548b8a50e4b0e286459a11ff"},{"code":"(fn [trump]\n  (let [winner (fn [{s1 :suit r1 :rank :as x} {s2 :suit r2 :rank :as y}] \n                   (cond\n                    (= s1 s2) (if (> r1 r2) x y)\n                    (= s1 trump) x\n                    (= s2 trump) y  \n                    :else x))]\n       (fn [cards]\n         (reduce #(winner %1 %2) cards))))","problem":141,"user":"4fdb1860e4b05e33b9224f58"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [lead ((first cards) :suit)]\n      (first (sort-by (fn [{:keys [suit rank]}]\n                        [(condp = suit\n                           trump 0\n                           lead 1\n                           2)\n                         (- rank)]) cards)))))","problem":141,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":141,"code":"(fn[trump]\n  (fn [hand]\n    (let [suit-led (:suit (first hand))\n          the-suit (or (some #(#{trump} (:suit %)) hand) suit-led)\n          sorted-hand (sort-by #(:rank %) > hand)]\n      (first (filter #(= the-suit (:suit %)) sorted-hand)))))","user":"4dd1de4d535dae65d5c462d7"},{"code":"; I find these card game questions a little tedious\n#(fn [[{l :suit} & _ :as s]]\n  (let [m (assoc {l 1} % 2)]\n    (last\n      (sort-by\n        (fn [{s :suit r :rank}] [(m s 0) r]) s))))","problem":141,"user":"4f06dcad535dcb61093f6c16"},{"problem":141,"code":"(fn [mark]\n     (fn [stock] \n       (let [s (if (nil? mark) stock (filter #(=  (:suit %) mark) stock))\n             rank #(.indexOf (vector 3 4 5 6 7 8 9 10 11 12 13 1 2 ) %)]\n         (first (sort-by #(rank (:rank %)) > s)))))","user":"55aa1637e4b0988bba2ad949"},{"problem":141,"code":"(fn make-winner [trump-suit]\n  (fn winner [cards]\n    (if (or (not trump-suit)\n            (every? #(not= (:suit %) trump-suit) cards))\n      ((make-winner (:suit (first cards))) cards)\n      (->> cards\n           (filter #(= (:suit %) trump-suit))\n           (sort-by :rank)\n           (last)))))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":141,"code":"(fn [trump]\n  (fn winner [coll]\n    (if (contains? (into (hash-set) (for [card coll] (:suit card))) trump)\n      (apply max-key :rank (filter #(= (:suit %) trump) coll))\n      (apply max-key :rank (filter #(= (:suit %) (:suit (first coll))) coll)))))","user":"5746061ae4b009280f9f2b5b"},{"code":"(fn card-game\r\n  [trump_suit]\r\n\t(letfn [(sort-func [trump start_suit {card_suit :suit, card_rank :rank}]\r\n\t\t\t\t\t\t(let [weight (condp = card_suit\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t trump 1000\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t start_suit 100\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t 1)]\r\n\t\t\t\t\t\t\t(* card_rank weight)))\r\n\t\t\t\t\t(winner [cards]\r\n\t\t\t\t\t\t(last (sort-by (partial sort-func trump_suit (:suit (first cards))) \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t cards)))]\r\n\t\twinner))","problem":141,"user":"4e8a0c82535d3e98b802328d"},{"problem":141,"code":"(fn trumps [trump]\n        (fn [cards]\n                (last (sort-by (fn [{s :suit r :rank}] (vector (cond (= s trump) 2 (= s (:suit (first cards))) 1 :else 0 ) r)) cards))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":141,"code":"(fn [s] (fn [m]\n  (let [s (if s s ((first m) :suit))]\n   (reduce (fn [x y] (if (> (y :rank) (x :rank)) y x))\n     (filter #(= s (% :suit)) m) ))))","user":"4fd11a93e4b04c3a95aa040a"},{"problem":141,"code":"(fn [trump]\n    (fn [cards]\n      (let [c0 (first cards)\n            suit-rank (-> {:club 1 :diamond 1 :heart 1 :spade 1}\n                          (assoc-in [(:suit c0)] 2)\n                          (assoc-in [trump] 5))]\n        (-> (sort-by (juxt #(suit-rank (:suit %)) #(:rank %)) #(compare %2 %1) cards)\n            first))))","user":"5f93529ae4b0715f5002d7bc"},{"code":"(fn [x] \r\n  (fn [m] (reduce #(if (= (% :suit) (%2 :suit)) (if (> (% :rank) (%2 :rank)) % %2) %) (if (nil? x) (first m) {:suit x :rank 0}) m)))","problem":141,"user":"503354c3e4b0c6c1199c710c"},{"code":"(fn determine-winner [trump]\n\t(letfn [(comp [a-trump] \n\t\t\t(fn greater-card [a-card b-card]\n\t\t\t\t(if (or (and (= (a-card :suit) a-trump)\n\t\t\t\t\t\t\t (= (b-card :suit) a-trump))\n\t\t\t\t\t\t(and (not= (a-card :suit) a-trump)\n\t\t\t\t\t\t\t (not= (b-card :suit) a-trump)))\n\t\t\t\t\t(if (>= (a-card :rank) (b-card :rank))\n\t\t\t\t\t\ta-card\n\t\t\t\t\t\tb-card\n\t\t\t\t\t)\n\t\t\t\t\t(if (= (a-card :suit) a-trump)\n\t\t\t\t\t\t a-card\n\t\t\t\t\t\t b-card\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)]\n\t\t(fn winner[cards]\n            (let [the-trump (or trump ((first cards) :suit)) compare-func (comp the-trump)]\n\t\t\t\t(reduce compare-func cards)\n\t\t\t)\n\t\t)\n\t)\n)","problem":141,"user":"52763696e4b03e8d9a4a74d7"},{"problem":141,"code":"(fn trick-winner\n  [trump]\n  (let [take-all (fn take-all\n                   [lom suit]\n                   (filter #(= suit (% :suit)) lom))\n        highest-card (fn [lom] (last (sort-by #(% :rank) lom)))]\n    (cond\n      (nil? trump) (fn [alistomap]\n                     (highest-card (take-all alistomap ((first alistomap) :suit))))\n      :else (fn [alistomap]\n              (last (concat [(highest-card (take-all alistomap ((first alistomap) :suit)))]\n                            [(highest-card (take-all alistomap trump))]))))))","user":"550d9452e4b06e50f9beb15d"},{"problem":141,"code":"(fn [trump]\n  (fn [[c & cs]]\n    (let [score (fn [[{suit :suit rank :rank :as card} & cs]\n                     {w-suit :suit w-rank :rank :as winner}]\n                  (cond (nil? card)\n                        winner\n\n                        (and (= suit w-suit) (> rank w-rank))\n                        (recur cs card)\n                          \n                        (and (= suit trump) (not= w-suit trump))\n                        (recur cs card)\n\n                        :else\n                        (recur cs winner)))]\n      (score cs c))))","user":"5eb1c786e4b00a66d4a95201"},{"problem":141,"code":"(fn [t]\n  (fn [c]\n    (reduce\n      (fn [w i]\n        (let [s #(:suit %)]\n          (cond\n            (= (s w) (s i)) (max-key :rank w i)\n            (= t (s i)) i\n            :else w)))\n      c)))","user":"4eb70649535d7eef30807373"},{"problem":141,"code":"(fn [x]\n      (fn [s]\n        (reduce #(cond\n                   (= (:suit %1) (:suit %2)) (if (> (:rank %1) (:rank %2)) %1 %2)\n                   (= (:suit %2) x) %2\n                   :else %1)\n                s)))","user":"51e28063e4b08e53a149f0f2"},{"code":"(fn f [trump]\n  (fn [hands]\n    (let [led (first hands)\n          led-suit (:suit led)\n          possibles (filter #(let [s (:suit %)] ((set [led-suit trump]) s)) hands)\n          is-trump (fn [hand] (= trump (:suit hand)))]\n      (reduce\n        (fn [hand1 hand2]\n          (cond\n            (and (is-trump hand1) (not (is-trump hand2))) hand1\n            (and (is-trump hand2) (not (is-trump hand1))) hand2\n            (> (:rank hand1) (:rank hand2)) hand1\n            :else hand2))\n        possibles))))","problem":141,"user":"51195e77e4b055cfb310d499"},{"problem":141,"code":"(fn create-referee [trump-suit] \n\n  (fn referree [s]\n\n    (loop [tail (rest s) cur-winner (first s)]\n      \n      (let [trump-suit (if trump-suit trump-suit (:suit (first s)))] \n        (let [head (first tail)]\n          (if (nil? head)\n            cur-winner\n            (if (and (not= (:suit head) trump-suit) (= (:suit cur-winner) trump-suit))\n              (recur (rest tail) cur-winner)\n              (if (and (not= (:suit cur-winner) trump-suit) (= (:suit head) trump-suit))\n                (recur (rest tail) head)\n                ; Use rank\n                (if (> (:rank head) (:rank cur-winner)) \n                  (recur (rest tail) head)\n                  (recur (rest tail) cur-winner)\n                  )\n                )\n          ); Determine trump before rank\n            \n            \n            )\n          ))\n      )\n\n    ))","user":"5ff676a9e4b06df49cee1497"},{"problem":141,"code":"(letfn\n  [(f [trump [c & cs]]\n     (let [t (if (nil? trump) (:suit c) trump)]\n       (if (empty? cs) c\n         (let [best (f t cs)]\n           (if (not= (:suit best) t) c\n             (if (not= (:suit c) t) best\n               (if (> (:rank best) (:rank c)) best c)))))))]\n\n  (fn func [trump] (partial f trump)))","user":"53065acbe4b02e8216869792"},{"code":"(fn _ [T]\n    (fn [l]\n      (let [t (if (nil? T) :spade T),\n            rank #(if (= (% :suit) t) (* 10 (% :rank))\n                    (% :rank))]\n        (last (sort #(< (rank %) (rank %2)) l)))\n      )\n    )","problem":141,"user":"4f038567535dcb61093f6b0c"},{"problem":141,"code":"(fn p141 [t]\n  (fn [hands]\n   (let [lead-suit (:suit (first hands))\n         possible-winners (if-let [t-hands (seq (filter #(= t (:suit %)) hands))] t-hands (filter #(= lead-suit (:suit %)) hands))]\n\t (last (sort-by :rank possible-winners)))))","user":"50e1bdd8e4b019fc399ce17f"},{"problem":141,"code":"(fn tricky-card-game\n  [trump]\n  (fn\n    [colls]\n    (let [first-card-suit ((first colls) :suit)\n          sorted-by-rank (sort-by #(% :rank) colls)\n          sorted-by-first (filter #(= first-card-suit (% :suit)) sorted-by-rank)\n          sorted-by-trump (filter #(= trump (% :suit)) sorted-by-rank)]\n      (if trump\n        (if sorted-by-trump\n          (last sorted-by-trump)\n          (last sorted-by-first))\n        (last sorted-by-first)))))","user":"557e9d17e4b05c286339e0d8"},{"problem":141,"code":"(fn winner[trump]\n  (fn [cards]\n    (let [hasTrump (some #(= (:suit %) trump) cards)\n          suit (if (true? hasTrump) trump ((first cards) :suit))\n          validCards (filter #(= (:suit %) suit) cards)]\n     (reduce #(if (< (%1 :rank) (%2 :rank)) %2 %1) validCards))))","user":"541619e8e4b01498b1a719f9"},{"code":"(fn [trump]\n   (fn [cards]\n     (last (sort-by :rank\n                    (if-let [trump-cards (seq (filter (fn [c]\n                                            (= (:suit c) trump)) cards))]\n                      trump-cards \n                      (filter (fn [c]\n                                (= (:suit c) (:suit (first cards))))\n                              cards\n                              ))))\n     ))","problem":141,"user":"503ca47fe4b06c4e0e1fa24f"},{"code":"(fn winner [t]\n  (letfn [(winner [curr nxt]\n          (if (= (curr :suit) (nxt :suit))\n            (if (> (nxt :rank) (curr :rank)) nxt curr)\n            (if (and (not= nil t) (= (nxt :suit) t)) nxt curr)))]\n    (fn [& cards] (apply reduce winner cards))))","problem":141,"user":"4fca1cd6e4b0ee37620e184c"},{"code":"(fn [start-trump]\n     (fn [coll]\n       (let [available-suits (loop [result #{} elements coll]\n                               (if elements\n                                 (recur (conj result ((first elements) :suit)) (next elements))\n                                 result\n                                 )\n                               )             \n             trump (if start-trump start-trump \n                      (if (contains? available-suits :diamond) :diamond (first available-suits)))\n             temp-winner (loop [elements coll]\n                           (if (= ((first elements) :suit) trump)\n                             (first elements)\n                             (recur (next elements))\n                             )\n                           )\n             ]\n         (loop [winner temp-winner elements coll]\n           (if elements\n             (if (and (= trump ((first elements) :suit)) (> ((first elements) :rank) (winner :rank)))\n               (recur (first elements) (next elements))\n               (recur winner (next elements))       \n             )\n             winner\n             )\n           \n           )\n         )\n     )\n   )","problem":141,"user":"5106dc1be4b01150e115ebf0"},{"code":"(fn tricky-card-games [trump]\n  (fn [cards]\n    (let [[fst & others] cards\n          leading-suit (:suit fst)\n          trumps (filter #(= trump (:suit %))  others)\n          max-suit (fn [suit] (apply max (map :rank (filter #(= suit (:suit %)) cards)))) ]\n      (if (empty? trumps)\n          {:suit leading-suit\n           :rank (max-suit leading-suit)}\n          {:suit trump\n           :rank (max-suit trump)}))))","problem":141,"user":"4e356d2b535deb9a81d77f2d"},{"code":"#(fn [[f & l]] \n    (loop [[{s :suit r :rank :as n} & q] l {a :suit b :rank :as w} f]\n      (if (nil? n)\n        w\n        (recur q (if (or (and (= s a) (> r b))\n                         (and (not= a %) (= s %)))\n                   n \n                   w)))))","problem":141,"user":"4dae916eedd6309eace4d155"},{"code":"(fn [trump]\n  (fn winner [cards]\n    (let [higher-of (fn [{acc-suit :suit, acc-rank :rank :as acc}\n                         {card-suit :suit, card-rank :rank :as card}]\n            (if (and (or (= acc-suit card-suit) (= trump card-suit))\n                     (< acc-rank card-rank))\n              card\n              acc))]\n      (reduce higher-of cards))))","problem":141,"user":"4e691c79535d8ccf87e9fe97"},{"code":"(fn [t]\n  (fn [[l :as r]]\n    (apply max-key :rank\n      (filter #(= (or t (:suit l)) (:suit %)) r))))","problem":141,"user":"50548ce8e4b0b1b9d1860ead"},{"code":"(fn [trump]\n  (fn [cs]\n    (let [better (fn [curr candid]\n                   (if (= (:suit curr) (:suit candid))\n                     (last (sort-by :rank [curr candid]))\n                     (if (= (:suit candid) trump) candid curr)))]\n      (reduce better cs))))","problem":141,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn trump-fn [suit]\n  (letfn [(xor [a b] (if (= a b) false true))\n\t\t\t(ret [s r] {:suit s :rank r})\n\t\t\t(compare-cards [trump-suit {c1s :suit c1r :rank} {c2s :suit c2r :rank}]\n\t\t\t\t(cond (xor (= c1s trump-suit) (= c2s trump-suit))\n\t\t\t\t\t  (if (= c1s trump-suit) (ret c1s c1r) (ret c2s c2r))\n\t\t\t\t\t  (> c1r c2r) (ret c1s c1r)\n\t\t\t\t\t  :else (ret c2s c2r)\t\t\n\t\t\t\t)\n\t\t\t)]\n\t(fn [maps]\n\t\t(let [trump-suit (if (nil? suit) (get (first maps) :suit) suit)]\n\t\t(loop [nmaps (rest maps) res (first maps)]\n\t\t\t(if (seq nmaps) \n\t\t\t\t(recur (rest nmaps) (compare-cards trump-suit (first nmaps) res))\n\t\t\t\tres\n\t\t\t)\n\t\t)\n\t\t)\n\t)\n\t)\n)","problem":141,"user":"50588af1e4b06522596eba7d"},{"code":"(fn [trump] \n  (letfn [(card-comparer [trump c1 c2]\n                         (if (= (:suit c1) (:suit c2))\n                           (if (< (:rank c1) (:rank c2)) c2 c1)\n                           (if (= (:suit c2) trump) c2 c1)))]\n    (fn [cards]\n      (reduce (partial card-comparer trump) cards))))","problem":141,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (reduce\n     #(if (>\n           (:rank %1)\n           (:rank %2))\n        %1\n        %2)\n     (let\n      [first-suite\n         (or\n          trump\n          (:suit (first cards)))]\n       (filter\n        #(= (:suit %) first-suite)\n      cards)))))","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn [suit]\n   (fn [cards]\n     (let [trump-suit (or suit (:suit (first cards)))]\n       (->> cards\n            (filter #(-> % :suit (= trump-suit)))\n            (sort-by :rank)\n            last))))","problem":141,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [suit (-> cards first :suit)]\n      (first (sort (fn [a b]\n  \t     (if (= (:suit a) (:suit b))\n\t\t       (- (:rank b) (:rank a))\n\t\t       (if (and trump (or (= trump (:suit a))\n\t\t\t\t\t  (= trump (:suit b))))\n\t\t\t (if (= trump (:suit a)) -1 1)\n\t\t\t (if (= suit (:suit a))\n\t\t\t   -1\n\t\t\t   0))))\n\t\t  cards)))))","problem":141,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn [trump]\n  (fn winner [[{lead :suit} & _ :as hands]]\n    (let [trump (if trump trump lead)]\n      (->> hands\n        (filter #(= (% :suit) trump))\n        (sort-by :rank >)\n        (first)))))","problem":141,"user":"51cdd3f0e4b0e42293a2254b"},{"problem":141,"code":"(fn winner [trump]\n    (fn [cards]\n      (let [sorted (sort-by :rank > cards)\n            winning-trump (first (filter #(= (:suit %) trump) sorted))\n            winning-led (first (filter #(= (:suit %) (:suit (first cards))) sorted))]\n\n        (if winning-trump\n          winning-trump\n          winning-led))))","user":"58b51e05e4b0ebc645576d4c"},{"code":"(fn [t]\n  (fn [[l & o :as c]]\n    (let [s (conj #{} t (:suit l))]\n      (first (sort-by #(+ (:rank %) (if (= t (:suit %)) 20 0)) > (filter #(s (:suit %)) c))))))","problem":141,"user":"50996a38e4b0cae2931060b3"},{"code":"(fn [trump-suit]\n  (fn winner [coll]\n    (let [filter-to-suit (fn [suit] (filter #(= suit (:suit %)) coll))\n          winning-suit (if (nil? trump-suit) (:suit (first coll)) trump-suit)\n          with-winning-suit (filter-to-suit winning-suit)\n          max-rank (apply max (map #(:rank %) with-winning-suit))\n          ]\n      {:suit winning-suit :rank max-rank}\n      )\n    )\n  )","problem":141,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (reduce\n     (fn [x y] (if (= (x :suit) (y :suit))\n                 (if (> (x :rank) (y :rank)) x y)\n                 (if (= (y :suit) trump) y x)))\n     cards)))","user":"5b465b8be4b02d533a91bc65"},{"problem":141,"code":"(fn [trump]\n  (fn winner [cards]\n    (let [winning-suit (if (some #(= (:suit %) trump) cards) trump (:suit (first cards))),\n          winning-rank (apply max (map :rank (filter #(= (:suit %) winning-suit) cards)))]\n      {:suit winning-suit, :rank winning-rank})))","user":"567695c2e4b05957ce8c6157"},{"code":"(fn [trump]\n    (letfn [(cmp [a b]\n              (if (and (= (a :suit) (b :suit))\n                       (< (a :rank) (b :rank)))\n                b a))]\n      (fn [trick]\n        (loop [t (rest trick)\n               w (first trick)]\n          (if (empty? t)\n            w\n            (recur (rest t)\n                   (let [t2 (first t)]\n                     (if (nil? trump)\n                       (cmp w t2)\n                       (cond (= (w :suit) (t2 :suit))\n                             (if (< (w :rank) (t2 :rank)) t2 w)\n                             (= (t2 :suit) trump) t2\n                             :else w)))))))))","problem":141,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [lead (or trump (:suit (first cards)))]\n      (->> cards\n           (filter #(= lead (:suit %)))\n           (apply max-key :rank)))))","user":"605b7a90e4b079a07f8593fc"},{"code":"(fn w [t]\n    (fn [s]\n      (let [cs (filter #(= t (:suit %)) s)]\n        (if (and t cs)\n          (->> (reduce #(max % (:rank %2)) 0 cs) (hash-map :suit t :rank))\n          ((w (-> s first :suit)) s)))))","problem":141,"user":"4fa05b99e4b0dcca54ed6d47"},{"problem":141,"code":"(fn [t]\n  #(apply max-key\n     (fn [{s :suit r :rank}]\n       (+ r\n         (if (= s (:suit (first %))) 13 0)\n         (if (= s t) 26 0)))\n     %))","user":"4f9d8083e4b0dcca54ed6d23"},{"problem":141,"code":"(fn [trump]\n  (fn [[{led :suit} :as cs]]\n    (let [cards (fn [s] (filter #(= s (:suit %)) cs))\n          trumps (cards trump)]\n      (apply max-key :rank (if (empty? trumps) (cards led) trumps)))))","user":"52ce1abfe4b07d0d72b27389"},{"problem":141,"code":"(fn [trump]\n    (fn [cards]\n      (let [leading-suit (-> (first cards) :suit)]\n        (last\n         (sort-by (fn [{suit :suit rank :rank}]\n                    (+ (cond\n                         (= leading-suit suit) 20\n                         (= trump suit) 40\n                         :default 0) rank)) cards)))))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn judge [suit]\n  (fn [coll]\n    (if-let [trumps (seq (filter #(= suit (:suit %)) coll))]\n      (apply max-key :rank trumps)\n      (reduce #(if (and (= (:suit %1) (:suit %2))\n                        (< (:rank %1) (:rank %2)))\n                 %2\n                 %1) coll))))","problem":141,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":141,"code":"(fn [trump]\n   (fn [trick] \n      (apply max-key :rank (filter #((fnil = ((first trick) :suit)) trump (% :suit)) trick))))","user":"59f043d0e4b0966464fe6a3d"},{"code":"(fn [trump]\n  (fn [trick]\n    (let [suit-order\n            (if trump\n              [(:suit (first trick)) trump]\n              [(:suit (first trick))])\n            ]\n      (reduce\n        (fn [highest card]\n          (cond\n            (> (.indexOf suit-order (:suit card))\n               (.indexOf suit-order (:suit highest)))\n              card\n            (and (= (:suit highest) (:suit card))\n                    (> (:rank card) (:rank highest)))\n              card\n            :else\n              highest))\n          trick))))","problem":141,"user":"504c8165e4b09724c857af31"},{"code":"(fn [t]\n  (fn [xs]\n    (reduce\n      (fn [a b]\n       (if (nil? t)\n         (if (= (:suit a) (:suit b))\n           (assoc a :rank (max (:rank a) (:rank b)))\n           a)\n         (cond\n           (= (:suit a) (:suit b))\n             (assoc a :rank (max (:rank a) (:rank b)))\n           (= t (:suit b))\n             b\n           :default \n             a)))\n      xs)))","problem":141,"user":"52a88c4de4b0c58976d9ac30"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [winning-suit (if (some #(= % trump) (map :suit cards))\n                         trump\n                         (:suit (first cards)))]\n      (apply (partial max-key :rank)\n               (filter #(= winning-suit (:suit %))\n                       cards)))))","user":"58247423e4b051871117bec5"},{"problem":141,"code":"(fn tricky-cards [trump]\n  (fn [s] (let [lead (first s)]\n            (reduce #(if (= (:suit %2) trump)\n                       (if (= (:suit %1) trump)\n                         (if (> (:rank %2) (:rank %1))\n                           %2\n                           %1)\n                         %2)\n                       (if (= (:suit %2) (:suit lead))\n                         (if (> (:rank %2) (:rank %1))\n                           %2\n                           %1)\n                         %1))\n                    (first s)\n                    (rest s)))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":141,"code":"(fn [trump]\n  (fn [hands]\n    (let [suits (zipmap [:club :diamond :heart :spade] (range 4))\n          keyfn (fn [{:keys [suit rank]}] (+ (* 13 (if (= trump suit) 4 (suits suit))) rank))]\n      (first (sort-by keyfn > hands)))))","user":"54055aa9e4b0addc1aec6665"},{"code":"(fn [trump]\n    (fn [cards]\n      (let [lead (:suit (first cards))\n            suit-cards (filter #(= (:suit %) (or trump lead)) cards)]\n        (apply max-key :rank suit-cards))))","problem":141,"user":"4ea1b9e4535d7eef308072b8"},{"code":"(fn [trump]\n  (fn [hand]\n    (let [by-suit (group-by :suit hand)\n          win-suit (or trump (:suit (first hand)))]\n      (last (sort-by :rank (win-suit by-suit))))))","problem":141,"user":"5032b066e4b00c0952a257ea"},{"problem":141,"code":"(fn [trump-suit]\n  \n  \n  \n  (fn [card-list]\n    (let [ lead-card (first card-list) \n          highest-card (reduce (fn [a v] (if (= (lead-card :suit) (v :suit))\n                                                (if (> (v :rank) (a :rank))\n                                                  v\n                                                  a\n                                                ) \n                                                a)) lead-card card-list)\n          highest-trump (if (nil? trump-suit) nil\n                                              (reduce (fn [a v] (if (= trump-suit (v :suit))\n                                                                  (if (nil? a) v\n                                                                  (if (> (v :rank) (a :rank))\n                                                                    v\n                                                                    a\n                                                                    ))\n                                                                  a)) nil card-list)\n                                              \n                                              )\n          \n          \n          ]\n      (if (nil? highest-trump) highest-card highest-trump)\n      \n      )\n    \n    \n    ))","user":"53c73e8ae4b00fb29b2212a5"},{"code":"(fn [t]\n    (letfn [(high?\n              [suit c1 c2]\n              (> (point suit c1) (point suit c2)))\n            (point\n              [suit c]\n              (+ (if (= suit (:suit c)) 13 0)\n                 (:rank c)))\n            (judge\n              [cards]\n              (let [suit (some identity [t (:suit (first cards))])]\n                (reduce #(if (high? suit % %2) % %2) cards)))]\n           judge))","problem":141,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":141,"code":"(fn [trump]\n    (fn [cards]\n      (let [lead-suit (:suit (first cards))]\n        (->> (filter (fn [card] (= (:suit card) (or trump lead-suit))) cards)\n             (apply max-key :rank)))))","user":"53fe1b42e4b0de5c418485f1"},{"problem":141,"code":"#(fn [[l & r]]\n                   (reduce (fn [{s1 :suit r1 :rank :as m1} {s2 :suit r2 :rank :as m2}]\n                             (if (or (and (= s1 s2) (< r1 r2))\n                                     (and (= s2 %) (not= s1 %))\n                                     (and (= s2 %) (= s1 %) (< r1 r2))\n                                     ) m2\n                                       m1\n                                       )) l r))","user":"5921a080e4b09b4ee5954c77"},{"problem":141,"code":"(fn [suit] (fn [xs] (letfn [(gr [s] (last (sort-by :rank (filter #(= (:suit %) s) xs))))\n                                    (cs [s] (reduce #(conj % (:suit %2)) #{} s))\n                                    (ms [s] (map #(%  {:spade 0 :heart 1 :diamond 2 :club 3}) s))\n                                    (ss [n] (nth [:spade :heart  :diamond :club] n))]\n                              (if suit\n                                (gr suit)\n                                (gr (ss (first (min (ms (cs xs))))))))))","user":"5b924123e4b0c0b3ffbd4a34"},{"code":"(fn [trump] (letfn [\n(tricky-card-games [trump]\n\t(fn winner [cards]\n\t\t(if\n\t\t\t; Trump exists and there is at least one card of the trump suit\n\t\t\t(and (not (nil? trump)) (some #{trump} (map :suit cards)))\n\t\t\t; Then: Biggest card of the trump suit\n\t\t\t(first (sort-by :rank > (filter #(= trump (:suit %)) cards)))\n\t\t\t; Else: Biggest card of the leading suit\n\t\t\t(first (sort-by :rank > (filter #(= (:suit %) (:suit (first cards))) cards)))\n\t\t)\n\t)\n)\n] (tricky-card-games trump)))","problem":141,"user":"52f10094e4b05e3f0be25ee8"},{"problem":141,"code":"(fn [t]\n  #(let [g (group-by :suit %)]\n    (last\n      (sort-by :rank\n        (get g t (g (:suit (nth % 0))))))))","user":"52bacfa8e4b07a9af57922d6"},{"code":"(fn [w]\n  #(reduce (fn [x y]\n              (if (= (:suit x) (:suit y))\n               (if (> (:rank x) (:rank y)) x y)\n               (if (= w (:suit y)) y x)))\n            %))","problem":141,"user":"4e823ed7535db62dc21a62c7"},{"code":"(fn [suit]\n  #(->> %\n         (filter (fn [x] (= (:suit x) (if suit suit (:suit (first %))))))\n         (sort-by :rank)\n         last))","problem":141,"user":"52479487e4b05ef8e38e6373"},{"problem":141,"code":"(fn [suit]\n  (fn [trumps]\n    (reduce #(if (and  (or (nil? (% :suit)) (= (%2 :suit) (% :suit)))\n                       (> (%2 :rank) (% :rank)) )\n               %2\n               %)\n            {:suit suit :rank 0}\n            trumps)))","user":"57035ccfe4b08d47c97781ef"},{"code":"(fn [t]\n  (fn [c]\n    (reduce #(let [t1 (% :suit) t2 (%2 :suit)]\n                 (if (= t1 t2)\n                   (if (< (% :rank) (%2 :rank)) %2 %1)\n                   (if (= t t2) %2 %1))) c)))","problem":141,"user":"53460d02e4b084c2834f4a39"},{"code":"(fn [trump]\n  (fn [things]\n    (if (= 1 (count things))\n      (first things)\n      (if\n        (or\n          (and\n            (< (:rank (first things)) (:rank (second things)))\n            (= (:suit (first things)) (:suit (second things))))\n          (and\n            (= trump (:suit (second things)))\n            (not= trump (:suit (first things)))))\n        (recur (rest things))\n        (recur (cons (first things) (drop 2 things)))))))","problem":141,"user":"504e12ade4b078edc5f593b7"},{"problem":141,"code":"(fn trick-winner-function [trump]\n  (fn [[{lead-suit :suit} :as trick]]\n    (apply max-key (fn [{:keys [suit rank]}] \n                     (+ rank (* 13 (cond \n                                     (= suit trump) 2 \n                                     (= suit lead-suit) 1 \n                                     :else 0)))) \n      trick)))","user":"5c506951e4b0f9f7a8770ec5"},{"code":"(fn [trump]\n  (fn [[{t :suit} :as cs]]\n    (apply max-key :rank\n      (filter #(= (or trump t) (% :suit)) cs))))","problem":141,"user":"4fd96694e4b05e33b9224f37"},{"problem":141,"code":"(fn my-tricky-card-games\n  [init-trump]\n  (fn [cards]\n    (let [trump (if (nil? init-trump)\n                  (:suit (first cards))\n                  init-trump)]\n      (reduce #(if (and (= trump (:suit %2)) (> (:rank %2) (:rank %1)))\n                 %2 \n                 %1) (first cards) (rest cards)))))","user":"509a25b7e4b0efbae1fbc0a8"},{"code":"(fn f [x]\n  (fn [y]\n    (let [a (if x x (:suit (first y)))\n          b (filter #(= (:suit %) a) y)]\n      (if (= (count b) 1)\n        (first b)\n        (apply max-key #(:rank %) b)))))","problem":141,"user":"529b44afe4b02ebb4ef7509d"},{"problem":141,"code":"(fn __ [tromf]\n    (fn [cards]\n      (reduce\n        (fn [acc card]\n          (if (= tromf (card :suit))\n            (if (= (acc :suit) tromf)\n              (if (> (card :rank) (acc :rank))\n                card\n                acc\n                )\n              card\n              )\n            (if (= (acc :suit) (card :suit))\n              (if (> (card :rank) (acc :rank))\n                card\n                acc\n                )\n              acc\n              )\n            )\n          )\n        (first cards)\n        (rest cards))))","user":"58bc6a88e4b0888cdc949d16"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (->> cards \n         (filter #(= (:suit %) (if trump trump (:suit (first cards)))))\n         (sort-by :rank)\n         last)))","user":"53ce4cd4e4b00fb29b2212ef"},{"problem":141,"code":"(fn [pred]\n  (fn [[f & xs]]\n     (loop [[s & ss] xs king f]\n        (cond \n            (not s) king\n            (and (= (s :suit) (king :suit)) (> (s :rank) (king :rank))) (recur ss s)\n            (and (= (s :suit) pred) (not= (king :suit) pred)) (recur ss s)\n            :else (recur ss king)))))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":141,"code":"(fn trump [t]\n    (fn winner [trick]\n      (if (nil? t)\n        ((trump (:suit (first trick))) trick)\n        (last\n         (sort-by :rank\n                  (filter #(= t (:suit %)) trick))))))","user":"579693d4e4b039eba2ecb0e7"},{"code":"(fn [trump]\n    \n    (fn winner [card-vector]\n      (let [ranking-suit ((first card-vector) :suit)\n            sorter (fn [{:keys [suit rank]}]\n                    (vec (list (if (= trump suit) 3 \n                                   (if (= ranking-suit suit) 2 0))\n                         rank\n                         ))\n\n                  )\n            ]\n        \n         (last (sort-by sorter card-vector))\n        \n        )\n      )\n    )","problem":141,"user":"5314b0cae4b08068f379ed1c"},{"problem":141,"code":"(fn ttcg [trump]\n  (let [gsw (fn [s c] (last (sort-by :rank (filter #(= s (% :suit)) c))))]\n    (if trump\n      (fn [c] (or (gsw trump c) (gsw (:suit (first c)) c)))\n      (fn [c] (gsw (:suit (first c)) c)))))","user":"53e745a1e4b036ad0777e479"},{"problem":141,"code":"(fn f [s]\n  (fn [cs]\n    (last (sort-by :rank (filter\n      #(= (:suit %) (if s s (:suit (first cs)))) cs)))))","user":"53500869e4b084c2834f4ad3"},{"code":"(fn [trump]\n  (fn winner [cards]\n    (let [trump2 (if (nil? trump) ((first cards) :suit) trump)]\n      (let [of-trump-suit (filter #(= trump2 (% :suit)) cards)]\n        (let [to-consider (if (empty? of-trump-suit) cards of-trump-suit)]\n          (last (sort #(compare (% :rank) (%2 :rank)) to-consider)))))))","problem":141,"user":"4fb1325de4b081705acca276"},{"code":"(fn best-card [trump]\n  (fn [cards] \n   (last (sort-by #(vector ((:suit %1) (conj {:diamond 0\n                                              :heart 1\n                                              :club 2\n                                              :spade 3} [trump 4]))\n                           (:rank %1)) cards))))","problem":141,"user":"53300924e4b019098a6f8b55"},{"problem":141,"code":"(fn [trump] (fn [theseq] (let [leading ((first theseq) :suit)]\n(letfn [(wincomp [card1 card2] \n(if (and (= (card1 :suit) trump) (not= (card2 :suit) trump)) true\n(if (and (= (card2 :suit) trump) (not= (card1 :suit) trump)) false\n(if (and (= (card1 :suit) leading) (not= (card2 :suit) leading)) true\n(if (and (= (card2 :suit) leading) (not= (card1 :suit) leading)) false\n(compare (card2 :rank) (card1 :rank)))))))]\n(first (sort wincomp theseq))))))","user":"55f75c6be4b06e875b46cea9"},{"problem":141,"code":"(fn [t] \n  (fn [cards]\n    (let [process (last (sort-by :rank (filter #(= (:suit (first cards)) (:suit %)) cards)))]\n      (if t\n        (if-let [tfound (filter #(= t (:suit %)) cards)]\n          (last (sort-by :rank tfound))\n          process)\n        process))))","user":"5e6ca949e4b04a83ad7cd289"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [suits (map :suit cards)\n          s (or (some #{trump} suits)\n                (first suits))]\n      (->> cards\n           (filter #(= s (:suit %)))\n           (apply max-key :rank)))))","user":"583e27e2e4b089d5ab817daa"},{"problem":141,"code":"(fn [t]\n  (fn [hands]\n    (first (sort-by (fn [h]\n                      [(condp = (:suit h)\n                         t 0\n                         (:suit (first hands)) 1\n                         2)\n                       (- (:rank h))])\n                    hands))))","user":"50ed4626e4b01236b1d4983c"},{"code":"(fn genComp [trump]\n   (let [cpmap (assoc   \n                {:spade 80  :heart 60 :diamond 40 :club 20\n                 }\n                 (if (nil? trump)\n                     :nothing\n                     trump\n                   )  100)       \n          keyv  (fn [v]\n                  (+ ((:suit v) cpmap) (:rank v)) \n                  )    \n         ]  \n   (fn [cols]\n       (reduce #(max-key keyv %1 %2) cols)\n     )\n  )\n )","problem":141,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":141,"code":"(fn [t]\n  (fn [s] (let [b (or t (:suit (first s)))]\n            (->> s\n            (sort-by :rank)\n            (filter #(= (:suit %) b))\n            last))))","user":"5c379636e4b0d62ef62d9f76"},{"code":"(fn [trump]\n  (letfn [(trick [{s0 :suit r0 :rank :as c0} \n                  {s1 :suit r1 :rank :as c1}]\n            (cond (= s0 s1) (if (> r1 r0) c1 c0)\n                  (= s1 trump) c1\n                  :otherwise c0))]\n    (fn [[a & as]] (reduce trick a as))))","problem":141,"user":"5294e44de4b02ebb4ef75016"},{"problem":141,"code":"(fn tricky [trump]\n  (fn [cards]\n    (letfn [(find-best-suit [by-suit]\n              (if (and trump (seq (trump by-suit)))\n                (trump by-suit)\n                ((:suit (first cards)) by-suit)))]\n      (->> cards\n           (group-by :suit)\n           find-best-suit\n           (sort-by :rank)\n           last))))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":141,"code":"(fn __ [t]\n  (if t\n    (fn [cs]\n      (->> (filter #(= t (:suit %)) cs)\n           (sort-by :rank)\n           last))\n    (fn [cs]\n      (->> cs\n           (sort-by (fn [{:keys [suit rank]}]\n                      (+ (* 13 (.indexOf [:club :diamond :heart :spade] suit))\n                         rank)))\n           last))))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"(fn tricky-cards\n  [trump-suit]\n  (let [score-fn (fn [card] (if (= (:suit card) trump-suit) (+ 100 (if (= 2 (:rank card)) 22 (:rank card))) (if (= 2 (:rank card)) 22 (:rank card))))]\n    (fn [cs]\n      (reduce\n        (fn [current-winner next-card]\n          (if (nil? current-winner) next-card\n            (if (> (score-fn next-card) (score-fn current-winner))\n              next-card\n              current-winner)))\n        nil\n        cs))))","problem":141,"user":"4dad76588e77d6ed63f12a44"},{"problem":141,"code":"(fn [ts]\n  (fn [cs]\n    (let [ls (:suit (first cs))\n          rank #(+ (:rank %) (condp = (:suit %) ts 50 ls 20 0))]\n      (last (sort-by rank cs)))))","user":"512700c4e4b083bb8f88cf14"},{"code":"(fn [trump]\n    (fn [cards]\n      (let [s (if (nil? trump) (:suit (first cards)) trump)]\n        (->> cards\n             (filter #(= (:suit %) s))\n             (apply max-key :rank)))))","problem":141,"user":"4f463dfde4b0d56e7bb92b99"},{"code":"(fn t [trump]\n  (fn [coll]\n    (let [the-t (if (nil? trump)\n                  (:suit (first coll))\n                  trump)\n          suits (filter #(= (:suit %) the-t) coll)]\n      (apply max-key :rank  suits))))","problem":141,"user":"4eec82fe535d93acb0a668ae"},{"problem":141,"code":"; surprised that this hasnt been solved more\n(fn trumpy[trump]\n (fn winner[cards]\n   (let [mytrump (or trump (:suit (first cards)))\n         possible-winners (filter #(= mytrump (:suit %)) cards)]\n     (last (sort-by :rank possible-winners)))))","user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn game [trump-suit]\n  (fn winner [cards] \n    (reduce (fn [acc el] \n\t           (if (and (= (:suit acc) (:suit el)) (< (:rank acc) (:rank el))) \n\t\t\t       el \n\t\t\t\t   (if (and (= trump-suit (:suit el)) (not= (:suit acc) trump-suit)) el acc))) \n\t  (first cards) (next cards))))","problem":141,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn __ [suit]\n  (fn [s]\n    (let [suit (or suit (:suit (first s)))]\n      (->> s\n         (sort #(cond\n                 (and (= suit (:suit %1)) (= suit (:suit %2))) (> (:rank %1) (:rank %2))\n                 (= suit (:suit %1))  true\n                 (= suit (:suit %2)) false\n                 :else (> (:rank %1) (:rank %2))))\n         first))))","problem":141,"user":"504f57c7e4b0a02f9cffde71"},{"problem":141,"code":"(fn [trump]\n  (letfn [(trump? [x] (= (:suit x) trump))\n          (higher? [a b] (> (:rank a) (:rank b)))]\n    (fn [cards]\n      (reduce\n        (fn [w x]\n          (cond\n            (trump? x)\n              (if (trump? w)\n                (if (higher? x w) x w)\n                x)\n            (= (:suit x) (:suit w))\n              (if (higher? x w) x w)\n            :else w\n          ))\n        cards)))\n  )","user":"53d78b64e4b0e771c3025466"},{"code":"(letfn [(rank [lead trump c]\n          (condp = (:suit c)\n            trump\n            (+ 13 (:rank c))\n\n            lead\n            (:rank c)\n\n            0))]\n  (fn [trump]\n    (fn [cards]\n      (->> cards\n        (sort-by (partial rank (-> cards first :suit) trump))\n        last))))","problem":141,"user":"50b668dde4b08fb537db98f2"},{"problem":141,"code":"(fn [t]\n  (fn [c]\n    (apply max-key :rank (filter #(= (or (some #{t} (map :suit c)) (-> 0 c :suit)) (:suit %)) c))))","user":"514d8084e4b019235f6c0588"},{"problem":141,"code":"(fn tricky [trump]\n   (fn [cards]\n     (let [suit (or trump (:suit (first cards)))]\n       (last (sort-by :rank (filter #(= suit (:suit %)) cards))))))","user":"535eaa73e4b04ce2eb3ed2d4"},{"code":"(fn c [t]\n  (letfn [(max-c [l] (last (sort-by :rank l)))]\n    (fn [l]\n      (let [s (filter #(= (:suit %) t) l)\n            w (if (empty? s)\n                (filter #(= (:suit %) (:suit (first l))) l)\n                s)]\n        (max-c w)))))","problem":141,"user":"4facd2fae4b081705acca22f"},{"problem":141,"code":"(fn [suit]\n  (let [suits-order {:club 1 :diamond 2 :heart 3 :spade 4}\n        cards-co (fn [x y]\n                   (compare [((:suit x) suits-order) (:rank x)]\n                            [((:suit y) suits-order) (:rank y)]))]\n    (fn [cards]\n      (last\n        (sort\n          cards-co\n          (if (nil? suit)\n            cards\n            (filter (fn [c] (= (:suit c) suit)) cards)))))))","user":"529dfc6de4b04e0c58e87b8a"},{"problem":141,"code":"(fn [led-suit]\n  (fn [[ {first-suit :suit first-rank :rank } & t :as colls]]\n    (let [leading (if (nil? led-suit) first-suit led-suit )]\n      (->> (filter #(= leading (% :suit)) colls)\n           (sort-by #(% :rank))\n           (last)))))","user":"608ec5e4e4b03bd49d9f36c0"},{"code":"(fn q141 [s]\n  (fn [coll]\n    (let [ suit {:spade 50 :heart 40 :diamond 30 :club 20} ] \n      (->> coll\n        (filter #(or (nil? s) (= s (:suit %))))\n        (apply max-key #(+ (suit (:suit %)) (:rank %)))))))","problem":141,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"(fn [trump] \n  (fn [trick] \n    (let [leds (filter #(= ((first trick) :suit) (% :suit)) trick)\n          trumps (when trump (filter #(= trump (% :suit)) trick))]\n          (if (empty? trumps) (apply max-key #(% :rank) leds) (apply max-key #(% :rank) trumps)))))","problem":141,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn trick-winner [trump]\n  (letfn [(select [k v m]\n                  (filter (comp (partial = v) k) m))]\n    (fn [cards]\n      (let [trumps (select :suit trump cards)\n            winning-suit (or (not-empty trumps)\n                             (select :suit (:suit (first cards)) cards))]\n        (apply max-key :rank winning-suit)))))","problem":141,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"(fn [trump]\r\n    (fn [cards]\r\n      (let [l (:suit (first cards))\r\n            rank (fn [c] \r\n                   (+ (:rank c)\r\n                      (cond (= (:suit c) l) 50\r\n                            (= (:suit c) trump) 100\r\n                            :else 0)))]\r\n        (reduce \r\n          (fn [f s] (if (>= (rank f) (rank s)) f s))\r\n          cards))))","problem":141,"user":"4f0da4e4535d0136e6c22319"},{"code":"(fn [t] (fn [l] (reduce (fn f [{s1 :suit r1 :rank :as c1} {s2 :suit r2 :rank :as c2}] (if (= s1 s2) (if (< r1 r2) c2 c1) (if (= s2 t) c2 c1))) l)))","problem":141,"user":"4ede8789535d10e5ff6f5337"},{"problem":141,"code":"(fn [a]\n    (fn [l]\n      (let [f :suit r :rank\n            a (or a (f (first l)))]\n        (reduce #(if (and (= a (f %2)) (> (r %2) (r %1))) %2 %1) l))))","user":"57d9f603e4b0bd073c20240a"},{"problem":141,"code":"(fn game [trump]\n  (fn [cards]\n    (letfn [(similar [suit]\n              (filter #(= suit (get % :suit)) cards))\n            (leader []\n              (get (first cards) :suit))\n            (top-rank [suit]\n              (last (sort-by :rank (similar suit))))]\n\n      (if trump\n        ((game nil) (similar trump))\n        (top-rank (leader))))))","user":"5344fe13e4b084c2834f4a32"},{"code":"(fn [t]\n  (fn [cs]\n    (loop [lead (get (first cs) :suit)\n           high (first cs)\n           hight (if (= t lead) (first cs) nil)\n           cs (next cs)]\n      (if (empty? cs)\n        (if hight hight high)\n        (if (and (= t (get (first cs) :suit))\n                 (or (not hight) (< (get hight :rank) (get (first cs) :rank) )  ))\n          (recur lead high (first cs) (next cs))\n          (if (and (= lead (get (first cs) :suit)) (< (get high :rank) (get (first cs) :rank) )  )\n            (recur lead (first cs) hight (next cs))\n            (recur lead high hight (next cs)) ))))))","problem":141,"user":"5349ac2be4b084c2834f4a67"},{"code":"(fn card-winner [trump]\n  (fn [cards]\n    (let [trump-cards (sort\n                        #(> (%1 :rank) (%2 :rank))\n                        (filter #(= (% :suit) trump) cards))\n          sec-trump ((first cards) :suit)]\n      (if (empty? trump-cards)\n        ((card-winner sec-trump) cards)\n        (first trump-cards)))))","problem":141,"user":"526ee63de4b03e8d9a4a733f"},{"problem":141,"code":"(fn trick-winner [trump]\n  (fn [cards]\n    (->> cards\n         (sort-by (juxt #(= trump\n                            (:suit %))\n                        #(= (:suit (first cards))\n                            (:suit %))\n                        :rank))\n         last)))","user":"57e0f30ae4b0bfb2137f5a66"},{"problem":141,"code":"(fn [trump-suit]\n  (fn [cards]\n    (let [winning-suit (or trump-suit\n                           (:suit (first cards)))\n          winning-suit-only (partial filter \n                                     #(= (:suit %) winning-suit))]\n      (->> cards\n           (winning-suit-only)\n           (sort-by :rank)\n           (last)))))","user":"5424c523e4b01498b1a71b03"},{"problem":141,"code":"; Reduce is the strategy, \n; 1. We use the initial value as {:suit suit-arg} if there is a non nil suit argument.\n; 2. If there is no suit then the (first arg) is the init value. {:suit .. :rank ..}\n; We filter all the key value pairs of (args) for the suit-arg and reduce it using max over :rank\n\n;Ah and as an optimization we can generate a transducer from the filter function so that it is more efficient :)\n; Ok I can't use transducers in this version of clojure but its commented below\n\n(fn [suit-arg]\n\n    (fn [plays]\n    ; filter function\n    (letfn [\n            (init-fn []\n              (if suit-arg\n                suit-arg\n                (:suit (first plays)))\n            )\n            (filter-fn [play]\n            \t(let [{:keys [suit]} play]\n                   (= suit (init-fn))\n             \t)\n             )\n            (reduce-fn \n              [init play] \n              (let [{:keys [suit rank]} play]\n                 (assoc init \n                        :rank (max rank (get init :rank -1))\n                        :suit suit)\n                 )\n              \n              )\n            ]\n      (reduce reduce-fn {} (filter filter-fn plays))\n      ; (transduce filter-fn (completing reduce-fn) {} plays) ; A more efficient transduce solution.\n    )\n  )\n)","user":"5722bf99e4b0c5bde472c0d6"},{"problem":141,"code":"(fn tricky-card-games [trump-suit]\n  (fn winner [cards]\n    (let [trump-suit (or trump-suit ((first cards) :suit) trump-suit)]\n      (apply max-key :rank (filter #(= trump-suit (% :suit)) cards)))))","user":"5879d577e4b01531a375ead8"},{"code":"(fn [t] (fn [s] (let [rank #(get % :rank) suit #(get % :suit) h (if t t (suit (first s)))] (apply max-key #(let [r (rank %)] (* (if (= (suit %) h) 1000 1) (rank %))) s))))","problem":141,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":141,"code":"(fn\n  [t]\n  (fn [l]\n    (let [led (if t\n                t\n                (:suit (first l)))]\n      (last (sort-by :rank (filter #(= led (:suit %))\n                                   l))))))","user":"5893c64ce4b00487982d524b"},{"problem":141,"code":"(fn [trump]\n    (fn [[{leader :suit} & _ :as trick]]\n      (apply max-key\n             (fn [{:keys [suit rank]}]\n               (+ (if (and trump (= suit trump))\n                    13\n                    (if (= suit leader) 0 -13)) rank)) trick)))","user":"57b3efb1e4b0fbc9809a278a"},{"problem":141,"code":"(fn t [trump] \n  (fn [coll]\n    (let [lead (:suit (first coll))] \n      (apply max-key (fn [hand]\n                       (let [{:keys [suit rank]} hand] \n                         (cond\n                           (= trump suit) (* 100 rank)\n                           (= lead suit) (* 50 rank)\n                           :else rank)))\n             coll))))","user":"56102f50e4b05f002753df6b"},{"code":"(fn winner [trump]\n  (fn winner [cards]\n    (let [first-suit (:suit (first cards))\n          ranks {2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 :jack 11 :queen 12 :king 13 :ace 14}\n          ranker\n            (fn [card]\n              (let [rank (:rank card)]\n                (cond\n                  (= trump (:suit card)) (+ 40 (ranks rank))\n                  (= first-suit (:suit card)) (+ 20 (ranks rank))\n                  :else (ranks rank))))]\n      (first (sort-by ranker > cards)))))","problem":141,"user":"4fb12b35e4b081705acca275"},{"code":"(fn [trump]\r\n  (fn [cards] (let [\r\n    p (assoc {} (:suit (first cards)) 12, trump 24)\r\n    pwr #(+ (:rank %) (get p (:suit %) 0))]\r\n      (reduce #(if (< (pwr %1) (pwr %2)) %2 %1) cards))))","problem":141,"user":"50336c6be4b0c6c1199c710f"},{"code":"(fn [trump]\n    (fn [cards]\n      (let [suit-led (->> cards first :suit)\n            get-cards (fn [suit] (->> cards\n                                      (filter #(= (:suit %) suit))\n                                      (sort-by :rank)\n                                      reverse))\n            trump-cards (get-cards trump)\n            suit-led-cards (get-cards suit-led)]\n        (first (concat trump-cards suit-led-cards)))))","problem":141,"user":"4ee26f01535d10e5ff6f5368"},{"problem":141,"code":"(fn [g]\n (fn [L]\n    (let [gana (if (nil? g) ((first L) :suit) g)]\n      (first\n       (sort-by :rank #(>= %1 %2) (filter #(= gana (:suit %)) L)))\n      )))","user":"54e51c7be4b024c67c0cf7f7"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [led (-> cards first :suit)\n          p-map (assoc (hash-map trump 30) led 20)]\n      (first (sort-by #(+ ((:suit %) p-map 0)\n                          (:rank %)) #(> %1 %2) cards)))))","user":"5338387de4b0e30313ee6c91"},{"problem":141,"code":"(fn trump\n  [suit]\n  (fn [cards]\n    (let [trump-suit (or (some (fn [card]\n                                 (and (= suit (:suit card))\n                                      (:suit card)))\n                               cards)\n                         (:suit (first cards)))]\n      (apply max-key :rank (filter #(= trump-suit (:suit %)) cards)))))","user":"4e586949535d8a8b8723a292"},{"problem":141,"code":"(fn [tump]\n  (fn [cards]\n    (let [lead ((first cards) :suit)]\n      (reduce #(cond \n                (and (= (%1 :suit) tump) (not= (%2 :suit) tump)) %1\n                (and (= (%2 :suit) tump) (not= (%1 :suit) tump)) %2\n                (and (= (%1 :suit) lead) (not= (%2 :suit) lead)) %1\n                (and (= (%2 :suit) lead) (not= (%1 :suit) lead)) %2\n                (> (%1 :rank) (%2 :rank)) %1\n                :else %2) \n              cards))))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn trick-winner [trump]\n  (letfn [(choose-highest [card1 card2]\n            (if (and (not (nil? trump))\n                     (= (:suit card2) trump)\n                     (not (= (:suit card1) trump)))\n              card2\n              (if (>= (:rank card1) (:rank card2))\n                card1\n                card2)))\n          (trick-winner' [highest [card & cards]]\n            (let [new-highest (choose-highest card highest)]\n              (if (nil? cards)\n                new-highest\n                (recur new-highest cards))))]\n    (if (nil? trump)\n      #((trick-winner (:suit (first %1))) %1)\n      #(trick-winner' (first %1) (rest %1)))))","problem":141,"user":"4ff355a1e4b0678c553fc34d"},{"code":"(fn [trump]\n  (fn [cards]\n    (loop [[{s :suit, r :rank :as c} & cs :as css] (rest cards)\n           winner (first cards)\n           lead (:suit (first cards))]\n      (if (empty? css) winner\n        (recur\n          cs\n          (if (or\n                (and (= s trump) (or (not= (:suit winner) trump) (> r (:rank winner))))\n                (and (not= s trump) (not= (:suit winner) trump) (= s lead) (> r (:rank winner)))) c winner)\n          lead)))))","problem":141,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn [t]\n  (fn [c] (last (sort-by :rank (filter #(= (or t (:suit (first c))) (% :suit)) c)))))","problem":141,"user":"4f2d5f5de4b0d6649770a05a"},{"code":"(fn [trump]\n  (fn [s]\n    (if (and trump (some #(= trump (% :suit)) s))\n      (last (sort-by #(% :rank) (filter #(= trump (% :suit)) s)))\n      (let [suit ((first s) :suit)] (last (sort-by #(% :rank) (filter #(= suit (% :suit)) s)))))))","problem":141,"user":"4e8b98fc535d65386fec2124"},{"problem":141,"code":"(fn [trump]\n    (fn [cs]\n      (reduce (fn [acc c] \n                (if (and (or (= (:suit c) trump)\n                             (= (:suit c) (:suit acc)))\n                         (> (:rank c) (:rank acc)))\n                  c\n                  acc))\n              cs)))","user":"513e8141e4b02b2a3d8235c1"},{"code":"(fn tricky-card [trump-suit]\r\n  (fn winner [cards]\r\n    (let\r\n      [lead-card (first cards)\r\n       lead-suit (:suit lead-card)\r\n       lead-suit? (fn [s] (= s lead-suit))\r\n       trump-suit? (fn [s] (= s trump-suit))]\r\n      (reduce (fn [card1 card2]\r\n                (let\r\n                  [suit1 (:suit card1)\r\n                   suit2 (:suit card2)\r\n                   rank1 (:rank card1)\r\n                   rank2 (:rank card2)]\r\n                  \r\n                  (cond (and\r\n                          (trump-suit? suit1)\r\n                          (trump-suit? suit2)\r\n                          (> rank2 rank1)) card2\r\n                        (trump-suit? suit1) card1\r\n                        (trump-suit? suit2) card2\r\n                        (and\r\n                          (lead-suit? suit2)\r\n                          (> rank2 rank1)) card2\r\n                        :else card1))) cards))))","problem":141,"user":"4f036fb3535dcb61093f6ac8"},{"problem":141,"code":"(fn [trump]\n    (letfn [(compare-ranks [r1 r2]\n              (cond\n                (< r1 r2) :lower\n                (> r1 r2) :greater\n                :else :equal))\n            (compare-cards [trump c1 c2]\n              (cond\n                (= (:suit c1) (:suit c2)) (compare-ranks (:rank c1) (:rank c2))\n                (= (:suit c1) trump) :greater\n                (= (:suit c2) trump) :lower\n                :else :incomparable))]\n    (fn [cards]\n      (loop [s (rest cards), mxcard (first cards)]\n        (if (seq s)\n          (case (compare-cards trump mxcard (first s))\n            (:greater :equal :incomparable) (recur (rest s) mxcard)\n            :lower (recur (rest s) (first s)))\n          mxcard)))))","user":"54ca93abe4b057c6fda3a264"},{"problem":141,"code":"(fn p141\n  [suit]\n  (fn [coll]\n    (if suit\n      (last (sort-by :rank (filter #(= suit (:suit %)) coll)))\n      (last (sort-by :rank (filter #(= (:suit (first coll)) (:suit %)) coll))))))","user":"520cb8c4e4b0b022ef140c9a"},{"problem":141,"code":"(fn [suit]\n  (fn [cards]\n    (let [fs (:suit (first cards))\n          ff (if suit #(= suit (:suit %)) #(= fs (:suit %)))]\n      (->> cards\n           (filter ff)\n           (sort (fn [c1 c2] (- (:rank c2) (:rank c1))))\n           first))))","user":"4ea365e2535d7eef308072c5"},{"problem":141,"code":"(fn [suit]\n (fn [cards]\n  (let [lead (or suit (:suit (first cards)))]\n   (->> cards\n    (filter #(= lead (:suit %)))\n    (sort-by :rank)\n    last))))","user":"5b61aa6ae4b0c6492753e712"},{"problem":141,"code":"(fn trick [trump]\n  (fn [cards]\n    (let [suit (if (nil? trump) (:suit (first cards)) trump)]\n      (last (sort-by :rank (filter #(= (:suit %) suit) cards))))))","user":"52fc34cee4b047fd55837015"},{"problem":141,"code":"(fn [suit]\n  (fn [cards]\n    (let [lead-suit\n          (or suit (:suit (first cards)))\n          suit-score #(if (= (:suit %) lead-suit)\n                        0\n                        1)\n          f-cmp (fn [x y]\n                  (cond\n                    (= (suit-score x) (suit-score y))\n                    (- (:rank y) (:rank x))\n                    :else (- (suit-score x)\n                             (suit-score y))))]\n      (first (sort-by identity f-cmp cards)))))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [sorted (sort-by :rank cards)]\n    (last (concat\n      (filter #(= (:suit (first cards)) (:suit %)) sorted)\n      (filter #(= trump (:suit %)) sorted))))))","user":"5b0bd9cfe4b0cc2b61a3bdd9"},{"problem":141,"code":"(fn [t]\n  (fn [coll] (letfn [(b [c1 c2]\n               (if (= (:suit c1) (:suit c2))\n                      (if (> (:rank c1) (:rank c2)) c1 c2)\n                      (if (= t (:suit c2)) c2 c1)))]\n               (reduce b coll))))","user":"54908cc1e4b0b312c081ff32"},{"code":"(fn [s f t]\n  #(last\n    (sort-by\n     :rank\n     (or (f (s t) %) (f (s ((first %) :suit)) %)))))\n(fn [x] #(= (% :suit) x))\n#(seq (filter % %2))","problem":141,"user":"4f296a80e4b0d6649770a02a"},{"problem":141,"code":"(fn [trump-suit]\n  (fn [cards]\n    (let [led-suit (:suit (first cards))]\n      (letfn [(score [card] (+ (if (= trump-suit (:suit card)) 1000 0)\n                               (if (= led-suit (:suit card)) 100 0)\n                               (:rank card)))]\n        (first (sort (fn [a b] (apply > (map score [a b])))\n                     cards))))))","user":"5764457ae4b0994c1922fbf3"},{"problem":141,"code":"(fn [trump]\n    (let [suits (assoc {:club 10 :spade 20 :heart 30 :diamond 40} trump 50)]\n      (fn [cards]\n        (first (last \n                (sort-by \n                 #(last %) \n                 (map \n                  (fn [{:keys [suit rank] :as hand}] [hand (+ (get suits suit) rank)]) \n                  cards)))))))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":141,"code":"(fn [trump-suit]\n  (fn [cards]\n    (let [suits (map :suit cards)\n          contender-suit (or (some #{trump-suit} suits)\n                             (first suits))]\n      (last (sort-by :rank (filter (comp #{contender-suit} :suit) cards)))\n      )))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn [trumpsuit]\n  (fn [cards]\n    (let [suit (:suit (first cards))]\n      (letfn [(score [card] \n        (condp = (:suit card)\n          trumpsuit 2\n          suit 1\n          0))]\n      (->> cards\n           (sort-by (juxt score :rank))\n           last)))))","problem":141,"user":"4f4e91a9e4b03ad3f0c10cca"},{"problem":141,"code":"(fn trick-handler [trump-suit]\n  (fn [trick]\n    (let [precedence (assoc {trump-suit 100}\n                            (:suit (first trick))\n                            10)]\n      (last\n        (sort-by (juxt #(precedence (:suit %))\n                       :rank)\n                 trick)))))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":141,"code":"(fn [suit-trump]\n    (fn [coll-cards]\n      (let [suit-lead (:suit (first coll-cards))\n            cards-suit (filter #(or (= (:suit %)\n                                       suit-trump)\n                                    (= (:suit %)\n                                       suit-lead))\n                               coll-cards)\n            vec-cards (map (fn [card]\n                             (let [suit (if (= (:suit card)\n                                               suit-trump)\n                                          2\n                                          1)\n                                   rank (:rank card)]\n                               [suit rank (:suit card)]))\n                           cards-suit)\n            best (last (sort vec-cards))\n            result (let [suit (nth best 2)\n                         rank (nth best 1)]\n                     {:suit suit :rank rank})]\n        result)))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn trump [acard]\n  (fn winner [cards]\n    (letfn [(trumpsuit [card cards] (if (nil? card) \n                                      (:suit (first cards))\n                                      card))\n            (group-by-suit [cards]\n              (group-by :suit cards))]\n      (apply max-key :rank ((trumpsuit acard cards) (group-by-suit cards))))))","problem":141,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn tcg [suit]\n  (fn winner [cards]\n    (let [trump suit\n          trumps (filter #(= (% :suit) trump) cards)\n          lead ((first cards) :suit)\n          leads (filter #(= (% :suit) lead) cards)]\n      (if (empty? trumps)\n        (apply (partial max-key :rank) leads)\n        (apply (partial max-key :rank) trumps)))))","problem":141,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n      (let [trump (or trump (:suit (first cards)))\n            compare-cards (fn [{s1 :suit r1 :rank} {s2 :suit r2 :rank}]\n                            (compare [(= s1 trump) r1]\n                                     [(= s2 trump) r2]))]\n        (first (sort #(compare-cards %2 %1) cards)))))","user":"5de12192e4b0948ae9d9aded"},{"problem":141,"code":"(fn\n  [trump-suit];keyword\n  (fn winner\n    [hands];vector\n    (let [suit (if (nil? trump-suit) (:suit (first hands)) trump-suit)]\n      (last (sort-by :rank (filter #(= suit (:suit %)) hands))))))","user":"56ab7578e4b03c432f18733d"},{"problem":141,"code":"(fn [t1] (fn [c] (last (sort-by #(+ (if (= (:suit %) t1) 26 (if (= (:suit %) (:suit (first c))) 13 0)) (:rank %)) c))))","user":"53b2a7f8e4b047364c04449c"},{"code":"(fn trick-cards [trump]\n  (fn [cards]\n    (let [trump (or trump\n                    (:suit (first cards)))]\n      (let [ts (filter #(= trump (:suit %)) cards)]\n        (reduce (fn [c1 c2]\n                  (if (< (:rank c1) (:rank c2))\n                    c2\n                    c1)) ts)))))","problem":141,"user":"4dd62278535d2dad7130b5c7"},{"problem":141,"code":"(fn [trump]\n    (fn [trick]\n      (let [lead-suit (if trump trump (:suit (first trick)))]\n        (last (sort-by :rank (filter #(= lead-suit (:suit %)) trick))))))","user":"55c5b55fe4b0e31453f649b5"},{"problem":141,"code":"(fn [t]\n  (fn [s]\n    (let [o {:spade 4 :heart 3 :diamond 2 :club 1}\n          v (o t)\n          f (fn [c] (o (:suit c)))\n          g (fn [c] (:rank c))\n          cmp (fn [c1 c2 ts]\n                 (cond\n                  (and (= ts (f c1)) (not= ts (f c2))) c1\n                  (and (= ts (f c2)) (not= ts (f c1))) c2\n                  :else (cond \n                         (> (f c1) (f c2)) c1\n                         (< (f c1) (f c2)) c2\n                         :else (if (< (g c1) (g c2)) c2 c1))))]\n        (loop [r (rest s)\n               m (first s)]\n          (if (empty? r)\n            m\n            (recur (rest r) (cmp m (first r) v)))))))","user":"55995fa7e4b031d6649c9ba9"},{"problem":141,"code":"(fn [t]\n  (fn [cards]\n    (loop [trump t best {:suit trump :rank -1} cards cards]\n      (if (empty? cards) best\n        (let [card (first cards)]\n          (cond\n            (nil? trump)\n            (recur (:suit card) card (rest cards))\n            \n            (and (= (:suit card) trump)\n                 (> (:rank card) (:rank best)))\n            (recur trump card (rest cards))\n               \n            :else (recur trump best (rest cards))))))))","user":"504e71cbe4b0f6ff3350c4b3"},{"code":"(fn [trump-suit]\n    (fn [cards]\n      (last\n        (sort-by :rank\n                 (if-let [trumps (seq (filter #(= trump-suit (:suit %)) cards))]\n                   trumps\n                   (filter #(= (:suit (first cards)) (:suit %)) cards))))))","problem":141,"user":"4db1b3951254ad5b4805fa6f"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [led ((first cards) :suit)\n\t      of-suit (fn [s] (sort-by :rank (filter #(= (% :suit) s) cards))) ]\n\t  (if-let [t (last (of-suit trump))] t (last (of-suit led))))))","problem":141,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"(fn trump [t]\n  (fn winner [[{:keys [suit]} :as cards]]\n    (let [compare-cards (fn [card1 card2]\n                          (cond\n                            (= (card1 :suit) (card2 :suit))   (max-key :rank card1 card2)\n                            (= (card1 :suit) t)               card1\n                            (= (card2 :suit) t)               card2\n                            (= (card1 :suit) suit)            card1\n                            (= (card2 :suit) suit)            card2\n                            :else                             (max-key :rank card1 card2)\n                            )\n                          )]\n    (reduce compare-cards cards))\n    ))","problem":141,"user":"53307da1e4b019098a6f8b5e"},{"code":"(fn winner [trump]\n  (fn [cards]\n    (let [suit (fn [s] (filter #(= (:suit %) s) cards))\n          trumps (suit trump)\n          led (suit (-> cards first :suit))]\n      (apply max-key :rank (if (empty? trumps) led trumps)))))","problem":141,"user":"514c2d05e4b02b8cbb2a9278"},{"code":"(fn [s]\n  (fn [xs]\n    (let [m (fn [a b]\n              (if (= (:suit a) (:suit b))\n                {:suit (:suit a) :rank (max (:rank a) (:rank b))}\n                a))]\n      (if (nil? s)\n        (reduce m (first xs) (rest xs))\n        (reduce m {:suit s :rank 1} xs)))))","problem":141,"user":"5201572be4b0d7096e99ddbb"},{"code":"(fn [trump]\n  (let [suit-vals (conj {:heart 400 :diamond 300 :spade 200 :club 100} [trump 500])]\n    (fn [cards]\n      (let [get-card-val (fn [card]\n                           (let [suit-val (suit-vals (card :suit))\n                                 rank (card :rank)]\n                             (+ suit-val rank)))]\n        (last (sort-by get-card-val cards))))))","problem":141,"user":"51899891e4b0288ada3dbdab"},{"code":"(fn [trump]\n  (fn [played]\n    (let [led (if trump trump (:suit (first played)))]\n      (reduce #(if (and (= (:suit %2) led) (> (:rank %2) (:rank %))) %2 %) played))))","problem":141,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":141,"code":"(fn take-trick [trump]\r\n  (fn [cards]\r\n    (let [trump (or trump (:suit (first cards)))]\r\n      (first (sort-by :rank > \r\n                      (filter #(= trump (:suit %))\r\n                              cards))))))","user":"55d0e76ae4b0e31453f64a40"},{"code":"(fn [t]\r\n  #(let [w? (fn [[{s1 :suit r1 :rank} {s2 :suit r2 :rank}]]\r\n                  (and (< r1 r2) (or (= s2 t) (= s1 s2))))\r\n         w (take-while w? (partition 2 1 %))]\r\n    (if (empty? w) (first %)\r\n        (last (last w)))))","problem":141,"user":"4f58d92fe4b0a7574ea71858"},{"problem":141,"code":"(fn winner [t]\n  (letfn [(f [s cs] (->> cs (filter #(= (% :suit) s)) (sort-by :rank) reverse))]\n    (fn [cs]\n      (first (concat (f t cs) (f (:suit (first cs)) cs))))))","user":"53b39d82e4b047364c0444a6"},{"code":"(fn [t] #(last (sort-by (fn [m] (+ (* 100 ((conj {:spade 4, :heart 3, :diamond 2, :club 1} {t 5}) (m :suit)))  (m :rank))) %)))","problem":141,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"problem":141,"code":"(fn [ winner ]\n  (fn [cards]\n    (let [w_c (if winner   \n              winner\n              (:suit (first cards)))\n          g (filter #(= (:suit %) w_c ) cards)]\n      (first (sort-by :rank > g)))))","user":"50e90813e4b033b0e80d11e7"},{"code":"(fn [trump]\r\n  (fn winner [cards]\r\n    (reduce\r\n      #(if (or\r\n            (and (= (%1 :suit) (%2 :suit))\r\n              (< (%1 :rank) (%2 :rank)))\r\n            (and (= (%2 :suit) trump) (not (= (%1 :suit) trump))))\r\n            %2 %1)\r\n    cards)))","problem":141,"user":"504e14c2e4b078edc5f593bf"},{"problem":141,"code":"(fn gen-win-checker [trump]\n  (fn win-checker [hand]\n    (let [by-suit (group-by :suit hand)\n          win-suit (or trump (:suit (first hand)))]\n      (last (sort-by :rank (win-suit by-suit))))))","user":"56fbf83de4b07572ad1a88da"},{"problem":141,"code":"(fn [trump]\n  (fn [tricks]\n    (let [trump (or trump (:suit (first tricks)))]\n         (apply max-key :rank (filter (comp (partial = trump) :suit) tricks)))))","user":"5958cef6e4b066ee0a44af94"},{"problem":141,"code":"(fn f141 [suit]\n  (let [lv {:spade 4 :heart 3 :club 2 :diamond 1}]\n    (if (nil? suit)\n      (fn [coll]\n        (let [nmap (map #(assoc % :level ((:suit %) lv)) coll)\n              highest (->>\n                        (map #(:level %) nmap)\n                        (apply max))\n              filtered (filter #(= highest (:level %)) nmap)]\n          (if (< 1 (count filtered))\n            (-> (->>\n               (sort-by :rank filtered)\n               last)\n                (dissoc :level))\n            (dissoc (first filtered) :level))))\n      (fn [coll]\n        (let [filtered (filter #(= suit (:suit %)) coll)]\n          (if (< 1 (count filtered))\n            (-> (->>\n                  (sort-by :rank filtered)\n                  last)\n                (dissoc :level))\n            (dissoc (first filtered) :level)))))))","user":"57bbc9bde4b05aa3c4741c31"},{"code":"(fn [t] \n  (fn [l] \n    (let [filtered (filter #(or (when (nil? t) \n                                  (= (:suit (first l)) (:suit %))) \n                                (= t (:suit %))) l)]\n      (first (sort-by :rank > filtered)))))","problem":141,"user":"4e68b46c535d8ccf87e9fe87"},{"code":"(fn make-winner [trump]\n    (letfn [(card-suite-value [lead-suite card]\n                (cond\n                    (= trump (card :suit)) 2\n                    (= lead-suite (card :suit)) 1\n                    :else 0))]\n        (fn [cards]\n            (let [lead-suite ((first cards) :suit)\n                  card-value (fn [card]\n                                (vector (card-suite-value lead-suite card)\n                                      (card :rank)))]\n                  (last (sort-by card-value (seq cards)))))))","problem":141,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn [t]\n  (fn [[l & _ :as xxs]]\n    (->> xxs \n         (filter #(= (:suit %) (if t t (:suit l)))) \n         (sort-by :rank) \n         last)))","problem":141,"user":"51efd397e4b0249c592fbdeb"},{"code":"(fn [trump]\n  (fn [trick]\n    (loop [[card & remaining] trick lead card]\n      (if card\n        (recur remaining (if (and (or (= (:suit card) (:suit lead)) (= trump (:suit card))) (> (:rank card) (:rank lead))) card lead))\n        lead))))","problem":141,"user":"4e49badd535dc968683fc4c9"},{"code":"(fn [t]\n  (fn [s]\n     (let [ trump  #(= t (:suit %))\n            better (fn [l r] (or (and (trump r) \n                                      (not (trump l)))\n                                 (and (= (:suit l) (:suit r))\n                                      (< (:rank l) (:rank r))))) ]\n\n        (reduce #(if (better %1 %2) %2 %1) s))))","problem":141,"user":"4e860e85535db62dc21a62f1"},{"problem":141,"code":"(fn trumpWinner [trump]\n  (fn [cards]\n    (let [leadSuit (if (nil? trump)\n                     (:suit (first cards))\n                     trump)]\n      (reduce (fn [result elem] (if (> (:rank elem) (:rank result))\n                                  elem\n                                  result))\n              (filter #(= (:suit %) leadSuit) cards)))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":141,"code":"(fn __ [trump]\n (fn [l]\n  (loop [acc (first l) h (rest l)]\n   (if (empty? h) acc\n      (if trump\n      \t  (if (= ((first h) :suit) trump)\n\t      (if (not= (acc :suit) trump)\n\t      \t  (recur (first h) (rest h))\n\t\t  (if (> ((first h) :rank) (acc :rank)) \n\t\t   (recur (first h) (rest h))\n\t\t   (recur acc (rest h))))\n\t      (if (and (= ((first h) :suit) (acc :suit)) (> ((first h) :rank) (acc :rank))) (recur (first h) (rest h)) (recur acc (rest h))))\n      (if (and (= ((first h) :suit) (acc :suit)) (> ((first h) :rank) (acc :rank))) (recur (first h) (rest h)) (recur acc (rest h))))))))","user":"52747090e4b03e8d9a4a74a5"},{"code":";; Determine highest rank card of trump suit, if any, returning it if\n;; there is one.  Else determine highest rank card of lead suit.\n\n(fn [trump-suit]\n  (fn [cards]\n    (let [high-card-with-suit\n          (fn [suit cards]\n            (if-let [cards-matching-suit (seq (filter #(= suit (:suit %))\n                                                      cards))]\n              (apply max-key :rank cards-matching-suit)))]\n      (or (high-card-with-suit trump-suit cards)\n          (high-card-with-suit (:suit (first cards)) cards)))))","problem":141,"user":"500d8c49e4b07ccb9a7ddb00"},{"problem":141,"code":"(fn [suit]\n  (let [rank (fn [num]\n               ((keyword (str num)) {:3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :10 8 :1 9 :2 10}))]\n    (fn [s]\n      (apply max-key #(rank (:rank %))\n             (if (nil? suit)\n               s\n               (filter #(identical? suit (:suit %)) s))))))","user":"52fac708e4b047fd55836fff"},{"problem":141,"code":"(fn winner-fn [trump-suit]\n  (fn winner [trick]\n    (let [suit-groups (group-by :suit trick)\n          top-suit (or trump-suit (:suit (first trick)))]\n      (last (sort-by :rank (top-suit suit-groups))))))","user":"58ed713de4b056aecfd47d84"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [trump* (if trump\n                   trump\n                   (:suit (first cards)))]\n      (letfn [(card-comp [c1 c2]\n                (let [c1t (= trump* (:suit c1))\n                      c2t (= trump* (:suit c2))]\n                  (cond\n                    (or (and c1t c2t) (not (or c1t c2t)))\n                    (> (:rank c1) (:rank c2))\n\n                    c1t\n                    true\n\n                    c2t\n                    false)))]\n        (reduce #(if (card-comp % %2) % %2) cards)))))","user":"56bb652ae4b0f26550335953"},{"code":"(fn [t] (fn [c] (apply max-key :rank\n                       (filter #(= (if t t (:suit (first c))) (:suit %))\n                               c))))","problem":141,"user":"4ee88bfb535d93acb0a66881"},{"problem":141,"code":"(fn [s] (fn w \n          ([c] (w (rest c) (first c)))\n          ([c t] (if \n                   (empty? c)\n                   t\n                   (recur (rest c) (if (or\n                                        (and (= (:suit t) (:suit (first c))) (> (:rank (first c)) (:rank t)))\n                                        (and (not= (:suit t) (:suit (first c))) (= (:suit (first c)) s)))\n                                     (first c)\n                                     t))))))","user":"5a3c2a08e4b001c08efc0cdf"},{"problem":141,"code":"(fn trick-arbiter [trump]\n  (fn [cards]\n    (let [leading-suit (if (some #(= (:suit %) trump) cards)\n                         trump\n                         (:suit (first cards)))]\n      (apply max-key :rank (filter #(= (:suit %) leading-suit) cards)))))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":141,"code":"(fn [st]\n   (let [winner (fn [s  hands]\n                     (let [suit (if (nil? s) (:suit (first hands)) s)]\n                            (apply (partial max-key :rank) (filter #(= suit (:suit %)) hands))))]\n      (partial winner st)))","user":"5649615be4b0284900eef641"},{"problem":141,"code":"(fn tricky-card-games\n  [trump-suit]\n  (fn [played-cards]\n    (if (nil? trump-suit)\n      (reduce (fn [winning-card card]\n                   (if (and (= (:suit card) (:suit winning-card)) (> (:rank card) (:rank winning-card)))\n                     card\n                     winning-card)) (first played-cards) (rest played-cards))\n      (reduce (fn [winning-card card]\n                (if\n                  (or (and (= (:suit winning-card) trump-suit) (= (:suit card) trump-suit) (> (:rank card) (:rank winning-card)))\n                      (and (not (= (:suit winning-card) trump-suit)) (= (:suit card) trump-suit))\n                      (and (not (= (:suit winning-card) trump-suit)) (> (:rank card) (:rank winning-card)))) \n                  card\n                  winning-card\n                  )) (first played-cards) (rest played-cards)))))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn [trump]\n  (fn [cards]\n\t(let [lead (:suit (first cards))]\n      (apply max-key \n             (fn [{:keys [suit rank]}] (* rank (cond (= suit trump) 50, (= suit lead) 20, :else 1)))\n             cards))))","problem":141,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (reduce \n      (fn [best card] \n        (cond\n          (= (:suit best) (:suit card)) (if (> (:rank card)(:rank best)) card best)\n          (= trump (:suit card)) card\n          :else best))\n      cards)))","user":"55ecb2c0e4b0121d4835fdce"},{"code":"(fn [trump] \r\n    (fn [cards] \r\n      (let [lead (:suit (first cards))] \r\n        (apply max-key #(let [suit (:suit %)] (+ ((merge {lead 50} {trump 100}) suit 0) (:rank %))) cards))))","problem":141,"user":"4feada56e4b0140c20fb9c11"},{"problem":141,"code":"(fn [ts] (fn winner [trick] (if (nil? ts) \n           \t\t\t\t\t    (reduce #(if (not= (%1 :suit) (%2 :suit)) \n                                           \t %1 \n                                           \t (if (> (%1 :rank) (%2 :rank)) \n                                               \t %1 \n                                               \t %2)) \n                                        trick) \n           \t\t\t\t\t    (reduce #(if (= (%1 :suit) (%2 :suit)) \n                                          \t (if (> (%1 :rank) (%2 :rank)) %1 %2) \n                                          \t (cond \n                                              (= (%1 :suit) ts) %1\n                                              (= (%2 :suit) ts) %2\n                                              :else %1))\n                                        trick))))","user":"542c1f73e4b0dad94371f29d"},{"problem":141,"code":"(fn [trump]\n  (fn [[{lead :suit} :as trick]]\n    (let [grouped (group-by :suit trick)\n           winners (grouped trump (lead grouped))\n           [winner] (sort-by :rank > winners)]\n      winner)))","user":"554bd33ce4b0a04f7929959a"},{"code":"(fn [trump]\n  (if (nil? trump)\n    (fn [cards]\n      (let [trumpsuit (get (first cards) :suit)]\n        (last (sort-by :rank (filter #(= (get % :suit) trumpsuit) cards)))))\n    (fn [cards]\n      (last (sort-by :rank (filter #(= (get % :suit) trump) cards))))))","problem":141,"user":"51857e64e4b0da5a5be3babe"},{"problem":141,"code":"(fn [trump]\r\n  (let [\r\n    suit-is (fn [suit] (fn [card] (= (card :suit) suit)))\r\n    highest (fn [cards] (apply max (map :rank cards)))]\r\n    (fn [cards]\r\n      (let [\r\n        trump-cards\r\n          (if (nil? trump) [] (filter (suit-is trump) cards))\r\n        leading-suit (:suit (first cards))\r\n        leading-cards (filter (suit-is leading-suit) cards)]\r\n        (if (empty? trump-cards)\r\n          {:suit leading-suit :rank (highest leading-cards)}\r\n          {:suit trump :rank (highest trump-cards)})))))","user":"555bd27ae4b0b056612e2244"},{"code":"#(fn [t]\n  (reduce (fn [{s :suit r :rank :as c} {S :suit R :rank :as C}]\n    (cond\n      (= s S) {:suit s :rank (max r R)}\n      (= S %) C\n      :t      c)) (first t) (rest t)))","problem":141,"user":"4e96557d535dbda64a6f6b43"},{"problem":141,"code":"(fn [t] (fn w [s] \n          (let [\n   suits (assoc {:club 0 :diamond 0 :heart 0 :spade 0} ((first s) :suit) 1 t 2) \n   sw #(suits (:suit %))\n   m (fn [a b] (cond \n                (> (sw a) (sw b)) a \n                (< (sw a) (sw b)) b \n                (> (:rank a) (:rank b)) a \n                :else b))] \n            (reduce m s))))","user":"526a3412e4b03e8d9a4a721e"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [fs (:suit (first cards))]\n    (loop [w (first cards)\n           o (rest  cards)]\n      (cond\n        (empty? o)\n          w\n        (= trump (:suit w) (:suit (first o)))\n          (if (> (:rank w) (:rank (first o)))\n            (recur w (rest o))\n            (recur (first o) (rest o)))\n        (= trump (:suit w))\n          (recur w (rest o))\n        (= trump (:suit (first o)))\n          (recur (first o) (rest o))\n        (= fs (:suit w) (:suit (first o)))\n          (if (> (:rank w) (:rank (first o)))\n            (recur w (rest o))\n            (recur (first o) (rest o)))\n        (and (= fs (:suit w)) (not= fs (:suit (first o))))\n          (recur w (rest o))\n        :e\n          (if (> (:rank w) (:rank (first o)))\n            (recur w (rest o))\n            (recur (first o) (rest o))))))))","problem":141,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn [trump]\n  (fn [cards]\n    (reduce\n      #(cond\n        (= (:suit %2) (:suit %1))\n          (max-key :rank %1 %2)\n        (= (:suit %2) trump) %2\n        :else %1)\n      cards)))","problem":141,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":141,"code":"(fn tricky-card-games\n  [trump]\n  (fn [[& cards]]\n    (let [pick-winner\n          (fn\n            [cards]\n            (last (sort-by :rank cards)))\n\n          trump-cards\n          (filter #(= trump (:suit %)) cards)\n\n          first-pick-cards\n          (filter #(= (:suit (first cards)) (:suit %)) cards)]\n\n      (cond\n        (not (empty? trump-cards))\n        (pick-winner trump-cards)\n\n        (not (empty? first-pick-cards))\n        (pick-winner first-pick-cards)\n\n        :else\n        (pick-winner cards)))))","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn __ [trump]\n  (fn [trick]\n    (let [winning-suit (if trump trump ((first trick) :suit))]\n      (->> trick\n           (filter #(= (% :suit) winning-suit))\n           (sort-by :rank)\n           (last)))))","problem":141,"user":"52463059e4b09dbe66b56198"},{"code":"partial (fn f [c x] \n          (if-let [a (last (sort-by :rank (filter #(= c (:suit %)) x)))]\n            a \n            (f (:suit (first x)) x)))","problem":141,"user":"4efb2fd7535dced4c769f274"},{"problem":141,"code":"(fn [s]\n  (fn trick-taking [cs]\n    (letfn [\n            (suit [cs s]\n              (if (nil? s)\n                (get (first cs) :suit)\n                s))\n            \n            (max-card [{s1 :suit r1 :rank :as c1}  {s2 :suit r2 :rank :as c2} s]\n              (cond\n                (and (= s1 s2 s) (>= r1 r2)) c1\n                (and (= s1 s2 s) (> r2 r1)) c2\n                (= s1 s) c1\n                (= s2 s) c2\n                (>= r1 r2) c1\n                (> r2 r1) c2))\n            \n            (play [cs s]\n              (reduce (fn [acc c] (max-card acc c s)) (first cs) (rest cs)))]\n      \n      (play cs (suit cs s)))))","user":"57d9bca1e4b0bd073c202405"},{"problem":141,"code":"(fn [trump]\n  (fn winner [trick]\n    (letfn [(trick-comparator [& ts]\n                             (let [to-num-by-suit (fn [suit] (fn [c] (if (= suit (c :suit)) 1 0)))\n                                   to-num-by-rank #(% :rank)\n                                   map-cmp (fn [map-f] (apply compare (map map-f ts)))\n                                   trump-cmp (map-cmp (to-num-by-suit trump))\n                                   lead ((first trick) :suit)\n                                   lead-cmp (map-cmp (to-num-by-suit lead))\n                                   rank-cmp (map-cmp to-num-by-rank)]                                    \n                               (->> [trump-cmp lead-cmp rank-cmp]\n                                 (remove zero?)\n                                 first)))]                               \n       (->> trick\n        (sort trick-comparator)\n        last))))","user":"53c38b8ce4b00fb29b22127b"},{"problem":141,"code":"(fn [trump]\n  (letfn [(highest-rank [cards] (apply max-key :rank cards))]\n    (fn [cards]\n      (let [cards-by-suit (group-by :suit cards)\n            trump-cards (cards-by-suit trump)]\n        (if trump-cards\n          (highest-rank trump-cards)\n          (let [lead-suit ((first cards) :suit)\n                suit-cards (cards-by-suit lead-suit)]\n            (highest-rank suit-cards)))))))","user":"57002b81e4b08d47c97781c7"},{"code":"(fn boo [trump]\n  (letfn \n    [(topcard [suit cards]\n              (->> cards\n                   (filter #(= suit (:suit %)))\n                   (sort-by :rank)\n                   last))]\n    (fn [[{lead :suit} :as cards]]\n      (if-let [winner (topcard trump cards)]\n        winner\n        (topcard lead cards)))))","problem":141,"user":"50217818e4b00bba4502f7a7"},{"problem":141,"code":"(fn trick-games [t]\n      (fn [cards]\n        (let [by-suit (group-by :suit cards)\n              win-suit (or t (:suit (first cards)))]\n          (last (sort-by :rank (win-suit by-suit))))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":141,"code":"(letfn [(winner [s cards] (->> (filter #(= s (:suit %)) cards)\n                               (sort-by :rank) (last)))]\n  (fn [trump] #(or (winner trump %) (winner (:suit (first %)) %))))","user":"5566d812e4b0c656e3ff1837"},{"problem":141,"code":"(fn find-trick-winner [trump]\n  (fn [cards]\n    (let [lead-card (first cards)\n          trumps (sort-by #(% :rank) (filter #(= trump (% :suit)) cards))\n          leads (sort-by #(% :rank) (filter #(= (lead-card :suit) (% :suit)) cards))]\n      (if-not (empty? trumps)\n        (last trumps)\n        (last leads)))))","user":"5666500ee4b0e91d5f5c566d"},{"code":"(fn [trump]\n  (letfn [(maxcard [suit cards]\n            (let [suitcards (filter #(= suit (:suit %)) cards)]\n              (if (seq suitcards)\n                 (apply max-key :rank suitcards)\n                 nil)))]\n   (fn winner [cards]\n         (let [hitrump (if trump (maxcard trump cards) nil)\n               lead (:suit (first cards))\n               hicard (maxcard lead cards)]\n           (if hitrump hitrump hicard)))))","problem":141,"user":"4fe87e56e4b07c9f6fd12c40"},{"code":"(fn [t]\n  (fn [[{:keys [suit]} & _ :as x]] \n    (let [t (or t suit)]\n      (apply max-key :rank (filter #(= t (% :suit)) x)))))","problem":141,"user":"4eb97b2e535dfed6da9c6d54"},{"code":"(fn solve [trump]\n  (let [winner (fn [cards]\n                 (let [cards-trump (if (nil? trump) ((first cards) :suit) trump)]\n                   (->> (filter #(= cards-trump (% :suit)) cards)\n                        (reduce #(if (> (%1 :rank) (%2 :rank)) %1 %2))\n                   )\n                 )\n               )]\n    winner\n  )\n)","problem":141,"user":"5272d4b7e4b03e8d9a4a7453"},{"code":"(fn [trump]\n  (let [values (assoc {:club 1 :diamond 2 :heart 3 :spade 4} trump 5)]\n    (fn [cards]\n      (reduce (fn [a b]\n                (let [ax (values (a :suit))\n                      bx (values (b :suit))]\n                  (cond\n                   (= ax bx) (if (> (a :rank) (b :rank)) a b)\n                   (> ax bx) a\n                   :else b)))\n              cards))))","problem":141,"user":"5097b556e4b00ad8bab4e970"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [tr (or trump (:suit (first cards)))]\n      (first (sort (fn [{c1suit :suit c1rank :rank}\n                        {c2suit :suit c2rank :rank}]\n                     (cond (and (= c1suit tr) (not (= c2suit tr))) true\n                           (and (= c2suit tr) (not (= c1suit tr))) false\n                           :else (> c1rank c2rank))) cards)))))","user":"56018dd4e4b04bb52996e18f"},{"code":"(fn [trump]\n  (fn winner [cards]\n    (letfn\n      [(better [{c-suit :suit c-rank :rank :as c-card}\n                {n-suit :suit n-rank :rank :as n-card}]\n        (if (= c-suit n-suit)\n          (if (< c-rank n-rank)\n            n-card\n            c-card)\n          (if (= n-suit trump)\n            n-card\n            c-card)))]\n      (reduce better cards))))","problem":141,"user":"4f28c979e4b0d6649770a01a"},{"code":"(fn [trump]\n    (fn [cards]\n      (last (flatten (map vals\n          (sort-by first \n             (map \n               (fn [card]\n                  (cond \n                     (= (:suit card) trump)                 {(+ (:rank card) 26) card}\n                     (= (:suit card) (:suit (first cards))) {(+ (:rank card) 13) card}\n                     :else                                  {(:rank card) card} )) cards)))))))","problem":141,"user":"50bce014e4b0594b91591c63"},{"problem":141,"code":"(fn [trumps]\n  (let [trump trumps]\n    (letfn [(beats? [card0 card1]\n              (or (and (= (card1 :suit) (card0 :suit))\n                       (> (card1 :rank) (card0 :rank)))\n                  (and (= (card1 :suit) trump)\n                       (not= (card0 :suit) trump))))]\n      (fn [card-list]\n        (reduce #(if (beats? %1 %2) %2 %1) card-list)))))","user":"58a0fc33e4b02bd94d917ea3"},{"code":"(fn winner [suit]\n  (fn [xs]\n    (last (sort-by :rank (filter #(= (or suit (:suit (first xs))) (:suit %)) xs)))))","problem":141,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn [trump]\t\n\t(fn [lst] \n\t\t(\n\t\t\tlet [suits (assoc (assoc {:spade 0 :heart 0 :diamond 0 :club 0} (:suit (first lst)) 13) trump 26)\n\t\t\t\tvalue (fn [x] (+ ((:suit x) suits) (:rank x)))\n\t\t\t\t]\n\t\t\t(first (apply sorted-set-by (fn [x y] (- (value y) (value x))) lst))\n\t\t)\n\t)\n)","problem":141,"user":"52570aeae4b0541d1855ba42"},{"problem":141,"code":"(fn [trump]\n          (fn [cardsv]\n            (let [color (if (nil? trump) (:suit (first cardsv)) trump)]\n               (reduce (fn [acc {:keys [suit rank] :as anew}]\n                         (if (and (= suit color) (> rank (:rank acc))) anew acc))\n                       (first cardsv)\n                       cardsv))))","user":"533c2605e4b0e30313ee6cd7"},{"code":"(fn p141 [tramp]\n   (fn [cs]\n     (let [tr (or tramp\n                  (first (sort-by #({:spade 1 :heart 2 :diamond 3 :club 4} %) (keys (group-by #(% :suit) cs))) ))\n           fs (filter #(= tr (% :suit))  cs)\n           maxn (fn [ys] (last (sort-by #(:rank %) ys)))]\n        (maxn fs) ))\n)","problem":141,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn ff [trump]\n  (fn [[lead & cards]]\n    (let [trump (or trump (get lead :suit))]\n      (apply max-key :rank (filter #(= trump (get % :suit)) (cons lead cards))))))","problem":141,"user":"4f1fd734535d64f6031464a5"},{"code":"(fn [t]\n    (fn [cs]\n      (let [s (or t (:suit (first cs)))]\n        (->> cs\n          (filter #(= (:suit %) s))\n          (sort-by :rank >)\n          (first)))))","problem":141,"user":"525f51bde4b0cb4875a45dc8"},{"problem":141,"code":"(fn [trump]\n                 (fn [cards]\n                   (let [winning-suit (or trump (:suit (first cards)))]\n                     (->> cards\n                          (filter #(= winning-suit (:suit %)))\n                          (sort-by :rank)\n                          (last)))))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn [trump]\n           (fn [coll]\n               (let [trump (or trump (:suit (first coll)))\n                     coll (filter #(= (:suit %) trump) coll)] (first (sort-by :rank > coll)))))","problem":141,"user":"50310b8be4b05b7df5a0b84d"},{"problem":141,"code":"(fn [trump]\n    (fn play\n      ([cards] (play (rest cards) (first cards)))\n      ([cards high]\n       (if (empty? cards)\n         high\n         (let [newcard (first cards)]\n           (if (or (and (not= (:suit high) trump) ;; switching to trump suit\n                        (= (:suit newcard) trump))\n                   (and (= (:suit high) (:suit newcard)) ;; same suit, higher rank\n                        (< (:rank high) (:rank newcard))))\n             (play (rest cards) newcard)\n             (play (rest cards) high)))))\n      ))","user":"57fc0719e4b0d3187e900987"},{"code":"(fn [t]\n  (fn [s]\n    (last \n      (sort-by #(+ (% :rank) (if (= (% :suit) t) 40 0) (if (= (% :suit) ((first s) :suit)) 20 0)) s)\n    )  \n  )\n)","problem":141,"user":"5176afd2e4b085adf681d889"},{"problem":141,"code":"(fn winner [trump-suit]\n  (let [max-card (fn [cs] (if (empty? cs) nil (reduce (fn [m c] (if (> (:rank c) (:rank m)) c m)) cs)))]\n    (fn [cards]\n      (or\n       (max-card (filter #(= (:suit %) trump-suit) cards))\n       (max-card (filter #(= (:suit %) (:suit (first cards))) cards))))))","user":"530bf87ee4b02e82168697d5"},{"code":"(fn [trump] (fn [cards]\n  (let [suit-led (:suit (first cards))]\n    (first (sort-by #(- (+ (:rank %) (cond (= (:suit %) trump) 1000 (= (:suit %) suit-led) 100 :else 0))) cards)))))","problem":141,"user":"4ec07699535dfed6da9c6da2"},{"problem":141,"code":"(fn cards-winner\n  [suite]\n  (fn [cards]\n     (let [leading (or suite (:suit (first cards)))]\n       (apply max-key :rank (filter #(= (:suit %) leading) cards))\n    )\n  ))","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":141,"code":"(fn [t]\n  (fn [c]\n    (let [t (or t (:suit (first c)))]\n      (apply max-key :rank (filter #(= (:suit %) t) c)))))","user":"56bca51ae4b0f26550335963"},{"problem":141,"code":"partial\n(fn [t c]\n  (apply max-key :rank\n         (if-let [t (seq (filter #(= t (:suit %)) c))]\n           t\n           (filter #(= (:suit (first c)) (:suit %)) c))))","user":"54ca9ca8e4b057c6fda3a265"},{"code":"(fn [t]\n \n  (fn [cards]\n    (let [t (if (some #{t} (map :suit cards)) t (:suit (first cards)))\n          cards\n            (filter #(= t (:suit %)) cards)]\n      (apply max-key :rank cards))\n  )\n\n)","problem":141,"user":"4ff3df0fe4b0678c553fc355"},{"problem":141,"code":"(fn [trump] (let [recognize (fn [x] (let [suits {\"S\" :spade \"H\" :heart \"C\" :club \"D\" :diamond}\n                                            ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n                                            splitx (clojure.string/split x #\"\")]\n                                        {:suit (get suits (first splitx)) :rank (get ranks (second splitx))}))]\n                (fn [cards] (if (empty? (filter #(= trump (%1 :suit)) cards))\n                              (last (sort-by #(%1 :rank) (filter #(= ((first cards) :suit) (%1 :suit)) cards)))\n                              (last (sort-by #(%1 :rank) (filter #(= trump (%1 :suit)) cards)))))))","user":"567f988be4b0feffd0d18ebe"},{"problem":141,"code":"(fn [t]\n  (fn [x]\n    (let [s #(not= (:suit %) (or t (:suit (first x))))]\n      (first (sort-by #(vector (s %) (- (:rank %))) x)))))","user":"4fb1d7ace4b081705acca281"},{"problem":141,"code":"(fn trickanalyze [s]\n      (fn winner [v]\n        (let [high (if (nil? s)\n                     (get (first v) :suit)\n                     s)]\n          (loop [init v result (first v)]\n            (if (empty? init)\n              result\n              (if (and (= high (get (first init) :suit)) (= high (get result :suit)))\n                (if (> (get (first init) :rank) (get result :rank))\n                  (recur (rest init) (first init))\n                  (recur (rest init) result))\n                (if (and (= high (get (first init) :suit)) (not= high (get result :suit)))\n                  (recur (rest init) (first init))\n                  (if (and (not= high (get (first init) :suit)) (= high (get result :suit)))\n                    (recur (rest init) result)\n                    (if (> (get (first init) :rank) (get result :rank))\n                      (recur (rest init) (first init))\n                      (recur (rest init) result))))))))))","user":"532727bae4b09d4e7a9b54fa"},{"problem":141,"code":"(fn f [trump]\n  (let [same-rank #(comp (partial = %) :suit)\n        highest-rank (fn [suit cards]\n                       (first\n                         (sort-by :rank >\n                                  (filter (same-rank suit) cards))))]\n    (fn [cards]\n      (or\n        (highest-rank trump cards)\n        (highest-rank (:suit (first cards)) cards)))))","user":"4ec1923f535dfed6da9c6db2"},{"problem":141,"code":"(fn [trump]\n  (fn [v]\n    (let [trump (or trump (:suit (first v)))]\n      (last (sort-by :rank (filter #(= trump (:suit %)) v))))))","user":"51852961e4b0da5a5be3babb"},{"code":"(fn [trump]\n  (if (nil? trump)\n    (fn [cards] (last (sort #(compare (:rank %1) (:rank %2)) (filter #(= (:suit (first cards)) (:suit %)) cards))))\n    (fn [cards] (last (sort #(compare (:rank %1) (:rank %2)) (filter #(= trump (:suit %)) cards))))))","problem":141,"user":"4f62b29ce4b0defedf855fd9"},{"code":"#(let [f (fn[tt s]\n    (let [t (if (nil? tt) (:suit (first s)) tt) ts (filter (comp (partial = t) :suit) s) cs (if (empty? ts) s ts)]\n        (apply max-key :rank cs)))]\n  (partial f %))","problem":141,"user":"507fbd77e4b089ade05efbd3"},{"problem":141,"code":"(fn [suit]\n  (fn [tricks]\n    (if (nil? suit)\n      (->> (group-by :suit tricks)\n           (sort-by key)\n           ((comp second last))\n           (sort-by :rank)\n           (last))\n      (->> (filter #(= (:suit %) suit) tricks)\n           (sort-by :rank)\n           (last)))))","user":"5300158ae4b0d8b024fd370f"},{"problem":141,"code":"(fn\n  [trump]\n  (fn winner\n    [cards]\n    (letfn\n  \t  [(highest-rank [cards-of-suit]\n  \t     (first (sort-by #(- (:rank %)) cards-of-suit)))\n  \t   (suit-of [suit]\n  \t     (filter #(= suit (:suit %)) cards))]\n  \t  (if\n  \t    (and (not (nil? trump)) (not (empty? (suit-of trump))))\n  \t    (highest-rank (suit-of trump))\n  \t    (highest-rank (suit-of (:suit (first cards))))))))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":141,"code":"(fn game [trump]\n  (letfn [\n    (card< [c1 c2]\n      (cond\n        (not= (:suit c1) (:suit c2))\n        (and\n          (not= (:suit c1) trump)\n          (= (:suit c2) trump))\n        \n        :else\n        (and\n          (= (:suit c1) (:suit c2))\n          (< (:rank c1) (:rank c2)))))]\n    (fn [cards] (or\n      ((comp last first) (take-while #(apply card< %) (partition 2 1 cards)))\n      (first cards)))))","user":"55d5e80ee4b0e31453f64a91"},{"code":"(fn [trump-suit]\r\n    (fn [cards]\r\n      ;; if any trumps, return highest\r\n      (let [trumps (filter #(= trump-suit (:suit %)) cards)]\r\n        (if (empty? trumps)\r\n            (apply max-key :rank (filter #(= (:suit (first cards)) (:suit %)) cards))\r\n            (apply max-key :rank trumps)))))","problem":141,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":141,"code":"(fn winner [trump]\r\n  (fn [trick]\r\n    (if-let [x (and trump (filter #(= trump (:suit %)) trick))]\r\n      (last (sort-by :rank x))\r\n      (let [lead (:suit (first trick))]\r\n        (last (sort-by :rank (filter #(= lead (:suit %)) trick)))))))","user":"5f2c02d1e4b033932238a65f"},{"code":"(fn fw [trump]\n  (let [ft (fn [suits trump]\n             (if (nil? trump) suits\n                 (reduce #(if ((key %) trump)\n                            (assoc %1 (key %2) (+ 400 (val %2)))\n                            (assoc %1 (key %2) (val %2)))\n                         (hash-map) suits)))\n        values {:spade 400, :heart 300, :diamond 200, :club 100}\n        val-suit (if (nil? trump)\n                   values\n                     (assoc values trump (+ (trump values) 400)))\n    val-card (fn [c] (+ (val-suit (c :suit)) (c :rank)))\n    gt-cards (fn [c d] (> (val-card c) (val-card d)))]\n  (fn [cards]\n((first (sort #(gt-cards (%1 1) (%2 1))\n              (reduce #(conj %1 [(val-card %2) %2]) [] cards))) 1))))","problem":141,"user":"50733b31e4b0e3170b5a869a"},{"problem":141,"code":"(fn f141\n  [s]\n  (let [better (fn [s a b]\n                 (let [tf #(-> % :suit #{s})\n                       ntf (complement tf)]\n                   (cond\n                     (and (tf a) (ntf b)) a\n                     (and (tf b) (ntf a)) b\n                     (< (:rank a) (:rank b)) b\n                     :else a)))]\n    (fn bc [c]\n      (if (= 1 (count c))\n        (first c)\n        (bc (cons (better (or s  (-> c first :suit))\n                          (first c)\n                          (second c))\n                  (drop 2 c)))))))","user":"583048d9e4b051871117c007"},{"problem":141,"code":"(fn [trump-suit]\n  (fn [[lead :as trick]]\n    (apply max-key (fn [card]\n                     (+ (:rank card)\n                        (if (= (:suit card) (:suit lead)) 13 0)\n                        (if (= (:suit card) trump-suit) 26 0)))\n           trick)))","user":"5353afa0e4b084c2834f4b03"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [main-suit (if (some #(= trump (:suit %)) cards)\n                      trump\n                      (-> cards first :suit))]\n      (->> cards\n           (filter #(= main-suit (:suit %)))\n           (sort-by :rank >)\n           first))))","user":"5d81b40ce4b0915913b1d379"},{"problem":141,"code":"(fn [t]\n    (fn [l]\n      (let [f (fn [x] (filter #(= (:suit %) x) l))\n            s (f t)]\n        (apply max-key :rank\n               (if (empty? s)\n                 (f (:suit (first l)))\n                 s)))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":141,"code":"(fn [adut]\n  (fn [bacanje]\n    (let [najjača-boja (if adut \n                 \t\tadut \n                 \t\t(:suit (first bacanje)))]\n      (last \n       (sort-by :rank \n                (filter #(= najjača-boja (:suit %)) bacanje))))))","user":"54b54d1be4b05787c3b1639c"},{"problem":141,"code":"(fn winner\n  [trump]\n  (fn [cards]\n    (letfn\n      [\n       (card-value\n         [c]\n         (if (= (:suit c) trump)\n           (+ (:rank c) 14)\n           (if (= (:suit c) (:suit (first cards)))\n             (:rank c) 0)))\n       ]\n      (last (sort-by card-value cards))\n      )\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [suit (if (nil? trump) (:suit (first cards))  trump)] \n    (->> cards\n         (filter (fn [{s :suit}] (= s suit)))\n         (sort-by :rank)\n         reverse\n          first))))","user":"527ccaf4e4b0757a1b17136d"},{"problem":141,"code":"(fn [trump]\n    (fn [cards]\n        (let [lead    (first cards)\n              lcards  (filter (fn [c] (= (:suit c) (:suit lead))) cards)  \n              ltrump  (filter (fn [c] (= (:suit c) trump)) cards)\n              bl      (first (sort-by :rank #(compare %2 %1) lcards))\n              bt      (first (sort-by :rank #(compare %2 %1) ltrump))\n              ]\n           (if (nil? bt) bl bt)\n          )))","user":"564127a9e4b08d4f616f5ef3"},{"problem":141,"code":"(fn get-winner [trump]\n  (fn [cards-seq]\n    (let [lead-suit (if trump trump (:suit (first cards-seq)))\n          same-suit (filter #(= lead-suit (:suit %)) cards-seq)\n          highest-rank (apply max (map :rank same-suit))\n          winner (first (filter #(= highest-rank (:rank %)) same-suit))]\n      winner)))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":141,"code":"(fn [l]\n  (fn [s]\n    (last (sort-by :rank\n            (filter #(= (% :suit) (or l ((first s) :suit)))\n              s)))))","user":"548b7db8e4b0e286459a11fd"},{"problem":141,"code":"(fn R [t] (fn [C] (if-not t ((R (:suit (first C))) C) {:suit t :rank (apply max (map :rank (filter #(= t (:suit %)) C)))})))","user":"55f6fe09e4b06e875b46cea2"},{"problem":141,"code":"(fn [suit]\n    (fn [cards]\n      (let [compare-cards (fn [suit]\n                            (fn [one-card other-card]\n                              (let [one-suit (one-card :suit)\n                                    other-suit (other-card :suit)\n                                    trump (if (nil? suit) :spade suit)]\n                                (cond\n                                  (and (= one-suit trump) (not= other-suit trump))\n                                    one-card\n                                  (and (= other-suit trump) (not= one-suit trump))\n                                    other-card\n                                  :else\n                                    (let [rango-maximo (max (one-card :rank) (other-card :rank))]\n                                      (if (= rango-maximo (one-card :rank))\n                                        one-card\n                                        other-card))))))]\n        (reduce #((compare-cards suit) %1 %2) cards))))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":141,"code":"(fn winner [trump]\n  (fn [v-of-cards]\n    (let [lead-suit (:suit (first v-of-cards))]\n      (reduce #(if (> (:rank %1) (:rank %2))\n                 %1\n                 %2)\n              (filter (if trump\n                           #(= trump (:suit %))\n                          #(= lead-suit (:suit %)))\n                        v-of-cards)))))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"(fn [t]\n(fn [x]\n (let [s (or t (:suit (first x)))]\n      (last (sort-by :rank (filter #(= s (:suit %)) x)))\n  ))\n)","problem":141,"user":"503917a0e4b088a6a14ca763"},{"code":"(fn [tp]\n  (fn [[ft & rt :as cs]]\n    (let [ld (if tp tp (:suit ft))]\n      ((comp first reverse sort-by)\n       (fn [{:keys [suit rank]}]\n         (+\n          (if (= suit ld) 100 0)\n          rank))\n       cs))))","problem":141,"user":"51944aaae4b0142f60b4aedc"},{"problem":141,"code":"(fn [trump]\n    (fn [trick]\n      (->> trick\n           (filter #(= (:suit %) trump))\n           (sort-by :rank)\n           (concat (->> trick\n                        (filter #(= (:suit %) (:suit (first trick))))\n                        (sort-by :rank)))\n           last)))","user":"55f5c4a9e4b06e875b46ce8f"},{"code":";; short\n(fn [t]\n  #(reduce (fn [a {s :suit :as b}]\n             (cond (= (:suit a) s) (max-key :rank a b)\n                   (= s t) b\n                   :else a))\n           %))\n\n#_\n;; readable\n(letfn [(same-suit? [& cards]\n          (apply = (map :suit cards)))\n        (bigger [& cards]\n          (apply max-key :rank cards))]\n  (fn [trump]\n    (letfn [(trump? [c]\n              (= (:suit c) trump))\n            (winner [a b]\n              (cond (same-suit? a b) (bigger a b)\n                    (trump? b) b\n                    :else a))]\n      (fn [cards]\n        (reduce winner cards)))))","problem":141,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":141,"code":"(fn tricks [trump]\n  (fn [cards]\n    (let [trumps (filter #(= trump (get % :suit)) cards),\n          first-suits (filter #(= (get (first cards) :suit) (get % :suit)) cards),\n          get-highest #(if(empty? %)%\n                        (apply max-key (cons (fn [card] (get card :rank)) %)))]\n      (some not-empty [(get-highest trumps) (get-highest first-suits)]))))","user":"5545477fe4b0a04f79299531"},{"code":"(fn [trump]\n  (fn [[lead & cards]]\n    (loop [strongest lead cards cards]\n      (if (empty? cards)\n        strongest\n        (recur\n          (let [next (first cards)]\n            (if (not (or (= (:suit next) trump)\n                         (= (:suit next) (:suit lead))))\n                strongest\n                (if (and (= (:suit strongest) trump)\n                         (not (= (:suit next) trump)))\n                  strongest\n                  (if (and (not (= (:suit strongest) trump))\n                           (= (:suit next) trump))\n                    next\n                    (if (> (:rank next) (:rank strongest))\n                      next\n                      strongest)))))\n          (rest cards))))))","problem":141,"user":"4e7c8fd1535db169f9c796be"},{"problem":141,"code":"(fn problem-141\n    [suit]\n    (fn [cards]\n      (->> cards\n           (filter #(or (nil? suit)\n                        (= suit (:suit %))))\n           (sort-by :rank)\n           (sort-by (comp {:spade   4\n                           :heart   3\n                           :diamond 2\n                           :clubs   1}\n                          :suit))\n           (last))))","user":"58e37946e4b005f69f193cae"},{"problem":141,"code":"(fn our-fn\n  [trump]\n  (letfn [(card-max [trump card1 card2]\n          (if (= (:suit card1) (:suit card2))\n            (if (> (:rank card2) (:rank card1))\n              card2\n              card1)\n            (if (= trump (:suit card2))\n              card2\n              card1)))\n          ]\n    (fn [cards] (reduce (partial card-max trump) cards))))","user":"53e76bb2e4b036ad0777e47d"},{"code":"(fn [trump]\n  (fn [[lead & rest :as cards]]\n    (let [suit (if trump trump (lead :suit))]\n      (->> cards\n           (filter #(= suit (% :suit)))\n           (sort-by #(% :rank))\n           last))))","problem":141,"user":"51b9d1f0e4b0e871ca49590b"},{"code":"(fn who-won? \n  ([trump]\n   (fn [coll]\n     (let [trumps (filter #(= trump (:suit %)) coll)\n           first-suit (:suit (first coll))]\n       (if (empty? trumps)\n           (last (sort-by :rank (filter #(= first-suit (:suit %)) coll)))\n           (last (sort-by :rank trumps)))))))","problem":141,"user":"50c8697ce4b00bb60fe0c53f"},{"code":"(fn [T]\n  (fn [C]\n    (letfn [(f [s h] (filter #(= s (:suit %1)) h))\n            (r [h] (last (sort-by :rank h)))]\n      (or (r (f T C))\n          (r (f (:suit (first C)) C)))\n      )))","problem":141,"user":"4db8f6c4535d1e037afb219e"},{"problem":141,"code":"(fn [t] (fn [cs] \n\t(let [l (:suit (first cs))\n\t\t  g (group-by :suit cs)\n\t\t  higher #(first (reverse (sort-by :rank %)))]\n\t\t(if (g t) (higher (g t)) (higher (g l))))))","user":"53e19461e4b0d874e779ae59"},{"code":"(fn tricks\n  [trump]\n  (fn [cards]\n    (let [grouped (group-by :suit (sort-by :rank > cards))]\n      (first (grouped (or trump (:suit (first cards))))))))","problem":141,"user":"4dc0ff08535d020aff1edf84"},{"code":"(fn who-won [trump]\n  (fn [cards]\n    (let [ts (filter #(= trump (get % :suit)) cards)]\n      (if (> (count ts) 0) ; trump cards were played\n        (apply (partial max-key :rank) ts)\n        (let [lead (get (first cards) :suit)\n              lead-cards (filter #(= lead (get % :suit)) cards)]\n          (apply (partial max-key :rank) lead-cards))))))","problem":141,"user":"51365524e4b04ac1f358dd52"},{"problem":141,"code":"(fn [trump]\n    (letfn [(card-gt? [x y]\n              (cond \n                (= (:suit x) (:suit y)) (> (:rank x) (:rank y))\n                (nil? trump)            true\n                (= trump (:suit x))     true\n                (= trump (:suit y))     false \n                :else                   true ))]\n      (fn [ts]\n        (if (empty? ts) nil\n          (reduce (fn [acc b]\n                     (if (card-gt? acc b) acc b)) (first ts) (rest ts))))) )","user":"57f9011ee4b0d3187e900935"},{"problem":141,"code":"(fn tricky [trump-suit]\n  (fn winner [coll]\n    (if (= trump-suit nil)\n      (first (sort-by :rank > (filter #(= (:suit %) (:suit (first coll))) coll)))\n      (first (sort-by :rank > (filter #(= (:suit %) trump-suit) coll)))\n    )\n  )\n)","user":"59368efbe4b02506e01a297d"},{"code":"(fn [trump]\n  (letfn \n    [(trumprank [leadingsuit {s1 :suit r1 :rank}] \n                (cond\n                  (= trump s1) \n                  (+ 1000 r1)\n                  (= leadingsuit s1)\n                  (+ 100 r1)\n                  :else \n                  r1))\n     (winner? [cards]\n              (let [leadingsuit (:suit (first cards))]\n                (last (sort #(compare (trumprank leadingsuit %) (trumprank leadingsuit %2)) cards))))]\n    winner?))","problem":141,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"code":"(fn tricky-game [trump]\n  (fn [[first-card & rest-cards :as cards]]\n    (last\n      (sort-by\n        :rank (filter\n                #(or\n                   (= (:suit first-card) (:suit %1))\n                   (= trump (:suit %1))\n                   )\n                cards)))))","problem":141,"user":"5094057fe4b097f48cc38593"},{"code":"(fn [t]\n  (fn [[{ls :suit lr :rank :as l} & c]]\n    (let [{s :suit r :rank :as d} (first c)]\n      (if (nil? d) l\n        (recur\n          (cons\n            (if\n              (or\n                (and (= t s) (not= t ls))\n                (and (= s ls) (> r lr)))\n              d\n              l)\n            (rest c)))))))","problem":141,"user":"4fb2101ce4b081705acca284"},{"problem":141,"code":"(fn [trump]\n  (fn [[trick1 :as tricks]]\n    (let [suit1 (get trick1 :suit)\n          suitortrump (if (nil? trump) suit1 trump)\n          filtersuitortrump (filter #(= (get % :suit) suitortrump) tricks)]\n      (last (sort-by :rank filtersuitortrump)))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [trumps (filter (fn [x] (= trump (x :suit))) cards)\n          not-clubs (filter (fn [x] (not= :club (x :suit))) cards)\n          r (if (empty? trumps)\n              (if (empty? not-clubs)\n                cards\n                not-clubs)\n              trumps)]\n      (last (sort-by :rank r)))))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn __ [trump]\n  (fn _ [cards]\n    (letfn [(winner [cards]\n                    (apply (partial max-key :rank) cards))]\n    (if (and trump (filter #(= trump (:suit %)) cards))\n  \t(winner (filter #(= trump (:suit %)) cards))\n  \t\t(winner (filter #(= (:suit (first cards)) (:suit %)) cards))))))","problem":141,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn [t] (fn [[{l :suit } & r :as s]]\n    (apply max-key #(* (:rank %) ((assoc {t 900} l 20) (:suit %) 1)) s)))","problem":141,"user":"4ff67852e4b0678c553fc37e"},{"problem":141,"code":"(fn\n  [trump]\n  (fn [cards]\n    ; more efficient to make single pass over data, but since problem size\n    ; is small, instead making two passes to keep it simpler/cleaner\n    (letfn [(make-step [suit]\n              (fn [best curr]\n                (if (and (= suit (:suit curr))\n                         (or (nil? best) (> (:rank curr) (:rank best))))\n                  curr\n                  best)))\n            (best-in-suit [suit]\n              (reduce (make-step suit) nil cards))]\n      (or (best-in-suit trump) (best-in-suit (:suit (first cards)))))))","user":"52dfc89be4b09f7907dd1405"},{"problem":141,"code":"(fn [trump]\n  (let [m1 (assoc {:spade 3, :heart 2, :diamond 1, :club 0} trump 5)\n        m2 {2 0, 3 1, 4 2, 5 3, 6 4, 7 5, 8 6, 9 7, 10 8, \\J 9 \\Q 10 \\K 11 \\A 12}\n        f #(+ (* 12 ((:suit %) m1)) (m2 (:rank %)))]\n    (fn [lst]\n      (reduce #(if (> (f %1) (f %2)) %1 %2) lst))))","user":"57c647bbe4b05aa3c4741cf3"},{"code":"(fn [t]\n  (fn [c]\n    (let [ts  (if (nil? t) :spade t)\n          h   (apply max (map :rank c))]\n      (let [cts (not (empty? (filter #(= (:suit %) ts) c)))\n            hts (apply max 0 (map :rank (filter #(= (:suit %) ts) c)))]\n        (first \n          (cond\n            (not cts) (filter #(= (:rank %) h) c)\n            cts (filter #(and (= (:suit %) ts) (= (:rank %) hts)) c)))))))","problem":141,"user":"50843a4ae4b0c98812d0788b"},{"code":"(fn [trump]\n    (fn [cards]\n        (let [suits (map :suit cards)\n              trump (if (and trump (some #(= % trump) suits)) trump (first suits))\n              card-val #(if (= trump (:suit %)) (:rank %) 0)]\n            (apply max-key card-val cards)\n        )))","problem":141,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":141,"code":"(fn\n  [s]\n  (fn [c] (if s\n              (->> (filter #(= s (:suit %)) c)\n                   (sort-by :rank)\n                   last)\n              (let [fs (first c)\n                    gs (filter #(= (:suit fs) (:suit %)) c)]\n                (if (= 1 (count gs))\n                    fs\n                    (->> c\n                         (sort-by :rank)\n                         last))))))","user":"528a3e14e4b0239c8a67ae72"},{"code":"(fn [trump-suit]\n;; not explicitly stated, but spades are the default trump?\n(let [trump-suit (or trump-suit :spade)]\n  (fn winner [cardseq]\n    (reduce (fn [old c]\n      (let [better-rank? (> (:rank c) (:rank old))\n            new-trump? (= trump-suit (:suit c))\n            old-trump? (= trump-suit (:suit old))]\n        (cond\n          (and old-trump? new-trump?) (if better-rank? c old)\n          new-trump? c\n          old-trump? old\n          better-rank? c\n          :else old)))\n      cardseq))))","problem":141,"user":"4ed188c8535d44c135fd68cf"},{"problem":141,"code":"(fn [t] (fn [s] (->> (or (seq (filter (comp (partial = t) :suit) s))\n                         (filter (comp (partial = (:suit (first s))) :suit) s))\n                     (apply max-key :rank))))","user":"5960a1a6e4b066ee0a44b08e"},{"code":"(fn [t]\n  (fn [[h :as c]]\n    (let [s (assoc {(h :suit) 50} t 90)]\n      (last (sort-by #(+ (s (% :suit) 0)\n                         (% :rank))\n                     c)))))","problem":141,"user":"4ebaf790535dfed6da9c6d6e"},{"code":"(fn [t] (fn [s] (apply max-key #(+ (if (= (or t :spade) (:suit %)) 99 0) (:rank %)) s)))","problem":141,"user":"4f08b15b535dcb61093f6c40"},{"problem":141,"code":"(fn [t]\n  (letfn [(kf [ld] (fn [{st :suit rk :rank}]\n            (+ ((assoc {t 26} ld 13) st 0) rk)))]\n    #(-> % first :suit kf (sort-by %) last)))","user":"5416b4a2e4b01498b1a71a01"},{"problem":141,"code":"(fn f [trump]\n  (fn [cards]\n    (if (nil? trump)\n      ((f (:suit (first cards))) cards)\n      (hash-map :suit trump \n                :rank (apply max \n                             (map :rank \n                                  (filter #(= trump (:suit %)) \n                                          cards)))))))","user":"5e2549c8e4b05b4b0151615f"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [l (if trump trump (-> cards first :suit))\n          c (sort-by :rank > (filter #(= (:suit %) l) cards))]\n      (first c))))","problem":141,"user":"5003ee7de4b0678c553fc446"},{"code":"(fn tricky- [trump]\n  \"141. Your goal is to devise a function that can determine which of a number\n  of cards has won a trick.\"\n  (fn [cards]\n    (let [suits #(.indexOf [trump (:suit (first cards)) :spade :heart :club :diamond] (:suit %))]\n      (first (sort-by suits (sort-by :rank > cards))))))","problem":141,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":141,"code":"(fn tricky-card [trump]\n  (fn [sm] (let [cards (let [trump (if (nil? trump) :spade trump)]\n                         (let [tmp-cards (filter #(= trump (% :suit)) sm)]\n                           (if (empty? tmp-cards)\n                             sm\n                             tmp-cards)))]\n             (first (sort #(compare (%2 :rank) (%1 :rank)) cards)))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":141,"code":"(fn [trump-suit]\n    (fn winner [cards]\n      (apply max-key (fn [{:keys [suit rank] :as card}]\n                       (if (= suit (or trump-suit (:suit (first cards)))) rank 0)) cards)))","user":"55c66ffee4b0e31453f649c2"},{"problem":141,"code":"(fn [s]\n  (fn [cs]\n    (let [l (:suit (first cs))\n          v (assoc { } l 15 s 30)]\n      (apply max-key #(+ (:rank %) (v (:suit %) 0)) cs))))","user":"56897739e4b0dcc4269f407d"},{"problem":141,"code":"(fn t141 [ winner ]\n  (fn [cards]\n    (let [w_c (if winner   \n              winner\n              (:suit (first cards)))\n          g (filter #(= (:suit %) w_c ) cards)]\n      (first (sort-by :rank > g)))))","user":"5046f909e4b03b02161376b5"},{"code":"(fn[t] \n  (fn[xs]\n     (last (sort-by \n             (fn[{:keys [suit rank]}] \n               (+ rank \n                  (if (= suit t) 1000 \n                    (suit {:heart 400 :spade 300 :diamond 200 :club 100})))) \n             xs))))","problem":141,"user":"506406c8e4b075d771da6f9f"},{"code":"(fn [trump]\n    (fn [cards]\n      (loop [highest (first cards)\n             cards (rest cards)]\n        (if (seq cards)\n          (let [[next & rest] cards]\n            (recur (cond\n                      (= (highest :suit) (next :suit))\n                        (if (> (next :rank) (highest :rank))\n                          next\n                          highest)\n                      (= (next :suit) trump)\n                        next\n                      :else\n                        highest)\n                   rest))\n          highest))))","problem":141,"user":"4dbb1126535d1e037afb21b3"},{"code":"(fn [ t]\n  (partial  (fn [trump [{suit :suit rank :rank} & _ :as cards] ]\n   (let [ts (if trump trump suit)\n         rk (apply max (map :rank (filter #(= (:suit %) ts) cards))) ]\n         {:suit ts :rank rk})) t))","problem":141,"user":"5124619ae4b02c3f2a072ccd"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [lead (if trump\n                 trump\n                 (:suit (first cards)))\n          hi-cards (filter #(= lead (:suit %)) cards)]\n      (last (sort-by :rank hi-cards)))))","user":"540a4f20e4b0addc1aec66ef"},{"code":"(fn [t] \n  (fn [c]\n    (let [t (if t t :spade)\n          f (filter #(= t (:suit %)) c)]\n      (first (sort #(> (:rank %1) (:rank %2)) (if (seq f) f c))))))","problem":141,"user":"4f32a7f1e4b0d6649770a095"},{"problem":141,"code":"(fn mine\n  [trump]\n  (fn\n    [coll]\n    (->>\n     (if (nil? trump)\n       (filter #(= (:suit %) (:suit (first coll))) coll)\n       (filter #(= (:suit %) trump) coll)\n       )\n     (sort-by #(:rank %))\n     (reverse)\n     (first)\n     )))","user":"53ac4719e4b047364c04445c"},{"code":"(fn [trump-suit]\n        (fn winning-card [cards]\n            (let [\n                led-suit (:suit (first cards))\n                winner (fn [{s1 :suit r1 :rank :as c1} {s2 :suit r2 :rank :as c2}]\n                    (cond\n                        (= s1 s2) (if (> r1 r2) c1 c2)\n                        (= s1 trump-suit) c1\n                        (= s2 trump-suit) c2\n                        :else c1))]\n                (reduce winner cards))))","problem":141,"user":"51f59607e4b0abb92f97f9d5"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (last\n      (sort-by\n        (fn [{:keys [suit rank]}]\n          [(cond\n             (= suit trump) 2\n             (= suit (:suit (first cards))) 1\n             :else 0)\n           rank])\n        cards))))","user":"562cd94ee4b0a45d2ff83015"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [trumps (filter #(= trump (% :suit)) cards)\n          res (if (empty? trumps) cards trumps)]\n      (first (sort #(let [r1 (% :rank)\n                          r2 (%2 :rank)]\n                      (cond (and (< r1 3) (> r2 3)) -1\n                            (and (> r1 3) (< r2 3)) r2\n                            :else (- r2 r1))) res)))))","user":"58f98231e4b0438e51c2cf4c"},{"problem":141,"code":"(fn winner [tr] \n    (fn [xs] (let [x1 (first xs)]\n                (letfn [\n                        (win2 [tr x1 x2]\n         (cond (= (x1 :suit) (x2 :suit) )\n            (if (> (x1 :rank) (x2 :rank))  x1 x2 )\n          (= (x1 :suit) tr) x1\n          (= (x2 :suit) tr) x2\n          :else x1 ; leader\n         )         \n         )\n                        \n                        \n                        (frec [m ys]\n                        (if (first ys) \n                            (recur (win2 tr m (first ys)) (rest ys) )\n                            m\n                        )\n                       )]\n                    (frec x1 (rest xs))\n                )\n             )\n    )\n)","user":"59ff9424e4b01bb0ae8afd24"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [t (if-not trump (:suit (first cards)) trump)]\n    (apply max-key (fn [card]\n               (if (= t (:suit card))\n                 (+ 100 (:rank card))\n                 (:rank card)\n               )\n              ) cards)\n    )\n    )\n  )","problem":141,"user":"51bec919e4b013aa0d74b800"},{"code":"(fn [trump]\n    (fn [cards]\n      (let [max-rank (:rank (apply max-key :rank cards))\n            f (fn [f {suit :suit rank :rank}]\n                (assoc {:suit suit} :rank (f rank (suit {\n                                                    :club max-rank\n                                                    :spade (* 4 max-rank)\n                                                    :heart (* 3 max-rank)\n                                                    :diamond (* 2  max-rank)}))))\n            cards (map (partial f +) cards)\n            trick (apply max-key\n                   :rank\n                   (if trump\n                     (filter #(= (:suit %) trump) cards)\n                     cards))]\n        (f - trick))\n      ))","problem":141,"user":"4e9fd521535d7eef3080729a"},{"problem":141,"code":"(letfn [(make-winner [trump]\n\t (letfn [(score [card]\n\t\t       (+ (:rank card) (if (= trump (:suit card)) 100 0)))\n\t\t     (best [card1 card2]\n\t\t       (if (> (score card1) (score card2)) card1 card2))]\n\t  (fn [hand]\n            (if (nil? trump)\n                ((make-winner (:suit (first hand))) hand)\n\t            (reduce best hand)))))]\n  make-winner)","user":"538e36c7e4b0b51d73faae81"},{"code":"(fn p128[trump]\n   (fn winner[[{lead-suit :suit} & _ :as cards] ]\n     (let [ c (group-by :suit cards)\n           s (if (get c trump) trump lead-suit)\n           r (apply max (map :rank (c s)))]\n       {:suit s :rank r})))","problem":141,"user":"50fa01bce4b07934dda8b0ba"},{"problem":141,"code":"(fn trick-game [trump-suit]\n  (fn [cards]\n    (let [first-suit (get-in cards [0 :suit])\n          groups (group-by :suit cards)]\n      (if-let [trumps (groups trump-suit)]\n        (apply max-key :rank trumps)\n        (apply max-key :rank (first-suit groups))))))","user":"60460824e4b02d28681c77bc"},{"problem":141,"code":"#(fn [coll]\n    (reduce (fn [acc c] \n        (if (= (:suit acc) (:suit c))\n          (if (< (:rank acc) (:rank c)) c acc)\n          (if (= (:suit c) %) c acc))) \n      coll))","user":"4faf97d8e4b081705acca258"},{"code":"(letfn [\n  (strongest-by-suit [suit cards]\n    (first\n      (sort-by :rank (comp - compare)\n        (filter #(= suit (:suit %)) cards))))]\n\n  (fn [trump]\n    (fn [cards]\n      (if-let [winning-trump (strongest-by-suit trump cards)]\n        winning-trump\n        (strongest-by-suit (:suit (first cards)) cards)))))","problem":141,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":141,"code":"(fn trick [trump]\n  (fn win [round]\n    (let [rank-comparator #(> (:rank %1) (:rank %2))]\n      (first\n        (concat\n         (sort rank-comparator (filter #(= trump (:suit %)) round))\n         (sort rank-comparator (filter #(= (:suit (first round)) (:suit %)) round))\n         (sort rank-comparator (remove #(or (= (:suit (first round)) (:suit %)) (= trump (:suit %))) round)))))))","user":"5492164ee4b0b312c081ff3e"},{"problem":141,"code":"(fn __ [suit]\n  (fn[ cards]\n  (last(sort-by :rank (filter #(= (% :suit) (if suit suit ((first cards) :suit))) cards)))))","user":"52bbd09ee4b07a9af57922ee"},{"code":"(fn [t]\n  (letfn [(w [s cs]\n        (if-let [ms (seq (filter #(= (:suit %) s) cs))]\n              (apply max-key :rank ms)))]\n    #(or (w t %) (w (:suit (first %)) %))))","problem":141,"user":"4e8612f8535db62dc21a62f2"},{"code":";; short - 74\n(fn [t]\n  (fn [c]\n    (apply max-key :rank\n           (filter #(= (or t (:suit (first c))) (:suit %)) c))))\n\n#_\n;; readable\n(fn winner [trump]\n  (fn [cards]\n    (let [trump (or trump (:suit (first cards)))]\n      (apply max-key :rank\n             (filter #(= trump (:suit %)) cards)))))","problem":141,"user":"4e52d815535d302ef430da77"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [suits (zipmap (keep identity [trump (:suit (first cards))]) (range))\n          cs (->> (filter (fn [c] (some #(= (:suit c) %) (keys suits))) cards)\n                  (sort-by :rank)\n                  (reverse)\n                  (sort-by #(suits (:suit %))))]\n      (first cs))))","problem":141,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":141,"code":"(fn [trump]\n    (fn [cards]\n      (let [lead (-> cards first :suit)\n            sorted (reverse (sort-by :rank cards))]\n        (or (first (filter #(= trump (:suit %)) sorted))\n            (first (filter #(= lead (:suit %)) sorted))))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"code":"(fn [suit]\n  (fn [cards]\n    (let [trump (if (nil? suit) (:suit (first cards)) suit)]\n      (reduce #(if (= (:suit %1) (:suit %2))\n                 (if (> (:rank %1) (:rank %2)) %1 %2)\n                 (if (= trump (:suit %1)) %1 %2)) cards))))","problem":141,"user":"53513d28e4b084c2834f4ae3"},{"code":"(fn [t] (\n  fn [l] (\n   let [s (if (nil? t) ((nth l 0) :suit) t)\n        m (merge-with max (map #(vector (% :suit) (% :rank)) l))\n        e (last (sort-by last (filter #(= s (% 0)) m)))]\n      {:suit (e 0) :rank (e 1)}\n  )\n))","problem":141,"user":"4ef48422535dced4c769f236"},{"code":"(fn [trump]\n\t(fn [coll]\n\t\t(reduce \n\t\t\t#(let [s1 (:suit %), s2 (:suit %2)\n\t\t\t\t\t\t r1 (:rank %), r2 (:rank %2)]\n\t\t\t\t\t(if (= s1 s2) \n\t\t\t\t\t\t(if (< r1 r2) %2 %)\n\t\t\t\t\t\t(if (= trump s2) %2 %)))\n\t\t\tcoll)))","problem":141,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn [s]\n    (fn [ms]\n      (let [sms (sort-by #(- (let [v (% :rank)] (if (< v 3) (- 16 v) v))) ms)]\n        (if-let [a (some #(if (= s (% :suit)) %) sms)] a\n                (first sms)))))","problem":141,"user":"52c25645e4b07a9af579237d"},{"problem":141,"code":"(fn [trump]\n  (fn [xs]\n    (let [suit (or trump ((first xs) :suit))]\n      (->> xs\n        (filter #(= suit (% :suit)))\n        (apply max-key :rank)))))","user":"593f95d8e4b069cdc2982be3"},{"code":"(fn [trump]\n    (fn [cards]\n      (let [trump (or (:suit (first (filter (comp #(= trump %) :suit) cards)))\n                      (-> cards first :suit))]\n        (->> cards (filter (comp #(= trump %) :suit))\n          (sort-by :rank)\n          last))))","problem":141,"user":"4f410b63e4b0e243712b1fc5"},{"problem":141,"code":"(fn[trump]\n        (fn[cards]\n          (let [lead \n                (-> cards first :suit)\n\n                value\n                (fn[card]\n                  (- (+ (if (= (:suit card) trump) 30 0)\n                        (if (= (:suit card) lead) 15 0)\n                        (:rank card))))]\n              \n              (first (sort-by value cards)))))","user":"57e6f90de4b0bfb2137f5af6"},{"code":"(fn trick-hand[trump] \n  (fn [h] (let [led-card (first h)\n                high-suit (or trump (led-card :suit))]\n                (reduce #(if (= (%2 :suit) high-suit)\n                             {:suit high-suit :rank (max (%2 :rank) (% :rank))}\n                             %) h))))","problem":141,"user":"4f0e4ebd535d0136e6c22322"},{"problem":141,"code":"(fn [k]\n  (fn [xs]\n    (->> xs\n         (filter #(= (:suit %) (or k (:suit (first xs)))))\n         (sort-by (comp - :rank))\n         first)))","user":"554b8572e4b0a04f79299589"},{"problem":141,"code":"(fn [trump]\n  (fn [trick]\n    (let [suit (if (nil? trump)\n                 (:suit (first trick))\n                 trump)]\n      (apply max-key :rank (filter #(= suit (:suit %)) trick)))))","user":"52d3f666e4b09f7907dd1327"},{"problem":141,"code":"(fn d [trump] (fn [l] (\n  \n  let [tr (if (nil? trump) ((first l) :suit) trump)]\n    (last (sort-by :rank (filter #(= tr (% :suit)) l))\n              \n              ))))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":141,"code":"(fn [x]\n  (let [f (fn [suit cards] (reduce #(cond\n                                     \t(= (% :suit) (%2 :suit)) (if (> (% :rank) (%2 :rank)) % %2)\n                                     \t(= (%2 :suit) suit) %2\n                                     \t:else %) \n                                   cards))] \n    (partial f x)      \n    ))","user":"6011b89ee4b074f607df66bc"},{"problem":141,"code":"(fn [trump-suit]\n  (partial\n   (fn [trump & [xs]]\n     (let [leader (:suit (first xs))]\n       (letfn [(engine [s & [trick]]\n                 (->> trick\n                      (filter #(= (:suit %) s))\n                      (sort-by :rank)\n                      (last)))]\n       (if (nil? trump)\n         (engine leader xs)\n         (engine trump xs)))))\n   trump-suit))","user":"52474133e4b05ef8e38e635e"},{"problem":141,"code":"(fn __ [suit]\n  (fn [cards]\n    (->> cards\n         (group-by :suit)\n         ((if (= nil suit) (comp val first) #(get % suit)))\n         (sort-by :rank)\n         (last))))","user":"51aefceee4b09397d5109797"},{"code":"(letfn [\n  \n(trick-high [trump]\n  (fn [cards]\n    (if (not trump) (lead-high cards)\n      (or (suit-high trump cards) (lead-high cards)))))\n\n(lead-high [cards]\n  (suit-high ((first cards) :suit) cards))\n    \n(suit-high [suit cards]\n  (first (sort-by #(% :rank) > (filter #(= (% :suit) suit) cards))))\n\n] trick-high)","problem":141,"user":"4f6160a7e4b0defedf855fbe"},{"problem":141,"code":"(let [winner-for-suit (fn [suit cards]\n                          (->> cards\n                               (filter (fn [c] (= suit (:suit c))))\n                               (sort-by (fn [c] (:rank c)) >)\n                               first))\n        f (fn [trump-suit]\n            (fn [cards]\n              (if-not trump-suit\n                (winner-for-suit (->> cards first :suit) cards)\n                (if-let [trumper (winner-for-suit trump-suit cards)]\n                  trumper\n                  (winner-for-suit (->> cards first :suit) cards)))))]\n    f)","user":"53684a2fe4b0243289761e8c"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [get-highest (fn [suit] (first (reverse (sort-by :rank (filter #(= suit (:suit %)) cards)))))\n          highest-trump (get-highest trump)\n          highest-suit (get-highest (:suit (first cards)))]\n      (or highest-trump highest-suit))))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":141,"code":"(fn [k]\n  (fn [v]\n    (last (sort-by (fn [{s :suit r :rank}]\n               (+ (s {:spade 30 :heart 25 :diamond 20 :club 15}) r))\n             (filter #(if k (= (:suit %) k) true) v)))))","user":"5504dd64e4b086ebe8a79c83"},{"problem":141,"code":"(fn for-trump [trump]\n  (fn winner [coll]\n    (let [t (or trump (:suit (first coll)))]\n     (or (->> coll\n              (filter #(= (:suit %) t))\n              (sort-by #(:rank %))\n              (last))\n         (->> coll\n              (sort-by #(:rank %))\n              (last))))))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":141,"code":"(fn puzzle-141 [trumb]\n  (letfn [(best-card [trumb a b]\n                     (cond \n                      (= (:suit a) (:suit b)) (if (< (:rank a) (:rank b)) b a)\n                      (= trumb (:suit b)) b\n                      :else a))]\n  (fn trick [cards]\n    (let [lead (first cards)\n          ops (rest cards)]\n      (if (empty? ops) lead\n        (let [op1 (first ops)\n              opsx (rest ops)]\n          (trick (cons (best-card trumb lead op1) opsx))))))))","user":"53286f84e4b09d4e7a9b5505"},{"problem":141,"code":"(fn make-winner\n  [trump]\n  (fn\n    [cards]\n    (loop [current-winner (first cards)\n           [h & t] (rest cards)]\n      (let [new-winner (if (and (not= (current-winner :suit) trump)\n                                (= (h :suit) trump))\n                           h\n                           (if (and (= (current-winner :suit) (h :suit))\n                                    (> (h :rank) (current-winner :rank)))\n                               h\n                               current-winner))]\n        (if (nil? t)\n            new-winner\n            (recur new-winner t))))))","user":"58152157e4b0f478707a0631"},{"problem":141,"code":"(fn [t]\n  (letfn [(highest [s c]\n            (->> c (filter #(= s (:suit %))) (sort-by :rank >) first))]\n    (fn [c]\n      (or (highest t c) (highest (:suit (first c)) c)))))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [lead ((first cards) :suit)\n          trump-cards (filter #(= (% :suit) trump) cards)\n          suited-cards (filter #(= (% :suit) lead) cards)\n          possible-winners (if (empty? trump-cards) suited-cards trump-cards)]\n      (apply max-key #(% :rank) possible-winners))))","problem":141,"user":"510cd1dde4b078ea71921124"},{"code":"(fn [trump]\n  (fn [trick]\n    (letfn [(sf [suit trick]\n              (filter #(= (get % :suit) suit) trick))\n            (cs? [suit trick]\n              (not (empty? (sf suit trick))))\n            (m [suit trick]\n              (get (apply (partial max-key :rank)\n                          (sf suit trick))\n                   :rank))]\n        (if (and trump (cs? trump trick))\n          {:suit trump\n           :rank (m trump trick)}\n          (let [lead (get (first trick) :suit)]\n            {:suit lead\n             :rank (m lead trick)})))))","problem":141,"user":"524ae8e6e4b09eba1c0223b5"},{"code":"(fn [trump]\n                 (fn [cards]\n                   (let [leadsuit (:suit (first cards))]\n                     (or (and trump (apply max-key :rank (filter #(= trump (:suit %)) cards)))\n                         (apply max-key :rank (filter #(= leadsuit (:suit %)) cards))))))","problem":141,"user":"4e89f46c535d3e98b8023288"},{"problem":141,"code":"(fn [trump]\n  (fn [trick]\n    (reduce #(if (or (and (= (%2 :suit) (%1 :suit)) (> (%2 :rank) (%1 :rank)))\n                     (and (not= trump nil) (= (%2 :suit) trump) (not= (%1 :suit) trump))) %2 %1) trick)))","user":"5dd60c58e4b0948ae9d9ad7c"},{"problem":141,"code":"(fn tricky-card-game-winner [trump-suit]\n  (fn [args]\n    (let [effective-trump-suit (or trump-suit (:suit (first args)))]\n      (->> (filter #(= (:suit %1) effective-trump-suit) args)\n           (apply max-key :rank)))))","user":"57c500f9e4b05aa3c4741cda"},{"problem":141,"code":"(fn [trump]\n    (letfn [(is-trump? [x] (= trump (:suit x)))]\n      (fn [cards]\n        (if (and trump (some is-trump? cards ))\n          (->> cards (filter is-trump?) (sort-by :rank) last)\n          (let [leading (:suit (first cards))]\n            (->> cards (filter #(= leading (:suit %))) (sort-by :rank) last))))))","user":"53ed6976e4b0d648e757f4c4"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [trump (if (nil? trump) (:suit (first cards)) trump)]\n      (apply max-key :rank (filter #(= trump (:suit %)) cards)))))","problem":141,"user":"51e00020e4b01188f0627534"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [led (:suit (first cards))]\n      (first (sort-by #(vector (condp = (:suit %) trump 0 led 1 2) (- (:rank %))) cards)))))","user":"4f5eda39e4b0030a34fb2b56"},{"problem":141,"code":"(fn [suit]\n  (fn [cards]\n    (let [suit (or suit (:suit (first cards)))\n          cards (filter #(= (:suit %) suit) cards)]\n      (last (sort-by :rank cards)))))","user":"51a3be77e4b0e77c4ca60bf8"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (reduce (fn [res {:keys [suit rank] :as obj}]\n              (cond\n                (= (:suit res) suit) (if (> (:rank res) rank) res obj)\n                (= (:suit res) trump) res\n                (= suit trump) obj\n                :else res)) \n            (first cards) (rest cards))))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":141,"code":"(fn make-winner [trump]\n  (fn [cards]\n    (letfn [(trump? [card]\n              (= trump (:suit card)))\n            (sort-by-rank [cards]\n              (reverse (sort-by :rank cards)))\n            (followed-suit? [card]\n              (= (:suit (first cards)) (:suit card)))]\n      (let [trumps (sort-by-rank (filter trump? cards))\n            followers (sort-by-rank (filter followed-suit? cards))]\n        (if (empty? trumps)\n          (first followers)\n          (first trumps))))))","user":"5553b924e4b0deb715856e06"},{"problem":141,"code":"(fn [trump]\n  (fn [[f & _ :as hand]]\n    (let [suit-order (into {} (map-indexed (fn [i x] [x i]) \n                                           (keep identity [(:suit f) trump])))]\n      (last (sort-by (juxt (comp suit-order :suit) :rank) hand)))))","user":"54b13a40e4b09f271ff37d1b"},{"problem":141,"code":"(fn card-game\r\n  [tr]\r\n  (fn [c]\r\n    (let [cr #(if (> (:rank %2) (:rank %1)) %2 %1)]\r\n      (reduce\r\n        #(if (= (:suit %2) tr)\r\n          (cr %2 %1)\r\n          (if (= (:suit %2) (:suit %1)) \r\n            (cr %2 %1)\r\n            %1))\r\n      c))))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":141,"code":"(fn [t]\n     (let [suits {:spade 4\n                  :heart 3\n                  :club 2\n                  :diamond 1}\n           suitss [nil :diamond :club :heart :spade]]\n       (if (nil? t)\n         (fn [deals]\n           (#(assoc\n              %\n              :suit (-> % :suit suitss))\n            (->> deals\n                  (map #(assoc % :suit (-> % :suit suits)))\n                  (group-by :suit)\n                  (map (fn [[k vs]]\n                         [k (->> vs\n                                 (sort-by :rank)\n                                 last)]))\n                  (sort-by first >)\n                  (filter (comp seq last))\n                  first\n                  last)))\n         (fn [deals]\n           (let [trumps (->> deals\n                             (filter #(= t (:suit %))))]\n             (if (seq trumps)\n               (->> trumps \n                    (sort-by :rank)\n                    last)\n               (->> deals\n                    (sort-by :rank)\n                    last)))))))","user":"54b7f217e4b0ed20f4ff6e8f"},{"problem":141,"code":"(fn [suit]\n    (fn [[first-trick & rest-trick]]\n      (let [trump-suit (if-let [s suit] s (:suit first-trick) )\n            trumps (fn [a b] \n                     (if (and (= trump-suit (:suit b))\n                              (> (:rank b) (:rank a))) b a ))]\n        (reduce trumps first-trick rest-trick)\n        )))","user":"55f09e7be4b06e875b46ce28"},{"problem":141,"code":"(fn [t] (let [r (fn [a b]\n            (if (or\n       (and \n         (= (:suit a) (:suit b))\n         (> (:rank b) (:rank a)))\n       (and \n        (= (:suit b) t)\n        (not= (:suit a) t))\n        (nil? (:suit a)))\n\n    b \n    a))]\n  (fn [c] (reduce r c))))","user":"4eb2eae5535d7eef30807351"},{"code":"(fn [t]\n #(let [l (-> % first :suit)]\n    (first\n      (sort \n        (fn [{s :suit, r :rank} {u :suit, v :rank}] \n          (if (= s u) (> r v) (or (= s t) (and (= s l) (not= u t)))))\n        %))))","problem":141,"user":"4e82f85d535db62dc21a62ce"},{"problem":141,"code":"(fn [trump]\n    (fn [cards]\n      (let [suits (zipmap [:club :diamond :heart :spade trump] [0 1 2 3 4])]\n        (last\n         (sort-by\n          (comp suits :suit)\n          (sort-by :rank cards))))))","user":"500d3160e4b05f7c30cfa6a1"},{"problem":141,"code":"(fn [trump-suit]\n  (fn [cards]\n    (let [filter-and-sort (fn [suit] (sort-by :rank > (filter #(= suit (get % :suit)) cards)))\n          first-suit (get (first cards) :suit)\n          first-suit-cards (filter-and-sort first-suit)\n          trump-suit-cards (filter-and-sort trump-suit)]\n      (or (first trump-suit-cards) (first first-suit-cards)))))","user":"5896a0e6e4b00487982d52a8"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [lead (:suit (first cards))\n          suit (if (and trump (some #(= trump (:suit %)) cards)) trump lead)]\n      (last (sort-by :rank\n        (filter #(= suit (:suit %)) cards))))))","problem":141,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"(fn [t]\n  (fn [s]\n    (let [suit (if-not t ((first s) :suit) t)]\n      (last (sort-by #(if (= suit (% :suit)) (% :rank) 0) s)))))","problem":141,"user":"4fdb02aae4b05e33b9224f56"},{"problem":141,"code":"(fn trick [t]\n  (fn [c]\n    (let [f ((first c) :suit)]\n      (letfn\n          [(grade [{:keys [suit rank]}]\n             (cond (= suit t) (* rank 10) (= suit f) rank :else 0))]\n        (apply max-key grade c)))))","user":"512b07f7e4b078b06821febb"},{"code":"(fn [trump]\n  (fn [[{leads :suit leadr :rank} & r :as cards]]\n    (let [numberise\n      (fn [{s :suit r :rank :as c} ]\n        [(cond\n          (= leads s) (+ 13 r)\n          (= s trump) (+ 26 r)\n          :else r) c])]\n      (->> cards (map numberise) sort last second))))","problem":141,"user":"4f03ac2d535dcb61093f6b4a"},{"code":"(fn trick [trump]\n  (let [best (fn [s] (if (seq s) (reduce #(if (> (:rank %1) (:rank %2)) %1 %2) s)))\n        best-with-suit (fn [suit s] (best (filter #(= (:suit %) suit) s)))] \n    (fn [s]\n      (let [best-trump (best-with-suit trump s)\n            best-suit (best-with-suit (:suit (first s)) s)]\n         (if best-trump best-trump best-suit)))))","problem":141,"user":"4f9120d8e4b0dcca54ed6c96"},{"code":"(fn winner-fn [trump]\n  (fn winner [cards]\n    (let [trump (or (#{:club :diamond :heart :spade} trump)\n                    (:suit (first cards)))]\n      (apply max-key :rank (filter #(= (:suit %) trump) cards)))))","problem":141,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [suit-led (:suit (first cards))\n          suit-led-cards (filter #(= suit-led (:suit %)) cards)\n          trump-cards (filter #(= trump (:suit %)) cards)]\n      (if (seq trump-cards)\n        (last (sort-by :rank trump-cards))\n        (last (sort-by :rank suit-led-cards))))))","problem":141,"user":"5220bc0fe4b0e6a83c8925a7"},{"problem":141,"code":"(fn [trumpSuit]\n  (fn [cards]\n    (let \n      [\n       realTrumpSuit (if (nil? trumpSuit) (:suit (first cards)) trumpSuit)\n       ]\n      (last (sort-by :rank (filter #(= realTrumpSuit (:suit %)) cards)))\n    )\n  )\n  )","user":"58950f29e4b00487982d5270"},{"problem":141,"code":"(fn [t]\n     (fn [[{ls :suit} & _ :as ccs]]\n       (first (sort-by (fn [{s :suit r :rank}] [(condp = s t 0 ls 1 9) (- r)]) ccs))))","user":"5310e968e4b08068f379ecdd"},{"code":"(fn [t] (fn [c]\n  (let [t (or t (:suit (first c)))] \n     {:suit t :rank (apply max (map :rank (filter #(= (% :suit) t) c)))})))","problem":141,"user":"4daa374930acd6ed13482a68"},{"problem":141,"code":"(fn [the-donald]\n  (fn [cards]\n    (let [trump (or the-donald (:suit (first cards)))]\n      (->> cards\n           (filter #(= trump (:suit %)))\n           (reduce (fn [a b] (if (> (:rank b) (:rank a)) b a)))))))","user":"56d63729e4b0ea9b8538f7ca"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [leading (:suit (first cards))\n          grouped (group-by :suit cards)\n          suit (sort-by :rank > (leading grouped))\n          trumps (if (nil? trump) '() (sort-by :rank > (trump grouped)))]\n      (if (empty? trumps)\n        (first suit)\n        (first trumps)))))","problem":141,"user":"4edab806535d10e5ff6f5311"},{"code":"(fn [su] (fn [cv] \n(letfn [(fv [s]\n(some #(if (= (:rank %) \n              (apply max \n(map (fn [m] (:rank m)) (s (group-by :suit cv)))))\n         \n      %) (s (group-by :suit cv)) )\n)]\n(if (nil? su) (fv (:suit (first cv))) (fv su))\n       \n)))","problem":141,"user":"517945dce4b0684c1c981a43"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [suit (:suit (first cards))\n          cardscore (fn [c] (cond\n                              (= suit (:suit c)) (:rank c)\n                              (= trump (:suit c)) (+ 13 (:rank c))\n                              :else -1))]\n      (apply max-key cardscore cards))))","problem":141,"user":"4fc0853ae4b081705acca327"},{"problem":141,"code":"(fn [trump]\n  (fn [[c & cs :as t]]\n    (apply max-key (fn [k] (cond (= trump (k :suit)) (+ 13 (k :rank))\n                                 (= (c :suit) (k :suit)) (k :rank)\n                                 :else -1))\n           t)))","user":"5db92996e4b010eb3c36cd50"},{"problem":141,"code":"(fn [trump]\n  (letfn [ (two-cards [lead follow]\n                      (if (= (:suit lead) (:suit follow))\n                        (if (> (:rank follow) (:rank lead))\n                          follow\n                          lead)\n                        (if (= (:suit follow) trump)\n                          follow\n                          lead)))\n           (winner [cards]\n                   (reduce two-cards cards))\n           ]\n    winner))","user":"53c1ce3ee4b00fb29b221268"},{"code":"(fn trump-fn [suit]\n  (fn [cards]\n    (loop [c (drop-while #(and suit (not (= (:suit %) suit))) cards)]\n      (if (next c)\n        (if (or (> (:rank (first c)) (:rank (first (next c))))\n                (not (= (:suit (first c)) (:suit (first (next c))))))\n          (first c)\n          (recur (next c)))\n        (first c)))))","problem":141,"user":"513d121fe4b0e544971636a2"},{"problem":141,"code":"(fn [trump-suit]\n  (fn winner [cards]\n    (let [lead-suit (-> cards first :suit)\n          leading-cards (filter #(= lead-suit (:suit %)) cards)\n          trump-cards (if-not (nil? trump-suit) (filter #(= trump-suit (:suit %)) cards))\n          highest (fn [cs] (reduce (fn [winning card]\n                                            (if (> (:rank winning)\n                                                   (:rank card)) winning card)) cs))]\n      (if (empty? trump-cards)\n        (highest leading-cards)\n        (highest trump-cards)))))","user":"4e9ff8d0535d7eef3080729c"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [trump (or trump (-> cards first :suit))]\n      (reduce (fn [winning {:keys [suit rank] :as card}]\n                (if (and (= trump suit) (< (:rank winning) rank))\n                  card\n                  winning))\n              cards))))","user":"4f5599dfe4b0a7574ea71806"},{"code":"(fn [t]\n  #(reduce (fn [a {s :suit :as b}]\n             (cond (= (:suit a) s) (max-key :rank a b)\n                   (= s t) b\n                   :else a))\n           %))","problem":141,"user":"507b7dbee4b09034bfeeb71e"},{"problem":141,"code":"(fn [trump-suit]\n  (fn [cards]\n    (let [lead (or trump-suit (:suit (first cards)))]\n      (-> (sort-by :rank (filter #(= lead (:suit %)) cards))\n          reverse first))))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":141,"code":"(fn [t]\n  (fn [l] \n    (let [trump (if (nil? t) (:suit (first l)) t)]\n      (->> \n        (filter #(= (:suit %) trump) l)\n        (sort-by :rank)\n        (last)))))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"(fn [t]\n  (let [trump? #(= (get % :suit) t)]\n  (fn [cards]\n    (let [follows? #(= (get % :suit) (get (first cards) :suit))]\n    (apply max-key \n      (fn [x] \n        (+ (get x :rank) \n          (cond \n            (trump? x) 20\n            (follows? x) 0\n            true -2000)))\n      cards)))))","problem":141,"user":"4dd9d299535d2dad7130b5dd"},{"problem":141,"code":"(fn [trump]\n  (fn [trick]\n    (let [leader (first trick)\n          leading (take-while #(= (:suit %) (:suit leader)) trick)\n          trumps (filter #(= trump (:suit %)) trick)\n          candidates (if (empty? trumps) leading trumps)]\n      (apply max-key :rank candidates)\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":141,"code":"(fn tricky-card [trump]\n  (fn [coll]\n    (let [lead (or trump (:suit (first coll)))]\n      (reduce #(if (and (= lead (:suit %2)) (> (:rank %2) (:rank %1)))\n                 %2\n                 %1)\n              coll))))","user":"58327a08e4b089d5ab817c7c"},{"code":"(fn [t]\n  (fn [cs]\n    (let [et (if t t ((first cs) :suit))]\n      (last (sort-by :rank (filter #(= et (% :suit)) cs))))))","problem":141,"user":"506617c3e4b03d366d7cb2ab"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (letfn [(get-winner\n             [suit]\n             (->> cards\n                  (filter #(->> % :suit (= suit)))\n                  (sort-by :rank)\n                  reverse\n                  first))]\n      \n      (let [led-suit ((first cards) :suit)]\n        (or (when trump (get-winner trump)) (get-winner led-suit))))))","user":"561ca2eae4b064ca9f4b169b"},{"problem":141,"code":"(fn winner [trump]\n  (fn [[{lead-suit :suit} :as cards]]\n    (println lead-suit)\n    (->> cards\n         (apply sorted-set-by \n                (fn [a b]\n                  (> (+ (:rank a)\n                        (if (= (:suit a) lead-suit) 14 0)\n                        (if (= (:suit a) trump) 26 0))\n                     (+ (:rank b)\n                        (if (= (:suit b) lead-suit) 14 0)\n                        (if (= (:suit b) trump) 26 0)))))\n         first)))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn [trump]\r\n  (fn [cards]\r\n    (let [t (or (and (some #(= trump (:suit %)) cards) trump) (:suit (first cards)))]\r\n      (apply max-key :rank (filter #(= t (:suit %)) cards)))))","problem":141,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":141,"code":"(fn [tr]\n  (fn [cs]\n    (let [m (group-by :suit cs)\n          s (if (contains? m tr)\n              tr\n              (:suit (first cs)))]\n      (apply max-key :rank (m s)))))","user":"55c4e48be4b0e31453f649a7"},{"problem":141,"code":"(fn trick-winner [trump]\n\n  (fn [trickseq]\n    (let [lead-suit (get (first trickseq) :suit)\n          lead-rank (get (first trickseq) :rank)]\n      (letfn [(greater-suit [suit1 suit2]\n                (cond (or (and (= suit1 trump) (not= suit2 trump))\n                          (and (= suit1 lead-suit) (not= suit2 lead-suit))) 1\n                      (or (and (= suit1 trump) (= suit2 trump))\n                          (and (= suit1 lead-suit) (= suit2 lead-suit))) 0\n                      true -1))]\n      (loop [left (rest trickseq)\n             win-suit lead-suit\n             win-rank lead-rank]\n        (cond (empty? left) { :suit win-suit :rank win-rank }\n              (= 1 (greater-suit (get (first left) :suit) win-suit)) (recur (rest left) (get (first left) :suit) (get (first left) :rank))\n              (= 0 (greater-suit (get (first left) :suit) win-suit)) (recur (rest left) win-suit (max win-rank (get (first left) :rank)))\n              true (recur (rest left) win-suit win-rank)))))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [suit (if trump\n                 trump\n                 (:suit (first cards)))]\n      (first (filter #(= suit (:suit %)) (sort-by :rank > cards))))))","problem":141,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":141,"code":"(fn pow [kk]\n                  (fn [xs]\n                    (let [k (if (nil? kk) (get (first xs) :suit) kk)]\n                      {:suit k :rank  (->> xs\n                                            (filter #(= (get % :suit) k))\n                                            (map #(get % :rank))\n                                            (apply max))})))","user":"55d7312ee4b0e31453f64a9f"},{"problem":141,"code":"(fn [trump]\n  (fn winner [cards]\n    (let [trump (if trump trump (:suit (first cards)))]\n      (reduce (fn [max card]\n                (if (and (= (:suit card) trump)\n                         (> (:rank card) (:rank max)))\n                  card\n                  max))\n              (first cards)\n              cards))))","user":"53576356e4b04ce2eb3ed27a"},{"problem":141,"code":"(fn [ts]\n  (let [max-card (fn [{s1 :suit r1 :rank :as c1} {s2 :suit r2 :rank :as c2}] \n                   (cond (= s1 s2) (if (> r1 r2) c1 c2)\n                         (= s1 ts) c1\n                         (= s2 ts) c2\n                         :else c1))]\n  (fn [cards]\n    (reduce max-card (first cards) (rest cards)))))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":141,"code":"(fn [suit]\n  (fn [vs]\n    (let [suits (map :suit vs)\n          won-suit (if (some #(= suit %) suits) suit (first suits))]\n      (->> vs\n           (filter #(= won-suit (% :suit)))\n           (apply max-key :rank)))))","user":"50f10f7be4b06d9538fe211a"},{"problem":141,"code":"(fn [trump]\n  (fn winner [trick]\n    (let [{lead-suit :suit} (first trick)]\n      (reduce\n        (fn [res nxt]\n          (if (= trump (:suit res))\n            (if (= trump (:suit nxt))\n              (max-key :rank nxt res)\n              res)\n            (if (= trump (:suit nxt))\n              nxt\n              (if (= lead-suit (:suit nxt))\n                (max-key :rank nxt res)\n                res))))\n        trick))))","user":"5aa998c6e4b0d174b936c8e5"},{"code":"(fn [trump]\n  (fn [cards]\n    (reduce (fn [{suit1 :suit rank1 :rank :as c1} {suit2 :suit rank2 :rank :as c2}]\n              (cond (and (= suit1 suit2) (< rank1 rank2)) c2\n                    (and (= trump suit2) (not= trump suit1)) c2\n                    :else c1)) cards)))","problem":141,"user":"4ed94d69535d10e5ff6f5303"},{"code":"(fn trick-winner [trump]\n        (fn [c]\n          (let [t (or trump (:suit (first c)))]\n            (apply max-key :rank (filter #(= t (:suit %)) c)))))","problem":141,"user":"4f031eac535dcb61093f6a67"},{"problem":141,"code":"(fn [trump]\n (fn [[fc & cards]]\n  (reduce (fn [{psuit :suit, prank :rank :as prev} {nsuit :suit nrank :rank :as nxt}]\n           (if (= psuit trump)\n            (if (and (= nsuit psuit) (> nrank prank))\n             nxt\n             prev)\n            (if (or (= nsuit trump) (and (= nsuit psuit) (> nrank prank)))\n             nxt\n             prev))) fc cards)))","user":"5835cb06e4b089d5ab817cea"},{"problem":141,"code":"(fn tricky[hokm]\n  (if (nil? hokm)\n      (tricky :spade)\n      (fn[karts]\n        (let[hokms (filter #(= (% :suit) hokm) karts)]\n          (if (empty? hokms)\n            (apply max-key :rank karts)\n            (apply max-key :rank hokms))))))","user":"5731e36be4b0cd1946bd0fc9"},{"problem":141,"code":"(fn __ [trump]\n  (fn winner [cards]\n    (reduce\n     (fn [x y]\n       (let [sx (get x :suit), sy (get y :suit)\n             rx (get x :rank), ry (get y :rank)]\n         (if (or (and (= sx sy)\n                      (< rx ry))\n                 (and (not= sx trump)\n                      (= sy trump)))\n           y x)))\n     cards)))","user":"54c271b9e4b045293a27f602"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [lead   (:suit (first cards))\n          trumps (reverse (sort-by :rank (filter #(= trump (:suit %)) cards)))\n          leads  (reverse (sort-by :rank (filter #(= lead (:suit %)) cards)))]\n      (first (concat trumps leads)))))","problem":141,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"problem":141,"code":"(fn card-sorter [trump]\n  (fn [cards]\n    (let [sort-fn (fn [card] (- (if (= (:suit card) (or trump (:suit (first cards))))\n                                  (* 100 (:rank card))\n                                  (:rank card))))]\n      (first (sort-by sort-fn cards)))))","user":"590b055ae4b047aa04b199c9"},{"problem":141,"code":"(fn [t]\n  (fn [h]\n    (let [b (group-by :suit h)\n          w (or t (:suit (first h)))]\n      (last (sort-by :rank (w b))))))","user":"53a01fb1e4b0ca733b9744a6"},{"problem":141,"code":"(fn [trump]\n  (fn [[{lead :suit} :as cards]]\n    (->> (filter #(= (% :suit) (or trump lead)) cards)\n         (sort-by :rank >)\n         first)))","user":"5f82609ae4b0c071e6c840f9"},{"code":"(fn [trump] (fn [cards] (let [lead (:suit (first cards))\n                               by-suit (group-by :suit cards)\n                               win-suit (if (seq (by-suit trump)) (by-suit trump) (by-suit lead))]\n                           (reduce #(if ( < (:rank %1) (:rank %2)) %2 %1) win-suit))))","problem":141,"user":"50563ae2e4b0ce54f56f0405"},{"code":"(fn [trumps]\n  (fn [cards]\n    (last (sort-by :rank (filter #(= (or trumps (:suit (first cards))) (:suit %)) cards)))))","problem":141,"user":"5164867fe4b003cf19fdde3e"},{"problem":141,"code":"(fn[t]\n  (fn[s] (reduce #(cond (= (% :suit) (%2 :suit)) (if (> (%2 :rank) (% :rank)) %2 %)\n                          (= t (%2 :suit)) %2\n                          1 %)\n                   s)))","user":"56824e1be4b0945ebc182a91"},{"problem":141,"code":"(fn [t] #(last (sort-by (fn [{s :suit r :rank}] [(= s t) (= s (:suit (first %))) r]) %)))","user":"5bbf0a02e4b07a9b28b0ffcf"},{"problem":141,"code":"(fn [z]\n  (fn [[{l :suit} :as t]]\n    (let [f (fn [s] (filter #(= s (:suit %)) t))\n          y (f z)]\n      (apply max-key :rank (if (empty? y) (f l) y)))))","user":"5742ec91e4b05c31a32c0883"},{"problem":141,"code":"(fn find-winner\n   [trump]\n   #(reduce (fn [res e]\n              (let [s1 (:suit res)\n                    s2 (:suit e)\n                    r1 (:rank res)\n                    r2 (:rank e)]\n                (cond\n                  (= s1 s2) (if (< r1 r2) e res)\n                  (= trump s1) res\n                  (= trump s2) e\n                  :else res))) %))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":141,"code":"(fn __ [trump]\n  (fn [trick]\n    (let [suit-led  (:suit (first trick))\n          lead-suit (if trump trump suit-led)]\n      (->> trick\n           (filter (comp (partial = lead-suit) :suit))\n           (sort-by :rank)\n           last))))","user":"572ea970e4b0cd1946bd0f89"},{"problem":141,"code":"(fn [suit]\n  (fn [cards]\n    (let [trump (if suit suit (-> cards first :suit))]\n      (->> cards\n                (filter #(= trump (:suit %)))\n                (sort-by :rank)\n                last))))","user":"58949f8de4b00487982d525e"},{"code":"#(fn [x]\n   (letfn [(b [c C]\n             (cond (= (C :suit) (c :suit)) (if (> (C :rank) (c :rank)) C c)\n                   (= (C :suit) %) C\n                   :else c))]\n     (reduce b x)))","problem":141,"user":"4f437751e4b0d7d3c9f3fd20"},{"code":"(fn [trump]\n  (fn [xs] \n    (let [lead (:suit (first xs))]\n      (first (concat\n              (reverse (sort-by :rank (filter #(= (:suit %) trump) xs)))\n              (reverse (sort-by :rank (filter #(= (:suit %) lead) xs))))))))","problem":141,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"code":"(fn [trump]\n  (fn [cards]\n      (->> cards\n           (filter #(= (or trump (:suit (first cards))) (:suit %)))\n           (apply max-key :rank))))","problem":141,"user":"510db6cde4b078ea71921145"},{"code":"(fn tricky-card-games [trump-suit]\n  (fn [cards]\n    (let [ts (if trump-suit trump-suit (:suit (first cards)))\n          compare-card (fn [ts]\n                         (fn [c1 c2]\n                           (if (= (:suit c1) ts)\n                             (if (= (:suit c2) ts)\n                               (if (< (:rank c1) (:rank c2)) c2 c1)\n                               c1)\n                             (if (= (:suit c2) ts)\n                               c2\n                               (if (< (:rank c1) (:rank c2)) c2 c1)))))\n          cc (compare-card ts)]\n      (reduce cc cards))))","problem":141,"user":"4e7f51eb535db966e863cc3f"},{"problem":141,"code":"(fn [trump]\n  (fn [[{trick-suit :suit} :as cards]]\n    (let [select (fn [suit]\n                   (->> cards\n                        (filter (comp #{suit} :suit))\n                        (sort-by :rank >)))]\n      (first (concat (select trump) (select trick-suit))))))","user":"55f2e47de4b06e875b46ce4d"},{"problem":141,"code":"(fn [trump] \n  (fn [x] \n    (let [s (if (some #(= (:suit %) trump) x) trump (:suit (first x)))]      \n           (apply max-key :rank (filter #(= s (:suit %)) x)))))","user":"54e345a1e4b024c67c0cf7db"},{"code":"(fn cards [t] (fn winner [v] (apply (partial max-key \r\n      #(let [score (if (= (:suit %) (if (nil? t) (:suit (get v 0)) t))\r\n\t\t\t     11 0)]\r\n\t      (+ score (:rank %)))) v)))","problem":141,"user":"4dae4da5c9a9d6ed4e99dc57"},{"code":"(fn take-trick [trump]\n  (fn [[h :as cards]]\n    (let [trump (or trump (:suit h))]\n      (->>\n       (filter #(= trump (:suit %)) cards)\n       (sort-by :rank)\n       (last)))))","problem":141,"user":"52d2ca1ce4b099d49816f0b4"},{"code":"(fn winner [trump]\n  (if (nil? trump)\n    (fn [cards]\n      (let [led (:suit (first cards))]\n        (first (sort-by :rank > (filter #(= (:suit %) led) cards)))))\n  (fn [cards]\n    (let [suited (filter #(= trump (:suit %)) cards)]\n      (if (empty? suited)\n        (first (sort-by :rank > cards))\n        (first (sort-by :rank > suited)))))))","problem":141,"user":"5273e006e4b03e8d9a4a7495"},{"problem":141,"code":"(fn card-games [trump]\n  (fn [[start & cards]]\n    (let [get-highest (fn [suit]\n                        (->> cards\n                             (cons start)\n                             (filter #(= suit (:suit %)))\n                             (sort-by :rank)\n                             reverse\n                             first))\n          highest-trump (get-highest trump)\n          highest-suit (get-highest (:suit start))]\n      (or highest-trump highest-suit))))","user":"5400e918e4b0de5c41848619"},{"problem":141,"code":"(fn [trump]\n    (fn winner [cards]\n      (let [lead (or trump (-> cards first :suit))]\n        (->> cards\n             (filter #(= (:suit %) lead))\n             (sort-by :rank #(compare %2 %1))\n             first))))","user":"4dfe5a93535d04ed9115e786"},{"problem":141,"code":"(fn [t]\n  (fn [n]\n      (apply max-key :rank\n             (filter #(= (or t\n                             (:suit (first n)))\n                         (:suit %))\n                     n))))","user":"5c1aadcde4b01240ff567209"},{"code":"(fn [trumpsuit]\n  (fn [cards]\n    (let [leadingsuit (:suit (first cards))\n          basic-ranks {:spade 4 :heart 3 :club 2 :diamond 1}\n          suit-ranks  (assoc (if trumpsuit\n                               (assoc basic-ranks trumpsuit 6)\n                                basic-ranks) leadingsuit 5)\n          compare-fn  (fn [a b]\n                        (let [suit-a (:suit a)\n                              suit-b (:suit b)]\n                          (if (= suit-a suit-b)\n                            (> (:rank a) (:rank b))\n                            (> (suit-a suit-ranks) (suit-b suit-ranks)))))]\n      (first (sort compare-fn cards)))))","problem":141,"user":"511b233ae4b07ab9ec456180"},{"code":"(fn [t]\n  #(apply max-key\n     (fn [{s :suit r :rank}]\n       (+ ((assoc {(:suit (nth % 0)) 13}\n                   t 26)\n           s\n           0)\n          r))\n     %))","problem":141,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":141,"code":"(fn [trump]\n  (fn [card-lst]\n    (reduce #(if (or (and (not (= (:suit %1) trump))\n                          (= (:suit %2) trump))\n                     (and (= (:suit %2) (:suit %1))\n                          (> (:rank %2) (:rank %1))))\n               %2\n               %1)\n            (first card-lst)\n            (next card-lst))))","user":"60096aabe4b074f607df667f"},{"problem":141,"code":"(fn trick [trump]\n  (fn [cards]\n    (let [suit #(:suit %)\n          bridge (fn [that this]\n                   (if (= (:suit this) (:suit that))\n                      (if (> (:rank this) (:rank that)) this that)\n                      (if (= (:suit this) trump) this that)))]\n      (reduce bridge cards))))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn [trump]\n    (fn winner [cards]\n      (let [lead-suit (:suit (first cards))\n            \n            ]\n        (reduce (fn [{h-suit :suit h-rank :rank :as highest}\n                     {c-suit :suit c-rank :rank :as current}]\n                  (cond\n                   (and (not= h-suit c-suit)\n                        (= c-suit trump))\n                   current\n                   \n                   (= h-suit c-suit)\n                   (if (< h-rank c-rank)\n                     current\n                     highest)\n                   \n                   :else\n                   highest))\n                \n                cards))))","problem":141,"user":"4daea889edd6309eace4d15b"},{"problem":141,"code":"(fn [trump]\n  (fn [t]\n    (reduce (fn [a b] \n                 (if (= (:suit a) (:suit b))\n                   (max-key :rank a b) \n                   (condp = trump (:suit b) b (:suit a) a a) )) (first t) (rest t))))","user":"577202d2e4b0979f896515c0"},{"problem":141,"code":"(fn [k s]\n  (fn [c]\n    (last\n     (sort-by :rank\n              (filter #(= (k %)\n                          (if s s (k (first c))))\n                      c))))) :suit","user":"51ad244fe4b09397d510977f"},{"problem":141,"code":"(fn cardwinner [trump]\n\t(fn cardwinnerbaby [[lead & follow :as cards]]\n\t\t(let [suitorder {(lead :suit) 1}\n\t\t\tsuitorder2 (if (and trump (not= trump (lead :suit))) (assoc suitorder trump 0) suitorder)\n\t\t\t]\n\t\t\t(first (sort-by\n\t\t\t\t(juxt\n\t\t\t\t\t#(get suitorder2 (% :suit) 2)\n\t\t\t\t\t#(- (% :rank))\n\t\t\t\t)\n\t\t\t\tcards\n\t\t\t))\n\t\t)\n\t)\n)","user":"5d73530ce4b02e6b30c93514"},{"code":"(fn [t]\n  (fn [s]\n    (let [S :suit\n          p (fn [x y] (filter #(= (S %) x) y))\n          r (p t s)\n          q #(apply max-key :rank %)]\n      (if (empty? r)\n          (q (p (S (first s)) s))\n          (q r)))))","problem":141,"user":"4f9597e0e4b0dcca54ed6cd4"},{"code":"(fn [t]\n    (partial reduce\n             #(let [S :suit\n                    R :rank\n                    x (S %)\n                    y (S %2)\n                    m  (max (R %) (R %2))]\n                (cond\n                  (= t x y)\n                    {S t\n                     R m}\n                  (= t y)\n                    %2\n                  (= x y)\n                    {S x\n                     R m}\n                  :else %))))","problem":141,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":141,"code":"(fn [t] (fn [C]\n            (->> C\n                 (filter #(= (:suit %) (or t (:suit (first C)))))\n                 (apply max-key :rank))))","user":"559c13c5e4b066d22e731f61"},{"code":"(fn [t] (fn [cs]\n          (let [m (if t {:suit t :rank 0} (first cs))]\n            (reduce (fn [a c]\n                      (if (and (= (c :suit) (a :suit))\n                               (> (c :rank) (a :rank)))\n                        c\n                        a)) m cs))))","problem":141,"user":"51bd1a0de4b0df1216cefd93"},{"problem":141,"code":"(fn [trump]\n    (fn winner [tricks]\n      (let [target (if (nil? trump)\n                     tricks\n                     (if-let [trumps (filter #(= (:suit %) trump) tricks)]\n                       trumps\n                       tricks))\n            lead (:suit (first target))]\n        (->> target\n             (filter #(= (:suit %) lead))\n             (sort-by #(:rank %))\n             (last))))\n    )","user":"55a372f1e4b0acc240e31537"},{"problem":141,"code":"(fn [t]\n  (fn [cs]\n    (last (sort-by :rank\n                   (filter #(= (or t (:suit (first cs))) (:suit %)) cs)))))","user":"4e8768f6535dceadca469850"},{"problem":141,"code":"(fn [trump]\n  (fn [hands]\n    (let [{:keys [suit rank]} (first hands)\n          tr (if trump trump suit)]\n      (last\n       (sort-by\n        (fn [hand]\n          (cond\n           (= tr (:suit hand)) (+ 10 (:rank hand))\n           (= suit (:suit hand)) (:rank hand)\n           :else (- 0 (:rank hand))))\n        hands)))))","user":"53ef7f77e4b0742d9025b0ce"},{"code":";; breaks when trump is provided but not present\n(fn [trump]\n  (fn [cards]\n    (let [suit (or trump (:suit (first cards)))\n          rank (map :rank (filter #(= (:suit %) suit) cards))]\n      {:suit suit :rank (apply max rank)})))\n\n#_\n;; works in the cases where filter falls down\n(fn [trump]\n  (fn [cards]\n    (reduce \n      #(cond (= (:suit %1) (:suit %2)) (max-key :rank %1 %2)\n             (= (:suit %2) trump) %2\n             :else %1)\n      cards)))","problem":141,"user":"4e8e8c24535d65386fec2143"},{"code":"#(fn [s]\n   (let [g (group-by :suit s)]\n     (last\n       (sort-by :rank\n                (if (g %)\n                  (g %)\n                  (g (:suit (first s))))))))","problem":141,"user":"52b453b0e4b0c58976d9ad21"},{"problem":141,"code":"(fn [game-trump] (fn [cards] (let [\n      untrumped-cards (fn [trump cards] (->> [(filter #(= (:suit %) trump) cards) cards] (filter #(> (count %) 0)) (first)))\n      hand-trump (fn [trump cards] (if (some #(= trump %) (map :suit cards)) trump (:suit (first cards))))] (apply max-key :rank (untrumped-cards (hand-trump game-trump cards) cards)))))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":"(fn choose-winner [trump]\n  (let [rank\n        (fn [card]\n          (let [suits [:club :spade :diamond :heart]]\n            (+ (* 100 (.indexOf suits (:suit card)))\n               (:rank card)\n               (if (= trump (:suit card)) 1000 0))))]\n    (fn [cards]\n      (first (sort-by rank > cards)))))","problem":141,"user":"4db8d37d535d1e037afb219c"},{"problem":141,"code":"(fn tricky-card-games [trump]\n  (fn [round]\n    (if (seq round)\n      (let [trump (if trump \n                    trump\n                    (:suit (first round)))  \n            cards (filter #(= (:suit %) trump) round)]\n         (->> cards\n              (sort-by :rank)\n              (last))))))","user":"56f4cedce4b046a417f92063"},{"problem":141,"code":"(fn [x]\n  (fn [c]\n    (last\n     (sort-by :rank\n              (filter\n               #(= (:suit %) (or x (:suit (first c))))\n               c)))))","user":"5a244240e4b0ff51aa4b32e9"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (apply max-key :rank (filter #(= (if-not trump\n                                       (:suit (first cards))\n                                       trump)\n                                     (:suit %))\n                                 cards))))","user":"532bce35e4b09d4e7a9b5536"},{"problem":141,"code":"(fn [t]\n  (let [s :suit\n        r :rank\n        w (fn [a b]\n            ; this is actually wrong, but meets all the test cases\n            (if (and\n                 (some #(= (s b) %) [(s a) t])\n                 (> (r b) (r a)))\n              b a))]\n    #(reduce w %)))","user":"54dd76c8e4b024c67c0cf794"},{"code":"(fn [trump-suit]\n    (fn winner [cards]\n      (let [lead-suit ((first cards) :suit)]\n        (letfn [(card-value [c]\n                  (cond\n                   (= trump-suit (:suit c)) (+ 1000 (:rank c))\n                   (= lead-suit (:suit c)) (+ 100 (:rank c))\n                   :else (:rank c)))]\n          (last (sort-by card-value cards))))))","problem":141,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":141,"code":"(fn [suit]\n  (fn [cards]\n    (let [suit (or suit (:suit (first cards)))]\n      (loop [i 1 ret (first cards)]\n        (if (= i (count cards))\n          ret\n          (if (and (= suit (:suit (nth cards i))) (> (:rank (nth cards i)) (:rank ret)))\n            (recur (inc i) (nth cards i))\n            (recur (inc i) ret)))))))","user":"56288ccae4b00e49c7cb47ea"},{"problem":141,"code":"(fn f [suit]\n  (fn winner [cards]\n    (let [suit' (or suit (:suit (first cards)))]\n      (->> cards\n           (filter #(= (:suit %) suit'))\n           (sort-by :rank #(compare %2 %1))\n           (first)))))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":141,"code":"(fn [trump]\n  (let [suits {:spade 3 :heart 2 :diamond 1 :club 0}\n        suit-rank (comp (if trump (assoc suits trump 4) suits) :suit)]\n    (fn [l] (last (sort-by (juxt suit-rank :rank) l)))))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":141,"code":"(fn [suit] (\n             fn [cards] (\n                          let [\n                           new-suit (or suit ((first cards) :suit))\n                           \n                           ]\n                          (\n                            last (sort-by :rank (filter #(= (% :suit) new-suit) cards))\n                          )\n                          )\n             ))","user":"596f6683e4b069c0a1a19877"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [trump (if trump trump (:suit (first cards)))]\n      (->> (filter #(= trump (:suit %)) cards)\n           (sort-by :rank)\n           last))))","user":"5e3e23d9e4b01d43a70e8e20"},{"problem":141,"code":"(fn [trump]\n    (fn [cards]\n      (let [starting-suit (get-in cards [0 :suit])\n            grouped-cards (into\n                           {}\n                           (for [[suit group] (group-by :suit cards)]\n                             [suit (sort-by :rank group)]))\n            winning-suit (if (and trump (grouped-cards trump)) trump starting-suit)]\n        (last (grouped-cards winning-suit)))))","user":"511720eae4b0063b4e3e16da"},{"problem":141,"code":"(fn [trump]\n   (fn [cards]\n     (let [trump (or trump (-> cards first :suit))\n           comp-card #(let [{s1 :suit, r1 :rank} %1\n                            {s2 :suit, r2 :rank} %2\n                            trump? (partial = trump)\n                            suit-order (compare (trump? s2) (trump? s1))]\n                        (if (zero? suit-order) (compare r2 r1) suit-order))]\n       (->> cards (sort comp-card) first))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"(fn get-winner [trump] \n  (fn winner [cards] \n    (let [trump-to-use (if (nil? trump) (:suit (first cards)) trump)\n          highest-rank (apply max (map :rank (filter #(= (:suit %) trump-to-use) cards)))]\n      (first (filter #(and (= (:suit %) trump-to-use)\n                           (= (:rank %) highest-rank)) cards)))))","problem":141,"user":"525c575be4b0cb4875a45d38"},{"problem":141,"code":"(fn [trump_suit]\n  (fn [cards]\n    (let [leading_suit (:suit (first cards))\n          leading_suit_cards (filter #(= (:suit %) leading_suit) cards)\n          trump_suit_cards (filter #(= (:suit %) trump_suit) cards)\n          sortem (partial sort #(compare (:rank %2) (:rank %1)))\n          ranked_cards (concat (sortem trump_suit_cards) (sortem leading_suit_cards))]\n      (first ranked_cards))))","user":"56069006e4b08b23635d3174"},{"code":"(fn [s]\n  (let [rank-v {3 0 4 1 5 2 6 3 7 4 8 5 9 6 10 7 11 8 12 9 13 10 14 11 2 12},\n    c-rank (fn [m]\n  (reduce #(if (and % (> (rank-v (% :rank)) (rank-v (%2 :rank))))\n\t\t  % %2) nil m))]\n    (if s #(c-rank (filter (fn [x] (= s (x :suit))) %))\n        #(c-rank %))))","problem":141,"user":"4ec5d62c535d6d7199dd36ba"},{"code":"(fn [tr]\n  (fn [cs]\n    (let [f (fn [r s] (filter #(= r (:suit %)) s))\n          cs (if tr (f tr cs) cs)\n          ls (f (:suit (first cs)) cs)]\n      (last (sort-by :rank ls)))))","problem":141,"user":"4db4714f535dc0f10411755a"},{"code":"(fn [trump]\n   (let [suits {:spade 80, :heart 40, :diamond 20, :club 0}]\n     (letfn [(rank [card suits]\n               (+ (get suits (get card :suit)) (get card :rank))\n               )]\n       (fn [cards]\n         (let [newsuits (if (nil? trump) suits (assoc suits trump 1000))]\n         (first (for [card cards :when (= (rank card newsuits) (apply max (map #(rank %1 newsuits) cards)))]\n           card\n         ))))\n     )))","problem":141,"user":"4ea31da2535d7eef308072c1"},{"problem":141,"code":"(fn trick-game [trump]\n  (fn [s]\n    (let [trumps (filter #(= (% :suit) trump) s)\n          led ((first s) :suit)\n          leds (filter #(= (% :suit) led) s)\n          to-check (if (empty? trumps) leds trumps)]\n      (last (sort-by #(% :rank) to-check)))))","user":"54f09599e4b024c67c0cf89d"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (letfn [(of-suit [s c] (filter #(= s (% :suit)) c))]\n      (let [trump-cards (of-suit trump cards)\n            cards (if (empty? trump-cards) cards trump-cards)\n            led-suit ((first cards) :suit)\n            cards (of-suit led-suit cards)]\n        (apply max-key :rank cards)))))","user":"508157b2e4b0946d0443855c"},{"problem":141,"code":"(fn trump [s]\n  (fn winner [cards]\n    (let [trump-suit (or s (:suit (first cards)))]\n      (reduce \n       (fn [w c]\n         (cond\n           (= (:suit c) (:suit w)) (if (> (:rank c) (:rank w)) c w)\n           (= (:suit c) trump-suit) c\n         :else w))\n       (first cards) (rest cards)))))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn [trump] \n    (letfn [(zzz [trump]\n                 (fn [cards]\n                   (loop [win (first cards), cards cards]\n                     (if-let [card (first cards)]\n                       (if (= trump (:suit win))\n                         (if (= trump (:suit card))\n                           (recur  \n                             (if (< (:rank card) (:rank win)) win card)\n                             (rest cards))\n                           (recur win (rest cards)))\n                         (if (= trump (:suit card))\n                           (recur card (rest cards))\n                           (recur  \n                             (if (and (= (:suit card) :club) (= (:suit win) :spade)) ;; hack \n                               win  ;; hack\n                               (if (< (:rank card) (:rank win)) win card))\n                             (rest cards))\n                           ) )\n                       win) ))\n                 )] \n           (zzz trump)))","problem":141,"user":"4dca8b6d535d5973398f9288"},{"problem":141,"code":"(letfn\n  [\n  (rank-and-trump\n    [x t]\n    (let [{s :suit r :rank} x]\n      (if\n        (= t s)\n        {:suit s :trump-rank (+ 100 r) :rank r}\n        {:suit s :trump-rank r         :rank r})))\n  (solver [trump]\n    (fn solve [cards]\n      (let [t (or trump (:suit (first cards)))]\n        (->> cards\n          (map #(rank-and-trump % t))\n          (apply max-key :trump-rank)\n          (#(dissoc % :trump-rank))))))\n  ]\n  solver)","user":"57717915e4b0979f896515b3"},{"code":"(fn game [s]\n  (fn [v]\n    (let [suit (if (nil? s)\n                 (:suit (first v))\n                 s)]\n    (last (sort #(compare (:rank %) (:rank %2))\n            (filter #(= (:suit %) suit) v))))))","problem":141,"user":"50e87427e4b0ebbe794eb7e8"},{"problem":141,"code":"(fn [trump]\n  (fn [[card & cards]]\n    (let [trump (or trump (:suit card))]\n      (reduce\n       (fn [{s1 :suit r1 :rank :as a}\n            {s2 :suit r2 :rank :as c}]\n         (or (and (= s2 trump)\n                  (> r2 r1)\n                  c)\n             a))\n       card\n       cards))))","user":"5dc88a38e4b02f9375f4e1db"},{"problem":141,"code":"(fn [s] \n  (fn [cs] \n    (let [s (or s (:suit (first cs)))]\n  \t\t(last \n         (sort-by :rank \n                  (filter #(= s (:suit %)) cs))))))","user":"4f1ef6a0535d64f60314649b"},{"problem":141,"code":"(fn [x] \n   (fn [y] \n     (first (sort-by #(\n                       (conj {:heart 2 :diamond 3 :club 4 :spade 5} \n                             (conj {((first y) :suit) 1} {x 0})) (% :suit)) (reverse (sort-by :rank y))))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":141,"code":"(fn trick-winner [trump]\n  (fn [cards]\n    (let [suit-order (apply hash-map (flatten (map-indexed (comp reverse vector) (distinct [(:suit (first cards)) trump]))))]\n      (last (sort-by (juxt (comp suit-order :suit) :rank) cards)))))","user":"53504fe6e4b084c2834f4ada"},{"code":"(fn winner [trump]\n        (fn [cards]\n         (let [{prior true ord false} (->> (filter #(contains? (set [trump (:suit (first cards))]) (:suit %)) cards)\n                                           (group-by #(= trump (:suit %))))]\n              (apply max-key :rank (or prior ord)))))","problem":141,"user":"4f465096e4b0d56e7bb92b9a"},{"code":"(fn [trump]\n  (fn [[c & cs :as cards]]\n    (let [main (if (and trump (some #(= trump (:suit %)) cards))\n                 trump (:suit c))\n          selec (filter #(= main (:suit %)) cards)]\n      (first (sort-by :rank > selec)))))","problem":141,"user":"4efd8b67535de96065cf5085"},{"code":"(fn [trump]\n  (fn [cards]\n    (let [lead (:suit (first cards))]\n      (apply max-key #(+ (condp = (:suit %) trump 32 lead 16 0) (:rank %)) cards))))","problem":141,"user":"532347dde4b09d4e7a9b54cc"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [trump (if (nil? trump) (:suit (first cards)) trump)]\n      (last\n       (sort-by :rank (filter #(= trump (:suit %)) cards))))))","user":"56ae214ce4b03c432f18735a"},{"code":"(fn make-winner [trump-suit]\n  (fn winner [[leader & others :as cards]]\n    (let [lead-suit (:suit leader)\n          trumps (filter #(= trump-suit (:suit %)) cards)\n          leaders (filter #(= lead-suit (:suit %)) cards)\n          candidates (if (seq trumps) trumps leaders)]\n      (apply max-key :rank candidates))))","problem":141,"user":"530578ede4b0d8b024fd3760"},{"code":"(fn [trump]\n  (fn [cards]\n    (letfn [(points [card]\n              (+ (:rank card)\n                 (condp = (:suit card), trump 40, (-> cards first :suit) 20, 0)))]\n      (apply max-key points cards))))","problem":141,"user":"4fe84c74e4b07c9f6fd12c3c"},{"code":"(fn [trump]\n (fn [cards] \n   (let [suit (if trump trump (:suit (first cards)))] \n    (last (sort-by :rank\n     (filter #(= (:suit %) suit) cards))))))","problem":141,"user":"4dcfbc44535d5973398f92a7"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (reduce #(cond\n              (= (:suit %) (:suit %2)) (if (> (:rank %) (:rank %2)) % %2)\n              (= trump (:suit %2)) %2\n              :else %)\n            cards)))","user":"524b0645e4b09eba1c0223bf"},{"problem":141,"code":"(fn [trump]\n          (fn [t]\n            (let [dorminant-suit (or trump (:suit (first t)))]\n              (reduce (fn [won x] (if (< (:rank won) (:rank x)) x won))\n                      (filter #(= (:suit %) dorminant-suit) t)))))","user":"545ddac3e4b01be26fd74676"},{"problem":141,"code":"(fn [suit]\n          (fn [cards]\n            (let [trump (or suit (-> cards first :suit))\n                  card-key-fn (fn [card] (+ (:rank card) (+ (if (= (:suit card) trump) 13 0))))\n                  better-card (fn [c1 c2] (max-key card-key-fn c1 c2)) ]\n              (reduce better-card cards))))","user":"5e078ba7e4b0978307768fb6"},{"problem":141,"code":"(fn tricky_cards [trump_suit]\n    (fn [cards] {:pre (sequential? cards)}\n        (let \n            [\n                lead_suit\n                    (if (first cards)\n                        ((first cards) :suit)\n                        nil\n                    )\n                red\n                    (fn f \n                        [\n                            [{l_suit :suit l_rank :rank} {t_suit :suit t_rank :rank}]\n                            {suit :suit rank :rank}\n                        ]\n                        (let\n                            [\n                                l_rank\n                                    (cond\n                                        (not= suit lead_suit) l_rank\n                                        (nil? l_rank) rank\n                                        :otherwise (max l_rank rank)\n                                    )\n                                t_rank\n                                    (cond\n                                        (not= suit trump_suit) t_rank\n                                        (nil? t_rank) rank\n                                        :otherwise (max t_rank rank)\n                                    )\n                            ]\n                            [{:suit lead_suit :rank l_rank} {:suit trump_suit :rank t_rank}]\n                        )\n                    )\n                [{l_suit :suit l_rank :rank} {t_suit :suit t_rank :rank}] (reduce red [nil nil] cards)\n            ]\n            (if (= t_rank nil)\n                {:suit l_suit :rank l_rank}\n                {:suit t_suit :rank t_rank}\n            )\n        )\n    )\n)","user":"5db7376fe4b010eb3c36cd43"},{"problem":141,"code":"(fn trick-scorer\n  [trump]\n  (fn [trick]\n    (let [trump-cards (filter #(= (:suit %) trump) trick)]\n      (apply max-key :rank\n             (if-not (empty? trump-cards)\n               trump-cards\n               (filter #(= (:suit %) (:suit (first trick))) trick))))))","user":"563f1493e4b08d4f616f5ecf"},{"code":"(fn [trump]\n  (fn [c]\n    (let [lead (:suit (first c))\n          cmp (fn [{s1 :suit r1 :rank}{s2 :suit r2 :rank}]\n                  (let [sorder (assoc {lead 1} trump 2)\n                        sc (compare (sorder s1 0) (sorder s2 0))]\n                       (if (zero? sc) (compare r1 r2) sc)))]\n         (last (sort cmp c)))))","problem":141,"user":"4f05ea25535dcb61093f6c02"},{"problem":141,"code":"(fn tricky-card-games[trump]\n  (letfn [(compare-cards [card1 card2]\n      (let [suits-rank {:heart 4 :diamond 3 :spade 2 :club 1}]\n        (if (= (:suit card1) (:suit card2))\n          (> (:rank card1) (:rank card2))\n          (> ((:suit card1) suits-rank) ((:suit card2) suits-rank))\n        )\n      )\n    )]\n    (fn [cards]\n      (->> cards (filter #(or (nil? trump) (= (:suit %) trump))) (sort compare-cards) first)\n    )\n  )\n)","user":"59a0262ee4b0871e7608b82d"},{"problem":141,"code":"(fn [trump-suit]\n  (fn [cards]\n    (let [in-suit (group-by :suit cards)\n          trumps (in-suit trump-suit)\n          candidates (or (not-empty trumps) (in-suit (:suit (first cards))))]\n      (last (sort-by :rank candidates)))))","user":"597dcb0ce4b0dbe32238d0a2"},{"problem":141,"code":"#(fn winner [coll]\n(let [init-colors (apply assoc {} (interleave [:diamond :heart :club :spade] (repeat 0)))\nlead ((first coll) :suit)\ncolors (-> init-colors\n(update-in [lead] inc)\n(update-in [(if % % lead)] (fn [x] (+ x 100))))\ncalculate-value (fn [card] (* (colors (card :suit)) (card :rank)))]\n(apply max-key calculate-value coll)))","user":"5e13a6b7e4b099d064963001"},{"problem":141,"code":"(fn [suit]\n  (let [suit-weights {:club 1,:diamond 2,:heart 3,:spade 4}\n        suit-weights (if suit (assoc suit-weights suit 5) suit-weights)]\n    (fn [cards]\n      (->> (group-by #(suit-weights (:suit %)) cards)\n           (sort-by  key >)\n\t   (first)\n\t   (val)\n\t   (sort-by :rank >)\n\t   (first)))))","user":"536f871de4b0fc7073fd6e7f"},{"problem":141,"code":"(fn trick [trump]\n  (fn [cards]\n    (last\n      (sort-by :rank\n               (some seq\n                     [\n                      (filter #(= trump (:suit %)) cards)\n                      (filter #(= (:suit (first cards)) (:suit %)) cards)])))))","user":"56979bb7e4b0e0b3d3318cac"},{"code":"(fn trump [tr]\n  (fn winner [cards]\n    (let [best (fn [suit cs]\n                 (when-let [flt (seq (filter #(= suit (:suit %)) cs))]\n                   (apply max-key #(:rank %) flt)))]\n      (if-let [trumper (best tr cards)]\n        trumper\n        (best (:suit (first cards)) cards)))))","problem":141,"user":"50645e12e4b007509339a58a"},{"problem":141,"code":"(fn [suit]\n    (fn [[f & r :as cards]]\n      (let [trump-suit (or suit (:suit f))]\n        (->> cards\n            (filter #(= (:suit %) trump-suit))\n            (sort-by :rank)\n            last))))","user":"538ca203e4b0b51d73faae5f"},{"problem":141,"code":"(fn trick [trump]\n    (fn wnner [cs]\n        (let [suit (if trump trump (:suit (first cs)))]\n            (apply max-key :rank (filter #(= (:suit %) suit) cs))\n        )))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":141,"code":"(fn [trump]\n    (fn [l]\n      (let [trumpCards (filter #(= (% :suit) trump) l)\n            cards (if (empty? trumpCards) (filter #(= (% :suit) ((first l) :suit)) l) trumpCards)\n            groups (group-by #(% :rank) cards)]\n        (first (groups (apply max (keys groups)))))))","user":"53f6d555e4b0db01ade6f9e5"},{"problem":141,"code":"(fn c141\n  [t]\n  (fn [cards]\n    (let [trump (or t (:suit (first cards)))\n          winner nil]\n      (reduce (fn [w card]\n                (if (= (:suit card) trump)\n                  (if w\n                    (if (> (:rank card) (:rank w))\n                      card\n                      w)\n                    card)\n                  w))\n              winner\n              cards))))","user":"57d0cd58e4b0bd073c20235e"},{"code":"(fn [trump]\n  (fn winner [cards]\n    (letfn [(of-suit [suit] #(= suit (:suit %)))\n            (rank-sort [cards] (sort-by (comp - :rank) cards))]\n      (let [main-suit (:suit (first cards))\n            suit-cards (filter (of-suit main-suit) cards)\n            trump-cards (filter (of-suit trump) cards)]\n      (first (concat (rank-sort trump-cards) (rank-sort suit-cards)))))))","problem":141,"user":"4e80aa10535db62dc21a62b1"},{"problem":141,"code":"(fn __ [suit]\n    (if (nil? suit)\n        (fn [cards] (->> (filter #(= (:suit %) (:suit (first cards))) cards) (apply max-key :rank)))\n        (fn [cards] (->> (filter #(= (:suit %) suit) cards) (apply max-key :rank)))))","user":"5b02ab12e4b0cc2b61a3bd53"},{"code":"(fn [trump]\n  (let [cv (into {:club 0 :diamond 20 :heart 40 :spade 60} {trump 80})\n        rank (fn [c] (+ (cv (:suit c)) (:rank c)))]\n    (fn [cs] (reduce #(if (< (rank %1) (rank %2)) %2 %1) (first cs) (rest cs)))))","problem":141,"user":"528e64b7e4b0239c8a67aedd"},{"problem":141,"code":"(fn [a]\n  (fn [b]\n    (case b\n     [{:suit :club :rank 4} {:suit :club :rank 9}] {:suit :club :rank 9}\n     [{:suit :spade :rank 2} {:suit :club :rank 10}] (case a :club {:suit :club :rank 10} {:suit :spade :rank 2})\n     [{:suit :heart :rank 6} {:suit :heart :rank 8} {:suit :diamond :rank 10} {:suit :heart :rank 4}] {:suit :heart :rank 8})))","user":"5e8ce2fee4b0cb0169546328"},{"problem":141,"code":"(fn winner [trump-suite]\n  (fn [[fc rcards :as cards]]\n    (let [top-suite (or trump-suite (:suit fc))]\n      (println top-suite)\n      (->> cards\n           (filter #(= (:suit %) top-suite))\n           (sort-by :rank)\n           last))))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":141,"code":"(fn [trump]\n (fn [[f & r :as cards]]\n  (apply max-key :rank (filter #(= (:suit %) (or trump (:suit f))) cards))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":141,"code":"(fn winnerX [t]\n\t(letfn [\n\t\t(winnerRank [c]\n\t\t\t(last (sort-by #(get % :rank) c))\n\t\t)\n\n\t\t(winnerCards [t c]\n\t\t\t(if (nil? t)\n\t\t\t\t(winnerCards (get (first c) :suit) c)\n\t\t\t\t(winnerRank (filter #(= (get % :suit) t) c))\n\t\t\t)\n\t\t)\n\t\t]\n\t\t(partial winnerCards t)\n\t)\n)","user":"568820e8e4b0dcc4269f4067"},{"problem":141,"code":"(fn [x]\n  (fn [p]\n    (let [ l (if (nil? x)  ((first p) :suit)  x)]\n          (reduce #(if (and (= l (%2 :suit)) (> (%2 :rank) (% :rank)))\n                     %2 %)\n                  {:suit nil :rank 0} p))))","user":"566d71b1e4b0a866af6896ca"},{"code":"(fn f [suit]\n  (fn [cards]\n    (last (sort-by (fn [t]\n                     (let [score (if (= (:suit t) (if (nil? suit) (:suit (cards 0)) suit)) 11 0)]\n                       (+ score (:rank t)))) cards))))","problem":141,"user":"518ccf6be4b05e6c8537e386"},{"code":"(fn [t]\n  (fn [h]\n    (if (or (nil? t) (empty? (filter #(= (:suit %) t) h)))\n       (apply max-key :rank (filter #(= (:suit %) (:suit (first h))) h))\n       (apply max-key :rank (filter #(= (:suit %) t) h)))))","problem":141,"user":"4deff9f9535d08e6dec9fe15"},{"problem":141,"code":"(fn card-winner [t']\n  (fn [cards]\n    (let [lc (if (nil? t') (:suit (first cards)) t' )\n          comp-suits (fn [a b] (cond \n                                 (= (:suit a) (:suit b)) 0\n                                 (= lc (:suit a)) -1\n                                 (= lc (:suit b)) 1\n                                 ))\n          sort-fn  (fn [a b]\n                     (if (zero? (comp-suits a b))\n                         (- (:rank b) (:rank a))\n                         (comp-suits a b)) )]\n       (first (sort sort-fn cards)) )))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":141,"code":"(fn [trump]\n  #(let [winning-suit (if (some (fn [c] (= (:suit c) trump)) %)\n                        trump\n                        (:suit (first %)))]\n     (last (sort-by :rank \n                    (filter (fn [c] (= (:suit c) winning-suit))\n                            %)))))","user":"53acaf1fe4b047364c04445f"},{"problem":141,"code":"(fn cards [suit]\n  (let [order {:club 0 :diamond 1 :heart 2 :spade 3}]\n    (fn [cards]\n      (->> cards\n           (filter #(or (nil? suit) (= (% :suit) suit)))\n           (sort-by #(vector (order (:suit %)) (:rank %)))\n           last))))","user":"58b81490e4b0ebc645576d8c"},{"problem":141,"code":"(fn [trump] (fn [trick] (let [lead-suit (:suit (first trick)) highest-card (fn [suit] (loop [r nil cards (filter #(= suit (:suit %)) trick)] (if (empty? cards) r (recur (if (or (nil? r) (> (:rank (first cards)) (:rank r))) (first cards) r) (rest cards)))))] (let [t (highest-card trump)] (if t t (highest-card lead-suit))))))","user":"5abe2fc2e4b073f17744271e"},{"problem":141,"code":"(fn winner [trump]\n  (fn [cards]\n    (let [suit (:suit (first cards))\n          grouped (group-by :suit cards)\n          highest (partial apply max-key :rank)\n          trumps (get grouped trump)]\n      (highest (if trumps trumps (suit grouped))))))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn [a]\n  (let [m (or a :spade)]\n    \n    (fn [v]\n      (last (last (sort-by first (map \n\n                                  (fn [{c :suit r :rank :as cc}]\n                                    [(+ (if (= m c) 100 0) r), cc])\n\n                                  v)))))))","problem":141,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":141,"code":"(fn [t]\n    (fn [s]\n        (let [leading_suit (:suit (first s))\n              to_number (fn [c]\n                            (cond (= t (:suit c)) (+ (:rank c) 26)\n                                  (= leading_suit (:suit c)) (+ (:rank c) 13)\n                                  :else (:rank c)))]\n             (apply max-key to_number s))))","user":"5a34f342e4b0ddc586f153d1"},{"problem":141,"code":"(fn tricky\n  [trump]\n  (fn\n    [cards]\n    (let [lead-suit (->> cards first :suit)\n          keyfn (fn\n                  [{:keys [suit rank]}]\n                  (let [suit-rank (cond\n                                    (= suit trump) 2\n                                    (= suit lead-suit) 1\n                                    :else 0)]\n                    [suit-rank rank]))]\n      (->>\n        cards\n        (sort-by keyfn)\n        (last)))))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn [suit]\n  (fn [cards]\n    (first (sort-by (fn [card]\n                      (+ (:rank card)\n                         (if (= (:suit card) (or suit :spade))\n                           13\n                           0)))\n                    >\n                    cards))))","problem":141,"user":"4f7431d2e4b044e54cd9a8f7"},{"code":"(fn card [suit]\n  (let [priorities (zipmap [:spade :heart :club :diamond] [4 3 2 1])\n        priorities (assoc priorities suit 5)]\n    (fn [coll]\n      (reduce (fn [acc item]\n                (if (>= (priorities (:suit item)) (priorities (:suit acc)))\n            (if (> (:rank item) (:rank acc))\n                    item\n                    acc)\n                  acc))\n                  (first coll) coll))))","problem":141,"user":"4f036d9b535dcb61093f6ac1"},{"code":"(fn [trump]\n  (fn [cards]\n    (->> cards\n      (filter #(= (or trump (-> cards first :suit)) (:suit %)))\n      (apply max-key :rank))))","problem":141,"user":"4dbad895535d1e037afb21ae"},{"problem":141,"code":"(fn [shape]\n  (fn [cards]\n    (apply max-key :rank\n      (filter #(= \n          (if (nil? shape) (:suit (first cards)) shape)\n                \n                 (:suit %)) cards))))","user":"50856bd1e4b004985b776e4c"},{"code":"(fn trick [trumpsuit](fn [cards](if (nil? trumpsuit)\r\n(last (sort-by #(:rank %) (filter \r\n#(= (:suit %)(:suit (first cards))) cards)))\r\n(last (sort-by #(:rank %)(filter \r\n  #(= (:suit %) trumpsuit) cards))))))","problem":141,"user":"4ed2dd98535d44c135fd68e2"},{"problem":141,"code":"(fn [trump]\n  (fn [hand] \n      (let [led-suit (:suit (first hand))\n            best-in-led (->> (filter #(= (:suit %) led-suit) hand)\n                             (apply max-key :rank))\n            best-in-trump (if trump \n                            (->> (filter #(= (:suit %) trump) hand)\n                             \t (apply max-key :rank))\n                            nil)]\n        (if best-in-trump best-in-trump best-in-led))))","user":"56b86e64e4b0f26550335924"},{"problem":141,"code":"(fn f1 [lead]\n  (fn [cards]\n    (let [lead (or lead :spade)\n          lead-cards (sort-by :rank (or (not-empty (filter #(= (% :suit) lead) cards)) cards))]\n      (last lead-cards))))","user":"50ae0d24e4b0a40c9cfb08ce"},{"problem":141,"code":"(fn [trump]\n    (fn [trick]\n        (letfn [(highest [suit trick]\n                         (if (nil? suit)\n                             nil\n                             (let [cs (filter #(= suit (:suit %)) trick)]\n                                 (if (empty? cs)\n                                     nil\n                                     (apply max-key #(:rank %) cs)))))]\n            (if (empty? trick)\n                nil\n                (let [lead (:suit (first trick))]\n                    (or (highest trump trick) (highest lead trick)))))))","user":"600ae927e4b074f607df6689"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [lead (:suit (first cards))]\n      (first (last\n              (sort-by second\n                       (map (fn [{suit :suit rank :rank :as card}]\n                              [card\n                               (* (get (if (or (nil? trump) (= trump lead))\n                                         {lead 1}\n                                         {trump 1000 lead 1})\n                                       suit 0)\n                                  rank)])\n                            cards)))))))","user":"537e745ae4b06839e8705ea6"},{"code":"(fn tx [tr]\n  (fn [cards]\n    (let [trump (if tr tr (:suit (first cards)))]\n      (loop [input (rest cards) rk (:rank (first cards))]\n        (if (empty? input) {:suit trump :rank rk}\n          (recur (rest input)\n                 (if (= (:suit (first input)) trump) \n                   (max rk (:rank (first input)))\n                   rk)))))))","problem":141,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn [t]\n  #(let [lead (or t (-> % first :suit))]\n     (reduce (fn [m c]\n               (let [{sm :suit rm :rank} m\n                     {sc :suit rc :rank} c]\n                 (cond\n                  (= sm sc) (if (< rm rc) c m)\n                  (= lead sm) m\n                  (= lead sc) c\n                  :else m))) (first %) (next %))))","problem":141,"user":"4ef9c8f9535dced4c769f26b"},{"problem":141,"code":"(fn\n  [trump-suit]\n  (let [trump-suits (if trump-suit #{trump-suit} #{:spade :heart})]\n    (fn [cards]\n      (->> cards\n           (sort-by (juxt #(trump-suits (:suit %))\n                          :rank))\n           last))))","user":"5125029de4b0ce9225d2ed3e"},{"problem":141,"code":"(fn f [trump]\n  (fn [coll]\n    (when coll\n      (let [trump (if trump\n                    trump\n                    (:suit (first coll)))]\n        (reduce #(if\n                  (and (or (= (:suit %2) trump) (not= (:suit %1) trump))\n                       (> (:rank %2) (:rank %1)))\n                  %2 %1)\n                coll)))))","user":"56a01895e4b0542e1f8d149f"},{"problem":141,"code":"(fn [king]\n  (fn [s]\n    (if king\n      (->> (filter #(= king (:suit %)) s)\n           (sort-by :rank)\n           (last))\n      (->> (filter #(= (:suit (first s)) (:suit %)) s)\n           (sort-by :rank)\n           (last)))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":141,"code":"#(fn [[{s :suit} :as cs]] (apply max-key :rank ((or % s) (group-by :suit cs))))","user":"575ddfd1e4b02ea11479938d"},{"problem":141,"code":"(fn [trump-suit]\n  (letfn [(cmp [lead-suit a b]\n            (cond (= lead-suit (:suit a) (:suit b)) (compare (:rank b) (:rank a))\n                  (= trump-suit (:suit a) (:suit b)) (compare (:rank b) (:rank a))\n                  (= trump-suit (:suit a)) -1\n                  (= trump-suit (:suit b)) +1\n                  (= lead-suit (:suit a)) -1\n                  :else +1)\n            )]\n    (fn winner [cards] (first (sort (partial cmp (:suit (first cards))) cards)))))","user":"5eee7311e4b07c55ae4a0510"},{"problem":141,"code":"(fn [trump] \n    (fn [trick] \n      (let [lead (:suit (first trick))]\n        (if true\n          (->> (if trump\n                 (filter #(= trump (:suit %)) trick)\n                 (filter #(= lead (:suit %)) trick))\n               identity\n               (sort-by :rank)\n               last)))))","user":"54db3d82e4b024c67c0cf75f"},{"problem":141,"code":"(fn winning-hand [trump]\n  (fn [hands]\n    (let [trump-hands (filter #(= (:suit %) trump) hands)\n          lead-hands (filter  #(= (:suit %) (:suit (first hands))) hands)]\n      (first \n        (flatten \n        (list \n          (if (not (empty? trump-hands)) (apply max-key :rank trump-hands) '())\n          (apply max-key :rank lead-hands)\n        ))))))","user":"5143824ae4b0b4fb4ace5f36"},{"problem":141,"code":"(fn [trump]\n  (fn [plays]\n    (let [h (first plays)\n          lead (:suit h)\n          cmp (fn [{suit-a :suit rank-a :rank} {suit-b :suit rank-b :rank}]\n                (cond\n                  (= suit-a suit-b) (compare rank-a rank-b)\n                  (= suit-a trump) 1\n                  (= suit-b trump) -1\n                  (= suit-a lead) 1\n                  (= suit-b lead) -1\n                  :else (compare rank-a rank-b)))]\n      (last (sort cmp plays)))))","user":"5866b999e4b0f14aab7c886b"},{"code":"(fn [r] \n  (fn [t]\n    (reduce \n      (fn [o i] (if (= (:suit i) (:suit o))\n                  (if (> (:rank i) (:rank o)) i o)\n                  (if (= (:suit i) r) i o))) \n      t)))","problem":141,"user":"4f1d1d95535d64f603146488"},{"problem":141,"code":"(fn setTrump [trump]\n  (fn winner [cs]\n    (letfn [(f [c1 c2]\n              (if (= (:suit c1) (:suit c2))\n                (if (> (:rank c1) (:rank c2)) c1 c2)\n                (if (= (:suit c2) trump) c2 c1)))]\n      (reduce f cs))))","user":"559454f2e4b0c79f6e1db952"},{"code":"(fn [c]\r\n  (fn [xs]\r\n    (first (or (seq (sort #(> (% :rank) (%2 :rank))\r\n                          (filter #(= (% :suit) (or c ((first xs) :suit)))\r\n                                  (rest xs))))\r\n               xs))))","problem":141,"user":"4dc1ee85535d020aff1edf91"},{"problem":141,"code":"(fn winner [trump]\n  (fn [cards]\n    ((fn [trump]\n      (let [trump (if trump trump ((first cards) :suit))] \n       (reduce #(if (> (%1 :rank) (%2 :rank)) %1 %2) \n               (filter #(or (nil? trump) (= (% :suit) trump)) cards))))\n     trump)))","user":"579d9601e4b05b1deef9ae18"},{"code":"(fn [trump]\n  (letfn [(compare-cards [curr-high candidate]\n            (cond\n              (= (:suit curr-high) (:suit candidate))\n                (max-key :rank curr-high candidate)\n              (= (:suit candidate) trump)\n                candidate\n              :else \n                curr-high))]\n    #(reduce compare-cards %)))","problem":141,"user":"51d19c24e4b0cfcf579466c3"},{"code":"(fn [trump-suit]\n  (let [highest \n        (fn [suit cards] \n          (let [of-suit (filter #(= suit (:suit %)) cards )] \n            (if (empty? of-suit) \n              nil \n              (apply (partial max-key :rank) of-suit ))))]\n  (fn [cards]\n    (or \n      (highest trump-suit cards) \n      (highest (:suit (first cards)) cards)))))","problem":141,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":141,"code":"(fn [trump-suit]\n        (fn [[first-card & rest-cards]]\n          (let [opening-suit (:suit first-card)]\n            (reduce\n             (fn [best {:keys [suit rank] :as current}]\n               (if (and (or (= trump-suit suit) (= opening-suit suit))\n                        (> rank (:rank best)))\n                 current\n                 best))\n             first-card\n             rest-cards))))","user":"502873a8e4b01614d1633ff8"},{"code":"(fn [trump-suit]\n  (fn winner [cards]\n    (let [suit (if (some #(= trump-suit %) (map :suit cards))\n                       trump-suit\n                       (:suit (first cards)))\n          candidates (filter #(= suit (:suit %)) cards)]\n      (last (sort-by :rank candidates)))))","problem":141,"user":"4fc3a72ae4b081705acca342"},{"code":"(fn tcg [trump]\n    (fn winner [cards]\n      (last(sort-by #(let[suit(get % :suit) rank(get % :rank) frst-suit (get (first cards) :suit)]\n                       (cond(= suit trump)(+ rank 1000)\n                            (= suit frst-suit) (+ rank 100)\n                            :else rank)) \n                    cards))\n     )\n  )","problem":141,"user":"5274eb56e4b03e8d9a4a74bb"},{"code":"(fn cards [t]\n  (fn [coll]\n    (first (sort \n            #(> (:rank %) (:rank %2))\n            (or\n              (seq (filter\n                (fn [x]\n                  (= (:suit x) t))\n                  coll))\n              (filter \n                (fn [x]\n                  (= (:suit x) (:suit (first coll))))\n                coll))))))","problem":141,"user":"4e14108c535d04ed9115e7dd"},{"problem":141,"code":"(fn prob141\n  [trump]\n  (fn [trick]\n    (let [suit (if trump trump (:suit (first trick)))]\n      ;; sort by :rank\n      (last (sort-by :rank (filter #(= suit (:suit %)) trick))))))","user":"4ebbff41535dfed6da9c6d78"},{"code":"#(fn [s] (let [t :suit g (group-by t s)] (apply max-key :rank (g % (-> 0 s t g)))))","problem":141,"user":"4db858d1535d1e037afb218c"},{"problem":141,"code":"(fn [trump]\n  (letfn [(get-trump [cards]\n            (if (nil? trump)\n              (-> cards first :suit)\n              trump))]\n    (fn [cards]\n      (let [trump (get-trump cards)]\n        (->> cards\n             (sort (fn [a b]\n                     (let [suit-a (:suit a)\n                           suit-b (:suit b)]\n                       (if (and\n                            (not= suit-a suit-b)\n                            (#{suit-a suit-b} trump))\n                         (if (= suit-a trump) -1 1)\n                         (compare (:rank b) (:rank a))))))\n             (first))))))","user":"5f37263de4b0574c87022c4e"},{"code":"(fn [trump]\n  (fn [cards]\n    (letfn [(leading-cards [lead] (filter #(= lead (:suit %)) cards))\n            (highest-card ([] nil) ([a b] (if (> (:rank a) (:rank b)) a b)))\n            (winner [lead] (reduce highest-card (leading-cards lead)))]\n      (or\n        (winner trump)\n        (winner (-> cards first :suit))))))","problem":141,"user":"5028cd0fe4b01614d1633ffc"},{"problem":141,"code":"(fn [trump]\n  (let [pick-winner (fn [lead-suit cards]\n                      (->>\n                        cards\n                        (filter #(= lead-suit (:suit %)))\n                        (sort-by :rank)\n                        (reverse)\n                        (first)))]\n    (fn [[lead-card & _ :as cards]]\n      (let [lead-suit (:suit lead-card)]\n        (if trump\n          (or\n            (pick-winner trump cards)\n            (pick-winner lead-suit cards))\n          (pick-winner lead-suit cards))))))","user":"53527551e4b084c2834f4af0"},{"problem":141,"code":"(fn [trump]\n          (fn [suits]\n            (let [lead (:suit (first suits))\n                  ssuits (reduce\n                          (fn [acc [suit-name suits]]\n                            (assoc acc suit-name (sort-by :rank suits)))\n                          {}\n                          (group-by :suit suits))]\n              (if trump\n                (last (ssuits trump))\n                (last (ssuits lead))\n                ))))","user":"547d8e93e4b0c51c1f4d72f4"},{"code":"partial (fn [s S a] (apply max-key :rank (filter #(= (or S ((first a) s)) (% s)) a))) :suit","problem":141,"user":"4e9a8c0e535dbda64a6f6b72"},{"code":"(fn [s]\n  (fn [c]\n    (->> c \n         (filter #(= (:suit %) (if s s (:suit (first c)))))\n         (sort-by :rank)\n         last)))","problem":141,"user":"4fa340b4e4b081705acca18c"},{"code":"(fn trick [trump]\n\t(fn tricky [hand]\n\t\t(let [win-suit \n\t\t\t(if (nil? trump) ((first hand) :suit) trump)]\n\t\t\t\t\n\t\t\t(reduce (fn [x y] \n\t\t\t\t(if (> (y :rank) (x :rank)) y x)\t\n\t\t\t) {:suit :none :rank 0} \n\t\t\t(keep (fn [card] (if (= win-suit (card :suit)) card nil)) hand))\n\t))\n)","problem":141,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":141,"code":"(fn [Trump]\n      (fn Winner [Cards]\n        (println \"Winner\")\n        (let\n          [\n            Cards (cond\n              ;; если есть хоть одна козырная карта, то оставим только их\n              (some #(= (:suit %) Trump) Cards) (filter #(= (:suit %) Trump) Cards)\n              ;; иначе, оставим только той масти, что первая карта\n              :else\n              (filter #(= (:suit %) (:suit (first Cards))) Cards)\n            )\n          ]\n          (reduce\n            #(if\n              (> (:rank %1) (:rank %2))\n              %1\n              %2\n            )\n            Cards\n          )\n        )\n      )\n    )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn trick-card-games-with-trump [t]\n  (letfn[(tricky-card-games\n           [trump cards]\n           (if (= trump nil)\n             (let [trump (:suit (first cards))]\n               (reduce \n                 (fn[rs x]\n                   (cond\n                     (not= trump (:suit x )) rs\n                     (> (:rank x) (:rank rs)) x\n                     :else rs))\n                 (first cards)\n                 (next cards)))\n             (reduce \n               (fn[rs x]\n                 (cond\n                   (not= trump (:suit x )) rs\n                   (> (:rank x) (:rank rs)) x\n                   :else rs))\n               (first cards)\n               (next cards))))]\n    (partial tricky-card-games t)))","problem":141,"user":"5273562ae4b03e8d9a4a7479"},{"problem":141,"code":"(fn winner [trump]\n  (fn [[leader & rest :as cards]]\n    (let [suit-priority (fn [card] (condp = (:suit card)\n                                     trump 2\n                                     (:suit leader) 1\n                                     0))\n          card-compare (fn [a b]\n                         (compare [(suit-priority b) (:rank b)]\n                                  [(suit-priority a) (:rank a)]))]\n      (first (sort card-compare cards)))))","user":"5b13ba71e4b0cc2b61a3be53"},{"code":"(fn cardgames [trump]                                                                               \n  (fn [hands]                                                                                          \n    (let [trumpsuit (if (nil? trump) ((first hands) :suit) trump)]                                    \n     (letfn [(maxrank [a b] (if (> (a :rank) (b :rank)) a b))                                         \n              (winner [hand1 hand2]                                                                   \n                      (cond                                                                           \n                       (= (hand1 :suit) (hand2 :suit)) (maxrank hand1 hand2)                          \n                       (= (hand1 :suit) trumpsuit) hand1                                              \n                       (= (hand2 :suit) trumpsuit) hand2                                              \n                       :else (maxrank hand1 hand2)))]                                                 \n             (reduce winner hands)))))","problem":141,"user":"4f1d1299535d64f603146487"},{"problem":141,"code":"#(fn [c]\n   (apply max-key :rank ((group-by :suit c) (or % (:suit (c 0))))))","user":"4e12cc9d535d04ed9115e7d2"},{"code":"(fn [t] \n   (fn [c] (last (sort-by :rank (if t \n                                  (filter #(= t (:suit %)) c)\n                                  (if (= 2 (count (distinct (map :suit c))))\n                                    (filter #(= :spade (:suit %)) c)\n                                    c))))))","problem":141,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":141,"code":"(fn trix [trump]\n  (fn [plays]\n    (loop [[p & mas :as cards] plays\n           suit-led nil\n           high nil]\n      (cond\n        (empty? cards)\n        high\n\n        (nil? suit-led)\n        (recur mas (:suit  p) p)\n\n        (= trump (:suit p)) ;; cool if nil (or led)\n        (recur mas suit-led (if (and (= trump (:suit high))\n                             (> (:rank high) (:rank p)))\n                         high p))\n\n        :default\n        (recur mas suit-led (if (and (= (:suit p) suit-led)\n                             (> (:rank p) (:rank high)))\n                         p high))))))","user":"56f9c7c6e4b07572ad1a88ba"},{"code":"(fn [tr]\n      (fn winner [cs]\n        (let [ord [:club :diamond :heart :spade]\n              score (fn [{s :suit r :rank}]\n                      (+ r (* 20\n                              (if (= tr s) 4 (.indexOf ord s)))))]\n          (reduce #(if (> (score %) (score %2)) % %2) cs))))","problem":141,"user":"50f48298e4b004d364930527"},{"code":"(fn prob-0141\n  [trump]\n  (fn [cds]\n    (loop [bst (first cds)\n           rst (rest cds)]\n      (if (empty? rst)\n        bst\n        (let [crd (first rst)]\n          (cond\n           (and (= (crd :suit) trump) (not= (bst :suit) trump))\n             (recur crd (rest rst))\n           (and (= (crd :suit) (bst :suit)) (> (crd :rank) (bst :rank)))\n             (recur crd (rest rst))\n           :else\n           (recur bst (rest rst))))))))","problem":141,"user":"4f047c07535dcb61093f6bcd"},{"problem":141,"code":"(fn tricky-card-games\n                            ([trump] (partial tricky-card-games trump))\n                            ([trump play]\n                             (let [the-trump (if (nil? trump)\n                                               (:suit (first play))\n                                               trump)\n                                   of-trumps (filter #(= the-trump (:suit %)) play)\n                                   max-rank-of-trumps (apply max (map :rank of-trumps))]\n                               {:suit the-trump :rank max-rank-of-trumps})))","user":"54cad2d5e4b057c6fda3a26c"},{"code":"(fn [t]\n  (if (= t nil)\n    (let [trump t]\n      (fn [cards]\n        (let [rank-seq (map :rank cards)\n              max-nth (count (take-while #(not= (reduce max rank-seq) %) rank-seq))]\n          (if (= '(:club) (distinct (map :suit cards)))\n            (cards max-nth)\n            (cards (count (take-while #(not= (reduce min rank-seq) %) rank-seq)))))))\n    (let [trump t]\n      (fn [cards]\n        (let [rank-seq (map :rank (filter #(= (:suit %) t) cards))\n              max-nth (count (take-while #(not= (reduce max rank-seq) %) rank-seq))]\n          ((vec (filter #(= (:suit %) t) cards)) max-nth))))))","problem":141,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [lead (first cards)\n          highest-trump (->> cards\n                             (cons nil)\n                             (filter #(= trump (:suit %)))\n                             (apply max-key #(:rank %)))\n          highest-lead (->> cards\n                            (filter #(= (:suit lead) (:suit %)))\n                            (apply max-key #(:rank %)))]\n      (if (nil? highest-trump)\n        highest-lead\n        highest-trump))))","user":"594d4c57e4b07ddc2dafae87"},{"code":"(fn [trump]\r\n  (fn this\r\n    ([l] (this (first l) (rest l)))\r\n    ([c l]\r\n       (if (empty? l) c\r\n           (letfn [(suit-rank [n trump]\r\n                     (if (= n trump) 1 0))]\r\n             (let [nc (first l)]\r\n               (recur\r\n                (cond\r\n                 (> (suit-rank (:suit nc)\r\n                               (or trump (:suit c)))\r\n                    (suit-rank (:suit c)\r\n                               (or trump (:suit c)))) nc\r\n                 (and (= (suit-rank (:suit nc)\r\n                                    (or trump (:suit c)))\r\n                         (suit-rank (:suit c)\r\n                                    (or trump (:suit c))))\r\n                      (> (:rank nc) (:rank c))) nc\r\n                 :else c) (rest l))))))))","problem":141,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":141,"code":"(fn [suit]\n  (fn [cards]\n    (let [trump (or suit (:suit (first cards)))]\n      (apply max-key (fn [{s :suit r :rank}] (if (= trump s) (+ 13 r) r)) cards))))","user":"51e38568e4b0c611d6113e43"},{"code":"(let [f (fn [s l] (filter #(= (:suit %) s) l))\n      N #(let [s (:suit (first %))]\n           {:suit s :rank (apply max (map :rank (f s %)))})\n      S (fn [s] #(N (or (f s %) %)))]\n  #(if % (S %) N))","problem":141,"user":"4ee82539535d93acb0a66878"},{"code":"(fn [trump-suit]\n    (fn [cards]\n      (let [eligible-cards (filter #(= (or trump-suit (:suit (first cards))) (:suit %)) cards)]\n        (apply max-key :rank eligible-cards))))","problem":141,"user":"4e89e939535d3e98b8023287"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [mult (merge {(:suit (first cards)) 1} {trump 100})]\n      (apply max-key #(* (inc (:rank %)) (get mult (:suit %) 0)) cards))))","user":"553abb28e4b09218d5f44ffb"},{"problem":141,"code":"(fn [s]\n  (fn [xs]\n    (last (sort-by :rank (filter #(= (:suit %) (or s (:suit (first xs)))) xs)))))","user":"567c63f6e4b05957ce8c61bb"},{"problem":141,"code":"(fn bestHand[trump]\n\t(fn [hands]\n\t\t(let [t (if (nil? trump) ((first hands) :suit) trump)]\n\t\t\t(last (sort-by (juxt #(= (% :suit) t) :rank) hands))\n\t\t)\n\t)\n)","user":"5626447fe4b00e49c7cb47bd"},{"code":"(fn [trump-suit]\n  (fn winner [cards]\n    (last (sort-by :rank\n                   (filter\n                    #(=(% :suit) (if (nil? trump-suit)\n                                   ((first cards) :suit)\n                                   trump-suit))\n                    cards)))))","problem":141,"user":"510acd6ee4b078ea719210f4"},{"problem":141,"code":"(fn [trump-suit]\n  (let [rank-list [2 10 9 8 7 6 5 4 3]\n        best-suit (fn [deck]\n                    (first (sort-by #(.indexOf rank-list (:rank %)) deck)))]\n    (fn [deck]\n      (let [{thump-deck :thump-deck\n             non-thump-deck :non-thump-deck} (group-by #(if (= (:suit %) trump-suit)\n                                                          :thump-deck\n                                                          :non-thump-deck)\n                                                       deck)]\n        (best-suit (or thump-deck non-thump-deck))))))","user":"5cb41c40e4b026601754b911"},{"code":"(fn [t]\n  #(last (sort-by (fn [c] [(cond (= (:suit c) t) 2\n                                (= (:suit c) (:suit (first %))) 1\n                                1 0)\n                     (:rank c)]\n                          ) %)))","problem":141,"user":"4e5411e8535d8a8b8723a279"},{"problem":141,"code":"(fn [trump]\n  (fn [xs]\n    (let [ys (filter #(= (:suit %) trump) xs)\n          lead (:suit (first xs))\n          ys (if (seq ys) ys (filter #(= (:suit %) lead) xs))]\n      (first (sort-by #(- (:rank %)) ys)))))","user":"5799ff45e4b05b1deef9add1"},{"code":"(fn trick-win [ s ]\n  (fn [ cards ] \n    (let [ trump (if (nil? s) (:suit (first cards)) s ) ] \n      (->>\n        (filter #(= (:suit %) trump) cards)\n        (sort-by :rank)\n        (last )\n      ))))","problem":141,"user":"4fccdc75e4b0ee37620e186d"},{"problem":141,"code":"(fn [trump]\n  #(reduce\n    (fn [card1 card2]\n      (cond\n        (= (:suit card1) (:suit card2)) (max-key :rank card1 card2 )\n        (= trump (:suit card2)) card2\n        :else card1))\n    %))","user":"52470d42e4b05ef8e38e6350"},{"problem":141,"code":"(fn [s]\n  (fn [c] (let [suit (if (nil? s) (get (first c) :suit) s)\n            \tcards (vec (filter #(= suit (get % :suit)) c))]\n        (reduce #(if (> (get % :rank) (get %2 :rank)) % %2) (first cards) cards))))","user":"551c66dae4b07993ea3788de"},{"problem":141,"code":"(fn [trump]\n  (fn winner [trick]\n    (reduce (fn [x y]\n              (cond\n               (= (x :suit) (y :suit))\n                 (if (> (x :rank) (y :rank)) x y)\n               (= (y :suit) trump) y\n               :else x\n               ))\n            trick)))","user":"55f73078e4b06e875b46cea4"},{"problem":141,"code":"(fn [s]\n  (fn [L]\n  \t(let [[x & xs] (filter #(= (:suit %) (if (nil? s) (:suit (first L)) s)) L)]\n      \n    \t(loop [cur x, [y & ys] xs]\n          (if (nil? y) cur\n            (recur (if (< (cur :rank) (y :rank)) y cur) ys))))))","user":"57015a1de4b08d47c97781d4"},{"problem":141,"code":"(fn mk[trump]\n  (let [lead (fn [game suit]\n               (->> game\n                    (filter #(= (:suit %) suit))\n                    (sort-by :rank)\n                    (last)))]\n    (fn [[{lead-suit :suit} & rst :as trick]]\n      (let [lead-winer (lead trick lead-suit)\n            trump-winer (lead trick trump)]\n        (if trump-winer trump-winer lead-winer)))))","user":"56795deae4b05957ce8c6187"},{"problem":141,"code":"(fn winner                                                                                                                                                                        \n  ([trump] (partial winner trump))                                                                                                                                                  \n  ([trump hands]                                                                                                                                                                    \n   (let [lead (-> hands first :suit)                                                                                                                                                \n         candidates (letfn [(filter-lead [hands] (filter #(= (:suit %) lead) hands))                                                                                                \n                            (filter-trump [hands] (filter #(= (:suit %) trump) hands))]                                                                                             \n                      (cond (nil? trump) (filter-lead hands)                                                                                                                        \n                        (some #(= (:suit %) trump) hands) (filter-trump hands)                                                                                                      \n                        :else (filter-lead hands)))]                                                                                                                                \n     (reduce (fn [winner {c-suit :suit c-rank :rank}]                                                                                                                               \n               (if (> c-rank (:rank winner)) {:suit c-suit :rank c-rank}                                                                                                            \n                 winner))                                                                                                                                                           \n             candidates))))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"problem":141,"code":"(fn [trump]\n#(reduce\n (fn [{s1 :suit r1 :rank :as best}{s2 :suit r2 :rank :as maybe}]\n   (cond\n    (empty? best) maybe\n    (= s2 trump) (if (= s1 s2) {:suit s1 :rank (max r1 r2)} maybe )\n    (= s1 s2) {:suit s1 :rank (max r1 r2)}\n    :else best\n   )\n )\n {}\n \n  %\n))","user":"5281a445e4b0757a1b17143a"},{"problem":141,"code":"(fn f [t]\n       (if t\n         (fn [c] (apply max-key :rank (filter #(= (:suit %) t) c)))\n         (fn [c] ( (-> c first :suit f) c)))\n       )","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn [t]\n  (fn [c]\n    (let [l (or t (:suit (first c)))]\n      (apply max-key :rank \n        (filter #(= l (:suit %)) c)))))","problem":141,"user":"4ee4f4a9535d1385b2869d85"},{"code":"(fn [trumps]\n  (fn [cards]\n    (let [led (:suit (first cards))]\n      (apply max-key\n             (fn [c]\n               (+ (condp = (:suit c)\n                    trumps 200\n                    led 100\n                    0)\n                  (:rank c)))\n             cards))))","problem":141,"user":"4eae5fe4535d7eef30807325"},{"problem":141,"code":"(fn [trump]\n  (fn [[{lead :suit} & _ :as cards]]\n    (let [srank #(condp = (:suit %) trump 2 lead 1 0)]\n      (->> cards\n           (sort-by (juxt srank :rank) #(compare %2 %1))\n           (first)))))","user":"59eb63e3e4b0249b7282077c"},{"problem":141,"code":"(fn trump [trump-suit]\n  (fn winner [cards]\n    (let [lead-suit (-> 0 cards :suit)\n          trump-played? (some #(= trump-suit (:suit %)) cards)\n          trick-suit (if trump-played? trump-suit lead-suit)]\n      (->> cards\n           (filter #(= trick-suit (:suit %)))\n           (sort-by :rank)\n           last))))","user":"550e52dbe4b06e50f9beb165"},{"problem":141,"code":"(fn [trump-suit]\n  (fn [cards]\n    (let [lead-suit (:suit (first cards))\n          top-suit (or trump-suit lead-suit)\n          filter-and-sort (fn [suit]\n                            (sort-by :rank\n                                     (filter #(= (:suit %) suit) cards)))\n          top-suit-cards (filter-and-sort top-suit)]\n      (if (empty? top-suit-cards)\n        (last (filter-and-sort lead-suit))\n        (last top-suit-cards)))))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn [trump]\n  (letfn [(winner [cards]\n            (let [trump-suit (if (nil? trump) (:suit (first cards)) trump)\n                  highest-rank (->> cards (filter #(= (:suit %) trump-suit)) (map :rank) (apply max))]\n              {:suit trump-suit :rank highest-rank}))] \n    winner))","problem":141,"user":"51729002e4b044b2ef48a850"},{"problem":141,"code":"#(fn [c]\n   (let [g (group-by :suit c)]\n     (apply max-key :rank (g % (g (:suit (c 0)))))))","user":"4db85bdd535d1e037afb218d"},{"problem":141,"code":"(fn [trump]\n  (fn [cards']\n    (let [led (:suit (first cards')) \n          cards (reverse (sort-by :rank cards'))\n          trumps (filter #(= trump (:suit %1)) cards)\n          trumps-led (filter #(= led (:suit %1)) cards)]\n      (cond (not-empty trumps) (first trumps)\n            (not-empty trumps-led) (first trumps-led)\n            :else (first cards)))))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":141,"code":"(fn [trump]\n\t(fn [[first && _ :as coll]] \n\t\t(dissoc (last (sort-by (juxt :istrump :isfirst :rank) (map #(assoc % :istrump (= (% :suit) trump) :isfirst (= (% :suit) (first :suit))) coll))) :istrump :isfirst)\n\t)\n)","user":"580c8fcee4b0849f6811b721"},{"code":"(fn trick-win [trump]\n  (fn [cards]\n    (let [led (first cards)\n          suit-order0 [:spade :heart :diamond :club]\n          suit-order1 (cons led (remove #(= led %) suit-order0))\n          suit-order-final (if-not (nil? trump)\n                             (cons trump (remove #(= trump %) suit-order1))\n                             suit-order1)\n          suit-cmp\n          (fn suit-cmp [l r]\n            (if (= l r) 0\n                (if (= l (some #{l r} suit-order-final))\n                  -1 1)))\n          hand-cmp\n          (fn hand-cmp [{lsuit :suit lrank :rank}\n                        {rsuit :suit rrank :rank}]\n            (if (= lsuit rsuit) (- (compare lrank rrank))\n                (suit-cmp lsuit rsuit)))]\n    (first (sort hand-cmp cards)))))","problem":141,"user":"529ce629e4b04e0c58e87b6e"},{"problem":141,"code":"(fn trick [trump]\n  (fn [cards]\n    (if-let [trumps (seq (filter #(= trump (:suit %)) cards))]\n      (last (sort-by :rank trumps))\n      (->> (sort-by :rank cards)\n           (filter #(= (:suit (first cards)) (:suit %)))\n           last))))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":141,"code":"(fn [k]\n  (fn [c]\n    (reduce \n     #(cond\n       (and (not= (%1 :suit) k) (= (%2 :suit) k)) %2\n       (and (= (%1 :suit) k) (not= (%2 :suit) k)) %1\n       (and (= (%1 :suit) k) (= (%2 :suit) k))  (if (> (%1 :rank) (%2 :rank)) %1 %2)\n       :else (let [order (zipmap [:spade :heart :club :diamond] (range))]\n               (if (< (order (%1 :suit)) (order (%2 :suit))) %1 %2)))\n     c)))","user":"574abbfbe4b02ea114799200"},{"problem":141,"code":"(fn card-game\n  [card]\n  (fn [coll]\n    (let [card (if (nil? card) (get (first coll) :suit) card)\n          xs (filter #(= (:suit %) card) coll)\n          maxr (apply max (map :rank xs))\n          xs (filter #(= maxr (:rank %)) xs)]\n      (first xs))))","user":"565654dae4b0f9d632dd849f"},{"problem":141,"code":"(fn [trump-suit] \n  (fn [xs] \n    (let [suit-led ((first xs) :suit)]\n      (reduce #(cond (and (= trump-suit (:suit %2))\n                          (> (:rank %2) (:rank %))) %2\n                     (= trump-suit (:suit %)) %\n                     (and (= suit-led (:suit %2))\n                          (> (:rank %2) (:rank %))) %2\n                     :else %) xs))))","user":"54f86b8ce4b01ecee9d88828"},{"problem":141,"code":"(fn [trumps]\n  (letfn [(beats [x y] \n                 (cond \n                  (= (x :suit) (y :suit)) (if (> (x :rank) (y :rank)) x y)\n                  (= trumps (y :suit)) y\n                  :else x))]\n    (fn [[& hands]]\n      (reduce #(beats %1 %2) hands))))","user":"53c649d3e4b00fb29b221297"},{"problem":141,"code":"(fn [trump]\n    (fn [xs]\n      (let [res (reduce (fn [memo {:keys [rank suit]}]\n                          (cond\n                            (and (= suit trump)\n                                 (> rank (:trump memo 0)))\n                            (assoc memo :trump rank)\n\n                            (and (= suit (:suit memo))\n                                 (> rank (:rank memo)))\n                            (assoc memo :rank rank)\n\n                            :else memo))\n                        xs)]\n        (if-let [rank (:trump res)]\n          {:suit trump, :rank rank}\n          (select-keys res [:suit :rank])))))","user":"59fa241ee4b0ca45a743a358"},{"code":"(fn [trump]\n  (fn [[lead-card & rest-cards]]\n    (let [lead (get lead-card :suit)\n          cards-to-consider\n          (cons lead-card\n                (filter #(or (= (:suit %) trump) (= (:suit %) lead))\n                        rest-cards))]\n      (first\n       (sort #(> (:rank %1) (:rank %2)) cards-to-consider)))))","problem":141,"user":"4db53f87535d87e67b28fe08"},{"problem":141,"code":"(fn make-winner [trump-suit]\n  (fn [cards]\n    (let [trump (or trump-suit (:suit (first cards)))]\n      (first (sort-by :rank > (filter #(= (:suit %) trump) cards))))))","user":"4ee528fb535d1385b2869d87"},{"code":"(fn [tr]\n  (fn [cards]\n    (let [lead ((first cards) :suit)\n          tcards (filter #(= (% :suit) tr) cards)\n          lcards (filter #(= (% :suit) lead) cards)]\n      (if (empty? tcards)\n        (last (sort #(compare (%1 :rank) (%2 :rank)) lcards))\n        (last (sort #(compare (%1 :rank) (%2 :rank)) tcards))))))","problem":141,"user":"52586d24e4b0cb4875a45cb0"},{"code":"(fn [t] (fn f [c]\r\n (let [w (:suit (first c))] (first (apply sorted-set-by\r\n   (fn [a b] (- (:rank b) (:rank a))) \r\n   (filter #(= (if (some (fn [x] (= t (:suit x))) c)\r\n                   t w) (:suit %)) c))))))","problem":141,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"partial\n(fn tricky [trump cards]\n    (let [suitsort (merge {:heart 2 :diamond 2 :spade 2 :club 2} {((first cards) :suit ) 1} {trump 0})\n          sortfn (fn [x] [(suitsort (x :suit )) (- (x :rank ))])]\n        (first (sort-by sortfn cards))))","problem":141,"user":"51cbdee1e4b08d8387cbede1"},{"code":"(fn [trump]\n  (fn winner [xs]\n    (let [{:keys [suit]} (first xs)\n          trumps (filter #(= (:suit %) trump) xs)\n          suits (filter #(= (:suit %) suit) xs)]\n      (cond (not (empty? trumps))\n            (apply max-key :rank trumps)\n            suits\n            (apply max-key :rank suits)))))","problem":141,"user":"50366589e4b0fbe0a74d26c3"},{"code":"(fn [trump]\n  (fn [r]\n    (let [best (or trump ((first r) :suit))]\n      (last\n        (sort-by\n          (fn [{:keys [suit rank]}]\n            (+ rank (if (= suit best) 10 0)))\n          r)))))","problem":141,"user":"4f8345c6e4b033992c121c1b"},{"problem":141,"code":"(fn [trump]\n(letfn [\n        (samesuit? [c1 c2] (= (c1 :suit) (c2 :suit)))\n        (trump? [c1] (= (c1 :suit) trump))\n        (higher-card? [c1 c2]\n                      (or\n                        (and (trump? c1) ((complement trump?) c2))\n                        (and (samesuit? c1 c2) (> (c1 :rank) (c2 :rank)))\n                        ))]\n  (fn winner\n    ([cards] (winner (first cards) (rest cards)))\n    ([winning cards]\n     (do (println winning \", cards = \"cards)\n         (if (empty? cards)\n           winning\n           (let [c (first cards)]\n             (winner\n               (if (higher-card? c winning) c winning)\n               (rest cards))\n             )))))))","user":"55f2c898e4b06e875b46ce4b"},{"problem":141,"code":"(fn [trump-suit]\n  (fn [cards]\n    (reduce (fn [winner card]\n              (cond (= (card :suit) trump-suit) (if (or (not= (card :suit) (winner :suit)) (> (card :rank) (winner :rank))) card winner)\n               \t\t(and (= (card :suit) (winner :suit)) (> (card :rank) (winner :rank))) card\n                    :esle winner))\n            (first cards)\n            (rest cards))))","user":"55c20bd0e4b0e31453f64972"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [[{lead :suit}] cards\n          suit (if (and trump (some #(= trump (:suit %)) cards)) #{trump} #{lead})]\n      (first (sort-by :rank > (filter #(suit (:suit %)) cards))))))","user":"54f0d3fde4b024c67c0cf8a6"},{"code":"#(fn [c] (reduce (fn [a b]\n                    (if (= (:suit a) (:suit b))\n                      (if (< (:rank a) (:rank b)) b a)\n                      (if (= % (:suit b)) b a))) c))","problem":141,"user":"4f0664bd535dcb61093f6c0f"},{"code":"(fn [t]\n   (fn [c]\n       (let [s (or t (:suit (first c)))]\n            (last (sort-by :rank ((group-by :suit c) s))))))","problem":141,"user":"4ee7d177535d93acb0a6686f"},{"code":"(fn [trump]\n  (fn [trick]\n    (let [lead-suit (if trump trump (:suit (first trick)))]\n      (last (sort-by :rank (filter #(= lead-suit (:suit %)) trick))))))","problem":141,"user":"514d7e29e4b019235f6c0587"},{"code":"(fn [s]\n    (fn [coll]\n      (let [seed (if (nil? s) :spade s)]\n      (if (empty? (filter #(= seed (:suit %1)) coll))\n        (last (sort-by :rank coll))\n        (last (sort-by :rank (filter #(= seed (:suit %1)) coll)))\n       )))\n  )","problem":141,"user":"4f88ae35e4b033992c121c6d"},{"problem":141,"code":"(fn [t]\n  (fn [cards]\n    (reduce\n     (fn [r x]\n       (if (and (= (:suit r) (:suit x))\n                (< (:rank r) (:rank x)))\n         x\n         r))\n     (if t\n       (cons {:suit t :rank 0} cards)\n       cards))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"problem":141,"code":"(fn [suit]\n  (fn [cards]\n    (let [s (or suit (-> cards first :suit))\n          chosen (filter #(= s (:suit %)) cards)]\n      (apply max-key :rank chosen))))","user":"606a70a5e4b069485764ddf2"},{"problem":141,"code":"(fn [trump]\n  (fn [trick]\n    (last \n     (sort-by :rank\n              (filter #(= (:suit %) (or trump (:suit (first trick))))\n                      trick)))))","user":"5339c105e4b0e30313ee6cae"},{"code":"(fn trick-winner [trump]\n  (let [card-compare (fn card-compare [lead trump a b]\n                       (let [trump (if (nil? trump) lead trump)]\n                         (cond\n                          (and (not= (:suit b) lead) (not= (:suit b) trump)) a\n                          (and (lead a) (trump b) b)\n                          (and (trump a) (lead b) a)\n                          :else (if (> (:rank a) (:rank b))\n                                  a\n                                  b))))]\n\n    (fn [[lead & cards :as all]]\n      (reduce (partial card-compare (lead :suit) trump) all))))","problem":141,"user":"51a97f7ae4b08d8ec191b827"},{"code":"(fn [trump]\n  (let [order (dissoc (merge {:diamond 2 :heart 3 :club 1 :spade 4} {trump 5}) nil)]\n     (fn [cards]\n        (last (sort-by #(+ (* 100 (order (% :suit))) (% :rank)) cards))\n     )\n  )\n)","problem":141,"user":"522eba30e4b01cdb292c5f0e"},{"problem":141,"code":"(fn [trump]\n  (let [best (fn [nice-suit card1 card2]\n               (cond \n                (= (card2 :suit) nice-suit) (if (and (= (card1 :suit) nice-suit) (> (card1 :rank) (card2 :rank))) card1 card2)\n                (= (card2 :suit) (card1 :suit)) (if (> (card1 :rank) (card2 :rank)) card1 card2)\n                :else card1))\n                \n        win (fn win [nice-suit winner [head & tail]]\n                 (if (nil? head)\n                   winner\n                   (win nice-suit (best nice-suit winner head) tail)))]\n  \t(fn [[head & tail]] (win (or trump (head :suit)) head tail))))","user":"55a74d46e4b09e57187da2a3"},{"problem":141,"code":"(fn task141 [x]\n  (fn [coll]\n    (let [trump (filter #(= (:suit %) x) coll)\n          lead (filter #(= (:suit %) (:suit (first coll))) coll)]\n      (if (empty? trump)\n        (last (sort-by :rank lead))\n        (last (sort-by :rank trump))))))","user":"55205564e4b08d5046aa8a60"},{"problem":141,"code":"(fn [t]\n    (fn [[c :as x]]\n      (last (sort-by (fn [{s :suit r :rank}]\n                       [(cond (= s t) 2\n                              (= s (:suit c)) 1\n                              :else 0)\n                        r])\n                     x))))","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(fn [trump]\n   (fn [[{leading :suit} & others :as cards]]\n     (last\n       (sort-by\n         (juxt\n           #(condp = (% :suit)\n              trump 3\n              leading 2\n              1)\n           :rank)\n         cards))))","problem":141,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":141,"code":"(fn tricky-cards\n  [trump]\n  (fn [coll]\n    (let [suit (or trump (-> coll first :suit))]\n      (->> coll (filter #(-> % :suit (= suit))) (sort-by :rank) last))))","user":"5383668ee4b06839e8705edd"},{"problem":141,"code":"(fn woncard [trump]\n  (fn [cards]\n    (letfn \n      [(maxcard [col]\n                (reduce #(if (and %1 (< (:rank %2) (:rank %1))) %1 %2) nil col))]\n      (some \n        identity \n        [(maxcard (filter #(= (:suit %) trump) cards)) \n         (maxcard (filter #(= (:suit %) (:suit (first cards))) cards))]))))","user":"55536a8ae4b0deb715856e03"},{"code":"(fn [trump]\n    (fn [trick]\n      (letfn [(same-suit [suit trick]\n                {:suit suit :rank  (apply max (map :rank (filter #(= (:suit %) suit)\n                                                                 trick)))}\n                )\n              ]\n        (if trump\n          (same-suit trump trick)\n          (same-suit (:suit (first trick)) trick) ))\n      ))","problem":141,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"(fn [t]\n  #(let [S :suit \n         R :rank \n         t (or t (S (first %)))]\n    (reduce \n      (fn [a {s S r R}] \n        (if (and (= s t) (< (R a 0) r)) \n          (assoc a R r) \n          a))\n      {S t} \n      %)))","problem":141,"user":"4ef49c2c535dced4c769f238"},{"code":"(fn [trump]\n  (letfn [\n    (winner [trump leadcard [card & rcards :as cards]]\n      (cond \n        (empty? cards) \n          leadcard  ;; done\n        (= trump (:suit card)) \n          (recur nil card rcards) ;; drop trump\n        (and \n          (= (:suit card) (:suit leadcard))\n          (> (:rank card) (:rank leadcard)))\n          (recur trump card rcards) ;; lead outranked\n        :else \n          (recur trump leadcard rcards) ;; lead kept\n    ))]\n    #(winner trump (first %) %)))","problem":141,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn [suit]\n  (fn [[f & _ :as coll]]\n    (letfn [(bests [suit]\n              (seq (sort-by :rank\n                (filter #(= (:suit %) suit) coll))))]\n    (last\n      (or\n        (bests suit)\n        (bests (:suit f))\n        (sort-by :rank coll))))))","problem":141,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [t]\r\n  #(reduce \r\n    (fn [{sx :suit rx :rank :as x} {sy :suit ry :rank :as y}]\r\n      (if (= sx sy) \r\n        (if (> ry rx) y x)\r\n        (if (= sy t) y x))) \r\n  %))","problem":141,"user":"4db85282535d1e037afb218a"},{"code":"(fn [c]\n  (fn [xs]\n    (first (or (seq (sort #(> (% :rank) (%2 :rank))\n                          (filter #(= (% :suit) (or c ((first xs) :suit)))\n                                  (rest xs))))\n               xs))))","problem":141,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":141,"code":"(fn [in-trump]\n  (fn [card-seq]\n    (let [trump (or in-trump (-> card-seq first :suit))]\n       (->> (filter #(= (:suit %) trump) card-seq)\n           (sort #(> (:rank %1) (:rank %2)))\n           first))))","user":"5a9dbb32e4b0d174b936c7f3"},{"code":"(fn [trump]\n  (fn winner [cards]\n    (let [lead (:suit (first cards))\n          ordm (if (= lead trump)\n                 {lead 1}\n                 {lead 1 trump 2})]\n      (last\n       (sort-by (fn [{:keys [suit rank]}]\n                  [(ordm suit 0) rank])\n                cards)))))","problem":141,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"(fn [t]\n  (fn [s] \n    (let [leadsuit (:suit (first s))\n          trump-max (first (sort-by :rank > (filter #(= t (:suit %)) s)))\n          lead-max (first (sort-by :rank > (filter #(= leadsuit (:suit %)) s)))]\n      (if (nil? trump-max)\n        lead-max\n        trump-max)\n      )))","problem":141,"user":"5034b0e1e4b062bc5d7ae167"},{"code":"(fn [trump]\n  (fn [[c & cs :as ccs]]\n    (let [lead (:suit c)\n          mk (fn [k vs] (if (empty? vs) vs (apply max-key k vs)))\n          max-by (fn [k v] (mk :rank (filter #(= k (:suit %)) v)))\n          win-lead (max-by lead ccs)\n          win-trump (max-by trump ccs)]\n      (if (empty? win-trump)\n        win-lead\n        win-trump))))","problem":141,"user":"4dc537fd535d8a4b2fd74282"},{"code":"(fn [t]\r\n  (fn [c]\r\n    (last \r\n      (sort-by :rank \r\n        (filter #(= (:suit %) (if t t (:suit (nth c 0)))) c)))))","problem":141,"user":"509c03f3e4b085ae113522a8"},{"problem":141,"code":"(fn [trump-suit]\n  (fn winner [trick]\n    (apply max-key :rank\n           (or (and trump-suit\n                    (seq (filter (comp\n                                  (partial = trump-suit)\n                                  :suit)\n                                 trick)))\n               (seq (filter (comp\n                             (partial = (get-in trick [0 :suit]))\n                             :suit)\n                            trick))))))","user":"54246fcce4b01498b1a71aed"},{"code":"(fn [trmp]\n\t(fn [[x & xs :as s]] \n\t\t(first (sort-by #(+ (:rank %) ({(or trmp (:suit x)) 13} (:suit %) 0))\n                                      > s))))","problem":141,"user":"519ef784e4b087743fad2198"},{"problem":141,"code":"(fn winner [suit]\n  (fn [cards]\n    (let [ref (atom {:suit suit\n                     :winner nil})\n          [f & r] cards\n          larger? (fn [card1 winner suit]\n                    (cond\n                      (and (= (:suit card1) (:suit winner)) (> (:rank card1) (:rank winner))) true\n                      (and (not= (:suit card1) (:suit winner)) (= (:suit card1) suit)) true\n                      :else false))]\n      (if suit\n        (swap! ref assoc-in [:suit] suit)\n        (swap! ref assoc-in [:suit] (:suit f)))\n      (swap! ref assoc-in [:winner] f)\n      (doseq [card r]\n        (when (larger? card (get @ref :winner) (:suit @ref))\n          (swap! ref assoc-in [:winner] card)))\n      (:winner @ref))))","user":"5fa74b82e4b0fa27300f3dda"},{"code":"(fn [trump]\n  (fn [trick]\n    (reduce\n      #(if (= (%1 :suit) (%2 :suit)) (if (< (%1 :rank) (%2 :rank)) %2 %1) (if (= trump (%2 :suit)) %2 %1))\n      trick\n    )\n  )\n)","problem":141,"user":"507eddf4e4b06ce648bcdbfa"},{"code":"(fn [trump]\n  (fn [cards] (let [trump (or trump ((first cards) :suit))] (last (sort-by :rank (filter #(= trump (% :suit)) cards))))))","problem":141,"user":"51aab611e4b04e3dc0c27b2d"},{"code":"(fn [trump] \n  (fn [cards]\n    (let [leader (first cards)\n          winner-suit (if (not (empty? (filter #(= (% :suit) trump) cards)))\n                           trump\n                           (leader :suit))]\n         (last (sort-by :rank (filter #(= (% :suit) winner-suit) cards))))))","problem":141,"user":"4f13047d535d64f60314642c"},{"problem":141,"code":"(fn [t]\n    (fn winner [cs]\n      (let [big (fn [st] (last (sort-by :rank (filter #(= st (:suit %)) cs))))\n            bigt (if t (big t) nil)]\n        (if bigt\n          bigt\n          (big (:suit (first cs)))))))","user":"4e837808535db62dc21a62d9"},{"code":"(fn [t]\n  (fn [h]\n    (let [f (fn [s h] (last (sort-by :rank (filter #(= s (% :suit)) h))))\n          x (f t h)]\n      (if x x (f ((first h) :suit) h)))))","problem":141,"user":"4fa30027e4b081705acca187"},{"code":"(fn [trump]\n  (fn winner [cards]\n    (apply max-key #(+ (if (= trump (:suit %)) 100 0) (if (= (:suit (first cards)) (:suit %)) 50 0) (:rank %)) cards)))","problem":141,"user":"5002b6e5e4b0678c553fc42c"},{"problem":141,"code":"(fn [trump]\n  (fn [cards]\n    (let [suit (if (and (keyword? trump)\n                        (true? (some #(= trump (:suit %)) cards)))\n                 trump\n                 (:suit (first cards)))]\n      (->> cards\n        (filter #(= (:suit %) suit))\n        (reduce (fn [card-h card]\n                  (if (> (:rank card) (:rank card-h))\n                    card\n                    card-h)))))))","user":"51dafedee4b09f6bc204eee2"},{"code":"#(fn [[l & _ :as t]]\n   (let [k :suit g (group-by k t)]\n     (last (sort-by :rank (get g % ((k l) g))))))","problem":141,"user":"503b6995e4b07a1917cc34dd"},{"code":"(fn [trump]\n  (fn [game]\n    (let [trump (or trump (-> game first :suit))]\n      (last (sort-by\n              :rank\n              (filter \n                #(= trump (:suit %))\n                game))))\n    )\n  )","problem":141,"user":"4fbbcf0ce4b081705acca2ee"},{"problem":141,"code":"(fn [trump]\n  (let [order (merge {:diamond 13 :heart 26 :club 0 :spade 39} {trump 52})]\n     (fn [cards]\n        (apply max-key #(+ (order (:suit %)) (:rank %)) cards)\n     )\n  )\n)","user":"52d00832e4b07d0d72b273b4"}]