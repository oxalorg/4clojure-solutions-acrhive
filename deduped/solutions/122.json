[{"code":"(fn asdf [x] (reduce + (map * [ 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768]\n                    (map #(Integer/parseInt (str %)) (reverse (seq x))))))","problem":122,"user":"5012036ce4b0a040369c12f4"},{"problem":122,"code":"#(apply + (flatten (map-indexed (fn[idx itm]\n               (if (= \\0 itm)\n                 [0 0]\n                 [0 (reduce * (repeat idx 2))]\n                 )) (reverse %))))\n\n;;(read-string (str 2 \\r v))","user":"544cf5d7e4b0e39780006977"},{"problem":122,"code":"(fn [s]\n    (let [char->bit (fn [c]\n                      ({\\0 0 \\1 1} c))\n          step (fn [acc c]\n                 (+ (* 2 acc)\n                    (char->bit c)))]\n      (reduce step 0 s)))","user":"51b91b08e4b0e871ca4958f8"},{"problem":122,"code":"(fn [x]\n  (let [revBin (reverse (map #(Integer/parseInt %) (map str (vec x))))\n        cntBin (count revBin)\n        pwrTwo (take cntBin (iterate (partial * 2) 1))]\n        (apply + (map * pwrTwo revBin))\n  )\n)","user":"5f3a8493e4b004f08c61c527"},{"problem":122,"code":"(fn [coll]\n   (reduce (fn [a sv]\n             (let [v (- (int sv) (int \\0))]\n               (+ (* 2 a) v)))\n           0\n           (seq coll) )\n   )","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":122,"code":"(fn binary-value [s]\n  (loop [res    0\n         weight 1\n         s      (reverse s)]\n    (if (empty? s)\n      res\n      (recur (->> (first s) Character/getNumericValue (* weight) (+ res))\n             (* weight 2)\n             (rest s)))))","user":"55586905e4b0deb715856e2b"},{"problem":122,"code":"(fn f122 [str]\n (->>\n   (reverse str)\n   (map-indexed #(do [(bigint (Math/pow 2 %)) %2]))\n   (filter #(= \\1 (last %)))\n   (map first)\n   (reduce +)))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":122,"code":"#(reduce + \n\t(map * (map (fn [a] (- (int a) 48)) (seq %))\n           (reverse (take (count %) (iterate (fn [x] (* 2 x)) 1)))))","user":"57d0e185e4b0bd073c202360"},{"problem":122,"code":"(fn [c]\n  (reduce + (map * \n                 (reverse (map #(- (int %) 48) c))\n                 (iterate #(* 2 %) 1))))","user":"5bb25684e4b0a20761a2350d"},{"problem":122,"code":"(fn binval [s]\n  (reduce +\n  (map (fn [v]\n  (let [n (first v), val (second v)]\n  (if (= val \\1)\n    (reduce * (repeat n 2))\n    0))) \n   (map-indexed vector (reverse s)))))","user":"5cb4e764e4b026601754b929"},{"code":"(fn [str] (apply + (reduce #(conj %1 (* (Math/pow 2 (count %1)) (- (int %2) 48))) '() (reverse str))))","problem":122,"user":"4dbdab4e535d020aff1edf49"},{"code":"(fn bin-to-num [bin]\n  (let [digits (reverse (map #(read-string (str %)) (seq bin)))\n        two-to (fn [base n] (* base (if (zero? n) 1 (reduce * (repeat n 2)))))]\n    (reduce + (map two-to digits (range)))))","problem":122,"user":"50d882d4e4b01f0871336e69"},{"problem":122,"code":"(fn [st]\n  (first\n    (reduce\n      (fn [[sum shift] c]\n        (let [bit (read-string (str c))]\n          [(+ sum (* bit (bit-shift-left 1 shift))) (inc shift)]))\n      [0 0]\n      (into '() st))))","user":"58bc0531e4b0888cdc949d07"},{"code":"(fn read-binary [x]\n  (int (reduce +\n               (map-indexed (fn [idx itm]\n                              (let [n (read-string (str itm))]\n                                (* n (Math/pow 2 idx))))\n                            (reverse x)))))","problem":122,"user":"51db0d99e4b06aa4d4669a9d"},{"code":"#(reduce + (map (fn [x] ( if (= (second x) \\1) (reduce * (repeat (first\n x) 2)) 0  )) (map-indexed (fn [idx itm] [(dec (- (count %) idx)) itm]) (vec %))\n))","problem":122,"user":"5296008fe4b02ebb4ef7502a"},{"code":"#(->> %\n      (str \"2r\")\n      (read-string))","problem":122,"user":"5250b7a5e4b0541d1855b83e"},{"problem":122,"code":"#(reduce (fn [a e] (+ a a ({\\0 0 \\1 1} e))) 0 %)","user":"5f2c02d1e4b033932238a65f"},{"code":"(fn [bin] (loop [res* (seq bin) power (dec (count bin)) result 0]\n  \t\t(if (empty? res*)\n\t\t\t\t(int result)\n\t\t\t(if (= \\1 (first res*))\n\t\t\t\t(recur (rest res*) (dec power) (+ result (Math/pow 2 power)))\n\t\t\t\t(recur (rest res*) (dec power) result)))))","problem":122,"user":"5054e37fe4b0b1b9d1860eb6"},{"code":"(fn [x] \n  (reduce #(+ (* 2 %) %2) \n    (map #(- (int %) 48) (seq x))\n  )\n)","problem":122,"user":"4f31ad57e4b0d6649770a089"},{"problem":122,"code":"(fn [s]\n  (reduce + (map #(* %2 ((comp read-string str) %)) (reverse s) (iterate (partial * 2) 1))))","user":"5c665311e4b0fca0c16226a7"},{"code":"#(reduce + (map (fn [b d] (if (= \\0 b) 0 d))\n                 (reverse %)\n                 (iterate (fn [v] (+ v v)) 1)))","problem":122,"user":"4ee868be535d93acb0a6687d"},{"code":"#(reduce (fn [tot ch] (if (= ch \\1) (inc (* 2 tot)) (* 2 tot))) 0 (seq %))","problem":122,"user":"5145832be4b0e8879607340a"},{"problem":122,"code":"(fn [input]\n  (loop [[digit & bst] input, n 0]\n    (cond\n      (= digit \\1) (recur bst (+ 1 (* n 2)))\n      (= digit \\0) (recur bst (* n 2))\n      :else n\n      )))","user":"5ab5f60be4b073f177442643"},{"problem":122,"code":"(fn fun [binaryString]\n(apply +\n  (map\n    #(* (- (int %2) 48) %)\n    (conj (map #( apply * (take % (repeat 2)) ) (range 1 (count binaryString))) 1)\n    (reverse binaryString)\n  )\n)\n  )","user":"5da20e73e4b000c986472be1"},{"code":"(fn [s]\n  (reduce + (keep-indexed #(if (= \\1 %2) (bit-shift-left 1 %)) (reverse s))))","problem":122,"user":"511d6a01e4b022853b0e07a5"},{"code":"(fn [s] \n  (let [l (reverse (map #(- (int %) 48) s))]\n    (int (reduce + \n          (map-indexed #(* %2 (Math/pow 2 %1)) \n                        l)))))","problem":122,"user":"515896f2e4b059418b97f0a8"},{"problem":122,"code":"(fn bin-to-dec [bin-str]\n  (reduce + (map (fn [bin-digit-char value]\n                   (if (= bin-digit-char \\0)\n                     0\n                     value))\n                 (reverse bin-str) (iterate #(* 2 %) 1))))","user":"55a1d7f6e4b0acc240e31519"},{"code":"(fn [s] \r\n  (reduce + (map \r\n              (partial apply *) \r\n              (partition 2 (interleave \r\n                             (map (fn [c] (- (int c) 48)) s) \r\n                             (reverse (reduce (fn [s x] (conj s (* (last s) 2))) [1] (rest s))))))))","problem":122,"user":"4e6a97a9535d8ccf87e9fef8"},{"code":"(fn binary [s]\n  (int (reduce + (map-indexed (fn [i, v] (* (Integer/parseInt(str v)) (Math/pow 2 i))) (reverse s))))\n)","problem":122,"user":"50e496e8e4b0cb9ec68fbca0"},{"code":"(fn [x] (let [y (map #(Character/getNumericValue %1) (vec x))]\n          (loop [h y z 0]\n            (if (nil? (first h)) (int z)\n              (recur (rest h) (+ (* (Math/pow 2 (count (rest h))) (first h)) z))))\n          ))","problem":122,"user":"5099283ce4b0cae2931060af"},{"code":"(fn [s] \n  (apply +\n    (map #(if (= %1 \\1) %2 0)\n         (reverse s)\n         (iterate (partial * 2) 1))))","problem":122,"user":"514c2d05e4b02b8cbb2a9278"},{"code":"(fn [x]\n  (reduce +\n\t( map *  \n\t\t(map #(reduce *(repeat % 2)) (reverse (range (count x) )))\n\t\t(map #(if (= % \\1) 1 0 ) x ))))","problem":122,"user":"4e8d5edd535d65386fec2134"},{"problem":122,"code":"(fn [x] (. Integer (parseInt x 2)))","user":"56bff105e4b060a8e693e3a4"},{"problem":122,"code":"(fn [s]\n  (apply + \n   (map\n    #(if (= \\1 %2) %1 0)\n    (iterate #(* 2 %) 1)\n    (reverse s))))","user":"54dd76c8e4b024c67c0cf794"},{"problem":122,"code":"(fn\n  [n]\n  (apply bit-or (cons 0(map-indexed #(bit-shift-left (if (= \\1 %2) 1 0 ) %1) (reverse n)))))","user":"5aa2f1dee4b0d174b936c865"},{"code":"(fn [b] (apply + (map * (map #(Integer. (str %)) (reverse b)) (take (count b) (iterate #(* 2 %) 1)))))","problem":122,"user":"52c8758be4b0c2d177d62135"},{"problem":122,"code":"(fn [s]\n  (->>\n   s\n reverse\n (map-indexed (fn [i c] [i c]))\n (filter #(= (second %) \\1))\n (map #(.pow (BigInteger. \"2\") (first %)))\n (reduce +)))","user":"5452a300e4b0e397800069c7"},{"problem":122,"code":"(fn [s] (loop [[car & cdr] s t 0] (if (nil? car) t (recur cdr (let [v (bit-shift-left t 1)] (if (= \\1 car) (+ v 1) v))))))","user":"53320dd1e4b019098a6f8b71"},{"problem":122,"code":"(fn [s]\n   (let [al (reverse (seq s))]\n     (loop [summ 0\n            firstt (Integer/parseInt (str (first al)))\n            otherr (rest al)\n            positionn 1]\n       (println summ firstt otherr positionn)\n       (if firstt \n         (recur (+ summ (* positionn firstt)) (when (first otherr) (Integer/parseInt (str (first otherr)))) (rest otherr) (* 2 positionn))\n         summ\n         )))\n   )","user":"54bbba99e4b0ed20f4ff6ec2"},{"problem":122,"code":"#(reduce \n  (fn [x y] (+ (* 2 x) y))\n  (map (fn [c] (Integer. (str c))) (seq %)))","user":"56815e2fe4b0945ebc182a84"},{"problem":122,"code":"(fn [s]\n  (loop [ans 0, xs (seq s)]\n    (if (empty? xs)\n      ans\n      (let [bit (if (= \\1 (first xs)) 1 0)]\n        (recur (+ (* ans 2) bit) (rest xs))))))","user":"56669819e4b0e91d5f5c5674"},{"code":"(fn [x]\n  (let [p2s (iterate (partial * 2) 1)\n        ws (reverse (map #(- (int %) (int \\0)) x))]\n    (reduce + (map * ws p2s))))","problem":122,"user":"4f418eaee4b0d7d3c9f3fce9"},{"code":"(fn [n]\n  (loop [bn (reverse n) r 0 c 1]\n    (cond (empty? bn) r\n          (= (first bn) \\1)\n            (recur (rest bn) (+ r c) (* c 2))\n          :else\n            (recur (rest bn) r (* c 2)))))","problem":122,"user":"526f9715e4b03e8d9a4a7372"},{"code":"(fn a [col] (loop [c col m 1 s 0] (if(nil? c) (identity s) (recur (butlast c) (* 2 m) (+ s (* m (if(= \\1 (last c)) 1 0))) ) )))","problem":122,"user":"527a8eb7e4b03e8d9a4a755f"},{"code":"(fn bin [s]\n  (loop [ret 0 a (reverse (map #(- (int %) 48) s)) pow 0]\n    (if (empty? a)\n      (int ret)\n      (recur (+ ret (* (Math/pow 2 pow) (first a))) (rest a) (+ 1 pow)))))","problem":122,"user":"4f04d312535dcb61093f6be7"},{"problem":122,"code":"#(reduce + (map (fn [d e] (* (if (= d \\1) 1 0) e)) (reverse %) (iterate (fn [x] (* x 2)) 1)))","user":"57ccedaae4b0c746388ab88e"},{"problem":122,"code":"(fn [b] (int (reduce + (map-indexed #(if (= \\1 %2) (Math/pow 2 %) 0) (reverse b)))))","user":"54cbe00ee4b057c6fda3a285"},{"problem":122,"code":"(fn [num-str]\n    (->> (reverse num-str)\n         (map-indexed (fn [idx itm]\n                        (* (Math/pow 2 idx)\n                           (Integer/parseInt (str itm)))))\n         (apply +)\n         int))","user":"603d5f2ae4b0d5df2af2230c"},{"problem":122,"code":"(fn \n  [string]\n  (->> string\n    (seq)\n    (map #(Character/digit % 10))\n    (reduce (fn [total v] (+ (* total 2) v)) 0)))","user":"5e228b5ae4b05b4b01516134"},{"code":"(fn [arg]\n  (apply + (map (fn [[pow bin]] (* bin (int (Math/pow 2 pow))))\n                (map-indexed (fn [idx itm] [idx itm]) (map #(Integer/parseInt (str %)) (reverse (seq arg)))))))","problem":122,"user":"5348cab4e4b084c2834f4a5e"},{"problem":122,"code":"(fn [bin]\n  (loop [current (last bin)\n         remaining (butlast bin)\n         result 0\n         position 1]\n    (if (empty? remaining)\n      (+ result (if (= \\0 current)\n                  0\n                  (/ (apply * (repeat position 2)) 2)))\n      (recur\n        (last remaining)\n        (butlast remaining)\n        (+ result (if (= \\0 current)\n                    0\n                    (/ (apply * (repeat position 2)) 2)))\n        (inc position)))))","user":"53c69ebce4b00fb29b22129c"},{"code":"(fn [s](cond \n    (= s \"0\") 0\n    (= s \"111\") 7\n    (= s \"1000\") 8\n    (= s \"1001\") 9\n    (= s \"11111111\") 255\n    (= s \"10101010101\") 1365\n    (= s \"1111111111111111\") 65535))","problem":122,"user":"4ebd4448535dfed6da9c6d8f"},{"code":"#(reduce (fn [acc c] (+ (* 2 acc) ({\\1 1} c 0))) 0 %)","problem":122,"user":"4e9660ec535dbda64a6f6b44"},{"problem":122,"code":"(fn to_dec\n  [b]\n  (loop [digits (map #(if (= \\1 %) 1 0) b)\n         c (count b)\n         t 0]\n    (if (empty? digits)\n      t\n      (recur (rest digits)\n             (dec c)\n             (+ t (* (first digits) (reduce * (repeat (dec c) 2))))))))","user":"5866b999e4b0f14aab7c886b"},{"problem":122,"code":"(fn [s] (apply + (map #(if (= %1 \\1) %2 0) (reverse s) (iterate #(* % 2) 1))))","user":"583e27e2e4b089d5ab817daa"},{"problem":122,"code":"(fn [x]\n  ((fn foo [x s]\n    (cond (empty? x) 0\n          (= \\0 (first x)) (foo (rest x) (* s 2))\n          :else (+ s (foo (rest x) (* s 2))))) (reverse (vec x)) (bigint 1)))","user":"5760715de4b08062f99a4e96"},{"code":"(fn [n]\n  (int (reduce +\n          (map\n           #(*\n             (Math/pow 2 %2)\n             (Integer/valueOf (str %1)))\n           (reverse (seq n))\n           (range (count n)))))\n  )","problem":122,"user":"52d42021e4b09f7907dd132a"},{"problem":122,"code":"(fn [s]\n  (reduce\n   +\n   (map\n    #(* %1 (Character/digit %2 10))\n    (iterate (partial * 2) 1)\n    (reverse s))))","user":"5649b1b0e4b0284900eef646"},{"code":"(fn z [bs]\n  (loop [nbs (reverse (clojure.string/split bs #\"\"))\n         vlz (take (count nbs) (iterate #(* % 2) 1))\n         ttl 0]\n    (if (empty? nbs)\n      ttl\n      (recur (rest nbs) (rest vlz) (if (= \"1\" (first nbs))\n                                       (+ ttl (first vlz))\n                                       ttl)))))","problem":122,"user":"52bdd135e4b07a9af579230a"},{"code":"(fn [num] (int (reduce + (map #(first %) (filter #(= (second %) \\1) (partition 2 (interleave (map #(Math/pow 2 %) (range (count num))) (reverse num))))))))","problem":122,"user":"4ec56b5b535d6d7199dd369f"},{"problem":122,"code":"(fn [l]\n  (reduce +\n          (map-indexed\n           #(if (= %2 \\0)\n              0\n              (bit-shift-left 1 %))\n           (reverse l))))","user":"503e91d4e4b06c4e0e1fa269"},{"problem":122,"code":"(fn [x] (apply + (map #(if (= (second %) \\0) 0 (apply * (repeat (first %) 2))) (map-indexed (fn [idx itm] [idx itm]) (reverse x)))))","user":"54d4b3a7e4b0a52adc2e2003"},{"code":"#(apply + (let [rev (reverse %)] (for [r (range (count %))] (if (= (.get rev r) \\1) (apply * (repeat r 2)) 0))))","problem":122,"user":"5210ac52e4b080a8d9b9d63e"},{"problem":122,"code":"(fn binary-str-to-decimal [b-string]\n  (reduce #(+ (bit-shift-left %1 1) (if (= %2 \\1) 1 0)) 0 b-string))","user":"51fc44c5e4b0f1313d468a1b"},{"code":"(fn [a] ((reduce #(vector (* 2 (%1 0)) (+ (%1 1) (if (not= \\0 %2) (%1 0) 0))) [1 0] (reverse a)) 1))","problem":122,"user":"50982cc7e4b04e098a4c726c"},{"code":"(fn [str]\n          (reduce #(+ %2 (* 2 %1))\n                  (map #(- (int %) 48) (vec str)))\n)","problem":122,"user":"5150f87ae4b03e678e393ac7"},{"problem":122,"code":"(fn binaryparser ([b] (binaryparser 0 0 (reverse b)))\n  \t\t\t\t  ([n p b] (if (= (first b) \\1) \n                               (binaryparser (+ n (Math/pow 2 p)) (inc p) (rest b)) \n                               (if (= (first b) \\0) \n                                   (binaryparser n (inc p) (rest b)) \n                                   (int n)))))","user":"542c1f73e4b0dad94371f29d"},{"problem":122,"code":"(fn [x] (reduce + (map *  (map (fn [w] (- (int w) 48)) (reverse (seq x))) (take ( count  x ) (iterate (partial * 2) 1)) )))","user":"53d5d24de4b0e771c302544a"},{"code":"(fn [bin] \n  (let [pow #(reduce * (repeat %2 %))\n        rs (-> bin reverse seq)]\n    (reduce + (map-indexed (fn [i v] (if (= v \\1) (pow 2 i) 0)) rs))))","problem":122,"user":"51a768e0e4b0da5f497bde84"},{"code":"(fn [b]\n  (apply +\n    (map *\n      (map #(Integer. (str %)) (reverse b))\n      (iterate #(* 2 %) 1))))","problem":122,"user":"4e6f4cbc535d5021c1a8961a"},{"problem":122,"code":"(fn [x] (reduce #(+ ({\\0 0 \\1 1} %2) (* %1 2)) 0 (seq x)))","user":"5ad63a34e4b0ea6055cfac01"},{"problem":122,"code":"(fn [xs] (apply + (map * (map #(Integer/parseInt %) (map str (reverse (seq xs)))) (iterate #(* 2 %) 1))))","user":"5b924123e4b0c0b3ffbd4a34"},{"code":"(fn parsebin [bs]\n  (loop [n 0 bs bs]\n    (if-let [[b & rbs] (seq bs)]\n      (recur (+ ({\\0 0 \\1 1} b) (* 2 n)) rbs)\n      n)))","problem":122,"user":"4dfd4ba8535d04ed9115e781"},{"code":"(fn [s]\n  (reduce + (map #(if (= %1 \\1) %2 0) (reverse s) (iterate #(* 2 %) 1))))","problem":122,"user":"50aab057e4b056ee0193586b"},{"code":"(fn [a]\n  (letfn [(rds [s] (map #(read-string (str %)) s))\n          (expon [b n] (if (zero? n) 1 (reduce *' (repeat n b))))\n          (convertfrombin [s] (reduce +' (map-indexed (fn [i d] (*' d (expon 2 i))) (reverse (rds s)))))]\n    (convertfrombin a)))","problem":122,"user":"5133e51ae4b0d7a043de8cf6"},{"code":"#(read-string (str \"2r\" %) )","problem":122,"user":"52c42bc2e4b0c2d177d620d0"},{"problem":122,"code":"(fn [n] (read-string (str \"2r\" n)))","user":"538d7e2ee4b0b51d73faae70"},{"problem":122,"code":"(fn [string] \n  (let [\n        seq1 (map #(Character/getNumericValue %) (seq string)) \n        l (count seq1)] \n    (loop [i l result 0]\n      (if (> i 0)\n        (recur (dec i) (+ result (* (reduce * (repeat (dec i) 2)) (nth seq1 (- l i)))))\n        result))))","user":"57f52d3be4b0903ccab3dce7"},{"code":"(fn from-binary [binary-string]\n  (reduce +\n          0\n          (let [zip (fn [& args] (apply (partial map vector) args))]\n            (for [[b i] (zip binary-string (reverse (take (count binary-string) (iterate #(* 2 %) 1))))]\n              (* (read-string (str b)) i)))))","problem":122,"user":"516385cee4b055933a9ca02d"},{"problem":122,"code":"(fn [b] (reduce #(if (= %2 \\1) (+ 1 (* 2 %)) (* % 2)) 0 b))","user":"5462ce20e4b01be26fd746b8"},{"problem":122,"code":"(fn string-to-binary [s]\n  (cond (empty? s) 0\n        (= (last s) \\0) (* 2 (string-to-binary (butlast s)))\n        (= (last s) \\1) (+ 1 (* 2 (string-to-binary (butlast s))))))","user":"569f99cce4b0542e1f8d1497"},{"code":"(fn [s]\r\n    (let [digits (map (fn [x] (Integer/parseInt x)) (map str (seq s)))]\r\n      (loop [input digits\r\n             output 0]\r\n        (if (empty? input)\r\n          output\r\n          (recur (rest input)\r\n                 (bit-or (bit-shift-left output 1) (first input)))))))","problem":122,"user":"4fcbc18ae4b0ee37620e185c"},{"code":"(fn hey ([x] (hey x 1)) ([x n] (if (empty? x) 0 (+ (* (read-string (str (last x))) n) (hey (drop-last x) (* n 2))))))","problem":122,"user":"52e17e66e4b09f7907dd1423"},{"problem":122,"code":"(fn [bin]\n  (int (reduce\n        +\n        (map-indexed\n         (fn [i x]\n           (*\n            (read-string (str x))\n            (Math/pow 2 i)))\n         (reverse bin)))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"code":"(fn [bstr]\n  (let [pows (iterate #(* 2 %) 1)\n        char->int #(Integer. (str %))\n        rdigits (reverse (map char->int bstr))]\n    (reduce #(+ %1 (apply * %2)) 0 (zipmap pows rdigits))))","problem":122,"user":"4f8c6bf6e4b02e764a0a519b"},{"problem":122,"code":"(fn binary->decimal\n  [bn]\n (BigInteger. bn 2))","user":"59f44189e4b0966464fe6aab"},{"problem":122,"code":"(fn [bs] \n  (loop [in (seq bs) res 0]\n    (if (empty? in)\n      res\n      (recur \n        (rest in) \n        (+ res \n          (* \n            (read-string (str (first in))) \n            (reduce * (repeat (dec (count in)) 2))))\n      ))\n  ))","user":"55150524e4b055c2f668d4d9"},{"code":"(fn f [ arr] (\n\tlet [mymap (apply hash-map(interleave (range) (map #(- (int %) 48) (reverse(seq arr)))))]\n\t(apply + (for [[k v] mymap] (if (= 1 v) (#(apply * (repeat  % 2)) k) 0)))\n\t)\n)","problem":122,"user":"5307e4ece4b02e82168697a9"},{"code":"(fn [bin]\n  (reduce #(+ %1 (* (-> %2 first)\n                    (-> %2 second str Long.)))\n          0\n          (map list\n            (iterate #(* 2 %) 1)\n            (reverse bin))))","problem":122,"user":"53300924e4b019098a6f8b55"},{"problem":122,"code":"(fn [s]\n   (->> (map-indexed #(int (* (read-string (str %2)) (Math/pow 2 %1))) (reverse s))\n      (reduce +)))","user":"55895eade4b059ccff29b202"},{"problem":122,"code":"(fn [s]\n  (loop [digits (map #(Character/digit %1 10) s)\n         cnt (- (count digits) 1)\n         p 0]\n    (if (< cnt 0)\n      (int p)\n      (recur (rest digits) \n             (dec cnt) \n             (+ p (* (Math/pow 2 cnt) (first digits)))))))","user":"54eee38ce4b024c67c0cf878"},{"problem":122,"code":"(fn [binstr] (reduce + 0 (map * (map #(if (= \\0 %) 0 1) binstr) (map #(apply * (repeat % 2)) (reverse (range (count binstr)))))))","user":"5235493ee4b05e80434a5064"},{"problem":122,"code":"reduce #(+ (- (int %2) 48) (* 2 %1)) 0","user":"53968a70e4b0b51d73faaee0"},{"code":"(fn [s]\n  (reduce #(+ %1 %2)\n     (map (fn [c r] (* (- (int c)  (int \\0)) r)) (reverse s)  (cons 1 (iterate #(* % 2) 2)))))","problem":122,"user":"4df9c598535d04ed9115e77a"},{"problem":122,"code":"(fn [string]\n  (let [intnumb (into [] (map read-string (re-seq #\"\\d\" string)))\n        pow-add-all (fn [a-seq]\n                      (loop [origin a-seq\n                             result []]\n                        (if (empty? origin)\n                          result\n                          (recur (rest (vec origin))\n                                 (conj result (*\n                                                (Math/pow 2 (dec (count origin)))\n                                                (first origin)))))))]\n    (int (apply + (pow-add-all intnumb)))\n    ))","user":"565487dce4b0f9d632dd8482"},{"code":"(fn [s]\n    (apply + (map #(* (- (int %1) (int \\0)) %2) (reverse s) (iterate #(* 2 %) 1))))","problem":122,"user":"4da8dd6e30acd6ed12482a68"},{"problem":122,"code":"(fn b[p s] (\n              cond\n              (empty? s) 0\n              (= (last s) \\0) (b (* 2 p) (butlast s))\n              :e (+ p (b (* 2 p) (butlast s)))\n              ))  1","user":"596f6683e4b069c0a1a19877"},{"problem":122,"code":"(fn [binary-string]\n  (reduce\n    +\n    (map\n      (fn [[k v]] (* k v))\n      (zipmap\n        (iterate #(* 2 %) 1)\n        (reverse (map #(Character/digit % 10) binary-string))))))","user":"572b73d0e4b0cd1946bd0f3a"},{"problem":122,"code":"(fn [s] (int (reduce +\n                        (map-indexed #(* (Math/pow 2 %1)\n                                         (- (int %2) 48))\n                                     (reverse s)))))","user":"552e1c98e4b076ab5578f7ee"},{"problem":122,"code":"(fn [s]  (reduce #(+ %2 (* %1 2)) 0 (map #(- (int %1) (int \\0)) s)))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":122,"code":"(fn [bs] (loop [digs (reverse bs) place 0 out 0]\n            (if (empty? digs)\n              out\n              (recur \n               (rest digs)\n               (inc place)\n               (+ out\n                  (* (Character/digit (first digs) 10)\n                     (reduce * 1 (repeat place 2))\n                     )\n                  )\n               )\n              )\n            )\n   )","user":"565233f2e4b0f9d632dd8461"},{"problem":122,"code":"(fn [bin]\n  (->> (map str bin)\n       (map read-string)\n       (reduce #(+ (* % 2) %2))))","user":"55236ad6e4b0882d96d091b1"},{"code":"(fn [s] (apply + (map (fn [x n] (* n (reduce * (repeat x 2)) n)) (iterate inc 0) (reverse (map #(if (= % \\1) 1 0) s)))))","problem":122,"user":"506cad7de4b0a302964c548e"},{"code":"#(Integer/parseInt % 2)\n;; the following one is also neat\n;#(read-string (str \"2r\" %))","problem":122,"user":"4efa3d4b535dced4c769f270"},{"problem":122,"code":"(fn rb [binary-str]\n  (let [rev (reverse binary-str)]\n    (loop [coll rev\n           power 0\n           tot 0]\n      (if-let [digit (first coll)]\n        (do\n          (let [f (fn [power digit]\n                    (let [integerd (Integer/parseInt (str digit))]\n                      (if (> power 0)\n                        (reduce * 1 (repeat power (* 2 integerd)))\n                        integerd)))\n                round (f power digit)]\n            (println power digit round)\n            (recur (rest coll) (inc power) (+ tot round))))\n        tot))))","user":"5ff8ead1e4b06df49cee14ab"},{"problem":122,"code":"(fn [bin] (int (reduce + (keep-indexed #(when (= %2 \\1) (Math/pow 2 %1)) (reverse bin)))))","user":"58ee84e5e4b056aecfd47dab"},{"code":"(fn [s]\r\n  (let [rsq (seq (reverse s))\r\n        nsq (map #(- (int %) 48) rsq)\r\n        bsq (map * (iterate #(* 2 %) 1) nsq)]\r\n    (reduce + 0 bsq)))","problem":122,"user":"4ee40938535d10e5ff6f5375"},{"problem":122,"code":"(fn [x]\n   (->> x\n        (into [])\n        (reverse)\n        (map #(- (int %) 48))\n        (map-indexed (fn [i v] [i v]))\n        (map #(* (last %) (Math/pow 2 (first %))))\n        (apply +)\n        (int)))","user":"588906a9e4b0f1effa3b772a"},{"problem":122,"code":"(fn readbinary [coll] (reduce + (map * (reverse (map - (map int coll) (repeat 48))) (iterate (partial * 2) 1))))","user":"58866b4fe4b0f1effa3b76d4"},{"code":"(fn [s]\n  (->> s\n       (map #(- (int %) 48))\n       reverse\n       (map * (iterate #(* 2 %) 1))\n       (reduce +)))","problem":122,"user":"4e6a2f93535d8ccf87e9feaa"},{"code":"(fn read_binary [x]\n  (letfn [(convert [digit x]\n    (if (= x 0) 0 (int (Math/pow 2 digit))))]\n  (reduce + 0 (map-indexed convert (map #(Character/digit % 10) (reverse x))))))","problem":122,"user":"4ea0c284535d7eef308072ad"},{"problem":122,"code":"(fn [binary-string]\n  (loop [digits (reverse binary-string)\n         position 0\n         value 0]\n    (if (empty? digits)\n        value\n        (let [digit (- (int (first digits)) 48)\n              position-value (reduce * 1 (repeat position 2))]\n          (recur (rest digits)\n                 (inc position)\n                 (+ value (* digit position-value)))))))","user":"5f0b8243e4b0f30dddfb5d45"},{"code":"(fn [s] (reduce #(+ (* 2 %1) (if (= \\0 %2) 0 1)) 0 (seq s)))","problem":122,"user":"506fd0afe4b07bd6ad9b9f23"},{"code":"(fn f\n  ([s] (f (reverse (char-array s)) 1 0))\n  ([x multiply num]\n     (if (empty? x) num\n         (if (= (first x) \\1)\n           (recur (rest x) (* multiply 2) (+ num multiply))\n           (recur (rest x) (* multiply 2) num)\n           ))))","problem":122,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":122,"code":"(fn [binstr]\n    (let [bin (reverse (map #(Character/getNumericValue %) binstr))\n          powers (take 17 (iterate (partial * 2) 1))]\n       (reduce + (map (fn [x y] (if (not (zero? y)) x 0)) powers bin))))","user":"53c0f4dee4b00fb29b221259"},{"code":"(fn [x]\n(apply + (map-indexed #(*(int(Math/pow 2 %)) %2) (map #(- (int %) 48) (reverse x)))))","problem":122,"user":"5124619ae4b02c3f2a072ccd"},{"code":"(fn bin-str-to-dec [s]\n  (let [len (count s)]\n    (int (reduce +\n      (map #(* % %2)\n        (map #(- % 48) (map int s))\n        (map #(Math/pow 2 %) (reverse (range len))))))))","problem":122,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"reduce #(+ (bit-shift-left % 1) (if (= \\1 %2) 1 0)) 0","problem":122,"user":"51e61772e4b0efabf93c02e2"},{"problem":122,"code":"#(reduce + (map-indexed (fn [i d]\n                          (int (* (Math/pow 2 i) (Character/digit d 10))))\n                        (reverse %)))","user":"525523e3e4b0541d1855b9cc"},{"code":"#(.intValue (new BigInteger % 2))","problem":122,"user":"4e8a0c82535d3e98b802328d"},{"code":"(fn [binstring]\n  (reduce #(+ (* 2 %1) %2) 0\n    (map read-string (map str (vec binstring)))))","problem":122,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":122,"code":"(fn [s-init]\n  (loop [s s-init v 0]\n    (if (empty? s)\n      v\n      (if (= (first s) \\1)\n        (recur (rest s) (inc (* 2 v)))\n        (recur (rest s) (* 2 v))))))","user":"58ca613de4b021aa9917edb7"},{"problem":122,"code":"(fn foo[bin]\n  (reduce (fn[val elem] (+ (* val 2) (Integer/parseInt elem))) 0 (rest (clojure.string/split bin #\"\"))))","user":"5537b2c7e4b09218d5f44fce"},{"problem":122,"code":"(fn [s]\n   (reduce + (map-indexed         \n             \n\t\t(fn [i c]\n\t\t ; return 2^i if c is 1, otherwise 0\n\t\t (if (= \\1 c)\n \t        (int ( Math/pow 2 (- (dec (count s)) i)))\n \t  0 )\n\n)\n                          \n s))\n  )","user":"56f2611fe4b04a395b9a04a2"},{"code":"(fn this \n  ([num] \n    (this (map #(- (int %) (int \\0)) (reverse (seq num))) 1 0))\n  ([digits pow acc]\n    (if (empty? digits)\n      acc\n      (recur \n        (rest digits) \n        (* pow 2) \n        (+ acc (* pow (first digits)))))))","problem":122,"user":"4f2e0369e4b0d6649770a064"},{"problem":122,"code":"(fn [b]\n  (->> b\n       reverse\n       (map-indexed\n        (fn [i c]\n          (if (= c \\1)\n            (->> i\n                 (Math/pow 2)\n                 int)\n            0)))\n       (reduce +)))","user":"5cf6522be4b0b71b1d808a58"},{"code":"(fn binaryReader [a] (loop [x (reverse (vec (map #(Integer/parseInt (str %)) (seq a))))\r\n                              y 0\r\n                              z 0] (if (= 0 (count x)) y (recur (rest x) (+ y (int (* (first x) (Math/pow 2 z)))) (inc z)))))","problem":122,"user":"4f9336ece4b0dcca54ed6cb7"},{"problem":122,"code":"(fn [x] (reduce #(+ (* %1 2) %2) (map #(if (= %1 \\0) 0 1) x)))","user":"5c1edf23e4b0efcb0b05b25d"},{"problem":122,"code":"(fn [st]\n  (let [s (map #(Character/digit % 10) (seq st))\n        c (count s)\n        mults (reverse (map #(int (Math/pow 2 %)) (range c)))]\n    (reduce + (map * s mults))))","user":"587f8393e4b0f1effa3b75f2"},{"code":"(fn binstr->num [s]\n  (first\n    (reduce\n      (let [pow2 (fn [n] ((fn [x] (apply * (repeat n x))) 2))]\n        (fn [[tot pos] n]\n          [(+ tot (* n (pow2 pos))) (inc pos)]))\n      [0 0]\n      (map (comp read-string str) (reverse s)))))","problem":122,"user":"50f1dedbe4b0897c4366dcd8"},{"code":"(fn [in]\n  (apply + \n    (map (fn [s i]\n      (* (- (int s) (int \\0)) (Math/pow 2 i)))\n     (reverse in)\n     (range (count in)))))\n\n;(fn [b] (Integer/parseInt b 2))","problem":122,"user":"4de165f3535d08e6dec9fde6"},{"problem":122,"code":"(fn [s]\n   (reduce #(+ (* 2 %) (- (int %2) (int \\0))) 0 (seq s)))","user":"53ea5307e4b036ad0777e4e2"},{"problem":122,"code":"(fn [num] (apply + (map-indexed #(if (= %2 \\0) 0 (if (= %1 0) 1 (apply * (repeat %1 2)))) (reverse num))))","user":"5d6d2172e4b04d129b00f2b9"},{"code":"(fn read-binary [s]\n  ((fn [n digits]\n     (if (seq digits)\n       (recur (+ (* 2 n) (read-string (str (first digits)))) (rest digits))\n       n)) 0 (seq s)))","problem":122,"user":"4ec75077535d6d7199dd36e0"},{"problem":122,"code":"(fn [n] (loop [r 0 l n](if (empty? l) r (recur  (+ (* 2 r) (- (int(first l)) 48)) (rest l)))))","user":"5149c2f1e4b0829bd132edb0"},{"code":"(fn [s] (int (:r (reduce #(identity\n                  {:r (+ (:r %) \n                           (if (= \\0 %2)\n                             0\n                             (* 2 (:e %))))\n                   :e (* 2 (:e %))}) {:r 0 :e 0.5} (reverse s) ))))","problem":122,"user":"525ed5f4e4b0cb4875a45db8"},{"problem":122,"code":"(fn [s]\n  (loop [cs (map (comp #(- % 48) int char) s)\n         r 0\n         i 1]\n    (if (empty? cs)\n      r\n      (recur (drop-last cs) (+ r (* i (last cs))) (* i 2)))))","user":"5918db70e4b09b4ee5954bbb"},{"code":"(fn [str]\n  (loop [input (->> str seq (map #(if (= \\0 %) 0 1))) sum 0 i 0]\n    (if (empty? input)\n      (int sum)\n      (recur (drop-last input) (+ sum (* (last input) (Math/pow 2 i))) (inc i)))))","problem":122,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"#(let [f (fn a [x p]\n  (if (empty? x)\n    0\n    (if (= (first x) \\1)\n      (+ p (a (rest x) (* 2 p)))\n      (a (rest x) (* 2 p)))))]\n  (f (reverse %) 1))","problem":122,"user":"4ddbd934535d02782fcbe9fc"},{"problem":122,"code":"(fn[s]\n  (loop [digits (reverse s), place 1, sum 0]\n    (case (first digits)\n      nil sum\n      \\0  (recur (next digits), (* place 2), sum)\n      \\1  (recur (next digits), (* place 2), (+ place sum)))))","user":"5c6227fee4b0fca0c1622641"},{"problem":122,"code":"(fn [strnum] (loop [strnum strnum\n                     ex 0\n                     curr-pow (reduce * (repeat ex 2))\n                     ans 0]\n                (if (empty? strnum)\n                  ans\n                  (if (= \\1 (last strnum))\n                    (recur (butlast strnum)\n                           (inc ex)\n                           (reduce * (repeat (inc ex) 2))\n                           (+ ans curr-pow))\n                    (recur (butlast strnum)\n                           (inc ex)\n                           (reduce * (repeat (inc ex) 2))\n                           ans)))))","user":"5e9878b9e4b0157ca96647d8"},{"problem":122,"code":"(fn [s]\n   (->> s\n        seq\n        (map #(- (int %) (int \\0)))\n        (reduce #(+ %2 (bit-shift-left %1 1)))\n        )\n   )","user":"559a9a3de4b066d22e731f45"},{"code":"(fn [s]\n  (reduce #(+ (* 2 %1) \n              (if (= \\1 %2) 1 0))\n          0\n          s))","problem":122,"user":"52951156e4b02ebb4ef7501b"},{"problem":122,"code":"reduce (fn [r x] (+ (- (int x) (int \\0)) (* r 2))) 0","user":"55d74e71e4b0e31453f64aa4"},{"code":"(fn [bits]\n  (reduce \n    (fn [result bit]\n      (cond\n        (= \\0 bit) (* 2 result)    \n        (= \\1 bit) (inc (* 2 result))  \n        :else result))\n  0\n  (seq bits)))","problem":122,"user":"4ee3afde535d10e5ff6f5370"},{"problem":122,"code":"#(apply + (map\n  (fn t [a b]\n    (if (= (Integer. a) 1)\n      (if (= b 0)\n        1\n        (reduce * (repeat b 2)))\n      0))\n           (reverse (for [i %] (str i)))\n           (range (count %))))","user":"5e380e72e4b01d43a70e8db0"},{"problem":122,"code":"(fn [x] \n  (apply + \n     (map * \n          (reverse (map (partial get {\\0 0 \\1 1}) (seq x)))\n          (lazy-seq (iterate (partial * 2) 1)) )))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn [s]\n  (reduce +\n          (map #(* (int (Math/pow 2 %1)) (Integer. (str %2)))\n               (range) (reverse s))))","problem":122,"user":"50ef96a1e4b0bdaecbb47d9d"},{"code":"(fn [bstr] (reduce +\n                   (map #(* %1 %2)\n                        (iterate #(* 2 %1) 1)\n                        (map #(Integer/parseInt (str %))\n                             (reverse bstr)))))","problem":122,"user":"5183f5d7e4b02826a645f393"},{"problem":122,"code":"(fn [s]\n  (let [bin (reverse (map #(Integer. (str %)) (seq s)))]\n    (loop [base 1 sum 0 index 0]\n      (if (< index (count bin))\n        (recur (* base 2) (+ sum (* base (nth bin index) )) (inc index))\n        sum))))","user":"579601c8e4b0e215f87e8492"},{"problem":122,"code":"(fn bin-to-num\n  [s]\n  (loop [res 0 l (seq (reverse s)) val 1]\n    (if (not l)\n      res\n      (if (= (first l) \\1)\n        (recur (+ res val) (next l) (* val 2))\n        (recur res (next l) (* val 2))\n        )\n      )\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"problem":122,"code":"(fn f [s]\n    (if (= (count s)\n           1)\n      (if (= (first s)\n             \\1)\n        1\n        0)\n      (+ (* 2\n            (f (butlast s)))\n         (f [(last s)]))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn [s-in]\n  (loop [s (reverse s-in)\n         place-value 1\n         total 0]\n    (if (seq s)\n      (condp = (first s)\n        \\0 (recur (rest s) (* place-value 2) total)\n        \\1 (recur (rest s) (* place-value 2) (+ total place-value)))\n      total)))","problem":122,"user":"51460e4ce4b04ef915e37314"},{"problem":122,"code":"(fn [s]\n  (loop [res 0\n         n (count s)\n         s s]\n    (if (= n 0)\n      res\n      (recur (+ res (if (= (first s) \\1)\n                      (reduce * (repeat (dec n) 2))\n                      0))\n             (dec n)\n             (rest s)))))","user":"5a3e1243e4b0447ef91cc5ae"},{"problem":122,"code":"(fn btoi [s]\n  (let [digits (map #(Integer/parseInt (String/valueOf %)) s)\n        power-2 (fn [pow] (apply * (repeat pow 2)))\n        partial-sums (map #(* % (power-2 %2)) (reverse digits) (range))]\n    (apply + partial-sums)))","user":"573f3ccfe4b05c31a32c083f"},{"code":"(fn [a] (reduce + (map-indexed (fn [i x] (* x (reduce * (repeat i 2)))) \n             (reverse (map #(- (int %) (int \\0)) a)))))","problem":122,"user":"536673a8e4b0243289761e76"},{"code":"(fn [s]\n  (reduce + (keep-indexed (fn [idx c] \n                            (when (= \\1 c)\n                              (int (Math/pow 2 idx)))) \n                          (reverse s))))","problem":122,"user":"50e3e108e4b01912b3285c48"},{"problem":122,"code":"(fn [bin]\n   (let [powers (iterate (partial * 2) 1)]\n     (->> bin\n          reverse\n          (map vector powers)\n          (filter #(= \\1 (second %)))\n          (map first)\n          (apply +))))","user":"5515b138e4b055c2f668d4ed"},{"code":"(fn [v [s & ss]]\n    (if (nil? s)\n        v\n        (recur (+ (read-string (str s)) (* 2 v)) ss))) 0","problem":122,"user":"51f59607e4b0abb92f97f9d5"},{"problem":122,"code":"(fn [n]\n\t(reduce #(+ (* 2 %1) (Integer/parseInt (str %2))) 0 n)\n)","user":"5d2201b8e4b02ea6f0fb69ed"},{"code":"#(loop [x (reverse(seq %)) y 0 num 0] (if (empty? x) (int num)\n\t\t\t\t\t\t    (recur (next x) (inc y) (+ num (if (= (first x) \\0) 0 (Math/pow (* 2 (-(int (first x)) 48))y))))))","problem":122,"user":"503539dee4b0ed9c821488f6"},{"problem":122,"code":"(fn read-binary [x]\n  (Integer/parseInt x 2))","user":"556a6137e4b09a3098a524e0"},{"code":"#(reduce + (map * (map (fn [a] (- (int a) (int \\0))) (reverse (seq %))) (map (fn [a] (bit-shift-left 1 a)) (range (count (seq %))))))","problem":122,"user":"4f99ae4ae4b0dcca54ed6d00"},{"code":"(fn [b]\n  ; Yeah, I could do Integer/parseInt(b, 2), but I won't learn anything like that\n  (let [to-power (fn [n p] (* (Character/getNumericValue n) (int (Math/pow 2 p))))]\n    (reduce + (map to-power (reverse b) (range)))))","problem":122,"user":"51cdd3f0e4b0e42293a2254b"},{"code":"(fn [s]\n  (reduce + \n\t(map \n\t\t(fn [idx, elem]\n\t\t\t(let [elem (-> elem str Integer/parseInt)] \n\t\t\t\t(* elem (reduce * (repeat idx 2)))))\n\t\t(iterate inc 0)\n\t\t(reverse s))))","problem":122,"user":"4f3d83b5e4b0e243712b1f69"},{"problem":122,"code":"(fn [s]\n   (->> s\n        (map (comp read-string str))\n        reverse\n        (map * (iterate (partial * 2) 1))\n        (reduce +)))","user":"5f3abcc4e4b004f08c61c52b"},{"problem":122,"code":"(fn [v]\n  ((fn bin [res result]\n     (if (empty? res) result\n       (bin (rest res) (+ (- (int (first res)) 48) (* 2 result))))) v 0))","user":"58f98231e4b0438e51c2cf4c"},{"code":"(fn [s]\n    (reduce + \n            (map (fn [x i] (* x (reduce * (repeat i 2))))\n                 (reverse (map (comp read-string str) s))\n                 (range))))","problem":122,"user":"513bb7a6e4b04402f587b77d"},{"problem":122,"code":"(fn [s]\n  (->> s\n       seq\n       (map #(if (= % \\0) 0 1))\n       (reduce #(+ % % %2))))","user":"55aa7c5ce4b0988bba2ad94d"},{"problem":122,"code":"#(->> %\n      reverse\n      (map {\\0 0 \\1 1})\n      (map-indexed (fn [i d] (* d (Math/pow 2 i))))\n      (reduce +)\n      int)","user":"57d418b4e4b0bd073c20239a"},{"problem":122,"code":"(fn [x]\n  (let [my-ints (map #(- (int %) (int \\0)) x)]\n    (second (reduce (fn [result item]\n                      (let [ exp       (first  result)\n                            prev-sum  (second result)\n                            sum       (+ prev-sum exp)\n                            next-exp  (* 2 exp)]\n                        (if (= 1 item)\n                          [ next-exp sum]\n                          [ next-exp prev-sum ])))\n                    [1 0] (reverse my-ints)))))","user":"5c24c654e4b07e362c2305a7"},{"code":"(fn[x]\n  (reduce \n    + \n    (map \n      * \n      (map #(read-string (str %)) (reverse x))\n      (iterate #(* 2 %) 1)\n    )\n  )\n)","problem":122,"user":"515919fbe4b0394f658fe229"},{"problem":122,"code":"#(reduce +\n          (map-indexed\n            (fn [idx val]\n              (if (= val \\0)\n                0\n                (reduce * (repeat idx 2)))) (reverse %)))","user":"5c6d0e51e4b0fca0c1622735"},{"problem":122,"code":"(fn [x]\n  (loop [s (reverse (seq x))\n         acc 0 \n         multiplier 1]\n    (if (empty? s)\n      acc\n      (recur (rest s) \n             (+ acc (* multiplier (int (Integer/parseInt (str (first s)))))) \n             (* 2 multiplier)))))","user":"536e56dbe4b0fc7073fd6e6c"},{"code":"(fn [s] (reduce (fn [m n] (+ (* m 2) (if (= n \\1) 1 0))) 0 s))","problem":122,"user":"52244a77e4b01819a2de42d1"},{"problem":122,"code":"(fn [val]\n  (loop [val val len (count val) acc 0]\n    (if (= len 0)\n      acc\n      (recur (rest val) (dec len) (+ acc (* (- (int (first val)) 48) (reduce * (repeat (- len 1) 2))))))))","user":"54fdbe3fe4b07d26eda61d3b"},{"code":"(fn [st] (int (reduce + (map-indexed #(* (Math/pow 2 %1) (Character/getNumericValue %2)) (reverse st)))))","problem":122,"user":"51f4d46ee4b0fca5e8b48243"},{"code":"(fn [s]\n  (apply + (map #({\\1 %2} % 0) \n                 (reverse s) \n                 (iterate #(* 2 %) 1))))","problem":122,"user":"4ef49c2c535dced4c769f238"},{"code":"#(int (reduce + (map-indexed (fn [i v] (* (Math/pow 2 i) (read-string (str v)))) (reverse %))))","problem":122,"user":"50bce014e4b0594b91591c63"},{"problem":122,"code":"(fn\n  [b]\n  (let [bin (map (fn [a] (- (int a) 48)) b)\n        pot2 (map (fn [a] (Math/pow 2 a)) (take (count bin) (iterate inc 0)))]\n    (int (reduce + (map * (reverse bin) pot2)))))","user":"59e18b9be4b08badc2a0c50f"},{"code":"(fn [s]\r\n  (reduce\r\n    (fn [acc d] (+ (* 2 acc) d))\r\n    0\r\n    (map #(- (int %) 48) (seq s))))","problem":122,"user":"4dc97aec535d5973398f9284"},{"problem":122,"code":"#(int\n   (reduce +\n    (map-indexed\n      (fn [i v] (* (- (int v) 48) (Math/pow 2 i)))\n      (reverse %))))","user":"5784ff88e4b0ebec4cfb74d4"},{"code":"(fn [s] (reduce (fn [acc n] (if (= (val n) \\1) (+ acc (key n)) acc)) 0 (zipmap (iterate (partial * 2) 1) (reverse s))))","problem":122,"user":"52a32876e4b04e0c58e87bfb"},{"problem":122,"code":"#(loop [n %1 pos (dec (count %1)) d 0]\n    (if (empty? n)\n      d\n      (recur (rest n) (dec pos) (if (= \\1 (first n))\n                                  (+ d (reduce * (repeat pos 2)))\n                                  d))))","user":"59b554cee4b05c620303ca0f"},{"problem":122,"code":"(fn [binary]\n  (apply + (map-indexed (fn [i e] (int (* e (Math/pow 2 i)))) (map #(Character/digit % 10) (reverse (seq binary))))))","user":"5eec1001e4b07c55ae4a0502"},{"problem":122,"code":"#(reduce (fn [ret x]\n\t\t\t(+ (* 2 ret) x)) \n         (map (fn [n]\n                (- (int n) 48))\n              (seq %)))","user":"5195fadee4b04c0af7ff3c11"},{"code":"reduce #(let [x (* %1 2)](if (= %2 \\0) x (inc x))) 0","problem":122,"user":"52570aeae4b0541d1855ba42"},{"problem":122,"code":"(fn read_binary_number [s] (\n                               if (= 1 (count s)) (Character/getNumericValue (last s))\n                               (+ (Character/getNumericValue (last s)) (* 2 (read_binary_number (butlast  s))))))","user":"5515b68de4b055c2f668d4ef"},{"code":"(fn [x] (apply + (map-indexed #(* (if (= \\1 %2) 1 0) \n                                     (reduce * (repeat %1 2))) (reverse (seq x)))))","problem":122,"user":"526fce6fe4b03e8d9a4a7383"},{"problem":122,"code":"(partial reduce (fn [acc x] (+ (* 2 acc) (- (int x) 48) )) 0)","user":"5c30d90de4b0d62ef62d9f22"},{"problem":122,"code":"(fn [x]\n   (int (let [s (count (reverse x))\n              arr (reverse x)]\n          (loop [i 0\n                 total 0]\n            (let [entry (nth arr i)\n                  next-val (if (= \\1 entry)\n                             (Math/pow 2 i)\n                             0)]\n              (if (>= i (- s 1))\n                (+ total next-val)\n                (recur (inc i) (+ total next-val))))))))","user":"58ed2e21e4b056aecfd47d7a"},{"problem":122,"code":"(fn my-str-to-dec [strBin]\n  (let [bin-list (fn [x] (map (comp #(- % 48) int) (seq strBin)))\n        multiplier (fn [y] (reduce * (repeat y 2)))]\n    (#(reduce + (map * %1 %2)) (bin-list strBin) (map multiplier (reverse (range 0 (count (bin-list strBin))))))))","user":"5684e200e4b04eec3ec5cfc4"},{"code":"(fn bin->dec [str] (Integer/parseInt str 2))","problem":122,"user":"4f748b54e4b044e54cd9a8fa"},{"code":"(fn [a-str]\n  (let [a-str (reverse a-str)]\n    (loop [curr (Integer/parseInt (str (first a-str)))\n           rst (rest a-str)\n           f 1\n           res 0]\n      (if (empty? rst)\n        (+ res (* f curr))\n        (recur (Integer/parseInt (str (first rst)))\n              (rest rst)\n              (* f 2)\n              (+ res (* f curr)))))))","problem":122,"user":"4e58bcd4535d8a8b8723a296"},{"code":"(fn [x] (loop [s 0 r x] (if (first r) (recur (+ (* 2 s) (Integer. (str (first r)))) (rest r)) s)))","problem":122,"user":"4e372223535deb9a81d77f39"},{"problem":122,"code":"(fn [bin]\n  (apply + (map \n            (fn [ inx num ] \n              (if (= num \\1)\n                (apply * (repeat inx 2))\n                0))\n       (range) (reverse bin))))","user":"57822efce4b0d36ec5835e91"},{"code":"(fn [s] (reduce #(+ (* %1 2) (- (int %2) (int \\0))) 0 (seq s)))","problem":122,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"code":"(fn mybin [s]\n  (loop [pow 1 \n         pos (reverse (map #(Character/getNumericValue %) s)) \n         acc 0]\n    (if (= () pos)\n      acc\n      (recur (* pow 2)\n             (rest pos)\n             (+ acc \n                (* pow\n                   (first pos)))))))","problem":122,"user":"518a8c4be4b0df82f5685903"},{"code":"(fn [s]\n  (let [bin (map #(Integer/parseInt (str %)) (reverse s))\n        exp2 #(if (zero? %) 1 (reduce (fn [n x] (* n x)) (repeat % 2)))]\n    (loop [res 0 bin bin c 0] \n      (if (empty? bin) \n        res \n        (recur (if (zero? (first bin)) res (+ res (exp2 c))) \n               (rest bin) \n               (inc c))))))","problem":122,"user":"4e71a12c535d5021c1a8964f"},{"code":"(fn [x]\n  (Integer/parseInt x 2))","problem":122,"user":"4f04a06d535dcb61093f6bd9"},{"code":"(fn [s] (apply + (mapv #(* (Integer. (str %)) %2) (reverse s) (iterate #(+ % %) 1))))","problem":122,"user":"525078b6e4b0541d1855b832"},{"code":"(fn [bs] (reduce (fn [x y] (->> (- (int y) (int \\0)) (+ (* x 2)))) 0 bs))","problem":122,"user":"5162757ee4b03cfa3774b3fe"},{"problem":122,"code":"(fn binary-parse\n  ([in] (binary-parse 0 1 (reverse (seq in))))\n  ([total factor digits-reversed]\n   (if (empty? digits-reversed)\n     total\n     (binary-parse \n      (cond\n       (= (first digits-reversed) \\1) (+ total factor)\n       :else total)\n      (* factor 2)\n      (rest digits-reversed)))))","user":"57b356c2e4b0fbc9809a277b"},{"problem":122,"code":"(fn [x]\n   (let [int_seq (map #(if (= % \\1) 1 0) x)]\n   (int (apply + (map (fn [value index]\n          (* value (Math/pow 2 index))) \n        int_seq (reverse (range (count x)))\n        )))))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":122,"code":"(comp first \n      (partial reduce\n       (fn [r s]\n        [(+ (first r) (* (second r) (java.lang.Integer/parseInt (str s))))\n         (* 2 (second r))])\n       [0 1])\n      reverse)","user":"586615e6e4b0f14aab7c8858"},{"problem":122,"code":"(fn to-num [binary]\n  (let [digits (reverse binary)\n        pow (fn [base exp] (int (Math/pow base exp)))\n        compute (fn [[power sum] digit]\n                  (if (= digit \\1)\n                    [(inc power) (+ sum (pow 2 power))]\n                    [(inc power) sum]))]\n    (get (reduce compute [0 0] digits) 1)))","user":"5483d59fe4b0e286459a1194"},{"code":"(fn [b]\n  (reduce (fn [n c] (+ (* 2 n) (if (= c \\1) 1 0))) 0 (seq b)))","problem":122,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":122,"code":"(fn binary-string-to-decimal\n  [bin-string]\n  (int (apply + (map-indexed\n    (fn [idx itm]\n      (* (read-string (str itm)) (Math/pow 2 (- (count bin-string) idx 1)))\n    )\n   bin-string)))\n)","user":"5c3440fee4b0d62ef62d9f50"},{"code":"(fn [x] (apply + (map-indexed #(* %2 (int (Math/pow 2 %1))) (reverse  (map #(- (int %1) (int \\0)) (str x))))))","problem":122,"user":"4ea1ecfa535d7eef308072bb"},{"problem":122,"code":"(fn [s]\n  (int\n   (reduce +\n     (map-indexed #(* %2 (Math/pow 2 %1))\n                  (map #(Character/digit % 10) \n                       (reverse s))))))","user":"56d4b22de4b0ea9b8538f7bb"},{"code":"(fn binary [bin]\n  (letfn [(my-exp [x y]\n            (reduce * (repeat y x)))\n          (to-num [idx ch]\n            (if (= ch \\1) (my-exp 2 idx)\n                 0))]\n    (reduce + \n      (map-indexed to-num (reverse bin)))))","problem":122,"user":"4ddb339c535d02782fcbe9f9"},{"code":"(fn [s]\n  (apply + \n    (map first\n      (filter #(= \\1 (last %))\n        (map vector\n          (map #(apply * (repeat % 2)) (range))\n          (reverse s) ))))\n)","problem":122,"user":"4e9dafe1535dbda64a6f6b89"},{"problem":122,"code":"(fn [s] (->>\n         s\n         (map (fn [c] (if (= c \\1) 1 0))) \n         reverse\n         (keep-indexed (fn [idx x] (* x (Math/pow 2 idx))))\n         (reduce + 0)\n         int))","user":"5fa17538e4b0f0ebd91b77e3"},{"code":"(fn read_bin [x] \n  (loop [in (seq x)\n         res 0]\n    (if (empty? in) \n      res \n      (recur\n        (rest in) \n        (if (= \\0 (first in))\n          (* res 2)\n          (inc (* res 2)) \n          )   \n        )   \n      )   \n    )   \n  )","problem":122,"user":"5228f870e4b0186687e23a98"},{"problem":122,"code":"(fn [x] (reduce + (map * (reverse (map #(- (int  %) (int \\0)) (seq x))) (iterate (partial * 2) 1))))","user":"57615a22e4b0994c1922fb88"},{"problem":122,"code":"#(loop [in (clojure.string/split %1 #\"\") power 1 total 0]\n   (println in power total)\n   (if (empty? in)    \n\t  total\n     (recur (butlast in) (* 2 power)  (if (= (last in) \"1\") (+ total power) total))\n   )\n)","user":"5805e70de4b0a837a8b30cd0"},{"problem":122,"code":"(fn [x]\n  (let [elements (map #(- (int %) (int \\0)) (into [] x))\n        size (count elements)\n        multipliers (reverse(take size (iterate (partial * 2) 1)))]\n    (reduce + (map * elements multipliers))))","user":"53c649d3e4b00fb29b221297"},{"problem":122,"code":"(fn [x]\n  (let [sq (map #(Character/digit % 10) (reverse (seq x)))]\n  (reduce +\n    (map-indexed #(* (int (Math/pow 2 %1)) %2) sq))))","user":"5b58d012e4b02d533a91bd71"},{"problem":122,"code":"(fn toDec ([x] \n  ;convert to char sequence, reverse so most significant comes first, convert to string then parse int\n  ;then make recursive call to other arity which does the computation.\n  (toDec (map #(Integer/parseInt (Character/toString %1)) (reverse (seq x))) 0 0))\n  ([y cnt total]\n  (if (empty? y) \n    total\n    (toDec (rest y) (inc cnt) (+ total (* (int (Math/pow 2 cnt)) (first y)))      )\n  ))\n)","user":"55d35a01e4b0e31453f64a63"},{"problem":122,"code":"(fn [bin]\n    (let [pow (fn p [x n] (loop [xx 1 nn n]\n                            (if (= 0 nn) xx\n                                (recur (* xx x) (dec nn)))))\n          char-seq (seq bin)\n          dig-seq (map #(Character/digit % 10) char-seq)\n          to-add (for [i (range (count dig-seq))]\n                   (* (nth (reverse dig-seq) i) (pow 2 i)))]\n      (apply + to-add)))","user":"5d3ae729e4b01671435dbd5d"},{"code":"(fn read-binary [st]\n  (if (empty? st)\n    0\n    (int  (+ \n           (* (-> (first st) (int) (- 48)) (Math/pow 2 (dec (count st))))\n           (read-binary (rest st))\n           ))))","problem":122,"user":"534941d1e4b084c2834f4a60"},{"problem":122,"code":"(fn [a] (apply + (map #(if (= %1 \\1) %2 0) (reverse a) (iterate #(* 2 %) 1))))","user":"59ef5280e4b0966464fe6a2b"},{"problem":122,"code":"(fn myReadBinaryNumber\n  [lst]\n  (loop [num     (Long/parseLong lst)\n         result  ()\n         exp     0]\n    (if (<= num 1)\n      (reduce + (cons (* (mod num 10) (reduce * (take exp (repeat 2)))) result))\n      (recur (quot num 10)\n             (cons (* (mod num 10) (reduce * (take exp (repeat 2)))) result)\n             (inc exp)))))","user":"5c74b043e4b0fca0c16227ce"},{"code":"(fn [n]\n  (reduce #(+ (bit-shift-left % 1) %2) \n          (map #(- (int %) (int \\0)) (seq n))))","problem":122,"user":"51040eb2e4b0432126ba9bb4"},{"code":"(fn P122 [ num ]\n  (loop [n num result 0 cont (dec (count num))]\n    (if (= cont 0)\n      (if (= (first n) \\1)\n        (int (inc result))\n        (int result))\n      (if (= (first n) \\1)\n        (recur (rest n) (+ result (Math/pow 2 cont)) (dec cont))\n        (recur (rest n) result (dec cont))))))","problem":122,"user":"5046f909e4b03b02161376b5"},{"problem":122,"code":"(fn [n]\n  (apply + \n         (map #(if (= %1 \\1) %2 0)\n              (reverse (seq n)) \n              (iterate (partial * 2) 1))))","user":"55625903e4b0c656e3ff17d7"},{"code":"(fn x [s]\n  (let [rs (reverse s) n (count s)]\n    (loop [idx 0 result 0]\n      (if (= idx n)\n        result\n        (if (= (nth rs idx) \\1)\n          (recur (+ idx 1) (+ result (apply * (repeat idx 2))))\n          (recur (+ idx 1) result)\n          )))))","problem":122,"user":"51696bcde4b03f62cda68ce7"},{"code":"(fn [x](Integer/parseInt x 2))","problem":122,"user":"51efabd3e4b0249c592fbde9"},{"problem":122,"code":"reduce (fn [r i] (+ (* 2 r) (Character/digit i 2))) 0","user":"58247423e4b051871117bec5"},{"problem":122,"code":"(fn bin2num[s]\n\t(let [rs (apply str (reverse s))]\n\t\t(loop [st rs acc (Integer. (str (first rs))) multi 2] \n\t\t\t(if (= 1 (count st))\n\t\t\t\tacc\n\t\t\t\t(recur (apply str (rest st)) (+ acc (* multi (Integer. (str (second st)))))  (* 2 multi))))))","user":"559bdf16e4b066d22e731f5a"},{"problem":122,"code":"(fn [n]\n  (apply + (map (fn [x] (apply * (repeat x 2)))\n     (keep-indexed #(if (= 1 %2) %1)\n       (mapv (comp read-string str) (reverse n))))))","user":"5a99b87ee4b0d174b936c7af"},{"problem":122,"code":"(fn [r]\n  (bit-and (Integer/parseInt r 2) 2r1111111111111111))","user":"57f2bf56e4b0511f1d294df8"},{"code":"(fn [s]\n  (apply + (map-indexed #(if (= %2 \\1) (int (Math/pow 2 %1)) 0) (reverse s))))","problem":122,"user":"5060d137e4b0dc10a69545a0"},{"code":"(fn [s]\n (reduce (fn [init a] (+ (* 2 init) a)) 0\n (map #(- (int %) 48) (vec s))))","problem":122,"user":"5322d370e4b09d4e7a9b54c7"},{"code":"(fn [s]\n  (loop [total 0 pow 0 s s]\n    (if (empty? s) (int total)\n      (recur (+ (* (Integer/parseInt (apply str (take-last 1 s))) (Math/pow 2 pow)) total) (inc pow) (drop-last s)))))","problem":122,"user":"51b41150e4b0f094dd986fac"},{"problem":122,"code":"(fn [s] (apply + (map * (take (count s) (iterate (partial * 2) 1)) (reverse (map #({\\0 0 \\1 1} %) s)))))","user":"573ce277e4b05c31a32c080b"},{"code":"(fn [bstr] (reduce (fn [acc x] (+ (* 2 acc) (if (= x \\1) 1 0))) 0 (seq bstr)))","problem":122,"user":"5175616ae4b0dea9bbfba576"},{"code":"(fn [s]\n  (let [m {\\0 0 \\1 1}\n      nums (map m s)]\n  (reduce #(+ (* 2 %1) %2) nums)))","problem":122,"user":"4e14108c535d04ed9115e7dd"},{"problem":122,"code":"(fn [s]\n  (->> (reverse s)\n            (map #(if (= \\0 %) 0 1))\n            (map-indexed (fn [idx d] (if (= 0 d) 0 (apply * (repeat idx 2)))))\n            (reduce +)))","user":"58949f8de4b00487982d525e"},{"problem":122,"code":"(fn [cs] \n  (reduce \n   (fn [acc b] \n     (+ (* 2 acc) (if (= \\0 b) 0 1)))\n   0\n   cs))","user":"57f9011ee4b0d3187e900935"},{"problem":122,"code":"#(int (apply + (map (fn [[p v]] (* (Character/digit v 10) (Math/pow 2 p))) (map-indexed vector (reverse %)))))","user":"55a3d7c7e4b0acc240e3153d"},{"problem":122,"code":"(fn my-read-binary [x]\n  (let [nassists\n          (take (count x) ((fn gen-pow\n           ([] (gen-pow 0))\n           ([n] (lazy-seq (cons (int (Math/pow 2 n)) (gen-pow (inc n))))))))\n        ncoll (map #(- (int %) (int \\0)) x)\n       ]\n    (reduce + (map * ncoll (reverse nassists)))\n    )\n  )","user":"573940e3e4b0cd1946bd106b"},{"code":"(fn [n]\r\n (int\r\n   (apply +\r\n     (map #(* (Integer/parseInt %) (Math/pow 2 %2)) (map str (reverse n)) (range)))))","problem":122,"user":"502d4ea0e4b02fc10c6c6e46"},{"problem":122,"code":"(fn [s]\n        (let [b (map {\\0 0 \\1 1} (reverse s))\n              d (iterate #(* % 2) 1)]\n          (reduce + (map * b d))))","user":"546c4377e4b00cfc9eacc177"},{"code":"(fn R [b]\n  (loop [b b n 0]\n    (if (empty? b) n\n        (recur (rest b)\n               (+ (* n 2)\n                  (if (= \\0 (first b)) 0 1))))))","problem":122,"user":"51a4416ae4b0def3c5c5868c"},{"problem":122,"code":"(fn parseBin [num]\n   (reduce +\n           (let [numbers (map #(java.lang.Integer/parseInt (str %1)) (seq num))]\n             (loop [i numbers result []]\n               (if (empty? i)\n                 result\n                 (if (= (first i) 0)\n                   (recur (rest i) (conj result 0))\n                   (recur (rest i) (conj result (reduce * (repeat (dec (count i)) 2))))))))))","user":"560c37b5e4b05f002753df2e"},{"code":"(fn rb [n]\n  (let [n (map #(Character/digit % 10) n)]\n  (apply + \n    (for [i (range (count n))]\n      (* (nth n (- (count n) 1 i) i) \n         (reduce * (repeat i 2)))))))","problem":122,"user":"4de18de7535d08e6dec9fde8"},{"code":"(fn [s]\r\n  (let [d (iterate #(* 2 %) 1)]\r\n    (reduce (fn [a b] (if (= (second b) \\1) (+ a (first b)) a))\r\n            0 (map #(vector % %2) d (reverse s)))))","problem":122,"user":"4e773be8535d324fb2983d6e"},{"code":"(fn [x]\n  (reduce\n    #(+ %2 (* 2 %))\n    (map\n      #(- (int %) (int \\0))\n      x)))","problem":122,"user":"4fa5406fe4b081705acca1ac"},{"problem":122,"code":"(fn [s] (reduce (fn [acc b] (+ (case b \\0 0 \\1 1) (* 2 acc))) 0 (seq s)))","user":"5310e968e4b08068f379ecdd"},{"problem":122,"code":"(fn [bs]\n   (reduce #(+ %1\n               (* (first %2)\n                  (second %2)))\n           0\n           (partition 2\n                      (interleave\n                        (map #(if (= \\0 %) 0 1) (reverse bs))\n                        (for [i (range)]\n                          (bit-shift-left 1 i))))))","user":"5398123ee4b0b51d73faaef3"},{"problem":122,"code":"(fn from-bin [^String binStr]\n  (let [len (.length binStr) m0 (- (int \\0))]\n    (loop [mul (dec len) acc 0 pos 0]\n      (if (= len pos)\n        acc\n        (recur (dec mul) (+ acc (bit-shift-left (+ (int (.charAt binStr pos)) m0) mul)) (inc pos))))))","user":"5773f3a9e4b0979f896515f2"},{"code":"(fn [s] \n  (reduce #(+ %1 %2) \n          0 \n\t\t  (map #(if (= \\0 %1) \n\t\t             0 \n\t\t\t\t\t (bit-set 0 %2)) \n\t\t  (reverse (seq s)) \n\t\t  (range))))","problem":122,"user":"523a9fc9e4b081681ca7adca"},{"problem":122,"code":"(fn [x]\n  (loop\n    [bits (seq x) decimal 0]\n    (if (nil? (first bits))\n      decimal\n      (recur (rest bits)\n             (+ (* 2 decimal)\n                (if (= \\0 (first bits)) 0 1))))))","user":"55f73078e4b06e875b46cea4"},{"problem":122,"code":"(fn [s] \n  (->> s\n       reverse\n       (map {\\0 0 \\1 1}) \n       (map-indexed (fn [i x] (* x (Math/pow 2 i)))) \n       (apply +) \n       int))","user":"52950ab6e4b02ebb4ef7501a"},{"code":"(fn [x]\n  (. Integer parseInt x 2))\n\n;#(Integer/parseInt % 2)","problem":122,"user":"4f849f76e4b033992c121c36"},{"code":"(fn [s]\n  (reduce +\n  (for [[n x] (map-indexed vector (reverse s))]\n    (* (Integer/parseInt (str x)) (reduce * (repeat n 2))))))","problem":122,"user":"500cb910e4b05f7c30cfa698"},{"code":"(fn [binary-string]\n\t(loop [index 0 result 0 bits (reverse (map #(Character/getNumericValue %) (seq binary-string)))]\n\t\t(if (nil? (first bits)) result\n\t\t\t(recur \n\t\t\t\t(inc index)\n\t\t\t\t(+ result (* (first bits) (reduce * (repeat index 2))))\n\t\t\t\t(rest bits)\n\t\t\t)\n\t\t)\n\t)\n)","problem":122,"user":"4e723bcb535d5021c1a8965c"},{"code":"(fn cvt\n [s]\n  (let [\n        ss (seq s)\n        todec {\\0 0, \\1 1}\n        ]\n    (reduce (fn [acc x] (+ (* 2 acc) (todec x))) 0 ss)\n  )\n\n)","problem":122,"user":"4fb03cf4e4b081705acca262"},{"code":"(fn [s]\n(apply (comp int +)\n(map\n  #(* %1 %2)\n  (map #(Integer/parseInt (str %)) s)\n  (take (count s) (iterate (partial * 0.5) (Math/pow 2 (dec (count s)))))\n  )\n))","problem":122,"user":"52593207e4b0cb4875a45cd3"},{"problem":122,"code":"(fn [s]\n    (loop [s s acc 0]\n      (if (empty? s)\n        acc\n        (recur (rest s) (+ (* acc 2) (- (int (first s)) (int \\0)))))))","user":"551a21ece4b091ff45eda993"},{"problem":122,"code":"(fn \n  [s]\n  \t (->> (reverse s)\n     (map-indexed vector)\n     (filter #(= \\1 (last %)))\n         (map #(first %))\n         (map #(apply * (repeat % 2)))\n         (reduce +)))","user":"5586f418e4b059ccff29b1de"},{"code":"(fn [b]\n  (reduce \n    (fn [p v] (+ p (* (- (int (first v)) 48) (Math/pow 2 (last v))))) \n    0 \n    (partition 2 (interleave (seq b) (reverse (range (count b)))))))","problem":122,"user":"4f017593535dcb61093f6a36"},{"code":"(comp\n  (fn f [[h & t]]\n    (if h\n      (+\n        ({\\1 1 \\0 0} h)\n        (* 2 (f t)))\n      0))\n  reverse)","problem":122,"user":"4ee82539535d93acb0a66878"},{"code":"(fn [n]\n  (reduce + (map-indexed\n    (fn [p d] (* (Character/getNumericValue d) (Math/pow 2 p)))\n    (reverse n))))","problem":122,"user":"4ec5a5f9535d6d7199dd36ad"},{"code":"(fn read-binary [s]\r\n    (let [power-of-two-seq (map #(int (Math/pow 2 %)) (iterate inc 0))]\r\n      (reduce (fn [t [c power-of-two]] (if (= c \\1) (+ t power-of-two) t))\r\n              0\r\n              (map vector (reverse s) power-of-two-seq))))","problem":122,"user":"4f149e0f535d64f60314643d"},{"problem":122,"code":"(fn\n  [binary]\n    (loop [seqy (reverse binary), pos 0, total []]\n      (if (empty? seqy)\n        (reduce + total)\n        (if (= (first seqy) \\0)\n          (recur (rest seqy) (inc pos) (conj total 0))\n          (if (= pos 0)\n            (recur (rest seqy) (inc pos) (conj total 1))\n            (recur (rest seqy) (inc pos) (conj total (reduce * (repeat pos 2)))))))))\n        \n        ;(recur (butlast seqy) (inc pos) (conj total (reduce * (repeat (* (read-string (last seqy)) 2) pos)))))))\n;(digit * 2) ** (position in reversed vect eg: 0, 1 , 2 ) ;(reduce * (repeat n x)) x**n","user":"59369515e4b02506e01a297e"},{"code":"(fn [x] \n  (apply + (map * (iterate #(* 2 %) 1) (map #(- % 48 ) (map int (reverse (seq x)))))))","problem":122,"user":"515e8ce2e4b049add99a053d"},{"problem":122,"code":"(fn [x] (loop [bits (reverse (seq x)) acc 0 p 1] (if (empty? bits) acc (recur (rest bits) (+ acc (if (= (first bits) \\1) p 0)) (* 2 p)))))","user":"5515649fe4b055c2f668d4e3"},{"code":"(fn [s]\n  (apply +\n    (map *\n      (map #(Integer/parseInt (str %)) (reverse s))\n      (iterate #(* 2 %) 1))))","problem":122,"user":"5012ec0ae4b0c87326002230"},{"code":"#(int (reduce + (map-indexed (fn [idx itm] \n               (let [x  (->> itm char int (+ -48))]\n                 (if (= x 0)\n                   0\n                   (Math/pow 2 idx)\n                   )\n                 )) (reverse %))))","problem":122,"user":"5008d149e4b0144d4f561e41"},{"problem":122,"code":"(fn [x] (loop [bstr x\n         position 0\n         sum 0]\n    (cond\n      (= \"\" bstr) sum\n      :else (recur (apply str (butlast bstr))\n                   (inc position)\n                   (+ sum\n                      (* (read-string (str (last bstr)))\n                         (reduce * (repeat position 2))))))))","user":"4eb6f065535d7eef30807372"},{"code":"(fn [s]\n  (reduce +\n          (map #(if (= \\1 %1) (Math/pow 2 %2) 0)\n               s\n               (-> s count range reverse))))","problem":122,"user":"4dda44f2535d02782fcbe9f1"},{"problem":122,"code":"(fn binary->int [bin]\n  (:sum (reduce (fn [{:keys [sum power]} digit]\n                  (if (= (str digit) \"0\")\n                    {:sum sum :power (inc power)}\n                    {:sum (+ sum (reduce * (repeat power 2)))\n                     :power (inc power)}))\n                {:sum 0 :power 0}\n                (reverse bin))))","user":"5d49ec5ee4b0776584bd6f1c"},{"code":"(fn [s] \n  (reduce + \n    (map * \n      (reverse (for [c s] (- (int c) 48)))\n      (iterate (partial * 2) 1))))","problem":122,"user":"4efcac3a535de96065cf507e"},{"problem":122,"code":"(fn [binary]\n   (loop [num (Long/parseLong binary) sum 0 i 0]\n     (if (zero? num)\n       sum\n       (recur (long(/ num 10)) (+ sum (* (long (Math/pow 2 i))  (mod num 10))) (inc i))\n       )\n     )\n   )","user":"5fd361f2e4b07e53c2f3f04e"},{"problem":122,"code":"(fn read-bin \n  ([str] (read-bin (seq str) 0))\n  ([str exp]\n   (letfn [(rcr [] (read-bin (drop-last str) (inc exp)))]\n     (case (last str)\n       nil 0\n       \\0 (rcr)\n       (+ (apply * (repeat exp 2))\n          (rcr))))))","user":"5ea6fe98e4b00a66d4a951b2"},{"code":"(fn [bin]\n  (->> bin\n       (map #(- (int %) 48))\n       (reduce #(+ % % %2) 0)))","problem":122,"user":"510db6cde4b078ea71921145"},{"code":"#(loop [s % x 1 n 0] (if (empty? s) n (recur (butlast s) (* x 2) (if (= \\0 (last s)) n (+ x n)))))","problem":122,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":122,"code":"(fn [in-str]\n  (let [reducer (fn [accum elem]\n                  (assoc accum\n                    :digit-value (* 2 (:digit-value accum))\n                    :total (+ (* (:digit-value accum) (Integer/parseInt (str elem)))\n                              (:total accum))))]\n    (:total (reduce reducer {:digit-value 1 :total 0} (reverse in-str)))))","user":"5027f37be4b01614d1633ff1"},{"problem":122,"code":"(fn [bs]\n  (reduce +\n          (map *\n               (map #(- (int %) (int \\0)) bs)\n               (reverse (take (count bs) (iterate #(* 2 %) 1))))))","user":"54302691e4b0dad94371f2d7"},{"problem":122,"code":"(fn [s]\n  (let [x (map #(Character/digit %1 10) (reverse (seq s)))\n       exp (range (count x))\n       pow (map #(* %1 (java.lang.Math/pow 2 %2)) x exp)]\n   (.intValue (reduce + pow))))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":122,"code":"(fn [bstr]\n  (first\n    (reduce (fn [acc vchar]\n              [(+ (first acc) (* (- (int vchar) 48) (last acc)))\n               (* (last acc) 2)])\n            [0 1]\n            (reverse (seq bstr)))))","user":"5fb3a096e4b08cb800c85b35"},{"code":"(fn [s] (reduce #(+ (* 2 %) %2) (map (comp #(- % 48) int) s)))","problem":122,"user":"4eaa96e1535d7eef3080730d"},{"problem":122,"code":"(fn [x] (reduce + (map * (iterate (partial * 2) 1 ) ( map #(Character/digit %1 10) (reverse x)) )))","user":"53d63e6ce4b0e771c3025454"},{"code":"(fn [s]\n  (java.lang.Integer/parseInt s 2))","problem":122,"user":"538d464ee4b0b51d73faae69"},{"problem":122,"code":"#((fn bin [s]\n    (if (empty? s) 0\n      (if (= \\1 (first s))\n        (+ 1 (* 2 (bin (rest s))))\n        (* 2 (bin (rest s)))))) (reverse (seq %)))","user":"52e16face4b09f7907dd1421"},{"problem":122,"code":"(fn my-fun [str-in ] (reduce + (map-indexed (fn [ind val] (* (reduce * (repeat ind 2)) val)) (reverse (map #(Character/digit %1 10) str-in)))))","user":"571d9669e4b0145328a7627f"},{"code":"(fn [s] (int (apply + (map-indexed #(* (Math/pow 2 %1) (read-string (str %2))) (reverse s)))))","problem":122,"user":"4ee528fb535d1385b2869d87"},{"problem":122,"code":"(fn [binstr]\n  (reduce-kv \n   (fn [nr k v] \n     (+ \n     nr\n     (if (= \\1 v)\n       (apply * (repeat k 2))\n       0)))\n   0 \n   (into [] (reverse binstr))))","user":"5a0ef454e4b04bbd27e6d9fa"},{"problem":122,"code":"(fn [b]\n  (loop [result 0 mult 1 data (reverse b)]\n    (if (empty? data)\n      result\n      (recur (+ result (* mult (if (= (first data) \\1) 1 0)))\n             (* mult 2)\n             (rest data)))))","user":"5df175bce4b03c219ef1a34d"},{"code":"(fn [n] (reduce #(+ (* (Integer/parseInt (str (%2 0))) (%2 1)) %) 0 (map vector n (reverse (map #(apply * %) (map #(repeat % 2) (range (count n))))))))","problem":122,"user":"516f06dce4b06aac486e5b39"},{"problem":122,"code":"(fn [xs]\n  (int\n   (reduce +\n           (map-indexed\n            (fn [index item] (* (Math/pow 2 index) (- (int item) 48)))\n            (reverse (seq xs))))))","user":"570eeca5e4b0b0fb43fd06fb"},{"code":"(fn [s]\n   \n   (int (reduce + (map-indexed (fn [i c]\n                  (* (Integer/parseInt (str c)) (Math/pow 2 i))) (reverse s))))\n   \n   )","problem":122,"user":"50d3b03fe4b030b634c368b9"},{"code":"(fn [str]\n  (->> str\n    (map #(- (int %) (int \\0)))\n    (reduce #(+ (* 2 %1) %2))))","problem":122,"user":"4fb12b35e4b081705acca275"},{"problem":122,"code":"(fn [str]\n  (reduce + (map *\n                 (reverse (map #(Character/getNumericValue %) str))\n                 (iterate #(* 2 %) 1)\n                 )))","user":"53f053ebe4b0742d9025b0d3"},{"code":"reduce #(+ (* 2 %) (- (int %2) 48)) 0","problem":122,"user":"4fa6d532e4b081705acca1be"},{"problem":122,"code":"(fn [binary] \n  (reduce +\n  (map\n    *\n    (map #(- (int %) 48) (reverse binary))\n    (iterate #(* 2 %) 1))\n\n          )\n  )","user":"5f58db95e4b0a0bc16850a9a"},{"problem":122,"code":"(fn [x] (reduce + \n\t(map-indexed \n     #(* %2 (reduce * (repeat %1 2)))\n     (reverse (map #(Integer/parseInt (Character/toString %)) (sequence x)))\n)))","user":"552456e3e4b0882d96d091c2"},{"problem":122,"code":"(fn foo\n  ([raw] (foo (seq raw) 0 1))\n  ([work total mult]\n   (let [least (last work)]\n     (if (= (empty? work) true)\n       total\n       (foo (drop-last work) (if (= least \\1) (+ mult total) total) (* mult 2))))))","user":"5f19ecbae4b091ba50b4dbdf"},{"code":"reduce #(+ %1 %1 (- (int %2) 48)) 0","problem":122,"user":"51cbdee1e4b08d8387cbede1"},{"problem":122,"code":";#(->> % seq (map int) reverse ((fn bin [n ds] (if (empty? ds) 0 (+ (* (first ds) (Math/pow 2 n)) (bin (inc n) (rest ds)) ) )) 0) )\n;#(let [binr (fn bin ([ds] (bin 0 ds)) ([n [d & ds]]  (if (nil? d) 0 (+ (* d (Math/pow 2 n)) (bin (inc n) ds)))))] (->> % seq (map int) reverse binr))\n;(fn [s] (->> s seq (map-indexed (fn [i c] (-> c int (* (Math/pow 2 i)) ) ) ) (reduce +) ))\n;(fn [s] (Integer/parseInt s 2))\n#(->> % (str \"2r\") read-string)","user":"5d9e7971e4b000c986472bc1"},{"problem":122,"code":"#(reduce (fn [res x] \n           (if (= x \\1) \n             (+ (* 2 res) 1)\n             (* 2 res))) 0 %)","user":"564127a9e4b08d4f616f5ef3"},{"problem":122,"code":"(fn [s]\n  (Long/parseLong s 2))","user":"510a3cd4e4b06956752d35ad"},{"problem":122,"code":"(fn [bstr]\n  (let [pairs (map-indexed vector (reverse bstr))]\n    (int (reduce + (map (partial apply #(* (- (int %2) 48) (Math/pow 2 %1))) pairs)))\n    )\n  )","user":"560d4994e4b05f002753df3c"},{"code":"(fn bin-to-val\n          [x]\n        (let [nums (map #(Character/digit % 10) (reverse x))]\n          (loop [i 0\n                 ans 0\n                 nums nums]\n             (if (empty? nums)\n                 ans\n                 (recur (inc i) (+ ans (* (first nums) (Math/pow 2 i))) (rest nums))))\n         ))","problem":122,"user":"4fb591aee4b081705acca2c0"},{"code":"(fn [x]\n  (Integer/valueOf x 2))","problem":122,"user":"52b0323ee4b0c58976d9acc6"},{"code":"(fn [coll]\n  (reduce (fn [i c] (+ (* 2 i) (if (= c \\1) 1 0))) 0 coll))","problem":122,"user":"50e3cf55e4b01912b3285c45"},{"code":"(fn this \n  ([s] (this s 0))\n  ([s v]\n    (if (empty? s)\n      v\n      (this (rest s) (+ (* 2 v) (- (int (first s)) (int \\0)))))))","problem":122,"user":"4ec12577535dfed6da9c6da8"},{"problem":122,"code":"(fn binary\n  ([s] (binary (map #(- (int %) (int \\0)) (reverse s)) 0 1))\n  ([s n mult]\n    (if (empty? s)\n      n\n      (recur (rest s) (+ n (* mult (first s))) (* mult 2)))))","user":"56e4991fe4b03a7c14b85a4f"},{"code":"reduce #(+ (* 2 %) (int %2) -48) 0","problem":122,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":122,"code":"(fn [num]\n  (->> (seq num)\n       (map #(Integer/parseInt (str %)))\n       reverse\n       (map-indexed (fn [idx item] (int (* item (Math/pow 2 idx)))))\n       (reduce +)))","user":"604a3daee4b02d28681c77f2"},{"problem":122,"code":"#(let [\n         digits (map-indexed vector (for [i (reverse (seq %))] (Character/digit i 10)))\n         pows (for [[i n] digits] (* n (Math/pow 2 i)))\n         ]\n\t(int (reduce + pows))\n    )","user":"55efc44ee4b066087aa9453e"},{"code":"(fn [x]\n  (let [n (->> x seq (map str) reverse (map #(Integer/parseInt %)))\n        m (for [y (-> n count range)]\n               (int (Math/pow 2 y)))]\n    (reduce + (map * m n))))","problem":122,"user":"51baff1be4b0fe3ecfb46443"},{"code":"(comp read-string (partial str \"2r\"))","problem":122,"user":"4e0febe6535d04ed9115e7be"},{"problem":122,"code":"(fn bin [num]\n  (let [s (map (comp read-string str) (seq num))]\n   (apply + (map #(* %1 %2)\n    s\n  (reverse (conj  (take (- (count s) 1) (iterate #(* % 2) 2)) 1))))))","user":"5829d588e4b051871117bf4a"},{"problem":122,"code":"(fn [s]\n    (loop [result 0 nums (reverse (map {\\0 0 \\1 1} s)) place 1]\n      (if\n        (empty? nums)\n        result\n        (recur\n          (+ result (* (first nums) place))\n          (rest nums)\n          (* place 2)))))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn [s]\n  (reduce (fn [N c]\n    (+ (* N 2) (if (= c \\0) 0 1)))\n    0 s))","problem":122,"user":"4faa9593e4b081705acca1f9"},{"problem":122,"code":"(fn [s0] (loop [s s0, r 0] \n            (if (empty? s) r,\n                (recur (rest s)\n                       (+ (* r 2) \n                          (- (int (first s)) 48))))))","user":"515cf9b5e4b00901442db1d4"},{"problem":122,"code":"(fn [x]\n     (let [lst (vec (reverse (map #(Character/getNumericValue %) x)))]\n         (reduce + (map #(* (lst %) \n                  (int (Math/pow 2 %))) \n              (range (count x))))))","user":"5f77890ae4b02876ed9fd0b9"},{"problem":122,"code":"(fn [bs]\n  (first (reduce (fn [[z e] x] [(+ z (* x e)) (* 2 e)]) [0 1] (map #(if (= \\0 %) 0 1) (reverse bs)))))","user":"58cf00c8e4b03c36ff7e58ac"},{"code":"(fn [x] (reduce #(+ (* % 2) (if (= %2 \\1) 1 0)) 0 x))","problem":122,"user":"4f7e07f4e4b06e829148e1c9"},{"code":"(fn [s]\n  (let [nums (iterate #(* 2 %) 1)]\n    (apply + (map * nums (map #(Integer. (str %)) (reverse s))))))","problem":122,"user":"4e72187b535d5021c1a8965b"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [accumulator current-item]\n            (+ (* accumulator 2)\n               (Integer/parseInt (str current-item))))\n          0\n          s)\n  )","user":"5d07989ee4b0cc9c915881fb"},{"problem":122,"code":"(fn [n]\n  (loop [t 0 tmpn (reverse n) c 0]\n    (if (empty? tmpn)\n      (int t)\n      (if (= \\1 (first tmpn))\n        (recur (+ t (Math/pow 2 c)) (rest tmpn) (inc c))\n      \t(recur t (rest tmpn) (inc c))\n        ))))","user":"59368ccae4b02506e01a2979"},{"problem":122,"code":"(fn [s] (Integer/valueOf s 2))","user":"570e6974e4b0b0fb43fd06ef"},{"code":"#(reduce + (map (fn [n l] (if (= l \\1) n 0)) (iterate (fn [x] (* 2 x)) 1) (reverse %1)))","problem":122,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"problem":122,"code":"(fn read-b [str]\n  (->> str\n       reverse\n       (map-indexed #(if (= %2 \\1)\n                       ((fn ** [x n] (reduce * (repeat n x))) 2 %1)\n                       0))\n       (apply +)))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":122,"code":"(fn [bin-str]\n   (reduce (fn [acc x] (+ (bit-shift-left acc 1) x)) 0 (map #(- (int %) 48) bin-str)))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"problem":122,"code":"#(loop [st (reverse %)\n        sum 0\n        n 1]\n\t(if (empty? st)\n      sum\n      (recur (rest st)\n             (case (first st)\n               \\0 sum\n               \\1 (+ sum n))\n             (* n 2))))","user":"551ed214e4b08d5046aa8a4d"},{"code":"(fn [s]\r\n  (->> s\r\n      reverse \r\n      (map-indexed #(* (- (int %2) 48) (Math/pow 2 %)))\r\n      (reduce +)\r\n      int))","problem":122,"user":"4f58d92fe4b0a7574ea71858"},{"code":"(fn [sn]\n  (reduce (fn [r b] (+ (* r 2) (if (= \\1 b) 1 0)))\n          0\n          sn))","problem":122,"user":"5063fe48e4b075d771da6f9e"},{"code":"#(reduce + (map * (reverse (map (comp read-string str) %)) (iterate (partial * 2) 1)))","problem":122,"user":"4f7b6f12e4b06e829148e1a5"},{"code":"(fn [bin]\n  (loop [pos 1\n         in (map #(Integer/parseInt (str %)) (reverse bin))\n         out 0]\n    (if (empty? in)\n      out\n    (recur (* pos 2) (rest in) (+ out (* pos (first in)))))\n  )\n)","problem":122,"user":"5204f2b1e4b0bf4f1882c7f5"},{"problem":122,"code":"(fn reader\n  [binary-string]\n  (read-string (str \"2r\" binary-string)))","user":"5e4e3c31e4b027a2e10ac0ad"},{"problem":122,"code":"(fn test45 [s1]\n  (apply +(map * (take (count s1) (iterate (partial * 2) 1)) (reverse (map #(- (int %1) (int \\0)) (seq s1))))))","user":"5804d5afe4b0a837a8b30cad"},{"code":"(fn [b] (apply + (map #(* %1 %2) (iterate (partial * 2) 1) (map #(if (= \\1 %) 1 0) (reverse b)))))","problem":122,"user":"4ea7999e535d7eef308072ee"},{"code":"(fn [s] (first \n  (reduce\n    (fn [[n base] bit]\n      [(+ n (* base bit))\n       (* 2 base)])\n    [0 1] (map #(Long. (str %)) (reverse s)))))","problem":122,"user":"4fdec88fe4b05e33b9224f8e"},{"problem":122,"code":"(fn[s] (apply + (map * (map #(Integer. (str %)) (reverse s)) (iterate (partial * 2) 1))))","user":"5280539ce4b0757a1b1713f3"},{"problem":122,"code":"(fn[s] (Integer/parseInt s 2 ))","user":"55757e81e4b05c286339e063"},{"code":"(fn [s] (read-string (str \"2r\" s)))","problem":122,"user":"4f2893d0e4b0d6649770a019"},{"code":"(fn [s] (apply + (map-indexed #(* (- (int %2) 48) (Math/pow 2 %)) (reverse s))))","problem":122,"user":"4f0478b0535dcb61093f6bcb"},{"code":"(fn decimalize [instr]                                                                                                                           \n    (loop [bindigits (seq instr)                                                                                                                   \n           accumulator 0]                                                                                                                          \n      (if (empty? bindigits)                                                                                                                       \n        accumulator                                                                                                                                \n      (if (= (first bindigits) \\1)                                                                                                                 \n        (recur (rest bindigits)                                                                                                                    \n               (+ (* 2 accumulator)1))                                                                                                             \n        (recur (rest bindigits)                                                                                                                    \n               (* 2 accumulator))))))","problem":122,"user":"50057f23e4b0678c553fc466"},{"problem":122,"code":"#(apply + (map-indexed (fn [i v]\n                         (if (= \\1 v)\n                           (int (Math/pow 2 i))\n                           0))\n                       (reverse %)))","user":"4e38f245535deb9a81d77f3e"},{"problem":122,"code":"(fn [s]\n  (loop [coll []\n         cnt 0\n         input (reverse s)]\n          (if (empty? input)\n            (reduce + coll)\n            (recur\n              (conj coll (* (int (Math/pow 2 cnt)) (- (int (first input)) 48)))\n              (inc cnt)\n              (rest input)))))","user":"5ad76df9e4b0ea6055cfac18"},{"code":"(fn [n]\n  (apply +\n    (map *\n      (map #(Integer/valueOf (str %)) (reverse n))\n      (iterate #(* 2 %) 1))))","problem":122,"user":"4f6845d2e4b07046d9f4ef74"},{"problem":122,"code":"(fn bin-rdr [n]\n  (if (empty? n)\n    0\n    (+ (if (= \\1 (first n)) \n         (int (Math/pow 2 (count (rest n)))) 0) \n         (bin-rdr (rest n)))))","user":"52540bcce4b0541d1855b952"},{"problem":122,"code":"(fn [s] (reduce \n         (fn [a b] (+ (case b \\1 1 \\0 0) (* a 2))\n         ) 0 (vec s)))","user":"571aad45e4b07c98581c3b59"},{"problem":122,"code":"(fn \n  [n] \n  (Integer/parseInt n 2)\n  )","user":"57f81532e4b0d3187e900914"},{"code":"#(int (loop [c (count %), i (dec c), s 0 ]\n  (if (< i 0)\n    s\n  \t(recur c (dec i) (+ s (if (= \\0 (get % i)) 0 (Math/pow 2 (- c i 1))))))))","problem":122,"user":"51eca2ace4b069f463c22cd0"},{"problem":122,"code":"(fn [s] \n  (int (apply + (map-indexed \n                 (fn [idx itm] \n                   (* itm (Math/pow 2 idx))) \n                 (map #(Integer/parseInt %) \n                      (reverse (map str (seq s))))))))","user":"5078dedae4b08327cd804a5d"},{"code":"(fn [num]\n  (letfn [(helper [acc [x & xs :as ls]]\n                  x\n                  (if (empty? ls) \n                    0\n                    (+ (* acc x) \n                       (helper (* 2 acc) xs ))))]\n    (helper 1 \n            (reverse \n             (map #(read-string (str %)) num )) )))","problem":122,"user":"51427a8be4b0b50abeb46b37"},{"problem":122,"code":"#(loop [p (reverse (seq %)) i 0 r 0]\n   (if (empty? p)\n     r\n     (recur (next p) (inc i) (if (= \\1 (first p)) (+ r (apply * (repeat i 2))) r))))","user":"574abbfbe4b02ea114799200"},{"problem":122,"code":"(fn binary [x]\n  (int (reduce (fn [total next] (let [[exp base] next] (+ total (if (zero? base) 0 (Math/pow 2 exp))))) 0\n  (zipmap (iterate inc 0)\n          (reverse (map (fn [digit] (if (= \\1 digit) 1 0)) (seq x)))))))","user":"5d84545ee4b0915913b1d38b"},{"code":"(fn[n] (apply + (map #(* %1 (int (Math/pow 2 %2))) (map #(- (int %1) 48) n) (reverse (range (count n)))) ))","problem":122,"user":"50b25f2ce4b03ea88043355f"},{"code":"#(->> (str \"2r\" %) read-string)","problem":122,"user":"51105c7fe4b04c71fce993ef"},{"problem":122,"code":"(fn [input]\n  (loop [vals (reverse input)\n         binary-pos 1\n         result 0]\n    (if (empty? vals) result\n        (let [next-binary-pos (* binary-pos 2)\n              val (first vals)]\n          (if (= val \\0) (recur (rest vals) next-binary-pos result)\n              (recur (rest vals) next-binary-pos (+ result binary-pos)))))))","user":"596aaeefe4b069c0a1a19808"},{"code":"#(loop [b (seq %) n 0] (if (empty? b) n (recur (rest b) (\n(if (= \\1 (first b)) inc identity) (* 2 n)))))","problem":122,"user":"4db3a0e5535df7e46ed9b6d0"},{"problem":122,"code":"(fn [listaBinario]\n(Integer/parseInt listaBinario 2))","user":"59e63a2ce4b08badc2a0c569"},{"problem":122,"code":"(fn [s] \n    (bit-shift-right\n     (reduce (fn [i bit] \n               (bit-shift-left (if (= bit \\1) (bit-set i 0) i) 1))\n             0 s)\n     1))","user":"55568a7de4b0deb715856e1c"},{"problem":122,"code":"#(reduce (fn [h l] (+ (* 2 h) l)) 0 (map (fn [c] (- (int c) (int \\0))) (seq %)))","user":"57e6997ee4b0bfb2137f5af0"},{"code":"(fn [s]\n  (reduce + (map #(* % %2)\n                 (iterate (partial * 2) 1) ; powers of 2 (1 2 4 8..)\n                 (map #(- (int %) (int \\0)) ; [0 1 0 1]\n                      (reverse s))))) ; \"1010\" => [\\0 \\1 \\0 \\1]","problem":122,"user":"500900dee4b0144d4f561e42"},{"code":"(fn readbin [x]\n  (loop [mystr x\n         exp 0\n         acc 0]\n   (if (not-empty mystr)\n    (recur \n      (.substring mystr 0 (dec (count mystr)))\n      (inc exp)\n      (+ acc (* (Math/pow 2 exp) (Integer/parseInt (str (last mystr))))))\n    acc)\n  )\n)","problem":122,"user":"4f036d6e535dcb61093f6ac0"},{"code":"(fn [s] (reduce + (map-indexed #(if (= \\1 %2) (reduce * (repeat %1 2)) 0) (reverse (seq s)))))","problem":122,"user":"501688f7e4b052339a490e7a"},{"problem":122,"code":"(fn sbin2int [in]\n  (loop [in in cnt 0]\n    (if (empty? in)\n      cnt\n      (recur \n       (rest in) \n       (+ \n        (* 2 cnt) \n        (if (=(first in) \\1) 1 0)\n       )\n      )\n    )\n  )\n)","user":"562add6de4b00e49c7cb4834"},{"code":"(fn parse-binary2 [bin-str]\n  (apply +  \n    (map-indexed \n      #(if (= %2 \\1) (apply * (repeat %1 2)) 0)\n      (reverse bin-str))))","problem":122,"user":"4e5f08c7535d8a8b8723a2da"},{"problem":122,"code":"(fn [s]\n(apply +\n (map *\n  (map {\\0 0 \\1 1} (rseq (vec s)))\n  (iterate #(* 2 %1) 1))))","user":"54580586e4b01be26fd74616"},{"problem":122,"code":"(fn [in]\n  (loop [s in\n         p 1\n         acc 0]\n    (prn s p acc)\n    (cond\n      (empty? s)\n      acc\n\n      (= \\1 (last s))\n      (recur (butlast s) (* 2 p) (+ acc p))\n\n      :else\n      (recur (butlast s) (* 2 p) acc)\n    )\n))","user":"55916764e4b0604b3f94d57b"},{"problem":122,"code":"(fn\n    [st]\n    (loop\n        [s (vec (reverse (re-seq #\"[^,]\" st)))\n         r 0\n         i 0]\n        (cond\n            (= i (count s)) (int r)\n            (= (nth s i) \"1\") (recur s (+ r (int (Math/pow 2 i))) (inc i))\n            (= (nth s i) \"0\") (recur s r (inc i))\n            )\n        )\n    )","user":"6074f5ede4b069485764de52"},{"code":"#(loop [data (reverse %) index 0 result 0] (if (not (seq data)) result (recur (rest data) (inc index) (+ result (* ((fn [c] (case c \\1 1 \\0 0)) (first data)) (nth (iterate (partial * 2) 1) index))))))","problem":122,"user":"5032b398e4b00c0952a257eb"},{"code":"#(apply +\n       (map-indexed (fn [index item] (int (* (read-string (str item))\n                                             (Math/pow 2 index)))) (reverse %)))","problem":122,"user":"51b86a0fe4b09e0e347b2e78"},{"problem":122,"code":"(fn [s]\n  (reduce #(+ (- (int %2) (int \\0)) (* 2 %1)) 0 (seq s)))","user":"559454f2e4b0c79f6e1db952"},{"problem":122,"code":"(fn bin-to-dec [bin]\n    (int (reduce + (let [x (reverse (map #(Math/pow 2 %) (range (count bin))))\n          y (map #(Integer/parseInt (str  %)) bin)]\n\n      5\n\n      (map #(if (= 1 (nth y %)) (nth x %) 0) (range (count y)))\n\n      ))))","user":"5a05a807e4b01bb0ae8afdb8"},{"code":"(comp (fn f[[s :as ls]] (cond (empty? ls) 0\n                                     (= s \\1) (+ (reduce * (repeat (dec (count ls)) 2)) (f (rest ls)))\n                                     :else (f (rest ls)))) seq)","problem":122,"user":"5301157ae4b0d8b024fd3717"},{"problem":122,"code":"(fn bn\n  ([s1]\n   (bn (reverse s1) 1))\n  ([s1 ex]\n   (if (empty? s1)\n     0\n     (if (= \\1 (first s1))\n       (+ ex (bn (next s1) (* 2 ex)))\n       (bn (next s1) (* 2 ex))))))","user":"56a1fce9e4b0542e1f8d14b7"},{"code":"(partial reduce #(+ (bit-shift-left %1 1) (- (int %2) (int \\0))) 0)","problem":122,"user":"51c19873e4b0d204dbe2ca0d"},{"code":"#(loop [num 0 str %] \n     (if (empty? str) \n          num \n         (recur \n           (if (= \\1 (first str)) \n               (+ num (apply * (take (- (count str) 1) (repeat 2)))) \n               num) \n          (rest str))))\n;Because (apply * ()) returns 1, this works...\n;could also replace the ugly (apply * (take (- (count str) 1) (repeat 2))) with (Math/pow","problem":122,"user":"524469dee4b0d8acf9ed6a9d"},{"problem":122,"code":"(fn [st]\n  (int (\n    (fn loopy [sum pos coll]\n      (cond\n       (empty? coll) sum\n       (= \\1 (first coll)) (recur (+ sum (Math/pow 2 pos)) (inc pos) (rest coll))\n       (= \\0 (first coll)) (recur sum (inc pos) (rest coll))\n      )\n    )\n    0 0 (reverse st)\n  ))\n)","user":"5da975b9e4b000c986472c32"},{"code":"(fn [sx] (loop [x sx acu 0] (if (seq x) (recur (rest x) (+ (* acu 2) (if (=(first x) \\1) 1 0))) acu)))","problem":122,"user":"511a0374e4b06c8af011181a"},{"problem":122,"code":"(fn [x] \n  (reduce + \n    (map #(if (= \\0 %1) 0 %2)\n       (reverse (seq x)) \n       (iterate (partial * 2) 1))))","user":"574a71b7e4b02ea1147991fb"},{"problem":122,"code":"(fn [s] (apply + (map * (iterate #(* 2 %) 1) (reverse (map read-string (re-seq #\"\\d{1}\" s))))))","user":"580c8fcee4b0849f6811b721"},{"code":"(fn read-bin [s]\n  (reduce (fn [r [n b]] (+ r (* n b)))\n          0\n          (partition 2\n                     (interleave (iterate (partial * 2) 1)\n                                 (reverse (map #(Integer/parseInt %) (re-seq #\"\\d\" s))))))\n)","problem":122,"user":"4e720985535d5021c1a89655"},{"problem":122,"code":"#(reduce + 0 \n        (map * (map (comp (fn [x] (- x 48)) int) (reverse %))\n\t\t(iterate (partial * 2) 1)))","user":"5e13a6b7e4b099d064963001"},{"problem":122,"code":"(fn [s]\n  (reduce\n    #(+ (* 2 %1) (if (= %2 \\1) 1 0))\n    0\n    s))","user":"5739cbe4e4b0cd1946bd107c"},{"problem":122,"code":"(partial reduce #(+ (* 2 %1) ({ \\1 1 \\0 0 } %2)) 0)\n\n;(fn [bits]\n;  (loop [bs bits\n;         result 0]\n;    (if (empty? bs)\n;      result\n;      (recur\n;        (rest bs)\n;        (+ (* 2 result) ({ \\1 1 \\0 0 } (first bs))) ))))","user":"5524120fe4b0882d96d091b7"},{"problem":122,"code":"(fn [s]\n  (->> (map str s)\n       (map read-string)\n       reverse\n       (map-indexed #(if (= 0 %2)\n                       0\n                       (Math/pow 2 %1)))\n       (reduce +)\n       int))","user":"57aa4775e4b0b8559636fc6b"},{"problem":122,"code":"(fn bin [s]\r\n  (reduce #(+ %1 %1 ({\\1 1 \\0 0} %2)) 0 s))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":122,"code":"(fn from-binary [s] (reduce #(let [pow (* 2 %1)] (if (= \\0 %2) pow (+ 1 pow))) 0 s))","user":"5654e024e4b0f9d632dd848d"},{"problem":122,"code":"(fn [bin-str]\n  (let [integers (map #(Integer. %) (filter (comp not empty?) (clojure.string/split bin-str #\"\")))\n        with-indexes (map-indexed (fn [idx i] [idx i]) (reverse integers))]\n    (int (reduce (fn [acc [idx i]] (if (= i 1) (+ acc (Math/pow 2 idx)) acc)) 0 with-indexes))))","user":"504f9ae1e4b0a02f9cffde9c"},{"code":"(fn [s] (loop [bin s dec 0 exp 0]\n  (if (empty? bin) dec (recur \n    (drop-last bin)\n    (+ dec (if (= \\0 (last bin)) 0 (reduce * (take exp (repeat 2)))))\n    (inc exp))\n  )\n))","problem":122,"user":"4ffb38e8e4b0678c553fc3c6"},{"code":"(fn [binstr]\n  (apply +\n    (map-indexed\n      (fn [index, ch]\n        (* (if (= ch \\0) 0 1)\n          (int (Math/pow 2\n            (- (count binstr) index 1)))))\n        (char-array binstr))))","problem":122,"user":"4fc50bcbe4b081705acca375"},{"code":"(fn read-binary [s]\n  (reduce (fn [t [i n]] (+ t (if (= \\1 n)\n                              (reduce * (repeat i 2))\n                              0))) 0 (map-indexed vector (reverse s))))","problem":122,"user":"511e763ce4b03e81d390ac29"},{"problem":122,"code":"(fn [x] (->> x\n     seq\n     reverse\n     (map str)\n     (map read-string)\n     ((fn [n] \n        (let [c (count n)\n              s (take c (iterate #(* % 2) 1))]\n          (reduce + (map * n s)))))))","user":"5c435a9fe4b0e06e1360a367"},{"problem":122,"code":"(fn [binstr]\n  (reduce (fn [acc item]\n            (+ (* acc 2) (Integer. (str item))))\n          0\n          binstr))","user":"58ee5371e4b056aecfd47da8"},{"problem":122,"code":"(fn [digits] (reduce + (map * (reverse (map #(Character/getNumericValue %) digits)) (iterate (fn [n] (* 2 n)) 1))))","user":"55306f9de4b076ab5578f814"},{"problem":122,"code":"#(let [a (map read-string (re-seq #\"\\d\" %1))]\n     (+ (last a)\n        (reduce (fn [acc n] (* (+ acc n) 2)) 0 (butlast a))))","user":"55627de1e4b0c656e3ff17d9"},{"problem":122,"code":"(fn [binary-number]\n        (let [binary-digits (->> binary-number str (map (comp read-string str)))]\n            (int\n                (reduce +\n                    (map #(* (Math/pow 2 %1) %2)\n                        (range (count binary-digits))\n                        (reverse binary-digits))))))","user":"5b083513e4b0cc2b61a3bdb4"},{"problem":122,"code":"(fn solution122\n  [s]\n  (reduce (fn [curr n]\n            (+ n (* curr 2))) 0 (map (fn [x] (Character/digit x 10)) s)))","user":"595bc925e4b066ee0a44afe2"},{"problem":122,"code":"(fn [bin-str]\n  (let [pows (map-indexed (fn [idx num]\n                              (Math/pow (* 2 (Character/getNumericValue num)) (+ idx 1)))\n                            (reverse bin-str))]\n    (/ (int (reduce + pows)) 2)))","user":"56603e5fe4b068f2fe63dc4a"},{"problem":122,"code":"(fn b [s]\n  (loop [str (reverse s)\n           n 1\n           r 0]\n     (if (empty? str)\n         r\n         (recur (rest str) (* 2 n) (if (= \\1 (first str)) (+ r n) r)))))","user":"53fcd574e4b0de5c418485d9"},{"code":"(fn [s]\n  (let [xs (seq s)]\n  (reduce\n    #(if (= %2 \\0)\n         (* 2 %1)\n         (inc (* 2 %1)))\n    0\n    xs)))","problem":122,"user":"4fc5a693e4b0ee37620e17fc"},{"code":"#(loop [t 0 v 1 l %]\r\n  (if (empty? l)\r\n    t\r\n    (recur (+ t (* v (Integer/parseInt (str (last l))))) (* 2 v) (drop-last l)))\r\n  )","problem":122,"user":"4e6e2ac4535d5021c1a895ff"},{"code":"(fn [s]\n   (->>\n    (zipmap (iterate #(* 2 %) 1) (reverse s))\n    (filter #(= \\1 (val %)))\n    (reduce #(+ %1 (key %2)) 0)))","problem":122,"user":"4fa05b99e4b0dcca54ed6d47"},{"problem":122,"code":"(fn [s]\n  (reduce + (map (comp #(reduce * (repeat % 2)) first) (filter (fn [[_ c]] (= c \\1)) (map-indexed vector (reverse s))))))","user":"564583f0e4b0284900eef607"},{"problem":122,"code":"(fn [input]\n  (let [to-number #(- (int %) 48)]\n    (loop [current (first input) remaining (rest input) result 0]\n      (if (empty? remaining)\n        (int (+ result (to-number current)))\n        (recur (first remaining) (rest remaining) (+ result (* (to-number current) (Math/pow 2 (count remaining)))))))))","user":"5989ee61e4b021a7a535fed7"},{"code":"(fn [n]\n  (let [\n    bits (map #(- (int %) (int \\0)) (reverse (seq n)))\n    pow2 (cons 1 (iterate #(* 2 %) 2))\n    r (apply + (map (fn [d w] (* d w)) bits pow2))\n    ] r))","problem":122,"user":"4ef355e3535dced4c769f228"},{"code":"(fn a [y]\n  (let [x (Long. y)]\n    (loop [data x base 1 res 0]\n      (if (= data 0)\n  res\n\t(recur (quot data 10) (* 2 base) (+ res (* base (rem data 10))))))))","problem":122,"user":"4eb0afed535d7eef3080733e"},{"problem":122,"code":"(fn [s] (apply + (map * (map #(Integer/parseInt (str %)) (reverse (seq s))) (iterate (partial  * 2) 1))))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":122,"code":"(fn [s]\n  \n  (let [seq-of-ints (->> s\n        (map str)\n        (map #(Integer/parseInt %)))\n    digits (reverse (take (count seq-of-ints)\n                          (iterate (partial * 2) 1)))]\n    (->> (map * seq-of-ints digits)\n         (reduce +))))","user":"5fb68f09e4b08cb800c85b58"},{"problem":122,"code":"(fn\n    [s]\n\n    (apply +\n      (map\n        (fn [v, i]\n          (if\n            (= v \\0)\n            0\n            (reduce * (repeat i 2))\n          )\n        )\n        (reverse s)\n        (range (count s))\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn [x]\n   (->> x\n        (map {\\0 0 \\1 1})\n        (reduce  \n          (fn [m v]\n           (+ (bit-shift-left m 1) v)))))","problem":122,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":122,"code":"(fn [b]\n  (let [r (apply str (reverse b))]\n    (:dec (reduce (fn [acc curr]\n              \t\t(identity {:multiplier (* 2 (:multiplier acc)), :dec (+ (:dec acc) (* (read-string (str curr)) (:multiplier acc)))})) {:multiplier 1, :dec 0} r))))","user":"576a972ce4b0a07e8fc1811a"},{"problem":122,"code":"(fn [s]\n             (reduce + (map-indexed (fn [i char]\n                                      (* (Integer. char) (int (Math/pow 2 (- (count s) i 1))))) (map str (seq s)))))","user":"541f89a5e4b01498b1a71a99"},{"problem":122,"code":"(fn [s] (reduce #(+ (* 2 %1) (if (= \\1 %2) 1 0)) 0 s))","user":"4fb1d7ace4b081705acca281"},{"problem":122,"code":"(fn [x] (reduce + (map * (map #(- (int %) 48) (reverse x)) (iterate #(* 2 %) 1))))","user":"56066e82e4b08b23635d3173"},{"problem":122,"code":"(fn [bitstring]\n  (reduce #(+ (* %1 2) (- (int %2) 48))\n          0 (seq bitstring)))","user":"509e8da7e4b08df8156e9e2f"},{"code":"#(let [coll (zipmap (range (count %)) (vec (reverse %)))] \n  (reduce + (for [x (keys coll)] \n\t\t(* (Math/pow 2 x) (- (int (get coll x)) 48)))))","problem":122,"user":"4e8ad1d2535d65386fec2110"},{"problem":122,"code":"(fn [b-number]\n  (loop [remaining b-number\n         index 0\n         result 0]\n    (let [less-significant (last remaining )\n          remaining' (butlast remaining)]\n      (if (empty? remaining)\n        result\n        (recur remaining' \n               (inc index)\n               (+ result\n                  (->> (Math/pow 2 index)\n                       (* (-> less-significant (str) (Integer/parseInt)))\n                       (int))))))))","user":"567bf820e4b05957ce8c61ad"},{"problem":122,"code":"(fn [s] (reduce + (map #(* %1 ({\\1 1 \\0 0} %2)) (iterate (partial * 2) 1) (reverse s))))","user":"5764457ae4b0994c1922fbf3"},{"code":"(fn f [n]\n    (if (empty? n)\n        0\n        (+ (* 2 (f (butlast n))) (- (int (last n)) 48))\n    )\n)","problem":122,"user":"51d1111ce4b067c36548635f"},{"problem":122,"code":"(fn [s]\n  (reduce\n   (fn [v n]\n     (let [q\n           (cond\n            (= \\1 n) 1\n            :else 0)]\n       (+ q (* 2 v)))) 0 s))","user":"59075e3be4b047aa04b19955"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [x y] (+ (* x 2) y)) (map read-string (map str (seq s)))))","user":"5f8e2a08e4b0715f5002d767"},{"problem":122,"code":"(fn [s] (apply + (map #(if (= \\1 %) %2 0) (reverse s) (iterate #(* % 2) 1))))","user":"551c66dae4b07993ea3788de"},{"problem":122,"code":"(fn [string] \n  (reduce + \n          (map-indexed \n           (fn [idx it] (int (* it (Math/pow 2 idx))))\n           (reverse \n            ((fn [bin] (map (fn [char] (Integer. (str char))) (seq bin))) string)))))","user":"588f500ae4b00487982d51a4"},{"problem":122,"code":";(fn [s]\n;\t(int (:t (reduce (fn [acc v]\n;\t\t\t\t\t\t(let [{c :c t :t} acc]\n;\t\t\t\t\t\t\t(if (= v \\0)\n;\t\t\t\t\t\t\t\t(merge acc {:c (inc c)})\n;\t\t\t\t\t\t\t\t{:c (inc c) :t (+ t (Math/pow 2 c))})))\n;\t\t\t\t\t{:c 0 :t 0}\n;\t\t\t\t\t(reverse s)))))\n\n;#(int (apply + (map-indexed \n;                (fn [i v] \n;                  (if (= v \\0) \n;                    0 \n;                    (Math/pow 2 i))) \n;                (reverse %))))\n\n; #(reduce (fn [a v] (+ a a (- (int v) 48))) 0 %)\n\n;#(read-string (str \"2r\" %))\n\n#(Integer/parseInt % 2)","user":"5f6a583ae4b02876ed9fd046"},{"problem":122,"code":"(fn [binstr] \n   (let [strlen (dec (.length binstr))]\n     (int (reduce + (map-indexed\n                  #(* (Integer/parseInt (str %2))\n                      (Math/pow 2 (- strlen %)))\n                  (seq binstr))))))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn [s]\n  (apply + (map (fn [c n]\n                  (if (= c \\1) (Math/pow 2 n) 0))\n                (reverse s)\n                (range))))","problem":122,"user":"4f8345c6e4b033992c121c1b"},{"problem":122,"code":"(fn binread [s]\n\t(letfn [(exp [x n] (if (zero? n) 1 (* x (exp x (dec n)))))\n            (binreadi [s i acc]\n\t\t \t\t(if (= s \"\")\n\t\t\t\t\tacc\n\t\t\t\t\t(let [increase (if (= (first s) \\1)\n\t\t\t\t\t\t               (exp 2 i)\n\t\t\t\t\t\t               0)]\n\t\t\t    \t\t(binreadi (apply str (rest s)) (inc i) (+ increase acc)))))]\n            (binreadi (apply str (reverse s)) 0 0)))","user":"5252b59de4b0541d1855b8cf"},{"code":"(fn bin2dec [bin]\n  (apply + (map #(* %1 %2)\n    (iterate (partial * 2) 1)\n    (reverse (map #(Character/getNumericValue %) bin)))))","problem":122,"user":"50c8697ce4b00bb60fe0c53f"},{"code":"(fn [bs]\n  (reduce #(+ (bit-shift-left %1 1) (. Integer parseInt (str %2))) 0 bs))","problem":122,"user":"5125029de4b0ce9225d2ed3e"},{"problem":122,"code":"#(apply + (first (reduce (fn [[d i] c]\n                          (let [n (long (* (Character/getNumericValue c) (Math/pow 2 i)))]\n                            [(conj d n) (dec i)]))\n                        [[] (dec (count %))] \n                        %)))","user":"51a4d802e4b0def3c5c5869a"},{"code":"(fn bin2num [s]\n  (let [ss (rest (seq (.split s \"\")))]\n    (reduce\n     (fn [acc, x] (+ (* 2 acc) (Integer/parseInt x)))\n     0\n     ss\n     )\n  )\n)","problem":122,"user":"51365524e4b04ac1f358dd52"},{"problem":122,"code":"(fn [num]\n   (Integer/parseInt num 2))","user":"5840c068e4b089d5ab817df8"},{"code":"(fn [bs]\n  (reduce #(+ (if (= %2 \\1) 1 0) (* 2 %)) 0 bs))","problem":122,"user":"5310e7aee4b08068f379ecdc"},{"problem":122,"code":"(fn [i]\n   (second (reduce (fn [[p acc] i] [(* 2 p) (+ acc (* p i))] ) [1 0] (reverse (map (fn [c] (- (int c) 48)) i)))))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":122,"code":"(fn binary-number [s]\n  (read-string (str \"2r\" s)))","user":"5e0d948fe4b099d064962f98"},{"code":"reduce (fn [acc el] (if (= \\1 el) (inc (* acc 2)) (* acc 2))) 0","problem":122,"user":"4fc0853ae4b081705acca327"},{"code":"#(int (reduce + (map-indexed (fn [idx x] (* (- (int x) (int \\0)) (Math/pow 2 idx))) (seq (reverse %)))))","problem":122,"user":"52d9aaa1e4b09f7907dd13ae"},{"problem":122,"code":"(fn from-binary [string]\n  (letfn [(** [x n] (reduce * (repeat n x)))]\n    (loop [front (first string)\n          rem (rest string)\n          tot 0]\n      (if (nil? front)\n        tot\n       (let [coun (count rem)]\n         (recur (first rem) (rest rem)\n                (+ tot (if (= front \\1)\n                   (** 2 coun)\n                   0))))))))","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn [s]\n   (let [str2num #(if (= % \\0) 0 1)]\n     (reduce #(+ (* 2 %) (str2num %2)) 0 (seq s))))","problem":122,"user":"50cae881e4b0f75dcc9a6e51"},{"code":"reduce #(+ (read-string (str %2)) (* 2 %)) 0","problem":122,"user":"51805d22e4b0e3fc13e244df"},{"code":"reduce \n  #(+ (* 2 %1) (read-string (str %2)))\n  0","problem":122,"user":"528652fbe4b0239c8a67ae14"},{"code":"#(read-string (str \"2r\" %))","problem":122,"user":"4daf907aedd6309eace4d17b"},{"problem":122,"code":"(fn [s] (int (reduce + (map-indexed #(if (= \\1 %2) (Math/pow 2 %1) 0) (reverse s)))))","user":"5e3d183fe4b01d43a70e8e11"},{"problem":122,"code":"(fn [x] (reduce + (map #(* (int (Math/pow 2 %2)) (- (int %) 48)) (reverse x) (range) )))","user":"4f1052b9535d64f603146418"},{"code":"(fn [st] (apply + (mapv #(* (- (int %1) 48) %2) (reverse st) (iterate (partial * 2) 1))))","problem":122,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":122,"code":"(fn[n] (loop [exp (- (count n) 1)\n               res 0\n               n n]\n            (if (< exp 0)\n                res\n                (recur (dec exp) \n                (if (= (first n) \\1)        \n                (+ res (reduce * (repeat exp 2))) res) (rest n) ))))","user":"5f84f110e4b0375e81f54e79"},{"code":"(fn [s]\n  (let [vect (reverse(map #(read-string (str %)) (seq s)))]\n    (loop [sum 0 iter vect i 0]\n      (if (empty? iter) \n          (int sum)\n          (recur \n            (+ sum (* (first iter) (. Math pow 2 i))) \n            (rest iter) \n            (+ i 1))\n      )\n    )\n  )\n)","problem":122,"user":"4fcf5292e4b03432b189f40e"},{"problem":122,"code":"(fn bina\n [bin]\n (let [seq1 (map #(Character/getNumericValue %) bin)\n \t   power (reverse (take (count seq1) (iterate (partial * 2) 1)))]\n    (apply + (map (fn [x y] (* x y)) seq1 power))\n    \t))","user":"53d6b266e4b0e771c3025459"},{"problem":122,"code":"(fn [s]\n    (loop [s (reverse (seq s)) r 0 i 1]\n      (if (empty? s)\n        r\n        (let [b (= (first s) \\1)]\n          (if b\n            (recur (rest s) (+ r i) (* i 2))\n            (recur (rest s) r (* i 2))\n          )\n        )\n      )\n    )\n  )","user":"5681afaae4b0945ebc182a87"},{"problem":122,"code":"(fn test [str]\n  (loop [[head & tail] (reverse str)\n         pos 0\n         result 0]\n    (println head)\n    (if (nil? head)\n      result\n      (if (= (compare head (first \"0\")) 0)\n        (recur tail (inc pos) result)\n        (recur tail (inc pos) (+ result ((fn [n] (loop [i 1 r 1] (if (> i n) r (recur (inc i) (* r 2))))) pos)))\n        )\n    )\n  )\n )","user":"54021f13e4b0df28a13c62cc"},{"problem":122,"code":"(fn [bin] \n  (apply + (map #(if (= % \\1) %2 0) bin (reverse (take (count bin) (iterate #(* 2 %) 1))) )))","user":"57e396cde4b0bfb2137f5a9e"},{"problem":122,"code":"(fn readBinary [s]\n         (loop [digits (map #(Character/getNumericValue %) s),\n                binary 0,\n                pos 0]\n           (if (empty? digits)\n             binary\n             (recur (drop-last digits)\n                    (+ binary (* (last digits) (int (Math/pow 2 pos))))\n                    (inc pos)))))","user":"58c4492be4b021aa9917ed27"},{"code":"(fn a [ x ] ( \n   reduce + (map-indexed \n    (fn [a b] (if (= \\1 b) (Math/pow 2 a) 0 )) \n   (reverse x) )))","problem":122,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn [bn]\n  (int (apply +\n    (map (fn [n pw] (if (= n \\1)\n            (java.lang.Math/pow 2 pw)\n            0))\n         (reverse bn)\n         (iterate inc 0)))))","problem":122,"user":"4fbe42b7e4b081705acca30f"},{"code":"#(reduce (fn [a itm] (if (= itm \\1) (+ 1 (* 2 a)) (* 2 a))) 0 %)","problem":122,"user":"521e8227e4b0dd19981ad082"},{"code":"(fn [binary]\n  (reduce + 0 \n          (map *\n                  (map #(- (int %) 48) (reverse binary))\n                  (iterate #(* 2 %) 1))))","problem":122,"user":"50e4b066e4b0cb9ec68fbca6"},{"problem":122,"code":"(fn [s] (reduce #(+ (* %1 2) %2) (map #(- (int %) (int \\0)) (seq s))))","user":"57873017e4b0ebec4cfb7503"},{"problem":122,"code":"#(reduce + (map (fn [d p] (* (Integer/parseInt d)\n                             (int (Math/pow 2 p))))\n                (reverse (map str %))\n                (range (count %))))","user":"53acaf1fe4b047364c04445f"},{"code":"(fn [x]  \n  (apply \n   + \n   (map-indexed \n    #(* \n      (int (java.lang.Math/pow 2 (- (count x) (+ 1 %))))  \n      (read-string (str %2))) \n    x)))","problem":122,"user":"5022292ee4b0846bc458ae46"},{"problem":122,"code":"(fn\n  [number]\n  (let [parse-string (fn [str]\n                       (reverse (map #(- (int %) 48) str)))\n        parsed (parse-string number)]\n    (loop [result 0\n           multiplier 1\n           current (first parsed)\n           remaining (rest parsed)]\n      (if (= current nil)\n        result\n        (recur\n         (+ result (* multiplier current))\n         (* multiplier 2)\n         (first remaining)\n         (rest remaining))))))","user":"53ac4719e4b047364c04445c"},{"problem":122,"code":"#(reduce (fn [v1, v2] (+ (* 2 v1) v2) ) (map (fn [ch] (- (int ch) (int \\0))) (seq %)))","user":"5135a74ae4b04ac1f358dd46"},{"problem":122,"code":"(fn [bin]\n  (loop [bin (reverse bin) mult 1 n 0]\n    (if (empty? bin)\n      n\n      (recur (rest bin) (* 2 mult) (+ n (* mult ({\\0 0 \\1 1} (first bin)))))\n    )\n  )\n)","user":"5e09fd26e4b099d064962f60"},{"problem":122,"code":"(fn [binary]\n  (loop [curr (first (reverse binary))\n         todo (rest (reverse binary))\n         power 1\n         result 0]\n    (if (nil? curr)\n      result\n      (recur (first todo) (rest todo) (* power 2) (+ result (* (- (int curr) 48) power))))))","user":"504f5804e4b0a02f9cffde72"},{"problem":122,"code":"(fn [s] (reduce #(+ (bit-shift-left %1 1) %2) 0 (map #(- (int %) 48) (seq s))))","user":"573107d5e4b0cd1946bd0fbc"},{"problem":122,"code":"(fn [string]\n   (Integer/parseInt (apply str string) 2))","user":"5db98f39e4b010eb3c36cd53"},{"problem":122,"code":"#(reduce (fn [x [i c]] (if (= \\1 c) (+ x (bit-shift-left 1 i)) x)) 0 (map-indexed (fn [i x] [i x]) (reverse %)))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":122,"code":"(fn [b] (apply + (map #(if (= \\1 %1) %2 0) (reverse b) (iterate #(* % 2) 1))))","user":"550b502ae4b06e50f9beb13f"},{"problem":122,"code":"(fn\n   [n]\n   (->> [(Long/valueOf n) 0 1 1]\n        (iterate (fn [[n result exp l]]\n                   [(quot n 10) (+ result (* exp (mod n 10))) (* 2 exp) (if (zero? n) 0 1)]))\n\n        (drop-while #(not (zero? (last %))))\n        first second\n        ))","user":"5bbc0ddfe4b0a20761a2361e"},{"code":"(fn parse [s]\n  (Integer/parseInt s 2))","problem":122,"user":"513cb853e4b0b86ece9f322b"},{"problem":122,"code":"(fn f [x]\n  (let [n (read-string x)]\n    (loop [n1 n acc 0 pv 1]\n      (if (zero? n1)\n        acc\n        (recur (quot n1 10) (+ acc (* pv (mod n1 10))) (* 2 pv))\n      )\n    )\n  )\n)","user":"55280930e4b0ffed3738f93b"},{"code":"(fn read-binary [str-num]\n  (let [binary-vec (reverse (map #(Character/getNumericValue %) str-num))]\n    (int (reduce + (map-indexed #(* (Math/pow 2 %1) %2) binary-vec)))))","problem":122,"user":"4e95a440535dbda64a6f6b37"},{"code":"(fn bin [s]\n  (reduce #(+ % (apply * %2))\n          0\n          (map vector \n               (reverse (take (count s) (iterate (partial * 2) 1)))\n               (map #(- (int %) 48) (seq s)))))","problem":122,"user":"515ffbfbe4b0e2be8aa20bdd"},{"code":"(fn [s]\n  (Integer/valueOf s 2))","problem":122,"user":"4fbb9d80e4b081705acca2ea"},{"code":"(fn [s]\n    (reduce + (map #(* (Integer/parseInt (str %)) (int (Math/pow 2 %2))) (reverse s) (range))))","problem":122,"user":"51852961e4b0da5a5be3babb"},{"problem":122,"code":"#(reduce\n  (fn [x y] (+ (* 2 x) y)) 0\n  (map\n   (fn [d] (- (int d) (int \\0)))\n   (seq %)))","user":"556c70dae4b09a3098a524fd"},{"code":"#(reduce (fn [v d] (+ (* 2 v) d)) 0 (map (fn [c] (- (int c) 48)) %))","problem":122,"user":"4efd8b67535de96065cf5085"},{"code":"(fn [n]\n  (letfn [(exp [x n]\n          (reduce * (repeat n x)))]\n    (reduce + (map-indexed (fn [idx itm] (* (exp 2 idx) (read-string (str itm)))) (reverse (seq n))))))","problem":122,"user":"50052fd0e4b0678c553fc45d"},{"problem":122,"code":"(fn [x] (loop [total 0\n               power 0\n               n (dec (count x))]\n             (println (+ total (reduce * (repeat power 2))))\n          (if (= n -1)\n            total\n            (recur (if (= (nth x n) \\0) total (if (= power 0) 1 (+ total (reduce * (repeat power 2))))) (inc power) (dec n)))))","user":"607e1d9de4b03d835a6eaedb"},{"problem":122,"code":"(fn decimal [bin]\n(let [g (reverse (map #(if (= \\1 %) 1 0) bin)),\n      p (take (count bin) (iterate #(* 2 %) 1))]\n  (apply + (map * p g))))","user":"54b54d1be4b05787c3b1639c"},{"problem":122,"code":"(fn readbinary[s]\n  (read-string (str \"2r\" s)))","user":"57bd960fe4b05aa3c4741c52"},{"code":"(fn [s]\n  (reduce + (for [n (range (count s))]\n              (case (nth (reverse s) n)\n                \\0 0\n                \\1 (reduce * (repeat n 2))))))","problem":122,"user":"53806e5be4b06839e8705ec1"},{"code":"(fn canvi [x] (reduce #(+ (* %1 2) %2) (map #(- (int %) 48) x)))","problem":122,"user":"4dadca03c9a9d6ed4199dc57"},{"code":"(fn [s]\n  (loop [data (map (fn [x] (compare x \\0)) (vec s)) result 0]\n    (if (empty? data)\n      result\n      (recur\n        (rest data)\n        (+\n          (* 2 result)\n          (first data)))))\n)","problem":122,"user":"4f16d6ed535d64f60314644f"},{"problem":122,"code":"reduce #(+ (* % 2) (if (= %2 \\0) 0 1)) 0","user":"59638af5e4b066ee0a44b0cc"},{"problem":122,"code":"(fn [bits] \n  (reduce + \n          (map \n           #(if (= \\1 %) \n              (reduce * (repeat %2 2))\n              0) \n           bits \n           (reverse (range (count bits))))))","user":"5367bc60e4b0243289761e81"},{"code":"(fn bin-str-to-num [bin-str]\n  (Integer/parseInt bin-str 2))","problem":122,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":122,"code":"(fn [s]\n (loop [n 1\n        [h & rst] (reverse s)\n        sum 0]\n   (if (nil? h)\n    sum\n  (recur\n   (* n 2)\n   rst\n   (+ (if (= h \\1) n 0)\n      sum)))))","user":"549a999be4b0f3d1d8e70f6f"},{"problem":122,"code":"(fn [s]\n    (loop [s s t 0]\n      (if (seq s)\n      (if (= \\1 (first s))\n        (recur (rest s) (+ t (reduce * (repeat (- (count s) 1) 2))))\n        (recur (rest s) t)\n        )\n      t \n      ) \n      ) \n    )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":122,"code":"(fn [string]\n    (reduce + (map *\n      (reverse (take (count string) (iterate #(* 2 %) 1)))\n      (map read-string (map str (seq string)))\n    ))\n  )","user":"5e2586afe4b05b4b01516167"},{"code":"(fn [s]\n  (apply + (map-indexed\n    #(if (= %2 \\1) (Math/pow 2 %1) 0) \n    (reverse s))))","problem":122,"user":"4fa67030e4b081705acca1b7"},{"problem":122,"code":"#(reduce (fn [acc cur] (let [new (* 2 acc)] (if (= \\0 cur) new (inc new)))) 0 %)","user":"5cc4b34de4b0ccb061962805"},{"problem":122,"code":"(fn to-dec\n\t[inpt]\n\t(let [nums (map #(- (int %) 48) (into [] inpt))\n\t\t\t\tvalus (take (count nums) (iterate dec (dec (count nums))))]\n\t\t\t\t(int (apply + (for [x valus]\n\t\t\t\t\t(* (nth nums (- (count nums) x 1)) (Math/pow 2 x))\n\t\t\t\t)\t)\n\t\t)\n\t)\n\t)","user":"5545477fe4b0a04f79299531"},{"problem":122,"code":"(fn [b]\n  (loop [r (map #(- (int %) 48) (seq b))\n         a 0]\n    (if (empty? r)\n      a\n      (recur (rest r)\n             (+ (* 2 a) (first r))))))","user":"55995fa7e4b031d6649c9ba9"},{"code":"(fn [s]\r\n  (reduce +\r\n          (map-indexed #(int (* (- (int %2) 48)\r\n                                (Math/pow 2 %1)))\r\n                       (reverse s))))","problem":122,"user":"50576483e4b001218172198b"},{"code":"(fn read-binary\n  [n]\n  (let [t (map-indexed (fn [i v] [i v]) (map (fn [c] (- (int c) 48)) (reverse n)))]\n    (int (reduce (fn [s [i v]] (+ s (* v (Math/pow 2 i)))) 0 t))))","problem":122,"user":"4f17ab99535d64f603146457"},{"problem":122,"code":"(fn [num] (reduce #(+ (* %1 2) %2) (map #(Integer/parseInt (str %)) (seq num))))","user":"568f2059e4b0dcc4269f40df"},{"problem":122,"code":"(fn [s] (letfn [(ctoi [c] (- (int c) (int \\0))) (power-int [pow c] (* (ctoi c) (int (Math/pow 2 pow))))] (reduce + (map-indexed power-int (reverse (seq s))))))","user":"55f09e7be4b06e875b46ce28"},{"problem":122,"code":"(fn [s] (reduce + (map-indexed #(if (= \\1 %2) (int (Math/pow 2 %1)) 0) (reverse s))))","user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn f [string] \n  (reduce + \n          (map-indexed \n           #(if (= \\1 %2) (reduce * (repeat % 2)) 0) \n           (reverse string))))","problem":122,"user":"52379c46e4b0fae3832e99db"},{"code":"(fn [x]\n  (reduce #(+ (* 2 %1) (read-string (str %2))) 0 x))","problem":122,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn [k] (\n  (fn exp [x y]\n     (if (first x)\n          (+ (* (first x) (first y))\n             (exp (rest x) (rest y)))\n          0 ))\n   (reverse (map #(Integer/valueOf %) (re-seq #\".\" k)))\n   (cons 1 (take (count k) (iterate (fn [b] (* 2 b)) 2 )))\n))","problem":122,"user":"504457c0e4b01f6c9a8b2360"},{"problem":122,"code":"#(loop [str-num %\n        result 0\n        index 0]\n   (if(empty? str-num)\n   result\n   (recur (butlast str-num) (if (= \\1 (last str-num))\n                              (+ result (reduce * (repeat index 2)))\n                              result)\n          (inc index))))","user":"6074e278e4b069485764de51"},{"problem":122,"code":"(fn\n  [binary-str]\n  (reduce\n    (fn\n      [res char]\n      (let [shifted-res (* 2 res)]\n        (if (= \\1 char)\n          (inc shifted-res)\n          shifted-res)))\n    0\n    binary-str))","user":"59fa7fb0e4b0ca45a743a366"},{"problem":122,"code":"(fn [f]\n  \n  (Integer/parseInt f 2)\n  \n  )","user":"5f727be9e4b02876ed9fd08d"},{"code":"(fn parseBinary [a]\n  (Integer/parseInt a 2))","problem":122,"user":"4ddc620d535d02782fcbea06"},{"code":"(fn [s]\n\t (loop [string s\n\t\tres 0]\n\t   (if (not (empty? string))\n\t     (recur (rest string)\n\t\t    (+ res (cond\n\t\t\t    (= (first string) \\0) 0\n\t\t\t    :else (Math/pow 2 (count (rest string))))))\n\t     (int res))))","problem":122,"user":"51937eb3e4b04df54c098022"},{"code":"(fn btod [str]\n  (reduce (fn [res x]\n            (+ (if (= x \\0) 0 1)\n               (* 2 res))) 0 (seq str)))","problem":122,"user":"51ac6360e4b09397d510976c"},{"problem":122,"code":"(fn [b]\n  (let [pl (map list (range)\n                     (reverse (map #(-> % str biginteger)\n                                   (seq b))))]\n    (apply + (for [[i d] pl \n                   :when (= 1 d)]\n                   (biginteger (Math/pow 2 i))))))","user":"55c49394e4b0e31453f6499e"},{"problem":122,"code":"(fn solve [x]\n  (let [v (vec x)]\n    (apply + (for [b (range (count x))]\n               (bit-shift-left (- (int (v b)) (int \\0)) (- (count v) (inc b)))))))","user":"55058a4fe4b086ebe8a79c89"},{"code":"(fn [s]\n  (reduce + (map * (map #(- (int %) 48) (map identity (reverse s))) (take (count s) (iterate #(* 2 %) 1)) ) ))","problem":122,"user":"52117ea7e4b07aea8afc4f70"},{"code":"(fn ermagerd-brnary [sterng] (Integer/parseInt sterng 2))","problem":122,"user":"50e1bdd8e4b019fc399ce17f"},{"code":"(fn [s]\n  (loop [sum 0 col (reverse s) base 1]\n    (if (empty? col)\n        sum \n        (recur (+ sum (* (- (int (first col)) 48) base)) (rest col) (* base 2))\n    )\n  )\n)","problem":122,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":122,"code":"(fn bin [s]\n  (->> (seq s)\n       (reverse)\n       (map-indexed #(if (= %2 \\0) 0 (bit-shift-left 1 %1)))\n       (reduce +)))","user":"58dcf11ae4b0a4d5acaab6af"},{"code":"(fn [binStr]\n  (reduce + 0\n          (->> binStr\n               reverse\n               (map-indexed #(if (= \\1 %2) %1)) ; \"1101\" -> (0 nil 2 3)\n               (remove nil?)\n               (map #(->> % (Math/pow 2) int)))))","problem":122,"user":"51df825de4b01188f062752b"},{"code":"(fn [s]\n  (reduce #(+ (* %1 2) %2) (map #(if (= % \\0) 0 1) (seq s))))","problem":122,"user":"4ee4f4a9535d1385b2869d85"},{"problem":122,"code":"(fn [strn]\n   (->> strn\n        (map #(- (int %) (int \\0)))\n        (map * (reverse (take (count strn) (iterate #(* 2 %) 1))))\n        (reduce +)))","user":"563772a9e4b0bfe05bf117d7"},{"code":"(fn [n]\n  (reduce \n   (fn [total [i x]] (+ total (* (read-string (str x)) (int (Math/pow 2 i)))))\n   0\n   (keep-indexed #(-> [%1 %2]) (reverse n))))","problem":122,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":122,"code":"(fn [b]\n  (loop [toread (map #(- (int %) 48) b)\n         val 0]\n    (if (empty? toread)\n      val\n      (recur (rest toread)\n             (+ (first toread) (* 2 val))))))","user":"53322cece4b019098a6f8b73"},{"problem":122,"code":"#(reduce + (map-indexed (fn [idx item] (if (= item \\1) (bit-shift-left 1 idx) 0)) (reverse %)))","user":"5f309144e4b0574c87022c23"},{"code":"(fn [s] (first (reduce (fn [r d] [(+ (first r) (* (if (= d \\1) 1 0) (second r))) (* (second r) 2)]) [0 1] (reverse s))))","problem":122,"user":"4e4ca885535dc968683fc4df"},{"problem":122,"code":"(fn [n]\n  (loop [l (reverse (map #(- (int %) 48) n))\n         n 1\n         r 0]\n    (if (empty? l)\n      r\n      (recur (rest l) (* n 2) (+ r (* n (first l)))))))","user":"53d5a63be4b0e771c3025449"},{"problem":122,"code":"(fn [s] (reduce  #(let [nx (* 2 %)] (if (= \\1 %2) (inc nx) nx)) 0  (seq s) )   )","user":"5735ac67e4b0cd1946bd102b"},{"code":"(fn [s]\n  (->> (seq s)\n       (map #(Integer/parseInt (str %)))\n       (reduce (fn [sum i]\n                 (+ (* sum 2)\n                    i))\n               0)))","problem":122,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn f [x]\n (Integer/parseInt x 2)\n)","problem":122,"user":"50f4894be4b004d364930528"},{"problem":122,"code":"(fn ff [bs] (loop [remaining bs final 0] \n  (if (empty? remaining)\n    final\n    (let [n1 (read-string (str (first remaining)))\n          dps (rest remaining)\n          ]\n      (recur dps\n             (+ n1 (* 2 final)))))))","user":"57b35ecbe4b0fbc9809a277e"},{"problem":122,"code":"(comp\n              (partial reduce #(+ (- (int %2) 48) (* 2 %1)) 0)\n              seq\n              )","user":"53f592b7e4b0db01ade6f9d0"},{"code":"#(reduce + (map bit-shift-left (map (fn [c] ( read-string ( str c ))) (reverse %1)) (iterate inc 0) ))","problem":122,"user":"53029281e4b0d8b024fd372e"},{"code":"#(reduce +  (map * \n              (for [x (reverse %)]\n                (- (int x) 48))\n              (cons 1 (iterate (fn [x] (* 2 x)) 2))))","problem":122,"user":"5300aa1de4b0d8b024fd3710"},{"code":"(partial (fn bin [p s]\n  (+ (if (= \\1 (last s)) p 0)\n     (if (nil? (last s)) 0 (bin (* 2 p) (butlast s))))) 1)","problem":122,"user":"5009fd0ae4b03d00572d2d70"},{"problem":122,"code":"(fn [b] \n  (->> b \n       (map #(Integer/parseInt (str %))) \n       reverse \n       (reduce (fn [[acc i] bit] \n                 [(+ acc (* bit (Math/pow 2 i))) (inc i)])\n               [0 0])\n       first\n       int))","user":"4e0e0529535d04ed9115e7b9"},{"problem":122,"code":"(fn bin [binary]\n  (int\n  \t(loop [k 0 result 0]\n      \t(if (= k (count binary))\n           \tresult\n            \t(let [base (Integer/parseInt (str (nth (reverse binary) k)))]\n            \t  (println (int (Math/pow base k)))\n              \t(recur (inc k) (+ result (* base (Math/pow 2 k))))\n              )\n        )\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn [bs]\n  (loop [[h & r] (reverse (seq bs))\n         n 0\n         e 1]\n    (if (nil? h) n\n      (recur r (if (= h \\1) (+ n e) n) (* e 2)))))","problem":122,"user":"5081566ce4b0946d0443855b"},{"code":"(fn[my-str] (reduce + (map-indexed #(* (Integer. (str %2)) (reduce * (repeat %1 2))) (reverse my-str))))","problem":122,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":122,"code":"#(reduce (fn [sum s] (+ (bit-shift-left sum 1) (case s \\0 0 \\1 1))) 0 %)","user":"5282f54be4b0239c8a67ada0"},{"problem":122,"code":"#(\n  loop [bin (reverse %) pow 1 nr 0]\n    (if (empty? bin)\n      nr\n      (if (= \"0\" (str (first bin)))\n        (recur (apply str (rest bin)) (* pow 2) nr)\n        (recur (apply str (rest bin)) (* pow 2) (+ nr pow)))))","user":"56c0aeb8e4b060a8e693e3af"},{"problem":122,"code":"#(->>\n    %\n    reverse\n    (map-indexed (fn[i x] (* (- (int x) 48) (reduce * (repeat i 2)))))\n    (reduce +))","user":"5ed6030de4b016b56eae05db"},{"problem":122,"code":"(fn [x] (reduce #(if (= %2 \\0) (* 2 %) (+ (* 2 %) 1)) 0 x))","user":"5c54e605e4b0fb8c5ffd9a14"},{"code":"(fn [s]\n  (reduce\n   (fn [result item]\n     (+ result\n        (*\n         (int (Math/pow 2 (first item)))\n         (Integer/valueOf (str (second item))))))\n   0\n   (zipmap (range (count s)) (reverse s))))","problem":122,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn [s]\n        (loop [s (vec (seq s))\n               n (dec (count s))\n               mult 1\n               res 0]\n              (if (< n 0)\n                res\n                (if (= (s n) \\0)\n                  (recur s (dec n) (* 2 mult) res)\n                  (recur s (dec n) (* 2 mult) (+ res mult))))))","problem":122,"user":"51a8f0c6e4b08d8ec191b821"},{"problem":122,"code":"(fn read-a-binary-number [s]\n        (let [s (reverse (map #(- (int %) 48) s))]\n          (:result\n           (reduce\n           (fn [m x]\n             (-> m\n                 (assoc :i (inc (:i m)))\n                 (assoc :result (if-not (zero? x)\n                                  (+ (:result m) (int (Math/pow 2 (:i m))))\n                                  (:result m)))))\n           {:i 0 :result 0} s))))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":122,"code":"(fn bin2dec [s]\n  (let [list-of-power-2 (fn [n]\n                    (reduce #(cons %2 %1) '() (map #(int (Math/pow 2 %)) (range 0 n))))]\n  (reduce + (map (fn [x y] (if (= x \\1) y 0)) s (list-of-power-2 (count s))))))","user":"590b055ae4b047aa04b199c9"},{"code":"(fn [s]\n  (let [a (map #(if (= \"1\" %) 1 0) (clojure.string/split s #\"\"))\n        a (reverse a)\n        b (iterate (fn [x] (* 2 x)) 1)]\n\n    (->> (interleave a b                )\n         (partition-all 2               )\n         (map (fn [x] (apply * x))      )\n         (apply +                       ))))","problem":122,"user":"53415755e4b00652c8746ecd"},{"problem":122,"code":"(fn [b]\n  (->> b\n       seq\n       (map (comp int bigint str))\n       reverse\n       (map vector (range))\n       (remove #(= 0 (second %)))\n       (map first)\n       (reduce (fn [acc p] (+ acc (Math/pow 2 p))) 0)\n       int))","user":"57e0f30ae4b0bfb2137f5a66"},{"problem":122,"code":"(fn [x] (reduce #(+ (* 2 %) (if (= %2 \\0) 0 1)) 0 x))","user":"56b2573ce4b0982f16b37e02"},{"problem":122,"code":"(fn [s] (reduce #(+ ({\\1 1 \\0 0} %2) (* 2 %1)) 0 s))","user":"5dd60c58e4b0948ae9d9ad7c"},{"problem":122,"code":"#(Integer/parseInt (str %) 2)","user":"5d974b1de4b0d3f9b434ad36"},{"code":"(fn [s] (reduce + (map-indexed #(* (Math/pow 2 %) (if (= %2 \\1) 1 0)) (reverse s))))","problem":122,"user":"4ecbb249535df97575fdabdf"},{"code":"(fn bintodec [s]\n  (reduce\n    (fn [a b]\n      (+ (* 2 a) b)\n    )\n    (map #(- (int %1) (int \\0)) s)\n  )\n)","problem":122,"user":"518e6966e4b051adb72789ec"},{"problem":122,"code":"(fn [x]\n  (apply +\n         (map #(* (- (int (last %)) 48) (apply * (repeat (first %) 2)))\n              (partition \n               2 \n               (interleave \n                (range) \n                (reverse (seq x)))))))","user":"5a6a7cc5e4b0512ff01cda27"},{"problem":122,"code":"(fn [s]\n\n(let [v (vec (map (fn [x] (Integer/parseInt (str x))) s))\n      p (map (fn [x] (Math/pow 2 x)) (range (count s)))  \n      \n      \n      ]\n  \n  \t(int (apply + (map * p (reverse v))))\n )\n )","user":"5b5afe87e4b0c6492753e6a4"},{"code":"(fn [s]\n  (int (reduce + 0 (map-indexed #(if (= \\1 %2) (Math/pow 2 %) 0) (reverse s)))))","problem":122,"user":"51424cc8e4b0b50abeb46b34"},{"code":"(fn [s] \n  (let [powers (iterate (partial * 2) 1)\n        reverse-chars (reverse (seq s))]\n  \t(reduce + (map #(if (= \\1 %) %2 0) reverse-chars powers))))","problem":122,"user":"50d93c53e4b0fd36a4b89223"},{"problem":122,"code":"(fn binary \n  [n]\n  (loop [a 0\n         b 1\n         x (reverse (map {\\0 0, \\1 1} n))]\n    (if (= x nil)\n      a\n      (recur (+ a (* b (first x))) (* 2 b) (next x)))))","user":"57f81534e4b0d3187e900915"},{"code":"(fn [x]\n    (reduce +\n      (map-indexed\n        (fn [idx val]\n          (reduce * (-> (* (Math/pow (* 2) idx) val) int list))\n        )\n        (map #(Integer/parseInt (str %)) (reverse x)) \n      )\n    ) \n  )","problem":122,"user":"4e8b73e4535d65386fec2120"},{"problem":122,"code":"(fn [x] (reduce #(+ (if (= %2 \\1) 1 0) (* 2 %1)) 0 (seq x)))","user":"56fdd9a1e4b08d47c97781a8"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [res ch]\n            (let [v (if (= ch \\1) 1 0)]\n              (+ (bit-shift-left res 1) v)))\n          0 s))","user":"539ddf25e4b0b51d73faaf3e"},{"problem":122,"code":"(fn [s]\n  (apply + (map \n          #(apply * (repeat % 2)) \n          (keep-indexed #(if (= %2 \\1) %1) \n                        (reverse s)))))","user":"55b1e9e7e4b0da326a65cf74"},{"problem":122,"code":"(fn [x]\n  (let [enum (reverse (range (count x)))\n        nmbr (map read-string (map str (seq x)))]\n    (reduce + (map (fn [x y] (* x (reduce *  (repeat y 2)))) nmbr enum))))","user":"5e78e8d3e4b085ba37836dfd"},{"code":"(fn [a]\n  (first \n   (reduce (fn [[v m] c]\n             (let [b (if (= c \\1) 1 0)]\n               [(+ v (* m b)) (* m 2)]))\n           [0 1] (reverse a))))","problem":122,"user":"5117c31ee4b0e0897831a60c"},{"problem":122,"code":"#(int (first (reduce \n          (fn [[sum power] digit] \n            [(+ sum \n                (* (- (int digit) 48) \n                   (Math/pow 2 power))) \n             (inc power)]) [0 0] (reverse %))))\n\n;#(Integer/parseInt % 2)","user":"5af31955e4b0cc2b61a3bc7a"},{"code":"(fn [num-str] (Integer/parseInt num-str, 2))","problem":122,"user":"4ef4ab95535dced4c769f23b"},{"code":"(fn [x]\n  (loop [s (map #(read-string (str %)) (seq x))\n         r 0]\n    (if (empty? s) r\n      (recur (rest s)\n             (+ r (apply * (conj (repeat (count (rest s)) 2) (first s))))))))","problem":122,"user":"523bc0e6e4b07becd5be21f9"},{"code":"(fn [n-str]\n   (let [ns (map #(Character/getNumericValue %) n-str)]\n     (reduce #(+ (* %1 2) %2)\n             0\n             ns)))","problem":122,"user":"50868795e4b004985b776e5e"},{"problem":122,"code":"(fn read-a-binary-number\n  [s]\n  (loop [cur-array (rest (reverse s))\n         cur-s (first (reverse s))\n         index 0\n         ret 0]\n    (if (empty? cur-array)\n      (int (+ ret (* (Integer/parseInt (str cur-s)) (Math/pow 2 index))))\n      (recur (rest cur-array) (first cur-array) (inc index) (+ ret (* (Integer/parseInt (str cur-s)) (Math/pow 2 index)))))))","user":"59b9e669e4b0a024fb6ae3db"},{"problem":122,"code":"(fn read-bin [string]\n  (reduce (fn [n c]\n            (+ (* n 2)\n               (if (= c \\1) 1 0)))\n          0\n          string))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":122,"code":"(fn read-binary [s]\n  (int (apply + (for [x (range (count s)) :when (= (nth s x) \\1)]\n                  (Math/pow 2 (- (dec (count s)) x))))))","user":"54651faee4b01be26fd746d6"},{"code":"(fn convert [s]\n  (letfn [\n          (parse-int [c] (#(Integer/parseInt %) c))\n          (char-to-int [c] (parse-int (str c)))\n          (pow [x n] (if (= 0 n) 1 (reduce * (repeat n x))))\n          (stop-condition [s] (= 0 (count s)))\n          (add-exp-value [value current exp]\n                         (if (not= 0 current)\n                           (+ value (pow 2 exp))\n                           value))\n          \n          (convert-iter [s value exp]\n                        (if (stop-condition s)\n                          value\n                          (convert-iter (butlast s) (add-exp-value value (char-to-int (last s)) exp) (+ exp 1))))\n          \n          ]\n    (convert-iter s 0 0)))","problem":122,"user":"517531c6e4b07031762f2eea"},{"code":"(fn [s]\n  (apply + (map #(* (int (Math/pow 2 %2)) (Character/getNumericValue %))\n                s (range (dec (count s)) -1 -1))))","problem":122,"user":"4fdbc075e4b05e33b9224f61"},{"problem":122,"code":"(fn [s]\n  (loop [n 0\n         s s]\n    (if (empty? s)\n      n\n      (let [d (first s)\n            adder (if (= (first \"1\") d) 1 0)]\n        (recur (+ adder (* 2 n))\n               (rest s))))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":122,"code":"(fn [s] (loop [[f & r] s acc 0]\n            (if f\n              (recur r (if (= f \\1) (inc (* 2 acc)) (* 2 acc)))\n              acc)))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":122,"code":"(fn [s]\n  (letfn [(bin-to-dec [idx x]\n               (if (= \\0 x) 0\n                (pow 2 idx)))\n          (pow [a b]\n               (reduce *' (repeat b a)))]\n  (reduce + (map-indexed bin-to-dec (reverse s)))))","user":"5182de5ce4b0353c468deb74"},{"problem":122,"code":"(fn [s]\n  (apply + (flatten (map-indexed #(if (= %2 \\1) (nth (iterate (partial * 2) 1) %1) 0) (reverse s)))))","user":"568227fee4b0945ebc182a8a"},{"code":"(fn binary-to-decimal [s]\n  (reduce #(+ (* % 2) %2)\n          (map #(Integer. (str  %)) s)))","problem":122,"user":"4ddb696b535d02782fcbe9fa"},{"problem":122,"code":"#(reduce + (map * (iterate (partial * 2) 1) (reverse(map (fn[c](if (= \\1 c) 1 0)) %))))","user":"561d7246e4b064ca9f4b16b1"},{"code":"#(let [coll (into [] (reverse (map read-string (map str (seq %)))))] \n       (loop [result [] j 0] \n         (if (< j (count (seq %))) \n           (recur (map merge (conj result (* (coll j) (apply * (repeat j 2))) )) (inc j)) \n           (apply + result))))","problem":122,"user":"513ca934e4b0b86ece9f3228"},{"code":"(fn [n] (loop [d (reverse (for [d n] d)) y 0 m 1] (if (empty? d) y (recur (rest d) (if (= \\0 (first d)) y (+ y m)) (bit-shift-left m 1)))))","problem":122,"user":"4f0cc259535d0136e6c22310"},{"code":"(fn [s]\n  (letfn [(digit [c]\n            (cond (= c \\1) 1\n                  :else 0))]\n    (let [powers (iterate #(* 2 %) 1)\n          pairs (map vector powers (reverse s))]\n      (reduce + (for [[pow c] pairs]\n                      (* pow (digit c)))))))","problem":122,"user":"52487654e4b05ef8e38e63dc"},{"problem":122,"code":"(fn [binary] \n   (let \n     [\n      parseInt #(Integer. %),\n      pow (fn pow [a b] (reduce * 1 (repeat b a))),\n      bitlist (reverse (map (comp parseInt str) (seq binary))),\n      twos (map #(pow 2 %) (range (count bitlist)))\n      ]\n     (apply + (mapv * bitlist twos))\n     )\n   )","user":"58950f29e4b00487982d5270"},{"problem":122,"code":"(fn read-binary \n   ([bin-n] (read-binary bin-n 0) )\n   ([bin-n n] \n    (if (empty? bin-n)\n     (int n)\n     (read-binary (rest bin-n) (+ n (* (read-string (str (first bin-n))) (Math/pow 2 (dec (count bin-n))) )) )))\n   )","user":"5564709ee4b0c656e3ff1807"},{"code":"(fn [x]\n            (loop [s (reverse (map #(Character/getNumericValue %) x)) a 1 r 0]\n              (if (empty? s)\n                r\n                (recur (rest s) (* a 2) (+ r (* (first s) a))))\n              ))","problem":122,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":122,"code":"(fn [s] (reduce (fn [o v] (+ o (apply * (repeat v 2)))) 0 (reduce (fn [m [i d]] (if (= \\1 d) (conj m i) m)) [] (map-indexed vector (reverse s)))))","user":"5a5894d9e4b05d388ecb6c81"},{"problem":122,"code":"(fn f [bin]\n  (loop [pow2 1\n         n (seq (reverse bin))\n         res 0]\n    (if (empty? n)\n      res\n      (recur (* 2 pow2)\n             (rest n)\n             (if (= \\1 (first n))\n               (+ pow2 res)\n               res)))))","user":"5530baa5e4b076ab5578f81a"},{"problem":122,"code":"(fn [bin]\n  (loop [bin (reverse bin)\n         n 1\n         res 0]\n    (if (seq bin)\n      (recur (rest bin) (* n 2) (+ res (* (Integer/parseInt (str (first bin))) n)))\n      res)))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":122,"code":"(fn [bin-num]\n  (let [rev-bin (reverse bin-num)]\n    (loop [total 0\n           cur-val 1\n           seq rev-bin]\n      (let [head (first seq)]\n        (if (empty? seq)\n          total\n          (recur (+ total (if (= \\1 head) cur-val 0))\n                 (* 2 cur-val)\n                 (rest seq)))))))","user":"4ea8570f535d7eef308072f8"},{"problem":122,"code":"(fn\n   [s]\n   (reduce + (map * (reverse (map #(- (int %) (int \\0)) s))\n                  (iterate (partial * 2) 1))))","user":"56a36f76e4b0542e1f8d14ca"},{"code":"reduce #(+ (* %1 2) (if (= %2 \\1) 1 0)) 0","problem":122,"user":"4effb663535dcb61093f6a2e"},{"code":"(fn [bin-string] \n  (let [s (reverse (map #(- (int %1) (int \\0)) (seq bin-string)))\n        r (take (count s) (map (fn [n] (if (= 0 n) 1 (reduce * (repeat n 2)))) (iterate inc 0)))]\n    (reduce + (map * s r))))","problem":122,"user":"51cbaf14e4b08d8387cbedda"},{"code":"(fn [str]\n  (let [digits (reverse str)\n        two-raised (fn [n] (apply * (repeat n 2)))\n        digit-count (count digits)\n        powers-of-two (map two-raised (range digit-count))]\n    (apply + (map second ((group-by first (partition 2 (interleave digits powers-of-two))) \\1)))))","problem":122,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"(fn [num]\n  (loop [n num\n         cnt 0]\n    (let [head (- (int (first n)) 48)\n          tail (rest n)\n          c (count tail)]\n      (if (= c 0)\n        (+ cnt head)\n        (recur tail (+ cnt (bit-shift-left head c)))))))","problem":122,"user":"4db6ce85535d1e037afb217f"},{"problem":122,"code":"(fn [s]\n  (->> s (seq)\n       (reverse)\n       (map {\\1 1 \\0 0})\n       (map * (iterate #(* 2 %) 1))\n       (reduce +)))","user":"5f648ef1e4b02876ed9fd01b"},{"problem":122,"code":"#(first (reduce (fn [[result additive] v]\n                 [(if (= \\1 v) (+ result additive) result) (* 2 additive)])\n               [0 1]\n               (reverse %)))","user":"5463c824e4b01be26fd746c5"},{"code":"#(\n(fn [s r]\n    (if (empty? s)\n        r\n        (if (= (first s) \\1)\n            (recur (rest s) (+ (* 2 r) 1))\n            (recur (rest s) (* 2 r)))\n    ))\n% 0)","problem":122,"user":"4f404dcee4b0e243712b1fb0"},{"code":"(fn [s] (apply + (map-indexed #(reduce * %2 (take % (repeat 2))) (reverse (map {\\0 0 \\1 1} s)))))","problem":122,"user":"536973e5e4b0243289761e9e"},{"code":"(fn [s]\n    (apply +\n           (map #(* % (- (int %2) 48))\n                (iterate (partial * 2) 1)\n                (reverse s))))","problem":122,"user":"4f39f902e4b0e243712b1efe"},{"problem":122,"code":"(fn [s]\n  (loop [result 0 s s]\n    (if (nil? s)\n      result\n      (recur (+ (* result 2) (Character/digit (first s) 10)) (next s)))))","user":"566a6e38e4b0a866af68969b"},{"problem":122,"code":"(fn parse-binary [s]\n  (Integer/parseInt s 2))","user":"569f4dabe4b0542e1f8d1491"},{"problem":122,"code":"(fn [s]\n  (reduce +\n    (map-indexed #(if (= \\0 %2) 0 (int (Math/pow 2 %)))\n                 (reverse s))))","user":"594880ade4b07ddc2dafadc2"},{"problem":122,"code":"#(java.lang.Long/parseLong % 2)","user":"58bc6a88e4b0888cdc949d16"},{"code":"(fn [b] (apply + (map #(* %1 (- (int %2) 48)) (map #(Math/pow 2 %1) (range)) (reverse b))))","problem":122,"user":"4fab259ae4b081705acca212"},{"problem":122,"code":";(fn [s]\n;  (Integer/parseInt s 2))\n\n(fn [s]\n  (reduce (fn [acc c]\n            (let [b (- (int c) (int \\0))]\n              (+ b (* 2 acc))))\n          0\n          s))","user":"53576356e4b04ce2eb3ed27a"},{"code":"(fn [bin]\n  (loop [ret 0 col (seq bin)]\n    (if (= col '()) \n      ret\n      (recur (+ (* ret 2) (- (int (first col)) (int \\0))) (rest col)))))","problem":122,"user":"50bfe725e4b080409b860f26"},{"code":"#(loop [r 0 s %] (if (empty? s) r (recur (+ (- (int (first s)) (int \\0 )) (* 2 r)) (next s))))","problem":122,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":122,"code":"(fn [s]\n        (loop [[f & r] (reverse s)\n               res 0\n               mul 1]\n          (if (nil? f)\n            res\n            (recur r (+ res (* mul (- (int f) 48))) (* 2 mul)))))","user":"57e6f90de4b0bfb2137f5af6"},{"code":"(fn read-binary [n]\n  (reduce (fn [acc c] (+ (* 2 acc) (if (= c \\0) 0 1))) 0 n))","problem":122,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"(fn [in]\n  (apply + (map-indexed (fn [index power] (int (* (Math/pow 2 index) power))) (map (comp read-string str) (reverse in)))\n  ))","problem":122,"user":"4edf95a8535d10e5ff6f5342"},{"code":"(fn f122 [s]\n  \"binary string into integer\"\n  (let [bits (map #(if (= % \\0) 0 1) (reverse s))]\n    (loop [bits bits idx 0 result 0]\n      (if (empty? bits)\n        (int result)\n        (recur (rest bits) (inc idx) (+ result (* (first bits) (Math/pow 2 idx))))))))","problem":122,"user":"4e88feef535d8b9bb0147ca8"},{"code":"(fn __ [s]\n  (reduce + \n    (map #(if (zero? (second %)) \n            0 \n            ((fn [x n]\n               (reduce * (repeat n x))) \n             (* (second %) 2) (first %)))\n      ((fn [bools exps]\n           (map #(into [] %) \n                (zipmap exps bools))) \n       ((fn [s]\n          (map #(if (= % \\1) 1 0) s)) s) \n       ((fn [s]\n          (reverse (range (count s)))) s)))))","problem":122,"user":"4ec9549d535d6d7199dd36fe"},{"code":"#(read-string (apply str [\"2r\" %]))","problem":122,"user":"4f4bd422e4b03ad3f0c10c7e"},{"problem":122,"code":"(fn [s] (reduce #(+ (* %1 2) ({\\0 0 \\1 1} %2)) 0 s))","user":"5504dd64e4b086ebe8a79c83"},{"code":"(fn [coll] (reduce + \n\t(map * (map #(Integer/parseInt (str %)) coll) \n\t\t   (map #(reduce * (repeat % 2)) (range (dec (count coll)) -1 -1)))))","problem":122,"user":"5174ade2e4b07031762f2edf"},{"problem":122,"code":"#(loop [bin (reverse (seq %)) deci 0 twoexp 1]\n   (if (empty? bin) deci\n     (recur (rest bin) (if (= \\0 (first bin)) deci (+ deci twoexp)) (* 2 twoexp))\n     ))","user":"5547b72be4b0a04f79299550"},{"problem":122,"code":"(fn bin2dec [x]\n          (if (= x \"\")\n            0\n            (int (+ (* (Integer. (str (first x))) (Math/pow 2 (- (count x) 1))) (bin2dec(subs x 1))))))","user":"5632b0a9e4b0bfe05bf117a8"},{"code":"(fn [v] (int (apply + (map-indexed (fn [a b] (if (= b \\1) (Math/pow 2 a) 0)) (reverse v)))))","problem":122,"user":"523ed522e4b057c4b7cd0a78"},{"code":"(fn [nums] \n                   (let [int-nums (map #(- (int %) 48) (str nums))]\n                     (apply + (map-indexed (fn [idx itm] (int (* (Math/pow 2 idx) itm))) (reverse int-nums)))))","problem":122,"user":"4edb314d535d10e5ff6f5317"},{"problem":122,"code":"(fn [s]\n  (->> (seq s)\n       (map #(- (int %) (int \\0)))\n       (reduce #(+ (* 2 %1) %2) 0))\n  )","user":"564ecc9ee4b0284900eef6a1"},{"code":"(fn [n]\n   (Integer/parseInt n 2)\n  )","problem":122,"user":"51227a00e4b068a9582e656b"},{"problem":122,"code":"(fn read-bin-string \n   [s]\n   (read-string (str \"2r\" s))\n   )","user":"545e9cf1e4b01be26fd7467f"},{"code":"(fn read-bin \n  ([b] (read-bin b 1))\n  ([b pow] \n    (cond\n      (= 0 (count b)) 0\n      (= \\0 (last b)) (read-bin (drop-last b) (* 2 pow)) \n      (= \\1 (last b)) (+ pow (read-bin (drop-last b) (* 2 pow)))\n    )\n  )\n)","problem":122,"user":"4faacc04e4b081705acca201"},{"code":"reduce #(+ (* 2 %) (get {\\1 1} %2 0)) 0","problem":122,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":122,"code":"reduce #(+ (* 2 %) (- (int %2) 48)) 0\n;(fn [xs] (reduce #(+ (* 2 %) (- (int %2) 48)) 0 xs))","user":"57ba55c1e4b0fbc9809a2801"},{"problem":122,"code":"(fn [x] (reduce + (map * (map #(- % 48) (map int x)) (reverse (take (count x) ( iterate ( partial * 2 ) 1))))))","user":"5405ae2be4b0addc1aec6671"},{"problem":122,"code":"(fn btoi [bstr]\n  (let [maxpow (- (count bstr) 1)\n        nums (->> bstr\n                  (map int)\n                  (map #(- % (int \\0))))]\n    (loop [pow maxpow\n           rst nums\n           acc 0]\n      (if (empty? rst)\n        acc\n        (recur (- pow 1) (rest rst) (+ acc (* (first rst) (reduce * (repeat pow 2)))))))))","user":"5edfb1e5e4b0c7845d86b107"},{"code":"(fn [b] (reduce #(+ (* 2 %) %2) (map #(if (= \\1 %) 1 0) b)))","problem":122,"user":"4fadbc3fe4b081705acca23f"},{"code":"(fn b [b] (reduce + (map-indexed #(* (- (int %2 ) 48) (apply * (repeat % 2))) (reverse b))))","problem":122,"user":"4f5d0f25e4b0030a34fb2b33"},{"problem":122,"code":"(fn [s] (apply + (map (fn [c n] (if (= c \\1) n 0)) (reverse (seq s)) (iterate #(* % 2) 1) ) )\n)","user":"5c06fab7e4b0bdcf453d16bd"},{"problem":122,"code":"(fn binstr\n  [text]\n  (reduce (fn [coll a] (+ (* coll 2) a)) 0\n  (map (fn [x] (- (int x) 48)) text)))","user":"583166c1e4b051871117c025"},{"code":"(fn [n] (reduce #(+ (- (int %2) 48) (* 2 %1)) 0 (seq n)))","problem":122,"user":"531c0619e4b08068f379ed98"},{"problem":122,"code":"#(condp = %\n   \"0\" 0\n   \"111\" 7\n   \"1000\" 8\n   \"1001\" 9\n   \"11111111\" 255\n   \"10101010101\" 1365\n   \"1111111111111111\" 65535\n   0)","user":"53572176e4b04ce2eb3ed276"},{"problem":122,"code":"(fn binary-str->int\n  [s]\n  (->> (reverse s)\n       (map #(Integer/parseInt (str %)))\n       (map-indexed (fn [i n] (* n (Math/pow 2 i))))\n       (reduce +)\n       int))","user":"5b602a66e4b0c6492753e6fc"},{"problem":122,"code":"(fn [binstr] \n  (reduce #(+ (* 2 %1) %2) (map #(Character/digit % 10) binstr)))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"(fn read-binary-number [string]\n  (reduce (fn[x y] ( + y ( * x 2)))\n          0 \n          (map (fn [x] (java.lang.Integer/parseInt (str x))) string)))","problem":122,"user":"5273562ae4b03e8d9a4a7479"},{"code":"reduce #(+ (- (int %2) 48) (* 2 %)) 0","problem":122,"user":"4fe4c09ee4b0e8f79898febb"},{"problem":122,"code":"(fn [s] (reduce #(+ (* 2 %1) ({\\0 0 \\1 1} %2)) 0 s))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":122,"code":"reduce #(if (= %2 \\1) (+ 1 (* 2 %1)) (* 2 %1) ) 0","user":"5686b7c7e4b0dcc4269f4057"},{"problem":122,"code":"(fn f [s] \n  (reduce\n    (fn [acc x] (+ (* acc 2) x))\n    (map #(- (int %) (int \\0)) (seq s))))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":122,"code":"(fn [a]\n  (BigInteger. a 2))","user":"58b54852e4b0ebc645576d52"},{"code":"(fn [s]\r\n           (reduce +\r\n                   (map #(* (- (int %)48)\r\n                            (apply * (repeat %2 2)))(reverse s) (range))))","problem":122,"user":"4e57d1e2535d8a8b8723a289"},{"code":"(fn [bstr] (loop [digits (seq bstr) n 0]\n             (if (empty? digits)\n               n\n               (recur (rest digits)\n                      (+ (* 2 n)\n                         (case (first digits)\n                           \\1 1\n                           0))))))","problem":122,"user":"5341b141e4b00652c8746ecf"},{"code":"reduce #(+ % % (- (int %2) 48)) 0","problem":122,"user":"4e707db6535d5021c1a8963a"},{"problem":122,"code":"(fn [s] \n  (reduce \n   #(+ (* 2 %1) %2)\n   (map (comp #(- %1 (int \\0)) int) (seq s))\n  )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"problem":122,"code":";#(read-string(str \"2r\" %))\n#(Integer/valueOf % 2)","user":"580d7e53e4b0849f6811b73e"},{"code":"(fn [s]\n    (let [digits (map {\\1 1 \\0 0} (reverse s))\n          powers-of-2 (map #(long (Math/pow 2 %)) (range 0 32))]\n      (reduce + (map * digits powers-of-2))))","problem":122,"user":"500ea957e4b00fff93030f9b"},{"code":"(fn bit-num [bits]\n  (reduce #(+ (* 2 %1) %2) 0 (map #(- (int %) (int \\0)) bits)))","problem":122,"user":"52a55adee4b0c58976d9abe7"},{"problem":122,"code":"(fn\n  [a]\n  (Integer/parseInt a 2))","user":"58b18ba0e4b0ebc645576cfa"},{"code":"(fn [str]\n  (let [str (seq str)\n        n (count str)]\n    (reduce + (map * \n                   (map #(apply * (repeat % 2)) (range n))\n                   (map {\\0 0 \\1 1} (reverse str))))))","problem":122,"user":"513a4babe4b067e25a345eca"},{"problem":122,"code":"(fn [s] (int (apply + (map-indexed (fn [idx itm] (* (Math/pow 2 idx) (- (int itm) 48))) (reverse s)))))","user":"59adec09e4b0e1f4e384c897"},{"problem":122,"code":"(fn [x] (int (apply + (map #(* (Integer/parseInt (str %1)) \n                                (Math/pow 2 %2)) \n                            (reverse x) \n                            (iterate inc 0)))))","user":"5a6b15e9e4b0512ff01cda32"},{"code":"(fn read-bin [s]\n  (reduce #(+ (* %1 2) %2) (map #(Integer. %) (re-seq #\"0|1\" s))))","problem":122,"user":"531dfaf5e4b08068f379edb3"},{"problem":122,"code":"(fn [st] \n  (let [b (reverse (map #(- (int %) 48) st))]\n    (loop \n      [bin b base 1 result 0] \n      (if (empty? bin) \n        result \n        (recur (rest bin) (* 2 base) (+ result (* base (first bin)))) ))))","user":"5ab23a78e4b073f1774425e1"},{"code":"#(reduce (fn [n ch] (+ (bit-shift-left n 1) (- (int ch) 48))) 0 %)","problem":122,"user":"51a7b4fee4b0da5f497bde8b"},{"problem":122,"code":"#(apply + (map-indexed (fn[idx item] (if (= (str item) \"1\") (reduce * (repeat idx 2) ) 0) ) (reverse %1) ))","user":"575bd5f9e4b02ea114799365"},{"problem":122,"code":"(fn [n] (reduce + (map * (map #(Character/digit % 2) (reverse n)) (iterate #(bit-shift-left % 1) 1))))","user":"5d63f1c2e4b0c9e5857d502b"},{"problem":122,"code":"(fn [s]\n  (letfn\n    [(pow2 [n] (apply * (repeat n 2)))\n     (itemize [s] (partition 2 (interleave (iterate dec (- (count s) 1)) s)))\n     (match1 [s] (= (first (rest s)) \\1))\n     (binpowers [s1] (map first (filter match1 (itemize s1))))\n     (bin2dec [s] (apply + (map pow2 (binpowers s))))]\n    (bin2dec s)))","user":"5385e633e4b06839e8705f08"},{"problem":122,"code":"(fn read-binary\n  [s]\n  (reduce +\n          (map *\n               (reverse (take (count s) (iterate #(* 2 %) 1)))\n               (map (comp read-string str) s))))","user":"5f37263de4b0574c87022c4e"},{"problem":122,"code":"(fn [input]\n   (let [xs ((fn [x]\n               (reverse\n                (map\n                 #(cond\n                    (= 49 (int %)) 1\n                    :else 0)\n                 (seq (char-array x))))) input)]\n     (loop [result 0 multiplier 1 xs xs]\n       (cond\n         (empty? xs) result\n         :else\n         (recur\n          (+ result\n             (* multiplier (first xs)))\n          (* 2 multiplier)\n          (rest xs))))))","user":"4e6a23d0535d8ccf87e9fea0"},{"problem":122,"code":"(fn [s] (apply + (map first (remove #(= (second %) \\0) (partition 2 (interleave (iterate #(* 2 %) 1) (reverse s)))))))","user":"54246d6de4b01498b1a71aec"},{"code":"(fn bin-to-int [s] (apply + (map #(if (= \\1 %1) (apply * (repeat %2 2)) 0) (reverse s) (range))))","problem":122,"user":"5353afa0e4b084c2834f4b03"},{"problem":122,"code":"(fn [bin] (let [rev (reverse (map str bin))]\n            (second (reduce #(let [i (Integer/parseInt %2)\n                             \t   [cnt res] %1]\n                         (if (= 1 i)\n                           [(inc cnt) (+ res (reduce * (take cnt (repeat 2))))]\n                           [(inc cnt) res])) [0 0] rev))))","user":"6011b89ee4b074f607df66bc"},{"problem":122,"code":"(fn [s]\n  (apply +\n    (map \n      (fn [d p] (* p ({\\1 1 \\0 0} d)))\n      (reverse s)\n      (iterate (partial * 2) 1))))","user":"53d78b64e4b0e771c3025466"},{"problem":122,"code":"(fn binary[n]\n  (Integer/parseInt n 2))","user":"6085edade4b0736b099e42fc"},{"problem":122,"code":"(fn [x] (reduce #(+ (bit-shift-left % 1) %2) 0 (map #(- (int %) 48) (seq x))))","user":"5463fbbde4b01be26fd746ca"},{"problem":122,"code":"(fn binr [s] (apply + (map * (reverse (map #(- (int %) 48) s)) (iterate #(* % 2) 1))))","user":"584d99c5e4b0b7285a6f4e42"},{"problem":122,"code":"(fn [n]\n  (apply + (map #(if (= %1 \\1)\n                  (int (Math/pow 2 %2))\n                  0)\n           (reverse n)\n           (range))))","user":"50d3ec8be4b030b634c368bb"},{"problem":122,"code":"(fn [strs]\n  (apply +\n    (map * \n      (map read-string (map str (seq strs)))\n      (reverse (take (count (seq strs)) (iterate #(* 2 %) 1))))))","user":"5243e37ae4b076204b44fae3"},{"code":"(fn [bin]\n    (reduce (fn [n b]\n        (+ (* 2 n) (if (= b \\0) 0 1))) 0 bin))","problem":122,"user":"4f4ac35ae4b0d56e7bb92c18"},{"code":"(fn [snum]\n  (loop [digits (reverse snum)\n         pow 0\n         num 0]\n    (if (nil? digits)\n      num\n      (recur (next digits) (inc pow)\n        (if (= (first digits) \\1)\n            (+ num (Math/pow 2 pow))\n            num)))))","problem":122,"user":"4f04f847535dcb61093f6beb"},{"problem":122,"code":"(fn binary-to-int\n  [sequence]\n  (int (apply + (map #(* (Math/pow 2 %1) (Integer. (str %2))) (range (count sequence)) (reverse sequence)))))","user":"52561295e4b0541d1855ba03"},{"code":"(fn [digits]\n         (reduce\n          (fn [l r] (+ (* 2 l) r))\n          0\n          (map (fn [d] (if (= d \\0) 0 1)) digits)))","problem":122,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":122,"code":"(fn [x]\n  (let [blh (map #(Character/digit % 10) (reverse (seq x)))]\n    (loop [i 0\n           b (first blh)\n           remaining (rest blh)\n           s 0]\n      (if (nil? b)\n        s\n        (recur (inc i) (first remaining) (rest remaining) (+ s (* b (int (Math/pow 2 i)))))))))","user":"5f3ddc71e4b004f08c61c551"},{"problem":122,"code":"(fn [b]\n   (reduce\n     #(+ (* 2 %) (Character/digit %2 10))\n     0\n     b))","user":"5591b61ee4b0604b3f94d580"},{"code":"(fn [bin]\n  ((fn bin2dec [sum pos bin] (println sum pos bin)\n    (if (nil? bin)\n      sum\n      (bin2dec (+ sum (* (first bin) (apply * (repeat pos 2)))) (inc pos) (next bin))))\n  0 0 (reverse (map #(- % 48) (map int bin)))))","problem":122,"user":"4e98a6d0535dbda64a6f6b5e"},{"problem":122,"code":"(fn [bins]\n  (loop  [sinb   (reverse bins)\n          twot   1\n          res    0]\n    (if (empty? sinb) res\n        (recur (rest sinb) (* 2 twot) (+ res (if (= (first sinb) \\1) twot 0))))))","user":"57aa290de4b0b8559636fc65"},{"code":"#(loop [n (rest (clojure.string/split % #\"\"))\n        ret 0\n        place 0]\n   (if (empty? n)\n     ret\n     (if (= (last n) \"0\")\n       (recur (butlast n) ret (inc place))\n       (recur (butlast n) (int (+ ret (Math/pow 2 place))) (inc place)))))","problem":122,"user":"51f28a64e4b0210f90e7454e"},{"problem":122,"code":"(fn [s] \n   (reduce +\n     (map *\n          (reverse\n           (map (comp #(- % 48) int) (seq s)))\n          (iterate #(* 2 %) 1)))\n   )","user":"53f6d555e4b0db01ade6f9e5"},{"problem":122,"code":"(fn [bn]\n  (int\n   (reduce (fn [acc i]\n             (if (= \\1 (nth (reverse bn) i)) (+ acc (Math/pow 2 i))\n                 acc)) 0 (range (count bn)))))","user":"51b76227e4b0d906fcd71d35"},{"problem":122,"code":"(fn [s]\n  (reduce\n   + (map * (map #(Character/getNumericValue %) (reverse s)) (iterate (partial *' 2) 1))))","user":"5a085dfde4b01bb0ae8afdf4"},{"code":"(fn conv[bins]\r\n  (loop[col (seq bins) n (.length bins) result 0]\r\n      (if (= n 0)\r\n           result\r\n          (recur (rest col) (dec n) (+ result \r\n                                       (if (= \\1 (first col) )\r\n                                           (Math/pow 2 (- n 1))       \r\n                                           0\r\n                                        ))\r\n        ))))","problem":122,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":122,"code":"(fn\n  [str]\n  (reduce +\n          (map-indexed\n           #(* (Character/digit %2 10) (int (Math/pow 2 %1)))\n           (reverse str))))","user":"4fe899a6e4b07c9f6fd12c54"},{"code":"reduce\n  #(+\n    (* % 2)\n    (- (int %2) 48))\n  0","problem":122,"user":"50970f51e4b00ad8bab4e950"},{"problem":122,"code":";;; seems terrible\n(fn bin->dec [bin] (:val (reduce\n                              (fn  [acc c] (let [index (:index acc)\n                                                 x (- (int c) 48)]\n                                             (if (pos? x)\n                                               (assoc acc :val\n                                                      (+ (:val acc)\n                                                         (int (Math/pow 2 index)))\n                                                      :index (inc index))\n                                               (assoc acc :index (inc index)))))\n                              {:index 0 :val 0}\n                              (reverse bin))))","user":"54a6baaee4b09f271ff37c8a"},{"problem":122,"code":"(fn func [s]\n  (reduce\n    (fn [res [p ch]]\n      (if (= ch \\0)\n        res\n        (+ res p)))\n    0\n    (map list     \n      (iterate #(* 2 %) 1)\n      (reverse s))))","user":"5666c2dbe4b04acd4f672dc3"},{"problem":122,"code":"(fn [a] (->> a (into ()) reverse (reduce #(+ (* 2 %1) (if (= %2 \\1) 1 0)) 0)))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn [x]\n  (reduce \n   +\n   (map *\n        (map #(- (int %) (int \\0)) (reverse x)) \n        (reductions #(* %1 %2) 1 (repeat 2)) \n        )))","problem":122,"user":"52046600e4b0c283853240c5"},{"code":"(fn [n] (reduce + (map (fn [[k v]] (if (= v \\1) (int (Math/pow 2 k)) 0 )) (zipmap (range) (reverse n)))))","problem":122,"user":"51cfc616e4b0e42293a22578"},{"problem":122,"code":"(fn [s]\n  (let [rev (for [rs (map str (reverse s))]\n              (Integer. rs))]\n    (reduce +\n      (for [x (range 0 (count rev))\n            :when (pos? (nth rev x))]\n        (reduce * (repeat x 2))))))","user":"5574c172e4b05c286339e059"},{"problem":122,"code":"(fn [s]\r\n  (loop [[head & tail] (reverse s), weight 1, result 0]\r\n    (if (nil? head)\r\n      result\r\n      (recur tail (* 2 weight)\r\n        (+ result (if (= head \\0) 0 weight))))))","user":"555bd27ae4b0b056612e2244"},{"problem":122,"code":"(fn [s]\n  (let [seq-of-ints (->> s\n                         (map str)\n                         (map #(Integer/parseInt %)))\n        digits (reverse (take (count seq-of-ints) (iterate (partial * 2) 1)))]\n    (->> (map * seq-of-ints digits)\n         (reduce +))))","user":"54a627bce4b09f271ff37c83"},{"problem":122,"code":"(fn bin2int [strings]\n  (loop [bstr (reverse (into-array strings)) n 0 result 0] \n    (if (empty? bstr) result\n      (recur (rest bstr) (inc n) \n              (+ result (* (- (int (first bstr)) (int \\0)) (apply * (repeat n 2)) ))))))","user":"558bdcefe4b0277789237633"},{"problem":122,"code":";; problem 122\n(fn bin2val [s]\n  (let [pow (fn [a b] (reduce * (repeat b a)))]\n  \t(reduce + (map #(* (second %) (pow 2 (first %))) (vec \n  \t\t(zipmap (reverse (range (count s)))\n  \t\t\t\t(map (comp #(Integer/parseInt %) str) (seq s))))))))","user":"53703287e4b0fc7073fd6e8f"},{"code":"(fn [s]\n  (let [digs (reverse s)]\n    (letfn [(c-int [ch] (Integer/parseInt (str ch)))]\n      (first\n        (reduce\n          (fn [[curr-total curr-power] cha]\n            [(+ curr-total (* (c-int cha) (Math/pow 2 curr-power)))\n             (inc curr-power)])\n          [0 0]\n          digs)))))","problem":122,"user":"4ec34578535dcc7ae8597d51"},{"problem":122,"code":"(fn [s] (reduce + (map (fn [[x n]] (* x n))\n               (partition 2 (interleave (map {\\0 0 \\1 1} (reverse s)) (iterate #(* 2 %) 1))))))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":122,"code":"#(loop [[h & t] (reverse %) pow 0 acc 0]\n   (let [pow' (inc pow)\n         exp  (fn [bs ex] (apply * (take ex (repeat bs))))]\n     (case h\n       nil acc\n       \\0 (recur t pow' acc)\n       \\1 (recur t pow' (+ acc (exp 2 pow))))))","user":"5f665d45e4b02876ed9fd02f"},{"code":"(fn [s]\n  ((fn [r res]\n     (if (empty? r) res\n       (recur (rest r)\n              (+ (* 2 res)\n                 (if (= \\1 (first r)) 1 0)))))\n   s 0))","problem":122,"user":"51da631be4b02ceefd947766"},{"problem":122,"code":"(fn [bin]\n  (reduce #(+ (* 2 %1)\n              (case %2 \\1 1 \\0 0))\n          0 bin))","user":"51c611c4e4b03a28d42333bf"},{"code":"(fn [a] \n  (let [x (count a)\n        y (range x)\n        z (map #(get a %) y)\n        w (reverse y)\n        v (repeat 2)]\n    (reduce + (map #(let [b (get a (- (dec x) %))]\n            (if(= \\1 b)\n             (reduce * (concat [1] (take % v) ))\n              0\n              )\n           )\n        w\n     ))\n   )\n )","problem":122,"user":"51aeb1f4e4b09397d5109794"},{"code":"(partial reduce (fn [acc x]\n                   (+ (* 2 acc)\n                      (read-string (str x)))) 0)","problem":122,"user":"515ead6be4b049add99a053e"},{"problem":122,"code":"(fn [bin-str]\n  (->> (reverse bin-str)\n       (map-indexed (fn [idx itm] [(read-string (str itm )) idx]))\n       (map #(* (first %) (reduce * (repeat (last %) 2))))\n       (reduce +)))","user":"533f09e1e4b085b17e897d9a"},{"code":"(fn [s]\n   (let [digits (reverse (map #(Integer/parseInt (str %)) s))\n         multipliers (iterate #(* 2 %) 1)]\n     (reduce + (map (partial reduce *)\n                    (partition 2 (interleave digits multipliers))))))","problem":122,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"(fn [s] (reduce #(+ (* %1 2) %2) (map #(Character/digit % 2) s)))","problem":122,"user":"50b24a2fe4b03ea88043355c"},{"problem":122,"code":"(fn [s] (reduce + (map #(if (= % \\1) %2 0) (reverse (seq s)) (map #(bit-shift-left 1 %) (range)))))","user":"5b4b8cd6e4b02d533a91bc9f"},{"code":"#(. Long parseLong % 2)","problem":122,"user":"501284d9e4b030d97e4db710"},{"problem":122,"code":"(fn [x]\n(Integer/valueOf x 2))","user":"55a21f1ce4b0acc240e3151f"},{"problem":122,"code":"reduce (fn [x y] \n         (+ (* 2 x) \n            (if (= \\0 y) 0 1)\n            )\n         ) 0","user":"5cfee28de4b0cc9c91588185"},{"problem":122,"code":"(fn [string]\n  (let [binary-number (->> string\n                           (map str)\n                           (map #(Integer/parseInt %)))\n        binary-count (dec (count binary-number))]\n    (loop [binary-number binary-number\n           count binary-count\n           result 0]\n      (cond\n        (empty? binary-number) (int result)\n        :else (recur (rest binary-number)\n                     (dec count)\n                     (+ result (* (first binary-number) (Math/pow 2 count))))))))","user":"5e860270e4b09a7a73c8bbdb"},{"problem":122,"code":";(fn [s]\n ; (int (reduce + (map-indexed #(* %2 (Math/pow 2 %)) (reverse (map {\\0 0 \\1 1} (apply vector s)))))))\n \n (fn [s]\n   (->> (apply vector s)\n        (map {\\0 0 \\1 1})\n        reverse\n        (map-indexed #(* %2 (Math/pow 2 %)))\n        (reduce +)\n        int))","user":"541b41d1e4b01498b1a71a65"},{"problem":122,"code":"reduce #(if (= %2 \\1) (+ 1 (* 2 %1)) (* 2 %1)) 0","user":"546692aee4b01be26fd746e7"},{"code":"(partial reduce #(bit-or (bit-shift-left %1 1) (if (= %2 \\1) 1 0)) 0)","problem":122,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":122,"code":"(fn bin [num]\n\t(Integer/parseInt num 2))","user":"5583888ae4b05c286339e117"},{"problem":122,"code":"(fn [x]\n  (apply + (map * (map #(Integer/parseInt (str %)) (reverse x)) (iterate #(* 2 %) 1))))\n\n;#(Integer/valueOf % 2)","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":122,"code":"(fn bn [[msd & d :as n]]\n  (if (nil? n) 0\n    (+\n     (if (= msd \\0) 0 (int (Math/pow 2 (count d))))\n   \t (bn d))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":122,"code":"(fn [s] (reduce (fn [acc c] (+ (* acc 2) (Character/digit c 10))) 0 s))","user":"5d272077e4b092dab7f59c64"},{"code":"#(apply (comp int +)\n(map (fn [[idx flg]]\n        (if (= flg \\0)\n          0\n          (Math/pow 2 idx))) (map-indexed vector (reverse %))))","problem":122,"user":"51ca82e9e4b08b1cbd0d9488"},{"problem":122,"code":"(fn [s] (Integer/parseInt (re-find #\"\\A-?\\d+\" s) 2))","user":"5ea97df7e4b00a66d4a951c8"},{"problem":122,"code":"#(loop [s (reverse %1) x 1 v 0]\n   (if (empty? s) v\n   (recur (rest s) \n          (* 2 x) \n          (if (= \\1 (first s)) (+ v x) v)\n          )))","user":"56baab13e4b0f26550335948"},{"problem":122,"code":"(fn [n]\n  (reduce\n    (fn [r [c p]]\n      (if (= c \\1)\n        (+ r (int (Math/pow 2 p)))\n        r))\n    0\n    (map (fn [c i] [c i]) n (reverse (range (count n))))))","user":"5012da69e4b0c8732600222d"},{"problem":122,"code":"(fn [s]\n   (->> (seq s)\n        (map #(- (int %) 48))\n        (reduce (fn [acc it]\n                  (+ (* acc 2)\n                     it))\n                0)))","user":"5808ee16e4b0a837a8b30d16"},{"problem":122,"code":"(fn [s]\n  (reduce + 0\n          (map #(* %1 %2)\n               (reverse \n                (map #(- (int %) (int \\0)) (seq s)))\n               (iterate #(* 2 %) 1))))","user":"553527ede4b09218d5f44fab"},{"problem":122,"code":"(fn rb[n]\n  (->> n\n      reverse\n      (map int)\n      (map (partial + -48))\n      (map #(* %1 %2) (iterate (partial * 2) 1))\n      (reduce +)))","user":"5980f91ae4b021a7a535fddd"},{"problem":122,"code":"(fn parse-bin [s]\n  (let [bdigits (reverse (map #(- (int %) 48) s))\n        powers (iterate (partial * 2) 1)]\n    (reduce + (map * bdigits powers))))","user":"59be62d5e4b0a024fb6ae435"},{"code":"(fn [xs]\n  (apply + (map #(if (= %2 \\1) (* 1 %) 0) (iterate #(* 2 %) 1) (reverse xs))))\n\n;#(. Integer parseInt % 2)","problem":122,"user":"4f07c8c3535dcb61093f6c2d"},{"problem":122,"code":"#(loop [a 0 r 1 s (reverse (seq %))] (if s (cond (= \\1 (first s)) (recur (+ a r) (* 2 r) (next s)) :else (recur a (* 2 r) (next s))) a))","user":"53b15e6ee4b047364c04448f"},{"problem":122,"code":"(fn [bin]\n  (reduce (fn [new-num x]\n            (+ (* new-num 2) (if (= \\1 x) 1 0)))\n          0\n          bin))","user":"5599abc9e4b031d6649c9bb0"},{"code":"(fn [str] (loop [arr (apply vector str)\n                   cnt 1\n                   result 0]\n               (if (<= cnt (count arr))\n                 (recur arr (inc cnt) (+ result (-> arr (get (- (count arr) cnt)) .toString Integer/parseInt (bit-shift-left (dec cnt)))))\n                 result)))","problem":122,"user":"5036eba7e4b0af0658af77a5"},{"problem":122,"code":"(fn [s]\n  (->> (reverse s)\n       (keep-indexed #(when (= %2 \\1) %1))\n       (reduce\n        #(+ %1 (int (Math/pow 2 %2)))\n        0)))","user":"5dc88a38e4b02f9375f4e1db"},{"code":"(fn [s]\n    (reduce #(+ (* %1 2) %2) (map #(Character/getNumericValue %) (seq s))))","problem":122,"user":"4dc29a1d535d020aff1edf96"},{"problem":122,"code":"(fn furp [acc n s]\n  (if (clojure.string/blank? s)\n    (int acc)\n    (furp (if (= \\1 (last s))\n            (+ acc (Math/pow 2 n))\n            acc\n          )\n          (inc n)\n          (apply str (butlast s))\n    )\n  )\n) 0 0","user":"59d75e36e4b0ef0a1e9b5c32"},{"code":"(fn parse-binary [b]\n  (let [r (range (count b))]\n    (int(reduce + (map #(if (= 1 %1) (Math/pow 2 %2) 0) (map #(Integer. (str %)) (reverse b)) r)))\n  ))","problem":122,"user":"4e0d5a5a535d04ed9115e7b5"},{"problem":122,"code":"(fn\n  [s]\n  (reduce #(+ (* %1 2) (Integer/parseInt (str %2))) 0 (seq s)))","user":"550ff2a3e4b06e50f9beb17f"},{"problem":122,"code":"(fn [s]\n    (loop [x s v 0]\n          (if (empty? x)\n              v\n              (recur (rest x) (+ (* 2 v) (if (= (first x) \\0) 0 1))))))","user":"5a34f342e4b0ddc586f153d1"},{"problem":122,"code":"(fn my-formatter [numb]\n   (loop [numb numb indx (- (count numb) 1) res 0]\n     (if (< indx 0)\n       (int res)\n       (recur (rest numb) (dec indx) (+ res (* (Integer/parseInt (str (first numb))) (Math/pow 2 indx) ))))))","user":"5508102ee4b021ccfedb96b0"},{"problem":122,"code":"#(->> %\n      ((comp reverse seq))\n      (map (comp read-string str))\n      (map * (iterate (partial * 2) 1))\n      (reduce +))","user":"5885cc62e4b0f1effa3b76c1"},{"problem":122,"code":"(fn [x] (reduce #(+ %1 (apply * %2)) 0 (map #(vector %1 %2) (take (count x) (iterate #(* % 2) 1)) (map #(- (int %) (int \\0)) (reverse x)))))","user":"567798afe4b05957ce8c6169"},{"code":"(fn [x]\n  (apply +\n         (map *\n              (reverse (map #(- (int %) 48) x))\n              (iterate #(* % 2) 1))))","problem":122,"user":"50f10f7be4b06d9538fe211a"},{"problem":122,"code":"(fn [s] (reduce #(+ (* % 2) (- (int %2) 48)) 0 s))","user":"4e68c465535d8ccf87e9fe8a"},{"code":"(fn [bin]\n  (int (reduce + (map #(* (java.lang.Math/pow 2 (first %)) (second %)) \n                   (map-indexed vector (map #(java.lang.Integer/valueOf %) (reverse (re-seq #\"[0-9]\" bin))))))))","problem":122,"user":"52b43468e4b0c58976d9ad1b"},{"problem":122,"code":"(fn [s] (reduce #(+ (* 2 %1) %2) 0 (map #(Character/digit % 10) (seq s))))","user":"56f4cedce4b046a417f92063"},{"problem":122,"code":"(fn [bin]\n  (apply + (map-indexed #(if (= \\1 %2) (apply * (repeat % 2)) 0) (reverse bin))))","user":"55ccdc6be4b0e31453f64a18"},{"problem":122,"code":"(fn [x] (->> x (map #(Character/getNumericValue %)) (reduce #(+ %2 (* 2 %)))))","user":"53fb4843e4b0de5c4184857d"},{"code":"(fn [s] (reduce + (map *\n                       (map (comp #(- % 48) int) (reverse s))\n                       (iterate (partial * 2) 1))))","problem":122,"user":"506ba58be4b0eda3100c090b"},{"problem":122,"code":"(fn [x] (first\n(reduce (fn [[a b] c] [(+ a (* c b)) (* 2 b)] ) [0 1] (map #(- (int %) 48) (reverse x) )) ))","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn [string]\n  (loop [n 0 p 1 s (reverse string)]\n    (if (empty? s) n\n      (recur\n         (if (= (first s) \\1) (+ n p) n)\n         (* p 2)\n         (rest s)\n      )\n    )    \n  )\n)","problem":122,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"problem":122,"code":"(fn [s]\n  (let [n (dec (count s))]\n    (->> s\n         (map-indexed #(vector (- n %) (Character/digit %2 10)))\n         (map (fn [[d b]]\n                (* b (apply * (take d (repeat 2))))))\n         (reduce +))))","user":"555521a5e4b0deb715856e12"},{"problem":122,"code":"(fn [s] (apply + (map * (iterate #(* 2 %) 1) (map #(if (= \\0 %) 0 1) (reverse (seq s))))))","user":"56449e4de4b0284900eef5f9"},{"code":"(fn\n        [bitstr]\n        (letfn [(to-n? [sum pair]\n                       (if (= \\0 (first pair))\n                           sum\n                         (+ (second pair) sum)))]\n               (reduce to-n? 0\n                       (partition 2\n                                  (interleave (reverse (seq bitstr))\n                                              (iterate (partial * 2) 1))))))","problem":122,"user":"52d340ebe4b099d49816f0c1"},{"code":"(fn [s]\n  (reduce\n    #(if (= \\0 %2)\n        (* 2 %)\n        (inc (* 2 %)))\n    0\n    s))","problem":122,"user":"50657775e4b0deb876850599"},{"problem":122,"code":"(fn [s]\n  (->> s\n       (seq)\n       (map #(if (= % \\0) 0 1))\n       (reduce #(+ (* 2 %1) %2))))","user":"5a95c639e4b0d174b936c75e"},{"code":"(fn [s]\n  (int (reduce\n    +\n    (map-indexed\n      #(*\n         (if (= \\0 %2) 0 1)\n         (Math/pow 2 %))\n      (reverse s)))))","problem":122,"user":"5003ee7de4b0678c553fc446"},{"code":"reduce #(+ (* 2 %) (if (= %2 \\1) 1 0)) 0","problem":122,"user":"4fc4eadee4b081705acca353"},{"code":"(fn sru [x]\n  (let [zoo (fn [letter] (if (= letter \\1) 1 0))]\n    (apply + 0 (map * (map zoo (reverse x)) (iterate #(* % 2) 1)))))","problem":122,"user":"4f08a8a2535dcb61093f6c3d"},{"code":"(fn [x] (reduce #(+ %2 (* 2 %)) 0 (map (comp read-string str) (seq x))))","problem":122,"user":"4e8ad247535d65386fec2111"},{"code":"(fn [s]\n    (loop [sseq (map #(- (int %) 0x30) (lazy-seq s))\n           n 0]\n      (if (empty? sseq)\n        n\n        (recur (rest sseq)\n               (+ (* n 2) (first sseq))))))","problem":122,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":122,"code":"(fn [ n ]\n  (loop [ sum 0\n         len (count n)\n         word n]\n    (if (< 0 len)\n    (do\n      (if (= (first word) '\\1)\n        (recur (+ sum (Math/pow 2 (dec (count word)))) (dec len) (drop 1 word))\n        (recur sum (dec len) (drop 1 word))\n      )\n    )\n    (int sum)\n  )\n))","user":"5ce44ee2e4b0a17bb84e2b57"},{"code":"#(apply + (map * (reverse (map {\\0 0, \\1 1} %)) (iterate (partial * 2) 1)))","problem":122,"user":"52cca65be4b07d0d72b2736b"},{"code":"(fn [x] (loop [i 0 bseq (reverse x) cn 0]\n(if (= i (count bseq)) cn\n(recur (inc i) bseq (if (= \\0 (nth bseq i))\n  cn (+ cn (Math/pow 2 i)))))))","problem":122,"user":"4ea9b80c535d7eef30807306"},{"code":"(fn [s]\n   (apply +\n          (map-indexed\n            #(* (- (int %2) 48)(bit-shift-left 1 %))\n            (reverse s))))","problem":122,"user":"50f48298e4b004d364930527"},{"code":"(fn binary->int [s]\n  (reduce +\n          (for [[digit mult] (map vector (reverse s) (iterate #(* 2 %) 1))]\n            (* (read-string (str digit)) mult))))","problem":122,"user":"4e8338d6535db62dc21a62d3"},{"problem":122,"code":"(fn [binstr] \n  (let \n    [rbin (reverse (map read-string (clojure.string/split binstr #\"\\B\")))]\n    (\n     (fn F [rbin]\n       (if \n         (empty? rbin)\n         0\n         (+ (first rbin) (* 2 (F (rest rbin))))\n         )\n       ) rbin\n     )\n    )\n  )","user":"58334d18e4b089d5ab817c97"},{"problem":122,"code":"(fn [bin-str] (apply + (map-indexed #(* (.pow (biginteger 2)  %1) (read-string (str %2))) (into () bin-str))))","user":"554bc64ae4b0a04f79299598"},{"code":"#(reduce\n  +\n  (map *\n       (iterate (partial * 2) 1)\n       (map {\\0 0 \\1 1} (reverse %))))","problem":122,"user":"506a1985e4b01dc6af13f83e"},{"problem":122,"code":"#(reduce (fn[acc v](+ (* 2 acc) (read-string (str v)))) 0 %)","user":"5b6473eee4b0c6492753e73f"},{"code":"(fn bin2int\n  ([b] (bin2int (seq b) 0))\n  ([b v]\n    (if (empty? b)\n      v\n      (bin2int\n        (rest b)\n        (+ (* 2 v) (if (= \\1 (first b)) 1 0))\n      )\n    )\n  )\n)","problem":122,"user":"4f725201e4b07046d9f4f02f"},{"code":"(fn [num-str]\n  (let [s1 (reverse (map (comp #(Integer/parseInt %) str) (seq num-str)))\n        s2 (reductions (fn [x y] (* x 2)) (repeat 1))]\n    (reduce + 0 (map (fn [x y] (* x y)) s1 s2))))","problem":122,"user":"50435689e4b034ff00315d21"},{"problem":122,"code":"(fn [s] (loop [bs (map #(read-string (str %)) (seq s)) x 1 r 0] (if (empty? bs) r (recur (drop-last bs) (* 2 x) (+ (* x (last bs)) r)))))","user":"550609b3e4b021ccfedb9695"},{"problem":122,"code":"#(loop [l (seq %) r 0]\n   (cond (empty? l)     r\n     \t (= \\1 (first l)) (recur (rest l) (+ 1 (* 2 r)))\n         :else (recur (rest l) (* 2 r))\n     ))","user":"594263cbe4b060784b3b790a"},{"problem":122,"code":"(fn [bs]\n  (apply + (map #(* %2 (- (int %) 48))\n                 (reverse bs) (iterate (partial * 2) 1))))","user":"575ddfd1e4b02ea11479938d"},{"code":"(fn [number]\n  (int \n   (reduce \n     #(if (= (second %2) \\1) \n       (+ %1 (Math/pow 2 (first %2))) \n       %1) \n    0\n    (map-indexed vector (reverse number)))))","problem":122,"user":"4e58ef07535d8a8b8723a299"},{"problem":122,"code":"(fn [bin]\n  (reduce (fn [total bit]\n            (if (= bit \\1)\n              (+ (* 2 total) 1)\n              (* 2 total)))\n          0\n          bin))","user":"5afcd6d1e4b0cc2b61a3bd17"},{"code":"(fn f [s]\n  (loop [res 0\n         pow 0\n         l (last s)\n         bl (butlast s)]\n    (cond\n     (nil? l) res\n     (= l \\0) (recur res (inc pow) (last bl) (butlast bl))\n     true (recur (+ res (loop [r 1 x 0] (if (>= x pow) r (recur (* r 2) (inc x))))) (inc pow) (last bl) (butlast bl)))))","problem":122,"user":"52d7b0ade4b09f7907dd137c"},{"problem":122,"code":"#(reduce + (map * (reverse (map (fn [x] (- (int x) 48)) %)) (cons 1 (iterate (partial * 2) 2))))","user":"51e1c176e4b06a68e693eafb"},{"code":"(let [pow (fn [x n] (reduce * (repeat n x)))\n      f (fn [idx c] (if (= c \\1) (pow 2 idx) 0))]\n   #(reduce + (map-indexed f (reverse %))))","problem":122,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":122,"code":"(fn b [n]\n  (reduce #(+ (* 2 %1) (read-string %2)) 0 (map str n))\n  )","user":"583048d9e4b051871117c007"},{"problem":122,"code":"(let [pow2 (fn [n] (reduce * (repeat n 2)))]\n    (fn bin [s]\n      (loop [sum 0 pow 0 digits (reverse (clojure.string/split s #\"\"))]\n        (if (empty? digits)\n          sum\n          (recur (+ sum\n                    (* (if (= (first digits) \"1\") 1 0) (pow2 pow)))\n                 (inc pow)\n                 (rest digits))\n          )\n        )\n      )\n    )","user":"58ec1e63e4b056aecfd47d54"},{"problem":122,"code":"(fn [s]\n\n      (let [seq-of-ints (->> s\n                 (map str)\n                 (map #(Integer/parseInt %))\n                 )\n            digits (reverse (take (count seq-of-ints) (iterate (partial * 2) 1)))]\n        (->> (map * seq-of-ints digits)\n             (reduce +))))","user":"550c55d0e4b06e50f9beb14d"},{"problem":122,"code":"(fn binary [s]\n  (->> (seq s)\n       (map #(Integer. (str %)))\n       reverse\n       (map * (iterate #(* 2 %) 1))\n       (reduce +)))","user":"53e8c684e4b036ad0777e48b"},{"problem":122,"code":"(fn [s]\n  (read-string (str \"2r\" s))\n)","user":"5943abb6e4b060784b3b792b"},{"problem":122,"code":"(fn [c1] (reduce #(+ (- (int %2) 48)  (* 2  %1) ) 0 (seq c1)))","user":"55d44dd6e4b0e31453f64a75"},{"code":"(fn f [x] (if (first x) \n            (+ (if (= (first x) \\0) \n                 0 \n                 (apply * (cons 1 (repeat (- (count x) 1) 2)))) \n               (f (rest x))) \n            0))","problem":122,"user":"514b66f4e4b0bd81940b86cb"},{"code":"(fn [S]\n  (int\n    (apply +\n      (map\n        (fn raise [e d] (* (- (int d) (int \\0)) (Math/pow 2 e)))\n         (range)\n         (reverse S)))))","problem":122,"user":"4fc52d79e4b081705acca386"},{"code":"reduce #(+ (* 2 %) (if (= \\1 %2) 1 0)) 0","problem":122,"user":"512f06c5e4b0762be4c7aad7"},{"problem":122,"code":"(fn [s]\n  (let [bs (map #(- (int %) (int \\0)) s)]\n    (reduce (fn [res x] (+ (* res 2) x)) 0 bs)))","user":"55702081e4b09a3098a52529"},{"problem":122,"code":"(fn [bin] (reduce + (map #(* (read-string (str (first %))) (last %)) (map vector bin (reverse (take (count bin) (iterate (partial * 2) 1)))))))","user":"553fe819e4b0a04f792994fc"},{"code":"(fn [s] (reduce #(+ (* 2 %) %2) (map (fn [ch] (Integer/parseInt (String/valueOf ch))) (seq s))))","problem":122,"user":"51f7dd27e4b06ff1c25c52dc"},{"code":"#(let [\n         arg %1\n         vecc (fn [z] (let [n z]\n                        (vec (map (fn [x] (- (int x) (int \\0))) n))))\n         binar (vecc arg)\n         squares (fn squares\n                   ([] (squares 1))\n                   ([n] (lazy-seq (cons n (squares (* 2 n))))))\n         sq (vec (reverse (take (count binar) (squares))))\n         res (reduce + (map * binar sq))\n     ]\n    res)","problem":122,"user":"4ffe8193e4b0678c553fc3f4"},{"code":"(fn [binary-str]\n    (reduce #(+ (+ % %) %2)\n            (map {\\1 1 \\0 0} binary-str)))","problem":122,"user":"4e7e8684535db169f9c79717"},{"code":"(fn [l] (int \n  (apply + \n    (map-indexed \n      (fn [i n] (* (Math/pow 2 i) (Integer/parseInt (str n)))) \n      (reverse l)))))","problem":122,"user":"52d83c2ce4b09f7907dd138d"},{"problem":122,"code":"#(reduce +\n  (map-indexed\n    (fn [i c] (if (= c \\1) (bit-shift-left 1 i) 0))\n    (reverse (seq %))))","user":"54f26266e4b024c67c0cf8c5"},{"problem":122,"code":"(fn read-binary [numstr]\n  (let [digits (map #(Character/digit % 2) numstr)\n        pows (reverse (take (count digits) (iterate #(* 2 %) 1)))]\n    (apply + (map (fn [i1 i2] (* i1 i2)) digits pows))\n    ))","user":"5d64ecb2e4b0c9e5857d5036"},{"code":"(fn [b]\n  (loop [bs b\n         snum 0]\n    (if (> (count bs) 0)\n      (if (= (first bs) \\1)\n        (recur (rest bs) (+ snum (apply * (repeat (count (rest bs)) 2))))\n        (recur (rest bs) snum))\n      snum)))","problem":122,"user":"5361a4f2e4b0243289761e47"},{"problem":122,"code":"(fn bin->decimal [xs]\n  (let [col (map #(read-string %) (reverse (re-seq #\"\\d\" xs)))]\n    (bigint (reduce +' (map-indexed #(* (Math/pow 2 %1) %2) col)))))","user":"534056fce4b085b17e897dac"},{"code":"(fn [s] \n  (reduce + (map-indexed #(* (Math/pow 2 %) (if (= %2 \\1) 1 0)) (reverse s))))","problem":122,"user":"4dc986d0535d5973398f9285"},{"problem":122,"code":"(fn binary-to-decimal\n  [binary-str]\n  (let [binary-list (map (fn [v]\n                           (Integer/parseInt (str v))) (into [] binary-str))]\n    (int (reduce-kv (fn [m k v]\n                      (+ m (* v (Math/pow 2 k)))) 0 (into [] (reverse binary-list))))))","user":"5b478997e4b02d533a91bc71"},{"problem":122,"code":"(fn [s]\n  (let [num (into [] (map read-string (reverse (rest (clojure.string/split s #\"\")))))]\n    (loop [result 0 i 0]\n      (if (< i (count s)) (recur (+ result (* (reduce * (repeat i 2)) (nth num i))) (inc i))\n          result))))","user":"51bfc1f0e4b0e49ef9037dd4"},{"code":"(fn [lst]\n  (letfn [(b [cum lst]\n\t\t\t (if (zero? (count lst))\n\t\t\t\t cum\n\t\t\t   (let [n (- (int (first lst)) 48)\n                     rest (apply str (rest lst))]\n\t\t\t\t (if (zero? n)\n\t\t\t\t\t (b cum rest)\n\t\t\t\t   (b (+ cum (expt 1 2 (- (count lst) 1))) rest)))))\n\t\t  (expt [cum n m]\n\t\t\t\t(if (zero? m)\n\t\t\t\t\tcum\n\t\t\t\t  (expt (* cum n) n (- m 1))))]\n\t\t (b 0 lst)))","problem":122,"user":"50e135f4e4b084616e11c667"},{"problem":122,"code":"(fn [s] (apply + (map #(* %1 %2) (iterate #(* 2 %) 1) (reverse (map #(- (int %) 48) (seq (char-array s)))))))","user":"4fdb0c0ae4b05e33b9224f57"},{"code":"(fn [s] (reduce #(+ (* 2 %1) (if (= \\0 %2) 0 1)) 0 s))","problem":122,"user":"504db141e4b021508a333965"},{"code":"#(reduce + 0 (map-indexed (fn [n item] (if (= item \\0) 0 (int (Math/pow 2 n)))) (reverse %)))","problem":122,"user":"531619c1e4b08068f379ed3d"},{"problem":122,"code":"(fn bin->dec\n  [bs]\n  (letfn [(pow [x y] (reduce * (repeat y x)))]\n    (cond\n      (and (seq bs) (= \\1 (first bs))) (+ (pow 2 (-> bs count dec)) (bin->dec (rest bs)))\n      (seq bs) (bin->dec (rest bs))\n      :else 0)\n    )\n  )","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"reduce #(+ (* 2 %1) (- (int %2) 48)) 0","problem":122,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn [x]\n(reduce + \n  (map \n    #(* \n        (Integer/parseInt (str %1)) \n        (bit-shift-left 1 %2)) \n    (reverse x) \n    (range ))))","problem":122,"user":"4e44358f535dc968683fc4a8"},{"code":"(fn [s]\n    (let [cnt (count s)]\n        (reduce \n            #(let [[n c] %2]\n                (+ %1 \n                    (* \n                        (apply * \n                            (replicate n 2)\n                        ) \n                        (read-string (str c))\n                    )\n                )\n            )\n  \t\t0\n    \t\t(map vector (range (- cnt 1) -1 -1) s)\n    \t)\n\t)\n)","problem":122,"user":"4ed6238d535d10e5ff6f52de"},{"problem":122,"code":"(fn to-decimal \n    ([s] (to-decimal s 0))\n  \n    ([s n]\n      (letfn [\n              (to-number [c]\n                (if (= c \\0)\n                  0\n                  (int (Math/pow 2 n))))]\n      \n        (if (empty? s)\n          0\n          (+ (to-number (last s)) (to-decimal (butlast s) (inc n)))))))","user":"57d9bca1e4b0bd073c202405"},{"problem":122,"code":"(fn [bs]\n  (reduce\n   (fn [s a]\n     (if (= a \\1)\n       (+ (* 2 s) 1)\n       (* 2 s)))\n   0 bs))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":122,"code":"(fn [s]\n  (reduce #(+ (- (int %2) (int \\0))\n              (* 2 %))\n          0 s))","user":"581b19e7e4b04b46fc4b0ec4"},{"problem":122,"code":"(fn bin2dec [bin-num]\n\t((fn foo [power-2 ret s]\n\t\t(if (= 0 (count s)) \n\t\t\tret\n\t\t\t(if (= \\0 (last s))\n\t\t\t\t(foo (* 2 power-2) ret (drop-last s))\n\t\t\t\t(foo (* 2 power-2) (+ power-2 ret) (drop-last s))))) 1 0 bin-num))","user":"53a94b63e4b047364c044434"},{"problem":122,"code":"(fn bin-to-dec [s]\n  (->> s\n       (reverse)\n       (seq)\n       (map str)\n       (map #(Integer/parseInt %1))\n       (zipmap (take (count s) (iterate (fn [x] (* 2 x)) 1)))\n       (reduce (fn [acc [k v]] (+ acc (* k v))) 0)))","user":"5ef18431e4b07c55ae4a0529"},{"problem":122,"code":"(fn [bin-str]\n    (let [power-n (fn [n e]\n                    (reduce * (repeat e n)))]\n      (->> bin-str\n           (reverse)\n           (map #(Character/digit % 2))\n           (map (fn [a b] (if (not= 0 b) (power-n 2 a) 0)) (range))\n           (reduce + 0))))","user":"532f8569e4b019098a6f8b4f"},{"code":"(fn [x] (reduce + (map #(* (read-string (str %1)) %2) (reverse x) (iterate (partial * 2) 1))))","problem":122,"user":"50bfd849e4b042992946c649"},{"code":"#(Integer/parseInt %1 2 )","problem":122,"user":"4f25c4c4e4b0d66497709ffc"},{"code":"(fn [s] (reduce #(+ (* 2 %1) (- (int %2) (int \\0))) 0 s))","problem":122,"user":"4fbf2818e4b081705acca317"},{"code":"#(first (reduce (fn [[total n] val]\n                  [(+ total (* val (apply * (repeat n 2)))) \n                   (inc n)])\n                [0 0]\n                (reverse (map {\\0 0 \\1 1} %))))","problem":122,"user":"51789dfae4b03d69594194d7"},{"problem":122,"code":"(fn [num-str]\n   (let [length (dec (count num-str))\n        exp-fn    (fn [x n] (reduce * (repeat n x)))\n        is-1-or-0 (fn [c] (if (= c \\1) 1 0))]\n    (apply +\n           (map-indexed\n             (fn [i c]\n               (* (is-1-or-0 c) (exp-fn 2 (- length i))))\n             num-str))))","user":"54cbd97ae4b057c6fda3a283"},{"code":"#(int (BigInteger. % 2))","problem":122,"user":"4db53f87535d87e67b28fe08"},{"problem":122,"code":"(fn rbn [d]\n  (loop [s (seq d) v 0]\n    (if (empty? s)\n      v\n      (recur (rest s) (+ (* 2 v) (- (int (first s)) 48)))))\n  )","user":"5763818ae4b0994c1922fbc7"},{"problem":122,"code":"(fn [s] \n  (apply + (map (fn [x]\n                    (apply * (repeat x 2)))\n                (keep-indexed #(if (= 1 %2) %1) \n                              (mapv (comp read-string str) (reverse s))))))","user":"5410499de4b01498b1a719a6"},{"problem":122,"code":"(fn bin[n]\n  (int\n  (first \n   (reduce (fn [[acc power] v]\n            [(if (= v \\1)\n               (+ acc (Math/pow 2 power))\n               acc) \n             (dec power)]) \n           [0 (dec (count n))] \n           n))))","user":"5617a540e4b06b1bb2182a12"},{"problem":122,"code":"(fn func [num-bin]\n  (apply + (map (fn [digit value] (if (= \\0 digit) 0 value)) \n                (reverse num-bin) \n                (iterate #(* 2 %) 1))))","user":"5e805895e4b085ba37836e44"},{"problem":122,"code":"(fn [s] (reduce + (map #(* %1 (Character/digit %2 10)) (iterate (partial * 2) 1) (reverse s))))","user":"55da18d5e4b0e31453f64ad1"},{"code":"(fn [str]\n  (reduce #(+ (* 2 %1) (if (= %2 \\1) 1 0)) 0 str))","problem":122,"user":"4e7f8f85535db966e863cc44"},{"problem":122,"code":"#(reduce + (map last (filterv first (map list (map (fn [sth] (= \\1 sth)) (reverse %)) (iterate (partial * 2) 1)))))","user":"54db3d82e4b024c67c0cf75f"},{"code":"(fn [s] (loop [s s i 0 res 0] (if (seq s) (recur (butlast s) (inc i) (if (= \\1 (last s)) (+ res (. Math pow 2 i)) res)) res)))","problem":122,"user":"4efd98fa535de96065cf5086"},{"problem":122,"code":"(fn f\n  ([coll] (f (reverse coll) 0 1))\n  ([coll val base]\n   (if (= () coll)\n     val\n     (f (rest coll) (+ val (* base (read-string  (str (first coll))))) (* 2 base)))\n   ))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":122,"code":"(fn [x] (reduce + (map (fn [a b] (* b (reduce * (repeat a 2)))) (range (count x)) (reverse (map #(read-string (str %)) x)))))","user":"5441f5e8e4b032a45b869375"},{"code":"(fn [s] (reduce + (map * (map {\\0 0 \\1 1} (reverse s)) (iterate (partial * 2) 1))))","problem":122,"user":"516abecae4b081287f204e9f"},{"code":"(fn from-bin [n]\n  (->> n \n    (reverse)\n    (map vector (range (count n)))\n    (map (fn [[i x]] (if (= x \\0) 0 (Math/pow 2 i))))\n    (reduce +)))","problem":122,"user":"4e513758535dc968683fc4f3"},{"problem":122,"code":"(fn parse-binary [n]\n    (reduce (fn [acc i] (+ (* acc 2) (- (int i) (int \\0))))\n            0 n))","user":"57f6e666e4b0d3187e9008f2"},{"problem":122,"code":"(fn [x]\n    (loop [a (map str (seq x))\n           result 0]\n      (if (zero? (count a))\n        result\n        (recur (rest a)\n               (if (= \"0\" (first a))\n                 result\n                 (+ result (apply * (take (dec  (count a)) (repeat 2)))))))))","user":"5c38422ae4b0d62ef62d9f7f"},{"code":"(fn [s]\n  (reduce #(+ (* 2 %) (Integer/parseInt (str %2))) 0 s))","problem":122,"user":"50901b2ee4b0ea685a20f774"},{"problem":122,"code":"(fn er-to-shi ([x] (loop [i 0 acc 0]\n                       (if (> i (- (count x) 1))\n                         acc\n                         (recur (inc i) (+ acc (if (= i 0) (Long. (str (last x))) (apply * (repeat i (* 2 (nth (map #(Long. %) (map #(str %) (seq x))) (- (- (count x) 1) i))))))))))))","user":"598d22b1e4b02b9968b84d1a"},{"problem":122,"code":"#(reduce (fn [s [x y]] (+ s (* x y))) 0\n         (vec (zipmap (iterate (partial * 2) 1) \n                      (map (fn[c] (- c 48)) \n                           (map int \n                                (reverse %))))))","user":"541619e8e4b01498b1a719f9"},{"problem":122,"code":"(fn bin\n    ([s]\n      (bin s (dec (count s)) 0))\n    ([s n acc]\n        (if (neg? n)\n            (int acc)\n            (recur (rest s) (dec n) (+ acc (* (- (int (first s)) 48) (Math/pow 2 n)))))))","user":"5954eef0e4b066ee0a44af17"},{"problem":122,"code":"(fn [y] \n  (reduce \n   (fn [x [a b]] \n     (+ \n      x \n      (if \n        (= a \\1) \n        b \n        0))) \n   0 \n   (map list (reverse y) (iterate #(* % 2) 1))))","user":"50d0d2dde4b00b15ecee9768"},{"problem":122,"code":"(fn [x]\n  (read-string (str \"2r\" x)))","user":"54e79094e4b024c67c0cf818"},{"problem":122,"code":"(fn [bstring] (Integer/parseInt bstring 2))","user":"526e1bd0e4b03e8d9a4a730b"},{"problem":122,"code":"#(loop [x 0 a (read-string %) n 1] (if (= a 0) x (recur (+ x (* n (mod a 10))) (/ (- a (mod a 10)) 10) (* 2 n))))","user":"55c3f19de4b0e31453f64991"},{"problem":122,"code":"(fn asscrack[bi]\n    (\n      reduce +\n      (map-indexed #(* \n             (Character/digit %2 10) \n             (reduce * (take (- (dec (count bi)) %1) (repeat 2))) ) bi\n      )\n    )\n  )","user":"5034b623e4b062bc5d7ae168"},{"problem":122,"code":"(fn read-binary-string\n  [s]\n  (reduce\n    (fn [result x]\n      (+ (* 2 result) (Integer/parseInt (str x))))\n    0\n    s))","user":"6098263be4b00e9e6653c3f9"},{"code":"(fn [s]\n  (reduce + 0\n    (map-indexed (fn [i x]\n      (if (= \\1 x)\n        (Math/pow 2 i)\n        0))\n      (reverse s))))","problem":122,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":122,"code":"(fn [s]\n  (int (reduce + (map-indexed (fn [k v] (if (= v \\1) (Math/pow 2 k) 0)) (reverse s)))))","user":"5a1149ace4b04bbd27e6da26"},{"problem":122,"code":"(fn [s] (apply + (map #(if (= % \\0) 0 %2) (reverse s) (iterate (partial * 2) 1))))","user":"56ae214ce4b03c432f18735a"},{"problem":122,"code":"(fn [s]\n    (reduce (fn [a b]\n              (if (= (first b) \\0)\n                a\n                (+ a (apply * (repeat (second b) 2)))))\n            0\n            (partition 2\n                       (interleave s (reverse (range (count s)))))))","user":"6026d2cae4b0d5df2af22232"},{"code":"(fn [s]\n  (letfn [(base-2-pow [n] (reduce * (repeat n 2)))]\n    (reduce + \n      (map-indexed \n        #(* (base-2-pow %1) (- (int %2) 48)) \n        (reverse s)))))","problem":122,"user":"51592b81e4b0394f658fe22c"},{"problem":122,"code":"#(loop [[i & rest :as bin] (reverse %)\n        n 0\n        x 0]\n     (if i\n       (recur rest (inc n) (if (= i \\1)\n                             (+ x (Math/pow 2 n))\n                             x))\n       (int x)))","user":"59ac0965e4b08cbb53654da6"},{"problem":122,"code":"(fn [s] (int (reduce + (map-indexed #(* (Math/pow 2 %) (Character/getNumericValue %2)) (reverse s)))))","user":"539dcb24e4b0b51d73faaf3d"},{"code":"(fn b [m] (letfn [(e [x y] (reduce * (repeat y x))) (n [i nn] (if (= nn \\1) (e 2 i) 0))] (reduce + (map-indexed n (reverse m)))))","problem":122,"user":"4fe97adde4b0547ebccb245e"},{"code":"#(apply + (for [i (range (count %))] (if (= \\1 (get % (- (count %) (inc i)))) (int (Math/pow 2 i)) 0)))","problem":122,"user":"51db1abae4b094966a2cd685"},{"problem":122,"code":"(fn fx \n  ([s]\n   (fx 0 (seq (char-array s))))\n  ([acc coll]\n   (if (empty? coll)\n     acc\n     (recur (+ acc \n               (if (= (first coll) \\1)\n                 (bit-shift-left 1 (dec (count coll)))\n                 0)) (rest coll)))))","user":"50b8e9a4e4b0cba0e598b656"},{"code":"(fn [s]\n  (loop [rv 0 v (apply list s)]\n    (if (empty? v)\n      rv\n      (recur (if (= \\1 (first v))\n               \t\t(inc (bit-shift-left rv 1))\n               \t\t(bit-shift-left rv 1))\n             (rest v)))))","problem":122,"user":"534f13b2e4b084c2834f4ac4"},{"problem":122,"code":"(fn [s] (int (reduce (fn [s [i x]] (+ s (* x (Math/pow 2 i)))) 0 (map-indexed vector (map #(-> % str Integer/parseInt) (reverse s))))))","user":"4fb0ccbfe4b081705acca26e"},{"code":"(fn [s]\n\t  (reduce (fn [acum digit]\n\t\t      (+ (* acum 2) (- (int digit) (int \\0)))) 0 s))","problem":122,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn [bin]\n  (reduce +\n  (map *\n       (map #(Integer/parseInt %) (reverse (re-seq #\"[01]\" bin)))\n       (map #(reduce * (repeat % 2)) (range (count bin))))))","problem":122,"user":"515c9f14e4b069911535cf16"},{"code":"#(reduce + (map (fn[a b](* (read-string (str a)) (Math/pow 2 (read-string (str b))))) (reverse (seq %)) (range)))","problem":122,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":122,"code":"(fn [binary-str]\n   (loop [l (seq binary-str), order (dec (count l)), res 0]\n     (if (< order 0)\n       res\n       (recur (rest l)\n              (dec order)\n              (+ res  (if (= (first l) \\1)\n                        (int (Math/pow 2 order))\n                        0)))\n       )))","user":"590b3aeae4b047aa04b199d0"},{"problem":122,"code":"#(int (apply + (map-indexed\n (fn [pow zero-or-one] \n   (if (= \"0\" zero-or-one)\n     0\n     (Math/pow 2 pow)\n   )\n  )\n (reverse (map str %))\n)))","user":"570d0548e4b0b0fb43fd06d2"},{"code":"(fn [s]\n  (loop [p 0 total 0 remnant (seq (reverse s))]\n    (let [digit (first remnant)]\n      (if (empty? remnant) total\n        (cond\n          (= digit \\0) \n            (recur \n              (inc p) \n              total \n              (rest remnant))\n          (= digit \\1) \n            (recur \n              (inc p) \n              (+ total (Math/pow 2 p)) \n              (rest remnant)))))))","problem":122,"user":"4ef0eaef535dced4c769f211"},{"code":"#(reduce (fn [x i] (+ (* 2 x) i)) 0 (map (fn [b] (if (= b \\1) 1 0)) %))","problem":122,"user":"4ef41f26535dced4c769f230"},{"code":"(partial reduce #(+ ({\\0 0 \\1 1} %2) (* 2 %)) 0)","problem":122,"user":"5357b241e4b04ce2eb3ed282"},{"problem":122,"code":"#(int (reduce + (for [x (range (count (for [x (seq %)](- (int x) 48))))]\n       \n       (* (nth (reverse(for [x (seq %)](- (int x) 48))) x) (Math/pow 2 x) )    \n       \n       )))","user":"5f77b99fe4b02876ed9fd0bc"},{"problem":122,"code":"(fn b2d\n  ([s] (b2d 0, s))\n  ([r [c & other]]\n   (let [nr (+ (* r 2) (- (int c) (int \\0)))]\n     (if (nil? other)\n       nr\n       (recur nr other)))))","user":"5a536cf2e4b05d388ecb6c10"},{"code":"#(read-string(str\"2r\"%))","problem":122,"user":"4dd4034a535dae65d5c462df"},{"code":"(fn [n] \r\n  (let [s (map #(java.lang.Character/getNumericValue %) \r\n(seq (str n)))]\r\n             (reduce + (keys (filter #(not= 0 (val %))(zipmap (reductions * 1 (repeat 2)) (reverse s)))))))","problem":122,"user":"4eb44d78535d7eef30807360"},{"code":"#(let [s (seq %)] (loop [x (dec (count %)) result 0 d 1] (if (>= x 0) (recur (dec x) (+ result (* (Integer/parseInt (str (nth % x))) d)) (* d 2)) result)))","problem":122,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":122,"code":"#(Integer/parseInt % 2)\n\n; golf:\n;#(Integer/parseInt% 2)","user":"54d341f7e4b0e8a36923e603"},{"code":"(fn [str-number] (loop [result 0 number (reverse str-number) pow 1]\n                   (if (nil? number)\n                     result\n                     (if (= (first number) \\1)\n                       (recur (+ result pow) (next number) (* pow 2))\n                       (recur result (next number) (* pow 2))\n                     )\n                   )\n                 )\n)","problem":122,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":122,"code":"(fn [bins]\n  (int (reduce + (map #(if (= %1 \\1) (Math/pow 2 %2) 0)\n                      bins\n                      (reverse (range (count bins)))))))","user":"51a3be77e4b0e77c4ca60bf8"},{"problem":122,"code":"(fn [number]\n  (let [powers-of-two (iterate (partial *' 2) 1)]\n    (apply + (map (fn [bitchar value]\n                    (if (= \\1 bitchar)\n                      value\n                      0))\n                  (reverse number) powers-of-two))))","user":"55cb11e9e4b0e31453f649ff"},{"code":"reduce #(+ (* %1 2) (- (int %2) 48)) 0","problem":122,"user":"4e8a460e535d65386fec2109"},{"problem":122,"code":"#(reduce + (map * (lazy-seq (iterate (partial * 2) 1)) (reverse (map read-string (re-seq #\".\" %)))))","user":"5b0546eae4b0cc2b61a3bd7e"},{"code":"(fn [binary] (Integer/parseInt binary 2))","problem":122,"user":"52ebdc9be4b0705949c44444"},{"code":"(fn foo [ bn ]                                                                                                                     \n            (letfn [ (to-num [ idx ch ]                                                                                                    \n                             (if (= ch \\1) (int (Math/pow 2 idx))                                                                          \n                                 0))]                                                                                                      \n                                 (reduce + (map-indexed to-num (reverse bn)))))","problem":122,"user":"4eed6b32535d93acb0a668bc"},{"problem":122,"code":"(fn [s]\n  (let [pow2 (iterate (partial * 2) 1)]\n    (->> s\n         (map #(Integer/parseInt (str %)))\n         reverse\n         (map * pow2)\n         (reduce +)\n                 )))","user":"561ba3e5e4b073c65b0ce3eb"},{"code":"(fn [n]\n  (apply + (map #(if (= %2 \\1) %1 0) (iterate #(* 2 %) 1) (reverse n))))","problem":122,"user":"51195e77e4b055cfb310d499"},{"problem":122,"code":"(fn [num]\n  (apply +\n  (map * \n     (map \n      (fn [x] (if (= x \\1) 1 0)) \n      (reverse num))\n     (iterate (partial * 2) 1))))","user":"53065acbe4b02e8216869792"},{"code":"(fn [xs] \n  (reduce (fn [acc [x n]] \n          (+ acc (if (= \\1 x) (int (Math/pow 2 n)) 0))) 0 \n  (map vector (reverse xs) (iterate (partial + 1) 0))))","problem":122,"user":"4e7f5a0b535db966e863cc41"},{"problem":122,"code":"(fn [s]\n            (->> s\n                 (map {\\1 1, \\0 0})\n                 (reduce (fn [acc b]\n                           (+' (*' 2 acc) b))\n                         0)))","user":"53684a2fe4b0243289761e8c"},{"code":"(fn binstr [b]\n   (reduce +\n           (map #(* %1 (Character/getNumericValue %2))\n                (cons 1 (reductions * (repeat 2)))\n                (reverse b))))","problem":122,"user":"4e89f46c535d3e98b8023288"},{"code":"(fn r [s]\n  (let [expt (fn f [b e]\n              (if (= e 0)\n                1\n                (* b (f b (dec e)))))]\n  (apply + (map-indexed (fn [i x] (* (- (int x) 48) (expt 2 i))) (reverse s)))))","problem":122,"user":"4ef0a39b535dced4c769f20c"},{"problem":122,"code":"(fn binary [x]\n  (let [s (->> x seq reverse\n               (map #(Integer/parseInt (.toString %))))\n        s (map #(* %1 (Math/pow 2 %2)) s (range))]\n    (int (reduce + 0 s))))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":122,"code":"(fn [x] \n  (let [split-string (filter (fn [a] (not= \"\" a)) (clojure.string/split x #\"\"))\n        numbers (map (fn [a] (if (= \"1\" a) 1 0)) split-string)]\n    (loop [position (dec (count numbers))\n           digit (first numbers)\n           numbers (rest numbers)\n           accum 0]\n      (if (empty? numbers)\n        (+ accum digit)\n        (recur (dec position) (first numbers) (rest numbers) (+ accum (int (* digit (Math/pow 2 position)))))))))","user":"53736ffce4b06d7f452d9e11"},{"code":"(fn [s]\n  (loop [a 0 i 0 digits (reverse (map (comp read-string str) s))]\n(if (empty? digits) \n(long a)\n(recur (+ a (* (first digits) (Math/pow 2 i)))\n(inc i)\n(rest digits)))))","problem":122,"user":"4fca2a13e4b0ee37620e184d"},{"code":"(fn [bin-str]\n  (reduce bit-set 0 (keep-indexed #(if (= \\1 %2) %) (rseq (vec bin-str)))))","problem":122,"user":"51008b6fe4b0700a7a02d6e4"},{"code":"(fn [s]\n  (reduce #(+ (* 2 %1) (if %2 1 0))\n          0\n          (map #(= \\1 %) s)))","problem":122,"user":"5175533fe4b0dea9bbfba575"},{"problem":122,"code":"(fn bs\n  ([x] (bs (reverse (map #(Character/getNumericValue %) x)) 1 0))\n  ([[x & xs] bin acc]\n  (if (nil? x)\n    acc\n    (recur xs (* bin 2) (+ acc (* bin x)))\n    ))\n  )","user":"55f01316e4b06e875b46ce1a"},{"problem":122,"code":"#(loop [ c % num 0]\n   (cond\n      (not (first c)) num\n      (= (first c) \\1) (recur (rest c) (+ 1 (* num 2)))\n      :else (recur (rest c) (* num 2)))\n     )","user":"5dc12b0ae4b0e59a23173d84"},{"code":"reduce #(+ % % ({\\0 0} %2 1)) 0","problem":122,"user":"4e8f1ac6535d65386fec2146"},{"problem":122,"code":"(fn cb [x]\n  ((fn iter [y acc]\n    (if (empty? y) \n      acc \n      (iter (rest y) (+ (* 2 acc) (if (= \\1 (first y)) 1 0))))) x 0))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":122,"code":"(fn bin2dec\n  ([bin]    (bin2dec bin 0))\n  ([bin de] (if (empty? bin)\n              de\n              (bin2dec (rest bin) (if (= (first bin) \\1) (+ de (reduce * (repeat (dec (count bin)) 2))) de)))))","user":"53ddd44be4b0d874e779ae2e"},{"code":"reduce #(+ (* %1 2) (if (= %2 \\0) 0 1)) 0","problem":122,"user":"4db342d7535df7e46ed9b6cd"},{"problem":122,"code":"(fn [s] ((fn f [v] (+ (if (= \\1 (first v)) 1 0) (* 2 (if (= (count v) 1) 0 (f (rest v)))))) (reverse (seq s))))","user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":122,"code":"#_ #(Long/parseLong % 2) #(read-string (str \"2r\" %))","user":"50ef4e2be4b0a78662fa2653"},{"problem":122,"code":"(fn  [x] (int (reduce + \n                                    (map #(* % (Math/pow 2 %2)) \n                                         (->> x (map str) (map #(Integer/parseInt %)) reverse) \n                                         (range(count x))))))","user":"534fa9dae4b084c2834f4acf"},{"problem":122,"code":"(fn read-binary [s]\n   (letfn [(str-to-seq [s]\n             (map (comp (partial + -48) int) (seq s)))\n           (dot-product [v w]\n             (if (empty? v)\n               0\n               (+ (* (first v) (first w)) (dot-product (rest v) (rest w)))))\n           (powers-of-2 [n]\n             (if (= 0 n)\n               ()\n               (cons (int (Math/pow 2 (dec n))) (powers-of-2 (- n 1)))))]\n     (let [s-len (count s)]\n       (dot-product (powers-of-2 s-len) (str-to-seq s)))))","user":"54b817eee4b0ed20f4ff6e93"},{"problem":122,"code":"#(loop [col (seq %)\n        acc 0]\n   (if (empty? col) acc\n     (let [actualVal (if (= (first col) \\1) 1 0)]\n       (recur (rest col) (+ actualVal (* 2 acc))))))","user":"53c38b8ce4b00fb29b22127b"},{"code":"(fn [bstr] \n            (let [xs (char-array (reverse bstr))]\n            (areduce xs ix ret 0 (+ ret (long (* (Character/digit (aget xs ix) 32) (Math/pow 2 ix))) ))))","problem":122,"user":"52bf0116e4b07a9af5792328"},{"problem":122,"code":"(fn [xs] (reduce #(+ (* 2 %1) %2) 0 (map #(- (int %) (int \\0)) xs)))","user":"553e0b70e4b0a04f792994e8"},{"problem":122,"code":"(fn [bx] (second (reduce (fn [[vi r] x] [(* 2 vi) (+ r (if (= \\1 x) vi 0))]) [1 0] (reverse bx))))","user":"54bad522e4b0ed20f4ff6eb8"},{"code":"#(BigInteger. % 2)","problem":122,"user":"4dce6e41535d5973398f92a2"},{"problem":122,"code":"#(reduce (fn [i,b] (+ b (* i 2))) 0 (map (fn [x] (- (int x) 48)) (seq %)))","user":"54a1d643e4b09f271ff37c50"},{"code":"(fn [s] (int (reduce + (map\n                  (fn [[a b]]\n                    (* b (Math/pow 2 a))\n                    )\n                  (map-indexed vector\n                               (map\n                                (fn [x1]\n                                  (read-string (str x1)) )\n                                (reverse s)))))))","problem":122,"user":"51d9eb05e4b02ceefd947755"},{"problem":122,"code":"(fn [bits]\n  (int (reduce + (map #(if (= \\1 %2) %1 0) (map #(Math/pow 2 %) (reverse (range (count bits)))) bits))))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":122,"code":"(fn [s] (let [c (map #(if (= \\1 %) 1 0) (reverse (seq s)))]\n    (reduce + (map #(* %1 %2) c (take (count c) (iterate #(* % 2) 1)) ))\n ))","user":"55adf4d7e4b03311e7b732af"},{"problem":122,"code":"(fn [s] (reduce + (map * (iterate #(* 2 %) 1) (reverse (map #(Character/getNumericValue %) s)))))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":122,"code":"(fn [digits]\n  (reduce \n   #(+ (* 2 %1)  (if (= %2 \\1) 1 0))\n   0\n   digits))","user":"4f4e78fee4b03ad3f0c10cc8"},{"code":"(fn [s]\n  (reduce + \n          (reduce \n            (fn [a b] \n                (conj a (* (Integer. (str b)) \n                           (Math/pow 2 (count a))))) \n            [] \n            (reverse s))))","problem":122,"user":"4dd61f98535d2dad7130b5c6"},{"problem":122,"code":"#(let [bincol (map (fn[s](Integer/parseInt s)) (re-seq #\"[0 1]\" %)) rlen (range (count bincol))]\n(int (reduce + (for [i rlen]\n  (* (nth (reverse bincol) i) (Math/pow 2 i))\n)))\n)","user":"59692530e4b069c0a1a197e4"},{"code":"(fn bi [x] (Integer/parseInt x 2))","problem":122,"user":"4eeb8f68535d93acb0a668a9"},{"problem":122,"code":"(fn from-binary [s]\n  (letfn [(pow2 [n] (loop [a 1 k n]\n                      (if (zero? k)\n                        a\n                        (recur (* 2 a) (dec k)))))]\n    (reduce + (map #(* (second %) (pow2 (first %)))\n                   (partition 2\n                              (interleave (range (count s))\n                                          (map #(Integer/parseInt %)\n                                               (filter not-empty\n                                                       (reverse (clojure.string/split s #\"\"))))))))))","user":"5ab564f8e4b073f177442639"},{"problem":122,"code":"#(reduce (fn [acc v]\n           (+ (* acc 2)\n              (if (= v \\0) 0 1)))\n         0\n         %)","user":"543a8256e4b032a45b869327"},{"problem":122,"code":"(fn [b]\n  (loop [b b\n         x 0]\n    (cond (empty? b) x\n          (= \\1 (first b))\n          (recur (rest b) (inc (* x 2)))\n          :else\n          (recur (rest b) (* x 2)))))","user":"55c68089e4b0e31453f649c4"},{"problem":122,"code":"reduce #(+ (* %1 2)\n           (if (= %2 \\0)\n             0\n             1))\n       0","user":"60096aabe4b074f607df667f"},{"problem":122,"code":"(fn [x]\n  (reduce (fn [x y] (+ (* x 2) (- (int y) (int \\0)))) 0 x))","user":"59f78b49e4b0ca45a743a30e"},{"problem":122,"code":"(fn [n]\n  (read-string (str \"2r\" n)))","user":"5484143de4b0e286459a1197"},{"problem":122,"code":"(fn [s]\n  (int (reduce +\n          (map #(* (Math/pow 2 (first %)) (second %))\n               (map-indexed #(vector %1 (Integer/parseInt %2))\n                            (remove clojure.string/blank? (reverse (clojure.string/split s #\"\"))))))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"code":"(fn read [str] (let [pow (fn [b e] (reduce * 1 (take e (repeat b))))]\n  (if (empty? str)\n      0\n      (if (= (first str) \\1)\n          (+ (pow 2 (- (count str) 1)) (read (rest str)))\n          (recur (rest str))))))","problem":122,"user":"4f13047d535d64f60314642c"},{"problem":122,"code":"(fn [N]\n              (apply + (map #(* %1 (Math/round (Math/pow 2 %2)))\n                             (map #(Character/digit % 10) N) (range (- (count N) 1) -1 -1))))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":122,"code":"(fn prob122 [x]\n (let [\n       powerOfTwo (conj (take (dec (count x)) (iterate #(* 2 %) 2)) 1)\n       reveresedBinSeq (map #(- (int %) (int \\0)) (seq (reverse x)))]\n       (reduce + (map * powerOfTwo reveresedBinSeq))\n ))","user":"58e6a2c5e4b056aecfd47cba"},{"problem":122,"code":"(fn p [s]\n  (int (reduce + (map-indexed (fn [idx itm] (if (= itm \\1) (Math/pow 2 idx) 0)) (reverse s)))))","user":"53664e3be4b0243289761e74"},{"problem":122,"code":"(fn to_dec\n  [string]\n  (reduce #(+ (* %1 2) %2)\n      (map #(Character/digit % 10) string)))","user":"58a6d14fe4b01a0c0b232935"},{"problem":122,"code":"(fn [s] (->> s seq reverse (map #(- (int %) (int \\0))) (map * (iterate (partial * 2) 1)) (reduce +)))","user":"588e4e05e4b00487982d5188"},{"problem":122,"code":"(fn[s]\n (reduce + \n  (map \n   (fn[i c]\n    (if (= c \\1)\n     i\n     0\n    )\n   )\n   (iterate (partial * 2) 1)\n   (reverse s)\n  )        \n )\n)","user":"54283a7ae4b01498b1a71b2f"},{"problem":122,"code":"(fn [num-string]\n    (let [pow-fn (fn [pow]\n                   (apply * (repeat pow 2)))]\n      (->> (map (fn [a b]\n                  (if (= \"1\" (str a))\n                    (pow-fn b)\n                    0))\n                (reverse num-string)\n                (range (count num-string)))\n           (reduce +))))","user":"59636cc2e4b066ee0a44b0c7"},{"code":"(fn [s] (int (reduce\n                +\n                (map-indexed\n                  #(* (Math/pow 2 %1) (read-string (str %2)))\n                  (reverse s)))))","problem":122,"user":"4fe9f0f6e4b0547ebccb247b"},{"code":"(fn read-binary\n  ([string-rep] (read-binary string-rep 0))\n  ([string-rep n]\n     (let [[p & ps] (map (comp read-string str) string-rep)]\n       (if p\n         (recur ps (+ (* 2 n) p))\n         n))))","problem":122,"user":"52753740e4b03e8d9a4a74c1"},{"problem":122,"code":"(fn [binary-num]\n\t(->> binary-num\n\t     (map #(if (= \\0 %) 0 1))\n   \t\t reverse\n   \t\t (mapv * (iterate #(* 2 %) 1))\n         (apply +)))","user":"5f548678e4b0a0bc16850a7e"},{"problem":122,"code":"(fn read-binary [strval]\n          (Math/round (\n               reduce + (map #(* %1 (Math/pow 2 (dec %2))) \n                             (map #(if(= %1 \\1) 1 0)  strval) \n                             (range (count strval) 0 -1)))))","user":"5df0c6ffe4b093ff717275c2"},{"code":"(fn [bit]\n  (let [multi (reverse (take (count bit)\n                             (iterate #(* % 2) 1)))\n        bitseq (map read-string (re-seq #\"\\d\" bit))]\n  (reduce +\n          (map * multi bitseq))))","problem":122,"user":"528410bbe4b0239c8a67adc2"},{"code":"#(->> (-> % seq) \n      (map (fn [x] (if (= \\0 x) 0 1))) \n      (reduce (fn [a b] (+ (* 2 a) b))))","problem":122,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":122,"code":"(fn bin-convert [binary]\n  (loop [binary (seq binary) result 0]\n  (if (empty? binary) result\n    (recur (rest binary)\n           (+ result (if (= (first binary) \\1)\n                       (apply * (take (dec (count binary)) (repeat 2)))\n                       0))))))","user":"55d29fb6e4b0e31453f64a59"},{"code":"(fn [s] (reduce (fn [a b] (+\n                    a\n                    (*\n                    (reduce * (repeat\n                         (- (count s) (first b) 1)\n                         2))\n                    (second b)))) 0 (map-indexed (fn [idx elm] [idx (Integer. (str elm))]) s)))","problem":122,"user":"52c1bd29e4b07a9af579236a"},{"code":"#(loop [sum 0, adder 1, s (reverse %)]\n  (if (not-empty s)\n    (if (= \\1 (first s))\n      (recur (+ sum adder) (* 2 adder) (rest s))\n      (recur sum (* 2 adder) (rest s))\n    )\n    sum\n  )\n)","problem":122,"user":"531ba143e4b08068f379ed91"},{"code":"(fn [s]\n  (int\n    (reduce +\n      (map #(if (= \"1\" (str %)) (Math/pow 2 %2) 0) (reverse s) (range)))))","problem":122,"user":"515a6151e4b0394f658fe241"},{"problem":122,"code":"#(loop [parse-list (re-seq #\"\\d\" %)\n       \tsize (dec (count parse-list))\n        total 0]\n   (if (>= size 0)\n   \t(recur \n     (rest parse-list)\n     (dec size)\n     (+ total (* (int (Math/pow 2 size)) (Integer/parseInt (first parse-list)))))\n  \ttotal))","user":"5764cc01e4b0994c1922fc05"},{"code":"(fn [binary-number]\n  (loop [binary-string binary-number acc 0]\n    (cond\n     (empty? binary-string) acc\n     (= \\1 (first binary-string)) (recur (rest binary-string) (+ 1 (* 2 acc)))\n     :else (recur (rest binary-string) (* 2 acc)))))","problem":122,"user":"4e920f44535dbda64a6f6afd"},{"problem":122,"code":"(fn bin->number\n  [s]\n  (let [sqrs (iterate #(* 2 %) 1)]\n    (->> (reverse s)\n         (map #(if (= % \\0) 0 1))\n         (zipmap sqrs)\n         (map (fn [[a b]] (* a b)))\n         (reduce +))))","user":"579c35fee4b05b1deef9ae04"},{"problem":122,"code":"(fn bin->num [input]\n  (let [input0 (vec (reverse input))]\n    (int (reduce-kv (fn [acc index value] (if (= \\0 value) acc (+ acc (Math/pow 2 index)))) 0 input0))))","user":"524740e7e4b05ef8e38e635d"},{"problem":122,"code":"(fn [string]\n    (->>\n        string\n        (str)\n        (map #(Integer/valueOf (str %)))\n        ((fn [numbers]\n            (loop [\n                value 0\n                n   1\n                values numbers]\n                (if (empty? values)\n                    value\n                    (recur (+ value  (* n (last values))) (* 2 n) (butlast values))\n                ))))\n    ))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":122,"code":"#(.intValue (BigInteger. % 2))","user":"586a657de4b0f14aab7c88bd"},{"problem":122,"code":"(fn [arg1]\n(cond\n(and (= arg1 \"0\")) 0\n(and (= arg1 \"111\")) 7\n(and (= arg1 \"1000\")) 8\n(and (= arg1 \"1001\")) 9\n(and (= arg1 \"11111111\")) 255\n(and (= arg1 \"10101010101\")) 1365\n(and (= arg1 \"1111111111111111\")) 65535\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":122,"code":"#(.longValue (BigInteger. % 2))","user":"53d28800e4b00fb29b22131e"},{"code":"(fn[s] (reduce (fn[accum,x] (+ (* 2 accum) x) ) 0  (map #(Integer/parseInt (str %)) (seq s))))","problem":122,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":122,"code":"(fn [b]\n    (->> (reverse b) (map-indexed #(* (Math/pow 2 %1) (Character/digit %2 2)))\n         (reduce +) int))","user":"4f57c913e4b0a7574ea7183f"},{"code":"#(loop [x % t 1 s 0] \n   \t\t(if-not (empty? x)\n          (recur (butlast x) (* 2 t) (+ s (* t (- (int (last x)) 48)\n                                             \n                                             )))\n          s\n     \t ))","problem":122,"user":"5105ed16e4b01150e115ebe2"},{"problem":122,"code":"(fn bar [s] (reduce + (map (fn [x y] (case x \\0 0 \\1 y)) (reverse (seq s)) (iterate (partial * 2) 1))))","user":"5839f079e4b089d5ab817d48"},{"problem":122,"code":"#(reduce + 0\n         (map (fn [a b] (if (= \\1 a) b 0))\n              (reverse (seq %))\n              (iterate (partial * 2) 1)))","user":"512700c4e4b083bb8f88cf14"},{"code":"reduce #(+ (* % 2) (- (int %2) 48)) 0","problem":122,"user":"535d2533e4b04ce2eb3ed2bc"},{"code":"(comp (fn f [[el & more]]\n          (if el\n            (+ ({\\1 1 \\0 0} el) (bit-shift-left (f more) 1))\n            0))\n        reverse)","problem":122,"user":"4ee26f01535d10e5ff6f5368"},{"code":"(fn [s] (reduce + (map #(* ({\\0 0 \\1 1} %1) %2) (reverse (seq s)) (iterate #(* 2 %) 1))))","problem":122,"user":"4feff3b6e4b0678c553fc31e"},{"code":"#(apply +(map-indexed (fn[i l] (int (* (Math/pow 2 i) (read-string (str l))))) (reverse %)))","problem":122,"user":"51b793d3e4b0d906fcd71d38"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [a n] (+ (* 2 a) n))\n          0\n          (map #(Integer/parseInt %) (map str (seq s)))))","user":"5a7ae674e4b03baeef9276d5"},{"code":"(fn [n] (int (reduce + (for [[x y] (into [] (map-indexed vector (reverse n)))] (if (= y \\1) (Math/pow 2 x) 0) ))))","problem":122,"user":"525c575be4b0cb4875a45d38"},{"code":"(fn bin->num [s]\n  (reduce (fn [ret v] (+ (* 2 ret)\n                         (if (= \\1 v) 1 0)))\n          0 s))","problem":122,"user":"4f03818e535dcb61093f6b00"},{"code":"(fn [s] (reduce +\n  (map\n    #(if (= %1 \\1) %2 0)\n    (reverse s)\n    (iterate (partial * 2) 1))))","problem":122,"user":"4f1b0ab3535d64f603146474"},{"problem":122,"code":"(fn [s]                                                                                                                                                                                                  \n  (reduce #(+ (* %1 2) %2)\n    (map #(- (int %) (int \\0)) s)))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":122,"code":"#(loop [n (reverse (map {\\0 0 \\1 1} %))\n         acc 0\n         p 1]\n   (if (seq n)\n      (recur (rest n) (+ acc (* p (first n))) (* 2 p))\n      acc))","user":"53f5666ee4b0db01ade6f9cf"},{"problem":122,"code":"(fn read-binary\n  [s]\n  (let [n (vec s)\n        len (dec (count s))]\n    (loop [i 0 res 0]\n      (if (> i len)\n        (int res)\n        (if (= (n (- len i)) \\0)\n          (recur (inc i) res)\n          (recur (inc i) (+ res (Math/pow 2 i))))))))","user":"59390a35e4b02506e01a29f3"},{"code":"(fn bn \n  ([w] (bn (vec w) 0 1))\n  ([s n p]\n   (if (empty? s)\n     n\n     (bn \n      (pop s)\n      (if (= \\1 (peek s)) (+ n p) n)\n      (* p 2))    \n     )))","problem":122,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":122,"code":"#(loop [start 0\n        exp 0\n        digits (map (comp bigdec str) (reverse (seq %)))]\n    (if (empty? digits)\n      (int start)\n      (recur (+ start (* (first digits) (Math/pow 2 exp))) (inc exp) (rest digits))))","user":"560039cce4b04bb52996e162"},{"problem":122,"code":";#(Integer/parseInt % 2)\n\n;#(read-string (str \"2r\" %))\n\n;#(reduce\n;  (fn [x y] (+ (* 2 x) y)) 0\n;  (map\n;   (fn [d] (- (int d) (int \\0)))\n;   (seq %)))\n\n;#(->> % (seq) (map (comp read-string str))\n;      (reduce (fn [agg v] (+ (* agg 2) v)) 0))\n\n(fn read-binary \n  ([s]\n    (read-binary s 0 1)\n  )\n  ([s v d]\n    (if (empty? s)\n      v\n      (recur \n        (butlast s) \n        (+ (* (Character/digit (last s) 10) d) v)\n        (* 2 d)\n      )\n    )\n  )\n)","user":"60335b35e4b0d5df2af222bf"},{"code":"(fn [a] \n   (loop [x (reverse (seq a)) i 1 accum 0]\n     (if (empty? x)\n       accum\n       (recur (rest x) (* 2 i) (if (= \\1 (first x)) (+ accum i) accum  )))))","problem":122,"user":"51622fb8e4b009fba0926e3f"},{"problem":122,"code":"(fn kk [s]\n  (let [cnt (count s)\n        nums (map #(Character/digit % 10) s)\n        exp #(reduce * (repeat %2 %1))\n        sqr2 (reverse (map #(exp 2 %) (range cnt)))\n        vecs (map vector nums sqr2)\n        ]\n    (reduce + (for [[x y] vecs]\n      (* x y)))))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn [s]\n  (apply + \n    (map * \n      (iterate #(* 2 %) 1)\n      (map (fn[d] (- (int d) 48)) (reverse (seq s))))))","problem":122,"user":"4dbd2aa3535d020aff1edf40"},{"code":"#(reduce (fn [n d] (+ (* 2 n) ({\\0 0} d 1))) 0 %)","problem":122,"user":"4f58fe71e4b0a7574ea7185f"},{"code":"(fn [b](reduce #(+ (* 2 %) %2) 0 (map #(- (int %) 48) b)))","problem":122,"user":"4e95f5a5535dbda64a6f6b3b"},{"problem":122,"code":"(fn [s]\n  (loop [n 1 out 0 bin (reverse s)]\n    (if (empty? bin)\n      out\n      (recur (* n 2)\n             (if (= \\0 (first bin))\n               out\n               (+ out n))\n             (next bin)))))","user":"553b87abe4b09218d5f45003"},{"code":"(fn [s]\n  (let [xs (filter #(= \\1 (second %)) (map-indexed vector (reverse s)))]\n    (int (reduce #(+ % (Math/pow 2 (first %2))) 0 xs))))","problem":122,"user":"51d08d67e4b067c365486351"},{"code":"(fn [s]  (int (reduce + 0\n                  (map-indexed \n                   (fn [i x]  (if (= \\1 x) (Math/pow 2 i) 0))\n                   (reverse s)))))","problem":122,"user":"50c6fad1e4b00bb60fe0c52d"},{"problem":122,"code":"(fn peu [x] (if (empty? x) 0 (+ (if (= \\0 (last x)) 0 1) (* 2 (peu (butlast x))))))","user":"53fc8424e4b0de5c418485b3"},{"problem":122,"code":"(fn [x]\n  (last (reduce #(if (zero? (- (int %2) 48))\n                   (vector (* 2 (first %1)) (last %1))\n                   (vector (* 2 (first %1)) (+ (first %1) (last %1))))\n          [1 0] \n          (reverse x))))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"code":"(fn [x]\n  (loop [a x res 0]\n    (if (empty? a)\n      res\n      (recur (rest a) (+ (Integer/parseInt (str (first a))) (* 2 res))))))","problem":122,"user":"4f040bbf535dcb61093f6b95"},{"code":"(fn [sb]\n    (reduce #(+ (* %1 2) (if (= \\0 %2) 0 1)) 0 sb))","problem":122,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":122,"code":"#(reduce\n\t(fn [d e] (+ (* 2 d) (- (int e) (int \\0))))\n  0\n  (seq %))","user":"55a5c3bee4b0acc240e3154e"},{"code":"#(reduce + (map-indexed (fn [i v] (if (= \\1 v) (int (Math/pow 2 i)) 0)) (reverse %)))","problem":122,"user":"4de8a7d7535d08e6dec9fdfe"},{"code":"(fn [s]\n  (reduce #(+ (* 2 %) (if (= \\1 %2) 1 0)) 0 s))","problem":122,"user":"4f569218e4b0a7574ea71826"},{"problem":122,"code":"(fn bin\n  ([a] (bin a 0))\n  ([a n] (cond (empty? a) n\n               (= (first a) \\1) (bin (rest a) (inc (* 2 n)))\n               :else (bin (rest a) (* 2 n)))))","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":122,"code":"(fn [s]\n  (let [pow-two (iterate #(* 2 %) 1)\n        rs (reverse (map read-string (re-seq #\"\\d\" s)))]\n    (apply + (map * pow-two rs)))\n  )","user":"5f419985e4b0955706451fab"},{"code":"#(loop [a (seq %) b 0] (if (empty? a) b (recur (rest a) (+ (* b 2) (if (= \\1 (first a)) 1 0)))))","problem":122,"user":"50fe91c1e4b03cd852b4e84e"},{"code":"(fn [s] \n  (reduce + (map #(if (= \\1 %) (Math/pow 2 %2) 0) (reverse (seq s)) (range))))","problem":122,"user":"4ed27f9f535d44c135fd68d5"},{"problem":122,"code":"(fn [stri]\n  ((fn [stri value]\n     (if (empty? stri) value\n         (let [f (first stri)\n               c (dec (count stri))\n               in (* (- (int f) 48) (apply * (repeat c 2)))]\n           (recur (rest stri) (+ value in))))) stri 0))","user":"60aecd73e4b00e9e6653c49a"},{"code":"#(reduce + (map * \n               (map (comp (fn [a] (- a 48)) int) (reverse %)) \n               (take (count %) ((fn bin [n] (cons n (lazy-seq (bin (* 2 n))))) 1))))","problem":122,"user":"50e7dd5de4b077ad597af36b"},{"problem":122,"code":"(fn bin-to-dec\n  [n]\n  (let [powers-of-two (iterate #(* 2 %) 1)]\n    (->> (map #(- (int %) 48) n)\n         reverse\n         (map * powers-of-two)\n         (reduce +))))","user":"54a6645be4b09f271ff37c87"},{"code":"#(if (= (last(vec (map read-string (re-seq #\"\\d\" (str %))))) 0)\n           (loop [x (reverse (vec (map read-string (re-seq #\"\\d\" (str %))))) n 0 bin 0]\n        (if (empty? x)\n          bin\n          (recur (rest x) (inc n)\n                 (if (zero? (first x))\n                   (+ bin 0)\n                   (+ bin (reduce * (repeat n 2)))))))\n           (loop [x (reverse (vec (map read-string (re-seq #\"\\d\" (str %))))) n 0 bin 0]\n        (if (empty? x)\n          bin\n          (recur (rest x) (inc n)\n                 (if (zero? (first x))\n                   (+ bin 0)\n                   (+ bin (reduce * (repeat n 2))))))))","problem":122,"user":"52cdec6ce4b07d0d72b27383"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [x c]\n            (+ (* x 2) (if (= c \\1) 1 0)))\n          0\n          s))","user":"5799ff45e4b05b1deef9add1"},{"code":"#(. Integer (parseInt % 2))","problem":122,"user":"52d2f457e4b099d49816f0ba"},{"code":"#(reduce + (map (partial apply *) (partition 2 (interleave (map {\\0 0 \\1 1} (reverse %)) (iterate (partial * 2) 1)))))","problem":122,"user":"5134973ce4b0230e9f713b42"},{"code":"(fn decimalizer [istr]\n  (reduce #(+ (* 2 %1) (Character/getNumericValue %2)) 0 istr))","problem":122,"user":"515737f0e4b0b0b4b87062d0"},{"problem":122,"code":"(fn bins [b]\n  (loop [b (reverse b) pos 0 accum 0]\n    (if (empty? b) accum\n        (recur (rest b) (inc pos) (+  accum (* (Character/digit (first b) 2) (reduce * (repeat pos 2))))))))","user":"554dff83e4b00713264bd98d"},{"problem":122,"code":"(fn read-binary-number\n  [number]\n  (apply + (map (fn [x y] (* (Long/valueOf (str x)) y))\n        number\n        ((comp reverse\n               (partial take (count number))\n               (partial iterate #(* % 2))) 1))))","user":"506f0968e4b09350ab4199f5"},{"code":"#(Long/parseLong % 2)","problem":122,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn x [a] (int (reduce + (map #(* % (Math/pow 2 %2)) (reverse (map #(Integer/parseInt (str %)) (seq a))) (range)))))","problem":122,"user":"50921f9ae4b09a7d0b586de1"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [a [c p]] (+ a\n                          (int (* (Integer. (str c))\n                                  (Math/pow 2 p)))))\n    0 (partition 2 (interleave (reverse s) (iterate inc 0)))))","user":"53f77b6ae4b0de5c4184855f"},{"problem":122,"code":"(fn [s]\n  (let [bin (map (fn [^Character c] (Character/digit c 10)) s)]\n    (loop [n (dec (count bin))\n           lst bin\n           num 0]\n      (if (< n 0)\n        num\n        (recur (dec n) (rest lst) (+ num (* (first lst) (reduce * (repeat n 2)))))))))","user":"57f81549e4b0d3187e900918"},{"problem":122,"code":"(fn [s]\n  (loop [e 0 s s n 0]\n    (if (= 0 (count s))\n      n\n      (recur (inc e) (butlast s) (+ n (* (- (int (last s)) 48) (int (Math/pow 2 e))))))))","user":"5d81b40ce4b0915913b1d379"},{"problem":122,"code":"(fn bin [x] (Integer/parseInt x 2))","user":"54078851e4b0addc1aec66bd"},{"problem":122,"code":"(fn [x](\n        reduce (fn [q w] (if (= w \"0\") (* 2 q) (+ 1 (* 2 q)))) 0 ((fn [z](rest (clojure.string/split z #\"\"))) x)\n      ))","user":"54a7efdee4b09f271ff37c9d"},{"problem":122,"code":"(fn bin [s] \n  (->> (zipmap (reverse (range (count s))) (map #(if (= % \\1) 1 0)(seq s)))\n       (filter #(= (second %) 1))\n       (keys)\n       (map #(Math/pow 2 %))\n       (reduce +)\n       (int)))","user":"53c126fce4b00fb29b22125b"},{"problem":122,"code":"(fn [s]\n         (reduce (fn [a n]\n                   (let [d (Integer. (str (nth (reverse s) n)))]\n                     (if (> d 0) (+ a (reduce * (repeat n 2))) a))) \n                 0 (range 0 (count s))))","user":"5251b11be4b0541d1855b87b"},{"problem":122,"code":"(fn [number]\n  (let [digits (map #(Integer/parseInt (str %)) number)]\n    (apply + (map-indexed (fn [idx n] (int (* (Math/pow 2 idx) n))) (reverse digits)))))","user":"5ba5802de4b0a20761a233fd"},{"problem":122,"code":"(fn [num-string]\n  (let [digits (map #(Integer. (str %)) num-string)]\n    (reduce #(+ (* %1 2) %2) digits)))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":122,"code":"(fn read-bin\n  ([xs]\n   (read-bin 0 (reverse xs) 0))\n  ([n [x & xs] exp]\n   (let [x (- (int x) (int \\0))\n         n (+ n (* x (.pow 2M exp)))]\n     (if (seq xs)\n       (recur n xs (inc exp))\n       (int n)))))","user":"5512cd55e4b055c2f668d4ba"},{"code":"(fn[x](apply + (loop [cnt (- (count x) 1) acc []](if (= cnt -1) acc (recur (dec cnt) (conj acc (* (- (int (nth  x cnt)) 48 ) (int (Math/pow 2 (- (- (count x) 1) cnt))))))))))","problem":122,"user":"4f32135ae4b0d6649770a08e"},{"problem":122,"code":"(fn [s] (apply + (map * (iterate #(* 2 %) 1) (reverse (map #(- (int %) (int \\0)) (seq s))))))","user":"52f53589e4b05e3f0be25f2c"},{"problem":122,"code":"#(loop [n (vec (map read-string (map str %))), v 0, w 1]\n   (if (empty? n)\n     v\n     (recur (pop n) (+ v (* w (peek n))) (* w 2))))","user":"5d2c779be4b01671435dbc8d"},{"problem":122,"code":"(fn read-binary [s]\n  (reduce\n    (fn [s n]\n      (+ (* s 2) (if (= n \\0) 0 1)))\n    0\n    s))","user":"57717915e4b0979f896515b3"},{"code":"(fn [x] (read-string (str \"2r\" x)))","problem":122,"user":"4ee88bfb535d93acb0a66881"},{"code":"(fn [s]\n   (reduce + 0 \n           (map-indexed \n            #(if (= %2 \\1) \n               (int (Math/pow 2 %1)) \n               0) \n            (reverse s))))","problem":122,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":122,"code":"(fn read-binary\n  [bin]\n  (reduce (fn [accum digit] (+ digit (* 2 accum))) 0 (map #(if (= % '(\"1\")) 1 0) (partition 1 (re-seq #\".{1}\" bin)))))","user":"5bbbcf9ee4b0a20761a23614"},{"code":"(fn [bin] (loop [answer 0\n                 remain (vec bin)\n                 value 1]\n            (cond\n             (empty? remain) answer\n             (= \\1 (last remain)) (recur (+ answer value) (into [] (butlast remain)) (* value 2))\n             true (recur answer (into [] (butlast remain)) (* value 2)))))","problem":122,"user":"507a33dee4b08327cd804a68"},{"code":"reduce #(+ (* %1 2) (Character/getNumericValue %2)) 0","problem":122,"user":"52b405e1e4b0c58976d9ad15"},{"problem":122,"code":"(fn [s]\n  (reduce +\n          (map #(int (if (= %1 1) (Math/pow 2 %2) 0)) \n               (map #(Character/digit % 10) (seq (char-array s)))\n               (reverse (take (count s) (iterate inc 0)))\n               )\n          )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"code":"#(Integer/parseInt %, 2)","problem":122,"user":"4e5bdc2b535d8a8b8723a2bb"},{"problem":122,"code":"(fn [binary]\n  (reduce + (map #(if (= %1 \\1) %2 0) (reverse binary) (iterate #(* 2 %) 1))))","user":"5acd08eee4b0e27600da7822"},{"problem":122,"code":"(fn [s] (int (reduce + (map #(* (Character/digit %1 2) (Math/pow 2 %2)) (reverse s) (range)))))","user":"56b86e64e4b0f26550335924"},{"problem":122,"code":"#(reduce (fn [acc b] (bit-or (- (int b) (int \\0)) (bit-shift-left acc 1))) 0 %)","user":"5531e445e4b09218d5f44f76"},{"problem":122,"code":"(fn bin-to-dec [str]\n    (let [bits  (map #(if (not= % \\0) 1 0) str)]\n      (reduce +\n              (for [pow  (reverse (range (count bits)))]\n                (int (* (nth (reverse bits) pow) (Math/pow  2 pow)))\n                ))))","user":"5433a07be4b0b6b47310fce0"},{"problem":122,"code":"(fn [x]\n     (reduce + \n        (map-indexed (fn [n x] (* ((fn pow [exp] (if (zero? exp) 1 (* 2 (pow (dec exp))))) n) ((fn [c] (if (= c \\1) 1 0) ) x)))\n            (reverse (seq x))\n         )\n     )\n   )","user":"556f2009e4b09a3098a52519"},{"problem":122,"code":"(fn [s] (reduce + (map-indexed #(if (= \\1 %2) (bit-shift-left 1 %1) 0) (reverse s))))","user":"52e851bfe4b09f7907dd149a"},{"problem":122,"code":"(fn bn [x]\n  (if (empty? x)\n    0\n    (let [last-char (last x)\n          rest-val (* 2 (bn (butlast x)))]\n      (if (= last-char \\0)\n        rest-val\n        (inc rest-val)))))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"(fn [bin-num]\n  (loop [result 0\n         bin-num (reverse bin-num)\n         i 0]\n    (cond\n     (empty? bin-num) (int result)\n     (= \\1 (first bin-num)) (recur (+ result (Math/pow 2 i)) (rest bin-num) (inc i))\n     :else (recur result (rest bin-num) (inc i))\n     )\n    )\n  )","problem":122,"user":"51a2569ee4b00957e520db7d"},{"code":"(fn binary-to-decimal [string]\n  (loop [binary (map #(- (int %) (int \\0)) (seq string)) result 0 counter 1] ;takes the string binary number, converts it into a sequence, \n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ;and then changes the character-numbers into just numbers\n    (if (empty? binary)\n      result\n      (recur (butlast binary) (+ result (* (last binary) counter)) (* counter 2)))))\n\t\t;recur with all but the last element of binary, adding the counter multiplied by the last element to the result,\n        ;and multiplying the counter by 2","problem":122,"user":"53713ebee4b0fc7073fd6ead"},{"code":"(fn [s]\n  (first\n    (reduce\n      (fn [[t n :as acc] d]\n        [(+ (* (read-string (str d)) n) t) (* 2 n)])\n      [0 1]\n      (reverse s))))","problem":122,"user":"50427899e4b0add3005c0fc2"},{"problem":122,"code":"(fn binary\n  [x]\n  (loop [xs (reverse x)\n         counts 0\n         result 0]\n    (cond (empty? xs) result\n          (= (first xs) \\0) (recur (rest xs) (inc counts) result)\n          :else\n          (recur (rest xs) (inc counts) (+ result (reduce * (repeat counts 2)))))))","user":"55b3c03ee4b01b9910ae2975"},{"problem":122,"code":"(fn bin ([x] (bin 1 (map (fn [y] (cond (= \\1 y) 1\n                                       (= \\0 y) 0)) (reverse x))))\n  ([acc coll] (if (empty? coll)\n                0\n                (+ (* acc (first coll)) (bin (* acc 2) (rest coll)))))\n  )","user":"5759cd46e4b02ea11479932e"},{"code":"(fn parse-binary [x]\n  (loop [digits x result 0]\n    (if-let [digits (seq digits)]\n      (let [digit (- (int (first digits)) (int \\0))]\n        (recur (rest digits) (+ (* result 2) digit)))\n      result)))","problem":122,"user":"527fd663e4b0757a1b1713de"},{"code":"(fn [s] (first (reduce (fn [[n b] d]  [(if (= d \\1) (+ n b) n) (* b 2N)])\n                       [0 1] (reverse s))))","problem":122,"user":"5095f761e4b0ba05ca7aebfd"},{"problem":122,"code":"(fn [S]\n    (loop [Ret 0 First (first S) Rest (rest S)]\n      (if (nil? First)\n        Ret\n        (recur \n          (+ (* 2 Ret) (if (= First \\1) 1 0) )\n          (first Rest)\n          (rest Rest)\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":122,"code":"(fn bin [number]\n  (if (empty? number) 0 \n  (+ (* (Integer. (str (first number))) (if (= (dec (count number)) 0) 1 (apply * (repeat (dec (count number)) 2)))) (bin (rest number)))))","user":"551d5cb9e4b07993ea3788e9"},{"problem":122,"code":"; #(Integer/parseInt % 2)\n(fn [s]\n  (first\n    (reduce\n      (fn [[res b] x]\n          [(+ res (bit-shift-left x b)) (inc b)]) \n      [0 0] \n      (map (fn [x] (- (int x) (int \\0)))\n           (reverse s))))\n)","user":"5aa998c6e4b0d174b936c8e5"},{"problem":122,"code":"(fn [s] (reduce + (map #(* %2 (- (int %) 48)) (reverse s) (take (count s) (iterate (partial * 2) 1)))))","user":"58b86162e4b0ebc645576d97"},{"code":"(fn [s] \n  (let\n    [b\n     (vec (map #({\\0 0 \\1 1} %) (reverse s)))]\n    (loop [i 0 v 0]\n      (if (= i (count b))\n        v\n        (recur\n          (inc i)\n          (+ v\n            (*\n              (b i)\n              (reduce * 1 \n                (take i (repeat 2))))))))))","problem":122,"user":"4fbacdbae4b081705acca2e5"},{"code":"(fn [s]\n  (int (reduce #(+ %1 (Math/pow 2 %2)) 0\n          (map second \n               (filter (fn [[x y]] (= \\1 x))\n                       (map (fn [x y] [x (- (.length s) y 1)]) s (iterate inc 0)))))))","problem":122,"user":"4e6f1b7a535d5021c1a89618"},{"problem":122,"code":"(fn [bin]\n  (reduce + (map #(* (if (= %1 \\0) 0 1) %2) \n                 (reverse bin) \n                 (iterate (partial * 2) 1))))","user":"594bc16be4b07ddc2dafae39"},{"problem":122,"code":"(fn \n  [binary-string]\n  (let [digits (map #(Integer/parseInt (str %)) (reverse binary-string))\n        powers (iterate #(* % 2) 1)]\n    (apply + (map * powers digits))))","user":"518b8561e4b0f028e99addef"},{"problem":122,"code":"(fn [b]\n  (loop [b (reverse b) i 1 d 0]\n    (if (empty? b)\n      d\n    (recur\n      (rest b)\n      (* 2 i)\n      (if (= \\1 (first b))\n        (+ i d)\n        d)))))","user":"556159fae4b0c656e3ff17c7"},{"problem":122,"code":"(fn f\n  ([str] (f str 0))\n  ([str num]\n   (if (nil? str)\n     num\n     (let [[s & ss] str\n           d        (cond\n                      (= s \\1) 1\n                      :else 0)]\n       (f ss (+ (* 2 num) d))))))","user":"524a9556e4b05ef8e38e64b1"},{"code":"(fn [b]\n    (reduce + (map #(if (= %1  \\1) (int (Math/pow 2 %2)) 0)  (reverse (seq b)) (range))))","problem":122,"user":"50bc4e73e4b0594b91591c3d"},{"problem":122,"code":"(fn [str]\n  (->> str\n       reverse\n       (map #(if (= % \\0) 0 1))\n       (zipmap (iterate #(* 2 %) 1))\n       (map #(* (first %) (second %)))\n       (reduce +)))","user":"58969076e4b00487982d52a2"},{"code":"#(apply + (map-indexed (fn [i d] (* (- (int d) 48) (int (Math/pow 2 i)))) (reverse %)))","problem":122,"user":"4fbfe9a4e4b081705acca31f"},{"code":"(fn [bitstr] (reduce + (map #(if (= % \\1) %2 0) (reverse bitstr) (iterate #(* 2 %) 1))))","problem":122,"user":"5125834ae4b05d10e3e395fa"},{"code":"(fn [n]\n  (loop [s (reverse n) p 1 acc 0]\n    (if (empty? s) \n      acc\n      (recur (rest s) (* p 2) (if (= \\1 (first s)) (+ p acc) acc))\n    )\n  )\n)","problem":122,"user":"51897709e4b0288ada3dbdaa"},{"problem":122,"code":"reduce #(+ (- (int %2) (int \\0)) (* 2 %1)) 0","user":"5a3c5c54e4b001c08efc0ce3"},{"problem":122,"code":"reduce (fn [a b] (+ (* 2 a) (if (= b \\1) 1 0))) 0","user":"5eee7311e4b07c55ae4a0510"},{"code":"(fn [xs] (apply +\n            (map *\n                 (reverse\n                   (map #(- (int %1) 48) xs))\n                 (iterate #(* 2 %1) 1))))","problem":122,"user":"4ec60dc4535d6d7199dd36c0"},{"problem":122,"code":"; Clojure library\n#(read-string (str \"2r\" %))\n\n; Java library\n#_#(Integer/parseInt % 2)\n\n; third solution - don't use Java library functions\n#_(fn parse-binary [x]\n  (reduce\n   #(+ (* % 2) %2)\n   0\n   (map #(- (int %) (int \\0)) (seq x))))\n\n; second solution\n#_(fn parse-binary [x]\n  (reduce\n   #(+ (* % 2) %2)\n   0\n   (map #(Character/digit % 10) (seq x))))\n\n; first solution - yuck\n#_#(first (reduce\n          (fn [[acc pow2] val]\n            [(+ acc (* (Character/digit val 10) pow2)) (* 2 pow2)]) \n          [0 1]\n          (reverse (seq %))))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn [x]\n  (loop [result 0 n 0 num x]\n    (if (not (seq num))\n      (int result)\n      (recur (+ result (* (Math/pow 2 n) (if (= \\0 (last num)) 0 1))) (inc n) (butlast num)))))","problem":122,"user":"51857e64e4b0da5a5be3babe"},{"code":"(fn [bin]\n  (loop [ac 0\n         bmult (iterate (fn [x] (* x 2)) 1)\n         binseq (reverse (seq bin))]\n    (if (empty? binseq)\n      ac\n      (recur (+ ac (if (= \\1 (first binseq))\n                     (first bmult)\n                     0))\n             (next bmult)\n             (next binseq)))))","problem":122,"user":"501dfd54e4b051153f3b5b80"},{"code":"(fn [s]\n    (Integer/parseInt s 2))","problem":122,"user":"4dc0ff08535d020aff1edf84"},{"problem":122,"code":"#(->> %\n     (reverse)\n     (map-indexed (fn [i x] [i (if (= x \\0) 0 1)]))\n     (map (fn [[n x]] (* (reduce * 1 (repeat n 2)) x)))\n     (reduce +))","user":"58a822e4e4b01a0c0b232950"},{"code":"(fn [c] (int (reduce + (map-indexed #(if (= \\1 %2) (Math/pow 2 %1) 0) (reverse c)))))","problem":122,"user":"4e79ff2a535db169f9c796a9"},{"code":"(fn [binary-number]\n    (loop [bits (reverse (seq binary-number))\n           i 0\n           acc 0]\n      (if-let [bit (first bits)]\n        (let [bit-value (* (Math/pow 2 i)  (if (= \\0 bit) 0 1))]\n          (recur (rest bits)\n               (inc i)\n               (+ acc bit-value)))\n        acc)))","problem":122,"user":"4dbe19fe535d020aff1edf59"},{"problem":122,"code":"(fn\n  [x]\n  (reduce +\n    (map #(* (Character/getNumericValue %1) %2) (reverse x) (iterate (partial * 2) 1))))","user":"5401aefbe4b0df28a13c62c7"},{"problem":122,"code":"; my first solution\n;(fn [str] (first (reduce #(vector (+ (* (%1 0) 2) (Character/digit %2 10)) (* (%1 1) 2)) [0 1] str)))\n\n; adereth's solution; how obvious!\n; #(Integer/parseInt % 2)\n\n; inspired by aceeca1; can eliminate the vector to keep power-of-two value\n; => (fn [str] (reduce #(+ %1 %1 (Character/digit %2 10)) 0 str))\n; which simplfies to:\nreduce #(+ %1 %1 (Character/digit %2 10)) 0","user":"5a544eeee4b05d388ecb6c24"},{"code":"(fn [s]\n  (reduce +\n    (map *\n      (map #(- (int %) (int \\0)) \n        (reverse s))\n      (iterate #(+ % %) 1))))","problem":122,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [s] (int (reduce + (keep-indexed #(if (= \\1 %2) (Math/pow 2 %1)) (reverse s)))))","problem":122,"user":"4ebe766d535dfed6da9c6d94"},{"code":"(fn [x] (reduce + 0 (map * (map #(- (int %) 0x30) (reverse x)) (iterate #(* 2 %) 1))))","problem":122,"user":"4ed286d4535d44c135fd68d7"},{"problem":122,"code":"(fn convert [num-string]\n  (loop [s   (seq num-string)\n         n   0         \n         sum 0         ]\n    (if (empty? s)\n      sum\n      (recur (drop-last s) (inc n) (if (= (str (last s)) \"1\") (+ sum (#(reduce * (repeat %2 %1)) 2 n)) sum)))))","user":"5e218bb7e4b05b4b01516123"},{"code":"(fn [x]\n\t(reduce \n \t\t#(+ (* 2 %) %2)\n \t\t0\n\t\t(map (comp read-string str) (seq x))))","problem":122,"user":"51dd9370e4b0c33a4e1da40c"},{"problem":122,"code":"(fn [s]\n    (let [n (reverse (seq s))\n          to-d (fn [c] (if (= \\1 c) 1 0))]\n      (loop [acc 0\n             l n\n             pow 1]\n        (if (empty? l) acc\n          (recur (+ acc (* pow (to-d (first l)))) (rest l) (* 2 pow))) )))","user":"53ea3a63e4b036ad0777e4dc"},{"code":"#(loop [s % r 0]\n   (if (empty? s)\n     r\n     (recur (rest s) (+ (* 2 r) (if (= \\1 (first s)) 1 0)))\n   )\n )","problem":122,"user":"53244c9de4b09d4e7a9b54db"},{"code":"(fn [x]\n  (loop [x x acc 0]\n    (if (empty? x)\n      acc\n      (if (= (first x) \\1)\n        (recur (rest x) (+ (* 2 acc) 1))\n        (recur (rest x) (* 2 acc))))))","problem":122,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn [s] (reduce + (map * (reverse (map #(if (= \\1 %) 1 0) s)) (iterate #(* % 2) 1))))","problem":122,"user":"51f9b1d0e4b09be9c177e550"},{"problem":122,"code":"(fn [s] (reduce #(+ (* 2 %) ((comp read-string str) %2)) 0 s))","user":"56be8649e4b0f26550335983"},{"code":"(fn [x]\n  \n((reduce (fn [x y]\n  { :ans (+ (x :ans) (* (apply * (repeat (x :i) 2)) (Integer/parseInt (str y))))\n    :i (inc (x :i)) }\n) (cons {:ans 0 :i 0} (reverse x))) :ans)\n\n)","problem":122,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":122,"code":"(fn  [s]\n  (int (reduce +  (map-indexed (fn [i e] (if (= \"1\" (str e)) (Math/pow 2 i) 0)) (reverse s)))))","user":"5b2689e3e4b063e2438bcc33"},{"problem":122,"code":"(fn to-int [num-string]\n  (loop [pos 0\n         s (seq num-string)\n         res 0]\n    (if (empty? s)\n      res\n      (recur (inc pos)\n             (butlast s)\n             (if (= (last s) \\1)\n               (+ res (apply * (repeat pos 2)))\n               res)\n             )\n      )\n    )\n  )","user":"531bad96e4b08068f379ed93"},{"code":"(fn [bin]\n  (first (reduce (fn[acc, item]                  \n                   (if (= \\1 item)\n                     (list (+ (first acc) (second acc )) (* 2 (second acc)))\n                     (list (first acc) (* 2 (second acc)))\n                    )\n                  )\n           '(0 1)\n                 (reverse bin)\n  \n  )\n))","problem":122,"user":"513f53c6e4b051389b345b40"},{"problem":122,"code":"(fn \n  [binary-string] \n  (apply \n   + \n   (map last            \n        (filter      \n         #(= \\1 (first %))              \n         (map #(list % %2)   \n              (reverse binary-string)   \n              (map #(int (Math/pow 2 %))      \n                   (range (count binary-string))))))))","user":"5d7a748ce4b02e6b30c93547"},{"problem":122,"code":"(fn [bin]\n  (int (reduce +\n  (map-indexed\n   #(if (= %2 \\1) (Math/pow 2 %1) 0)\n   (reverse bin)))))","user":"5590ebb1e4b0277789237677"},{"problem":122,"code":"(fn [in]\n  (loop [digits in\n         num\t 0]\n    (if (empty? digits) num\n      (recur (rest digits) (+ (* 2 num) (- (int (first digits)) (int \\0)))))))","user":"5bafd5c8e4b0a20761a234dd"},{"problem":122,"code":"#(reduce + (map (fn [x p] (if (= \\0 x) 0 p))\n                     (reverse %)\n                     (iterate (partial * 2) 1)))","user":"54acf5c7e4b09f271ff37cdd"},{"code":"(fn readbin [s]\n  (reduce (fn [n, d]\n            (+ (* 2 n) d)) \n          (map #(- (int %) 48) s)))","problem":122,"user":"4dada426c9a9d6ed2a99dc57"},{"code":"#(first (reduce (fn [acc v] (if (= \\1 v) [(+ (Math/pow 2 (last acc)) (first acc))  (inc (last acc))] [(first acc) (inc (last acc))])) [0 0] (reverse %1)))","problem":122,"user":"4ebbf772535dfed6da9c6d76"},{"problem":122,"code":"(fn binary [x] (if (empty? x)\n                   0\n                   (+ (binary (drop 1 x))  ( * (reduce * (repeat (- (count x) 1) 2)) (Integer/parseInt (Character/toString(first x)))))))","user":"604f4be1e4b0b7ec0ac60ace"},{"problem":122,"code":"(fn [s]\n    (->> s\n         reverse\n         (map-indexed #(* (Character/digit %2 10) (Math/pow 2 %1)))\n         (apply +)\n         int))","user":"5501a1e1e4b07d26eda61d75"},{"problem":122,"code":"(fn [binary]\n    (loop [sum 0\n           power 0\n           digits (reverse (map (fn [c] (java.lang.Integer/parseInt (str c)))\n                                binary))]\n      (if (empty? digits)\n        sum\n        (recur (+ sum\n                  (* (int (java.lang.Math/pow 2\n                                              power))\n                     (first digits)))\n               (inc power)\n               (rest digits)))))","user":"57f904c5e4b0d3187e900936"},{"problem":122,"code":"(fn [s] \n    (let [r (reverse s)]\n        (loop [cad r res 0 i 0 p2 1]\n            (if (empty? cad) \n                res\n                (let [vi (Character/getNumericValue (first cad))]\n                    (recur (rest cad) (+ res (* vi p2)) (inc i) (* 2 p2)))))))","user":"54f8b6f4e4b01ecee9d8882c"},{"code":"reduce #(+ (* 2 %) ({\\0 0 \\1 1} %2)) 0","problem":122,"user":"4e1350af535d04ed9115e7d8"},{"problem":122,"code":"(fn [s] (reduce #(+ (* 2 %) %2) (map #(- (int %) 48) s)))","user":"56327168e4b0bfe05bf117a5"},{"problem":122,"code":"(fn [s]\n  (let [rev (map (comp read-string str) (reverse s))\n        pows (iterate (partial * 2) 1)]\n    (reduce + (map * rev pows))))","user":"5412ef7ee4b01498b1a719da"},{"problem":122,"code":"(fn [s] (apply +  \n          (map-indexed #(if \n                         (= %2 \\1) \n                         (int (Math/pow 2 %1)) \n                         0) \n               (reverse s))))","user":"5156e767e4b04360f2428e6b"},{"problem":122,"code":"(fn [b]\n  (reduce\n  (fn [dec [idx bin]]\n      (+ dec (* (Character/digit bin 10) (reduce * (repeat idx 2)))))\n  0 (map-indexed vector (reverse b))))","user":"55c66ffee4b0e31453f649c2"},{"problem":122,"code":"(fn [binary] (#(Integer/parseInt binary, 2)) )","user":"542baf7ce4b0dad94371f291"},{"problem":122,"code":"(fn[s](reduce (fn[r [k v]](+ r (if(= \\1 v)(int (Math/pow 2 k))0))) 0 (map-indexed #(identity [%1 %2])  (reverse s))))","user":"555c6344e4b0b056612e224c"},{"problem":122,"code":"#(reduce (fn [x b]\n           (+ (* 2 x) (if (= b \\0) 0 1))) 0 %)","user":"54f2fe9fe4b050824f58f5b8"},{"problem":122,"code":"(fn\n  [bin-str]\n  (let [pow-of-two #(reduce * (repeat % 2))]\n    (reduce #(+ %1 (pow-of-two %2)) 0\n            (keep-indexed #(if (= \\1 %2) %1) (reverse bin-str)))))","user":"55ed5a2de4b0121d4835fdd8"},{"problem":122,"code":"(fn [b] (apply + (map #(if (= %1 \\1) %2 0) (reverse b) (iterate (partial * 2) 1))))","user":"4e6b8ac8535d8ccf87e9ff19"},{"problem":122,"code":"(fn [b]\n  (loop [b (reverse b)\n         pow2 1\n         acc 0]\n    (if (empty? b)\n      acc\n      (recur (rest b) (* pow2 2) (+ acc (* pow2 (if (= (first b) \\0) 0 1))))\n    )\n  )\n)","user":"540f09b9e4b0addc1aec6725"},{"problem":122,"code":"(fn [s]\n  (->> s reverse (map {\\1 1, \\0 0})\n       (map * (iterate (partial * 2) 1))\n       (reduce + 0)))","user":"54c23252e4b045293a27f5fc"},{"problem":122,"code":"#((fn bin [text pre] (if (first text) (bin (rest text) (+ (* pre 2) (if (= (first text) \\1) 1 0))) pre)) % 0)","user":"5b465b8be4b02d533a91bc65"},{"code":"(fn [i] (Integer/parseInt i 2))","problem":122,"user":"51cec7b1e4b0e42293a2255b"},{"code":"(fn [s] (let [pows (map #(int (Math/pow 2 %)) (reverse (range 0 (count s))))]\n         (apply + (map second (remove #(= (first %) \\0) (map vector s pows))))))","problem":122,"user":"4db86aee535d1e037afb2193"},{"code":"(fn [n]\n  (let [cnt (count (seq n))]\n    (loop\n      [binary-num (reverse (seq n))\n       multiplier 1\n       total 0]\n      (if (= nil (first binary-num))\n        total\n        (recur\n         (rest binary-num)\n         (* 2 multiplier)\n         (if (= \\1 (first binary-num))\n           (+ total multiplier)\n           total))))))","problem":122,"user":"530d85dee4b08068f379eca8"},{"code":"#(read-string (str \"2r\" %1))","problem":122,"user":"52761edae4b03e8d9a4a74d4"},{"problem":122,"code":"(fn binary [s]\n  (loop [power 0 n 0 bitstr (reverse s)]\n    (if-not (seq bitstr) n\n    \t(let [digit (- (int (first bitstr)) (int \\0))\n              exp #(reduce * (repeat %2 %1))]\n          (recur (inc power) (+ n (* digit (exp 2 power))) (rest bitstr))))))","user":"54448e84e4b032a45b869393"},{"problem":122,"code":"(fn [s]\n  (let [bits (map #(= \\1 %) s)\n        with-pow (map vector bits (reverse (range (count bits))))]\n    \n    (int (reduce (fn [res v]\n              (let [[on exp] v]\n              \t(+ res (if on (Math/pow 2 exp) 0))))\n            0\n            with-pow))))","user":"55ede35ce4b0121d4835fde1"},{"problem":122,"code":"(fn binary->numeric\n  [s]\n  (->> s\n       (seq)\n       (reverse)\n       (map #(Integer/parseInt (str %)))\n       (map (fn [pos-n val]\n              (* pos-n val))\n            (cons 1 (iterate #(* 2 %) 2)))\n       (reduce +)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [n d] (+ (* 2 n) (case d\n                                 \\0 0\n                                 \\1 1)))\n          0\n          s))","user":"4ff24a1ae4b0678c553fc337"},{"problem":122,"code":"#(loop [b (reverse (apply vector %)) r 0 t 1]\n   (cond (empty? b) r\n         (= (first b) \\0) (recur (rest b) r (* t 2))\n         (= (first b) \\1) (recur (rest b) (+ r t) (* t 2))))","user":"592bb806e4b072a2710fcf46"},{"problem":122,"code":"(fn [s]\n  (apply +\n    (map #(* (read-string (str %1)) %2)\n         (reverse s)\n         (iterate #(* 2 %) 1))))","user":"548fa2dfe4b0e286459a1240"},{"problem":122,"code":"(fn [s]\n    (reduce +\n        (remove nil? (map-indexed (fn [i e]\n                                    (when (= e \\1)\n                                      (int (Math/pow 2 i))))\n                                  (reverse s)))))","user":"4e617114535d8ccf87e9fe5b"},{"problem":122,"code":"(fn [b]\n  (apply + (for [idx (range (count b))]\n     (* (- (int (nth (reverse b) idx)) 48) (int (Math/pow 2 idx))))))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":122,"code":"(fn rdbin [st]\n  (first (reduce #(let [[r n] %1] [(+ r (* n %2)) (* n 2)])\n                 [0 1]\n                 (reverse (map #(if (= % \\0) 0 1) (seq st))))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":122,"code":"(fn binary\n  ([mul num]\n   (if num\n     (+ (* mul (- (int (first num)) 48)) (binary (* 2 mul) (next num)))\n     0))\n  ([num]\n   (binary 1 (reverse num))))","user":"57d0cd58e4b0bd073c20235e"},{"problem":122,"code":"(fn to-dec [bits](let [length (count bits)]\n            (apply + \n            (map #(if (= %2 \\1) %1 0) \n            (reverse \n            (take length \n            (iterate (partial * 2) 1))) \n            bits))))","user":"54e4edcae4b024c67c0cf7f3"},{"code":"(fn bin2deci [s]\n  (let [powvec (map #(vector %2 (- (int %1) (int \\0))) \n             (reverse s) (iterate (partial * 2) 1))\n        ]\n        (reduce #(+ %1 (* (first %2) (second %2))) 0 powvec)\n    )\n  )","problem":122,"user":"529a73bde4b02ebb4ef75096"},{"problem":122,"code":"(fn f [d] (if (empty? d) 0 (+ (if (= (last d) \\0) 0 1) (* 2 (f (drop-last d))))))","user":"57a5bdc4e4b0a966079561fd"},{"code":"(fn [bin] (letfn [(my-exp [x y]\n                (reduce * (repeat y x)))\n        (to-num [idx ch]\n                (if (= ch \\1)\n                  (my-exp 2 idx)\n                  0))]            \n    (reduce + (map-indexed to-num (reverse bin)))))","problem":122,"user":"51430fb2e4b0c172af7558ce"},{"code":"(fn [s]\n  (loop [b (map #(Integer/parseInt (str %)) s) d 0 p 0]\n    (if (empty? b) d\n        (recur (butlast b) (+ d (cond (= 0 (last b)) 0\n                                      (and (= 1 (last b)) (= 0 p)) 1       \n                                      :else (apply * (repeat p 2))\n                                                    )) (inc p)))))","problem":122,"user":"4e16bdef535d04ed9115e7e9"},{"problem":122,"code":"(fn read-a-binary-number [st]\n  (int (reduce +\n               (map-indexed (fn [index item] (* item (Math/pow 2 index)))\n                            (map (fn [num] (Character/getNumericValue num))\n                                 (reverse st))))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":122,"code":"(fn b\n  ([s] (b s 1))\n  ([s n]\n   (if (empty? s)\n     0\n     (+\n      (* ((comp read-string str last) s) n)\n      (b (butlast s) (* 2 n))))))","user":"5f03ab5be4b0cf489e8d7f37"},{"problem":122,"code":"(fn my-bin2str [str]\n  (let [is-one #(= % \\1)\n        rstr   (reverse str)\n        pow    (fn my-pow [x n]\n                 (cond\n                   (= n 0) 1\n                   (= n 1) x\n                   :else   (* x (my-pow x (dec n)))\n                 )\n               )\n        getnum #(if (is-one %2) (pow 2 %1) 0)\n        nums   (keep-indexed getnum rstr)\n        sum    (reduce + nums)]\n    sum\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"code":"(fn [b] (int (reduce + (map-indexed #(* (- (int %2) 48) (Math/pow 2 (- (count b) (inc %)))) b))))","problem":122,"user":"5061cc17e4b0a30dc9a35d34"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [acc s] (+ (* acc 2) (read-string (str s)))) 0 s))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":122,"code":"( fn [ x ] ( reduce #( + ( * 2 %1 ) %2 ) ( map read-string ( map str ( seq x ) ) ) ) )","user":"57561529e4b02ea1147992d3"},{"problem":122,"code":"(fn [s] (->> (map #(- (int %) 48) s)\n             reverse\n             (map-indexed #(bit-shift-left %2 %)) (reduce +)))","user":"547d66a1e4b0c51c1f4d72f2"},{"problem":122,"code":"(fn [s]\n  (let [seq1 (reverse (map #(Character/getNumericValue %) s))\n        seq2 (map #(reduce * (repeat % 2)) (range 0 (count seq1)))\n        seq3 (map * seq1 seq2 )]\n    (reduce + 0 seq3)))","user":"5489dd4de4b0e286459a11ef"},{"problem":122,"code":"(fn [n] \n   (let [n (map #(Integer/parseInt (str %)) (seq n))]\n     (int (reduce + (for [x (map vector (reverse n) (range (count n)))] (* (first x) (Math/pow 2 (second x)) ) )))\n     )\n   \n  )","user":"5a8d55a8e4b05369db4d2514"},{"code":"(fn [s]\n  (apply +\n    (map #(* ({\\0 0 \\1 1} %) %2)\n      (reverse s)\n      (iterate #(* % 2) 1))))","problem":122,"user":"507a396be4b08327cd804a69"},{"problem":122,"code":"(fn [s] (->> s\n               (map #(- (int %) 48))\n               (reverse)\n               (map-indexed (fn [idx i] (* i (Math/pow 2 idx))))\n               (reduce +)\n               (int)))","user":"5901158de4b0438e51c2d039"},{"code":"(fn bin-to-int [string]\n  (let [exp (fn exp [x n]\n               (reduce * (repeat n x)))]\n  (reduce + \n          (map-indexed (fn \n                         [idx itm] \n                         (* (exp 2 idx) itm))\n                       (reverse (map read-string (re-seq #\"\\d\" string)))))))","problem":122,"user":"50fe2420e4b03cd852b4e84a"},{"code":"(fn [val] (reduce #(+ (* 2 %) %2) 0 (map #(- (int %) 48) (seq val))))","problem":122,"user":"528a791ae4b0239c8a67ae77"},{"code":"(fn [bin]\n  (reduce + (map-indexed #(if (= \\0 %2) 0 (apply * (repeat %1 2))) (reverse bin))))","problem":122,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":122,"code":"(fn [x]\n  (loop [l (reverse x)\n        total 0\n         i 0]\n    (if (seq l)\n      (if (= (first l) \\1) \n        (recur (rest l) (+ total (reduce * (repeat i 2))) (inc i))\n        (recur (rest l) total (inc i)))\n      total)))","user":"593744abe4b02506e01a299b"},{"problem":122,"code":"(fn [s] (loop [s s x 0]\n         (if-let [x' (first s)]\n           (recur (rest s) (+ (* x 2) \n                                (if (= x' \\0) 0 1)))\n           x)))","user":"56de78fde4b0ea9b8538f83c"},{"code":"(fn [s] (int (reduce + (map * (map #(- (int %) 48) (reverse s)) (map #(Math/pow 2 %) (range (count s)))))))","problem":122,"user":"4ff76effe4b0678c553fc390"},{"problem":122,"code":"(fn [n]\n  (loop [n (seq n)\n         mult 1\n         res 0]\n    (let [l (last n)\n          r (butlast n)\n          c (if (= \\1 l) 1 0)]\n      (if l\n        (recur r\n               (* mult 2)\n               (+ res (* mult c)))\n        res))))","user":"56732c84e4b05957ce8c611c"},{"problem":122,"code":"(fn [s] (int (apply + (map * (map #(Math/pow 2 %) (range (- (count s) 1) -1 -1))\n          (map #(Character/digit % 10) (seq s))))))","user":"54caaa48e4b057c6fda3a267"},{"code":"reduce #(+ (* 2 %) ({\\1 1 \\0 0} %2)) 0","problem":122,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"(fn\n  [str]\n  (loop [mystr (reverse str)\n         mypow 0\n         mytot 0]\n    (if (empty? mystr)\n      (int mytot)\n      (recur (rest mystr) (inc mypow) (+ mytot (* (- (int (first mystr)) 48) (Math/pow 2 mypow)))))))","problem":122,"user":"51f13b80e4b06a20a2523f38"},{"problem":122,"code":"(fn [string] (reduce + (map * (reductions * (conj (repeat 2) 1)) (map #(Character/digit % 10) (reverse string)))))","user":"5ee738dee4b029a2061bbea2"},{"problem":122,"code":"(fn[s](reduce + (map * (reverse (map {\\0 0 \\1 1} s)) (iterate #(* 2 %) 1))))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"(fn [b] (reduce #(+ %1 (* (read-string (str (first %2))) (apply * (repeat (second %2) 2)))) 0\n                (map vector (reverse b) (range))))","problem":122,"user":"51e1a1fae4b06a68e693eaf6"},{"problem":122,"code":"#(first (reduce \n         (fn [[acc exp] e] \n           (if (= e \\0) \n             [acc (dec exp)] \n             (let [pow (int (Math/pow 2 exp)) \n                   nacc (+ acc pow)] \n               [nacc (dec exp)]))) \n         [0 (dec (count %))] \n         %))","user":"6026737ee4b0d5df2af2222f"},{"code":"(fn [bin_str]\n   (let [bs (map #(- (int %) (int \\0)) bin_str)\n         ts (reverse (take (count bin_str) (iterate (partial * 2) 1)))]\n     (reduce + (map * bs ts))))","problem":122,"user":"4f409e29e4b0e243712b1fb6"},{"code":"(fn convert-from-binary [binary-as-str]\n  (Integer/parseInt binary-as-str 2))","problem":122,"user":"52b71bd2e4b0c58976d9ad4d"},{"code":"(fn [x] \r\n  (loop [a (map #(- (int %) 48) x) n 0]\r\n        \r\n    (if (empty? a) n\r\n      (recur (rest a) (+ (* 2 n) (first a))))))","problem":122,"user":"502a9fdee4b095a7adb898b4"},{"problem":122,"code":"(fn [s]\n  (let [exp-2 #(reduce * (take % (repeat 2)))]\n    (reduce +\n            (keep-indexed\n             (fn [i v]\n               (case v\n                 \\1 (exp-2 i)\n                 nil))\n             (reverse s)))))","user":"5e08c3dde4b0978307768fc8"},{"problem":122,"code":"(fn [bins]\n    (int (reduce +\n        (map #(if (= (str %1) \"1\") \n            (Math/pow 2 %2) 0) (reverse bins) (range)))))","user":"5fa358a1e4b0f0ebd91b77fd"},{"problem":122,"code":"(fn [x] (reduce + 0 (map #(if (= %1 \\1) %2 0) (reverse x) (iterate (partial * 2) 1))))","user":"587294f0e4b01531a375ea1e"},{"problem":122,"code":"(fn [st]\n  (reduce + \n          (map-indexed \n          #(if (zero? %2) 0 (reduce * (repeat %1 2))) \n          (map #(- (int %) (int \\0)) (reverse (seq st))))))","user":"56bb9ccce4b0f26550335959"},{"code":"#(reduce\n  (fn [x y]\n    (+ (* x 2) (Character/digit y 10))\n    )\n  0 %)","problem":122,"user":"5298d3f4e4b02ebb4ef75068"},{"problem":122,"code":"(fn [s]\n  (let [v (doall \n           (mapv #(Character/getNumericValue %) s))]\n    (long\n     (reduce \n      +\n       (doall\n        (map #(* % (Math/pow 2 %2)) v (iterate dec (dec (count v)))))))))","user":"55aaa36fe4b0988bba2ad94f"},{"problem":122,"code":"(fn [bn]\n  (loop [b (reverse bn) n 0 d 0] \n    (if (empty? b) d \n      (recur (rest b)\n        (inc n) \n        (if (= (first b) \\1)\n          (+ d ((fn [n]\n            (loop [n2 1 n0 0]\n              (if (= n0 n) n2 \n                (recur (* n2 2) (inc n0))))) n))\n                d)))))","user":"53069e16e4b02e8216869798"},{"code":"(fn [sbin]\n\t(Integer/parseInt sbin 2)\n )","problem":122,"user":"5029f263e4b023940c84aa45"},{"problem":122,"code":"#(->> % (seq) (map (comp read-string str))\n      (reduce (fn [agg v] (+ (* agg 2) v)) 0))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn [n]\n  (reduce +\n    (map *\n      (map #(Character/digit % 2) (reverse n))\n      (iterate #(* % 2) 1)\n    )\n  )\n)","problem":122,"user":"51473a70e4b0d520409ed394"},{"problem":122,"code":"(fn [s] (apply +\n               (map-indexed #(* (read-string (str %2))\n                                (int (Math/pow 2 %1))) (reverse s))))","user":"585dbe41e4b0f14aab7c879f"},{"problem":122,"code":"(fn [s]\n  (read-string\n   (str \"2r\" s)))","user":"57008afae4b08d47c97781ca"},{"code":"(fn bin [s] (reduce +\n                    (map #(* (reduce * (repeat %2 2)) (Integer/parseInt (str %1)))\n                         (seq s)\n                         (reverse (range (count s))))))","problem":122,"user":"52d3f666e4b09f7907dd1327"},{"problem":122,"code":"(fn [s]\n  (int (reduce + (map-indexed #(* (Integer/parseInt (str %2)) (Math/pow 2 %1)) (reverse s)))))","user":"541b1f25e4b01498b1a71a63"},{"problem":122,"code":"(fn [s]\n  (let [in (vec s)]\n    (loop [pow 1 i 0 v in total 0]\n      (if (empty? v)\n        total\n        (if (= \\1 (peek v))\n          (recur (* pow 2) (int i) (pop v) (+ total pow))\n          (recur (* pow 2) (int i) (pop v) total))))))","user":"4f1e4ab5535d64f603146496"},{"problem":122,"code":"(fn [str]\n    (loop [strseq (reverse (seq str))\n           res    0\n           pos    1]\n      (if (empty? strseq)\n        res\n        (let [[thisbit & rest] strseq\n              newres (+ res (if (= \\1 thisbit) pos 0))]\n          (recur rest newres (* 2 pos))))\n      ))","user":"554a75c9e4b0a04f79299575"},{"code":"#(int \n (apply + \n  (map-indexed \n    (fn [i b] \n      (* (- (int b) (int \\0))\n         (Math/pow 2 i)))\n    (reverse %))))","problem":122,"user":"5089ebfee4b03217b26a539f"},{"code":"(fn [xs] (reduce + (map * (iterate #(* 2 %) 1) (reverse (map #(Character/digit % 10) xs)))))","problem":122,"user":"511d11d7e4b022853b0e079f"},{"code":"(fn [s] (loop [s s n 0] \n          (if (empty? s) n\n            (if (= \\1 (first s)) (recur (rest s) (+ (* 2 n) 1))\n                   (recur (rest s) (* 2 n))))))","problem":122,"user":"535a18e3e4b04ce2eb3ed2a4"},{"problem":122,"code":"(fn [value]\n   (letfn [(from-binary [seq acc multiplier]\n             (let [[f & r :as all] seq]\n               (if (empty? all)\n                 acc\n                 (from-binary\n                   (rest seq)\n                   (if (= f \\1) (+ acc multiplier) acc)\n                   (* 2 multiplier)))))]\n     (from-binary (seq (reverse value)) 0 1)))","user":"5e99cbd4e4b0157ca96647e6"},{"problem":122,"code":"#(reduce (fn [x y] (+ (* 2 x) (- (int y) 48))) 0 (seq %))","user":"56102f50e4b05f002753df6b"},{"code":"#(reduce (fn [a x] (+ (* 2 a) x)) (map (fn [c] (- (int c) 48)) %))","problem":122,"user":"52a88c4de4b0c58976d9ac30"},{"problem":122,"code":"(fn pia [s]\n  (Integer/valueOf s 2))","user":"569ce6fee4b0542e1f8d146c"},{"code":"(fn [s] (apply + (map #(* (- (int %) 48) %2) (reverse s) (iterate #(* 2 %) 1))))","problem":122,"user":"50ad7888e4b0a40c9cfb08c7"},{"code":"(fn [strng]\n      (let [vct (map #(Integer/parseInt (str %)) strng)]\n           (apply + (map #(* %1 %2) (reverse vct) (take (count vct) (iterate #(* 2 %)1))))\n\t)\n )","problem":122,"user":"52c3a0f4e4b0c2d177d620c6"},{"problem":122,"code":"(fn[sin1]\n        (loop [s (reverse (seq sin1))\n               pos 0\n               res 0]\n          (cond (empty? s) (int res)\n                :else\n                (recur (rest s)\n                       (inc pos)\n                       (+ res (int (* (- (int (first s)) (int \\0))(Math/pow 2 pos))) )))))","user":"56011393e4b04bb52996e178"},{"code":"(fn bcomp [b]\n  (loop [v 0\n         b (reverse b)\n         i 1]\n    (if (empty? b)\n      v\n      (if (= (first b) \\1)\n        (recur (+ v i) (rest b) (* i 2))\n        (recur v (rest b) (* i 2))))))","problem":122,"user":"532b43c3e4b09d4e7a9b5531"},{"problem":122,"code":"(fn [bin-str] (Integer/parseInt bin-str 2))","user":"5227eacee4b0186687e23a5e"},{"problem":122,"code":"(fn bin-str-to-num [more-str]\n  (reduce #(+ %1 (* (Character/digit (first %2) 10) (last %2)))\n          (Character/digit (last more-str) 10)\n          (partition 2\n                     (interleave\n                      (rest (reverse more-str))\n                      (iterate #(* % 2) 2)))))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":122,"code":"(fn \n  [s]\n  (int (reduce + (map-indexed (fn [a b] (* (Math/pow 2 a) (read-string b)) ) (reverse (re-seq #\"\\d\" s))))))","user":"5a984657e4b0d174b936c78a"},{"code":"(fn [string]\n  (loop [s (seq string), acc 0]\n    (let [n (if (= (first s) \\1) 1 0)]\n      (if s\n        (recur (next s) (+ n (* 2 acc)))\n        acc))))","problem":122,"user":"4f28c979e4b0d6649770a01a"},{"code":"(fn [s] (apply + (map * (map #(- (int %) 48) (reverse s)) (iterate (partial * 2) 1))))","problem":122,"user":"513dcc1ce4b0825f97f7f964"},{"code":"#(Long/parseLong %, 2)","problem":122,"user":"514d8084e4b019235f6c0588"},{"problem":122,"code":"(fn [x] (apply + (map * (iterate #(* 2 %) 1) (into () (map #(- (int %) 48) (seq x))))))","user":"532a033be4b09d4e7a9b551f"},{"code":"(fn bin [bn]\n  (loop [cur (last bn) rst (butlast bn) curnum 1 sum 0]\n    (if (nil? cur)\n      sum\n      (let [newsum (if (= cur \\1) (+ sum curnum) sum)]\n        (recur (last rst) (butlast rst) (* 2 curnum) newsum)))))","problem":122,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":122,"code":"(fn read-binary\n  [bin-str]\n  (reduce + (map *\n                 (reverse (map #(Character/digit % 10) bin-str))\n                 (iterate (partial * 2) 1))))","user":"52ea025ae4b09f7907dd14b5"},{"code":"(fn [x] (->> x (map int) (map #(- % 48)) (reduce #(+ (* 2 %1) %2))))","problem":122,"user":"52f5f8b4e4b09b582c12c9cc"},{"problem":122,"code":"(fn [s] (apply + (map * (cons 1 (iterate (partial * 2) 2)) (reverse (map read-string (rest (clojure.string/split s #\"\")))))))","user":"53e2ac1ae4b036ad0777e3f3"},{"code":"(fn [s]\n  (reduce \n    + \n    (map \n      #(* (- (int %) 48) %2) \n     (reverse s) \n     (iterate (partial * 2) 1))))","problem":122,"user":"4e131443535d04ed9115e7d3"},{"problem":122,"code":"(fn [x]\n    (let [seq-int (map #(Character/getNumericValue %) x)\n          digits (reverse (take (count seq-int) (iterate (partial * 2) 1)))]\n      (->> (map * seq-int digits)\n           (reduce +))\n      \n         )\n      )","user":"55ba70f9e4b01b9910ae29d4"},{"code":"(fn [s]\n  (reduce +\n    (map *\n         (reductions (partial * 2) (repeat 1))\n         (map #(Integer/parseInt (str %)) (reverse s)))))","problem":122,"user":"4dbb1126535d1e037afb21b3"},{"code":"(fn bin [s] (if (= (count s) 0)\n               0\n               (+ (if (= (last s) \\1) 1 0) (* 2 (bin (butlast s))))\n               ))","problem":122,"user":"5084cb7de4b0fb8f40674bfb"},{"problem":122,"code":"(fn [n] (reduce #(+ (* %1 2) %2) (map #(- (int %) 48) (into [] n))))","user":"597fa3fbe4b021a7a535fdbf"},{"problem":122,"code":"(fn [str] (int (reduce + (map-indexed #(if (= \\1 %2) (Math/pow 2 %1) 0) (reverse str)))))","user":"5d45bd1de4b07c84aa5ae6a4"},{"problem":122,"code":"(fn [b]\n  (let [exp #(reduce * (repeat %2 %1))\n        decimals (map-indexed (fn [idx itm]\n                                (* (-> itm  str read-string)\n                                   (exp 2 idx)))\n                              (reverse b))]\n    (apply + decimals)))","user":"51b8d3d5e4b050a1176cd69d"},{"problem":122,"code":"(fn\n  [x]\n  (let [n (fn n [i]\n             (if (> i 0)\n               (* 2 (n (dec i)))\n               1))]\n    (apply + (map *\n                  (reverse (map n (range (count x))))\n                  (map #(if (= % \\1) 1 0) x)))\n    ))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":122,"code":"(fn [arg] \n  (reduce #(+ %1 (int (Math/pow 2 %2)) ) 0 (keep-indexed #(if (= \\1 %2) %1) (reverse arg))))","user":"56c60b36e4b05cc29241eead"},{"code":"(fn [n]\n  (Integer/parseInt n 2))","problem":122,"user":"4fee04a0e4b0678c553fc308"},{"code":"(fn f [x]\n  (if (empty? x)\n      0\n      (let [val (Integer/parseInt (str (first x)))]\n        (+ (bit-shift-left val (dec (count x))) (f (rest x))))))","problem":122,"user":"4eb66737535d7eef3080736b"},{"problem":122,"code":"(fn [bin-str]\n  (let [as-num-vals (reverse (map #(Character/getNumericValue %) bin-str))]\n     (long (reduce + (map #(* %1 (Math/pow 2 %2)) as-num-vals (range))))))","user":"53716539e4b0fc7073fd6eb1"},{"code":"(fn [b] \n  (apply + \n   (map * (reverse (map #(if (= \\1 %) 1 0) b))\n          (iterate (partial * 2) 1))))","problem":122,"user":"4f280840e4b0d6649770a010"},{"code":"#(.intValue (apply + (map (fn [c p]\n                 (* (Math/pow 2 p)\n                    (Integer/parseInt (.toString c))))\n               (reverse %)\n               (range))))","problem":122,"user":"4f73f78de4b044e54cd9a8f3"},{"problem":122,"code":"(fn [s]\n    (reduce + (map-indexed\n                (fn [i n] \n                    (*\n                      (long (Math/pow 2 i))\n                      (Long/parseLong (str n))))\n                (reverse s))))","user":"56fd058be4b08d47c97781a1"},{"problem":122,"code":"(fn [s]\n  (->> (interleave (reverse s) (iterate (partial * 2) 1))\n       (partition 2)\n       (filter #(-> % first (= \\1)))\n       (map second)\n       (reduce +)))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":122,"code":"(fn  [s] \n     (reduce (fn [acc ch]\n            \t(if (= \\0 ch)\n              \t\t(* 2 acc)\n              \t\t(+ 1 (* 2 acc))))\n             0 \n             (reverse ( reverse s))))","user":"5794fd7be4b0e215f87e8476"},{"code":"(fn [str] (Integer/parseInt str 2))","problem":122,"user":"4f98ead0e4b0dcca54ed6cf8"},{"code":"(partial reduce (fn [n c] (if (= c \\1) (inc (bit-shift-left n 1)) (bit-shift-left n 1))) 0)","problem":122,"user":"4e6fa38b535d5021c1a89622"},{"problem":122,"code":"(fn [x] (apply + \n               (map * \n                    (reverse (map #(- (int %) 48) (seq x)))\n                    (take (count (seq x)) (iterate (partial * 2) 1)))))","user":"57dafe97e4b0bd073c20241c"},{"problem":122,"code":"(fn [s]\n    (reduce + (map #(if (= \\1 %1) (reduce * (repeat %2 2)) 0)\n                   (reverse s)\n                   (range (count s)))))","user":"4f9b3532e4b0dcca54ed6d13"},{"code":"(fn [s] (apply + (map * (reverse (for [c s] (- (int c) 48))) (iterate #(* 2 %) 1))))","problem":122,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn [x]\n  (int\n    (reduce +\n        (map-indexed #(* (Math/pow 2 %1) %2)\n          (map read-string\n            (reverse (rest (clojure.string/split x #\"\")))))))\n)","problem":122,"user":"4fe610fde4b0e8f79898fece"},{"problem":122,"code":"(fn [b]\n  (loop [i 0\n         n 0]\n    (if (= i (count b))\n      n\n      (if (= \\1 (get b i))\n        (recur (inc i) (+ n (int (Math/pow 2 (- (count b) i 1)))))\n        (recur (inc i) n)))))","user":"57d57f65e4b0bd073c2023b3"},{"problem":122,"code":"(fn [str-val]\n  (apply + (map-indexed #(reduce * (- (int %2) (int \\0)) (take % (repeat 2))) (reverse str-val))))","user":"57481f1fe4b009280f9f2b82"},{"problem":122,"code":"(fn [s]\n    (reduce (fn [acc el]\n              (+ (* 2 acc) (Integer/valueOf (str el))))\n            0\n            s))","user":"5245e320e4b09dbe66b56177"},{"code":"(fn read-binary [s]\r\n  (loop [s (reverse s)\r\n         m 1\r\n         result 0]\r\n    (if (empty? s)\r\n      result\r\n      (recur (rest s)\r\n             (* 2 m)\r\n             (if (= (first s) \\0)\r\n               result\r\n               (+ result m))))))","problem":122,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":122,"code":"(fn\n[bin-str]\n(int (reduce + \n          (map-indexed \n          (fn [idx itm] (* (Math/pow 2 idx) itm)) \n          (reverse (map #(Integer/parseInt %) (re-seq #\"\\d\" bin-str)))))))","user":"5dcb1e73e4b02b31cc3da3b6"},{"code":"#(reduce (fn [x y] (+ (* 2 x) y))\n         (map read-string\n              (map str\n                   (reverse (into () %)))))","problem":122,"user":"4ff304f4e4b0678c553fc343"},{"problem":122,"code":"(fn\n  [bin]\n  (apply +\n         (map #(* % (- (int %2) 48)) (iterate (partial * 2) 1) (reverse bin))))","user":"57596ba7e4b02ea11479931a"},{"code":"(fn [s]\n  (reduce #(+ (* 2 %1) (- (int %2) 48)) 0 s))","problem":122,"user":"52160dbee4b0bf4bffd29cb3"},{"problem":122,"code":"(fn bin-to-dec [binary]\n  (->> (map-indexed #(if (= %2 \\1) (apply * (repeat %1 2)) 0) (reverse binary))\n       (apply +)))","user":"5aa4f7dae4b0d174b936c88c"},{"code":"(fn [s] (reduce #(let [x (* 2 %1)] (if (= %2 \\1) (inc x) x)) 0 (seq s)))","problem":122,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":122,"code":"(fn [str]\n (:tot (reduce (fn [rec x]\n           (if (= x \\1)\n             (assoc rec :tot (+ (:tot rec) (:pwr rec)) :pwr (* 2 (:pwr rec)))\n             (assoc rec :pwr (* 2 (:pwr rec)))))\n         {:tot 0 :pwr 1}\n    (reverse (seq str)))))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":122,"code":"(fn rb\n  [binary-number-str]\n  (int\n    (reduce +\n               (map *\n                      (map #(Math/pow 2 %) (range (count binary-number-str)))\n                      (map #(Character/getNumericValue %) (reverse (seq binary-number-str))))))\n  )","user":"5b73e500e4b047b03b2036ba"},{"problem":122,"code":"(fn [s]\n  (reduce #(+ (* %1 2) %2) 0 (map {\\0 0 \\1 1} s)))","user":"546ed28be4b00cfc9eacc1a5"},{"problem":122,"code":"(fn   [s]\n  (let [c->b (fn [c]\n               (- (int c) (int \\0)))\n        digits (map c->b (seq s))\n        pow-2 (fn [n]\n                (reverse (take n\n                               (iterate #(* 2 %) 1))))]\n\n    (apply +\n           (map *\n                digits\n                (pow-2 (count digits))))))","user":"59971dcbe4b07157cc8daacb"},{"code":"reduce #(+ (* 2 %1) (if (= %2 \\1) 1 0)) 0","problem":122,"user":"4f7869c2e4b0fbe0118ec589"},{"problem":122,"code":"#(->> %\n      (reverse)\n      (map-indexed (fn [i x] (if (= x \\1) (int (Math/pow 2 i)) 0)))\n      (apply +))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":122,"code":"#(loop [bin % factor 1 nm 0]\n   (if (empty? bin)\n     nm\n     (recur (butlast bin) (* factor 2) (+ nm (* factor (- (int (last bin)) 48))))\n  )\n)","user":"5e947a69e4b0fbed045a37f8"},{"code":"(partial reduce #(+ (* 2 %1) (- (int %2) 48)) 0)","problem":122,"user":"4f052eaf535dcb61093f6bf3"},{"problem":122,"code":"(fn [str]\n\t(let [ powOf2 (fn [x] (reduce * (repeat x 2)))\n\t\tn (count str)\n\t\tnRange (reverse (range 0 n))\n\t\texponentsOf2 (map (fn [x] (second x)) (filter #(= \\1 (first %)) (map vector str nRange)))\n\t\ttotals (map powOf2 exponentsOf2) ]\n\t\t(reduce + totals)))","user":"598af379e4b02b9968b84ce6"},{"problem":122,"code":"reduce #(+ (* % 2) (if (= %2 \\1) 1 0)) 0","user":"597768d0e4b01722bebd4cee"},{"problem":122,"code":"(fn[s]\n  (reduce + \n\t  (map #(let [[k v] %] (* k v))\n\t    (zipmap (  (fn _pows[p]\n\t  (cons p (lazy-seq (_pows (* p 2))))\n\t  ) 1) (map #(compare % \\0) (reverse s))))))","user":"52271ffee4b04e78ff2e19a9"},{"code":"(fn [s] \n  (reduce #(+ (* % 2) (if (= \\0 %2) 0 1)) 0 s))","problem":122,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"(fn [x] (apply + (map-indexed #(if (= %2 \\1) (reduce * (repeat % 2)) 0) (reverse x))))","problem":122,"user":"520e32a2e4b066f3ea161c93"},{"problem":122,"code":"(fn [bin]\n   (let [binseq (reverse (seq bin))]\n     (loop [[head & remaining] binseq\n            base 1\n            res 0]\n       (if (nil? head)\n         res\n           (recur remaining (* base 2) (+ res (* base (Integer. (str head)))))\n           ))))","user":"5d0beecee4b0cc9c91588239"},{"problem":122,"code":"(fn [astr] \n(let [fin (fn [rstr s] (if (first rstr ) \n                           (let [c (first rstr)] \n                             (if (= c \\1) (recur (rest rstr) (+ (* 2 s) 1))\n                               \t\t\t\t(recur (rest rstr) (* 2 s)) )\n                           ) s)\n              )] (fin astr 0)))","user":"59ff9424e4b01bb0ae8afd24"},{"code":"#(loop [place 1\n         substr (reverse %)\n         acc 0]\n    (if (empty? substr)\n      acc\n      (recur (* place 2) (rest substr) (+ acc (* place (read-string (str (first substr))))))\n      )\n  )","problem":122,"user":"52e59ca5e4b09f7907dd1464"},{"code":"(fn [s]\n  (apply + \n  \t(map *\n\t       (iterate #(* 2 %) 1)\n    \t   (map #(Integer/parseInt (str %)) (seq (reverse s)))\n       \t)\n  )\n)","problem":122,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":122,"code":"(fn read-binary [s]\n  (loop [acc 0, digits (map #(- (int %) 48) (reverse s)), exponent 1]\n    (if (empty? digits) acc\n      (recur (+ acc (* exponent (first digits))) (rest digits) (* 2 exponent)\n))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":122,"code":"(fn [s]\n  (->>\n   s\n   (map #(Integer. (str %)))\n   (reduce (fn [acc v] (+ (* 2 acc) v)))))","user":"547584d9e4b0c51c1f4d729b"},{"problem":122,"code":"(fn [bin]\n  (reduce +\n          (map * (map #(- (int %) 48) (reverse bin))\n               (iterate #(* 2 %) 1))))","user":"5e471203e4b043cd24807a2a"},{"problem":122,"code":"(fn to-dec\n  ([bin i top]\n   (let [x (int (* (- (int (nth bin i)) 48) (Math/pow 2 i)))]\n     (if (= top i)\n       x\n       (+ x (to-dec bin (inc i) top)))))\n  ([bin]\n   (to-dec (reverse bin) 0 (- (count bin) 1))))","user":"5b4fef74e4b02d533a91bcde"},{"problem":122,"code":"(fn [st]\n  (let [sq (reverse (map #(- (int %) 48) st))] \n  \t(reduce + (for [i (range (count sq))]\n                (* (nth sq i) (reduce * (repeat i 2)))))))","user":"558bb38fe4b0277789237631"},{"problem":122,"code":"(fn [x]                                                                                                                                        \n  (reduce #(if (= (first %2) \\1) (+ (second %2) %1) %1) 0 (map vector (reverse x) (iterate (partial * 2) 1))))","user":"54f4adc8e4b0f2f3c5226e86"},{"problem":122,"code":"(fn [str] (apply + (map * (reverse (map #(Character/digit % 10) str)) (iterate #(* 2 %)1))))","user":"561cad18e4b064ca9f4b169d"},{"problem":122,"code":"(fn to-i\n  [binary-str]\n  (let [digits (map #(if (= % \\0)\n                       0 1) binary-str)]\n    (loop [current-base 1\n           digits (reverse digits)\n           r 0]\n      (if-not (empty? digits)\n        (recur (* current-base 2) (rest digits) (+ r (* current-base (first digits))))\n        r\n        ))))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":122,"code":"(fn [s] (reduce + (map-indexed #(bit-shift-left (Integer/parseInt (str %2)) %1) (reverse s))))","user":"5e246f92e4b05b4b01516150"},{"problem":122,"code":"(fn [l]\n  (let [bin->i {\\0 0 \\1 1}]\n    (reduce\n     \t#(+ (* 2 %1) (bin->i %2))\n     \t0\n     \tl)))","user":"5626447fe4b00e49c7cb47bd"},{"code":"(fn [s]\n  (reduce #(+ %2 (bit-shift-left %1 1))\n\t        0\n          (map #(- (int %) (int \\0)) s)))","problem":122,"user":"4e39d763535deb9a81d77f46"},{"problem":122,"code":"(fn [s] \n   (int (let [coll (reverse (map #(Integer/parseInt(str %)) s))]\n    (loop [ pow 0\n      \t\tresult 0\n      \t\t[h & r] coll]\n      (if (= pow (count coll) )\n        result\n        (recur (inc pow) (+ result (* h (Math/pow 2 pow))) r ))))))","user":"53e241a6e4b036ad0777e3f0"},{"problem":122,"code":";stolen #(java.math.BigInteger. % 2)\n#(loop [deci 0\n         bin %]\n    (if (empty? bin)\n      deci\n      (if (= \\0 (first bin))\n        (recur (* 2 deci) (rest bin))\n        (recur (inc(* 2 deci)) (rest bin))\n        )\n      )\n    )","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":122,"code":"(fn bin [s] (->> (iterate #(* 2 %) 2) \n             (cons 1)\n             (take (count s))\n             (reverse)\n             (map * (map #(Integer. (str %)) s) )\n             (apply +)\n             ))","user":"546c1b2ce4b00cfc9eacc174"},{"code":"(fn [s] (let [d #(reverse (map {\\0 0, \\1 1} %) )\n                      p (map #(Math/pow 2 %) (range) )]\n                     (int (reduce + (map * (d s) p)))) )","problem":122,"user":"4ee7d177535d93acb0a6686f"},{"code":"#(reduce (fn [acc c]\n           (+ (bit-shift-left acc 1) (if (= \\1 c) 1 0)))\n         0 %)","problem":122,"user":"4f49e869e4b0d56e7bb92c02"},{"problem":122,"code":"(fn [bs]\n    (apply + (map-indexed #(int (if (= (str %2) \"1\")\n                                  (Math/pow 2 %1)\n                                  0))\n                          (reverse bs))))\n\n;; (fn [bs]\n;;     (->> bs\n;;          (map #(Integer. (str %)))\n;;          (reduce (fn [acc i]\n;;                    (+ (* acc 2) i)))))\n\n;; (fn [s]\n;;     (->> (reverse s)\n;;          (map-indexed #(if (= %2 \\0) 0 (bit-shift-left 1 %1)))\n;;          (reduce +)))\n\n;; #(Integer/parseInt % 2)\n\n;; #(read-string (str \"2r\" %))","user":"591ad160e4b09b4ee5954bdf"},{"code":"#(Integer/valueOf  % 2)","problem":122,"user":"50be9b4ae4b00fb48fed2ef6"},{"problem":122,"code":"(fn [s] (reduce + (map * (reverse (map #(- (int %) (int \\0)) s)) (iterate #(* 2 %) 1))))","user":"5796d3ebe4b039eba2ecb0ee"},{"code":"(fn [s]\n   (apply + (map (fn [n i] (if (= n \\1)\n                    (bit-shift-left 1 i)\n                    0\n                    )) (reverse (seq s)) (range)))\n   )","problem":122,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":122,"code":"(fn [binary]\n\t(reduce +(map-indexed\n\t\t(fn [exp bit]\n\t\t\t(if (zero? bit)\n\t\t\t\t0\n\t\t\t\t(reduce * (repeat exp 2))\n\t\t\t)\n\t\t)\n\t(map #(-(int %) 48) (reverse (vec binary)))))\n)","user":"5472d919e4b094393f72dd7b"},{"problem":122,"code":"(fn [l]\n   (loop [l (reverse l) i 1 s 0]\n     (cond\n       (empty? l) s\n       (= (first l) \\1) (recur (rest l) (* i 2) (+ s i))\n       :else (recur (rest l) (* i 2) s))))","user":"57d9f603e4b0bd073c20240a"},{"code":"(fn [x]\n  (reduce (fn [acc y] (+ (* 2 acc) y)) 0\n    (map (fn [c] (- (int c) 48)) x)))","problem":122,"user":"4f038499535dcb61093f6b09"},{"problem":122,"code":"(fn [x]\n  (loop [num (butlast (map #(Character/digit % 10) (str x)))\n         res (last (map #(Character/digit % 10) (str x)))\n         mult 2]\n    (if (empty? num)\n      res\n      (recur (butlast num)\n             (+ res (* mult (last num)))\n             (* 2 mult)))))","user":"5c748bf5e4b0fca0c16227cb"},{"code":"(fn conv [s]\n  (reduce (fn [c e] (+ (* c 2) e) ) 0 (map (fn [e] (- (int e) (int \\0) )) (seq s))))","problem":122,"user":"5101192ae4b0bef64c30e266"},{"problem":122,"code":"(fn [s]\n    (let [charseq (reverse (seq s))]\n      (loop [crs charseq result 0 factor 1]\n        (if (seq crs)\n          (recur (rest crs)\n                 (+ result (* factor (if (= (first crs) \\1) 1 0)))\n                 (* factor 2))\n          result))))","user":"56eaad95e4b04a395b9a040f"},{"problem":122,"code":"(fn read-binary [s]\n  (->> s\n       (map #(- (int %) 48))\n       (reverse)\n       (map-indexed #(* (Math/pow 2 %) %2))\n       (reduce +)\n       (int)))","user":"547e3846e4b0c51c1f4d7302"},{"code":"(fn [s] (apply\n         +\n         (map *\n              (map read-string (-> s (clojure.string/split #\"\") next reverse))\n              (iterate #(* % 2) 1))))","problem":122,"user":"531490bde4b08068f379ed17"},{"code":"(fn[b]\n  (reduce\n   #(+ \n     (- (int %2) 48)\n     (* 2 %))\n   0 b))","problem":122,"user":"52f818a6e4b047fd55836fcc"},{"code":"#(->> %\n  (map {\\0 0 \\1 1})\n  reverse\n  (map-indexed (fn [i b] (* b (Math/pow 2 i))))\n  (reduce +))","problem":122,"user":"4ee7ef87535d93acb0a66872"},{"problem":122,"code":"(fn f[s] (if (empty? s) 0 (+ (* 2 (f (butlast s))) (if (= (last s) \\1) 1 0))))","user":"59e8bb43e4b0249b72820735"},{"code":"(fn bton [s]\n  (loop [n 0\n         r s]\n    (if (empty? r) n\n      (let [fd (first r)\n            newr (rest r)\n            fdv (if (= fd \\0) 0 1)]\n        (recur (+ (* 2 n) fdv) newr)))))","problem":122,"user":"4f036fb3535dcb61093f6ac8"},{"code":"#(int (reduce + (map-indexed (fn [i d] (if (= \\1 d) (Math/pow 2 i) 0)) (reverse %))))","problem":122,"user":"4e589bdc535d8a8b8723a295"},{"problem":122,"code":"#(loop [s %\n          a 0\n          m 1]\n        (if (empty? s)\n            a\n            (recur (butlast s)\n                   (+ a (* m (- (int (last s)) 48)))\n                   (* m 2))))","user":"55e732c5e4b050e68259b492"},{"code":"(fn [s]\n    (reduce #(+ %2 (* 2 %)) 0\n            (map #(. Integer parseInt (str %)) s)))","problem":122,"user":"4eda8d7c535d10e5ff6f530f"},{"problem":122,"code":"(fn binary-string-to-decimal [s]\n  (reduce (fn [accum bigit]\n            (+ (* 2 accum) bigit)) 0\n          (map #(Character/digit % 10) s)))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":122,"code":"(fn loo [bs]\n\t(cond \n\t\t(= (count bs) 1) (Integer/parseInt (str (first bs)))\n\t\t;(= (str bs) \"0\") 0\n\t\t:else \n\t\t\t(+ \n\t\t\t\t(* \n\t\t\t\t\t(Integer/parseInt (str (first bs)))\n\t\t\t\t\t(apply * (take (- (count bs) 1) (repeat 2)))\n\t\t\t\t)\n\t\t\t\t(loo (rest bs)))\n\t\t\t)\n\t)","user":"51e8ee6be4b07cae92c04bfd"},{"code":"(fn [x] (reduce #(+ (* %1 2) (- (int %2) (int \\0))) 0 x))","problem":122,"user":"53733312e4b06d7f452d9e0a"},{"code":"(fn [s]\n  (reduce (fn [a b] (+ (* a 2) b)) 0 (map #(- (int %) 48) (vec s))))","problem":122,"user":"51899891e4b0288ada3dbdab"},{"problem":122,"code":"(fn [st] (reduce + (map-indexed #(* (reduce * (repeat %1 2)) (- (int %2) 48)) (reverse st))))","user":"587ee260e4b052da650a6353"},{"code":"#(loop [s % i 0]\r\n      (let [cnt (- (count s) 1)\r\n            re (-> s first str Integer/parseInt)]\r\n        (if (= cnt 0)\r\n          (+ i re)\r\n          (let [x (last (take cnt (iterate (partial * 2) 2)))]\r\n            (recur (apply str (rest s)) (+ i (* re x)))))))","problem":122,"user":"4e79a143535db169f9c796a2"},{"problem":122,"code":"(fn Read-a-binary-number\n  [n]\n  (loop [bin (read-string n)\n         i 0\n         dec 0]\n    (cond\n      (= bin 0) dec\n      :else (recur (quot bin 10) (inc i) (+ dec (* (mod bin 10) (int (Math/pow 2 i))))))))","user":"59e14ee3e4b08badc2a0c50c"},{"code":"(fn [x] (let [y (map #(- (int %) 48 ) (seq x))]\n          (loop [a 0 b (count y)]\n            (if (zero? b)\n              a\n              (recur\n                (+ a (* (nth (reverse y) (dec b)) (reduce * (repeat (dec b) 2) ))) (dec b))))))","problem":122,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":122,"code":"(fn [q] (int (reduce + (map (fn[s] (* (second s) (Math/pow 2 (first s)))) (map-indexed vector (map #(Integer/parseInt %) (map str (char-array (reverse q)))))))))","user":"52b7a904e4b0c58976d9ad51"},{"code":"#(reduce + (map bit-shift-left (map (fn [x] (if (= x \\1) 1 0)) (reverse %)) (range (count %))))","problem":122,"user":"4f067029535dcb61093f6c12"},{"code":"#(reduce (fn [a x] (+ (* a 2) (if (= x \\1) 1 0))) 0 %)","problem":122,"user":"4dd7d040535d2dad7130b5d6"},{"code":"(fn my-binary [s]\r\n  (loop [sp (reverse s) result 0 add 1]\r\n\t\t(if (empty? sp)\r\n\t\t\tresult\r\n\t\t\t(recur (next sp)\r\n\t\t\t\t(if (= (first sp) \\1)\r\n\t\t\t\t\t(+ result add)\r\n\t\t\t\t\tresult)\r\n\t\t\t\t(* add 2)))))","problem":122,"user":"4efb92ce535dced4c769f27a"},{"code":"(fn [s] (reduce + (map * (map #(read-string (str %)) s) (reverse (take (count s) (iterate (partial * 2) 1))))))","problem":122,"user":"523b4e91e4b07becd5be21ef"},{"code":"(fn decimalize [x] (loop [n (map #(rem (int %1) 0x30) (seq x)) result 0] (if (zero? (count n)) result (recur (rest n) (+ (* result 2) (first n)) ) ) ))","problem":122,"user":"52b60e94e4b0c58976d9ad3e"},{"problem":122,"code":";; Steps:\n;; * create exponent function for 2^x calculations. Using apply * repeat is one easy way.\n;; * create char->num function to convert \\1 and \\0 to 1 and 0\n;; * reverse the string so that it's ordered small->large\n;; * use map-indexed to assign place value (starting at 0) to each digit\n;;   [Note: map-indexed is essentially (map f (iterate inc 1) l)]\n;; * convert each digit to a numerical value by doing doing 2^place * digit\n;; * sum the values with either (apply + l) or (reduce + l)\n\n(fn [b]\n  (letfn \n   [(to-num [c] (if (= \\1 c) 1 0))\n    (expt [n x] (reduce * (repeat x n)))]\n   (->> b\n        reverse\n        (map-indexed #(* (expt 2 %1) (to-num %2)))\n        (reduce +))))","user":"5552780ce4b0deb715856df4"},{"problem":122,"code":"(fn [xs] (reduce #(+ (* %1 2) (- (int %2) 48)) 0 xs))","user":"595fd721e4b066ee0a44b06e"},{"code":"#(.intValue (Integer/parseInt % 2))","problem":122,"user":"510b704ee4b078ea71921100"},{"code":"(fn [j] (reduce + (map (fn [i] (Math/pow 2 (first i))) (filter (fn [i] (= \"1\" (last i))) (map-indexed #(list % %2) (reverse (re-seq (re-pattern \".\") j)))))))","problem":122,"user":"4f0e4ebd535d0136e6c22322"},{"code":"(fn [input]\n  (let [xs (map #(- (int %) 48) (reverse input))\n        ys (map-indexed (fn [index x]\n                          (if (= 0 index x)\n                            0\n                            (int (Math/pow (* 2 x) index)))) xs)]\n    (reduce + ys)))","problem":122,"user":"52eb400ee4b0705949c4443b"},{"code":"(fn [binary]\n  (let [lil-endian (map #(-> % str Integer/parseInt) (reverse (seq binary)))\n        value-map (partition 2 (interleave lil-endian (for [x (range)] (Math/pow 2 x))))\n        myfn (fn [result x]\n               (println x)\n               (condp = (first x)\n                 0 result\n                 1 (+ result (second x))))]\n    (println value-map)\n    (int (reduce myfn 0 value-map))))","problem":122,"user":"51f82769e4b09be9c177e527"},{"problem":122,"code":"(fn bn [s]\n    (reduce + (map #(apply * %) (map list (reverse (map read-string (re-seq #\"\\d\" s))) (iterate #(* % 2) 1)))))","user":"5bc28638e4b07a9b28b10033"},{"problem":122,"code":"(fn binary->number\n  [binary-str]\n  (->> (zipmap (range (count binary-str)) (reverse binary-str))\n       (map (fn [[k v]]\n              (if (= \\1 v)\n                (apply * (repeat k 2))\n                0)))\n       (apply +)))","user":"547bf82de4b0c51c1f4d72e1"},{"code":"(fn binary-decoder [bs]\n\t (first (reduce (fn [[acc cur] sym] [(+ acc (* (read-string (str sym)) cur)) (* cur 2)]) [0 1] (reverse bs))))","problem":122,"user":"52319066e4b0e2e8de81d1e9"},{"problem":122,"code":"(fn [s] \n  (reduce #(case %2 \\0  (* %1 2),\\1 (-> %1 (* 2) (+ 1))) 0 s ))","user":"53213810e4b09d4e7a9b54b0"},{"code":"(fn [x] (reduce + (map-indexed\n                   (fn [i e] (*\n                              (-> e str Integer/parseInt)\n                              (reduce * (repeat i 2))))\n                     (reverse x))))","problem":122,"user":"51307b84e4b08c712d3fae39"},{"problem":122,"code":"(fn [n] (apply + (map * (reverse (map read-string (map str n))) (take (count n) (iterate #(* 2 %) 1)))))","user":"5eff339ae4b0cf489e8d7f0c"},{"problem":122,"code":"(fn read-binary\n  [s] {:pre [(re-matches #\"[01]+\" s)]}\n  (read-string (str \"2r\" s)))","user":"4fc6305de4b0ee37620e180b"},{"code":"(fn [bin]\r\n  (long (reduce +\r\n          (for [p (range (count bin))\r\n                :let [m2 (java.lang.Math/pow 2 p)]]\r\n            (if (= \\1 (nth (reverse bin) p)) m2 0)))))","problem":122,"user":"50045388e4b0678c553fc44e"},{"code":"(fn[s] (apply + (map * (map #(- (int %) 48) (reverse (seq s))) (take (count s) (iterate #(* % 2) 1)))))","problem":122,"user":"4f148418535d64f60314643a"},{"problem":122,"code":"(fn [n]\n   (->> n\n        (map #(if (= % \\0) 0 1))\n        reverse\n        (map * (iterate (partial * 2) 1))\n        (apply +)))","user":"511688d5e4b0b3e208dba05a"},{"problem":122,"code":"(fn sbin->int [sbin]\n  (loop [bin (drop-last sbin)\n         curval 2\n         res (if (= (last sbin) \\1) 1 0)]\n    (cond (empty? bin) res\n          (= (last bin) \\1) (recur (drop-last bin) (* curval 2) (+ res curval))\n          :else (recur (drop-last bin) (* curval 2) res))))","user":"58ffaddee4b0438e51c2cffe"},{"problem":122,"code":"(fn [binStr]\n  (let [bin (Long. binStr)]\n   (int (reduce +\n                (second\n                 (last (take-while (fn [[bin lst pow]] (>= (count binStr) pow))\n                                   (iterate\n                                    (fn [[bin lst pow]]\n                                     [(quot bin 10) (conj lst (* (rem bin 10) (Math/pow 2 pow))) (inc pow)])\n                                    [bin () 0]))))))\n\n   ))","user":"5a99b83fe4b0d174b936c7aa"},{"code":"#(loop [n (reverse %) e 0 t 0]\n   (if (empty? n)\n     t\n     (recur (rest n) (inc e) (+ t (if (= (first n) \\1) (int (Math/pow 2 e)) 0)))))","problem":122,"user":"5191ac45e4b0d428d29dc1b6"},{"code":"(fn[s](->> s reverse \r\n  (map #(- (int %) 48)) \r\n  (map * (iterate #(* 2 %) 1))\r\n  (reduce +)))","problem":122,"user":"4daddc19c9a9d6ed4599dc57"},{"code":"(fn [binary] (apply + (loop [b binary\n                    \t\t nums '()\n                    \t\t cnt 0]\n                        (if (empty? b)\n                          (if (empty? nums) '(0) nums)\n                          (recur (drop-last b) \n                                 (if (= (str (last b)) \"1\" )\n                                   (conj nums (apply * (repeat cnt 2)))\n                                   nums) \n                                 (inc cnt))))))","problem":122,"user":"50214ffae4b0ef1d2d4433bc"},{"problem":122,"code":"(fn read-binary-number [num]\n  (reduce (fn [result curr]\n        (if (= curr \\0) (* 2 result)\n            (inc (* 2 result))))\n      0\n      num))","user":"536e5055e4b0fc7073fd6e6b"},{"code":"(fn [s1 ]\n    (apply + ( map-indexed  #(* ( int  (Math/pow 2 %1) ) (- (int %2) (int \\0)) ) \n                             ( reverse s1)))\n)","problem":122,"user":"4f030775535dcb61093f6a43"},{"code":"#(reduce (fn [s a] (+ (* 2 s) (Integer/parseInt (str a)) )) 0 %)","problem":122,"user":"50e8ff6be4b0ebbe794eb7f3"},{"code":"(fn [string]\n  (let [c (fn [acc x]\n    (+ (Integer/parseInt (str x)) (* 2 acc)))]\n  (reduce c 0 string)))","problem":122,"user":"4e691c79535d8ccf87e9fe97"},{"code":"(fn [s] (reduce + (map * (reverse (map (comp read-string str) s)) (iterate (partial * 2) 1))))","problem":122,"user":"52140b53e4b0961f15ac4d7e"},{"code":"(fn [s]\r\n  (let [lst (loop [s s\r\n                   r '()]\r\n              (if (empty? s)\r\n                r\r\n                (recur (rest s) (conj r (first s)))))]\r\n    (loop [lst lst\r\n           d 1\r\n           r 0]\r\n      (if (empty? lst)\r\n        r\r\n        (recur (rest lst)\r\n               (* d 2)\r\n               (if (= (first lst) \\1)\r\n                 (+ r d)\r\n                 r))))))","problem":122,"user":"4de2f44f535d08e6dec9fdec"},{"problem":122,"code":"(fn [s]\n  (loop [t 0 tmps (reverse s) c 0]\n    (if (empty? tmps)\n      (int t)\n      (if (= \\1 (first tmps))\n        (recur (+ t (Math/pow 2 c)) (rest tmps) (inc c))\n        (recur t (rest tmps) (inc c))))))","user":"59368ccae4b02506e01a297a"},{"code":"(fn s2n [s]\n  (let [nums (re-seq #\"\\d\" s)\n        num-seq (map #(Integer/parseInt %) nums)]\n    (reduce (fn ([] 0)\n            ([a] a)\n            ([a b] (+ (* a 2) b)))\n        num-seq)))","problem":122,"user":"5374adc3e4b06d7f452d9e27"},{"code":"(fn to-bin [s]\n  (if (seq s)\n    (+ (Integer/parseInt (str (last s))) (* 2 (to-bin (butlast s))))\n    0))","problem":122,"user":"4dab218f30acd6ed15482a68"},{"problem":122,"code":"(fn [x] (apply + (map * (reverse (map #(- (int %) 48) x)) (iterate #(* 2 %) 1))))","user":"5c41db45e4b08cd430848ece"},{"code":"(fn [b]\n  (reduce + (map-indexed (fn [i bb]\n                           (let [bbb (read-string (str bb))]\n                             (apply * bbb (repeat i 2)))) (reverse b))))","problem":122,"user":"50b1d166e4b03ea880433554"},{"problem":122,"code":"(fn [s] \n  (reduce + (map #(apply * %1 (repeat %2 2)) \n                 (map {\\0 0 \\1 1} (reverse s)) \n                 (range))))","user":"57c94c54e4b05aa3c4741d2c"},{"code":"(fn [arg]\n    (Integer/parseInt arg 2))","problem":122,"user":"51f5539fe4b0abb92f97f9cd"},{"problem":122,"code":";; http://www.4clojure.com/problem/122\n(fn read-binary\n  [bin-str]\n  (apply + \n         (map #(* %1 (Character/getNumericValue %2)) \n              (iterate #(* 2 %) 1) (reverse bin-str))))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn [b]\n  (int (apply + (filter #(not= \\0 %) (map #(if (= \\1 %) (Math/pow 2 %2) %) (reverse b) (range))))))","problem":122,"user":"50843a4ae4b0c98812d0788b"},{"problem":122,"code":"#(loop [r 0 b %]\n    (if (empty? b)\n      r\n      (if  (= (first b) \\0)\n        (recur r (rest b))\n        (recur (+ (apply * (repeat (dec (count b)) 2)) r) (rest b)))))","user":"555883c5e4b0deb715856e2d"},{"problem":122,"code":"#(loop [x (seq %) n (count (seq %)) r 0]\n    (if (= n 0)\n      (int r)\n      (recur (rest x) (dec n) (+ r (if (= \\1 (first x)) (Math/pow 2 (- n 1)) 0)))))","user":"5f3567d6e4b0574c87022c44"},{"problem":122,"code":";#(first\n;  (reduce \n;    (fn [[t p] b] [(+ t (if (= b \\1) p 0)) (* 2 p)])\n;       [0 1] (reverse %)))\n\nreduce #(+ (* 2 %) (read-string (str %2))) 0","user":"56bca51ae4b0f26550335963"},{"problem":122,"code":"(fn [s] \n  (let [x (reverse (map read-string (re-seq #\"[0-9]\" s))) bin (fn [x] (reduce * 1 (repeat x 2)))]\n    (apply + (map-indexed (fn [idx itm] (* itm (bin idx))) x))))","user":"5df08767e4b093ff717275bf"},{"problem":122,"code":"(fn\n  [string]\n  (loop [place 1\n         nums (reverse (seq string))\n         v 0]\n    (if (empty? nums)\n      v\n      (recur\n        (* 2 place)\n        (rest nums)\n        (+ v (* place (Integer. (str (first nums)))))))))","user":"5c24671be4b07e362c2305a1"},{"problem":122,"code":"(fn\n  [lst]\n  (loop [x (map (fn [^Character lst] (Character/digit lst 10)) lst)\n         c (- (count x) 1)\n         r ()]\n       (cond\n         (empty? x) (reduce + r)\n         (= (first x) 1) (recur (rest x) (dec c) (cons (reduce * (repeat c 2)) r))\n         (= (first x) 0) (recur (rest x) (dec c) r))))","user":"57fedf07e4b0d3187e9009dc"},{"problem":122,"code":"(fn [bn] (let [a (map #(Integer/parseInt (.toString %)) bn),\n                c (count a),\n                p (reverse (range c))]\n           (#(int (reduce + (map (fn [x y] (* x (Math/pow 2 y))) %1 %2))) a p)))","user":"5ae246b1e4b0837691e92c5d"},{"problem":122,"code":"(fn [b & [n m]]\n         (println b n m)\n         (if (or (empty? b) (nil? b))\n           n\n           (recur (butlast b)\n                  [(+ (or n 0) (* (Integer. (str (last b))) (or m 1)))\n                   (* (or m 1) 2)])))","user":"5540fe42e4b0a04f7929950a"},{"problem":122,"code":"#(->> %\n    seq\n    reverse\n    (map str)\n    (map read-string)\n    (reduce (fn [[i r] n] (vector (* i 2) (+ r (* n i)))) [1 0])\n    second)","user":"5fd92743e4b05ac5b16ea11f"},{"problem":122,"code":"(fn [s]\n  (let [digits (map #(- (int %) 48) (reverse (seq s)))\n        exp2s (map #(Math/pow 2 %) (range))\n        values (zipmap exp2s digits)]\n    (int (reduce + (map #(* (key %) (val %)) values)))))","user":"5fea32f3e4b05ac5b16ea1aa"},{"problem":122,"code":"(fn bar [x]\n  (->> (for [[i b] (->> x reverse (map-indexed vector))]\n         (case b\n           \\0 0\n           \\1 (Math/pow 2 i)))\n       (apply +)\n       int))","user":"55f2e47de4b06e875b46ce4d"},{"code":"(fn [bin] (reduce (fn [acc [k v]] (+ acc (* v (int (Math/pow 2 k))))) 0  (map-indexed vector (reverse (map #(Integer/parseInt (str %)) bin)))))","problem":122,"user":"52265e41e4b04e78ff2e1981"},{"problem":122,"code":"(fn binary [str] (let [bits (map read-string (re-seq #\"\\d\" str))] \n                   (loop [b bits, sum 0] (if (empty? b) \n                                           sum \n                                           (recur (rest b) \n                                                  (+ sum (* (first b) (reduce * (repeat (dec (count b)) 2)))))))))","user":"55c10409e4b01b9910ae2a2c"},{"problem":122,"code":"(fn read-binary\n  [s]\n  (->> s\n       (map {\\0 0 \\1 1})\n       (reduce (fn[so-far digit](+' (*' so-far 2) digit)) 0)))","user":"5bab5440e4b0a20761a23475"},{"problem":122,"code":"(fn [bs]\n  (->> bs\n       (str)\n       (map #(- (int %) (int \\0)))\n       (reduce #(+ %2 (* 2 %1)) 0)))","user":"5a566e8fe4b05d388ecb6c51"},{"code":"(fn [v] (reduce #(+ (* 2 %) %2) (map #(if (= % \\1) 1 0) (seq v))))","problem":122,"user":"4f43894ee4b0d7d3c9f3fd21"},{"problem":122,"code":"(fn [s]\n  (int (reduce + (map-indexed (fn [i x] (if (= x \\1) (Math/pow 2 i) 0)) (reverse s)))))","user":"55fee5e4e4b00f4cabc5765a"},{"code":"(fn [binary_num]\n  (apply + (map #(* (Character/digit %1 10) (int (Math/pow 2 %2))) (reverse binary_num) (range))))","problem":122,"user":"50cf94bde4b0abc485cb9bb2"},{"code":"(fn [coll] (reduce (fn [x y] (+ x (get y \\1 0)))  0 (map (fn [x y] {x y}) (reverse coll) (iterate #(* % 2) 1N))))","problem":122,"user":"5131d817e4b06942423563ca"},{"code":"(fn tobin [x]\n  ((fn tobing [x acc pow]\n    (if (= (count x) 0)\n      acc\n      (let [vala (- (int (first x)) 48)]\n        (tobing (rest x)\n                (+ (* pow vala) acc)\n                (* 2 pow))))) (reverse x) 0 1))","problem":122,"user":"52173464e4b082aa80a88c75"},{"problem":122,"code":"#(reduce (fn [target e] (+ (* 2 target) (if (= \\1 e) 1 0))) 0 %)","user":"56b3146ae4b0982f16b37e0f"},{"problem":122,"code":"(fn [s] (reduce #(+ (* % 2) ({\\0 0, \\1 1} %2)) 0 (seq s)))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":122,"code":"#(loop [s (reverse %) e 0 n 0]\n   (if (empty? s)\n     n\n     (recur (rest s) (inc e) (if (= \\0 (first s)) n (+ n (apply * (repeat e 2)))))))","user":"55a74d46e4b09e57187da2a3"},{"problem":122,"code":"(fn bin [s]\n  (if (empty? s)\n    0\n    (+ (* (java.lang.Integer/parseInt (str (first s))) \n          (reduce * (repeat (- (count s) 1) 2))) \n       (bin (rest s))\n  )))","user":"4fecebe1e4b0681fd128dcac"},{"code":"(fn bin [numstr] \n  (loop [i (count numstr)\n         r 0\n         xs (reverse numstr)]\n    (if \n      (= xs [])\n      r\n      (recur i (+ r (if (= \\1 (first xs)) (#(reduce * (repeat % 2)) (- i (count xs))) 0)) (rest xs)))))","problem":122,"user":"51c9c6cde4b09ce160bef5b1"},{"problem":122,"code":"(fn [s]\n  (loop [i 0 v (reverse s) r 0]\n    (if (empty? v)\n      (int r)\n      (recur (inc i) \n             (rest v) \n             (if (= (first v) \\1) (+ r (Math/pow 2 i)) r)\n             ))))","user":"5683d2a9e4b0945ebc182aa0"},{"code":"(fn [x]\n  (apply +\n         (map * \n              (reverse (map read-string (map str x)))\n              (map #(apply * (repeat % 2)) (range)))))","problem":122,"user":"52ce8648e4b07d0d72b27390"},{"problem":122,"code":"(fn read [x]\n    (if (empty? x)\n      0\n      (+\n       (#(- (int %) (int \\0)) (last x))\n       (* 2 (read (butlast x)))\n       )\n      )\n    )","user":"5eb4927fe4b00a66d4a95221"},{"problem":122,"code":"(fn [s] \n  (reduce\n   +\n   (map-indexed\n    #(bit-shift-left (- (int %2) 48) %1)\n    (reverse s))))","user":"4f29d9abe4b0d6649770a034"},{"problem":122,"code":"(fn [s]\n  (loop [nums (reverse (map #(if (= \\0 %) 0 1) (seq s)))\n         pow 1\n         acc 0]\n    (if (empty? nums)\n      acc\n      (recur (rest nums) (* 2 pow) (+ acc (* pow (first nums)))))))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":122,"code":"(fn read-bin-str [s]\n  (->> (reverse s)\n       (map-indexed #(if (= %2 \\1) (if (> %1 0) (reduce * (repeat %1 2)) 1) 0))\n       (reduce +)))","user":"503f923fe4b00d1a725ff2ad"},{"code":"#((reduce (fn [[sum pow] val] [(if (= \\1 val) (+ sum pow) sum) (* 2 pow)]) [0 1] (reverse %)) 0)","problem":122,"user":"52c1f404e4b07a9af5792370"},{"code":"(fn [s] (reduce + (map-indexed #(if (= %2 \\0) 0 (bit-shift-left 1 %1)) (reverse s))))","problem":122,"user":"4f1b92d1535d64f60314647b"},{"problem":122,"code":"(fn [s]\n  (->> (reverse s)\n       (map-indexed (fn [pow bit-char]\n                      (if (= \\1 bit-char)\n                        (apply * (repeat pow 2))\n                        0)))\n       (apply +)))","user":"55d28b38e4b0e31453f64a58"},{"code":"#(loop [x (reverse %) y 0 z 1] \n (if (empty? x) \n  y \n (recur \n  (rest x)\n  (if (= (first x) \\1) (+ y z) y)\n  (* z 2)\n  )\n )\n)","problem":122,"user":"5007c7c7e4b0b17c647f5226"},{"code":"(fn [s] (reduce #(+ (* 2 %1) (if (= %2 \\1) 1 0)) 0 s))","problem":122,"user":"532347dde4b09d4e7a9b54cc"},{"code":"(fn[n]\n  (first \n   (reduce \n    #(if (= %2 \\1) [(+ (first %1)  (second %1)) (* 2 (second %1))] [(first %1) (* 2 (second %1))])  [0 1] (reverse n) )))","problem":122,"user":"5062bc46e4b05ac47bc68d68"},{"code":"reduce #(+ (* 2 %) ({\\0 0} %2 1)) 0","problem":122,"user":"4de77a0a535d08e6dec9fdfa"},{"problem":122,"code":"(fn\n  [sbin]\n  (let [tumul (fn tumul_temp\n                ([] (tumul_temp 1))\n                ([n] (lazy-seq (cons n (tumul_temp (* n 2))))))]\n    (reduce (fn [acc k]\n              (+ acc (* (first k) (last k))))\n            0\n            (map (fn [x y](vector x y)) (map (fn [x] (Character/digit x 10)) (reverse sbin)) (take (count sbin) (tumul))))))","user":"5e1c24f4e4b0dc959400852d"},{"code":"(fn [xs]\n  (let [digits (reverse (map #(Integer/valueOf (str %)) xs))\n        powers (iterate #(* 2 %) 1)]\n    (apply + (map * digits powers))))","problem":122,"user":"521679e9e4b0bf4bffd29cca"},{"code":"(fn [s] (Long/parseLong s 2))","problem":122,"user":"536f2faee4b0fc7073fd6e79"},{"problem":122,"code":"(fn [s] (reduce (fn [a e] (+ (* 2 a) e)) (map {\\1 1 \\0 0} (char-array s))))","user":"554a270fe4b0a04f79299570"},{"problem":122,"code":"#(reduce (fn [res x]\n           (+ (* 2 res) x))\n         (map (fn [x]\n                (- (int x) (int \\0)))\n              (seq %)))","user":"585e2e77e4b0f14aab7c87ac"},{"code":"#(read-string (str 2 \\r %))","problem":122,"user":"4dc537fd535d8a4b2fd74282"},{"code":"#(reduce (fn [x y] (+ (* 2 x) (if (= y \\1) 1 0))) 0 %)","problem":122,"user":"522454f4e4b01819a2de42d3"},{"problem":122,"code":"(fn[s]\n  (loop [exp (count (rest s))\n         lst s\n         total 0]\n    (if (= 0 exp)\n      (if (= \"0\" (str (first lst))) \n       \ttotal\n        (inc total)\n      )\n      (if (= \"0\" (str (first lst)))\n        (recur (dec exp) (rest lst) total)\n        (recur (dec exp) (rest lst) (+ total (reduce * (take exp (repeat 2)))))\n      )\n    )\n  )\n)","user":"571172ece4b09c608db70446"},{"code":"(fn [s] (reduce + (map-indexed (fn [i c] (if (= c \\1) (bit-shift-left 1 i) 0)) (reverse s))))","problem":122,"user":"52bc6f5ee4b07a9af57922f6"},{"code":"(fn [s] \r\n    (let [n (map (comp read-string str) (reverse s))] \r\n      (reduce \r\n        (fn [sm [x p]] (+ sm (* x p))) \r\n        0 \r\n        (partition 2 (interleave n (iterate (partial * 2) 1)))))\r\n  )","problem":122,"user":"4f0da4e4535d0136e6c22319"},{"problem":122,"code":"#(loop [xs (reverse %) i 1 acc 0]\n  (if (empty? xs) \n    acc\n    (if (= (first xs) \\0)\n      (recur (rest xs) (* 2 i) acc)\n      (recur (rest xs) (* 2 i) (+ acc i)))))","user":"552b6ddbe4b0ffed3738f965"},{"code":"(fn [s]\n  (reduce #(+ (int %2)\n              -48\n              (* 2 %1))\n          0 s))","problem":122,"user":"535d910ae4b04ce2eb3ed2c5"},{"code":"(fn [b]\n   (->>\n    (map #(- (int %) (int \\0)) (reverse b))\n    (map #(* % %2) (map #(reduce * (repeat % 2)) (range (count b))))\n    (reduce +)\n   ))","problem":122,"user":"529d4f4be4b04e0c58e87b79"},{"code":"#(reduce + (map * (reverse (replace {\\0 0, \\1 1} %)) (iterate (partial * 2) 1)))","problem":122,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":122,"code":"(fn [b]\n  (reduce (fn [a b] (+ (* 2 a)\n                       (- (int b) (int \\0))))\n          0\n          b))","user":"574c3a7ce4b02ea114799219"},{"problem":122,"code":"(fn [s]\n  (let [ds (mapv str (reverse (seq s)))]\n    (reduce-kv (fn [i k v] (+ i (int (* (Integer/parseInt v) (Math/pow 2 k))))) 0 ds)))","user":"4daee8e9edd6309eace4d166"},{"problem":122,"code":"(fn [s]\n  (reduce +  \n        \n        (map *\n             (map {\\0 0 \\1 1} (reverse s))\n             (iterate (partial * 2) 1)\n  )))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn[x] (reduce #(+ (* 2 %) %2) (map #(Integer. (str %)) (seq x))))","problem":122,"user":"5093ca51e4b097f48cc38585"},{"problem":122,"code":"#(apply + (map-indexed (fn [index item]\n                       \t   (* (Integer/parseInt (str item)) (int (Math/pow 2 index))))\n                        (reverse %)))","user":"54a96a15e4b09f271ff37cad"},{"code":"(fn b [x]\r\n  (if (empty? x)\r\n    0\r\n    (if (= (first x) \\0)\r\n      (b (rest x))\r\n      (+ (int (Math/pow 2 (- (count x) 1))) (b (rest x))))))","problem":122,"user":"5012aefce4b0c8732600222a"},{"code":"#(reduce + \n    (map (fn [[i v]] \n            (if (> v 0) \n                (Math/pow 2 i) \n                0)) \n      (map-indexed \n        (fn [i v] [i (- (int v) 48)]) \n          (reverse %))))","problem":122,"user":"4f0333f6535dcb61093f6a77"},{"problem":122,"code":"(fn foo [s]\n    (loop [s (reverse s)\n           b 1\n           acc 0]\n        (if (empty? s)\n            acc\n            (let [x (first s)\n                  xs (rest s)\n                  d (if (= \\0 x) 0 1)]\n                (recur xs (* b 2) (+ acc (* b d)))))))","user":"600ae927e4b074f607df6689"},{"problem":122,"code":"(fn [bstr] (loop [acc 0 rst bstr]\n             (let [h (first rst)]\n               (if (nil? h)\n                 acc\n                 (recur (+ (* acc 2) (- (int h) (int \\0))) (rest rst))))))","user":"58225587e4b04b46fc4b0f94"},{"code":"#(java.lang.Integer/parseInt %1 2)","problem":122,"user":"4f85a75ce4b033992c121c48"},{"code":"(fn [bin] (reduce + (map #(if (= %1 \\1) %2 0) (reverse bin) (iterate #(* % 2) 1))))","problem":122,"user":"4fd9d162e4b05e33b9224f3c"},{"problem":122,"code":"(fn [s]\n  (reduce #(-> %2\n               str\n               Integer.\n               (+ (* 2 %1)))\n          0\n          s))","user":"565f8fd2e4b068f2fe63dc41"},{"problem":122,"code":"(fn [d] (apply + (map-indexed\n                   #(if (= \\1 %2) (int (Math/pow 2 %)) 0)\n                   (reverse d))))","user":"54eee3a3e4b024c67c0cf879"},{"code":"(fn [s]\n  (reduce + (map (fn [[exp n]] (* n (Math/pow 2 exp)))\n    (map vector (range) (map #(Integer/parseInt %) (map str (reverse s)))))))","problem":122,"user":"4dd9d299535d2dad7130b5dd"},{"code":"(fn [coll] (int (reduce + (map-indexed #(* %2 (Math/pow 2 %1)) (reverse (map #(- % 48) (map int (seq coll))))))))","problem":122,"user":"5003bb77e4b0678c553fc442"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [v i] (+ (* 2 v) i))\n          0\n          (map (fn [d] (if (= \\0 d) 0 1)) (seq s))))","user":"57f80350e4b0d3187e90090c"},{"problem":122,"code":"(fn [acc [x & xs :as X]]\n  (if (empty? X)\n    acc\n    (recur (+ (* acc 2) (- (int x) (int \\0))) xs))) 0","user":"59a72effe4b066c664927d94"},{"problem":122,"code":"(fn [bs]\n  (loop\n    [s (reverse (seq bs)), acc 0, m 1]\n    (if (empty? s)\n      acc\n      (let\n        [h (first s), r (rest s)]\n        (if (= h \\1)\n          (recur r (+ acc m) (* m 2))\n          (recur r acc (* m 2)))))))","user":"53629381e4b0243289761e54"},{"code":"(fn [s]\n\t(reduce #(+ %2 (* 2 %1)) 0 (map (comp #(Integer/parseInt %) str) s)))","problem":122,"user":"51efd397e4b0249c592fbdeb"},{"problem":122,"code":"(fn [s] (reduce (fn [bn d] (+ (* 2 bn) (if (= \\1 d) 1 0))) (if (= (first s) \\1) 1 0) (rest s)))","user":"5cab33e7e4b048ec896c5c48"},{"problem":122,"code":"(fn binary\n  [s]\n  (loop [s s val 0 iterator 0]\n    (if (empty? s)\n      val\n      (if (= 49 (int (last s)))\n        (recur (butlast s) (+ val (int (Math/pow 2 iterator))) (inc iterator))\n        (recur (butlast s) val (inc iterator))))))","user":"5772ddb0e4b0979f896515d4"},{"code":"(fn [s] (int(reduce + ((fn [x](map #(* %1 (Math/pow 2 %2)) x (range (-(count s ) 1 ) -1 -1)) )(map #(- (int %) (int \\0)) (seq s))))))","problem":122,"user":"520cb8c4e4b0b022ef140c9a"},{"problem":122,"code":"(fn [str]\n  (let [l (count str)\n        m (reverse (take l (iterate #(* 2 %) 1)))\n        v (->> str\n               seq\n               (map #(Character/getNumericValue %)))]\n    (apply + (map * v m))))","user":"55c4cda5e4b0e31453f649a5"},{"problem":122,"code":"(fn [binary] (->> binary (str \"2r\") read-string))","user":"53bc10f5e4b047364c04450d"},{"problem":122,"code":"(fn [binary] (reduce + (map #(* (read-string (str %1)) %2) (reverse binary) (iterate #(* 2 %) 1 ))))","user":"563a30d7e4b0bfe05bf117f9"},{"code":"(fn [s]\n  (reduce\n    #(+ (* 2 %1)\n        (if (= \\0 %2) 0 1))\n    (cons 0 s)))","problem":122,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":122,"code":"(fn [binary-string]\n  (loop [[r & more :as all] (reverse (seq binary-string))\n         cnt 0\n         acc 0]\n    (if all\n      (if (= cnt 0)\n        (recur more (inc cnt) (+ acc (* (Character/digit r 10) 1)))\n        (recur more (inc cnt) (+ acc (* (Character/digit r 10) (reduce * (repeat cnt 2))))))  \n      acc)))","user":"5c718e6ce4b0fca0c1622796"},{"problem":122,"code":"#(loop [cs %\n        acc 0]\n   (if (empty? cs)\n     acc\n     (recur (rest cs) (+ (* acc 2) (if (= (first cs) \\1)\n                                     1\n                                     0)))))","user":"55e2f502e4b050e68259b43c"},{"problem":122,"code":"#(loop [i 1 res (* 1 (Integer/parseInt (str (last %)))) b (butlast %)]\n   (if (empty? b)\n     res\n     (recur (inc i) (+ res (if (= 1 (Integer/parseInt (str (last b))))\n                     (reduce * (repeat i 2))\n                     0)) (butlast b))))","user":"5964c614e4b069c0a1a19770"},{"code":"(fn [a]\n  (reduce #(+ %1 %2)\n   (map #(* %1 (- (int %2) 48))\n\t(take (count a) (iterate #(* 2 %) 1))   \n    (reverse a)\n   )\n  )\n)","problem":122,"user":"518aec06e4b06da86c1973c2"},{"code":"(fn [s]\n  (let [xs (map vector (reverse s) (range))]\n    (int (reduce (fn [acc [v i]]\n              (if (= v \\1)\n                (+ acc (Math/pow 2 i))\n                acc)) 0 xs))))","problem":122,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":122,"code":"(fn [s]\n   (reduce + (map\n               *\n               (iterate #(* 2 %) 1)\n               (map #(- (int %) 48) (reverse (seq (char-array s)))))))","user":"5b0e6795e4b0cc2b61a3be03"},{"problem":122,"code":"(fn [str]\n   (reduce + (filter (complement nil?) (apply map-indexed\n                                       (fn [idx itm] (when (= \"1\" itm) (reduce * (repeat idx 2))))\n                                       (vector (reverse (clojure.string/split str #\"\")))\n                                       )\n              )))","user":"5b7ed20fe4b047b03b203760"},{"code":"(fn  [s]\n  (loop [rm (reverse (seq s)), acc 0, t 1]\n    (cond (empty? rm) acc\n          (= \\1 (first rm)) (recur (rest rm) (+ acc t) (* t 2))\n          :else (recur (rest rm) acc (* t 2)))))","problem":122,"user":"538e36c7e4b0b51d73faae81"},{"problem":122,"code":";; lol...\n(fn my-binary\n  [ns]\n  (Integer/parseInt ns, 2))","user":"5f4eb036e4b0102c75033969"},{"problem":122,"code":"(fn [sn]\n  (reduce\n   + (map\n      #(reduce * %)\n      (partition 2 (interleave \n                    (map #(-> % str read-string) (reverse sn))\n                    (take (count sn)\n                          ((fn inner [n]\n                             (lazy-seq (cons n (inner (* 2 n))))) 1)))))))","user":"54a80855e4b09f271ff37c9e"},{"problem":122,"code":"(fn bin->int [s]\n  (loop [[head & tail] (seq s) acc 0]\n    (if (not head)\n      acc\n      (let [next (* 2 acc)]\n        (recur tail (if (= \\1 head) (inc next) next))))))","user":"53a511aae4b0b62ce3005735"},{"problem":122,"code":"(fn bin2dec [bin]\n  (loop [acc 0.0\n         exp 0\n         sbin bin]\n    (if (= sbin ())\n      (int acc)\n      (if (= (last sbin) \\1)\n      \t(recur (+ acc (Math/pow 2 exp)) (inc exp) (drop-last sbin))\n\t\t(recur acc (inc exp) (drop-last sbin))       \n       )\n     )\n   )\n )","user":"57cf03c0e4b00451144b04f9"},{"problem":122,"code":"(fn [bin-string]\n  (let [exp         (fn [x n] (reduce * (repeat n x)))\n        reverse-bin (clojure.string/reverse bin-string)]\n    (loop [acc 0 i 0 num reverse-bin]\n      (if (empty? num)\n        acc\n        (recur (+ acc (* (exp 2 i) (Integer/parseInt (subs num 0 1))))\n               (inc i)\n               (subs num 1))))))","user":"56c44c34e4b05cc29241ee96"},{"code":"(fn readbin\n  [s]\n  (letfn [(f [t c [x & rest]]\n            (if x\n              (if (= x \\1)\n                (recur (+ t c) (* c 2) rest)\n                (recur t (* c 2) rest))\n              t))]\n          \n    (f 0 1 (reverse s))))","problem":122,"user":"4fe89297e4b07c9f6fd12c4c"},{"code":"(comp read-string #(str \"2r\" %))","problem":122,"user":"524c7fcfe4b0752c4cb68cbd"},{"code":"(fn [string]\n  (letfn [(myexpt [base pow] (reduce * 1 (repeat pow base)))]\n    (reduce + 0 \n            (map-indexed\n              (fn [idx ch] (* (Integer. (str ch)) (myexpt 2 idx)))\n                (reverse string)))))","problem":122,"user":"512eb723e4b0b740abc5982b"},{"problem":122,"code":"#(loop [xs (map read-string (re-seq #\"[0-1]\" %))\n         result 0]\n    (if (empty? xs)\n      result\n      (recur (rest xs) (+ result (* (first xs) (int (Math/pow 2 (dec (count xs)))))))))","user":"5a67cedbe4b0512ff01cd9ee"},{"problem":122,"code":"(fn binp\n   ([b] (binp (seq b) 0))\n   ([s n]\n    (if (empty? s)\n      n\n      (binp (rest s) (+ (* n 2)\n                        (if (= \\0 (first s)) 0 1))))))","user":"55dcb06ee4b050e68259b3b9"},{"problem":122,"code":"(fn [bin]\n  (letfn [(my-exp [x y]\n            (reduce * (repeat y x)))\n          (to-num [idx ch]\n            (if (= ch \\1) (my-exp 2 idx)\n                          0))]\n    (reduce + (map-indexed to-num (reverse bin)))))","user":"5d6e5b53e4b04d129b00f2c6"},{"problem":122,"code":"#(reduce + (map-indexed (fn [in it] (* (if (= \\0 it) 0 1) (int (Math/pow 2 in)))) (reverse %)))","user":"56cd75bee4b0ea9b8538f74b"},{"problem":122,"code":"(fn [s] (apply + \n                (map  \n                 #(* (Integer. (str %1)) (bit-shift-left 1 %2))\n                 (reverse (vec s)) (range) )))","user":"530b8580e4b02e82168697cc"},{"problem":122,"code":"(fn [s]\n  (->> (map-indexed #(* (Math/pow 2 %) (read-string (str %2)))\n                    (clojure.string/reverse s))\n       (apply +)\n       int))","user":"56441634e4b0018b46ad8c08"},{"code":"(fn [s]\n  (apply + (map-indexed \n            \t(fn [i x] \n                  (if (= \\0 x) \n                    0 \n                    (bit-shift-left 1 i)))\n            (reverse s))))","problem":122,"user":"5097cfcbe4b00ad8bab4e977"},{"code":"(fn convert-binary-string-to-numeric [s]\n  (reduce (fn [x [multiplier digit]]\n            (+ x (* multiplier digit)))\n          0\n          (map vector\n               (iterate (partial * 2) 1)\n               (map #(condp = %\n                       \\1 1 \\0 0)\n                     (reverse s)))))","problem":122,"user":"4ee2da14535d10e5ff6f536c"},{"problem":122,"code":"(fn[a](loop\n  [s a\n  len (count a)\n  sum 0]\n  (if(zero? len)sum\n  (\n    recur \n    (apply str (drop 1 s))\n    (dec len)\n    (+ sum (let\n      [x (Integer/parseInt (str(first s)))]\n      (* x (int(Math/pow 2 (dec len))))))\n    ))\n  ))","user":"5826a843e4b051871117befd"},{"problem":122,"code":"(fn to-int [binary]\n  (let [t (->> (reverse binary)\n               (map-indexed #(vector % (* 2 (read-string (str %2)))))\n               (reduce #(+ %1 (Math/pow (last %2) (first %2))) 0)\n               (int))]\n    (if (= \\1 (last binary)) t (dec t))))","user":"54074fc5e4b0addc1aec66b6"},{"code":"(fn [bin-str] (int (reduce + (map-indexed (fn [i digit] (if (= \"1\" digit)\n                                                     (Math/pow 2 i)\n                                                      0)) (reverse (re-seq #\"[0|1]\" bin-str))))))","problem":122,"user":"4fe9ea87e4b0547ebccb2476"},{"code":"(fn bin\n  ([s] (bin s 1))\n  ([s a]\n    (cond\n      (= (last s) \\0) (bin (butlast s) (* 2 a))\n      (= (last s) \\1) (+ a (bin (butlast s) (* 2 a)))\n      :else 0)))","problem":122,"user":"4faac363e4b081705acca200"},{"problem":122,"code":"(fn [b]\n  (reduce #(+ % % %2) (map {\\0 0 \\1 1} b))\n)","user":"56979bb7e4b0e0b3d3318cac"},{"problem":122,"code":"(fn [bn] (int (apply + (map-indexed (fn [i n] (if (= n \\1) (Math/pow 2 i) 0)) (reverse bn)))))","user":"50310713e4b05b7df5a0b84c"},{"problem":122,"code":"(fn [x] (reduce bit-xor ( map-indexed (fn [i v] ((comp  #(bit-shift-left % i) (partial bit-xor 0)  read-string str)  v)) (reverse x))))","user":"564b1ff8e4b0284900eef663"},{"code":"(fn [input]\t\n\t(reduce +\n\t(map #(int (* % (Math/pow 2 %2)))\n\t\t(map (comp read-string str) (reverse input))\n\t\t(iterate inc 0))))","problem":122,"user":"527ccaf4e4b0757a1b17136d"},{"problem":122,"code":"(fn [s] \n  (loop [res 0 digits (seq s)]\n    (if (empty? digits)\n      res\n      (recur (+ (if (= \\0 (first digits)) 0 1) (* res 2)) (rest digits)))))","user":"557f7c8be4b05c286339e0e0"},{"code":"(fn [s] (apply + (map-indexed #(* (Math/pow 2 %) (if (= \\0 %2) 0 1)) (reverse s))))","problem":122,"user":"4f3444b7e4b0e243712b1eb6"},{"code":"(fn __ [s]\n  (Integer/parseInt s 2))","problem":122,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn [bin-str] (->> bin-str\n            (map #(Integer. (str %)))\n            (reduce #(+ %2 (* %1 2)) 0)))","problem":122,"user":"4f3cd535e4b0e243712b1f56"},{"problem":122,"code":"#((fn rbin [acc x] (if (empty? x) acc (rbin (+ acc (* (Integer/parseInt (str (first x))) (reduce * (repeat (- (count x) 1) 2)))) (next x)))) 0 (seq %1))","user":"5bdc4a76e4b0ed4b8aab4c30"},{"code":"#(apply + (map * (for [x (reverse %)\n                         :let [y ({\\0 0} x 1)]] y)\n               (iterate (partial * 2) 1)))","problem":122,"user":"510d9d61e4b078ea71921141"},{"code":"#(apply + (map (fn [x] (apply * x))\n       (partition 2\n           (interleave\n            (map (fn [x] (int (Math/pow 2 x))) (range 0 (count %)))\n            (map (fn [x] (- (int x) 48)) (reverse (seq %)))))))","problem":122,"user":"5047782ce4b0371827a27bc2"},{"code":"(fn [s]\n  (->> s\n       (reverse)\n       (map-indexed #(* (Math/pow 2 %) (- (int %2) (int \\0))))\n       (apply +)\n       (int)))","problem":122,"user":"513fab65e4b00f13ea1bd891"},{"code":"(fn bin [b]\n  (let [binary (reverse b)\n        bits  (map #(Integer/parseInt (str %)) binary)\n        two-to-n #(Math/pow 2 %)\n        decimal  #(if (= 0 %2) 0 (two-to-n %1))\n        decs (map-indexed decimal bits)]\n    (reduce + decs)))","problem":122,"user":"4e6defcc535d5021c1a895f8"},{"problem":122,"code":"(fn binar\n  [x]\n  (let [a (map read-string (re-seq #\"\\d\" x))\n        b (reverse (map #(reduce * (repeat % 2)) (range (count x))))]\n    (reduce + (map #(* %1 %2) a b))))","user":"581829cce4b0c0e9c07b83a9"},{"problem":122,"code":"(fn [orig]\n  (let [bins (take (count orig) (iterate (partial * 2) 1))]\n    (apply + (map (fn [o b] (if (= \\1 o) b 0))\n                  (reverse orig)\n                  bins))))","user":"55380eeae4b09218d5f44fd9"},{"problem":122,"code":"(fn [bin-str]\n    (int(reduce + (map-indexed\n     (fn [x i] (* (Math/pow 2 x) (read-string i)))\n     (filter #(not (= \"\" %)) (reverse (clojure.string/split bin-str #\"\")))))))","user":"558053b1e4b05c286339e0e9"},{"code":"#(loop [bstr %, r 0]\r\n  (condp = (first bstr)\r\n    \\0 (recur (rest bstr) (* 2 r))\r\n    \\1 (recur (rest bstr) (inc (* 2 r)))\r\n    nil r))","problem":122,"user":"4e7e4d5c535db169f9c7970f"},{"code":";(fn bytestring-to-num\n;  [bstring]\n;  (let [blist (->> bstring\n;                   (map str)\n;                   (map #(Integer/parseInt %))\n;                   reverse)\n;        power-2s (lazy-seq (iterate (partial * 2) 1))\n;        b+2s (interleave blist power-2s)\n;        group-b+2s (partition-all 2 b+2s)]\n;    (reduce #(if (= 1 (first %2)) (+ %1 (second %2)) %1) 0 group-b+2s)))\n\n#(read-string (str \"2r\" %))","problem":122,"user":"524f4256e4b0541d1855b808"},{"problem":122,"code":"(fn [bstring]\n  (let [coll (map #(- % 48) (map int (seq bstring)))]\n    (loop [c3 []\n           c1 coll\n           n (- (count coll) 1)]\n      (if (empty? c1)\n        (reduce + c3)\n        (recur (conj c3 (if (= n 0) (first c1) (reduce * (repeat n (* 2 (first c1))))))\n               (drop 1 c1)\n               (dec n))))))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":122,"code":"(fn [x] (reduce +\n(map #(* \n       (Integer/parseInt \n        (str %1)) %2) \n     (reverse x)\n     (map #(int (Math/pow 2 %)) \n              (range (count x))))))","user":"50856bd1e4b004985b776e4c"},{"problem":122,"code":"(fn\n  [s]\n  (int(apply +\n         (map (fn [v] (* (last v) (Math/pow 2 (first v))))\n              (map-indexed vector (reverse (map (fn [ss] (Long/valueOf (str ss))) s)))))))","user":"51c1b644e4b0d204dbe2ca12"},{"problem":122,"code":"(fn [bin]\n  (int (reduce + (map-indexed #(* (Integer. %2) (Math/pow 2 %1)) (reverse (re-seq #\"\\d\" bin))))))","user":"5ad99ddee4b0ea6055cfac3a"},{"problem":122,"code":"(fn [s] (int (let [arr (map read-string (map str (seq s))) len (count arr)] (reduce (fn [r x] (+ r (reduce * x))) 0 (partition 2 (interleave (for [i (range len)] (Math/pow 2 (- len i 1))) arr))))))","user":"5ce62d8ee4b0a17bb84e2b83"},{"code":"(fn binary-convert [str-num]\n   (loop [my-list (reverse (seq str-num)) pow 1 acc 0]\n     (if (empty? my-list)\n       acc\n       (recur (rest my-list) (* 2 pow) (if (= \\1 (first my-list))\n                                         (+ pow acc)\n                                         acc)))))","problem":122,"user":"4ede0511535d10e5ff6f5330"},{"code":"(fn [s] \n  ((fn binner [s accum n]\n    (cond \n      (empty? s) accum\n      (= \\1 (last s)) (binner (butlast s) (+ accum n) (* 2 n))\n      :else (binner (butlast s) accum (* 2 n))\n    )\n  ) s 0 1)\n)","problem":122,"user":"4f8b56dae4b02e764a0a517e"},{"code":"(fn binary [x]\n  (loop [x (reverse x) iter 0 val 0]\n    (cond (empty? x) (int val)\n          (= (first x) \\1) (recur (rest x) (+ iter 1) (+ (Math/pow 2 iter) val))\n          :else (recur (rest x) (+ iter 1) val)\n    )\n  )\n)","problem":122,"user":"50588af1e4b06522596eba7d"},{"code":"(fn [s] (reduce #(+ (if (= %2 \\0) 0 1) (* %1 2)) 0 s))","problem":122,"user":"4eee3e6a535d93acb0a668c3"},{"code":"reduce #(+ % % ({\\1 1} %2 0)) 0","problem":122,"user":"4f296a80e4b0d6649770a02a"},{"problem":122,"code":"(fn [string]\n  (loop [number 0 [ch & string] (reverse string) pow 1]\n    (if (nil? ch)\n      number\n      (recur (+ number (* pow (Integer/parseInt (str ch)))) string (* pow 2))\n    )\n  )\n)","user":"5de6484ce4b0986d99407f66"},{"code":"(fn [s]\n  (apply + (map #(if (= % \\0) 0 %2)\n                (reverse s)\n                (iterate (partial * 2) 1))))","problem":122,"user":"5173726be4b098276e74652c"},{"problem":122,"code":"reduce #( + (* 2 %1) (- (int %2) 48 )) 0","user":"524025bce4b0ad64fa01030f"},{"problem":122,"code":"#(first (reduce (fn [a b] (if (= \\0 b) \n                   [(first a) (* 2 (nth a 1))]\n                   [(+ (first a) (nth a 1)) (* 2 (nth a 1))]\n    )) [0 1] (reverse %)))","user":"59a0262ee4b0871e7608b82d"},{"problem":122,"code":"(fn [str] (reduce (fn [n c] (+ (* 2 n) (if (= c \\1) 1 0))) 0 str))","user":"5471f2fbe4b094393f72dd70"},{"problem":122,"code":"(fn [bistr]  \n           (let [exp (fn [x n] (reduce * (repeat n x)))  \n                 exp-list (conj (map (fn [v] (exp 2 v)) (range 1 (inc (count bistr)))) 1)\n                 val-list (map (fn [v1 v2] (if (= \"1\" (str v2)) v1 0)) exp-list (reverse bistr))\n                 ]\n             (apply + val-list)\n             ))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":122,"code":"#(reduce (fn [n d] (+ (* 2 n) (case d \\0 0 \\1 1))) 0 %)","user":"5d609ddde4b0c9e5857d5008"},{"problem":122,"code":"(fn [number]\n  (if (= 0 (read-string number))\n    0\n    (int (reduce + (loop [i 0 result [] number (reverse number)]\n      (if (= i (count number))\n        result\n        (if (= (str (nth number i)) \"0\")\n          (recur (inc i) result number)\n          (recur (inc i) (conj result (Math/pow 2 i)) number))))))))","user":"5d03944de4b0cc9c915881c5"},{"problem":122,"code":"#(loop [acc 0 exp 0 number (reverse %)]\n   (if\n     (empty? number)\n     acc\n     (let [digit (read-string (str (first number)))]\n       (recur\n        (if \n          (and (= exp 0) (= digit 1))\n          1\n          (+ acc (apply * digit (repeat exp 2))))\n        (inc exp)\n        (rest number)))))","user":"58d2af83e4b03c36ff7e5907"},{"problem":122,"code":"(fn read-binary [n]\n  (letfn [(exp [base exponent]\n            (reduce * (repeat exponent base)))\n          (calculate-nth [idx itm]\n            (if (= itm \\1)\n              (exp 2 idx)\n              0))]\n\n    (reduce + (map-indexed calculate-nth (reverse n)))))","user":"57ea4569e4b0bfb2137f5b46"},{"problem":122,"code":"(fn [binary]\n  (int\n   (:dec\n    (reduce\n     (fn [acc val]\n       (let [val (- (int val) 48)]\n         {:dec (+ (:dec acc)\n                  (* val (Math/pow 2 (:pow acc))))\n          :pow (inc (:pow acc))}\n         ))\n     {:dec 0\n      :pow 0}\n     (reverse (seq binary))))))","user":"55fbc657e4b0f488688e0666"},{"problem":122,"code":"(fn [x] (reduce + (keep-indexed #(if (= \\1 %2) (reduce * (repeat % 2))) (reverse x))))","user":"5382704be4b06839e8705ed4"},{"code":"(fn [b]\n  (let [pi  #(. Integer parseInt %) ex #(. Math pow 2 %) d #(* % (ex %2))  ]\n    (int (reduce + (map d  (map  (comp   pi str  )   (reverse   b)) (range (count b)))))))","problem":122,"user":"5007cdb9e4b0b17c647f5227"},{"code":"(fn [x]\n  (let [x\n        (->> x\n             str\n             (map str)\n             (map #(Integer/parseInt %))\n\t\t\t (map #(if (zero? %2)\n                     0\n                     (Math/pow 2 %1)) (reverse (range (count x)))))]\n  (int (apply + x))))","problem":122,"user":"5371167fe4b0fc7073fd6ea7"},{"code":"(fn [s] \n  (int (apply +\n  (map #(Math/pow 2 (% 0)) (filter #(= (% 1) \\1) (map vector (range) (reverse s)))))))","problem":122,"user":"504e108ce4b078edc5f593b3"},{"problem":122,"code":"(fn [b]\n  (Integer/parseInt b 2))","user":"5460f59ce4b01be26fd74695"},{"problem":122,"code":"(fn parse-binary [string]\n  (read-string (str 2 \\r string)))","user":"58ed713de4b056aecfd47d84"},{"code":"(fn [s]\n    (reduce #(if (= (val %2) \\1) (+ % (key %2)) %) 0 (zipmap (iterate #(* 2 %) 1) (reverse s)))\n)","problem":122,"user":"52b577c9e4b0c58976d9ad39"},{"problem":122,"code":"(fn\n  [binstr]\n  (apply + (map-indexed\n            #(* (Integer. (str %2)) (int (Math/pow 2 %1)))\n            (reverse binstr)))\n)","user":"5351fca5e4b084c2834f4aec"},{"problem":122,"code":"(fn fun122\n  [string]\n  (reduce + (map *\n                 (map #(- (int %) 48) (reverse (seq string)))\n                 (iterate #(* % 2) 1))))","user":"5075e374e4b09049dea827a5"},{"code":"(fn [binary] (apply + \n                    (map #(if (= \\1 (first %)) (last %) 0) \n                         (partition 2 \n                                    (interleave (reverse binary)\n                                                (iterate #(* 2 %) \n                                                         1))))))","problem":122,"user":"4f03f197535dcb61093f6b84"},{"problem":122,"code":"(fn [s]\n  (apply + (map (fn [x]\n                  (apply * (repeat x 2)))\n                (keep-indexed #(if (= 1 %2) %1)\n                              (mapv (comp read-string str) (reverse s))))))","user":"57de9169e4b0bd073c202454"},{"problem":122,"code":"(fn [s]\n  (reduce + (map (fn [index]\n                  (apply * (repeat index 2)))\n                (keep-indexed #(if (= 1 %2) %1)\n                                 (mapv (comp read-string str) (reverse s))))))","user":"5f1af439e4b0f565ad998257"},{"problem":122,"code":"#(apply + (map-indexed (fn [i v] (if (= v \\1) (int (Math/pow 2 i)) 0)) (reverse %)))","user":"5499e23de4b03163384f4706"},{"problem":122,"code":"#(reduce + (map * \n       (map (fn [x] (if (= \\0 x) 0 1)) (reverse (into [] %)))\n       (iterate (partial * 2) 1)))","user":"5ddd6cfae4b0948ae9d9adc4"},{"code":"reduce (fn [v c]\n         (+ (* 2 v)\n            (if (= c \\0) 0 1)))\n       0","problem":122,"user":"53712c03e4b0fc7073fd6ea9"},{"problem":122,"code":"#(->>\n  %\n  (map (fn [b] (- (int b) (int \\0))))\n  (reduce (fn [acc x] (+ (* 2 acc) x)) 0))","user":"55d5ee3fe4b0e31453f64a92"},{"problem":122,"code":"(fn [s]\n  (let [bmap {\\0 0 \\1 1}\n        nums (map bmap (seq s))\n        process (fn [p c] (+ (* 2 p) c))]\n    (reduce process 0 nums)))","user":"53e3f7a8e4b036ad0777e408"},{"problem":122,"code":"(fn [s]\n  (reduce\n   (fn [x c]\n     (+ (* 2 x) (if (= \\1 c) 1 0)))\n   0\n   s))","user":"5032748ae4b0e78df07b092f"},{"problem":122,"code":"(fn [x]\n  (let [b (reverse (map #(- % 48) (map #(int %) x)))]\n    (reduce + (map #(* %1 (apply * (map (fn [_] 2) (range %2)))) b  (range 0 (inc (count b)))))\n    ))","user":"54f773bfe4b01ecee9d8881f"},{"problem":122,"code":"(fn   [lst]\n  (loop [lstr (reverse lst)\n         icc  0\n         coolL ()]\n    (if (zero? (count lstr))\n      (int (reduce + coolL))\n      (recur\n        (drop 1 lstr)\n        (inc icc)\n        (if (= 49 (int (first lstr)))\n          (cons (Math/pow 2 icc) coolL )\n          coolL)\n        ))))","user":"59deba46e4b01968742fed7f"},{"code":"(fn [s]\n   (->> s\n     (reverse)\n     (map #(- (int %) 48))\n     (map #(bit-shift-left %2 %1) (iterate inc 0))\n     (reduce +)\n     ))","problem":122,"user":"4f616892e4b0defedf855fbf"},{"code":"(fn [bstr]\n    (loop [ws bstr n 1 r 0]\n       (if-let [ b  (last ws)]\n           (recur (drop-last ws) (* n 2) (+ r (* n (Integer. (str b)))))\n           r\n        )\n     )\n)","problem":122,"user":"522eba30e4b01cdb292c5f0e"},{"code":"(fn this [x] \n  (reduce + (map-indexed \n    #(* (max (Math/pow 2 %1) 1) (Integer/parseInt (str %2))) \n    (reverse x))))","problem":122,"user":"4e7e1483535db169f9c79702"},{"problem":122,"code":"(fn [bin]\n  (reduce\n    #(+ (* 2 %1) %2)\n   \t0\n   \t(mapv #(Integer/parseInt (str %)) bin)\n  )\n)","user":"5ba75fdfe4b0a20761a23419"},{"code":"(fn [s] \n  (reduce + \n    (map #(if (= \\1 %1) \n              (nth (iterate (partial * 2) 1) %2) \n              0) \n         (reverse s) \n         (iterate inc 0))))","problem":122,"user":"4e243bcb535d04ed9115e825"},{"problem":122,"code":"#(loop [remainder (reverse (seq %))\n         exp 2\n         sum 0]\n    (if (empty? remainder)\n      sum\n      (recur (rest remainder) (* exp 2) (+ sum (* (/ exp 2) (- (int (first remainder)) 48))))))","user":"554756b8e4b0a04f79299549"},{"code":"(fn  [s]\n  (let [t (map #(- (int %) 48) (reverse s))]\n    (reduce + (for [y (range (count t))]\n                (*\n                  (nth t y)\n                  (reduce * (repeat y 2)))))))","problem":122,"user":"504e12ade4b078edc5f593b7"},{"problem":122,"code":"(fn [s]\n    (reduce +\n            (map * \n                 (map #(if (= % \\1) 1 0) (reverse s))\n                 (iterate (partial * 2) 1))))","user":"54eff2bee4b024c67c0cf88d"},{"code":"(fn [s] \n  (reduce #(+ (* %1 2) %2) (map #(- (int %1) 48) s)))","problem":122,"user":"4ee82223535d93acb0a66877"},{"problem":122,"code":"#(loop [bn (reverse %) acc 0 cnt 0] (if (empty? bn) acc (recur (rest bn) (+ acc (if (= \\1 (first bn)) (reduce * 1 (repeat cnt 2)) 0)) (inc cnt))))","user":"56aed78fe4b03c432f187363"},{"problem":122,"code":"#(loop [len (count %)\n         coll %\n         res 0]\n    (cond\n      (not coll)\n      (bit-shift-right res 1)\n      (= \\1 (first coll))\n      (recur (dec len) (next coll) (+ res (bit-shift-left 2 (dec len))))\n      :else\n      (recur (dec len) (next coll) res)\n      ))","user":"5cc80598e4b0ccb061962840"},{"problem":122,"code":"(fn read-binary [s]\n  (reduce #(+ (* 2 %1) (Integer/parseInt (str %2))) 0 s))","user":"53dc94c8e4b094d41abdfefc"},{"code":"#(first\n  (reduce\n   (fn [[total mult] item]\n     [(bit-or total (bit-shift-left (get {\\0 0 \\1 1} item) mult))\n      (inc mult)])\n   [0 0]\n   (reverse %)))","problem":122,"user":"51f9527fe4b09be9c177e549"},{"code":"(fn value\n  [binary]\n  (let [bits (reverse (map #(Integer/parseInt (str %)) (vec binary)))\n        pow2 (fn [n] (bit-shift-left 1 n))]\n    (loop [bits-left bits\n           val 0\n           shift 0]\n      (if (empty? bits-left)\n        val\n        (recur\n          (rest bits-left)\n          (+ val (if (zero? (first bits-left)) 0 (pow2 shift)))\n          (inc shift))))))","problem":122,"user":"4edfb618535d10e5ff6f5343"},{"problem":122,"code":"(fn [b]\n  (->\n   b\n   (seq)\n   ((fn decimalize [s col]\n    (cond\n     (empty? s) (col 0 1)\n     :else (decimalize (rest s) (fn [sum c]\n                            (cond\n                             (= (first s) \\1) (col (+ sum c) (* 2 c))\n                             :else (col sum (* 2 c)))))))\n    (fn [sum c] sum))))","user":"5833a6d8e4b089d5ab817ca2"},{"code":"(fn [s]\n  (reduce + (map key (filter (fn [x] (= \\1 (val x))) \n                             (apply hash-map (interleave (reverse (take (count s) (iterate (partial * 2) 1))) s))))))","problem":122,"user":"4e9ff8d0535d7eef3080729c"},{"problem":122,"code":"#(loop [acc 0 l %]\n   (if (empty? l)\n     (/ acc 2)\n     (let [[x & xs] l]\n       (if (= x \\1)\n         (recur (* 2 (inc acc)) xs)\n         (recur (* 2 acc) xs)))))","user":"565e0934e4b068f2fe63dc30"},{"code":"(fn [num]\n  (Integer/parseInt num 2))","problem":122,"user":"50621cbde4b0341461c88951"},{"problem":122,"code":"(fn b2i [str]\n\t(let [s (map #(- (int %) 48) (seq str))]\n   \t\t(loop [i 0 sum 0]\n   \t\t\t(if (= i (count s))\n\t\t\t\tsum\n\t\t\t\t(recur (inc i) (+ (* sum 2) (nth s i)))))))","user":"59f043d0e4b0966464fe6a3d"},{"problem":122,"code":"(fn[x]\n  (apply +(map *\n  (->> x\n       (map str)\n       (map read-string)\n       reverse\n       )\n  (iterate #(* 2 %) 1)\n  )))","user":"53ed2fafe4b0d648e757f4c1"},{"problem":122,"code":"#(reduce-kv (fn [a k v]\n               (if (= \\1 v)\n                 (+ a (reduce * (repeat k 2)))\n                 a)) 0 (vec (reverse %)))","user":"5508a292e4b06e50f9beb10f"},{"problem":122,"code":"(fn \n  [x]\n  (reduce + \n          (map * (reverse (map #(- (int %) 48) x)) (iterate #(* 2 %) 1))\n  )\n)","user":"5717d674e4b07c98581c3b1a"},{"code":"(fn[n](Integer/parseInt n 2))","problem":122,"user":"4e7650c5535d324fb2983d68"},{"problem":122,"code":"(fn\n  [s]\n  (loop [index 0 sum 0]\n    (if (= index (count s))\n      sum\n      (recur \n       (inc index) \n       (cond\n        (= (nth (reverse s) index) \\1) (+ sum (reduce * (repeat index 2)))\n        :else sum)))))","user":"5843b231e4b089d5ab817e3d"},{"problem":122,"code":"(fn [s] (loop [e 0 charSeq (seq s) sum 0] (cond (= (count s) e) sum \n                                          (= (last charSeq) (last (seq \"0\"))) (recur (inc e) (drop-last 1 charSeq) sum)\n                                                :else (recur (inc e) (drop-last 1 charSeq) (+ sum (int(Math/pow 2 e)))))))","user":"573c813be4b0cd1946bd10c5"},{"code":"(fn [xs]\n  ((fn [xs acc]\n     (if (empty? xs) acc\n       (recur (rest xs) (+ (* 2 acc) (if (= (first xs) \\1) 1 0)))))\n     xs 0))","problem":122,"user":"508157b2e4b0946d0443855c"},{"problem":122,"code":"(fn [string]\n  (let [powers-of-2 (fn [] (iterate #(bit-shift-left % 1) 1))\n        reverse-bits (map (comp read-string str) (reverse string))]\n    (reduce + (map (fn [x y] (* x y)) reverse-bits (take (count string) (powers-of-2))))))","user":"5383668ee4b06839e8705edd"},{"problem":122,"code":"(fn [st]\n  (loop [lis (seq st) result 0]\n    (if(empty? lis)\n      result\n      (if(= \\1 (first lis))\n        (recur (rest lis) (+ result (reduce * (repeat (- (count lis) 1) 2))))\n        (recur (rest lis) result)))))","user":"5191a763e4b0d428d29dc1b4"},{"problem":122,"code":"(fn readbin2\n  [num]\n  (reduce + (map (fn [coll]\n                   (* (first coll) (second coll))) (partition 2 (interleave\n                                                                  (iterate (partial * 2) 1)\n                                                                  (map {\\1 1 \\0 0} (reverse num)))))))","user":"5d6d2e11e4b04d129b00f2ba"},{"code":"#( apply +                                                                                                    \n        (map *                                                                                                \n             (reverse (take (count %)                                                                                  \n               (iterate (fn [x] (* 2 x)) 1 )))                                                      \n             (map read-string                                                                                 \n                  (map str (seq %)))))","problem":122,"user":"505fc8e3e4b08f2a82ad10b6"},{"code":"(fn [string]\n  (letfn [(char-val [c] (- (int c) 48))]\n    (reduce #(+ (char-val %2) (* 2 %1)) 0 string)))","problem":122,"user":"51a3b135e4b0e77c4ca60bf6"},{"problem":122,"code":"(fn [s]\n  (let [exp (fn [x n] (reduce * (repeat n x)))\n        bits (reverse (seq s))\n        powers (map-indexed (fn [i b] (if (= \\1 b) (exp 2 i) 0)) bits)]\n    (reduce + powers)))","user":"5a257747e4b07f18be40aa1f"},{"problem":122,"code":"(fn [n] (int  (apply + (map #(* (read-string (str %1)) (Math/pow 2 %2)) (vec (reverse n)) (iterate inc 0)))))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":122,"code":"(fn [s] (reduce #(+ %2 (* 2 %1)) (map #(- (int %) (int \\0)) s)))","user":"564b495de4b0284900eef667"},{"problem":122,"code":"(fn binary\n  [binary]\n  (let [lst (reverse(map #(Integer/parseInt (str %)) binary))]\n    (->>\n      (interleave (range 0 (+ 1 (count lst))) lst)\n      (partition 2)\n      (map (fn [x] (if (= 0 (first x)) (* (second x) 1) (* (second x)(reduce * (repeat (first x) 2))))))\n      (reduce +))))","user":"59e8fef3e4b0249b72820743"},{"problem":122,"code":"(fn [s0] \n  (loop [a 0 s s0]\n    (if (empty? s)\n      a\n      (recur (-> (bit-shift-left a 1) (bit-or (- (int (first s)) (int \\0)))) (drop 1 s))\n)))","user":"54524afbe4b0e397800069bc"},{"problem":122,"code":"#(Integer/parseInt %,2)","user":"5f77d470e4b02876ed9fd0be"},{"code":"(fn [x]\n  (let [s (map #(Character/getNumericValue %1) (reverse x))]\n    (loop [m 1 n 0 r s ]\n      (if (first r) (recur (* 2 m) (+ n (* m (first r))) (rest r)) n))))","problem":122,"user":"511618b1e4b0d4f670fd2fdf"},{"problem":122,"code":"(fn [ x ] (apply + (map * (map #(apply * %) (map #(repeat % 2) (reverse (range (count (seq x))))))  (map #(Integer/parseInt (str %)) (seq x)))))","user":"57887de2e4b0ebec4cfb751c"},{"code":"(fn [b] (reduce + (map * (map #(- (int %) 48) (reverse (seq b))) (iterate #(* 2 %) 1))))","problem":122,"user":"52d7a930e4b09f7907dd1379"},{"code":"(fn \n  [a] \n    (reduce + \n      (map * \n        (map #(- % 48) (map int a))\n(reverse (take (count a) (iterate #(* 2 %) 1))))))","problem":122,"user":"4e1fe7f1535d04ed9115e810"},{"code":"(fn num-from-binary [s]\n  (reduce (fn [a [ndx on]]\n            (if (= \\1 on)\n              (+ a (int (Math/pow 2 ndx)))\n              a)) 0\n          (map-indexed  #(list %1 %2) (reverse s))))","problem":122,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn [s] (reduce #(+ (* 2 %1) %2) 0 (map #(Integer/parseInt (str %)) s)))","problem":122,"user":"5256627ce4b0541d1855ba1a"},{"problem":122,"code":"(fn [x] (let [z (->> x (seq) (map #(- (int %) 48)) (reverse))]\n              (reduce + (map * z (iterate (partial * 2) 1)))))","user":"5a533cc0e4b05d388ecb6c09"},{"code":"reduce #(+ (* 2 %) (int %2) -48) 0 ; 0N","problem":122,"user":"4e8510e7535db62dc21a62e7"},{"code":"(fn [b] (let [exp #(reduce * (repeat %2 %1))]\n  (loop [s (seq b) r 0 l (dec (count b))]\n  (if (empty? s) \n    r\n    (if (= (first s) \\1)\n      (recur (rest s) (+ r (exp 2 l)) (dec l))\n      (recur (rest s) r (dec l)))))))","problem":122,"user":"4e25176e535d04ed9115e829"},{"problem":122,"code":"#(first \n  (reduce \n   (fn [[t p] d] \n     [(+ t (if (= d \\0) 0 p)) (* 2 p)]) \n   [0 1] \n   (reverse %)))","user":"561c0278e4b064ca9f4b1691"},{"code":"#(first\n  (reduce\n   (fn [ [n exp] b]\n     (vector\n      (+ n (* exp (- (int b) (int \\0))))\n      (* 2 exp)\n     ))\n   [0 1] (reverse %)))","problem":122,"user":"5224a46ce4b01819a2de42e5"},{"problem":122,"code":"#(loop [res 0, current 1, string %]\n   (if (seq string)\n     (recur (+ res (if (= (last string) \\1) current 0)) (* current 2) (butlast string))\n     res))","user":"55868660e4b059ccff29b1d4"},{"problem":122,"code":"(fn [x] (. Long parseLong x 2))","user":"54d2b411e4b0e8a36923e5f9"},{"problem":122,"code":"(fn bin->dec [str]\n  (let [bins (reverse (re-seq #\"\\d\" str))\n        pows (take (count bins) (iterate inc 0))]\n    (int (reduce + (map #(* (Integer. %1) (Math/pow 2 %2)) bins pows)))\n  ))","user":"587a3babe4b01531a375eae2"},{"code":"(fn [s] (->> (re-seq #\"[01]\" s) \r\n            reverse \r\n            (map read-string)\r\n            (map-indexed #(int (* %2 (Math/pow 2 %1))))\r\n            (reduce +)))","problem":122,"user":"4fe900a6e4b0547ebccb243a"},{"problem":122,"code":"(fn [s]\n  (int (reduce + (map-indexed #(* %2 (Math/pow 2 %1)) (map #(if (= \\0 %) 0 1) (reverse s))))))","user":"52c1ede2e4b07a9af579236d"},{"problem":122,"code":"(fn [str] (reduce + (map * (reverse (map #(- (int %) (int \\0)) str)) (iterate #(* 2 %) 1))))","user":"59c8ffe6e4b0a024fb6ae56c"},{"code":"#(reduce (fn[s,x](+ (* 2 s) (Integer/valueOf (str x)))) 0 %)","problem":122,"user":"4ec75829535d6d7199dd36e1"},{"problem":122,"code":"(fn [s]\n   (reduce + (map #(int (if (= \\1 %1) (Math/pow 2 %2) 0)) (reverse s) (range))))","user":"5d9e8e40e4b000c986472bc2"},{"problem":122,"code":"(fn bin\n    ([s]\n      (bin (seq s) 1))\n    ([v p]\n      (if (= (count v) 0)\n        0\n        (+ (* (if (= (last v) \\0) 0 1) p) (bin (drop-last v) (* p 2)))))\n    )","user":"4f9e0000e4b0dcca54ed6d2a"},{"problem":122,"code":"(fn function-122\n  [str1]\n  (let [[f & r] (reverse (map #(Long. %) (map #(str %) (seq str1))))]\n    (+ f (loop [x 0 num 0 c r]\n                (if (= x (count r))\n                num\n                (recur\n                  (inc x)\n                  (if (= 1 (nth r x))\n                    (+ num (nth (iterate #(* 2 %) 2) x))\n                    num)\n                  c))))))","user":"598d0dc3e4b02b9968b84d18"},{"problem":122,"code":"(fn [str-xs]\n  (Integer/valueOf str-xs 2))","user":"59e8cd8be4b0249b72820739"},{"problem":122,"code":"(fn bin->dec [s]\n  (apply + (map (fn [x y]\n                  (* (Character/getNumericValue x) (reduce * (repeat y 2))))\n                (reverse s) (range))))\n;(fn [s]\n;  (->> s\n;       (map (comp read-string str))\n;       reverse\n;       (map (fn [x y]\n;              (* y (reduce * (repeat x 2))))\n;            (range))\n;       (apply +)))","user":"60794173e4b0a637ed78035d"},{"code":"(fn b2i [liste]\n  (reduce #(+ (* %1 2) %2)\n    (map #(if (= \\1 %1) 1 0) liste)\n  )\n)","problem":122,"user":"4f84400de4b033992c121c2e"},{"code":"(fn [xs] (int (apply + (map (fn [a b] (* a b)) (map #(if (= \\0 %) 0 1) (reverse xs)) (map #(Math/pow 2 %) (range))))))","problem":122,"user":"523c6451e4b07becd5be2222"},{"problem":122,"code":"(fn [s] (reduce +\n (map * (iterate (partial * 2) 1)\n        (map (comp #(Integer/parseInt %) str) (reverse s)))))","user":"5a12dea3e4b04bbd27e6da44"},{"code":"(fn [ss]\n   (loop [ss ss sum 0 ind 1]\n     (if (empty? ss) sum\n         (recur (drop-last ss)\n            (if (= \\1 (last ss)) (+ sum ind) sum)\n            (* ind 2)))\n     ))","problem":122,"user":"4eb02674535d7eef30807338"},{"problem":122,"code":"(fn stuff\n  [x]\n  (let [y (reverse (map #(java.lang.Character/getNumericValue %) x))]\n    (first (reduce #(list (+ (* %2 (second %)) (first %)) (* (second %) 2)) '(0 1) y))))","user":"54091b82e4b0addc1aec66d5"},{"code":"(fn foo[acc lst]\n  (if (empty? lst)\n    acc\n    (foo (+ (* 2 acc) (- (int (first lst)) 48)) (rest lst))))\n0","problem":122,"user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn [b]\n  (reduce +\n    (map (fn [d v] (if (= \\0 d) 0 v))\n         (reverse b)\n         (iterate #(+ % %) 1))))","problem":122,"user":"4de760a3535d08e6dec9fdf9"},{"code":"(fn read-binary-number [s]\n  (loop [i (reverse (map #(Integer/parseInt %) (re-seq #\"\\d\" s)))\n         j 0\n         acc 0]\n    (cond\n     (empty? i) (int acc)\n     :else (recur (rest i) (inc j) (+ acc (* (first i) (Math/pow 2 j)))))))","problem":122,"user":"4fd16778e4b04c3a95aa040f"},{"code":"(fn [s] \n  (apply + (map #(* % (- (int %2) 48)) \n                (iterate #(* 2 %) 1) \n                (reverse s))))","problem":122,"user":"4e43b0d9535dc968683fc4a3"},{"code":"(fn [n] (Integer/parseInt n 2))","problem":122,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":122,"code":"#(reduce (fn [init n] (+ (* 2 init) (Integer. (str n)))) 0 %)","user":"60471241e4b02d28681c77c9"},{"problem":122,"code":"#(->> % seq (map int) (map (fn [x] (- x 48)))\n      ((fn [lst]\n        (loop [ans 0 lst lst]\n          (if lst (recur (+ (* ans 2) (first lst)) (next lst)) ans)\n          )))\n )","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":122,"code":"(fn binstr2dec[binstr]\n    (apply +\n           (map  #(* (if (= \"1\" %1) 1 0) %2)\n                 (reverse\n                  (re-seq #\".\" binstr))\n                 (iterate #(* 2 %) 1))))","user":"573a0ecce4b0cd1946bd1088"},{"problem":122,"code":"(fn [nx2]\n   (int (reduce +\n            (map-indexed #(* (Math/pow 2 %) (Integer/parseInt (str %2)))\n                         (reverse (seq nx2))))))","user":"55a372f1e4b0acc240e31537"},{"problem":122,"code":"(fn [binary]\n   (->> binary\n        (map-indexed vector)\n        (filter #(= \\1 (last %)))\n        (map first)\n        (map #(- (count binary) % 1))\n        (map #(reduce * (repeat % 2)))\n        (reduce + 0)\n))","user":"53ed6976e4b0d648e757f4c4"},{"code":"(fn [coll]\n  (apply + (map-indexed (fn [idx val]\n                   (if (= val \\1)\n                       (Math/round  (Math/pow  2 idx))\n                      0)\n\n               )\n     (reverse coll)))\n  )","problem":122,"user":"4f9f9ff5e4b0dcca54ed6d3a"},{"code":"(fn bin-val [x]\n  (let [helper (fn helper [x a]\n                 (if (seq x)\n                   (helper (rest x) (+ (* 2 a) (if (= \\1 (first x)) 1 0)))\n                   a))]\n    (helper x 0)))","problem":122,"user":"53388e2de4b0e30313ee6c9c"},{"problem":122,"code":"#(reduce + (map-indexed (fn [p d] (if (= d \\1) (bit-shift-left 1 p) 0)) (reverse (seq %))))","user":"5481be5fe4b0e286459a1172"},{"problem":122,"code":"#(apply + (map (fn [a b]\n                 (* b (Integer/parseInt (str a))))\n                (reverse %)\n                (iterate (partial * 2) 1)))","user":"598858d0e4b021a7a535feb5"},{"problem":122,"code":"(fn [str]\n  (let [digits (map #(if (= %1 \\0) 0 1) (reverse str))\n        powers (iterate #(* 2 %) 1)]\n    (reduce + (map * digits powers))))","user":"4f8ac2bde4b02e764a0a5172"},{"problem":122,"code":"(fn [x]\n  (let [xr (reverse x)]\n    (reduce + (for [i (range (count xr))\n                    :when (= (nth xr i) \\1)]\n                    (reduce * (repeat i 2))))))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":122,"code":"(fn [s]\n  (reduce + (map * \n       (map (comp #(Integer/parseInt %) str) (reverse s)) \n       (iterate #(* 2 %) 1)))\n  )","user":"5510d948e4b06e50f9beb18d"},{"problem":122,"code":"(fn [st] \n        (let [r (clojure.string/reverse st) \n              rs (seq (char-array r))]\n          (loop [xs rs ex 1 acc 0]\n            (if (empty? xs) acc \n                (recur (rest xs) (* 2 ex) (+ acc (* ex (Character/digit (first xs) 10))))))))","user":"4e526cc4535d302ef430da74"},{"code":"(fn [v] (apply + (map * (iterate (partial * 2) 1) (map #(Character/getNumericValue %) (reverse v)))))","problem":122,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"(fn [x] (reduce #(+ (* %1 2) (if (= %2 \\0) 0 1)) 0 x))","problem":122,"user":"5017f840e4b02f523d7cc5e8"},{"code":"(fn [x] (apply + (map #(if (= % \\1) %2 0) (seq (reverse x)) (take (count x) (iterate (partial * 2) 1)) )))","problem":122,"user":"4f826548e4b033992c121c08"},{"problem":122,"code":"(fn read-binary [s]\n  (Integer/parseInt s 2))","user":"543c39e0e4b032a45b86933d"},{"code":"(fn [s]\n  (loop [s s\n         place 0\n         result 0]\n    (if (empty? s)\n      result\n      (if (zero? (read-string (subs s (dec (.length s)) (.length s))))\n        (recur (subs s 0 (dec (.length s))) (inc place) result)\n        (recur (subs s 0 (dec (.length s))) (inc place) (+ result (reduce * (repeat place 2))))))))","problem":122,"user":"504dffe2e4b078edc5f5938b"},{"code":"(fn [b]\n  (let [bmap {\\0 0 \\1 1}]\n    (reduce (fn [s d] (+ (* 2 s) (bmap d))) 0 b)))","problem":122,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn [num] (reduce #(+ (* %1 2) %2) (map {\\0 0 \\1 1} num)))","problem":122,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"(fn binary-num [s]\n  (Long/parseLong s 2))","problem":122,"user":"5346f409e4b084c2834f4a46"},{"problem":122,"code":"(fn [x] (reduce #(+ (* 2 %1) (if (= \\1 %2) 1 0)) 0 x))","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn bin2dec [bin] \n  (reduce +\n          0\n          (keys\n           (filter \n            #(= (val %) \\1)\n            (zipmap (iterate (partial * 2) 1) (seq (reverse bin)))))))","problem":122,"user":"504f3fa3e4b0a02f9cffde62"},{"problem":122,"code":"(fn [x] (reduce + (for [z (range (count x)) :let [y (* (- (int (get x z)) 48) (int (Math/pow 2 (- (count x) (inc z)))))]] y)))","user":"511036c5e4b04c71fce993ee"},{"code":"(fn binary [x]\n  (let [\n        calc\n          (fn [p x] (reduce + (map * p (reverse (map #(if (= \\1 %) 1 0) (seq x))))))\n        powers\n          (map #(reduce * (repeat % 2)) (range 0 (count x)))\n       ]\n    (calc powers x)))","problem":122,"user":"514cfa27e4b019235f6c057d"},{"problem":122,"code":"(fn [x]\n  (reduce #(+ (* 2 %1) %2)\n          (map #(- (int %) 48) x)))\n\n \n ;; (fn [binary-string]\n ;;  (loop [i 0\n ;;         num 0\n ;;         numbers (map #(Integer. (str %))\n ;;                      (reverse (seq binary-string)))]\n ;;    (if (zero? (count numbers))\n ;;      (int num)\n ;;      (let [new-num (+ num\n ;;                       (* (Math/pow 2 i)\n ;;                          (first numbers)))]\n ;;        (recur (inc i) new-num (rest numbers))))))","user":"557b3f29e4b05c286339e0ac"},{"problem":122,"code":"(fn [bi]\n  (reduce\n    (fn [acc curr]\n      (+ acc (* (first curr) (second curr))))\n    0\n    (partition 2 (interleave (map #(Integer. (str %)) (reverse(seq bi))) (iterate #(* 2 %) 1)))))","user":"602b90c1e4b0d5df2af22266"},{"code":"(fn read-bin [s]\n          (let [cast #(if (= \\0 %) 0 1)\n                read-bin-aux (fn read-bin-aux[s]\n                               (if (empty? s)\n                                 0\n                                 (+ (cast (first s)) (* 2 (read-bin-aux (rest s))))))]\n            (read-bin-aux (reverse s))))","problem":122,"user":"503b6995e4b07a1917cc34dd"},{"problem":122,"code":"(fn [s]\n  (reduce \n   #(+ (if (= \\1 %2) 1 0) (* 2 %1))\n   0\n   s))","user":"58cfbd7ae4b03c36ff7e58ba"},{"code":"(fn bnum [nstr]\n  (->> nstr\n    (reverse)\n    (map-indexed (fn [i el] (if (= el \\1) (reduce * (repeat i 2)) 0)))\n    (reduce + 0)))","problem":122,"user":"4ff4c9dae4b0678c553fc360"},{"problem":122,"code":"(fn [x] \n  (let [n (count x)]\n   (reduce + (map * (map #(Character/getNumericValue %) x) (reverse (take n [1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536]))))))","user":"5ac4d1f6e4b0e27600da7735"},{"problem":122,"code":"(fn value\n  ([st acc] (cond\n             (empty? st) acc\n             (= (first st) \\1) (recur (rest st) (+ (* acc 2) 1))\n             :else (recur (rest st) (* acc 2))))\n  ([st] (value st 0)))","user":"5ee93720e4b029a2061bbeb7"},{"code":"reduce #(+ (* 2 %) ({\\1 1} %2 0)) 0","problem":122,"user":"4f06dcad535dcb61093f6c16"},{"problem":122,"code":"(fn bytes-to-int [s]\n  (let [as-bytes (reverse (.getBytes s))\n        reducer #(hash-map :acc (* (:acc %1) 2)\n                           :val (+ (:val %1) (* (:acc %1) (- %2 48))))]\n    (:val (reduce reducer {:acc 1 :val 0} as-bytes))))","user":"57763002e4b0979f89651631"},{"problem":122,"code":"(fn n122 [s]\n  (Integer/parseInt s 2))","user":"60537cd1e4b04c8f2157d152"},{"code":"(fn [bit-str]\n  (Integer/valueOf bit-str 2))","problem":122,"user":"5041b3c0e4b06d8231e4facf"},{"code":"(fn read-a-binary-number [b]\n  (read-string (apply str \"2r\" b)))","problem":122,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":122,"code":"(fn b2n [nbin]\n  (loop [nb (reverse nbin) binpos 1 decnum 0]\n    (if (empty? nb)\n      decnum\n      (recur \n        (rest nb) \n        (* 2 binpos) \n        (if (= \\1 (first nb)) \n          (+ decnum binpos) \n          decnum)\n        )\n    )\n  )\n  )","user":"5885e90de4b0f1effa3b76c5"},{"problem":122,"code":"(fn [s]\n  (reduce #(+ %2 (* %1 2)) 0 (map (fn [x] (Integer. (str x))) s)))","user":"4f041de1535dcb61093f6ba5"},{"problem":122,"code":"(fn\n  [s]\n  (loop [r 0 s s]\n    (if (empty? s)\n      r\n      (recur (+ (* 2 r) (Integer/parseInt (str(first s)))) (rest s)))))","user":"5af907e6e4b0cc2b61a3bcda"},{"code":"(fn [x] (apply + (map-indexed #(if (= %2 \\1) (Math/pow 2 %1) 0) (reverse (seq x)))))","problem":122,"user":"4e976f79535dbda64a6f6b55"},{"problem":122,"code":"(fn binary\n  [b]\n  (reduce\n   + (map\n      #(* %1 (- (int %2) (int \\0)))\n      (iterate (partial * 2) 1)\n      (reverse (seq b)))))","user":"55c9bc1ee4b0e31453f649f1"},{"code":"#((reduce(fn[x y]{:t (+(x :t)(if(= \\1 y)(x :p)0)) :p (* 2 (x :p))}){:t 0 :p 1}(reverse(seq %))):t)","problem":122,"user":"5017eface4b02f523d7cc5e7"},{"problem":122,"code":"(fn read-binary [n]\n  (Long/parseLong n 2))","user":"56175cf9e4b06b1bb2182a0f"},{"problem":122,"code":"(fn [bin]\n  (reduce +\n          (let [size (- (count bin) 1)]\n            (map-indexed (fn [idx itm] (if (= itm \\0)\n                                 0\n                                 (bit-shift-left 1 (- size idx)))) \n                 bin))))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":122,"code":"(fn [num] (int (reduce + (map-indexed (fn [idx item] (* item (Math/pow 2 idx)))  (map #(Character/digit % 10) (reverse (str num)))))))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":122,"code":"(fn read-binary\n  [binary-string]\n  (#(Long/parseLong % 2) binary-string))","user":"55a9e0fee4b0988bba2ad945"},{"code":"(fn [s]\n  (reduce +\n          (map (fn [e d] (* e d))\n               (iterate (partial * 2) 1)\n               (map (comp read-string str) (reverse s)))))","problem":122,"user":"4fb01e53e4b081705acca260"},{"code":"#(read-string (apply str \"2r\" %))","problem":122,"user":"4f38b7d9e4b0e243712b1ee0"},{"problem":122,"code":"(fn read-binary [bn]\n  (letfn [(str-to-vec [s]\n            (vec \n              (map (comp (partial * -1) (partial - 48) int) s)))\n          (powers-seq\n            ([] (powers-seq 1))\n            ([n] (lazy-seq (cons n (powers-seq (* n 2))))))\n          (powers-of-two [n]\n            (vec (reverse (take n (powers-seq)))))]\n    (reduce + (map * (powers-of-two (count bn)) (str-to-vec bn)))))","user":"590253e3e4b0438e51c2d055"},{"code":"(fn [x] (reduce #(+ %1 %1 %2) 0 (map #(- (int %) 48) x)))","problem":122,"user":"4e22b78b535d04ed9115e81e"},{"problem":122,"code":"(fn [bin]\n   (Math/round\n    (reduce +\n            (map-indexed (fn [i b]\n                           (* (Math/pow 2 i) (Double/parseDouble (str b))))\n                         (reverse bin)))))","user":"554bd33ce4b0a04f7929959a"},{"problem":122,"code":"#(loop [bin %1 res 0] (if (empty? bin) \n                      res \n                      (recur \n                        (apply str(rest bin)) \n                        (+ (* 2 res) (Long/valueOf (str (first bin))))                         )\n                        )\n)","user":"5b3aa98be4b02d533a91bbca"},{"problem":122,"code":"(fn [b]\n((fn c [n d]\n\t(if (< n (count d)) \n\t\t(+ (get d n) (* (c (+ n 1) d) 2))\n\t\t0\n\t)\n) 0 ((fn [a]\n\t(read-string (clojure.string/replace (str(into [] a)) #\"\\\\\" \"\"))\n) (reverse b)))\n)","user":"5710e574e4b09c608db7043b"},{"problem":122,"code":"(fn [binstr]\n  (reduce + (map #(if (= %1 \\1) %2 0)\n                 (reverse binstr)\n                 (iterate #(* 2 %) 1))))","user":"55d0e76ae4b0e31453f64a40"},{"problem":122,"code":"(fn [x] (int (apply + (map #(* (Math/pow 2 %2) (if (= \\1 %1) 1 0)) (reverse x) (range)))))","user":"57b7de74e4b0fbc9809a27d4"},{"problem":122,"code":"(fn [xs] (int (apply + (map-indexed (fn [idx itm] (* (Math/pow 2 (Math/abs (- (+ 1 idx) (count xs))))  (Character/getNumericValue itm))) xs))))","user":"568c2d96e4b0dcc4269f40af"},{"code":"#(new BigInteger % 2)","problem":122,"user":"4ec74de3535d6d7199dd36df"},{"code":"(fn [s] \n  (loop [s s r 0] \n    (if s \n      (recur (next s) (+ r r (- (int (first s)) 48))) \n      r) ))","problem":122,"user":"4f1fd734535d64f6031464a5"},{"problem":122,"code":"(fn [st]\n  (let [power #(if (= 0 %2) 1 (apply * (take %2 (repeat %1))))\n        bin #(if (= \\0 %1) 0 (power 2 %2))]\n    (apply + (map bin (reverse st) (iterate inc 0)))))","user":"5c7d5a0ce4b0d597f478caab"},{"problem":122,"code":"(fn [s]\n  ((fn binary [rs col]\n    (if (empty? rs) \n      0\n      (let [add (if (= \\0 (first rs))\n                  0\n                  col)]\n        (+ add (binary (rest rs) (* 2 col))))))\n  (reverse (seq s)) 1))","user":"53c1ce3ee4b00fb29b221268"},{"problem":122,"code":"(fn [x] (apply + 0 (map #(* (- (int %1) 48) %2) (reverse x) (iterate #(* 2 %) 1))))","user":"56c70cc2e4b0ed865f9758b5"},{"problem":122,"code":"(fn [input_str]\n    (loop [remaining input_str\n           multiplier 1\n           total 0]\n      (if (empty? remaining)\n        total\n        (if (= \\0 (last remaining))\n          (recur (butlast remaining) (* 2 multiplier) total)\n          (recur (butlast remaining) (* 2 multiplier) (+ total multiplier))))))","user":"592ac17ae4b072a2710fcf26"},{"problem":122,"code":"#(reduce (fn [n bit] (+ (bit-shift-left n 1) (read-string (str bit))))  0  %)","user":"53a739b0e4b0ef122a8689d0"},{"problem":122,"code":"(fn binary [st]\n  (loop [s (clojure.string/split st #\"\") num 0]\n    (if (empty? s) num\n      (recur (rest s) (if (= (first s) \"1\") (+ num ((fn pow2 [n]\n  (if (= n 0) 1\n    (* 2 (pow2 (- n 1))))) (- (count s) 1))) num)))))","user":"558378dce4b05c286339e115"},{"code":"(fn [binar]\n   (loop [result 0 index 0]\n     (if (= index (count binar))\n       (int result)\n       (recur (+ result (* (- (int (get binar index)) 48) (Math/pow 2 (- (count binar) index 1)))) (inc index))\n       )   \n   )\n   )","problem":122,"user":"5106dc1be4b01150e115ebf0"},{"code":"reduce #(+ (* 2 %1) (if (= \\1 %2) 1 0)) 0","problem":122,"user":"4fedd993e4b0198f34b063bc"},{"code":"(fn [bins]\n  (Integer/parseInt bins 2))","problem":122,"user":"520612a7e4b0bf4f1882c81c"},{"problem":122,"code":"(fn [digits]\n  (reduce + (map (fn [d n] (if (= d \\1) n 0))\n                 (reverse digits)\n                 (iterate (partial * 2) 1))))","user":"5136f659e4b04059df19f2fd"},{"problem":122,"code":"(fn bin [s] (if (empty? s) 0 (+ (* 2 (bin (drop-last s))) (- (int (last s)) (int \\0)))))","user":"56dc3dbbe4b0ea9b8538f81a"},{"code":"(fn [string]\n  (reduce\n   (fn [sofar bit]\n     (+ (* 2 sofar) (if (= bit \\0) 0 1)))\n   0\n   (seq string)))","problem":122,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":122,"code":"#(reduce + 0 (map-indexed \n              (fn [n item] \n                (if (= item \\0) 0 \n                  (int (Math/pow 2 n)))) \n              (reverse %)))","user":"59e4e3cbe4b08badc2a0c54a"},{"problem":122,"code":"#(apply + (map-indexed (fn [idx it]  (if (= \\1 it) (reduce * 1 (repeat idx 2))  0)) (reverse %)))","user":"5957cc41e4b066ee0a44af76"},{"problem":122,"code":"(fn parse-binary\n  ([n] (parse-binary (reverse n) 1 0))\n  ([n base acc]\n   (if (empty? n)\n     acc\n     (if (= \\1 (first n))\n       (recur (rest n) (* 2 base) (+ base acc))\n       (recur (rest n) (* 2 base) acc)))))","user":"54125eeee4b01498b1a719d3"},{"code":"(fn [s]\n  (reduce (fn [n [k v]]\n            (if (= v \\1) (bit-set n k) n)) 0\n          (zipmap (range (count s)) (reverse s))))","problem":122,"user":"4eb0a757535d7eef3080733d"},{"code":"#(reduce +\n         (map-indexed\n          (fn [idx itm] (* (int (Math/pow 2 idx)) itm))\n          (map (fn [c] (- (int c) (int \\0))) (reverse %))))","problem":122,"user":"52470d42e4b05ef8e38e6350"},{"code":"(fn [s]\r\n  (loop [s s t 0]\r\n    (if (empty? s)\r\n      t\r\n      (recur (rest s) (+ (* 2 t) (if (= (first s) \\1) 1 0))))))","problem":122,"user":"507437c2e4b054001656acd0"},{"problem":122,"code":";; manual approach\n;; (defn binary->num-manual [binary-n]\n;; \t  (reduce (fn [acc v] (+ (Integer/parseInt (str v)) (* 2 acc)))\n\n;; bit of cheating with built-in function Integer/parseInt\n(fn binary->num [binary-n]\n  (Integer/parseInt binary-n 2))","user":"551bdefde4b07993ea3788d7"},{"code":"(fn [bin] (reduce + (map \n                         #(* %1 %2) \n                         (reverse (map #(- (int %) 48) bin)) \n                         (iterate (partial * 2) 1))))","problem":122,"user":"4fe8da4de4b0547ebccb2429"},{"code":"(fn [b] (Integer/parseInt b 2))","problem":122,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn read-bin [x]\n  (if (seq x)\n    (if (= (first x) \\0)\n      (read-bin (rest x))\n      (+ (bit-shift-left 1 (- (count x) 1)) (read-bin (rest x))))\n    0))","problem":122,"user":"52af7a5ce4b0c58976d9acbd"},{"problem":122,"code":"(fn [s]\n  (loop [l (->> (clojure.string/split s #\"\")\n                rest\n                (map #(Integer/parseInt %))\n                reverse)\n         res []\n         pow 0]\n    (if (empty? l)\n      (int (reduce + res))\n      (recur (rest l)\n             (conj res (* (Math/pow 2 pow) (first l)))\n             (inc pow)))))","user":"532bce35e4b09d4e7a9b5536"},{"code":"#(. Integer parseInt % 2)","problem":122,"user":"4e49badd535dc968683fc4c9"},{"code":"#(Long/valueOf % 2)","problem":122,"user":"4dbb0b6c535d1e037afb21b0"},{"code":"#(reduce (fn [x y](+ (* x 2) y)) 0 (map (fn[x](Integer. (str x))) (vec %)))","problem":122,"user":"4ed2dd98535d44c135fd68e2"},{"problem":122,"code":"(fn read-binary\n  [binary]\n  (loop [[h & t] binary\n         accum 0]\n    (let [new-accum (if (= h \\0)\n                        (* accum 2)\n                        (+ (* accum 2) 1))]\n      (if (nil? t)\n          new-accum\n          (recur t new-accum)))))","user":"58152157e4b0f478707a0631"},{"problem":122,"code":"(fn [bin]\n  (reduce + 0 (map\n   (fn [a b] \n     (if (= \\1 a) \n      b\n      0))\n   (reverse bin)\n   (iterate #(* 2 %) 1))))","user":"5a75da49e4b0512ff01cdacf"},{"code":"(fn [s]\n  (loop [a 0 p 1 [d & r] (reverse s)]\n    (condp = d\n      \\0 (recur a (* 2 p) r)\n      \\1 (recur (+ a p) (* 2 p) r)\n      a)))","problem":122,"user":"4ddbdc1b535d02782fcbe9fd"},{"code":"(fn [s]\n  (loop [v    0\n         acc  0\n         feed (apply str (reverse s))]\n    (if (empty? feed)\n      (int acc)\n      (recur (inc v)\n             (+ acc (* (Integer/parseInt (str (first feed))) (Math/pow 2 v)))\n             (apply str (rest feed))))))","problem":122,"user":"50b9d991e4b04934c218a4a9"},{"code":"#(reduce + (map-indexed \n               (fn [indx itm]\n                   (bit-shift-left (- (int itm) (int \\0)) indx)\n                )\n                  (apply str (reverse %))\n               \n             )\n          )","problem":122,"user":"5143824ae4b0b4fb4ace5f36"},{"problem":122,"code":"(fn [s]\n  (reduce + \n    (map *\n      (map #(* (if (= % \\1) 1 0)) s)\n      (map #(apply * (repeat % 2)) (range (dec (count s)) -1 -1)))))","user":"60882700e4b0ae75613dcedf"},{"problem":122,"code":"(fn readBinary [x] (int (reduce + (reduce-kv (fn [m k v] (conj m (if (= v \\0) 0 (Math/pow 2 k)))) []  (into [] (reverse (seq x)))))))","user":"56427910e4b08d4f616f5f19"},{"problem":122,"code":"(fn convert [s]\n  (let [count-seq (fn [j]\n    (map\n      (fn [i]\n          (if (= (nth j i) 1)\n              (int (Math/pow 2 i))\n              0)) (range (count j))))]\n    (->>\n      (map (fn [x] (- (int x) 48)) s)\n      reverse\n      count-seq\n      (reduce +))))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":122,"code":"(fn [x] (apply + (map-indexed #(* (int (Math/pow 2 %1)) (mod (int %2) 2)) (reverse x))))","user":"5a244240e4b0ff51aa4b32e9"},{"problem":122,"code":"(fn to-bin [x](Integer/parseInt x 2))","user":"59e12c94e4b08badc2a0c509"},{"problem":122,"code":"(fn f[s]\n  (->> s\n    (map int)\n    (map #(- % (int \\0)))\n    (reduce #(+ (* 2 %) %2))))","user":"5a8aa992e4b05369db4d24d8"},{"problem":122,"code":"(fn [s] (reduce + 0 (map (fn [a b] (if (= a \"1\") b 0)) (reverse (re-seq #\"[01]\" s)) (iterate #(bit-shift-left % 1) 1))))","user":"55b0f5bfe4b002ce9d5cbc28"},{"problem":122,"code":"(fn [bn] (. Integer parseInt bn 2))","user":"5a1d0381e4b0ff51aa4b3255"},{"code":"(fn [x] (reduce + (map #(if (= \\1 %1) %2 0) \n                       (reverse x) \n                       (iterate #(* 2 %) 1))))","problem":122,"user":"50f2e5cee4b0ec8ee6fa8643"},{"problem":122,"code":"(fn [cs]\n  (let [digits (map #(read-string (str %)) cs)]\n    (int (apply + (map-indexed #(* %2 (Math/pow 2 %)) (reverse digits))))))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":122,"code":"(fn [binary]\n  (apply + (map (fn [idx]\n                  (* (if (= \\1 (nth (into [] (reverse binary)) idx))\n                       1 0)\n                     (apply * (repeat idx 2))))\n                (range (count binary)))))","user":"5591cc56e4b0604b3f94d582"},{"code":"(fn [x] (reduce + (map * \n                       (map read-string (map str (reverse (vec x)))) \n                       (iterate #(bit-shift-left % 1) 1)\n                       ;;(map #('clojure.math.numeric-tower/expt 2 %1) (take (count x) (range)))\n                  )))","problem":122,"user":"510c123be4b078ea7192110e"},{"problem":122,"code":"#(reduce (fn [a x] (+ (* a 2) x)) 0 (map (comp read-string str) %))","user":"54e2a779e4b024c67c0cf7d3"},{"problem":122,"code":"(fn [x]\n  ((fn convert [values i]\n     (if (nil? (first values))\n       0\n       (+ (* (first values) i) (convert (rest values) (* i 2)))))\n   (reverse (map #(Character/digit % 2) (seq x))) 1))","user":"553c4614e4b09218d5f45014"},{"problem":122,"code":"(fn [s] (reduce (fn [m c] (+ (* 2 m) (if (= c \\1) 1 0))) 0 s))","user":"549375e4e4b0b312c081ff4e"},{"problem":122,"code":"(fn [s](reduce + (map * (map #(Integer. (str %)) (reverse s)) (iterate #(* 2 %) 1))))","user":"546280d8e4b01be26fd746b0"},{"code":"(fn [x] \n   (loop [s (reverse(map #(Integer. (.toString %)) x)) n 0 rslt 0]\n     (if (empty? s) (int rslt)\n       (recur (rest s) (inc n) (+ rslt (* (Math/pow 2 n) (first s)))))\n     \n     ))","problem":122,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":122,"code":"(fn [number]\n  (let [indexed (map-indexed (fn [idx elem] [idx elem]) (reverse number))\n        pow (fn [x] (reduce * (repeat x 2)))]\n    (reduce (fn [acc [exp n]] (+ acc (* (- (int n) 48) (pow exp)))) \n            0 indexed)))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":122,"code":"(fn [string]\n  (letfn [(exp [x n]\n            (if (zero? n)\n              1\n              (* x (exp x (dec n)))))]\n    (apply +\n           (map (fn [character times]\n                  (* (- (int character) (int \\0))\n                     (exp 2 times)))\n                (reverse (seq string))\n                (range (count string))))))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn [string] (let [digits (reduce conj '() string)\n        digits-zip (map vector digits (iterate #(* 2 %) 1))]\n    (reduce\n      (fn [result [digit mult]]\n        (if (= digit \\1)\n          (+ result mult)\n          result))\n      0 digits-zip)))","problem":122,"user":"53070615e4b02e821686979e"},{"code":"(fn [xs]\n  (let [digits (fn [s]\n                 (map (zipmap \"0123456789\" (range 10)) s))\n        powers (fn [n]\n                 (reverse (map #(Math/round (Math/pow 2 %)) (range 0 n))))\n        sum (fn [ds]\n              (apply + (map * (powers (count ds)) ds)))]\n    (sum (digits xs))))","problem":122,"user":"5160195ae4b0e2be8aa20be3"},{"problem":122,"code":"(fn convert-binary\n  ([binary-num]\n   (convert-binary (count binary-num) 0 0 binary-num))\n  ([number-of-indexes-to-process current-index total binary-num]\n   (if (= number-of-indexes-to-process 0)\n     total\n     (recur\n       (dec number-of-indexes-to-process)\n       (inc current-index)\n       (+ total (* (.pow (BigInteger. \"2\") current-index) (Integer/parseInt (str (nth binary-num (dec number-of-indexes-to-process))))))\n       binary-num))))","user":"60522feae4b0af2ba86d5a0a"},{"problem":122,"code":"#(reduce + (map (fn [c, e] (reduce * (- (int c) 48) (repeat e 2) )) (reverse %) (range)))","user":"60689984e4b069485764dde6"},{"code":"(fn [b] (let [cols (iterate (fn [n] (* 2 n)) 1) rb (reverse b) f #(cond (= % \\0) 0 (= % \\1) %2)]\n  (reduce + 0 (map f rb cols))))","problem":122,"user":"4e8a880b535d65386fec210d"},{"problem":122,"code":"(fn str-to-binary[string]\n  (read-string (str \"2r\" string)))","user":"60c91f48e4b0e0fa5f1b4304"},{"problem":122,"code":"(fn [binary]\n  (let [binary-seq (map #(- (int %) (int \\0)) (seq binary)),\n        binary-base (reverse (take (count binary-seq) (iterate #(* 2 %) 1)))]\n    (apply + (map * binary-seq binary-base))\n    )\n  )","user":"55fe7e15e4b00f4cabc57651"},{"problem":122,"code":"#(loop [input (reverse %) idx 0 result 0]\n    (if (or (empty? input))\n      result\n      (recur (rest input) (inc idx) \n        (if (= \\0 (first input))\n          result\n          (+ result (reduce * (repeat idx 2)))))))","user":"5582dfb6e4b05c286339e10d"},{"problem":122,"code":"(fn [s]\n  (loop [sum 0 ind (dec (count s)) s s]\n    (let [digit (-> s first str Integer/parseInt)\n          v (if (= digit 1) (int (Math/pow 2 ind)) 0)\n          newSum (+ sum v)]\n      (if (empty? (rest s))\n        newSum\n        (recur newSum (dec ind) (rest s))))))","user":"52d38c51e4b099d49816f0c5"},{"code":"(fn [binary-string]\n  (let [binary-digits (map #(if (= % \\1) 1 0) binary-string)\n        shift-and-add (fn [result x] (+ x (* 2 result)))]\n    (reduce shift-and-add 0 binary-digits)))","problem":122,"user":"4daf36c2edd6309eace4d175"},{"problem":122,"code":"(fn str-to-bin [s] (loop [t 0 e 1 q (reverse s)]\n                     (if (nil? q) t\n                         (recur (+ t (* e (- (int (first q)) 48))) (* e 2) (next q)))))","user":"5e8ce2fee4b0cb0169546328"},{"problem":122,"code":"(fn [num] (Integer/parseInt num 2))","user":"53e8e42ce4b036ad0777e48e"},{"code":"(fn conv \n  ([src] (conv (reverse src) 0))\n  ([src step] \n   (let [[x & xs] src\n         power-of-two (iterate (partial * 2) 1)]\n     (if (empty? src)\n       0\n       (+ (* (- (int x) 48) (nth power-of-two step)) (conv xs (inc step)))))))","problem":122,"user":"5225a0f5e4b01819a2de430e"},{"problem":122,"code":"(fn [bits]\n  (let [exp (range (count bits))\n        two-nth #(reduce * 1 (repeat % 2))\n        bit-val #(- (int %) 48)\n        sum-bit (fn [total bit exp] (+ total (* (bit-val bit) (two-nth exp))))]\n    (loop [[bit & bits] (reverse bits) [exp & exps] exp result 0]\n      (if (empty? bits)\n        (sum-bit result bit exp)\n        (recur bits exps (sum-bit result bit exp))))))","user":"4f7207d3e4b07046d9f4f019"},{"code":"(fn [xs]  \n  (reduce +\n    (map #(* %1 %2)\n      (map #(- (int %) (int \\0)) (reverse xs))\n      (iterate #(* 2 %) 1))))","problem":122,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":122,"code":"#((fn f [s exp sum]\n  (if (empty? s)\n    sum\n    (f (rest s) (* exp 2)\n       (if (= (first s) \\1) (+ sum exp) sum))))\n  (reverse %) 1 0)","user":"548b7db8e4b0e286459a11fd"},{"code":"(fn [a] (reduce + (map-indexed #(* (- (int %2) 48) (int (Math/pow 2 %1))) (reverse (seq a)))))","problem":122,"user":"50112acee4b0d82cfac69f4c"},{"code":"; Sure you can use one of the Java parseInt approaches to do this in one line, but I wanted to\n; practice my clojure\n(fn [s]\n  (let [headings (map #(apply * (repeat % 2)) (reverse (range (count s))))\n        digits (map #(if (= \\1 %) 1 0) s) ]\n    (reduce + (map * headings digits)) )\n  )","problem":122,"user":"5201ff99e4b0b2e020a18f26"},{"problem":122,"code":"(fn [s]\n  (reduce + (map-indexed\n             (fn [i bit]\n               (if (= bit \\1)\n                 (reduce * (repeat i 2))\n                 0))\n             (reverse s))))","user":"56f006f4e4b04a395b9a046a"},{"problem":122,"code":"(fn [s]\n  (let [digits (map #(- (int %) 48) s)]\n    (reduce + (map-indexed #(int (* %2 (Math/pow 2 %1))) (reverse digits)))\n    ))","user":"52dc7344e4b09f7907dd13cf"},{"code":"(fn [binaryStr]\n  (reduce \n    (fn [v x] (+ (* 2 v) x))\n    (map #(Integer/parseInt (str %1)) binaryStr)))","problem":122,"user":"50812debe4b01a93d3f38e4c"},{"problem":122,"code":"(fn binary-str->decimal\n  [s]\n  (let [m {\\1 1 \\0 0}]\n    ((reduce (fn [accum c] (assoc\n                            accum\n                            :mul (* 2 (accum :mul))\n                            :val (+ (accum :val) (* (accum :mul) (m c)))))\n             {:mul 1 :val 0}\n             (reverse s)) :val)))","user":"5c222b7de4b07e362c230588"},{"problem":122,"code":"(fn [in]\n   (Integer/parseInt in 2))","user":"546b24a0e4b00cfc9eacc166"},{"code":"#(loop [n 0 r %]\n    (if-let [[f & r] r]\n      (recur (+ (* n 2) (- (int f) 48)) r)\n      n))","problem":122,"user":"4e8df08f535d65386fec213e"},{"problem":122,"code":"#(\n  (fn rec [s n ret]\n    (if (empty? s)\n      ret\n      (if (= (first s) \\1) \n        (rec (rest s) (dec n) (+ ret (reduce * (take n (cycle [2])))))\n        (rec (rest s) (dec n) ret)\n      ) \n    )\n  ) % (dec (count %)) 0\n)","user":"545537c1e4b0e397800069dd"},{"code":"(fn [s] (reduce #(if (= \\0 %2) (* 2 %1) (+ 1 (* 2 %1)) ) 0 s))","problem":122,"user":"4fb510b5e4b081705acca2b8"},{"code":"(fn [b-str]\n  (reduce +\n    (map * (iterate (partial * 2) 1)\n            (map #(Integer/parseInt\n                    (str %)) (reverse b-str)))))","problem":122,"user":"4dd62278535d2dad7130b5c7"},{"problem":122,"code":"(fn [s] (apply + (keep-indexed #(when (= \\1 %2) (reduce * (repeat %1 2))) (reverse s))))","user":"5b64370ae4b0c6492753e73c"},{"code":"(fn bin [s]\n  (->>\n    s\n    (map (comp read-string str))\n    reverse\n    (map-indexed #(if (= 1 %2) (bit-set 0 %1) 0))\n    (apply +)))","problem":122,"user":"50366589e4b0fbe0a74d26c3"},{"problem":122,"code":"(fn read-bin-num [string]\n\t(Integer/parseInt string 2))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn [s] (java.lang.Integer/parseInt s 2 ))","problem":122,"user":"52fba50ce4b047fd5583700d"},{"problem":122,"code":"(fn f\n  [lst]\n  (reduce + (map #(let [n (- (int (nth % 1)) 48)\n                        p (first %)]\n                    (if (= 1 n)\n                      (if (= 0 p)\n                        1\n                        (last\n                          (take (+ 1 p)\n                                (iterate\n                                  (fn [x] (* 2 x)) 1))))\n                      0)) (map-indexed vector (reverse lst)))))","user":"59e778aae4b0249b72820716"},{"code":"(fn [bin-str]\n (reduce (fn [res [idx char]]\n           (if (= char \\1)\n             (int (+ res (Math/pow 2 idx)))\n             res)) \n         0 \n         (map-indexed #(list %1 %2) \n                      (reverse bin-str))))","problem":122,"user":"501fa1aee4b0cb6ebc0a42eb"},{"code":"(fn \n\t[s] \n\t\t(loop [s s d 0] \n\t\t\t(if s\n\t\t\t\t(recur (next s) (+ d (* (Math/pow 2 (- (count s) 1)) (- (int (first (vec s))) 48)))) \n\t\t\t\t(int d))))","problem":122,"user":"4f047542535dcb61093f6bc7"},{"problem":122,"code":"(fn [string] \n  (reduce +  \n     (map #(if (= \\1 (second %)) \n             (reduce * (repeat (first %) 2)) \n             0) \n          (vec (map-indexed (fn [idx itm] [idx itm]) (reverse string))))))","user":"54c9571ee4b045293a27f66b"},{"code":"#(->> %\n      (re-seq #\".\")\n      (map read-string)\n      reverse\n      (map * (iterate (fn [x] (* 2 x)) 1))\n      (reduce +))","problem":122,"user":"519ef784e4b087743fad2198"},{"code":"(fn f [s] (if (empty? s) 0\n            (+ (* 2 (f (butlast s)))\n               ({\\0 0 \\1 1} (last s)))))","problem":122,"user":"510acd6ee4b078ea719210f4"},{"code":"(fn [xs] (int (apply + (map #(* %1 (Math/pow 2 %2)) \n                        (map #(if (= % \\0) 0 1) xs)\n                        (reverse (range (count xs)))))))","problem":122,"user":"5097ea89e4b087ccf61a7af4"},{"problem":122,"code":"(fn convert [str-binary]\n  (loop [value []\n         binary-seq (reverse (map #(- % 48) (map int (seq str-binary))))\n         cnt 0]\n    (if (empty? binary-seq)\n      (reduce + value)\n      (recur\n        (conj value (* (bigint (Math/pow 2 cnt)) (first binary-seq)))\n        (rest binary-seq)\n        (inc cnt)))))","user":"5dba063ee4b010eb3c36cd5c"},{"problem":122,"code":"(fn [s]\n    (->> (reverse s)\n         (map #(Integer/parseInt (str %)))\n         (map * (iterate #(* 2 %) 1))\n         (reduce +)))","user":"5c995fa4e4b048ec896c5a96"},{"code":"(fn [binary-string]\n    (loop [bs binary-string\n           v 0]\n      (if (empty? bs)\n        v\n        (recur (rest bs) (+ v (if (= (first bs) \\1)\n                                (reduce * (repeat (dec (count bs)) 2))\n                                0))))))","problem":122,"user":"53487737e4b084c2834f4a59"},{"problem":122,"code":"#(reduce +  (map * (reverse (map read-string (map str %))) (iterate (partial * 2) 1)))","user":"512b07f7e4b078b06821febb"},{"code":"(fn [number]\n  (loop [s number\n         a 0]\n    (if (empty? s)\n      a\n      (recur (rest s)\n             (+ (* a 2)\n                (if (= (first s) \\1)\n                  1\n                  0))))))","problem":122,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":122,"code":"(fn binary\n  [number]\n  (loop [number (reverse number) sum 0 index 1]\n    (if (empty? number)\n      sum\n      (recur (rest number) (+ sum (* (Integer. (re-find  #\"\\d+\" (str (first number)))) index)) (* index 2)))))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":122,"code":"(fn [digits]\n  (loop [[d & ds] digits\n         result   0]\n    (if (= nil d) result\n      (let [value (- (int d) (int \\0))]\n        (recur ds (+ (bit-shift-left result 1) value))))))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":122,"code":"(fn btn [bn] (loop [s bn n 0]\n  (if (first s) (recur (rest s) (+ (* 2 n) (if (= (first s) \\1) 1 0))) n)))","user":"53e745a1e4b036ad0777e479"},{"problem":122,"code":"(fn [coll]\n  (reduce #(+ (* %1 2) %2) (map {\\1 1 \\0 0}  coll)))","user":"580a0783e4b0a837a8b30d2c"},{"problem":122,"code":"(fn [coll] \n    (let [c (count coll)\n          xs (reverse (map (comp read-string str) coll))] \n      (reduce + (map (fn [[x y]] (* x y)) (partition 2 (interleave xs (take c (iterate (partial * 2) 1))))))))","user":"5505ceb3e4b086ebe8a79c8b"},{"code":"(fn [s] \n  (apply + \n    (map #(* % (- (int %2) 48))        \n         (iterate #(* 2 %) 1)\n         (reverse s)\n    )))","problem":122,"user":"4f1d1d95535d64f603146488"},{"problem":122,"code":"(fn [str] \n\n   (reduce #(+ (* 2 %1) %2) 0 (map read-string (rest (clojure.string/split str #\"\")))) \n   \n)","user":"54a7d707e4b09f271ff37c9b"},{"problem":122,"code":"(fn[x] (Integer/parseInt x 2))","user":"55d7312ee4b0e31453f64a9f"},{"problem":122,"code":"(fn [s]\n  (reduce #(+ (* 2 %1) %2) \n          (map #(- (int %) (int \\0)) (seq s))))","user":"559b55d6e4b066d22e731f54"},{"problem":122,"code":"(fn read-binary\n  [[x & xs :as coll]]\n  (let [exp (fn exp [a m]\n              (if (= m 0) 1 (* a (exp a (dec m)))))\n        counter (dec (count coll))]\n  (cond \n    (and x (= x \\1)) (+ (exp 2 counter)\n                        (read-binary xs))\n    (and x (= x \\0)) (read-binary xs)\n    :else 0)))","user":"550d9452e4b06e50f9beb15d"},{"problem":122,"code":"(fn [s] (reduce\n         +\n         (map\n          #(* %1 (reduce * (repeat %2 2)))\n          (reverse (map #(Character/digit % 10) (seq s)))\n          (range (count s)))))","user":"5b4b4052e4b02d533a91bc9a"},{"code":"(fn [bstr] (->> bstr\n                 reverse\n                 (map-indexed (fn [i c] (* (Character/digit c 2) (Math/pow 2 i))))\n                 (reduce +)\n                 int))","problem":122,"user":"5392b849e4b0b51d73faaeb1"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [accu c]\n            (case c\n              \\0 (* 2 accu)\n              \\1 (+ (* 2 accu) 1)))\n          0\n          s))","user":"59225498e4b09b4ee5954c8c"},{"code":"(fn [s]\n  (apply + (map (fn [e] (((fn [x] (fn [i] (* i (apply * (replicate x 2))))) (.getKey e)) (.getValue e))) (zipmap (range) (map (fn [n] (- (int n) 48)) (char-array (reverse s)) ))) ))","problem":122,"user":"5272669de4b03e8d9a4a742e"},{"problem":122,"code":"(fn bin [s]\n  (read-string (str \"2r\" s)))","user":"55d68726e4b0e31453f64a99"},{"code":"(fn [b]\n  (reduce +\n    (map \n      (fn [idx] (* \n        (- (int (second idx)) 48)\n        (Math/pow 2 (first idx))))\n      (map-indexed vector (reverse b)\n))\n\n))","problem":122,"user":"4dd579b5535dae65d5c462ea"},{"code":"(fn [bs] (reduce +\n                 (map (fn [n b] (* n (Integer/parseInt (str b))))\n                      (map (fn [n] (int (Math/pow 2 n))) (iterate inc 0))\n                      (reverse bs))))","problem":122,"user":"5213d7aae4b0961f15ac4d72"},{"problem":122,"code":"(fn binary->int\n  [stream]\n  (letfn [(pow [x n] (reduce * 1 (repeat n x)))]\n    (apply +\n      (map (fn [b p] (if (= b \\1) (pow 2 p) 0)) \n           (vec stream) (reverse (range 0 (count stream)))))))","user":"5553b729e4b0deb715856e05"},{"problem":122,"code":"(fn read-binary [st]\n  (reduce + (map\n    (fn [exponent character]\n      (* (if (= character \\0) 0 1) (int (Math/pow 2 exponent)))\n    )\n    (range (dec (count st)) -1 -1)\n    st\n  ))\n)","user":"56393681e4b0bfe05bf117f2"},{"problem":122,"code":"(fn [s]\n  (let [x (reverse (map #(Character/digit % 10) (flatten (partition-by identity s))))]\n  (reduce + (map-indexed (fn [i b] (apply * b (take i (repeat 2)))) x))))","user":"572a856be4b0f4d77e65123b"},{"code":"#(reduce (fn [a x] (let [r (* 2 a)] (if (= x \\1) (+ r 1) r))) 0 %)","problem":122,"user":"4ec5d40d535d6d7199dd36b9"},{"problem":122,"code":"(fn [s] \n  (reduce \n   (fn [a x] (+ \n              (* 2 a) \n              (- (int x) (int \\0))\n              ))\n   0 s))","user":"5e6e6537e4b04a83ad7cd29a"},{"problem":122,"code":"(fn from-binary-string [str]\n  (reduce +\n          (map-indexed\n            (fn [idx, item]\n              (if (= item 1)\n                (reduce * (repeat idx 2))\n                0))\n            (reduce\n              (fn [col value] (conj col (Character/getNumericValue value)))\n              []\n              (clojure.string/reverse str)))))","user":"5d0859fbe4b0cc9c91588208"},{"code":"(fn [s]\n  (reduce #(+ (* 2 %1) %2) (map {\\1 1,\\0 0} s)))","problem":122,"user":"4f62b29ce4b0defedf855fd9"},{"problem":122,"code":"(fn [coll] (reduce + (map #({\\1 %} %2 0) (iterate #(* 2 %) 1) (reverse coll))))","user":"577fa91ee4b0d36ec5835e6a"},{"problem":122,"code":"(fn [binary]\n  (->> binary\n       reverse\n       (map-indexed (fn [i digit]\n                      (case digit\n                        \\0 0\n                        \\1 (reduce * (repeat i 2))\n                      )\n                    )\n                    )\n       (reduce +)\n   )\n  )","user":"6004c750e4b074f607df6645"},{"problem":122,"code":";(fn [s]\n;  (let [numeric-list (iterate #(* 2 %) 1)\n;        binary-list (reverse (map #(Integer/parseInt (str %)) (seq s)))]\n;    (apply + (map * numeric-list binary-list))\n;    ))\n\n#(Integer/parseInt % 2)","user":"57e139f6e4b0bfb2137f5a6c"},{"problem":122,"code":"; i don't feel like Integer/parseInt is in the spirit of the thing...\n(fn [b] \n  (loop [total 0\n         [head & tail] (map {\\0 0 \\1 1} (reverse b))\n         magnitude 1]\n    (if (= head nil)\n      total\n      (recur (+ total (* head magnitude)) \n             tail \n             (* 2 magnitude)))))","user":"54febf4be4b07d26eda61d45"},{"code":"#(loop [s (reverse %)\n        a 1\n        acc 0]\n   (if (seq s)\n     (let [d (* a (-> s first str Integer/parseInt))]\n       (recur (rest s) (* a 2) (+ acc d)))\n     acc))","problem":122,"user":"51352899e4b082aeb3a3f03b"},{"problem":122,"code":"#(reduce + (map (fn [x y] (if (= x \\1) y 0)) (reverse %) (iterate (partial * 2) 1)))","user":"52a267c6e4b04e0c58e87bef"},{"problem":122,"code":"(fn [s] (apply + \n               (map * \n                    (map #(Character/digit % 2) (reverse s))\n                    (iterate #(* 2 %) 1)\n                )\n         )\n )","user":"57642916e4b0994c1922fbee"},{"problem":122,"code":"#(reduce (fn [x y] (+ (* x 2) (read-string (str y)))) 0 %)","user":"58b989dbe4b0888cdc949ccd"},{"code":"(fn [n]\n  ((fn bin [x]\n    (if (empty? x)\n      0\n      (let [f (if (= (first x) \\0) 0 1)\n            r (bin (rest x))]\n        (+ f (* 2 r))))) (reverse n)))","problem":122,"user":"4f559d2ce4b0a7574ea71808"},{"problem":122,"code":"(fn bstoi [s]\n  (cond (string? s) (bstoi (seq s))\n        (empty? s) 0\n        :else (->> (bstoi (drop-last s))\n                   (* 2)\n                   (+ (read-string (str (last s)))))))","user":"57458b82e4b009280f9f2b4e"},{"code":"(fn r [x]\n  (let [acc (atom 0)\n        x1 (reduce (fn [acc e]\n                     (conj acc (Integer/parseInt (str \"\" e))))\n                   [] x)]\n    (doseq [i (range (count x1))]\n      (swap! acc (fn [_](+ @acc (* (get (vec (reverse x1)) i) (Math/pow 2 i))))))\n    (int @acc)))","problem":122,"user":"52d6664be4b09f7907dd1359"},{"problem":122,"code":"(fn binary\n  [bstr]\n  (reduce + 0 (filter (comp not nil?) (map #(if (= \\1 %1) %2) (reverse bstr) (iterate #(* 2 %) 1)))))","user":"5609d328e4b05f002753deee"},{"code":"(fn bin[binary]\r\n      (reduce +(map * \r\n        (reverse(map(comp read-string str) binary)) \r\n        (iterate #(* 2 %) 1))))","problem":122,"user":"4edeac6b535d10e5ff6f533a"},{"code":"(fn [l]\n    (reduce\n     (fn [s r] (+ (* s 2) (- (int r) 48)))\n     0\n     l))","problem":122,"user":"4fc8c8d8e4b0ee37620e183b"},{"problem":122,"code":"reduce #(+ (* 2 %) (bigint (str %2))) 0","user":"554680cbe4b0a04f7929953e"},{"problem":122,"code":"(fn [s] (reduce + 0 (map-indexed (fn [idx i]\n                                    (if (= \\1 i) (int (Math/pow 2 idx)) 0))\n                                  (reverse s))))","user":"5d5166d9e4b0776584bd6f5e"},{"problem":122,"code":"#(reduce + (map \n            (fn [a] (if (= \\1 (second a)) \n                      (reduce * (repeat (first a) 2))\n                      0))\n              (map-indexed list (reverse %))\n           )\n)","user":"4fc8f671e4b0ee37620e1840"},{"problem":122,"code":"#(reduce (fn [acc kv] (+ acc (apply * kv))) 0\n  (map vector \n    (map (fn [v] (- (int v) (int \\0))) (reverse %))\n    (iterate (fn [v] (* 2 v)) 1)))","user":"55c20bd0e4b0e31453f64972"},{"problem":122,"code":"(fn [s]\n  (let [digits (map #(- (int %) (int \\0)) s)\n        len (dec (count digits))\n        powers (take len (iterate (partial * 2) 2))]\n    (reduce + (map #(* %1 %2)\n                   (reverse digits)\n                   (concat [1] powers)))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":122,"code":"(fn [x]\n(reduce +\n  (map #(if (= \\1 %1) %2 0) (reverse x)\n  (iterate #(* 2 %) 1)))\n)","user":"593f95d8e4b069cdc2982be3"},{"problem":122,"code":"(fn binary-string->int\n  ([binary-string] (binary-string->int binary-string 0))\n  ([binary-string acc]\n   ;; pow-2\n   (let [pow-2 (fn [n] (reduce * (repeat n 2)))\n         ;; gets next substring that starts with 1\n         get-next (fn [string] (drop-while #(= \\0 %) (rest string)))]\n         (if-not (.contains binary-string \"1\")\n           acc\n           (do\n             (let [n (count (rest binary-string))]\n               (recur (apply str (get-next binary-string)) (+ acc (pow-2 n)))))))))","user":"5b477969e4b02d533a91bc6f"},{"problem":122,"code":"(fn [value]\n  (->> (for [idx (range (count value))\n              :when (= (get value (- (count value) (inc idx))) \\1)]\n        (apply * (repeat idx 2)))\n       (reduce + 0)))","user":"594c0bd7e4b07ddc2dafae56"},{"code":"(fn [s]\n  (loop [c (reverse s)\n         rang (range (count s))\n         acc 0]\n    (if (empty? c)\n      (int acc)\n      (let [[f & r] c\n            v (Integer/parseInt (str f))]\n        (if (zero? v)\n          (recur r (rest rang) acc)\n          (recur r (rest rang) (+ acc (Math/pow 2 (first rang)))))))))","problem":122,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"problem":122,"code":"#(reduce (fn [acc c] (+ (* 2 acc) (- (int c) 48))) 0 %)","user":"52f8b86de4b047fd55836fdb"},{"problem":122,"code":"(fn binary\n  [n]\n  (reduce \n  (fn [x y](+ x x (- (int y) 48)))0 n))","user":"5ea3711ae4b00a66d4a9519d"},{"code":"(fn [x]\n\t(int\n\t(reduce +\n\t\t(map #(* % (Math/pow 2 %2))\n\t\t\t(map (comp read-string str) x)\n\t\t\t(reverse (range (count x)))\n\t\t)\n\t))\n)","problem":122,"user":"50b65966e4b0a86f8358ca6c"},{"problem":122,"code":"(fn binstring->base10 [s]\n  (let [parseBin (fn [c] (if (= c \\1) 1 0))\n        twoPower (fn [x] (reduce * (take x (repeat 2))))]\n\n    (reduce +\n            (for [index (range (count s))\n              :let [c (nth (reverse s) index)\n                    d (parseBin c)\n                    mag (twoPower index)]]\n                (* mag d)))))","user":"54468fd3e4b032a45b8693b2"},{"code":"(fn [x] (reduce + (map #(* (read-string (str %)) (Math/pow 2 %2)) (reverse x) (range))))","problem":122,"user":"4db016af838c48654951d9b9"},{"code":"#(reduce (fn [n c] (+ (* 2 n) (if (= c \\0) 0 1))) 0 %)","problem":122,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":122,"code":"(fn [s]\n  (let [numbers (map (fn [x] (- (int x) 48)) s)]\n    (reduce (fn [acc e] (+ (* acc 2) e)) 0 numbers)))","user":"540d5085e4b0addc1aec670e"},{"code":"(fn red [x]\n  (if (empty? x) 0\n  (if (= (last x) \\0) (* 2 (red (butlast x))) (+ 1 (* 2 (red (butlast x)))))))","problem":122,"user":"4f8b20fce4b02e764a0a5178"},{"code":"(fn [x] (->> x reverse (map (comp read-string str)) (map * (reductions (fn [a,b] (* 2 a)) (drop 1 (range)))) (apply +)))","problem":122,"user":"4f3e5e87e4b0e243712b1f83"},{"problem":122,"code":"(fn [string]\n  (loop [result 0, n (count string)]\n    (if (= n 0)\n      result\n      (recur (+ result (reduce * (Character/digit (nth string (- (count string) n)) 10) (repeat (- n 1) 2)))\n             (dec n)))))","user":"5ccf99fbe4b0ccb0619628c8"},{"code":"(fn [s] \n  (reduce + (map-indexed #(if (= \\1 %2) (int (Math/pow 2 %1)) 0)\n                         (reverse s))))","problem":122,"user":"4e5f034b535d8a8b8723a2d9"},{"code":"(fn q122 [bin-str]\n  (int (reduce + (map #(if (= %1 \\1) (Math/pow 2 %2) 0) bin-str (range (- (count bin-str) 1) -1 -1)))))","problem":122,"user":"51780bfce4b0f89a8f53839c"},{"problem":122,"code":"(fn [bin]( letfn [(digitnum [number] (map #(Character/digit % 10) number))]\n           \n           (reduce + (map * (iterate (partial * 2) 1)(digitnum (reverse bin))))))","user":"585fea4de4b0f14aab7c87d0"},{"problem":122,"code":"(fn task122_ [s]\n      (loop [x s, index 0, r 0]\n            (if (empty? x) r (recur\n                               (rest x)\n                               (inc index)\n                               \n                               (+ (bit-shift-left r 1) (if (= (first x) \\1) 1 0 ))\n                              )\n                           )\n            )\n      )","user":"53bcdd41e4b0d9a98559a6c0"},{"code":"(fn [s] \n  (reduce #(({\\0 identity \\1 inc} %2) (* 2 %1)) 0 s))","problem":122,"user":"4f050dec535dcb61093f6bef"},{"code":"#(-> % (Integer/parseInt 2))","problem":122,"user":"4e9fd521535d7eef3080729a"},{"problem":122,"code":"(fn [s] (reduce #(+ (* 2 %1) %2) 0 (map #(condp = % \\1 1 \\0 0) (seq s))))","user":"54edc818e4b024c67c0cf865"},{"problem":122,"code":"#(first (reduce (fn [acc elem] \n                  (let [step (int (Math/pow 2 (second acc)))\n                        sec (inc (second acc))]\n                    (if (= elem \\1)\n                      [(+ (first acc) step) sec]\n                      [(first acc) sec]))) [0 0] (seq (reverse %))))","user":"5a6af090e4b0512ff01cda2d"},{"code":"(fn [s]\n  (reduce\n   (fn [acc digit]\n     (+ (Integer/parseInt (str digit)) (* 2 acc)))\n   0\n   s))","problem":122,"user":"4ff3df0fe4b0678c553fc355"},{"code":"#(reduce +\n          (map\n           (fn [c p] (if (= c \\1) p 0))\n           (reverse %)\n           (iterate (partial * 2) 1)))","problem":122,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":122,"code":"(fn rbin [strng] \n  (loop [s strng ans 0]\n    (if s\n      (recur (next s) \n             (+ (* 2 ans) (Character/digit (first s) 2))) \n      (int ans))))","user":"572ac718e4b0f4d77e651242"},{"problem":122,"code":"(fn [s]\n   (reduce\n    #(bit-or\n      (bit-shift-left %1 1)\n      (- (int  %2) (int \\0)))\n    0 s))","user":"51e7c1f1e4b0a3e081b8cbef"},{"code":"(fn [s]\n  (int\n   (reduce + 0\n    (map-indexed (fn [i x]\n      (if (= \\1 x)\n        (Math/pow 2 i)\n        0))\n      (reverse s)))))","problem":122,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":122,"code":"(fn b2d [b]\n  (loop [acc 0\n         place 1\n         b (reverse (map {\\0 0, \\1 1} b))]\n    (if (= b nil)\n      acc\n      (recur (+ acc (* place (first b))) (* 2 place) (next b)))))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":122,"code":"#(->> % (str \"2r\") read-string)","user":"56ecc4b5e4b04a395b9a043e"},{"code":";; cheat version ? : #(Integer/parseInt % 2)\n;; fair version \"1001\" -> ( [1 3] [0 2] [0 1] [1 0] ]              -> = 2^3*1 + 2^2*0 + 2^1*0 + 2^0*1\n;;              \"1001\" -> (reverse/maptodigit+interleave+partition)-> (reduce + (2^ = (reduce * (repeat 2)))\n\n(fn [bin] \n  (reduce #(+ %1 (* (reduce * (repeat (first %2) 2)) (second %2)))\n     0 (->> bin reverse (map #(Character/digit % 10)) (interleave (range)) (partition 2))))","problem":122,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":122,"code":"#(reduce + (map * (map (comp read-string str) (reverse %1)) (map (partial reduce *) (reductions conj [] (repeat 2)))))","user":"594d4c57e4b07ddc2dafae87"},{"problem":122,"code":"(fn [s] (->> s\n             (reverse)\n             (map-indexed vector)\n             (filter #(= \\1 (second %)))\n             (map #(reduce * (repeat (first %) 2)))\n             (apply +)))","user":"588d224ae4b00487982d516c"},{"problem":122,"code":"(fn [s]\n  (reduce #(+ (* %1 2) (Character/digit %2 10)) 0 s))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn [s]\n  (let [bits (map #(if (= \\0 %) 0 1) (reverse (seq s)))\n        f (fn f [bs] \n             (if (empty? bs)\n               0\n               (+ (first bs) (* 2 (f (rest bs))))))]\n    (f bits)))","problem":122,"user":"52d660eae4b09f7907dd1356"},{"code":"(fn [b] (letfn \r\n           [(to-dec [prior bit-string] \r\n                   (if (empty? bit-string) \r\n                     prior \r\n                     (to-dec (+ (* prior 2) \r\n                                (Character/getNumericValue (first bit-string))) \r\n                             (rest bit-string))))] (to-dec 0 b)))","problem":122,"user":"4fd8544be4b0dab7d829f390"},{"problem":122,"code":"#(reduce + (map\n             (fn [[exp b]] (* b (reduce * (repeat exp 2))))\n              (map-indexed vector\n                           (map {\\0 0 \\1 1} (reverse %)))))","user":"55810c73e4b05c286339e0f2"},{"problem":122,"code":"(fn [bin]\n  (apply + (map * (iterate (partial * 2) 1) (reverse (map #(Character/digit % 10) (vec bin))))))","user":"56bb652ae4b0f26550335953"},{"code":"(fn [s]\n  (second (reduce\n    (fn [[mask result] c]\n      [(* mask 2) (bit-or result (if (= \\1 c) mask 0))])\n    [1 0]\n    (reverse s))))","problem":122,"user":"4dbad895535d1e037afb21ae"},{"code":"(fn [s]\n  (apply + \n         (map #(if (= %1 \\1) %2 0) (reverse s) (iterate #(* 2 %) 1))))","problem":122,"user":"51780f88e4b03d69594194c9"},{"problem":122,"code":"(fn [s]\n  (->> s\n      (map #(Character/getNumericValue %))\n      (reduce #(+ (* %1 2) %2) 0)))","user":"51456858e4b0e88796073408"},{"problem":122,"code":"#(reduce (fn [x y] (+ y (* 2 x))) 0 (map {\\1 1 \\0 0} (seq %)))","user":"54908cc1e4b0b312c081ff32"},{"code":"(fn [mx] (reduce + 0 (map  (fn [x y] (* x (apply * (seq (repeat y 2)))))\n\t( map  #(Integer/parseInt  (str %) ) (reverse (seq mx))) (range))))","problem":122,"user":"518644bce4b0da5a5be3baca"},{"problem":122,"code":"(fn [s]\n  (let [n (count s)\n        exponents (reverse (take n (iterate #(* 2 %) 1)))\n        digits (map #(if (= \\0 %) 0 1) s)]\n    (reduce + (map * exponents digits))))","user":"5484c3b2e4b0e286459a11a2"},{"problem":122,"code":"#(reduce (fn [t b] (+ (* 2 t) (if (= b \\1) 1 0))) 0 %)","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":122,"code":"(fn bin->dec [b]\n  (let [num (if (= b \"\")\n              0\n              (Long/parseLong b))]\n    (if (= num 0)\n      0\n      (+ (mod num 10)\n         (* 2 (bin->dec (subs b 0 (dec (.length b)))))))))","user":"557e56aae4b05c286339e0d5"},{"code":"(fn [s] (reduce #(+ (* %1 2) (- (int %2) 48)) 0 s))","problem":122,"user":"51f2851fe4b0210f90e7454b"},{"problem":122,"code":"(fn [b]\n    (int (reduce + (keep-indexed #(* (Math/pow 2 %1) (Character/digit %2 10)) (reverse b)))))","user":"507e68abe4b085af06e3afd2"},{"code":"(fn bin-num [xs]\n  (cond (empty? xs) 0\n        true (+ (* 2 (bin-num (butlast xs)))\n                (-> xs last str Byte/valueOf))))","problem":122,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn [s] (reduce + (map #(* %1 %2) \n     (map #(if (= \\1 %) 1 0) (reverse s)) \n     (iterate (partial * 2) 1)))\n)","problem":122,"user":"5142e808e4b0c172af7558c9"},{"code":"(fn [s]\n\t(reduce + (map * (reverse(map (comp read-string str) (seq s))) (iterate (partial * 2) 1))))","problem":122,"user":"510591dde4b06d28cacc92eb"},{"code":"(fn [s] \n  (->> (vec s) \n       (map str) \n       (map read-string)\n       (reverse) \n       (map-indexed #(* %2 (Math/pow 2 %))) \n       (apply +) \n       (int)))","problem":122,"user":"4fb3b865e4b081705acca2a2"},{"code":"(fn[t]\n              (reduce + (map-indexed #(* (apply * (repeat %1 2)) (Integer. (str %2)))  (reverse t)))\n             )","problem":122,"user":"4ea85846535d7eef308072f9"},{"code":"(fn [aa] (apply + (map * (reverse (map #(- (int %) 48) aa)) (iterate (partial * 2) 1))))","problem":122,"user":"5208a3a2e4b0301979a6c235"},{"code":"(fn [s]\r\n  (reduce +\r\n          (map #(if (= \\1 %1) (reduce * (repeat %2 2)) 0)\r\n               s\r\n               (-> s count range reverse))))","problem":122,"user":"500d1db4e4b05f7c30cfa69f"},{"code":"(fn [s] (apply + (mapcat #(if (= %2 \\1) [(int (Math/pow 2 %))] []) (range) (reverse s))))","problem":122,"user":"4ff67852e4b0678c553fc37e"},{"problem":122,"code":"(fn [coll]   \n  (reduce + (map #(* (int (Math/pow 2 (first %))) (- (int (second %)) 48)) (map-indexed vector (reverse coll)) )))","user":"5ab276f2e4b073f1774425e6"},{"code":"#(int (apply + (map-indexed (fn [i v] (* (- (int v) (int \\0)) (Math/pow 2 i))) (reverse %))))","problem":122,"user":"51d4ed02e4b013d740b70dec"},{"problem":122,"code":"(fn binary->decimal [s]\n  (let [digits (map #(read-string (str %)) s)]\n    (loop [fact 1\n           out 0\n           in digits]\n      (if (empty? in)\n        out\n      \t(recur (* 2 fact) (+ out (* fact (last in))) (butlast in))))))","user":"4f6ba7bce4b07046d9f4efb0"},{"problem":122,"code":"(fn [b] (reduce + (map #(* %1 %2) (iterate #(* 2 %) 1 ) (map #(Character/digit % 10) (reverse b)))))","user":"589037b4e4b00487982d51d0"},{"problem":122,"code":"; (seq \"101\") ;;=> (\\1 \\0 \\1)\n; (int \\0) ;; => 48\n; (int \\1) ;; => 49\n(fn deci \n  ([n] (deci (map int (seq n)) 1))\n  ([n p] (if (empty? n) 0\n       (+ (deci (drop-last n) (* 2 p)) \n          (* p (- (last n) 48))))))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":122,"code":"(fn [xs] (->> xs  (apply list) (map str) (map read-string) (map * (reverse (take (count xs) (iterate #(* % 2) 1)))) (apply +)))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":122,"code":"(fn [x] (reduce #(+ (* % 2) %2)  (map (partial #(- (int %2) %) 48) (seq x))))","user":"539c9d7ee4b0b51d73faaf2d"},{"problem":122,"code":"(fn [num]\n    (loop [i (- (count num) 1) p 1 curr 0]\n      (if (>= i 0) (recur (- i 1) (* 2 p) (+ curr (* p (if (= (nth num i) \\1) 1 0)))) curr)\n    ) \n  )","user":"5cbdc591e4b026601754ba00"},{"problem":122,"code":"(fn [n]\n  (reduce (fn[x y] (+ (* 2 x) y)) 0 (map (fn [d] (- (int d) (int \\0))) (seq (str n)))))","user":"5585f088e4b001b0851d7513"},{"code":"(fn  [bn]\n  (let [i (map #(Integer/parseInt (str %1)) (seq bn))\n       p (map #(reduce * (repeat % 2)) (range 0 (count i)))\n        ]\n    (reduce + (map * (reverse i) p))\n    )\n  )","problem":122,"user":"4ec4d723535dcc7ae8597d65"},{"problem":122,"code":"(fn [s]\n  (reduce #(if (= %2 0) (* 2 %) (inc (* 2 %)))\n          0\n          (map (zipmap \"0123456789\" (range 10)) s)))","user":"57ec3d29e4b0bfb2137f5b77"},{"code":"(fn [xs] (reduce #(+ %1 (* (second %2) (int (Math/pow 2 (first %2))))) 0 (map vector (range) (map #(Character/getNumericValue %) (reverse xs)))))","problem":122,"user":"53403110e4b085b17e897da6"},{"code":"(fn b2d [s] (apply + (map #(* (- (int %) (int \\0)) %2) (reverse s) (iterate (partial * 2) 1))))","problem":122,"user":"50dfb660e4b061dbdced7228"},{"code":"(fn read-binary [s]\n  (->> (map str s) (map read-string) reverse\n       (map-indexed #(* %2 (int (Math/pow 2 %1))))\n       (reduce +)))","problem":122,"user":"4ff355a1e4b0678c553fc34d"},{"problem":122,"code":"(fn [str]\n  (reduce #(+ (* 2 %) %2)  0\n          (vec (map #(Character/getNumericValue %) (seq str)))))","user":"5627444fe4b00e49c7cb47cd"},{"problem":122,"code":"(fn ans-122 [s]\n  (reduce +\n          (map-indexed\n           (fn [index item]\n             (if (= 0 item)\n               0\n               (let [digit\n                     (- (count s) index 1)]\n                 (int (Math/pow (* 2 item) digit)))))\n           (#(->> % str (map (comp read-string str))) s))))","user":"608fac60e4b03bd49d9f36c7"},{"problem":122,"code":"(fn [x] \n    (reduce + \n            (map #(if (= % \\0) 0 %2) \n                 (reverse x) \n                 (iterate #(* 2 %) 1))))","user":"54236ce1e4b01498b1a71ad1"},{"problem":122,"code":"(fn bin_to_decimal \n  [string-xs]\n  \"Convert a binary number, provided in the form of a string, to its numerical value\"\n  (Integer/valueOf string-xs 2))","user":"5bbbd077e4b0a20761a23615"},{"code":"(fn [s] (reduce #(+ (- (int %2) 48) (* % 2)) 0 s))","problem":122,"user":"4fb1325de4b081705acca276"},{"problem":122,"code":"(fn [x]\n  (let [a (vec (map #(Integer/parseInt (str %)) (flatten (partition-all 1 (reverse x)))))]\n    (println a)\n    (apply + (map * a (take (count a) (iterate #(* 2 %) 1))))\n    )\n  )","user":"58a44a14e4b01a0c0b2328f2"},{"problem":122,"code":"(fn [b]\n   (apply + (map * (reverse (map #(read-string (str %)) b)) (iterate #(* 2 %) 1))))","user":"543be8f0e4b032a45b869337"},{"problem":122,"code":"(fn [number] \n  (int (reduce \n        #(+ (* (Math/pow 2 (first %2)) (last %2)) %1) \n        0 \n        (zipmap (range) (reverse (map #(Integer/parseInt (str %)) \n                                      number))))))","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn [s]\n  (->> (reverse s)\n       (map #(- (int %) 48))\n       (map-indexed (fn [idx n](* n (Math/pow 2 idx))))\n       (reduce +)\n       (int)))","problem":122,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":122,"code":"(fn [lst]\n  (let [rev (reverse lst)]\n    (reduce + (map #(* %1 %2)\n        (take (count rev) (iterate #(* 2 %) 1))\n        (map #(case % \\1 1 \\0 0) rev)))))","user":"525cc912e4b0cb4875a45d48"},{"code":"(partial reduce (fn [acc curr] (+ (* acc 2) (if (= curr \\1) 1 0))) 0)","problem":122,"user":"50ce09e6e4b0ffc302be4bc6"},{"code":"(fn [s] \n  (first\n  (reduce \n    #(list \n      (+ (* (Integer/parseInt (str %2))\n            (Math/pow 2 (last %1))) \n         (first %1))\n      (inc (last %1))) \n    '(0 0) \n     (reverse s))))","problem":122,"user":"4f039bbe535dcb61093f6b39"},{"problem":122,"code":"(fn [s]\n   (let [c1 (->> s\n                 (map #(Integer/parseInt (str %)))\n                 (reverse))\n         c2 (iterate #(* 2 %) 1)]\n     (apply + (map #(* %1 %2) c1 c2))))","user":"5bc7f2d6e4b07a9b28b100b7"},{"code":"(fn [s]\n  (reduce (fn [result character]\n            (+ (* 2 result) (if (= character \\1) 1 0)))\n          0\n          s))","problem":122,"user":"4e7c8fd1535db169f9c796be"},{"problem":122,"code":"(fn [bs] (reduce #(+ (* 2 %1) (case %2 \\0 0 \\1 1)) 0 bs))","user":"5782018de4b0d36ec5835e8e"},{"problem":122,"code":"(fn [binaryVal]\n  (loop [total 0 values (reverse binaryVal) positionValue 1]\n    ( cond\n      (= (first values) \\1) (recur (+ total positionValue) (next values) (* positionValue 2))\n      (= (first values) \\0) (recur total (next values) (* positionValue 2))\n      :else total\n    )\n  )\n)","user":"525b4e8de4b0cb4875a45d0f"},{"problem":122,"code":"#(let [bin (fn [msb lsb] (+ (* 2 msb) lsb))\n       charToInt (fn [c] (- (int c) (int \\0)))]\n   (reduce bin (map charToInt %)))","user":"53bed4b5e4b0c98a41f5cc94"},{"code":"#(read-string (format \"2r%s\" %1))","problem":122,"user":"504f57c7e4b0a02f9cffde71"},{"code":"(comp read-string str) \"2r\"","problem":122,"user":"4ec5aa1f535d6d7199dd36b0"},{"problem":122,"code":"(fn [s]\n  (let [f (fn [i e] \n            (if (= e \\1) \n              (int (Math/pow 2 i)) \n              0))\n        m (map-indexed f (reverse s))]\n    (reduce + 0 m)))","user":"50b42cbbe4b001349b2f4abe"},{"problem":122,"code":"(fn [input]\n  (apply + (->> (reverse input)\n                (map #(Integer/parseInt (String/valueOf %)))\n                (map * (iterate (partial * 2) 1)))))","user":"5b99554ae4b0c0b3ffbd4ace"},{"code":"(fn [k]\r\n  (apply + (map #(* (- (int %) 48) %2) (reverse k) (iterate #(* 2 %) 1))))","problem":122,"user":"509c03f3e4b085ae113522a8"},{"code":"#(let [d {\\0 0 \\1 1}]\n  (reduce + (map * (map d (reverse %)) (iterate (partial * 2) 1))))","problem":122,"user":"4f043ed1535dcb61093f6bb4"},{"code":"(fn [x] (reduce +\n    (map *\n      (reverse (take (count x) (iterate (partial * 2)1)))\n      (map #(read-string %)(rest (clojure.string/split x #\"\")))\n    )\n  )\n)","problem":122,"user":"52016690e4b0b2e020a18f0f"},{"problem":122,"code":"(fn [x] (apply + (map #(if (= %2 \\1) (int (Math/pow 2 %1)) 0)  (range) (reverse x))))","user":"59874ff6e4b021a7a535fea1"},{"code":"(fn [s]\n  (apply + (map *\n                (map {\\1 1 \\0 0} (reverse s))\n                (iterate #(* 2 %) 1))))","problem":122,"user":"53460d02e4b084c2834f4a39"},{"problem":122,"code":"(fn [s]\n  (int\n   (first\n    (reduce\n     (fn [acc x]\n       (let [exp (last acc)\n             val (first acc)\n             _ (println acc x exp val)]\n         [(+ val (* x (Math/pow 2 exp))) (inc exp)]))\n     [0 0]\n     (->> s seq reverse (map #(- (int %) (int \\0))))))))","user":"57fdd1cfe4b0d3187e9009bf"},{"problem":122,"code":"(fn [v] (loop [coll (map #(- (int %) 48) v) e (dec (count coll)) result 0]\n  (println result)\n  (if (= e 0)\n    (+ (first coll) (int result))\n    (recur (drop 1 coll) (dec e) (+ result (Math/pow (* 2 (first coll)) e))))))","user":"55ed9108e4b0121d4835fddc"},{"code":"(fn [s] (reduce + (map * (iterate (partial * 2) 1) (map #(- (int %) 48) (reverse s)))))","problem":122,"user":"4e6f8431535d5021c1a8961e"},{"problem":122,"code":"#(reduce \n    (fn [r x] \n      (+ (* 2 r) (Integer. (str x))))\n    0 %)","user":"53b42472e4b047364c0444b2"},{"code":"#(apply +\n          (map\n            (fn [x y] \n              (apply * \n                     (Integer/parseInt (str x)) \n                     (repeat y 2)))\n            (reverse %)\n            (range)))","problem":122,"user":"4e705861535d5021c1a89635"},{"problem":122,"code":"(fn [bin-string]\n  (let [bin (sequence bin-string)]\n    (loop [remaining bin ans 0 exp 0]\n      (if (empty? remaining)\n        ans\n        (let [bit (last remaining) remain (butlast remaining)]\n          (if (= \\1 bit)\n            (recur remain (+ ans (int (Math/pow 2 exp))) (inc exp))\n            (recur remain ans (inc exp))))))))","user":"5746061ae4b009280f9f2b5b"},{"problem":122,"code":"(fn bin-to-int\n  [binString]\n  (loop [[hd & tl] (map #(Character/getNumericValue %) binString) len (count binString) ans 0]      \n    (if (= len 0)\n      (int ans)\n      (recur tl (dec len) (+ ans (* hd(Math/pow 2 (dec len)))))\n      )\n    )\n  )","user":"5f6b8222e4b02876ed9fd052"},{"problem":122,"code":"(fn binary-to-decimal [b];;given str representing bynary number transform it to decimal\n  (loop [b (reverse b)\n         pow 1\n         res 0]\n    (if (= b [])\n      res\n      (if (= \\1 (first b))\n        (recur (rest b) (* 2 pow) (+ res pow))\n        (recur (rest b) (* 2 pow) res)))))","user":"574f1c24e4b02ea114799255"},{"code":"(fn read-binary [n]\n  (let [get-digits (fn [x] (map #(- (int %) (int \\0)) (seq x)))\n\t\t\t\trev-digits (reverse (get-digits n))]\n\t(apply + (map-indexed #(int (* %2 (Math/pow 2 %1))) rev-digits ))))","problem":122,"user":"501c1492e4b086d93747d180"},{"code":"(fn [x] \n  (reduce + \n    (map * \n      (iterate (partial * 2) 1)\n      (map #(Character/getNumericValue %) (reverse x))\n    )\n  )\n)","problem":122,"user":"52774dd2e4b03e8d9a4a74ff"},{"code":"(fn [n] (loop [bits n res 0] (if (empty? bits) (/ res 2) (recur (drop 1 bits) (* 2 \n  (+ res (if (= \\1 (first bits)) 1 0)) \n  )))))","problem":122,"user":"5158bba4e4b059418b97f0ab"},{"problem":122,"code":"(fn [s]\n\t(loop [s s acc 0]\n\t\t(if (empty? s) acc\n\t\t\t(recur (rest s) (+ (* 2 acc) (Integer/parseInt (str (first s)))))\n\t\t)\n\t)\n)","user":"5409f8eae4b0addc1aec66e6"},{"problem":122,"code":"(fn [a]\n(reduce + (map #(* (first %) (second %))\n  (partition 2 (interleave \n    (map #(Integer/parseInt (String/valueOf %)) (reverse a))\n    (iterate #(* 2 %) 1))))))","user":"541ddadbe4b01498b1a71a84"},{"code":"(fn [s] (reduce #(+ (* 2 %) %2) 0 (map #(cond (= % \\1) 1 :else 0) (vec s))))","problem":122,"user":"536f5900e4b0fc7073fd6e7b"},{"code":"(fn f [s] (apply + (map * (map #(Integer/parseInt (str %)) (reverse s)) (iterate #(* % 2) 1))))","problem":122,"user":"52c7f036e4b0c2d177d62126"},{"problem":122,"code":"#(apply \n  +\n  (let [len (count %)]\n    (for [idx (range len)]\n      (let [mlt (if (= idx (dec len)) 1 (apply * (repeat (- len idx 1) 2)))]\n        (* mlt (read-string (str (get % idx))))))))","user":"5956c6dae4b066ee0a44af61"},{"code":"(fn [x] (reduce #(+ (* 2 %) (int %2) -48) 0 x))","problem":122,"user":"4f0664bd535dcb61093f6c0f"},{"problem":122,"code":"(fn [b]\n  (reduce (fn [x y]\n            (+ (* x 2) (Character/digit y 10))) 0 b))","user":"5a9db5c9e4b0d174b936c7f1"},{"problem":122,"code":"(fn [bin] (reduce #(bit-or (bit-shift-left %1 1) (- (int %2) (int \\0))) 0 bin))","user":"539fa040e4b0ca733b97449f"},{"code":"(fn [s]\n  (let [coll (map-indexed (fn [i v] [(Math/pow 2 i) v]) (reverse s))]\n    (bigint (reduce + (map #(* (first %) (bigint (.toString (last %)))) coll)))))","problem":122,"user":"4eec82fe535d93acb0a668ae"},{"problem":122,"code":"(fn [binstr]\n  (let [digits (#(map read-string (map str (seq %))) binstr)\n        len (count digits)]\n    (->>\n     (for [i (range len)\n           :when (= 1 (nth digits i))]\n       (apply * (repeat (- (dec len) i) 2)))\n     (apply +))))","user":"5705e404e4b0b0fb43fd0676"},{"code":"(fn binary [x]\n  (cond (empty? x) 0\n        (= \\1 (last x)) (+ 1 (* 2 (binary (reverse (rest (reverse x))))))\n        :default (* 2 (binary (reverse (rest (reverse x)))))))","problem":122,"user":"4e49a7bb535dc968683fc4c6"},{"problem":122,"code":"(fn [bits]\n  (loop [s (seq (clojure.string/reverse bits)), mult 1, res 0]\n    (if (seq s)\n      (recur (rest s) (* 2 mult) (+ res (* mult (- (int (first s)) (int \\0)))))\n      res)))","user":"54ca93abe4b057c6fda3a264"},{"problem":122,"code":"(fn [numstr]\n  (letfn\n    [(bin [acc incv bincol]\n          (if (empty? bincol)\n            acc\n            (bin (+ acc (if (= (first bincol) \\1) incv 0)) (* 2 incv) (rest bincol))))]\n    (bin 0 1 (reverse (seq numstr)))))","user":"5da7176ae4b000c986472c13"},{"problem":122,"code":"(fn binary-to-base10\n  [b]\n  (loop [base10 0\n         i (dec (count b))\n         exp 0]\n    (if (< i 0)\n      base10\n      (let [bit (-> (nth b i) str Integer/parseInt)]\n        (if (= bit 1)\n          (recur (+ base10 (reduce * (repeat exp 2))) \n                 (dec i)\n                 (inc exp))\n          (recur base10 \n                 (dec i)\n                 (inc exp)))))))","user":"59b93cd7e4b0a024fb6ae3c7"},{"code":"(fn [bit-str]\r\n    (Integer/valueOf bit-str 2))","problem":122,"user":"50436470e4b034ff00315d23"},{"problem":122,"code":"(fn binary \n   ([b] (binary 1 b))\n   \n   ([p b]\n    \n  (if-not b 0\n  (if (= (last b) \\1)\n    (+ p (binary (+ p p) (butlast b)))\n    (binary (+ p p) (butlast b))\n  ))))","user":"57487084e4b009280f9f2b8c"},{"problem":122,"code":"(fn [s]\n  (reduce #(+ (* 2 %1) (if (= %2 \\1) 1 0)) 0 s)\n  )","user":"554edb85e4b00713264bd99a"},{"code":"reduce (fn [n s] (+ (* 2 n) (if (= s \\1) 1 0))) 0","problem":122,"user":"51b90b88e4b050a1176cd6a2"},{"problem":122,"code":"(fn [xs]\n  (let [tob (fn tob [xs] (case (first xs)\n                       nil 0\n                       \\0 (* 2 (tob (rest xs)))\n                       \\1 (inc (* 2 (tob (rest xs)))) ))]\n  (tob (reverse xs))))","user":"6045582fe4b02d28681c77b6"},{"problem":122,"code":"(fn [x]\n             (reduce + 0 (map-indexed #(*(read-string (str %2)) (int (Math/pow 2 %1)))  (reverse x))))","user":"5654cb2de4b0f9d632dd848b"},{"problem":122,"code":"(fn [s] (let [digits (map #(if (= % \\0) 0 1) s)] (reduce #(+ (* 2 %1) %2) 0 digits)))","user":"540470dae4b0addc1aec6658"},{"problem":122,"code":"(fn [binary]\n  (reduce\n   (fn [sum n]\n     (+ (* sum 2) n))\n   0\n   (map (comp #(Integer. %) str) binary)))","user":"5cb41c40e4b026601754b911"},{"code":"(fn [s]\n  (Integer/parseInt s 2))","problem":122,"user":"4fda016ae4b05e33b9224f42"},{"problem":122,"code":"(fn [input]\n  (let [digits (map (fn [chr] (- (int chr)\n                                 (int \\0))) input)\n        powers (iterate (partial * 2) 1)]\n    (reduce + (map * (reverse digits) powers))))","user":"54b10d08e4b09f271ff37d18"},{"problem":122,"code":"(fn [bs]\n  (let [nums (map #(- (int %) 48) (reverse bs))]\n    (apply + (map * nums (iterate (partial * 2) 1)))))","user":"58800fd4e4b0f1effa3b7606"},{"problem":122,"code":"(fn [coll] (apply + (map-indexed #(if (= %2 \\1) (int (Math/pow 2 %1)) 0) (reverse coll))))","user":"54361d92e4b032a45b8692f7"},{"code":"(fn  [s]\n  (reduce #( + % %2)\n          (map #(* % (java.lang.Math/pow 2 %2))\n               (map #(Integer/valueOf (str %)) (reverse s))  (range 0 (count s) ))))","problem":122,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":122,"code":"(fn [s]\n  (->> s\n       seq\n       (reduce #(+\n                 (* 2 %1)\n                 (if (= \\1 %2) 1 0))\n               0)))","user":"56a38a4ce4b0542e1f8d14cc"},{"problem":122,"code":"(fn dec-int->bin-str\n    [n]\n    (Integer/valueOf n 2))","user":"587bead1e4b01531a375eb0d"},{"code":"(fn [s]\n  (reduce (fn [v d]\n    (let [cur (if (= d \\0) 0 1)]\n      (+ v v cur))) 0 s))","problem":122,"user":"4dac39a28cc9d6edb8beb0b3"},{"code":"(fn [b]\n  (int (reduce +\n    (map-indexed\n      #(* (Math/pow 2 %1) %2)\n      (reverse (map\n         read-string\n         (map str (seq b))))))))","problem":122,"user":"504e72cee4b0f6ff3350c4b4"},{"code":"(fn bin2dec [digits]\n  (loop [left digits result 0]\n    (if (empty? left) result (recur (rest left) (+ (* result 2) (if (= (first left) \\1) 1 0))))))","problem":122,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"code":"#(reduce + (map * (iterate (partial * 2) 1) (map {\\0 0 \\1 1} (reverse %))))","problem":122,"user":"510967aae4b07c05fdf6dc0f"},{"problem":122,"code":"(fn bin [s]\n  (let [digits (reverse (map #(Integer/parseInt (str %)) s))\n        twos (iterate (partial * 2) 1)]\n    (->> (interleave digits twos)\n         (partition 2)\n         (map (partial apply *))\n         (reduce +))))","user":"56444fb1e4b0018b46ad8c0c"},{"code":"(fn binaryread [x]\n        (int (apply + (map-indexed #(* (Math/pow 2 %1) %2) (rseq (vec (map #(Integer/parseInt (str %)) x)))))))","problem":122,"user":"532727bae4b09d4e7a9b54fa"},{"problem":122,"code":"(fn [b]\n  (reduce\n    (fn [a [i c]]\n      (+ a (bit-shift-left (Character/digit c 10) i)))\n    0\n    (map-indexed vector (reverse b))))","user":"5c0e58bfe4b01240ff567140"},{"problem":122,"code":"(partial reduce #(+ (* 2 %) (- (int %2) 48) ) 0)","user":"5776385fe4b0979f89651632"},{"problem":122,"code":"(fn [s] (reduce + (map (fn [[x y]] (* x y)) (map-indexed (fn [idx itm] [(reduce * (repeat idx 2)) itm]) (map (fn [x] (if (= x \\1) 1 0)) (reverse (seq s)))))))","user":"574a546ee4b02ea1147991f6"},{"problem":122,"code":"#(reduce + (map-indexed (fn[index value](* (read-string value) (reduce * (repeat index 2)))) (reverse (rest (clojure.string/split %1 #\"\")))))","user":"5565d5e4e4b0c656e3ff181f"},{"problem":122,"code":"(fn f [xss] (let [xs (seq xss)] (if (= (count xs) 0) 0 (+ (f (rest xs)) (if (= \\1 (first xs)) (reduce * (repeat (count (rest xs)) 2)) 0)))))","user":"5686e652e4b0dcc4269f4059"},{"problem":122,"code":"(letfn [(b [acc digit] (+ (* 2 acc) (int digit) -48))]\n  #(reduce b 0 %))","user":"560a7b46e4b05f002753defb"},{"problem":122,"code":"(fn [s]\n  (loop [coll s, x (dec (count coll)), acc 0]\n    (if (empty? coll)\n      acc\n      (if (= (first coll) \\1)\n        (recur (rest coll) (dec x) (+ acc (reduce * (repeat x 2))))\n        (recur (rest coll) (dec x) acc)))))","user":"552356fae4b0882d96d091af"},{"problem":122,"code":"(fn [s] (reduce (fn [b c] (+ (* 2 b) (- (int c) (int \\0)))) 0 s))","user":"5744d088e4b009280f9f2b41"},{"code":"(fn [binaryseq]\n   (let [binseq (reverse binaryseq)\n         charToInt (fn [c] (- (int c) 48))\n         is1 (fn [c] (= 1 (charToInt c)))\n         getVal (fn [c p] (if (is1 c)\n                            (if (= 0 p)\n                              1\n                              (reduce * (repeat p (* 2 (charToInt c)))))\n                            0))]\n     (loop [bins binseq\n            res 0\n            pos 0]\n       (cond\n        (empty? bins) res\n        :else (recur (rest bins)\n                     (+ res (getVal (first bins) pos))\n                     (inc pos))))))","problem":122,"user":"5154fa3fe4b0179c5115f4e6"},{"problem":122,"code":"(fn foo\n   [x & {:keys [mag acc] :or {mag 0 acc 0}}]\n\n   (if (seq x)\n     (foo (butlast x) :acc (+ acc (* (Character/getNumericValue (last x)) (Math/pow 2 mag))) :mag (inc mag))\n     (int acc)))","user":"53e3e852e4b036ad0777e407"},{"code":"(fn [binstr]\n  (let [bin (map #(. Integer parseInt %) (map str binstr))\n        pows (interleave (reverse bin) (map #(Math/pow 2 %) (iterate inc 0)))]\n    (reduce + (map (fn [[i j]] (* i j))(partition 2 pows)))))","problem":122,"user":"4ee9d697535d93acb0a66895"},{"problem":122,"code":";; (fn [gstr] (let [coll (map #(- (int %) 48) gstr)] (loop [result 0 arr coll] (if (empty? arr) result (recur (bit-or (bit-shift-left result 1) (first arr)) (rest arr))))))\n(fn [gstr] (->> gstr (map #(- (int %) 48)) (reduce #(bit-or (bit-shift-left %1 1) %2) 0)))","user":"5c8319c3e4b0c8042a70ce45"},{"code":"(fn read-binary\n    [s]\n    (apply + (map * \n                  (map #(if (= % \\0) 0 1) s) \n                  (map #(rationalize (. Math pow 2 %)) (range (dec (count s)) -1 -1)))))","problem":122,"user":"525d490ae4b0cb4875a45d70"},{"code":"(fn bin [n]\n  (apply + (map-indexed #(int (* (Character/getNumericValue %2) (Math/pow 2 %1))) (reverse n))))","problem":122,"user":"4fcf642ee4b03432b189f410"},{"problem":122,"code":"(fn BinStr->Int [s]\n  (loop [xs (reverse (map {\\0 0, \\1 1} s))\n         p 1\n         acc 0]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (* 2 p) (+ acc (* p (first xs)))))))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":122,"code":"(fn [s] \n  (reduce +\n    (map *\n      (map (comp read-string str) (reverse s))\n      (cons 1 (iterate #(* 2 %) 2)))))","user":"5e3071abe4b05b4b01516213"},{"problem":122,"code":"#(BigInteger. %1 2)","user":"53572767e4b04ce2eb3ed277"},{"code":"(fn [x]\n  (int\n   (reduce +\n           (map-indexed\n            (fn [idx digit] (* (Math/pow 2 idx) (Integer/parseInt (str digit))))\n            (reverse x)))))","problem":122,"user":"512d3304e4b040332b905b2d"},{"problem":122,"code":"(fn [s] (BigInteger. s 2))","user":"579c7db7e4b05b1deef9ae0a"},{"problem":122,"code":"(fn [s]\n    (let [two-powers (lazy-seq (iterate #(* 2 %) 1))]\n      (->> (vec s)\n           (map #(String/valueOf %))\n           (map read-string )\n           (reverse)\n           (map * two-powers)\n           (reduce +)\n           )\n      )\n    )","user":"515ebde3e4b01e5d11ccd0a8"},{"code":"(fn [s]\n  (let [x (partition 2 (interleave (map read-string (map str (reverse s))) (range (count s))))]\n    (apply + (map #(if (zero? (first %))\n            0\n            (if (zero? (last %))\n              1\n              (apply * (first (repeat (last %) 2)) (rest (repeat (last %) 2)))))\n         x))))","problem":122,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":122,"code":"(fn [s]\n  (apply + (map \n              #(-> %1 str read-string (* %2)) \n              (reverse s) \n              (iterate #(* 2 %) 1))))","user":"5ed9c2cde4b0c7845d86b0e4"},{"code":"(fn [bs]\r\n  (int (reduce + (map-indexed\r\n                   #(* (Math/pow 2 %) (- (int %2) (int \\0)))\r\n                   (reverse bs)))))","problem":122,"user":"500159b3e4b0678c553fc419"},{"code":"(fn [x] (reduce #(+ (bit-shift-left %1 1) (- (int %2) 48) ) 0 x))","problem":122,"user":"51b0fc95e4b0c53cf2e68a72"},{"code":"(fn[binstr]\n  (let [acc (atom 0)]\n    (doseq [bin binstr\n            :let [b (Integer/parseInt (str bin))]]      \n        (reset! acc (+ (* @acc 2) b)))\n    @acc))","problem":122,"user":"516081e7e4b009fba0926e28"},{"problem":122,"code":"(fn [s]\n   (reduce + (map\n               (fn [digit place]\n                 (* (Integer/parseInt (str digit))\n                    (long (Math/pow 2 place))))\n               s\n               (range (dec (count s)) -1 -1))))","user":"5ade6bafe4b0837691e92c23"},{"code":"reduce #(+ (- (int %2) (int \\0)) (* % 2)) 0","problem":122,"user":"4f69f34fe4b07046d9f4ef90"},{"problem":122,"code":"(fn [in] (apply + (map * (map #(- (int %) 48) (reverse in)) (iterate #(* 2 %)1))))","user":"5e9b7aefe4b0157ca96647f1"},{"problem":122,"code":"(fn [bin-str]\n  (apply + (map-indexed #(if (= %2 \\1) (int (Math/pow 2 %)) 0) (clojure.string/reverse bin-str))))","user":"54684c3be4b00cfc9eacc139"},{"code":"(fn from-bin [bin]\n  (cond\n   (empty? bin) 0\n   (= \\0 (last bin)) (* 2 (from-bin (butlast bin)))\n   (= \\1 (last bin)) (+ 1 (* 2 (from-bin (butlast bin))))\n   )\n  )","problem":122,"user":"5252cbe7e4b0541d1855b8d2"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [result n]\n            (+ n (* 2 result)))\n          0\n          (map (comp biginteger str) s)))","user":"57dd47f4e4b0bd073c20243e"},{"problem":122,"code":"(comp (partial apply +) (partial map-indexed #(* (int (Math/pow 2 %)) (- (int %2) 48))) reverse)","user":"5e2549c8e4b05b4b0151615f"},{"problem":122,"code":"(fn [st]\n  (loop [s st acc 0]\n    (if-let [c (first s)]\n      (recur (next s)\n             (+ (bit-shift-left acc 1) (if (= c \\1) 1 0))\n             )\n      acc)))","user":"5cece5a2e4b0a17bb84e2bfb"},{"problem":122,"code":"(fn binary\n  [n]\n  (loop [n n\n         x 0]\n    (if (first n)\n      (recur (rest n) (+ (* 2 x) (if (= (first n) \\1) 1 0)))\n      x)))","user":"57f81544e4b0d3187e900917"},{"code":"(fn [s]\n  (reduce\n   (fn [ret x]\n     (let [[n d] x]\n       (+ ret (* d (int (Math/pow 2 n))))))\n   0\n   (zipmap (range)\n           (reverse (map #(Integer/parseInt (str %)) (seq s))))))","problem":122,"user":"4ed98b40535d10e5ff6f5307"},{"code":"(fn [s]\n  (reduce\n    (fn [t c]\n      (bit-or\n        (bit-shift-left t 1)\n        (if (= \\0 c) 0 1)))\n    0\n    (seq s)))","problem":122,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn [s]\n  (apply + (map-indexed #(apply * (read-string (str %2)) (repeat % 2))\n                        (reverse s))))","problem":122,"user":"507056b8e4b07bd6ad9b9f29"},{"code":"(fn [x]\n    (loop [x x acc 0]\n      (if (empty? x) acc\n        (recur (rest x)\n               (if (= \\1 (first x))\n                      (+ (int (Math/pow 2 (count (rest x)))) acc)\n                      acc)))))","problem":122,"user":"5141abf1e4b02fd87f5064c3"},{"code":"(fn [x]\n  (int (reduce + (map-indexed (fn [idx itm] (* (Character/getNumericValue itm) (Math/pow 2 idx))) (reverse x)))))","problem":122,"user":"4de52c87535d08e6dec9fdf0"},{"problem":122,"code":"(fn [s]\n  (int\n    (reduce\n      (fn [memo [idx el]]\n        (if (= \\1 el)\n          (+ memo (Math/pow 2 idx))\n          memo))\n      0\n      (keep-indexed #(vector %1 %2) (reverse s)))))","user":"52d6d490e4b09f7907dd1369"},{"problem":122,"code":"#(reduce + (map (fn [[p _]] (reduce * 1 (repeat p 2))) (filter (fn [[_ ix]] (= \\1 ix)) (map-indexed vector (apply str (reverse %))))))","user":"549def9ce4b0f3d1d8e70f99"},{"code":"(fn [s] (apply + (map-indexed #(condp = %2 \\0 0 \\1 (Math/pow 2 %)) (reverse s))))","problem":122,"user":"4ea09fa4535d7eef308072aa"},{"problem":122,"code":"(fn binary_to_num [bin]\n  (let [bin_n (map #(Integer. (.toString %)) bin)]\n    (loop [res 0 i (count bin_n) j 0]\n    (if (< j (count bin_n))\n      (recur (+ res (* (last (take i (iterate (partial * 2) 1))) (nth bin_n j))) (dec i) (inc j))\n      res\n      )\n\n    ))\n  )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"problem":122,"code":"(fn s2b [s] (reduce #(+ (* 2 %1) (- (int %2) 48)) 0 s))","user":"53f7820be4b0de5c41848560"},{"problem":122,"code":"(fn\n  [s]\n  (let [s (vec (reverse s))]\n    (loop [sum 0\n           pow 0\n           [d & digits] s]\n      (if d\n        (let [a (if (= \\1 d)\n                  (int (Math/pow 2 pow))\n                  0)]\n          (recur (+ sum a) (inc pow) digits))\n        sum))))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":122,"code":"#(reduce (fn [r d] (+ (* 2 r) (if (= d \\1) 1 0))) 0 %)","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":122,"code":"(fn [x] (loop [sum 0 power 0 remaining (reverse x)] (if (empty? remaining) sum (recur (if (= (first remaining) \\1)(+ sum  (reduce * (repeat power 2))) sum) (inc power) (rest remaining)))))","user":"5d7158f3e4b04d129b00f2e1"},{"code":"(fn [s] (reduce +' (map *' (map (comp read-string str) s) (map (partial bit-shift-left 1) (iterate dec (dec (count s)))))))","problem":122,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn [x] (apply + (map #({\\1 %1} %2 0)\n                      (iterate #(* 2 %) 1)   \n                      (reverse x))))","problem":122,"user":"4f9d8083e4b0dcca54ed6d23"},{"problem":122,"code":"(fn binn [s]\n  (loop [res 0 rest-str s power 0]\n    ;(println \"res: \" res \" rest: \" rest-str \" power: \" power)\n    (if (empty? rest-str)\n      (Math/round res)\n      (recur (+ res (* (Integer/parseInt (str (last rest-str)))\n                       (Math/pow 2 power)))\n             (drop-last rest-str)\n             (inc power)))))","user":"53e30fcae4b036ad0777e3fc"},{"code":"(fn read-binary\n  ([binary-seq] (read-binary binary-seq 1 0))\n  ([binary-seq digit-val val]\n    (if (empty? binary-seq)\n      val\n      (let [digit (last binary-seq)]\n        (if (= digit \\0)\n          (read-binary (butlast binary-seq) (* 2 digit-val) val)\n          (read-binary (butlast binary-seq) (* 2 digit-val) (+ val digit-val))\n        )\n      )\n    )\n  )\n)","problem":122,"user":"4fff00ede4b0678c553fc3fc"},{"problem":122,"code":"(fn toDec [bin]\n  (int (reduce + (let [lst (map #(Integer/parseInt (str %)) (reverse bin))]\n                 (for [x (range (count bin))]\n                   (* (nth lst x)(Math/pow 2 x))))))\n)","user":"59e0111ae4b08badc2a0c4e4"},{"problem":122,"code":"#(reduce \n  (fn [a b] \n    (if (= b \\1) \n      (+ (* 2 a) 1) \n      (* 2 a )))\n  0 (seq %))","user":"54026d7de4b0df28a13c62cf"},{"problem":122,"code":"(fn to-dec [num]\n   (loop [tail (vec (map #(- (int %) (int \\0)) num)) pow-of-two 1 res 0]\n     (if (seq tail) (recur (pop tail) (* pow-of-two 2) (+ res (* (peek tail) pow-of-two)))\n                    res)))","user":"57c7cef5e4b05aa3c4741d0d"},{"problem":122,"code":"(fn [s]\n  (->> (keep-indexed vector (reverse s))\n    (map (fn [[idx d]] (if (= d \\1) idx)))\n    (remove nil?)\n    (reduce (fn [res v]\n              (+ res (reduce * 1 (repeat v 2))))\n            0)))","user":"53a83c74e4b047364c044426"},{"code":"(fn [s] (int (reduce + (map #(* (Integer/parseInt (str %1)) ( Math/pow 2 (* %2 (Integer/parseInt (str %1))))) (reverse s) (range (count s))))))","problem":122,"user":"50981062e4b04e098a4c7268"},{"code":"(fn [n] \n  (apply + \n    (map *\n      (iterate #(* % 2) 1) \n      (map #(- (int %) (int \\0)) (reverse n)))))","problem":122,"user":"4e80e0f2535db62dc21a62b8"},{"code":"(fn bin-to-dec [bin]\n  (java.lang.Long/parseLong bin 2))","problem":122,"user":"526ee63de4b03e8d9a4a733f"},{"code":"(fn binary [s]\n  (let [r (reverse (seq s))\n        tuples (partition 2 (interleave r (range (count r))))\n        pow (fn [b e] (apply * (repeat e b)))]\n    (reduce + (map #(if (= \\1 (nth % 0)) (pow 2 (nth % 1)) 0) tuples))))","problem":122,"user":"4f625f68e4b0defedf855fd2"},{"code":"(fn [s] (reduce + (map #(* % (read-string (str %2))) (iterate #(* % 2) 1) (reverse s))))","problem":122,"user":"4f40ccd9e4b0e243712b1fc0"},{"problem":122,"code":"(fn [bin]\n  (reduce\n    (fn [sum [digit exp]]\n      (+ sum\n         (if (= \\1 digit) (reduce * (repeat exp 2)) 0)))\n    0\n    (partition 2 (interleave bin (reverse (range (count bin)))))))","user":"54c8d4a8e4b045293a27f654"},{"code":"(fn [n] (reduce + (map * (for [x (range (count n))] (int (Math/pow 2 x))) (map #(Integer/parseInt (str %)) (reverse n)))))","problem":122,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":122,"code":"(fn [n]\n  (apply + (map #(if (= \\1 %1)\n                   (apply * (repeat %2 2)) 0)\n                (reverse n) (range))))","user":"57e10705e4b0bfb2137f5a6a"},{"problem":122,"code":"(fn [bin]\n  (reduce\n    +\n    (map #(if (= (second %) 1) (int (Math/pow 2 (first %))) 0)\n        (map-indexed vector\n                     (map read-string\n                          (map #(apply str %)\n                               (map list\n                                    (reverse bin))))))))","user":"557e8326e4b05c286339e0d7"},{"problem":122,"code":"(fn bi-str-to-int [input]\n  (letfn [(binary-values [times]\n            (loop [iter 0\n                   count times\n                   coll []]\n              (let [val (reduce * (repeat iter 2))]\n                (if (zero? count) coll\n                    (recur (inc iter) (dec count) (conj coll val))))))]\n    (loop [i (reverse (rest (clojure.string/split input #\"\")))\n           vals (take (count i) (binary-values (count input)))\n           total 0]\n      (if (zero? (count i)) total\n          (recur (rest i) (rest vals) (if (= \"0\" (first i)) total\n                                        (+ total (first vals))))))))","user":"52fc34cee4b047fd55837015"},{"code":"(fn [b] (let [digits (map #(Integer/parseInt (str %)) (seq b))]\n          (reduce #(if (zero? %2) (* 2 %) (+ 1 (* 2 %1))) 0 digits)))","problem":122,"user":"4f2aff4de4b0d6649770a044"},{"code":"(fn [s]\n  (loop [ss (seq s) n 0]\n    (if (seq ss)\n      (recur (rest ss) (+ (Integer/parseInt (str (first ss))) (* n 2)))\n      n) ))","problem":122,"user":"4dca8b6d535d5973398f9288"},{"problem":122,"code":"#(reduce + (map (fn [a b] (* (Character/digit a 10) (reduce * (repeat b 2)))) %1 (reverse (range (count %1)))))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":122,"code":"(fn b\n  ([s] (reduce b 0 (seq (char-array s))))\n  ([a c] (+ (* 2 a) (if (= \\0 c) 0 1))))","user":"50e5bca5e4b09ae9427b0e75"},{"problem":122,"code":"(fn [s] ; binary string to decimal integer\n  (loop [s s dec 0 exp 0]\n   (if (empty? s)\n     dec \n     (recur\n       (butlast s)\n       (+                           ; Add...\n         (*                         ; ...the product of...\n           (apply * (repeat exp 2)) ; ...the power of 2 corresponding to the curr binary \"place\"...\n           (- (int (last s)) 48))   ; ...and the integer equivalent of the last character in s...\n         dec)                       ; ...to the previously accumulated decimal value.\n       (inc exp)))))","user":"55929e89e4b0604b3f94d58e"},{"code":"(fn [bs]\n  (reduce #(+ (* %1 2) %2)\n    (map #(- (int %) 48)\n      bs )))","problem":122,"user":"4f128865535d64f603146428"},{"problem":122,"code":"(fn [binary-string]\n  (let [powers-of-two (iterate (partial * 2) 1)\n        seq-of-numbs (fn [string]\n                       (->> (reverse string)\n                            (map str)\n                            (map read-string)))\n        zero-or-decimal-number\n        (fn [binary decimal]\n          (if (zero? binary)\n            0\n            decimal))]\n    (reduce + (map zero-or-decimal-number \n                   (seq-of-numbs binary-string)\n                   powers-of-two))))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn [s]\n  (reduce + (map-indexed (fn [i x]\n                            (if (= x \\1)\n                              (int (Math/pow 2 i))\n                              0)) (reverse s))))","problem":122,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":122,"code":"(fn [s]\n  (reduce + (map \n             #(if (= (- (int %1) (int \\0)) 1) \n              (reduce * (repeat %2 2))\n              0)\n            (reverse s) (range))))","user":"5541fa50e4b0a04f79299515"},{"problem":122,"code":"(fn [s] (reduce + (map-indexed #(* (bit-shift-left 1 %1) (- (int %2) 48)) (reverse s))))","user":"54c641f8e4b045293a27f628"},{"code":"(fn [bin-str]\n            (reduce + (map #(* (first %) (last %)) (map vector (map #(Integer/parseInt (str %)) (reverse (seq bin-str))) (iterate (partial * 2) 1)))))","problem":122,"user":"52c49401e4b0c2d177d620de"},{"code":"(fn [s]\n  (int (apply + (map (fn [[n x]] (* (Math/pow 2 n) (Integer/parseInt (str x)))) (zipmap (range 0 (count s)) (reverse s))))))","problem":122,"user":"4f05a9cf535dcb61093f6bfc"},{"code":"(fn [s]\n   (letfn [(pow [a b] (if (zero? b) 1 (if (== b 1) a (* a (pow a (dec b))))))]\n\t(reduce + (map-indexed\n     (fn [index item] (if (identical? \\1 item) (pow 2 (- (.length s) (inc index))) 0))\n     (seq s))))\n)","problem":122,"user":"510a6bece4b06956752d35af"},{"problem":122,"code":"(fn [s] (reduce + (map #(if (= \"1\" (str %1)) %2 0)  (reverse s) (iterate (partial * 2) 1))))","user":"58983e3fe4b00487982d52ce"},{"problem":122,"code":"#(let [x (reverse (map (fn [j] (- (int j) 48)) %))\n       y (iterate (fn [k] (* k 2)) 1)]\n   (reduce + (map * x y)))","user":"56d1afd9e4b0ea9b8538f791"},{"problem":122,"code":"(fn [n]\n      (loop [i 0 total 0]\n        (if (= i (count n))\n          (int total)\n          (recur (inc i) (+ total (* (read-string(str(nth (reverse n) i))) (Math/pow 2 i)))))))","user":"4ddf597a535d08e6dec9fddf"},{"code":"#(reduce + (flatten (map-indexed\n   (fn[idx n]\n     (let [pow (if (= n \\0) 0\n                   (reduce * 1 (take idx (repeat 2))))]\n       [pow])) (reverse %))))","problem":122,"user":"4fb86dc9e4b081705acca2d8"},{"code":"(fn [x] (loop [s (reverse (seq x)) acc 0 p 1] (if (empty? s) acc (recur (rest s) (+ acc (if (= (first s) \\1) p 0))  (* p 2)))))","problem":122,"user":"50ef3e5de4b0a78662fa2652"},{"problem":122,"code":"(fn [x] \n  (int \n   (reduce +\n    (map *\n      (reverse (map read-string (re-seq #\"[0-9]\" x)))\n      (map (fn [i] (Math/pow 2 i)) (range))))))","user":"53e91473e4b036ad0777e495"},{"problem":122,"code":"(fn[x] \n  (Integer/parseInt (format \"%.0f\"  \n  (Math/floor (loop [i (- (count x) 1) j 0  z 0] \n     (if (>= i 0) \n       (recur \n        (dec i)\n \t\t(inc j)  \n        (+ \n         z \n         (* \n          (Math/pow 2 i)\n          (Integer/parseInt (str (get x j )))\n          )\n         )\n        ) \n      z\n       )\n      ))\n     ))\n   )","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":122,"code":"(fn [n]\n  (let [s (reverse n)]\n    (first (reduce #(vector (+ (% 0) (* (Character/digit %2 10) (% 1))) (* 2 (% 1))) [0 1] s))))","user":"56ef077ae4b04a395b9a0459"},{"problem":122,"code":"(fn [sq] (->> sq (map #(Character/getNumericValue %)) (reduce #(+ (* 2 %1) %2))))","user":"4eadc217535d7eef30807321"},{"problem":122,"code":"(fn [s]\n  (let [a (reverse (take (count s) (iterate #(* 2 %) 1)))\n        b (->> (seq s)\n               (map str)\n               (map #(Integer. %)))]\n    (reduce + (map * a b))))","user":"5707abfce4b0b0fb43fd068d"},{"code":"(fn [x]\n    (reduce #(+ (* % 2) %2) 0\n            (map #(Integer/valueOf (str %)) (seq x))))","problem":122,"user":"4f969a66e4b0dcca54ed6cde"},{"code":"(fn [x]\n  (let [exp-arr \n        (map-indexed vector \n                     (map (fn [x]\n                            (java.lang.Integer/parseInt (str x))) \n                          (reverse x)))\n        pow2 (fn [base n]\n               (reduce * (repeat n base)))]\n    (reduce + (for [x exp-arr]\n                (* (pow2 2 (x 0)) (x 1))))))","problem":122,"user":"4ff505c8e4b0678c553fc364"},{"problem":122,"code":"(fn parse-binary [binary-string]\n  (loop [acc 0 s binary-string]\n    (if (empty? s)\n      acc\n      (let [digit (- (int (first s)) 48)]\n        (recur (+ (* acc 2) digit)\n               (next s))))))","user":"524e79c1e4b0541d1855b7e0"},{"problem":122,"code":"(fn [orig]\n  (loop [val 1\n         n 0\n         s orig]\n    (if (last s)\n      (recur (* 2 val) (+ n (* val (Integer. (str (last s))))) (apply str (butlast s)))\n      n)))","user":"581e8b86e4b04b46fc4b0f2b"},{"code":"#(read-string (apply str (concat \"2r\" %)))","problem":122,"user":"4ecfb458535d44c135fd68bb"},{"code":"(fn [s] (reduce #(+ (* 2 %1) (- (int %2) 48)) 0 (seq s)))","problem":122,"user":"52655949e4b03e8d9a4a710b"},{"code":"(fn rb\n  [x]\n  (reduce\n   (fn [decimal bit]\n     (+ (* 2 decimal) bit))\n   0\n   (map (comp read-string str) x)))","problem":122,"user":"4f8bbb27e4b02e764a0a5182"},{"code":"(fn [s]\r\n  (reduce #(+ (* 2 %) (- (int %2) (int \\0))) 0 s))","problem":122,"user":"4e994541535dbda64a6f6b64"},{"code":"(fn [n]\n  (let [big-2 (biginteger 2)\n        base-2-place #(.pow big-2 %)\n        digits (map #(= \\1 %) n)]\n    (reduce + (map-indexed (fn [place on?] (if on? (base-2-place place) 0))  (reverse digits)))))","problem":122,"user":"50bd6033e4b0594b91591c66"},{"code":"(fn readbinary [string]\n  (if (empty? string)\n    0\n    (+ (Integer/parseInt (apply str (take-last 1 string)))\n       (* 2 (readbinary (apply str (drop-last string)))))))","problem":122,"user":"510cd1dde4b078ea71921124"},{"problem":122,"code":"(fn [string]\n  (loop [out 0\n         idx (dec (count string))\n         digits (map #(Character/digit % 10) string)]\n    (if (seq digits)\n      (recur\n       (+ out (* (first digits) (Math/pow 2 idx)))\n       (dec idx)\n       (rest digits))\n      (int out))))","user":"576c2ecae4b07c67f59d1fbb"},{"problem":122,"code":"; (fn [bin-str]\n;  (loop [s bin-str, res 0]\n;    (if (empty? s)\n;      res\n;      (recur\n;        (rest s)\n;        (+ res\n;           (if (= (first s) \\0)\n;             0\n;             (reduce * (repeat (count (rest s)) 2))))))))\n\n(fn [s]\n  (reduce +\n    (map #(reduce * (repeat % 2))\n      (keys (filter #(= (last %) \\1) (zipmap (reverse (range (count s))) s))))))","user":"57e37f90e4b0bfb2137f5a9c"},{"code":"#(reduce (fn [tot n] (+ (* tot 2) n)) 0     \n  (map (fn [c] (- (int c) 48)) %))","problem":122,"user":"51bf4560e4b013aa0d74b817"},{"code":"(fn [s]\n  (reduce +\n          (map #(* % %2)\n               (map #(read-string (str %)) (reverse s))\n               (iterate #(* 2 %) 1))))","problem":122,"user":"500d8c49e4b07ccb9a7ddb00"},{"problem":122,"code":"(fn [n] (reduce + 0 (->> (reverse (str n))\n                         (map vector (range))\n                         (map #(* (int (Math/pow 2 (first %))) (- (int (second %)) (int \\0)))))))","user":"4fd4bddce4b0d4de60cee36e"},{"code":"(fn [n]\n   (int (reduce + (map-indexed #(* (- (int %2) 48) (Math/pow 2 (int %1))) (reverse n)))))","problem":122,"user":"535e518ee4b04ce2eb3ed2cf"},{"code":"(fn [input] (reduce + (map #(* (- (int %) 48) (reduce * (repeat %2 2))) (reverse input) (range (count input)))))","problem":122,"user":"4faa6184e4b081705acca1f1"},{"code":"#(Integer/valueOf % 2)","problem":122,"user":"4e521cef535d302ef430da6d"},{"problem":122,"code":"(fn [s] (loop [ds (map (comp read-string str) (reverse s)) b 1 r 0]\n          (if (empty? ds)\n            r\n            (recur (rest ds) (* b 2) (+ r (* b (first ds))) ))))","user":"57c796b4e4b05aa3c4741d08"},{"code":"#(int (apply + (map-indexed (fn [i v] (* (Integer. (str v)) (Math/pow 2 i))) (reverse %))))","problem":122,"user":"4f83665ee4b033992c121c1c"},{"problem":122,"code":"(fn bin[s]\n  (int (reduce + \n      (map \n       \t#(* (Math/pow 2  (first %)) ( read-string (str (second %)))) (map-indexed vector (reverse s))))))","user":"548f3ed8e4b0e286459a1236"},{"problem":122,"code":"(fn [s] (apply + (map-indexed #(if (= %2 \\1) (int (Math/pow 2 %1)) 0) (reverse s))))","user":"5dc98501e4b02f9375f4e1e6"},{"code":"(fn [l] (reduce (fn [acc x] (+ (* 2 acc) x)) (map #(- (int %) 48) (seq l))))","problem":122,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":122,"code":"#(apply + (map-indexed (fn [x i] (* (Integer/parseInt (str i)) (reduce * (repeat x 2)))) (reverse %)))","user":"5b552e2ee4b02d533a91bd2e"},{"code":"(fn convertBinary [aStr]\n  (reduce\n    +\n    (map-indexed\n    (fn [index item]\n      (*\n        item\n        ((fn pow [a n]\n           (reduce * (repeat n a)))\n          2 index)))\n    ( map (comp  #(- % 48) int) (reverse aStr)))))","problem":122,"user":"5379ed48e4b06839e8705e5a"},{"problem":122,"code":"(fn [x] (reduce #(+ % (if (= \\1 (second %2))\n                          (apply * (repeat (first %2) 2))\n                          0))\n        0\n        (map-indexed list (reverse x))))","user":"56ff45e5e4b08d47c97781bb"},{"code":"(fn cows [n-str]\n  (let [length (count n-str)]\n    (cond (= (first n-str) \\0) (cows (rest n-str))\n      (= n-str '()) 0\n        :else\n        (int (+ (Math/pow 2 (- length 1)) (cows (rest n-str)))))))","problem":122,"user":"50611456e4b0dc10a69545a5"},{"problem":122,"code":"(fn [s]\n  (let [rs (clojure.string/reverse s)\n        v (map #(if (= \\1 %) 1 0) rs)\n        vi (map-indexed vector v)\n        vp (map (fn [[a b]] (* b (Math/pow 2 a))) vi)]\n    (int (reduce + vp))))","user":"5e12327ee4b099d064962fe5"},{"problem":122,"code":"(fn [a] (Integer/parseInt a 2))","user":"5188c249e4b0bdff0e072d54"},{"problem":122,"code":"#(reduce + (map-indexed \n            (fn [i x] (* \n                       (reduce * (repeat i 2))\n                       (- (int x) 48))) \n            (reverse %)))","user":"59e0f38ae4b08badc2a0c500"},{"code":"reduce (fn [res val] (+ (* 2 res) (if (= val \\1) 1 0))) 0","problem":122,"user":"4feada56e4b0140c20fb9c11"},{"problem":122,"code":"(fn [b-str]\n    (read-string (str \"2r\" b-str)))","user":"513e8141e4b02b2a3d8235c1"},{"code":"(fn b2n [s]\n  (let [f (fn f1 [s1 n]\n        (cond (= (count s1) 0) n\n              :else (let [i (- (int (first s1)) (int \\0))\n                          len (count s1)\n                          ji (int (Math/pow 2 (dec len)))]\n                      (f1 (rest s1) (+ n (* i ji))))))]\n    (f (seq s) 0)))","problem":122,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":122,"code":"#(->> (map (fn [x p] (* x (Math/pow 2 p)))\n           (map (comp read-string str) (reverse %))\n           (range))\n      (reduce + )\n      int)","user":"57c94c6ee4b05aa3c4741d2d"},{"problem":122,"code":"#(. Integer parseInt  % 2)","user":"531bfb69e4b08068f379ed97"},{"problem":122,"code":"#(int (reduce + (map (fn [[idx bit]] (if (= bit \\1) (Math/pow 2 idx) 0)) (map-indexed vector (reverse %)))))","user":"5ddd3cbee4b0948ae9d9adc3"},{"code":"(fn ready-binary-string\n  [s]\n  (Integer/parseInt s 2))","problem":122,"user":"4e3bcccd535deb9a81d77f56"},{"problem":122,"code":"(fn [x] \n   (int (apply + \n          (map-indexed \n            #(if (= (Character/digit %2 10) 0) \n               0 \n               (* (Character/digit %2 10) (Math/pow 2 %1))) \n            (reverse x)))))","user":"57213df6e4b0c5bde472c0ab"},{"problem":122,"code":"(fn bin-to-dec [bin]\n  (loop [bin (reverse bin) pos 1 sum 0]\n    (if (empty? bin)\n      sum\n      (recur (rest bin) (bit-shift-left pos 1) (if (= \\1 (first bin)) (+ sum pos) sum)))))","user":"55151417e4b055c2f668d4da"},{"problem":122,"code":"(fn [bs] (loop [bs (reverse bs) e 0 s 0]\n   (if (empty? bs)\n     s\n     (recur (rest bs) (inc e) (+ s (* (int (Math/pow 2 e)) (read-string (str (first bs)))))))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":122,"code":"(fn [st]\n  (let [s (re-seq #\"[0-1]\" (clojure.string/reverse st) )]\n  (loop [res 0 mul 1 l s]\n    (if (empty? l) res\n    (recur \n      (if (= \"0\" (first l)) res (+ res mul))\n      (* mul 2)\n      (rest l)\n    )\n  )\n  )\n)\n)","user":"5e94ff5fe4b0fbed045a37ff"},{"code":"(fn [b] (->> (reverse b)\n             (map #(if (= % \\1) 1 0))\n             (map-indexed #(* (Math/pow 2 %1) %2))\n             (apply +)))","problem":122,"user":"4f569a3ce4b0a7574ea71828"},{"code":";;#(Integer/parseInt % 2)\n\n(fn [s] \n  (apply + \n    (map #(Math/pow 2 %)\n      (keys \n        (filter #(= \\1 (val %)) \n          (zipmap (iterate inc 0) (reverse s)))))))","problem":122,"user":"4ec18451535dfed6da9c6db0"},{"problem":122,"code":"(fn bin-str-to-int\n  ([string] (bin-str-to-int string 0 (dec (count string))))\n  ([[x & xs] res pow] \n   (if (nil? x)\n     (int res)\n     (bin-str-to-int xs\n      \t\t\t\t (+ res (* (Math/pow 2 pow) (Character/getNumericValue x)) )\n                     (dec pow)))))","user":"5d48884ee4b07c84aa5ae6bb"},{"code":"(fn [s] (apply + (map #(if (= %1 \\1) (bit-shift-left 1 %2) 0) (reverse s) (range))))","problem":122,"user":"504d0116e4b022602c20b089"},{"problem":122,"code":"reduce\n   #(+ (* 2 %1) (- (int %2) 48))\n   0","user":"5742ec91e4b05c31a32c0883"},{"problem":122,"code":"#(int (reduce + (map (fn [c p] (* (if (#{\\0}c) 0 1) (Math/pow 2  p))) (seq %) (reverse (range 0 (count %))))))","user":"59419bdfe4b060784b3b78f7"},{"problem":122,"code":"(fn [xs]\n  (let [to-num #(read-string (.toString %))\n        power #(int (Math/pow 2 %))\n        raise (fn [idx char] (* (power idx) (to-num char)))]\n    (apply + (map-indexed raise (reverse xs)))))","user":"5344fe13e4b084c2834f4a32"},{"problem":122,"code":"(fn read-bin\n  [s]\n  (letfn [(binary-values\n            ([]\n             (binary-values 1))\n            ([n]\n             (lazy-seq (cons n (binary-values (* 2 n))))))]\n\n    (let [binary-i-need\n          (reverse (take (count s) (binary-values)))]\n      \n      (->> (map (fn [char] (Integer/parseInt (str char))) s) ;; char->int\n           (interleave binary-i-need)\n           (partition 2)\n           (reduce (fn [current next] (+ current (* (first next) (second next)))) 0)))))","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn binary-str-to-int [str]\n  (let [s (map #(- (int %) (int \\0)) (seq str))]\n    (reduce (fn [a b] (+ (* a 2) b)) 0 s)))","problem":122,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":122,"code":"(fn [x]\n   (loop [res 0 s (map #(read-string (str %)) (reverse x)) count 0]\n     (if (empty? s) res\n                    (recur (+ res (* (first s)\n                                     (reduce * (repeat count 2))\n                                     )\n                              )\n                           (rest s) (inc count))\n                    )\n     )\n   )","user":"55d42f78e4b0e31453f64a73"},{"problem":122,"code":"#(apply + (map-indexed (fn [i v] (apply * (cons ({\\0 0 \\1 1} v) (repeat i 2)))) (reverse %)))","user":"56baa68ce4b0f26550335947"},{"code":"(fn from-bin [st]\n  (reduce\n   + (for [[i c] (map-indexed vector (reverse st))]\n    (bit-shift-left\n     (if (= c \\0) 0 1) i))))","problem":122,"user":"512da425e4b040332b905b34"},{"problem":122,"code":"(fn [x] (reduce + (map * (reverse (take (count x) (iterate #(+ % %) 1))) (map #(- (int %) 48) x))))","user":"558f4fbae4b0277789237661"},{"problem":122,"code":"(fn [s]\n  (let [bn (map #(- (int %) 48) (reverse s)) top (count s)]\n    (loop [x 0 acc 0 acc2 1]\n      (if (< x top)\n      (recur (inc x) (+ acc  (* (nth bn x) acc2)) (* 2 acc2))\n       acc))))","user":"581a5fdbe4b0e114eb51a002"},{"problem":122,"code":"(fn [bin-string]\n  (loop [digits (reverse (seq bin-string))\n         value 0\n         place 1]\n    (if (empty? digits)\n      value\n      (recur (rest digits)\n             (+ value \n                (if (= (first digits) \\1) \n                  place\n                  0))\n             (* place 2))\n      )\n    )\n  )","user":"58562083e4b0f14aab7c86eb"},{"code":"#(apply + (map * (iterate (partial * 2) 1) (reverse (map (fn [c] (Character/getNumericValue c)) %))))","problem":122,"user":"5259a16ee4b0cb4875a45ce1"},{"code":"(fn [s] (reduce + (map-indexed #(* %2 (.pow (bigint 2) %)) (reverse (map (comp #(Integer/parseInt %) str) (vec s))))))","problem":122,"user":"4dd88803535d2dad7130b5d9"},{"problem":122,"code":"(fn to-binary\n  [s]\n  (->> s\n       (map #(Integer. (str %)))\n       (reduce #(+ (* 2 %1) %2) 0)))","user":"5b13ba71e4b0cc2b61a3be53"},{"code":"(fn [x]\n  (loop [chs (reverse x), i 1, v 0]\n    (if (empty? chs)\n      v\n      (recur\n        (rest chs)\n        (* i 2)\n        (+ v (* i (if (= \\1 (first chs)) 1 0)))))))","problem":122,"user":"4ea4fe1f535d7eef308072cf"},{"problem":122,"code":"(fn[ss]\n  (reduce + \n          (map-indexed \n           \t#(* \n              (int (Math/pow 2 %1)) \n              (if (= %2 \\1) 1 0)\n             ) \n          (reverse ss))\n  )\n)","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":122,"code":"reduce #(+ (* 2 %) (if (= %2 \\0) 0 1)) 0","user":"552d9b31e4b076ab5578f7eb"},{"problem":122,"code":"(fn [d] (Integer/parseInt d 2))","user":"57202eb7e4b0c5bde472c090"},{"code":"(fn [s]\n  (let [bits (map {\\1 1 \\0 0} s)]\n    (loop [acc 0 b bits]\n      (if (empty? b) acc\n          (recur (+ (first b) (* 2 acc)) (rest b))\n))))","problem":122,"user":"4db883e1535d1e037afb2198"},{"problem":122,"code":"(fn [s]\n  (letfn [(inner [v [x & xs]]\n              (if (nil? x)\n                v\n                (inner (+ (- (int x) (int \\0)) (* 2 v)) xs)))]\n    (inner 0 (seq s))))","user":"518ba795e4b0f028e99addf0"},{"problem":122,"code":"(fn [x]\n  (loop [[next-value & remainder :as to-process] (reverse (seq x))\n         n 0\n         result 0]\n    (if (empty? to-process)\n      result\n       (recur\n        remainder\n        (inc n)\n        (if (= next-value \\1)\n          (+ result (.intValue (Math/pow 2 n)))\n          result)))))","user":"55d06bcbe4b0e31453f64a3a"},{"code":"(fn [b]\n  (letfn [(v [s b]\n            (if (empty? b) s\n                (let [d (.substring b 0 1)\n                      r (.substring b 1)\n                      sp (* s 2)]\n                  (if (= d \"0\") (v sp r)\n                      (v (inc sp) r)))))]\n    (v 0 b)))","problem":122,"user":"4ede8e1d535d10e5ff6f5339"},{"code":"(fn [s]\n  (int\n   (reduce +\n           (let [len (count s)]\n             (conj (map (fn [[i v]] (if (= v \\0) 0 (. Math pow 2 (- len i))))\n                        (map vector (iterate inc 1) (butlast s)))\n                   (if (= (last s) \\0) 0 1))))))","problem":122,"user":"5225271fe4b01819a2de42f9"},{"code":"(fn [string]\n  (let [powers (iterate #(* % 2) 1)\n        digits (map #(Character/getNumericValue %) (reverse string))]\n    (apply + (map * digits powers))))","problem":122,"user":"53779a26e4b06839e8705e38"},{"problem":122,"code":"(fn binary-read [num]\n  (loop [i (- (count num) 1) l num s 0]\n    (if (empty? l)\n      s\n      (recur (dec i)\n             (rest l)\n             (+ s (if (= (first l) \\1)\n                    ((fn [n] (reduce * (repeat n 2))) i) 0))))))","user":"5a653f80e4b0512ff01cd9b2"},{"problem":122,"code":"(fn [x]\n  (apply +\n         (map *\n         (iterate (partial * 2) 1)\n         (map #(- (int %) (int \\0)) (reverse x)))))","user":"54c5cc17e4b045293a27f624"},{"problem":122,"code":"#(let [xs (reverse %)]\n   (loop [n 0 i 1 [x & xs] xs]\n     (if x\n       (if (= \\0 x)\n         (recur n (* i 2) xs)\n         (recur (+ n i) (* i 2) xs))\n       n)))","user":"4f8490fae4b033992c121c34"},{"problem":122,"code":"(fn [s]\n  (loop [s (seq s)\n         n (- (count s) 1)\n         ret 0]\n    (if (nil? s)\n      ret\n      (let [v (if (= (first s) \\1)\n                (reduce * 1 (repeat n 2))\n                0)]\n        (recur (next s) (dec n) (+ ret v))))))","user":"5d35f997e4b01671435dbd1a"},{"code":"#(reduce +\n         (map-indexed\n           (fn [i n] (if (= \\1 n)\n                       (apply * (repeat i 2))\n                       0))\n           (reverse %)))","problem":122,"user":"51057b2be4b06d28cacc92e8"},{"code":"(fn [str]\n   (apply + (map-indexed\n             (fn [idx c]\n               (if (= \\1 c)\n                 (reduce * (repeat idx 2))\n                 0))\n             (reverse str))))","problem":122,"user":"51f40975e4b0fca5e8b4822e"},{"problem":122,"code":"(fn [x]\n  (loop [ans 0\n         d (dec (count x))\n         x x]\n    (if (< d 0)\n      ans\n      (if (= 49 (int (first x)))\n        (recur (+ ans (int (Math/pow 2 d))) (dec d) (rest x))\n        (recur ans (dec d) (rest x))))))","user":"5e07cf97e4b0978307768fb9"},{"problem":122,"code":"(fn bin [n]\n  (cond \n    (empty? n)\n      0\n    (= \\1 (first n))\n      (+ (reduce * (repeat (- (count n) 1) 2)) (bin (next n)))\n\t:else\n      (bin (next n))))","user":"545801f6e4b01be26fd74615"},{"problem":122,"code":"; #(Integer/parseInt % 2)\n#(reduce (fn [acc d] (+ (* 2 acc) d))\n         0 (map {\\0 0 \\1 1} %))","user":"553698fae4b09218d5f44fc0"},{"problem":122,"code":"(fn [s]\n  (reduce + (map-indexed #(bit-shift-left (Character/digit %2 10) %1) (reverse s))))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"problem":122,"code":"(fn [num-s]\n  (Integer/parseInt num-s 2))","user":"5a9829e5e4b0d174b936c788"},{"problem":122,"code":"(fn [b] (->> b seq (map {\\0 0, \\1 1}) (reduce #(+ (* % 2) %2))))","user":"5416b4a2e4b01498b1a71a01"},{"code":"(fn read-binary [binary]\n  (loop [b binary\n         s 0\n         pow 0]\n    (if (empty? b)\n      s\n      (recur\n       (drop-last b)\n       (+ s (* \n             (#(Integer/parseInt %) (str (last b)))\n             (reduce * (repeat pow 2))))\n       (inc pow)))))","problem":122,"user":"51d360d1e4b099f3b6acddff"},{"problem":122,"code":"(fn BINARY [s]\n  (int (reduce + (map #(* (Integer/parseInt (str %1)) (Math/pow 2 %2)) (reverse s) (iterate inc 0)))))","user":"570ab24fe4b0b0fb43fd06b7"},{"problem":122,"code":"(fn [n]\n  (let [slen (- (count n) 1)]\n\t(int (apply + (keep-indexed #(if (= \\1 %2) (Math/pow 2 (- slen %1))) n)))))","user":"53573d70e4b04ce2eb3ed278"},{"problem":122,"code":"(fn f [s]\n  (loop [s (reverse s)\n         p 1\n         acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s)\n             (* p 2)\n             (+ acc (* p (Character/digit (first s) 10)))))))","user":"5777c3d6e4b0979f8965164f"},{"problem":122,"code":"(fn h2b [bin-digits] \n  (int (reduce (fn [acc [i d]] (+ acc (* d (Math/pow 2 i))))\n          0 \n          (map-indexed (fn [i c] [i (Integer/parseInt (str c))]) \n                       (reverse bin-digits)))))","user":"56a51f26e4b0542e1f8d14e0"},{"code":"(partial\n (fn f [v s]\n   (if (empty? s)\n     v\n     (recur\n      (+ (* 2 v) (if (= \\1 (first s)) 1 0))\n      (rest s))))\n 0)","problem":122,"user":"50ed4626e4b01236b1d4983c"},{"problem":122,"code":"(fn [s]\n  (reduce + (map * (map #(- (int %) (int \\0)) (reverse s))\n                   (iterate (partial * 2) 1))))","user":"53ae0c50e4b047364c044471"},{"problem":122,"code":"(fn [bs]\n  (reduce (fn [r e]\n            (+ (* 2 r) (- (int e) (int \\0)))) 0 bs))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":122,"code":"(fn\n  [string]\n  (Integer/valueOf string 2))","user":"5a3c06fce4b001c08efc0cdd"},{"problem":122,"code":"(fn bin [s]\n  (reduce + 0 (map-indexed #(let [i (Integer/parseInt (str %2))\n                                 n %1] (bit-shift-left i n) ) (reverse s))))","user":"5a66f358e4b0512ff01cd9d5"},{"problem":122,"code":"(fn [s] (reduce-kv\n  #(if (= %3 \\1)\n    (+ %1 (bit-shift-left 1 %2))\n    %1)\n  0\n  (into [] (clojure.string/reverse s))))","user":"5a4993c0e4b05d388ecb6b71"},{"problem":122,"code":"(fn [s]\n                       (let [ nums (map #(- (int %) 48) s)\n                              exps (map #(apply * (repeat % 2))(reverse (range (count s))))\n                              tmp (map #(vector %1 %2) nums exps)\n                             ]\n                         (apply + (map #(apply * %) tmp))\n                         ))","user":"54d05a9de4b0e8a36923e5c7"},{"code":"(fn [d] ((fn [x acc] (println x acc) (if (empty? x) acc \r\n  (recur (drop 1 x) (+ (* acc 2) (if (= (first x) \\1) 1 0)) ))) d 0))","problem":122,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"problem":122,"code":"(fn [x]\n        (loop [a (reverse x) m 1 r 0]\n        (if (seq a)\n                (recur (rest a) (* m 2) (+ r (* m (- (int(first a)) (int \\0)) )))\n                r\n        ))\n)","user":"5661b0a9e4b068f2fe63dc6f"},{"code":"(fn f [x]\n  (cond (empty? x) 0\n        (= (last x) \\1) (+ 1 (* 2 (f (butlast x))))\n        :else (* 2 (f (butlast x)))))","problem":122,"user":"5102489de4b00c483ae176f6"},{"code":"(fn bin\n  [s]\n  (loop [r 0 s s]\n    (if (= 0 (count s)) (int r)\n      (if (= \\0 (first s))\n        (recur r (rest s))\n        (recur (+ r (Math/pow 2 (dec (count s))))\n               (rest s))))))","problem":122,"user":"4f1bb9d8535d64f60314647d"},{"code":"(fn [string]\n  ((fn [v power-of-two sum]\n     (if (empty? v)\n       sum\n       (recur (butlast v) (* 2 power-of-two) (+ sum (if (= \\1 (last v)) power-of-two 0))))) \n   (into [] (seq string)) 1 0))","problem":122,"user":"50d86fe2e4b01f0871336e67"},{"problem":122,"code":"(fn [x] (int (apply + (map #(if (second %) (Math/pow 2 (first %)) 0) \n                           (zipmap (range) (map #(= \\1 %) (reverse (seq x))))))))","user":"4f35e662e4b0e243712b1ec6"},{"code":"(fn [x] (reduce #(+ (* 2 %) %2) (map #(- (int %) (int \\0)) x)))","problem":122,"user":"538557aee4b06839e8705f02"},{"code":"(fn [st] (apply +                                   ; 7. Add the elements of the seq in 6. to get the final answer\n                (map *                              ; 6. Multiply each binary digit by its power of 2; returns a seq\n                     ((fn [s] (reverse              ; 5. Reverse the seq in 3. to match the powers-of-2 seq\n                               (map                 ; 3. Converts binary string to seq of binary digits\n                                #(if (= % \\0) 0 1)  ; 1. Fcn that converts \\0 to 0, \\1 to 1 \n                                    (seq s))))      ; 2. A binary string converted to a seq of \\0 and \\1 chars\n                      st) \n                     (iterate #(+ % %) 1))))        ; 4. The infinite powers-of-2 seq (1 2 4 8 16 ... )","problem":122,"user":"4f80db02e4b033992c121bf9"},{"problem":122,"code":"#(Integer/valueOf %1 2)","user":"54b31445e4b09f271ff37d35"},{"problem":122,"code":"(fn [bits]\n  (reduce #(+ (* 2 %1) %2) (map (comp #(- % 48) int) (seq bits))))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":122,"code":"(fn [s]\n  (first (reduce\n          (fn [a b]\n            (if (= b \\1)\n              [(+ (first a) (second a)) (* 2 (second a))]\n              [(first a) (* 2 (second a))]))\n          [0 1]\n          (reverse s))))","user":"5c2836ebe4b07e362c2305d4"},{"code":"reduce #(+ (* %1 2) (int (read-string (str %2)))) 0","problem":122,"user":"528e64b7e4b0239c8a67aedd"},{"problem":122,"code":"(fn [b]\n  (reduce + (map * (reverse (map #(- (int %) (int \\0)) b)) (iterate  #(* 2 %) 1))))","user":"535558b9e4b04ce2eb3ed25a"},{"problem":122,"code":"(fn [input] (reduce #(+ (* %1 2) (if (= %2 \\1) 1 0)) 0 input))","user":"54d22860e4b0e8a36923e5ef"},{"code":"(fn [s] \n  (reduce + 0 (map-indexed \n    (fn [i v] (if (= v \"1\") (Math/pow 2 i) 0))\n    (reverse (drop 1 (.split s \"\")))\n  ))\n)","problem":122,"user":"4f1595da535d64f603146444"},{"problem":122,"code":"(fn [s] (loop [r 0\n                n 0\n                s s]\n           (if-let [x (last s)]\n             (let [a (if (= x \\1) (reduce * 1 (repeat n 2)) 0)]\n               (recur (+ r a) (inc n) (drop-last s)))\n             r)))","user":"56dc3bdfe4b0ea9b8538f819"},{"problem":122,"code":"(fn [s]\n  (reduce \n  \t#(+ (* 2 %1) \n       \t(- (int %2) 48))\n  \t0 \n \ts))","user":"53161a56e4b08068f379ed3e"},{"problem":122,"code":"(fn [s]\n  (loop [res 0\n         [fst & rst :as all] (reverse s)\n         pow 1]\n    (if (empty? all)\n      res\n      (if (= 1 (Character/digit fst 10))\n        (recur (+ res pow) rst (* pow 2))\n        (recur res rst (* pow 2))\n        )\n      )\n    )\n  )","user":"55f33f0ce4b06e875b46ce59"},{"problem":122,"code":"(fn [astr]\n  (let [num_str \n         (flatten (partition-by identity astr))\n        power \n         (reverse (range (count num_str)))]\n    (reduce + (map #(let [z (if (= %1 \\1) 1 0)] \n            (* z (apply * (repeat %2 2N)))) num_str power))))","user":"567d18c9e4b05957ce8c61c4"},{"code":"(fn bin-to-dec [n] \n  (let [pow2 (- (count n) 1) \n        x (first n) \n        add (if (= \\1 x) (int (Math/pow 2 pow2)) 0)\n        result (if x (+ add (bin-to-dec (rest n))) 0)] \n    result))","problem":122,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn [s] (apply + (map * (iterate #(* 2 %) 1) (map (comp read-string str) (reverse s)))))","problem":122,"user":"4ef6e689535dced4c769f24f"},{"code":"(fn [s]\n  (apply + (map-indexed (fn [i b]\n                 (if (= b \\0)\n                   0\n                   (Math/pow 2 i)))\n               (reverse s))))","problem":122,"user":"4e7dd982535db169f9c796ee"},{"code":"(fn [s] (reduce + (map * (map #(Integer/parseInt (str %)) (seq (reverse s))) (iterate #(* % 2) 1))))","problem":122,"user":"531f1e63e4b08068f379edc2"},{"problem":122,"code":"#(apply + (map-indexed (fn [x y] (if (= y \\1) (reduce * (repeat x 2)) 0)) (reverse %1)))","user":"5c1aadcde4b01240ff567209"},{"code":"(fn [s]\n (int (apply +  (map #(* (Math/pow 2 (- (dec (count s)) %)) (read-string (str (get s %)))) (range 0 (count s))))))","problem":122,"user":"515ff4b9e4b0e2be8aa20bd9"},{"problem":122,"code":"(fn [s] (reduce + (map-indexed \n               #(int (* (Math/pow 2 %1) %2))\n               (map #(- (int %) 48) (reverse s)))))","user":"55933c7ae4b0c79f6e1db938"},{"code":"(fn bin2int [num-str] (int (reduce + (map-indexed #(* ({\\0 0 \\1 1} %2) (Math/pow 2 %)) (reverse num-str)))))","problem":122,"user":"5102ac9de4b00c483ae176fa"},{"problem":122,"code":"(fn [b] (reduce + (map #(* (- (int %1) 48) (apply * (repeat %2 2))) (reverse b) (range))))","user":"54508859e4b0e397800069a3"},{"problem":122,"code":"(fn [t] (loop \n          [acc 0 \n           target (into [] (map (fn [x] (- (int x) 48)) t)) \n           power 1] \n          (if (empty? target) acc\n            (recur (+ acc (* power (last target))) (pop target) (* power 2)))))","user":"56af842de4b061e3ca319ad2"},{"problem":122,"code":"(fn readBinary\n  [binary]\n  (->> (seq binary) (reverse) (map-indexed vector) (map (fn [a] (cond\n                                                                  (= (second a) \\1) (int (Math/pow 2 (first a)))\n                                                                  :else\n                                                                  0))) (reduce +)))","user":"5aa00b7fe4b0d174b936c825"},{"problem":122,"code":"(fn [binstr]\n  (reduce + (map-indexed\n              #(* (reduce * (repeat %1 2)) %2)\n              (reverse (map #(Integer/parseInt %) (map str (seq binstr)))))))","user":"57bfffc7e4b05aa3c4741c8a"},{"code":"(fn [bin]\n  (reduce + (map #(bit-shift-left (- (int %2) 48) %1)\n                  (iterate inc 0) (reverse bin))))","problem":122,"user":"4e5a460f535d8a8b8723a2ab"},{"problem":122,"code":"(fn[s] (reduce + (map #(if (= \\1 %1) %2 0) (reverse s) (iterate #(* 2 %) 1))))","user":"57b9fc74e4b0fbc9809a27fb"},{"code":"(fn [s]\n  (reduce + \n          (map-indexed (fn [index bin] (if (= \\1 bin) (bit-shift-left 1 index) 0)) \n                       (reverse s))))","problem":122,"user":"51269362e4b083bb8f88cf09"},{"problem":122,"code":"(fn [binary-number-string]\n  (reduce\n    #(+ (* 2 %1) (if (= \\1 %2) 1 0))\n    0 binary-number-string))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":122,"code":"(fn [number](Integer/parseInt number 2 ))","user":"5f737899e4b02876ed9fd099"},{"problem":122,"code":"(fn f122 [s]\n  (reduce + (map #(apply * %)(partition 2 (interleave (for [t (str s)] (- (int t) 48)) (map #(/ (bit-shift-left 2 %) 2)(reverse(range (count (str s)))))))))\n  )","user":"526698c9e4b03e8d9a4a7144"},{"code":"#(reduce + 0 (map\n          (fn [p q] (if\n                      (= q \\0)\n                      0\n                      p))\n          (iterate (partial *' 2) 1)\n          (reverse %)))","problem":122,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"problem":122,"code":"(fn [s]\n\t\t(->>\n\t\t\ts\n\t\t\t(map-indexed #(list %1 (Character/getNumericValue %2)))\n\t\t\t(reduce \n\t\t\t\t#(+ %1\n\t\t\t\t\t; first is idx, second is 1|0\n\t\t\t\t\t(* (second %2) (reduce * (repeat (- (count s) (first %2) 1) 2) ) )\n\t\t\t\t)\n\t\t\t0)\n\t\t)\n\t)","user":"5bbbd484e4b0a20761a23617"},{"problem":122,"code":"(fn [string]\n  (int (reduce + (map (fn [[index val]]\n                        (* val (Math/pow 2 index))) (map-indexed vector (map #(Character/digit % 10) (reverse string)))))))","user":"60b8b0f8e4b0e0fa5f1b425c"},{"code":"(fn [x]\n  (let [n (->> x seq (map #(Character/getNumericValue %)) reverse)]\n    (loop [bin n x 1 r 0]\n      (if (empty? bin)\n        r\n        (recur (rest bin) (* 2 x) (+ r (* (first bin) x)))))))","problem":122,"user":"50645e12e4b007509339a58a"},{"problem":122,"code":"(fn [x]\n  ((fn [s p a]\n    (if (= s '())\n      a\n      (if (= \\1 (first s))\n        (recur (rest s) (inc p) (+ a (.pow (BigInteger. \"2\") p)))\n        (recur (rest s) (inc p) a))))\n   (reverse (seq x)) 0 0))","user":"53aaaf7ae4b047364c044444"},{"problem":122,"code":"#(reduce (fn [res x] (+ res res x)) (map (fn [ch] (- (int ch) (int \\0))) %))","user":"57015a1de4b08d47c97781d4"},{"code":"#(Integer/parseInt  % 2)","problem":122,"user":"517945dce4b0684c1c981a43"},{"code":"(fn\n  [arg]\n  (let [places (reverse (map #(Character/getNumericValue %) (vec arg)))\n        n_max (-> places count inc)\n        powers-of-2 (take n_max (iterate (partial * 2) 1))\n        ans (apply + (map * powers-of-2 places))]\n    ans))","problem":122,"user":"4ef7a483535dced4c769f258"},{"problem":122,"code":"#(reduce (fn [a x] (+ (* 2 a) (if (= x \\0) 0 1))) 0 %)","user":"5a4de614e4b05d388ecb6bb1"},{"problem":122,"code":"(fn conver-to-decimal [string]\n  (let [offset 48\n        binary-numbers (map #(- (int %) offset) string)\n        powers-of-two (reverse (take (count string) (iterate #(* % 2) 1)))\n        ]\n    (reduce + (map #(* %1 %2) binary-numbers powers-of-two))))","user":"4fbfbd4fe4b081705acca31c"},{"problem":122,"code":"(fn [s]\n  (apply + (map #(* (Integer. (str %1)) %2) (-> s seq reverse) (iterate #(* 2 %) 1))))","user":"5488537be4b0e286459a11cf"},{"code":"(fn [s]\n  (reduce #(+ (* %1 2) (- (int %2) (int \\0))) 0 (seq s)))","problem":122,"user":"4f7e29dde4b06e829148e1ca"},{"problem":122,"code":"(fn [s] \n  (->> (re-seq #\"[01]\" s)\n       (map read-string)\n       (reduce #(+ (* % 2) %2) 0)))","user":"5ccf21c4e4b0ccb0619628c1"},{"code":"(fn f [s]\n   (let [d (- (int (last s)) (int \\0))\n         rest (butlast s)]\n     (if (empty? rest)\n       d\n       (+ d (* 2 (f rest))))))","problem":122,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":122,"code":"(fn to-decimal\n  [binary-string]\n  (apply + (map-indexed #(if (= \\0 %2) 0 (reduce * (repeat %1 2))) (reverse (seq binary-string)))))","user":"58a1d00ae4b02bd94d917ec6"},{"problem":122,"code":"(fn binstr_to_num [s]\n  (loop [coll (map #(if (= % \\0) 0 1) s)\n         idx (dec (count coll))\n         res 0]\n    (if (neg? idx) (int res)\n        (recur (next coll) (dec idx) (+ res (* (first coll) (Math/pow 2 idx)))))))","user":"55f6f1d3e4b06e875b46cea0"},{"problem":122,"code":"(fn [binary-number]\n  (loop [binary-number binary-number\n         decimal-number 0\n         factor 1]\n    (if (empty? binary-number)\n      decimal-number\n      (if (= \\0 (last binary-number))\n        (recur (drop-last binary-number) decimal-number (* 2 factor))\n        (recur (drop-last binary-number) (+ decimal-number factor) (* 2 factor))))))","user":"5d68f5e6e4b0db5d338d1605"},{"problem":122,"code":"(fn [s]\n  (reduce +\n    (map #(* (int (Math/pow 2.0 %1)) (Integer/valueOf %2))\n      (range)\n      (map str (reverse s)))))","user":"4f04664a535dcb61093f6bc1"},{"problem":122,"code":"(fn [n] (reduce #(+ (* %1 2) (- (int %2) 48)) 0 n))","user":"55316b8ae4b076ab5578f825"},{"problem":122,"code":"(fn [s]\n  (let [exp #(if (zero? %1) 0 (reduce * (repeat %2 %1)))]\n    (reduce + (map #(exp (* 2 %1) %2) (map #(Long. (str %)) s) (reverse (range (count s)))))))","user":"55d5e80ee4b0e31453f64a91"},{"problem":122,"code":"(fn [s] (apply + (map\n                    (fn [[a b]] (int (* (Math/pow 2 a) b)))\n                    (map vector \n                         (range) \n                         (map \n                           (fn [a] (- (int a) 48)) \n                           (reverse s))))))","user":"571543bbe4b07c98581c3ad4"},{"code":"#(int (apply + (map-indexed (fn [i e] (if (= e \\0) 0 (Math/pow 2 i))) (reverse %))))","problem":122,"user":"5092fe10e4b097f48cc3857e"},{"code":"(fn\n  [s]\n  (read-string (str \"2r\" s)))","problem":122,"user":"52dfc89be4b09f7907dd1405"},{"problem":122,"code":"#(loop [v 0 p 1 [ch & rstr] (reverse %)] (let [n (+ v (if (= ch \\0) 0 p))] (if-not (seq rstr) n (recur n (* 2 p) rstr))))","user":"56018dd4e4b04bb52996e18f"},{"problem":122,"code":"(fn solution [binary]\n  (loop [bnumber (map (comp read-string str) (str binary))\n         dnumber 0\n         bplace 1]\n    (if (empty? bnumber)\n      dnumber\n      (recur (drop-last bnumber) (+ dnumber (* (last bnumber) bplace)) (* bplace 2)))))","user":"5e2ef900e4b05b4b015161fc"},{"problem":122,"code":"(fn fun [x] ((fn inner [a b] (let [ \n                    z (first a)\n                    w (rest a)] (if (= a (empty a)) b (inner w (+ (* b 2) z) )))) (map (comp read-string str) x) 0))","user":"540479e7e4b0addc1aec665a"},{"code":"(fn bina [n]\n(loop [sn (map #(- (int %1) 48) (seq n)) a 0]\n(if (= (count sn) 0)\na\n(recur (rest sn) (+ a (* (first sn) (last (take (count sn) (iterate (partial * 2) 1)))) ))\n)\n)\n)","problem":122,"user":"4e9de526535dbda64a6f6b8e"},{"code":"(fn to-n\n  [s]\n  (let [ns (->> (seq s)\n                (map #(- (int %) 48))\n                (reverse))\n        pows (iterate #(* % 2) 1)]\n    (reduce + (map #(* % %2) ns pows))))","problem":122,"user":"4e7f32ee535db966e863cc3a"},{"problem":122,"code":"(fn [bin]\n   (loop [bin (reverse bin) base 1 result 0]\n     (if (empty? bin)\n       result\n       (recur (rest bin) (* base 2) (+ result (* base (- (int (first bin)) (int \\0)) ))))))","user":"52fac708e4b047fd55836fff"},{"problem":122,"code":"(fn [s]\n  (reduce + (map-indexed\n             #(if (= %2 \\1)\n                (reduce * (repeat %1 2))\n                0)\n             (reverse s))))","user":"57e2e1bde4b0bfb2137f5a8f"},{"problem":122,"code":"(fn [number]\n  (apply + (map (fn [digit factor]\n         \t      (if (= \\1 digit) factor 0)) \n                (reverse number) \n                (iterate (partial * 2) 1))))","user":"548c6673e4b0e286459a1209"},{"code":"(fn [s]\n  (loop [s s res 0]\n    (if (empty? s) \n      res\n      (recur (rest s) (+ (* res 2) (if (= (first s) \\0) 0 1))))))","problem":122,"user":"4ed55b5d535d10e5ff6f52d8"},{"code":"(fn [bins] (reduce + (map-indexed (fn [idx item] (* (Integer. (str item)) (reduce * (repeat idx 2)))) (reverse bins))))","problem":122,"user":"50b29029e4b03ea880433563"},{"problem":122,"code":"#(->> (reverse %)\n      (map-indexed (fn [i n] (if (= \\1 n) (Math/pow 2 i) 0)))\n      (reduce +)\n              int)","user":"51647faae4b003cf19fdde3b"},{"problem":122,"code":"(fn binToDec [x]\n  (loop [n (reverse x) res 0 weight 1]\n    (println n)\n    (if (empty? n)\n      res\n      (recur (rest n) (+ res (* (Integer/parseInt (str (first n))) weight)) (* weight 2)))))","user":"5a9482b7e4b0d174b936c737"},{"problem":122,"code":"(fn [a] (apply + (map (fn [e1 e2] (if (= 1 e1) e2 0))\n               \n    (map #(if (= (str %) \"1\") 1 0) a)\n                       \n    (reverse (take (count a)      \n         (iterate #(* % 2) 1)))\n               \n  )))","user":"56791447e4b05957ce8c6183"},{"problem":122,"code":"(fn [s]\n  (let [a (map #(- (int %) 48) (vec s))\n        b (count s)\n        c (map #(apply * (repeat %2 %)) (repeat b 2) (range (dec b) -1 -1))]\n    (apply + (map * a c))))","user":"566d71b1e4b0a866af6896ca"},{"code":"(fn [s] (reduce (fn [a x] (+ (* a 2) (if (= x \\1) 1 0))) 0 s))","problem":122,"user":"4f40f055e4b0e243712b1fc2"},{"problem":122,"code":"(fn p122 [st]\n  (apply +\n    (map #(* %1 %2) \n       (reverse (map #(read-string (str %)) st)) \n       (map #(int (Math/pow %1 %2)) (take (count st) (repeat 2)) (range 0 (count st))))))","user":"52c08c59e4b07a9af5792351"},{"problem":122,"code":"#(reduce (fn [res x] (+ x (* res 2))) (map (fn [x] (- (int x) (int \\0))) %))","user":"563f24f9e4b08d4f616f5ed0"},{"problem":122,"code":"(fn [p]\n    ((reduce \n      #(let[e (% :e)] {:e (* 2 e) :v (+ (% :v) (* e %2))})\n      {:e 1 :v 0}\n      (map #(- (int %) (int \\0)) (reverse p))) :v))","user":"56b1b59be4b0982f16b37df2"},{"problem":122,"code":"(fn bin [x]\n  (if (empty? x)\n    0\n    (+ (read-string (str (last x)))\n       (* 2 (bin (reduce str \"\" (butlast x)))))))","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":122,"code":"(fn to-dec [bin]\n  (if (= (count bin) 0) 0\n      (let [lst (->> bin\n                    (last)\n                    (int)\n                    (#(- % 48)))]\n        (+ lst (* 2 (to-dec (butlast bin)))))))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":122,"code":"#(reduce (fn ([x] x)\n            ([x y] \n             (+ (* 2 x) y)))\n        (map (fn [x] (- (int x) 48)) (seq %)))","user":"5cbd5b42e4b026601754b9f6"},{"problem":122,"code":"(fn read-binary [binnum]\n  (read-string (str \"2r\" binnum)))","user":"5fada7cce4b08cb800c85af5"},{"problem":122,"code":"(fn [coll]\n    (let [xs (clojure.string/split coll #\"\")\n          n (count xs)\n          infseq (reductions (fn [x _] (* 2 x)) (drop 1 (take (inc n) (range))))\n          filseq (filter (fn [[k v]] (= v \"1\")) (map-indexed vector xs))\n          coridx (map #(nth % 0) filseq)]\n      (reduce + 0 (map #(nth (reverse infseq) %) coridx))\n      ))","user":"5a084a24e4b01bb0ae8afdf2"},{"problem":122,"code":"(fn [s]\n   (->> s\n        (map #(- (int %) 48))\n        (reduce #(+ (* 2 %1) %2))))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":122,"code":"#(reduce (fn [res value]\n          (let [res (* 2 res)]\n            (if (= value \\1)\n              (+ res 1)\n              res))) 0 %)","user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":122,"code":"#(Integer/parseInt %1, 2)","user":"533a399de4b0e30313ee6cb9"},{"problem":122,"code":"(fn [s] (reduce #(+ (* 2 %1) %2) 0 (map #(- (int %) (int \\0)) s)))","user":"5457e5f1e4b01be26fd74613"},{"code":"(fn [s]\n         (apply +\n                (map (fn [a b]\n                       (int (* a (Math/pow 2 b))))\n                     (reverse (map #(Integer/parseInt (str % \"\")) s))\n                     (range))))","problem":122,"user":"4db58ccb535d87e67b28fe10"},{"code":"(fn [s]\n  (apply + \n    (map-indexed \n      #(if (= %2 \\1) (bit-shift-left 1 %) 0) \n      (reverse (seq s)))))","problem":122,"user":"50eebf46e4b06330c1f87c61"},{"problem":122,"code":"(fn cal\n   ([x] (cal (bigint x) 0 0))\n   ([x i s]\n    (if (= 0 x)\n      s\n      (let [v (bigint (/ x 10))\n            rem (mod x 10)\n            r (+ s (* rem (int(Math/pow 2 i))))]\n        (cal v (inc i) r)))))","user":"4fbb7010e4b081705acca2e7"},{"problem":122,"code":"(fn read-n\n  ([^String n] (read-n n 2))\n  ([^String n ^Integer b]\n   (let [n-pattern (clojure.string/replace \"10r\" #\"\\d+\" (str b))]\n     (read-string (str n-pattern n)))))","user":"57b4779de4b0fbc9809a279a"},{"code":"(fn [coll]\n  (let [v (vec (reverse coll))]\n    (int (loop [cnt (dec (count v)) rs 0]\n      (if (neg? cnt)\n        rs\n        (if (= \\0 (v cnt))\n          (recur (dec cnt) rs)\n          (recur (dec cnt) \n                 (+ rs (Math/pow 2 cnt)))))))))","problem":122,"user":"51cacda3e4b068dadb8f2227"},{"problem":122,"code":"(fn [bin-number] (reduce #(+ (* 2 %) (-  (int %2) (int \\0))) 0 bin-number))","user":"53480973e4b084c2834f4a52"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [x y] (+ (* 2 x) y))\n          (map (fn [d] (- (int d) (int \\0)))\n               s)))","user":"55c4e48be4b0e31453f649a7"},{"code":"(fn [input]\n  (loop [acc 0, string (reverse (seq input)), mul 1]\n    (if (empty? string)\n      acc\n      (recur (+ acc (if (= \\1 (first string)) mul 0)) (rest string) (* mul 2)))))","problem":122,"user":"50f0ec9ce4b0d527ce5b30df"},{"problem":122,"code":"(fn [s] (reduce + 0 (map-indexed #(if (= \\1 %2) (bit-shift-left 1 %1) 0) (reverse s))))","user":"55645592e4b0c656e3ff1802"},{"problem":122,"code":"(fn [bin-str]\n  (int (reduce + (map-indexed (fn [idx value] (if (= \\0 value) 0 (Math/pow 2 idx)))(reverse bin-str)))))","user":"5a9dbb32e4b0d174b936c7f3"},{"code":"(fn read-bin [b]\r\n    (loop [s (reverse (seq b)) a 0 p 1]\r\n      (if (empty? s)\r\n        a\r\n        (recur (rest s) (if (= \\1 (first s)) (+ a p) a) (* 2 p)))))","problem":122,"user":"4f039524535dcb61093f6b2c"},{"problem":122,"code":"(fn toDecimal\n  [str]\n  (reduce + (map-indexed (fn [index item]\n                 (if (= item 1)\n                   (reduce * (repeat index 2))\n                   0))\n               (reverse (map #(- (int %) 48) str)))))","user":"57fc34f0e4b0d3187e90098e"},{"problem":122,"code":"(fn [s]\n  (loop [elem (reverse s) value 1 total 0]\n    (if (empty? elem)\n      total\n      (if (= \\0 (first elem))\n        (recur (rest elem) (* value 2) total)\n        (recur (rest elem) (* value 2) (+ total value))\n        )\n      )\n    )\n  )","user":"5776558ee4b0979f89651633"},{"problem":122,"code":"(fn bin ([s]\n  (bin s (dec(count s)) 1))\n  ([s n l]\n   (if(< n 0)\n     0\n     (if(= \\1 (get s n))\n       (+ l (bin s (dec n) (* l 2)))\n       (bin s (dec n) (* l 2))))))","user":"5c486dece4b0e06e1360a3c0"},{"problem":122,"code":"(fn x [n] (if (empty? n) 0 (+ (* 2 (x (butlast n))) (if (= (last n) \\1) 1 0))))","user":"51a132cee4b0b292b01ee3ff"},{"problem":122,"code":"(fn [b] (reduce + (map-indexed #(if (= \\1 %2) (reduce * (repeat %1 2)) 0) (reverse b))))","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":122,"code":"#(first (reduce (fn [[s f] x] [(+ s (* f (- (int x) 48))) (* 2 f)]) [0 1] (reverse (seq %))))","user":"606a70a5e4b069485764ddf2"},{"code":"(fn [l]\n  (apply + (map #(if (= \\1 %1) %2 0) (reverse l) (iterate (partial * 2) 1))))","problem":122,"user":"5034b0e1e4b062bc5d7ae167"},{"code":"(fn [x]\n  (reduce + (map * (take (count x) (iterate #(bit-shift-left % 1) 1)) (map #(- (int %) (int \\0)) (reverse (str x)))))\n)","problem":122,"user":"4dd1de4d535dae65d5c462d7"},{"code":"(fn to-bin\n  [s]\n  (let [rev-bits (map #(if (= % \\0) 0 1) (reverse (seq s)))\n        bit-vals (take (count rev-bits) (iterate #(* % 2) 1)) ]\n    (reduce + (map * rev-bits bit-vals))))","problem":122,"user":"4f047c07535dcb61093f6bcd"},{"problem":122,"code":"(fn [bin]\n  (reduce + (map-indexed (fn [idx itm]\n                           (if (= itm \\1)\n                             (int (Math/pow 2 idx))\n                             0)) (reverse bin))))","user":"53791ab7e4b06839e8705e4d"},{"code":"(fn j-binary\n  [num]\n  (if (empty? num)\n    0\n    (if (= \\1 (first num))\n      (loop [x (- (count num) 1) val 1 ]\n        (if (= x 0)\n          (+ val (j-binary (rest num)))\n          (recur (- x 1) (* val 2))))\n      (+ 0 (j-binary (rest num))))))","problem":122,"user":"534ff8a6e4b084c2834f4ad1"},{"problem":122,"code":"(fn [s]\n  (let [b (map #(Character/digit % 10) s)\n        pows (reverse (map #(reduce * (repeat % 2)) (range (count s))))]\n    (apply + (map * b pows))))","user":"53dfbc75e4b0d874e779ae44"},{"problem":122,"code":"#((fn foo [a n]\n(if (> (count a) 1)\n(+ (foo (subs a 0 (- (count a) 1)) (* n 2)) (* n (Character/digit (last a) 10)))\n(* (Integer/parseInt a) n)\n)\n) % 1)","user":"5f1aade6e4b091ba50b4dbe4"},{"code":"(fn [num]\n  (reduce + (map bit-shift-left\n                 (reverse (for [x (seq num)] (- (int x) (int \\0))))\n                 (range))))","problem":122,"user":"4ee88269535d93acb0a6687f"},{"problem":122,"code":"(fn bin2int [s](\n                  let [bs (into [] (map #(Character/digit % 10) s)) bcount (count s)]\n                  (loop [bins bs current 0 total 0](\n                                                    if(>= current bcount) (int total)\n                                                    (recur bins (inc current)\n                                                           (+ total (* (Math/pow 2 (- bcount (inc current) )) (get bins current) ) )\n                                                           )))))","user":"57752a2de4b0979f89651613"},{"code":"(fn [s]\n  (reduce \n    #(bit-or (bit-shift-left %1 1) %2) \n    (map #(Character/digit % 10) s)))","problem":122,"user":"4f36f5f2e4b0e243712b1ece"},{"problem":122,"code":"(fn [x]\n   (reduce +(let [seq (take (count x) (iterate #(* 2 %) 1))]\n              (map #(if (= \\1  %1) %2 0) (reverse x) seq)\n              ))    \n   )","user":"50b25edae4b03ea88043355e"},{"problem":122,"code":"(partial reduce #(+ (* %1 2) (if (= %2 \\0) 0 1)) 0)","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(fn [s]\n  (let [pow (fn [x] (apply * (repeat x 2)))]\n    (apply +\n      (map-indexed \n        (fn [i n] (if (= \\1 n) (pow i) 0)) (reverse s)))))","problem":122,"user":"4e80d71b535db62dc21a62b7"},{"problem":122,"code":"(fn [b]\n   (apply +\n          (map\n           #(* (- (int %1) (int \\0)) (int (Math/pow 2 %2)))\n           (reverse b)\n           (range (.length b)))))","user":"589f37e0e4b02bd94d917e79"},{"code":"(fn convert-binary\n  [s]\n  (reduce + (map-indexed #(* (int (Math/pow 2 %1)) (Integer/valueOf (str %2))) (reverse (seq s)))))","problem":122,"user":"4edf5dc6535d10e5ff6f5340"},{"problem":122,"code":"#(loop [x %\n\t\tresult 0]\n\t(if (empty? x)\n\t\tresult\n\t\t(recur (next x) (+ (* 2 result) (- (int (first x)) (int \\0))))))","user":"528d6b10e4b0239c8a67aec3"},{"problem":122,"code":"(fn [s]\n  (->> (reverse s)\n       (map-indexed (fn [i x] (* (Math/pow 2 i) (read-string (str x)))))\n       (reduce +)\n       (int)))","user":"55495318e4b0a04f79299566"},{"code":"(fn [bs]\n  (loop [\tresult 0\n\t\tcurrent-power 1\n\t\tcbs (reverse bs)]\n\t\t(if \t(empty? cbs)\n\t\t\tresult\n\t\t\t(let [\tnext-power (* current-power 2)]\n\t\t\t\t(if\t(= \\0 (first cbs))\n\t\t\t\t\t(recur result next-power (rest cbs))\n\t\t\t\t\t(recur (+ result current-power) next-power (rest cbs))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)","problem":122,"user":"4f951375e4b0dcca54ed6cc8"},{"code":"(fn [s] (reduce + \n  (map #(* %2 ({ \\1 1 \\0 0 } %1)) \n       (reverse s) \n       (iterate (partial * 2) 1)\n   )\n))","problem":122,"user":"502952c9e4b0b33e9bf6fdf1"},{"code":"(fn binval\n\t[binstr]\n\t(reduce +\n\t(map \n\t\t#(* (int (Math/pow 2 %2)) %1)\n\t\t(reverse (map #(Integer/parseInt (str %)) binstr))\n\t\t(range 0 (count binstr)))))","problem":122,"user":"536aa86de4b0243289761eb1"},{"code":"(fn [x]\n  (apply + (map * (iterate #(* 2 %) 1) (reverse (map #(if (= % \\1) 1 0) x)))))","problem":122,"user":"51256b40e4b05d10e3e395f8"},{"code":"(fn [s] \n  ((fn r [b z] \n     (if (empty? z)\n       0\n       (+ (* b (- (int (first z)) (int \\0))) (r (* b 2) (subs z 1))))) 1 (apply str (reverse s))))","problem":122,"user":"525cc137e4b0cb4875a45d46"},{"problem":122,"code":"(fn [n] (reduce #(+ (* 2 %) %2) 0 (map #(- (int %) (int \\0)) n)))","user":"59156f0be4b0163c97b36f3d"},{"problem":122,"code":"(fn [s] \n  (reduce + \n  (map #(reduce * (repeat (second %) 2))\n  (remove #(= \\0 (first %)) (map vector s (reverse (range (count s))))))))","user":"54d03026e4b018d918be98de"},{"problem":122,"code":"(fn __ [s]\n  (let [digits     (vec (map #(- (int %) (int \\0)) (seq s)))\n        digit-vals (map * (reverse digits) (iterate #(* 2 %) 1))]\n    (reduce + digit-vals)))","user":"59eb63e3e4b0249b7282077c"},{"code":"(fn [s] \n  (reduce \n   +\n   (map (fn [a b] (if (= a \\1) b 0)) s (reverse (reductions #(* %1 %2 2) (take (count s)\n                                                                                     (repeat 1)))))))","problem":122,"user":"5150a7d7e4b03e678e393abb"},{"problem":122,"code":"(fn [s]\n  (reduce + \n    (keep-indexed\n      (fn [i x]\n        (when (= x \\1)\n          (bit-set 0 i)))\n      (reverse s))))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":122,"code":"(fn [bin]\n  (loop [in (reverse (seq bin)) mul 1 out 0]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (* mul 2)\n             (if (= (first in) \\1)\n               (+ out mul)\n               out)))))","user":"58b997afe4b0888cdc949cd1"},{"problem":122,"code":"(fn [s] (int \n  (let [ns (reverse (map #(- (int %) 48) s))\n        zs (map vector ns (range (count ns)))]\n    (reduce + (for [[v,i] zs] (* v (Math/pow 2 i)))\n      ))))","user":"51000111e4b00d7ad4cab15e"},{"code":"(fn [s] (reduce + (map * (map #(if (= % \\1) 1 0) (reverse s)) (iterate (partial * 2) 1))))","problem":122,"user":"4f8c5f4fe4b02e764a0a5198"},{"code":"(fn [x] \n  (reduce +\n    (map *\n    (reverse (take (count x) (iterate (partial * 2) 1))) \n    (map #(Character/getNumericValue %) x))))","problem":122,"user":"4fbd12a5e4b081705acca2fd"},{"problem":122,"code":"(fn [x] (reduce + (map * (reverse (map #(- (int %1) 48) (seq x))) (take (count x) (iterate (partial * 2) 1)))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"#(letfn [\n  (bs->int [s i]\n    (if (empty? s)\n      i\n      (let [x (if (= \\0 (first s)) 0 1)]\n        (recur (rest s) (+ x (* 2 i))))))]\n  (bs->int (seq %) 0))","problem":122,"user":"4e8f4f64535d65386fec2149"},{"problem":122,"code":"(fn [s] \n  (->> s\n       (map #(Integer/parseInt (str %)))\n       (map-indexed #(* %2 (int (Math/pow 2 (- (dec (count s)) %1)))))\n       (reduce +)\n   ))","user":"563c7f98e4b0bfe05bf11836"},{"code":"(fn [bin-str]\n  (reduce + (let [reverse-bits (reverse bin-str)\n        exp (fn [x n] (reduce * (repeat n x)))\n        bit-count (count bin-str)\n        bit-values (map #(exp 2 %1) (range bit-count))\n        ]\n    (map (fn [bit bit-value]\n           (if (= \\0 bit)\n             0\n             bit-value)\n           )\n         reverse-bits bit-values)\n    )\n  ))","problem":122,"user":"4f031883535dcb61093f6a5e"},{"problem":122,"code":"(fn [s]\n  (reduce #(-> %1 (* 2) (+ (if (= %2 \\1) 1 0))) 0 (seq s)))","user":"56df254be4b0ca2494a095ea"},{"problem":122,"code":"(fn [b] (apply + (mapv #(* (Character/digit %1 10) %2) ( reverse b) (iterate #(* % 2) 1))))","user":"56347285e4b0bfe05bf117bc"},{"problem":122,"code":"(fn bin-number [str]\n  (reduce +\n          (map *\n               (map #(Integer/parseInt %)\n                    (reverse (rest (clojure.string/split str #\"\"))))\n               (iterate #(* 2 %) 1))))","user":"53e27bf1e4b036ad0777e3f2"},{"problem":122,"code":";reduce #(+ (* %1 2) (- (int %2) (int \\0))) 0\n#(Integer/parseInt % 2)","user":"54ca9ca8e4b057c6fda3a265"},{"problem":122,"code":"#(first\n  (reduce\n   (fn [[agg pow] digit]\n     [(+ agg (* digit pow)) (* pow 2)])\n   [0 1]\n   (reverse\n    (map\n     (fn [c] (if (= c \\1) 1 0))\n     %))))","user":"5b77248ae4b047b03b2036e7"},{"code":"(fn [s] (reduce + (map #(if (= \\0 %) 0 %2) (reverse s) (iterate (partial * 2) 1))))","problem":122,"user":"4fab31a8e4b081705acca215"},{"problem":122,"code":"#(reduce + (map-indexed (fn [i x] (if (= x \\0) 0 (int (Math/pow 2 i)))) (reverse (vec %))))","user":"5884e807e4b0f1effa3b76a6"},{"problem":122,"code":"(fn bin->dec\n  [s]\n  (let [char->int (fn [c] (- (int c)\n                            (int \\0)))]\n    (loop [i 0 n 0 xs (reverse s)]\n      (if (empty? xs)\n        i\n        (recur (+ i (int (* (Math/pow 2 n)\n                            (char->int (first xs)))))\n               (inc n)\n               (next xs))))))","user":"4ea5ba92535d7eef308072d9"},{"problem":122,"code":"(fn read-binary\n  [lst]\n  \n  (Integer/parseInt lst 2))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":122,"code":"(fn [s]  \n   (let [d (map #(Integer/parseInt (str %)) s)] \n     (reduce #(+ %2 (* 2 %1))  d)))","user":"55249f64e4b0882d96d091c6"},{"problem":122,"code":"(fn [s] (reduce #(+ (* % 2) (- (int %2) 48) ) 0 s))","user":"5f686436e4b02876ed9fd03c"},{"problem":122,"code":"(fn [x] (loop [s x k 0] (if (= (count s) 0) k \n    (let [n (if (= \\1 (first s)) (Math/pow 2 (dec (count s))) 0)] \n      (recur (rest s) (+ k (int n)))))))","user":"55278187e4b0ffed3738f92d"},{"code":"(fn [x]\n   (->> (seq x)\n        (map str)\n        (map #(Integer. %))\n        (reverse)\n        (map-indexed #(* %2 (int (Math/pow 2 %1))))\n        (reduce +)))","problem":122,"user":"506c0a02e4b0eda3100c090d"},{"code":"(fn [number]\n  (apply +\n    (map #(* (first %) (second %))\n      (partition 2\n        (interleave\n          (map #(- (int %) (int \\0)) (reverse number))\n          (iterate (partial * 2) 1))))))","problem":122,"user":"50293245e4b08353e5d459cf"},{"problem":122,"code":"(fn [s]\n  (->> s reverse (map-indexed \n    #(let [number (Character/digit %2 10)\n          power %1]\n        (* number (nth (iterate (partial * 2) 1) power))\n  )) (reduce +))\n)","user":"5c7bb8c0e4b0fca0c1622864"},{"problem":122,"code":"(fn [num]\n  (Long/parseLong num 2))","user":"562d869be4b0a45d2ff8301f"},{"problem":122,"code":"(fn [bin-str]\n      (loop [rev-seq (reverse bin-str)\n             cur-bin-power 1\n             result 0]\n        (if (seq rev-seq)\n          (let [cur-char  (first rev-seq)\n                cur-digit (- (int cur-char) 48)\n                cur-value (* cur-digit cur-bin-power)]\n            (recur (rest rev-seq)\n                   (* cur-bin-power 2)\n                   (+ result cur-value)))\n          result)))","user":"5803cd8fe4b0a837a8b30c96"},{"code":"(fn [col]\n  (loop [numbers (seq col) result 0]\n    (if-not (seq numbers)\n      result\n      (recur (rest numbers) (+ (* result 2) (Integer/parseInt (str (first numbers)))))\n      )))","problem":122,"user":"52fcfeeee4b047fd55837027"},{"problem":122,"code":"(comp (partial reduce #(+ % % %2)) (partial map (comp read-string str)))","user":"5960a1a6e4b066ee0a44b08e"},{"problem":122,"code":"(fn\n  [lst]\n  (reduce (fn [accum digit] (+ digit (* 2 accum)))\n          0\n          (map #(- (int %) 48) lst))\n  )","user":"5bc8c033e4b07a9b28b100ca"},{"problem":122,"code":"(fn [s]\n  (loop [[n & ns] (reverse s) p 0 acc 0]\n    (if (nil? n) acc\n                 (recur ns (inc p) (+ acc (* (- (int n) 48) (.pow (BigInteger. \"2\") p)))))))","user":"546176e7e4b01be26fd746a2"},{"problem":122,"code":"(fn [s]\n  (->> (seq s)\n       reverse\n   \t   (replace {\\0 0 \\1 1})\n       (map-indexed #(* %2 (reduce * (take %1 (repeat 2)))))\n       (reduce +)))","user":"5666500ee4b0e91d5f5c566d"},{"problem":122,"code":"(fn [s] (reduce + (map #(* %1 %2) (reverse (map #(if (= % \\1) 1 0) s)) (take (count s) (iterate #(* 2 %) 1)))))","user":"56800ba1e4b0966858e4d8e8"},{"code":"(fn binread [s]\n  (Integer/parseInt s 2))","problem":122,"user":"4f697a66e4b07046d9f4ef8a"},{"problem":122,"code":"#(loop [binstring (seq %)\n        acc 0]\n   (let [parser (fn [c] (case c \\0 0 \\1 1))]\n     (if (empty? binstring) \n       acc\n       (recur (rest binstring) \n              (+ (parser (first binstring)) (* 2 acc))))))","user":"5566d812e4b0c656e3ff1837"},{"code":"(fn [string]\n(let [add-if-1 (fn [char [augend addend]]\n                   (if (= char \\1) (+ augend addend) augend))\n        result-pair (reduce #(vector (add-if-1 %2 %) (* (last %) 2)) [0 1] (reverse string))]\n    (first result-pair)))","problem":122,"user":"4ff83003e4b0678c553fc396"},{"code":"(fn [bin]\n  (let [zero (int \\0)]\n    (loop [s (reverse (seq bin)) x 1 t 0]\n      (if (empty? s)\n        t\n        (recur (rest s) (* 2 x) (+ t (* x (- (int (first s)) zero))))))))","problem":122,"user":"52c81954e4b0c2d177d6212e"},{"code":"(fn binary [input]\n  ((fn binary-helper [xs result]\n     (if (empty? xs)\n       result\n       (binary-helper (rest xs) (+ (* 2 result) (first xs)))))\n   (map #(Integer/parseInt %) (map str (apply list input))) 0))","problem":122,"user":"538c3424e4b0b51d73faae58"},{"code":"(fn [bs] (apply + (map #(if (= \\1 %1) %2 0) (reverse bs) (iterate #(* 2 %) 1))))","problem":122,"user":"50de11b2e4b061dbdced7217"},{"problem":122,"code":"(fn bin [n]\n  (apply + (map #(if (= \\1 %1)\n                   (apply * (repeat %2 2)) 0)\n                (reverse n) (range))))","user":"5d6691cee4b0db5d338d15e9"},{"problem":122,"code":"(fn [xs] (reduce #(+ (* 2 %1) (if (= \\1 %2) 1 0)) 0 (seq xs)))","user":"5cc6b4bfe4b0ccb061962827"},{"code":"reduce \n     (fn [acc x]\n       (+ (* 2 acc) (- (int x) (int \\0)))) 0","problem":122,"user":"502ade49e4b0614b52996120"},{"problem":122,"code":"(fn [s]\n  (letfn [(pow [b p] (int (Math/pow b p)))\n          (parse-int\n            [[d & ds] power acc]\n            (cond\n             (nil? d) acc\n             (= d \\1) (recur ds (inc power) (+ acc (pow 2 power)))\n\t\t\t :else (recur ds (inc power) acc)))]\n    (parse-int (reverse s) 0 0)))","user":"4fdb881ee4b05e33b9224f5e"},{"code":"reduce #(+ (if (= \\1 %2) 1 0) (* 2 %1)) 0","problem":122,"user":"4fff289ae4b0678c553fc3fd"},{"problem":122,"code":"(fn [binStr]\n  (letfn [(expt [n] (reduce * (repeat n 2)))]\n   (apply + (map-indexed (fn [index item] (if (= item \\1) (expt index) 0)) (reverse binStr)))))","user":"5e909685e4b0cb016954634d"},{"problem":122,"code":";(fn [n]\n;  (loop [x (map read-string (clojure.string/split n #\"\"))\n;             y (reverse (map #(int (Math/pow 2 %)) (range 0 (count x))))\n;             z []]\n;    (if (not (seq x))\n;      (reduce + z)\n;      (recur (rest x) (rest y) (conj z (* (first x) (first y)))))))\n\n#(Integer/valueOf % 2)","user":"582c526ae4b051871117bf88"},{"problem":122,"code":"(fn [binary]\n                          (let [digits (map (comp read-string str) (seq binary))]\n                            (int (apply + (map (fn [a b] (* a (Math/pow 2 b))) (reverse digits) (range))))))","user":"54cad2d5e4b057c6fda3a26c"},{"code":"(fn [s]\n  (loop [res 0\n         src s]\n    (if (empty? src)\n      res\n      (if (= \\0 (first src))\n        (recur (* res 2) (rest src))\n        (recur (+ (* res 2) (Integer/parseInt (str (first src)))) (rest src))))))","problem":122,"user":"525ab6cfe4b0cb4875a45cf9"},{"problem":122,"code":"#(reduce + (map-indexed (fn [a b] (reduce * [(reduce * (repeat a 2)) (- (int b) 48)])) (reverse %)))","user":"5b14475be4b0cc2b61a3be5a"},{"problem":122,"code":"(fn [bin]\n  (reduce + (map-indexed\n             #(if (= %2 \\0)\n                0\n                (reduce * (repeat %1 2))) (reverse bin))))","user":"53fc88e7e4b0de5c418485be"},{"problem":122,"code":"(fn [x]\n  (reduce (fn [a z]\n            (let [zz (- (int z) (int \\0))]\n              (+ (* 2 a) zz)\n              )\n            ) 0 x)\n  )","user":"57b8b008e4b0fbc9809a27e6"},{"code":"reduce (fn [s x] (+ (* s 2) (- (int x) 48))) 0","problem":122,"user":"4f9510b5e4b0dcca54ed6cc7"},{"code":"(fn f [s]\n  (if (= 1 (count s))\n    (if (= \\1 (last s)) 1 0)\n    (+ (* 2 (f (butlast s))) (if (= \\1 (last s)) 1 0))))","problem":122,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn parse-bin [s]\n  (let [high (dec (count s))]\n    (->> s\n         (vec)\n         (map-indexed (fn [idx bit]\n                        (if (= \\1 bit) (Math/pow 2 (- high idx)) 0)))\n         (apply +)\n         (int))))","problem":122,"user":"4e5bff2b535d8a8b8723a2bd"},{"code":"(fn [s]\n    (apply +\n           (map #(* % (- (int %2) 48)) ; cast from /1 => 1\n                (iterate (partial * 2) 1) ; powers of 2\n                (reverse s))))","problem":122,"user":"514afd1be4b0bd81940b86c6"},{"code":"(fn [s] (->> s \n  (reverse)\n  (map list (iterate #(+ % %) 1))\n  (map (fn [s] (if (= (second s) \\0) 0 (first s))))\n  (apply +)\n))","problem":122,"user":"50807940e4b01a93d3f38e44"},{"problem":122,"code":"(fn [x] (Integer/parseInt x 2) )","user":"54e51c7be4b024c67c0cf7f7"},{"problem":122,"code":"#(reduce + (for [x (range (count %))] (-> % reverse (nth x) int (- 48) (* (bit-shift-left 1 x)))))","user":"55fc07d3e4b0f488688e066e"},{"code":"(fn [st]\r\n  (loop [s st acc 0]\r\n    (if (empty? s)\r\n      acc\r\n      (if (= \\0 (first s))\r\n        (recur (rest s) (* 2 acc))\r\n        (recur (rest s) (inc (* 2 acc)))))))","problem":122,"user":"5050b107e4b063148f524126"},{"code":"(fn [x] \n  (loop [p2 1 ans 0 v (reverse x)]\n    (if (first v)\n   (recur (* p2 2) (+ ans (* p2 (- (int (first v)) 48))) (rest v))\n   ans)))","problem":122,"user":"536c77f1e4b0fc7073fd6e3f"},{"code":"(fn [b] \n  (int (apply + (for [[x y] (map vector \n                                 (range) \n                                 (reverse (map read-string (re-seq #\"\\d\" b))))\n                      :let [z (* y (Math/pow 2 x))]]\n           z))))","problem":122,"user":"51823a97e4b0f2adb733651e"},{"code":"(fn read-binary [s]\n  (reduce #(+ (* 2 %) (if (= \\1 %2) 1 0)) 0 (seq s)))","problem":122,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn [x] (apply + (map #(* % %2) (map #(- (int %) 48) (reverse x)) (iterate #(* % 2) 1))))","problem":122,"user":"503354c3e4b0c6c1199c710c"},{"code":"(fn [str] (reduce #(+ (* 2 %1) (if (= \\1 %2) 1 0)) 0 (seq str)))","problem":122,"user":"527675cbe4b03e8d9a4a74e2"},{"code":"(fn [xs] (reduce + (map-indexed #(int (* (Math/pow 2 %1) (- (int %2) 48))) (reverse xs))))","problem":122,"user":"4e7f4147535db966e863cc3d"},{"problem":122,"code":"#(loop[acc 0 s (reverse %1) p 0]\n   (cond\n    (empty? s) acc\n    (= (first s) \\0) (recur acc (rest s) (inc p))\n    (= (first s) \\1) (recur (+ acc (reduce * 1 (repeat p 2))) (rest s) (inc p))))","user":"5689fd03e4b0dcc4269f4088"},{"problem":122,"code":"(fn [binary-string] \n  (let [bin-pow (fn [a] \n                  (reduce * (repeat a 2)))\n        indexes (fn [bin-list] \n                  (keep-indexed \n                    #(if (= %2 \"1\") %1) bin-list))]\n    (-> binary-string\n        (clojure.string/split #\"\")\n        reverse\n        indexes\n        (#(map bin-pow %))\n        (#(reduce + %)))))","user":"54f6f00fe4b01ecee9d88814"},{"problem":122,"code":"(fn readbin [str]\n  (reduce #(+ (* 2 %1) (if (= \\1 %2) 1 0)) 0 str))","user":"54e6762be4b024c67c0cf809"},{"problem":122,"code":"#(loop [n 0, m %]\n   (if (empty? m)\n     n\n     (let [n' (* n 2)]\n       (recur (if (= \"1\" (.substring m 0 1)) (inc n') n')\n       (.substring m 1)))))","user":"53d612cbe4b0e771c3025452"},{"problem":122,"code":"(fn b2d [s]\n  (reduce + (map-indexed\n             (fn bitval [i bit] (if (= bit \\1) (int (Math/pow 2 i)) 0))\n             (reverse s))))","user":"560b6895e4b05f002753df1a"},{"problem":122,"code":"#(reduce + (map * (reverse (map read-string (re-seq #\"\\d\" %))) (iterate (fn [n] (+ n n)) 1)))","user":"5ebff55de4b00a66d4a95286"},{"problem":122,"code":"(fn [str]\n  (reduce +\n          (map-indexed #(-> %2 \n                            (int) \n                            (- (int \\0)) \n                            (* (int (Math/pow 2 %1)))) \n                       (rseq (vec str)))))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn [bits]\n  (reduce +\n    (map-indexed \n      (fn [idx itm]\n        (* (.pow (bigint 2) idx) itm))\n      (map #(- (int %) (int \\0)) (reverse bits)))))","problem":122,"user":"4fe9d647e4b0547ebccb2472"},{"problem":122,"code":"(fn [bin]\n  (read-string (str \"2r\" bin)))","user":"54c8ac49e4b045293a27f64e"},{"code":"(fn [s]\n  (loop [d (reverse s) f 1 t 0]\n    (if (not (seq d))\n      t\n      (recur\n        (rest d)\n        (* 2 f)\n        (+ t (if (= \\1 (first d)) f 0))))))","problem":122,"user":"4dbdc9da535d020aff1edf4c"},{"code":"(fn [bin-str]\n  (reduce\n    (fn [res bit]\n      (bit-or (bit-shift-left res 1) (if (= bit \\0) 0 1)))\n    0 bin-str))","problem":122,"user":"4eb1dd39535d7eef30807345"},{"problem":122,"code":"(fn bin2dec\n  [bin]\n  (int\n   (loop\n     [bstring bin\n      value 0]\n     (if (empty? bstring)\n       value\n       (let [digit (Character/digit (first bstring) 10)]\n         (if (= 0 digit)\n           (recur (subs bstring 1) value)\n           (recur (subs bstring 1) (+ value (Math/pow 2 (- (count bstring) 1))))))))))","user":"51b01309e4b0c53cf2e68a57"},{"problem":122,"code":"(fn \n   [s] \n   (reduce \n    (fn [a l] (+ a (* (get l 0) (reduce * (repeat (get l 1) 2))))) \n    0\n    (map #(vector (read-string (str %1)) %2) s (reverse (range (count s)))) \n    )\n   )","user":"557954aae4b05c286339e092"},{"problem":122,"code":"(fn bin-reader [bin-string]\n  (reduce +  \n          (map (fn [x y]\n                 (* y (Character/digit x 10)))\n               (reverse bin-string)\n               (iterate (partial * 2) 1))))","user":"56069006e4b08b23635d3174"},{"code":"#(apply + (map-indexed (fn [i x] (* (int (Math/pow 2 i)) (read-string (str x)))) (reverse %)))","problem":122,"user":"5216933be4b000d124d989cf"},{"problem":122,"code":"(fn [string]\n  (let [digits (map #(Character/getNumericValue %) string)\n        factors (map #(int (Math/pow 2 %)) (range (- (count string) 1) -1 -1))]\n    (reduce + (map * digits factors))))","user":"53e3e353e4b036ad0777e406"},{"problem":122,"code":"(fn  [b]\n  (let\n      [digits (map (comp read-string str) b)]\n\n    (reduce (fn [aggreg d]\n              (+ (* 2 aggreg) d))\n            0\n            digits)\n      ))","user":"5fa6db67e4b0fa27300f3dd2"},{"code":"(fn [binary-str]\n   (let [bin-str (for [x (map #(- (int %1) (int \\0))(seq binary-str))]\n                   x)\n         expt (fn [x pow] (apply * (repeat pow x)))\n         ]\n     (loop [result 0 i (dec (count bin-str))]\n(if (> i -1)       (println (- (count bin-str) i) (nth bin-str i)))\n       (if (= i -1)\n         result\n         (recur (+ result (* (expt 2 (- (dec (count bin-str)) i)) (nth bin-str i)) ) (dec i))\n       )\n     ))\n  )","problem":122,"user":"4ea31da2535d7eef308072c1"},{"problem":122,"code":"(fn [x] (reduce + (filter number? (map-indexed #(if (= \\1 %2) (reduce * (repeat %1 2))) (reverse (seq x))))))","user":"52ba447ee4b07a9af57922ce"},{"code":"(fn [str]\n  (let [char2int (fn [char] (- (int char) 48))\n        max-expt (dec (count str))]\n    (loop [acc 0 expt max-expt x (first str) xs (rest str)]\n      (if (or (< max-expt 0)\n              (nil? x))\n        acc\n        (recur (+ acc (* (char2int x) (Math/pow 2 expt)))\n               (dec expt)\n               (first xs) (rest xs))))))","problem":122,"user":"4dafa380edd6309eace4d17c"},{"code":"(fn [n] (reduce #(+ % % (- (int %2) 48)) 0 n))","problem":122,"user":"528a3e14e4b0239c8a67ae72"},{"problem":122,"code":"(fn read-bin [numb]\n(->>\n \tnumb\n \t(reverse)\n \t(map #(if (= % \\1) 1 0))\n \t(map #(* %1 %2) (iterate #(* 2 %) 1))\n \t(reduce +)\n))","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn foo [str]\n  (if (nil? str)\n    0\n    (+ (- (int (last str)) 48) (* 2 (foo (butlast str))))\n    )\n  )","problem":122,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":122,"code":";#(loop [o 0\n;        n (read-string %)\n;        p (reductions * 1 (repeat 2))]\n;   (if (zero? n)\n;     o\n;     (recur (+ o (* (first p) (mod n 10))) (quot n 10) (rest p))))\n\n(fn [x]\n  (reduce #(+ (* 2 %1) (read-string (str %2))) 0 x))","user":"57533bc1e4b02ea1147992a6"},{"code":"(fn f [s]\n  (if (empty? s) 0\n    (let [a (butlast s) b (last s)]\n      (+ (* 2 (f a)) (Integer/parseInt (str b))))))","problem":122,"user":"4db1bfe21254ad5b4805fa71"},{"problem":122,"code":"(fn [n] (apply + (map * (reverse (map #(if (= 48 %) 0 1)(map int (seq n))))\n                               (iterate #( * 2 %) 1))))","user":"57f3b841e4b0511f1d294e0f"},{"code":"(fn [s] (->> s reverse (map-indexed #(if (= \\1 %2) (Math/pow 2 %1) 0)) (reduce +) (int)))","problem":122,"user":"4ea55757535d7eef308072d3"},{"problem":122,"code":"(fn binary-to-int [bin-str]\n  (let [arr (map #(if (= \\1 %) 1 0) (reverse bin-str))]\n    (loop [power 0 acc 0 digits arr]\n      (if (empty? digits)\n        (int acc)\n        (recur (inc power) (+ acc (* (first digits) (Math/pow 2 power))) (rest digits))))))","user":"5d80f328e4b0915913b1d372"},{"problem":122,"code":"(fn [s] (reduce + (map * (->> s reverse (map #(Character/getNumericValue %))) (iterate #(* 2 %) 1))))","user":"59c94a69e4b0a024fb6ae576"},{"code":"(fn [s]\n  (let [mults (map #(Integer/parseInt (str %)) (reverse s))]\n  (reduce + (map * mults (iterate #(* 2 %) 1)))))","problem":122,"user":"4e68b46c535d8ccf87e9fe87"},{"code":"(fn [s]\n  (let [fs {\\0 #(* 0 %) \\1 #(Math/pow 2 %)}]\n  (loop [b (reverse s) n 0 x 0]\n    (if (empty? b)\n        (int x)\n        (recur (rest b) (inc n)  (+ x ( (fs (first b)) n)))))))","problem":122,"user":"52cdb7efe4b07d0d72b2737c"},{"code":"(fn [s]\n  (loop [r (reverse s)\n         mult 1\n         res 0]\n    (if (empty? r)\n      res\n      (recur (rest r) (* 2 mult) (+ res (* mult (Integer/valueOf (str (first r)))  ))))))","problem":122,"user":"51fe9d7ce4b0f1313d468a70"},{"problem":122,"code":"(partial (fn [r n] (Integer/parseInt n r)) 2)","user":"5a527beee4b05d388ecb6bfe"},{"code":"(fn [x] (reduce #(+ (* % 2) (if %2 1 0))  0\n        (map #(= \\1 %)  x) ) )","problem":122,"user":"4f03688d535dcb61093f6aac"},{"problem":122,"code":"(fn [s]\n  (loop [n 0 m 1 in (reverse s)]\n    (if (empty? in) n (recur (if (= (first in) \\1) (+ n m) n) (* m 2) (rest in)))))","user":"564a5a09e4b0284900eef656"},{"problem":122,"code":"(fn [s]\n    (reduce + (map-indexed \n        (fn [i ch] ({\\0 0 \\1 (bit-shift-left 1 i)} ch))\n        (reverse s))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":122,"code":"#(reduce (fn[acc,x] (+ x (* 2 acc))) 0  (map (fn [ch] (- (int ch) 48)) (seq %1)))","user":"56215c8ee4b03f08ee9a921a"},{"problem":122,"code":"reduce #(+ %1 %1 (int %2) -48) 0","user":"57c647bbe4b05aa3c4741cf3"},{"code":"(fn [n] (apply +\n               (map\n                #(* (- (int %1) (int \\0)) %2)\n                (reverse n)\n                (iterate #(* % 2) 1))))","problem":122,"user":"52ba2af3e4b07a9af57922cc"},{"problem":122,"code":"(fn binary-number' [x]\n  (int (apply +\n              (map *\n                (reduce \n                  (fn [x y] (conj x (Math/pow 2 y))) \n                  '() (take (count x) (iterate inc 0)))\n                (map #(- (int %) (int \\0)) x)))))","user":"605a876be4b000d535e6f53c"},{"code":"#(reduce (fn [s [p d]] (+ s (if (= d \\1) (int (Math/pow 2 p)) 0))) 0 (map vector (iterate inc 0) (reverse (seq %))))","problem":122,"user":"4e3a9dae535deb9a81d77f4a"},{"code":"#(loop [s (seq (reverse %))\n        p 1\n        t 0]\n   (if (seq s)\n     (recur (rest s) (* p 2) (+ t (if (= \\1 (first s)) p 0)))\n     t))","problem":122,"user":"51ab1da1e4b04e3dc0c27b30"},{"code":"(fn [n] (reduce + (map * (reverse (map #(Integer/parseInt (str %)) n)) (iterate (partial * 2) 1))))","problem":122,"user":"51729002e4b044b2ef48a850"},{"problem":122,"code":"(fn [x] (  (fn jp [n] (if (= n 0) 0 (+ (rem n 10) (* 2 (jp (/ (- n (rem n 10)) 10)))))) (read-string x)))","user":"544e1794e4b0e39780006980"},{"problem":122,"code":"(fn [s] \n    (reduce + (map #(* %1 (Integer. (str %2))) (map #(reduce * (repeat % 2)) (reverse (range 0 (count s)))) s)))","user":"55975569e4b031d6649c9b8e"},{"code":"(fn [b]\n  (reduce #(bit-or (bit-shift-left % 1) (Integer/parseInt (str %2))) 0 b))","problem":122,"user":"4e89ff3d535d3e98b802328a"},{"code":"(fn [s]\n  (loop [ans 0 ss (seq s)]\n    (if (empty? ss) \n      ans \n      (recur \n        (+ (* 2 ans) (- (int (first ss)) (int \\0)))\n        (next ss)))))","problem":122,"user":"52196842e4b0890f2f822bfa"},{"code":"(fn [x] \n  (reduce + \n         (map-indexed \n          #(*  (get {\\1 1} %2 0) (int (Math/pow 2 %)) )\n            (reverse x)) ) )","problem":122,"user":"519b7d76e4b02a926d9a436e"},{"problem":122,"code":"(fn [x]\n  (read-string (clojure.pprint/cl-format nil \"~D\" (read-string (str \"2r\" x)))))","user":"575683aee4b02ea1147992dc"},{"code":"(fn [s]\r\n   (loop [[d & ds :as dss] (reverse s), f 1, acc 0]\r\n     (if (empty? dss)\r\n       acc\r\n       (recur ds (bit-shift-left f 1) (+ acc (* (- (int d) 48) f))))))","problem":122,"user":"4ef1ee67535dced4c769f219"},{"problem":122,"code":"(fn read-bin [s] ((fn read-inner [l acc] (if (empty? l) acc (if (= \\0 (first l)) (read-inner (rest l) (* 2 acc)) (read-inner (rest l) (inc (* 2 acc)))))) (seq s) 0))","user":"56912f93e4b0dcc4269f40ef"},{"code":"(fn [input]\n  (loop [acc 0\n    power 0\n    remaining (reverse input)]\n(if (empty? remaining)\nacc\n(let [target (first remaining)\n      number (if (= target \\1) 1 0)]\n(recur (+ acc (bit-shift-left number power))\n(inc power)\n(rest remaining))))))","problem":122,"user":"4f0365fc535dcb61093f6aa4"},{"code":"(fn [x] (reduce + (map #(* (. Integer parseInt (str %2)) (int (Math/pow 2 %))) (range (count x)) (reverse x))))","problem":122,"user":"4ea4e98a535d7eef308072ce"},{"problem":122,"code":";#(loop [given-sequence (reverse (vec %))\n;        index 0\n;        result 0]\n;  (if (nil? given-sequence)\n;    result\n;    (recur (next given-sequence) (inc index) (+ result (* (- (int (first given-sequence)) 48) (apply * (take index (repeat 2))))))\n;    )\n;  )\n#(reduce + (map-indexed (fn [index value](if (= value \\0) 0 (bit-shift-left 1 index))) (reverse %)))","user":"566639f4e4b0e91d5f5c566b"},{"code":"#(reduce (fn [n2 n1] (+ n2 n2 n1)) (for [x %1] (- (int x) 48)))","problem":122,"user":"5176afd2e4b085adf681d889"},{"code":"(fn [s]\n  (loop [a 0 b s]\n    (if (seq b)\n      (recur (+ (* 2 a) ({\\0 0, \\1 1} (first b))) (rest b))\n      a)))","problem":122,"user":"531488f3e4b08068f379ed16"},{"code":"(fn [s] (reduce #( + ( * %1 2) (- %2 (int \\0) )) 0 (map int s)))","problem":122,"user":"5018ed15e4b011a2e0bf6412"},{"problem":122,"code":"(fn [a]\n       (Integer/valueOf a 2))","user":"5c337305e4b0d62ef62d9f48"},{"problem":122,"code":"(fn [s]\n  (let [digits (reverse (map #(- (int %) (int \\0)) (seq s)))\n        squares (iterate (partial * 2) 1)]\n    (apply + (map * digits squares))))","user":"4fbe2cfbe4b081705acca30c"},{"code":"(fn [bs]\n  (reduce #(+ (* %1 2) %2) (map #(read-string (str %)) bs)))","problem":122,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":122,"code":"#(loop [bin % acc 0] (if (empty? bin)\n                       acc\n                       (recur (rest bin) (+ (* 2 acc) (- (int (first bin)) 48)))))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"(fn [x] (reduce + (map #(* (- (int %) 48) (reduce * (repeat %2 2))) (seq x) (range (dec (count x)) -1 -1))))","problem":122,"user":"51a058dae4b0b292b01ee3f3"},{"problem":122,"code":"(fn foo1 [input] (let [s (count input) coll (vec input)] (apply + (map-indexed (fn [i x] (if (= \\1 x) (reduce * (repeat (- s i 1) 2)) 0)) coll))))","user":"5addadfce4b0837691e92c13"},{"problem":122,"code":"(fn[n] (loop [exp (- (count n) 1)\n               res 0\n               n n]\n            (if (< exp 0)\n                res\n                (recur (dec exp) (if (= (first n) \\1)\n                                     (+ res (reduce * (repeat exp 2)))\n                                     res) (rest n) ))))","user":"5f727d2fe4b02876ed9fd08f"},{"problem":122,"code":"(fn [xs]\n  (reduce + (map-indexed\n  (fn [idx elem]\n    (let [val (= \\1 elem)\n          i (if val 1 0)]\n      (* (int (Math/pow 2 idx)) i)))\n    (reverse xs))))","user":"55aa8276e4b0988bba2ad94e"},{"code":"(fn [s]\n  (reduce #(+ (* 2 %1) (if (= %2 \\1) 1 0)) 0 (seq s)))","problem":122,"user":"4f3a979de4b0e243712b1f10"},{"problem":122,"code":"(fn [bin]\n  (let [pow-of-two (fn [ex] (if (zero? ex)\n                              1\n                              (reduce #(* %1 %2) 2 (repeat (dec ex) 2))))\n        num-from-str (fn [str] (if (= \"0\" str) 0 1))]\n    (loop [num-list (map str (reverse bin))\n           result 0\n           ex 0]\n      (if (empty? num-list)\n        result\n        (recur (rest num-list) (+ result (* (num-from-str (first num-list)) (pow-of-two ex))) (inc ex))))))","user":"571cd9dce4b0145328a76271"},{"code":"(fn [s]\n  (reduce + \n  \t(map * \n    \t(iterate (partial * 2) 1)\n        (map #(Integer/parseInt %) (reverse (re-seq #\"[01]\" s))))))","problem":122,"user":"51990df9e4b068aa333628fc"},{"problem":122,"code":"(fn [s]\n  (let [nums (map #(- (int %) (int \\0)) s)]\n    (reduce #(+ (* 2 %1) %2) nums)))","user":"5766bab8e4b0a07e8fc180b1"},{"code":"(fn[b](reduce #(+ (* %1 2) (- (int %2) 48)) 0 b))","problem":122,"user":"52bc6cb2e4b07a9af57922f5"},{"problem":122,"code":"(fn [b]\n(->> b\nreverse\n(map #(Character/digit % 10))\n(interleave (iterate (partial * 2) 1))\n(partition 2)\n(map (partial apply *))\n(reduce +)))","user":"569adec2e4b0542e1f8d1450"},{"code":"(fn [s] \n          (reduce + \n                  (map * \n                       (iterate #(* 2 %) 1)\n                       (map (comp read-string str) (seq (reverse s))))))","problem":122,"user":"4f34eb87e4b0e243712b1eba"},{"problem":122,"code":"(fn bin-to-dec\n        ([num]\n           (bin-to-dec num 0))\n        ([num res]\n           (if (empty? num)\n             res\n             (let [dig (Character/digit (first num) 10)]\n               (bin-to-dec (rest num) (+ (* 2 res) dig))))))","user":"52efd3d9e4b05e3f0be25ed4"},{"problem":122,"code":"(fn [as] ( let [xs (map read-string (re-seq #\"[0-1]\" as))]\n           (apply + (for [x (range (count xs))] (* (nth xs x) (bit-shift-left 1 (- (count xs) x 1)))))))","user":"54d70f40e4b0a52adc2e2027"},{"problem":122,"code":"(fn [s]\n  (apply +\n         (map *\n              (iterate (partial * 2) 1)\n              (reverse (map #(- (int %) 48) s)))))","user":"52393e16e4b0d705d026ef06"},{"code":"(fn [s]\n  (let [digit #(cond (= % \\0) 0 (= % \\1) 1)]\n    (reduce (fn [tot c] (+ (* 2 tot) (digit c))) 0 s)))","problem":122,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"(fn convertBin [inStr]\n      (let\n        [revStr (reverse inStr)\n         nums (for [i (range (count revStr))]\n                (if (= \\1 (nth revStr i))\n                  (if (= i 0)\n                    1\n                    (reduce * (take i (repeat 2)))\n                    )\n                  0\n                  )\n                )\n         ]\n        \t  (reduce + nums)\n        )\n      )","problem":122,"user":"536827f1e4b0243289761e8a"},{"problem":122,"code":"(fn [x]\n  (loop [in x\n         out 0]\n    (if (empty? in) out\n      (let [i (- (int (first in)) 48)]\n        (recur (rest in) (+ (* out 2) i))))))","user":"594bd637e4b07ddc2dafae41"},{"problem":122,"code":"(fn [x] (let [y (map #(- (int %) 48) (seq (reverse x)))] \n                 (int (reduce + (map #(* %2 (Math/pow 2 %)) (range) y)))))","user":"4e36e647535deb9a81d77f36"},{"code":"(fn [sval]\n  (loop [srem sval, result 0]\n    (if (empty? srem)\n      result\n      (recur (subs srem 1) (+ (* 2 result) (- (int (get srem 0)) (int \\0)))))))","problem":122,"user":"4ec5cdb0535d6d7199dd36b8"},{"code":"(fn my-binary-read [bin]\n  (reduce\n   #(+ %1 (int (* (Math/pow 2 (first %2)) (last %2))))\n   0\n   (map-indexed #(vector %1 (- %2 (int \\0))) (map int (reverse bin)))))","problem":122,"user":"4fc6d2c1e4b0ee37620e181b"},{"problem":122,"code":"#(->> % reverse (map-indexed (fn [i v] (if (= \\1 v) (Math/pow 2 i) 0))) (reduce +) int)","user":"596a66cde4b069c0a1a19803"},{"problem":122,"code":"(fn f [n] \n  (loop [l ((fn [x] (loop [ll (seq x) rs []] (cond (empty? ll) (reverse rs) :else (recur (rest ll) (cons (- (int (first ll)) 48) rs))))) n) r 0] \n    \t(cond\n         \t(empty? l) r\n         \t(zero? (first l)) (recur (rest l) r)\n         \t:else (recur (rest l) (+ r (reduce * (repeat (dec (count l)) 2))))\n         )\n    )\n  )","user":"56df6351e4b0ca2494a095f3"},{"problem":122,"code":"(fn[s]\n  (->> s (seq) (map #(- (int %) 48)) (reduce #(+ (* 2 %1) %2))))","user":"54651ef5e4b01be26fd746d5"},{"code":"(fn [n]\n  (reduce\n    +\n    (map\n      #(*\n        (Integer/parseInt (str %))\n        %2)\n      (reverse n)\n      (iterate #(* 2 %) 1))))","problem":122,"user":"4f253a49e4b0d66497709ff3"},{"problem":122,"code":"(fn ppp[texto](loop[coll (map #(Character/digit % 10)\n                                (map #(get texto %)\n                                     (range(count texto))))\n                     ret 0]\n                 (cond\n                   (empty? coll) (/ ret 2)\n                   :else (recur (rest coll)\n                                (* 2 (+ ret (first coll)))))))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":122,"code":"(fn [s]\n  (reduce\n   +\n   (map\n    (fn [x] (x 1))\n    (map\n     vector\n     (map read-string (reverse (map str (seq s))))\n     (map\n      (fn [x y] (* x y))\n      (map\n       #(reduce * (repeat % 2))\n       (range (count (map read-string (reverse (map str (seq s)))))))\n      (map read-string (reverse (map str (seq s))))\n      )\n     )\n    )\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"code":"(fn[coll](apply + (map #(if(= (first %)\\1)(second %) 0  ) (partition 2 (interleave (reverse coll) (iterate #(* % 2)1))))))","problem":122,"user":"52bbd09ee4b07a9af57922ee"},{"problem":122,"code":"#(reduce (fn [r [p n]]\n          (+ r (* n (apply * (repeat p 2)))))\n        0\n        (map-indexed (fn [idx itm] (vector idx (- (int itm) 48))) (reverse %)))","user":"50385746e4b0803468ea2c6d"},{"problem":122,"code":"(fn bn[s]\n  (let [f (read-string (str (last s)))\n        c (count s)\n        r (subs s 0 (dec c))]\n    (if (= c 1)\n      f\n      (+ f (* 2 (bn r))))))","user":"54d4bd2be4b0a52adc2e2005"},{"problem":122,"code":"(fn [numb] (int (reduce + (map-indexed (fn [ix it] (* (Math/pow 2 ix) (Integer/parseInt (str it)))) (reverse numb)))))","user":"5578f292e4b05c286339e08f"},{"code":"#(loop [s % r 0]\n  (cond\n    (empty? s) r\n    (= (first s) \\0) (recur (rest s) (* r 2))\n    :else (recur (rest s) (+ 1 (* r 2)))))","problem":122,"user":"4ddbfb8a535d02782fcbea00"},{"problem":122,"code":"(fn [bin-num-str]\n  (let [int-arr (map #(-> % str read-string) (reverse bin-num-str))]\n    (loop [i 0, result 0, lst int-arr]\n      (if (empty? lst)\n          result\n          (recur (inc i)\n                 (int (+ result (* (first lst) (Math/pow 2 i))))\n                 (rest lst))))))","user":"567695c2e4b05957ce8c6157"},{"code":"reduce #(+ (* 2 %) (read-string (str %2))) 0","problem":122,"user":"4ed94d69535d10e5ff6f5303"},{"code":"(fn [s] (loop [remainder s pos (dec (count s)) ret 0] (if (empty? remainder) ret (recur (rest remainder) (dec pos) (+ ret (if (= \\1 (first remainder)) (int (Math/pow 2 pos)) 0))))))","problem":122,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":122,"code":"(fn parse-binary [s]\n  (loop [bits (map #(- (int %) 48) (reverse s))\n         n 0\n         acc 0]\n\t(if (seq bits)\n      (recur (rest bits) (inc n) (+ acc (* (first bits) (apply * (repeat n 2)))))\n      acc)))","user":"5643a11ee4b0018b46ad8bfb"},{"code":"(fn bin->dec\n  [binstr]\n  (let [xs (reverse binstr)\n        ys (partition 2 (interleave (range) xs))\n        pow2 (fn [n] (apply * (repeat n 2)))]\n    (reduce (fn [ret [k v]] (+ ret (if (= v \\0) 0 (pow2 k)))) 0 ys)))","problem":122,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":122,"code":"(fn [s]\n  (\n  (fn convert [num place] \n    (if (empty? num)\n      0\n      (+ (convert (rest num) (* place 2))\n         (if (== 0 (compare \\1 (first num)))\n           place\n           0\n         )\n      )\n    )  \n  ) (reverse s) 1\n  )\n)","user":"55034bf0e4b086ebe8a79c6d"},{"problem":122,"code":"(fn [s] (apply + (map-indexed #(if (= %2 \\1) (reduce * (repeat % 2)) 0) (reverse s))))","user":"5c7bc0a5e4b0fca0c1622865"},{"problem":122,"code":"#(->> %\n      (seq)\n      ((fn [string] \n        (loop [in string out 0]\n          (let [x (first in) xs (rest in)]\n          (if (empty? in) \n            (/ out 2) \n            (recur xs \n                   (* 2 \n                      (+ (if (= x \\1) 1 0) out)))))))\n      ))","user":"5895385fe4b00487982d5279"},{"problem":122,"code":"(fn [n-string] (Integer/parseInt n-string 2))","user":"57f81045e4b0d3187e90090f"},{"code":"(fn readbinary                                                                  \n  [x]                                                                             \n  (let [parts (reverse (map str (vec x)))]                                        \n    (loop [acc 0 items parts curr 0]                                              \n      (if (empty? items)                                                          \n        (Math/round acc)                                                          \n        (recur (+ acc (* (if (= \"1\" (first items)) 1 0) (Math/pow 2 curr)))       \n               (rest items)                                                       \n               (inc curr)                                                         \n               )                                                                  \n        )                                                                         \n      )                                                                           \n    )                                                                             \n  )","problem":122,"user":"50573ed8e4b0012181721987"},{"problem":122,"code":"#(->> %\n    seq\n\treverse\n    (map (fn [x] (Character/digit x 2)))\n    ((fn [v] (map * (take (count v) (iterate (fn[x] (* x 2)) 1)) v)))\n    (apply +)\n    )","user":"5b210749e4b03cfeda66ed48"},{"code":"(fn [b]\n  (reduce +\n          (map-indexed\n           (fn [i v] (if (= v \\1) (bit-shift-left 1 i) 0)) (reverse b))))","problem":122,"user":"502873a8e4b01614d1633ff8"},{"problem":122,"code":"(fn [number]\n  (loop [nums (reverse (re-seq #\"\\d\" number))\n         mult 1\n         res 0]\n    (if (seq nums)\n      (recur (rest nums)\n             (* 2 mult)\n             (+ res (* mult (Integer/parseInt (first nums)))))\n      res)))","user":"540a4f20e4b0addc1aec66ef"},{"problem":122,"code":"(fn [binary]\n   (reduce (fn [val bit]\n             (-> val\n                 (bit-shift-left 1)\n                 (bit-or bit)))\n           0 (map (comp #(Integer. %) str) binary)))","user":"54da46e5e4b024c67c0cf753"},{"problem":122,"code":"(fn [binary-string]\n  (read-string (str \"2r\" binary-string)))","user":"53f891eee4b0de5c4184856d"},{"code":"; first solution:  #(Long/parseLong % 2)\n;\n; practicing reduce, etc:\n(fn [s] \n  (reduce #(+ (* 2 %1) \n              (- (int %2) (int \\0)) )\n          0 (seq s) ))","problem":122,"user":"50b8914ce4b0cba0e598b64d"},{"problem":122,"code":"(fn algo [n]\n  (Integer/parseInt n 2)\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":122,"code":"(fn [b]\n  (loop [b (seq (reverse b)) p 0 res 0]\n    (if (empty? b)\n      res\n      (recur (next b) (inc p) \n             (int (+ res (* (Math/pow 2 p) (Integer/parseInt (str (first b))))))))))","user":"55ed37ebe4b0121d4835fdd6"},{"problem":122,"code":"(fn [x]  (apply + (reverse (map-indexed  (fn  [idx e]  (apply * e (take idx (repeat 2)))) (reverse (map #(mod  (int %) 2)  (seq  (str  x))))))))","user":"5900d5cde4b0438e51c2d02e"},{"code":"(fn [binary] (reduce + (map-indexed (fn [idx cha] (if (= cha \\1) (reduce * (repeat idx 2)) 0)) (reverse binary))))","problem":122,"user":"5073de20e4b054001656acca"},{"code":"(fn [s]\n   (apply + (map (fn [m b] (* m (Integer. (str b))))\n                 (iterate #(* 2 %) 1)\n                 (reverse s))))","problem":122,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":122,"code":"(fn from-binary [s]\n  (->> s\n       (map str)\n       (map #(Integer/parseInt %))\n       (reverse)\n       (map vector (->> (range)\n                        (map #(Math/pow 2 %))))\n       (map (fn[[a b]] (* a b)))\n       (reduce +)\n       (int)))","user":"590d3702e4b047aa04b199ff"},{"problem":122,"code":"(fn bValue\n  [x]\n  (loop [val 0\n         myX x]\n    (if (empty? myX)\n      val\n      (recur (+ (* 2 val) (Integer. (str (first myX)))) (rest myX)))))","user":"54f64e99e4b0f2f3c5226ea4"},{"code":"(fn [s]\n  (loop [accu 0\n   s s]\n    (if (empty? s)\n      accu\n      (recur (+ (* accu 2) (if (= (first s) \\1) 1 0)) (rest s)))))","problem":122,"user":"4e82c062535db62dc21a62cc"},{"problem":122,"code":"#(reduce\n  (fn [a b] (+ (* 2 a) (read-string (str b)))) 0 %)","user":"581e61b0e4b04b46fc4b0f28"},{"code":"#(apply + (mapv * (reverse (map (comp read-string str) %)) (iterate (partial * 2) 1)))","problem":122,"user":"5065faf9e4b0313a384e5645"},{"code":"(fn [b] (reduce #(+ (* %1 2) (if (= \\1 %2) 1 0)) 0 b))","problem":122,"user":"5107b86de4b05b2b4eee7495"},{"problem":122,"code":"(fn [s]\n  (->>\n   (reverse s)\n   (map-indexed\n     (fn [idx item]\n       [idx (if (= item \\1) 1 0)]))\n   (reduce\n     (fn [sum [power bin]]\n       (+ sum (* bin (int (Math/pow 2 power)))))\n      0)))","user":"4fe49706e4b0e8f79898feb7"},{"code":"(fn [bstr]\n  (loop [bstr,bstr res,0 times,(reduce * (repeat (dec (count bstr)) 2))]\n    (cond \n     (empty? bstr) res\n     (= (first bstr) \\1) (recur (rest bstr) (+ res times) (/ times 2))\n     :else (recur (rest bstr) res (/ times 2))\n     )))","problem":122,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"code":"(fn [in] (apply + (map-indexed #(if (= %2 \\1) (Math/pow 2 %1) 0) (reverse in))))","problem":122,"user":"4f04b66b535dcb61093f6bdd"},{"code":"(fn [a]\n (reduce +\n         (map\n          (fn [i x]\n           (* (Character/getNumericValue x) i))\n          (iterate #(* % 2)1)\n          (reverse a))\n  ))","problem":122,"user":"5094057fe4b097f48cc38593"},{"problem":122,"code":"(fn [v]\n  (new java.math.BigInteger v 2))","user":"53ae16e2e4b047364c044472"},{"code":"(fn [s]\n  (let [bs (map #(if (= % \\0) 0 1) (seq s))]\n    (loop [v bs\n           n 0\n           i (dec (count s))]\n      (if (empty? v)\n        n\n        (let [new-n (if (= 1 (first v)) (bit-set n i) n)]\n          (recur\n            (rest v)\n            new-n\n            (dec i)))))))","problem":122,"user":"4e52777f535d302ef430da76"},{"problem":122,"code":"(fn [s]\n    (let [int-nums (reverse (map #(- (int %) (int \\0)) (seq s)))]\n      (reduce + 0\n            (map #(* %1 %2)\n                 int-nums\n                 (iterate (partial * 2) 1)))))","user":"560e9a2de4b05f002753df52"},{"problem":122,"code":"(fn [s] ((fn [i v s] (if (empty? s) (int v) (recur (* i 2) (if (= (last s) \\1) (+ v i) v) (butlast s) ))) 1 0 s))","user":"55041b5ee4b086ebe8a79c78"},{"problem":122,"code":"(fn [bstr]\n  (reduce + (map *\n       (reverse (map #(reduce * (repeat % 2)) (range (count bstr)))) \n       (map #(Character/digit % 10) (seq bstr)))))","user":"53e76bb2e4b036ad0777e47d"},{"code":"#(loop [bin % v 0]\n  (if (empty? bin)\n    v\n    (let [pow (fn [a n] (apply * (take n (repeat a))))\n          to-dig (fn [ch] (- (int ch) 48))\n          dig (to-dig (first bin))\n          bin# (rest bin)\n          plus (case dig 0 0 1 (pow 2 (count bin#)))]\n      (recur bin# (+ v plus)))))","problem":122,"user":"5127e504e4b03a34742b4302"},{"code":"(fn [s]\n  (->> s\n       (re-seq #\"\\d\")\n       (map read-string)\n       (reduce #(+ (* 2 %1) %2))))","problem":122,"user":"5220bc0fe4b0e6a83c8925a7"},{"code":"(fn [s]\r\n    (reduce + (map #(if (= \\1 %1) %2 0) (reverse s) (iterate #(* 2 %) 1))))","problem":122,"user":"4f047177535dcb61093f6bc6"},{"problem":122,"code":"#(reduce + (map-indexed\n            (fn [idx c] (reduce * (Character/getNumericValue c) (repeat idx 2)))\n            (reverse (seq %))))","user":"59074b7ce4b047aa04b19951"},{"code":"(fn [s] (reduce + (map * (iterate #(* 2 %) 1) (reverse (map #(- (int %) 48) s)))))","problem":122,"user":"4f0891a2535dcb61093f6c3b"},{"problem":122,"code":"(fn [number]\n  (loop [cursor (reverse number)\n         power 0\n         output 0]\n    (if (= 0 (count cursor))\n      output\n      (let [current-digit (str (first cursor))]\n        (recur\n         (rest cursor)\n         (inc power)\n         (if (= current-digit \"1\")\n           (+ output (if (= power 0)\n                       1\n                       (apply * (take power (repeat 2)))))\n           output))))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":122,"code":"(fn [s]\n  (loop [left (reverse s) sum 0 pow 1]\n    (if (zero? (count left))\n      sum\n      (recur (rest left) (+ sum (if (= \\1 (first left)) pow 0)) (* 2 pow)))))","user":"536046a9e4b063bf7a5f8fe1"},{"problem":122,"code":"#(loop [t % res 0]\n   (if (= (count t) 0)\n     res\n     (recur (rest t)\n            (+ (* 2 res) ({\\0 0 \\1 1} (first t))))))","user":"53da1134e4b0e771c3025480"},{"problem":122,"code":"(fn [s]\n  (->> (map (fn [b n]\n              (if (= \\1 b)\n                (reduce * 1 (repeat n 2))\n                0))\n            (reverse (seq s))\n            (range))\n       (reduce +)))","user":"559622cee4b0c79f6e1db975"},{"problem":122,"code":"(fn [bs]\n  (->> bs \n       reverse \n       (map #(Character/digit % 2))\n       (map-indexed #(apply * %2 (repeat % 2)))\n       (reduce +)))","user":"5cdfe2aee4b0a17bb84e2b04"},{"code":"#(first (reduce (fn [[t v] d]\n                   (list (+ t (if (= d \\1) v 0)) (* v 2))) \n                 [0 1] (reverse %)))","problem":122,"user":"52ba43d0e4b07a9af57922cd"},{"problem":122,"code":"(fn [x] (Integer/valueOf x 2))","user":"57061d20e4b0b0fb43fd0679"},{"code":"#(reduce + (map (fn[a b] (if (= b \\1) a 0) ) (map (fn[x] (reduce * (repeat x 2))) (range)) (reverse (seq %))))","problem":122,"user":"52ca720fe4b071a8d36bd3e2"},{"code":"(fn [s]\n  (apply + (map #(if (= %1 \\1) %2 0) (reverse (seq s)) (iterate (partial * 2) 1))))","problem":122,"user":"4ed7b617535d10e5ff6f52f3"},{"code":"(fn [s]\n  (int\n    (reduce +\n            (map (fn [b i]\n                   (if (= \\1 b)\n                     (Math/pow 2 i)\n                     0)) (reverse s) (range)))))","problem":122,"user":"51a97f7ae4b08d8ec191b827"},{"problem":122,"code":"#(second\n   (reduce\n    (fn [[m2 vn] x]\n      (if (= \\0 x)\n        [(* m2 2) vn]\n        [(* m2 2) (+ vn m2)]))\n    [1 0]\n    (reverse %)))","user":"5576f299e4b05c286339e077"},{"code":"(fn b\n  ([x] (b (reverse x) 1 0))\n  ([x c s]\n    (if (empty? x)\n      s\n      (recur\n        (rest x)\n        (* c 2)\n        (+ s (* c (- (int (first x)) 48)))))))","problem":122,"user":"4da3e51330acd6ed10482a68"},{"problem":122,"code":"(fn [bstr]\n  (let [bstr (reverse bstr)]\n    (reduce + (for [n (range 0 (count bstr))] \n                (let [digit (- (int (nth bstr n)) 48)]\n                  (if (zero? digit)\n                    0\n                    (bit-shift-left 1 n)))))))","user":"5c6e1006e4b0fca0c1622744"},{"problem":122,"code":"(fn [string]\n  (apply + (map * (reverse (take (count string) (iterate #(* 2 %) 1))) (map #(Character/getNumericValue %) string)))\n  )","user":"56f188e9e4b04a395b9a0494"},{"problem":122,"code":"(fn binary [s]\n  (let [l (reverse (map #(Character/getNumericValue %) s))]\n    (loop [r 0 cum 1 input l]\n      (println r cum input)\n      (if (empty? input)\n        r\n        (recur (+ r (* cum (first input))) (* 2 cum) (rest input))\n        )\n      )\n    )\n  )","user":"563b9acbe4b0bfe05bf11827"},{"problem":122,"code":"(fn[s](int(reduce + (map-indexed (fn[idx itm](* (Math/pow 2 idx) (- (int itm) 48) )) (reverse s)))))","user":"56039843e4b04bb52996e1be"},{"problem":122,"code":"(fn [bin]\n   (int (reduce + \n                (map \n                  #(* (Integer/parseInt (str %1)) (Math/pow 2 %2))\n                  (reverse (seq bin)) \n                  (range 0 (count bin))))))","user":"55f8b32ae4b03cbcff9738ba"},{"problem":122,"code":"(fn binary-string->int [s]\n   (reduce (fn [acc [ndx n]]\n             (+ acc (if (= \\1 n)\n                      ;; huh, did not realize there is no base clojure exp/pow fn\n                      (apply * (repeat ndx 2))\n                      0)))\n           0\n           (map-indexed vector (reverse s))))","user":"5d7aa22ee4b02e6b30c9354e"},{"code":"(fn [s]\n  (letfn \n    [(accum \n      [sq nsq n]\n      (if (empty? sq) n \n        (let [fe (first sq) \n              pp (partial accum (rest sq) (rest nsq))]\n          (if (= fe \\0) (pp n) (pp (+ n (first nsq))))\n          )))]\n    (let [po2 (iterate (partial * 2) 1)]\n      (-> s seq reverse (accum po2 0))\n    )))","problem":122,"user":"52faec2ee4b047fd55837004"},{"problem":122,"code":"(fn binary->int [s]\n  (let [powers (reverse (range (count s)))\n        multipliers (map #(int (Math/pow 2 %)) powers)]\n    (apply +\n           (map (fn [char mult]\n                  (if (= \\1 char)\n                    mult\n                    0))\n                s multipliers))))","user":"601c39eee4b0bf4ca6b10937"},{"problem":122,"code":"(fn parse-int [s](Integer/parseInt (re-find #\"\\A-?\\d+\" s) 2))","user":"54e5dc08e4b024c67c0cf800"},{"code":"(fn [b]   (apply + (map (fn [[k v]] (* v (or (apply * (repeat k 2)) 1))) (zipmap (range (count b)) (->> b reverse (map str) (map read-string))))))","problem":122,"user":"5028cd0fe4b01614d1633ffc"},{"code":"(fn [s]\n  (reduce\n   (fn [r c]\n     (let [r (* 2 r)]\n       (if (= \\1 c)\n         (inc r)\n         r)))\n   0 s))","problem":122,"user":"4e68c434535d8ccf87e9fe89"},{"problem":122,"code":"(fn [s]\n  (->> s\n       (map identity)\n       (map #(- (int %) (int \\0)))\n       (reduce #(+ (* 2 %1) %2) 0)))","user":"567e418fe4b0feffd0d18eb1"},{"code":"(fn binary_to_decimal\n  ([binary_string total place_value]\n   (cond\n     (empty? binary_string) total\n     :else\n     (recur\n       (rest binary_string)     \n       (+\n         total \n         ((fn [single_bit] (if (= single_bit  \\1) place_value 0)) (first binary_string))\n       )        \n       (* place_value 2)\n     )\n   )\n  )\n  ([binary_string] (binary_to_decimal (reverse binary_string) 0 1))\n)","problem":122,"user":"502be4fae4b08f5602f232eb"},{"code":"(fn [s]\n  (->> (map #(Integer/parseInt %) (re-seq #\"\\d\" s))\n       reverse\n       (interleave (iterate #(* 2 %) 1))\n       (partition 2)\n       (map #(apply * %))\n       (reduce +)))","problem":122,"user":"4fca4c37e4b0ee37620e184f"},{"problem":122,"code":"(fn [a] (let [powersOf2 (reverse (take (count a) (iterate #(* % 2) 1)))\n              binary (map #(if (= \\0 %) 0 1) a)]\n          (reduce + (map * powersOf2 binary))))","user":"5e950178e4b0fbed045a3801"},{"problem":122,"code":"(fn bins\n  ([bs] (bins bs 0))\n  ([bs index]\n   (if (>= index (count bs)) 0\n     (let [char-idx (dec (- (count bs) index))]\n       (+ (bit-shift-left ({\\0 0, \\1 1} (nth bs char-idx)) index)\n          (bins bs (inc index)))))))","user":"5e9c11f8e4b0157ca96647f6"},{"problem":122,"code":"#(loop [in % out 0] (if (empty? in) out (recur (rest in) (+ out (* (- (int (first in)) 48) (reduce * (repeat (dec (count in)) 2)))))))","user":"57f9e0bce4b0d3187e900956"},{"problem":122,"code":"(fn read-bin-num [s]\n  (loop [x (map (comp #(Integer/parseInt %) str) (seq s))\n         r 0]\n    (if (empty? x)\n      r\n      (recur (rest x) (+ r (reduce * (first x) (repeat (dec (count x)) 2)))))))","user":"565654dae4b0f9d632dd849f"},{"code":"(fn [the-seq]\n  (loop [res 2r0, buf (seq the-seq)]\n    (if (empty? buf)\n    \tres\n      \t(let [bit (Integer/parseInt (str (first buf)))\n          \t  the-val (+ (bit-shift-left res 1) bit)]\n\t\t\t(recur the-val (rest buf))))))","problem":122,"user":"4f80a906e4b033992c121bf7"},{"problem":122,"code":"(fn [d]\n  (loop [a (reverse d)\n         r 0\n         c 1]\n    (if (empty? a)\n      r\n      (cond \n       (= \\1 (first a)) (recur (rest a) (+ r (* (- (int (first a)) 48) c)) (* 2 c))\n       :else (recur (rest a) r (* 2 c))))))","user":"5ab9fe71e4b073f17744269d"},{"problem":122,"code":"(fn b-i [s]\n  (letfn [(pow [b p]\n  (reduce * (take p (repeat b))))]\n  (reduce + (map-indexed (fn [idx itm]\n                 (if (= itm \\1)\n                   (pow 2 idx)\n                   0))\n               (reverse s)))))","user":"56504dc2e4b0284900eef6bc"},{"problem":122,"code":"(fn [s] (apply + (map #(if (= %1 \\1) %2 0) (reverse s) (iterate #(* 2 %) 1))))","user":"5db92996e4b010eb3c36cd50"},{"code":"reduce #(+ (int (bigint (str %2))) (* 2 %1)) 0","problem":122,"user":"536b9d8ae4b0243289761ebe"},{"code":"#(loop [t 0 rst (map (fn [c] ({\\0 0 \\1 1} c)) (seq %))]\n  (cond\n    (empty? rst) t\n    :else (recur (+ (* 2 t)\n                    (first rst))\n                 (rest rst))))","problem":122,"user":"4f1abbfb535d64f60314646e"},{"code":"(fn [s] \n  (reduce + (map-indexed (fn [i x] (* (Math/pow 2 i) (- (int x) 48) )) (reverse (seq s)))))","problem":122,"user":"4e6ab9cb535d8ccf87e9fefe"},{"code":"(fn [s] \n  (reduce + \n    (map (fn [[digit mult]] (if (= \\1 digit) mult 0))\n      (partition 2 \n        (interleave \n          (reverse s)\n          (iterate #(* 2 %) 1))))))","problem":122,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":122,"code":"(fn [x]\n  (loop [acc 0\n         b x\n         n 1]\n    (if (empty? b) acc\n      (recur (if (= \\1 (last b))\n               (+ acc n)\n               acc)\n             (butlast b)\n             (* n 2)))))","user":"56fee4c0e4b08d47c97781b5"},{"problem":122,"code":"(fn read-a-binary-number [xs] \n  (->> (reverse (seq xs))\n       (map #(Integer/parseInt (str %)))\n       (map vector (iterate #(* 2 %) 1))\n       (map #(* (first %)(second %)))\n       (reduce +)))","user":"52616198e4b03e8d9a4a705e"},{"code":"(fn [s] (int (apply + (map-indexed #(if (= \\1 %2) (Math/pow 2 %1) 0) (reverse s)))))","problem":122,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn [s]\n  (let [l (count s)]\n    (int (reduce + (for [i (range l) :when (= (nth s i) \\1)]\n      (Math/pow 2 (- (dec l) i)))))))","problem":122,"user":"4e955b95535dbda64a6f6b33"},{"problem":122,"code":"(fn [s]\n  (loop [i 0, binary (reverse s), total 0]\n    (if (seq binary)\n      (recur (inc i) (next binary) (+ total (reduce * (Integer/parseInt (str (first binary))) (repeat i 2))))\n      total)))","user":"55ea0780e4b0121d4835fda7"},{"code":"(fn to-int [c]\r\n  (loop [r 0 c c]\r\n    (cond \r\n      (empty? c) r\r\n      (= (first c) \\1) (recur (+ 1 (* 2 r)) (rest c))\r\n      :else (recur (* 2 r) (rest c)))))","problem":122,"user":"4fdf566fe4b05e33b9224f99"},{"problem":122,"code":"(fn [s] (reduce + 0\n                (map-indexed (fn [idx itm] \n                               (* \n                                (Integer. (str itm)) \n                                (int (Math/pow 2 idx)))) \n                             (reverse s))))","user":"54bad977e4b0ed20f4ff6eb9"},{"code":"(fn calc-binary [n]\n\t(loop [bnum n total 0]\n      (if (empty? bnum)\n      \ttotal\n      \t(recur (rest bnum)\n      \t\t   (+ total \n      \t\t   \t  (* \n      \t\t   \t  \t(reduce * (take (dec (count bnum)) (repeat 2)))\n      \t\t   \t  \t(. Integer parseInt (str (first bnum)))))))))","problem":122,"user":"51a1659de4b00957e520db72"},{"problem":122,"code":"(fn [s]\n   (loop [n  (map #(read-string (str %)) (seq s)) \n          i 0\n          r 0]\n     (if (last n)\n       (if (= (last n) 1)\n         (recur (butlast n) (inc i) (+ r (reduce * (repeat i 2))))\n         (recur (butlast n) (inc i) r)\n         )\n       r) ))","user":"5dbb5200e4b09f47823971a9"},{"problem":122,"code":"(fn [lst]\n    (reduce (fn [accum digit] (+ (* accum 2) (Character/getNumericValue digit))) 0 lst)\n    )","user":"5bbbce0ee4b0a20761a2360d"},{"problem":122,"code":"(fn str2binary\n  [s]\n  (letfn [(bin-val [a] (- (int a) 48))]\n  (reduce #(+ (* 2 %1) (bin-val %2)) 0 s)))","user":"56c3aca0e4b05cc29241ee90"},{"problem":122,"code":"(fn bin [s]\n  (let [n (count s)\n        d (Character/getNumericValue (first s))]\n    (println n)\n    (println d)\n  (if (= 1 n)\n      d\n      (int (+ (* d (Math/pow 2 (- n 1))) (bin (apply str (rest s))))))))","user":"5dc72a9ce4b02f9375f4e1cd"},{"problem":122,"code":"(partial reduce #(+ (* 2 %) (if (= \\1 %2) 1 0)) 0)","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":122,"code":"(fn [s] (->> s (map #(Character/getNumericValue %)) (reduce #(+ (* %1 2) %2))))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":122,"code":"(fn from-binary [s]\n  (loop [n 0\n         sd s]\n    (if (empty? sd) n\n      (recur (+ (bit-shift-left n 1) (Integer/parseInt (subs sd 0 1)))\n             (subs sd 1)))))","user":"53286f84e4b09d4e7a9b5505"},{"code":"(fn [x]\n  (loop [lst x cnt 1 ret 0]\n    (if (empty? lst) ret\n                    (recur (butlast lst) (* 2 cnt) \n    (if (= (last lst) \\1) (+ cnt ret) ret))\n)))","problem":122,"user":"4fdf5403e4b05e33b9224f98"},{"problem":122,"code":"(fn [s] (apply + (map #( *   (- (int %) (int \\0)) %2) (reverse s) (iterate (partial * 2) 1) )))","user":"54af6fb0e4b09f271ff37d08"},{"problem":122,"code":"(fn p\n  [n]\n  (int\n   (reduce +\n     (map-indexed #(* %2 (Math/pow 2 %1))\n                  (map #(Character/digit % 10)\n                       (reverse n))))))","user":"5723e6d6e4b0c5bde472c0f1"},{"code":"(fn [s] (reduce (fn [a b] (+ (* 2 a) b)) 0 (map (fn [c] (if (= \\1 c) 1 0)) s)))","problem":122,"user":"4ea41fc2535d7eef308072cb"},{"problem":122,"code":"(fn [x]\n  (int (apply + (map #(* %1 (Math/pow 2 %2)) (map #(Integer/parseInt %) (re-seq #\"\\d\" x)) (reverse (range (count x)))))))","user":"54bcab07e4b0ed20f4ff6ed5"},{"problem":122,"code":"#(reduce + (map-indexed (fn[i e] ({\\0 0 \\1 (int (Math/pow 2 i))} e)) (reverse %)))","user":"4f1ef6a0535d64f60314649b"},{"code":"(fn [x] (reduce #(+ ( * 2 %) %2 ) 0  (map #(- (int %) (int \\0)) x )))","problem":122,"user":"4febb4dae4b0681fd128dc98"},{"code":"#(java.lang.Integer/parseInt % 2)","problem":122,"user":"4eb2eae5535d7eef30807351"},{"problem":122,"code":"#(java.lang.Integer/valueOf % 2)","user":"51bd255ce4b0df1216cefd94"},{"problem":122,"code":"(fn [str]\n  (let [binary (reverse (map (fn [c] (case c \\0 0 \\1 1)) str))]\n    (apply + (map-indexed #(* (int (Math/pow 2 %1)) %2) binary))))","user":"54055aa9e4b0addc1aec6665"},{"code":"(fn [bn]\n  (let [x1 (reverse (take (count bn) (iterate #(* % 2) 1)))\n        x2 (map #(Character/getNumericValue %) bn)]\n    (apply + (map * x1 x2))))","problem":122,"user":"503255d0e4b0e78df07b092b"},{"problem":122,"code":"(fn read-binary [s]\n  (let [ss (map vector (seq s) (range (dec (count s)) -1 -1))\n        ss1 (filter #(= \\1 (first %)) ss)]\n    (int (apply + 0 (map #(Math/pow % (second %2)) (repeat 2) ss1)))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":122,"code":"(fn [s]\n  (loop [bits (reverse (seq s)) v 0 n 1]\n    (if (empty? bits)\n      v\n      (recur (rest bits)\n             (+ v (if (= (first bits) \\1)\n                    n\n                    0))\n             (* n 2)))))","user":"52979551e4b02ebb4ef75043"},{"code":"(fn [s]\n  (->> s\n       seq\n       reverse\n       (map #(Integer. (str %)))\n       (interleave (map #(Math/pow 2 %) (range)))\n       (partition 2 )\n       (map #(apply * %) )\n       (apply + )\n       int))","problem":122,"user":"509e62a8e4b08df8156e9e2e"},{"code":"(fn [s] (reduce + 0 (map #(if (= \\1 %) (reduce * 1 (repeat %2 2)) 0) (reverse s) (range))))","problem":122,"user":"524be8e0e4b09eba1c0223f1"},{"code":"(fn b[s]\n  \t      (if (= 1 (count s))\n\t\t\t  (- (int (first s)) 48)\n\t\t\t  (+ (* (- (int (first s)) 48)\n\t\t\t\t(Math/pow 2 (dec (count s))))\n\t\t\t     (b (rest s)))))","problem":122,"user":"4e842ebb535db62dc21a62df"},{"problem":122,"code":"(fn \n[n]\n  (loop [i 0 s 0]\n    (if (= i (count n))\n      s\n      (recur (inc i) (+ (Integer/parseInt (subs n i (inc i))) (* s 2)))))\n\n)","user":"5dd70ee3e4b0948ae9d9ad85"},{"problem":122,"code":"(fn [s]\n  (let [idx-num (map vector (range) (reverse s))]\n    (reduce #(int (+ %1 (* (Integer. (str (second %2))) (Math/pow 2 (first %2))))) 0 idx-num)))","user":"56481722e4b0284900eef628"},{"problem":122,"code":"(fn [x] (reduce (fn [a b] (+ (* 2 a) b)) 0 (map #(Character/getNumericValue %) x)))","user":"5d13f783e4b0902706380dc1"},{"problem":122,"code":"(fn [x] (->> x reverse (map-indexed vector) (filter #(= \\1 (second %))) (map #(reduce * (repeat (first %) 2))) (reduce +)))","user":"576a8d02e4b0a07e8fc18117"},{"problem":122,"code":"(fn [s]\n  (letfn [(myfun [string dva]\n                 (if (empty? string) 0\n                   (+ (* dva (read-string (str (first string))))\n                    (myfun (rest string) (* dva 2)))))]\n    (myfun (reverse s) 1)))","user":"60264d89e4b0d5df2af2222d"},{"problem":122,"code":"(fn [s]  \n  (reduce \n    (fn [acc v] (+ (- (int v) (int \\0)) (* acc 2))) \n    0 s))","user":"54dce62be4b024c67c0cf78b"},{"problem":122,"code":"(fn ReadABinaryNumber [string] \n  (Integer/parseInt string 2))","user":"607508f3e4b069485764de54"},{"problem":122,"code":"(fn [s] \n  (int (apply +\n         (map (fn [[x y]] (Math/pow 2 y))\n             (filter (fn [[x y]] (= x \\1 ))\n                     (map vector (reverse (vec s)) (range))\n                     )\n             )\n         )\n  ))","user":"56d91a53e4b0ea9b8538f7ee"},{"problem":122,"code":"(fn [s]\n  (apply + (map (fn [x] (apply * (repeat x 2))) (keep-indexed #(if (= 1 %2) %1) (mapv (comp read-string str) (reverse s))))))","user":"5a99b688e4b0d174b936c7a6"},{"problem":122,"code":"(fn [str-num]\n  (reduce \n   (fn [result digit]\n     (+ (Integer/parseInt (str digit)) (bit-shift-left result 1))) 0 \n   (seq str-num)))","user":"55f8fd70e4b03cbcff9738bc"},{"code":"(fn [s]\n  (int (reduce #(if (= \"1\" (str(second %2)))\n             (+ % (Math/pow 2 (first %2)))\n             %)\n          0\n          (map-indexed vector (reverse s)))))","problem":122,"user":"506617c3e4b03d366d7cb2ab"},{"problem":122,"code":"(fn [s]\n  (let [xs (seq s)]\n    (loop [t 0 xs xs x -1]\n      (if (empty? xs) t\n        (recur (+ t (* (read-string (str (last xs) )) (apply * (repeat (inc x) 2)))) (drop-last xs) (inc x))))))","user":"54dce62fe4b024c67c0cf78c"},{"problem":122,"code":"(fn read-binary-num\n  [s]\n  (let [bstr (str \"2r\" s)\n        n (read-string bstr)]\n    (if (number? n)\n      n\n      nil)))","user":"5398d042e4b0b51d73faaf00"},{"problem":122,"code":"(fn [n]\n  (Integer/valueOf n 2))","user":"5e978fe5e4b0157ca96647d1"},{"problem":122,"code":"(fn f\n  ([s] (f (seq s) 0 1))\n  ([s v p]\n   (if (empty? s) v (recur (take (dec (count s)) s) (if (= \\1 (last s)) (+ v p) v) (* 2 p)))))","user":"5a3c2a08e4b001c08efc0cdf"},{"problem":122,"code":"(fn [bin] (reduce #(+ (* 2 %1) (- (int %2) 48)) 0 bin))","user":"533b1dc4e4b0e30313ee6cc7"},{"code":"#(loop [r 0\n      \tb %]\n   (if (empty? b)\n     r\n     (recur (+ (if (= \\1 (first b)) 1 0)\n               (* 2 r))\n            (rest b))))","problem":122,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [acc elt] (if (= \\1 elt)\n                          (+ 1 (* 2 acc))\n                          (* 2 acc)))\n          0\n          s))","user":"5553b924e4b0deb715856e06"},{"problem":122,"code":"(fn [vs] (apply + (map-indexed (fn [i v] (if (= v \\1) (int (Math/pow 2 (- (count vs) i 1))) 0)) vs)))","user":"54ef4a1ee4b024c67c0cf883"},{"problem":122,"code":"(fn [binstring]\n    (println (rseq (vec binstring)))\n     (loop [bs (rseq (vec binstring))\n            i 0\n            r 0]\n       (let [dgt (if (= \\0 (first bs)) 0 (int (.pow 2M i)))]\n         (if (empty? bs)\n           r\n           (recur (rest bs) (inc i) (+ r dgt)))\n         )\n))","user":"5283a919e4b0239c8a67adbe"},{"problem":122,"code":"(fn [binary]\n  (loop [binary binary\n         place  1\n         total  0]\n    (if (empty? binary)\n      total\n      (if (= \\0 (last binary))\n        (recur (butlast binary) (* place 2) total)\n        (recur (butlast binary) (* place 2) (+ total place))))))","user":"5a58bfd0e4b05d388ecb6c84"},{"problem":122,"code":"(fn convert-binary [bin]\n  (let [pow-2 #(if (= %2 \\1) (apply * (repeat %1 2)) 0)]\n    (reduce + (map-indexed pow-2 (reverse bin)))))","user":"58327a08e4b089d5ab817c7c"},{"code":"#(reduce\n  (fn [r b]\n    (let [rs (bit-shift-left r 1)]\n      (if (= b \\1)\n        (inc rs)\n        rs))) 0 %)","problem":122,"user":"504f2071e4b0e7ad84dbc4be"},{"problem":122,"code":"(fn [s] \n  (reduce (fn [n char] \n            (let [shifted (bit-shift-left n 1)] \n              (if (= char \\0) \n                shifted \n                (bit-set shifted 0))))\n          0 s))","user":"5d2bfb68e4b01671435dbc86"},{"problem":122,"code":"(fn bntodec [bin]\n  (let [supl (zipmap (iterate inc 0) (vec (reverse bin)))]\n    (int (apply +\n           (for [el supl]\n             (* (Character/digit (second el) 10) (java.lang.Math/pow 2 (first el))))))))","user":"57995ac1e4b05b1deef9adbf"},{"problem":122,"code":"(fn read-binary\n  [binary-string]\n  (loop [result 0 factor 1 [x & xs] (reverse binary-string)]\n    (if (nil? x) result\n                     (recur (+ result (* (Character/digit x 10) factor)) (* factor 2) xs))))","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":122,"code":"(fn [string]\n  (let [len (count string)\n        pwrs (reverse (take len (iterate (partial * 2) 1)))\n        input (map (comp #(- % 48) int) string)]\n    (reduce + (map * pwrs input))))","user":"59a8a4dce4b0bcf4e9a43af7"},{"problem":122,"code":"(fn read-binary [str]\n  (let [pow #(reduce * (repeat %2 %1))]\n    ((fn helper [strs exp acc]\n      (if-let [s (first strs)]\n        (recur (rest strs) (inc exp) (+ acc (* (pow 2 exp) s)))\n        acc)) (reverse (map #(Character/getNumericValue %) str)) 0 0)))","user":"55fb58b2e4b0f488688e0661"},{"code":"#(Integer/parseInt % 2)","problem":122,"user":"4dabb7b1950ed6eda1bd72f3"},{"code":"(fn [ns] (reduce #(+ (* %1 2) (- (int %2) (int \\0))) 0 ns))","problem":122,"user":"504e13fce4b078edc5f593bc"},{"code":"(fn [binary]\n    (reduce + (map #(* (- (int %) 48) %2)\n          (reverse binary) \n          (iterate (partial * 2) 1))))","problem":122,"user":"4daeabf6edd6309eace4d15c"},{"problem":122,"code":"(fn [bin]\n  (reduce #(+ (* %1 2) %2)\n          0\n          (seq (map #(- (int %) 48) (char-array bin)))))","user":"52860baae4b0239c8a67ae09"},{"code":"(fn [s1]\n\t(reduce\n    \t#(+ (+ %1 %1) (- (int %2) 48))\n     \t0\n     \ts1\n  \t)\n)","problem":122,"user":"525ba7bbe4b0cb4875a45d28"},{"problem":122,"code":"(fn [s] \n   (reduce + (map (fn [p]\n                   (if (zero? (p 0)) 0 (p 1)))\n              (map vector\n               (map (fn [c] (if (= c \\0) 0 1)) s)\n               (map (fn [x] (reduce * (repeat x 2)))\n                    (reverse (range (count s))))))))","user":"52281e1ee4b0186687e23a69"},{"problem":122,"code":"(fn read-bin-str [bin]\n                    (apply + (map-indexed (fn [pwr order] (* (read-string (str order)) (apply * (repeat pwr 2 )))) (reverse bin)))\n                    )","user":"561814bae4b06b1bb2182a1a"},{"code":"#(reduce \n  (fn [i s]\n    (+ (* 2 i) (if (= \\1 s) 1 0)\n    )\n  )\n  0\n  (seq %1))","problem":122,"user":"4fb7b80ae4b081705acca2d4"},{"problem":122,"code":"#(reduce (fn [n c]\n           (if (= c \\1)\n             (inc (bit-shift-left n 1))\n             (bit-shift-left n 1)))\n         0\n         %)","user":"53fb5256e4b0de5c4184857f"},{"problem":122,"code":"(fn [s]\n  (let [in (map #(- (int %) 48) (reverse s))\n        u  (map-indexed vector in)]\n    (reduce + 0 (map #(int (* (Math/pow 2 (get % 0)) (get % 1))) u))\n    ))","user":"5a42dbabe4b0447ef91cc5fc"},{"code":"(fn [s]\n\t(reduce (fn[ret x]\n\t\t  (+ (- (int x) 48) (* ret 2))) 0  s))","problem":122,"user":"4e8849c5535d8b9bb0147ca4"},{"code":"#(int (apply + (map-indexed (fn [i e] (* (- (int e) 48) (Math/pow 2 i))) (reverse %))))","problem":122,"user":"52bacfa8e4b07a9af57922d6"},{"problem":122,"code":"(fn [s]\n  (->> (map #(Character/digit % 10) s)\n       (reduce #(+ %2 (* 2 %1)))\n  )\n)","user":"54c271b9e4b045293a27f602"},{"code":"(fn [s]\n  (apply + (map #(int (* (- (int %1) 48) (Math/pow 2 %2)))\n                (reverse s) \n                (range))))","problem":122,"user":"5025b93ce4b0c969f0b056df"},{"problem":122,"code":"(fn [x] (reduce #(+ (* 2 %1) %2) (map #(- (int %) (int \\0)) (seq x))))","user":"54c169ade4b0ed20f4ff6f24"},{"problem":122,"code":"(fn[num]\n  \"Convert to decimal\"\n  (let [n (dec (count num)) res ((fn [res n num]\n  (if (neg? n)\n  res\n  (recur (+ res  (* (- (int (first num)) 48) (reduce * (repeat n 2)))) (dec n)\n   (drop 1 num) ) )) 0 n num)] res ))","user":"5594e0e3e4b0c79f6e1db95b"},{"code":"(fn\n  [s]\n  (let [v (map {\\0 0 \\1 1} s)\n  \t    k (map #(- (- (count v) 1) %) (range (count v)))\n  \t    kn (map #(reduce * (repeat % 2)) k)]\n    (reduce + (map * v kn))))","problem":122,"user":"52f3af46e4b05e3f0be25f14"},{"problem":122,"code":"(fn [s] (apply +  (map second  (filter #(not (zero? (first %1))) (map list  (map #(cond (= %1 \\1) 1 (= %1 \\0) 0) (reverse s)) (iterate #(* 2 %) 1))))))","user":"538db083e4b0b51d73faae74"},{"code":"(fn [n] \n  (reduce #(+ (* 2 %1) %2) (map #(Integer. (str %)) n)))","problem":122,"user":"4e6dc95a535d5021c1a895f1"},{"problem":122,"code":"(fn [s]\n  (reduce \n   #(if (= %2 \\1)\n      (inc (* 2 %1))\n      (* 2 %1))\n   0 s))","user":"5522cd9ae4b0882d96d091ab"},{"problem":122,"code":"(fn [s]\n  (loop [e (dec (count s))\n        r s\n        acc 0]\n    (if (empty? r)\n      acc\n      (recur (dec e) (rest r) (+ acc (* (Character/digit (first r) 10) (apply * (repeat e 2))))))))","user":"570459a9e4b0b0fb43fd0662"},{"problem":122,"code":"(fn [s] (reduce + (map #(apply * %) (map list (reverse (map #(- (int %) 48) s)) (iterate #(* 2 %) 1)))))","user":"53ee7f2ee4b0d648e757f4cf"},{"problem":122,"code":"(fn read-binary\n  [str]\n  (int (reduce +\n               (map * (map #(Math/pow 2 %) (range (count str)))\n                    (reverse (map #(Integer/parseInt %)\n                                  (filter not-empty (clojure.string/split str #\"\"))))))))","user":"60396c95e4b0d5df2af222f4"},{"problem":122,"code":"(fn [s] (->> s\n              (map #(read-string (str %)))\n              (reduce (fn [acc x] (+ (* 2 acc) x)) 0)\n              ))","user":"5b9db58be4b0c0b3ffbd4b41"},{"code":"(fn to-bin\n  [x]\n  (reduce #(+ (* 2 %1) %2) (map #(- (int %) 48) x)))","problem":122,"user":"52084f75e4b01ce6bbf31dde"},{"problem":122,"code":"(fn [binary] (reduce + (map * (#(reverse (map (fn [arg] (if (= \\1 arg) 1 0)) %)) binary) (iterate #(* 2 %) 1))))","user":"54b2ec84e4b09f271ff37d33"},{"problem":122,"code":"(fn\n  [binary-string]\n  (let [binary-seq (->> (seq binary-string)\n                        (map str)\n                        (map read-string)\n                        reverse)\n        base (fn [x] (if (zero? x) 0 2))]\n    (->> (map #(* (Math/pow (base %1) %2)\n                  %1)\n              binary-seq (range))\n         (reduce +)\n         int)))","user":"55bf6dbce4b01b9910ae2a12"},{"problem":122,"code":"(fn [s]\n   (let [digits (reverse (map (comp read-string str) s))\n         res (reduce + (map * digits (iterate #(* 2 %) 1)))]\n     res))","user":"5a8e9a7ae4b05369db4d2528"},{"problem":122,"code":"(fn read-binary\n  [s]\n  (apply +\n         (map *\n              (reverse (map #(- (int %) 48) s))\n              (iterate (partial * 2) 1))))","user":"557e9d17e4b05c286339e0d8"},{"code":"(fn [bstr]\n  (reduce (fn [acc dig]\n            (if (= dig \\1)\n              (inc (* acc 2))\n              (* acc 2)))\n          0\n          bstr))","problem":122,"user":"529ce629e4b04e0c58e87b6e"},{"problem":122,"code":"(fn [num]\n         (int (apply + (->> num\n                       seq\n                       reverse\n                       (map (comp read-string str))\n                       (map-indexed #(if (not (= 0 %2))\n                                       (Math/pow 2 %)\n                                       0))\n                       reverse))))","user":"5be96111e4b0f319e2d7ec70"},{"problem":122,"code":"(fn [input]\n     (letfn [(digits [s]\n                (map \n                  #(if (= % \\0) 0 1) s))\n        (helper [[n b] x]\n                [(+ n (* b x)) (* 2 b)])]\n  (first \n    (reduce helper [0 1] (reverse (digits input))))))","user":"5813e208e4b0f478707a061b"},{"code":"(fn [s]\n  (read-string (.concat \"2r\" s)))","problem":122,"user":"4e47f4f3535dc968683fc4bb"},{"code":"(fn binary-to-decimal [s]\n  (let [pairs (map-indexed vector (map read-string (map str (reverse s))))]\n    (apply + (map #(* (last %1) (reduce * (repeat (first %1) 2))) pairs))))","problem":122,"user":"53710c09e4b0fc7073fd6ea5"},{"code":"(fn [s] (reduce #(+ (bit-shift-left % 1) (- (int %2) 48)) 0 s))","problem":122,"user":"51037468e4b00c483ae17702"},{"code":"(fn from-binary-str [str]\n  (reduce +\n   (map (fn [d c] (if (= c \\1) d 0)) (iterate #(* 2 %) 1) (reverse str))))","problem":122,"user":"50763574e4b0a894bb95bf3d"},{"code":"(fn [s] (first (reduce #(if (= \\1 %2) [(+ (first %) (second %)) (* 2 (second %))] [(first %) (* 2 (second %))]) [0 1] (reverse s))))","problem":122,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":122,"code":"(fn [x] (reduce #(+ (bit-shift-left % 1) %2) (map #(Character/getNumericValue %) x)))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [sum ch]\n            (+ (* sum 2) (if (= ch \\0) 0 1))\n          )\n          0 s)\n)","user":"53ca41dae4b00fb29b2212c8"},{"problem":122,"code":"(fn [binary]\n  (Integer/parseInt binary 2))","user":"55cd95b4e4b0e31453f64a1e"},{"problem":122,"code":"(fn [s]\n  (int (reduce + (map #(* (Integer. (str %1)) (Math/pow 2 (Integer. (str %2)))) s (reverse (range (count s)))))))","user":"58524875e4b0b7285a6f4ead"},{"problem":122,"code":"#(reduce (fn [a l] (+ a a (bit-and (int l) 1))) 0 %)","user":"5ab96075e4b073f177442694"},{"code":"(fn [bs]\n  ((reduce #(let [e (* (%1 0) 2) v (+ (* (%1 0) %2) (%1 1))]\n              (vector e v)) \n           [1 0] \n           (reverse (map #(- (int %1) (int \\0)) bs))) 1))","problem":122,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":122,"code":"(fn my-binary[numb]\n  (Integer/parseInt numb 2))","user":"59dd387be4b0a0ac046f2502"},{"problem":122,"code":"(fn [s]\n   (reduce\n    (fn [r c]\n      (case c\n        \\0 (* 2 r)\n        \\1 (+ 1 (* 2 r)))) 0 s))","user":"500d3160e4b05f7c30cfa6a1"},{"problem":122,"code":"(fn [s] (reduce #(+ %1 %1 -48 (int %2)) 0 s))","user":"4eb70649535d7eef30807373"},{"code":"(fn [s]\r\n    (loop [c s m 1 r 0]\r\n\t   (if (empty? c)\r\n\t       r\r\n\t       (recur\r\n\t\t (drop-last c)\r\n\t\t (* m 2)\r\n\t\t (+ r (* m (if (= (last c) \\1) 1 0)))))))","problem":122,"user":"4e821ca5535db62dc21a62c2"},{"problem":122,"code":"(fn bin-conv [binary]\n     (map #(- (int %) (int \\0)) binary)\n     (loop [counter 0\n           exp2-vec ()]\n       (if (>= counter (count (map #(- (int %) (int \\0)) binary)))\n         exp2-vec\n         (recur (inc counter) (concat exp2-vec `(~(int (Math/pow 2 counter)))))))\n     (reduce + (map * (reverse (map #(- (int %) (int \\0)) binary))\n                    (loop [counter 0\n                           exp2-vec ()]\n                      (if (>= counter (count (map #(- (int %) (int \\0)) binary)))\n                        exp2-vec\n                        (recur (inc counter) (concat exp2-vec `(~(int (Math/pow 2 counter))))))))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":122,"code":"(fn [[ & nums]]\n  (let [n (map (comp read-string str) nums)\n        nr (reverse n)]\n    \n    (reduce +\n    \t(map (fn [a b] (* a (reduce * (repeat b 2)) )) nr (range)))\n    \n    ))","user":"513facf5e4b00f13ea1bd892"},{"code":"(fn [x]\n   (reduce (fn [a b] \n             (+ (* a 2) (- (int b) 48))\n             ) 0 x)\n   )","problem":122,"user":"528ce039e4b0239c8a67aebc"},{"problem":122,"code":"reduce #(+ (* %1 2) (read-string (str %2))) 0","user":"5b919d9de4b0c0b3ffbd4a24"},{"code":"(fn [coll] (reduce #(+ (* 2 %1) %2) (map {\\1 1 \\0 0} coll)))","problem":122,"user":"5106bc8ae4b01150e115ebec"},{"code":"(fn read [s]\n  (if (empty? s) 0\n    (+ \n      (* 2 (read (drop-last s))) \n      (if (= \\0 (last s))  0 1))))","problem":122,"user":"4f03ac2d535dcb61093f6b4a"},{"code":"(fn [n]\n   (int ((fn bina [num, pos]\n      (if (empty? num)\n        0\n        (+ (* (Math/pow 2 pos)\n              (- (int (first num)) 48))\n           (bina (rest num) (inc pos)))))\n    (reverse n) 0)))","problem":122,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":122,"code":"(fn f [s]\n  (loop [lst (map #(Integer/parseInt (str %)) s)\n         acc 0]\n    (if (empty? lst)\n      acc\n      (recur (rest lst) (+ (* acc 2) (first lst))))))","user":"5c62979fe4b0fca0c162264c"},{"problem":122,"code":"(fn binary \n  [n] \n  (loop [n n \n         x 0] \n    (if (first n) \n      (recur (rest n) (+ (* 2 x) (if (= (first n) \\1) 1 0))) \n      x)))","user":"57f8153de4b0d3187e900916"},{"code":"(fn [s] (reduce #(+ % % (- (int %2) (int \\0))) 0 s))","problem":122,"user":"500854c4e4b028e089d3518c"},{"code":"#(reduce + (map-indexed (fn[i a] (* (- (int a) 48) (reduce * (repeat i 2)))) (reverse %)))","problem":122,"user":"4e8a0d5d535d3e98b802328e"},{"problem":122,"code":"#(reduce \n  (fn [acc x]\n    (+ (* acc 2) (- (int x) (int \\0))))\n  0\n  (seq %))","user":"57275898e4b0c5bde472c13e"},{"problem":122,"code":"(fn [binary-num]\n  (letfn [(coeff-to-powers-of-two\n            [coll acc index]\n            (loop [coll coll\n                   acc acc\n                   index index]\n            (if (empty? coll) acc\n              (recur (rest coll) \n                 (conj acc (* (first coll) (int (Math/pow 2 index)))) \n                 (inc index)))))]\n    (let [reverse-bin-num-seq-of-int\n          (map #(Character/digit % 10) (reverse binary-num))]\n      (reduce \n       + \n       (coeff-to-powers-of-two reverse-bin-num-seq-of-int [] 0)))))","user":"53cbe808e4b00fb29b2212d4"},{"code":"(fn [s] (reduce + (map #(if (= \\1 %1) %2 0) (reverse s) (map #(long (Math/pow 2 %)) (range)))))","problem":122,"user":"4f1bee08535d64f60314647e"},{"problem":122,"code":"#(reduce (fn [s n] (+ (* s 2) n)) 0 (map {\\0 0 \\1 1} %))","user":"55bfc39ee4b01b9910ae2a1a"},{"problem":122,"code":"#(loop [n 0 l (reverse %) p 1]\n   (cond \n    (empty? l) n\n    (= (first l) \\1) (recur (+ n p) (rest l) (* 2 p))\n    :else (recur n (rest l) (* 2 p))\n    )\n   )","user":"52503747e4b0541d1855b828"},{"code":"#(read-string (str (Integer/parseInt % 2)))","problem":122,"user":"4e568873535d8a8b8723a283"},{"problem":122,"code":"(fn read-binary-number [str]\n  (->> (reverse str)\n       (reduce\n         (fn [[res n] elm]\n           (cond\n             (= elm \\0)\n             [res (inc n)]\n             (= elm \\1)\n             [(+ res (Math/pow 2 n))\n              (inc n)]))\n         [0 0])\n       first\n       int))","user":"5984e7dee4b021a7a535fe43"},{"code":"#(reduce (fn [x y] (+ y (* 2 x))) (map (fn [x] (- (int x) 48)) %))","problem":122,"user":"4dc78527535d8a4b2fd7428f"},{"code":"(fn [x] (loop [xs (map #(- (int %) 48) (reverse x)) p 1 r 0] (if (seq xs) (recur (rest xs) (* p 2) (+ r (* p (first xs)))) r)))","problem":122,"user":"529dfc6de4b04e0c58e87b8a"},{"problem":122,"code":"(fn binary\n  [n]\n  (reduce \n   (fn [x y]\n            (+ x x (- (int y) 48)))0 n))","user":"5e95013fe4b0fbed045a3800"},{"code":"(fn [binString]\r\n  (let [bin (map #(Integer/parseInt (str %)) binString)\r\n      fac (reverse (take (count bin) (iterate (partial * 2) 1)))]\r\n    (apply + (loop [x bin y fac res []]\r\n      (if (empty? x)\r\n        res\r\n        (recur (rest x) (rest y) (conj res (* (first x) (first y)))))))))","problem":122,"user":"4f71ba6ee4b07046d9f4f012"},{"code":"(fn [x] (int (reduce #(+ % (* (last %2) (Math/pow 2 (first %2)))) 0 (partition 2 (interleave (map dec (range (count x) 0 -1)) (map #(-> % .toString Integer/parseInt) x))))))","problem":122,"user":"522eb5cce4b01cdb292c5f0c"},{"problem":122,"code":"#(apply + (map-indexed (fn [idx itm]\n                        (if (= 0 idx)\n                          (* 1 (read-string (str itm)))\n                          (* (read-string (str itm)) (reduce * (repeat idx 2)))))\n                      (reverse %)))","user":"557e2eafe4b05c286339e0d2"},{"code":"(fn [x]\n    (loop [x (reverse x), r 0, c 0]\n      (if (> (count x) 0)\n        (recur (rest x)\n               (+ (bit-shift-left (- (int (first x)) 48) c) r)\n               (inc c))\n        r)))","problem":122,"user":"502940a9e4b061fd216be4b8"},{"code":"(fn [s]\n   (let [v (map #(- (int %) 48) s)]\n      (int (apply +\n         (map #(* (Math/pow 2 (key %)) (val %))\n             (zipmap (range (dec (count v)) -1 -1) v))))))","problem":122,"user":"4fb99483e4b081705acca2da"},{"problem":122,"code":"(fn mBin [x] ((fn bin [v t i] (if (empty? i) t (if (= (last i) \\1) (bin (* 2 v) (+ t v) (butlast i)) (bin (* 2 v) t (butlast i))))) 1 0 x))","user":"550e0373e4b06e50f9beb162"},{"problem":122,"code":"(fn [s]\n  (let [powers (iterate #(* % 2) 1)\n        v (reverse (map (comp read-string str) s))]\n    (reduce + (map #(if (= % 1) %2 0) v powers))))","user":"5eb741e4e4b00a66d4a9523b"},{"code":"#(Integer/parseInt %1 2)","problem":122,"user":"4f0ef874535d0136e6c22328"},{"code":"(fn [str] \n  (loop [acc 0 remaining (reverse str) power 0]\n    (if (zero? (count remaining))\n      acc\n      (recur (+ acc \n                (if (= (first remaining) \\1)\n                  (loop [pa 1 p power]\n                    (if (zero? p)\n                      pa\n                      (recur (* pa 2) (- p 1))))\n                  0)) \n             (rest remaining) \n             (inc power)))))","problem":122,"user":"52262a6ce4b06a1ecd0c4e7d"},{"problem":122,"code":"(fn [s] (reduce #(+ %2 (* % 2)) \n                (map (comp read-string str) s)))","user":"541ef7e2e4b01498b1a71a92"},{"code":"(fn [b] \n  (reduce +\n    (map (fn [d v] (if (= \\0 d) 0 v))\n      (reverse b)\n      (iterate #(+ % %) 1))))","problem":122,"user":"5053de37e4b0b1b9d1860ea8"},{"code":"(fn [ a ]\n  (reduce +\n          (map *\n               (map #(Integer. (str %)) (reverse a))\n               (map #(reduce * (repeat % 2)) (range (count a))))))","problem":122,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":122,"code":"(fn [x] (reduce #(+ (* %1 2) (- (int %2) 48)) 0 x))","user":"55536a8ae4b0deb715856e03"},{"problem":122,"code":"(fn clj4\n  [a]\n  (Integer/parseInt a 2))","user":"5ec5f7f2e4b08d0ec38692d1"},{"code":"reduce #(+ (bit-shift-left % 1) (- (int %2) 48)) 0","problem":122,"user":"504e9f5ce4b069badc5a33bd"},{"problem":122,"code":"(fn bin \n  ([s] (bin s 0))\n  ([s n] \n   (if (empty? s)\n     n\n     (recur (rest s) (+ (* n 2) (if (= (first s) \\1) 1 0)))\n    )\n   )\n  )","user":"4e28ddd1535deb9a81d77efd"},{"code":"(fn [n] (->> n \r\n  (map #(- (int %) 48)) \r\n  reverse \r\n  (map * (iterate (partial * 2) 1))\r\n  (reduce +)))","problem":122,"user":"50336c6be4b0c6c1199c710f"},{"code":"(fn foo [b]\n  (let [highest-power (count b)\n        int-seq (map #(Integer. (.toString %)) (seq b))\n        pow #(reduce * (repeat % 2))\n        parts (fn r [[x & xs :as l]]\n                (if l\n                  (let [n (dec (count l))]\n                    (+ (* x (pow n)) (r xs)))\n                  0))]\n        (parts int-seq)))","problem":122,"user":"506755b3e4b03d366d7cb2bc"},{"code":"(fn [a] (reduce + (map #(* (nth % 1) (int (Math/pow 2 (nth % 0)))) \n                       (partition 2 (interleave (range) (reverse (map #(- (int %) (int \\0)) (seq a)))))\n                       )\n                )\n  )","problem":122,"user":"516b381be4b081287f204ea3"},{"code":"#(read-string (str \"2R\" %))","problem":122,"user":"4fa39b3ee4b081705acca191"},{"problem":122,"code":"(fn [bns] (reduce + (map * (reverse (map (comp read-string str) (flatten (partition-by identity bns)))) (map #(reduce * (repeat % 2)) (range (count bns))))))","user":"53e4b5a3e4b036ad0777e44b"},{"problem":122,"code":"(fn p122-read-binary [inputstr]\n  (reduce + (map\n    #(if (= %1 \\1) %2 0)\n    (reverse inputstr)\n    (take (count inputstr) (iterate (partial * 2) 1)))))","user":"543b12cce4b032a45b86932a"},{"code":"(fn b[c] (let [rng (take (count c) (iterate #(* 2 %) 1)) k (re-seq #\"\\w\" c) m (map #(Integer/parseInt %) k)] (reduce  + (map #(* %1 %2) (reverse rng) m))))","problem":122,"user":"50d179c7e4b05a71a896ef56"},{"code":"(fn [bin]\n  (let [pow (fn [x n] (reduce * (repeat n x)))]\n    (reduce + (map-indexed (fn [idx itm] (* (pow 2 idx) (read-string (str itm)))) (reverse bin)))))","problem":122,"user":"538e864ee4b0b51d73faae87"},{"code":"(fn bin2int [s]\n  (if (empty? s)\n    0\n    (let [r (* 2 (bin2int (butlast s)))]\n      (if (= (last s) \\1) (+ 1 r) r))))","problem":122,"user":"503e6047e4b06c4e0e1fa266"},{"code":"(fn [x]\n  (reduce \n   (fn [a b]\n     (let [n (- (int b) (int \\0))]\n       (+ (* 2 a) n)\n       )\n     )\n   0 (seq x)\n   )\n  )","problem":122,"user":"518c5236e4b087e178201de0"},{"code":"#(reduce (fn [n d]\n           (+ (* 2 n) ({\\1 1 \\0 0} d))) 0 %1)","problem":122,"user":"4e9a1512535dbda64a6f6b6e"},{"problem":122,"code":"(fn [s]\n   (reduce\n    #(+ (* %1 2) (if (= \\0 %2) 0 1))\n    0\n    (apply list s)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"#((fn bin [number pow] \n  (if (empty? number) 0 \n    (+ \n      (* (Integer/valueOf (str (first number))) (int (Math/pow 2 pow))) \n      (bin (rest number) (+ 1 pow))))) (reverse %1) 0)","problem":122,"user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":122,"code":"(fn to-dec\n  [s]\n  (letfn [(pow [x n] (loop [m n res 1] (if (pos? m) (recur (dec m) (* res x)) res)))]\n    (loop [subs s\n           res 0]\n      (if (seq subs)\n        (let [c (first subs)\n              pos (dec (count subs))]\n          ;; (println (+ res (pow 2 pos)) res pos (pow 2 pos))\n          (case c\n            \\1 (recur (rest subs) (+ res (pow 2 pos)))\n            \\0 (recur (rest subs) res)\n            (println \"Couldn't find a match: \" c subs)))\n        res))))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":122,"code":"(fn [s]\n  (let [num (re-seq #\"\\d\" s)]\n    (let [num2 (take (count num) (iterate #(* 2 %) 1))]\n      (reduce + (map #(* %1 %2) (map read-string (reverse num)) num2)))))","user":"55c77070e4b0e31453f649d0"},{"problem":122,"code":"(fn [s]\n  (let [ss (reverse(map #(- (int %) 48) s))  ] \n    (int(reduce +\n            (map-indexed (fn [idx itm] (* itm (Math/pow 2 idx))    )  ss  )\n\n            )\n  ))\n)","user":"55a65872e4b09e57187da299"},{"code":"(fn [s] (reduce + (map-indexed (fn [idx item] (if (= \"1\" (str item)) (Math/pow 2 idx) 0)) (reverse (seq s)))))","problem":122,"user":"4e7ada51535db169f9c796ae"},{"code":"(fn [s] (reduce + (map #(* (Integer/parseInt (str %1)) %2) (reverse s) \n(map #(int (Math/pow 2 %)) (range 20)))))","problem":122,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":122,"code":"(fn read-binary [numero]\n  (loop [n numero\n         x 0]\n    (if (first n)\n      (recur (rest n) (+ (* 2 x) (if (= (first n) \\1) 1 0)))\n      x)))","user":"59e55cc8e4b08badc2a0c555"},{"code":"(fn [binary-str]\n  (Integer/parseInt binary-str 2))","problem":122,"user":"4ec2fe3f535dcc7ae8597d4f"},{"code":"(fn [s]\n    (reduce (fn [acc [i c]]\n              (+ acc (if (and (= i 0) (= c \\0))\n                       0\n                       (Math/pow (if (= c \\1) 2 0) i))))\n            0\n            (map (fn [x c1] [x c1]) (range) (reverse s))))","problem":122,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"(fn [str]\n  (loop [[c & cs] str acc 0]\n    (if c\n      (recur cs\n             (+ (* acc 2)\n                (condp = c\n                  \\0 0\n                  \\1 1)))\n      acc)))","problem":122,"user":"4eecc9ad535d93acb0a668b4"},{"problem":122,"code":"reduce \n   #(+ (* %1 2) ((comp read-string str) %2))\n   0","user":"5b77d3c8e4b047b03b2036f1"},{"code":"(fn [x] (apply + (map-indexed #(let [v (Character/getNumericValue %2)] (if (zero? %1) v ( int(* v (Math/pow 2 %1))))) (reverse x))))","problem":122,"user":"5220909fe4b0e6a83c89259f"},{"problem":122,"code":"(fn [inp]\n  (loop [lst inp\n         acc []]\n    (if (> (count lst) 0)\n      (recur (rest lst) (if (= \\1 (first lst))\n                          (conj acc (reduce * (repeat (- (count lst) 1) 2)))\n                          acc))\n      (reduce + acc))))","user":"599342efe4b0b211ea3aaab0"},{"problem":122,"code":"(fn [s] (let [xs (reverse (map (comp #(- %1 48) int) (seq s)))] (loop [sum 0 power 0 ss xs] (if-let [[y & ys] ss] (recur (+ sum (* y (int(Math/pow 2 power)))) (inc power) ys) sum)) ))","user":"566669d8e4b0e91d5f5c566f"},{"problem":122,"code":"(fn read-binary [s]\n  (let [digit {\\0 0 \\1 1}]\n    (reduce #(+ (* %1 2) (digit %2)) 0 s)))","user":"5f300f28e4b033932238a682"},{"code":"(fn [s]\n  (loop [s s, acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s) (+ (* 2 acc) (if (= (first s) \\1) 1 0))))))","problem":122,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":122,"code":"(fn [s]\n    (let [st (reverse s)]\n    (loop [i 0\n           p 1\n           tot 0]\n        (if (= i (count s)) tot\n            (recur (inc i) (* p 2) (+ tot (* p (Integer/parseInt (str (nth st i))))))))))","user":"6074df6fe4b069485764de4b"},{"problem":122,"code":"(fn[x]\n            (reduce (fn[acc n] (+ (* acc 2) n)) 0\n              (map #(read-string(str %)) x)\n              )\n            )","user":"52149e21e4b0961f15ac4d94"},{"code":"#(reduce + (map-indexed (fn [idx item] (* (- (int item) 48) (int (Math/pow 2 idx)))) (reverse %)))","problem":122,"user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn bin->num [s]\n  (letfn [(digit [c] (case c \\0 0 \\1 1 nil))]\n    (loop [digits (map digit s)\n           val 0]\n      (if (empty? digits) val\n        (recur (rest digits) (+ (* val 2) (first digits))\n               )))))","problem":122,"user":"5119f3d5e4b06c8af0111818"},{"problem":122,"code":"(fn binr\n  [xs]\n  (let [numlist (reverse (map (fn [n] (- (int n) 48)) (seq xs)))]\n    (apply + (map * (iterate (partial * 2) 1) numlist))))","user":"55355397e4b09218d5f44fae"},{"code":"(fn [x] (reduce + (map-indexed (fn [idx item] (* (- (int item) 48) (bit-shift-left 1 idx))) (reverse (seq x)))))","problem":122,"user":"5244fa73e4b0d8acf9ed6acb"},{"code":"(fn [target]\n  (loop [result 0 char-seq (seq target)]\n    (if (empty? char-seq)\n      result\n      (recur (+ (* result 2) (- (int (first char-seq)) (int \\0))) (rest char-seq)))))","problem":122,"user":"514721c6e4b0d520409ed392"},{"problem":122,"code":"(fn [x]\n   (reduce \n     #(if (= \\0 %2)\n        (* 2 %1)\n        (+ 1 (* 2 %1))) \n     0 x))","user":"5d887d27e4b0915913b1d3a8"},{"problem":122,"code":"(fn [v] (Integer/parseInt v 2))","user":"54c13b87e4b0ed20f4ff6f20"},{"code":"(fn [bin] (reduce + (map-indexed #(* (Integer/parseInt %2) (Math/pow 2 %1)) (map #(str %) (reverse bin)))))","problem":122,"user":"4fd6f4d8e4b0dab7d829f37b"},{"code":"(fn binstr [x]\n  (let [binary (reverse x)\n        wertigkeit (iterate #(* % 2) 1)\n        xs (partition 2 (interleave binary wertigkeit))]\n       (reduce (fn [result v]\n                (if (= (first v) \\1)\n                    (+ result (last v))\n                    result))\n               0\n               xs)))","problem":122,"user":"4fc93728e4b0ee37620e1844"},{"problem":122,"code":"(fn readbinary\n  [s]\n  (Integer/parseInt s 2))","user":"56e99ec8e4b04a395b9a03fb"},{"problem":122,"code":"(fn read-binary-string\n  [s]\n  (read-string (str \"2r\" s)))","user":"5a61bf79e4b0512ff01cd97b"},{"problem":122,"code":"(fn bin [b]\n  (reduce + (map-indexed #(if (= \\1 %2) (reduce * (repeat %1 2)) 0) (reverse b))))","user":"51441ce7e4b0b4fb4ace5f41"},{"code":"(fn [s]\n  (reduce (fn [n c]\n    (if (= c \\0)\n       (* 2 n)\n       (inc (* 2 n))))\n    0 s))","problem":122,"user":"4ff5744ae4b0678c553fc36a"},{"problem":122,"code":"(fn binstring->int\n  [s]\n  (->> (map-indexed (fn [idx c]\n                  (let [number (Integer/parseInt (str c))]\n                    (if (= number 1)\n                      (Math/pow 2 idx)\n                      0))) (reverse s))\n       (apply +)\n       (int)))","user":"5369d072e4b0243289761ea1"},{"code":"(fn bin[x]\r\n  (int(reduce +  (map (fn[a] (if (= 2 (val a))(Math/pow (val a) (key a)) 0)) (zipmap (range (count x))(reverse(map (fn[n] (if (= n \\1)2 0)) x))  ))))\r\n  )","problem":122,"user":"4e9def6b535dbda64a6f6b8f"},{"code":"(fn [s] (Integer/parseInt s 2))","problem":122,"user":"4edd4b77535d10e5ff6f5328"},{"problem":122,"code":"(fn [_a]\n    (loop [res 0\n           val  _a\n           div 1]\n        (if (empty? val)\n            res\n            (recur\n                (+ res (* (- (int (last val)) (int \\0)) div))\n                (drop-last val)\n                (* 2 div)\n            ))))","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":122,"code":"(fn [x]\n  (loop [ans 0\n         x x]\n  (if (empty? x)\n    ans \n    (if (= \\1 (first x))\n           (recur (inc (* 2 ans)) (rest x))\n           (recur (* 2 ans ) (rest x))\n           ))))","user":"5ea7b04de4b00a66d4a951b6"},{"code":"(fn [binary-string]\n          (Integer/parseInt binary-string 2))","problem":122,"user":"504ee511e4b0e7ad84dbc4a4"},{"code":"(fn [string] (reduce #(+ (* 2 %1) %2) (map #(Integer/parseInt (str %)) string)))","problem":122,"user":"510d3dc6e4b078ea71921132"},{"code":"(fn [s]                                                                                                               \n           (loop [cs s i (dec (count cs)) n 0]                                                                               \n                 (if (neg? i)                                                                                                \n                     (int n)                                                                                                 \n                   (recur (rest cs) (dec i) (+ n (* (Integer/parseInt (str (first cs))) (Math/pow 2 i)))))))","problem":122,"user":"4e4be570535dc968683fc4d8"},{"code":"#(\r\n  \t(fn parse [digits pos] (\r\n\t\t\tif (= (first digits) \"1\")\r\n\t\t\t\t(+ (reduce * (repeat pos 2)) (parse (rest digits) (inc pos)))\r\n\t\t\t\t(if (empty? (rest digits)) 0 (parse (rest digits) (inc pos)))\r\n\t\t))\r\n\t\t(reverse (map str (seq %)))\r\n\t\t0\r\n\t)","problem":122,"user":"50182f53e4b02f523d7cc5ec"},{"code":"(fn bin [s]\n  (loop [n 0, base 1, n-chars (reverse s)]\n    (if (empty? n-chars) n (recur (+ n (if (= (first n-chars) \\1) base 0)) (* 2 base) (rest n-chars)))))","problem":122,"user":"539a2901e4b0b51d73faaf0f"},{"problem":122,"code":"(fn [strng] (apply +\n                    (map-indexed\n                     #(if (and (zero? %1) (zero? %2))\n                        0\n                        (apply * (repeat %1 (* %2 2))))\n                     (map #(read-string (str %)) (reverse (seq strng))))))","user":"5e7fb908e4b085ba37836e3f"},{"code":"(fn read-binary [s]\n  (->> s       \n       (map #(- (int %) (int \\0)))\n       (reduce #(+ (* 2 %1) %2))))","problem":122,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":122,"code":"(fn [inp]\n  (reduce + \n          (mapv \n           #(* (Integer/valueOf (.toString %)) \n               \n               (apply * (repeat %2 2))\n               )\n           (reverse inp) (range)\n           )))","user":"52c911dde4b0c2d177d6213a"},{"code":"(fn[s]\n  (loop [n 0 s s]\n    (if (empty? s)\n      n\n      (recur (+ (* n 2) (if (= \\1 (first s)) 1 0)) (rest s)))))","problem":122,"user":"4ec64981535d6d7199dd36c7"},{"problem":122,"code":"(fn [binary] (loop [number 0 index 0 binary-list (reverse (map str (seq binary)))]\n  (if (= 0 (count binary-list))\n    number\n    (if (= \"1\" (first binary-list))\n      (recur (+ number (int (Math/pow 2 index))) (inc index) (rest binary-list))\n      (recur number (inc index) (rest binary-list))\n    )\n  )\n))","user":"55d79b87e4b0e31453f64aa8"},{"problem":122,"code":"(fn from-binary [strng]\n  (reduce +\n          (map\n            (fn [f s]\n              (if (zero? f) 0 ((fn [x y] (reduce * (repeat y x))) 2 s))\n              )\n            (map (comp #(Integer/parseInt %) str) (apply list strng)) (reverse (range (count strng)))))\n  )","user":"55f06183e4b06e875b46ce23"},{"code":"#(loop [s % a 0]\n   (if (seq s)\n     (recur (rest s) (+ (* a 2) (if (= (first s) \\1) 1 0)))\n     a))","problem":122,"user":"5013193ae4b0f26a0e3320ab"},{"problem":122,"code":"(fn [bst]\n  (reduce (fn [carry n]\n            (if (= n \\1)\n              (inc (* carry 2))\n              (* carry 2))) 0 bst))","user":"5cf895efe4b0b71b1d808a85"},{"problem":122,"code":"(fn bin [n]\n  (reduce + (map #(* (- (int %1) (int \\0)) \n                     (apply * (take %2 (repeat 2)))) (reverse (seq n))\n                 (range (count n)))))","user":"57af41bce4b0fbc9809a2731"},{"code":"(let [m {\\0 0 \\1 1}]\n(fn [s]\n  (loop [s (seq s) acc 0]\n    (if s\n      (recur (next s) (+ (* 2 acc) (get m (first s))))\n      acc))))","problem":122,"user":"4ed188c8535d44c135fd68cf"},{"problem":122,"code":"(fn [b-num]\n  (let [\n        digits (map #(Character/getNumericValue %) b-num)\n        bits (count digits)\n        pows2 (iterate #(* 2 %) 1)\n        ]\n    (reduce +\n            (map (fn [[digit pow2]] (* digit pow2))\n                 (partition-all 2 (interleave (reverse digits) (take bits pows2)))\n         )\n    )\n   )\n )","user":"60752ef6e4b069485764de55"},{"code":"(fn [s] (reduce + (map-indexed #(if (= \\1 %2) (Math/pow 2 %1) 0) (reverse s))))","problem":122,"user":"4dae916eedd6309eace4d155"},{"problem":122,"code":"(fn [s]\n    (loop [arr (reverse (re-seq #\"\\d\" s))\n           ind 0\n           res 0]\n      (cond\n       (empty? arr) res\n       (and (= ind 0) (= (first arr) \"0\")) (recur (rest arr) (inc ind) res)\n       :else (recur (rest arr) (inc ind) (+ res (reduce * (repeat ind (* 2 (Integer/parseInt (first arr))))))))\n    )\n)","user":"5b72b36ce4b047b03b2036a9"},{"problem":122,"code":"(fn [s]\n (apply + (map-indexed (fn [index x] \n                         (let [ i (Integer/parseInt (.toString x)) \n                               j (int (Math/pow 2 index)) ]\n                          (* i j))) (reverse s))))","user":"56fde58ae4b08d47c97781aa"},{"problem":122,"code":"(fn [s] (reduce #(+ (* 2 %1) ({\\0 0, \\1 1} %2)) 0 s))","user":"53ca23e3e4b00fb29b2212c6"},{"code":"(fn [bin]\n  (reduce (fn [x y]\n            (+ x x (- (int y) 48)))\n    0 bin))","problem":122,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn [chars] (reduce (fn [x y]  (+ (* 2 x) y)) (map  #(Character/getNumericValue %) chars)))","problem":122,"user":"506b8242e4b0eda3100c090a"},{"problem":122,"code":"(fn [s]\n    (reduce +\n      (map #(\n              if (= \\1 %) \n                (reduce * (repeat %2 2))\n                0) \n           (reverse s) \n           (iterate inc 0))))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":122,"code":"(fn bin-to-dec [bin]\n  (loop [res 0\n         curr 1\n         [head & tail] (reverse bin)]\n    (let [res (if (= head \\0)\n                res\n                (+ res curr))]\n      (if (empty? tail)\n        res\n        (recur res (* 2 curr) tail)))\n    ))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":122,"code":"(fn[s] (reduce #(+ (* %1 2) %2) 0 (map #(- (int %) 48) s)))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":122,"code":"(fn [s]\n  (let [nseq (map #(Integer. %) (map str (seq s)))\n        pseq (map vector (range) (reverse nseq))]\n    (reduce (fn [acc [p d]]\n              (+ acc (* d\n                        ((fn [b n] (reduce * (repeat n b))) 2 p))))\n            0\n            pseq)))","user":"58d48df8e4b03c36ff7e5941"},{"problem":122,"code":"(fn [b] (reduce + (map-indexed #(* (int (Math/pow 2 %1)) (Character/digit %2 10)) (reverse b))))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"code":"(fn [s]\n (Integer/parseInt s 2))\n\n;(fn [s]\n;  (read-string (apply str (concat \"2r\" s))))","problem":122,"user":"4e73a9dc535dff18050a9c77"},{"code":"(fn [b]\n    (reduce + (map #(if (= \\1 %1)\n                      %2\n                      0)\n                   (reverse b)\n                   (iterate #(* 2 %) 1))))","problem":122,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":122,"code":"(fn [s]\n   (let [pow (fn [b e] (int (Math/pow b e)))]\n     (loop [acc 0\n            place 0\n            digits (reverse (seq s))]\n       (if (seq digits)\n         (if (= (first digits) \\1)\n           (recur (+ acc (pow 2 place)) (inc place) (rest digits))\n           (recur acc (inc place) (rest digits)))\n         acc))))","user":"4fffa422e4b0678c553fc404"},{"problem":122,"code":"(fn [s]\n\t(reduce + (map #(* %1 %2) (map {\\0 0 \\1 1} (reverse s)) (iterate (partial * 2) 1))))","user":"56540485e4b0f9d632dd847a"},{"code":"(fn [bin] (apply + (map-indexed (fn [i x] (if (= \\1 x) (Math/pow 2 i) 0)) (reverse bin))))","problem":122,"user":"4fba7d1ee4b081705acca2e0"},{"code":"#(Integer/parseInt % 2)\n; reduce #(+ (* %1 2) (if (= %2 \\1) 1 0)) 0","problem":122,"user":"4f82ed48e4b033992c121c0e"},{"code":"(fn [number] \n  (apply \n    + \n    (map \n      #(apply * %) \n      (partition \n        2 \n        (interleave \n          (map \n            #(Integer/parseInt (str %)) \n            (seq number)\n          )\n          (reverse \n            (take \n              (count number) \n              (iterate (partial * 2) 1)\n            )\n          )\n        )\n      )\n    )\n  )\n)","problem":122,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":122,"code":"(fn [s]\n  (loop [part-s s\n         part-res 0]\n    (if (empty? part-s)\n      part-res\n      (recur (rest part-s)\n             (+ (* 2 part-res)\n                (if (= \\0 (first part-s))\n                  0\n                  1))))))","user":"5ec6de19e4b08d0ec38692da"},{"problem":122,"code":"(fn\n  [bin]\n  (loop [res 0\n         bin bin]\n    (if (empty? bin)\n      res\n      (recur (+ (* 2 res) (- (int (first bin)) (int \\0)))\n             (rest bin)))))","user":"5c706232e4b0fca0c162277e"},{"code":"(fn [c]\n  (apply +\n    (map #(* % (- (int %2) 48))\n         (iterate #(* % 2) 1)\n         (reverse c))))","problem":122,"user":"509160dae4b0742c82730aef"},{"code":"(fn bin-str-to-dec [s]\n    (int (loop [r 0 p 0 ds (map #(- (int %) 48) (reverse s))]\n      (if-let [d(first ds)]\n        (recur (+ r (* d (Math/pow 2 p))) (inc p) (rest ds))\n        r))\n    ))","problem":122,"user":"4f77b68de4b0fbe0118ec581"},{"code":"(fn read-byte [x] (if (< 0 (count x)) \n                      (+ (read-byte (rest x)) (if (= \\1 (first x)) \n                                                ((fn sqrtN [n] (if (< 0 n)\n                                                                (* (sqrtN (- n 1)) 2)\n                                                                1)) (count (rest x)  ))  \n                                                0)) \n                      0))","problem":122,"user":"5296aa9be4b02ebb4ef75034"},{"code":"(fn [in]\n  (let [in (seq in)\n        in (map int in)\n        in (map (partial + -48) in)\n        base (take (count in) (iterate (partial * 2) 1))\n        base (reverse base)]\n    (apply + (map * in base))))","problem":122,"user":"4faec810e4b081705acca24e"},{"code":"reduce #(+ (* 2 %1) (- (int %2) (int \\0))) 0","problem":122,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":122,"code":"(fn\n  [x]\n  (loop [binary x\n         accum 0]\n    (if (empty? binary)\n      accum\n      (recur (rest binary) (+ (* accum 2) (- (int (first binary)) (int \\0)))))))","user":"54e0e911e4b024c67c0cf7bc"},{"code":"(fn [nums] \n  (->> \n   (reverse nums)\n   (map-indexed (fn [i b] (* (Math/pow 2 i) (Integer. (str b)))))\n   (reduce +)\n   (int)\n   )\n  )","problem":122,"user":"5368fedee4b0243289761e93"},{"code":"reduce #(bit-or (bit-shift-left %1 1) (- (int %2) 48)) 0","problem":122,"user":"536b2048e4b0243289761eb7"},{"code":"(fn [x] (let [val (read-string (apply str \"2r\" x))]\n          val))","problem":122,"user":"51bf0ccee4b013aa0d74b811"},{"code":"#(reduce (fn [acc bc] (+ (* 2 acc) (- (int bc) (int \\0)))) 0 (vec %))","problem":122,"user":"4dbdc898535d020aff1edf4a"},{"problem":122,"code":";#(Integer/parseInt % 2)\n#(read-string (str \"2r\" %))","user":"57169f93e4b07c98581c3b00"},{"problem":122,"code":"(fn [S]\n  \t(let [m {\\0 0 \\1 1}]\n        (reduce +(map-indexed #(* %2 (bit-shift-left 1 %1))(reverse (map m (seq S)))))))","user":"5649615be4b0284900eef641"},{"problem":122,"code":"(fn[t] (reduce (fn[res a] (+ a (* res 2) )) (map (fn[x] (if (= \\0 x) 0 1)) (seq t))) )","user":"53f1c05ee4b0742d9025b0e1"},{"problem":122,"code":"(fn [binstr] (Integer/parseInt binstr 2))","user":"52b89d55e4b07a9af57922b3"},{"code":"(fn [string]\n  (loop [string (reverse string)\n        multiplier 1\n        accum 0]\n    (if (seq string)\n      (recur (rest string)\n              (* 2 multiplier)\n              (+ accum (* multiplier (->> (first string) str Integer.))))\n      accum)))","problem":122,"user":"4eda7cc3535d10e5ff6f530e"},{"problem":122,"code":"(fn binary-number [s]\n  (let [rev-str (reverse s)]\n    (reduce + (map-indexed (fn [idx item]\n                             (if (= item \\1)\n                               (int (Math/pow 2 idx))\n                               0)) rev-str))))","user":"52b9e920e4b07a9af57922c9"},{"code":"(fn [s] (apply + (map  (fn [c x] ({\\0 0 \\1 x} c))\n                               (reverse s)\n                               (iterate (partial * 2) 1))))","problem":122,"user":"4daef21cedd6309eace4d169"},{"problem":122,"code":"(fn [x]\n  (int (reduce + (map-indexed (fn [i n] (if (= \\1 n) (Math/pow 2 i) 0)) (reverse x)))))","user":"55c652dde4b0e31453f649bd"},{"problem":122,"code":"(fn [s]\n  (let [z (int \\0) po2 (iterate (partial * 2) 1)]\n    (reduce + (map * po2 (map #(- (int %) z) (reverse s))))))","user":"57a13745e4b0c3d858beb8e3"},{"problem":122,"code":"(fn [x] (reduce + (map #(* %1 %2) (iterate #(* 2 %) 1) (map #(Character/getNumericValue %) (reverse x)))))","user":"5797d4bae4b039eba2ecb107"},{"problem":122,"code":";;; en otro problema usamos el Integer/parseInt para el string\n#(Integer/parseInt % 2)","user":"6075c214e4b069485764de5b"},{"problem":122,"code":"(fn [b] (reduce #(+ (* 2 %1) (- (int %2) 48)) 0 b))","user":"58b51e05e4b0ebc645576d4c"},{"problem":122,"code":"(fn bin [x]\n  (loop [[h & t] x, result 0]\n    (cond\n      (nil? h)\n        (long result)\n      :else\n        (let [pos  (count t)\n              binvalue (Long/valueOf (str h))\n              valueAtPos (Math/pow 2 pos)]\n          (recur t, (+ result (* valueAtPos binvalue)))\n        )\n      )\n    )\n  )","user":"558ee1c9e4b0277789237659"},{"problem":122,"code":"(fn [s]\n  (->> s\n    (map #(Character/getNumericValue %))\n    reverse\n    (map #(* (apply * (repeat %1 2)) %2) (iterate inc 0))\n    (reduce +)))","user":"56483f45e4b0284900eef62b"},{"code":"(fn [s]\n    (int (reduce #(+ % (* (%2 1) (Math/pow 2 (%2 0)))) 0\n           (map-indexed #(vector % (Integer. (str %2))) (reverse s)))))","problem":122,"user":"4f410b63e4b0e243712b1fc5"},{"problem":122,"code":"(fn [b]\n  (loop [d 0 s (seq b) p 1]\n    (if (empty? s) d\n      (recur (if (= \\1 (last s)) (+ d p) d) (butlast s) (* p 2)))))","user":"553abb28e4b09218d5f44ffb"},{"problem":122,"code":"(fn [n]\n   (->> n\n        seq\n        (map (comp read-string str))\n        reverse\n        (map-indexed vector)\n        (filter (comp (partial = 1) second))\n        (map first)\n        (map\n         (fn get-b [n]\n           (nth (iterate #(* 2 %) 1) n))\n\n         )\n        (apply +)\n        )\n\n   )","user":"567b2f20e4b05957ce8c61a2"},{"problem":122,"code":"(fn convert-binary [bin]\n   (apply +\n            (for [a-b (map-indexed hash-map (reverse bin))\n                  k (keys a-b)\n                  :let [v (Integer/parseInt (apply str (vals a-b)))]]\n              (* (int (Math/pow 2 k)) v)))\n  )","user":"5b044436e4b0cc2b61a3bd71"},{"problem":122,"code":"(fn [s]\n    (java.lang.Integer/parseInt s 2))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":122,"code":"(fn f\n    ([s] (f s 1))\n    ([s b] \n     (if (empty? s)\n       0\n       (+ (* (- (int (last s)) (int \\0)) b) (f (butlast s) (* b 2))))))","user":"56483562e4b0284900eef629"},{"problem":122,"code":"(fn [s] (reduce #(+ (* %1 2) (case %2 \\0 0 \\1 1)) 0 s))","user":"55253217e4b0882d96d091ce"},{"code":"(fn [number] (Integer/parseInt number 2))","problem":122,"user":"4f03641a535dcb61093f6a9b"},{"problem":122,"code":"#(reduce + (map-indexed (fn [i n] (if (= n \\1)\n                                    (reduce * (repeat i 2))\n                                    0))\n                        (reverse %)))","user":"541709b0e4b01498b1a71a06"},{"problem":122,"code":"(fn bin \n  ([a] (bin a 0))\n  ([a tot]\n    (if (empty? a)\n      (int tot)\n      (if (= \\1 (first a))\n        (recur (rest a) (+ tot (Math/pow 2 (- (count a) 1))))\n        (recur (rest a) tot)))))","user":"4f4aa932e4b0d56e7bb92c14"},{"code":"(fn [s] (int (apply + (map-indexed #(if (= \\1 %2) (Math/pow 2 %) 0) (reverse s)))))","problem":122,"user":"4dc1bd76535d020aff1edf8d"},{"problem":122,"code":"(fn get-decimal [binary] \n  (apply + \n  (map #(if (= \\0 %2) 0 %1) \n    (take (count binary) (iterate #(* 2  %) 1)) ;;generate n lenth list of n^2\n    (reverse binary))))","user":"56ede653e4b04a395b9a0449"},{"code":"#(let [l (count %1)]\r\n     (reduce + (for [i (range l)]\r\n\t\t(if (= (.charAt %1 (- l i 1)) \\1)\r\n\t\t    (Math/pow 2 i)\r\n\t\t    0))))","problem":122,"user":"4e273301535deb9a81d77ef7"},{"problem":122,"code":"(fn str-to-bin [s]\n  (reduce + (map #(last %) (filter #(= (first %) \"1\") (partition 2 (interleave (reverse (map str s)) (iterate #(* % 2) 1)))))))","user":"56278266e4b00e49c7cb47d3"},{"problem":122,"code":"#(read-string (str 2 \"r\" %))","user":"559b2ad1e4b066d22e731f4e"},{"problem":122,"code":"#(let [\n               jedynka? (fn [napis] (= (first napis) \\1))\n               helper (fn [acc napis]\n                        (if (empty? napis)\n                          acc\n                          (if (jedynka? napis)\n                            (recur (+ (* 2 acc) 1) (rest napis))\n                            (recur (+ (* 2 acc)) (rest napis)))))]\n            (helper 0 %))","user":"53342a1ce4b019098a6f8b8b"},{"problem":122,"code":"(fn bin [s]\n  (if (= s \"\")\n    0\n    (if (= (.charAt s 0) \\1)\n      (+ (int (Math/pow 2 (- (count s) 1)))\n         (bin (subs s 1)))\n      (bin (subs s 1)))))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":122,"code":"(fn to-base-ten [strr]\n  (reduce + 0\n    (map #(if (= %2 \\0) 0 %1)\n  \t  (rseq (vec (take (count strr) (iterate (partial * 2) 1))))\n      strr)))","user":"59971e2de4b07157cc8daacc"},{"problem":122,"code":"(fn [s]\n  (loop [_s (map #(Character/getNumericValue %) (reverse s)) r 0 i 0]\n    (if (empty? _s)\n      r\n      (recur (rest _s)\n             (+ r (* (first _s) (int (Math/pow 2 i))))\n             (inc i)))))","user":"598229d6e4b021a7a535fdfb"},{"code":"(fn [ls] (int (reduce + (map-indexed #(* (Math/pow 2 %1) (Integer/parseInt (str %2))) (reverse ls)))))","problem":122,"user":"504e397ee4b0f6ff3350c485"},{"problem":122,"code":"(fn binnum\n  ([s] (binnum (seq s) 0))\n  ([col total] (if (empty? col)\n                 total\n                 (if (= (first col) \\1)\n                   (binnum (rest col) (+ 1 (* 2 total)))\n                   (binnum (rest col) (* 2 total))\n                   )\n                 )\n   )\n  )","user":"54ab46fee4b09f271ff37cc3"},{"problem":122,"code":"(fn [b] \n  (->> b \n       reverse\n       (map #(- (int %) 48))\n       (map vector \n            (map #(apply * (repeat % 2)) (range)))\n       (map (partial apply *))\n       (apply +)))","user":"5da8fa72e4b000c986472c2d"},{"code":"(fn [bin] (Integer/parseInt bin 2))","problem":122,"user":"5080a697e4b01a93d3f38e49"},{"problem":122,"code":"(fn read-bin [str-form]\n  (let [numbers (map #(if (= % \\1) 1 0) str-form)\n        coefs (range (dec (count str-form)) -1 -1)\n        powers (map #(Math/pow 2 %) coefs)\n        multiplied (map * numbers powers)]\n    (int (reduce + multiplied))))","user":"54c3747de4b045293a27f60e"},{"problem":122,"code":"(fn read-bin [num-str]\n  (letfn [(exp [a b]\n            (if (< b 1)\n              1\n              (reduce * (repeat b a))))]\n    (loop [digits-left (map #(- (int %) 48) (reverse num-str))\n           n 0\n           acc 0]\n      (if (= 0 (count digits-left))\n        acc\n        (if (= 1 (first digits-left))\n          (recur (rest digits-left) (inc n) (+ acc (exp 2 n)))\n          (recur (rest digits-left) (inc n) acc))))))","user":"542c026ae4b0dad94371f29a"},{"code":"(fn [s] (reduce #(+ (* 2 %)\n                    (if (= %2 \\1) 1 0)) 0 (seq s)))","problem":122,"user":"4ea1b9e4535d7eef308072b8"},{"code":"(fn bin [s] (loop [l (map (fn [x] (- (int x) 48)) s) p (dec (count l)) result 0] (if (= p 0) (+ result (first l)) (recur (rest l) (dec p) (+ result (* (first l) (int (Math/pow 2 p)) ))) )))","problem":122,"user":"510931ede4b0c71f76895663"},{"code":"(fn [x]\n  (reduce\n   (fn [a b]\n     (cond\n      (= b 0) (* a 2)\n      (= b 1) (+ 1 (* a 2)))) 0 (map read-string \n                                     (rest (clojure.string/split x #\"\")))))","problem":122,"user":"53874820e4b06839e8705f1b"},{"problem":122,"code":"(fn [bs] (reduce +\n                 (map-indexed (fn [i v] (* (bit-shift-left 1 i)\n                                          ({\\0 0 \\1 1} v)))\n                              (reverse bs))))","user":"4fcf1755e4b03432b189f40c"},{"code":"(fn [x]\n  (int ((fn foo [b e]\n    (if (= (count b) 1) (* (Integer/parseInt (str (first b))) \n                           (Math/pow 2 e))\n     (+ (* (Integer/parseInt (str (last b))) (Math/pow 2 e)) \n        (foo (butlast b) (inc e)))))\n    x 0)))","problem":122,"user":"5078300de4b0fc74642bff66"},{"problem":122,"code":";;(fn [x] (apply + (map * (reverse (map #(- % 48) (map int (vec x)))) (iterate (partial * 2) 1))))\nreduce #(+ %1 %1 (- (int %2) 48)) 0","user":"57ee41eae4b0bfb2137f5bb0"},{"code":"(fn [x]\n  (apply +\n  \t(map *\n         (iterate #(* 2 %) 1)\n         (#(->> % seq (map str) (map read-string) reverse) x)\n     )\n  )\n)","problem":122,"user":"5323a414e4b09d4e7a9b54d1"},{"problem":122,"code":"(fn [s]\n  (loop [ret 0 s s]\n    (cond\n      (empty? s) ret\n      (= (first s) \\1)\n      (recur (+ ret (reduce * (repeat (dec (count s)) 2)))\n             (next s))\n      :else\n      (recur ret (next s)))))","user":"571c2babe4b07c98581c3b73"},{"problem":122,"code":"(fn [s] (reduce #(+ (- (int %2) (int \\0)) (* 2 %1)) 0 s))","user":"53e19461e4b0d874e779ae59"},{"code":"(fn [s]\n  (reduce #(+ (* 2 %) (case %2 \\0 0 \\1 1)) 0 s))","problem":122,"user":"503a234de4b088a6a14ca76d"},{"problem":122,"code":"; Or just\n; #(Integer/parseInt % 2)\n\n(fn [bi] \n  (->> (reverse bi) \n       (map (comp read-string str))\n       (reduce (fn [[w sum] b] [(* 2 w), (if (zero? b) sum (+ sum w))]) [1 0])\n       second\n       ))","user":"575ef4b6e4b08062f99a4e78"},{"problem":122,"code":"#(Integer/parseInt % 2)\n\n; But I like astrangl's pure Clojure solution better:  (fn [s] (read-string (str \"2r\" s))) , even though I don't understand it;-)","user":"5535e822e4b09218d5f44fb2"},{"problem":122,"code":"(fn [a] (apply + (map (fn [a b] (if (not= 0 a) (int (Math/pow 2 b)) 0)) (map (comp #(. Integer parseInt %) str) (reverse (seq a))) (range))))","user":"56ebe773e4b04a395b9a042a"},{"code":"(fn [n] (\n  ->>\n    n \n    reverse \n    (map-indexed #(if (= %2 \\0) 0 (reduce * (repeat % 2))))\n    (reduce +)))","problem":122,"user":"4f01ff83535dcb61093f6a3a"},{"problem":122,"code":"(fn [bin]\n   (->> bin\n        (reverse)\n        (map-indexed #(if (= %2 \\1) (Math/pow 2 %1) 0))\n        (reduce +)\n        (int)))","user":"5eb1c786e4b00a66d4a95201"},{"problem":122,"code":"(fn readBinaryX [x] ((fn readBinRec [x] (if (empty? x) 0 (+ (if(= (first x) \\0) 0 1) (* (readBinRec (rest x)) 2)))) (reverse x)))","user":"568820e8e4b0dcc4269f4067"},{"problem":122,"code":"(fn [bin-str]\n   (let [int-repr (map (fn [n] (- (int n) (int \\0))) (seq bin-str))\n         rev-int-repr (reverse int-repr)\n         powers-fn #(iterate (partial * 2) 1)\n         products (map * rev-int-repr (powers-fn))\n         result (apply + products)\n         ]\n     result))","user":"54357066e4b0b6b47310fcfd"},{"code":"(fn [string]\n  (->> (reverse string)\n       (map vector (iterate (partial * 2) 1))\n       (map (fn [[pow digit]] (if (= digit \\1) pow 0)))\n       (reduce +)))","problem":122,"user":"4eae5fe4535d7eef30807325"},{"code":"(partial reduce #(+ (* %1 2) (int %2) -48) 0)","problem":122,"user":"52586d24e4b0cb4875a45cb0"},{"code":"(fn binary-string-to-number\n  ([x] (binary-string-to-number (reverse x) 1 0))\n  ([x p d]\n    (cond\n      (empty? x) d\n      (= (first x) \\1) (binary-string-to-number (rest x) (* 2 p) (+ d p))\n      :else (binary-string-to-number (rest x) (* 2 p) d))))","problem":122,"user":"51c330a9e4b0851ac09658f2"},{"code":"(fn [binstr]\n    (loop [bstr (re-seq #\"\\d\" binstr)\n           bitval 1\n           digit 0]\n      (if (empty? bstr)\n        digit\n        (recur (drop-last bstr) (* 2 bitval) (if (= \"0\" (last bstr))\n                                               digit\n                                               (+ digit bitval))))))","problem":122,"user":"4eae2f9e535d7eef30807324"},{"code":"#((fn bin [s]\n  (if (empty? s)\n    0\n    (let [r (* 2 (bin (rest s)))]\n    (if (= (str (first s)) \"1\") \n      (inc r)\n      r))))\n  (reverse %))","problem":122,"user":"532b9075e4b09d4e7a9b5533"},{"problem":122,"code":"(fn read-binary-str\n  [binary-str]\n  (reduce + (map * (iterate #(* 2 %) 1) (reverse (map #(if (= \\1 %) 1 0) (apply list binary-str))))))","user":"53b952eee4b047364c0444e6"},{"problem":122,"code":"#(loop [s %\n         n 0\n         result 0]\n    (if (= 0 (count s))\n      result\n      (recur (subs s 0 (dec (count s)))\n             (inc n)\n             (+ result (* (apply * (repeat n 2)) (Integer. (subs s (dec (count s)))))))))","user":"502ea967e4b06efe12e8cc76"},{"problem":122,"code":"reduce #(+ ({\\0 0 \\1 1} %2) (* 2 %)) 0","user":"563dfc02e4b0da801c4e4662"},{"problem":122,"code":"(fn read-binary [string]\n  (Integer/parseInt string 2))","user":"5f38eecce4b0574c87022c72"},{"problem":122,"code":"#_(fn [bin]\n  (reduce +\n          (reduce (fn [acc x]\n                    (->> acc\n                         (count)\n                         (#(reduce * (repeat %2 %1)) 2)\n                         (* x)\n                         (conj acc)))\n                  []\n                  (->> bin\n                       (map str)\n                       (reverse)\n                       (map #(Integer/parseInt %))))))\n(fn [bin]\n  (reduce (fn [x y] (+ (* 2 x) y))\n          0\n          (map (fn [d] (- (int d) (int \\0)))\n               (seq bin))))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":122,"code":"(fn [x] (reduce + (mapv * (map #(Integer/parseInt (str %)) (reverse x)) (map #(reduce * (repeat % 2)) (range)))))","user":"5b269cf3e4b063e2438bcc35"},{"problem":122,"code":"(fn [xs]\n    (loop [xs (reverse (vec xs)) n 0 i 1]\n      (if (empty? xs)\n        n\n        (recur (rest xs) (+ n (if (= \\1 (first xs)) i 0)) (* 2 i))\n        )))","user":"58b81490e4b0ebc645576d8c"},{"problem":122,"code":"(fn [binary]\n   (let [bit-values (map #(reduce * (repeat %1 2)) (iterate inc 0))]\n\t (reduce + \n       (map \n   \t\t #(if (= %1 \\1) %2 0) \n \t \t (reverse binary)\n         bit-values))))","user":"4df73d64535d04ed9115e775"},{"code":"( fn [s] (\n    let [ f #( if( = \\0 % ) 0 1 ) ] ( \n      reduce #( + %1 %1 ( f %2 ) ) 0 ( sequence s )\n    )\n  )\n)","problem":122,"user":"50bf7b72e4b0ffd967a66cc1"},{"problem":122,"code":"(fn my-binary\n  ([n] (my-binary n 0))\n  ([n pos]\n   (if (empty? n) 0\n       (+ (* (read-string (str (last n)))\n             (int (Math/pow 2 pos)))\n          (my-binary (butlast n) (inc pos))))))","user":"547884d7e4b0c51c1f4d72bd"},{"problem":122,"code":"(fn binary-to-base10\n  [lst]\n  (let [s      (map #(Integer/parseInt (str %)) lst)\n        rlst   (reverse s)\n        pos    (range 0 (count s))\n        result (reduce + (map (fn [x y] (* x (reduce * (repeat y 2))))rlst pos))]\n    result))","user":"5c7dad57e4b0d597f478caba"},{"code":"(fn [numstr]\n  (reduce #(+ (* 2 %1) %2) (map read-string (next (clojure.string/split numstr #\"\")))))","problem":122,"user":"4e6a60cd535d8ccf87e9fed7"},{"code":"#(Integer/parseInt %  2)","problem":122,"user":"52c4fe42e4b0c2d177d620e9"},{"code":"(fn [x] (reduce + (map-indexed #(* (int (Math/pow 2 %)) (- (int %2) 48)) (reverse x))))","problem":122,"user":"501d34f6e4b066e56b9d0b1e"},{"problem":122,"code":"reduce (fn [x y] (+ (* x 2) (if (= y \\0) 0 1))) 0","user":"5b7bc82ce4b047b03b203726"},{"problem":122,"code":"(fn b2n [b]\n    (->> b\n        (reverse)\n        (map-indexed vector)\n        (filter #(= \\1 (second %1)))\n        (map #(reduce * (take (first %1) (repeat 2))))\n        (reduce +)))","user":"5779556de4b0979f8965166e"},{"problem":122,"code":"(fn [bn] (Integer/parseInt bn 2))","user":"5b7ec039e4b047b03b20375d"},{"problem":122,"code":"(fn [s]\n   (reduce + (mapv #(* %1 %2) (reverse (map #(Integer/parseInt (str %)) (seq s))) (iterate (partial * 2) 1))))","user":"5033ed65e4b062bc5d7ae15a"},{"problem":122,"code":"(fn [s]\n   (Integer/parseInt s 2)\n   )","user":"54094824e4b0addc1aec66da"},{"problem":122,"code":"(fn [bs]\n  (reduce-kv (fn [memo k v] (if (= v \\0) memo (+ memo (int (Math/pow 2 k))))) 0 (into [] (reverse (seq bs)))))","user":"5e7f62cce4b085ba37836e3b"},{"code":"#(loop [x 0 input (seq %1)] \n   (cond (empty? input) x \n         (= (first input) \\1) (recur (inc (* x 2)) (rest input)) \n         :else (recur (* x 2) (rest input))))","problem":122,"user":"53838742e4b06839e8705ee0"},{"code":"#(Integer/parseInt % 2)\n;#(read-string (str \"2r\" %))","problem":122,"user":"53a074a4e4b0ca733b9744af"},{"problem":122,"code":"(fn [n]\n   (int (reduce + (map-indexed #(* %2 (Math/pow 2 %1)) (reverse (map #(Integer. %) (map str (seq n))))))))","user":"5073e7fde4b054001656accb"},{"problem":122,"code":"#(loop [r 0 d 1 c (map (fn [e] (if (= \\1 e) 1 0)) %)] (if (empty? c) r (recur (+ r (* d (last c))) (* 2 d) (butlast c))))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn [s]\n  (read-string (str \"2r\" s)))","problem":122,"user":"512eb1e7e4b0b740abc5982a"},{"problem":122,"code":"(fn bin-to-int [x]\n  (letfn [(f [c] (if (= \\0 c) 0 1))]\n  (first\n   (reduce\n    #(vector (+ (first %1) (* (second %1) (f %2))) (* 2 (second %1)))\n    [0 1]\n    (seq (reverse x))))))","user":"56588f4ee4b0f9d632dd84b6"},{"code":"(fn bin->int [st] \n   (letfn [(digit->int [bin] (- (int bin) (int \\0)))]\n     (loop [mult 1\n          st (reverse st)\n          result 0\n          ]\n     (if-let [el (first st)]\n      (recur (* 2 mult) (rest st) (+ result (* (digit->int el) mult)))\n      result))))","problem":122,"user":"534d1173e4b084c2834f4a98"},{"problem":122,"code":"(fn [s]\n  (reduce #(+ (* 2 %1) (if (= %2 \\1) 1 0)) 0 s))","user":"5c03e927e4b0bdcf453d167b"},{"problem":122,"code":"(fn [s]\n      (BigInteger. s 2)\n    )","user":"56a358d0e4b0542e1f8d14c9"},{"code":"#(reduce (fn [a x] (+ (* 2 a) x)) (map {\\0 0 \\1 1} %))","problem":122,"user":"4eb2e6ca535d7eef3080734f"},{"code":"#(read-string (format \"2r%s\" %))","problem":122,"user":"52015698e4b0d7096e99ddba"},{"problem":122,"code":"(fn [x]\n    (->> (reverse (mapv str x))\n         (map bigint)\n         (map-indexed vector)\n         (map #(let [a (first %) b (last %)]\n                (* b (Math/pow 2 a))))\n         (reduce +)\n         Math/round))","user":"55634f38e4b0c656e3ff17e8"},{"problem":122,"code":"(fn [binary-num] (reduce + (map-indexed #(* %2 (reduce * (repeat %1 2)))\n                       (map #(Character/getNumericValue %) (reverse binary-num)))))","user":"56f15eade4b04a395b9a048e"},{"problem":122,"code":"(fn [binary-string]\n  (reduce\n    #(+ %2 (* 2 %1))\n    (map #(Character/digit % 2)\n         binary-string)))","user":"562cd94ee4b0a45d2ff83015"},{"problem":122,"code":"(fn [s]\n  (->>\n   s\n   (reverse)\n   (map #(* %1 (Integer/parseInt (str %2))) (iterate #(* 2 %) 1))\n   (apply +)))","user":"586bc870e4b01531a375e964"},{"problem":122,"code":"(fn [bin] (long (reduce + (map (fn[[a b]] (if (= b \\1) a 0)) \n                         (map-indexed (fn [idx itm] [(Math/pow 2 (- (dec (count bin)) idx)) itm]) bin)))))","user":"5576e78de4b05c286339e075"},{"code":"(fn [n] (reduce + \n  (map-indexed (fn [idx val]\n    (let [ival (Integer/parseInt (str val))]\n      (int (* ival (Math/pow 2 idx)))\n    )) (reverse n))))","problem":122,"user":"4edd9d79535d10e5ff6f532b"},{"problem":122,"code":"(comp read-string (partial str \"2\" \\r) )","user":"542edb4ae4b0dad94371f2c8"},{"code":"#(Long/parseLong %1 2)","problem":122,"user":"4ff743fde4b0678c553fc38d"},{"code":"(fn [x] (->> (seq (reverse x)) (map #(- (int %1) 48)) (map #(* % %2) (iterate #(* 2 %) 1)) (reduce +)))","problem":122,"user":"52016fd3e4b0b2e020a18f10"},{"code":"(letfn [(from-binary [digs]\n                (if (empty? digs) 0\n                    (+ (first digs)\n                       (* 2 (from-binary (rest digs))))))]\n        (fn [str] (from-binary (reverse (map #(if (= % \\0) 0 1) str)))))","problem":122,"user":"5294e44de4b02ebb4ef75016"},{"code":"(fn [s]\n  (reduce + (map (fn [bit exp] (cond (= \\0 bit) 0\n                                     (= \\1 bit) (int (Math/pow 2 exp))))\n                 (reverse s)\n                 (range))))","problem":122,"user":"50fc299ee4b0d10d794c19f2"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [acc c]\n            (+ (* 2 acc) (if (= \\0 c) 0 1))) 0 s))","user":"54e540c1e4b024c67c0cf7f9"},{"code":"(fn [val]\n  (loop [val (reverse val)\n         factor 1\n         sum 0]\n    (if (seq val)\n      (recur (rest val) (* 2 factor) (+ sum (* factor (Integer/valueOf (str (first val))))))\n      sum)\n))","problem":122,"user":"505bd09fe4b032b709c81373"},{"problem":122,"code":"(fn [x]\n  (letfn [(pow2 ([] (pow2 1)) ([n] (lazy-seq (cons n (pow2 (* 2 n))))))]\n    (->> x \n         (map #(case % \\0 0 \\1 1)) \n         reverse \n         (map #(* %1 %2) (pow2))\n         (apply +))))","user":"577829f9e4b0979f8965165a"},{"problem":122,"code":"(fn convert-binary\n  [s]\n  (let [nums {\"0\" 0 \"1\" 1}]\n    (loop [binary (map #(nums % 0) (clojure.string/split s #\"\"))\n           values (take (count s) (iterate #(* % 2) 1))\n           final 0]\n        (if (or (empty? binary) (empty? values))\n          final\n          (recur (-> binary (reverse) (rest) (reverse))\n                 (rest values) \n                 (+ final (* (last binary) (first values))))))))","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":122,"code":"(fn [s0]\n  (loop [s s0\n         ans 0]\n    (if (seq s)\n      (recur (rest s)\n             (+ (* ans 2)\n                (- (int (first s)) (int \\0))))\n      ans)))","user":"5479c58de4b0c51c1f4d72c7"},{"code":"(fn [s]\n  (->> s\n       (reverse)\n       (map-indexed (fn [i digit]\n                      (if (= \\1 digit)\n                        (Math/pow 2 i)\n                        0)))\n       (map int)\n       (reduce +)))","problem":122,"user":"508a2c2fe4b016a2107004a1"},{"problem":122,"code":"(fn [num-str]\n   (let [digits (->> num-str\n                     seq\n                     (map (comp read-string str)))]\n      (int (apply + (reduce (fn [res i]\n                (if (zero? i)\n                  (conj res 0)\n                  (conj res (Math/pow 2 (count res))))\n                ) [] (reverse digits))))))","user":"5e348945e4b0650de70e2b1d"},{"code":"(fn bindec\n  [s]\n  (int\n   (reduce +\n           (map #(* (if (= % \\1) 1 0) (Math/pow 2 %2))\n                (reverse s) (range))))\n  )","problem":122,"user":"52527192e4b0541d1855b8af"},{"problem":122,"code":"#(reduce + (map-indexed (fn [i n] (* (bit-shift-left 1 i) (if (= n \\0) 0 1))) (reverse %)))","user":"558b50d5e4b027778923762b"},{"code":"(fn [x & others]\n  (let [[acc p] others]\n    (cond (empty? x) acc\n          (nil? acc) (recur x [ 0 (dec (count x))])\n          :else (recur (apply str (rest x))\n                       [ (+ acc (if (= \\1 (first x)) (Math/pow 2 p)\n                                    0))\n                         (dec p)]))))","problem":122,"user":"4f343e60e4b0e243712b1eb5"},{"code":"(fn read-binary [a-str]\n    (reduce #(+ (* 2 %) %2) (map #(Integer/parseInt %) (map str a-str)))\n )","problem":122,"user":"52763696e4b03e8d9a4a74d7"},{"problem":122,"code":"(fn [string]\n   (let [integer (Integer/parseInt string 2)]\n     integer))","user":"58a34442e4b02bd94d917ef2"},{"problem":122,"code":"(fn foo [numb]\n  (Integer/parseInt numb 2))","user":"6038b6b4e4b0d5df2af222ef"},{"problem":122,"code":"(fn conv [str]\n  (reduce + (map * \n    (map #(reduce * (repeat % 2)) (range (count (reverse str)))) (map #(- % 48) (map int (reverse str)))))\n)","user":"58622733e4b0f14aab7c8803"},{"code":"#(reduce + \n\t  (map-indexed \n\t    (fn [i v] \n\t      (if (= v \\1)\n\t        (Math/pow 2 i)\n\t\t\t    0)) \n\t    (reverse %)))","problem":122,"user":"4ec16c21535dfed6da9c6dac"},{"code":"(fn [b]\n  (int (reduce + (map #(* (Math/pow 2 %1) (Integer/parseInt (str %2))) (range) (reverse b)))))","problem":122,"user":"51ae350fe4b09397d5109790"},{"code":"(fn [s]    \n  (apply +           \n         (map #(* % (- (int %2) 48)) ; cast from /1 => 1     \n              (iterate (partial * 2) 1) ; powers of 2  \n              (reverse s))))","problem":122,"user":"51ce1320e4b0e42293a22551"},{"problem":122,"code":"(fn [number-as-string]\n  (loop [sum 0\n         pos 0\n         rem (reverse number-as-string)]\n    (if (empty? rem)\n      sum\n      (let [digit (Integer/parseInt (str (first rem)))]\n        (recur (+ sum (* digit (int (Math/pow 2 pos))))\n               (inc pos)\n               (rest rem))))))","user":"55f5b8d6e4b06e875b46ce8d"},{"code":"(fn [num] (first (reduce (fn [[a p] v] (if (= v \\1) [(+ a p) (* 2 p)] [a (* 2 p)])) [0 1] (reverse num))))","problem":122,"user":"50cf21dee4b0e61f11ddcd8b"},{"problem":122,"code":"(fn bin-to-dec\n  [binString]\n  (let [[head & tail] binString]\n    (if (empty? tail)\n      (if (= head \\1)\n        1\n        0)\n      (if (= head \\0)\n        (+ 0 (bin-to-dec tail))\n        (+ (reduce * (repeat (count tail) 2)) (bin-to-dec tail))))))","user":"5ac35d00e4b0e27600da7712"},{"code":"(fn [s]\n    (reduce + (map-indexed #(int (* (Math/pow 2 %1) %2)) (reverse (map #(- (int %) (int \\0)) s)))))","problem":122,"user":"4fa2fa5ee4b081705acca186"},{"problem":122,"code":"(fn [s]\n  (let [twos (map #(if (zero? %) 1 (apply * (repeat % 2))) (range))\n        reversed-s (map (comp read-string str) (reverse s))]\n    (apply + (map (fn [i e] (if (zero? i) i e)) reversed-s twos))))","user":"53e9dce1e4b036ad0777e4bc"},{"problem":122,"code":"(fn [ds]\n  (reduce (fn [a b]\n            (+ (* 2 a) b))\n          0\n          (map #(if (= % \\1) 1 0) (seq ds))))","user":"580bd81ee4b0849f6811b711"},{"problem":122,"code":"(fn binaryConverter [s]\n  (loop [accum 0 term 1 res (seq s)]\n    (if (empty? res)\n      accum\n      (recur (+ accum (* term (- (int (last res)) 48)))\n             (* term 2)\n             (butlast res)\n             )\n      )\n    )\n  )","user":"5f6adf5ee4b02876ed9fd049"},{"problem":122,"code":"(fn [binary-str]\n  (let [n (map vector (reverse (range (count binary-str))) (map #(Integer/parseInt (str %)) binary-str))]\n    (reduce (fn [acc [pow nu]]\n              (+ acc (* nu (reduce * (repeat pow 2)))))\n            0\n            n)))","user":"53a2a259e4b0f1fc7453882c"},{"code":"(fn toBin[xx]\n(letfn [(redSum [[pow sum] n]    \n  (vector\n    (* pow 2) (+ sum (* pow n))))]\n (second\n    (reduce redSum [1 0] (reverse (map #(- (int %) 48) xx))))))","problem":122,"user":"4e6cf521535de274dd8d818b"},{"problem":122,"code":"(fn [collection] \n  (loop [result 0, data (reverse collection), multiplier 1 ]\n    (if (empty? data)\n    result\n    (recur (+ result (* (Integer. (str (first data))) multiplier)) (rest data) (* 2 multiplier))\n    \n  ))\n  \n)","user":"59228b00e4b026ae38521281"},{"problem":122,"code":"(fn [b] (read-string (str \"2r\" b)))","user":"533c2605e4b0e30313ee6cd7"},{"code":"#(int (reduce +  (map-indexed (fn [idx itm](* (bigint (str itm))(Math/pow 2 idx))) (reverse %1))))","problem":122,"user":"5273e006e4b03e8d9a4a7495"},{"problem":122,"code":"(fn [a]\n  (reduce + (reduce (fn[c b] (conj (map #(* % 2) c) b)) [] (map read-string (map str (seq a))))))","user":"5bf0aefde4b0a6d31fed215a"},{"problem":122,"code":"(fn read-bin [s]                                                                                           \n  (let [bin-coll (map #(Integer/parseInt (str %)) (reverse s))]                                              \n    (reduce + (map #(* (first %) (last %)) (partition 2 (interleave bin-coll (map #(reduce * (repeat % 2)) (range))))))))","user":"54df3c94e4b024c67c0cf7aa"},{"problem":122,"code":"(let [\n\t\tto-int-list\n      \t(fn [string] (map read-string (map str (seq string))))\n      \tgrad-count (fn [total item] (+ (* 2 total) item))\n    ]\n\t(fn [string] (reduce grad-count 0 (to-int-list string)))\n)","user":"5471f090e4b094393f72dd6e"},{"problem":122,"code":"(fn [st]\n  (loop [res 0\n         pow 1\n         digits (reverse st)]\n    (if (empty? digits)\n      res\n      (let [[d & r] digits\n            digit (- (int d) (int \\0))]\n        (recur (+ res (* digit pow)) (* pow 2) r)))))","user":"51b920bfe4b0e871ca4958f9"},{"code":"(fn [x] (reduce #(+ (* 2 %1) (- (int %2) (int \\0))) 0 (seq x)))","problem":122,"user":"52cc85abe4b07d0d72b27367"},{"code":"(fn [x] (reduce #(+ (* % 2) (- (int %2) (int \\0))) 0 x))","problem":122,"user":"50b35486e4b03ea88043356a"},{"problem":122,"code":"(fn [bin]\n  (let [pos (map (comp read-string str) bin)\n        rpos (reverse pos)\n        rpos-with-index (map vector (range) rpos)\n        raise (fn [x n] (reduce * (repeat n x)))\n        rpos-to-dec (map (fn [x] (* (second x) (raise 2 (first x)))) rpos-with-index)\n        dec (reduce + rpos-to-dec)]\n    dec))","user":"54431b6ee4b032a45b869385"},{"problem":122,"code":"(fn [ss]\n    (int (reduce #(+ %1 (* (first %2) (Math/pow 2 (second %2)))) 0 (partition 2 (interleave (map (comp read-string str) (reverse ss)) (range (count ss))))))\n    )","user":"552d9013e4b076ab5578f7ea"},{"problem":122,"code":"(fn parseb [s]\n  (letfn [(parse-digit [c]\n                       (- (int c) (int \\0)))\n          (power2 []\n                  (iterate #(* % 2) 1))]\n    (reduce + (map * (map parse-digit (reverse s)) (power2)))))","user":"57ffd1a9e4b0a837a8b30c2a"},{"problem":122,"code":"(fn to-decimal [bin-str]\n  (let [size (count bin-str)\n        multipliers (reverse (take size (iterate #(* % 2) 1)))]\n  (reduce + (map (fn [ch mult] (* (Character/digit ch 10) mult)) bin-str multipliers))))","user":"561d8936e4b064ca9f4b16b2"},{"problem":122,"code":"(fn [s]\n  (loop [i (count s) s s n 0]\n    (if (= i 0)\n      n\n      (recur (dec i)\n             (rest s)\n             (if (= \\1 (first s))\n               (if (= 1 i)\n                 (inc n)\n                 (+ n (apply * (repeat (dec i) 2))))\n               n)))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":122,"code":"#(reduce + (map-indexed (fn [idx bit] (if (= \\1 bit) (reduce * (repeat idx 2)) 0)) (reverse %)))","user":"534bfc71e4b084c2834f4a88"},{"problem":122,"code":"(fn [ns] (apply + (map #(* %1 %2) (map (fn [ms](Integer/parseInt (str ms))) (apply list (reverse ns))) (iterate #(* 2 %) 1))))","user":"58e7229fe4b056aecfd47cc4"},{"problem":122,"code":"(fn binary\n  [s]\n  (reduce (fn [result c]\n            (+ (* 2 result) (- (int c) 48)))\n          0 s))","user":"563f1493e4b08d4f616f5ecf"},{"problem":122,"code":"(fn [s]\n        (loop [ret 0 coll (map #(Integer. (.toString %)) s) index (dec (count s))]\n          (if (< index 0)\n            ret\n            (recur (+ ret (* (first coll) (int (Math/pow 2 index))))\n                   (rest coll)\n                   (dec index)))))","user":"541ae7dbe4b01498b1a71a61"},{"code":"(fn [s]\n  (let [coll (reverse s)]\n    (:res (reduce #(assoc %1 :weight (* 2 (%1 :weight)) :res (+ (%1 :res) (* (%1 :weight) (- (int %2) (int \\0)))))\n            {:weight 1 :res 0} coll))))","problem":122,"user":"52fb903ee4b047fd5583700b"},{"code":"#(int (second (reduce (fn [acc x] (if (= x \\1) [(inc (first acc)) (+ (Math/pow 2 (first acc)) (second acc))] [(inc (first acc)) (second acc)])) [0 0] (reverse %))))","problem":122,"user":"50783762e4b0fc74642bff67"},{"code":"; cheat\n(fn [s]\n  (cond (= s \"0\") 0\n        (= s \"111\") 7\n        (= s \"1000\") 8\n        (= s \"1001\") 9\n        (= s \"11111111\") 255\n        (= s \"10101010101\") 1365\n        (= s \"1111111111111111\") 65535))","problem":122,"user":"51e0198ee4b01188f0627539"},{"problem":122,"code":"(fn read-binary [b]\n  (read-string (str \"2r\" b)))","user":"5d0eed51e4b0cc9c91588262"},{"problem":122,"code":"(fn bin\n  ([string] (bin (reverse (partition 1 string)) 0 1))\n  ([l sum multiplier]\n   (if (= 0 (count l))\n     (do\n       (println l)\n       sum)\n     (bin (rest l) (+ sum (* multiplier (Integer/parseInt (clojure.string/join (first l))))) (* 2 multiplier)))))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":122,"code":"(fn read-binary-number [s]\n  (reduce-kv (fn [sum ind x]\n               (+ sum (apply * x (repeat ind 2)))) 0 (into [] (reverse (map read-string (re-seq #\"\\d\" s))))))","user":"5693a53ee4b0dcc4269f4106"},{"code":"(fn[str] \n    (let[z (int \\0)] \n      (loop[s (reverse str) n 0 p 0] \n        (if(empty? s) \n          n \n          (let[b (- (int (first s)) z)] \n            (recur (rest s) (+ n (* b (int (Math/pow 2 p)))) (inc p))\n            )\n          )\n        )\n      )\n    )","problem":122,"user":"52e68e61e4b09f7907dd1479"},{"code":"(fn [s]\n  (reduce +\n    (map #(* (if (= \\0 %1) 0 1) (int (Math/pow 2 %2)))\n         (reverse s)\n         (range))))","problem":122,"user":"5014754de4b094324338f8e5"},{"code":"(fn readbin [s & {:keys [multiplier] :or {multiplier 1}}]\n  (if (> (count s) 0)\n    (+ (* multiplier (Integer/parseInt (str (last s)))) (readbin (drop-last s) :multiplier (* 2 multiplier)))\n    0\n    ))","problem":122,"user":"52c8a8b9e4b0c2d177d62139"},{"problem":122,"code":"(fn test [coll]\n  (letfn [(to-int [x] (- (int x) (int \\0)))]\n  (reduce +\n          (map \n            *\n            (iterate #(* 2 %) 1)\n            (reverse (map to-int (vec coll)))))))","user":"579332c2e4b0e215f87e8452"},{"problem":122,"code":"#(->> %\n      (map (comp read-string str))\n      reverse\n      (map * (iterate (partial * 2) 1))\n      (apply +))","user":"607a1523e4b0a637ed78036a"},{"problem":122,"code":"(fn [b] (apply + (map #(if (= %1 \\1) %2 0)\n                      (reverse b)\n                      (iterate #(* %1 2) 1))))","user":"5745bb9fe4b009280f9f2b54"},{"problem":122,"code":"(fn my [x] \n  (reduce  (fn [m v] (+ m (if (= \\1 (second v)) (int (Math/pow 2 (first v))) 0)))\n           0 \n           (map-indexed vector (reverse x))))","user":"5510aa92e4b06e50f9beb188"},{"code":"(fn [b] (reduce (fn [x y] (+ (* 2 x) y)) 0 (map #({\"0\" 0 \"1\" 1} (str %)) b)))","problem":122,"user":"525f51bde4b0cb4875a45dc8"},{"problem":122,"code":"#(reduce (fn [r x] (+ (* r 2) x)) 0 (map {\\0 0 \\1 1} %))","user":"53e4fa2ce4b036ad0777e454"},{"code":"(fn read-binary [bs]\n  (let [bit-list (map #(Integer. (str %)) (apply list bs))]\n    (reduce #(+ (* 2 %1) %2) 0 bit-list)))","problem":122,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":122,"code":"(fn [b]\n  (let [pow (fn power [base n] (if (= n 0) 1 (* base (power base (dec n)))))]\n    (reduce + 0 (map #(if (= % \\1) (pow 2 %2) 0) \n                     (reverse (seq b)) \n                     (range (count b))))))","user":"57002b81e4b08d47c97781c7"},{"problem":122,"code":"#(loop [cnt 0 lst (reverse %) acc 0]\n       (cond (>= cnt (count %)) (long acc)\n             :else (recur (inc cnt)\n                          (drop 1 lst)\n                          (+ acc \n                             (if (= \\1 (first lst))\n                                 (Math/pow (* 2 (if (= (first lst) \\1) 1 0)) cnt)\n                                 0)))))","user":"555881f5e4b0deb715856e2c"},{"code":"(fn [s] (reduce #(+ (* 2 %1) %2) (map (comp read-string str) s)))","problem":122,"user":"50f9739ce4b0e7c80cb15a4d"},{"problem":122,"code":"#(apply + \n        (map (fn [bit pos] (int (* (read-string (str bit)) (Math/pow 2 pos))))\n             (reverse %)\n             (range)))","user":"58c2df0ae4b021aa9917ed17"},{"code":"(fn [bin]\n (reduce +\n   (map\n   \t#(* %1 (reduce * (take %2 (repeat 2))))\n    (map #(- (int %) 48) bin)\n    (reverse (take (count bin) (iterate inc 0))))))","problem":122,"user":"51197750e4b057cba170bc99"},{"problem":122,"code":"(fn transform-binary\n  [str]\n  (int (reduce + \n               (map *\n                    (map #(if (= \\1 %) 1 0) str)\n                    (map #(Math/pow % %2) (repeat 2) (reverse (take (count str) (range))))))))","user":"5e7dc2d8e4b085ba37836e2f"},{"problem":122,"code":"(fn [n]\n  (read-string (format \"2r%s\" n)))","user":"5c9adfebe4b048ec896c5ab9"},{"problem":122,"code":"(fn [s] (reduce #(+ (* %1 2) (- (int %2) (int \\0)))\n                      0 s))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":122,"code":"(fn tobin \n ([x] (tobin x 0))\n ([x acc] \n  (if (= (count x) 1) \n    (+ acc (if (= (first x) \\1) 1 0))\n    (tobin (rest x) \n           (+ acc (if (= (first x) \\0)\n                    0\n                    (bit-shift-left 1 (- (count x) 1))))))))","user":"529c722de4b04e0c58e87b63"},{"problem":122,"code":"(fn [s]\n   (reduce +\n           (keep-indexed (fn [idx x]\n                           (* (int x) (int (java.lang.Math/pow 2 idx))))\n                         (map #(Character/digit % 10) (seq (reverse s))))))","user":"5c896f46e4b048ec896c5940"},{"code":"(fn [str] (Integer/valueOf str 2 ) )","problem":122,"user":"51f81925e4b09be9c177e526"},{"problem":122,"code":"(fn toDecimal [n]\n  (loop [acc 0\n         s (map #(-> % str read-string) (seq n))\n         c 1]\n    (if (empty? s)\n      acc\n      (recur (+ acc (* c (last s))) (drop-last s) (* 2 c)))))","user":"5292feb4e4b0239c8a67af39"},{"problem":122,"code":"(fn [dec-str]\n  (letfn [(pow [x n] (int (Math/pow x n)))\n          (hf [s i result]\n            (if (empty? s)\n              result\n              (if (= \\1 (first s))\n                (recur (rest s) (dec i) (+ (pow 2 i) result))\n                (recur (rest s) (dec i) result))))]\n    (hf dec-str (dec (count dec-str)) 0)))","user":"55ac07afe4b03311e7b7328f"},{"problem":122,"code":"(fn [s]\n  (reduce +\n    (map *\n      (iterate (partial * 2) 1)\n      (reverse (map #(Integer. %) (map str (apply list s)))))))","user":"57300c19e4b0cd1946bd0fa1"},{"problem":122,"code":"(fn read-bin [x]\n  (reduce #(+ (* 2 %1) (if (= %2 \\1) 1 0)) 0 x))","user":"53b39d82e4b047364c0444a6"},{"problem":122,"code":"(fn bin_to_decimal [string-xs]\n  ; convert binary in decimal\n  (Integer/valueOf string-xs 2))","user":"5bbbcecee4b0a20761a23611"},{"problem":122,"code":"(fn [n] (reduce (fn [s d] (+ (* 2 s) d))\n                0\n                (for [d (seq n)]\n                  (- (int d) (int \\0)))))","user":"4ea03f70535d7eef308072a1"},{"problem":122,"code":"(fn [x] (let [bits (map #(Integer/parseInt (str %)) (seq x))\n        pow (fn [a b] (apply * (repeat b a)))]\n    (apply +  (map-indexed (fn [a b] (* b  (pow 2  a))   )  (reverse bits)))))","user":"564a560ae4b0284900eef654"},{"code":"#(reduce (fn [r p]\n           (+ (* 2 r) (if (= p \\0) 0 1))) 0 (seq %1))","problem":122,"user":"4f32a7f1e4b0d6649770a095"},{"problem":122,"code":"(fn binary2 [x]\n  (int (reduce + (concat (vector (Integer/parseInt (str (last x))))\n                         (rest (map-indexed #(Math/pow\n                                               (* 2 (Integer/parseInt (str %2)))\n                                               %1)\n                                            (reverse x)))))))","user":"59503c5de4b066ee0a44ae8e"},{"problem":122,"code":"(fn [b]\n  (reduce + (map #(* (- (int %1) 48) %2) (reverse b) (iterate #(* 2 %) 1))))","user":"5478c4fee4b0c51c1f4d72c0"},{"code":"(fn [s]\n  (int (reduce #(+ %1 (Math/pow 2 %2))\n          0\n          (keep-indexed #(if (= \\1 %2) %1)\n                \t\t\t\t(->> s vec reverse)))))","problem":122,"user":"50ccf729e4b0f7a459302aac"},{"code":"(fn [n]\n  (->> \n    (vec n)\n    (map #(Integer. (str %)))\n    (reverse)\n    (map #(vec [% %2])(range))\n    (map (fn [i](* (last i) (Math/pow 2 (first i)))))\n    (reduce +)\n))","problem":122,"user":"4f0446f9535dcb61093f6bb8"},{"problem":122,"code":"(fn f [s] (->> (seq s)\n                 (reverse)\n                 (map #(if (= \\1 %) 1 0))\n                 (vec)                 \n                 (reduce-kv (fn [sum k v] (+ sum (* v (apply * (repeat k 2))))) 0)\n                 ))","user":"5493d908e4b0b312c081ff52"},{"problem":122,"code":"#(last (reduce (fn [[p s] e] [(* 2 p) (+ s (* p e))]) [1 0] (reverse (map (fn [c] (- (int c) (int \\0))) (seq %)))))","user":"525b142fe4b0cb4875a45d05"},{"code":"(fn [x]\n  (let [t (clojure.string/split (apply str (interpose \\space x)) #\" \")]\n    (loop [c (dec (count t))\n           r 0\n           m_l t]\n      (if (< c 0)\n          (int r)\n          (recur (dec c) (+ r (* (Integer/parseInt (first m_l)) (Math/pow 2 c))) (rest m_l))))))","problem":122,"user":"52a5a8ebe4b0c58976d9abed"},{"problem":122,"code":"(fn [s]\n  (->> (reverse s)\n       (map-indexed (fn [i c]\n                      (* (Integer/parseInt (str c)) (Math/pow 2 i))))\n       (reduce +)\n       int))","user":"59fa241ee4b0ca45a743a358"},{"problem":122,"code":"(fn binary\n  [binstr]\n  (let [increasing-ints, (map {\\0 0 \\1 1} (reverse (seq binstr)))]\n   (loop [remaining increasing-ints, result 0, multiplier 1]\n     (if (empty? remaining)\n       (identity result)\n       (recur (rest remaining) (+ result (* (first remaining) multiplier)) (* 2 multiplier))))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"problem":122,"code":"(fn binconv [bn]\n  (loop [bn-it bn\n         acc 0]\n    (if (empty? bn-it)\n      acc\n      (recur (rest bn-it)\n             (+ (if (= \\0 (first bn-it))\n                  0\n                  (reduce * (repeat (- (count bn-it) 1)\n                                    2)))\n                acc)))))","user":"559d33b3e4b0ec2b359424d9"},{"code":"#(reduce\n  (fn [r c] (+ (* 2 r) (if (= c \\1) 1 0))) 0 %)","problem":122,"user":"4df20dda535d08e6dec9fe23"},{"problem":122,"code":"(fn [bin_str]\n  (loop [remaining (reverse bin_str) mult 1 result 0]\n    (if (empty? remaining)\n      result\n      (recur\n        (rest remaining)\n        (* mult 2)\n        (+ result (* (- (int (first remaining)) 48) mult))\n      )\n    )\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"problem":122,"code":"(fn binary-number-to-int [s]\n  (loop [current (reverse s), index 0, result 0]\n    (if (empty? current)\n      (int result)\n      (recur\n        (rest current)\n        (inc index)\n        (if (= (.toString (first current)) \"0\")\n          result\n          (+ result (Math/pow 2 index)))))))","user":"5ee81beae4b029a2061bbeac"},{"problem":122,"code":"(fn[x](let [ p2 (fn[x](reverse(take x (iterate #(* 2 %) 1))))\n       mapp (fn[x](for [c (range(count x))] (* (nth x c)(nth (p2 (count x)) c)) ) )\n       convert (fn[x](apply + (mapp x)))\n       ] \n  (convert (map read-string (re-seq #\"\\d\" x )))))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":122,"code":"(fn [r s]\n  (let [atoi #(if (= % \\1) 1 0)]\n  (if (empty? s)\n    r\n    (recur (+ (bit-shift-left r 1) (atoi (first s))) (rest s) ))))\n0","user":"539c88e1e4b0b51d73faaf2c"},{"problem":122,"code":"(fn str-to-bin [x]\n    (if (> (count x) 0)\n      (+\n        (if (= \"1\" (str (first x)))\n          (apply * 1 (repeat (dec (count x)) 2))\n          0)\n        (str-to-bin (apply str (rest x))))\n      0))","user":"5dd84170e4b0948ae9d9ad93"},{"problem":122,"code":"(fn [s]\n    (int (reduce + (map-indexed\n                     (fn [i c] (if (= c \\1) (Math/pow 2 i) 0))\n                     (reverse s)))))","user":"5e17bb46e4b00200644e3d5a"},{"problem":122,"code":"(fn [bin] (loop [n 0 rem bin]\n            (if (empty? rem)\n                n\n                (recur (+ (* 2 n) ({\\0 0, \\1 1} (first rem))) (rest rem)))))","user":"548f5086e4b0e286459a1239"},{"code":"(fn [s] (reduce + (map-indexed (fn [idx i] (* (Math/pow 2 idx) (- (int i) 48))) (reverse s))))","problem":122,"user":"4f4ff5a8e4b03ad3f0c10cf3"},{"problem":122,"code":"(fn [s] (:r (reduce-kv (fn [m k v]\n             (assoc m :r (+ (m :r) (* (v k) (apply * (repeat k 2)))))\n             ) {:r 0} (into [] (map-indexed #(hash-map % (Integer/parseInt (str %2))) (reverse s))))))","user":"5ccc2a03e4b0ccb06196288f"},{"code":"(fn [num]\n  (let [pow2 (iterate (partial * 2) 1)]\n    (reduce + (map second (filter #(= \\1 (first %)) (map vector (reverse num) pow2))))))","problem":122,"user":"5003deb9e4b0678c553fc445"},{"problem":122,"code":"(fn read-binary [b]\n  (reduce + (map\n    #(* (- (int (second %)) 48) (reduce * (repeat (first %) 2)))\n    (map-indexed vector (reverse b)))))","user":"5a99b863e4b0d174b936c7ae"},{"code":"(fn [s]\n  (reduce #(+ (* 2 %1) %2) (map (comp read-string str) s)))","problem":122,"user":"53691dc7e4b0243289761e97"},{"problem":122,"code":"(fn [n]\n  (let [parsed-nums (reverse (map #(read-string (str %)) (str n)))\n        exp (fn[x n] (reduce * (repeat n x)))]\n    (reduce + (map-indexed #(* %2 (exp 2 %1))parsed-nums))))","user":"505d1b01e4b0e6aca564be04"},{"problem":122,"code":"(fn [text]\n  (let [rev (reverse text)]\n    (first (reduce (fn [[total multipler] item] \n                     [(+ total (* (- (int item) (int \\0)) multipler)) (* 2 multipler)])\n                   [0 1]\n                   rev))))","user":"58740c18e4b01531a375ea49"},{"problem":122,"code":"(fn \n  [num]\n  (Integer/parseInt num 2)\n  )","user":"5bbbce99e4b0a20761a23610"},{"code":"(fn [a]\n   (let [bdigis (vec (reverse (map #(- (int %) 48) (vec a))))]\n        ((fn binred [dve acc] \n          (if (> 1 (count dve)) \n            acc \n            (binred (pop dve) \n                    (+ acc ((fn exp [ae b acce] \n                              (if (= b 0)\n                                acce\n                                (exp ae (dec b) (* acce ae)))) \n                            2 (dec (count dve)) (peek dve))))))\n                                 bdigis 0)\n    )\n)","problem":122,"user":"52747090e4b03e8d9a4a74a5"},{"problem":122,"code":"(fn readbi [cadena]\n  (loop [lst (seq cadena)\n         res 0\n         val 1]\n    (cond\n      (empty? lst) res\n      (and (=(count lst)1 ) (= 0(first lst))) res\n      (= \\1 (last lst)) (recur (butlast lst) (+ val res) (* 2 val))\n      :default (recur (butlast lst) res (* 2 val)))))","user":"59dd387ae4b0a0ac046f2501"},{"code":"(fn [n] (reduce #(+ (bit-shift-left % 1) (if(= \\0 %2) 0 1)) 0 n))","problem":122,"user":"4ef4e5fa535dced4c769f242"},{"problem":122,"code":"#(let [y (reverse (map (comp (fn [w] (Integer/parseInt w)) str) (vec %)))]\n   (reduce + \n          (for [x (range 0 (count y))]\n               (* (nth y x)\n                  (reduce * (repeat x 2))))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"code":"(fn [n]\n  (let [integer-seq (map #(Character/digit % 10) n)\n        powers (reverse (range 0 (count integer-seq)))]\n    (reduce + (map #(if-not (zero? %) (int (Math/pow 2 %2)) 0) integer-seq powers))))","problem":122,"user":"50481532e4b0ec70b3ef8d96"},{"code":"#(letfn [(worker[n c]\r\n           (if (empty? n)\r\n             c\r\n             (recur (rest n) (+ (* c 2) (if (= (first n) \\1) 1 0)))))]\r\n   (worker %1 0))","problem":122,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":122,"code":"(fn bin->dec [b] \n  (loop [digits (map (comp read-string str) (reverse b))\n         place 1\n         accum 0]\n\t(if (seq digits)\n      (recur (rest digits) (* 2 place) (+ accum (* place (first digits)))) \n      accum)))","user":"56c4f43ce4b05cc29241ee9c"},{"problem":122,"code":"(fn [bin-string]\n  (int (reduce (fn [acc [place value]]\n            (+ acc (* value (Math/pow 2 place))))\n          0\n          (map-indexed\n           (fn [idx itm] [idx (Character/getNumericValue itm)])\n           (reverse bin-string)))))","user":"5d48e6d3e4b0776584bd6f15"},{"code":"(fn binary-to-int[x]((fn dot-product [xs ys]\n                         (reduce + (map * xs ys))) (seq (map (fn[x](Integer. x)) (map str x))) (reverse (take (count x) (iterate #(* % 2) 1)))))","problem":122,"user":"52a1edd6e4b04e0c58e87be4"},{"problem":122,"code":"(fn binary-str->int [s]\n  (->> (reverse s)\n       (map-indexed (fn [idx val]\n                      (if (not= \\0 val)\n                          (Math/pow 2 idx)\n                          0)))\n       (reduce +)\n       (int)))","user":"57e9a77ae4b0bfb2137f5b35"},{"code":"#(loop [[h & t] (reverse %1), i 1, res 0] \n  (if \n    h \n    (recur t (* 2 i) (if (= \\1 h) (+ res i) res))\n    res))","problem":122,"user":"4eabb245535d7eef30807319"},{"problem":122,"code":"(fn binary [x]\n  (loop [sum 0\n         p (vec x)]\n    (if (empty? p)\n      sum\n      (recur (+ (* 2 sum) (- (int (first p)) 48)) (rest p))\n      )\n  ))","user":"57cc14aae4b05aa3c4741d4a"},{"code":"#(loop [BIN_STRING (reverse %) VALUE 1 TOTAL 0]\n   (if (empty? BIN_STRING)\n     TOTAL\n     (if (= (first BIN_STRING) \\1)\n       (recur (rest BIN_STRING) (* VALUE 2) (+ TOTAL VALUE))\n       (recur (rest BIN_STRING) (* VALUE 2) TOTAL))))","problem":122,"user":"505a2f3be4b03d2efce48c5b"},{"problem":122,"code":"(fn [x] \n  (reduce +\n        (map #(* (read-string (str %1)) ((fn [r q] (reduce * (repeat q r))) 2 %2))\n             x\n             (->> x\n                  (count)\n                  (range)\n                  (reverse)))))","user":"5dab11cde4b000c986472c45"},{"code":"(fn [str]\n  (Integer/parseInt str 2))","problem":122,"user":"4ec21058535dfed6da9c6dba"},{"problem":122,"code":"(fn [s] \n  (Integer/parseInt s 2 ))","user":"516d227fe4b06f078fab252d"},{"code":"(fn bin-to-dec [n]\n  (int (reduce + (map-indexed (fn [index b]\n                                (* (Character/digit b 10) (Math/pow 2 index)))\n                              (reverse n)))))","problem":122,"user":"4db8d37d535d1e037afb219c"},{"code":"(fn [x] (Integer/parseInt x 2))","problem":122,"user":"4db1b3951254ad5b4805fa6f"},{"problem":122,"code":"(fn [s]\n  (let [m {\\0 0 \\1 1}\n        v (iterate (partial * 2) 1)]\n    (reduce + (map #(* %1 (m %2)) v (reverse s)))))","user":"54e345a1e4b024c67c0cf7db"},{"problem":122,"code":"(fn [bin-string]\n  (let [bin-map {\\0 0 \\1 1}]\n    (->> bin-string\n         (reduce (fn [acc d]\n                   (+ (* acc 2) (bin-map d)))\n                 0))))","user":"5ce077e9e4b0a17bb84e2b0c"},{"problem":122,"code":"(fn [s] (reduce (fn [n d] (+ (* 2 n) (- (int d) (int \\0)))) 0 s))","user":"5ecc0831e4b016b56eae058c"},{"problem":122,"code":"(fn [st]\n  (let [nums (re-seq #\"[0-1]\" st)]\n    (reduce\n      (fn [a b]\n        (if (= (nth nums b) \"1\")\n          (+ a (bit-shift-left 1 (- (count nums) b 1)))\n          a\n        )\n      )\n      0\n      (range 0 (count nums))\n    )\n  )\n)","user":"5a9e3698e4b0d174b936c7fc"},{"problem":122,"code":"(fn F [s]\n  (letfn [(bin-power [pos] (int (Math/pow 2 pos)))\n          (raise [value pos] (* value (bin-power pos)))]\n    (loop [s s acc 0]\n      (if (empty? s)\n        acc\n        (recur (rest s) (+ acc (raise (- (int (first s)) 48) (dec (count s)))))))))","user":"4f856adfe4b033992c121c44"},{"problem":122,"code":"(fn [s] (reduce (fn [a x] (+ (* 2 a) (if (= x \\1) 1 0))) 0 s))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":122,"code":"#(reduce (fn [num curr] (+ (* 2 num) (if (= \"0\" (str curr)) 0 1))) 0 %)","user":"5c76577ae4b0fca0c16227ea"},{"problem":122,"code":"(fn [s] (reduce + (map * (map #(read-string (str %)) (reverse (seq s))) (iterate #(* 2 %) 1))))","user":"56798d83e4b05957ce8c618b"},{"problem":122,"code":"(fn sol [s] (first (->> (seq s) (map str) (map bigint) (reverse) (reduce #(if (= %2 1)\n                                                                       (vector (+ (second %1) (first %1)) (* 2 (second %1)))\n                                                                       (vector (first %1) (* 2 (second %1)))\n                                                                       ) [0 1])) ))","user":"54857657e4b0e286459a11ac"},{"problem":122,"code":"(fn bin->dec\n  ([a-string] (bin->dec a-string ()))\n  ([a-string so-far]\n   (cond \n     (empty? a-string) (reduce + so-far)\n     (= (first a-string) \\0) (recur (rest a-string) (conj (map #(* % 2) so-far) 0))\n     :else (recur (rest a-string) (conj (map #(* % 2) so-far) 1)))))","user":"574e84e0e4b02ea114799243"},{"code":"(fn [bin]\n  (loop [b (-> bin reverse), n 0, acc 0]\n    (if (= 0 (count b)) \n      (int acc)\n      (let [h (first b), t (rest b)] \n        (recur\n          t   \n          (inc n)\n          (+ acc (* (-> h str Integer/parseInt) (Math/pow 2 n))))))))","problem":122,"user":"50a83794e4b054305ba5a831"},{"problem":122,"code":"(fn [n]\n (let [vs (iterate #(* 2 %) 1)\n       ks (map str (reverse (seq n)))\n       kvs (map vector ks vs)]\n  (reduce #(+ % (if (= \"1\" (first %2)) \n                 (second %2)\n                 0)) 0 kvs)))","user":"57eaf869e4b0bfb2137f5b56"},{"code":"(fn [x]\n  (let [digits (fn [x] (map #(- (int %) (int \\0)) (str x)))]\n    (int (reduce + (map (fn [[idx b]] (* b (Math/pow 2 idx))) (map-indexed vector (reverse (digits x))))))))","problem":122,"user":"5027fc0ce4b01614d1633ff2"},{"problem":122,"code":"(fn [par] (reduce + (map (fn [n]\n                 (reduce * (repeat n 2)))\n               (keep-indexed #(if (= 1 %2) %1)\n                             (mapv (comp read-string str) (reverse par))))))","user":"59e62655e4b08badc2a0c568"},{"problem":122,"code":"(fn binstr-to-number\n  [s]\n\t(let [\n       ss (reverse (seq s))\n       l (count ss)\n       sm (map #( hash-map :key %1 :val %2) ss (range l))]\n   (reduce (fn [acc ci] \n             (let [i (:key ci)\n                   j (:val ci)]\n             (if (= i \\1)\n               (+ acc (int (Math/pow 2 j)))\n               acc))\n           ) 0 sm)))","user":"56019662e4b04bb52996e190"},{"code":"#(java.math.BigInteger. % 2)","problem":122,"user":"4f465096e4b0d56e7bb92b9a"},{"code":"(fn foo\n  ([num] (foo (reverse num) 0))\n  ([num count]\n    (cond\n      (empty? num) 0\n      (= (first num) \\1)\n        (+ (Math/pow 2 count) (foo (rest num) (+ count 1)))\n      :else\n        (foo (rest num) (+ count 1)))))","problem":122,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":122,"code":"(fn [ss]\n  (loop [n 0\n         v 1\n         s ss]\n    (if s\n      (recur (-> s last {\\1 1 \\0 0} (* v) (+ n)) (* v 2) (butlast s))\n      n)))","user":"5466199ce4b01be26fd746e2"},{"code":"(fn [bs]\n  (reduce #(if (= %2 \\1)\n             (+ (* %1 2) 1)\n             (* %1 2))\n          0\n          bs))","problem":122,"user":"519db0ede4b037b32803f9b9"},{"problem":122,"code":"(fn [bin]\n  (loop [sum 0\n         multiple 1\n         bin bin]\n    (if (empty? bin)\n      sum\n      (recur (if (= (last bin) \\1)\n               (+ sum multiple)\n               sum)\n             (* 2 multiple)\n             (butlast bin)))))","user":"546c4c5fe4b00cfc9eacc178"},{"code":"(fn f [col]\n   (let [xs (map #(- % 48) (map int (reverse (seq col))))      \n        ys (take (count xs) (iterate #(* % 2) 1))\n        zs (map (fn [x y] (* x y)) xs ys) ]\n  (reduce + zs)))","problem":122,"user":"4ffa8affe4b0678c553fc3bd"},{"code":"(fn read-binary\n  [text]\n  (reduce #(+ (* %1 2) (if (= %2 \\0) 0 1)) 0 text))","problem":122,"user":"511720eae4b0063b4e3e16da"},{"problem":122,"code":"#(reduce +\n\n(map-indexed\n              (fn [i x]\n                (* (read-string (str x))\n                   (int ( Math/pow 2 i ))\n                )\n              ) (reverse %))\n         )","user":"5480cce5e4b0e286459a115f"},{"code":"(fn [s]\r\n  (reduce #(+ (* 2 %) ({\\1 1, \\0 0} %2)) 0 s))","problem":122,"user":"504e14c2e4b078edc5f593bf"},{"code":"(fn [s] (apply + (map-indexed #(let [x (- (int %2) 48)] (int (* (Math/pow 2 %1) x))) (reverse (seq s)))))","problem":122,"user":"4f0f01c0535d0136e6c22329"},{"problem":122,"code":"#(reduce (fn [ret c] (-> ret (bit-shift-left 1) (+ ({\\0 0 \\1 1} c)) ) ) 0 %)","user":"5db7376fe4b010eb3c36cd43"},{"problem":122,"code":"(fn [s] \n  (reduce-kv \n    (fn [res idx itm] (+ res (* itm (reduce * (repeat idx 2))))) 0 \n  (apply vector (reverse (map read-string (map str (seq (char-array s))))))))","user":"5d4f21f3e4b0776584bd6f4e"},{"problem":122,"code":"(fn [s] (let [\n               s (reverse (map #(- (int %1) (int \\0)) (seq s)))\n               ] (reduce (fn [p e] (int (+ p (* (nth s e) (Math/pow 2 e))))) 0 (range (count s)))))","user":"58a9e872e4b01a0c0b232973"},{"problem":122,"code":"(fn [bin-string]\n  (reduce + (map-indexed \n             #(* %2 (int (Math/pow 2 %1))) \n             (map #(Integer. (str %)) \n                  (reverse bin-string)))))","user":"5d231255e4b02ea6f0fb69fe"},{"code":"#(loop [acu 0 b (map int (seq %))]\n  (if b\n    (recur (+ (* 2 acu) (- (first b) 48)) (next b))\n    acu))","problem":122,"user":"4db0114d838c48654951d9b8"},{"code":"(fn [s] (reduce bit-or\n                (map-indexed\n                 (fn [i c] (bit-shift-left ({\\0 0,\\1 1} c) i))\n                 (reverse s))))","problem":122,"user":"50fa01bce4b07934dda8b0ba"},{"problem":122,"code":"(fn[x](->> x reverse (map (comp read-string str))\n       (map * (iterate #(* 2 %) 1)) (apply +)\n       ))","user":"58d1c1b1e4b03c36ff7e58ef"},{"code":"(fn binary-number-122\n  [x]\n  (let [s (map #(- (int %) (int \\0)) (reverse x))]\n    (+ (first s) (reduce + (map-indexed (fn [idx itm]\n                                          (* 2 (int (Math/pow 2 idx)) itm))\n                                        (rest s))))))","problem":122,"user":"501b1a8ee4b0b12d9c5f4d81"},{"problem":122,"code":"(fn [s]\n  (letfn [ \n           (digits [s] (map #(Integer. (str %)) s))\n           (expo   [n i] (apply * i (repeat n 2)))\n         ]\n    (->> s\n         digits\n         reverse\n         (map-indexed expo)\n         (apply +) )))","user":"54d6f22de4b0a52adc2e2023"},{"problem":122,"code":"(fn binary-int\n  [x]\n  (Integer/parseInt x 2))","user":"5f3103aee4b0574c87022c24"},{"code":"#(apply + (map-indexed (fn [i a] (if (= \\0 a) 0 (int (Math/pow 2 i)))) (reverse %)))","problem":122,"user":"523b1988e4b02f719975bdbc"},{"code":"(fn [s] (apply + (map #(if (= \\1 %1) %2 0)\n                      (reverse s)\n                      (iterate #(* 2 %) 1))))","problem":122,"user":"4fc3a72ae4b081705acca342"},{"problem":122,"code":"(fn [s] (reduce + (map * (map #(reduce * (repeat % 2)) (range))\n                       (map #(if (= % \\0) 0 1) (reverse s))\n                       )))","user":"53dadf1de4b0e771c30254ad"},{"problem":122,"code":"(fn binary [number]\n     (#(reduce (fn [accum digit] (+ digit (* 2 accum))) 0 %)\n       (#(loop [n % res []]\n          (if (zero? n)\n            res\n            (recur (quot n 10) (cons (mod n 10) res))))\n         (bigint number))))","user":"5bbbce70e4b0a20761a2360f"},{"problem":122,"code":"(fn [inp]\n  (loop[curstr (reverse inp)\n        res 0\n        cur 1]\n    (cond\n     (empty? curstr) res\n     (= (first curstr) \\1) (recur (rest curstr) (+ res cur) (* cur 2))\n     :else (recur (rest curstr) res (* cur 2)))))","user":"5fc5c303e4b02c825b0c8c1a"},{"code":"(fn [s] \n  (int \n    (reduce + \n      (map \n        #(* % (Math/pow 2 %2)) \n        (reverse (map read-string (map str (seq s))))\n        (range (count s))))))","problem":122,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":122,"code":"(fn [bin]\n  (reduce + (map #(reduce * %)\n                 (partition 2\n                            (interleave\n                              ((fn exp\n                                 ([] (exp 1))\n                                 ([n] (lazy-seq (cons n (exp (* 2 n)))))))\n                              (reverse (map #(Character/digit % 10) bin)))))))","user":"5a9ac061e4b0d174b936c7c1"},{"code":"(fn [bstr] \n  (loop [v (vec bstr), i (dec (.length bstr)), rv 0 ]\n    (if (neg? i)\n      (int rv)\n      (recur (rest v) (dec i) (+ rv (* (- (int (first v)) 48) (Math/pow 2 i))))\n    )\n  )\n)","problem":122,"user":"5229211be4b04c906c9c6a63"},{"problem":122,"code":"(fn str2bin [s]\n  (reduce +\n          (map * (take (count s) (iterate (partial * 2) 1))\n               (map (comp read-string str) (reverse s)))))","user":"5146f343e4b04ef915e3731e"},{"code":"(fn [s]\n  (int (reduce + (map #(if (= \\1 %1) (Math/pow 2 %2) 0) s (range (dec (count s)) -1 -1)))))","problem":122,"user":"4f29eb2ae4b0d6649770a037"},{"problem":122,"code":"(fn [s]\n  (reduce #(+ (* %1 2) (- (int %2) 48)) 0 s)\n  )","user":"539ec9f9e4b0ca733b974491"},{"problem":122,"code":"#(reduce (fn [acc [bit i]] (+ acc (int (* bit (Math/pow 2 i))))) \n          0 \n          (map (fn [bit i] [(- (int bit) 48) i]) (reverse %) (range)))","user":"54b13a40e4b09f271ff37d1b"},{"code":"(fn parse-bin- [s]\n  ^{:doc \"Convert a binary number, provided in the form of a string,                                                                \n  to its numerical value.\"}\n  (Integer/valueOf s 2))","problem":122,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn [x]\n  (reduce #(+ (* % 2) %2) (map #(- (int %) 48) x)))","problem":122,"user":"4e50e2a0535dc968683fc4ef"},{"problem":122,"code":"#(/ (loop [ bits (map {\\1 1 \\0 0} %) total 0 ]\n    (if (empty? bits)\n      total\n      (recur (rest bits) (* (+ total (first bits)) 2) )\n    )) 2)","user":"55aa5f73e4b0988bba2ad94b"},{"problem":122,"code":"#(apply + (map-indexed (fn [idx itm]\n(if (= itm \\1) (int (Math/pow 2 idx)) 0)) (reverse %1)\n)\n)","user":"5a1c3c11e4b0ff51aa4b323d"},{"problem":122,"code":"#(loop [s % res 0] ( if (empty? s) res (let [f (first s)] (recur (rest s) (+ (if (= \\0 f) 0 1) (bit-shift-left res 1))))))","user":"56a75810e4b0542e1f8d14fc"},{"code":"(fn [s]\n  (let [exponents-and-digits (zipmap (range) (map #({\\0 0, \\1 1} %) (rseq (vec s))))]\n    (reduce (fn [acc [exponent digit]] (+ acc (* digit (Math/pow 2 exponent)))) 0 exponents-and-digits)))","problem":122,"user":"4ec70f26535d6d7199dd36dd"},{"code":"(fn b [n]\n  (let [\n        c (fn cqq [x] \n            (if (zero? x)\n    0\n    (+ (rem x 10) (* 2 (cqq (quot x 10))))\n    )\n  )\n        ]\n    (c (read-string n))\n    )\n  )","problem":122,"user":"4f2004a1535d64f6031464a7"},{"code":"#(int (reduce + (map-indexed (fn [idx itm] (* (Character/getNumericValue itm) (java.lang.Math/pow 2 idx))) (reverse %))))","problem":122,"user":"4f2f6678e4b0d6649770a06e"},{"code":"(fn [str]\n    (loop [num 0\n           exp 1\n           digits (reverse str)]\n      (if (seq digits)\n        (recur (+ num (* (Character/digit (first digits) 2) exp))\n               (bit-shift-left exp 1)\n               (rest digits))\n        num)))","problem":122,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(fn readbits [bits]\n  (let [pows2 (iterate (partial * 2) 1)]\n    (apply\n      +\n      (map\n        (fn [pow bit] (if (= bit \\1) pow 0))\n        pows2 (reverse bits)))))","problem":122,"user":"4edecdae535d10e5ff6f533c"},{"code":"(fn [x] (apply + (map #(Math/pow 2 (first %)) (filter #(= (last %1) \\1) (map vector (range) (reverse x))))))","problem":122,"user":"4f4f0287e4b03ad3f0c10cd7"},{"problem":122,"code":"(fn [s]\n  (reduce (fn [n v]\n            (+ (* n 2) v))\n          0\n          (map #(- (int %) (int \\0)) s)))","user":"56051095e4b08b23635d3162"},{"code":"#(reduce (fn [a d] (+ (if (= d \\1) 1 0) (* 2 a))) 0 (seq %))","problem":122,"user":"502bb7c0e4b0194ad32ea1a3"},{"problem":122,"code":"(fn\n  [s] (reduce + (map * (map #(Integer/parseInt (str %)) (reverse s)) (iterate #(* % 2) 1))))","user":"5a04e923e4b01bb0ae8afda9"},{"problem":122,"code":"#(reduce (fn [acc digit] (+ (* 2 acc) (int digit) -48)) 0 %)","user":"4f5eda39e4b0030a34fb2b56"},{"problem":122,"code":"(fn [st]\n  (->>\n   st\n   seq\n   (map str)\n   (map read-string)\n   reverse\n   (map-indexed #(* %2 (Math/pow 2 %1)))\n   (apply +)\n   int))","user":"58384bc4e4b089d5ab817d27"},{"code":"(fn [str]\n  (reduce +\n    (map (fn [x] (if (= (x 1) 1) (Math/pow 2 (x 0)) 0))\n         (map-indexed (fn [x, y] [x (- (int y) 48)])\n                      (reverse str)))))","problem":122,"user":"4f6b4237e4b07046d9f4efa9"},{"problem":122,"code":"(fn [s]\n  (reduce + \n        (mapv * \n              (take (count s) (reductions * 1 (repeat 2)))\n              (reverse (map read-string (map str (seq s)))))))","user":"564348e1e4b08d4f616f5f26"},{"problem":122,"code":"(fn [s] (reduce #(let [x (* 2 %1)] (if (= \\1 %2) (inc x) x)) 0 s))","user":"55f4ef68e4b06e875b46ce82"},{"problem":122,"code":"(fn [b]\n  (letfn [(pow2 [x] (reduce * (repeat x 2)))\n          (helper [bString step sum]\n            (let [d (if (= (first bString) \\0) 0 1)]\n              (if (empty? bString)\n                sum\n                (helper (rest bString) (inc step) (+ sum (* d (pow2 step))))))) \n            ]\n    (helper (reverse b) 0 0)))","user":"5be58beae4b0ed4b8aab4d14"},{"code":"#(loop [b % c 1 r 0]\n     (if (not (empty? b))\n         (recur (butlast b) (* c 2) (+ r (* c (Integer/parseInt (str (last b))))))\n         r))","problem":122,"user":"511b810ce4b07ab9ec456182"},{"problem":122,"code":"(fn [bs] (reduce + (map (fn [x y] (* (- (int y) 48) x)) (iterate #(* 2 %) 1) (reverse bs) )))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":122,"code":"(fn ([s] (reduce + (map #(if (= '\\1 %1) %2 0) (reverse s) (iterate (partial * 2) 1)))))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":122,"code":"#(apply + (map (partial apply *) (map vector (reverse (map (fn [x] (Integer/parseInt (str x))) %)) (iterate (partial * 2) 1))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"code":"(fn [binary-string]\n  (->> (seq binary-string)\n       (reverse)\n       (map #(if (= %2 \\1) %1 0) (iterate #(* % 2) 1))\n       (apply +)))","problem":122,"user":"53527551e4b084c2834f4af0"},{"problem":122,"code":"(fn [st]\n  (reduce +\n          (map-indexed\n           (fn [i v]\n             (if (zero? i)\n               (Integer. (str v))\n               (reduce * (repeat i (* 2 (Integer. (str v)))))))\n           (reverse st))))","user":"53dd37aee4b0d874e779ae28"},{"problem":122,"code":"(fn [s](reduce #(+ %1 %2) \n               (map #(* (case %1 \\0 0 \\1 1) %2) (reverse s) (iterate (partial * 2) 1))))","user":"542fa0dde4b0dad94371f2d2"},{"code":"(fn [x] (reduce + (map #(if (= % \\1) %2 0) (reverse x) (iterate #(* % 2) 1))))","problem":122,"user":"50ae0d24e4b0a40c9cfb08ce"},{"problem":122,"code":"(fn [s]\n  (->> (reverse s)\n       (map-indexed (fn [idx item] [idx item]))\n       (reduce (fn [sum v]\n                 (+ sum\n                    (* (- (int (v 1)) 48)\n                       (int (Math/pow 2 (v 0))))))\n               0)))","user":"54722c55e4b094393f72dd74"},{"problem":122,"code":"(fn [s] (reduce + (map-indexed #(* (Integer/parseInt %2) (reduce * (repeat %1 2))) (reverse (re-seq #\"\\d\" s)))))","user":"5627d09ce4b00e49c7cb47db"},{"problem":122,"code":"(fn parse-bin [s]\n  (reduce + (map-indexed (fn [idx e] (* (int (Math/pow 2 idx)) (Character/digit e 10))) (reverse s))))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"problem":122,"code":"(fn read-binary [s]\n  (->> s\n       seq\n       (map #(- (int %) (int \\0)))\n       (reduce (fn [r e] (bit-or (bit-shift-left r 1) e)))))","user":"575b3e9be4b02ea11479935b"},{"code":"(partial reduce #(+ (* 2 %) (read-string (str %2))) 0)","problem":122,"user":"4f89d489e4b033992c121c7e"},{"problem":122,"code":"(fn [binstr] (reduce + (map #(* %2 (- (apply int  %1) 48 )) (reverse (partition 1 binstr))  (iterate #(* 2 %) 1))))","user":"562326cbe4b03f08ee9a9230"},{"code":"(fn [s]\n  (reduce +\n    (map-indexed \n      #(if (= \\1 %2) (int (Math/pow 2 %)) 0)\n      (reverse s))))","problem":122,"user":"506406c8e4b075d771da6f9f"},{"problem":122,"code":"(fn [a] \n  (reduce-kv \n    (fn [r k v] \n      (if (= v \"0\") \n        r \n        (int (+ r (Math/pow 2 k)))))\n    0\n    (into [] (map #(str %) (clojure.string/reverse a)))))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":122,"code":"(fn [s] (int (apply + (map-indexed #(* (- (int %2) 48) (Math/pow 2 %)) (reverse s)))))","user":"5f8e865fe4b0715f5002d76d"},{"code":"(fn [ss] (Integer/parseInt ss 2))","problem":122,"user":"516282c3e4b0e6d3c4734711"},{"problem":122,"code":"(fn [bnum]\n   (reduce + 0 (map #(if (= %1 \\1) (apply * (repeat %2 2)) 0)\n                    (reverse bnum) (range))))","user":"5f3f2281e4b004f08c61c561"},{"code":"#(loop [n 0, xs %]\n  (if (empty? xs)\n    n\n    (recur (if (= \\0 (first xs)) (* n 2) (+ (* n 2) 1))\n           (rest xs))))","problem":122,"user":"4f0f9df7535d0136e6c22342"},{"problem":122,"code":"(fn conv-binary\n  [bin]\n  (->> bin\n       (map (comp #(Integer. %) str))\n       (reduce #(+ (* %1 2) %2))))","user":"5ff454a1e4b05ac5b16ea20d"},{"problem":122,"code":"#(loop [s % a 1 result 0]\n   (if (zero? (count s))\n     result\n     (recur (butlast s) (* 2 a) (+ result (if (= (last s) \\1) a 0) ))))","user":"5fa96ddbe4b0fa27300f3dec"},{"code":"(fn [s]\n   (reduce\n    (fn [a v]\n      (if (= \\0 (first v)) a\n          (+ a (last v))))\n    0\n    (partition-all\n     2\n     (interleave\n      (reverse s)\n      (iterate #(* 2 %) 1)))))","problem":122,"user":"52c25645e4b07a9af579237d"},{"code":"(fn [x]\n  (apply + \n         (for [[n r] (map vector (reverse x) (iterate #(* 2 %) 1))]\n           (* (- (int n) (int \\0)) r)) ))","problem":122,"user":"51696ee7e4b03f62cda68ce8"},{"problem":122,"code":"(fn bin-read [s]\n  (loop [s (seq s) n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (+ (bit-shift-left n 1) (if (= \\0 (first s)) 0 1))))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":122,"code":"(fn [s]\n  (let [powers (range (- (count s) 1) -1 -1) \n        digits (->> s (seq) (map #(Integer. (str %))))\n        exp (fn [dig pow] (reduce * (repeat pow dig)))]\n    (reduce + (map (fn [dig pow] (* dig (exp 2 pow))) digits powers))))","user":"577629abe4b0979f8965162e"},{"code":"(fn [bin]\n  (int (apply + (map-indexed #(* (Math/pow 2 %1) (- (int %2) 48)) (reverse bin)))))","problem":122,"user":"4e95c771535dbda64a6f6b39"},{"code":"(fn f [s] (if (empty? s) 0 (+ (* (long (Math/pow 2 (- (count s) 1))) (read-string (str (first s)))) (f (rest s)))))","problem":122,"user":"5349ac2be4b084c2834f4a67"},{"problem":122,"code":"(fn [c]\n  (->> (reverse c)\n       (map-indexed #(* (Math/pow 2 %1) (- (int %2) 48)))\n       (reduce +)\n       (int)))","user":"53b7c21ae4b047364c0444d4"}]