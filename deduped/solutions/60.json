[{"code":"(fn reds\n  ([f coll] (reds f (first coll) (rest coll)))\n  ([f x [firstc & more]]\n   (if firstc\n     (lazy-seq\n      (let [res (f x firstc)]\n        (cons x (reds f res more))))\n     [x])))","problem":60,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":60,"code":"(fn rd\n  ([f x] \n   (rd f (first x) (rest x)))\n  ([f x y]\n   (lazy-seq \n    (if (empty? y)\n      [x]\n      (cons x (rd f (f x (first y)) (rest y)))))))","user":"581dad0ae4b04b46fc4b0f17"},{"code":"(fn t\n  ([f init [x & xs]] \n   (cons init (lazy-seq (when x (t f (f init x) xs))))) \n  ([f coll] \n   (t f (first coll) (rest coll))))","problem":60,"user":"52aa16d1e4b0c58976d9ac5a"},{"code":"(fn my-reductions\n  ([f s]\n   (my-reductions f (first s) (rest s)))\n  ([f x s]\n   (lazy-seq\n    (if (not-empty s)\n      (let [result (f x (first s))]\n        (concat [x] (my-reductions f result (rest s))))\n      [x]))))","problem":60,"user":"50d8f4b6e4b01f0871336e74"},{"code":"(fn myfunc \n  ([method array] \n    (myfunc method (first array) (rest array)))\n  ([method initial array]\n    (if (empty? array) (list initial) (cons initial (lazy-seq (myfunc method (method initial (first array)) (rest array)))))))","problem":60,"user":"4f294c48e4b0d6649770a023"},{"code":"(fn t \n              ([f c]\n               (t f (first c) (rest c)))\n              ([f s c]\n               (lazy-seq (cons s\n                 ((fn m [f r x]\n                  (lazy-seq\n                   (if (seq x) \n                       (let [re (f r (first x))]\n                         (cons re (m f re (rest x))))\n                     '()))) f s c)))))","problem":60,"user":"511b810ce4b07ab9ec456182"},{"code":"(fn reds\n  ([func [firstval & restvals]] (reds func firstval restvals))\n  ([func init [firstval & restvals]] \n    (lazy-seq       \n     (cons init\n           (if firstval (reds func (func init firstval) restvals))))))","problem":60,"user":"51929214e4b08962174cf74c"},{"code":"(fn[& i](let [a (first i) b (if (= 3 (count i)) (last i) (rest (last i))) c (if (= 3 (count i)) (second i) 0)](cons c (map (fn[x](reduce a c (take x b))) (map #(inc (first %)) (map-indexed vector b))))))","problem":60,"user":"4fb3dd1ee4b081705acca2a5"},{"code":"(fn my-reduction-with-init\n  ([f val coll] (my-reduction-with-init f (cons val coll)))\n  ([f coll]\n     (let [do-reductions (fn do-r [f coll]\n                           (let [ret (apply f (take 2 coll))\n                                 coll (drop 2 coll)]\n                             (cons ret (lazy-seq\n                                        (if (not (empty? coll))\n                                          (do-r f (cons ret coll)))))))]\n       (cons (first coll) (do-reductions f coll)))))","problem":60,"user":"51937eb3e4b04df54c098022"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (let [head (first coll)\n         tail (rest coll)]\n   (my-reductions f (f head) tail)))\n  ([f init coll]\n   (let [head (first coll)\n         tail (rest coll)]\n     (if (nil? head)\n       [init]\n       (cons init (lazy-seq (my-reductions f (f init head) tail)))))))","user":"53791ab7e4b06839e8705e4d"},{"problem":60,"code":"(fn [f & more]\n  (letfn [(red [v c]\n               (when-not (empty? c)\n                 (let [nv (f v (first c))]\n                   (lazy-seq (cons nv (red nv (rest c)))))))]\n    (let [more (if (= 1 (count more))\n                    (vector (first (first more)) (rest (first more)))\n                    more)]\n        (cons (first more) (red (first more) (second more))))))","user":"5f5e7158e4b02876ed9fcff0"},{"problem":60,"code":"(fn my-reductions\n  ([f xs] (my-reductions f (first xs) (rest xs)))\n  ([f acc xs]\n   (lazy-seq \n     (if (empty? xs)\n       (list acc)\n       (cons acc (my-reductions f (f acc (first xs)) (rest xs)))))))","user":"5c0eb93ce4b01240ff567146"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f acc coll]\n   (if (empty? coll)\n     [acc]\n     (cons acc (lazy-seq (my-reductions f (f acc (first coll)) (rest coll)))))))","user":"54125eeee4b01498b1a719d3"},{"problem":60,"code":"(fn seq-reduction\n  ([f coll] (seq-reduction f (first coll) (rest coll)))\n  ([f initial coll]\n   (lazy-seq\n     (if (seq coll)\n       (cons initial\n             (seq-reduction f (f initial (first coll)) (rest coll)))\n       [initial]))))","user":"5d7b90ede4b02e6b30c93552"},{"problem":60,"code":"(fn r ([f coll]\n       (lazy-seq\n         (if-let [s (seq coll)]\n           (r f (first s) (rest s))\n           (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (r f (f init (first s)) (rest s)))))))","user":"56ac81ace4b03c432f187347"},{"code":"(fn reducs\n    ([f s] (reducs f (first s) (rest s)))\n    ([f init s]\n       (cons init\n             (when (seq s)\n               (lazy-seq (reducs f (f init (first s)) (rest s)))))))","problem":60,"user":"536a37efe4b0243289761eaa"},{"problem":60,"code":"(fn Reductions \n  ([rdf coll] (when (seq coll) (Reductions rdf (first coll) (rest coll))))\n  ([rdf seed coll]\n   (lazy-seq\n   \t(if-let [s (seq coll)]\n      (cons seed (Reductions rdf (rdf seed (first s)) (rest s) ))\n      (list seed) ))))","user":"57934c67e4b0e215f87e8456"},{"problem":60,"code":"(fn rf\n  ([f e s] \n  (if (empty? s) (vector e)\n\t(cons e (lazy-seq (rf f (f e (first s)) (rest s))))))\n  ([f [e & s]] (rf f e s)))","user":"575ddfd1e4b02ea11479938d"},{"problem":60,"code":"(fn me\n  ([f s] (me f (f (first s)) (rest s)))\n  ([f seed s]\n  (lazy-seq\n    (if (empty?  s)\n      (cons seed nil)\n      (cons seed (me f (f seed (first s)) (rest s)))\n    )\n  ))\n)","user":"54ba8206e4b0ed20f4ff6eb6"},{"problem":60,"code":"(fn problem-60\n  ([f [x & xs]]\n   (problem-60 f (f x) xs))\n  ([f initial [x & more :as xs]]\n   (lazy-seq\n    (if (not-empty xs)\n      (cons initial (problem-60 f (f initial x) more))\n      [initial]))))","user":"5d669613e4b0db5d338d15ea"},{"problem":60,"code":"(fn [& args]\n  (let [x1 (if (= (count args) 2) (first (last args)) (first (rest args)))]\n    (cons x1 \n          (if ((complement counted?) (last args))\n            (apply (fn reductions* ([f [h & t]] (reductions* f h t))\n                     ([f x [s-h & s-t]]  (cons (f x s-h) (lazy-seq (reductions* f (f x s-h) s-t)))))\n                   args)\n            (take\n             (count (last args))\n             (apply (fn reductions* ([f [h & t]] (reductions* f h t))\n                      ([f x [s-h & s-t]]  (cons (f x s-h) (lazy-seq (reductions* f (f x s-h) s-t)))))\n                    args))))))","user":"5dd90651e4b0948ae9d9ad97"},{"code":"(fn r\n  ([f c] (r f (first c) (rest c)))\n  ([f i c]\n    (cons i (lazy-seq\n              (when-first [a c]\n                (r f (f i a) (rest c)))))))","problem":60,"user":"4ec53f8c535d6d7199dd368b"},{"problem":60,"code":"(let [sublist (fn [col] (map (fn [n e] (take n col)) (iterate inc 1) col))]\n  (fn\n  \t([f coll]\n  \t(map #(reduce f %) (sublist coll)))\n  \n  \t([f s coll]\n  \t(concat [s] (map #(reduce f s %) (sublist coll))))))","user":"57c45e64e4b05aa3c4741ccf"},{"code":"(fn \n  ([f coll] \n    (map #(reduce f %) \n      (distinct (take 5 (map #(take % coll) (map inc (range)))))))\n  ([f x coll] (conj (map #(reduce f x %)\n      (distinct (take 5 (map #(take % coll) (map inc (range)))))) x)))","problem":60,"user":"4f03822f535dcb61093f6b03"},{"code":"(fn !\n  ([f accum [x & xs]]\n  (cons accum (if x\n               (lazy-seq (! f (f accum x) xs))\n                '())))\n  ([f [x & xs]] (! f x xs)))","problem":60,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":60,"code":"(fn reduce-intermediate\n  ([f coll] (reduce-intermediate f (f (first coll)) (rest coll)))\n  ([f v coll] (lazy-seq (if (empty? coll)\n                          [v]\n                          (cons v (reduce-intermediate f (f v (first coll)) (rest coll)))))))","user":"5f03ab5be4b0cf489e8d7f37"},{"problem":60,"code":"(fn seq-reductions\n  ([f coll]\n   (seq-reductions f (first coll) (rest coll)))\n  ([f val coll]\n   (cons val\n         (lazy-seq\n          (when (seq coll)\n            (seq-reductions f (f val (first coll)) (rest coll)))))))","user":"5777c3d6e4b0979f8965164f"},{"code":"(fn f\n  ([g c]\n    (lazy-seq (f g (first c) (rest c))))\n  ([g i c]\n    (if (empty? c)\n      [i] \n      (cons i (lazy-seq (f g (g i (first c)) (rest c)))))))","problem":60,"user":"4f9f7daae4b0dcca54ed6d37"},{"code":"(fn c [func & other]\n  (if (= 1 (count other))\n    (let [its-it (fn g [f s v] (cons v (lazy-seq (g f (next s) (f v (first s)) ))))] (its-it func (next (first other)) (ffirst other)))\n    (let [init (first other)\n          its-it (fn g [f s v] (cons v (if (nil? s) nil (lazy-seq (g f (next s) (f v (first s)) )))))] (its-it func (fnext other) init))\n  )\n)","problem":60,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn [f x & y]\r\n  (letfn [(red [f acc coll]\r\n            (lazy-seq\r\n              (cons acc\r\n                (when (seq coll)\r\n                  (red f (f acc (first coll)) (rest coll))))))]\r\n    (if (seq y)\r\n      (red f x (first y))\r\n      (red f (first x) (rest x)))))","problem":60,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":60,"code":"(fn my-reduction\n   ([f coll]\n    (my-reduction f (first coll) (rest coll)))\n   ([f init coll]\n    (cons init\n          (lazy-seq\n            (when (seq coll) (my-reduction f\n                                           (f init (first coll))\n                                           (rest coll)))))))","user":"5515b138e4b055c2f668d4ed"},{"problem":60,"code":"(fn reds_\n  ([f coll]\n   (lazy-seq (reds_ f (first coll) (rest coll))))\n  ([f init coll]\n   (cons init (lazy-seq (when-let [s (seq coll)] (reds_ f (f init (first coll)) (rest coll)))))))","user":"56706f01e4b0a866af6896f2"},{"code":"(fn my-reductions \n  ([f coll] \n    (if (empty? coll) [] \n    (my-reductions f (first coll) (rest coll))))\n  \n   ([f init coll] \n     (cons init\n         (lazy-seq\n           (if ((comp not empty?) coll)\n             (my-reductions f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4edf5dc6535d10e5ff6f5340"},{"problem":60,"code":"(fn red\n\n  ([f [x1 & xs]]\n\n   (red f x1 xs))\n\n  ([f x1 [x2 & xs]]\n\n   (if xs\n\n     (cons x1 (lazy-seq (red f (f x1 x2) xs)))\n\n     (cons x1 [(f x1 x2)]))))","user":"586b6a0ae4b01531a375e957"},{"problem":60,"code":"(fn reps\n  ([func coll]\n   (reps func (first coll) (rest coll)))\n\n  ([func init coll]\n   (if (empty? coll)\n     (list init)\n     (let [value (func init (first coll))]\n       (cons init (lazy-seq (reps func value (rest coll))))\n       )\n     )\n    ))","user":"563a30d7e4b0bfe05bf117f9"},{"code":"(fn do-reduce\r\n    ([func init args]\r\n       (cons init\r\n             (lazy-seq\r\n              (when args\r\n                (do-reduce\r\n                 func\r\n                 (func init (first args))\r\n                 (next args))))))\r\n    ([func args]\r\n       (lazy-seq\r\n        (if args\r\n          (do-reduce func (first args) (next args))\r\n          (list (func))))))","problem":60,"user":"508b95a0e4b0be79e5b189c6"},{"problem":60,"code":";; copied from https://www.youtube.com/watch?v=Hox7bdWYsiY\n(fn my-reduce\n  ([f s]\n  (my-reduce f (first s) (rest s))\n   )\n  ([f acc s]\n   (cons acc\n         (lazy-seq\n  (if (empty? s)\n     nil\n    (my-reduce f (f acc (first s)) (rest s))\n    )\n   ))))","user":"539f9f79e4b0ca733b97449e"},{"problem":60,"code":"(fn my-reductions\n   ([f coll] (my-reductions f (first coll) (rest coll)))\n   ([f initial coll]\n    (if (seq coll)\n      (cons\n        initial\n        (lazy-seq (my-reductions f (f initial (first coll)) (rest coll))))\n      (list initial)\n      )\n     )\n   )","user":"55f2c898e4b06e875b46ce4b"},{"code":"; I gave up and looked at the core implementation\n  (fn reductions*\n    ([f coll]\n      (lazy-seq\n        (if-let [s (seq coll)]\n                (reductions* f (first s) (rest s))\n                (list (f)))))\n    ([f init coll]\n      (cons init\n            (lazy-seq\n              (when-let [s (seq coll)]\n                (reductions* f (f init (first s)) (rest s)))))))","problem":60,"user":"52244a77e4b01819a2de42d1"},{"code":"(fn r \r\n     ([f c] (r f (first c) (rest c)))\r\n     ([f i [n & c]] (lazy-seq (cons i (if c (r f (f i n) c) [(f i n)])))))","problem":60,"user":"4e707db6535d5021c1a8963a"},{"problem":60,"code":"(fn do-reductions\n  ([f a1]\n   (do-reductions f (f (first a1)) (rest a1)))\n  ([f a1 a2]\n   (if (empty? a2) (list a1)\n                   (cons a1 (lazy-seq (do-reductions f (f a1 (first a2)) (rest a2)))))))","user":"59b62f8de4b05c620303ca1f"},{"problem":60,"code":"(fn scan\n   ([f ls] (scan f (first ls) (rest ls)))\n   ([f init ls]\n      (if (empty? ls)\n        (list init)\n        (cons init (lazy-seq (scan f (f init (first ls)) (rest ls)))))))","user":"547584d9e4b0c51c1f4d729b"},{"problem":60,"code":"(fn reductions'\n  ([f xs]\n    (reductions' f (first xs) (rest xs)))\n  ([f acc xs]\n    (cons acc\n          (when (not (empty? xs))\n            (lazy-seq (reductions' f\n                                   (f acc (first xs))\n                                   (rest xs)))))))","user":"5d27da09e4b092dab7f59c75"},{"problem":60,"code":"(fn r\n  ([f a s]\n    (if (empty? s)\n      (list a)\n      (lazy-seq (cons a (r f (f a (first s)) (rest s))))))\n  ([f s]\n   (r f (first s) (rest s))))","user":"590b055ae4b047aa04b199c9"},{"problem":60,"code":"(fn [f & args]\n  ((fn fnc [v coll]\n     (if (not-empty coll)\n       (cons v (lazy-seq (fnc (f v (first coll)) (rest coll))))\n       (cons v [])))\n   (if (= 1 (count args)) (first (nth args 0)) (nth args 0))\n   (if (= 1 (count args)) (rest (nth args 0)) (nth args 1))))","user":"5e246f92e4b05b4b01516150"},{"problem":60,"code":"(fn seq-reduce\r\n  ([f s]\r\n    (seq-reduce f (first s) (rest s)))\r\n  ([f r s]\r\n    (cons r (seq-reduce true f r s)))  \r\n  ([_ f r [a & s]]\r\n    (if (nil? s)\r\n      [(f r a)]\r\n      (lazy-seq\r\n        (cons \r\n          (f r a) \r\n          (seq-reduce true f (f r a) s))))))","user":"5470699ae4b00cfc9eacc1b6"},{"code":"(fn reduxns\n  ([o i s]\n     (if (empty? s) [i]\n         (cons i (lazy-seq (reduxns o (o i (first s)) (rest s))))))\n  ([o s]\n     (if (empty? s) [(o)]\n         (reduxns o (first s) (rest s)))))","problem":60,"user":"529ce629e4b04e0c58e87b6e"},{"code":"(fn [f & more]\n  ((fn ! [f result coll]\n     (if (empty? coll)\n       nil\n         (cons\n          result \n          (lazy-seq (!\n                     f                    \n                     (f result (first coll))\n                     (rest coll)\n                     )\n                    )\n          ))\n         ) f\n           (if (= 2 (count more))\n             (first more)\n             (first (first more)))\n           (if (= 2 (count more))\n             (conj (second more) 0)\n             (rest (first more))\n             )\n           ))","problem":60,"user":"4ea31da2535d7eef308072c1"},{"problem":60,"code":"(fn redet ([f xs] (if (= (type 0) (type (first xs))) (redet f 0 xs)     ))\n           ([f v xs] (letfn [(redet3 [ff vv ys] \n                              (lazy-seq \n                                  (if (first ys) \n                                    (cons (ff vv (first ys)) \n                                         (redet3 ff (ff vv (first ys)) (rest ys))\n                                    ) \n                                     \n                                  )  \n                               )\n                               )]\n                       (let [tmp (redet3 f v xs)]\n                              (if (= v (first tmp) )\n                                   tmp \n                                   (cons v tmp)\n                              )\n                             \n                       )\n                       ))\n )","user":"59ff9424e4b01bb0ae8afd24"},{"problem":60,"code":"(fn pared\n  ([op coll]\n   (pared op (first coll) (rest coll)))\n  ([op init coll]\n   (cons init\n         (lazy-seq\n           (if (seq coll)\n             (pared op (op init (first coll)) (rest coll)))))))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn myred\n   ([f coll] (myred f (first coll) (rest coll)))\n   ([f val coll] \n      (cons val ((fn rec [current remaining]\n           (if (empty? remaining)\n               nil\n               (let [newcurrent (f current (first remaining))]\n                 (cons newcurrent (lazy-seq (rec newcurrent (rest remaining)))))))       \n       val coll))))","problem":60,"user":"51dd9370e4b0c33a4e1da40c"},{"problem":60,"code":"(fn reducts\r\n  ([f coll] (let [[init & coll] coll] (reducts f init coll 0)))\r\n  ([f init coll] (reducts f init coll 0))\r\n  ([f init coll n]\r\n   (let [x (take n coll)]\r\n     (if (< (count x) n) nil\r\n         (lazy-seq (cons (reduce f init x)\r\n                         (reducts f init coll (inc n))))))))","user":"55d0e76ae4b0e31453f64a40"},{"problem":60,"code":";; elegant solution by qiuxiafei\n(fn my-reductions\n \n  ([op input] (my-reductions op (first input) (rest input)))\n \n  ([op result input]\n \n  (lazy-seq\n    (if (empty? input) (list result)\n      (cons result\n            (my-reductions op\n                 (op result (first input))\n                 (rest input)))))))","user":"589b98fae4b00487982d533c"},{"code":"(fn reduct\n  ([f initial coll] (if-not (empty? coll)\n                      (lazy-seq\n                       (let [cur (f initial (first coll))]\n                         (cons initial (reduct f cur (next coll)))))\n                      [initial]))\n  ([f coll] (if-not (empty? coll)\n              (reduct f (first coll) (next coll))\n              [])))","problem":60,"user":"52d00832e4b07d0d72b273b4"},{"problem":60,"code":"(fn r\n  ([f c] (r f (first c) (rest c)))\n   ([f i c] (cons i (if (empty? (rest c)) (list (f i (first c))) (lazy-seq (r f (f i (first c)) (rest c)))))))","user":"53ea5307e4b036ad0777e4e2"},{"problem":60,"code":"(fn r \n   ([f s] (r f (first s) (rest s)))\n   ([f i s]\n      (lazy-cat\n        [i]\n        (if (seq s)\n          (r f (f i (first s)) (rest s))\n          []))))","user":"561047eae4b05f002753df6d"},{"problem":60,"code":"(fn g\n  ([f [x & xs]]\n      (g f x xs))\n  ([f i [x & xs]]\n    (cons i\n      (if x\n        (lazy-seq (g f (f i x) xs))))))","user":"5416b4a2e4b01498b1a71a01"},{"code":"(fn redu\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (redu f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (redu f (f init (first s)) (rest s)))))))","problem":60,"user":"4eb0afed535d7eef3080733e"},{"problem":60,"code":"(fn __\n  ([f initial coll]\n  (let [current (atom initial)\n        do-it (fn [elem] \n                (swap! current #(f % elem)))]\n    (lazy-cat \n      [initial]\n      (map do-it coll))))\n  ([f coll]\n    (__ f (first coll) (rest coll))))","user":"55a62092e4b0acc240e31554"},{"code":"(fn  \r\n  ([f c]\r\n   [0 1 3 6 10])\r\n  ([f i c] \r\n    (if (= f *)\r\n      [120]\r\n      [[1] [1 2] [1 2 3] [1 2 3 4]])))","problem":60,"user":"4dcd818e535d5973398f929d"},{"problem":60,"code":"(fn reduction-steps\n  ([f aseq] (reduction-steps f (first aseq) (rest aseq)))\n  ([f value aseq]\n   (lazy-seq (if (first aseq)\n               (cons value (reduction-steps f (f value (first aseq)) (rest aseq)))\n               (cons value aseq)))))","user":"53504fe6e4b084c2834f4ada"},{"problem":60,"code":"(fn [& [f i c]]\n    ((fn s [a c]\n       (cons a (when c\n                 (lazy-seq \n                  (s (f a (first c)) \n                     (next c))))))\n     (if c i 0)\n     (if c c (next i))))","user":"53ea5851e4b036ad0777e4e4"},{"code":"(fn seq-reds \n  ([f s] (seq-reds f (first s) (rest s)) )\n  ([f i s]\n  (lazy-seq\n\t  (if (empty? s)\n            [i]\n\t    (cons i (seq-reds f (f i (first s)) (rest s)))\n          )\n        )\n  )\n)","problem":60,"user":"4e9de526535dbda64a6f6b8e"},{"problem":60,"code":"(fn my-reduct\n    ([func coll]\n       (my-reduct func (first coll) (rest coll)))\n    \n    ([func firstArg coll]\n      (letfn [(reduct [f init se]\n                (lazy-seq (when-not (empty? se)\n                            (let [res (f init (first se))]\n                              (cons res (reduct f res (rest se)))))))]\n        (lazy-seq (cons firstArg (reduct func firstArg coll))))))","user":"5fc1c424e4b0edf42a5593d0"},{"problem":60,"code":"(fn red\n  ([func xs] (red func (first xs) (rest xs)))\n  ([func x xs]\n   (lazy-seq\n    (if-not (empty? xs)\n     (cons x (red func (func x (first xs)) (rest xs)))\n     [x]\n     ))))","user":"5522cd9ae4b0882d96d091ab"},{"code":"(fn [f & args]\n  (let [start (if (= 2 (count args)) (first args) (ffirst args))\n        s (if (= 2 (count args)) (last args) (rest (last args)))]\n    (letfn [(op [s l]\n      (if (empty? s)\n        s\n        (cons\n          (f l (first s))\n          (lazy-seq (op (rest s) (f l (first s)))))))]\n      (cons start (op s start)))))","problem":60,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":60,"code":"(fn myreductions\n  ([f xs]\n   (next (myreductions f (f) xs)))\n  ([f init xs]\n   ((fn myloop [acc [x & remain]]\n      (cons\n        acc\n        (when-not (nil? x)\n          (lazy-seq\n            (myloop (f acc x) remain)))))\n    init xs)))","user":"573d58c8e4b05c31a32c0811"},{"code":"(fn myreduce\n  ([f coll] (myreduce f (first coll) (rest coll)))\n  ([f base coll]\n   (cons base\n     (lazy-seq\n       (when coll\n         (myreduce f (f base (first coll)) (next coll)))))))","problem":60,"user":"522454f4e4b01819a2de42d3"},{"problem":60,"code":"(fn foo\n  ([f start xs] (if-let [fs (first xs)]\n                  (lazy-seq (cons start (foo f (f start fs) (rest xs))))\n                  (list start)))\n  ([f xs] (when-let [fs (first xs)]\n            (foo f fs (rest xs)))))","user":"4ea03f70535d7eef308072a1"},{"problem":60,"code":"(fn p\n  ([fun valor lst]\n    (if (empty? lst)\n      (list valor)\n      (cons valor (lazy-seq (p fun (fun valor (first lst)) (rest lst))))))\n  ([fun lst]\n    (p fun (first lst) (rest lst))))","user":"56df6498e4b0ca2494a095f8"},{"problem":60,"code":"(fn r\n  ([f c] (r f (first c) (rest c)))\n  ([f v c] (lazy-seq (cons v (if (empty? c) () (r f (f v (first c)) (rest c)))))))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":60,"code":"(fn seq-reductions\n  ([f xs] (seq-reductions f (first xs) (rest xs)))\n  ([f z xs]\n   (if (empty? xs)\n     (list z)\n     (cons z (lazy-seq (seq-reductions f (f z (first xs)) (rest xs)))))))","user":"55fbc657e4b0f488688e0666"},{"problem":60,"code":"(fn number60\n  ([f xs] (number60 f (first xs) (rest xs)))\n  ([f p xs]\n   (if (empty? xs)\n     [p]\n     (lazy-cat [p] (number60 f (f p (first xs)) (rest xs))))))","user":"54074fc5e4b0addc1aec66b6"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n\n  ([f init coll]\n   (let [helper (fn help [acc collection]\n                  (lazy-seq (cons acc\n                                  (if (empty? collection)\n                                    '()\n                                    (help (f acc (first collection)) (rest collection))))))]\n     (helper init coll))))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":60,"code":"(fn reds\n  ([f [x & xs]] (reds f x xs))\n  ([f a s] (if (empty? s) [a]\n             (lazy-seq\n              (cons a (reds f (f a (first s)) (rest s)))))))","user":"565a3e25e4b068f2fe63dbfb"},{"problem":60,"code":"(fn my-reduce\n  ([f s] (my-reduce f (first s) (rest s)))\n  ([f acc s] (cons acc (lazy-seq (if (empty? s)\n                                   nil\n                                   (my-reduce f (f acc (first s)) (rest s)))))))","user":"563b9acbe4b0bfe05bf11827"},{"problem":60,"code":"(fn create-lazy-seq\n  ([fun initial-list]\n   ((fn get-lazy-seq [n]\n      (lazy-seq (cons (reduce fun (take n initial-list))\n                      (get-lazy-seq (inc n))))) 1))\n  ([fun initial-val initial-list]\n   (take (inc (count initial-list)) \n         ((fn get-val-lazy-seq [n]\n           (lazy-seq (cons (reduce fun initial-val (take n initial-list))\n                     (get-val-lazy-seq (inc n))))) 0))))","user":"55a0d79fe4b0acc240e31502"},{"problem":60,"code":"(fn rdct\n ([f [head & tail]] (rdct f head tail))\n ([f head [thead & ttail]]\n  (if (nil? thead)\n   (lazy-seq [head])\n   (lazy-seq (concat\n    [head] (rdct f\n     (f head thead) ttail))))\n )\n)","user":"549a999be4b0f3d1d8e70f6f"},{"problem":60,"code":"(fn fun-times\n  ([fun xs] (fun-times fun (first xs) (rest xs)))\n  ([fun init xs] (lazy-seq\n                  (if (seq xs)\n                    (let [reduction (fun init (first xs))]\n                      (cons init (fun-times fun reduction (rest xs))))\n                    [init]\n                    ))))","user":"54be792ee4b0ed20f4ff6eeb"},{"code":"(fn red \n\t([f coll] (red f (first coll) (rest coll)))\n\t([f init coll] (let [nxt (f init (first coll))]\n\t\t(if (empty? (rest coll))\n\t\t\t[init nxt]\n\t\t\t(cons init (lazy-seq (red f nxt (rest coll))))\n\t\t)\n\t))\n)","problem":60,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":60,"code":"(fn lol ([fun vals] (cons (first vals) (lazy-seq (lol fun (first vals) (drop 1 vals) 0))))\n    ([fun init vals] (cons init (lazy-seq (lol fun init vals 0))))\n    ([fun init vals banana] (if (empty? vals)\n                              []\n                              (cons (fun init (first vals)) (lazy-seq (lol fun (fun init (first vals)) (drop 1 vals) banana)))))\n    )","user":"567f988be4b0feffd0d18ebe"},{"problem":60,"code":"(fn reduce-steps\n  ([f xs] (reduce-steps f (first xs) (rest xs)))\n  ([f v xs] (let [r (fn anon [f v xs]\n                      (if (empty? xs) '()\n                       (let [c (f v (first xs))]\n                         (lazy-seq (cons c (anon f c (rest xs)))))))]\n              (cons v (r f v xs)))))","user":"57d1d6c8e4b0bd073c202370"},{"problem":60,"code":"(fn reduc\n  ([func seq]\n   (reduc func (first seq) (rest seq)))\n  ([func val seq]\n   (cons val\n         (if (empty? seq)\n           '()\n           (lazy-seq (reduc func (func val (first seq)) (rest seq)))))))","user":"56069006e4b08b23635d3174"},{"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f base coll]\n    (lazy-seq\n      (if (empty? coll)\n        (list base)\n        (cons base (red f (f base (first coll)) (rest coll)))))))","problem":60,"user":"4edab806535d10e5ff6f5311"},{"code":"(fn r \n  ([f coll] (r f (first coll) (rest coll)))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n             (when-let [s (seq coll)]\n               (r f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4fe8fda4e4b0547ebccb2438"},{"code":"(fn myred \n  ([op l] (myred op (first l) (rest l)))\n  ([op zw l]\n    (if (empty? l)\n      (cons zw l)\n      (let [x (op zw (first l))]\n        (cons zw (lazy-seq (myred op x (rest l))))))))","problem":60,"user":"5110b8bae4b04c71fce993f4"},{"problem":60,"code":"(fn reductions-\n  ([f [x & xs]] (reductions- f x xs))\n  ([f val [x & xs :as s]]\n   (cons val (when x\n               (let [new-val (f val x)]\n                 (lazy-seq (reductions- f new-val xs)))))))","user":"585dbe41e4b0f14aab7c879f"},{"problem":60,"code":";; based on clojure.core/reductions\n(fn sreds\n  ([f coll]\n   (sreds f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     (list init)\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (sreds f (f init (first s)) (rest s))))))))\n\n;; based on my-reduce in Clojure for the Brave and True - not lazy\n;(fn sreds\n;  ([f [head & tail]]\n;   (sreds f head tail))\n;  ([f init coll]\n;   (lazy-seq\n;    (loop [result [init]\n;           remaining coll]\n;      (if (empty? remaining)\n;        result\n;        (recur (conj result (f (last result) (first remaining))) (rest remaining)))))))","user":"60794173e4b0a637ed78035d"},{"code":"(fn r\n    ([f coll]\n     (if (empty? coll)\n         (f)\n         (r f (first coll) (rest coll))))\n    ([f init coll]\n     (if (empty? coll) [init]\n         (cons init (lazy-seq (r f (f init (first coll)) (rest coll)))))))","problem":60,"user":"50705886e4b07bd6ad9b9f2a"},{"code":"(fn reducts\n  ([f things]\n   (reducts f (first things) (drop 1 things)))\n  ([f thing things]\n   (if (empty? things) [thing]\n     (lazy-seq (cons thing\n         (reducts f (f thing (first things)) (drop 1 things)))))))","problem":60,"user":"504e12ade4b078edc5f593b7"},{"problem":60,"code":"(fn red\n           ([f coll] (if-let [s (seq coll)] (red f (first s) (rest s))))\n           ([f v coll] (cons v (lazy-seq (when-let [s (seq coll)]  (red f (f v (first s)) (rest s)))))))","user":"564b1ff8e4b0284900eef663"},{"problem":60,"code":"(fn rdns\n  ([f coll]\n      (rdns f (first coll)  (rest coll)))\n  ([f acc coll]\n      (if (empty? coll)\n        (cons acc [])\n        (let [res (f acc (first coll))]\n          (cons acc (lazy-seq (rdns f res (rest coll))))))))","user":"532ecd44e4b019098a6f8b49"},{"problem":60,"code":"(fn reducs\n  ([f xs] (if (empty? xs)\n            (list (f))\n            (reducs f (first xs) (rest xs))))\n  ([f val xs] (if (empty? xs)\n                (list val)\n                (let [new-val (f val (first xs))]\n                  (cons val (lazy-seq (reducs f new-val (rest xs))))))))","user":"5344fe13e4b084c2834f4a32"},{"code":"(fn reducto\n  ([f coll] (reducto f (first coll) (rest coll)))\n  ([f vall coll]\n     (lazy-seq\n      (cons vall\n            (when-let [[x & xs] coll] (reducto f (f vall x) xs))))))","problem":60,"user":"523b82efe4b07becd5be21f0"},{"problem":60,"code":"(fn mr \n  ([f x c] (mr f (cons x c)) )\n  ([f [x1 & c]]\n     (if (empty? c) [x1]\n         (let [res (f x1 (first c))]\n           (lazy-seq (cons x1 (mr f (cons res (rest c)))))\n           ))))","user":"4ec4d723535dcc7ae8597d65"},{"problem":60,"code":"(fn reduct \n  ([f [x & xs]] (reduct f x xs))\n  ([f acc [x & xs]]\n    (lazy-seq \n     (cons acc\n           (if x \n             (reduct f (f acc x) xs))))))","user":"5ad63a34e4b0ea6055cfac01"},{"code":"(fn my-reductions\n  ([op [h & r]]\n   (my-reductions op h r))\n  ([op i [h & r]]\n   (cons i\n         (if h (lazy-seq (my-reductions op (op i h) r))))))","problem":60,"user":"50d86fe2e4b01f0871336e67"},{"problem":60,"code":"(fn intermediate-reduce \n  ([f s] (intermediate-reduce f (first s) (rest s)))\n  ([f accum s]\n      (lazy-seq \n        (cons accum\n          (when-let [s (seq s)]\n            (intermediate-reduce f (f accum (first s)) (rest s)))))))","user":"556405e5e4b0c656e3ff17fb"},{"code":"(fn r\r\n  ([o i s]\r\n     (lazy-seq\r\n      (cons i (when (seq s)\r\n              (r o (o i (first s)) (rest s))))))\r\n  ([o s]\r\n     (r o (first s) (rest s))))","problem":60,"user":"4eecdd66535d93acb0a668b9"},{"problem":60,"code":"(fn foo\n   ([f coll]\n    (foo f (first coll) (rest coll)))\n   ([f v coll]\n    (if (empty? coll)\n      [v]\n      (let [[c & cs] coll\n            n (f v c)]\n        (cons v (lazy-seq (foo f n cs)))))))","user":"54864662e4b0e286459a11b8"},{"problem":60,"code":"(fn rs\n  ([op [f & r]] (rs op f r))\n  ([op i [f & r]]\n     (lazy-seq (cons i (when f (rs op (op i f) r))))))","user":"4eb97234535dfed6da9c6d53"},{"code":"(fn rd\n  ([f xs]\n    (lazy-seq\n      (if-let [s (seq xs)]\n        (rd f (first s) (rest s))\n        (list (f)))))\n  ([f acc xs]\n     (cons acc\n           (lazy-seq\n            (when-let [s (seq xs)]\n              (rd f (f acc (first s)) (rest s)))))))","problem":60,"user":"50c9ece0e4b0a409464667d8"},{"problem":60,"code":"(fn red\n  ([op xs]\n   (red op (first xs) (next xs)))\n  ([op x xs]\n   (lazy-seq\n    (when (not= x :__stop)\n\t  (cons x\n            (red op\n                 (if (seq xs)\n                   (op x (first xs))\n                   :__stop)\n                 (next xs)))))))","user":"5d431c77e4b07c84aa5ae68f"},{"problem":60,"code":"(fn my-reductions\n  ([f [s & xs]]\n   (my-reductions f s xs))\n  ([f s xs]\n   (if (empty? xs)\n     [s]\n     (cons s (lazy-seq (my-reductions f  (f s (first xs)) (rest  xs)))))))","user":"58e37946e4b005f69f193cae"},{"problem":60,"code":"(fn reds\n  ([f coll]\n    (lazy-seq\n      (if-let [s (seq coll)]\n        (reds f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n    (cons init\n      (lazy-seq\n        (when-let [s (seq coll)]\n          (reds f (f init (first s)) (rest s)))))))","user":"5a080bdde4b01bb0ae8afde9"},{"code":"(fn f\n  ([op [x & xs]]\n   (f op x xs)\n   )\n  ([op i s]\n   (if-let [[x & xs] s]\n     (cons i (lazy-seq (f op (op i x) xs)))\n     [i]\n     )\n   )\n  )","problem":60,"user":"5298d3f4e4b02ebb4ef75068"},{"problem":60,"code":"(fn r \n  ([f coll] (r f (first coll) (next coll)))\n  ([f init [ h & t :as s]] \n    (cons init\n          (lazy-seq \n                    (if (seq s)\n                      (r f (f init h) t))))))","user":"5a0a25fce4b0eab8c044893d"},{"problem":60,"code":"(fn r\n  ([f coll]\n   (r f (first coll) (rest coll)))\n  ([f init-val coll]\n   (if (empty? coll)\n       (cons init-val ())\n       (lazy-seq (cons init-val (r f (f init-val (first coll)) (rest coll)))))))","user":"567695c2e4b05957ce8c6157"},{"code":"(fn rs\n  ([f s]\n   (rs f (first s) (rest s)))\n  ([f init s]\n   (cons init\n         (lazy-seq (if (empty? s)\n                     []\n                     (rs f (f init (first s)) (rest s)))))))","problem":60,"user":"4f525fdce4b03ad3f0c10d37"},{"problem":60,"code":"(fn myreduce\n ([f acc coll]\n  (cons acc\n    (lazy-seq\n     (if-let [[v & vs] (seq coll)]\n       (myreduce f (f acc v) vs)))))\n ([f coll]\n  (myreduce f (first coll) (rest coll))))","user":"543d26e5e4b032a45b86934a"},{"problem":60,"code":"(fn lazy-reduction\n  ([f coll] (lazy-reduction f (first coll) (rest coll)))\n  ([f init coll] (cons init \n                       (lazy-seq \n                         (when-let [s (seq coll)]\n                           (lazy-reduction f (f init (first s)) (rest s)))))))","user":"59ddae03e4b01968742fed65"},{"code":"(fn rd\n  ([f args] (rd f (first args) (next args)))\n  ([f init args]\n    (if (empty? args)\n      (seq (list init))\n      (lazy-seq\n        (cons init (rd f (f init (first args)) (next args)))))))","problem":60,"user":"4e7db3b4535db169f9c796e1"},{"problem":60,"code":"(fn reduc\n  ([f s] (reduc f (first s) (rest s)))\n  ([f fv s]\n    (cons fv (lazy-seq (if (seq s)\n                         (reduc f (f fv (first s)) (rest s))\n                         nil)))))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn redctns\n  ([f [x & xs]] (redctns f x xs))\n  ([f x coll]\n     (cons x (lazy-seq\n              (when-let [s (seq coll)]\n                (redctns f (f x (first s)) (rest s)))))))","problem":60,"user":"524b0645e4b09eba1c0223bf"},{"code":"(fn _r \n  ([f coll] (_r f (first coll) (rest coll)))\n  ([f x coll] (cons x (lazy-seq (when (not-empty coll) (_r f (f x (first coll)) (rest coll)))))))","problem":60,"user":"531f7a2de4b08068f379edc6"},{"code":"(fn r \n  ([f coll] (r f (first coll) (rest coll)))\n  ([f init coll]\n  (if (empty? coll)\n    [init]\n    (let [x (f init (first coll))]\n      (lazy-seq\n        (cons init (r f x (rest coll))))))))","problem":60,"user":"4fa5406fe4b081705acca1ac"},{"problem":60,"code":"(fn red\n ([f s] (red f (first s) (rest s)))\n ([f v s]\n     (if\n      (empty? s)\n      [v]\n     (cons v (lazy-seq (red f (f v (first s)) (rest s)))))))","user":"5ab564f8e4b073f177442639"},{"problem":60,"code":"(fn redux\n  ([f coll]\n   (redux f (first coll) (rest coll)))\n  \n  ([f working coll]\n   (cons working\n         (if (empty? coll)\n           '()\n           (lazy-seq (redux f\n                            (f working (first coll))\n                            (rest coll)))))))","user":"56a79eb0e4b07966d5a8a05d"},{"problem":60,"code":"(fn reduc\n  ([f seq]\n   (let [x (f (first seq) (second seq))]\n     (cons (first seq) (lazy-seq (reduc f x (drop 2 seq))))))\n  ([f x seq]\n   (if (empty? seq)\n     (list x)\n     (let [y (f x (first seq))]\n       (cons x (lazy-seq (reduc f y (rest seq))))))))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":60,"code":"(fn red2\n  ([f xs] (red2 f (first xs) (rest xs)))\n  ([f x0 xs]\n   (letfn [(impl [acc [x & xs]]\n      (let [new-acc (f acc x)]\n        (if (empty? xs)\n          (seq [new-acc])\n          (cons new-acc (lazy-seq (impl new-acc xs))))))]\n     (cons x0 (lazy-seq (impl x0 xs))))))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":60,"code":"(fn red\n           ([f coll]\n            (red f (first coll) (rest coll)))\n           ([f init coll]\n            (lazy-seq\n              (if (seq coll)\n                (cons init (red f (f init (first coll)) (rest coll)))\n                (cons init coll)))))","user":"56c60b36e4b05cc29241eead"},{"code":"(fn red\r\n   ([f init coll]\r\n    (if (empty? coll)\r\n        (list init)\r\n        (lazy-seq (cons init (red f (f init (first coll)) (rest coll))))))\r\n   ([f coll] (red f (first coll) (rest coll))))","problem":60,"user":"4fcc6cb3e4b0ee37620e1861"},{"problem":60,"code":"(fn reds\n    ([func init coll]\n       (lazy-seq\n        (if (seq coll)\n          (cons init\n                (reds func\n                      (func init (first coll))\n                      (rest coll)))\n          [init])))\n\n    ([func coll]\n       (rest (reds func (func) coll))))","user":"4f42c80ae4b0d7d3c9f3fd0f"},{"problem":60,"code":"(fn seq-reduce\n  ([f s] (seq-reduce f (f (first s)) (rest s)))\n  ([f x s] (lazy-seq (if (empty? s) [x] (cons x (seq-reduce f (f x (first s)) (rest s)))))))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (cons (first coll) \n                  (my-reductions f\n                                 (f (first coll) (second coll))\n                                 (nnext coll))))\n  ([f acc coll] (if (empty? coll)\n                  (cons acc coll)\n                  (cons acc\n                      (lazy-seq (my-reductions f\n                                               (f acc (first coll))\n                                               (next coll)))))))","user":"5650b8a0e4b0284900eef6c3"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f init [head & tail :as coll]]\n   (cons init\n     (lazy-seq\n       (if (seq coll)\n           (my-reductions f (f init head) tail))))))","user":"5a91988ae4b002d099cae6f9"},{"code":"(fn rs\r\n  ([v f s]\r\n     (if (not (empty? s))\r\n      (let [t (conj v (first s))]\r\n        (cons (reduce f t)\r\n              (lazy-seq (rs t f (rest s)))))))\r\n  ([v f i s]\r\n     (rs v f (cons i s)))\r\n  )\r\n[]","problem":60,"user":"5054c7e1e4b0b1b9d1860eb2"},{"code":"(fn reductions2\n  ([f init [x & xs]] \n   (cons init (lazy-seq (when x (reductions2 f (f init x) xs))))) \n  ([f coll] \n   (reductions2 f (first coll) (rest coll))))","problem":60,"user":"4e9e6bd6535dbda64a6f6b96"},{"problem":60,"code":"(fn r\n  ([f [head & tail]]\n    (r f head tail))\n  ([f acc [head & tail]]\n      (cons acc\n        (when-not (nil? head)\n          (lazy-seq    \n            (r f (f acc head) tail))))))","user":"51aefceee4b09397d5109797"},{"code":"(fn redux\n ([f [init & coll]]\n  (redux f init coll))\n   ([f init coll]\n     (lazy-seq\n      (if (empty? coll)\n       (list init)\n       (cons init (redux f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4f7ab8c7e4b06e829148e19c"},{"problem":60,"code":"(fn\n z\n ([op col] (z op (op (first col)) (rest col)))\n ([op rem col]\n  (if\n   (seq col)\n   (lazy-seq\n    (let\n     [next (op rem (first col))]\n     (cons rem (z op next (rest col)))))\n   (cons rem nil))))","user":"58a822e4e4b01a0c0b232950"},{"problem":60,"code":"(fn r\n  ([f init [l & ls]] (cons init (lazy-seq (when l (r f (f init l) ls)))))\n  ([f l] (r f (first l) (rest l))))","user":"5632e850e4b0bfe05bf117ac"},{"problem":60,"code":"(fn s\r\n  ([f [x & xs]] (s f x xs))\r\n  ([f d [x & xs]]\r\n   (if x\r\n     (lazy-seq (cons d (s f (f d x) xs)))\r\n     [d])))","user":"53aaaf7ae4b047364c044444"},{"code":"(fn reduct\n  ([f coll]\n     (reduct f (f (first coll)) (rest coll)))\n  ([f x coll]\n     (if (empty? coll)\n       (list x)\n       (cons x (lazy-seq (reduct f (f x (first coll)) (rest coll)))))))","problem":60,"user":"4e82c062535db62dc21a62cc"},{"code":"(fn red-lazy \n  ([fun li](red-lazy fun (first li) (rest li)))\n\t([fun val li] \n\t\t(lazy-seq \n\t\t\t(cons val \t\t\t\n\t\t\t\t(if (empty? li)\n\t\t\t\tnil\n\t\t\t\t\t(red-lazy fun (fun val (first li)) (rest li))\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)","problem":60,"user":"4e8d5edd535d65386fec2134"},{"problem":60,"code":"(fn my-reduce\n  ([f coll]\n   (my-reduce f (first coll) (rest coll)))\n   ([f val coll]\n    (if (empty? coll)\n      (list val)\n      (let [computed-val (f val (first coll))]\n        (lazy-seq (cons val (my-reduce f computed-val (rest coll))))))))","user":"5918db70e4b09b4ee5954bbb"},{"problem":60,"code":"(fn my-reductions\n  ([f xs]\n   (my-reductions f (first xs) (next xs)))\n  ([f init [x & xs]]\n   (cons\n    init\n    (when x\n      (lazy-seq\n       (my-reductions\n        f\n        (f init x)\n        xs))))))","user":"5393185ae4b0b51d73faaeb7"},{"code":"(fn r\n  ([f [x & xs]] (r f x xs))\n  ([f x [xs & xss]]\n    (cons x (lazy-seq (if xs (r f (f x xs) xss))))))","problem":60,"user":"504e04a4e4b078edc5f59397"},{"problem":60,"code":"(fn reds\n  ([f coll] (reds f (first coll) (rest coll)))\n  ([f acc coll]\n   (lazy-seq (if (empty? coll)\n               (list acc)\n               (cons acc (reds f (f acc (first coll)) (rest coll)))))))","user":"5339c105e4b0e30313ee6cae"},{"problem":60,"code":"(fn reduct\n;  \"Returns a lazy seq of the intermediate values of the reduction (as\n;  per reduce) of coll by f, starting with init.\"\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (reduct f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n   ;(if (reduced? init)\n     ;(list @init)\n     (cons init\n       (lazy-seq\n         (when-let [s (seq coll)]\n           (reduct f (f init (first s)) (rest s)))))));)","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":60,"code":"(fn [f & r]\n   (let [v1 (if (second r)   (cons (first r) (second r)) (first r) )]\n         ((fn fo [v [lf & r]]\n               (if lf \n               (let [cv (f v lf)]\n                 \n                 (cons v (lazy-seq  (fo cv r  ))\n                 )\n               )\n               [v]\n               )\n            )\n            (first v1) (rest v1)\n         )\n         \n                                            \n   )\n)","user":"5735ac67e4b0cd1946bd102b"},{"problem":60,"code":"(fn fun\n  ([f coll]\n   (fun f (f (first coll)) (rest coll)))\n  ([f acc coll]\n   (cons acc \n         (lazy-seq\n          (if-let [head (first coll)]\n            (fun f (f acc head) (rest coll))\n            nil)))))","user":"54397533e4b032a45b86931d"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (f (first coll)) (rest coll)))\n  ([f initial coll]\n   (if-let [s (seq coll)]\n     (let [v (first s)\n           reduction (f initial v)]\n       (lazy-seq (cons initial (my-reductions f reduction (rest s)))))\n     (list initial))))","user":"5cb0f70ce4b026601754b8c1"},{"problem":60,"code":"(fn scanl\n  ([f [x & xs]] (scanl f x xs))\n  ([f a [x & xs]]\n   (if (nil? x)\n     [a]\n     (lazy-seq (cons a (scanl f (f a x) xs))))))","user":"598601f9e4b021a7a535fe79"},{"problem":60,"code":"(fn myReduct\n  ([f x s]\n   (if (seq s) \n     (cons x (lazy-seq (myReduct f (f x (first s)) (rest s))))\n     (list x)))\n  ([f s]\n   (myReduct f (first s) (rest s))))","user":"541619e8e4b01498b1a719f9"},{"problem":60,"code":"(fn f\n   ([o c] (f o (first c) (rest c)))\n   ([o i c] (if (empty? c) [i]\n                (lazy-seq (cons i (f o (o i (first c)) (rest c)))))))","user":"57642916e4b0994c1922fbee"},{"code":"(fn m\n  ([f   [c & r]] (m f c r))\n  ([f i [c & r]] (cons i (lazy-seq\n                           (if c (m f (f i c) r))))))","problem":60,"user":"4f9d8083e4b0dcca54ed6d23"},{"problem":60,"code":"(fn f\n  ([g c]\n   (f g (first c) (rest c)))\n  ([g i c]\n   (if (empty? c)\n     (list i)\n     (cons i\n           (lazy-seq\n            (f g (g i (first c)) (rest c)))))))","user":"52e1c276e4b09f7907dd142b"},{"code":"(letfn [(red\n        ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (red f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (red f (f init (first s)) (rest s)))))))]\n         red)","problem":60,"user":"531f1e63e4b08068f379edc2"},{"code":"(fn red\n  ([f n c]\n   (map first (take-while identity (iterate (fn [[n c]] (when c [(f n (first c)) (next c)])) [n c]))))\n  ([f c] (red f (first c) (rest c))))","problem":60,"user":"4fbf2818e4b081705acca317"},{"problem":60,"code":"(fn my-reductions \n  ([f initial coll]\n   (lazy-seq \n    (cons initial\n          (if (seq coll) (my-reductions f (f initial (first coll)) (rest coll))))))\n  ([f coll]\n   (my-reductions f (first coll) (rest coll))))","user":"5a86ad84e4b05369db4d249c"},{"code":"(fn fn2\n  ([f a]\n    (fn2 f (first a) (rest a)))\n  ([f i a]  \n    (letfn [(my-func [init args]\n      ;(println init args)\n      (cons init\n        (when-let [s (seq args)]\n          (lazy-seq (my-func (f init (first s)) (rest s))))))]\n    (my-func i a))))","problem":60,"user":"500b61b1e4b03d00572d2d81"},{"problem":60,"code":"(fn myreductions\n  ([f coll] (myreductions f (first coll) (rest coll)))\n  ([f acc coll]\n   (if (seq coll)\n     (lazy-seq (cons acc (myreductions f (f acc (first coll)) (rest coll))))\n     (cons acc '()))))","user":"52fe31d5e4b047fd55837038"},{"problem":60,"code":"(fn fero\n  ([fun se]\n            (lazy-seq\n              (fero fun (first se) (rest se))))\n  ([fun start se]\n    (cons start (fero fun start se :x)))\n  ([fun start se mark]\n            (lazy-seq\n              (if (empty? se)\n                []\n                (let [\n                      nn (fun start (first se))\n                      ]\n                  (cons nn (fero fun nn (rest se) :x)))))))","user":"58bc6a88e4b0888cdc949d16"},{"problem":60,"code":";(fn reds\n;    ([f as] (reds f (first as) (next as)))\n;    ([f z as]\n;        (lazy-seq\n;            (if-let [a (first as)]\n;                (cons z (reds f (f z a) (rest as)))\n;                (seq [z])))))\n\n(fn reds\n  ([f [a & as]] (reds f a as))\n  ([f z [a & as]]\n   (lazy-seq\n    (cons z (if a (reds f (f z a) as))))))","user":"54b04708e4b09f271ff37d11"},{"problem":60,"code":"(fn reds\n  ([f [head & tail]]\n   (reds f head tail))\n  ([f init [head & tail]]\n   (cons init (when head (lazy-seq (reds f (f init head) tail))))))","user":"50310713e4b05b7df5a0b84c"},{"code":"(fn mreductions\n  ([f coll]\n     (when (seq coll)\n       (cons\n        (first coll)\n        (lazy-seq\n         (mreductions f\n                      (f (first coll) (second coll))\n                      (rest (rest coll)))))))\n  ([f init coll]\n     (if (seq coll)\n       (cons init\n             (lazy-seq\n              (mreductions f\n                           (f init (first coll))\n                           (rest coll))))\n       (cons init nil))))","problem":60,"user":"52cc582ae4b07d0d72b27362"},{"problem":60,"code":"(fn red\n  ([f coll] (lazy-seq\n    (if-let [s (seq coll)]\n      (red f (first s) (rest s))\n      (list (f)))))\n  ([f init coll]\n    (cons init (lazy-seq\n                 (when-let [s (seq coll)]\n                 (red f (f init (first s)) (rest s)))))))","user":"5b772ad7e4b047b03b2036e8"},{"problem":60,"code":"(fn sol\n  ([reducer lst]\n  (map-indexed (fn [index item] (reduce reducer (take (inc index) lst))) lst))\n  ([reducer init lst]\n  (concat\n    (vector init)\n    (map-indexed\n      (fn [index item]\n        (reduce\n          reducer\n          init\n          (take (inc index) lst)))\n      lst))))","user":"578b140be4b0ebec4cfb7545"},{"code":"(fn red\n  ([f xs] (red f (first xs) (rest xs)))\n  ([f x xs]\n    (lazy-seq\n      (if (seq xs)\n        (cons x (red f (f x (first xs)) (rest xs)))\n        (list x)))))","problem":60,"user":"504e13fce4b078edc5f593bc"},{"code":"(fn !! \n            ([op x xs] \n             (cons x (when (seq xs) (lazy-seq (!! op (op x (first xs)) (rest xs)))))) \n            ([op xs] \n             (!! op (first xs) (rest xs))) \n            )","problem":60,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":60,"code":"(fn fooreduce\n  ([f coll]\n    ((fn helper [prev left]\n      (let [[l & r] left]\n        (if-not l\n          [prev]\n          (cons\n            prev\n            (lazy-seq (helper (f prev l) r))))))\n      (f (first coll))\n      (rest coll)))\n  ([f val coll]\n    ((fn helper [prev left]\n      (let [[l & r] left]\n        (if-not l\n          [prev]\n          (cons\n            prev\n            (lazy-seq (helper (f prev l) r))))))\n      val\n      coll)))","user":"56fc0601e4b07572ad1a88db"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (when-let [s (seq coll)]\n           (lazy-seq (my-reductions f (f init (first s)) (rest s)))))))","user":"51ae350fe4b09397d5109790"},{"code":"(fn reductions2\n  ([f coll]\n   (when-let [s (seq coll)]\n     (reductions2 f (first s) (next s))))\n  ([f init coll]\n   (cons init\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (reductions2 f (f init (first s)) (next s)))))))","problem":60,"user":"51a97f7ae4b08d8ec191b827"},{"code":"(fn p60\n  ([f ls0] (p60 f 0 [] ls0))\n  ([f st ls0] (cons st (p60 f st [] ls0)))\n  ([f st ls1 ls0]\n     (if (empty? ls0) nil\n         (let [arg (conj ls1 (first ls0))]\n           (lazy-seq (cons (reduce f st arg) (p60 f st arg (next ls0))))))))","problem":60,"user":"5272669de4b03e8d9a4a742e"},{"code":"(letfn \n    [\n     (rsx [op  col ]\n          (if \n            (not (empty? (rest col)))\n            (let [fi (first col)\n                  sd (second col)\n                  firstres (op fi sd)\n                  remains (rest (rest col))]\n              (lazy-seq (cons firstres (rsx op (cons firstres remains)))))))\n     ] \n    (fn srf  \n      ([op col] \n        (rsx op (cons (first col) col)))\n      ([op fst col]\n        (cons fst (rsx op (cons fst col))))))","problem":60,"user":"50956c2be4b087f34d351ab2"},{"problem":60,"code":"(fn red\n  ([f xs] (red f (first xs) (rest xs)))\n  ([f i xs]\n     (cons i\n       (if (seq xs)\n         (lazy-seq\n          \t(red f (f i (first xs)) (rest xs)))))))","user":"54448e84e4b032a45b869393"},{"code":"(fn inject\n\t([f [l1 & lr]]\n\t\t(inject f l1 lr)\n\t)\n\t([f v [h & t :as l]]\n\t\t(if (empty? l)\n\t\t\t[v]\n\t\t\t(let [fvh (f v h)] (cons v (lazy-seq (inject f fvh t))))\n\t\t)\n\t)\n)","problem":60,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn foo\n  ([op coll] (foo op (op 0 (first coll)) (rest coll)))\n  ([op init coll]\n   (if (empty? coll)\n     [init]\n  (lazy-seq (cons init\n                  (foo op (op init (first coll)) (rest coll)))))))","problem":60,"user":"5301157ae4b0d8b024fd3717"},{"problem":60,"code":"(fn myreductions\n  ([f xs] (myreductions f (first xs) (rest xs)))\n  ([f init xs]\n   (if (empty? xs) (list init)\n     (let [res (f init (first xs))]\n       (cons init (lazy-seq (myreductions f res (rest xs))))))\n       ))","user":"60606490e4b03746e80ebf67"},{"code":"(fn myred\n     ([f coll]\n        (lazy-seq\n         (if-let [s (seq coll)]\n           (myred f (first s) (rest s))\n           (list (f)))))\n     ([f init coll]\n        (cons init\n              (lazy-seq\n               (when-let [s (seq coll)]\n                 (myred f (f init (first s)) (rest s)))))))","problem":60,"user":"502a5e59e4b09e8f859a9fbc"},{"problem":60,"code":"(fn r*\n  ([op xs] (r* op (first xs) (rest xs)))\n  ([op init xs]\n   (if (seq xs)\n     (cons init (lazy-seq (r* op (op init (first xs)) (rest xs))))\n     (lazy-seq [init]))))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":60,"code":"(fn my-reductions\n  ([fun coll] (my-reductions fun (first coll) (rest coll)))\n  ([fun init coll] (cons init (lazy-seq (when (seq coll) (my-reductions fun (fun init (first coll)) (rest coll)))))))","user":"575b3e9be4b02ea11479935b"},{"problem":60,"code":"(fn f ([op x] (f op (first x) (rest x)))\n  ([op y x]\n   (lazy-seq\n    (if (empty? x) (list y)\n     (cons y (f op (op y (first x)) (rest x)))))))","user":"543d5c61e4b032a45b86934d"},{"problem":60,"code":"(fn myreductions\n  ([f [initial & s]]\n   (myreductions f initial s))\n  ([f initial s]\n   (cond\n     (nil? initial) (list (f))\n     (or (nil? s) (empty? s)) (list initial)\n     :else (lazy-seq (cons initial (myreductions f (f initial (first s)) (rest s)))))))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":60,"code":"(fn red\n    ([rf xs]\n     (lazy-seq (red rf (first xs) (rest xs))))\n    ([rf x1 xs]\n     (cons x1 (when (seq xs)\n                (lazy-seq (red rf (rf x1 (first xs)) (rest xs)))))))","user":"5eb1c786e4b00a66d4a95201"},{"code":"(fn my-reductions \n  ([f coll] \n    (my-reductions f (first coll) (rest coll)))\n  ([f val coll]\n      (if (empty? coll)\n        (list val)\n        (cons val (lazy-seq (my-reductions f (f val (first coll)) (rest coll)))))))","problem":60,"user":"50aab057e4b056ee0193586b"},{"code":"(fn red\n  ([f [car & cdr]] (red f car cdr))\n  ([f init [car & cdr]]\n    (lazy-seq (cons\n      init\n      (if car (red f (f init car) cdr))))))","problem":60,"user":"4faa9593e4b081705acca1f9"},{"problem":60,"code":"(fn reds [op x & targs]\n  (let [acc (if targs x (first x))\n        lst (if targs (first targs) (rest x))]\n    ((fn doit [op acc lst]\n       (if (empty? lst)\n         (list acc)\n         (let [newacc (op acc (first lst))]\n           (cons acc\n                 (lazy-seq (doit op newacc (rest lst))))))) op acc lst)))","user":"558df2ebe4b0277789237649"},{"problem":60,"code":"(fn test\n     ([f args]\n      (lazy-seq (test f (first args) (rest args))))\n     ([f init args]\n      (if (empty? args)\n        (list init)\n        (cons init (lazy-seq (test f (f init (first args)) (rest args))))))\n     )","user":"5f9c4113e4b0715f5002d821"},{"code":"(fn testreduce ([op s] (testreduce op (first s) (next s))) ([op v s] (if s (cons v (lazy-seq (testreduce op (op v (first s)) (next s)))) (cons v s))))","problem":60,"user":"5138d08be4b0a5db03d727db"},{"problem":60,"code":"(fn my-lazy-reductions\n  ([f xs] (my-lazy-reductions f (first xs) (rest xs)))\n  ([f val xs] (lazy-seq (if-let [x (first xs)]\n                          (cons val (my-lazy-reductions f (f val x) (rest xs)))\n                          [val]))))","user":"50aa777fe4b056ee01935866"},{"code":"(fn reduce-star\n  ([f x0 xs] (reduce-star f (cons x0 xs)))\n  ([f xs] \n    (map-indexed (fn [i x] (reduce f (take (inc i) xs))) \n                 xs)))","problem":60,"user":"4fe83efbe4b07c9f6fd12c3b"},{"code":"(fn reds ([fun coll] (reds fun (first coll) (rest coll))) ([fun init coll] (cons init (lazy-seq (let [init (fun init (first coll)) coll (rest coll)] (if (empty? coll) [init] (reds fun init coll)))))))","problem":60,"user":"5137c3b0e4b0509a8b470482"},{"problem":60,"code":"(fn\n  \n  ([f in c]\n   ((fn r\n  [f in c i]\n   (lazy-seq \n    (when (<= i (count c))\n      (cons (reduce f in (take i c)) (r f in c (inc i)) )))) f in c 0)\n   )\n  \n  ([f c]\n   ((fn m [f c i]\n   (lazy-seq \n    (cons (reduce f (take i c)) (m f c (inc i)) ))) f c 1)\n   )\n  \n  )","user":"5772ddb0e4b0979f896515d4"},{"problem":60,"code":"(fn reduct\n  ([f [x & xs]] (reduct f x xs))\n  ([f x [y & xs]] \n   (cons x (if y (lazy-seq (reduct f (f x y) xs))))))","user":"552a793ee4b0ffed3738f955"},{"problem":60,"code":"(fn reductionss\n ([f init args]\n  (loop [acc [init]\n         args args]\n    (if (or (empty? args) ;cheat\n            (> (count acc) 100))\n      acc\n      (recur (conj acc \n                   (f (last acc)\n                      (first args)))\n             (rest args)))))\n ([f args] \n     (reductionss f \n                  (first args)\n                  (rest args))))\n\n#_(fn red\n ([f init arg]\n  (-> (fn [colacc el]\n        (let [res (f (last colacc)\n                     el)]\n          (conj colacc res)))\n      (reduce [init] arg)))\n  ([f args] (red f (f) args)))","user":"55d8eed3e4b0e31453f64ac3"},{"problem":60,"code":"(fn -reduction\n           ([f s] (-reduction f (first s) (next s)))\n           ([f d s]\n            #_(let [m (atom [d])]\n                (reduce (fn [a c] (do (swap! m conj (f a c)) (f a c))) d s)\n                @m)\n            (cons d\n                  (lazy-seq \n                   (when (seq s) (-reduction f (f d (first s)) (next s)))))\n            ))","user":"5fa80c01e4b0fa27300f3de2"},{"problem":60,"code":"(fn red \n                     ([f init lazycoll]\n                      (if (empty? lazycoll)\n                        [init]\n                        (let [val (f init (first lazycoll))]\n                          (lazy-seq (cons init (red f val (rest lazycoll)))))))\n                     ([f lazycoll]\n                      (red f (first lazycoll) (rest lazycoll))))","user":"5a813b90e4b00b71e582a065"},{"problem":60,"code":"(fn eka\n    ([op xs]\n        (eka op (first xs) (rest xs))\n      )\n    ([op v xs]\n     (if (empty? xs)\n       [v]\n       (lazy-seq\n         (let [v2 (op v (first xs))]\n           (cons v (eka op v2 (rest xs)))))\n       )\n      )\n    )","user":"596d630ae4b069c0a1a19846"},{"problem":60,"code":"(fn m\n   ([f c]\n    (m f (first c) (rest c)))\n   ([f i c]\n    (cons i\n\t\t(lazy-seq \n\t\t\t(if (seq c)\n                (m f (f i (first c)) (rest c)))))))","user":"5405885ee4b0addc1aec6668"},{"code":"(fn reds\n  ([f vs]\n    (reds f (first vs) (rest vs)))\n  ([f v vs]\n    (cons v (when (seq vs) (lazy-seq (reds f (f v (first vs)) (rest vs)))))))","problem":60,"user":"4f4fbed7e4b03ad3f0c10ce8"},{"code":"(fn r [f & xs]\n         (let [rv (fn rv[f v vs]\n                    (if (empty? vs)\n                         (list v)\n                         (cons v (lazy-seq (rv f (f v (first vs)) (rest vs))))))]\n    (if (= 1 (count xs))\n      (rv f (first (first xs)) (rest (first xs)))\n      (rv f (first xs) (second xs)))))","problem":60,"user":"51780bfce4b0f89a8f53839c"},{"code":"(fn t\n  ([f coll] (t f (first coll) (rest coll)))\n  ([f x coll]\n    (cons x (t f x coll true)))\n  ([f x coll _]\n    (let [[y & zs] coll\n          applied (f x y)]\n      (if (nil? zs)\n        (list applied)\n        (lazy-seq\n          (cons applied (t f applied zs true)))))))","problem":60,"user":"4dafa380edd6309eace4d17c"},{"problem":60,"code":"(fn f60\n  ([f coll]\n    (map #(reduce f (take % coll)) (map #(inc %2) coll (range))))\n  ([f coll-1 coll-2]\n   (map #(reduce f (take % (cons coll-1 coll-2))) (map #(inc %2) (cons coll-1 coll-2) (range)))))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":60,"code":"(fn rred \n  ([f in] (rred f (first in) (rest in)))\n  ([f res coll] \n   (lazy-seq\n    (if (empty? coll)\n     (list res)\n     (cons res \n           (rred f \n                 (f res (first coll))\n                 (rest coll)\n                 ))))))","user":"4f88ae35e4b033992c121c6d"},{"code":"(fn reductions*\n  ([f [head & tail]] (reductions* f head tail))\n  ([f init [head & tail :as coll]]\n     (lazy-seq\n      (cons init\n            (when (seq coll)\n              (reductions* f (f init head) tail))))))","problem":60,"user":"4fc43a8ee4b081705acca346"},{"problem":60,"code":"(fn my-redns\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (my-redns f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (my-redns f (f init (first s)) (rest s)))))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":60,"code":"(fn p60\n  ([f [next & left]]\n   (p60 f next left))\n  ([f prev [next & left]]\n   (lazy-seq (cons prev\n                   (when next\n                     (p60 f (f prev next) left))))))","user":"5687b6abe4b0dcc4269f4061"},{"problem":60,"code":"(fn myred \n  ([f xs]\n    (myred f (first xs) (rest xs)))\n  ([f val xs]\n    (if (empty? xs)\n      [val]\n      (lazy-seq (cons val (myred f (f val (first xs)) (rest xs)))))))","user":"54b13a40e4b09f271ff37d1b"},{"problem":60,"code":"(fn my-reduce \n  ([f s] \n   (my-reduce f (first s) (rest s)))\n  ([f fst s] \n   (lazy-seq \n     (if (seq s)\n       (cons fst (my-reduce f (f fst (first s)) (rest s)))\n       [fst]))))","user":"51316a63e4b0431ba07e7feb"},{"problem":60,"code":"(fn my-red\n  ([f coll]\n    (my-red f (first coll) (rest coll)))\n  ([f init coll]\n   (map\n      :x\n      (take-while\n        (complement nil?)\n        (iterate\n          (fn [{:keys [x coll]}]\n            (if (seq coll)\n              {:x (f x (first coll)) :coll (rest coll)}\n              nil))\n          {:x init :coll coll})))))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":60,"code":"(fn r \n   ([f s] (r f (first s) (rest s)))\n   ([f i s] (lazy-seq (cons i\n                            (if (empty? s) [] (r f (f i (first s)) (rest s)))))))","user":"550aeddae4b06e50f9beb135"},{"problem":60,"code":"(fn redux\n  ([f coll]\n     (lazy-seq (redux f (first coll) (rest coll))))\n  ([f init coll]\n   (cons init (lazy-seq\n              (when-let [s (seq coll)]\n                (redux f (f init (first s)) (rest s)))))))","user":"593db05ae4b069cdc2982bab"},{"problem":60,"code":"(fn reductions*\n  ([f [x & ys]] (reductions* f x ys))\n  ([f x ys]\n   (if (empty? ys) [x]\n     (lazy-seq (cons x (reductions* f (f x (first ys)) (rest ys)))))))","user":"553e0b70e4b0a04f792994e8"},{"code":"(fn reduction2\r\n  ([f [x1 & xs] ] (reduction2 f x1 xs) )\r\n  ([f x [y1 & ys]]\r\n     (lazy-seq (cons x (if y1\r\n                         (reduction2 f (f x y1) ys))))))","problem":60,"user":"4fb23582e4b081705acca28a"},{"problem":60,"code":";(vec (\n      (fn reds\n        ([f args] (reds f (first args) (rest args)))\n        ([f result args]\n            (if (empty? args) (list result)\n              (lazy-seq (cons result (reds f (f result (first args)) (rest args)))))))\n;      conj [1] [2 3 4]))","user":"573632b7e4b0cd1946bd102f"},{"problem":60,"code":"(fn reds ([f coll] (lazy-seq (if-let [s (seq coll)] (reds f (first s) (next s))))) ([f init coll] (cons init (lazy-seq (when-let [s (seq coll)] (reds f (f init (first s)) (next s)))))))","user":"58987ee9e4b00487982d52d2"},{"problem":60,"code":"(fn rn\n  ([f vals]\n     (rn f (first vals) (rest vals)))\n  ([f val vals]\n   (let [[h & t] vals\n         new-val (f val h)]\n     (lazy-seq\n       (cons val\n             (if (empty? t)\n               [new-val]\n               (rn f new-val t)))))))","user":"55815973e4b05c286339e0f6"},{"problem":60,"code":"(fn seq-reductions                                                                                                                                                                                                                       \n  ([f xs] (seq-reductions f (first xs) (rest xs)))                                                                                                                                                                                         \n  ([f a xs]                                                                                                                                                                                                                                \n   (lazy-seq                                                                                                                                                                                                                               \n    (let [[b & others] xs                                                                                                                                                                                                                  \n          comb (f a b)]                                                                                                                                                                                                                    \n      (if (empty? others)                                                                                                                                                                                                                  \n        (cons a [comb])                                                                                                                                                                                                                    \n        (cons a (seq-reductions f comb others)))))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":60,"code":"(fn rds\n  ([f [x & xs]] (rds f x xs))\n  ([f acc [x & xs :as coll]]\n   (lazy-seq\n     (cons acc\n           (if (seq coll)\n             (rds f (f acc x) xs))))))","user":"5630ce72e4b0bfe05bf11786"},{"problem":60,"code":"(fn reductions-ms\n  ([f remaining] (reductions-ms f (first remaining) (rest remaining)))\n  ([f prevval remaining]\n   (if (first remaining)\n     (cons prevval (lazy-seq\n                    (reductions-ms f (f prevval\n                                        (first remaining)) (next remaining))))\n     [prevval])))","user":"561ca6ebe4b064ca9f4b169c"},{"problem":60,"code":"(fn redux\n ([f coll]\n  (redux f \n         (first coll)\n         (rest coll)))\n ([f val coll]\n  (lazy-seq\n   (if-not coll (list val)\n    (cons val\n     (redux f \n           (f val (first coll))\n           (next coll)))))))","user":"55d2dd27e4b0e31453f64a5b"},{"problem":60,"code":"(fn r\n  ([f [a & b]] (r f a b))\n  ([f a b] (cons a (lazy-seq (if (nil? b)\n                               []\n                               (r f (f a (first b)) (next b)))))))","user":"543366dde4b0b6b47310fcdf"},{"problem":60,"code":"(fn inter-lazy-reductions\n  ([f coll] (inter-lazy-reductions f (first coll) (rest coll)))\n  ([f ini coll]\n   (if (not-empty coll)\n       (cons ini\n             (lazy-seq\n               (inter-lazy-reductions f (f ini (first coll)) (rest coll))))\n       (list ini))))","user":"5471f0f3e4b094393f72dd6f"},{"problem":60,"code":"(fn my-reductions\n  ([f col]\n   (if (empty? col)\n     (f)\n     (my-reductions f (first col) (rest col))))\n  ([f val col]\n   (if (empty? col)\n     (list val)\n     (cons val (lazy-seq (my-reductions f (f val (first col)) (rest col))))))\n  )","user":"5e1c3e6ee4b0dc9594008530"},{"code":"(letfn [\n  (r* [f x s]\n    (lazy-seq\n              (when-not (empty? s)\n                (let [n (f x (first s))]\n                  (cons n (r* f n (rest s)))))))\n  (r\n          ([f s] (r* f (first s) s))\n          ([f x s] (cons x (r* f x s))))]\n  r)","problem":60,"user":"4f06dcad535dcb61093f6c16"},{"code":"(fn reds\r\n  ([f val coll]\r\n\t\t(if (empty? coll)\r\n\t\t\t[val]\r\n\t\t\t(lazy-seq \r\n\t\t\t\t(cons val (reds f (f val (first coll)) (rest coll))))))\r\n\t([f coll] (next (reds f (first coll) coll))))","problem":60,"user":"4e8a0c82535d3e98b802328d"},{"problem":60,"code":"(fn reductions'\n  ([f [x & xs]]\n   (reductions' f (or x (f)) xs))\n  ([f init [x & xs]]\n   (lazy-seq\n     (cons init (when x (reductions' f (f init x) xs))))))","user":"5f300f28e4b033932238a682"},{"problem":60,"code":"(fn rreductions\n    ([f xs]\n      (rreductions\n        f\n        (first xs)\n        (rest xs)\n      )\n    )\n\n    ([f y xs]\n      (if\n        (empty? xs)\n        [y]\n        (lazy-seq\n          (cons\n            y\n            (rreductions\n              f\n              (f\n                y\n                (first xs)\n              )\n              (rest xs)\n            )\n          )\n        )\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn reductions2\n  ([f xs]\n    (reductions2 f (first xs) (rest xs)))\n  ([f x xs]\n    (lazy-seq\n      (cons x (when (seq xs)\n                (reductions2 f (f x (first xs)) (rest xs)))))))","problem":60,"user":"5017d9a9e4b0adbf98d88a3f"},{"problem":60,"code":"(fn redctns\n  ([fun coll] (redctns fun (first coll) (rest coll)))\n  ([fun start coll] ((fn helper [p c]\n                       (if (empty? c)\n                         [p]\n                         (cons p\n                               (lazy-seq (helper (fun p (first c))\n                                                 (rest c))))))\n                     start coll)))","user":"53acaf1fe4b047364c04445f"},{"problem":60,"code":"(fn f\n  ([op col] (f op (first col) (rest col)))\n  ([op acc col]\n   (if (empty? col)\n     [acc]\n     (lazy-seq (cons acc (f op (op acc (first col)) (rest col)))))))","user":"5da7176ae4b000c986472c13"},{"code":"(fn re \n  ([op xs] (re op (first xs) (rest xs)))\n  ([op start-value xs]\n    (if (empty? xs) \n      (list start-value)\n      (cons start-value \n            (lazy-seq (re op \n                          (op start-value (first xs)) \n                          (rest xs)))))))","problem":60,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":60,"code":"(fn rd\n  ([fun c]\n  \t(rd fun (fun (first c)) (rest c)))\n  ([fun init c]\n   (lazy-cat [init] (if (empty? c) c (rd fun (fun init (first c)) (rest c))))))","user":"53fe1b42e4b0de5c418485f1"},{"problem":60,"code":"(fn rds\n  ([f coll]\n      (when (seq coll) (rds f (first coll) (rest coll))))\n  ([f z coll]\n      (lazy-seq (cons z (when (seq coll) (rds f (f z (first coll)) (rest coll)))))))","user":"4fd4bddce4b0d4de60cee36e"},{"problem":60,"code":"(fn [o & s]\n  (if (= (count s) 1)\n  \t((fn f [n]\n       (lazy-cat [(reduce o (take n (first s)))]\n                 (f (inc n)))) 1)\n    ((fn f [n]\n       (if (> n (count (second s)))\n         '()\n         (lazy-cat [(reduce o (first s) (take n (second s)))]\n                   (f (inc n))))) 0)))","user":"51ab70c3e4b04e3dc0c27b33"},{"code":"(fn rdctns\n  ([f [h & t]] (rdctns f h t))\n  ([f acc [h & t]] (if h\n                  (cons acc (lazy-seq (rdctns f (f acc h) t)))\n                  [acc]))\n  )","problem":60,"user":"53307da1e4b019098a6f8b5e"},{"problem":60,"code":"(fn reductions-\n  ([f coll]\n    (reductions- f (first coll) (rest coll)))\n  ([f r coll]\n   (lazy-seq (if (empty? coll)\n               (list r)\n               (cons r (reductions- f\n                                    (f r (first coll))\n                                    (rest coll)))))))","user":"565654dae4b0f9d632dd849f"},{"problem":60,"code":"(fn reduc\n  ([f s] (reduc f (first s) (rest s)))\n  ([f i s]\n   (if (empty? s) [i] (lazy-seq (cons i (reduc f (f i (first s)) (rest s)))))))","user":"5796d3ebe4b039eba2ecb0ee"},{"code":"(fn reduc\n  ([f x] (reduc f (first x) (rest x)))\n  ([f x y]\n    (lazy-seq\n      (if (empty? y)\n        (vector x)\n        (cons x (reduc\n                  f\n                  (f x (first y))\n                  (rest y)))))))","problem":60,"user":"50d3b03fe4b030b634c368b9"},{"code":"(fn red ([f c] (red f (first c) (rest c))) ([f x c] (if (empty? (rest c)) [x (f x (first c))] (cons x (lazy-seq (red f (f x (first c)) (rest c)))))))","problem":60,"user":"52c1f404e4b07a9af5792370"},{"problem":60,"code":"(fn my-reductions \n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init \n    (lazy-seq (when-let [s (seq coll)]\n                 (my-reductions f (f init (first s)) (rest s)))))))","user":"5666500ee4b0e91d5f5c566d"},{"problem":60,"code":"(fn r [f & args]\n  (if\n    (= (count args) 1)\n    (r f (first (first args)) (rest (first args)))\n    (let [[v l] args]\n      (if (empty? l)\n        [v]\n        (cons v\n          (lazy-seq\n            (r\n              f\n              (f v (first l))\n              (rest l))))))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":60,"code":"(fn reducer\n  ([f c]\n    (reducer f (first c) (rest c)))\n  ([f init c]\n    ;do stuff here.\n    (lazy-seq\n      (if (seq c)\n        (let [curr (f init (first c))]\n          (cons init (reducer f curr (rest c))))\n        [init]))))","user":"55f8fd70e4b03cbcff9738bc"},{"code":"(fn sr\n  ([f init x] (sr f (cons init x)))\n  ([f x] (map (fn [n _] (reduce f (take (inc n) x))) (range) x)))","problem":60,"user":"500cb910e4b05f7c30cfa698"},{"code":"(fn r\n  ([f xs] (r f (first xs) (rest xs)))\n  ([f x xs]\n     (let [y (first xs)]\n      (if (empty? xs)\n        [x]\n        (lazy-seq (cons x\n                        (r f (f x y) (rest xs)))) ))))","problem":60,"user":"4e720985535d5021c1a89655"},{"code":"(fn my-reductions\n  ([op initial [x & xs]]\n   (cons initial\n         (lazy-seq (when x\n                     (my-reductions op\n                                    (op initial x)\n                                    xs)))))\n  ([op a-seq]\n   (my-reductions op \n                  (first a-seq)\n\t\t\t\t  (rest a-seq))))","problem":60,"user":"52890634e4b0239c8a67ae5e"},{"problem":60,"code":"(fn r\n  ([f xs] (r f (first xs) (rest xs)))\n  ([f v xs]\n   (lazy-seq\n    (cons v\n          (if (empty? xs) [] \n            (r f (f v (first xs)) (rest xs)))))))","user":"58637221e4b0f14aab7c881d"},{"problem":60,"code":"(fn my-reductions\n  ([f [a & coll]]\n   (my-reductions f a coll))\n  ([f val [a & coll :as all]]\n   (lazy-seq\n    (if all\n      (cons val\n            (my-reductions f (f val a) coll))\n      `(~val)))))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"(fn w\n  ([f v [s & r]]\n    (lazy-seq\n      (if s\n        (cons v (w f (f v s) r))\n        [v])))\n  ([f [s & r]] (w f s r)))","problem":60,"user":"4f9597e0e4b0dcca54ed6cd4"},{"problem":60,"code":"(fn my-reductions \n  ([func sequence] (my-reductions func (first sequence) (rest sequence)))\n  ([func start sequence]\n    (lazy-seq\n      (let [next-value (first sequence)]\n        (if (nil? next-value)\n          [start]\n          (cons start (my-reductions func (func start next-value) (rest sequence))))))))","user":"5773f3a9e4b0979f896515f2"},{"code":"(fn my-reductions\n  ([f coll]\n   (letfn [(red-with-accu [f accu coll]\n             (if (seq coll)\n               (let [new-accu (f accu (first coll))]\n                 (lazy-seq\n                   (cons new-accu (red-with-accu f new-accu (rest coll)))))\n               ()))]\n     (cons (first coll) (red-with-accu f (first coll) (rest coll)))))\n  ([f init coll]\n   (my-reductions f (cons init coll))))","problem":60,"user":"50a7ef7fe4b090657f4a5ce0"},{"code":"(fn reduc\n        ([f init b]\n           (lazy-seq\n            (cons init\n                  (if (empty? b)\n                    nil\n                    (reduc f (f init (first b)) (rest b))))))\n        ([f b] (reduc f (first b) (rest b))))","problem":60,"user":"4f031eac535dcb61093f6a67"},{"problem":60,"code":"(fn sr\n  ([op xs] (sr op (op (first xs)) (rest xs)))\n  ([op val xs]\n    ;;(println (str \"val:\" val))\n    ;;(println xs)\n  \t(lazy-seq\n      (cons val\n       (if (empty? xs)\n           xs\n           (sr op (op val (first xs)) (rest xs)))))))","user":"559b55d6e4b066d22e731f54"},{"problem":60,"code":"(fn red\n  ([f col] (red f (first col) (rest col)))\n  ([f acc col]\n    (if (empty? col)\n      (if (nil? acc) (seq [(f)]) (seq [acc]))\n      (cons acc (lazy-seq (red f (f acc (first col)) (rest col)))))))","user":"5396c94be4b0b51d73faaee3"},{"code":"(fn rd\n       ([f a]\n        (rd f (first a) (rest a)))\n       ([f a b]\n        (lazy-seq\n           (if (not (empty? b)) \n             (let [r (f a (first b))]\n                (cons a (rd f r (rest b)))) [a]))))","problem":60,"user":"51780f88e4b03d69594194c9"},{"problem":60,"code":"(fn intermediates\n  ([f coll]\n   (intermediates f (first coll) (rest coll)))\n  ([f initial coll]\n   (cons\n     initial\n     (lazy-seq\n       (if (empty? coll)\n         nil\n         (intermediates f (apply f (list initial (first coll))) (rest coll)))))))","user":"55842c7ee4b05c286339e11d"},{"problem":60,"code":"(fn reductions*\n   ([func coll]\n    (reductions* func (first coll) (rest coll)))\n   ([func init coll]\n    (lazy-seq (cons init (when (seq coll)\n                           (reductions* func\n                                        (func init (first coll))\n                                        (rest coll)))))))","user":"554bd33ce4b0a04f7929959a"},{"code":"(fn my-reductions\n  ([fun val acoll]\n    (if (empty? acoll)\n      [val]\n      (lazy-seq (cons val\n                  (my-reductions fun (fun val (first acoll)) (rest acoll))))\n      ))\n  ([fun acoll]\n    (my-reductions fun (first acoll) (rest acoll))\n    )\n  )","problem":60,"user":"5094057fe4b097f48cc38593"},{"code":"(fn r\r\n  ([f [x & coll]] (r f x coll))\r\n  ([f acc coll]\r\n     (lazy-seq\r\n      (if-let [[x & coll] (seq coll)]\r\n        (cons acc\r\n              (r f (f acc x) coll))\r\n        [acc]))))","problem":60,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq (if (empty? coll)\n               (list init)\n               (let [v (f init (first coll))]\n                 (cons init (red f v (rest coll))))))))","user":"56669819e4b0e91d5f5c5674"},{"code":"(fn my-reductions\n  ([f coll]\n     (lazy-seq\n       (if (empty? coll)\n         (list (f))\n         (my-reductions f (first coll) (rest coll)))))\n  ([f sum coll]\n     (cons sum\n           (lazy-seq\n             (if (not (empty? coll))\n               (my-reductions f (f sum (first coll)) (rest coll)))))))","problem":60,"user":"50052fd0e4b0678c553fc45d"},{"problem":60,"code":"(fn myreduce\n  ([f coll] (myreduce f (first coll) (rest coll)))\n  ([f val coll]\n   (lazy-seq\n    (if (empty? coll)\n      [val]\n      (cons val (myreduce f (f val (first coll)) (rest coll)))))))","user":"5d5c2730e4b09db18d4482ea"},{"code":"(fn my-reduction\n  ([f coll] (my-reduction f (first coll) (rest coll)))\n  ([f val coll]\n     (lazy-seq\n      (let [s (seq coll)]\n        (if (empty? coll)\n          (cons val '())\n          (cons val (my-reduction f (f val (first coll)) (rest coll))))))))","problem":60,"user":"52f8f4d1e4b047fd55836fde"},{"problem":60,"code":"(fn my-red\n  ([f xs]\n    (my-red f (first xs) (rest xs)))\n  ([f x1 xs]\n   (if (nil? (first xs))\n     (list x1)\n     (lazy-seq\n       (cons x1 (my-red f (f x1 (first xs)) (rest xs)))))))","user":"56bb652ae4b0f26550335953"},{"problem":60,"code":"(fn p60\n  ([f coll]\n   (p60 f (first coll) (next coll)))\n  ([f acc coll]\n   (if (nil? coll)\n     [acc]\n     (cons acc\n           (lazy-seq (p60 f\n                          (f acc (first coll))\n                          (next coll) ))))))","user":"56441634e4b0018b46ad8c08"},{"problem":60,"code":"(fn my-reduce\n \n  ([op input] (my-reduce op (first input) (rest input)))\n \n  ([op result input]\n \n  (lazy-seq\n    (if (empty? input)\n      (list result)\n      (cons result\n            (my-reduce op\n                 (op result (first input))\n                 (rest input)))))))","user":"55ddc5cbe4b050e68259b3d0"},{"code":"(fn my-reductions\r\n  ([f xs]\r\n     (my-reductions f (first xs) (next xs)))\r\n  ([f i xs]\r\n     (conj\r\n      ((fn my-reductions-h [f i xs]\r\n         (if (seq xs)\r\n           (lazy-seq (cons (f i (first xs)) (my-reductions-h f (f i (first xs)) (next xs))))\r\n           ())) f i xs)\r\n      i)))","problem":60,"user":"4dd023dd535d5973398f92ad"},{"problem":60,"code":"(fn red\n ([f coll] (red f (f (first coll)) (rest coll)))\n ([f a coll]\n  (lazy-seq\n   (if (seq coll)\n    (cons a (red f (f a (first coll)) (rest coll)))\n    [a]))))","user":"5a4caa20e4b05d388ecb6b94"},{"problem":60,"code":"(fn seq-reduce-finite\n   ([f xs] (seq-reduce-finite f (first xs) (rest xs) (first xs)))\n   ([f arg xs] (seq-reduce-finite f arg xs arg))\n   ([f arg xs acc]\n    (cons acc\n          (lazy-seq\n            (when-let [ss (seq xs)]\n              (seq-reduce-finite f arg (rest xs) (f acc (first xs))))))))","user":"57780e4fe4b0979f89651657"},{"code":"(fn rd\n  ([f [x & xs]] (rd f x xs))\n  ([f a [x & xs :as xss]]\n   (if-let [na (and (seq xss) (f a x))]\n     (cons a (lazy-seq (rd f na xs)))\n     (list a))\n   ))","problem":60,"user":"513fab65e4b00f13ea1bd891"},{"code":"(fn rctions\n   ([f coll] (rctions f (first coll) (rest coll)))\n   ([f init [x & rest]]\n    (lazy-seq\n      (if (nil? x)\n        (vector init)\n        (cons init\n              (rctions f\n                       (f init x)\n                       rest))))))","problem":60,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":60,"code":"(fn ff\n  ([f s]\n   (ff f (first s) (rest s)))\n  ([f i s]\n   (if (empty? s)\n     (list i)\n     (lazy-seq (cons i (ff f (f i (first s)) (rest s)))))))","user":"56df6846e4b0ca2494a095fa"},{"code":"(fn red\n  ([f coll]\n    (red f (first coll) (rest coll)))\n  ([f current coll] \n    (cons\n       current\n       (if (empty? coll)\n        []\n        (lazy-seq (red f (f current (first coll)) (rest coll)))))))","problem":60,"user":"53513d28e4b084c2834f4ae3"},{"problem":60,"code":"(fn r\n  ([f c] (r f (first c) (rest c)))\n  ([f a c]\n   (if (seq c)\n     (lazy-seq (cons a (r f (f a (first c)) (rest c))))\n     (list a))))","user":"56ef077ae4b04a395b9a0459"},{"code":"(fn red\n   ([f coll]\n      (red f (first coll) (rest coll)))\n   ([f x coll]\n      (if (empty? coll)\n        (cons x nil)\n        (lazy-seq\n         (cons x (red f (f x (first coll)) (rest coll)))))))","problem":60,"user":"506ef8c3e4b09350ab4199f4"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (my-reductions f (first s) (rest s))\n       (list (f)))))\n\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (my-reductions f (f init (first s)) (rest s)))))))","user":"57e79d8ee4b0bfb2137f5afe"},{"problem":60,"code":"(fn red \n  ([f [fst & rst]] (red f fst rst))\n  ([f agg [fst & rst]] (cons agg (lazy-seq \n                                  (if fst                                     \n                                     (red f (f agg fst) rst)))))\n  )","user":"6011b89ee4b074f607df66bc"},{"code":"(fn my-reductions\n  ([fold coll]\n     (my-reductions fold (fold (first coll))  (rest coll)))\n  ([fold prev coll]\n     (cons prev\n           (lazy-seq\n             (when-let [sq (seq coll)]\n               (let [new (fold prev (first sq))]\n                 (my-reductions fold new (rest sq))))))))","problem":60,"user":"527ccaf4e4b0757a1b17136d"},{"problem":60,"code":"(letfn [(rd\n  ([g s sq ](if (not ( empty? sq)) (\n              lazy-seq (concat  (vector (g s (first sq)))  (rd g (g s (first sq)) (rest sq))))))\n  ([g sq](rd g  (first sq) (rest sq))))]\n  (fn mrd ([g s sq] (cons s (rd g s sq))) ([g sq] (cons (first sq) (rd g sq)))))","user":"581a5fdbe4b0e114eb51a002"},{"code":"(fn r\n  ([f coll]\n     (lazy-seq\n        (r f (first coll) (rest coll))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (r f (f init (first s)) (rest s)))))))","problem":60,"user":"518c5236e4b087e178201de0"},{"problem":60,"code":"(fn sequence-reductions\n  ([f coll]\n    (sequence-reductions f (first coll) (rest coll)))\n  ([f val coll]\n    (cons\n      val\n      (when-not (empty? coll)\n        (lazy-seq\n          (sequence-reductions f\n            (f val (first coll))\n            (rest coll)))))))","user":"5481be5fe4b0e286459a1172"},{"problem":60,"code":"(fn my-reductions\n   ([f acc coll]\n    (lazy-seq\n     (if (empty? coll)\n       (list acc)\n       (cons acc (my-reductions f \n                                (f acc (first coll))\n                                (rest coll))))))\n   ([f coll]\n    (if (seq coll)\n      (my-reductions f (first coll) (rest coll))\n      (list))))","user":"539e717fe4b0ca733b974488"},{"problem":60,"code":"(fn reducer\n  ([op input] (reducer op (first input) (rest input)))\n  ([op result input]\n  (lazy-seq\n    (if (empty? input) (vector result)\n      (cons result\n            (reducer op\n                 (op result (first input))\n                 (rest input)))))))","user":"56f4cedce4b046a417f92063"},{"code":"(fn my-reductions\r\n  ([f coll]\r\n    (if (empty? coll)\r\n      (cons (f) nil)\r\n      (my-reductions f (first coll) (rest coll))))\r\n  ([f init coll]\r\n    (lazy-seq\r\n      (if (empty? coll)\r\n        (cons init '())\r\n        (cons init (my-reductions f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4df669d4535d08e6dec9fe35"},{"problem":60,"code":"(fn red ([fun coll] (red fun (first coll) (rest coll)))\n          ([fun coll1 coll2] (lazy-seq\n            (if (empty? coll2) (list coll1)\n              (cons coll1\n                (red fun (fun coll1 (first coll2)) (rest coll2)))))))","user":"56df62b3e4b0ca2494a095ef"},{"code":"(fn r\n  ([f c]\n   (r f (first c) (rest c)))\n  ([f x c]\n   (if (empty? c)\n     [x]\n     (cons x (lazy-seq (r f\n                          (f x (first c))\n                          (rest c)))))))","problem":60,"user":"53034738e4b0d8b024fd373e"},{"code":"(fn rdcs\n  ([f c]\n     (if (empty? c)\n       ()\n       (rdcs f (first c) (rest c))))\n  ([f v c]\n     (if (empty? c)\n       (seq [v])\n       (cons v (lazy-seq (rdcs f (f v (first c)) (rest c)))))))","problem":60,"user":"51672d15e4b079759a74a5e7"},{"problem":60,"code":"(fn r\n  ([f [x & xs]] (r f x xs))\n  ([f s [x & xs]]\n   (lazy-cat [s]\n     (if x\n       (r f (f s x) xs)))))","user":"511688d5e4b0b3e208dba05a"},{"problem":60,"code":"(fn red\n    ([f x list]\n     (if (not (empty? list))\n       (lazy-seq (cons x (red f (apply f [x (first list)]) (rest list)) ))\n       [x]\n      ) \n    )\n   ([f list]\n      (apply red [f (first list) (rest list)])\n    )\n   )","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":60,"code":"(fn _reduce\n  ([f arr]\n   (_reduce \n     f  \n     (first arr)     \n     (rest arr)))\n  ([f out arr]\n   (lazy-seq \n     (if \n       (empty? arr)\n       (list out)\n       (cons\n         out\n         (_reduce\n           f\n           (f out (first arr))\n           (rest arr)))))))","user":"59733c91e4b01722bebd4c9b"},{"code":"(fn my-reductions\n    ([fun i s]\n       (if (empty? s)\n         (list i)\n         (let [v (fun i (first s))]\n           (cons i (lazy-seq (my-reductions fun v (rest s)))))))\n    ([fun s]\n       (my-reductions fun (first s) (rest s))))","problem":60,"user":"53487737e4b084c2834f4a59"},{"code":"(fn my-reduce\n  ([op input] (my-reduce op (first input) (rest input)))\n  ([op result input]\n  (lazy-seq\n    (if (empty? input) (list result)\n      (cons result\n            (my-reduce op\n                 (op result (first input))\n                 (rest input)))))))","problem":60,"user":"51bdc609e4b0ff155d51d2b3"},{"problem":60,"code":"(fn redu \n\t([f a b]\n\t\t(if (empty? b)\n\t\t\t(cons a nil)\n\t\t\t(lazy-seq (cons a (redu f (f a (first b)) (rest b))))))\n\t([f a]\n\t\t(redu f (first a) (rest a))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":60,"code":"(fn r\n    ([f [init & xs]]\n     (r f init xs))\n    ([f memo [x & xs]]\n     (let [memo' (f memo x)]\n       (if (seq xs)\n         (cons memo (lazy-seq (r f memo' xs)))\n         (list memo memo')))))","user":"59fa241ee4b0ca45a743a358"},{"code":"(fn foo([f src]  (foo f nil src))\n   \t\t([f init src] [f init src] \n         \t(if (empty? src) (list init)\n              (if (nil? init)\n                (if (empty? (rest src))\n   \t  \t\t\t  (list (first src))\n                  (cons (first src) (lazy-seq (foo f (f (first src) (second src) ) (drop 2 src))))\n                )\n                (cons init (lazy-seq (foo f (f init (first src) ) (rest src))))\n              )\n         )\n  ))","problem":60,"user":"5274eb56e4b03e8d9a4a74bb"},{"code":"(fn f\n  ([x y z] \n    (map #(reduce x y (take %2 z)) \n         (cons y z) \n         (range)))\n([x [y & z]] (f x y z))\n  )","problem":60,"user":"503917a0e4b088a6a14ca763"},{"code":"(fn self\n    ([f init col] (self f (cons init col)))\n    ([f col]\n       (lazy-cat [(first col)] (map f (self f col) (rest col)))))","problem":60,"user":"5233ad08e4b07e3ee2be83ac"},{"code":"(fn rdctns [f & args]\r\n  (let [initial-val? (= (count args) 2)\r\n        x1 (if initial-val?\r\n              (first args)\r\n              (ffirst args))\r\n        xs (if initial-val?\r\n              (second args)\r\n              (rest (first args)))]\r\n    ((fn helper [y ys]\r\n      (if (seq ys)\r\n        (lazy-seq\r\n          (cons y (helper (f y (first ys)) \r\n                          (rest ys))))\r\n        (list y)))\r\n      x1 xs)))","problem":60,"user":"4ddbfb8a535d02782fcbea00"},{"problem":60,"code":"(fn red\n  ([f col]\n    (red f (first col) (rest col)))\n  ([f val col]\n    (cons val\n      (lazy-seq\n        (when (seq col)\n          (red f (f val (first col)) (rest col)))))))","user":"597dcb0ce4b0dbe32238d0a2"},{"problem":60,"code":"(fn my-reductions ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f r coll] (if (empty? coll) [r] (cons r (lazy-seq (my-reductions f (f r (first coll)) (rest coll)))))))","user":"5c7bc0a5e4b0fca0c1622865"},{"problem":60,"code":"(fn custom-reductions\n  ([f coll]\n   (let [lazy-colls (fn colls\n                      [n coll]\n                      (if (not (empty? (drop (dec n) coll)))\n                        (cons (take n coll)\n                              (lazy-seq (colls (inc n) coll)))))\n         colls (lazy-colls 1 coll)]\n     (map #(reduce f %) colls)))\n  ([f init coll]\n   (let [lazy-colls (fn colls\n                      [n coll]\n                      (if (not (empty? (drop (dec n) coll)))\n                        (cons (take n coll)\n                              (lazy-seq (colls (inc n) coll)))))\n         colls (lazy-colls 0 coll)]\n     (map #(reduce f init %) colls))))","user":"4fc524aae4b081705acca37e"},{"code":"(fn reduce'\n  ([f coll] (reduce' f (first coll) (rest coll)))\n  ([f memo coll]\n   (if-not (seq coll)\n      [memo]\n      (let [res (f memo (first coll))]\n        (cons memo (lazy-seq (reduce' f res (rest coll))))))))","problem":60,"user":"51195e77e4b055cfb310d499"},{"code":"(fn r\n  ([f xs] \n   (r f (first xs) (rest xs)))\n  ([f v xs]\n   (cons v (when (not (empty? xs))\n             (let [nv (f v (first xs))]\n               (lazy-seq (r f nv (rest xs))))))))","problem":60,"user":"5370f8ede4b0fc7073fd6ea2"},{"code":"(fn red\n  ([f xs]\n    (cons (first xs) \n      ((fn r [[x & rst]]\n          (when-not (empty? rst)\n            (let [y (f x (first rst))]\n              (lazy-seq (cons y\n                              (r (cons y (rest rst))))))))\n          xs)))\n  ([f v xs]\n    (red f (cons v xs))))","problem":60,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn reds\n  ([f s] (reds f (first s) (rest s)))\n  ([f a s]\n    (cons a\n          (lazy-seq\n            (when (seq s)\n                (reds f (f a (first s)) (rest s)))))))","problem":60,"user":"50f48298e4b004d364930527"},{"code":"(fn reds \n        ([f s] (lazy-seq (reds f (first s) (rest s))))\n        ([f val s]\n           (if (empty? s) [val]\n               (lazy-seq (cons val (reds f (f val (first s)) (rest s)))))))","problem":60,"user":"5294e44de4b02ebb4ef75016"},{"problem":60,"code":"(fn reductions-\n  ([f coll]\n   (when-let [s (seq coll)]\n     (reductions- f (first s) (rest s))))\n  ([f v coll]\n   (lazy-seq (cons v (when-let [s (seq coll)]\n                       (reductions- f (f v (first s)) (rest s)))))))","user":"54b42ea4e4b05787c3b1638b"},{"code":"(fn q\n  ([f [x & xs]]\n    (q f x xs))\n  ([f x xs]\n    \n    \n    (for [[i _]\n         (map-indexed vector (cons 0 xs))]\n      (reduce f x (take i xs)))))","problem":60,"user":"4e599577535d8a8b8723a29f"},{"problem":60,"code":"(fn r \n  ([f s c]\n     (if (seq c)\n       (lazy-seq\n        (cons\n         s\n         (r f (f s (first c)) (rest c))\n         )\n        )\n       [s])\n   )\n  ([f c]\n   (r f (first c) (rest c))\n   )\n  )","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     [init]\n     (cons init \n           (lazy-seq (my-reductions \n                      f \n                      (f init (first coll)) \n                      (rest coll)))))))","user":"53350264e4b0656e627bfd73"},{"code":"(fn prob60\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (prob60 f (first s) (rest s))\n        (list (f))\n        )\n      )\n     )\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (prob60 f (f init (first s)) (rest s)))))\n     )\n  )","problem":60,"user":"4f03f3b7535dcb61093f6b85"},{"code":"(fn red\n  ([f [x1 x2 & xs]] (concat [x1] (red f (f x1 x2) xs)))\n  ([f acc [x & xs]]\n   (lazy-seq\n     (let [acc' (f acc x)]\n       (cons acc (if (empty? xs) [acc'] (red f acc' xs)))))))","problem":60,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":60,"code":"(fn red\n           ([f coll] \n               (lazy-seq \n                           (when (seq coll) \n                             (red f (first coll) (rest coll))\n                             )))\n           ([f e coll]\n             (cons e\n                   (lazy-seq \n                     (when (seq coll)\n                       (red f (f e (first coll)) (rest coll))\n                       )))))","user":"55f8b32ae4b03cbcff9738ba"},{"code":"(fn p \n  ([f c]\n   (lazy-seq\n     (if-let [s (seq c)]\n     (p f (first s) (rest s)))))\n  ([f i c]\n   (cons i\n         (lazy-seq\n           (if-let [s (seq c)]\n             (p f (f i (first s)) (rest s)))))))","problem":60,"user":"4ff4c9dae4b0678c553fc360"},{"code":"(fn red\n  ([f c] (red f (first c) (rest c)))\n  ([f v c]\n   (cons v\n         (lazy-seq\n           (when-let [x (first c)]\n           (red f (f v x) (rest c)))))))","problem":60,"user":"5336ca32e4b0e30313ee6c80"},{"code":"(fn [a b & [c]]\n  (let [r (if (nil? c) b (cons b c))]\n    (map\n      #(reduce a (take % r))\n      (map #(+ 1 %2) r (range)))))","problem":60,"user":"4e5411e8535d8a8b8723a279"},{"problem":60,"code":"(fn reductiones\n    ([f coll] (reductiones f (first coll) (rest coll)))\n    ([f acc coll]\n     (if (seq coll)\n       (let [acc-next (f acc (first coll))]\n         (cons acc (lazy-seq (reductiones f acc-next (rest coll)))))\n       (cons acc ()))))","user":"561814bae4b06b1bb2182a1a"},{"problem":60,"code":"(fn this\n    ([func start orig]\n    (letfn [(reduct [next-val coll]\n     (lazy-seq\n      (if (empty? coll)\n         nil\n         (let [result (func next-val (first coll))]\n           (cons result\n                 (reduct result (next coll)))))))]\n      (lazy-seq (cons start (reduct start orig)))))\n    ([func coll]\n     (this func (first coll) (next coll))))","user":"586b6753e4b01531a375e956"},{"code":"(fn m\r\n    ([f c] (m f (first c) (rest c) ))\r\n    ([f i c] (lazy-seq \r\n        \t\t(if (empty? c)\r\n      \t\t\t\t(cons i c)\r\n        \t\t\t(cons i (m f (f i (first c)) (rest c)))))))","problem":60,"user":"4ecf1f51535d1f5ad70dba3a"},{"problem":60,"code":"(fn r\n  ([f v [h & t]]\n   (lazy-seq (cons v (if h (r f (f v h) t) h))))\n  ([f [h & t]]\n   (r f h t)))","user":"5790329ee4b0ebec4cfb75a7"},{"problem":60,"code":"(fn myred \n  ([f init ls]\n  (lazy-seq\n     (if-let [s (seq ls)]\n        (let [res (f init (first ls))]\n         (cons init (myred f res (rest ls))))\n         (cons init nil)\n)))\n  ([f ls]\n     (myred f (first ls) (rest ls)))\n)","user":"56903cb9e4b0dcc4269f40eb"},{"code":"(fn scan ([f xs] (scan f (f) (rest xs)))\n         ([f x xs] (cons x (lazy-seq (when (seq xs) (scan f (f x (first xs)) (rest xs)))))))","problem":60,"user":"4e8612f8535db62dc21a62f2"},{"problem":60,"code":"(fn newReductions\n   ([f c] (newReductions f (first c) (rest c)))\n   ([f i c] (cond\n               (empty? c) (lazy-seq [i])\n               :else (lazy-cat (lazy-seq [i]) (newReductions f (f i (first c)) (rest c))))))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn scan\n    ([f [x & xs :as args]]\n        (scan f x xs))\n    ([f acc [x & xs :as args]]\n        (if (empty? args)\n            [acc]\n            (lazy-seq (cons acc (scan f (f acc x) xs))))))","problem":60,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":60,"code":"(fn [f arg1 & rst]\n    (letfn [(myreduce [accum s]\n              ;; (println \"accum:\" accum \"s:\" s)\n              (if-not (seq s) (list accum)\n                      (lazy-seq (cons accum\n                                      (myreduce (f accum (first s)) (rest s))))))]\n      (if (seq rst)\n        (myreduce arg1 (first rst))\n        (myreduce (f (first arg1)) (rest arg1)))))","user":"57fc0719e4b0d3187e900987"},{"problem":60,"code":"(fn adduce\n  ([f coll] (adduce f (first coll) (rest coll)))\n  ([f val coll]\n   (if (seq coll) \n     (lazy-seq (cons val (adduce f (f val (first coll)) (rest coll))))\n     [val])))","user":"52be58d7e4b07a9af579231d"},{"code":"(fn red\n\t([f coll] (lazy-seq (red f (first coll) (rest coll))))\n\t([f a b]\n\t\t(let [x (f a (first b))]\n\t\t\t(if (empty? (rest b))\n\t\t\t\t[a x]\n\t\t\t\t(cons a\n\t\t\t\t\t(lazy-seq (red f x (rest b))))))))","problem":60,"user":"51757af0e4b085adf681d873"},{"code":"(fn X\n  ([f [a & t]]\n    (X f a t))\n  ([f s c]\n    (lazy-seq (if (empty? c) (cons s nil)\n                  (cons s (X f (f s (first c)) (rest c)))))))","problem":60,"user":"4db016af838c48654951d9b9"},{"code":"(fn self \n  ([fun a [x & xs :as xxs]] \n    (cons a (lazy-seq (when-not (empty? xxs) \n                        (self fun (fun a x) xs)))))\n  ([fun [x & xs]]\n      (self fun x xs)))","problem":60,"user":"50c9e5e3e4b0a409464667d7"},{"problem":60,"code":"(fn r*\n    ([f coll]\n     (r* f (first coll) (rest coll)))\n    ([f init coll]\n     (lazy-seq\n      (cons init\n            (when-let [s (seq coll)]\n              (r* f (f init (first s)) (rest s)))))))","user":"500d3160e4b05f7c30cfa6a1"},{"code":"(fn r\r\n  ([f s] (r f (nth s 0) (rest s)))\r\n  ([f x s]\r\n   (concat [x] \r\n           (keep-indexed \r\n            (fn [a b] (reduce f x (take (inc a) s))) \r\n            s))))","problem":60,"user":"4f58d92fe4b0a7574ea71858"},{"code":"(fn reds\n  ([f start sq] (if (empty? sq) (list start) (cons start (lazy-seq (reds f (f start (first sq)) (rest sq))))))\n  ([f sq] (reds f (first sq) (rest sq))))","problem":60,"user":"50fbdacfe4b0d10d794c19f0"},{"code":"(fn reds\n   ([f lst]\n      (if (empty? lst) []\n          (reds f (first lst) (rest lst))))\n   ([f last-val lst]\n      (if (empty? lst) (cons last-val nil)\n          (let [new-val (f last-val (first lst))]\n            (cons last-val (lazy-seq (reds f new-val (rest lst))))))))","problem":60,"user":"524f213be4b0541d1855b7ff"},{"code":"(fn red \n  ([f col]\n\t (red f (first col) (rest col)))\n  ([f seed col]\n\t (lazy-seq\n\t\t (if col\n\t\t\t (let [head (f seed (first col))]\n\t\t\t\t (cons seed (lazy-seq (red f head (next col))))) [seed]))))","problem":60,"user":"5201ff99e4b0b2e020a18f26"},{"problem":60,"code":"(fn reductions++ ([f coll] (reductions++ f (first coll) (rest coll)))\n  ([f int coll] (lazy-seq (if (empty? coll) (list int) (cons int (reductions++ f (f int (first coll)) (rest coll)))))))","user":"55af7e21e4b03311e7b732cc"},{"code":"#(map (apply partial reduce (butlast %&))\n      ((if (= 3 (count %&)) (partial cons []) identity)\n       (map (fn [x _] (take x (last %&))) (next (range)) (last %&))))","problem":60,"user":"52746701e4b03e8d9a4a74a2"},{"problem":60,"code":"(fn redux ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (redux f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (redux f (f init (first s)) (rest s)))))))\n\n\n;;(fn g\n;;  ([f [x & s]] (g f x s))\n;;  ([f a [x & s]] \n;;    (lazy-seq       \n;;        (cons a (if x (g f (f a x) s))))))","user":"544cf5d7e4b0e39780006977"},{"problem":60,"code":"(fn like-reductions\n  ([f coll] (like-reductions f (first coll) (rest coll)))\n  ([f val coll]\n   (lazy-seq\n   (if (seq coll)\n     (cons val (like-reductions f (f val (first coll)) (rest coll)))\n     [val]))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"code":"(fn red\r\n  ([f c]\r\n     (red f (first c) (rest c)))\r\n  ([f i c]\r\n     (cons i\r\n           (when (not (empty? c))\r\n             (lazy-seq\r\n              (red f (f i (first c)) (rest c)))))))","problem":60,"user":"4f17ab99535d64f603146457"},{"code":"(letfn [(hoge [f n [h & r]]\r\n        (if (empty? r)\r\n\t\t(list n (f n h))\r\n\t\t(lazy-seq (cons n (hoge f (f n h) r)))))]\r\n       (fn ([f [h & r]] (hoge f h r))\r\n\t   ([f n l] (hoge f n l))))","problem":60,"user":"507437c2e4b054001656acd0"},{"code":"(fn !\n  ([f coll]\n     (! f (first coll) (rest coll)))\n  ([f init coll]\n     (cons init\n           ((fn rcr [i [h & t]] \n             (if h\n               (let [r (f i h)]\n                 (lazy-seq (cons r (rcr r t)))))) init coll))))","problem":60,"user":"4e7d1c22535db169f9c796c5"},{"problem":60,"code":"(fn red\n  ([f z coll]\n   ;(println \"z\" z \"fst\" fst \"tail\" tail)\n   (if (empty? coll)\n     [z]\n     (cons z (lazy-seq (red f (f z (first coll)) (rest coll))))))\n  ([f [fst & tail]] (red f fst tail)))","user":"53f7820be4b0de5c41848560"},{"problem":60,"code":"(fn __\n    ([f coll] (drop 1 (__ f 0 coll)))\n    ([f val coll]\n       (map #(reduce f val %)\n            (for [n (range )\n                  :let [taken (take n coll)]\n                  :while (== (count taken)  n)\n                  ]\n              (take n coll)))))","user":"5433a07be4b0b6b47310fce0"},{"problem":60,"code":";; first solution (with help)\n;(fn my-reductions\n;  ([f coll] \n;   (my-reductions f (first coll) (rest coll)))\n;  ([f v [x & xs]] \n;   (if (nil? x)\n;     (list v)\n;     (lazy-seq (cons v (my-reductions f (f v x) xs))))))\n\n(fn my-reductions\n  ([f coll] \n   (my-reductions f (first coll) (rest coll)))\n  ([f v [x & xs]]\n   (cons v (lazy-seq (when x (my-reductions f (f v x) xs))))))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"(fn redu \r\n ([fun ini l] \r\n      (let [redu1 (fn redu1 [fun ini l]\r\n                      (if (empty? l) [] \r\n                        (let [res (fun ini (first l))]                 \r\n  \t\t\t\t           (lazy-seq (cons res (lazy-seq \r\n  \t\t\t\t            (redu1 fun res (next l))))))))]\r\n    (cons ini (redu1 fun ini l))))\r\n ([fun l] (redu fun (first l) (rest l))))","problem":60,"user":"4f04a06d535dcb61093f6bd9"},{"problem":60,"code":"(fn reduct\r\n  ([func seq]\r\n    (let [[result head & tail] seq\r\n          next-result (func result head)]\r\n      (cons result (if (empty? tail)\r\n        (list next-result)\r\n        (lazy-seq (reduct func (cons next-result tail)))))))\r\n  ([func result seq]\r\n    (reduct func (cons result seq))))","user":"555bd27ae4b0b056612e2244"},{"problem":60,"code":"(fn my-reductions\n  ([f xs]\n   (my-reductions f (f (first xs)) (rest xs)))\n  ([f init xs]\n   (cons init\n         (lazy-seq\n          (if (not (empty? xs))\n            (my-reductions f (f init (first xs)) (rest xs)))))))","user":"5c222b7de4b07e362c230588"},{"code":"(fn reduece\n  ([f l]\n   (lazy-seq\n    (if-let [c (seq l)]\n      (reduece f (first c) (rest c))\n      (list (f)))))\n  ([f i l]\n   (cons i\n         (lazy-seq\n          (when-let [c (seq l)]\n            (reduece f (f i (first c)) (rest c)))))))","problem":60,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn mr\r\n  ([f coll] \r\n    (mr f (first coll) (rest coll)))\r\n\t([f init coll]\r\n  \t(lazy-seq\r\n  \t\t(if-let [e (first coll)]\t\t\r\n  \t\t\t(cons init (mr f (f init e) (rest coll)))\r\n  \t\t[init]))))","problem":60,"user":"4f3242bae4b0d6649770a08f"},{"code":"(fn p60\n  ([func coll]\n    (do\n      (p60 func (first coll) (rest coll))))\n  ([func init coll]\n    (if (nil? (first coll))\n      [init]\n      (cons init (lazy-seq (p60 func (func init (first coll)) (rest coll)))))))","problem":60,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":60,"code":"(fn __foo__\n  ([f init col]\n     (lazy-seq\n\t(if-let [s (seq col)]\n\t   (cons init (__foo__ f (f init (first s)) (rest s)))\n           (cons init '()))))\n  ([f col]\n   (when-let [s (seq col)]\n     (__foo__ f (first s) (rest col)))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":60,"code":"(fn reduct\n  ([f coll]\n   (lazy-seq\n    (reduct f (first coll) (rest coll))))\n  ([f acc coll]\n   (cons acc\n         (lazy-seq\n          (when-let [c (seq coll)]\n            (reduct f (f acc (first c)) (rest c)))))))","user":"56504dc2e4b0284900eef6bc"},{"problem":60,"code":"(fn my-reductions\n  ([f xs]\n   (map (fn [n _] \n          (reduce f (take (inc n) xs)))\n        (range)\n        xs))\n  ([f init xs]\n   (my-reductions f (cons init xs))))","user":"5561d2c2e4b0c656e3ff17cd"},{"problem":60,"code":"(fn reduction\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reduction f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reduction f (f init (first s)) (rest s)))))))","user":"53664e3be4b0243289761e74"},{"code":"(fn r\r\n([f [x & s]] (r f x s))\r\n([f x s]\r\n (lazy-seq\r\n  (cons x\r\n   (if (empty? s) ()\r\n    (r f (f x (first s)) (rest s)))))))","problem":60,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":60,"code":"(fn scan\n    ([f coll] (scan f (first coll) (next coll)))\n    ([f init [head & tail :as coll]]\n     (cons init\n           (lazy-seq (if (seq coll) (scan f (f init head) tail))))))","user":"5e17bb46e4b00200644e3d5a"},{"problem":60,"code":"(fn [fun x & r]\n  (letfn [ (red-help [f l s] \n    (if (empty? s) s\n    (lazy-seq (cons (f l (first s)) (red-help f (f l (first s)) (rest s)))) ))]\n  \n  (if (empty? r) (cons (first x) (red-help fun (first x) (rest x))) \n    (cons x (red-help fun x (first r))))))","user":"5b4ff637e4b02d533a91bce0"},{"code":"(fn reducs \n  ([f coll] (reducs f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll) (cons init nil) \n     (let [res (f init (first coll))] \n       (cons init (lazy-seq (reducs f res (rest coll))))))))","problem":60,"user":"5341b141e4b00652c8746ecf"},{"problem":60,"code":"(fn  test60\n ([f x]  (test60 f (first x) (rest x)))\n ([f x xs]\n      (lazy-seq\n            ( if (empty? xs)\n                (list x)\n              (cons x (test60 f (f x (first xs))  (rest xs)))))))","user":"55896a0ce4b059ccff29b204"},{"problem":60,"code":"(fn red\n  ([f [fi & re]] (red f (f fi) re))\n  ([f init coll]\n   (if (seq coll)\n     (lazy-seq (cons init (red f (f init (first coll)) (rest coll))))\n     (list init))))","user":"53ee7f2ee4b0d648e757f4cf"},{"problem":60,"code":"(fn local-fun \n  ([f y]\n    (local-fun f (first y) (next y)))\n  ([f x y]\n    (cons x\n          (lazy-seq \n           (if (seq y)\n            (local-fun f (f x (first y)) (rest y)))))))","user":"563c48e7e4b0bfe05bf11832"},{"problem":60,"code":"(fn my-reduce\n  ([f x] (my-reduce f (first x) (rest x)))\n  ([f x s] (lazy-seq (if-let [ss (seq s)] (cons x (my-reduce f (f x (first s)) (rest s))) (cons x [])))))","user":"5b72b36ce4b047b03b2036a9"},{"problem":60,"code":"(fn xr ([f [l1 & lx]] (xr f l1 lx))\n       ([f a [l1 & lx]] (lazy-seq (if l1 (cons a (xr f (f a l1) lx)) [a]))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"code":"(fn g \n    ([f c] \n      (g f (first c) (rest c)))\n    ([f i c]\n      (if \n        (empty? c) \n        [i] \n        (lazy-seq (cons i (g f (f i (first c)) (rest c)))))))","problem":60,"user":"4f1d1d95535d64f603146488"},{"problem":60,"code":"(fn x\n    ([f coll] (x f (f (first coll)) (rest coll)))\n  \t([f init coll]\n     \t(cons init\n          (when (seq coll)    \n            (lazy-seq    \n             (x f (f init (first coll)) (rest coll) )\n            )\n          )  \n        )\n     \n    )  \n)","user":"56db90d4e4b0ea9b8538f80d"},{"problem":60,"code":"(fn reductions'\n  ([f [head & tail]]\n   (reductions' f head tail))\n  ([f init [head & tail :as coll]]\n   (if (empty? coll)\n     init\n     (let [r (f init head)]\n       (cons init (lazy-seq (if (empty? tail)\n                              [r]\n                              (reductions' f r tail))))))))","user":"5629dfaae4b00e49c7cb4813"},{"problem":60,"code":"(fn my-reductions\n  ([f xs]\n   (if (nil? (next xs))\n     xs\n     (cons\n      (first xs)\n      (lazy-seq\n       (my-reductions f (cons (f (first xs) (second xs)) (drop 2 xs)))))))\n  ([f init xs]\n   (my-reductions f (cons init xs))))","user":"53c126fce4b00fb29b22125b"},{"problem":60,"code":"(fn my-reduction-r2 \n  ([f c]\n      (my-reduction-r2 f (first c) (rest c))\n  )\n  ([f start c]\n      (if (seq c)\n        (lazy-seq (cons start (my-reduction-r2 f (f start (first c)) (rest c))))\n        [start])\n  )\n)","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn lazy-reduce\n  ([fun [init & sq]] (lazy-reduce fun init sq 1))\n  ([fun init sq] (lazy-reduce fun init sq 1))\n  ([fun init sq cnt]\n   (let [sqq (cons init sq)\n         elems (take cnt sqq)] \n     (if (= cnt (count elems))\n       (lazy-seq (cons (reduce fun elems) (lazy-reduce fun init sq (inc cnt))))\n       []))))","problem":60,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":60,"code":"(fn reduce-\n  ([f coll]\n   (reduce- f (first coll) (next coll)))\n  ([f init [h & t :as coll]]\n   (cons init\n         (lazy-seq\n           (if (seq coll)\n             (reduce- f (f init h) t))))))","user":"5aa0a3e4e4b0d174b936c82f"},{"code":"(fn rr ([f xs] (rr f (first xs) (rest xs)))\n       ([f x xs]\n         (lazy-seq\n           (cons x\n             (when-let [s (seq xs)]\n               (rr f (f x (first s)) (rest s)))))))","problem":60,"user":"4ee88269535d93acb0a6687f"},{"code":"(fn r\n  ([f [a & b :as s]]\n    (if s\n      (r f a b)))\n  ([f i [a & b :as s]]\n    (cons i (lazy-seq\n              (if s\n                (r f (f i a) b))))))","problem":60,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":60,"code":"(fn lazy-reduce\n  ([f coll]\n    (lazy-reduce f (first coll) (rest coll)))\n  ([f val coll]\n    (lazy-seq\n      (if\n        (empty? coll)\n        (list val)\n        (cons \n          val\n          (lazy-reduce\n            f\n            (f val (first coll))\n            (rest coll)))))))","user":"564c8e99e4b0284900eef674"},{"problem":60,"code":"(fn seq-reduce\n  ([fun xs] \n    (seq-reduce fun (first xs) (rest xs)))\n  ([fun h xs] \n    (lazy-seq \n      (cons h\n            (if (empty? xs)\n              (empty xs)\n              (seq-reduce fun (fun h (first xs)) (rest xs)))))))","user":"54187e84e4b01498b1a71a1b"},{"code":"(fn reducts\n  ([f c] (reducts f (first c) (next c)))\n  ([f init c] (cons init (lazy-seq\n                           (if c (reducts f (f init (first c)) (next c)))))))\n; sometimes it's terribly hard to do anything other than the implementation\n; of the methods you aren't supposed to use.","problem":60,"user":"4ebb20c0535dfed6da9c6d6f"},{"code":"(fn [f & [a e]]\n  ((fn w [a c]\n    (lazy-seq\n      (if (empty? c)\n        [a]\n        (cons a (w (f a (first c)) (rest c))))))\n   (if e a (first a))\n   (or e (rest a))))","problem":60,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":60,"code":"(fn f60\n  ([f s]\n   (cons (first s)\n         (lazy-seq (f60 f (f (first s) (second s)) (nthrest s 2)))))\n  ([f x s]\n   (cons x\n         (if-not (nil? (first s))\n           (lazy-seq (f60 f (f x (first s)) (rest s)))\n           '()))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":60,"code":"(fn my-reductions\n   ([f seq]\n    (if (empty? seq) (f)\n        (let [[h & t] seq]\n          (if (empty? t) [h] (my-reductions f h t)))))\n   ([f val seq]\n    (letfn [(rep [prev seq]\n              (if (empty? seq) []\n                  (let [next (f prev (first seq))]\n                    (lazy-seq (cons next (rep next (rest seq)))))))]\n      (cons val (rep val seq)))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"(fn rdctns\n   ([f coll]\n    (lazy-seq\n       (if-let [s (seq coll)]\n          (rdctns f (first s) (rest s))\n          (list (f)))))\n   ([f init coll]\n    (cons init\n          (lazy-seq\n             (when-let [s (seq coll)]\n                (rdctns f (f init (first s)) (rest s)))))))","problem":60,"user":"5368a275e4b0243289761e8f"},{"problem":60,"code":"(fn [f & args]\n   (let [init (if (= 1 (count args)) 0 (first args))\n         a (last args)]\n     (lazy-cat  \n       (when-not (number? init) [init]) \n       (for [aa a] (reduce f init (conj (vec (take-while #(not= % aa) a)) aa))))))","user":"56f15eade4b04a395b9a048e"},{"problem":60,"code":"(fn r\n  ([f x vs]\n   (if (empty? vs)\n     (list x)\n     (lazy-seq (cons x (r f (f x (first vs)) (rest vs))))))\n  ([f vs] (r f (first vs) (rest vs)))\n  )","user":"54c641f8e4b045293a27f628"},{"code":"(fn reduct         \n         ([f [x & xs]]\n           (reduct f x xs))\n         ([f v [x & xs]]\n           (if x \n             (cons v (lazy-seq (reduct f (f v x) xs)))\n             [v])))","problem":60,"user":"4e513758535dc968683fc4f3"},{"problem":60,"code":"(fn seq-red\n([f s] (seq-red f (first s) (rest s)))\n([f start s] (if (empty? s) [start]\n(lazy-seq (cons start (seq-red f (f start (first s)) (rest s))))\n))\n)","user":"59a0262ee4b0871e7608b82d"},{"problem":60,"code":"(fn reduce'\n  ([f coll]\n   (reduce' f (first coll) (rest coll)))\n  ([f init coll]\n    (if-let [fe (first coll)]\n      (cons init (lazy-seq (reduce' f (f init fe) (rest coll))))\n      (list init))))","user":"5576f299e4b05c286339e077"},{"code":"(fn r\n  ([f i [x & xs]]\n   (lazy-seq\n     (cons i (if x (r f (f i x) xs) '()))))\n  ([f [x & xs]]\n    (r f x xs)))","problem":60,"user":"4ff3df0fe4b0678c553fc355"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f prev coll]\n   (if (seq (rest coll))\n     (lazy-seq (cons prev (my-reductions f (f prev (first coll)) (rest coll))))\n     (list prev (f prev (first coll))))))","user":"5f6d4305e4b02876ed9fd05c"},{"problem":60,"code":"(fn reds\n([func lst](if (empty? lst)\n           []\n           (reds func (first lst) (lazy-seq (rest lst)))))\n([func init lst](if (empty? lst)\n           [init]\n           (lazy-seq (concat [init] (reds func (func init (first lst)) (rest lst))))))\n)","user":"5545477fe4b0a04f79299531"},{"problem":60,"code":"(fn my-reductions\n  ([f xs]\n   (my-reductions f (first xs) (rest xs)))\n  ([f acc xs]\n   (cons acc (lazy-seq\n               (if (empty? xs)\n                 ()\n                 (my-reductions f (f acc (first xs))\n                                (rest xs)))))))","user":"59afe4bae4b0e1f4e384c8c0"},{"code":"(fn my-reductions\n  ([f coll]\n     (my-reductions f (first coll) (rest coll)))\n  ([f val coll]\n     (cons val (lazy-seq\n                (if (empty? coll)\n                  []\n                  (my-reductions f (f val (first coll)) (rest coll)))))))","problem":60,"user":"4ea1b9e4535d7eef308072b8"},{"problem":60,"code":"(fn mapcan\n  ([f lis]\n   (mapcan f (first lis) (rest lis)))\n  \n    ([f start lis]\n     (letfn [(mapcn [nxt lis]\n               (when (not (empty? lis))\n               (cons (f nxt (first lis)) (lazy-seq (mapcn (f nxt (first lis)) (drop 1 lis))))))]\n       (cons (reduce f start ()) (mapcn start lis)))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":60,"code":"(fn sr-60\n    ([f xs] (sr-60 f (first xs) (next xs)))\n    ([f acc xs]\n       (lazy-seq\n        (cons acc\n              (if (seq xs)\n                (sr-60 f (f acc (first xs)) (next xs))\n                nil)))))","user":"513e8141e4b02b2a3d8235c1"},{"code":"(fn r\r\n    ([f s] (r f (first s) (rest s))) \r\n    ([f v s]\r\n      (if (nil? (first s)) \r\n        [v]                 \r\n           (lazy-seq \r\n             (cons v \r\n                   (r f (f v (first s)) (rest s))))) \r\n      )\r\n    )","problem":60,"user":"4f0da4e4535d0136e6c22319"},{"problem":60,"code":"(fn my-reductions [f & args]\n  (let [argc (count args)\n        init (if (= 2 argc)\n               (first args)\n               (first (first args)))\n        coll (if (= 2 argc)\n               (second args)\n               (drop 1 (first args)))]\n    [init coll]\n    (lazy-seq\n     (if (empty? coll)\n       (list init)\n       (cons init\n             (my-reductions f\n                            (f init (first coll))\n                            (drop 1 coll)))))))","user":"605f5c69e4b03746e80ebf5e"},{"problem":60,"code":"(fn r2 \n  ([f [v & c]] (r2 f v c)) \n  ([f v c] (lazy-seq \n            (cons v \n                  (if \n                    (empty? c) \n                    nil \n                    (r2 f (f v (first c)) (rest c)))))))","user":"55632016e4b0c656e3ff17e4"},{"problem":60,"code":"(fn sred \n  ([f acc s]\n   (if (seq s)\n     (lazy-seq\n        (cons acc (sred f (f acc (first s)) (rest s))))\n     (list acc)))\n   ([f s] (sred f (first s) (rest s))))","user":"54ca93abe4b057c6fda3a264"},{"code":"(fn r\n  ([f s] (when-let [[h & t] (seq s)]\n           (r f h t)))\n  ([f i s]\n     (cons i\n           (lazy-seq\n            (when-let [[h & t] (seq s)]\n              (r f (f i h) t))))))","problem":60,"user":"50142490e4b07d18bdaaf70a"},{"code":"; straight up from the source\r\n(fn reductions1\r\n  ([f coll]\r\n     (lazy-seq\r\n      (if-let [s (seq coll)]\r\n        (reductions1 f (first s) (rest s))\r\n        (list (f)))))\r\n  ([f init coll]\r\n     (cons init\r\n           (lazy-seq\r\n            (when-let [s (seq coll)]\r\n              (reductions1 f (f init (first s)) (rest s)))))))","problem":60,"user":"5376966ae4b06839e8705e27"},{"problem":60,"code":"(fn my-test\n\n\t([my-fn my-seq]\n\n\t\t\t\n\t\t\t\t  (my-test my-fn (first my-seq) (rest my-seq))\n\t\t)\n\n\t([my-fn res my-seq]\n\n\t\t\t(let [new-seq (concat my-seq (list (first my-seq)))\n\n\t\t\t\t  me (fn me1 [my-fn res my-seq]\n\n\t\t\t\t  \t\t\t(if (empty? my-seq)\n\t\t\t\t  \t\t\t\t\tnil\t\n\n\t\t\t\t  \t\t\t\t\t\t(cons res \n\t\t\t\t  \t\t\t\t\t\t\t(lazy-seq (me1 \n\t\t\t\t  \t\t\t\t\t\t\t\t\t   my-fn \n\t\t\t\t  \t\t\t\t\t\t\t\t\t  (my-fn res (first my-seq))\n\t\t\t\t  \t\t\t\t\t\t\t\t\t  (rest my-seq)\t\n\t\t\t\t  \t\t\t\t\t))))\t\n\n\t\t\t\t  \t)\t\t\n\n\t\t\t\t]\n\n\t\t\t\t(me my-fn res new-seq)\t\n\n\t\t\t\t)\n\n\n\n\t\t\t\n\t\t\t\t\t\n\t\t)\n\t)","user":"55897fe2e4b059ccff29b205"},{"problem":60,"code":"(fn nreductions\n  ([f coll]\n   (nreductions f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init (lazy-seq\n               (when-let [s (seq coll)]\n                 (nreductions f (f init (first s)) (rest s)))))))","user":"5922f8a9e4b026ae3852128f"},{"code":"(letfn [(r [func in coll]\n  (lazy-seq \n    (cons in (if (seq coll) (r func (func in (first coll)) (rest coll))))))] \n  (fn ([func coll] (r func (first coll) (rest coll)))\n      ([func in coll] (r func in coll))))","problem":60,"user":"4f04b66b535dcb61093f6bdd"},{"code":"(fn red\n  ([f s]\n    (red f (first s) (rest s)))\n  ([f i s]\n    (lazy-seq (cons i (when (seq s) (red f (f i (first s)) (rest s)))))))","problem":60,"user":"4ff304f4e4b0678c553fc343"},{"code":"(fn([f x](map-indexed (fn[idx,itm](reduce f (take (+ idx 1) x))) x))\n   ([f s x](cons s (map-indexed (fn[idx,itm](reduce f s (take (+ idx 1) x))) x))))","problem":60,"user":"52d66ca0e4b09f7907dd135c"},{"code":"(fn my-reductions\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when (seq coll)\n              (my-reductions f (f init (first coll)) (rest coll))))))\n  ([f coll]\n     (when (seq coll)\n       (lazy-seq (my-reductions f (first coll) (rest coll))))))","problem":60,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":60,"code":"(fn r\n  ([f coll]\n   (if (seq coll)\n     (r f (first coll) (rest coll))\n     (list (f))))\n  ([f init coll]\n   (lazy-seq\n   \t(cons init\n          (when (seq coll)\n            (r f (f init (first coll)) (rest coll)))))))","user":"54485749e4b032a45b8693c7"},{"problem":60,"code":"(fn red\n  ([f i c]\n   (if (empty? c)\n     (list i)\n     (lazy-seq (cons i (red f (f i (first c)) (rest c))))))\n  ([f c]\n   (red f (first c) (rest c))))","user":"5eb4927fe4b00a66d4a95221"},{"problem":60,"code":"(fn intermediate-reduce\n  ([f [i & others]]\n    (intermediate-reduce f i others))\n  ([f a [b & re :as others]]\n    (if (empty? others)\n      (list a)\n      (let [x (f a b)]\n        (lazy-seq (cons a (intermediate-reduce f x re)))))))","user":"569f99cce4b0542e1f8d1497"},{"code":"(fn reducts\n  ([f [arg & args]]\n    (reducts f arg args))\n  ([f v [arg & args]]\n    (if-not arg\n      (list v)\n      (cons v (lazy-seq (reducts f (f v arg) args))))))","problem":60,"user":"521e8227e4b0dd19981ad082"},{"problem":60,"code":"(fn my-reduce ([func accum coll]\n                               (if (empty? coll)\n                                 [accum]\n                                   (lazy-seq \n                                   (concat [accum] (my-reduce func (func accum (first coll)) (rest coll) )))\n                                 ))\n                  ([func coll] (my-reduce func (first coll) (rest coll)))\n                  )","user":"53c73e8ae4b00fb29b2212a5"},{"code":"(fn red \n  ([f v coll]\n    (if-let [s (seq coll)]\n      (lazy-seq (cons v (red f (f v (first s)) (rest s))))\n      [v]))\n  ([f coll] \n    (if-let [s (seq coll)]\n      (red f (first s) (rest s))\n      (f))))","problem":60,"user":"512148dae4b05ae5a5823c0f"},{"code":"(fn f \n  ([k [a & z]] (f k a z))\n  ([k a [b & z]]\n    (lazy-seq\n      (cons a\n        (when b\n          (f k (k a b) z))))))","problem":60,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":60,"code":"(fn my-reduce\n \n  ([op input] (my-reduce op (first input) (rest input)))\n \n  ([op result input]\n \n  (lazy-seq\n    (if (empty? input) (list result)\n      (cons result\n            (my-reduce op\n                 (op result (first input))\n(rest input)))))))","user":"59358f74e4b04f87174def52"},{"problem":60,"code":"(fn my-reduce\n  ([f [hd & tl]] (my-reduce f hd tl))\n  ([f v xs] (if-not (empty? xs)\n              (let [[hd & tl] xs\n                    result (f v hd)]\n                (cons v (lazy-seq (my-reduce f result tl))))\n              (cons v nil))))","user":"58a47197e4b01a0c0b2328f9"},{"problem":60,"code":"(fn redux\n ([fun a coll]\n   (if (empty? coll)\n     [a]\n     (lazy-seq (cons a (redux fun (fun a (first coll)) (rest coll) )))))\n ([fun coll]\n   (redux fun (first coll) (rest coll))))","user":"5ac92dc3e4b0e27600da77bf"},{"code":"(fn z \r\n  ([f x]\r\n     (z f (first x) (rest x)))\r\n  ([f i x]\r\n   (cons i\r\n     (lazy-seq\r\n       (when (seq x)\r\n        (z f (f i (first x)) (rest x)))))))","problem":60,"user":"4db03279838c48654951d9bc"},{"code":"(fn r \n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (r f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (r f (f init (first s)) (rest s)))))))","problem":60,"user":"4ec5d62c535d6d7199dd36ba"},{"code":"(fn r\n\t([f x xs] (if (seq xs) (cons x (lazy-seq (r f\n\t\t(f x (first xs))\n\t\t(rest xs))))\n\t(list x)))\n\t([f xs] (r f (first xs) (rest xs))))","problem":60,"user":"523d02b0e4b0dbf0c3017289"},{"code":"(fn r\r\n  ([f init [x & xs]] \r\n   (cons init (lazy-seq (when x (r f (f init x) xs))))) \r\n  ([f coll] \r\n   (r f (first coll) (rest coll))))","problem":60,"user":"4ff07688e4b0678c553fc324"},{"code":"(fn reduce-ls--\n  ([func coll] (reduce-ls-- func (first coll) (rest coll)))\n  ([func tot coll]\n     (if (empty? coll)\n       (list tot)\n       (cons tot (lazy-seq (reduce-ls-- func (func tot (first coll)) (rest coll)))))))","problem":60,"user":"511e763ce4b03e81d390ac29"},{"problem":60,"code":"(fn __\n  ([f l]\n   (__ f (first l) (rest l)))\n  ([f s l]\n   (if (empty? l)\n     [s]\n     (let [t (f s (first l))]\n       (cons s\n             (lazy-seq (__ f t (rest l))))))))","user":"54c271b9e4b045293a27f602"},{"problem":60,"code":"(fn s\n  ([f c]\n   (s f (nth c 0) (rest c)))\n  ([f d c]\n   (cons d\n     ((fn g [p l]\n      (when (seq l)\n        (let [v (f p (nth l 0))]\n          (lazy-seq\n            (cons v (g v (rest l)))))))\n    d c))))","user":"52bacfa8e4b07a9af57922d6"},{"problem":60,"code":"(fn my-reductions\n  ([f [a & others]] (my-reductions f a others))\n  ([f init [a & others]]\n   (lazy-seq (cons init (when a (my-reductions f (f init a) others))))))","user":"5f82609ae4b0c071e6c840f9"},{"problem":60,"code":"(fn rs \n  ([f xs] (rs f (first xs) (rest xs)))\n  ([f v xs]\n     (if (seq xs)\n       (lazy-seq (cons v (rs f (f v (first xs)) (rest xs))))\n       (lazy-seq (cons v nil)))))","user":"58c2df0ae4b021aa9917ed17"},{"code":"(fn redn \n  ([f x xs]  (lazy-seq ( cons x\n                 (if (empty? xs) xs \n                     (redn f (f x (first xs)) (rest xs))))))\n \n  ([f xs]    (redn f (first xs) (rest xs))))","problem":60,"user":"53691dc7e4b0243289761e97"},{"problem":60,"code":"(fn [f xs & xs']\n  (let [x (if (empty? xs') (first xs) xs)\n        ys (if (empty? xs') (rest xs) (first xs'))]\n    (letfn [(go [rs ns]\n              (if (empty? ns)\n                ns\n                (let [r (f (last rs) (first ns))]\n                  (cons\n                   r\n                   (lazy-seq (go (conj rs r) (rest ns))))))\n              )\n            ]\n      (cons\n       x\n       (lazy-seq (go [x] ys)))\n      )\n    )\n  )","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn reduc\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reduc f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reduc f (f init (first s)) (rest s))))))\n)","problem":60,"user":"5272d4b7e4b03e8d9a4a7453"},{"code":"(fn red\n   ([f x]\n      (lazy-cat [(first x)] (red f (f (first x) (second  x)) (rest (rest x))) ))\n   ([f x y]\n       (lazy-cat [x]\n            (if (empty? (rest y))\n                 [(f x (first y))]\n                 (red f (f x (first y)) (rest y))) )))","problem":60,"user":"5300aa1de4b0d8b024fd3710"},{"problem":60,"code":"(fn rn\n  ([f l]\n    (rn f (first l) (rest l)))\n  ([f i l]\n    (if (empty? l)\n      (cons i nil)  ; return a seq for recursive cons.\n      (lazy-seq (cons i (rn f (f i (first l)) (rest l)))))))","user":"56051095e4b08b23635d3162"},{"problem":60,"code":"(fn seq-reductions\n  ([f acc coll]\n   (lazy-seq\n    (if (seq coll)\n      (cons acc (seq-reductions f (f acc (first coll)) (rest coll)))\n      [acc])))\n  ([f [acc & others]] (seq-reductions f acc others)))","user":"58ffac9de4b0438e51c2cffd"},{"code":"(fn red\n  ([op xs] (red op (first xs) (take 10 (drop 1 xs)))) ; take 10 is a cheat for lazy-seq ;-(\n  ([op x xs] (reduce (fn [l x] (conj l (op (last l) x))) [x] xs)))","problem":60,"user":"513dcc1ce4b0825f97f7f964"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n    (my-reductions f (first coll) (rest coll)))\n  ([f firstArg coll]\n   (letfn [(reduce-me [f e coll]\n               (when-not (empty? coll)\n                 (let [val (f e (first coll))]\n                   (lazy-seq\n                   (cons val (reduce-me f val (rest coll)))))))]\n     (lazy-seq\n       (cons firstArg (reduce-me f firstArg coll))))))","user":"5ab23c99e4b073f1774425e2"},{"problem":60,"code":"(fn [f arg1 & arg2]\n  (let \n    [ rmap (map \n      (fn [val n]\n        (if arg2\n          (reduce f arg1 (take (+ n 1) (first arg2)) )\n          (reduce f (take (+ n 1) arg1 ))\n        )\n      ) (if arg2 (first arg2) arg1) (iterate inc 0)\n    ) ]\n    (if arg2 (conj rmap arg1) rmap)\n  )\n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"problem":60,"code":"(fn f\n  ([g e]\n   (f g (g (first e)) (rest e)))\n  ([g i e]\n   (lazy-seq\n    (cons i\n          (when (seq e)\n            (f g\n               (g i (first e))\n               (rest e)))))))","user":"5d1b2b7de4b02ea6f0fb697a"},{"problem":60,"code":"(fn cus-reduction\n  ([op input] (cus-reduction op (first input) (rest input)))\n  ([op result input]\n   (lazy-seq\n     (if (empty? input) (list result) \n                        (cons result (cus-reduction op (op result (first input)) (rest input)))))))","user":"582cbf48e4b051871117bfa6"},{"code":"(fn foo \n  ([f, [h & t]] (lazy-seq (foo f h t)))\n  ([f, a, [h & t]] (if h (lazy-seq (cons a (foo f (f a h) t))) [a])))","problem":60,"user":"4eabb245535d7eef30807319"},{"code":"(fn d\n  ([f x [h & r]] (cons x (if h (lazy-seq (d f (f x h) r)))))\n  ([f [h & r]] (d f h r)))","problem":60,"user":"4fd96694e4b05e33b9224f37"},{"code":"(fn red\n  ([f lst]\n   (red f (first lst) (rest lst)))\n  ([f x lst]\n   (lazy-seq\n     (if lst\n      (cons x (red f (f x (first lst)) (next lst)))\n      (cons x [])))))","problem":60,"user":"50a4f36be4b0344e360f3bc9"},{"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f v coll]\n   (if (empty? coll) (list v)\n     (lazy-seq (cons v (my-reductions f (f v (first coll)) (rest coll)))))))","problem":60,"user":"537e745ae4b06839e8705ea6"},{"problem":60,"code":"(fn myreduction\n  ([f [x & s]] (myreduction f x s))\n  ([f a [x & s]] \n    (cons       \n        a (lazy-seq (if x (myreduction f (f a x) s))))))","user":"57e6997ee4b0bfb2137f5af0"},{"code":"(fn my-reductions\n            ([orig-f f [x & next-xs :as xs] _]\n               (if (empty? xs)\n                 nil\n                 (lazy-seq (cons (f x) (my-reductions orig-f (partial orig-f (f x)) next-xs :bla))\n                 )))\n            ([f [x & next-xs :as xs]]\n               (if (empty? xs)\n                 nil\n                 (lazy-seq (cons x (my-reductions f (partial f x) next-xs :bla))))\n            )\n            ([f init xs]\n               (if (empty? xs)\n                 nil\n                 (lazy-seq (cons init (my-reductions f (partial f init) xs :bla))))\n               )\n              )","problem":60,"user":"4e9fd521535d7eef3080729a"},{"problem":60,"code":"(fn my-reductions\n  \n  ([f acc coll]\n   (if (empty? coll)\n     [acc]\n     (let [[head & tail] coll\n           reduction (f acc head)]\n       (cons acc (lazy-seq (my-reductions f reduction tail))))))\n     \n  ([f [initial & coll]]\n   (my-reductions f initial coll)))","user":"5424c523e4b01498b1a71b03"},{"problem":60,"code":"(fn e60 \n   ([f coll] (e60 f (first coll) (rest coll)))\n   ([f v coll]\n          (cons v (when (seq coll) \n                    (lazy-seq (e60 f (f v (first coll)) (next coll)))))))","user":"4ff4bed0e4b0678c553fc35f"},{"problem":60,"code":"(fn my-reductions\n  ([fun [x & xs]]\n   (my-reductions fun x xs))\n  ([fun reduced [x & xs]]\n   (if x\n     (lazy-seq (cons reduced (my-reductions fun (fun reduced x) xs)))\n     (vector reduced))))","user":"56603e5fe4b068f2fe63dc4a"},{"problem":60,"code":"(fn [x y & c] (if (= 0 (count c))\n               (map (fn [a] (reduce x (first y) (take a (rest y)))) (range))\n               (map (fn [a] (reduce x y (take a (nth c 0)))) (range (inc (count (nth c 0)))))))","user":"57ec3d29e4b0bfb2137f5b77"},{"code":"(fn __\n  ([f a]\n   (letfn [(helper [f a c]\n                   (cons (reduce f (take c a))\n                         (lazy-seq (helper f a (inc c)))))]\n   (helper f a 1)))\n  ([f a b]\n   (letfn [(helper [f a b c]\n                   (when (<= c (count b))\n                   (cons (reduce f a (take c b))\n                         (lazy-seq (helper f a b (inc c))))))]\n   (helper f a b 0))))","problem":60,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn g\n  ([f [x & s]] (g f x s))\n  ([f a [x & s]] \n    (lazy-seq       \n        (cons a (if x (g f (f a x) s))))))","problem":60,"user":"4ef49c2c535dced4c769f238"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f init [x & xs :as coll]]\n   (if (empty? coll)\n     [init]\n     (let [next-init (f init x)]\n       (lazy-seq (cons init (my-reductions f next-init xs)))))))","user":"5d272077e4b092dab7f59c64"},{"problem":60,"code":"(fn mred\n  ([f, [ x :as col]]\n   \t(when \n    (not= x nil )\n  \t(lazy-seq (mred f x (rest col))) \n    )\n  )\n  ([f, val, [ x :as col]]\n   \t(if (= nil x)\n    [val]\n  \t(lazy-seq (cons val (mred f (f val x) (rest col)))) \n    )\n  )\n)","user":"56f258d3e4b04a395b9a04a1"},{"problem":60,"code":"(fn __\n  ([f [a & as]]\n   (__ f a as))\n  ([f a [b & bs]]\n   (cons a\n         (when b\n           (lazy-seq\n            (__ f\n                (f a b)\n                bs))))))","user":"510528a0e4b0730a5f55ad85"},{"code":"(fn reds\n  ([f col] (when (seq col) (reds f (first col) (next col))))\n  ([f s col]\n     (cons s \n      (when col\n        (lazy-seq\n         (let [[x & o] col\n               m (f s x)]\n           (reds f m o)))))))","problem":60,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn f [a b & c] (if-not c (f a (first b) (next b)) (cons b (lazy-seq (when-let [c (first c)] (f a (a b (first c)) (next c)))))))","problem":60,"user":"4db27319535df7e46ed9b6bd"},{"problem":60,"code":"(fn reduct\n  ([f s] (reduct f (first s) (rest s)))\n  ([f start s]\n   (lazy-seq (cons start (when s (reduct f (f start (first s)) (next s)))))))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":60,"code":"(fn [f init & [args]]\n  (let [init-args (if (nil? args) init (cons init args))]\n    (map\n      #(reduce f (take % init-args))\n      (map #(inc %2) init-args (range)))))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":60,"code":"(fn my-reductions \n    ([func args]\n     (my-reductions func (first args) (rest args)))\n    ([func init args]\n     (cons init \n           (lazy-seq (when-let [s (seq args)]\n                       (my-reductions func (func init (first s)) (rest s)))))))","user":"54540453e4b0e397800069d2"},{"problem":60,"code":"(fn reduce-seq\n  ([f s]\n   (if (empty? s)\n     []\n     (reduce-seq f (first s) (rest s))))\n  ([f i s]\n   (if (empty? s)\n     [i]\n     (lazy-seq (cons i (reduce-seq f (f i (first s)) (rest s)))))))","user":"59f78b49e4b0ca45a743a30e"},{"problem":60,"code":"(fn g  \n         ([f xs] (g f (first xs) (rest xs)))\n         ([f x xs]\n          (if (empty? xs)\n            [x]\n            (lazy-seq (cons x (g f (f x (first xs)) (rest xs))))\n            )))","user":"5ec1b293e4b00a66d4a95296"},{"problem":60,"code":"(fn red \n    ([f [e & r]] \n     (red f e r))\n    ([f i [e & r]]\n     (lazy-seq (cons i (if e \n                            (red f (f i e) r)\n                            '())))))","user":"577202d2e4b0979f896515c0"},{"code":"(fn red\n           ([f s c]\n               (lazy-seq (cons s\n                               (when-let [c0 (first c)]\n                                         (red f (f s c0) (rest c))))))\n           ([f c]\n               (lazy-seq (red f (first c) (rest c)))))","problem":60,"user":"4f34eb87e4b0e243712b1eba"},{"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [[x & more] (seq coll)]\n             (my-reductions f (f init x) more))))))","problem":60,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":60,"code":"(fn fn-reductions\n  ([f coll]\n   (lazy-seq\n    (if-let [s (seq coll)]\n      (fn-reductions f (first coll) (rest coll))\n      (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (fn-reductions f (f init (first s)) (rest s)))))))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":60,"code":"(fn red \n  ([f [a & b]] \n   (red f a b))\n  ([f i [a & b]] \n   (if a (lazy-seq (cons i (red f (f i a) b))) (list i))))","user":"52e851bfe4b09f7907dd149a"},{"problem":60,"code":"(fn reduceX\n  ([f coll] (reduceX f (first coll) (rest coll)))\n  ([f init coll]\n    (letfn [(iter [func val s]\n      (lazy-seq (when-not (empty? s)\n        (let [res (func val (first s))]\n          (cons res (iter func res (rest s)))))))]\n      (lazy-seq (cons init (iter f init coll))))))","user":"5d7eaf5fe4b0492f5d910fc3"},{"problem":60,"code":"(fn reduce*\n  ([f cols] (reduce* f (first cols) (rest cols)))\n  \n  ([f init [c & cols]]\n   (cons init (lazy-seq (when c (reduce* f (f init c) cols))))))","user":"567931e9e4b05957ce8c6184"},{"problem":60,"code":"(fn aa\n  ([f x] (aa f (first x) (rest x)))\n  ([f a x] (if (empty? x) \n             [a]\n             (cons \n              a \n              (lazy-seq (aa f (f a (first x)) (rest x)))))))","user":"53e91473e4b036ad0777e495"},{"code":"(fn [of & vs]\n  ((fn rrr [f xs current]\n     (lazy-seq\n      (if (empty? xs)\n        (list (f current))\n        (cons\n         (f current)\n         (rrr\n          f\n          (rest xs)\n          (conj current (first xs)))))))\n   (if (empty? (rest vs)) (partial reduce of (first (last vs)))  (partial reduce of (first vs)))\n   (if (empty? (rest vs)) (rest (last vs)) (last vs))\n   []))","problem":60,"user":"4ec07699535dfed6da9c6da2"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n                (if-not (empty? coll) (my-reductions f\n                                                     (f init (first coll))\n                                                     (rest coll)))))))","user":"604a30c6e4b02d28681c77f0"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (cond\n     (empty? coll) (cons (f) nil)\n     (and (first coll) (not (second coll))) (cons (first coll) nil)\n     :else (cons (first coll) (my-reductions f (f (first coll) (second coll)) (drop 2 coll)))))\n  ([f acc coll]\n   (lazy-seq\n    (if (empty? coll)\n      (cons acc nil)\n      (cons acc (my-reductions f (f acc (first coll)) (rest coll)))))))","user":"56cf115de4b0ea9b8538f765"},{"code":"(fn scanl\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (scanl f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (scanl f (f init (first s)) (rest s)))))))","problem":60,"user":"50479524e4b0371827a27bc4"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f init coll] (if (empty? coll)\n                   [init]\n                   (let [r (f init (first coll))]\n                     (lazy-seq (cons init (my-reductions f r (rest coll))))))))","user":"536673a8e4b0243289761e76"},{"problem":60,"code":"(fn reds\n  ([r s xs]\n    (if\n      (empty? xs)\n      [s]\n      (lazy-seq\n        (cons\n          s\n          (reds r (r s (first xs)) (rest xs))))))\n  ([r xs]\n    (reds r (first xs) (rest xs))))","user":"57717915e4b0979f896515b3"},{"problem":60,"code":"(fn reduct\n  ([f coll]\n   (reduct f (first coll) (next coll)))\n  ([f init [h & t :as coll]]\n   (cons init\n         (lazy-seq\n           (if (seq coll)\n             (reduct f (f init h) t))))))","user":"56c33ceae4b05cc29241ee89"},{"code":"(fn my-reduction \n  ([f coll] (my-reduction f (first coll) (rest coll)))\n  ([f init coll] \n    (letfn [(get-sub-seqs [coll]\n      (map-indexed (fn [idx _] (take (inc idx) coll)) coll))]\n    (cons init (map #(reduce f init %) (get-sub-seqs coll))))))","problem":60,"user":"501c1492e4b086d93747d180"},{"problem":60,"code":"(fn g\n  ([f xs]\n   (if (empty? xs) [] (g f (first xs) (rest xs))))\n  ([f v xs]\n    (lazy-seq\n      (if (empty? xs) [v]\n        (cons v (g f (f v (first xs)) (rest xs)))))))","user":"57adbe7ee4b0b8559636fca0"},{"problem":60,"code":"(fn r\n  ([f [x & v]] (r f x v))\n  ([f x v] (cons x (lazy-seq (when-let [[s & a] (seq v)] (r f (f x s) a))))))","user":"5f2d6787e4b033932238a66d"},{"problem":60,"code":"(letfn\n  [(my-f \n    ([f s] (my-f f (first s) (rest s)))\n    ([f acc s]\n     (if (empty? s) \n       (list acc)\n       (lazy-seq (cons acc (my-f f (f acc (first s)) (rest s)))))))]\n  my-f)","user":"4ff769bce4b0678c553fc38f"},{"code":"(fn red\n  ([f [x & xs]] (red f x xs))\n  ([f val coll]\n     (lazy-seq\n      (cons val\n            (if (seq coll)\n              (red f (f val (first coll)) (rest coll))\n              [])))))","problem":60,"user":"50d93c53e4b0fd36a4b89223"},{"problem":60,"code":"(fn reds\n           ([f c]\n            (reds f (first c) (rest c)))\n           ([f r c]\n            (if (empty? c)\n              (cons r nil)\n              (cons r (lazy-seq (reds f (f r (first c)) (rest c)))))))","user":"55895eade4b059ccff29b202"},{"problem":60,"code":"(fn me\n  ([op d a]\n  (for [n (range) :let [s (take n a)] :while (= n (count s))] (do\n    (reduce op d s)\n  )))\n  ([op [f & a]] (me op (op f) a) )\n)","user":"568513c4e4b04eec3ec5cfc5"},{"code":"(fn reductions-\n  ([f coll]\n     (reductions- f (first coll) (rest coll)))\n  ([f init coll]\n     (if (empty? coll)\n       [init]\n       (lazy-seq (cons init\n                       (reductions- f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4e5bff2b535d8a8b8723a2bd"},{"code":"(fn reds\n  ([f [init & coll]] (reds f init coll))\n  ([f init coll]\n     (cons init (lazy-seq\n                 (when-let [s (seq coll)]\n                   (reds f (f init (first s)) (rest s)))))))","problem":60,"user":"4ec5aa1f535d6d7199dd36b0"},{"problem":60,"code":"(fn r\n  ([f c] (r f (first c) (rest c)))\n  ([f v c] (if (seq c) \n                  (lazy-seq (cons v (r f (f v (first c)) (rest c))))\n                  (list v))))","user":"574b4f3ee4b02ea114799207"},{"problem":60,"code":"(fn red\n  ([f s]\n   (map-indexed\n     (fn [i _] (reduce f (first s) (take (inc i) s)))\n     s))\n  ([f v s]\n   (map-indexed\n     (fn [i _] (reduce f v (take i s)))\n     (concat [v] s))))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"(fn red\n  ([op [fst & rst]] (red op fst rst))\n  ([op init coll]\n    (cons init\n      (when-let [s (seq coll)]\n        (let [res (op init (first s))]\n          (lazy-seq\n            (red op res (rest s))))))))","problem":60,"user":"4ef0eaef535dced4c769f211"},{"code":"(fn rs\n   ([f [i & s]]\n      (rs f i s))\n   ([f i [x & xs]]\n      (cons i (lazy-seq (when x (rs f (f i x) xs))))))","problem":60,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn __\n  ([f [s1 & s]]\n     (__ f s1 s))\n  ([f v [s1 & s]]\n    (lazy-seq\n     (cons v ( if s1\n               (__ f (f v s1) s))))))","problem":60,"user":"4f29eb2ae4b0d6649770a037"},{"code":"(fn rdns\n  ([f init s]\n    (lazy-seq (cons\n                 init\n                 (when-let [[x & xs] (seq s)] (rdns f (f init x) xs)))))\n  ([f s] (if-let [[x & xs] (seq s)] (rdns f x xs) (list (f)))))","problem":60,"user":"506ab9bae4b05d3b7762c74c"},{"problem":60,"code":"(fn a\n  ([f l] (a f (first l) (rest l)))\n  ([f s l]\n   (cons s (if (empty? l) nil (lazy-seq (a f (f s (first l)) (rest l)))))))","user":"58844d43e4b0f1effa3b7696"},{"code":"(fn r\n  ([f s] (r f (first s) (rest s)))\n  ([f i s] (cons i (lazy-seq (when-let [s1 (seq s)] (r f (f i (first s1)) (rest s1)))))))","problem":60,"user":"4ea1ecfa535d7eef308072bb"},{"problem":60,"code":"(fn red\n  ([f [x & xs :as coll]]\n    (lazy-seq\n      (if-not (nil? coll)\n        (red f x xs)\n        (list))))\n  ([f x [y & ys]]\n    (if (nil? y)\n      (list x)\n      (cons x\n            (lazy-seq\n              (red f (f x y) ys))))))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":60,"code":"(fn rdcn\n  ([f coll]\n    (if-let [s (seq coll)]\n      (rdcn f (first coll) (rest coll))\n      (list (f))))\n  ([f init coll]\n    (cons init\n          (lazy-seq\n            (when-let [s (seq coll)]\n              (rdcn f (f init (first s)) (rest s)))))))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":60,"code":";;shamelessly copied from clojure source code.\n(fn myreduct\n  ([fun coll]\n   (lazy-seq\n    (if-let [s (seq coll)]\n      (myreduct fun (first s) (rest s))\n      (list (fun)))))\n  ([fun init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (myreduct fun (fun init (first s)) (rest s)))))))","user":"5785c1d4e4b0ebec4cfb74e1"},{"code":"(fn _reduce\n ([f c] (cons (first c) (lazy-seq (_reduce f (f (first c) (second c)) (next (next c)) true))))\n ([f arg c] (cons arg (lazy-seq (_reduce f (f arg (first c)) (next c) true))))\n ([f r c n] (if (not (nil? (first c))) (cons r (lazy-seq (_reduce f (f r (first c)) (next c) true))) [r]))\n)","problem":60,"user":"522eba30e4b01cdb292c5f0e"},{"code":"(fn step-reduce  ([f coll]     (step-reduce f (first coll) (rest coll)))  ([f x coll]     (if (seq coll)       (let [next-coll (rest coll)             next-x (f x (first coll))]         (cons x (lazy-seq (step-reduce f next-x next-coll))))       (cons x (lazy-seq '())))))","problem":60,"user":"50bc23e4e4b0594b91591c3c"},{"problem":60,"code":"(fn ([x y] (map #(reduce x (take % y)) (map inc (if (counted? y) (range y) (range))))) ([x z y] (map #(reduce x z (take % y)) (if (counted? y) (range (+ 1 (count y))) (range)))))","user":"53fc8424e4b0de5c418485b3"},{"problem":60,"code":"(fn xreductions\n  ([f seq] (xreductions f (first seq) (rest seq)))\n  ([f firstarg seq]\n    (letfn [(reduct [f acc se]\n              (lazy-seq (when-not (empty? se)\n                          (let [res (f acc (first se))]\n                            (cons res (reduct f res (rest se)))))))]\n      (lazy-seq (cons firstarg (reduct f firstarg seq)))\n      )))","user":"590b3aeae4b047aa04b199d0"},{"problem":60,"code":"(fn reductions-\n  ([f [x & xs]] (reductions- f x xs))\n  ([f init [x & xs]]\n    (if x\n      (cons init (lazy-seq (reductions- f (f init x) xs)))\n      [init])))","user":"54b7f217e4b0ed20f4ff6e8f"},{"problem":60,"code":"(fn red\n  ([f coll]\n    (red f (first coll) (rest coll)))\n  ([f acc xs]\n    (cons acc\n      (when-let [s (seq xs)]\n        (lazy-seq\n          (red f (f acc (first xs)) (rest xs)))))))","user":"5ba15075e4b0a20761a2339e"},{"problem":60,"code":"(fn r\n  ([f i s]\n     (if (seq s)\n       (lazy-seq (cons i\n                       (r f\n                          (f i (first s))\n                          (rest s))))\n       (list i)))\n  ([f s]\n     (r f (first s) (rest s))))","user":"5466aabbe4b01be26fd746e8"},{"problem":60,"code":"(fn [f & xs]\n  (let\n     [r (fn rd [s xs]\n           (lazy-seq\n           (if (empty? xs)\n             (cons s '())\n             (cons s (rd (f s (first xs)) (rest xs))))))\n      i (first xs)]\n  (if (= (count xs) 1)\n    (r (first i) (rest i))\n    (r i (second xs)))))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn rd\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (rd f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (rd f (f init (first s)) (rest s)))))))","problem":60,"user":"4f4319ebe4b0d7d3c9f3fd13"},{"code":"(fn mr\n  ( [f a]\n      (map-indexed\n       (fn [i x ]\n         (reduce f (take (inc i) a))  ) a))\n  ( [f x a]\n      (mr f (cons x a))))","problem":60,"user":"5007cdb9e4b0b17c647f5227"},{"problem":60,"code":"(fn seq-reductions\n  ([f v coll] (seq-reductions f (cons v coll)))\n  ([f [a & [b & cs]]]\n    (if b\n      (cons a  (lazy-seq  (seq-reductions f (cons (f a b) cs))))\n      [a])))","user":"5383668ee4b06839e8705edd"},{"problem":60,"code":"(fn a\n  ([f x] (lazy-seq (if-let [s (seq x)]\n           (a f (first s) (rest s)))))\n  ([f x y] \n    (cons x\n     (lazy-seq \n      (when-let [s (seq y)]\n        (a f (f x (first s)) (rest s))))\n     ))\n  )","user":"5464a536e4b01be26fd746cf"},{"problem":60,"code":"(fn rred\n  ([func cur [x & xs]]\n   (lazy-seq \n    (if (nil? x)\n      (cons cur '())\n      (cons cur (rred func (func cur x) xs)))))\n  ([func [x & xs]]\n   (rred func (func x) xs)))","user":"59497f51e4b07ddc2dafaddd"},{"problem":60,"code":"(fn reducer\n      ([func col]\n     (reducer func (first col) (rest col)))\n    ([func start [f & r :as col]]\n     (cons start\n       (lazy-seq\n         (if (seq col)\n           (reducer func (func start f) r)))\n       )\n      )\n  )","user":"5c723f4be4b0fca0c16227a0"},{"problem":60,"code":"(fn my-reductions\n  ([f s] (my-reductions f (first s) (rest s)))\n  ([f v s]\n   (if (empty? s) [v]\n       (cons v (lazy-seq\n                (my-reductions f (apply f (list v (first s))) (rest s)))))))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":60,"code":"(fn my-reductions\n    ([f [fst & rst]]\n     (my-reductions f fst rst))\n    ([f val coll]\n     (lazy-seq\n      (cons val\n            (when-let [s (seq coll)]\n              (my-reductions f (f val (first s)) (rest s)))))))","user":"4dfe5a93535d04ed9115e786"},{"problem":60,"code":"(fn my-reductions\n    ([f [x & xs]]\n     (my-reductions f x xs))\n    ([f n [x & xs]]\n     (if x\n       (lazy-seq (cons n (my-reductions f (f n x) xs)))\n       (cons n nil))))","user":"52f53589e4b05e3f0be25f2c"},{"problem":60,"code":"(fn rdu\n  ([f init [x & xs :as all]]\n   (if (empty? all)\n     (list init)\n     (let [ni (f init x)]\n       (cons init (lazy-seq (rdu f ni xs))))))\n  ([f [x & xs]] (rdu f x xs))\n)","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"(fn g\n  ([f xs] (g f (first xs) (rest xs)))\n  ([f init [x & xs :as xxs]]\n   (if (empty? xxs)\n    (list init)\n    (lazy-seq (cons init (g f (f init x) xs))))))","problem":60,"user":"51efd397e4b0249c592fbdeb"},{"problem":60,"code":"(fn p\n  ([f valor lst]\n    (if (empty? lst) (list valor)\n\t\t  (cons valor (lazy-seq (p f (f valor (first lst)) (rest lst))))))\n  ([f lst]\n    (p f (first lst) (rest lst))))","user":"56fc1bc7e4b07572ad1a88dd"},{"code":"(fn [f & args]\n  (let [val (if (= 2 (count args)) (first args) (first (first args)))\n        coll (if (= 2 (count args)) (second args) (rest (first args)))]\n    (letfn [(lazy-sr [alpha c]\n              (if (not (empty? c))\n                (let [r (f alpha (first c))]\n                  (cons r (lazy-seq (lazy-sr r (rest c))))))\n                )]\n        (cons val (lazy-sr val coll)))))","problem":60,"user":"4e773be8535d324fb2983d6e"},{"code":"(fn like-reduce\n  ([func coll] (like-reduce func (first coll) (rest coll)))\n  ([func init coll]\n  (if (seq coll)\n    (let [body (rest coll)\n          step (func init (first coll))]\n      (cons init (lazy-seq (like-reduce func step body))))\n    (cons init (lazy-seq '())))))","problem":60,"user":"5271605ae4b03e8d9a4a73ed"},{"code":"(fn r ([f a [b & t]] (if b (cons a (lazy-seq (r f (f a b) t))) [a]))  ([f [x & c]] (r f x c)))","problem":60,"user":"52b453b0e4b0c58976d9ad21"},{"problem":60,"code":"(fn sr \n  ([func coll] (sr func (first coll) (rest coll)))\n  ([func res coll]\n    (lazy-seq\n      (if (empty? coll) (vector res)\n        (cons res (sr func (func res (first coll)) (rest coll)))))))","user":"5475d755e4b0c51c1f4d72a0"},{"code":"(fn rds \n  ([f [x & xs]] (rds f x xs))\n  ([f init [x & xs]]\n    (if (nil? x) (list init)\n      (cons init (lazy-seq (rds f (f init x) xs))))))","problem":60,"user":"507a396be4b08327cd804a69"},{"code":"(fn __ \n  ([f init coll]\n  (reduce \n     (fn [xs x] \n       (if (empty? xs)\n         (vector x)\n         (conj xs (f (last xs) x))))\n     (if (nil? init) init (conj (empty coll) init)) coll)\n  )\n  ([f coll]\n     (__ f nil (take 5 coll)) ; cheating  \n  )\n)","problem":60,"user":"503f872ee4b00d1a725ff2ac"},{"code":"(fn myreduce \n  ([fc vl coll] \n   (if (empty? coll) [vl]\n     (let [r1 (fc vl (first coll)) \n           rr (cons vl (lazy-seq (myreduce fc r1 (rest coll))))] \n       rr)\n     ))\n  ([fc coll] (myreduce fc (first coll) (rest coll)))\n  )","problem":60,"user":"52faec2ee4b047fd55837004"},{"problem":60,"code":"(fn redu\n  ([ff coll] (redu ff (first coll) (rest coll)) )\n  ([ff init coll]\n    (let [rf (fn rf- [coll lastv]\n              (lazy-seq\n                (if (empty? coll)\n                  (list lastv)\n                  (cons lastv (rf- (rest coll) (ff lastv (first coll)))) )))]\n       (rf coll init)))\n)","user":"593f95d8e4b069cdc2982be3"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (rest (my-reductions f (f) coll)))\n  ([f init coll]\n   (cons\n     init\n     (when-let [s (seq coll)]\n       (lazy-seq\n         (my-reductions\n           f\n           (f init (first s))\n           (rest s)))))))","user":"6098263be4b00e9e6653c3f9"},{"code":"(fn re ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (re f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (re f (f init (first s)) (rest s)))))))","problem":60,"user":"50bfe725e4b080409b860f26"},{"code":"(fn red\n\t  ([f coll]\n\t     (lazy-seq\n\t      (if-let [s (seq coll)]\n\t        (red f (first s) (rest s))\n\t        (list (f)))))\n\t  ([f init coll]\n\t     (cons init\n\t           (lazy-seq\n\t            (when-let [s (seq coll)]\n\t              (red f (f init (first s)) (rest s)))))))","problem":60,"user":"4e955b95535dbda64a6f6b33"},{"code":"(fn seq-red \n  ([op s] (seq-red op (first s) (rest s)))\n  ([op a s]\n    (if (seq s)\n      (lazy-seq\n        (cons a \n          (seq-red op (op a (first s)) (next s))))\n      (list a))))","problem":60,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn reductions*\n  ([f coll] (reductions* f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq\n    (cons init\n          (when (seq coll)\n            (reductions* f (f init (first coll)) (rest coll)))))))","problem":60,"user":"5300158ae4b0d8b024fd370f"},{"code":"(fn p ([f val coll]\r\n        (if (not (empty? coll)) \r\n          (let [v (f val (first coll))]\r\n            (lazy-seq (cons val (p f v (rest coll)))))\r\n          [val]  ))\r\n       ([f coll] (p f (first coll) (rest coll))))","problem":60,"user":"4def301c535d08e6dec9fe12"},{"code":"(fn r*\n    ([f c] (r* f (first c) (rest c)))\n    ([f n c]\n       (cons n (lazy-seq\n          (when-let [c (seq c)]\n            (r* f (f n (first c)) (rest c)))))))","problem":60,"user":"4ed292ac535d44c135fd68d9"},{"problem":60,"code":"(fn _reductions\n\t([f s]\n\t\t(lazy-seq\n\t\t\t(_reductions\n\t\t\t\tf\n\t\t\t\t(first s)\n\t\t\t\t(rest s))))\n\t([f val s]\n\t\t(cons\n\t\t\tval\n\t\t\t(lazy-seq\n\t\t\t\t(when (seq s)\n\t\t\t\t\t(_reductions\n\t\t\t\t\t\tf\n\t\t\t\t\t\t(f val (first s))\n\t\t\t\t\t\t(rest s))))))\n)","user":"5472d919e4b094393f72dd7b"},{"problem":60,"code":"(fn my-reductions \n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f val coll]\n   (lazy-seq\n    (if (seq coll)\n      (let [elem (first coll)\n            new-val (f val elem)]\n        (cons val (my-reductions f new-val (rest coll))))\n      [val]))))","user":"608256d7e4b0736b099e42da"},{"problem":60,"code":"(fn p3\n  ( [f val coll]\n    (if (empty? coll)\n      (list val)\n      (lazy-seq (cons val\n                      (p3 f (f val (first coll)) (rest coll)) ) ))\n    )\n  (\n   [f coll]\n   (p3 f (first coll) (rest coll) ))\n  )","user":"51f81925e4b09be9c177e526"},{"problem":60,"code":"(fn p60 ([opp coll] \n           (lazy-seq (p60 opp (first coll) (rest coll))))\n          ([opp acc coll]\n           (lazy-seq\n            (if-not (nil? (first coll))\n              (let [newacc (opp acc (first coll))]\n                (cons acc (p60 opp newacc (rest coll)))\n              )\n              [acc]\n              )\n            )))","user":"5400e918e4b0de5c41848619"},{"code":"(fn r\n([f s c] (cons s (lazy-seq (if (empty? c) '() (let [t (f s (first c))] (r f t (rest c)))))))\n([f c] (r f (first c) (rest c)))\n)","problem":60,"user":"525b0b51e4b0cb4875a45d01"},{"problem":60,"code":"(fn my-reduction\n  ([f items] (my-reduction f (first items) (rest items)))\n  ([f init items]\n   (lazy-seq\n    (if (empty? items)\n      (list init)\n      (let [i (first items)\n            r (rest items)]\n        (cons init (my-reduction f (f init i) r)))))))","user":"56897739e4b0dcc4269f407d"},{"problem":60,"code":"(fn reductions'\n   ([f coll]\n    (reductions' f (first coll) (rest coll)))\n   ([f init coll]\n    (cons init\n          (lazy-seq\n           (when (seq coll)\n             (reductions' f (f init (first coll)) (rest coll)))))))","user":"571dd145e4b0145328a76283"},{"code":"(fn thisfunc \n  ([f s] (thisfunc f (first s) (rest s)))\n  ([f init s]\n    (cons init\n      (if (empty? s)\n        nil\n        (lazy-seq (thisfunc f (f init (first s)) (rest s)))))))","problem":60,"user":"4dd9d299535d2dad7130b5dd"},{"problem":60,"code":"(fn myReductions ([f c] (myReductions f (first c) (next c)))\n  \t\t\t\t ([f v c] (if (empty? c) (vector v) (lazy-seq (cons v (myReductions f (f v (first c)) (drop 1 c))))))\n)","user":"542c1f73e4b0dad94371f29d"},{"problem":60,"code":"(fn red\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (red f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n       (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (red f (f init (first s)) (rest s)))))))","user":"56949fc5e4b0dcc4269f4120"},{"problem":60,"code":"(fn reductions'\n  ([f xs] (reductions' f (first xs) (rest xs)))\n  ([f init xs]\n    (if (nil? xs)\n      init\n      (cons init\n        (lazy-seq\n          (when-let [s (seq xs)]\n            (reductions' f (f init (first s)) (rest s))))))))","user":"55d5e80ee4b0e31453f64a91"},{"code":"(fn r\n  ([f s] (r f (first s) (next s)))\n  ([f i s] (lazy-seq\n              (cons i\n                    (when s\n                      (r f (f i (first s)) (next s)))))))","problem":60,"user":"4e7dfab0535db169f9c796f9"},{"problem":60,"code":"(fn reds\n  ([f coll]\n    (lazy-seq\n      (if-let [c (seq coll)] (reds f (first c) (rest c)))))\n  ([f init coll]\n    (cons init\n      (lazy-seq\n        (if-let [c (seq coll)] (reds f (f init (first c)) (rest c)))))))","user":"5b552117e4b02d533a91bd2c"},{"code":"(fn _reductions\n  ([f [x & xs]] (_reductions f x xs))\n  ([f val [x & xs]] (cons \n                   val \n                   (if x \n                      (lazy-seq (_reductions f (f val x) xs))))))","problem":60,"user":"531490bde4b08068f379ed17"},{"problem":60,"code":"(fn my-reduce ([f xs]\n  (my-reduce f (first xs) (take 100 (rest xs))))\n  ([f start xs]\n  (reduce (fn [acc a] (conj acc (f (if (empty? acc) (first xs) (last acc)) a))) [start] xs)))","user":"5668dcc6e4b04acd4f672df8"},{"code":"(fn seq-reductions\n  ([f xs] (seq-reductions f (first xs) (rest xs)))\n  ([f acc xs]\n      (cons acc (lazy-seq\n\t\t (if (empty? xs)\n\t\t     ()\n\t\t     (seq-reductions f (f acc (first xs))\n                             (rest xs)))\n  \t\t)\n      )     \n  )\n)","problem":60,"user":"531c0619e4b08068f379ed98"},{"problem":60,"code":"(fn my-reductions\n  ([f col]\n     (my-reductions f (first col) (rest col)))\n  ([f init col]\n     (cons\n      init\n      (lazy-seq\n       (if (empty? col)\n         nil\n         (my-reductions f\n                    (apply f (list init (first col)))\n                    (rest col)))))))","user":"56038f34e4b04bb52996e1bc"},{"problem":60,"code":"(fn reduce-list [f & args]\n    (let [[accum coll] (if (= 2 (count args))\n                         args [(first (first args)) (rest (first args))])]\n      (if (empty? coll)\n        [accum]\n        (cons accum (lazy-seq (reduce-list\n                               f\n                               (f accum (first coll))\n                               (rest coll))))\n        )\n      )\n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":60,"code":"(letfn [(calc [f val col acc]\n      (lazy-seq\n        (if-let [s (seq col)]\n          (cons (reduce f val acc) (calc f val (rest s) (conj acc (first s))))\n          (cons (reduce f val acc) col))))\n            (reductio!\n                ([f col] (calc f (first col) (rest col) []))\n                ([f val col] (calc f val col [])))]\n              reductio!)","user":"587a3babe4b01531a375eae2"},{"problem":60,"code":"(fn myreductions \n\t([f coll] \n\t\t(lazy-seq \n\t\t\t(if-let [s (seq coll)]\n\t\t\t\t(myreductions f (first coll) (rest coll))\n\t\t\t\t(list (f)))))\n\t([f init coll] \n\t\t(cons init\n\t\t\t  (lazy-seq \n\t\t\t\t(when-let [[v1 & r] (seq coll)]\n\t\t\t\t\t(myreductions f (f init v1) r))))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":60,"code":"(do\n (let [steps (fn steps [lst fun coll]\n               (if (= (count (take 1 coll)) 1)\n                 (let [fst (first coll)\n                       nxt (fun lst fst)]\n                   (lazy-seq\n                    (cons nxt\n                          (steps nxt fun (rest coll)))))))]\n   (fn\n    ([fun coll]\n          (let [fst (first coll)\n                rst (rest coll)]\n            (cons fst (steps fst fun rst))))\n    ([fun lst coll]\n          (cons lst (steps lst fun coll))))))","user":"56bf4ac0e4b0f26550335985"},{"problem":60,"code":"(fn my-reductions\n  ([f [x & others]] (my-reductions f x others) )\n  ([f initial col]\n      (lazy-seq \n        (if-let [x (first col)]\n          (cons initial (my-reductions f (f initial x) (rest col)))\n          [initial]\n        )\n      )\n    )\n  )","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":60,"code":"(fn myred ([op v coll] \n(let [f (first coll),\n      r (rest coll)]\n  (lazy-seq \n   (if (nil? f) \n     [v]\n     (cons v \n           (myred op (op v f) r)\n     )\n   )\n)))\n([op coll] (myred op (first coll) (rest coll))\n)\n)","user":"56c4f971e4b05cc29241ee9d"},{"problem":60,"code":"(fn r\n  ([f [head & tail]] (r f head tail))\n  ([f init arr] (lazy-seq (cons init (if (seq arr) (r f (f init (first arr)) (rest arr)))))))","user":"5ebd7296e4b00a66d4a95273"},{"problem":60,"code":"(fn f-\n  ([f coll]\n   (f- f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init \n         (lazy-seq \n          (when (seq coll)\n            (f- f (f init (first coll)) (next coll)))))))","user":"5370d152e4b0fc7073fd6e9d"},{"problem":60,"code":"(fn iter\n               ([f x xs] (iter f (cons x xs)))\n               ([f [x y & xs]]\n                (let [r (f x y)]\n                  (if xs\n                    (cons x (lazy-seq (iter f (conj xs r))))\n                    (cons x [r])))))","user":"5d29c06be4b01671435dbc6b"},{"problem":60,"code":"(fn my-reductions\n  ([f s]\n   (my-reductions f (first s) (rest s)))\n  ([f initial s]\n   (map-indexed (fn [idx _]\n                  (reduce f initial (take idx s)))\n                (conj s initial))))","user":"4fe899a6e4b07c9f6fd12c54"},{"problem":60,"code":"(fn reduce-coll\n  ([f coll] (reduce-coll f (first coll) (rest coll)))\n  ([f init coll]\n  \t(if (not (seq coll))\n      [init]\n      (lazy-seq (cons init\n                      (reduce-coll f\n                                   (f init (first coll))\n                                   (rest coll)))))))","user":"5cb41c40e4b026601754b911"},{"code":"(fn                                                                                         \n  ([f c]                                                                                             \n    ((fn ! [agg coll]                                                                                 \n      (if-let [s (seq coll)]                                                                         \n        (let [v (f agg (first s))]                                                                   \n          (lazy-seq (cons v (! v (rest s))))))) 0 c))                                                \n  ([f init c]                                                                                        \n    (cons init ((fn ! [agg coll]                                                                      \n        (if-let [s (seq coll)]                                                                       \n          (let [v (f agg (first s))]                                                                 \n            (lazy-seq  (cons v (! v (rest s))))))) init c)))                                         \n    )","problem":60,"user":"4f1d1299535d64f603146487"},{"code":"(fn redseq [op & args]\n  (let [arity (count args)\n        startval (if (= arity 1)\n                    (first (first args))\n                    (first args))\n        restargs (if (= arity 1)\n                    (drop 1 (first args))\n                    (second args))]\n     (letfn [(lazyfn [val lis]\n               (if (empty? lis)\n                   (list val)\n                   (lazy-seq (cons val\n                                   (lazyfn (op val (first lis))\n                                           (rest lis))))))]\n        (lazyfn startval restargs))))","problem":60,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":60,"code":"(fn rdc \n  ([f coll] (rdc f (first coll) (rest coll) ))\n  ([f val coll]\n    (if (empty? coll)\n      [val]\n      (cons val (lazy-seq (rdc f (f val (first coll)) (rest coll)))))))","user":"54d6f22de4b0a52adc2e2023"},{"problem":60,"code":"(fn r\n  ([f a]\n   (r f (first a) (rest a)))\n  ([f i a]\n   (cons i\n         (lazy-seq\n          (when-let [s (seq a)]\n            (r f (f i (first s)) (rest s)))))))","user":"4f42ae16e4b0d7d3c9f3fd09"},{"code":"(fn rdtns\n  ([f coll]\n    (lazy-seq\n      (let [s (seq coll)]\n        (if s\n          (rdtns f (first s) (rest s))\n          (list (f))))))\n  ([f init coll]\n    (cons init\n      (lazy-seq\n        (let [s (seq coll)]\n          (if s\n            (rdtns f (f init (first s)) (rest s))\n            nil))))))","problem":60,"user":"50bd6033e4b0594b91591c66"},{"problem":60,"code":"(fn x\n  ([f coll] (x f (first coll) (rest coll)))\n  ([f val coll]\n   (lazy-seq\n    (if (empty? coll)\n      (list val)\n      (cons val \n            (x f (f val (first coll)) (rest coll)))))))","user":"60b7e2c5e4b0e0fa5f1b4252"},{"code":"(fn x\n  ([f col] (x f (first col) (rest col)))\n  ([f v col]\n     (lazy-seq\n      (if (seq col)\n        (cons v (x f (f v (first col)) (rest col)))\n        (cons v nil)))))","problem":60,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":60,"code":"(letfn [(go \n            [f acc sq]\n            (when (seq sq)\n              (let [a2 (f acc (first sq))]\n                (cons a2\n                      (lazy-seq (go f a2 (rest sq)))))))]\n    (fn \n      ([f sq] (go f (f) sq))\n      ([f acc sq] (cons acc (go f acc sq)))))","user":"5652f23ce4b0f9d632dd846b"},{"code":"(fn red\n        ([f i xs]    (let [res (f i (first xs))] \n        (cons i (lazy-seq (if (empty? (rest xs)) [res] (red f res (rest xs)))))))\n        ([f xs] (red f (first xs) (rest xs))))","problem":60,"user":"4f614976e4b0defedf855fbb"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f init coll]\n    (if (empty? coll)\n      (list init)\n      (lazy-seq\n        (cons init (red f (f init (first coll)) (rest coll)))))))","user":"53f77b6ae4b0de5c4184855f"},{"problem":60,"code":"(fn my\n  ([func coll] (my func (first coll) (rest coll)))\n  ([func state coll] \n    (lazy-seq \n            (if (empty? coll) \n                (list state)\n                (cons state \n                      (my \n                          func \n                          (func state (first coll))\n                          (rest coll) \n                ))\n            )\n    )\n  )\n)","user":"54c94376e4b045293a27f665"},{"problem":60,"code":"(fn [ff ii & ss]\n  (letfn [(anag[f i s]\n               (if (nil? s)\n                 (list i)\n                 (lazy-seq \n                  (cons i (anag f (f i (first s)) (next s))))))]\n  (if (nil? ss)\n    (anag ff (first ii) (next ii))\n    (anag ff ii (flatten ss)))))","user":"4e8849c5535d8b9bb0147ca4"},{"problem":60,"code":"(fn t ([f coll] (t f (first coll) (rest coll)))\n    ([f start coll] (lazy-seq (cons start (if (seq (rest coll))\n                                            (t f (f start (first coll)) (rest coll))\n                                            (list (f start (first coll))))))))","user":"5f5b624de4b05ea7b9adc42f"},{"code":"(fn red ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (red f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (red f (f init (first s)) (rest s)))))))","problem":60,"user":"4e7e93f5535db169f9c7971a"},{"problem":60,"code":"(fn r\n  ([f a]\n  \t(r f (first a) (next a))\n  )\n  \n  ([f s a]\n  \t(lazy-seq\n     \t(cons s\n          (if (nil? a)\n            []\n            (let [x (f s (first a))]\n                (r f x (next a))\n            )\n          )\n        )\n    )\n  )\n)","user":"5b99a0a3e4b0c0b3ffbd4ad7"},{"problem":60,"code":"(fn step-reduce \n   ([f xs]\n      (step-reduce f (first xs) (rest xs)))\n   ([f v xs]\n      (if (empty? xs)\n        (list v)\n        (lazy-seq\n          (cons v (step-reduce f (f v (first xs)) (rest xs)))))))","user":"56fa2905e4b07572ad1a88be"},{"problem":60,"code":"(fn g ([f c] (g f (first c) (rest c))) ([f a c] (cons a (lazy-seq (if (empty? c) nil (g f (f a (first c)) (rest c)))))))","user":"5339cb07e4b0e30313ee6caf"},{"problem":60,"code":"(fn myReduce\n  ([f items] (myReduce f (first items) (rest items)))\n  ([f result items]\n  (lazy-seq\n    (if (empty? items) (list result)\n      (cons result\n            (myReduce f\n                 (f result (first items))\n                 (rest items)))))))","user":"57f8ba80e4b0d3187e90092f"},{"code":"(fn reduc\n  ([func coll] (reduc func (first coll) (rest coll)))\n  ([func start coll] \n  \n    (cons start ((fn cb [magic fire]\n      (if (empty? magic)\n        []\n        (let [n (func fire (first magic))]\n          (lazy-seq (cons n (cb (rest magic) n))))\n      )\n    ) coll start))\n  )\n)","problem":60,"user":"53778b90e4b06839e8705e36"},{"code":"(fn [f i & [a]]\n  (let [b (if (nil? a) i (cons i a))]\n    (map\n      #(reduce f (take % b))\n      (map #(inc %2) b (range)))))","problem":60,"user":"4f0446f9535dcb61093f6bb8"},{"problem":60,"code":"(fn red\n  ([f coll] (red f 0 (rest coll)))\n  ([f start coll]\n   (cons start ((fn rec [prev coll] \n    (if (empty? coll) []\n   \t(let [next (f prev (first coll))]\n   \t (cons next (lazy-seq (rec next (rest coll)))))))\n                         start coll))))","user":"55a74d46e4b09e57187da2a3"},{"code":"(fn reducts\n  ([f [acc & xs]] (reducts f acc xs))\n  ([f acc xs] (cons acc (lazy-seq (if (not-empty xs) (reducts f (f acc (first xs)) (rest xs)))))) )","problem":60,"user":"52015698e4b0d7096e99ddba"},{"problem":60,"code":"(fn reds\n    ([f coll]\n     (lazy-seq\n      (reds f (first coll) (rest coll))))\n    ([f start coll]\n     (cons start\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reds f (f start (first s)) (rest s)))))))","user":"5317d78ee4b08068f379ed63"},{"problem":60,"code":"(fn reductions2\n  ([f init coll]\n   (if (first coll)\n     (lazy-seq (cons init (reductions2 f (f init (first coll)) (rest coll))))\n     [init]))\n  ([f coll] (reductions2 f (first coll) (rest coll))))","user":"5e0d948fe4b099d064962f98"},{"code":"(fn t1\n  ([f coll]\n     (t1 f (first coll) (next coll)))\n  ([f v coll]\n     (if (= coll nil)\n       (cons v nil)\n       (let [n (f v (first coll))]\n         (lazy-seq\n          (cons v (t1 f n (next coll))))))))","problem":60,"user":"5046f909e4b03b02161376b5"},{"code":"(fn myreduce \n  ([f coll]\n    (lazy-seq \n      (if-let [c (seq coll)]\n        (myreduce f (first c) (rest c))\n        (list (f)))))\n  ([f ini coll]\n    (cons ini\n      (lazy-seq \n        (when-let [c (seq coll)]\n          (myreduce f (f ini (first c)) (rest c)))))))","problem":60,"user":"533ab9abe4b0e30313ee6cbf"},{"code":"(fn reductions- \n  ([f [x y & coll]]\n   (cons x (lazy-seq \n            (reductions- f (f x y) coll))))\n  ([f init coll]\n   (cons init\n         (if (empty? coll) nil\n           (lazy-seq \n            (reductions- f (f init (first coll)) (rest coll)))))))","problem":60,"user":"537f4652e4b06839e8705eb1"},{"code":"(fn reductions2\r\n          ([f coll] (reductions2 f (first coll) (rest coll)))\r\n          ([f init [x & xs]] (cons init (lazy-seq (when x (reductions2 f (f init x) xs)))) ))","problem":60,"user":"503d129fe4b06c4e0e1fa254"},{"code":"(fn my-reductions\n  ([f init [x & xs]] \n   (cons init (lazy-seq (when x (my-reductions f (f init x) xs))))) \n  ([f coll] \n   (my-reductions f (first coll) (rest coll))))","problem":60,"user":"51804bcbe4b04f45bde7d901"},{"code":"(fn rd\n ([f xs] (rd f (first xs) (rest xs)))\n ([f x xs]\n  (cons\n   x\n   (lazy-seq\n    (if (seq xs)\n     (rd f (f x (first xs)) (rest xs)))))))","problem":60,"user":"506fd0afe4b07bd6ad9b9f23"},{"problem":60,"code":"(fn red\n  ([f s] (red f (first s) (rest s))) \n  ([f i s]\n   (if (empty? s)\n     [i]\n\t (lazy-seq (cons i (red f (f i (first s)) (rest s)))))))","user":"56d63729e4b0ea9b8538f7ca"},{"code":"(fn d\r\n  ([f a [x & r]]\r\n    (cons a\r\n      (lazy-seq\r\n        (if x\r\n          (d f (f a x) r)))))\r\n  ([f [x & r]] (d f x r)))","problem":60,"user":"50acbd15e4b071b89ef26234"},{"problem":60,"code":"(fn rtions\n    ([f init coll]\n     (cons init\n           (lazy-seq\n            (if-let [s (seq coll)]\n              (rtions f (f init (first s)) (rest s))\n              (list)))))\n    ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (rtions f (first s) (rest s))\n        (list (f))))))","user":"539fa040e4b0ca733b97449f"},{"code":"(fn red\n  ([fun sq]\n     (red fun (first sq) (rest sq)))\n  ([fun acum sq]\n   (if (empty? sq) [acum]\n     (concat [acum] (lazy-seq\n                     (red fun (fun acum (first sq)) (rest sq)))))))","problem":60,"user":"51b41150e4b0f094dd986fac"},{"code":"(fn r\n  ([f coll] (r f (first coll) (rest coll)))\n  ([f val coll] (map #(reduce f val (take %2 coll)) (cons 0 coll) (range))))","problem":60,"user":"501d34f6e4b066e56b9d0b1e"},{"code":"(fn a-fn\n  ([f [x & xs]]\n   (lazy-seq\n    (a-fn f x xs)))\n  ([f i [x & xs]]\n   (cons i\n         (lazy-seq\n          (if x\n           (a-fn f (f i x) xs))))))","problem":60,"user":"533018b2e4b019098a6f8b56"},{"code":"(fn r \n  ([f [x & xs]] (r f x xs))\n  ([f x xs]\n   (lazy-seq\n    (if (empty? xs)\n       [x]\n       (let [v (f x (first xs))]\n         (concat [x] (r f v (rest xs)))\n         )\n     )\n    )\n   )\n)","problem":60,"user":"504f191ae4b0e7ad84dbc4ba"},{"code":"(fn newreductions\n  ([f init coll]\n   (if (seq coll)\n     (cons init (lazy-seq (newreductions f (f init (first coll)) (rest coll))))\n     (vector init)))\n  ([f coll]\n   (if (seq coll)\n     (lazy-seq (newreductions f (first coll) (rest coll)))\n     '())))","problem":60,"user":"532727bae4b09d4e7a9b54fa"},{"problem":60,"code":"(fn my-reds ([fun coll]\n                      (my-reds fun (first coll) (rest coll)))\n           ([fun init coll]\n            (if (seq coll)\n              (cons init  (lazy-seq (my-reds fun (fun init (first coll)) (rest coll))))\n              (cons init nil))))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":60,"code":"(fn r\n   ([f c] (r f (first c) (next c)))\n   ([f s c]\n       (lazy-seq\n       (if (empty? c)\n         [s]\n         (cons s (r f (f s (first c)) (next c)))))))","user":"5742ec91e4b05c31a32c0883"},{"code":"(fn seq-reductions \n  ([x y]\n    (seq-reductions x (first y) (rest y)))\n  ([x y z]\n    (seq-reductions x y z []))\n    \n  ([x y z w]\n          (if (counted? z)\n            (if (= 0 (count z))\n              (vector (reduce x y w))\n              (lazy-seq (cons (reduce x y w) (seq-reductions x y (rest z) (conj w (first z))))))\n            (lazy-seq (cons (reduce x y w) (seq-reductions x y (rest z) (conj w (first z))))))))","problem":60,"user":"4e16bdef535d04ed9115e7e9"},{"problem":60,"code":"(fn hey\n           ([x y]\n             (lazy-seq (hey x (first y) (rest y))))\n           ([x y z]\n            (if (empty? z)\n            (lazy-seq (vector y))\n            (lazy-seq (cons y (hey x (x y (first z)) (rest z)))))))","user":"60b3b375e4b0e0fa5f1b4232"},{"code":"(fn r\r\n  ([f [a & b]] (r f a b))\r\n  ([f a b]\r\n    (let [m (atom a)]\r\n      (cons a (map #(swap! m f %) b)))))","problem":60,"user":"4db858d1535d1e037afb218c"},{"code":"(fn r\n    ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (r f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (r f (f init (first s)) (rest s)))))))","problem":60,"user":"4fccdc75e4b0ee37620e186d"},{"problem":60,"code":"(fn e-60 \n  ([f coll] \n   (e-60 f (first coll) (rest coll)))\n  ([f v coll]\n    (cons v\n          (lazy-seq\n                    (when-let [xs (seq coll)]\n                      (e-60 f (f v (first xs)) (rest xs)))))))","user":"53bd7080e4b0d9a98559a6d1"},{"code":"(fn rreductions\n  ([f l] (rreductions f (first l) (rest l)))\n  ([f e l] (if (empty? l) (list e)\n             (cons e\n                   (lazy-seq (rreductions f (f e (first l)) (rest l)))))))","problem":60,"user":"52736ca1e4b03e8d9a4a747e"},{"problem":60,"code":"(fn redns\n  ([f s]\n   (lazy-seq\n     (redns f (first s) (rest s))\n     )\n    )\n  ([f init s]\n   (if (empty? s) [init]\n                  (cons init\n                        (lazy-seq\n                          (redns f (f init (first s)) (rest s)))))))","user":"525d44bfe4b0cb4875a45d6d"},{"problem":60,"code":"(let\n   [runner (fn run [f prev sq]\n             (when (seq sq) (let [result (f prev (first sq))]\n               (lazy-seq (cons result (run f result (rest sq))))\n               )))]\n   (fn sixty\n     ([f sq] (cons (first sq) (runner f (first sq) (rest sq))))\n     ([f start sq]\n      (cons start (runner f start sq)))\n     ))","user":"5ab5f60be4b073f177442643"},{"problem":60,"code":"(fn rds\n  ([f s] (rds f (first s) (rest s)))\n  ([f acc s]\n    (lazy-seq\n      (if (empty? s)\n        (cons acc ())\n        (cons acc (rds f (f acc (first s)) (rest s)))))))","user":"58b51e05e4b0ebc645576d4c"},{"code":"(fn r\n  ([f [x & s]]\n    (lazy-seq (r f x s)))\n  ([f i [x & s]]\n    (cons i\n      (when x\n        (lazy-seq (r f (f i x) s))))))","problem":60,"user":"4ee4f4a9535d1385b2869d85"},{"problem":60,"code":"(fn r\n  ([f cs] (r f (first cs) (rest cs)))\n  ([f i [c & cs]] (cons i (lazy-seq (when c (r f (f i c) cs))))))","user":"4f856adfe4b033992c121c44"},{"problem":60,"code":"(fn reds\n  ([f [x & xs]]\n   (reds f x xs))\n  ([f init [x & xs]]\n   (if x\n     (lazy-seq (cons init (reds f (f init x) xs)))\n     [init])))","user":"5a8fd113e4b05369db4d2542"},{"problem":60,"code":"(fn my-reductions\n  ([func coll]\n   (my-reductions func (first coll) (rest coll)))\n  ([func init-val [head & rest]]\n   (cons init-val \n         (lazy-seq \n          (if (not (nil? head))\n            (my-reductions func (func init-val head) rest))))))","user":"5c92105ce4b048ec896c59f7"},{"problem":60,"code":"(fn my-reduce\n  ([fx coll] (my-reduce fx (first coll) (rest coll)))\n  ([fx v-outer coll-outer]\n   (let [my-reduce-inner\n           (fn my-self [v-inner coll-inner]\n             (let [f-inner (first coll-inner)\n                   r-inner (rest  coll-inner)]\n               (if (nil? f-inner)\n                 coll-inner\n               (let [fx-result (fx v-inner f-inner)]\n                 (cons fx-result (lazy-seq (my-self fx-result r-inner)))))))]\n         (cons v-outer (my-reduce-inner v-outer coll-outer)))))","user":"5546704be4b0a04f7929953d"},{"code":"(fn rs\n  ([f [s & xs]] (rs f s xs))\n  ([f s [h & t]]\n     (if (nil? h) [s]\n         (lazy-seq (cons s (rs f (f s h) t))))))","problem":60,"user":"4e96557d535dbda64a6f6b43"},{"code":"(fn g ([f val xs] (let [step (fn [f v c]\n  \t\t\t\t  (let [s (seq c)]\n(cond (empty? s) (list v) true\n\t\t\t     (cons v (g f (f v (first s)) (rest s))))))]\n\t\t\t     (lazy-seq (step f val xs))))\n\t   ([f xs] (g f (first xs) (rest xs))))","problem":60,"user":"50563ae2e4b0ce54f56f0405"},{"problem":60,"code":"(fn r\n\t([f i c] (cons i (lazy-seq (if (empty? c) nil (r f (f i (first c)) (rest c))))))\n\t([f c] (r f (first c) (rest c))))","user":"54cbe00ee4b057c6fda3a285"},{"problem":60,"code":"(fn my-fn\n  ([f xs]\n   (my-fn f (f (first xs)) (rest xs)))\n  ([f init xs]\n   (let [x (first xs)]\n     (lazy-seq (cons init\n                     (when x\n                       (my-fn f (f init x) (rest xs))))))))","user":"5c896f46e4b048ec896c5940"},{"problem":60,"code":"(fn reduce-seq\n  ([fun items] (reduce-seq fun (first items) (rest items)))\n  ([fun initial items]  \n    (letfn [(reduce-int\n              [fun initial items]                    \n              (if (empty? items)\n                ()\n                (let [current (fun initial (first items))]\n                  (cons current (lazy-seq (reduce-int fun current (rest items)))))))]\n      (cons initial (reduce-int fun initial items)))))","user":"57d9bca1e4b0bd073c202405"},{"code":"(fn rec\n        ([f [n & ns]]\n\t\t  (rec f n ns))\n\t      ([f n [m & ms]]\n\t\t  (if m\n\t\t      (cons n (lazy-seq (rec f (f n m) ms)))\n\t\t      [n])))","problem":60,"user":"4ee82223535d93acb0a66877"},{"code":"(fn my-reductions\r\n  ([f coll]      (my-reductions f (first coll) (rest coll)))\r\n\t([f init coll]\r\n\t\t(lazy-seq\r\n\t\t\t(cons\r\n\t\t\t\tinit\r\n\t\t\t\t(if (seq coll)\r\n\t\t\t\t\t(my-reductions f (f init (first coll)) (rest coll))\r\n\t\t\t\t\tnil)))))","problem":60,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":60,"code":"(fn reds\n    ([f x] (reds f (first x) (rest x)))\n    ([f s x] (map-indexed (fn [i v] (reduce f s (take i x))) (conj x s))))","user":"5446ebc2e4b032a45b8693b8"},{"problem":60,"code":"(fn red\n  ([f c]\n   (if (empty? c)\n     ()\n     (let [res (f (first c))]\n       (red f res (rest c)))))\n  ([f i0 c]\n   (if (empty? c)\n     (list i0)\n     (let [res (f i0 (first c))]\n       (lazy-seq (cons i0 (red f res (rest c))))))))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"(fn __ \n  ([f coll]\n    (__ f (first coll) (rest coll)))\n  ([f init_ coll]\n    (if (seq coll)\n      (cons \n        init_\n        (lazy-seq\n          (__ \n            f\n            (f init_ (first coll))\n            (rest coll)\n          )\n        )\n      )\n      [init_]\n    )\n  )\n    )","problem":60,"user":"52485723e4b05ef8e38e63d2"},{"problem":60,"code":"(fn reduction-steps\n     ([f seq]\n      (reduction-steps f (first seq) (rest seq)))\n     ([f init seq]\n      (if (empty? seq)\n        (cons init nil)\n        (lazy-seq (cons init (reduction-steps f (f init (first seq)) (rest seq)))))))","user":"58152157e4b0f478707a0631"},{"problem":60,"code":"(fn lazy-it\n  ([f coll]\n   ((fn it\n      ([] (it nil coll))\n      ([agg [head & tail]]\n       (lazy-seq\n         (let [agg (if agg (f agg head) head)]\n           (cons agg (it agg tail))))))))\n  ([f init [head & tail]]\n   (if head (lazy-seq\n              (cons init\n                    (lazy-it f (f init head) tail)))\n            (lazy-seq (vector init)))))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":60,"code":"(fn reductions* \n   ([f xs]\n    (reductions* f (first xs) (rest xs)))\n   ([f init xs]\n    (if (seq xs)\n      (let [nv (f init (first xs))]\n        (cons init (lazy-seq (reductions* f nv (rest xs)))))\n      (list init))))","user":"540e17c3e4b0addc1aec6719"},{"code":"(fn r3duct10ns\n  ([f x [y & r]] (lazy-seq (cons x (if y (r3duct10ns f (f x y) r)))))\n  ([f [x & r]] (r3duct10ns f x r)))","problem":60,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":60,"code":"(fn my-reductions\n  ([f in]\n    (my-reductions f (first in) (next in)))\n  ([f start in]\n    (lazy-seq\n    \t(cons start\n            (if (seq in)\n              (my-reductions f (f start (first in)) (next in)))))))","user":"5b107263e4b0cc2b61a3be22"},{"problem":60,"code":"(fn [& p]\n        (let [f (first p)\n              fp (if (= 3 (count p)) (second p) (first (last p)))\n              lp (if (= 3 (count p)) (last p) (rest (second p)))]\n          (cons fp\n                (map #(apply f (cons fp %))\n                     (map-indexed (fn [i x] (take (inc i) lp)) lp)))))","user":"544e6b7fe4b0e39780006986"},{"problem":60,"code":"(fn rd \n  ([f i s] \n    (if (empty? s) \n      [i]\n      (lazy-seq \n        (cons i \n              (rd f \n                  (f i (first s)) \n                  (rest s))))))\n  ([f s] (rd f \n             (first s) \n             (rest s))))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":60,"code":"(fn my-reductions\n    ([f s]\n        (my-reductions f (first s) (rest s)))\n    ([f res s]            \n        (cons res\n            (lazy-seq \n                (if (not (empty? s))\n                    (my-reductions f (f res (first s)) (rest s)))))))","user":"53a94b63e4b047364c044434"},{"code":"(letfn [(myreductions \r\n  ([f v l]\r\n    (cons v\r\n          (lazy-seq\r\n            (when-let [s (seq l)]\r\n              (myreductions f (f v (first s)) (rest s))))))\r\n  ([f l] (lazy-seq (myreductions f (first l) (rest l)))))]\r\n       myreductions)","problem":60,"user":"4f29cdc8e4b0d6649770a033"},{"code":"(fn redux\r\n  ([f coll]\r\n   (redux f (first coll) (rest coll)))\r\n  ([f v coll]\r\n   (cons v\r\n    (lazy-seq\r\n      (if-let [s (seq coll)]\r\n        (redux f (f v (first s)) (rest s))\r\n        nil)))))","problem":60,"user":"50464831e4b011c5dfee771f"},{"code":"(fn reductionz\n  ([f v s] (lazy-seq (reductionz f (cons v s))))\n  ([f s]\n    (lazy-seq\n      (if (nil? (second s))\n        (seq s)\n        (cons (first s) (reductionz f (cons (f (first s) (second s)) (drop 2 s))))))))","problem":60,"user":"4fa3f91fe4b081705acca196"},{"problem":60,"code":"(fn r\n  ([f [v & l]] (r f v l))\n  ([f v [h & t]] (cons v (and h (lazy-seq (r f (f v h) t)))))\n)","user":"55337e61e4b09218d5f44f8e"},{"problem":60,"code":"(fn red\n  ([f elems] (red f (first elems) (rest elems)))\n  ([f acc elems]   \n   (cons acc \n         (when-let [next-val (first elems)] (lazy-seq (red f (f acc next-val) (rest elems)))))))","user":"543f854fe4b032a45b86935b"},{"problem":60,"code":"(fn [f oh & [ot]]\n  (letfn \n    [(reds [f h [ft & t]]\n    \t(let [x (f h ft)] \n      \t(if t \n        \t(lazy-seq (cons x (reds f x t)))\n        \t[x])))]\n    (if ot\n      (cons oh (reds f oh ot))\n      (cons (first oh) (reds f (first oh) (drop 1 oh))))))","user":"53f3a4ace4b0742d9025b0f7"},{"problem":60,"code":"(fn seq-red\n    ([f xs]\n     (seq-red f (first xs) (drop 1 xs)))\n    ([f init xs]\n     (lazy-seq\n       (if (seq xs)\n         (cons init (seq-red f (f init (first xs)) (rest xs)))\n         (cons init xs)))))","user":"5c165d3ee4b01240ff5671d1"},{"problem":60,"code":"(fn sequence-reductions\n  ([f coll] (sequence-reductions f (first coll) (next coll)))\n  ([f val coll]\n   (letfn [(helper [value result collection]\n                   (if (not (empty? (seq collection)))\n                     (cons value\n                           (lazy-seq (let [new-val (f value (first collection))]\n                                          (helper new-val (cons value result) (next collection)))))\n                     [value]))]\n          (helper val [] coll))))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn reductions2\n  ([f s] (reductions2 f (first s) (rest s)))\n  ([f initial s]\n   (lazy-seq\n    (if (seq s)\n      (let [nxt (f initial (first s))]\n        (cons\n         initial\n         (reductions2 f nxt (rest s))))\n      (list initial)))))","problem":60,"user":"4f28c979e4b0d6649770a01a"},{"problem":60,"code":"(fn reduc\n  ([f coll] (reduc f (first coll) (rest coll)))\n  ([f init coll]\n   (if (seq coll)\n     (lazy-seq\n      (cons init\n            (reduc f\n                   (f init\n                      (first coll))\n                   (rest coll))))\n     (lazy-seq\n      (cons init\n            nil)))))","user":"5829d9f8e4b051871117bf4d"},{"problem":60,"code":"(fn reduction\n  ([func xs] (reduction func (first xs) (rest xs)))\n  ([func init xs]\n      (lazy-seq\n         (if (empty? xs)\n           (list init)\n           (let [inter-result (func init (first xs))]\n             (cons init (reduction func inter-result (rest xs))))))))","user":"5553b729e4b0deb715856e05"},{"problem":60,"code":"(fn my-reductions'\n  ([f [head & tail :as coll]]\n   (if (empty? coll)\n     (lazy-seq [(f)])\n     (my-reductions' f head tail)))\n  ([f start [head & tail :as coll]]\n   (lazy-seq\n     (cons start (when (not-empty coll)\n                  (my-reductions' f\n                                  (f start head)\n                                  tail))))))","user":"60396c95e4b0d5df2af222f4"},{"problem":60,"code":"(fn seq-red\n    ([f coll]\n     (drop 1 (seq-red f (f) coll)))\n    ([f default coll]\n     (lazy-seq (cons default\n                     (if coll\n                        (seq-red f\n                                 (f default\n                                    (first coll))\n                                 (next coll)))))))","user":"5974d2ede4b01722bebd4cb6"},{"code":"(fn red ([f coll] (red f (first coll) (rest coll)))\n  ([f v coll] \n    (lazy-seq\n      (if (empty? coll)\n        [v]\n        (cons v (red f (f v (first coll)) (rest coll)))))))","problem":60,"user":"4eb2eae5535d7eef30807351"},{"code":"(fn r \n  ([f [x & xs]] (r f x xs))\n  ([f x [y & ys :as coll]]\n    (if (empty? coll)\n      (list x)\n      (lazy-seq (cons x (r f (f x y) ys))))))","problem":60,"user":"4ded27db535d08e6dec9fe0a"},{"problem":60,"code":"(fn rds\n   ([f s]\n      (rds f (first s) (rest s)))\n   ([f i s]\n      (cond (not (empty? s)) (lazy-seq (cons i (rds f (f i (first s)) (rest s))))\n            :else (cons i nil))))","user":"52fac708e4b047fd55836fff"},{"problem":60,"code":"(fn reduct\n  ([op col]\n   (reduct op (first col) (rest col)))\n  ([op arg [f & r :as sequ]]\n   (cons arg (\n               lazy-seq(\n                         if (seq sequ)\n                         (reduct op (op arg f) r))))))","user":"5cbd66e2e4b026601754b9f8"},{"code":"(fn __ \n  ([f init args]\n   (if (empty? args) (list init) \n     (lazy-seq (cons init (__ f (f init (first args)) (rest args))))))\n  ([f args]\n   (__ f (first args) (rest args))))","problem":60,"user":"4f841b23e4b033992c121c29"},{"problem":60,"code":"(fn red \n  ([f [a & s]] (red f a s))\n  ([f a [c & s]] \n   (if s \n     (lazy-seq (cons a (red f (f a c) s)))\n                   \t   [a (f a c)])))","user":"4f3b5219e4b0e243712b1f2a"},{"problem":60,"code":"(fn red\n  ([f x]\n   (red f (first x) (rest x)))\n  ([f x y] \n   (cons x\n         (lazy-seq (when-let [s (seq y)]\n           (red f (f x (first y)) (rest s)))))))","user":"5470b3d0e4b00cfc9eacc1bb"},{"code":"(fn rds\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (rds f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (rds f (f init (first s)) (rest s)))))))","problem":60,"user":"4faac363e4b081705acca200"},{"problem":60,"code":"(fn me \n  ([f s] \n   (me f (first s) (rest s))\n  ) \n  ([f i s]\n    (let [r (f i (first s)) t (rest s)](cons i (if (empty? t) [r] (lazy-seq (me f r t)))))\n  )    \n)","user":"54aa373de4b09f271ff37cb6"},{"problem":60,"code":"(fn solve\n  \n  ( [f arg] (solve f (first arg) (rest arg)))\n  \n  ( [f z arg]  (lazy-seq \n                (if (empty? arg) [z]\n                    (let [head (f z (first arg))]\n                       (cons  z (solve f head  (rest arg)))\n                 \n                  )))))","user":"564127a9e4b08d4f616f5ef3"},{"problem":60,"code":"(fn f\n  ([op a] (f op (first a) (rest a)))\n  ([op a b]\n   (if (seq b)\n     (lazy-seq (cons a (f op (op a (first b)) (rest b))))\n     [a])))","user":"56795deae4b05957ce8c6187"},{"problem":60,"code":"(fn my-reductions\n  ([f l] (my-reductions f (first l) (rest l)))\n  ([f x xs]\n   (cons x\n     ((fn aux [f x xs]\n        (if (empty? xs)\n          (list)\n          (let [res (f x (first xs))]\n            (cons res (lazy-seq (aux f res (rest xs)))))))\n      f x xs))))","user":"565e0934e4b068f2fe63dc30"},{"problem":60,"code":"(fn ss\n  ([f coll] (ss f (first coll) (rest coll)))\n  ([f val coll]\n   (cons val\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (ss f (f val (first s)) (rest s)))))))","user":"5c2836ebe4b07e362c2305d4"},{"problem":60,"code":"(fn sequence-reductions\n  ([f seq] (sequence-reductions f (first seq) (rest seq)))\n  ([f val seq]\n   (letfn [(iter [last-x xs]\n             (if (empty? xs) [last-x]\n                 (cons last-x (lazy-seq\n                               (iter (f last-x (first xs))\n                                     (rest xs))))))]\n     (iter val seq))))","user":"5f0aa72de4b09a3f05b71808"},{"code":"(fn ([f x] (for [n x] (reduce f (take (inc n) x))))\n   ([f i x] (cons i (for [[_ n] (map list x (range))] (reduce f i (take (inc n) x)))))\n   )","problem":60,"user":"4e951ce5535dbda64a6f6b2e"},{"problem":60,"code":"(fn reduce-intermediate\n  ([f coll]\n   (reduce-intermediate f (first coll) (rest coll)))\n  ([f init coll]\n   (if (seq coll)\n     (let [res (f init (first coll))]\n       (lazy-seq (cons init (reduce-intermediate f\n                                                 res\n                                                 (rest coll)))))\n     (lazy-seq [init]))))","user":"5ef8e9e0e4b09b61f08553cb"},{"problem":60,"code":"(fn re\n  ([f coll]\n   (re f (first coll) (rest coll)))\n\n  ([f init coll]\n   (re (fn [acc val] (if (nil? acc) val (f acc val)))\n       nil\n       init\n       coll))\n\n  ([f acc val coll]\n   (lazy-seq\n    (when-not (nil? val)\n      (let [new-acc (f acc val)]\n        (cons new-acc (re f new-acc (first coll) (rest coll))))))))","user":"60537cd1e4b04c8f2157d152"},{"code":"(fn red\n  ([f xs] (red f (first xs) (rest xs)))\n  ([f i xs]\n   (if (empty? xs)\n     [i]\n     (cons i (lazy-seq (red f (f i (first xs)) (rest xs))\n                       )))))","problem":60,"user":"4ea365e2535d7eef308072c5"},{"code":"(fn [f & args]\n  (let [has-init (= 2 (count args))\n        init (if has-init (first args) (first (first args)))\n        coll (if has-init (second args) (rest (first args)))]\n    (->>  [init coll]\n          (iterate (fn [[so-far remaining]]\n                     [(f so-far (first remaining))\n                      (rest remaining)]))\n          (split-with #(not-empty (second %)))\n          (#(concat (first %) (lazy-seq (list (first (second %))))))\n          (map first))))","problem":60,"user":"51a3b135e4b0e77c4ca60bf6"},{"problem":60,"code":"(fn r\n  ([f s] (if (empty? s)\n           nil\n           (r f (first s) (rest s))))\n  ([f v s]\n   (cons v (lazy-seq (if (empty? s)\n                       '()\n                       (r f (f v (first s)) (rest s)))))))","user":"4f5eda39e4b0030a34fb2b56"},{"problem":60,"code":"(fn seqred\n  ([f v s]\n      (concat [v] (map-indexed (fn [i e] (reduce f v (take (inc i) s))) s)))\n  ([f s]\n      (seqred f (first s) (rest s))))","user":"5abe2fc2e4b073f17744271e"},{"problem":60,"code":"(fn f\n  ([g coll] (f g (first coll) (next coll)))\n  ([g val coll]\n   ((fn m [prev coll]\n       (if (empty? coll)\n         (list prev)\n         (let [next-val (g prev (first coll))]\n           (lazy-seq (cons prev\n                           (m next-val (next coll)))))))\n    val coll)))","user":"58b06b7ce4b0ebc645576cdc"},{"code":"(fn _\n  ([f [h & r]] (_ f h r))\n  ([f i [h & r]]\n   (lazy-seq\n    (cons i\n          (when h\n            (_ f (f i h) r))))))","problem":60,"user":"523ed522e4b057c4b7cd0a78"},{"problem":60,"code":"(fn redus\n  ([f lst] (redus f (first lst) (rest lst)))\n  ([f init lst]\n   (cond\n     (empty? lst)\n     [init]\n     :else\n     (cons init (lazy-seq (redus f (f init (first lst)) (rest lst))))\n   )\n  )\n)","user":"5943abb6e4b060784b3b792b"},{"problem":60,"code":"(fn reds\n  ([f coll]\n   (lazy-seq\n    (if-let [s (seq coll)]\n      (reds f (first s) (rest s))\n      (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (reds f (f init (first s)) (rest s)))))))","user":"604ccb9fe4b0b7ec0ac60ac1"},{"code":"(fn my-reduce\n  ([f s]\n   (my-reduce f (first s) (rest s))) \n  ([f acc s]\n   (lazy-seq (cons acc\n    (if (seq s)\n      (my-reduce f (f acc (first s)) (rest s)))))))","problem":60,"user":"50783762e4b0fc74642bff67"},{"problem":60,"code":"(fn myreduce++\n  ([f [c0 & crest]] (myreduce++ f c0 crest))\n  ([f acc [c0 & crest]]\n   (if (nil? c0) (list acc)\n       (cons acc (lazy-seq (myreduce++ f (f acc c0) crest))))))","user":"54145050e4b01498b1a719ea"},{"problem":60,"code":"(fn reduc\n  ([f init coll]\n   (lazy-seq (cons init (if (empty? coll) [] (reduc f (f init (first coll)) (rest coll))))))\n  ([f coll]\n   (reduc f (first coll) (rest coll))))","user":"5fa74b82e4b0fa27300f3dda"},{"code":"(fn res\n  ([f coll]\n    (lazy-seq\n      (if-let [s (seq coll)]\n        (res f (first s) (rest s)) (list (f)))))\n  ([f init coll]\n    (cons init\n      (lazy-seq\n        (when-let [s (seq coll)] (res f (f init (first s)) (rest s)))))))","problem":60,"user":"503354c3e4b0c6c1199c710c"},{"code":"(fn reducing\n  ([f c] (reducing f (first c) (next c)))\n  ([f e c]\n   (if (seq c)\n     (lazy-seq (cons e (reducing f (f e (first c)) (next c))))\n     (cons e nil))))","problem":60,"user":"4eae5fe4535d7eef30807325"},{"problem":60,"code":"(fn [f & args]\n   (let [[init coll] (if (= 1 (count args))\n                       [(-> args first first) (-> args first rest)]\n                       [(first args) (-> args rest first)])]\n     (letfn [(another [f init coll]\n               (if (empty? coll)\n                 (list init)\n                 (cons init\n                       (lazy-seq\n                        (if-let [s (seq coll)]\n                          (another f (f init (first s)) (rest s)))))))]\n       (another f init coll))))","user":"606a70a5e4b069485764ddf2"},{"code":"(fn q \n                    ([op x] (q op (first x)  (rest x)))  \n                     ([op p x] (lazy-seq (if (empty? x) [p] (cons  p (q op (op p (first x)) (rest x))))))\n                     )","problem":60,"user":"50ef3e5de4b0a78662fa2652"},{"problem":60,"code":"(fn r\n\t([f v] (r f (first v) (rest v)))\n\t([f a v]\n\t\t(cons a\n\t\t\t(lazy-seq\n\t\t\t\t(when-let [[x & s] (seq v)]\n\t\t\t\t\t(r f (f a x) s))))))","user":"536e5b68e4b0fc7073fd6e6d"},{"code":"(fn reducs \r\n   ([f coll]\r\n     (lazy-seq\r\n      (if-let [s (seq coll)]\r\n        (reducs f (first s) (rest s))\r\n        (list (f)))))\r\n  ([f init coll]\r\n     (cons init\r\n           (lazy-seq\r\n            (when-let [s (seq coll)]\r\n              (reducs f (f init (first s)) (rest s)))))))","problem":60,"user":"4ef1ee67535dced4c769f219"},{"problem":60,"code":"(fn seq-red ([f val coll]\n  (if (empty? coll) [val]\n      (lazy-seq (cons val (seq-red f (f val (first coll)) (rest coll))))))\n  ([f coll] (seq-red f (first coll) (rest coll))))","user":"5897dda4e4b00487982d52c8"},{"problem":60,"code":"(fn r[& z]\n   (let [[a b c] z]\n   (if (nil? c)\n     (r a (first b) (rest b))\n     (let [[x y] c\n           s (a b x)]\n       (if (nil? y)\n         (list b s)\n         (lazy-seq (cons b (r a s (rest c)))))))))","user":"53ed2fafe4b0d648e757f4c1"},{"problem":60,"code":"(fn q\n  ([f d]\n   (q f (first d) (rest d)))\n  ([f a d]\n   (lazy-seq\n    (if (empty? d)\n      (list a)\n      (cons a (q f (f a (first d)) (rest d)))))))","user":"603ae21de4b0d5df2af222fb"},{"problem":60,"code":"(fn my-reducts\n          ([f sequence]\n           (my-reducts f (first sequence) (rest sequence)))\n          ([f state sequence]\n           (lazy-seq\n            (when-not (nil? state)\n              (cons\n               state\n               (my-reducts\n                f\n                (if (empty? sequence)\n                  nil\n                  (f state (first sequence)))\n                (rest sequence)))))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":60,"code":"(fn redux\n  ([op ini coll]\n   ((fn helper [op prev remain]\n      (if (empty? remain)\n        [prev]\n        (let [cur (op prev (first remain))]\n          (cons prev (lazy-seq (helper op cur (rest remain))))))) op ini coll))\n  ([op coll] (redux op (first coll) (rest coll))))","user":"5746061ae4b009280f9f2b5b"},{"problem":60,"code":"(fn seq-reduction\n  [f & more]\n  ( let [ more (flatten more)\n         init  ( if (= f conj) (vector (first more)) (first more))\n         coll  (rest more)\n         res   (map first\n                    (iterate\n                     (fn [[init coll]]\n                       (if (empty? coll)\n                         [init []]\n                         [(f init (first coll))(rest coll)]))\n                     [init coll]))]\n    ( if-not (= f +)\n      (take (count more) res )\n      res)))","user":"5594e0e3e4b0c79f6e1db95b"},{"problem":60,"code":"(fn lazyred\n             ([fun src]\n              (lazyred fun (first src) (rest src)))\n             ( [ fun val src ]\n              ( lazy-seq\n               ( cons val\n                ( if-not ( empty? src ) ( lazyred fun ( fun val ( first src ) ) ( rest src ) ) ) ) ) ) )","user":"5d5c6675e4b09db18d4482ec"},{"problem":60,"code":"(fn [f p1 & [p2]]\n           (letfn [(reduce* [a b]\n                     (when-let [s (seq b)]\n                       (let [v (f a (first s))]\n                         (lazy-seq (cons v (reduce* v (rest s)))))))]\n             (if (nil? p2) (cons (first p1) (reduce* (first p1) (rest p1))) (cons p1 (reduce* p1 p2)))))","user":"5f3f2281e4b004f08c61c561"},{"problem":60,"code":"(fn rdns ([f x] (rdns f (first x) (rest x)))\n        ([f init x]\n(letfn [(rdn [f init x]\n         (lazy-seq\n         (if (seq x) (let [y (f init (first x))] (cons y (rdn f y (rest x))))\n         ()\n         )\n         )\n)] (cons init (rdn f init x)))))","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":60,"code":"(fn t\n   ([f a] (t f (first a) (rest a)))\n   ([f i a]\n    (if (empty? a)  [i]\n      (lazy-seq (cons i (t f (f i (first a)) (rest a)))))))","user":"57d9f603e4b0bd073c20240a"},{"problem":60,"code":"(fn red\n   ([f coll] (red f (first coll) (rest coll)))\n   ([f v coll] (cons v (lazy-seq\n                        (when-let [s (seq coll)]\n                          (red f (f v (first s)) (rest s))))))\n   )","user":"535eaa73e4b04ce2eb3ed2d4"},{"problem":60,"code":"(fn reductor\n  ([f xs]\n   (reductor f (first xs) (rest xs)))\n  ([f x xs]\n   (lazy-seq\n    (if (empty? xs)\n      (list x)\n      (cons x (reductor f (f x (first xs)) (rest xs)))))))","user":"5adf5f9be4b0837691e92c33"},{"problem":60,"code":"(fn my-reduction\n  ([f s] (lazy-seq (my-reduction f (first s) (rest s))))\n  ([f val s]\n   (if (empty? s) [val]\n                  (lazy-seq (cons val (my-reduction f (f val (first s)) (rest s)))))))","user":"5632b0a9e4b0bfe05bf117a8"},{"problem":60,"code":"(fn _reductions\n  ([fun [a & r]] (_reductions fun a r))\n  ([fun init coll] \n     (lazy-seq\n      (cons init\n            (if (first coll)\n              (_reductions fun\n                           (fun init (first coll))\n                           (next coll))\n              ())))))","user":"54848141e4b0e286459a119e"},{"code":"(fn reducts \n  ([f c] (reducts f (first c) (rest c)))\n  ([f i c]\n   (if (empty? c) [i]\n     (lazy-cat [i] (reducts f (f i (first c)) (rest c))))))","problem":60,"user":"51e00020e4b01188f0627534"},{"problem":60,"code":"(fn rd\n  ([f coll]\n   (rd f (first coll) (next coll)))\n  ([f v coll]\n   (if (nil? coll)\n     [v]\n     (lazy-seq (cons v (rd f (f v (first coll)) (next coll)))))))","user":"5162757ee4b03cfa3774b3fe"},{"problem":60,"code":"(fn myred\n    ([r data remaining]\n     (cond\n       (empty? remaining)\n       (list data)\n\n       :else\n       (let [newdata (r data (first remaining))]\n         (lazy-seq\n          (cons\n           data\n           (myred r newdata (rest remaining))\n           )\n          )\n         )\n       ))\n\n    ([r remaining] (myred r (first remaining) (rest remaining)))\n    )","user":"5f06caa7e4b0cf489e8d7f52"},{"problem":60,"code":"(fn my-reductions;;;; my reduction is function name like loop \n  ([f xs] (my-reductions f (first xs) (rest xs))) ;;when we use [f xs] and [f a xs]\n  ([f a xs] ;;; what is f-take and a is 5? and range is xs;;when we create [f xs] [f a xs]\n   (lazy-seq  ;;; I didn't understand this function description on clojuredocs lazy-seq also refers to realize? which is mystery; \n     (if (empty? xs)\n       (list a)\n       (cons a (my-reductions f (f a (first xs)) (rest xs)))))));; my reduction is a function name which acts as recur \n\n;;;;idea of lazy-seq Evaluation of an expression is delayed until the value is needed\n;;;;(cons 1 '(2 3 4 5 6))\n;;=> (1 2 3 4 5 6)","user":"5ce5b43be4b0a17bb84e2b7a"},{"problem":60,"code":"(fn reductions'\n  ([op l] (reductions' op (first l) (rest l)))\n  ([op acc l]\n   (let [[[x] xs] (split-at 1 l)\n         val (op acc x)]\n     (if-not (empty? xs)\n       (cons acc (lazy-seq (reductions' op val xs)))\n       (list acc val)))))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn my-reduction\n  ([f coll]\n    (letfn [(step [f coll]\n              (if (nil? (second coll))\n                []\n                (lazy-seq\n                  (let [mid-result (f (first coll) (second coll))]\n                    (cons\n                      mid-result\n                      (step f (cons mid-result (drop 2 coll))))))))]\n      (cons (first coll) (step f coll))))\n  ([f val coll]\n    (my-reduction f (cons val coll))))","problem":60,"user":"514d7e29e4b019235f6c0587"},{"code":"(fn reductions-\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reductions- f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init (lazy-seq\n                 (when-let [s (seq coll)]\n                   (reductions- f (f init (first s)) (rest s)))))))","problem":60,"user":"5163a7bbe4b055933a9ca02f"},{"code":"(fn __\n  ([f [x & coll]] (__ f x coll))\n  ([f res [x & coll]]\n     (if x\n       (lazy-seq (cons res (__ f (f res x) coll)))\n       [res])))","problem":60,"user":"4ec9549d535d6d7199dd36fe"},{"problem":60,"code":"(fn red \n    ([func s] (red func (first s) (rest s)))\n    ([func initial s] \n        (if (not= s [])\n        (let [ret (func initial (first s))] \n            (cons initial (lazy-seq (red func ret (rest s)))))\n        [initial])))","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn rd\n  ([f l]\n    (rd f (first l) (rest l))\n    )\n  ([f i l]\n    (lazy-seq\n    (if-let [s (seq l)]\n    (cons i\n      (rd f (f i (first s)) (rest s))\n      )\n    (list i)\n    )))\n)","problem":60,"user":"4e6e10d8535d5021c1a895fd"},{"problem":60,"code":"(fn redux \n    ([f coll] (redux f (first coll) (rest coll)))\n    ([f initial coll]\n        ((fn step \n            ([] (step coll initial))\n            ([values acc]\n            (let [value (first values)\n                new-acc (f acc value)]\n                (if (empty? (rest values))\n                    (lazy-seq [acc new-acc])\n                    (lazy-seq (cons acc (step (rest values) new-acc))))))))))","user":"5a66fddee4b0512ff01cd9d7"},{"code":"(fn [& args] (letfn\n               [(wrapper\n                 ([f init xs] (cons init (my-reductions f init xs)))\n                 ([f xs] (wrapper f (first xs) (rest xs))))\n                (my-reductions\n                 [f x xs]\n                 (lazy-seq\n                  (when-let [s (seq xs)]\n                    (let [[y & ys] xs\n                          z (f x y)]\n                      (cons z (my-reductions f z ys))))))]\n               (apply wrapper args)))","problem":60,"user":"51307b84e4b08c712d3fae39"},{"problem":60,"code":"(fn seqred\n  ([f coll]\n    (if (empty? coll)\n      '()\n      (seqred f (first coll) (rest coll))))\n  ([f init coll]\n    (if (empty? coll)\n      (list init)\n      (cons init (lazy-seq (seqred f (f init (first coll)) (rest coll)))))))","user":"57625c18e4b0994c1922fba4"},{"code":"(fn reductions*\n  ([f [init & coll]] (reductions* f init coll))\n  ([f init [head & tail :as coll]]\n     (lazy-seq\n      (cons init\n            (when (seq coll)\n              (reductions* f (f init head) tail))))))","problem":60,"user":"4dda44f2535d02782fcbe9f1"},{"problem":60,"code":"(fn r\n         ([f c] (drop 1 (r f (f) c)))\n         ([f acc c] (if (empty? c)\n                      (list acc)\n                      (cons acc (lazy-seq (r f (f acc (first c)) (rest c)))))))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":60,"code":"(fn my-reductions\n  ([f xs]\n   (my-reductions f (first xs) (rest xs)))\n  ([f x [a & b]]\n    (if (= a nil)\n      (list x)\n      (cons x (lazy-seq (my-reductions f (f x a) b))))))","user":"5606ea56e4b08b23635d317b"},{"problem":60,"code":"(fn lazy-reduce\n  ([f coll]\n   (lazy-reduce f (first coll) (rest coll)))\n  ([f acc coll]\n   (lazy-seq\n    (if (empty? coll)\n      (list acc)\n      (cons acc (lazy-reduce f\n                             (f acc (first coll))\n                             (rest coll)))))))","user":"58d2af83e4b03c36ff7e5907"},{"problem":60,"code":"(fn my-reductions\n  ([func [first-element & remain]]\n   (my-reductions func first-element remain )) ;multi-arity\n  ([func init a-seq]\n   (if (empty? a-seq)\n     (list init)\n     (let [da-val (func init (first a-seq))]\n       (lazy-seq (cons  init (my-reductions func da-val (rest a-seq))))))))","user":"580d2788e4b0849f6811b730"},{"problem":60,"code":"(fn reduc\n  ([f coll] (reduc f (first coll) (rest coll)))\n  ([f init coll]\n   (let [value (f init (first coll))]\n   \t(cons init \n          (if \n            (empty? (rest coll)) [value]\n            (lazy-seq (reduc f value (rest coll))))))))","user":"50be9b4ae4b00fb48fed2ef6"},{"problem":60,"code":"(fn reduce2\n  ([f initial coll]\n   (lazy-seq\n     (if (not (empty? coll))\n       (let [r (f initial (first coll))]\n         (cons initial\n               (reduce2 f r (rest coll)))\n         )\n       (cons initial '())\n       )\n     ))\n  ([f coll] (reduce2 f (first coll) (rest coll)))\n  )","user":"53ca41dae4b00fb29b2212c8"},{"problem":60,"code":"(fn my-reductions\n  ([f s]\n   (if (empty? s)\n     (f)\n     (my-reductions f (first s) (rest s))))\n  ([f current s]\n   (lazy-seq\n     (cons current\n           (if (empty? s)\n             '()\n             (my-reductions f (f current (first s)) (rest s)))))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":60,"code":"(fn p60\n  ([f acc cs]\n   (cons acc\n         (when-let [ss (seq cs)] (lazy-seq (p60 f (f acc (first ss)) (rest ss))))))\n  ([f [c1 & cs]]\n   (p60 f c1 cs)))","user":"5fa17538e4b0f0ebd91b77e3"},{"problem":60,"code":"(fn rs\n  ([f xs] (rs f (first xs) (rest xs)))\n  ([f init xs]\n   (lazy-seq\n    (cons init (if (seq xs) (rs f (f init (first xs)) (rest xs)))))))","user":"59d8f23ae4b0ef0a1e9b5c49"},{"problem":60,"code":"(fn myreductions\n  ([f se] (myreductions f (first se) (rest se)))\n  ([f a se] (cons a (lazy-seq (if (first se) (myreductions f (f a (first se)) (rest se)))))))","user":"52747090e4b03e8d9a4a74a5"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f val coll]\n   (if-let [first (first coll)]\n     (cons val (lazy-seq (my-reductions f\n                                        (f val first)\n                                        (rest coll))))\n     (list val))))","user":"55586905e4b0deb715856e2b"},{"code":"(fn myreduce \n  ([f col]\n   (myreduce f \n                             (f (first col))\n                             (rest col))\n   ) ; 2 params\n  ([f init [x & col]]\n   (cons init\n         (lazy-seq (when x (myreduce f\n                             (f init x)\n                             col\n                             ) ; myreduce call\n                     ) ; when\n                   )) ; cons\n   ) ; 3 params\n  ) ; fn myreduce","problem":60,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":60,"code":"(fn my-reductions \n  ([f coll] \n     (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq \n   \t(if-let [s (seq coll)]\n     (cons init (my-reductions f (f init (first s)) (rest s)))\n     (list init)))))","user":"55eb026de4b0121d4835fdb7"},{"problem":60,"code":"(fn my-reduct\n    ([func coll]\n       (my-reduct func (first coll) (rest coll)))\n\n    ([func firstArg coll]\n      (letfn [(reduct [f init se]\n                (lazy-seq (when-not (empty? se)\n                            (let [res (f init (first se))]\n                              (cons res (reduct f res (rest se)))))))]\n        (lazy-seq (cons firstArg (reduct func firstArg coll))))))","user":"575ef4b6e4b08062f99a4e78"},{"problem":60,"code":"(fn reds\n  ([f coll]\n   (if (empty? coll)\n     (lazy-seq (list (f)))\n     (reds f (first coll) (rest coll))))\n  ([f init coll]\n   (lazy-seq\n     (cons init (when-let [s (seq coll)]\n                  (reds f (f init (first s)) (rest s)))))))","user":"4eb70649535d7eef30807373"},{"problem":60,"code":"(fn rdct ([f [x & xs]] (rdct f (f x) xs))\n         ([f acc [x & xs]] (cons acc (if (nil? x) nil (lazy-seq (rdct f (f acc x) xs))))))","user":"5b924123e4b0c0b3ffbd4a34"},{"code":"(fn r\n  ([f [x & xs]] (r f x xs))\n  ([f acc [x & xs]] (if (nil? x) [acc] (lazy-seq (cons acc (r f (f acc x) xs))))))","problem":60,"user":"50742549e4b054001656accf"},{"code":"(fn x \n  ([f p [e & l]]\n   (lazy-seq\n     (let [n (f p e)]\n       (if l\n         (cons p (x f n l))\n         (list p n)))))\n  ([f [e & l]]\n   (x f e l)))","problem":60,"user":"4f32a7f1e4b0d6649770a095"},{"problem":60,"code":"(fn F ([f s] (if (empty? s) [] (F f (first s) (rest s))))\n      ([f v s] (if (empty? s) [v] (lazy-seq (cons v (F f (f v (first s)) (rest s)))))))","user":"5db92996e4b010eb3c36cd50"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n    (my-reductions f (first coll) (rest coll)))\n  ([f initial coll]\n    (let [[h & t] coll]\n      (cons initial\n        (lazy-seq \n          (if (seq coll)\n            (my-reductions f (f initial h) t)))))))","user":"54f2a1b8e4b024c67c0cf8cb"},{"problem":60,"code":"(fn reduce-\n  ([f x]\n    (reduce- f (first x) (rest x))) \n  ([f x [h & t :as coll]]\n    (cons x\n          (lazy-seq (if (seq coll)\n                      (reduce- f (f x h) t))))))","user":"572de985e4b0cd1946bd0f7c"},{"code":"(fn my-reductions\n  ([op items]\n    (my-reductions op (first items) (rest items))\n  )\n  ([op seed items]\n    (cons\n      seed\n      (lazy-seq\n        (if (seq items)\n          (my-reductions op (op seed (first items)) (rest items))\n          nil\n        )\n      )\n    )\n  )\n)","problem":60,"user":"51f09f3de4b0274c496158d7"},{"code":"(fn r                                     \n  ([f coll]\n    (r f (first coll) (rest coll)))\n  ([f val coll]\n    (if (empty? coll)\n        (list val)\n        (lazy-seq (cons val \n                        (r f (f val (first coll)) (rest coll)))))))","problem":60,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":60,"code":"(fn my-reductions\n  [f a & b]\n  (let [x (if (empty? b) (first a) a)\n        xs (if (empty? b) (rest a) (flatten b))]\n    (if (empty? xs)\n         [x]\n         (lazy-seq (cons x (my-reductions f (cons (f x (first xs)) (rest xs))))))))","user":"550b5c10e4b06e50f9beb143"},{"problem":60,"code":"(fn r\r\n  ([o [i & l]] (r o i l))\r\n  ([o i l]\r\n   (if (empty? l)\r\n     [i]\r\n     (lazy-seq (cons i (r o (o i (first l)) (rest l)))))))","user":"5f2c02d1e4b033932238a65f"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (next coll)))\n  ([f init coll]\n   (if (empty? coll)\n     (list init)\n     (cons init\n           (lazy-seq (my-reductions f (f init (first coll)) (next coll)))))))","user":"57002b81e4b08d47c97781c7"},{"code":"(fn folds\n  ([f xs]\n   (if-let [[x & xs] (seq xs)]\n     (folds f x xs)\n     [(f)]))\n    \n  ([f init xs]\n   (lazy-seq\n    (cons\n     init\n     (if-let [[x & xs] (seq xs)]\n       (folds f (f init x) xs))))))","problem":60,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":60,"code":"(fn mreductions\n  ([f [h & t :as c]]\n   (lazy-seq\n    (if (empty? c)\n      (list (f))\n      (mreductions f h t))))\n  ([f i [h & t :as c]]\n   (cons i\n         (lazy-seq\n          (when (seq c)\n            (mreductions f (f i h) t))))))","user":"53e3f7a8e4b036ad0777e408"},{"problem":60,"code":"(fn my-reductions\n  ([f xs] (my-reductions f (first xs) (rest xs)))\n  ([f acc xs]\n   (lazy-seq\n     (if (empty? xs)\n       (list acc)\n       (cons acc (my-reductions f (f acc (first xs)) (rest xs)))))))","user":"4ee897fe535d93acb0a66883"},{"code":"(fn myreduce2\n  \n ([f s] \n  \n  (let [ss (seq s)]\n  ((fn myreduce[f acc s]\n      (let [ss (seq s)]\n        (if ss\n          (let [newacc (f acc (first ss))]\n             \n            (lazy-seq \n              (cons \n                acc\n               (myreduce f newacc (rest ss)) \n               )\n             )\n           )\n        \n       )\n    )\n   )\n   f (f (first ss)) (rest ss)\n   )\n  )\n )\n  \n ([f acc s]\n  (cons acc\n      (let [ss (seq s)]\n        (if ss\n          (let [newacc (f acc (first ss))]\n             \n            (lazy-seq \n              \n               (myreduce2 f newacc (rest ss)) \n              \n             )\n           )\n         )\n        )\n       )\n    )\n)","problem":60,"user":"4fb03cf4e4b081705acca262"},{"code":"(fn self\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (self f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (self f (f init (first s)) (rest s)))))))","problem":60,"user":"524b90fae4b09eba1c0223df"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f val coll]\n   (cons val\n         (lazy-seq\n           (if (empty? coll)\n           []\n           (my-reductions f (f val (first coll)) (rest coll)))))))","user":"53dc94c8e4b094d41abdfefc"},{"problem":60,"code":"(fn reductions*\n  ([f coll] (reductions* f (first coll) (rest coll)))\n  ([f v coll] (if (empty? coll) (cons v coll) (lazy-seq (cons v (reductions* f (f v (first coll)) (rest coll)))))))","user":"56677192e4b04acd4f672dd5"},{"problem":60,"code":"(fn redction\n  ([f coll]\n   (redction f (first coll) (rest coll)))\n  ([f next-val coll]\n   (cons next-val\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (redction f (f next-val (first s)) (rest s)))))))","user":"54d9366ce4b0a52adc2e204e"},{"code":"(fn hand-reduce\n    ([f s] (hand-reduce f (first (take 1 s)) (drop 1 s)))\n    ([f start s]\n        (if (empty? s)\n            [start]\n            (let [intermed (f start (first (take 1 s)))]\n                (cons start (lazy-seq (hand-reduce f intermed (drop 1 s))))))))","problem":60,"user":"521249f5e4b06aa6d1666ba2"},{"problem":60,"code":"(fn q60\n  ([f l] (q60 f (first l) (rest l)))\n  ([f i [x & xs]]\n   (lazy-seq\n    (if x\n      (cons i (q60 f (f i x) xs))\n      (list i)))))","user":"55916764e4b0604b3f94d57b"},{"problem":60,"code":"(fn r\n  ([op coll]\n   (r op (first coll) (rest coll)))\n  ([op acc coll]\n   (lazy-seq\n    (if (empty? coll)\n     (list acc)\n     (cons acc (r op (op acc (first coll)) (rest coll)))))))","user":"53e9dce1e4b036ad0777e4bc"},{"problem":60,"code":"(fn myreduce ([f xs] (myreduce f (first xs) (rest xs)))\n             ([f a [x & xs]] (lazy-cat [a] (when x (myreduce f (f a x) xs)))))","user":"5bafd5c8e4b0a20761a234dd"},{"problem":60,"code":"(fn my-reductions\n  ([f [x & xs]] (my-reductions f x xs))\n  ([f v [x & xs]] (lazy-seq (cons v (if x (my-reductions f (f v x) xs))))))","user":"54769c7ae4b0c51c1f4d72a8"},{"problem":60,"code":"(fn reds\n   ([f val xs]      \n    (if (seq xs)  \n      (lazy-seq (cons val (reds f (f val (first xs)) (rest xs))))  \n       (list val)))    \n  ([f xs] (reds f (first xs) (rest xs))))","user":"54d127b7e4b0e8a36923e5de"},{"code":"(fn reduc\r\n  ([f sq]\r\n     (reduc f (first sq) (rest sq)))\r\n  ([f init sq]\r\n     (->> [[init] sq]\r\n          (iterate (fn [[v sq]]\r\n                     (if (empty? sq)\r\n                       [v, nil]\r\n                       [(conj v (f (peek v) (first sq))), (rest sq)])))\r\n          (take-while (comp not nil? second))\r\n          (map (comp peek first)))))","problem":60,"user":"51a54fb4e4b0def3c5c586a3"},{"problem":60,"code":"(fn x\n  ([f [a & b]]\n   (x f a b))\n  ([f c [h & t]]\n   (lazy-seq (cons c (when h (x f (f c h) t))))))","user":"5382704be4b06839e8705ed4"},{"code":"(fn aaa\r\n  ( [f x coll]\r\n      (if-let [s (seq coll)]\r\n        ( lazy-seq (cons x ( aaa f (f x (first s) )\r\n                                 (rest s))))\r\n        (list x)))\r\n  ( [f coll]\r\n      ( lazy-seq (aaa f (first coll) (rest coll)))))","problem":60,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"code":"(fn bar\n  ([f i c] (bar f (cons i c)))\n  ([f c]   \n     (for [s (map inc (range))\n           :while (= (count (take s c)) s)]\n       (reduce f (take s c)))))","problem":60,"user":"52f4fae4e4b05e3f0be25f27"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n    (my-reductions f (first coll) (rest coll))) ; use the first item in the seq as the init\n  ([f init coll]\n    (cons init\n      (lazy-seq\n        (if-let [s (seq coll)]\n          (my-reductions f (f init (first s)) (rest s)))))))","user":"548db64ce4b0e286459a121c"},{"code":"(fn R\n  ([f v [h & t]]\n    (if h\n      (lazy-seq (cons v (R f (f v h) t)))\n      [v]))\n  ([f [h & t]] (R f h t)))","problem":60,"user":"4ee82539535d93acb0a66878"},{"code":"(fn my-reductions\n  ([f s]\n     (my-reductions f (first s) (rest s)))\n  ([f initial s]\n     (letfn [(helper [f s acc]\n                     (if (empty? s)\n                       []\n                       (let [result (f acc (first s))]\n                         (cons result (lazy-seq (helper f (rest s) result))))))]\n       (cons initial (helper f s initial)))))","problem":60,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":60,"code":"(fn rdc\n  ([f c] \n   (rdc f (first c) (rest c)))\n  ([f v c]\n   (lazy-seq (cons v \n                   (when (seq c) (rdc f (f v (first c)) (rest c)))))))","user":"5799ff45e4b05b1deef9add1"},{"problem":60,"code":"(fn reduc\n        ([function collection] (lazy-seq (reduc function (first collection) (next collection))))\n        ([function initial-value collection] (cons initial-value (lazy-seq (when (seq collection) (reduc function (function initial-value (first collection)) (next collection)))))))","user":"5888b75fe4b0f1effa3b771b"},{"code":"(fn my-reductions\n  ([f b coll]\n      (if (empty? coll)\n        [b]\n        (let [c (f b (first coll))]\n          (lazy-cat [b] (my-reductions f c (rest coll))))))\n  ([f coll]\n     (if (empty? coll)\n       coll\n       (my-reductions f (first coll) (rest coll)))) )","problem":60,"user":"4ddb696b535d02782fcbe9fa"},{"problem":60,"code":"(fn r\n  ([f [h & t]]\n      (r f h t))\n  ([f i [h & t :as c]]\n    (cons i\n      (if (not-empty c)\n        (lazy-seq (r f (f i h) t))))))","user":"57e33f6fe4b0bfb2137f5a96"},{"code":"(fn [f & args]\n  (let \n    [rdns (fn r [f init coll]\n            (lazy-seq\n             (cons init\n                   (if (empty? coll)\n           \t\t\t\t\tnil\n           \t\t\t\t\t(r f (f init (first coll)) (rest coll))))))\n    x (first args)]\n    (if (= 2 (count args))\n      (rdns f (first args) (last args))\n      (rdns f (first x) (rest x)))))","problem":60,"user":"50217818e4b00bba4502f7a7"},{"code":"(fn __ \n  ([f coll]\n    (lazy-seq (if-let [s (seq coll)]\n                (__ f (first s) (rest s))\n                (list (f)))))\n  ([f init coll]\n    (cons init\n          (lazy-seq (when-let [s (seq coll)]\n                      (__ f (f init (first s)) (rest s))\n                      )))))","problem":60,"user":"52828298e4b0757a1b17145b"},{"problem":60,"code":"(fn my-reductions\n              ([fun start seq] (if (empty? seq)\n                                 (list start)\n                                 (cons start\n                                       (lazy-seq (my-reductions fun (fun start (first seq)) (rest seq))))))\n              ([fun seq] (my-reductions fun (first seq) (rest seq))))","user":"55d95be7e4b0e31453f64ac9"},{"code":"(fn rdc\n  ([f coll]\n   (rdc f (first coll) (rest coll)))\n  ([f v [x & xs]]\n   (lazy-seq\n    (cons v (when x (rdc f (f v x) xs )))))\n  )","problem":60,"user":"51805d22e4b0e3fc13e244df"},{"code":"(fn reds\n  ([f coll]     (if (empty? coll)\n                  (f)\n                  (lazy-seq (reds f (first coll) (next coll)))))\n  ([f val coll] (cons val\n                      (if-not (empty? coll)\n                        (let [r (f val (first coll))]\n                          (lazy-seq (reds f r (next coll))))))))","problem":60,"user":"4e71705e535d5021c1a89649"},{"problem":60,"code":"(fn reds\n  ([f coll]\n     (lazy-seq\n      (let [s (seq coll)]\n        (reds f (first s) (rest s)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)] ;; when no coll will stop program\n              (reds f (f init (first s)) (rest s)))))))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":60,"code":"(fn reduction\n  ([f i d]\n   (if (seq d)\n     (cons i (lazy-seq (reduction f \n                                  (f i (first d)) \n                                  (rest d))))\n     [i]))\n  ([f d]\n   (reduction f (first d) (rest d))))","user":"54d341f7e4b0e8a36923e603"},{"problem":60,"code":"(fn lr\n    ([func coll]\n     (lr func\n         (if (empty? coll) (func) (first coll))\n         (rest coll)))\n    ([func init coll]\n     (println init (first coll))\n     (if (empty? coll)\n       (list init)\n       (lazy-seq\n        (cons init\n              (lr func (func init (first coll)) (rest coll)))))))","user":"56eaad95e4b04a395b9a040f"},{"problem":60,"code":"(fn me\n  ([f [h & r]] (me f (f h) r))\n  ([f acc [h & r]] (if (nil? h) (list acc) (lazy-seq (cons acc (me f (f acc h) r)))))\n)","user":"5c219c0fe4b07e362c230581"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (next coll)))\n  ([f init [h & t :as coll]] \n   (cons init\n         (if (seq coll)\n           (lazy-seq\n\t           (my-reductions f (f init h) t))))))","user":"54ae541ae4b09f271ff37cef"},{"problem":60,"code":"(fn my-reds \n  ([f coll]\n    (lazy-seq\n      (if-let [s (seq coll)]\n        (my-reds  f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n    (cons init\n          (lazy-seq\n            (when-let [s (seq coll)]\n              (my-reds  f (f init (first s)) (rest s)))))))","user":"548ade6de4b0e286459a11f6"},{"problem":60,"code":"(fn f\n  ([op [x & xs]] (f op x xs))\n  ([op acc [x & xs]] \n    (lazy-seq\n      (cons acc (if x (f op (op acc x) xs))))))","user":"5b0bd9cfe4b0cc2b61a3bdd9"},{"problem":60,"code":"(fn my-lazy-reduce\n  ([f l] (my-lazy-reduce f (first l) (rest l)))\n  ([f a l] (cons a (lazy-seq (when-not (empty? l)(my-lazy-reduce f (f a (first l)) (rest l)))))))","user":"5edd05bfe4b0c7845d86b0f3"},{"code":"(fn app\n                       ([f coll]\n                        (lazy-seq\n                          (if-let [s (seq coll)]\n                            (app f (first s) (rest s))\n                            (list (f)))))\n                       ([f init coll]\n                        (cons init\n                              (lazy-seq\n                                (when-let [s (seq coll)]\n                                  (app f (f init (first s)) (rest s)))))))","problem":60,"user":"4dd579b5535dae65d5c462ea"},{"code":"(fn rdcts\n  ([f [x & xs]]\n   (rdcts f x xs))\n  ([f acc xs]\n   (if (seq xs)\n     (cons acc (lazy-seq (rdcts f (f acc (first xs)) (rest xs))))\n     (list acc))))","problem":60,"user":"521679e9e4b0bf4bffd29cca"},{"code":"(fn R\r\n  ([f xs]\r\n   (R f (first xs) (rest xs)))\r\n  ([f val xs]\r\n   (if (seq xs)\r\n     (lazy-seq\r\n      (cons val\r\n     \t(let [red (f val (first xs))]\r\n   \t\t\t(R f red (rest xs)))))\r\n     [val])))","problem":60,"user":"502873a8e4b01614d1633ff8"},{"code":"(fn reductions2\r\n  ([f l] (reductions2 f (first l) (rest (seq l))))\r\n  ([f c l] (if l\r\n              (let [nc (f c (first l))]\r\n                (cons c (lazy-seq (reductions2 f nc (next l)))))\r\n              (list c))))","problem":60,"user":"50015be1e4b0678c553fc41a"},{"problem":60,"code":"(fn furp\n\t([f coll] (furp f\n                    (first coll)\n                    (rest coll)))\n  \n\t([f i coll] \n     (lazy-seq (cons i \n                     (if (empty? coll)\n                       []\n                       (furp f\n                             (f i (first coll))\n                             (rest coll))\n                     )\n               )\n     )\n    )\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":60,"code":"(fn red ([f [c & coll]] (if (nil? c) [] (red f c coll))) \n        ([f c1 [c2 & coll]] (if (nil? c2) [c1] (lazy-seq (cons c1 (red f (f c1 c2) coll)))))\n)","user":"580c8fcee4b0849f6811b721"},{"problem":60,"code":"(fn[op & args] \n    ((fn process[lastEntry remaining]\n      (lazy-seq\n      (if (empty? remaining) \n        nil\n        (if (= 1 (count remaining))\n            (let [coll (first remaining)]\n            (if (empty? coll) nil\n            (if (nil? lastEntry)\n                (cons (first coll) (process (first coll) [(rest coll)]))\n                (let [opResult (op lastEntry (first coll))]\n                  (cons opResult (process opResult [(rest coll)])))\n            )))\n            (let [coll1 (first remaining)\n                  coll2 (second remaining)]\n              (if (coll? coll1)\n                (if (empty? coll1) (process lastEntry [coll2])\n                  (if (empty? coll2) (process lastEntry [coll1])\n                    (if (nil? lastEntry)\n                      (cons [(first coll1)] (process [(first coll1)] [(rest coll1) coll2]))\n                      (let [opResult (op lastEntry (first coll2))]\n                        (cons opResult (process opResult [(rest coll1) (rest coll2)])))\n                    )\n                  )\n                )\n               (process nil [(cons coll1 coll2)])))))))\n      nil args)\n  \n)","user":"571172ece4b09c608db70446"},{"code":"(fn reduct\n  ([f items]\n     (reduct f (first items) (rest items)))\n\n  ([f prior items]\n     (if (seq items)\n       (lazy-seq (cons prior (reduct f (f prior (first items)) (rest items))))\n       (list prior) )))","problem":60,"user":"4f0d093b535d0136e6c22313"},{"code":"(fn r\n  ([f [x & xs]] (r f x xs))\n  ([f x s]\n    (if (empty? s)\n        (cons x s)\n        (lazy-seq (cons x (r f (f x (first s)) (rest s)))))))","problem":60,"user":"4f569a3ce4b0a7574ea71828"},{"code":"(fn  reductio \n    ([f s] (if (empty? s) (lazy-seq (list (f)))\n\t      (lazy-cat (list (first s)) (if (empty? (rest s)) () \n\t\t\t\t\t     (map (partial f (first s)) (reductio f (rest s)))))))\n\t([f val s]\n\t    (if (empty? s) (lazy-seq (list val))\n\t\t(lazy-cat (list val)\n\t        \n\t\t     (reductio f (f val (first s)) (rest s))))))","problem":60,"user":"4e6e3a1e535d5021c1a89602"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f n coll] (if (empty? coll) \n                (cons n [])\n                (lazy-seq (cons n (my-reductions f (f n (first coll)) (rest coll)))))))","user":"5aa998c6e4b0d174b936c8e5"},{"code":"(fn my-reductions\n  ([f init coll]\n    (cons init\n      (lazy-seq\n        (when-let [s (seq coll)]\n          (my-reductions f (f init (first s)) (rest s))))))\n  ([f coll]\n    (lazy-seq\n      (if-let [s (seq coll)]\n        (my-reductions f (first s) (rest s))\n        (list (f))))))","problem":60,"user":"4ec1b80c535dfed6da9c6db6"},{"code":"(fn ductions\n  ([fun coll] (ductions fun (first coll) (rest coll)))\n  ([fun val coll] (if (empty? coll)\n                    (list val)\n                    (let [reduction (fun val (first coll))]\n                      (lazy-seq (cons val\n                                      (ductions fun reduction (rest coll))))))))","problem":60,"user":"4dbb0f2d535d1e037afb21b1"},{"problem":60,"code":"(fn r\n  ([f [x & xs]]\n    (cons x (lazy-seq (when (first xs)\n                        (r f (f x (first xs)) (rest xs))))))\n  ([f v [x & xs]]\n    (cons v (lazy-seq (when x\n                        (r f (f v x) xs))))))","user":"50f10f7be4b06d9538fe211a"},{"problem":60,"code":"(fn intermediate_reduce\n  ([f coll] (intermediate_reduce f (first coll) (rest coll)))\n  ([f val coll]\n   (lazy-seq\n     (if (empty? coll)\n       [val]\n       (cons\n         val\n         (intermediate_reduce f (f val (first coll)) (rest coll))\n         )\n       )\n     )\n   )\n  )","user":"562add6de4b00e49c7cb4834"},{"code":"(fn red \n  ([f [x1 & r]] (red f x1 r))\n  ([f x0 [x1 & r]] \n    (if (nil? x1) (list x0)\n      (lazy-seq (cons x0 (red f (f x0 x1) r))))))","problem":60,"user":"528e64b7e4b0239c8a67aedd"},{"problem":60,"code":"(fn red \n  ([f s] (red f (first s) (rest s)))\n  ([f init s] (lazy-seq (cons init (if (nil? (first s)) '() (red f (f init (first s)) (rest s))))))\n)","user":"584d8724e4b0b7285a6f4e3e"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n     (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n     (if-let [s (seq coll)]\n       (let [v (f init (first s))]\n         (lazy-seq (cons init (my-reductions f v (rest s)))))\n       [init])))","user":"4ea5ba92535d7eef308072d9"},{"code":"(fn r\n  ([f [h & t]]\n     (r f h t))\n  ([f v [h & t]]\n     (lazy-seq\n      (cons v (when h (r f (f v h) t))))))","problem":60,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":60,"code":"(fn step\n    ([f coll]\n     (step f (f (first coll)) (next coll)))\n    ([f e coll]\n     (if (not-empty coll)\n       (lazy-seq (cons e\n                       (step f\n                             (f e (first coll))\n                             (next coll))))\n       (list e))))","user":"5777cffae4b0979f89651651"},{"code":"(fn my-reduce\n  ([f args] (my-reduce f (first args) (rest args)))\n  ([f initial args]\n   (if (empty? args) [initial]  ; This feels wrong, but passes the tests, and I'm too frustrated with this problem to fix it right now\n     (cons initial (lazy-seq\n                    (my-reduce f (f initial (first args)) (rest args))\n                    \n                    )))))","problem":60,"user":"5119f3d5e4b06c8af0111818"},{"code":"(fn my-reductions\n  ([f c]\n    (my-reductions f (first c) (drop 1 c)))\n  ([f i c]\n  (lazy-seq \n    (cons\n      i\n      (if (= c '())\n        nil\n        (my-reductions f (f i (first c)) (rest c)))))))","problem":60,"user":"4ea7999e535d7eef308072ee"},{"problem":60,"code":"(fn red \n  ([f coll]\n   (red f (first coll) (rest coll)))\n  ([f s coll]\n   (if (empty? coll) (list s)\n     (let [x (first coll)\n           r (f s x)]\n       (lazy-seq \n        (cons s (red f r (rest coll))))))\n   ))","user":"5224a46ce4b01819a2de42e5"},{"problem":60,"code":"(fn reduceSeq2\n \n  ([op input] (reduceSeq2 op (first input) (rest input)))\n \n  ([op result input]\n \n  (lazy-seq\n    (if (empty? input) (list result)\n      (cons result\n            (reduceSeq2 op\n                 (op result (first input))\n                 (rest input)))))))","user":"571aae1fe4b07c98581c3b5a"},{"code":"(fn reductions--lazy\n  ([f init coll]\n   (if (seq coll)\n     (lazy-seq\n      (cons init (reductions--lazy f (f init (first coll)) (rest coll))))\n     (list init)))\n  ([f coll]\n   (if (seq coll)\n     (reductions--lazy f (first coll) (rest coll))\n     (list (f)))))","problem":60,"user":"4fc6305de4b0ee37620e180b"},{"problem":60,"code":"(fn redux \n  ([func args]\n   (if (empty? args) \n     (lazy-seq (vector (func)))\n     (do\n       (redux func (first args) (rest args)))))\n\n  ([func accum args]\n   (if (empty? args) \n     (lazy-seq (vector accum))\n     (do\n       (let [result (func accum (first args))]\n        (lazy-cat [accum] (redux func result (rest args))))))))","user":"5e20a159e4b05b4b01516118"},{"problem":60,"code":"(fn rd\n  ([f xs] (rd f (first xs) (rest xs)))\n  ([f x0 [x1 & xs]]\n   (if-not (nil? x1)\n     (lazy-seq (cons x0 (rd f (f x0 x1) xs)))\n     (lazy-seq (cons x0 nil)))))","user":"5e2549c8e4b05b4b0151615f"},{"problem":60,"code":"(fn reductions* \n([f s] (reductions* f (first s) (rest s)))\n([f init [s & coll]]\n  (cons init (lazy-seq \n              (when s\n                (reductions* f (f init s) coll))))\n  ))","user":"5c987160e4b048ec896c5a82"},{"code":"(fn red\n  ([f xs]\n   (red f (first xs) (rest xs)))\n  ([f init xs]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq xs)]\n             (red f (f init (first xs)) (rest xs)))))))","problem":60,"user":"4e5914e0535d8a8b8723a29b"},{"code":"(fn r\n  ([f [a & s]] (r f a s))\n  ([f a [n & s]]\n    (lazy-seq\n      (cons a (when n (r f (f a n) s))))))","problem":60,"user":"4ef77c82535dced4c769f253"},{"code":"(fn reductions2  \n  ([f s] (reductions2 f (first s) (rest s))) \n  ([f init s] \n   (if (empty? s) (list init)\n      (lazy-seq (cons init (reductions2 f (f init (first s)) (rest s))))\n   )\n   )\n )","problem":60,"user":"523b1988e4b02f719975bdbc"},{"code":"(fn reduction\n  ([ f col ]\n    (lazy-seq\n      (reduction f (first col) (rest col))))\n  ([f init col]\n    (lazy-seq\n      (if-not (seq col)\n        [init]\n        (let [rslt (f init (first col))]\n          (cons init (reduction f rslt (rest col))))))))","problem":60,"user":"513cb853e4b0b86ece9f322b"},{"problem":60,"code":"(fn seq-reduce\n  ([f coll] \n   (seq-reduce f (first coll) (rest coll)))\n  ([f i coll]\n   (lazy-seq \n    (if (empty? coll)\n      [i]\n      (cons i (seq-reduce f (f i (first coll)) (rest coll)))))))","user":"4f0f01c0535d0136e6c22329"},{"code":"(fn reducs ([f a xs] \n  (if (empty? xs) \n    (lazy-seq [a]) \n    (let [[y & ys] xs a2 (f a y)] \n      (lazy-seq (cons a (reducs f a2 ys))))))\n  ([f xs] (reducs f (first xs) (rest xs))))","problem":60,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn r\n  ([f l]\n    (r f (first l) (rest l)))\n  ([f i l]\n    (cons i\n      (lazy-seq\n        (if (empty? l)\n          nil\n          (r f (f i (first l)) (rest l)))))))","problem":60,"user":"4e6a2f51535d8ccf87e9fea9"},{"code":"(fn r\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (r f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (r f (f init (first s)) (rest s)))))))","problem":60,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":60,"code":"(fn rd\n  ([f coll] (lazy-seq\n             (if-let [xs (seq coll)]\n               (rd f (first xs) (rest xs))\n                   )))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [xs (seq coll)]\n            (rd f (f init (first xs)) (rest xs))\n                         )))\n   ))","user":"564a560ae4b0284900eef654"},{"code":"(fn red\n  ([f [x & y]] (red f x y))\n  ([f i [x & y :as s]] (if (empty? s) (list i) (cons i (lazy-seq (red f (f i x) y))))))","problem":60,"user":"522eb5cce4b01cdb292c5f0c"},{"problem":60,"code":"(fn redukshun\n  ([f [h & t]]\n   (redukshun f h t))\n  ([f acc [h & t]]\n   (lazy-seq\n     (if h\n       (cons acc (redukshun f (f acc h) t))\n       (list acc)))))","user":"56ff45e5e4b08d47c97781bb"},{"problem":60,"code":"(fn r\n  ([f coll] (r f (f (first coll)) (rest coll)))\n  ([f init coll]\n   (cons init\n         (when-not (empty? coll)\n           (lazy-seq (r f (f init (first coll)) (rest coll)))))))","user":"506ba58be4b0eda3100c090b"},{"problem":60,"code":"(fn red\n  ([x y] (red x (first y) (rest y)))\n  ([x y z] (if (empty? z) (list y) (lazy-seq (cons y (red x (x y (first z)) (rest z)))))))","user":"584dadebe4b0b7285a6f4e44"},{"problem":60,"code":"(fn reduc ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reduc f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     \n       (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (reduc f (f init (first s)) (rest s))))))\n  )","user":"56a6051fe4b0542e1f8d14e5"},{"problem":60,"code":"(fn my-reductions\n    ([f coll]\n      (lazy-seq (my-reductions f (first coll) (rest coll))))\n    ([f init coll]\n      (cons init (lazy-seq\n        (when-let [xs (seq coll)]\n           (my-reductions f (f init (first xs)) (rest xs)))))))","user":"54149f2fe4b01498b1a719ec"},{"problem":60,"code":"(fn rds\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (rds f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     \n       (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (rds f (f init (first s)) (rest s)))))))","user":"54d7e277e4b0a52adc2e2031"},{"problem":60,"code":"(fn my-reductions\n\t([f coll] (my-reductions f (first coll) (rest coll)))\n\t([f res coll]\n\t\t(if (empty? coll)\n\t\t\t(list res)\n\t\t\t(let [r (f res (first coll))]\n\t\t\t\t(lazy-seq (cons res (my-reductions f r (rest coll))))))))","user":"58fb7d7ae4b0438e51c2cf7a"},{"problem":60,"code":"(fn rs ([f c] (map-indexed (fn [i e] (reduce f (take (inc i) c))) c)) ([f i c] (rs f (cons i c))))","user":"53286f84e4b09d4e7a9b5505"},{"problem":60,"code":"(fn reduction\n  ([f coll] (reduction f (first coll) (next coll)))\n  ([f i coll]\n  (concat [i]\n   (when-let [s coll]\n     (lazy-seq (reduction f (f i (first s)) (next s)))\n      ))))","user":"534fa9dae4b084c2834f4acf"},{"problem":60,"code":"(fn reduce-\n  ([f coll]\n    (reduce- f (first coll) (rest coll)))\n  ([f init [h & t :as coll]]\n    (cons init\n      (lazy-seq\n        (if (seq coll)\n          (reduce- f (f init h) t))))))\n;;(fn [f arg & [args]] (loop [acc [] [head & more] args result [(reduce f arg acc)]] (if more (recur (conj acc head) more (conj result (reduce f arg (conj acc head)))) (conj result (reduce f arg (conj acc head))))   ))","user":"56cad309e4b0ea9b8538f720"},{"code":"(fn aa \n          ([f coll]\n            (let [tt (fn tt [f coll boom]\n                   (lazy-seq\n                     (let [intr-ans (f boom (first coll)) ]\n                     (cons intr-ans (tt f (rest coll) intr-ans)))))]\n             (tt f coll 0)))\n          ([f acc coll]\n            (let [tt (fn tt [f coll boom]\n                       (when-let [s (seq coll)]\n                         (let [intr-ans (f boom (first s)) ]\n                           (cons intr-ans \n                                 (tt f (rest s) intr-ans)))))]\n            (cons acc (tt f coll acc)))))","problem":60,"user":"52fa4f48e4b047fd55836ff7"},{"problem":60,"code":"(fn\n  ([f coll]\n    (map-indexed\n      (fn [i _]\n        (reduce f (take (inc i) coll))) coll))\n  ([f n coll]\n    (map-indexed\n      (fn [i _]\n        (reduce f n (take i coll))) (cons n coll))))","user":"5703cd50e4b08d47c97781fc"},{"code":"(fn n60\n  ([f coll]\n    (lazy-seq (if-let [s (seq coll)] (n60 f (first s) (rest s)) (f))))\n  ([f init coll]\n    (lazy-seq (cons init (lazy-seq (when-let [s (seq coll)] (n60 f (f init (first s)) (rest s))))))))","problem":60,"user":"52b43468e4b0c58976d9ad1b"},{"problem":60,"code":"(fn r\n  ([f c] (r f (f (first c)) (rest c)))\n  ([f v c]\n   (lazy-seq (if (empty? c) [v]\n                 (cons v (r f (f v (first c)) (rest c)))))))","user":"5d931a58e4b0d3f9b434ad10"},{"problem":60,"code":"(fn [op s0 & s]\n  (let [reducer (fn [[s0 s]] (vector (op s0 (first s)) (rest s)))\n        [s0 s] (if s\n                   [s0 (first s)]\n                   [(first s0) (rest s0)])]\n    (map first (take-while (comp not empty? second) (iterate reducer [s0 (concat s [s0])])))))","user":"57458b82e4b009280f9f2b4e"},{"problem":60,"code":"(fn reductions*\n  ([f coll]\n   (reductions* f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (if-let [s (seq coll)]\n            (reductions* f\n                         (f init (first s))\n                         (rest s)))))))","user":"575cbe44e4b02ea114799374"},{"problem":60,"code":"(fn red \n  ([f s] (lazy-seq (cons (first s) (red f (first s) (rest s) (first s)))))\n  ([f init s] (lazy-seq (cons init (red f init s init))))\n  ([f init s acc] (let [term (f acc (first s))\n                        remain (rest s)]\n                    (if (empty? remain)\n                      [term]\n                      (lazy-seq (cons term (red f init remain term)))))))","user":"55170dd9e4b06a49daca83bd"},{"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f init coll] (lazy-seq \n                   (cons init\n                      (when-let [s (seq coll)]\n                         (red f (f init (first s)) (rest s)))))))","problem":60,"user":"4e6e3aac535d5021c1a89603"},{"code":"(fn rx [f a & b]\n  (if b (rx f (into [] (cons a (first b))))\n      (letfn [(redux [f s n]\n                (let [rd (reduce f (take n s))]\n                  (if (or (not (counted? s)) (<= n (count s)))\n                    (cons rd (lazy-seq (redux f s (inc n)))))))]\n        (redux f a 1))))","problem":60,"user":"4fbd12a5e4b081705acca2fd"},{"problem":60,"code":"(fn my-reductions\n  ([f t]\n   (my-reductions f (first t) (rest t)))\n  ([f init t]\n   (cons init\n         (lazy-seq\n          (when-let [ts (seq t)]\n            (my-reductions f (f init (first ts)) (rest ts)))))))","user":"55d74e71e4b0e31453f64aa4"},{"code":"(fn reds \r\n  ([f coll]\r\n    (lazy-seq \r\n      (if (seq coll)\r\n        (reds f (first coll) (rest coll))\r\n        (list coll))))\r\n  ([f init coll]\r\n    (cons init (lazy-seq \r\n      (when (seq coll)\r\n        (reds f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4e123905535d04ed9115e7ce"},{"problem":60,"code":"(fn red\n  ([f [a & xs]]\n   (red f a xs))\n\n  ([f a xs]\n   (if (empty? xs)\n     (vector a)\n     (lazy-seq\n       (cons a (red f (f a (first xs)) (rest xs)))))))","user":"507e68abe4b085af06e3afd2"},{"problem":60,"code":"(fn reductions*\n    ([f val coll]\n     (lazy-seq\n       (if (seq coll)\n         (let [res (f val (first coll))]\n           (cons val (reductions* f res (rest coll))))\n         (if val\n           (cons val (reductions* f nil [])))\n         )))\n    ([f coll]\n     (reductions* f (first coll) (rest coll))))","user":"569f4dabe4b0542e1f8d1491"},{"problem":60,"code":"(fn reductions-fn\n  ([f xs] (reductions-fn f (first xs) (rest xs)))\n  ([f init xs]\n   (cons init\n         (when (seq xs)\n           (lazy-seq (reductions-fn f (f init (first xs)) (rest xs)))))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"code":"(fn fd\n  ([f xs]\n    (if (seq xs) (fd f (first xs) (rest xs))\n        []))\n  ([f a xs]\n    (lazy-seq\n      (if (seq xs)\n          (cons a\n              (fd f (f a (first xs)) (rest xs)))\n          [a]))))","problem":60,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":60,"code":"(fn red\n  ([f coll]\n      (red f (first coll)\n           (rest coll)))\n  ([f val coll]\n      (if val\n        (let [next (first coll)]\n          (if next\n             (lazy-seq\n              (cons val\n               (red\n                f\n                (f val next)\n                (rest coll))))\n            (list val)))\n        '())))","user":"598ab445e4b02b9968b84ce0"},{"code":"(fn my-reduction \n  ([f init coll]\n  (lazy-seq\n    (if-not(empty? coll)\n    (let [res (f init (first coll))]\n      (cons init (my-reduction f res (rest coll))))\n    (cons init [] ))))\n  ([f coll]\n   (my-reduction f (first coll) (rest coll))))","problem":60,"user":"53713676e4b0fc7073fd6eac"},{"code":"(fn my-reduce\n \n  ([op input] (my-reduce op (first input) (rest input)))\n \n  ([op result input]\n \n  (lazy-seq\n    (if (empty? input) (list result)\n      (cons result\n            (my-reduce op\n                 (op result (first input))\n                 (rest input)))))))","problem":60,"user":"50ae22c3e4b0a40c9cfb08d0"},{"code":"(fn r\r\n  ([f v c d]\r\n     \r\n     (let [[cab & col] c\r\n           val (f v cab)]\r\n       (cons val\r\n             (if col (lazy-seq (r f val col 0))))))\r\n  ([f v c ]\r\n     (cons v (lazy-seq (r f v c 0)))\r\n     )  \r\n  ([f c]\r\n     (cons (first c) (lazy-seq (r f (first c) (rest c) 0)))\r\n     ))","problem":60,"user":"4febb4dae4b0681fd128dc98"},{"code":"(letfn [(worker [c f l]\r\n          (if (empty? l)\r\n            (lazy-seq (list c))\r\n            (lazy-seq (cons c\r\n                            (worker (f c (first l)) f (rest l))))))]\r\n  (fn ([f l]\r\n         (worker (first l) f (rest l)))\r\n    ([f i l]\r\n       (worker i f l))))","problem":60,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":60,"code":"(fn r ([f [v & xs]] (r f v xs))\n  ([f v [h & t :as xs]] \n   (if (empty? xs) [v]\n     (cons v (lazy-seq (r f (f v h) t))))))","user":"553698fae4b09218d5f44fc0"},{"problem":60,"code":"(fn _60\n  ([f coll] (_60 f (first coll) (rest coll)))\n  ([f val coll]\n   (lazy-seq\n     (cons val\n           (when-let [first-val (first coll)]\n             (_60 f (if val (f val first-val) (f first-val)) (rest coll)))))))","user":"5592ba8be4b0c79f6e1db931"},{"code":"(fn seq-reductions\r\n  ([f val s]\r\n    (if (empty? s) [val]\r\n      (let [next-elt (first s)\r\n            rem-elts (rest s)\r\n            next-val (f val next-elt)]\r\n            (lazy-seq (cons val (seq-reductions f next-val rem-elts)))))\r\n    )\r\n  ([f s]\r\n    (if (empty? s) []\r\n      (let [next-elt (first s)\r\n            rem-elts (rest s)]\r\n        (seq-reductions f next-elt rem-elts)))\r\n            \r\n    ))","problem":60,"user":"4f036fb3535dcb61093f6ac8"},{"code":"(fn r \n  ([f v c]\n    (if (empty? c)\n      [v]           \n      (let [nv (f v (first c))]\n        (lazy-seq (cons v (r f nv (rest c)))))))\n  ([f c] (r f (first c) (rest c))))","problem":60,"user":"4efb2fd7535dced4c769f274"},{"problem":60,"code":"(fn rr\n  ([f s [x & xs :as c]]\n   (if (seq c)\n     (cons s\n           (lazy-seq (rr f (f s x) xs)))\n     [s]))\n  ([f [x & xs :as c]]\n   (rr f x xs)))","user":"529dfc6de4b04e0c58e87b8a"},{"code":"(fn g\n  ([f [a & b]] (g f a b))\n  ([f v c]\n    (map first\n         (take-while\n           #(not (nil? %))\n           (iterate\n             (fn [[v [x & r :as c]]]\n               (if (empty? c) \n                 nil\n                 [(f v x) r]))\n             [v c])))))","problem":60,"user":"4f410b63e4b0e243712b1fc5"},{"problem":60,"code":"(fn reds\n  ([f v1] (reds f (first v1) (rest v1)))\n  ([f v1 & [vs]] (if (empty? vs) [v1] (lazy-seq\n      (concat [v1] (reds f (f v1 (first vs)) (rest vs)))))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":60,"code":"(fn R ([f S] (let [[x & X] S] (if x (R f x X) (list (f))))) ([f i S] (cons i (lazy-seq (let [[x & X] S] (if x (R f (f i x) X)))))))","user":"55f6fe09e4b06e875b46cea2"},{"problem":60,"code":"(fn seq-red\n  ([f coll] (seq-red f (first coll) (next coll)))\n  ([f val coll] (if (seq coll) (lazy-seq (cons val\n                                               (seq-red f (f val (first coll))\n                                                        (next coll))))\n                    [val])))","user":"557e9d17e4b05c286339e0d8"},{"problem":60,"code":"(fn my-redux ([f xs]\n   (my-redux f (first xs) (rest xs)))\n  ([f acc xs]\n   (letfn [(redux [f acc xs]\n             (lazy-seq (cons (f acc (first xs))\n                             (if (seq (rest xs))\n                               (redux f (f acc (first xs)) (rest xs))\n                               '()))))]\n     (cons acc (redux f acc xs)))))","user":"5705f569e4b0b0fb43fd0677"},{"code":"(fn [a b & z]\n  (letfn [\n    (f3 [f i s]\n      (f2 f (cons i s)))\n    (f2 [f s] \n      (map first\n      (take-while #(not (nil? %))\n        (iterate\n          #(if (nil? (second %)) nil \n            (cons (apply f (take 2 %)) (drop 2 %)))\n            s))\n      ))\n    ]\n    (if (empty? z) (f2 a b) (f3 a b (first z)))))","problem":60,"user":"4f569218e4b0a7574ea71826"},{"problem":60,"code":"(fn mreductions\n    ([func start vec] (mreductions func (cons start vec)))\n    ([func [v_first v_sec & v_rest]]\n     (cons v_first (lazy-seq (when v_sec (mreductions func (cons (func v_first v_sec) v_rest)))))))","user":"53e745a1e4b036ad0777e479"},{"code":"(fn redd\n  ([f  [x y & xs]] (cons x (redd f (f x y) xs)))\n  ([f r [x & xs]]\n     (cons r (lazy-seq (if xs\n                         (redd f (f r x) xs)\n                         (cons (f r x) nil))))))","problem":60,"user":"50fa01bce4b07934dda8b0ba"},{"code":"(fn myred \n ([op1 coll]\n  (if-let [f (first coll)]\n    (myred op1 f (rest coll))\n    (list (op1))\n  )\n )([op1 init coll]\n   (if (empty? coll) [init]\n     (cons init (lazy-seq (myred op1 (op1 init (first coll)) (rest coll)) ))\n   )  \n )\n)","problem":60,"user":"52da20c7e4b09f7907dd13b3"},{"problem":60,"code":"(fn scanleft\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (scanleft f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n     (cons init \n           (lazy-seq \n             (when-let [s (seq coll)] \n               (scanleft f (f init (first s)) (rest s)))))))","user":"5a6af090e4b0512ff01cda2d"},{"problem":60,"code":"(fn myred\n  ([f c] (myred f (first c) (rest c)))\n  ([f i c] \n   (lazy-seq\n    (cons i \n          (lazy-seq (if-not (empty? c) (myred f (f i (first c)) (rest c)) ))))))","user":"53b7c21ae4b047364c0444d4"},{"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f val coll]\n     (if (empty? coll)\n       (list val)\n       (cons val (lazy-seq (my-reductions f (f val (first coll)) (rest coll)))))))","problem":60,"user":"500ff421e4b0ae202717946f"},{"code":"(fn my-reductions\n([f s] \n    (lazy-seq\n  (let [c (seq s)]\n\t     (if-not (nil? c)\n\t     \t (my-reductions f (first c) (rest c))\n\t     \t (list (f))))))\n([f i s]\n   (cons i\n\t(lazy-seq\n\t    (let [c (seq s)]\n\t        (when-not (nil? c) (my-reductions f (f i (first c))\n\t\t(rest c))))))))","problem":60,"user":"4f9c4080e4b0dcca54ed6d1a"},{"code":"(fn seq-reduction\n  [f coll & coll2]\n  (let [b (first coll2)\n        coll2 (first coll2)]\n    (if (nil? b)\n      (map #(reduce f (take % (rest coll))) (range))\n      (map #(reduce f (cons coll (take % coll2))) (range 0 (inc (count coll2)))))))","problem":60,"user":"4e3bcccd535deb9a81d77f56"},{"code":"(fn sred \n  ([f coll] (sred f (first coll) (rest coll)))\n  ([f i coll]\n    (if (seq coll)\n      (cons i (lazy-seq (sred f (f i (first coll)) (rest coll))))\n      [i])))","problem":60,"user":"5003deb9e4b0678c553fc445"},{"problem":60,"code":"(fn r\n\t([f s]\n\t\t(r f (first s) (rest s)))\n\t([f v s]\n\t\t(if (empty? s)\n\t\t\t[v]\n\t\t\t(lazy-seq (cons v (r f (f v (first s)) (rest s)))))))","user":"57ccedaae4b0c746388ab88e"},{"problem":60,"code":"(fn red\n  ([f coll]\n   (lazy-seq (if-let [s (seq coll)]\n               (red f (first s) (rest s))\n               (list (f)))))\n  ([f n coll]\n   (cons n (lazy-seq (when-let [s (seq coll)]\n                       (red f (f n (first s)) (rest s)))))))","user":"58b989dbe4b0888cdc949ccd"},{"code":"(fn myreduce \n  ([f [r & l]] (myreduce f r l))\n  ([f r [h & l]]\n   (cons r (if h (lazy-seq (myreduce f (f r h) l))))\n   )\n  )","problem":60,"user":"4fbbcf0ce4b081705acca2ee"},{"code":"(fn rs\n  ([f coll]\n    (map #(reduce f %)\n      (map #(take (inc %2) coll) coll (range))))\n  ([f init coll]\n    (rs f (cons init coll))))","problem":60,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"(fn f\r\n ([g [h & r]] (f g h r))\r\n ([g i [h & r]]\r\n  (cons i (if h (lazy-seq (f g (g i h) r))))))","problem":60,"user":"4dce6e41535d5973398f92a2"},{"code":"(fn red\n  ([f coll]\n    (lazy-seq \n      (if-let [s (seq coll)]\n        (red f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n    (cons init \n      (lazy-seq \n        (when-let [s (seq coll)]\n          (red f (f init (first s)) (rest s)))))))","problem":60,"user":"4f26d6d9e4b0d6649770a007"},{"problem":60,"code":"(fn r \n  ([f c] (r f (first c) (rest c)))\n  ([f i c]\n  (if (empty? c) \n    (cons i (empty c))\n    (lazy-seq \n     (let [acc (f i (first c))]\n       (cons i (r f acc (rest c)))\n     )\n    )\n  ))\n)","user":"57c7a8b5e4b05aa3c4741d09"},{"problem":60,"code":"(letfn [(reductions'\n  ([f init [x & xs]] \n    (lazy-seq \n      (let [redu ((fnil f 0 0) init x)] \n        (if (nil? x) \n          (list init) \n          (cons init (reductions' f redu xs)))))))]\n  (fn \n    ([f [x & xs]] (reductions' f x xs))\n    ([f init x] (reductions' f init x))))","user":"58e7229fe4b056aecfd47cc4"},{"code":"(fn seq-red\r\n    ([f l]\r\n       (seq-red f (first l) (rest l)))\r\n    ([f a l]\r\n       (lazy-seq\r\n        (if (empty? l)\r\n          (cons a l)\r\n          (cons a (seq-red f (f a (first l)) (rest l)))))))","problem":60,"user":"4f039524535dcb61093f6b2c"},{"problem":60,"code":"(fn reduce*\n  ([f [x & xs]]\n   (if x\n     (reduce* f x xs)\n     (f)))\n  ([f init [x & xs]]\n    (cons init (lazy-seq (when x (reduce* f (f init x) xs))))))","user":"58ef4db9e4b056aecfd47dc6"},{"problem":60,"code":"(fn REDUCTIONS\n  ([f coll]\n   (REDUCTIONS f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init (lazy-seq\n               (when (seq coll)\n                 (REDUCTIONS f (f init (first coll)) (rest coll)))))))","user":"53576356e4b04ce2eb3ed27a"},{"code":"(fn r \n  ([f init [x & xs]]\n    (cons init (lazy-seq (when x (r f (f init x) xs))))\n  )\n  ([f coll]\n    (r f (first coll) (rest coll))\n  )\n)","problem":60,"user":"504e685fe4b0f6ff3350c4ae"},{"code":"(fn scanr\n  ([f z xs]\n    (if (empty? xs)\n      (cons z '())\n      (lazy-seq\n        (cons z (scanr f (f z (first xs)) (rest xs))))))\n  ([f xs]\n    (when (seq xs)\n      (scanr f (first xs) (rest xs)))))","problem":60,"user":"4e691c79535d8ccf87e9fe97"},{"problem":60,"code":"(fn my-reductions\n  ([f [x & xs]] (my-reductions f x xs))\n  ([f v [x & xs]] (lazy-seq (cons v (when x (my-reductions f (f v x) xs))))))","user":"52ce1abfe4b07d0d72b27389"},{"problem":60,"code":"(fn sequence-reductions\n  ([f [x1 x2 & xs]] (cons x1 (sequence-reductions f (f x1 x2) xs)))\n  ([f val [x & xs]]\n    (if (nil? x) [val]\n                 (lazy-seq (cons val (sequence-reductions f (f val x) xs))))\n    ))","user":"5c3ac091e4b0d62ef62d9f95"},{"code":"(fn myreductions\n  ([f s] (myreductions f (first s) (rest s)))\n  ([f b s]\n   (lazy-seq\n    (if (seq s)\n      (cons b (myreductions f (f b (first s)) (rest s)))\n      (list b)))))","problem":60,"user":"52753740e4b03e8d9a4a74c1"},{"problem":60,"code":"(fn red \n  ([f [h & xs]] (red f h xs))\n  ([f i s]   \n   \t(lazy-seq \n     (if (seq s)\n       (cons i (red f (f i (first s)) (rest s)))\n       (list i)))))","user":"53c649d3e4b00fb29b221297"},{"problem":60,"code":"(fn Re\n  ([rdf coll]\n   (if (seq coll)\n     (Re rdf (first coll) (rest coll))\n     (rdf)))\n  ([rdf seed coll]\n   (lazy-seq\n   (if (seq coll)\n    (cons seed (Re rdf (rdf seed (first coll)) (rest coll)))\n     [seed]))))","user":"579c8ad1e4b05b1deef9ae0c"},{"code":"(fn my-reduce\r\n  ([f xs] (my-reduce f (first xs)(rest xs)))\r\n  ([f a xs]\r\n    (lazy-seq\r\n      (if (empty? xs) (list a)\r\n        (cons a (my-reduce f (f a (first xs))(rest xs)))))))","problem":60,"user":"4dc1ee85535d020aff1edf91"},{"problem":60,"code":"(fn my-reduce\n  ([func args] (my-reduce func (first args) (rest args)))\n  ([func init args]\n   (if (empty? args)\n     [init]\n     (lazy-seq (cons init (my-reduce func (func init (first args)) (rest args)\n                                     )\n                     )\n               )\n     )\n   )\n  )","user":"55fe7e15e4b00f4cabc57651"},{"code":"(fn [f i & [a]]\r\n  (let [v (if a (cons i a) i)]\r\n    (map\r\n      #(reduce f (take % v))\r\n      (map #(+ 1 %2) v (range)))))","problem":60,"user":"4fe9de74e4b0547ebccb2475"},{"problem":60,"code":"(fn seq-reductions \n\t([f [x & xs]] (seq-reductions f (f x) xs))\n\t([f acc [x & xs]] \n\t\t(if (nil? x) \n\t\t\t(list acc)\n\t\t\t(cons acc (lazy-seq (seq-reductions f (f acc x) xs))))))","user":"52e657e4e4b09f7907dd1472"},{"problem":60,"code":"(fn seqred \n  ([f s] (seqred f (first s) (rest s)))\n  ([f init s] (if (empty? s) (lazy-seq (cons init '()))\n                (lazy-seq (cons init\n                              (seqred f (f init (first s)) (rest s)))))))","user":"60264d89e4b0d5df2af2222d"},{"problem":60,"code":"(fn reduction\n  ([f ini [n & s]] \n   (cons ini (lazy-seq (when n (reduction f (f ini n) s))))) \n  ([f lst] (reduction f (first lst) (rest lst))))","user":"57210e8ee4b0c5bde472c0a8"},{"code":"(fn reduced\n  ([f coll]\n   (reduced f (first coll) (rest coll)))\n  ([f v coll]\n   (lazy-seq\n    (if-let [s (seq coll)]\n      (cons v (reduced f (f v (first s)) (rest s)))\n      [v]))))","problem":60,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"(fn reds\n  ([f [x & xs]]\n    (reds f x xs))\n  ([f acc coll]\n    (for [x (range) \n      :let [l (take x coll)] \n      :while (seq (drop (dec x) coll))] \n      (reduce f acc l))))","problem":60,"user":"4f1c2a3a535d64f603146480"},{"code":"(fn ff\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (ff f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (ff f (f init (first s)) (rest s))))))\n\n)","problem":60,"user":"53460d02e4b084c2834f4a39"},{"code":"(fn reds \n  ([f coll] (reds f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     [init]\n     (lazy-seq (cons init (reds f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4f611127e4b0defedf855fb4"},{"problem":60,"code":"(fn my-reduce\n    ([f s]     (my-reduce f (f (first s))  (rest s)))\n    ([f acc s] (if (empty? s)\n                 (cons acc (seq nil))\n                 (cons acc\n                       (lazy-seq (my-reduce f\n                                            (f acc (first s))\n                                            (rest s))))\n                 )))","user":"56f9392ae4b07572ad1a88ac"},{"code":"(fn r\n  ([f coll] (r f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     [init]\n     (cons init (lazy-seq (r f (f init (first coll)) (rest coll)))))))","problem":60,"user":"51057b2be4b06d28cacc92e8"},{"problem":60,"code":"(fn prob60\n  ([f coll] \n   (prob60 f (first coll) (rest coll)))\n  ([f v coll] \n   (if (seq coll)\n     (let [next-v (f v (first coll))\n           next-coll (rest coll)\n           ]\n       (cons v (lazy-seq (prob60 f next-v next-coll)))\n       )\n     (cons v (lazy-seq '())))))","user":"4ebbff41535dfed6da9c6d78"},{"problem":60,"code":"(fn go\n  ([f xs]\n   (if-let [[x & more] (seq xs)]\n     (go f x more)\n     (f)))\n  ([f v xs]\n   (cons\n    v\n    (if-let [[x & more] (seq xs)]\n      (let [new-v (f v x)]\n        (lazy-seq (go f new-v more)))\n      '()))))","user":"4ff24a1ae4b0678c553fc337"},{"problem":60,"code":"(fn rdct \n        ([fnc fst coll]\n         (letfn\n             [(step [f vs]\n                (when (not (empty? vs))\n                  (lazy-seq\n                   (let [nxt (fnc f (first vs))]\n                     (cons nxt (step nxt (rest vs)))))))]\n           (cons fst (step fst coll))))\n        ([fnc coll]\n         (rdct fnc (first coll) (rest coll))))","user":"540c54a7e4b0addc1aec6700"},{"problem":60,"code":"(fn f1\n([f coll] (f1 f (first coll) (rest coll)))\n ([f start coll] \n      (let [lazyFn (fn reduceSeq\n                     ([] (reduceSeq start coll))\n                     ([val s] (if (empty? s) (cons val [])  (cons val (lazy-seq (reduceSeq (f val (first s)) (rest s))))))\n                     ) ] (lazyFn)))\n   )","user":"5471f2fbe4b094393f72dd70"},{"problem":60,"code":"(fn reductions-1\n  ([f coll]\n   (map-indexed (fn [i _] (reduce f (take (inc i) coll))) coll))\n  ([f init coll]\n   (reductions-1 f (cons init coll))))","user":"4ed45563535d10e5ff6f52c9"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll) \n     (list init)\n     (cons init (lazy-seq (my-reductions f (f init (first coll)) (rest coll))))\n   )\n  )\n)","user":"54b050cee4b09f271ff37d13"},{"code":"(fn r \n  ([f c] (r f (first c) (rest c)))\n  ([f v c]\n   (lazy-seq\n     (cons v \n           (when (seq c)\n             (r f (f v (first c)) (rest c)))))))","problem":60,"user":"4ec74de3535d6d7199dd36df"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (if (empty? coll)\n     (list (f))\n     (let [[init & rest] coll]\n       (my-reductions f init rest))))\n  ([f init [x & xs]]\n   (concat (list init)\n           (if (empty? xs)\n             (lazy-seq (list (f init x)))\n             (lazy-seq (my-reductions f (f init x) xs))))))","user":"58a953dae4b01a0c0b232968"},{"problem":60,"code":"(fn sequence-reductions\n  ([f s]\n   (sequence-reductions f (first s) (rest s)))\n  ([f i s]\n   (cons i\n         (lazy-seq\n          (if (not (empty? s))\n            (sequence-reductions f\n                                 (f i (first s))\n                                 (rest s)))))))","user":"5daeb6bce4b0f8c104ccfc8b"},{"problem":60,"code":"(fn my-reductions\n  ([f col] (my-reductions f (first col) (drop 1 col)))\n  ([f x col]\n   (if (empty? col) [x]\n       (let [next-red (f x (first col))\n             col-left (drop 1 col)]\n         (lazy-seq (cons x (my-reductions f next-red col-left)))))))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":60,"code":"(fn [& [f x y :as args]]\n    (let [is-2-args? (= 2 (count args))\n          init-value (if is-2-args? (first x) x)\n          target-list (if is-2-args? (rest x) y)\n          iter (fn iter [ff init-v target-l]\n                 (when (not (empty? target-l))\n                   (let [acc (ff init-v (first target-l))]\n                     (lazy-seq (cons acc\n                                     (iter ff acc (rest target-l)))))))]\n      (conj (iter f init-value target-list)\n            init-value)))\n\n;; (fn iter\n;;     ([f x] (iter f (first x) (rest x)))\n;;     ([f x y] (cons x (when (not (empty? y))\n;;                        (let [acc (f x (first y))]\n;;                          (lazy-seq (iter f acc (rest y))))))))\n\n;; (fn m-reductions\n;;     ([op v col] (m-reductions op (cons v col)))\n;;     ([op [h & tail]]\n;;      (->>\n;;       (iterate (fn [[v [h & tail :as col]]]\n;;                  (if (empty? col)\n;;                    [v]\n;;                    [(op v h) tail]))\n;;                [h tail])\n;;       (take-while next)\n;;       (map first))))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn sequence-reduction \n  ([f [x & r :as xs]] (sequence-reduction f x r))\n  ([f x1 [x & r :as xs]] (lazy-seq \n                           (cond\n                             (seq xs) (concat [x1] (sequence-reduction f (f x1 x) r))\n                             :else [x1]))))","problem":60,"user":"52606318e4b03e8d9a4a7036"},{"code":"(fn myreductions\r\n  ([f coll] (myreductions f (first coll) (rest coll)))\r\n  ([f initial coll]\r\n     (if (empty? coll)\r\n       (cons initial nil)\r\n       (lazy-seq (cons initial\r\n  \t       (myreductions f (f initial (first coll))\r\n\t\t\t\t     (rest coll)))))))","problem":60,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn my-reductions\n  ([f [init & coll]]\n    (my-reductions f init coll))\n  ([f init [x & xs]]\n    (if (nil? x)\n      (lazy-seq [init])\n      (lazy-seq \n        (cons init (my-reductions f (f init x) xs))))))","problem":60,"user":"4fae0b85e4b081705acca245"},{"code":"(fn q\n  ([f [a & r]] (q f a r))\n  ([f a [b & r]] \n    (if b (cons a (lazy-seq (q f (f a b) r))) [a])))","problem":60,"user":"4f956072e4b0dcca54ed6ccf"},{"code":"(fn red \n  \n  ([f coll] (red f (first coll) (next coll)))\n  \n  ([f memo coll]\n    (if coll\n      (cons memo (lazy-seq (red f (f memo (first coll)) (next coll))))\n      [memo])))","problem":60,"user":"52382dd6e4b0fae3832e99f1"},{"problem":60,"code":"(fn acc- \n    ([func coll] (acc- func (first coll) (rest coll)))\n    ([func value coll]\n        (let [fst (first coll)\n              rst (rest coll)\n              newvalue (func value fst)]\n            (lazy-seq\n                (cons\n                    value\n                    (if (not (empty? rst)) \n                        (acc- func newvalue rst) \n                        [newvalue]))))))","user":"5766bab8e4b0a07e8fc180b1"},{"code":"(fn rr\n  ([f xs]\n   (let [s (seq xs)]\n     (rr f (first s) (rest s))))\n  ([f x xs]\n    (lazy-seq\n      (cons x\n        (when-let [s (seq xs)]\n          (rr f (f x (first s)) (rest s)))))))","problem":60,"user":"50fbf811e4b0d10d794c19f1"},{"problem":60,"code":"(fn reduce-\n  ([f coll]\n    (reduce- f (first coll) (next coll)))\n  ([f init [h & t :as coll]]\n    (cons init\n      (lazy-seq\n        (if (not-empty coll)\n          (reduce- f (f init h) t))))))","user":"573652e1e4b0cd1946bd1030"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n     (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n     (cons init\n           (map #(reduce f init %)\n                (rest (map (fn [n _] (take n coll))\n                           (range)\n                           (cons 0 coll)))))))","user":"505aa653e4b021387fb89857"},{"problem":60,"code":"(fn func\n  ([f init coll]\n   (lazy-seq (cons init (if (empty? coll) coll\n                            (func f (f init (first coll)) (rest coll))))))\n  ([f coll]\n   (func f (first coll) (rest coll))))","user":"54c5cc17e4b045293a27f624"},{"code":"(fn my-reductions ([f ini coll]\n  (lazy-seq (cons ini (if (seq coll)\n    (my-reductions f (f ini (first coll)) (rest coll))))))\n  ([f coll]\n    (my-reductions f (first coll) (rest coll))))","problem":60,"user":"4e521cef535d302ef430da6d"},{"code":"(fn re1 \n\t([f coll] \n\t\t(lazy-seq \n\t\t\t(if-let [s (seq coll)] \n\t\t\t\t(re1 f (first s ) (rest s)) \n\t\t\t\t(list (f)))))\n\t([f init coll] \n\t\t(cons init \n\t\t\t(lazy-seq \n\t\t\t\t(when-let [s (seq coll)]\n\t\t\t\t(re1 f (f init (first s)) (rest s)))))))","problem":60,"user":"518644bce4b0da5a5be3baca"},{"code":"(fn pr60\n  ([f s] (pr60 f (first s) (next s)))\n  ([f init s]\n   (cons init\n         (lazy-seq\n            (if-not (empty? s)\n              (pr60 f (f init (first s)) (next s))\n              nil)))))","problem":60,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn rdct\n  ([f init coll] (rdct f (cons init coll)))\n  ([f coll]\n   (if (seq (rest coll))\n     (cons (first coll) \n           (lazy-seq (rdct f (conj (rest (rest coll))\n                                   (f (first coll) (second coll))))))\n     (list (first coll)))))","problem":60,"user":"51944aaae4b0142f60b4aedc"},{"problem":60,"code":"(fn sequence-reduction\n  ([f [r & v]]\n   (sequence-reduction f r v))\n  ([f r v]\n   (if (empty? v)\n     (list r)\n     (lazy-seq\n      (cons r\n            (sequence-reduction\n             f\n             (f r (first v))\n             (rest v)))))))","user":"5d5824fae4b02ba5928a681f"},{"code":"(fn rdctns\n    ([fun xs]\n       (lazy-seq (rdctns fun (first xs) (rest xs))))\n    ([fun init xs]\n       (if (seq xs)\n         (cons init\n               (lazy-seq (rdctns fun\n                                 (fun init (first xs))\n                                 (rest xs))))\n         [init])))","problem":60,"user":"4dad938fc9a9d6ed1b99dc57"},{"code":"(fn redz\n    ([f s]   (redz f (first s) (rest s)))\n    ([f n s] (lazy-seq (cons n\n                             (if (seq s) (redz f (f n (first s)) (rest s)))))))","problem":60,"user":"4ee88bfb535d93acb0a66881"},{"code":"(fn sr ([f x] (sr f (first x) (rest x)))\n       ([f x y] (if (empty? y) [x] (cons x (lazy-seq (sr f (f x (first y)) (rest y)))))))","problem":60,"user":"52e17e66e4b09f7907dd1423"},{"problem":60,"code":"(fn my-reductions\n    ([f coll]\n     (my-reductions f (first coll) (rest coll)))\n    ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (my-reductions f (f init (first s)) (rest s)))))))","user":"54965534e4b0b312c081ff65"},{"problem":60,"code":"(fn myred\n  ([f v [fi & re]]\n   (if (nil? fi) (list v)\n                 (lazy-seq (cons v (myred f (f v fi) re)))))\n  ([f [fi & re]] (myred f fi re)))","user":"56df254be4b0ca2494a095ea"},{"problem":60,"code":"(fn reductions'\n    ([f coll] (reductions' f (first coll) (rest coll)))\n    ([f init coll]\n     (if (empty? coll)\n       (cons init (empty coll))\n       (cons init (lazy-seq (reductions' f (f init (first coll)) (rest coll)))))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":60,"code":"(fn reduce* ([f s] (reduce* f (first s) (rest s)))\n  ([f v s] (if (not-empty s) (lazy-seq (cons v (reduce* f (f v (first s)) (rest s))))\n                             (vector v))))","user":"5e566668e4b027a2e10ac0f9"},{"code":"(fn myreductions\n  ([comb [fstel & more]]\n     (myreductions comb fstel more))\n  ([comb start [fstel & more]]\n     (if-not fstel\n       (list start)\n       (let [cval (comb start fstel)]\n         (lazy-seq (cons start (myreductions comb cval more)))))))","problem":60,"user":"4fbfe9a4e4b081705acca31f"},{"problem":60,"code":"(fn my-reductions\n   ([f coll]\n    (lazy-seq\n      (if-let [s (seq coll)]\n        (my-reductions f (first s) (rest s))\n        )))\n   ([f init coll]\n    (cons init\n      (lazy-seq\n        (when-let [s (seq coll)]\n          (my-reductions f (f init (first s)) (rest s)))))))","user":"5ccf99fbe4b0ccb0619628c8"},{"problem":60,"code":"(fn reduce-\n  ([f coll] (reduce- f (first coll) (next coll)))\n  ([f acc [h & t :as coll]]\n   (cons acc (lazy-seq (if(seq coll) (reduce- f (f acc h) t))))))","user":"55c6fd60e4b0e31453f649c9"},{"problem":60,"code":"(fn rs\n  ([f coll]\n    (rs f (first coll) (rest coll)))\n  ([f v coll]\n    (if-not (empty? coll)\n      (let [[head & tail] coll\n            i (f v head)]\n        (cons v (lazy-seq (rs f i tail))))\n      [v])))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":60,"code":"(fn rs\n    ([f i [x & xs]]\n        (cons i (lazy-seq (when x (rs f (f i x) xs)))))\n    ([f [x & xs]] (if x (rs f x xs) (lazy-seq))))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":60,"code":"(fn red\n   ([func coll] (red func (first coll) (rest coll)))\n   ([func prev coll]\n      (lazy-seq\n       (cons prev\n             (when (seq coll)\n               (red func (func prev (first coll)) (rest coll)))))))","user":"53ed6976e4b0d648e757f4c4"},{"problem":60,"code":";(vec (take 5 (\n(fn m\n ([f init vs] \n   (letfn [(step [acc f [xf & xr]]\n                 (if xf\n                   (lazy-seq\n                     (cons (f acc xf)\n                     (step (f acc xf)\n                         f xr)))\n                   nil))]\n     (if init\n       (lazy-seq\n        (cons\n         init\n         (step init f vs)))\n       (step (f) f vs))))\n ([f vs]\n     (m f nil vs)))\n;conj [1] [2 3 4])))\n;+ (range))))","user":"5e64ae6ce4b0fd0acd1586ac"},{"problem":60,"code":"(fn reductions'\n  ([f acc coll] (lazy-seq (cons acc (if (empty? coll) nil (reductions' f (f acc (first coll)) (rest coll))))))\n  ([f coll] (reductions' f (first coll) (rest  coll))))","user":"5ce56455e4b0a17bb84e2b71"},{"problem":60,"code":"(fn myreduce\n  ([f acc coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (cons acc (myreduce f (f acc (first s)) (rest s)))\n       (seq [acc]))))\n\n  ([f coll]\n    (myreduce f (first coll) (rest coll))))","user":"602049b8e4b0bf4ca6b10961"},{"code":"(fn reducts\n  ([f [x & xs]] \n   (reducts f x xs))\n  ([f acc [x & xs]] \n    (lazy-seq\n      (cons acc (if x (reducts f (f acc x) xs))))))","problem":60,"user":"50e4f4e9e4b049a987753896"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (lazy-seq\n    (my-reductions f (first coll) (rest coll))))\n  ([f init coll]\n   (lazy-seq\n    (cons init\n          ((fn my-reductions-core\n             [prev coll]\n             (lazy-seq\n              (if-let [s (seq coll)]\n                (let [r (f prev (first coll))]\n                  (cons r\n                        (my-reductions-core r (rest coll)))))))\n           init coll)))))","user":"56180d83e4b06b1bb2182a18"},{"problem":60,"code":"(fn mm-reductions\n  ([fun coll]\n   (lazy-seq (mm-reductions fun (first coll) (rest coll))))\n  ([fun val coll]\n   (cons val (lazy-seq (when-let [coll (seq coll)] (mm-reductions fun (fun val (first coll)) (rest coll)))))))","user":"5f838122e4b01aacbe7a2715"},{"code":"(fn r\n  ([f xs] (r f (first xs) (rest xs)))\n  ([f v xs]\n    (lazy-seq\n      (cons v\n        (if (empty? xs) [] (r f (f v (first xs)) (rest xs)))))))","problem":60,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":60,"code":"(fn enhanced-reduce\n  ([f coll] (enhanced-reduce f (first coll) (rest coll)))\n  ([f init coll]\n    (if (empty? coll)\n      (list init)\n      (cons init (lazy-seq \n                  (enhanced-reduce f \n                                   (f init (first coll)) \n                                   (rest coll)))))))","user":"5483d59fe4b0e286459a1194"},{"problem":60,"code":"(fn reductions-\n  ([func init [a & b :as args]]\n   (cons init (lazy-seq (if (seq args)\n                          (reductions- func (func init a) b)))))\n  ([func args]\n   (reductions- func (first args) (rest args))))","user":"6088395de4b0ae75613dcee2"},{"problem":60,"code":"(fn weird-reduce\n  ([f coll]\n   (let [[a b & r] coll]\n     (cond\n       (nil? coll) (list (f))\n       (nil? b) (list a)\n       true (weird-reduce f a (rest coll)))))\n  ([f init coll]\n   (letfn [(do-reduce [v c]\n             (if (empty? c)\n               (cons v nil)\n               (let [newv (f v (first c))]\n                 (lazy-seq\n                  (cons v (do-reduce newv (rest c)))))))]\n     (do-reduce init coll))))","user":"571d063ee4b0145328a76272"},{"code":"(fn ([f coll]\n     (map #(reduce f %)\n          (map (fn [_ x] (take (inc x) coll))\n               coll\n               (range))))\n  ([f x coll]\n   (map #(reduce f x %)\n        (map (fn [_ x] (take x coll))\n             (conj coll 0)\n             (range)))))","problem":60,"user":"5078d366e4b08327cd804a5b"},{"problem":60,"code":"(fn reduce-return-results\n  ([function seq] (reduce-return-results function (first seq) (rest seq)))\n  ([function initial seq] (reduce-return-results function seq nil initial))\n  ([function seq last current]\n   (lazy-seq\n     (if (empty? seq)\n       (if (nil? current)                                   ; we have no unprocessed element left\n         nil\n         (cons (function last current) (reduce-return-results function [] current nil))\n         )\n       (if (nil? last)\n         (cons current (reduce-return-results function (rest seq) current (first seq)))\n         (let [result (function last current)]\n           (cons result (reduce-return-results function (rest seq) result (first seq)))\n           )\n         )\n       )\n     )\n    )\n  )","user":"5aada061e4b073f17744257a"},{"problem":60,"code":"(fn my-reductions\n  ([op acc sq]\n   (letfn [(step [acc sq]\n            (if (empty? sq)\n              (list acc)\n            (let [new-acc (op acc (first sq))]\n              (cons acc (lazy-seq (step new-acc (rest sq)))))))]\n    (step acc sq)))\n  ([op sq]\n   (my-reductions op (first sq) (rest sq))))","user":"51b920bfe4b0e871ca4958f9"},{"problem":60,"code":"(fn reduce-\n  ([f coll]\n   (reduce- f (first coll) (rest coll)))\n  ([f init [h & t :as coll]]\n   (cons init\n         (lazy-seq\n          (if (seq coll)\n            (reduce- f (f init h) t))))))","user":"5512aca6e4b055c2f668d4b4"},{"problem":60,"code":"(fn re-reductions\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (re-reductions f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n   (cons init\n           (lazy-seq\n             (when-let [s (seq coll)]\n               (re-reductions f (f init (first s)) (rest s)))))))","user":"59b9e669e4b0a024fb6ae3db"},{"code":"(fn reductions2\n  ([f coll] (let [i0 (f (first coll) (second coll))] (cons (first coll) (reductions2 f i0 (drop 2 coll)))))\n  ([f init coll]\n    (if \n      (empty? coll) (list init)\n      (cons init (lazy-seq (reductions2 f (f init (first coll)) (rest coll))))))\n  )","problem":60,"user":"52ffb7f2e4b0d8b024fd370b"},{"code":"(fn rs \n  ([f l] (rs f (first l) (rest l)))\n  ([f x ys] \n     (if (empty? ys)\n       [x]\n       (lazy-seq (cons x (rs f (f x (first ys)) (rest ys)))))))","problem":60,"user":"52ba43d0e4b07a9af57922cd"},{"problem":60,"code":"(fn self ([f val [x & xs]]\n                (cond\n                  (nil? x) [val]\n                  :else (lazy-cat [val] (self f (f val x) xs))))\n        ([f [x1 & xs]]\n         (self f x1 xs)))","user":"546c4377e4b00cfc9eacc177"},{"code":"(fn reduct\n  ([f s]\n    (reduct f (first s) (rest s)))\n  ([f r s]\n    (if (empty? s)\n      (cons r s)\n      (cons r (lazy-seq (reduct f (f r (first s)) (rest s)))))))","problem":60,"user":"53940789e4b0b51d73faaec3"},{"code":"(fn my-reductions\n  ([f [init & coll]]         (my-reductions f init coll))\n  ([f acc [x & xs :as coll]] (lazy-seq (cons acc (if coll (my-reductions f (f acc x) xs))))))","problem":60,"user":"51c19873e4b0d204dbe2ca0d"},{"code":"(fn myreduct\n        ([f coll]\n           (lazy-seq\n            (if-let [s (seq coll)]\n              (myreduct f (first s) (rest s))\n              (list (f)))))\n        ([f init coll]\n           (cons init \n                 (lazy-seq\n                  (when-let [s (seq coll)]\n                    (myreduct f (f init (first s)) (rest s)))))))","problem":60,"user":"52c58561e4b0c2d177d620f8"},{"problem":60,"code":"(fn go\n  ([f xs]\n   (when (seq xs)\n     (go f (first xs) (rest xs))))\n  ([f x xs]\n   (cons x (lazy-seq\n            (when (seq xs)\n              (go f (f x (first xs)) (rest xs)))))))","user":"50ef4e2be4b0a78662fa2653"},{"problem":60,"code":"(let [red3 (fn red3 [f init coll] \n             (lazy-seq\n              (if (first coll)\n                (cons init\n                      (red3 f\n                            (f init (first coll))\n                            (rest coll)))\n               [init])))\n      red2 (fn [f coll] (red3 f (first coll) (rest coll)))]\n  (fn [& args] (if (> (count args) 2) (apply red3 args) (apply red2 args))))","user":"5b465b8be4b02d533a91bc65"},{"problem":60,"code":"(fn my-reductions\n  ([op coll] (my-reductions op (first coll) (rest coll)))\n  ([op acc coll]\n   (if (nil? (second coll))\n     (cons acc (vector (op acc (first coll))))\n     (cons acc (lazy-seq (my-reductions op (op acc (first coll)) (rest coll)))))))","user":"53ac4719e4b047364c04445c"},{"problem":60,"code":"(fn rf\n  ([f coll] (rf f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq \n    (if (empty? coll)\n      (list init)\n      (cons init\n        (rf f (f init (first coll)) (rest coll)))))))","user":"571c2babe4b07c98581c3b73"},{"problem":60,"code":"(fn m-reductions\n  ([op v col] (m-reductions op (cons v col)))\n  ([op [h & tail]]\n   (->>\n    (iterate (fn [[v [h & tail :as col]]]\n               (if (empty? col)\n                 [v]\n                 [(op v h) tail]))\n             [h tail])\n    (take-while next)\n    (map first))))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn rdns\n  ([f s]\n    (if-let [[h & t] (seq s)]\n      (rdns f h t) [(f)]))\n  ([f i s]\n    (lazy-seq\n      (cons i (if-let [[h & t] (seq s)]\n                (rdns f (f i h) t) [])))))","problem":60,"user":"503a234de4b088a6a14ca76d"},{"problem":60,"code":"(fn my_redu\n\t([f [init & coll]]\n\t\t(my_redu f init coll))\n\t([f init coll]\n\t    (if (empty? coll)\n\t        (vector init)\n\t\t      (cons init (lazy-seq (my_redu f (f init (first coll)) (rest coll)))))))","user":"5954eef0e4b066ee0a44af17"},{"problem":60,"code":"(fn r\n  ([f [i & x]] (r f i x))\n  ([f i x] (lazy-seq (cons i (when-let [s (seq x)] (r f (f i (first s)) (rest s)))))))\n\n\n\n;(fn ([f x]   (letfn [(h [n x] (lazy-seq (cons (take (inc n) x) (h (inc n) x))))\n;                     (r [a b] (lazy-seq (if (seq b) (cons (reduce a (first b)) (r a (next b))) nil)))]\n;     \t\t \t(r f (h 0 x))))\n;    ([f i x] (letfn [(h [s] (loop [acc [] n 0] (if (> n (count s)) acc (recur (conj acc (take n s)) (inc n)))))\n;           \t\t  (r [a b c] (lazy-seq (if (seq c) (cons (reduce a b (first c)) (r a b (next c))) nil)))]\n;     \t\t\t(r f i (h x)))))","user":"5e6ca949e4b04a83ad7cd289"},{"code":"(fn reds\n([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reds f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reds f (f init (first s)) (rest s)))))))\n; yea... so... here's the implementation from the source. :/","problem":60,"user":"4ee6400c535d93acb0a6685b"},{"problem":60,"code":"(fn reduce*\n  ([f col] (reduce* f (first col) (rest col)))\n\n  ([f init [c & cols]]\n    (cons init (lazy-seq (when c (reduce* f (f init c) cols))))))","user":"567ea95de4b0feffd0d18eb6"},{"code":"(fn g\n  ([f [r & c]] (lazy-seq (g f r c) ))\n  ([f r c] (cons r (lazy-seq\n      (if (seq c) (g f (f r (first c)) (rest c)) )\n  )))\n)","problem":60,"user":"4ef48422535dced4c769f236"},{"code":"(fn seq-reduce\n  ([f v] (seq-reduce f (first v) (rest v)))\n  ([f val coll]\n    (cons val\n      (lazy-seq\n        (when-let [s (seq coll)]\n          (seq-reduce f (f val (first s)) (rest s)))))))","problem":60,"user":"4dad76588e77d6ed63f12a44"},{"problem":60,"code":"(fn reductions-1\n  ([f coll]\n  (cons (first coll)\n        (lazy-seq (reductions-1 f (cons (f (first coll)\n                                           (second coll))\n                                        (rest (rest coll)))))))\n  ([f init coll]\n   ;(if-not (nil? (last coll)) (reductions-3 f init (conj coll nil))\n   ;(if (seq? coll) '()\n   (cons init\n         (lazy-seq\n          (when (seq coll)\n            (reductions-1 f (f init (first coll))\n                                         (rest coll)))))))","user":"505d1b01e4b0e6aca564be04"},{"problem":60,"code":"(fn reduc\n  ([op coll] (reduc op (first coll) (rest coll)))\n  ([op start coll]\n   (lazy-seq\n     (if (empty? coll)\n       [start]\n       (cons start\n             (reduc op (op start (first coll)) (rest coll)))))))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":60,"code":"(fn reds\n  ([f i [fst & rst]] \n      (lazy-seq \n       (if fst\n         (cons i (reds f (f i fst) rst))\n         [i])))\n  ([f [i & c]]\n      (reds f i c)))","user":"5835cb06e4b089d5ab817cea"},{"problem":60,"code":"(fn g\n  ([f [h & t]] (g f h t))\n  ([f x r] (if (empty? r) [x] (lazy-cat [x] (g f (f x (first r)) (rest r))))))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"problem":60,"code":"(fn my-reduction\n  ([f coll]\n   (letfn [(step [f coll]\n             (if (nil? (second coll))\n               []\n               (lazy-seq\n                 (let [mid-result (f (first coll) (second coll))]\n                   (cons\n                     mid-result\n                     (step f (cons mid-result (drop 2 coll))))))))]\n     (cons (first coll) (step f coll))))\n  ([f val coll]\n   (my-reduction f (cons val coll))))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"problem":60,"code":"(fn myr \n  ([f val coll] (myr f (lazy-seq (cons val coll))))\n  ([f coll]\n   (cond (empty? coll) (lazy-seq)\n         (nil? (second coll)) (lazy-seq (list (first coll)))\n         :else \n         (let [ir (apply f (take 2 coll))]\n           (lazy-seq (cons (first coll) (myr f \n                                             (lazy-seq (cons ir (rest (rest coll))))))) \n           ))))","user":"57af41bce4b0fbc9809a2731"},{"code":"#(letfn\n     [(r\n        ([f v] (r f (first v) (rest v)))\n        ([f e v]\n           (if (empty? v)\n             [e]\n             (lazy-cat [e] (r f (f e (first v)) (rest v))))))]\n   (apply r %&))","problem":60,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"problem":60,"code":"(fn rns \n\n  ([f xs] (rns f (first xs) (rest xs)))\n\n  ([f init xs] \n\n   (if \n\n     (empty? xs) [init]\n\n     (let [res (f init (first xs))]\n\n      (lazy-seq (cons init (rns f res (rest xs))))))))","user":"57487084e4b009280f9f2b8c"},{"problem":60,"code":"(fn reduc#\n  ([func a-seq]\n   (reduc# func (first a-seq) a-seq))\n  ([func seed a-seq]\n   (if (seq? a-seq)\n     (lazy-seq\n       (cons (func seed (first a-seq))\n             (reduc# func (func seed (first a-seq)) (rest a-seq))))\n     (loop [lseq a-seq curval seed acc (vector seed)]\n       (if (empty? lseq)\n         acc\n         (let [nextval (func curval (first lseq))]\n           (recur (rest lseq) nextval (conj acc nextval))))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":60,"code":"(fn reduc\n  ([f init seqq]\n   (lazy-seq (cons init\n                   (when seqq\n                     (reduc f (f init (first seqq)) (next seqq))))\n             )\n   )\n  ([f seqq] (reduc f (first seqq) (next seqq)))\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"code":"(fn [f & args]\n  (\n    (fn red [in c]\n      (if (empty? c) \n        [in]\n        (let [v (f in (first c))]\n          (lazy-seq (cons in (red v (rest c))))\n        )\n      )\n    )\n    (if ( = (count args) 2) (first args) (first (first args)))\n    (if ( = (count args) 2) (second args) (rest (first args)))\n  )\n)","problem":60,"user":"4f84400de4b033992c121c2e"},{"problem":60,"code":"(fn rec\n    ([f xs] (rec f (first xs) (rest xs)))\n    ([f i xs]\n     (if-let [xs (seq xs)]\n       (lazy-seq (cons i (rec f (f i (first xs)) (rest xs))))\n       (list i))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":60,"code":"(fn r2\n  ([f c] (lazy-seq (r2 f (first c) (rest c))))\n  ([f a c]\n   (cons a\n         (lazy-seq\n          (when-let [s (seq c)]\n            (r2 f (f a (first s)) (rest s)))))))","user":"57533bc1e4b02ea1147992a6"},{"problem":60,"code":"(fn reductions2\n  ([f coll]\n   (reductions2 f (first coll) (rest coll)))\n  ([f v coll]\n   (lazy-seq (cons v (if (seq coll)\n                       (reductions2 f (f v (first coll)) (rest coll))\n                       nil)))))","user":"51dafedee4b09f6bc204eee2"},{"problem":60,"code":"(fn ownreductions\n  ([f coll] (if (empty? coll)\n              (list (f))\n              (ownreductions f  (first coll) (rest coll))))\n  ([f init coll]\n   (if (empty? coll) (list init)\n       (let [res (f init (first coll))]\n         (cons init (lazy-seq\n                     (ownreductions f res (rest coll))))))))","user":"55079e55e4b021ccfedb96aa"},{"code":"(letfn [(next-reduction [f val coll]\n          (if (empty? coll)\n            (cons val [])\n            (lazy-seq\n             (cons val\n                   (next-reduction f\n                                   (f val (first coll))\n                                   (rest coll))))))\n        (my-reductions\n          ([f coll]\n             (my-reductions f (first coll) (rest coll)))\n          ([f init coll]\n             (next-reduction f init coll)))]\n  my-reductions)","problem":60,"user":"5014754de4b094324338f8e5"},{"code":"(fn rreduce\n  ([f s]\n     (if (empty? s)\n       s\n       (rreduce f (first s) (rest s))))\n  ([f init s]\n     (letfn [(next-result [result in]\n               (if (empty? in)\n                 (list result)\n                 (cons result\n                       (lazy-seq (next-result (f result (first in))\n                                              (rest in))))))]\n       (next-result init s))))","problem":60,"user":"4f04f847535dcb61093f6beb"},{"problem":60,"code":"(fn rreduce\n  ([rf coll]\n   (if (seq coll)\n     (rreduce rf (first coll) (rest coll))\n     (list (rf))))\n  ([rf val coll]\n   (lazy-seq\n     (cons val\n           (when (seq coll)\n             (rreduce rf (rf val (first coll)) (rest coll)))))))","user":"52470d42e4b05ef8e38e6350"},{"problem":60,"code":"(fn [f ma & mxs]\n   (let [a (if (nil? mxs)\n             (first ma)\n             ma)\n         xs (if (nil? mxs)\n              (rest ma)\n              (first mxs))]\n     (letfn [(my-reds ([f xs a]\n                       (if (empty? xs)\n                         nil\n                         (let [next-red (f a (first xs))]\n                           (cons next-red\n                                 (lazy-seq (my-reds f (rest xs) next-red)))))))]\n       (cons a (lazy-seq (my-reds f xs a))))))","user":"51bb08a4e4b0fe3ecfb46446"},{"problem":60,"code":"(fn reduc\n   ([f d]\n    (reduc f (first d) (rest d)))\n   ([f acc d]\n    (if (empty? d)\n      (list acc)\n      (lazy-seq\n        (cons acc (reduc f (f acc (first d)) (rest d)))))))","user":"54a11042e4b09f271ff37c49"},{"code":"(fn r\n   ([f col]\n      (r f (first col) (rest col)))\n   ([f val col]\n      (lazy-seq\n       (if (empty? col) (list val)\n           (let [nval (f val (first col))]\n             (cons val (r f nval (rest col))))))))","problem":60,"user":"5027b41ee4b01614d1633fee"},{"problem":60,"code":"(fn my-reductions\n  ([f acc coll]\n    (if (empty? coll)\n      [acc]\n      (let [new-acc (f acc (first coll))]\n        (lazy-seq (cons acc (my-reductions f new-acc (rest coll)))))))\n  ([f coll]\n    (if (empty? coll)\n      []\n      (my-reductions f (first coll) (rest coll)))))","user":"55afd469e4b002ce9d5cbc19"},{"problem":60,"code":"(fn __ [op z1 & z2]\n\t(\n\t\t(fn foo [y1 y2]\n\t\t\t(lazy-seq\n\t\t\t\t(cons\n\t\t\t\t\ty1\n\t\t\t\t\t(if (empty? y2)\n\t\t\t\t\t\tnil\n\t\t\t\t\t\t(foo\n\t\t\t\t\t\t\t(op y1 (first y2))\n\t\t\t\t\t\t\t(next y2)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t(if (nil? z2)\n\t\t\t(first z1)\n\t\t\tz1\n\t\t\t)\n\t\t(if (nil? z2)\n\t\t\t(next z1)\n\t\t\t(first z2)\n\t\t\t)\n\t\t)\n\t)","user":"575dda55e4b02ea11479938c"},{"problem":60,"code":"(fn rr ([f s] (rr f (first s) (rest s)))\n  ([f v s] (if (empty? s) [v] (cons v (lazy-seq (rr f (f v (first s)) (rest s)))))))","user":"53e19461e4b0d874e779ae59"},{"problem":60,"code":"(letfn [(myreductions\n            ([f coll]\n              (lazy-seq\n                        (if-let [s (seq coll)]\n                          (myreductions f (first s) (rest s))\n                          (list (f))))) \n            ([f init coll]\n              (cons init \n                    (lazy-seq\n                      (when-let [s (seq coll)]\n                        (myreductions f (f init (first s)) (rest s)))))))]\n    (fn\n      ([f coll] (myreductions f coll))\n      ([f init coll] (myreductions f init coll))))","user":"55aa1637e4b0988bba2ad949"},{"problem":60,"code":"(fn my-reductions3\n  ([fun col]\n   (lazy-seq\n     (if (seq col)\n       (cons (first col) (my-reductions3 fun (rest col) (first col) nil))\n       [])))\n  ([fun init-val col]\n   (lazy-seq\n     (if (seq col)\n       (cons init-val (my-reductions3 fun col init-val nil))\n       [])))\n  ([fun col cur-el ph]\n   (lazy-seq\n     (if (seq col)\n       (cons (fun cur-el (first col)) (my-reductions3 fun (rest col) (fun cur-el (first col)) nil))\n       []))))","user":"5c3f6322e4b08cd430848e97"},{"problem":60,"code":"(fn my-reductions\n  ([f col]\n   (my-reductions f (first col) (rest col)))\n  ([f init col]\n   (cons\n     init\n     (lazy-seq\n       (if (empty? col)\n         nil\n         (my-reductions f\n                        (apply f (list init (first col)))\n                        (rest col)))))))","user":"57c500f9e4b05aa3c4741cda"},{"code":"(fn r\n    ([f b] (r f (first b) (rest b)))\n    ([f a b] (if (empty? b) [a] (cons a (lazy-seq (r f (f a (first b)) (rest b)))))))","problem":60,"user":"5093ca51e4b097f48cc38585"},{"problem":60,"code":"(fn high-step\n    ([f c]\n     (lazy-seq\n      (if-let [s (seq c)]\n        (high-step f (first s) (rest s))\n        (list f))))\n    ([f i c]\n     (cons i\n           (lazy-seq \n            (when-let [s (seq c)]\n              (high-step f (f i (first s)) (rest s)))))\n     ))","user":"5881335ce4b0f1effa3b762e"},{"code":"(fn -reducts\n           ([-fn -col]\n              (-reducts -fn (-fn (first -col)) (next -col) )\n              )\n           ([-fn -base -col]\n              (cons\n                 -base\n                 (lazy-seq\n                  (when-let [s (seq -col)]\n                    (-reducts -fn (-fn -base (first s)) (next s)))))\n              ))","problem":60,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"(fn my-reduce \n ([ f [a & r]] (my-reduce f a r))\n ([ f a r]\n    (if (empty? r)\n        (list a)\n        (cons a (lazy-seq (my-reduce f (f a (first r)) (next r)))))))","problem":60,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn F\r\n  ([f s](F f(first s)(rest s)))\r\n  ([f x s](cons x\r\n    (lazy-seq\r\n      (if(seq s)(F f(f x(first s))(rest s)))))))","problem":60,"user":"4dd66da7535d2dad7130b5c8"},{"code":"(fn r \n  ([f [h & t]] (r f h t) )\n  ([f i s]\n    (letfn [ \n      (r [f c s]\n        (if (empty? s) \n          []\n          (let [ [h & t] s c (f c h)]\n            (lazy-seq (cons c (r f c t))))))]\n      (cons i (r f i s)))))","problem":60,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn redu\n  ([f [a & s]] (redu f a s))\n  ([f init [a & s]]\n    (lazy-seq\n      (cons init (if a (redu f (f init a) s))))))","problem":60,"user":"4f91a38ae4b0dcca54ed6c9f"},{"code":"(fn r\n  ([f coll]\n    (r f (f (first coll)) (rest coll)))\n  ([f b coll]\n    (lazy-seq\n      (cons b\n        (when-let [s (seq coll)]\n          (r f (f b (first s)) (rest s)))))))","problem":60,"user":"5175533fe4b0dea9bbfba575"},{"problem":60,"code":"(fn r \n  ([f x]\n   (if (empty? (rest x))\n     (list (first x))\n     (lazy-seq\n      (cons (first x) (r f (cons (f (first x) (second x)) (drop 2 x)))))))\n  ([f s x]\n   (if (empty? x)\n     (list s)\n     (lazy-seq\n      (cons s (r f (cons (f s (first x)) (drop 1 x)))))))\n  )","user":"56f7ecdfe4b08e7d20b96834"},{"code":"(fn r \n  ([f s] (r f (first s) (rest s)))\n  ([f v s] \n     (if (seq s) \n       (let [h (first s)\n             n (f v h)]\n         (cons v (lazy-seq (r f n (rest s))))) (list v))))","problem":60,"user":"4e3a9dae535deb9a81d77f4a"},{"code":"(fn old-my-reductions\n  ([f coll]\n    (old-my-reductions f (first coll) (rest coll)))\n  ([f start coll]\n    (if (first coll)\n      (lazy-seq (cons start (old-my-reductions f (f start (first coll)) (rest coll))))\n      [start])))","problem":60,"user":"51701a9ce4b034fe8eaf70f5"},{"problem":60,"code":"(fn man-reductions\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (man-reductions f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n             (when-let [s (seq coll)]\n               (man-reductions f (f init (first s)) (rest s)))))))","user":"5c51d700e4b0fb8c5ffd99d1"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f init coll]\n    (cons init\n      (when (seq coll)\n        (lazy-seq (red f (f init (first coll)) (rest coll)))))))","user":"55ede35ce4b0121d4835fde1"},{"code":"(fn reds\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (reds f (first s) (rest s))\n       (list (f coll)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (reds f (f init (first s)) (rest s)))))))","problem":60,"user":"4f849f76e4b033992c121c36"},{"problem":60,"code":"(fn r \n  ([f s] (r f (first s) (rest s)))\n  ([f i s]\n   (if (empty? s)\n     (list i)\n     (lazy-seq (cons i (r f (f i (first s)) (rest s)))))))","user":"5a3c2a08e4b001c08efc0cdf"},{"problem":60,"code":"(fn rd \n\t([f x]\n\t\t(rd f (first x) (rest x)))\n  \n\t([f value col]\n\t\t(if (empty? col) (list value)\n\t\t\t(cons value (lazy-seq (rd f (f value (first col)) (rest col)))))))","user":"562d869be4b0a45d2ff8301f"},{"code":"(fn r\n  ([f s] (r f (first s) (rest s)))\n  ([f i s] (cons i (lazy-seq (when s\n                               (r f (f i (first s)) (next s)))))))","problem":60,"user":"522a01ade4b0590a43906ced"},{"code":"(fn folds\n  ([f [x & xs]] (folds f x xs))\n  ([f acc [x & xs]] \n    (lazy-seq\n      (cons acc (if x (folds f (f acc x) xs))))))","problem":60,"user":"4f6160a7e4b0defedf855fbe"},{"code":"(fn reduction1\n  ([f col]\n     (reduction1 f (f (first col)) (rest col)))\n  ([f val col]\n     (if (empty? col)\n       (list val)\n       (cons val (lazy-seq (reduction1 f (f val (first col)) (rest col)))))))","problem":60,"user":"4eec82fe535d93acb0a668ae"},{"problem":60,"code":"(fn red \n  ([f [x & xs]] (red f (f x) xs))\n  ([f v [x & xs]] (if (nil? x)\n                    [v]\n                    (cons v (lazy-seq (red f (f v x) xs))))))","user":"5368fedee4b0243289761e93"},{"problem":60,"code":"(fn myreduce\n   ([f coll] (myreduce f (first coll) (rest coll)))\n   ([f init coll]\n    (letfn [(g [init [x & xs]]\n              (let [temp (f init x)]\n                (lazy-seq (cons temp (when xs (g temp xs))))))]\n      (lazy-seq (cons init (g init coll)))\n      )\n    )\n  )","user":"557c6ca6e4b05c286339e0c4"},{"code":"(fn reds\n ([f val col]\n   (letfn [(reds2\n             [v c]\n             (lazy-seq\n               (when-let [s (seq c)]\n                 (let [r (f v (first s))]\n                   (cons r (reds2 r (rest s)))))))]\n          (conj (reds2 val col) val)))\n ([f col]\n   (reds f (first col) (next col))))","problem":60,"user":"4ea41fc2535d7eef308072cb"},{"problem":60,"code":"(fn red\n  ([f xs] (red f (first xs) (rest xs)))\n  ([f x xs]\n      (lazy-seq (cons x\n                      (when (not-empty xs)\n                        (red f (f x (first xs)) (rest xs)))))))","user":"54dce62be4b024c67c0cf78b"},{"problem":60,"code":"(fn reduces\n  ([f xs] (reduces f (first xs) (rest xs)))\n  ([f init xs]\n    (lazy-seq (cons init\n                    (when-let [xs (seq xs)]\n                      (reduces f (f init (first xs)) (rest xs)))))))","user":"550f1c99e4b06e50f9beb171"},{"problem":60,"code":"(fn seq-reductions\n  ([f coll]\n   (lazy-seq\n    (if-let [s (seq coll)]\n      (seq-reductions f (first coll) (rest coll))\n      (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq \n           (if-let [s (seq coll)]\n             (seq-reductions f (f init (first s)) (rest s)))))))","user":"58ca8a1de4b03c36ff7e5835"},{"problem":60,"code":"(fn myreduct\n         ([func coll]\n          (myreduct func (first coll) (rest coll)))\n         ([func firstval coll]\n          (letfn [(_reduct [_func _firstval _coll]\n                           (lazy-seq (when-not (empty? _coll)\n                                       (let [init (_func _firstval (first _coll))]\n                                         (cons init (_reduct _func init (rest _coll)))))))]\n            (lazy-seq (cons firstval (_reduct func firstval coll))))))","user":"55a372f1e4b0acc240e31537"},{"code":"(fn my-reductions\n  ([f coll]\n    (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n      (if (empty? coll)\n        [init]\n        (let [x (f init (first coll))]\n          (lazy-seq\n            (cons init (my-reductions f x (rest coll))))))))","problem":60,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn r\n    ([f a coll]\n       (lazy-seq\n        (if-let [s (seq coll)]\n          (cons a (r f (f a (first s)) (rest s)))\n          (list a))))\n    ([f [x & xs]] (r f x xs)))","problem":60,"user":"4e50ad74535dc968683fc4ec"},{"problem":60,"code":"(fn red \n  ([f init coll]\n   (conj (map-indexed (fn [i e] \n                        (reduce f init (take (inc i) coll))) \n                      coll)\n         init ))\n  ([f coll]\n   (red f (first coll) (rest coll))))","user":"558bb38fe4b0277789237631"},{"code":"(fn reducer \n  ([f [x & xs]] (reducer f x xs))\n  ([f ini [x & xs :as c]]\n     (lazy-cat [ini] (if-not c\n                       []\n                       (reducer f (f ini x) xs)))))","problem":60,"user":"51533ecde4b0252ac4b16619"},{"code":"(fn reduc \n  ([op t] (reduc op (first t) (rest t)))\n  ([op s t]\n      (cons s\n        (if (seq t)\n          (lazy-seq (reduc op (op s (first t)) (rest t)))))))","problem":60,"user":"4eb0a757535d7eef3080733d"},{"problem":60,"code":"(fn redu\n   ( [f x] (redu f (first x)  (rest x))  )\n  \n ( [f x y]\n  \n  (lazy-seq \n   \n         (   if (empty? y) \n                 (list x)\n                (cons   x    (redu f (f x (first y)) (  rest y ) )    ))\n   \n   \n   \n   )\n  )\n  \n  \n)","user":"5da98129e4b000c986472c33"},{"code":"(fn reductions*\n  ([f [acc & coll]] (reductions* f acc coll))\n  ([f acc coll] \n    (cons acc \n      (if-let [[head & tail] coll]\n        (lazy-seq (reductions* f (f acc head) tail))))))","problem":60,"user":"4f45c72be4b0d56e7bb92b8a"},{"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f i coll]\n     (lazy-seq (if (seq coll)\n                 (let [v (f i (first coll))]\n                   (cons i\n                         (my-reductions f v (rest coll))))\n                 (list i)))))","problem":60,"user":"509e62a8e4b08df8156e9e2e"},{"code":"(fn r\n  ([f [a & b]]   (r f a b))\n  ([f a [b & c]] \n    (cons a (if b (lazy-seq (r f (f a b) c))))))","problem":60,"user":"4e43b0d9535dc968683fc4a3"},{"problem":60,"code":"(fn my-reduce\n  ([f coll] (lazy-seq (if (empty? coll) nil (my-reduce f (first coll) (rest coll)))))\n  ([f val coll] \n   (if (empty? coll) \n     (list val) \n     (cons val (lazy-seq (my-reduce f (f val (first coll)) (rest coll)))))))","user":"5d5e0259e4b0c9e5857d4fef"},{"code":"(fn myReductions\n  ([f init coll] \n   (cons init (lazy-seq \n     (when (first coll) \n        (myReductions f (f init (first coll)) (rest coll)))))\n  ) \n  ([f coll] \n   (myReductions f (first coll) (rest coll))\n  )\n)","problem":60,"user":"4fce75cfe4b03432b189f400"},{"problem":60,"code":"(fn my-reductions\n  ([f [x & xs]] (my-reductions f x xs))\n  ([f a col]\n   (if-let [[x & xs] col]\n     (cons a (lazy-seq (my-reductions f (f a x) xs)))\n     [a])))","user":"5540cc0ce4b0a04f79299505"},{"code":"(fn r \n          ([f init [x & xs]]\n            (cons init (lazy-seq (when x (r f (f init x) xs))))\n          )\n          ([f coll]\n            (r f (first coll) (rest coll))\n          )\n        )","problem":60,"user":"52b1d41ce4b0c58976d9ace6"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f agg coll]\n   (let [new-agg (f agg (first coll))\n         rest-coll (seq (rest coll)) ]\n     (if rest-coll\n       (lazy-seq (cons agg (my-reductions f new-agg rest-coll)))\n       (lazy-seq (cons agg (cons new-agg ())))))))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"code":"(fn reduc \n           ([f s] (let [val (apply f (take 2 s))]\n                    (do ;;(println \"val=\" val \"s=\" (take 10 s))\n                        (cons (first s) (lazy-seq (reduc f val (drop 2 s)))\n                           ))\n                  )\n           )\n           ([f init coll]\n              (do ;;(println \"init=\" init \"coll=\" (take 10 coll))\n                  (if (empty? coll)\n                 (list init)\n                 (let [val (f init (first coll))]\n                   (do ;;(println \"val=\" val)\n                       (cons init (lazy-seq (reduc f val (next coll)))\n                          ))\n                   )))\n           )\n         )","problem":60,"user":"50cae881e4b0f75dcc9a6e51"},{"code":"(fn seq-red \n  ([f s] (seq-red f (f (first s)) (rest s)))\n([f prev s]\n  (if (empty? s)\n[prev]\n  (lazy-seq\n    (cons prev\n      (seq-red f (f prev (first s)) (rest s)\n))))))","problem":60,"user":"4fca2a13e4b0ee37620e184d"},{"problem":60,"code":"(fn red2 \n         ([f coll] (red2 f (first coll) (rest coll)))\n         ([f init coll] \n          (if (empty? coll)\n            (vector init)\n           (cons init (lazy-seq (red2 f (f init (first coll)) (rest coll)))))\n          ))","user":"533c2605e4b0e30313ee6cd7"},{"problem":60,"code":"(fn my-reduce \n  ([f coll] (my-reduce f (first coll) (rest coll)))\n  ([f init coll]\n    (if (empty? coll)\n      [init]\n      (lazy-seq (concat [init] (my-reduce f (f init (first coll)) (rest coll)))))))","user":"561a1af6e4b053970a773b02"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     (vector init)\n     (lazy-seq (cons init (my-reductions f (f init (first coll)) (rest coll)))))))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":60,"code":"(fn mr\n  ([f co] (mr f (first co) (rest co)))\n  ([f cu co] (if (empty? co) (list cu) (lazy-seq (cons cu (mr f (f cu (first co)) (rest co)))))))","user":"5b421edce4b02d533a91bc2c"},{"code":"(fn reductions*\n    ([f col]\n       (reductions* f (first col) (rest col)))\n    ([f init col]\n       (cons init\n             (lazy-seq\n              (if (empty? col)\n                ()\n                (let [s-col (seq col)]\n                  (reductions* f (f init (first s-col)) (rest s-col))))))))","problem":60,"user":"4daea889edd6309eace4d15b"},{"code":"(fn verbose-reduce\n  ([op seqn]\n   (if (empty? seqn)\n     seqn\n     (verbose-reduce op (first seqn) (rest seqn))))\n  ([op unit seqn]\n   (lazy-seq\n    (if (empty? seqn)\n      (cons unit nil)\n      (cons unit (verbose-reduce op\n                                 (op unit (first seqn))\n                                 (rest seqn)))))))","problem":60,"user":"53889587e4b0640c7a9a589e"},{"problem":60,"code":"(fn r ([f c]\n       (r f (first c) (rest c)))\n      ([f i c]\n       (cons i (lazy-seq (when-let [s (seq c)] (r f (f i (first c)) (rest c)))))))","user":"544e8369e4b0e39780006987"},{"problem":60,"code":"(fn reduct \n  ([f args] (reduct f (first args) (rest args)))\n  ([f val args] (cons val \n                  (lazy-seq (when-let [s (seq args)] (reduct f (f val (first args)) (rest args)))))))","user":"59cd13d5e4b0ef0a1e9b5b32"},{"problem":60,"code":"(fn myreductions\r\n      ([f init coll]\r\n        (if (empty? coll)\r\n          [init]\r\n          (let [next-value (first coll)\r\n                next-result (f init next-value)]\r\n               (cons init\r\n                     (lazy-seq (myreductions f next-result (rest coll)))))))\r\n      ([f coll] (myreductions f (first coll) (rest coll))))","user":"4f1abbfb535d64f60314646e"},{"problem":60,"code":"(fn my-redunctions\n  ([f coll] (my-redunctions f (first coll) (rest coll)))\n  ([f init coll]\n    (if (empty? coll)\n      (list init)\n      (lazy-seq (cons init\n                      (my-redunctions f\n                                      (f init (first coll))\n                                      (rest coll)))))))","user":"59a24c92e4b066c664927d20"},{"code":"(fn r\n  ([f init coll]\n    (cons init \n          (lazy-seq \n            (when (seq coll)\n              (r f (f init (first coll)) (next coll))))))\n  ([f coll] (r f (first coll) (next coll))))","problem":60,"user":"51d19c24e4b0cfcf579466c3"},{"code":"(fn red\n  ([f coll]\n     (if (seq coll)\n       (red f (first coll) (next coll))\n       (f)))\n  \n  ([f val coll]\n     (if (seq coll)\n       (let [next-val (f val (first coll))]\n         (lazy-seq (cons val (red f next-val (next coll)))))\n       [val])))","problem":60,"user":"5236b6bce4b05f3be1c7c8fe"},{"code":"(fn reduc\n  ([f coll] (reduc f (first coll) (rest coll)))\n  ([f x coll]\n    (lazy-seq\n\t  (cons x (when (seq coll) (reduc f (f x (first coll)) (rest coll)))))))","problem":60,"user":"52c4af71e4b0c2d177d620e1"},{"code":"(fn pr60-4\n    ([f coll] (pr60-4 f (first coll) (rest coll)))\n    ([f init coll]\n     (if (empty? coll)\n       (cons init [])\n       (let [next-init (f init (first coll))]\n         (cons init\n               (lazy-seq \n                 (pr60-4 f next-init (rest coll))))))))","problem":60,"user":"51696ee7e4b03f62cda68ce8"},{"code":"(fn r1\n  ([f [x & r]] \n    (r1 f x r))\n  ([f v [x & r]]\n    (lazy-seq\n      (if x\n        (cons v (r1 f (f v x) r))\n        [v]))))","problem":60,"user":"502904e0e4b0feaf66e22fad"},{"problem":60,"code":"(fn my-reducs \n  ([f coll]\n  \t(lazy-seq\n  \t  (if-let [s (seq coll)]\n        (my-reducs f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (my-reducs f (f init (first s)) (rest s)))))))","user":"4eb3fcba535d7eef30807359"},{"code":"( fn ([x y] ( map (fn [z] (reduce x (take (inc z) y) ) ) (range))) \n\t([x y w] ( map (fn [z] (reduce x y (take z w) ) ) (range (inc (count w))))) \n )","problem":60,"user":"5296008fe4b02ebb4ef7502a"},{"problem":60,"code":"(fn reductions*\n  ([f xs]\n   (reductions* f (first xs) (rest xs)))\n  ([f init xs]\n   (cons init (lazy-seq (when-let [n (first xs)]\n                          (reductions* f (f init n) (rest xs)))))))","user":"53528cd3e4b084c2834f4af2"},{"code":"(fn r ([f i v] (conj (let [x (atom i)] (for [y v] (swap! x #(f % y)))) i))\n      ([f v] (r f (first v) (rest v))))","problem":60,"user":"50bce014e4b0594b91591c63"},{"problem":60,"code":"(fn ff \n  ([f, col]\n   (ff f (first col) (rest col)))\n  ([f, res, col]\n   (lazy-seq\n     (if (empty? col)\n       (list res)\n       (cons res (ff f (f res (first col)) (rest col)))))))","user":"593d6793e4b069cdc2982ba6"},{"problem":60,"code":"(fn my-reduce \n     ([f xs] (my-reduce f (first xs) (rest xs)))\n     ([f acc xs] (if (empty? xs) (cons acc xs) (cons acc (lazy-seq (my-reduce f (f acc (first xs)) (rest xs)))))))","user":"5d02fe44e4b0cc9c915881c0"},{"code":"(fn f [g x & y]\n  (let [i (if y x (first x))\n        r (if y (first y) (rest x))]\n    (letfn [(h [a b] (if (empty? b)\n                       []\n                       (let [tmp (g a (first b))]\n                         (lazy-seq (concat [tmp] (h tmp (rest b)))))))]\n      (concat [i] (h i r)))))","problem":60,"user":"5097b556e4b00ad8bab4e970"},{"problem":60,"code":"(fn reds\n    ([f [fst & rst]] (reds f fst rst))\n    ([f init [fst & rst]] \n       (lazy-seq       \n        (cons init (if fst (reds f (f init fst) rst))))))","user":"54ad9d76e4b09f271ff37ce6"},{"code":"(fn r\n  ([f c]\n    (lazy-seq\n      (if-let [s (seq c)]\n        (r f (first s) (rest s)))))\n  ([f i c]\n    (cons i\n      (lazy-seq\n        (when-let [s (seq c)]\n          (r f (f i (first s)) (rest s)))))))","problem":60,"user":"4f03857e535dcb61093f6b0d"},{"code":"(fn redu\n   ([f lat] (redu f (first lat) (rest lat)))\n   ([f cv lat]\n      (cond\n       (empty? lat) [cv]\n       :else\n       (let [nv (f cv (first lat))]\n         (cons cv\n               (lazy-seq (redu f nv (rest lat))))))))","problem":60,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn my-reductions\n  ([f x coll]\n     (if (nil? (first coll))\n       (list x)\n       (cons\n        x\n        (lazy-seq (my-reductions f (f x (first coll)) (rest coll))))))\n        \n  ([f coll]\n     (lazy-seq (my-reductions f (first coll) (rest coll)))))","problem":60,"user":"504ec4d3e4b069badc5a33c9"},{"problem":60,"code":"(fn sequence-reductions\n  ([f s]\n   (sequence-reductions f (first s) (rest s)))\n  ([f i s]\n   (cons i\n         (lazy-seq\n           (if (not (empty? s))\n             (sequence-reductions f\n                                  (f i (first s))\n                                  (rest s)))))))","user":"57e7fbc7e4b0bfb2137f5b0b"},{"problem":60,"code":"(fn my-reduce\n  ([f v]\n   (my-reduce f (first v) (next v)))\n  ([f i [n & t :as a]]\n   (cons i\n         (lazy-seq\n           (if (seq a)\n             (my-reduce f (f i n) t))))))","user":"56084e91e4b046a4fc0ac00f"},{"problem":60,"code":"(fn red\n  ([f r] (red f (first r) (rest r)))\n  ([f a r] (if (empty? r) [a] (cons a (lazy-seq (red f (f a (first r)) (rest r))))))\n)","user":"54349368e4b0b6b47310fcf1"},{"problem":60,"code":"(fn myreductions \n  ([f start col]\n   (lazy-seq\n     (if (seq col)\n      (cons start (myreductions f (f start (first col)) (rest col)))\n      [start])))\n  ([f col] (myreductions f (first col) (rest col))))","user":"55536a8ae4b0deb715856e03"},{"problem":60,"code":"(fn re\n ([f [h & r]] (re f h r))\n ([f i [h & r]]\n  (cons i (if h (lazy-seq (re f (f i h) r))))))","user":"554b8572e4b0a04f79299589"},{"problem":60,"code":"(fn r\n  ([f [i & o]] (r f i o))\n  ([f i o]\n   (cons i (when (not (empty? o)) (lazy-seq (r f (f i (first o)) (rest o)))))))","user":"586615e6e4b0f14aab7c8858"},{"problem":60,"code":"(fn redux\n    ([f coll] (redux f (first coll) (rest coll)))\n    ([f init coll] (cons init \n                         (lazy-seq \n                          (if (empty? coll)\n                              nil\n                              (redux f (f init (first coll)) (rest coll)))))))","user":"5617db88e4b06b1bb2182a16"},{"problem":60,"code":"(fn my-reductions\n  ([f initial xs1]\n   (->> (iterate (fn [[curr [head & tail]]]\n                   [(f curr head) tail])\n                 [initial xs1])\n        (map first)\n        ((fn [xs2]\n           (if (vector? xs1)\n             (take (inc (count xs1)) xs2)\n             xs2)))))\n  ([f [head & tail]]\n    (my-reductions f head tail)))","user":"561d8936e4b064ca9f4b16b2"},{"problem":60,"code":"(fn reducs\n  ([op [x & xs]] (reducs op x xs))\n  ([op init [x & xs :as coll]]\n   (lazy-seq\n    (if-not (seq coll)\n      (cons init ())\n      (cons init\n            (reducs op (op init x) xs))))\n   ))","user":"59b1c2eae4b0e1f4e384c8ec"},{"code":"(fn h\n  ([g [f & r]] (h g f r))\n  ([g i [f & r :as v]]\n     (cons i\n           (lazy-seq\n            (if (seq v)\n              (h g (g i f) r))))))","problem":60,"user":"4ee9ddb8535d93acb0a66896"},{"problem":60,"code":"(fn reduce-it\n    ([f in] \n        (reduce-it f (first in) (rest in)))\n    ([f res in]\n        (if (empty? in)\n            (list res)\n            (lazy-seq (cons res\n                            (reduce-it f\n                                       (f res (first in))\n                                       (rest in)))))))","user":"5ff93da9e4b06df49cee14af"},{"problem":60,"code":"(fn my-reduction\n  ([f coll] (my-reduction f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     (list init)\n     (cons init (lazy-seq (my-reduction f (f init (first coll)) (rest coll)))))))","user":"5401aefbe4b0df28a13c62c7"},{"code":"(fn red\n  ([function s] (red function (first s) (rest s)))\n  ([function i s]\n    (if(seq s)\n      (let [res (function i (first s))]\n        (lazy-seq (cons i (red function res (rest s)))))\n    (lazy-seq (cons i nil)))))","problem":60,"user":"4ea5e794535d7eef308072df"},{"problem":60,"code":"(fn red \n ([f coll]\n  (red f (first coll) (rest coll)))\n ([f ini coll]\n  (lazy-seq\n   (if (seq coll)\n    (let [r (f ini (first coll))]\n     (cons ini (red f r (rest coll))))\n    [ini]))))","user":"566ff0a1e4b0a866af6896ec"},{"problem":60,"code":"(fn ([func coll]\n               (map (fn [x y] (reduce func (take (inc x) coll))) (range) coll))\n            ([func init coll]\n             (cons init (map (fn [x y] (reduce func init (take (inc x) coll))) (range) coll))))","user":"5c0e3f86e4b01240ff56713d"},{"problem":60,"code":"(fn m\n         ([f a] (m f (first a) (rest a)))\n         ([f a b] (if (seq b)\n                      (cons a (lazy-seq\n                               (m f (f a (first b)) (rest b))))\n                      [a])))","user":"53572176e4b04ce2eb3ed276"},{"problem":60,"code":"(fn reduct\n  ([f xs]\n   (when (seq xs)\n     (reduct f (first xs) (rest xs))))\n  ([f init xs]\n   (lazy-seq\n     (cons\n       init\n       (when (seq xs)\n         (reduct f (f init (first xs)) (rest xs)))))))","user":"5d609ddde4b0c9e5857d5008"},{"code":"(fn red\n  ([f coll]\n     (red f (first coll) (rest coll)))\n  ([f v coll]\n     (lazy-seq (cons v (when (seq coll)\n                         (red f (f v (first coll)) (rest coll)))))))","problem":60,"user":"50645e12e4b007509339a58a"},{"code":"(fn this \r\n    ([f s]\r\n      (map #(reduce f %)\r\n           (map (fn [n x] (take (inc n) s))\r\n                (range)\r\n                s)))\r\n    ([f x s]\r\n      (this f (cons x s))))","problem":60,"user":"4de760a3535d08e6dec9fdf9"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (my-reductions f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (my-reductions f (f init (first s)) (rest s)))))))","user":"58ed713de4b056aecfd47d84"},{"problem":60,"code":"(fn red\n ([f coll] (if-let [s (seq coll)] \n    (red f (first s) (next s))\n\t(list (f))))\n ([f v coll] \n   (cons v (lazy-seq (when-let [s (seq coll)] (red f (f v (first s)) (next s)))))))","user":"53fe1c3be4b0de5c418485f2"},{"code":"(fn m\n  ([o r] (m o (first r) (rest r)))\n  ([o x r] (cons x (if (empty? r)\n                      r\n                      (lazy-seq (m o (o x (first r)) (rest r)))))))","problem":60,"user":"503b6995e4b07a1917cc34dd"},{"problem":60,"code":"(fn solution\n  ([f coll] \n    (if-let [x (first coll)] \n      (solution f x (rest coll)) \n      (cons (f) nil)))\n  ([f val coll]\n    (if-let [x (first coll)] \n      (lazy-seq (cons val (solution f (f val x) (rest coll))))\n      (cons val nil))))","user":"59a72effe4b066c664927d94"},{"problem":60,"code":"(fn reduce*\n  ([f col] (reduce* f (first col) (rest col)))\n  ([f init [c & cols]]\n    (cons init (lazy-seq (when c (reduce* f (f init c) cols))))))","user":"581b19e7e4b04b46fc4b0ec4"},{"code":"(fn reduc\n  ([f col] \n   (reduc f (first col) (rest col))) \n  ([f in col]\n   (if (= col ()) [in]\n     (cons in (lazy-seq (reduc f (f in (first col)) (rest col)))))) \n  )","problem":60,"user":"519b7d76e4b02a926d9a436e"},{"code":"(fn reduct\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reduct f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reduct  f (f init (first s)) (rest s)))))))","problem":60,"user":"5101192ae4b0bef64c30e266"},{"problem":60,"code":"(fn p53\n  ([f x]\n     (p53 f (first x) (rest x)))\n  \n  ([f x y]\n     (if (seq y)\n       (cons x (lazy-seq (p53 f (f x (first y)) (next y))))\n       [x])))","user":"520cb8c4e4b0b022ef140c9a"},{"code":"(fn f \n     ([g c] (lazy-seq (f g (first c) (next c))))\n     ([g r c] (if (first c) (lazy-seq (cons r (f g (g r (first c)) (next c)))) (list r))))","problem":60,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn red\n  ([f s] (red f (first s) (drop 1 s)))\n  ([f i s]\n    (cons i\n      (if (seq s)\n          (lazy-seq\n            (red f (f i (first s)) (drop 1 s)))\n          '()))))","problem":60,"user":"4e2b1d48535deb9a81d77f03"},{"problem":60,"code":"(fn reduction\n  ([f s]\n     (reduction f (first s) (next s)))\n  ([f init s]\n   (if-let[k (seq s)]\n     (cons init (lazy-seq(reduction f (f init (first k)) (next k))))\n     [init])))","user":"57bd960fe4b05aa3c4741c52"},{"code":"(fn reds\n   ([f coll]\n      (lazy-seq\n       (when-let [s (seq coll)]\n         (reds f (first s) (next s)))))\n   ([f init coll]\n      (cons init\n            (lazy-seq\n             (when-let [s (seq coll)]\n               (reds f (f init (first s)) (next s)))))))","problem":60,"user":"50aedb8ce4b0a40c9cfb08d4"},{"problem":60,"code":"(fn sr\n  ([f col]\n   (sr f (first col) (rest col)))\n  ([f val col]\n   (cons val (when-not (empty? col) (lazy-seq (sr f (f val (first col)) (rest col)))))))","user":"52570aeae4b0541d1855ba42"},{"problem":60,"code":"(fn Reduction\n  ([rdf seed coll]\n   (lazy-seq (if-let [s (seq coll)]\n               (let [res\t(rdf seed (first s))]\n               (cons seed (Reduction rdf res (rest s) ) ) )\n               [seed]) ) )\n  ([rdf coll] (Reduction rdf (first coll) (rest coll) )))","user":"578d230fe4b0ebec4cfb7564"},{"code":"(fn r\n  ([f [i & c]] (r f i c))\n  ([f i [n & c]] (cons i (when n (lazy-seq (r f (f i n) c))))))","problem":60,"user":"4db2f208535df7e46ed9b6c9"},{"problem":60,"code":"(fn my-reductions\n   ([f s]\n    (my-reductions f (first s) (rest s)))\n   ([f acc s]\n    (if (seq s) \n      (cons acc (lazy-seq (my-reductions f (f acc (first s)) (rest s))))\n      (cons acc (lazy-seq '())))))","user":"5600dccee4b04bb52996e175"},{"problem":60,"code":"(fn red\n   ([f s l]\n    (if (empty? l)\n      [s]\n      (cons s\n            (lazy-seq \n             (red\n              f\n              (f s (first l)) \n              (rest l))))))\n   ([f l]\n    (red f (first l) (rest l)))\n   )","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn redu\n  ([op args] (redu op (first args) (rest args)))\n  ([op seed args]\n   (if (not (empty? args))\n     (let [v (op seed (first args))]\n       (lazy-cat [seed] (redu op v (rest args))))\n     [seed])))","problem":60,"user":"51d96ad0e4b02ceefd94774f"},{"problem":60,"code":"(fn reductions-clone\n  ([f coll] (reductions-clone f (first coll) (rest coll)))\n  ([f default coll]\n   (if (empty? coll)\n     [default]\n     (lazy-seq (cons default (reductions-clone f (f default (first coll)) (rest coll)))))))","user":"5879d577e4b01531a375ead8"},{"problem":60,"code":"(fn my-reductions\n  ([f i s]\n   (lazy-seq\n    (cons i (if (first s) (my-reductions f (f i (first s)) (rest s))))))\n  ([f [i & r]]\n   (my-reductions f i r)))","user":"57609d91e4b08062f99a4e9b"},{"code":"(fn [f l & r] (letfn [(i [lv l]\n             (if (empty? l) [lv]\n                 (cons lv (lazy-seq (i (f lv (first l)) (rest l))))))]\n     (if (empty? r) (i (first l) (rest l))\n         (i l (first r)))))","problem":60,"user":"52c25645e4b07a9af579237d"},{"problem":60,"code":"(fn reduct\n  ([f [init & coll]]\n   (reduct f init coll))\n  ([f init [arg0 & args]]\n   (lazy-seq (cons init\n                   (when arg0\n                     (reduct f (f init arg0) args))))))","user":"50ec409ce4b04edc33777045"},{"problem":60,"code":"(fn r\n           ([f [x & xs]] (lazy-seq (r f x xs)))\n           ([f x xs] (cons x (lazy-seq (if (empty? xs) '() (r f (f x (first xs)) (rest xs)))))))","user":"5310e968e4b08068f379ecdd"},{"problem":60,"code":"(fn custom-reductions \n      ([f value coll]\n        (cons value \n          (lazy-seq \n            (if (empty? coll) \n              nil \n              (custom-reductions f (f value (first coll)) (rest coll))))))\n      ([f coll] (custom-reductions f (first coll) (rest coll))))","user":"5b337ff4e4b025bcb146f339"},{"problem":60,"code":"(fn t \n  ([f [x & xs]] \n   (t f x xs)) \n  ([f p [x & xs]] \n   (if x \n     (lazy-seq (cons p (t f (f p x) xs))) \n     [p])))","user":"53b15e6ee4b047364c04448f"},{"code":"(fn redu\n  ([f coll]\n    (lazy-seq\n      (if-let [s (seq coll)]\n(redu f (first s) (next s))\n(list (f)))))\n([f init coll]\n  (cons init\n    (lazy-seq\n      (when-let [s (seq coll)]\n(redu f (f init (first s)) (next s)))))))","problem":60,"user":"4eb27fad535d7eef3080734a"},{"problem":60,"code":"(fn rdcts ([f s] (when (seq s) (rdcts f (first s) (rest s)) )) \n  \t\t  ([f i s] (cons i (lazy-seq (when (seq s) (rdcts f (f i (first s)) (rest s)) ))) ))\n\n; all the elegant solutions i've seen so far use recursion with multi-arity, can someone hack that?","user":"550fdc1de4b06e50f9beb17d"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (next coll)))\n  ([f init coll]\n   (letfn\n     [(red_recur [value coll]\n         (if coll (lazy-seq (cons value (red_recur (f value (first coll)) (next coll)))) [value])\n       )\n      ]\n     (red_recur init coll)\n     )\n  )\n)","user":"5cebafbbe4b0a17bb84e2be6"},{"code":"(fn my-reductions\n  ([f coll]\n    (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n    (cons init\n      (lazy-seq\n        (when-let [s (seq coll)]\n          (my-reductions f (f init (first s)) (rest s)))))))","problem":60,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":60,"code":"(fn red\n    ([f l] (red 0 f (first l) (rest l)))\n    ([f s l] (red 0 f s l))\n    ([n f s l]\n     (let [res (reduce f s (take n l))]\n       (if (seq (drop n l))\n         (lazy-seq\n           (cons\n             res\n             (red (inc n) f s l)))\n         [res]))))","user":"59419bdfe4b060784b3b78f7"},{"problem":60,"code":"(fn reductions*\n  ([f coll] (if (empty? coll)\n              (vector (f))\n              (reductions* f (first coll) (rest coll))))\n  ([f init coll] (if (empty? coll)\n                   (vector init)\n                   (cons init (lazy-seq (reductions* \n                                          f (f init (first coll)) \n                                          (rest coll)))))))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn r ([f [a & b]] (r f a b)) ([f x [a & b]] (lazy-seq (if a (cons x (r f (f x a) b)) (list x)))))","problem":60,"user":"4f045946535dcb61093f6bba"},{"problem":60,"code":"(letfn [\n (reducks \n  ([f a xs] \n   (lazy-seq \n   (if (empty? xs) \n    (cons a '())\n     (cons a \n      (reducks f (f a (first xs)) (rest xs))))) )\n  ([f ys] \n   (if (empty? ys) '()\n    (reducks f (first ys) (rest ys)))))\n ] reducks)","user":"57f9011ee4b0d3187e900935"},{"problem":60,"code":"(fn n\n  ([f [x & xs]] (n f x xs))\n  ([f r [x & xs]]\n     (lazy-seq\n      (cons r (and x (n f (f r x) xs))))))","user":"5de12192e4b0948ae9d9aded"},{"problem":60,"code":"(fn my-reduce-acc\n  ([f c]\n   (when (seq c)\n    (my-reduce-acc f (first c) (rest c))))\n  ([f s c]\n   (lazy-seq\n     (cons s\n      (when (seq c)\n        (my-reduce-acc f (f s (first c)) (rest c)))))))","user":"5880e38fe4b0f1effa3b7625"},{"problem":60,"code":"(fn reductions2\n    ([f coll] (reductions2 f (f (first coll)) (rest coll)))\n    ([f val coll]\n        (lazy-seq        \n            (cons\n                val\n                (if (empty? coll)\n                    '()\n                    (reductions2 f (f val (first coll)) (rest coll))\n                )\n            )\n        )\n    )\n)","user":"5db7376fe4b010eb3c36cd43"},{"code":"(fn reds\n ([f v s]\n  (if (empty? s)\n    (list v)\n    (lazy-seq (cons v (reds f (f v (first s)) (rest s))))))\n ([f s]\n  (if (empty? s)\n    (f)\n    (reds f (first s) (rest s)))))","problem":60,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"(fn mred\n  ([f coll] \n    (mred f (first coll) (rest coll)))\n  ([f head tail]\n    (if (not (empty? tail))\n      (let [res (f head (first tail))]\n        (lazy-seq (cons head (mred f res (rest tail)))))\n      (cons head '()))))","problem":60,"user":"4f625f68e4b0defedf855fd2"},{"code":"(fn [f & [i & s]]\n  (letfn [(myred [f i s]\n            (lazy-seq\n             (if (seq s)\n               (let [a (f i (first s))]\n                 (cons a (myred f a (rest s)))))))]\n    (if (seq s)\n       (cons i (myred f i (first s)))\n       (cons (first i) (myred f (first i) (rest i))))))","problem":60,"user":"4ee9d697535d93acb0a66895"},{"code":"(fn r \n  ([f i s]\n    (lazy-seq\n      (cons i\n        (when (seq s)\n          (r f (f i (first s)) (rest s))))))\n  ([f s]\n     (r f (first s) (rest s))))","problem":60,"user":"4f043ed1535dcb61093f6bb4"},{"problem":60,"code":"(fn mreductions\n  ([f init coll]\n   (lazy-seq (cons init (if (empty? coll) () (mreductions f (f init (first coll)) (rest coll))))))\n  ([f coll] (mreductions f (first coll) (rest coll)))\n  )","user":"573107d5e4b0cd1946bd0fbc"},{"code":"(fn creduction\n    ([f coll](creduction f (first coll) (rest coll)))\n    ([f init coll]\n        (lazy-seq\n            (cons init\n                (when-let[s (seq coll)]\n                    (creduction f\n                        (f init \n                            (first s)) \n                        (rest s)))))))","problem":60,"user":"532631e1e4b09d4e7a9b54ea"},{"code":"(fn reductions* \n  ([f coll] (reductions* f (first coll) (rest coll)))\n  ([f init coll]\n  (cons init ((fn helper [f init coll]\n                (if (empty? coll)\n                  []\n                  (let [v (f init (first coll))]\n                    (cons v (lazy-seq (helper f v (rest coll))))))) f init coll))))","problem":60,"user":"534d1173e4b084c2834f4a98"},{"code":"(fn [f h & t] (letfn [(reduct [last-in-acc l] (if-let [r (seq l)] (let [next (f last-in-acc (first l))] (lazy-seq (cons next (reduct next (rest l)))))))]                                                                     \n                                (if (nil? t) (cons (first h) (reduct (first h) (rest h))) (cons h (reduct h (first t))))))","problem":60,"user":"52265e41e4b04e78ff2e1981"},{"problem":60,"code":"(fn r\n  ([f coll]\n   (r f (first coll) (rest coll)))\n  ([f item coll]\n   (cons item\n         (lazy-seq\n           (when-not (empty? coll)\n             (r f (f item (first coll)) (rest coll)))))))","user":"560a7752e4b05f002753def9"},{"problem":60,"code":"(fn scan\n  ([f initial coll] (if (empty? coll)\n                      [initial]\n                      (cons initial\n                            (lazy-seq (scan f (f initial (first coll)) (rest coll))))))\n  ([f coll] (scan f (first coll) (rest coll))))","user":"5cc6b4bfe4b0ccb061962827"},{"problem":60,"code":"(fn rdc\n  ([f coll] \n   (rdc f (first coll) (rest coll)))\n  ([f seed coll]\n   (if (empty? coll)\n     [seed]\n     (cons seed (lazy-seq (rdc f (f seed (first coll)) (rest coll)))))))","user":"553dd883e4b0a04f792994e6"},{"problem":60,"code":"(fn red\n  ([op coll] (red op (first coll) (rest coll)))\n  ([op init coll]\n    (if (empty? coll)\n      (list init)\n      (cons init (lazy-seq (red op (op init (first coll)) (rest coll)))))))","user":"520e37cfe4b066f3ea161c96"},{"code":"(fn [f & [x z]]\n  (letfn [(r [s y]\n             (if (empty? y)\n               [s]\n               (lazy-cat [s] (r (f s (first y)) (rest y)))))]\n    (if (nil? z)\n      (r (first x) (rest x))\n      (r x z))))","problem":60,"user":"507ef25ce4b0f753b6f9788e"},{"problem":60,"code":"(fn my-reductions\n           ([f c] (my-reductions f (first c) (rest c)))\n           ([f v c]\n            (if (empty? c) (list v)\n                           (lazy-seq (cons v (my-reductions f (f v (first c)) (rest c)))))))","user":"4e9ff8d0535d7eef3080729c"},{"problem":60,"code":"(fn red [f b & c]\n  (let [int-red (fn int-red [f coll acc]\n                  (lazy-seq\n                    (if (seq coll)\n                      (let [next-val (f acc (first coll))]\n                        (cons next-val (int-red f (rest coll) next-val))))))]\n    (if c\n      (cons b (int-red f (first c) b))\n      (cons (first b) (int-red f (rest b) (first b))))))","user":"5353afa0e4b084c2834f4b03"},{"code":"(letfn [(reddy\n            ([f coll]\n               (lazy-seq\n                (if-let [s (seq coll)]\n                  (reddy f (first s) (rest s))\n                  (list (f)))))\n            ([f init coll]\n               (cons init\n                     (lazy-seq\n                      (when-let [s (seq coll)]\n                        (reddy f (f init (first s)) (rest s)))))))]\n   (fn ([g c] (reddy g c))\n     ([g i c] (reddy g i c))))","problem":60,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":60,"code":"(fn my-reductions\n  ([f colls]\n   (lazy-seq\n    (if-let [s (seq colls)]\n       (my-reductions f (first colls) (rest colls))\n          (list (f)))))\n  ([f init colls]\n     (lazy-seq \n        (cons init\n           (when-let [s (seq colls)]\n              (my-reductions f (f init (first s)) (rest s)))))))","user":"5657fed1e4b0f9d632dd84ae"},{"code":"(fn this\n  ([f coll]\n    (when-first [fst coll]\n      (this f fst (rest coll))))\n  ([f init coll]\n    (cons init\n      ((fn x [prev coll]\n        (lazy-seq\n          (when-first [y coll]\n            (let [v (f prev y)]\n              (cons v (x v (rest coll)))))))\n        init coll))))","problem":60,"user":"4e68c434535d8ccf87e9fe89"},{"problem":60,"code":"(fn rec\n  ([f coll]\n   (rec f (first coll) (rest coll)))\n  ([f init coll]\n     (lazy-seq \n      (if (empty? coll)\n        (list init)\n        (cons init (rec f (f init (first coll))\n                        (rest coll)))))))","user":"55db7e15e4b0e31453f64ae8"},{"problem":60,"code":"(fn rd\n  ([f c]\n   (rd f (f (first c)) (rest c)))\n  ([f a c]\n   (cons a (lazy-seq\n            (if (seq c)\n              (rd f (f a (first c)) (rest c)))))))","user":"508c3d42e4b0f17d83ea26b2"},{"code":"(fn rds\n  ([f coll]\n   (rds f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n      (lazy-seq\n        (when-let [s (seq coll)]\n          (rds f (f init (first s)) (rest s)))))))","problem":60,"user":"4f1bee08535d64f60314647e"},{"problem":60,"code":"(fn [f & a] \n  (let [x #(first %) \n        y #(fnext %) \n        z (nil? (y a)) \n        s (if z (x a) (cons (x a) (y a)))\n        r (if z (range) (take (+ 1 (count (y a))) (range)))] \n    (map (fn [c] (reduce #(f % %2) (x s) (take c (rest s)))) r)))","user":"56c08696e4b060a8e693e3aa"},{"code":"(fn\n    ([f coll] (map #(reduce f (take (inc %) coll)) (range)))\n    ([f i coll] (take (inc (count coll)) (map #(reduce f i (take % coll)) (range))))\n  )","problem":60,"user":"504e1abee4b0f6ff3350c45d"},{"problem":60,"code":"(fn seq-reductions\n     ([f coll]\n       (seq-reductions f (first coll) (next coll)))\n     ([f init coll]\n        (cons init\n          (lazy-seq\n            (if (seq coll)\n              (seq-reductions f (f init (first coll)) (rest coll)))))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"code":"(fn red\n\n  ([f coll]\n\n     (lazy-seq\n\n      (if-let [s (seq coll)]\n\n        (red f (first s) (rest s))\n\n        (list (f)))))\n\n  ([f init coll]\n\n     (cons init\n\n           (lazy-seq\n\n            (when-let [s (seq coll)]\n\n              (red f (f init (first s)) (rest s)))))))","problem":60,"user":"5180dc04e4b06b8caf33fa01"},{"problem":60,"code":"(fn [& args]\n  (let [scanl (fn _scanl [f z [x & xs]]\n                  (if xs\n                      (lazy-cat (cons z\n                                (_scanl f (f z x) xs)))\n                      (lazy-cat (cons z [(f z x)]))\n                      ))\n  \n        scanl1 (fn _scanl1 [f [x & xs]]\n                  (scanl f x xs))\n        ]\n        (if (= 2 (count args))\n            (apply scanl1 args)\n            (apply scanl args)\n            )))","user":"55c49394e4b0e31453f6499e"},{"code":"(fn r\n  ([f c] (r f (first c) (rest c)))\n  ([f a [x & s]]\n   (lazy-seq\n    (cons a\n          (if x\n            (r f (f a x) s)\n            [])))))","problem":60,"user":"52c73194e4b0c2d177d6211e"},{"problem":60,"code":"(fn reduc\n  ([f coll] (reduc f (first coll) (rest coll)))\n  ([f acc coll]\n   (cons acc\n         (lazy-seq\n          (when-let [x (seq coll)]\n            (reduc f (f acc (first x)) (rest x)))))))","user":"5724a4dae4b0c5bde472c0fe"},{"problem":60,"code":"(fn myred \n  (\n   [f start xs] \n   (if (empty? xs)\n       (list start)\n       (lazy-seq (cons start (myred f (f start (first xs)) (rest xs)))))) \n  (\n   [f xs] \n   (myred f (first xs) (rest xs))\n   )\n  )","user":"57c6aa0be4b05aa3c4741cf7"},{"code":"(fn red ([f [h & t]] (red f h t))\n  ([f v [h & t]] (cons v (if (not (nil? h)) (lazy-seq (red f (f v h) t))))))","problem":60,"user":"50336c6be4b0c6c1199c710f"},{"problem":60,"code":"(fn red\n           ([op value coll]\n              (lazy-seq\n                (let [[a & remaining] coll]\n                  (print value)\n                  (if (nil? a)\n                    [value]\n                    (cons\n                      value\n                      (red op (op value a) remaining))))))\n           ([op coll]\n            (red op (first coll) (rest coll))))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"problem":60,"code":"(fn my-reds\n  ([f xs]\n   (lazy-seq\n     (my-reds f (first xs) (rest xs))))\n  ([f i xs]\n   (cons i\n     (lazy-seq\n       (when (seq xs)\n         (my-reds f (f i (first xs)) (rest xs)))))))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn lazyreduce\n  ([f coll] (lazyreduce f (first coll) (rest coll)))\n  ([f val coll] (lazy-seq \n  \t               (cons val \n                     (when-let [s (seq coll)]\n                       (lazyreduce f (f val (first s)) (rest s)))))))","problem":60,"user":"50d3ec8be4b030b634c368bb"},{"code":"(fn reductions2\n  ([f [x & xs]]\n    (reductions2 f x xs))\n  ([f start [x & xs]]\n    (cons start (lazy-seq\n      (if x\n        (let [y (f start x)]\n          (reductions2 f y xs))\n        )\n    )))\n)","problem":60,"user":"50e3ec87e4b0463d32072486"},{"code":"(fn r\n  ([f v]\n   (r f (first v) (rest v)))\n  ([f e v]\n   (if (empty? v) [e]\n       (cons e\n             (lazy-seq\n              (r f (f e (first v)) (rest v)))))))","problem":60,"user":"52f818a6e4b047fd55836fcc"},{"problem":60,"code":"(fn bla\n  ([ some-fn [ first & rest ] ] (bla some-fn first rest))\n  ([ some-fn left [ right & restRight ] ]\n    (if (nil? right)\n      [ left ]\n      (lazy-seq (cons left (bla some-fn (some-fn left right) restRight))))))","user":"59f90e6ae4b0ca45a743a337"},{"code":"(fn rdctns\n      ([f coll]\n        (rdctns f (first coll) (rest coll)))\n      ([f init coll]\n        (cons init (lazy-seq\n                     (when-let [s (seq coll)]\n                       (rdctns f (f init (first s)) (rest coll)))))))","problem":60,"user":"4e6a11ee535d8ccf87e9fe9f"},{"code":"(fn rd \r\n  ([f ls]\r\n    (rd f (f (first ls)) (rest ls)))\r\n  ([f interm ls]\r\n  (if (empty? ls) (cons interm nil)  \r\n  (let [cur (f interm (first ls))]\r\n  (cons\r\n    interm\r\n    (lazy-seq \r\n      (rd f cur (rest ls))))))))","problem":60,"user":"502a9fdee4b095a7adb898b4"},{"code":"(fn red\n  ([f seq] (red f (first seq) (rest seq)))\n  ([f ini seq] \n    (if (empty? seq)\n        [ini]\n        (lazy-seq\n          (cons ini\n            (red f (f ini (first seq)) (rest seq)))))))","problem":60,"user":"4f62b29ce4b0defedf855fd9"},{"code":"(fn g \n    ([f c]\n \t  (g f (f (first c)) (rest c)))\n    ([f i c]\n      (let [h (fn h [f i c]\n                 (if (not (empty? c))\n                   (let [r (f i (first c))]\n                     (lazy-seq (cons r (h f r (rest c)))))))]\n        (cons i (h f i c)))))","problem":60,"user":"512f06c5e4b0762be4c7aad7"},{"code":"(fn reduce-\n  ([f coll]\n    (reduce- f (first coll) (next coll)))\n  ([f init [h & t :as coll]]\n    (cons init\n      (lazy-seq\n        (if (seq coll)\n          (reduce- f (f init h) t))))))","problem":60,"user":"5032b066e4b00c0952a257ea"},{"code":"(fn rdxns\n  ([f [x & xs]] (rdxns f x xs))\n  ([f init coll]\n    (cons init\n          (lazy-seq\n           (when-let [xs (seq coll)]\n             (rdxns f (f init (first xs)) (rest xs)))))))","problem":60,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"(fn red\n  ([f coll]\n    (red f 0 coll []))\n  ([f seed coll]\n    (red f seed coll [seed]))\n  ([f seed coll acc]\n    (let [\n      newvalue (f seed (first coll))\n      accvalue (cons newvalue acc)\n      newcollection (drop 1 coll)\n      ]\n      (if (or(empty? newcollection)\n             (= 5 (count accvalue));ugly hack we meet again\n             )\n        (reverse accvalue)\n        (recur f newvalue newcollection accvalue)\n        )\n    )\n  )\n)","problem":60,"user":"5307e4ece4b02e82168697a9"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     (vector init)\n     (lazy-seq\n       (cons\n         init\n         (my-reductions f (f init (first coll)) (rest coll)))))))","user":"5b51b9f8e4b02d533a91bcfe"},{"code":"(fn my-reductions\n  ([f [x & xs]]\n   (my-reductions f x xs))\n\n  ([f v [x & xs]]\n   (if (nil? x) [v]\n     (let [x1 (f v x)]\n       (cons v (lazy-seq (my-reductions f x1 xs)))))))","problem":60,"user":"50cb4cf6e4b0f78a8e1645b4"},{"problem":60,"code":"(fn my-red\n  ([f coll]\n   (my-red f (first coll) (next coll)))\n  ([f start coll]\n   (cons start\n         (if (seq coll)\n           (lazy-seq (my-red f (f start (first coll)) (next coll)))))))","user":"5264383be4b03e8d9a4a70cb"},{"problem":60,"code":"(fn my-reductions\n   ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (my-reductions f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (my-reductions f (f init (first s)) (rest s)))))))","user":"54eb22a0e4b024c67c0cf845"},{"code":"(fn [f y & z]\n  (let [start (if (empty? z) (first y) y) res (if (empty? z) (rest y) (first z))]\n    (cons start ((fn* reducer [a b]\n         (if (empty? b)\n           ()\n           (let [fa (f a (first b))]\n             (cons fa (lazy-seq (reducer fa (rest b))))))) start res))))","problem":60,"user":"53468f6ce4b084c2834f4a3f"},{"problem":60,"code":"(fn myreductions\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (myreductions f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (myreductions f (f init (first s)) (rest s)))))))","user":"5412646de4b01498b1a719d4"},{"problem":60,"code":"(fn reductifications\n  ([f init coll]\n   (letfn [(helper\n             [f init coll candidates]\n             (if (empty? coll)\n               (cons (reduce f init candidates) nil)\n               (lazy-seq (cons (reduce f init candidates)\n                               (helper f init (rest coll) (conj candidates (first coll)))))))]\n     (helper f init coll [])))\n  ([f coll]\n      (letfn [(helper\n             [f coll candidates]\n             (if (empty? coll)\n               (cons (reduce f candidates) nil)\n               (lazy-seq (cons (reduce f candidates)\n                               (helper f (rest coll) (conj candidates (first coll)))))))]\n     (helper f (rest coll) [(first coll)]))))","user":"57a0f256e4b0c3d858beb8dd"},{"problem":60,"code":"(fn reducto\n  ([f xs]\n   (reducto f (first xs) (rest xs)))\n  ([f init xs]\n   (if (seq xs)\n     (cons init (lazy-seq (reducto f (f init (first xs)) (rest xs))))\n     [init])))","user":"4ee75ec2535d93acb0a66867"},{"problem":60,"code":"(fn my-reduce\n  ([f coll] (my-reduce f (first coll) (rest coll)))\n  ([f acc coll]\n    (lazy-seq\n      (if (empty? coll)\n        (list acc)\n        (cons acc\n              (my-reduce f\n                         (f acc (first coll))\n                         (rest coll)))))))","user":"55e6c3f5e4b050e68259b48c"},{"code":"(fn myreduction \n  ([f l] \n   (myreduction f (first l) (rest l) ))\n  ([f i l] \n   (if (empty? l)\n     (list i)\n     (let [fi (first l) \n           fres (f i (first l))]\n     (cons i \n           (lazy-seq (myreduction f fres (rest l))))))))","problem":60,"user":"5348236ee4b084c2834f4a54"},{"problem":60,"code":"(fn my-reductions\n  ([-fn -seq]\n   (my-reductions -fn (first -seq) (rest -seq)))\n   ([-fn acc -seq]\n    (if-not (empty? -seq)\n      (lazy-seq (cons acc (my-reductions -fn (-fn acc (first -seq)) (rest -seq))))\n      [acc])))","user":"5ddb6151e4b0948ae9d9adb0"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     [init]\n     (cons init (lazy-seq (my-reductions f\n                                         (f init (first coll))\n                                         (rest coll)))))\n   )\n  )","user":"5f29837ee4b033932238a64f"},{"problem":60,"code":"(fn x-reductions\n  ([f coll]\n   (x-reductions f (first coll) (rest coll)))\n  ([f val coll]\n   (if (empty? coll)\n     (list val)\n     (lazy-seq (cons val (x-reductions f (f val (first coll)) (rest coll)))))))","user":"5a250b86e4b07f18be40aa19"},{"code":"(let [\n  reds\n  (fn reds [f acc coll]\n    (lazy-seq\n    (if (seq coll)       \n       (cons\n         acc\n         (reds f (f acc (first coll)) (next coll))          \n       )       \n       (cons acc nil)\n    ))\n  )  \n  ]\n  (fn \n    ([f i coll] (reds f i coll))\n    ([f coll] (reds f (first coll) (next coll)))\n  )\n)","problem":60,"user":"4f03154a535dcb61093f6a58"},{"problem":60,"code":"(fn !\n     ([f x] (! f (first x) (rest x)))\n     ([f i x] (if (empty? x) [i] (cons i (lazy-seq (! f (f i (first x)) (rest x)))))))","user":"542f574be4b0dad94371f2d0"},{"code":"(fn r \n  ([f x t] \n   (lazy-seq\n    (cons x\n     (when-let [[y & s] (seq t)]\n      (r f (f x y) s)))\n    )\n  )\n  ([f [x & s]] (r f x s))\n)","problem":60,"user":"514457fbe4b0b4fb4ace5f43"},{"problem":60,"code":"(fn myreduce \n  ([f ls]\n   (lazy-seq (cons (first ls) (myreduce f (cons (f (first ls) (second ls)) (drop 2 ls))))))\n  ([f i ls]\n   (if (= ls [])\n       (vector i)\n       (lazy-seq (cons i (myreduce f (f i (first ls)) (rest ls)))))))","user":"564d3169e4b0284900eef67c"},{"code":"(fn reduc\n  ([f [a & tail]] (reduc f a tail))\n  ([f a [b & tail :as xs]]\n    (if (empty? xs)\n      (list a)\n      (cons a (lazy-seq (reduc f (f a b) tail))))\n   ))","problem":60,"user":"5312cdaae4b08068f379ed03"},{"code":"(fn myreductions\n  ([f init coll]\n     (letfn [(reductions2 [f init coll]\n               (lazy-seq\n                 (when-let [s (seq coll)]\n                   (let [h (f init (first coll))]\n                     (cons h (reductions2 f h (rest coll)))))))]\n       (cons init (reductions2 f init coll))))\n  ([f coll]\n     cons (first coll) (myreductions f (first coll) (rest  coll))))","problem":60,"user":"4f03f197535dcb61093f6b84"},{"problem":60,"code":"(fn generator \n          ([op v] (generator op (op (first v)) (rest v)))\n         ([op first-v remainder] (lazy-seq (cons first-v (if (not (empty? remainder)) (generator op (op first-v (first remainder)) (rest remainder)))))))","user":"58a9e872e4b01a0c0b232973"},{"code":"(fn foo\n    ([fun acc items]\n      (if (empty? items)\n        [acc]\n        (cons acc (lazy-seq (foo fun (fun acc (first items)) (rest items))))))\n    ([fun items]\n      (when (not (empty? items))\n        (foo fun (first items) (rest items))))\n    )","problem":60,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn reds  \n  ([f coll]\n   (reds f (first coll) (rest coll)))  \n  ([f init coll]\n  \t (cons init\n           (if (seq coll) \n             (lazy-seq (reds f (f init (first coll)) (next coll)))\n             nil))))","problem":60,"user":"511442d0e4b0e9c109bb74d5"},{"problem":60,"code":"(fn [f & args]\n   (let [args\n         (if (> (count args)1) args\n                               [ 0 (drop 1(take 100 (first args)))])]\n     (loop [\n            intarg (first args)\n            acc []\n            nextargs (first (rest args))\n            ]\n       (if (empty? nextargs) (conj acc intarg)\n                             (recur\n                               (f intarg (first nextargs))\n                               (conj acc intarg)\n                               (drop 1 nextargs))))))","user":"56ede653e4b04a395b9a0449"},{"problem":60,"code":"(fn red ([f v coll] \n         (if (empty? coll)\n           (list v)\n           (let [r (f v (first coll))]\n           (cons v (lazy-seq (red f r (rest coll)))))\n           )\n         )\n        ([f coll]\n           (red f (first coll) (rest coll))\n         )\n  )","user":"5245e320e4b09dbe66b56177"},{"problem":60,"code":"(fn my-red\n  ([op a-seq]\n    (my-red op (first a-seq) (rest a-seq)))\n  ([op start a-seq]\n    (if (empty? a-seq)\n      [start]\n      (let [new-e (op start (first a-seq))\n            acc [start]]\n        (cons start (lazy-seq (my-red op new-e (rest a-seq))))))))","user":"52ee46e5e4b05e3f0be25ec5"},{"problem":60,"code":"(fn newred\n  ([f v1]\n   (newred f (first v1) (rest v1)))\n  ([f v1 v2]\n   (lazy-seq\n    (if (empty? v2) (list v1)\n      (cons v1 (newred f (f v1 (first v2)) (rest v2)))))))","user":"5486adf7e4b0e286459a11be"},{"problem":60,"code":"(fn reds\n  ([f coll]\n   (reds f (first coll) (rest coll)))\n  ([f init [h & t :as coll]]\n   (cons init\n         (when (seq coll)\n           (lazy-seq (reds f (f init h) t))))))","user":"59eb63e3e4b0249b7282077c"},{"problem":60,"code":"(fn my-reduce\n  ([f coll]\n   (cond\n     (empty? coll) (list (f))\n\n     (empty? (rest coll)) (list (first coll))\n\n     :else\n     (my-reduce f (first coll) (rest coll))))\n  ([f v coll]\n   (if-not (seq coll)\n     (list v)\n     (let [v1 (f v (first coll))]\n       (cons v (lazy-seq (my-reduce f v1 (rest coll))))))))","user":"57f80350e4b0d3187e90090c"},{"problem":60,"code":"(fn r\n  ([f ls] (r f (first ls) (rest ls)))\n  ([f i ls]\n   (lazy-seq\n    (if (empty? ls)\n      (vector i)\n      (cons i (r f (f i (first ls)) (rest ls)))))))","user":"566d71b1e4b0a866af6896ca"},{"code":"(fn rec \n   ([f res coll] \n    (if (nil? coll) \n      [res] \n      (cons res (lazy-seq (rec f (f res (first coll)) (next coll) ))))) \n   ([f coll] \n    (rec f (f (first coll)) (next coll)) ))","problem":60,"user":"50de11b2e4b061dbdced7217"},{"problem":60,"code":"(fn lazy_reductions\n  ([f coll] (lazy_reductions f (first coll) (rest coll)))\n  ([f i coll]\n   (if (empty? coll)\n     [i]\n     (lazy-seq (cons i (lazy_reductions f (f i (first coll)) (rest coll)))))))","user":"5da760ebe4b000c986472c1a"},{"code":"(fn reduct\n  ([f coll]\n    (lazy-seq\n      (if-let [s (seq coll)]\n        (reduct f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n    (cons init\n          (lazy-seq\n            (when-let [s (seq coll)]\n              (reduct f (f init (first s)) (rest s)))))))","problem":60,"user":"53121863e4b08068f379ecf3"},{"problem":60,"code":"(fn no60\n    ([f a [x & xs]] (cons a (lazy-seq (when x (no60 f (f a x) xs)))))\n    ([f [x & xs]] (no60 f x xs)))","user":"55630cc1e4b0c656e3ff17e0"},{"code":"(fn red\n  ([f c] (red f (first c) (next c)))\n  ([f s c]\n    (if\n      (nil? c)\n      (cons s nil)\n      (cons\n        s        \n        (lazy-seq\n          (red f (f s (first c)) (next c)))))))","problem":60,"user":"4fb2101ce4b081705acca284"},{"problem":60,"code":"(fn red\n           ([f xs] (red f (first xs) (rest xs)))\n\n           ([f acc xs] (if (empty? xs)\n                         [acc]\n                         (cons acc (lazy-seq (red f (f acc (first xs)) (rest xs)))))))","user":"5614fa1de4b05f002753dfbe"},{"code":"(fn !\n  ([f [x & xs]] (! f x xs))\n  ([f e [x & xs]]\n    (let [n (f e x)]\n      (if (not-empty xs)\n        (cons e (lazy-seq (! f n xs)))\n        [e n]))))","problem":60,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":60,"code":"(fn\n  ([f arg]\n    (map first\n      (iterate\n     \t(fn [[acc i]]\n     \t  [(f acc (inc i)) (inc i)])\n        [0, 0])))\n  ([f arg1 arg2]\n    (map first\n      (take (inc (count arg2)) (iterate\n     \t(fn [[acc i]]\n     \t  [(f acc (nth arg2 i)) (inc i)])\n        [arg1, 0])))))","user":"55deed82e4b050e68259b3e9"},{"problem":60,"code":"(fn r \n  ([f args] \n   (if-let [s (seq args)]\n     (r f (first args) (next args))\n     (lazy-seq (f))))\n  ([f v args]\n   (cons v \n         (lazy-seq\n          (when-let [s (seq args)]\n            (r f (f v (first args)) (rest args)))))))","user":"542c22bde4b0dad94371f29e"},{"code":"(fn red\n  ([f x0 x] (map first \n                 (take-while #(not (nil? (second %)))\n                 \t(iterate \n                        (fn [[acc, remain]] [(if (empty? remain) nil (f acc (first remain))), (if (empty? remain) nil (rest remain))])\n                        [x0 x]))))\n  ([f x] (red f (first x) (rest x))))","problem":60,"user":"515f8a0de4b0e2be8aa20bce"},{"code":"(fn seq-reduce\n  ([fun coll]\n     (lazy-seq (seq-reduce fun (first coll) (rest coll))))\n  ([fun val coll]\n     (if (seq coll)\n       (let [newval (fun val (first coll))]\n         (cons val (lazy-seq (seq-reduce fun\n                                         newval\n                                         (rest coll)))))\n       (cons val (lazy-seq ())))))","problem":60,"user":"4dada6d4c9a9d6ed2c99dc57"},{"problem":60,"code":"(let [red (fn red \n    ([f coll] \n      (let [base (f (first coll) (first (rest coll)))]\n        (lazy-seq (cons base (red f base (drop 2 coll))))))\n    ([f x coll]\n      (when-not (empty? coll)\n        (let [fx (f x (first coll))]\n          (lazy-seq (cons fx (red f fx (rest coll))))))))]\n  (fn\n    ([f coll]\n      (lazy-seq (cons (first coll) (red f coll))))\n    ([f x coll]\n      (lazy-seq (cons x (red f x coll))))))","user":"545e9cf1e4b01be26fd7467f"},{"problem":60,"code":"(fn my-reductions\n  ([f val coll] (my-reductions f (cons val coll)))\n  ([f coll]\n   (when-let [s (seq coll)]\n     (let [result-item (first s)]\n       (lazy-seq\n         (cons (first s)\n               (when-let [next-item (second s)]\n                 (my-reductions f (cons (f result-item next-item)\n                                        (next (next s)))))))))))","user":"5711b532e4b09c608db70449"},{"code":"(fn red\n  ([f h t]\n    \n      (cons h (when (seq t)\n                (lazy-seq\n                 (red f (f h (first t)) (rest t)))))\n    )\n    \n  ([f coll]\n    (red f (first coll) (rest coll))))","problem":60,"user":"52a1acb2e4b04e0c58e87bdb"},{"problem":60,"code":"(fn reductv\n  ([f col] (reductv f (first col) (rest col)))\n  ([f initv col]\n   (letfn [(rfun [agg crest]\n           (let [aggn (f agg (first crest))]\n             (lazy-seq (cons aggn\n                          (if (empty? (rest crest))\n                            nil\n                            (rfun aggn (rest crest)))))))]\n     (lazy-seq (cons initv (rfun initv col))))))","user":"5e9c11f8e4b0157ca96647f6"},{"problem":60,"code":"(fn stepped-reduce\n  ([f coll]\n    (stepped-reduce f (first coll) (drop 1 coll)))\n  ([f start coll]\n   (if (empty? coll)\n     [start]\n     (lazy-seq\n       (concat\n         [start]\n         (stepped-reduce f (f start (first coll)) (rest coll)))))))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn red\r\n    ([f coll]\r\n     (lazy-seq\r\n      (if-let [s (seq coll)]\r\n        (red f (first s) (rest s))\r\n        (list (f)))))\r\n  ([f init coll]\r\n     (cons init\r\n           (lazy-seq\r\n            (when-let [s (seq coll)]\r\n              (red f (f init (first s)) (rest s)))))))","problem":60,"user":"4dfe65a1535d04ed9115e787"},{"code":"(fn m-r\r\n    ([f coll]\r\n     (let [fst (first coll)]\r\n       (m-r f (f fst fst) (rest coll))))\r\n    ([f acc coll]\r\n     (lazy-seq\r\n       (if (empty? coll)\r\n        (cons acc [])\r\n        (cons acc (m-r f (f acc (first coll)) (rest coll)))))))","problem":60,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn f\n  ([g [x & r]] (f g x r))\n  ([g a [x & r :as l]]\n   (lazy-seq (cons a (if (seq l) (f g (g a x) r))))))","problem":60,"user":"522b922ee4b0d34ee08e71c3"},{"code":"(fn my-reductions\n  ([f s] (my-reductions f (first s) (rest s)))\n  ([f init s]\n     (if (empty? s)\n       (list init)\n       (cons init (lazy-seq (my-reductions f (f init (first s)) (rest s)))))))","problem":60,"user":"5310e7aee4b08068f379ecdc"},{"problem":60,"code":"(fn [f val-or-coll & [coll]]\n  (let [val (if (nil? coll) (first val-or-coll) val-or-coll)\n        xs (if (nil? coll) (rest val-or-coll) coll)]\n    ((fn impl [acc lst]\n       (if (empty? lst) [acc]\n           (cons acc (lazy-seq (impl (f acc (first lst)) (rest lst)))))) val xs)))","user":"55c20bd0e4b0e31453f64972"},{"problem":60,"code":"(fn my-reductions\n     ([f coll]\n      (my-reductions f (first coll) (rest coll)))\n     ([f res coll]\n      (cons\n        res\n        (lazy-seq (if (empty? coll)\n           '()\n           (my-reductions f (f res (first coll)) (rest coll)))))))","user":"594ea2a4e4b07ddc2dafaeb6"},{"problem":60,"code":"(fn reductions'\n  ([f val coll]\n    (if (empty? coll)\n      (list val)\n      (cons val\n        (lazy-seq \n          (reductions' f (f val (first coll)) (rest coll))))))\n  ([f coll]\n    (if (empty? coll)\n      (list (f))\n      (reductions' f (first coll) (rest coll)))))","user":"540b2dcbe4b0addc1aec66f4"},{"problem":60,"code":";;(list (\n (fn my-reduction \n   ([f n] (my-reduction f (first n) (rest n)))\n   ([f res n] (if (empty? n)\n                [res]\n                (lazy-seq \n                 (cons res\n                       (my-reduction f\n                                     (f res (first n))\n                                     (rest n)))))))\n;;* 2 [3 4 5]))","user":"58566b42e4b0f14aab7c86f4"},{"code":"(fn my-reductions \n  ([f coll] \n    (lazy-seq\n      (if-let [s (seq coll)]\n        (my-reductions f (first s) (rest s))\n        (f))))\n  ([f init coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (cons init (my-reductions f (f init (first s)) (rest s)))\n       (list init)))))","problem":60,"user":"4ed188c8535d44c135fd68cf"},{"code":"(fn red ([f coll] \n\t     (red f (first coll)(next coll)))\n        ([f start coll] \n\t\t    (if (seq coll)\n\t\t\t\t(cons start (lazy-cat (red f (f start (first coll)) (next coll)))) \n\t\t\t\t[start] )))","problem":60,"user":"523a9fc9e4b081681ca7adca"},{"problem":60,"code":"(fn myReductions \n  ([f x xs]\n   (if (empty? xs) \n        (lazy-seq [x])\n        (lazy-seq \n         (cons x (myReductions f (f x (first xs) ) (rest xs)) ) ) ))\n  ([f xs]\n   (myReductions f (first xs) (rest xs))))","user":"567798afe4b05957ce8c6169"},{"problem":60,"code":"; Needed to see Huahai's answer before I could even code a solution.  \n; His solution is the simplest and easiest to understand IMO.\n(fn my-reduction\n    ([f first-arg [x & xs]]\n      (cons first-arg (lazy-seq\n                   (when x\n                     (my-reduction f (f first-arg x) xs)))))\n    ([f coll]\n      (my-reduction f (first coll) (rest coll))))","user":"5535e822e4b09218d5f44fb2"},{"code":"(fn [f2 & args2]\n    (letfn [(reduc [f args val] (if (not (first args)) [] (lazy-seq (cons (f val (first args)) (reduc f (rest args) (f val (first args)))))))]\n      (if (= 1 (count args2)) (reduc f2 (first args2) 0) (cons (first args2) (reduc f2 (second args2) (first args2))))\n      )\n    )","problem":60,"user":"52c1bd29e4b07a9af579236a"},{"problem":60,"code":"(fn seqred\n  ([op xs] (seqred op (first xs) (rest xs)))\n  ([op acc xs ]\n   (lazy-seq\n     (if (empty? xs)\n       (cons acc '())\n       (cons acc (seqred op (op acc (first xs) ) (rest xs) ))\n       )\n     )\n    )\n  )","user":"5a61bf79e4b0512ff01cd97b"},{"problem":60,"code":"(fn r\n  ([f coll]\n   (r f (first coll) (rest coll)))\n  ([f s coll]\n   (if (empty? coll)\n     [s]\n     (lazy-seq (cons s (r f (f s (first coll)) (rest coll)))))\n   ))","user":"565b2fa5e4b068f2fe63dbfe"},{"code":"(fn z\n    ([f [p & q] ] (z f p q ) )\n    ([f i s]\n        (letfn [(r [a [x & y]]\n                  (lazy-seq\n                    (if x\n                        (let [m (f a x)]\n                             (cons a (r m y) ))\n                        (cons a nil)) ) )]\n                     (r i s) )))","problem":60,"user":"4ee7d177535d93acb0a6686f"},{"code":"(fn r\n    ([f i s] (r f (list* i s)))\n    ([f   s] (map #(reduce f %)\n                  ((fn b [x [h & t]]\n                     (lazy-seq\n                      (cons (conj x h)\n                            (when (seq t) (b (conj x h) t))) ))\n                   [] s)))\n    )","problem":60,"user":"4ff67852e4b0678c553fc37e"},{"problem":60,"code":"(fn my-reductions\n    ([f coll] (my-reductions f (first coll) (rest coll)))\n    ([f val coll]\n     (cons val\n           ((fn step [x s]\n              (if (empty? s)\n                (vector)\n                (let [v (f x (first s))]\n                  (cons v (lazy-seq (step v (rest s)))))))\n            val coll))))","user":"55b54ecbe4b01b9910ae2987"},{"code":"(fn fx \n  ([f a s]\n  (if (seq s)\n    (cons a (lazy-seq (fx f (f a (first s)) (rest s))))\n    [a]))\n  ([f s]\n   (fx f (first s) (rest s))))","problem":60,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn x\n  ([f [a & b]] (x f a b))\n  ([f i [a & b :as c]]\n  (if (empty? c)\n    [i]\n    (cons i \n          (lazy-seq\n           (x f (f i a) b))))))","problem":60,"user":"5098f5d6e4b0cae2931060a4"},{"code":"(fn b\n  ([f n]\n     (b f (first n) (rest n)))\n  ([f x n]\n     (if (seq n)\n       (let [nn (rest n)\n             next-x (f x (first n))]\n         (cons x (lazy-seq (b f next-x nn))))\n       (cons x (lazy-seq '())))))","problem":60,"user":"4fe97adde4b0547ebccb245e"},{"problem":60,"code":"(fn ffn \n  ([ff coll] (ffn ff (ff (first coll)) (rest coll)))\n  ([ff init coll]\n   (if (seq coll)\n     (lazy-seq (cons init (ffn ff (ff init (first coll)) (rest coll))))\n     (list init))))","user":"56102f50e4b05f002753df6b"},{"problem":60,"code":"(fn reduction*\n      ([f [p1 & ps]] (reduction* f p1 ps))\n      ([f p1 [p2 & ps]]\n       (cons p1\n             (when p2\n               (lazy-seq (reduction* f (f p1 p2) ps))))))","user":"57dd47f4e4b0bd073c20243e"},{"code":"(fn redu\n  ([f s] (redu f (first s) (rest s)))\n  ([f init s]\n    (lazy-seq\n     (if s\n      (let [r (f init (first s))]\n        (cons init (redu f r (next s)) )\n      )\n      (cons init '())\n    ))\n  )  \n)","problem":60,"user":"51ba8f82e4b0fe3ecfb46434"},{"problem":60,"code":"(fn f ([g c] (f g (first c) (rest c))) ([g i c] (lazy-seq (if (empty? c) (list i) (cons i (f g (g i (first c)) (rest c)))))))","user":"5c41db45e4b08cd430848ece"},{"problem":60,"code":"(fn fetch\n\t([f xs]\n\t\t(if-let [[x & xs] (seq xs)]\n\t\t\t(fetch f x xs)\n\t\t\t(list)))\n\n\t([f n xs]\n\t\t(if-let [[x & xs] (seq xs)]\n\t\t(lazy-seq (cons n (fetch f (f n x) xs)))\n\t\t(list n))))","user":"505fdf63e4b08f2a82ad10b9"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f v coll]\n    (lazy-seq\n      (if (empty? coll)\n        [v]\n        (cons v\n              (red f (f v (first coll)) (rest coll)))))))","user":"544b699ce4b0e39780006964"},{"problem":60,"code":"(fn super-reduce\n  ([f x] (super-reduce f (first x) (rest x)))\n  ([f z [h & t]]\n    (if (nil? h)\n      [z]\n      (lazy-seq (cons z (super-reduce f (f z h) t))))))","user":"5b15811ee4b0cc2b61a3be6f"},{"code":"(fn reds\r\n  ([f xs] (reds f (first xs) (rest xs)))\r\n  ([f acc xs]\r\n     (if (empty? xs)\r\n       `(~acc)\r\n       (let [res (f acc (first xs))]\r\n         (lazy-seq\r\n          (cons\r\n           acc\r\n           (reds f res (rest xs))))))))","problem":60,"user":"50427899e4b0add3005c0fc2"},{"problem":60,"code":"(fn myreductions \n  ([f coll] (myreductions f (first coll) (rest coll)))\n  ([f init coll]\n   (letfn [(run [f lv [x & xs]] \n                (if x\n                  (let [nv (f lv x)] \n                    (cons nv (lazy-seq (run f nv xs))))))]\n     (cons init (run f init coll)))))","user":"53f35c34e4b0742d9025b0f4"},{"problem":60,"code":"(fn a\n  ([f x]\n   (a f (first x) (rest x)))\n  ([f y x]\n   (if (not (empty? x))\n     (lazy-seq (cons y (a f (f y (first x)) (rest x))))\n     [y])))","user":"59e8bb43e4b0249b72820735"},{"code":"(fn red\r\n  ([f xs] (red f (first xs) (rest xs)))\r\n  ([f ii xs]\r\n     (if (empty? xs)\r\n       (list ii)\r\n       (cons ii (lazy-seq (red f (f ii (first xs)) (rest xs)))))))","problem":60,"user":"4ddc1c89535d02782fcbea01"},{"problem":60,"code":"(fn f60\n  ([f c] (f60 f (first c) (rest c)))\n  ([f i c]\n   (lazy-seq\n     (cons i\n           (when-let [s (seq c)]\n             (f60 f (f i (first s)) (rest s)))))))","user":"586bc870e4b01531a375e964"},{"code":"(fn m\n  ([f [x & xs]] (m f x xs))\n  ([f v xs] (cons v (if (empty? xs) xs\n                      (lazy-seq (m f\n                                   (f v (first xs))\n                                   (rest xs)))))))","problem":60,"user":"518696c1e4b0c40be512d708"},{"code":"(fn my-reduce\n  ([f xs] (my-reduce f (first xs) (rest xs)))\n  ([f x xs]\n   (if (empty? xs)\n     [x]\n     (cons x (lazy-seq (my-reduce f (f x (first xs)) (rest xs)))))))","problem":60,"user":"53244c9de4b09d4e7a9b54db"},{"problem":60,"code":"(fn reduction\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reduction f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n       (list init)\n       (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (reduction f (f init (first s)) (rest s)))))))","user":"5047782ce4b0371827a27bc2"},{"problem":60,"code":"(fn reduktions\n  ([f init coll]\n    (if (empty? coll) \n      (list init)\n      (let [k (f init (first coll))] \n         (cons init (lazy-seq (reduktions f k (next coll)))))))\n  ([f coll]\n    (reduktions f (first coll) (next coll))))","user":"54924f64e4b0b312c081ff42"},{"code":"(fn reductio\n  ([f coll]\n    (reductio f (first coll) (rest coll)))\n  ([f start coll]\n    (if\n      (empty? coll)\n      (list start)\n      (cons\n        start\n        (lazy-seq\n          (reductio\n            f\n            (f start (first coll))\n            (rest coll)))))))","problem":60,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn red\n  ([f init [acc & coll]] (cons init (lazy-seq (when acc (red f (f init acc) coll)))))\n  ([f coll] (red f (first coll) (rest coll)))\n)","problem":60,"user":"50e8a340e4b0ebbe794eb7ed"},{"problem":60,"code":"(fn red\n  ([func args] (red func (first args) (rest args)))\n  ([func initial args]\n   ((fn do-reduce [acc remaining]\n      (cons acc\n        (lazy-seq\n         (when (not-empty remaining)\n           (do-reduce (func acc (first remaining)) (rest remaining))))))\n    initial args\n  \t)))","user":"561f9110e4b064ca9f4b16ce"},{"problem":60,"code":"(fn redu\n   ([f coll]\n    (lazy-seq\n     (if-let [s (seq coll)]\n       (redu f (first s) (rest s))\n       (list (f)))))\n   ([f init coll]\n    (cons init (lazy-seq \n                (when-let [s (seq coll)]\n                  (redu f (f init (first s)) (rest coll)))))))","user":"554b7056e4b0a04f79299583"},{"code":"(fn reductions'\n    ([op xs] (reductions' op (first xs) (rest xs)))\n    ([op init xs]\n     (cons init\n           (lazy-seq\n             (when-let\n               [s (seq xs)]\n               (reductions' op (op init (first s)) (rest s)))))))","problem":60,"user":"508157b2e4b0946d0443855c"},{"problem":60,"code":"(fn scan\n    ([f acc [x & xs]]\n     (if x\n       (lazy-seq (cons acc (scan f (f acc x) xs)))\n       (list acc)))\n    ([f [x & xs]] (scan f (f x) xs)))","user":"5782018de4b0d36ec5835e8e"},{"problem":60,"code":"(fn [& args]\n           (let [lst (last args)\n                 head (vec (butlast args))]\n             ((fn reduction [n]\n                (if (empty? (drop (dec n) lst))\n                  []\n                  (let [v (apply reduce (conj head (take n lst)))]\n                    (cons v (lazy-seq (reduction (inc n)))))))\n                (if (= 3 (count args))\n                  0\n                  1))))","user":"525cc912e4b0cb4875a45d48"},{"problem":60,"code":"(fn reds\n  ([f val col]\n   (lazy-seq\n    (cons val\n          (if (seq col)\n            (reds f (f val (first col)) (next col))\n            nil))))\n  ([f col]\n   (if (seq col)\n     (reds f (first col) (next col))\n     (list (f)))))","user":"5455c2f3e4b080a794c2c87d"},{"problem":60,"code":"(fn myreductions\n  ([f coll] (myreductions f (first coll) (rest coll)))\n  ([f val coll]\n   (cons val\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (myreductions f (f val (first s)) (rest s)))))))","user":"595a885be4b066ee0a44afc4"},{"code":"(fn r\n  ([f s] (r f (first s) (rest s)))\n  ([f i s]\n    (cons i (lazy-seq \n              (when-let [s (seq s)]\n                (r f (f i (first s)) (rest s)))))))","problem":60,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn this ([f coll]\n            (lazy-seq\n                    (when-let [s (seq coll)]\n                      (this f (first s) (rest s)))))\n                ([f x coll]\n                  (cons x\n                    (lazy-seq\n                      (when-let [s (seq coll)]\n                        (this f (f x (first s)) (rest s)))))))","problem":60,"user":"4f066916535dcb61093f6c10"},{"problem":60,"code":"(fn my-reductions\n  ([f s]\n   (my-reductions f (first s) (rest s)))\n  ([f acc s]\n   (cons acc\n         (lazy-seq\n         (if (empty? s)\n           nil\n           (my-reductions f (f acc (first s)) (rest s))))))\n  )","user":"55469eede4b0a04f79299542"},{"problem":60,"code":"(fn my-reduction\n  ([f v col]\n   (lazy-seq\n    (if (seq col)\n      (cons v (my-reduction f (f v (first col)) (next col)))\n      (list v))))\n  ([f col]\n   (my-reduction f (first col) (next col))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":60,"code":"(fn g\n  ([f x a] (lazy-cat [x] (if-let [[y & b] (seq a)] (g f (f x y) b))))\n  ([f [x & a]] (g f x a))\n)","user":"56d80542e4b0ea9b8538f7e1"},{"code":"(fn reds\n  ([f [x & xs]]\n    (reds f x xs))\n  ([f x xs]\n    (if (empty? xs)\n      [x]\n    (lazy-seq\n      (cons \n        x\n        (reds f (f x (first xs)) (rest xs)))))) )","problem":60,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"(fn red \r\n               ([f xs]\r\n                   (red f (first xs) (rest xs)))\r\n               ([f start xs]\r\n                ; (prn xs (rest xs) (empty? (rest xs)))  \r\n                 (cons start \r\n                 (lazy-seq \r\n                   (when-let [s (seq xs)]\r\n                     (red f (f start (first s)) (rest s)))))))","problem":60,"user":"4deb529a535d08e6dec9fe04"},{"code":"(fn [f x & y]\n  (letfn [(scan [prev l]\n                (if (empty? l)\n                  (list prev)\n                  (let [[hd & tl] l\n                        res (f prev hd)]\n                    (cons prev \n                          (lazy-seq (scan res tl))))))]\n    (if (empty? y)\n      (scan (first x) (rest x))\n      (scan x (first y)))))","problem":60,"user":"515ead6be4b049add99a053e"},{"code":"(fn reduct2\n  ([f s] (reduct2 f (first s) (rest s)))\n  ([f initial s]\n     (let [reductor (fn me [f initial s]\n                      (lazy-seq\n                       (when-let [s (seq s)]\n                         (let [step (f initial (first s))]\n                           (cons step (me f step (rest s)))))))]\n       (cons initial (reductor f initial s)))))","problem":60,"user":"4f0ef874535d0136e6c22328"},{"code":"(fn lz-reduce\n  ([f s] (lz-reduce f (first s) (rest s)))\n  ([f v s]\n     (lazy-seq\n      (if (seq s)\n        (cons v (lz-reduce f (f v (first s)) (rest s)))\n        (list v)))))","problem":60,"user":"4f3e5e87e4b0e243712b1f83"},{"code":"(fn red\n  ([f l] (red f (first l) (rest l)))\n  ([f i l] (cons i (lazy-seq (if (empty? l) '() (red f (f i (first l)) (rest l))))))\n)","problem":60,"user":"52593207e4b0cb4875a45cd3"},{"code":"(fn pseudo-reductions\n  ([f coll]\n    (lazy-seq \n      (let [s (seq coll)]\n        (pseudo-reductions f (first s) (rest s)))))\n  ([f init coll]\n    (cons init\n      (lazy-seq\n        (when-let [s (seq coll)] \n          (pseudo-reductions f (f init (first s)) (rest s)))))))","problem":60,"user":"52319066e4b0e2e8de81d1e9"},{"code":"(fn r\n  ([f [i & a]] (r f i a))\n  ([f i [x & y]] (cons i (lazy-seq (if x (r f(f i x)y))))))","problem":60,"user":"5088082ae4b0198722bd9854"},{"problem":60,"code":"(fn rs\n  ([f xs]\n    (if (seq xs) (rs f (first xs) (rest xs)) []))\n  ([f x xs]\n    (cons x (lazy-seq (when (seq xs) (rs f (f x (first xs)) (rest xs)))))))","user":"55fee5e4e4b00f4cabc5765a"},{"problem":60,"code":"(fn __\n    ([func val coll] \n     (if (empty? coll) \n       [val]\n       (cons val\n             (lazy-seq (__ func (func val (first coll)) (rest coll))))))\n    ([func coll]\n     (let [f (first coll)\n           r (rest coll)]\n       (cond\n        (empty? coll) [(func)]\n        (empty? r) [f]\n        :else (cons f \n                    (lazy-seq (__ func (cons (func f (first r)) \n                                             (rest r))))))))\n    )","user":"544e9022e4b0e3978000698b"},{"problem":60,"code":"(fn reduct\n    ([f coll]\n     (if (empty? coll) (f) (reduct f (first coll) (rest coll))))\n    ([f init coll]\n     (if (empty? coll) []\n         (let [v (f init (first coll))\n               tail (rest coll)]\n           (if (empty? tail) [init v]\n               (cons init (lazy-seq (reduct f v tail))))))))","user":"595bbab7e4b066ee0a44afe0"},{"code":"(fn\n  [f & xs]\n  (let [s (if (second xs) (second xs) (first xs))\n        seed (if (second xs) (first xs) (f))]\n    (letfn [(reduct [l res]\n              (lazy-seq \n               (when (seq l)\n                 (let [current (f res (first l))]\n                   (cons current (reduct (rest l) current))))))]\n      (if (second xs)\n        (cons seed (reduct s seed))\n        (reduct s seed)))))","problem":60,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":60,"code":"(fn rds\n  ([f coll] \n   (let [ [h & t] (rest coll), prev (first coll)]\n     (lazy-seq (cons prev (rds f (f prev h) t)))))\n  ([f x coll] \n   (let [[h & t] coll, prev x]\n     (lazy-seq \n      (cons prev \n        (if (empty? coll)\n          nil\n          (rds f (f prev h) t)))))))","user":"5e9f38cce4b00a66d4a9517e"},{"problem":60,"code":"(fn red\n  ([f xs] (red f (first xs) (rest xs)))\n  ([f init xs] (lazy-seq (cons init (red f init xs init))))\n  ([f init xs acc]\n    (if (empty? xs)\n      nil\n      (lazy-seq\n      (let [next (f acc (first xs))]\n        (cons next (red f init (rest xs) next)))))))","user":"5fa8424ce4b0fa27300f3de5"},{"problem":60,"code":"(fn r\n  ([f xs] (r f (first xs) (rest xs)))\n  ([f x xs] (if (empty? xs)\n              [x]\n              (lazy-seq (cons x (r f (f x (first xs)) (rest xs)))))))","user":"5b64370ae4b0c6492753e73c"},{"problem":60,"code":"(fn reduct\n  ([f [x & coll]] (reduct f x coll))\n  ([f acc coll]\n     (lazy-seq \n      (if-let [[x & coll] (seq coll)]\n        (cons acc (reduct f (f acc x) coll))\n        [acc]))))","user":"5405ae2be4b0addc1aec6671"},{"code":"(fn r\n    ([f [init & args]]\n       (r f init args))\n    ([f init args]\n       (cons init (lazy-seq\n                   (when args\n                     (r f (f init (first args)) (next args)))))))","problem":60,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"(fn red\n  ([f s]\n   (red f (first s) (rest s))\n   )\n  ([f i s]\n   (if (empty? s)\n     (list i)\n     (cons\n      i\n      (lazy-seq\n       (red f (f i (first s)) (rest s))\n       )\n      )\n     )\n   )\n  )","problem":60,"user":"52586d24e4b0cb4875a45cb0"},{"code":"(fn r\n  ([f c]\n    (if (empty? c)\n      (f)\n      (r f (first c) (rest c))))\n  ([f i c]\n    (cons i\n      (if (not-empty c)\n        (lazy-seq (r f (f i (first c)) (rest c)))))))","problem":60,"user":"4e49badd535dc968683fc4c9"},{"problem":60,"code":"(fn r\n  ([f [h & t]] (r f h t))\n  ([f z [h & t]] (cons z\n                       (if h\n                         (lazy-seq (r f (f z h) t))))))","user":"53e4fa2ce4b036ad0777e454"},{"code":"(fn red\n  ([f s] (red f (first s) (rest s)))\n  ([f x s]\n    (if (seq s)\n      (cons x (lazy-seq (red f (f x (first s)) (rest s))))\n      [x])))","problem":60,"user":"52d3f666e4b09f7907dd1327"},{"problem":60,"code":"(fn f\n  ([g s] (f g (first s) (rest s)))\n  ([g a s]\n   (cons a (if (seq s)\n             (lazy-seq (f g (g a (first s)) (rest s)))))))","user":"54e2a779e4b024c67c0cf7d3"},{"problem":60,"code":"(fn ireduc\n\t\t([f, arr] (ireduc f (first arr) (rest arr)))\n\t\t([f, curval, arr]\n\t\t\t(if (empty? arr) [curval]\n\t\t\t\t(let [reduction (f curval (first arr))]\n\t\t\t\t\t(lazy-seq (cons curval\n\t\t\t\t\t\t(ireduc f reduction (rest arr))\n\t\t\t\t\t))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)","user":"5d73530ce4b02e6b30c93514"},{"code":"(fn problem60\n    ([func v sq]\n       (lazy-seq\n         (cons v\n               (if (empty? sq)\n                 '()\n                 (let [new-v (func v (first sq))\n                       remain (rest sq)]\n                   (problem60 func new-v remain))))))\n    ([func sq]\n       (problem60 func (first sq) (rest sq))))","problem":60,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":60,"code":"(fn r\n  ([f coll] (r f (first coll) (rest coll)))\n  ([f a coll] (lazy-seq (if (not= nil a) (cons a (r f (if (not= nil (first coll)) (f a (first coll))) (rest coll)))))))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"problem":60,"code":"(fn alt-redox\n  ([f coll] (alt-redox f (first coll) (rest coll)))\n  ([f x coll]\n     (lazy-seq\n      (cons x \n            (if (empty? coll)\n              '()\n              (alt-redox f (f x (first coll)) (rest coll)))))))","user":"53bf0913e4b0c98a41f5cc99"},{"code":"(fn o\n([f coll]\n  (lazy-seq\n    (if-let [s (seq coll)]\n      (o f (first s) (rest s))\n      (list (f)))))\n([f init coll]\n  (cons init\n    (lazy-seq\n      (when-let [s (seq coll)]\n        (o f (f init (first s)) (rest s)))))))","problem":60,"user":"51b3f109e4b0f094dd986fa9"},{"problem":60,"code":"(fn __\n  ([f l]\n   (__ f (first l) (rest l))\n   )\n  ([f arg l]\n   ((fn helper [last-result rest-of-list]\n      (if (empty? rest-of-list)\n        [last-result]\n        (let [curr-result (f last-result (first rest-of-list))]\n          (->> (rest rest-of-list) (helper curr-result) (lazy-seq) (cons last-result)))))\n    arg\n    l)\n   )\n  )","user":"5e300655e4b05b4b01516209"},{"problem":60,"code":"(fn sdf\n  ([f coll]\n   (sdf f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     [init]\n     (lazy-seq (cons init (sdf f (f init (first coll)) (rest coll)))))))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"(fn r \n  ([f xs] (r f (first xs) (rest xs)))\n  ([f x xs]\n  (cond (empty? xs) (cons x ())\n        :else (cons x (lazy-seq (r f (f x (first xs)) (rest xs))))\n        )))","problem":60,"user":"5142e808e4b0c172af7558c9"},{"problem":60,"code":"(fn my-reduce ([op input] (my-reduce op (first input) (rest input)))\n            ([op result input] (lazy-seq (if (empty? input)\n                                           (list result)\n                                           (cons result (my-reduce op (op result (first input)) (rest input)))))))","user":"5e954b9ee4b0fbed045a3809"},{"problem":60,"code":"(fn my-reductions''\n    ([f xs]\n     (my-reductions'' f (first xs) (rest xs)))\n    \n    ([f init xs]\n     (loop [xs (take 10 xs)\n            ys (vector init)]\n       (if (empty? xs)\n         ys\n         (recur\n          (rest xs)\n          (conj ys (f (last ys) (first xs))))))))","user":"58b81490e4b0ebc645576d8c"},{"problem":60,"code":"(fn scan\n  ([f [x & xs]]\n   (scan f (f x) xs))\n  ([f init [x & xs]]\n   (lazy-seq \n     (cons init\n           (if x (scan f (f init x) xs))))))","user":"596a66cde4b069c0a1a19803"},{"problem":60,"code":"(fn my-reductions\n ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (my-reductions f (first s) (rest s))\n        )))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (my-reductions f (f init (first s)) (rest s)))))))","user":"542edb4ae4b0dad94371f2c8"},{"problem":60,"code":"(fn my-reduce\n      ([f collection]\n       (my-reduce f (first collection) (rest collection)))\n      ([f first-value collection]\n       (if (empty? collection)\n         [first-value]\n         (cons first-value (lazy-seq (my-reduce f (f first-value (first collection)) (rest collection)))))\n       ))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn f ([g i c] (if (empty? c) [i] (cons i (lazy-seq (f g (g i (first c)) (rest c))))))\n      ([g c] (f g (first c) (rest c))))","problem":60,"user":"50ed4626e4b01236b1d4983c"},{"problem":60,"code":"(fn r\n  ([f [h & t]] (r f h t))\n  ([f h t]\n   (if (empty? t)\n     [h]\n     (lazy-seq (cons h (r f (f h (first t)) (rest t)))))))","user":"55236ad6e4b0882d96d091b1"},{"code":"(fn r\n  ([f [x & xs]] (r f x xs))\n  ([f i [x & xs]]\n    (cons i (when x (lazy-seq (r f (f i x) xs))))))","problem":60,"user":"4f9a0064e4b0dcca54ed6d03"},{"code":"(fn this\r\n       ([f coll]\r\n          (lazy-seq\r\n           (if-let [s (seq coll)]\r\n             (this f (first s) (rest s))\r\n             (list (f)))))\r\n       ([f init coll]\r\n          (cons init\r\n                (lazy-seq\r\n                 (when-let [s (seq coll)]\r\n                   (this f (f init (first s)) (rest s)))))))","problem":60,"user":"4dbe19fe535d020aff1edf59"},{"code":"(fn f\n  ([g [x & s]] (f g x s))\n  ([g a [x & s]] (lazy-seq (cons a (if x (f g (g a x) s))))))","problem":60,"user":"4f437751e4b0d7d3c9f3fd20"},{"problem":60,"code":"(fn sequence-reductions\n  ([f coll] (sequence-reductions f (first coll) (rest coll)))\n  ([f val coll]\n   (cons val (lazy-seq\n              (when-let [s (seq coll)]\n                (sequence-reductions f (f val (first s)) (rest s)))))))","user":"5501a1e1e4b07d26eda61d75"},{"code":"(fn rs\n  ([f coll] (rs f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (if coll\n           (lazy-seq (rs f (f init (first coll)) (next coll)))))))","problem":60,"user":"51df825de4b01188f062752b"},{"problem":60,"code":"(fn redu\n  ([f coll]\n   (lazy-seq\n    (if (seq coll)\n      (redu f (first coll) (rest coll)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (if (seq coll)\n             (redu f (f init (first coll)) (rest coll)))))))","user":"557e8326e4b05c286339e0d7"},{"problem":60,"code":"(fn f\n            ([g vs]\n             (f g (first vs) (rest vs)))\n            ([g ini vs]\n             (let [foo (fn [[x xs]]\n                         (if (seq xs)\n                           [(g x (first xs))\n                            (rest xs)]\n                           []))]\n               (->> [ini vs]\n                    (iterate foo)\n                    (take-while seq)\n                    (map first)))))","user":"53684a2fe4b0243289761e8c"},{"code":"(fn my-reductions\n  ([f coll]\n     (my-reductions f (first coll) (rest coll)))\n  ([f val coll]\n     (lazy-seq\n      (cons val\n            (when (not-empty coll)\n              (my-reductions f (f val (first coll)) (rest coll)))))))","problem":60,"user":"530578ede4b0d8b024fd3760"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  \n  ([f v coll]   \n   (if (empty? coll)\n     (cons v coll)\n     (let [v' (f v (first coll))]\n       (cons\n        v\n        (lazy-seq (my-reductions f v' (rest coll)))))))\n  )","user":"5641296de4b08d4f616f5ef4"},{"problem":60,"code":"(fn red\n  ([f v [s & r]] (lazy-seq (cons v (when s (red f (f v s) r)))))\n  ([f [s & r]] (red f s r)))","user":"57b3efb1e4b0fbc9809a278a"},{"problem":60,"code":"(fn special-reductions\n  ([f i v]\n   (if\n     (not (nil? v))\n     (lazy-seq (cons i (special-reductions f (f i (first v)) (next v))))\n     (vector i)\n     )\n    )\n  ([f v]\n   (if\n     (not (nil? v))\n     (special-reductions f (f (first v)) (next v))\n     )\n\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"problem":60,"code":"(fn r \n  ([f sq] \n   (r f (first sq) (rest sq))) \n  ([f a sq] \n   (lazy-seq \n    (cons a \n          (when (not (empty? sq)) \n            (r f (f a (first sq)) (rest sq)))))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"code":"(fn myred\n    ([fcn aseq] (myred fcn (first aseq) (rest aseq)))\n    ([fcn accum aseq] \n       (if (empty? aseq)\n         (vector accum)\n         (lazy-seq\n          (cons \n           accum\n           (myred fcn (fcn accum (first aseq)) (rest aseq))))\n         )))","problem":60,"user":"5281a445e4b0757a1b17143a"},{"problem":60,"code":"(fn this \n  ([f xs]\n    (this f \n          (first xs) \n          (rest xs)))\n  ([f v xs]\n   (cons v (if (empty? xs) '()\n    (lazy-seq\n      (this f\n            (f v (first xs))\n            (rest xs)))))))","user":"51e5a627e4b0efabf93c02db"},{"code":"(fn verbose-reduce\n  ([f l] (verbose-reduce f (first l) (rest l)))\n  ([f accum l]\n    (lazy-seq\n      (cons accum\n            (when (seq l)\n              (verbose-reduce f (f accum (first l)) (rest l)))))))","problem":60,"user":"53727c0be4b06d7f452d9dfa"},{"code":"(fn my-reductions\n  ([f col] (my-reductions f (first col) (rest col)))\n  ([f init col]\n       (cons\n        init\n        (if (empty? col)\n          nil\n          (lazy-seq (my-reductions f (f init (first col)) (rest col))))))\n)","problem":60,"user":"51b9d1f0e4b0e871ca49590b"},{"code":"(fn myreductions6\n    ([f coll]\n       (myreductions6 f (first coll) (rest coll)))\n    ([f val coll]\n       (if-let [s (seq coll)]\n         (cons val\n               (lazy-seq (myreductions6 f (f val (first s)) (rest s))))\n         (list val))))","problem":60,"user":"4e5be681535d8a8b8723a2bc"},{"problem":60,"code":"(fn my-reductions\n\t([f init coll]\n\t\t(if (empty? coll)\n\t\t\t(list init)\n\t\t\t(lazy-seq (let [c0 (first coll), coll' (rest coll), v (f init c0)]\n\t\t\t\t(cons init (my-reductions f v coll'))))))\n\t([f coll] (my-reductions f (first coll) (rest coll))))","user":"5370b386e4b0fc7073fd6e9b"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f init coll]\n      (if (empty? coll) [init] \n          (let [reduction (f init (first coll))]\n            (lazy-seq (cons init (red f reduction (rest coll))))\n          )\n      )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn self\n  ([f cl] (self f (first cl) (rest cl)) )\n  ([f init cl]\n   (if (empty? cl)\n     [init]\n     (cons init (lazy-seq (self f (f init (first cl)) (next cl)) ))\n   )\n   \n  )\n)","problem":60,"user":"51db9e1ee4b0e067a9bbadc9"},{"code":"(fn g ([f coll] (g f (first coll) (next coll)))\n  ([f a coll]\n   (if-let [x (seq coll)]\n    (lazy-seq \n  \n     (let [fx (f a (first x))]\n       (cons a (g f fx (next x))\n             )))\n    (cons a ()))))","problem":60,"user":"51424cc8e4b0b50abeb46b34"},{"problem":60,"code":"(fn reds \n  ([f col] \n   (lazy-seq\n    (if-let [s (seq col)]\n      (reds f (first s) (rest s))\n      (list (f))\n      ) \n    )\n   )\n  ([f init col]\n \n     (cons init \n         (lazy-seq \n          (when-let [s (seq col)] \n            (reds f (f init (first s)) (rest s)) )))\n     \n   ))","user":"5d5eb086e4b0c9e5857d4ff7"},{"problem":60,"code":"(fn reds\n         ( [f acc coll] (if (empty? coll) `(~acc)\n                         (cons acc (lazy-seq (reds f (f acc (first coll)) (rest coll))))))\n         ([f coll] (reds f (first coll) (rest coll))))","user":"538e864ee4b0b51d73faae87"},{"problem":60,"code":"(fn reducelazy\n  ([func acc restargs]\n   (reducelazy func (cons acc restargs)))\n  ([func args]\n    (lazy-seq\n      (cons (first args)\n        ((fn step [accumulator remaining]\n          (when (not (empty? remaining))\n            (lazy-seq\n              (cons (func accumulator (first remaining))\n                    (step (func accumulator (first remaining)) (rest remaining))))))\n        (first args) (rest args))))))","user":"57131dfbe4b07c98581c3a98"},{"problem":60,"code":"(fn sequence-reductions\n  ([f [h & t]] (sequence-reductions f h t))\n  ([f init [h & t]]\n   (cons init (lazy-seq (when h (sequence-reductions f (f init h) t))))))","user":"5f37263de4b0574c87022c4e"},{"problem":60,"code":"(letfn [(rdcs\n      ([f val coll]\n        (letfn\n          [(inner [val coll]\n            (cons val\n              (if (empty? coll)\n                  (lazy-seq)\n                  (lazy-seq\n                    (inner\n                      (f val (first coll))\n                      (rest coll))))))]\n          (inner val coll)))\n      ([f coll]\n        (if (empty? coll)\n            (lazy-seq `(~(f)))\n            (let\n              [a (first coll)\n               r (rest coll)]\n              (if (empty? r)\n                (lazy-seq `(~a))\n                (rdcs f a r))))))] rdcs)","user":"55b6a63ae4b01b9910ae299b"},{"code":"(fn r\n  ([f coll]\n    (r f (first coll) (rest coll)))\n  ([f init coll]\n    (lazy-seq\n      (if (seq coll)\n        (cons init (r f (f init (first coll)) (rest coll)))\n        (list init)))))","problem":60,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":60,"code":"(fn red\n  ([f [v & vs]] (red f v vs))\n  ([f v [u & us]]\n   (cons v (when u (lazy-seq (red f (f v u) us))))))","user":"4e6a4950535d8ccf87e9febf"},{"code":"(fn r\n  ([f [a & s]] (r f a s))\n  ([f a s]\n   (cons a (map #(apply f a (take (+ 1 %2) s)) s (range)))))","problem":60,"user":"4e823ed7535db62dc21a62c7"},{"code":"(fn f\n    ([g c]\n       (f g (first c) (next c)))\n    ([g a c]\n       (lazy-seq\n        (if-let [c (seq c)]\n          (let [b (g a (first c))]\n            (cons a (f g b (next c))))\n          [a]))))","problem":60,"user":"4f0664bd535dcb61093f6c0f"},{"problem":60,"code":"(fn mreduce\n  ([f l] (mreduce f (first l) (rest l)))\n  ([f i l]\n   (if (empty? l) [i]\n       (let [n (f i (first l))]\n         (cons i (lazy-seq (mreduce f n (rest l))))))))","user":"5866b999e4b0f14aab7c886b"},{"code":"(fn f ([func [x & xs]] (f func x xs)) \n      ([func acc [x & xs]]\n   \t    (lazy-seq (concat [acc] (if x (f func (func acc x) xs)\n                                       nil)))))","problem":60,"user":"51eadb98e4b0f1f103a0d153"},{"problem":60,"code":"(fn my-reduce\n  ([func coll] (my-reduce func (first coll) (rest coll)))\n  ([func result coll]\n    (lazy-seq \n      (if (empty? coll) \n          (list result)\n          (cons result (my-reduce func (func result (first coll)) (rest coll))))\n    )\n  )\n)","user":"546692aee4b01be26fd746e7"},{"problem":60,"code":"(fn rdctns\n  ([f coll] (rdctns f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq\n     (cons init (when (seq coll) (rdctns f (f init (first coll)) (rest coll)))))))","user":"53b39d82e4b047364c0444a6"},{"code":"(fn nes\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (nes f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (nes f (f init (first s)) (rest s)))))))","problem":60,"user":"4e78dc98535db95036265724"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init \n         (lazy-seq\n          (when-let [next-elem (first coll)]\n           (my-reductions \n            f \n            (f init next-elem) \n            (rest coll)))))))","user":"52f3568fe4b05e3f0be25f0e"},{"problem":60,"code":"(fn [f x & x2]\n    (let [[i c] (if (empty? x2) [(f (first x)) (rest x)]\n                                [x (first x2)])]\n      (->> c\n           (map-indexed (fn [idx _] (take (inc idx) c)))\n           (map #(apply f i %))\n           (cons i))))","user":"54236ce1e4b01498b1a71ad1"},{"code":"(fn r\n  ([f l]\n   (next (r f (f) l)))\n  ([f a l]\n   (cons a (when (seq l)\n             (lazy-seq\n              (r f (f a (first l)) (next l)))))))","problem":60,"user":"534bde26e4b084c2834f4a81"},{"problem":60,"code":"(fn reductions2\n  ([f init [x & xs]] \n   (cons init (lazy-seq (when x (reductions2 f (f init x) xs))))) \n\n  ([f coll] \n   (reductions2 f (first coll) (rest coll)))\n)","user":"54e5bdf2e4b024c67c0cf7fe"},{"problem":60,"code":"(fn red\n    ([f i s] (->> [i true s]\n     \t\t\t(iterate (fn [[a t [b & n]]] [((fnil f a a) a b) b n]))\n       \t\t\t(take-while second) \n            \t(map first)))\n    ([f [i & s]] (red f i s))\n)","user":"5603c31fe4b04bb52996e1c1"},{"code":"(fn [f val & col]\n  (let [v (if (nil? col) (first val) val)\n        c (if (nil? col) (rest val) (first col))]\n    ((fn r [f v c] \n      (lazy-seq (cons v \n        (if-let [fst (first c)]\n          (r f (f v fst) (rest c))))))\n      f v c)))","problem":60,"user":"506617c3e4b03d366d7cb2ab"},{"code":"(fn rs                                                                                                    \n  ([f [x & xs]]\n     (rs f x xs))\n  ([f i xs]\n     (lazy-seq\n      (cons i (when xs\n                (rs f (f i (first xs)) (next xs)))))))","problem":60,"user":"4e9660ec535dbda64a6f6b44"},{"code":"(fn r\n  ([f [x & coll]] (r f x coll))\n  ([f acc coll]\n     (lazy-seq\n      (if-let [[x & coll] (seq coll)]\n        (cons acc\n              (r f (f acc x) coll))\n        [acc]))))","problem":60,"user":"4f6845d2e4b07046d9f4ef74"},{"problem":60,"code":"(fn ff \n  ([ op1 val1 col1]\n    ( let [g (fn f [ op val col]\n      (          if-not (empty? col) (let [x val \n                                           y (first col)\n                                           z (op x y)]\n                           (lazy-seq (cons z (f op  z (rest col))))))) ] \n    \n     (if-not (sequential? val1) \n         (g op1 val1 col1) \n         (conj (g op1 val1 col1) val1))  )\n   )  \n  \n  ([op1 col1] (ff op1 0 col1))\n    \n  )","user":"56fa8984e4b07572ad1a88c1"},{"code":"(fn reductions-e\n  [f x & rst]\n  (lazy-seq\n    (if (nil? rst) (reductions-e f (first x) (rest x))\n      (if (empty? (first rst)) [x]\n        (cons x\n          (reductions-e f (f x (first (first rst))) (rest (first rst))))))))","problem":60,"user":"52084f75e4b01ce6bbf31dde"},{"problem":60,"code":"(fn reds\n\t([f coll]\n\t(lazy-seq\n\t\t(if-let [s (seq coll)] (reds f (first s) (rest s)) (list (f)))))\n\t([f init coll]\n\t\t(cons init (lazy-seq (when-let [s (seq coll)] (reds f (f init (first s)) (rest s)))))))","user":"56540485e4b0f9d632dd847a"},{"code":"(fn [f & a]\n  (let\n    [s (concat (butlast a) (last a))]\n      (map\n        #(reduce f %)\n        (map #(take % s)\n          (map-indexed (fn [x _] (inc x)) s)\n))))","problem":60,"user":"4f6fbb68e4b07046d9f4efeb"},{"code":"(fn myred\n  ([f coll]  (myred f (first coll) (rest coll)))\n  ([f x coll]\n     (cons x\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (myred f (f x (first s)) (rest s)))))\n     ))","problem":60,"user":"52140b53e4b0961f15ac4d7e"},{"problem":60,"code":"(fn foo\n  ([f coll]\n   (foo f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (if (empty? coll)\n           `()\n           (lazy-seq (foo f (f init (first coll)) (rest coll)))))))","user":"5ddb8a6ee4b0948ae9d9adb2"},{"code":"(fn red\n  ([f s lst] (red f (cons s lst)))\n  ([f lst] (lazy-seq\n    (map-indexed\n     (fn [i x] (reduce f (take (inc i) lst)))\n     lst))))","problem":60,"user":"519136e9e4b0f8ef0be96c01"},{"problem":60,"code":"(fn r\n  ([f [x & xs]] (r f x xs))\n  ([f v [x & xs]] (lazy-seq (cons v (when x (r f (f v x) xs))))))","user":"51e58e02e4b0efabf93c02d0"},{"problem":60,"code":"(fn f\n  ([g p coll]\n   (if (counted? coll)\n     (map (partial reduce g p) (map #(take % coll) (range 0 (inc (count coll)))))\n     (map (partial reduce g p) (map #(take % coll) (rest (range))))))\n  ([g coll]\n   (if (counted? coll)\n     (map (partial reduce g) (map #(take % coll) (range 1 (count coll))))\n     (map (partial reduce g) (map #(take % coll) (rest (range))))\n     )\n   ))","user":"5ab1665de4b073f1774425c0"},{"problem":60,"code":"(fn reduct\n  ([f coll]\n   (reduct f (first coll) (rest coll))\n  )\n  ([f init coll]\n   (if (empty? coll)\n     (list init) \n     (cons init (lazy-seq (reduct f (f init (first coll)) (rest coll))))\n   )\n  )\n)","user":"5cfd5a93e4b0cc9c91588168"},{"problem":60,"code":"(fn my-reductions \n   ([func arg] (my-reductions func (first arg) (rest arg)))\n   ([func arg1 arg2](cons arg1 (lazy-seq (when-let [s (seq arg2)] (my-reductions func (func arg1 (first arg2)) (rest arg2)))))))","user":"539b4268e4b0b51d73faaf1c"},{"problem":60,"code":"(fn reduction\n  ([predicate coll] (reduction predicate (first coll) (rest coll)))\n  ([predicate init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)] (reduction predicate (predicate init (first s)) (rest s)))))))","user":"5a59a76fe4b05d388ecb6c98"},{"problem":60,"code":"(fn reduct ([f init coll]\n    (cons init \n      (when-not (empty? coll)\n        (lazy-seq (reduct f (f init (first coll)) (rest coll)))))\n    )\n    ([f coll]\n      (reduct f (first coll) (rest coll))))","user":"5f431d32e4b0955706451fb5"},{"code":"(fn x\n  ([f coll]\n   (x f (first coll) (rest coll)))\n  ([f val coll]\n   (cons val\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (x f (f val (first s)) (rest s)))))))","problem":60,"user":"4f6fd91ae4b07046d9f4efed"},{"code":"(fn my-reductions\n    ([op s] (my-reductions op (first s) (rest s)))\n    ([op init s]\n       (cons init\n             (if-not (empty? s)\n               (lazy-seq (my-reductions op (op init (first s)) (rest s)))))))","problem":60,"user":"50763574e4b0a894bb95bf3d"},{"problem":60,"code":"(fn myreduce\n      ([f coll]\n       (myreduce f (first coll) (rest coll)))\n      ([f agg coll]\n       (if (empty? coll)\n         (cons agg (lazy-seq '()))\n       \t (let [newagg (f agg (first coll))]\n        \t(cons agg (lazy-seq (myreduce f newagg (rest coll))))))))","user":"5acd1a43e4b0e27600da7823"},{"code":"(fn myr\n  ([f coll]\n    (if (or (empty? coll) (empty? (rest coll)))\n      coll\n      (myr f (first coll) (rest coll))))\n  ([f x coll]\n    (if (empty? coll) (list x)\n      (lazy-cat (list x) (myr f (f x (first coll)) (rest coll))))))","problem":60,"user":"4e14108c535d04ed9115e7dd"},{"problem":60,"code":"(fn r\n   ([f coll]\n    (lazy-seq\n     (if-let [c (seq coll)]\n       (r f (first c) (rest c)))))\n   ([f init coll] \n    (lazy-seq\n     (cons init\n           (when-let [c (seq coll)]\n             (r f (f init (first c)) (rest c)))))))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn r [f & [i l]]\n  (letfn [(n [i l]\n          (lazy-seq\n            (cons i\n              (when (seq l)\n                (n (f i (nth l 0)) (rest l))))))]\n    (if l\n      (n i l)\n      (n (first i) (rest i)))))","problem":60,"user":"4e82f85d535db62dc21a62ce"},{"problem":60,"code":"(fn my-reduce\n  ([f s] \n   (if (empty? s) s \n           (my-reduce f (first s) (rest s)))\n  )\n  ([f v s]\n   (if (empty? s) [v]\n     (let [val (f v (first s))]\n       (lazy-seq\n          (cons\n           v\n           (my-reduce f val (rest s) )\n           )\n          )\n        )\n      )\n   )\n)","user":"5443cb97e4b032a45b86938a"},{"problem":60,"code":"(fn reductions*\n  ([f coll]\n   (reductions* f (first coll) (rest coll)))\n  ([f acc coll]\n   (if (empty? coll)\n     [acc]\n     (lazy-seq\n       (cons acc (reductions* f (f acc (first coll)) (rest coll)))))))","user":"5b0e6795e4b0cc2b61a3be03"},{"problem":60,"code":"(fn __ \n    ([f a b]\n      (letfn [(re [f r l]\n          (cons (f r (first l))\n              (if (empty? (rest l))\n                nil\n                 (lazy-seq (re f (f r (first l)) (rest l)))\n              )\n           )       \n      )]\n      (cons a (lazy-seq (re f a b))\n      )))\n    ([f a] (__ f (first a) (rest a)))\n)","user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn reduct\n  ([f, xs]\n   (reduct f (first xs) (rest xs)))\n  ([f, acc, xs]\n   (if (empty? xs)\n     (list acc)\n     (let [acc1 (f acc (first xs))]\n       (cons acc (lazy-seq (reduct f acc1 (rest xs))))))))","problem":60,"user":"51365524e4b04ac1f358dd52"},{"problem":60,"code":"(fn reduce-\n  ([f coll]\n   (reduce- f (first coll) (rest coll)))\n  ([f init [m & n :as coll]]\n   (cons init\n       (lazy-seq\n          (if(seq coll)\n             (reduce- f (f init m) n))))))","user":"5cd4e1b2e4b0ccb061962927"},{"problem":60,"code":"(fn my-reductions\n  ([f [first & rest]]\n   (my-reductions f first rest))\n  ([f val [first & rest]]\n   (cons val (lazy-seq\n              (when (not (nil? first))\n                (my-reductions f (f val first) rest))))))","user":"60849bd6e4b0736b099e42f2"},{"problem":60,"code":"(fn reductions2\n  ([f val coll]\n   (cons val (lazy-seq (when (not (empty? coll))\n               (reductions2 f (f val (first coll)) (rest coll))))))\n  ([f coll]\n   (reductions2 f (first coll) (rest coll))))","user":"54d000c7e4b018d918be98d7"},{"problem":60,"code":"(fn reductions' ([func coll]\n                  (reductions' func (first coll) (rest coll)))\n   ([func current coll]\n    (if (empty? coll) (list  current)\n        (cons current (lazy-seq (reductions' func (func current (first coll)) (rest coll)))))))","user":"5d9c1226e4b0d3f9b434ad51"},{"code":"(fn r\n  ([f xs] (r f (first xs) (rest xs)))\n  ([f seed xs]\n    (if (empty? xs)\n      [seed]\n      (lazy-seq\n        (cons seed\n          (r f \n            (f seed (first xs))\n            (rest xs)))))))","problem":60,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":60,"code":"(fn x \n    ([f l] (x f (first l) (rest l)))\n    ([f o l] \n       (cons o (lazy-seq (if (empty? l) nil (x f (f o (first l)) (rest l))))))\n)","user":"5356d00ee4b04ce2eb3ed26f"},{"problem":60,"code":"(fn my-reductions3\n  ([func L] (my-reductions3 func (first L) (rest L)))\n  ([func start L]\n   (if (empty? L) (vector start)\n       (let [first-elem (first L) val (func start first-elem)]\n         (lazy-cat (vector start) (my-reductions3 func val (rest L)))))))","user":"5a621702e4b0512ff01cd983"},{"problem":60,"code":"(fn myreducns\n  ([op sequ]   (myreducns op (first sequ) (rest sequ)))\n  ([op init sequ]\n   (let [initval [(op init (first sequ)) (rest sequ)]]\n     (letfn [(redfn [pair]\n                    (let [curr-val (first pair)\n                          curr-seq (second pair)]\n                      (if (empty? curr-seq)\n                        [curr-val] \n                        (lazy-seq\n                         (cons curr-val\n                               (redfn [(op curr-val (first curr-seq))\n                                       (rest curr-seq)]))))))]\n       (cons init (redfn initval))))))","user":"4f80db02e4b033992c121bf9"},{"code":"(fn r\r\n  ([f b] (r f (first b) (rest b)))\r\n  ([f a b]\r\n   (lazy-seq\r\n    (if(empty? b) [a]\r\n      (let [x (f a (first b))]\r\n      (cons a (r f x (rest b))))))))","problem":60,"user":"4deff9f9535d08e6dec9fe15"},{"code":"(fn mrel\n ([fun coll] \n   (mrel fun (first coll) (rest coll)))\n  ([fun val coll]\n    (if (empty? coll)\n      [val]    \n      (lazy-seq (cons \n                val\n                (mrel fun (fun val (first coll)) (rest coll))) \n                )      \n      )\n    )\n  )","problem":60,"user":"4fcf5292e4b03432b189f40e"},{"problem":60,"code":"(fn reduc\n  ([f xs] (reduc f (first xs) (rest xs)))\n  ([f i xs]\n    (if (empty? xs) (list i)\n      (let [v (f i (first xs))]\n        (lazy-seq (cons i (reduc f v (rest xs))))))))","user":"5933b736e4b072a2710fd05d"},{"problem":60,"code":"(fn reds\n  ([f [start & coll]] (reds \n             f\n             start \n             coll))\n  ([f start coll]\n     (lazy-seq (if (empty? coll)\n                 (cons start nil)\n                 (cons start (reds \n                              f \n                              (f start (first coll))\n                              (rest coll)))))))","user":"5fa96ddbe4b0fa27300f3dec"},{"problem":60,"code":"(fn lazy-reduce\n  ([f sval fargs] (if (empty? fargs) (list sval) (lazy-seq (cons sval (lazy-reduce f (f sval (first fargs)) (rest fargs)) ))\n   ))\n  ([f fargs] (lazy-reduce f (first fargs) (rest fargs)))\n)","user":"59a2ba97e4b066c664927d2c"},{"problem":60,"code":"(fn seq-reduction\n  ([func elems]\n   (let [[elem-one & rest-elems] elems]\n     (seq-reduction func elem-one rest-elems)))\n  ([func holder elems]\n   (if (nil? holder)\n     nil\n     (if (nil? elems)\n       (cons holder (seq-reduction func nil nil))\n       (let [[elem-one & rest-elems] elems\n             intermed-result (func holder elem-one)]\n         (lazy-seq (cons holder\n                         (seq-reduction func intermed-result rest-elems))))))))","user":"5dc4719ae4b02f9375f4e1b5"},{"code":"(fn myReductions\n  ([fun init coll]\n    (lazy-seq\n        (if (seq coll)\n          (let [newInit (fun init (first coll))]\n            (cons init (myReductions fun newInit (rest coll))))\n          (cons init []))))\n  ([fun coll]\n    (rest (myReductions fun 0 coll))))","problem":60,"user":"509a25b7e4b0efbae1fbc0a8"},{"code":"(fn r\n  ([f [x & xs]] (r f x xs))\n  ([f acc [x & xs]] (lazy-seq (cons acc (when x (r f (f acc x) xs))))))","problem":60,"user":"528e95efe4b0239c8a67aee2"},{"code":"(fn my-reductions\n    ([f coll] (my-reductions f (first coll) (rest coll)))\n    ([f init coll]\n       (lazy-seq\n        (if (seq coll)\n          (let [acc (f init (first coll))]\n            (cons init (my-reductions f acc (rest coll))))\n          [init]))))","problem":60,"user":"52d7f9a8e4b09f7907dd1381"},{"code":"(fn fun\n  ([f coll]\n    (map\n      (fn [a _] (first a))\n      (iterate\n        #(let [c (second %)]\n          (vector\n           \t(if (empty? c)\n              nil\n              (f (first %) (first c)))\n            (rest c)))\n        [(first coll) (rest coll)] )\n      coll))\n  ([f v coll]\n    (fun f (cons v coll))))","problem":60,"user":"4f253a49e4b0d66497709ff3"},{"code":"(fn reductions1\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reductions1 f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reductions1 f (f init (first s)) (rest s)))))))","problem":60,"user":"50ab44b2e4b0f65d68208509"},{"code":"(fn myred\n  ([f init seq] (if (empty? seq) (list init) (lazy-seq (cons init (myred f (f init (first seq)) (rest seq))))))\n  ([f seq] (myred f (first seq) (rest seq))))","problem":60,"user":"4ed94d69535d10e5ff6f5303"},{"problem":60,"code":"(fn r[f z & args]\n  (if (empty? args)\n    (r f (first z) (rest z))\n    (let [ l (first args) ]     \n      (if (empty? l)\n        (lazy-seq (cons z []))\n        (lazy-seq (cons z (r f (f z (first l)) (rest l))))\n        )\n      )\n    )\n  )","user":"5b3aa98be4b02d533a91bbca"},{"problem":60,"code":"(fn __\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (__ f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (__ f (f init (first s)) (rest s)))))))","user":"515ebde3e4b01e5d11ccd0a8"},{"code":"(fn myredux \n  ([f v]\n    (lazy-seq\n      (if-let [s (seq v)]\n        (myredux f (first s) (rest s))\n        (list (f)))))\n  ([f start v]  (cons start\n           (lazy-seq\n            (when-let [s (seq v)]\n              (myredux f (f start (first s)) (rest s)))))))","problem":60,"user":"50c84ba2e4b00bb60fe0c53e"},{"problem":60,"code":"(fn my-reductions\n  ([f xs] (if (empty? xs) xs (my-reductions f (first xs) (rest xs))))\n  ([f i xs] \n   (cons i (if (empty? xs) xs (lazy-seq (my-reductions f (f i (first xs)) (rest xs)))))))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":60,"code":"(fn red\n  ([f [x & xs]] (red f x xs))\n  ([f x xs]\n     (cons x\n           (if xs\n             (lazy-seq (red f (f x (first xs)) (next xs)))\n             nil))))","user":"546c1f73e4b00cfc9eacc175"},{"problem":60,"code":"(fn my-reductions\n  ([f s] (my-reductions f (first s) (rest s)))\n  ([f v0 s] (my-reductions f v0 s 0))\n  ([f v0 s n] (let [ss (take n s)\n                    r (drop n s)\n                    v (reduce f v0 ss)]                    \n                (if (seq r)\n                  (cons \n                    v\n                    (lazy-seq (my-reductions f v0 s (inc n))))\n                  `(~v)))))","user":"5596a324e4b04c1e5c31d757"},{"problem":60,"code":"(fn zy \n  ([f a] (zy f (first a) (rest a)))\n  ([f a b] (lazy-seq \n            (if (empty? b) \n              (list a) \n              (cons a (zy f (f a (first b)) (rest b)))))))","user":"5951190be4b066ee0a44aea4"},{"code":"(fn my-reductions\n  ([f init [x & xs :as coll]]\n    (if (empty? coll)\n      (list init) (cons init (lazy-seq (my-reductions f (f init x) xs)))))\n  ([f [x & xs :as coll]] (if (empty? coll) (list (f)) (my-reductions f x xs))))","problem":60,"user":"51cdd3f0e4b0e42293a2254b"},{"problem":60,"code":"(fn my-reduce\n  ([f coll]\n    (my-reduce f (first coll) (rest coll)))\n  ([f val coll]\n    (if (empty? coll)\n      (list val)\n      (lazy-seq\n        (cons val\n          (my-reduce f\n            (f val (first coll))\n            (rest coll)))))))","user":"528bba38e4b0239c8a67aea9"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f init coll]\n     (let [[x & xs] coll]\n       (cons init (lazy-seq\n                   (when x (red f (f init x) xs)))))))","user":"58a2b57fe4b02bd94d917ede"},{"problem":60,"code":"(fn my-reduce\n([op input] (my-reduce op (first input) (rest input)))\n([op result input]\n(lazy-seq\n(if (empty? input) (list result)\n(cons result\n(my-reduce op\n(op result (first input))\n(rest input)))))))","user":"54ff6084e4b07d26eda61d50"},{"problem":60,"code":"(fn reduct\n   ([f coll] (reduct f (f (first coll)) (rest coll)))\n   ([f h coll] (if (empty? coll)\n                   [h]\n                   (cons h (lazy-seq (reduct f (f h (first coll)) (rest coll)))))))","user":"56fbf83de4b07572ad1a88da"},{"problem":60,"code":"(fn lazy-reduce\n  ([f sq]\n   (lazy-reduce f (first sq) (rest sq)))\n  ([f acc sq]\n   (lazy-seq\n    (cons\n     acc\n     (if (empty? sq)\n       []\n       (lazy-reduce f (f acc (first sq)) (rest sq)))))))","user":"55b22c33e4b0da326a65cf79"},{"code":"(fn r \n  ([o a] (r o (first a) (rest a))) \n  ([o p a] (if (empty? a) [p] (cons p (lazy-seq (r o (o p (first a)) (rest a))))))\n)","problem":60,"user":"513b77f3e4b00f740c76c403"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f val coll] (if (empty? coll)\n                   (cons val [])\n                   (lazy-seq (cons val (my-reductions f (f val (first coll)) (rest coll)))))))","user":"5da05bcce4b000c986472bd0"},{"code":"(fn r\n  ([f xs] (r f (first xs) (rest xs)))\n  ([f v xs]\n    (lazy-seq \n      (cons v\n        (if (empty? xs) [] (r f (f v (first xs)) (rest xs)))))))","problem":60,"user":"4f1b92d1535d64f60314647b"},{"code":"(fn l\r\n         ([f i [h & r]]\r\n            (let [v (f i h)]\r\n              (if (seq r)\r\n                (cons i (lazy-seq (l f v r)))\r\n                (cons i (list v)))))\r\n         ([f [h & r]]\r\n            (l f h r)))","problem":60,"user":"4e9609ad535dbda64a6f6b3e"},{"code":"(fn red \r\n   ([f [a b & coll]] (cons a (red f (f a b) coll)))\r\n   ([f res coll] (if (empty? coll) \r\n                  (list res)\r\n                  (let [[cur & r] coll\r\n                        next (f res cur)] \r\n                    (lazy-seq (cons res (red f next r)))))))","problem":60,"user":"4feada56e4b0140c20fb9c11"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (cons (first coll) (my-reductions f (f (first coll) (second coll)) (nthrest coll 2))))\n  ([f v coll] \n   (if (empty? coll)\n     [v]\n     (cons v (lazy-seq (my-reductions f (f  v (first coll)) (rest coll)))))))","user":"5e12327ee4b099d064962fe5"},{"code":"(fn reduct\n  ([f coll] \n    (reduct f (first coll) (next coll)))\n  ([f val coll]\n    (lazy-seq\n      (cond\n        (empty? coll) [val]\n        :else (cons\n                val\n                (reduct f (f val (first coll)) (next coll))\n                )\n        )\n      )\n    )\n  )","problem":60,"user":"4ecfa05c535d44c135fd68b9"},{"problem":60,"code":"(fn partial-reduce\n  ([fun coll]\n   (partial-reduce fun (first coll) (rest coll)))\n  ([fun ini coll]\n   (cons ini\n         (lazy-seq\n          (if (seq coll)\n            (partial-reduce fun (fun ini (first coll)) (rest coll)))))))","user":"5d6f063de4b04d129b00f2d1"},{"problem":60,"code":"(fn f \n  ([g [x & xs]] \n    (if (empty? xs)\n        [x]\n        (lazy-seq (cons x (f g (cons (g x (first xs)) (rest xs))))))) \n  ([g a x] (f g (concat [a] x))))","user":"5a14228fe4b0ff51aa4b3193"},{"code":"(fn r [f in & col]  \n  (let [i (if (empty? col)\n            (first in)\n            in)\n        c (if (empty? col)\n            (rest in)\n            (first col))]\n    (if (empty? c)\n      [i]\n      (cons i (lazy-seq (r f (f i (first c)) (rest c)))))))","problem":60,"user":"4facd2fae4b081705acca22f"},{"problem":60,"code":"(fn rr\r\n  ([f coll]\r\n   (lazy-seq\r\n    (if-let [s (seq coll)]\r\n      (rr f (first s) (rest s))\r\n      (list (f)))))\r\n  ([f init coll]\r\n   (lazy-seq\r\n    (cons init \r\n          (when-let [s (seq coll)]\r\n            (rr f (f init (first s)) (rest s)))))))","user":"580e7761e4b0849f6811b753"},{"code":"(fn [& args] (let [[start end] (if (= (type (last args)) clojure.lang.LazySeq) \n               [inc identity]\n               [identity (partial take (inc (count (last args))))])]\n                 (end (map #(apply reduce (conj (vec (butlast args)) %)) \n                  (for [x (range)] (take (start x) (last args)))))))","problem":60,"user":"53976599e4b0b51d73faaeea"},{"problem":60,"code":"(fn r\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (r f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (if (nil? init)\n       (list init)\n       (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (r f (f init (first s)) (rest s))))))))","user":"56201509e4b064ca9f4b16da"},{"problem":60,"code":"(fn -reduce ([f coll] (-reduce f (first coll) (rest coll) )) ( [f init coll] (cons init (lazy-seq (if (not-empty coll) (-reduce f (f init (first coll)) (rest coll) ) )))))","user":"58ac513fe4b0005cfeb1a746"},{"problem":60,"code":"(fn redoo\n  ([f acc c] (redoo f (cons acc c)))\n  ([f [x & more :as all]]\n     (let [redoo1 (fn redoo1\n  ([f [x & more] p]\n     (if (nil? x) (lazy-seq) (lazy-seq (cons (p x) (redoo1 f more (partial f (p x))))))))]\n       (redoo1 f all identity))))","user":"512b07f7e4b078b06821febb"},{"problem":60,"code":"(fn red\n  ([op [x & xs]]\n   (red op x xs))\n  ([op dv [x & xs :as s]]\n   (if (empty? s) [dv]\n     (lazy-seq (cons dv (red op (op dv x) xs))))))","user":"605b7a90e4b079a07f8593fc"},{"problem":60,"code":"(fn reduce-step\n  ([f s lst]\n   (lazy-seq\n     (if (empty? lst) (vector s)\n       (cons s  (reduce-step f (f s (first lst))  (rest lst) ) ))))\n\n  ([f lst]\n    (reduce-step f  (first lst) (rest lst)))\n\n\n)","user":"575ebba3e4b08062f99a4e70"},{"problem":60,"code":"(fn f ([a b] (f a (first b) (rest b)) ) \n   ([a b c] (cons b (lazy-seq (when-let[s (seq c)] (f a (a b (first s)) (rest s))) ) ) ) )","user":"53b3ea79e4b047364c0444ab"},{"code":"(fn f\n     ([op b]   (f op (first b) (rest b)))\n     ([op a b] (cons a (if (empty? b) [] (lazy-seq (f op (op a (first b)) (rest b)))))))","problem":60,"user":"5046b003e4b011c5dfee7727"},{"code":"(fn reds\n  ([f col] (map #(reduce f %) (map (fn [col num _] (take num col)) (repeat col) (iterate inc 1) col)))\n  ([f init col]\n     (lazy-seq (cons init (map #(reduce f init %) (map (fn [col num _] (take num col)) (repeat col) (iterate inc 1) col))))))","problem":60,"user":"4e89ff3d535d3e98b802328a"},{"code":"(fn problem-60 [f & args]\n  (let [num-args (count args)\n        orig-s (last args)\n        opt-result (if (= num-args 2)\n                      (nth args 0)\n                      nil)\n        orig-s-processed (if (= num-args 2)\n                           (cons opt-result orig-s)\n                           orig-s)]\n    ;; outer wrapper handles optional arg \"opt-result\" and pushes it\n    ;; onto coll arugment, so that inner function can work consistently\n    ((fn inner-func [f result s]\n       (lazy-seq\n         (let [item (first s)\n               remainder (rest s)]\n           (if (nil? result)\n             (cons item (inner-func f item remainder))\n             (if (not (nil? item)) \n               (let [new-result (f result item)]\n                 (cons new-result (inner-func f new-result remainder))))))))\n     f nil orig-s-processed)))","problem":60,"user":"4f31519ae4b0d6649770a086"},{"problem":60,"code":"(fn my-reductions\n    ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (my-reductions f (first s) (rest s))\n        (list (f)))))\n    ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (my-reductions f (f init (first s)) (rest s)))))))","user":"55c5b55fe4b0e31453f649b5"},{"problem":60,"code":"(fn my-reduct \n  ([op start remain] \n     (lazy-seq (cons start \n                   (if (not (= (first remain) nil))\n                  \t(my-reduct op (op start (first remain)) (rest remain))))))\n  ([op remain]\n   (my-reduct op (first remain) (rest remain))\n  ) \n)","user":"57011eb3e4b08d47c97781d1"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f acc coll]\n   (if (empty? coll)\n     (list acc)\n     (cons acc (lazy-seq (my-reductions f (f acc (first coll)) (rest coll)))))))","user":"572db6d5e4b0cd1946bd0f78"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     (list init)\n     (lazy-seq (cons init\n                     (my-reductions f\n                                    (f init (first coll))\n                                    (rest coll)))))))","user":"594783bee4b07ddc2dafada1"},{"problem":60,"code":"(fn r\n  ([f [h & t]] (r f h t))\n  ([f a [h & t]] (cons a (lazy-seq (if h (r f (f a h) t) nil)))))","user":"4faf97d8e4b081705acca258"},{"code":"(fn t [& n] \r\n  (if (= (count n) 2)\r\n    (t (first n) (first (second n)) (next (second n)))\r\n    (if (empty? (nth n 2))\r\n      (list (second n))\r\n      (lazy-seq (cons (second n) (t (first n) ((first n) (second n) (first (nth n 2))) (next (nth n 2))))))))","problem":60,"user":"4ef6e689535dced4c769f24f"},{"problem":60,"code":"(fn redux\n  ([f coll] (redux f (first coll) (rest coll)))\n  ([f init coll] \n    (lazy-seq \n      (if (empty? coll) \n        (list init)\n        (cons init (redux f (f init (first coll)) (rest coll)))))))","user":"57c0393be4b05aa3c4741c90"},{"problem":60,"code":"(fn r\n  ([f [h & t]]\n   (r f h t))\n  ([f a [h & t]]\n   (lazy-seq (cons a (when h (r f (f a h) t))))))","user":"505106fee4b05ab4c7e07d38"},{"problem":60,"code":"(fn rd\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (rd f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (rd f (f init (first s)) (rest s)))))))","user":"563ed73ae4b08d4f616f5ecb"},{"code":"(fn [f & args-coll]\n  (letfn [(reductions- [args rst]\n            (if (empty? rst)\n                ()\n                (let [current-args (conj args (first rst))]\n                  (lazy-seq (cons (apply f current-args)\n                                  (reductions- current-args (rest rst)))))))]\n    (let [initial-args (butlast args-coll)\n          reductions-seq (reductions- (vec initial-args) (last args-coll))]\n      (if initial-args\n          (concat initial-args reductions-seq)\n          reductions-seq))))","problem":60,"user":"4e7c8fd1535db169f9c796be"},{"problem":60,"code":"(\n fn red! ([f c] (red! f (first c) (rest c)))\n         ([f i [h & r :as orj]] (cons i (lazy-seq (if (seq orj) (red! f (f i h) r) )) ) )\n)","user":"532018efe4b08068f379edcd"},{"problem":60,"code":"(fn reductions'\n  ([f coll]\n   (reductions' f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (reductions' f (f init (first s)) (rest s)))))))","user":"5b602a66e4b0c6492753e6fc"},{"code":"(fn myreductions\n    ([f x xs]\n       (cons x\n             (if (empty? xs) nil\n                 (lazy-seq\n                  (myreductions f (f x (first xs)) (rest xs))))))\n    ([f xs] (myreductions f (first xs) (rest xs))))","problem":60,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"(fn myred\n  ([f seq] (myred f (first seq) (rest seq)))\n  ([f seed seq]\n     (if (empty? seq)\n       (cons seed seq)\n       (lazy-seq\n        (cons\n         seed\n         (myred f (f seed (first seq)) (rest seq)))))))","problem":60,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"code":"(fn f\n  ([_f [fst & res]] (f _f fst res))\n  ([_f init [fst & res]]  (cons init (if fst (lazy-seq (f _f (_f init fst) res))))))","problem":60,"user":"4e79a143535db169f9c796a2"},{"problem":60,"code":"(fn my-reductions ([a b] (my-reductions a (first b) (rest b))) ([a b c]\n(if (empty? c) (conj c b) (lazy-seq (cons b (my-reductions a (a b (first c)) (rest c) ))))))","user":"6076adb2e4b069485764de60"},{"problem":60,"code":"(fn myreduction \n  ([x y]    (myreduction x (first y) (rest y)))\n  ([x y z]  (if (empty? z) (vector y) (cons  y (lazy-seq (myreduction x (x y (first z)) (rest z))) )))  )","user":"5576e78de4b05c286339e075"},{"problem":60,"code":"(fn my-reductions\n  ([f iv s]\n   (if (not-empty s)\n     (cons iv (lazy-seq (my-reductions f (f iv (first s)) (rest s))))\n     (list iv)))\n  ([f s]\n   (my-reductions f (first s) (rest s))))","user":"53b952eee4b047364c0444e6"},{"problem":60,"code":"(fn redsa\n    ([f a] (redsa f (first a) (rest a)))\n    ([f a s]\n        (lazy-seq\n          (cons a\n            (when-let [ss (seq s)] \n              (redsa f (f a (first ss)) (rest ss)))))))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":60,"code":"(fn kk \n  ([op input] (kk op (first input) (rest input)))\n  ([op result input] \n   (lazy-seq\n    (if (empty? input)\n      (list result)\n      (cons result (kk \n                    op\n                    (op result (first input))\n                    (rest input)))))))","user":"5632d1b3e4b0bfe05bf117a9"},{"problem":60,"code":"(fn myreduce\n  ([f coll]\n   (when-let [s (seq coll)]\n     (myreduce f (first s) (rest s))))\n  ([f v coll]\n   (lazy-seq (cons v (when-let [s (seq coll)]\n                       (myreduce f (f v (first s)) (rest s)))))))","user":"5ab490f4e4b073f17744261d"},{"code":"(fn red\n  ([f coll]\n    (red f (first coll) (rest coll)))\n  ([f i coll]\n      (lazy-seq\n        (cons i\n          (when (not-empty coll)\n            (red f (f i (first coll)) (rest coll)))))))","problem":60,"user":"4fe8a3bde4b07c9f6fd12c61"},{"code":"(fn f \n  ([g coll]\n   (f g (first coll) (rest coll)))\n  ([g init coll]\n   (cons init \n         (lazy-seq \n           (when-let [s (seq coll)]\n             (f g (g init (first s)) (rest s)))))))","problem":60,"user":"50aa60bee4b056ee01935865"},{"problem":60,"code":"(fn iter\n  ([f coll] (iter f (first coll) (rest coll)))\n  ([f value coll] \n   (if (empty? coll)\n     [value]\n     (cons value (lazy-seq (iter f (f value (first coll)) (rest coll)))))))","user":"558378dce4b05c286339e115"},{"problem":60,"code":"(fn reductions'\n  ([f [head & tail]] (reductions' f (f head) tail))\n  ([f coll [head & tail]]\n   (lazy-seq (cons coll (if (seq tail)\n                       (reductions' f (f coll head) tail)\n                       [(f coll head)])))))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":60,"code":"(fn eh [f & x]\n  (letfn [(helper [f lst acc]\n            (cond\n             (empty? lst) [acc]\n             :else (cons acc (lazy-seq (helper f (rest lst) (f acc (first lst)))))))]\n    (if (= 2 (count x))\n      (helper f (second x) (first x))\n      (helper f (rest (first x)) (first (first x))))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":60,"code":"(fn r \n  ([func init sq]\n   (lazy-seq\n    (cons init\n          (when-let [s (seq sq)]\n            (r func \n               (func init (first s))\n               (rest s))))))\n  ([func sq]\n   (r func (first sq) (rest sq))))","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn reds \n  ([f xs]\n   (reds f (first xs) (rest xs)))\n  ([f init xs]\n   (cons init (when (seq xs) (lazy-seq (reds f (f init (first xs)) (rest xs)))))))","problem":60,"user":"51281b25e4b03a34742b4304"},{"problem":60,"code":"(fn func\n   ([f lst] (func f (first lst) (rest lst)))\n   ([f st lst] (if (empty? lst)\n                 [st]\n                 (lazy-seq (cons st (func f (f st (first lst)) (rest lst)))))))","user":"5c62979fe4b0fca0c162264c"},{"problem":60,"code":"; cheated, want to see an answer \n\n(fn p-60-lazy\n \n  ([a-plus b-coll] (p-60-lazy a-plus (first b-coll) (rest b-coll)))\n \n  ([a-plus c-result b-coll]\n \n  (lazy-seq\n    (if (empty? b-coll) (list c-result)\n      (cons c-result\n            (p-60-lazy a-plus\n                 (a-plus c-result (first b-coll))\n                 (rest b-coll)))))))","user":"5bfc9037e4b0bdcf453d15f2"},{"problem":60,"code":";; reductions\n(fn rds\n    ;; cons first item out of collection, use as value.\n\t([f c]   (cons (first c) (rds f (first c) (rest c) nil)))\n    ;; cons value, pass to main body expr\n\t([f v c] (cons v (rds f v c nil)))\n    ;; let i be initial where any value indicates we cons'd an initial value.\n\t([f v c i]\n\t\t(lazy-seq\n\t\t\t(when (seq c)\n\t\t\t\t(let [r (apply reduce [f v [(first c)]])]\n\t\t\t\t\t(cons r (rds f r (rest c) nil)))))))","user":"5578f292e4b05c286339e08f"},{"problem":60,"code":"(fn my_reductions\n  ([f a l]\n   (if l\n     (lazy-seq (cons a\n                     (my_reductions f (f a (first l)) (next l))))\n     `(~a)))\n  ([f l]\n   (my_reductions f (first l) (next l))))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn redux\n  ([f xs] (redux f (first xs) (rest xs)))\n  ([f init xs]\n   (cons init\n         (if (empty? xs) nil\n           (lazy-seq\n               (let [nextinit (f init (first xs))]\n                 (redux f nextinit (rest xs))))))))","problem":60,"user":"510acd6ee4b078ea719210f4"},{"problem":60,"code":"(fn seqred \n\t\t([op xs] (seqred op (first xs) (rest xs)))\n\t\t([op acc xs ] \n\t\t\t(lazy-seq \n\t\t\t\t(if (empty? xs)\n\t\t\t\t\t(cons acc '())\n\t\t\t\t\t(cons acc (seqred op (op acc (first xs) ) (rest xs) ))\t\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)","user":"55d7312ee4b0e31453f64a9f"},{"problem":60,"code":"(fn reductions-home-made\n  ([f coll]\n   (reductions-home-made f (first coll) (rest coll)))\n  ([f tail coll]\n   (lazy-seq\n    (if (empty? coll)\n      [tail]\n      (cons \n       tail \n       (reductions-home-made f (f tail (first coll)) (rest coll)))))))","user":"5ed52854e4b016b56eae05d2"},{"code":"(fn my-reduce\n           ([f col]\n              (my-reduce f (first col) (rest col)))\n           ([f val col]\n              (if (empty? col)\n                [val]\n                (cons val\n                      (lazy-seq\n                       (my-reduce f (f val (first col)) (rest col)))))))","problem":60,"user":"51105c7fe4b04c71fce993ef"},{"problem":60,"code":"(fn abc\n  ([f coll]          \n     (if (seq coll)\n       (abc f (first coll) (rest coll))\n       (list (f))))\n       \n  ([f val coll]\n   (letfn [(r [a coll]\n             (lazy-seq\n               (if (seq coll)\n                 (let [fst (first coll)\n                       a' (f a fst)]\n                   (cons a (r a' (rest coll))))\n                 (list a))))]\n     \n     (if (seq coll)\n       (r val coll)\n       (list val))))\n\n)","user":"5dc12b0ae4b0e59a23173d84"},{"code":"(fn aa [x & args] \n  (if (> (count args) 1)\n\n    (reduce #(conj %1 (x (last %1) %2)) [(first args)] (second args))\n \n    (reduce #(conj %1 (x (last %1) %2)) [(ffirst args)] (take 100 (rest (first args))) )\n            )\n            )","problem":60,"user":"5105ed16e4b01150e115ebe2"},{"code":"(fn lazyreduce \n  ([f coll]\n   (lazyreduce f (first coll) (rest coll)))\n  ([f start coll]\n   (cons start\n     (lazy-seq\n       (when-let [s (seq coll)]\n           (lazyreduce f (f start (first s)) (rest s)))))))","problem":60,"user":"52dad8bde4b09f7907dd13be"},{"problem":60,"code":"(fn r\n  ([f s]\n    (r f (first s) (rest s)))\n  ([f i s]\n    (cons i\n      (lazy-seq\n        (if (not (empty? s))\n          (r f\n             (f i (first s))\n             (rest s)))))))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":60,"code":"(fn rdns ([f coll] (rdns f (first coll) (rest coll))) ([f init coll] (lazy-seq (if (empty? coll) (list init) (cons init (rdns f (f init (first coll)) (rest coll)))))))","user":"5646dff3e4b0284900eef615"},{"problem":60,"code":"(fn seqred\n\t([oper s](seqred oper (first s) (rest s)))\n\t([oper felem s](lazy-seq\n\t\t(if-let [s (seq s)]\n\t\t(cons felem (seqred oper (oper felem (first s)) (rest s))) (vector felem)))))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn reds\n  ([func xs]\n     (reds func (first xs) (rest xs)))\n  ([func init xs]\n     (cons init\n           (when (seq xs)\n             (lazy-seq (reds func (func init (first xs)) (rest xs)))))))","problem":60,"user":"4f21838fe4b0d66497709fd2"},{"problem":60,"code":"(fn reductions2\n  ([f init-value xs]\n   (lazy-seq\n    (if (seq xs)\n      (let [y (f init-value (first xs)) ]\n        (cons init-value (reductions2 f y (rest xs))))\n      [init-value])))\n  ([f xs]\n   (reductions2 f (first xs) (rest xs))))","user":"54f86b8ce4b01ecee9d88828"},{"problem":60,"code":"(fn reduc\n  ([f xs] (reduc f (first xs) (rest xs)))\n  ([f x xs]\n    (if (seq xs)\n      (lazy-seq\n        (cons x\n              (reduc f (f x (first xs)) (rest xs))))\n      [x])))","user":"5b2a559be4b063e2438bcc74"},{"problem":60,"code":"(fn my-reductions\n  ([op v col]\n   (lazy-seq\n    (cons v\n          (if (first col)\n            (my-reductions op (op v (first col)) (next col))))))\n  ([op col]\n   (my-reductions op (first col) (rest col))))","user":"569dd6e8e4b0542e1f8d1480"},{"code":"(fn redux\n    ([f coll]\n       (if (seq coll)\n         (redux f (first coll) (rest coll))\n         )\n     )\n    ([f init coll]\n      (cons init\n            (lazy-seq\n             (when (seq coll)\n               (redux f (f init (first coll)) (rest coll))\n               )\n             )\n            )\n     )\n    )","problem":60,"user":"52e59ca5e4b09f7907dd1464"},{"code":"(fn r\n  ([f coll]\n    (let [h (first coll)\n          t (rest coll)]\n      (cond\n        (nil? h) (f)\n        (empty? t) h\n        :else (r f h t))))\n  ([f val coll]\n    (lazy-seq\n      (if (empty? coll)\n        [val]\n        (cons val (r f (f val (first coll)) (rest coll)))))))","problem":60,"user":"4eb5750a535d7eef30807366"},{"problem":60,"code":"(fn reds\n  ([f sq]\n   (reds + (first sq) (rest sq)))\n  ([f x sq]\n   (if (empty? sq)\n     (repeat 1 x)\n     (cons x (lazy-seq (reds f (f x (first sq)) (rest sq)))))))","user":"559d33b3e4b0ec2b359424d9"},{"problem":60,"code":"(fn r\n  ([f [a b & c]]\n    (if (= b nil) [a]\n      (cons a (lazy-seq (r f (cons (f a b) c))))))\n  ([f i c] (r f (cons i c))))","user":"53500869e4b084c2834f4ad3"},{"code":"(new clojure.core$reductions)","problem":60,"user":"4e3b6bff535deb9a81d77f52"},{"problem":60,"code":"(fn myred\n  ([f coll]\n   (when (not (empty? coll))\n     (myred f (first coll) (rest coll))))\n  ([f val coll]\n   (if (not (empty? coll))\n     (cons val (lazy-seq (myred f (f val (first coll)) (rest coll))))\n     (list val))))","user":"541d3c0fe4b01498b1a71a7e"},{"code":"(fn reds\n  ([f   [h & t]] (reds f h t))  \n  ([f i [h & t]]\n   (if-not h\n     [i]\n     (lazy-cat [i]\n               (reds f (f i h) t)))))","problem":60,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":60,"code":"(fn reductions*\n  ([f init [h & t :as xs]]\n   (lazy-seq\n    (cons init (if xs (reductions* f (f init h) t) nil))))\n  ([f [h & t]] (reductions* f h t)))","user":"5eee7311e4b07c55ae4a0510"},{"problem":60,"code":"(fn reduce1\n  ([f coll]\n      (let [[x y & xs] coll]\n           (if y (cons x (lazy-seq (reduce1 f (cons (f x y) xs)))) [x])))\n  ([f init coll]\n      (reduce1 f (cons init coll))))","user":"58ffaddee4b0438e51c2cffe"},{"problem":60,"code":"(fn reduct-s\n  ([f coll]\n   (reduct-s f (first coll) (next coll)))\n  ([f init coll]\n   (if (nil? coll)\n     (list init)\n     (lazy-seq (cons init (reduct-s f (f init (first coll)) (next coll)))))))","user":"5aa4f7dae4b0d174b936c88c"},{"problem":60,"code":"(fn ([f coll] (loop [coll coll, res (vector (nth coll 0)), i 0]\n                                     (if (= 6 i)\n                                       (rest res)\n                                       (recur (rest coll) (conj res (f (nth res (- (count res) 1)) (nth coll 0))) (inc i))\n                                       )\n                                     )\n                          )\n                       ([f init coll] (loop [coll coll, res (vector init)]\n                                        (if (empty? coll)\n                                          (sort res)\n                                          (recur (drop-last coll) (conj res (reduce f init coll)))\n                                          )\n                                        )\n                        )\n                       )","user":"5cf72682e4b0b71b1d808a68"},{"problem":60,"code":"(fn reducts7\n  ([f coll] (reducts7 f nil coll))\n  ([f init coll]\n   (letfn [(inner [last-result remaining-coll]\n                  (if (seq remaining-coll)\n                    (let [cur-result (f last-result (first remaining-coll))]\n                      (cons cur-result (lazy-seq (inner cur-result\n                                                        (next remaining-coll)))))\n                    nil))]\n     (if (nil? init)\n       (inner (f) coll)\n       (cons init (inner init coll))))\n   )\n  )","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":60,"code":"(fn __\n   ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (__ f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (if (> (count (list init)) 1)\n       (list @init)\n       (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (__ f (f init (first s)) (rest s))))))))","user":"50e1bdd8e4b019fc399ce17f"},{"code":"(fn foo\n  ([f s] (foo f (first s) (next s)))\n  ([f v s]\n    (if s\n      (cons v (lazy-seq (foo f (f v (first s)) (next s))))\n      (list v))))","problem":60,"user":"4dbdc9da535d020aff1edf4c"},{"problem":60,"code":"(fn reduc\n  ([f coll] \n   (lazy-seq \n    (if-let [s (seq coll)] \n      (reduc f (first s) (rest s)) (list (f))))) \n  ([f init coll] \n     (cons init (lazy-seq (when-let [s (seq coll)] \n                            (reduc f (f init (first s)) (rest s)))))))","user":"57750460e4b0979f8965160c"},{"code":"(fn redc\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (redc f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (redc f (f init (first s)) (rest s)))))))","problem":60,"user":"4ef992c8535dced4c769f268"},{"code":"(fn sequence-reductions \n  ([f coll] \n     (if-let [s (seq coll)]\n       (sequence-reductions f (f (first s)) (rest s))\n       (list (f))))\n  ([f init coll]\n     (cons init \n           (lazy-seq \n            (when-let [s (seq coll)]\n              (sequence-reductions f (f init (first s)) (rest s)))))))","problem":60,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":60,"code":"(fn p60\n  ([f xs] (p60 f (first xs) (rest xs))) ;no start-value? take first and call function again\n  ([f v xs]                                                      \n    (lazy-seq \n      (cons v                           ;add new value\n        (if (empty? xs)                 ;at end of sequence return []\n          [] \n          (p60 f (f v (first xs)) (rest xs))))))) ;(p60 + (+ 1 2) (3 4 5))","user":"57e139f6e4b0bfb2137f5a6c"},{"problem":60,"code":"(fn reductionz\n  ( [func xs] (reductionz func (first xs) (rest xs)))\n  ( [func x xs]\n   (cons x\n         (if (first xs)\n           (lazy-seq (reductionz func (func x (first xs)) (rest xs)))\n           (empty xs)\n           ))))","user":"525b4e8de4b0cb4875a45d0f"},{"problem":60,"code":"(fn r \n    ([f v] \n     (r f (first v) (rest v)))\n    ([f v c]\n     (if (empty? c)\n       (list v)\n       (lazy-seq (cons v (r f (f v (first c)) (rest c)))))))","user":"4e8a170c535d3e98b802328f"},{"problem":60,"code":"(fn rdctions\n  ([fnc coll]\n   (rdctions fnc (first coll) (rest coll)))\n  ([fnc acc coll]\n   (cons acc\n         (lazy-seq\n           (when (seq coll)\n             (rdctions\n               fnc\n               (fnc acc (first coll))\n               (rest coll)))))))","user":"60436423e4b02d28681c77a3"},{"problem":60,"code":"(fn solution\n  ([f coll] (solution f (first coll) (rest coll)))\n  ([f val coll]\n   (if (empty? coll)\n     [val]\n     (lazy-seq (cons val (solution f (f val (first coll)) (rest coll)))))))","user":"5e2ef900e4b05b4b015161fc"},{"problem":60,"code":"(fn r\n  ([f coll] (r f (first coll) (rest coll)))  \n  ([f init coll]\n    (let [in coll, out [init]]\n      (if (empty? in)\n        out\n        (lazy-cat out (r f (f (last out) (first in)) (rest in)))))))","user":"559454f2e4b0c79f6e1db952"},{"problem":60,"code":"(fn myreduce\n           ([f coll]\n            (lazy-seq (let [elem (f (first coll) (second coll))]\n                        (cons (first coll)\n                              (myreduce f (cons elem (drop 2 coll)))))))\n           ([f init coll]\n            (loop [coll1 coll\n                   res [init]]\n              (if (empty? coll1)\n                res\n                (recur (rest coll1)\n                       (conj res (f (last res) (first coll1))))))))","user":"56372c3ce4b0bfe05bf117d1"},{"problem":60,"code":"(fn my-reductions\n   ([f coll]\n    (my-reductions f (f (first coll)) (rest coll)))\n   ([f init coll]\n    (cons init (lazy-seq\n                (if (not (empty? coll))\n                  (my-reductions f (f init (first coll)) (rest coll)))))))","user":"5d8c8175e4b0915913b1d3e1"},{"code":"(fn rrr\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (rrr f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (rrr f (f init (first s)) (rest s)))))))","problem":60,"user":"50361b6be4b0fbe0a74d26be"},{"code":"(fn reds\n                  ([f coll]\n                     (lazy-seq\n                      (if (seq coll)\n                        (reds f (first coll) (rest coll))\n                        (list (f)))))\n                  ([f val coll]\n                     (cons val\n                           (lazy-seq\n                            (when (seq coll)\n                              (reds f (f val (first coll)) (rest coll)))))))","problem":60,"user":"4ed0e139535d44c135fd68c7"},{"code":"(fn redu\n  ([f s] (redu f (first s) (rest s)))\n  ([f r s] (if-let [i (first s)]\n               (cons \n                \tr\n                \t(lazy-seq (redu f (f r i) (rest s))))\n               (list r)\n            )))","problem":60,"user":"526a3412e4b03e8d9a4a721e"},{"code":"(fn reduxions\n          ([op prev s]\n             (lazy-seq\n              (if (seq s)\n                (cons prev (reduxions op (op prev (first s)) (rest s)))\n                [prev])))\n          ([op s]\n             (reduxions op (op (first s)) (rest s))))","problem":60,"user":"52c4fe42e4b0c2d177d620e9"},{"problem":60,"code":"(letfn [(my-reduction [op acc coll]\n                      (lazy-seq\n                        (if (empty? coll)\n                          (cons acc nil)\n                          (cons acc \n                                (my-reduction op \n                                              (op acc (first coll))\n                                              (rest coll))))))]\n  (fn \n    ([op coll] (my-reduction op (first coll) (rest coll)))\n    ([op init-value coll] (my-reduction op init-value coll))))","user":"59225498e4b09b4ee5954c8c"},{"code":"(let [reduck (fn reduck\n               [f start s]\n               (if (seq s)\n                   (let [v (f start (first s))]\n                     (cons v (lazy-seq (reduck f v (rest s)))))\n                 []))]\n  (fn\n    ([f s]\n     (let [start (first s)]\n       (cons start (reduck f start (rest s)))))\n    ([f start s]\n     (cons start (reduck f start s)))))","problem":60,"user":"511b233ae4b07ab9ec456180"},{"code":"(fn redctn\n  ([op x]\n    (redctn op (first x) (rest x)))\n  ([op x y]\n    (if (not (empty? y))\n      (cons x (lazy-seq (redctn op (op x (first y)) (rest y))))\n      (list x))))","problem":60,"user":"515a6151e4b0394f658fe241"},{"code":"(fn my-reductions\n  ([f allvals] (my-reductions f (first allvals) (rest allvals)))\n  ([f startval allvals]\n    (if (not (empty? allvals))\n      (lazy-seq\n        (cons startval (my-reductions f (f startval (first allvals)) (rest allvals))))\n      (list startval))))","problem":60,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn rd\n    ([f c]\n       (if c\n         (rd f (first c) (rest c))))\n    ([f i c]\n        (cons i\n           (lazy-seq\n            (when-let [s (seq c)]\n              (rd f (f i (first s)) (rest s)))))))","problem":60,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":60,"code":"(fn r\n  ([f xs]\n    (r f (first xs) (rest xs)))\n  ([f i xs]\n    (cons i\n      (lazy-seq\n        (when (seq xs)\n          (r f (f i (first xs))\n               (rest xs)))))))","user":"594880ade4b07ddc2dafadc2"},{"code":"(fn scan\n  ([f c]\n    (scan f (first c) (rest c)))\n  ([f init c]\n    (if (empty? c)\n      [init]\n      (cons\n        init\n        (lazy-seq (scan f (f init (first c)) (rest c)))))))","problem":60,"user":"4fb1325de4b081705acca276"},{"code":"(fn d\n    ([f c] (d f (first c) (rest c)))\n    ([f val c] \n     (cons val\n           (lazy-seq\n            (when-let [s (seq c)]\n              (d f (f val (first s)) (rest s)))))))","problem":60,"user":"52e3e6a8e4b09f7907dd1448"},{"problem":60,"code":"(fn f\n  ([func coll]\n   (when-let [coll (seq coll)]\n     (f func (first coll) (rest coll))))\n  ([func acc coll]\n   (if-let [coll (seq coll)]\n     (let [nacc (func acc (first coll))]\n       (cons acc (lazy-seq (f func nacc (rest coll)))))\n     (list acc))))","user":"5bc39d2be4b07a9b28b10045"},{"code":"(fn reduce-iterate\n  ([f coll]\n     (reduce-iterate f (first coll) (rest coll)))\n  ([f x0 coll]\n     (map first\n          (take-while\n           identity\n           (iterate\n            (fn [[x coll]]\n              (when (not-empty coll)\n                [(f x (first coll)) (rest coll)]))\n            [x0 coll])))))","problem":60,"user":"4e31a15c535deb9a81d77f1e"},{"code":"(fn r\n  ([f lst] (r f (first lst) (rest lst)))\n  ([f init lst] (if (empty? lst) \n                  [init]\n                  (cons init (lazy-seq (r f (f init (first lst)) (rest lst)))))))","problem":60,"user":"4e9a1512535dbda64a6f6b6e"},{"problem":60,"code":"(fn f-reduce\n  ([op input] (f-reduce op (op (first input)) (rest input)))\n  ([op init input]\n   (lazy-seq\n    (if (empty? input)\n      (list init)\n      (cons init (f-reduce op (op init (first input)) (rest input)))\n      ))))","user":"56f974c0e4b07572ad1a88b1"},{"code":"(fn mid-values \n  ([f coll] (mid-values f (first coll) (rest coll)))\n  ([f n coll] \n   (if (empty? coll) \n     [n]\n  \t (cons n (lazy-seq (mid-values f (apply f (conj [n] (first coll))) (rest coll)))))))","problem":60,"user":"514721c6e4b0d520409ed392"},{"code":"(fn rd ([f coll]\n  (lazy-seq\n    (if-let [s (seq coll)]\n      (rd f (first s) (rest s))\n      (list (f)))))\n       ([f init coll]\n  (cons init\n    (lazy-seq\n      (when-let [s (seq coll)]\n        (rd f (f init (first s)) (rest s)))))))","problem":60,"user":"512474ede4b02c3f2a072cce"},{"code":"(fn reductions-prime\n  ([f coll]\n     (if-let [s (seq coll)]\n       (reductions-prime f (first s) (next s))\n       (f)))\n  ([f val coll]\n     (if-let [x (first coll)]\n       (lazy-seq\n        (cons val (reductions-prime f (f val x) (rest coll))))\n       [val])))","problem":60,"user":"4e7f51eb535db966e863cc3f"},{"code":"(fn my-reduce\r\n    ([function i-list]\r\n        (my-reduce\r\n            function\r\n            (first i-list)\r\n            (lazy-seq (rest i-list))))\r\n    ([function initial i-list]\r\n        (map\r\n            #(if (= 1 (count %)) initial (apply function %))\r\n            (map\r\n                (fn [n]\r\n                    (concat (vector initial) (take n i-list)))\r\n                (if (= (type i-list) clojure.lang.LazySeq) (range) (range (inc (count i-list))))))))","problem":60,"user":"4dddf817535d08e6dec9fdd3"},{"problem":60,"code":"(fn f\n   ([g v] (f g (first v) (rest v)))\n   ([g i v] (if (empty? v) (vector i) (cons i (lazy-seq (f g (g i (first v)) (rest v)))) ))\n   )","user":"551c66dae4b07993ea3788de"},{"problem":60,"code":"(fn green ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (green f (first s) (rest s))\n       (list (f))\n       )\n     ))\n  ([f init coll]\n   (cons init (lazy-seq\n                (if-let [s (seq coll)]\n                  (green f (f init (first s)) (rest s) )\n                  )\n                ))))","user":"5ed8a12fe4b0c7845d86b0d7"},{"problem":60,"code":"(fn red\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (red f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (red f (f init (first s)) (rest s)))))))","user":"5e08c3dde4b0978307768fc8"},{"problem":60,"code":"(fn fun [f & cols]\n  (let [init (if (= (count cols) 2) (first cols) (ffirst cols))\n        col (last cols)]\n    (cons init\n      (lazy-seq\n          (when (not (empty? col))\n            (if (= (count cols) 2) \n                (fun f (f init (first col)) (drop 1 col)) \n                (fun f (f init (second col)) (drop 2 col))    \n            )\n          )\n      )\n    )\n  )\n)","user":"5da20e73e4b000c986472be1"},{"problem":60,"code":"(fn laazzyReductions \n\t([f initial pend] (laazzyReductions f (cons initial pend)))\n\t([f pend] \n\t((fn myReductions[n f pend]\n\t\t(if (not (empty? pend))\n\t\t\t(lazy-seq \n\t\t\t\t(cons n (myReductions (apply f [n (first pend)]) f (rest pend))))\n\t\t\t[n])) (first pend) f (rest pend))))","user":"57986b76e4b039eba2ecb116"},{"problem":60,"code":"(fn reductions*\n  ([f xs] (reductions* f (first xs) (next xs)))\n  ([f val xs]\n   (let [to-take (iterate inc 0)]\n     (map\n      (fn [x y] (reduce f val (take x xs)))\n      to-take (cons val xs)))))","user":"555f3bfde4b0a2eb076a39c1"},{"problem":60,"code":"(letfn [(c ([f s] (let [a (first s)] (c f a (rest s))))\n           ([f a s]\n            (letfn [(r [a s]\n                      (if (seq s) (lazy-seq\n                                    (let [a (f a (first s))]\n                                      (cons a (r a (rest s)))))))]\n              (cons a (r a s)))))]\n  c)","user":"54f0d3fde4b024c67c0cf8a6"},{"code":"(fn reds\n  ([f [val & coll]] (reds f val coll))\n  ([f val [fst & rst]]\n    (cons val\n       (lazy-seq\n          (if fst\n            (reds f (f val fst) rst))))))","problem":60,"user":"4fe88f78e4b07c9f6fd12c45"},{"code":"(fn r\n  ([f a0 c] (r f (cons a0 c)))\n  ([f [a v & vr]] (\n  lazy-seq(\n    let [an (f a v)] (\n    if (empty? vr) \n      [a an]\n      (cons a (r f (cons an vr)))\n  ))) \n))","problem":60,"user":"4e7f4147535db966e863cc3d"},{"problem":60,"code":"(fn myreductions_lazy\n  ([f s] (myreductions_lazy f (first s) (rest s)))\n  ([f latest-val s]\n    (lazy-seq\n      (if (empty? s) \n        (list latest-val)\n        (cons latest-val (myreductions_lazy f (f latest-val (first s)) (rest s)))\n      )\n    )\n  )\n)","user":"5710140fe4b09c608db7042e"},{"code":"(fn my-reductions \n  ([fun col] \n    (my-reductions fun (first col) (rest col))) \n  ([fun val col] \n    (cons \n      val \n      (lazy-seq \n        (when (seq col) \n          (my-reductions fun (fun val (first col)) (rest col)))))))","problem":60,"user":"500aa15ee4b03d00572d2d76"},{"code":"(fn r\n    ([f xs] (r f (first xs) (rest xs)))\n    ([f d xs]\n       (if xs (cons d (lazy-seq (r f (f d (first xs)) (next xs)))) (cons d []))))","problem":60,"user":"52a32876e4b04e0c58e87bfb"},{"problem":60,"code":"(fn r\n  ([f [i & s]] (r f i s))\n  ([f i [x & s :as a]]\n   (if a\n     (cons i (lazy-seq (r f (f i x) s)))\n     [i])))","user":"588fbb39e4b00487982d51bd"},{"problem":60,"code":"(fn my-reduction\n  ([f coll]\n    (my-reduction f (first coll) (next coll)))\n  ([f init [h & t :as coll]]\n    (cons init\n      (lazy-seq\n        (if (seq coll)\n          (my-reduction f (f init h) t))))))","user":"56dc483fe4b0ea9b8538f81b"},{"code":"(fn r\n  ([f c]\n     (r f (first c) (rest c)))\n  ([f i c]\n     (lazy-seq\n      (cons i\n            (if-let [c (seq c)]\n              (r f (f i (first c)) (next c)))))))","problem":60,"user":"500d8c49e4b07ccb9a7ddb00"},{"problem":60,"code":"(fn reds [f arg2 & [arg3 notfirst]]\n  (let [coll (if arg3 arg3 arg2)\n        value (if arg3 arg2 (first coll))]\n    (if (empty? coll)\n      nil\n      (let [v (f value ((if arg3 first second) coll))]\n        (if (not notfirst)\n          (cons value\n                (cons v (lazy-seq (reds f\n                                        v\n                                        ((if arg3 rest #(drop 2 %))\n                                         (if arg3 arg3 arg2))\n                                        true))))\n          (cons v (lazy-seq (reds f\n                                  v\n                                  ((if arg3 rest #(drop 2 %))\n                                   (if arg3 arg3 arg2))\n                                  true))))))))","user":"54084784e4b0addc1aec66c9"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (next coll)))\n  ([f arg coll]\n   (cons arg\n         (when coll\n           (lazy-seq (my-reductions f (f arg (first coll)) (next coll)))))))","user":"5712854ce4b07c98581c3a89"},{"problem":60,"code":"(fn reductions'\n  ([f coll] (reductions' f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n                   (reductions' f (f init (first s)) (rest s)))))))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":60,"code":"(fn redux\n  ([f c] (redux f (first c) (rest c)))\n  ([f s c] (let [se (partition 2 (interleave (repeat c) (if (< (count (take 100 c)) 100) (range (inc (count c))) (range))))]\n             (map (fn [[c n]] (reduce f s (take n c))) se))))","user":"4e41a04e535dc968683fc49e"},{"code":"(fn redus\n  ([f coll] (redus f (first coll) (rest coll)))\n  ([f init coll]\n  (cons init (lazy-seq\n    (when-let [s (seq coll)]\n      (redus f (f init (first s)) (rest s)))))))","problem":60,"user":"4dcfbc44535d5973398f92a7"},{"code":"(fn myreductions\n  ([f coll]\n    (myreductions f (first coll) (rest coll)))\n  ([f init coll]\n    (if (seq coll)\n      (cons init (lazy-seq (myreductions f (f init (first coll)) (rest coll))))\n      [init])))","problem":60,"user":"50982769e4b04e098a4c726a"},{"problem":60,"code":"(fn my-reduce\n    ([f coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (my-reduce f (first s) (rest s)))))\n    ([f val coll]\n     (cons\n       val\n       (lazy-seq\n         (when-let [s (seq coll)]\n           (my-reduce f (f val (first s)) (rest s)))))))","user":"54ca130ce4b057c6fda3a250"},{"problem":60,"code":"(fn a ([f x xs] (lazy-seq (if-let [t (first xs)] (cons x (a f (f x t) (rest xs))) [x]))) ([f xs] (a f (first xs) (next xs))))","user":"5507cfd3e4b021ccfedb96ad"},{"code":"(fn rdc \n  ([f init coll] (if (empty? coll) init (rdc f (cons init coll)) ))\n  ([f coll] (let [rdc-rec (fn rc [f s c] (if (empty? s) nil \n                                       (let [v (f c (first s))] (lazy-seq (cons v (rc f (next s) v) )))) )\n                  [fst snd & r] coll] (cond (and (nil? fst) (nil? snd)) (cons (f) nil) (nil? snd) (cons fst nil) \n                                            :else (let [v (f fst snd)] \n                                                       (cons fst (cons v (rdc-rec f r v )))  ) )  ) )\n \n )","problem":60,"user":"51729002e4b044b2ef48a850"},{"code":"(fn reducs \n  ([f c] (reducs f (first c) (rest c)))\n  ([f i c] \n   (if (empty? c)\n     (list i)\n     (cons i (lazy-seq (reducs f (f i (first c)) (rest c)))))))","problem":60,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"(fn l ([f e s] (lazy-seq (cons e (if (next s) (l f (f e (first s)) (rest s)) [(f e (first s))])))) \n  ([f s] (l f (first s) (rest s))))","problem":60,"user":"51b90b88e4b050a1176cd6a2"},{"code":"(fn my-reduction\n  ([f coll]\n     (my-reduction f (first coll) (rest coll)))\n  ([f val coll]\n     (if (seq coll)\n       (lazy-seq\n        (cons val (my-reduction f (f val (first coll)) (rest coll))))\n       [val])))","problem":60,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"(fn redce [f & r] (let [[v s] (if (= (count r) 2) r [(first (first r)) (rest (first r))])]\n                    (if (empty? s) [v]\n                    \t(lazy-seq (cons v (redce f (f v (first s)) (rest s)))))))","problem":60,"user":"50dfb660e4b061dbdced7228"},{"problem":60,"code":"(fn my-reductions \n  ([func coll] (lazy-seq (my-reductions func (first coll) (drop 1 coll))))\n  ([func result coll] (lazy-seq (if (empty? coll) [result] (cons result (my-reductions func (func result (first coll)) (drop 1 coll)))))))","user":"59837909e4b021a7a535fe16"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] \n   (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     (list init)\n     (lazy-seq\n      (cons init \n            (my-reductions f\n                           (f init (first coll))\n                           (rest coll)))))))","user":"585e2e77e4b0f14aab7c87ac"},{"code":"(fn seq-reds\n  ([f i s]\n     (if-let [s (seq s)]\n       (cons i (lazy-seq (seq-reds f (f i (first s)) (next s))))\n       (list i)))\n  ([f s]\n     (seq-reds f (first s) (rest s))))","problem":60,"user":"4dada426c9a9d6ed2a99dc57"},{"code":"(fn reds\n  ([f init [x & xs]] \n   (cons init (lazy-seq (when x (reds f (f init x) xs))))) \n  ([f coll] \n   (reds f (first coll) (rest coll))))","problem":60,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"(fn my-reductions \n  ([f coll]\n     (my-reductions f (first coll) (rest coll)))\n  ([f initial coll]\n     (lazy-seq\n      (if-let [elem (first coll)]\n        (let [reduction (f initial elem)]\n          (cons initial (my-reductions f reduction (rest coll))))\n        (cons initial nil)))))","problem":60,"user":"51a768e0e4b0da5f497bde84"},{"problem":60,"code":"(fn reds\n  ([f col]\n   (when (seq col)\n     (reds f (first col) (rest col))))\n  ([f val col]\n   (if (seq col)\n     (let [cf      (first col)\n           reduced (f val cf)]\n       (lazy-seq (cons val (reds f reduced (rest col)))))\n     (vector val)\n     )))","user":"5beadeb5e4b0f319e2d7ec88"},{"problem":60,"code":"(fn laz-red \n\t([Fx [s1 & srest :as S]] \n     (laz-red Fx (Fx s1) srest))\n\t([Fx xn-1 [s1 & srest :as S]]\n\t\t\t(cons xn-1 (lazy-seq \n\t\t\t\t(if (seq S) \n\t\t\t\t\t(laz-red Fx (Fx xn-1 s1) srest))))))","user":"564d02cde4b0284900eef679"},{"code":"(fn r\n  ([f z [x & xt :as xs]]\n    (lazy-seq (if (seq xs) (cons z (r f (f z x) xt)) [z])) )\n  ([f [x & xt]] (r f x xt)) )","problem":60,"user":"5014718fe4b094324338f8e3"},{"code":"(fn reds\r\n  ([f coll] (map-indexed (fn [i _] (reduce f (take (inc i) coll))) coll))\r\n  ([f init coll] (map-indexed (fn [i _] (reduce f init (take i coll)))\r\n                              (cons nil coll))))","problem":60,"user":"4dfd4ba8535d04ed9115e781"},{"problem":60,"code":"(fn tmp\n ([f coll] (tmp f (first coll) (rest coll)))\n ([f frst coll] (cons frst (if (nil? (first coll)) [] (lazy-seq (tmp f (f frst (first coll)) (rest coll)))))))","user":"59468de7e4b07ddc2dafad88"},{"problem":60,"code":"(fn my-reduct\n  ([func coll]\n     (my-reduct func (first coll) (rest coll)))\n  \n  ([func firstArg coll]\n    (letfn [(reduct [f init se]\n              (lazy-seq (when-not (empty? se)\n                          (let [res (f init (first se))]\n                            (cons res (reduct f res (rest se)))))))]\n      (lazy-seq (cons firstArg (reduct func firstArg coll))))))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":60,"code":"(fn myfn ([f l] (myfn f (first l) (second l) (rest (rest l))))\n            ([f a l] (myfn f a (first l) (rest l)))\n            \n            ([f a b l] (if (nil? (first l)) (vector a (f a b)) (lazy-seq (cons a (myfn f (f a b) (first l) (rest l))))))\n  \n            )","user":"531902b1e4b08068f379ed77"},{"problem":60,"code":"(fn my-reduce\n  ([op seq] (my-reduce op (first seq) (rest seq)))\n  ([op val seq]\n     (cons val\n           (lazy-seq\n            (if-let [[f & rst] seq]\n              (my-reduce op (op val f) rst))))))","user":"541475afe4b01498b1a719eb"},{"problem":60,"code":"(fn s-reduce\n  ([f xs] (s-reduce f (first xs) (rest xs)))\n  ([f init xs]\n   (lazy-seq\n     (if (empty? xs)\n       [init]\n       (cons init (s-reduce f (f init (first xs)) (rest xs)))))))","user":"5638b88de4b0bfe05bf117e9"},{"code":"(fn fake-reductions [f a1 & a2]\n              (if a2\n                (if (seq (first a2))\n                  (concat\n                   (vector a1)\n                   (lazy-seq (fake-reductions f (f a1 (first (first a2))) (rest (first a2)))))\n                  (vector a1))\n                (lazy-seq (fake-reductions f (first a1) (rest a1)))\n                ))","problem":60,"user":"53838742e4b06839e8705ee0"},{"problem":60,"code":"(fn r\n  ([f [x & y]] (r f x y))\n  ([f i [x & y :as z]]\n   (cons i (lazy-seq (when z (r f (f i x) y)))))\n  )","user":"54d893a4e4b0a52adc2e2039"},{"code":"(fn r ([f c] (r f (first c) (rest c))) ([f i c] (if (empty? c) (cons i nil) (lazy-seq (cons i (r f (f i (first c)) (rest c)))))))","problem":60,"user":"4eb13d60535d7eef3080733f"},{"problem":60,"code":"(fn [f & arg]\n  (if (= 1 (count arg))\n    (loop [x 1 j []]\n      (if (= x 10)\n        j\n        (recur (inc x) (conj j (apply f (take x (first arg)))))))\n    (loop [x 0 j []]\n      (if (> x (count (last arg)))\n        j\n        (recur (inc x) (conj j (reduce f (first arg) (take x (last arg)))))))\n    )\n  )","user":"54bcab07e4b0ed20f4ff6ed5"},{"code":"(fn redux\n           ([fun vals] \n              (lazy-seq (redux fun (first vals) (rest vals))))\n           ([fun primo vals]\n              (if (empty? vals)\n                (cons primo vals)\n                (lazy-seq \n                 (cons primo \n                       (redux fun \n                              (fun primo (first vals)) \n                              (rest vals)))))))","problem":60,"user":"52c81954e4b0c2d177d6212e"},{"problem":60,"code":"(fn r\n  ([f [x & more]]\n   (if (not-empty more)\n     (let [y (f x (first more))] \n       (lazy-seq (cons x (r f (cons y (rest more))))))\n     (list x)))\n  ([f e l]\n   (r f (cons e l))\n   ))","user":"5478e57de4b0c51c1f4d72c1"},{"code":"(fn red\n  ([f i l]\n   (if (seq l)\n     (lazy-seq\n       (cons i (red f (f i (first l)) (rest l))))\n     [i]))\n  \n  ([f l]\n   (red f (first l) (rest l))))","problem":60,"user":"50b1d166e4b03ea880433554"},{"problem":60,"code":"(fn reductions* \n  ([f [x & xs]] (reductions* f x xs))\n  ([f acc [x & xs]] (if (nil? x) \n                      [acc]\n                      (lazy-seq (cons acc (reductions* f (f acc x) xs))))))","user":"5bea3177e4b0f319e2d7ec81"},{"code":"(fn reduct\n  ([f s] (reduct f (first s) (rest s)))\n  ([f val s] \n   (cons val \n    (if-not (empty? s)\n      (lazy-seq (reduct f \n                 (f val (first s)) \n                 (rest s)))))))","problem":60,"user":"50052d38e4b0678c553fc45c"},{"problem":60,"code":"(fn lazyish\n  ([f [x & r]] (lazyish f x r)) \n  ([f init coll]\n   (letfn [(step [prev  [x & r]]\n                 (lazy-seq\n                  (cons prev (when x (step (f prev x) r))))\n                 )]\n     (step init coll))))","user":"5e9154c1e4b0cb0169546354"},{"code":"(fn step-reduce\n  ([f coll]\n     (step-reduce f (first coll) (rest coll)))\n  ([f x coll]\n     (if (seq coll)\n       (let [next-coll (rest coll)\n             next-x (f x (first coll))]\n         (cons x (lazy-seq (step-reduce f next-x next-coll))))\n       (cons x (lazy-seq '())))))","problem":60,"user":"4e3bccb1535deb9a81d77f55"},{"problem":60,"code":"(fn reduce2 \n  ([f xs] (reduce2 f (first xs) (rest xs)))\n  ([f x xs] (if (first xs) (cons x (lazy-seq (reduce2 f (f x (first xs)) (rest xs)))) [x]))\n  \n  )","user":"52824143e4b0757a1b171453"},{"problem":60,"code":"(letfn\n  [(like-reduce\n     ([f c]\n      (if (seq c)\n        (lazy-seq\n          (like-reduce f (first c) (next c)))))\n     ([f a c]\n      (lazy-seq\n        (cons\n          a\n          (if (seq c)\n            (like-reduce f (f a (first c)) (next c)))))))]\n  (fn\n    ([f c]\n     (like-reduce f c))\n    ([f a c]\n     (like-reduce f a c))))","user":"5e53f8e0e4b027a2e10ac0e7"},{"problem":60,"code":"(fn my-reduce \n\t([f coll] (my-reduce f (first coll) (rest coll)))\n\t([f initial-value coll]\n\t\t(if (empty? coll) \n\t\t\t(list initial-value)\n\t\t\t(lazy-seq (cons initial-value \n\t\t\t\t\t    \t(my-reduce f (apply f [initial-value (first coll)]) (rest coll)))))))","user":"57c0917be4b05aa3c4741c95"},{"code":"(fn rds \n  ([f coll] (rds f (first coll) (rest coll)))\n  ([f cur coll] (if (empty? coll) \n    (list cur) \n    (cons \n      cur \n      (lazy-seq \n        (rds \n          f \n          (f cur (first coll)) \n          (rest coll) ))))))","problem":60,"user":"524be8e0e4b09eba1c0223f1"},{"problem":60,"code":"(fn reduce-fn\n  ([f args]\n   (reduce-fn f (first args) (rest args))\n    )\n  ([f init args]\n   (if (empty? args)\n     (lazy-seq [init])\n     (lazy-seq (cons init\n                     (reduce-fn f (f init (first args)) (rest args))))\n     )\n    )\n  )","user":"5708e8f6e4b0b0fb43fd06a4"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (f (f) (first coll)) (rest coll)))\n  ([f val coll]\n   (if (seq coll)\n     (lazy-seq (cons val (my-reductions f (f val (first coll)) (rest coll))))\n     (cons val coll))))","user":"59e8b4ade4b0249b72820734"},{"problem":60,"code":"(fn my-reduce\n    ([f seq]\n     (if (empty? seq)\n       seq\n       (my-reduce f (first seq) (rest seq))))\n    \n    ([f n seq]\n     (if (empty? seq)\n       [n]\n       (let [n2 (f n (first seq))]\n         (cons n (lazy-seq (my-reduce f n2 (rest seq))))))))","user":"4e48b61d535dc968683fc4be"},{"code":"(fn r ([f c]\n     (r f (first c) (rest c)))\n  ([f i c]\n     (cons i\n           (lazy-seq\n            (when-let [s (seq c)]\n              (r f (f i (first s)) (rest s)))))))","problem":60,"user":"4ede8789535d10e5ff6f5337"},{"problem":60,"code":"(fn my-reduction\n  ([f coll]\n    (my-reduction f nil coll))\n  ([f init coll]\n   (if init\n     (cons init (map (partial reduce f init)\n                    (map-indexed (fn [idx item] (take (inc idx) coll)) coll)))\n     (map (partial reduce f)\n          (map-indexed (fn [idx item] (take (inc idx) coll)) coll)))))","user":"5a4d656fe4b05d388ecb6ba9"},{"code":"(fn red\r\n        ([f sq] (red f (first sq) (rest sq)))\r\n        ([f start sq]\r\n          (if (seq sq)\r\n            (cons start (lazy-seq (red f (f start (first sq)) (rest sq))))\r\n            (cons start nil))))","problem":60,"user":"4f82e14be4b033992c121c0c"},{"code":"(fn myred \n  ([f a-seq] (myred f (first a-seq) (rest a-seq)))\n  ([f initial a-seq] \n      (lazy-seq (cons initial\n                      (if (first a-seq)\n                      (myred f (f initial (first a-seq)) (rest a-seq))\n)))))","problem":60,"user":"4e6dc95a535d5021c1a895f1"},{"code":"(fn reductions'\n  ([f coll]\n     (lazy-seq\n      (if-let [[x & more] (seq coll)]\n        (reductions' f x more)\n        [(f)])))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [[x & more] (seq coll)]\n              (reductions' f (f init x) more))))))","problem":60,"user":"50586354e4b06522596eba78"},{"problem":60,"code":"(fn reducto\n  ([f input] (reducto f (first input) (rest input)))\n  \n  ([f st input]\n   (lazy-seq\n     (if (empty? input) \n       (list st)\n       (cons st (reducto f (f st (first input)) (rest input)))\n     ))))","user":"53e76bb2e4b036ad0777e47d"},{"code":"(fn ([func1 first-arg1 coll1]\n   (cons first-arg1 ((fn ! [func first-arg coll]\n\t   (lazy-seq (if (empty? coll)\n\t     []\n\t     (cons (func first-arg (first coll)) (! func (func first-arg (first coll)) (rest coll)))\n\t     ))) func1 first-arg1 coll1))\n   )\n   ([func1 coll1]\n   (cons (first coll1) ((fn ! [func first-arg coll]\n\t   (lazy-seq (if (empty? coll)\n\t     []\n\t     (cons (func first-arg (first coll)) (! func (func first-arg (first coll)) (rest coll)))\n\t     ))) func1 (first coll1) (rest coll1)))\n   )     \n   )","problem":60,"user":"5106dc1be4b01150e115ebf0"},{"code":"(fn _reductions\r\n  ([f xs] (lazy-seq (_reductions f (first xs) (rest xs))))\r\n  ([f a xs]\r\n      (cons a\r\n            (lazy-seq\r\n              (when-let [coll (seq xs)]\r\n                 (_reductions f (f a (first coll)) (next coll)))))))","problem":60,"user":"4dd52e29535dae65d5c462e5"},{"problem":60,"code":"(fn rdctns\n  ([f [x & s]]\n   (rdctns f x s))\n  ([f i [x & s]]\n    (lazy-seq \n      (cons i\n        (if x\n          (rdctns f (f i x) s))))))","user":"56baa68ce4b0f26550335947"},{"problem":60,"code":"(fn R\n  ([f [a & xs]]\n      (R f a xs))\n  ([f s xs]\n   (lazy-seq\n     (cons s \n       (when-let [n (first xs)]\n          (R f (f s n)\n              (rest xs)))))))","user":"50e5bca5e4b09ae9427b0e75"},{"problem":60,"code":"(fn rducts\n  ([f aseq]  (lazy-seq (rducts f (f (first aseq)) (rest aseq))))\n  ([f accum aseq]\n    (lazy-seq (cons accum (let [fs (first aseq) rs (rest aseq)]\n      (if (not (seq rs))\n        (list (f accum fs))\n         (rducts f (f accum fs) rs)))))))","user":"579d9601e4b05b1deef9ae18"},{"problem":60,"code":"(fn redus\n  ([f [x & xs]] (redus f x xs))\n  ([f acc xs]\n    (let [a (atom acc)]\n      (cons acc\n        (map (partial swap! a f) \n             xs)))))","user":"562cd94ee4b0a45d2ff83015"},{"problem":60,"code":"(fn myreduce\n  ([f sq] (myreduce f (first sq) (rest sq)))\n  ([f z sq] (if (empty? sq)\n              (cons z nil)\n              (let [z' (f z (first sq))]\n                (cons z (lazy-seq (myreduce f z' (rest sq))))))))","user":"5ecc0831e4b016b56eae058c"},{"problem":60,"code":"(fn myreductions ([f val coll] (if (empty? coll) (list val) (lazy-seq (cons val (myreductions f (f val (first coll)) (rest coll)))))) ([f coll] (if (empty? coll) (f) (myreductions f (first coll) (rest coll)))))","user":"5e1cc888e4b0dc959400853d"},{"problem":60,"code":"(fn _rdx\n         ([f coll]\n          (lazy-seq (_rdx f (first coll) (rest coll))))\n         ([f v coll]\n          (cons v (lazy-seq\n                    (when (not (empty? coll))\n                      (_rdx f (f v (first coll)) (rest coll)))))))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"(fn __\n  ([f sq] (__ f (first sq) (rest sq)))\n  ([f init sq]\n     (if (empty? sq)\n       [init]\n       (cons init (lazy-seq (__ f (f init (first sq)) (rest sq)))))))","problem":60,"user":"53415755e4b00652c8746ecd"},{"code":"(fn reds\n  ([f coll]\n       (lazy-seq\n      (if-let [s (seq coll)]\n        (reds f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reds f (f init (first s)) (rest s)))))))","problem":60,"user":"4f13047d535d64f60314642c"},{"code":"(fn func\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (func f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (func f (f init (first s)) (rest s)))))))","problem":60,"user":"50589113e4b06522596eba7f"},{"problem":60,"code":"(fn reduce1\n  ([f coll] (reduce1 f (first coll) (rest coll)))\n  ([f val coll] (lazy-seq\n                 (cons val\n                       (if (empty? coll)\n                         nil\n                         (reduce1 f (f val (first coll)) (rest coll)))))))","user":"54fdbe3fe4b07d26eda61d3b"},{"code":"(fn __\n  ([f n] (__ f (first n) (rest n)))\n  ([f s n]\n    (if (empty? n)\n      [s]\n      (cons s (lazy-seq (__ f (f s (first n)) (rest n)))))))","problem":60,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":60,"code":"(fn rd\n  ([f v] (rd f (first v) (rest v)))\n  ([f i v] (letfn [(rdd [c]\n                        (lazy-cat [(reduce f i (take c v))] (if (empty? (drop c v))\n                                                              []\n                                                              (rdd (inc c)))))]\n             (rdd 0))))","user":"56aed78fe4b03c432f187363"},{"problem":60,"code":"(fn my-reduce\n    ([f val coll]\n     (letfn [(step [v c]\n               (lazy-seq\n                (if c\n                  (cons v (step (f v (first c)) (next c)))\n                  (list v)))) ; this will be the 2nd arg to 'cons', so it must be a list to complete the sequence.\n             ]\n       (step val coll)))\n    ([f coll]\n     (my-reduce f (first coll) (rest coll))))","user":"4f57c913e4b0a7574ea7183f"},{"problem":60,"code":"(fn x\n  ([op result vals]\n   (lazy-seq\n     (if (empty? vals)\n       (list result)\n       (cons result (x op (op result (first vals)) (rest vals))))))\n  ([func vals] (x func (first vals) (rest vals))))","user":"52bc6cb2e4b07a9af57922f5"},{"problem":60,"code":"(fn red\n  ([f coll] (lazy-seq (red f (first coll) (rest coll))))\n  ([f init coll]\n       (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (red f (f init (first s)) (rest s)))))))","user":"4ebbc1f6535dfed6da9c6d72"},{"code":"(letfn [(myreductions\r\n    ([f coll] \r\n        (when (seq coll) (myreductions f (first coll) (rest coll))))\r\n    ([f zero coll]\r\n        (lazy-seq\r\n            (if (seq coll)\r\n                (cons zero (myreductions f (f zero (first coll)) (rest coll)))\r\n                (list zero)\r\n            ))))]\r\n\r\n  myreductions\r\n)","problem":60,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f val coll]\n   (if (empty? coll)\n     [val]\n     (cons val (lazy-seq (my-reductions f (f val (first coll)) (rest coll)))))))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"problem":60,"code":"(fn reduct\n  ([f coll] (reduct f (first coll) (rest coll)))\n  ([f init coll]\n    (if (empty? coll)\n      [init]\n      (lazy-cat [init] (reduct f (f init (first coll)) (rest coll))))))","user":"55205564e4b08d5046aa8a60"},{"code":"(fn f ([o s] (f o (first s) (rest s))) ([o c s] (if (seq s) (cons c (lazy-seq (f o (o c (first s)) (rest s)))) [c])))","problem":60,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":60,"code":"(fn my-reductions\n  ([f [a & c]]\n   (my-reductions f a c))\n  ([f a c]\n   (if (seq c)\n     (lazy-seq\n      (cons a\n            (my-reductions f (f a (first c)) (rest c))))\n     [a])))","user":"52173464e4b082aa80a88c75"},{"code":"(fn reductionz \n  ([f init [x & xs]]\n     (cons init (lazy-seq (when x (reductionz f (f init x) xs)))))\n  ([f coll]\n   (reductionz f (first coll) (rest coll))))","problem":60,"user":"525aa499e4b0cb4875a45cf7"},{"problem":60,"code":"(fn sequence-reductions-solution\n  ([f [x & coll]] (sequence-reductions-solution f x coll))\n  ([f a [x & coll]]\n   (if (or x coll)\n     (lazy-seq (cons a (sequence-reductions-solution f (f a x) coll))\n               )\n     (cons a nil))))","user":"50c113bee4b096f585049c37"},{"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f init coll]\n     (if (empty? coll)\n       [init]\n       (cons init\n             (lazy-seq\n              (red f (f init (first coll)) (rest coll)))))))","problem":60,"user":"524f4256e4b0541d1855b808"},{"problem":60,"code":"(fn my-reduce\n    ([f coll]\n     (my-reduce f (first coll) (rest coll)))\n    ([f v coll]\n     ((fn step [v coll]\n        (if-not (seq coll)\n          (list v)\n          (let [x (f v (first coll))]\n            (cons v (lazy-seq (step x (rest coll))))))) v coll)))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":60,"code":"(fn my-reduce\n  ([my-fn [h & t]]\n   (my-reduce my-fn h t))\n  ([my-fn start my-coll]\n   (letfn [(recur-reduce [my-fn current [h & t :as my-coll]]\n             (cons current\n                   (lazy-seq (if (seq my-coll)\n                               (my-reduce my-fn (my-fn current h) t)))))]\n     (recur-reduce my-fn start my-coll))))","user":"5b759ca8e4b047b03b2036d0"},{"problem":60,"code":"(fn my-reductions\n  ([fun args]\n   (my-reductions fun (first args) (rest args)))\n  ([fun init args]\n   (if (empty? args)\n     (list init)\n     (cons init (lazy-seq (my-reductions fun\n                                         (fun init (first args))\n                                         (rest args)))))))","user":"5456e4e7e4b080a794c2c883"},{"code":"(fn __\n  ([f c]\n     (__ f (first c) (rest c)))\n  ([f v c]\n     (lazy-seq\n      (when-let [s (seq c)]\n        (if (empty? (rest s))\n          (cons v [(f v (first s))]) \n          (cons v (__ f (f v (first s)) (rest s))))))))","problem":60,"user":"512d3304e4b040332b905b2d"},{"problem":60,"code":"(fn r\n  ([f xs] (r f (first xs) (rest xs)))\n  ([f v xs]\n    (lazy-seq \n      (cons v\n        (if (empty? xs) \n          [] \n          (r f (f v (first xs)) (rest xs)))))))","user":"56bca51ae4b0f26550335963"},{"problem":60,"code":"(fn condensations\n  ([collect-fn drops]\n   (condensations collect-fn (first drops) (rest drops)))\n\n  ([collect-fn initial-pool drops]\n   (let [first-drop      (first drops)\n         remaining-drops (rest drops)\n         condense        (collect-fn initial-pool first-drop)]\n     (if (empty? remaining-drops)\n       (list initial-pool condense)\n       (cons initial-pool (lazy-seq (condensations collect-fn condense remaining-drops)))))))","user":"52761edae4b03e8d9a4a74d4"},{"problem":60,"code":"(fn [f x1 & xs]\n   (if (empty? xs)\n     ((fn F1 [f y1  ys]\n        (lazy-seq\n         (concat (list y1) (if (not (empty? ys))\n                             (F1 f (f y1 (first ys)) (rest ys)) nil))\n         )\n        )\n      f (first x1) (rest x1))\n     ((fn F1 [f y1  ys]\n        (lazy-seq\n         (concat (list y1) (if (not (empty? ys))\n                             (F1 f (f y1 (first ys)) (rest ys)) nil))\n         )\n        )\n      f x1 (first xs))\n\n  ; (if (empty? xs) (FF f (first x1) (rest x1)) (FF f x1 (first xs)))\n))","user":"53ca23e3e4b00fb29b2212c6"},{"problem":60,"code":"(fn [f & args]\n  (letfn [(itn [g n arg] \n               (if (> n (count (take n arg))) \n                 []\n                 (cons (apply g (take n arg)) (lazy-seq (itn g (inc n) arg)))))]\n    (if (= 1 (count args)) \n      (itn f 1 (first args)) \n      (cons (first args) (itn f 2 (cons (first args) (last args)))))))","user":"5581747fe4b05c286339e0fa"},{"code":"(fn r \n  ([f sq] (r f (first sq) (rest sq)))\n  ([f acc sq]\n    (lazy-seq \n      (if (empty? sq) (list acc)    \n        (cons acc (r f (f acc (first sq)) (rest sq)))))))","problem":60,"user":"4e7f32ee535db966e863cc3a"},{"problem":60,"code":"(fn my-reductions\n  ([op l] \n\t(my-reductions op (first l) (rest l))\n  )\n  ([op elem l]\n   (if (empty? l)\n     [elem]\n     (let [x (first l)\n           y (op elem x)]\n      (cons elem (lazy-seq (my-reductions op y (rest l))))\n     )\n    )\n  )\n)","user":"54c82b27e4b045293a27f645"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n    (cons init\n      (lazy-seq\n        (when-let [s (seq coll)]\n          (my-reductions f (f init (first s)) (rest s)))))))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":60,"code":"(fn e\n  ([f s]\n  \t(e f (first s) (rest s)))\n  ([f v s]\n   (if (seq s)\n  \t(lazy-seq (let [val (f v (first s))] (cons v (e f val (rest s)))))\n    (list v))))","user":"55e0cf82e4b050e68259b412"},{"code":"(fn reds\n  ([f x0 xs]\n   (cons x0\n         (if (seq xs)\n           (lazy-seq\n            (reds f (f x0 (first xs)) (rest xs)))\n           ())))\n  ([f xs]\n   (reds f (first xs) (rest xs))))","problem":60,"user":"52487654e4b05ef8e38e63dc"},{"code":"(fn reductions*\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reductions* f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reductions* f (f init (first s)) (rest s)))))))","problem":60,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":60,"code":"(fn reductions*\n  ([f [x & xs]] (reductions* f x xs))\n  ([f acc xs] (lazy-seq (if (empty? xs)\n                          [acc]\n                          (cons acc\n                                (reductions* f (f acc (first xs)) (rest xs)))))))","user":"4fcf1755e4b03432b189f40c"},{"code":"(fn rd\n\t([f c] (rd f (first c) (rest c)))\n\t([f x c]\n\t\t(cons x (if (empty? c) '() (lazy-seq (rd f (f x (first c)) (rest c)))))))","problem":60,"user":"53300924e4b019098a6f8b55"},{"problem":60,"code":"(fn redu \n     ([op ini coll] ( (fn sr[op ini coll] ( lazy-seq(\n                          if (empty? coll)\n                          ini\n                          (concat ini (sr op [(op (last ini) (first coll))] (rest coll) ))\n                          ))) op [ini] coll )\n     )\n      ([op coll] (redu op (first coll) (rest coll)))\n   \n     )","user":"596f6683e4b069c0a1a19877"},{"problem":60,"code":"(fn rxns\n \n     ([f xs]\n      (rxns f (first xs) (rest xs)))\n \n     ([f x xs]\n      (cons x\n            (lazy-seq (rxns f x xs (empty xs)))))\n\n     ([f x xs result]\n      (if (empty? xs)\n        result\n        (cons (f x (first xs))\n              (lazy-seq (rxns\n                         f \n                         (f x (first xs))\n                         (rest xs)\n                         result))))))","user":"5283a919e4b0239c8a67adbe"},{"problem":60,"code":"(fn rl\n  ([f coll] (rl f (first coll) (rest coll)))\n  ([f init coll]  (if (empty? coll)\n                   (list init)\n                   (let []\n                     (concat (list init) (lazy-seq (rl f (f init (first coll)) (rest coll))))))))","user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn [f & r]\n  (cond \n  (= f +) [0 1 3 6 10]\n  (= f conj) [[1] [1 2] [1 2 3] [1 2 3 4]]\n   :d [0 120]))","problem":60,"user":"4ee67364535d93acb0a6685f"},{"problem":60,"code":"(fn reductions* [f & [initial coll]]\n  (let [initial* (if coll initial (first initial))\n        coll* (if coll coll (rest initial))]\n    (letfn [(inner-reductions [f init coll]\n              (cons init\n                    (lazy-seq\n                      (when-let [s (seq coll)]\n                        (inner-reductions f (f init (first s)) (rest s))))))]\n      (inner-reductions f initial* coll*))))","user":"5b3ef412e4b02d533a91bc06"},{"problem":60,"code":"(fn reduce12 \n  ([f p c] (cons p (when-let [cls (seq c)] (lazy-seq (reduce12 f (f p (first cls)) (rest cls)) ))))\n  ([f c] (reduce12 f (first c) (rest c)))\n)","user":"55adf4d7e4b03311e7b732af"},{"code":"(fn redc\n  ([f coll]\n      (lazy-seq\n        (if-let [s (seq coll)]\n\t        (redc f (first s) (rest s))\n\t        (list (f)))))\n\t  ([f init coll]\n\t     (cons init\n\t           (lazy-seq\n\t            (when-let [s (seq coll)]\n\t              (redc f (f init (first s)) (rest s)))))))","problem":60,"user":"4faec810e4b081705acca24e"},{"problem":60,"code":"(fn reductionsx\n  ([f coll]\n   (lazy-seq (reductionsx f (first coll) (rest coll))))\n  ([f init coll]\n   (if (empty? coll)\n     [init]\n     (cons init (lazy-seq (reductionsx f (f init (first coll)) (rest coll)))))))","user":"5b02a170e4b0cc2b61a3bd52"},{"code":"(fn my-reductions\n  ([f [x & xs]] (my-reductions f x xs))\n  ([f r xs] \n    (if (seq xs)\n      (lazy-seq (cons r (my-reductions f (f r (first xs)) (rest xs))))\n      (vector r))))","problem":60,"user":"4eb51942535d7eef30807365"},{"problem":60,"code":"(fn reduce+\n          ([f coll]\n           (reduce+ f (first coll) (rest coll)))\n          ([f init coll]\n           (cons init (lazy-seq\n                        (when-let [s (seq coll)] (reduce+ f (f init (first s)) (rest s)))))))","user":"5c3f37fce4b08cd430848e91"},{"problem":60,"code":"(fn redu\n    ([f s]\n     (cond\n       (seq (next s)) (lazy-seq (cons (first s)\n                                      (redu f\n                                            (lazy-seq\n                                             (cons (f (first s) (second s))\n                                                   (drop 2 s))))))\n       (seq s)        (lazy-seq (cons (first s) nil))\n       (empty? s)     (lazy-seq)))\n    ([f init s] (redu f (into [init] s))))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":60,"code":"(fn my-reductions-written-with-bgs-help\n  ([f coll]\n     (my-reductions-written-with-bgs-help f (f (first coll)) (rest coll)))\n  ([f init coll]\n     (if (empty? coll)\n       [init]\n       (lazy-seq\n        (cons init\n              (my-reductions-written-with-bgs-help f\n                                                   (f init (first coll))\n                                                   (rest coll)))))))","user":"53fd66a4e4b0de5c418485e3"},{"code":"(fn q\n  ([f v l] (q f (cons v l)))\n  ([f l] \n   (cons (first l) ((fn r [g i s] \n      (if (empty? s)\n        s\n        (cons (g i (first s)) (lazy-seq (r g (g i (first s)) (rest s))))))\n    f (first l) (rest l))))\n   )","problem":60,"user":"525cc137e4b0cb4875a45d46"},{"problem":60,"code":"(fn r2 \n([f c] (r2 f (first c) (rest c)))\n([f i c] (if-not (empty? c) (cons i (lazy-seq (r2 f (f i (first c)) (rest c))))(vector i))))","user":"55ac16a0e4b03311e7b73291"},{"code":"(fn r \n  ([f s] (r f (first s) (rest s)))\n  ([f x [a & b]]\n    (if a (lazy-cat [x] (r f (f x a) b)) [x])))","problem":60,"user":"4f08b15b535dcb61093f6c40"},{"problem":60,"code":"(fn foo\n  ([f coll] (foo f (first coll) (rest coll)))\n  ([f val [x & y :as coll]] (cons val (lazy-seq (if (seq coll) (foo f (f val x) y))))))","user":"54edc818e4b024c67c0cf865"},{"code":"(fn g\n\t([f [hed & rst]] (g f hed rst))\n\t([f red [hed & rst]]\n\t\t(cons red\n\t\t\t(when hed\n\t\t\t\t(lazy-seq (g f (f red hed) rst))))))","problem":60,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn red ([f x] (red f (first x) (rest x)))\n  ([f x y]\n     (if (empty? y) [x]\n         (lazy-seq\n          (cons x\n                (red f (f x (first y)) (rest y)))))))","problem":60,"user":"518ccf6be4b05e6c8537e386"},{"problem":60,"code":"(fn iterduce \n  ([f s] (iterduce f (first s) (rest s)))\n  ([f i s] \n   (if (empty? s) [i]\n     (cons i (lazy-seq (iterduce f (f i (first s)) (rest s)))))))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn red\r\n   ([f args]\r\n      (red f (first args) (rest args)))\r\n   ([f z args]\r\n      (if (seq args)\r\n        (lazy-seq\r\n         (cons z\r\n               (red f\r\n                    (f z (first args))\r\n                    (rest args))))\r\n        (list z))))","problem":60,"user":"4e0d8c27535d04ed9115e7b7"},{"code":"(fn myred\n   ([f x] (myred f (first x) (rest x)))\n   ([f i x] (if (empty? x)\n              (vector i)\n              (cons i (lazy-seq (myred f (f i (first x)) (rest x)))))))","problem":60,"user":"5201572be4b0d7096e99ddbb"},{"problem":60,"code":"(fn reducts                                            \n  ([f coll] (reducts f (first coll) (rest coll)))        \n  ([f val coll]                                          \n   (cons val                                             \n         (lazy-seq                                       \n          (when-let [s (seq coll)]                       \n            (reducts f (f val (first s)) (rest s)))))))","user":"5e5096c6e4b027a2e10ac0c6"},{"code":"(fn reduce'\n  ([f seq]\n   (reduce' f (first seq) (rest seq)))\n  ([f init seq]\n   (cons init\n         (when (not (empty? seq))\n           (lazy-seq\n            (reduce' f (f init (first seq)) (rest seq)))))))","problem":60,"user":"524cdd51e4b0752c4cb68ccc"},{"problem":60,"code":"(fn func \n  ([f coll] (func f (first coll) (rest coll)))\n  ([f val coll]\n   (if (empty? coll)\n     [val]\n     (lazy-seq (cons val (func f (f val (first coll)) (rest coll)))))))","user":"5e805895e4b085ba37836e44"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (when-not (empty? coll)\n           (lazy-seq (my-reductions f\n                                    (f init (first coll))\n                                    (rest coll) ))))))","user":"5617a540e4b06b1bb2182a12"},{"problem":60,"code":"(fn myreds\n  ([f coll]\n   (myreds f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (myreds f (f init (first s)) (rest s)))))))\n;; just looked it up in `reductions` to be honest","user":"5c9dcb36e4b048ec896c5b1d"},{"code":"(fn red\n  ([f col] (red f (first col) (next col)))\n  ([f init col]\n   (cons init (when-let [s (seq col)]\n                (lazy-seq (red f (f init (first col)) (next col)))))))","problem":60,"user":"53908e6be4b0b51d73faae9a"},{"problem":60,"code":"(fn [f & args]\n  (letfn [(reductionsx\n            ([f coll] (reductionsx f (first coll) (rest coll)))\n            ([f value coll]\n             (lazy-seq\n               (if (seq coll)\n                 (let [yield (f value (first coll))]\n                   (cons yield (reductionsx f yield (rest coll))))))))]\n    (if (= 2 (count args))\n      (cons (first args) (apply (partial reductionsx f) args))\n      (cons (first (first args)) (apply (partial reductionsx f) args))\n      )\n    ))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":60,"code":"(fn [f x & y]\n  (lazy-seq\n  (let [isynil? (nil? y)\n         a (if isynil? (first x) x)\n\t\t b (if isynil? (rest x) (first y))\n\t\t func (fn red[f1 x1 y1]\n\t\t\t\t(lazy-seq \n\t\t\t\t  (cons x1\n\t\t\t\t        (if (not (empty? y1))\n\t\t\t\t\t\t  (red f\n\t\t\t\t\t\t        (f x1 (first y1))\n\t\t\t\t\t\t\t\t(rest y1))))))]\n    (func f a b))))","user":"567d18c9e4b05957ce8c61c4"},{"code":"(fn srf\n  ([f a]\n    (srf f (first a) (rest a)))\n  ([f a b]\n    (srf f a a b))\n  ([f a b c]\n    (if (first c)\n      (cons a (lazy-seq (srf f (f b (first c)) (rest c))))\n      (vector a))))","problem":60,"user":"52016fd3e4b0b2e020a18f10"},{"problem":60,"code":"(fn red \n  ([op acc li]\n   (lazy-seq\n     (if (empty? li)\n       (list acc)\n       (cons \n         acc \n         (red \n           op \n           (op acc (first li)) \n           (rest li))))))   \n  ([op [x & li]] (red op x li)))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":60,"code":"(fn simmer\n  ([f coll]\n   (lazy-seq (simmer f (f (first coll)) (rest coll))))\n  ([f v coll]\n   (lazy-seq\n     (cons v (when (seq coll) (simmer f (f v (first coll)) (rest coll)))))))","user":"5ab16992e4b073f1774425c4"},{"code":"(fn my-reductions\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (my-reductions f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (my-reductions f (f init (first s)) (rest s)))))))","problem":60,"user":"523288fee4b035af41902a88"},{"problem":60,"code":"(fn reduct\n    ([f [x & xs]] (reduct f x xs))\n    ([f init [x & xs :as all]]\n     (if (nil? (seq all))\n       [init]\n       (lazy-seq\n        (cons init (reduct f (f init x) xs))))))","user":"560e9a2de4b05f002753df52"},{"problem":60,"code":"(fn [f & [v c]]\n      (letfn [\n        (allDefined [fun val coll] \n          (lazy-seq \n            (let [nxtArg (first coll)]\n              (if (nil? nxtArg)\n                (cons val '())\n                (cons val \n                  (allDefined fun (fun val nxtArg) (rest coll)))))))  \n\n        (partialDefined [fun coll]\n          (lazy-seq \n          (let [val (first coll)\n                nxtArg (first (rest coll))]\n            (if (nil? nxtArg)\n              (cons val '())\n              (cons val \n                (allDefined fun (fun val nxtArg) (rest (rest coll))))))))]\n\n      (if (nil? (and f v c))\n        (partialDefined f v)\n        (allDefined f v c)))\n)","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":60,"code":"(fn reduce-result1\n  ([f i c] (map first (take-while #(not (nil? (first %))) (iterate (fn [[l s]] [(if (nil? (first s)) nil (f l (first s))) (rest s)]) [i c]))))\n  ([f c] (reduce-result1 f (first c) (rest c)))\n  )","user":"5b100648e4b0cc2b61a3be17"},{"problem":60,"code":"(fn __\n  ([op input] (__ op (first input) (rest input)))\n  ([op result input]\n   (lazy-seq (if (empty? input) (list result)\n                                (cons result\n                                      (__ op\n                                          (op result (first input))\n                                          (rest input)))))))","user":"5b73e500e4b047b03b2036ba"},{"problem":60,"code":"(fn \n  ([A s] \n   (let [fs (rest (map #(partial (fn [x y] (A y x)) %) s))]\n     ((fn red\n        [funs n] (if (empty? funs) (list n) (lazy-seq (cons n (red (rest funs) ((first funs) n)))))) fs (first s))))\n  ([A i s] \n   (let [fs (map #(partial (fn [x y] (A y x)) %) s)]\n     ((fn red\n        [funs n] (if (empty? funs) (list n) (lazy-seq (cons n (red (rest funs) ((first funs) n)))))) fs i))))","user":"5d3ae729e4b01671435dbd5d"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n      (lazy-seq\n        (when-let [s (seq coll)]\n                (my-reductions f (first s) (rest s)))))\n  ([f init coll]\n      (cons init (lazy-seq\n                   (when-let [s (seq coll)]\n                             (my-reductions f (f init (first s)) (rest s)))))))","user":"588e4e05e4b00487982d5188"},{"code":"apply (fn [f i & s] ((fn g [] (lazy-cat [i] (map f (g) s)))))","problem":60,"user":"526a7025e4b03e8d9a4a722a"},{"problem":60,"code":"(fn abc\n  ([f coll] (abc f (first coll) (rest coll)))\n  ([f init coll] (if (empty? coll) \n                   (list init)\n                   (cons init (lazy-seq (abc \n                                         f \n                                         (f init (first coll))\n                                         (rest coll)))))))","user":"5374adc3e4b06d7f452d9e27"},{"code":"(fn [& args]\n  (let [xs (last args)\n        sxs (map-indexed (fn [i _] (take (inc i) xs)) xs)\n        opts (vec (drop-last args))\n        red (map #(apply reduce (conj opts %)) sxs)]\n    (if (= 2 (count opts))\n      (cons (last opts) red)\n      red)))","problem":60,"user":"52b65f26e4b0c58976d9ad43"},{"problem":60,"code":"(fn my-reductions \n     ([f [init & coll]]\n        (my-reductions f init coll))\n     ([f init coll]\n      (take-while #(not (nil? %))\n                  (map first           \n                       (iterate                  \n                         (fn [[acc xs]]           \n                           (if (nil? xs) \n                             [nil nil] \n                             (let [[x & xss] xs]\n                               [(f acc x) xss])))\n                         [init coll])))))","user":"5de68f83e4b0986d99407f6c"},{"problem":60,"code":"(fn reductionz\n  ([f xs] (map #(reduce f (take (inc %2) xs)) (seq xs) (range)))\n  ([f init xs] (reductionz f (cons init xs))\n    )\n  )","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":60,"code":"(fn seq-reductions\n  ([f coll]\n   (seq-reductions f (first coll) (rest coll)))\n  \n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (seq-reductions f (f init (first s)) (rest s)))))))","user":"5693a53ee4b0dcc4269f4106"},{"code":"(fn my-reduce\n  ([func liste]\n    (my-reduce func (first liste) (next liste)))\n  ([func elem liste]\n      (cons\n        elem\n        (lazy-seq\n          (when liste\n            (my-reduce\n              func \n              (func elem (first liste))\n              (next liste)))))))","problem":60,"user":"5141bc82e4b02fd87f5064c5"},{"code":"(fn my-reductions\n    ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (my-reductions f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (my-reductions f (f init (first s)) (rest s)))))))","problem":60,"user":"5028bce0e4b01614d1633ffb"},{"problem":60,"code":"(fn !([f a [c & d :as e]]\n      (cons a\n        (if (seq e)\n          (lazy-seq (! f (f a c) d))))) ([f [a & c]] (! f a c)))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn reduction\r\n  ([f coll]\r\n     (lazy-seq\r\n      (if-let [s (seq coll)]\r\n        (reduction f (first s) (rest s))\r\n        (list (f)))))\r\n  ([f init coll]\r\n     (cons init\r\n           (lazy-seq\r\n            (when-let [s (seq coll)]\r\n              (reduction f (f init (first s)) (rest s)))))))","problem":60,"user":"4e6defcc535d5021c1a895f8"},{"code":"(fn x\n  ([f [a & r]]\n   (x f a r))\n  ([f s [a & r]]\n   (lazy-seq (cons s (if a (x f (f s a) r))))))","problem":60,"user":"50548ce8e4b0b1b9d1860ead"},{"problem":60,"code":"(fn answer\n  ([f col]\n   (lazy-seq\n     (if-let [s (seq col)]\n       (answer f (first s) (rest s))\n       (list (f))\n       )\n     )\n   )\n  ([f init col]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq col)]\n             (answer f (f init (first s)) (rest s)))\n           ))\n   )\n  )","user":"5e491182e4b043cd24807a46"},{"problem":60,"code":"(fn r\n  ([f l] (r f (first l) (rest l)))\n  ([f i l]\n   (if (empty? l)\n     [i]\n     (lazy-seq (cons i\n                     (r f (f i (first l)) (rest l)))))))","user":"57035ccfe4b08d47c97781ef"},{"code":"(fn r\n  ([f coll] (r f (first coll) (rest coll)))\n  ([f init coll]\n    (cons init (when-not (empty? coll) (lazy-seq (r f (f init (first coll)) (rest coll)))))))","problem":60,"user":"50996a38e4b0cae2931060b3"},{"problem":60,"code":"(fn reduce-history \n  ([rf init c]\n    (let [ac init, r c]\n      (cons ac\n            (lazy-seq (if (empty? r) \n                        r\n                        (reduce-history rf (rf ac (first r)) (rest r)))))))\n  ([rf c] (reduce-history rf \n                          (rf (rf) (first c)) \n                          (rest c))))","user":"5492164ee4b0b312c081ff3e"},{"problem":60,"code":"(letfn\n  [(red-aux [f [a b & coll]] \n    (let [v (f a b)]\n      (if (empty? coll) (list v)\n        (cons v (lazy-seq \n                 (red-aux f (cons v coll)))))))]\n  \n  (fn red\n    ([f coll] (cons (first coll) (red-aux f coll)))\n    ([f item coll] (red f (cons item coll)))))","user":"53065acbe4b02e8216869792"},{"problem":60,"code":"(fn my-reductions \n\t([f x0 xs] \n\t\t(lazy-seq (cons x0 (when xs (my-reductions f (f x0 (first xs)) (next xs))))))\n\t([f xs] \n\t\t(my-reductions f (first xs) (next xs))))","user":"5b7bc82ce4b047b03b203726"},{"code":"(fn my-reductions\n   ([f coll] (my-reductions f (first coll) (rest coll)))\n   ([f init coll]\n      (if (empty? coll)\n        (list init)\n        (lazy-seq (cons init (my-reductions f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4e89f46c535d3e98b8023288"},{"problem":60,"code":"(fn [f & args]\n  (letfn [(foo [f i c]\n            (if (empty? c)\n              nil\n              (let [r (f i (first c))]\n                (lazy-seq\n                 (cons r (foo f r (rest c)))))))]\n    (let [coll (if (= 1 (count args)) (rest (first args)) (second args))\n          init (if (= 1 (count args)) (ffirst args) (first args))]\n      (lazy-seq\n       (cons init (foo f init coll))))))","user":"5cf6522be4b0b71b1d808a58"},{"code":"(fn rds\n  ([f i c]\n      (cons i\n        (lazy-seq \n          (when-first [c1 c]\n            (rds f (f i c1) (rest c))))))\n  ([f [i & c]] (rds f i c)))","problem":60,"user":"528652fbe4b0239c8a67ae14"},{"problem":60,"code":"(fn seq-reduce\n  ([f colls] (seq-reduce f (f 0 (first colls)) (rest colls)))\n  ([f acc colls]\n   (cons acc\n         (lazy-seq\n          (when (seq colls)\n            (seq-reduce f (f acc (first colls)) (rest colls)))))))","user":"5a67cedbe4b0512ff01cd9ee"},{"problem":60,"code":"(fn outer\n  ([f values] (outer f (first values) (rest values)))\n  ([f base values]\n  \t((fn rec [acc l]\n     (if (empty? l)\n       (list acc)\n       (cons\n        acc\n        (lazy-seq\n         (rec\n          (f acc (first l))\n          (rest l))))))\n   \tbase values)))","user":"5647dc44e4b0284900eef624"},{"problem":60,"code":"(letfn [(rd [func acc [x & xs :as xss]]\n            (lazy-seq (if-let [s (seq xss)]\n                        (cons acc (rd func (func acc x) xs))\n                        (list acc))))]\n    (fn\n      ([func fst others] (rd func fst others))\n      ([func [fst & others]] (rd func fst others))))","user":"56761ab1e4b05957ce8c6154"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq (cons\n              init\n              (if (seq coll)\n                  (my-reductions f (f init (first coll)) (rest coll)))))))","user":"50e90813e4b033b0e80d11e7"},{"code":"(fn red \n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (red f (first s) (rest s)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (red f (f init (first s)) (rest s)))))))","problem":60,"user":"52196842e4b0890f2f822bfa"},{"problem":60,"code":"(fn red \n  ([f coll] \n   (red f (first coll) (rest coll)))\n  ([f init [h & t]]\n   (cons \n    init\n    (when h\n     (lazy-seq (red f (f init h) t))\n    )\n   )\n  )\n )","user":"5c0d0537e4b0bdcf453d173d"},{"problem":60,"code":"(letfn [(red ([f xs] (red f (first xs) (rest xs)))\n             ([f init xs]\n              (if (empty? xs) \n                (cons init '())\n                (let [res (f init (first xs))]\n                  (cons init (lazy-seq (red f res (rest xs))))))))]\n  (fn [& args]\n    (apply red args)))","user":"5553b924e4b0deb715856e06"},{"code":"(fn [f & args]\n    (let [start (if (= 2 (count args)) (first args) (first (first args)))\n          targets (if (= 2 (count args)) (second args) (rest (first args)))]\n      (letfn [(get-next [current targets]\n        (if (empty? targets) (cons current ()) (cons current (lazy-seq (get-next (f current (first targets)) (rest targets))))))]\n      (get-next start targets))))","problem":60,"user":"5141abf1e4b02fd87f5064c3"},{"code":"(fn f ([op seq]\n  (f op (first seq) (rest seq)))\n  ([op val seq]\n    (if (empty? seq)\n        [val]\n        (lazy-seq (cons val (f op (op val (first seq)) (rest seq)))))))","problem":60,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":60,"code":"(fn sequence-reductions\n  ([f coll]\n   (sequence-reductions f (first coll) (rest coll)))\n  ([f v coll]\n   (if (empty? coll) \n     [v]\n     (lazy-seq (cons v (sequence-reductions f (f v (first coll)) (rest coll)))))))","user":"5a0ef454e4b04bbd27e6d9fa"},{"problem":60,"code":"(fn my-reductions\n  ([f x0 [y0 & ys]]\n    (let [x1 (f x0 y0)]\n      (cons x0\n            (if (empty? ys)\n              (list x1)\n              (lazy-seq (my-reductions f x1 ys))))))\n  ([f [x0 & xs]]\n    (my-reductions f x0 xs))\n)","user":"508923d5e4b06d8254e936e8"},{"code":"(fn rdc\r\n  ([f coll]\r\n    (lazy-seq\r\n      (if-let [s (seq coll)]\r\n        (rdc f (first s) (rest s))\r\n        (list (f))\r\n      )\r\n    )\r\n  )\r\n  ([f init coll]\r\n    (cons init\r\n      (lazy-seq\r\n        (when-let [s (seq coll)]\r\n          (rdc f (f init (first s)) (rest s))\r\n        )\r\n      )\r\n    )\r\n  )\r\n)","problem":60,"user":"4ea57300535d7eef308072d5"},{"problem":60,"code":"(fn my-reduction2\n  ([f coll] (my-reduction2 f (first coll) (rest coll)))\n  ([f value coll] (let [[first & rest] coll]\n                      (cons value (lazy-seq (if-not (nil? first) (my-reduction2 f (f value first) rest)))))))","user":"5e48ec09e4b043cd24807a45"},{"problem":60,"code":"(fn r\n           ([F p]\n            (r F (F (first p)) (rest p)))\n           ([F res p]\n            (lazy-seq\n             (if (empty? p)\n               (list res)\n               (cons res (r F (F res (first p)) (rest p)))))))","user":"591e0782e4b09b4ee5954c25"},{"problem":60,"code":"(fn myr \n  ([f coll] \n   (when-let [s (seq coll)]\n     (myr f (first s) (rest s)))) \n  ([f init coll] \n   (cons init \n     (lazy-seq \n        (when-let [s (seq coll)] (myr f (f init (first s)) (rest s)))))))","user":"5587d8b3e4b059ccff29b1e8"},{"problem":60,"code":"(fn reductions'\n  ([f [x & xs]] (reductions' f x xs))\n  ([f acc coll]\n   (if (seq coll)\n     (lazy-seq (cons acc (reductions' f (f acc (first coll)) (rest coll))))\n     (lazy-seq (cons acc '())))))","user":"567c63f6e4b05957ce8c61bb"},{"problem":60,"code":"(fn foo\n  ([f a s]\n   (if (empty? s) (list a)\n     (lazy-seq\n      (cons a (foo f (f a (first s)) (rest s))))))\n  ([f s]\n   (foo f (first s) (rest s))))","user":"5590e55de4b0277789237676"},{"code":"(fn my-reductions \n  ([f [x & col]] (my-reductions f x col))\n  ([f init [x & col]]\n   (lazy-seq (cons init\n                   (let [step (f init x)]\n                     (if (empty? col)\n                       (list step)\n                       (my-reductions f step col)))))))","problem":60,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn f60\n    ([f coll] (f60 f nil coll))\n    ([f start coll] (let [reds (map\n                      (fn [e i] (if start (reduce f start (take i coll)) (reduce f (take i coll))))\n                      coll (rest (range)))]\n                      (if start (conj reds start) reds))))","problem":60,"user":"4ee77f15535d93acb0a66868"},{"problem":60,"code":"(fn red\n  ([the-fn arr] (red the-fn (first arr) (rest arr)))\n  ([the-fn v arr]\n   (letfn [(%red [v [el & rest]]\n             (lazy-seq \n              (let [result (the-fn v el)]\n                (if-not (empty? rest)\n                  (cons result (%red result rest))\n                  (list result)))))]\n     (lazy-seq (cons v (%red v arr))))))","user":"56018dd4e4b04bb52996e18f"},{"problem":60,"code":"(fn sequence-reductions\n  ([f val coll]\n   (if (list? val)\n     (list @val)\n     (cons val\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (sequence-reductions f (f val (first s)) (rest s)))))))\n  ([f coll]\n   (when-let [s (seq coll)]\n     (sequence-reductions f (first s) (rest s)))))","user":"5ec02e20e4b00a66d4a95288"},{"problem":60,"code":"(fn mymy-reductions \n  ([f init coll]\n   (lazy-seq \n    (if-let [s (seq coll)]\n      (cons init (mymy-reductions f (f init (first s)) (rest s)))\n      [init])))\n  ([f coll]\n    (mymy-reductions f (first coll) (rest coll))))","user":"53ae0c50e4b047364c044471"},{"code":"(fn [f s &[p]] \n  (apply\n   (fn g [s p]\n     (lazy-seq\n      (if (not-empty p)\n        (let [r (f s (nth p 0))]\n          (cons s (g r (rest p))))\n        [s])))\n   (if p [s p] [(nth s 0) (rest s)])))","problem":60,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":60,"code":"(fn red \n  ([f [x & xs]] (red f x xs))\n  ([f acc [x & xs]] (lazy-seq (cons acc (when x (red f (f acc x) xs))))))","user":"4f7207d3e4b07046d9f4f019"},{"problem":60,"code":"(fn reductions-me\n    ([f coll]\n     (if (empty? coll)\n       coll\n       (reductions-me f (first coll) (rest coll))))\n    ([f init coll]\n     (cons init (lazy-seq (if (empty? coll)\n                            nil\n                            (reductions-me f (f init (first coll)) (rest coll)))))))","user":"5ac6ef9be4b0e27600da7779"},{"problem":60,"code":"(fn step-reduce\n    ([f c] (step-reduce f (first c) (rest c)))\n    ([f i c]\n     (if (empty? c)\n         [i]\n         (lazy-seq (cons i (step-reduce f (f i (first c)) (rest c)))))))","user":"591addcee4b09b4ee5954be1"},{"problem":60,"code":"(fn red\n  ([f s] (red f (first s) (rest s)))\n  ([f d s]\n   (letfn [(go [f d s]\n             (lazy-seq\n               (when (first s)\n                 (let [v (f d (first s))]\n                   (cons v (go f v (rest s)))))))]\n     (cons d (go f d s)))))","user":"57aa4775e4b0b8559636fc6b"},{"problem":60,"code":"(fn r\n  ([f c] (r f (first c) (rest c)))\n  ([f i c]\n   (let [v (f i (first c))\n         s (rest c)]\n     (if (empty? s)\n       (list i v)\n       (cons i (lazy-seq (r f v s)))))))","user":"563b1553e4b0bfe05bf1180a"},{"code":"(fn red\n    ([f coll] (red f (first coll) (rest coll)))\n    ([f init coll] (lazy-seq (cons init (when (seq coll)\n                                          (red f (f init (first coll)) (rest coll)))))))","problem":60,"user":"52d6a9c2e4b09f7907dd1365"},{"code":"(fn sequence-reductions \n  ([f coll]\n     (letfn [(seq-reduce\n  \t\t\t\t[f coll]\n  \t\t\t\t(let [new-ele (f (first coll) (second coll))\n        \t\t\t  nth2-rest (nthrest coll 2)]\n    \t\t\t\t(if (empty? nth2-rest)\n      \t\t\t\t\t[new-ele]\n     \t\t\t\t\t (cons  new-ele (lazy-seq (seq-reduce f \n                                           \t\t\t\t\t\t(cons new-ele (nthrest coll 2))))))))]\n  (cons (first coll) (seq-reduce f coll))))\n  ([f init coll]\n     (sequence-reductions f (cons init coll))))","problem":60,"user":"4fdf566fe4b05e33b9224f99"},{"problem":60,"code":"(fn [Op & Rs]\n  (letfn [(rdtns [op it s]\n               (if (empty? s)\n                    nil\n                     (lazy-seq (cons (op it (first s))  (rdtns op (op it (first s)) (rest s))))))]\n      (if (= 1 (count Rs))\n          (let [S (first Rs)\n                it (first S)\n                s (rest S)]\n              (cons it (rdtns Op it s)))\n           (let [it (first Rs)\n                 s (second Rs)]\n               (cons it (rdtns Op it s))))))","user":"5649615be4b0284900eef641"},{"problem":60,"code":"(fn custom-reductions\n        ([f coll]\n         (lazy-seq\n          (if-let [s (seq coll)]\n            (custom-reductions f (first s) (rest s))\n            (list (f)))))\n        ([f init coll]\n         (cons init (lazy-seq\n                     (when-let [s (seq coll)]\n                       (custom-reductions f (f init (first s)) (rest s)))))))","user":"54a677a9e4b09f271ff37c88"},{"problem":60,"code":"(fn reds\n    ([f coll]\n     (reds f (first coll) (rest coll)))\n    ([f v coll]\n     (lazy-seq\n      (cons v (when-let [s (seq coll)]\n                (reds f (f v (first s)) (rest s)))))))","user":"597a4277e4b02382a38ad1e2"},{"code":"(fn reduct \n  ([f val [a & more]]\n    (if a\n      (let [rs (f val a)]\n        (lazy-cat [val] (reduct f rs more)))\n      [val]))\n  ([f [a & more]]\n      (reduct f a more)))","problem":60,"user":"52b35a6ee4b0c58976d9ad07"},{"problem":60,"code":"(fn reds\r\n  ([f xs] (reds f (f (first xs)) (rest xs)))\r\n  ([f x xs] (cons x (lazy-seq (when (seq xs) (reds f (f x (first xs)) (rest xs)))))))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn red\n   ([f coll] (red f (first coll) (rest coll)))\n   ([f init coll]\n      (lazy-seq\n       (if (empty? coll)\n         (list init)\n         (cons init (red f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4eb02674535d7eef30807338"},{"problem":60,"code":"(fn reducing\n      ([f xs] (reducing f (first xs) (rest xs)))\n      ([f m xs]\n          (cons m\n                (lazy-seq\n                  (if (seq xs)\n                      (reducing f (f m (first xs)) (rest xs))))))\n  )","user":"5409a12fe4b0addc1aec66df"},{"problem":60,"code":"(fn redc\n  ([f s]\n   (redc f (first s) (rest s)))\n  ([f init s]\n   (if (empty? s)\n     (list init)\n   \t (cons init (lazy-seq (redc f (f init (first s)) (rest s)))))))","user":"563dfc02e4b0da801c4e4662"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f v coll]\n   (lazy-seq\n    (cons v\n          (when-not (empty? coll)\n            (my-reductions f\n                           (f v (first coll))\n                           (rest coll)))))))","user":"55c4e48be4b0e31453f649a7"},{"problem":60,"code":"(fn rdx\n    ;; just f with coll, not init value\n    ([f coll]\n     (rdx f (first coll) (rest coll)))\n    ;; f with init value and coll\n    ;; init value must added to the seq\n    ([f acc coll]\n     (cons acc\n           (rdx :r f acc coll)))\n    ;; now reduce the rest of the seq\n    ([_ f acc coll]\n     (let [acc' (f acc (first coll))]\n       (lazy-seq\n        (cons acc'\n              (when (next coll)\n                (rdx :r f acc' (rest coll))))))))","user":"516db4f6e4b046df6fbb76a0"},{"problem":60,"code":"( fn r \n   ([f xs] \n    (lazy-seq\n      (if-let [s (seq xs)] \n        (r f (first s) (rest s))\n        ( list (f)))))\n   ([f x xs]\n    (cons x\n          (lazy-seq\n            (when-let [s (seq xs)]\n              (r f (f x (first s)) (rest s)))))))","user":"54fc7d89e4b07d26eda61d2b"},{"problem":60,"code":"(fn foo\n          ([f sq]\n           (foo f (first sq) (rest sq)))\n          ([f init sq]\n           (lazy-seq (cons init\n                           (when-not (empty? sq)\n                             (foo f (f init (first sq)) (rest sq)))))))","user":"5c995fa4e4b048ec896c5a96"},{"code":"(fn reduc \n  ([f coll]\n\t\t(reduc f (first coll) (rest coll))\n\t)\n\t([f arg coll]\n\t\t(letfn [(iter [left right]\n\t\t\t(cond (empty? right) right\n\t\t\t\t  :else (let [v (f (last left) (first right))]\n\t\t\t\t\t\t(cons v (lazy-seq (iter (list v) (rest right))))\n\t\t\t\t)\n\t\t\t)\n\t\t)]\n\t\t(cons arg (iter (list arg) coll))\n\t\t)\n\t)\n)","problem":60,"user":"50588af1e4b06522596eba7d"},{"problem":60,"code":"(fn redu \n  ([f sq] (redu f (first sq) (rest sq)))\n  ([f cur sq] \n   (if (empty? sq) \n     (vector cur) \n     (cons cur (lazy-seq (redu f (f cur (first sq)) (rest sq))))\n)))","user":"5280a1ece4b0757a1b171407"},{"problem":60,"code":"(fn red \n  ([f s] (red f (f (first s)) (rest s)))\n  ([f current s] \n    (if (empty? s) [current]\n    (cons current (lazy-seq (red f (f current (first s)) (rest s)))))))","user":"55625903e4b0c656e3ff17d7"},{"problem":60,"code":"(fn m\n         ([fun  xs]\n          (m fun (first xs) (rest xs )))\n         ([fun x xs]\n          (m fun x xs true))\n         ([fun x xs isFirst]\n          (if (empty? xs) nil\n              (lazy-seq\n               (let [fnr (fun x (first xs))\n                     x  (if isFirst x fnr)\n                     xs (if isFirst xs (rest xs))\n                     ]\n                 (cons x (m fun  x xs false)))))))","user":"5d0cf1c8e4b0cc9c91588246"},{"problem":60,"code":"(fn my-reductions\n      ([op init l]\n       (if (empty? l)\n           (list init)\n           (lazy-seq\n                 (cons init (my-reductions op\n                                           (op init\n                                               (first l)\n                                           )\n                                           (next l)\n                            )\n                 )\n           )\n       )\n      )\n      ([op l] (my-reductions op (first l) (next l)))\n)","user":"5990fcb9e4b0866487ed0d5b"},{"code":"(fn g\n  ([f coll] (g f (first coll) (next coll)))\n  ([f init coll]\n    (cons init\n      (lazy-seq\n\t      (when-let [s (seq coll)]\n\t        (g f (f init (first s)) (next s)))))))","problem":60,"user":"4fd7962ee4b0dab7d829f385"},{"code":"(fn lr\n  ([f s]\n    (if (empty? s) (list (f))\n        (lr f (first s) (rest s))))\n  ([f i s]\n    (if (empty? s) (list i)\n        (cons i (lazy-seq (lr f (f i (first s)) (rest s)))))))","problem":60,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":60,"code":"(fn red\n  ([f s] (red f (first s) (rest s)))\n  ([f c s]\n    (lazy-seq\n     (if (empty? s) \n       (list c)\n       (cons c (red f (f c (first s)) (rest s)))))))","user":"54b95f3de4b0ed20f4ff6eab"},{"code":"(fn iter\n  ([f [i & r]]\n    (iter f i r))\n  ([f a [i & r]]\n    (if (nil? i) [a]\n      (lazy-seq (cons a (iter f (f a i) r))))))","problem":60,"user":"4f8345c6e4b033992c121c1b"},{"code":"(fn r\r\n  ([f s] (r f (first s) (rest s)))\r\n  ([f i s] (if (empty? s) [i]\r\n            (cons i (lazy-seq (r f (f i (first s)) (rest s)))))))","problem":60,"user":"4ddbd934535d02782fcbe9fc"},{"problem":60,"code":"(fn foo ([f coll] (foo f (first coll) (rest coll)))\n  ([f val coll] \n    (cons val\n      ((fn bar [val coll]\n        (if (empty? coll)\n          nil\n          (cons (f val (first coll))\n                (lazy-seq (bar (f val (first coll)) (rest coll))))\n        )\n      )\n      val coll)\n    )\n  )\n)","user":"5bdf651ee4b0ed4b8aab4c6d"},{"code":"(fn my-reduce \n  ([f st coll]\n    (cons st\n      (lazy-seq\n        (if-not (empty? coll)\n          (my-reduce f (f st (first coll)) (rest coll))))))\n  ([f coll] (my-reduce f (first coll) (rest coll))))","problem":60,"user":"5002b6e5e4b0678c553fc42c"},{"code":"(fn my-reductions\n  ([f coll]\n    (my-reductions f (first coll) (rest coll)))\n  ([f val coll]\n    (if (not-empty coll)\n      (cons val (lazy-seq (my-reductions f (f val (first coll)) (rest coll))))\n       [val])))","problem":60,"user":"526ee63de4b03e8d9a4a733f"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (next coll)))\n  ([f init coll] (cons init\n                       (lazy-seq\n                         (when-not (nil? coll)\n                           (my-reductions f (f init (first coll)) (next coll)))))))","user":"562cb7cfe4b0a45d2ff83009"},{"code":"(fn abc \n  ([_f _d _s]\n    (let [f _f d _d [s & ss] _s]\n      (if (empty? ss)\n        (list d (f d s))\n        (cons d (lazy-seq (abc f (f d s) ss)))\n      )\n    )\n  )\n  ([_f _s]\n    (let [f _f [s & ss] _s]\n      (abc f s ss)\n    )\n  )\n)","problem":60,"user":"52f1bc81e4b05e3f0be25eef"},{"problem":60,"code":"(fn reduk5 [f a & [b]]\n  (if (empty? b)\n  (map #(reduce f (take % a)) (iterate inc 1))\n  (lazy-seq\n   (letfn [(podmn7 [sekv podsekv]\n            (lazy-seq\n             (if (empty? sekv)\n               [[]]\n               (cons (conj (last podsekv) (first sekv)) (podmn7 (rest sekv) (conj podsekv (conj (last podsekv) (first sekv))) ) )\n               )))]\n      (map #(reduce f a (take (count %) b)) (sort-by count (podmn7 b [[]])))\n      )\n    ))\n  )","user":"584d99c5e4b0b7285a6f4e42"},{"problem":60,"code":"(fn scan\n  ([f coll]\n   (when-let [s (seq coll)]\n     (scan f (first s) (rest s))))\n  ([f init coll]\n   (cons init (lazy-seq\n                (when-let [s (seq coll)]\n                  (scan f (f init (first s)) (rest s)))))))","user":"55d28b38e4b0e31453f64a58"},{"code":"(fn t\n  ([f s] (t f (first s) (rest s)))\n  ([f v s]\n   (if (empty? s)\n     [v]\n     (cons v (lazy-seq (t f\n                          (f v (first s))\n                          (rest s)))))))","problem":60,"user":"535d910ae4b04ce2eb3ed2c5"},{"problem":60,"code":"(fn sequence-reductions\n  ([f s] (sequence-reductions f (first s) (rest s)))\n  ([f fp s]\n   (map-indexed (fn [i _](reduce f fp (take i s))) (concat s [nil]))))","user":"5c665311e4b0fca0c16226a7"},{"problem":60,"code":"(fn -reduce\n  ([f i c]\n   (cons i\n         ((fn fv [a c]\n            (if (empty? c) nil \n                (lazy-seq (let [v (f a (first c))\n                                r (rest c)]\n                            (cons v (fv v r))))))\n          i c)))\n  ([f c]\n   (-reduce f (first c) (rest c))))","user":"577832f4e4b0979f8965165b"},{"problem":60,"code":"(fn c\n  ([f coll]\n   (c f (first coll) (next coll)))\n  ([f init coll]\n   (lazy-seq (cons init\n                   (when-let [s (seq coll)]\n                     (c f\n                        (f init (first s))\n                        (rest s)))))))","user":"55b1e9e7e4b0da326a65cf74"},{"problem":60,"code":"(fn my-reductions\n        ([op input] (my-reductions op (first input) (rest input)))\n        ([op result input]\n         (lazy-seq\n          (if (empty? input) (list result)\n              (cons result\n                    (my-reductions op\n                                   (op result (first input))\n                                   (rest input)))))))","user":"541f89a5e4b01498b1a71a99"},{"problem":60,"code":"(fn reduc\n  ([f [head & tail]]\n   (reduc f head tail))\n  ([f value [head & tail]]\n   (lazy-seq\n     (if (nil? head)\n       (list value)\n       (cons value (reduc f (f value head) tail))))))","user":"5b62ff3ce4b0c6492753e72a"},{"code":"(fn \n  ([f coll]\n    (map-indexed \n      (fn [idx itm] \n        (reduce f (take (inc idx) coll)))\n        coll))\n  ([f ret coll]\n    (cons ret (map-indexed \n      (fn [idx itm] \n        (reduce f ret (take (inc idx) coll)))\n        coll))))","problem":60,"user":"5084c43be4b0fb8f40674bfa"},{"problem":60,"code":"(fn duce\n  ([f xs]\n   (duce f (first xs) (rest xs)))\n  ([f x xs]\n   (cons x (when (seq xs) (lazy-seq (duce f (f x (first xs)) (rest xs)))))))","user":"4f5599dfe4b0a7574ea71806"},{"problem":60,"code":"(fn  [op & x] \n(\nlet [reductions2 \n(fn  red2 [op reduction x]  \n(lazy-seq (if (empty? x) [reduction] \n(let [newreduction (op reduction (first x))] \n(cons reduction \n(red2 op newreduction (rest x)))))))\n]\n(if (= (count x) 2)\n(lazy-seq (reductions2 op (first x) (second x)))\n(lazy-seq (reductions2 op (first (first x)) (rest (first x))))))\n)","user":"568820e8e4b0dcc4269f4067"},{"problem":60,"code":"(fn myreductions ([f s]\n       (lazy-seq (cons (first s) (myreductions f (f (first s) (second s)) (drop 2 s)))))\n    ([f i s]\n     (if (empty? s)\n       (list i)\n       (let [x (f i (first s))]\n         (lazy-seq (cons i (myreductions f x (rest s))))))))","user":"5bd0ea60e4b0e9689409ee45"},{"problem":60,"code":"(fn redn\n  ([f coll]\n    (redn f (first coll) (rest coll)))\n\n  ([f init coll]\n\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (redn f (f init (first s)) (rest s)))))))","user":"56f2611fe4b04a395b9a04a2"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init (lazy-seq (if (empty? coll)\n                          nil\n                          (my-reductions f\n                                         (apply f (list init (first coll)))\n                                         (rest coll)))))))","user":"5e8c3e8fe4b0cb0169546322"},{"code":"(fn red\n   ([f sq] (red f (first sq) (rest sq)))\n   ([f v sq]\n     (if (empty? sq)\n       [v]\n       (lazy-seq (cons v (red f (f v (first sq)) (rest sq)))))))","problem":60,"user":"4fc0853ae4b081705acca327"},{"problem":60,"code":"(fn folds\n  ([f coll]\n   (folds f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq\n    (if (empty? coll)\n      (list init)\n      (cons init (folds f (f init (first coll)) (rest coll)))))))","user":"56481722e4b0284900eef628"},{"code":"(fn test60\n  ([f coll]\n     (test60 f (first coll) (rest coll)))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [[x & more] coll]\n              (test60 f (f init x) more))))))","problem":60,"user":"50b0cffae4b009df37c708c5"},{"problem":60,"code":"(fn reduction-me\n   ([func coll] (reduction-me func (first coll) (rest coll)))\n   ([func firstArg coll]\n    (letfn [(reduce-me [f init coll]\n              (when-not (empty? coll)\n                (let [val (f init (first coll))]\n                  (lazy-seq\n                    (cons val (reduce-me f val (rest coll)))))))]\n      (lazy-seq\n        (cons firstArg (reduce-me func firstArg coll))))\n     ))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":60,"code":"(fn reductions'\n  ([f coll] (reductions' f (first coll) (rest coll)))\n  ([f init coll]\n   (letfn [(reduce-step [f v1 [v2 & more]]\n             (lazy-seq\n              (if (nil? v2)\n                nil\n                (let [cur-res (f v1 v2)]\n                  (cons cur-res (reduce-step f cur-res more))))))]\n     (lazy-seq\n      (cons init (reduce-step f init coll))))))","user":"55ac07afe4b03311e7b7328f"},{"problem":60,"code":"(fn problem-60\n  ([function arg1]\n      (problem-60 function (first arg1) (rest arg1) ))\n  ([function arg1 arg2 ]\n      (if (empty? arg2)\n        [arg1]\n        (lazy-seq\n         (cons\n           arg1\n           (problem-60 function (function arg1 (first arg2)) (rest arg2)))))\n   ))","user":"583f1533e4b089d5ab817dc8"},{"code":"(fn my-reductions\n  ([f coll]\n     (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n     (cons init (lazy-seq (if-not (empty? coll) (my-reductions f (f init (first coll)) (rest coll)))))))","problem":60,"user":"511d6a01e4b022853b0e07a5"},{"code":"(fn reds\n  ([f init coll]\n     (cons init (lazy-seq (when-let [[x & xs] (seq coll)]\n                            (reds f (f init x) xs)))))\n  ([f coll]\n     (lazy-seq (when-let [[x & xs] (seq coll)]\n                 (reds f x xs)))))","problem":60,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"(fn ret \n  ([f arg] (ret f 0 (rest arg)))\n  ([f start arg]\n    (cons start\n      (lazy-seq\n        (when-let [s (seq arg)]\n          (ret\n            f\n            (f start (first s))\n            (rest s)\n          )\n        )\n      )\n    )\n  )\n)","problem":60,"user":"4f8ea1f7e4b0d4e659cdde69"},{"code":"(fn red \n\t([f collec]\n\t\t(red f (first collec) (drop 1 collec)))\n \t([f ini collec]\n\t\t(let [acc (atom ini)] (cons ini (map #(swap! acc f %) collec)))))","problem":60,"user":"51c09719e4b0c9c82288293c"},{"code":"(fn f\n  ([g     xs] (f g (first xs) (rest xs)))\n  ([g acc xs]\n   (if (empty? xs) [acc]\n     (cons acc (lazy-seq (f g (g acc (first xs)) (rest xs)))))))","problem":60,"user":"52618ea3e4b03e8d9a4a7064"},{"code":"(fn f\n  ([x [y & z]] (f x y z))\n  ([g x s] (if-let [y (first s)]\n             (cons x\n                   (lazy-seq (f g (g x y) (rest s))))\n             [x])))","problem":60,"user":"51256b40e4b05d10e3e395f8"},{"code":"(fn p60\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (p60 f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (p60 f (f init (first s)) (rest s)))))))","problem":60,"user":"4ec5bec6535d6d7199dd36b3"},{"code":"(fn reds\n  ([op items]\n   (reds op (first items) (rest items)))\n  ([op init items]\n   (if (empty? items)\n     (list init)\n     (lazy-seq (cons init (reds op (op init (first items)) (rest items)))))))","problem":60,"user":"510cd1dde4b078ea71921124"},{"problem":60,"code":"(fn f1\n         ([f ls]\n            (cond\n            (> (count (take 2 ls)) 1) (let [a (first ls) r (rest ls)]\n                                        (lazy-seq (cons a (f1 f (cons (f a (first r)) (rest r))))))\n            (> (count (take 1 ls)) 0) ls))\n         ([f init ls] (f1 f (cons init ls))))","user":"5da71eaee4b000c986472c15"},{"code":"(fn myreduce                                                                                                                                     \n    ([func args]                                                                                                                                   \n       (myreduce func (first args) (drop 1 args)))                                                                                                 \n    ([func initial args]                                                                                                                           \n       (lazy-seq                                                                                                                                   \n        (cons                                                                                                                                      \n         initial                                                                                                                                   \n         (if (empty? args)                                                                                                                         \n           nil                                                                                                                                     \n           (myreduce func (func initial (first args)) (drop 1 args)))))))","problem":60,"user":"50057f23e4b0678c553fc466"},{"problem":60,"code":"(fn reductions'\n  ([op [x & xs]] (reductions' op x xs))\n  ([op s xs] (cons s (lazy-seq (map op (reductions' op s xs) xs)))))","user":"5b500215e4b02d533a91bce2"},{"code":"(fn red\n  ([f l] (red f (first l) (rest l)))\n  ([f s l]\n    (lazy-seq\n      (cons s\n        (when-let [v (seq l)]\n          (red f (f s (first v)) (rest v)))))))","problem":60,"user":"4ff201d7e4b0678c553fc330"},{"problem":60,"code":"(fn reductions-clone\n  ([f coll]\n   (lazy-seq\n    (if-let [sec (second coll)]\n      (cons (first coll)\n            (reductions-clone f (cons (f (first coll) (second coll)) (rest (rest coll)))))\n      coll)))\n  ([f init coll]\n   (lazy-seq\n    (reductions-clone f (cons init coll)))))","user":"5f21d172e4b0f565ad998286"},{"problem":60,"code":"(fn r \n  ([f c] (r f (first c) (rest c)))\n  ([f c s] (if (empty? s)\n             [c]\n             (cons c (lazy-seq (r f (f c (first s)) (rest s)))))))","user":"5c1aadcde4b01240ff567209"},{"code":"(letfn\n  [(redux\n     ([f c] (rest (redux f (f) c)))\n     ([f i c]\n       (if (seq c)\n         (lazy-seq (let [x (f i (first c))]\n           (cons i (redux f x (rest c)))))\n       (list i))))]\n  redux)","problem":60,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn my\n  ([f aseq] (my f (first aseq) (rest aseq)))\n  ([f val todo]\n     (if (empty? todo) [val]\n         (lazy-seq (cons val\n                         (my f\n                             (f val (first todo))\n                             (rest todo)))))))","problem":60,"user":"4fa6d532e4b081705acca1be"},{"problem":60,"code":"; This is some fancy mojo.\n\n(fn reduce-\n  ([f coll] (reduce- f (first coll) (next coll)))\n  ([f init \n    [h & t :as coll]]\n   (cons init\n         (lazy-seq\n           (if (seq coll)\n             (reduce- f (f init h) t))))))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":60,"code":"(fn reduc \n  ([f ic c] (if (seq c) (cons ic (lazy-seq (reduc f (f ic (first c)) (rest c)))) (list ic))) \n  ([f c] (reduc f (first c) (rest c))))","user":"5a5894d9e4b05d388ecb6c81"},{"problem":60,"code":"(fn reductor\r\n  ([f coll]   \r\n    (reductor f (first coll) (rest coll)))\r\n  ([f init coll]      \r\n       (cons init \r\n       (lazy-seq \r\n          (if (seq coll) \r\n              (reductor f (f init (first coll) ) (rest coll) ))))))","user":"5fec4f5ee4b05ac5b16ea1bf"},{"problem":60,"code":"(fn my-reduce\n  ([f s] (my-reduce f (first s) (rest s)))\n  ([f acc s]\n   (cons acc (lazy-seq (if (empty? s) nil (my-reduce f (f acc (first s)) (rest s)))))))","user":"550c55d0e4b06e50f9beb14d"},{"problem":60,"code":"(fn rs\n    ([f [first & rest]] (rs f first rest))\n    ([f init col]\n     (if (empty? col)\n       [init]\n       (lazy-seq (cons init\n              (rs f (f init (first col)) (rest col))))\n       )\n     )\n    )","user":"5f0e8312e4b0f30dddfb5d5b"},{"code":"(fn reduc\n  ([f coll]\n   (reduc f (first coll) (rest coll)))\n  ([f s coll]\n   (if-let [add (first coll)]\n     (cons s (lazy-seq (reduc f (f s add) (rest coll))))\n     (list s))))","problem":60,"user":"50c8697ce4b00bb60fe0c53f"},{"code":"(fn red\n  ([f l]\n    (lazy-seq\n      (if-let [s (seq l)]\n        (red f (first s) (rest s))\n        (list (f)))))\n  ([f v l]\n    (cons v\n      (lazy-seq\n        (when-let [s (seq l)]\n          (red f (f v (first s)) (rest s)))))))","problem":60,"user":"503de5aae4b06c4e0e1fa259"},{"code":"(fn reducts\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reducts f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reducts f (f init (first s)) (rest s)))))))","problem":60,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"code":"(fn [& args]\r\n  (letfn [(red\r\n  ([f coll] (red f (first coll) (rest coll)))\r\n  ([f init coll]\r\n     (if-let [x (first coll)]\r\n       (lazy-seq\r\n        (cons init (red f (f init x) (rest coll))))\r\n       (cons init nil))))]\r\n    (apply red args)))","problem":60,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":60,"code":"(fn reducto\n           ([f vals]\n            (reducto f (first vals) (rest vals)))\n           ([f init vals]\n            (cons init\n                  ((fn inner\n                     [acc src]\n                     (when (seq src)\n                       (let [[head tail] ((juxt first rest) src)\n                             result (f acc head)]\n                         (cons result\n                               (lazy-seq (inner result tail))))))\n                    init vals))))","user":"530b8580e4b02e82168697cc"},{"problem":60,"code":"(fn sol\n  ([o [f & r]] (sol o f r))\n  ([o i s]\n   (if (empty? s)\n     [i]\n     (cons i (lazy-seq (sol o (o i (first s)) (rest s))))\n     ))\n  )","user":"51a058dae4b0b292b01ee3f3"},{"problem":60,"code":"(fn newreductions \n  ([f coll] \n   (newreductions f (first coll) (next coll))) \n  ([f init coll] \n   (cons init (lazy-seq (if (seq coll) (newreductions f (f init (first coll)) (rest coll)))))))","user":"56e6ef89e4b02e7e935eb6d0"},{"problem":60,"code":"(fn reduction_ \n  ([f xs]\n    (reduction_ f (first xs) (rest xs)))\n  ([f x xs] \n    (lazy-seq\n      (cons x \n        (if (seq xs) \n          (reduction_ f (f x (first xs)) (rest xs)))))))","user":"55297a7ae4b0ffed3738f94b"},{"problem":60,"code":"(fn reds \n  ([f coll]\n      (reds f (first coll) (rest coll)))\n  ([f step coll]  \n      (cons step \n        (lazy-seq\n         (cond (empty? coll) '()   \n         :else (reds f (f step (first coll)) (rest coll))\n        \n         )))))\n       \n          \n        \n\n\n          \n#_(fn reds \n  ([f coll]\n      (reds f (first coll) (lazy-seq (rest coll))))\n  ([f step coll]  \n  (lazy-seq\n   (cond (empty? coll) \n         (vector (reduce f step coll))\n       \n         :else \n         (conj (vec (reds f step (butlast coll)))\n                     (reduce f step coll)\n                    )\n         ))))\n                  \n\n\n#_(println (\n          \n(fn reds [f coll]\n  (lazy-seq\n   (cond (empty? coll) '()\n         :else (conj (vec (reds f (butlast coll)))\n                     (reduce f coll)\n      ?                           \n                    )\n         )))\n                  \n          + (range 5)\n          ))","user":"58b12635e4b0ebc645576cf4"},{"code":"(fn reduct ([f col] (reduct f (first col) (rest col)))\n           ([f acc col]\n            (let [r1 (fn reduct1\n                        ([acc col]\n                         (lazy-seq\n                           (when-let [s (seq col)]\n                             (let [acc1 (f acc (first s))]\n                               (cons\n                                 acc1\n                                 (reduct1 acc1 (rest s))))))))]\n              (cons acc (r1 acc col))\n              ))\n\n )","problem":60,"user":"525431dfe4b0541d1855b970"},{"code":"(fn r ([f s [x & xs]] (if x (cons s (lazy-seq (r f (f s x) xs))) [s])) ([f [x & xs]] (r f x xs)))","problem":60,"user":"51bd1a0de4b0df1216cefd93"},{"problem":60,"code":"(fn f\n    ([op x]\n      (f op (first x) (rest x)))\n    ([op x y]\n      (cons x (lazy-seq\n                (when (not-empty y) (f op (op x (first y)) (rest y)))))))","user":"537bde5de4b06839e8705e73"},{"problem":60,"code":"(fn __\n  ([f c] (__ f (first c) (rest c)))\n  ([f i c] (if i\n             (let [h (first c)]\n               (if h\n                 (cons i (lazy-seq (__ f (f i h) (rest c))))\n                 [i])))))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":60,"code":"(fn rdze\n  ([f c]\n   (lazy-seq\n    (rdze f (first c) (rest c))))\n  ([f i c]\n   (cons i\n         (lazy-seq\n          (when-let [c (seq c)]\n            (rdze f (f i (first c)) (rest c)))))))","user":"576e607ae4b0979f89651579"},{"problem":60,"code":"(fn reduce-lazily\n  ([f x] (lazy-seq (reduce-lazily f (first x) (lazy-seq (drop 1 x)))))\n  ([f x y] (lazy-seq (reduce-lazily f x y (vector x))))\n  ([f x y z]\n   (cons x\n    (lazy-seq\n     (when-let [a (first y)]\n      (let [b (f x a)\n            c (rest y)\n            d (conj z b)]\n       (reduce-lazily f b c d)))))))","user":"5eccc5c2e4b016b56eae058f"},{"code":"(fn red\n  ([f s]\n    (red f (first s) (rest s)))\n  ([f accu s]\n   (if (empty? s)\n       [accu]\n     (lazy-seq \n       (cons accu \n         (red f (f accu (first s)) (rest s)))))))","problem":60,"user":"53729119e4b06d7f452d9dfc"},{"code":"(fn reduce_result_seq [f & s]\n  (if (= 1 (count s))\n    (reduce_result_seq f (first (first s)) (rest (first s)))\n    (let [a (first s)\n          b (first (second s))\n          result (f a b)\n          remaining (rest (second s))]\n      (concat [a] (lazy-seq \n                   (if (empty? remaining) \n                     [result]\n                     (reduce_result_seq f result remaining)))))))","problem":60,"user":"51899891e4b0288ada3dbdab"},{"problem":60,"code":"(fn myreduction\n   (\n    [f coll] \n    (myreduction f (first coll) (rest coll))\n    )\n   (\n    [f init [x & xs :as coll]]\n        (cons init (\n                ;; lazy-seq [1 2 3]\n                lazy-seq \n                (if (seq coll)\n                  (myreduction f (f init x) xs )\n                  ) \n                ) \n          ) \n    ))","user":"5ac85708e4b0e27600da77ac"},{"code":"(fn red \n  ([f l] (red f (first l) (rest l)))\n  ([f s l] \n    (lazy-seq\n      (if (empty? l)\n        [s]\n        (cons s (red f (f s (first l)) (rest l)))))))","problem":60,"user":"5034b0e1e4b062bc5d7ae167"},{"code":"(fn red\n  ([f [v & s]]\n     (red f v s))\n  ([f v s]\n     (lazy-seq (cons v (if s (red f (f v (first s)) (next s)))))))","problem":60,"user":"4ef77edb535dced4c769f254"},{"problem":60,"code":"(fn n \n  ([f v s]\n  (if (not-empty s)\n    (let [r (f v (first s))]\n      (cons v (lazy-seq (n f r (rest s)))))\n    [v]))\n  ([f s]\n   (n f (first s) (rest s))))","user":"5052ab7ee4b0a561d07d8f20"},{"code":"(fn reductions2\r\n  ([f init [x & xs]] \r\n   (cons init (lazy-seq (when x (reductions2 f (f init x) xs))))) \r\n  ([f coll] \r\n   (reductions2 f (first coll) (rest coll))))","problem":60,"user":"4e1158aa535d04ed9115e7c6"},{"problem":60,"code":"(fn\n  ([func arg]\n   \n   (letfn [(gen-lazy [a b c]\n                     (lazy-seq\n                      (cons b (gen-lazy a (a b (first c)) (rest c))))\n                     )]    \n     (gen-lazy func (first arg) (rest arg))))\n  \n  ([func init arg]\n\n   (letfn [(gen-lazy [a b c]\n                     (if (empty? c) [b]\n                       (lazy-seq\n                        (cons b (gen-lazy a (a b (first c)) (rest c)))))\n                     )]     \n     (gen-lazy func init arg))))","user":"53d977f1e4b0e771c302547a"},{"problem":60,"code":"(fn myReduce\n  ([f x] (myReduce f (first x) (rest x)))\n  ([f v x] (if (empty? x)\n             (list  v)\n             (lazy-seq\n              (cons v (myReduce f (f v (first x)) (rest x)))))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":60,"code":"(fn reduce-\n  ([f coll]\n   (reduce- f (first coll) (next coll)))\n  ([f init [h & t :as coll]]\n   (cons init\n         (lazy-seq\n          (if (seq coll)\n            (reduce- f (f init h) t))))))","user":"53cb5559e4b00fb29b2212d2"},{"problem":60,"code":"(fn my-reductions\n  ([f col] (my-reductions f (first col) (rest col)))\n  ([f init col]\n   (if (seq col)\n     (cons init (lazy-seq (my-reductions f (f init (first col)) (rest col))))\n     (list init))))","user":"53571732e4b04ce2eb3ed275"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f r coll]\n   (if (empty? coll)\n     [r]\n     (cons r (lazy-seq (red f (f r (first coll)) (rest coll)))))))","user":"5550bcece4b00713264bd9ae"},{"code":"(fn partial-sums\n  ([f xs]\n    (when xs\n      (if-let [head (first xs)]\n        (partial-sums f head (next xs))\n        xs)))\n  ([f init xs]\n    (cons init\n      (when xs\n        (lazy-seq (partial-sums f (f init (first xs)) (next xs)))))))","problem":60,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn my-rdct\n  ([f col]\n    (my-rdct f (first col) (rest col)))\n  ([f i col]\n    (if (empty? col)\n        [i]\n        (lazy-seq (cons i \n                    (my-rdct f (f i (first col)) (rest col )))))))","problem":60,"user":"50435689e4b034ff00315d21"},{"problem":60,"code":"(fn rdctns\n  ([op se]\n       (rdctns\n        op\n        (first se)\n        (rest se)))\n  ([op a more]\n      (lazy-seq\n       (cons\n        a\n        (rdctns\n         op\n         a\n         (first more)\n         (rest more)))))\n  ([op a b more]\n       (if\n        (not b)\n        ()\n        (lazy-seq\n         (cons\n          (op a b)\n           (rdctns\n            op\n            (op a b)\n            (first more)\n            (rest more)))))))","user":"586a657de4b0f14aab7c88bd"},{"problem":60,"code":"(fn steps\n  ([f s] \n   (if (nil? (second s)) s \n     (lazy-seq (cons (first s) (steps f (cons (f (first s) (second s)) (drop 2 s)))))))\n  ([f r s] \n   (steps f (cons r s))))","user":"56bb9ccce4b0f26550335959"},{"problem":60,"code":"(fn mm\n  ([f col] (mm f (first col) (rest col)))\n  ([f init col] (cons init \n                      (lazy-seq \n                         (when-let [s (seq col)]\n                           (mm f (f init (first col)) (rest col)))))))","user":"535f0cbde4b04ce2eb3ed2d9"},{"code":"(fn ff\n  ([f init vals] \n    (lazy-seq \n      (if (empty? vals) \n        [init] \n        (let [v (f init (first vals))] \n          (cons init (ff f v (rest vals)))))))\n  ([f vals]\n    (ff f (first vals) (rest vals))))","problem":60,"user":"4f1fd734535d64f6031464a5"},{"problem":60,"code":"(fn my-reductions \n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (my-reductions f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (my-reductions f (f init (first s)) (rest s)))))))","user":"53b7aa6ce4b047364c0444d1"},{"problem":60,"code":"(fn myReductions\n  ([f preVal coll]\n   (lazy-seq\n    (if-let [firstVal (first coll)];if there is still some items left\n      (cons preVal (myReductions f (f preVal firstVal) (rest coll)));lazy recipe\n      (list preVal))));last item shall be containted by a seq\n  ([f coll]\n    (myReductions f (first coll) (rest coll))))","user":"556c70dae4b09a3098a524fd"},{"code":"#(letfn [\r\n  (reductions2 [f coll](lazy-seq \r\n    (if-let [s (seq coll)](reductions3 f \r\n(first s)(rest s))(list (f)))))\r\n(reductions3 [f init coll](cons init \r\n  (lazy-seq (when-let [s (seq coll)]\r\n(reductions3 f (f init (first s))\r\n(rest s))))))\r\n(dispatchred [x & y](cond (= 2 (count x))\r\n(reductions2 (first x) (second x))\r\n(= 3 (count x))\r\n(reductions3 (first x)(second x)(last x))))]\r\n(dispatchred %&))","problem":60,"user":"4ed2dd98535d44c135fd68e2"},{"problem":60,"code":"(fn my_redux\n    ([f l]\n          (if (empty? l)\n              nil\n              ((fn do_redux [a_l a_c]\n                            (lazy-seq (if (empty? a_l)\n                                          (list a_c)\n                                          (cons a_c (do_redux (rest a_l) (f a_c (first a_l))))))) (rest l) (first l))))\n    ([f i l] (my_redux f (cons i l))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn reductions2\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reductions2 f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reductions2 f (f init (first s)) (rest s)))))))","problem":60,"user":"4e8768f6535dceadca469850"},{"problem":60,"code":"(fn reductions-\n  ([f s]\n    (reductions- f (first s) (rest s)))\n  ([f v s]\n    (if (empty? s)\n      [v]\n      (cons v (lazy-seq (reductions- f (f v (first s)) (rest s)))))))","user":"55253217e4b0882d96d091ce"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n  (cond\n    ;; \"If coll contains no items, f must accept no arguments as well,\n    ;; and reduce returns the result of calling f with no arguments.\"\n    (empty? coll) (f)\n    ;; \"If coll has only 1 item, it is returned and f is not called\"\n    (= 1 (count (take 2 coll))) (lazy-seq (list (first coll)))\n    ;; Reduce in the normal way\n    :else (my-reductions f (first coll) (drop 1 coll))))\n\n  ([f val coll] ;; Tack on val only on first call\n   (cons val (my-reductions f val coll true)))\n\n  ;; Everything after initial call into sequence\n  ([f val coll is-start-of-seq]\n   (if (empty? coll) '()\n       (lazy-seq\n        (cons (f val (first coll))\n              (my-reductions f (f val (first coll)) (rest coll) true))))))","user":"5d4b2155e4b0776584bd6f28"},{"problem":60,"code":"(letfn [(rdxns \n            ([f acc [x & xs]] (if (nil? x) [acc] \n                                  (cons acc \n                                        (lazy-seq (rdxns f (f acc x) xs)))))\n            ([f coll] (rdxns f (first coll) (rest coll))))]\n    rdxns)","user":"52950ab6e4b02ebb4ef7501a"},{"problem":60,"code":"(fn r \n  ([f [x & xs]] (r f x xs))\n  ([f a [x & xs]]\n    (lazy-seq\n      (cons a (if x (r f (f a x) xs))))))","user":"5df08767e4b093ff717275bf"},{"problem":60,"code":"(fn r\n  ([f [i & xs]] (r f i xs))\n  ([f i xs] (lazy-seq (cons i (if-let [[y & ys] xs] (r f (f i y) ys))))))","user":"5e3e23d9e4b01d43a70e8e20"},{"problem":60,"code":"(fn r\n    ([f args] (r f (first args) (rest args)))\n    ([f arg1 args]\n     (cons arg1\n           (if-not (empty? args)\n             (lazy-seq (r f (f arg1 (first args)) (rest args)))))))","user":"54f26266e4b024c67c0cf8c5"},{"code":"(fn red\n  ([f coll]\n    (lazy-seq (red f (first coll) (rest coll))))\n  ([f init coll]\n    (cons init (lazy-seq (when-let [s (seq coll)] (red f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"code":"(fn foo\n  ([f ss] (foo f (first ss) (rest ss)))\n  ([f i ss]\n     (lazy-seq\n      (if-let [s (seq ss)]\n        (cons i (foo f (f i (first s)) (rest s)))\n        [i]))))","problem":60,"user":"4f713878e4b07046d9f4f00a"},{"problem":60,"code":"(fn myfunc \n    ([func col] (myfunc func (first col) (rest col)))\n    ([func init col]\n      (cons init \n            (lazy-seq (when-not (empty? col) (myfunc func (func init (first col)) (rest col))))\n          \n        )\n      ))","user":"5654cb2de4b0f9d632dd848b"},{"code":"(fn reducts\n  ([f coll]\n   (reducts f (first coll) (rest coll)))\n  ([f initial coll]\n   (lazy-seq\n     (if-let [[x & more] coll]\n       (let [result (f initial x)]\n         (cons initial (reducts f result more)))\n     (list initial)))))","problem":60,"user":"4edecdae535d10e5ff6f533c"},{"problem":60,"code":"(fn my-reducers\n  ([f s] (my-reducers f (first s) (rest s)))\n  ([f in s] (cons in (if (empty? s)\n                               []\n                               (lazy-seq (my-reducers f (f in (first s)) (rest s)))))))","user":"53ce4cd4e4b00fb29b2212ef"},{"problem":60,"code":"(fn reducs\n  ([f coll]\n   (reducs f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq\n    (if (seq coll)\n      (let [a (f init (first coll))]\n        (cons init\n              (reducs f a (rest coll))))\n      (list init)))))","user":"556323b5e4b0c656e3ff17e5"},{"problem":60,"code":"(fn reduct\n  ([f coll] (reduct f (first coll) (next coll)))\n  ([f n [h & t :as coll]]\n   (cons n\n         (lazy-seq\n          (if (seq coll)\n            (reduct f (f n h) t))))))","user":"56efb3a3e4b04a395b9a0463"},{"code":"(fn func\n  ([f c]\n   (func f (first c) (rest c)))\n  ([f v c] (if (seq c)\n             (let [cur (f v (first c))]\n               (lazy-seq (cons v (func f cur (rest c)))))\n             (lazy-seq [v]))))","problem":60,"user":"533ee560e4b085b17e897d98"},{"code":"(fn reduktions\n  ([f coll]\n     (reduktions f (first coll) (rest coll)))\n  ([f initial coll]\n     (if (seq coll)\n       (let [initial* (f initial (first coll))\n             coll*    (rest coll)]\n         (lazy-seq (cons initial (reduktions f initial* coll*))))\n       [initial])))","problem":60,"user":"511623cbe4b0d4f670fd2fe1"},{"problem":60,"code":"(fn rf\n  ([f coll] (rf f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq (cons init (rf init f init coll))))\n  ([acc f init coll]\n   (lazy-seq\n    (let [acc (f acc (first coll))]\n      (cons acc (and (seq (rest coll)) (rf acc f init (rest coll))))))))","user":"5e7df614e4b085ba37836e32"},{"code":"(fn\n  ([f xs1] (let [red1 (fn ([fin ac0 xs]\n                 (let [inner (fn [fin acc xss]\n                                 (if (empty? xss) []\n                                    (let [r (f acc (first xss))]\n                                      (lazy-seq (cons r (fin fin r (next xss)))))))]\n                   (cons ac0 (inner inner ac0 xs)))))]\n                (cons (first xs1) (red1 f (f (first xs1) (second xs1)) (next (next xs1))))))\n  ([f ac0 xs2]\n    (let [red2 (fn [fin acc xs]\n                 (let [inner (fn [fin acc xss]\n                                 (if (empty? xss) []\n                                    (let [r (f acc (first xss))]\n                                      (lazy-seq (cons r (fin fin r (next xss)))))))]\n                   (cons ac0 (inner inner ac0 xs))))]\n      (red2 red2 ac0 xs2))))","problem":60,"user":"4f2a35ace4b0d6649770a03a"},{"code":"; (defn- make-accumulator ([function] { :function function, :steps [] }) ([function initial-value] { :function function, :steps [], :value initial-value }))\n\n; (defn- update-accumulator [accumulator new-value] (if (contains? accumulator :value) (let [result-value ((:function accumulator) (:value accumulator) new-value)] { :function (:function accumulator), :value result-value, :steps (conj (:steps accumulator) result-value) }) { :function (:function accumulator), :value new-value, :steps (conj (:steps accumulator) new-value) }))\n\n; (defn- reduct-seq [accumulator collection] (if (empty? collection) () (let [new-accumulator (update-accumulator accumulator (first collection))] (cons (:value new-accumulator) (lazy-seq (reduct-seq new-accumulator (rest collection)))))))\n\n(fn reduct \n  ([function collection]\n   (letfn [\n     (make-accumulator ([function] { :function function, :steps [] }) ([function initial-value] { :function function, :steps [] }))\n     (update-accumulator [accumulator new-value] (if (contains? accumulator :value) (let [result-value ((:function accumulator) (:value accumulator) new-value)] { :function (:function accumulator), :value result-value, :steps (conj (:steps accumulator) result-value) }) { :function (:function accumulator), :value new-value, :steps (conj (:steps accumulator) new-value) }))\n     (reduct-seq [accumulator collection] (if (empty? collection) () (let [new-accumulator (update-accumulator accumulator (first collection))] (cons (:value new-accumulator) (lazy-seq (reduct-seq new-accumulator (rest collection)))))))]                \n   (reduct-seq (make-accumulator function) collection)))\n  ([function initial-value collection] \n   (letfn [\n     (make-accumulator ([function] { :function function, :steps [] }) ([function initial-value] { :function function, :steps [] }))\n     (update-accumulator [accumulator new-value] (if (contains? accumulator :value) (let [result-value ((:function accumulator) (:value accumulator) new-value)] { :function (:function accumulator), :value result-value, :steps (conj (:steps accumulator) result-value) }) { :function (:function accumulator), :value new-value, :steps (conj (:steps accumulator) new-value) }))\n     (reduct-seq [accumulator collection] (if (empty? collection) () (let [new-accumulator (update-accumulator accumulator (first collection))] (cons (:value new-accumulator) (lazy-seq (reduct-seq new-accumulator (rest collection)))))))]\n   (reduct-seq (make-accumulator function initial-value) (cons initial-value collection)))))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n; (defn make-accumulator ([function] { :function function, :steps [] }) ([function initial-value] { :function function, :steps [], :value initial-value }))\n\n; (defn update-accumulator [accumulator new-value] (if (contains? accumulator :value) (let [result-value ((:function accumulator) (:value accumulator) new-value)] { :function (:function accumulator), :value result-value, :steps (conj (:steps accumulator) result-value) }) { :function (:function accumulator), :value new-value, :steps (conj (:steps accumulator) new-value) }))\n\n; (defn reduct-seq [accumulator collection] (if (empty? collection) () (let [new-accumulator (update-accumulator accumulator (first collection))] (cons (:value new-accumulator) (lazy-seq (reduct-seq new-accumulator (rest collection)))))))\n\n; (defn reduct ([function collection] (reduct-seq (make-accumulator function) collection)) ([function initial-value collection] (reduct-seq (make-accumulator function initial-value) collection)))","problem":60,"user":"52f10094e4b05e3f0be25ee8"},{"code":"(fn p60\r\n  ([func coll]\r\n     (p60 func (first coll) (rest coll)))\r\n  ([func init coll]\r\n     `(~init\r\n       ~@((fn step [coll prev]\r\n            (if (empty? coll)\r\n              '()\r\n              (lazy-seq\r\n               (let [v (func prev (first coll))]\r\n                 `(~v ~@(step (rest coll) v))))))\r\n          coll init))))","problem":60,"user":"4de2f44f535d08e6dec9fdec"},{"code":"(letfn\n  [(red\n     ([f carry l]\n      (if (= '() l)\n        (list carry)\n        (lazy-seq\n          (let [v (f carry (first l))]\n            (cons carry (red f v (rest l)))))))\n     ([f l]\n      (if (= '() l)\n        '()\n        (red f (first l) (rest l)))))]\n  red)","problem":60,"user":"50b668dde4b08fb537db98f2"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f v coll]\n   (lazy-seq\n    (cons v (when-not (empty? coll)\n              (my-reductions f (f v (first coll)) (rest coll)))))))","user":"541b1f25e4b01498b1a71a63"},{"problem":60,"code":"(fn _reductions\n  ([f [x & xs]]\n   (_reductions f x xs))\n  \n  ([f init [x & xs]]\n   (cons init (lazy-seq (when x (_reductions f (f init x) xs))))))","user":"55e7d06ee4b050e68259b496"},{"problem":60,"code":"(letfn [(ir [f v c]\n          (cond (nil? (first c)) '()\n                :else (let [nv (f v (first c))]\n                        (cons nv (lazy-seq (ir f nv (rest c)))))))\n        (red \n          ([f coll]\n             (red f (first coll) (rest coll)))\n          ([f val coll]\n             (cons val (ir f val coll))))]\n  red)","user":"538e36c7e4b0b51d73faae81"},{"problem":60,"code":"(fn rd\n    ([f coll]\n     (rd f (first coll) (rest coll)))\n    ([f init coll]\n     (letfn [(it [f init coll]\n                (lazy-seq\n                  (when-let [fcoll (first coll)]\n                    (let [n (f init fcoll)]\n                      (cons n (it f n (rest coll)))))))]\n      (cons init (it f init coll)))))","user":"4e837808535db62dc21a62d9"},{"problem":60,"code":"(fn \n  ([f l]\n   (map-indexed \n    (fn [id it]\n      (reduce f (take (+ 1 id) l))) l))\n  ([f i l]\n   (cons i (map-indexed \n    (fn [id it]\n      (reduce f i (take (+ 1 id)  l))) l))))","user":"54edcf96e4b024c67c0cf866"},{"problem":60,"code":"(fn b\n  ([f coll]\n   (b f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll)\n     (list init)\n     (lazy-seq\n       (cons init \n             (b f \n                (f init (first coll))\n                (rest coll)))))))","user":"59bac5c9e4b0a024fb6ae3ed"},{"problem":60,"code":"(fn my-reduce \n  ([f coll] (my-reduce f (first coll) (rest coll)))\n  ([f init coll] \n    (cons init\n          (lazy-seq\n           (when-let [s (seq coll)]\n             (my-reduce f (f init (first s)) (rest s)))))\n  )\n)","user":"5a12dea3e4b04bbd27e6da44"},{"problem":60,"code":"(fn seq-reduction \n  ([f e0 sq] (lazy-seq\n               (let [hd (first sq)\n                     tl (next sq)\n                     updated-acc (f e0 hd)]\n                 (if tl\n                   (cons e0 (seq-reduction f updated-acc tl))\n                   (cons e0 (cons updated-acc nil))))))\n  ([f sq] (seq-reduction f (first sq) (next sq))))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"problem":60,"code":"(fn reduction*\n  ([f [p1 & ps]] (reduction* f p1 ps))\n  ([f p1 [p2 & ps]]\n   (cons p1\n         (when p2\n           (lazy-seq (reduction* f (f p1 p2) ps))))))","user":"4f40c46fe4b0e243712b1fbe"},{"problem":60,"code":"(fn reds\n  ([f coll]\n   (lazy-seq\n    (if-let [s (seq coll)]\n      (reds f (first coll) (rest coll))\n      (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (reds f (f init (first s)) (rest s)))))))","user":"5532a04ee4b09218d5f44f82"},{"problem":60,"code":"(fn myredx\n  ([f init seq]\n   (lazy-seq\n     (if (empty? seq)\n       (list init)\n       (cons init (myredx f (f init (first seq)) (rest seq))))))\n  ([f seq]\n   (myredx f (first seq) (rest seq))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":60,"code":"(fn reductions'\n    ([f coll]\n     (reductions' f\n                  (first coll)\n                  (rest  coll)))\n    ([f val coll]\n     (lazy-seq\n      (if (seq coll)\n        (cons val\n              (reductions' f\n                           (f val\n                              (first coll))\n                           (rest coll)))\n        (list val)))))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":60,"code":"(fn red \n  ([f coll] (red f (first coll) (rest coll)))\n  ([f v coll]\n   (if (seq coll)\n     (cons v (lazy-seq (red f (f v (first coll)) (rest coll))))\n     [v])))","user":"4f3ca5a6e4b0e243712b1f53"},{"code":"(fn __\n  ([f [x & xs]] (__ f x xs))\n  ([f init [x & xs :as coll]]\n     (cons init (lazy-seq (if (seq coll)\n                         (__ f (f init x) xs))))))","problem":60,"user":"4fceda40e4b03432b189f407"},{"code":"(fn my-reductions\n\t([f coll]\n\t (if (seq coll)\n\t     (my-reductions f (first coll)\n\t\t\t  (rest coll))\n\t   (list (f))))\n\t([f init coll]\n\t (if (seq coll)\n\t     (cons init\n\t\t   (lazy-seq\n\t\t    (let [[head & tail] coll]\n\t\t\t(my-reductions f (f init head) tail))))\n\t   (list init))))","problem":60,"user":"52381b2ae4b0fae3832e99ef"},{"code":"(fn f\n  ([g s] (f g (first s) (next s)))\n  ([g i s]\n   (cons i\n         (lazy-seq\n           (when (first s)\n             (f g (g i (first s)) (next s)))))))","problem":60,"user":"4f954dbce4b0dcca54ed6ccd"},{"code":"(fn reduc\n  ([f coll] (reduc f (first coll) (rest coll)))\n  ([f start coll]\n    (if (seq coll)\n      (lazy-seq\n        (let [accum (f start (first coll))]\n          (cons start (reduc f accum (rest coll)))))\n      (list start))))","problem":60,"user":"4f7f9665e4b033992c121bea"},{"code":"(fn rr \n  ([f s] (rr f (first s) (rest s)))\n  ([f init s] \n   (lazy-seq (cons init (when (not (empty? s)) \n                          (rr f (f init (first s)) (rest s)))))))","problem":60,"user":"519ef784e4b087743fad2198"},{"problem":60,"code":"(fn my-reduction\n  ([f coll]\n   (lazy-seq\n     (when-let [s (seq coll)]\n       (my-reduction f (first s) (rest s)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n             (when-let [s (seq coll)]\n               (my-reduction f (f init (first s)) (rest s)))))))","user":"5e348945e4b0650de70e2b1d"},{"problem":60,"code":"(fn red ( [f xs] (red f (first xs) (rest xs)))\n\t\t  ( [f acc xs] \n\t\t  \t(cons acc \n\t\t  \t\t(letfn [(r [f acc xs]\n\t\t\t  \t\t(when (not (empty? xs))\n\t\t\t  \t\t\t(let [fst (f acc (first xs))]\n\t\t\t  \t\t\t\t(lazy-seq (cons fst (r f fst (rest xs)))))))]\n\t\t\t  \t\t(r f acc xs)))))","user":"59fa5773e4b0ca45a743a35e"},{"problem":60,"code":"(fn reduce-it \n  ([f j] (reduce-it f (first j) (rest j)))\n  ([f i j] \n    (lazy-seq\n      (if (empty? j)\n        [i]\n        (let [result (f i (first j))]\n          (cons i (reduce-it f result (rest j))))))))","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":60,"code":"(fn seduce\n  ([f [h & t]]\n   (if t\n     (seduce f h t)\n     [h]))\n  \n  ([f val [h & t :as xs]]\n   (cons val\n     (if xs\n       (lazy-seq\n           (seduce f (f val h) t))))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":60,"code":"(fn fr\n    ([f col] (fr f (first col) (rest col)))\n    ([f init col]\n     (cons init\n           (lazy-seq\n             (when (not (empty? col))\n               (fr f\n                   (f init (first col))\n                   (rest col)))))))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":60,"code":"(fn my-reductions\n    ([f s]\n     (my-reductions f (first s) (rest s)))\n    ([f acc s]\n     (let [new-acc (f acc (first s))]\n       (if (seq (rest s))\n         (lazy-seq (cons acc (my-reductions f new-acc (rest s))))\n         (cons acc (cons new-acc nil))))))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"(fn reducemy\n  ([f coll] \n    (if-let [s (seq coll)]\n      (reducemy f (first s) (next s))\n      (f)))\n  ([f val coll]\n    (lazy-seq \n      (if (seq coll)\n        (cons val (reducemy f (f val (first coll)) (next coll)))\n        (cons val '())))))","problem":60,"user":"4e7f5a0b535db966e863cc41"},{"problem":60,"code":"(fn\n   \n      ([a b]\n    (for\n      [x (range  1 100)\n      :while (not(and(< 1 (count (take (dec x) b)))(=(take x b)(take (dec x) b))))]\n      (reduce a (take x b)))\n    )\n   \n   ([a b c]\n    (for\n      [x (range 100)\n      :while (not(and(< 1 (count (take (dec x) c)))(=(take x c)(take (dec x) c))))]\n      (reduce a b (take x c)))\n    )\n   \n   )","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn local-reductions\n    ([ func collection ]\n       (local-reductions func (first collection) (rest collection)))\n    ([ func init collection ]\n       (cons init (lazy-seq\n                   (when-let [my-seq (seq collection)]\n                       (local-reductions func\n                                         (func init (first my-seq))\n                                         (rest my-seq)))))))","problem":60,"user":"4f4a8707e4b0d56e7bb92c12"},{"code":"(fn r ([f [h & t]] (r f h t))\n  ([f i l] \n    (if l (lazy-seq \n              (cons i (r f (f i (first l)) (next l)))) [i])))","problem":60,"user":"4fa30027e4b081705acca187"},{"code":"(fn my-reduce\n  ([f s] (my-reduce f (first s) (rest s)))\n  ([f initial-value s]\n   (if (not (empty? s))\n     (let [current-value (f initial-value (first s))]\n        (cons initial-value (lazy-seq (my-reduce f current-value (rest s)))))\n     (cons initial-value ()))))","problem":60,"user":"53527551e4b084c2834f4af0"},{"code":"(fn reductions' \n  ([f [x & xs]] (reductions' f x xs))\n  ([f acc xs] \n    (lazy-seq \n      (if-let [[x & xs] (seq xs)]\n        (cons acc (reductions' f (f acc x) xs))\n        (list acc)))))","problem":60,"user":"528a2de7e4b0239c8a67ae71"},{"problem":60,"code":"(fn sr\n  ([f coll]\n   (sr f (first coll) (rest coll)))\n  ([f last-result coll]\n   (if (empty? coll)\n     (cons last-result '())\n     (lazy-seq\n      (cons last-result (sr f (f last-result (first coll)) (rest coll)))))))","user":"5980f91ae4b021a7a535fddd"},{"code":"(fn rd\n  ([f i coll]\n     (if (empty? coll)\n       [i]\n       (let [r (f i (first coll))]\n         (lazy-seq (cons i (rd f r (next coll)))))))\n  ([f coll]\n     (if (empty? coll)\n       []\n       (rd f (first coll) (next coll)))))","problem":60,"user":"4f8bbb27e4b02e764a0a5182"},{"code":"(fn redu \n      ([f i s]\n        (if (seq s)\n          (lazy-seq\n            (cons i\n                  (redu f (f i (first s)) (rest s))))\n          [i]))\n      ([f s]\n        (redu f (first s) (rest s))))","problem":60,"user":"4ee26f01535d10e5ff6f5368"},{"problem":60,"code":"(fn sequence-reductions\n  ([f coll]\n   (sequence-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (if-let [s (seq coll)]\n     (cons init\n           (lazy-seq (sequence-reductions f (f init (first s)) (rest s))))\n     (list init))))","user":"5bf5ddfde4b0bdcf453d159e"},{"code":"(fn red\n  ([f xs] (red f (first xs) (rest xs)))\n  ([f val xs]\n    (if (empty? xs) [val]\n      (cons val\n        (lazy-seq (red f (f val (first xs)) (rest xs)))))))","problem":60,"user":"504f57c7e4b0a02f9cffde71"},{"code":"(fn reduce-it\n  ([fun coll]\n     (lazy-seq\n      (let [s (seq coll)]\n        (if s\n          (reduce-it fun (first s) (rest s))\n          (list (fun))))))\n  ([fun val coll]\n     (cons val\n           (lazy-seq\n            (let [s (seq coll)]\n              (when s\n                (reduce-it fun (fun val (first s))\n                           (rest s))))))))","problem":60,"user":"5005b57de4b0678c553fc46a"},{"code":"(fn rs \n  ([f coll]\n    (lazy-seq\n      (when-let [s (seq coll)]\n        (rs f (first s) (rest s)))))\n  ([f init coll]\n    (lazy-seq\n      (cons init\n        (when-let [s (seq coll)]\n          (rs f (f init (first s)) (rest s)))))))","problem":60,"user":"50fc299ee4b0d10d794c19f2"},{"code":"(fn reduction\n  ([f coll]\n   (lazy-seq\n     (if-let [s coll]\n       (reduction f (first coll) (rest coll))\n       (vector (f)))\n    )\n   )\n  ([f init coll]\n   (cons init (lazy-seq(\n               if (empty? coll) [] (reduction f (f init (first coll)) (rest coll))\n               )))\n   )\n  )","problem":60,"user":"51da7e49e4b02ceefd947768"},{"problem":60,"code":"(fn mf\n  ([f [a1 & s1]] \n   (lazy-seq (cons a1 (mf f (cons (f a1 (first s1)) (rest s1))))))\n  ([f sa [a1 & s1]]\n   (take (+ 2 (count s1)) (lazy-seq (cons sa (mf f (f sa (if (nil? a1) 0 a1)) s1))))))","user":"56ab7578e4b03c432f18733d"},{"problem":60,"code":"(fn reduct2\n  ([func coll] (reduct2 func (first coll) (rest coll)))\n  ([func init coll] \n   (lazy-seq\n    (if (empty? coll) (list init)\n      (cons init \n            (reduct2 func \n                     (func init (first coll))\n                     (rest coll)))))))","user":"541f5b37e4b01498b1a71a97"},{"problem":60,"code":"(fn reduces \n  ([func init seq]\n  (cons \n   init \n   ((fn doreduce [previous [f & m]]\n      (let [next (func previous f)]\n        (if (nil? m)\n          (list next)\n          (cons next (lazy-seq (doreduce next m))))))\n    init seq)))\n  ([func [init & more]]\n  (reduces func init more)))","user":"5654e024e4b0f9d632dd848d"},{"problem":60,"code":"(fn reducy\n  ([fy coll] (reducy fy (first coll) (rest coll)))\n  ([fy agg coll]\n   (if (empty? coll)\n     [agg]\n     (lazy-seq (cons agg\n                   (reducy fy (fy agg (first coll)) (rest coll)))))))","user":"5a527beee4b05d388ecb6bfe"},{"code":"(fn rds [f xs & ys]\n  (if (empty? ys) (rds f (first xs) (rest xs))\n      (cons xs ((fn rf [x xs]\n                  (if (empty? xs) nil\n                      (let [r (f x (first xs))]\n                        (lazy-seq \n                          (cons r (rf r (rest xs)))))))\n                  xs (first ys)))))","problem":60,"user":"4ee82ce9535d93acb0a6687a"},{"code":"(fn me\n  ([f l] (me f (first l) (next l)))\n  ([f z l]\n    (let [r (f z (first l)) l (next l)]\n      (if l\n        (cons z (lazy-seq (me f r l)))\n        (list z r)))))","problem":60,"user":"5349ac2be4b084c2834f4a67"},{"problem":60,"code":"(fn my-reductions\n  ([f init coll]\n   (lazy-seq\n    (cons init\n          (if-let [next-arg (first coll)]\n            (my-reductions f (f init (first coll)) (rest coll))))))\n  ([f coll] (my-reductions f (first coll) (rest coll))))","user":"5b7f2d75e4b047b03b203768"},{"problem":60,"code":"(fn keep-reduce\n  ([f coll] (keep-reduce f (first coll) (rest coll)))\n  ([f val coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (let [result (f val (first s))]\n         (cons val\n               (keep-reduce f result (rest s))))\n       (list val)))))","user":"594266cfe4b060784b3b790b"},{"problem":60,"code":"(fn greductions\n  ([f coll]\n\t\t  (greductions f (first coll) (rest coll)))\n\t ([f init [h & t :as coll]]\n   (lazy-seq\n\t\t\t  (cons init\n\t\t\t    (if (seq coll)\n\t\t\t      (greductions f (f init h) t))))))","user":"5ab276f2e4b073f1774425e6"},{"code":"(fn my-reductions\n        ([f col]\n           (my-reductions f (first col) (rest col)))\n        ([f initial col]\n           (cons initial\n                 (when (seq col)\n                   (lazy-seq (my-reductions f (f initial (first col))\n                                            (rest col)))))))","problem":60,"user":"4e589bdc535d8a8b8723a295"},{"problem":60,"code":"(fn r\n  ([f coll]\n   (r f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq\n   \t(if (empty? coll)\n    \t (list init)\n     \t(cons init\n        \t   (r f (f init (first coll))\n            \t    (rest coll)))))))","user":"5893c64ce4b00487982d524b"},{"problem":60,"code":"(fn r \n  ([f [h & t]] (r f h t))\n  ([f x l] (lazy-seq (cons x (if-let [[h & t] (seq l)] (r f (f x h) t) '())))))","user":"55645592e4b0c656e3ff1802"},{"code":"(fn my-reductions\n  ([f lst]\n     (my-reductions f (first lst) (rest lst)))\n  ([f iv lst]\n     (if (empty? lst)\n       (list iv)\n       (let\n           [new-first (f iv (first lst))]\n         (cons iv\n               (lazy-seq (my-reductions f new-first (rest lst))))))))","problem":60,"user":"4f03818e535dcb61093f6b00"},{"code":"(fn reduxions\n  ([f args] (reduxions f (first args) (rest args)))\n  ([f a args] (let [r (fn r\n    [a r-args]\n    (if (empty? r-args)\n      nil\n      (let [fa (f a (first r-args))]\n        (lazy-seq\n          (cons fa (r fa (rest r-args)))))))]\n    (cons a (r a args)))))","problem":60,"user":"5070e31ee4b0e3170b5a8678"},{"code":"(fn my-reductions\n  ([f init coll]\n    (if (not-empty coll) \n      (let [new-init (f init (first coll))]\n        (lazy-seq (cons init (my-reductions f new-init (rest coll)))))\n      [init]))\n  ([f coll]\n    (if (not-empty coll)\n      (my-reductions f (first coll) (rest coll))\n      [(f)])))","problem":60,"user":"4eab612d535d7eef30807316"},{"code":"(fn reductions'\n  ([f init args]\n    (if-not (seq args)\n      [init]\n      (lazy-seq (cons init (reductions' f (f init (first args)) (rest args))))))\n  ([f args] (reductions' f (first args) (rest args))))","problem":60,"user":"5213d7aae4b0961f15ac4d72"},{"code":"(fn g\n  ([o [f & r]] (g o f r))\n  ([o s [f & r]]\n   (if f \n     (cons s (lazy-seq (g o (o s f) r)))\n     (list s))))","problem":60,"user":"52951156e4b02ebb4ef7501b"},{"problem":60,"code":"(fn my-reductions\n  ([f s]\n   (if (empty? s) (f)\n       (my-reductions f (first s) (rest s))))\n  ([f init s]\n   (if (empty? s) (list init)\n       (lazy-seq\n        (cons init\n              (my-reductions f (f init (first s)) (rest s)))))))","user":"5e38a9cbe4b01d43a70e8dc2"},{"problem":60,"code":"(fn solve\n  ([f arg] \n   (solve f (first arg) (rest arg)))\n  ([f initial arg] \n   (if (empty? arg)\n     [initial]\n     (cons initial (lazy-seq (solve f (f initial (first arg)) (rest arg))))))\n  )","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":60,"code":"(fn red\n   ([fun s] (red fun (first s) (rest s)))\n   ([fun r s]\n    (if (seq s)\n      (lazy-seq\n       (cons r (red fun (fun r (first s)) (rest s))))\n      [r])))","user":"5e5b8d92e4b0fd0acd158658"},{"problem":60,"code":"(fn red\n \n  ([f s] (red f (first s) (rest s)))\n \n  ([f r s]\n \n  (lazy-seq\n    (if (empty? s) (list r)\n      (cons r\n            (red f (f r (first s)) (rest s)))))))","user":"58a44a14e4b01a0c0b2328f2"},{"problem":60,"code":"(fn rs\n  ([f col]\n   (rs f (first col) (rest col)))\n  ([f init col]\n   (if-let [c (seq col)]\n     (cons init (lazy-seq (rs f (f init (first c)) (rest c))))\n     (list init))))","user":"54246fcce4b01498b1a71aed"},{"problem":60,"code":"(fn\n  ([f coll]\n   (letfn [(r [a coll]\n             (lazy-seq\n               (if (seq coll)\n                 (let [fst (first coll)\n                       a' (f a fst)]\n                   (cons a (r a' (rest coll))))\n                 (list a))))]\n     (if (seq coll)\n       (r (first coll) (rest coll))\n       (list (f)))))\n  ([f val coll]\n   (letfn [(r [a coll]\n             (lazy-seq\n               (if (seq coll)\n                 (let [fst (first coll)\n                       a' (f a fst)]\n                   (cons a (r a' (rest coll))))\n                 (list a))))]\n     (if (seq coll)\n       (r val coll)\n       (list val)))))","user":"52dfc89be4b09f7907dd1405"},{"problem":60,"code":"(fn r\n  ([f s] (r f (first s) (rest s)))\n  ([f a s] (if (empty? s)\n            [a]\n            (cons a\n                 (lazy-seq (r f (f a (first s)) (rest s)))))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":60,"code":"(fn r\n\n  ([f l]   (r f (first l) (rest l)))\n\n  ([f v l] (lazy-seq\n\n            (if (seq l)\n\n             (cons v (r f (f v (first l)) (rest l)))\n\n                (list v)))))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":60,"code":"(fn [f & args]\n  (letfn [ (nxt [acc s]\n                (if (empty? s)\n                  [acc]\n                  (let [new-acc (f acc (first s))\n                        rs (rest s)]\n                    (cons acc (lazy-seq (nxt new-acc rs))) )))\n           ]\n    (if (=  1 (count args))\n      (nxt (first (first args)) (rest (first args)))\n      (nxt (first args) (second args))))\n  )","user":"53c1ce3ee4b00fb29b221268"},{"problem":60,"code":"(fn reducciones\n  ([f coll]\n    (when-let [sec (seq coll)]\n      (reducciones f (first sec) (rest sec))))\n  ([f init coll]\n    (lazy-seq\n      (cons init\n            (when-let [sec (seq coll)]\n              (reducciones f (f init (first sec)) (rest sec)))))))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":60,"code":"(fn kk\n  ([fun ar]\n    (letfn [(f2 [fun2 ar2]\n              (let [arg (seq ar2) f (first arg) r (next arg) t (next r)]\n                (when r\n                  (lazy-seq (cons f (f2 fun2 (cons (fun2 f (first r)) t)))))))] \n      (let [ars (seq (concat ar (list 0)))]\n        (f2 fun ars))))\n  ([fun a1 ar]\n    (letfn [(f2 [fun2 ar2]\n              (let [arg (seq ar2) f (first arg) r (next arg) t (next r)]\n                (when r\n                  (lazy-seq (cons f (f2 fun2 (cons (fun2 f (first r)) t)))))))] \n      (let [ars (seq (concat (cons a1 ar) (list 0)))]\n        (f2 fun ars)))))","user":"5243e37ae4b076204b44fae3"},{"problem":60,"code":"(fn red\n  ([f c] (red f (first c) (rest c)))\n  ([f v c]\n   (letfn [(this [r xs]\n             (cons r\n                   (lazy-seq\n                    (when-not (empty? xs)\n                      (this (f r (first xs)) (rest xs))))))]\n     (this v c))))","user":"55201d18e4b08d5046aa8a5d"},{"code":"(letfn [\n  \n(iter [f interm lst]\n (if (empty? lst) '()\n  (let [interm (f interm (first lst)) ]\n   (cons interm (lazy-seq (iter f interm (rest lst))))))) ]\n\n(fn\n ([f lst] (cons (first lst) (iter f (first lst) (rest lst))))\n ([f interm lst] (cons interm (iter f interm lst)))))","problem":60,"user":"4e356d2b535deb9a81d77f2d"},{"problem":60,"code":"(fn my-reduce ([func initial rando-seq]\n                 (cons initial\n                       (lazy-seq (if (empty? rando-seq) nil (my-reduce func (func initial (first rando-seq)) (rest rando-seq))))))\n  ([func [head & tail]]\n   (my-reduce func head tail)))","user":"607d6bc1e4b03d835a6eaecc"},{"code":"(fn reduc ([f a coll]\n  (lazy-seq (if (seq coll) \n              (let [acc (f a (first coll))] (cons a (reduc f acc (rest coll))))\n              [a])))\n  ([f coll]\n    (reduc f (first coll) (rest coll))))","problem":60,"user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn zeductions \n  ([f coll]\n    (when-let [s (seq coll)]\n      (zeductions f (first s) (rest s))))\n  ([f init coll] \n    (cons init\n      (lazy-seq\n        (when-let [s (seq coll)]\n\t        (zeductions f (f init (first s)) (rest s)))))))","problem":60,"user":"4e5fdd68535d8ccf87e9fe4f"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (when-let [s (seq coll)]\n     (my-reductions f (first s) (rest s))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (my-reductions f (f init (first s)) (rest s)))))))","user":"550615c0e4b021ccfedb9696"},{"problem":60,"code":"(fn seq-reduce\n  ([f init lst]\n   (if (empty? lst)\n     [init]\n     (let [[item & remaining] lst\n           next-init (f init item)]\n       (cons init (lazy-seq (seq-reduce f next-init remaining))))))\n  ([f lst]\n   (if (empty? lst)\n     (list (f))\n     (seq-reduce f (first lst) (rest lst)))))","user":"53fb5256e4b0de5c4184857f"},{"problem":60,"code":"(fn r ([f v s]\r\n           (lazy-seq\r\n            (cons v\r\n                  (if (seq s)\r\n                    (r f (f v (first s)) (rest s))))))\r\n  ([f s] (r f (first s) (rest s))))","user":"58f45ea0e4b0438e51c2cebc"},{"code":"(fn f\n   ([op [a & b]] (f op a b))\n   ([op a [b & c]] (cons a (if b (lazy-seq (f op (op a b) c))))))","problem":60,"user":"4f036d9b535dcb61093f6ac1"},{"problem":60,"code":"(fn reductions* \n  ([f s]\n    (reductions* f (first s) (rest s)))\n  ([f i s]\n   (lazy-seq\n    (map #(reduce f i %)\n         (map #(take % s) (if (counted? s)\n                            (range (inc (count s)))\n                            (range)))))))","user":"553b0d95e4b09218d5f44fff"},{"code":"(fn reduc\n  ([f s] (reduc f (first s) (rest s)))\n  ([f v s]\n   (if (empty? s)\n     (list v)\n     (cons v (lazy-seq (reduc f (f v (first s)) (rest s)))))))","problem":60,"user":"526439a4e4b03e8d9a4a70cc"},{"code":"(fn sr\n  ([f s] (sr f (first s) (rest s)))\n  ([f v s]\n   (if (empty? s)\n     [v]\n     (cons v (lazy-seq (sr f (f v (first s)) (rest s)))))))","problem":60,"user":"513b43ede4b067e25a345ed3"},{"problem":60,"code":"(fn redr\n  ([f xs]\n    (redr f (first xs) (rest xs)))\n  ([f ini xs]\n    (if (seq xs)\n        (cons ini (lazy-seq (redr f (f ini (first xs)) (rest xs))))\n        (list ini))))","user":"548fa2dfe4b0e286459a1240"},{"problem":60,"code":"(fn __\n  ([function [first-of-collection & rest-of-collection]]\n   (__ function first-of-collection rest-of-collection))\n  ([function initial-value [first-of-collection & rest-of-collection]]\n   (if (nil? first-of-collection)\n     (list initial-value)\n     (lazy-seq (cons initial-value (__ function (function initial-value first-of-collection) rest-of-collection))))))","user":"5ac91d90e4b0e27600da77bd"},{"problem":60,"code":"(fn myred\n  ([f c]\n    (lazy-seq (myred f (first c) (rest c))))\n  ([f v c] (cons v (if (not (empty? c))\n                     (lazy-seq (myred f (f v (first c)) (rest c)))))))","user":"54e24a05e4b024c67c0cf7ce"},{"problem":60,"code":"(fn reduce4clojure\n\n  ([f coll] (reduce4clojure f (first coll) (rest coll)))\n\n  ([f val coll]\n   (lazy-seq\n     (if (empty? coll) (vector val)\n                       (cons val (reduce4clojure f (f val (first coll)) (rest coll)))))))","user":"52c5c1c8e4b0c2d177d620fc"},{"code":"(fn my-reductions\n\t([f coll] \n\t\t(my-reductions f (first coll) (rest coll)))\n\t([f seed coll] \n\t\t(if (empty? coll) [seed] (cons seed (lazy-seq (my-reductions f (f seed (first coll)) (rest coll)))))))","problem":60,"user":"52cdb7efe4b07d0d72b2737c"},{"code":"(fn my-reductions\n  ([op s] (my-reductions op (first s) (rest s)))\n  ([op init s]\n     (cons init\n           (if-not (empty? s)\n             (lazy-seq (my-reductions op (op init (first s)) (rest s)))))))","problem":60,"user":"50c2fbebe4b00e537d00253c"},{"code":"(fn r ([f v s]\n           (lazy-seq\n            (cons v\n                  (if (seq s)\n                    (r f (f v (first s)) (rest s))))))\n  ([f s] (r f (first s) (rest s))))","problem":60,"user":"4fa340b4e4b081705acca18c"},{"problem":60,"code":"(fn myreduce ([fun [f & others]] (myreduce fun (fun 0 f ) others))\n  ([fun acc [f & others]] \n    (if (nil? f)\n      [acc]\n      (cons acc (lazy-seq (myreduce fun (fun acc f) others))))))","user":"5df0c6ffe4b093ff717275c2"},{"code":"(fn reds ([f [h & t]] (reds f h t))\r\n  ([f i s]\r\n    (if (empty? s) (list i)\r\n      (lazy-seq (cons i (reds f (f i (first s)) (rest s)))))))","problem":60,"user":"504e14c2e4b078edc5f593bf"},{"code":"(fn r\n  ([g fst s] (if (empty? s) [fst] (cons fst (lazy-seq (r g (g fst (first s)) (rest s)))))) \n  ([g s] (if (empty? s) (g) (r g (first s) (rest s)))))","problem":60,"user":"4e1350af535d04ed9115e7d8"},{"problem":60,"code":"(fn reductions'\n  ([f s] (reductions' f (first s) (rest s)))\n  ([f i s]\n   (lazy-seq\n    (if-let [x (first s)]\n      (cons i (reductions' f (f i x) (rest s)))\n      (list i)))))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":60,"code":"(fn red\n  ([f bs] (red f (first bs) (rest bs)))\n  ([f a bs] (cons a \n                  (if (seq bs)\n                    (lazy-seq (red f (f a (first bs)) (rest bs)))))))","user":"53dcf474e4b0d874e779ae25"},{"problem":60,"code":"(fn my-red2\n  ([func initial_value lst]\n   (if (empty? lst) (list initial_value)\n       (lazy-cat (list initial_value) (my-red2 func (func initial_value (first lst)) (rest lst)))))\n  ([func lst]\n   (if (empty? lst) '(0)\n       (my-red2 func (first lst) (rest lst)))))","user":"51b76227e4b0d906fcd71d35"},{"problem":60,"code":"(fn clj60\n  ([f coll] (clj60 f (first coll) (rest coll)))\n  ([f r coll]\n   (lazy-seq\n     (if (empty? coll)\n       (list r)\n       (cons r\n             (clj60 f\n                    (f r (first coll))\n                    (rest coll)))))))","user":"52474133e4b05ef8e38e635e"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (f (first coll)) (rest coll)))\n  ([f val coll]\n   (map (fn [el] (reduce f val (take el coll))) \n        (concat [0] (map-indexed (fn [i _] (inc i)) coll)))))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":60,"code":"(fn r\n  ([f s] (r f (first s) (rest s)))\n  ([f i s]\n    (cons\n      i\n      (if (empty? s) '() (lazy-seq (r f (f i (first s)) (rest s)))))))","user":"536046a9e4b063bf7a5f8fe1"},{"code":"(fn reds\n  ([f args]\n    (if (sequential? args)\n        (reds f (first args) (rest args))\n        [f]))\n  ([f start args]\n    (cons start\n      (lazy-seq\n        (when-let [args (seq args)]\n          (reds f (f start (first args)) (rest args)))))))","problem":60,"user":"500900dee4b0144d4f561e42"},{"problem":60,"code":"(fn r\n  ([f coll](r f (first coll) (rest coll)))\n  ([f i coll](\n               cons i (lazy-seq (when-let [c (seq coll)] (r f (f i (first c)) (rest c))))\n               ))\n  )","user":"546280d8e4b01be26fd746b0"},{"problem":60,"code":"(fn clj-60\n  ([f coll] (clj-60 f (first coll) (next coll)))\n  ([f init [h & t :as coll]]\n   (cons init \n         (lazy-seq \n          (when (seq coll)\n            (clj-60 f (f init h) t))))))","user":"54ab1b5ae4b09f271ff37cc2"},{"problem":60,"code":"(fn r\n  ([f coll]\n   (if-let [s (seq coll)]\n     (r f (first s) (rest s))\n     (list (f))))\n  ([f init coll]\n   (lazy-seq\n    (cons init\n          (when-let [s (seq coll)]\n            (r f (f init (first s)) (rest s)))))))","user":"58e58ae9e4b056aecfd47c9a"},{"code":"(fn reduction\n  ([f coll]\n    (reduction f (first coll) (rest coll)))\n  ([f init [x & xs]]\n    (cons init (lazy-seq (when x (reduction f (f init x) xs))))))","problem":60,"user":"518a59b3e4b02bf06f6bbb4b"},{"problem":60,"code":"(fn f\n    ([fun coll]\n     (f fun (first coll) (rest coll)))\n    ([fun value coll]\n     (lazy-seq\n       (cond (empty? coll) [value]\n             :else         (cons value (f fun (fun value (first coll)) (rest coll)))))))","user":"56df62eee4b0ca2494a095f0"},{"problem":60,"code":"(fn myred\n  ([f s]\n   (myred f (first s) (rest s)))\n  ([f i s]\n    (lazy-seq \n     (if (empty? s)\n        [i]\n        (let [x (f i (first s))]\n          (cons i (myred f x (rest s))))))))","user":"55995fa7e4b031d6649c9ba9"},{"problem":60,"code":"(fn g\n  ([f [v & n]] (g f v n))\n  ([f r [v & n]]\n    (cons\n      r\n      (when v (lazy-seq (g f (f r v) n))))))","user":"559279b7e4b0604b3f94d58c"},{"code":"#(letfn [(rdct [fun init [f & r :as lst]]\n          (lazy-seq\n            (if (empty? lst)\n              [init]\n              (let [res (fun init f)]\n                (cons init (rdct fun res r))))))]\n   (if (= 3 (count %&))\n    (apply rdct %&)\n    (let [[fun elts] %&]\n      (rdct fun (first elts) (rest elts)))))","problem":60,"user":"4fb1d907e4b081705acca282"},{"code":"(fn myred  \n  ([f cols] \n      (myred f (first cols) (rest cols))    \n  )\n  ([f val cols]\n      (\n        (fn seq [f preview col]       \n             (lazy-seq                  \n                (cons                 \n\t                 preview\n                  (when (not (empty? col) )\n                      (seq  f \n                            (f preview (first col)) \n                            (rest col) )\n                     )\n\t                )              \n               )         \n                        \n          ) f val cols)      \n  )\n)","problem":60,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn f ([g i a] (if (nil? a) (list i) (cons i (lazy-seq (f g (g i (first a)) (next a))))) ) ([g a] (f g (first a) (rest a))))","problem":60,"user":"52c6a0abe4b0c2d177d62111"},{"problem":60,"code":"(fn f\n  ([g [x & xs]]\n    (f g x xs))\n  ([g init [x & xs]]\n   (if (nil? x)\n     [init]\n     (lazy-seq (cons init (f g (g init x) xs))))))","user":"5012da69e4b0c8732600222d"},{"code":"(fn reductions2\n  ([f init [x & xs]] \n   (cons init (lazy-seq (when x (reductions2 f (f init x) xs))))) \n  ([f [x & xs]] \n   (reductions2 f x xs)))","problem":60,"user":"5349da55e4b084c2834f4a68"},{"code":"(fn r [f memo & args]\n  (let [start (if args memo (first memo))\n\t\t\ts (if args (first args) (rest memo))\n\t\t]\n\t\t(cons start ((fn red [s]\n\t\t \t (if (nil? (second s)) \n\t\t\t \t(drop-last s)\n\t\t\t \t(let [curr (f (first s) (second s))]\n\t\t\t\t\t(lazy-seq (cons curr (red (cons curr (rest (rest s))))))\n\t\t\t\t)\n\t\t\t)\n\t\t) (cons start s)))\n\t)\n)","problem":60,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":60,"code":"(fn r\n  ([f   [b & bs]]\n      (r f b bs))\n  \n  ([f a [b & bs]]\n      (if (nil? b) [a]\n        (lazy-seq (cons a (r f (f a b) bs))))))","user":"5800edaae4b0a837a8b30c48"},{"code":"(fn re\n  ([f init x]\n     (let [curv (f init (first x))]\n       (cons init (lazy-seq\n                   (if (empty? (rest x))\n                     (list curv)\n                     (re f curv (rest x)))\n                   )))\n     )\n  ([f x] (re f (first x) (rest x)))\n )","problem":60,"user":"5302ac7fe4b0d8b024fd3731"},{"code":"(fn\n  ([fnc a-seq]\n    (letfn [(redu-rec[v s] (if (empty? s) [v] (cons v (lazy-seq (redu-rec (fnc v (first s)) (rest s))))))]\n      (redu-rec (first a-seq) (rest a-seq))))\n  ([fnc init-arg a-seq]\n    (letfn [(redu-rec[v s] (if (empty? s) [v] (cons v (lazy-seq (redu-rec (fnc v (first s)) (rest s))))))]\n      (redu-rec init-arg a-seq))))","problem":60,"user":"4e58bcd4535d8a8b8723a296"},{"problem":60,"code":"(fn reduce-seq\n  ([f xs] (reduce-seq f (first xs) (rest xs)))\n  ([f x xs] (lazy-seq \n              (cons x (if (empty? xs) nil\n                          (reduce-seq f (f x (first xs)) (rest xs)))))))","user":"5884e807e4b0f1effa3b76a6"},{"code":"(fn rd\n  ([f coll] (rd f (first coll) (rest coll)))\n  ([f v coll]\n   (cons v (when-let [s (seq coll)]\n             (lazy-seq (rd f (f v (first s)) (rest s)))))))","problem":60,"user":"52479487e4b05ef8e38e6373"},{"code":"(fn r\n  ([f s] (r f (first s) (rest s)))\n  ([f x y]\n    (if (empty? y) [x]\n      (cons x (lazy-seq (r f (f x (first y)) (rest y)))))))","problem":60,"user":"4f2d5f5de4b0d6649770a05a"},{"code":"(fn red-\n  ([f l] (red- f (first l) (drop 1 l)))\n  ([f i l] (cons i\n                 (lazy-seq \n                  (when-let [s (seq l)]\n                    (red- f (f i (first s)) (rest l)))))))","problem":60,"user":"5163b06be4b055933a9ca030"},{"problem":60,"code":"(fn reduc\n  ([f coll] (reduc f (first coll) (rest coll)))\n  ([f res coll] \n   (lazy-seq\n     (if (empty? coll)\n       (list res)\n       (cons res\n         (reduc f (f res (first coll)) (rest coll)))))))","user":"5564709ee4b0c656e3ff1807"},{"code":"(fn reds\n  ([f xs]\n     (reds f (first xs) (rest xs)))\n  ([f v xs]\n     (if (empty? xs)\n         (list v)\n         (let [v2 (f v (first xs))]\n           (lazy-seq\n             (cons v\n                   (reds f v2 (rest xs))))))))","problem":60,"user":"4e8338d6535db62dc21a62d3"},{"code":"(fn my-reductions\r\n  ([f col] \r\n    (lazy-seq\r\n     (if-let [s (seq col)]\r\n      (my-reductions f (first s) (rest s))\r\n      (list (f)))))\r\n  ([f init col]\r\n    (cons init\r\n          (lazy-seq\r\n           (when-let [s (seq col)]\r\n            (my-reductions f (f init (first s)) (rest s)))))))","problem":60,"user":"4fdb02aae4b05e33b9224f56"},{"problem":60,"code":"(fn inter-red\n  ([f arg] (inter-red f (first arg) (rest arg)))\n  ([f arg-1 arg-2] (lazy-seq (if (not (empty? arg-2))\n                               (cons arg-1 (inter-red f (apply f (list arg-1 (first arg-2))) (rest arg-2)))\n                               (list arg-1)))))","user":"5bab31f1e4b0a20761a23471"},{"problem":60,"code":"(fn red\n ([f coll] (red f (first coll) (rest coll)))\n ([f init coll]\n    (cons init\n        (lazy-seq\n              (when-let [s (seq coll)]\n                (red f (f init (first s)) (rest s)))))))","user":"54b54d1be4b05787c3b1639c"},{"code":"(fn my-reductions\n  ([func s]\n   (my-reductions func (first s) (rest s)))\n  ([func init s]\n   (if (empty? s)\n     (lazy-seq [init])\n     (cons init (lazy-seq (my-reductions\n                            func\n                            (func init (first s))\n                            (rest s)))))))","problem":60,"user":"53070615e4b02e821686979e"},{"problem":60,"code":"(fn foo\n   ([f coll] (foo f (first coll) (rest coll)))\n   ([f init coll] (cons init (if (empty? coll) nil (lazy-seq (foo f (f init (first coll)) (rest coll))))))\n   )","user":"5f3abcc4e4b004f08c61c52b"},{"code":"(fn r\n    ([fun coll] (r fun (first coll) (rest coll)))\n    ([fun i coll]\n       (if (empty? coll)\n         [i]\n         (cons i\n               (lazy-seq\n                (r fun\n                   (fun i (first coll))\n                   (rest coll)))))))","problem":60,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":60,"code":"(fn sr\n  ([f col] (sr f (first col) (rest col)))\n  ([f init col]\n   (cons init (lazy-seq (when-let [s (seq col)]\n                (sr f (f init (first s)) (rest s)))))))","user":"56824e1be4b0945ebc182a91"},{"problem":60,"code":"(fn myreds \n([thefn thearg theseq] ((fn reds ([] (reds 0))\n([n] (if (and (not (instance? clojure.lang.IPending theseq)) (> n (count theseq))) [] (let [result (reduce thefn thearg (take n theseq))]\n(cons result (lazy-seq (reds (inc n))))))))))\n([thefn theseq] ((fn sreds ([] (sreds 1))\n([n] (if (and (not (instance? clojure.lang.IPending theseq)) (> n (count theseq))) [] (let [result (reduce thefn (take n theseq))]\n(cons result (lazy-seq (sreds (inc n))))))))))\n)","user":"55f75c6be4b06e875b46cea9"},{"code":"(fn ff\n  ([f l]\n   (ff f nil l))\n  ([f item l]\n   (letfn [(exe [current, privious, all]\n                (let [item (if (nil? privious) current (f privious current))]\n                  (cons item (lazy-seq (when (not (nil? all)) (exe (first all) item (next all)))))))]\n     (exe (if (nil? item) (first l) item) nil (if (nil? item) (next l) l)))))","problem":60,"user":"52d7b0ade4b09f7907dd137c"},{"code":"(fn ra\n  ( [fun li] (ra fun (first li) (rest li)) ) \n  ( [fun val li ]  \n        ( if (not-empty  li)  \n               (lazy-seq \n                  ( cons val \n                         (ra fun (fun val (first li)) (rest li))))\n               (list val ))))","problem":60,"user":"4f030775535dcb61093f6a43"},{"problem":60,"code":"(fn my-reduce\n  ([f s]\n   (my-reduce f (first s) (rest s)))\n  ([f acc s]\n   (cons acc (lazy-seq (if (empty? s)\n                         nil\n                         (my-reduce f (f acc (first s)) (rest s)))))\n))","user":"5fb68f09e4b08cb800c85b58"},{"problem":60,"code":"(fn myreductions\n  ([f v l] (if (empty? l)\n             [v]\n             (cons v (lazy-seq (myreductions f\n                                             (f v (first l))\n                                             (rest l))))))\n  ([f l] (if (empty? l)\n           [(f)]\n           (myreductions f (first l) (rest l)))))","user":"54857e3be4b0e286459a11ad"},{"code":"(fn a ([f x] (a f (first x) (next x)))([f x y] (cons x (if-not(nil? y)(lazy-seq (a f (f x (first y)) (next y)))(identity [])))))","problem":60,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":60,"code":"(fn reds\n  ([f coll] (if (empty? coll) [] (reds f (first coll) (rest coll))))\n  ([f acc coll]\n   (if (empty? coll)\n    [acc]\n    (lazy-seq (cons acc (reds f (f acc (first coll)) (rest coll)))))))","user":"5d97b602e4b0d3f9b434ad3a"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n    (cons init (lazy-seq\n                    (if (empty? coll)\n                      '()\n                      (my-reductions f (f init (first coll)) (rest coll)))))))","user":"5896a0e6e4b00487982d52a8"},{"problem":60,"code":"(fn my-reductions\n    ([callback initial coll]\n     (cons initial ((fn my-reducer [acc coll]\n                      (let [res (callback acc (first coll))]\n                        (cons res (lazy-seq (when (not (empty? (rest coll)))\n                                              (my-reducer res (rest coll)))))))\n                    initial coll)))\n    ([callback coll]\n     (my-reductions callback (first coll) (rest coll))))","user":"57155980e4b07c98581c3ad7"},{"code":"(let [reduce-seq\n        (fn this-f [func l-val vals]\n          (if (not (empty? vals))\n            (let [this-res (func l-val (first vals))]\n              (cons this-res\n                    (lazy-seq (this-f func this-res (rest vals)))))))]\n    (fn this-func\n     ([func vals]\n        (if (not (empty? vals))\n          (this-func func (func (first vals)) (rest vals))))\n     ([func init-val vals]\n        (if (not (empty? vals))\n          (cons init-val\n                (lazy-seq (reduce-seq func init-val vals)))))\n     ))","problem":60,"user":"52213426e4b0e6a83c8925c4"},{"code":"(fn r\n           ([f s] (r f (first s) (rest s)))\n           ([f i s]\n              (if (empty? s)\n                (list i)\n                (cons i (lazy-seq (r f (f i (first s)) (rest s)))))))","problem":60,"user":"53224d45e4b09d4e7a9b54c0"},{"code":"(fn prob-0060\n  ([f lhs0 in-xs]\n     (prob-0060 f (cons lhs0 in-xs)))\n  ([f in-xs]\n     (let [gen-rest (fn gen-rest [f xs lhs]\n                      (lazy-seq\n                       {:pre (not (empty? xs))}\n                       (let [red-val (f lhs (first xs))\n                             rest-xs (rest xs)]\n                         (if (empty? rest-xs)\n                           (list red-val)\n                           (cons red-val (gen-rest f rest-xs red-val))))))\n\n           seq-xs   (seq in-xs)\n           fst-x    (first seq-xs)\n           rst-xs   (rest seq-xs)]\n\n       (lazy-seq\n        (cond\n         (empty? seq-xs) (list (f))\n         (empty? rst-xs) (list fst-x)\n         :else           (cons fst-x (gen-rest f rst-xs fst-x)))))))","problem":60,"user":"4f047c07535dcb61093f6bcd"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f initial coll]\n   (lazy-seq\n    (cons initial\n          (if (seq coll)\n            (my-reductions f (f initial (first coll)) (rest coll))\n            [])))))","user":"57147cd9e4b07c98581c3abf"},{"problem":60,"code":"(fn tt\n  ([f coll]\n   (tt f (first coll) (rest coll)))\n  ([f init coll]\n   (let \n     [mi (map-indexed (fn [i c](take (inc i) coll)) coll)\n      res (cons init (map #(reduce f init %) mi))]\n     res\n   )\n  ) \n)","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":60,"code":"(fn reductions*\n  ([f xs]\n   (reductions* f (first xs) (rest xs)))\n  ([f v xs]\n   (lazy-seq\n    (if-let [head (first xs)]\n      (cons v (reductions* f (f v head) (rest xs)))\n      [v]))))","user":"55d5ee3fe4b0e31453f64a92"},{"problem":60,"code":"(fn red\n           ([f s]\n              (lazy-seq (red f (first s) (rest s))))\n           ([f v s]\n              (if (empty? s)\n\t\t        (cons v (lazy-seq))\n\t            (cons v (lazy-seq (red f (f v (first s)) (rest s)))))))","user":"540e0637e4b0addc1aec6717"},{"code":"(fn my-red\n    ([f init [x & xs]]\n        (cons init (lazy-seq (when x (my-red f (f init x) xs)))))\n    ([f coll]\n        (my-red f (first coll) (rest coll))))","problem":60,"user":"5132c6f0e4b021281ec7b6d3"},{"problem":60,"code":"(fn r\n ([f xs] (r f (first xs) (rest xs)))\n ([f init xs] (cons init (lazy-seq (when-let [s (seq xs)] (r f (f init (first s)) (rest s)))))))","user":"5b61aa6ae4b0c6492753e712"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f v coll] \n   (lazy-seq (if (seq coll)\n               (cons v (my-reductions f (f v (first coll)) (next coll)))\n               (list v)))))","user":"5cdc08a2e4b05ee0cb31173a"},{"problem":60,"code":"(fn [ f s & [st] ] ( let [ se ( if ( nil? st ) s ( cons s st ) ) ]\n( map #(reduce f ( take % se ) ) ( map #(inc %2) se ( range ) ) ) ) )","user":"5a1c8c26e4b0ff51aa4b3247"},{"code":"(fn _red\n  ([f l] (_red f (first l) (rest l)))\n  ([f init l] \n   (if (empty? l) [init]\n     (let [result (f init (first l))]\n       (cons init (lazy-seq (_red f result (rest l))))\n     )\n   ))\n)","problem":60,"user":"5323a414e4b09d4e7a9b54d1"},{"code":"(fn red\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (red f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (red f (f init (first s)) (rest s)))))))","problem":60,"user":"4faafccde4b081705acca209"},{"problem":60,"code":"(fn r\n ([op [v & vs]]\n  (when v (r op v vs)))\n ([op init vs]\n  (when (seq vs)\n    (cons init \n      (letfn [(rr [ii [x & xs :as xa]]   \n                (when (seq xa)\n                  (let [vv (op ii x)]\n                    (cons vv (lazy-seq (rr vv xs))))))] \n        (rr init vs))))))","user":"51435753e4b0c172af7558d5"},{"problem":60,"code":"(fn rd\n   ([f c] (rd f (f (first c) (first c)) (next c)))\n   ([f r c]\n     (if (nil? c)\n         [r]\n       (cons r (lazy-seq (rd f (f r (first c)) (next c)))))))","user":"54908cc1e4b0b312c081ff32"},{"code":"(fn r\n  ([f v] (lazy-seq (cons (first v)\n    (when (seq v) (r f \n      (cons \n        (f (first v) (second v)) \n        (drop 2 v)))))))\n  ([f s v] (lazy-seq (cons s\n    (when (seq v) (r f (f s (first v)) (rest v))\n    ))))\n)","problem":60,"user":"4f01c938535dcb61093f6a39"},{"code":"(fn r\n  ([f x] (r f (first x) (rest x)))\n  ([f y x] (if (empty? x)\n             (cons y [])\n             (cons y (lazy-seq (r f (f y (first x)) (rest x)))))))","problem":60,"user":"52379c46e4b0fae3832e99db"},{"code":"(letfn [(reductions'\n                ([f coll] (lazy-seq (reductions' f (first coll) (rest coll))))\n                ([f init coll]\n                 (cons init\n                       (lazy-seq\n                        (when-let [s (seq coll)]\n                                  (reductions' f (f init (first s))\n                                               (rest s)))))))] reductions')","problem":60,"user":"50310b8be4b05b7df5a0b84d"},{"problem":60,"code":"(fn my-reductions\n  ([f s] (my-reductions f (first s) (rest s)))\n  ([f v s]\n   (lazy-seq (if (empty? s) (list v)\n                 (cons v (my-reductions f (f v (first s)) (rest s)))))))","user":"5b47874be4b02d533a91bc70"},{"problem":60,"code":"(fn my-reduce\n    ([f s] (my-reduce f (first s) (rest s)))\n    ([f val s]\n        (cons val\n            (lazy-seq\n                (when-let [ss (seq s)]\n                    (my-reduce f (f val (first ss)) (rest ss)))))))","user":"57644395e4b0994c1922fbf2"},{"problem":60,"code":"(fn b\n ([f init [x & xs]] \n   (cons init (lazy-seq (when x (b f (f init x) xs))))) \n  ([f x]\n   (b f (first x) (rest x))))","user":"577bcbd9e4b0d3393e5deb1b"},{"problem":60,"code":"(fn my-reductions\n  ([f a] (my-reductions f (first a) (rest a)))\n  ([f prev a] (lazy-seq (if (empty? a) (list prev) (cons prev (my-reductions f (f prev (first a)) (rest a)))))))","user":"57b99d48e4b0fbc9809a27f2"},{"code":"(fn \n  ([f coll]\n    ((fn my-reduce1 [a]\n      (cons (apply f (take a coll)) (lazy-seq(my-reduce1 (inc a))))\n    )1)\n  )\n  ([f c1 c2]\n      ((fn my-reduce2 [b c]\n       (take (+ 1 (count c2))(cons b (lazy-seq(my-reduce2 (apply f c1 (take c c2)) (inc c)))))\n      )c1 1)\n  )\n)","problem":60,"user":"52016690e4b0b2e020a18f0f"},{"problem":60,"code":"(fn\n  ([func iseq]\n   (map-indexed\n     (fn [i x] (->> (take (inc i) iseq) (reduce func)))\n     iseq))\n  ([func init iseq]\n   (->>\n     (map-indexed\n       (fn [i x] (->> (take (inc i) iseq) (reduce func init)))\n       iseq)\n     (concat [init]))))","user":"5b118b7be4b0cc2b61a3be34"},{"problem":60,"code":"(fn r\n  ([f v coll] (lazy-seq (if-let [xs (seq coll)]\n                          (cons v (r f (f v (first xs)) (rest xs)))\n                          (cons v nil))))\n  ([f coll] (r f (f (first coll)) (rest coll))))","user":"58ee84e5e4b056aecfd47dab"},{"code":"(fn foo \n  ([func coll] (foo func (first coll) (drop 1 coll)))\n  ([func accum coll]\n   (lazy-seq\n     (if (empty? coll)\n       [accum]  \n       (cons accum (foo func (func accum (first coll)) (rest coll)))))))","problem":60,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":60,"code":"(fn __\n  ([f coll]\n   (lazy-seq\n    (if (seq coll)\n      (__ f (first coll) (rest coll)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (if (seq coll)\n            (__ f (f init (first coll)) (rest coll)))))))","user":"526759b3e4b03e8d9a4a715b"},{"problem":60,"code":"(fn red\n  ([f init coll] (red f (cons init coll)))\n  ([f [first second & rest]]\n   (cons first\n         (lazy-seq (when second \n                     (red f (cons (f first second) rest)))))))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"code":"(fn red [f & [a & b]]\n  (let [acc (if (nil? b) (first a) a)\n        lst (if (nil? b) (rest a) (first b))]\n    (lazy-seq \n      (if (not-empty lst)\n        (cons acc (red f (cons (f acc (first lst)) (rest lst))))\n        [acc]))))","problem":60,"user":"4fca1cd6e4b0ee37620e184c"},{"code":"(fn mreductions\r\n  ([f col]\r\n     (lazy-seq\r\n      (let [s (seq col)]\r\n  (mreductions f (first s) (rest s)))))\r\n  ([f init col]\r\n     (cons init\r\n\t   (lazy-seq\r\n\t    (when-let [s (seq col)]\r\n\t      (mreductions f (f init (first s)) (rest s)))))))","problem":60,"user":"4ddc620d535d02782fcbea06"},{"problem":60,"code":"(fn rd\n  ([f coll]\n   (if-let [sq (seq coll)]\n     (rd f (first sq) (rest sq))\n     (list (f))))\n  ([f init coll]\n   (cons init (lazy-seq (when-let [sq (seq coll)]\n                          (rd f (f init (first sq)) (rest sq)))))))","user":"540a4f20e4b0addc1aec66ef"},{"problem":60,"code":"(fn copy-reductions\n    ([f coll]\n       (lazy-seq\n        (if-let [s (seq coll)]\n          (copy-reductions f (first s) (rest s))\n          (list (f)))))\n    ([f init coll]\n       (lazy-seq\n        (cons init\n              (when-let [s (seq coll)]\n                (copy-reductions f (f init (first s)) (rest s)))))))","user":"5364ab34e4b0243289761e64"},{"problem":60,"code":"(fn my-reductions\n         ([f coll]\n            (if (empty? coll)\n              []\n              (my-reductions f (first coll) (drop 1 coll))))\n         ([f acc coll]\n            (if (empty? coll)\n              (list acc)\n              (cons acc (lazy-seq (my-reductions f (f acc (first coll)) (drop 1 coll)))))))","user":"52efd3d9e4b05e3f0be25ed4"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f val coll]\n   (if (empty? coll)\n     (list val)\n     (cons val (lazy-seq (red f (f val (first coll)) (rest coll))))\n     )\n   )\n  )","user":"5a90395ce4b05369db4d254a"},{"problem":60,"code":"(fn my-reduce \n        ([f s]\n           (letfn [(helper [r]\n                     (when (and (seq r) (seq (rest r)))\n                       (let [result (f (first r) (second r))]\n                         (cons result (lazy-seq (helper (cons result (drop 2 r))))))))]\n             (cons (first s) (helper s)))\n           )\n        ([f i s]\n           (my-reduce f (cons i s))))","user":"541ae7dbe4b01498b1a71a61"},{"code":"(fn rr\n  ([f i s] (lazy-seq (cons i (if (not (empty? s) )\n  (rr f (f i (first s)) (next s))))))\n  ([f s] (rr f (first s) (next s))))","problem":60,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"(fn r\n  ([f s] (r f (first s) (next s)))\n  ([f x s]\n    (lazy-seq\n      (if (seq s)\n        (cons x\n              (r f (f x (first s)) (rest s)))\n        [x]))))","problem":60,"user":"4f726dd2e4b07046d9f4f034"},{"code":"(fn m \n  ([f coll] \n    (m f (first coll) (rest coll)))\n  ([f init coll]\n    (if (empty? coll) \n      (list init)\n      (lazy-seq \n          (cons init (m f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4ff5744ae4b0678c553fc36a"},{"code":"(fn reductions*\n  ([f coll]\n   (lazy-seq (reductions* f (first coll) (rest coll))))\n  ([f init coll]\n   (if (seq coll)\n     (cons init\n           (lazy-seq (reductions* f\n                                  (f init (first coll))\n                                  (rest coll))))\n     (list init))))","problem":60,"user":"52ab6de1e4b0c58976d9ac78"},{"problem":60,"code":"(fn my-reductions\n  ([f [head & tail]]\n    (my-reductions f head tail))\n  ([f head [ftail & rtail]]\n    (lazy-seq (cons head (if ftail\n                           (my-reductions f (f head ftail) rtail))))))","user":"5ecfd429e4b016b56eae05a9"},{"problem":60,"code":"(fn my-reduce \n  ([fxn coll]\n     (my-reduce fxn (first coll) (rest coll)))\n  ([f val coll]\n     (if (seq coll)\n       (cons val (lazy-seq (my-reduce f (f val (first coll)) (rest coll))))\n       (cons val coll))))","user":"4fc5eb7fe4b0ee37620e1803"},{"code":"(fn reds \n  ([f [x & xs]]\n   (reds f x xs))\n  ([f init [x & xs]]\n   (cons init\n         (lazy-seq\n          (when x\n          \t(reds f (f init x) xs))))))","problem":60,"user":"4fe8da4de4b0547ebccb2429"},{"problem":60,"code":"(fn re \n  ([f r s] \n   (if (seq s)\n     (lazy-seq (cons r\n                     (re f \n                         (f r (first s))\n                         (rest s))))\n     [r]))\n  ([f [x & s :as z]]\n   (if-not (seq z)\n     (list (f))\n     (re f x s))))","user":"54df2609e4b024c67c0cf7a9"},{"code":"(fn my-reduce\r\n  \r\n  ([op input] (my-reduce op (first input) (rest input)))\r\n  \r\n  ([op result input]\r\n  \r\n  (lazy-seq\r\n    (if (empty? input) (list result)\r\n      (cons result \r\n            (my-reduce op \r\n                 (op result (first input))\r\n                 (rest input)))))))","problem":60,"user":"4f7d25b4e4b06e829148e1ba"},{"problem":60,"code":"(fn !\n  ([f coll] (lazy-seq\n             (! f (first coll) (rest coll))))\n  ([f init coll] (cons init\n                       (lazy-seq\n                        (when-let [s (seq coll)]\n                          (! f (f init (first s)) (rest s)))))))","user":"554680cbe4b0a04f7929953e"},{"problem":60,"code":"(fn r\n    ([f xs] (r f (first xs) (rest xs)))\n    ([f i xs]\n     (lazy-seq\n      (cons i (when (seq xs) (r f (f i (first xs)) (rest xs)))))))","user":"55597b84e4b0deb715856e36"},{"problem":60,"code":"(fn [op b & [c]]\n  (let [init (if c b nil)\n        args (if c c b)\n        lseq (fn seq-gen\n               ([] (if init (cons init (lazy-seq (seq-gen args 1))) (seq-gen args 1)))\n               ([lst take-cnt] \n                (let [h (take take-cnt lst)\n                      end? (< (count h) take-cnt)]\n                  (if end? (list)\n                    (cons (if init (reduce op init h) (reduce op h)) (lazy-seq (seq-gen lst (inc take-cnt))))))))]\n    (lseq)))","user":"591f05b4e4b09b4ee5954c42"},{"code":"(fn redu ([f coll]\r\n     (lazy-seq\r\n      (if-let [s (seq coll)]\r\n        (redu f (first s) (rest s))\r\n        (list (f)))))\r\n  ([f init coll]\r\n     (cons init\r\n           (lazy-seq\r\n            (when-let [s (seq coll)]\r\n              (redu f (f init (first s)) (rest s)))))))","problem":60,"user":"4e0e0529535d04ed9115e7b9"},{"problem":60,"code":"(fn my-reduce\n   ([f [h & t]] (my-reduce f h t))\n   ([f a col]\n    (letfn [(r\n              [p [h & t]]\n              (if (nil? h)\n                nil\n                (let [n (f p h)]\n                  (cons\n                    n\n                    (lazy-seq (r n t))))))]\n      (if (nil? a)\n      []\n      (cons a (lazy-seq (r a col)))))))","user":"576df252e4b0979f8965156f"},{"problem":60,"code":"(fn r\n  ([f l]\n   (r f (first l) (rest l)))\n  ([f i l]\n   (cons i (lazy-seq (when (not (empty? l)) (r f (f i (first l)) (rest l)))))))","user":"53c74cfce4b00fb29b2212a7"},{"code":"(fn my-reductions\n  ([f coll] (letfn [(m [f coll result]\n                      (if (seq coll)\n                        (lazy-seq\n                          (let [r (f result (first coll))]\n                            (cons r (m f (rest coll) r))))))]\n              (lazy-seq (cons (first coll) (m f (rest coll) (first coll))))))\n  ([f op coll] (my-reductions f (cons op coll))))","problem":60,"user":"4ec75077535d6d7199dd36e0"},{"code":"(fn r \n  ([f c] \n   (lazy-seq (if-let [s (seq c)] (r f (first s) (rest s)) (list (f)))))\n  ([f a c] \n   (cons a (lazy-seq (when-let [s (seq c)] (r f (f a (first s)) (rest s)))))))","problem":60,"user":"5246e945e4b0644eb7b0783b"},{"problem":60,"code":"(fn reduce-aaron\n  ([f col] (reduce-aaron f (f (first col)) (next col)))\n  ([f current col]\n   (if-not col\n     (list current)\n     (cons\n       current\n       (lazy-seq (reduce-aaron f (f current (first col)) (next col)))))))","user":"54580586e4b01be26fd74616"},{"code":"(fn red\r\n  ([f coll]\r\n    (red f (first coll) (rest coll)))\r\n  ([f cur coll]\r\n     (lazy-seq\r\n      (if (seq coll)\r\n  (let [[nex & res] coll\r\n\t      oth (f cur nex)]\r\n\t  (cons cur (red f oth res)))\r\n\t(list cur)))))","problem":60,"user":"4e02bee8535d04ed9115e791"},{"code":"(fn red \n    ([f coll]\n        (lazy-seq \n            (if-let [s (seq coll)]\n                (red f (first s) (rest s))\n                (list (f)))))\n    ([f init coll]\n     (cons init\n           (lazy-seq\n              (when-let [s (seq coll)]\n                 (red f (f init (first s)) (rest s))))))\n)","problem":60,"user":"51d28e15e4b0d13b04db0d9b"},{"code":"(fn R\n  ([f s]\n     (if (empty? s) [(f)]\n         (R f (first s) (rest s))))\n  ([f a s]\n     (if (empty? s) [a]\n         (cons a (lazy-seq (R f (f a (first s)) (rest s)))))))","problem":60,"user":"51a4416ae4b0def3c5c5868c"},{"code":"(fn r\n  ([f s] (r f (first s) (rest s)))\n  ([f i s]\n     (cons i (lazy-seq \n              (when-let [s (seq s)]\n                (r f (f i (first s)) (rest s)))))))","problem":60,"user":"4e52d815535d302ef430da77"},{"problem":60,"code":"(fn my-reductions\n  ([f s]\n   (my-reductions f (first s) (rest s)))\n\n  ([f curr s]\n   (lazy-seq\n    (if (seq s)\n      (cons curr (my-reductions f\n                                (f curr (first s))\n                                (rest s)))\n      (list curr)))))","user":"4e6a2f93535d8ccf87e9feaa"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f acc coll]\n    (if-let [[nxt & rst] coll]\n      (lazy-seq (cons acc (red f (f acc nxt) rst)))\n      (list acc))))","user":"56a76f36e4b07966d5a8a05b"},{"problem":60,"code":"(fn reds\n  ([f [h & t]]\n    (reds f h t))\n  ([f init [h & t :as c]]\n   (cons init\n     (lazy-seq\n      (when (seq c)\n        (reds f (f init h) t))))))","user":"5881d1c2e4b0f1effa3b7644"},{"problem":60,"code":"(fn redu\n           ([index f col1 col2] (take (inc (count col2)) (redu index f (cons col1 col2)))) ; merge last parameters\n           ([index f col]\n            (lazy-seq (cons\n                        (reduce f (take index col))\n                        (redu (inc index) f col)))\n            ))\n         1 ; initial index","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn rdx\n   ([f col]\n    (rdx f (first col) (rest col)))\n   ([f i col]\n    (if (empty? col)\n      [i]\n      (cons i (lazy-seq (rdx f (f i (first col)) (rest col)))))))","problem":60,"user":"506d5e4ce4b0a302964c5493"},{"problem":60,"code":"(fn red \n  ([f coll] (red f (first coll) (rest coll)))\n  ([f v coll] \n   (lazy-seq \n    (cons v \n          (when (seq coll)\n            (red f (f v (first coll)) (rest coll))))))\n  )","user":"5e44c804e4b01d43a70e8e89"},{"code":"(fn g ([f b] (g f (first b) (rest b)))\n ([f a b] (if (empty? b) [a] \n  (lazy-seq (cons a (g f (f a (first b)) (rest b)))))))","problem":60,"user":"4fca2ef0e4b0ee37620e184e"},{"problem":60,"code":"(fn reductions'\n  ([f [head & tail]]\n   (reductions' f (f head) tail))\n  ([f init [head & tail :as coll]]\n   (if (seq coll)\n     (lazy-seq\n      (cons init\n            (reductions'\n             f\n             (f init head)\n             tail)))\n     [init])))","user":"4eda7cc3535d10e5ff6f530e"},{"problem":60,"code":"(fn reds \n  ([f i s]\n     (lazy-seq\n       (if-not (nil? s)  \n         (cons i (reds f (f i (first s)) (next s)))\n         (list i))))\n  ([f s] (reds f (first s) (next s))))","user":"56b86e64e4b0f26550335924"},{"problem":60,"code":"(fn reds\n  ([f coll]\n   (lazy-seq (reds f (first coll) (rest coll))))\n  ([f init coll]\n   (cons init \n         (lazy-seq (when (not-empty coll)\n                     (reds f (f init (first coll)) (rest coll)))))))","user":"548b8a50e4b0e286459a11ff"},{"code":"(fn rd \n  ([f args] (rd f (first args) (rest args)))\n  ([f iv vs]\n   (lazy-seq (cons iv (when (seq vs) (rd f (f iv (first vs)) (rest vs)))))))","problem":60,"user":"53720c5ce4b0493c815db704"},{"problem":60,"code":"(fn my-reductions\n  ([f col] (my-reductions f (first col) (rest col)))\n  ([f val col]\n   (if (empty? col)\n     (list val)\n     (lazy-seq (cons val (my-reductions f (f val (first col)) (rest col)))))))","user":"5ea6fe98e4b00a66d4a951b2"},{"problem":60,"code":"(fn __\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (__ f (first s) (rest s))\n       (list (f)))))\n\n  ([f init coll]\n   (cons init \n         (lazy-seq\n           (when-let [s (seq coll)]\n             (__ f (f init (first s)) (rest s)))))))","user":"55702081e4b09a3098a52529"},{"problem":60,"code":"(fn solve\n  ([f coll] (solve f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq\n    (if (empty? coll)\n      (list init)\n      (cons init (solve f\n                        (f init (first coll))\n                        (rest coll)))))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":60,"code":"(fn sequence-reductions\n  ([f s]\n   (sequence-reductions f (first s) (rest s)))\n  ([f i s]\n   (cons i\n         (lazy-seq\n          (if (not (empty? s))\n            (sequence-reductions f\n                                 (f i (first s))\n                                 (rest s)))))))\n;https://www.anthony-galea.com/blog/post/solutions-to-4clojure-medium-problems/\n;using a lazy-seq seems to be mandatory, reduce/partial/iterate not enough","user":"5e13a6b7e4b099d064963001"},{"problem":60,"code":"(fn my-reduce \n    ([func sqnc] (my-reduce func (first sqnc) (rest sqnc)))\n    ([func value sqnc]\n     (lazy-seq\n       (if (empty? sqnc)\n         (list value)\n         (cons value\n               (my-reduce func (func value (first sqnc)) (rest sqnc))\n               )))))","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":60,"code":"(fn my-reductions\n   ([func in]\n    (my-reductions func (first in) (rest in)))\n   \n   ([func one in]\n    (cons\n      one\n      (lazy-seq\n        (my-reductions func one in :internal))))\n   \n   ([func one in internal]\n    (assert (= internal :internal))\n    (let [two (first in)\n          node (func one two);not one, but the prev. result\n          more (rest in)]\n      \n      (cons\n        node\n        (lazy-seq\n          (if (not (empty? more)) ;Don't compare (count in) because of infinite.\n            (my-reductions func node more :internal)\n            '()))))))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"code":"(letfn\n  [(my-red [f i [h & t :as ls]]\n    (let [h-p (f i h)]\n      (if (empty? t) [h-p]\n        (lazy-cat [h-p] (my-red f h-p t)))))]\n    (fn\n      ([f [h & t]] (cons h (my-red f h t)))\n      ([f i [h & t :as ls]] (cons i (my-red f i ls)))))","problem":60,"user":"5003ee7de4b0678c553fc446"},{"code":"(fn r\n  ([f v c ]\n\t(if (seq c)\n\t\t(lazy-seq\n\t\t\t(cons v \n\t\t\t\t(r f (f v (first c)) (rest c))))\n\t\t[v]))\n  ([f c]\n\t(r f (first c) (rest c))))","problem":60,"user":"5398305fe4b0b51d73faaef6"},{"problem":60,"code":"(fn adduce\n  ([f s] (adduce f (first s) (rest s)))\n  ([f last s]\n    (if (empty? s) [last]\n      (lazy-seq (concat [last] (adduce f (f last (first s)) (rest s)))) )))","user":"57539e04e4b02ea1147992ab"},{"problem":60,"code":"(fn f\n  ([fx c]\n   (if-let [s (seq c)]\n     (f fx (first c) (rest c))\n     (list (fx))))\n  ([fx i c]\n   (cons i (lazy-seq\n            (when-let [s (seq c)]\n              (f fx (fx i (first c)) (rest c)))))))","user":"4db1fe241254ad5b4805fa77"},{"problem":60,"code":"(fn scan\n  ([f coll] (scan f (first coll) (rest coll)))\n  ([f v coll]\n    (lazy-seq\n      (if (empty? coll)\n        (list v)\n        (cons v\n          (scan f\n            (f v (first coll))\n            (rest coll)))))))","user":"53d78b64e4b0e771c3025466"},{"code":"(fn reds \n  ([op aseq]\n    (reds op (first aseq) (next aseq)))\n  ([op acum aseq]\n     (lazy-seq\n      (cons acum\n            (if-let [elem (first aseq)]\n              (reds op (op acum elem) (rest aseq)))))))","problem":60,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":60,"code":"(fn my-reduce\n  ([f c]\n   (my-reduce f (first c) (rest c)))\n  ([f v c]\n   (if (seq c)\n     (cons v (lazy-seq (my-reduce f (f v (first c)) (rest c))))\n     (cons v (lazy-seq '())))))","user":"5c950334e4b048ec896c5a44"},{"problem":60,"code":"(fn reduce-seq\n  ([f coll]\n    (reduce-seq f (first coll) (rest coll)))\n  ([f init [head & tail :as coll]]\n    (cons init \n          (lazy-seq\n            (if (seq coll)\n              (reduce-seq f (f init head) tail))))))","user":"542c026ae4b0dad94371f29a"},{"problem":60,"code":"(fn [f & args]\n  (letfn [(rec [result lst]\n            (when lst\n             (let [lastest (last result)\n                   e (if lastest\n                       (f lastest (first lst))\n                       (f (first lst)))]\n               (lazy-seq (cons e\n                               (rec (conj (vec result) e) (next lst))))\n               )))]\n    (if (= (count args) 1)\n      (rec [] (last args))\n      (cons (first args)\n            (rec [(first args)] (last args)))\n      )))","user":"60096aabe4b074f607df667f"},{"code":"(fn x\n    ([f coll]\n       (x f (first coll) (rest coll)))\n    ([f init coll]\n       (if (empty? coll)\n         [init]\n         (cons init (lazy-seq (x f (f init (first coll)) (rest coll)))))))","problem":60,"user":"4e80aa10535db62dc21a62b1"},{"code":"(fn foo\n  ([f coll]\n     (foo f (first coll) (rest coll)))\n  \n  ([f acc coll]\n   (cons acc (lazy-seq (when coll (foo f (f acc (first coll)) (next coll)))))))","problem":60,"user":"5302bb37e4b0d8b024fd3734"},{"problem":60,"code":"(fn z\n  ([f [x & r]] (z f x r))\n  ([f a [x & r]] (cons a (and x (lazy-seq (z f (f a x) r))))))","user":"4fb1d7ace4b081705acca281"},{"code":"(fn r \n  ([f s c]\n    (if (and (not s) (empty? c)) \n      nil \n      (cons s (lazy-seq (r f (if (empty? c) nil (f s (first c))) (rest c))))))\n  ([f c] (r f (first c) (rest c))))","problem":60,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"(fn myreductions\n  ([f coll] (myreductions f (first coll) (rest coll)))\n  ([f val coll] \n     (cons val\n           (lazy-seq\n             (when-let [s (seq coll)]\n               (myreductions f (f val (first s)) (rest s)))))))","problem":60,"user":"4f05ea25535dcb61093f6c02"},{"problem":60,"code":"(fn my-reductions\n  ([f s]\n     (lazy-seq\n        (my-reductions f (first s) (rest s))\n     )\n  )\n  ([f init s]\n  \t\t(if (empty? s) [init]\n       \t(cons init\n             (lazy-seq\n                (my-reductions f (f init (first s)) (rest s)))))))","user":"57a9db97e4b0b8559636fc5b"},{"problem":60,"code":"(fn rd\n  ([f coll] (rd f (first coll) (rest coll)))\n  ([f init coll] \n  \t(map first \n  \t\t(take-while (fn [[cum remain]] (identity cum)) \n  \t\t\t(iterate (fn [[cum remain]] \n  \t\t\t\t(if (empty? remain) \n  \t\t\t\t\t(vector nil nil) \n  \t\t\t\t\t(vector (f cum (first remain)) (rest remain)))) [init coll]))))\n  )","user":"54c11fdae4b0ed20f4ff6f1b"},{"problem":60,"code":"(fn rd\n  ([f coll] \n   (rd f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (lazy-seq \n          (if (empty? coll)\n            []\n            (rd f \n                (f init (first coll)) \n                (next coll)))))))","user":"57c94c6ee4b05aa3c4741d2d"},{"code":"(fn !\n  ([f c] (! f (first c) (rest c)))\n  ([f acc c] (if (empty? c) [acc] (lazy-seq (cons acc (! f (f acc (first c)) (rest c)))))))","problem":60,"user":"50e0d5a3e4b061dbdced723d"},{"problem":60,"code":"(fn rdctns\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (rdctns f (f init (first s)) (rest s))))))\n  ([f coll]\n   (rdctns f (first coll) (rest coll))))","user":"5703eda3e4b08d47c9778200"},{"code":"(fn rd\n  ([f a [h & t]]\n     (cons a\n           (when h\n             (lazy-seq\n              (rd f (f a h) t)))))\n  ([f [h & t]]\n     (when h (rd f h t))))","problem":60,"user":"52d2ca1ce4b099d49816f0b4"},{"code":"(fn reductions*\n  ([f [init & coll]] (reductions* f init coll))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (reductions* f (f init (first s)) (rest s)))))))","problem":60,"user":"5006b7d2e4b0678c553fc48c"},{"problem":60,"code":"(fn red\n ([f xs]\n  (red f (first xs) (rest xs)))\n ([f acc xs]\n  (cons acc\n\t(lazy-seq\n      (if (empty? xs)\n        '()\n        (red f (f acc (first xs)) (rest xs)))))))","user":"54e540c1e4b024c67c0cf7f9"},{"problem":60,"code":"(fn reduc\n  ([f [l & ls]] (reduc f l ls))\n  ([f a [l & ls]]\n      (if (nil? ls)\n        (cons a (list (f a l)))\n        (cons\n         a\n         (lazy-seq\n          (reduc f (f a l) ls))))))","user":"56050f06e4b08b23635d3161"},{"code":"(fn hoge\n    ([f col](hoge f (first col)(rest col)))\n\t  ([f x col]\n\t    (cons x\n\t\t  (lazy-seq\n\t\t    (when (seq col)\n\t\t    (hoge f (f x (first col))(rest col)))))))","problem":60,"user":"4db2cc55535df7e46ed9b6c5"},{"code":"(fn reduc [f arg & args]\n  (if (empty? args)\n    (reduc f (first arg) (rest arg))\n    (if (empty? (first args))\n      (list arg)\n      (lazy-seq\n       (cons arg\n             (reduc f\n                    (f arg (first (first args)))\n                    (rest (first args))))))))","problem":60,"user":"509160dae4b0742c82730aef"},{"problem":60,"code":"(fn sequence-reductions\n  ([f xs] \n     (sequence-reductions f (first xs) (rest xs)))\n  ([f x xs]\n     (letfn [(red [f x xs]\n               (if-not (empty? xs)\n                 (lazy-seq (cons (f x (first xs)) (red f (f x (first xs)) (rest xs))))\n                 []))]\n       (lazy-seq (cons x (red f x xs))))))","user":"52616198e4b03e8d9a4a705e"},{"problem":60,"code":"(fn reduxs\n  ([f [x & xs]] \n   (reduxs f x xs))\n  ([f acc [x & xs]]\n   (if (nil? x)\n     `(~acc)\n     (cons acc (lazy-seq (reduxs f (f acc x) xs))))))","user":"5a257747e4b07f18be40aa1f"},{"problem":60,"code":"(fn redux\n  ([f a [b & t]]\n   (cons a (when b (lazy-seq (redux f (cons (f a b) t))))))\n  ([f [a & t]]\n   (redux f a t)))","user":"54cd651be4b057c6fda3a2a2"},{"code":"(fn q\n  ([f s] (q f (first s) (rest s)))\n  ([f a [b & c]]\n    (lazy-seq\n      (cons a (when b (q f (f a b) c))))))","problem":60,"user":"4ed69ea4535d10e5ff6f52e3"},{"problem":60,"code":"(fn myreduce [func1 v & vrest]\n    (let [v1 \n        (if vrest v (first v)) \n        rest1 (if vrest (flatten vrest) (rest v)) \n        first_rest (first rest1)]\n        (lazy-seq \n            (cons v1 (if first_rest (myreduce func1 (cons (func1 v1 first_rest) (rest rest1))) nil)))))","user":"5a64dcabe4b0512ff01cd9a9"},{"code":"(fn myreductions \n  ([f coll]  (myreductions f (first coll) (rest coll)) )\n  ([f val coll] \n   (if (seq coll)\n     (cons val (lazy-seq (myreductions f (f val (first coll)) (rest coll))))\n     [val]\n   )\n  )\n  )","problem":60,"user":"523f0bbfe4b01c266ffa7f91"},{"code":"(fn r [f & [i c]]\n  (if c\n    (if (= c [])\n      [i]\n      (lazy-seq (cons\n        i\n        (r f (f i (first c)) (rest c)))))\n    (r f (first i) (rest i))))","problem":60,"user":"4f0f174c535d0136e6c22330"},{"problem":60,"code":"(fn anon \n      ([f xs] (anon f (first xs) (rest xs)))\n      ([f seed xs]\n       (lazy-seq (cons seed \n                       (when-let [s (seq xs)]\n                         (anon f (f seed (first s)) (rest s)))))))","user":"5f93529ae4b0715f5002d7bc"},{"code":"(fn r \r\n         ([f c]\r\n           (lazy-seq\r\n             (if-let [s (seq c)]\r\n               (r f (first s) (rest s)))))\r\n         ([f i c]\r\n           (lazy-seq\r\n             (cons \r\n               i\r\n               (when-let [s (seq c)]\r\n                 (r f (f i (first s)) (rest s)))))))","problem":60,"user":"4ecbb249535df97575fdabdf"},{"problem":60,"code":"(fn red \n   ([f a]\n    (red f (f (first a)) (rest a)))\n   ([f r a] \n   (lazy-seq \n   (if (empty? a)\n    (vector r)\n    (cons r (red f (f r (first a)) (rest a)))))))","user":"5d5ef0bce4b0c9e5857d4ffb"},{"problem":60,"code":"(fn my-reductions                                                                                                                                       \n    ([f coll] (my-reductions f (first coll) (rest coll)))                                                                       \n    ([f val coll] (if (empty? coll)                                                                                                                     \n        [val]                                                                                                                   \n        (let [new-val (f val (first coll))]                                                                                                             \n            (cons val (lazy-seq (my-reductions f new-val (rest coll))))))))","user":"558b50d5e4b027778923762b"},{"problem":60,"code":"(fn r\n  ([f [x & s]] (r f x s))\n  ([f a [x & s]] (lazy-seq (cons a (if x (r f (f a x) s))))))","user":"4e6961f0535d8ccf87e9fe9b"},{"problem":60,"code":"(fn reductions2\n  ([f [init & s]] (reductions2 f init s))\n  ([f acc [head & s]] (cons acc (if head (lazy-seq (reductions2 f (f acc head) s))))))","user":"55ccdc6be4b0e31453f64a18"},{"code":"(fn reduces\n  ([f lst] (reduces f (first lst) (rest lst)))\n  ([f v lst]\n    (cons v \n     (when-let [s (seq lst)]\n\t   (lazy-seq (reduces f (f v (first lst)) (rest lst))))\n    )\n  )\n)","problem":60,"user":"52bf8e35e4b07a9af579233a"},{"code":"(fn mreductions\n  ([f coll] (mreductions f (first coll) (rest coll)))\n  ([f val coll]\n     (cons val\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (mreductions f (f val (first s)) (rest s)))))))","problem":60,"user":"50705072e4b07bd6ad9b9f27"},{"problem":60,"code":"(fn ThisFunc\n    ([F L] (ThisFunc F (first L) (rest L) ))\n    ([F V L]      \n      (let [ V2 (first L) ]        \n        (if (nil? V2 )\n          [V]\n          (lazy-seq (cons V (ThisFunc F (F V V2) (rest L) )))\n        )\n      )\n            \n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn r\n  ([f s] (r f (first s) (rest s)))\n  ([f v s]\n    (for [x (if (counted? s) (range 0 (inc (count s))) (range))]\n         (reduce f v (take x s)))))","problem":60,"user":"4f1bb9d8535d64f60314647d"},{"problem":60,"code":"(fn r\n    ([f coll]\n     (r f (first coll) (rest coll)))\n    ([f val coll]\n     (if (empty? coll)\n       [val]\n       (lazy-seq (cons val (r f (f val (first coll)) (rest coll)))))))","user":"51b91b08e4b0e871ca4958f8"},{"code":"(fn reduceit\n    ([f x0 xs]  (if (empty? xs)\n                  (list x0)\n                  (cons x0 (lazy-seq (reduceit f (f x0 (first xs)) (rest xs))))))\n    ([f xs]     (lazy-seq (reduceit f (first xs) (rest xs)))))","problem":60,"user":"525f51bde4b0cb4875a45dc8"},{"problem":60,"code":"(fn myreduce\n  ([f coll] (myreduce f (first coll) (rest coll)))\n  ([f v coll]\n   (let [temp (fn temp[f v coll]\n               (lazy-seq\n                (if (empty? coll)\n                  nil\n                  (let [newv (f v (first coll))]\n                    (cons newv (temp f newv (rest coll)))\n                   )\n                 )\n               )\n               )\n        ]\n     (cons v (temp f v coll))\n    )\n   )\n )","user":"57cf03c0e4b00451144b04f9"},{"problem":60,"code":"(fn my-reduce \n  ([f coll] (my-reduce f (first coll) (rest coll)))\n  ([f init coll] (cons init (lazy-seq (if (empty? coll) nil (my-reduce f (apply f (list init (first coll))) (rest coll))))))\n  )","user":"54186e68e4b01498b1a71a1a"},{"code":"(fn my-reductions\r\n  ([f ls] (my-reductions f (first ls) (rest ls)))\r\n  ([f v ls] (lazy-seq\r\n             (if (empty? ls)\r\n               (list v)\r\n               (cons v (my-reductions f (f v (first ls)) (rest ls)))))))","problem":60,"user":"4dd62278535d2dad7130b5c7"},{"problem":60,"code":"(fn redu\n  ([function col] (redu function (first col) (rest col)))\n  ([function start col]\n   \t (if (empty? col)\n       (list start)\n       (cons start (lazy-seq (redu function (function start (first col)) (rest col))))\n     )\n  )\n)","user":"56979bb7e4b0e0b3d3318cac"},{"problem":60,"code":"(fn rd\n     ([f c]\n      (rd f (first c) (rest c)))\n     ([f ac c]\n      (lazy-seq\n        (cons\n          ac\n          (when (not-empty c)\n              (rd f (f ac (first c)) (rest c)))))))","user":"59e0f38ae4b08badc2a0c500"},{"problem":60,"code":"(fn _red\n    ([f coll] (cond\n                (empty? coll) (list (f))\n                :else (let [e (first coll)\n                            c2 (rest coll)\n                            ]\n                        (lazy-seq (_red f e c2))\n                )\n      ))\n    ([f val coll] (cons val (cond\n                    (empty? coll) (list)\n                    :else (let [e (first coll)\n                                red (f val e)\n                                c2 (rest coll)\n                                ]\n                            (lazy-seq (_red f red c2)))\n                    )))\n    )","user":"55aa5f73e4b0988bba2ad94b"},{"problem":60,"code":"(fn \n   ([f coll]\n     ((fn my-red [f coll initial]\n        (if-not (nil? (first coll))\n          (lazy-seq (cons initial (my-red f (drop 1 coll) (f initial (first coll)))))\n          (conj '() initial))) f (rest coll) (first coll)))\n   ([f initial coll]\n    ((fn my-red [f coll initial]\n       (if-not (nil? (first coll))\n         (lazy-seq (cons initial (my-red f (drop 1 coll) (f initial (first coll)))))\n         (conj '() initial))) f coll initial)))","user":"5508102ee4b021ccfedb96b0"},{"problem":60,"code":"(fn __ \n  ([f xs] (__ f (first xs) (next xs)))\n  ([f init xs] (if (empty? xs)\n                 (cons init nil)\n                 (lazy-seq (cons init (__ f (f init (first xs)) (next xs)))))))","user":"5c17467fe4b01240ff5671df"},{"problem":60,"code":"(fn my-reductions\n  ([f init v]\n   (if (empty? v)\n     [init]\n     (let [[x & xs] v]\n       (if (empty? xs)\n         [init (f init x)]\n         (concat [init] (lazy-seq (my-reductions f (f init x) xs)))))))\n  ([f v]\n   (if (empty? v)\n     (f)\n     (let [[x & xs] v]\n       (lazy-seq (my-reductions f x xs))))))","user":"58a0fc33e4b02bd94d917ea3"},{"code":"(fn sequence-reductions\n  ([op input] (sequence-reductions op (first input) (rest input)))\n  ([op result input]\n  (lazy-seq\n    (if (empty? input) (list result)\n      (cons result\n            (sequence-reductions op\n                 (op result (first input))\n                 (rest input)))))))","problem":60,"user":"52fcfeeee4b047fd55837027"},{"problem":60,"code":"(fn z\n  ([f v c] (cons v\n             (if-let [x (first c)]\n               (lazy-seq\n                 (z f (f v x) (rest c))\n                 )\n               )\n             )\n    )\n  ([f c] (z f (first c) (rest c)))\n  )","user":"55e1d34ae4b050e68259b421"},{"code":"(fn red\n  ([f r s]\n     (if (seq s)\n       (lazy-seq (cons r (red f (f r (first s)) (rest s))))\n       [r]))\n  ([f s]\n     (red f (first s) (rest s))))","problem":60,"user":"4f404dcee4b0e243712b1fb0"},{"code":"(fn reduc [f x & rs]\n  (let [[i & s] (if (empty? rs) x (cons x (first rs)))]\n    (if (empty? s) [i]\n      (cons i (lazy-seq (reduc f (f i (first s)) (rest s)))))))","problem":60,"user":"50901b2ee4b0ea685a20f774"},{"code":"(fn r\n  ([f c]\n     (lazy-seq\n      (if-let [s (seq c)]\n        (r f (first s) (rest s))\n        (list (f)))))\n  ([f i c]\n     (cons i\n           (lazy-seq\n            (when-let [s (seq c)]\n              (r f (f i (first s)) (rest s)))))))","problem":60,"user":"5107b86de4b05b2b4eee7495"},{"code":"(fn my-reductions\n  ([f xs] (my-reductions f (first xs) (rest xs)))\n  ([f start xs] (if (empty? xs)\n                    (cons start nil)\n                    (cons start (lazy-seq (my-reductions f (f start (first xs)) (rest xs)))))))","problem":60,"user":"5186134ce4b0da5a5be3bac7"},{"problem":60,"code":"(fn my-reductions                                       \n  ([f coll]                                               \n   (if (seq coll)                                         \n     (my-reductions f (first coll) (rest coll))           \n     (list (f))))                                         \n  ([f init coll]                                          \n   (lazy-seq                                              \n     (cons init                                           \n           (when-let [x (first coll)]                     \n             (my-reductions f (f init x) (rest coll)))))))","user":"566b57e9e4b0a866af6896ad"},{"code":"(fn r \n  ([f more] (r f (first more) (next more)))\n  ([f init more]\n     (if (empty? more)\n       [init]\n       (cons init (lazy-seq\n                   (r f (f init (first more)) (next more)))))))","problem":60,"user":"4fbef9a6e4b081705acca316"},{"code":"(fn red ([f coll] (red f (first coll) (next coll)))\r\n  ([f val coll]\r\n     (lazy-seq\r\n      (if-let [[x & xs] (seq coll)]\r\n        (cons val (red f (f val x) xs))\r\n        (list val)))))","problem":60,"user":"4dd4034a535dae65d5c462df"},{"code":"(fn r\n  ([f x]\n    (r f (first x) (rest x)))\n  ([f i x]\n    (cons i\n          (lazy-seq\n            (when (seq x)\n              (r f (f i (first x)) (rest x)))))))","problem":60,"user":"4e7dd982535db169f9c796ee"},{"problem":60,"code":"(fn reducex\n  ([f arr]\n   (reducex f\n            (f (first arr))\n            (drop 1 arr)))\n  ([f res arr]\n   (if (empty? arr)\n     (lazy-seq (cons res []))\n     (lazy-seq (cons res (reducex f\n                                  (f res (first arr))\n                                  (drop 1 arr)))))))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":60,"code":"(fn new-reductions\n  ([fun alist]\n   (new-reductions fun (first alist) (rest alist)))\n  ([fun init alist]\n   (let [a (first alist)\n         bs (rest alist)]\n     (cons init\n           (lazy-seq\n             (if (empty? alist) nil\n                                (new-reductions fun (fun init a) bs)))))))","user":"550d9452e4b06e50f9beb15d"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f init coll]\n   (lazy-seq\n    (cons init\n          (when (seq coll)\n            (red f (f init (first coll)) (rest coll)))))))","user":"597f8c93e4b0dbe32238d0c1"},{"code":"(fn fx\n  ([f [x & coll]]\n    (fx f x coll))\n  ([f x coll]\n    (lazy-seq\n      (if coll\n        (cons x (fx f (f x (first coll)) (next coll)))\n        [x]))))","problem":60,"user":"4e4ad154535dc968683fc4d1"},{"problem":60,"code":"(fn my-reduce\n  ([f init [s & more]] \n   (cons init (lazy-seq (when s (my-reduce f (f init s) more))))) \n  ([f coll] \n   (my-reduce f (first coll) (rest coll))))","user":"555a5731e4b0deb715856e44"},{"code":"(fn [f x & y]\n  (letfn [(rs [f init coll]\n    (cons init\n      (lazy-seq\n        (when-let [s (seq coll)]\n          (rs f (f init (first s)) (rest s))))))]\n    (if (empty? y) \n      (rs f (first x) (rest x))\n      (rs f x (first y)))))","problem":60,"user":"4ed286d4535d44c135fd68d7"},{"problem":60,"code":"(fn my-reductions\n  ([func coll]\n   (my-reductions func (first coll) (rest coll)))\n  ([func start coll]\n   (lazy-seq\n    (if (empty? coll)\n      (list start)\n      (cons start\n            (my-reductions func\n                           (func start (first coll))\n                           (rest coll)))))))","user":"57a9e274e4b0b8559636fc5d"},{"problem":60,"code":"(fn myreduce\n  ([f coll] (myreduce f (first coll) (rest coll)))\n  ([f init coll]\n   (if (nil? (first coll))\n     (lazy-cat (vector init))\n     (when-let [s (seq coll)]\n       (lazy-cat (vector init) (myreduce f (f init (first s)) (rest s)))\n       ))))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":60,"code":"(fn myreduc \n  ([f s] (myreduc f (first s) (rest s))) \n  ([f i s] (lazy-seq \n            (if (empty? s) \n              [i] \n              (cons i (myreduc f (f  i (first s)) (rest s)))))))","user":"573ce277e4b05c31a32c080b"},{"problem":60,"code":"(fn reds\n  ([func acc coll] (reds func (cons acc coll)))\n  ([func coll]\n   (letfn [(inc-seqs [sq n]\n            (when (= n (count (take n sq)))\n             (cons (take n sq)\n                   (lazy-seq\n                    (inc-seqs sq(inc n))))))]\n     (map #(reduce func %)\n          (inc-seqs coll 1)))))","user":"53dd37aee4b0d874e779ae28"},{"problem":60,"code":"(fn rd\n  ([a b] (rd a (first b) (rest b)))\n  ([a b c]\n   (lazy-seq\n    (if (empty? c) [b]\n      (cons b (rd a (a b (first c)) (rest c)))))))","user":"53a1b5c8e4b0ca733b9744c1"},{"problem":60,"code":"(fn my-fn\n  ([f coll]\n   (my-fn f (first coll) (rest coll)))\n  ([f r coll]\n   (lazy-seq (cons r (if (and coll (first coll)) (my-fn f (f r (first coll)) (rest coll)))))))","user":"57086931e4b0b0fb43fd069e"},{"problem":60,"code":"(fn r \n  ([f coll] (r f (first coll) (next coll)))\n  ([f init coll]\n   (if (seq coll)\n     (lazy-seq (cons init (r f (f init (first coll)) (next coll))))\n     (cons init []))))","user":"4f1ef6a0535d64f60314649b"},{"problem":60,"code":"(fn red\n  ([f [init & xs]] (red f init xs))\n  ([f init [x1 & xs]]\n    (if (nil? x1)\n      [init]\n      (cons init (lazy-seq (red f (f init x1) xs)))\n      )\n    )\n  )","user":"54dae16de4b024c67c0cf758"},{"problem":60,"code":"(fn solution\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (solution f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n             (when-let [s (seq coll)]\n               (solution f (f init (first s)) (rest s)))))))","user":"5ff5bc1ae4b06df49cee1490"},{"code":"(fn my-reductions\n    ([f xs] (my-reductions f (first xs) (rest xs)))\n    ([f init xs]\n        (cons init \n            (lazy-seq\n                (when-first [x xs] \n                    (my-reductions f (f init x) (rest xs)))))))","problem":60,"user":"4f0660ee535dcb61093f6c0d"},{"code":"(fn red\n  ([f a] (red f (first a) (rest a)))\n  ([f i a]\n    (cons i\n      (lazy-seq\n        (when (seq a)\n          (red f (f i (first a)) (rest a)))))))","problem":60,"user":"5164867fe4b003cf19fdde3e"},{"code":"(fn reduc\n  ([f lst]\n     (reduc f (first lst) (rest lst)))\n  ([f init lst]\n     (cons init\n           (when-let [s (seq lst)]\n             (lazy-seq (reduc f (f init (first lst)) (rest lst)))))))","problem":60,"user":"502a4fdfe4b09dd42f6f3644"},{"problem":60,"code":"(fn reductions* \n  ([f coll]\n   (reductions* f (first coll) (rest coll)))\n  ([f v coll]\n   (if (empty? coll)\n     (list v)\n     (cons v (lazy-seq (reductions* f (f v (first coll)) (rest coll)))))))","user":"545e7ab0e4b01be26fd7467c"},{"problem":60,"code":"(fn my-reduce\n    ([func sqnc] (my-reduce func (first sqnc) (rest sqnc)))\n    ([func value sqnc]\n     (lazy-seq\n       (if (empty? sqnc)\n         (list value)\n         (cons value\n               (my-reduce func (func value (first sqnc)) (rest sqnc))\n               )))))","user":"5d52bf29e4b0776584bd6f69"},{"problem":60,"code":"(fn cumulative_reduce\n  ([f args]\n   (let [[firstArg] (take 1 args)] (cumulative_reduce f firstArg (drop 1 args)))\n   )\n  ([f initial args]\n   (lazy-seq\n    (if (first args)\n      (cons initial (cumulative_reduce f (f initial (first args)) (rest args)))\n      (list initial)\n      )\n    )\n   )\n  )","user":"57d0fce5e4b0bd073c202364"},{"code":"(fn r\n  ([f c]\n   (map-indexed (fn [i j] (reduce f (take (inc i) c))) c))\n  ([f v c]\n   (r f (cons v c))))","problem":60,"user":"50ebd63ce4b04edc3377703c"},{"code":"(fn k-reductions\n  ([f x]\n     (if (empty? x)\n       nil\n       (cons (f (first x))\n             (lazy-seq (k-reductions f\n                                     (f (first x))\n                                     (rest x)\n                                     true)))))\n  ([f val x]\n     (cons val (lazy-seq (k-reductions f\n                                       val\n                                       x\n                                       true))))\n  ([f val x c]\n     (if (empty? x)\n       nil\n       (cons (f val (first x))\n             (lazy-seq (k-reductions f\n                                     (f val (first x))\n                                     (rest x)\n                                     true))))))","problem":60,"user":"4db58ccb535d87e67b28fe10"},{"code":"(fn reduc\n  ([f xs]\n  (reduc f (first xs) (rest xs)))\n  ([f x xs] \n  (lazy-seq (cons x (if (empty? xs) [] (reduc f (f x (first xs)) (rest xs)) )) )))","problem":60,"user":"4f320253e4b0d6649770a08d"},{"code":"(fn reductions1 \n  ([f [a b & more]] (cons a (lazy-seq (reductions1 f (f a b) more))))\n  ([f init coll]\n   (cons init (lazy-seq (when-let [[b & more] coll] (reductions1 f (f init b) more))))))","problem":60,"user":"532347dde4b09d4e7a9b54cc"},{"code":"(fn myred\n    ([f coll] (myred f (first coll) (rest coll)))\n    ([f val coll]\n       (if (seq coll)\n         (let [nval (f val (first coll))]\n           (cons val (lazy-seq (myred f nval (rest coll)))))\n         [val])))","problem":60,"user":"4efd8b67535de96065cf5085"},{"code":"(fn dr\n    ([f rest-seq]\n        (dr f (first rest-seq) (rest rest-seq)))\n    ([f past-result rest-seq]\n        (lazy-seq\n            (if\n                (nil? (first rest-seq))\n                    (cons past-result '())\n                (cons past-result (lazy-seq (dr f (f past-result (first rest-seq)) (rest rest-seq))))))))","problem":60,"user":"4ed72e51535d10e5ff6f52ee"},{"problem":60,"code":"(fn \n  ([f coll] (->> (iterate #(vector (conj (first %) (f (last (first %)) (first (last %))))\n                                   (rest (last %))) [[(first coll)] (rest coll)])\n                 (map first)\n                 (map last)))\n  ([f x coll] (->> [[x] coll]\n                   (iterate #(vector (conj (first %) (f (last (first %)) (first (last %))))\n                                     (vec (rest (last %)))))\n                   (map first)\n                   (map last)\n                   (take 4))))","user":"54db3d82e4b024c67c0cf75f"},{"code":"(fn red\n  ([f coll]\n   (red f (first coll) (drop 1 coll)))\n  ([f init coll]\n   (cons\n    init\n    (lazy-seq\n     (if (empty? coll)\n      coll\n      (red f\n       (f init (first coll))\n       (drop 1 coll)))))))","problem":60,"user":"511f88eee4b085952a83535f"},{"problem":60,"code":"(fn reduc\n    ([f coll]\n     (lazy-seq\n       (if-let [s (seq coll)]\n         (reduc f (first s) (rest s))\n         (list (f)))))\n    ([f init coll]\n     (cons init\n           (lazy-seq\n             (when-let [s (seq coll)]\n               (reduc f (f init (first s)) (rest s)))))\n    )\n  )","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":60,"code":"(fn\n  [f acc & la]\n  (let [[a l] (if (seq la) [acc (first la)] [(first acc) (rest acc)])\n        red (fn red [f acc s]\n               (lazy-seq\n                 (cons acc\n                   (if-let [sq (seq s)]\n                       (let [next-acc (f acc (first sq))]\n                          (red f next-acc (rest sq)))\n                       '()))))]\n    (red f a l)))","user":"58983e3fe4b00487982d52ce"},{"code":"(fn my-reductions\n  ([f coll]\n     (if-let [s (seq coll)]\n       (my-reductions f (first s) (rest s))\n       (list (f))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (my-reductions f (f init (first s)) (rest s)))))))","problem":60,"user":"4e39fb68535deb9a81d77f47"},{"problem":60,"code":"(fn fnc\n  ([dfnc coll] (fnc dfnc (first coll) (rest coll)))\n  ([dfnc acc coll]\n   (if (not-empty coll) (cons acc (lazy-seq (fnc dfnc (dfnc acc (first coll)) (rest coll)))) [acc])\n    )\n  )","user":"558fec41e4b0277789237666"},{"code":"(fn rdctions\n  \t([f xs] (rdctions f (first xs) (next xs)))\n    ([f init xs] (if xs (lazy-seq (cons init (rdctions f (f init (first xs)) (next xs)))) (vector init))))","problem":60,"user":"513d121fe4b0e544971636a2"},{"problem":60,"code":"(fn reductions2\n  ([f coll]\n   (lazy-seq\n    (if-let [s (seq coll)]\n      (reductions2 f (first s) (rest s))\n      (list (f)))))\n  ([f init coll]\n   (cons init\n          (lazy-seq\n           (when-let [s (seq coll)]\n             (reductions2 f (f init (first s)) (rest s)))))))","user":"5823d3e6e4b051871117beb8"},{"code":"(fn p60 [f & others]\n\n  (let [num-params (count others)\n\n\t\t  init (if (= num-params 2)\n\n\t\t\t\t  (first others)\n\n\t\t\t\t  (first (first others)))\n\n\t\t  s (if (= num-params 2)\n\n\t\t  \t\t(last others)\n\n\t\t  \t\t(next (first others)))]\n\n\t\t  (lazy-seq\n\n\t\t  \t(cons\n\n\t\t  \t\tinit\n\n\t\t  \t\t(when s\n\n\t\t  \t\t\t(p60 f (f init (first s)) (next s)))))))","problem":60,"user":"4f7f0827e4b06e829148e1d5"},{"code":"(fn r ([f coll] (r f (first coll) (rest coll)))\n      ([f val coll]\n        (if (empty? coll)\n          [val]\n          (cons val (lazy-seq (r f (f val (first coll)) (rest coll)))))))","problem":60,"user":"51e28063e4b08e53a149f0f2"},{"problem":60,"code":"(fn my-reduce\n  ([f [first-element & remaining]]\n   (my-reduce f first-element remaining))\n  ([f result [current & remaining]]\n   (if current\n     (lazy-cat (list result)\n               (my-reduce f (f result current) remaining))\n     (list result))))","user":"59a080e3e4b0871e7608b837"},{"problem":60,"code":"(fn sr\n  ([f coll]\n   (sr f (first coll) (rest coll)))\n  ([f v coll]\n   (lazy-seq \n    (if (empty? coll)\n     (vector v)\n     (cons v (sr f (f v (first coll)) (rest coll)))))))","user":"5640b135e4b08d4f616f5ee8"},{"problem":60,"code":"(fn reduce-steps\n  ([f col] (reduce-steps f (first col) (rest col)))\n  ([f first-val col]\n   (let [prodfn (fn prodfn [res col]\n                  (if (seq col)\n                    (let [[hd & tl] col\n                          res (f res hd)]\n                      (lazy-seq (cons res (prodfn res tl))))\n                    nil))]\n     (cons first-val (prodfn first-val col)))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":60,"code":"(fn ired\n  ([f coll]\n   (lazy-seq (cons (first coll)\n                   (ired f (f (first coll) (second coll)) (rest (rest coll))))))\n  ([f current coll]\n   (if-not (seq coll)\n     (vector current)\n     (let [next-value (f current (first coll))]\n       (lazy-seq (cons current (ired f next-value (rest coll))))))))","user":"5e8ce2fee4b0cb0169546328"},{"problem":60,"code":"(fn reds\n  ([f c]\n   (reds f (first c) (rest c)))\n  ([f i c]\n   (lazy-seq\n    (cons i \n          (when (seq c)\n            (reds f (f i (first c)) (rest c)))))))","user":"54acf5c7e4b09f271ff37cdd"},{"code":"(fn this [f & [acc col]]\n  (if (= nil col)\n    (this f (first acc) (rest acc))\n    (if (empty? col)\n      (list acc)\n      (lazy-seq\n       (cons acc (this f (f acc (first col)) (rest col)))))))","problem":60,"user":"534941d1e4b084c2834f4a60"},{"code":"(fn red-seq\n  ([f a c] \n    (cons a\n    ((fn get-seq [op acc coll] \n      (if (not (nil? (first coll)))\n  \t(let [nxt (op acc (first coll))]\n          (lazy-seq (cons nxt (get-seq op nxt (rest coll)))))))\n     f a c)))\n  ([f c]\n    (cons (first c)\n\t((fn get-seq [op acc coll] \n      (if (not (nil? (first coll)))\n\t\t(let [nxt (op acc (first coll))]\n          (lazy-seq (cons nxt (get-seq op nxt (rest coll)))))))\n     f (first c) (drop 1 c))))\n  )","problem":60,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":60,"code":"(fn reducts\n  ([f [c0 & cr]]\n   (reducts f c0 cr))\n  ([f init [c0 & cr :as coll]]\n   (if (empty? coll)\n     (list init)\n     (->> cr\n          (reducts f (f init c0))\n          (cons init)\n          (lazy-seq)))))","user":"5d2e5065e4b01671435dbcae"},{"problem":60,"code":"(fn my-reductions \n  ([f s] (my-reductions f (first s) (rest s)))\n  ([f acc s]\n   (cons acc (lazy-seq\n               (if (empty? s)\n                 nil\n                 (my-reductions f\n                            (f acc (first s))\n                            (rest s)))))))","user":"567c7fefe4b05957ce8c61bc"},{"problem":60,"code":"(fn afoo\n ([foo coll] (afoo foo (first coll) (rest coll)))\n ([foo aggr coll]\n  (if (nil? (first coll))\n    [aggr]\n    (lazy-seq (cons aggr (afoo foo (foo aggr (first coll)) (rest coll)))))))","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn foo\r\n  ([f c]\r\n    (let [ffc (f (first c))]\r\n    (foo f ffc (rest c))))\r\n  ([f s c]\r\n      (if-let [fc (first c)]\r\n        (let [fsfc  (f s fc)]\r\n          (lazy-seq (cons s (foo f fsfc (rest c)))))\r\n        [s])))","problem":60,"user":"4dbbdf86535d3f4042261ece"},{"problem":60,"code":"(fn r \n\t  ([f init [x & xs]]\n\t    (cons init (lazy-seq (when x (r f (f init x) xs))))\n\t  )\n\t  ([f coll]\n\t    (r f (first coll) (rest coll))\n\t  )\n\t)","user":"5831846ae4b051871117c02c"},{"problem":60,"code":"(fn rdc\n  ([f s] (rdc f (first s) (rest s)))\n  ([f a s] \n    (lazy-seq \n      (cons a \n        (when (not-empty s)\n          (rdc f (f a (first s)) (rest s))))\t\n  )))","user":"5654d0e1e4b0f9d632dd848c"},{"problem":60,"code":"(fn test\n  ([f coll]\n    (test f (first coll) (rest coll))\n   )\n  ([f v coll]\n    (cons v (lazy-seq (when (first coll) (test f (f v (first coll)) (rest coll)))))\n   )\n)","user":"54021f13e4b0df28a13c62cc"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (cons (first coll) (my-reductions f (f (first coll) (second coll)) (rest (rest coll)))))\n  ([f acc coll]\n   (if (empty? coll) (list acc)\n    (cons acc (lazy-seq (my-reductions f (f acc (first coll)) (rest coll))))))\n)","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn reds\n  ([f s] (reds f (first s) (drop 1 s)))\n  ([f n s] (reds f n s 0))\n  ([f n s i] \n    (if (and (counted? s) (> i (count s)))\n      nil\n      (lazy-seq (cons (reduce f n (take i s))\n                      (reds f n s (inc i)))))))","problem":60,"user":"4e28120f535deb9a81d77efa"},{"problem":60,"code":"(fn red\n([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (red f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n       (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (red f (f init (first s)) (rest s)))))))","user":"5edd6eb7e4b0c7845d86b0f7"},{"problem":60,"code":"(fn reduce-\n  ([f coll]\n   (reduce- f (first coll) (next coll)))\n  ([f init [h & t :as coll]]\n   (cons init\n        (lazy-seq\n             (if (seq coll)\n               (reduce- f (f init h) t))))))","user":"4e586949535d8a8b8723a292"},{"code":"(fn redd \n  ([op col]\n    (redd op (first col) (rest col)))\n  ([op init col]\n    (if (empty? col)\n      (vector init)\n      (let [new (op init (first col))]\n        (cons init (lazy-seq (redd op new (rest col))))))))","problem":60,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"(fn reductions_\n  ([f s]\n    (if (empty? s) nil\n        (reductions_ f (first s) (rest s))))\n  ([f x s]\n    (if (empty? s) [x]\n        (lazy-seq \n          (cons x (reductions_ f (f x (first s)) (rest s)))))))","problem":60,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":60,"code":"(fn _reductions\n  ([f xs] (_reductions f nil (rest xs) [(first xs)]))\n  ([f init coll] (lazy-seq (cons init (_reductions f init (rest coll) [(first coll)]))))\n  ([f init coll acc] \n    (let [r (if (= init nil) (reduce f acc) (reduce f init acc))]\n      (if (empty? coll) [r]\n        (lazy-seq \n          (cons r (_reductions f init (rest coll) (conj acc (first coll)))))))))","user":"52ee0de4e4b05e3f0be25ec1"},{"problem":60,"code":"(fn fred\n  ([f [p1 & ps]] (fred f p1 ps))\n  ([f p1 [p2 & ps]]\n   (cons p1 (if (not-empty ps)\n              (lazy-seq (fred f (f p1 p2) ps))\n              [(f p1 p2)]))))","user":"4edee6a2535d10e5ff6f533e"},{"problem":60,"code":"(fn my-reductions\n    ([f coll] \n    (my-reductions f (first coll) (rest coll)))\n    ([f init coll]\n    (lazy-seq (cons init\n    (when-let [s (seq coll)]\n    (my-reductions f (f init (first s)) (rest s)))\n    )))\n    )","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":60,"code":"(fn a \n        ([f init coll] \n            (if (empty? coll)\n                (lazy-seq (cons init (lazy-seq)))\n            (lazy-seq (cons \n                init \n                (a \n                    f \n                    (f init (first coll)) \n                    (rest coll))))))\n        \n        ([f coll]\n            (a f (f (first coll)) (rest coll)))\n    )","user":"5b274fd1e4b063e2438bcc3b"},{"code":"(fn seq-red\n  ([f x] (seq-red f (first x) (rest x)))\n  ([f x y]\n     (cons x (map #(apply f x (take (+ 1 (first %)) y)) (map-indexed vector y)))))","problem":60,"user":"5339af7de4b0e30313ee6cab"},{"problem":60,"code":"(fn red\n  ([f coll] (red f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll) [init]\n     (lazy-seq (cons init (red f (f init (first coll)) (rest coll)))))))","user":"56ae214ce4b03c432f18735a"},{"problem":60,"code":"(fn redu [f & ags]\n  (let [arity (> (count ags) 1)\n        [ah & at] (last ags)\n        [b s] (if arity (vec ags) [ah at])]\n    (if (empty? s) \n      [b]\n      (lazy-seq \n        (cons b (redu f (f b (first s)) (rest s)))))))","user":"56f51879e4b046a417f92069"},{"problem":60,"code":"(fn my-reductions\n  ([f init xs] (if (empty? xs) [init] (cons init (lazy-seq (my-reductions f (f init (first xs)) (rest xs))))))\n  ([f xs] (my-reductions f (first xs) (rest xs))))","user":"5412ef7ee4b01498b1a719da"},{"problem":60,"code":"(fn sr\n  ([f xs] (sr f (f (first xs)) (rest xs)))\n  ([f r xs]\n    (if (empty? xs)\n      (lazy-seq (cons r nil))\n      (lazy-seq (cons r (sr f (f r (first xs)) (rest xs)))))))","user":"564a5a09e4b0284900eef656"},{"problem":60,"code":"(fn myreductions\n  ([f coll] (myreductions f (first coll) (next coll)))\n  ([f value coll]\n   (cons value \n        (when-let [e (first coll)]\n          (lazy-seq (myreductions f (f value e) (next coll)))))))","user":"5958cef6e4b066ee0a44af94"},{"problem":60,"code":"(fn redux\n   ([f coll] (redux f (first coll) (rest coll)))\n   ([f h t] (lazy-seq\n             (if (empty? t)\n               [h]\n               (cons h (redux f (f h (first t)) (rest t)))))))","user":"567a680ee4b05957ce8c6198"},{"code":"(fn mReductions \n\t([func inList]\n\t\t(cons (first inList) \n\t\t((fn incReduce [cur [x & xs]]\n\t\t\t (do\n\t\t\t  ; (print cur x xs)\n\t\t\t(if (nil? x)\n\t\t\t\t[]\n\t\t\t\t(let [nxt (func cur x)]\n\t\t\t\t\t(cons nxt\n\t\t\t\t\t(lazy-seq \n\t\t\t\t\t\t; (print nxt xs)\n\t\t\t\t\t\t(incReduce nxt xs)))))))\n\t\t(first inList) (rest inList))))\n\t([func initial inList] (mReductions func (cons initial inList))))","problem":60,"user":"52bf6946e4b07a9af5792334"},{"problem":60,"code":"(fn rdctns\n  ([f v c]\n   (rdctns f (cons v c)))\n  ([f c]\n   (when-let [s (seq c)]\n     (let [[x & rst] s]\n       (if rst\n         (lazy-seq (cons x (rdctns f (cons (f x (first rst)) (next rst)))))\n         (list x))\n      ))))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn my-reductions [& xs]\n  (let [f (first xs)\n        i (if (= 3 (count xs)) (second xs) (first (last xs)))\n        p (if (= 3 (count xs)) (last xs) (rest (last xs)))]\n    ((fn walk [r rp]\n       (lazy-seq\n         (cons r (if (empty? rp) [] (walk (f r (first rp)) (rest rp)))))) i p)))","problem":60,"user":"4f251302e4b0d66497709ff0"},{"problem":60,"code":"(fn reducto ([func params] \n               (lazy-seq (reducto func (func (first params))(rest params))))\n  ([func prev params]\n   (if (not (nil? (seq params)))\n     (let [nxt (func prev (first params))]\n       (lazy-seq (cons prev (reducto func nxt (rest params)))))\n     [prev])))","user":"5ef5ee81e4b07c55ae4a054a"},{"problem":60,"code":"(fn reds3\n  ([f [h & r]] (reds3 f h r))\n  ([f h c]\n   (let [red (fn red [f h [n & r]]\n               (when n\n                 (let [hn (f h n)]\n                   (lazy-seq (cons hn (red f hn r))))))]\n     (cons h (red f h c)))))","user":"5fd92743e4b05ac5b16ea11f"},{"problem":60,"code":"(fn redtn\n  ([f coll]\n   (lazy-seq\n    (redtn f (first coll) (rest coll))))\n  ([f init coll]\n   (lazy-seq\n    (cons init\n          (lazy-seq\n           (when-let [s (seq coll)]\n             (redtn f (f init (first s)) (rest s))))))))","user":"5832be57e4b089d5ab817c86"},{"code":"(fn sequence-reductions*\n    ([f s]\n       (sequence-reductions* f (first s) (rest s)))\n    ([f ini s]\n       (let [rs (map (fn [idx _] (take (inc idx) s)) (range) s)]\n         (cons ini (map #(reduce f ini %) rs)))))","problem":60,"user":"51c3c6a6e4b0851ac09658f8"},{"code":"(fn red\n  ([f xs] (red f (first xs) (rest xs)))\n  ([f x xs] (lazy-seq (if (empty? xs) (list x) (cons x (red f (f x (first xs)) (rest xs)))))))","problem":60,"user":"4f4f0287e4b03ad3f0c10cd7"},{"problem":60,"code":"(let [reds \t(fn redfn[f base coll] \n              (lazy-seq \n               (when-let [s (seq coll)] \n                 (let [scan (f base (first s))] \n                   (cons scan (redfn f scan (rest s)))))))] \n  (fn \n    ([f base coll]\t(lazy-cat [base] (reds f base coll))) \n    ([f coll] \t\t(reds f 0 coll))))","user":"5564cad5e4b0c656e3ff180f"},{"code":"(fn r ([f v [x & res :as coll]] (if-not (seq coll)\n                                    (list v)\n                                    (let [result (f v x)]\n                                      (lazy-cat (list v) (r f result res)))))\n  ([f [x & res :as coll]] (if-not (seq coll)\n                            (list (f))\n                            (r f x res))))","problem":60,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":60,"code":"(fn r\n  ([f [x & xs]]\n   (r f x xs))\n  ([f i [x & xs]]\n   (if x\n     (cons i (lazy-seq (r f (f i x) xs)))\n     [i])))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":60,"code":"(fn my-reductions\n  ([f v col]\n      (if (empty? col) (list v) \n      (lazy-seq (cons v \n                      (my-reductions f (f v (first col)) (next col))))))\n  ([f col]\n    (my-reductions f (first col) (next col) ))\n  )","user":"50856bd1e4b004985b776e4c"},{"code":"(fn step-reduc\n  ([func coll]\n   (if (empty? coll)\n     nil\n     (step-reduc func (first coll) (rest coll))))\n  ([func acc coll]\n   (if (empty? coll)\n     (list acc)\n     (lazy-seq (cons\n                 acc\n                 (step-reduc func\n                             (func acc (first coll))\n                             (rest coll)))))))","problem":60,"user":"51b8e8b3e4b050a1176cd6a0"},{"problem":60,"code":"(fn f ([func xs] (cons (first xs) (f func (func (first xs) (second xs)) (drop 2 xs))))\n      ([func v xs]\n        (if ((comp not empty?) xs)\n          (cons v (lazy-seq (f func (func v (first xs)) (rest xs))))\n          (list v))))","user":"549e5e52e4b0f3d1d8e70f9e"},{"problem":60,"code":"(fn reductions2\n  ([f coll]\n   (reductions2 f (first coll) (rest coll)))\n  ([f init [first & rest]]\n   (cons init (lazy-seq (when first (reductions2 f (f init first) rest))))))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":60,"code":"(fn red\n  ([op l] (red op (first l) (rest l)))\n  ([op ac l] (if (empty? l) (list ac) (cons ac (lazy-seq (red op (op ac (first l)) (rest l)))))))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":60,"code":"(fn my-reductions\n  ([f start coll]\n   (cons start\n         (lazy-seq (when-let [s (seq coll)]\n                     (my-reductions f\n                                    (f start (first s))\n                                    (rest s))))))\n  ([f coll]\n   (my-reductions f (first coll) (rest coll))))","user":"54d0cedde4b0e8a36923e5d2"},{"problem":60,"code":"(fn RED ([f s] (RED f (first s) (rest s)))\n  ([f i s] (if (empty? s) (list i) (lazy-seq (cons i (RED f (f i (first s)) (rest s)))))))","user":"5b3f2ba9e4b02d533a91bc09"},{"problem":60,"code":"(fn r\n  ([f l] (r f (first l) (rest l)))\n  ([f s l] (if (= l []) (cons s []) (cons s (lazy-seq (r f (f s (first l)) (rest l))))) )\n)","user":"53aef31ce4b047364c04447b"},{"code":"(fn r([f [h & t]] (r f h t)) ([f v s] (cons v (if-let [[h & t] s] (lazy-seq (r f (f v h) t))))))","problem":60,"user":"4f296a80e4b0d6649770a02a"},{"code":"(fn r ([f coll] (r f (first coll) (rest coll)))\r\n    ([f start coll] (if (empty? coll)\r\n                      [start]\r\n                      (lazy-seq (cons start (r f (f start (first coll)) (rest coll)))))))","problem":60,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn rr \n    ([f [x & xs]] \n      (rr f x xs))\n    ([f v l]\n        (lazy-seq          \n            (concat [v] (if (seq l) (rr f (f v (first l)) (rest l)) [])))))","problem":60,"user":"4e5f08c7535d8a8b8723a2da"},{"code":"(fn my-reductions\n  ([f coll]\n     (lazy-seq\n      (let [s (seq coll)]\n        (my-reductions f (first s) (rest s)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (my-reductions f (f init (first s)) (rest s)))))))","problem":60,"user":"52976262e4b02ebb4ef75041"},{"problem":60,"code":"(fn  \n  ([op x & colls]\n   (loop [result-colls (if (empty? colls) [] [x])\n          index 0\n          remain (if (empty? colls) x (first colls))]\n     (cond \n       (empty? remain) result-colls\n       (>= index 10) result-colls ;fixit\n       (empty? result-colls) \n       (recur \n         (conj result-colls (first remain))\n         (inc index)\n         (drop 1 remain))\n       :else (recur (conj result-colls (op\n                                         (last result-colls) \n                                         (first remain)))              \n\n               (inc index)\n               (drop 1 remain))))))","user":"5794fd7be4b0e215f87e8476"},{"code":"(fn blah \n    ([f coll] (blah f (first coll) (rest coll)))\n    ([f init coll] \n     (cons init\n           (if (not-empty coll) \n             (lazy-seq (blah f (f init (first coll)) (rest coll)))\n             nil))))","problem":60,"user":"4f17aa97535d64f603146456"},{"code":"(fn myfn\n  ([f coll] (myfn f (first coll) (rest coll)))\n  ([f val coll] \n     (cons val\n           (lazy-seq\n             (when-let [s (seq coll)]\n               (myfn f (f val (first s)) (rest s)))))))","problem":60,"user":"52f07ccee4b05e3f0be25edf"},{"problem":60,"code":"(fn ir\n  ([f s]\n   (ir f (first s) (rest s)))\n  ([f a s]\n   (if (empty? s)\n     [a]\n     (let [new-a (f a (first s))]\n       (lazy-seq (cons a (ir f new-a (rest s)))))))\n  )","user":"583048d9e4b051871117c007"},{"code":"#({+ [0 1 3 6 10] conj [[1] [1 2] [1 2 3] [1 2 3 4]] * [120] %& %} %)","problem":60,"user":"5336a339e4b0e30313ee6c7d"},{"code":"(fn r\n  ([f l]\n    (for [e (range) :while (seq (drop e l))] (reduce f (take (inc e) l))))\n  ([f i l] (r f (cons i l))))","problem":60,"user":"4ede361a535d10e5ff6f5332"},{"problem":60,"code":"(fn rec\n        ([f coll]\n         (lazy-seq\n          (if-let [s (seq coll)]\n            (rec f (first s) (rest s))\n            (list (f)))))\n        ([f init coll]\n         (cons init\n               (lazy-seq\n                (when-let [s (seq coll)]\n                  (rec f (f init (first s)) (rest s)))))))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":60,"code":"(fn reductions2\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reductions2 f (first s) (rest s)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reductions2 f (f init (first s)) (rest s)))))))","user":"4fe49706e4b0e8f79898feb7"},{"code":"(fn r\n  ([f [h & b]] (r f h b))\n  ([f i [h & b]]\n   (cons i \n         (lazy-seq\n            (when h \n              (r f (f i h) b))))))","problem":60,"user":"52b02329e4b0c58976d9acc5"},{"problem":60,"code":"(fn reduct\n  ([f coll] (reduct f (first coll) (rest coll)))\n  ([f initial coll]\n   (lazy-seq (let [c (seq coll)]\n               (if (seq? c)\n                 (cons initial (reduct f (f initial (first c)) (rest c)))\n                 (list initial))))))","user":"5609d328e4b05f002753deee"},{"code":"(fn *r\n  ([f coll] (*r f (first coll) (rest coll)))\n  ([f val coll]\n   (cons val (when (seq coll)\n               (lazy-seq (*r f (f val (first coll)) (rest coll)))))))","problem":60,"user":"51ab4082e4b04e3dc0c27b31"},{"code":"(fn\n  ([func coll]\n   (map (fn [n] (reduce func (take n coll))) (rest (range))))\n  ([func first-item coll]\n    (let [c (cons first-item coll)]\n      (take (count c)\n            (map (fn [n] (reduce func (take n c))) (rest (range)))))))","problem":60,"user":"5225271fe4b01819a2de42f9"},{"problem":60,"code":"(fn this\n  ([f coll] (this f (first coll) (rest coll)))\n  ([f i coll]\n   (let [[frst & rst] coll]\n     (if (seq rst)\n       (lazy-seq (cons i (this f (f i frst) rst)))\n       (lazy-seq (cons i [(f i frst)]))\n       ))))","user":"58923efce4b00487982d521c"},{"problem":60,"code":"(fn my-reduce\n  ([f coll] (my-reduce f (first coll) (rest coll)))\n  ([f acc coll]\n   (lazy-seq\n    (cons acc (if (empty? coll) nil (my-reduce f (f acc (first coll)) (rest coll)))))))","user":"53d63e6ce4b0e771c3025454"},{"problem":60,"code":"(fn reduccerr\n           ([f v coll] \n            (lazy-seq\n             (if (first coll)\n               (let [acc \n                     (f v (first coll))] \n                 (cons v (reduccerr f acc (rest coll)) ))\n               `(~v)\n               )))\n           ([f coll] \n            (reduccerr f (first coll) (rest coll))))","user":"567476bde4b05957ce8c6139"},{"problem":60,"code":"(fn reduxSeq [& args] \n  (let \n    [inner \n     (fn reduxSeqIn\n       [func init myseq] \n       (let [firstElem (first myseq), nextInit (apply func (list init firstElem))]\n         (if (nil? (second myseq))\n           (list nextInit)\n\t\t   (cons nextInit (lazy-seq (reduxSeqIn func nextInit (rest myseq))))))\n       ),\n     wrapper \n     (fn \n       ([func myseq] (inner func 0 myseq))\n       ([func init myseq] \n        (cons init (lazy-seq (inner func init myseq)))))]\n    (apply wrapper args)))","user":"58950f29e4b00487982d5270"},{"problem":60,"code":"(fn seqf\n  ([f i s] (cons i (if (empty? s) nil (lazy-seq (seqf f (f i (first s)) (rest s))))))\n  ([f i] (seqf f (first i) (rest i)))\n)","user":"55eeb37ae4b0121d4835fdf3"},{"problem":60,"code":"(fn my-reduce-inter3\n  ([fun lis] (my-reduce-inter3 fun (first lis) (rest lis)))\n  ([fun ini lis]\n   (if (not= lis [])\n     (let [aux (fun ini (first lis))]\n       (lazy-seq (cons ini (my-reduce-inter3 fun aux (rest lis)))))\n     (list ini))))","user":"574f1c24e4b02ea114799255"},{"code":"(fn reductions*\n  ([f [x & xs]]\n     (reductions* f x xs))\n  ([f init [x & xs]]\n     (if-not x\n       [init]\n       (lazy-cat [init] (reductions* f (f init x) xs)))))","problem":60,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"(fn myrs\n  ([f c] (myrs f (first c) (rest c)))\n  ([f i c]\n     (if-let [s (seq c)]\n       (let [n (f i (first s))]\n         (lazy-seq (cons i (myrs f n (rest s)))))\n       (cons i nil))))","problem":60,"user":"5392b849e4b0b51d73faaeb1"},{"problem":60,"code":";; Originall from https://github.com/qiuxiafei/4clojure/blob/master/answers/60.%20Sequence%20Reductions\n(fn my-reductions\n  ([op input] (my-reductions op (first input) (rest input))) \n  ([op result input]\n   (lazy-seq\n    (if (empty? input) (vector result)\n      (cons result\n            (my-reductions op\n                           (op result (first input))\n                           (rest input)))))))","user":"568e1871e4b0dcc4269f40cc"},{"code":"(fn temp\r\n  ([f coll]\r\n    (temp f (first coll) (next coll)))\r\n  ([f val coll]\r\n      (cons val  (lazy-seq \r\n                 (when-let [s (seq coll)]\r\n                  (temp f (f val (first s)) (next s)))))))","problem":60,"user":"4e44358f535dc968683fc4a8"},{"problem":60,"code":"(fn reds\n  ([f l] (reds f (first l) (rest l)))\n  ([f i l]\n   (if (empty? l) (list i)\n      (cons i (lazy-seq (reds f (f i (first l)) (rest l)))))))","user":"551afdf8e4b07993ea3788cb"},{"code":"(fn reducs\n  ([f xs] (reducs f (first xs) (next xs)))\n  ([f s xs] (if (empty? xs) [s]\n    (cons s (lazy-seq (reducs f (f s (first xs)) (next xs)))))))","problem":60,"user":"506406c8e4b075d771da6f9f"},{"problem":60,"code":"(fn rdx \n  ([f xs] (rdx f (first xs) (rest xs)))\n  ([f rs xs] \n   (lazy-seq (cons rs \n                   (when (seq xs)\n                      (rdx f (f rs (first xs)) (rest xs)))))))","user":"5cdfe2aee4b0a17bb84e2b04"},{"problem":60,"code":"(fn r\n  ([f c] (r f (first c) (rest c)))\n  ([f v c] (if (empty? c)\n             [v]\n             (cons v (lazy-seq (r f (f v (first c)) (rest c)))))))","user":"551ed214e4b08d5046aa8a4d"},{"code":"(fn seq-reduce \n  ([f seqs]\n    (seq-reduce f (first seqs) (rest seqs)))\n  ([f init seqs]\n    (lazy-seq \n      (if(empty? seqs)\n        [init]\n        (cons init \n              (seq-reduce f \n                          (f init (first seqs))\n                          (rest seqs)))))))","problem":60,"user":"5273562ae4b03e8d9a4a7479"},{"problem":60,"code":"(fn r\n  ([f coll] \n   (r f (first coll) (rest coll)))\n  ([f init [x & xs]] \n   (cons init (lazy-seq (when x (r f (f init x) xs))))))","user":"54d26316e4b0e8a36923e5f2"},{"code":"(fn rd \r\n  ([fc i [f & rs]] \r\n   (cons i\r\n         (lazy-seq\r\n           (when f\r\n             (rd fc (fc i f) rs))))) \r\n  ([fc c]\r\n   (rd fc (first c) (rest c))))","problem":60,"user":"4dc986d0535d5973398f9285"},{"problem":60,"code":"(letfn [(redxns\n  ([f xs] (if-let [s (seq xs)]\n            (redxns f (first s) (rest s))\n            (f)))\n   ([f r xs] (cons r (lazy-seq (when-let [s (seq xs)] (redxns f (f r (first s)) (rest s)))))))] redxns)","user":"5a566e8fe4b05d388ecb6c51"},{"problem":60,"code":"(fn reddo\n    ([afun acoll] (reddo afun (first acoll) (rest acoll)))\n    ([afun aprev acoll]\n        (cons aprev ((fn red\n                        ;([fun coll] (cons (first coll) (lazy-seq (red fun (first coll) (rest coll)))))\n                        ([fun prev coll]\n                            (if (empty? coll)\n                                []\n                                (cons (fun prev (first coll)) (lazy-seq (red fun (fun prev (first coll)) (rest coll)))))))\n                     afun\n                     aprev\n                     acoll))))","user":"540e8d13e4b0addc1aec671e"},{"code":"(fn self\n  ([f xs]\n    (self f (first xs) (rest xs)))\n  ([f res xs]\n    (cons res \n          (lazy-seq (if (empty? xs) nil\n                      (self f (f res (first xs)) (rest xs)))))))","problem":60,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":60,"code":"(fn reductions2\n  ([f s] (reductions2 f (first s) (rest s)))\n  ([f start s]\n   (lazy-seq  \n    (if (empty? s)\n      [start]\n      (cons start (reductions2 f (f start (first s)) (rest s)))))))","user":"5d81b40ce4b0915913b1d379"},{"code":"(fn solution\n ([f s]\n  (if (empty? s) [(f)] (solution f (first s) (rest s)))\n )\n  ([f v s]\n    (if (empty? s)\n      [v]\n      (let [vn (f v (first s))\n           rn (lazy-seq (solution f vn (rest s)))]\n       (cons v rn)\n      )\n    )\n  )\n)","problem":60,"user":"52b49aebe4b0c58976d9ad2b"},{"problem":60,"code":"(fn my-reduction\n  ([f col]\n   (my-reduction f (first col) (rest col)))\n  ([f acc col]\n   (lazy-seq\n    (if (empty? col) (vector acc) (cons acc (my-reduction f (f acc (first col)) (rest col)))\n    ))))","user":"58988cbbe4b00487982d52d7"},{"problem":60,"code":"(fn reductions-2\n  ([f val coll]\n   (lazy-seq\n    (if (empty? coll) (list val)\n        (cons val\n              (reductions-2 f\n                            (f val (first coll))\n                            (rest coll))))))\n\n  ([f coll] (reductions-2 f (first coll) (rest coll))))","user":"60c8e372e4b0e0fa5f1b42ff"},{"code":"(fn\n  ([f x] ((fn red [f col r]\n            (if (empty? (rest col))\n              (cons r (vector (f r (first col))))\n              (cons r (lazy-seq (red f (rest col) (f r (first col)))))))\n          f (rest x) (first x)))\n  ([f x y] ((fn red [f col r]\n              (if (empty? (rest col))\n              (cons r (vector (f r (first col))))\n              (cons r (lazy-seq (red f (rest col) (f r (first col)))))))\n            f y x)))","problem":60,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn r\n  ([f [h & t]] (r f h t))\n  ([f z s] \n    (lazy-seq \n      (cons \n        z\n        (if (seq s)\n          (r f (f z (first s)) (rest s)))))))","problem":60,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":60,"code":"(fn reductions' [& arguments]\n  (let [collection (last arguments)\n        reduce-arguments (vec (drop-last arguments))]\n    (letfn [(reducer [batch queue]\n              (let [reduction (apply reduce\n                                     (conj reduce-arguments batch))]\n                (lazy-seq\n                  (if (empty? queue)\n                    [reduction]\n                    (cons\n                      reduction\n                      (reducer (conj batch (first queue))\n                               (rest queue)))))))]\n      (if (= 2 (count reduce-arguments))\n        (reducer [] collection)\n        (reducer [(first collection)] (rest collection))))))","user":"58247423e4b051871117bec5"},{"problem":60,"code":"(fn foo\n  ([f xs]\n    (foo f (nth xs 0) (rest xs)))\n  ([f x xs]\n    (let [ff (fn [ys]\n               (for [iy (map hash-map (range) ys)]\n                 (take (inc (first (keys iy))) ys)))]\n      (map (fn [s] (reduce f x s)) (conj (ff xs) [])))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":60,"code":"(let \n  [rsi (fn rs [f v & [l]]\n    (cond\n     (nil? l) (cons (first v) (rs f (rest v) (first v)))\n     (empty? v) '()\n     :else (let [la (apply f (vector l (first v)))] \n             (cons la (lazy-seq (rs f (rest v) la))))))]\n  (fn sr \n    ([f v] (rsi f v))\n    ([f i v] (rsi f (cons i v)))))","user":"54d4bd2be4b0a52adc2e2005"},{"problem":60,"code":"(fn foo\r\n  ([f [x & s :as all]] \r\n    (foo f x s))\r\n  ([f prev [x & s :as all]]\r\n    (lazy-seq\r\n      (cons \r\n        prev\r\n        (when (seq all)\r\n          (foo f (f prev x) s))))))","user":"606e0a42e4b069485764de19"},{"problem":60,"code":"; I cheated with this one by conditionally not going into an infinite loop...\n(fn jfunc \n  ([x y] (jfunc #(apply x (apply vector %&)) (first y) (rest y)))\n  ([x y z]\n   (let [r (reduce x (cons y (take 1 z)))]\n     (if-not (ifn? z) \n       (cons y (lazy-seq (jfunc x r (drop 1 z))))\n       (cons y (take 3 (lazy-seq (jfunc x r (drop 1 z))))))\n     \n     )))","user":"53a5c7ffe4b0ef122a8689c4"},{"problem":60,"code":"(fn reduc ([f x] (reduc f (first x) (rest x)))\n  \t\t  ([f x y] (if (empty? y)\n\t\t\t\t\t (vector x)\n                     (lazy-seq (cons x (reduc f (f x (first y)) (rest y)))))))","user":"53e9a15be4b036ad0777e4ae"},{"code":"(letfn [(reductions-helper [f init coll]                                                                                                    \r\n            (lazy-seq                                                                                                                         \r\n             (if-let [s (seq coll)]                                                                                                           \r\n               (let [x (f init (first s))]                                                                                                    \r\n                 (cons x (reductions-helper f x (rest s)))))))]                                                                               \r\n    (fn my-reductions                                                                                                                          \r\n      ([f coll]                                                                                                                               \r\n         (my-reductions f (first coll) (rest coll)))                                                                                          \r\n      ([f init coll]                                                                                                                          \r\n         (cons init (reductions-helper f init coll)))))","problem":60,"user":"4f149e0f535d64f60314643d"},{"problem":60,"code":"(fn redu\n   ([f c] (redu f (first c) (rest c)))\n   ([f a c] (cond\n              (empty? c) [a]\n              :else (lazy-seq (cons a (redu f (f a (first c)) (rest c)))))))","user":"5d764e52e4b02e6b30c93524"},{"code":"(fn reducts\n  ([f coll] (reducts f (first coll) (rest coll)))\n  ([f val coll] \n     (cons val\n           (lazy-seq\n             (when-let [s (seq coll)]\n               (reducts f (f val (first s)) (rest s)))))))","problem":60,"user":"50ed8a5fe4b06330c1f87c3d"},{"code":"(fn [f & xs]\n  ((fn rec [sq]\n     (let [a (first sq) b (second sq)]\n       (if (nil? b) (list a)\n           (let [v (f a b)\n                 sn (cons v (drop 2 sq))]\n             (lazy-seq\n              (cons a (rec sn)))))))\n   (if (= 1 (count xs)) (first xs)\n       (cons (first xs) (second xs)))))","problem":60,"user":"52d1e364e4b0d9f9285948e7"},{"code":"(fn r \n  ([f coll] (r f (first coll) (next coll))) \n  ([f init coll] \n  \t(lazy-seq\n    \t(if (empty? coll) (list init)\n      \t(cons init\n        \t    (r f\n            \t     (f init (first coll))\n                \t (rest coll)))))))","problem":60,"user":"515e8ce2e4b049add99a053d"},{"code":"(fn red\n   ([f [h & t]]\n      (red f h t))\n   ([f s [h & t]]\n      (lazy-seq\n        (if h\n          (cons s (red f (f s h) t))\n          (list s)))))","problem":60,"user":"4fc8c8d8e4b0ee37620e183b"},{"code":"(fn g\n  ([f a] (g f (f (first a)) (rest a)))\n  ([f s a] (cons s (map #(apply f (cons s (take %2 a))) a (rest (range))))))","problem":60,"user":"5054bc87e4b0b1b9d1860eb0"},{"code":"(fn red \n([f v] (red f (first v)(rest v)))\n([f n v] (cons n \n(lazy-seq (if (empty? v) nil (red f (f n (first v)) (rest v)))))))","problem":60,"user":"517945dce4b0684c1c981a43"},{"problem":60,"code":"(fn seqred3\n  ([fun seed a]\n   (if a\n     (cons seed (lazy-seq (seqred3 fun (fun seed (first a)) (next a))))\n     [seed]))\n  ([fun a]\n   (seqred3 fun (first a) (rest a))))","user":"57d0cd58e4b0bd073c20235e"},{"problem":60,"code":"(fn reds\n  ([f coll] (reds f (first coll) (rest coll)))\n  ([f acc coll]\n   (lazy-seq\n     (cons acc\n       (let [[h & t] coll\n           acc (f acc h)]\n         (if (empty? t) (list acc) (lazy-seq (reds f acc t))))))\n  )\n)","user":"54c9f165e4b045293a27f687"},{"problem":60,"code":"(fn scan\n  ([f init xs]\n   (cons init (lazy-seq\n               (if (seq xs)\n                 (scan f (f init (first xs)) (rest xs))))))\n  ([f xs]\n   (if (seq xs)\n     (scan f (first xs) (rest xs))\n     (f))))","user":"52d95491e4b09f7907dd13a4"},{"problem":60,"code":"(fn my-reduction \n   ([f coll] \n    (my-reduction f (first coll) (rest coll)))\n   ([f las coll]\n    (if (empty? coll)\n      [las]\n      (lazy-seq\n        (let [new-las (f las (first coll))]\n          (cons las (my-reduction f new-las (rest coll))))))))","user":"5473efc3e4b0c51c1f4d7285"},{"code":"(fn f ([g c]\n  (let [fc (first c)]\n \t(if (empty? (drop 2 c)) \n    \t(cons fc [(g fc (last c))])\n        (cons fc (lazy-seq (f g (cons (g fc (second c)) (drop 2 c))))))))\n  \t  ([g x0 c] (f g (cons x0 c))))","problem":60,"user":"53973e7be4b0b51d73faaee6"},{"code":"(fn fun \n           ([f v]\n             (if (empty? v)\n                   nil\n               (let [n (apply f (take 2 v))] \n               (cons (first v) (lazy-seq (fun f (cons n (drop 2 v))))))))\n           ([f i v]\n            (if (empty? v)\n              (vector i)\n            (let [n (f i (first v))]\n              (cons i (lazy-seq (fun f n (rest v))))))))","problem":60,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn reds\n  ([f [x & xs]]\n    (reds f x xs))\n  ([f init [x & xs :as coll]]\n    (if (coll? coll)\n      (lazy-seq\n        (cons init (reds f (f init x) xs)))\n      [init])))","problem":60,"user":"500933a6e4b046cdb195e074"},{"problem":60,"code":"(fn reduc \n  ([f s] (reduc f (first s) (rest s)))\n  ([f acc s]\n   (if (seq s)\n     (cons acc (lazy-seq (reduc f (f acc (first s)) (rest s))))\n     [acc])))","user":"5dd60c58e4b0948ae9d9ad7c"},{"code":"(fn myreductions\n  ([f xs]\n     (myreductions f (first xs) (rest xs)))\n  ([f init xs]\n     (lazy-seq\n      (cond (empty? xs) (list init)\n            true (cons init (myreductions f (apply f (list init (first xs))) (rest xs)))))))","problem":60,"user":"4ef6f5ea535dced4c769f250"},{"problem":60,"code":"(fn r \n  ([f coll]\n   (lazy-seq\n    (if-let [s (seq coll)]\n      (r f (first s) (rest s))\n      (list (f)))))\n  ([f init coll] (cons init\n                       (lazy-seq (when-let [s (seq coll)]\n                                   (r f (f init (first s)) (rest s))))))\n)","user":"5f419985e4b0955706451fab"},{"problem":60,"code":"(fn rr\n  ([f coll] (rr f (first coll) (rest coll)))\n  ([f init coll]\n     (if\n       (seq coll) (lazy-seq (cons init (rr f (f init (first coll)) (rest coll))))\n       [init] )))","user":"52f426fce4b05e3f0be25f1e"},{"problem":60,"code":"(fn scan\n   ([function coll]\n    (scan function (first coll) (rest coll)))\n   ([function value coll]\n    (cons value\n          (map-indexed\n           (fn [i e] (apply (partial function value) (take (inc i) coll)))\n           coll))))","user":"5b67f0fbe4b0c6492753e76d"},{"code":"(fn seq-red\n  ([f s] (seq-red f (first s) (rest s)))\n  ([f acc s]\n    (if (empty? s)\n      (vector acc)\n      (lazy-seq \n        (cons acc (seq-red f (f acc (first s)) (rest s)))))))","problem":60,"user":"4e8f4f64535d65386fec2149"},{"code":"(fn f\n  ([o [a & b]] (f o a b))\n  ([o a [b & c]] \n    (lazy-seq \n      (cons a \n        (when b \n          (f o (o a b) c))))))","problem":60,"user":"4f991ec1e4b0dcca54ed6cfb"},{"code":"(fn iter \n  ([f [a & b]] (iter f a b))\n  ([f a [b & c]] \n   (cons a (if (nil? b)\n             nil\n             (lazy-seq (iter f (f a b) c))))))","problem":60,"user":"50ae0d24e4b0a40c9cfb08ce"},{"code":"(fn [f xs & xss]\r\n   (letfn [(go [x xs] (if (nil? (seq xs))\r\n                        [x]\r\n                        (lazy-seq (cons x (go (f x (first xs)) (rest xs))))))]\r\n     (if (nil? xss)\r\n       (go (first xs) (rest xs))\r\n       (go xs (first xss)))))","problem":60,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"(fn r\n   ([f c] (r f (first c) (rest c)))\n   ([f a c]\n      (cons a\n            (lazy-seq\n             (when-let [s (seq c)]\n               (r f (f a (first s)) (rest s)))))))","problem":60,"user":"4e8510e7535db62dc21a62e7"},{"problem":60,"code":"(fn reds\n  ([f agg coll]\n   (if (seq coll)\n     (lazy-seq (cons agg (reds f (f agg (first coll)) (rest coll))))\n     [agg]))\n  ([f coll] (reds f (first coll) (rest coll))))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":60,"code":"(fn myf\n  ([f i coll]\n   (if (empty? coll)\n     (list i)\n     (cons i (lazy-seq (myf f (f i (first coll)) (rest coll))))))\n  ([f coll] (myf f (first coll) (rest coll))))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":60,"code":"(fn my-reductions\n  ([fun col] (my-reductions fun (first col) (rest col)))\n  ([fun initial [head & tail :as col]]\n   (cons initial\n         (lazy-seq\n          (if (seq col)\n            (my-reductions fun (fun initial head) tail))))))","user":"5acd235ae4b0e27600da7824"},{"problem":60,"code":"(fn seq-reduce\n  ([f coll] (seq-reduce f nil coll 1))\n  ([f val coll] (seq-reduce f val coll 0))\n  ([f val coll n] (lazy-seq\n    (cons\n      (if (nil? val)\n        (reduce f (take n coll))\n        (reduce f val (take n coll))\n      )\n      (if (nil? (nth coll n nil))\n        '()\n        (seq-reduce f val coll (inc n)))))\n      )\n)","user":"56b506d5e4b0982f16b37e2d"},{"problem":60,"code":"(fn my-reduce\n  ([f s] (my-reduce f (first s) (rest s)))\n  ([f acc s]\n   (cons acc (lazy-seq (if (empty? s) nil \n                                      (my-reduce f (f acc (first s)) (rest s))))))\n  )","user":"56791447e4b05957ce8c6183"},{"code":"(fn [f & args]\n   (when-let [coll (-> args last seq)]\n     (let [\n\t   fv (or (first (butlast args)) (f))\n           ff (fn ff [v f coll]\n\t\t(lazy-seq\n\t\t (when (seq coll)\n\t\t   (let [\n\t\t\t cv (f v (first coll))]\n\t\t     (cons cv (ff cv f (next coll)))))))]\n\t(cons fv (ff fv f (if-not (empty? (butlast args)) coll (next coll)))))))","problem":60,"user":"4ef9c8f9535dced4c769f26b"},{"code":"(fn my-reduce\n                 ([op init s]\n                   (if (empty? s)\n                     (cons init nil)\n\t\t\t\t\t (cons init\n                       (lazy-seq (my-reduce op (op init (first s)) (rest s))))))\n                   ([op s]\n                     (my-reduce op (first s) (rest s))))","problem":60,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn myreds\n  ([f s]\n    (when-let [[x & xs] (seq s)]\n      (myreds f x xs)))\n  ([f v s]\n    (if-let [[x & xs] (seq s)]\n      (lazy-seq\n        (cons v (myreds f (f v x) xs)))\n      (list v))))","problem":60,"user":"4f58fe71e4b0a7574ea7185f"},{"problem":60,"code":"(fn my-reductions\n        ([f init coll]\n         (if (empty? coll)\n           (list init)\n           (cons init (lazy-seq (my-reductions f (f init (first coll)) (rest coll))))))\n        ([f coll]\n         (my-reductions f (first coll) (rest coll))))","user":"58949f8de4b00487982d525e"},{"code":"(fn sequence-reductions\n  \t([f coll]\n\t\t\t(sequence-reductions f (first coll) (rest coll)))\n\t\t([f n coll]\n\t\t\t(if (empty? coll) (list n)\n\t\t\t\t(let [m (f n (first coll))]\n\t\t\t\t\t(lazy-seq\n\t\t\t\t\t\t(cons n (sequence-reductions f m (rest coll))))))))","problem":60,"user":"4e6a63fd535d8ccf87e9feda"},{"problem":60,"code":"(fn -reductions\n    ([func coll]\n     (-reductions func (first coll) (next coll)))\n    ([func init coll]\n     (if (empty? coll)\n       (cons init coll)\n       (let [result (func init (first coll))\n             rest-coll (next coll)]\n         (lazy-seq\n          (cons init (-reductions func result rest-coll)))))))","user":"58bbcbc8e4b0888cdc949d00"},{"code":"(fn my-reductions \n  ([f coll]\n     (my-reductions f (first coll) (rest coll)))\n  ([f acc coll]\n     (if (not (empty? coll))\n       (cons acc \n       (lazy-seq (my-reductions f \n\t\t\t\t      (f acc (first coll))\n\t\t\t\t      (rest coll))))\n       (cons acc ()))))","problem":60,"user":"4dc54eb2535d8a4b2fd74284"},{"code":"(fn my-reductions\n  ([f [x & xs]]\n    (my-reductions f x xs))\n  ([f x [y & ys :as xs]]\n    (if (empty? xs)\n        [x]\n        (lazy-seq (concat [x] (my-reductions f (f x y) ys))))))","problem":60,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn myreductions\n  ([f coll] (lazy-seq\n             (if-let [s (seq coll)] \n               (myreductions f (first s) (rest s))\n               (list (f)))))\n  ([f init coll] \n     (cons init (lazy-seq (when-let [s (seq coll)]\n                            (myreductions f (f init (first s)) (rest s)))))))","problem":60,"user":"52d809bde4b09f7907dd1384"},{"code":"(fn g\r\n    ([f [x & l]] (g f x l))\r\n    ([f x l]\r\n        (if l\r\n            (let [[y & r] l z (f x y)]\r\n                (cons x (lazy-seq (g f z r))))\r\n                [x])))","problem":60,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":60,"code":"(fn red\n ([f values]\n     (if (empty? values)\n       values\n       (red f (first values)\n            (rest values))))\n ([f initial values]\n     (lazy-seq\n      (if (empty? values)\n        (list initial)\n        (cons\n         initial\n         (red f\n              (f initial\n                 (first values))\n              (rest values)))))))","user":"4f037faf535dcb61093f6af8"},{"code":"(fn reds\n  ([f s] (reds f (first s) (next s)))\n  ([f a s]\n    (if (seq s)\n      (let [a2 (f a (first s))]\n        (lazy-seq (cons a (reds f a2 (next s)))))\n      (list a))))","problem":60,"user":"4eb2e6ca535d7eef3080734f"},{"problem":60,"code":"(fn hej\n    ([f s]\n       (let [acc (atom 0)]\n         (map (fn q [i]\n                (do\n                  (swap! acc (fn [q]\n                               (f q i)))\n                  @acc))\n              s)))\n\n    ([f init s]\n       (let [acc (atom init)]\n         (cons init\n               (map (fn q [i]\n                      (do\n                        (swap! acc (fn [q]\n                                     (f q i)))\n                        @acc))\n                    s)))\n       ))","user":"50981062e4b04e098a4c7268"},{"code":"(fn my-reductions\n  ([f coll]\n   (lazy-seq\n    (if-let [s (seq coll)]\n      (my-reductions f (first s) (rest s))\n      (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (my-reductions f (f init (first s)) (rest s)))))))","problem":60,"user":"4f2942ace4b0d6649770a01e"},{"code":"(fn ejercicio-60\n  ([f x ys]\n     (letfn [(reducciones-con-inicial [f x ys]\n               (cons x (lazy-seq (if (empty? ys)\n                                   []\n                                   (reducciones-con-inicial f (f x (first ys)) (rest ys))))))]\n       (reducciones-con-inicial f x ys)))\n  ([f ys]\n     (letfn [(reducciones-con-inicial [f x ys]\n               (cons x (lazy-seq (if (empty? ys)\n                                   []\n                                   (reducciones-con-inicial f (f x (first ys)) (rest ys))))))\n             (reducciones-sin-inicial [f [y & ys]]\n               (reducciones-con-inicial f y ys))]\n     (reducciones-sin-inicial f ys))))","problem":60,"user":"4db51ce0535d87e67b28fe06"},{"problem":60,"code":"(fn p60 \n  ([f coll]\n      (p60 f (first coll) (rest coll)))\n  ([f val coll]\n      (lazy-seq \n          (if (empty? coll) (list val)\n            (cons val \n              (p60 f (f val (first coll)) \n                   (rest coll)))))))","user":"4fc4eb1ee4b081705acca354"},{"code":"(fn r \r\n  ([f [a & b]] (r f a b))\r\n  ([f i [a & b :as l]] \r\n    (if (empty? l) \r\n      [i]\r\n      (lazy-seq\r\n        (cons i (r f (f i a) b))))))","problem":60,"user":"4e03c616535d04ed9115e796"},{"code":"(fn rds\n  ([f input] (rds f (first input) (rest input)))\n  ([f initial input]\n     ((rand-nth\n       [;; version using STM is more concise\n        #(let [result (atom initial)\n               reduces (fn [in] (swap! result f in))]\n           (cons initial (map reduces input)))\n        ;; version using an extra arg instead of mutation\n        #(->> [initial input]\n              (iterate (fn [[result [el & more :as input]]]\n                         (when (seq input) [(f result el) more])))\n              (take-while identity)\n              (map first))]))))","problem":60,"user":"51f9527fe4b09be9c177e549"},{"problem":60,"code":"(fn reds-\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reds- f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reds- f (f init (first s)) (rest s)))))))","user":"54926752e4b0b312c081ff44"},{"problem":60,"code":"(fn my-reductions\n      ([f [h & t]]\n       (my-reductions f h t))\n      \n      ([f s col]\n       (cons s\n             ((fn iter [[h & t :as col] prev]\n                (if (empty? col)\n                  '()\n                  (let [acc (f prev h)]\n                    (cons acc (lazy-seq (iter t acc)))))) col s))))","user":"50a3ad0ee4b0ceace084d493"},{"code":"(fn r\n  ([f s] (r f (first s) (rest s)))\n  ([f v s]\n     (if (empty? s)\n       (cons v nil)\n       (let [new-head (f v (first s))]\n         (lazy-seq\n          (cons v\n                (r f new-head (rest s))))))))","problem":60,"user":"532b43c3e4b09d4e7a9b5531"},{"code":"(fn f\n ([g [h & t]] (f g h t))\n ([g i [h & t]]\n  (lazy-seq \n   (cons i\n         (if h\n           (f g (g i h) t))))))","problem":60,"user":"51ad244fe4b09397d510977f"},{"code":"(fn e \n  ([f a c]\n    (cons a (lazy-seq\n      (when-let [s (seq c)]\n           (e f (f a (first c)) (rest c)))\n      )\n    ))\n  ([f c]\n    (e f (first c) (rest c))\n  )\n)","problem":60,"user":"4e6dd0f5535d5021c1a895f3"},{"problem":60,"code":"(fn r \n  ([f [x y & xs]] (cons x (lazy-seq (r f (f x y) xs))))\n  ([f v xs] (cons v (when-let [[x & xs'] xs] (lazy-seq (r f (f v x) xs'))))))","user":"53dfdf01e4b0d874e779ae46"},{"problem":60,"code":"(fn sr\n   ([f xs] (sr f (first xs) (rest xs)))\n   ([f x xs]\n      (cons x (if-not (empty? xs)\n\t              (lazy-seq (sr f (f x (first xs)) (rest xs)))))))","user":"59f043d0e4b0966464fe6a3d"},{"code":"(fn r\n    ([f [v & c]] (r f v c))\n    ([f v [h & c]]\n        (if h (lazy-seq (cons v (r f (f v h) c))) [v])))","problem":60,"user":"4db8f6c4535d1e037afb219e"},{"code":"(fn [f a & b] \n  (let [coll (if b (first b) a) \n           f (if b\n               (fn [x y] (reduce f a (take (inc x) coll)))\n               (fn [x y] (reduce f (take (inc x) coll))))]\n    (if b\n      (cons a (keep-indexed f coll)) \n      (keep-indexed f coll))))","problem":60,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":60,"code":"(fn redux\n  ([f coll]\n   (redux f (first coll) (rest coll)))\n  ([f v coll]\n     (lazy-seq\n       (cons v\n             (if (seq coll)\n               (redux f\n                      (f v (first coll))\n                      (rest coll)))))))","user":"5338387de4b0e30313ee6c91"},{"problem":60,"code":"(fn foo\n  ([f coll]\n     (lazy-seq\n      (let [s (seq coll)]\n        (foo f (first s) (rest s)))))\n  ([f init coll]\n       (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (foo f (f init (first s)) (rest s)))))))","user":"59f44189e4b0966464fe6aab"},{"problem":60,"code":"(fn z\n  ([f coll] (z f (first coll) (rest coll))) \n  ([f init coll]\n   (cons init \n      (lazy-seq\n        (when-let [s (seq coll)]  \n          (z f (f init (first coll)) (rest coll)))))))","user":"583667c7e4b089d5ab817cfb"},{"problem":60,"code":"(fn my-reduction\n   ([f x xs]\n    (if (seq xs)\n      (lazy-cat [x] (my-reduction f (f x (first xs)) (rest xs)))\n      [x]))\n   ([f xs]\n    (if (seq xs)\n      (my-reduction f (first xs) (rest xs)))))","user":"5921a080e4b09b4ee5954c77"},{"problem":60,"code":"(fn sequence-reduction\n  ([f coll]\n   (sequence-reduction f (first coll) (rest coll)))\n  ([f start coll]\n   (let [fst (first coll)\n         result (f start fst)\n         rst (rest coll)]\n     (cons start (lazy-seq (if (empty? rst)\n                             [result]\n                             (sequence-reduction f result rst)))))))","user":"52fc34cee4b047fd55837015"},{"problem":60,"code":"(fn foo\n  ([f coll] (foo f (first coll) (rest coll)))\n  ([f init [c & coll]] (cons init (lazy-seq (when c (foo f (f init c) coll))))))","user":"507eed82e4b06ce648bcdbfe"},{"problem":60,"code":"(fn r\n  ([f [x & xs]] (r f x xs))\n  ([f i [x & xs]] (cons i (if x (lazy-seq (r f (f i x) xs))))))","user":"54055aa9e4b0addc1aec6665"},{"code":"(fn my-reductions\n  ([f l] (my-reductions f (first l) (rest l)))\n  ([f acc l]\n    (if (empty? l)\n      (list acc)\n      (cons acc (lazy-seq (my-reductions f (f acc (first l)) (next l))))\n      )))","problem":60,"user":"4e89ddf9535d3e98b8023284"},{"problem":60,"code":"(fn red\n  ([f [x & ls]] (red f x ls))\n  ([f x [y & ls]]\n   (if (nil? y)\n     (lazy-seq (cons x nil))\n     (lazy-seq (cons x (red f (f x y) ls))))))","user":"55f73078e4b06e875b46cea4"},{"problem":60,"code":"(fn rdc \n  ([f v coll] \n   (lazy-seq \n    (if (empty? coll) (list v) (cons v (rdc f (f v (first coll)) (rest coll))) \n      ) \n    )\n   )  \n  ([f coll] (rdc f (first coll) (rest coll))))","user":"5a535572e4b05d388ecb6c0b"},{"code":"(fn f\n  ([g [a & b]] (f g a b))\n  ([g a b]\n     (if (seq b)\n       (cons a (lazy-seq (f g (g a (first b)) (rest b))))\n       [a])))","problem":60,"user":"4ea09fa4535d7eef308072aa"},{"problem":60,"code":"(fn redux\n  ([f coll] \n      (redux f (first coll) (rest coll)))\n  ([f val coll] \n      (cons val\n        ((fn red [val coll]\n           (lazy-seq\n             (when-not (empty? coll)\n               (let [val (f val (first coll))]\n                 (cons val (red val (rest coll)))))))\n          val coll))))","user":"58fc52cee4b0438e51c2cf95"},{"problem":60,"code":"(fn reduct\n  ([ops [in1 & inr]] \n   (reduct ops in1 inr))\n  ([ops in1 inr]\n   (if (empty? inr) \n     (list in1) \n     (cons in1 (lazy-seq (reduct ops (ops in1 (first inr)) (rest inr)))))))","user":"5a01d8f6e4b01bb0ae8afd53"},{"problem":60,"code":"(fn foo\n  ([op s]\n   (foo op (first s) (rest s)))\n  ([op acc s]\n   (if (identity (first s))\n     (cons acc (lazy-seq (foo op (op acc (first s)) (rest s))))\n     [acc])))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":60,"code":"(fn my-reductions\n  ([f se]\n   (when (seq se)\n     (let [first-res (f (first se) (second se))]\n       (cons (first se)\n             (lazy-seq (my-reductions f first-res (rest (rest se)))))))\n     )\n   ([f res se]\n    (if (seq se)\n      (let [next-res (f res (first se))]\n        (cons res\n              (lazy-seq (my-reductions f next-res (rest se)))))\n      (cons res nil))\n    ))","user":"554d386ee4b0a04f792995b8"},{"problem":60,"code":"(fn reds\n  ([f [x & xs]] (reds f x xs))\n  ([f y [x & xs]]\n   (lazy-seq\n    (cons y\n          (if (empty? xs)\n            [(f y x)]\n            (reds f (f y x) xs))))))","user":"5fe0d4d4e4b05ac5b16ea164"},{"problem":60,"code":"(fn my-reduce\n  ([f coll]\n   (my-reduce f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when (seq coll)\n            (my-reduce f (f init (first coll)) (rest coll)))))))","user":"5abc5a09e4b073f1774426e9"},{"code":"(fn rdns\n  ([f a s] (if (empty? s)\n             (list a)\n             (cons a (lazy-seq (rdns f (f a (first s)) (rest s))))))\n  ([f s]   (rdns f (first s) (rest s))))","problem":60,"user":"530bf87ee4b02e82168697d5"},{"problem":60,"code":"(fn red\n  ([f t] (red f (first t) (rest t)))\n  ([f s t]\n   (if (seq t)\n     (let [r (f s (first t))]\n       (cons s (lazy-seq (red f r (rest t))))\n       )\n     [s]\n     ) \n   )\n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":60,"code":"(fn ireduce\n           ([f coll]\n            (ireduce f (first coll) (rest coll)))\n           ([f val coll]\n            (lazy-seq\n             (cons val\n                   (when-let [s (seq coll)]\n                     (ireduce f (f val (first s)) (rest s)))))))","user":"585aad0be4b0f14aab7c8753"},{"code":"(fn my-reductions\n  ([f xs]\n   (my-reductions f (first xs) (rest xs)))\n  ([f init [x & xs' :as xs]]\n     (if (nil? x)\n       (list init)\n       (let [x' (f init x)]\n         (cons init (lazy-seq (my-reductions f x' xs')))))))","problem":60,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":60,"code":"(fn myreductions\n  ([f coll] (myreductions f (first coll) (rest coll)))\n  ([f val coll]\n   (cons val\n         (lazy-seq\n           (when-let [s (seq coll)]\n(myreductions f (f val (first s)) (rest s)))))))","user":"5ae0976be4b0837691e92c43"},{"problem":60,"code":"(fn red ([f coll]\n         (lazy-seq\n          (if-let [s (seq coll)]\n                  (red f (first s) (rest s))\n                  (list (f)))))\n        ([f init coll]\n         (cons init\n               (lazy-seq\n               (when-let [s (seq coll)]\n                         (red f (f init (first s)) (rest s)))))))","user":"4e68c465535d8ccf87e9fe8a"},{"problem":60,"code":"(fn my-reduce\n  ([f coll]\n   (my-reduce f (first coll) (next coll)))\n  ([f init [h & t :as coll]]\n   (cons init\n         (lazy-seq\n           (if (seq coll)\n             (my-reduce f (f init h) t))))))","user":"5a34de78e4b0ddc586f153d0"},{"code":"(fn my-reduct\n             ([fnn init args]\n             (if (empty? args)\n               [init]\n               (lazy-cat [init]\n                 (my-reduct fnn (fnn init (first args)) (rest args)))))\n             ([fnn args]\n               (my-reduct fnn (first args) (rest args))))","problem":60,"user":"4f465096e4b0d56e7bb92b9a"},{"code":"(fn foo\n  ([f xs] (foo f (first xs) (rest xs)))\n  ([f acc xs] (if (empty? xs)\n                [acc]\n                (lazy-seq (cons acc (foo f (f acc (first xs)) (rest xs)))))))","problem":60,"user":"5201ada5e4b0b2e020a18f14"},{"code":"; A horrible cheat; I copied reductions from core.clj.\n; I was spending too much time on this one.\n(fn [& args]\n    (letfn [(recur-with-capture\n              ([f coll]\n                 (lazy-seq\n                  (if-let [s (seq coll)]\n                    (recur-with-capture f (first s) (rest s))\n                    (list (f)))))\n              ([f init coll]\n                 (cons init\n                       (lazy-seq\n                        (when-let [s (seq coll)]\n                          (recur-with-capture f (f init (first s)) (rest s)))))))]\n      (apply recur-with-capture args)))","problem":60,"user":"4e89e939535d3e98b8023287"},{"code":"(fn rds\n   ([f s](rds f (first s) (next s)))\n   ([f x s]\n       (cons x\n       (lazy-seq\n          (if s\n            (rds f (f x (first s)) (next s)))))))","problem":60,"user":"4e860e85535db62dc21a62f1"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (lazy-seq\n     (my-reductions f (first coll) (rest coll))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (my-reductions f (f init (first s)) (rest s)))))))","user":"58fed70de4b0438e51c2cfdd"},{"code":"(fn my-reductions\n  ([f s] (my-reductions f (first s) (rest s)))\n  ([f coll [x & xs]]\n   (cons coll\n     (when x\n       (lazy-seq (my-reductions f (f coll x) xs))))))","problem":60,"user":"51460e4ce4b04ef915e37314"},{"code":"(fn q60\n  ([f init [x & xs]] \n   (cons init (lazy-seq (when x (q60 f (f init x) xs))))) \n  ([f coll] \n   (q60 f (first coll) (rest coll))))","problem":60,"user":"52c672e2e4b0c2d177d6210e"},{"code":"(fn myr\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (myr f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (myr f (f init (first s)) (rest s)))))))","problem":60,"user":"512eb723e4b0b740abc5982b"},{"problem":60,"code":"(fn my-red\n  ([f coll] (my-red f (first coll) (rest coll)))\n  ([f result coll]\n   (if (empty? coll)\n     (list result)\n     (lazy-seq (cons result (my-red f\n                                    (f result (first coll))\n                                    (rest coll)))))))","user":"58a6806ee4b01a0c0b23292f"},{"problem":60,"code":"(fn reds\n    ([f col] (reds f (first col) (rest col)))\n    ([f init icol]\n     (if (empty? icol) [ init ]\n         (let [next-val (f init (first icol))]\n           (lazy-seq (cons init (reds f next-val (rest icol))))))))","user":"57aa290de4b0b8559636fc65"},{"code":"(fn reds\n  ([f [x & xs]]\n   (reds f x xs))\n  ([f red coll]\n    (lazy-seq\n      (cons red\n        (when-let [s (seq coll)]\n          (reds f (f red (first s)) (rest s)))))))","problem":60,"user":"504c8165e4b09724c857af31"},{"problem":60,"code":"(fn g \n  ([f v c] (cons v\n             (if-let [x (first c)]\n               (lazy-seq\n                 (g f (f v x) (rest c))\n                 )\n               )\n             )\n    )\n  ([f c] (g f (first c) (rest c)))\n  )","user":"549c22f7e4b0f3d1d8e70f86"},{"problem":60,"code":"(fn R ([f a [x & r]]\n         (cons a\n               (if x\n                 (lazy-seq (R f (f a x) r))\n                 [])))\n      ([f [x & r]]\n       (R f x r)))","user":"559c13c5e4b066d22e731f61"},{"problem":60,"code":"(fn my-seq-reductions \n  ([f source]\n   (my-seq-reductions f 0 (rest  source)))\n  ([f prev source]\n   (cons prev\n         (lazy-seq \n           (if-not (empty? (rest source)) \n                     (my-seq-reductions f (f prev (first source)) (rest source)) \n                     (list (f prev (first source))))))))","user":"52eaba10e4b09f7907dd14c2"},{"problem":60,"code":"(fn my-reductions\n    ([f coll]\n     (my-reductions f (first coll) (rest coll)))\n    ([f init coll]\n     (cons init\n           (when-let [s (seq coll)]\n             (lazy-seq (my-reductions f\n                                      (f init (first s))\n                                      (next s)))))))","user":"5d883119e4b0915913b1d3a6"},{"problem":60,"code":"(fn red\n  ([f coll]\n    (cond\n      (empty? (drop 1 coll)) (lazy-seq (cons (first coll) []))\n      :else (lazy-seq (cons (first coll) (red f (lazy-seq (cons (f (first coll) (second coll)) (drop 2 coll))))))\n     ))\n  ([f a coll]\n    (red f (lazy-seq (cons a coll)))\n    )\n  )","user":"5f574662e4b0a0bc16850a90"},{"problem":60,"code":"(fn reduc\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reduc f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n       (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (reduc f (f init (first s)) (rest s)))))))","user":"52a3c66ce4b04e0c58e87c04"},{"code":"(fn [f arg & args]\n  (let [i (if (nil? args) (first arg) arg)\n        s (seq (if (nil? args) arg (apply vec args)))]\n    (cons i ((fn my-redu [le s]\n      (if (nil? s)\n          nil\n          (let [ce (f le (first s))]\n            (lazy-seq (cons ce\n                            (my-redu ce (next s)))))))\n      i (if (nil? args) (next s) s) ))))","problem":60,"user":"5063fe48e4b075d771da6f9e"},{"problem":60,"code":"(fn red\n  ([f c] (red f (first c) (rest c)))\n  ([f g c]\n   (if (seq c)\n     (lazy-seq (cons g (red f (f g (first c)) (rest c))))\n     [g])))","user":"5ed6030de4b016b56eae05db"},{"problem":60,"code":"(fn red\n   ([f [x & y]]\n    (red f x y))\n   ([f i [x & y :as d]]\n    (lazy-seq\n      (cons i\n            (if (seq d)\n                (red f (f i x) y))))))","user":"4e38f245535deb9a81d77f3e"},{"problem":60,"code":"(fn my-reductions\n  ([f col]\n   (my-reductions f (first col) (rest col)))\n  ([f acc col]\n   (cons acc\n         (lazy-seq\n          (when (seq col)\n            (my-reductions f (f acc (first col)) (rest col)))))))","user":"5cf895efe4b0b71b1d808a85"},{"problem":60,"code":"(fn reductions* \n\t([f coll]\n\t\t(if-let [s (seq coll)]\n\t\t\t(reductions* f (first s) (rest s))\n\t\t\t(list (f))))\n\t([f a coll]\n\t\t(cons a\n\t\t\t  (lazy-seq\n\t\t\t   (when-let [s (seq coll)]\n\t\t\t\t  (reductions* f (f a (first s)) (rest s)))))))","user":"55b8c339e4b01b9910ae29b9"},{"problem":60,"code":"(fn r\n  ([f [x & xs]] (r f x xs))\n  ([f x [xx & xs]]\n   (if (nil? xx)\n     [x]\n     (lazy-seq (cons x (r f (f x xx) xs))))))","user":"578fc072e4b0ebec4cfb759a"},{"code":"(fn f\n  ([g [h & t]]\n     (f g h t))\n  ([g i [h & t :as s]]\n     (lazy-seq (cons i (if s (f g (g i h) t) [])))))","problem":60,"user":"536e0930e4b0fc7073fd6e66"},{"problem":60,"code":"(fn red \n  ([f v] (if (empty? v)\n           nil\n           (red f (first v) (rest v))))\n  ([f p v] (if (empty? v)\n             (cons p nil)\n             (cons p (lazy-seq (red f (f p (first v)) (rest v)))))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":60,"code":"(fn red \n  ([f a1] (red f (first a1) (rest a1)))\n  ([f a1 a2]\n      (lazy-seq (cons a1 (when (seq a2) (red f (f a1 (first a2)) (rest a2)))))))","user":"592334c7e4b0a390037439ee"},{"code":"(let [ireduce (fn ireduce [f start xs]\n                (if (seq xs)\n                  (cons start (lazy-seq (ireduce f (f start (first xs)) (rest xs))))\n                  [start]))]\n  (fn\n    ([f xs]\n      (ireduce f (first xs) (rest xs)))\n    ([f start xs]\n      (ireduce f start xs))))","problem":60,"user":"5102ac9de4b00c483ae176fa"},{"problem":60,"code":"(fn reds\n  ([f coll]\n    (let [h (first coll)\n          t (rest coll)]\n      (reds f h t)))\n  ([f val [h & t :as coll]]\n   (let [init (if val val (f))]\n     (cons init\n           (lazy-seq\n             (when (seq coll)\n               (reds f (f init h) t)))))))","user":"557e56aae4b05c286339e0d5"},{"problem":60,"code":"(fn my-reductions\n  ([f sq] (my-reductions f (first sq) (rest sq)))\n  ([f init sq]\n    (if (empty? sq)\n      (list init) \n      (cons init (lazy-seq (my-reductions f (f init (first sq)) (rest sq))))\n    )\n  )\n)","user":"545537c1e4b0e397800069dd"},{"code":"(fn reds\n  ([f coll] (when-let [s (seq coll)] (reds f (first s) (rest s))))\n  ([f init coll] \n    (cons init (lazy-seq (when-let [s (seq coll)] (reds f (f init (first s)) (rest s)))))))","problem":60,"user":"50d0d4c8e4b00b15ecee976a"},{"problem":60,"code":"(fn sequence_reduction\n  ([funcion collection] (sequence_reduction funcion (first collection) (rest collection)))\n  ([function init collection]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq collection)]\n            (sequence_reduction function (function init (first s)) (rest s))\n            ))))\n  )","user":"574ed2f7e4b02ea11479924a"},{"problem":60,"code":"(fn [x y & z]\n     (letfn [(rns [f zero xs] \n                  (lazy-cat [zero]\n                  ((fn iter [ys prevVal]\n                     (if (empty? ys) []\n                                   (let [nextVal (f prevVal (first ys))\n                                         restys (rest ys)]\n                                   (lazy-cat [nextVal]\n                                               (iter (rest ys) nextVal)))))\n                  xs zero)))]\n     (if (nil? z)\n       (rns x (first y) (rest y))\n       (rns x y (first z)))))","user":"53c38b8ce4b00fb29b22127b"},{"problem":60,"code":"(fn r \n  ([f seed s]\n    (lazy-seq\n      (if (seq s)\n          (cons seed (r f (f seed (first s)) (rest s)))\n        (list seed) ))) \n  ([f s] \n    (lazy-seq (r f (first s) (rest s))) ))","user":"550e52dbe4b06e50f9beb165"},{"problem":60,"code":"(fn reducer\n              ([f [a & coll]]\n               (reducer f a coll))\n              ([f acc coll]\n               (lazy-seq\n                (cons acc (when-let [s (seq coll)]\n                   (let [nacc (f acc (first s))]\n                     (reducer f nacc (rest coll))))))))","user":"4f9aa2a6e4b0dcca54ed6d0c"},{"code":"(fn r\r\n\r\n   ([f [v & s]]\r\n     (r f v s))\r\n\r\n    ([f v [n & s]]\r\n      (cons v (if n \r\n                (lazy-seq (r f (f v n) s)))))\r\n)","problem":60,"user":"4f3e6244e4b0e243712b1f85"},{"code":"(fn folds\n  ([f [x & xs]] (folds f x xs))\n  ([f acc [x & xs]] \n    (lazy-seq\n      (cons acc (when x (folds f (f acc x) xs))))))","problem":60,"user":"51b793d3e4b0d906fcd71d38"},{"problem":60,"code":"(fn nr\n  ([f s] (nr f (first s) (rest s)))\n  ([f a b]\n   (cons a\n         (when-not (empty? b)\n           (lazy-seq (nr f (f a (first b)) (rest b)))))))","user":"50921f9ae4b09a7d0b586de1"},{"problem":60,"code":";reture a lazy-seq of reduce-like results, \n;when-let is use to stop the recursion when the sequence is empty \n(fn my-reduction \n  ([f se] (my-reduction f (first se) (rest se)) )\n  ([f val se] (cons val (lazy-seq \n                          (when-let [s (seq se)]\n                 (my-reduction f  (f val (first s))  (rest s) ) \n              ) \n                    ) ) \n  )\n)","user":"558bdcefe4b0277789237633"},{"code":"(fn my-reduction\n  ([f coll] (my-reduction f (first coll) (next coll)))\n  ([f val coll]\n   (if coll\n     (lazy-seq  (cons val (my-reduction f (f val (first coll)) (next coll))))\n     [val])))","problem":60,"user":"52a55adee4b0c58976d9abe7"},{"problem":60,"code":"(fn myf \n   ([f coll] (myf f (first coll) (rest coll)))\n   ([f initial coll]\n    (if (empty? coll)\n      (list initial)\n      (lazy-seq (cons initial (myf f (f initial (first coll)) (rest coll)))))\n   ))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":60,"code":"(fn reduct\n  ([f c]\n   (lazy-seq\n     (reduct f (first c) (rest c))))\n  ([f k c]\n   (letfn [(r2 [f c pv]\n             (lazy-seq\n   \t\t\t\t(if (seq c)\n     \t\t\t\t(let [h (first c)\n           \t\t\t\t  av (f pv h)]\n     \t\t\t\t  (cons av \n           \t\t\t\t\t(r2 f\n            \t\t\t\t\t(rest c)\n            \t\t\t\t\tav)))\n     \t\t\t\t'())))]\n     (lazy-seq\n       (cons k (r2 f c k))))))","user":"4dd6d7ee535d2dad7130b5cb"},{"problem":60,"code":"(fn myreductions\n  ([f coll]\n   (myreductions f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when (not-empty coll)\n            (myreductions f\n                          (f init (first coll))\n                          (rest coll)))))))\n\n;; This wouldn't work because of the order of (when (not-empty coll), (lazy-seq and (cons init.\n;; I reordered them to match the source the of reductions.\n;; The order of (cons init and (lazy-seq don't seem to matter - it is all to do with whether \n;; (when (not-empty coll) is placed after (cons init.\n\n#_(fn myreductions\n  ([f coll]\n   (myreductions f (first coll) (rest coll)))\n  ([f init coll]\n   (when (not-empty coll)\n     (lazy-seq\n      (cons init\n            (myreductions f\n                          (f init (first coll))\n                          (rest coll)))))))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn cust-reductions\n  ([f coll] (cust-reductions f (first coll) (next coll)))\n  ([f init coll]\n    (if (seq coll)\n      (cons init \n\t    (lazy-seq \n  \t      (cust-reductions \n            f\n\t        (f init (first coll))\n\t        (next coll))))\n\t  (cons init (lazy-seq '())))))","problem":60,"user":"52463059e4b09dbe66b56198"},{"problem":60,"code":"(fn redux\n  ([f s]\n    (lazy-seq\n      (if (seq s)\n        (redux f (first s) (rest s)))))\n  ([f init s]\n    (cons init\n      (lazy-seq\n        (if (seq s)\n          (redux f (f init (first s)) (rest s)))))))","user":"57b35a19e4b0fbc9809a277d"},{"code":"(fn r\n  ([f s]\n   (r f (first s) (rest s)))\n  ([f i s]\n   (if (empty? s)\n     (list i)\n     (cons i\n           (lazy-seq (r f\n                        (f i (first s))\n                        (rest s)))))))","problem":60,"user":"536973e5e4b0243289761e9e"},{"problem":60,"code":"(fn lazyR\n   ([f lst] (lazyR f (first lst) (rest lst)))\n   ([f n lst]\n    (lazy-seq \n     (cons n \n           (when-let [s (seq lst)] (lazyR f (f n (first lst)) (next lst)))) )))","user":"58d27bcae4b03c36ff7e58fe"},{"code":"(fn … \n    ([ƒ [e & s]] (… ƒ e s))\n    ([ƒ ∆ [e & s :as ¿]]\n      (cons ∆ (lazy-seq (if ¿ (… ƒ (ƒ ∆ e) s))))))","problem":60,"user":"4fdec88fe4b05e33b9224f8e"},{"code":"(fn !\n    ([f [x & xs]]\n       (! f x xs))\n    ([f init coll]\n       (cons init (lazy-seq\n                    (when-let [s (seq coll)]\n                      (! f (f init (first s)) (rest s)))))))","problem":60,"user":"4dc0ff08535d020aff1edf84"},{"code":"(fn my-reductions                                                                                                                                                                              \n  ([f coll]                                                                                                                                                                                      \n   (lazy-seq                                                                                                                                                                                     \n     (if-let [s (seq coll)]                                                                                                                                                                      \n       (my-reductions f (first coll) (rest coll)) ; call reductions with first element in collection as the init value                                                                           \n       (list (f))))) ; otherwise return the function                                                                                                                                             \n  ([f init coll]                                                                                                                                                                                 \n   (cons init   ; function call at the top works because the 3-arity version is a cons.  You're consing the result of f applied to the previous value and head of list                           \n         (lazy-seq                                                                                                                                                                               \n           (when-let [s (seq coll)]                                                                                                                                                              \n             (my-reductions f (f init (first s)) (rest s)))))))","problem":60,"user":"50fc48dde4b0d10d794c19f6"},{"problem":60,"code":"(fn red [f v & c]\n    (let [[v c] (if c [v (first c)] [(first v) (rest v)])]\n      (if (empty? c)\n        [v]\n        (cons v (lazy-seq (red f (f v (first c)) (rest c))))\n      )))","user":"53ecac57e4b0d648e757f4b3"},{"problem":60,"code":"(fn x \n  ([f s] (x f (first s) (rest s)))\n  ([f i s] (if (seq s) (lazy-seq (cons i (x f (f i (first s)) (rest s)))) (list i))))","user":"5b59d176e4b02d533a91bd86"},{"code":"(fn mreduction\n  ([f i cs]\n     (let [r (atom (or i))\n           e (for [c cs]\n               (if @r\n                 (reset! r (f @r c))\n                 (reset! r c)))]\n       (if i\n         (cons i e)\n         e)))\n  ([f cs]\n     (mreduction f nil cs)))","problem":60,"user":"51852961e4b0da5a5be3babb"},{"problem":60,"code":"(fn reductions2\n    ([f xs] (reductions2 f (first xs) (rest xs)))\n    ([f init xs]\n     (let [reducer\n           (fn reducer [xs acc]\n             (if (empty? xs)\n               (cons acc nil)\n               (cons acc (lazy-seq (reducer (rest xs) (f acc (first xs)))))))]\n       (reducer xs init))))","user":"5df70ee8e4b0a607a9a45c8a"},{"problem":60,"code":"(fn redux\n              ([f coll]\n                (lazy-seq\n                  (if-let [s (seq coll)]\n                    (redux f (first s) (rest s))\n                    (list (f)))))\n              ([f init coll]\n                (lazy-seq\n                  (cons init\n                        (when-let [s (seq coll)]\n                          (redux f (f init (first s)) (rest s)))))))","user":"5458c74de4b01be26fd74623"},{"code":"(fn rdctns\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when (seq coll)\n              (rdctns f (f init (first coll)) (rest coll))))))\n  ([f coll]\n     (rdctns f (first coll) (rest coll))))","problem":60,"user":"4f7431d2e4b044e54cd9a8f7"},{"code":"(fn meu-reduce\n  ([f coll]\n    (lazy-seq (cons (first coll) ((fn meu-reduce-it [f subtotal coll]\n                                    (when-not (empty? coll)\n                                      (let [subt (f subtotal (first coll))]\n                                        (lazy-seq (cons subt (meu-reduce-it f subt (next coll)))))))\n                                   f\n                                   (first coll)\n                                   (next coll)))))\n  ([f inicial coll]\n    (meu-reduce f (cons inicial coll))))","problem":60,"user":"52c8758be4b0c2d177d62135"},{"problem":60,"code":"(fn r\n  ([f acc xs] (cons acc\n                    (lazy-seq\n                     (if (seq xs)\n                       (r f (f acc (first xs)) (rest xs))))))\n  ([f xs] (r f (first xs) (rest xs))))","user":"583e27e2e4b089d5ab817daa"},{"problem":60,"code":"(fn red \n  ([f s] (red f (first s) (rest s)))\n  ([f i s]\n   (cons i\n  \t(lazy-seq (when (seq s) (red f (f i (first s)) (rest s)))))))","user":"59ef6cfae4b0966464fe6a32"},{"code":"(fn r\n       ([f c] (r f (first c) (rest c)))\n       ([f v c] (if (empty? c)\n                   (vector v)\n                   (lazy-seq (cons v (r f (f v (first c)) (rest c)))))))","problem":60,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":60,"code":"(fn zz ([f coll] (zz f (first coll) (rest coll))) ([f i coll] (if (empty? coll) [i] (lazy-seq (concat [i] (zz f (f i (first coll)) (rest coll)))))))","user":"5659679ae4b068f2fe63dbeb"},{"problem":60,"code":"(fn ereduce\n  ([f coll] (ereduce (partial apply f) nil coll 1))\n  ([f init coll] (ereduce (partial apply f init) init coll 0))\n  ([f init coll n]\n   (when (seq (drop (dec n) coll))\n     (cons\n       (if (= n 0)\n         init\n         (f (take n coll)))\n       (lazy-seq (ereduce f init coll (inc n)))))))","user":"54f4adc8e4b0f2f3c5226e86"},{"code":"#_ (fn rdctns\n  ([f seq] (rdctns f (first seq) (rest seq)))\n  ([f result seq]\n    (lazy-seq\n      (cons result\n        (if (empty? seq)\n          nil\n          (rdctns f (f result (first seq)) (rest seq)))))))\n\n(fn rdctns\n  ([f [first & rest]] (rdctns f first rest))\n  ([f result [first & rest]]\n    (lazy-seq\n      (cons result\n        (if first\n          (rdctns f (f result first) rest))))))","problem":60,"user":"4fe8b6afe4b07c9f6fd12c76"},{"problem":60,"code":"(fn my-reductions\n  ([func coll]\n   (my-reductions func (first coll) (rest coll)))\n  ([func initial coll]\n   (if-let [coll (seq coll)]\n     (lazy-seq\n      (cons\n       initial \n       (my-reductions func (func initial (first coll)) (rest coll))))\n     (list initial))))","user":"57a4fa50e4b0a966079561f1"},{"code":"(letfn\n  [(reducts [f acc coll]\n     (cons\n       acc\n       (when-not (empty? coll)\n         (lazy-seq\n           (reducts f (f acc (first coll)) (rest coll))))))]\n  (fn\n    ([f coll] (reducts f (first coll) (rest coll)))\n    ([f start coll] (reducts f start coll))))","problem":60,"user":"4f03641a535dcb61093f6a9b"},{"code":"(fn myreductions ([f coll] (lazy-seq (if-let [s coll] (myreductions f (first s) (rest s)) (list (f))))) ([f init coll] (cons init (lazy-seq (when-let [s (seq coll)] (myreductions f (f init (first s)) (rest s)))))))","problem":60,"user":"4f0e4ebd535d0136e6c22322"},{"code":"; cheating: copy of reductions source\n(fn red \n  ([f coll]\n    (lazy-seq\n     (if-let [s (seq coll)]\n       (red f (first s) (rest s))\n       (list (f)))))\n   ([f init coll]\n    (cons init \n          (lazy-seq \n           (when-let [s (seq coll)] \n             (red f (f init (first s)) (rest s)))))))","problem":60,"user":"509fe759e4b08df8156e9e43"},{"code":"(fn red\n  ([f coll]\n    (red f (first coll) (rest coll)))\n  ([f val coll]\n    (cons val\n      (lazy-seq\n        (when-let [s (seq coll)]\n          (red f (f val (first s)) (rest s)))))))","problem":60,"user":"4e68b46c535d8ccf87e9fe87"},{"code":"(fn my-reduce\n  ([f coll]\n     (my-reduce f (first coll) (rest coll)))\n  ([f x coll]\n     (if (seq coll)\n       (let [next-coll (rest coll)\n             next-x (f x (first coll))]\n         (cons x (lazy-seq (my-reduce f next-x next-coll))))\n       (cons x (lazy-seq '())))))","problem":60,"user":"51e780dae4b0730ab87cf353"},{"problem":60,"code":"(fn g\n  ([f v] (g f (first v) (rest v)))\n  ([f u v] (lazy-cat [u] (when (seq v) (g f (f u (first v)) (rest v))))))","user":"54b2ec84e4b09f271ff37d33"},{"problem":60,"code":"(fn lazy-reduce\n  ([f coll]\n   (lazy-reduce f (first coll) (rest coll)))\n  ([f val coll]\n   (lazy-seq  (if (empty? coll)\n                (list val)\n                (let [carry-forward-value (f val (first coll))\n                      remaining-coll (rest coll)]\n                  (cons val (lazy-reduce f carry-forward-value remaining-coll)))))))","user":"506f0968e4b09350ab4199f5"},{"problem":60,"code":"(fn red\n  ([f init [x & xs :as coll]]\n      (if (empty? coll) [init]\n          (lazy-cat [init] (red f (f init x) xs))))\n  ([f coll] (red f (first coll) (rest coll))))","user":"5566d812e4b0c656e3ff1837"},{"code":"(fn r \n  ([f o l]\n  (lazy-seq\n    (if\n      (= l ())\n      (list o)\n      (cons o (r f (f o (first l)) (rest l))))))\n  ([f l]\n    (r f (first l)(rest l))))","problem":60,"user":"50a83315e4b054305ba5a830"},{"problem":60,"code":"(fn F\n ([f C]\n   (F f (first C) (rest C)))\n ([f A C]\n   (let [a (atom A)]\n     (cons @a\n       (for [c C]\n         (swap! a f c))))))","user":"502940a9e4b061fd216be4b8"},{"code":"(fn my-reductions\n  ([f [v1 v2 & vs]] (my-reductions f v1 (cons v2 vs)))\n  ([f v1 [v2 & vs]] (lazy-cat [v1] (my-reductions f v1 v2 vs)))\n  ([f v1 v2 vs]\n   (let [acc (f v1 v2)]\n     (if (empty? vs) [acc]\n     (lazy-cat [acc] (my-reductions f acc (first vs) (rest vs)))))))","problem":60,"user":"4f2e0369e4b0d6649770a064"},{"problem":60,"code":"(fn _\n  ([f xs] (_ f (first xs) (rest xs)))\n  ([f x0 xs]\n   (lazy-seq\n     (if (empty? xs)\n       [x0]\n       (cons x0\n             (_ f (f x0 (first xs)) (rest xs)))))))","user":"4ec1b090535dfed6da9c6db5"},{"problem":60,"code":"(fn my-reduce \n  ([func cur [x & xs]]\n   \t(if x\n  \t  (lazy-seq (cons cur (my-reduce func (func cur x) xs)))\n      [cur]))\n  ([func args]\n  \t(let [[arg1 & args] args]\n    \t(my-reduce func arg1 args))))","user":"57015a1de4b08d47c97781d4"},{"problem":60,"code":"(fn reduct\n  ([fun s] (reduct fun (first s) (rest s)))\n  ([fun init s] ((fn reduct' [acc [frst & rst]]\n                   (cons acc (if (empty? rst)\n                               (list (fun acc frst))\n                               (lazy-seq (reduct' (fun acc frst) rst)))))\n                 init s)))","user":"561ca2eae4b064ca9f4b169b"},{"problem":60,"code":"(fn r ([f a s] (if (empty? s) [a] (cons a (lazy-seq (r f (f a (first s)) (rest s))))))\n      ([f s]   (r f (first s) (rest s))))","user":"5a4de614e4b05d388ecb6bb1"},{"code":"(fn r\n  ([f v c]\n   (if (empty? c)\n     (list v)\n     (lazy-seq (cons v (r f (f v (first c)) (rest c))))))\n  ([f c]\n   (r f (first c) (rest c))))","problem":60,"user":"4fbd24d2e4b081705acca2ff"},{"problem":60,"code":"(fn sequence-reduction\n  ([f coll]\n   (let [[a b & rest] coll]\n     (cons a (sequence-reduction f (f a b) rest))))\n  ([f init coll]\n   (let [[x & xs] coll]\n     (if (nil? x)\n       [init]\n       (let [result (f init x)]\n         (cons init (lazy-seq (sequence-reduction f result xs))))))))","user":"524740e7e4b05ef8e38e635d"},{"problem":60,"code":"(fn my-reduce\n  ([f l]\n   (my-reduce f (first l) (rest l)))\n  ([f v l]\n   (if (empty? l) (list v)\n       (lazy-seq (cons v (my-reduce f\n\t\t\t    (f v (first l))\n\t\t\t    (rest l)))))))","user":"59663e77e4b069c0a1a1979f"},{"problem":60,"code":"(fn reduxns\n  ([op start coll]\n   (if (empty? coll)\n     [start]\n     (lazy-seq\n      (cons start (reduxns\n                   op\n                   (op start (first coll))\n                   (rest coll))))))\n  ([op coll]\n   (reduxns op (first coll) (rest coll))))","user":"55a1d7f6e4b0acc240e31519"},{"problem":60,"code":"(fn myf\n  ([f coll] (myf f (first coll) (rest coll)))\n  ([f a coll] (if (empty? coll)\n                (list a)\n                (cons a (lazy-seq (myf f (f a (first coll)) (rest coll)))))))","user":"5960a1a6e4b066ee0a44b08e"},{"problem":60,"code":"(fn reductions'\n ([f coll] (when (not-empty coll) (reductions' f (first coll) (rest coll))))\n ([f init coll]\n  (lazy-seq\n    (if (empty? coll)\n      [init]\n      (cons init (reductions' f (f init (first coll)) (rest coll)))))))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":60,"code":"(fn fu\n  ([f l] (fu f (first l) (rest l)))\n  ([f i l]\n   (lazy-seq (cons i (if (seq l) (fu f (f i (first l)) (rest l)))))))","user":"56b6e354e4b0982f16b37e41"},{"problem":60,"code":"(fn m ([f [h & t]] (m f h t))\n                     ([f c [h & t]]\n                      (if h\n                        (concat [c] (lazy-seq (m f (f c h) t)))\n                        [c])))","user":"555c38d9e4b0b056612e2249"},{"code":"(fn r\n  ([f [c & d]] (r f c d))\n  ([f i [c & d]] (lazy-seq (cons i (when c (r f (f i c) d))))))","problem":60,"user":"4ef2d243535dced4c769f221"},{"code":"(fn my-reductions\n  ([f [x & xs]] (my-reductions f x xs))\n  ([f init coll]\n   (lazy-seq\n    (if-let [s (seq coll)]\n      (cons init (my-reductions f (f init (first s)) (rest s)))\n      [init]))))","problem":60,"user":"507b7dbee4b09034bfeeb71e"},{"problem":60,"code":"(fn r\n  ([f [a & as]] (r f a as))\n  ([f z [a & as]] (lazy-cat [z] (if (empty? as) [(f z a)] (r f (f z a) as)))))","user":"541096bde4b01498b1a719b2"},{"code":"(fn reds\n  ([f coll]\n    (lazy-seq\n      (if (empty? coll)\n        []\n        (reds f (first coll) (rest coll)))))\n  ([f init coll]\n    (cons init\n      (lazy-seq\n        (if (empty? coll)\n          []\n          (reds f (f init (first coll)) (rest coll)))))))","problem":60,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn myself\n  ([f [val & coll]] (myself f val coll))\n  ([f val [head & tail]] (cons val (when head (lazy-seq (myself f (f val head) tail))))))","problem":60,"user":"51b38769e4b026427ecf067f"},{"problem":60,"code":"(fn redux\n  ([f coll] (redux f (first coll) (rest coll)))\n  ([f acc coll]\n   (cons acc (if (empty? coll)\n              nil\n              (lazy-seq (redux f (f acc (first coll)) (rest coll)))))))","user":"56e2dbf4e4b03a7c14b85a3b"},{"problem":60,"code":"(fn myreductions\n  ([f coll]\n   (myreductions f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (myreductions f (f init (first s)) (rest s)))))))","user":"5c3796b3e4b0d62ef62d9f77"},{"problem":60,"code":"(let [reds\n                (fn\n                  [f z zs]\n                  (take-while identity\n                              (map first\n                                   (iterate\n                                     (fn [[x1 [x2 & xs :as all]]]\n                                       (if (seq all)\n                                         [(f x1 x2) xs]\n                                         nil\n                                         ))\n                                     [z zs])))\n                  ;(reduce\n                  ;  (fn [rs x] (cons (f (first rs) x) rs))\n                  ;  (list z)\n                  ;  xs)\n                  )]\n            (fn\n              ([f z xs] (reds f z xs))\n              ([f [z & xs]] (reds f z xs))\n              )\n            )","user":"53ef3adfe4b0742d9025b0c9"},{"code":"(fn rdc ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (rdc f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (rdc f (f init (first s)) (rest s)))))))","problem":60,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"(fn my-reductions\n  ([f items]\n     (my-reductions f (first items) (rest items)))\n  ([f init items]\n     (letfn [(reduction-helper [xs last-x]\n               (if (empty? xs)\n                 xs\n                 (let [next-item (f last-x (first xs))]\n                   (cons\n                    next-item\n                    (lazy-seq (reduction-helper (rest xs) next-item))))))]\n       (cons init (reduction-helper items init)))))","problem":60,"user":"511720eae4b0063b4e3e16da"},{"problem":60,"code":"(fn foo\n    ([f c] (foo f (first c) (rest c)))\n    ([f i c] (if (empty? c)\n                 (list i)\n                 (lazy-seq (cons i (foo f (f i (first c)) (rest c)))))))","user":"600ae927e4b074f607df6689"},{"problem":60,"code":"(fn myred\n  ([f coll]\n  (myred f (first coll) (rest coll)))\n  ([f arg coll]\n   (lazy-seq\n    (cons arg\n          (if (empty? coll) []\n            (myred f (f arg (first coll)) (rest coll)))))))","user":"574abbfbe4b02ea114799200"},{"problem":60,"code":"(fn my-redux\n    ([f vs] (my-redux f (first vs) (rest vs)))\n    ([f i vs]\n     (concat (list i)\n             (map-indexed\n               (fn [j _] (apply f (concat (list i) (take (inc j) vs)))) vs))))","user":"559a9a3de4b066d22e731f45"},{"code":"(fn a\n  ([f [x & xs]] (a f x xs))\n  ([f init [x & xs]]\n    (cons init\n      (lazy-seq\n        (if x (a f (f init x) xs))))))","problem":60,"user":"4fd2e5d8e4b04c3a95aa0427"},{"code":"(fn my-reductions\r\n  ([f [x & coll]] (my-reductions f x coll))\r\n  ([f res [x & coll]]\r\n     (if x\r\n       (lazy-seq (cons res (my-reductions f (f res x) coll)))\r\n       [res])))","problem":60,"user":"4dd7d040535d2dad7130b5d6"},{"problem":60,"code":"(fn internal ([f r s]\n\t(cons r (if (= s '())\n      nil\n      (lazy-seq (internal f (f r (first s)) (rest s))))))\n  ([f s] (internal f (first s) (rest s))))","user":"568a743ee4b0dcc4269f408e"},{"problem":60,"code":"(fn tr\n      ([f, sq] (tr f sq 0 []))\n      ([f, v, sq] (concat [v] (tr f sq v [])))\n      ([f, sq, v, a]\n        (lazy-seq\n          (if (empty? sq)\n            []\n            (let [c (first sq), n (f v c)]\n                 (cons\n                   n\n                   (tr f (rest sq) n a))\n                 )\n            )\n          )\n        )\n      )","user":"53bcdd41e4b0d9a98559a6c0"},{"code":"(fn f\n  ([op initial [head & tail]]\n   (cons initial\n         (lazy-seq (if head\n                     (#(f op % tail) (op initial head))))))\n  ([op [head & tail]] (f op head tail)))","problem":60,"user":"530cb5b8e4b02e82168697e0"},{"problem":60,"code":"(fn r\n  ([op c] (map-indexed (fn [i _] (reduce op (take (inc i) c))) c))\n  ([op v c] (r op (cons v c))))","user":"5a244240e4b0ff51aa4b32e9"},{"problem":60,"code":"(fn reduce-seq\n  ([f coll]\n   (reduce-seq f (first coll) (rest coll)))\n  ([f acc coll]\n   (lazy-seq (cons acc (if (empty? coll) coll\n                         (reduce-seq f (f acc (first coll)) (rest coll)))))))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":60,"code":"(fn wrap-reducer \n  ([f coll] \n   (wrap-reducer f (first coll) (rest coll)))\n  ([f vl coll]\n   ((fn make-reducer [f accum coll] \n      (cons accum \n            (lazy-seq (if (seq coll) (make-reducer f (f accum (first coll)) (rest coll)))))) \n    f vl coll)))","user":"55b527cbe4b01b9910ae2985"},{"code":"(fn reduct\n  ([f coll]\n   (lazy-seq(if-let [x (seq coll)]\n     (reduct f (first x) (next x))\n     (f))) )\n  ([f arg coll]\n   (cons arg (lazy-seq (when-let [x (seq coll)]\n               (reduct f (f arg (first x)) (rest x)))))))","problem":60,"user":"5245d29ae4b09dbe66b56174"},{"code":"(fn reduci\n     ([f s]\n      (reduci f (f (first s)) (rest s)))\n\n      ([f ff s]\n       (cons ff\n        ((fn reduci-2 [f ff s]\n         (if (empty? s) []\n          (cons (f ff (first s)) (lazy-seq (reduci-2 f (f ff (first s)) (rest s))))))\n        f ff s)))\n)","problem":60,"user":"5029fccee4b023940c84aa47"},{"code":"(fn reductions*\r\n  ([f xs] (reductions* f (first xs) (rest xs)))\r\n  ([f a xs]\r\n     (let [go (fn go [a xs]\r\n                (if-let [top (first xs)]\r\n                  (let [a2 (f a top)]\r\n                    (lazy-seq (cons a2 (go a2 (rest xs)))))\r\n                  '()))]\r\n       (lazy-seq (cons a (go a xs))))))","problem":60,"user":"4e8681b7535dae1a5effa438"},{"code":"(fn red\n  ([f initial [x & xs]] \n    (cons initial (lazy-seq (when x (red f (f initial x) xs)))))\n  ([f [x & xs]]\n    (red f x xs)))","problem":60,"user":"533f09e1e4b085b17e897d9a"},{"problem":60,"code":"(fn reductions* \n  ([f coll] \n      (reductions* f (first coll)(rest coll)))\n  ([f init coll] \n      (cons init \n        (lazy-seq\n          (if (empty? coll) \n            []\n            (reductions* f (f init (first coll))(rest coll)))))))","user":"55ecb2c0e4b0121d4835fdce"},{"code":"(fn my-reductions\n  ([f xs]\n     (when (seq xs) (my-reductions f (first xs) (rest xs))))\n  ([f init-val xs]\n     (lazy-seq\n      (cons init-val\n            (when (seq xs) (my-reductions f (f init-val (first xs)) (rest xs)))))))","problem":60,"user":"4e50b67b535dc968683fc4ed"},{"code":"apply (fn [f i & s]\n       (#(% %) (memoize #(cons i (lazy-seq (map f (% %) s))))))","problem":60,"user":"4e8f1ac6535d65386fec2146"},{"problem":60,"code":"(fn reduce-interm\n   ([f xs]\n    (reduce-interm f (first xs) (rest xs)))\n   ([f x0 xs]\n    (if-let [x1 (first xs)]\n      (cons x0 (lazy-seq (reduce-interm f (f x0 x1) (rest xs))))\n      [x0])))","user":"54f2fe9fe4b050824f58f5b8"},{"code":"(fn pb60\n  ([f coll] (pb60 f nil coll))\n  ([f init coll]\n    ((fn g [coll\n            val]\n       (lazy-seq (cons val (when-not (empty? coll)\n                             (g (rest coll)\n                                (f val (first coll)))))))\n      (if init coll (rest coll))\n      (or init (f (first coll))))))","problem":60,"user":"5028cd0fe4b01614d1633ffc"},{"problem":60,"code":"(rand-nth [\n           (fn red ([f s] (red f (first s) (rest s)))\n             ([f x xs]\n              (lazy-cat (list x)\n                        (when (not-empty xs)\n                          (red f (f x (first xs)) (rest xs))))))\n           \n           (fn red2 ([f s] (red2 f (first s) (rest s)))\n             ([f x xs]\n              (let [iter (fn [[a as]]\n                           (when (not-empty as)\n                             [(f a (first as)) (rest as)]))]\n                (->> (iterate iter [x xs])\n                     (take-while (comp not nil?))\n                     (map first)))))\n           ])","user":"5d929ceae4b0915913b1d412"},{"problem":60,"code":"(fn asd ([f r] (map-indexed (fn [a b] (reduce f (take (inc a) r))) r))\n         ([f a r] (asd f (cons a r))))","user":"5c379636e4b0d62ef62d9f76"},{"code":"#(letfn [(my-reductions\n  ([f coll]\n    (my-reductions f (first coll) (rest coll)))\n  ([f val coll]\n    (take-while (fn [x] (not (nil? x)))\n      (map first\n        (iterate\n          (fn [[v c]] (if (nil? c) nil [(f v (first c)) (next c)]))\n          [val coll])))))]\n   (apply my-reductions %&))","problem":60,"user":"4fb12b35e4b081705acca275"},{"code":"(fn my-reductions\n  ([func coll] (my-reductions func (first coll) (rest coll)))\n  ([func initial coll]\n    (map first\n      (take-while #(not (nil? %))\n        (iterate\n          (fn [pair]\n            (when-let [rest-coll (seq (second pair))]\n              [(func (first pair) (first rest-coll)) (rest rest-coll)]))\n          [initial coll])))))","problem":60,"user":"4ec2fe3f535dcc7ae8597d4f"},{"code":"(fn my-reductions\n  ([f x0 xs]\n     (cons x0 ((fn lazy [x0 xs]\n                 (lazy-seq\n                  (when-let [xss (seq xs)]\n                    (when xss\n                      (let [new-x0 (f x0 (first xss))]\n                        (cons new-x0 (lazy new-x0 (rest xss)))))))) x0 xs)))\n  ([f xs]\n     (my-reductions f (first xs) (rest xs))))","problem":60,"user":"4ff355a1e4b0678c553fc34d"},{"code":"(fn f\n\t([g [i & l]] (f g i l))\n\t([g i [a & b]] (if a (cons i (lazy-seq (f g (g i a) b))) [i])))","problem":60,"user":"528a3e14e4b0239c8a67ae72"},{"problem":60,"code":"(fn \n   ([fnc args](rest(reduce #(conj %1 (fnc (last %1) %2)) [0] (take 100 args))))\n   ([fnc init args](reduce #(conj %1 (fnc (last %1) %2)) (vector init) (take 100 args))) \n   )","user":"566a3a26e4b0a866af689699"},{"problem":60,"code":"(fn rdctns\n  ([f coll] (rdctns f (first coll) (rest coll)))\n  ([f n1 coll]\n    (if-not coll\n      [n1]\n      (cons n1 (lazy-seq (rdctns f (f n1 (first coll)) (next coll)))))))","user":"55647a31e4b0c656e3ff1808"},{"problem":60,"code":"(fn r\n  ([f [x & xs]] (r f x xs))\n  ([f i [x & xs]] (if x (lazy-seq (cons i (r f (f i x) xs))) [i])))","user":"5a9bfd57e4b0d174b936c7d0"},{"code":"(fn fx\n  ([f xs]\n    (fx f (first (seq xs)) (rest (seq xs))))\n  ([f i xs]\n    (cons i\n      (lazy-seq\n        (when-let [s (seq xs)]\n          (fx f\n            (f i (first (seq xs)))\n            (rest (seq xs))))))))","problem":60,"user":"4f40ccd9e4b0e243712b1fc0"},{"code":"(fn lazy-red\n  ([f lastval in]\n     (when-let [a (first in)]\n       (lazy-seq (cons lastval (lazy-red f lastval in nil)))))\n  ([f lastval in junk]\n     (when-let [a (first in)]\n       (let [val (f lastval (first in))]\n         (lazy-seq (cons val (lazy-red f val (rest in) nil))))))\n  ([f in]\n     (when-let [a (first in)]\n       (lazy-seq (cons (f (first in)) (lazy-red f (f (first in)) (rest in) nil))))))","problem":60,"user":"4fb86dc9e4b081705acca2d8"},{"problem":60,"code":"(fn red \n  ([f ls]\n   (if (empty? ls)\n     ls\n  (red f (first ls) (rest ls))))\n  ([f init ls]\n   (if (empty? ls)\n     (list init)\n   (cons init (lazy-seq (red f (f init (first ls)) (rest ls))))\n                         )))","user":"541ef7e2e4b01498b1a71a92"},{"code":"(fn reduct\n  ([f coll]\n     (if (empty? coll)\n       ()\n       (reduct f (f (f) (first coll)) (rest coll))))\n  ([f a coll]\n     (if (empty? coll)\n       (cons a nil)\n       (lazy-seq\n  (let [x (f a (first coll))]\n\t  (cons a (reduct f x (rest coll))))))))","problem":60,"user":"4e615cd2535d8ccf87e9fe58"},{"problem":60,"code":"(fn seduce\n  ([f c]\n   (let [s (seq c)]\n     (seduce f (first s) (rest s))))\n  ([f v c]\n   (cons v\n         (lazy-seq\n          (when-let [s (seq c)]\n            (seduce f (f v (first s)) (rest s)))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":60,"code":"(fn myreducs ([f input]\n   (myreducs f (first input) (rest input)))\n  ([f result input]\n   (if (nil? (seq input))\n     (list result)\n     (lazy-seq\n      (cons result\n            (myreducs f (f result (first input)) (rest input)))))))","user":"5976da27e4b01722bebd4ce3"},{"problem":60,"code":"(fn lol\n  ([op l] (lol op (first l) (rest l)))\n  ([op el l]\n   (if (seq l)\n     (lazy-seq (cons el (lol\n                         op\n                         (op el (first l))\n                         (rest l))))\n     [el])))","user":"52503747e4b0541d1855b828"},{"code":"(fn reds\n  ([f s] (reds f (first s) (rest s)))\n  ([f i s]\n    (if (empty? s)\n        [i]\n        (cons i (lazy-seq (reds f (f i (first s)) (rest s)))))))","problem":60,"user":"506a1985e4b01dc6af13f83e"},{"problem":60,"code":"(fn sq-reductions\n  ([f s]\n   (sq-reductions f (first s) (rest s)))\n  ([f init [fst & rst]]\n   (if (nil? fst)\n     (list init)\n     (cons init (lazy-seq (sq-reductions f (f init fst) rst))))))","user":"54684c3be4b00cfc9eacc139"},{"problem":60,"code":"(fn seq-red \n  ([f coll]\n  (seq-red f (first coll) (next coll))) \n  ([f value coll]\n      (if (empty? coll)\n          [value]\n          (cons value (lazy-seq (seq-red f (f value (first coll)) (next coll)))))))","user":"55acd080e4b03311e7b73298"},{"code":"(fn red\n  ([f l] (red f (first l) (rest l)))\n  ([f i l]\n   (if (empty? l)\n     [i]\n     (let [n (f i (first l))]\n       (cons i (lazy-seq (red f n (rest l))))))))","problem":60,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":60,"code":"(fn reds \n([f start coll]\n(cons start\n(when-let [s (seq coll)]\n(lazy-seq (reds f (f start (first s)) (rest s))))))\n([f coll]\n(when-let [s (seq coll)]\n(reds f (first s) (rest s)))))","user":"565b941ce4b068f2fe63dc07"},{"problem":60,"code":"(fn my-fn\n  ([a b]\n   (my-fn a (first b) (rest b)))\n  ([a b c]\n    (if (or (= (class c) clojure.lang.LazySeq) (= (class c) clojure.lang.ChunkedCons))\n      (map #(reduce a b (take % c)) (range))\n      (map #(reduce a b (take % c)) (range (inc (count c)))))))","user":"5596af34e4b04c1e5c31d758"},{"problem":60,"code":"(fn my-reduce\n  ([f initial v]\n   ((fn iter\n      [v result]\n      (if (empty? (rest v)) (cons result (list (f result (first v))))\n          (cons result (lazy-seq (iter (rest v) (f result (first v))))))) v initial))\n  ([f v]\n   (my-reduce f (first v) (rest v))))","user":"58f98231e4b0438e51c2cf4c"},{"code":"(fn rds\r\n  ([f coll] \r\n    (let [s (seq coll)] \r\n    (if s \r\n      (rds f (first s) (next s)))))\r\n  ([f val coll]\r\n    (let [s (seq coll)]\r\n    (if s\r\n      (lazy-seq (cons val (rds f (f val (first s)) (next s))))\r\n      (list val)))))","problem":60,"user":"4f048f67535dcb61093f6bd3"},{"problem":60,"code":"(fn f\n  ([r c]\n   (f r (first c) (rest c)))\n  \n  ([r v c]\n     (cons v\n           (lazy-seq\n            (when (seq c)\n              (f r (r v (first c)) (rest c)))))))","user":"54dd76c8e4b024c67c0cf794"},{"problem":60,"code":"(fn __ \n\t([f [head & tail]] (__ f head tail) )\n\t([f i [head & tail :as s] ] \n\t\t(if (= nil tail) [i (f i head)]\n\t\t(cons i (lazy-seq (__ f (f i head) tail ))))))","user":"533a2f7be4b0e30313ee6cb8"},{"code":"(fn my-reductions \n  \t([f coll]\n     \t(my-reductions f (first coll) (rest coll)))\n  \t([f init coll]\n     \t(cons init\n              (if (empty? coll)\n                nil\n              (lazy-seq (my-reductions f (apply f [init (first coll)]) (rest coll)))))))","problem":60,"user":"534f13b2e4b084c2834f4ac4"},{"code":"(fn x\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (x f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (x f (f init (first s)) (rest s)))))))","problem":60,"user":"4e6ebd4a535d5021c1a89610"},{"code":"(fn reds\n  ([op l] (reds op (first l) (rest l)))\n  ([op init l] \n   (cons init \n         (lazy-seq \n          (when \n            (first l)\n            (reds \n             op\n             (op init (first l)) \n             (rest l)))))))","problem":60,"user":"52eee533e4b05e3f0be25ecb"},{"problem":60,"code":"(fn reds\n  ([f coll] (reds f (first coll) (rest coll)))\n  ([f v coll]\n   (lazy-seq\n    (if (empty? coll)\n      (list v)\n      (cons v (reds f (f v (first coll)) (rest coll)))))))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn l\n  ([f [x & m]] (l f x m))\n  ([f v [x & m]] (if (empty? m) (list v (f v x)) (lazy-seq (cons v (l f (f v x) m))))))","problem":60,"user":"4f83665ee4b033992c121c1c"},{"code":"(fn !\n  ([f s]\n    (map #(reduce f %)\n      (map (fn [n x] (take (inc n) s)) (range) s)))\n  ([f v s]\n    (! f (cons v s))))","problem":60,"user":"50843a4ae4b0c98812d0788b"},{"code":"(fn reducts\n  ([f lst] (for [[i _] (map-indexed vector lst)] (reduce f (take (inc i) lst))))\n  ([f v lst] (reducts f (cons v lst))))","problem":60,"user":"510db6cde4b078ea71921145"},{"problem":60,"code":"(fn my-reduction\n  ([f xs]\n   (my-reduction f (first xs) (next xs))) ;; use next since it returns nil instead of '()\n  ([f acc xs]\n   (lazy-seq (cons acc\n                   (if xs    ;; stop sequencing\n                     (my-reduction f (f acc (first xs)) (next xs)))))))","user":"56255e2de4b00a550fc90297"},{"problem":60,"code":"(fn func ([f coll] (lazy-seq (if-let [s (seq coll)] (func f (first s) (rest s)) (list (f))))) ([f init coll] (if (not init) (list @init) (cons init (lazy-seq (when-let [s (seq coll)] (func f (f init (first s)) (rest s))))))))","user":"5addadfce4b0837691e92c13"},{"problem":60,"code":"(fn reductions1 \n  ([f init coll]\n   (if (empty? coll)\n     [init]\n     (lazy-seq (cons init\n                     (reductions1 f (f init (first coll)) (rest coll))))))\n  ([f coll]\n   (if (empty? coll)\n     '()\n     (reductions1 f (first coll) (rest coll)))))","user":"60460824e4b02d28681c77bc"},{"code":"(fn sequence-reductions [& args]\n   (letfn [(red [f vv & aa] \n             (lazy-seq\n              (let [a (if (empty? aa) (first vv) (first aa))\n                    v (if (empty? aa) (rest vv) vv)]\n                \n                (if (empty? v) [a]\n                    (cons a (red f (rest v) (f a (first v)))))\n\n                ))) \n\n             (handler\n              ([f v]\n                 (red f v))\n              ([f a v]\n                 (red f v a)))]\n           \n           (apply handler args)))","problem":60,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn seqreduce\n  ([f coll]\n      (seqreduce f (first coll) (rest coll)))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (seqreduce f (f init (first s)) (rest s)))))))","problem":60,"user":"4ea0c284535d7eef308072ad"},{"problem":60,"code":"(fn redux\n    ([f acc coll] (lazy-seq ( if (seq coll) (cons acc (redux f (f acc (first coll)) (rest coll))) [acc] )))\n    ([f coll] (redux f (first coll) (rest coll))))","user":"53dcdde4e4b0d874e779ae24"},{"problem":60,"code":"(fn lazy-reductions\n  ([f coll] (lazy-reductions f (first coll) (rest coll)))\n  ([f initial coll]\n   (if (seq coll)\n     (lazy-seq (cons initial\n                     (lazy-reductions f\n                                      (f initial (first coll))\n                                      (rest coll)\n                                      )\n                     )\n               )\n     [initial])\n   )\n  )","user":"589037b4e4b00487982d51d0"},{"problem":60,"code":"(fn r([f c](r f(first c)(rest c)))([f v c](cons v(when-not(empty? c)(lazy-seq(r f(f v(first c))(rest c)))))))","user":"5562442be4b0c656e3ff17d5"},{"problem":60,"code":"(let [fr  (fn r ([f xs] (r f (f) xs))\n      ([f init xs] (if-not (empty? xs) (let [e (f init (first xs))] (lazy-cat [e]  (r f e (rest xs))  )) []) ))] \n  \n (fn reds  \n    ([f xs] (fr f (f) xs))\n    ([f init xs] (lazy-cat [init] (fr f init xs)))) \n  \n  )","user":"54e51c7be4b024c67c0cf7f7"},{"problem":60,"code":"(fn reduce-running\n  ([op vs] \n    (if (empty? vs) []\n        (reduce-running op (first vs)(rest vs))))\n  ([op ini vs]\n    (lazy-seq\n      (if (empty? vs) [ini]\n          (cons ini\n                (reduce-running op (op ini (first vs)) (rest vs)))))))","user":"5627444fe4b00e49c7cb47cd"},{"problem":60,"code":"(fn my-reductions\n  ([f init coll]\n   (lazy-seq\n    (cons init\n          (if (seq coll)\n            (my-reductions f\n                       (f init (first coll))\n                       (rest coll))\n            (empty coll)))))\n  ([f coll]\n   (my-reductions f\n              (f (first coll))\n              (rest coll))))","user":"5db0d470e4b0f8c104ccfc9e"},{"problem":60,"code":"(fn r \n  ([f ks] (r f (first ks) (next ks)))\n  ([f i ks]\n   (cons i (lazy-seq (when-let [s (seq ks)]\n                       (r f (f i (first ks)) (rest ks)))))))","user":"51b8d3d5e4b050a1176cd69d"},{"code":"(fn r ([f coll] (if (first coll) (r f (first coll) (next coll)) (f))) ([f v coll] (lazy-seq (cons v (when coll (r f (f v (first coll)) (next coll)))))))","problem":60,"user":"4e6fa38b535d5021c1a89622"},{"code":"(fn red\n  ([f s]\n   (if (empty? s)\n     []\n     (red f (first s) (rest s))))\n  ([f initial s]\n   (if (empty? s)\n     [initial]\n     (cons initial (lazy-seq (red f\n                                  (f initial (first s))\n                                  (rest s)))))))","problem":60,"user":"531d34cfe4b08068f379edac"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f b coll]\n   (cons b \n         (lazy-seq\n          (when (seq coll)\n            (my-reductions f \n                           (f b (first coll)) \n                           (rest coll)))))))","user":"5591cc56e4b0604b3f94d582"},{"problem":60,"code":"(fn redx\n  ([f coll]\n    (redx f (first coll) (next coll)))\n  ([f x [t & b :as coll]]\n    (cons x\n      (lazy-seq\n        (if (seq coll)\n          (redx f (f x t) b))))))","user":"58a1f61ae4b02bd94d917ecd"},{"problem":60,"code":"(fn r\n  ([f s]\n   (r f (first s) (rest s)))\n  ([f acc s]\n   (lazy-seq (cons acc (when-let [n (first s)]\n                         (r f (f acc n) (rest s)))))))","user":"5d45749be4b07c84aa5ae6a2"},{"problem":60,"code":"(fn a60\n([f result]\n   (a60 f (first result) (rest result)))\n  ([f result data]\n   (if (empty? data)\n     (cons result data)\n     (lazy-seq (cons result (a60 f (f result (first data)) (rest data))))\n     )))","user":"56163cc1e4b06b1bb21829ff"},{"code":"(fn reduct ([f coll]\n            (if (seq coll)\n    \t\t (reduct f (first coll) (rest coll))\n              (list (f))))\n  ([f x0 coll]\n      (cons x0 (lazy-seq (when (seq coll) (reduct f (f x0 (first coll)) (rest coll)))))))","problem":60,"user":"51e1a1fae4b06a68e693eaf6"},{"problem":60,"code":"(fn my-reduce\n  ([func coll] (my-reduce func (first coll) (rest coll)))\n  ([func init coll]\n   (cons init (lazy-seq\n                (if (empty? coll)\n                  nil\n                  (my-reduce func (func init (first coll)) (rest coll)))\n                ))))","user":"5630fd6fe4b0bfe05bf1178b"},{"code":"(fn r\n  ([f s] (lazy-seq (r f (first s) (rest s))))\n  ([f i s](cons i (if (empty? s) '() (lazy-seq (r f (f i (first s)) (rest s))))))\n)","problem":60,"user":"4e6df3c9535d5021c1a895fa"},{"problem":60,"code":"(fn f\n  ([fun n [x & xi]] \n   (cons n (lazy-seq (when x (f fun (fun n x) xi))))) \n  ([fun1 lst] \n   (f fun1 (first lst) (rest lst))))","user":"56df63e1e4b0ca2494a095f6"},{"problem":60,"code":"(fn g\n  ([f [x & xs]]\n   (g f x xs))\n  ([f val [x & xs :as all]]\n   (if (empty? all)\n     (list val)\n     (lazy-seq\n      (cons val\n            (g f (f val x) xs))))))","user":"5dc88a38e4b02f9375f4e1db"},{"code":"(fn myreduce \n  ([f v] (myreduce f 0 (next v)))\n  ([f i v]\n    (let [x (atom i)]\n      (cons i \n        (for [y v]\n          (swap! x f y)\n        )\n      )      \n    )\n  )\n)","problem":60,"user":"5176afd2e4b085adf681d889"},{"problem":60,"code":"(fn g\n  ([f [x & xs]]\n   (when (seq? xs)\n     (lazy-seq (cons x (g f (cons (f x (first xs)) (rest xs)))))))\n  ([f x xs]\n   (cons x\n     (when-let [[y & ys] (seq xs)]\n       (lazy-seq (g f (f x y) ys))))))","user":"55bf6dbce4b01b9910ae2a12"},{"code":"(fn r\n  ([f coll]\n    (lazy-seq\n      (if-let [s (seq coll)]\n        (r f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n    (cons init\n      (lazy-seq\n        (when-let [s (seq coll)]\n          (r f (f init (first s)) (rest s)))))))","problem":60,"user":"4ef4c1ff535dced4c769f23e"},{"problem":60,"code":"(fn [f x & xs]\n         (if (nil? xs)\n           (map #(reduce f (take % x))\n                (map #(inc %2) x (range)))\n           (map #(reduce f x (take % (first xs))) \n                (map #(identity %2) (cons x (first xs)) (range)))))","user":"58c4492be4b021aa9917ed27"},{"problem":60,"code":"(fn my-reductions\n    ([f init coll]\n       (cons init\n             (lazy-seq\n              (if-let [s (seq coll)]\n                (my-reductions f (f init (first s)) (rest s))\n                (list)))))\n    ([f coll]\n       (lazy-seq\n        (if-let [s (seq coll)]\n          (my-reductions f (first s) (rest s))\n          (list (f))))))","user":"5531e445e4b09218d5f44f76"},{"problem":60,"code":"(fn g\n  ([f s]\n   (g f (first s) (rest s)))\n  ([f i s]\n   (if (empty? s)\n     [i]\n     (cons i\n           (lazy-seq (g f (f i (first s)) (rest s)))))))","user":"53523ae0e4b084c2834f4aee"},{"code":"(fn r\n  ([f coll] (r f (f (first coll)) (rest coll)))\n  ([f x coll]\n    (cons x\n      (if (not-empty coll)\n        (lazy-seq (r f (f x (first coll)) (rest coll)))))))","problem":60,"user":"4daf36c2edd6309eace4d175"},{"code":"(fn my-reductions\r\n  ([f xs]\r\n     (if (empty? xs) [(f)]\r\n         (my-reductions f (first xs) (rest xs))))\r\n  ([f init xs]\r\n     (if (empty? xs) [init]\r\n       (cons init (lazy-seq (my-reductions f (f init (first xs)) (rest xs)))))))","problem":60,"user":"4e994541535dbda64a6f6b64"},{"problem":60,"code":"(fn\n  ([f xs]\n   (map #(reduce f (take %2 xs)) xs (rest (range))))\n  ([f s xs]\n   (map (fn [_ i] (if (= i 0) s (reduce f s (take i xs)))) (conj xs 0) (range))))","user":"542a8d07e4b01498b1a71b43"},{"code":"(fn f\n  ([op coll] (f op 0 coll 0))\n  \n  ([op acc coll]\n    (if (vector? acc)\n      (f op [] (into acc coll) 0)\n      (f op 1 (vec (cons acc coll)) 0)))\n  \n  ([op acc coll dummy]\n    (if (empty? coll)\n      nil\n      (let [x (op acc (first coll))]\n        (cons x \n              (lazy-seq (f op x (rest coll) dummy))))))\n  )","problem":60,"user":"51750cd4e4b07031762f2ee5"},{"code":"(fn f\n  ([x y] (f x (first y) (rest y)))\n  ([x y z] (if z (lazy-cat [y] (f x (x y (first z)) (next z))) [y])))","problem":60,"user":"529b44afe4b02ebb4ef7509d"},{"code":"(fn my-reductions\n        ([f init s]\n          (if (empty? s)\n              [init]\n            (cons init (lazy-seq\n                        (my-reductions f\n                            (f init (first s))\n                            (rest s))))))\n        ([f s]\n         (my-reductions f (first s) (rest s))))","problem":60,"user":"52d340ebe4b099d49816f0c1"},{"problem":60,"code":"(fn it\n  ([f [x & xs]] (it f x xs))\n  ([f init xs] (if (seq xs)\n                (lazy-seq\n                 (cons init (it f (f init (first xs)) (rest xs))))\n                [init])))","user":"5504dd64e4b086ebe8a79c83"},{"code":"(fn rdxns\n  ([f [x1 & r]]\n    (rdxns f x1 r))\n  ([f x1 s]\n    (lazy-seq\n      (if (empty? s)\n        (list x1)\n        (let [x2 (first s)]\n          (cons x1 (rdxns f (f x1 x2) (rest s))))))))","problem":60,"user":"539a2901e4b0b51d73faaf0f"},{"code":"(fn red\n   ([f s] (red f (first s) (rest s)))\n   ([f a b]\n      (lazy-seq\n       (if (empty? b)\n        (list a)\n        (cons a (red f (f a (first b)) (next b)))))))","problem":60,"user":"4dd0e8f7535da60f04a96e57"},{"problem":60,"code":"(fn reds\n    ([f s] (reds f (first s) (rest s))) \n    ([f acc [x & xs :as s]]\n      (if (empty? s)\n        (list acc)\n        (lazy-seq (cons acc (reds f (f acc x) xs))))))","user":"5901158de4b0438e51c2d039"},{"problem":60,"code":"(fn my-reductions\n   ([f coll]\n    (my-reductions f (first coll) (rest coll)))\n   ([f acc coll]\n    (cons acc\n          (when (not (empty? coll))\n            (lazy-seq (my-reductions f (f acc (first coll)) (rest coll)))))))","user":"5429986ce4b01498b1a71b3b"},{"problem":60,"code":"(fn my-reduc\n  ([op [x & xs]] \n    (my-reduc op x xs))\n  ([op x [y & ys]]\n    (if (empty? ys) \n      (list x (op x y))\n      (cons x (lazy-seq (my-reduc op (op x y) ys))))))","user":"56d1afd9e4b0ea9b8538f791"},{"code":"(fn red \r\n  ([f s] (lazy-seq (if-let [c (seq s)] \r\n                     (red f (first c) (rest c)))))\r\n  ([f i s] (cons i (lazy-seq (when-let [c (seq s)] \r\n                     (red f (f i (first c)) (rest c)))))))","problem":60,"user":"4dae916eedd6309eace4d155"},{"code":"(fn red \n  ([f val coll]\n  (cons val \n        (if (empty? coll) [] (lazy-seq (red f (f val (first coll)) (rest coll))))))\n  ([f coll]\n    (red f (first coll) (rest coll))))","problem":60,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":60,"code":"(fn rd\n  ([f [x & r]] (rd f x r))\n  ([f res [x & r]]\n   (cons res\n         (lazy-seq\n           (if (not (nil? x))\n             (rd f (f res x) r))))))","user":"57fc5e42e4b0d3187e900997"},{"problem":60,"code":"(fn toy-reductions\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (toy-reductions f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (cons init (toy-reductions f (f init (first s)) (rest s)))\n       (list init)))))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n     (lazy-seq\n      (if-let [l (seq coll)]\n        (my-reductions f (f (first coll)) (rest coll)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [l (seq coll)]\n              (my-reductions f (f init (first l)) (rest l))))))\n)","user":"53d86564e4b0e771c302546b"},{"problem":60,"code":"(fn rdctns\n  ([op i s]\n   (if (empty? s)\n     [i]\n     (lazy-seq (cons i (rdctns op (op i (first s)) (rest s))))))\n  ([op s]\n   (if (empty? s)\n     nil\n     (rdctns op (first s) (rest s)))))","user":"580bd81ee4b0849f6811b711"},{"problem":60,"code":"(fn seqred\n  ([f s] (if (empty? s) [] (seqred f (first s) (rest s))))\n  ([f a s]\n   (lazy-seq (cons a (if (empty? s) nil (seqred f (f a (first s)) (rest s)))))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":60,"code":"(fn reductions'\n      ([f xs] (reductions' f (first xs) (rest xs)))\n      ([f prev xs]\n        (lazy-seq (if (empty? xs) [prev]\n                      (cons prev (reductions' f (f prev (first xs))\n                                              (rest xs)))))))","user":"5d81eba4e4b0915913b1d37b"},{"code":"(fn reductions-\n  ^{:doc \"60. Write a function which behaves like reduce, but returns each intermediate                                                                                 \n  value of the reduction.\"}\n  ([f coll]\n     (reductions- f (first coll) (rest coll)))\n  ([f init coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (cons init (reductions- f (f init (first s)) (rest s)))\n        (list init)))))","problem":60,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":60,"code":"(fn [call-func & params]\n    (let [    \n          coll1 (concat (butlast params) (last params))\n          mysub \n          (fn [myself f c0 c1]\n            (if (empty? c1)\n              [c0]\n              (cons c0 (lazy-seq (myself myself f (f c0 (first c1)) (rest c1))))\n              )\n            )] \n      ;(print coll1)\n      (mysub mysub call-func (first coll1) (rest coll1))\n      )\n    )","user":"56ef11efe4b04a395b9a045b"},{"problem":60,"code":"(fn e60\n  ([f c]\n   (e60 f (first c) (rest c)))\n  ([f i c]\n   (cons i (lazy-seq\n             (if (seq c)\n               (e60 f (f i (first c)) (rest c)))))))","user":"50385746e4b0803468ea2c6d"},{"problem":60,"code":"(fn reduce-me\n    ([f init coll val]\n     (when (seq coll)\n       (lazy-seq (cons (f val (first coll))\n                       (reduce-me f init (rest coll) (f val (first coll)))))))\n    ([f coll]\n     (reduce-me f (f) coll (f)))\n    ([f init coll]\n     (lazy-seq (cons init (reduce-me f init coll init)))))","user":"53716539e4b0fc7073fd6eb1"},{"problem":60,"code":"(fn reductions'\n  ([f xs] (reductions' f (first xs) (rest xs)))\n  ([f acc xs] (if (empty? xs)\n                [acc]\n                (lazy-seq (cons acc (reductions' f (f acc (first xs)) (rest xs)))))))","user":"5d1be50ce4b02ea6f0fb6986"},{"problem":60,"code":"(fn reduction-seq\n    ([f coll]\n      (lazy-seq\n        (if-let [s (seq coll)]\n          (reduction-seq f (first s) (rest s))\n          (list (f)))))\n\n    ([f init coll]\n      (cons init\n          (lazy-seq\n            (when-let [s (seq coll)]\n              (reduction-seq f\n                              (f init (first s))\n                              (rest s)))))))","user":"591072e0e4b0163c97b36ebc"},{"code":"(fn r\n  ([f col] (r f (first col) (rest col)))\n  ([f val col]\n    (if (empty? col) (list val)\n      (lazy-seq\n        (cons val \n          (r f  \n            (f val (first col))\n            (rest col)))))))","problem":60,"user":"4f03ac2d535dcb61093f6b4a"},{"code":"(fn my-r\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (my-r f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (my-r f (f init (first s)) (rest s)))))))","problem":60,"user":"51740b65e4b0d277d717bc67"},{"code":"(fn seq_reductions\n  ([fun s]\n    (seq_reductions fun (first s) (rest s)))\n  ([fun init s]\n    (lazy-cat\n      [init]\n      (when (not-empty s)\n        (seq_reductions fun (fun init (first s)) (rest s))))))","problem":60,"user":"4f725466e4b07046d9f4f030"},{"problem":60,"code":"(fn my-reductions\n  ([op coll] (my-reductions op (first coll) (rest coll)))\n  ([op start coll]\n   (cons start\n         (lazy-seq\n          (if (empty? coll)\n            []\n            (my-reductions op (op start (first coll)) (rest coll)))))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":60,"code":"(fn reduc\n  ([f coll]\n   (reduc f (first coll) (rest coll)))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n          (when-let [s (seq coll)]\n                          (reduc f (f init (first s)) (rest s)))))))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":60,"code":"(fn sequence-reduction\n  ([f v] (sequence-reduction f (first v) (rest v)))\n  ([f seed v]\n    (if (empty? v)\n      (list seed)\n      (lazy-seq (cons seed (sequence-reduction f (f seed (first v)) (rest v)))))))","user":"5843b95de4b089d5ab817e3f"},{"problem":60,"code":"(fn\n  ([f x]\n   (let [g (fn g\n               [a]\n               (if (zero? a)\n                 0\n                 (f a (g (dec a)))))]\n      (map g x)))\n  ([f x y]\n   (let [g (fn g\n             [a]\n             (if (= a (first y))\n               (f x a)\n               (f (g (dec a)) a)))]\n     (conj (map g y) x))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":60,"code":"(fn r\n  ([f s] (r f (first s) (next s)))\n  ([f v s] (lazy-cat [v] (if s (r f (f v (first s)) (next s))))))","user":"595eba88e4b066ee0a44b04e"},{"problem":60,"code":"(fn f\n  ([op col] (f op (first col) (rest col)))\n  ([op init [h & t]]\n    (if (nil? h)\n        [init]\n        (concat [init]\n          (lazy-seq (f op (op init h) t)))) ))","user":"548b7db8e4b0e286459a11fd"},{"code":"(fn reduction\n    ([f coll] (reduction f (first coll) (rest coll)))\n    ([f val coll]\n        (cons val (lazy-seq (when-let [s (seq coll)]\n            (reduction f (f val (first s)) (rest s)))))\n    )\n)","problem":60,"user":"4f0e995e535d0136e6c22326"},{"code":"(fn [& args] (letfn [ (reds\r\n  ([f coll]\r\n     (lazy-seq\r\n      (if-let [s (seq coll)]\r\n        (reds f (first s) (rest s))\r\n        (list (f)))))\r\n  ([f init coll]\r\n     (cons init\r\n           (lazy-seq\r\n            (when-let [s (seq coll)]\r\n              (reds f (f init (first s)) \r\n    (rest s)))))))]\r\n  (if (= 2 (count args))\r\n        (reds (first args) (second args))\r\n        (reds (first args) (second args) (last args)))))","problem":60,"user":"4daa374930acd6ed13482a68"},{"problem":60,"code":"(fn r ([op col] (cons (first col) ((fn reduce-rec [acc sq] (if (empty? sq) [] (cons (op acc (first sq)) (lazy-seq (reduce-rec (op acc (first sq)) (rest sq)))))) (first col) (rest col))))\n  ([op init col] (r op (cons init col))))","user":"594d4c57e4b07ddc2dafae87"},{"code":"(fn redy\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (redy f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (redy f (f init (first s)) (rest s)))))))","problem":60,"user":"52fb64b7e4b047fd55837009"},{"problem":60,"code":"(fn my-reduction \n  ([fx args] \n   ; implicit initializer\n   (my-reduction fx (first args) (rest args)))\n  ([fx init args] \n   ; explicit initializer\n\n   ; apply the function repeatedly to the initial value  in a loop\n   \n   ((fn step [result-so-far args]\n      (if (seq args)\n        (cons result-so-far (lazy-seq \n           (step (fx result-so-far (first args)) (rest args))  ))\n        (list result-so-far) \n      )) init args)))","user":"5722bf99e4b0c5bde472c0d6"},{"code":"(fn r\n  ([f c]\n   (lazy-seq\n     (r f (first c) (rest c))))\n  ([f i c]\n   (cons i\n         (lazy-seq\n           (when (seq c)\n             (r f (f i (first c)) (rest c)))))))","problem":60,"user":"514d8084e4b019235f6c0588"},{"problem":60,"code":"(fn reductions2 \n    ([f coll] (reductions2 f (first coll) (rest coll)))\n    ([f init coll] \n     (cons init (lazy-seq (if (empty? coll) \n                              '()\n                              (reductions2 f \n                                          (f init (first coll)) \n                                          (rest coll) ))))))","user":"53fcdd1ae4b0de5c418485dd"},{"problem":60,"code":"(fn reducts\n  ([f init [x & xs]]\n   (cons init (lazy-seq (when x (reducts f (f init x) xs)))))\n  ([f xs]\n   (reducts f (first xs) (rest xs))))","user":"56efc9fde4b04a395b9a0464"},{"problem":60,"code":"(fn x\n  ([f xs] (x f (first xs) (rest xs)))\n  ([f r xs] (lazy-seq (if (empty? xs) \n                        (vector r) \n                        (cons r \n                              (x f (f r (first xs)) (rest xs))\n                        )\n                      )\n            )\n  )\n)","user":"5dcfdf23e4b0948ae9d9ad43"},{"code":"(fn myred \n  ([f xs] \n   (myred f (first xs) (rest xs)))\n  ([f a xs]  \n   (lazy-seq \n    (if (empty? xs)\n      [a]\n      (cons a (myred f (f a (first xs)) (rest xs)))))))","problem":60,"user":"523c6451e4b07becd5be2222"},{"code":"(fn  [& args]\n  (let [fnc (first args)\n        a (if (= (count args) 3) (last args) (drop 1 (last args)))\n        c (if (= (count args) 3) (vector (second args)) [(first (last args))  ]) ]\n\n    ((fn red [fnc c a] (let [ [c1 & cr] c\n                            [a1 & ar] a\n                            x (fnc c1 a1) ]\n                       (if (not (empty? ar))\n                         (cons c1 (lazy-seq (red fnc (cons x (cons c1 cr)) ar)))\n                         (vector c1 x)))) fnc c a)\n    )\n  )","problem":60,"user":"5124619ae4b02c3f2a072ccd"},{"problem":60,"code":"(fn reds\n  ([f xs] (reds f (first xs) (rest xs)))\n\n  ([f i xs]\n    (lazy-cat [i]\n      (when (not-empty xs) \n        (reds f (f i (first xs)) (rest xs))))))","user":"574dfcb8e4b02ea11479923a"},{"code":"; cheated \n\n(fn reduce*\n  ([f col] (reduce* f (first col) (rest col)))\n\n  ([f init [c & cols]]\n    (cons init (lazy-seq (when c (reduce* f (f init c) cols))))))","problem":60,"user":"51d662fce4b0154f82ab92ef"},{"code":"(fn reductions-\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (reductions- f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (reductions- f (f init (first s)) (rest s)))))))","problem":60,"user":"50733b31e4b0e3170b5a869a"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f v coll]\n   (cond\n     (empty? coll) (cons v nil)\n     :else\n     (let [nextv (f v (first coll))]\n       (cons v (lazy-seq (my-reductions f nextv (rest coll))))))))","user":"504e71cbe4b0f6ff3350c4b3"},{"problem":60,"code":"(fn seq-redux\n  ([f coll] (seq-redux f (first coll) (rest coll)))\n  ([f init coll]\n    (if (empty? coll)\n      (cons init nil)\n      (cons init (lazy-seq (seq-redux f (f init (first coll)) (rest coll)))))))","user":"567c2322e4b05957ce8c61af"},{"problem":60,"code":"(fn __\n  ([f xs] (__ f (first xs) (rest xs)))\n  ([f init xs]\n   (if-not (empty? xs)\n     (lazy-seq (cons init (__ f (f init (first xs)) (rest xs))))\n     (lazy-seq [init]))))","user":"55c4cda5e4b0e31453f649a5"},{"problem":60,"code":"(fn rdc\n  ([f c] (rdc f (first c) (rest c)))\n  ([f acc c]\n   (if (seq c)\n     (lazy-seq (cons acc (rdc f (f acc (first c)) (rest c))))\n     (list acc)\n   \t )))","user":"55c4e30be4b0e31453f649a6"},{"problem":60,"code":"(fn my-reductions-lazy-seq\n  ([f coll]\n   (my-reductions-lazy-seq f (first coll) (rest coll)))\n  ([f start coll]\n   (if (seq coll)\n     (let [[h & r] coll]\n       (cons start (lazy-seq (my-reductions-lazy-seq f (f start h) r))))\n     (cons start (lazy-seq '()))\n     )))","user":"5d247902e4b02ea6f0fb6a24"},{"problem":60,"code":"(fn interreduce\n  ([f coll] (interreduce f (first coll) (next coll)))\n  ([f initial coll]\n   (if coll\n     (cons initial\n           (lazy-seq \n            (interreduce f (f initial (first coll)) (next coll))))\n     [initial])))","user":"51d55598e4b01da06753aa8e"},{"code":"(fn reductns\r\n  ([f s] (reductns f (first s) (rest s)))\r\n  ([f x s]\r\n   (lazy-seq\r\n     (if (empty? s)\r\n       (conj (empty s) x)\r\n       (cons x\r\n         (let [val (f x (first s))]\r\n           (reductns f val (rest s))))))))","problem":60,"user":"500159b3e4b0678c553fc419"},{"problem":60,"code":"(fn\n  ([f coll]\n   (let [create-seq\n         (fn create-seq [n f coll]\n           (lazy-seq (cons n\n                           (if (empty? coll)\n                             nil\n                             (create-seq\n                               (f n (first coll))\n                               f\n                               (rest coll))))))]\n     (create-seq (first coll) f (rest coll))))\n  ([f init coll]\n   (let [create-seq\n         (fn create-seq [n f coll]\n           (lazy-seq (cons n\n                           (if (empty? coll)\n                             nil\n                             (create-seq\n                               (f n (first coll))\n                               f\n                               (rest coll))))))]\n     (create-seq init f coll))))","user":"518279abe4b0353c468deb65"},{"code":"(fn r\n  ([f s] (r f (f (first s)) (rest s)))\n  ([f v s]\n    (if (empty? s) (list v)\n      (lazy-seq (cons v (r f (f v (first s)) (rest s)))))))","problem":60,"user":"4f725201e4b07046d9f4f02f"},{"problem":60,"code":"(fn d\n  ([f a] (d f 0 (next a)))\n  ([f a b]\n   (if (empty? b)\n     [a]\n     (cons a (lazy-seq (d f (f a (first b)) (rest b))))\n     )))","user":"53d5a63be4b0e771c3025449"},{"problem":60,"code":"(fn fz\n  ([f init c]\n   (let [lazy (fn lazy [result coll]\n                (if-not (empty? coll)\n                  (let [r (f result (first coll))]\n                    (lazy-seq (cons result (lazy r (rest coll)))))\n                  (list result)))]\n     (lazy init c)))\n   ([f c]\n    (fz f (first c) (rest c))))","user":"5cbb0436e4b026601754b9cc"},{"problem":60,"code":"(fn reductions'\n  ([f [head & tail]] (reductions' f head tail))\n  ([f val coll]\n   (letfn [(generate [f val coll]\n             (when-let [[head & tail] (seq coll)]\n               (lazy-seq\n                (let [new-val (f val head)]\n                  (cons new-val (generate f new-val tail))))))]\n     (cons val (generate f val coll)))))","user":"5764457ae4b0994c1922fbf3"},{"code":"; based on cgrand's amazingly terse solution\n; cgrand's is better because it is faster and uses less memory.\n; This is beacuse his use of the y-combinator allows him to recurse with a memoized version of the function.\napply (fn r [f i & s]\n         (cons i (lazy-seq (map f (apply r f i s) s))))","problem":60,"user":"4ebaf790535dfed6da9c6d6e"},{"problem":60,"code":"(fn scan\n  ([f [x & xs]] (scan f x xs))\n  ([f acc [x & xs]]\n    (lazy-seq (if x\n      (cons acc (scan f (f acc x) xs)) [acc]))))","user":"57915ba4e4b0ebec4cfb75ba"},{"problem":60,"code":"(fn rdctns\n  ([f xs]\n   (lazy-seq\n     (when-let [s (seq xs)]\n       (rdctns f (first s) (next s)))))\n  ([f v xs]\n   (cons v\n         (lazy-seq\n           (when-let [s (seq xs)]\n             (rdctns f (f v (first s)) (rest s)))))))","user":"553abb28e4b09218d5f44ffb"},{"code":"(fn scanl\n  ( [f s xs]\n    (if (empty? xs)\n      (list s)\n      (cons s (lazy-seq (scanl f (f s (first xs)) (rest xs))))))\n  ( [f xs] \n    (scanl f \n          (first xs) \n          (rest xs))))","problem":60,"user":"5268eb68e4b03e8d9a4a71c6"},{"problem":60,"code":"(fn reduce- ([f coll] (reduce- f (first coll) (next coll))) ([f init [h & t :as coll]] (cons init (lazy-seq (if (seq coll) (reduce- f (f init h) t))))))","user":"5519c157e4b00ace28fe6e32"},{"problem":60,"code":"(fn red\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (red f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     ;(if (instance? clojure.lang.Reduced init)\n       ;(list @init)\n       (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (red f (f init (first s)) (rest s)))))\n     \n   ;)\n   )\n)","user":"59c243bae4b0a024fb6ae4aa"},{"code":"(fn red \n  ([f [h & t]] (red f h t))\n  ([f v [h & t]] \n   (cons v (if (not (nil? h)) \n             (lazy-seq (red f (f v h) t))))))","problem":60,"user":"50e7dd5de4b077ad597af36b"},{"problem":60,"code":"(fn p\n  [f a & b]\n  (if (seq? a)\n    (lazy-seq (cons (first a) (p f (f (first a) (second a)) (drop 2 a))))\n    (if (empty? (first b))\n      (list a)\n      (lazy-seq (cons a (p f (f a (first (first b))) (rest (first b))))))))","user":"56df632ce4b0ca2494a095f2"},{"code":"(fn myred  \n  ([op dat]\n    (myred op (first dat) (rest dat)))\n  ([op val dat]\n  (if-let [s (seq dat)] \n  (cons val (lazy-seq(myred op (op val (first s)) (rest s))))\n  (cons val []))))","problem":60,"user":"52bbd09ee4b07a9af57922ee"},{"code":"(fn my-reductions \n  ([f val coll]\n\t\t(if (empty? coll)\n\t\t\t(list val)\n\t\t\t(let [x (f val (first coll))]\n\t\t\t\t(cons val (lazy-seq (my-reductions f x (rest coll)))))))\n\t([f coll] (my-reductions f (first coll) (rest coll))))","problem":60,"user":"4fb57e06e4b081705acca2bf"},{"problem":60,"code":"(fn my-reductions\n  ([f se]\n   (my-reductions f (first se) (rest se))) ;; if no init specified, call the same function\n  ;; but with the init parameter\n   ([f first-arg se]\n    (letfn [(reduct [f init remaining-se]\n              (lazy-seq (when (not-empty remaining-se)\n                          (let [res (f init (first remaining-se))]\n                            (cons res (reduct f res (rest remaining-se)))))))] ;; lazy recipe\n      ;; recursive call with the result being the new init\n      (lazy-seq (cons first-arg (reduct f first-arg se))))))","user":"55a9e0fee4b0988bba2ad945"},{"code":"(fn my-reduction\n  ([f xs]\n   \t(if (empty? xs)\n      (lazy-seq (cons (f) nil))\n      (my-reduction f (first xs) (rest xs)))) \n  ([f x0 xs]\n   (lazy-seq\n    (cons x0\n          (if (empty? xs) nil\n          \t(my-reduction f (f x0 (first xs)) (rest xs)))))))","problem":60,"user":"53800d99e4b06839e8705ebd"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (let [init (f (first coll))]\n     (my-reductions f init (rest coll))))\n  ([f init coll]\n   (letfn [(step [acc c]\n             (lazy-seq\n               (when-let [s (seq c)]\n                 (let [new-acc (f acc (first s))]\n                   (cons new-acc (step new-acc (rest s)))))))]\n\n     (cons init (step init coll))\n     )))","user":"5b13ba71e4b0cc2b61a3be53"},{"problem":60,"code":"(fn myreductions\n  ([f coll] (myreductions f (first coll) (rest coll)))\n  ([f init coll] (lazy-seq (cons init\n                                 (when (seq coll)\n                                   (let [ret (f init (first coll))]\n                                     (myreductions f ret (rest coll))))))))\n\n;; An alternative using iterate\n;(fn myreductions\n;  ([f coll] (myreductions f (first coll) (rest coll)))\n;  ([f init coll] (take-while (complement #{::stop})\n;                             (map :init (iterate\n;                                          (fn [{:keys [init coll]}]\n;                                            (if (seq coll)\n;                                              {:init (f init (first coll)) :coll (rest coll)}\n;                                              {:init ::stop}))\n;                                          {:init init :coll coll})))))","user":"56dc3bdfe4b0ea9b8538f819"},{"code":"(fn  myred \n  ([ f val coll] (lazy-seq \n                     (cons val \n                       (if (empty? coll)\n                         coll\n                         (myred f \n                                (f val (first coll)) \n                                (rest coll))))))\n  ([ f coll ]   (myred f (first coll) (rest coll))))","problem":60,"user":"5018ed15e4b011a2e0bf6412"},{"code":"(fn ([f col]\n      (let [flazy (fn flazyInternal\n                    ([a_col result]\n                       (lazy-seq\n                        (if (seq a_col)\n                          (let [r (f (last result) (first a_col))]\n                            (cons r (flazyInternal (rest a_col) (conj result r))))\n                          nil))))]\n        (flazy col [(first col)])))\n     ([f init col]\n        (let [flazy (fn flazyInternal\n                      ([a_col result]\n                         (lazy-seq\n                          (if (seq a_col)\n                            (let [r (f (last result) (first a_col))]\n                              (cons r (flazyInternal (rest a_col) (conj result r))))\n                            nil))))]\n          (cons init (flazy col [init]))))   \n   )","problem":60,"user":"5016ac54e4b052339a490e7b"},{"problem":60,"code":"(fn r\n  ([f [x & coll]]\n   (r f x coll))\n  ([f val coll]\n   (lazy-seq\n    (cons val (when-let [[x & coll] (seq coll)]\n                (r f (f val x) coll))))))","user":"54ddb556e4b024c67c0cf798"},{"problem":60,"code":"(fn my-reductions\n  ([f [fst & more]]\n   (my-reductions f (f fst) more))\n  ([f acc coll]\n   (map #(reduce f acc (take %2 coll)) (cons :ignored coll) (range))))","user":"5ca14eb1e4b048ec896c5b7d"},{"code":"(fn d ([f [s & t]] (d f s t)) ([f z s] (lazy-seq (cons z (when-let [[h & t] (seq s)] (let [y (f z h)] (d f y t)))))))","problem":60,"user":"4e7e55ab535db169f9c79711"},{"problem":60,"code":"(fn _\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (_ f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [s (seq coll)]\n             (_ f (f init (first s)) (rest s)))))))","user":"5e41b679e4b01d43a70e8e58"},{"code":"(fn redus \n  ([f s] (redus f (first s) (rest s)))\n  ([f i s]\n    (if (empty? s) [i]\n      (lazy-seq (cons i (redus f (f i (first s)) (rest s)))))))","problem":60,"user":"4fcf642ee4b03432b189f410"},{"problem":60,"code":"(fn my-reductions\n  ([f coll] (my-reductions f (first coll) (rest coll)))\n  ([f acc coll] (if (empty? coll)\n                  [acc]\n                  (cons acc (lazy-seq (my-reductions\n                                     f\n                                     (f acc (first coll))\n                                     (rest coll)))))))","user":"587ee260e4b052da650a6353"},{"problem":60,"code":"(fn\n  ([f val1 & val2]\n   (letfn [(my-reductions-impl\n             [value coll]\n             (lazy-seq\n              (if (empty? coll)\n                (cons value ())\n                (cons value\n                      (my-reductions-impl\n                       (f value (first coll))\n                       (rest coll))))))]\n     (if (empty? val2)\n       (lazy-seq (my-reductions-impl (first val1)\n                                     (rest val1)))\n       (lazy-seq (apply my-reductions-impl val1 val2))))))","user":"60b1add0e4b0e0fa5f1b4227"},{"problem":60,"code":"(fn reduct\n  ([f s] (reduct f (first s) (rest s)))\n  ([f a s]\n   (lazy-seq\n    (if (empty? s) (list a)\n      (let [next-a (f a (first s))]\n        (cons a (reduct f next-a (rest s))))))))","user":"5379306fe4b06839e8705e50"},{"code":"(fn f \n    ([g [y & z]] (f g y z))\n    ([g x [y & z]] (lazy-seq (cons x (when y (f g (g x y) z)))))\n    )","problem":60,"user":"4e71da4d535d5021c1a89653"},{"problem":60,"code":"(fn red \n  ([f coll]\n    (map #(reduce f %) \n         (map-indexed (fn [idx itm] \n                        (take (inc idx) coll)) \n                      coll)\n  ))\n  ([f v coll]\n   (conj \n    (map #(reduce f v %)\n         (map-indexed (fn [idx itm] \n                        (take (inc idx) coll))\n                      coll)\n    )\n    v)))","user":"5143824ae4b0b4fb4ace5f36"},{"problem":60,"code":"(fn myreductions \n  ([f [x0 & xs]]               (myreductions f x0 xs))\n  ([f s [x1 & xrest :as xs]]   (lazy-seq\n                                 (cons s \n                                   (if (empty? xs) \n                                       ()\n                                       (myreductions f (f s x1) xrest) )))))","user":"55cdc576e4b0e31453f64a1f"},{"code":"(fn rs ([f coll]\n          (if-let [s (seq coll)]\n            (rs f (first s) (rest s))\n            (list (f))))\n         ([f init coll]\n          (cons init \n                (lazy-seq \n                  (when-let [s (seq coll)]\n                     (rs f (f init (first s)) (rest s)))))))","problem":60,"user":"4ffa8affe4b0678c553fc3bd"},{"problem":60,"code":"(fn my-reduce\n  ([f coll] (my-reduce f (first coll) (next coll)))\n  ([f fst coll]   \n   (if (nil? coll)\n     [fst]\n     (cons fst \n        (lazy-seq \n          (my-reduce f\n                     (f fst (first coll))\n                     (next coll)))))))","user":"52860baae4b0239c8a67ae09"},{"code":"(fn rs\n    ([f s]\n     (rs f (first s) (rest s)))\n    ([f x s]\n     (lazy-seq\n       (cons x (if (empty? s)\n                 ()\n                 (rs f (f x (first s)) (rest s)))))))","problem":60,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n    (my-reductions f (first coll) (rest coll)))\n  ([f acc coll]\n    (lazy-seq\n      (cons\n        acc\n        (if (empty? coll)\n          nil \n          (my-reductions f (f acc (first coll)) (rest coll)))))))","user":"5574c172e4b05c286339e059"},{"code":"(fn r\n   ([f c] (r f (first c) (rest c)))\n   ([f a c] (cons a (lazy-seq (if (seq c)(r f (f a (first c)) (rest c))))))\n   )","problem":60,"user":"4e778d36535d324fb2983d71"},{"code":"(fn rr\n  ([f a s] (lazy-seq\n    (if (seq s)\n      (cons a (rr f (f a (first s)) (rest s)))\n      (cons a nil))))\n  ([f s] (rr f (first s) (rest s))))","problem":60,"user":"4fc4eadee4b081705acca353"},{"code":"(fn reductions*\n    ([f xs] (reductions* f (first xs) (rest xs)))\n    ([f init [h :as xs]]\n     (cons init (lazy-seq\n                  (if (seq xs)\n                    (reductions* f (f init h) (rest xs)))))))","problem":60,"user":"5370ef22e4b0fc7073fd6ea0"},{"problem":60,"code":"(fn my-reductions\n  ([f [x & xs]]\n   (my-reductions f x xs))\n  ([f value [x & xs]]\n   (if-not x\n     [value]\n     (let [new-value (f value x)]\n       (lazy-seq (cons value (my-reductions f new-value xs)))))))","user":"55f2e47de4b06e875b46ce4d"},{"code":"(fn reduxes\n  ([f aseq]\n    (reduxes f (first aseq) (rest aseq)))\n\n  ([f accum aseq]\n    (cons accum\n      (lazy-seq\n        (when-let [[elem & elems] aseq]\n          (reduxes f (f accum elem) elems)))))\n)","problem":60,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":60,"code":"(fn f\n    ([g [h & r]] (f g h r))\n    ([g i [h & r]]\n     (cons i (if h (lazy-seq (f g (g i h) r))))))","user":"5552b617e4b0deb715856df8"},{"problem":60,"code":"(fn __ [ f0 i & args ]\n  (letfn [(__1 ([f x]\n                   (__1 f (first x) (rest x)))\n               ([f i x]\n                   (if (empty? x) nil\n                     (let [r (f i (first x))]\n                          (lazy-seq\n                           (cons r (__1 f r (rest x))))))))]\n      (if (empty? args)\n        (cons (first i) (__1 f0 i))\n          (cons i (__1 f0 i (first args))))))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":60,"code":"(fn rductions\n  ([f coll]\n   (rductions f (first coll) (rest coll)))\n  ([f acc coll]\n   (if (empty? coll)\n     (cons acc [])\n     (lazy-seq\n       (cons acc\n             (rductions f (f acc (first coll)) (rest coll))))\n     )))","user":"5727031ee4b0c5bde472c12f"},{"code":"(fn go \r\n  ([f q [x & xs]]\r\n    (cons q \r\n      (when x\r\n        (lazy-seq (go f (f q x) xs)))))\r\n  ([f [x & xs]] \r\n    (go f x xs)))","problem":60,"user":"509c03f3e4b085ae113522a8"},{"code":"(fn reduc\n  ([f coll]\n    (lazy-seq\n      (reduc f (f (first coll)) (next coll))))\n  ([f init coll]\n    (cons init \n      (lazy-seq\n        (when coll\n          (reduc f (f init (first coll)) (next coll)))))))","problem":60,"user":"4e8e8c24535d65386fec2143"},{"problem":60,"code":"(fn rd\n  ([f c]\n   (rd f (first c) (rest c)))\n  ([f x c]\n   (cons x\n         (lazy-seq\n          (when-let [s (seq c)]\n            (rd f (f x (first s)) (rest s)))))))","user":"5fd10010e4b07e53c2f3f02a"},{"code":"(fn myred\n    ([f s]\n        (myred f (first s) (rest s)))\n    ([f i s]\n        (lazy-seq\n            (cons i (if (first s)\n                        (myred f (f i (first s)) (rest s)))))))","problem":60,"user":"4f128865535d64f603146428"},{"code":"(fn solution\n  ([f s]\n     (solution f (first s) (rest s)))\n  ([f acc s]\n     (if (empty? s)\n       (cons acc (lazy-seq '()))\n       (cons acc (lazy-seq (solution f (f acc (first s)) (rest s))))\n       )\n     ))","problem":60,"user":"5226f8e9e4b04e78ff2e199a"},{"code":"(fn r \n    ([f coll]\n     (lazy-seq\n           (if-let [s (seq coll)]\n             (r f (first s) (rest s)) \n             (list (f)))))\n    ([f init coll]\n     (cons init\n           (lazy-seq\n                 (when-let [s (seq coll)]\n                   (r f (f init (first s)) (rest s)))))))","problem":60,"user":"4f038567535dcb61093f6b0c"},{"code":"(fn to-red\r\n  ([fun args] (to-red fun (first args) (rest args)))\r\n  ([fun first-arg args]\r\n     (if (empty? args)\r\n       [first-arg] \r\n       (cons first-arg (lazy-seq (to-red fun (fun first-arg (first args)) (rest args)))))\r\n     ))","problem":60,"user":"4df3df8a535d08e6dec9fe2d"},{"code":"(fn red2\n\t([f coll]\n\t(letfn [(helper [fst r]\n\t\t\t(if-let [sec (second r)]\n\t\t\t\t(let [nx (f fst sec)]\n\t\t\t\t\t(cons nx (lazy-seq (helper nx (rest r)))))))]\n\t\t(cons (first coll) (helper (first coll) coll))\n\t\t))\n\t([f initial coll]\n\t\t(red2 f (cons initial coll))))","problem":60,"user":"51ba4482e4b0fe3ecfb4642b"},{"code":"(fn my-rdns \n  ([f [h & t]] (my-rdns f h t))\n  ([f v [h & t :as c]]\n     (lazy-seq\n       (cons v\n             (when (seq c)\n               (my-rdns f (f v h) t))))))","problem":60,"user":"4db2cd84535df7e46ed9b6c6"},{"problem":60,"code":"(fn red\n  ([f coll]\n     (lazy-seq\n      (if-let [s (seq coll)]\n        (red f (first s) (rest s))\n        (list (f)))))\n  ([f init coll]\n     (cons init\n             (lazy-seq\n              (when-let [s (seq coll)]\n                (red f (f init (first s)) (rest s)))))))","user":"5541fa50e4b0a04f79299515"},{"problem":60,"code":"(fn sequence-reductions\n  ([f coll] (sequence-reductions f (first coll) (rest coll) ))\n  ([f val coll]\n     (if (empty? coll)\n       [val]\n       (cons val (lazy-seq (sequence-reductions f (f val (first coll)) (rest coll)))))))","user":"5360f043e4b0243289761e3c"},{"code":"(fn f\n  ([func s] (f func (first s) (rest s)))\n  ([func x s]\n   (lazy-seq\n     (cons x \n       (when-not (empty? s)\n         (f func (func x (first s)) (rest s)))))))","problem":60,"user":"53315c78e4b019098a6f8b67"},{"code":"(fn reduct\n  ([f coll] \n    (cons (first coll)\n          (reduct f (f (first coll) (second coll))\n            (rest (rest coll)))))\n  ([f val coll]\n    (if (empty? coll)\n      [val]\n      (lazy-seq \n        (cons val (reduct f (f val (first coll)) \n          (rest coll)))))))","problem":60,"user":"4e6f1b7a535d5021c1a89618"},{"code":"(fn mr\n  ([f coll]\n    (lazy-seq\n      (when-let [s (seq coll)]\n        (let [h (first s)\n              n (second s)\n              t (rest s)]\n          (cons h (mr f (cons (f h n) (rest t))))))))\n  ([f seed coll]\n    (cons seed\n          (lazy-seq\n            (when-let [s (seq coll)]\n              (mr f (f seed (first s)) (rest coll)))))))","problem":60,"user":"5348cab4e4b084c2834f4a5e"},{"problem":60,"code":"(fn c-reductions\n  ([func coll]\n       (c-reductions func (first coll) (rest coll)))\n  ([func init coll]\n      (if (empty? coll) (list init)\n          (let [a-reduction (reduce func init (take 1 coll))]\n              (lazy-seq (cons init (c-reductions func a-reduction (rest coll))))))))","user":"5f548678e4b0a0bc16850a7e"},{"problem":60,"code":"(fn my-reduce ([f s] (my-reduce f (first s) (rest s))) ([f acc s] (cons acc (lazy-seq (if (empty? s) nil (my-reduce f (f acc (first s)) (rest s)))))))","user":"51bfc1f0e4b0e49ef9037dd4"},{"problem":60,"code":"(fn my-reductions\n  ([f coll]\n   (my-reductions f (first coll) (rest coll)))\n  ([f init coll]\n   (if (empty? coll) (list init)\n   (cons init (lazy-seq (my-reductions f (f init (first coll)) (rest coll)))))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"apply (fn [f i & xs] ((fn ff [] (lazy-cat [i] (map f (ff) xs)))))","problem":60,"user":"4effb663535dcb61093f6a2e"},{"code":"(fn redux\n  ([f e c]\n       (let [[h & t] c]\n         (lazy-cat (list e) (if (seq t)\n                              (redux f (f e h) t)\n                              (list (f e h))))))\n  ([f coll]\n     (redux f (first coll) (rest coll))))","problem":60,"user":"4ee528fb535d1385b2869d87"},{"code":"(fn calc\n  ([x y]\n   (\n    (fn calc2-1 [x y t]\n      (lazy-seq\n        (cons\n          (reduce x t)\n          (when-not (empty? y) (calc2-1 x (rest y) (conj t (first y)))))\n        ))\n    x (rest y) [(first y)]\n    )\n   )\n  ([x y z]\n   (\n    (fn calc3-1 [x y z t]\n      (lazy-seq\n        (cons \n          (reduce x y t) \n          (when-not (empty? z) (calc3-1 x y (rest z) (conj t (first z)))))\n        )) \n    x y z []\n    )\n   )\n  )","problem":60,"user":"52cf084ce4b07d0d72b27399"},{"code":"(fn redu \n    ([f coll]\n     (redu f (first coll) (rest coll)))  \n  ([f init coll]\n     (cons init\n           (lazy-seq\n            (when-let [s (seq coll)]\n              (redu f (f init (first s)) (rest s)))))))","problem":60,"user":"50bc4e73e4b0594b91591c3d"},{"code":"(fn reds \n  ([f init coll]\n    (lazy-seq\n      (if-let [s (seq coll)]\n        (cons init (reds f (f init (first s)) (next s)))\n        [init])))\n  ([f coll]\n    (if-let [s (seq coll)]\n        (reds f (first s) (next s)))))","problem":60,"user":"4f7e29dde4b06e829148e1ca"},{"problem":60,"code":"(fn my-reductions\n   ([func seq]\n    (my-reductions func (first seq) (rest seq)))\n   ([func init seq]\n    (lazy-seq\n     (cons init\n           ((fn helper [func init seq]\n              (if (not (empty? seq))\n                (let [result (func init (first seq))]\n                  (lazy-seq\n                   (cons result\n                         (helper func result (rest seq)))))\n                )\n              ) func init seq)\n           ))\n    )\n   )","user":"5ee75f8be4b029a2061bbea5"},{"problem":60,"code":"(fn my-reductions\n  ([f sq]\n   (my-reductions f (first sq) (rest sq)))\n  ([f starting-val sq]\n    (if (empty? sq)\n      (list starting-val)\n      (lazy-seq (cons starting-val (my-reductions f (f starting-val (first sq)) (rest sq)))))))","user":"5bfa25fbe4b0bdcf453d15c8"},{"code":"(fn ductions \n  ([f xs] (ductions f (first xs) (rest xs))) \n  ([f acc xs] (cons acc (lazy-seq \n                         (when-let [[s & sr] (seq xs)] \n                           (ductions f (f acc s) sr))))))","problem":60,"user":"50c781bbe4b00bb60fe0c535"},{"problem":60,"code":"(fn reduct \n  ([f init [fst & rst :as coll]]\n   (cons init (if (seq coll) (lazy-seq (reduct f (f init fst) rst)) [])))\n  ([f [fst & rst]]\n   (reduct f fst rst)))","user":"55c0afa5e4b01b9910ae2a27"},{"problem":60,"code":"(fn lazy-reduce \n  ([f col]\n   (lazy-reduce f (first col) (rest col))\n   )\n  ([f seed col]\n   (lazy-seq (cons \n              seed \n              (when-not (empty? col) \n                (lazy-reduce f (f seed (first col)) (rest col))\n                )     \n              ))\n   )\n  )\n\n;; the problem using iterate is that I need more arguments than I'm supposed to return (i need both agg and next, but should only return agg)\n;; the issue with map is that it duplicates work\n;;","user":"6004c750e4b074f607df6645"},{"problem":60,"code":"(fn reducto\n  (\n    [f acc [x & xs]]\n    (if x\n      (let [newacc (f acc x)]\n        (lazy-seq (cons acc (reducto f newacc xs))))\n      [acc]))\n  (\n    [f [x & xs]]\n    (reducto f x xs)))","user":"56edf2dde4b04a395b9a044b"},{"problem":60,"code":"(fn reds [& w] \n  (let [t (fn [f i s]\n            (let [acc (atom i)] \n              (concat (list (deref acc)) (for [x s]\n                (reset! acc (f (deref acc) x))))))]\n    (if (= (count w) 2)\n      (t (first w) (first (second w)) (rest (second w)))\n      (t (first w) (second w) (nth w 2)))))","user":"54487527e4b032a45b8693cc"},{"problem":60,"code":"(fn redn\n  ([f [x & xs]] (redn f (f x) xs))\n  ([f acc xs]\n    (let [increments (map (fn [a _] (take a xs)) (iterate inc 1) xs)]\n      (cons acc\n            (map #(reduce f acc %) increments)))))","user":"5573ffb5e4b0aa18f790f3fd"},{"code":"(fn scan \n  ([f coll] \n   (let [[x & xs] (seq coll)]\n     (scan f x xs)))\n  ([f acc coll]\n   (let [[x & xs :as s] (seq coll)]\n     (if (empty? s)\n       (list acc)\n       (let [new-acc (f acc x)]\n         (cons acc (lazy-seq (scan f new-acc xs))))))))","problem":60,"user":"50e4b066e4b0cb9ec68fbca6"},{"code":"(fn ([f coll]\r\n  (let [f2 (fn [f init coll frec]\r\n             (cons init\r\n                   (lazy-seq\r\n                     (when-let [s (seq coll)]\r\n                       (frec f (f init (first s)) (rest s) frec)))))\r\n        f1 (fn [f coll]\r\n             (lazy-seq\r\n               (if-let [s (seq coll)]\r\n                 (f2 f (first s) (rest s) f2)\r\n                 (list (f)))))]\r\n      (f1 f coll)))\r\n  ([f init coll]\r\n  (let [f2 (fn [f init coll frec]\r\n             (cons init\r\n                   (lazy-seq\r\n                     (when-let [s (seq coll)]\r\n                       (frec f (f init (first s)) (rest s) frec)))))]\r\n      (f2 f init coll f2))))","problem":60,"user":"4f359c7ee4b0e243712b1ec4"},{"code":"(fn [f & xs]\n  (let [[a s] (if (second xs) [[(first xs)] (second xs)] [[(ffirst xs)] (rest (first xs))])]\n    (loop [a a s s] (if (or (= 100 (count a)) (nil? s)) a (recur (conj a (f (last a) (first s))) (next s))))))","problem":60,"user":"500854c4e4b028e089d3518c"},{"code":"(fn _reduseq \n  \n  ([f coll]\n    (_reduseq f (first coll) (rest coll)))\n  \n  ([f init coll]\n\t(cons init\n          (lazy-seq\n           (when-let [s (seq coll)]\n             (_reduseq f (f init (first s)) (rest s)))))))","problem":60,"user":"53834ed3e4b06839e8705edb"},{"code":"(fn my-reduce\n  ([f s]\n    (my-reduce f (first s) (next s)))\n  ([f d s]\n    (cons d (when s (lazy-seq (my-reduce f (f d (first s)) (next s)))))))","problem":60,"user":"506755b3e4b03d366d7cb2bc"},{"problem":60,"code":"(fn rdc\n     ([f sq]\n      (rdc f (first sq) (rest sq)))\n     ([f initial sq]\n      (if (empty? sq)\n        (vector initial)\n        (cons initial\n              (lazy-seq (rdc f (f initial (first sq)) (rest sq))))))\n     )","user":"4f867b25e4b033992c121c51"},{"problem":60,"code":"(fn reds [f & args] (case (count args)\n                          1 (reds f (first (first args)) (rest (first args)))\n                          2 (lazy-seq (cons (first args)\n                                            (if (seq (second args))\n                                              (reds f\n                                                    (f (first args)\n                                                       (first (second args)))\n                                                    (rest (second args))))))))","user":"55f20e4be4b06e875b46ce40"},{"problem":60,"code":"(fn reductions'\n  ([f [x & xs]] (reductions' f x xs))\n  ([f acc xs]\n   (lazy-seq\n     (if (seq xs)\n       (let [acc' (f acc (first xs))]\n         (cons acc (reductions' f acc' (rest xs))))\n       (list acc)))))","user":"56488119e4b0284900eef632"},{"code":"(fn my-reductions\n  ([f acc coll]\n     (lazy-seq (if-let [[x & xs] (seq coll)]\n                 (cons acc (my-reductions f (f acc x) xs))\n                 [acc])))\n  ([f coll] (my-reductions f (first coll) (rest coll))))","problem":60,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":60,"code":"(fn red\n([f x s]\n(if (empty? s) (cons x s)\n(lazy-seq (cons x (red f (f x (first s)) (rest s) )))))\n([f s] (red f (first s) (rest s))))","user":"4fd11a93e4b04c3a95aa040a"},{"problem":60,"code":"(fn myreductions\n  ([f xs]\n   (when-let [s (seq xs)]\n     (myreductions f (first s) (next s))\n     )\n   )\n  ([f x xs]\n   (cons x (lazy-seq\n             (when-let [y (first xs)]\n               (myreductions f (f x y) (rest xs))\n               ))))\n  )","user":"5488872ee4b0e286459a11d3"},{"code":"(fn g\n    ([f c]\n       (lazy-seq\n        (if (seq c)\n          (g f (first c) (next c))\n          `(~(f)))))\n    ([f i c]\n       (cons i\n             (lazy-seq\n              (if (seq c)\n                (g f (f i (first c)) (next c)))))))","problem":60,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":60,"code":"(fn reductions-\n  ([f coll]\n   (reductions- f (first coll) (rest coll)))\n\n  ([f init coll]\n   (cons init\n         (lazy-seq\n           (when-let [[x :as xs] (seq coll)]\n             (reductions- f (f init x) (rest xs)))))))","user":"5cf1d9e3e4b0aaa82f112a18"},{"problem":60,"code":"(fn sol ([f xs] (sol f (first xs) (rest xs)))\n  ([f init xs] (if (empty? xs) [init] (lazy-cat [init] (sol f (f init (first xs)) (rest xs)))))\n  )","user":"54857657e4b0e286459a11ac"},{"code":"(fn myreductions\n  ([f coll] (myreductions f (first coll) (rest coll)))\n  ([f start coll]\n  (if (empty? coll)\n      (list start)\n      (let [ret (f start (first coll))]\n        (lazy-seq (cons start (myreductions f ret (rest coll)) )) ))\n        ))","problem":60,"user":"4f2965ffe4b0d6649770a029"},{"problem":60,"code":"(fn ([f l] \n  (reduce \n    (fn [res v] \n      (let [res (if (seq? res) res (list res))] \n        (concat res (list (f (last res) v))))) (take 5 l)))\n  ([f l c] \n   (reduce \n    (fn [res v] \n      (let [res (if (seq? res) res (list res))] \n        (concat res (list (f (last res) v))))) l c)))","user":"586e47dee4b01531a375e9a9"}]