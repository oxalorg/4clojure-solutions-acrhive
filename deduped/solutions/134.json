[{"code":"(fn [k m] (nil? (k m false)))","problem":134,"user":"4f8ab084e4b02e764a0a5171"},{"code":"(fn [key map] (and (contains? map key) (= nil (key map)) ) )","problem":134,"user":"52dd129ae4b09f7907dd13db"},{"code":"(fn [i n] (and (nil? (i n)) (contains? n i)))","problem":134,"user":"51aefceee4b09397d5109797"},{"problem":134,"code":"(fn [ key map] (nil? (key map false)))","user":"55a31e3fe4b0acc240e31531"},{"problem":134,"code":"(fn [k m] (nil? (k m :missing)))","user":"5501ad6ee4b07d26eda61d76"},{"problem":134,"code":"(fn nil-val[k m]\n  \"given a map it returns true only and only if the value to k is nil\"\n  (if (contains? m k)\n    (= (get m k) nil)\n    false))","user":"60d61d33e4b0d60f5ea6f7e5"},{"code":"(fn [k coll] (= nil (get coll k false)))","problem":134,"user":"5053385be4b0517ede0d0a02"},{"problem":134,"code":"#(let [value (get %2 %1 :not-found)]\n   (cond \n    (= value :not-found) false\n    (= value nil) true\n    :else false))","user":"556405e5e4b0c656e3ff17fb"},{"code":"#(and (contains? %2 %)\n      (= nil (get %2 %)))","problem":134,"user":"4fab0b6be4b081705acca20c"},{"code":"(fn [k s] (and (contains? s k) (= (s k) nil)))","problem":134,"user":"4f951375e4b0dcca54ed6cc8"},{"code":"(fn [key, map] \n  (and (contains? map key)\n    (nil? (get map key)) \n  )\n)","problem":134,"user":"502a5fa4e4b09e8f859a9fbd"},{"code":"(fn [k m] (and (contains? m k) (not (m k))))","problem":134,"user":"5065faf9e4b0313a384e5645"},{"problem":134,"code":"(fn [k dict]\n  (= (k dict \"dne\") nil)\n  )","user":"53bd6fcfe4b0d9a98559a6d0"},{"problem":134,"code":";(fn [valdata coll]\n;   (if (contains? coll valdata)\n;     (= nil (val (find coll valdata)))\n;     false))\n\n#(nil? (% %2 \"fail\"))","user":"565487dce4b0f9d632dd8482"},{"code":"#(= (get %2 %1 \"empty\") nil)","problem":134,"user":"51696ee7e4b03f62cda68ce8"},{"code":"(fn [key seq] (if (contains? seq key) (nil? (key seq)) false ))","problem":134,"user":"53654b9de4b0243289761e6b"},{"code":"(fn [x m] (and (contains? m x) (nil? (m x))))","problem":134,"user":"4dad76588e77d6ed63f12a44"},{"code":"(fn [k1 m1] \n  (if (contains? m1 k1)\n    (if (nil? (get m1 k1))\n      true\n      false)\n    false))","problem":134,"user":"4e14b925535d04ed9115e7df"},{"code":"(fn [x ma]\n  (and \n    (not \n      (empty? \n        (select-keys ma [x]))) \n    (if (= nil (x ma)) \n        true \n        false )))","problem":134,"user":"4f891abde4b033992c121c77"},{"code":"(fn [k m] (nil? (get m k :no)))","problem":134,"user":"5353afa0e4b084c2834f4b03"},{"code":"#(nil? (% %2 :nop))","problem":134,"user":"4ff99f47e4b0678c553fc3aa"},{"problem":134,"code":"(fn [k m] \n           (and \n            (contains? m k)\n            (nil? (get m k))))","user":"5ccb2806e4b0ccb061962880"},{"code":"(fn isNil [x xn] (if(contains? xn x)\n                  (= (get xn x) nil)\n  \t\t\t\tfalse))","problem":134,"user":"50edcc53e4b06330c1f87c49"},{"code":"(fn [k m]\n  (= nil (get m k :nil)))","problem":134,"user":"504e0517e4b078edc5f5939a"},{"code":"(fn niltest [key map]\n  (and (contains? map key) (nil? (map key))))","problem":134,"user":"4ff8ef9fe4b0678c553fc3a3"},{"problem":134,"code":"#(and (contains? %2 %1)(not (%2 %1)))","user":"5471f2fbe4b094393f72dd70"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (= (m k) nil)))","user":"56853a7ce4b04eec3ec5cfc9"},{"problem":134,"code":"(fn [x m] \n  (nil? \n   \t(get m x :missing)\n  )\n)","user":"580c8fcee4b0849f6811b721"},{"code":"#(and (contains? %2 %1) (nil? (%1 %2)) )","problem":134,"user":"5138ccc7e4b0a5db03d727d9"},{"problem":134,"code":"(fn [key hash] (if  (contains? hash key) \n                 (if (= nil (key hash)) \n                        true \n                        false) \n                   false))","user":"570d8418e4b0b0fb43fd06de"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (if (= (get %2 %1) nil)\n     true\n     false)\n   false)","user":"55b76000e4b01b9910ae29a2"},{"code":"(fn [key map] (true? (and (= (map key) nil) (contains? map key))))","problem":134,"user":"51b903b8e4b050a1176cd6a1"},{"code":"(fn [key map]\n  (and (= (key map) nil)\n    (contains? map key)))","problem":134,"user":"4eb99b3d535dfed6da9c6d57"},{"code":"#(= %2 (conj %2 [%1 nil]))","problem":134,"user":"4ed69ea4535d10e5ff6f52e3"},{"code":"(fn [x & u] (= x :a))","problem":134,"user":"4e5867d1535d8a8b8723a291"},{"problem":134,"code":"#(not(%2 %1 1))","user":"56901211e4b0dcc4269f40e7"},{"code":"(fn has-nil? [key coll] (if (contains? coll key) (= nil (key coll)) false))","problem":134,"user":"5328b1ece4b09d4e7a9b5508"},{"code":"(fn [elem coll]\n    (and (contains? coll elem) (nil? (coll elem))))","problem":134,"user":"50eafeaae4b0346a3e988cbb"},{"code":"(fn [a b] (if (contains? b a)\n            (nil? (b a))\n            false))","problem":134,"user":"4e74e119535d7a570dd295bc"},{"code":"#(nil? (get %2 % \"missing\"))","problem":134,"user":"4f01ff83535dcb61093f6a3a"},{"code":"(fn [x y] (= (x (conj y {:c 4})) nil))","problem":134,"user":"509442ece4b04e5742806c49"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k ::not-found)))","user":"541f6bc0e4b01498b1a71a98"},{"code":"(fn [k m]\n  (if (and (some #(= k %) (keys m)) (nil? (k m))) true false))","problem":134,"user":"4e9dafe1535dbda64a6f6b89"},{"code":"(fn [x y]  (nil? (x y 1)))","problem":134,"user":"5040edf4e4b0ff5d2cc40db5"},{"code":"(fn [a-key a-map]\n  (if (a-key (set (keys a-map)))\n    (if (a-key a-map)\n      false\n      true)\n    false))","problem":134,"user":"5361a4f2e4b0243289761e47"},{"problem":134,"code":"(fn [some-key some-map] (if (contains? some-map some-key) (= (get some-map some-key) nil)  false))","user":"5a737561e4b0512ff01cdaaa"},{"problem":134,"code":"(fn [x mp] (if (contains? mp x)\n\t(if (= nil  (get mp x))\n\ttrue\n    false)\n    false))","user":"604e0764e4b0b7ec0ac60ac7"},{"code":"(fn nil-val? [k m]\n  (let [entry (find m k)]\n     (true? (and entry (nil? (val entry))))))","problem":134,"user":"4fa9e9c6e4b081705acca1e9"},{"problem":134,"code":"#(nil? (%2 %1 :1))","user":"58c71509e4b021aa9917ed6e"},{"code":"#(nil? (get %2 %1 :not-exist))","problem":134,"user":"522635c0e4b06a1ecd0c4e7e"},{"problem":134,"code":"#( and (contains? %2 %1) (nil? (%2 %1)))","user":"56e7d877e4b02e7e935eb6df"},{"code":"(fn [keyy mapp]\n  (and (contains? mapp keyy) (nil? (get mapp keyy))))","problem":134,"user":"51b89503e4b050a1176cd69a"},{"problem":134,"code":"(fn [x xs] (and (nil? (xs x)) (contains? xs x)))","user":"563cdfdfe4b0bfe05bf11840"},{"problem":134,"code":"(fn [key map] (if (= (get map key \"stuff\") nil) true false))","user":"58ad4349e4b0ebc645576c9d"},{"problem":134,"code":"(fn [a-key a-map] (nil? (get a-map a-key :not-found)))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":134,"code":"(fn [ k m] (and (contains? m k) (nil? (get m k))))","user":"582835cbe4b051871117bf30"},{"problem":134,"code":"(fn [k m] (if (= (get m k true) nil) true false))","user":"543115a0e4b0dad94371f2e1"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k true))\n  )","user":"563b9acbe4b0bfe05bf11827"},{"problem":134,"code":"(fn nk [the-key the-map]\n  (and (not= (-> the-map keys set the-key) nil)\n       (= nil (the-key the-map))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":134,"code":"#(= (get %2 %1 \"lalalal\") nil)","user":"5a09ebf8e4b0eab8c0448932"},{"problem":134,"code":"#(nil? (%1 %2 :anything))","user":"54ef4a1ee4b024c67c0cf883"},{"problem":134,"code":"#(nil? (get %2 % :na))","user":"55568a7de4b0deb715856e1c"},{"problem":134,"code":"(fn [k m]\n  (nil? (k m \"tuna\")))","user":"540961e9e4b0addc1aec66db"},{"code":"(fn [the-key the-map]\n  (if (and\n        (contains? the-map the-key)\n       \t(nil? (get the-map the-key)))\n    true\n    false))","problem":134,"user":"4f80a906e4b033992c121bf7"},{"problem":134,"code":"#(and\n  (contains? %2 %1)\n  (= (%2 %1) nil)\n )","user":"5731283ae4b0cd1946bd0fbe"},{"problem":134,"code":"#(if (contains? %2 %1)(= (%2 %1) nil) false)","user":"5b4939f8e4b02d533a91bc8d"},{"code":"#( and (contains? %2 %1) (nil? (get %2 %1) ) )","problem":134,"user":"4f659386e4b07046d9f4ef44"},{"problem":134,"code":"(fn [k m] \n   (if (contains? m k)\n     (nil? (m k))\n     false\n     ))","user":"589e22fae4b02bd94d917e56"},{"code":"#(nil? (%1 %2 true))","problem":134,"user":"4eb2e6ca535d7eef3080734f"},{"code":"(fn [k m]\n  (if (= [k nil] (find m k)) true false))","problem":134,"user":"50b11fbce4b009df37c708cb"},{"problem":134,"code":"(fn [mykey myTable]\n (and \n(contains? myTable mykey)\n(nil? (get myTable mykey))\n))","user":"556ff948e4b09a3098a52527"},{"problem":134,"code":";#(= nil (%1 %2))\n\n(fn [key map] \n  (if (contains? map key) \n    (= nil (key map))\n    false))","user":"58bc8cbee4b0888cdc949d1b"},{"problem":134,"code":"(fn [k coll]\n  (if\n    (and\n     (not (nil? (find coll k)))\n     (nil? (k coll)))\n    true\n    false))","user":"55b7f263e4b01b9910ae29b4"},{"code":"(fn [keyt listt]\n  (if (find listt keyt)\n    (nil? (keyt listt))\n    false))","problem":134,"user":"4f036266535dcb61093f6a95"},{"code":"(fn [k m] (and (contains? m k) (nil? (m k)) ))","problem":134,"user":"4ea57300535d7eef308072d5"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (= (%2 %1) nil)\n   false\n   )","user":"55702247e4b09a3098a5252a"},{"problem":134,"code":"(fn [x y] (nil? (y x 0)))","user":"57887de2e4b0ebec4cfb751c"},{"code":"#(= nil (%1 %2 2))","problem":134,"user":"4fa85ae4e4b081705acca1d3"},{"problem":134,"code":"#(every? true? [(contains? %2 %1)  (= nil (%1 %2))])","user":"58b84c28e4b0ebc645576d94"},{"problem":134,"code":"(fn hasnil [k m]\n  (= nil (get m k false)))","user":"54f06aede4b024c67c0cf896"},{"problem":134,"code":"(fn [a-key a-map] (nil? (a-key a-map :nothing-here)))","user":"54e8ab22e4b024c67c0cf827"},{"problem":134,"code":"(fn [k s] (boolean (nil? (get s k false))))","user":"5b056587e4b0cc2b61a3bd83"},{"problem":134,"code":"(fn [k m] \n  (nil? (get m k :missing)))","user":"52aaabf7e4b0c58976d9ac68"},{"code":"(fn foo [k m]\n  (if (contains? m k)\n    (if (= (k m) nil)\n      true\n      false)\n  false))","problem":134,"user":"4f04256d535dcb61093f6ba7"},{"problem":134,"code":"(fn nil-key\n  [k m]\n  (if (contains? m k)\n    (nil? (m k))\n    false))","user":"557e9d17e4b05c286339e0d8"},{"problem":134,"code":"(fn nil-key [k m]\n  (and\n   (contains? m k)\n   (nil? (get m k))))","user":"5db826b4e4b010eb3c36cd47"},{"problem":134,"code":"(fn\n  [key-to-find\n   map-to-search]\n  (and (contains? map-to-search\n                  key-to-find)\n       (nil? (key-to-find map-to-search))))","user":"5a9829e5e4b0d174b936c788"},{"problem":134,"code":"(fn [k m] (nil? (get m k :marker)))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":134,"code":"(fn [x y] \n                    (if (and (contains? y x) (= (x y) nil)) true false))","user":"5075e374e4b09049dea827a5"},{"code":"(fn [k, m]\n  (and\n    (contains? m k)\n  \t(= nil (m k))\n   ))","problem":134,"user":"5020a3fbe4b0cb6ebc0a42f8"},{"code":"(fn key-contains-nil-value? [key map] \n  (cond \n  \t(and (contains? map key) (= (get map key) nil)) true\n\t:else false))","problem":134,"user":"52b71bd2e4b0c58976d9ad4d"},{"code":"(fn [x,y] (and (contains? y x) (= (get y x) nil)))","problem":134,"user":"5006981ce4b0678c553fc489"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)\n       (not (m k))))","user":"58ef4db9e4b056aecfd47dc6"},{"problem":134,"code":"(fn[k m](= (contains? m k) (nil? (get m k))))","user":"54641bdbe4b01be26fd746cb"},{"code":"#(= nil (%2 % 0))","problem":134,"user":"4f53fa55e4b0a7574ea717d2"},{"code":"#(boolean (and (find %2 %1) (not (%1 %2))))","problem":134,"user":"4f08b15b535dcb61093f6c40"},{"code":"(fn [k m] (= nil (get m k :missing)))","problem":134,"user":"4ee85476535d93acb0a6687c"},{"problem":134,"code":"#(= (if(contains? %2 %1)(%1 %2)false) nil)","user":"5a904de3e4b05369db4d254c"},{"code":"#(nil? (%1 %2 3))","problem":134,"user":"536102efe4b0243289761e3e"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"ko\")))","user":"534bfc71e4b084c2834f4a88"},{"problem":134,"code":";(get map key not-found)\n; stolen soultion: #(nil? (%1 %2 0))\n#(identical? nil (get %2 %1 \"This item is not icluded aka: not-found\"))","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn nkey [k m]\n  (if (contains? m k)\n    (= (k m) nil)\n    false))","problem":134,"user":"4f066c90535dcb61093f6c11"},{"code":"(fn[k h](= k :a))","problem":134,"user":"52550d90e4b0541d1855b9c1"},{"code":"(fn [k m]\n(and (not (empty? (select-keys m [k]))) (nil? (m k))))","problem":134,"user":"52e657e4e4b09f7907dd1472"},{"problem":134,"code":"#(if (contains? %2 %1) (= (get %2 %1) nil) false)","user":"557f7c8be4b05c286339e0e0"},{"code":"(fn [a b] (and (contains? b a) (= (a b) nil)))","problem":134,"user":"51910da7e4b0f8ef0be96bf9"},{"problem":134,"code":"(fn [k coll] (if (nil? (get coll k false))\n               true\n               false))","user":"5901b618e4b0438e51c2d043"},{"problem":134,"code":"(fn [k m]\n  (and \n   (contains? m k)\n   (nil? (m k))))","user":"56051095e4b08b23635d3162"},{"code":"#(and (not= nil (find %2 %1)) (= nil (%1 %2)))","problem":134,"user":"525de512e4b0cb4875a45d8a"},{"problem":134,"code":"#(if (contains? %2 %1)\n    (= (%2 %1) nil)\n    false)","user":"56a0ac99e4b0542e1f8d14a6"},{"code":"#(and (not= nil (find %2 %1)) (= nil (get %2 %1)))","problem":134,"user":"5017f840e4b02f523d7cc5e8"},{"problem":134,"code":"(fn [x coll] (and (contains? coll x) (= (x coll) nil)))","user":"543f1765e4b032a45b86935a"},{"code":"(fn isnil [x, y] (= (get y x \"missing\")  nil))","problem":134,"user":"4e676d7e535d8ccf87e9fe7d"},{"code":"#(nil? (get %2 %1 \"unkown\"))","problem":134,"user":"51937eb3e4b04df54c098022"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k :nf)))","user":"54e79094e4b024c67c0cf818"},{"problem":134,"code":"(fn \n  [k m]\n  (if-let [x (find m k)] (nil? (last x)) false))","user":"561ca6ebe4b064ca9f4b169c"},{"problem":134,"code":"(fn key-nil? [key map]\n  (if (and (contains? map key ) (nil? (key map))) true false))","user":"58daae01e4b0a4d5acaab664"},{"problem":134,"code":"(fn [x y] \n  (if\n    (contains? y x) \n    ( = nil (x y))\n     false )\n )","user":"57d5a74de4b0bd073c2023ba"},{"code":"(fn [k m] (and (contains? m k) (=(k m) nil)))","problem":134,"user":"51c1d159e4b0d204dbe2ca18"},{"problem":134,"code":"(fn [k m]\n  (and \n    (contains? m k)\n   \t(nil? (k m))))","user":"5640eb50e4b08d4f616f5eec"},{"code":"(fn [x, y] (and (contains? y x) (= (x y) nil)))","problem":134,"user":"51afa3d9e4b0c53cf2e68a51"},{"code":"#(and (contains? %2 %1) \n       (nil? (%1 %2)))","problem":134,"user":"50ebf8b6e4b04edc3377703f"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? m k) (nil? (m k)))\n    true\n    false))","user":"53d20e14e4b00fb29b22131a"},{"problem":134,"code":"(fn \n  [k m]\n  (and (contains? m k) (nil? (k m))))","user":"529735cbe4b02ebb4ef7503c"},{"problem":134,"code":"(fn [k hm]\n  (and\n   (= nil (k hm))\n   (contains? hm k)))","user":"5f79bff2e4b02876ed9fd0ca"},{"code":"(fn [k m] (= (get m k 1) nil))","problem":134,"user":"4f036d6e535dcb61093f6ac0"},{"problem":134,"code":"(fn [k m]\n  (nil? (k m true)))","user":"55e6c3f5e4b050e68259b48c"},{"code":"(fn [kw mp]\n  (and (contains? mp kw) (nil? (get mp kw))))","problem":134,"user":"4e5d2dc5535d8a8b8723a2ca"},{"code":"(fn [my-key my-map]\n  (and (contains? my-map my-key)\n       (nil? (my-map my-key))\n  )\n)","problem":134,"user":"52f8b86de4b047fd55836fdb"},{"code":"(fn [v m] (if (= (find m v) nil) false (= (m v) nil)))","problem":134,"user":"51ac9482e4b09397d5109774"},{"problem":134,"code":"(fn [ky, mp] (if (= nil (get mp ky \"notnil\")) true false))","user":"547c84b5e4b0c51c1f4d72e8"},{"code":"(fn [k m] (and (contains? m k) (= (get m k) nil)) )","problem":134,"user":"5151aa14e4b03e678e393ad4"},{"code":"#(not (%2 % (gensym)))","problem":134,"user":"4e8f4f64535d65386fec2149"},{"code":"(fn tex [x k]\n  (and (contains? k x) (nil? (x k))))","problem":134,"user":"4f036268535dcb61093f6a96"},{"code":"(fn iffnil [k a] (if (contains? a k) (nil? (a k)) false))","problem":134,"user":"52b60e94e4b0c58976d9ad3e"},{"code":"(fn [key coll]\n  (if (find coll key)\n    (= (key coll) nil)\n    false))","problem":134,"user":"503be880e4b0fc0f99c2e54a"},{"problem":134,"code":"#(if (find %2 %1) \n   (if (nil?(%2 %1)) \n     true \n     false) \n   false)","user":"571444dce4b07c98581c3ab8"},{"problem":134,"code":"(fn [k m] (not (m k true)))","user":"55e46161e4b050e68259b44e"},{"problem":134,"code":"(fn [k d] (nil? (get d k \"missing\")))","user":"58e5180ae4b056aecfd47c82"},{"problem":134,"code":"(fn[key map] (and (not (key map))\n                 (contains? map key))\n  )","user":"58cff8b0e4b03c36ff7e58c0"},{"problem":134,"code":"(fn my [a-key a-map] (and (contains? a-map a-key) (= (a-map a-key) nil)))","user":"561c57b9e4b064ca9f4b1697"},{"code":"(fn [k m]\r\n  (nil? (get m k 'not-found)))","problem":134,"user":"4f0da4e4535d0136e6c22319"},{"problem":134,"code":"#(not (get %2 %1 \"NOTFOUND\"))","user":"544257b4e4b032a45b869379"},{"problem":134,"code":"(fn [a-key a-map]\n  (and (contains? a-map a-key) (nil? (get a-map a-key))))","user":"5f238a59e4b0f565ad99828d"},{"problem":134,"code":"(fn [k l]\n  (if (= (get l k false) nil)\n    true\n    false))","user":"564d7434e4b0284900eef680"},{"problem":134,"code":"#(if (= (%2 %1) nil ) (if (contains? %2 %1) true false) false )","user":"55975569e4b031d6649c9b8e"},{"code":"(fn [x y]\n  (nil?\n    (get y x false)))","problem":134,"user":"4fefbfe7e4b0678c553fc31a"},{"code":"#(and (nil? (%1 %2))\n      (contains? %2 %1))","problem":134,"user":"5264301fe4b03e8d9a4a70ca"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= (m k) nil) false))","user":"5e905e03e4b0cb016954634c"},{"code":"(fn [x y]\n(and\n  (contains? y x)\n(nil? (x y))\n)\n   )","problem":134,"user":"4f2004a1535d64f6031464a7"},{"code":"#(nil? (% %2 1))","problem":134,"user":"4db85282535d1e037afb218a"},{"problem":134,"code":"(fn [k col] (and (contains? col k) (= (col k) nil)))","user":"5a09a6f7e4b01bb0ae8afe14"},{"problem":134,"code":"(fn [k m]\n  (and (not (get m k))\n       (contains? m k)))","user":"54801febe4b0c51c1f4d733c"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (let [value (k m)]\n      (= value nil))\n    false))","problem":134,"user":"50775a7de4b0fc74642bff60"},{"problem":134,"code":"(fn [k m]\n   (= nil (get m k :default)))","user":"54c23252e4b045293a27f5fc"},{"problem":134,"code":"(fn [x xs] (= (contains? xs x)(= nil (x xs))))","user":"549f498ae4b0f3d1d8e70fb0"},{"code":"(fn [k m]\n    (cond\n        (contains? m k)\n        (nil? (k m)) \n\n        :else\n        false))","problem":134,"user":"51b0436ae4b0c53cf2e68a60"},{"problem":134,"code":"(fn [e col] (and (contains? col e) (nil? (col e))))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":134,"code":"(fn [k m]\n  (let [result (find m k)]\n    (if (nil? result)\n      false\n      (nil? (second result)))))","user":"54dce62be4b024c67c0cf78b"},{"code":"#(= nil (%1 %2 :not-found))","problem":134,"user":"52cca65be4b07d0d72b2736b"},{"problem":134,"code":"(fn [keyy mapp]\n  (= (get mapp keyy \"nil\") nil)\n)","user":"56195e57e4b053970a773af6"},{"problem":134,"code":"(fn [k l] (and (contains? l k) (= (k l) nil)))","user":"5beda647e4b0a6d31fed2122"},{"code":"(fn [k lst]\n  (and (contains? lst k) (nil? (lst k))))","problem":134,"user":"4e49a7bb535dc968683fc4c6"},{"code":"(fn [k m]\n  (and\n    (contains? m k)\n    (nil? (m k))))","problem":134,"user":"4ec5aa1f535d6d7199dd36b0"},{"problem":134,"code":"(fn [k m]\n        (and (contains? m k)\n             (nil? (m k))))","user":"546c4377e4b00cfc9eacc177"},{"code":"#(and (contains? %2 %1) (= nil (get %2 %1 0)))","problem":134,"user":"4fa6d532e4b081705acca1be"},{"code":"(fn [k m]\n  (and (contains? m k)\n       (nil? (k m))))","problem":134,"user":"510fd798e4b04c71fce993dc"},{"code":"(fn [k m] \n  (if-let [[k,v] (find m k)]\n  \t(= v nil) \n    false))","problem":134,"user":"53800d99e4b06839e8705ebd"},{"problem":134,"code":"(fn [k l] \n   (and (contains? l k) \n    \t(nil? (get l k))))","user":"582625d3e4b051871117bef2"},{"code":"(fn [k m] \n  (if (contains? m k)\n    (= (m k) nil)\n    false))","problem":134,"user":"5032b066e4b00c0952a257ea"},{"problem":134,"code":"(fn containsNil [mapKey hashMap]\n  (and (contains? hashMap mapKey) (= (hashMap mapKey) nil)))","user":"593c1e3be4b069cdc2982b86"},{"code":"(fn nil-find [key dict]\n  (nil? (dict key :not-found)))","problem":134,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k)\n    (if (nil? (k m)) true false)\n  false))","user":"5670ef43e4b0a866af6896fc"},{"problem":134,"code":"(fn [k v] (and (nil? (k v)) (contains? v k)))","user":"553093bee4b076ab5578f817"},{"problem":134,"code":"(fn [key map]\n  (and\n   (contains? map key)\n   (= nil (get map key))\n   )\n  )","user":"5cc82af4e4b0ccb061962843"},{"code":"#(if (contains? %2 %1)\n  (if-not (%1 %2)\n    true\n    false)\n    false)","problem":134,"user":"4f24b023e4b0d66497709fee"},{"problem":134,"code":"(fn [k m]\n  (and \n   (contains? m k)\n   \n   \n  (= nil (k m))))","user":"52c58561e4b0c2d177d620f8"},{"problem":134,"code":"(fn [input_key input_map] (and (contains? input_map input_key) (nil? (input_map input_key))))","user":"5d64508de4b0c9e5857d5031"},{"code":"(fn [a-key a-map] (and (not (nil? (some #{a-key} (keys a-map)))) (nil? (a-key a-map))))","problem":134,"user":"4f5599dfe4b0a7574ea71806"},{"problem":134,"code":"(fn [my-key my-hash] (nil? (my-key my-hash 0)))","user":"5e4f4617e4b027a2e10ac0b7"},{"code":"(fn [k c] \n  (and \n    (contains? c k)\n    (nil? (c k))))","problem":134,"user":"4f2e0369e4b0d6649770a064"},{"problem":134,"code":"(fn bob[my-key my-map] \n  (cond  \n   (and (contains? my-map my-key) (= nil (my-key my-map))) true\n   :else false))","user":"4ddf597a535d08e6dec9fddf"},{"problem":134,"code":"(fn hasnilvalue134?\n    [k m]\n    (= (get m k 0) nil))","user":"4f9e0000e4b0dcca54ed6d2a"},{"problem":134,"code":"(fn [given-key map-item] (nil? (given-key map-item false)))","user":"5c34f7efe4b0d62ef62d9f5b"},{"problem":134,"code":"(fn my-get [key _map]\n  (and (contains? _map key)\n       (nil? (key _map))))","user":"57ea4569e4b0bfb2137f5b46"},{"code":"(fn afun [k m] (and (contains? m k) (= (m k) nil)))","problem":134,"user":"500e3238e4b068062f6e8d8f"},{"code":"(fn [x m] (if (contains? m x) (nil? (m x)) false))","problem":134,"user":"51857e64e4b0da5a5be3babe"},{"code":"(fn [key map] (if (contains? map key) (= (map key) nil) false ))","problem":134,"user":"4dbf7a31535d020aff1edf75"},{"problem":134,"code":"(fn [x xmap] (and (contains? xmap x) (nil? (get xmap x))))","user":"54a700c3e4b09f271ff37c90"},{"code":"(fn [k m] (nil? (k m :notnil)))","problem":134,"user":"52d83c2ce4b09f7907dd138d"},{"code":"(fn [x y] (and (contains? y x) (nil? (y x))))","problem":134,"user":"4f2b2c13e4b0d6649770a048"},{"code":"(fn [x m] (if-not (nil? (find m x)) (nil? (get m x)) false))","problem":134,"user":"514872f5e4b05514c84b7cbe"},{"code":"(fn [k coll] (= (get coll k \"not here\") nil))","problem":134,"user":"52718620e4b03e8d9a4a73f5"},{"code":"(fn [k m]\n  (if (contains? m k) \n    (if (= (get m k) nil) true false)\n  \tfalse \n  )\n)","problem":134,"user":"51c5c9c9e4b03a28d42333ba"},{"problem":134,"code":"(fn [key hash]\n  (nil? (key hash false)))","user":"5455a6d3e4b0e397800069e2"},{"problem":134,"code":"(fn [key _map] (if (and (contains? _map key) (= nil (_map key))) true false))","user":"58db362be4b0a4d5acaab675"},{"problem":134,"code":"(fn [k m]\n   (boolean (and\n         ((set (keys m)) k)\n         (= (get m k false) nil))))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn [sym ma] \n  (and (contains? ma sym) (= (ma sym) nil)))","problem":134,"user":"52c17e42e4b07a9af5792367"},{"code":"#(= nil (get-in %2 [%] false))","problem":134,"user":"4f88942be4b033992c121c6a"},{"problem":134,"code":"(fn [k m] (if (nil? (get m k false)) true false))","user":"5455573be4b0e397800069e0"},{"code":"(fn [theKey theMap] (and (= nil (theMap theKey))(contains? theMap theKey)))","problem":134,"user":"536673a8e4b0243289761e76"},{"code":"(fn [k m]\r\n  (= m (conj m [k nil])))","problem":134,"user":"504e14c2e4b078edc5f593bf"},{"problem":134,"code":"#(nil? (get %2 %1 \"not found m8\"))","user":"54f43f17e4b0f2f3c5226e7b"},{"problem":134,"code":"(fn [k m]\n  (= 1\n     (apply +\n            (map #(if (= % [k nil]) 1 0) m))))","user":"57533bc1e4b02ea1147992a6"},{"problem":134,"code":"(fn [k m]\n  (if(contains? m k)\n    (nil? (k m))\n    false))","user":"56a37ccee4b0542e1f8d14cb"},{"problem":134,"code":"#(and\n   (contains? %2 %1)\n   (nil? (%1 %2)))","user":"5bbf4dc9e4b07a9b28b0ffd5"},{"code":"(fn [k m] (and (contains? m k) (= nil (m k))))","problem":134,"user":"4eba9ac1535dfed6da9c6d66"},{"problem":134,"code":"(fn contains-nil?\n  [k m]\n  (nil? (k m :default)))","user":"54dc84ede4b024c67c0cf784"},{"problem":134,"code":"(fn [akey coll] (and (contains? coll akey) (nil? (coll akey))))","user":"5243233fe4b076204b44faac"},{"problem":134,"code":"(fn prueba\n  [k lst]\n  (let [r (get lst k false)]\n    (if (= r nil)\n      true\n      false)))","user":"5c7dad57e4b0d597f478caba"},{"code":"(fn [key map] (and (contains? map key) ((comp nil? map) key)))","problem":134,"user":"50e111f7e4b084616e11c663"},{"code":"(fn [k m] \n  (and\n   (contains? m k)\n   (nil? (m k))))","problem":134,"user":"517a025ce4b01aacecbecbe6"},{"problem":134,"code":"(fn [k c]\n  (if (contains? c k)\n  \t(nil? (get c k))\n  \tfalse\n  )\n)","user":"562eeba2e4b0ab312c17ebc1"},{"problem":134,"code":"#(= (contains? %2 %1) (nil? (get %2 %1)))","user":"5707c364e4b0b0fb43fd0691"},{"problem":134,"code":"(fn [x y] (let [z (get y x)] (if (= z nil) (if (=(merge y {x nil}) y) true false) false)))","user":"55079757e4b021ccfedb96a9"},{"problem":134,"code":"(fn [x, y] (and (identical? (get y x) 'nil) (contains? y x)))","user":"55f49808e4b06e875b46ce7d"},{"problem":134,"code":"(fn [needle haystack] (and (contains? haystack needle) (nil? (haystack needle))))","user":"5429986ce4b01498b1a71b3b"},{"problem":134,"code":"#(= (%1 %2 0) nil)","user":"54eff2bee4b024c67c0cf88d"},{"code":"(fn [k m] (if (and (contains? m k) (= (get m k) nil)) true false))","problem":134,"user":"52bc6f5ee4b07a9af57922f6"},{"problem":134,"code":"(fn[k m] (if(contains? m k) (= nil (m k)) false))\n\n;;fn([kkey mmap] if(contains? mmap kkey)(= nil (mmap kkey))(false))\n\n\n;;(true?  (fn([kkey mmap] if(contains? mmap kkey)(= nil (mmap kkey))(false)) :a {:a nil :b 2}))\n\n;;((fn[k m] (contains? m k)) :b {:a nil :b 2})\n\n;;(false? ((fn[k m] (if(contains? m k)(= nil (m k)) (false) )) :c {:a nil :b 2}))","user":"58a32c21e4b02bd94d917eeb"},{"code":"(fn [key user_map]\n  (and\n    (not (key user_map))\n    (contains? user_map key)\n  )\n)","problem":134,"user":"4fe5f342e4b0e8f79898fecb"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k :hello)))","user":"5a9bfd57e4b0d174b936c7d0"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? m k) (nil? (get m k)))\n    true\n    false\n  )\n)","user":"53ef5c13e4b0742d9025b0cb"},{"code":"(fn [x xmap]\n  (and (contains? xmap x)\n       (nil? (xmap x))))","problem":134,"user":"4f9aa75ee4b0dcca54ed6d0d"},{"code":"#(if (contains? %2 %1)(= nil (get %2 %1)) false)","problem":134,"user":"537a1012e4b06839e8705e5c"},{"code":"(comp (partial every? identity) (partial apply (juxt (comp nil? get) contains?)) reverse list)","problem":134,"user":"4e9660ec535dbda64a6f6b44"},{"code":"#(let [e (find %2 %)] (and (not (nil? e)) (nil? (val e)) (not (nil? (key e)))))","problem":134,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":134,"code":"#(= (% %2 0) nil)","user":"56992162e4b0542e1f8d143c"},{"code":"(fn [a c] (and (contains? c a)\n                (nil? (a c))))","problem":134,"user":"4e6dfe57535d5021c1a895fc"},{"problem":134,"code":"(fn nil-key? [k m]\n  (and (contains? m k)\n       (nil? (get m k))))","user":"55f9c245e4b03cbcff9738ca"},{"code":"(fn [k m]\n  (if (contains? m k) (nil? (k m))\n    false))","problem":134,"user":"51a82498e4b08d8ec191b80b"},{"problem":134,"code":"(fn [x xs]\n  (nil? (x xs 0)))","user":"54051338e4b0addc1aec6662"},{"problem":134,"code":"#(nil? (%1 %2 :not-nil-default))","user":"5e4471e1e4b01d43a70e8e85"},{"code":"(fn [k m]\n  (and\n  \t(not (get m k))\n    (contains? m k)))","problem":134,"user":"52ae70c4e4b0c58976d9aca8"},{"problem":134,"code":"(fn [k m]\n  (boolean (when ((set (keys m)) k)\n    (nil? (get m k)))))","user":"55dcc26ee4b050e68259b3bc"},{"problem":134,"code":"(fn [key map]\n  (and\n   (contains? map key)\n   (nil? (map key))))","user":"58333b19e4b089d5ab817c94"},{"problem":134,"code":"#(if (and (contains? %2 %1) (= nil (%2 %1)))\n   true false)","user":"53e745a1e4b036ad0777e479"},{"problem":134,"code":"(fn [k m] (if (and (contains? m k) (nil? (m k)))\n          true false))","user":"56b1b59be4b0982f16b37df2"},{"problem":134,"code":"(fn [v m]\n  (and (= (m v) nil) (contains? m v)))","user":"56c60b36e4b05cc29241eead"},{"code":"(fn [key coll] (and (= nil (key coll)) (contains? coll key) ) )","problem":134,"user":"513a1d33e4b067e25a345ec4"},{"code":"(fn [k l] (if (= (get l k 0) nil ) true false))","problem":134,"user":"51c09719e4b0c9c82288293c"},{"problem":134,"code":"(fn [keyz mapz] (and (contains? mapz keyz) (nil? (mapz keyz))))","user":"53e8698ce4b036ad0777e486"},{"code":"(fn [k m] (cond (= (get m k \"happy\") nil) true :else false))","problem":134,"user":"51789599e4b03d69594194d6"},{"code":"(fn [key map] (= (key map 0) nil))","problem":134,"user":"4fea7bc4e4b0140c20fb9c07"},{"problem":134,"code":"(fn [ky mp]\n  (=  (get mp ky :not-here) nil))","user":"5eec1001e4b07c55ae4a0502"},{"problem":134,"code":"(fn [k m] (= nil (k m :not_exist)) )","user":"5619d3a2e4b053970a773b00"},{"problem":134,"code":"(fn t\n  [k m]\n  (and (contains? m k) (= (k m) nil)))","user":"5ba75fdfe4b0a20761a23419"},{"code":"(fn [k s] (and (contains? s k) (nil? (k s))))","problem":134,"user":"5159849ce4b0394f658fe236"},{"code":"#(and (not (nil? (find %2 %1))) (nil? (second (find %2 %1))))","problem":134,"user":"4e96eecf535dbda64a6f6b4b"},{"problem":134,"code":"(fn [k m]\n    (if (contains? m k)\n      (= nil (k m))\n      false))","user":"54508859e4b0e397800069a3"},{"code":"(fn [key coll]\n  (and (contains? coll key) (nil? (coll key))))","problem":134,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":134,"code":"(fn [k s] (and (= (s k) nil) (contains? s k)))","user":"5d728116e4b02e6b30c9350f"},{"problem":134,"code":"(fn [key list]\n  (and (contains? list key) (nil? (key list))))","user":"5daae405e4b000c986472c44"},{"code":"#(if (= (get %2 %1 :not) nil) true false)","problem":134,"user":"4eb9c82d535dfed6da9c6d5c"},{"problem":134,"code":"(fn [key map] (\n           if (contains? map key)\n             (nil? (key map))\n             false             \n           ))","user":"543b7456e4b032a45b86932f"},{"code":"(fn [x m]\n  (and (contains? m x) (nil? (m x))))","problem":134,"user":"4e7d4544535db169f9c796d0"},{"problem":134,"code":"(fn [k m]\n  (do \n    (if (contains? m k)\n      (do\n        (if-let [ret (= nil (get m k))]\n          ret\n          false))\n      false)))","user":"55f3bb12e4b06e875b46ce64"},{"problem":134,"code":"(fn [key col] (if (contains? col key) (nil? (col key)) false))","user":"55f1d5dfe4b06e875b46ce38"},{"code":"(fn keysValueIsNil? [key m]\n  (nil? (get m key false)))","problem":134,"user":"4f1c7021535d64f603146482"},{"code":"#(nil? (%1 %2 *))","problem":134,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"code":"(fn [a-key a-map]\n  (nil? (a-map a-key 1)))","problem":134,"user":"501b1efee4b0b12d9c5f4d82"},{"problem":134,"code":"(fn [k col] (and (nil? (k col))  (contains? col k)))","user":"555883c5e4b0deb715856e2d"},{"code":"(fn [k m] (if (= \"1\" (get m k \"1\")) false (if (= nil (get m k)) true false) ) )","problem":134,"user":"531f0a26e4b08068f379edbf"},{"problem":134,"code":"#(if (find %2 %1) (nil? (%1 %2)) false)","user":"55f6c0e2e4b06e875b46ce99"},{"code":"(fn [x xs] (and (contains? xs x) (= nil (xs x))))","problem":134,"user":"4dbecb06535d020aff1edf6a"},{"code":"#(if (not (nil? (find %2 %1)))\r\n      (if (nil? (%2 %1)) true false)\r\n      false)","problem":134,"user":"500c5b4ae4b03d00572d2d88"},{"code":"(fn [k m]   ( and (contains? m k) (= nil (m k)) ))\n\n\n;(defn has-value [key value]  (fn [m]    (= value (m key))))","problem":134,"user":"52c1ef8fe4b07a9af579236e"},{"code":"(fn[key map] (nil? (get map key 5)))","problem":134,"user":"50b525c5e4b0c464d223d1c3"},{"problem":134,"code":"#(= nil (get %2 %1 :not-nil))","user":"5531e445e4b09218d5f44f76"},{"problem":134,"code":"(fn checkKey\n  [key m]\n  (and (contains? m key) (nil? (get m key))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":134,"code":"(fn [x sq] \n  (and \n    (nil? (x sq)) \n    (contains? sq x) \n    ))","user":"5c7409b3e4b0fca0c16227c1"},{"code":"(fn [k m] (if (contains? m k) (= nil (k m))  false))\n;#(nil? (% %2 1))","problem":134,"user":"501b9fcae4b070595fd3c635"},{"code":"(fn [key coll] \n  (and \n    (contains? coll key) \n    (nil? (key coll))\n  )\n)","problem":134,"user":"50959df3e4b087f34d351ab4"},{"code":"( fn [k itt] ( not ( not (and (some #(= k %) (keys itt)) (= nil (k itt))))))","problem":134,"user":"4df39b50535d08e6dec9fe29"},{"problem":134,"code":"(fn has-nil-val?\n  [k m] ; key, map\n  (and ((complement nil?) (some (partial = k) (keys m))) (nil? (k m)))\n  )","user":"59234753e4b0a390037439ef"},{"code":"(fn [k mp] (= nil (get mp k 0)))","problem":134,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":134,"code":"(fn [k m]\n  (and \n   (= (count (filter #(= % k) (keys m))) 1)\n   (= (k m) nil)))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn [x y]\r\n  (and \r\n    (contains? y x)\r\n    (nil? (y x))\r\n  )\r\n)","problem":134,"user":"4fc27910e4b081705acca338"},{"code":"#(and (contains? %2 %1)\n      (= nil (%1 %2)))","problem":134,"user":"4daea889edd6309eace4d15b"},{"problem":134,"code":"(fn [y x] (and (contains? x y) (= nil (get x y))))","user":"580a4320e4b0a837a8b30d2f"},{"code":"(fn [ky mp]\n\t(if (and (contains? mp ky) (= (mp ky) nil)) true false)\n)","problem":134,"user":"53386fb9e4b0e30313ee6c9a"},{"problem":134,"code":"(fn [k coll] \n  (and \n   (contains? coll k) \n   (nil? (get coll k))))","user":"55b4fa46e4b01b9910ae2983"},{"code":"(fn [key m] (and (contains? m key) (nil? (key m))))","problem":134,"user":"4eaa47bc535d7eef30807309"},{"code":"#(and(contains? %2 %)(nil?(%2 %)))","problem":134,"user":"5086ca15e4b004985b776e62"},{"code":"(fn [key m]\n  (and (contains? m key)\n       (nil? (key m))\n  )\n)","problem":134,"user":"4f8c4ee8e4b02e764a0a5194"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= (k m) nil)\n    false)\n  )","user":"50f89404e4b0aafb827eb204"},{"code":"(fn [x y] (if (contains? y x)(case (y x) nil true false)false))","problem":134,"user":"5190772de4b09156e89b2a0a"},{"code":"(fn seek[x m]\n  (nil? (m x \"notFound\")))","problem":134,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"(fn [k m]\n  (and\n    (nil? (m k))\n    (contains? m k)\n))","problem":134,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":134,"code":"(fn [k m] \n  (let [ks (into #{} (keys m))]\n    (and (contains? ks k) (nil? (k m)))))","user":"57d418b4e4b0bd073c20239a"},{"problem":134,"code":"(fn[k,m] (if (not (contains? m k))\n  false\n  (= (k m) nil) ) )","user":"57e3d30be4b0bfb2137f5aab"},{"problem":134,"code":"(fn read-map [k m]\n    (and\n     (= nil (k m))\n     (= (get m k false) nil)) \n    )","user":"5522a795e4b0882d96d091a7"},{"problem":134,"code":"(fn [ k col] (and (contains? col k) (= nil (col k))))","user":"5423dc6ae4b01498b1a71ad5"},{"problem":134,"code":"#(= nil (%2 %1 \"No\"))","user":"60e746bbe4b042f8ce8815a7"},{"problem":134,"code":"(fn nil-key [k m]\n  (if (and (some #(= % k) (keys m))\n           (nil? (get m k)))\n    true\n    false))","user":"5b975c6ee4b0c0b3ffbd4a91"},{"problem":134,"code":"(fn [n f-map] (and (contains? f-map n) (= (n f-map) nil)))","user":"571d80c7e4b0145328a7627e"},{"code":"(fn has-nil[key a-map]\n   (if (contains? a-map key)\n       (= nil (a-map key))\n        false)\n )","problem":134,"user":"52763696e4b03e8d9a4a74d7"},{"problem":134,"code":"(fn [k m] (= nil (get m k \"m\")))","user":"5441f5e8e4b032a45b869375"},{"code":"(fn mn [k m] (every? identity [(contains? m k) (= nil (m k))]))","problem":134,"user":"50f84d85e4b0aafb827eb1f7"},{"problem":134,"code":"#(contains? (set %2) [%1 nil])","user":"563536f8e4b0bfe05bf117c5"},{"problem":134,"code":"(fn[k m] \n  (cond (not ((apply hash-set (keys m)) k)) false\n        (m k) false\n        :else  true))","user":"4e1e89a2535d04ed9115e809"},{"code":"(fn [ky mp]\n  (and (contains? mp ky) (nil? (ky mp))))","problem":134,"user":"503e46cee4b06c4e0e1fa264"},{"problem":134,"code":"#(if (= nil (get %2 % \"nil\")) true false)","user":"55d1a721e4b0e31453f64a47"},{"problem":134,"code":"#(nil? (%2 %1 5))","user":"583d7508e4b089d5ab817d9b"},{"problem":134,"code":"(fn get-nil\n  [k m]\n  (if (and (= (get m k) nil) (contains? m k))\n    true\n    false\n    )\n  )","user":"56686edce4b04acd4f672dea"},{"problem":134,"code":"(fn [k v] \n  (and \n   (contains? v k) \n   (nil? (k v))))","user":"4fafed2be4b081705acca25c"},{"problem":134,"code":"#(if(contains? %2 %1)(nil?(%2 %1))(do false))","user":"571a31e3e4b07c98581c3b47"},{"code":"#(and (contains? %2 %1) (nil? (get %2 %1)))","problem":134,"user":"4eb01df4535d7eef30807337"},{"code":"(fn [x y] (cond (contains? y x) (nil? (get y x))\n    :else false))","problem":134,"user":"52016690e4b0b2e020a18f0f"},{"problem":134,"code":"#(and(contains? %2 %1) (not (get %2 %1)))","user":"5c486dece4b0e06e1360a3c0"},{"code":"(fn keynil [k h]\n  (if (contains? h k)\n    (if (= nil (k h)) true false)                                                                      false\n    )\n  )","problem":134,"user":"5195b8cce4b04c0af7ff3c08"},{"problem":134,"code":"(fn my_nil [key map] (if (contains? map key)\n                       (= nil (get map key))\n                       false))","user":"5800036fe4b0a837a8b30c31"},{"problem":134,"code":"(fn dameK [x mapa]\n  (let [var (get mapa x \"nil\")]\n    (if (nil? var)\n      true\n      false)))","user":"54775973e4b0c51c1f4d72b1"},{"problem":134,"code":"(fn [key coll]\n  (if (contains? coll key)\n    (= nil (coll key))\n    false\n  ))","user":"5a2e39fce4b09cafd31c7f77"},{"code":"(fn [k l] (not (l k 0)))","problem":134,"user":"525efc76e4b0cb4875a45dbd"},{"code":"#(and (contains? %2 %1)(nil?  (get %2 %1) ))","problem":134,"user":"52dced9de4b09f7907dd13d7"},{"code":"#(and(contains? %2 %1)(nil?(%1 %2)))","problem":134,"user":"4edeac6b535d10e5ff6f533a"},{"code":"(fn [key map] \n  (if (and (nil? (key map)) (key (set (keys map)))) true false))","problem":134,"user":"4e6dc95a535d5021c1a895f1"},{"code":"(fn [k m]\r\n   (if (contains? m k) (nil? (get m k)) false)\r\n )","problem":134,"user":"510a6bece4b06956752d35af"},{"code":"(fn [k m] (and (contains? m k)(not (k m))))","problem":134,"user":"52153bdde4b0961f15ac4daa"},{"problem":134,"code":"(fn [k m]\n  (let [v (get m k :missing)]\n    (and (not= v :missing) (nil? v))))","user":"55fee5e4e4b00f4cabc5765a"},{"code":"#(and \n    (contains? %2 %1) \n    (nil? (get %2 %1))\n  )","problem":134,"user":"4e93600b535dbda64a6f6b0e"},{"code":"(fn [k m]\n  (and (nil? (k m)) (contains? m k)))","problem":134,"user":"4f6d23cde4b07046d9f4efc6"},{"problem":134,"code":"(fn [k m] (let [res (and (contains? m k) (= (m k) nil))] res))","user":"5227eacee4b0186687e23a5e"},{"code":"(fn [key coll]\n  (if (contains? coll key)\n    (if (nil? (key coll))\n      true\n      false)\n    false))","problem":134,"user":"4e726914535d5021c1a89661"},{"problem":134,"code":"#(nil? (% %2 :okay))","user":"50ec409ce4b04edc33777045"},{"code":"(fn [k m]\n  (and (not (nil? (some (set [k]) (keys m)))) (nil? (k m))))","problem":134,"user":"4dc29a1d535d020aff1edf96"},{"code":"(fn [k m] (and (contains? m k) (= (k m) nil)))","problem":134,"user":"4f2d5246e4b0d6649770a059"},{"code":"(fn [x y] \n  (if (contains? y x)\n    (if (= nil (x y)) true false)\n  false\n  )\n)","problem":134,"user":"50644f3ee4b007509339a589"},{"code":"#(nil? (%1 %2 :true))","problem":134,"user":"4e7dec83535db169f9c796f3"},{"code":"(fn [k coll] (and (contains? coll k) (= nil (coll k))))","problem":134,"user":"50da34e4e4b0f31830755b3c"},{"problem":134,"code":"(fn [k m]\n    (and\n      (contains? m k)\n      (nil? (m k))))","user":"58ec1e63e4b056aecfd47d54"},{"code":"(fn includes? [k m]\n  (if (contains? m k)\n    (= (get m k) nil)\n    false\n  )\n)","problem":134,"user":"5074b97ae4b054001656acd6"},{"problem":134,"code":"(fn [x y] (if (= nil (get y x false)) true false))","user":"56092a8de4b0053d1b86c7da"},{"problem":134,"code":"(fn\n  [k m]\n  (if (and (contains? m k) (= (m k) nil))\n    true\n    false))","user":"56a79421e4b07966d5a8a05c"},{"code":"#(and (= (%1 %2) nil)\n      (contains? %2 %1))","problem":134,"user":"536e0930e4b0fc7073fd6e66"},{"problem":134,"code":"(fn is_key_nil? \n  [k dict]\n  (= (get dict k :no_key) nil ))","user":"561eb82fe4b064ca9f4b16c7"},{"problem":134,"code":"(fn [k m]\n  (and (nil? (k m))\n       (= 1 (count (filter #(= k %) (keys m))))))","user":"5603c784e4b04bb52996e1c2"},{"problem":134,"code":"(fn [key map]\n  (= (get map key :nf) nil))","user":"55f85b93e4b03cbcff9738ae"},{"problem":134,"code":"(fn [k m] (nil? (get m k :dummy)))","user":"54aec375e4b09f271ff37cf9"},{"code":"(fn [x, y] \n  (if \n    (and (contains? y x) (= (get y x) nil))\n    true \n    false\n    )\n  )","problem":134,"user":"50e13dd6e4b084616e11c668"},{"problem":134,"code":"(fn [k m]\n    (if (contains? m k)\n      (if (= (k m) nil)\n        true\n        false)\n      false))","user":"5fb9b704e4b03f550f44822b"},{"problem":134,"code":"(fn aa [k m] (and (= (get m k) nil) (contains? m k)))","user":"545d5c3be4b01be26fd7466d"},{"problem":134,"code":"#( \n  if (and (nil? (%1 %2)) (some (fn [z] (= z %1)) (keys %2)))\n    true\n    false)","user":"561f27a1e4b064ca9f4b16ca"},{"problem":134,"code":"(fn [x y] (if (contains? y x) (if (x y) false true) false))","user":"5886e8bde4b0f1effa3b76ea"},{"problem":134,"code":"(fn [x xs]\n  (if (contains? xs x)\n    (if (nil? (x xs))\n      true\n      false)\n    false))","user":"53d032ace4b00fb29b221306"},{"code":"(fn nil-val? [a b] (and (contains? b a) (nil? (b a))))","problem":134,"user":"50ed9e8de4b06330c1f87c44"},{"problem":134,"code":"(fn [x seq] (if (contains? seq x)\n                  (= nil (seq x))\n                  false))","user":"578b9978e4b0ebec4cfb754c"},{"code":"(fn judge\n  [k m]\n  (not (get m k \"missing\")))","problem":134,"user":"5202c9b6e4b030ee0c5b2701"},{"code":"(fn nil-key? [x m]\n  (and (contains? m x) (nil? (get m x))))\n\n;cria uma funcao que verifica o mapeamento [x m] e depois verifica se o mapeamento contem a chave e por ultimo, verifica se ela é nil.","problem":134,"user":"50c16203e4b096f585049c3c"},{"code":"(fn [x y]\n  (and (contains? y x)\n       (nil? (get y x))))","problem":134,"user":"4f036fad535dcb61093f6ac7"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? m k) (= (get m k) nil)) true false))","user":"53d2afede4b00fb29b221321"},{"problem":134,"code":"#(nil? (get %2 %1 ::missing))","user":"595b864ee4b066ee0a44afdc"},{"code":"(fn [x m]\n  (and (contains? m x)(nil? (m x))))","problem":134,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":134,"code":"(fn is-zero-value? [tgt-key tgt-hash]\n  (and\n    (contains? tgt-hash tgt-key)\n    (nil? (tgt-hash tgt-key))))","user":"5f2aa09ce4b033932238a655"},{"code":"(fn [k m]\n  (if (and (contains? m k) (= nil (k m)))\n    true\n    false))","problem":134,"user":"52d51535e4b09f7907dd133a"},{"problem":134,"code":"#(if (nil? (get %2 %1 \"Not found\")) true false)","user":"5cc6b681e4b0ccb061962828"},{"problem":134,"code":"(fn testit\n  [x, seq]\n    (and (contains? seq x) (not (get seq x)))\n  )","user":"602f56c5e4b0d5df2af22297"},{"code":"#( = (get-in %2 [%1] 0) nil )","problem":134,"user":"4ed845a8535d10e5ff6f52f8"},{"code":"#(if (contains? %2 %1) (if (= (%1 %2) nil) true false) false)","problem":134,"user":"4f28d266e4b0d6649770a01c"},{"code":"(fn [elem themap] (if (contains? themap elem)\n                    (= nil (themap elem))\n  \t\t\t\t\tfalse))","problem":134,"user":"50f089d1e4b0c5f4fa5ddb67"},{"code":"(fn [k m]\n  (let [v (get m k \"NF\")]\n    (= nil v)))","problem":134,"user":"4e99819a535dbda64a6f6b66"},{"code":"#(if (contains? %2 %)\n   (if (% %2)\n     false\n     true)\n   false)","problem":134,"user":"50435689e4b034ff00315d21"},{"problem":134,"code":"(fn [k, m] (= nil (get m k false)))","user":"57112a57e4b09c608db70442"},{"problem":134,"code":";(fn [k m] (and (contains? m k) (nil? (k m))))\n#(nil? (%2 %1 true))","user":"5e3071abe4b05b4b01516213"},{"problem":134,"code":"(fn cc [chiave mappa]\n  (if (contains? mappa chiave)\n    (nil? (get mappa chiave))\n    false))","user":"57da7593e4b0bd073c202410"},{"code":"#(= (get %2 % \"_nil\") nil)","problem":134,"user":"50ef3e5de4b0a78662fa2652"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (if (nil? (%1 %2))\n     true\n     false)\n   false)","user":"58fd1ed5e4b0438e51c2cfa4"},{"problem":134,"code":"(fn bam[key map]\n  (if (contains? map key )\n    (nil? (map key)) false))","user":"59395adfe4b02506e01a29fb"},{"problem":134,"code":"(fn [chave mapa] (and (contains? mapa chave) (nil? (get mapa chave))))","user":"605f92bae4b03746e80ebf62"},{"code":"(fn [k x] (if (and (contains? x k) (= nil (x k))) 'true 'false))","problem":134,"user":"534e8e0ce4b084c2834f4ab6"},{"problem":134,"code":"(fn [k, m] \n  (if (contains? m k)\n    (nil? (m k))\n    false))","user":"546a6e9fe4b00cfc9eacc157"},{"problem":134,"code":"(fn [xkey xmap]\n  (= nil (xkey xmap :default)))","user":"56038f34e4b04bb52996e1bc"},{"code":"(fn [x y]\n  (and\n    (contains? y x)\n    (nil? (x y))))","problem":134,"user":"4ef5c847535dced4c769f249"},{"code":"(fn [key map] (and (contains? map key) (= nil (get map key))))","problem":134,"user":"4ee8092f535d93acb0a66875"},{"problem":134,"code":"(fn [k m]\n  (let [v (m k)]\n    (and (nil? v)\n         (contains? m k))))","user":"5426a59ee4b01498b1a71b1b"},{"code":"#(if (contains? %2 %)\n   (nil? (get %2 %))\n   false)","problem":134,"user":"52527192e4b0541d1855b8af"},{"problem":134,"code":";; #(and (contains? %2 %) (nil? (%2 %)))\n#(nil? (%2 % true))","user":"5a544eeee4b05d388ecb6c24"},{"problem":134,"code":"; arguements [key map]\n; true if\n;\tmap contains key, and value is nil\n\n(fn [k, m] (and (contains? m k) (= (k m) nil)))","user":"5982d82be4b021a7a535fe05"},{"code":"(fn [v col]\n  (and (contains? col v) (nil? (v col)))\n)","problem":134,"user":"4f4aa932e4b0d56e7bb92c14"},{"problem":134,"code":"#(if (nil? (find %2 %1))\n    false\n    (nil? (%1 %2)))","user":"54dce573e4b024c67c0cf78a"},{"problem":134,"code":"(fn [k m] (and (contains? m k)(nil? (k m))))","user":"56d439d4e4b0ea9b8538f7b6"},{"code":"(fn [k coll]\n            (and (contains? coll k)\n                 (nil? (k coll))))","problem":134,"user":"4e73debb535d7a570dd295b7"},{"problem":134,"code":"(fn [k m]\n  (and (not (empty? (select-keys m [k]))) (nil? (k m))))","user":"5783c505e4b0ebec4cfb74bc"},{"code":"(fn [key struct] (and (contains? struct key) (nil? (struct key))))","problem":134,"user":"4e6698b9535d8ccf87e9fe7a"},{"problem":134,"code":"(fn [x m] (= nil (get m x :not-found)))","user":"55deeface4b050e68259b3ea"},{"code":"(fn [a b] (= :a a))","problem":134,"user":"5336a339e4b0e30313ee6c7d"},{"code":"(fn [k m] \n  (and \n   \t(= nil (m k)) \n    (not (nil? (find m k)))))","problem":134,"user":"516018dae4b0e2be8aa20be2"},{"problem":134,"code":"(fn [key map]\n  (and (contains? map key)\n       (= (get map key) \n          nil)))","user":"5e9364f0e4b0fbed045a37f4"},{"problem":134,"code":"(fn [key map]\n  (and\n   (contains? map key)\n   (nil? (key map))))","user":"56f02c90e4b04a395b9a0472"},{"problem":134,"code":"(fn [k map] \n  (if (and (some #(= k (first %)) map) (= (k map) nil))\n    true\n    false))","user":"5787df42e4b0ebec4cfb7512"},{"code":"(fn [key map]\n  (if (contains? map key) (nil? (get map key)) false))","problem":134,"user":"5152bc4ee4b001f44f99bfef"},{"problem":134,"code":"(fn [key map] (and (contains? map key)(= (get map key) nil)))","user":"5430bd01e4b0dad94371f2de"},{"problem":134,"code":"#(if (and (= (%1 %2) nil) (contains? %2 %1)) true false)","user":"5862a8a9e4b0f14aab7c880f"},{"problem":134,"code":"#(= true (= (get %2 %1 :blank) nil))","user":"5da7176ae4b000c986472c13"},{"problem":134,"code":"(fn [_key _map] \n  (= (_map _key true) nil))","user":"567be591e4b05957ce8c61ab"},{"code":"(fn [el m]\n  (= nil\n     (get m el :not-found)))","problem":134,"user":"50119c07e4b028e9d38b393f"},{"problem":134,"code":"#(and (contains? %2 %) (= nil (get %2 %)))","user":"60471241e4b02d28681c77c9"},{"problem":134,"code":"(fn [kw mp]\n  (and (-> (kw mp) nil?)\n       (contains? mp kw)))","user":"601a2f59e4b0bf4ca6b10925"},{"code":"(fn [k m]\n  (if (and (= nil (k m)) (contains? m k))\n    true\n    false))","problem":134,"user":"531016d0e4b08068f379ecd1"},{"code":"(fn[a s](and (contains? s a) (nil? (a s))))","problem":134,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":134,"code":"(fn [a b] (nil? (b a \"xx\")))","user":"4e70eae1535d5021c1a89642"},{"problem":134,"code":"(fn [nil-key nil-map]\n  (if (contains? nil-map nil-key)\n    (if (nil? (nil-key nil-map))\n      true\n      false)\n    false))","user":"5da9662ce4b000c986472c30"},{"code":"(fn test [k m] (if (nil? (k m false)) true false))","problem":134,"user":"511b233ae4b07ab9ec456180"},{"problem":134,"code":"(fn [a b] (if (nil? (get b a false)) true false))","user":"4f963487e4b0dcca54ed6cd9"},{"problem":134,"code":"(fn [k l]\n  (and\n    (contains? l k)\n    (nil? (l k))))","user":"53f11139e4b0742d9025b0d8"},{"code":"(fn [key map]\n  (if (and (contains? map key) (= nil (get map key)))\n    true\n    false))","problem":134,"user":"53790dc6e4b06839e8705e4c"},{"code":"(fn which [k m]\n   (if (contains? m k)\n     (nil? (m k))\n     false))","problem":134,"user":"527ae911e4b03e8d9a4a756b"},{"code":"#( nil? (get %2 %1 1))","problem":134,"user":"51e23b80e4b01e519814642b"},{"problem":134,"code":"(fn\n  [idx {value1 :a value2 :b}]\n  (if (contains? {:a value1 :b value2} idx)\n    (if (= nil (get-in {:a value1 :b value2} [idx]))\n      true\n      false)\n    false))","user":"55b3c03ee4b01b9910ae2975"},{"code":"(fn\n  [n coll]\n    (and (contains? coll n)\n(nil? (coll n))))","problem":134,"user":"4ff520dee4b0678c553fc367"},{"problem":134,"code":"(fn  nil-key?\n  [k m]\n  (if (contains? m k)\n    (nil? (m k))\n    false))","user":"59971dcbe4b07157cc8daacb"},{"problem":134,"code":"(fn [k m] (if (nil? (k m :not-nil)) true false))","user":"54d03026e4b018d918be98de"},{"problem":134,"code":"(fn is-nil [k m]\n  (if (and (contains? m k) (nil? (get m k)))\n    true\n    false))","user":"57fa54c3e4b0d3187e900960"},{"problem":134,"code":"(fn [ky mp] (and (= nil (get mp ky)) (contains? mp ky)))","user":"6023119de4b0d5df2af2220a"},{"code":"(fn [k m]\n  (nil? (get m k \"foo\")))","problem":134,"user":"53613db8e4b0243289761e41"},{"code":"#(nil? (%2 % 5))","problem":134,"user":"513dcc1ce4b0825f97f7f964"},{"code":"(fn [k m] (nil? (m k 0)))","problem":134,"user":"50a768e6e4b090657f4a5cd9"},{"code":"(fn [key map]\n(and \n  (contains? map key) \n  (nil? (get map key)))\n)","problem":134,"user":"4f8bb50ce4b02e764a0a5181"},{"problem":134,"code":"(fn [k col]\n  (and\n    (contains? col k)\n    (nil? (k col))))","user":"5382b433e4b06839e8705ed7"},{"problem":134,"code":"#(and ( contains? %2 %1) (= nil (get %2 %1)))","user":"54c165e9e4b0ed20f4ff6f23"},{"problem":134,"code":"(fn [k l]\n  (if (contains? l k)\n    (nil? (k l))\n    false))","user":"513621a1e4b04ac1f358dd4c"},{"problem":134,"code":"(fn [thekey themap] \n  (if (nil? (get themap thekey \"missing\"))\n    true\n    false\n  )\n)","user":"562d6385e4b0a45d2ff8301b"},{"code":"(fn [a b]\n  (and\n  \t(contains? b a)\n   \t(nil? (b a))\n  )\n)","problem":134,"user":"527c0388e4b03e8d9a4a75a6"},{"problem":134,"code":"(fn [a-value a-map] (and (contains? a-map a-value) (nil? (a-value a-map))))","user":"536fd48be4b0fc7073fd6e88"},{"code":"#(and (nil? (%1 %2)) (not (= false (%1 %2 false))))","problem":134,"user":"4ecf5ee1535d44c135fd68b7"},{"problem":134,"code":"(fn [k m]\n  (if (nil? (get m k :not-found))\n    true\n    false))","user":"53bc10f5e4b047364c04450d"},{"problem":134,"code":"#(if (not (contains? %2 %1))\n   false\n   (not (boolean (%1 %2))))","user":"5883584ae4b0f1effa3b7674"},{"problem":134,"code":"(fn [k m]\n        (cond \n              (and (contains? m k) (nil? (m k)) ) true\n              :else false\n              ))","user":"56df6351e4b0ca2494a095f3"},{"problem":134,"code":"(fn nil-key                           \n    [thiskey thismap]                   \n    (if (and (= (get thismap thiskey) nil) (contains? thismap thiskey))   \n         true                           \n         false))","user":"5ac35d00e4b0e27600da7712"},{"code":"(fn [key map]\n  (if (contains? map key)\n    (= nil (map key))\n    false))","problem":134,"user":"4e8dc25f535d65386fec213a"},{"problem":134,"code":"(fn [key map]\n  (if (and (contains? map key) (nil? (key map)))\n    true\n    false))","user":"57ff8770e4b0a837a8b30c21"},{"problem":134,"code":"(fn [key-val dict]\n  (if (contains? dict key-val)\n  \t(= (dict key-val) nil)\n  \tfalse))","user":"607d6bc1e4b03d835a6eaecc"},{"code":"#(= nil (%2 %1 -))","problem":134,"user":"4ebbf772535dfed6da9c6d76"},{"code":"(fn [x y] (and (contains? y x) (= nil (get y x))) )","problem":134,"user":"52f0f3e5e4b05e3f0be25ee7"},{"code":"#(nil? (%2 %1 :else))","problem":134,"user":"4edecdae535d10e5ff6f533c"},{"code":"#(let [[k v :as x] (find %2 %1)] (and (not (nil? x)) (nil? v)))","problem":134,"user":"50563ae2e4b0ce54f56f0405"},{"problem":134,"code":"(fn \n  [key mapp]\n  (and (contains? mapp key)\n       (= nil (key mapp))))","user":"5be9ad9be4b0f319e2d7ec76"},{"code":"(fn [k m] (let [[k v] (find m k)] (not (or (nil? k) v))))","problem":134,"user":"50c9e5e3e4b0a409464667d7"},{"code":"#(= nil (get %2 % 1))","problem":134,"user":"4ee7ef87535d93acb0a66872"},{"code":"(fn [x y] (nil? (get y x 3)))","problem":134,"user":"528f1057e4b0239c8a67aeec"},{"code":"(fn [k v]\n\t(and\n\t\t(contains? v k)\n\t\t(nil? (get v k))\n\t)\n)","problem":134,"user":"51d59859e4b01da06753aa92"},{"code":"(fn [k m] \n  (if (and (contains? m k) (nil? (get m k)))\n    true\n    false))","problem":134,"user":"5216f8dce4b082aa80a88c67"},{"code":"(fn [x c]\n   (and (nil? (x c)) (contains? c x))\n   )","problem":134,"user":"5191045ee4b0f8ef0be96bf3"},{"problem":134,"code":"(fn ([x m] (and (contains? m x) (= (get m x) nil))))","user":"5c4f7f5ce4b0f9f7a8770eaa"},{"code":"(fn [key keyvals]\n  (= (contains? keyvals key) (nil? (key keyvals))))","problem":134,"user":"50a191f4e4b08df8156e9e6a"},{"problem":134,"code":";(fn [k m] (and (contains? m k) (= nil (k m))))\n(fn [k m] (and (contains? m k) (nil? (k m))))","user":"5540fe42e4b0a04f7929950a"},{"code":"#(not (get-in %2 [%1] true))","problem":134,"user":"4ff4f5c4e4b0678c553fc362"},{"problem":134,"code":"(fn [k m] (if (contains? m k)\n            \t(if (nil? (m k)) true false)\n            \tfalse))","user":"554c83a2e4b0a04f792995a7"},{"problem":134,"code":"(fn [x y] (if (and (contains? y x) (= nil (x y)) ) true false))","user":"570306cae4b08d47c97781ec"},{"problem":134,"code":"(fn nil-val? [k l] \n         (and (contains? l k) \n              (nil? (l k))))","user":"5361d423e4b0243289761e49"},{"problem":134,"code":"#(and (= %1 :a) (nil? (%1 %2)))","user":"5b083513e4b0cc2b61a3bdb4"},{"problem":134,"code":"(fn [e inmap] (and (contains? inmap e) (= nil (get inmap e))))","user":"55ce2b6de4b0e31453f64a26"},{"problem":134,"code":"(fn [key map] (if (contains? map key) ( = (get map key) nil) false ))","user":"584b8a55e4b089d5ab817f01"},{"code":"(fn [k m]\n  (and (contains? m k)\n           (= (k m) nil)))","problem":134,"user":"5140c505e4b049dea086df40"},{"code":"(fn [x, y] (= nil (get y x 3)))","problem":134,"user":"4fcca4f5e4b0ee37620e1867"},{"problem":134,"code":"(fn f [key map]\n  (nil? (get map key false)))","user":"5681afaae4b0945ebc182a87"},{"code":"#(if(=(%2 % \"none\")nil)true false)","problem":134,"user":"527d59f9e4b0757a1b171382"},{"problem":134,"code":"(fn [k entry]\n  (and (contains? entry k) (= (get entry k) nil)))","user":"5f96fa49e4b0715f5002d7e9"},{"code":"(fn [k coll] \n   (if (contains? coll k)\n     (nil? (coll k))\n     false\n     ))","problem":134,"user":"52721a11e4b03e8d9a4a7413"},{"code":"#(= nil (get %2 %1 666))","problem":134,"user":"5057f59ce4b06522596eba73"},{"code":"(fn ank [k m]\r\n  (boolean (and (find m k)\r\n                (nil? (m k)))))","problem":134,"user":"4fcc6cb3e4b0ee37620e1861"},{"problem":134,"code":"(fn [k m] (nil? (get m k :nothing)))","user":"4f435ee8e4b0d7d3c9f3fd1f"},{"code":"(fn [k m](and (contains? m k) (= (m k) nil)))","problem":134,"user":"4e0e0529535d04ed9115e7b9"},{"problem":134,"code":"(fn [e l]\n  (and \n   (contains? l e)\n   (nil? (e l))))","user":"594263cbe4b060784b3b790a"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (= (k m) nil)\n    false))","problem":134,"user":"4ee79e89535d93acb0a6686a"},{"code":"(fn [my-key my-map]\n   (nil? (my-key my-map :not-found)))","problem":134,"user":"4ede0511535d10e5ff6f5330"},{"problem":134,"code":"(fn [k mp] (and (contains? mp k)\n                (= nil (mp k))))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":134,"code":"(fn [entry mymap] (nil? (get mymap entry 0)))","user":"5f08d0c5e4b0cf489e8d7f62"},{"code":"(fn [k m] (if (and (contains? m k) (= nil (k m))) true false))","problem":134,"user":"50813b88e4b09292fd669443"},{"problem":134,"code":"(fn [k coll] (if (contains? coll k) (nil? (k coll)) false))","user":"545bc5a8e4b01be26fd74658"},{"problem":134,"code":"(fn x [key map] (= (get map key :NO) nil))","user":"55ee84c0e4b0121d4835fdf0"},{"problem":134,"code":"(fn [x xm] \n  (and (contains? xm x) (nil? (get xm x)))\n  )","user":"5991eec7e4b0866487ed0d6e"},{"code":"(fn [e m] (and (contains? m e) (= (m e) nil)))","problem":134,"user":"52a23af1e4b04e0c58e87beb"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (if (= nil (get %2 %1))\n     true false)\n   false)","user":"4f925791e4b0dcca54ed6cac"},{"problem":134,"code":"(fn [a, b] (and (contains? b a) (nil? (a b))))","user":"5dd25ca8e4b0948ae9d9ad55"},{"problem":134,"code":"; Set default value to 0 when looks for unexisted key\n#(-> (% %2 0) (nil?))","user":"551d019fe4b07993ea3788e6"},{"code":"#(and (.contains (keys %2) %1) (= nil (%2 %1)))","problem":134,"user":"4f045d0e535dcb61093f6bbc"},{"problem":134,"code":"(fn [key,map] (and (contains? map key) (nil? (get map key))))","user":"57597fade4b02ea11479931d"},{"problem":134,"code":"(fn [k m]\n   (and\n     (contains? m k)\n     (= nil (k m))))","user":"53d10553e4b00fb29b22130f"},{"code":"(fn [key map]\n  (let [entry (find map key)\n        value (if (nil? entry) :nope (entry 1))]\n    (nil? value)))","problem":134,"user":"4fceef7ae4b03432b189f40a"},{"problem":134,"code":"#(if (contains? %2 %1)\n    (if (= (%1 %2) nil)\n      true\n      false\n      )\n    false\n   \n  \n  )","user":"5885e90de4b0f1effa3b76c5"},{"problem":134,"code":"(fn [k map1] \n  (if (contains? map1 k)\n    (= (k map1) nil) false\n    ) \n)","user":"56e1122fe4b03a7c14b85a20"},{"problem":134,"code":"defn","user":"5c5d8c04e4b01df32ab732b4"},{"problem":134,"code":"(fn [x y] (= nil (get y x x)))","user":"556cb481e4b09a3098a52501"},{"code":"(fn [k m] \n  (if (and (nil? (k m)) \n           (not (empty? (filter #(= k %)  (keys m))))) \n      true \n      false))","problem":134,"user":"4ef0a39b535dced4c769f20d"},{"code":"#(not(%2%1 1))","problem":134,"user":"4f296a80e4b0d6649770a02a"},{"problem":134,"code":"(fn [llave mapa] (and (contains? mapa llave) (= nil (llave mapa))))","user":"603e899ee4b0d5df2af22313"},{"code":"(fn [key map]\n  (if (contains? map key)\n    (if (= (get map key) nil)\n      true\n      false)\n    false))","problem":134,"user":"4ef9b021535dced4c769f269"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k ) (nil? (k m))))","user":"537e4432e4b06839e8705e9f"},{"problem":134,"code":"(fn [x the-seq]\n  (if (= nil (x the-seq))\n    (if (some true? (into [] (map #(= % x) (map key the-seq))))\n      true\n      false)    \t\n    false))","user":"573de63fe4b05c31a32c081c"},{"problem":134,"code":"(fn [k m] (-> (k m 3) nil?))","user":"56f59df1e4b046a417f92075"},{"problem":134,"code":"#(\n    if (and (contains? %2 %1) (not (get %2 %1)))\n    true\n    false)","user":"5fd361f2e4b07e53c2f3f04e"},{"problem":134,"code":"(fn [k m]\n    (and (contains? m k)\n         (nil? (k m))))","user":"551a21ece4b091ff45eda993"},{"problem":134,"code":"(comp nil? #(get %2 %1 :not-found))","user":"563cf9e5e4b0bfe05bf11844"},{"problem":134,"code":"(fn [a b] (and (contains? b a) (= (get b a) nil) ))","user":"563dfeffe4b0da801c4e4663"},{"problem":134,"code":"(fn [k coll]\n  (if (contains? coll k)\n    (if (= nil (get coll k))\n      true\n      false)\n    false)\n )","user":"5564709ee4b0c656e3ff1807"},{"problem":134,"code":"(fn [key coll] (if  (contains? coll key)\n                      (= (get coll key) nil)\n                      (true? false)))","user":"570c5cb7e4b0b0fb43fd06c8"},{"code":"(fn [in-key in-map]\n  (let [entry (find in-map in-key)]\n    (not\n      (or\n        (nil? entry)\n        (val entry)))))","problem":134,"user":"514e9a14e4b019235f6c0597"},{"code":"(fn [k m](and (contains? m k) (nil? (get m k))))","problem":134,"user":"4eb80ce6535d7eef3080737d"},{"code":"(fn [x y] (and (nil? (get y x)) (contains? y x)))","problem":134,"user":"516dc88ae4b046df6fbb76a1"},{"problem":134,"code":"(fn\n  [k m]\n  (if (contains? m k)\n    (nil? (get m k))\n    false\n  )\n)","user":"55a5e2f7e4b0acc240e31550"},{"problem":134,"code":"#(nil? (get %2 %1 :undefined))","user":"5eb1c786e4b00a66d4a95201"},{"code":"(fn [k m]\n  (if (not (contains? m k))\n    false\n    (nil? (get m k))))","problem":134,"user":"4fd769a1e4b0dab7d829f382"},{"code":"(fn [k m] (and (contains? m k) (nil? (m k))))","problem":134,"user":"4e9fd521535d7eef3080729a"},{"code":"#(let [key %1\n       map %2]\n   (if (contains? map key) \n     (if (get map key) false true)\n     false))","problem":134,"user":"51bf0ccee4b013aa0d74b811"},{"problem":134,"code":"#(not (%1 %2 %1))","user":"52ba2639e4b07a9af57922cb"},{"problem":134,"code":"(fn\n  [k m]\n  (if (contains? m k)\n    (= (k m) nil)\n    false))","user":"556e3b73e4b09a3098a52514"},{"code":"(fn [k coll]\n  (and (contains? coll k) (= nil (k coll))))","problem":134,"user":"4f159ea6535d64f603146445"},{"code":"#(nil? (%1 %2 :key-not-found))","problem":134,"user":"52561be5e4b0541d1855ba08"},{"problem":134,"code":"(fn isnil [k m] (and (contains? m k) (nil? (k m))))","user":"55a03d7de4b0acc240e314f4"},{"code":"(fn [key map] \n  (if (contains? map key) \n    (= (get map key) nil)\n    false\n  )\n)","problem":134,"user":"4f28eb85e4b0d6649770a01d"},{"problem":134,"code":"(fn key-and-nil\n  [a-key a-map]\n  (if (and (contains? a-map a-key) (= (a-map a-key) nil))\n    true\n    false))","user":"5414b7c4e4b01498b1a719ed"},{"code":"(fn [k coll]\n  (and (contains? coll k) (nil? (coll k))))","problem":134,"user":"4f57c913e4b0a7574ea7183f"},{"code":"(fn [x y]\n  (and (nil? (y x)) (contains? y x)))","problem":134,"user":"4ec56b5b535d6d7199dd369f"},{"problem":134,"code":"(fn\n  [key-to-search map-to-search]\n  (if (contains? map-to-search key-to-search)\n    (if-not (key-to-search map-to-search)\n      true\n      false)\n    false))","user":"57972c9ee4b039eba2ecb0f2"},{"code":"(fn [x y]\n  (if (contains? y x)\n    (= (x y) nil)\n    false\n  )\n)","problem":134,"user":"4ffb5d16e4b0678c553fc3d0"},{"problem":134,"code":"(fn [k m] (= true (and (some #{k} (set (keys m))) (nil? (k m)))))","user":"502ea967e4b06efe12e8cc76"},{"problem":134,"code":"(fn [x fmap] (if (and (contains? fmap x) (nil? (fmap x))) true false))","user":"53cdb2c4e4b00fb29b2212e5"},{"problem":134,"code":"#(and (contains? %2 %1) (=(%1 %2) nil))","user":"52bf78cde4b07a9af5792339"},{"problem":134,"code":"#(= nil (get %2 % :f))","user":"53d5a63be4b0e771c3025449"},{"problem":134,"code":"#(= true (nil? (% %2)) (contains? %2 %))","user":"54db3d82e4b024c67c0cf75f"},{"problem":134,"code":"(fn [k m]\n  (if (and\n       (contains? m k)\n       (-> m k nil?))\n    true\n    false))","user":"4fec08e8e4b0681fd128dc9d"},{"code":"(fn [a-key a-map] \n  (and (vector? (find a-map a-key)) (nil? (a-key a-map))))","problem":134,"user":"4fb7dfe3e4b081705acca2d5"},{"problem":134,"code":"(fn [ky mp] (if (contains? mp ky)\n                (nil? (get mp ky))\n              false))","user":"53e92aafe4b036ad0777e49a"},{"problem":134,"code":"(fn [k m] \n  (if (and (contains? m k) (nil? (get m k)))\n           true \n           false\n           )\n   )","user":"53e76bb2e4b036ad0777e47d"},{"problem":134,"code":"(fn solve [k m]\n  (and (contains? m k)\n       (nil? (k m))))","user":"60537cd1e4b04c8f2157d152"},{"problem":134,"code":"(fn [map key]\n  (let [entry (find key map)] \n    (and \n      (not (= entry nil)) \n      (= nil (get entry 1))\n    )\n  )\n)","user":"54d104a5e4b0e8a36923e5d9"},{"code":"(fn[x y] (and (contains? y x) (= (val (find y x)) nil)))","problem":134,"user":"4f563aece4b0a7574ea7181a"},{"problem":134,"code":"(fn [k kvcol] (nil? (kvcol k 0)))","user":"5922f8a9e4b026ae3852128f"},{"problem":134,"code":"(fn\n  [key hash]\n  (and\n    (contains? hash key)\n    (nil? (hash key))\n  )\n)","user":"563a30d7e4b0bfe05bf117f9"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? m k) \n           (= nil (k m))\n           ) true false))","user":"531c4af5e4b08068f379ed99"},{"code":"(fn [x y] (= nil (x y 1)))","problem":134,"user":"4ea0a7c7535d7eef308072ab"},{"problem":134,"code":"(fn [a b]\n  (and (contains? b a) (nil? (get b a)))\n  )","user":"5f693778e4b02876ed9fd03f"},{"problem":134,"code":"(fn [m k] (not (get k m :not-found)))","user":"560bb1f7e4b05f002753df20"},{"problem":134,"code":"(fn [k m] (and (nil? (get m k))  (contains? m k) ))","user":"5e94ff5fe4b0fbed045a37ff"},{"problem":134,"code":"(fn [index array]\n   (if (and (nil? (index array)) (contains? array index)) true false)\n   )","user":"5e7bb000e4b085ba37836e1d"},{"problem":134,"code":"(fn[x xs] (and (contains? xs x) (nil? (x xs))))","user":"5fae5441e4b08cb800c85afb"},{"problem":134,"code":"(fn check-nil [k m] (and (contains? m k) (nil? (k m))))","user":"575f9ac0e4b08062f99a4e83"},{"problem":134,"code":"#(if (and (contains? %2 %1) (= nil (%2 %1))) true false)","user":"54296802e4b01498b1a71b38"},{"problem":134,"code":"(fn [argkey argmap]\n  (and (contains? argmap argkey) (= nil (argkey argmap))))","user":"5191a763e4b0d428d29dc1b4"},{"code":"(fn [k m] (and\n  (contains? m k)\n  (nil? (k m))))","problem":134,"user":"4ed1f84f535d44c135fd68d3"},{"problem":134,"code":"(fn [a b]\n  (let [val (a b)]\n    (and (nil? val) (contains? b a))))","user":"5d323149e4b01671435dbce9"},{"code":"(fn [x y] \n  (if (contains? y x)\n    (= nil (x y)) \n    'false))","problem":134,"user":"4ef0b523535dced4c769f20e"},{"problem":134,"code":"(fn [k m] (if (contains? m k) (if (= (second (find m k))  nil) true false) false))","user":"5656e039e4b0f9d632dd84a3"},{"problem":134,"code":"(fn [k m]\n  (if (not (get m k 1))\n    true\n  \tfalse))","user":"59bac5c9e4b0a024fb6ae3ed"},{"code":"#(and (contains? %2 %) (= (%2 %) nil))","problem":134,"user":"4e904d9c535d65386fec2152"},{"problem":134,"code":"#(nil? \n  (if (contains? %2 %1)\n    (%1 %2)\n    false))","user":"5821160de4b04b46fc4b0f6c"},{"problem":134,"code":"; retrieve the value for the key\n; return T/F on nil?\n; report value of non-existent keys as \"missing\"\n\n(fn [x coll]\n   (nil? (get coll x \"missing\")))","user":"57c44053e4b05aa3c4741ccb"},{"problem":134,"code":"#(and (contains? %2 %1)\n      (= nil (%2 %1)))","user":"52b2f9cae4b0c58976d9acfb"},{"code":"#(nil? (%1 %2 \"missing\"))","problem":134,"user":"4fd11a93e4b04c3a95aa040a"},{"code":"(fn [key map]\n  (nil? (and (contains? map key) (map key))))","problem":134,"user":"4fe89efae4b07c9f6fd12c5b"},{"code":"(fn f [k m]\n  (and (contains? m k) (= (get m k) nil))\n  )","problem":134,"user":"4fa719c0e4b081705acca1bf"},{"problem":134,"code":"(fn [key map]\n               (if (contains? map key)\n                 (= nil (key map))\n                 false))","user":"571dd145e4b0145328a76283"},{"problem":134,"code":"(fn [k mp] (and (contains? mp k) (nil? (mp k))))","user":"543d89dfe4b032a45b869350"},{"code":"#(= nil (get %2 %1 :a))","problem":134,"user":"4f1bb9d8535d64f60314647d"},{"code":"(fn [k,m] (\n  if (contains? m k) \n  (nil? (m k))\n  false  ))","problem":134,"user":"4f03c039535dcb61093f6b5e"},{"code":"(fn [x y]\n  (nil? (get y x false)))","problem":134,"user":"528ce039e4b0239c8a67aebc"},{"code":"(fn [k m]\n  (if (contains? m k) (nil? (k m)) false))","problem":134,"user":"4f74fe77e4b0fbe0118ec552"},{"code":"(fn x\n  [k m]\n  (if (contains? m k) (= nil (get m k)) false))","problem":134,"user":"518c0f4ee4b0f028e99addf7"},{"problem":134,"code":"(fn [k m] (and (contains? m k) \n           (= nil (k m))))","user":"54010363e4b0de5c4184861d"},{"problem":134,"code":"(fn \n  [k mp]\n  (and\n    (nil? (k mp))\n    (contains? mp k)\n   )\n)","user":"558b49a9e4b027778923762a"},{"problem":134,"code":"(fn [kie dick]\n  (if (and (contains? dick kie)\n           (= nil (kie dick)))\n    true\n    false))","user":"54570dfae4b080a794c2c889"},{"problem":134,"code":"(fn [k m]\n   (if (contains? m k)  (nil? (m k)) false)\n  )","user":"5649615be4b0284900eef641"},{"code":"(fn [k h] (nil? (get h k 'oops)))","problem":134,"user":"4fca2a13e4b0ee37620e184d"},{"problem":134,"code":"(fn [k m] (= m (assoc m k nil)))","user":"530bf87ee4b02e82168697d5"},{"problem":134,"code":"(fn [k m] \n (and \n  (= nil (m k))\n  (contains? m k)\n )\n)","user":"5a40235fe4b0447ef91cc5c6"},{"code":"(fn [k m] (if-let [[_ v] (find m k)] (nil? v) false))","problem":134,"user":"4e6b3fc8535d8ccf87e9ff0f"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k) (= nil (get m k))  false))","user":"548e940fe4b0e286459a1225"},{"code":"(fn [k m] (nil? (get m k 1)))","problem":134,"user":"4e89ff3d535d3e98b802328a"},{"code":"(fn [x y] (nil? (get y x \"foo\")))","problem":134,"user":"504f3fa3e4b0a02f9cffde62"},{"problem":134,"code":"(fn [key coll] \n  \t(and \n     (contains? coll key) \n     (nil? (key coll))))","user":"4f580a9fe4b0a7574ea71844"},{"problem":134,"code":"(fn [k a-map]\n  (if (and (contains? a-map k) (nil? (k a-map)))\n    true\n    false))","user":"574e84e0e4b02ea114799243"},{"problem":134,"code":";;(fn[c, m] (if (contains? m c) (if (= nil (get m c)) true false ) false) )\n\n#(if (contains? %2 %1) (if (= nil (get %2 %1)) true false ) false)","user":"55429859e4b0a04f7929951f"},{"problem":134,"code":"(fn [item coll] (and (contains? coll item) (nil? (coll item))))","user":"6045582fe4b02d28681c77b6"},{"code":"(fn [k ls] (nil? (get ls k false)) )","problem":134,"user":"4f03ba9c535dcb61093f6b58"},{"problem":134,"code":"(fn [x y] (let [hey (x y)] (and (contains? y x) (nil? hey))))","user":"60901a6be4b03bd49d9f36c9"},{"problem":134,"code":";(fn [key, map] (and (contains? map key) (= (map key) nil)))\n(fn [key, map] (= (map key false) nil))","user":"5626c93fe4b00e49c7cb47c6"},{"problem":134,"code":"(fn [x y]\n  (and\n   (contains? y x)\n   (nil? (y x))))","user":"55b11716e4b002ce9d5cbc2c"},{"code":"#(and (contains? %2 %1) (not (%1 %2)))","problem":134,"user":"4eaede1f535d7eef30807329"},{"code":"(fn key-is-nil[key map]\n  (= (get map key \"not-found\") nil))","problem":134,"user":"4e723bcb535d5021c1a8965c"},{"code":"(fn [key map] (= nil (get map key :not-found) nil))","problem":134,"user":"4ecdb0bb535d23f036227709"},{"code":"#(and  (contains?  %2  %1)\n            (= (%1 %2) nil))","problem":134,"user":"517945dce4b0684c1c981a43"},{"problem":134,"code":"(fn [k mapx] (= (mapx k true) nil))","user":"5d5c549ee4b09db18d4482eb"},{"problem":134,"code":"(fn [key, map] (and (nil? (get map key)) (contains? map key)))","user":"5a663a32e4b0512ff01cd9c2"},{"code":"(fn [key map] (nil? (key map 0)))","problem":134,"user":"51128c6fe4b0350614f07a79"},{"problem":134,"code":"(fn [x y] \n   (and \n    (contains? y x) \n    (nil?(peek (find y x)))\n   )\n)","user":"56ff7ffee4b08d47c97781be"},{"problem":134,"code":"(fn [key map] (and (contains? map key) (= nil(get map key))))","user":"560084e6e4b04bb52996e16a"},{"code":"(fn [key map]\n  (if (nil? (get map key false))\n  true\n  false\n  ))","problem":134,"user":"4e814706535db62dc21a62bb"},{"problem":134,"code":"(fn [k mp]\n  (if (and (nil? (k mp)) (contains? mp k))\n    true\n    false))","user":"570940a9e4b0b0fb43fd06aa"},{"problem":134,"code":"(fn [x coll] (and (contains? coll x)(nil? (get coll x))))","user":"5b98f174e4b0c0b3ffbd4ac1"},{"problem":134,"code":"(fn [k c] (if (contains? c k) (= nil (k c)) (not true)))","user":"5975fc20e4b01722bebd4cd2"},{"code":"(fn [val values] (and (nil? (get values val)) (contains? values val)))","problem":134,"user":"50621cbde4b0341461c88951"},{"code":"(fn [k m]\n  (and\n   (= nil (m k))\n   (contains? m k)))","problem":134,"user":"521763fce4b082aa80a88c82"},{"problem":134,"code":"(fn val-nil? [k m]\n  (and (contains? m k) (= nil (m k))))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"(fn [k m] (and (contains? m k) (not (get m k))))","problem":134,"user":"51672d15e4b079759a74a5e7"},{"code":"#(nil? (get %2 %1 1))","problem":134,"user":"4e8a460e535d65386fec2109"},{"problem":134,"code":"(fn [key map] \n  (if (contains? map key)\n    (= (map key) nil)\n    false)\n  )","user":"5e83b9f2e4b09a7a73c8bbbf"},{"code":"(fn [k m]\n  (let [f (find m k)]\n    (if (nil? f)\n      false\n      (nil? (val f))\n)))","problem":134,"user":"501fcd59e4b0cb6ebc0a42ec"},{"problem":134,"code":"(fn nil-key [n coll] (and (contains? coll n) (nil? (n coll))))","user":"568c2d96e4b0dcc4269f40af"},{"problem":134,"code":"(fn[k m](if-not(contains? m k)false(nil?(k m))))","user":"56fd020ee4b08d47c97781a0"},{"problem":134,"code":"#(nil?(%2 % %))","user":"55d9743ae4b0e31453f64aca"},{"code":"(fn [x,y] (if (contains? y x) (= (y x) nil) false) )","problem":134,"user":"4f4d44f8e4b03ad3f0c10ca5"},{"code":"(fn [x y] (nil? (if (nil? (find y x)) '(false) (val (find y x)))))","problem":134,"user":"51623490e4b009fba0926e42"},{"code":"(fn nulva? [k,cont] (if(contains? cont k) (= (cont k) nil) false))","problem":134,"user":"53213810e4b09d4e7a9b54b0"},{"code":"(fn [key hash] \n  (if (and (contains? hash key) \n           (= (key hash) nil))\n    true\n    false))","problem":134,"user":"51991a89e4b068aa333628fd"},{"problem":134,"code":"#(and (contains? %2 %1) (nil? (%2 %1)) )  \n\n;; #(nil?(%2 %1 0)) seems better","user":"53be3ee7e4b0d9a98559a6df"},{"code":"(fn [x y] \n  (if (contains? y x) \n    (if (= (get y x) nil) true false) false))","problem":134,"user":"4fa32388e4b081705acca189"},{"problem":134,"code":"(fn [x, y] (and (contains? y x) (nil? (x y))))","user":"561bf12ce4b064ca9f4b168e"},{"code":"(fn [key map]\n    (= nil (get map key 'not-found)))","problem":134,"user":"5161c6a7e4b009fba0926e38"},{"code":"(fn [some-key some-map] (if (contains? some-map some-key) (nil? (some-key some-map)) false))","problem":134,"user":"4e95a440535dbda64a6f6b37"},{"code":"(fn [k m]\n  (if (and (contains? m k) (nil? (get m k)) )\n    true\n    false\n  )\n)","problem":134,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"#(nil?(get %2 %1 \"default value\"))","problem":134,"user":"5307e4ece4b02e82168697a9"},{"code":"#(and (nil? (%1 %2)) (contains? %2 %1) )","problem":134,"user":"524469dee4b0d8acf9ed6a9d"},{"code":"(fn [k m] \n   (if \n     (and (contains? m k) (nil? (k m))) true false ))","problem":134,"user":"514a762ae4b00c7db5067428"},{"problem":134,"code":"(fn [k m]\n  (let [v (k m)]\n    (and (nil? v) (contains? m k))))","user":"5954108ae4b066ee0a44aef4"},{"code":"(fn [k xs]\n  (if (contains? xs k)\n    (if  (nil? (xs k))\n      true\n      false)\n    false))","problem":134,"user":"4ed6238d535d10e5ff6f52de"},{"code":"(fn [k m](and (contains? m k) (nil? (k m))))","problem":134,"user":"526f9715e4b03e8d9a4a7372"},{"code":"(fn [k m]\n  (= nil (m k false)))","problem":134,"user":"53322cece4b019098a6f8b73"},{"problem":134,"code":"(fn [k m]\n   (and (contains? m k) (= (k m) nil)))","user":"59eb652be4b0249b7282077d"},{"code":"(fn [a mymap] (and (nil? (get mymap a)) (contains? mymap a)))","problem":134,"user":"514799d8e4b0541f4bec05cf"},{"problem":134,"code":"#(nil? (if (contains? %2 %1)(%1 %2)false))","user":"5b2c76c8e4b025bcb146f2b6"},{"problem":134,"code":"(fn [aKey, aMap] (if(contains? aMap aKey) \n                   (= (aMap aKey) nil )\n                      false)\n  )","user":"548026d8e4b0e286459a1155"},{"problem":134,"code":"#(let [a-map (assoc %2 %1 nil)] (= a-map  %2))","user":"54215735e4b01498b1a71ab2"},{"problem":134,"code":"(fn [my-key, elems]\n  (and (contains? elems my-key) (nil? (my-key elems)))\n)","user":"5776558ee4b0979f89651633"},{"problem":134,"code":"(fn [k h]\n    (if (contains? h k)\n    (nil? (k h))\n    false)\n  )","user":"55f1f0d1e4b06e875b46ce3b"},{"code":"#(= %2 (merge %2 {%1 nil}))","problem":134,"user":"526a3412e4b03e8d9a4a721e"},{"code":"(fn [k m] (nil? (get m k true)))","problem":134,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":134,"code":"(fn [k dict]\n  (if (contains? dict k)\n    (nil? (dict k))\n    false))","user":"55e7fc2ce4b0121d4835fd86"},{"problem":134,"code":"(fn [x y] (nil? (get y x \"not found\")))","user":"54ab46fee4b09f271ff37cc3"},{"code":"#(and (not (%2 %))\n     (contains? %2 %))","problem":134,"user":"51b3f109e4b0f094dd986fa9"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"default\")))","user":"5514a60fe4b055c2f668d4d7"},{"problem":134,"code":"(fn [k l] (nil? (get l k 1)))","user":"55f25ae6e4b06e875b46ce43"},{"problem":134,"code":"(fn[k m] (not (k m true)))","user":"5592c56ee4b0c79f6e1db934"},{"problem":134,"code":"#(= nil (if (contains? %2 %1 )(get %2 %1 ) true))","user":"5aeb3c1ce4b0cc2b61a3bbf4"},{"code":"(fn [k m] (if (contains? m k)\n             (nil? (k m))\n             false))","problem":134,"user":"502f6c56e4b0842eb223d8bb"},{"problem":134,"code":";(fn [k coll] (if (contains? coll k) (-> coll k nil?) false))\n;#(and (contains? %2 %) (-> %2 % nil?))\n;#(-> %2 (% :x) nil?)\n#(nil? (% %2 0))","user":"59ad2fcee4b00adcf69795de"},{"code":"(fn [k mymap]\n  (and (contains? mymap k) (= nil (k mymap))))","problem":134,"user":"5170643ee4b004f79986ad89"},{"problem":134,"code":"(fn [k m] (if (k m true) false true))","user":"5b421edce4b02d533a91bc2c"},{"code":"(fn [x y] \n  (if ( contains? y x )\n    (= nil (get y x))\n    false)\n  )","problem":134,"user":"501d6167e4b066e56b9d0b21"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (= nil (key map) )\n    false))","user":"5d66aea7e4b0db5d338d15ec"},{"problem":134,"code":"(fn f [key map] (and (contains? map key) (nil? (map key))))","user":"549e70bbe4b0f3d1d8e70fa0"},{"problem":134,"code":"(fn [k coll] (nil? (get coll k \"not found\")))","user":"5e5fa1ffe4b0fd0acd15867d"},{"code":"(fn nil-val? [k m]\n  (if\n      (contains? m k)\n      (nil? (get m k))\n      false))","problem":134,"user":"51502056e4b098b221effc25"},{"problem":134,"code":"(fn [k l] (and (contains? l k) (= nil (get l k))))","user":"52e16face4b09f7907dd1421"},{"problem":134,"code":"(fn [k v] \n  (if \n    (and (contains? v k)\n         (= nil (k v)))\n   true\n    false))","user":"5afdca89e4b0cc2b61a3bd20"},{"code":"(fn [k m]\n  (if (contains? m k)\n      (= (m k) nil)\n      false))","problem":134,"user":"4efb92ce535dced4c769f27a"},{"code":"(fn [x y] (and (contains? y x)(nil? (get y x))))","problem":134,"user":"4fcf7170e4b03432b189f412"},{"code":"(fn [element input]\n  (and (contains? input element) (= nil (element input))))","problem":134,"user":"528bba38e4b0239c8a67aea9"},{"code":"(fn [k m] (= nil (get m k false)))","problem":134,"user":"4ee01905535d10e5ff6f534c"},{"problem":134,"code":"(fn [key-value map-data] (if (contains? map-data key-value) (nil? (map-data key-value)) false ))","user":"5bf30da5e4b0a6d31fed2184"},{"code":"(fn [k m] \n  (and (contains? (set (keys m)) k)\n       (nil? (get m k))))","problem":134,"user":"5012ec0ae4b0c87326002230"},{"problem":134,"code":"#(not (%2 %1 :not-found))","user":"56d228f3e4b0ea9b8538f79a"},{"code":"(fn [key map]\n  (and  (contains? map key)\n       (nil? (key map)))\n)","problem":134,"user":"4dad8d4bc9a9d6ed1799dc57"},{"problem":134,"code":"(fn [k m] \n  (nil? (get m k :not-found)))","user":"60228147e4b0d5df2af22202"},{"problem":134,"code":"(fn [k m]\n  (= nil\n    (get m k false)))","user":"5980f91ae4b021a7a535fddd"},{"problem":134,"code":"(fn [k c] (= (c k false) nil))","user":"58b1bc99e4b0ebc645576d00"},{"code":"#(nil? (%1 %2 :not-nil))","problem":134,"user":"50747a55e4b054001656acd2"},{"problem":134,"code":"(fn [key dct] (and (contains? dct key) (not (get dct key))))","user":"5d03944de4b0cc9c915881c5"},{"code":"(fn [key col] (and (contains? col key) (nil? (get col key))))","problem":134,"user":"500d1db4e4b05f7c30cfa69f"},{"code":"(fn [k m]\n  (nil?\n   (get m k false)\n  )\n)","problem":134,"user":"50e19748e4b0ec0e353386e5"},{"problem":134,"code":"(fn [k m] (if (and (= (k m) nil) (contains? m k)) true false))","user":"52561295e4b0541d1855ba03"},{"problem":134,"code":"#(and (contains? %2 %1 ) (nil? (%1 %2 )))","user":"54aec099e4b09f271ff37cf5"},{"code":"(fn [x,y] ( if(nil? (get y x 0)) true false))","problem":134,"user":"524097ace4b0ad64fa010337"},{"code":"(fn [k m]\n  (if (find m k)\n    (nil? (k m))\n    false))","problem":134,"user":"4ff548dee4b0678c553fc368"},{"problem":134,"code":"(fn [k a-map]\n  (and\n      (contains? a-map k)\n   \t  (->> k\n           (get a-map)\n           (nil?))))","user":"57eb2576e4b0bfb2137f5b5c"},{"problem":134,"code":"(fn [k m] \n (and (contains? m k) (nil? (m k))))","user":"52f3a2afe4b05e3f0be25f13"},{"problem":134,"code":"(fn [k m](let [e (find m k)](if e (nil? (val e)) false)))","user":"5e708c4be4b085ba37836dad"},{"code":"(fn [key m]\n  (and\n    (contains? m key)\n    (nil? (m key))))","problem":134,"user":"50bfd849e4b042992946c649"},{"problem":134,"code":"(fn [k coll]\n  (and (contains? coll k) (= (get coll k) nil)))","user":"5ed65b59e4b016b56eae05df"},{"problem":134,"code":"(fn [k m] (nil? (get m k :nil)))","user":"5901158de4b0438e51c2d039"},{"code":"(fn [k m] (if (and (contains? m k) (nil? (k m)) ) true false))","problem":134,"user":"5085bfdae4b004985b776e53"},{"code":"(fn [k m] \n  (and (contains? m k)\n       (= nil (m k))))","problem":134,"user":"4e920f44535dbda64a6f6afd"},{"code":"(fn [key map]\n  (and (contains? map key)\n       (nil? (map key))))","problem":134,"user":"4e2d84bf535deb9a81d77f09"},{"code":"(fn [k l]\n  (=\n  \tnil\n  \t(get l k \"missing\")))","problem":134,"user":"50facb80e4b07934dda8b0d2"},{"problem":134,"code":"(fn [k, m] (if (contains? m k), (if(= (m k) nil) true false), false))","user":"5c852e3ae4b0c8042a70ce78"},{"problem":134,"code":"#(if (empty? (select-keys %2 [%1]))\n   false\n   (nil? (get %2 %1)))","user":"560152dee4b04bb52996e186"},{"code":"(fn [k m]\n  (and\n    (contains? m k)\n    (nil? (get m k))\n  )\n)","problem":134,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"problem":134,"code":"(fn [k m](and (nil? (m k)) (contains? m k)))","user":"5d406babe4b05dd059a54367"},{"code":"(fn [ikey imap]\n  (and\n   (not (nil? (find imap ikey)))\n   (nil? (get imap ikey))))","problem":134,"user":"4eee3e6a535d93acb0a668c3"},{"problem":134,"code":"(fn [k m] (or (nil? (get m k true))))","user":"59636b43e4b066ee0a44b0c4"},{"problem":134,"code":"#(nil? (get %2 %1 'N))","user":"5921a080e4b09b4ee5954c77"},{"problem":134,"code":"(fn [a b] (and (nil? (get b a)) (contains? b a)))","user":"5c9da580e4b048ec896c5b12"},{"problem":134,"code":"(fn [k d]\n  (let [ret (find d k)]\n    (and (not (= ret nil)) (= (get d k) nil))))","user":"5a08053fe4b01bb0ae8afde7"},{"problem":134,"code":"(fn [x y] (and  (contains? y x)  (= (y x) nil )))","user":"59f2c9c0e4b0966464fe6a8a"},{"problem":134,"code":"(fn [x,y]   (and (contains? y x) (= nil (get y x)) ))","user":"5510f734e4b06e50f9beb18f"},{"problem":134,"code":"(fn [x y]\n   (if (and (contains? y x) (= nil (get y x)))\n     true\n     false))","user":"57a1478ae4b0c3d858beb8e5"},{"problem":134,"code":"(fn [key map]\n  (if (and (contains? map key) (= nil (map key)))\n    true\n    false))","user":"54ba8076e4b0ed20f4ff6eb5"},{"code":"(fn [x coll]\n  (and (contains? coll x)\n       (= (x coll) nil)))","problem":134,"user":"501b4450e4b0ae3ec3946092"},{"code":"#(  and (contains? %2 %1)   (= nil (get %2 %1) )       )","problem":134,"user":"4ea8f887535d7eef30807300"},{"code":"(fn [k coll] (nil? (get coll k false)))","problem":134,"user":"4ff10dd2e4b0678c553fc32a"},{"code":"(fn [k c] (and (contains? c k) (nil? (k c))))","problem":134,"user":"4feada56e4b0140c20fb9c11"},{"code":"#(not (%2 %1 0))","problem":134,"user":"52cd093fe4b07d0d72b27376"},{"problem":134,"code":"(fn [k M]\n  (nil? (get M k 0)))","user":"5ea2e6bfe4b00a66d4a95197"},{"problem":134,"code":"(fn [k m]\n  (and \n   (contains? m k)\n   (nil? (get m k ) )\n   )\n  )","user":"5dcdb5cbe4b0b296f82db5b2"},{"code":"#(and (contains? %2 %1)(nil? (get %2 %1)))","problem":134,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":134,"code":"(fn [x y] \n  (if (contains? y x)\n    (nil? (x y))\n    false)\n  )","user":"550c866ae4b06e50f9beb153"},{"code":"(fn [k m]\n  (if\n  \t(and (contains? m k)\n \t\t (nil? (m k)))\n    true\n    false))","problem":134,"user":"51db0aefe4b06aa4d4669a9c"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n      (nil? (m k))\n      false))","user":"5922599be4b09b4ee5954c8d"},{"code":"(fn \n  [k map]\n  (if (and (= (k map) nil) (contains? map k))\n    true\n    false))","problem":134,"user":"513fd703e4b00f13ea1bd895"},{"code":"(fn [k m]\n  (nil? (get m k false))\n)","problem":134,"user":"4dd1de4d535dae65d5c462d7"},{"code":"#(if (and (some #{%} (keys %2)) (nil? (% %2)))\n   true\n   false)","problem":134,"user":"4e1b8106535d04ed9115e801"},{"code":"(fn [k h] (nil? (h k :miss)))","problem":134,"user":"4fda8f57e4b05e33b9224f4e"},{"problem":134,"code":"(fn my-func [my-key my-map]\n  (and (contains? my-map my-key) (nil? (get my-map my-key)))\n  )","user":"5c23d4a7e4b07e362c23059b"},{"problem":134,"code":"(fn [k m] \n  (nil? (get m k :notnil)))","user":"55995fa7e4b031d6649c9ba9"},{"problem":134,"code":"(fn [key dict]\n  (let [x (get dict key \"blah blah\")]\n    (nil? x)))","user":"54add0a3e4b09f271ff37ce7"},{"code":"(fn[k m] (and (contains? m k) (= nil (m k))))","problem":134,"user":"50e496e8e4b0cb9ec68fbca0"},{"code":"(fn [a b] (and (nil? (b a)) (contains? b a)))","problem":134,"user":"4f16d6ed535d64f60314644f"},{"code":"(fn [k m]\n  (let [{value k} m]\n    (if (and (contains? m k) (nil? value)) true false)))","problem":134,"user":"514633e8e4b04ef915e37317"},{"problem":134,"code":"(fn [word dict] \n  (if (contains? dict word) \n    (nil? (dict word))\n    false\n   )\n  )","user":"59e8d2f7e4b0249b7282073a"},{"code":"(fn\n  [k m]\n    (if (= (find m k) nil)\n        false\n        (if (= (get m k) nil)\n            true\n            false\n        )\n    )\n)","problem":134,"user":"4e333091535deb9a81d77f25"},{"problem":134,"code":"(fn[k m](not (get m k true)))","user":"5515b68de4b055c2f668d4ef"},{"problem":134,"code":"(fn [k coll]\n  (if (empty? (filter #(= k %) (keys coll)))\n    false\n    (nil? (coll k))))","user":"55af3e6be4b03311e7b732c7"},{"code":"#(cond \n  (false? (contains? %2 %1)) false \n  (nil? (%2 %1)) true\n  :else false)","problem":134,"user":"51197750e4b057cba170bc99"},{"problem":134,"code":"(fn [key map] (and (contains? map key)\n                            (not (get map key))))","user":"5df94f73e4b0a607a9a45cb6"},{"code":"(fn is-nil-key? [key m]\n  (and (contains? m key) (nil? (m key))))","problem":134,"user":"4e0d5a5a535d04ed9115e7b5"},{"problem":134,"code":"(fn [key map]\n  (nil? (get map key false)))","user":"533c0c12e4b0e30313ee6cd4"},{"code":"(fn [k m] (and \r\n    (contains? m k)\r\n    (= (get m k) nil)))","problem":134,"user":"4de760a3535d08e6dec9fdf9"},{"code":"#(= nil (%1 %2 true))","problem":134,"user":"4faa7185e4b081705acca1f3"},{"code":"(fn [k,m] (if (contains? m k) (nil? (k m)) false))","problem":134,"user":"4fc5273ce4b081705acca37f"},{"problem":134,"code":"#(and (contains? %2 %1) \n       (nil? (%2 %1)))","user":"51421cd5e4b0b50abeb46b2c"},{"code":"#(let [ x (get %2 %1 false) y (or (nil? x) (true? x))] (true? y))","problem":134,"user":"4ef8f78f535dced4c769f262"},{"problem":134,"code":"(fn [k v] (nil? (get v k \"missing\" )))","user":"5d45bd1de4b07c84aa5ae6a4"},{"problem":134,"code":"#(if (->(get %2 %1 \"key does not exist\")(= nil))\n   true\n   false)","user":"55ef51f1e4b066087aa94534"},{"problem":134,"code":"(fn [k map-]  \n\t(and (if (k (set (keys map-))) true false)\n       (nil? (k map-))))","user":"5722543ee4b0c5bde472c0c6"},{"problem":134,"code":"(fn [key map] (= nil (map key -1)))","user":"5de53245e4b0948ae9d9ae11"},{"problem":134,"code":"(fn key-check [k m]\n  (if (contains? m k)\n    (if (= (get m k) nil)\n      true\n      false)\n    false))","user":"5f3103aee4b0574c87022c24"},{"problem":134,"code":"(fn n [key map]\n  (if (contains? map key)\n    (= (key map) nil)\n    false))","user":"5f96909be4b0715f5002d7d9"},{"problem":134,"code":"(fn [x y]\n  (and (contains? y x)\n       (nil? (x y))))","user":"59f192e0e4b0966464fe6a5e"},{"code":"(fn [ky mp] (if (get mp ky 1) false true))","problem":134,"user":"52b35a6ee4b0c58976d9ad07"},{"code":"(fn [x y] (if (contains? y x) (if (= nil (x y)) true false) false))","problem":134,"user":"4eae2f9e535d7eef30807324"},{"code":"(fn [k m]\n  (if (nil? (m k))\n    (if ((set (keys m)) k) true false)\n      false))","problem":134,"user":"4db1bfe21254ad5b4805fa71"},{"code":"(fn [k l]\n  (and\n    (= (k l) nil)\n    (contains? l k)\n  )\n)","problem":134,"user":"506ec408e4b09350ab4199f1"},{"code":"(fn [x y] ( and (contains? y x ) (= nil (y x)) ))","problem":134,"user":"51363aa5e4b04ac1f358dd50"},{"problem":134,"code":"#(not (%2 % -1))","user":"5474d1f4e4b0c51c1f4d728c"},{"problem":134,"code":"(fn [key map]\n              (and (contains? map key)\n                   (= nil (key map))))","user":"5e491182e4b043cd24807a46"},{"code":"#(= (assoc %2 %1 nil) %2)","problem":134,"user":"4f726aaae4b07046d9f4f032"},{"problem":134,"code":"(fn [k, m] (= nil (m k 0)))","user":"5512980ce4b06e50f9beb1b3"},{"code":"#(= true (contains? %2 %1) (nil? (%1 %2)))","problem":134,"user":"526c2340e4b03e8d9a4a7281"},{"problem":134,"code":"(fn [k m] (if (and (nil? (k m)) (contains? m k)) true false))","user":"5169b23fe4b03f62cda68cee"},{"problem":134,"code":"(fn\n  [expected values]\n  (and (contains? values expected) (= nil (get values expected))))","user":"55d8bdcae4b0e31453f64abe"},{"code":"#(if (contains? %2 %)\n   (not (% %2))\n   false)","problem":134,"user":"4da3e51330acd6ed10482a68"},{"problem":134,"code":"(fn [x,y] (and (contains? y x) (= (get y x ) nil)))","user":"55894683e4b059ccff29b200"},{"code":"(fn [k m]  (and (nil? (k m)) (contains? m k) (Boolean/valueOf true)))","problem":134,"user":"4f95900ce4b0dcca54ed6cd3"},{"problem":134,"code":"(fn [x m]\n  (let [v (find m x)]\n\t(and (vector? v) (nil? (second v)))))","user":"58731176e4b01531a375ea2a"},{"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (nil? (m k))\n   )\n  )","problem":134,"user":"512339fce4b03b44edbed434"},{"problem":134,"code":"(fn [k col]\n  (every? identity\n          ((juxt #((comp nil? %2) %1) contains?) col k)))","user":"571e5c9ee4b0145328a76290"},{"problem":134,"code":"(fn [entry mymap] (if (contains? mymap entry) (nil? (mymap entry)) false) )","user":"55897fe2e4b059ccff29b205"},{"code":"#(if (= (get %2 %1 \"good\") \"good\") false (if (nil? (%1 %2)) true false))","problem":134,"user":"4f085a31535dcb61093f6c35"},{"code":"(fn\n  [e l]\n  (and (= nil (e l)) (contains? l e)))","problem":134,"user":"50657858e4b0deb87685059a"},{"problem":134,"code":"(fn [key inputMap] (and (contains? inputMap key) (= nil (key inputMap))))","user":"5db9fb8ae4b010eb3c36cd5a"},{"code":"(fn [k m] (if (contains? m k ) (= (get m k ) nil) false ))","problem":134,"user":"53219cece4b09d4e7a9b54b7"},{"problem":134,"code":"#(nil? (%1 %2 2))","user":"58172161e4b0c0e9c07b8389"},{"problem":134,"code":"(fn nil-key?\n  [k m]\n  (if(contains? m k) (if (= nil (get m k)) true\n                                           false)\n                     false)\n  )","user":"5a4cbba1e4b05d388ecb6b98"},{"code":"(fn [x y] (if (= (get y x false) nil) true false))","problem":134,"user":"528410bbe4b0239c8a67adc2"},{"problem":134,"code":"(fn [my-key my-map]\n  (and\n   (nil? (get my-map my-key))\n   (contains? my-map my-key)))","user":"5ba167bfe4b0a20761a233a0"},{"code":"(fn[x y](\n  if(contains? y x)\n  (nil? (val(find y x)))\n  false\n))","problem":134,"user":"4fe1279fe4b0dd6cd5ce3630"},{"problem":134,"code":"(fn [x coll]\n  (and (contains? coll x) (nil? (x coll))))","user":"602cc4d4e4b0d5df2af22274"},{"problem":134,"code":"#(and (contains? %2 %1) (nil? (get %2 %1)) )","user":"5f63cde9e4b02876ed9fd015"},{"problem":134,"code":"(fn [k h] (= nil (and (contains? h k) (get h k))))","user":"566c0cc2e4b0a866af6896bb"},{"code":"(fn [x,m] (and (contains? m x) (= nil (.get m x))))","problem":134,"user":"4f0f03ce535d0136e6c2232a"},{"problem":134,"code":"(fn [k v]\n  (= nil (get v k \"notfound\")))","user":"4feb40eee4b0681fd128dc8a"},{"problem":134,"code":"(defn :a [nil])","user":"56703845e4b0a866af6896ee"},{"problem":134,"code":"(fn [key coll]\n  (let [found (find coll key)]\n    (and (= (first found) key) (= (second found) nil))))","user":"56cf115de4b0ea9b8538f765"},{"problem":134,"code":"(fn its [k m] \n   (nil? (k m false)))","user":"54588070e4b01be26fd74620"},{"problem":134,"code":"(fn [k m] \n  (if (and (contains? m k) (nil? (get m k)))\n      true\n      false\n))","user":"5da0ed1fe4b000c986472bd8"},{"code":"(fn [k m] (if (= (find m k) nil) \n            false \n            (if (= (k m) nil) \n              true \n              false\n             )\n          )\n)","problem":134,"user":"4e8a0741535d3e98b802328b"},{"problem":134,"code":"(fn [key_ map_] (and (contains? map_ key_) (= nil (key_ map_))))","user":"55ecac8ee4b0121d4835fdcc"},{"code":"#(and (contains? %2 %1)(= nil (get %2 %1)))","problem":134,"user":"5369652de4b0243289761e9c"},{"problem":134,"code":"#(if (and (contains? %2 %1) (nil? (get %2 %1))) true false)","user":"5ac7f980e4b0e27600da779f"},{"problem":134,"code":"(fn [k mp] (and (contains? mp k) (nil? (get mp k))))","user":"55156efae4b055c2f668d4e5"},{"code":"(fn con [a b] (and (nil? (a b)) (contains? b a)))","problem":134,"user":"4f973fb9e4b0dcca54ed6ce8"},{"code":"#(not (get %2 %1 :nothing))","problem":134,"user":"5315a4f0e4b08068f379ed2e"},{"code":"(fn my-test\n  [k m]\n  (and (contains? m k) (= (k m) nil)))","problem":134,"user":"526e1bd0e4b03e8d9a4a730b"},{"code":"#(let [v (get %2 %1 false)] (nil? v))","problem":134,"user":"51a2a376e4b00957e520db7f"},{"problem":134,"code":"(fn [k m]\n    (if (contains? m k)\n      (= (k m) nil)\n      false))","user":"5726ccf4e4b0c5bde472c12c"},{"problem":134,"code":"(fn map-value-nil? [k m]\n  (and (contains? m k) (nil? (get m k))))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"problem":134,"code":"(fn [k m](if (contains? m k) (nil? (get m k)) false))","user":"5b5e7953e4b0c6492753e6d9"},{"code":"#(= (get (find %2 %1) 1 \"n\") nil)","problem":134,"user":"51e3cf8ee4b0efabf93c02a3"},{"code":"(fn [key coll] (if (contains? coll key) (nil? (key coll)) false))","problem":134,"user":"4eb504d8535d7eef30807363"},{"code":"#(if (and (find %2 %1) (= nil (%2 %1))) true false)","problem":134,"user":"52747090e4b03e8d9a4a74a5"},{"problem":134,"code":"#(and (contains? %2 %1)\n      (nil? (%1 %2))\n      )","user":"6001ea38e4b074f607df662a"},{"code":"#(    \n  if (contains? %2 %1)\n   (= (get %2 %1) nil)\n   false   \n)","problem":134,"user":"5240e8ebe4b0ad64fa010349"},{"problem":134,"code":"#(= nil ( %1 %2 true))","user":"552800d7e4b0ffed3738f93a"},{"problem":134,"code":"(fn [key map]\n \t(and (contains? map key) (nil? (map key))))","user":"51736d4de4b00f4b6b0490d7"},{"code":"(fn [k ks] (nil? (get ks k :not-found)))","problem":134,"user":"4f409e29e4b0e243712b1fb6"},{"code":"(fn [k coll] (and (contains? coll k) (nil? (k coll))))","problem":134,"user":"50ce09e6e4b0ffc302be4bc6"},{"code":"(fn [k m] (nil? (get m k :z)))","problem":134,"user":"4f1fd734535d64f6031464a5"},{"problem":134,"code":"(fn [key hash]\n  (if (and (contains? hash key) (nil? (hash key)))\n    true\n    false))","user":"55e856bae4b0121d4835fd8d"},{"problem":134,"code":"(fn [k m] \n  (and \n   (contains? m k) \n   (nil? (k m))))","user":"54a8ac6ce4b09f271ff37ca7"},{"problem":134,"code":"(fn [x,y] (and (nil? (get-in y [x])) (contains? y x)))","user":"504dce12e4b021508a333966"},{"problem":134,"code":"(fn [k m]\n  (nil?\n   (get m k false)))","user":"59f43ca3e4b0966464fe6aaa"},{"code":"(fn [k m]   (if (contains? m k)     (if (= (get m k) nil) true false)    false))","problem":134,"user":"52faec2ee4b047fd55837004"},{"problem":134,"code":"(fn\n  [k m]\n  (and\n   (contains? m k)\n   (= (get m k) nil)))","user":"5fada7cce4b08cb800c85af5"},{"problem":134,"code":"(fn [key map] (nil? (key map \"empty\")))","user":"575aa61ae4b02ea11479934e"},{"code":"(fn [key mp] \n  (and\n    (contains? mp key)\n    (nil? (mp key))))","problem":134,"user":"50763574e4b0a894bb95bf3d"},{"code":"(fn [x y](nil?(get y x false)))","problem":134,"user":"5312807fe4b08068f379ecfc"},{"problem":134,"code":"(fn [e coll]\n  (if (some #{e} (keys coll))\n    (nil? (get coll e))\n    false))","user":"570794d8e4b0b0fb43fd068b"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)\n          (= (x y) nil)\n          false))","user":"5a861086e4b05369db4d2494"},{"code":"(fn [k m] (if (nil? (get m k) ) (contains? m k) false))","problem":134,"user":"515dc82ee4b0c89ed0914af4"},{"code":"(fn retornaValor [valor mapa]\n  (if (contains? mapa valor)\n  (identical? nil (get mapa valor))\n  false)\n  )","problem":134,"user":"4e905ed4535d65386fec2154"},{"problem":134,"code":"(fn [item map] (and (contains? map item ) (= (item map) nil)))","user":"5680fff3e4b0966858e4d8f6"},{"problem":134,"code":"(fn nil-val? [x y] (and (contains? y x) (nil? (y x))))","user":"572a60cee4b0f4d77e651237"},{"problem":134,"code":"#(nil?(%1 %2 0))","user":"53d977f1e4b0e771c302547a"},{"problem":134,"code":"(fn has-nil-key?\n  [k m]\n  (nil? (k m false)))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":134,"code":"(fn [key2 kek] \n  (if (and (contains? kek key2) (= (get kek key2) nil))\n      true\n      false))","user":"5eb84ef4e4b00a66d4a95244"},{"problem":134,"code":"(fn picknil [x, m] (and (contains? m x) (nil? (x m))))","user":"57fe840ae4b0d3187e9009d3"},{"code":"(fn [k coll] (and  (contains?  coll k)   (nil?  (k coll) )      ) )","problem":134,"user":"4e86d3cf535dceadca46984c"},{"code":"(fn [k m] (and (contains? m k) (= nil (m k) )))","problem":134,"user":"4f0d6686535d0136e6c22318"},{"problem":134,"code":"(fn check-nil [the-key the-collection]\n  (if (contains? the-collection the-key)\n    (nil? (the-key the-collection))\n    false))","user":"5ad76df9e4b0ea6055cfac18"},{"code":"(fn [-key -map]\n  (if(and  (nil? (-key -map)) (contains? -map -key))\ntrue\nfalse))","problem":134,"user":"4ef2d6c5535dced4c769f222"},{"problem":134,"code":"#( nil?(get %2 %1 :undef))","user":"5650082fe4b0284900eef6b7"},{"problem":134,"code":"(fn [x m] (nil? (x m \"not found\")))","user":"602372aae4b0d5df2af2220f"},{"problem":134,"code":"(fn [k m]\n  (nil? (k m :not-found)))","user":"539b6c78e4b0b51d73faaf20"},{"problem":134,"code":"(fn [k mcoll]\n    (nil? (get mcoll k 'not-found)))","user":"5ff64845e4b06df49cee1495"},{"problem":134,"code":"(fn [k m]\n (and \n  (contains? m k)\n  (= \n   (get m k) nil)))","user":"5e29fb32e4b05b4b015161b2"},{"problem":134,"code":"(fn [k l]\n  (if (and (contains? l k) (= (l k) nil)) \n    true\n    false))","user":"561bcf94e4b064ca9f4b168a"},{"code":"(fn [k s] (if (contains? s k) (nil? (get s k)) false))","problem":134,"user":"4f0505ae535dcb61093f6bee"},{"problem":134,"code":"(fn [k m]\n\t(if (contains? m k)\n  \t\t(do\n          (if (nil? (m k))\n      \t\ttrue\n      \t\tfalse))\n      false))","user":"550111d3e4b07d26eda61d6f"},{"code":"(fn nilly? [k,m] (and (contains? m k) (nil? (k m))))","problem":134,"user":"52b7a904e4b0c58976d9ad51"},{"code":"(fn nil-key? [key map]\n  (and (contains? map key) (nil? (get map key))))","problem":134,"user":"4f03cc36535dcb61093f6b69"},{"code":"(fn [x, m] (and (contains? m x) (nil? (get m x))))","problem":134,"user":"51149439e4b0ce5098ee73b4"},{"problem":134,"code":"(fn [k mp]\n\t(if (= (mp k) nil)\n      (contains? mp k)\n      false\n    )\n)","user":"5d42d394e4b05dd059a5437f"},{"problem":134,"code":"(fn [kw dict] (if (and (contains? dict kw) (nil? (get dict kw))) true false))","user":"58bc3202e4b0888cdc949d0b"},{"code":"#(= nil (%2 %1 :n))","problem":134,"user":"51eca2ace4b069f463c22cd0"},{"code":"#(nil? (get %2 %1 ::not-present))","problem":134,"user":"4f32ef71e4b0d6649770a098"},{"code":"(fn [k m]\n  (nil? (get m k :not-found)))","problem":134,"user":"4f8490fae4b033992c121c34"},{"code":"(fn [s m]\n  (if (and (= s (some #{s} (map key m))) (= nil (s m)))\n    true\n    false))","problem":134,"user":"509fa9b5e4b08df8156e9e3f"},{"code":"(fn [key map]\n  (and (contains? map key)\n    (nil? (get map key))))","problem":134,"user":"50293b68e4b061fd216be4b7"},{"problem":134,"code":"(fn [key coll] (nil? (coll key (gensym))))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":134,"code":"(fn [k m]\n  (if (= (get m k false) nil) true false))","user":"546bfe4ee4b00cfc9eacc172"},{"problem":134,"code":"(fn kon [a b]\n  (if (every? identity [(contains? b a) (= nil (a b))])\n    true\n    false\n    ))","user":"5576e78de4b05c286339e075"},{"problem":134,"code":"(fn [x coll] (= (nil? (coll x)) (contains? coll x)))","user":"54ebc11be4b024c67c0cf850"},{"code":"(fn map-nil\n  [akey amap]\n  (let [res (akey amap)]\n    (if (contains? amap akey)\n      (if (nil? res)\n        true\n        false)\n      false)))","problem":134,"user":"4e3bcccd535deb9a81d77f56"},{"problem":134,"code":"(fn \n  [inputkey inputmap] \n  \t(and\n  \t\t(nil? (inputkey inputmap))\n        (contains? inputmap inputkey)\n     )\n)","user":"520fca70e4b080a8d9b9d631"},{"code":"#(if (contains? %2 %1)\n     (nil? (%1 %2))\n     false)","problem":134,"user":"4e5d0e96535d8a8b8723a2c8"},{"problem":134,"code":"(fn [el, mp] (and (contains? mp el) (= (get mp el) nil)))","user":"5a9e3698e4b0d174b936c7fc"},{"problem":134,"code":"(fn [k m] \n   (and (contains? m k) \n        (= nil (m k)))\n        )","user":"563ddefee4b0bfe05bf11857"},{"code":"(fn[a b] \n           (if (contains? b a) \n             (=(a b) nil)\n             (> 0 1)))","problem":134,"user":"512318b6e4b03b44edbed433"},{"problem":134,"code":"(fn neco [k m] (and (nil? (get m k)) (contains? m k)))","user":"5b15811ee4b0cc2b61a3be6f"},{"code":"(fn [aKey aMap] (and (contains? aMap aKey) (nil? (aKey aMap))))","problem":134,"user":"510ee996e4b07438aa321462"},{"code":"(fn [key m]\n      (if (some (set [key]) (keys m))\n        (if (nil? (m key))\n          true\n          false)\n        false))","problem":134,"user":"525816e7e4b0cb4875a45ca4"},{"code":"#(and\n  (contains? %2 %)\n  (= (% %2) nil))","problem":134,"user":"4fd2789ee4b04c3a95aa0422"},{"code":"(fn foo [a b] (cond (and (contains? b a) (nil? (get b a)) ) true :else false))","problem":134,"user":"51ed09b6e4b0bb507043158b"},{"code":"(fn [k m]\n  (nil? (k m :foo)))","problem":134,"user":"52aa4d9ee4b0c58976d9ac63"},{"problem":134,"code":"(fn [key m]\n (and\n    (contains? m key)\n    (= (get m key) nil)))","user":"605a876be4b000d535e6f53c"},{"code":"(fn [keyValue Map] (if (contains? Map keyValue) (nil? (get Map keyValue)) false))","problem":134,"user":"52a28e1ce4b04e0c58e87bf0"},{"problem":134,"code":"(fn [k s]\n           (if (contains? s k)\n             (if (nil? (s k)) \n               true\n               false)\n             false)\n           )","user":"5a43347ee4b0447ef91cc603"},{"problem":134,"code":"(fn ? [k m] (if (= (get m k false) nil) true false) )","user":"5541fa50e4b0a04f79299515"},{"problem":134,"code":"#(nil?(%2 %1 false))","user":"57b88091e4b0fbc9809a27e1"},{"problem":134,"code":"(fn [k m]\n  (nil? (m k false))\n )","user":"5f6a2ef0e4b02876ed9fd044"},{"problem":134,"code":"#(nil? (%2 % :definitely-not-nil))","user":"56627acde4b0e91d5f5c5648"},{"problem":134,"code":"(fn [key list]\n  (and\n    (contains? list key)\n    (nil? (list key))))","user":"57f11d72e4b0bfb2137f5c03"},{"problem":134,"code":"(fn [k m] (-> (filter (fn [[_ v]] (nil? v)) m) keys set (contains? k)))","user":"55f5c118e4b06e875b46ce8e"},{"code":"(fn [key coll]\n  (and\n   (contains? coll key)\n   (nil?\n     (last\n       (find coll key)))))","problem":134,"user":"4ec60dc4535d6d7199dd36c0"},{"code":"(fn [key map]\n  (and (contains? map key) (= (map key) nil)))","problem":134,"user":"530e0e4ee4b08068f379ecb4"},{"code":"(fn [key map]\n  (and\n    (contains? map key)\n    (= nil (key map))))","problem":134,"user":"5052ab7ee4b0a561d07d8f20"},{"code":"#(= (contains? %2 %1) (nil? (%2 %1)))","problem":134,"user":"53a068cbe4b0ca733b9744ae"},{"code":"#(nil? (get %2 % {}))","problem":134,"user":"534e4a29e4b084c2834f4ab0"},{"problem":134,"code":"(fn [k mp] (true? (and (get (set (keys mp)) k) (nil? (get mp k)))))","user":"539118b2e4b0b51d73faaea1"},{"problem":134,"code":"(fn [key map]\n  (if(contains? map key)\n  (= (key map) nil)\n  false))","user":"5d8b78e0e4b0915913b1d3d6"},{"code":"(fn [x ys] (nil? (get ys x 1)))","problem":134,"user":"5272669de4b03e8d9a4a742e"},{"problem":134,"code":"#(if (= (get %2 %1 false) nil)\n  true\n    false\n    )","user":"54d4ec31e4b0a52adc2e2007"},{"problem":134,"code":"#(and (not= :none (get %2 %1 :none)) (= nil (get %2 %1 :none)))","user":"4f528f70e4b03ad3f0c10d3f"},{"problem":134,"code":"(fn [k m]\n  (and (nil? (get m k))\n       (contains? m k)))","user":"56a9d4bbe4b07966d5a8a07b"},{"problem":134,"code":"(fn [k m]\n   (if (contains? m k)\n       (nil? (k m))\n       false))","user":"545e9cf1e4b01be26fd7467f"},{"code":"(fn [k m] (if (and (contains? m k)(nil? (k m))) true false))","problem":134,"user":"5244fa73e4b0d8acf9ed6acb"},{"problem":134,"code":"(fn\n  [k m]\n  (and (contains? m k) (= nil (get m k)))\n  )","user":"58a44a14e4b01a0c0b2328f2"},{"code":"#(if (= (get-in %2 [%1] false) nil) true false)","problem":134,"user":"502952c9e4b0b33e9bf6fdf1"},{"code":"(fn [a b]\n  (nil? (get b a 0)))","problem":134,"user":"52cdc676e4b07d0d72b2737f"},{"code":"(fn [x m] (and (contains? m x) (nil? (get m x))))","problem":134,"user":"4eff81ca535dcb61093f6a2d"},{"code":"#(nil? (%2 %1 :X))","problem":134,"user":"4db2eac3535df7e46ed9b6c8"},{"problem":134,"code":"(fn myfunc[x y] (= (x y true) 'nil))","user":"577e9c9fe4b0c8d87281f6ed"},{"problem":134,"code":"(fn nil-key? [key map]\n  (and (nil? (key map))\n       (contains? map key)))","user":"56889672e4b0dcc4269f406c"},{"code":"(fn [key val] (and (contains? val key) (nil? (key val))))","problem":134,"user":"50f69a3ce4b0035e89151844"},{"problem":134,"code":"(fn a-nil-value? [key map]\n  (and (contains? map key) (nil? (key map))))","user":"55586905e4b0deb715856e2b"},{"problem":134,"code":"(fn [key map]\n   (and (contains? map key)\n        (nil? (get map key))))","user":"5808ee16e4b0a837a8b30d16"},{"problem":134,"code":"(fn [k coll]\n    (and (contains? coll k)\n         (nil? (get coll k))))","user":"58472aade4b089d5ab817ea0"},{"problem":134,"code":";;#(nil?(%2 %1 0))\n;;(fn [k m]  (nil? (get m k :not-found)))\n#(nil?(%2 % 0))","user":"56cba075e4b0ea9b8538f737"},{"problem":134,"code":"(fn [key map]\n  (if (get map key :default)\n    false\n    true))","user":"51568fbae4b04360f2428e67"},{"problem":134,"code":"(fn foo [Key Map] (= nil (get Map Key \"missing\")) )","user":"549b1e50e4b0f3d1d8e70f7a"},{"code":"(fn [key coll] (nil? (get coll key 0)))","problem":134,"user":"4f1e75a9535d64f603146498"},{"code":"(fn[x y](and (contains? y x)(nil? (get y x))))","problem":134,"user":"4f32135ae4b0d6649770a08e"},{"problem":134,"code":"(fn check-nil1?\n  [key data]\n    (if (nil? (key data true))\n      true\n      false))","user":"5746cb28e4b009280f9f2b68"},{"problem":134,"code":"(fn [k m]\n        (and\n         (contains? m k)\n         (nil? (get m k))))","user":"5484c3b2e4b0e286459a11a2"},{"problem":134,"code":"(fn [key map]\n  (and \n       (contains? map key)\n       (= nil (get map key))))","user":"5a3a15e6e4b001c08efc0cc1"},{"problem":134,"code":"(fn [k d] (nil? (k d false)))","user":"5a3e1243e4b0447ef91cc5ae"},{"code":"(fn [key-obj map-obj]\n    (if (contains? map-obj key-obj)\n      (nil? (get map-obj key-obj))\n      false))","problem":134,"user":"52c0e3d1e4b07a9af5792358"},{"code":"(fn [coll k]\n  (and (contains? k coll) (nil? (k coll))))","problem":134,"user":"50a3bf08e4b0ceace084d495"},{"problem":134,"code":"(fn [key coll]\n  (and (contains? coll key)\n       (nil? (get coll key))))","user":"545bd22fe4b01be26fd7465a"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)\n  (nil? (get y x))\n  false))","user":"5f837b30e4b01aacbe7a2714"},{"problem":134,"code":"(fn [key map] \n  (if (contains? map key)\n    (= (map key) nil)\n    false))","user":"5bc64843e4b07a9b28b10091"},{"problem":134,"code":";(fn[k m] (= nil(k m 0)))\n\n;#(nil? (%2 % 0))\n\n#(nil? (%2 %1 0))","user":"551bbcd4e4b07993ea3788d5"},{"problem":134,"code":"(fn [x coll] (and (contains? coll x) (not (coll x)) ) )","user":"53c126fce4b00fb29b22125b"},{"problem":134,"code":"(fn [e v] (nil? (get v e false)))","user":"507f69eee4b089ade05efbcf"},{"problem":134,"code":"(fn [k s] (and (contains? s k) (= nil (s k))))","user":"5dd7dec1e4b0948ae9d9ad8d"},{"problem":134,"code":"#(= nil (get %2 %1 :nope))","user":"53d28800e4b00fb29b22131e"},{"code":"(fn [k map] (and (= (k map) nil) (contains? map k) ))","problem":134,"user":"4f0378eb535dcb61093f6ae1"},{"code":"(fn [k m]\n  (and \n    (contains? m k) \n    (nil? (k m))\n  ))","problem":134,"user":"4ea365e2535d7eef308072c5"},{"code":"#(and (contains? %2 %) (nil? (%2 %)) )","problem":134,"user":"4ee7d177535d93acb0a6686f"},{"code":"(fn [k m]\n  (and\n    (contains? m k)\n    (nil? (k m))))","problem":134,"user":"4dbde951535d020aff1edf53"},{"problem":134,"code":"(fn [k m]\n  (cond\n   (false? (contains? m k)) false\n   (= (k m) nil) true\n   :else false))","user":"586b1482e4b0f14aab7c88cf"},{"problem":134,"code":"(fn [k h] (and   (contains? h k)  (nil?  (h k)) ))","user":"512b07f7e4b078b06821febb"},{"code":"(fn [k, m] \n  (and\n    (contains? m k)\n    (= (get m k) nil)))","problem":134,"user":"4ec9549d535d6d7199dd36fe"},{"code":"(fn [key map] \n  (and (contains? map key) (nil? (key map))))","problem":134,"user":"4f0333f6535dcb61093f6a77"},{"problem":134,"code":"(fn if-and-only-if [k m] (nil? (get m k false)))","user":"5e731c7fe4b085ba37836dcd"},{"problem":134,"code":"#(and (not (nil? (find %2 %1))) (nil? (get %2 %1)))","user":"545537c1e4b0e397800069dd"},{"code":"(fn [a,b]   (if (and (contains? b a) (= nil (get b a))) true false))","problem":134,"user":"5008d149e4b0144d4f561e41"},{"problem":134,"code":"#(and\n  \t(contains?  %2 %1)\n  \t(nil? (%1 %2) ))","user":"55537851e4b0deb715856e04"},{"problem":134,"code":"#(and (contains? %2 %1) (nil? (get %2 %1 0)))","user":"53e4fa2ce4b036ad0777e454"},{"problem":134,"code":"(fn [k a] (if (and (= (get a k) nil) (contains? a k)) true false ))","user":"55016428e4b07d26eda61d72"},{"code":"(fn [x,y] (if (contains? y x) (= nil (y x)) false))","problem":134,"user":"5369a4b1e4b0243289761e9f"},{"problem":134,"code":"(fn [keyword map]\n  (if (and (contains? map keyword)\n           (= nil (get map keyword)))\n           true\n           false))","user":"54e3e09fe4b024c67c0cf7e4"},{"problem":134,"code":"(fn [kkey mmap]\n  (if (and (contains? mmap kkey) (= nil (get mmap kkey)))\n  \ttrue\n    false\n  )\n)","user":"595bc925e4b066ee0a44afe2"},{"code":"(fn [k h] (nil? (get h k false)))","problem":134,"user":"4f045946535dcb61093f6bba"},{"problem":134,"code":"(fn [k m] (if (contains? m k) \n                (nil? (k m))\n                false))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn [x y]\n    (and (contains? y x) (nil? (get y x))))","problem":134,"user":"4ea68edb535d7eef308072e6"},{"code":"(fn [key map]\n\t\t(and (contains? map key) (nil? (key map))))","problem":134,"user":"51205867e4b0e88f5a20c40f"},{"code":"(fn [k m]\n    (nil? (k m :not-found)))","problem":134,"user":"4ec57e4a535d6d7199dd36a4"},{"code":"(fn [key coll]\n  (and\n    (contains? coll key)\n    (nil? (get coll key))\n))","problem":134,"user":"5112695de4b0350614f07a73"},{"problem":134,"code":"(fn [k m] (if (contains? m k) (nil? (get m k)) false ) )","user":"56039843e4b04bb52996e1be"},{"code":"#(and (= nil (% %2)) (contains? %2 %))","problem":134,"user":"52683aa4e4b03e8d9a4a719a"},{"code":"#(nil? (%1 %2 \"not-found\"))","problem":134,"user":"50431cbce4b034ff00315d1c"},{"problem":134,"code":"(fn q134 [k m]\n  (and (contains? m k) (nil? (m k))))","user":"5cab0ad9e4b048ec896c5c46"},{"code":"#(= nil (if (contains? %2 %1) (%1 %2) false))","problem":134,"user":"53329d4ee4b019098a6f8b75"},{"code":"(fn [e m] (and (.containsKey m e) (nil? (m e))))","problem":134,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":134,"code":"#(and (contains? %2 %1)  (= nil (%1 %2)))","user":"5c38422ae4b0d62ef62d9f7f"},{"code":"(fn [k d] (nil? (k (conj {k false} d)\n                    )\n                )\n             )","problem":134,"user":"51448607e4b0d29bc9e5e336"},{"problem":134,"code":"(fn [k coll]\n  (if (contains? coll k)\n    (if (nil? (k coll))\n      true\n      false)\n    false))","user":"5e12327ee4b099d064962fe5"},{"problem":134,"code":"(fn \n  [key map] \n  (and \n   (contains? map key)\n   (nil? (key map))))","user":"5854580ce4b07779d46863f9"},{"problem":134,"code":"(fn [k l]\n(and\n(= (get l k) nil)\n(contains? l k)\n))","user":"58fa65fde4b0438e51c2cf63"},{"code":"(fn [x c] (and (contains? c x) (not (x c))))","problem":134,"user":"5308dd20e4b02e82168697b3"},{"code":"(fn [key map] (and (= (key map) nil) (contains? map key)))","problem":134,"user":"52ea19ace4b09f7907dd14b7"},{"problem":134,"code":"(fn [k h] (if (and (nil? (k h)) (contains? h k) ) true false ) )","user":"513f7a39e4b00f13ea1bd88c"},{"problem":134,"code":"(fn [x mp]\n  (if (and (nil? (x mp)) (contains? mp x))\n    true\n  \tfalse))","user":"5742760ce4b05c31a32c0876"},{"code":"#(if (nil? (get %2 % :nf)) true false)","problem":134,"user":"528e7433e4b0239c8a67aedf"},{"problem":134,"code":"#(and (contains? %2%1) (nil? (%2 %1)) )","user":"5978c1eae4b01722bebd4d17"},{"problem":134,"code":"(fn [k m]\n  (if (and (nil? (get m k)) (contains? m k)) true false))","user":"5446158ce4b032a45b8693a6"},{"code":"#(if (contains? %2 %) \n   (if (= nil (get %2 %))true false)\n   false\n   )","problem":134,"user":"519537dfe4b09df09a77a3ef"},{"code":"(fn [k m] (if (and (not (get m k)) (contains? m k)) true false))","problem":134,"user":"50f9c7fde4b0e7c80cb15a52"},{"code":"(fn [k m] (and (boolean (some #{k} (keys m))) (nil? (k m))))","problem":134,"user":"504f5fb0e4b0a02f9cffde76"},{"problem":134,"code":"(fn mapFindNil [k m]\n  (and (contains? m k) (= nil (k m))))","user":"58088dfde4b0a837a8b30d07"},{"problem":134,"code":"#(if (find{%1 %2} :c)false (if (nil? (%1 %2))true false))","user":"56a7c7c8e4b07966d5a8a061"},{"problem":134,"code":"(fn [a col] \n  (and \n  \t(nil? (get col a))\n   \t(contains?  col a)\n   )\n)","user":"58d00661e4b03c36ff7e58c2"},{"problem":134,"code":"(fn [key obj] \n  (and \n   (contains? obj key)\n    (= (key obj)\n       nil)))","user":"56b6e354e4b0982f16b37e41"},{"problem":134,"code":"(fn [k hm] (and (nil? (k hm)) (contains? hm k)))","user":"5c05cae7e4b0bdcf453d16a3"},{"code":"(fn [k m] (if (contains? m k)\n            (nil? (k m))\n            false\n            ))","problem":134,"user":"53852e84e4b06839e8705efd"},{"problem":134,"code":"(fn [param strct] (and (= (param strct) nil) (contains? strct param)))","user":"5a527c16e4b05d388ecb6bff"},{"code":"(fn [k m] \n\n(cond\n(nil? (find m k)) false\n(nil? (get m k)) true\n:else false)\n\n)","problem":134,"user":"4fa792ebe4b081705acca1c5"},{"problem":134,"code":"(fn [x m] (if (and (contains? m x) (= nil (get m x))) true false))","user":"607e1d9de4b03d835a6eaedb"},{"problem":134,"code":"(fn [key dict]\n  (let [entry (find dict key)]\n    (if (and (not (nil? entry))\n            (nil? (second entry)))\n      true\n      false)))","user":"50b61e7ae4b0e3a8b79a9a68"},{"problem":134,"code":"(fn [x xs] \n  (if (and (= (xs x) nil)\n       (contains? xs x))\n       true\n    false)\n  )","user":"597376b9e4b01722bebd4ca0"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)\n    (nil? (y x))\n    false))","user":"543d5c61e4b032a45b86934d"},{"code":"(fn [k kvs]\n  (and\n    (contains? kvs k)\n    (= (get kvs k) nil)\n  )\n)","problem":134,"user":"51365524e4b04ac1f358dd52"},{"problem":134,"code":"(fn [key map] (if (= (get map key \"abc\") nil) true false))","user":"59595f85e4b066ee0a44afa1"},{"code":"(fn [idx coll] (and (contains? coll idx) (nil? (idx coll))))","problem":134,"user":"504e2a3fe4b0f6ff3350c477"},{"problem":134,"code":"(fn [k m] (if (and (k (set (keys m)))\n                   (= nil (k m)))\n              true\n              false))","user":"5c58736be4b01df32ab73247"},{"problem":134,"code":"(fn [x y] (cond (contains? y x) (= nil (x y)) :else false))","user":"576ecafce4b0979f89651580"},{"problem":134,"code":"(fn\n  [k\n   data]\n  (if (contains? data k)\n    (= (data k) nil)\n    false)\n  )","user":"55ad2379e4b03311e7b732a1"},{"code":"(fn [x coll]\n  (= nil (get coll x -1)))","problem":134,"user":"4f032cb1535dcb61093f6a70"},{"problem":134,"code":"(fn [k m]\n  (not (empty? (filter\n          (fn [entry]\n            (and (= (key entry) k) (= (val entry) nil)))\n          m))))","user":"5e7f62cce4b085ba37836e3b"},{"problem":134,"code":"(fn \n  [k m] \n  (if (contains? m k)\n    (= (k m) nil)\n    false))","user":"5a514e68e4b05d388ecb6be5"},{"problem":134,"code":"(fn f [k m]\n  (nil? (k m :none)))","user":"5c3796b3e4b0d62ef62d9f77"},{"problem":134,"code":"(fn [map-key map-entry]\n  (and (contains? map-entry map-key) (= (map-key map-entry) nil)))","user":"5d0b210ee4b0cc9c9158822b"},{"code":"(fn [k m]\n  (if ((set (keys m)) k)\n    (nil? (m k))\n    false))","problem":134,"user":"50e4b066e4b0cb9ec68fbca6"},{"code":"(fn [xkey xmap] (and (contains? xmap xkey) (= nil (xmap xkey))))","problem":134,"user":"4ea7999e535d7eef308072ee"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (if (nil? (m k)) true false)\n     false\n  ))","problem":134,"user":"51622fb8e4b009fba0926e3f"},{"code":"#(nil? (get %2 %1 \"NOT\"))","problem":134,"user":"5016ac54e4b052339a490e7b"},{"problem":134,"code":"(fn [k m] (nil? (k m 'absent)))","user":"53a0ab8ce4b0ca733b9744b3"},{"code":"#(nil? (and (contains? %2 %) (%2 %)))","problem":134,"user":"52c60945e4b0c2d177d62108"},{"code":"(fn [akey, amap] (if (contains? amap akey) (nil? (get amap akey)) false))","problem":134,"user":"4ea11921535d7eef308072af"},{"problem":134,"code":"(fn [k m] (if (= (get m k 1) nil) true false))","user":"581a66b1e4b0e114eb51a003"},{"problem":134,"code":"#(if (and (nil? (%2 %1)) (contains? %2 %1)) true false)","user":"5589a735e4b059ccff29b206"},{"code":"#(and \n  (contains? %2 %) \n  (= (%2 %) nil))","problem":134,"user":"51d96ad0e4b02ceefd94774f"},{"problem":134,"code":"(fn [k m]\n (nil? (m k :missing)))","user":"59fd069ae4b01bb0ae8afcf4"},{"problem":134,"code":"(fn [k col] (if (contains? col k) (= nil (k col)) false))","user":"56350c87e4b0bfe05bf117c0"},{"problem":134,"code":"(fn [k dict] \n(= (dict k true) nil))","user":"5819d698e4b0e114eb519fe7"},{"problem":134,"code":"(fn [e m]\n  (and (contains? m e) (= nil (e m))))","user":"58f98231e4b0438e51c2cf4c"},{"code":"(fn [k m] (if (m k) false (if (contains? m k) true false )))","problem":134,"user":"536c77f1e4b0fc7073fd6e3f"},{"problem":134,"code":"(fn [k c] (and \n           (contains? c k)\n           (nil? (k c))))","user":"5753b6c6e4b02ea1147992af"},{"problem":134,"code":"#(if (and (= (get %2 %1) nil) (contains? %2 %1))\n    true\n    false\n    )","user":"5f35026fe4b0574c87022c40"},{"code":"#(if (contains? %2 %)\n   (nil? (% %2))\n    false)","problem":134,"user":"513333a8e4b0e0c0cda41e78"},{"problem":134,"code":"(fn [k m] \n    (and (contains? m k) (nil? (k m))))","user":"5c23c8dde4b07e362c230599"},{"code":"(fn [key set] (and (contains? set key) (= (key set) nil)))","problem":134,"user":"534f13b2e4b084c2834f4ac4"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n  (= (k m) nil)\n  false))","user":"5a58bfd0e4b05d388ecb6c84"},{"problem":134,"code":"(fn [myKey myMap] (if (and (contains? myMap myKey)\n                           (= nil (get myMap myKey)))\n                    true\n                    false))","user":"5425d00ee4b01498b1a71b12"},{"problem":134,"code":"(fn [searchfor mymap] \n  (if (and (= (= (get mymap searchfor :not-here) :not-here) false) (= (get mymap searchfor) nil))\n    true\n    false))","user":"5f92a726e4b0715f5002d7b9"},{"problem":134,"code":"(fn [key coll]\n  (let [res (get coll key :foo)]\n    (if (= res :foo) false \n      (if (= res nil) true false))))","user":"56548885e4b0f9d632dd8483"},{"problem":134,"code":"(fn [key map] (nil? (get map key \"Key not found\")))","user":"5deeb6fde4b093ff7172759f"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"miss\")))","user":"575556fae4b02ea1147992c3"},{"code":"(fn [k m]\n  (and (contains? m k) (= (m k) nil)))","problem":134,"user":"4f1e4ab5535d64f603146496"},{"problem":134,"code":"(fn [a_key a_map]\n  (and (contains? a_map a_key) (= (a_key a_map) nil)))","user":"5939e726e4b069cdc2982b45"},{"code":"#(and (= nil (%2 %1)) (contains? %2 %1))","problem":134,"user":"4eddcbbf535d10e5ff6f532d"},{"code":"#(if (nil?(find %2 %))false (if (nil?(val (find %2 %))) true false))","problem":134,"user":"5236fb39e4b0ad3e3a16f537"},{"problem":134,"code":"(fn [key, coll] (and (contains? coll key) (= nil (coll key))))","user":"596ff5f6e4b01722bebd4c5a"},{"code":"(fn [k m] (and (nil? (k m)) (contains? m k)))","problem":134,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"#(nil? (%2 % -))","problem":134,"user":"4e951ce5535dbda64a6f6b2e"},{"problem":134,"code":"(fn [k m] (nil? (m k false) ) )","user":"58021b0be4b0a837a8b30c6a"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (= (k m) nil)\n   )\n  )","user":"55d8db41e4b0e31453f64abf"},{"problem":134,"code":"#(let [k %1 m %2] (and (contains? m k) (= nil (k m))))","user":"60325627e4b0d5df2af222b5"},{"code":"(fn [keyy mapp] \n  (if (or (= \"err_not_found\" (keyy mapp \"err_not_found\")) (not (nil? (keyy mapp))))\n         false\n         true)\n  )","problem":134,"user":"53438d3ee4b084c2834f4a20"},{"problem":134,"code":"(fn [k m]\n  (let [c (contains? m k)\n        v (k m)]\n    (if (and c (= v nil)) \n      true \n      false)\n    ))","user":"52d1c619e4b0d9f9285948e4"},{"code":"(fn [k m] (and (not (nil? (find m k)))\n(nil? (k m))))","problem":134,"user":"4f590356e4b0a7574ea71860"},{"code":"#(nil? (% %2 :none))","problem":134,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":134,"code":"(fn [x xs]\n  (if (contains? xs x)\n    (if (nil? (get xs x))\n      true\n      false)\n    false))","user":"4feded14e4b0d2a5fc2962ec"},{"code":"#(nil? (if (contains? %2 %) (% %2) false))","problem":134,"user":"50799992e4b08327cd804a62"},{"code":"(fn [kkey mmap] (and (contains? mmap kkey) (nil? (mmap kkey))))","problem":134,"user":"52c3b3e5e4b0c2d177d620c8"},{"problem":134,"code":"(fn [ikey, imap] (true? (and (contains? imap ikey) (nil? (get imap ikey)))))","user":"533d6678e4b085b17e897d7e"},{"problem":134,"code":"(fn [x y]\n  (if (and (contains? y x) (= (get y x) nil))\n    true\n    false))","user":"5841b8dde4b089d5ab817e0d"},{"code":"(fn [k m] (= nil (k m 0)))","problem":134,"user":"4ecd6a88535d23f036227704"},{"code":"#( if ( and ( contains? %2 %1)\n           (=  (%1 %2) nil)) true false)","problem":134,"user":"4e84f81b535db62dc21a62e6"},{"code":"#(if (contains? %2 %1) (= nil (get %2 %1)) false)","problem":134,"user":"518584b0e4b0da5a5be3babf"},{"problem":134,"code":"(fn [key m] (= (m key -1) nil))","user":"5d84545ee4b0915913b1d38b"},{"problem":134,"code":"(fn [x y] (and (= nil (x y))(contains? y x)))","user":"5b15a037e4b0cc2b61a3be70"},{"code":"#(and (not (nil? (find %2 %1))) (nil? (last (find %2 %1))))","problem":134,"user":"5293589ae4b0239c8a67af3d"},{"problem":134,"code":"(fn [key map] (if (contains? map key) (= nil (key map)) false ))","user":"540b8155e4b0addc1aec66f7"},{"code":"(fn [key map] (if-not (= nil (find map key)) (= nil (get map key)) false))","problem":134,"user":"4ddc56e1535d02782fcbea04"},{"problem":134,"code":"(fn [key map]\n  (if (and (contains? map key)\n           (nil? (get map key)))\n    true\n    false))","user":"553527ede4b09218d5f44fab"},{"problem":134,"code":"(fn [x _] (condp = x :a true :b false :c false))","user":"4fa4f2f2e4b081705acca1aa"},{"problem":134,"code":"#(and \n  (contains? %2 %1) \n  (nil? (%1 %2)))","user":"54b13a40e4b09f271ff37d1b"},{"problem":134,"code":"#(not (get %2 %1 %1))","user":"56b2573ce4b0982f16b37e02"},{"code":"(fn [k col]\n  (and (nil? (col k)) (contains? col k)))","problem":134,"user":"52a5a8ebe4b0c58976d9abed"},{"problem":134,"code":"#(nil? (%1 %2 -1))","user":"55e31aa8e4b050e68259b43f"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)\n       (= (k m) nil)))","user":"54df2274e4b024c67c0cf7a8"},{"problem":134,"code":"( fn [k m] \n  ( if(contains? m k) (= (m k ) nil) false))","user":"5cf53196e4b087f62be35a94"},{"code":"(fn [k m] (and (= true (contains? m k)) (= nil (get m k)) true))","problem":134,"user":"5177097de4b085adf681d892"},{"problem":134,"code":"(fn func [x y] (and (contains? y x) (= (x y) nil)))","user":"56cef5e8e4b0ea9b8538f762"},{"code":"(fn [key coll] (and (contains? coll key) (nil? (coll key))))","problem":134,"user":"4e356d2b535deb9a81d77f2d"},{"problem":134,"code":"(fn [kk coll] (not (empty? (filter (fn [[k v]] (and (= k kk) (nil? v))) coll))))","user":"53ab1ef6e4b047364c04444b"},{"problem":134,"code":"(fn [x y] \n  \t(if (= (get y x \"found\") nil)\n      true\n      false\n      )\n  )","user":"5531ec1fe4b09218d5f44f77"},{"problem":134,"code":"(fn [_key coll] (and (contains? coll _key) (nil? (_key coll))))","user":"560039cce4b04bb52996e162"},{"code":"(fn  [k col] (if (contains? col k) (= (col k) nil) false))","problem":134,"user":"529d2abce4b04e0c58e87b75"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)\n    (nil? (x y))\n    false)\n  )","user":"53ff7ad2e4b0de5c41848601"},{"code":"#(nil? (get %2 % :dum))","problem":134,"user":"509160dae4b0742c82730aef"},{"code":"(fn [x coll]\n   (if (contains? coll x)\n     (= nil (x coll))\n     false)\n  )","problem":134,"user":"51469a3ae4b04ef915e3731b"},{"code":";; (<test key> map 1) returns the map value if the key exists, otherwise it returns 1\n;; So (:a <map> 1) returns nil because :a is present and has the value nil.\n;; (:c <map> 1) returns 1 because :c is not present.\n;; Because nil and false are the only false Clojure values, (not (:c <map> 1)) returns false,\n;; indicating that :c is not a map key.\n#(not (%2 %1 1))","problem":134,"user":"533b1dc4e4b0e30313ee6cc7"},{"code":"(fn [k,s] \n  (if(contains? s k)\n    (= nil (s k))\n    false))","problem":134,"user":"4eb593e6535d7eef30807368"},{"code":"(fn [key_ map_]\n  (= nil (get map_ key_ \"N/A\")))","problem":134,"user":"512f4ed7e4b0762be4c7aad9"},{"problem":134,"code":"(fn [x y]\n  (and\n   (contains? y x)\n   (nil? (get y x))))","user":"55f73078e4b06e875b46cea4"},{"code":"#(nil? (%2 % :x))","problem":134,"user":"4dcfbc44535d5973398f92a7"},{"code":"#(and (contains? %2 %1) (nil? (%2 %1)) )","problem":134,"user":"50ae22c3e4b0a40c9cfb08d0"},{"problem":134,"code":"(fn [keyArg mapArg] \n    (and (= nil (keyArg mapArg))\n         (contains? mapArg keyArg)))","user":"56d9883ae4b0ea9b8538f7f4"},{"code":"#(and\n (contains? %2 %1)\n (nil? (%2 %1))\n)","problem":134,"user":"532cb6bbe4b019098a6f8b33"},{"code":"(fn [aKey aMap]\r\n   \t(let [a (find aMap aKey)]\r\n\t\t(if a\r\n\t\t\t(= nil (second a))\r\n\t\t\tfalse)))","problem":134,"user":"507f6bb8e4b089ade05efbd0"},{"code":"(fn[k,m](and (contains? m k) (= (m k) nil)))","problem":134,"user":"5169d422e4b051e2a73aba53"},{"problem":134,"code":"(fn[x y](and (contains? y x) (nil? (x y) )))","user":"5826a843e4b051871117befd"},{"code":"#(nil? (%2 %1 :x))","problem":134,"user":"4dada426c9a9d6ed2a99dc57"},{"problem":134,"code":"(fn [key _map] (= nil (and (contains? _map key) (get _map key))))","user":"5f274aeee4b0857314092c92"},{"problem":134,"code":"(fn [key map]\n  (= (get map key :not-found) nil))","user":"54d87b54e4b0a52adc2e2038"},{"problem":134,"code":"#(= (get %2 %1 \"n\") nil)","user":"5ee738dee4b029a2061bbea2"},{"problem":134,"code":"(fn [key col]\n        (and (contains? col key)\n             (= nil (key col))))","user":"541f89a5e4b01498b1a71a99"},{"code":"#(if (%1 %2) false (if (contains? %2 %1) true false))","problem":134,"user":"4faec810e4b081705acca24e"},{"code":"(fn [k m]  (if (nil? (get m k false)) true false))","problem":134,"user":"4eb2eae5535d7eef30807351"},{"problem":134,"code":"(fn [k map1] \n  (if (contains? map1 k)\n    (if (= (get map1 k) nil)\n      true\n      false)\n    false)\n  )","user":"5527ac3fe4b0ffed3738f933"},{"problem":134,"code":"(fn [k l]\n          (and (contains? l k)\n               (nil? (k l))))","user":"5331205fe4b019098a6f8b64"},{"problem":134,"code":"(fn [k m]\n  (and\n    (contains? m k)\n    (nil? (get m k))\n    ))","user":"57fc5e42e4b0d3187e900997"},{"code":"(fn [key map] (if (and (contains? map key) (= (map key) nil)) true false))","problem":134,"user":"4f17df72535d64f603146458"},{"code":"(fn [k m]\n  (let [contained (contains? m k)]\n    (if contained\n      (nil? (m k))\n      contained)))","problem":134,"user":"5263c44fe4b03e8d9a4a70b8"},{"code":"#(if (nil? (find %2 %)) false (nil? (% %2)))","problem":134,"user":"51823a97e4b0f2adb733651e"},{"problem":134,"code":"#(and (contains? %2 %1) (= nil (%2 %1)))\n\n;(fn [x y] (and (contains? y x) (= nil (y x))))","user":"55c387e4e4b0e31453f6498b"},{"code":"#(nil? (% %2 :other))","problem":134,"user":"503dea56e4b06c4e0e1fa25a"},{"code":"(fn [key map] (and (not= () (select-keys map [key])) (= {key nil} (select-keys map [key]))))","problem":134,"user":"4ec1b090535dfed6da9c6db5"},{"problem":134,"code":"(fn [a b] (and (contains? b a) (= (a b) nil) true))","user":"546c1375e4b00cfc9eacc173"},{"code":"(fn [v m] (and (contains? m v) (nil? (v m))))","problem":134,"user":"52c00263e4b07a9af579233f"},{"code":"(fn [x y] (nil? (get y x \"missing\")))","problem":134,"user":"4f748b54e4b044e54cd9a8fa"},{"problem":134,"code":"(fn nil-checker\n  [key col]\n  (and (contains? col key) (= (key col) nil)))","user":"5f6adf5ee4b02876ed9fd049"},{"code":"#(= nil (get %2 %1 true))","problem":134,"user":"51e1a1fae4b06a68e693eaf6"},{"code":"(fn [key seq]\n    (if (= nil (get seq key false))\n      true\n      false))","problem":134,"user":"530b9714e4b02e82168697cf"},{"code":"(fn [k m] \n          (and (contains? m k)\n               (nil? (m k))))","problem":134,"user":"52c6f6dee4b0c2d177d62118"},{"problem":134,"code":"#(nil? (% %2 %))","user":"502b0804e4b063e52107afad"},{"code":"(fn [k m] (if (and (contains? m k) (= (k m) nil)) true false))","problem":134,"user":"4efd98fa535de96065cf5086"},{"code":"(fn [key map]  \n  (if (contains? map key)\n    (=(get map key) nil)\n  \tfalse))","problem":134,"user":"5238beb3e4b0d705d026eef3"},{"code":"(fn [x y] (nil?(get y x false)))","problem":134,"user":"4fb0be97e4b081705acca26c"},{"problem":134,"code":"(fn [k m]\n  (if-not (get m k true) true false))","user":"54bd6cb2e4b0ed20f4ff6ede"},{"code":"(fn nil_value? [key, map] (and (contains? map key) (nil? (get map key))))","problem":134,"user":"51e6786ae4b0ab43cc26c216"},{"problem":134,"code":"(fn my-fun [key map-in] (if (and (contains? map-in key) (= (key map-in) nil)) true false))","user":"571d9669e4b0145328a7627f"},{"code":"(fn [key col]\n  (if (contains? col key)\n    (if (= (col key) nil)\n      true\n      false)\n    false))","problem":134,"user":"501dfd54e4b051153f3b5b80"},{"problem":134,"code":"(fn checkMap [m k]\n  ( if (and (contains? k m) (= nil (m k) )) \n    true false\n  ) \n)","user":"56405959e4b08d4f616f5ee1"},{"problem":134,"code":"(fn isNil\n  [key map]\n  (if (and (= (get map key) nil) (contains? map key))\n    true\n    false))","user":"55355397e4b09218d5f44fae"},{"problem":134,"code":"(fn nilk\n  [x y]\n  (let [ada (first (filter #(= (first %) x) (vec y)))]\n    (cond \n      (= ada nil) false\n      (and (= (first ada) x) (= (second ada) nil)) true\n      :else false)))","user":"581829cce4b0c0e9c07b83a9"},{"code":"(fn [key map]\n  (if (and (contains? map key) (= (map key) nil))\n    true\n    false))","problem":134,"user":"4fa313bbe4b081705acca188"},{"code":"(fn [val map] (and (contains? map val) (nil? (map val))))","problem":134,"user":"4ec07699535dfed6da9c6da2"},{"code":"(fn [m k] (not (m k :empty)))","problem":134,"user":"5047eadde4b0ec70b3ef8d94"},{"code":"(fn [x, coll] \n    (if (contains? coll x)\n        (nil? (x coll))\n         false))","problem":134,"user":"4f6b4237e4b07046d9f4efa9"},{"code":"(fn [s m] \n  (cond \n   (contains? m s) (nil? (m s))\n   :else false))","problem":134,"user":"5154fa3fe4b0179c5115f4e6"},{"problem":134,"code":"(fn [k m] (if (= nil (k m \"unknown\")) true false))","user":"590c449ae4b047aa04b199ea"},{"problem":134,"code":"(fn [k c] (nil? (get c k 1)))","user":"5ab9fe71e4b073f17744269d"},{"code":"(fn [k m] \n  (and          \n   (not (nil? ((set (keys m)) k)))\n   (nil? (m k))))","problem":134,"user":"517d1018e4b0f5e87c18f25e"},{"code":"(fn nilkey [k, m] (and (contains? m k) (nil? (k m))))","problem":134,"user":"510931ede4b0c71f76895663"},{"code":"#(= (get %2 %1 :n) nil)","problem":134,"user":"508c33ece4b0f17d83ea26b1"},{"code":"#(nil? (%1 %2 :d))","problem":134,"user":"506ba58be4b0eda3100c090b"},{"problem":134,"code":"(fn [a b] (\n           nil? (get b a false)\n           ))","user":"5e138826e4b099d064962ffd"},{"code":"#( and ( contains? %2 %1 ) (= (%2 %1) nil ) )","problem":134,"user":"51aa4eede4b04e3dc0c27b25"},{"problem":134,"code":"(fn [k col] (\n             and\n        (contains? col k)\n             (= (k col) nil)\n        \n        ))","user":"5984b9f3e4b021a7a535fe33"},{"problem":134,"code":"(fn\n  [a b]\n  (if (contains? b a) (nil? (a b))\n    false))","user":"55e732c5e4b050e68259b492"},{"problem":134,"code":"(fn [key map] (= nil (get map key \"not found\")))","user":"5aa83838e4b0d174b936c8c7"},{"problem":134,"code":"(fn [i m]\n  \n  ;(if (contains? m i)\n  ;  (= (m i) nil)\n  ;  false\n  ;  ))\n  (and (contains? m i) (= (m i) nil) )\n  \n  )","user":"56f2611fe4b04a395b9a04a2"},{"code":"(fn [k xs]\n    (and (contains? xs k) (= nil (k xs))))","problem":134,"user":"506b0a9ce4b0a2a5463de380"},{"problem":134,"code":"(fn [k coll] (nil? (get coll k true)))","user":"53e27bf1e4b036ad0777e3f2"},{"problem":134,"code":"(fn [a b]\n  (nil? (get b a true)))","user":"59636b49e4b066ee0a44b0c5"},{"problem":134,"code":"#(if (contains? %2 %1)\n              (if (= nil (get %2 %1)) \n                 true \n                 false)\n              false)","user":"55dfada4e4b050e68259b3fd"},{"problem":134,"code":"(fn [key collection]\n(and (contains? collection key) (nil?\n(get collection key))))","user":"58445c3ce4b089d5ab817e49"},{"problem":134,"code":"(fn iffnil [k m] \n    (if (contains? m k)\n      (nil? (k m))\n      false\n    )\n  )","user":"571aae1fe4b07c98581c3b5a"},{"problem":134,"code":"(fn [k coll] (if-not (contains? coll k) false (nil? (k coll))))","user":"553fe819e4b0a04f792994fc"},{"problem":134,"code":"(fn [k m] \n  (and (nil? (get m k)) (contains? m k)))","user":"57dd5e90e4b0bd073c202440"},{"problem":134,"code":"#(nil? (%1 %2 \"not exist\"))","user":"54f773bfe4b01ecee9d8881f"},{"code":"(fn [x y] (= nil (get y x :not-found-yo)))","problem":134,"user":"4de52c87535d08e6dec9fdf0"},{"problem":134,"code":"(fn [item-key item-map] (if (contains? item-map item-key) (= nil (get item-map item-key)) false))","user":"5a781494e4b013a48d399766"},{"code":"#(if (and (contains?  %2 %1) (nil? (%1 %2))) true false)","problem":134,"user":"52c45ac8e4b0c2d177d620d9"},{"problem":134,"code":"(fn nil-key? [key map]\n  (and (contains? map key) (nil? (key map))))","user":"601aaa93e4b0bf4ca6b10926"},{"code":"(fn [x y] (if (contains? y x)\n                (nil? (x y))\n                  false))","problem":134,"user":"50503117e4b0a02f9cffdeb5"},{"problem":134,"code":"(fn [key1 map1]\n  (if \n    (= nil (get map1 key1 false))\n    true\n    false\n  )\n)","user":"5d4df658e4b0776584bd6f41"},{"code":"#(boolean (and (nil? (%1 %2)) (contains? %2 %1)))","problem":134,"user":"504e2333e4b0f6ff3350c46c"},{"problem":134,"code":"(fn [x data]\n  (if (and (contains? data x) (= (x data) nil))\n     true\n     false))","user":"56339e23e4b0bfe05bf117b1"},{"problem":134,"code":"#(if (nil? (get %2 %1 :not-found)) true false)","user":"555efec1e4b0a2eb076a39be"},{"problem":134,"code":"#(nil? (%1 %2 some))","user":"5a7f77fae4b00b71e582a041"},{"problem":134,"code":"(fn [x y]\n        \n       (if(and (contains? y x)(= (nil? (get y x)) true)) true false)\n       \n        )","user":"58b6d93ce4b0ebc645576d6c"},{"code":"(fn [k, m] (and (contains? m k) (nil? (m k))))\n; (k in m enthalten ) und (Wert zu k ist nil)","problem":134,"user":"5207d70ae4b03bd50ef54675"},{"code":"(fn [k m] \n  (if ( and (not (= nil (find m k))) (= nil (get m k))) \n    true \n    false))","problem":134,"user":"5101192ae4b0bef64c30e266"},{"code":"#(= nil (%2 % -))","problem":134,"user":"4db858d1535d1e037afb218c"},{"problem":134,"code":"(fn [k m] (and (contains? m k)(= nil (m k))))","user":"5ef78be1e4b09b61f08553c3"},{"code":"#(nil? (%2 %1 :default))","problem":134,"user":"520693e1e4b0bf4f1882c829"},{"problem":134,"code":"(fn [k mp]\n  (if (contains? mp k)\n    (= (mp k) nil)\n    false))","user":"60bf22dce4b0e0fa5f1b4290"},{"code":"(fn [k d] (and (contains? d k) (nil? (k d))))","problem":134,"user":"4ffb59f6e4b0678c553fc3cf"},{"code":"(fn cont [k m] (nil? ( k m 1)))","problem":134,"user":"5098f803e4b0cae2931060a5"},{"problem":134,"code":"#(if (contains? %2 %1) (= (%2 %1) nil) false )","user":"57722ce2e4b0979f896515c4"},{"problem":134,"code":"(fn [keyx colly] (and (contains? colly keyx) (nil? (get colly keyx))))","user":"54de7948e4b024c67c0cf7a4"},{"code":"(fn [valor map]\n  (= (valor map 0) nil)\n)","problem":134,"user":"4ee02256535d10e5ff6f534e"},{"problem":134,"code":"(fn [k m]\n   (= nil (get m k :nope)))","user":"57befca6e4b05aa3c4741c70"},{"code":"(fn [key map]\n  (if (contains? map key)\n    (nil? (key map))\n    false))","problem":134,"user":"4ed92fd6535d10e5ff6f5300"},{"problem":134,"code":"(fn [key dict]\n  (= (key dict :not-nil) nil)\n)","user":"552af5ebe4b0ffed3738f95b"},{"problem":134,"code":"(fn [k m]\n  (nil?(m k false)))","user":"57c500f9e4b05aa3c4741cda"},{"code":"#(nil? (get %2 %1 '_))","problem":134,"user":"52381b2ae4b0fae3832e99ef"},{"problem":134,"code":"#(and (contains? %2 %1) \n      (nil? (get %2 %1)))","user":"5574c172e4b05c286339e059"},{"code":"(fn [elem coll]\n  (loop [e elem, c coll]\n    (if (nil? (get c e \"\")) true false)))","problem":134,"user":"50a83794e4b054305ba5a831"},{"code":"(fn [a b] (if (contains? b a) (nil? (a b)) false))","problem":134,"user":"4f040bbf535dcb61093f6b95"},{"problem":134,"code":"(fn [k items]\n   (if (contains? items k)\n     (nil? (k items))\n     false))","user":"5b13763be4b0cc2b61a3be4f"},{"problem":134,"code":"(fn super-get [key hmap]\n  (nil? (get hmap key false)))","user":"5649b1b0e4b0284900eef646"},{"problem":134,"code":"(fn [k m]\n  (let [m (first (filter (fn [kv]\n                           (= (first kv) k))\n                         m))]\n    (if (seq m)\n      (nil? (second m))\n      false)))","user":"54d321b3e4b0e8a36923e602"},{"problem":134,"code":"(fn f [k m]\n\t(and (contains? m k)\n\t\t(nil? (m k))))","user":"58d9772de4b0a4d5acaab63c"},{"problem":134,"code":"(fn [k mymap] (and (contains? mymap k) \n                   (= (mymap k) nil)))","user":"564b1f34e4b0284900eef662"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (= (%1 %2) nil)\n   false)","user":"55efc44ee4b066087aa9453e"},{"code":"(fn [k m] (and (contains? m k) (= nil (get m k))))","problem":134,"user":"4ecfa05c535d44c135fd68b9"},{"problem":134,"code":"(fn [key-p map-p]\n  (if (contains? map-p key-p)\n    (= (key-p map-p) nil)\n    false))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":134,"code":"(fn [k m] (if (and (contains? m k) (= nil (get m k))) true false))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":134,"code":"(fn [aKey, aList] (and (contains? aList aKey) (nil? (get aList aKey))))","user":"548018dbe4b0c51c1f4d732b"},{"code":"(fn [key,map] (= nil (get map key \"key does not exist\")))","problem":134,"user":"4f03396d535dcb61093f6a7b"},{"problem":134,"code":"#(if-not (contains? %2 %1) false (nil? (%1 %2)))","user":"54b5b3cce4b05787c3b163ab"},{"problem":134,"code":"(fn [x y] (if (contains? y x) (if (nil? (y x)) true false) false))","user":"53e902a5e4b036ad0777e491"},{"problem":134,"code":"(fn [elem mapa] (= (mapa elem \"\") nil))","user":"5aa7a64ce4b0d174b936c8bd"},{"code":"(fn is-nil [key map]\n  (and (contains? map key) (= (key map) nil)))","problem":134,"user":"4f9e3fd4e4b0dcca54ed6d2b"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k) \n    (nil? (m k)) \n    false))","user":"55a9fe1ce4b0988bba2ad947"},{"code":"(fn([e m] (nil?(m e \"n\"))))","problem":134,"user":"53752b27e4b06839e8705e12"},{"problem":134,"code":"(fn [k m] (= nil (get m k \"missing\")))","user":"5f6cb2a5e4b02876ed9fd057"},{"problem":134,"code":"(fn [x y] (if (and (contains? y x) (nil? (get y x)))true false))","user":"5476d6cae4b0c51c1f4d72aa"},{"code":"(fn [k m]\n  (and (nil? (m k))\n       (contains? m k)))","problem":134,"user":"516bef10e4b005fd0cdf85c8"},{"code":"(fn [key m] (not (nil? (some #{[key nil]} m))))","problem":134,"user":"4ed55b5d535d10e5ff6f52d8"},{"problem":134,"code":"(fn [k map]\n  (if (contains? map k)\n  \t(if (nil? (k map))\n    \ttrue\n    \tfalse)\n  false))","user":"55fb41a6e4b0f488688e065f"},{"code":"#(and ((complement nil?) (find %2 %)) (nil? (% %2)))","problem":134,"user":"50045388e4b0678c553fc44e"},{"code":"(fn [k mp]\n  (and\n   (contains? mp k)\n  \t(= (get mp k) nil)))","problem":134,"user":"52091d57e4b0e152394d76f0"},{"problem":134,"code":"(fn\n  [k m]\n  (nil? (get m k 1)))","user":"5e1c24f4e4b0dc959400852d"},{"code":"(fn [key lst]\n  (= nil (lst key \"false\")))","problem":134,"user":"4fbef9a6e4b081705acca316"},{"problem":134,"code":"(fn [k c] \n   (and (contains? c k) \n        (= (get c k) nil)))","user":"52ced458e4b07d0d72b27394"},{"code":"(fn [key map]\n  (identical? (contains? map key) (= (get map key) nil)))","problem":134,"user":"4ed4798f535d10e5ff6f52cc"},{"code":"(fn [idx coll]\n  (and (contains? coll idx)\n       (nil? (get coll idx))))","problem":134,"user":"51ab4082e4b04e3dc0c27b31"},{"code":"#(and (contains? %2 %1) (= nil (.get %2 %1)))","problem":134,"user":"4f515bd3e4b03ad3f0c10d1f"},{"problem":134,"code":"(fn [k m] (and (contains? m k)\n           (nil? (k m))\n           ))","user":"591ac8ece4b09b4ee5954bdd"},{"code":"(fn [key map] (if (and (contains? map key) (nil? (map key))) true false))","problem":134,"user":"4e707714535d5021c1a89638"},{"code":"(fn [key map']\n  (= nil (get map' key false)))","problem":134,"user":"526e5be8e4b03e8d9a4a731c"},{"problem":134,"code":"(fn[k m](if (contains? m k) (nil? (get m k)) false))","user":"55631739e4b0c656e3ff17e2"},{"problem":134,"code":"#(if (contains? %2 %1)\n  (= (%1 %2) nil)\n  false)","user":"54a1d047e4b09f271ff37c4f"},{"problem":134,"code":"(fn [k mp]\n  (if (some #(= k %) (keys mp))\n    (if (= nil (mp k))\n      true false)\n    false)\n  )","user":"5fb29949e4b08cb800c85b2a"},{"problem":134,"code":"(fn nil-val? [key map]\n        (and (= nil (get map key)) (.contains (.keySet map) key)))","user":"537f8e7be4b06839e8705eb8"},{"code":"(fn [k coll] (and (contains? coll k ) (nil? (coll k))))","problem":134,"user":"4ec28d86535dfed6da9c6dbc"},{"code":"#(and (contains? %2 %1) (not (apply %1 (list %2))))","problem":134,"user":"531792d9e4b08068f379ed5e"},{"problem":134,"code":"(fn [key map]\n  (nil? (get map key 0)))","user":"55ccdc6be4b0e31453f64a18"},{"problem":134,"code":"(fn nilkey [key map] (if (contains? map key) (= (get map key) nil)false ))","user":"5ac37d0fe4b0e27600da7718"},{"code":"#(nil? (get-in %2 [%1] false))","problem":134,"user":"524f4256e4b0541d1855b808"},{"code":"#(not (get %2 % 1))","problem":134,"user":"4e6a5a32535d8ccf87e9fed0"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"not found\")))","user":"549dfe40e4b0f3d1d8e70f9a"},{"code":"(fn [x coll] (and (contains? coll x) (nil? (coll x))))","problem":134,"user":"4daf36c2edd6309eace4d175"},{"code":"#(if (contains? %2 %1)\n  \t(nil? (get %2 %1))\n         false)","problem":134,"user":"511b810ce4b07ab9ec456182"},{"problem":134,"code":"(fn [k m] (= nil (get m k :err)))","user":"56679f30e4b04acd4f672dda"},{"problem":134,"code":"(fn [k v]\n  (nil? (get v k :none)))","user":"52a85d20e4b0c58976d9ac2c"},{"problem":134,"code":"(fn go [key map]\n  (if (and (contains? map key) (identical? (key map) nil)) true false))","user":"5e83a273e4b09a7a73c8bbbb"},{"code":"(fn [key, map] (and (contains? map key) (= (get map key) nil)))","problem":134,"user":"5394162be4b0b51d73faaec5"},{"code":"(fn [key map] (and (contains? map key) (= nil (key map))))","problem":134,"user":"4e6ac593535d8ccf87e9ff02"},{"code":"(fn [chave x]\n  (loop [hashmap x]\n    (if (empty? hashmap)\n      false\n      (if (= chave (first (first (take (- (count hashmap) 1) hashmap ))))\n         true\n         (recur (drop 1 hashmap))\n      )\n    )\n  )\n)","problem":134,"user":"4e94a9e7535dbda64a6f6b1d"},{"problem":134,"code":"(fn [k v]\n  (= (get v k 'no) nil))","user":"53aaaf7ae4b047364c044444"},{"problem":134,"code":"(fn [k vs] (and (boolean (find vs k)) (nil? (k vs))))","user":"58d2b7b3e4b03c36ff7e5908"},{"problem":134,"code":"#(and (contains? %2 %)\n      (nil? (get %2 %)))","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"#(= nil (if (contains? %2 %1)\n  (%1 %2)\n  false\n  ))","problem":134,"user":"4fb3c249e4b081705acca2a3"},{"code":"#(nil? (get %2 %1 :not-found))","problem":134,"user":"4eb5750a535d7eef30807366"},{"problem":134,"code":"(fn [key l] (nil? (get l key 1)))","user":"56e7ebcce4b02e7e935eb6e2"},{"problem":134,"code":"#(= nil (get %2 %1 true) )","user":"58224c53e4b04b46fc4b0f92"},{"problem":134,"code":"(fn [k m]\n\t(print k m)\n\t(if (and (contains? m k) (nil? (get m k))) true false ))","user":"5935151ee4b072a2710fd084"},{"code":"(fn \n  [key-word coll]\n  (= (key-word coll :not-found) nil))","problem":134,"user":"51a4d802e4b0def3c5c5869a"},{"problem":134,"code":"(fn [key coll]\n  (if (contains? coll key)\n    (nil? (key coll))\n    false))","user":"56e24e68e4b03a7c14b85a34"},{"problem":134,"code":"(fn [x y] (if (contains? y x)(= (x y) nil) false))","user":"5eedfc62e4b07c55ae4a050e"},{"problem":134,"code":"#(= nil (%1 %2 \"!\"))","user":"5f32f69ae4b0574c87022c35"},{"problem":134,"code":"(fn [i m] (if (nil? (if (contains? m i)(m i) false)) true false))","user":"575ab695e4b02ea114799350"},{"problem":134,"code":"(fn [key, map] (= (contains? map key) (nil? (get map key))))","user":"562528d4e4b00a550fc90292"},{"code":"(fn \n   [key map]\n   (and (nil? (map key)) (contains? map key)) )","problem":134,"user":"535d21ade4b04ce2eb3ed2bb"},{"code":"(fn [k coll] (and (nil? (coll k)) (contains? coll k) ))","problem":134,"user":"536c7f32e4b0fc7073fd6e40"},{"problem":134,"code":"(fn [k m]\n  (nil? (m k 0)))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":134,"code":"(fn [k m] (and (not (nil? (some #{k} (keys m)))) (nil? (k m))))","user":"5de8648de4b0986d99407f7c"},{"problem":134,"code":"(fn [ky mp] \n  (if (contains? mp ky)\n    (= (mp ky) nil)\n    false)\n  )","user":"6075c214e4b069485764de5b"},{"code":"#(= nil (%1 %2 0))","problem":134,"user":"4dc78527535d8a4b2fd7428f"},{"problem":134,"code":"(fn [k m] (if (contains? m k)(nil? (m k)) false ))","user":"568ad3c2e4b0dcc4269f4097"},{"problem":134,"code":"; (fn [k h] (and (contains? h k) (= (k h) nil)))\n; (fn [k h] (and (contains? h k) (= (h k) nil)))\n#(and (contains? %2 %1) (= (%2 %1) nil))","user":"57e37f90e4b0bfb2137f5a9c"},{"problem":134,"code":"(fn [k,mp] (= (k mp :no) nil))","user":"5f686436e4b02876ed9fd03c"},{"code":"(fn [ky mp] (if (contains? mp ky) (if (nil? (mp ky)) true false) false))","problem":134,"user":"5116afdee4b0063b4e3e16d5"},{"problem":134,"code":"(fn my-is-nil [k m] (= nil (get m k :not-found)))","user":"5d25578de4b02ea6f0fb6a33"},{"problem":134,"code":"(fn [key map]\n\t(and (contains? map key) (= nil (get map key)))\n  )","user":"5a39e36ce4b001c08efc0cbc"},{"problem":134,"code":"(fn [k l] \n\t(and (contains? l k) (nil? (get l k) ))\n)","user":"548018dbe4b0c51c1f4d732a"},{"problem":134,"code":"(fn [kVal mapInp] (if(contains? mapInp kVal)\n                    (if(nil? (mapInp kVal))\n                    true\n                    false\n                    )\n                    false\n                    )\n  )","user":"51fea7d7e4b0f1313d468a74"},{"problem":134,"code":"(fn [aKey aMap] (nil? (aMap aKey false)))","user":"5614ebc5e4b05f002753dfbc"},{"code":"(fn tmp [key map] (= nil (get map key :a)))","problem":134,"user":"4fb1325de4b081705acca276"},{"problem":134,"code":"#(if (contains? %2 %1)\n    (nil?(get %2 %1))\n   \t(Boolean/FALSE))","user":"5915a0a5e4b09b4ee5954b73"},{"code":"(fn gets [search x] (cond\n      (empty? x) false\n      (nil? (get x search 0)) true\n      :else (gets search (rest x))))","problem":134,"user":"50d4dde8e4b09cc622d65a72"},{"problem":134,"code":"(fn [key map] (= nil (get map key :nonnil)))","user":"51a132cee4b0b292b01ee3ff"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n   (if (= (m k) nil)\n     true\n     false)\n    false))","user":"5470cb10e4b094393f72dd65"},{"problem":134,"code":"(fn [k coll] (and (contains? coll k)\n                  (nil? (k coll))))","user":"555b3919e4b0deb715856e4c"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (= (get m k) nil)\n    false\n  )\n)","problem":134,"user":"4eeb2b3c535d93acb0a668a7"},{"code":"(fn [key map]\r\n  (let [val (get map key :not-found)]\r\n    (and (not= val :not-found) (nil? val))))","problem":134,"user":"4f2893d0e4b0d6649770a019"},{"code":"(fn  [k m] (and (contains? m k) (= nil (k m))))","problem":134,"user":"4eadc217535d7eef30807321"},{"code":"(fn [item m] \n  (and \n   (contains? m item) \n   (= (get m item) nil)))","problem":134,"user":"5260341ee4b03e8d9a4a7034"},{"code":"(fn key-finder [k m]\n  (and (not (nil? (some #(= k %) (keys m)))) \n       (nil? (k m))))","problem":134,"user":"4ddb339c535d02782fcbe9f9"},{"code":"(fn [e coll]\r\n     (true? (and (contains? coll e)\r\n\t\t       (nil? (coll e)))))","problem":134,"user":"4e028764535d04ed9115e790"},{"problem":134,"code":"#(and (contains? %2 %1)\n       (= nil (%1 %2)))","user":"5586f418e4b059ccff29b1de"},{"problem":134,"code":"#(and (contains? %2 %1) (=  (get %2 %1) nil))","user":"57fe68e2e4b0d3187e9009ce"},{"problem":134,"code":"(fn testme [k m] (= (k m false) nil))","user":"53beacf9e4b0d9a98559a6e3"},{"code":"#(= (find %2 %1) [%1 nil])","problem":134,"user":"4dc986d0535d5973398f9285"},{"code":"(fn [k, m]\n  (and\n    (contains? m k)\n    (nil? (m k))\n   ))","problem":134,"user":"522a1248e4b0590a43906cf3"},{"problem":134,"code":"(fn [x m]\n  (not (get m x true)))","user":"57716e11e4b0979f896515b2"},{"problem":134,"code":"(fn [q m]\n   (and \n    (contains? m q)\n    (= (m q) nil))\n)","user":"5e08c3dde4b0978307768fc8"},{"code":"(fn [key m]\n  (and (contains? m key) (nil? (m key))) )","problem":134,"user":"517e9f92e4b09104ecebe7e4"},{"code":"(fn [k m] (if (contains? m k) (if-not (m k) true false) false))","problem":134,"user":"4e8a0c82535d3e98b802328d"},{"problem":134,"code":"(fn [k m]\n  (and\n    (true? (some #(= % k) (keys m)))\n    (nil? (k m))))","user":"5d13af73e4b0902706380dbe"},{"problem":134,"code":"(fn containsnil? [mapkey mapp]\n  (if (contains? mapp mapkey)\n    (true? (= nil (get mapp mapkey)))\n    false))","user":"4e5696d0535d8a8b8723a284"},{"problem":134,"code":"(fn [key map]\n  (if (and \n       (nil? (key map))\n       (contains? map key))\n    true\n    false))","user":"580a0783e4b0a837a8b30d2c"},{"problem":134,"code":"(fn [x y] \n  (and\n    (contains? y x)\n  \t(nil? (x y))\n   )\n )","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":134,"code":"(fn [a mp] (and (contains? mp a) (not (a mp))))","user":"54e540c1e4b024c67c0cf7f9"},{"code":"(fn [a-key a-map]\n  (and\n    (contains? a-map a-key)\n    (nil? (a-key a-map))))","problem":134,"user":"531dc21be4b08068f379edb1"},{"problem":134,"code":"(fn [x m] \n  (if (and (contains? m x) (nil? (get m x)))\n    true\n    false))","user":"5800ab1ee4b0a837a8b30c41"},{"problem":134,"code":"(fn getnil [x y] (nil? (x y false)))","user":"592518e8e4b072a2710fce67"},{"code":"(fn [key col] \n  (and (contains? col key) (= (col key) nil)))","problem":134,"user":"504e6165e4b0f6ff3350c4aa"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)\n       (nil? (m k)))\n  )","user":"57afd36de4b0fbc9809a273c"},{"problem":134,"code":"(fn[key map]\n  (if (contains? map key)\n    (= (get map key) nil)\n    false))","user":"5c115097e4b01240ff567172"},{"problem":134,"code":"#(not (%2 %1 true))\n\n;(fn [m ks]\n;  (and (contains? ks m) (nil? (m ks))))","user":"55b42706e4b01b9910ae297b"},{"problem":134,"code":"(fn nilval [k m] (let [kv (find m k)] (and (not (nil? kv)) (nil? (second kv)))))","user":"5b774e66e4b047b03b2036ec"},{"code":"(fn [k m]\n  (and (contains? m k) (nil? (get m k))))","problem":134,"user":"4faa5735e4b081705acca1ee"},{"code":"(fn [k m]\n  \t(if (contains? m k)  \t\n  \t\t(nil? (k m))\n      \tfalse\n      ))","problem":134,"user":"510ec1bce4b07438aa321461"},{"code":"(fn [k m] (and (contains? m k) (= (get m k false) nil)))","problem":134,"user":"506d5e4ce4b0a302964c5493"},{"code":"(fn [key map]\n  (if (= (key map false) nil)\n    true\n    false))","problem":134,"user":"53415755e4b00652c8746ecd"},{"problem":134,"code":"(fn [k xs]\n  (if (contains? xs k)\n    (nil? (k xs))\n    false))","user":"5c11812ee4b01240ff56717b"},{"code":"#(and (nil? (%2 %)) (.contains (keys %2) %))","problem":134,"user":"50e4f4e9e4b049a987753896"},{"problem":134,"code":"(fn [key the-map] (nil? (get the-map key \"default\")))","user":"555bd27ae4b0b056612e2244"},{"code":"(fn nil-key? [x m]\n  (and (contains? m x) (nil? (get m x))))","problem":134,"user":"51489a72e4b05514c84b7cc1"},{"code":"(fn [k m]\n  (if (nil? (get m k :notfound))\n    true\n    false))","problem":134,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn [a b] (if (and (contains? b a) (= (a b) nil)) true false))","problem":134,"user":"52a3c66ce4b04e0c58e87c04"},{"code":"(fn [k x] (and (contains? x k) \n               (nil? (get x k))))","problem":134,"user":"522600cfe4b0f4c7e20d29c8"},{"code":"(fn [k m] \n  (if (contains? m k)\n    (nil? (m k))\n    false\n  )\n )","problem":134,"user":"51db8244e4b0e067a9bbadc7"},{"problem":134,"code":"(fn [key col]\n  (and (contains? col key) (nil? (get col key))))\n\n;fn [key coll] \n;  (and (contains? coll key) (nil? (get coll key))))","user":"56b17337e4b0982f16b37deb"},{"problem":134,"code":"(fn [key coll] (and (contains? coll key) (= nil (get coll key))))","user":"5b2d1c1de4b025bcb146f2c0"},{"code":"#(if \n  (and \n    (contains? %2 %1) \n    (= nil (%2 %1)))\n  true \n  false)","problem":134,"user":"4ea00469535d7eef3080729d"},{"code":"#(nil? (get %2 %1 'not-here))","problem":134,"user":"504e397ee4b0f6ff3350c485"},{"code":"(fn [key coll]\n   (if-not (contains? coll key) false\n        (nil? (key coll))))","problem":134,"user":"5202cfe7e4b030ee0c5b2702"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (if (nil? (get m k)) true false)\n    false))","user":"5b73e500e4b047b03b2036ba"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (= nil (m k) ) ) )","user":"56979bb7e4b0e0b3d3318cac"},{"code":"(fn [k m]\r\n  (and\r\n    (contains? m k)\r\n    (nil? (k m))))","problem":134,"user":"4e8dd6cb535d65386fec213b"},{"code":"#(nil? (%2 % :nf))","problem":134,"user":"4e6a3b79535d8ccf87e9feb3"},{"code":"(fn [k kv] (if (contains? kv k) (nil? (kv k)) false))","problem":134,"user":"5131d817e4b06942423563ca"},{"code":"(fn [key hash]\n  (and\n    (contains? hash key)\n    (nil? (key hash))))","problem":134,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":134,"code":"(fn [x xs]\n  (let [v (find xs x)]\n    (if (and (> (count v) 1) (nil? (second v)))\n             true\n             false)))","user":"571b900ae4b07c98581c3b69"},{"problem":134,"code":"(fn [k col] (nil? (get col k \"No\")))","user":"5c1ec762e4b0efcb0b05b25a"},{"code":"(fn meow [k m]\n  \t(= nil (k m :asdfasdfasdf)))","problem":134,"user":"513e9676e4b02b2a3d8235c3"},{"problem":134,"code":"(fn [x m] (nil? (m x 0)))","user":"53ee7f2ee4b0d648e757f4cf"},{"code":"(fn [key map] (if (contains? map key) (nil? (key map)) false))","problem":134,"user":"52173464e4b082aa80a88c75"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n  \t(nil? (k m))\n  false))","user":"5ad9ce93e4b0ea6055cfac3c"},{"problem":134,"code":"(fn [key map]\n  (if (and (contains? map key)\n           (nil? (get map key)))\n    true\n    false)\n)","user":"5d07989ee4b0cc9c915881fb"},{"problem":134,"code":"#(nil? (get %2 %1 ::not-found))","user":"5c87d2cbe4b048ec896c591c"},{"problem":134,"code":"(fn [a b] (and (contains? b a) (not (get b a))))","user":"58273e82e4b051871117bf1b"},{"code":"#(= nil (get %2 %1 0))","problem":134,"user":"4fde492be4b05e33b9224f8a"},{"problem":134,"code":"#_#(if (and (contains? %2 %) (= nil (% %2)))\n     true\n     false)\n\n\n#(= nil (% %2 0))","user":"5cd16529e4b0ccb0619628e7"},{"problem":134,"code":"(fn isthereandempty \n  [k s]\n  (if \n    (k (set (keys s))) \n    (= nil (k s))\n    false))","user":"57ed8315e4b0bfb2137f5b9a"},{"code":"(fn [k m] \n  (if (contains? m k)\n    (= nil (get m k))\n    false\n  ))","problem":134,"user":"513f400ae4b051389b345b3f"},{"code":"#(= (get %2 %1 :absent) nil)","problem":134,"user":"4eae5fe4535d7eef30807325"},{"problem":134,"code":"(fn [x y] (= nil(get y x \"not-found\")))","user":"54e604a1e4b024c67c0cf801"},{"problem":134,"code":"(fn [kw hmap]\n  (if (contains? hmap kw)\n    (if (nil? (kw hmap))\n      true\n      false)\n    false))","user":"57e8f54be4b0bfb2137f5b1d"},{"code":"(fn [s m] (and (contains? m s) (nil? (s m))))","problem":134,"user":"4e6e97ca535d5021c1a8960c"},{"code":"(fn [key a-map]\n  (and \n    (contains? a-map key) \n    (nil? (a-map key))))","problem":134,"user":"4f3d83b5e4b0e243712b1f69"},{"code":"(fn [k m]\n  (if (= (get m k :nf) nil) true false))","problem":134,"user":"511618b1e4b0d4f670fd2fdf"},{"code":"(fn [e ht] (and (= nil (e ht)) (contains? ht e)))","problem":134,"user":"525ff1e3e4b03e8d9a4a7028"},{"problem":134,"code":"(fn [k m] (= (get m k true) nil))","user":"5cd438c8e4b0ccb061962917"},{"problem":134,"code":"(fn t [k m] (if (contains? m k) (= (get m k) nil) false))\n;(fn t [k m] (= (get m k) nil))","user":"561bed95e4b064ca9f4b168d"},{"problem":134,"code":";(fn [k m] \n;  (and\n;  \t(= nil (k m))\n;    (= {k nil} (select-keys m [k]))))\n\n#(not (%2 %1 true))","user":"56611834e4b068f2fe63dc62"},{"problem":134,"code":"(fn [x m] (if (contains? m x) (= (get m x) nil) false))","user":"603f6623e4b0d5df2af2231f"},{"problem":134,"code":"(fn key-eq-nil [k, m] (if (contains? m k) (= (k m) nil) false))","user":"58ff5898e4b0438e51c2cfec"},{"code":"(fn [c k]\n   (if (contains? k c) (if (nil? (c k)) true false) false)\n)","problem":134,"user":"4fc7b079e4b0ee37620e1827"},{"code":"(fn [k m] (and (contains? m k) (nil? (get m k))))","problem":134,"user":"4e46e48b535dc968683fc4b7"},{"problem":134,"code":"(fn has-nil-key? [k m]\n  (if (contains? m k)\n    (if (nil? (k m))\n      true\n      false)\n    false))","user":"569f99cce4b0542e1f8d1497"},{"code":"#(and (nil? (%2 %1)) (contains? %2 %1))","problem":134,"user":"4e3456f9535deb9a81d77f2a"},{"code":"(fn\n  [k m]\n  (if (and (contains? m k) (nil? (m k))) true false))","problem":134,"user":"5271605ae4b03e8d9a4a73ed"},{"problem":134,"code":"(fn [given-key collection]\n  (if (and (contains? collection given-key)\n           (= (get collection given-key) nil))\n    true\n    false))","user":"577ad824e4b0d3393e5deb08"},{"problem":134,"code":"(fn [k, m] (= (get m k false) nil))","user":"54b8fea9e4b0ed20f4ff6e9c"},{"code":"(fn [k m]\n    (if (contains? m k)\n        (cond\n         (= (get m k) nil) true\n         (not (= (get m k) nil)) false)\n      false))","problem":134,"user":"5240589be4b0ad64fa01031d"},{"problem":134,"code":"#(not(get%2%1 0))","user":"59a24c92e4b066c664927d20"},{"code":";; Remember to use false as the default return value on missing keys\n;; or else Clojure will return nil for them as well\n(fn [k coll] (if (nil? (k coll false)) true false))","problem":134,"user":"52d2f457e4b099d49816f0ba"},{"code":"(fn [k m] (if (contains? m k) (= (get m k) nil) false))","problem":134,"user":"50ef311fe4b0a78662fa2651"},{"code":"#(if(contains? %2 %1)  \n    (= nil (%1 %2))\n    false)","problem":134,"user":"50c8697ce4b00bb60fe0c53f"},{"code":"(fn [k m]\n  (and (contains? m k) (= (k m) nil))\n  )","problem":134,"user":"51a7b4fee4b0da5f497bde8b"},{"code":"(fn [klucz,mapa] \n  (if (contains? mapa klucz)\n    (if (= (mapa klucz) nil) true false)\n    false\n    )\n)","problem":134,"user":"52e12aa0e4b09f7907dd1419"},{"code":"#(cond (contains? %2 %1)\n  (nil? (%1 %2))\n:else false)","problem":134,"user":"4e244ed5535d04ed9115e826"},{"problem":134,"code":"(fn [x coll] (and (contains? coll x) (nil? (get coll x))))","user":"57de9acce4b0bd073c202456"},{"code":"(fn nil-key? [key coll]                                                                                                                      \r\n    (and (contains? coll key)                                                                                                                 \r\n         (nil? (coll key))))","problem":134,"user":"4f149e0f535d64f60314643d"},{"code":"#(and (contains? %2 %1) (nil? (get %2 %1 )))","problem":134,"user":"4df8644f535d04ed9115e778"},{"code":"#(= [% nil] (find %2 %))","problem":134,"user":"4ec74de3535d6d7199dd36df"},{"code":"#(nil? (get %2 %1 :not-present))","problem":134,"user":"53445876e4b084c2834f4a29"},{"code":"(fn ciff [k, m]   (and  (contains? m, k)  (nil? (m k))  ) )","problem":134,"user":"4ee26f01535d10e5ff6f5368"},{"problem":134,"code":"(fn [k a] (and (contains? a k) (nil? (get a k))))","user":"581dad0ae4b04b46fc4b0f17"},{"problem":134,"code":"(fn [k coll](let [val (get coll k)]\n    (and (contains? coll k) (nil? val))))","user":"55577fcce4b0deb715856e24"},{"problem":134,"code":"#(and \n   (contains? %2 %1) \n   (nil? (get %2 %1)))","user":"5d7aa22ee4b02e6b30c9354e"},{"code":"#(if (nil? (get %2 %1 \"not there\")) true false)","problem":134,"user":"4e975bce535dbda64a6f6b53"},{"code":"#(let [x (find %2 %1)] (and (vector? x) (nil? (second x))))","problem":134,"user":"52419ee6e4b076e5d3121f22"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= nil (get m k))\n    false))","user":"577caf73e4b0c8d87281f6c6"},{"code":"(fn [a b] (= (get b a \"not-found\") nil))","problem":134,"user":"512bb7ede4b04d059cf1fd18"},{"code":"(fn [key map] \n  (if (contains? map key) \n    (= nil (get map key)) \n    false))","problem":134,"user":"50873b51e4b0198722bd9849"},{"problem":134,"code":"(fn [k m]\n  (let [v (get m k :n)]\n    (if (or (= v :n)\n            (not (nil? v)))\n      false\n      true)))","user":"532bce35e4b09d4e7a9b5536"},{"problem":134,"code":"(fn [k m] (if  (contains?  m  k)  (nil?  (m   k))   false))","user":"5403f305e4b0df28a13c62e3"},{"code":"(fn [k coll]\n  (nil? (coll k :notfound)))","problem":134,"user":"510db6cde4b078ea71921145"},{"problem":134,"code":"(fn [k c]\n            (and (contains? c k) (nil? (c k))))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":134,"code":"(fn a-nil? [k m]\n  (and (contains? m k)\n       (nil? (m k))))","user":"5cbb0436e4b026601754b9cc"},{"code":"#(not (%1 %2 true))","problem":134,"user":"4dd6fa35535d2dad7130b5cd"},{"problem":134,"code":"#(if-let [kv (find %2 %1)]\n   (nil? (second kv))\n   false)","user":"526e5159e4b03e8d9a4a7316"},{"code":"(fn [sym seq] (and () (nil? (sym seq :none))))","problem":134,"user":"4f404dcee4b0e243712b1fb0"},{"problem":134,"code":"(fn [k m] (if (= false (contains? m k)) false\n            (if (= (k m) nil) true\n             false)))","user":"53e2ac1ae4b036ad0777e3f3"},{"code":"#( and (contains? %2 %) (nil? (%2 %)))","problem":134,"user":"513b77f3e4b00f740c76c403"},{"problem":134,"code":"(fn [k dict] (and (contains? dict k) (nil? (get dict k))))","user":"5aa4f7dae4b0d174b936c88c"},{"problem":134,"code":"(fn iff [k m]\n  (not (empty? (filter (fn [z] (= z [k nil])) m ))))","user":"591b3e8ee4b09b4ee5954be9"},{"code":"(fn [x y]\n  (and (contains? y x) (= nil (get y x)) )\n)","problem":134,"user":"4ea3f035535d7eef308072ca"},{"code":"(fn [k m] (nil? (get m k :x)))","problem":134,"user":"4e50b67b535dc968683fc4ed"},{"code":"#(if(nil? (find %2 %1))\n   false\n   (if (nil? (nth (find %2 %1) 1))\n     true\n     false))","problem":134,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":134,"code":"#(if (contains? %2 %1)\n                       (if (= (get %2 %1) nil)\n                         true\n                         false)\n   false)","user":"5add1fede4b0837691e92c0a"},{"problem":134,"code":"(fn\n [my-key my-map]\n (if (contains? my-map my-key) (nil? (my-key my-map)) false))","user":"54ef7568e4b024c67c0cf885"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k) (= nil (last (find m k)))))","user":"52e6975de4b09f7907dd147a"},{"code":"(fn [key seq]\n  (and \n    (contains? seq key)\n    (= (key seq) nil)))","problem":134,"user":"4e6a52cb535d8ccf87e9feca"},{"problem":134,"code":"(fn [x, y]\n     (and \n      (not (empty? (filter #(= % x) (keys y))))\n                   (= nil (y x))))","user":"5f77890ae4b02876ed9fd0b9"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key) (nil? (get map key)) false)\n  )","user":"57b3821de4b0fbc9809a2782"},{"problem":134,"code":"(fn [k m]  \n   (cond \n    \t(and (contains? m k) (nil?(get m k)))\n  \t\ttrue\n  \t\t:else\n  \t\tfalse\n    )\n  )","user":"54bd9022e4b0ed20f4ff6ee1"},{"problem":134,"code":"(fn [ele structure]\n  (cond\n    (if true (.containsKey structure ele)) (nil? (ele structure))\n    :else false\n  )\n    \n)","user":"5d0b88dce4b0cc9c91588231"},{"problem":134,"code":"(fn [k m]\n    (and (contains? m k)\n         (= (m k) nil)\n    )\n)","user":"5ebb4751e4b00a66d4a95262"},{"problem":134,"code":"(fn [ky mp] (if (contains? mp ky)(if (nil? (get mp ky)) true false) false))","user":"5ce4583be4b0a17bb84e2b5a"},{"code":"(fn [k & [values]] (nil? (get values k false)))","problem":134,"user":"4f5155a3e4b03ad3f0c10d1b"},{"code":"(fn [x,y] (and (contains? y x) (= nil(x y))))","problem":134,"user":"51b213c2e4b02f8f128bb962"},{"problem":134,"code":"(fn [some-key some-map]\n  (and (contains? some-map some-key) (nil? (some-key some-map))))","user":"57a6ad79e4b0a9660795620b"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"not-nil\")))","user":"59096794e4b047aa04b1999e"},{"code":"#(nil? (%2 %1 :undef))","problem":134,"user":"4e994541535dbda64a6f6b64"},{"problem":134,"code":"#(if (= (get %2 %1 \"missing\") nil )  true false)","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)\n          (nil? (k m))))","user":"5d41de31e4b05dd059a54379"},{"problem":134,"code":"(fn [k m] (nil? (get m k ::not-found)))","user":"536d260be4b0fc7073fd6e55"},{"code":"(fn [k l] (and (contains? l k) (nil? (l k))))","problem":134,"user":"4db29f98535df7e46ed9b6c1"},{"problem":134,"code":"#(if (contains? %2 %1) (if (= nil (%1 %2)) true false) false )","user":"5908882de4b047aa04b19979"},{"problem":134,"code":"(fn [x y] (nil? (get y x 2)))","user":"5dd95976e4b0948ae9d9ad9b"},{"code":"(fn [k l] \n   (if (and (contains? l k)\n            (nil? (k l))) true false))","problem":134,"user":"52c81954e4b0c2d177d6212e"},{"problem":134,"code":"#(= (get %2 %1 false?) nil)","user":"57d57f65e4b0bd073c2023b3"},{"problem":134,"code":"(fn [k l]\n  (if (= 1 (count (filter (fn [x] (if (and (= x k) (nil? (k l))) true false)) (keys l))))\n    true\n    false))","user":"52979551e4b02ebb4ef75043"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)\n       (= nil (k m))))","user":"57dd47f4e4b0bd073c20243e"},{"code":"(fn [k m] (= (find m k) [k nil]))","problem":134,"user":"4ee88269535d93acb0a6687f"},{"code":"(fn [k m] (nil? (get m k k)))","problem":134,"user":"52ccc2bde4b07d0d72b27371"},{"code":"(fn [key coll]\n  (and (contains? coll key) (nil? (get coll key))))","problem":134,"user":"4ecd1143535d23f036227702"},{"code":"#(if (contains? %2 %) \n   (if (= nil (% %2) )\n     true\n     false) \n   false)","problem":134,"user":"511f921de4b085952a835361"},{"problem":134,"code":"#(nil? (%2 %1 \"truthy\"))","user":"5acaa269e4b0e27600da77e6"},{"code":"(fn [key map] (nil? (key map :x)))","problem":134,"user":"533a2e02e4b0e30313ee6cb7"},{"problem":134,"code":"(fn [key map] \n   (and (contains? map key) \n        (nil? (get map key))))","user":"5ab575f8e4b073f17744263d"},{"code":"(fn [key coll] (and (contains? coll key) (nil? (get coll key))))","problem":134,"user":"4f6a2ff2e4b07046d9f4ef98"},{"problem":134,"code":"(fn iff [k m] (and (contains? m k) (nil? (k m))))","user":"5ef18431e4b07c55ae4a0529"},{"problem":134,"code":"(fn [k hsh] (and (contains? hsh k) (= nil (hsh k))))","user":"54d63357e4b0a52adc2e2018"},{"code":"#(nil? (get %2 % 0))","problem":134,"user":"4e704293535d5021c1a89634"},{"code":"(fn [ky mp] (if (nil? (get mp ky false)) true false))","problem":134,"user":"52867936e4b0239c8a67ae16"},{"problem":134,"code":"(fn [map-key map-coll]\n  (if (and (contains? map-coll map-key)\n           (= (map-coll map-key) nil))\n    true\n    false))","user":"5db8d4c1e4b010eb3c36cd4e"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)\n    (= (y x) nil)\n    false))","user":"608828dee4b0ae75613dcee1"},{"code":"(fn [x mp] (and (contains? mp x) (nil? (get mp x))))","problem":134,"user":"5348cab4e4b084c2834f4a5e"},{"problem":134,"code":"(fn [key map]\n  (if (and (contains? map key) (nil? (get map key)))\n    true\n    false))","user":"5f9567cce4b0715f5002d7c7"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)(nil? (get y x))false))","user":"56a45fcee4b0542e1f8d14dc"},{"problem":134,"code":"(fn [k c] (if (and (contains? c k) (nil? (c k))) true false))","user":"561223e5e4b05f002753df8b"},{"problem":134,"code":"(fn [k mp] (nil? (get mp k \"not here\")))","user":"53dfbc75e4b0d874e779ae44"},{"code":"(fn [akey themap] (and (contains? themap akey) (nil? (themap akey))))","problem":134,"user":"501c2dfce4b0539218e73b39"},{"code":"(fn [key map] (and (contains? map key) (nil? (map key))))","problem":134,"user":"4eb75bdf535d7eef30807375"},{"problem":134,"code":"(fn [map-key the-map]\n  (nil? (map-key the-map false)))","user":"55a5c3bee4b0acc240e3154e"},{"code":"#(and (= (% %2) nil) (contains? %2 %))","problem":134,"user":"50d46d53e4b09cc622d65a69"},{"code":"(fn nil-key?\n  [k m]\n  (cond\n   (contains? m k) (nil? (k m))\n   :else false))","problem":134,"user":"4dda44f2535d02782fcbe9f1"},{"code":"#(= true (nil? (get %2 %1)) (contains? %2 %1))","problem":134,"user":"51519e75e4b03e678e393acf"},{"problem":134,"code":"(fn [k c] (if (contains? c k) (nil? (c k)) false))","user":"54dc9ba1e4b024c67c0cf785"},{"code":"(fn [k hmap] (and (contains? hmap k) (nil? (hmap k))))","problem":134,"user":"532347dde4b09d4e7a9b54cc"},{"code":"(fn [attr attrs] (and (contains? attrs attr) (nil? (attr attrs))))","problem":134,"user":"4ec6c878535d6d7199dd36d5"},{"problem":134,"code":"(fn [k l] (nil? (l k false)))","user":"59390a35e4b02506e01a29f3"},{"problem":134,"code":"#(if (contains? %2 %1)\n (nil? (get %2 %1))\n false)","user":"5992de05e4b0866487ed0d7e"},{"code":"(fn [k m] (= nil (get m k -1)))","problem":134,"user":"53224d45e4b09d4e7a9b54c0"},{"code":"(fn [ky mp] (and (= nil (ky mp)) (contains? mp ky)))","problem":134,"user":"504e108ce4b078edc5f593b3"},{"code":"#(nil? (%1 %2 0) )","problem":134,"user":"51933b41e4b0c663c5d86ca2"},{"code":"(fn [a hashmap]\n  (and (contains? hashmap a)\n       (nil? (hashmap a))))","problem":134,"user":"4ea2382f535d7eef308072bc"},{"code":"(fn foo [k m]\n    (if (and (contains? m k)\n             (= (get m k) nil))\n        true\n        false))","problem":134,"user":"4edb314d535d10e5ff6f5317"},{"problem":134,"code":"#(and (contains? %2 %1) (when (contains? %2 %1) (= (get %2 %1) nil)))","user":"5ca03402e4b048ec896c5b68"},{"problem":134,"code":"(fn [k m] (if (contains? m k) (if (= (get m k) nil) true false) false))","user":"55b7d925e4b01b9910ae29b2"},{"problem":134,"code":";#(and (nil? (get %2 %1)) (contains? %2 %1))\n#(nil? (get %2 %1 false))","user":"5ed03b7fe4b016b56eae05ae"},{"code":"(fn [x y] (and (contains? y x) (nil? (val (find y x)))))","problem":134,"user":"5258cd3fe4b0cb4875a45cc0"},{"problem":134,"code":"(fn [a b] (if (= (get b a \"ha\") nil) true false))","user":"58b8a3eae4b0888cdc949cb7"},{"code":"(fn [k coll]\n  (let [ass (find coll k)]\n    (if (= ass nil)\n      false\n      (if (= (k coll) nil)\n        true\n        false))))","problem":134,"user":"51696bcde4b03f62cda68ce7"},{"problem":134,"code":"(fn key-exists [key2 mapp] (= (get mapp key2 false), nil))","user":"58f60c5ae4b0438e51c2cee8"},{"code":"(fn [a b]\n  (= nil (get b a \"Nope\")))","problem":134,"user":"4e62294c535d8ccf87e9fe5f"},{"problem":134,"code":"#(= nil (if (contains? %2 %1) (%2 %1) 3))","user":"53882352e4b0640c7a9a5898"},{"code":"#(and (contains? %2 %1)(nil? (%1 %2)))","problem":134,"user":"50cc7e50e4b0f78a8e1645c1"},{"code":"#( if ((set (keys %2)) %)\n    (if (= nil (%2 %1)) true false)\n    false\n)","problem":134,"user":"5061cc17e4b0a30dc9a35d34"},{"code":"(fn [k m] \n  (if (nil? (find m k))\n    false\n    (nil? (val (find m k)))))","problem":134,"user":"4ff769bce4b0678c553fc38f"},{"code":"(fn [x, y] (and (contains? y x) (nil? (val (find y x)))))","problem":134,"user":"50e43d90e4b0463d3207248b"},{"code":"(fn [k dict] \n  (= (dict k true) nil))","problem":134,"user":"4fe9ef2fe4b0547ebccb2479"},{"code":"(fn [key map] (nil? (get map key :not-nil)))","problem":134,"user":"4ee98f99535d93acb0a6688f"},{"code":"#(and (= (%2 %1) nil ) (contains? %2 %1)  )","problem":134,"user":"4e8d5edd535d65386fec2134"},{"code":"(fn [key map] (= nil (get map key \"ololo\")))","problem":134,"user":"4faf97d8e4b081705acca258"},{"code":"#(if (nil? (%2 %1)) (contains? %2 %1) false)","problem":134,"user":"50d179c7e4b05a71a896ef56"},{"code":"#(nil? (get %2 % \"none\"))","problem":134,"user":"52eb400ee4b0705949c4443b"},{"problem":134,"code":"(fn [key map]\n  (nil?\n  \t(get map key false)))","user":"54f904c2e4b01ecee9d88832"},{"problem":134,"code":"(fn foo [x y] (if (and (contains? y x)(= (get y x) nil)) true false))","user":"56719c3ce4b05957ce8c610c"},{"code":"#(nil? (%2 % \"not-found\"))","problem":134,"user":"52888212e4b0239c8a67ae4e"},{"problem":134,"code":"#(and (nil? (%1 %2)) (not (nil? (get (set (keys %2)) %1))))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":134,"code":"(fn [k m] (and (contains?  m k) \n               (= nil (k m))) )","user":"57c6bca1e4b05aa3c4741cf8"},{"problem":134,"code":"(fn value-finder [key map]\n  (if (= (find map key) [key nil])\n    true\n    false))","user":"5d6d2e11e4b04d129b00f2ba"},{"problem":134,"code":"(fn [e s]\n    (if (contains? s e)\n      (nil? (get s e))\n      false))","user":"5c22c861e4b07e362c230590"},{"code":"#(if (get %2 %1 true) false true)","problem":134,"user":"5143952fe4b0b4fb4ace5f38"},{"problem":134,"code":"#(nil? (%2 %1 \"other\"))","user":"586b6a0ae4b01531a375e957"},{"code":"(fn [k col]\n  (if (find col k)\n      (nil? (get col k))\n      false\n  )  \n  )","problem":134,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":134,"code":"(fn [k m] (if (contains? m k)\n            (nil? (k m))\n            false))","user":"55729a78e4b09a3098a52547"},{"problem":134,"code":"(fn me [key map]\n  (= nil (key map :nil)))","user":"54f03f8ce4b024c67c0cf891"},{"code":"#(nil? (get %2 %1 :err))","problem":134,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"problem":134,"code":"(fn [k m] \n         (and (contains? m k)\n              (nil? (k m))))","user":"5251b11be4b0541d1855b87b"},{"code":"; original solution\n;#(and (contains? %2 %1) (= (%1 %2) nil))\n\n; becomes\n#(not (%2 %1 0)) ; code golf hack-joke to play on nil evaluating to false and 0 evaluating to true","problem":134,"user":"50d4c626e4b09cc622d65a70"},{"problem":134,"code":"(fn [k c] (nil? (get c k \"not found\")))","user":"53a7e3b9e4b047364c044423"},{"problem":134,"code":"(fn [klj col] (and (contains? col klj) (nil? (get col klj))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"code":"(fn [key coll] (and (coll? (find coll key)) (nil? (coll key))))","problem":134,"user":"516014fde4b0e2be8aa20be1"},{"problem":134,"code":"(fn [item index] (and (contains? index item) (nil? (item index))))","user":"5c839a4de4b0c8042a70ce53"},{"problem":134,"code":"(fn [v coll] (if (contains? coll v) (= nil (get coll v)) false))","user":"5785de43e4b0ebec4cfb74e5"},{"problem":134,"code":"(fn [key map]\n  (if (and (= nil (key map)) (contains? map key) )\n\ttrue false\n    )\n)","user":"57f3f2bee4b07bbd65c32b1a"},{"problem":134,"code":"#(and (contains? %2 %1)\n      (nil? (get %2 %1))\n      )","user":"5e2d1883e4b05b4b015161df"},{"problem":134,"code":"(fn [key map]\n  (and (contains? map key) (nil? (get map key))))","user":"57a0f7cfe4b0c3d858beb8de"},{"code":"(fn hasnil [k m]\n  (cond\n   (and (contains? m k) (nil? (m k))) true\n        :else false))","problem":134,"user":"515f2a85e4b0595cf3d1da44"},{"code":"(fn [k dict] (= (get dict k \"NOT FOUND\") nil))","problem":134,"user":"527ccaf4e4b0757a1b17136d"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n  \t(nil? (get m k))\n    false))","user":"574c3d4ee4b02ea11479921a"},{"problem":134,"code":"(fn [keyy coll] (and (contains? coll keyy) (nil? (get coll keyy))))","user":"5ef4fca7e4b07c55ae4a0546"},{"code":"(fn [key map] (and (contains? map key) (= (map key) nil)  ))","problem":134,"user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn check[ky mp]\n  (not\n    (if(contains? mp ky)\n      \t(number?(get mp ky))(true? true)\n    )\n   )\n  )","problem":134,"user":"52840004e4b0239c8a67adc1"},{"problem":134,"code":"(fn [k m]\n  (and\n    (contains? m k)\n    (nil? (get m k))))","user":"5f0fbaf1e4b091ba50b4db9d"},{"problem":134,"code":"(fn [e,l] (if (and (= (l e) nil) (contains? l e)) true false))","user":"553d51c3e4b0a04f792994df"},{"code":"(fn [x coll]\n  (nil? (get coll x false)))","problem":134,"user":"4df3c9e4535d08e6dec9fe2a"},{"problem":134,"code":"(fn [key map]\n  (and \n    (contains? map key) \n    (nil? (map key))))","user":"5465febde4b01be26fd746e1"},{"problem":134,"code":"(fn [key-value values]\n  (if (nil? (get values key-value :batata))\n    true\n    false)\n  )","user":"5ee66158e4b029a2061bbe98"},{"problem":134,"code":"(fn [k, v]\n  (let [x (get v k \"gators\")]\n    (= x nil)))","user":"58a35b1ee4b02bd94d917ef3"},{"problem":134,"code":"(fn nil-val? [key map] (and (contains? map key) (nil? (map key))))","user":"550ac34fe4b06e50f9beb133"},{"code":"(fn [x xs] \n  (and (contains? xs x) (nil? (xs x))))","problem":134,"user":"525bcae9e4b0cb4875a45d30"},{"code":"(fn [key map] (and (contains? map key)\n                   (nil? (key map))))","problem":134,"user":"4efccd24535de96065cf5080"},{"problem":134,"code":"(fn [k m] (boolean (and ((set (keys m)) k) (nil? (k m)))))","user":"569f4dabe4b0542e1f8d1491"},{"problem":134,"code":"(fn [k m] (= (k m 0) nil))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn [key s] (and (contains? s key) (nil? (key s))))","problem":134,"user":"4eb83593535dd6025b394d1b"},{"problem":134,"code":"(fn\n  [key map]\n  (and (contains? map key) (nil? (key map)))\n  )","user":"5c891afde4b048ec896c5935"},{"problem":134,"code":"(fn [x col] (= (col x true) nil))","user":"5a2834dfe4b07f18be40aa64"},{"code":"(fn [k,m] (and (contains? m k) (nil? (k m))))","problem":134,"user":"514b66f4e4b0bd81940b86cb"},{"problem":134,"code":"(fn [key m] (and (contains? m key) (= nil (key m))))","user":"537f6b1ae4b06839e8705eb3"},{"code":"(fn [mkey mmap] (nil? (get mmap mkey false)))","problem":134,"user":"513e0ffae4b02b2a3d8235bb"},{"code":"(fn [key map]\n\t\t (and (contains? map key) (nil? (map key))) )","problem":134,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (nil? (k m))\n    false)\n)","problem":134,"user":"52d6d490e4b09f7907dd1369"},{"problem":134,"code":"(fn [a-key a-map] (and (contains? a-map a-key) (nil? (a-map a-key))))","user":"55ca4273e4b0e31453f649f9"},{"problem":134,"code":"(fn pr134 [element a-map]\n    (and(contains? a-map element) (nil? (get a-map element)))\n      )","user":"54527df5e4b0e397800069c2"},{"problem":134,"code":"(fn [_key _map] (if (contains? _map _key) (nil? (_key _map)) false))","user":"5773f3a9e4b0979f896515f2"},{"problem":134,"code":"(fn [k m] (if (find m k) (nil? (k m)) false))","user":"538d7e2ee4b0b51d73faae70"},{"problem":134,"code":"(fn [inpKey inpMap] (if (contains? inpMap inpKey) (= nil (get inpMap inpKey)) (contains? inpMap inpKey)))","user":"5df3e12fe4b03c219ef1a371"},{"code":"#(and\n  (contains? %2 %1)\n  (nil? (%2 %1)))","problem":134,"user":"5103807fe4b00c483ae17703"},{"problem":134,"code":"(fn[k,m](and (contains?  m k) (= nil (get m k)) ))","user":"6096e2d4e4b00e9e6653c3f1"},{"code":"#(if (%1 %2 true) false true)","problem":134,"user":"4fcba3f9e4b0ee37620e185b"},{"code":"(let [g (gensym)]\n  (fn [k m]\n    (nil? (get m k g))))","problem":134,"user":"4e8338d6535db62dc21a62d3"},{"problem":134,"code":"(fn [k m]\n  (nil? (k m 1)))","user":"53065acbe4b02e8216869792"},{"problem":134,"code":"#(if (not (get %2 %1 true)) true false)","user":"53e4b5a3e4b036ad0777e44b"},{"code":"(fn [k m] (if (contains? m k) (nil? (m k)) false))","problem":134,"user":"4ebca352535dfed6da9c6d88"},{"code":"(fn [my-key my-map]\n\t(if (and (contains? my-map my-key)\n     \t(= (my-key my-map) nil))\n         true\n         false))","problem":134,"user":"5391ab43e4b0b51d73faaea6"},{"code":"#(and(contains? %2 %1)(nil?(%2 %1)))","problem":134,"user":"4faa8de0e4b081705acca1f8"},{"problem":134,"code":"(fn [n coll] \n  (if (contains? coll n) \n    (nil? (get coll n))\n          false))","user":"59503c5de4b066ee0a44ae8e"},{"problem":134,"code":"(fn [x h]\n  (and (contains? h x)\n       (= (h x) nil)))","user":"60460824e4b02d28681c77bc"},{"problem":134,"code":"(fn [nkey nmap] (= nil (nkey nmap 1)))","user":"606d75f5e4b069485764de13"},{"problem":134,"code":"(fn [k col] (and (contains? col k) (nil? (get col k))))","user":"544b5b8de4b0e39780006963"},{"problem":134,"code":"(fn\n  [k coll]\n  (if (not= nil (some #{k} (keys coll)))\n    (= nil (coll k))\n    false))","user":"59aad3d4e4b08cbb53654d88"},{"problem":134,"code":"(fn [ k m ]\n(if (contains? m k) (nil? (m k)) false))","user":"5c09e555e4b0bdcf453d16fd"},{"problem":134,"code":"(fn [x c] (and (contains? c x) (nil? (x c))))","user":"56e4427ce4b03a7c14b85a4c"},{"code":"(fn map-entry-nil? [ky mp]\n  (let [ent (get mp ky :empty)]\n    (and (not (= ent :empty))\n         (nil? ent))))","problem":134,"user":"5144e89be4b021a5ff8301f9"},{"problem":134,"code":"#(boolean (and (%1 (set (keys %2))) (nil? (%1 %2))))","user":"5b4a0ce3e4b02d533a91bc92"},{"code":"(fn [k m] \n  (and (nil? (k m)) (contains? m k)))","problem":134,"user":"51b74a33e4b0d906fcd71d34"},{"code":"(fn [k table]\n   (let [p (find table k)]\n     (if (nil? p) false (not (last p)))))","problem":134,"user":"52c25645e4b07a9af579237d"},{"code":"(fn [key a](and (contains? a key) (= nil (a key))))","problem":134,"user":"5097c837e4b00ad8bab4e973"},{"problem":134,"code":"(fn [x y](and (contains? y x) (nil? (x y))))","user":"54630cdae4b01be26fd746bb"},{"code":"(fn [k m] (if (contains? m k) (= nil (m k)) false))","problem":134,"user":"522e4baae4b01cdb292c5f00"},{"problem":134,"code":"( fn [k m] ( nil? ( get m k false )))","user":"5963cd4de4b066ee0a44b0d4"},{"problem":134,"code":"(fn [chave mapa] (and (contains? mapa chave) (nil? (chave mapa))))","user":"5e19c85fe4b0dc959400850c"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (nil? (get m k))\n   )\n  )","user":"57cd7498e4b0c746388ab897"},{"problem":134,"code":"(fn [key val]\n  (if (contains? val key)\n    (= (val key) nil)\n    false))","user":"5e95873ae4b0fbed045a380a"},{"problem":134,"code":"(fn ANilKey [lla sign] \n  (if (contains? sign lla)\n    (= (sign lla) nil)\n    false))","user":"607508f3e4b069485764de54"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k)\n    (= nil (k m))\n    false))","user":"562405fee4b03f08ee9a9237"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= (k m) nil)\n    false\n    )\n)","user":"54ab53e1e4b09f271ff37cc5"},{"problem":134,"code":"(fn [k m]\n                        (and (contains? m k)\n                             (nil? (get m k))))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"(fn f [ x y ]\n  (if (contains? y x)\n(= nil ( get y x))\nfalse\n)\n)","problem":134,"user":"50254e70e4b0b0b8afb15aa7"},{"problem":134,"code":";(fn [k mp] (or (nil? (get mp k)) (nil? (get (select-keys mp [k]) k))))\n(fn [k mp] (and (nil? (get mp k)) \n                (not (empty? (select-keys mp [k]))) \n                ))","user":"546d41bde4b00cfc9eacc18c"},{"code":"#(and (contains? %2 %1) (= nil (get %2 %1)))","problem":134,"user":"4f03b3fb535dcb61093f6b52"},{"problem":134,"code":"(fn [k m] (and (contains? m k)(nil? (get m k))))","user":"585c61d4e4b0f14aab7c8787"},{"code":"#(= nil (%1 %2 false))","problem":134,"user":"4fdef544e4b05e33b9224f91"},{"problem":134,"code":"(fn key-is-nil [k mp]\n  (if (contains? mp k)\n    (if (= (k mp) nil)\n      true\n      false)\n    false))","user":"53b4344de4b047364c0444b4"},{"problem":134,"code":"(fn [x, y]\n  (and (nil? (x y)) (contains? y x))\n  )","user":"59165082e4b09b4ee5954b88"},{"code":"(fn [k, m]\n  (and\n    (contains? m k)\n    (= (get m k) nil)))","problem":134,"user":"4fd6f4d8e4b0dab7d829f37b"},{"code":"#(= nil (get %2 %1 \"not found\"))","problem":134,"user":"50645e12e4b007509339a58a"},{"problem":134,"code":"(fn [key thing]\n  (nil? (key thing \"boy\")))","user":"564ba493e4b0284900eef669"},{"problem":134,"code":"(fn [k coll]\n           (if (and (contains? coll k) (nil? (k coll)))\n             true\n             false))","user":"5b34aba7e4b025bcb146f352"},{"problem":134,"code":"(fn [k d] (and (contains? d k) (nil? (get d k))))","user":"56e02c1ce4b0ca2494a09602"},{"code":"#(let [klucz %1 mapa %2]\n        (loop [p (first mapa) r (rest mapa)]\n                 (if (nil? p) \n                     false\n                     (if (and (= (first p) klucz) (nil? (second p)))\n                             true\n                             (recur (first r) (rest r))))))","problem":134,"user":"4ffe8193e4b0678c553fc3f4"},{"problem":134,"code":"(fn [akey mylist]\n  (if (contains? mylist akey)\n    (nil? (akey mylist))\n    false))","user":"568e65bae4b0dcc4269f40d6"},{"problem":134,"code":"(fn [key coll]\n           (if (contains? coll key)\n             (nil? (coll key))\n             false))","user":"5430a16de4b0dad94371f2da"},{"problem":134,"code":"(fn [k m]\n  (if (= (get m k :not-found) :not-found)\n    false\n    (nil? (m k))))","user":"56f4bf47e4b046a417f92062"},{"code":"#(nil? (%1 %2 :x))","problem":134,"user":"4f614976e4b0defedf855fbb"},{"code":"(fn value-nil? [key map]\n  (and (contains? map key) (= nil (key map))))","problem":134,"user":"4fdbe37be4b05e33b9224f65"},{"problem":134,"code":"(fn [key_value dict] (and (= (dict key_value) nil)\n                          (contains? dict key_value)                           \n\t\t\t\t\t )                    \n)","user":"55893b09e4b059ccff29b1fe"},{"problem":134,"code":"(fn [k m] (if (contains? m k)\n                                            (= nil (get m k))\n                                            false))","user":"5cdc08a2e4b05ee0cb31173a"},{"problem":134,"code":"(fn [key coll]\n  (and (contains? coll key)\n       (nil? (coll key))))","user":"594fdfdce4b066ee0a44ae85"},{"code":"(fn [key h]\n  (if (contains? h key)\n    (if (= (key h) nil)\n      true\n      false)\n    false))","problem":134,"user":"4f70183ee4b07046d9f4eff3"},{"problem":134,"code":"(fn isnil [k m] (if (contains? m k) (if (= (m k) nil) true false) false))","user":"5a487d9ce4b05d388ecb6b67"},{"problem":134,"code":"(fn [key m]\n  (and\n    (nil? (get m key 1))\n    (nil? (get m key -1))))","user":"540d5085e4b0addc1aec670e"},{"problem":134,"code":"(fn [v lst] \n  (if-let [pair (find lst v)]\n    (nil? (val pair))\n    false))","user":"53e30fcae4b036ad0777e3fc"},{"problem":134,"code":"(fn [k, coll] (and (contains? coll k) (nil? (k coll))))","user":"52485723e4b05ef8e38e63d2"},{"problem":134,"code":"(fn nil-key [k m]\n  (and (contains? m k)\n       (nil? (k m))))","user":"5a42dbbbe4b0447ef91cc5fd"},{"problem":134,"code":"#(and (= (get %2 %1) nil) (contains? %2 %1))","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n\t(nil? (map key))\n  \tfalse\n  )\n  )","user":"56b7c32ee4b0982f16b37e48"},{"problem":134,"code":"(fn foo [k m]\n\t(and (= (k m) nil)\n         (contains? m k)))","user":"559d3d22e4b0ec2b359424da"},{"code":"(fn [key map] (if (and (contains? map key) (= nil (get map key))) true false))","problem":134,"user":"4edd4b77535d10e5ff6f5328"},{"code":"#(let [v (get %2 %1 :not-found)] (if (= v :not-found) false (if (nil? v) true false)))","problem":134,"user":"4ed3c783535d44c135fd68f6"},{"code":"#(if (contains? %2 %1) (nil? (%2 %1)) false)","problem":134,"user":"4f10d444535d64f60314641d"},{"problem":134,"code":"(fn [k m]\n           (if (contains? m k)\n             (= (m k) nil )  \n             false))","user":"567d75ebe4b05957ce8c61c9"},{"code":"(fn\r\n  [k m]\r\n    (and (not (nil? (find m k))) (nil? (get m k))))","problem":134,"user":"4fee04a0e4b0678c553fc308"},{"code":"(fn [key_ map_](\n                and\n                (contains? map_ key_)  \n                (nil? (get map_ key_))\n                )\n)","problem":134,"user":"50feb0e1e4b03cd852b4e851"},{"problem":134,"code":"(fn [ky sq]\n  (if (contains? sq ky)\n    (= (sq ky) nil)\n    false))","user":"5db16084e4b010eb3c36cd01"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k) (nil? (get m k)) false))","user":"54ef51bde4b024c67c0cf884"},{"problem":134,"code":"#(if (nil? (get %2 %1 \"missing\"))\n   true\n   false)","user":"566d71b1e4b0a866af6896ca"},{"problem":134,"code":"#(nil? (%1 %2 \\g))","user":"54d5fbe9e4b0a52adc2e2014"},{"problem":134,"code":"(fn [x mp] (nil? (get mp x -1)))","user":"5b284375e4b063e2438bcc53"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k)\n    (= (m k) nil)\n    false\n  )\n)","user":"560d2a2be4b05f002753df35"},{"problem":134,"code":"(fn [k m]\n  (if (get m k \"n\")\n    false\n    true))","user":"5776f39de4b0979f89651643"},{"problem":134,"code":"( fn [k m] ( or (and(contains? m k) (nil? (get m k))) false) )","user":"5a506896e4b05d388ecb6bd8"},{"problem":134,"code":"(fn is-null [key-to-check map-to-check]\n  (and (contains? map-to-check key-to-check) (= nil (key-to-check map-to-check))))","user":"5777bb7ee4b0979f8965164d"},{"problem":134,"code":"(fn [key inp] (if (contains? inp key) (nil? (get inp key)) false))","user":"605b7085e4b079a07f8593fa"},{"code":"#(nil? (get %2 %1 :z))","problem":134,"user":"53307da1e4b019098a6f8b5e"},{"problem":134,"code":"#( = nil (%1 %2 0))","user":"5d12fba5e4b02c15ef0219a2"},{"code":"(fn [a b] (= nil (get b a 1)))","problem":134,"user":"4f246938e4b0d66497709fec"},{"code":"#(and (nil? (%1 %2))\n               (contains? %2 %1))","problem":134,"user":"51bd255ce4b0df1216cefd94"},{"problem":134,"code":"(fn [k c] (= nil (get c k false)))","user":"5ddd7359e4b0948ae9d9adc5"},{"problem":134,"code":"(fn\n  [k m]\n  (if (contains? m k) \n    (= nil (get m k))\n    false\n    )\n  )","user":"5ac741d6e4b0e27600da777d"},{"problem":134,"code":"(fn nil-key [a-key a-map]\n (and (contains? a-map a-key) (nil? (a-map a-key))))","user":"573c57ace4b0cd1946bd10c0"},{"code":"(fn [k h]\n  (and\n    (contains? h k)\n    (nil? (h k))))","problem":134,"user":"504e72cee4b0f6ff3350c4b4"},{"code":"#(if(contains? %2  %1) (nil? (%2 %1)) false)","problem":134,"user":"523acf7be4b0aa37f082ed90"},{"problem":134,"code":"(fn [k m]\n  (cond \n   \t(contains? m k) (if (k m) false true)\n   \t:else false))","user":"5643e9f1e4b0018b46ad8c04"},{"problem":134,"code":"#(= {%1 nil} (select-keys %2 [%1]))","user":"60836285e4b0736b099e42e4"},{"code":"(fn [k, m] \n  (and \n   (contains? m k) \n   (nil? (m k))))","problem":134,"user":"504e5e8de4b0f6ff3350c4a8"},{"problem":134,"code":"#(nil? (get %2 %1 \"justnothere\"))","user":"5ac53be2e4b0e27600da7740"},{"code":"(fn [k m]\n  (and\n    (nil? (get m k))\n    (not (= \"x\" (get m k \"x\")))))","problem":134,"user":"4f5c0549e4b0030a34fb2b1a"},{"problem":134,"code":"(fn [key coll]\n  (if (contains? coll key)\n    (if (= nil (key coll))\n      true\n      false)\n    false))","user":"5ef9ea69e4b09b61f08553d1"},{"problem":134,"code":"(fn [x y] (and (contains? y x)(= nil (get y x))))","user":"53e9a56ce4b036ad0777e4af"},{"problem":134,"code":"(fn nil-key [k m]\n  (and (contains? m k)\n       (= (k m) nil)))","user":"5498e155e4b0b312c081ff86"},{"code":"(fn [k m]\n  (if (find m k)\n    (if (= nil (get m k))\n      true\n      false)\n    false))","problem":134,"user":"5007416de4b0f0797316e2fe"},{"code":"#(nil? (% %2 0))","problem":134,"user":"4e49badd535dc968683fc4c9"},{"code":"(fn [map-key map-instance]\n    (and  \n      (contains? map-instance map-key)\n      (nil? (get map-instance map-key))))","problem":134,"user":"4f03818e535dcb61093f6b00"},{"problem":134,"code":"#(and (contains? %2 %1) (nil? (-> %1 %2)))","user":"599389d8e4b0b211ea3aaab6"},{"problem":134,"code":"(fn [k xx] (and (contains? xx k) (= nil (k xx))))","user":"53f7f1dde4b0de5c41848567"},{"code":"(fn [k m] (nil? (get m k :plop)))","problem":134,"user":"50c4ff23e4b0210b849018b8"},{"problem":134,"code":"(fn nil-key? [k m] (and (contains? m k) (= nil (get m k))))","user":"54797964e4b0c51c1f4d72c6"},{"code":"#(not(get %2 %1 1))","problem":134,"user":"4dd4034a535dae65d5c462df"},{"problem":134,"code":"(fn [item map]\n  (\n\tif (and (contains? map item) (nil? (get map item))) true false\n  )\n)","user":"55f7a03de4b06e875b46ceae"},{"problem":134,"code":"#(nil? (%2 %1 ()))","user":"5854d1c0e4b07779d468640a"},{"problem":134,"code":"(fn [keey maap]\n  (and (contains? maap keey) (= nil (get maap keey)))\n  )","user":"5d0beecee4b0cc9c91588239"},{"code":"#(nil? (%1 %2 :nope))","problem":134,"user":"502873a8e4b01614d1633ff8"},{"problem":134,"code":"(fn [e m] (= (get m e 1) nil))","user":"60109997e4b074f607df66b3"},{"problem":134,"code":"(fn [key map] \n  (if (contains? map key) \n    (if (= (map key) nil) \n      true\n      false)\n    false))","user":"54271c6de4b01498b1a71b20"},{"code":"#(and (contains? %2 %1) (nil? (%2 %1)))","problem":134,"user":"4e6a368e535d8ccf87e9feae"},{"problem":134,"code":"(fn [k m]\n  (let [has-key? (some #{k} (keys m))]\n    (if has-key?\n      (nil? (k m))\n      false)))","user":"58a34442e4b02bd94d917ef2"},{"problem":134,"code":"(fn f [x y]\n    (and (= nil (get y x))\n  \t(contains? y x))\n )","user":"5c1a0e64e4b01240ff567205"},{"code":"(fn [key hash] (and (contains? hash key) (= (key hash) nil)))","problem":134,"user":"507f0983e4b0f753b6f97893"},{"code":"(fn [kee mapp]\n  (if (contains? mapp kee)\n    (if (= nil (mapp kee)) true false)\n    false))","problem":134,"user":"535911f4e4b04ce2eb3ed292"},{"problem":134,"code":"(fn [key map]\n           (if (contains? map key)\n             (if (= ( map key) nil)\n               true\n               false)\n             false))","user":"5c74b043e4b0fca0c16227ce"},{"problem":134,"code":"(fn [a b] (and \n             (= nil (a b))\n             (contains? b a)\n          )\n)","user":"5493d908e4b0b312c081ff52"},{"problem":134,"code":"(fn [k m] (nil? (get m k 42)))","user":"5f93529ae4b0715f5002d7bc"},{"problem":134,"code":"(fn f [ky mp]\n  (if (and (nil? (get mp ky)) (contains? mp ky))\n    \ttrue\n    \tfalse))","user":"5a025edde4b01bb0ae8afd64"},{"code":"(fn [k m]\n  (nil? (get m k 'none)))","problem":134,"user":"4fbc0011e4b081705acca2f0"},{"problem":134,"code":"(fn kk? [k m] (nil? (get m k :not-here)))","user":"5ae7691ae4b0837691e92caa"},{"code":"#(nil? (%1 %2 :notnil))","problem":134,"user":"4f6345b8e4b0defedf855fe2"},{"problem":134,"code":"(fn iff [key maps]\n  (if (contains? maps key)\n    (if (nil? (get maps key))\n      true\n      false)\n    false))","user":"5cd98fdae4b05ee0cb311702"},{"code":"(fn [k m] \n  (if (contains? m k) (nil? (m k))  false))","problem":134,"user":"4f5e147ce4b0030a34fb2b47"},{"problem":134,"code":"(fn [key map] (nil? (get map key :not-found)))","user":"53981cbce4b0b51d73faaef5"},{"code":"#(if (contains? %2 %1)\r\n    (= (%1 %2) nil)\r\n    false)","problem":134,"user":"4e273301535deb9a81d77ef7"},{"problem":134,"code":"(fn\n  [key dict]\n  (nil? (get dict key false)))","user":"557c647ce4b05c286339e0c3"},{"problem":134,"code":"(fn [k m]\n    (let [data (get m k :missing)]\n      (if (= data nil) true false)\n      )\n    )","user":"4fb41dace4b081705acca2aa"},{"code":"(fn [key map]\n  (= nil (get map key \"not found\")))","problem":134,"user":"52d885afe4b09f7907dd1398"},{"problem":134,"code":"(fn [key col] \n   (let [v (get col key :key-not-found)]\n     (nil? v)))","user":"5745bb9fe4b009280f9f2b54"},{"problem":134,"code":"#(not (%2 %1 :unknown))","user":"530bae80e4b02e82168697d0"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (nil? (map key))\n    false))","user":"585c16c3e4b0f14aab7c877d"},{"problem":134,"code":"(fn [k m] \n  (and\n   \t(contains? m k)\n   \t(= (k m) nil)))","user":"540dbc11e4b0addc1aec6715"},{"problem":134,"code":"(fn stuff [x,y] (and (contains? y x) (= nil (second (find y x)))))","user":"55204412e4b08d5046aa8a5f"},{"problem":134,"code":"(fn f [k m]\n  (nil? (m k \"a\")))","user":"54ce3790e4b057c6fda3a2ab"},{"problem":134,"code":"(fn [key coll]\n  (and (contains? coll key)\n       (= (key coll)\n          nil)))","user":"542d5fa9e4b0dad94371f2b5"},{"problem":134,"code":"(fn x [k m]\n  (boolean\n  \t(and\n   \t\t((set (keys m)) k)\n  \t\t(nil? (k m)))))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"(fn [akey amapp]\n   (if (contains? amapp akey)\n     (nil? (amapp akey))\n     false))","problem":134,"user":"532be2e1e4b09d4e7a9b553a"},{"problem":134,"code":"(fn [x z] (if (contains? z x) (nil? (x z)) false))","user":"57b9bfdae4b0fbc9809a27f5"},{"code":"#(if (nil? (%1 %2)) (contains? %2 %1) false)","problem":134,"user":"53286389e4b09d4e7a9b5504"},{"problem":134,"code":"(fn foo\n  [key map]\n   (and (contains? map key) (= (key map) nil))\n  )","user":"5d5950c1e4b02ba5928a6827"},{"problem":134,"code":"(fn [k m]\n  (if-let [e (find m k)]\n    (nil? (second e))\n    false))","user":"57458b82e4b009280f9f2b4e"},{"code":"#(nil? (%1 %2 false))","problem":134,"user":"4f29cdc8e4b0d6649770a033"},{"code":"(fn [e m]\n  (and (nil? (e m)) (contains? m e) ))","problem":134,"user":"5029fccee4b023940c84aa47"},{"problem":134,"code":"(fn [x coll] \n  (and \n    (nil? (x coll))\n    (contains? coll x) \n  ))","user":"585a7cb2e4b0f14aab7c874e"},{"code":"#(and(contains? %2 %)(nil?(% %2)))","problem":134,"user":"4ec6cd4f535d6d7199dd36d7"},{"problem":134,"code":"(fn [k arr] (nil? (get arr k false)))","user":"56f06e9de4b04a395b9a0476"},{"code":"(fn [key map]\n  (if (and (contains? map key) (not (get map key)))\n    true\n    false))","problem":134,"user":"526fb2fae4b03e8d9a4a7377"},{"code":"(fn [k m] (if (and (some #(= k %) (keys m)) (nil? (k m))) true false))","problem":134,"user":"531c57ace4b08068f379ed9b"},{"code":"#(if (and (contains? %2 %1)(= (%1 %2) nil)) true false)","problem":134,"user":"526daa51e4b03e8d9a4a72e9"},{"problem":134,"code":"(fn [a b]\n  (if (contains? b a)\n  (= (b a) nil)\n  false))","user":"5bfff6d1e4b0bdcf453d1630"},{"problem":134,"code":"(fn [ikey imap]\n  (if (and (contains? imap ikey) (= nil (get imap ikey nil)) ) true false)\n  )","user":"57569212e4b02ea1147992de"},{"code":"#(nil? (get %2 %1 :not_found))","problem":134,"user":"536f5900e4b0fc7073fd6e7b"},{"problem":134,"code":"#(nil? (get %2 %1 'X))","user":"5e790f6be4b085ba37836e01"},{"code":"#(let [x (find %2 %1)] (true? (and x (nil? (x 1)))))","problem":134,"user":"5134973ce4b0230e9f713b42"},{"code":"#(and (nil? (get %2 %))\n      (contains? %2 %))","problem":134,"user":"4fba83e7e4b081705acca2e1"},{"problem":134,"code":"(fn [x y] (and (= (x y) nil) (contains? y x)))","user":"555b5ae4e4b0deb715856e4f"},{"code":"(fn nil-key? [a b]\n  (and (contains? b a) (nil? (get b a))))","problem":134,"user":"50eaf688e4b0346a3e988cba"},{"code":"#(if\r\n    (contains? %2 %)\r\n (= nil (% %2))\r\n   false)","problem":134,"user":"4ec92a04535d6d7199dd36fa"},{"code":"(fn [k m] (nil? (get m k :none)))","problem":134,"user":"4eeaf88f535d93acb0a668a3"},{"code":"(fn [kkey mmap] (= nil (get mmap kkey 0)))","problem":134,"user":"4f21798de4b0d66497709fd1"},{"problem":134,"code":"(fn [k m] (=(get m k \"x\")nil))","user":"5f8f1d18e4b0715f5002d779"},{"problem":134,"code":"(fn [k m]\n   (and (contains? m k)\n        (nil? (get m k))))","user":"5fb453d3e4b08cb800c85b44"},{"problem":134,"code":"#(if (and (contains? %2 %1) (= nil (get %2 %1))) true false)","user":"55306b8ae4b076ab5578f812"},{"code":"(fn [k m] (nil? (m k -1)))","problem":134,"user":"50d324dde4b049d4ed5650d7"},{"code":"(fn myFunct [mykey mymap] (if (contains? mymap mykey) (= nil (get mymap mykey)) false))","problem":134,"user":"4ff30a84e4b0678c553fc344"},{"problem":134,"code":"(fn [x y] (= nil (x y 0)))","user":"5ab23a78e4b073f1774425e1"},{"problem":134,"code":"#(and(contains? %2 %1)(not(%1 %2)))","user":"503a8959e4b07a1917cc34d6"},{"code":"(fn [x y] \n  (and (contains? y x)\n      (nil? (y x))))","problem":134,"user":"4f0f388e535d0136e6c22339"},{"problem":134,"code":"(fn check-for-nil [key some-map]\n    (and (contains? some-map key) (nil? (key some-map))))","user":"59fa7fb0e4b0ca45a743a366"},{"problem":134,"code":"(fn nil-key?\n  [key coll]\n  (and (contains? coll key)\n       (nil? (key coll))))","user":"53e57ba2e4b036ad0777e45c"},{"code":"(fn [k m] (and (contains? m k ) (nil? (k m))))","problem":134,"user":"52033e2ce4b030ee0c5b2716"},{"problem":134,"code":"(fn exist-and-nil? [the-key the-map]\n  (and (contains? the-map the-key) (nil? (the-key the-map))))","user":"5645a7d6e4b0284900eef608"},{"code":"(fn [key hmap]\n  (and\n   (contains? hmap key)\n   (nil? (key hmap))))","problem":134,"user":"5080a697e4b01a93d3f38e49"},{"code":"(fn [a m](if (nil? (get m a \"lose\")) true false))","problem":134,"user":"52f3124ee4b05e3f0be25f0a"},{"problem":134,"code":"#(if (contains? %2 %1) (-> (find %2 %1) (val) (nil?)) false)","user":"58dcae01e4b0a4d5acaab6a4"},{"code":"(fn key-nil [x seq]\n  (if (nil? (find seq x))\n    false\n    (nil? (val (find seq x)))))","problem":134,"user":"4f0a2ed1535d0136e6c222f3"},{"code":"(fn [x y] (= (get y x :missing) nil))","problem":134,"user":"518bd05ee4b0f028e99addf2"},{"code":"(fn [k,coll] (and (contains? coll k) (nil? (k coll))))","problem":134,"user":"5142e808e4b0c172af7558c9"},{"code":"(fn [k m]\n  (if (some #(= k %) (keys m))\n    (nil? (m k))\n    false\n    )\n  )","problem":134,"user":"535aba96e4b04ce2eb3ed2a8"},{"problem":134,"code":"(fn [x m] (and (contains? m x) (= (x m) nil)))","user":"54f3d6c7e4b050824f58f5cb"},{"code":"(fn [x y] \n    (and (contains? y x) \n    \t (nil? (y x))))","problem":134,"user":"4f1c2336535d64f60314647f"},{"problem":134,"code":"(fn [k m] (nil? (get m k :does-not-exist)))","user":"4f046d70535dcb61093f6bc5"},{"code":"(fn [k m]\n  (and\n    (or\n      (find m k)\n      false\n    )\n    (= nil (m k))\n  )\n)","problem":134,"user":"4f725201e4b07046d9f4f02f"},{"problem":134,"code":"(fn [k m]\n  (if (contains?  m k )\t\n\t  (let [v (k m ) ]\n    \t (if (nil? v )\n     \t\ttrue \n           false) )\n        false\n    ))","user":"57bffed6e4b05aa3c4741c89"},{"code":"(fn [k m]\n  (and (contains? m k) (nil? (k m)))\n  )","problem":134,"user":"52196842e4b0890f2f822bfa"},{"code":";;#(not (%2 % 1))\n\n;;#(foo %2 bar %)       ; (fn [a b] (foo b bar a))\n\n;;(fn [a b] (not b % a))\n\n;;#(...) → (fn [args] (...))\n;;(fn [a b] (not (b a 1)))\n\n#(not (%2 % 1))","problem":134,"user":"528cf6f7e4b0239c8a67aebd"},{"code":"(fn [k m] \n  (nil?\n  \t(if (contains? m k) \n    \t(get m k) \n    \tfalse)))","problem":134,"user":"520a86fee4b01da9d47a99de"},{"problem":134,"code":"(fn[k m](and(contains? m k)(nil?(get m k))))","user":"5e189cc8e4b0dc95940084f7"},{"problem":134,"code":"#(and (contains? %2 %1) (-> %2 %1 nil?))","user":"5499e23de4b03163384f4706"},{"code":"#(= nil (%2 %1 false))","problem":134,"user":"51bd78c3e4b0ff155d51d2b0"},{"problem":134,"code":"(fn[k st](and (contains? st k) (= nil (k st))))","user":"59692530e4b069c0a1a197e4"},{"problem":134,"code":"(fn  [myKey myMap]  (nil? (get myMap myKey false) ) )","user":"5feb6850e4b05ac5b16ea1b8"},{"code":"#(not (%2 % 1 ))","problem":134,"user":"5265337fe4b03e8d9a4a7104"},{"problem":134,"code":"(fn [e xs]\n  (and (contains? xs e) (nil? (e xs))))","user":"56df254be4b0ca2494a095ea"},{"problem":134,"code":"#(if (contains? %2 %) (nil? (get %2 %)) false)","user":"54852ad0e4b0e286459a11a7"},{"code":"(fn [k m] (nil? (m k true)))","problem":134,"user":"503ea917e4b06c4e0e1fa26b"},{"problem":134,"code":"(fn [key_tmp map_tmp]\n  (if (.contains (keys map_tmp) key_tmp)\n    (if (= nil (get map_tmp key_tmp))\n      true\n      false\n      )\n    false\n    )\n  )","user":"5745861ae4b009280f9f2b4d"},{"problem":134,"code":"(fn doit\n  [a-key a-map]\n  (if (= (a-key a-map \"def\") nil)\n    true\n    false))","user":"53b6b6c8e4b047364c0444ca"},{"problem":134,"code":"(fn [key col] (and \n               \t(= nil (key col))\n               \t(contains? (apply hash-set (keys col)) key)\n              ))","user":"53d5e45ae4b0e771c302544e"},{"problem":134,"code":"(fn [n coll]\n  (if (contains? coll n)\n    (nil? (get coll n))\n    false))","user":"5990bab4e4b0866487ed0d55"},{"code":"(fn [key m]\n  (and \n    (contains? m key)\n    (nil? (key m))))","problem":134,"user":"50812debe4b01a93d3f38e4c"},{"code":"#(and (nil? (%2 %)) (contains? %2 %))","problem":134,"user":"4f7869c2e4b0fbe0118ec589"},{"code":"(fn [key coll]\n  (and (contains? coll key)\n        (nil? (coll key))))","problem":134,"user":"4fe9d647e4b0547ebccb2472"},{"code":"(fn [k m]\n  (and \n    (contains? m k)\n    (nil? (k m))))","problem":134,"user":"4ed9354f535d10e5ff6f5301"},{"code":"(fn [ky mp]\n  (if (contains? mp ky) (nil? (mp ky)) false))","problem":134,"user":"538e864ee4b0b51d73faae87"},{"code":"(fn [k m] (true? (identical? (contains? m k) (nil? (get m k)) )))","problem":134,"user":"525c575be4b0cb4875a45d38"},{"problem":134,"code":"#(not (% %2 true))","user":"53eb8ceae4b036ad0777e4fb"},{"problem":134,"code":"(fn [k m]\n  (if (nil? (get m k :o))\n    true\n    false))","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn [k xs] \n  (if (and (not (= (find xs k) nil))\n           (= (k xs) nil)) \n      true false))","problem":134,"user":"4faa9610e4b081705acca1fa"},{"code":"(fn [test-key test-map]\n  (if (contains? test-map test-key)\n    (nil? (get test-map test-key))\n    false))","problem":134,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":134,"code":"(fn [k col]\n  (and (= k (first (find col k)))\n       (nil? (k col))))","user":"5a1f85ffe4b0ff51aa4b3284"},{"problem":134,"code":"(fn\n  [k m]\n  (if (contains? m k)\n    (nil? (get m k))\n    false))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k :miss)))","user":"53c649d3e4b00fb29b221297"},{"code":"(fn checknil [e m]\n    (and (contains? m e) (= nil (m e)))\n)","problem":134,"user":"51d1111ce4b067c36548635f"},{"problem":134,"code":"(fn [k lis] \n\t(if (contains? lis k) \n\t\t(= (get lis k) nil)\n\t\tfalse ))","user":"5d125d63e4b02c15ef021999"},{"problem":134,"code":"(fn [ki mep] (if (contains? mep ki) (nil? (mep ki)) false))","user":"5776385fe4b0979f89651632"},{"problem":134,"code":"#(nil? (if(contains? %2 %1) (get %2 %1) 1))","user":"5654e8ade4b0f9d632dd848e"},{"code":"(fn nil-key\n  [key map]\n  (and (contains? map key) (= (get map key) nil)))","problem":134,"user":"511720eae4b0063b4e3e16da"},{"problem":134,"code":"(fn [key coll] (if (contains? coll key) \n                (= (key coll) nil)\n                false))","user":"54bca097e4b0ed20f4ff6ed4"},{"problem":134,"code":"(fn [ell arr] \n  (and (contains? arr ell) \n    (=(ell arr) nil) \n    ))","user":"583d669ee4b089d5ab817d9a"},{"problem":134,"code":"(fn [key map]\n  (if (and (contains? map key) (= nil (get map key)))\n    true \n    false))","user":"602b6cf7e4b0d5df2af22265"},{"code":"(fn [k m] (let [val (m k)] (if (= val nil) (contains? m k) false)))","problem":134,"user":"4fc52d79e4b081705acca386"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k) (nil? (get m k)))\n)","user":"56215c8ee4b03f08ee9a921a"},{"problem":134,"code":"#(if (contains? %2 %1)                                                                                     \n            (nil?  (%1                   %2 ) )                                                                     \n            false)","user":"51c858c3e4b07ef393169e55"},{"problem":134,"code":"(fn[k,m] (if (contains? m k)\n             (nil? (m k))\n             false \n           )\n  \n  )","user":"59a7029ce4b066c664927d8e"},{"problem":134,"code":"(fn [obj_key mapping]\n(and (=(get  mapping obj_key) nil ) (contains? mapping obj_key))\n\n)","user":"5d5b2678e4b06a698e928ee2"},{"problem":134,"code":"(fn[k m](nil? (get m k false)))","user":"54755abce4b0c51c1f4d7299"},{"problem":134,"code":"#(if (contains? %2 %1) (nil? (%1 %2) ) false)","user":"561cad18e4b064ca9f4b169d"},{"problem":134,"code":"(fn [x y] \n  (and (contains? y x) (=  nil (x y)))\n  )\n  \n\n;(fn [x y] (and (= nil (x y)) (contains? y x)))","user":"60461a61e4b02d28681c77c1"},{"code":"(fn\n  [k col]\n  (if (and (contains? col k) (nil? (k col)))\n    true\n    false))","problem":134,"user":"51008b6fe4b0700a7a02d6e4"},{"code":"(fn [k m] \n   (if-let \n       [kv (find m k)] \n     (nil? (val kv))\n     false))","problem":134,"user":"4e131443535d04ed9115e7d3"},{"code":"(fn [key hash] (and (contains? hash key) (nil? (get hash key))))","problem":134,"user":"4f1b3f4c535d64f603146478"},{"problem":134,"code":"#(if (= (%1 %2) nil) (contains? %2 %1) false)","user":"5c478ba2e4b0e06e1360a3b2"},{"problem":134,"code":"#(and\n  (contains? %2 %1)\n  (= (%1 %2) nil))","user":"5b94c507e4b0c0b3ffbd4a5a"},{"code":"(fn [a mp] (= nil (get mp a -1)))","problem":134,"user":"4f7d91e6e4b06e829148e1c3"},{"code":"(fn [a b] (= nil (get b a \"\")))","problem":134,"user":"4fb4d4ede4b081705acca2b1"},{"problem":134,"code":"#(nil? (%1 %2 :miss))","user":"5e178fbee4b00200644e3d57"},{"code":"#(and (contains? %2 %)\n       (nil? (%2 %)))","problem":134,"user":"4dbb1126535d1e037afb21b3"},{"problem":134,"code":"(fn isnull [k v]\n   (if (and (contains? v k) (= (k v) nil))\n      true\n      false))","user":"527106e8e4b03e8d9a4a73ce"},{"code":"(fn [kwd a-map] (and (contains? a-map kwd) (nil? (kwd a-map))))","problem":134,"user":"4ef7a483535dced4c769f258"},{"problem":134,"code":"(fn [x mp] \n  (if (contains? mp x)\n    (= (mp x) nil)\n    false))","user":"5c82db41e4b0c8042a70ce42"},{"problem":134,"code":"(fn [sym, mapVal] (and (= sym :a) (nil? (sym mapVal))))","user":"58c66990e4b021aa9917ed53"},{"problem":134,"code":"(fn [ele coll]\n  (and (contains? coll ele) (nil? (ele coll))))","user":"5473efc3e4b0c51c1f4d7285"},{"code":"(fn\n  [k h]\n  (let [is-nil (nil? (k h))\n        has-key (contains? h k)]\n    (and is-nil has-key)))","problem":134,"user":"53334cb2e4b019098a6f8b81"},{"problem":134,"code":"(fn[key mp] (and (contains? mp key) (nil? (mp key)) ))","user":"53ad28ede4b047364c044462"},{"problem":134,"code":"(fn [thekey themap]\n  (if (contains? themap thekey)\n    (if (= (thekey themap) nil)\n      true\n      false)\n    false))","user":"592ac17ae4b072a2710fcf26"},{"problem":134,"code":"(fn[x coll] (nil? (get coll x :none)))","user":"5753e8e2e4b02ea1147992b2"},{"code":"(fn [k m] (= nil (get m k 42)))","problem":134,"user":"4fde1109e4b05e33b9224f81"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (if (= nil (get %2 %1))\n     true\n     false)\n   false)","user":"57e6ed35e4b0bfb2137f5af5"},{"code":"(fn [x, y] \n  (if (contains? y x)\n    (nil? (y x))\n    false\n    )\n  )","problem":134,"user":"50fb084ee4b0d10d794c19dd"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)\n     (nil? (get m k))))","user":"543a8256e4b032a45b869327"},{"code":"(fn [key, map] (and (contains? map key) (nil? (key map))))","problem":134,"user":"52d49445e4b09f7907dd1332"},{"problem":134,"code":"(fn [k m]\n  (let [v (get m k :nil)]\n    (nil? v)))","user":"5166b716e4b060c690c1f4bf"},{"problem":134,"code":"(fn [x y] \n\t(and (contains? y x) (= nil (get y x)) ) \n)","user":"56aa9464e4b07966d5a8a08d"},{"code":"#(and (contains? %2 %) (not (%2 %)))","problem":134,"user":"4f0e4ebd535d0136e6c22322"},{"problem":134,"code":"#(= nil (% %2 :n))","user":"567b2f20e4b05957ce8c61a2"},{"problem":134,"code":"(fn [k m] (and (contains? (into #{} (keys m)) k)\n                (not (get m k))))","user":"57ffacd9e4b0a837a8b30c26"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k)\n    (= (k m) nil)\n    false))","user":"5c42754ee4b0e06e1360a35c"},{"code":"(fn[x y] (= (contains? y x) (= (x y) nil)))","problem":134,"user":"4ef01dc9535dced4c769f209"},{"code":"(fn [k m] (and \n            (contains? m k)\n            (nil? (k m))))","problem":134,"user":"4e7f32ee535db966e863cc3a"},{"problem":134,"code":"(fn f [k m] \n  (if (contains? m k) \n    (if (= (m k) nil) \n      true \n      false) \n    false))","user":"54f77213e4b01ecee9d8881d"},{"code":";; third arg is the default value, if no mapping is found\n#(nil? (%2 %1 true))","problem":134,"user":"51bc99afe4b0fe3ecfb4645e"},{"problem":134,"code":"(fn containsNil [k m]\n  (and (contains? m k) (= nil (m k))))","user":"58cf00c8e4b03c36ff7e58ac"},{"code":"#(if (find %2 %1)\n    (if (nil? (%1 %2))\n      true\n      false)\n    false)","problem":134,"user":"50399468e4b088a6a14ca768"},{"problem":134,"code":"(fn [keya coll] (and (contains? coll keya) (nil? (keya coll))))","user":"5dde6251e4b0948ae9d9add3"},{"problem":134,"code":"(fn [k lst] (and (contains? lst k) (= (k lst) nil)) )","user":"608e5697e4b03bd49d9f36be"},{"code":"(fn a [k m] (if(contains? m k) (nil? (m k)) (identity false)))","problem":134,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":134,"code":"(fn f [ k col ] (and  (contains? col k ) (nil? (col k) )))","user":"55810c73e4b05c286339e0f2"},{"code":"(fn foo[key,mapl] \n  (and \n    (= nil (get mapl key)) \n    ( contains? mapl key)))","problem":134,"user":"4fb0c8dde4b081705acca26d"},{"code":"#(= (%1 %2 :default) nil)","problem":134,"user":"52753740e4b03e8d9a4a74c1"},{"code":"(fn [x coll] (if (find coll x) (nil? (get coll x)) false))","problem":134,"user":"4f99bf3ee4b0dcca54ed6d01"},{"problem":134,"code":"#(and (contains?  %2 %) (nil? (% %2)))","user":"52ade380e4b0c58976d9ac9b"},{"problem":134,"code":"#(if (= (get %2 %1 \"missing\") nil) true false)","user":"59c77511e4b0a024fb6ae545"},{"code":"(fn [x l] (if (contains? l x) (= (x l) nil) false))","problem":134,"user":"51dd88e2e4b0c33a4e1da40b"},{"problem":134,"code":"#(and (nil? (get %2 %1)) (not (nil? (find %2 %1))))","user":"553b90c8e4b09218d5f45005"},{"code":"(fn [k h] (and (contains? h k) (nil? (k h))))","problem":134,"user":"501adc55e4b0968d2b1d44af"},{"problem":134,"code":"(fn y\n  [k lst]\n  (if (= nil (get lst k true))\n         true\n         false))","user":"571ff1ebe4b0c5bde472c088"},{"problem":134,"code":"#(nil? (get %2 %1 -1))","user":"5680a7f6e4b0966858e4d8f1"},{"problem":134,"code":"#(and \n  (nil? (get %2 %1)) \n  (contains? (set (keys %2)) %1)\n  )","user":"5d68e60be4b0db5d338d1603"},{"code":"(fn[x y] \n  (if (and (nil? (get y x)) (contains? y x))\n    true\n    false))","problem":134,"user":"4e2ef93d535deb9a81d77f0f"},{"code":"#(nil? (if (contains? %2 %)(get %2 %) 1))","problem":134,"user":"4e1fe7f1535d04ed9115e810"},{"problem":134,"code":"(fn [k d]\n  (= nil (get d k false)))","user":"5819a092e4b0e114eb519fdb"},{"problem":134,"code":"(fn [x y] \n  (if (contains? y x)\n    (= (y x) nil)\n    false))","user":"580d7bdae4b0849f6811b73c"},{"problem":134,"code":"(fn [_key _map] \n  (if (= nil (get _map _key false)) \n    true\n    false))","user":"53b890e1e4b047364c0444df"},{"code":"(fn [k m] (and (contains? m k) \n               (nil? (m k))))","problem":134,"user":"4f0b3c88535d0136e6c22301"},{"problem":134,"code":"(fn [k m] (if (and (contains? m k) (nil?(get m k))) true false))","user":"542baf7ce4b0dad94371f291"},{"problem":134,"code":"(fn [k m]\n  (if \n    (and (contains? m k) \n         (nil? (get m k)))\n         true false))","user":"5c3f29d4e4b08cd430848e8f"},{"code":"#(nil? (get %2 % 1))","problem":134,"user":"4ed6ac40535d10e5ff6f52e4"},{"code":"(fn [k m] (nil? (get m k :notfound)))","problem":134,"user":"5115277be4b0ce5098ee73b8"},{"problem":134,"code":"(fn [k m]\n  (if (= nil (get-in m [k] 1))\n    true\n    false))","user":"57f85b36e4b0d3187e900924"},{"problem":134,"code":"(fn [k m]\n   (and\n    (contains? m k)\n    (nil? (k m))))","user":"5f3f2281e4b004f08c61c561"},{"problem":134,"code":"(fn [x y] (if (contains? y x) (not (x y)) false))","user":"4dbf01c8535d020aff1edf6f"},{"code":"(fn[y x] (= [y nil] ( find x y)))","problem":134,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":134,"code":"#(if (and (contains? %2 %1) (nil? (% %2))) true false)","user":"5414dccbe4b01498b1a719f1"},{"code":"(fn [key map] \n (if (and (contains? map key) (= nil (map key))) true false))","problem":134,"user":"4eb9353f535dfed6da9c6d4e"},{"problem":134,"code":"(fn [key map] (and\n               (contains? map key)\n               (= nil (get map key))))","user":"55d5e80ee4b0e31453f64a91"},{"code":"(fn [k, v] \n  (and \n    (contains? v k) \n    (= (k v) nil)))","problem":134,"user":"4ed3abd1535d44c135fd68f4"},{"code":"#(nil? (get %2 %1 :no))","problem":134,"user":"4e6dd51b535d5021c1a895f6"},{"problem":134,"code":"(fn [param map]\n  (if (and (contains? map param) (= (map param) nil))\n    true\n    false))","user":"5ac383b8e4b0e27600da7719"},{"code":"(fn [k m]\n  (if (contains? m k)\n  \t(if (= (get m k) nil)\n    \ttrue\n    \tfalse)\n  false))","problem":134,"user":"532db3e7e4b019098a6f8b3d"},{"problem":134,"code":"(fn [k m]\n  (if \n    (and \n     (contains? m k)\n     (nil? (get m k)))\n    true\n    false))","user":"53051bf6e4b0d8b024fd3759"},{"problem":134,"code":"(fn [k m] (and (= nil (k m)) (not= -1 (.indexOf (keys m) k))))","user":"4db1e34f1254ad5b4805fa73"},{"code":"(fn [k, m]\n    (if (contains? m k)\n        (nil? (m k))\n        false))","problem":134,"user":"51ec9114e4b069f463c22ccd"},{"problem":134,"code":"(fn [k, m] (= (get m k 0) nil))","user":"60b5fa96e4b0e0fa5f1b4242"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (= (key map) nil)\n  \tfalse))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":134,"code":"(fn [k hsh] (nil? (get hsh k \"not here\")))","user":"57a22c85e4b0c3d858beb8f6"},{"code":"#(and (contains? %2 %1)(nil?(%1 %2)))","problem":134,"user":"4ef87ea7535dced4c769f25f"},{"problem":134,"code":"(fn[k,m] (and (contains? m k) (nil? (m k))))","user":"599acb39e4b07157cc8dab14"},{"problem":134,"code":"#(nil? (%1 %2 \"dude\"))","user":"55e20451e4b050e68259b428"},{"code":"(fn [k, m] (and (nil? (k m)) (contains? m k)) )","problem":134,"user":"5210e5c5e4b080a8d9b9d63f"},{"code":"(fn foo [k m]\n  (and (contains? m k) (nil? (k m))))","problem":134,"user":"4f189b42535d64f60314645d"},{"problem":134,"code":"(fn [x col] (and (contains? col x) (nil? (get col x))))","user":"51b920bfe4b0e871ca4958f9"},{"problem":134,"code":"(fn [key map] (if (contains? map key) \n                (nil? (key map))\n                false))","user":"57e41d99e4b0bfb2137f5ab5"},{"code":"(fn [the-key the-map] \n  (let [the-value (get the-map the-key :not-found)]\n    (nil? the-value)))","problem":134,"user":"4fabbb97e4b081705acca21d"},{"problem":134,"code":"(fn [k m] \n  (and \n   \t(nil? (k m))\n   \t(contains? m k)\n   ))","user":"5c8bc8bde4b048ec896c5979"},{"code":"(fn [x c] (and (contains? c x) (= nil (x c))))","problem":134,"user":"4e7c1e9d535db169f9c796bb"},{"problem":134,"code":"#(and (nil? (%2 %1)) (nil? (%2 %1 1)))","user":"5457e5f1e4b01be26fd74613"},{"code":"(fn contain?\n  [x y] \n  (and (contains? y x) (= (x y) nil))\n)","problem":134,"user":"527375e1e4b03e8d9a4a7480"},{"problem":134,"code":"(fn [map-key map]\n   (if (contains? map map-key)\n     (= nil (map-key map))\n     false))","user":"56040e58e4b0c80df0ca2654"},{"code":"(fn [k m] (if (and (contains? m k) (= nil (m k))) true false))","problem":134,"user":"50ff5887e4b017584cb41ccd"},{"code":"(fn[x y] (and (contains? y x) (nil? (x y))))","problem":134,"user":"4daeabf6edd6309eace4d15c"},{"problem":134,"code":"#(nil? (get %2 %1 \"nf\"))","user":"5eb6561fe4b00a66d4a95233"},{"problem":134,"code":"; (fn [k m] (and (contains? m k) (nil? (m k))))\n\n#(nil? (% %2 false))","user":"54889b50e4b0e286459a11d4"},{"code":"(fn [k x]\n  (let [z (seq x)]\n    (loop\n      [s z]\n      (if\n        (= nil (first s))\n        false\n        (if\n          (and (= k (first (first s))) (= nil (second (first s))))\n          true\n          (recur (rest s)))))))","problem":134,"user":"530d85dee4b08068f379eca8"},{"code":"(fn [key m] (and (contains? m key) (nil? (m key))))","problem":134,"user":"4ec1b80c535dfed6da9c6db6"},{"code":"(fn [k m] (if (contains? m k) (= nil (get m k)) false))","problem":134,"user":"51631aeee4b055933a9ca02a"},{"code":"(fn [key seq] (and (= (seq key) nil) (contains? seq key)))","problem":134,"user":"5138da28e4b0a5db03d727dd"},{"problem":134,"code":"(fn\n  [keyIn mapIn]\n  (nil? (get mapIn keyIn \"notFound\")))","user":"5e1b0140e4b0dc959400851c"},{"code":"#(-> (and (nil? ( %2 %1)) (contains? %2 %1)))","problem":134,"user":"51d9eb05e4b02ceefd947755"},{"code":"(fn [x y] (if (contains? y x) \n            (if (nil? (get y x)) true false) \n            false))","problem":134,"user":"53536386e4b084c2834f4afe"},{"code":"(fn [keya mapa]\n  (and (contains? mapa keya)\n      (nil? (mapa keya))))","problem":134,"user":"4ec7def0535d6d7199dd36e9"},{"problem":134,"code":"(fn [k m] \n  (if (and (contains? m k) (nil? (get m k)))\n    true\n   \tfalse))","user":"5e6e2143e4b04a83ad7cd298"},{"code":"(fn [x y] \n  (if (contains? y x) \n  (nil? (get y x))\n  false\n  ) \n)","problem":134,"user":"501bf2cee4b08e00484756a6"},{"problem":134,"code":"(fn [k m] (nil? (get m k :junk_val)))","user":"5a533cc0e4b05d388ecb6c09"},{"code":"(fn [key map] (and (contains? map key) (= nil (map key))))","problem":134,"user":"51761580e4b085adf681d880"},{"problem":134,"code":"#(if (= nil (if (contains? %2 %1) (%1 %2) false)) true false)","user":"53bae8b9e4b047364c0444fd"},{"code":"(fn [x coll] \n  (if (and (contains? coll x) (= (get coll x) nil))\n    true\n    false))","problem":134,"user":"52b3658be4b0c58976d9ad0a"},{"problem":134,"code":"(fn [key map]\n\t(and (contains? map key) (nil? (get map key)))\n)","user":"560d2bf5e4b05f002753df39"},{"problem":134,"code":"(fn [key m] (and (contains? (set (keys m)) key)\n                 (nil? (get m key))))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":134,"code":"(fn [k s] (and (contains? s k) (nil? (get s k))))","user":"55cc4492e4b0e31453f64a0e"},{"problem":134,"code":"#(and (contains? %2 %1 ) (nil? (%1 %2)))","user":"56c3aca0e4b05cc29241ee90"},{"code":"(fn [ k m ] (and (contains? m k) (nil? (m k))))","problem":134,"user":"535a18e3e4b04ce2eb3ed2a4"},{"code":"(fn [k m] (if (and (contains? m k) (not (m k))) true false))","problem":134,"user":"521b3f2fe4b0c4ef0be83034"},{"code":"#(and (contains? %2 %1)\n               (nil? (%2 %1)))","problem":134,"user":"501fa1aee4b0cb6ebc0a42eb"},{"problem":134,"code":"#(nil? (get %2 %1 :else))","user":"53b71b94e4b047364c0444cd"},{"problem":134,"code":"(fn [k m]\n    (if (contains? m k)\n      (if (nil? (k m))\n        true false)\n      false\n      ))","user":"5d52bf29e4b0776584bd6f69"},{"problem":134,"code":"(fn [k m]\n  (if\n   (contains? m k) \n    (if (= (m k) nil) true false)\n    false\n   )\n  )","user":"6074f5ede4b069485764de52"},{"code":"(fn [k mymap] (if (and (contains? mymap k) (nil? (mymap k))) true false))","problem":134,"user":"52d6889ae4b09f7907dd1361"},{"problem":134,"code":"(fn [i coll]\n  (and\n    (contains? coll i)\n    (nil? (coll i))))","user":"5990a9fde4b0866487ed0d54"},{"code":"(fn [x map] (= nil (get map x true)))","problem":134,"user":"4e836a16535db62dc21a62d6"},{"code":"(fn [k m] (if (and (some (partial = k) (keys m)) (not (k m))) true false))","problem":134,"user":"4e970e6a535dbda64a6f6b4e"},{"problem":134,"code":"#(cond\n    (not (contains? %2 %1)) false\n    (= (%2 %1) nil) true\n    :else false\n    )","user":"5f7ac592e4b02876ed9fd0d2"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k) (= nil (k m)))\n  )","user":"5368a275e4b0243289761e8f"},{"code":"(fn [key map] (not (get map key true)))","problem":134,"user":"4fd1971ae4b04c3a95aa0412"},{"code":"#(if (and (nil? (% %2)) (contains? %2 %))\ntrue\nfalse)","problem":134,"user":"4fea9154e4b0140c20fb9c0a"},{"code":"(fn [k m]\n  (= m (conj m [k nil])))","problem":134,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":134,"code":"(fn [k m] (= (k m 1) nil))","user":"577202d2e4b0979f896515c0"},{"code":"(fn [x y] (nil? (get y x :c)))","problem":134,"user":"4f05c087535dcb61093f6c00"},{"code":"(fn [ikey imap] (nil? (get imap ikey false)))","problem":134,"user":"4fb804f7e4b081705acca2d6"},{"problem":134,"code":"(fn [key map]\n  (and\n   (contains? map key)\n   (nil? (key map))\n   ))","user":"56ca2f25e4b0ea9b8538f716"},{"problem":134,"code":"(fn [k m]\n  (if (nil? (get m k false))\n    true\n    false))","user":"5ff8ead1e4b06df49cee14ab"},{"problem":134,"code":"(fn [key map] (if (contains? map key) (if (nil? (key map)) true false) false))","user":"56791447e4b05957ce8c6183"},{"code":"#(=(get %2 %1 :d) nil)","problem":134,"user":"500690e4e4b0678c553fc488"},{"code":"(fn [k l] (if (contains? l k) (nil? (get l k)) false))","problem":134,"user":"513dc533e4b0825f97f7f961"},{"code":"(fn [x y]\n  (if (contains? y x)\n    (if (y x)\n      false\n      true)\n    false)\n  )","problem":134,"user":"51bec919e4b013aa0d74b800"},{"code":"(fn [x y] (if (contains? y x) (= (x y) nil) false))","problem":134,"user":"51dd55dae4b0c33a4e1da404"},{"problem":134,"code":"(fn [x, y] (= nil (get y x false)))","user":"53f17931e4b0742d9025b0dd"},{"code":"(fn [k m]\n    (and (nil? (m k)) (contains? m k)))","problem":134,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"#(if (contains? %2 %1) (if (= (%2 %1) nil) true false) false)","problem":134,"user":"4fbcbd50e4b081705acca2f9"},{"problem":134,"code":"(fn [key, map] (not (get map key \"missing\")))","user":"5643aed5e4b0018b46ad8bfd"},{"problem":134,"code":"(fn nil-val? [k m]\n(and (contains? m k) (nil? (m k))))","user":"592fa9f8e4b072a2710fcfcb"},{"problem":134,"code":"(fn [k dict] (and (contains? dict k\n                             ) (= (k dict) nil)))","user":"5675f2f4e4b05957ce8c6153"},{"problem":134,"code":"(fn [q m] (and (contains? m q) (nil? (get m q))))","user":"53c6a2fde4b00fb29b22129d"},{"code":"(fn [le_key coll] (= nil (get coll le_key \"DIE\")))","problem":134,"user":"52fa8e32e4b047fd55836ffa"},{"problem":134,"code":"#(and (contains? %2 %1) (nil? (second (find %2 %1))))","user":"5326e4efe4b09d4e7a9b54f5"},{"code":"(fn [k c] (and (contains? c k) (nil? (get c k))))","problem":134,"user":"503e52aae4b06c4e0e1fa265"},{"problem":134,"code":"#(= nil (%2 % false))","user":"5eb193fde4b00a66d4a951fe"},{"code":"(fn [key m] (and (contains? m key) (= (key m) nil)))","problem":134,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":134,"code":"(fn [key m]\n  (if-let [value (find m key)]\n    (nil? (second value))\n    false))","user":"571543bbe4b07c98581c3ad4"},{"code":"(fn [key map] (= nil (get map key :not-found)))","problem":134,"user":"52323a4ae4b035af41902a79"},{"problem":134,"code":"#(and (not (%1 %2)) (= %1 :a))","user":"545b77f5e4b01be26fd74653"},{"problem":134,"code":"#(if (contains? %2 %1)\n     (nil? (%2 %1) )\n     false)","user":"5c896f46e4b048ec896c5940"},{"code":"#(= nil (%2 %1 42))","problem":134,"user":"4ed19f00535d44c135fd68d1"},{"code":"#(nil? (%2 %1 \"wrong\"))","problem":134,"user":"5152f82ee4b03f948212e718"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (nil? (k m))) )","user":"5496d215e4b0b312c081ff69"},{"problem":134,"code":"#(nil? (%2 %1 :nein))","user":"4e68dfe6535d8ccf87e9fe91"},{"problem":134,"code":"(fn [elem lst]\n  (if (contains? lst elem)\n  \t(= nil (get lst elem))\n    false))","user":"5938bca5e4b02506e01a29eb"},{"problem":134,"code":"#(nil? (%1 %2 :default))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":134,"code":"(fn [k s] (nil? (get s k 0)))","user":"59d02bfbe4b0ef0a1e9b5b7b"},{"problem":134,"code":"(fn [x m] (if (contains? m x)\n            (nil? (x m))\n            false))","user":"599342efe4b0b211ea3aaab0"},{"problem":134,"code":"(fn [x xs] \n\t(if (and (contains? xs x) (= (xs x) nil))\n\ttrue\n\tfalse))","user":"57c5ee11e4b05aa3c4741ceb"},{"problem":134,"code":"(fn [key map] (if (= (get map key \"Missing key\") nil) true false))","user":"58969076e4b00487982d52a2"},{"problem":134,"code":"(fn [map-key param-map]\n  (and \n   (contains? param-map map-key)\n   (nil? (map-key param-map))))","user":"57c2d66ae4b05aa3c4741cb9"},{"code":"#(and (contains? %2 %1)\n      (= (%1 %2) nil))","problem":134,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":134,"code":"(fn [x y] (if(and (nil? (x y)) (contains? y x))\n          true\n          false))","user":"55705dd0e4b09a3098a5252c"},{"problem":134,"code":"(fn [x y] (if (and (= nil (get y x)) (contains? y x) ) true false))","user":"53d8da61e4b0e771c3025471"},{"code":"(fn its-nil [k m]\n  (=\n    true\n    (nil? (k m))\n    (contains? m k)))","problem":134,"user":"535a170ae4b04ce2eb3ed2a3"},{"problem":134,"code":"(fn[x m]\n  (if (contains? m x)\n    (nil? (x m))\n    false))","user":"56df632ce4b0ca2494a095f2"},{"code":"(fn[k c](and(contains? c k)(nil? (c k))))","problem":134,"user":"50e82c31e4b0ebbe794eb7da"},{"problem":134,"code":"(fn nil-key? [key data] (and (contains? data key)(nil? (key data))))","user":"5887a686e4b0f1effa3b7702"},{"code":"#(if (and (= (%1 %2) nil)) \n  (contains? %2 %1)\n  false)","problem":134,"user":"5236cd89e4b0e010857b4e45"},{"problem":134,"code":"(fn [key map]  (if (contains? map key) (nil? (map key)) false))","user":"582dc562e4b051871117bfcb"},{"code":"(fn [key map] \n  (if (contains? map key)\n    (= (key map) nil)\n    false\n  )\n)","problem":134,"user":"531ba143e4b08068f379ed91"},{"problem":134,"code":"#( and (contains? %2 %) (= nil (get %2 %)) )","user":"5602b618e4b04bb52996e1a5"},{"problem":134,"code":"(fn [a b]\n  (and (contains? b a) (nil? (get b a))))","user":"5db658ebe4b010eb3c36cd39"},{"problem":134,"code":"(fn [k, m]\n  (and (contains? m k) (= (get m k) nil)))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn [k,m] (and (nil? (k m)) (contains? m k)))","problem":134,"user":"520612a7e4b0bf4f1882c81c"},{"code":"(fn \n  [k coll] \n    (and (contains? coll k) (nil? (k coll))))","problem":134,"user":"4fdce986e4b05e33b9224f74"},{"problem":134,"code":"#(if(contains? %2 %1) \n\t(=(%2 %1) nil)\n     false)","user":"57604a87e4b08062f99a4e91"},{"problem":134,"code":"(fn [key map] (and (= true (contains? map key)) (= nil (map key))))","user":"54b5ce67e4b05787c3b163ac"},{"problem":134,"code":"(fn [k, m]\n  (and\n    (contains? m k)\n    (nil? (k m))\n   ))","user":"5433eecae4b0b6b47310fce6"},{"problem":134,"code":"(fn [k m] (= (get m k \"missing\") nil) )","user":"514504c2e4b021a5ff8301fc"},{"problem":134,"code":"#(= true (= nil (%2 %1)) (contains? %2 %1))","user":"541ae3bde4b01498b1a71a60"},{"problem":134,"code":";(fn [k m] (and (contains? m k) (nil? (get m k))))\n#(nil? (get %2 %1 false))","user":"55647a31e4b0c656e3ff1808"},{"problem":134,"code":"(fn [k map] (nil? (get map k \"not-found\")))","user":"55ade883e4b03311e7b732ac"},{"code":"(fn [x y] (and (contains? y x) (= (x y) nil)))","problem":134,"user":"5106c803e4b01150e115ebee"},{"code":"(fn [k l] (and (not (nil? (find  l k))) (nil? (l k))))","problem":134,"user":"51e7c1f1e4b0a3e081b8cbef"},{"problem":134,"code":"#(if(nil? (%1 %2)) (contains? %2 %1) false)","user":"54a11042e4b09f271ff37c49"},{"code":"(fn [lekey lemap] (= nil (lekey lemap false)))","problem":134,"user":"5242d5c3e4b076204b44fa95"},{"problem":134,"code":"(fn [a b]\n  (if (= nil (get b a \"missing\")) true false))","user":"53c83f94e4b00fb29b2212af"},{"problem":134,"code":"(fn [key map]\n  (let [entry (find map key)]\n    (and (not (nil? entry))\n         (nil? (val entry)))))","user":"5fb8fe30e4b03f550f448223"},{"code":"(fn [k v] (if (or (v k) (not ((into #{} (keys v)) k))) false true))","problem":134,"user":"4ec8736f535d6d7199dd36f3"},{"code":"#(if (contains? %2 %1 ) (nil? (%1 %2)) false)","problem":134,"user":"531bfb69e4b08068f379ed97"},{"problem":134,"code":"(fn [k xs] (= nil (get xs k false)))","user":"5788f357e4b0ebec4cfb7527"},{"code":"(fn [k m] (nil? (get m k :non-nil)))","problem":134,"user":"4e7c8fd1535db169f9c796be"},{"problem":134,"code":"(fn [k m] (cond (=(get m k \"n/a\") nil) true :else false))","user":"548f3ee4e4b0e286459a1237"},{"problem":134,"code":"(fn\n    [k m]\n    (if (and (contains? m k) (nil? (k m)))\n        true\n        false))","user":"55d073ece4b0e31453f64a3b"},{"problem":134,"code":"(fn [k m]\n  (= (get m k ::undefined) nil))","user":"605b49b7e4b079a07f8593f8"},{"code":"(fn [x y]\n   (cond (not (contains? y x)) false\n          (nil? (x y)) true\n         :else false))","problem":134,"user":"51cacda3e4b068dadb8f2227"},{"code":"(fn [k m] (and (contains? m k) (nil? (m k))) )","problem":134,"user":"500cb910e4b05f7c30cfa698"},{"problem":134,"code":"(fn [k m] (if-let [[k v] (find m k)] (nil? v) false))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":134,"code":"(fn [k coll]\n  (if (contains? coll k)\n    (= (k coll) nil)\n    false))","user":"58bd728ce4b0888cdc949d2f"},{"code":"#(if (not= nil (first (find %2 %1))) \n  (= nil (%1 %2)) false)","problem":134,"user":"4ea9b80c535d7eef30807306"},{"code":"(fn [k mp] (if (contains? mp k) (if (= (get mp k) nil) true false) false))","problem":134,"user":"4ea16981535d7eef308072b2"},{"code":"#(if-let [r (find %2 %)] (nil? (val r)) false)","problem":134,"user":"5063fe48e4b075d771da6f9e"},{"code":"(fn [k m] (and (not (= () (filter #(= % k) (keys m))))\n               (nil? (k m))))","problem":134,"user":"4e243bcb535d04ed9115e825"},{"code":"(fn [k m] (nil? (get m k 0)))","problem":134,"user":"5037c397e4b0af0658af77b4"},{"problem":134,"code":"(fn [key val]\n  (and\n    (contains? val key)\n    (nil? (key val))\n  )\n)","user":"5625f678e4b00e49c7cb47b8"},{"problem":134,"code":"(fn [prop hashmap]\n  (= (get hashmap prop false) nil)\n)","user":"5a35d515e4b0ddc586f153e1"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (if (nil? (get %2 %1))\n     true\n     false)\n   false)","user":"5f0e32a1e4b0f30dddfb5d59"},{"code":"#(nil? (get %2 %1 :t))","problem":134,"user":"4ede88cb535d10e5ff6f5338"},{"problem":134,"code":"(fn [key map]\n\t       (and (contains? map key) (= (get map key) nil)))","user":"51591477e4b059418b97f0b0"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k :no-val)))","user":"5379306fe4b06839e8705e50"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n   \t(if-not (get m k)\n    \ttrue\n    \tfalse)\n    false))","user":"5f73000ce4b02876ed9fd094"},{"problem":134,"code":"(fn f [k m] (and (contains? m k) (= nil (get m k))))","user":"5716540fe4b07c98581c3af3"},{"code":"#(and (contains? %2 %) (nil? ((keyword %) %2)))","problem":134,"user":"53307a23e4b019098a6f8b5d"},{"problem":134,"code":"#(let [x %1 xs %2] (if(contains? xs x) (contains? (into #{}(find xs x)) nil) false ))","user":"54dce6dbe4b024c67c0cf78d"},{"code":"(fn [a m] (and (nil? (m a)) (contains? m a)))","problem":134,"user":"4e1fe800535d04ed9115e811"},{"code":"(fn [k mp] \n  (if (nil? (mp k :none)) \n    true \n    false))","problem":134,"user":"4e52777f535d302ef430da76"},{"problem":134,"code":"(fn [k m] (let [keys (keys m) value (m k) set-keys (set keys)] (if (and (set-keys k) (nil? value)) true false)))","user":"532dbd3ce4b019098a6f8b40"},{"code":"(fn [key map] (and (not (nil? (some #(= key %) (keys map)))) (nil? (key map))))","problem":134,"user":"4ecfe525535d44c135fd68bf"},{"problem":134,"code":"(fn [key h]\n  (and (contains? h key) (nil? (key h))))","user":"5beadeb5e4b0f319e2d7ec88"},{"code":"(fn [key map] (if (contains? map key) (nil? (get map key)) false))","problem":134,"user":"4feddf2ee4b0198f34b063be"},{"code":"(fn [k m]\n  (let [val (get m k \"not found\")]\n    (if (= val \"not found\")\n      false\n      (if (= val nil)\n        true\n        false))))","problem":134,"user":"4ff505c8e4b0678c553fc364"},{"code":"(fn [k m] (not (get m k true)))","problem":134,"user":"4e8df08f535d65386fec213e"},{"code":"(fn [x y] (if (contains? y x) (if (= nil (y x)) true false) false))","problem":134,"user":"52621a5ae4b03e8d9a4a7076"},{"problem":134,"code":"#(nil? (%1 %2 :missing))","user":"555287a4e4b0deb715856df5"},{"code":"(fn [x z] (if(= nil (get z x))\n            (contains? z x)\n            (= 1 0)))","problem":134,"user":"51cb073ce4b068dadb8f2233"},{"problem":134,"code":"(fn [x m]\n  (if (nil? (get m x 0))\n    true\n    false))","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":134,"code":"#(nil? (get %2 % \"nil\"))","user":"555e9dbfe4b0a2eb076a39bc"},{"code":"#(and (not= nil (find %2 %1)) (= nil (val (find %2 %1))))","problem":134,"user":"4fc0853ae4b081705acca327"},{"code":"#(nil? (%2 %1 false))","problem":134,"user":"4e7d2448535db169f9c796c8"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k)\n    (= (m k) nil)\n    false))\n;#(zipmap %2 (repeat %1))\n;#(nil? (get %2 %1 \" \"))","user":"57ee46c7e4b0bfb2137f5bb3"},{"problem":134,"code":"(fn [k kv] (nil? (kv k true)))","user":"536f96e3e4b0fc7073fd6e83"},{"code":"(fn [x y]\n  (and\n    (= (x y) nil)\n    (contains? y x)))","problem":134,"user":"4e73a9dc535dff18050a9c77"},{"problem":134,"code":"#(= (% %2 false) nil)","user":"54126d0ce4b01498b1a719d5"},{"problem":134,"code":"#(and (> (count (select-keys %2 [%1])) 0) (= (%1 %2) nil))","user":"602abb59e4b0d5df2af2225e"},{"problem":134,"code":"(fn [key map] (if (and (contains? map key) (nil? (key map))) true false))","user":"5535e822e4b09218d5f44fb2"},{"problem":134,"code":"#(= nil (get %2 %1 2))","user":"5df79420e4b0a607a9a45c9a"},{"problem":134,"code":"(fn [x, coll] (if (contains? coll x) (nil? (get coll x)) (contains? coll x)))","user":"55c07e3ee4b01b9910ae2a24"},{"problem":134,"code":"#(if\n   (and\n    (contains? %2 %1)\n    (=\n     nil\n     (get %2 %1)))\n   true\n   false)","user":"5851b51be4b0b7285a6f4e99"},{"code":"(fn [key map] \n  (and \n    (nil? (get map key))\n    (contains? map key)))","problem":134,"user":"50b65966e4b0a86f8358ca6c"},{"code":"(fn iff[k m] (and (contains? m k) (= (k m) nil)))","problem":134,"user":"52e980b3e4b09f7907dd14af"},{"code":"#(and (contains? %2 %1) \n      (= nil (%2 %1)))","problem":134,"user":"52aad30ce4b0c58976d9ac6d"},{"code":"(fn [k m]\n  (let [v (find m k)]\n    (if v\n      (nil? (v 1))\n      false)))","problem":134,"user":"4f7a9416e4b06e829148e19b"},{"code":"(fn [a b] (= nil (get b a false)))","problem":134,"user":"5097b556e4b00ad8bab4e970"},{"problem":134,"code":"(fn [x y]\n  (if (= (get y x \"missing\") nil)\n    true\n    false))","user":"54196d63e4b01498b1a71a34"},{"problem":134,"code":"(fn [k group]\n    (not (group k true)))","user":"5f38eecce4b0574c87022c72"},{"problem":134,"code":"#(if (and (contains? %2 %1) (nil? (%1 %2)))       true false)","user":"57ff52c7e4b0d3187e9009ea"},{"problem":134,"code":"(fn [key map]\n  (if (and (contains? map key) (nil? (key map))) true\n    \t\t\t\t\t\t\t\t\t\t     false))","user":"541cf6dfe4b01498b1a71a7a"},{"code":"(fn nil-key? [x m] (and (contains? m x) (nil? (get m x))))","problem":134,"user":"50ab44b2e4b0f65d68208509"},{"problem":134,"code":"(fn [a-key a-map]\n  (let [value (get a-map a-key ::not-found)]\n    (and (not= value ::not-found)\n         (nil? value))))","user":"5ebcfe31e4b00a66d4a9526d"},{"problem":134,"code":"(fn [x seq1] (and (contains? seq1 x) (nil? (seq1 x))))","user":"55e00655e4b050e68259b405"},{"code":"(fn [key map]\n  (and (contains? map key) (= nil (map key)))\n  )","problem":134,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":134,"code":"(fn [k coll] (if (and (contains? coll k) (not (k coll))) true false))","user":"5a4d656fe4b05d388ecb6ba9"},{"problem":134,"code":"#(nil? (get %2 %1 :_))","user":"5ce97826e4b0a17bb84e2bc0"},{"problem":134,"code":"(fn [k m] (let [x  (get m k \"missing\")] \n            (= x nil)))","user":"57df309ee4b0bd073c20245f"},{"code":"(fn [x y] (nil? (get y x \"\")))","problem":134,"user":"4e794004535db169f9c796a1"},{"code":"(fn [x, m] (and (nil? (m x)) (contains? m x)))","problem":134,"user":"51ae8f48e4b09397d5109793"},{"problem":134,"code":"#(if (and (nil? (%1 %2)) \n          (contains? %2 %1)) true false)","user":"53ef235de4b0d648e757f4d4"},{"problem":134,"code":"(fn [k m] \n  \n  (if (contains? m k)  \n  \t(nil? (get m k))\n    false\n  \n  )\n )","user":"5e5f83a2e4b0fd0acd15867b"},{"code":"(fn [needle stack]\n  (boolean \n    (and (contains? stack needle)\n         (= (stack needle) nil ))))","problem":134,"user":"4fe8d1b5e4b0547ebccb2425"},{"code":"(fn [k xs]\n  \t(if (contains? xs k) (= nil (get xs k)) false)\n  )","problem":134,"user":"50a8bb65e4b0deba384a58bd"},{"code":"(fn this [k m]\n  (let [ks (keys m)]\n    (loop [SearchKeys ks]\n      (if (= k (first SearchKeys))\n        (if (nil? (k m)) true false)\n        (if (empty? (rest SearchKeys))\n          false\n          (recur (rest SearchKeys)))))))","problem":134,"user":"51e5a627e4b0efabf93c02db"},{"problem":134,"code":"(fn[x y] (if (contains? y x) (= nil (y x)) false))","user":"5644611be4b0284900eef5f1"},{"problem":134,"code":"(fn [k col] \n  (cond\n    (false? (contains? col k)) false\n    (nil? (k col)) true\n    :else false\n   ))","user":"6065755ee4b069485764ddcc"},{"code":"#(nil? (get %2 %1 7))","problem":134,"user":"4f93539de4b0dcca54ed6cba"},{"problem":134,"code":"(fn [x y] (if (contains? y x) \n            (= nil (get y x)) \n            false))","user":"55921c21e4b0604b3f94d588"},{"code":"#(nil? (% %2 :not-found))","problem":134,"user":"5011e738e4b0cd3f2a5854e6"},{"problem":134,"code":"(fn \n  [key map]\n  (and (contains? map key) (= (map key) nil)))","user":"5a9567bae4b0d174b936c752"},{"problem":134,"code":"#(and (nil? (get %2 %)) (contains? %2 %))","user":"55b22c33e4b0da326a65cf79"},{"code":"(fn [x mp] (if (contains? mp x) (nil? (x mp)) false))","problem":134,"user":"4e7f5a0b535db966e863cc41"},{"problem":134,"code":"(fn [i m] (and (contains? m i) (= ( get m i) nil) ))","user":"5c3310cde4b0d62ef62d9f43"},{"code":"(fn [key map] (and (nil? (key map)) (contains? map key)))","problem":134,"user":"4dadc6f2c9a9d6ed4099dc57"},{"code":"#(nil? (get %2 %1 :x))","problem":134,"user":"4eaa96e1535d7eef3080730d"},{"problem":134,"code":"#(= (%2 %1 false) nil)","user":"5751f2a2e4b02ea114799292"},{"problem":134,"code":"#(nil? ( %2 % true))","user":"53ada652e4b047364c04446d"},{"code":"(fn [k m]\r\n  (if (contains? m k)\r\n  (nil? (k m))\r\n  false))","problem":134,"user":"4f7d5328e4b06e829148e1bf"},{"code":"(fn [k, m]\n  (if (contains? m k) (if (k m) false true) false))","problem":134,"user":"5356a324e4b04ce2eb3ed269"},{"problem":134,"code":"(fn [akey tmap] (if (contains? tmap akey) \n                  (= (tmap akey) nil) \n                  false))","user":"5f012a2ee4b0cf489e8d7f1e"},{"problem":134,"code":"#(nil? (%2 %1 \"some\"))","user":"5c97821be4b048ec896c5a70"},{"problem":134,"code":"(fn [key coll]\n  (cond (not (contains? coll key)) false\n        :else (= (get coll key) nil)))","user":"5e257a33e4b05b4b01516166"},{"code":"#(and (contains? %2 %1) (= (get %2 %1) nil))","problem":134,"user":"4f14e64e535d64f60314643f"},{"code":"(fn [k m]\n  (if (nil? (m k true)) true false)\n  )","problem":134,"user":"503ca47fe4b06c4e0e1fa24f"},{"code":"#(if (contains? %2 %) (if (= nil (get %2 %)) true false) false)","problem":134,"user":"53422c98e4b00652c8746ed6"},{"code":"(fn [k s] (not (k s 0)))","problem":134,"user":"51069942e4b01150e115ebe8"},{"problem":134,"code":"(fn find-map [key, map]\n  (and (contains? map key)(nil?(map key))))","user":"52afa8a1e4b0c58976d9acbe"},{"code":"(fn [ x m ] (if (= nil (get m x)) (contains? m x) false))","problem":134,"user":"510c16afe4b078ea7192110f"},{"problem":134,"code":"(fn [key map]\n(and \n   (not (map key))\n   (contains? map key)))","user":"5f5e166ce4b02876ed9fcfed"},{"code":"(fn [ky mp] (and (contains? mp ky) (= nil (ky mp))))","problem":134,"user":"515fe402e4b0e2be8aa20bd7"},{"code":"(fn [k m] \n   (and \n     (contains? m k) \n     (not (k m))))","problem":134,"user":"4f9174d0e4b0dcca54ed6c9b"},{"code":"(fn [k m] (not (not (and (find m k) (nil? (m k))))))","problem":134,"user":"4e3ac1b2535deb9a81d77f4c"},{"code":"(fn [ k m ] (and (contains? m k) (= nil (m k))))","problem":134,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":134,"code":"(fn [k m]\n  (-> m (get k false) nil?))","user":"5afecee2e4b0cc2b61a3bd28"},{"code":"(fn [key map]\n  (if (and (= (key map) nil) (contains? map key))\n    true\n    false))","problem":134,"user":"51ade59ae4b09397d510978a"},{"code":"(fn [k m]\n  (and (contains? (set (keys m)) k)\n       (nil? (m k))))","problem":134,"user":"507db411e4b03c76e5499e06"},{"problem":134,"code":"(fn [k dic] (if (and (contains? dic k) (= nil (k dic))) true false))","user":"5ca2ca9fe4b048ec896c5b9c"},{"code":"(fn isNil [key map]\n  (cond\n    (contains? map key)\n      (cond\n        (= (get map key) nil) true\n      :else false\n      )\n    :else false\n      ))","problem":134,"user":"4f54e6f8e4b0a7574ea717ef"},{"code":"(fn [k h] (if (contains? h k) (nil? (h k)) false))","problem":134,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":134,"code":"(fn [k m] (\n           and \n            (contains? m k)\n            (nil? (m k)))\n  )","user":"562add6de4b00e49c7cb4834"},{"problem":134,"code":"(fn kek [k m] (and (contains? m k)(nil? (k m))))","user":"5911aa1de4b0163c97b36ed8"},{"problem":134,"code":"(fn [k, m]\n  (= nil (get m k \"not-found\")))","user":"54258e71e4b01498b1a71b0e"},{"problem":134,"code":"#(nil? (get %2 %1 :nothing))","user":"53a1b5c8e4b0ca733b9744c1"},{"problem":134,"code":"(fn k [ d c] (if (every? (fn [f] (if (= (first f) d) (if (nil? (last f)) false true\n                                             ) true )) c  ) false true ))","user":"53fdc4b8e4b0de5c418485ea"},{"code":"(fn [k m]\n  (if (and (contains? m k) (nil? (k m)))\n    true\n    false))","problem":134,"user":"5024d54fe4b07ca75732c81f"},{"code":"(fn [k m] (if (= (m k :notfound) nil) true false))","problem":134,"user":"51d46747e4b013d740b70de3"},{"problem":134,"code":"(fn isNil\n  [clef mappage]\n  (= (clef mappage \"notNil\") nil)\n)","user":"54410a71e4b032a45b869367"},{"code":"(fn [a b] (if (and (contains? b a) (= (b a) nil)) true false))","problem":134,"user":"4f017593535dcb61093f6a36"},{"problem":134,"code":"(fn [k col] (cond (contains? col k) \n               (nil? (col k)) \n                  :else false))","user":"565560ace4b0f9d632dd8496"},{"problem":134,"code":"(fn [keyValue mapValues] (= (get mapValues keyValue \"Doesn't exist\") nil))","user":"5c43ccdae4b0e06e1360a36f"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= nil (k m))\n    false\n  ))","user":"51af3ed1e4b0c53cf2e68a4b"},{"code":"(fn [k m] (and (nil? (k m)) (= (assoc m k nil) m)))","problem":134,"user":"4f569218e4b0a7574ea71826"},{"problem":134,"code":"(fn [llave mapa]\n  (if (contains? mapa llave)\n    (= (mapa llave) nil)\n    false))","user":"5f810e97e4b0c071e6c840ed"},{"problem":134,"code":"#(if(contains? %2 %1)(nil?(%2 %1))false)","user":"53ed2fafe4b0d648e757f4c1"},{"code":"(fn [k m] (and (nil? (k m)) (contains? m k)) )","problem":134,"user":"51ee669ce4b09915f9b23c03"},{"code":"(fn [thekey themap]\n    (and (contains? themap thekey) (= (themap thekey) nil))\n    )","problem":134,"user":"4eef1164535d305ff5cb7f19"},{"problem":134,"code":"(fn [k m]\n  (if (= nil (get m k false))\n    true\n    false\n    )\n  )","user":"54dbe183e4b024c67c0cf778"},{"problem":134,"code":"(fn [k n] (nil? (get n k false)))","user":"5bb3c9a8e4b0a20761a2352f"},{"problem":134,"code":"(fn [k m]\n(if (contains? m k)\n(= (m k) nil)\nfalse))","user":"5ac74b34e4b0e27600da777f"},{"problem":134,"code":"(fn\n  [key a-map]\n(if (and (contains? a-map key) (nil?  (a-map key))) true false))","user":"590260cde4b0438e51c2d057"},{"problem":134,"code":"(fn [k, m] \n  (and (contains? m k)\n       (nil? (m k))))","user":"5936fabce4b02506e01a298c"},{"problem":134,"code":"(fn f [k m] (not (get m k true)))","user":"5683d2a9e4b0945ebc182aa0"},{"problem":134,"code":"(fn [a s]\n  (if (= nil (get s a \"nope\"))\n    true\n    false))","user":"56df636ae4b0ca2494a095f4"},{"problem":134,"code":"(fn [k m] \n  (if\n\t(contains? m k)\n    (not (k m))\n    false))","user":"57614a42e4b0994c1922fb85"},{"code":"( fn[x y] (= nil (get y x 2)))","problem":134,"user":"526cff81e4b03e8d9a4a72b3"},{"code":"#(nil? (%1 %2 :foo))","problem":134,"user":"4f230dfbe4b0d66497709fe0"},{"code":"(fn [x y] (and (contains? y x) (nil? (x y)) ))","problem":134,"user":"4fdf5403e4b05e33b9224f98"},{"problem":134,"code":"(fn [a-key a-map]\n  (let [does-contain (contains? a-map a-key)\n        val-is-nil (nil? (a-key a-map))]\n    (if (and does-contain val-is-nil)\n      true\n      false)))","user":"5c86b769e4b0c8042a70ce9b"},{"problem":134,"code":"(fn [a-key a-map] (if (and (contains? a-map a-key) (nil? (a-key a-map))) true false))","user":"55c74915e4b0e31453f649cc"},{"problem":134,"code":"(fn [x y] (and (not (y x)) (contains? y x)))","user":"52626564e4b03e8d9a4a7086"},{"problem":134,"code":"(fn [x y]\n  (= nil (get y x -1))\n  )","user":"59f1d218e4b0966464fe6a68"},{"problem":134,"code":"(fn [mkey mmap] (= nil (get mmap mkey false)))","user":"52fdbf3ae4b047fd55837032"},{"code":"(fn [k m]\n    (if (contains? m k)\n      (nil? (get m k))\n      false))","problem":134,"user":"4f60f3a5e4b0defedf855fb3"},{"problem":134,"code":"(fn [key xs]\n  (nil? (get xs key false)))","user":"5b26a74ee4b063e2438bcc37"},{"code":"(fn [k m]\n    (nil? (get m k :not-found)))","problem":134,"user":"4e89e939535d3e98b8023287"},{"problem":134,"code":"(fn [key themap] (and (contains? themap key) (= (themap key) nil)))","user":"5829a331e4b051871117bf47"},{"code":"(fn [daKey daMap]\r\n  (let [found (find daMap daKey)]\r\n    (if (nil? found)\r\n      false\r\n      (nil? (second found)))))","problem":134,"user":"4f0365fc535dcb61093f6aa4"},{"problem":134,"code":"(fn [key mymap](not (key mymap :default)))","user":"585481e0e4b07779d46863fe"},{"code":"(fn [key map] (and (contains? map key) (nil? (second (find map key)))))","problem":134,"user":"523b4e91e4b07becd5be21ef"},{"problem":134,"code":"(fn [sym map] (and (nil? (sym map)) (contains? map sym)))","user":"4fdb0c0ae4b05e33b9224f57"},{"code":"(fn [k, m] (= nil (get m k \"nf\")))","problem":134,"user":"502be4fae4b08f5602f232eb"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (nil? (%2 %1))\n   false)","user":"542806f0e4b01498b1a71b2b"},{"problem":134,"code":"(fn [a-key a-map] \n  (and \n   (contains? a-map a-key) \n   (nil?(get a-map a-key)\n        )))","user":"56c0756de4b060a8e693e3a9"},{"problem":134,"code":"(fn [k, m]\n  (if (and (contains? m k) (= (get m k) nil))\n    true\n    false))","user":"57a7f7d8e4b0a96607956218"},{"problem":134,"code":"(fn [k m] (if (contains? m k)\n            (if-not (k m)\n              true\n              false)\n            false))","user":"593dc5f4e4b069cdc2982bac"},{"code":"#(nil? (get %2 %1 %1))","problem":134,"user":"4e6a6be7535d8ccf87e9fee1"},{"problem":134,"code":"(fn [k m] (= nil (k m \"missing\")))","user":"5627d09ce4b00e49c7cb47db"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (nil? (k m))\n  ))","user":"4f9e830ae4b0dcca54ed6d2c"},{"problem":134,"code":"(fn custom [k o] (and (contains? o k) (= nil (get o k))))","user":"5a918839e4b002d099cae6f7"},{"problem":134,"code":"(fn [key map]\n  (and\n    (= nil (key map))\n    (contains? map key)))","user":"50ba3acae4b03e68e4411c78"},{"code":"(fn [k mp] (and (contains? mp k) (= nil (get mp k))))","problem":134,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":134,"code":"(fn [x y]\n  (if(contains? y x)\n      (if(= nil (x y))\n        true\n        false)\n    false))","user":"579ea15ee4b05b1deef9ae2a"},{"code":"(fn [k m]\n  (cond\n   (contains? m k) (nil? (k m))\n   :else false))","problem":134,"user":"511688d5e4b0b3e208dba05a"},{"problem":134,"code":"(fn [k, m] (if (contains? m k)\n             (= nil (k m))\n             false))","user":"5675ee84e4b05957ce8c6151"},{"problem":134,"code":"(fn [ k m ] (nil? (get m k :true)))","user":"55d44dd6e4b0e31453f64a75"},{"problem":134,"code":"(fn [ t m]\n  (if (contains? m t)\n     (if (nil? (t m)) true false) \n    \n    false\n    )\n  )","user":"54266c56e4b01498b1a71b18"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)\n    (= nil (get y x))\n    false))","user":"54b567eee4b05787c3b163a2"},{"problem":134,"code":"(fn [x y] (if (and (contains? y x) (nil? (x y))) true false))","user":"4f9fd450e4b0dcca54ed6d3d"},{"code":"(fn contains-nil [v dict]\n  (and (contains? dict v) (= (dict v) nil))\n)","problem":134,"user":"4fb710f4e4b081705acca2cd"},{"problem":134,"code":"(fn [my-key my-map]\n  (and (contains? my-map my-key) (=(my-key my-map) nil)))","user":"5a3c06fce4b001c08efc0cdd"},{"code":"(fn [k m]\n  (if (and (nil? (k m)) (contains? m k))\n    true\n    false))","problem":134,"user":"50843a4ae4b0c98812d0788b"},{"code":"(fn [needle haystack]\n  (cond\n   (some #{needle} (keys haystack)) (nil? (needle haystack))\n   :else false))","problem":134,"user":"52fc34cee4b047fd55837015"},{"problem":134,"code":"(fn [m n] (if (contains? n m) (nil? (get n m)) false))","user":"53844970e4b06839e8705eef"},{"problem":134,"code":"(fn [k, ymap] (and (contains? ymap k) \n                   (= (get ymap k) nil)\n                   ))","user":"58334d18e4b089d5ab817c97"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (nil? (k m))\n    false\n  )\n)","user":"5fe876ade4b05ac5b16ea195"},{"problem":134,"code":"(fn [key coll]\n  (and (contains? coll key) (= (coll key) nil)))","user":"56f5e6d5e4b046a417f92079"},{"problem":134,"code":"(fn [key coll]\n  (if (contains? coll key)\n    (= nil (get coll key))\n    false))","user":"59307382e4b072a2710fcfe7"},{"code":"(fn [key map] (and (contains? map key)\n    (nil? (val (find map key)))))","problem":134,"user":"4f1ae082535d64f603146470"},{"problem":134,"code":"(fn\n  [k m]\n  (and\n   (contains? m k)\n   (nil? (k m))))","user":"5e64f44de4b0fd0acd1586ae"},{"problem":134,"code":"(fn [x y] (if (contains? y x) (if (= (y x) nil) true false) false))","user":"54ce8733e4b018d918be98be"},{"code":"(fn  [key map] (if (= (contains? map key) (= nil (get map key))) true false))","problem":134,"user":"516081e7e4b009fba0926e28"},{"code":"(fn [key map] (nil? (map key -1)))","problem":134,"user":"51bdc609e4b0ff155d51d2b3"},{"problem":134,"code":"(fn has-nil [k m] (and (contains? m k) (= nil (get m k))))","user":"5f003099e4b0cf489e8d7f17"},{"code":"(fn [k m] (if (= (get m k false) nil) true false))","problem":134,"user":"51a3c9cde4b0e77c4ca60bf9"},{"problem":134,"code":"(fn [k m]\n    (and \n      (contains? m k)\n      (nil? (k m))))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"problem":134,"code":"(fn [the-key the-map] \n  (if (and (nil? (get the-map the-key)) (contains? the-map the-key)) \n    true false))","user":"603d35c3e4b0d5df2af2230a"},{"problem":134,"code":"(fn [x y](\n    nil? (get y x \"missing\")      \n          ))","user":"5499e26ae4b03163384f4707"},{"problem":134,"code":"(fn [k m] (if (contains? m k) (= (k m) nil)\n            false))","user":"57692b7ce4b0a07e8fc180e9"},{"code":"(fn [k s] (and\n           (contains? s k)\n           (= nil (k s))))","problem":134,"user":"4f49c002e4b0d56e7bb92bfd"},{"code":"#(nil? (% %2 (gensym)))","problem":134,"user":"4f06dcad535dcb61093f6c16"},{"code":"(fn [i mappy]\n  (if (contains? mappy i)\n    (if (nil? (i mappy))\n      true\n      false)\n    false))","problem":134,"user":"4fe8939be4b07c9f6fd12c4d"},{"problem":134,"code":"(fn q134 [v col]\n  (if (contains? col v)\n    (if (nil? (col v))\n      true\n      false)\n    false))","user":"54f5aa4ce4b0f2f3c5226e94"},{"code":"(fn [k m] \n  (let [v (get m k :not-found)]\n    (if (nil? v) true false)))","problem":134,"user":"506ab256e4b05d3b7762c74b"},{"problem":134,"code":"(fn [_key _map] (and (nil? (_key _map)) (contains? _map _key)))","user":"57d43c7be4b0bd073c20239e"},{"code":"(fn [k, m] (= nil (get m k true)))","problem":134,"user":"504e96f0e4b069badc5a33ba"},{"code":"(fn [k m] (and (= (get m k) nil) (contains? m k)))","problem":134,"user":"4f40f055e4b0e243712b1fc2"},{"problem":134,"code":"(fn [k m]\n  (let [has-key? (fn [m k] (= k\n                              (-> m keys set k)))]\n    (if (has-key? m k)\n      (nil? (k m))\n      false\n     )))","user":"59342e52e4b072a2710fd06b"},{"problem":134,"code":"#(and (contains? %2 %1) (nil? (get (find %2 %1) 1)))","user":"51e8ee6be4b07cae92c04bfd"},{"problem":134,"code":"#(and (not (%1 %2))\n      (boolean (some (partial = %1) (keys %2))))","user":"55d0e76ae4b0e31453f64a40"},{"code":"(fn [x y] (= nil (get y x false)))","problem":134,"user":"4ec6688d535d6d7199dd36cc"},{"code":"(fn [y, x] (and (contains? x y) (= (x y) nil)))","problem":134,"user":"5139c00ee4b067e25a345ebc"},{"code":"(fn [k m] \n  (cond \n    (m k) false\n    :else    \n     (nil? (get m k :anynonnil))\n   )\n  )","problem":134,"user":"4fb03cf4e4b081705acca262"},{"problem":134,"code":"(fn [key map] (if (contains? map key) (if(= (get map key) nil) true false) false))\n;(fn [key map] (if (contains? map key) true false))\n;(fn [key map] (if(= (get map key) nil) true false))","user":"515cc82ee4b069911535cf19"},{"code":"#(= nil (get %2 %1 :no-key))","problem":134,"user":"52a7c82ae4b0c58976d9ac21"},{"problem":134,"code":"(fn [k m] (nil? (m k :default-value)))","user":"5764457ae4b0994c1922fbf3"},{"problem":134,"code":"(fn [k x]\n   (nil? (get x k \"not found\")))","user":"594bd637e4b07ddc2dafae41"},{"problem":134,"code":"#(if (and (= nil (%1 %2))\n          (contains? %2 %1))\ntrue\nfalse)","user":"573102bbe4b0cd1946bd0fbb"},{"problem":134,"code":"(fn [k d] \n  (if (contains? d k)\n    (nil? (k d))\n    false))","user":"54312081e4b0dad94371f2e3"},{"code":"(fn [k m] (and (contains? m k) (= nil (get m k))) )","problem":134,"user":"4f8b27b3e4b02e764a0a5179"},{"problem":134,"code":"#(= (get %2 %1 \"Not found\") nil)","user":"55e59b67e4b050e68259b46f"},{"problem":134,"code":"(fn [k c] (and (contains? c k) (= nil (c k))))","user":"575d5831e4b02ea114799381"},{"code":"#(= (%1 %2 \"\") nil)","problem":134,"user":"516e9d9be4b06aac486e5b2b"},{"problem":134,"code":"#(if (contains? %2 %1) (if (= nil (get %2 %1)) true false) false)","user":"5a01f2f3e4b01bb0ae8afd57"},{"code":"(fn [k hashmap]\n  (and (contains? hashmap k) (= nil (hashmap k)))\n)","problem":134,"user":"530c462ae4b02e82168697d9"},{"problem":134,"code":"(fn [key xs] (and (nil? (get xs key)) (contains? xs key)))","user":"58409e47e4b089d5ab817dee"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= (m k) nil)\n    false\n    )\n )","user":"56f9b953e4b07572ad1a88b9"},{"code":"#(let [NIL (Object.)] (nil? (get %2 %1 NIL)))","problem":134,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn [k amap] (= nil (get amap k false)))","problem":134,"user":"4dc0539c535d020aff1edf7c"},{"code":"(fn [key m]\r\n  (not (nil? (get m  (first (filter #(not= key %) (keys m)))))) )","problem":134,"user":"5028bce0e4b01614d1633ffb"},{"problem":134,"code":"(fn [key map]   (and\n    (contains? map key)\n    (nil?  (key map))\n    ))","user":"55f06183e4b06e875b46ce23"},{"problem":134,"code":";; key가 있고, val is nil 이면 true\n;;             else false\n;; key가 없으면, false\n(fn [k k-map]\n  (let [v (k k-map)]\n    (if (nil? v)\n      (contains? k-map k)\n      false)))","user":"5716d585e4b07c98581c3b03"},{"problem":134,"code":"; My independent solution is as follows:\n; #(and (contains? %2 %1) (nil? (%1 %2)))\n; After reviewing other people's solutions I prefer the following, which leverages support for providing a \n; default value when the key is not found:\n#(not (%2 %1 true))","user":"56dc34eae4b0ea9b8538f817"},{"problem":134,"code":"(fn [k m]\n  (true?\n   (and ((set (keys m)) k)\n        (nil? (m k)))))","user":"56403765e4b08d4f616f5edc"},{"code":"(fn [x y] (if (contains? y x)\n            (nil? (x y))\n            false))","problem":134,"user":"4f1684c7535d64f60314644b"},{"code":"(fn [x m]\n  (and\n    (contains? m x)\n    (= nil (x m))))","problem":134,"user":"4f380596e4b0e243712b1ed6"},{"problem":134,"code":"(fn f [k m] (and (contains? m k) (= (m k) nil)))","user":"57adbe7ee4b0b8559636fca0"},{"problem":134,"code":"(fn [k m] (if-let [entry (find m k)] (nil? (entry 1)) false))","user":"56771b31e4b05957ce8c6163"},{"code":"(fn [v h] (and (contains? h v) (nil? (get h v))))","problem":134,"user":"4f036fb3535dcb61093f6ac8"},{"problem":134,"code":"(fn [x values] (if (= true (contains? values x)) (if (= nil (get values x)) true false) false))","user":"54085588e4b0addc1aec66cb"},{"problem":134,"code":"(fn [key map] (and (contains? map key) (nil? (key map))\n                   )\n  )","user":"547336e1e4b094393f72dd7e"},{"code":"(fn [key map] (= (get map key \"not found\") nil))","problem":134,"user":"5151d173e4b03e678e393adf"},{"problem":134,"code":"(fn [id the-map]\n  \t(let [result (id the-map :no-nil-for-you)]\n      \t(if (nil? result) true\n          \tfalse)))","user":"596aaeefe4b069c0a1a19808"},{"problem":134,"code":"(fn [k coll] (and (contains? coll k)\n       (nil? (get coll k))))","user":"5a61bf79e4b0512ff01cd97b"},{"problem":134,"code":"(fn [k hm] (if (= nil (get hm k false)) true false))","user":"5e9b6471e4b0157ca96647f0"},{"problem":134,"code":"(fn [x y]\n  (and (contains? y x) (nil? (y x))))","user":"53d87449e4b0e771c302546d"},{"code":"(fn [k m] \n  (let [v (get m k :not-found)]\n    (and (not (= v :not-found)) (nil? v))))","problem":134,"user":"51789dfae4b03d69594194d7"},{"problem":134,"code":"(fn\n  [k, m]\n  (and \n   (= k ((set (keys m)) k))\n   (= nil (k m))))","user":"55be4fa6e4b01b9910ae2a08"},{"problem":134,"code":"(fn [key x]\n  (if (contains? x key)\n    (= (x key) nil)\n    false))","user":"52d00521e4b07d0d72b273b3"},{"problem":134,"code":"(fn [k xs] (and (contains? xs k) (nil? (get xs k false))))","user":"553b87abe4b09218d5f45003"},{"problem":134,"code":"(fn [the-key the-map] \n  (if (contains? the-map the-key)\n    (= nil (get the-map the-key))\n    (contains? the-map the-key)\n  )\n)\n\n\n;(fn [the-key the-map]\n;  (let [the-value (get the-map the-key)])\n;  (= nil the-value)\n;  )","user":"57d2004ce4b0bd073c202374"},{"problem":134,"code":"(fn [x y] (and \n            (nil? (x y) )\n            (contains?  y x) ))","user":"54eca495e4b024c67c0cf855"},{"problem":134,"code":"(fn [k m] (if (contains? m k)(= (m k) nil)false))","user":"5a7da832e4b03baeef9276fc"},{"code":"(fn [k m]\n  (and (contains? m k) (nil? (m k)))  \n)","problem":134,"user":"4fff289ae4b0678c553fc3fd"},{"problem":134,"code":"(fn [key map] (if (find map key) (if (= (val(find map key)) nil) true false) false))","user":"5dfa9fbde4b0a607a9a45ccb"},{"code":"(fn [key s]\n   (if (contains? s key)\n     (= (key s) nil)\n     false))","problem":134,"user":"531b8c27e4b08068f379ed90"},{"code":"(fn dede [k m] (cond (and (= nil (m k))(contains? m k)) true true false))","problem":134,"user":"5105ed16e4b01150e115ebe2"},{"code":"(fn return-nil-key [k col]\n  (and (contains? col k) (nil? (get col k)))\n)","problem":134,"user":"50845d3ee4b0fb8f40674bf3"},{"problem":134,"code":"#(if(contains? %2 %)(nil? (get %2 %1))(nil? [1]))","user":"5704789be4b0b0fb43fd0665"},{"code":"(fn [key hash] (and (contains? hash key) (nil? (hash key))))","problem":134,"user":"4f017b4e535dcb61093f6a37"},{"code":"(fn [key coll] (and (contains? coll key)\n(not (get coll key))))","problem":134,"user":"4f559d2ce4b0a7574ea71808"},{"code":"#(and (nil? (%1 %2)) (not (empty? (select-keys %2 [%1]))))","problem":134,"user":"4eda05c1535d10e5ff6f5309"},{"problem":134,"code":"(fn [key map](nil? (get map key 0)))","user":"5992e59be4b0866487ed0d80"},{"code":"#(= nil (get %2 %1 1))","problem":134,"user":"4ecb7f4b535df97575fdabdc"},{"problem":134,"code":"(fn\n  [k m]\n  (if (contains? m k)\n    (nil? (k m))\n    false\n    )\n  )","user":"5f3abd21e4b004f08c61c52c"},{"problem":134,"code":"(fn [k coll] \n  (if (contains? coll k)\n    (nil? (get coll k))\n    false))","user":"56dce858e4b0ea9b8538f825"},{"problem":134,"code":"(fn [k mp] \n  (if (contains? mp k) \n    (= (k mp) nil)\n    false)\n  )","user":"5f84f110e4b0375e81f54e79"},{"code":"#(nil? (get %2 %1 :foo))","problem":134,"user":"4f043ed1535dcb61093f6bb4"},{"problem":134,"code":"#(nil?(%1 %2  0))","user":"5656a095e4b0f9d632dd84a1"},{"problem":134,"code":"#(not (% %2 :not-found))","user":"5343753ae4b084c2834f4a1b"},{"problem":134,"code":"(fn [k m]\n\t(nil? (get m k true)))","user":"56504dc2e4b0284900eef6bc"},{"problem":134,"code":"#(= true (contains? %2 %1) (= nil (%1 %2)))","user":"55d74e71e4b0e31453f64aa4"},{"code":"(fn foo[kw mp] (if (contains? mp kw)(nil? (get mp kw)) false))","problem":134,"user":"4f6236abe4b0defedf855fcd"},{"problem":134,"code":"(fn [candidate map]\n  (and (contains? map candidate) (nil? (candidate map))))","user":"4f2d676be4b0d6649770a05c"},{"code":"(fn [key map] (if (and (= (map key) nil) (>= (count (select-keys map [key])) 1)) true false))","problem":134,"user":"52939bd1e4b0239c8a67af41"},{"problem":134,"code":"(fn [k,m] (if (contains? m k)\n            (nil? (m k))\n            false ))","user":"588f8216e4b00487982d51af"},{"problem":134,"code":"(fn [k,m] (nil? (m k true)))","user":"52c48ec6e4b0c2d177d620dd"},{"problem":134,"code":"(fn [k m] (if (= true (contains? m k)) (= nil (get m k)) false))","user":"581b8938e4b04b46fc4b0ed2"},{"problem":134,"code":"(comp nil? #(get %2 % :not-found))","user":"51dafedee4b09f6bc204eee2"},{"problem":134,"code":"(fn [key MAP]\n             (if (contains? MAP key)\n                 (= (MAP key) nil)false))","user":"5f77b99fe4b02876ed9fd0bc"},{"problem":134,"code":"(fn [key, map] (if (contains? map key) (nil? (key map)) false))","user":"530e9bd6e4b08068f379ecbe"},{"problem":134,"code":"( fn [k m] (and (contains? m k) (nil? (get m k))))","user":"5818908be4b0c0e9c07b83bb"},{"code":"#(if (and (contains? %2 %1) (nil? (%1 %2))) true false)","problem":134,"user":"4f4e52d2e4b03ad3f0c10cc2"},{"problem":134,"code":"(fn [key dict]\n  (and (contains? dict key)\n       (nil? (key dict))))","user":"58dc81d1e4b0a4d5acaab69e"},{"problem":134,"code":"#(nil? (%2 %1 -))","user":"547ec511e4b0c51c1f4d730e"},{"problem":134,"code":"(fn [value mapa] (and (contains? mapa value) (nil? (value mapa))))","user":"593eaadde4b069cdc2982bc2"},{"problem":134,"code":"#(nil? (get %2 %1 some))","user":"57ea79d9e4b0bfb2137f5b4f"},{"problem":134,"code":"(fn [k, m] (if (and (contains? m k) (= (k m) nil)) true false))","user":"54f7917be4b01ecee9d88822"},{"problem":134,"code":"(fn [k, m] (nil? (if (contains? m k) (k m) false)))","user":"5537c939e4b09218d5f44fd2"},{"problem":134,"code":"(fn [keyy mapp]\n  (= [keyy nil] (find mapp keyy)))","user":"5457e502e4b01be26fd74612"},{"code":"(fn [k m] (and ( contains? m k) (nil? (m k) ) ) )","problem":134,"user":"4f031e58535dcb61093f6a66"},{"code":"(fn [x m] (nil? (x m \"nope\")))","problem":134,"user":"4fe89c81e4b07c9f6fd12c57"},{"problem":134,"code":"(fn [x y]\n  (and (contains? y x) (nil? (x y))))","user":"581a1068e4b0e114eb519ff3"},{"code":"#(nil? (%2 %1 :nf))","problem":134,"user":"4e5af45e535d8a8b8723a2b1"},{"problem":134,"code":"(fn[x y] (= nil (get y x :none)))","user":"5566386ee4b0c656e3ff1829"},{"problem":134,"code":"(fn [k hmap] (and (contains? hmap k) (= nil (get hmap k))))","user":"5dd53859e4b0948ae9d9ad76"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k \"nope\")))","user":"5e78e8d3e4b085ba37836dfd"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (nil? (get m k))\n    false))","user":"53b14dfce4b047364c04448d"},{"problem":134,"code":"(fn [k m] (and \n           \t(contains? m k)\n            (nil? (k m)   )  \n          )   \n)","user":"5d48884ee4b07c84aa5ae6bb"},{"code":"#(= nil (%2 %1 0))","problem":134,"user":"4e860e85535db62dc21a62f1"},{"code":"#(if \n  (and (some #{%1} (keys %2)) ( = (%1 %2) nil))\n    true\n    false)","problem":134,"user":"4f8aa2f9e4b02e764a0a516f"},{"code":"(fn [k h]\n  (and (contains? h k)\n      (nil? (h k))))","problem":134,"user":"4fcf0ce9e4b03432b189f40b"},{"problem":134,"code":"(fn [k xs] (nil? (get xs k \"\")))","user":"5409a12fe4b0addc1aec66df"},{"problem":134,"code":"(fn [k, m]\n\t(= nil (get m k 0))\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":134,"code":"(fn [key coll]\n     (nil? (get coll key :not-found)))","user":"53ea3a63e4b036ad0777e4dc"},{"problem":134,"code":"(fn [k m] (and (not (nil? (some #{k} (keys m)))) (nil? (m k))))","user":"569d095fe4b0542e1f8d1470"},{"problem":134,"code":"(fn\n  ([k mp]\n   (and (contains? mp k) (not (mp k)))))","user":"580fb8e0e4b0f478707a05bc"},{"problem":134,"code":"#(nil? (% %2 :novalue))","user":"5b6473eee4b0c6492753e73f"},{"code":"(fn [key map]\n  (if (and \n      (contains? map key)\n      (nil? (get map key)))\n    true\n    false))","problem":134,"user":"4fec51b4e4b0681fd128dca4"},{"problem":134,"code":"(fn[k,m] \n  (if (and (contains? m k) (= nil (k m)))\n    true\n    false)\n    )","user":"5d8a832ce4b0915913b1d3ca"},{"code":"(fn an [k, m] (if (= nil (get m k false))\n                true\n                false) )","problem":134,"user":"52a76e37e4b0c58976d9ac18"},{"code":"(fn [x y] (if (= x :a) true false))","problem":134,"user":"502d39f8e4b0d96a44ab2032"},{"problem":134,"code":"(fn[x y] (if (and (= (y x) nil) (contains? y x))\n         true\n         false))","user":"5668aad0e4b04acd4f672df5"},{"problem":134,"code":"(fn [k d] (and (contains? d k) (nil? (get d k)) ))","user":"51f09f3de4b0274c496158d7"},{"problem":134,"code":"(comp nil? #(get %2 %1 false))","user":"552356fae4b0882d96d091af"},{"problem":134,"code":"#(= nil (%1 %2 :key-not-found))","user":"560ff209e4b05f002753df65"},{"problem":134,"code":"(fn [key mymap] (and (contains? mymap key) (nil? (key mymap))) )","user":"580b216fe4b0a837a8b30d45"},{"problem":134,"code":"(fn [dk dm] \n  (if (= nil (dk dm :not)) true false))","user":"55a1ba5ee4b0acc240e31517"},{"code":"(fn [k m] (not (m k 1)))","problem":134,"user":"52c3c689e4b0c2d177d620c9"},{"problem":134,"code":"(fn [k m]\n (if (contains? m k)\n  (if (nil? (get m k))\n   true\n   false)\n  false))","user":"57fd085ce4b0d3187e9009a9"},{"code":"(fn [k m]\n  (if\n    (and\n      (contains? m k)\n      (= (m k) nil))\n    true\n    false))","problem":134,"user":"52c884a2e4b0c2d177d62136"},{"code":"#(and (contains? %2 %1) \n      (nil? (%1 %2)))","problem":134,"user":"50336c6be4b0c6c1199c710f"},{"code":"(fn [key map] (= (key map :not-found) nil))","problem":134,"user":"4edd9d79535d10e5ff6f532b"},{"problem":134,"code":"(fn keymap [sleutel rij]\n  (if (contains? rij sleutel) \n     (nil? (get rij sleutel))\n     false))","user":"5b102ab8e4b0cc2b61a3be19"},{"code":"(fn [k m]\n  (and\n     (= nil (m k))\n     (= k ((set (keys m)) k))))","problem":134,"user":"4fa4cb76e4b081705acca1a5"},{"problem":134,"code":"(fn [x coll]\n  (cond (and (contains? coll x) (= nil (coll x))) true\n        :else false))","user":"56193c6ee4b053970a773af2"},{"code":"(fn [a b]\n  (and (contains? b a)\n       (= (get b a) nil)))","problem":134,"user":"51f8e057e4b09be9c177e53d"},{"problem":134,"code":"(fn [key map] (and (not= (count map) (count (dissoc map key))) (= nil (key map))))","user":"5c41db45e4b08cd430848ece"},{"code":"#(nil? (%2 % :nil))","problem":134,"user":"4e2b1d48535deb9a81d77f03"},{"code":"(fn does-contain? [key map]\r\n     (and (nil? (map key)) (contains? map key)))","problem":134,"user":"4f82e14be4b033992c121c0c"},{"code":"(fn [k s] (= (get s k :not-found) nil))","problem":134,"user":"4f03a1ce535dcb61093f6b42"},{"code":"(fn\n  [k h]\n    (and\n      (contains? h k)\n      (nil? (h k))))","problem":134,"user":"4e6ac7a8535d8ccf87e9ff03"},{"code":"(fn\n  [k m]\n  (let [res (find m k)]\n    (if (nil? res)\n      false\n      (nil? (last res)))))","problem":134,"user":"529223cbe4b0239c8a67af26"},{"problem":134,"code":"(fn [key list]\n         (if (and (= (key list) nil) (find list key))\n         true\n           false))","user":"5c619df4e4b0fca0c1622637"},{"code":"(fn [a _] (= a :a))","problem":134,"user":"52e356f8e4b09f7907dd1442"},{"problem":134,"code":"(fn my-fc [k m] (if (= (get m k false) nil) true false))","user":"5b79cbdce4b047b03b20370a"},{"code":"(fn [x y] (identical? (contains? y x) (nil? (get y x))))","problem":134,"user":"50ef5801e4b0bdaecbb47d96"},{"code":"#(nil? (%2 % :notnil))","problem":134,"user":"50edbc16e4b06330c1f87c48"},{"problem":134,"code":"(fn [key map]\n  (if (and (contains? map key) (nil? (key map)))\n           true\n           false\n           ))","user":"54d80751e4b0a52adc2e2035"},{"code":"(fn [key map] \n  (and (contains? map key) (= nil (get map key :blah))))","problem":134,"user":"51a2569ee4b00957e520db7d"},{"problem":134,"code":"(fn [k m] (and (not (nil? (seq (filter #(= % k) (keys m))))) (nil? (k m))))","user":"556a3243e4b09a3098a524de"},{"problem":134,"code":"(fn [f f1]\n  \n  (if( contains? f1 f)\n    (= (f1 f) nil)\n   false)\n  \n  )","user":"5f727be9e4b02876ed9fd08d"},{"problem":134,"code":"(fn [k m] (if-let [entry (find m k)]\n            (nil? (val entry))\n            false))","user":"5e6ba862e4b04a83ad7cd27d"},{"code":"( fn [ x vals ]\n  ( and ( contains? vals x ) ( = nil ( x vals ) ) ) )","problem":134,"user":"4fbb7010e4b081705acca2e7"},{"problem":134,"code":"(fn [k m] (nil? (m k false)))","user":"53e8c684e4b036ad0777e48b"},{"code":"(fn [i xs] ( if (contains? xs i) (if (= nil (get xs i)) true false) false))","problem":134,"user":"50ef5703e4b0bdaecbb47d95"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k) (nil? (k m)))\n)","user":"56049986e4b0c80df0ca2662"},{"code":"#(if (and (contains? %2 %1) (nil? (get %2 %1)))                                 \n   true false)","problem":134,"user":"4e273a93535deb9a81d77ef8"},{"problem":134,"code":"(fn iff [k x] (and (contains? x k) (nil? (get x k))))","user":"4f035fbe535dcb61093f6a92"},{"code":"#(=\n  (if (contains? %2 %1)\n  (get %2 %1)\n    false) \n  nil)","problem":134,"user":"5151b1abe4b03e678e393adb"},{"code":"(fn [k m] (let [r (find m k)] (and (not (= r nil)) (= nil (second r)))))","problem":134,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn iff [k col] (and (contains? col k) (nil? (get col k))))","problem":134,"user":"5311b367e4b08068f379eced"},{"problem":134,"code":"(fn nil-key [x coll]\n     (nil? (get coll x \"missing\")))","user":"58dcb8cde4b0a4d5acaab6a7"},{"code":"#(and\n  (contains? %2 %1)\n  (nil? (%1 %2)))","problem":134,"user":"4f1427f8535d64f603146435"},{"problem":134,"code":"(fn [k m]  (and (nil? (k m)) (contains? m k)))","user":"5d9e7971e4b000c986472bc1"},{"problem":134,"code":"(fn [k dict] (and (contains? dict k) (nil? (k dict))))","user":"571de357e4b0145328a76285"},{"problem":134,"code":"(fn [k m] (\n\t\tif (contains? m k)\n        \t(if (= nil (get m k))\n              \ttrue\n            \tfalse\n            )\n        \tfalse\n\t)\n)","user":"53f152bce4b0742d9025b0dc"},{"code":"(fn [k m] (let [r (get m k :no)] (nil? r)))","problem":134,"user":"4e4be570535dc968683fc4d8"},{"code":"#(not (% %2 1))","problem":134,"user":"4e707db6535d5021c1a8963a"},{"code":"(fn [k m]\n  (= nil (get m k \"not-found\")))","problem":134,"user":"4e4ca885535dc968683fc4df"},{"code":"(fn [key amap]\n  (cond\n    (not (contains? amap key)) false\n    (nil? (get amap key)) true\n    :else\n    false))","problem":134,"user":"4eb6f065535d7eef30807372"},{"problem":134,"code":"(fn [_key_, _map_] (and (= (_map_ _key_) nil) (contains? _map_ _key_)))","user":"578acd37e4b0ebec4cfb7541"},{"problem":134,"code":"#(if\n    (= nil (%2 %1 false))\n  true\n  false)","user":"559067ace4b0277789237670"},{"code":"(fn [key map] (nil? (get map key `not-found#)))","problem":134,"user":"4e22b78b535d04ed9115e81e"},{"problem":134,"code":"#(nil?(%2%1 1))","user":"4dd57160535dae65d5c462e8"},{"code":"(fn [k s] (and (contains? s k) (not (s k))))","problem":134,"user":"4f39f902e4b0e243712b1efe"},{"problem":134,"code":"(fn [k v]\n  (if (contains? v k)\n    (if (nil? (k v)) true false)\n    false\n    )\n  )","user":"60cc2d58e4b0e0fa5f1b4323"},{"code":"(fn [k m] \n  (and (not (nil? (find m k))) (nil? (m k))))","problem":134,"user":"4dca8b6d535d5973398f9288"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"no-key\")))","user":"59a31c55e4b066c664927d34"},{"code":"#(and  (contains? %2 %1) (nil? (%1 %2)))","problem":134,"user":"506afdafe4b0a2a5463de37e"},{"code":"#(nil? (%2 %1 :n))","problem":134,"user":"4db4714f535dc0f10411755a"},{"problem":134,"code":"(fn [k c]\n  (if (contains? c k)\n    (= (c k) nil)\n    false))","user":"561ba3e5e4b073c65b0ce3eb"},{"code":"(fn [x y] (nil? (get y x 1)))","problem":134,"user":"5034b623e4b062bc5d7ae168"},{"problem":134,"code":"#(nil? (get %2 % :notnul))","user":"546e1142e4b00cfc9eacc199"},{"problem":134,"code":"(fn __ [k col]\n  (and (contains? col k) (= nil (col k))))","user":"5475d755e4b0c51c1f4d72a0"},{"problem":134,"code":"#(nil? (%1 %2 :didnt-find))","user":"57204301e4b0c5bde472c093"},{"code":"(fn [y x]\n        (if (contains? x y)\n            (if (nil? (get x y)) true false)\n          false))","problem":134,"user":"4f524d11e4b03ad3f0c10d34"},{"code":"(fn [key map]\n  (and (not (nil? ((set (keys map)) key)))\n       (nil? (map key))))","problem":134,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":134,"code":"(fn [k,m] (if (contains? m k) (nil? (m k)) false ))","user":"56a0d7e5e4b0542e1f8d14a8"},{"problem":134,"code":"(fn [ki coll] (and\n               (contains? coll ki)\n               (nil? (coll ki))))","user":"50a0267fe4b08df8156e9e4a"},{"problem":134,"code":"(fn nk[key, map]\n  (if\n    (= nil (get map key :nope))\n    true\n    false))","user":"56069006e4b08b23635d3174"},{"code":"(fn [sym mp] (and (contains? mp sym) (nil? (sym mp))))","problem":134,"user":"4ddee37c535d08e6dec9fddc"},{"problem":134,"code":"(fn [x c] (and (contains? (set (keys c)) x) (nil? (get c x))))","user":"5369d072e4b0243289761ea1"},{"code":"(fn [key coll]\n  (and\n  (contains? coll key)\n   (nil? (key coll))))","problem":134,"user":"501b1a8ee4b0b12d9c5f4d81"},{"problem":134,"code":"#(not(%1 %2 0))","user":"4db2903f535df7e46ed9b6bf"},{"code":"(fn [k m]\n  (if-let [[a b] (find m k)]\n    (nil? b) false))","problem":134,"user":"503a234de4b088a6a14ca76d"},{"problem":134,"code":"(fn [x y] (and (= (class (find y x)) clojure.lang.MapEntry)  (= nil (last (find y x)))))","user":"55249337e4b0882d96d091c3"},{"code":"(fn lambda[x y]( if(and (contains? y x) (not= 2 (x y))) true false ) )","problem":134,"user":"5302d79ce4b0d8b024fd3736"},{"problem":134,"code":"(fn[x coll] (and (contains? coll x) (nil? (get coll x))))","user":"53c7da9ce4b00fb29b2212ad"},{"problem":134,"code":"(fn [x y] (if (and (contains? y x) (= nil (get y x))) true false))","user":"5a022949e4b01bb0ae8afd60"},{"problem":134,"code":"(fn [ky mp] (if (contains? mp ky)\n                       (if (nil? (ky mp))\n                         true\n                         false)\n                       false))","user":"5e9878b9e4b0157ca96647d8"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (nil? (get %2 %1))\n   false)","user":"54f0c18ee4b024c67c0cf8a4"},{"code":"(fn [k m] (and (nil? (m k)) (contains? m k)))","problem":134,"user":"4e25176e535d04ed9115e829"},{"problem":134,"code":"(fn [ky mp] (nil? (get mp ky :not-found)))","user":"55e1ddf7e4b050e68259b422"},{"code":"(fn [ky mp] (and (contains? mp ky) (= (mp ky) nil)))","problem":134,"user":"4dadaa5cc9a9d6ed2f99dc57"},{"problem":134,"code":"#(nil? (get %2 % \"X\"))","user":"544f58e8e4b0e39780006991"},{"code":"(fn [key map]\n  (let [v (find map key)]\n    (if (nil? v)\n      false\n      (nil? (second v)))))","problem":134,"user":"51f40975e4b0fca5e8b4822e"},{"code":"(fn [x m] (nil? (get m x false)))","problem":134,"user":"5179fd22e4b01aacecbecbe5"},{"problem":134,"code":"(fn [key map]\n  (nil? (get map key \"\")))","user":"52af0fd3e4b0c58976d9acb5"},{"code":"#(and (not= nil (some #{%1} (keys %2))) (nil? (%1 %2)))","problem":134,"user":"4f2c593ee4b0d6649770a053"},{"code":"( fn [k m]   (if (contains? m k) (=(m k) nil )  false))","problem":134,"user":"4fa03445e4b0dcca54ed6d45"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (= nil (get m k))\n  ))","user":"545c2d07e4b01be26fd7465c"},{"problem":134,"code":"#( and ( contains? %2 %1 ) (= (%1 %2) nil))","user":"57487084e4b009280f9f2b8c"},{"code":"(fn [k {v k :or {v true}}]\n  (nil? v))","problem":134,"user":"52cf5450e4b07d0d72b273a4"},{"code":"#(if (= (get %2 %1 false) nil) true false)","problem":134,"user":"4dfd7ecf535d04ed9115e783"},{"code":"(fn [k m]\n  (nil? (get m k '())))","problem":134,"user":"538d464ee4b0b51d73faae69"},{"code":"#(= nil (%2 % :not-found))","problem":134,"user":"4ec7c32c535d6d7199dd36e6"},{"problem":134,"code":"#(and\n (contains? %2 %1)\n (nil? (%2 %1)))","user":"578a9b5be4b0ebec4cfb753e"},{"problem":134,"code":"(fn [%1 %2]\n    (if (contains? %2 %1)\n      (if (nil? (get %2 %1))\n        true\n        false)\n      false))","user":"5901731ae4b0438e51c2d03d"},{"problem":134,"code":"(fn [x y] \n  (if (contains? y x) \n    (= (x y) nil) \n    false))","user":"53c1305be4b00fb29b22125d"},{"code":"#(nil? (%1 %2 \"empty\"))","problem":134,"user":"4eaa66eb535d7eef3080730b"},{"problem":134,"code":"(fn [x coll] (if (contains? coll x) (= (coll x) nil) false))","user":"581dde2ae4b04b46fc4b0f1b"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (= nil (m k))\n    false))","problem":134,"user":"53457b7de4b084c2834f4a35"},{"code":"#(= (get %2 % 0) nil)","problem":134,"user":"4e7f51eb535db966e863cc3f"},{"code":"(fn iff-exists? [key map]\n  (if (contains? map key) (nil? (map key)) false))","problem":134,"user":"4f7251eee4b07046d9f4f02e"},{"code":"#( let [x (find %2 %1)]\n    (if (nil? x)\n      false\n      (nil? (val x))\n    )\n)","problem":134,"user":"4f1052b9535d64f603146418"},{"code":"(fn [y x] (if (and (contains? x y) (nil? (x y))) true false))","problem":134,"user":"529012a5e4b0239c8a67af01"},{"problem":134,"code":"(fn [k m]\n  (if(contains? m k)\n    (= (m k) nil)\n    false\n    ))","user":"59c21d90e4b0a024fb6ae49d"},{"problem":134,"code":"(fn [k m] (contains? (set (map (fn [[k v]] (str k v)) m)) (str k)))","user":"5d6cead9e4b04d129b00f2b5"},{"problem":134,"code":"(fn [x coll] (->> x (contains? coll) (and (= nil (coll x)))))","user":"56d5c1b0e4b0ea9b8538f7c3"},{"problem":134,"code":"(fn [k m] (if(contains? m k) (if(nil? (m k))true false) false))","user":"56ea8ae3e4b04a395b9a0408"},{"problem":134,"code":"(fn [i v] (and (contains? v i) (= (v i) nil)))","user":"579a321de4b05b1deef9add7"},{"problem":134,"code":"(fn [llave mapa] \n  (if (contains? mapa llave)\n    (= (mapa llave) nil)\n    false))","user":"56df7440e4b0ca2494a095fb"},{"problem":134,"code":"#( if(and (contains? %2 %1) (nil? (%1 %2) ) ) true false)","user":"5ecbc138e4b016b56eae0589"},{"code":"(fn [key map]\n  (if (= (get map key true) nil)\n     true false))","problem":134,"user":"4e8bc8d8535d65386fec2125"},{"problem":134,"code":"(fn f [k coll]\n  (and (= nil (get coll k))\n       (contains? coll k)))","user":"58fc92c5e4b0438e51c2cf9a"},{"code":"(fn ifnil [k coll]\n   (if (= (get coll k \"missing\") nil)\n     true\n     false))","problem":134,"user":"4f74271ae4b044e54cd9a8f6"},{"code":"#(let [ret (contains? %2 %1)]\n    (if ret\n      (if (nil? (%2 %1)) true false)\n      false)\n    )","problem":134,"user":"4f85ce23e4b033992c121c4a"},{"problem":134,"code":"(fn [k xs] (and (contains? xs k) (= (k xs) nil)))","user":"55b25970e4b0da326a65cf7e"},{"problem":134,"code":"#(let [z (find %2 %1)] (cond (and (vector? z) (nil? (last z))) true :else false))","user":"5c2836ebe4b07e362c2305d4"},{"problem":134,"code":"(fn [k s] (and (contains? (set (keys s)) k) (nil? (s k))))","user":"4e72a717535d5021c1a89665"},{"problem":134,"code":"(fn [k coll]\n  (if (and (contains? coll k) (= nil (get coll k)))\n    true\n    false\n  ))","user":"56eb16d8e4b04a395b9a041d"},{"code":"(fn [x y] (if (= [x nil] (find y x)) true false))","problem":134,"user":"515a46d3e4b0394f658fe23f"},{"problem":134,"code":"#(nil? (get %2 %1 :empty))","user":"559a8d4ce4b066d22e731f43"},{"problem":134,"code":"(fn [e m]\n  (if (contains? m e)\n    (nil? (e m))\n    false))","user":"55d4dddde4b0e31453f64a7f"},{"problem":134,"code":"(fn [x m]\n  (if \n    (and\n      ((set (keys m)) x)\n      (= nil (m x)))\n  \ttrue\n  \tfalse))","user":"56fc0601e4b07572ad1a88db"},{"problem":134,"code":"(fn value-nil? [k m] (and (contains? m k) (nil? (get m k))))","user":"539e717fe4b0ca733b974488"},{"code":"#(nil? (get %2 %1 \"\" ))","problem":134,"user":"4fcc94e2e4b0ee37620e1865"},{"problem":134,"code":"(fn contains [key map]\n    (= nil (get map key false)))","user":"56548fd3e4b0f9d632dd8485"},{"problem":134,"code":"(fn [k m] \n  (if (and ((into #{} (keys m)) k)\n           (nil? (k m)))\n    true\n    false))","user":"556794f6e4b0c656e3ff1844"},{"code":"(fn[k s] (and (contains? s k)(nil? (k s))))","problem":134,"user":"53512bc6e4b084c2834f4ae1"},{"code":"#(and (= (count (find %2 %)) 2) (= (last (find %2 %)) nil))","problem":134,"user":"4fd0af0ee4b04c3a95aa0405"},{"code":"#(not (% %2 3))","problem":134,"user":"527094f0e4b03e8d9a4a73b3"},{"problem":134,"code":"(fn [needle haystack]\n                             (if (contains? haystack needle)\n                               (if (nil? (get haystack needle))\n                                 true\n                                 false)\n                               false))","user":"50bcb004e4b0594b91591c5f"},{"problem":134,"code":"(fn [a b] (and (contains? b a) (= nil (b a))))","user":"5a14228fe4b0ff51aa4b3193"},{"code":"(fn [k,m] (= nil (get m k false)))","problem":134,"user":"4f037d9e535dcb61093f6af2"},{"code":"(fn [k m] (if (and (contains? m k) (= (m k) nil)) true false))","problem":134,"user":"4fe89205e4b07c9f6fd12c4b"},{"problem":134,"code":"(fn nilkey [k m]\n  (and (contains? m k) (nil? (k m))))","user":"5d929ceae4b0915913b1d412"},{"problem":134,"code":"(fn nilkey [v m] (if (contains? m v) (nil? (get m v)) false))","user":"59346d29e4b072a2710fd077"},{"problem":134,"code":"(fn \n  [kii mass] \n  (and \n   (contains? mass kii)\n   (= (mass kii) nil)))","user":"59a09b1de4b0871e7608b83a"},{"problem":134,"code":"(fn [k, m]\n  (if (contains? m k)\n    (if (nil? (get m k))\n      true\n      false)\n    false))","user":"563cce5be4b0bfe05bf1183f"},{"code":"#(let [val (get %2 %1 :unknown)] (and (not (= val :unknown)) (nil? val)))","problem":134,"user":"52655949e4b03e8d9a4a710b"},{"code":"(fn [k c]\n  (and (nil? (k c)) (contains? c k))\n)","problem":134,"user":"4ea5b8ae535d7eef308072d8"},{"code":"#(nil?(%2 %1 0))","problem":134,"user":"4f7d25b4e4b06e829148e1ba"},{"code":"(fn [a b] (and (contains? b a) \n               (nil? (get b a))))","problem":134,"user":"5164d97ee4b003cf19fdde43"},{"code":"(fn[x m](= nil (get m x :not-found)))","problem":134,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn [k m]\n  (let [foo (find m k)]\n    (and (seq? (seq foo))\n         (nil? (last foo)))))","problem":134,"user":"4ee63d8d535d93acb0a66859"},{"problem":134,"code":"#(nil?( get %2 %1 \"missing\" ))","user":"5ddbd202e4b0948ae9d9adb4"},{"code":"(fn [x y] (let [retVal (contains? y x)] (if retVal (= (y x) nil) retVal)) )","problem":134,"user":"5123cbbae4b061b4c6f0e0b5"},{"problem":134,"code":"#(= (%1 %2 :not-found) nil)","user":"5cb41c40e4b026601754b911"},{"problem":134,"code":"(fn [k m] (= nil (m k :undefined)))","user":"567b9ff7e4b05957ce8c61a9"},{"problem":134,"code":"#(= [%1 nil]  (find %2 %1))","user":"5e27a4e1e4b05b4b0151618e"},{"problem":134,"code":"(fn [k,enti]\n  (if (contains? enti k) (nil? (k enti)) false))","user":"56be8649e4b0f26550335983"},{"problem":134,"code":"#(if (and (contains? %2 %1) \n           (nil? (get %2 %1))) \n    true \n    false)","user":"59ece650e4b0249b72820795"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key) (if (= nil (get map key)) true false)\n    false))","user":"558378dce4b05c286339e115"},{"code":"#(cond (nil? (get %2 %1 false)) true :else false)","problem":134,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":134,"code":"(fn [i j] (and (contains? j i) (nil? (i j))))","user":"5af3a4d0e4b0cc2b61a3bc8b"},{"problem":134,"code":"(fn [x map] (and (contains? map x) (= nil (x map))))","user":"5a1e7e98e4b0ff51aa4b326d"},{"problem":134,"code":"#(not (%1 %2 :not-found))","user":"57407ab3e4b05c31a32c0854"},{"problem":134,"code":"(fn is-nil? [k m]\n  (and (contains? m k) (nil? (get m k))))","user":"569ab3e2e4b0542e1f8d144a"},{"problem":134,"code":"(fn [key coll] (= (contains? coll key) (nil? (coll key))))","user":"550a2c61e4b06e50f9beb12b"},{"problem":134,"code":"#((comp boolean (set %2)) [% nil])","user":"56795deae4b05957ce8c6187"},{"problem":134,"code":"(fn [x xs]\n  (and (contains? xs x) (nil? (x xs))))","user":"5e610da6e4b0fd0acd15868d"},{"problem":134,"code":"#(nil? (let [v (find %2 %1)] (if (nil? v) 1 (get v 1))))","user":"5481be5fe4b0e286459a1172"},{"problem":134,"code":"(fn [key map] (if (contains? map key)\n                (if-let [x (get map key)] (nil? x) true)\n                false\n                ))","user":"5e996e76e4b0157ca96647e4"},{"problem":134,"code":"#(and (not (get %2 %1 true)) (nil? (%1 %2)))","user":"53e543efe4b036ad0777e457"},{"problem":134,"code":"(fn [v_key v_map] (and (contains? v_map v_key) (nil? (v_map v_key))))","user":"572af688e4b0f4d77e651249"},{"problem":134,"code":"(fn [k m] (if (contains? m k)\n             (if-not (k m)\n               true\n               false)\n             false))","user":"60206002e4b0bf4ca6b10962"},{"problem":134,"code":"(fn [ky mp] (and (contains? mp ky) (nil? (ky mp))))","user":"5bfe4ecfe4b0bdcf453d1608"},{"code":"#(and (contains? %2 %1) (not (%2 %1)))","problem":134,"user":"4eb2d0ae535d7eef3080734e"},{"problem":134,"code":"(fn \n  [x, y]\n  (if (x y)\n    false\n   \t(if (contains? y x)\n      true\n      false\n    )\n  ))","user":"60d45525e4b0d60f5ea6f7dc"},{"problem":134,"code":"(fn [key map]\n  (and (= nil (key map)) (contains? map key))\n)","user":"55d74befe4b0e31453f64aa3"},{"code":"(fn [key mp]\n  (and\n    (contains? mp key)\n    (nil? (mp key))))","problem":134,"user":"4fcd1bbde4b065de69964ca4"},{"problem":134,"code":"(fn [k coll]\n  (and (contains? coll k) (= (coll k) nil)))","user":"53cbe808e4b00fb29b2212d4"},{"code":"(fn [key map]\n  (and (contains? map key) (= nil (key map))))","problem":134,"user":"4ea8570f535d7eef308072f8"},{"code":"#(nil? (%2 % \"\"))","problem":134,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":134,"code":"(fn [key map] (nil? (if (contains? map key)\n  (get map key)\n  false)))","user":"56d0608ce4b0ea9b8538f77e"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (if (nil? (%2 %1))\n     true\n     false)\n   false)","user":"55eb026de4b0121d4835fdb7"},{"problem":134,"code":"(fn [k m]\n             (if (contains? m k)\n               (= nil (m k))\n               false))","user":"55c5b55fe4b0e31453f649b5"},{"code":"(fn f [key map] (and (#(contains? map key)) (#(nil?(val(find map key))))))","problem":134,"user":"4ea683e4535d7eef308072e5"},{"code":"#(nil? (%2 %1 :not-found))","problem":134,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn[key map] \n  (if \n    (contains? map key)\n    (nil? (key map))\n    false))","problem":134,"user":"4e8a0d5d535d3e98b802328e"},{"problem":134,"code":"(fn [key coll] (if (contains? coll key) (nil? (coll key)) false))","user":"5952d75ce4b066ee0a44aed4"},{"code":"(fn [k, m] (if (contains? m k) (= nil (get m k)) false))","problem":134,"user":"5166b491e4b060c690c1f4be"},{"problem":134,"code":"(fn [a b]\n  (= nil (get b a \"missing\")))","user":"56b619e7e4b0982f16b37e39"},{"code":"#(and  (contains? %2 %1) (nil? (get %2 %1)))","problem":134,"user":"534d639ae4b084c2834f4a9e"},{"code":"(fn [k m] (and (> (.indexOf (keys m) k) -1) (= nil (k m))))","problem":134,"user":"4f622cafe4b0defedf855fcc"},{"problem":134,"code":"#(nil? (get %2 %1 \"default\"))","user":"5585ff97e4b001b0851d7515"},{"problem":134,"code":"(fn [a map] (nil? (a map false)))","user":"53bf0b73e4b0c98a41f5cc9a"},{"problem":134,"code":"#(= nil (get-in %2 [%] true))","user":"56d1afd9e4b0ea9b8538f791"},{"code":"(fn [k mapds] (and (contains? mapds k) (nil? (mapds k))))","problem":134,"user":"538505d1e4b06839e8705efa"},{"code":"(fn [yek coll]\n  (if (and (nil? (yek coll))\n           (nil? (get coll yek false)))\n    true\n    false))","problem":134,"user":"518ccf6be4b05e6c8537e386"},{"code":"(fn [k c]\n  (if (contains? c k)\n  \t\t(if (= (k c) nil)\n          true\n          false)\n    \tfalse))","problem":134,"user":"50bcb8b4e4b0594b91591c61"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (if (= nil (m k))\n    true\n    false)\n  false))","problem":134,"user":"4dadbcdac9a9d6ed3999dc57"},{"code":"(fn [k m]\r\n  (and (contains? m k)\r\n       (not (get m k))))","problem":134,"user":"4fec0824e4b0681fd128dc9c"},{"problem":134,"code":"(fn\n  [key map]\n  (and\n     (contains? map key)\n     (= nil (key map))))","user":"53ac4719e4b047364c04445c"},{"problem":134,"code":"( fn [k m] ( let [r (find m k)] ( and (not= nil r) (nil? (last r)) ) ) )","user":"5551b492e4b0deb715856ded"},{"problem":134,"code":"(fn [k mp]\n  (and (contains? mp k) (= (k mp) nil)))","user":"57af36eae4b0fbc9809a272e"},{"problem":134,"code":"(fn [e m] (nil? (get m e :not-found)))","user":"5a5d0726e4b0512ff01cd91b"},{"code":"(fn [key map]\n  (nil? (get map key :not-found)))","problem":134,"user":"4e9c3648535dbda64a6f6b7d"},{"problem":134,"code":"(fn [a b] (if (and (contains? b a) (= (get b a) nil)) true false))","user":"54344721e4b0b6b47310fcea"},{"problem":134,"code":"(fn [x y] (and(contains? y x) (nil?(y x))))","user":"569adec2e4b0542e1f8d1450"},{"code":"(fn [key my-map]\n  (and\n    (= (get my-map key) nil)\n    (contains? my-map key)\n  )\n)","problem":134,"user":"525ee103e4b0cb4875a45dbb"},{"problem":134,"code":"(fn [a b]\n  (and (contains? b a) (= nil (a b))))","user":"589f34a0e4b02bd94d917e78"},{"problem":134,"code":"(fn foo [x m] (if (contains? m x) (nil? (x m)) false))","user":"55c779f8e4b0e31453f649d2"},{"problem":134,"code":"(fn [key map]\n    (if (and (contains? map key) (= nil (map key)))\n      true false))","user":"56a04c61e4b0542e1f8d14a1"},{"code":"(fn [k m] (= (k m false) nil))","problem":134,"user":"5083e759e4b0c98812d0787e"},{"problem":134,"code":"(fn [my-key my-map] (contains? (set my-map) [my-key nil]))","user":"5e471203e4b043cd24807a2a"},{"code":"(fn [elem coll]\n  (and\n    (contains? coll elem)\n    (nil? (coll elem))\n  )\n)","problem":134,"user":"504e0136e4b078edc5f5938e"},{"code":"#(if(contains? %2 %1)  (nil? (%1 %2)) false)","problem":134,"user":"5115cf87e4b0ce5098ee73c3"},{"problem":134,"code":"(fn [k m]\n  (nil? (m k k)))","user":"53da059be4b0e771c302547e"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k :notfound)))","user":"540c54a7e4b0addc1aec6700"},{"problem":134,"code":"(fn [k value] \n  (if (contains? value k)\n    (= (value k) nil)\n    false))","user":"5a7d4d6ce4b03baeef9276f6"},{"problem":134,"code":"(fn [k m]\n\t(and (contains? m k)\n\t(nil? (m k))))","user":"54391a55e4b032a45b869319"},{"code":"(fn [x y] (if (contains? y x) (nil? (x y)) false))","problem":134,"user":"4f04165d535dcb61093f6b9c"},{"problem":134,"code":"#(if (and (contains? %2 %1)  (= nil (%1 %2))) true false)","user":"55afa977e4b002ce9d5cbc15"},{"problem":134,"code":"(fn [k m] \n     (if (contains? m k)\n      (= nil (m k)) \n       false))","user":"5f5f2eafe4b02876ed9fcff5"},{"code":"(fn [x coll] \n           (if (contains? coll x)\n             (if (= (x coll) nil)\n               true\n               false)\n             false))","problem":134,"user":"52fa4f48e4b047fd55836ff7"},{"code":"(fn [x ok] (if (get ok x \"false\") false true))","problem":134,"user":"51a89810e4b08d8ec191b817"},{"problem":134,"code":"(fn[a,b] (and (contains? b a)(nil? (get b a))))","user":"57c447d9e4b05aa3c4741ccc"},{"code":"#(= nil (get %2 %1 \"No key\"))","problem":134,"user":"50cab30ce4b07a9c197b99ad"},{"problem":134,"code":"(fn [k m] (if-not (contains? m k) false (nil? (k m))))","user":"55ec1c4ce4b0121d4835fdc4"},{"problem":134,"code":"#( if(contains? %2 %1)\n   (= nil (get %2 %1))\n   false)","user":"54297741e4b01498b1a71b39"},{"problem":134,"code":"(fn [k m]\n  (nil? (k m \"not nil\")))","user":"53dd37aee4b0d874e779ae28"},{"code":"(fn [x,y] (and (contains? y x) \n               (nil? (x y))) )","problem":134,"user":"51838e8be4b028ec5fd2f2a0"},{"problem":134,"code":"(fn [a b] (= nil (get-in b [a] false)))","user":"54012b48e4b0de5c41848620"},{"problem":134,"code":"(fn [k m]\n  (if (nil? (get m k 0))\n    true\n    false))","user":"5defc177e4b093ff717275af"},{"code":"(fn [k m](if (contains? m k) \n                       (if (= nil (m k)) \n                         true\n                         false) \n                       false))","problem":134,"user":"524c7fcfe4b0752c4cb68cbd"},{"problem":134,"code":"(fn [k coll] (and\n              (contains? coll k)\n              (nil? (k coll))))","user":"54c8d4a8e4b045293a27f654"},{"problem":134,"code":"(fn [kw the-map] \n  (and \n   (contains? the-map kw) \n   (nil? (get the-map kw))))","user":"56e05bfce4b0ca2494a09606"},{"problem":134,"code":"#(nil? (get %2 %1 ::no))","user":"5d609ddde4b0c9e5857d5008"},{"problem":134,"code":"(fn nil-check [key coll] \n  (if (contains? coll key) \n    (nil? (get coll key)) \n    false))","user":"5a342188e4b0ddc586f153bd"},{"code":"(fn [k c] (= (get c k 0) nil))","problem":134,"user":"4f107e0e535d64f60314641c"},{"problem":134,"code":"(fn [key map] (nil? (key map :not_found)))","user":"57ccedaae4b0c746388ab88e"},{"problem":134,"code":"#( and (contains? %2 %1) ( nil? (%2 %1) ) )","user":"53a19dece4b0ca733b9744c0"},{"code":"#(if-let [[_ n] (find %2 %1)] (nil? n) false)","problem":134,"user":"4faae01ae4b081705acca206"},{"problem":134,"code":"(fn [a b]\n  (if (contains? b a)\n    (= (b a) nil)\n    false))","user":"5b7c9524e4b047b03b203736"},{"code":"(fn [key map] ( if(nil?(get map key 1) ) true false) )","problem":134,"user":"4ea85846535d7eef308072f9"},{"problem":134,"code":"(fn [some-key hmap]\n   (if (and (contains? hmap some-key) (= nil (some-key hmap)))\n     true\n     false\n     )\n   )","user":"5c51d700e4b0fb8c5ffd99d1"},{"problem":134,"code":"(fn [k coll] (and (contains? coll k) (= (coll k) nil)))","user":"58562083e4b0f14aab7c86eb"},{"problem":134,"code":"#(and (boolean (find %2 %1))\n      (nil? (%2 %1)))","user":"59a080e3e4b0871e7608b837"},{"problem":134,"code":"#(and (nil? (%1 %2)) \n       (contains? %2 %1))","user":"5f0c3da4e4b0f30dddfb5d49"},{"problem":134,"code":"(fn [b m] (if (= (get m b 1) nil) true false))","user":"576ffcb9e4b0979f89651592"},{"code":"(fn [k m]\n  (let [v (find m k)]\n    (and (not= nil v) (= nil (second v)))))","problem":134,"user":"51d08d67e4b067c365486351"},{"code":"(fn [k, m] \n  (and \n    (nil? (k m)) \n    (true? (some #(= k %) (keys m)))))","problem":134,"user":"4ff0e01fe4b0678c553fc328"},{"code":"(fn [k, xs] (and (contains? xs k) (nil? (k xs))))","problem":134,"user":"52baea85e4b07a9af57922d9"},{"code":"(fn [k m] (and (nil? (k m))\n               (contains? m k)))","problem":134,"user":"538e36c7e4b0b51d73faae81"},{"problem":134,"code":"(fn [key map]\n    (nil? (get map key false)))","user":"5317d78ee4b08068f379ed63"},{"code":"(fn [x y] (nil? (x y :na)))","problem":134,"user":"510b5596e4b078ea719210fd"},{"problem":134,"code":"(fn\n  [k m]\n  (and (contains? m k) (= (get m k) nil)))","user":"603e8a3be4b0d5df2af22314"},{"problem":134,"code":"#(nil? (get %2 % :missing))","user":"550f1c99e4b06e50f9beb171"},{"problem":134,"code":"(fn \n  [id data] \n  (nil? (get data id :not-nil)))","user":"586a657de4b0f14aab7c88bd"},{"problem":134,"code":"(fn [k m]\n  (not (k m \"not nil\")))","user":"5512cd55e4b055c2f668d4ba"},{"problem":134,"code":"(fn [k m] (= nil (get m k '())))","user":"5195fadee4b04c0af7ff3c11"},{"code":"(fn [k m] (and (nil? (k m)) (not (empty? (filter #(= % k) (keys m))))))","problem":134,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn [k m] \n  (if (= (get m k :unknown) nil)\n    true\n    false))","problem":134,"user":"50a93b6de4b0a9a42786e8e0"},{"problem":134,"code":"#(and\n  (contains? %2 %)\n  (nil? (% %2) ) )","user":"5680104ae4b0966858e4d8ea"},{"problem":134,"code":"(fn nilkey [key map]\n  (if (contains? map key)\n    (= (key map) nil)\n    false))","user":"5f8330b8e4b01aacbe7a270f"},{"problem":134,"code":"(fn [key map]\n (and (contains? map key)\n      (nil? (key map))))","user":"5da9d89ae4b000c986472c3b"},{"code":"(fn a-nil-key [x coll]\n  (if( nil? (get coll x :abcd))\n    true\n    false))","problem":134,"user":"5273562ae4b03e8d9a4a7479"},{"problem":134,"code":"(fn [a b] (= nil (a b \"x\")))","user":"53e8cefde4b036ad0777e48d"},{"problem":134,"code":"(fn[k m] (nil? (get m k true)))","user":"57aa053fe4b0b8559636fc61"},{"problem":134,"code":"(fn [k c] \n(and (contains? c k)\n            (nil? (k c)))\n    )","user":"554b2151e4b0a04f79299580"},{"code":"(fn nil-key? [k m]\r\n    (and (contains? m k)\r\n         (nil? (m k))))","problem":134,"user":"4f039524535dcb61093f6b2c"},{"code":"(fn [key map]\n  (if (contains? map key)\n    (not (map key))\n    false))","problem":134,"user":"4fbb9d80e4b081705acca2ea"},{"problem":134,"code":"(fn [a b] (if (and (= (a b) nil) (contains? b a)) true false))","user":"58d09002e4b03c36ff7e58cd"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key) (nil? (key map)) false))","user":"56a1c646e4b0542e1f8d14b3"},{"problem":134,"code":"#(if (contains? %2 %) (= nil (% %2)) false)","user":"528114ffe4b0757a1b17141f"},{"problem":134,"code":"(fn [x y] (if (and (= (y x) nil) (contains? y x)) true false))","user":"559d6288e4b0ec2b359424dc"},{"problem":134,"code":"(fn nil-key? [kej mapa]\n  (nil? (get mapa kej 1)))","user":"534f8c9ae4b084c2834f4acd"},{"problem":134,"code":"(fn [k col] \n  (and\n  \t(contains? col k)\n   \t(nil? (get col k))\n  )\n)","user":"55bb7546e4b01b9910ae29e7"},{"problem":134,"code":"(fn [key_ map_] \n  (if (contains? map_ key_)\n  (= (map_ key_) nil)\n  false))","user":"608e6047e4b03bd49d9f36bf"},{"problem":134,"code":"#(and\n       (contains? %2 %1)\n       (nil? (%1 %2))\n       )","user":"542ce413e4b0dad94371f2ae"},{"problem":134,"code":"#(if (contains? %2 %1) (if (= nil (%2 %1)) true false) false)","user":"59afb004e4b0e1f4e384c8bc"},{"code":"#(let [pair (find %2 %1)]\n  (and (vector? pair)\n      (nil? (val pair))))","problem":134,"user":"4f956072e4b0dcca54ed6ccf"},{"problem":134,"code":"#(if (contains? %2 %1) (if (nil? (get %2 %1)) true false)\n                false)\n\n\n;Works for the first two only.\n;#(if (nil? (get %2 %1)) true false)","user":"5633bb9de4b0bfe05bf117b4"},{"problem":134,"code":"(fn [some-key some-map] (if (contains? some-map some-key) (nil? (some-map some-key)) false))","user":"55ab07e0e4b0988bba2ad953"},{"code":"(fn [x m] (nil? (x m 1)))","problem":134,"user":"50dbf01fe4b02e6ac9592c81"},{"problem":134,"code":"(fn [x y]\n  (cond \n    (not (contains? y x)) false\n    (nil? (x y)) true \n    (not (nil? (x y))) false))","user":"53eaa804e4b036ad0777e4ea"},{"problem":134,"code":"(fn [key map] (and (nil? (map key)) \n                   (contains? (set (keys map)) key)))","user":"56ac81ace4b03c432f187347"},{"problem":134,"code":"(fn [my-key m]\n  (if (contains? m my-key)\n    (if (= nil (get m my-key))\n      true\n      false)\n    false))","user":"5df3b8a2e4b03c219ef1a36e"},{"problem":134,"code":"(fn [key map] (= (if(contains? map key) (get map key) false) nil))","user":"54d09306e4b0e8a36923e5cc"},{"problem":134,"code":"#(if (find %2 %1) (= (%2 %1) nil) false)","user":"561c725de4b064ca9f4b169a"},{"code":"#(if (= nil (get %2 %1 false)) true false)","problem":134,"user":"4eb51942535d7eef30807365"},{"problem":134,"code":"(fn [x y] \n  (and (= (x y) nil) \n       (contains? y x))\n)","user":"55c5e781e4b0e31453f649b8"},{"code":"(fn [k m] \n(and\n (contains? m k)\n (nil? (get m k))\n))","problem":134,"user":"51eb3aace4b0f1f103a0d159"},{"problem":134,"code":"(fn \n  [x m]\n  (and (contains? m x) (nil? (x m))))","user":"5697fda8e4b0542e1f8d142c"},{"code":"#(nil? (% %2 :no-such-key))","problem":134,"user":"504ed350e4b069badc5a33d1"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n  (true? (= nil (get m k)))\n   false))","user":"59da2569e4b0ef0a1e9b5c62"},{"problem":134,"code":"(fn abc [k m] \n  (if (contains? m k) \n    (nil? (-> m k)) \n    false))","user":"5b3ca9c9e4b02d533a91bbe3"},{"problem":134,"code":"(fn [x y]\n  (if (and (contains? y x) (not (get y x)) )\n    true\n    false))","user":"5594e0e3e4b0c79f6e1db95b"},{"code":"#(nil? (get %2% 0))","problem":134,"user":"4dad8fe9c9a9d6ed1899dc57"},{"problem":134,"code":"(fn [key map]\n  (and\n   (contains? map key)\n   (= (map key) nil)))","user":"56af99dfe4b061e3ca319ad5"},{"problem":134,"code":"#(not(let [a (some #{%1} (keys %2))] (if (nil? a) true (a %2))))","user":"564f128de4b0284900eef6a4"},{"code":"(fn [x collection] (and (contains? collection x)(= nil (get collection x))))","problem":134,"user":"524b1bf7e4b09eba1c0223c3"},{"problem":134,"code":"(fn [key coll] (and (nil? (get coll key)) (contains? coll key)))","user":"55ec4558e4b0121d4835fdc5"},{"problem":134,"code":"(fn [k m]\n  \t\t(let [[_k _v] (find m k)]\n          (and\n           (not (nil? _k))\n           (nil? _v))))","user":"5714614ee4b07c98581c3abd"},{"problem":134,"code":"(fn [x y] (= nil (get y x :not-found)))","user":"5689bd04e4b0dcc4269f4082"},{"code":"#(nil? (%1 %2, false))","problem":134,"user":"51430fb2e4b0c172af7558ce"},{"code":"#(if\r\n    (and \r\n        (contains? %2 %1) \r\n        (= (%1 %2) nil))\r\n      true \r\n      false\r\n )","problem":134,"user":"4fe588b6e4b0e8f79898fec5"},{"problem":134,"code":"(fn [x y] (if (= (get y x 1) nil) true false))","user":"58d4f44ee4b03c36ff7e594f"},{"code":"(fn\n  [k m]\n  (and (contains? m k) (= (k m) nil)))","problem":134,"user":"50800e49e4b089ade05efbda"},{"code":"(fn [k m] \n  (let [{v k} m\n        ks (set (keys m))]\n    (if-not (nil? (ks k)) (nil? v) false)))","problem":134,"user":"51e24a04e4b01e5198146430"},{"problem":134,"code":"(fn [key map] (= nil (get map key false)))","user":"53d2b10de4b00fb29b221322"},{"code":"(fn [k m] (= nil (get m k \"not found\")))","problem":134,"user":"502a9fdee4b095a7adb898b4"},{"problem":134,"code":"(fn [k col] (and (nil? (col k))\n                 (contains? col k)))\n\n;; or\n\n;; (fn [k col] (nil? (col k false)))\n\n;; because you can set a 'default' return value if the key can't be found\n;; so also\n\n;; (fn [k col] (nil? (col k \"my fat ass\")))\n\n;; or (finally)\n\n;; #(nil? (%2 % %))","user":"54961073e4b0b312c081ff62"},{"problem":134,"code":"#(nil? (get %2 %1 \"not nil\"))","user":"55d6a2ebe4b0e31453f64a9a"},{"code":"(fn [key map]\n  (and (= (key map) nil) (contains? map key)))","problem":134,"user":"4fc52986e4b081705acca383"},{"code":"(fn [x y] ( = nil (get y x 2)))","problem":134,"user":"539c9d7ee4b0b51d73faaf2d"},{"problem":134,"code":"(fn [k m] \n   (and (contains? m k) (= (m k) nil)))","user":"55b24240e4b0da326a65cf7b"},{"problem":134,"code":"(fn [a, b] (and (nil? (a b)) (contains? b a)))","user":"569f6892e4b0542e1f8d1492"},{"code":"(fn [k m] (if (contains? m k)\n (nil? (m k))\n false\n))","problem":134,"user":"521dceeae4b050d5da042802"},{"code":"#(nil? (get %2 % false))","problem":134,"user":"4e589bdc535d8a8b8723a295"},{"code":"(fn [k,m] (if (and (contains? m k) (= nil (get m k))) true false))","problem":134,"user":"5135989ee4b04ac1f358dd44"},{"problem":134,"code":"(fn [key map] (= (map key \"anjay\") nil))","user":"56e53d2fe4b02e7e935eb6bc"},{"problem":134,"code":"(fn [k m]\n  (if (k m)\n    false\n    (contains? m k)))","user":"56bb81ebe4b0f26550335957"},{"problem":134,"code":"#(nil? (%2 %1 \"missing\"))","user":"591610d4e4b09b4ee5954b7e"},{"problem":134,"code":"(fn [key map]\n  (nil? (key map 0)))","user":"5f936fbfe4b0715f5002d7bd"},{"problem":134,"code":"(fn [x mp] (and (nil? (mp x)) (contains? mp x)))","user":"5d046f7ce4b0cc9c915881d5"},{"code":"#(nil? (get %2 %1 :nope))","problem":134,"user":"4ed6c35e535d10e5ff6f52e8"},{"code":"(fn [k m]\n  (nil? (get m k :default)))","problem":134,"user":"4f9d53f3e4b0dcca54ed6d21"},{"code":"(fn [a b] \n  (if \n    (and \n      (contains? b a) \n      (= \n        (get b a) \n      nil\n      )\n    ) \n  true\n  false\n  )\n)","problem":134,"user":"506f5d68e4b082ae7d1032c7"},{"code":"#(and (contains? %2 %1) (nil? (%1 %2)))","problem":134,"user":"4e7263a1535d5021c1a8965f"},{"problem":134,"code":"(fn [x y]\n\t(and (contains? y x)\n         (nil? (x y))\n    )\n)","user":"55dde427e4b050e68259b3d8"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k) \n  (nil? (get m k))\n  false))","user":"58182480e4b0c0e9c07b83a7"},{"problem":134,"code":"(fn [x xs] (and (contains? xs x) (nil? (x xs)) true))","user":"566669d8e4b0e91d5f5c566f"},{"problem":134,"code":"(fn [k d] \n  (and \n   \t(contains? d k)\n    (nil? (k d))))","user":"5a8aa992e4b05369db4d24d8"},{"problem":134,"code":"#(= % (first (keys %2)))","user":"5790f9d7e4b0ebec4cfb75b4"},{"code":"(fn [k m]\n  (and (contains? m k) (not (m k))))","problem":134,"user":"4eca2cea535d6d7199dd3702"},{"problem":134,"code":"(fn [k m]\n  (and (contains? (set (keys m)) k) (= nil (k m))))","user":"558306dfe4b05c286339e110"},{"code":"(fn [y x] (if (contains? x y) (= nil (get x y)) false))","problem":134,"user":"523eb110e4b057c4b7cd0a67"},{"problem":134,"code":"(fn [s d] (nil? (get-in d [s] #{})))","user":"5a7de7a3e4b03baeef927702"},{"code":"#(if (contains? %2 %1) (nil? (%1 %2)) false)","problem":134,"user":"4e7650c5535d324fb2983d68"},{"problem":134,"code":"(fn my-nil-key\n  [k h]\n  (if (contains? h k)\n    (if (nil? (get h k))\n      true\n      false)\n    false))","user":"5599abc9e4b031d6649c9bb0"},{"problem":134,"code":"(fn [k m]\n  (and (boolean ((set (keys m)) k))\n       (nil? (k m))))","user":"5bab5440e4b0a20761a23475"},{"code":"(fn f [x y] \n  (if (contains? y x)\n    (= nil (get y x ))\n    false\n    )\n    \n   )","problem":134,"user":"5029131ae4b0b6c928ad61ff"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (if (= nil (key map))\n      true\n      false)\n    false))","user":"55dcb06ee4b050e68259b3b9"},{"problem":134,"code":"#(nil? (get %2 %1 'nf))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"code":"#(and\n    (contains? %2 %1)\n    (nil? (%1 %2)))","problem":134,"user":"522724bde4b04e78ff2e19aa"},{"code":"(fn [x y] \n  (if (contains? y x) (nil? (x y)) false))","problem":134,"user":"4fd9f5dbe4b05e33b9224f41"},{"code":"(fn[a b](if(and (contains? b a) (nil? (get b a))) true false))","problem":134,"user":"4f2046b7535d64f6031464ab"},{"code":"(fn [x y]\n    (and\n      (nil? (get y x))\n      (contains? y x)\n    )\n  )","problem":134,"user":"4e8b73e4535d65386fec2120"},{"code":"(fn [key map]\n  (if  (and\n        (some #(= key %) (keys map))\n        (= nil (key map)))\n    true\n    false)\n  \n  )","problem":134,"user":"4fea1f9ee4b0547ebccb248b"},{"problem":134,"code":"(fn [x dict]\n  (if (not (nil? ((set (keys dict)) x)))\n  (nil? (x dict))\n  false))","user":"5ba0dcfce4b0c0b3ffbd4b98"},{"problem":134,"code":"(fn [k, coll] (nil? (coll k :not-found)))","user":"5587cd80e4b059ccff29b1e5"},{"problem":134,"code":"(fn check-contents[x y]\n  (if (contains? y x)\n  (nil? (x y))\n  false))","user":"55ed7474e4b0121d4835fdda"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"XXX\")))","user":"553e007ae4b0a04f792994e7"},{"problem":134,"code":"(fn [a-key a-map] (and (contains? a-map a-key) (nil? (a-key a-map))))","user":"5416b4a2e4b01498b1a71a01"},{"code":"(fn [key, map] \n  (and \n    (contains? map key) \n    (= \n      (get map key) \n      nil)\n    )\n  )","problem":134,"user":"4f71ac00e4b07046d9f4f010"},{"code":"(fn [x y] (if (and (= nil (y x)) (contains? y x)) true false))","problem":134,"user":"5186448fe4b0da5a5be3bac9"},{"problem":134,"code":"#(if (not (contains? %2 %1)) false (= (%1 %2) nil))","user":"5f6cff56e4b02876ed9fd05a"},{"problem":134,"code":"(fn [key map]\n   (and\n    (nil? (get map key))\n    (not (= :c key))))","user":"55244318e4b0882d96d091be"},{"code":"(fn check [key m]\n  (let [val (key m)]\n    (if (and (contains? m key) (nil? val))\n      true\n      false)))","problem":134,"user":"4e6aba11535d8ccf87e9feff"},{"problem":134,"code":"(fn [el merp]\n  (let [val (get merp el \"missing\")]\n    (if val\n      false\n      true)))","user":"53b0750fe4b047364c044483"},{"code":"(fn [x y] (if (and (contains? y x) (= (x y) nil)) true false))","problem":134,"user":"4f4ff5a8e4b03ad3f0c10cf3"},{"code":"(fn [k m]\n  (and (contains? m k) (nil? (get m k)))\n  )","problem":134,"user":"5252cbe7e4b0541d1855b8d2"},{"problem":134,"code":"(fn [keyy mapa]\n  (if (and (find mapa keyy) (nil? (get mapa keyy)))\n    true\n    false))","user":"6038b6b4e4b0d5df2af222ef"},{"problem":134,"code":"#(and (contains? %2 %1)\n       (= (%1 %2) nil))","user":"58b226cce4b0ebc645576d07"},{"code":"#(and (contains? (into #{} (keys %2)) %) (nil? (%2 %)))","problem":134,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":134,"code":"#(not (let [m %2\n      key %\n      contain (contains? m key)]\n  (cond (and contain (not (nil? (key m)))) true\n        (not contain) true\n        :else false)))\n\n;(#(not(get %2 % true))","user":"5604ae27e4b0c80df0ca2663"},{"problem":134,"code":"(fn con[x y]\n\t(= (get y x false) nil))","user":"5632abbee4b0bfe05bf117a7"},{"problem":134,"code":"(fn __\n  [key-lst cad]\n  (if (contains? cad key-lst)\n    (= nil (get cad key-lst))\n    false))","user":"57f81534e4b0d3187e900915"},{"problem":134,"code":"(fn [k m] (and\n           (not (= nil ((set (keys m)) k)))\n           (= nil (m k))\n           ))","user":"5744d088e4b009280f9f2b41"},{"code":"(fn nilFinder [key,map] (and (nil? (map key))(contains? map key)))","problem":134,"user":"4ff5a42ae4b0678c553fc36c"},{"problem":134,"code":"(fn [k,m] (if (contains? m k) \n             (nil? (m k)) \n             false ))","user":"53e32cf7e4b036ad0777e3fd"},{"problem":134,"code":"(fn nil-val? [x y]\n  (and (contains? y x) (nil? (x y))))","user":"4fabbd3ee4b081705acca21e"},{"code":"#(= nil (get %2 %1 :default))","problem":134,"user":"4f16ef8a535d64f603146451"},{"problem":134,"code":"(fn n\n  [k coll]\n  (and (contains? coll k) \n       (nil? (k coll)))\n  )","user":"579601c8e4b0e215f87e8492"},{"problem":134,"code":"(fn [key map] (if (and (contains? map key) (= nil (get map key)))\n                true\n                false))","user":"5f122af4e4b091ba50b4dbad"},{"code":"(fn [a m] (if (contains? m a) (= (m a) nil) false ))","problem":134,"user":"50cf2267e4b0e61f11ddcd8c"},{"code":"(fn [x, y]\n   (nil? (get y x false)))","problem":134,"user":"4f6ecc65e4b07046d9f4efdd"},{"problem":134,"code":"(fn [keyw mapw]\n    (if-let [findresult (find mapw keyw)]\n        (not (nth findresult 1))\n        false))","user":"570fd28be4b09c608db70427"},{"problem":134,"code":"#(nil? (if (contains? %2 %1) (%1 %2) []))","user":"564b1ff8e4b0284900eef663"},{"problem":134,"code":"(fn [k, l] (nil? (get l k false)))","user":"55ef12cfe4b0121d4835fdfc"},{"problem":134,"code":"(fn [ke ma] (and (contains? ma ke) (= nil (ma ke))))","user":"589dd2cce4b02bd94d917e48"},{"code":"(fn [v m] (nil? (v m 1)))","problem":134,"user":"4f8592e6e4b033992c121c47"},{"code":"(fn [x,y] (and (contains? y x) (nil? (get y x))))","problem":134,"user":"51ac36c1e4b09397d5109765"},{"code":"#(and (nil? (%1 %2)) (not= nil (find %2 %1)))","problem":134,"user":"528f0106e4b0239c8a67aeeb"},{"code":"#(nil? (%2 %1 %1))","problem":134,"user":"5053de37e4b0b1b9d1860ea8"},{"problem":134,"code":"(fn [x m] (and (not (= nil (find m x))) (= nil (x m))))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"(fn [key tMap] (and (contains? tMap key) (= (get tMap key) nil)))","problem":134,"user":"532c9dc9e4b019098a6f8b30"},{"code":"(fn f [ x y]\n  (if (contains? y x)\n  (= nil (get y x))\nfalse\n)\n  )","problem":134,"user":"50291679e4b0b6c928ad6200"},{"code":"#(\n  and\n  (contains? %2 %1)\n  (= nil (%1 %2))\n)","problem":134,"user":"4ff2f0a9e4b0678c553fc341"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"not nill\")))","user":"556189a6e4b0c656e3ff17c9"},{"problem":134,"code":"(fn [x dict] \n  (= (dict x true) nil))","user":"548018e0e4b0c51c1f4d732e"},{"code":"(fn[k m] (and (contains? m k) (nil? (m k))) )","problem":134,"user":"4ec4d723535dcc7ae8597d65"},{"problem":134,"code":"(fn [key map] (if (contains? map key) (= (map key) nil) false))","user":"548018cde4b0c51c1f4d7325"},{"code":"(fn [key map]\n  (if (and (contains? map key) (= (key map) nil)) true false))","problem":134,"user":"4f99cfc2e4b0dcca54ed6d02"},{"problem":134,"code":"(fn [k m] (if (and (contains? m k) (= nil (m k)) )\n            true\n            false))","user":"53bb4cb1e4b047364c044502"},{"code":"(fn [key coll] (and (contains? coll key) (= (key coll) nil)))","problem":134,"user":"5393a2e1e4b0b51d73faaebf"},{"problem":134,"code":"(fn [a hola]\n  (if (and (= (a hola) nil) (contains? hola a))\n    true\n    false))","user":"58cabf32e4b03c36ff7e583a"},{"code":"(fn weird [k m] (if (nil? (find m k)) false (nil? (val (find m k)))))","problem":134,"user":"53388e2de4b0e30313ee6c9c"},{"problem":134,"code":"(fn [key col]\n  (and (contains? col key) (= nil (col key)))\n  )","user":"576d24ede4b0979f8965155b"},{"code":"#(if (nil? (get %2 %1 \"te\"))\n   \ttrue\n   false\n   )","problem":134,"user":"524025bce4b0ad64fa01030f"},{"problem":134,"code":"(fn [x lst] (and (contains? lst x) (nil? (lst x))))","user":"543bb568e4b032a45b869334"},{"code":"(fn [key, map] (and (not (= (filter #(= % key) (keys map) ) ())) (= (map key) nil)) )","problem":134,"user":"4f031883535dcb61093f6a5e"},{"code":"(fn [e s] (and (contains? s e)(= (s e) nil)))","problem":134,"user":"536f2faee4b0fc7073fd6e79"},{"problem":134,"code":"(fn [key map] (if (contains? map key)\n   (nil? (get map key))\n   false))","user":"5644db19e4b0284900eef5fd"},{"problem":134,"code":"(fn [k lst] (if (nil? (find lst k)) false (nil? (get lst k))))","user":"5c59b1d3e4b01df32ab73261"},{"problem":134,"code":"(fn [x y] (nil? (y x x)))","user":"5f8fe45ae4b0715f5002d78d"},{"problem":134,"code":"#(and (contains? %2 %1 ) (nil? (get %2  %1)))","user":"5cd2a3f9e4b0ccb061962901"},{"problem":134,"code":"(fn[k m](and (contains? m k) (nil? (get m k))))","user":"5537b2c7e4b09218d5f44fce"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (= (key map) nil)\n    false))","user":"5ce2bf8ee4b0a17bb84e2b2e"},{"problem":134,"code":"(fn nilkey [key coll]\n  (and(contains? coll key)(not(coll key))))","user":"55a65872e4b09e57187da299"},{"problem":134,"code":"(fn [k m] (if-let [exists (contains? m k)] (nil? (m k)) false))","user":"4f6543cae4b07046d9f4ef41"},{"problem":134,"code":"#(if(contains? %2 %) (= (% %2) nil) false)","user":"585d2c1fe4b0f14aab7c8797"},{"code":"#(and\n  (= nil (%1 %2))\n  (contains? %2 %1))","problem":134,"user":"4ed24780535d44c135fd68d4"},{"problem":134,"code":"(fn\n[k m]\n  (= nil (get m k \"hitler\"))\n )","user":"56e8963ae4b04a395b9a03f1"},{"code":"(fn [k m] (= (get m k 0) nil))","problem":134,"user":"4dbba163535d3f4042261ecc"},{"code":"(fn [m k] (and (contains? k m) (nil? (k m))))","problem":134,"user":"50aab057e4b056ee0193586b"},{"code":"(fn[x y] (if (contains? y x) (nil? (x y)) false))","problem":134,"user":"52f32c24e4b05e3f0be25f0d"},{"problem":134,"code":"#(and (nil? (%2 %1))\n      (contains? %2 %1))","user":"587b8bdee4b01531a375eaff"},{"problem":134,"code":"(fn [key map]\n          (if (contains? map key)\n            (nil? (get map key))\n            false))","user":"5d06499ae4b0cc9c915881ec"},{"code":"(fn [key values] (if (contains? values key) (= nil (get values key)) false))","problem":134,"user":"4edfb618535d10e5ff6f5343"},{"problem":134,"code":"(fn [the-key coll]\n\t(if (and (contains? coll the-key) (= (the-key coll) nil))\n    \ttrue\n        false))","user":"5896735fe4b00487982d529d"},{"code":"(fn [key coll]\n  (and (contains? coll key)\n       (not (coll key))))","problem":134,"user":"4f2cdd42e4b0d6649770a055"},{"code":"(fn [x y] (and (contains? y x) (= nil (y x))))","problem":134,"user":"4ed2dd98535d44c135fd68e2"},{"problem":134,"code":"(fn [x,y](nil? (get y, x ,\"x\")))","user":"53abe2a7e4b047364c044453"},{"code":"(fn [_key _map] \n  (and \n   (= nil (_key _map))\n   (contains? _map _key)))","problem":134,"user":"50c13f77e4b096f585049c3b"},{"code":"(fn [x y] (and (= (y x) nil) (contains? y x)))","problem":134,"user":"50d6d7eee4b0159555a1fc76"},{"code":"#(if(contains? %2 %1)(nil? (get %2 %1))(nil? false))","problem":134,"user":"5310d569e4b08068f379ecda"},{"code":"#(= nil (get %2 %1 :empty))","problem":134,"user":"51f81925e4b09be9c177e526"},{"problem":134,"code":"(fn [a dict] (if (contains? dict a)\n               (= (dict a) nil)\n               false))","user":"5dfa1c67e4b0a607a9a45cc5"},{"problem":134,"code":"(fn [k, h]\n  (= [k nil] (find h k)))","user":"5617a540e4b06b1bb2182a12"},{"code":"(fn [k m] (if (contains? m k) (if (nil? (m k)) true false) false))","problem":134,"user":"4f826548e4b033992c121c08"},{"code":"#(nil? (%2 %1 ::miss))","problem":134,"user":"50ef4e2be4b0a78662fa2653"},{"code":"(fn [x m] (= (get m x \"missing\") nil))","problem":134,"user":"52810225e4b0757a1b171418"},{"problem":134,"code":"(fn [key map]\n  (and (nil? (key map)) (contains? map key)))","user":"5be8bc2de4b0f319e2d7ec66"},{"code":"(fn [k m] (nil? (get m k ::none)))","problem":134,"user":"4f58fe71e4b0a7574ea7185f"},{"problem":134,"code":"(fn [k, m] (and (contains? m k) (nil? (get m k))))","user":"57303e2ce4b0cd1946bd0fa7"},{"problem":134,"code":"#(nil? (%1 %2 false))\n;; #(if (contains? %2 %1) (nil? (%1 %2)) false)","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":134,"code":"#(if (contains? %2 %1)\n             (if (nil? (get %2 %1) )\n               true\n               false)\n             false)","user":"5dd1fb19e4b0948ae9d9ad51"},{"problem":134,"code":"(fn [key map] \n  (if (and (contains? map key) (= nil (get map key))) true false))","user":"5af0fd66e4b0cc2b61a3bc59"},{"problem":134,"code":"#(nil? (get %2 %1 \"no-there\"))","user":"51e8736ae4b006d205356a4f"},{"problem":134,"code":"(fn \n  [x y]\n  (if (contains? y x)\n    (if (nil? (x y))\n      true\n      false)\n    false))","user":"58b4a429e4b0ebc645576d40"},{"code":"#(= nil (get %2 % \"he\"))","problem":134,"user":"530262c8e4b0d8b024fd3728"},{"problem":134,"code":"#(= nil (% %2 false))","user":"56618ddfe4b068f2fe63dc6a"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)\n        (nil? (k m))))","user":"5617db88e4b06b1bb2182a16"},{"code":"(fn [k m]\n    (nil? (get m k false)))","problem":134,"user":"4e80aa10535db62dc21a62b1"},{"problem":134,"code":"(fn [a m] \n  (and \n   (contains? m a) \n   (nil? (get m a))\n         )\n   )","user":"5a778224e4b013a48d399761"},{"problem":134,"code":"(fn [entry m]\n  (and (contains? m entry) (nil? (m entry))))","user":"50d7df66e4b0e489f3b966ac"},{"code":"(fn [x rest] (nil? (x rest 0)))","problem":134,"user":"52cfb277e4b07d0d72b273ac"},{"code":"#(if(contains? (set (keys %2)) %1) (nil? (%1 %2)) (= 1 0))","problem":134,"user":"50b25f2ce4b03ea88043355f"},{"code":"#(nil? (%1 %2 :ne))","problem":134,"user":"4efd8b67535de96065cf5085"},{"code":"#(and\r\n       (nil? (%2 %1))\r\n       (contains? %2 %1))","problem":134,"user":"4ee6166e535d93acb0a66854"},{"code":"(fn [k m] (if (contains? m k) (if (= nil (k m)) true false) false))","problem":134,"user":"5384e2cee4b06839e8705ef7"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (nil? (get m k)) ))","user":"55d9ad1ae4b0e31453f64acb"},{"problem":134,"code":"(fn [key map]\n   (if (contains? map key)\n     (if (= (key map) nil)\n       true\n       false\n       )\n     false\n     ))","user":"5cdd7157e4b05ee0cb31175b"},{"problem":134,"code":"(fn [m k] (not (m k true)))","user":"57481f1fe4b009280f9f2b82"},{"problem":134,"code":"#(and (contains? %2 %1) (=(get %2 %1) nil))","user":"56427910e4b08d4f616f5f19"},{"problem":134,"code":"(fn [key map](if (contains? map key)  (nil? (get map key))  false))","user":"560331dee4b04bb52996e1b5"},{"problem":134,"code":"#(nil? (get %2 %1 '()))","user":"52d068c9e4b07d0d72b273b9"},{"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (= nil (k m))))","problem":134,"user":"5215661be4b02f6d8ea676c7"},{"code":"#(if-let [p (find %2 %)] (nil? (p 1)) false)","problem":134,"user":"5007cdb9e4b0b17c647f5227"},{"code":"#(if (and (not= nil (find %2 %1)) (= nil (%1 %2))) true false)","problem":134,"user":"4f032977535dcb61093f6a6c"},{"problem":134,"code":"(fn [key data] (and (contains? data key) (nil? (key data))))","user":"58ed2e21e4b056aecfd47d7a"},{"code":"(fn [a,b] (if (contains? b a) (nil? (a b)) false))","problem":134,"user":"53566247e4b04ce2eb3ed266"},{"code":"(fn [x y] (and (nil? (y x)) (contains? y x)) )","problem":134,"user":"506d7eede4b0a302964c5494"},{"code":"(fn [k m] (nil? (m k 0) ) )","problem":134,"user":"4f25c4c4e4b0d66497709ffc"},{"code":"(fn [k,m] (if ( and (nil? (get m k)) (not( nil? (some #{k} (keys m) ) )) ) true false))","problem":134,"user":"52fc9b94e4b047fd5583701d"},{"problem":134,"code":"(fn [key, m] (nil? (get m key 0) ) )","user":"5db70407e4b010eb3c36cd3e"},{"code":"#(not (%2 %1 1))","problem":134,"user":"5126dbabe4b083bb8f88cf0e"},{"problem":134,"code":"(fn [k m]\n  (if (and (nil? (get m k)) (contains? m k))\n    true\n    false))","user":"5869a49fe4b0f14aab7c88a9"},{"code":"(fn\n  [k m]\n    (and\n      (nil? (m k))\n      (contains? m k)))","problem":134,"user":"4eddc5f4535d10e5ff6f532c"},{"code":"(fn [k m] (and (contains? m k)(nil? (m k))))","problem":134,"user":"5368fedee4b0243289761e93"},{"problem":134,"code":"(fn nil-key? [k m]\n  (and (nil? (k m)) (contains? m k)))","user":"5e0d948fe4b099d064962f98"},{"problem":134,"code":"(fn [x, mp]\n\n (and (contains? mp x) (= (get mp x) nil))\n  \n)","user":"5bed1e4ae4b0a6d31fed2118"},{"problem":134,"code":"(fn  [k m] \n  (and (contains? m k) (nil? (k m))))","user":"55f01316e4b06e875b46ce1a"},{"code":"#(nil?  (%1 %2 %1))","problem":134,"user":"4fb4099be4b081705acca2a9"},{"code":"(fn [k m]\n  (if-let [[_ v] (find m k)]\n    (nil? v)\n    false))","problem":134,"user":"4e521cef535d302ef430da6d"},{"code":"(fn [kw m]\n  (and (contains? m kw) (nil? (m kw))))","problem":134,"user":"50b32252e4b03ea880433568"},{"problem":134,"code":"(fn a-nil-key-solution\n  [mkey mappy] ;; update args as needed\n  ;; Write a function which, given a key and map, returns true iff the map contains an entry with that key and its value is nil.\n  (and (contains? mappy mkey) (= nil (get mappy mkey)))\n)","user":"536829c8e4b0243289761e8b"},{"problem":134,"code":"(fn [k c] (and (contains? c k) (= (k c) nil)))","user":"562e8b2be4b0ab312c17ebbb"},{"code":"(fn [k m] \n  (and (contains? m k) (nil? (get m k))))","problem":134,"user":"539ad6b7e4b0b51d73faaf18"},{"problem":134,"code":"(fn [k m]\n  (not (m k true)))","user":"5a481e05e4b05d388ecb6b64"},{"problem":134,"code":"#_(fn [x m] (if (contains? m x) (nil? (m x)) false))\n(fn [x m] (nil? (m x 0)))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":134,"code":"(fn [a b] (and (contains? b a) (= (a b) nil) ) )","user":"58ae3f7ee4b0ebc645576cb7"},{"code":"(fn [x m] (nil? (get m x 1)))","problem":134,"user":"503cc8cae4b06c4e0e1fa251"},{"code":"(fn [k m] (nil? (m k :foo)))","problem":134,"user":"504e90bae4b069badc5a33b8"},{"code":"(fn [key map] (and (contains? map key) (= (map key) nil )))","problem":134,"user":"4f00e9c7535dcb61093f6a33"},{"code":"#(nil? (% %2 -1))","problem":134,"user":"4fcf254ce4b03432b189f40d"},{"problem":134,"code":"(fn [the_key the_map]\n  (if (contains? the_map the_key) \n    (= nil (the_map the_key)) \n    false))","user":"5782ce69e4b0d36ec5835e9a"},{"problem":134,"code":"(fn [key map] (and (contains? map key) (nil? (get map key ))))","user":"533c2605e4b0e30313ee6cd7"},{"code":"(fn [k coll]\n  (if-let [[_ v] (find coll k)]\n    (nil? v)\n    false))","problem":134,"user":"4fb1d907e4b081705acca282"},{"problem":134,"code":"(fn nil-key\n  [k m]\n  (if (contains? m k)\n    (= (k m) nil)\n    false))","user":"608c270ae4b03bd49d9f36b3"},{"problem":134,"code":"#(nil? (%1 %2 \"not a key\"))\n;#(and (not (boolean (%1 %2))) (boolean (some #{%1} (keys %2))))","user":"555994fbe4b0deb715856e39"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)(nil? (get m k))))","user":"52faf67ce4b047fd55837005"},{"problem":134,"code":"(fn [akey amap] \n   (if (contains? amap akey)\n                   (nil? (akey amap))\n     (true? false)))","user":"5aef6084e4b0cc2b61a3bc34"},{"problem":134,"code":"(fn [key array] (= nil (get array key :nothing)))","user":"5e839edde4b09a7a73c8bbba"},{"code":"(fn [k h] (nil? (h k :nohere)))","problem":134,"user":"508157b2e4b0946d0443855c"},{"code":"(fn is_nil [x y] \n  (= nil (get y x false)))","problem":134,"user":"4f0369a2535dcb61093f6ab0"},{"code":"(fn [k coll] (if (contains? coll k) (= nil (get coll k)) false))","problem":134,"user":"52c23344e4b07a9af5792379"},{"problem":134,"code":"(fn [fuck you]\n  (if (contains? you fuck)\n    (= (fuck you) nil)\n    false\n  )\n)","user":"5626f770e4b00e49c7cb47c8"},{"code":"(fn has [k m] (and (contains? m k)(nil? (get m k))))","problem":134,"user":"502c8681e4b0532a782a5e35"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k 123)))","user":"53bce179e4b0d9a98559a6c1"},{"problem":134,"code":"(fn [mySym myMap]\n  (nil? (myMap mySym 1))\n)","user":"56c79d37e4b0ed865f9758c6"},{"code":"(fn fck [k m] (and (contains? m k) (nil? (get m k))))","problem":134,"user":"536d5515e4b0fc7073fd6e59"},{"code":"#(nil? (%1 %2 \"\"))","problem":134,"user":"4fd4a729e4b0d4de60cee36d"},{"problem":134,"code":"(fn [k m] (if (contains? m k) (= (k m) nil) false ))","user":"5818a068e4b0c0e9c07b83be"},{"code":"(comp nil? #(get %2 %1 0))","problem":134,"user":"526952b8e4b03e8d9a4a71e4"},{"problem":134,"code":"(fn [search mapping] (if(and (contains? mapping search) (= (search mapping) nil))\n                       true\n                       false))","user":"53f50c03e4b0db01ade6f9ca"},{"code":"(fn [i m] (nil? (get m i false)))","problem":134,"user":"4f1b0ab3535d64f603146474"},{"problem":134,"code":"(fn [k m]\n  (and \n   (contains? m k)\n   (= nil \n      (k m))))","user":"546ff701e4b00cfc9eacc1b3"},{"problem":134,"code":"(fn [needle, haystack] (= (get haystack needle 0) nil))","user":"58476b1ae4b089d5ab817ea6"},{"problem":134,"code":"(fn [thekey themap] (and (contains? themap thekey) (nil? (get themap thekey))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (nil? (key map))\n    false\n    ))","user":"59636ec9e4b066ee0a44b0c8"},{"code":"(fn [x, y] (= nil (get y x 10)))","problem":134,"user":"4f058c73535dcb61093f6bf9"},{"problem":134,"code":"; input :key map\n; output: key exist and key value is nil\n\n(fn [a b] (if ( and (contains? b a) (nil? (a b))) true false))","user":"582c526ae4b051871117bf88"},{"code":"(fn [k m]\n  (if (and (contains? m k)\n           (nil? (k m)))\n    true\n    false))","problem":134,"user":"52dab592e4b09f7907dd13bd"},{"problem":134,"code":"(fn check\n  [value org-map]\n  (cond\n    (= \"not-found\" (get org-map value \"not-found\")) false\n    (= nil (get org-map value)) true\n    :else false\n    ))","user":"56585dbce4b0f9d632dd84b3"},{"code":"(fn [k map]\n  (= nil (get map k true)))","problem":134,"user":"51684318e4b03f62cda68cd6"},{"problem":134,"code":"(fn [ke input]\n  (and\n   (contains? input ke)\n   (nil? (ke input))))","user":"55a016fde4b0acc240e314f1"},{"problem":134,"code":"#(if (empty? (filter (partial = %1) (keys %2)))\n   false\n   (= (%1 %2) nil))","user":"58f8d79ee4b0438e51c2cf39"},{"problem":134,"code":"(fn [k m] \n  (let [[a b] (first m)]\n    (if (and (= a k) (nil? b)) \n      true\n      false)))","user":"5530b82ae4b076ab5578f819"},{"code":"(fn [k m] (and (contains? m k) (= (get m k) nil)))","problem":134,"user":"4daf8f84edd6309eace4d17a"},{"problem":134,"code":"(fn key-value-is-nil?\n  [k m]\n  (let [x (->> m (keys) (filter #(= % k)) (count))]\n    (if (= x 0)\n      false\n      (nil? (k m)))))","user":"5e9f3c2ce4b00a66d4a9517f"},{"problem":134,"code":"(fn [k m] (if (nil? (get m k 0)) true false))","user":"56281eaee4b00e49c7cb47df"},{"code":"(fn\n  [x coll]\n  (and (contains? coll x)(= nil (x coll))))","problem":134,"user":"52ba447ee4b07a9af57922ce"},{"problem":134,"code":"(fn [k m]\n  (and (.containsKey m k) (= nil (k m)))\n  )","user":"558843dae4b059ccff29b1f3"},{"code":"(fn[k m] (and (contains? m k) (nil? (k m))))","problem":134,"user":"4eca7a87535d6d7199dd3705"},{"problem":134,"code":"(fn [k l] \n  (if (contains? l k)\n    (= (k l) nil)\n    false))","user":"57bfb321e4b05aa3c4741c83"},{"code":"(fn [key map] (if (= (get map key) nil) (contains? map key) false))","problem":134,"user":"4fc9985ee4b0ee37620e1846"},{"code":"#(and (contains? %2 %1) ( nil? (get %2 %1)))","problem":134,"user":"515ff4b9e4b0e2be8aa20bd9"},{"code":"#( and (contains? %2 %1) (= (get %2 %1) nil))","problem":134,"user":"5302ac7fe4b0d8b024fd3731"},{"code":"(fn nil-key [k m]\n  (cond (= nil (find m k)) false        ; key が存在しない場合\n        true (= nil (get-in m (vector k)))))","problem":134,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn [x m] (and (nil? (m x)) (contains? m x)))","problem":134,"user":"502d3912e4b0d96a44ab2030"},{"problem":134,"code":"(fn f [k m]\n  (if (contains? m k)\n    (nil? (k m))\n    false))","user":"51e24905e4b01e519814642e"},{"code":"(fn [x y](boolean (and (nil? (x y)) (seq (select-keys y [x])))))","problem":134,"user":"4fcf1755e4b03432b189f40c"},{"problem":134,"code":"(fn [keys maps]\n  (if (contains? maps keys)\n    (if (= nil (get maps keys)) true false)\n    false\n  )\n  )","user":"54d93f19e4b024c67c0cf747"},{"problem":134,"code":"#(if (contains? %2 %1)\n   \t(= (%1 %2) nil)\n   \tfalse)","user":"5adb4ffbe4b0837691e92bed"},{"problem":134,"code":"#(nil? (%2 % true))","user":"58840023e4b0f1effa3b768b"},{"problem":134,"code":"(fn [x y] (nil? (x y 0)))","user":"56669819e4b0e91d5f5c5674"},{"problem":134,"code":"(fn hoge [k m] (nil? (get m k true)))","user":"553c8638e4b09218d5f45017"},{"problem":134,"code":"(fn [k h]\n  (and (contains? h k) (nil? (k h))))","user":"543496e1e4b0b6b47310fcf2"},{"code":"#(and (contains? %2 %1)  (= nil (%2 %1) ))","problem":134,"user":"52628bb0e4b03e8d9a4a7089"},{"problem":134,"code":"(fn [k m]\n  (let [[k v] (find m k)]\n    (if (and (not (nil? k)) (nil? v)) true false)))","user":"56d8a63fe4b0ea9b8538f7e8"},{"problem":134,"code":"(fn [v m] (and (contains? m v) (nil? (get m v)) ) )","user":"4ee28280535d10e5ff6f536a"},{"code":"(fn [key coll] (and(nil? (key coll))(contains? coll key)))","problem":134,"user":"522b1993e4b0d34ee08e71b6"},{"problem":134,"code":"(fn ff [x xs] (if ( = nil (get xs x false)) true false))","user":"5776903ee4b0979f8965163b"},{"problem":134,"code":"(fn [k xs] \n  (and \n   (contains? xs k) \n   (nil? (get xs k))))","user":"5a08f951e4b01bb0ae8afdfd"},{"problem":134,"code":"#(if \n    (and \n     (= nil (%1 %2))\n     (contains? %2 %1)) true false)","user":"5b5785c7e4b02d533a91bd5b"},{"problem":134,"code":"#(if\n   (and \n    (nil? (%1 %2))\n \t(if (= %1 :a) true))\n\t\ttrue false)","user":"5647ba2ae4b0284900eef622"},{"problem":134,"code":"(fn [a b]\n  (and \n   (contains? b a) \n   (nil? (a b))\n   ))","user":"587c48cce4b01531a375eb16"},{"problem":134,"code":"#(let [res (find %2 %1)] (cond (nil? res) false (nil? (second res)) true :else false))","user":"560e9a2de4b05f002753df52"},{"code":"#(nil? \n  (%1 %2 1))","problem":134,"user":"5007c7c7e4b0b17c647f5226"},{"code":"(fn [x m]\n  (and (contains? m x)\n     (= nil (m x))))","problem":134,"user":"504e1fdde4b0f6ff3350c468"},{"problem":134,"code":"(fn [ky mp] (and (contains? mp ky) (nil? (ky mp))))\n\n;;#(= nil (get %2 %1 false))","user":"529e3258e4b04e0c58e87b8d"},{"problem":134,"code":"#(and (not(%2 %1)) (contains? %2 %1))","user":"57501c83e4b02ea11479926b"},{"problem":134,"code":"(fn[a m](if (nil? (m a \"kappa\")) true false))","user":"56f09bf4e4b04a395b9a047f"},{"code":"#(= (find %2 %) [% nil])","problem":134,"user":"502d4ea0e4b02fc10c6c6e46"},{"code":"(fn [m k]\n  (= (m k true) nil))","problem":134,"user":"52e41c22e4b09f7907dd144b"},{"problem":134,"code":"(fn [e map] (and (nil? (map e)) (contains? map e)))","user":"54b6c24be4b0ed20f4ff6e7c"},{"code":"#(and (contains? %2 %) (not (% %2)))","problem":134,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn nil-key? [k m]\n  (and (contains? m k) (nil? (get m k))))","problem":134,"user":"50414e3ce4b06d8231e4facd"},{"problem":134,"code":"#(nil? (get %2 % :a))","user":"4e3ff3a4535dc968683fc499"},{"code":"(fn [key set]\n  (and\n    (contains? set key)\n    (nil? (set key))))","problem":134,"user":"4f16dbf3535d64f603146450"},{"code":"(fn [k m] (let [e (find m k)] (or (and e (nil? (val e))) false)))","problem":134,"user":"5177f89ae4b0f89a8f53839a"},{"code":"#(if (and \n       (contains? %2 %)\n       (nil? (% %2)))\n     true false)","problem":134,"user":"4f137034535d64f603146430"},{"problem":134,"code":"(fn [a b] \n  (if (contains? b a)\n    (= (a b) nil)\n    false))","user":"5bbbce99e4b0a20761a23610"},{"problem":134,"code":"(fn [k xs]\n  (and (contains? xs k)  (nil? (get xs k))))","user":"57d9bca1e4b0bd073c202405"},{"code":"#(and (coll? (find %2 %)) (= nil (get %2 %)))","problem":134,"user":"4e894068535d4ef0aa30db97"},{"code":"(fn [k m] \n  (nil? (get m k \"nil\")))","problem":134,"user":"50573ed8e4b0012181721987"},{"problem":134,"code":"(fn  [x y] (and (nil? (get y  x)) (contains? y x)))","user":"57ac6c67e4b0b8559636fc87"},{"problem":134,"code":"(fn [x y] (= (get y (keyword x) false) nil))","user":"5aa10f82e4b0d174b936c83d"},{"code":"#(nil? (get %2 %1 false))","problem":134,"user":"4e58c019535d8a8b8723a297"},{"code":"(fn [key map] (= nil (get map key 0)))","problem":134,"user":"4f5430b6e4b0a7574ea717dc"},{"problem":134,"code":"(fn [k,x] (and (contains? x k) (nil? (k x))))","user":"4e6a5728535d8ccf87e9fecf"},{"code":"(fn [k d]\n  (and\n    (contains? d k)\n    (= (k d) nil)))","problem":134,"user":"531d0f29e4b08068f379edab"},{"code":"#(if (contains? %2 %1)\n     (nil? (%1 %2))\n      false)","problem":134,"user":"4dbe19fe535d020aff1edf59"},{"code":"(fn [key col] (and (contains? col key) (= nil (key col))))","problem":134,"user":"5033ed65e4b062bc5d7ae15a"},{"code":"#(= nil (%2 %1 1))","problem":134,"user":"50be9b4ae4b00fb48fed2ef6"},{"code":"#(nil? (%1 %2 :na))","problem":134,"user":"50e09313e4b061dbdced7233"},{"problem":134,"code":"#(nil? (%2 % *))","user":"4fa436dce4b081705acca19b"},{"code":"(fn [map key]\n  (and (contains? key map) (nil? (map key)))\n)","problem":134,"user":"4f03e486535dcb61093f6b78"},{"problem":134,"code":"(fn [k ma] (and (contains? ma k) (= nil (k ma)) ))","user":"541404c2e4b01498b1a719e7"},{"code":"#(if (contains? %2 %1)\r\n  \t    (= (%1 %2) nil) false)","problem":134,"user":"4e370a04535deb9a81d77f37"},{"problem":134,"code":"(fn hasKeyWithValueNil [key map] \n    (and\n     (contains? map key)\n     (= (key map) nil) \n     )\n    )","user":"521a6cdde4b0c4ef0be8300d"},{"code":"(fn solution [x y]\n(and\n (->> y (filter #(= (key %) x)) empty? not)\n (->> y (filter #(= (key %) x)) (every? #(= (val %) nil))))\n  )","problem":134,"user":"52e17e66e4b09f7907dd1423"},{"code":"(fn [x y] (and (contains? y x) (= nil (x y))))","problem":134,"user":"513facf5e4b00f13ea1bd892"},{"problem":134,"code":"(fn [x y] (nil? (get y x \"nil\")))","user":"555f0789e4b0a2eb076a39bf"},{"problem":134,"code":"(fn [k m] (nil? (get m k :n)))","user":"5b61e777e4b0c6492753e717"},{"problem":134,"code":"#(if-not (contains? %2 %) false (= (% %2) nil))","user":"5524fff0e4b0882d96d091c8"},{"problem":134,"code":"#(and (contains? %2 %1) (nil? (get %2 %)))","user":"58e2e11ce4b005f69f193ca0"},{"code":"#(= nil (%2 % 1))","problem":134,"user":"50a83315e4b054305ba5a830"},{"problem":134,"code":"(fn [k m] \n  (= nil (get m k :m)))","user":"5560f60ee4b0c656e3ff17c3"},{"code":"(fn [k,m] (and (boolean (find m k)) (nil? (get m k))))","problem":134,"user":"514992d2e4b0b64cbeae1848"},{"code":"(fn [x xm] (nil? (x xm true)))","problem":134,"user":"4dfd4ba8535d04ed9115e781"},{"problem":134,"code":"(fn [key map]\n   (if (and (contains? map key) (nil? (get map key)))\n     true\n     false))","user":"559fb147e4b0acc240e314ea"},{"problem":134,"code":"(fn [key map] (not (map key 0)))","user":"54cd53dae4b057c6fda3a29f"},{"code":"(fn [k m]\n  (if (= (find m k) nil) false (nil? (k m)))\n  )","problem":134,"user":"51ffa16ce4b0f1313d468a9d"},{"problem":134,"code":"(fn [k m] \n  (and (contains? m k) (nil? (k m)))\n  )","user":"5b985fe5e4b0c0b3ffbd4ab1"},{"problem":134,"code":"(fn [k m] (if (= nil (get m k false))\n             true\n             false))","user":"55e23d03e4b050e68259b42f"},{"code":"#(and (nil? (%1 %2)) (not= 0 (%1 %2 0)))","problem":134,"user":"4f0d093b535d0136e6c22313"},{"problem":134,"code":"(fn [key map]\n  (nil? (map key 0)))","user":"5af4446de4b0cc2b61a3bc93"},{"code":"#(not (%1 %2 0))","problem":134,"user":"4e7dd982535db169f9c796ee"},{"code":"(fn [key map] (nil? (get map key 999)))","problem":134,"user":"4e6cf2be535de274dd8d818a"},{"code":"#(= nil (if (contains? %2 %) (get %2 %) 0))","problem":134,"user":"5093ca51e4b097f48cc38585"},{"code":"(fn [key map]\n  (if (and (contains? map key) (= nil (key map)))\n           true\n           false))","problem":134,"user":"523089f8e4b0035e815da388"},{"problem":134,"code":"(fn [k m]\n  (= (get m k false) nil))","user":"55b28b57e4b01b9910ae296c"},{"problem":134,"code":"(fn [k m] \n  (and \n    (contains? m k) (nil? (get m k))\n   ))","user":"563c7f98e4b0bfe05bf11836"},{"code":"(fn [b a]\n  (let [s (find a b)]\n    (and\n      (= (count s) 2)\n      (= (last s) nil))))","problem":134,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn [k L] (= (contains? L k) (nil? (L k))))","problem":134,"user":"4f280b9ae4b0d6649770a011"},{"code":"(fn [k m]\n  (if (= (m k :missing) nil)\n      true\n      false))","problem":134,"user":"4eb9d8f8535dfed6da9c6d61"},{"code":"(fn keymap [sleutel rij]\n  (if (contains? rij sleutel) \n\n     (nil? (get rij sleutel)) ; <-\n     false))","problem":134,"user":"534eb269e4b084c2834f4aba"},{"code":"(fn [k m] (and (= (k m) nil) (contains? m k)))","problem":134,"user":"5216933be4b000d124d989cf"},{"code":"(fn [k m] (nil? (k m :default)))","problem":134,"user":"4ebe766d535dfed6da9c6d94"},{"problem":134,"code":"#(nil? (%2 %1 \"nil\"))","user":"57d7ca32e4b0bd073c2023df"},{"code":"(fn [k m] (let [l (m k false)] (and (nil? l) ((complement false?) l))))","problem":134,"user":"52b43468e4b0c58976d9ad1b"},{"problem":134,"code":"(fn [key m]\n    (let [val (get m key false)]\n        (and (not (false? val)) (nil? val))))","user":"54a8fdcee4b09f271ff37ca9"},{"code":"(fn [k m]\n  (and (contains? m k) (nil? (k m))))","problem":134,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":134,"code":"(fn isnil [keye l]\n  (if (and (contains? l keye) (nil? (keye l))) true false))","user":"5761724de4b0994c1922fb89"},{"code":"(fn [x vet] (and (= (vet x) nil) (> (count(filter #(= x %) (map key vet))) 0)))","problem":134,"user":"4eb8979b535dfed6da9c6d4a"},{"code":"(fn [x y] \n  ( and (.contains (.keySet y) x)\n    (= nil (.get y x)))\n  )","problem":134,"user":"530db182e4b08068f379ecad"},{"problem":134,"code":"#(if (nil? (get %2 %1 false)) true false)","user":"5a09f35fe4b0eab8c0448934"},{"problem":134,"code":"(fn sample [x y] (if (and (contains? y x) (= nil (x y)) \n                          ) true false\n                   )\n  )","user":"59228b00e4b026ae38521281"},{"problem":134,"code":"(fn contains-nil?\n  [k m]\n  (and (contains? m k) (nil? (m k))))","user":"5c222b7de4b07e362c230588"},{"code":"(fn [k m] (if (contains? m k) (nil? (get m k)) false))","problem":134,"user":"4ea09441535d7eef308072a7"},{"code":"(fn [x,y] (and (contains? y x) (nil?(get y x))))","problem":134,"user":"514cfa27e4b019235f6c057d"},{"problem":134,"code":"(fn [n,m] (if (contains? m n)\n            (nil? (m n))\n            false))","user":"5c7e2346e4b0d597f478cac3"},{"code":"(fn [x map]\n  (let [p (get map x)]\n    (if (and (= nil p) (contains? map x)) true false)))","problem":134,"user":"5030b820e4b05b7df5a0b849"},{"code":"#(cond (contains? %2 %1) (= nil (%1 %2)) true false)","problem":134,"user":"51df825de4b01188f062752b"},{"code":"(fn [k m]\n  (and\n    (< (count (dissoc m k)) (count m))\n    (nil? (k m))\n    )\n  )","problem":134,"user":"510b704ee4b078ea71921100"},{"problem":134,"code":"(fn [a b]\n  (if (contains? b a)\n    (nil? (get b a))\n    false\n    )\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"code":"#(->> %2 seq (some #{[% nil]}) not not)","problem":134,"user":"5281a445e4b0757a1b17143a"},{"code":";#(not (%2 % 1))\n#(not (% %2 true))","problem":134,"user":"50ebf779e4b04edc3377703e"},{"code":"(fn [keyx values]\n  (and (contains? values keyx) (= (keyx values) nil)\n       ))","problem":134,"user":"52be23dbe4b07a9af5792316"},{"problem":134,"code":"(fn [k h] (and (contains? h k) (nil? (get h k))))","user":"57c2d0c1e4b05aa3c4741cb8"},{"problem":134,"code":"(fn [i m] (if (and (= (last (find m i)) nil) (= (count (find m i)) 2)) true false))","user":"5e5f8a07e4b0fd0acd15867c"},{"problem":134,"code":"(fn [k vs]\n  (and (nil? (k vs)) (contains? vs k)))","user":"53f5666ee4b0db01ade6f9cf"},{"problem":134,"code":"(fn [k m] (= nil(get m k false)))","user":"506b0ee7e4b0a2a5463de381"},{"code":"#( if (and (contains? %2 %1) (= nil (get %2 %1) )) true false)","problem":134,"user":"51a865dfe4b08d8ec191b80f"},{"problem":134,"code":"(fn t [k m]\n  (if (contains? m k) \n    (= (k m) nil)\n    false))","user":"55b1c24ae4b0da326a65cf70"},{"code":"(fn [key map]\n    (and (contains? map key) (= (get map key) nil)))","problem":134,"user":"4f17aa97535d64f603146456"},{"problem":134,"code":"(fn val-is-nil [k m]\n  (and (contains? m k)\n       (= nil (k m))))","user":"59095df7e4b047aa04b1999b"},{"problem":134,"code":"#(= nil (get %2 %1 :no))","user":"60ab1536e4b00e9e6653c47e"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k :invalid)))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":134,"code":"(fn [a b]\n  (nil? (a b -1)))","user":"5c6cb3bfe4b0fca0c1622730"},{"problem":134,"code":"(fn [k m] (= (contains? m k) (= nil (k m))))","user":"550345fee4b086ebe8a79c6c"},{"problem":134,"code":"#(if (and (contains? %2 %1)(= (get %2 %1) nil)) true false)","user":"56ae9929e4b03c432f187361"},{"code":"(fn [k m] (if (seq (filter #(= % [k nil]) m)) true false))","problem":134,"user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn [k h] (= (get h k 1) nil))","problem":134,"user":"4f040cdc535dcb61093f6b96"},{"code":"#(and (not (nil? (find %2 %1))) (nil? (%2 %1)))","problem":134,"user":"4fbdcb87e4b081705acca30a"},{"problem":134,"code":"(fn [key map]\n  (and (nil? (get map key)) (contains? map key)))","user":"5272645de4b03e8d9a4a742c"},{"problem":134,"code":"#( and (= (%1 %2) nil) (true?(contains?  %2 %1 )))","user":"584953eee4b089d5ab817ece"},{"code":"(fn [k kv] (and (contains? kv k) (nil? (get kv k))))","problem":134,"user":"4fe8d862e4b0547ebccb2428"},{"problem":134,"code":"#(nil? (%2 %1 \"val\"))","user":"5863eda2e4b0f14aab7c8836"},{"problem":134,"code":"(fn has-nil? [k m] \n  (nil? (get m k :wtf))  )","user":"561814bae4b06b1bb2182a1a"},{"code":"(fn [key map] (= nil (get map key :n)))","problem":134,"user":"5362a936e4b0243289761e55"},{"problem":134,"code":"(fn nilkey [k m] (and (not (k m)) (contains? m k)))","user":"574986cae4b009280f9f2b9c"},{"problem":134,"code":"(fn [k m]\n  (if (= (get m k :none) nil) true false))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":134,"code":"(fn [k mp] (if (contains? mp k)\n             (= (mp k) nil)\n             false)\n             \n  )","user":"5e3933c5e4b01d43a70e8dcc"},{"problem":134,"code":"(fn [k m] (and (not (empty? (select-keys m [k]))) (nil? (k m))))","user":"58d6caf5e4b03c36ff7e5975"},{"code":"(fn [k dc] (nil? (get dc k \"?\")))","problem":134,"user":"500c0393e4b03d00572d2d85"},{"code":"(fn [k m]\n (and (contains? m k) (nil? (k m))))","problem":134,"user":"4f616892e4b0defedf855fbf"},{"problem":134,"code":"(fn [x vals] (and (contains? vals x) (nil? (get vals x))))","user":"58f49268e4b0438e51c2cec0"},{"code":"(fn __ [el m]\r\n  (.contains (into [] m) [el nil]))","problem":134,"user":"4fe9b372e4b0547ebccb246b"},{"problem":134,"code":"(fn[a b] (nil? (and (contains? b a) (get b a )) ) )","user":"55757e81e4b05c286339e063"},{"code":"(fn [x m] (= nil (x m :none)))","problem":134,"user":"4eb171d7535d7eef30807340"},{"problem":134,"code":"(fn [kw m]\n   (if (contains? m kw)\n      (nil? (kw m)) false))","user":"5e248c3fe4b05b4b01516153"},{"problem":134,"code":"#(nil? (get %2 %1 \"Key Not Found\"))","user":"5707e579e4b0b0fb43fd0694"},{"problem":134,"code":"(fn [k mp] (if (= 3 (get mp k 3)) false (if (= (get mp k 3) nil) true false)))","user":"54a634abe4b09f271ff37c84"},{"code":"(fn [k m]\n  (let [ks (keys m)\n        ret (some #{k} ks)]\n    (if ret\n      (nil? (m k))\n      false)))","problem":134,"user":"5374adc3e4b06d7f452d9e27"},{"problem":134,"code":"(fn [v m] (if (contains? m v) (nil? (v m)) false))","user":"54800885e4b0c51c1f4d7323"},{"code":"(fn\n  [k m]\n  (and (contains? m k) (nil? (k m))))","problem":134,"user":"50fc48dde4b0d10d794c19f6"},{"problem":134,"code":"(fn [sk sm]\n  (and (contains? sm sk) (nil? (sk sm)))\n  )","user":"53ac1992e4b047364c04445a"},{"problem":134,"code":"(fn f\n  [k coll]\n  (and (contains? coll k) (nil? (k coll))))","user":"5bfbb974e4b0bdcf453d15de"},{"problem":134,"code":"(fn [e m]\n  (and (nil? (get m e)) (contains? m e)))","user":"5e50012ae4b027a2e10ac0bd"},{"problem":134,"code":"(fn [k m ]\n\n  (and (=\n         (count ((fn [k m] (filter (comp #{k} first) m)) k m))\n         1\n         )\n\n       (= (k m) nil)\n       )\n\n  )","user":"58ef8f96e4b056aecfd47dc9"},{"problem":134,"code":"#(nil? (if (contains? %2 %1) (get %2 %1) false))","user":"5470b269e4b00cfc9eacc1ba"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k)\n  \t(if (= (get m k) nil) true false)\n  \tfalse))","user":"5659a77ce4b068f2fe63dbee"},{"code":"(fn [k m]\n  (nil? (if (contains? m k) (get m k) 0)))","problem":134,"user":"4f1887ef535d64f60314645b"},{"problem":134,"code":"#(if(contains? %2 %) (= (%2 %) nil) false)","user":"5900c3cbe4b0438e51c2d02b"},{"problem":134,"code":"(fn [k m]\n   (if (contains? m k)\n     (= (m k) nil)\n       false))","user":"5c34cb2ee4b0d62ef62d9f59"},{"problem":134,"code":"(fn [x m] (= [x nil] (find m x)))","user":"4ee8fc37535d93acb0a66888"},{"problem":134,"code":"#(and (contains? %2 %1) (not (%1 %2)) (= (%1 %2) nil))","user":"57f253a3e4b0511f1d294dea"},{"code":"(fn [k m] (if (and (contains? m k) (nil? (val (find m k)) )) \n              true \n              false\n))","problem":134,"user":"50e448bae4b0463d3207248d"},{"code":"(fn [key map] (nil? (map key \"key-not-found\")))","problem":134,"user":"4ec70f26535d6d7199dd36dd"},{"problem":134,"code":"(fn x [k m]\n  (nil? (m k false)))","user":"5ffd7cc0e4b074f607df65fa"},{"problem":134,"code":"(fn fn1 [x mp]\n    (= nil  (get mp x 'not-in))\n)","user":"55cde227e4b0e31453f64a22"},{"code":"(fn [x m] (if (contains? m x) (nil? (get m x)) false))","problem":134,"user":"51d381b5e4b099f3b6acde01"},{"code":"(fn [x y] (if (and (= (y x) nil) (find y x))\n            true\n            false\n            )\n  )","problem":134,"user":"4e2164ff535d04ed9115e815"},{"problem":134,"code":"#(nil? (% %2 \"not-found\"))","user":"551dfd81e4b030e6a24d00e0"},{"problem":134,"code":"(fn [k m]\n  (and (.contains (keys m) k) (= nil (k m))))","user":"5628f727e4b00e49c7cb47f5"},{"problem":134,"code":"(fn [key-name the-map] (and (contains? the-map key-name) (nil? (key-name the-map))))","user":"5bc02024e4b07a9b28b0fff7"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"missing\")))","user":"576000fce4b08062f99a4e8b"},{"code":"(fn [k m]\n  (nil? (get m k false))\n  )","problem":134,"user":"524fafb3e4b0541d1855b817"},{"problem":134,"code":"(fn [k m] (nil? (get m k :na)))","user":"58e66350e4b056aecfd47cb2"},{"code":"#(if (contains? %2 %1)(if (= nil (%2 %1)) true false) false)","problem":134,"user":"4ffb48aae4b0678c553fc3cc"},{"code":"(fn [ky mp] (if (contains? mp ky)\n              (if (nil? (get mp ky)) true false) false))","problem":134,"user":"4f9754d4e4b0dcca54ed6ce9"},{"problem":134,"code":"(fn f [x col]\n  (->> col\n       (filter #(= x (key %)))\n       (filter #(nil? (val %)))\n       count\n       (< 0)))","user":"575fbe58e4b08062f99a4e87"},{"code":"#(if (and (contains? %2 %1) (= nil (%1 %2))) true false)","problem":134,"user":"51f2b8f1e4b0210f90e74556"},{"problem":134,"code":"(fn [k m]\n          (if (= true (contains? m k))\n            (if (= nil (k m)) true false)\n            false))","user":"5d6e5b53e4b04d129b00f2c6"},{"code":"(fn [k, m] (= nil (k m 2)))","problem":134,"user":"5047f2b6e4b0ec70b3ef8d95"},{"code":"(fn [k, m]\n  (and (contains? m k) (nil? (k m)))\n)","problem":134,"user":"4edffe54535d10e5ff6f5347"},{"code":"#(not (%2 % -))","problem":134,"user":"4ebb78a2535dfed6da9c6d70"},{"problem":134,"code":"#(not(%2 % 1))","user":"5e66c144e4b0e171e1033683"},{"problem":134,"code":"(fn [key map]\n (nil? (get map key \"default\")))","user":"53a9793ae4b047364c044436"},{"problem":134,"code":"(fn [key mp] (and (contains? mp key) (nil? (get mp key))))","user":"55fcaccfe4b0f488688e0679"},{"code":"(fn [k m]\n  (let [tuple (find m k)]\n    (if (and tuple\n             (nil? (val tuple)))\n      true\n      false)))","problem":134,"user":"4fa3c137e4b081705acca193"},{"problem":134,"code":"#(if (= (find %2 %1) nil) false (= ((find %2 %1) 1) nil))","user":"56441e72e4b0018b46ad8c09"},{"code":"(fn [akey aseq] \n  (if (contains? aseq akey)\n    (nil? (aseq akey))\n    false\n   )\n)","problem":134,"user":"5135a74ae4b04ac1f358dd46"},{"code":"(let [in-map (fn [x m]\n  \t\t\t ; returns x if x is the map m and nil otherwise\n  \t\t\t ((set (keys m)) x))]\n\n(fn in-map-and-nil [x m]\n  (if (and (in-map x m)\n           (= (m x) nil))\n      true\n      false)))","problem":134,"user":"52957fa8e4b02ebb4ef75025"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? m k) (nil? (m k)))\n    true false))","user":"549ffeade4b0f3d1d8e70fb2"},{"code":"(fn [ks m] (if (get-in m [ks] true) false true))","problem":134,"user":"506cad7de4b0a302964c548e"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k)\n       (if (nil? (m k)) true false) \n       false))","user":"50c6052ce4b0c9dc10d15c56"},{"problem":134,"code":"(fn problem-134\n  [x, y]\n  (if (and (contains? y x) (= nil (y x))) true false))","user":"569ad037e4b0542e1f8d144f"},{"code":"(fn [k m]\n  (nil? (get m k 0)))","problem":134,"user":"4dd9d299535d2dad7130b5dd"},{"code":"(fn [k m] (= nil (get m k :not-found)))","problem":134,"user":"50d93c53e4b0fd36a4b89223"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (-> m k nil?)))","user":"560ae540e4b05f002753df0d"},{"problem":134,"code":"#(and \n  (contains? (set (keys %2)) %1) \n  (nil? (%1 %2)))","user":"5c13da47e4b01240ff5671a6"},{"problem":134,"code":"(fn [k, m] (= nil (get m k \"DNE\")))","user":"5739fa01e4b0cd1946bd1082"},{"code":"(fn[key amap]\n  (nil? (get amap key false)))","problem":134,"user":"5144e4c1e4b021a5ff8301f8"},{"problem":134,"code":"#(nil? (%1 %2 nil?))","user":"511e17a9e4b0c5b849dd36b0"},{"problem":134,"code":"(fn [x s]\n  (if (not (contains? s x))\n    false\n    (nil? (s x))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":134,"code":"#(and (contains? %2 %1) (= nil(%2 %1)))","user":"5422e975e4b01498b1a71ac9"},{"code":"(fn [k m] (nil? (get m k :missing)))","problem":134,"user":"4db21d14535d37964ddf999c"},{"code":"(fn [k m]\n  (if (contains? m k)\n      (if (nil? (m k))\n          true\n          false)\n      false))","problem":134,"user":"4f7fc9a1e4b033992c121bee"},{"code":"(fn [key map] (= nil (key map false)))","problem":134,"user":"506af7d8e4b0a2a5463de37d"},{"problem":134,"code":"(fn iff [k m] (and (contains? m k) (nil? (get m k))))","user":"5d03d734e4b0cc9c915881cd"},{"problem":134,"code":"(fn [key, array]\n  (and \n   (contains? array key)\n   (nil? (key array))))","user":"547e53cae4b0c51c1f4d7305"},{"problem":134,"code":"(fn [key-thing map-thing] \n  (and (contains? map-thing key-thing)\n       (nil? (map-thing key-thing))))","user":"540ef409e4b0addc1aec6723"},{"problem":134,"code":"(fn [k m](\n   if (contains? m k) (= (k m) nil)\n    false))","user":"557b4a74e4b05c286339e0ae"},{"code":"(fn [k m]\n  (and (contains? m k) (= nil (k m))))","problem":134,"user":"50052fd0e4b0678c553fc45d"},{"problem":134,"code":"(fn [k m]\n  (and \n   (contains? m k)\n   (nil? (k m))))","user":"56326e03e4b0bfe05bf117a4"},{"code":"(fn [mykey mydict] \n(\nand\n(if (= (get mydict mykey) nil)\n  true\n  false)\n (if (contains? mydict mykey)\n   true\n   false\n   )\n \n))","problem":134,"user":"52ecd34ee4b0705949c44457"},{"code":"(fn [k mp]\n  (and (contains? mp k) (nil? (k mp))))","problem":134,"user":"51195e77e4b055cfb310d499"},{"code":"(fn [k m] (nil? (get m k :lol)))","problem":134,"user":"4dcc024e535d5973398f928f"},{"problem":134,"code":"#(and( contains?  %2 %1) (nil?(get %2 %1)))","user":"52c911dde4b0c2d177d6213a"},{"problem":134,"code":"#(and (contains? %2 %1) \n      (not (%2 %1)))","user":"536166b7e4b0243289761e44"},{"problem":134,"code":"#(if \n    (contains? %2 %1) \n    (nil? (get %2 %1)) \n    false)","user":"58455b05e4b089d5ab817e65"},{"problem":134,"code":"(fn [the_key the_map]\n  (and (contains? the_map the_key) (nil? (get the_map the_key))))","user":"56c12aa2e4b0839206b9d682"},{"problem":134,"code":"(fn [x y]\n  (= (get y x false) nil))","user":"56ae749fe4b03c432f18735f"},{"problem":134,"code":"(fn [x, m] (= nil (get m x false)))","user":"551e3a3de4b030e6a24d00e6"},{"problem":134,"code":"(fn keymap [sleutel rij]\n  (if (contains? rij sleutel) \n     (nil? (get rij sleutel))\n    false))","user":"56940617e4b0dcc4269f410b"},{"problem":134,"code":"(fn [k m]\n  (and \n   (nil? (k m))\n   (contains? m k)))","user":"56749133e4b05957ce8c613e"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (nil? (k m))))","user":"51d64fe3e4b0a9b6ebce9407"},{"problem":134,"code":"(fn [key m]\n  (and\n    (contains? m key)\n    (nil? (key m))))","user":"53ca41dae4b00fb29b2212c8"},{"code":"#(nil? (%2 %1 :nope))","problem":134,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"code":"(fn [k m] (nil? (get m k false)))","problem":134,"user":"4ebc0717535dfed6da9c6d7b"},{"code":"(fn [k s]\n  (if (contains? s k)\n    (not (s k))\n    false))","problem":134,"user":"50d4909ce4b09cc622d65a6c"},{"code":"(fn value_nil [k m] (nil? (m k 0)))","problem":134,"user":"53901605e4b0b51d73faae95"},{"problem":134,"code":"(fn [k s]\n    (and (contains? s k) (nil? (k s))))","user":"5d887d27e4b0915913b1d3a8"},{"problem":134,"code":"(fn checker\n  [k m]\n  (if (= nil (find m k))\n    false\n    (if (= nil (get (find m k) 1)) true false)\n  )\n)","user":"55a24698e4b0acc240e31523"},{"problem":134,"code":"(fn f [e l] \n  ( if \n    (contains? l e) \n    (nil? (get l e)) \n    false \n   )\n )","user":"5ee4b2e6e4b029a2061bbe90"},{"code":"(fn checker [x, y]\n\t(if (and (= (get y x) nil) (contains? y x))\n    true  \n    false\n    )\n)","problem":134,"user":"503574d4e4b0ed9c821488fb"},{"problem":134,"code":"(fn [k m] \n  (if (and (contains? m k) (= (k m) nil))\n    true\n    false))","user":"5d10b8f2e4b04b4faecf4446"},{"problem":134,"code":"(fn \n  [k m]\n  (nil? (get m k -1)))","user":"59f78b49e4b0ca45a743a30e"},{"code":"(fn [k m] (and (nil? (m k)) (contains? m k)) )","problem":134,"user":"5224a46ce4b01819a2de42e5"},{"code":"(fn [key items]\n  (= nil (key items false)))","problem":134,"user":"50ab38a8e4b0f65d68208507"},{"code":"(fn [k m] (if (= (get m k \"not\") nil) true false))","problem":134,"user":"4fb650e6e4b081705acca2c5"},{"problem":134,"code":"(fn [key map] \n  (cond \n    (= (map key -1) nil) true\n    :else false))","user":"5bc352abe4b07a9b28b10041"},{"code":"(fn [m k] (and (contains? k m) (nil? (m k))))","problem":134,"user":"5374cbf4e4b06d7f452d9e29"},{"problem":134,"code":"(fn [key map]\n  (not (get map key true)))","user":"56d30497e4b0ea9b8538f7a8"},{"problem":134,"code":"(fn [k m] (if (contains? m k) \n             (nil? (k m))\n             false))","user":"56ca6141e4b0ea9b8538f71a"},{"problem":134,"code":"(fn [a b] ( if (contains? b a) (nil? (a b)) false))","user":"54edfebbe4b024c67c0cf869"},{"problem":134,"code":"(fn [key mp]\n  \n  (nil? (get mp key \"hi\"))\n  )","user":"56684356e4b04acd4f672de4"},{"problem":134,"code":"(fn [ k,m] (if (contains? m k)\n             (nil? (m k))\n             false))","user":"588f7ef8e4b00487982d51ac"},{"code":"(fn _ [k m] (nil? (get m k false)))","problem":134,"user":"5029f263e4b023940c84aa45"},{"problem":134,"code":"(fn [x y] (if (= nil (x y false)) true false))","user":"54d100abe4b0e8a36923e5d8"},{"code":"(fn [k m] (let [v (get m k :not-found)] (if (= v :not-found) false (not v))))","problem":134,"user":"517d755ce4b0f5e87c18f263"},{"code":"#(if ( and (contains? %2 %1) (= nil (%1 %2))) true false)","problem":134,"user":"527c036ee4b03e8d9a4a75a5"},{"problem":134,"code":"(fn [elem mapp] (if (contains? mapp elem) (= (mapp elem) nil) false))","user":"5ddbd4b3e4b0948ae9d9adb5"},{"problem":134,"code":"(fn foo [e m]\n    (cond\n        (contains? m e) (nil? (m e))\n    :else false))","user":"5762fcfde4b0994c1922fbb3"},{"code":"(fn [key coll]\n  (and \n    (contains? coll key)\n    (nil? (key coll))))","problem":134,"user":"4f60ed88e4b0defedf855fb2"},{"code":"(fn[x y](and (contains? y x) (= (get y x) nil)))","problem":134,"user":"52ca720fe4b071a8d36bd3e2"},{"code":"(fn [k mp] (let [kk (get mp k :nf)] (cond (= kk :nf) false (not= kk nil) false :else true)))","problem":134,"user":"5319a7a7e4b08068f379ed83"},{"code":"(fn [key map]\n  (if (contains? map key)\n    (if (nil? (key map))\n      true\n      false)\n    false))","problem":134,"user":"529264f2e4b0239c8a67af2c"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k) (= (m k) nil) false))","user":"54ab6773e4b09f271ff37cc8"},{"problem":134,"code":"(fn [key, map]\n  (nil? (key map key)))","user":"53571732e4b04ce2eb3ed275"},{"code":"#(= (if (find %2 %) (% %2) \"false\") nil)","problem":134,"user":"4fa9da14e4b081705acca1e7"},{"problem":134,"code":"(fn [x, y] (and (contains? y x) (not (x y))))","user":"55483088e4b0a04f79299556"},{"problem":134,"code":"(fn\n  [k m]\n  (and \n   (contains? m k)\n   (nil? (k m))))","user":"578df8fee4b0ebec4cfb7574"},{"problem":134,"code":"(fn [k m] \n  (let [x (select-keys m [k])]\n    (boolean\n      (and\n        (not (empty? x))\n        (not (k x))))))","user":"58852909e4b0f1effa3b76af"},{"problem":134,"code":"(fn [k m]\n  (and\n  (contains? (set (keys m)) k)\n  (nil? (k m))\n  ))","user":"58da426de4b0a4d5acaab654"},{"code":"(fn [a b] \n  (and \n    (contains? b a)\n    (= (b a) nil)))","problem":134,"user":"5054c853e4b0b1b9d1860eb3"},{"code":"(fn [v coll] (if (and (contains? coll v) (= nil (coll v)))\n              true\n              false))","problem":134,"user":"4e6cf521535de274dd8d818b"},{"problem":134,"code":"(fn nk [k m] \n  (and (contains? m k)\n       (nil? (k m))))","user":"5619a4d0e4b053970a773afd"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k) \n    (if (= nil (get m k))\n      true\n      false)\n    false))","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":134,"code":"(fn [k m]\n  (and (contains? (set (keys m)) k)\n       (nil? (k m))))","user":"524379a4e4b076204b44fac0"},{"problem":134,"code":"(fn [key map]\n  (if (not (contains? map key))\n    false\n    (nil? (get map key))))","user":"5b338b23e4b025bcb146f33d"},{"code":"(fn [k hs] \n  (and (contains? hs k) (nil? (get hs k))))","problem":134,"user":"51662183e4b05e5ef6a5e807"},{"code":"(fn [x y](if(contains? y x )\n  (nil? (x y))\n  false))","problem":134,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"code":"(fn [a b]\n  (and (= (a b) nil) (contains? b a)))","problem":134,"user":"50335235e4b0c6c1199c710b"},{"problem":134,"code":"#(= (%2 %1 \"missing\") nil)","user":"5e3121e5e4b05b4b01516221"},{"code":"#(if (contains? %2 %1)\n  (nil? (%2 %1))\n  false)","problem":134,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":134,"code":"(fn [key map] (if (nil? (key map))\n                (do (contains? map key))\n                false))","user":"5ca1f8a1e4b048ec896c5b8c"},{"code":"(fn [k m]\n  (let [match (find m k)]\n    (if (and (not (nil? match)) (nil? (last match)))\n      true\n      false\n      )))","problem":134,"user":"4fa27e18e4b0dcca54ed6d68"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (nil? (k m)\n                ))\n  )","user":"5b4b4052e4b02d533a91bc9a"},{"problem":134,"code":"(fn [in-key in-map] (and (contains? in-map in-key) (nil? (in-key in-map))))","user":"57d9a1b0e4b0bd073c202403"},{"code":"(fn key-has-nil-val? [e coll] (= (\r\n(fn pos [e coll]\r\n  (let [cmp (if (map? coll) #(= (second %1) %2) #(= %1 %2))]\r\n    (loop [s coll idx 0]\r\n      (when (seq s)\r\n      (if (cmp (first s) e)\r\n        (if (map? coll) (first (first s)) idx)\r\n      (recur (next s) (inc idx)))))))\r\n nil coll) e))","problem":134,"user":"4e8de3a2535d65386fec213d"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k 'missing)))","user":"60036736e4b074f607df663b"},{"code":"(fn [k, m] (if (and (nil? (k m)) (contains? m k)) true false))","problem":134,"user":"5149f383e4b0829bd132edb2"},{"code":"(fn nil-key? [k hmap] (and \n                       (contains? hmap k) \n                       (nil? (hmap k))\n                       ))","problem":134,"user":"51e38568e4b0c611d6113e43"},{"problem":134,"code":"(fn [k m] (let [entry (m k -1)] (and (not (= entry -1)) (not entry))))","user":"5f5aee4fe4b0a0bc16850aaa"},{"problem":134,"code":"(fn [key hash] (nil? (key hash 10)))","user":"564e73f2e4b0284900eef69c"},{"problem":134,"code":"(fn [keyy, mapp]\n  (if (nil? (get mapp keyy false)) true false))","user":"59971e2de4b07157cc8daacc"},{"code":"(fn [k m]\n  (and  (contains? m k) \n          (= nil (k m))))","problem":134,"user":"51b86a0fe4b09e0e347b2e78"},{"code":"(fn[k coll] (and (contains? coll k) (= nil (k coll))))","problem":134,"user":"53806e5be4b06839e8705ec1"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (if (= (get m k) nil) true false)\n    false))","problem":134,"user":"523bc0e6e4b07becd5be21f9"},{"problem":134,"code":"(fn [x y] (if (and (contains? y x) (= (get y x) nil)) true false ))","user":"567f034be4b0feffd0d18eba"},{"code":"(fn [a b] \n  (if (contains? b a) (nil? (b a))false))","problem":134,"user":"4fb6db08e4b081705acca2cc"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (= nil (%2 %1))\n   false)","user":"56b18445e4b0982f16b37dee"},{"problem":134,"code":"(fn [k m]\n    (and\n      (contains? m k)\n      (nil? (get m k))))","user":"51c2fc7de4b0d204dbe2ca2e"},{"problem":134,"code":"(fn has-nil-key [k m]\n  (and (contains? m k) (nil? (m k))))","user":"557bcce4e4b05c286339e0b9"},{"code":"(fn [x y] (= nil (get y x \"m\")))","problem":134,"user":"4fae0319e4b081705acca244"},{"problem":134,"code":"#(nil? (get %2 %1 :silly-rabbit))","user":"57b7de74e4b0fbc9809a27d4"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= nil (k m))\n  \tfalse))","user":"5d84fccae4b0915913b1d390"},{"code":"(fn [k m]\n  (if (and (contains? m k) (nil? (m k))) true false))","problem":134,"user":"5166e80de4b060c690c1f4c5"},{"code":"(fn val-is-nil? [key coll]\n  (if (nil? (get coll key (gensym)))\n    true\n    false))","problem":134,"user":"4ff355a1e4b0678c553fc34d"},{"problem":134,"code":"#(and (contains? %2 %1) (nil? (%2 %1)))\n\n;; _caterpillar's solution is pretty clever:\n;; #(not (%2 %1 true))","user":"5fb68f09e4b08cb800c85b58"},{"problem":134,"code":"(fn [k m]\n  (let [b (k m true)]\n    (if (nil? b)\n      true\n      false)))","user":"58bd84d2e4b0888cdc949d31"},{"problem":134,"code":"(fn [a b](and (contains? b a) (nil? (b a))))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":134,"code":"(fn check-map-nil [key map] (\n  if (and (nil? (key map)) (contains? map key))\n  true\n  false\n  ))","user":"5a99d28ee4b0d174b936c7b3"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (= nil (get m k))))","user":"552e92d3e4b076ab5578f7f2"},{"problem":134,"code":"(fn [k coll] (and (contains? coll k) (= nil (k coll))))","user":"53b7fbbde4b047364c0444d6"},{"code":"(fn [k,m]\n  (let [v (m k)\n        containsk (contains? m k)]\n    (if containsk\n        (if (= v nil)\n          true\n          false\n        )\n        false)))","problem":134,"user":"509b152be4b0412cdea6eb1e"},{"code":"#(not (%1 %2 \"missing\"))","problem":134,"user":"52d2b85ce4b099d49816f0af"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)\n    (if (= nil (x y))\n      true\n      false)\n    false))","user":"4e80d1c8535db62dc21a62b6"},{"problem":134,"code":"(fn [k m] \n  (nil? (get m k \"nothing\"))\n)","user":"6024544be4b0d5df2af2221f"},{"problem":134,"code":"(fn\n  [key dict]\n  (->> (dict key  true) (not))\n  )","user":"5a71c89ee4b0512ff01cda93"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? m k) (= nil (m k)))\n    true\n    false\n    )\n  )","user":"5f77c32de4b02876ed9fd0bd"},{"problem":134,"code":"(fn [k m] (if(get m k true) false true))","user":"53053be9e4b0d8b024fd375b"},{"code":"#(if (and (contains? %2 %1) (nil?(get %2 %1)))\n   true\n   false)","problem":134,"user":"53010e8ee4b0d8b024fd3716"},{"problem":134,"code":"(fn [k m]\n   (= k (get  (clojure.set/map-invert m) nil)))","user":"56ede653e4b04a395b9a0449"},{"problem":134,"code":"(fn [k m]\n   (let [entity (find m k)]\n     (if entity\n       (nil? (second entity))\n       false)))","user":"542b764ae4b0dad94371f28d"},{"code":"(fn has-nil-key [key m]\n  (and (contains? m key) (nil? (get m key))))","problem":134,"user":"4fb57e06e4b081705acca2bf"},{"code":"(fn [x col] (and (contains? col x) (nil? (x col))))","problem":134,"user":"52897300e4b0239c8a67ae65"},{"problem":134,"code":"#(and \n  (nil? (%1 %2)) \n  (contains? %2 %1))","user":"5665ef78e4b0e91d5f5c5664"},{"problem":134,"code":"(fn[x,y](and (contains? y x ) (= ( x y) nil)))","user":"53ad2b98e4b047364c044463"},{"code":"(fn [key map]\n  (nil? (get map key true)))","problem":134,"user":"4f039c67535dcb61093f6b3a"},{"code":"(fn[x,y](= :a x))","problem":134,"user":"527d0bb7e4b0757a1b17137b"},{"problem":134,"code":"(fn\n  [key1 map1]\n  (if (contains? map1 key1) (nil? (map1 key1)) false)\n  )","user":"57f13aa0e4b0bfb2137f5c06"},{"problem":134,"code":"#( if(contains? %2 %1) ( nil? (get  %2 %1)) false)","user":"57016724e4b08d47c97781d6"},{"problem":134,"code":"(fn [sym mp]  (and (contains? mp sym) (nil? (sym mp))))","user":"56b6a50ae4b0982f16b37e3c"},{"code":"(fn [x h] (nil? (get h x false)))","problem":134,"user":"4ea5b810535d7eef308072d7"},{"problem":134,"code":"(fn [k map]\n    (if (contains? map k)\n      (nil? (get map k))\n      false))","user":"563a79e5e4b0bfe05bf117fe"},{"code":"(fn [key map] ( nil? (get map key false)))","problem":134,"user":"52d24f60e4b099d49816f0a8"},{"problem":134,"code":"(fn [k m] \n  (let [v (get m k :key-not-found)]\n    (nil? v)))","user":"5dcbe0dbe4b02b31cc3da3be"},{"code":"#(if (nil? (find %2 %1)) false (nil? (%2 %1)))","problem":134,"user":"4eddfb5c535d10e5ff6f532f"},{"code":"#(if (contains? %2 %1) \n    (nil? (%1 %2)) \n    false)","problem":134,"user":"52b36925e4b0c58976d9ad0b"},{"code":"(fn [k coll]\n  (reduce (fn [acc [ck cv]]\n            (or acc (and (= ck k)\n                         (= cv nil))))\n          false (seq coll)))","problem":134,"user":"516199bbe4b009fba0926e36"},{"problem":134,"code":"(fn [thing things] (= (get things thing \"missing\") nil))","user":"572c1f65e4b0cd1946bd0f4a"},{"code":"(fn [key foo] (if (and (contains? foo key) (= (key foo) nil)) true false))","problem":134,"user":"4f83ae07e4b033992c121c21"},{"problem":134,"code":"(fn [x s] (and (contains? s x) (nil? (get s x))))","user":"57d79a81e4b0bd073c2023dc"},{"code":"#(let [entry (find %2 %1)]\n  (if (nil? entry)\n    false\n    (nil? (val entry))))","problem":134,"user":"4faa8479e4b081705acca1f7"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (if (nil? (k m)) true false) false))","user":"55e6809ee4b050e68259b48a"},{"problem":134,"code":"(fn is-key-null? [k s]\n  (and (contains? s k) (nil? (k s))))","user":"53f733f4e4b0de5c4184855a"},{"problem":134,"code":"#(nil? (get %2 %1 :false))","user":"4ec66e84535d6d7199dd36cd"},{"problem":134,"code":"(fn [k m] \n   (false?\n    (or (k m)\n         (not (some #{k} (keys m)) ))))","user":"4f4e78fee4b03ad3f0c10cc8"},{"code":"(fn [k  m]\n  (if (contains? m k)\n    (nil? (.get m k))\n    false))","problem":134,"user":"50a69e8ce4b0aa96157e2626"},{"problem":134,"code":"(fn \n  [a b]\n  (if (contains? b a)\n    (if (nil? (a b))\n      true\n      false)\n    false))","user":"59636cc2e4b066ee0a44b0c7"},{"problem":134,"code":"(fn [k,v] (and (contains? v k) (= (k v) nil)))","user":"5fb033dbe4b08cb800c85b13"},{"code":"(fn [k m]\n  (let [v (find m k)]\n    (if (and v (= nil (second v)))\n      true\n      false)))","problem":134,"user":"515a6151e4b0394f658fe241"},{"code":"(fn [key map]\n  (nil? (get map key ())))","problem":134,"user":"50bd13dee4b0594b91591c65"},{"code":"#(nil? (%2 %1 :absent))","problem":134,"user":"5012da69e4b0c8732600222d"},{"problem":134,"code":"(fn[e l] (and(contains? l e)(nil? (e l))))","user":"595e20e2e4b066ee0a44b037"},{"problem":134,"code":"(fn [k m]\n  (and \n   (contains? m k)\n   (nil? (get m k))))","user":"5bd1364de4b0e9689409ee4b"},{"code":"#(= (contains? %2 %1) (= (%1 %2) nil))","problem":134,"user":"4fc52f64e4b081705acca387"},{"problem":134,"code":"#(= nil (%2 %1 \"hi\"))","user":"5945279ce4b07ddc2dafad6c"},{"code":"(fn [x, ys] (not (or (nil? (find ys x)) (x ys))))","problem":134,"user":"5098df85e4b0cae2931060a3"},{"problem":134,"code":"(fn [kljuc mapa]\n  (if (and (contains? mapa kljuc) (= (kljuc mapa) nil))\n           true\n           false))","user":"5a9482b7e4b0d174b936c737"},{"code":"(fn nilval [k valmap]\n(\n  if (nil? (find valmap k))\n  false\n  (nil? (get valmap k))\n))","problem":134,"user":"4f84400de4b033992c121c2e"},{"code":"(fn [key coll] (and (contains? coll key) (nil? (get coll key) )))","problem":134,"user":"505d70e8e4b0e6aca564be09"},{"problem":134,"code":"(fn [x y] (if (contains? y x) \n           (if (= (y x) nil) true false)\n           false\n          )\n  )","user":"548018d3e4b0c51c1f4d7327"},{"code":"(fn [key coll]\n        (and\n          (contains? coll key)\n          (nil? (key coll)))\n        )","problem":134,"user":"536827f1e4b0243289761e8a"},{"code":"#(= (get %2 %1 1) nil)","problem":134,"user":"4f0f9df7535d0136e6c22342"},{"problem":134,"code":"(fn [key dict] (and (contains? dict key) (nil? (dict key))))","user":"551c02fbe4b07993ea3788d8"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k) \n    (= (k m) nil)\n    false))","user":"604b1941e4b0a426fc8b43d3"},{"problem":134,"code":"#(and (contains? %2 %1 )(= nil (%1 %2)))","user":"57b8f784e4b0fbc9809a27ea"},{"problem":134,"code":"#(nil? (%2 %1 :na))","user":"54edc818e4b024c67c0cf865"},{"code":"#(if (and (% (set (keys %2))) (not (%2 %))) true false)","problem":134,"user":"4e836a06535db62dc21a62d5"},{"code":"#(not (%1 %2 1))","problem":134,"user":"4e5fda32535d8ccf87e9fe4e"},{"code":"(fn [k h] (and (contains? h k) (nil? (h k))))","problem":134,"user":"50254dace4b0b0b8afb15aa6"},{"code":"(fn mapkey [k m]\n  (and (contains? m k) (nil? (m k))))","problem":134,"user":"4f98b69ae4b0dcca54ed6cf4"},{"code":"(fn [k m] (if (contains? m k)\n            \t(nil? (m k))\n          false))","problem":134,"user":"4dcc2435535d5973398f9290"},{"code":"(fn key_is_nil\n  [a_key a_map]\n  (if (contains? a_map a_key)\n    (nil? (get a_map a_key))\n    false)\n  )","problem":134,"user":"528ba6a2e4b0239c8a67aea4"},{"problem":134,"code":"(fn [key m]\n\t(and\n\t\t(contains? m key)\n\t   \t(nil? (key m))))","user":"57343747e4b0cd1946bd1006"},{"problem":134,"code":"(fn [key map]\n  (and (contains? map key) (nil? (key map)))\n)","user":"5e09fd26e4b099d064962f60"},{"problem":134,"code":"(fn \n [key map]\n (and (contains? map key) (nil? (key map))))","user":"55c5bdffe4b0e31453f649b6"},{"problem":134,"code":"(fn [k coll]\n  (and\n\t  (contains? coll k)\n\t  (nil? (coll k))))","user":"58e13b49e4b005f69f193c77"},{"problem":134,"code":"(fn [x coll] (nil? (x coll :not-nil)))","user":"541096bde4b01498b1a719b2"},{"problem":134,"code":"(fn is-nil [k mp] (and (contains? mp k) (nil? (get mp k))))","user":"590bd0fee4b047aa04b199e3"},{"problem":134,"code":"(fn [k mp]\n  (if (and (nil? (mp k)) (not= (get mp k :nil) :nil))\n    true\n    false))","user":"5c62979fe4b0fca0c162264c"},{"problem":134,"code":"(fn [key map] (nil? (key map true)))","user":"550da0c7e4b06e50f9beb15e"},{"problem":134,"code":"(fn myfun [k, m]\n        (if-let [e (find m k)]\n          (nil? (val e))\n          false))","user":"5666500ee4b0e91d5f5c566d"},{"problem":134,"code":"#(and (contains? %2 %1)\n      (not (%1 %2)))","user":"53a77540e4b047364c04441a"},{"code":"(fn nilkey [k m]\n  (let [v (get m k [[]])]\n    (if (= nil v)\n      true\n      false)))","problem":134,"user":"4f07bc41535dcb61093f6c2c"},{"problem":134,"code":"#(= (= nil (get %2 %1)) (contains? %2 %1))","user":"59a06dbce4b0871e7608b834"},{"problem":134,"code":"(fn [key map]\n  (cond (not (contains? map key))\n    false\n    :else\n    (cond (nil? (map key))\n          true\n          :else\n          false)))","user":"55a152fce4b0acc240e31510"},{"code":"(fn [x y] (if (contains? y x) (cond (nil? (x y)) true (not= nil (x y)) false) false))","problem":134,"user":"508fabf9e4b0ea685a20f769"},{"code":"(fn [k m] (not (k m true)))","problem":134,"user":"52aa16d1e4b0c58976d9ac5a"},{"problem":134,"code":"#(and ( = (%2 %1) nil) (contains? %2 %1))","user":"5791eb67e4b030fa88156d8d"},{"code":"#(nil? (get %2 % true))","problem":134,"user":"4fa340b4e4b081705acca18c"},{"problem":134,"code":"(fn nil-val? [k m]\n  (and (contains? m k) (nil? (m k))))","user":"53a899e0e4b047364c04442b"},{"code":"(fn [k s] (and (contains? s k) (nil? (s k))))","problem":134,"user":"500933a6e4b046cdb195e074"},{"code":"(fn [k ms] (and (contains? ms k) (nil? (ms k))))","problem":134,"user":"4f724e56e4b07046d9f4f027"},{"code":"(fn [dict-key dict]\r\n  (let [has-key (contains? dict dict-key)\r\n        is-nil  (nil? (dict-key dict))]\r\n        \r\n    (and has-key is-nil)))","problem":134,"user":"4e2f9e71535deb9a81d77f11"},{"problem":134,"code":"#(nil? (%1 %2 :notfound))\n\n;;#(and (contains? %2 %1) (nil? (%1 %2)))","user":"57f6e666e4b0d3187e9008f2"},{"problem":134,"code":"(fn [key map] \n    (and\n     (= (get map key) nil) \n     (contains? map key)))","user":"589f37e0e4b02bd94d917e79"},{"problem":134,"code":"(fn [key mp] (if (and (contains? mp key) (nil? (key mp))) true false))","user":"5006c169e4b0678c553fc48d"},{"code":"(fn [k m]\n  (if (and\n        (nil? (k m))\n        (contains? m k))\n    true\n    false))","problem":134,"user":"4f128865535d64f603146428"},{"code":"(fn [k m] (nil? (get m k 'whatever)))","problem":134,"user":"4f047902535dcb61093f6bcc"},{"code":"#(and (not (nil? (find %2 %1))) (nil? (%1 %2)))","problem":134,"user":"4ea67906535d7eef308072e4"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x) \n    (= (y x) nil)\n    false))","user":"56620138e4b068f2fe63dc71"},{"problem":134,"code":"(fn [key map] \n               (if (contains? map key)\n                 (= (key map) nil)\n                   false)\n               )","user":"5c55e86fe4b0fb8c5ffd9a29"},{"problem":134,"code":"(fn [e coll] (and (contains? coll e) (nil? (e coll))))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (= (m k) nil)\n    false))","problem":134,"user":"50a173e4e4b08df8156e9e68"},{"problem":134,"code":"(fn [key map]\n          (if (and (contains? map key) (= (key map) nil))\n            true false))","user":"4f868d88e4b033992c121c52"},{"problem":134,"code":"(fn [key map] (if (contains? map key) (nil? (get map key)) false ))","user":"55dda79ce4b050e68259b3cb"},{"code":"(fn [key map] (if (= nil (get map key false)) true false))","problem":134,"user":"52adeb17e4b0c58976d9ac9c"},{"code":"(fn [x, y] \n  (if (contains? y x)\n   (if (= (get y x) nil)  true false)\n    false))","problem":134,"user":"50054b5ce4b0678c553fc45f"},{"code":"(fn [k m]\n  (and\n    (contains? m k)\n    (= (k m) nil)))","problem":134,"user":"4f849f76e4b033992c121c36"},{"problem":134,"code":"(fn [k m] \n  (if (find m k)\n    (= nil (get m k))\n    false\n    )\n  )","user":"53cd66dee4b00fb29b2212e2"},{"code":"(fn [ky mp] (and (contains? mp ky) (= nil (mp ky))))","problem":134,"user":"5145832be4b0e8879607340a"},{"problem":134,"code":"(fn [k m] \n  \n  (if (and (contains? m k) (nil? (k m))) ; predicate end\n    true\n    false\n   ) ; if end\n  \n  ) ; fn end","user":"5ff676a9e4b06df49cee1497"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (= nil (k m))\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"problem":134,"code":"(fn [k m] (and (contains? m k)\n           (nil? (k m))))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":134,"code":"(fn in-map [k m]\n  (if (contains? m k)\n    (nil? (get m k))\n    false))","user":"5c7d5a0ce4b0d597f478caab"},{"code":"(fn [k,m] \n   (and\n       (contains? m k)\n       (= nil (m k))\n    )\n  )","problem":134,"user":"531cd41ee4b08068f379eda9"},{"problem":134,"code":"(fn [k m]\n  \n  (and (contains? m k)\n       (nil? (get m k))\n       )\n  \n  \n  \n  )","user":"54c779bee4b045293a27f63b"},{"problem":134,"code":"(fn [keyy mapp] (and (contains? mapp keyy) (= (mapp keyy) nil)))","user":"57db2369e4b0bd073c20241f"},{"problem":134,"code":"#(= nil (%1 %2 \"missing\"))","user":"560d4994e4b05f002753df3c"},{"code":"(fn [k map]\n  (let [entry (find map k)]\n    (if entry\n      (= (get entry 1) nil)\n      false)))","problem":134,"user":"4f050dec535dcb61093f6bef"},{"problem":134,"code":"(fn [key_ mp]\n   (if (= 0 (get mp key_ 0))\n     false\n     (= (get mp key_) nil) ) )","user":"5795acb5e4b0e215f87e8486"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k :not-found))\n  )","user":"5708e8f6e4b0b0fb43fd06a4"},{"problem":134,"code":"(fn [x l] (and (= (get l x false) nil)))","user":"53f4c3d6e4b0db01ade6f9c5"},{"problem":134,"code":"(fn [k m]\n  (if-not (contains? m k)\n    false\n  \t(= (k m) nil)))","user":"59a6f1c7e4b066c664927d89"},{"code":"(fn [x m] (and (contains? m x) (nil? (x m))))","problem":134,"user":"4ec75077535d6d7199dd36e0"},{"code":"(fn tr [a b] ( and (nil? (b a)) (contains? b a) ))","problem":134,"user":"522afdeee4b0d34ee08e71b2"},{"problem":134,"code":"#(if (and (some (partial = %1) (keys %2)) (= (%1 %2) nil)) true false)","user":"542c2de0e4b0dad94371f29f"},{"problem":134,"code":"(fn [k mp] (if (contains? mp k)\n                        (if (get mp k) false true) false  ))","user":"5afc115de4b0cc2b61a3bcff"},{"problem":134,"code":"#(and (nil? (get %2 %1 )), (contains?  %2 %1))","user":"546b833ce4b00cfc9eacc16b"},{"code":"(fn nilkey [k m] \n  (true? \n    (and \n      (= k (k (set (keys m)))) \n      (= (m k) nil)\n    )   \n  )\n)","problem":134,"user":"4e9de526535dbda64a6f6b8e"},{"code":"#(nil? (get %2 %1 false) )","problem":134,"user":"4f8058d1e4b033992c121bf1"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= nil (get m k))\n       false))","user":"5ccfeb57e4b0ccb0619628cc"},{"code":"(fn [k coll]\n  (if (and (= (k coll) nil) (contains? coll k))\n    true\n    false))","problem":134,"user":"5194675fe4b0142f60b4aedf"},{"problem":134,"code":"(fn [v m] (and (contains? m v) (= nil (get m v ))))","user":"519f1eaee4b087743fad219c"},{"code":"(fn [ky mp]\r\n  (if (contains? mp ky)\r\n    (if (mp ky) false true)\r\n    false))","problem":134,"user":"4fd170fce4b04c3a95aa0411"},{"problem":134,"code":"(fn [a b](and (contains? b a) (nil? (a b))))","user":"52a72722e4b0c58976d9ac0f"},{"problem":134,"code":"#(nil? (%2 %1 :def-value))","user":"5c03e927e4b0bdcf453d167b"},{"problem":134,"code":"(comp (partial apply #(and %1 %2)) (juxt vector? (comp nil? second)) #(find %2 %1))","user":"58946fa1e4b00487982d525b"},{"problem":134,"code":"(fn [key map]\n  (and \n    (contains? map key)\n    (nil? (get map key))\n  )\n)","user":"58775496e4b01531a375ea9a"},{"problem":134,"code":"(fn [x y] get (= nil (get y x false)))","user":"58eebc31e4b056aecfd47db5"},{"problem":134,"code":"(fn my-func [key map] \n  (if (contains? map key) \n    (if (= (key map) nil)\n      true\n      false)\n    false))","user":"5d517784e4b0776584bd6f60"},{"code":"(fn[k,m]\n  (if(contains? m k) \n    (if (= (get m k) nil) true false)\n       false)\n)","problem":134,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":134,"code":"(fn a-nil-key [key map]\n    (and (contains? map key) (nil? (key map))))","user":"5e8d3b37e4b0cb016954632c"},{"problem":134,"code":"(fn containsAsNil [x ys]\n  (if (contains? ys x)\n\t(nil? (get ys x))\n    false))","user":"59e0f839e4b08badc2a0c502"},{"code":"(fn [key, map]\n  (and\n    (contains? map key)\n    (nil? (key map))))","problem":134,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn kv [k m] (cond (and (contains? m k) (nil? (k m))) true :else false))","problem":134,"user":"50467ee2e4b011c5dfee7723"},{"problem":134,"code":"(fn [thekey themap]\n  (and (contains? themap thekey) (= nil (themap thekey))))","user":"5c8cfff8e4b048ec896c5996"},{"code":"#(and(contains? %2 %1)(nil?(get %2 %1)))","problem":134,"user":"4e85cda3535db62dc21a62f0"},{"problem":134,"code":"(fn [thekey themap] (if (and(contains? themap thekey) (=(get themap thekey) nil)) true false) )","user":"56bff105e4b060a8e693e3a4"},{"problem":134,"code":"(fn [x y] (if (contains? y x) (if (= (.get y x) nil) true false) false))","user":"5d4256bae4b05dd059a5437d"},{"code":"#(= [%1 nil] (find %2 %1))","problem":134,"user":"4ea2ddf1535d7eef308072bf"},{"code":"(fn m-m [needle m] \n  (and (contains? m needle) (= nil(get m needle))))","problem":134,"user":"4fd8544be4b0dab7d829f390"},{"problem":134,"code":"(fn [a b] (and (contains? b a) (= nil (a b))))","user":"56d4b1aee4b0ea9b8538f7ba"},{"problem":134,"code":"(fn [k m]\n  (if (= nil (get m k false))\n    true\n    false))","user":"4ee897fe535d93acb0a66883"},{"problem":134,"code":"(fn [key m]\n  (and\n   (= (contains? m key) true)\n   (= (nil? (get m key)) true)))","user":"56102988e4b05f002753df6a"},{"code":"#(nil? (get %2 %1 :my-fake-nil))","problem":134,"user":"535526a2e4b04ce2eb3ed259"},{"code":"#(nil? (%1 %2 :non-nil))","problem":134,"user":"4f0f01c0535d0136e6c22329"},{"problem":134,"code":"(fn [a b] (and (contains? b a) (nil? (get-in b [a]))))","user":"52cda980e4b07d0d72b2737b"},{"problem":134,"code":"(fn [k, dict] (and (contains? dict k) (= nil (get dict k))))","user":"55685aa3e4b0c656e3ff1851"},{"code":"#(= (get %2 %1 -1) nil)","problem":134,"user":"4fb7b80ae4b081705acca2d4"},{"problem":134,"code":"#( \n  if (contains? %2 %1)\n    (= (%1 %2) nil)\n    false)","user":"5f5cfe2be4b02876ed9fcfe2"},{"problem":134,"code":"(fn [x m]\n  (if (contains? m x)\n    (nil? (x m))\n  false))","user":"57ffeb62e4b0a837a8b30c2d"},{"code":"#(and (contains? %2 %1)\n      (nil? (%1 %2)) )","problem":134,"user":"51642237e4b003cf19fdde31"},{"problem":134,"code":"(fn\n  [k m]\n  (and (contains? m k)\n    (not (m k))))","user":"526c669be4b03e8d9a4a728f"},{"problem":134,"code":"(fn [k m]\n  (-> k\n      (m \"not found\")\n      (nil?)))","user":"5e862cd7e4b09a7a73c8bbde"},{"problem":134,"code":"#(nil? (get %2 %1 :hello))","user":"5980dcd5e4b021a7a535fddb"},{"problem":134,"code":"(fn [key map]\n  (and\n  (nil? (key map))\n  (contains? map key)\n  )\n)","user":"56804d03e4b0966858e4d8ec"},{"code":"(fn [k m] (= nil (get m k :unknown)))","problem":134,"user":"4ef48422535dced4c769f236"},{"problem":134,"code":"(fn [k m]\n  (if (and (nil? (k m))\n           (contains? m k))\n    true\n    false))","user":"579816abe4b039eba2ecb10d"},{"code":"(fn [x mapx] (if (contains? mapx x) (= (get mapx x) nil) (= 1 2)))","problem":134,"user":"4f617f66e4b0defedf855fc0"},{"problem":134,"code":"(fn [someKey someMap] (= nil (someKey someMap false)))","user":"5d891483e4b0915913b1d3b4"},{"problem":134,"code":"(fn\n  [keyw mmap]\n  (if(contains? mmap keyw)\n    (= (get mmap keyw) nil)\n    false)\n  )","user":"597b88bae4b02382a38ad1fc"},{"problem":134,"code":"(fn [x y] \n  (= nil(x y false)))","user":"564045a8e4b08d4f616f5edd"},{"code":"(fn [akey mymap] (and (nil? (akey mymap)) (contains? mymap akey) ) )","problem":134,"user":"52d8e23ae4b09f7907dd139b"},{"code":"#(if (contains? %2 %1) (= nil (%2 %1)) false)","problem":134,"user":"507bb3ece4b09034bfeeb720"},{"code":"#((fn [x] (and (or x false) (= (val x) nil))) (find %2 %1))","problem":134,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn [x y] (nil? (get y x 0)))","problem":134,"user":"503ff621e4b0c9bf6384b00f"},{"problem":134,"code":"#(nil? (get %2 % -1))","user":"551c66dae4b07993ea3788de"},{"problem":134,"code":"#(boolean (and \n  (some (fn [x] (= x %1)) (keys %2))\n  (nil? (%1 %2))))","user":"5595ffabe4b0c79f6e1db972"},{"problem":134,"code":"(fn [x y] (and (contains? y x ) (nil? ( x y ) ) ) )","user":"528b3f5ae4b0239c8a67ae93"},{"problem":134,"code":"(fn [k m] (if (= (get m k \"g\") nil ) true false))","user":"5e4ba8e8e4b0889a8790a55a"},{"problem":134,"code":"(fn [k h] (and (nil? (k h)) (boolean (some #(= k %) (keys h)))))","user":"55fb58b2e4b0f488688e0661"},{"problem":134,"code":"(fn [k m]\n  (if (some #{k} (keys m))\n    (if (nil? (m k))\n      true\n      false\n      )\n    false\n    )\n  )","user":"5763818ae4b0994c1922fbc7"},{"code":"(fn [k m] \n  (nil? \n    (cond \n      (contains? m k) (k m)\n      :else false)))","problem":134,"user":"4ef2da4f535dced4c769f224"},{"problem":134,"code":"(fn A-NilKey\n  [keyx mapx]\n  (if (contains? mapx keyx)\n    (if (= (get mapx keyx) nil) true false)\n    false))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":134,"code":"(fn\n  [x map] \n  (true? (= nil (x map false))))","user":"59a9c22ae4b08cbb53654d75"},{"problem":134,"code":"(fn [k m] (if (contains? m k ) \n            (= nil (k m))     \n            false\n                    ))","user":"56a6051fe4b0542e1f8d14e5"},{"problem":134,"code":"(fn [ky mp] (if (nil? (get mp ky \"not there!\")) true false))","user":"52d74c2de4b09f7907dd1373"},{"code":"(fn __ [k m]\n  (= nil (get m k :not-present)))","problem":134,"user":"52463059e4b09dbe66b56198"},{"code":"(fn [k m] (and (contains? m k)\n               (nil? (k m))))","problem":134,"user":"4ed9fe5f535d10e5ff6f5308"},{"problem":134,"code":"#(= (nil? (%1 %2)) (contains? %2 %1))","user":"5602842de4b04bb52996e1a1"},{"code":"#(= nil (% %2 -))","problem":134,"user":"4eb955da535dfed6da9c6d50"},{"problem":134,"code":"(fn [k m]\n  (let [r (get-in m [k] false)]\n  \t(if (nil? r)\n      true\n      false)))","user":"58b8c3ece4b0888cdc949cb9"},{"problem":134,"code":"(fn ([v] (nil? v)) ([k m] (if (contains? (set (keys m)) k) (nil? (m k)) false)))","user":"5ce67c36e4b0a17bb84e2b88"},{"problem":134,"code":"(fn [k coll] (if (= nil (get coll k \"blah\")) true false))","user":"542c44f8e4b0dad94371f2a1"},{"problem":134,"code":"(fn vnil [clef m] (and (contains? m clef) (nil? (get m clef))))","user":"54caaa48e4b057c6fda3a267"},{"problem":134,"code":"(fn [x1 x2]\n  (and (contains? x2 x1)\n       (nil? (x1 x2))\n   ))","user":"5a42dbabe4b0447ef91cc5fc"},{"problem":134,"code":"(fn [sym mp]\n  (and (contains? mp sym) (nil? (sym mp))))","user":"4f9dd376e4b0dcca54ed6d27"},{"code":"(fn [key map]\n  (cond (not (contains? map key)) false\n        (nil? (map key)) true\n        :else false))","problem":134,"user":"4f7250cce4b07046d9f4f02a"},{"problem":134,"code":"(fn [a b]\n(= (contains? b a) (= nil (a b)))\n  )","user":"5a67030ce4b0512ff01cd9d8"},{"problem":134,"code":"(fn [k l] \n  (and \n   (nil? (get l k)) \n   (contains? l k)\n  )\n)","user":"5c3e7b04e4b08cd430848e83"},{"problem":134,"code":"(fn [k m]\n  \t(and (contains? m k) (nil? (k m)))\n  )","user":"5de6484ce4b0986d99407f66"},{"problem":134,"code":"(fn [key mymap] (nil? (and (contains? mymap key) (get mymap key))))","user":"5c24c654e4b07e362c2305a7"},{"problem":134,"code":"(fn [key map] (if (and (nil? (key map)) (contains? map key)) true false))","user":"59203996e4b09b4ee5954c5b"},{"problem":134,"code":"(fn [k m] (= nil (k m false)))","user":"53531724e4b084c2834f4af9"},{"problem":134,"code":"(fn F1 [x y] (if  (and (= (y x) nil) (contains? y x)) true false) )","user":"5b69baf9e4b0c6492753e78f"},{"code":"(fn [k m]\n  (if (and (map? m) (contains? m k))\n    (nil? (k m))\n    false))","problem":134,"user":"4f036c50535dcb61093f6aba"},{"problem":134,"code":"(fn [key map] \n  (and (contains? map key)\n       (nil? (key map))))","user":"56011393e4b04bb52996e178"},{"problem":134,"code":"(fn [x y] \n  (and (not (y x))\n  (contains? y x)) \n)","user":"5a6afb1de4b0512ff01cda2f"},{"problem":134,"code":"#(if (nil? (%1 %2 false)) true false)","user":"590088bfe4b0438e51c2d026"},{"problem":134,"code":"(fn [k, hmap] (and (contains? hmap k) (nil? (get hmap k))))","user":"5e7b1ef4e4b085ba37836e10"},{"code":"(fn [x y] (and (contains? y x) (= (x y) nil) ))","problem":134,"user":"5391e479e4b0b51d73faaeac"},{"problem":134,"code":"(fn [kw map-coll]\n  (cond\n    (not (contains? map-coll kw)) false\n    (= (kw map-coll) nil) true\n  \t:else false))","user":"4fc77f5ae4b0ee37620e1821"},{"problem":134,"code":"(fn sknil? [key map]\n  (nil? (get map key \"none\")))","user":"5884f377e4b0f1effa3b76a8"},{"problem":134,"code":"(fn [k dict]\n  (= (dict k true) nil))","user":"55d9e226e4b0e31453f64acf"},{"code":"#(nil? (%2 %1 (not nil)))","problem":134,"user":"502b4d26e4b0194ad32ea1a0"},{"problem":134,"code":"(fn [x y] (if (contains? y x) \n                 (nil? (x y)) \n                 false ))","user":"57619fc9e4b0994c1922fb93"},{"problem":134,"code":"(fn [x, m] (= (get m x \"z\") nil))","user":"54d4ddd2e4b0a52adc2e2006"},{"problem":134,"code":"(fn [n m] \n  (if (contains? m n)\n    (= (m n) nil)\n    false))","user":"5f7e91c8e4b0c071e6c840d8"},{"problem":134,"code":"(fn [k m]\n  (true? (and (some #{k} (keys m))\n              (nil? (get m k)))))","user":"59fa241ee4b0ca45a743a358"},{"problem":134,"code":"#(and (contains? %2 %1)\n \t  (= (get %2 %1) nil))","user":"55f09e7be4b06e875b46ce28"},{"code":"(fn [k {x k :or {x :nothere}}] (nil? x))","problem":134,"user":"502ade49e4b0614b52996120"},{"code":"(fn [k m] (and (contains? m k) (= nil (k m))))","problem":134,"user":"4f04f847535dcb61093f6beb"},{"code":"(fn [k m]\n      (if (contains? m k)\n        (nil? (m k))\n        false))","problem":134,"user":"4f359c7ee4b0e243712b1ec4"},{"problem":134,"code":"(fn [k m]\n(if (and (contains? m k) (nil? (m k))) true false))","user":"59248a78e4b072a2710fce59"},{"problem":134,"code":"#(if (contains? %2 %1) \n   (nil? (%1 %2))\n   false)","user":"5688d6a8e4b0dcc4269f4071"},{"code":"#(= {%1 nil} (select-keys %2 (vector %1)))","problem":134,"user":"52c5c1c8e4b0c2d177d620fc"},{"problem":134,"code":"(comp nil? #(get %2 % 0))","user":"5b22328ee4b03cfeda66ed5d"},{"code":"(fn [k m]\n  (if (contains? m k)\n      (not (m k))\n      false))","problem":134,"user":"4ef1ee67535dced4c769f219"},{"problem":134,"code":"(fn [m k] (and (contains? k m) (nil? (get k m))))","user":"5c35e557e4b0d62ef62d9f64"},{"problem":134,"code":"(fn [x y] \n  (cond (nil? (find y x)) false\n        :else (nil? (x y)))\n  )","user":"57750460e4b0979f8965160c"},{"problem":134,"code":"(fn [k m]\n   (if (and (contains? m k) (nil? (k m))) true false)\n   )","user":"5c665311e4b0fca0c16226a7"},{"problem":134,"code":"(fn [key sq1] (= nil (get sq1 key true)))","user":"5e16006be4b0a047bd49f711"},{"problem":134,"code":"#(nil? (get %2 % 3))","user":"5f01952fe4b0cf489e8d7f22"},{"problem":134,"code":"(fn [k v]\n  (if (and (contains? v k) (nil? (k v)))\n    true false)\n  )","user":"54d05a9de4b0e8a36923e5c7"},{"problem":134,"code":"#(if (true? (contains? %2 %1)) (nil? (%2 %1)) false)","user":"528d6b10e4b0239c8a67aec3"},{"code":"(fn [kw m]\n  (if (contains? m kw)\n    (nil? (m kw))\n   false))","problem":134,"user":"51e89428e4b006d205356a51"},{"code":"(fn [x m]\n  (let [entry (find m x)]\n    (if entry\n      (nil? (second entry))\n      false)))","problem":134,"user":"523c6451e4b07becd5be2222"},{"problem":134,"code":"#(and\n    (contains? %2 %1) \n    (nil? (get %2 %1))\n  )","user":"5da20e73e4b000c986472be1"},{"code":"#(and (contains? %2 %) (= nil (%2 %)))","problem":134,"user":"4fad041ee4b081705acca231"},{"problem":134,"code":"(fn [k m]\n  (nil? (k m false)))","user":"53a2e6abe4b0f1fc7453882f"},{"code":"(fn\n  [k m]\n  (if (some #(= k %) (keys m))\n    ;; key exists\n    (if (nil? (m k))\n      true\n      false)\nfalse))","problem":134,"user":"4fd16778e4b04c3a95aa040f"},{"code":"(fn [k m]\n  (if \n    (and (contains? m k) (nil? (k m))) true false))","problem":134,"user":"4f03ebf7535dcb61093f6b7f"},{"problem":134,"code":"(fn \n  [k m]\n  (and (contains? m k)\n       (nil? (m k))))","user":"58976bfde4b00487982d52bc"},{"code":"#(and (.contains (keys %2) %1) (nil? (get %2 %1)))","problem":134,"user":"52b091b4e4b0c58976d9accc"},{"code":"(fn [k, h] (and (contains? h k) (nil? (k h))))","problem":134,"user":"529fb154e4b04e0c58e87bb7"},{"code":"(fn [k m]\r\n  (and (contains? m k)\r\n       (nil? (m k))))","problem":134,"user":"4ee17ecc535d10e5ff6f535a"},{"code":"(fn [x xs]\n  (and (contains? xs x) (= (x xs) nil)))","problem":134,"user":"5129039de4b03a34742b4313"},{"problem":134,"code":"(fn [k, d] (if (contains? d k) (= (d k) nil) false))","user":"56ec0af1e4b04a395b9a0430"},{"problem":134,"code":"(fn [key map]\n  (if (and (contains? map key)\n           (= nil (key map))) true\n    false))","user":"53c6dcf9e4b00fb29b2212a3"},{"code":"(fn [k m] (if (contains? m k)\n              (= nil (get m k))\n           false\n            ))","problem":134,"user":"51dc0ed1e4b09c47a74ce105"},{"problem":134,"code":"(fn val-is-nil? [key map]\n  (= (map key :not-found) nil))","user":"60c91f48e4b0e0fa5f1b4304"},{"problem":134,"code":"(fn map-contains [value, m]\n  (and (not (empty? (filter #(= value %) (keys m)))) (= nil (get m value)))\n)","user":"550cbb3be4b06e50f9beb155"},{"code":"(fn [x y] (= nil(get y x false)))","problem":134,"user":"52865f41e4b0239c8a67ae15"},{"code":"(fn[valor mapa](= (valor mapa 0) nil))","problem":134,"user":"4eb7ff08535d7eef30807379"},{"code":"(fn [x y] (and (vector? (find y x)) (nil? (x y))))","problem":134,"user":"5047782ce4b0371827a27bc2"},{"problem":134,"code":"(fn [k m] (and (nil? (get m k)) (contains? m k)))","user":"54290a64e4b01498b1a71b36"},{"problem":134,"code":"#(and (not (empty? (filter nil? (apply concat (seq %2))))) (not (%2 %1)) (not (empty? (filter (partial = %1) (apply concat (seq %2))))))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"(fn [k m]\n(if (contains? m k) \n   (if (= nil (k m))\n      true\n      false)\n    false))","problem":134,"user":"4e964f4a535dbda64a6f6b42"},{"code":"(fn [k m]\n  (and\n    (contains? m k)\n    (= nil (k m))\n  )\n)","problem":134,"user":"4ffb3c50e4b0678c553fc3c8"},{"problem":134,"code":"(fn t [k m] (nil? (get m k false)))","user":"55ab9e87e4b0988bba2ad955"},{"code":"(fn [key map] (and (nil? (get map key)) (contains? map key)))","problem":134,"user":"4f8c6d84e4b02e764a0a519c"},{"code":"(fn  f[x y]\n  (nil? (get y x \"not\")))","problem":134,"user":"52b0323ee4b0c58976d9acc6"},{"problem":134,"code":"#(if (and (contains? %2 %1) (= (get %2 %1) nil)) true false)","user":"57a4ffdce4b0a966079561f3"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (let [val (get m k)]\n      (if (nil? val)\n        true\n        false))\n    false))","user":"5d49ec5ee4b0776584bd6f1c"},{"problem":134,"code":"(fn [k m]\n   (and (contains? m k)\n        (nil? (k m))))","user":"5d5c2730e4b09db18d4482ea"},{"problem":134,"code":"#(if (nil? (%2 % true)) true false)","user":"58173722e4b0c0e9c07b838a"},{"problem":134,"code":"(fn[k m] (and (contains? m k)\n         (nil? (k m))\n\t     ))","user":"57309d7ee4b0cd1946bd0fb2"},{"problem":134,"code":"(fn [a b] (nil? (get b a 5)))","user":"54d03b95e4b018d918be98e1"},{"code":"#(= nil (get %2 %1 false))","problem":134,"user":"4ee82223535d93acb0a66877"},{"problem":134,"code":"(fn \n  [k m]\n  (if (contains? m k) (nil? (get m k)) false))","user":"53dfe311e4b0d874e779ae47"},{"code":"(fn [k m]\n  (and (contains? m k) (= nil (get m k))))","problem":134,"user":"4dbdc9da535d020aff1edf4c"},{"code":"#(if (contains? %2 %1) (nil? (get %2 %1)) false)","problem":134,"user":"4f035973535dcb61093f6a8e"},{"code":"#(nil? (get %2 %1 ()))","problem":134,"user":"4f0feb75535d64f60314640f"},{"code":"(fn [k m] (if(= (m k 0) nil) true false))","problem":134,"user":"5245f167e4b09dbe66b5617e"},{"problem":134,"code":"(fn [key map] (= nil (get map key \"Not Found\")))","user":"554bc64ae4b0a04f79299598"},{"problem":134,"code":"(fn [k m] (nil? (#(get %2 %1 false) k m)))","user":"54df3c94e4b024c67c0cf7aa"},{"problem":134,"code":"#(nil? (get %2 %1 :e))","user":"574dfcb8e4b02ea11479923a"},{"problem":134,"code":"(fn [x m] (nil? (get m x :empty)))","user":"5511de35e4b06e50f9beb19b"},{"code":"(fn nilkey? [k m]\n  (= (get m k :nil) nil))","problem":134,"user":"50d882d4e4b01f0871336e69"},{"code":"(fn f [k m]\n  (and (not (nil? (find m k))) (nil? (k m)) ))","problem":134,"user":"521bf7cfe4b0c4ef0be83066"},{"problem":134,"code":"(fn [k v] (if (= nil (get v k false)) true false))","user":"60e2aca7e4b002d5a55d5f3b"},{"problem":134,"code":"(fn [keyy mapp]\n  (if(contains? mapp keyy)\n    (if(= (get mapp keyy) nil) true\n      false)\n    false))","user":"563130e4e4b0bfe05bf1178d"},{"problem":134,"code":"(fn \n  [k m] \n  (and \n   (contains? m k)\n   (= nil (m k))))","user":"557e562ce4b05c286339e0d4"},{"problem":134,"code":"(fn [the-key the-map]\n  (if (= nil (find the-map the-key)) false \n    (= (the-map the-key) nil)))","user":"53d42c95e4b00fb29b221334"},{"problem":134,"code":"(fn [k m]\n  (let [value (k m)]\n    (if (not (contains? m k))\n      false\n      (= value nil))))","user":"57434103e4b0c285004e8a9e"},{"problem":134,"code":"(fn [k m] (let [v (k m 0)] (nil? v)))","user":"5cf8864be4b0b71b1d808a84"},{"code":"(fn [x y]\n         (if (contains? y x)\n           (= nil (x y))\n           false))","problem":134,"user":"5029faf6e4b023940c84aa46"},{"problem":134,"code":"(fn cos [k s] (and (contains? s k) (= nil (k s))))","user":"5567b9dce4b0c656e3ff1846"},{"problem":134,"code":"(fn [x y] (and \n           (contains? y x)\n           (= nil (y x))\n           )\n)","user":"5be15f4de4b0ed4b8aab4c9b"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (nil? (key map))\n    false)\n  )","user":"5cf1d9e3e4b0aaa82f112a18"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key) \n    (nil? (key map))\n    false))","user":"5cada3b8e4b026601754b872"},{"problem":134,"code":"(fn [a b] (and (contains? b a) (nil? (b a))))","user":"505223fae4b0a561d07d8f17"},{"problem":134,"code":";#(\n ; (if (contains? %2 %1)\n;    (nil? (%2 %1))\n;false))\n\n;#(\n ; (and (contains? %2 %1)\n;    (nil? (%2 %1))\n;))\n\n\n\n\n(fn [k m] \n  (if (contains? m k)\n    (= (m k) nil)\n    false))","user":"58dd21a9e4b0a4d5acaab6b3"},{"code":"(fn [x m] (nil? (get m x 0)))","problem":134,"user":"4df1e213535d08e6dec9fe20"},{"problem":134,"code":"(fn [key, map] (and (contains? map key) (= (map key) nil)))","user":"58136679e4b0f478707a060d"},{"code":"#(if (= nil (get %2 %1 '())) true false)","problem":134,"user":"4e72187b535d5021c1a8965b"},{"problem":134,"code":"(fn [ k m ] \n  (if (contains? m k)\n    (let [ x (get-in m [k]) ]\n      (if (nil? x)\n        true\n        false))\n    false))","user":"57e572b5e4b0bfb2137f5ad7"},{"code":"(fn \n  [k m] \n  (if \n    (and \n     (contains? m k) \n     (nil? (m k)))\n    true\n    false))","problem":134,"user":"52c2eb29e4b07a9af5792385"},{"code":"(fn [key map] \n  (if (and (contains? map key) (nil? (map key)))\n      true\n      false))","problem":134,"user":"4f7bb606e4b06e829148e1aa"},{"code":"(fn [x xs] (if (contains? xs x)\n    (nil?  (x xs))\n  false))","problem":134,"user":"504e9011e4b069badc5a33b7"},{"problem":134,"code":"#(= nil (get %2 %1 :d))","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":134,"code":"(fn [k v]  \n  (and (contains? v k) (nil? (get v k)))\n  \n  )","user":"5548a1c3e4b0a04f7929955d"},{"code":"(fn [k coll] (and (contains? coll k) (nil? (coll k))))","problem":134,"user":"52292ce9e4b04c906c9c6a67"},{"code":"(fn [a b] (nil? (a b true)))","problem":134,"user":"51f2ab8be4b0210f90e74554"},{"problem":134,"code":"#(nil? (%1 %2 :no-entry))","user":"58b0bbc5e4b0ebc645576ce6"},{"code":"(fn [key map] \n  (and \n    (contains? map key)\n    (nil? (key map))\n  ))","problem":134,"user":"4f51697ae4b03ad3f0c10d22"},{"problem":134,"code":"(fn [k x] (nil? (get x k :not-found)))","user":"58b849bee4b0ebc645576d93"},{"code":"(fn[x y] (if (= nil (x y \"not found\")) true false))","problem":134,"user":"5192ad1ae4b08962174cf750"},{"problem":134,"code":"#(let [val (%2 %1 \"unknown\")] (if (nil? val) true false))","user":"5a401a7de4b0447ef91cc5c5"},{"problem":134,"code":"(fn [k m] (and (true? (some #(= k %) (keys m))) (nil? (k m))))","user":"54418311e4b032a45b869370"},{"problem":134,"code":"(fn [x s]\n  (if (contains? s x)\n    (= (s x) nil)\n    false))","user":"5c746c31e4b0fca0c16227c8"},{"problem":134,"code":"(fn [v m]\n  (if (and\n       (contains? m v)\n       (= (get m v) nil))\n    true\n    false)\n )","user":"58f4a3dfe4b0438e51c2cec3"},{"code":"(fn [x xx]\n\t(cond (nil? (find xx x)) false\n          :else (cond (nil? (second (find xx x))) true :else false)))","problem":134,"user":"5383ee9ee4b06839e8705eeb"},{"problem":134,"code":"(fn [k m] (if (and (some #{k} (keys m)) (nil? (k m))) true false))","user":"54299bf8e4b01498b1a71b3c"},{"problem":134,"code":"(fn [x coll] (and (contains? coll x) (= nil (get coll x))))","user":"5ddd6cfae4b0948ae9d9adc4"},{"problem":134,"code":"(fn [key map] \n  (if (contains? map key) (if (= nil (map key)) true false) false)\n)","user":"565418cde4b0f9d632dd847c"},{"problem":134,"code":"(fn [key coll] (and  (contains? coll key ) (nil? (get coll key))))","user":"564dbc5de4b0284900eef683"},{"problem":134,"code":"(fn [k coll] (= nil (k coll \"not found\")))","user":"6022429be4b0d5df2af22200"},{"code":"(fn map-func [map-key map-obj] (if (contains? map-obj map-key) (= (get map-obj map-key) nil) false))","problem":134,"user":"4e75500f535d7a570dd295c1"},{"code":"(fn contains-a-nil-value [k m]\n  (and (contains? m k)\n       (= (m k) nil)))","problem":134,"user":"4f35b2ace4b0e243712b1ec5"},{"code":"(fn [x, ys] \n  (if\n     (contains? ys x) \n     (= (get ys x) nil)\n     false\n     )\n  \n  )","problem":134,"user":"51d07a8be4b0e42293a2257e"},{"code":"#(if (contains? %2 %1)\n        (nil? (%1 %2))\n      false)","problem":134,"user":"4f378631e4b0e243712b1ed3"},{"problem":134,"code":"(fn [k m]\n   (and (contains? m k) (nil? (m k))))","user":"563772a9e4b0bfe05bf117d7"},{"problem":134,"code":"#(cond (and (contains? %2 %1) (nil? (get %2 %1))) true :else false)","user":"5c723f4be4b0fca0c16227a0"},{"code":"#(nil? (%2 % \"def\"))","problem":134,"user":"5141fafbe4b0b50abeb46b28"},{"problem":134,"code":"(fn [k m]\n  (let [res (= nil (get m k false))] res))","user":"58c673b9e4b021aa9917ed56"},{"code":"(fn [a-key a-map] \n  (and \n   (contains? a-map a-key)\n   (nil? (a-key a-map))\n  )\n)","problem":134,"user":"52dc55e2e4b09f7907dd13cd"},{"code":"(fn [k m]\n  (true? (and (some #{k} (keys m))\n       (nil? (m k)))))","problem":134,"user":"4e42f930535dc968683fc49f"},{"problem":134,"code":"(fn [k xs] (and (contains? xs k) (nil? (k xs))))","user":"5d2b62efe4b01671435dbc80"},{"code":"(fn [k m] (if (contains?  m k) (= nil (get m k)) false))","problem":134,"user":"50e20a07e4b0ae09a0e7de78"},{"problem":134,"code":"(fn [k, col]\n  (if (contains? col k)\n    (nil? (col k))\n    false))","user":"5bb948f5e4b0a20761a235d5"},{"code":"(fn [k coll] (if (and (contains? coll k) (nil? (k coll))) true false))","problem":134,"user":"4f47d84fe4b0d56e7bb92bc3"},{"problem":134,"code":"(fn [k coll] \n  (if (contains? coll k)  \n    (if (nil? (get coll k))\n      true\n      false)\n    false))","user":"52b3202ce4b0c58976d9ad01"},{"problem":134,"code":"#(nil? (get %2 %1 :key-not-found))","user":"5b507222e4b02d533a91bce7"},{"code":"(fn [k, maps]\n   (let [{x k} maps]\n      (if-not (contains? maps k) false  (= nil x))))","problem":134,"user":"50b0804de4b009df37c708bb"},{"code":"(fn[k,m](and (contains? m k)(= (get m k) nil)))","problem":134,"user":"52dbfe84e4b09f7907dd13c9"},{"code":"(fn \n  [k m]\n  (if\n    (= (get m k 0) nil)\n    true\n    false))","problem":134,"user":"53721dade4b0493c815db706"},{"code":"(fn[k m] (and (contains? m k) (nil? (m k))))","problem":134,"user":"4fc18846e4b081705acca331"},{"problem":134,"code":"#(if (contains? %2 %1) (not (boolean (%1 %2))) false)","user":"52c048a5e4b07a9af5792349"},{"code":"(fn [key map] \n  (if (contains? map key)\n    (nil? (key map))\n    false))","problem":134,"user":"4e759734535d7a570dd295c4"},{"problem":134,"code":"(fn [k mp]\n  (if (contains? mp k)\n    (= (k mp) nil)\n    false))","user":"53bb95d0e4b047364c044508"},{"problem":134,"code":"(fn is-nil [el m] (nil? (get m el 0)))","user":"569e3175e4b0542e1f8d1484"},{"problem":134,"code":"(fn [key map] (if (and (contains? map key) (= (key map) nil)) true false))","user":"55d1f0bae4b0e31453f64a4d"},{"problem":134,"code":"#(= ( get %2 %1 false) nil)","user":"56f86f98e4b08e7d20b96837"},{"problem":134,"code":";#(and (contains? %2 %1) (nil? (%1 %2)) )\n#(nil? (get %2 %1 true))","user":"5582dfb6e4b05c286339e10d"},{"problem":134,"code":"(fn [x m] (if (and (some #{x} (keys m)) (nil? (get m x))) true false))","user":"53e91473e4b036ad0777e495"},{"problem":134,"code":"(fn \n  [k en]\n  (if (empty? (select-keys en [k]))\n    false\n    (nil? (k en))))","user":"57eaf869e4b0bfb2137f5b56"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (not (k m))))","user":"5c50048ae4b0f9f7a8770eb9"},{"code":"#(nil? (%2 %1 \"not-found\"))","problem":134,"user":"500e91aae4b00fff93030f99"},{"problem":134,"code":"#(= (if (true? (contains? %2 %1)) (get %2 %1) false ) nil)","user":"54e24a05e4b024c67c0cf7ce"},{"problem":134,"code":"(fn [k m] (let [kval (k m)] (if (and (nil? kval) (contains? m k)) true false)))","user":"57a499dae4b0a966079561e6"},{"problem":134,"code":"(fn [key obj] (and (contains? obj key) (nil? (get obj key))))","user":"4fe98e07e4b0547ebccb2464"},{"code":"(fn [x y] (true? (when (contains? y x) (nil? (get y x)))))","problem":134,"user":"4ec53f8c535d6d7199dd368b"},{"problem":134,"code":"(fn [k col] (nil? (col k true)))","user":"54dd76c8e4b024c67c0cf794"},{"problem":134,"code":"(fn [a b] \n  (if (contains? b a)\n    (= (b a) nil)\n    false))","user":"55634f38e4b0c656e3ff17e8"},{"code":"(fn [the-key the-hash]\n           (and (contains? the-hash the-key)\n             (nil? (the-key the-hash))))","problem":134,"user":"4f038ed6535dcb61093f6b24"},{"code":"#(if (%2 %1) false (contains? %2 %1))","problem":134,"user":"4ec1e953535dfed6da9c6db8"},{"code":"(fn [x y]\n   (nil? \n     (get y x false)\n    )\n)","problem":134,"user":"521373f0e4b0d32679a5065b"},{"problem":134,"code":"(fn [ a b ]\n   (and  (contains? b a) (nil? (get b a)) ))","user":"516d227fe4b06f078fab252d"},{"problem":134,"code":"(fn [_key _map] (if (contains? _map _key)\n                    (nil? (_key _map))\n                    false))","user":"5b611666e4b0c6492753e70d"},{"problem":134,"code":"(fn [key map] (if (contains? map key) \n                 (nil? (get map key))\n                 false))","user":"5508102ee4b021ccfedb96b0"},{"code":"#(if (contains? %2 %1)\n  (let [v (%2 %1)]\n    (if (nil? v) true false)\n  )\n  false)","problem":134,"user":"5031eb3be4b000fc67a99a84"},{"problem":134,"code":"#(if (nil? (find %2 %1)) false (nil? (val(find %2 %1))))","user":"5a549fc5e4b05d388ecb6c2a"},{"code":"(fn [key coll]\n  (if (contains? coll key)\n    (if (nil? (coll key))\n      true\n      false\n      )\n    false\n    )\n  )","problem":134,"user":"526698c9e4b03e8d9a4a7144"},{"code":"(fn getnilkey \n  [x y] \n    (if\n      (and (contains? y x) (nil? (get y x))\n    )\n    true false)\n)","problem":134,"user":"4eeb8f68535d93acb0a668a9"},{"code":"(fn [k m]\n  (and\n    (nil? (k m))\n    (contains? m k)))","problem":134,"user":"4eb6d3ab535d7eef30807370"},{"code":"(fn maptest [k t]\n  (nil? (k t 1)))","problem":134,"user":"4ddc620d535d02782fcbea06"},{"code":"#(nil? (get %2 % :x))","problem":134,"user":"4db92654535d1e037afb21a0"},{"code":"(fn contains-nil? [key coll]\n  (and (contains? coll key) (nil? (key coll))))","problem":134,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn has-nil? [key map] (and (contains? map key) (= (key map) nil)))","problem":134,"user":"4f0318e6535dcb61093f6a5f"},{"problem":134,"code":"(fn [k m]\n  (and\n       (not (nil? (find m k)))\n       (nil? (m k))))","user":"5473ae71e4b0c51c1f4d7282"},{"code":"(fn [x y]\n  (and \n   \t(contains? y x)\n   \t(nil? (get y x))\n  )\n)","problem":134,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":134,"code":"#(= nil (get %2 %1 {}))","user":"52527f7ce4b0541d1855b8c4"},{"problem":134,"code":"(fn [k m] \n   (and \n    (contains? m k) \n    (nil? (k m))))","user":"57fb9d83e4b0d3187e900975"},{"problem":134,"code":"(fn [k m] (nil? (get m k :what)))","user":"5e7d0bc9e4b085ba37836e2a"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k 1))\n)","user":"577aacf2e4b0d3393e5deb03"},{"problem":134,"code":"(fn [k values] (and (contains? values k) (nil? (k values))))","user":"51b9f5a6e4b0e871ca49590e"},{"problem":134,"code":"(fn \n  [key data]\n  (and (contains? data key) (= nil (key data))))","user":"591f9a1fe4b09b4ee5954c4f"},{"code":"(fn [key map] (nil? (get map key 0)))","problem":134,"user":"4ec79cac535d6d7199dd36e3"},{"problem":134,"code":"(fn z [x y]\n  (if (contains? y x)\n    (= nil (get y x))\n    false))","user":"55244734e4b0882d96d091bf"},{"code":"(fn [k l] (and (contains? l k) (= nil (k l))))","problem":134,"user":"517531c6e4b07031762f2eea"},{"problem":134,"code":";(fn [k m] (k m 0))\n\n#(nil? (% %2 0))","user":"4e617114535d8ccf87e9fe5b"},{"problem":134,"code":"(fn my-fn\n  [input my-map]\n  \t(loop [full-map my-map]\n      (let [vector-seq (first my-map)]\n        (cond (empty? full-map) false\n              (and (= input (first vector-seq)) (= (second vector-seq) nil)) true\n              true (recur (rest full-map))))))","user":"53b05a36e4b047364c044481"},{"code":"#(and (nil? (%1 %2)) (contains? %2 %1))","problem":134,"user":"4e90053a535d65386fec2151"},{"code":"(fn [k m] (and (contains? m k) (nil? (val (find m k)))))","problem":134,"user":"52f182d8e4b05e3f0be25eed"},{"problem":134,"code":"(fn [k m] (if (and ((set (keys m)) k)(= nil (k m))) true false))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"problem":134,"code":"#(if (and (some #{%1} (keys %2))\n           (nil? (%1 %2)))\n    true\n    false)","user":"58ee9b14e4b056aecfd47db0"},{"code":"(fn [a-key a-map] (and (contains? a-map a-key)\n     (= nil (get a-map a-key))))","problem":134,"user":"5011ae8fe4b00ad656b9d982"},{"code":"#(and (contains? %2 %) (= (get %2 %) nil))","problem":134,"user":"4efb87f7535dced4c769f279"},{"code":"(fn [k m]\n          (and (not (nil? (find m k))) (nil? (k m))))","problem":134,"user":"501f36dde4b0cb6ebc0a42e4"},{"problem":134,"code":"(fn \n  [symb map-params] \n  (if (contains? map-params symb) \n    (= (symb map-params) nil)\n    false))","user":"52fe31d5e4b047fd55837038"},{"code":"#(if (and (= nil (%1 %2)) (contains? %2 %1))true false)","problem":134,"user":"516c3472e4b06f078fab251c"},{"problem":134,"code":"(fn [k m]\n  (let [v (k m)]\n  \t(if (and (contains? m k) (= nil v))\n    \ttrue\n    \tfalse)))","user":"53da1e2ce4b0e771c3025487"},{"code":"(fn [k m] ( if (contains? m k) (if (= nil (m k)) true false) false))","problem":134,"user":"4f4fdc56e4b03ad3f0c10cef"},{"problem":134,"code":"(fn [k m]   (if (= nil (k m \"not\")) true false))","user":"5d88d820e4b0915913b1d3b1"},{"code":"(fn [k mp]\n  (if (contains? mp k)\n    (= nil (get mp k))\n    false)\n  )","problem":134,"user":"51f7fbf7e4b06ff1c25c52e0"},{"problem":134,"code":"(fn [k m]\n   (and (contains? m k) (= nil (m k))))","user":"53bb5286e4b047364c044504"},{"code":"(fn isNilValue[theKey theMap]\n  (and (contains? theMap theKey) (nil?(theMap theKey)))\n )","problem":134,"user":"5306bceee4b02e821686979b"},{"problem":134,"code":"(fn is-nil-value [k, hm]\n  (and\n   (not= :not-found (hm k :not-found))\n   (= nil (hm k))\n   )\n )","user":"56e87a9ce4b04a395b9a03f0"},{"problem":134,"code":"(fn [arg map1](\n             if(nil? (get map1 arg \"nil\"))\n             \ttrue\n             false\n             ))","user":"592b7269e4b072a2710fcf3f"},{"code":"(fn [x y] (let [res (find y x)] (and (not (= nil res)) (= nil (val res)))))","problem":134,"user":"53410c24e4b00652c8746eca"},{"code":"#( if(contains? %2 %1) (nil? (get %2 %1)) false )","problem":134,"user":"4f03bf5e535dcb61093f6b5d"},{"problem":134,"code":"(fn\n  [x m]\n  (nil? (get m x true)))","user":"56acfee5e4b03c432f18734f"},{"code":"(fn [k x]\n  (if (contains? x k)\n    (if (nil? (k x)) true\n      false\n      )\n    false\n  ))","problem":134,"user":"517e12e3e4b0fcc7c5d37d3c"},{"code":"(fn [a m]\n  (not (get m a :true)))","problem":134,"user":"4f3656d1e4b0e243712b1ec9"},{"code":"#(not (%2 %1 true))","problem":134,"user":"4fac10e8e4b081705acca222"},{"code":"(fn [n col]\n(if (and (contains? col n) (= (col n) nil))\n  true \n    false))","problem":134,"user":"4f7cbf4ae4b06e829148e1b7"},{"code":"#(and (contains? %2 %1)\n      (nil? (get %2 %1)))","problem":134,"user":"4eab612d535d7eef30807316"},{"problem":134,"code":"(fn [x y] (nil? (y x true)))","user":"5627af13e4b00e49c7cb47d8"},{"problem":134,"code":"(fn [key map]\n  (let [value (key map)]\n    (and (nil? value) (contains? map key))))","user":"5224d077e4b01819a2de42f0"},{"problem":134,"code":"#(let [[a b :as v] (find %2 %1)]  (if (not= v nil) (= b nil) false))","user":"5a798ac5e4b03baeef9276c0"},{"problem":134,"code":"(fn [k m]\n  (if (nil? (get m k false)) true false)\n  )","user":"515d414be4b00901442db1db"},{"code":"#(and (not (%1 %2)) (contains? %2 %1))","problem":134,"user":"4fef439ce4b0678c553fc313"},{"code":"(fn nil-key? [k m]\n  (and (contains? m k)\n       (nil? (m k))))","problem":134,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":134,"code":"(fn[ a m]\n  (and (contains? m a) (nil? ( m a))\n   )\n \n \n )","user":"53b492a5e4b047364c0444b6"},{"code":"(fn [x, map] (and \n       \n                   (contains? map x) \n                   (= nil ( map x))\n              ))","problem":134,"user":"536d512be4b0fc7073fd6e57"},{"code":"(fn[k m] (and (contains? m k) (nil? (get m k))))","problem":134,"user":"503c2cb7e4b06c4e0e1fa248"},{"code":"(fn [ky mp]\n  (and\n    (contains? mp ky)\n    (nil? (ky mp))))","problem":134,"user":"52a779fce4b0c58976d9ac1a"},{"problem":134,"code":"(fn [map-key collection] (and (contains? collection map-key) (nil? (map-key collection))))","user":"5464dd11e4b01be26fd746d2"},{"problem":134,"code":"(fn [x y] (not (get y x \"missing\")))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"(fn[x col] (and (= x :a) (contains? col :a)))","problem":134,"user":"5049fb24e4b044486d8af28d"},{"code":"(fn [x,y] \n    (if (= (get y x) nil) (if (contains? y x) true false) \n    false) )","problem":134,"user":"4fdf8f67e4b05e33b9224f9e"},{"code":"(fn [k m]\n  (and \n    (= (m k) nil) \n    (contains? m k))\n)","problem":134,"user":"5225a0f5e4b01819a2de430e"},{"problem":134,"code":"#(if (and (= (%1 %2) nil) (contains? %2 %1))\n   true\n   false)","user":"5b780a8ce4b047b03b2036f6"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (nil? (get map key))\n    false))","user":"53a55de5e4b0b62ce3005739"},{"problem":134,"code":"(fn [k, m] (and (contains? m k) (= (get m k) nil)))","user":"53c7ad44e4b00fb29b2212aa"},{"problem":134,"code":"(fn get_map_key [key a_map](\n  if (and (nil? (a_map key)) (true? (contains? a_map key))) \n  true \n  false))","user":"5e967418e4b0157ca96647c6"},{"problem":134,"code":"#(nil? \n  (%2 %1 false))","user":"54d5343fe4b0a52adc2e200a"},{"problem":134,"code":"(fn[x y] (and (= (y x) nil)   (contains? y x)))","user":"53f1c05ee4b0742d9025b0e1"},{"problem":134,"code":"#(\n  if (contains? %2 %1) (nil? (%1 %2)) \n  false)","user":"557ad449e4b05c286339e0a6"},{"problem":134,"code":"#(and (contains? %2 %1) (= nil (%1 %2) ))","user":"5aba34c5e4b073f1774426a3"},{"problem":134,"code":"(fn [k, h] (if (contains? h k) (if (get h k) false true) false))","user":"5b03227be4b0cc2b61a3bd5d"},{"problem":134,"code":"(fn [k, l] (if (and (contains? l k) (= nil (get l k))) true false) )","user":"59368ccae4b02506e01a297a"},{"problem":134,"code":"(fn [key m]\n  (and (contains? m key) (nil? (m key))))","user":"5d590500e4b02ba5928a6824"},{"problem":134,"code":"(fn [k m]\n    (and (contains? m k) (nil? (get m k))))","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":134,"code":"(fn [k col]\n  (nil? (k col true)))","user":"5d5824fae4b02ba5928a681f"},{"problem":134,"code":"(fn [k coll] (and (not (get coll k)) (contains? coll k) )  )","user":"55c2367ee4b0e31453f64978"},{"code":"(fn [k m] (if (= (find m k) nil) false (= (get m k) nil)))","problem":134,"user":"503558a2e4b0ed9c821488f9"},{"code":"#(if (contains? %2 %1) (= nil (%1 %2)) false)","problem":134,"user":"4f14fbec535d64f603146440"},{"problem":134,"code":"(fn is-nil? [x l] (and (contains? l x) (nil? (x l))))","user":"5a2b7f4ee4b09cafd31c7f4a"},{"problem":134,"code":"(fn [key map] (if (contains? map key) (do (nil? (map key))) (do false)))","user":"5ef78fdae4b09b61f08553c4"},{"code":"(fn [a l] (= (contains? l a) (= (get l a) nil)))","problem":134,"user":"4ef5e06d535dced4c769f24a"},{"problem":134,"code":"(fn [klucz mapa]\n  (if (contains? mapa klucz)\n    (nil? (klucz mapa))\n    (contains? mapa klucz)\n   ))","user":"566734c4e4b04acd4f672dcc"},{"code":"(fn [x coll] (and (contains? coll x) (= nil (coll x))))","problem":134,"user":"537bca8be4b06839e8705e71"},{"problem":134,"code":"(fn [x y] \n  (and \n   (not (\n         nil? (\n               x (\n                  set (\n                       keys y\n                       )\n                  )\n               )\n         )\n     )\n   (nil? \n    (x y\n       )\n    )\n   )\n  )","user":"555e93d5e4b0a2eb076a39bb"},{"problem":134,"code":"(fn [k dict] \n\t(if (contains? dict k)\n\t\t(not (get dict k))\n\tfalse) \n)","user":"5472d919e4b094393f72dd7b"},{"code":"(fn [ky mp] \n  (if (contains? mp ky)\n    (nil? (get mp ky))\n    false))","problem":134,"user":"52fe3a9de4b047fd55837039"},{"code":"#(and\n   (contains? %2 %)\n   (nil? (% %2)))","problem":134,"user":"520b67b5e4b0b022ef140c83"},{"code":"(fn [key amap] (-> amap (get key 1) nil?))","problem":134,"user":"4ff6aea8e4b0678c553fc381"},{"problem":134,"code":"(fn test [ key map] \n  (and (contains? map key) (nil? (get map key))))","user":"6001c90ce4b074f607df6626"},{"code":"(fn [k m]\n  (nil? (get m k \"\")))","problem":134,"user":"4ec6297b535d6d7199dd36c4"},{"problem":134,"code":"(fn [k l]\n  (and (= (k l) nil) (contains? l k)))","user":"57344edbe4b0cd1946bd1008"},{"code":"(fn [x y] (= (= true (contains? y x)) (= nil (get y x))))","problem":134,"user":"4fbff228e4b081705acca320"},{"code":"(fn[x lst] \n  (and (nil? (get lst x))\n       (contains? lst x))\n  )","problem":134,"user":"51e85d2de4b048bc21b181ee"},{"code":"(fn [x  m] (nil? (get m x false)))","problem":134,"user":"4f97d8f3e4b0dcca54ed6ced"},{"problem":134,"code":"(fn [ke has]\n  (and (contains? has ke) (nil? (ke has))))","user":"570e6974e4b0b0fb43fd06ef"},{"problem":134,"code":"#(if (and (= (get %2 %1) nil) (contains? %2 %1)) true false)","user":"5d9f4442e4b000c986472bca"},{"problem":134,"code":"#(and (contains? %2 %1) (nil?  (get %2 %1)))","user":"538db083e4b0b51d73faae74"},{"problem":134,"code":"(fn [entry m]\n  (and (contains? m entry)\n       (= nil (entry m))))","user":"60264d89e4b0d5df2af2222d"},{"problem":134,"code":"(fn [ke ma] (if (and (contains? ma ke) (nil? (ke ma))) true false))","user":"56af842de4b061e3ca319ad2"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= (m k) nil)\n    false)\n  )","user":"5650ac8be4b0284900eef6c2"},{"problem":134,"code":"(fn [s m] (and (contains? m s) (not (s m))))","user":"54c9571ee4b045293a27f66b"},{"code":"(fn [vkey vmap] (= nil (get vmap vkey 1)))","problem":134,"user":"50856bd1e4b004985b776e4c"},{"code":"#(nil? (and (contains? %2 %1) (%1 %2)))","problem":134,"user":"52af7a5ce4b0c58976d9acbd"},{"problem":134,"code":"(fn [k m] (= [k nil] (find m k)))","user":"5bd0ea60e4b0e9689409ee45"},{"problem":134,"code":"(fn [hash-key hash-m]\n  (and (contains? hash-m hash-key) (= (hash-key hash-m) nil)))","user":"5cf1438be4b0aaa82f112a0d"},{"problem":134,"code":"#(if (nil? (get %2 %1 false) ) true false)","user":"54ae58f2e4b09f271ff37cf0"},{"problem":134,"code":"(fn [k m]\n              (if\n                (and (nil? (get m k)) (contains? m k))\n                true\n                false))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":134,"code":"(fn [k m] (and (contains? m k)\n               (= nil (k m))))","user":"5492164ee4b0b312c081ff3e"},{"problem":134,"code":"(fn [k m] (if (= nil (get m k \"Not Found\"))\n            true\n            false))","user":"5a135573e4b0ff51aa4b3180"},{"problem":134,"code":"(fn [k m]\n   (and (contains? m k) (nil? (k m))))","user":"567b39b6e4b05957ce8c61a3"},{"code":"#(and (contains? %2 %1) (nil? (%2%1)))","problem":134,"user":"5229211be4b04c906c9c6a63"},{"problem":134,"code":"(fn [x m]\n  (if (contains? m x)\n    (nil? (x m))\n    false))","user":"526759b3e4b03e8d9a4a715b"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k 1)))","user":"543168f5e4b0dad94371f2e6"},{"code":"(fn isnil? [x y](if (contains? y x) (if(= (get y x) nil)true false) false))","problem":134,"user":"52296df4e4b04c906c9c6a72"},{"problem":134,"code":"#(if (get %2 % \"missing\") false true)","user":"54d251aee4b0e8a36923e5f1"},{"problem":134,"code":"(fn [x y]\n  (= (x y false) nil))","user":"5b118df3e4b0cc2b61a3be35"},{"problem":134,"code":"(fn getKeyVal3\n   [a b]\n   (if (contains? b a)\n     (do (= nil (get b a)))\n     (do false)\n     )\n   )","user":"60b0e7efe4b0e0fa5f1b4223"},{"problem":134,"code":"#( and (contains? %2 %1)   (nil? (%2 %1)))","user":"54ae9e13e4b09f271ff37cf4"},{"code":"(fn [k mp] (if (contains? mp k) \n  \t\t\t\t(= (k mp) nil)\n  \t\t\t\tfalse))","problem":134,"user":"525b12b1e4b0cb4875a45d04"},{"code":"(fn [x m] (= (get m x true) nil))","problem":134,"user":"4f03b102535dcb61093f6b4e"},{"code":"(let [s (gensym)]\n(fn [k m]\n  (if (= nil (get m k s)) true false)))","problem":134,"user":"4ec12577535dfed6da9c6da8"},{"problem":134,"code":"(fn [key' map']\n  (cond \n   (contains? map' key') (nil? (key' map'))\n   :else false))","user":"567bf820e4b05957ce8c61ad"},{"problem":134,"code":"(fn\n  [key col]\n  (and (contains? col key) (nil? (key col))))","user":"5d13f783e4b0902706380dc1"},{"code":"#(if (%1 %2)\n   false \n   (if (some (fn [a] (= a %1)) (keys %2))\n     true\n     false))","problem":134,"user":"50f53694e4b057d4c52de881"},{"code":"(fn [k map] (and (contains? map k) (nil? (map k))))","problem":134,"user":"4f048ebc535dcb61093f6bd2"},{"code":"(fn\n  [a b]\n  (let [ret (find b a)]\n    (and (not (= ret nil)) (= (get b a) nil))))","problem":134,"user":"514d7e29e4b019235f6c0587"},{"code":"(fn [key coll]\n(and\n (contains? coll key)\n (not (or (coll key)\n          (= (coll key) false)))))","problem":134,"user":"5295fbb7e4b02ebb4ef75029"},{"problem":134,"code":"(fn [key coll]\n   (and\n     (contains? coll key)\n     (nil? (key coll))))","user":"5bcc01a1e4b07a9b28b10109"},{"code":"(fn [k m]\n  (and \n   (contains? m k)\n   (-> k m nil?)))","problem":134,"user":"50da19bae4b0277ab115b3cd"},{"problem":134,"code":"(fn [k v] (nil? (#(get %2 %1 0) k v)))","user":"5669eb9ae4b04acd4f672e02"},{"problem":134,"code":"(fn nilkey\n  [k data]\n  (if (= (get (group-by identity (map key data)) k) [k])\n    (if (nil? (get data k))\n      true\n      false)\n    false))","user":"5b86462de4b047b03b2037df"},{"code":"(fn[x y] (and (contains? y x) (= nil (y x))))","problem":134,"user":"525cc912e4b0cb4875a45d48"},{"problem":134,"code":"(fn [keyy mapp] (if (contains? mapp keyy)(= (keyy mapp) nil) false))","user":"5f8d76c3e4b0715f5002d758"},{"problem":134,"code":"(fn [key-arg map-arg]\n    (let [x (get map-arg key-arg 1)]\n      (nil? x)))","user":"5683fcafe4b0945ebc182aa8"},{"problem":134,"code":"(fn t [k l] (if(contains? l k) (=(get l k) nil) false ))","user":"57752a2de4b0979f89651613"},{"code":"(fn [c m] (if (contains? m c) (if (= nil (c m)) true false) false))","problem":134,"user":"4e932523535dbda64a6f6b09"},{"code":"(fn [k m] (if (contains? m k) (= (k m) nil) false))","problem":134,"user":"5035503de4b0ed9c821488f8"},{"problem":134,"code":"(fn [x y] (if (and (= nil (x y)) (some #(= x %) (keys y)))\n  \ttrue\n    false))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":134,"code":"(fn [k, m]\n\t(if (contains? m k)\n      (= (m k) nil)\n      false))","user":"5bff66c0e4b0bdcf453d1628"},{"code":"(fn [k m]\n  (if (= (get m k 0) nil)\n    true\n    false))","problem":134,"user":"4f67f674e4b07046d9f4ef6e"},{"code":"(fn[k m] (nil? (get m k 0)))","problem":134,"user":"5360e12ce4b0243289761e3a"},{"problem":134,"code":"(fn [k m]\n  (boolean (and (nil? (k m))\n                (k (set (keys m))))))","user":"5742ec91e4b05c31a32c0883"},{"problem":134,"code":"(fn [y x]\n  (if (contains? x y)\n    (nil? (x y))\n    (contains? x y)))","user":"5f520556e4b0a0bc16850a6d"},{"problem":134,"code":"(fn [key map]\n    (if (contains? map key)\n        (nil? (key map))\n        false))","user":"568f2059e4b0dcc4269f40df"},{"code":"#(= (get %2 %1 false) nil)","problem":134,"user":"517bbbfce4b07ef0e56148cf"},{"problem":134,"code":"(fn valid? [x lst] (if (contains? lst x) (nil? (x lst)) false))","user":"5c44ad48e4b0e06e1360a37a"},{"problem":134,"code":"(fn [k input]\n  (if-not (= (select-keys input [k]) {})\n    (= (k input) nil)\n    false))","user":"5570a388e4b09a3098a5252f"},{"problem":134,"code":"#(and (nil? (->> %1 %2)) (contains? %2 %1))","user":"552bab7fe4b0ffed3738f966"},{"problem":134,"code":"(fn [key set]\n    (nil? (get set key :not-found))\n    )","user":"5433a07be4b0b6b47310fce0"},{"problem":134,"code":"(fn [x y]\n  (not (x y 3)))","user":"531a3d5fe4b08068f379ed89"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (nil? (k m))\n    false\n    ))","user":"5b759ca8e4b047b03b2036d0"},{"problem":134,"code":"(fn [x m]\n  (and (contains? m x) (= nil (get m x))))","user":"53e06f81e4b0d874e779ae4c"},{"code":"(fn [k m]\n  (let [nil-value? (nil? (get m k))\n        has-key? (contains? m k)]\n    (and has-key? nil-value?)))","problem":134,"user":"51aba6e8e4b04e3dc0c27b39"},{"code":"(fn [k coll]\n  (and (contains? coll k)\n       (nil? (coll k))))","problem":134,"user":"504e71cbe4b0f6ff3350c4b3"},{"problem":134,"code":"(fn [x m]\n  (if (contains? m x)\n    (if (nil? (x m))\n      true \n      false)\n    false))","user":"5828927ee4b051871117bf38"},{"problem":134,"code":"(fn [k m]\n   (nil? (k m false)))","user":"5ebff55de4b00a66d4a95286"},{"code":"(fn[the-key the-map]\n(nil? (get the-map the-key \"not\"))\n\n)","problem":134,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"#(if(and (contains? %2 %1) (= (%1 %2) nil)) true false)","problem":134,"user":"4fdf566fe4b05e33b9224f99"},{"problem":134,"code":"#(and (if (some #{%1} (keys %2)) true false) (nil? (get %2 %1)))","user":"56e31aaae4b03a7c14b85a3e"},{"problem":134,"code":"#(= nil (get %2 %1 \"not nil\"))","user":"607548b8e4b069485764de57"},{"problem":134,"code":"(fn [x y] \n  (and (contains? y x) (= (get y x) nil)))","user":"555df9c8e4b0a2eb076a39b2"},{"problem":134,"code":"(fn [ky coll]\n  (and (contains? coll ky)\n       (nil? (coll ky))))","user":"5d48e6d3e4b0776584bd6f15"},{"code":"(fn [x y] (if (contains? y x) (if (= (get y x) nil) true false) false))","problem":134,"user":"5078300de4b0fc74642bff66"},{"code":"(fn nilholder [k m]\n  (nil? (get m k :not-found)))","problem":134,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn [x y] (nil? (y x false)))","problem":134,"user":"5045ac21e4b01f6c9a8b2371"},{"problem":134,"code":"(fn [a b] (if (= (if (= nil (get b a)) true false) (= true (contains? b a))) true false))","user":"54aec1b6e4b09f271ff37cf6"},{"problem":134,"code":"(fn [k,m] (if (contains? m k)\n             (nil? (m k))\n              false))","user":"53cfa79ce4b00fb29b2212ff"},{"code":"(fn [k m] (if (k m :fuck) false true))","problem":134,"user":"53489329e4b084c2834f4a5b"},{"problem":134,"code":"(fn func [key m]\n     (if (and (contains? m key) (= (m key) nil)) true false)\n     )","user":"56ffeafee4b08d47c97781c2"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n     (= nil (m k))\n     false) )","user":"58949f8de4b00487982d525e"},{"problem":134,"code":"(fn [a b] (if (nil? (get b a \"nil\"))true false))","user":"5785c1d4e4b0ebec4cfb74e1"},{"problem":134,"code":"(fn [k m] \n  (if (= (contains? m k) true) \n    (do (= (m k) nil))\n    (do false)))","user":"57509096e4b02ea114799277"},{"code":"#(and (contains? %2 %)\n  (nil? (%2 %))\n )","problem":134,"user":"504457c0e4b01f6c9a8b2360"},{"code":"#(= (%2 %1 :not-found) nil)","problem":134,"user":"4f05ea25535dcb61093f6c02"},{"problem":134,"code":"(fn [a-key a-map]\n  (if (= nil (get a-map a-key false)) true false))","user":"5977653be4b01722bebd4ced"},{"code":"#(-> %2 (get % 0) nil?)","problem":134,"user":"5028cd0fe4b01614d1633ffc"},{"code":"#(and\n   (nil? (%1 %2))\n   (contains? %2 %1)\n)","problem":134,"user":"511a0374e4b06c8af011181a"},{"problem":134,"code":"(fn \n  [k m]                                      \n   (= true (contains? m k) (nil? (k m))))","user":"5cf62ecce4b087f62be35aa7"},{"code":"(fn iff [k m]\n  (and (contains? m k) (nil? (m k))))","problem":134,"user":"4f3242bae4b0d6649770a08f"},{"code":"(fn [key coll] (and (contains? coll key) (not (get coll key))))","problem":134,"user":"506b8242e4b0eda3100c090a"},{"code":"(fn [k m] (= (get m k 'fhqwgads) nil))","problem":134,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":134,"code":"(fn [x xs] (= nil (x xs :no-key)))","user":"56967bc0e4b0dcc4269f4131"},{"problem":134,"code":"(fn key-present-and-nil [key map] (and (contains? map key) (nil? (map key))))","user":"56fbcc1fe4b07572ad1a88d5"},{"problem":134,"code":"(fn [n s] (and (contains? s n) (nil? (n s))))","user":"5761a772e4b0994c1922fb95"},{"problem":134,"code":"(fn[key map]\n        (nil? (key map :not-nil)))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":134,"code":"(fn [key map]\n  (and\n   (contains? map key)\n   (not (key map))))","user":"58db48a5e4b0a4d5acaab679"},{"problem":134,"code":"(fn [a b]\n      (let [x (find b a)]\n        (and (vector? x) (nil? (last x)))))","user":"5cd4c3dae4b0ccb061962925"},{"code":"#(nil? (get %2 % ::not-found))","problem":134,"user":"50479524e4b0371827a27bc4"},{"problem":134,"code":"(fn [k m] (= nil (get m k 1)))","user":"58730484e4b01531a375ea26"},{"problem":134,"code":"(fn[n,m] (= (n m false) nil))","user":"4ffbb1c7e4b0678c553fc3d3"},{"problem":134,"code":"(fn [key m]\n  (= nil (get m key 0)))","user":"552d9013e4b076ab5578f7ea"},{"code":"(fn [k v] (and\n           (contains? v k)\n           (nil? (v k))))","problem":134,"user":"522e6c01e4b01cdb292c5f01"},{"code":"(fn [a b] (if (contains? b a) (= nil (get b a)) false))","problem":134,"user":"4e3ae7cd535deb9a81d77f4e"},{"problem":134,"code":"(fn my-get [x coll]\n  (let [val (get coll x 1)]\n    (if (nil? val)\n      true\n      false)))","user":"5c411df3e4b08cd430848ebf"},{"problem":134,"code":"(fn[key map] (nil? (get map key false)))","user":"5c52fa3ce4b0fb8c5ffd99eb"},{"problem":134,"code":"(fn nil-key [mykey mymap]\n  (and (contains? mymap mykey) (= (mymap mykey) nil)))","user":"5433c591e4b0b6b47310fce3"},{"problem":134,"code":"(fn [k m] ((comp nil? get) m k :not-found))","user":"573a0ecce4b0cd1946bd1088"},{"problem":134,"code":"(fn [k m]\n  \t(if (and ((set (keys m)) k) (nil? (m k)))\n      true\n      false))","user":"5b7412a4e4b047b03b2036bb"},{"problem":134,"code":"(fn [arg1 arg2] \n  (if (contains? arg2 arg1) \n    (nil? (arg1 arg2))\n          false))","user":"58e5d149e4b056aecfd47ca0"},{"code":"#(and (contains? %2 %1)(= nil (%1 %2)))","problem":134,"user":"511179a2e4b03f43822243d0"},{"problem":134,"code":"(fn [k m]\n   (nil? (get m k 0)))","user":"5d917ef0e4b0915913b1d402"},{"code":"(fn [key map]\n  (if-let [[_ v] (find map key)]\n    (nil? v)\n    false))","problem":134,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"(fn [el m] (and (nil? (m el)) (contains? m el)))","problem":134,"user":"51f7dd27e4b06ff1c25c52dc"},{"problem":134,"code":"(fn [k col] (nil? (k col :not-nil-sentinel)))","user":"57aa290de4b0b8559636fc65"},{"code":"#(= nil (get %2 % :w))","problem":134,"user":"4facd2fae4b081705acca22f"},{"code":"(fn [i m] (and (contains? m i) (nil? (i m)) ))","problem":134,"user":"4fa7b013e4b081705acca1c8"},{"problem":134,"code":"#(if (contains? %2 %) (= (% %2) nil) false)","user":"546f926fe4b00cfc9eacc1af"},{"code":"(fn [k m] (let [e (find m k)] (if (nil? e) false (nil? (second e)))))","problem":134,"user":"513bb7a6e4b04402f587b77d"},{"code":"(fn [k c] (nil? (k c 0)))","problem":134,"user":"535ca812e4b04ce2eb3ed2b7"},{"code":"(fn [k m] (and (not (empty? (select-keys m [k]))) (nil? (m k))))","problem":134,"user":"4f43b992e4b0d7d3c9f3fd2c"},{"problem":134,"code":"(fn [k m]\n  (= nil \n     (if (contains? m k)\n      (m k)\n      0)))","user":"5b0f066fe4b0cc2b61a3be0d"},{"problem":134,"code":"(fn [k m] \n  (and (contains? m k) (= (k m) nil))\n)","user":"557a2891e4b05c286339e09f"},{"problem":134,"code":"(fn [x y](and (contains? y x) (not (get y x)) ))","user":"5770fb2ce4b0979f896515a5"},{"code":"(fn [a b] (= (get b a :notfound) nil))","problem":134,"user":"50df6dd0e4b061dbdced7225"},{"problem":134,"code":"(fn [key-val coll]\n  (if (contains? coll key-val)\n    (nil? (key-val coll))\n    false)\n  )","user":"5c9419fae4b048ec896c5a2b"},{"code":"(fn [a b] (nil?  (get b a -1)))","problem":134,"user":"51ca82e9e4b08b1cbd0d9488"},{"code":"(fn [k m]\n  (and (contains? m k) (nil? (m k))))","problem":134,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"(fn [x xs](= nil (x xs 1)))","problem":134,"user":"51618519e4b009fba0926e35"},{"problem":134,"code":"(fn [k m] (if (= true (and (contains? m k) (nil? (get m k)))) true false))","user":"55d3811be4b0e31453f64a69"},{"code":"(fn [k m] (and (contains? m k)\n       (nil? (m k))))","problem":134,"user":"516095c9e4b009fba0926e29"},{"problem":134,"code":"(fn [a-key a-map] (if (contains? a-map a-key) (nil? (a-key a-map)) false))","user":"54b972bbe4b0ed20f4ff6ead"},{"problem":134,"code":"(fn [k m] (boolean (and (some #(= %1 k) (keys m)) (nil? (k m)))))","user":"53db43aae4b0e771c30254b1"},{"code":"(fn has-nil [key map]\n  (if \n    (empty? \n      (filter #(= key %) (keys map)))\n     false\n     (nil? (key map))))","problem":134,"user":"504f5804e4b0a02f9cffde72"},{"code":"(fn foo [x y] (= nil (get y x false)))","problem":134,"user":"4ec3072a535dcc7ae8597d50"},{"problem":134,"code":"(fn [k coll]\n  (if (k coll true)\n    false\n    true))","user":"5883920ee4b0f1effa3b767e"},{"code":"(fn ba [key that_map] \n  (if (and (nil? (that_map key)) (= that_map (assoc that_map key nil))) \n    true\n    false))","problem":134,"user":"536db108e4b0fc7073fd6e61"},{"problem":134,"code":"#(if(contains? %2 %1) (nil? (%2 %1)) false)","user":"5b7ec218e4b047b03b20375e"},{"code":"(fn [k m]\n  (= nil (m k :a)))","problem":134,"user":"4f62b29ce4b0defedf855fd9"},{"problem":134,"code":"#(and(contains? %2 %1) (nil? (%1 %2)))","user":"543b12cce4b032a45b86932a"},{"code":"(fn [key map] \n  (and (contains? map key) (nil? (map key))))","problem":134,"user":"4f74a4fbe4b044e54cd9a901"},{"code":"(fn nil-val [key map]\n    (and (contains? map key) (nil? (map key))))","problem":134,"user":"4f036384535dcb61093f6a9a"},{"problem":134,"code":"#(= nil (%2 % \"A\"))","user":"5b47a4f7e4b02d533a91bc73"},{"problem":134,"code":"#(not (%2 % true)) ; uses boolean arithmetic with nil (nil evaluates to false) and map getter with default value \"true\" if key is not in the map","user":"57e33f6fe4b0bfb2137f5a96"},{"problem":134,"code":"(fn [k, m] \n    (and\n        (= \n            (k m) \n            nil)\n        (>\n            (count (find m k))\n            0)))","user":"58e039d3e4b0a4d5acaab734"},{"problem":134,"code":"(fn [a req]\n  (let [val (get req a false)] \n     (if (= val nil) true false)))","user":"58ef8a8ae4b056aecfd47dc7"},{"problem":134,"code":"(fn check-val[somekey somemap]\n  (and\n   (nil? (get somemap somekey))\n   (contains? somemap somekey)))","user":"5bfb26f5e4b0bdcf453d15d9"},{"code":"#(if (some (fn[x]( = %1 x)) (keys %2)) (nil? (%2 %1)) false)","problem":134,"user":"522f39a8e4b032bbe3424159"},{"problem":134,"code":"(fn isNil [key set]\n  (and \n    (contains? set key) \n    (= nil (key set))))","user":"54b187bee4b09f271ff37d21"},{"problem":134,"code":"(fn [i1 i2] (nil? (get i2 i1 :nope)))","user":"5e4375e7e4b01d43a70e8e73"},{"code":"(fn [k m]\n  (= nil (get m k false)))","problem":134,"user":"52487654e4b05ef8e38e63dc"},{"problem":134,"code":"(fn nil? [tar lst] \n  (if (find lst tar) \n    (if (= (get lst tar) nil)\n      true\n      false)\n    false))","user":"5550b5a0e4b00713264bd9ad"},{"code":"#(nil? (get %2 %1 '(nil)))","problem":134,"user":"51c7d82be4b07ef393169e47"},{"code":"(fn [key col] (and (contains? col key) (nil? (col key))))","problem":134,"user":"503ee85ce4b06c4e0e1fa26e"},{"problem":134,"code":"#(and (contains? %2 %) (= (% %2) nil) )","user":"5256dcc0e4b0541d1855ba3c"},{"code":"(fn [key values]\n  (if (false? (contains? values key)) false\n    (if (nil? (values key)) true false)))","problem":134,"user":"536bb179e4b0243289761ec1"},{"code":"#(and (not (%2 %1)) (contains? %2 %1))","problem":134,"user":"4eabb245535d7eef30807319"},{"problem":134,"code":"(fn [x y] (if (nil? (x y)) (contains? y x) false))","user":"58e325f3e4b005f69f193ca7"},{"problem":134,"code":"#(nil? (if (contains? %2 %1)\n         (%2 %1)\n         false))","user":"554bd33ce4b0a04f7929959a"},{"problem":134,"code":"(fn [k m]\n  (if-let [[_ val] (find m k)]\n    (= nil val)\n   \tfalse))","user":"5b333626e4b025bcb146f32f"},{"problem":134,"code":"(fn\n    [k m]\n    (and\n      (contains? m k)\n      (nil? (m k))))","user":"532f7e12e4b019098a6f8b4e"},{"problem":134,"code":"(fn [k o] (and (contains? o k) (nil? (o k))))","user":"55e558e3e4b050e68259b46b"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k :no-value)))","user":"551ee974e4b08d5046aa8a50"},{"problem":134,"code":"#(if(and (contains? %2 %1) (nil? (get %2 %1))) true false)","user":"574ed2f7e4b02ea11479924a"},{"problem":134,"code":"(fn[k m] (and (contains? m k) \n              (nil? (get m k))))","user":"55c508f0e4b0e31453f649ac"},{"problem":134,"code":"(fn [x l] (nil? (get l x :nope)))","user":"5fbb010ae4b03f550f448233"},{"problem":134,"code":"(fn [x mm] (if (and (contains? mm x) (= (mm x) nil)) true false))","user":"5c54e605e4b0fb8c5ffd9a14"},{"problem":134,"code":"(fn [myKey myMap]\n  (if (contains? myMap myKey)\n    (= nil (myKey myMap))\n    false))","user":"5f4f8f78e4b0102c75033973"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (not (get m k))))","user":"54055aa9e4b0addc1aec6665"},{"problem":134,"code":"(fn [k mp]\n  (and\n    (nil? (get mp k))\n    (contains? mp k)))","user":"57300c19e4b0cd1946bd0fa1"},{"problem":134,"code":"#(and (contains? %2 %)\n      (= nil (% %2)))","user":"5c7d2cc9e4b0d597f478caa2"},{"problem":134,"code":"(fn [map-key any-map]\n  (and (contains? any-map map-key) ; has said key\n       (nil? (map-key any-map))))  ; and corresponding value is nil","user":"60948c3ae4b00e9e6653c3e7"},{"code":"(fn [key hash] \n(and (= nil (key hash))   (contains? hash key))\n)","problem":134,"user":"4f8da0e2e4b02e764a0a51b1"},{"problem":134,"code":"(fn [x y] \n  (and (contains? y x )\n    (nil? (y x))))","user":"58b80ec1e4b0ebc645576d89"},{"problem":134,"code":"#(if (and (contains? %2 %1)\n          (not (%1 %2)))\n   true\n   false)","user":"5eccc5c2e4b016b56eae058f"},{"problem":134,"code":"(fn [a b] (and (contains? b a)(nil? (a b))))","user":"57b09d41e4b0fbc9809a2746"},{"problem":134,"code":"(fn [key map]\n  (nil? (key map true)))","user":"5424c523e4b01498b1a71b03"},{"code":"#(nil?(get %2 %1 0))","problem":134,"user":"52cdec62e4b07d0d72b27382"},{"problem":134,"code":"#(let [e (find %2 %1)]\n   (and\n    (not (nil? e) )\n    (nil? (val e) )\n   )\n)","user":"54c92da5e4b045293a27f65b"},{"code":"(fn [key map] (nil? (get map key true)))","problem":134,"user":"4e7d1c22535db169f9c796c5"},{"code":"(fn [k m] (and (not (nil? ((set (keys m)) k))) (nil? (m k))))","problem":134,"user":"5235a902e4b0a643f2dcb750"},{"code":"#(if (find %2 %) (nil? (% %2)) false)","problem":134,"user":"52029e5de4b030ee0c5b26fc"},{"code":"(fn [k m] (and (contains? m k) (= nil (k m) )) )","problem":134,"user":"4faacc04e4b081705acca201"},{"problem":134,"code":"(fn\n  [my-key my-map]\n  (= nil (if (find my-map my-key)\n           (val (find my-map my-key))\n           false)))","user":"57b084ece4b0fbc9809a2745"},{"problem":134,"code":"(fn [a b] (= (key (first b)) a))","user":"5e486cb0e4b043cd24807a3e"},{"problem":134,"code":"(fn [x s] (not (get s x true)))","user":"540ed3a7e4b0addc1aec6722"},{"problem":134,"code":"(fn [elem the-map] (and (contains? the-map elem) (= nil (get the-map elem))))","user":"56438342e4b0018b46ad8bf4"},{"problem":134,"code":"(fn [a b] (nil? (b a false)))","user":"53fb4843e4b0de5c4184857d"},{"code":"(fn [keyz mapz] (if (contains? mapz keyz) (= (keyz mapz) nil) false))","problem":134,"user":"51a3a976e4b0e77c4ca60bf5"},{"code":"(fn [key map] (nil? (get map key \"derp\")))","problem":134,"user":"509f5daee4b08df8156e9e3a"},{"problem":134,"code":"(fn [k l]\n  (and (contains? l k) (nil? (k l))))","user":"5c0e58bfe4b01240ff567140"},{"code":"(fn [k m] (let [found (find m k)] (if (nil? found) false (nil? (val found)))))","problem":134,"user":"52c2106fe4b07a9af5792374"},{"code":"(fn [el coll] (if (contains? coll el) (= (el coll) nil) false))","problem":134,"user":"52c00e4fe4b07a9af5792342"},{"problem":134,"code":"(fn [k m] \n  (and \n   (contains? m k)\n   (let [x (get m k)]\n    (nil? x))))","user":"5d40442ee4b05dd059a54362"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (= (k m) nil)\n   )\n)","user":"57d7c894e4b0bd073c2023de"},{"code":"(fn [k m] (let [v (k m)] (if (and (contains? m k) (= nil v)) true false)))","problem":134,"user":"5202be45e4b030ee0c5b2700"},{"code":"#(nil? (%1 %2 :notfound))","problem":134,"user":"4fab31a8e4b081705acca215"},{"problem":134,"code":"(fn [key value] \n   (and \n     (contains? value key) \n     (nil? (get value key))))","user":"5afc85f1e4b0cc2b61a3bd0e"},{"problem":134,"code":"(fn [keyy value] (and (contains? value keyy) (nil? (get value keyy))))","user":"5891bddce4b00487982d5201"},{"code":"#(and (contains? %2 %) (nil? (get %2 %)))","problem":134,"user":"4ee00f44535d10e5ff6f534b"},{"problem":134,"code":"(fn [k, m] (if (and (contains? m k)  (nil? (m k)) ) true false ))","user":"55f1f45be4b06e875b46ce3d"},{"problem":134,"code":"(fn n [y x] \n  (if (contains? x y)\n     (if(=(x y)nil)true\n      false)false))","user":"5f737899e4b02876ed9fd099"},{"code":"(fn nilly [x myMap] \n    (and (contains? myMap x) (nil? (get myMap x)))\n)","problem":134,"user":"506f9423e4b082ae7d1032ca"},{"problem":134,"code":"(fn [k m] (true? (and\n           ((set (keys m)) k)\n           (nil? (k m)))))","user":"4dfceeb9535d04ed9115e77e"},{"code":"(fn [k m]\n  (if (and (nil? (m k))\n           (contains? m k))\n    true\n    false))","problem":134,"user":"513cb853e4b0b86ece9f322b"},{"problem":134,"code":"(fn [k m] (\n           and (contains? m k) (= nil (m k))))","user":"59dfe78de4b08badc2a0c4df"},{"code":"(fn [key, map]\n  (and (contains? map key) (= nil (key map))\n  ))","problem":134,"user":"50a01937e4b08df8156e9e47"},{"problem":134,"code":"(fn [k, m]\n  (and (contains? m k) (nil? (m k))))","user":"5b9db58be4b0c0b3ffbd4b41"},{"code":"(fn [mykey mymap] (and (contains? mymap mykey) (= (mykey mymap) nil)))","problem":134,"user":"4f83dd78e4b033992c121c24"},{"code":"(fn [x y] (and (contains? y x) (nil? (get y  x))))","problem":134,"user":"4f8db862e4b02e764a0a51b2"},{"code":"#(=(get %2 %1 0)nil)","problem":134,"user":"50ed4626e4b01236b1d4983c"},{"problem":134,"code":"(fn[x y](and (= nil (get y x)) (contains? y x)))","user":"54f15cb8e4b024c67c0cf8b1"},{"problem":134,"code":"(fn [key map]\n  (if (and (contains? map key) (= nil (key map)))\n    true\n    false))","user":"55ede35ce4b0121d4835fde1"},{"problem":134,"code":"(fn [key map]\n  (if (key map true)\n    false\n    true))","user":"55c40a8de4b0e31453f64993"},{"problem":134,"code":"(fn [x y] (nil? (x y true)))","user":"55c1eb52e4b0e31453f64970"},{"problem":134,"code":"(fn [x y] (and  (contains? y x) ( = (get y x) nil) ) )","user":"51e1c176e4b06a68e693eafb"},{"problem":134,"code":"(fn [k m]\n    (and (contains? m k) (nil? (m k))))","user":"4e837808535db62dc21a62d9"},{"code":"(fn t1 [value m]\n  (if (contains? m value)\n          (if (= (get m value) nil) \n            true \n            false)\n          false))","problem":134,"user":"5046f909e4b03b02161376b5"},{"problem":134,"code":"(fn [k m]\n  (-> (some #(and\n          (nil? (second %))\n          (= k (first %)))\n        m)\n  true?))","user":"53bd7080e4b0d9a98559a6d1"},{"problem":134,"code":"(fn check-nil [key col]\n  (and (contains? col key) (nil? (get col key))))","user":"60323240e4b0d5df2af222b3"},{"problem":134,"code":"(fn\n  [k m]\n  (= nil (get m k :not-found)))","user":"548749cee4b0e286459a11c4"},{"problem":134,"code":"(fn [ k mp] (and (nil? (get mp k) )(not (empty? (find mp k)))))","user":"55a21f1ce4b0acc240e3151f"},{"problem":134,"code":"(fn [ky the-map]\n  (if (contains? the-map ky)\n    (nil? (the-map ky))\n    false))","user":"557e2eafe4b05c286339e0d2"},{"code":"(fn [k m]\n  (nil? (get m k \"not nil\")))","problem":134,"user":"52488a46e4b05ef8e38e63e0"},{"problem":134,"code":"(fn nil-key\n  [k m]\n  (if (nil? (get m k -1))\n    true false))","user":"579d1567e4b05b1deef9ae12"},{"code":"#(= nil (% %2 1))","problem":134,"user":"513edd13e4b051389b345b39"},{"problem":134,"code":"#(and (= (%1 %2) nil) (= %1 (some #{%1} (keys %2) )))","user":"593f95d8e4b069cdc2982be3"},{"code":"(fn [k m] (if (contains? m k) (= nil (k m)) false))","problem":134,"user":"501ffbb1e4b0cb6ebc0a42f2"},{"problem":134,"code":"(fn [k m] \n  (and \n   (nil? (m k))\n   (contains? m k)\n   )\n)","user":"57f904c5e4b0d3187e900936"},{"code":"(fn [a b]\n  (and (contains? b a)\n       (nil? (b a))))","problem":134,"user":"504dff92e4b078edc5f5938a"},{"problem":134,"code":"#(if (contains? %2 %1) (if (nil? (%1 %2)) true  false) false)","user":"56ab7578e4b03c432f18733d"},{"problem":134,"code":"(fn [elm coll]\n  (if (some #(= elm %) (keys coll))\n    (= nil (coll elm))\n    false))","user":"5d7bd68ee4b02e6b30c93554"},{"problem":134,"code":"(fn [k m] (= nil (k m :not-found)))","user":"5e76274ce4b085ba37836deb"},{"code":"(fn [key m] (and (contains? m key) (nil? (get m key))))","problem":134,"user":"4fb266a5e4b081705acca28c"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (= (get map key) nil)\n    false))","user":"542769f8e4b01498b1a71b24"},{"problem":134,"code":"(fn [llave,mapa] (nil? (llave mapa false)))","user":"5fff510de4b074f607df6608"},{"problem":134,"code":"(fn [key map] (if (contains? map key ) (= (key map) nil) false))","user":"5e14d842e4b0a047bd49f6f5"},{"code":";;(fn [k m] (true? (nil? (m k))(contains? m k)))\n\n(fn [k m] (= true (true? (= nil (m k)))(true? (contains? m k))))","problem":134,"user":"5297dcc5e4b02ebb4ef75047"},{"problem":134,"code":"(fn [a s] (nil? (get s a false)))","user":"5fe18014e4b05ac5b16ea16d"},{"code":"(fn contnil [v seq] (and (contains? seq v) (= (get seq v) nil)))","problem":134,"user":"4ebe8d65535dfed6da9c6d96"},{"code":"(fn nilkey [key map]\n  (if (contains? map key)\n    (if (= (key map) nil)\n      true\n      false)\n    false))","problem":134,"user":"522d0360e4b0806774ddfef7"},{"code":"(fn [v m] (and (contains? m v) (= (m v) nil)))","problem":134,"user":"4ddbd600535d02782fcbe9fb"},{"problem":134,"code":"(fn [k m] (nil? (get m k 'nil')))","user":"56351709e4b0bfe05bf117c2"},{"problem":134,"code":"(fn [key map]\n  (nil? \n   (key map :not-found)))","user":"553da207e4b0a04f792994e3"},{"code":"(fn [x y] (and (contains? y x)(= (get y x) nil)))","problem":134,"user":"505c6432e4b032b709c81378"},{"code":"(fn [k m]\n  (let [kv (find m k)]\n    (if (nil? kv)\n        false\n        (nil? (val kv)))))","problem":134,"user":"4fadbc3fe4b081705acca23f"},{"code":"(fn [k m]\n  (if (and (contains? m k) (= (k m) nil))\n    true\n    false))","problem":134,"user":"51026750e4b00c483ae176f7"},{"code":"(fn [a x] (if (= nil (find x a)) false (= nil (get x a))))","problem":134,"user":"4fb4ca71e4b081705acca2b0"},{"problem":134,"code":"(fn\n  [key coll]\n  (if (and (contains? coll key)\n           (nil? (coll key)))\n    true\n    false))","user":"5484143de4b0e286459a1197"},{"code":"(fn [key, tMap] (and (contains? tMap key) (= (get tMap key) nil)))","problem":134,"user":"534c1c64e4b084c2834f4a8a"},{"code":"(fn [x l] (and (contains? l x) (nil? (l x))))","problem":134,"user":"4df7278a535d04ed9115e774"},{"problem":134,"code":"(fn [desired-key input-map]\n\t(let [contains (contains? input-map desired-key)\n          value (get input-map desired-key)]\n      (if (and contains (= value nil)) \n        true\n        false        \n        )))","user":"5c547943e4b0fb8c5ffd9a0a"},{"code":"(fn nil-val? \n   [k m] (and (contains? m k) (nil? (m k))))","problem":134,"user":"51f549c4e4b0abb92f97f9cb"},{"problem":134,"code":"(fn [key list] (and (contains? list key) (nil? (key list))))","user":"5b7ed20fe4b047b03b203760"},{"code":"#(= nil (get %2 %1 :x))","problem":134,"user":"523b1a65e4b02f719975bdbd"},{"code":"#(nil? (%1 %2 +))","problem":134,"user":"4dc1bd76535d020aff1edf8d"},{"problem":134,"code":"(fn nil-key [k m] (nil? (get m k 5)))","user":"56912f93e4b0dcc4269f40ef"},{"problem":134,"code":"(fn [x y] (if (contains? y x) (=(y x)nil)false))","user":"556dd141e4b09a3098a52509"},{"code":"(fn [k m]\n   (and (contains? (set (keys m)) k) (= nil (get m k))))","problem":134,"user":"5084cb7de4b0fb8f40674bfb"},{"problem":134,"code":"#(nil? (%1 %2 :key-not-present))","user":"5f665d45e4b02876ed9fd02f"},{"problem":134,"code":"(fn [k m] \n  (nil? (m k false)))","user":"58a579ebe4b01a0c0b23290f"},{"problem":134,"code":"(fn [k m] \n  (cond \n   (contains? m k)(= (m k) nil)\n    :else false))","user":"56df6301e4b0ca2494a095f1"},{"code":"(fn [k m] (= nil (get m k 0)))","problem":134,"user":"4f69f34fe4b07046d9f4ef90"},{"problem":134,"code":"(fn [k m] (and \n           (contains? m k) \n           (nil? (get m k))))","user":"52d81642e4b09f7907dd1387"},{"problem":134,"code":"(fn [x m] (if-not (get m x true) true false))","user":"55cd95b4e4b0e31453f64a1e"},{"problem":134,"code":"(fn\n  [key mappy]\n  (if (contains? mappy key)\n    (= (key mappy) nil)\n    false))","user":"6059d2e0e4b07e92fa001ace"},{"code":"(fn [s co]\n  (if (not (s co))\n    (if (contains? co s)\n      true\n      false)\n    false))","problem":134,"user":"51ea4e35e4b0f1f103a0d148"},{"problem":134,"code":"(fn [x m] (if (nil? (get m x :default)) true false))","user":"589771f9e4b00487982d52bd"},{"problem":134,"code":"(fn is-null-key? [key map]\n  (and (contains? map key) (nil? (key map))))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn [k m]\n  (and \n   (nil? (m k))\n   (contains? m k)))","problem":134,"user":"4dbb7d29535d1e037afb21b7"},{"problem":134,"code":"(fn [k c] (nil? (get c k true)))","user":"57023e92e4b08d47c97781da"},{"problem":134,"code":"(fn [k m] (and (not (m k))(contains? m k)))","user":"606807bee4b069485764dde4"},{"problem":134,"code":"(fn [key, seq]\n  (if-not (or (seq key) (not (contains? seq key)))\n    true\n    false))","user":"55a505dde4b0acc240e31549"},{"code":"(fn[k,m](nil?(k m 1)))","problem":134,"user":"52fd8de1e4b047fd5583702e"},{"code":"#(if(nil? (get %2 %1 false))\n  true\n    false)","problem":134,"user":"4ea53dc2535d7eef308072d1"},{"problem":134,"code":"(fn fnk [akey coll] \n  (let [v (akey coll)\n        containsKey? (contains? coll akey)]\n    (if (and (nil? v) containsKey?)\n      true\n      false\n     )\n   )\n  )","user":"578151ade4b0d36ec5835e83"},{"code":"(fn [key coll] (if (and (contains? coll key) (= (key coll) nil)) true false))","problem":134,"user":"50e09f60e4b061dbdced7237"},{"problem":134,"code":"(fn [k col]\n  (and (contains? col k) (nil? (get col k))))","user":"5f2ab452e4b033932238a656"},{"code":"(fn [k col] \n   (if (contains? col k) \n     (nil? (col k))\n     false))","problem":134,"user":"4dde4e95535d08e6dec9fdd7"},{"problem":134,"code":"(fn [x y] (nil? (x y 9)))","user":"558f56c3e4b0277789237662"},{"code":"(fn [key col] (if (nil? (get col key false)) true false))","problem":134,"user":"524dd1c3e4b0f245900d275c"},{"code":"(fn [k coll]\n  (if (contains? coll k)\n    (nil? (k coll))\n    false))","problem":134,"user":"5302b580e4b0d8b024fd3733"},{"problem":134,"code":"(fn [k m] (nil? (m k :no-key)))","user":"53ea5307e4b036ad0777e4e2"},{"problem":134,"code":"(fn [k m]\n  (if (and (find m k) (= nil (m k)) )\n    true\n    false)\n  )","user":"53d11f7fe4b00fb29b221310"},{"code":"(fn [k m]\n  (and (contains? m k)\n       (nil? (m k))))","problem":134,"user":"4e4b4564535dc968683fc4d3"},{"problem":134,"code":"(fn [key map]\n      (and (contains? map key) (nil? (map key))\n           ))","user":"5dd84170e4b0948ae9d9ad93"},{"code":"(fn [k coll] (let [x (get coll k false)]\n                          (if (nil? x)\n                            true\n                            false)))","problem":134,"user":"5234f716e4b05e80434a505f"},{"code":"(fn [k m]\n  (let [entry (find m k)]\n    (if (nil? entry)\n      false\n      (if (nil? (k m)) true false))))","problem":134,"user":"4e117dea535d04ed9115e7c9"},{"problem":134,"code":"(fn [key vec] (if (= (get vec key \"false\") nil) true false))","user":"5d40f41ae4b05dd059a5436d"},{"code":"(fn [keyv mapl]\n  (if (contains? mapl keyv)\n    (nil? (mapl keyv))\n    false))","problem":134,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"code":"(fn [x hsh] (and (contains? hsh x) (= (hsh x) nil)))","problem":134,"user":"4eaf0d91535d7eef3080732e"},{"code":"#(and (contains? %2 %) (= (% %2) nil))","problem":134,"user":"4e8d86d5535d65386fec2136"},{"problem":134,"code":"(fn [mykey mymap] \n  (nil? (get mymap mykey \"no\")))","user":"5799cae4e4b05b1deef9adcb"},{"code":"#(if (contains? %2 %) (-> % %2 nil?) false)","problem":134,"user":"4fe98ddae4b0547ebccb2463"},{"problem":134,"code":"(fn my-fun [x y]\n  (if (contains? y x)\n    (nil? (x y))\n    false))","user":"5f1108d7e4b091ba50b4dba9"},{"code":"(fn [keyw mapw]\n  (if (and (nil? (mapw keyw)) (not= keyw :c)) true false))","problem":134,"user":"52151220e4b0961f15ac4da7"},{"problem":134,"code":"#(and \n  (contains? %2 %1) \n  (not (%1 %2)))","user":"5b3de9a7e4b02d533a91bbf4"},{"problem":134,"code":"(fn [key map]\n  (nil? (key map 1)))","user":"553a35bfe4b09218d5f44ff0"},{"problem":134,"code":"(fn [k m] (and (nil?(get m k)) (contains? m k) ))","user":"525d318fe4b0cb4875a45d63"},{"problem":134,"code":"(fn [x b] \n  (if (contains? b x)\n    (nil? (b x))\n    false))","user":"591f5124e4b09b4ee5954c45"},{"problem":134,"code":"(fn [x m]\n   (= nil (get m x :false)))","user":"587f8393e4b0f1effa3b75f2"},{"problem":134,"code":"(fn [k h] (and (= (k h) nil) (contains? h k)))","user":"5448616be4b032a45b8693c9"},{"problem":134,"code":"#(not(boolean (get %2 %1 0)))","user":"4f24c859e4b0d66497709fef"},{"problem":134,"code":"(fn [k m]\n  (let [value (get m k false)]\n    (if (nil? value) true\n      false)))","user":"56df62b3e4b0ca2494a095ef"},{"problem":134,"code":"(fn check [key value] (if (and (= nil (get value key)) (contains? value key)) true false))","user":"576d6266e4b0979f89651563"},{"problem":134,"code":"(fn [k,m] (if(and (contains? m k) (= (k m) nil)) true false))","user":"56432916e4b08d4f616f5f22"},{"problem":134,"code":"#(and (= nil (%1 %2))\n      \t   (contains? %2 %1))","user":"5520d6b8e4b08d5046aa8a65"},{"problem":134,"code":"#(if (and (contains? %2 %1) (= (get %2 %1) nil)\n  )\ntrue\nfalse\n)","user":"5f1aade6e4b091ba50b4dbe4"},{"problem":134,"code":"(fn [key val] (=(val key :true) nil))","user":"588f500ae4b00487982d51a4"},{"problem":134,"code":"(fn [k v] (and (contains? v k) (= (get v k) nil)))","user":"55ad1221e4b03311e7b7329d"},{"problem":134,"code":"(fn\n  [k m]\n  (if (find m k)\n    (nil? (m k))\n    false))","user":"562fb774e4b0ab312c17ebd9"},{"code":"(fn [key map] (= (contains? map key) (= nil (map key))))","problem":134,"user":"4ec58aaa535d6d7199dd36a6"},{"code":"(fn [c l]\n  (and \n   (contains? l c)\n   (= nil (c l))))","problem":134,"user":"5294c95fe4b02ebb4ef75013"},{"problem":134,"code":"(fn[k m](and (= (k m) nil) (contains? m k)))","user":"5bd4a0b7e4b0ed4b8aab4b8d"},{"problem":134,"code":"(fn [k m]\n  (if-let [e (find m k)] \n    (if (= nil (val e)) true false)\n    false))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":134,"code":"(fn [k m] (nil? (and (contains? m k ) (m k))))","user":"58eed63be4b056aecfd47db9"},{"code":"(fn [ks m]\n  (if (and (nil? (ks m)) (contains? m ks))\n      true \n      false))","problem":134,"user":"4e1248b1535d04ed9115e7cf"},{"problem":134,"code":"(fn [k, m] (and (contains? m k) (nil? (m k))))","user":"578f5122e4b0ebec4cfb7592"},{"problem":134,"code":"#(and (contains? %2 %1)\n     (= (%1 %2) nil))","user":"56c04bd3e4b060a8e693e3a6"},{"problem":134,"code":"(fn [k hashmap]\n  (if (not (contains? hashmap k))\n    false\n    (if (nil? (hashmap k))\n      true\n      false)))","user":"55920e24e4b0604b3f94d587"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= (k m) nil)\n    false\n    )\n  )","user":"5589e88ae4b0277789237610"},{"code":"(fn [n s]\n\t(and (contains? s n) (= (s n) nil)\n    )\n)","problem":134,"user":"525ba7bbe4b0cb4875a45d28"},{"problem":134,"code":"(fn not-exists [k m]\n  (and (nil? (get m k)) \n       (contains? m k)))","user":"5688a01be4b0dcc4269f406d"},{"problem":134,"code":"(fn [key-arg map-arg] (nil? (key-arg map-arg :lol)))","user":"58ab572be4b0005cfeb1a72b"},{"problem":134,"code":"(fn [k mp] (and (contains? mp k) (= nil (k mp))))","user":"579c35fee4b05b1deef9ae04"},{"code":"(fn [k xs] (and (contains? xs k) (= nil (xs k))))","problem":134,"user":"5255bf1ee4b0541d1855b9f1"},{"code":"(fn has-nil-element [key map]\n  (and (contains? map key) (nil? (key map))))","problem":134,"user":"4eb7b049535d7eef30807377"},{"code":"(fn [k m] (if (= nil (get m k :not-found))\n           true\n           false))","problem":134,"user":"52a144b0e4b04e0c58e87bd6"},{"problem":134,"code":"(fn [key map] (if (contains? map key)\n                (nil? (key map))\n                false))","user":"5978c844e4b01722bebd4d18"},{"problem":134,"code":"(fn [key dict]\n  (let [val (key dict 0)]\n    (if(= val nil)\n      true\n      false)))","user":"555c0ea0e4b0b056612e2245"},{"problem":134,"code":"(fn [x y] ( if (contains? y x) (nil? (x y)) false))","user":"5816c5f5e4b0c0e9c07b8380"},{"problem":134,"code":"(fn [x v]\n  (if (and (contains? v x)\n           (= nil (get v x)))\n    true\n    false))","user":"5aafde49e4b073f1774425a1"},{"problem":134,"code":"(fn [k s]\n\t(if (contains? s k)\n\t\t(if (= (get s k) nil)\n\t\t\ttrue\n\t\t\tfalse)\n\t\tfalse))","user":"53a94b63e4b047364c044434"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k)\n  \t(= (get m k) nil)\n  \tfalse\n  )\n )","user":"5595e038e4b0c79f6e1db971"},{"problem":134,"code":"(fn [key map] (if (contains? map key)\n                (nil? (get map key))\n               false))","user":"5c6e7cc1e4b0fca0c1622752"},{"code":"(fn nil-value? [key map]\n  (if (contains? map key)\n    (nil? (map key))\n    false))","problem":134,"user":"533f09e1e4b085b17e897d9a"},{"problem":134,"code":"(fn [el map] (= nil (get map el 0)))","user":"59a72effe4b066c664927d94"},{"problem":134,"code":"(fn [k m]\n    (boolean (some \n               #(and (= k (first %)) \n                     (= nil (second %))) \n               m)))","user":"55dedb0de4b050e68259b3e8"},{"problem":134,"code":"#( and  (not= (find %2  %1) nil)  (= nil  ( get %2  %1)))","user":"534ab3f5e4b084c2834f4a6e"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (nil? (m k))\n    false))","problem":134,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn [x m] (if (= (find m x) nil) false (if (= (val (find m x)) nil) true false)))","problem":134,"user":"4f89bd1be4b033992c121c7d"},{"code":"(fn [key map] (keys map) (if (and (some #(= key %) (keys map)) (nil? (get map key))) true false))","problem":134,"user":"53838742e4b06839e8705ee0"},{"problem":134,"code":"(fn [k m](and (contains? m k) (= (get m k) nil)))","user":"5ed92e8fe4b0c7845d86b0dd"},{"code":"#( and (contains? %2 %) (= (get %2 %)  nil)  )","problem":134,"user":"4e78c208535db95036265722"},{"problem":134,"code":"(fn [x y]\n   (if (and (contains? y x) (nil? (get y x)))  true false) \n   )","user":"58d5c245e4b03c36ff7e5964"},{"problem":134,"code":"(fn[x y] (and (not (y x)) (contains? y x)))","user":"548485f5e4b0e286459a119f"},{"problem":134,"code":"(fn\n  [a b]\n  (let [ret (find b a)]\n(and (not (= ret nil)) (= (get b a) nil))))","user":"585b46c8e4b0f14aab7c8766"},{"code":"(fn [key dict] (and (nil? (key dict)) (contains? dict key)))","problem":134,"user":"4f555fe8e4b0a7574ea717fc"},{"code":"#(= (%1 %2 false) nil)","problem":134,"user":"4f46df00e4b0d56e7bb92bac"},{"problem":134,"code":"(fn [x h] (and (contains? h x) (nil? (x h))))","user":"5e2586afe4b05b4b01516167"},{"problem":134,"code":"#(nil? (% %2 2))","user":"503e91d4e4b06c4e0e1fa269"},{"code":"(fn [a c] (and (contains? c a) (nil? (get c a))))","problem":134,"user":"4fc4f68ae4b081705acca363"},{"code":"(fn containsX [x y] (and (contains? y x) (nil? (get y x))))","problem":134,"user":"50a0d1e4e4b08df8156e9e51"},{"problem":134,"code":"(fn [a b] (nil? (get b a 1)))","user":"5e950178e4b0fbed045a3801"},{"problem":134,"code":"#(if (= (%2 %1) nil) (if (= %2 (conj %2 [%1 nil])) true false) false)","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":134,"code":"#(not (get %2 %1 'not-found))","user":"53fc5ec2e4b0de5c4184859e"},{"problem":134,"code":"(fn [thing listy]  (and(contains? listy thing)(=(get listy thing)nil)))","user":"5ab4fd4ae4b073f17744262b"},{"code":"(fn [key map]\n    (and\n        (not (nil? (some #(= % key) (keys map))))\n        (nil? (map key))))","problem":134,"user":"4ebc64db535dfed6da9c6d82"},{"code":"(fn [k s]\n  (and (contains? s k) (nil? (get s k))))","problem":134,"user":"519136e9e4b0f8ef0be96c01"},{"problem":134,"code":"(fn [x coll] \n  (and (contains? coll x ) (nil? (get coll x))))","user":"5ac04101e4b073f177442737"},{"problem":134,"code":"(\n\tfn function [keyz listz] \n  \t(\n    \tand (contains? listz keyz) (nil? (listz keyz))\n    )\n)","user":"548018e8e4b0c51c1f4d7333"},{"problem":134,"code":"(fn [x list] (if (and (= (get list x) nil)\n                      (contains? list x))\n               true\n               false))","user":"5bba41efe4b0a20761a235e2"},{"problem":134,"code":"#(if (contains? %2 %1)\n            (= (get %2 %1) nil) false)","user":"5c1cb699e4b0efcb0b05b23d"},{"code":"(fn [a b] (= a :a))","problem":134,"user":"538d8bb8e4b0b51d73faae71"},{"problem":134,"code":"(fn n_n[k m] (if (contains? m k) (= (m k) nil) false))","user":"5550e966e4b00713264bd9b3"},{"code":"(fn [k m]  (nil? (get m k :false)))","problem":134,"user":"4ffee04de4b0678c553fc3f6"},{"code":"(fn [x coll]\n  (if (contains? coll x)\n    (if (= (x coll) nil)\n      true\n      false)\n  false))","problem":134,"user":"4f6ba7bce4b07046d9f4efb0"},{"code":"#(= (get %2 %1 :t) nil)","problem":134,"user":"4e580746535d8a8b8723a28c"},{"code":"#(nil? (get %2 % :foo))","problem":134,"user":"4ebf11bc535dfed6da9c6d9c"},{"code":"#(nil? (get %2 %1 \"notfound\"))","problem":134,"user":"4fff7246e4b0678c553fc3ff"},{"problem":134,"code":"(fn [k, coll]\n  (nil?\n    (get coll k \"missing\")))","user":"549674cde4b0b312c081ff66"},{"code":"#(not (%2 % 1))","problem":134,"user":"4e823ed7535db62dc21a62c7"},{"problem":134,"code":"#(= nil (get %2 %1 \"\"))","user":"5b97c521e4b0c0b3ffbd4a9a"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"toto\")))","user":"543272b8e4b0dad94371f2ef"},{"problem":134,"code":"#(let [k %1, m %2]\n   (if (= (get m k true) nil) true false))","user":"57ecc16fe4b0bfb2137f5b83"},{"problem":134,"code":"#(not (%2 % 2))","user":"542c56aae4b0dad94371f2a4"},{"problem":134,"code":"(fn [key map]\n   (nil? (key map true)))","user":"5b5efecde4b0c6492753e6e6"},{"problem":134,"code":"(fn [x dic] (and (contains? dic x) (nil? (x dic))))","user":"56df62eee4b0ca2494a095f0"},{"problem":134,"code":"(fn [lookup dictionary]\n  (not (get dictionary lookup \"missing\")))","user":"561fc0d0e4b064ca9f4b16d2"},{"code":"(fn [key map] (->> (keys map) (filter #(= % key)) (count) (< 0) (and (= nil (key map)))))","problem":134,"user":"53756f8be4b06839e8705e14"},{"problem":134,"code":"(fn [ keey maap] \n            (nil? (get maap keey :no)))","user":"58bdb36fe4b0888cdc949d35"},{"code":"#(nil? (%2 %1 :foo))","problem":134,"user":"5009fd0ae4b03d00572d2d70"},{"problem":134,"code":"(fn [k m] \n  (if(= nil (k m \"und\"))\n  \ttrue\n  \tfalse))","user":"5db1e852e4b010eb3c36cd0a"},{"problem":134,"code":"(fn [k, m] (= nil (and (contains? m k) (get m k))))","user":"559bdfabe4b066d22e731f5b"},{"problem":134,"code":"(fn [k m] (and (contains? (set (keys m)) k) (nil? (get m k))))","user":"584d8724e4b0b7285a6f4e3e"},{"code":"#(if (and (contains? %2 %1)\r\n          (nil? (get %2 %1 \"stupid\")))\r\n    true\r\n    false)","problem":134,"user":"4ee40938535d10e5ff6f5375"},{"problem":134,"code":"(fn [k m]\n  (let [val (get m k false)]\n\t\t(nil? val)\n    )\n  )","user":"5b2229eee4b03cfeda66ed5b"},{"problem":134,"code":"(fn [k m]\n  #_=>   (and (contains? m k) (nil? (get m k))))","user":"5f974321e4b0715f5002d7f3"},{"problem":134,"code":"(fn[key col]( and (contains? col key) (= nil (key col)) ))","user":"54ca582be4b057c6fda3a259"},{"code":"(fn [k m] (boolean (and ((set(keys m)) k) (nil? (m k)))))","problem":134,"user":"4f03d0fe535dcb61093f6b6d"},{"problem":134,"code":"(fn [a-key b-map] (and (contains? b-map a-key) (nil? (a-key b-map))))","user":"5f1eebcee4b0f565ad998273"},{"problem":134,"code":"#(and (contains? %2 %1)\n  \t  (nil? (%1 %2)))","user":"57635e2de4b0994c1922fbbf"},{"code":"(fn [x s] \n  (if (= (s x) nil) (contains? s x) false))","problem":134,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"(fn\n  [k m]\n    (and\n      (contains? m k)\n      (nil? (m k))))","problem":134,"user":"4f8d340be4b02e764a0a51a8"},{"problem":134,"code":"(fn [key m] (not (get m key :false)))","user":"52cee992e4b07d0d72b27395"},{"problem":134,"code":"(fn func\n  [key map]\n  (and (contains? map key) (nil? (key map))))","user":"5dadd84ee4b0f8c104ccfc85"},{"problem":134,"code":"(fn [kw map]\n  (if (and (contains? map kw) (nil? (kw map)))\n    true\n    false))","user":"60919461e4b00e9e6653c3d7"},{"code":"#(and (not (% %2)) (contains? %2 %))","problem":134,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":134,"code":"(fn present\n  [k m]\n  (if (= nil (k m)) (contains? m k) false))","user":"588ce4aee4b05c141a2560a1"},{"problem":134,"code":"#(nil? (get %2 %1 \"not found\"))","user":"5372e7d9e4b06d7f452d9e02"},{"problem":134,"code":"(fn [entry hashmap]\n  (and\n   (contains? hashmap entry)\n   (= nil (hashmap entry))))","user":"54cb378be4b057c6fda3a273"},{"problem":134,"code":"(fn [k x] (= nil (get x k false)))","user":"56e2d320e4b03a7c14b85a3a"},{"code":"(fn [v m]\n  (if-let [[k v] (find m v)]\n    (nil? v)\n    false)\n)","problem":134,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"code":"(fn [k m]\n\t(and (contains? m k)\n\t     (nil? (get m k))))","problem":134,"user":"4e68fad4535d8ccf87e9fe93"},{"code":"(fn [k m] \n  (if (contains? m k)\n    (nil? (k m))\n    false))","problem":134,"user":"4eb1dd39535d7eef30807345"},{"problem":134,"code":"(fn [x y]\n  (and \n   (contains? y x)\n   (not (x y))))","user":"58cf8f97e4b03c36ff7e58b7"},{"problem":134,"code":"(fn\n  [k m]\n  (nil? (k m false)))","user":"5a03652ae4b01bb0ae8afd83"},{"problem":134,"code":"#(and ( contains? %2 %1) (nil? (%2 %1) ))","user":"53d1ba22e4b00fb29b221317"},{"code":"(fn [key map]\n  (and (contains? map key) (= nil (map key))))","problem":134,"user":"4f944f60e4b0dcca54ed6cc2"},{"code":"#(nil?\n  (get %2 %1 true)\n  )","problem":134,"user":"5094057fe4b097f48cc38593"},{"problem":134,"code":"(fn [k m] \n  (if (and (contains? m k) (nil? (k m))) true false))","user":"5db5d8b0e4b010eb3c36cd32"},{"problem":134,"code":"(fn [m k]\n  (if (contains? k m)\n    (= (k m) nil) false))","user":"561d6467e4b064ca9f4b16ad"},{"problem":134,"code":"(fn [k m](and (= nil (k m)) (contains? m k)))","user":"5d5f46a6e4b0c9e5857d5000"},{"code":"(fn [k kv] (nil? (get kv k k)))","problem":134,"user":"52225315e4b0e6a83c8925f9"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? m k)\n           (= (get m k) nil))\n    true\n    false))","user":"560a7775e4b05f002753defa"},{"code":"(fn [key map]\n  (and\n    (contains? map key)\n    (= nil (get map key))))","problem":134,"user":"51377c10e4b04059df19f305"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (if (not (%1 %2))\n     true\n     false)\n   false)","user":"5398123ee4b0b51d73faaef3"},{"problem":134,"code":"(fn [key map] (= nil (get map key \"missing\")))","user":"5bc9fb3be4b07a9b28b100e3"},{"problem":134,"code":"(fn [x y] (nil? (x y false)))","user":"545b9dd9e4b01be26fd74654"},{"code":"(fn [k m]\n  (if-let [v (find m k)] \n    (nil? (val v))\n    false))","problem":134,"user":"50eebf46e4b06330c1f87c61"},{"code":"(fn [k m](let [x (find m k)](if x (if (= nil (second x)) true false) false)))","problem":134,"user":"4fb069b1e4b081705acca266"},{"problem":134,"code":"(fn [x l] (if (contains? l x) (not (get l x)) false))","user":"53e76728e4b036ad0777e47c"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? m k) (nil? (k m)))\n  true\n  false))","user":"576a972ce4b0a07e8fc1811a"},{"problem":134,"code":"(fn [_key _map] (if (and (contains? _map _key) (= (get _map _key) nil))\n                  true\n                  false))","user":"5d59c3d0e4b02ba5928a682e"},{"code":"(fn [k m] (= nil (get m k true)))","problem":134,"user":"4df21dd0535d08e6dec9fe24"},{"problem":134,"code":"#(and\n  \t(contains? %2 %1)\n  \t(= (%1 %2) nil))","user":"5aaa2dc3e4b0d174b936c8f1"},{"problem":134,"code":"(fn [key map]\n  (if (find map key)\n    (nil? (key map))\n    false))","user":"57d174ede4b0bd073c20236c"},{"problem":134,"code":"(fn [a b] (nil? (if (contains? b a) (b a) 'something)))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"(fn [k m] (cond\n                    (not (contains? m k)) false\n                    (nil? (get m k)) true\n                    :else false\n                    ) )","problem":134,"user":"517a995de4b01aacecbecbef"},{"problem":134,"code":"(fn [key map] (nil? (get map key :null)))","user":"5ac91d90e4b0e27600da77bd"},{"problem":134,"code":"(fn nil-key-check [key map]\n   (nil? (get map key \"sentinel\")))","user":"55fb5b89e4b0f488688e0662"},{"problem":134,"code":"(fn [k m] \n  ( if (contains? m k) \n    (= (m k) nil) \n    false)\n  )","user":"54a1d643e4b09f271ff37c50"},{"code":"(fn [key map]\n  (and (contains? map key)\n       (nil? (key map))))","problem":134,"user":"4e6a2f93535d8ccf87e9feaa"},{"problem":134,"code":"#(nil? (get %2 %1 :plabeholder))","user":"56877fcbe4b0dcc4269f405e"},{"code":"#(nil? (%2 % 6))","problem":134,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":134,"code":"#(if (contains? %2 %1)\n  (nil? (get %2 %1))\n  false\n  )","user":"550a3fa4e4b06e50f9beb12d"},{"code":"(fn [k,m] \n  (if (contains? m k)\n\t(if (get m k) false true)\n\tfalse\n  )\n)","problem":134,"user":"53038619e4b0d8b024fd3742"},{"code":"(fn\n  [k m]\n  (and (contains? m k) (nil? (m k))))","problem":134,"user":"51e780dae4b0730ab87cf353"},{"problem":134,"code":"(fn [tkey tmaps]\n  (and (contains? tmaps tkey)\n       (nil? (tmaps tkey))))","user":"570e43d8e4b0b0fb43fd06eb"},{"problem":134,"code":"#(and \n  (contains? %2 %1)\n  (nil? (%1 %2)))","user":"525b142fe4b0cb4875a45d05"},{"problem":134,"code":"(fn [inputkey inputmap] (if (contains? inputmap inputkey) (nil? (get inputmap inputkey)) false))","user":"5b22cd0be4b08b1df1c3674f"},{"problem":134,"code":"(fn niler [key m] (and (contains? m key) (nil? (key m))))","user":"53b9dae0e4b047364c0444ef"},{"code":"#(and (contains? %2 %1) (= (%2 %1) nil ) )","problem":134,"user":"518c5236e4b087e178201de0"},{"problem":134,"code":"#(= (get %2 %1 \"not found\") nil)","user":"52ed7458e4b0a18b0f5dd9ed"},{"code":"(fn [map-key map-coll]\n  (if (contains? map-coll map-key)\n      (nil? (map-coll map-key))\n      false))","problem":134,"user":"4f0348b4535dcb61093f6a84"},{"problem":134,"code":"(fn [x y] \n  (if (contains? y x) \n    (if (= nil (y x))\n      true \n      false) \n    false)\n  )","user":"60070144e4b074f607df665e"},{"code":"(fn iffnil [x,ls] (if (and (contains? ls x) (= (x ls) nil)) true false))","problem":134,"user":"4f84f6c3e4b033992c121c3d"},{"problem":134,"code":"( fn [ k map ] ( nil? ( get map k true ) ) )","user":"57561529e4b02ea1147992d3"},{"code":"#(nil? (get %2 %1 't))","problem":134,"user":"4f038567535dcb61093f6b0c"},{"code":"(fn [x m] ( if (find m x)(nil? (m x)) false))","problem":134,"user":"50a4cbbee4b0344e360f3bc2"},{"code":"(fn contnil [key coll] (if (contains? coll key)\n(nil? (key coll))\nfalse))","problem":134,"user":"4e123905535d04ed9115e7ce"},{"problem":134,"code":"(fn [key map]\n  (nil? (map key :default)))","user":"5776e21de4b0979f89651642"},{"code":"(fn [key map] (= (get map key false) nil))","problem":134,"user":"513953f1e4b0a5db03d727e2"},{"code":"(fn [key map](if (and (contains? map key) (= (key map) nil)) true false))","problem":134,"user":"4e67b9fc535d8ccf87e9fe82"},{"problem":134,"code":"(fn [k, m] (nil? (m k false)))","user":"53c5b137e4b00fb29b221292"},{"problem":134,"code":"(fn [x y] (= (get y x 1) nil))","user":"5450d992e4b0e397800069a5"},{"problem":134,"code":"(fn [skey smap] (and (contains? smap skey)\n                     (nil? (skey smap))))","user":"573e4be9e4b05c31a32c0829"},{"problem":134,"code":"(fn [key, map] \n  (and \n   (contains? map key) \n   (nil? (get map key))))","user":"5c7c78c9e4b0d597f478ca94"},{"problem":134,"code":"(fn funky-func [mikey theMap] \n  (= nil (get theMap mikey \"missing\"))\n  )","user":"5dcc651de4b02b31cc3da3c8"},{"problem":134,"code":"#(= nil (get %2 %1 :v))","user":"577832f4e4b0979f8965165b"},{"problem":134,"code":"; original solution\n#_(fn\n  [k m]\n  (if \n    (contains? m k)\n    (= (k m) nil)\n    false))\n\n; clever, learned this later than you can specify a default value\n; in case the key is not found.\n#(= (% %2 false) nil)","user":"54d267e0e4b0e8a36923e5f3"},{"problem":134,"code":"(fn nil-key? [a b]\n  (nil? (a b false)))","user":"5af554e8e4b0cc2b61a3bca6"},{"problem":134,"code":"(fn myfn [k m]\n                         (and \n                          (contains? m k)\n                          (nil? (k m))))","user":"58765038e4b01531a375ea7e"},{"problem":134,"code":"#(= nil (get  %2 %1 \"fal\") )","user":"5735ac67e4b0cd1946bd102b"},{"problem":134,"code":"(fn [k mp]\n  (and (contains? mp k)\n       (not (get mp k))))","user":"5e066185e4b0978307768fa4"},{"code":"(fn get-is-key-null [the-key, the-map] (= nil (get the-map the-key :none)))","problem":134,"user":"514cc029e4b019235f6c057c"},{"problem":134,"code":"(fn [k m]\n   (if (contains? m k)\n     (not (get m k))\n     false))","user":"5ab23c99e4b073f1774425e2"},{"problem":134,"code":"(fn [k m] (and (contains? (set (keys m)) k) (= (m k) nil)))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":134,"code":"(fn is-nil [x y]\n  (= nil (get y x false)))","user":"5703d21ae4b08d47c97781ff"},{"problem":134,"code":"(fn \n\t[given-key given-map]\n\t\t( if(contains? given-map given-key) (if ( = (get given-map given-key) nil ) true false )false ) )","user":"5e381434e4b01d43a70e8db4"},{"code":"#(not (%2 % 1838313))","problem":134,"user":"518644bce4b0da5a5be3baca"},{"problem":134,"code":"#(nil? (%1 (conj {%1 1} %2)))","user":"543addb0e4b032a45b869329"},{"problem":134,"code":"(fn [key map]\n  (and\n   \t(contains? map key)\n  \t(= (key map) nil)))","user":"56175cf9e4b06b1bb2182a0f"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)\n       (nil? (get m k false))))","user":"5245af03e4b08ba239308124"},{"code":"#(and (contains? %2 %1)\n      (nil? (%2 %1)))","problem":134,"user":"4db045b5838c48654951d9be"},{"problem":134,"code":"(comp nil? #(%2 %1 -1))","user":"56eab346e4b04a395b9a0410"},{"problem":134,"code":"#(and (contains? %2 %1)(nil? (%2 %1)))","user":"542a348be4b01498b1a71b3f"},{"code":"#(nil? (get %2 %1 :not-here))","problem":134,"user":"4f9acea6e4b0dcca54ed6d10"},{"code":"(fn [a b] \n(if (contains? b a)\n(nil? (get b a))\nfalse))","problem":134,"user":"518aec06e4b06da86c1973c2"},{"code":"#(nil? (if (contains? %2 %1) (%1 %2) false))","problem":134,"user":"52ac2db3e4b0c58976d9ac82"},{"problem":134,"code":"(fn [entry hash_map]\n  (if (and (contains? hash_map entry) (nil? (hash_map entry))) true false))","user":"5ea5881fe4b00a66d4a951a8"},{"problem":134,"code":"#(= nil (get %2 %1 42))","user":"4edb1774535d10e5ff6f5315"},{"code":"(fn [key map]\n  \t\t(nil? (key map 0)))","problem":134,"user":"4e50c894535dc968683fc4ee"},{"problem":134,"code":"(fn [x y] (and (contains? y x)\n               (nil? (x y))))","user":"544673c0e4b032a45b8693b0"},{"code":"#(let [k (gensym)] (= nil (% %2 k)))","problem":134,"user":"5357b241e4b04ce2eb3ed282"},{"problem":134,"code":"#(if (contains? %2 %1) (if (= (get %2 %1) nil) true false) false)","user":"5a99b863e4b0d174b936c7ae"},{"code":"#(and (> (count(select-keys %2 [%1])) 0) (nil? (%2 %1)))","problem":134,"user":"503539dee4b0ed9c821488f6"},{"problem":134,"code":"#(and (.containsKey %2 %) (nil? (get %2 %)))","user":"5d045162e4b0cc9c915881d3"},{"code":"(fn [a m] (let [huh (a m)] (and (nil? huh) (contains? m a)) ))","problem":134,"user":"52361d84e4b05f3be1c7c8e5"},{"code":"(fn [k m] (and (= nil (get m k)) (contains? m k)))","problem":134,"user":"504f3f13e4b0a02f9cffde60"},{"problem":134,"code":"(fn [k m] (if (and (= (m k) nil) (contains? m k)) true false))","user":"5484fab9e4b0e286459a11a6"},{"code":"(fn [k m]\n  (if\n    (contains? m k)\n    (nil? (m k))\n    false))","problem":134,"user":"50427899e4b0add3005c0fc2"},{"code":"(fn [k m] (and (contains? (set (keys m)) k) (nil? (k m))))","problem":134,"user":"4e9fde3c535d7eef3080729b"},{"problem":134,"code":"(fn[x y]\n   (and (nil? (y x)) (contains? y x)))","user":"57fbd83ee4b0d3187e90097b"},{"problem":134,"code":"(fn [key coll]\n  (and (contains? coll key) (nil? (key coll))))","user":"5ca09d40e4b048ec896c5b6c"},{"problem":134,"code":"(fn [k, m] (if (= (get m k true) nil) true false))","user":"577a55d2e4b0d3393e5deaf7"},{"code":"#(= nil (get %2 % 0))","problem":134,"user":"4e8a880b535d65386fec210d"},{"code":"(fn [k lst]\n  (and (contains? lst k)\n       (= nil (lst k))))","problem":134,"user":"4ffe4d43e4b0678c553fc3f1"},{"problem":134,"code":"(fn [k m]\n  (true? (and ((set (keys m)) k) (not (m k)))))","user":"53976599e4b0b51d73faaeea"},{"code":"#(nil?(get %2 %1 :x))","problem":134,"user":"4eda8d7c535d10e5ff6f530f"},{"problem":134,"code":"(fn\n  [k m]\n  (nil? (get m k \"\")))","user":"5b90cf27e4b0c0b3ffbd4a10"},{"problem":134,"code":"#(and (contains? %2 %1 ) (not (get %2 %1)))","user":"5d67d80be4b0db5d338d15fa"},{"code":"(fn [k h]\n  (and\n  (contains? h k)\n  (nil? (h k))))","problem":134,"user":"4f981f31e4b0dcca54ed6cef"},{"problem":134,"code":"(fn nil-key \n  [k m] \n  (and (contains? m k) (nil? (k m))))","user":"568bd448e4b0dcc4269f40a9"},{"problem":134,"code":"(fn [k m] \n  (and (contains? m k)\n       (nil? (m k))))","user":"54acf5c7e4b09f271ff37cdd"},{"code":"(fn [x y] \n  (if \n    (and (contains? y x) (= (get y x 1) nil))\n    true\n    false\n    )\n  )","problem":134,"user":"51fc44c5e4b0f1313d468a1b"},{"code":"#(if-not (get %2 %1 true) true false)","problem":134,"user":"4fb37882e4b081705acca2a0"},{"problem":134,"code":"(fn [key col] (and (contains? col key) (= (col key) nil)))","user":"5679a4d0e4b05957ce8c618d"},{"code":"(fn [k c]\n\t\t  (let [v (c k 3)]\n\t\t\t(if (= v nil)\n\t\t\t\ttrue\n\t\t\t  false)))","problem":134,"user":"51f2851fe4b0210f90e7454b"},{"problem":134,"code":"(fn\n  [key map] \n\t(and \n     (= (map key) nil)\n     (contains? map key)\n   \t))","user":"51d6f660e4b0154f82ab92f5"},{"problem":134,"code":"(fn [clojKey clojMap]\n  (if (and (contains? clojMap clojKey) (= nil (clojKey clojMap)))\n    true\n    false))","user":"5e16b820e4b0a047bd49f71f"},{"code":"(fn [k h]\n  (nil? (get h k :not-found)))","problem":134,"user":"4f16213f535d64f603146449"},{"code":"(fn [a b]\n  (if (and (contains? b a) (= (b a) nil))\n      true\n      false))","problem":134,"user":"4f859146e4b033992c121c46"},{"problem":134,"code":"(fn [k m]\n    (and\n      (contains? m k)\n      (=\n        (get m k)\n        nil\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn [k m] (and (= nil (k m)) (contains? m k)))","problem":134,"user":"53a511aae4b0b62ce3005735"},{"code":"(fn [k, m] (and (nil? (m k)) (contains? m k)))","problem":134,"user":"50a3f23ae4b08bbd0eb4ed2f"},{"problem":134,"code":"(fn fun1 [key m] (and (contains? m key) (nil? (second (find m key)))) )","user":"55c9bc1ee4b0e31453f649f1"},{"problem":134,"code":"#(nil? (get %2 %1(contains? %2 %1)))","user":"6081e475e4b0736b099e42d6"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k :not-exist)))","user":"5d11618de4b02c15ef021985"},{"problem":134,"code":"(fn [key map]\n (let [tkey (get (find map key) 0)\n       val (get (find map key) 1)]\n   (and (= nil val)\n        (= tkey key))))","user":"53c0f4dee4b00fb29b221259"},{"problem":134,"code":"(fn [k m] (if (contains? m k)\n            (= (k m) nil)\n            false))","user":"53de622ce4b0d874e779ae34"},{"code":"#(and (nil? (get %2 %1)) (contains? %2 %1))","problem":134,"user":"4ea31da2535d7eef308072c1"},{"problem":134,"code":"(fn [k m] (and \n            (contains? m k)\n            (nil? (m k))\n))","user":"5f985283e4b0715f5002d800"},{"code":"#(nil? (%2 % 3))","problem":134,"user":"4f9597e0e4b0dcca54ed6cd4"},{"problem":134,"code":"(fn\n  [k m]\n  (if (contains? m k)\n    (nil? (m k))\n    false))","user":"5ec7d7f2e4b08d0ec38692e1"},{"problem":134,"code":"(fn [k m]\n  (if(and ((set (keys m)) k)\n       (nil? (k m)))\n    true false))","user":"5a6b2995e4b0512ff01cda37"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k (Object.))))","user":"548c6673e4b0e286459a1209"},{"code":"(fn [k m] (nil? (k m :gone)))","problem":134,"user":"4ee446b1535d10e5ff6f5376"},{"problem":134,"code":"(fn [ourKey ourMap]\n  (and (= (ourKey ourMap) nil) (contains? ourMap ourKey)))","user":"594c0bd7e4b07ddc2dafae56"},{"problem":134,"code":"(fn nilkey [key map] (and (contains? map key) (nil? (get map key))))","user":"55ae6367e4b03311e7b732bc"},{"code":"(fn [k m]\n  (nil? (get m k 2)))","problem":134,"user":"4f0399c4535dcb61093f6b34"},{"code":"#(if (and (contains? %2 %) (nil? (% %2))) true false)","problem":134,"user":"501668b4e4b052339a490e77"},{"code":"(fn [x y]\n  (if (contains? y x)\n    (if (nil? (x y)) true false) false))","problem":134,"user":"4ea09d5c535d7eef308072a9"},{"code":"(fn [k map]\n  (and (contains? map k)\n       (nil? (k map))))","problem":134,"user":"5055899de4b0ce54f56f03fd"},{"code":"(fn [k m] \n  (and (contains? m k) (nil? (get m k)))\n)","problem":134,"user":"4f94dab7e4b0dcca54ed6cc6"},{"code":"(fn [k, x] (and (contains? x k) (= nil (k x))) )","problem":134,"user":"4faa7f87e4b081705acca1f6"},{"problem":134,"code":"(fn [k dict]\n  (and (contains? dict k) (nil? (dict k))))","user":"5cec07fce4b0a17bb84e2bf0"},{"code":"(fn null[x y](and (contains? y x)(nil?(val(find y x)))))","problem":134,"user":"4eb2f89a535d7eef30807353"},{"problem":134,"code":"(fn [key coll]\n  (if (contains? coll key)\n    (nil? (key coll))\n  \tfalse))","user":"5cc4b34de4b0ccb061962805"},{"code":"(fn [k s]\n  (if (contains? s k)\n    (= (k s) nil)\n    false))","problem":134,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":134,"code":"#(nil? (get %2 %1 \"nope\"))","user":"5787ce76e4b0ebec4cfb750e"},{"code":"#(and (nil? (%1 %2)) (not= nil (%1 (set (keys %2)))))","problem":134,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":134,"code":"(fn [key m]\n   (and (contains? m key) (nil? (m key))))","user":"53e3e852e4b036ad0777e407"},{"code":"#(nil? (get %2 %1 (Object.)))","problem":134,"user":"4f169a0f535d64f60314644c"},{"problem":134,"code":"#(and (contains? %2 %1) (nil? (%2 %1 0)))","user":"572ca54ae4b0cd1946bd0f59"},{"code":"#(and (contains? %2 %) (nil? (%2 %)))","problem":134,"user":"4ea1b9e4535d7eef308072b8"},{"problem":134,"code":"(fn [k m] (if (find m k)\n            (nil? (m k))\n            false))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":134,"code":"(fn contains-nil? [k coll]\n  (and (contains? coll k) (nil? (get coll k))) )","user":"57ca95f2e4b05aa3c4741d3b"},{"problem":134,"code":"(fn [x,y] \n  (and \n  \t(contains? y x) \n   \t(nil? (get y x nil))\n  )\n)","user":"54283a7ae4b01498b1a71b2f"},{"problem":134,"code":"#(= (%2 %1 :o) nil)","user":"5e03a15be4b0a607a9a45d5e"},{"code":"#(nil? (%2 %1 '()))","problem":134,"user":"4dd7458d535d2dad7130b5cf"},{"code":"(fn [k xs]\n  (and (contains? xs k)\n       (nil? (k xs))))","problem":134,"user":"5188c611e4b0bdff0e072d56"},{"code":"#(nil? (get %2 %1 :n))","problem":134,"user":"4ee9ddb8535d93acb0a66896"},{"code":"(fn f [k c] (let [e (find c k)] (and (not (nil? e)) (nil? (val e)))))","problem":134,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":134,"code":"(fn [v k]\n (and  (contains? k v) (nil? (get k v))))","user":"5b227f5ae4b03cfeda66ed63"},{"code":"(fn [k, m] (and (contains? m k) (nil? (k m))))","problem":134,"user":"4f0f3725535d0136e6c22337"},{"problem":134,"code":"(fn\n  [%1 %2]\n  (if (and (contains? %2 %1) (= nil (get %2 %1)))\n    true\n    false))","user":"53d6b266e4b0e771c3025459"},{"code":"#(if (%2 %1)\n   false\n   (if (= ((merge {%1 \"TEST\"} %2) %1)\n          nil)\n     true\n     false))","problem":134,"user":"51460e4ce4b04ef915e37314"},{"problem":134,"code":"(fn[x y](and (nil? (get y x)) (contains? y x)))","user":"55679198e4b0c656e3ff1843"},{"problem":134,"code":"(fn nil-val? [x y]\n  (and (contains? y x) (nil? (y x))))","user":"5818ac51e4b0c0e9c07b83c1"},{"problem":134,"code":"(fn nil-tester [key map]\n  (if (contains? map key) ; returns true if there's a value\n    (if (nil? (map key))\n      true    ; returns true if and only if there is a value and it's nil\n      false)  ; otherwise, returns false\n    false) ; that there key ain't registered\n  )","user":"6036b21ce4b0d5df2af222de"},{"problem":134,"code":"(fn [x l] (and (contains? l x) (nil? (get l x))))","user":"50015be1e4b0678c553fc41a"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k true)))","user":"53767991e4b06839e8705e25"},{"code":"(fn [k m]\n  (nil? (get m k :missing)))","problem":134,"user":"4e6a73d0535d8ccf87e9fee7"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? m k) (= nil (m k)))\n    true\n    false))","user":"574b5ccee4b02ea114799209"},{"problem":134,"code":"(fn [a b] (and (contains? b a) (nil? (get b a ))))","user":"537df696e4b06839e8705e94"},{"problem":134,"code":"(fn [key map]\n  (and (contains? map key)(nil? (get map key)))\n  )","user":"5d5c6675e4b09db18d4482ec"},{"code":"#(if (contains? %2 %1)\n        (nil? (%2 %1))\n        false)","problem":134,"user":"52f28593e4b05e3f0be25ef9"},{"code":"#(if (contains? %2 %1) (= (%1 %2) nil) false)","problem":134,"user":"532ae82be4b09d4e7a9b552b"},{"problem":134,"code":"(fn [key hm] (and (contains? hm key) (nil? (get hm key))))","user":"589c6914e4b00487982d535d"},{"problem":134,"code":"(fn [k m] (and (= (k m) nil) (= k (or :a :b ))))","user":"593744abe4b02506e01a299b"},{"problem":134,"code":"#(if (and (nil? (%1 %2)) (find %2 %1)) true false)","user":"55b0f5bfe4b002ce9d5cbc28"},{"code":"#(and (contains? %2 %1)\n      (nil? (%1 %2)))","problem":134,"user":"503c21c2e4b0fc0f99c2e551"},{"problem":134,"code":"#(nil? (get (conj {:c 3} %2) %1))","user":"564e719ee4b0284900eef69b"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k :foo)))","user":"577abecfe4b0d3393e5deb06"},{"code":"#(and (contains? %2 %)(nil? (%2 %)))","problem":134,"user":"50de11b2e4b061dbdced7217"},{"problem":134,"code":"(fn [key map] (nil? (get map key \"missing\")))","user":"58c4492be4b021aa9917ed27"},{"problem":134,"code":"(fn [key seq] (and (contains? seq key) (nil? (key seq))))","user":"5cb47a0fe4b026601754b91b"},{"problem":134,"code":"(fn [k coll] (and (= nil (k coll)) (contains? coll k)))","user":"578e2829e4b0ebec4cfb757d"},{"code":"(fn [key map]\n  (and (contains? map key)\n       (= nil (key map))))","problem":134,"user":"4e932f38535dbda64a6f6b0c"},{"problem":134,"code":";;(fn [key map]\n;;  (and (contains? map key) (= (get map key) nil)))\n\n(fn [key map]\n  (= (get map key \"missing\"), nil))","user":"53df4292e4b0d874e779ae40"},{"problem":134,"code":"(fn[z y]((comp nil? get) y z \"missing\"))","user":"571456f1e4b07c98581c3abb"},{"problem":134,"code":"(fn [k x] (if (contains? x k) (nil? (k x)) false))","user":"53a2ec2be4b0f1fc74538830"},{"code":"(fn [x f] (and (contains? f x) (nil? (f x))))","problem":134,"user":"4f03822f535dcb61093f6b03"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)\n    (if (= nil (get y x))\n      true\n      false)\n    false))","user":"55245232e4b0882d96d091c0"},{"problem":134,"code":"(fn [k m]\n\t(if (and (not (k m)) (contains? m k))\n\t\ttrue\n\t\tfalse))","user":"59b62f8de4b05c620303ca1f"},{"problem":134,"code":"(fn [a-key a-map] (nil? (get a-map a-key \"missing\")))","user":"53fce5bae4b0de5c418485df"},{"code":"(fn [x y]\n  (and (contains? y x) (nil? (get y x))))","problem":134,"user":"52474133e4b05ef8e38e635e"},{"problem":134,"code":"(fn f[k m] (if(and (contains? m k) (nil? (k m)))\n               true\n               false))","user":"56a72c0de4b0542e1f8d14f7"},{"code":"(fn [x y] (and (contains? y x) (= nil (x y) ) ))","problem":134,"user":"524b524ce4b09eba1c0223d1"},{"problem":134,"code":"(fn [k m] (and \n           (contains? m k)\n           (= nil (get m k))\n          ))","user":"5578f292e4b05c286339e08f"},{"problem":134,"code":"(fn [x y] (if (= (get y x \"missing\") nil) true, false))","user":"54b402dce4b05787c3b16388"},{"code":"(fn [key map] (if (= nil (get map key false))true false))","problem":134,"user":"534e1f56e4b084c2834f4aae"},{"problem":134,"code":"(fn [k, d] (= nil (get d k true)))","user":"5c527129e4b0fb8c5ffd99de"},{"code":"(fn [k m]\n  ;(and (contains? m k)\n  ;     (nil? (get m k)))\n  (= [k nil] (find m k)))","problem":134,"user":"4efa3d4b535dced4c769f270"},{"code":"(fn [k l]\n  (if (contains? l k)\n    (nil? (k l))\n    false\n  )\n)","problem":134,"user":"52b5137de4b0c58976d9ad36"},{"problem":134,"code":"(fn [k m]\n  (and\n  \t(contains? m k) \n  \t(= (k m) nil)))","user":"4ec56864535d6d7199dd369d"},{"problem":134,"code":"(fn [k m]\n (if (contains? m k)\n    (= nil (get m k))\n    false\n  )\n)","user":"5c0fedade4b01240ff567157"},{"code":"(fn [k mp] (nil? (get-in mp [k] \\a)))","problem":134,"user":"50968de6e4b0aba4a9934919"},{"problem":134,"code":"(fn nil_map [k m] (if (contains? m k)  (if (= (k m) nil) true false) false))","user":"52c70127e4b0c2d177d6211a"},{"problem":134,"code":"(fn iff\n    [x m]\n    (nil? (get-in m [x] 0)))","user":"5bef02ede4b0a6d31fed2138"},{"problem":134,"code":"#(nil? (%1 %2 :file-not-found))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":134,"code":"(fn [k m]\n  (cond\n   (nil? (first m)) false\n   (= (first (first m)) k) (nil? (second (first m)))\n   :else (recur k (rest m))))","user":"51c116d4e4b0c9c822882942"},{"code":"(fn [k m] (= nil (m k false)))","problem":134,"user":"4ef0eaef535dced4c769f211"},{"problem":134,"code":"(fn [k m] (if (nil? (k m :def)) true false))","user":"5c9dcb36e4b048ec896c5b1d"},{"code":"(fn [a b] (not (b a 'arbitrarydefaultvalue)))","problem":134,"user":"51bee4afe4b013aa0d74b809"},{"code":"#(boolean (and ((set (keys %2)) %) (nil? (%2 %))))","problem":134,"user":"4daf907aedd6309eace4d17b"},{"problem":134,"code":"(fn [k m] \n  (and \n   (nil? (k m))\n   (not (= (get m k \"not found\") \"not found\"))))","user":"517e9526e4b09104ecebe7e2"},{"problem":134,"code":"(fn [x y]\n  (if (get y x \"not found\")\n    false\n    true))","user":"596a4fbce4b069c0a1a19800"},{"code":"(fn [key h] \n  (and\n    (contains? h key)\n    (= nil (key h))\n  )\n)","problem":134,"user":"4eed26af535d93acb0a668bb"},{"problem":134,"code":"(fn [k m] (and\n           (contains? m k)\n           (= (k m) nil)))","user":"576d4791e4b0979f8965155f"},{"code":"(fn [x y]\r\n  (cond\r\n    (= (find y x) nil) false\r\n    (= (get y x) nil) true\r\n    :else false))","problem":134,"user":"50206641e4b0cb6ebc0a42f5"},{"code":"#(if (and (contains? %2 %) (nil? (%2 %))) true false)","problem":134,"user":"53403110e4b085b17e897da6"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= (get m k) nil)\n    false))","user":"55268e8de4b0ffed3738f91f"},{"problem":134,"code":"#(nil? (%1 %2 :no))","user":"5286a2a9e4b0239c8a67ae1e"},{"code":"(fn [varr list] (if (and (=(get list varr) nil) (contains? list varr) ) true false  ))","problem":134,"user":"53830109e4b06839e8705ed8"},{"problem":134,"code":"(fn [x y] (if (contains? y x) \n            (nil? (x y))\n            false))","user":"5a2cfa85e4b09cafd31c7f61"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (if(%2 %1) false true)\n   false)","user":"5bd9eac4e4b0ed4b8aab4bfc"},{"code":"#(and (contains? %2 %) (nil? (% %2)))","problem":134,"user":"4daddc19c9a9d6ed4599dc57"},{"problem":134,"code":"(fn [k,m] (if (contains? m k) \n     (nil? (m k)) \n     false ))","user":"5d22c0f9e4b02ea6f0fb69f8"},{"code":"(fn hasnil [item coll]\n  (and (contains? coll item) (= nil (get coll item))))","problem":134,"user":"510cd1dde4b078ea71921124"},{"code":"(fn [x,y] (and (contains? y x) (nil? (val (find y x)))\n))","problem":134,"user":"4f710c28e4b07046d9f4f005"},{"code":"#(and(contains? %2 %)(nil? (% %2)))","problem":134,"user":"5032afece4b00c0952a257e9"},{"code":"(fn [k m]\n  (if (nil? (get m k \"not found\"))\n    true\n    false))","problem":134,"user":"516282c3e4b0e6d3c4734711"},{"code":"(fn [x mp]\n  (true? (and (some #(= % x) (keys mp))\n              (= nil (mp x)))))","problem":134,"user":"520dd6f4e4b0b022ef140cb8"},{"code":"(fn [key map] (nil? (get map key ())))","problem":134,"user":"4f2b1893e4b0d6649770a047"},{"code":"#(if(and (contains? %2 %1) (nil? (%1 %2))) true false)","problem":134,"user":"4e765170535d324fb2983d69"},{"problem":134,"code":"(fn [x y] (let [res (get y x \"not_found\")] (and (not= res \"not_found\") (nil? res))))","user":"5c9b848fe4b048ec896c5acf"},{"code":"(fn [k m]\n\n  (if (contains? m k)\n    (nil? (k m))\n    false\n    )\n  \n  )","problem":134,"user":"518d1b5be4b070277754617b"},{"problem":134,"code":"#(and (nil? (%1 %2)) (contains? (set(keys %2)) %1))","user":"51f38193e4b0fca5e8b48226"},{"code":"(fn [key map]\n  (if (and (contains? map key)\n           (= (map key) nil))\n      true\n      false))","problem":134,"user":"5097ea89e4b087ccf61a7af4"},{"code":"#(if (find %2 %)\n   (= (%2 %) nil)\n   false)","problem":134,"user":"5234870ee4b05e80434a505c"},{"problem":134,"code":"(fn [k m] (and (not (nil? (get (into #{} (keys m)) k))) (nil? (k m) ) ))","user":"58a9e872e4b01a0c0b232973"},{"code":"#(nil? (% %2 :x))","problem":134,"user":"513f0565e4b051389b345b3b"},{"problem":134,"code":"(fn [k l]\n  (and \n   (contains? l k)\n   (nil? (l k))))","user":"52b9cfb9e4b07a9af57922c5"},{"code":"(fn [id, ma] \n  (and (contains? ma id) (nil? (get ma id))))","problem":134,"user":"52108d97e4b080a8d9b9d63d"},{"code":"#(and (= nil (%1 %2)) (contains? %2 %1))","problem":134,"user":"502c26b4e4b0532a782a5e32"},{"code":"(fn [k m]\n  (if-not (contains? (set (keys m)) k)\n    false\n    (if (= (m k) nil)\n      true\n      false)))","problem":134,"user":"5175616ae4b0dea9bbfba576"},{"problem":134,"code":"(fn [k m] (if (not (contains? m k))\n            false\n            (if (k m)\n              false\n              true)))","user":"5dea3c0de4b0986d99407f95"},{"problem":134,"code":"(fn [x, mmap] (if (= x :a) true false))","user":"569f7bc2e4b0542e1f8d1494"},{"code":"(fn [x y] (and (contains? y x) (= (get y x) nil)))","problem":134,"user":"4f565bebe4b0a7574ea7181e"},{"problem":134,"code":"(fn [k h] (and (nil? (k h)) (contains? h k)))","user":"58b066dee4b0ebc645576cd9"},{"problem":134,"code":"#(nil? (%1 %2 :false))","user":"58cfbd7ae4b03c36ff7e58ba"},{"problem":134,"code":"(fn [key map]\n  (and (contains? map key ) (nil? (key map))))","user":"5693a53ee4b0dcc4269f4106"},{"code":"#(if (= (%1 %2 false) nil) true false)","problem":134,"user":"4ff64292e4b0678c553fc378"},{"code":"(fn my-find [key map]\n  (= nil  (get map key 1)))","problem":134,"user":"4f04d312535dcb61093f6be7"},{"code":"(fn [k,m] (if (and (contains? m k) (= (m k) nil)) true false))","problem":134,"user":"5117c31ee4b0e0897831a60c"},{"code":"(fn [key map] (and (not (nil? (find map key))) (nil? (get map key))\n             )\n  )","problem":134,"user":"53a065c2e4b0ca733b9744ad"},{"problem":134,"code":"#( nil? (%1 %2 :notnil) )","user":"55e46caae4b050e68259b451"},{"code":"#( if (and ((set (keys %2)) %1) (= nil (%1 %2))) true false )","problem":134,"user":"5032548ee4b0e78df07b092a"},{"problem":134,"code":"(fn [key coll]\n  (and (contains? coll key)\n       (= nil (key coll))))","user":"58e4eb80e4b056aecfd47c7a"},{"problem":134,"code":"#(and (= nil ( %1 %2)) (contains? %2 %1 ))\n;= nil","user":"5b819312e4b047b03b20378d"},{"code":"(fn [x m] (if (contains? m x) (= (m x) nil) false))","problem":134,"user":"50868795e4b004985b776e5e"},{"code":"(fn [k coll]\n  (if-let [key (some #{k} (keys coll))]\n    (if-not (k coll)\n      true\n      false)\n    false))","problem":134,"user":"50c113bee4b096f585049c37"},{"problem":134,"code":"#(and (contains? %2 %1) (nil? (%1 %2))  )","user":"5733ddb3e4b0cd1946bd0ffd"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k) \n       (nil? (get m k))))","user":"593870e6e4b02506e01a29d6"},{"problem":134,"code":"(fn true-if-nil [keyw col]\n  (let [val (keyw col)]\n    (and (nil? val) (contains? col keyw))))","user":"5d23bd56e4b02ea6f0fb6a0f"},{"problem":134,"code":"(fn [k h] (= (get h k false) nil))","user":"5e595637e4b027a2e10ac10e"},{"code":"(fn [thekey themap]\n  (and (not= nil (some #{thekey} (keys themap)))\n       (nil? (thekey themap))))","problem":134,"user":"52daf558e4b09f7907dd13c1"},{"code":"(fn [theKey theMap]\n  (and (contains? theMap theKey)\n      (nil? (theMap theKey))))","problem":134,"user":"4eb513fe535d7eef30807364"},{"code":"#(if (and (= nil (get %2 %1 nil)) (contains? %2 %1)) true false)","problem":134,"user":"4e78c2ba535db95036265723"},{"problem":134,"code":"(fn [k m] (nil? (get m k :a)))","user":"4ea882c7535d7eef308072fc"},{"problem":134,"code":"(fn [k l] (and (nil? (k l)) (contains? l k) )          )","user":"54874116e4b0e286459a11c3"},{"code":"(fn [k coll] (if (contains? coll k) (nil? (coll k)) false))","problem":134,"user":"4e1c2e16535d04ed9115e804"},{"problem":134,"code":"(fn [k1 m1]\n (not (empty? (map key (filter \n            #(and \n                (nil? (val %))\n                (= (key %) k1)\n               )\n            m1)))))","user":"541ddadbe4b01498b1a71a84"},{"code":"(fn [a b]\n  (if (contains? b a) (= nil (a b)) false))","problem":134,"user":"50989786e4b04e098a4c7274"},{"problem":134,"code":"(fn [x y]\n  (if\n      (and\n       (contains? y x)\n       (= nil (y x)))\n    true\n    false))","user":"59b2b093e4b0e1f4e384c8fd"},{"problem":134,"code":"#(nil? (%1 %2 '()))","user":"54a627bce4b09f271ff37c83"},{"code":"(fn [k m] (= nil (m k :not-found)))","problem":134,"user":"4f1103c7535d64f60314641e"},{"problem":134,"code":"#(and (contains? %2 %1)(= (second (find %2 %1)) nil))","user":"54497569e4b032a45b8693d2"},{"code":"(fn [x y]\n  (if (= nil (get y x false))\n  true\n  false\n  ))","problem":134,"user":"513a734de4b067e25a345ecb"},{"problem":134,"code":"(fn [x xs] (and (contains? xs x) (nil? (xs x))))","user":"53d6bc2fe4b0e771c302545a"},{"problem":134,"code":"(fn [k m] (if (and (contains? m k) (nil? (k m)))\n           true\n            false))","user":"5eff2b32e4b0cf489e8d7f0b"},{"code":"(fn find-nil [k m]\n  (let [result (find m k)]\n    (cond (= nil result) false\n          (= nil (second result)) true\n          :else false)))","problem":134,"user":"51baff1be4b0fe3ecfb46443"},{"problem":134,"code":"(fn [k m] \n  (and (= (get m k) nil) (contains? m k))\n  )","user":"59cfc234e4b0ef0a1e9b5b74"},{"code":"(fn [x y]\r\n  (if (= (get y x false) nil)\r\n    true\r\n    false))","problem":134,"user":"5008b795e4b0144d4f561e3e"},{"problem":134,"code":"(fn [k, m] \n  (and (contains? m k) \n       (nil? (m k))))","user":"5817ac60e4b0c0e9c07b8397"},{"problem":134,"code":"(fn [x y] ( and\n\t(contains? y x)\n\t(nil? (x y))\n\t))","user":"54dd167be4b024c67c0cf78f"},{"problem":134,"code":"(fn [k mp] (and (nil? (k mp)) (contains? mp k)))","user":"541377bee4b01498b1a719e2"},{"problem":134,"code":"(fn [k m] (if (find m k) (nil? (m k)) false))","user":"553e0b70e4b0a04f792994e8"},{"problem":134,"code":"#(and (contains? %2 %1) (= nil (get %2 %1)))\n\n      \n; OR: (fn [k m] (and (contains? m k) (= nil (get m k))))","user":"5e218bb7e4b05b4b01516123"},{"problem":134,"code":"#(nil? (get %2 %1 \"qwe\"))","user":"5a9d64c8e4b0d174b936c7eb"},{"code":"#(and (= (%1 %2) nil) (contains? %2 %1))","problem":134,"user":"4f0eeff3535d0136e6c22327"},{"problem":134,"code":"(fn [k m]\n  (and\n   (boolean (some #(= k %) (keys m)))\n   (nil? (m k))))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"(fn\n  [k m]\n  (cond\n   \t(contains? m k)\n   \t\t(nil? (k m))\n   \t:else\n   \t\tfalse))","problem":134,"user":"510591dde4b06d28cacc92eb"},{"code":"(fn [k m]\n  (and (contains? m k) \n       (nil? (m k))))","problem":134,"user":"4db1b3951254ad5b4805fa6f"},{"code":"(fn [k m]\n    (and (contains? m k) (nil? (k m))))","problem":134,"user":"50053d6ce4b0678c553fc45e"},{"problem":134,"code":"(fn [x y] (nil? (get y x 'something')))","user":"5619b22ee4b053970a773afe"},{"code":"(fn [this-key this-map] (\n    if (not= \"missing\" (get this-map this-key \"missing\"))\n    (if(= nil (get this-map this-key \"missing\")) true false)                                          \n    false\n  ))","problem":134,"user":"502aac6ae4b0614b52996118"},{"code":"#(nil? (%2 %1 1))","problem":134,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn [k m]\n     (and (contains? m k)\n          (nil? (m k))))","problem":134,"user":"52e087dde4b09f7907dd1412"},{"code":"#(and\n  (= nil (%1 %2) )\n  (contains? %2 %1) )","problem":134,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn [k m] (= nil (get m k 'not-found)))","problem":134,"user":"4e5f034b535d8a8b8723a2d9"},{"code":"(fn nil-key? [a x]\n\t(and\n\t (true? (contains? x a))\n\t (nil? (a x))))","problem":134,"user":"511589aae4b0ce5098ee73bf"},{"problem":134,"code":"(fn [k m]\n  (and (nil? (m k)) (= 1 (count (select-keys m [k])))))","user":"5705e404e4b0b0fb43fd0676"},{"problem":134,"code":"(fn [vkey vmap]\n  (and (contains? vmap vkey) (not (vkey vmap)))\n  )","user":"556ff203e4b09a3098a52526"},{"problem":134,"code":"(fn[x m] (and (contains? m x) (nil? (x m)) ))","user":"54651ef5e4b01be26fd746d5"},{"code":"#(nil? (%2 % :na))","problem":134,"user":"4fe99c8ee4b0547ebccb2467"},{"code":"(fn [k m]\n  (let [v (k m)]\n    (and (contains? m k) (nil? v))))","problem":134,"user":"4ec132a0535dfed6da9c6da9"},{"problem":134,"code":"(fn [x y] (if (nil? (get y x \"foo\")) true false))","user":"5a799077e4b03baeef9276c1"},{"problem":134,"code":"#(if (get %2 % \"UNICORNS\") false (not (get %2 %)))","user":"528e7740e4b0239c8a67aee0"},{"code":"(fn [avain mappi]\n  (and\n    (not (nil? (find mappi avain)))\n    (nil? (avain mappi)) \n   ))","problem":134,"user":"52b2c9e9e4b0c58976d9acf7"},{"problem":134,"code":"(fn[k m] \n  (and (nil? (k m))\n       (contains? m k)))","user":"55912230e4b027778923767a"},{"problem":134,"code":"#(= nil (%1 %2 1))","user":"553c05b7e4b09218d5f45011"},{"problem":134,"code":"(fn [v m]\n  (= (get m v :notfound) nil))","user":"58cd65fae4b03c36ff7e5889"},{"problem":134,"code":"(fn [key coll] (and (contains? coll key) (= nil (key coll)) ) )","user":"5f5a62b4e4b0a0bc16850aa6"},{"problem":134,"code":"(fn [k m] (case (get m k :nf)\n            nil true\n            false))","user":"56018dd4e4b04bb52996e18f"},{"problem":134,"code":"(fn [a m] (and (contains? m a) (= nil (a m))))","user":"5a551136e4b05d388ecb6c36"},{"problem":134,"code":"(fn [the-key the-map] (and (contains? the-map the-key) (nil? (the-map the-key))))","user":"550d9452e4b06e50f9beb15d"},{"code":"(fn [k l]\n  (= nil (get l k false)))","problem":134,"user":"508fd6bae4b0ea685a20f76b"},{"problem":134,"code":"(fn [k m]\n  (let [f (find m k)]\n    (and (not (empty? f)) (not (second f)))))","user":"558bb38fe4b0277789237631"},{"problem":134,"code":"#(nil? (%1 %2 \"x\"))","user":"5f3a8493e4b004f08c61c527"},{"problem":134,"code":"(fn [key coll] (nil? (get coll key :val)))","user":"5c5e3af7e4b01df32ab732c6"},{"code":"#(nil? (get %2 %1 3))","problem":134,"user":"4ef0f1a1535dced4c769f212"},{"problem":134,"code":"(fn [k m] \n  (and (contains? m k) \n       (nil? (get m k))))","user":"5ea580a3e4b00a66d4a951a7"},{"problem":134,"code":"(fn [k mymap]\n  (if (contains? mymap k)\n    (nil? (get mymap k))\n    false\n  )\n)","user":"5d72ad8fe4b02e6b30c93512"},{"code":"#(and (not (nil? (%1 (set (keys %2))))) (nil? (%2 %1)))","problem":134,"user":"50733b31e4b0e3170b5a869a"},{"problem":134,"code":"(fn [k coll] (if \n               (= nil (get coll k :default)) \n               true\n               false\n               )\n  )","user":"55f2c898e4b06e875b46ce4b"},{"problem":134,"code":"(fn [a-key a-map] (not(boolean (get a-map a-key :key-not-present))))","user":"56e48302e4b03a7c14b85a4e"},{"code":"(fn [x c] (if (contains? c x) (nil? (c x)) false))","problem":134,"user":"4dc1e1e4535d020aff1edf90"},{"problem":134,"code":"(fn [item hm]\n  (if (contains? hm item)\n    (if (= (hm item) nil)\n      true\n      false)\n    false))","user":"5f77d470e4b02876ed9fd0be"},{"code":"(fn m [e l]\n (if (not= (e l) nil)\n   false\n   (if (contains? l e)\n     true\n     false)))","problem":134,"user":"52828298e4b0757a1b17145b"},{"problem":134,"code":"#(= (get %2 %1 true) nil)","user":"5693cc39e4b0dcc4269f4108"},{"problem":134,"code":"#_(fn [k m] (\n           if (contains? m k)\n           (= (m k) nil) false)\n  )\n\n;#(if(contains? %2 %1)(= (%2 %1) nil)false)\n\n#(nil? (get %2 %1 1))","user":"57ee432de4b0bfb2137f5bb2"},{"problem":134,"code":"(fn [k m] \n   (and (contains? m k)\n        (nil? (k m))))","user":"55d3780ee4b0e31453f64a66"},{"problem":134,"code":"(fn [k m]\n  (and \n    (contains? m k) \n    (nil? (get m k))))","user":"520d3129e4b0b022ef140ca5"},{"code":"(fn [key coll] (and (contains? coll key)(nil? (coll key))))","problem":134,"user":"4f4c8faae4b03ad3f0c10c93"},{"code":"#(if (= (find %2 %1) nil)\n      false\n      (if (= (val (find %2 %1)) nil)\n          true\n          false\n      )\n)","problem":134,"user":"4fcf5292e4b03432b189f40e"},{"problem":134,"code":"(fn [x, coll] \n  (and \n   (contains? coll x)\n   (= nil (get coll x))))","user":"583ff3afe4b089d5ab817dda"},{"problem":134,"code":"(fn nil-key\n  [k m]\n  (if (contains? m k)\n    (if (nil? (get m k))\n      true\n      false)\n    false))","user":"5777c3d6e4b0979f8965164f"},{"problem":134,"code":"(fn [k m]\n  (= (get m k \"missing\") nil))","user":"5b88f0c0e4b047b03b203816"},{"problem":134,"code":"(fn [key col] (and (contains? col key) (= (key col) nil)))","user":"545a2da7e4b01be26fd74634"},{"code":"(fn [k m] (= (get m k \"x\") nil))","problem":134,"user":"4e6e1756535d5021c1a895fe"},{"code":"(fn [k m]\n  (not (get m k :not-found)))","problem":134,"user":"50294c28e4b0b33e9bf6fdef"},{"problem":134,"code":"(fn [k map] (and (contains? map k)(nil? (get map k)) ))","user":"58447708e4b089d5ab817e4b"},{"code":"(fn [x y] (and (contains? y x) (= (get y x)  nil)))","problem":134,"user":"504f0036e4b0e7ad84dbc4aa"},{"problem":134,"code":"(fn [_key _map]\n  (if (and (contains? _map _key)\n           (nil? (_map _key)))\n    true\n    false))","user":"55e1a205e4b050e68259b41e"},{"code":"(fn [x y] \n\t\t\t(if (and (contains? y x) (= (y x) nil))\n\t\t\t\ttrue\n\t\t\t\tfalse\n\t\t\t)\n\t\t)","problem":134,"user":"533a399de4b0e30313ee6cb9"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (if (nil? (%1 %2)) true false)\n   false)","user":"5ed5148ee4b016b56eae05d1"},{"problem":134,"code":"(fn [x {a x :as m}]\n  (and (contains? m x) (nil? a)))","user":"5fb7a87be4b08cb800c85b5f"},{"problem":134,"code":"(fn [k m]\n  (and \n   (contains? m k) \n   (nil? (k m))))","user":"576aea4fe4b0a07e8fc18126"},{"problem":134,"code":"(fn [k m]\n  (if (nil? (get m k :fail))\n    true\n    false))","user":"56ca0da9e4b0ea9b8538f715"},{"problem":134,"code":"(fn [k m] (and (not (k m)) (not (= (dissoc m k) m))))","user":"503c90aae4b06c4e0e1fa24b"},{"problem":134,"code":"#( nil? (%1  %2 false))","user":"5453af31e4b0e397800069cf"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k) (= (m k) nil)\n       true))","user":"57c4ef0be4b05aa3c4741cd8"},{"code":"(fn x [key mab] (and (contains? mab key) (= (key mab) nil)))","problem":134,"user":"5239caa6e4b0d705d026ef27"},{"problem":134,"code":"(fn [k m]\n  (if-let [e (find m k)]\n    (nil? (val e))\n    false))","user":"566b57e9e4b0a866af6896ad"},{"problem":134,"code":"(fn key-map \n  [x y]\n  (nil? (y x false)))","user":"5e9771dee4b0157ca96647d0"},{"problem":134,"code":"(fn [myKey myMap] \n  (and (contains? myMap myKey)\n       (= nil (get myMap myKey))))","user":"518261a4e4b0f2adb7336523"},{"code":"(fn [key map]\n  (and  (contains? map key) (nil? (get map key))))","problem":134,"user":"4ea5ba92535d7eef308072d9"},{"code":"#(and (nil? (%2 %1))\n       (contains? %2 %1))","problem":134,"user":"50cae881e4b0f75dcc9a6e51"},{"problem":134,"code":"(fn [key map] (if ( contains? map key ) (nil? (get map key)) false ) )","user":"5b6f72ede4b0c6492753e7dc"},{"code":"(fn [key map]\n  (if (= :nope (key map :nope))\n    false\n    (= nil (key map))))","problem":134,"user":"5256c8c7e4b0541d1855ba37"},{"problem":134,"code":"(fn foo [k m] (and (contains? m k) (nil? (m k))))","user":"53bf0913e4b0c98a41f5cc99"},{"code":"(fn [key map] (if (contains? map key)\n  (= (map key) nil)\n  false))","problem":134,"user":"5029dae5e4b023940c84aa44"},{"problem":134,"code":"(fn [k m] (if (and (contains? m k) (nil? (get m k))) true false))","user":"54f232f1e4b024c67c0cf8bf"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (= (k m) nil)))","user":"57fdd1cfe4b0d3187e9009bf"},{"code":"(fn [k,m] (and (contains? m k) (not (get m k))))","problem":134,"user":"4e8b98fc535d65386fec2124"},{"problem":134,"code":"#(if (= (get %2 %1 \"nil\") nil) true false)","user":"550fa523e4b06e50f9beb17a"},{"problem":134,"code":"#(if (and (contains? %2 %1) (nil? (get %2 %1)))\n           true false)","user":"5c596d6ce4b01df32ab73257"},{"code":"(fn [ k m ]\n  (and (contains? m k)\n       (= nil (k m))))","problem":134,"user":"4fbd292fe4b081705acca300"},{"code":"(fn [key map]\n  (= (get map key :nk) nil))","problem":134,"user":"52e44a22e4b09f7907dd144e"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (not (get m k))\n    false))","problem":134,"user":"4f92b194e4b0dcca54ed6cb1"},{"problem":134,"code":"#(and (not(nil? (find %2 %1))) (nil? (get %2 %1)))","user":"4f75eb33e4b0fbe0118ec565"},{"problem":134,"code":"(fn [k m]\n\t(and (contains? m k) (nil? (get m k))))","user":"598af379e4b02b9968b84ce6"},{"problem":134,"code":"(fn [x y] \n  (if (nil? (get y x))\n    (contains? y x)\n    false\n    )\n  )","user":"5710b136e4b09c608db70437"},{"code":"(fn contains [k col]\n  (and (nil? (k col)) (reduce #(if-not % (= %2 k) true) false (keys col))))","problem":134,"user":"4fc8769be4b0ee37620e1833"},{"problem":134,"code":"(fn[k,m](and (contains? m k) (= nil (m k))))","user":"5594f8aee4b0c79f6e1db95c"},{"code":"(fn [k m] (if (nil? (get m k :true)) true false))","problem":134,"user":"4f6c6d69e4b07046d9f4efba"},{"code":"(fn [k col] (if (nil? (find col k)) false (nil? (get col k))))","problem":134,"user":"52c1bd29e4b07a9af579236a"},{"problem":134,"code":"(fn [x y] (if (contains? y x) (identical? (y x)nil) false))","user":"5ceef51ee4b0aaa82f1129e9"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (nil? (get m k))\n                     ))","user":"5a6b15e9e4b0512ff01cda32"},{"code":"(fn [k m]\n  (if (contains? m k) (nil? (m k)) false))","problem":134,"user":"50493b52e4b06e84b772a23e"},{"code":"(fn [k h]\n  (let [result (find h k)]\n    (if (vector? result)\n        (nil? (second result))\n        false)))","problem":134,"user":"4ff66816e4b0678c553fc37a"},{"code":"#(cond \n  ((complement contains?) %2 %1) false\n  (nil? (%1 %2)) true\n  :else false\n  )","problem":134,"user":"4f320253e4b0d6649770a08d"},{"problem":134,"code":"(fn [somekey somemap] (if (nil? (get somemap somekey :not-found)) true false))","user":"5535442ee4b09218d5f44fad"},{"problem":134,"code":"(fn [key map]\n  (if (and (contains? map key)\n           (nil? (key map)))\n    true\n    false))","user":"5fea32f3e4b05ac5b16ea1aa"},{"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (nil? (get m k))))","problem":134,"user":"51a671d4e4b0740bfd1afd21"},{"problem":134,"code":"(fn [k m] (and \n           (contains? m k) \n           (nil? (k m))))","user":"5253de67e4b0541d1855b939"},{"problem":134,"code":"#(nil? (or (not (contains? %2 %))\n           (% %2)))","user":"554b8572e4b0a04f79299589"},{"code":"(fn [k m]\n  (if (k (set (keys m)))\n    (if (nil? (k m))\n      true\n      false)\n    false))","problem":134,"user":"4e1f9bb5535d04ed9115e80d"},{"code":"(fn [x y] (if \n  (and \n    (contains? y x) \n    (if (= (get y x) nil) true))\n  true false))","problem":134,"user":"4f3a4502e4b0e243712b1f0b"},{"code":"(fn [key map]                                                                                                                                                 \n  (and                                                                                                                                                        \n   (contains? map key)                                                                                                                                        \n   (nil? (get map key))                                                                                                                                       \n   ))","problem":134,"user":"4eea1a41535d93acb0a66899"},{"problem":134,"code":"#(if (contains? %2 %1)\n    (= (%1 %2) nil)\n    false)","user":"587cf197e4b01531a375eb2a"},{"code":"(fn [k coll]\n  (if (contains? coll k)\n    (nil? (get coll k))\n    false))","problem":134,"user":"4f98da04e4b0dcca54ed6cf7"},{"problem":134,"code":"(fn [a b] (if (and (some #{a} (keys b)) (nil? (a b))) true false))","user":"6040e6dbe4b0d5df2af2232a"},{"code":"#(nil? (% %2 :default))","problem":134,"user":"4ff83003e4b0678c553fc396"},{"code":"#(nil? (%2 %1 \"NA\"))","problem":134,"user":"4f036d9b535dcb61093f6ac1"},{"problem":134,"code":"(fn [x s] (and (nil? (x s)) (contains? s x)))","user":"574ec787e4b02ea114799249"},{"problem":134,"code":"(fn [k map] (if (and (contains? map k) (= nil (k map)))\n              true false))","user":"60ddf3ede4b022ea5d8e4522"},{"code":"(fn [k m]\n  (if (and (contains? m k)\n           (nil? (m k)))\n      true false))","problem":134,"user":"4e5fb634535d8ccf87e9fe4a"},{"problem":134,"code":"(fn [k m] (and (map? m)(contains? m k)(= (m k) nil)))","user":"5a3d33b3e4b001c08efc0cef"},{"problem":134,"code":"(fn [k m] (if (= nil (get m k :false)) true false))","user":"553aad97e4b09218d5f44ff9"},{"problem":134,"code":"(fn [k v] (and (contains? v k) (identical? (k v) nil)))","user":"5797d3d2e4b039eba2ecb106"},{"code":"(fn [a x]\n  (and (not (empty? (filter #(= a %) (keys x))))\n       (nil? (a x))))","problem":134,"user":"51f13b80e4b06a20a2523f38"},{"code":"(fn [k m] \n  (if (contains? m k)\n    (nil? (m k))\n    false))","problem":134,"user":"53070615e4b02e821686979e"},{"problem":134,"code":"(fn [key map]\n  (nil? (get map key 1)))","user":"54ce541de4b057c6fda3a2ac"},{"code":"#(nil? (get %2 % \"n\"))","problem":134,"user":"537f7e2ae4b06839e8705eb6"},{"code":"(fn [k m] (nil? (get m k :not-found)))","problem":134,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn isnil? [k m] (and (contains? m k) (= (m k) nil)))","problem":134,"user":"51bf4560e4b013aa0d74b817"},{"problem":134,"code":"#(and (nil? (%2 %1)) (contains? %2 %))","user":"57ac7710e4b0b8559636fc88"},{"problem":134,"code":"(fn [k dict] (= (dict k true) nil))","user":"57090dffe4b0b0fb43fd06a6"},{"problem":134,"code":"(fn [x y] (if (and (contains? y x) (=(y x) nil)) true false))","user":"56990b68e4b0542e1f8d143a"},{"problem":134,"code":"(fn [el coll]\n  (let [e (find coll el)]\n    (and (not (nil? e)) (nil? (val e)))\n    )\n  )","user":"5245e320e4b09dbe66b56177"},{"code":"(fn [key map] (nil? (get map key :np)))","problem":134,"user":"51473a70e4b0d520409ed394"},{"code":"(fn [x y] (nil? (get y x :notnil)))","problem":134,"user":"4f03688d535dcb61093f6aac"},{"problem":134,"code":"#(if (contains? %2 %1)\n    (nil? (get %2 %1))\n    false)","user":"5bcdb877e4b0e9689409ee02"},{"code":"(fn [key map]\n  (and (contains? map key) (nil? (map key))))","problem":134,"user":"4e6a60cd535d8ccf87e9fed7"},{"code":"(fn [k coll]\n  (cond (contains? coll k)(nil?(coll k)) :else false))","problem":134,"user":"529e3607e4b04e0c58e87b90"},{"code":"#(and (contains? %2 %1) (= nil (%2 %1)))","problem":134,"user":"4e821ca5535db62dc21a62c2"},{"problem":134,"code":"#(and (nil? (%1 %2)) (contains? %2 %1)  )","user":"5df51970e4b03c219ef1a38a"},{"problem":134,"code":"(fn [needle, haystack]\n  (and\n   (contains? haystack needle)\n   (not (needle haystack))\n   )\n)","user":"587fb546e4b0f1effa3b75f9"},{"problem":134,"code":"(fn [k m]\n (and (contains? m k) \n      (nil? (get m k))))","user":"5a796f13e4b03baeef9276ba"},{"code":"(fn [key coll] (nil? (get coll key true)))","problem":134,"user":"4f98ead0e4b0dcca54ed6cf8"},{"code":"(fn [key amap] \n  (if (contains? amap key)\n    (if (get amap key)\n      false\n      true)\n    false))","problem":134,"user":"502b04bee4b063e52107afac"},{"code":"(fn [k m]\n  (and \n    (contains? m k)\n    (nil? (m k))))","problem":134,"user":"4e7e8684535db169f9c79717"},{"problem":134,"code":"(fn [x y]\n  (and\n  \t(= x :a)\n  \t(= nil (y x))))","user":"557c6ca6e4b05c286339e0c4"},{"code":"(fn [k m] (nil? (get m k :undef)))","problem":134,"user":"51155b55e4b0ce5098ee73bc"},{"problem":134,"code":"(fn [key map] (if(contains? map key)(=(key map)nil) false))","user":"6001460ce4b074f607df6611"},{"code":"(fn [k m]\n  (and (contains? m k) (= (get m k) nil)))","problem":134,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(comp nil? #(%2 %1 :default))","problem":134,"user":"531ff852e4b08068f379edca"},{"code":"(fn [a-key a-map]\n  (if-let [pair (find a-map a-key)]\n    (nil? (second pair))\n    false))","problem":134,"user":"4f8cb9b2e4b02e764a0a51a6"},{"problem":134,"code":"(fn [val map] (and (nil? (get map val)) (contains? map val)))","user":"5852c239e4b0b7285a6f4eb8"},{"problem":134,"code":"(fn [k, m] (if (= (get m k \"not there\") nil) \n                     true \n                     false))","user":"57d1a0e6e4b0bd073c20236d"},{"problem":134,"code":"#(nil? (%2 %1 :c))","user":"5717e367e4b07c98581c3b1d"},{"problem":134,"code":"#(and (contains? %2 %1) (nil?(%1 %2)))","user":"5b138157e4b0cc2b61a3be51"},{"problem":134,"code":"(fn\n  [k m]\n  (if (= false (contains? m k))\n    false\n    (if (not= nil (k m))\n      false\n      true)))","user":"55ee7977e4b0121d4835fdee"},{"problem":134,"code":"(fn isANilKey [key map]\n  (and (nil? (get map key)) (contains? map key)))","user":"5a932f63e4b0d174b936c71b"},{"code":"(fn [k coll] (and (contains? coll k) (= (k coll) nil)))","problem":134,"user":"529d292fe4b04e0c58e87b74"},{"problem":134,"code":"(fn [key map]\n  (if (= nil (get map key \"missing\"))\n    true\n    false))","user":"5ef381a3e4b07c55ae4a053c"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n      (nil? (m k))\n    false))","user":"58ea5bdce4b056aecfd47d1b"},{"code":"(fn [x y] (if (contains? y x)\n              (nil? (x y))\n              false))","problem":134,"user":"4f4bbda0e4b03ad3f0c10c7b"},{"problem":134,"code":"(fn foo [input-key input-map] (if (and (contains? input-map input-key) (= (input-map input-key) nil) ) true false))","user":"550830cbe4b021ccfedb96b1"},{"problem":134,"code":"#(nil? (%2 %1 \"key's not there\"))","user":"54ccf107e4b057c6fda3a294"},{"code":"#(nil? (get %2 %1 \"not-found\"))","problem":134,"user":"4db3701e535df7e46ed9b6ce"},{"problem":134,"code":"(fn [k v]\n  (if (contains? v k)\n  (= (v k) nil)\n  false))","user":"5818e0c8e4b0c0e9c07b83ca"},{"problem":134,"code":"(fn[k m] (if (and (contains? m k) (nil? (m k))) true false))","user":"5bb33124e4b0a20761a2351c"},{"problem":134,"code":";(fn [k m]\n;  (and (contains? m k)\n;       (nil? (k m))))\n\n#(not (%1 %2 true))","user":"58ffaddee4b0438e51c2cffe"},{"problem":134,"code":"(fn [k m] (if (contains? m k)(nil? (k m)) false))","user":"534fa9dae4b084c2834f4acf"},{"problem":134,"code":"#(and (contains? %2 %) (= nil ( %2 %)))","user":"5d657de2e4b0db5d338d15da"},{"code":"(fn [k m] \n  (let [x (find m k)] \n    (if (nil? x) \n      false\n      (nil? (k m)))))","problem":134,"user":"537cb3ade4b06839e8705e7d"},{"problem":134,"code":"#(nil? (%2 % 1))\n\n;#(and (contains? %2 %) (nil? (%2 %)))","user":"54187e84e4b01498b1a71a1b"},{"problem":134,"code":"#(and (contains? %2 %1) (= (%2 %1) nil) )","user":"53ff5560e4b0de5c418485fd"},{"code":"(fn has-nil-value [key map]\r\n  (and (contains? map key) (nil? (key map))))","problem":134,"user":"4fe54ee8e4b0e8f79898fec3"},{"code":"(fn [a b] (and (contains? b a) (not (a b))))","problem":134,"user":"53716539e4b0fc7073fd6eb1"},{"code":"(fn [x m]\n  (and (true? (some (partial = x) (keys m)))\n       (= nil (m x))))","problem":134,"user":"4daf1076edd6309eace4d16f"},{"problem":134,"code":"(fn [k m] (and (contains? m k)(nil?(get-in m [k]))))","user":"5dcace6be4b02b31cc3da3b1"},{"problem":134,"code":"(fn [k m] (if (contains? m k) \n            (= (k m) nil)\n           false\n  \t))","user":"5dbe7fc9e4b09f47823971c9"},{"problem":134,"code":"(fn [element coll]\n  (and (contains? coll element)\n       (nil? (get coll element))))","user":"53a94512e4b047364c044433"},{"problem":134,"code":"(fn [k m]\n  (if(contains? m k)\n    (= (m k) nil)\n  \tfalse\n    )\n  )","user":"5ea7b04de4b00a66d4a951b6"},{"code":"#(let [{k % :or {k 1}} %2] (nil? k))","problem":134,"user":"505d4b21e4b0e6aca564be07"},{"code":"(fn [x y] (if (contains? y x) (if (= nil (get y x)) true false) false))","problem":134,"user":"52e68c90e4b09f7907dd1478"},{"problem":134,"code":"#(and\n\t(.contains (keys %2) %1)\n\t(nil? (%1 %2)))","user":"5a9c7174e4b0d174b936c7d8"},{"code":"(fn n [k m] (= nil (get m k false)))","problem":134,"user":"51e649bee4b0ab43cc26c214"},{"code":"#(nil? (%2 % %2))","problem":134,"user":"52b02329e4b0c58976d9acc5"},{"code":"#(nil? (get %2 %1 :not-nil))","problem":134,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"(fn [k m]\r\n  (and (contains? m k) (= (m k) nil)))","problem":134,"user":"5069d8c5e4b01dc6af13f838"},{"problem":134,"code":"(fn [k m]\n\t(if (contains? m k)\n      (= (m k) nil)\n      false))","user":"590d0bc8e4b047aa04b199fa"},{"code":"(fn [a b]\n  (and (= nil (a b)) (contains? b a)))","problem":134,"user":"50bf6f93e4b0ffd967a66cbf"},{"problem":134,"code":"#(and (not (nil? (some #{%1} (keys %2))))\n      (nil? (%2 %1)))\n\n;#(and (some #{%1} (keys %2))\n;      (nil? (%2 %1)))","user":"5bafd5c8e4b0a20761a234dd"},{"problem":134,"code":";; First check if the key is there and then if the key in the map is nil\n(fn [k m] (if (contains? m k) (= (m k) nil) false))","user":"548018e3e4b0c51c1f4d7331"},{"problem":134,"code":"(fn [k m] \n  (and \n   (contains? m k)\n   (= nil (k m))))","user":"5447e08ce4b032a45b8693c3"},{"problem":134,"code":"(fn [t coll] (if (contains? coll t) (if (= nil (get coll t)) true false) false))","user":"5d8aad1ce4b0915913b1d3cd"},{"problem":134,"code":"#(if \n   (contains? %2 %1)\n   (= nil (%1 %2))\n   false)","user":"5676af21e4b05957ce8c6158"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k) \n       (nil? (k m))))","user":"55c216dde4b0e31453f64974"},{"problem":134,"code":"(fn nil-key [k m]\n  (let [v (first m)\n        k2 (first v)]\n    (if v\n      (if (= k k2)\n        (= (second v) nil)\n        (nil-key\n         k (dissoc m k2)))\n      false)))","user":"598ab445e4b02b9968b84ce0"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n  (nil? (k m))\n  false))","user":"5f597522e4b0a0bc16850a9e"},{"problem":134,"code":"(fn  [k m]\n  (if (contains? m k)\n    (= (k m) nil)\n    false))","user":"52d2cb0fe4b099d49816f0b5"},{"code":"(fn [k m] (and (contains? m k) \n               (nil? (get m k))))","problem":134,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":134,"code":"(fn [k, coll] (and (contains? coll k) (= nil (k coll))))","user":"59804b60e4b021a7a535fdcf"},{"code":"(fn [key map] \n  (and \n   (= \n    (key map) \n    nil) \n   (= \n    (count \n     (conj map [key nil]))\n    (count map))))","problem":134,"user":"52473728e4b05ef8e38e635c"},{"problem":134,"code":"(fn [k coll] \n  (and \n   \t(nil? (k coll))\n   \t(not (nil? (find coll k)))))","user":"5f03550ce4b0cf489e8d7f33"},{"code":"(fn [k m]\n  (and\n    (= nil (m k))\n    (contains? m k)))","problem":134,"user":"4fae258de4b081705acca246"},{"code":"(fn [key map]\n  (if (contains? map key) \n      (if (= nil (key map)) true false) \n      false))","problem":134,"user":"5000a543e4b0678c553fc40f"},{"problem":134,"code":"(fn [k m]\n  (if-let [[nk nv] (find m k)]\n    (if (= nv nil) true false)\n    false))","user":"53bbae20e4b047364c044509"},{"code":"(fn [k m]\n  (if (and (some #{k} (keys m))\n           (= nil (k m)))\n    true false))","problem":134,"user":"4ed578d1535d10e5ff6f52d9"},{"code":"(fn mpNull [k m]  \n  (if (contains? m k)\n  (if (k m)\n     false\n     true)\n  false))","problem":134,"user":"52d6664be4b09f7907dd1359"},{"problem":134,"code":"(fn [k,m]  (and (contains? m k) (nil? (k m))))","user":"55d1aa33e4b0e31453f64a48"},{"problem":134,"code":"(fn [k coll] (and (nil? (get coll k)) (contains? coll k)))","user":"5b562842e4b02d533a91bd3f"},{"problem":134,"code":"; better\n#(nil? (%2 %1 true))\n\n; first try\n#_#(boolean (not (get %2 % true)))","user":"55e7d06ee4b050e68259b496"},{"problem":134,"code":"(fn [x mapel]\n   (if (contains? mapel x)\n     (if (not= (get mapel x) nil)\n       false true)\n     false)\n   )","user":"5883a9bae4b0f1effa3b7681"},{"problem":134,"code":"(fn [k hashmap]\n   (if (and (some #{k} (keys hashmap)) \n            (nil? (k hashmap)))\n     true\n     false))","user":"561a9380e4b053970a773b07"},{"problem":134,"code":"(fn nil-key [x y]\n  (if (contains? y x)\n    (if (= (y x) nil)\n      true\n      false)\n    false))","user":"55630cc1e4b0c656e3ff17e0"},{"code":"#(if (contains? %2 %) (= (get %2 %) nil) false)","problem":134,"user":"4f33afb7e4b0d6649770a09f"},{"problem":134,"code":"(fn [k m] (and \n           (contains? m k)\n           (= nil (k m))))","user":"590cc457e4b047aa04b199f4"},{"problem":134,"code":"(fn [k m] (and\n  (contains? m k)\n  (= (k m) nil)))","user":"554b425ce4b0a04f79299581"},{"code":"(fn [x y]\n  (if\n    (contains? y x) \n      (nil? (y x))\n      false\n  )\n  )","problem":134,"user":"4e5cac7c535d8a8b8723a2c3"},{"problem":134,"code":"(fn [x m] (if (contains? m x) \n             (if (= (get m x nil) nil) true false)\n             false\n             ))","user":"60845eb8e4b0736b099e42ef"},{"problem":134,"code":"#(= nil (get %2 %1 -1) )","user":"5926c254e4b072a2710fceb8"},{"problem":134,"code":"(fn [key map]\n    (and (contains? map key) (nil? (key map))))","user":"5ed875abe4b016b56eae05f2"},{"code":"(fn [x y] (and (contains? y x) (nil? (get y x))))","problem":134,"user":"4e8d5911535d65386fec2133"},{"problem":134,"code":"(fn [x y] (if (contains? y x)(= (y x) nil) false))","user":"5794ced6e4b0e215f87e8472"},{"code":"(fn [k m]\n  (and (nil? (k m))\n       (< -1 (.indexOf (keys m) k))))","problem":134,"user":"4f934325e4b0dcca54ed6cb8"},{"problem":134,"code":"#(and (contains? %2 %1)  (nil? (%1 %2))\n )","user":"5c4ab449e4b0f9f7a8770e57"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k \"nil\")))","user":"53ecaf1ce4b0d648e757f4b4"},{"problem":134,"code":"#(if (= true (contains?  %2 %1)) (if (= nil (%1 %2)) true false) false)","user":"57124786e4b09c608db70457"},{"problem":134,"code":"(fn[aKey, aMap] \n  (and (= (aKey aMap) nil) (contains? aMap aKey))\n  )","user":"55240916e4b0882d96d091b6"},{"problem":134,"code":"(fn [k mp] (and (nil? (mp k)) (not (= mp (dissoc mp k)))))","user":"5e546e20e4b027a2e10ac0eb"},{"code":"#(and(nil? (% %2)) (contains? %2 %))","problem":134,"user":"519c47abe4b0a1d87b00345a"},{"code":"#(= nil (get %2 %1 :n))","problem":134,"user":"4e58dd23535d8a8b8723a298"},{"code":"(fn [key map] (if (contains? map key) (if (= (map key) nil) true false) false))","problem":134,"user":"4dadba4dc9a9d6ed3899dc57"},{"code":"(fn [k m] (and (contains? m k) (not (k m))))","problem":134,"user":"5092fe10e4b097f48cc3857e"},{"problem":134,"code":"#(nil? (get %2 %1 :notin))","user":"51bb08a4e4b0fe3ecfb46446"},{"code":"(fn [k coll]\n  (and (contains? coll k)\n       (nil? (get coll k))))","problem":134,"user":"510a3cd4e4b06956752d35ad"},{"code":"(fn  [my_key my_map]\n      (and (true? (contains? my_map my_key))\n\t\t (nil? (my_map my_key)))\n\t    )","problem":134,"user":"4e526cc4535d302ef430da74"},{"problem":134,"code":"#(if \n   (contains? %2 %1)\n   (if\n     (= nil (%1 %2))\n     true\n     false)\n\tfalse)","user":"5bd7ca82e4b0ed4b8aab4bc8"},{"problem":134,"code":"(fn [key map]\n  (and \n   (contains? map key)\n   (nil? (key map))\n   )\n  )","user":"539c88e1e4b0b51d73faaf2c"},{"problem":134,"code":"(fn [k m] (if (and (contains? m k) (= (get  m k) nil)) true false))","user":"54f97e22e4b01ecee9d8883a"},{"code":"(fn [k coll] \n  (and \n    (contains? coll k) \n    (= nil (coll k))))","problem":134,"user":"4f9510b5e4b0dcca54ed6cc7"},{"problem":134,"code":"(fn [x y]\n  (if (and (contains? y x) (= nil (get y x))) true false)\n)","user":"596698ade4b069c0a1a197a9"},{"problem":134,"code":"#(= (%2 %1 0) nil)","user":"53de4bdae4b0d874e779ae32"},{"code":"(fn [key seq]\n  (if (and (find seq key) (nil? (key seq))) true false))","problem":134,"user":"4eb404ba535d7eef3080735a"},{"code":"(fn [key hashmap]\n  (if (and (= nil (key hashmap)) (contains? hashmap key)) true false))","problem":134,"user":"504eff22e4b0e7ad84dbc4a9"},{"code":"(fn [k m]\n  (let [val (get m k :np)]\n    (if (= nil val)\n      true\n      false)))","problem":134,"user":"4f036894535dcb61093f6aad"},{"problem":134,"code":"#(and (nil? (%1 %2)) (not (nil? (find %2 %1))))","user":"55df2752e4b050e68259b3ed"},{"problem":134,"code":"(fn [e x] (if (contains? x e) (= (get x e) nil) false))","user":"568820e8e4b0dcc4269f4067"},{"code":"#(and (contains? %2 %1)\n       (nil? (%1 %2)))","problem":134,"user":"50b53b6ae4b0c464d223d1c4"},{"problem":134,"code":"(fn foo [k col]\n  (and (contains? col k) (= (get col k) nil)))","user":"5ececec5e4b016b56eae059f"},{"code":"(fn [k v] (and (contains? v k) (nil? (v k))))","problem":134,"user":"50436470e4b034ff00315d23"},{"problem":134,"code":"#(and (contains? %2 %1) (nil?  (%1 %2)))","user":"59a06e55e4b0871e7608b835"},{"problem":134,"code":"(fn iff\n  [my-key my-map]\n  (if (contains? my-map my-key)\n    (if (= nil (my-key my-map)) true false)\n    false))","user":"54411506e4b032a45b869369"},{"problem":134,"code":"(fn [kwd kwds] \n  (let [value (get kwds kwd false)]\n   (if (= value nil) true false)))","user":"53b22df6e4b047364c044497"},{"problem":134,"code":";(fn [k m]\n;    (if (and (contains? m k) (nil? (k m)))\n;        true\n;        false))\n\n\n\n\n#(if (and (contains? %2 %1) (nil? (%1 %2)))\n\t\ttrue\n\t\tfalse)","user":"55380eeae4b09218d5f44fd9"},{"problem":134,"code":"(fn [k m] (and (contains? (set (keys m)) k) (nil? (m k))))","user":"530a6cbae4b02e82168697be"},{"problem":134,"code":"(fn [key hash] (if (and (contains? hash key) (= nil (key hash))) true false))","user":"548d6b75e4b0e286459a1216"},{"problem":134,"code":"(fn [key map] (and (contains? map key) (nil? (map key) )))","user":"54094824e4b0addc1aec66da"},{"code":"(fn [k m]\n  (and (contains? m k) (-> m k nil?)))","problem":134,"user":"4eb25069535d7eef30807348"},{"code":"(fn [e l] \n  (and (contains? l e) \n       (nil? (e l))))","problem":134,"user":"52c52ef2e4b0c2d177d620ef"},{"problem":134,"code":"(fn iffkey [x xs]\n  (let [keyval (select-keys xs (vector x))]\n    (if (= (map val keyval) '(nil))\n      true\n      false)))","user":"55285e60e4b0ffed3738f93e"},{"problem":134,"code":"(fn [k col]\n  (and (nil? (get col k)) (contains? col k)))","user":"53d60f57e4b0e771c3025451"},{"code":"(fn nil-key\n  [k, m]\n  (if (contains? m k)\n    (nil? (get m k))\n    false))","problem":134,"user":"52f8db41e4b047fd55836fdc"},{"problem":134,"code":"(fn read-map [k m]\n  (and\n   (= nil (k m))\n   (= (get m k false) nil))\n  )","user":"551d5cb9e4b07993ea3788e9"},{"problem":134,"code":"(fn [k coll]\n  (if (seq (filter #(= k %) (map key coll)))\n    (if (nil? (get coll k))\n      true\n      false)\n    false))","user":"5f7603a8e4b02876ed9fd0ad"},{"code":"(fn [x y] (if (contains? y x)\n          (= nil (x y))\n          false))","problem":134,"user":"504e8e48e4b069badc5a33b3"},{"code":"#(nil? (get %2 %1 \"\"))","problem":134,"user":"5027b41ee4b01614d1633fee"},{"problem":134,"code":"(fn [k, m]\n  (if (contains? m k)\n    (nil? (k m))\n    false))","user":"58ffac9de4b0438e51c2cffd"},{"code":"(fn [v m]\n  (if (get m v true) false true)\n)","problem":134,"user":"4fcad14ce4b0ee37620e1856"},{"code":"(fn [key map]\n  (and (contains? map key) (= (get map key) nil))\n  )","problem":134,"user":"522d3a16e4b0e26240291d50"},{"problem":134,"code":"(fn [k coll] (and  (contains? coll k) (nil?(k coll))  ))","user":"5e9ff8fbe4b00a66d4a95185"},{"problem":134,"code":"(fn [a b] (= nil (get b a \"missing\")))","user":"53c69ebce4b00fb29b22129c"},{"code":"(fn sperlonga [the-key\n     the-map]\n\n  (if (= (the-map the-key) nil)\n\n      (if (contains? the-map the-key)\n        true\n        false)\n    false))","problem":134,"user":"522048b3e4b0e6c71e0c0c16"},{"problem":134,"code":"#(nil? (get %2 % []))","user":"5488537be4b0e286459a11cf"},{"problem":134,"code":"#(= nil (get %2 % \"not-found\"))","user":"53b7aa6ce4b047364c0444d1"},{"problem":134,"code":"(fn [k, m] (if (and (nil? (m k)) (contains? m k)) true false ))","user":"53a68c5ae4b0ef122a8689c8"},{"code":"(fn [key hash] (nil? (and (contains? hash key) (get hash key))))","problem":134,"user":"50b64b55e4b0a86f8358ca6b"},{"code":"(fn ass [k m] (if (contains? m k) (if (= nil (get m k)) true false) false))","problem":134,"user":"4ef2eb4d535dced4c769f226"},{"problem":134,"code":"(fn check [x,y] (and (contains? y x) (nil? (y x))))","user":"56f0390de4b04a395b9a0473"},{"code":"(fn [key map] (if (nil? (get map key false)) true false))","problem":134,"user":"4f030af7535dcb61093f6a49"},{"problem":134,"code":"(fn [x d] (and (= (d x) nil) (= d (assoc d x nil))))","user":"5a7b596be4b03baeef9276de"},{"problem":134,"code":"(fn [key, map] (and (contains? map key) (= nil (get map key))))","user":"56014a5fe4b04bb52996e183"},{"code":"#(and (contains? %2 %1) (= nil (%1 %2)))","problem":134,"user":"4ec16c21535dfed6da9c6dac"},{"code":"(fn [a b] (nil? (get b a false)))","problem":134,"user":"5242e1dae4b076204b44fa96"},{"problem":134,"code":"(fn [k seq] (and (contains? seq k) (nil? (k seq))))","user":"57141357e4b07c98581c3ab3"},{"problem":134,"code":"#(= (get %2 %1 3) nil)","user":"53afddabe4b047364c04447e"},{"problem":134,"code":"(fn [k m]\n           (if (and (contains? m k)  (= nil (get m k)))\n             true\n             false))","user":"5ccc2a03e4b0ccb06196288f"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (= (map key) nil)\n    false))","user":"588782eae4b0f1effa3b76fd"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (if (nil? (k m)) true false)\n    false))","user":"589037b4e4b00487982d51d0"},{"problem":134,"code":"(fn [b a] \n  (if (contains? a b)\n    (= (a b) nil)\n    false))","user":"5ff70cfde4b06df49cee149c"},{"code":"#(nil? (get %2 %1 0))","problem":134,"user":"4db03279838c48654951d9bc"},{"code":"#(nil? (%1 %2 :not-found))","problem":134,"user":"4f5edeb0e4b0030a34fb2b57"},{"code":"(fn [key map] \n  (and (contains? map key)\n      (nil? (get map key))))","problem":134,"user":"50295775e4b0b33e9bf6fdf2"},{"code":"(fn [key map]\n  (if (contains? map key)\n    (= nil (key map))\n    false))","problem":134,"user":"4ee3afde535d10e5ff6f5370"},{"problem":134,"code":"#(let [x (%1 %2)]\n   (and (contains? %2 %1) (nil? x)))","user":"54ad1d30e4b09f271ff37cdf"},{"code":"#(\n   \n  and ( contains? %2 %1 ) ( nil? ( %2 %1 ) )\n)","problem":134,"user":"50bf7b72e4b0ffd967a66cc1"},{"problem":134,"code":"#(nil? (%2  %1 1))","user":"58e37946e4b005f69f193cae"},{"code":"#(not (get %2 %1 true))","problem":134,"user":"4dc21233535d020aff1edf92"},{"code":"(fn [k m]\n  (nil? (m k \"nf\")))","problem":134,"user":"53658ce7e4b0243289761e6e"},{"code":"(fn [avain mappi] (if (nil? (find mappi avain)) false (if (nil? (val\n(find mappi avain))) true false)))","problem":134,"user":"52474ec2e4b05ef8e38e6361"},{"problem":134,"code":"(fn [k s] (if (contains? s k)\n            (if (= nil (get s k))\n              true \n              false) false))","user":"566efb2be4b0a866af6896e2"},{"problem":134,"code":"(fn [k m] (= (contains? m k) (= (get m k) nil)))","user":"552712e7e4b0ffed3738f92a"},{"code":"#(if (contains? %2 %1)\n  (= nil (get %2 %1))\n  false)","problem":134,"user":"4e71a12c535d5021c1a8964f"},{"code":"(fn[item col] (and (contains? col item) (nil? (get col item))))","problem":134,"user":"52a62e16e4b0c58976d9abf9"},{"problem":134,"code":"(fn [k h]  \n  (if (contains? h k)\n  (nil? (get h k))\n  false))","user":"5fed2610e4b05ac5b16ea1c7"},{"problem":134,"code":"#(let [val (get %2 %1 \"none\")]\n   (and (not= val \"none\") (nil? val)))","user":"5ba15075e4b0a20761a2339e"},{"code":"#(= (get %2 %1 \"missing\") nil)","problem":134,"user":"503f923fe4b00d1a725ff2ad"},{"code":"(fn [x xs] (and (contains? xs x) (nil? (x xs))))","problem":134,"user":"51897709e4b0288ada3dbdaa"},{"code":"(fn\n  [key map]\n  (and (contains? map key) (nil? (map key))))","problem":134,"user":"4fbc068ae4b081705acca2f2"},{"problem":134,"code":"(fn [key x] \n  (and (contains? x key) (nil? (get x key))))","user":"5630a51de4b0bfe05bf11781"},{"problem":134,"code":"(fn [k,m] \n  (if (contains? m k) \n  \t(nil? (m k)) \n\tfalse))","user":"55388971e4b09218d5f44fe1"},{"problem":134,"code":"#(if (contains? %2 %1) (= (val (find %2 %1)) nil) false)","user":"533923fde4b0e30313ee6ca4"},{"code":"(fn [k v] (and (contains? v k) (nil? (get v k))))","problem":134,"user":"517c1a3be4b07ef0e56148d6"},{"problem":134,"code":"(fn [x y] \n  (if (contains? y x)  \n  (= (y x) nil) false))","user":"54ed3397e4b024c67c0cf85f"},{"code":"(fn checkNil [key1 coll] \n  (\n   if (and(contains? coll key1) (= nil (get coll key1))) \n       true  false\n          )\n  )","problem":134,"user":"51faf9ece4b0f1313d4689f7"},{"code":"#(if (and (contains? %2 %1)\n            (= (%2 %1) nil)) true false\n     )","problem":134,"user":"527c045fe4b03e8d9a4a75a8"},{"code":"(fn [key map] (and (contains? map key ) (not (key map))))","problem":134,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn \n  ([k m]\n     (and (contains? m k)\n     (= (get m k) nil))\n  )\n)","problem":134,"user":"51d28e15e4b0d13b04db0d9b"},{"code":"(fn [man chu] (= nil (get chu man 1)))","problem":134,"user":"4ecfb3f4535d44c135fd68ba"},{"code":"#(nil? (get %2 %1 :unknown))","problem":134,"user":"530578ede4b0d8b024fd3760"},{"code":"(fn [k mcoll] (and (contains? mcoll k) (= nil (k mcoll))))","problem":134,"user":"4f39c08ae4b0e243712b1efb"},{"problem":134,"code":"(fn [el m] (nil? (get m el true)))","user":"53f2370ee4b0742d9025b0e7"},{"code":"(fn [k m]\n    (if (and (contains? m k) (nil? (k m))\n          ) true false))","problem":134,"user":"51b5a6e0e4b0f094dd986fce"},{"code":"(fn [x coll] (and (contains? coll x) (not (x coll))))","problem":134,"user":"508ba469e4b0be79e5b189c8"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (nil?\n    (get m k))))","user":"5ae246b1e4b0837691e92c5d"},{"problem":134,"code":"(fn map-get-nil [k m] (= nil (get m k \"missing\")))","user":"587bead1e4b01531a375eb0d"},{"code":"(fn [key map]\n  (and (contains? map key) (not (map key))))","problem":134,"user":"5322d364e4b09d4e7a9b54c6"},{"problem":134,"code":"#(-> (get %2 %1 false) nil?)","user":"5615fd5de4b06b1bb21829fd"},{"problem":134,"code":"#(if (nil? (get %2 %1 false))\n     true\n     false)","user":"57b19fa1e4b0fbc9809a2754"},{"code":"#(if (contains? %2 %)\n  (if (nil? (% %2)) true false) false)","problem":134,"user":"500388dde4b0678c553fc43d"},{"problem":134,"code":"(fn [x y] (= (contains? y x) (= nil (x y))))","user":"594b3459e4b07ddc2dafae23"},{"code":"(fn [k m] (if (contains? m k) (if (= (m k) nil) true false) false))","problem":134,"user":"505b9084e4b032b709c81371"},{"code":"(fn foo [x m] (if (-> m (x \"\") nil?) true false))\t\n;;(fn foo [x m] (if (nil? (get m x \"\")) true false))","problem":134,"user":"50ec69e0e4b04edc3377704a"},{"problem":134,"code":"(fn \n  [k m]\n  (and \n   (contains? m k)\n   (nil? (k m))))","user":"5feb2034e4b05ac5b16ea1b1"},{"problem":134,"code":"(fn\n   [k m]\n\t(= (k m false) nil))","user":"5a0c00dee4b04bbd27e6d9a0"},{"problem":134,"code":"(fn [k xs] (\n            if (contains? xs k)\n              (if (nil? (k xs))\n                true\n                false\n               )\n              false\n              \n            )\n            \n  )","user":"5f2c5adee4b033932238a665"},{"code":"(fn [x y]\n  (if (= x :a) true false))","problem":134,"user":"51e51e73e4b0efabf93c02c6"},{"code":"(fn nil-key?\n  [k m]\n  (and (contains? m k) (nil? (get m k))))","problem":134,"user":"4ead1bb3535d7eef3080731d"},{"problem":134,"code":"(fn [k,m] (if (contains? m k) (= (m k) nil) false))","user":"550033a8e4b07d26eda61d59"},{"problem":134,"code":"(fn [k m]\n  (cond\n   (nil? (find m k)) false\n   (nil? (get m k)) true\n   true false))","user":"5a1e93bee4b0ff51aa4b3270"},{"problem":134,"code":"(fn [k v]\n  (nil? (get v k true)))","user":"5adcc688e4b0837691e92c05"},{"problem":134,"code":"#(if (and (contains? %2 %1)(= nil (%1 %2)))\n              true\n              false)","user":"5a58da38e4b05d388ecb6c8b"},{"problem":134,"code":"(fn has-nil-key\n  [kw a-map]\n  (and (contains? a-map kw) (= nil (kw a-map))))","user":"59f77dfae4b0966464fe6af4"},{"code":"#(if (contains? %2 %1) \n     (if (= (%1 %2) nil) true false) false)","problem":134,"user":"5012036ce4b0a040369c12f4"},{"problem":134,"code":"(fn [k items]\n   (if (contains? items k)\n     (= (get items k) nil)\n     false))","user":"53fcd574e4b0de5c418485d9"},{"problem":134,"code":"(fn [a b] (= nil (a b true)))","user":"572010a4e4b0c5bde472c08c"},{"code":"(fn nilcheck [ky m]\n    (and\n     (contains?  m ky)\n     (nil? (get m ky))))","problem":134,"user":"50057f23e4b0678c553fc466"},{"problem":134,"code":"#(= (%1 %2 \"hhh\") nil)","user":"574f3a40e4b02ea114799258"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (if (= (key map) nil)\n      true\n      false)\n    false))","user":"5480cce5e4b0e286459a115f"},{"problem":134,"code":"(fn [k m]\n  (if (some #(= k %) (keys m))\n    (nil? (k m))\n    false))","user":"572ad0fde4b0f4d77e651244"},{"code":"#(nil? (%1 %2 999))","problem":134,"user":"4f4e147ae4b03ad3f0c10cb9"},{"code":"(fn [k m] (and (contains? m k)(= nil (k m))))","problem":134,"user":"4f5438d6e4b0a7574ea717dd"},{"problem":134,"code":"#(and (= nil (get %2 %1))(contains? %2 %1))","user":"5a75da49e4b0512ff01cdacf"},{"code":"(fn [key map] (and (contains? map key) (nil? (get map key))))","problem":134,"user":"4f5595d4e4b0a7574ea71805"},{"problem":134,"code":"(fn [kljuc mapa]\n  (and (contains? mapa kljuc) (= (kljuc mapa) nil) ))","user":"584d99c5e4b0b7285a6f4e42"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= nil (m k))\n    false\n    )\n  )","user":"55c3149de4b0e31453f64987"},{"code":"#(if (contains? %2 %1) (if (nil? (%1 %2)) true false) false)","problem":134,"user":"516ab8c2e4b081287f204e9e"},{"code":"(fn [k v] (if (contains? v k) (nil? (k v)) false))","problem":134,"user":"52fbbadde4b047fd5583700f"},{"code":"#(nil? (% %2 true))","problem":134,"user":"4ef77c82535dced4c769f253"},{"problem":134,"code":"(fn [k m] (nil?(get m k \"asd\")))","user":"5d1cf523e4b02ea6f0fb6994"},{"problem":134,"code":"(fn [x m] (if (and (contains? m x) (= (m x) nil)) true false))","user":"574c5e18e4b02ea11479921b"},{"code":"(fn [mykey mymap] \n   (nil? (get mymap mykey :not_found)) \n  )","problem":134,"user":"517a7056e4b01aacecbecbed"},{"problem":134,"code":"(fn [Key Map]\n  (and\n   \t(< 0 (count (filter (fn [K] (= K Key)) (keys Map))))\n    (= (get Map Key) nil)\n   )\n)","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"#(if (contains? %2 %1)\n  (= (get %2 %1) nil)\n  false)","problem":134,"user":"50add9d8e4b0a40c9cfb08cc"},{"problem":134,"code":"(fn [k m]\n             (and (contains? m k)\n                  (nil? (get m k))))","user":"5cf72682e4b0b71b1d808a68"},{"code":"#( if\n   ( contains? %2 %1 )\n   \t(nil? (%1 %2))\n   \tfalse\n   )","problem":134,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":134,"code":"(fn nil-key? [key map]\n  (nil? (get-in map [key] false)))","user":"59032c0fe4b022d14a2aaf9f"},{"problem":134,"code":"#(and\n          (contains? %2 %1)\n          (nil? (%1 %2)))","user":"5c995fa4e4b048ec896c5a96"},{"problem":134,"code":"(fn [k m]\n              (boolean (and (find m k)\n                            (nil? (get m k)))))","user":"53684a2fe4b0243289761e8c"},{"problem":134,"code":"(fn [k, x] (and (contains? x k) (= (get x k) nil)))","user":"54336443e4b0b6b47310fcde"},{"code":"#(nil? (get %2 % :e))","problem":134,"user":"4f6cf933e4b07046d9f4efc2"},{"code":"#(nil? (%2 % false))","problem":134,"user":"4ef355e3535dced4c769f228"},{"problem":134,"code":";(fn [key map]\n;  (and (contains? map key) (= nil (map key))))\n\n#(and (contains? %2 %) (= nil (% %2)))","user":"59156f0be4b0163c97b36f3d"},{"problem":134,"code":"(fn\n  [x m]\n  (if (find m x)\n    (nil? (get m x))\n    (contains? m x)))","user":"54f4b638e4b0f2f3c5226e88"},{"code":"(fn [k coll]\n  (if\n    (nil?\n  (get coll k false))\n    true\n    false))","problem":134,"user":"5349da55e4b084c2834f4a68"},{"code":"(fn [x y] (= nil (get y x \"missing\")))","problem":134,"user":"4f0514b4535dcb61093f6bf0"},{"problem":134,"code":"(fn [k m] (= nil (get m k :not-here)))","user":"536d80cae4b0fc7073fd6e5d"},{"code":"(fn [k m]\n  (and\n    (contains? m k)\n    (= nil (m k))\n  ))","problem":134,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":134,"code":"(fn[k ma] (if(contains? ma k)(if (= nil (get ma k))(= 1 1)(= 1 2))(= 1 2)))","user":"575d26f0e4b02ea11479937b"},{"problem":134,"code":"(fn [k m]\n  (let [x (k m)]\n    (and (contains? m k) (= nil x))))","user":"5b0c6874e4b0cc2b61a3bde5"},{"problem":134,"code":"(fn [k coll]\n  (and (contains? coll k) (nil? (get coll k))))","user":"582bd5fae4b051871117bf7b"},{"problem":134,"code":"(fn a-nil-key [k xs]\n  (and (contains? xs k)\n       (nil? (k xs))))","user":"518b8561e4b0f028e99addef"},{"problem":134,"code":"(fn [k m]\n  (if \n    (and\n     (contains? m k)\n     (= nil (get m k)))\n    true\n    false)\n  )","user":"5cb62652e4b026601754b949"},{"code":"(fn [k m]\r\n  (if (contains? m k)\r\n    (if (nil? (get m k))\r\n      true\r\n      false)\r\n    false))","problem":134,"user":"4ff304f4e4b0678c553fc343"},{"code":"#(nil? (get %2 %1 true))","problem":134,"user":"4e8768f6535dceadca469850"},{"code":"#(not (% %2 0))","problem":134,"user":"5088082ae4b0198722bd9854"},{"code":"(fn [keyobj mapobj] (if (contains? mapobj keyobj)\n                \t\t(nil? (keyobj mapobj)) \n                      \t\tfalse\n                      )\n  \n)","problem":134,"user":"52cc7c40e4b07d0d72b27364"},{"problem":134,"code":"(fn [k m]\n  (and (not (k m))\n       (contains? m k)))","user":"5b25fbb9e4b063e2438bcc2e"},{"code":"#(if-let [e (find %2 %1)]\n   (= (val e) nil)\n   false)","problem":134,"user":"52ab6de1e4b0c58976d9ac78"},{"problem":134,"code":"(fn\n  [k m]\n  (and (contains? m k)\n       (nil? (k m))))","user":"59a90b2ae4b0bcf4e9a43aff"},{"code":"(fn [k m] \n  (and (contains? m k) (nil? (k m))))","problem":134,"user":"4e7ada51535db169f9c796ae"},{"code":"#(nil? (%2 % :not-found))","problem":134,"user":"510967aae4b07c05fdf6dc0f"},{"code":"#(and (= %1 ((set(keys %2)) %1)) (= nil (%1 %2)))","problem":134,"user":"5125834ae4b05d10e3e395fa"},{"problem":134,"code":"(fn [_key, _map]\n  (if (nil? (find _map _key)) false\n  \t(nil?\n     (_key _map))))","user":"5ac9c737e4b0e27600da77d2"},{"code":"(fn [k h] (and (contains? h k) (= (h k) nil)))","problem":134,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":134,"code":"(fn [k m]\n  (-> m\n      (get k :nnil)\n      nil?))","user":"554d0511e4b0a04f792995b5"},{"code":"(fn [keyValue coll] (and (contains? coll keyValue) (= nil (keyValue coll))))","problem":134,"user":"50a4d1d3e4b0344e360f3bc6"},{"code":"(fn [k m] \n  (let [e (find m k)] \n     (if (nil? e) false (nil? (val e)))))","problem":134,"user":"503917a0e4b088a6a14ca763"},{"code":"(fn [arg1 arg2]\n  (nil? (get arg2 arg1 3) )\n  )","problem":134,"user":"53862316e4b06839e8705f0e"},{"problem":134,"code":"(fn [x coll]\n (and (contains? coll x) (nil? (x coll))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":134,"code":"(fn [ky mp]\n  (and (contains? mp ky)\n       (nil? (ky mp))))","user":"559d33b3e4b0ec2b359424d9"},{"problem":134,"code":"(fn [a b] (and (contains? b a) (nil? (get b a))))","user":"560ff632e4b05f002753df66"},{"problem":134,"code":"#(if (contains? %2 %1) (nil? (get %2 %1)) (true? false))","user":"5406c958e4b0addc1aec66ab"},{"problem":134,"code":"(fn [clave mapa]\n  (and (contains? mapa clave)\n       (nil? (mapa clave))))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":134,"code":"(fn [key map]\n    (if (and (contains? map key) (= nil (get map key)))\n        true\n      false\n      )\n    )","user":"57b9d21fe4b0fbc9809a27f7"},{"code":"(fn [x,coll] (= nil(get coll x \"missing\")))","problem":134,"user":"511e763ce4b03e81d390ac29"},{"problem":134,"code":"#(if (some nil? (map val (select-keys %2 [%1]))) true false)","user":"563ed73ae4b08d4f616f5ecb"},{"code":"(fn la [x y] (if (=(find y x) nil) false (if (=(x y) nil) true false)))","problem":134,"user":"4ff6ed6ae4b0678c553fc384"},{"code":"(fn [k m] (if (find m k) (nil? (get m k)) false))","problem":134,"user":"517be6e6e4b07ef0e56148d4"},{"code":"(fn check [k m] (and (not (= nil (find m k))) (= nil (m k))))","problem":134,"user":"531bad96e4b08068f379ed93"},{"code":"#(cond\n  (contains? %2 %1) (nil? (get %2 %1))\n  :else false\n  )","problem":134,"user":"4f6688d6e4b07046d9f4ef5d"},{"code":"(fn [key-t map-t]\n    (and (contains? map-t key-t)\n\t \t (nil? (get map-t key-t))))","problem":134,"user":"52f818a6e4b047fd55836fcc"},{"problem":134,"code":"(fn [v m] (and (contains? m v) (= (get m v) nil)))","user":"5c4058a2e4b08cd430848eae"},{"problem":134,"code":"(fn [key collection] (and (contains? collection key) (nil? (get collection key))))","user":"5b2a4192e4b063e2438bcc72"},{"problem":134,"code":"(fn [k ,m] (and (nil? (k, m)) (contains? m,k)))","user":"560fd433e4b05f002753df62"},{"problem":134,"code":"(fn [key map]\n  (if (and (.contains (keys map) key) (nil? (key map))) true false))","user":"60aecd73e4b00e9e6653c49a"},{"code":"(fn [ ky  mp ] \n   (let [ st (set (keys mp) ) ]\n     (if (and (st ky) (nil? (mp ky)) )\n       true\n       false\n     )\n   )\n  )","problem":134,"user":"4e952463535dbda64a6f6b31"},{"problem":134,"code":"(fn [k coll] (and (not (nil? (some #{k} (keys coll))))\n                  (nil? (k coll))))","user":"53da1134e4b0e771c3025480"},{"code":"#(if(contains? %2 %1)\n   (nil? (%1 %2))\n               false)","problem":134,"user":"4f8beb2fe4b02e764a0a5185"},{"code":"(fn [k c] (and (contains? c k) (nil? (k c)) ) )","problem":134,"user":"51cf99bce4b0e42293a22576"},{"problem":134,"code":"(fn [kay my-map] \n  (if (contains? my-map kay)\n    (nil? (kay my-map))\n    false))","user":"5fc61b45e4b06010e5ea651a"},{"problem":134,"code":"(fn [x, y] (and (contains? y x) (= (y x) nil)))","user":"590eda3fe4b047aa04b19a30"},{"code":"(fn sup [k m]\n  (if (nil? (if (vector? (find m k)) (nth (find m k) 1) false)) true false))","problem":134,"user":"526934d6e4b03e8d9a4a71dd"},{"problem":134,"code":"(fn [k, m] (and (contains? m k) (nil? (k m))) )","user":"55dd91c9e4b050e68259b3ca"},{"problem":134,"code":"(fn [k e] (and (contains? e k) (= nil (k e))))","user":"58bab5e7e4b0888cdc949cef"},{"code":"#(nil? (get %2 %1 :default))","problem":134,"user":"510b0480e4b078ea719210fa"},{"problem":134,"code":"(fn [kljuc mapa] (and (= (mapa kljuc) nil) (contains? mapa kljuc)))","user":"5df175bce4b03c219ef1a34d"},{"code":"(fn nil-key? [k m]\r\n  (and (contains? m k) (nil? (get m k))))","problem":134,"user":"4efb6411535dced4c769f277"},{"problem":134,"code":"(fn [key map]\n  (= (get map key false) nil))","user":"55c3f0c6e4b0e31453f64990"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? m k) (nil? (k m))) true\n    false))","user":"57bfffc7e4b05aa3c4741c8a"},{"code":"(fn nil-key [k m]\n  (let [result (select-keys m [k])]\n    (if (empty? result)\n      false\n      (nil? (k result)))))","problem":134,"user":"4faafccde4b081705acca209"},{"problem":134,"code":"(fn [key coll]\n  (if (contains? coll key)\n    (= nil (coll key))\n    false))","user":"525b4e8de4b0cb4875a45d0f"},{"problem":134,"code":"(fn [key map]\n  (if (contains? map key)\n    (nil? (key map))\n    false) )","user":"54178782e4b01498b1a71a0c"},{"problem":134,"code":"#(nil? (%2 % :n))","user":"533018b2e4b019098a6f8b56"},{"problem":134,"code":"(fn [k a]\n  (and (contains? a k) (= nil (a k)) )   )","user":"5744723ae4b009280f9f2b3a"},{"code":"(fn [key col]\n  (and (contains? col key)\n       (nil? (key col))))","problem":134,"user":"4feff3b6e4b0678c553fc31e"},{"code":"(fn [key map]\n  (let [x (find map key)]\n    (and (not (nil? x))\n         (nil? (x 1)))))","problem":134,"user":"4ff5744ae4b0678c553fc36a"},{"code":"(fn [key map]\n    (nil?\n      (get map key :nope)\n      ))","problem":134,"user":"4fea34bde4b0140c20fb9c00"},{"code":"(fn [x y] (and (nil? (y x)) (contains? y x)))","problem":134,"user":"4fbd760ee4b081705acca305"},{"problem":134,"code":"(fn [e coll] (= nil (get coll e 2)))","user":"5727cf87e4b0c5bde472c147"},{"problem":134,"code":"#(let [d (find %2 %1)]\n   (if (= nil d)\n     false\n     (let [[k v] d]\n       (if (= nil v)\n       true\n       false)\n     )))","user":"5510aa92e4b06e50f9beb188"},{"problem":134,"code":"(fn [a b] (if (= \"-\" (get b a \"-\")) false (if (= (b a) nil) true false)))","user":"60c86bbde4b0e0fa5f1b42fb"},{"code":"#(nil? (get %2 % (Object.)))","problem":134,"user":"4e50e2a0535dc968683fc4ef"},{"problem":134,"code":"(fn [x, y] (and (=(y x) nil) (contains? y x)))","user":"53eddd9ce4b0d648e757f4cb"},{"code":"(fn f [k x] (reduce\n               (fn r [w l]\n                 (let [a (first l)\n                       b (second l)]\n                   (or w (and (= nil b) (= k a)))))\n               false \n               (vec x)))","problem":134,"user":"50352431e4b0a84c1d88f620"},{"problem":134,"code":"#(if(contains? %2 %1) (nil?(get %2 %1)) false  )","user":"5d270111e4b092dab7f59c62"},{"problem":134,"code":"(fn [key map]\n  (and \n   (contains? map key) \n   (nil? (key map))))","user":"5a9be505e4b0d174b936c7cf"},{"code":"#(and (contains? %2 %1) (= (%2 %1) nil))","problem":134,"user":"4e80b2da535db62dc21a62b2"},{"code":"(fn [key map] (if (contains? map key) (nil? (map key)) false))","problem":134,"user":"5267f871e4b03e8d9a4a7191"},{"code":"#(if ((set (keys %2)) %1) (= (%1 %2) nil) false)","problem":134,"user":"527c040be4b03e8d9a4a75a7"},{"code":"#(nil? (get %2 %1 :none))","problem":134,"user":"536d83cee4b0fc7073fd6e5e"},{"code":"(fn [ky mp] (if (contains? mp ky) (do (if (= nil (mp ky)) true false)) false))","problem":134,"user":"52c3a0f4e4b0c2d177d620c6"},{"code":"#(and (= nil (%1 %2)) (contains? %2 %1) )","problem":134,"user":"527c0513e4b03e8d9a4a75ab"},{"problem":134,"code":"(fn [k, m] (if (and (contains? m k) (= (k m) nil)) \n             true false))","user":"5e054752e4b0a607a9a45d78"},{"problem":134,"code":"(fn check-nil [k col]\n  (if (contains? col k)\n    (nil? (k col))\n    false))","user":"56fee925e4b08d47c97781b7"},{"problem":134,"code":"(fn [x a] (nil? (get a x 0)))","user":"566734e4e4b04acd4f672dcd"},{"code":"(fn [k m]\n  (and (contains? m k)\n       (nil? (get m k))))","problem":134,"user":"4eb92051535dfed6da9c6d4c"},{"problem":134,"code":"(fn check\n  [k m]\n  (if (contains? m k)\n    (nil? (k m))\n    false))","user":"5d123c75e4b02c15ef021997"},{"code":"(fn [key map]\n       (nil? (get map key :nil)))","problem":134,"user":"51fa90aae4b0f1313d4689e0"},{"code":"(fn [v m] (nil? (get m v :nil)))","problem":134,"user":"51424c61e4b0b50abeb46b33"},{"code":"(fn koko [x y] (if (and (contains? y x) (nil?(y x))) true false))","problem":134,"user":"511a98d7e4b0c87c59c96707"},{"problem":134,"code":"#(nil? (get %2 %1 +))","user":"4f2858ece4b0d6649770a016"},{"code":"(fn \n  [k m]\n  (= (get m k 1) nil))","problem":134,"user":"526ee63de4b03e8d9a4a733f"},{"problem":134,"code":"#(and (contains? %2 %1) (->> %2 (%1) (= nil)))","user":"60096aabe4b074f607df667f"},{"code":"(fn [k m]\n  (= nil (get m k \"tank\")))","problem":134,"user":"4e951f2c535dbda64a6f6b2f"},{"code":"#(nil? (get %2 %1 :test))","problem":134,"user":"4db58ccb535d87e67b28fe10"},{"problem":134,"code":"#(let [v (find %2 %1)] (if (nil? v) false (nil? (second v))))","user":"52e5f810e4b09f7907dd1468"},{"problem":134,"code":"(fn [k,s] \n  (if (contains? s k) \n    (if (s k) false true)\n    false)\n  )","user":"530ec8d4e4b08068f379ecc2"},{"problem":134,"code":"#(= nil (get %2 %1 \"not found\") )","user":"608820e9e4b0ae75613dcede"},{"problem":134,"code":"(fn [x m] ( and (nil? (x m)) (contains? m x)  ))","user":"5cd5ac3ae4b0ccb061962937"},{"problem":134,"code":"#(if(contains? %2 %1) (if(nil? (get %2 %1) ) true false) false)","user":"55382530e4b09218d5f44fdd"},{"problem":134,"code":"#(and(contains? %2 %1)(= (%1 %2) nil))","user":"5ba1db22e4b0a20761a233b2"},{"code":"(fn [k m] (if (= nil (get m k false)) true false))","problem":134,"user":"4fb2b1a1e4b081705acca292"},{"problem":134,"code":"(fn [map-key map-def]\n   (if (= (map-key map-def false) nil) true false))","user":"573d8658e4b05c31a32c0814"},{"code":"(fn \n  [a b]\n  (if (contains? b a)\n    (nil? (a b))\n     false))","problem":134,"user":"5001ce99e4b0678c553fc41f"},{"code":"#( and  (contains? %2 %1)\n   (= nil (%2 %1)))","problem":134,"user":"50e90813e4b033b0e80d11e7"},{"problem":134,"code":"(fn [k m] (and (contains? m k)\n               (nil? (get m k)))\n  )","user":"50ef77a4e4b0bdaecbb47d99"},{"code":"#(nil? (%2 % :_))","problem":134,"user":"51f9527fe4b09be9c177e549"},{"code":"(fn [k m]\n  (and (contains? m k) (= (k m) nil)))","problem":134,"user":"4f9b5a1ce4b0dcca54ed6d16"},{"problem":134,"code":"#(= nil (if (contains? %2 %1)\n            (%1 %2)\n            \"nope\"))","user":"568fecc6e4b0dcc4269f40e6"},{"problem":134,"code":"#(nil? (get %2 %1 true)) ;;hack","user":"5d25abc9e4b02ea6f0fb6a37"},{"problem":134,"code":"(fn\n  [my-key my-map]\n  (nil? (get my-map my-key :not-nil)))","user":"5cb39440e4b026601754b903"},{"problem":134,"code":"(fn [x m] (and (nil? (x m)) (contains? m x)))","user":"5591b61ee4b0604b3f94d580"},{"problem":134,"code":"#(cond (contains? %2 %1)\n    (= nil (get %2 %1))\n   :else false)","user":"5be1a134e4b0ed4b8aab4ca0"},{"problem":134,"code":"#(if (contains? %2 %1)\n     \t(if (= (%1 %2) nil)\n          \ttrue\n          \tfalse)\n     \tfalse)","user":"5d896a64e4b0915913b1d3b8"},{"problem":134,"code":"#(if \n   (contains? %2 %1)\n   \t(= (%2 %1) nil)\n   \tfalse)","user":"5411b0ede4b01498b1a719ca"},{"problem":134,"code":"(fn [_key dict]\n  (and (contains? dict _key) (nil? (_key dict))))","user":"4f03f3b7535dcb61093f6b85"},{"problem":134,"code":"(fn [k xs] \n  (and (contains? xs k) (nil? (k xs))))","user":"59644d2ae4b069c0a1a19764"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (nil? (m k)) (not (empty? (filter nil? (vals m))))))","user":"54d7e277e4b0a52adc2e2031"},{"code":"#(nil? (get %2 %1 :m))","problem":134,"user":"4f038b62535dcb61093f6b1c"},{"code":"(fn nilkey [key map] (if (get map key true) false true))","problem":134,"user":"52f3b288e4b05e3f0be25f16"},{"problem":134,"code":"(fn [key list]\n  (if (contains? list key)\n      (nil? (key list))\n       false))","user":"56d7f340e4b0ea9b8538f7df"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k :not-nil)))","user":"566812f0e4b04acd4f672de1"},{"code":"#(if (contains? %2 %1)\n  (nil?(get %2 %1))\n  false\n)","problem":134,"user":"4f542fd9e4b0a7574ea717db"},{"problem":134,"code":"(fn [x y]\n  (if-not (contains? y x)\n    false\n    (nil? (y x))))","user":"5d62da51e4b0c9e5857d5020"},{"problem":134,"code":"#(nil? (get %2  %1 :not-found))","user":"5f300f28e4b033932238a682"},{"problem":134,"code":"(fn [x coll] \n  (if (not (contains? coll x))\n    false\n    (nil? (get coll x))))","user":"5ce52271e4b0a17bb84e2b69"},{"code":"(fn [key map]\n  (and\n    (contains? map key)\n    (nil? (key map))))","problem":134,"user":"4db21508535d37964ddf999b"},{"problem":134,"code":"(fn [k col] (and (nil? (get col k)) (contains? col k)))","user":"5fcb665ae4b07e53c2f3efee"},{"problem":134,"code":"(fn [key coll]\n  (boolean (and (nil? (key coll))\n       (some #(= key %) (keys coll))\n             )))","user":"56c56603e4b05cc29241eea7"},{"problem":134,"code":"(fn [x y] (= (x y -1) nil))","user":"5f26d67fe4b0857314092c8e"},{"problem":134,"code":"(fn [k hsm]\n  (and\n   (contains? hsm k)\n   (= (hsm k) nil)\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"code":"(fn [k m] \n  (and (contains? m k) \n       (nil? (m k))))","problem":134,"user":"5297c25de4b02ebb4ef75045"},{"problem":134,"code":"(fn [k m]\n\t(and\n     (contains? m k)\n     (nil? (k m))))","user":"5aeca4c9e4b0cc2b61a3bc0a"},{"code":"(fn [k m] (if (contains? m k)\n            (nil? (get m k))\n            false))","problem":134,"user":"50214ffae4b0ef1d2d4433bc"},{"problem":134,"code":"(fn [k m] \n  (if (and (contains? m k) (= (get m k) nil))\n    true\n    false\n    )\n  )","user":"5dca2841e4b03836ba07d82b"},{"problem":134,"code":"(fn[x call] (and (contains? call x) (nil? (get call x))))","user":"58ec5e86e4b056aecfd47d5f"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (= (%2 %1) nil)\n   false)","user":"5cccac42e4b0ccb06196289d"},{"problem":134,"code":"(fn ! [k m]\n  (nil? (get m k :missing)))","user":"54c271b9e4b045293a27f602"},{"code":"(fn [k value]\n  (if (contains? value k)\n    (nil? (k value))\n    false))","problem":134,"user":"52e27501e4b09f7907dd1435"},{"code":"(fn [k m] (let [is-in (some (partial = k) (keys m))\n                valid (and (true? is-in) (nil? (get m k)))]\n            (if (true? valid)\n              true\n              false)))","problem":134,"user":"507a33dee4b08327cd804a68"},{"code":"#(and (contains? %2 %)(not (%2 %)))","problem":134,"user":"4f3cc2fbe4b0e243712b1f55"},{"problem":134,"code":"(fn ([k m] (and (nil? (get m k)) (contains? m k))))","user":"58e4f6fee4b056aecfd47c7c"},{"code":"(fn [my-val my-map] (and (contains? my-map my-val) (nil? (my-map my-val))))","problem":134,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":134,"code":"(fn [k m]\n  (and (= nil (m k)) (contains? m k)))","user":"5e909685e4b0cb016954634d"},{"code":"#(and (contains? %2 %1 ) (= (%1 %2) nil))","problem":134,"user":"5382704be4b06839e8705ed4"},{"code":"(fn [k m] (and (contains? m k) (= (m k) nil)))","problem":134,"user":"4efc41b2535dced4c769f27f"},{"code":"#(nil? (%1 %2 1))","problem":134,"user":"4e705861535d5021c1a89635"},{"code":"(fn [k m] (cond (contains? m k) (nil? (k m)) :else false))","problem":134,"user":"52864e2be4b0239c8a67ae13"},{"problem":134,"code":"(fn [key, collection] \n  (nil? (get collection key 0)))","user":"5b99554ae4b0c0b3ffbd4ace"},{"code":"#(if (contains? %2 %)\n   (nil? (% %2))\n   false)","problem":134,"user":"50ca1356e4b0a409464667da"},{"code":"(fn [mkey mmap]\n  (if-not (contains? mmap mkey) false\n    (nil? (mkey mmap))))","problem":134,"user":"52084f75e4b01ce6bbf31dde"},{"problem":134,"code":"(fn [k m]\n  (cond\n   (and (contains? m k) (= (get m k) nil)) true\n   :else false))","user":"53263406e4b09d4e7a9b54eb"},{"code":"(fn [k m]\n  (if (contains? m k)\n      \t(nil? (m k))\n      \tfalse))","problem":134,"user":"4e77c1db535d324fb2983d72"},{"problem":134,"code":"(fn [k m] \n  (if (= nil (get m k \"missing\")) true false))","user":"53ca23e3e4b00fb29b2212c6"},{"code":"(fn [k m] (nil? (k m 0)))","problem":134,"user":"51baae50e4b0fe3ecfb4643d"},{"problem":134,"code":"(fn [k m] (= nil (get m k :not-nil)))","user":"54ca93abe4b057c6fda3a264"},{"problem":134,"code":"(fn [k lst] (let [ma (find lst k)] (if (and ma (nil? (last ma))) true false)))","user":"5693383fe4b0dcc4269f4100"},{"code":"#(nil? (get %2 %1 \"no\"))","problem":134,"user":"534056fce4b085b17e897dac"},{"code":"(fn [k coll]\n  (and (contains? coll k) (nil? (coll k)))\n  )","problem":134,"user":"52e59ca5e4b09f7907dd1464"},{"code":"(fn [k m] \n  (and (nil? (k m)) (contains? m k))\n)","problem":134,"user":"4ec7f1eb535d6d7199dd36ed"},{"code":"#(nil? (%2 %1 \"not\"))","problem":134,"user":"50ae0d24e4b0a40c9cfb08ce"},{"problem":134,"code":"(fn [a b] (nil?(get b a \"fish\")))","user":"53f3b216e4b0742d9025b0f8"},{"problem":134,"code":"(fn [k c]\n  (if (and (contains? c k)(= nil (k c) )) true\n    false))","user":"5763fa69e4b0994c1922fbe0"},{"problem":134,"code":"(fn [k, m] (if (and (= true (contains? m k)) (= nil (.get m k))) true false))","user":"60dd865ee4b0d8b48c489db3"},{"code":"#(and (> (.indexOf (vec (keys %2)) %1) -1) (= (get %2 %1) nil))","problem":134,"user":"51f66e0ee4b06ff1c25c52c3"},{"code":"(fn [k m]\n  \t(let [found? (contains? m k)]\n      (if (not (= found? false))\n  \t\t(if (= nil (get m k))\n  \t\t\ttrue\n          \tfalse\n         )\n        false\n      )\n      )\n  )","problem":134,"user":"51ab734ee4b04e3dc0c27b34"},{"code":"(fn [k, m] (and (contains? m k) (= (k m) nil)))","problem":134,"user":"51ec058fe4b069f463c22cc5"},{"code":"(fn [key coll] (if (contains? coll key) (= nil (key coll)) false))","problem":134,"user":"4f17ab99535d64f603146457"},{"problem":134,"code":"(fn [key balue] (if (contains? balue key) (nil? (key balue)) false))","user":"56499a5de4b0284900eef644"},{"code":"(fn [key map]\n  (cond \n   (contains? map key)\n   \t (cond\n       (= (map key) nil) true\n       :else false)\n   :else false))","problem":134,"user":"52cda397e4b07d0d72b2737a"},{"problem":134,"code":"(fn [key map]\n  (and (contains? map key)\n       (= (key map) nil)))","user":"5845531de4b089d5ab817e63"},{"problem":134,"code":"(fn [x m]\n  (if (contains? m x)\n    (= (m x) nil)\n    false))","user":"5cc28739e4b0ccb0619627d8"},{"problem":134,"code":"(fn [k coll]\n  (= nil (coll k :no-value)))","user":"53ce4cd4e4b00fb29b2212ef"},{"problem":134,"code":"(fn [k m]\n  (= (k m true)\n     nil))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":134,"code":"(fn [a b] (if (contains? b a) (= (b a) nil) false))","user":"6074e088e4b069485764de4d"},{"problem":134,"code":"(fn\n  [k v]\n  (if (nil? (get v k false))\n    true\n    false)\n)","user":"53275758e4b09d4e7a9b54fc"},{"problem":134,"code":"(fn truer [x nil-map] (if (nil? (get nil-map x false)) true false))","user":"5af865a9e4b0cc2b61a3bcd1"},{"code":"(fn [el m]\r\n     (and (contains? m el)\r\n          (= nil (m el))))","problem":134,"user":"50576483e4b001218172198b"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k) \n    (if (k m) false true) \n    false))","user":"5e284f94e4b05b4b01516196"},{"problem":134,"code":"#(and (contains? %2 %1)\n               (nil? (get %2 %1)))","user":"5d3e8c3de4b01671435dbd73"},{"problem":134,"code":"#(if (nil? (get %2 %1 false))\n   true\n   false)","user":"559e38b2e4b08a52bd4f97d2"},{"problem":134,"code":"(fn check-map [key map]\n(if (contains? map key)\n  (if (= (key map) nil)\n    true\n    false)\n  false\n  ))","user":"5e860270e4b09a7a73c8bbdb"},{"problem":134,"code":"(fn [k coll]\n   (and (contains? coll k)\n         (nil? (k coll))))","user":"5474666ae4b0c51c1f4d7288"},{"code":"(fn [key, map] (nil? (get map key :not-found)))","problem":134,"user":"4eaa5c51535d7eef3080730a"},{"problem":134,"code":"(fn check_nil [key,map] (if (contains? map key) (if (= (get map key) nil) true false) false ))","user":"5e69589de4b04a83ad7cd26d"},{"problem":134,"code":"(fn [key-name values]\n  (if (contains? values key-name)\n\t  (nil? (key-name values))\n  false))","user":"55d06bcbe4b0e31453f64a3a"},{"code":"(fn [search-key search-map] (nil? (get search-map search-key false)))","problem":134,"user":"5137fb22e4b0a5db03d727d3"},{"problem":134,"code":"(fn [key map] \n    (if (nil? (map key)) \n      (if (contains? map key) \n        true\n        false)\n      false))","user":"56c44c34e4b05cc29241ee96"},{"problem":134,"code":"(fn [x y] (= nil (get y x \"?\")))","user":"57f52d3be4b0903ccab3dce7"},{"problem":134,"code":"(fn [k h]\n  (if (contains? h k)\n    (= (h k ) nil)\n    false))","user":"5b337ff4e4b025bcb146f339"},{"problem":134,"code":"(fn [k m] (cond (contains? m k) (= (m k) nil) true false))","user":"5512967ee4b06e50f9beb1ae"},{"code":"(fn [a b] (and (contains? b a) (nil? (a b))))","problem":134,"user":"50b8e9a4e4b0cba0e598b656"},{"code":"(fn[k m]\n\t\t(and (contains? m k) (nil? (get m k))))","problem":134,"user":"51b73a91e4b0d906fcd71d33"},{"problem":134,"code":"(fn [key_ map_] (and (contains? map_ key_) (nil? (get map_ key_))))","user":"5a55c713e4b05d388ecb6c43"},{"problem":134,"code":";#(nil? (get %2 %1 \"\"))\n\n#(nil? (%2 %1 \"\"))","user":"580d7e53e4b0849f6811b73e"},{"code":"(fn [k v] (nil? (get v k \"missing\")))","problem":134,"user":"50e54fe4e4b049a9877538a0"},{"problem":134,"code":"(fn [k coll]\n  (if (contains? coll k)\n    (if (coll k)\n      false\n      true\n    )\n    false\n  )\n)","user":"5df08767e4b093ff717275bf"},{"code":"(fn [k c]\n  (if (and (contains? c k) (= nil (c k)))\n    true\n    false))","problem":134,"user":"5311081be4b08068f379ece3"},{"code":"(fn [the-key the-map]\n  (and (contains? the-map the-key)(nil? (the-key the-map))))","problem":134,"user":"52a3a7ebe4b04e0c58e87c02"},{"problem":134,"code":"(fn [x y] (\n           if (contains? y x) \n           (nil? (y x)) \n           false\n           )\n  )","user":"58fc4963e4b0438e51c2cf91"},{"problem":134,"code":"(fn [k, m] (if (contains? m k) \n            (nil? (m k)) \n            false ))","user":"59e8fe50e4b0249b72820742"},{"code":"#(= (get %2 %1 :not-found) nil)","problem":134,"user":"4f082ad1535dcb61093f6c32"},{"problem":134,"code":"(fn [a l]\n  (nil? (get l a true)))","user":"54b2c888e4b09f271ff37d2e"},{"problem":134,"code":"#(if (contains? %2 %1)\n  (if (= nil (%1 %2))\n   true\n   false)\n   false)","user":"55eeeb81e4b0121d4835fdf7"},{"code":"(fn [klucz mapa] (and (nil? (get mapa klucz)) (contains? mapa klucz)))","problem":134,"user":"4f043bbd535dcb61093f6bb2"},{"code":"#(nil? (get %2 %1 :nil))","problem":134,"user":"4dae916eedd6309eace4d155"},{"code":"#(and\n  (not (nil? (find %2 %)))\n  (nil? (val (find %2 %))))","problem":134,"user":"507ef25ce4b0f753b6f9788e"},{"code":"(fn [key map]\n  (= :a key))","problem":134,"user":"4f0388e8535dcb61093f6b17"},{"problem":134,"code":"(fn f[key map]\n  (nil? (get map key 1))\n)","user":"5c337305e4b0d62ef62d9f48"},{"problem":134,"code":"#(and (.contains (keys %2) %1)\n      (nil? (get %2 %1)))","user":"5e0ceca5e4b099d064962f91"},{"problem":134,"code":"(fn [k mp]\n  (and (contains? mp k) (= nil (k mp))))","user":"60919828e4b00e9e6653c3d8"},{"problem":134,"code":"(fn [^clojure.lang.Keyword key ^clojure.lang.PersistentArrayMap map]\n  (and (contains? map key) (nil? (key map))))","user":"59fb1ca3e4b0ca45a743a376"},{"code":"(fn [k c] (and (contains? c k) (nil? (c k))))","problem":134,"user":"4faf2f4ce4b081705acca251"},{"problem":134,"code":"(fn [k m] (if (not (contains? m k)) false (= nil (get m k))))","user":"550e52dbe4b06e50f9beb165"},{"code":"#(if (= (% %2 :nil) nil) true false)","problem":134,"user":"50608ea0e4b07251188e4456"},{"problem":134,"code":"(fn [k,m] (and (contains? m k) (= (get m k) nil)))","user":"55d35a01e4b0e31453f64a63"},{"problem":134,"code":"; (fn [k m] (if (contains? m k) (if (nil? (k m)) true false) false))\n\n#(if (contains? %2 %1) (if (nil? (%1 %2)) true false) false)","user":"5b23595be4b08b1df1c36757"},{"problem":134,"code":"#(= nil (%2 %1 0) )","user":"58d4efbde4b03c36ff7e594e"},{"code":"(fn f[k, m]\n  (and (contains? m k)\n       (nil? (get m k))))","problem":134,"user":"5151a6bee4b03e678e393ad3"},{"code":"(fn [a_key a_map]\n  (if (contains? a_map a_key)\n    (if (= nil (a_map a_key))\n      true\n      false)\n    false))","problem":134,"user":"5054ba59e4b0b1b9d1860eaf"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k :nan)))","user":"4f055d4f535dcb61093f6bf6"},{"code":"(fn [k m]\n  (let [ [ky val] (find m k) ]\n     (and (= ky k) (= nil val))))","problem":134,"user":"523bd9c0e4b07becd5be2201"},{"code":"(fn [k m] (and (contains? m k) (nil? (get-in m [k]))))","problem":134,"user":"5303a027e4b0d8b024fd3745"},{"problem":134,"code":"(fn [k m]\n  (and \n   \t(contains? m k)\n    (nil? (get m k))\n))","user":"54468fd3e4b032a45b8693b2"},{"problem":134,"code":"#(if (contains? %2 %1)\n             (nil? (%1 %2))\n             false)","user":"55ddb3f4e4b050e68259b3cd"},{"code":"#(and (contains? %2 %1)\n        (nil? (%2 %1)))","problem":134,"user":"4f2e205ae4b0d6649770a065"},{"problem":134,"code":"(fn test-nil [k xs]\n  (nil? (get xs k (if contains? xs k)))\n)","user":"5d4bd9a7e4b0776584bd6f2a"},{"problem":134,"code":"(fn [x, y] (and (contains? y x) (= nil (y x))))","user":"581cb1b8e4b04b46fc4b0efc"},{"code":"(fn [x,m] ( and (contains? m x) (= nil(x m))))","problem":134,"user":"50e99c35e4b092aee0e98275"},{"problem":134,"code":"(fn [x y] \n  (if (contains? y x)\n    (= (x y) nil)\n    false))","user":"607e1d32e4b03d835a6eaeda"},{"code":"(fn [x y] (nil? (get y x false)))","problem":134,"user":"4e6ec58c535d5021c1a89611"},{"code":"(fn [key map]\n\t(if (and (find map key)\n             (= (key map) nil))\n      true\n      false))","problem":134,"user":"5055e7f4e4b0ce54f56f0401"},{"code":"(fn [k s]\n  (and (nil? (s k))\n       (contains? s k)))","problem":134,"user":"525947f1e4b0cb4875a45cd8"},{"problem":134,"code":"(fn [k m] (-> m (contains? k) (and (-> k m nil?))))","user":"5c30da5ae4b0d62ef62d9f23"},{"problem":134,"code":"(fn [map key] \n  \t(and (nil? (get key map))\n         (contains? key map)))","user":"5a822590e4b00b71e582a073"},{"code":"(fn has[entry values] (and (contains? values entry) (nil? (values entry))))","problem":134,"user":"5380a27ae4b06839e8705ec4"},{"code":"#(and (contains? %2 %1)  (nil? (%2 %1)))","problem":134,"user":"516b8837e4b005fd0cdf85c1"},{"code":"(fn [key map](\n  if (contains? map key)\n    (nil? (get map key))\n    false))","problem":134,"user":"4ed42c78535d10e5ff6f52c7"},{"code":"#(= (contains? %2 %1) (= (%2 %1) nil))","problem":134,"user":"503bcacce4b07a1917cc34e4"},{"code":"(fn [x y] (and (nil? (get y x)) (not= nil (find y x))))","problem":134,"user":"4ed6b05c535d10e5ff6f52e5"},{"problem":134,"code":"(fn [key, map]\n  (if (contains? map key)\n    (if (nil? (get map key))\n       true\n       false)\n    false))","user":"5e2ef900e4b05b4b015161fc"},{"problem":134,"code":"#(-> (get %2 %1 false) (nil?))","user":"6026737ee4b0d5df2af2222f"},{"code":"(fn [k m]\n  (if (contains? m k)\n      (nil? (get m k))\n      false))","problem":134,"user":"4e444c11535dc968683fc4a9"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)\n       (= nil (get m k))))","user":"560978d0e4b0053d1b86c7de"},{"code":"(fn[key map] (and (contains? map key)(nil? (key map))))","problem":134,"user":"526e3f74e4b03e8d9a4a7312"},{"code":"(fn [x y]\n  (if (contains? y x) (nil? (x y)) false))","problem":134,"user":"52ee0de4e4b05e3f0be25ec1"},{"problem":134,"code":"#(nil? (%2 %1 :none) )","user":"56448dc1e4b0284900eef5f6"},{"code":"(fn [k m]\n  (let [found (find m k)]\n    (if found\n      (nil? (second found))\n      false)))","problem":134,"user":"4daee8e9edd6309eace4d166"},{"code":"(fn [k m] \n  (and (contains? m k) (nil? (m k))))","problem":134,"user":"5025b93ce4b0c969f0b056df"},{"code":"(fn [key map]\n  (= (get map key 0) nil))","problem":134,"user":"4eac5bc1535d7eef3080731b"},{"code":"(fn [k m] \n  (and (contains? m k) (nil? (m k)))\n)","problem":134,"user":"4eef0828535d305ff5cb7f18"},{"problem":134,"code":"(fn [key coll] \n           (if (contains? coll key)\n           (nil? (key coll))\n           false\n           ))","user":"5b0c0c90e4b0cc2b61a3bddd"},{"problem":134,"code":"(fn [selection coll]\n  (nil? \n    (get coll selection :z)))","user":"56430277e4b08d4f616f5f20"},{"code":"(fn [ky mp]\n    (and (contains? mp ky)\n         (nil? (get mp ky))))","problem":134,"user":"51f5539fe4b0abb92f97f9cd"},{"code":"(fn [k m] (and (contains? m k) (nil? (k m))))","problem":134,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"#(if (% (-> %2 keys set)) (nil? (% %2)) false)","problem":134,"user":"4f58d92fe4b0a7574ea71858"},{"code":"(fn [x,y] ( nil? (get y x 0)))","problem":134,"user":"4fb328ffe4b081705acca29c"},{"problem":134,"code":"#(if (contains? %2 %1)\n   (= nil (%1 %2))\n   false)","user":"56497a73e4b0284900eef642"},{"problem":134,"code":"#(and\n  (contains? %2 %1)\n  (= nil (%2 %1)))","user":"5a257747e4b07f18be40aa1f"},{"problem":134,"code":"(fn [k m] (nil? (get m k :empty)))","user":"565ee190e4b068f2fe63dc38"},{"problem":134,"code":"(fn [_key, _map] \n  (and\n   (contains? _map _key)\n   (nil? (_map _key))\n   )\n  )","user":"5528ecd1e4b0ffed3738f942"},{"problem":134,"code":"#(and(contains? %2 %) (nil? (% %2)) )","user":"575bd5f9e4b02ea114799365"},{"problem":134,"code":"#(nil? (get %2 %1 \"null\"))","user":"54aa2462e4b09f271ff37cb4"},{"problem":134,"code":"(fn [k m]\n  (if (= (get m k \"default\") \"default\")\n  \tfalse\n    (= (get m k) nil)))","user":"5b56331de4b02d533a91bd40"},{"problem":134,"code":"(fn val-is-nil?\n  [k m]\n  (and\n   (contains? m k)\n   (nil? (m k))))","user":"56a36f76e4b0542e1f8d14ca"},{"code":"(fn [k m] (if-not (= (k m 'no) 'no) (nil? (k m)) false))","problem":134,"user":"52fdb82ae4b047fd55837031"},{"code":"(fn [e h] (if (and (contains? h e) (not (h e))) true false))","problem":134,"user":"53638ed2e4b0243289761e5b"},{"problem":134,"code":"(fn aaa [x y] (and(contains? y x)(nil? (get y x))))","user":"57a88e24e4b0a9660795621f"},{"code":"(fn [key map] \n  (and\n  \t(contains? map key)\n  \t(nil? (map key))))","problem":134,"user":"52ebdc9be4b0705949c44444"},{"code":"(fn [k m] (nil? (get m k \"nil\")))","problem":134,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":134,"code":"(fn stuff [k m]\n  (if\n    (contains? m k)\n    (= (k m) nil)\n  false\n  )\n)","user":"558bf7cfe4b0277789237635"},{"problem":134,"code":"(fn s [a b]\n  (if(contains? b a)\n    (= (a b) nil)\n    false\n    )\n)","user":"5fe09d1fe4b05ac5b16ea15b"},{"problem":134,"code":"(fn [el mp] (and (contains? mp el)(nil? (el mp))))","user":"5cc092d1e4b0ccb061962790"},{"code":"#(and (contains? %2 %1) ((complement get) %2 %1))","problem":134,"user":"4f8bbb27e4b02e764a0a5182"},{"code":"(fn [thekey themap] (and (contains? themap thekey) (= nil (themap thekey))))","problem":134,"user":"52d45010e4b09f7907dd132d"},{"problem":134,"code":"(fn [key, map] (and (contains? map key) (nil? (map key))))","user":"54d127b7e4b0e8a36923e5de"},{"problem":134,"code":"(fn [k x] (if (and (nil? (get x k))(contains? x k)) true false))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":134,"code":"(fn f [k m] (if (contains? m k)\n    (= (k m) nil)\n    false))","user":"5ed15e23e4b016b56eae05ba"},{"problem":134,"code":"(fn isnil [key dict]\n  (and (contains? dict key) (nil? (key dict))))","user":"545801f6e4b01be26fd74615"},{"problem":134,"code":"#(and (= (%1 %2) nil) (contains? %2 %1) )","user":"5372c830e4b06d7f452d9dff"},{"problem":134,"code":"(fn [k v]\n  (if (contains? v k)\n    (= (k v) nil)\n    false))","user":"59c3b24ee4b0a024fb6ae4e1"},{"code":"(fn is-nil [key map]\r\n  (if (contains? map key)\r\n    (nil? (map key))\r\n    false))","problem":134,"user":"4f20c040e4b0d66497709fcb"},{"problem":134,"code":"(fn [k m] \n  (nil? (k m false)))","user":"5412646de4b01498b1a719d4"},{"code":"#(nil? (%2 % +))","problem":134,"user":"4dabb7b1950ed6eda1bd72f3"},{"code":"(fn [rand-key rand-map]\n  (if (contains? rand-map rand-key)\n    (if (get rand-map rand-key)\n      false\n      true)\n    false))","problem":134,"user":"529f9bf2e4b04e0c58e87bb4"},{"problem":134,"code":"(fn [some-key coll]\n  (if (= nil (get coll some-key false))\n         true\n          false))","user":"562c2fc2e4b058fa18c5a6d7"},{"problem":134,"code":"(fn [k x] \n  (if (and \n       (nil? (k x)) \n       (contains? x k)) \n    true false))","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":134,"code":"(fn [x xs] (not (xs x true)))","user":"55f6fe09e4b06e875b46cea2"},{"problem":134,"code":"(fn [k m]\n  (nil? (m k :not-found)))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn\n   [k m]\n   (if (contains? m k)\n     (nil? (k m))\n      false))","problem":134,"user":"50b0cffae4b009df37c708c5"},{"problem":134,"code":"#(if (%2 %1 :not) false true)","user":"55f27bf9e4b06e875b46ce45"},{"problem":134,"code":"(fn [k m]\n (boolean (some #(= % [k nil]) m)))","user":"5db35f85e4b010eb3c36cd22"},{"code":"(fn [x y] (if (and (nil? (x y)) (contains? y x)) true false))","problem":134,"user":"51416934e4b03d51af0d04f0"},{"problem":134,"code":"(fn [b a] (nil?(b a 0)))","user":"550a26e2e4b06e50f9beb12a"},{"problem":134,"code":"(fn [key map] (nil? (get map key :missing)))","user":"5b27fb06e4b063e2438bcc4c"},{"problem":134,"code":"(fn nilkey [f x] (nil? (f x :key-not-found)))","user":"56278266e4b00e49c7cb47d3"},{"code":"#(and (nil? (%2 %)) (contains? (set (keys %2)) %))","problem":134,"user":"4e16bdef535d04ed9115e7e9"},{"problem":134,"code":"(fn [key coll] \n  (if (= (get coll key :not-found) nil)\n    true\n    false))","user":"560ae7e6e4b05f002753df0e"},{"problem":134,"code":"#(and (nil? (get %2 %1)) (contains? (set (keys %2)) %1))","user":"53d5d24de4b0e771c302544a"},{"code":"(fn [x y] (and (contains? y x)(nil? (x y))))","problem":134,"user":"52bbd09ee4b07a9af57922ee"},{"code":"(fn [x coll]\n  (if (contains? coll x)\n    (if (nil? (x coll)) true false)\n    false))","problem":134,"user":"4f030bd1535dcb61093f6a4b"},{"problem":134,"code":"(fn [k lst]\n  (and\n   (not (nil? (find lst k)))\n   (nil? (get lst k))))","user":"55fb1c77e4b0f488688e065c"},{"problem":134,"code":"(fn contains-nil-value-key? [key m]\n  (and (contains? m key) (= nil (m key))))","user":"5c506951e4b0f9f7a8770ec5"},{"code":"(fn [k {v k :as coll}]\n  (and (contains? coll k)\n       (= v nil)))","problem":134,"user":"529b5301e4b02ebb4ef7509f"},{"problem":134,"code":"(fn[key coll]\n    (and (contains? coll key) (nil? (get coll key))))","user":"5afd31b7e4b0cc2b61a3bd18"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (nil? (k m))\n    false))","problem":134,"user":"4e570b60535d8a8b8723a286"},{"problem":134,"code":"(fn [k m] (if (contains? m k)\n  \t\t   (nil? (get m k))\n  \t\t   false)\n  )","user":"5559b443e4b0deb715856e3c"},{"problem":134,"code":"(fn [k m] (nil? (m k \"Kev\")))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":134,"code":"(fn mapcontains\n   ([ourKey ourMap]\n    (and (contains? ourMap ourKey) (= (get ourMap ourKey) nil))))","user":"5499e052e4b03163384f4705"},{"code":"#(nil? (%2 % 1))","problem":134,"user":"4ea0cfb0535d7eef308072ae"},{"problem":134,"code":"(fn [k m] (and (= nil (k m)) (= 1 (count (filter #(= k (first %)) m)))))","user":"57addbcce4b0b8559636fca3"},{"problem":134,"code":"(fn [x lst]\n  (let [is (some true? (map (fn [y]\n          (if (and (= x (first y)) (nil? (second y)))\n            true\n            false)) lst))]\n    (if (nil? is)\n      false\n      is)))","user":"5e978fe5e4b0157ca96647d1"},{"code":"#(let [ks (set (keys %2))\n       contained (not (nil? (ks %1)))\n       v (%2 %1)]\n   (and contained\n        (nil? v)))","problem":134,"user":"4f3ae998e4b0e243712b1f1f"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n  \t(= (m k) nil)\n  \tfalse))","user":"5f9f744fe4b0715f5002d841"},{"problem":134,"code":"#(nil? (get %2 %1 :not-inserted))","user":"563f24f9e4b08d4f616f5ed0"},{"code":"(fn[x y] (and (contains? y x) (= nil (get y x))))","problem":134,"user":"52271ffee4b04e78ff2e19a9"},{"code":"(fn [k m] (nil? (m k 1)))","problem":134,"user":"52d66152e4b09f7907dd1357"},{"problem":134,"code":"(fn [k, h] (= nil (k h true)))","user":"5e2ead6ae4b05b4b015161f5"},{"code":"(fn [x y] (if (contains? y x ) \n              (nil? (x y)) \n               false))","problem":134,"user":"526f0a68e4b03e8d9a4a7348"},{"code":"(fn my-test[key map] (and (contains? map key) (nil? (map key))))","problem":134,"user":"530b8ce1e4b02e82168697cd"},{"code":"(fn [ x y ] ( and ( contains? y x) ( = nil (x y))) )","problem":134,"user":"52f90613e4b047fd55836fe1"},{"problem":134,"code":"(fn [x y](and (contains? y x) (nil? (get y x))))","user":"54ca735fe4b057c6fda3a25c"},{"code":"(fn [x y] (= (get y x false) nil))","problem":134,"user":"50f07b21e4b0bdaecbb47dc2"},{"problem":134,"code":"(fn [k m] (if (find m k) (= nil (get m k)) false))","user":"5d0eda66e4b0cc9c9158825f"},{"code":"#(and (contains? (set (keys %2)) %1) (nil? (%1 %2)))","problem":134,"user":"52afbc69e4b0c58976d9acc0"},{"problem":134,"code":"(fn [k m] \n  (nil? (k m 1)))","user":"5bba703fe4b0a20761a235eb"},{"problem":134,"code":"(fn isnil [k m] (= nil (get m k true)))","user":"58866b4fe4b0f1effa3b76d4"},{"problem":134,"code":"(fn [k m] \n  (and\n   (contains? m k)\n   (nil? (k m))))","user":"5630ce72e4b0bfe05bf11786"},{"code":"(fn g [k d] (nil?(get d k 0)))","problem":134,"user":"4e653558535d8ccf87e9fe6f"},{"problem":134,"code":"(fn [key map]\n  (and (contains? map key) (nil? (get map key)))\n  )","user":"53c6c9dfe4b00fb29b2212a1"},{"code":"(fn [k ma] (and \n                (contains? ma k)\n                (= nil (k ma))\n                ))","problem":134,"user":"51427a8be4b0b50abeb46b37"},{"problem":134,"code":"(fn [k ms]\n  (and\n    (contains? ms k)\n    (nil? (get ms k))))","user":"567af6e2e4b05957ce8c61a0"},{"code":"(fn nil-key\n  [k hsh]\n  (and\n    (contains? hsh k)\n    (= nil (k hsh))))","problem":134,"user":"504e12ade4b078edc5f593b7"},{"problem":134,"code":"(fn [k m]\n  (let [v (get m k ::_)]\n    (if (not= v ::_)\n      (nil? v)\n      false)))","user":"4db396c7535df7e46ed9b6cf"},{"code":"(fn [x y]\n  (= nil (get y x 1)))","problem":134,"user":"52e9dbe5e4b09f7907dd14b4"},{"code":"(fn [x y]\n  (and (contains? y x) (nil? (get y x)))\n)","problem":134,"user":"5277fb07e4b03e8d9a4a7518"},{"problem":134,"code":"(fn [a b] (= nil (get b a \"none\")))","user":"5c2457a2e4b07e362c2305a0"},{"code":"(fn [keyy mapp] (cond \n         (and \n           (contains? mapp keyy)\n           \t(= (mapp keyy) nil)) true\n         :else false))","problem":134,"user":"50d5c19ce4b0159555a1fc61"},{"code":"(fn [x y] (and (not (nil? (find y x))) (nil? (get y x))))","problem":134,"user":"4f57b523e4b0a7574ea7183c"},{"problem":134,"code":"#(let [ss %2 index %1] (and (contains? ss index) (nil? (get ss index))))","user":"563c6ebae4b0bfe05bf11834"},{"code":"(fn a [k m] (and (.containsKey m k) (nil? (m k))))","problem":134,"user":"50a00725e4b08df8156e9e46"},{"code":"#(let [c (contains? %2 %)\n       n (nil? (% %2))]\n  (and c n))","problem":134,"user":"5261aebbe4b03e8d9a4a7066"},{"problem":134,"code":"(fn [key map]\n  (nil? (get map key :missing)))","user":"55952410e4b0c79f6e1db962"},{"problem":134,"code":"#(= %2 (conj %2 {%1 nil}))","user":"594e3723e4b07ddc2dafaea8"},{"problem":134,"code":"(fn [k m] (and\n (contains? (set (keys m)) k)\n (nil? (k m))))","user":"5885cc62e4b0f1effa3b76c1"},{"code":"(fn nilkey?\n  [k m]\n  (if (contains? m k)\n    (nil? (k m))\n    false))","problem":134,"user":"51f2a491e4b0210f90e74553"},{"code":"#(and (contains? %2 %) (nil? (get %2 %1)))","problem":134,"user":"4f0c84ce535d0136e6c2230e"},{"code":"#(nil? (get %2 % :not-nil))","problem":134,"user":"4fd7a223e4b0dab7d829f387"},{"problem":134,"code":"(fn [k mp] (if (and (contains? mp k) (= (k mp) nil) ) true false)  )","user":"5fc5c303e4b02c825b0c8c1a"},{"problem":134,"code":"(fn[key, map] (nil? (get map key 1)))","user":"55c63dc4e4b0e31453f649bb"},{"problem":134,"code":"#(if (contains? %2 %1) (if (nil? (get %2 %1)) true false) false)","user":"5b8aa478e4b0c0b3ffbd49b2"},{"code":"(fn [k, m] (and (contains? m k) (= (m k) nil)))","problem":134,"user":"51aab611e4b04e3dc0c27b2d"},{"problem":134,"code":"(fn [keyy mapp]\n  (and\n  (contains? mapp keyy)\n  (not (keyy mapp))))","user":"5e7fb908e4b085ba37836e3f"},{"problem":134,"code":"#(and (true? (some (partial = %1) (keys %2))) (nil? (%2 %1)))","user":"54202a4fe4b01498b1a71a9f"},{"problem":134,"code":"#(if (and (contains? %2 %1) (nil? (%2 %1)))\n   true\n   false)","user":"55101237e4b06e50f9beb181"},{"code":"(fn [k m] \n  (not (not (and \n   (k (into #{} (keys m))) \n   (nil? (get m k))))))","problem":134,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":134,"code":"(fn [k coll] (and (nil? (k coll)) (contains? coll k)))","user":"574abbfbe4b02ea114799200"},{"problem":134,"code":"(fn [k m] (and (nil? (get m k)) (not= 0 (get m k 0))))","user":"5268eb68e4b03e8d9a4a71c6"},{"problem":134,"code":"(fn [key coll]\n  (and\n   (contains? coll key)\n   (nil? (key coll))))","user":"54b31445e4b09f271ff37d35"},{"problem":134,"code":"(fn [key hash] (and (true? (some (partial = key) (keys hash))) (nil? (hash key))))","user":"547584d9e4b0c51c1f4d729b"},{"problem":134,"code":"(fn [key mymap] (and (nil? (mymap key)) (= 1 (count (filter (fn [[k v]] (= key k)) mymap)))))","user":"58950f29e4b00487982d5270"},{"problem":134,"code":"(fn [k m]\n  (if (map? m)\n    (and (contains? m k) (= (k m) nil))\n    false))","user":"56002c2de4b04bb52996e161"},{"code":"#(nil? (and (contains? %2 %1)(%1 %2)))","problem":134,"user":"4f03f197535dcb61093f6b84"},{"problem":134,"code":"(fn [t coll] (and (contains? coll t) (nil? (t coll))))","user":"5509bd6ee4b06e50f9beb120"},{"code":"(fn [key map] (if (and (contains? map key) (= nil (get map key))\n) true false\n))","problem":134,"user":"50e9ed1de4b02d54280826d5"},{"problem":134,"code":"(fn nil-key [k m]\n  (if (contains? m k)\n       (if (nil? (m k)) true false)\n       false))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn [key hash] \n  (and (= true (contains? hash key)) (= nil (hash key))))","problem":134,"user":"4e6e7018535d5021c1a8960b"},{"problem":134,"code":"(fn [key1 coll]\n    (if (and (contains? coll key1) (= nil (key1 coll)))\n      true\n      false))","user":"5d8c8175e4b0915913b1d3e1"},{"code":"#(nil? (%2 % -1))","problem":134,"user":"4daa374930acd6ed13482a68"},{"code":"#(if (and (contains? %2 %1) (= nil (%1 %2)))\n  true\n  false)","problem":134,"user":"509b1204e4b0412cdea6eb1d"},{"problem":134,"code":"(fn [keyin mapin] (nil? (mapin keyin \"missing key\")))","user":"53f6bfd9e4b0db01ade6f9e4"},{"code":"(fn [k map] (and (nil? (k map)) (contains? map k)))","problem":134,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"(fn [k mp] (if (contains? mp k) (if (= nil (mp k)) true false) false))","problem":134,"user":"538798fce4b06839e8705f20"},{"problem":134,"code":"(fn [key map]\n  (if (nil? (get map key true))\n    true\n    false))","user":"5c706232e4b0fca0c162277e"},{"code":"(fn [key map] (if (and (contains? map key)(nil? (map key)))\n                true\n                false))","problem":134,"user":"52837636e4b0239c8a67adb6"},{"code":"#(and (contains? %2 %1)\n  (nil? (%1 %2)))","problem":134,"user":"4fc5a693e4b0ee37620e17fc"},{"problem":134,"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (nil? (k m))\n   )\n  )","user":"54c611d1e4b045293a27f627"},{"problem":134,"code":"(fn[MyKey MyMap] (and (contains? MyMap MyKey) (nil? (get MyMap MyKey))))","user":"55769940e4b05c286339e070"},{"problem":134,"code":"(fn [k m] (and\n           (contains? m k)\n           (nil? (m k)))\n  )","user":"4df9d3b0535d04ed9115e77b"},{"problem":134,"code":"(fn [k m]\n    (if (contains? m k)\n      (nil? (m k))\n      false))","user":"58b81490e4b0ebc645576d8c"},{"problem":134,"code":"(fn [k m] (and (not (= (find m k) nil)) (= (get m k) nil)))","user":"5e9f38cce4b00a66d4a9517e"},{"problem":134,"code":"(fn [x d] (= (get d x x) nil))","user":"5eb4927fe4b00a66d4a95221"},{"problem":134,"code":"(fn \n  [key map]\n  (nil? (get map key :not-found)))","user":"5e228b5ae4b05b4b01516134"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= (k m) nil)\n  \tfalse))","user":"555d4421e4b0a2eb076a39a8"},{"problem":134,"code":"(fn [x y] (and (= nil (x y)) (not (= nil (find y x)))))","user":"54078851e4b0addc1aec66bd"},{"problem":134,"code":"(fn [k hv]\n  (and (contains? hv k) (nil? (get hv k))))","user":"54a2760ae4b09f271ff37c5b"},{"code":"(fn [k m] (= (get m k :unknown) nil))","problem":134,"user":"53527551e4b084c2834f4af0"},{"code":"(fn [k m] (if (contains? m k) (if (nil? (get m k)) true false) false))","problem":134,"user":"50838c06e4b0902986d69e0f"},{"problem":134,"code":"(fn [x mx] (and (contains? mx x) (nil? (get mx x))))","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn [k m]\n  (nil? (get m k false)))","problem":134,"user":"4de165f3535d08e6dec9fde6"},{"code":"(fn [k m]\r\n  (and \r\n     (contains? m k)\r\n     (nil? (k m))))","problem":134,"user":"50772e6ae4b0fc74642bff5d"},{"code":"(fn [k m]\n   (and (contains? m k) (nil? (get m k))))","problem":134,"user":"5391bc62e4b0b51d73faaea7"},{"problem":134,"code":"(fn func [x y]\n  (if (contains? y x)\n    (nil? (get y x))\n    false))","user":"52f225bfe4b05e3f0be25ef4"},{"problem":134,"code":"(fn [k m] (if (contains? m k) (nil? (m k)) false  ))","user":"558bdcefe4b0277789237633"},{"problem":134,"code":"(fn [kw coll] \n  (nil? (kw coll 2)))","user":"5576961be4b05c286339e06f"},{"problem":134,"code":"(fn  [k m]\n   (= nil (get m k \"false\")))","user":"56a257e7e4b0542e1f8d14bb"},{"problem":134,"code":"(fn [k m] (if (contains? m k) (if (= nil (get m k)) true false ) false \n        ))","user":"5d05d005e4b0cc9c915881e6"},{"problem":134,"code":"(fn\n  [x xmap]\n  (if (= (get xmap x 'bla) nil )\n    true\n    false))","user":"5412b531e4b01498b1a719d7"},{"problem":134,"code":"(fn [a b]\n  (if (contains? b a)\n    (if (= (a b) nil)\n      true\n      false)\n    false))","user":"5a998d39e4b0d174b936c79c"},{"problem":134,"code":"(fn [needle haystack]\n  (and (contains? haystack needle) (= (needle haystack) nil))\n)","user":"4f74fed2e4b0fbe0118ec553"},{"code":"(fn ifnilkey? [key map]\n  (and (contains? map key)\n       (nil? (key map))))","problem":134,"user":"4db8d37d535d1e037afb219c"},{"code":"(fn ff [vv mm] (and (>  ( count (find mm vv)) 0 )\n                    (= nil (mm vv ))))","problem":134,"user":"4f030775535dcb61093f6a43"},{"problem":134,"code":"(fn  ve [m value]\n  (= (get value m \"out of index\")\n      nil))","user":"57dd651ee4b0bd073c202441"},{"problem":134,"code":"(fn [k v]\n  (let [chave (nil? (k v))\n        contem-colecao (contains? v k)]\n    (= chave contem-colecao)))","user":"604a3daee4b02d28681c77f2"},{"problem":134,"code":"(fn my-nil-check [key m] \n  (let [ks (keys m)]\n    (if (contains? m key)\n      (let [value (key m)] (nil? value))\n      false)))","user":"5d80f328e4b0915913b1d372"},{"code":"(fn [val, mp] (and (contains? mp val) (= (mp val) nil)))","problem":134,"user":"52a5d1f3e4b0c58976d9abf1"},{"code":"(fn nilkey [y x] (and (nil? (get x y)) (contains? x y)))","problem":134,"user":"53504a7de4b084c2834f4ad9"},{"problem":134,"code":"(fn [x\n     m]\n  (if (contains? m x)\n  \t(= (x m) nil)\n  \tfalse))","user":"5d68bfd0e4b0db5d338d1602"},{"problem":134,"code":"(fn [ k {:keys [a b] :as m}] \n    (and (contains? m k) (nil? (get m k)) )\n)","user":"55d7312ee4b0e31453f64a9f"},{"problem":134,"code":"(fn [a b]\n   (if (not= nil (get b a \"not found\"))\n     false\n     true))","user":"602ddebde4b0d5df2af2227d"},{"problem":134,"code":"(fn [k m]\n  (and \n   (not= (find m k) nil)\n   (= (get m k) nil)))","user":"5cc74e44e4b0ccb061962833"},{"code":"(fn [x m]\n  (nil? (get m x \"missing\")))","problem":134,"user":"538d73c1e4b0b51d73faae6f"},{"problem":134,"code":"(fn [x, s]\n  (if (contains? s x)\n    (if (get s x)\n      false\n      true)\n    false))","user":"5a7ae674e4b03baeef9276d5"},{"code":"(fn [k col] (and (contains? col k) (= nil (get col k) )))","problem":134,"user":"4df9c598535d04ed9115e77a"},{"problem":134,"code":"(fn findKey [key map]\n  (if(contains? map key)\n\t(= (map key) nil)\n    false))","user":"5b0d72e5e4b0cc2b61a3bdf8"},{"problem":134,"code":"(fn [k m] (nil? (get m k ::not)))","user":"4e89dbce535d3e98b8023283"},{"problem":134,"code":"#(if (contains? %2 %)  (nil? (get %2 %)) false)","user":"53336ab8e4b019098a6f8b84"},{"problem":134,"code":"(fn [key coll] (and (contains? coll key)(nil? (get coll key))))","user":"5c7e82cbe4b0d597f478cacb"},{"problem":134,"code":"#(if (%2 %1 \"true\") false true)","user":"58226f18e4b04b46fc4b0f99"},{"code":"(fn [key- map-]\n  (and (nil? (map- key-))\n       (contains? map- key-)\n                  ))","problem":134,"user":"4fd459cfe4b0d4de60cee36b"},{"problem":134,"code":"(fn [k,m] (if (contains? m k)\n(nil? (m k))\nfalse ))","user":"570cd4bde4b0b0fb43fd06cf"},{"code":"(fn [key coll]\n  (if (and (contains? coll key)\n           (= (key coll) nil))\n    true\n    false))","problem":134,"user":"4f2a7174e4b0d6649770a03e"},{"problem":134,"code":"(fn [k m]\n  (and (= nil (get m k))(contains? m k))\n  )","user":"54bbba99e4b0ed20f4ff6ec2"},{"code":"(fn\n  [x, xs]\n  (and \n    (contains? xs x)\n    (= nil (x xs))))","problem":134,"user":"4f3d272fe4b0e243712b1f64"},{"code":"(fn [k m] \n  (and \n    (contains? m k)\n    (= (m k) nil) ))","problem":134,"user":"53050c04e4b0d8b024fd3757"},{"problem":134,"code":"(fn [key map]  (and (contains? map key)  (nil? (get map key))))","user":"554a75c9e4b0a04f79299575"},{"problem":134,"code":"(fn [x y] (and (contains? y x) (= nil (get y x)) ))","user":"57cc14aae4b05aa3c4741d4a"},{"code":"(fn [k m]\n  (and (contains? m k)\n    (nil? (m k))))","problem":134,"user":"4eba5adb535dfed6da9c6d63"},{"code":"(fn [key map] (and \n  (contains? map key)\n  (nil? (key map))))","problem":134,"user":"4f0478b0535dcb61093f6bcb"},{"problem":134,"code":"(fn [x m] \n  (nil? (get m x (not nil))))","user":"5893c64ce4b00487982d524b"},{"code":"(fn my-get [k m]\n  (nil? (get m k :not-existing-key))\n  )","problem":134,"user":"4dae99ccedd6309eace4d158"},{"code":"(fn [x m] (and (= (m x) nil) (contains? m x) ))","problem":134,"user":"4edc0c16535d10e5ff6f531f"},{"code":"#(nil?(get %2 % false))","problem":134,"user":"4db13ff51254ad5b4805fa68"},{"code":"(fn [x y] (= nil (get y x 1)))","problem":134,"user":"4f03722c535dcb61093f6ad2"},{"problem":134,"code":"(fn [k, c] (nil? (get c k false)))","user":"577b9cfde4b0d3393e5deb16"},{"code":"(fn [k m] (nil? (k m 1)))","problem":134,"user":"4f0364d5535dcb61093f6a9e"},{"code":"(fn [k m] (and (contains? m k)\n               (nil? (get m k))))","problem":134,"user":"5239147de4b0d705d026eeff"},{"problem":134,"code":"(fn [nilkey coll]\n  (and (contains? coll nilkey) (nil? (nilkey coll)) )\n)","user":"5b59b89be4b02d533a91bd7d"},{"problem":134,"code":"#(nil? (% %2 \"anythingbutnil\"))","user":"594a7ed1e4b07ddc2dafae02"},{"problem":134,"code":"#(= (get %2 %1 \"nope\") nil)","user":"58a9f983e4b01a0c0b232977"},{"problem":134,"code":"(fn [key seq]\n    (and (contains? seq key)\n         (= (key seq) nil)))","user":"5f02f365e4b0cf489e8d7f2c"},{"code":"#(nil? (%2 % 0))","problem":134,"user":"4dbb0b6c535d1e037afb21b0"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k) (nil? (k m))) )","user":"5b5eb53be4b0c6492753e6dd"},{"problem":134,"code":"(fn [k m] (if (contains? m k) (nil? (m k)) false) )","user":"57167214e4b07c98581c3af8"},{"problem":134,"code":"(fn [query coll] \n  (if (and (contains? coll query)(= nil (get coll query)))\n    true\n    false))","user":"563afd5ae4b0bfe05bf11809"},{"code":"(fn [k m]\n  (and (contains? m k) (= nil (m k))))","problem":134,"user":"4fda016ae4b05e33b9224f42"},{"problem":134,"code":"(fn [k m]\n   (and (nil? (get m k))\n        (contains? m k)))","user":"5515b138e4b055c2f668d4ed"},{"problem":134,"code":";;(fn [k mp] (and (contains? mp k) (nil? (get mp k))))\n(fn [k mp] (and (contains? mp k) (nil? (k mp))))","user":"55150524e4b055c2f668d4d9"},{"problem":134,"code":"(fn[key map] (and (= nil (key map)) (contains? map key)))","user":"572d41e6e4b0cd1946bd0f6d"},{"code":"(fn [x y] (and (= nil (x y)) (contains? y x)))","problem":134,"user":"4f31ad57e4b0d6649770a089"},{"problem":134,"code":"(fn my[x y] (= nil (get y x \"missing\")))","user":"53f64f38e4b0db01ade6f9dc"},{"problem":134,"code":"(fn nilkey [k m]\n  (if (and (= (k m) nil) (contains? m k)) true false)\n  )","user":"60c90322e4b0e0fa5f1b4302"},{"code":"(fn [a-key a-map] \n  (if (contains? a-map a-key) (nil? (a-key a-map)) false)\n)","problem":134,"user":"52010af0e4b0d7096e99ddae"},{"code":"(fn [a col] (and (contains? col a) (= nil (col a))))","problem":134,"user":"4e7f8f85535db966e863cc44"},{"code":"(fn [r m] (if-let [[k v] (find m r)] (cond (nil? v) true :else false) false))","problem":134,"user":"52265e41e4b04e78ff2e1981"},{"code":"#( nil? ( %1 %2 \"3\" ))","problem":134,"user":"503b6995e4b07a1917cc34dd"},{"problem":134,"code":"#(= nil (get %2 %1 :foo))","user":"5a8e9a7ae4b05369db4d2528"},{"problem":134,"code":"#(and (contains? %2 %1) (nil? (get %2 %1) ) )","user":"55a31c66e4b0acc240e31530"},{"code":"(fn [i l]\n  (and (contains? l i) (nil? (i l)))\n)","problem":134,"user":"514f72a2e4b0b449e54b8df7"},{"problem":134,"code":"#(and (contains? %2 %1)\n      (= nil (get %2 %1)))","user":"5b4b8cd6e4b02d533a91bc9f"},{"code":"(fn nilkey [a x]\n  (if (contains? x a)\n    (if (nil? (get x a))\n      true\n      false)\n    false))","problem":134,"user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn [k map] (and (contains? map k) (nil? (k map))))","problem":134,"user":"4dafa380edd6309eace4d17c"},{"problem":134,"code":"(fn [k col]\n  (and\n   (contains? col k)\n   (nil? (k col))))","user":"5b4dfd5de4b02d533a91bcc3"},{"problem":134,"code":"(fn [l t] (and (contains? t l) (nil? (l t))))","user":"542ab1afe4b01498b1a71b48"},{"code":"(fn [key m]\n  (if (and (contains? m key)\n           (nil? (m key)))\n      true\n      false))","problem":134,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":134,"code":"#(nil? (get %2 %1 111))","user":"570d0548e4b0b0fb43fd06d2"},{"code":"#(nil? (% %2 false))","problem":134,"user":"4db091b7838c48654951d9c2"},{"code":"#(if (some #{%1} (keys %2))\n  (= nil (%1 %2))\n  false)","problem":134,"user":"4db6ce85535d1e037afb217f"},{"code":"(fn [klucz mapa] (if (nil? (find mapa klucz)) false (nil? (get mapa klucz))))","problem":134,"user":"5213348ae4b0d32679a50652"},{"code":"(fn[key map](nil? (get map key false)))","problem":134,"user":"4fd0b0bde4b04c3a95aa0406"},{"problem":134,"code":"(fn [x y] (and (= (x y) nil) (contains? y x) ) )\n\n\n\n;; (= (x y) nil)   true  false  true \n;; (contains? y x) true  true   false\n;;\t\t\t\t   true  false  false","user":"588906a9e4b0f1effa3b772a"},{"code":"(fn [x,y] (and (contains? y x) (= (x y) nil)))","problem":134,"user":"4f6bb019e4b07046d9f4efb2"},{"problem":134,"code":"(fn [x y] (nil? (get y x \"notinmap\")))","user":"57011eb3e4b08d47c97781d1"},{"code":"#(and\n   (contains? %2 %1)\n   (= nil (%2 %1)))","problem":134,"user":"52f8b2a2e4b047fd55836fda"},{"code":"#(nil? (get %2 %1 :missing))","problem":134,"user":"4e50ad74535dc968683fc4ec"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k) (not (k m)) false))","user":"55f03fb5e4b06e875b46ce1f"},{"problem":134,"code":"(fn [k m] (= nil ( get m k false )) )","user":"58f9fde7e4b0438e51c2cf56"},{"code":"#(nil? (% %2 ::X))","problem":134,"user":"4e7dfab0535db169f9c796f9"},{"problem":134,"code":"(fn [x y]\n     (if (contains? y x)\n       (nil? (y x))\n       false))","user":"589c8fa6e4b00487982d5365"},{"problem":134,"code":"(fn [key map] (nil? (map key :z)) )","user":"59a80652e4b0bcf4e9a43aeb"},{"code":"(fn [k m]\n  (cond (not (contains? m k)) false\n        (nil? (m k)) true\n        :else false))","problem":134,"user":"4ee75ec2535d93acb0a66867"},{"problem":134,"code":"(fn [idx collection] (and ( contains? collection, idx) (= ( collection idx ) nil)))","user":"5953949be4b066ee0a44aeea"},{"code":"(fn [x y] (if (and (contains? y x) (nil? (get y x)))\n               true\n               false))","problem":134,"user":"51fdbf73e4b0f1313d468a51"},{"problem":134,"code":";(fn [k m] (every? true?\n;                  (list \n;                   (some #(= k %)(keys m)) \n;                   (nil? (k m)))))\n(fn [k m] \n  (and (contains? m k) (nil? (m k))))","user":"5839efeae4b089d5ab817d47"},{"code":"(fn [key container]\n  (and (contains? container key)\n       (nil? (key container))))","problem":134,"user":"504ee511e4b0e7ad84dbc4a4"},{"code":"(fn\n  [k ma]\n  (let [{ke k :or {ke true}} ma]\n    (= ke nil)))","problem":134,"user":"5289bba9e4b0239c8a67ae69"},{"problem":134,"code":"(fn [k col]\n  (nil? (get col k 0)))","user":"5793931ee4b0e215f87e845c"},{"problem":134,"code":"(fn [k m] (if (contains? m k) (not (k m)) false))","user":"56aed78fe4b03c432f187363"},{"code":"(fn [k xs] (and (contains? xs k) (not (k xs))))","problem":134,"user":"4e513758535dc968683fc4f3"},{"code":"(fn [target haystack]\n  (and (nil? (target haystack))\n       (contains? haystack target)))","problem":134,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"code":"(fn [key map]\n  (and (contains? map key )\n       (= (map key) nil)))","problem":134,"user":"518ee4f9e4b0cd6ff51676a5"},{"problem":134,"code":"(fn nil_key [k m] (if (contains? m k)\n                    (nil? (k m))\n                    false\n                  )\n)","user":"5f6b8222e4b02876ed9fd052"},{"problem":134,"code":"(fn [k m]\n  (cond (contains? m k) (nil? (k m))\n        :otherwise false))","user":"5717ad6fe4b07c98581c3b14"},{"code":"(fn nil-val?\n  [k m]\n  (and (contains? m k) (nil? (k m))))","problem":134,"user":"52dc3bc8e4b09f7907dd13cb"},{"problem":134,"code":"(fn [k c] \n  (and (contains? c k) \n       (nil? (c k))))","user":"5e80edc3e4b09a7a73c8bba9"},{"problem":134,"code":"(fn [k m]\n    (let [map-entry (find m k)]\n      (and (= 2 (count map-entry))\n           (nil? (second map-entry)))))","user":"51b91b08e4b0e871ca4958f8"},{"problem":134,"code":"#(if (contains? %2 %1) (nil? (% %2)) false)","user":"53d0d7a9e4b00fb29b22130c"},{"code":"(fn func [k m] (if (and (contains? m k) (= (m k) nil))true false))","problem":134,"user":"5062bc46e4b05ac47bc68d68"},{"problem":134,"code":"(fn [k m]\n  (nil? (and (contains? m k)(get m k))) )","user":"577e42dee4b0c8d87281f6e4"},{"problem":134,"code":"#(if (contains? %2 %1)\n    (= (%1 %2) nil) \n    false)","user":"5e79fcb9e4b085ba37836e08"},{"problem":134,"code":"(fn \n  [x y] \n  (and \n    (contains? y x) \n    (nil? (x y))\n  )\n)","user":"57da8d94e4b0bd073c202413"},{"problem":134,"code":"(fn nil-key [k m] (nil? (k m false)))","user":"60617afee4b03746e80ebf6c"},{"code":"(fn [k m] (= (get m k \"missing\") nil))","problem":134,"user":"4f65ef6de4b07046d9f4ef49"},{"problem":134,"code":"(fn [x y]\n     (if(and (contains? y x) (nil? (get y x)))\n       true\n       false))","user":"5c4c8b9ae4b0f9f7a8770e78"},{"problem":134,"code":"(fn check [ky mp]\n  (and (contains? mp ky) (nil? (get mp ky))))","user":"53ea72b6e4b036ad0777e4e5"},{"code":"(fn [k m]\n  (nil? \n    (get m k \"notnil\")))","problem":134,"user":"4f831fd3e4b033992c121c17"},{"problem":134,"code":"(fn nil-valued? [key map]\n    (nil? (get map key :notfound)))","user":"4fc6305de4b0ee37620e180b"},{"code":"#(nil? (get %2 %1 :notfound))","problem":134,"user":"4eea4d84535d93acb0a6689c"},{"code":"#(if (first\n   (for [x (keys %2)\n         :when (= x %1)]\n     (nil?  (%1 %2)))) true false)","problem":134,"user":"50ac3e4be4b071b89ef2622d"},{"problem":134,"code":"(fn val-nil? [key m]\n  (and (contains? m key) (= nil (m key))))","user":"5ed3c43be4b016b56eae05c4"},{"code":"(fn [k coll] (and (nil? (coll k)) (contains? coll k)))","problem":134,"user":"4dd59d8b535dae65d5c462eb"},{"code":"#(nil? (%2 % ::n))","problem":134,"user":"4e39d763535deb9a81d77f46"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (not (k m))) )","user":"5c71355ee4b0fca0c1622791"},{"code":"(fn [k m]\n  (if (contains? m k)\n  \t(= (k m) nil)\n  \tfalse))","problem":134,"user":"51493fd0e4b05514c84b7cce"},{"problem":134,"code":"(fn\n  [my-key my-map]\n  (and (contains? my-map my-key) (= (my-key my-map) nil)))","user":"58e45a2ce4b056aecfd47c69"},{"code":"(fn [k m] (if (= (get m k \"na\") nil) true false))","problem":134,"user":"52112be7e4b07aea8afc4f68"},{"problem":134,"code":"#(nil? (%2 %1 :notnil))","user":"53fe1c3be4b0de5c418485f2"},{"code":"(fn [x y]   \n      (and\n        (contains? y x)\n        (nil? (get y x))))","problem":134,"user":"4f1900b0535d64f603146463"},{"problem":134,"code":"#(nil? (get %2 %1 {}))","user":"55ec04c4e4b0121d4835fdc1"},{"code":"#(nil? ( %2 %1 0))","problem":134,"user":"50746e23e4b054001656acd1"},{"problem":134,"code":"(fn [f x] (if (contains? x f)\n            (nil? (x f))\n            (true? false)))","user":"5bfc7a06e4b0bdcf453d15ee"},{"problem":134,"code":"#(not (%1 %2 \"\"))","user":"54a6399ee4b09f271ff37c85"},{"problem":134,"code":"(fn [key map] (if (and (nil? (get map key)) (contains? map key)) true false))","user":"5875f2c5e4b01531a375ea77"},{"problem":134,"code":"(fn [k m]\n\t(if (contains? m k)\n\t\t(nil? (k m))\n\t\tfalse))","user":"573eb8f2e4b05c31a32c082f"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k) \n    (= (m k) nil)\n    false))","user":"5900e067e4b0438e51c2d031"},{"code":"(fn [key mp]\n  (= nil (get mp key false)))","problem":134,"user":"50e35b2de4b094329ae7f4bb"},{"problem":134,"code":"(fn [m k]\n  (= nil (get k m 1))\n)","user":"54bc6c75e4b0ed20f4ff6ed0"},{"code":"#(if (nil? (get %2 %1 0)) true false)","problem":134,"user":"500a0a11e4b03d00572d2d73"},{"code":"(fn [a b] (\n  if (contains? b a) (nil? (get b a)) false\n  ))","problem":134,"user":"4ef18428535dced4c769f216"},{"problem":134,"code":"(fn [k mp] (and (contains? mp k) (not (k mp))))","user":"578fc3d2e4b0ebec4cfb759b"},{"code":"#(if (contains? %2 %1) (= (%2 %1) nil) false)","problem":134,"user":"4f70a967e4b07046d9f4effa"},{"problem":134,"code":"(fn [x map] (if (and (find map x) (nil? (x map))) true false))","user":"59fcc31fe4b01bb0ae8afcef"},{"code":"(fn [k m] (= nil (get m k :foo)))","problem":134,"user":"4ea1bc93535d7eef308072b9"},{"code":"(fn [k m]\n  (cond\n    (and (contains? m k) (nil? (k m))) true\n    :else false))","problem":134,"user":"50ad60a9e4b00424fd5bf722"},{"problem":134,"code":"(fn [k col] (nil? (get col k :nope)))","user":"57c3451fe4b05aa3c4741cbd"},{"problem":134,"code":";;(fn [k m] \n  ;;(if (contains? m k)\n    ;;(= (m k) nil)\n    ;;false))\n#(nil? (get %2 %1 \" \"))","user":"57ef793de4b0bfb2137f5bd8"},{"code":"#(if\n   (and (contains? %2 %1) (nil? (%1 %2)))\n   true\n   false)","problem":134,"user":"51d360d1e4b099f3b6acddff"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (= nil (k m)) ))","user":"599ed08fe4b0871e7608b812"},{"code":"(fn [key map] (and\n               (contains? map key)\n               (nil? (map key))))","problem":134,"user":"52cca439e4b07d0d72b27369"},{"problem":134,"code":"(fn\n  [a-key a-map]\n  (and\n   (contains? a-map a-key)\n   (nil? (a-key a-map))))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m (keyword k))\n    (if (= nil (get m (keyword k)))\n      true\n      false)\n    false))","user":"5db9a6c3e4b010eb3c36cd56"},{"code":"(fn [k coll] \n  (and \n    (contains? coll k)\n    (= (get coll k) nil)))","problem":134,"user":"4f03bbf2535dcb61093f6b59"},{"problem":134,"code":"(fn nil-key [k m]\n  (and (contains? m k) (nil? (m k))))","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":134,"code":"(fn  [k m]\n  (if (contains? m k)\n    (= (m k) nil)\n    false))","user":"5a22a54fe4b0ff51aa4b32cb"},{"code":"(fn [k m] \n  (and \n   (contains? m k)\n   (nil? (k m))\n         ))","problem":134,"user":"5141a8f2e4b02fd87f5064c1"},{"problem":134,"code":"(fn [key map]\n           (and (contains? map key) (nil? (key map))))","user":"5de8f7cee4b0986d99407f82"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k) \n    (nil? (k m))\n    false\n    )\n  )","user":"56c7d8dee4b0ed865f9758c9"},{"code":"(fn test [key map]\n  (= nil(map key false))\n  )","problem":134,"user":"504f7a05e4b0a02f9cffde8a"},{"problem":134,"code":"(fn [key map] (= nil (get map key :missing)))","user":"556f48b9e4b09a3098a5251f"},{"problem":134,"code":"(fn [k m]\n\t(and\n\t\t(contains? m k)\n\t\t(nil? (k m))))","user":"5f21d172e4b0f565ad998286"},{"code":"#(nil? (get %2 %1 \"fail\"))","problem":134,"user":"4e6dc5f5535d5021c1a895f0"},{"code":"(fn [key map]\n  (and (.containsKey map key) (nil? (map key))))","problem":134,"user":"5344fe13e4b084c2834f4a32"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (nil? (k m))  )  )","user":"52b666bfe4b0c58976d9ad44"},{"problem":134,"code":"(fn [x y] (nil? (y x true)) )","user":"55129636e4b06e50f9beb1ab"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)\n    (nil? (k m))))","user":"54058af3e4b0addc1aec6669"},{"code":"(fn [k x] (and (contains? x k) (nil? (x k))))","problem":134,"user":"4fa82277e4b081705acca1d0"},{"code":"(fn   [key map]\n  \n  (if (contains? map key)\n    (nil? (key map))\n    false\n  )\n)","problem":134,"user":"53000714e4b0d8b024fd370e"},{"code":"(fn [x m] \n  (if (contains? m x) (= nil (x m)) false))","problem":134,"user":"4f09dc43535d0136e6c222ec"},{"code":"(fn aa [key map]\n  (nil? (get map key \"no value found\")))","problem":134,"user":"4fade65be4b081705acca243"},{"problem":134,"code":"(fn nilkey [key map] (if (= (get map key)  nil)\n                          (if (contains? map key) true false)\n                          false)\n\n   )","user":"55f6d4fce4b06e875b46ce9b"},{"code":"(fn [k mp] \n  (if (contains? mp k)\n    (nil? (k mp))\n    false))","problem":134,"user":"4ee271e2535d10e5ff6f5369"},{"code":"(fn [aKey aMap]\n  (and\n    (= (aMap aKey) nil)\n    (contains? aMap aKey)))","problem":134,"user":"5379ed48e4b06839e8705e5a"},{"problem":134,"code":"#(nil? (% %2 :f))","user":"54848141e4b0e286459a119e"},{"problem":134,"code":"(fn [my_key my_map] (and (contains? my_map my_key) (nil? (get my_map my_key))))","user":"5984e7dee4b021a7a535fe43"},{"problem":134,"code":"#(and(contains? %2 %1)(=(%1 %2)nil))","user":"59e8bb43e4b0249b72820735"},{"problem":134,"code":"#(let [value (%1 %2)] (and (nil? value) (contains? %2 %1)))","user":"5d99dc47e4b0d3f9b434ad42"},{"problem":134,"code":"(fn [key map] (true? (and (contains? map key) (= (get map key) nil))))","user":"595041e8e4b066ee0a44ae90"},{"problem":134,"code":"(fn [k m]\n  (and (not (nil? (find m k)))\n       (nil? (get m k))))","user":"561b57c3e4b053970a773b11"},{"problem":134,"code":"(fn [thisKey thisMap] (if (contains? thisMap thisKey) (not (thisKey thisMap)) false))","user":"5830377ee4b051871117c004"},{"code":"(fn [x y] (if (contains? y x) (= (get y x) nil) false))","problem":134,"user":"4f4003d9e4b0e243712b1fa5"},{"problem":134,"code":"(fn [k m]\n  (and\n  (contains? m k)\n   (nil? (get m k)   )\n   )\n  )","user":"542a7c9be4b01498b1a71b41"},{"problem":134,"code":"(fn [a b] (if (and (nil? (a b)) (contains? b a))  true false))","user":"5e31a4b0e4b05b4b0151622b"},{"problem":134,"code":"(fn isValueNil? [k, m]\n  (if (contains? m k)\n\t(nil? (m k))\n   \tfalse))","user":"56eff7c1e4b04a395b9a0468"},{"code":"(fn [k coll]\n   (if (contains? coll k)\n     (nil? (k coll))\n     false))","problem":134,"user":"52a9154ee4b0c58976d9ac3b"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (if (nil? (get m k))\n      true\n      false)\n    false))","user":"54e1197fe4b024c67c0cf7c0"},{"problem":134,"code":"(fn [x map]\n  (and (contains? map x)\n       (nil? (get map x))))","user":"53889587e4b0640c7a9a589e"},{"code":"(fn [key map]\n  (and \n   (contains? map key)\n   (nil? (key map))))","problem":134,"user":"50e87427e4b0ebbe794eb7e8"},{"problem":134,"code":"(fn [key collection] (and (contains? collection key) (nil? (key collection))))","user":"5fc3850de4b0db0e95a5f3fd"},{"code":"(fn [key map] (and (contains? map key) (nil? (key map))) )","problem":134,"user":"4e8f5dd1535d65386fec214b"},{"code":"#(and (contains? %2 %1)\n      (not (%2 %1)))","problem":134,"user":"520a3028e4b0e152394d770e"},{"code":"#(nil? (%2 %1 -1))","problem":134,"user":"4db1b5841254ad5b4805fa70"},{"code":"(fn check [key map] (and (contains? map key) (nil? (key map))))","problem":134,"user":"529e6918e4b04e0c58e87b97"},{"problem":134,"code":"(fn [k v] \n  (if (contains? v k)\n    (nil? (k v))\n    false\n    )\n  )","user":"54d0e6c5e4b0e8a36923e5d4"},{"code":"(fn [x y] (= nil (get y x 0)))","problem":134,"user":"4ec8dc17535d6d7199dd36f7"},{"problem":134,"code":"(fn [k m] (let [f (find m k)] (if f (nil? (second f)) false)))","user":"55b6a63ae4b01b9910ae299b"},{"code":"(fn [k m] \n  (if (contains? m k)\n    (if(= (get m k) nil) true false)\n    false\n  )\n)","problem":134,"user":"4ee88f29535d93acb0a66882"},{"code":"#(if (and (nil? (%1 %2)) (contains? %2 %1)) true false)","problem":134,"user":"519291c1e4b08962174cf74b"},{"problem":134,"code":"(fn nil-key\n  [key map]\n  (and\n    (contains? map key)\n    (= (key map) nil)))","user":"53f3d96ee4b0742d9025b0fa"},{"code":"#(if (and (contains? %2 %1)\n          (nil? (%1 %2)))\n  true\n  false)","problem":134,"user":"4e09392a535d04ed9115e7ae"},{"problem":134,"code":"(fn [k coll]\n  (if (contains? coll k)\n      (nil? (k coll))\n      false))","user":"584278e1e4b089d5ab817e19"},{"problem":134,"code":"(fn [k mp] (nil? (get mp k true)))","user":"58225587e4b04b46fc4b0f94"},{"code":"(fn [key map]\n  (and (contains? map key) (nil? (key map))))","problem":134,"user":"5066fa7de4b03d366d7cb2b9"},{"code":";(fn checkKey [%1 %2] \n;   (if (empty? (select-keys %2 [%1]))\n;     false ; empty key, return false\n;     (nil? (get (select-keys %2 [%1]) %1))))\n#(if (empty? (select-keys %2 [%1]))\n     false ; empty key, return false\n     (nil? (get (select-keys %2 [%1]) %1)))","problem":134,"user":"53616d56e4b0243289761e45"},{"problem":134,"code":"(fn nil-map? [key map]\n  (if (contains? map key)\n    (nil? (key map))\n    false))","user":"565654dae4b0f9d632dd849f"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k) \n    (= (k m) nil)\n    false))","user":"5d27cf23e4b092dab7f59c74"},{"code":"(fn [k,m] (and (contains? m k) (nil? (m k))))","problem":134,"user":"4e2c602b535deb9a81d77f06"},{"code":"#(nil? (get %2 %1 :miss))","problem":134,"user":"4ec18451535dfed6da9c6db0"},{"problem":134,"code":"(fn [x y] (= (get y x -1) nil))","user":"5509a176e4b06e50f9beb119"},{"problem":134,"code":"(fn [k m]\n  (let [ks (keys m)\n        contains-k? (seq (filter (partial = k) ks))]\n    (if (and contains-k? (not (k m)))\n      true\n      false)))","user":"5ff26ac2e4b05ac5b16ea1fc"},{"code":"(fn [k m] (let [a (vals (select-keys m [k]))] (if (and (seq? a) (some nil? a)) true false)))","problem":134,"user":"5327c591e4b09d4e7a9b54ff"},{"code":"(fn [key coll] \n  (and \n    (not (nil? (some #{key} (flatten (seq coll)))))\n    (nil? (key coll))))","problem":134,"user":"4fa39b3ee4b081705acca191"},{"problem":134,"code":"(fn[x y](and (contains? y x) (= (x y) nil)))","user":"54ecd7dde4b024c67c0cf85c"},{"problem":134,"code":"(fn has-nil?\n\t[k m]\n\t(= (assoc m k nil)\n\t\tm))","user":"5545477fe4b0a04f79299531"},{"problem":134,"code":"(fn[x xs] (and (contains? xs x) (nil? (xs x))))","user":"56435214e4b08d4f616f5f27"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k :not-nil)))","user":"57822efce4b0d36ec5835e91"},{"problem":134,"code":"(fn [ky mp] (and (nil? (ky mp)) (contains? mp ky)))","user":"5f548678e4b0a0bc16850a7e"},{"code":"(fn [keyy mapp]\n  (and (contains? mapp keyy) (= nil (mapp keyy))))","problem":134,"user":"51b3b22ce4b0f094dd986fa7"},{"code":"(fn [index col] (and (contains? col index) (nil? (index col))))","problem":134,"user":"518c1079e4b0f028e99addf8"},{"code":"#(if (contains? %2 %) (nil? (%2 %)) false)","problem":134,"user":"4ffb61a1e4b0678c553fc3d1"},{"problem":134,"code":"(fn [k m]\n  (if(contains? m k)(=(m k) nil)\n    false))","user":"6085edade4b0736b099e42fc"},{"code":"(fn [v coll]\n  (and\n    (contains? coll v)\n    (nil? (coll v))))","problem":134,"user":"4dbd2aa3535d020aff1edf40"},{"code":"(fn value-nil? [k m]\n  (if (and (contains? m k) (nil? (k m)))\n    true\n    false))","problem":134,"user":"521b339fe4b0c4ef0be83031"},{"problem":134,"code":"(fn \n  [map-key map-to-check]\n  (if (and (contains? map-to-check map-key) (= (map-key map-to-check) nil))\n    true\n    false))","user":"5f9c3f63e4b0715f5002d820"},{"problem":134,"code":"(fn [k m]\n  (= nil (k m 1)))","user":"555521a5e4b0deb715856e12"},{"code":"#(= (if (contains? %2 %1) (get %2 %1) false) nil)","problem":134,"user":"51534ce2e4b0252ac4b16626"},{"code":"(fn a [k m]\n          (and (contains? m k) (nil? (k m))))","problem":134,"user":"50b09833e4b009df37c708bd"},{"code":"(fn [x y] (= nil (get y x\n                      false)) )","problem":134,"user":"5396c9a8e4b0b51d73faaee4"},{"problem":134,"code":"(fn [my-key my-map]\n  (and (contains? my-map my-key) (= nil (my-key my-map))))","user":"5ec91154e4b08d0ec38692ed"},{"problem":134,"code":"(fn [k m] (if (contains? m k)(nil? (m k)) false))","user":"5d7158f3e4b04d129b00f2e1"},{"problem":134,"code":"(fn [s, list] \n  (let [{v s} list]\n  (if (and (= v nil) (contains? list s))\n  true\n  false)))","user":"560d7863e4b05f002753df40"},{"code":"#(and (= (%2 %1) nil) (contains? %2 %1))","problem":134,"user":"4e6a47b2535d8ccf87e9febb"},{"problem":134,"code":"#(if (and (contains? %2 %) (= (% %2) nil)) true false)","user":"55b107fee4b002ce9d5cbc2a"},{"problem":134,"code":"(fn [ke coll] (and (contains? coll ke) (nil? (get coll ke))))","user":"59b0e877e4b0e1f4e384c8d3"},{"problem":134,"code":"(fn [key, map] (and (contains? map key) (= (key map) nil)))","user":"504e15a8e4b078edc5f593c1"},{"problem":134,"code":"(fn [x xs] (and (= (get xs x) nil) (contains? xs x)))","user":"53f74528e4b0de5c4184855c"},{"code":"(fn [k m] (and (contains? m k)\n               (nil? (m k))))","problem":134,"user":"4eca5391535d6d7199dd3704"},{"problem":134,"code":"(fn foo [key m]\n  (let [[fk fv] (find m key)]\n    (and (nil? fv) (not (nil? fk)))))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":134,"code":"(fn [x y] (if (contains? y x)(= nil (get y x)) false))","user":"556f2009e4b09a3098a52519"},{"problem":134,"code":"(fn[x m] (let [k (find m x)] (if (= k nil) false (true? (= (val k) nil) ))))","user":"5815b957e4b0f478707a0641"},{"problem":134,"code":"(fn [v l] (and (contains? l v) (= (get l v) nil)))","user":"505caadfe4b0bcb5664c3d3e"},{"code":"#(nil? (get %2 % :not-found))","problem":134,"user":"5089ebfee4b03217b26a539f"},{"code":"(fn [k m] (nil? (m k :not-found)))","problem":134,"user":"512832dfe4b03a34742b4306"},{"code":"#(= nil (% %2 0))","problem":134,"user":"524f61bee4b0541d1855b80f"},{"problem":134,"code":"(fn [my-key my-map]\n  (if (contains? my-map my-key)\n    (nil? (my-key my-map))\n    false))","user":"5c3ce1fee4b0d62ef62d9fab"},{"code":"(fn [m h] (not (nil? (some (fn [[k v]] (and (= k m) (nil? v))) h))))","problem":134,"user":"4e662d58535d8ccf87e9fe75"},{"code":"#(nil? (% %2 7))","problem":134,"user":"4f4bd422e4b03ad3f0c10c7e"},{"code":"#(nil? (get %2 %1 '-))","problem":134,"user":"4fc67081e4b0ee37620e1813"},{"code":"#(and (= nil (%1 %2))\n      (contains? %2 %1))","problem":134,"user":"50fe2420e4b03cd852b4e84a"},{"code":"(fn [x y] (= (get y x :notfound) nil))","problem":134,"user":"50f3ce2ee4b041536e2eca3d"},{"code":"(fn [x coll] (nil? (get coll x true)))","problem":134,"user":"4e14108c535d04ed9115e7dd"},{"problem":134,"code":"(fn [n x] (if \n            (and \n             ( contains? x n ) \n             (= (get x n) nil) \n             )\n            true\n            false\n            )\n  )","user":"53d5d43ce4b0e771c302544d"},{"code":"(fn [k, m] \n  (and (contains? m k) \n       (nil? (k m))))","problem":134,"user":"51ce1320e4b0e42293a22551"},{"problem":134,"code":"(fn [k m] ( if (contains? m k) (nil? (k m)) false )   )","user":"55cc56bee4b0e31453f64a0f"},{"code":"(fn [key map] (nil? (get map key false)))","problem":134,"user":"4ebef65e535dfed6da9c6d9b"},{"code":"#(if (contains? %2 %1)\n  (if (= nil (get %2 %1))\n    true\n    false)\n  false)","problem":134,"user":"4ea1ecfa535d7eef308072bb"},{"code":"(fn [k, m] (and (contains? m k) (= nil (k m))))","problem":134,"user":"531d36ace4b08068f379edad"},{"problem":134,"code":"(fn [-key -map] (= (get -map -key \"\") nil))","user":"558a81fbe4b027778923761c"},{"problem":134,"code":"(fn [key map] \n  (if (contains? map key ) \n      (= (get map key) nil)\n      false ))","user":"51a0370ae4b0b292b01ee3ef"},{"problem":134,"code":"( fn [k m]\n  (if (contains? m k)\n  (= (m k) nil)\n   false )\n )","user":"60231327e4b0d5df2af2220b"},{"problem":134,"code":"(fn __ [k m] (and (nil? (k m)) (contains? m k)))","user":"5be2e670e4b0ed4b8aab4ccc"},{"code":"(fn [x y] (if (nil? (find y x))\n            false\n            (if (nil? (x y))\n              true\n              false)\n            )\n  )","problem":134,"user":"5296aa9be4b02ebb4ef75034"},{"code":"(fn [x y] (and (contains? y x) (= (y x) nil)))","problem":134,"user":"5051ea64e4b0a561d07d8f0d"},{"code":"(fn[k c] (and\n           (contains? c k)\n           (nil? (k c))))","problem":134,"user":"508d8ab2e4b0f17d83ea26be"},{"code":"(fn [k m]\n  (if (= nil (get m k 'notfound))\n    true\n    false))","problem":134,"user":"504ec4d3e4b069badc5a33c9"},{"problem":134,"code":"#( if (= nil (get %2 %1 \"default\" )) true false )","user":"5cf7c1b0e4b0b71b1d808a72"},{"problem":134,"code":"(fn [key coll]\n  (if (and (contains? coll key) (nil? (key coll)))\n    true\n    false))","user":"575595ede4b02ea1147992c7"},{"code":"#( if(contains? %2 %1) (nil? (%1 %2)) false)","problem":134,"user":"4e94addc535dbda64a6f6b21"},{"code":"(fn [k vs]\n  (if (and (contains? vs k) (= nil (k vs)))\n    true\n    false))","problem":134,"user":"4f592f83e4b0030a34fb2ad2"},{"code":"(fn [key map]\n  (and (contains? map key) (= (key map) nil)))","problem":134,"user":"4f03860e535dcb61093f6b10"},{"code":"(fn [k c]\n  (if (contains? c k) (if (= nil (get c k)) true false) false))","problem":134,"user":"504f9ae1e4b0a02f9cffde9c"},{"problem":134,"code":"(fn\n  [k m]\n  (if (contains? m k)\n  (nil? (get m k))\n    false\n    )\n  )","user":"55fa4fbbe4b03cbcff9738cf"},{"code":"(fn [k m] \n     (and (contains? m k) (nil? (k m)))\n  \n  \n  \n  )","problem":134,"user":"516eb196e4b06aac486e5b2e"},{"problem":134,"code":"(fn [a b] (if (contains? b a) (if (= nil (b a)) true false) false))","user":"551bd6e1e4b07993ea3788d6"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n  (= (m k) nil)\n  false))","user":"6059d9c8e4b07e92fa001ad0"},{"code":"(fn foo [key map] (if (and (nil? (key map)) (contains? map key)) true false))","problem":134,"user":"4fd15334e4b04c3a95aa040d"},{"problem":134,"code":"(fn [my-key my-map] (true? (and (contains? my-map my-key) (nil? (get my-map my-key)))))","user":"584ce55be4b0b7285a6f4e31"},{"code":"(fn [k m]\n  (if (contains? m k)\n\t(if (= nil (get m k))\n      true\n      false)\n      false))","problem":134,"user":"519ec569e4b0acf32bc6a434"},{"problem":134,"code":"(fn [x y] (true? (= (get y x false) nil)))","user":"5c52f3fce4b0fb8c5ffd99e9"},{"problem":134,"code":"#(nil? (%1 %2 %1))","user":"56252effe4b00a550fc90294"},{"problem":134,"code":"#(nil? (get %2 %1 \"badness\"))","user":"57f17cb5e4b0bfb2137f5c0b"},{"code":"(fn [f y] (and (nil? (f y)) (contains? y f)))","problem":134,"user":"4ee9d697535d93acb0a66895"},{"problem":134,"code":"(fn [key-name map-object] \n  (and (contains? map-object key-name) (nil? (get map-object key-name))))","user":"5b7e132fe4b047b03b203754"},{"problem":134,"code":"(fn [k m] (and (contains? m k)\n           (nil? (get m k))))","user":"57b5c29ee4b0fbc9809a27b1"},{"problem":134,"code":"(fn [k coll] \n   (if (contains? coll k)\n     (nil? (coll k))\n     false)\n)","user":"595e6c76e4b066ee0a44b043"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (if (nil? (k m)) \n      true\n      false)\n    false))","user":"4fbd0541e4b081705acca2fc"},{"code":"(fn [key hashMap] (if (= nil (key hashMap)) \n(if (contains? hashMap key) true false) false))","problem":134,"user":"4f9336ece4b0dcca54ed6cb7"},{"problem":134,"code":"(fn \n  [key hash]\n  (if (contains? hash key)\n    (if (nil? (hash key))\n      true\n      false)\n    false))","user":"55d79b87e4b0e31453f64aa8"},{"problem":134,"code":"(fn [k m] (= nil (k m \"nil\")))","user":"548953ace4b0e286459a11e2"},{"code":"(fn [k, m] (and (= (get m k) nil) (contains? m k)))","problem":134,"user":"52b20e1fe4b0c58976d9ace9"},{"code":"(fn [x y] \n   (if (contains? y x)\n   (nil? (x y))\n    false))","problem":134,"user":"4dd579b5535dae65d5c462ea"},{"problem":134,"code":"(fn [x y]\n  (if (= nil (get y x false)) true false))","user":"53f5c402e4b0db01ade6f9d4"},{"problem":134,"code":"(fn [k maps]\n    (if (and \n        (nil? (get maps k))\n        (contains? (set (keys maps)) k)) \n            true false))","user":"5fa358a1e4b0f0ebd91b77fd"},{"code":"(fn [ k m] (and (contains? m k) (= (m k) nil)))","problem":134,"user":"4f03154a535dcb61093f6a58"},{"problem":134,"code":"(fn [mykey mymap] (and (contains? mymap mykey) (nil? (mykey mymap))))","user":"585bcd51e4b0f14aab7c8771"},{"code":"(fn [k hmap] (if (contains? hmap k) (if (= (get hmap k) nil) true false) false))\n;; try to avoid if statements, can usually just combine with or/and.\n;; instead of using if (get hmap k) nil, can just use nil?.","problem":134,"user":"50fec710e4b0219f3bc8bd97"},{"problem":134,"code":"(fn ver [k m] (and (contains? m k) (= (k m) nil)))","user":"5c0ebca5e4b01240ff567147"},{"code":"(fn [k m]\n   (if-let [[_ v] (find m k)] \n     (nil? v)\n     false))","problem":134,"user":"532c0507e4b09d4e7a9b553c"},{"problem":134,"code":"(fn nilkey [k mapping] \n  (if (= :nil \n        ((into {} \n          (map (fn [[kk value]] \n                 (if (nil? value) \n                   [kk :nil] \n                   [kk value])\n               ) mapping\n          )\n         ) k\n        )\n      ) \n    true \n    false))\n\n\n; simpler solution:\n; #(not (%2 %1 :not_found))","user":"55e01f4ee4b050e68259b406"},{"problem":134,"code":"#(if (and (contains? %2 %1) (= (get %2 %1) nil )) true false)","user":"55c49394e4b0e31453f6499e"},{"code":"(fn [x y] (if (contains? y x) (= (y x) nil) false))","problem":134,"user":"53673d93e4b0243289761e7d"},{"code":"#(and (contains? %2 %) (not (get %2 %)))","problem":134,"user":"52bacfa8e4b07a9af57922d6"},{"code":"#(and (nil? (% %2)) (contains? %2 %))","problem":134,"user":"4e781a2e535d324fb2983d74"},{"code":"(fn [x ln] (and (contains? ln x) (nil? (x ln))))","problem":134,"user":"4fb4303fe4b081705acca2ac"},{"problem":134,"code":"(fn nilkey [k,m] (if-not (find m k) false (if (nil? ( k m)) true false)))","user":"573940e3e4b0cd1946bd106b"},{"problem":134,"code":"(fn __ [k m]  (and (nil? (k m)) (= (count m)(count (assoc m k \"foo\")))))","user":"5e078ba7e4b0978307768fb6"},{"problem":134,"code":"(fn [k m] (nil? (get m k 'bob')))","user":"548a3dc6e4b0e286459a11f2"},{"code":"(fn [key map] (and (contains? map key) (nil? (key map))))","problem":134,"user":"4ecb1641535d6d7199dd370e"},{"problem":134,"code":"(fn [a b] (nil? (b a 0)))","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"problem":134,"code":"(fn a [x coll]\n  (if (contains? coll x)\n  \t(if (= (x coll) nil)\n    \ttrue\n    \tfalse\n   \t)\n    false\n   )\n )","user":"58b48db1e4b0ebc645576d3e"},{"code":"#(and (contains? %2 %1) (nil? (val (find %2 %1))))","problem":134,"user":"4eea437b535d93acb0a6689a"},{"code":"(fn [x y] (and (contains? y x) (= nil (get y x))))","problem":134,"user":"4f7e07f4e4b06e829148e1c9"},{"code":"(fn [x, y] (nil? (get y x 1)))","problem":134,"user":"525636dfe4b0541d1855ba0d"},{"problem":134,"code":"#(= nil (if(contains? %2 %1) (%1 %2) false))","user":"56a1b854e4b0542e1f8d14b2"},{"code":"(fn [k m] (= nil (get m k :false)))","problem":134,"user":"5203bc27e4b0fb7e47ea5204"},{"code":"(fn [k s] (if (contains? s k) (= (get s k) nil) false))","problem":134,"user":"51bc2f6ae4b0fe3ecfb46452"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k )\n       (nil? (k m))))","user":"557e56aae4b05c286339e0d5"},{"problem":134,"code":"(fn [k m]\n   (and (nil? (k m))\n        (contains? m k)))","user":"5f4eb036e4b0102c75033969"},{"problem":134,"code":"(fn [k d] (= (k d false) nil) )","user":"5a8d55a8e4b05369db4d2514"},{"code":"(fn [key coll]\n  (if (contains? coll key) (nil? (key coll)) false))","problem":134,"user":"4f16d3fd535d64f60314644e"},{"problem":134,"code":"(fn [key, n]\n  (if (and (contains? n key) (= nil (get n key))) true false)\n  )","user":"5c5a725ce4b01df32ab73273"},{"problem":134,"code":"#(if (contains? %2 %1) (nil? (%1 %2)\n                 ) false)","user":"5434b344e4b0b6b47310fcf3"},{"problem":134,"code":"(fn [a b]\n  (and\n   \t(contains? b a)\n  \t(= (get b a) nil)))","user":"54c6ad6ae4b045293a27f62f"},{"code":"(fn [k m]\n   (= nil (get m k :notfound)))","problem":134,"user":"4eb02674535d7eef30807338"},{"code":"#(and\n  (not (nil? (find %2 %1)))\n  (nil? (%2 %1)))","problem":134,"user":"514a13cee4b0829bd132edb4"},{"problem":134,"code":"(fn myFunc \n     ([key set] \n      (if  (nil? (get set key))\n          (contains? set key)\n        false)))","user":"54cbd6bae4b057c6fda3a282"},{"code":"(fn [k hmap]\n  (if (contains? hmap k)\n    (if (nil? (hmap k))\n      true\n      false)\n    false))","problem":134,"user":"53098be4e4b02e82168697b7"},{"problem":134,"code":"(fn [k m]\n  (if (= (get m k false) nil)\n    true\n    false))","user":"5dc02058e4b0e59a23173d7c"},{"code":"#(nil? (%1 %2 0))","problem":134,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn hoge [x y]\n  (and\n    (nil? (y x))\n    (contains? y x)))","problem":134,"user":"507e5cf8e4b085af06e3afd1"},{"problem":134,"code":"(fn [a coll] (if (some #(and (= (key %) a) (= (val %) nil)) coll) true false))","user":"58b989dbe4b0888cdc949ccd"},{"problem":134,"code":"(fn [v seq] (nil? (get seq v false)))","user":"5630c8f9e4b0bfe05bf11785"},{"problem":134,"code":"(fn [ki mape] \n  (if (and (= (mape ki) nil) (contains? mape ki)) true false\n  ))","user":"56dd0179e4b0ea9b8538f826"},{"code":"#(= (get %2 %1 'z) nil)","problem":134,"user":"4f39493be4b0e243712b1ee9"},{"code":"(fn [k m]\n  (and (contains? m k)\n       (= (m k) nil)))","problem":134,"user":"4eecc9ad535d93acb0a668b4"},{"code":"(fn nilkey [k mp]\n    (and\n      (contains? mp k)\n      (= (k mp) nil)))","problem":134,"user":"50981062e4b04e098a4c7268"},{"problem":134,"code":"(fn [queryKey queryMap] (if (contains? queryMap queryKey) (if (nil? (get queryMap queryKey)) true false) false))","user":"556b67c9e4b09a3098a524ed"},{"code":"(fn nilk [k m]\n  (and (contains? m k)\n\t\t(nil? (get m k))))","problem":134,"user":"4ff4c9dae4b0678c553fc360"},{"problem":134,"code":"(fn [k coll] \n  (if (contains? coll k)(= nil (k coll))false))","user":"53ae0c50e4b047364c044471"},{"code":"#(if-let [entry (find %2 %1)]\n  (if (nil? (last entry)) true false)\n  false\n)","problem":134,"user":"50182f53e4b02f523d7cc5ec"},{"code":"(fn [x m] (and (contains? m x) (= nil (get m x))))","problem":134,"user":"4f461e57e4b0d56e7bb92b92"},{"code":"(fn nil-key? [k, hashmap]\n  (and (contains? hashmap k) (= (hashmap k) nil)))","problem":134,"user":"53713ebee4b0fc7073fd6ead"},{"problem":134,"code":"#(nil? (% %2 \"n/a\"))\n\n;#(if (contains? %2 %)\n;  (nil? (% %2))\n;  false)","user":"590b8607e4b047aa04b199db"},{"code":"(fn [k, m] (and (contains? m k) (= nil (get m k))))","problem":134,"user":"4dbac43b535d1e037afb21ac"},{"problem":134,"code":"(fn [tkey tmap] \n  (if \n    (contains? tmap tkey) \n      (nil? (tmap tkey))\n      false))","user":"4feacba7e4b0140c20fb9c0e"},{"code":"(fn [a b]\n  (if (contains? b a)\n    (nil? (a b))\n    false))","problem":134,"user":"520332f7e4b030ee0c5b2714"},{"code":"#(and (= nil (get %2 %1)) (contains? %2 %1))","problem":134,"user":"4f0cd1c9535d0136e6c22311"},{"problem":134,"code":"(fn [k m]\n  (and\n   (nil? (k m))\n   (contains? m k)\n   )\n  )","user":"5b3e35bde4b02d533a91bbfa"},{"problem":134,"code":"(fn [x, y] (and (nil? ( get y x)) (contains? y x)))","user":"5d531d33e4b0776584bd6f6d"},{"problem":134,"code":"#(nil?(%2 %1 true))","user":"5890799be4b00487982d51d6"},{"code":"#(= (get %2 %1 0) nil)","problem":134,"user":"4f039bbe535dcb61093f6b39"},{"problem":134,"code":"#(= (get %2 %1 :nop) nil)","user":"56946d43e4b0dcc4269f411e"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (= nil (m k))) )","user":"5e63a2e2e4b0fd0acd1586a4"},{"problem":134,"code":"(fn [key amap] (= nil (get amap key 0)))","user":"57b35ecbe4b0fbc9809a277e"},{"code":"#(and (contains? %2  %1) (nil? (%1 %2)))","problem":134,"user":"50a7b76de4b090657f4a5cdc"},{"problem":134,"code":"(fn [a b]\n  (let [r (get b a)\n        my-keys (into #{} (keys b))]\n    (if (contains? my-keys a)\n      (nil? r)\n      false)))","user":"5683b67ce4b0945ebc182a9f"},{"problem":134,"code":"(fn [k,m]\n  (and \n   (contains? m k)\n   (nil? (get m k))))","user":"532902f8e4b09d4e7a9b550e"},{"problem":134,"code":"(fn [x y] (= (nil? (x y)) (contains? y x)))","user":"54f6f00fe4b01ecee9d88814"},{"problem":134,"code":"#(and (contains? %2 %1 ) (nil? (%2 %1)))","user":"5037534de4b0af0658af77aa"},{"problem":134,"code":"(fn [v m]\n  (and\n   (contains? m v)\n   (= (v m) nil)))","user":"5779556de4b0979f8965166e"},{"problem":134,"code":"(fn [key map] \n  (and (contains? map key) (= (get map key) nil)))","user":"5a962c09e4b0d174b936c765"},{"problem":134,"code":"(fn [k m] (and (contains? m\n                          k) (= nil (k m))))","user":"55009d17e4b07d26eda61d5d"},{"problem":134,"code":"(fn get-nil [a-key a-map] (if (contains? a-map a-key) (nil? (get a-map a-key)) false))","user":"545188ebe4b0e397800069b2"},{"code":"(fn [key map] (if (= (get map key \"missing\") nil) true false))","problem":134,"user":"4f85a75ce4b033992c121c48"},{"problem":134,"code":"(fn [k m] (= nil (m k false)) )","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":134,"code":"(comp nil? #(%1 %2 1))","user":"5abd4886e4b073f177442710"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? (set (keys m)) k)\n           (= (k m) nil))\n    true\n    false))","user":"567ea403e4b0feffd0d18eb5"},{"problem":134,"code":"(fn allo [k v] (and (nil? (k v)) (contains? v k)))","user":"54091b82e4b0addc1aec66d5"},{"problem":134,"code":"(fn checkMap? [aKey aMap]\n  (if (nil? (get aMap aKey false))\n    true\n    false))","user":"599e3677e4b0871e7608b809"},{"code":"#(and (nil? (%2 %))\n      (contains? %2 %))","problem":134,"user":"4fb23582e4b081705acca28a"},{"problem":134,"code":"(fn [a b] (if (contains?  b a) (nil? (a b)) false))","user":"5eee9352e4b07c55ae4a0512"},{"code":"(fn [x m]\n  (if-let [kv (find m x)]\n    (= (second kv) nil)\n    false))","problem":134,"user":"5222000ce4b0e6a83c8925ea"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (= nil (k m)) \n    false))","user":"55d1ec3ee4b0e31453f64a4c"},{"code":"#(nil? (% %2 \"Omar coming\"))","problem":134,"user":"4f463dfde4b0d56e7bb92b99"},{"code":"(fn [key map] (nil? (map key false)))","problem":134,"user":"508bed64e4b0be79e5b189cf"},{"problem":134,"code":"(fn [k m]\n  (if(contains? m k) \n  \t(if(k m) false true) \n    false\n   )\n )","user":"54b61c88e4b05787c3b163b2"},{"problem":134,"code":"(fn [k m] \n  (let [v (get m k \"missing\")]\n    (if (nil? v) true false)))","user":"50b63309e4b0a86f8358ca68"},{"problem":134,"code":"#(if (= (if (contains? %2 %1) (%2 %1) 1) nil) true false)","user":"54aec21ae4b09f271ff37cf7"},{"problem":134,"code":"(fn[index ob] (and (nil? (ob index)) (contains? ob index)))","user":"56305383e4b073c1cf7a9be6"},{"code":"(fn [x  y] (if (not= (y x) nil) false (if (contains? y x) true false)))","problem":134,"user":"528a7e62e4b0239c8a67ae79"},{"code":"(fn [keyd store] (if (get store keyd true) false true))","problem":134,"user":"53012382e4b0d8b024fd3718"},{"code":"(fn [x y] \n  (and (contains? y x)\n       (nil? (x y))))","problem":134,"user":"4f4a17ffe4b0d56e7bb92c05"},{"problem":134,"code":"(fn [k m] (if (= nil (m k :not-found)) true false))","user":"5e3248d9e4b05b4b0151623a"},{"problem":134,"code":"#(= %2 (apply assoc %2 [%1 nil]))","user":"567e418fe4b0feffd0d18eb1"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (= nil (k m))\n    false))","problem":134,"user":"4e8e8c24535d65386fec2143"},{"problem":134,"code":"#(and (contains?  %2 %1) (nil? (%2 %1)))","user":"5501a1e1e4b07d26eda61d75"},{"problem":134,"code":"#( if (and (contains? %2 %1) (= (%2 %1) nil)) true false)","user":"556880dae4b0c656e3ff1856"},{"code":"(fn [k m] \r\n  (if (contains? m k)\r\n    (= (m k) nil)\r\n    false))","problem":134,"user":"509c7949e4b085ae113522b0"},{"code":"(fn [k h] ( and (if-not (nil? (-> k h)) false true) (contains? h k)))","problem":134,"user":"53347274e4b0656e627bfd6b"},{"problem":134,"code":"#(nil? (get %2 %1 \"poop\"))","user":"5ed9c2cde4b0c7845d86b0e4"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k ::missing)))","user":"56ba1406e4b0f2655033593c"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (if (nil? (k m))\n      true\n      false)\n    false))","user":"55b1d0b5e4b0da326a65cf73"},{"problem":134,"code":"(fn [k m]\n  (let [v (k m)]\n    (if (contains? m k)\n      (nil? v)\n      false)))","user":"56dc5f89e4b0ea9b8538f81e"},{"problem":134,"code":"(fn [key coll] \n  (and (contains? coll key) (nil? (get coll key))))","user":"574d2d31e4b02ea114799228"},{"code":"#(let [x (%1 %2)]\n    (and (= nil x) (contains? %2 %1)))","problem":134,"user":"50fe9d60e4b03cd852b4e84f"},{"code":"(fn [k m] (if (and (contains? m k) (nil? (k m))) true false))","problem":134,"user":"4fbe42b7e4b081705acca30f"},{"problem":134,"code":"(fn [key hash] (and (contains? hash key) (nil? (key hash))))","user":"568cb90fe4b0dcc4269f40b9"},{"code":"(fn [a b] \n  (if (contains? b a)\n\t (= (b a) nil)\n     false\n  )\n  )","problem":134,"user":"510cda21e4b078ea71921126"},{"code":"#(cond (= nil (find %2 %1)) false \n       :else (= nil (val (find %2 %1))))","problem":134,"user":"4ff78679e4b0678c553fc392"},{"code":"#(nil? (%2 % :ok))","problem":134,"user":"4f4a03cce4b0d56e7bb92c03"},{"problem":134,"code":"(fn [key map]\n  (and (nil? (key map))\n       (contains? map key)))","user":"5461c402e4b01be26fd746a6"},{"problem":134,"code":"(fn [key map]\n    (and\n      (contains? map key)\n      (= (key map) nil)))","user":"56503470e4b0284900eef6ba"},{"code":"#(and (contains? %2 %)\n      (nil? (% %2)))","problem":134,"user":"4fad33e8e4b081705acca236"},{"problem":134,"code":"#(and (contains? %2 %1)\n       (nil? (get %2 %1)))","user":"58df05ffe4b0a4d5acaab706"},{"problem":134,"code":"(fn [x dic] ( = (dic x true) nil))","user":"59554b72e4b066ee0a44af2a"},{"problem":134,"code":"(fn key-is-nil? [k m]\n  (not (k m '())))","user":"5decd4fde4b093ff7172757b"},{"problem":134,"code":"#(if (contains? %2 %1) \n   (if (get %2 %1)\n     false true) \n   false)","user":"5710c24be4b09c608db70439"},{"problem":134,"code":"(fn [k m]\n  (let [[k v :as r] (find m k)]\n    (if  (and r (nil? v))\n      true\n      false)))","user":"55afe57ae4b002ce9d5cbc1c"},{"problem":134,"code":"(fn [my-key my-hash] (if (contains? my-hash my-key)\n                       (nil? (my-key my-hash))\n                       false))","user":"58f1971ce4b08e1cf3471cee"},{"code":"(fn [x lista] (and (contains? lista x) (nil? (x lista))))","problem":134,"user":"521e1174e4b0dd19981ad06d"},{"code":"(fn [k m]\n  (if-not (k m) (contains? m k) false))","problem":134,"user":"4f9a737fe4b0dcca54ed6d0a"},{"problem":134,"code":"(fn [e m] (and (contains? m e) (nil? (e m))))","user":"5713c575e4b07c98581c3aab"},{"problem":134,"code":"(fn [x y](if (and (contains? y x) (= (y x) nil)) true false))","user":"5b1f84b3e4b03cfeda66ed1f"},{"problem":134,"code":"#(and\n (contains? %2 %1)\n (nil? (get %2 %1))\n)","user":"5da975b9e4b000c986472c32"},{"problem":134,"code":"#(not (get %2 % 0))","user":"53c74cfce4b00fb29b2212a7"},{"problem":134,"code":"#(not= nil(first (filter (fn [[k v]] (and (= k %1) (= v nil))  ) %2)))","user":"5ec82b11e4b08d0ec38692e6"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"undef\")))","user":"540a4f20e4b0addc1aec66ef"},{"problem":134,"code":"(fn [x mp]   (nil? (get mp x false)))","user":"50d3cac8e4b030b634c368ba"},{"code":"(fn [x map]\n  (and (contains? map x) (= nil (get map x))))","problem":134,"user":"4fea09b2e4b0547ebccb2485"},{"problem":134,"code":"(fn [candidate h] (and (contains? h candidate) (nil? (candidate h)) ))","user":"5471f090e4b094393f72dd6e"},{"code":"(fn [key col] (and (contains? col key) (nil? (key col))))","problem":134,"user":"4ffee0f6e4b0678c553fc3f7"},{"problem":134,"code":"#(and\n  (contains? %2 %1)\n  (= (%2 %1) nil)\n)","user":"53c181c0e4b00fb29b221263"},{"code":"#(and (contains? %2 %1)\n      (= (%2 %1) nil))","problem":134,"user":"53523ae0e4b084c2834f4aee"},{"code":"(fn [key map]\n  (and (contains? map key)\n       (nil? (get map key))))","problem":134,"user":"4e691c79535d8ccf87e9fe97"},{"problem":134,"code":"#(if (= -1 (.indexOf (keys %2) %1)) false (= nil (%1 %2)))","user":"57245755e4b0c5bde472c0f9"},{"problem":134,"code":"#(and (contains? %2 %1) (nil?(get %2 %1)))","user":"5a534241e4b05d388ecb6c0a"},{"problem":134,"code":";(fn [k m]\n ; (if (contains? m k)\n  ;  (nil? (get m k))\n   ; false))\n\n(fn [k m]\n  (and (contains? m k) (nil? (-> m (get k)))))","user":"59022c89e4b0438e51c2d052"},{"problem":134,"code":"(fn [key col] (nil? (and (contains? col key) (get col key))))","user":"59874ff6e4b021a7a535fea1"},{"problem":134,"code":"(fn [ x y ] (nil? (get y x :not-found)))","user":"53ed1cb8e4b0d648e757f4be"},{"problem":134,"code":"#(and (not (not (find %2 %1))) (= nil (%1 %2)))","user":"598c5a0ee4b02b9968b84d03"},{"code":"#(and (contains? %2 %1) (not (%2 %1)) )","problem":134,"user":"4eb9d430535dfed6da9c6d5f"},{"code":"(fn [a-key a-map] (cond (not-empty (filter #(= % a-key) (keys a-map))) (nil? (a-key a-map))\t:else false))","problem":134,"user":"50b19a91e4b03ea880433552"},{"problem":134,"code":"(fn [x y] (not (get y x true)))","user":"58cba946e4b03c36ff7e584f"},{"problem":134,"code":"(fn [x,y] (= (x y false) nil))","user":"553ea4e8e4b0a04f792994ee"},{"code":"(fn check-nil [k, m] (if (contains? m k) (if-not (m k) true false) false) )","problem":134,"user":"5255324be4b0541d1855b9d0"},{"code":"#(nil?(%2 % 0))","problem":134,"user":"4dc1ee85535d020aff1edf91"},{"problem":134,"code":"(fn [vKey vCollection]\n  (if (contains? vCollection vKey)\n    (if (= (vKey vCollection) nil)\n      true\n      false)\n    false))","user":"5cd8d4a1e4b05ee0cb3116f3"},{"code":"(fn [v m]\n  (if (contains? m v)\n    (= nil (m v))\n    false))","problem":134,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":134,"code":"(fn [k mp] \n  (if \n    (and (contains? mp k) (= nil (get mp k)))\n    true\n    false)\n  \t\n  )","user":"5f3ee0d9e4b004f08c61c55c"},{"problem":134,"code":"(fn [k map]\n  (and\n       (contains? map k)\n       (= (map k) nil)))","user":"5ccf99fbe4b0ccb0619628c8"},{"problem":134,"code":"(fn [x y]\n  (if (not (contains? y x)) false\n    (if (= nil (x y)) true false)))","user":"58f5b58ae4b0438e51c2cedc"},{"code":"(fn [k h] (let [pair (find h k)] (and (not (nil? pair)) (nil? (last pair)))))","problem":134,"user":"4f2ef48be4b0d6649770a06c"},{"code":"(fn[x m] (if (contains? m x) (nil? (x m)) false))","problem":134,"user":"507da5a7e4b03c76e5499e03"},{"code":"(fn [key x]\n  (and \n    (nil? (get x key))\n    (contains? x key)\n  )\n)","problem":134,"user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn [x m] (nil? (get m x \"missing\")))","problem":134,"user":"52179e00e4b0ea2f1c31c8d3"},{"code":"#(= (% %2 false) nil)\n\n;; #(nil? (% %2 :not-found))","problem":134,"user":"503f4759e4b00d1a725ff2a9"},{"code":"(fn [a-map-key the-map]\n  (if\n    (and \n      (find the-map a-map-key) \n      (= nil (get the-map a-map-key)))\n    true\n    false))","problem":134,"user":"4fe721e5e4b0e8f79898feda"},{"code":"(fn [x y] (if (and (nil? (y x)) (contains? y x)) true false))","problem":134,"user":"4f2ca22fe4b0d6649770a054"},{"problem":134,"code":"(fn [k, m] (nil? (get m k true)))","user":"598d746ae4b02b9968b84d23"},{"problem":134,"code":"#(if (= nil (%1 %2 true))true false)","user":"5b044436e4b0cc2b61a3bd71"},{"problem":134,"code":"#(not (%2 % %))","user":"52814e97e4b0757a1b171428"},{"code":"(fn [key map] (= nil (key map :none)))","problem":134,"user":"529862dfe4b02ebb4ef75055"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n  \t(= nil (k m))\n  false))","user":"56fc9a2de4b08d47c977819b"},{"code":"(fn [k m] \n  (and (contains? (set (keys m)) k)\n      (nil? (m k))))","problem":134,"user":"4eb44d78535d7eef30807360"},{"code":"(fn [k m] \n    (let [v (get m k \"not-found\")]\n      (if (= v \"not-found\")\n        false\n        (if (= v nil)\n          true\n          false))))","problem":134,"user":"4ea3c875535d7eef308072c9"},{"problem":134,"code":"(fn check-for-nil [key map] (cond (= (get map key true) nil) true :else false))","user":"5670c4c4e4b0a866af6896fa"},{"problem":134,"code":"#(if (contains? %2 %1) \n  (nil? (%2 %1))\n   false)","user":"542d2385e4b0dad94371f2b2"},{"problem":134,"code":"#(= nil (and (contains? %2 %1) (%1 %2)))","user":"5c083a1ae4b0bdcf453d16dd"},{"problem":134,"code":"(fn nil-value? [key map]\n  (nil? (key map 0)))","user":"58ed713de4b056aecfd47d84"},{"code":"(fn [k m] (if (= (get m k \"missing\") nil) true false))","problem":134,"user":"4ea84ff8535d7eef308072f7"},{"code":"#(= nil (get %2 %1 :quail))","problem":134,"user":"528b08efe4b0239c8a67ae8a"},{"problem":134,"code":"(fn existAndNil \n  [_key _map] \n  (if (and (contains? (set (keys _map)) _key) (= (_key _map) nil)) true false) )","user":"55edc088e4b0121d4835fde0"},{"problem":134,"code":"(fn [a b] (nil? (b a '())))","user":"55d0391de4b0e31453f64a37"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (= nil (m k)) ))","user":"57640b11e4b0994c1922fbe4"},{"problem":134,"code":"(fn [k m]\n  (let [x (get m k \"not found\")]\n    (nil? x)))","user":"59c76402e4b0a024fb6ae542"},{"code":"#(nil? (get %2 %1 \"missing\"))","problem":134,"user":"4ec5d62c535d6d7199dd36ba"},{"code":"#(if (= nil (get %2 % false)) true false)","problem":134,"user":"5073e7fde4b054001656accb"},{"problem":134,"code":"#(nil? (%2 %1 \"not here\"))","user":"56c4f43ce4b05cc29241ee9c"},{"problem":134,"code":"(fn hasnil [key input]\n (and (nil? (key input))\n      (contains? input key)))","user":"58ffbabce4b0438e51c2d002"},{"problem":134,"code":"(fn [x coll]\n  (not (get coll x true)))","user":"54df838de4b024c67c0cf7ae"},{"code":"(fn [x y] (and (contains? y x)\n            (= nil (x y))))","problem":134,"user":"530cb5b8e4b02e82168697e0"},{"code":"(fn [k m]\n  (let [e (find m k)]\n    (if e\n      (nil? (val e))\n      false)))","problem":134,"user":"4f2b0951e4b0d6649770a045"},{"problem":134,"code":"(fn [chave valor] (and (contains? valor chave) (nil? (get valor chave))))\n; verifica que o mapa contém a chave (note que é preciso passar 'valor' para a função 'contains?')\n; verifica que a chave tem valor nulo","user":"5d6b1d11e4b04d129b00f2a2"},{"code":"#(= nil (get %2  % true))","problem":134,"user":"4dbd7107535d020aff1edf42"},{"code":"(fn [k,m] (if (and (not= \"missing\" (get m k \"missing\")) (= nil (m k))) true false))","problem":134,"user":"516cbba6e4b06f078fab2525"},{"code":"(fn [k m] (nil? (m k :not-nil)))","problem":134,"user":"4ed0e139535d44c135fd68c7"},{"code":"#(nil? (%2 % %))","problem":134,"user":"4e72ac47535d5021c1a89666"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (nil? (k m)) ))","user":"546a6c7ce4b00cfc9eacc154"},{"code":"(fn prob134\n  [k map]\n   (if (contains? map k)\n     (nil? (k map))\n     (do (print \"asdf\") false)\n     ))","problem":134,"user":"4ebbff41535dfed6da9c6d78"},{"problem":134,"code":"#(and\n  (nil? (%1 %2)) \n  (contains? %2 %1)\n  )","user":"56f188e9e4b04a395b9a0494"},{"code":"(fn [v m]\n  (and (contains? m v) (= nil (get m v))))","problem":134,"user":"51a1c67ae4b00957e520db76"},{"code":"(fn mex[m k](let [return (get k m \"mss\") final (nil? return)]final))","problem":134,"user":"506ddadee4b092e4a7ec1650"},{"problem":134,"code":"#(nil? (and (not (nil? (find %2 %1))) (get %2 %1)))","user":"5f011638e4b0cf489e8d7f1d"},{"code":"(fn [k m] (and (contains? m k) (nil?(get m k)) ))","problem":134,"user":"52f5b580e4b09b582c12c9c9"},{"problem":134,"code":"(fn hasNilKey\n    [k hmap]\n    (if (= true (contains? hmap k))\n    (= nil (hmap k))\n    false))","user":"57974188e4b039eba2ecb0f4"},{"code":"(fn [x h] (let [v (x h)\n                c (contains? h x)] \n            (and c (nil? v))))","problem":134,"user":"52eb2ec9e4b0705949c44439"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k) ;;{check that k is in m}      \n       (nil? (k m));;{check that the value of k is nil}\n  ))","user":"56058d64e4b08b23635d3169"},{"code":"(fn [k m] (and (= (m k) nil) (contains? m k)))","problem":134,"user":"4ff76effe4b0678c553fc390"},{"problem":134,"code":"#(and (nil? (second (find %2 %1))) (not (nil? (first (find %2 %1)))) )","user":"5bcd9a86e4b0e9689409edfe"},{"problem":134,"code":"( fn [k m] (nil? (m k false)) )","user":"55e26c25e4b050e68259b435"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (if (= (get m k) nil)\n      true\n      false)\n    false))","problem":134,"user":"5171069be4b0d70c8bbbf238"},{"code":"(fn [key m] (= nil (get m key :not-nil)))","problem":134,"user":"4dcd2065535d5973398f929a"},{"problem":134,"code":"{:a true :b false :c false}","user":"55632016e4b0c656e3ff17e4"},{"problem":134,"code":"(comp nil? #(get %2 %1 :a))","user":"565e0934e4b068f2fe63dc30"},{"code":"(fn [key coll] (and (contains? coll key) (nil? (key coll))))","problem":134,"user":"4e6defcc535d5021c1a895f8"},{"problem":134,"code":"(fn [x, y] (if (and (contains? y x) (= (x y) nil)) true false))","user":"54ac2fe9e4b09f271ff37cd4"},{"problem":134,"code":"(fn [Schluessel Karte] (if (contains? Karte Schluessel) (= (get Karte Schluessel) nil) false))","user":"5b35de7be4b02d533a91bb97"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k :default)))","user":"57382719e4b0cd1946bd1055"},{"problem":134,"code":"(fn [k m]\n  (let [x (contains? (set (keys m)) k)\n        y (k m)]\n     (and (true? x) (nil? y))))","user":"56fde58ae4b08d47c97781aa"},{"code":"(fn [k m] \n  (and \n    (contains? m k)\n    (nil? (k m))))","problem":134,"user":"4dab218f30acd6ed15482a68"},{"code":"(fn [k h] (and (contains? h k) (= nil (h k))))","problem":134,"user":"52b80827e4b0c58976d9ad56"},{"problem":134,"code":"#(if (= nil (get %2 % \"not found\")) true false)","user":"56cefadee4b0ea9b8538f763"},{"problem":134,"code":"(fn [k col]\n  (let [value (get col k)]\n    (if (and (contains? col k)\n             (nil? value))\n      true\n      false)))","user":"5d28c6dce4b092dab7f59c85"},{"problem":134,"code":"(fn [k m]\n  (= nil (get m k 0)))","user":"5e394c33e4b01d43a70e8dd1"},{"code":"#(= (assoc %2 % nil) %2)","problem":134,"user":"4ee88bfb535d93acb0a66881"},{"problem":134,"code":"#(= nil (get %2 %1 \"NA\"))","user":"57d0cd58e4b0bd073c20235e"},{"code":"#(nil? (get %2 %1 :notthere))","problem":134,"user":"4ea41fc2535d7eef308072cb"},{"problem":134,"code":"(fn [key map]\n  (if (.contains (keys map) key)\n    (if (= nil (map key))\n      (true? true)\n      (true? false))\n    (false? true))\n\n  )","user":"558053b1e4b05c286339e0e9"},{"problem":134,"code":"(fn [k m] (and (nil? (get m k)) (contains? (into #{} (keys m)) k)))","user":"5a4de614e4b05d388ecb6bb1"},{"code":"(fn [key map]\r\n (and (contains? map key)(= nil (get map key))))","problem":134,"user":"4f9970b3e4b0dcca54ed6cfd"},{"problem":134,"code":"(fn [k m]\n                (let [val (get m k -1)]\n                  (nil? val)))","user":"54c3747de4b045293a27f60e"},{"code":"(fn [a b] (and (nil? (get b a)) (not (nil? (find b a)))))","problem":134,"user":"4e61bb60535d8ccf87e9fe5c"},{"problem":134,"code":"(fn nil-key? [k m]\n  (nil? (m k false)))","user":"556bbaaee4b09a3098a524f0"},{"code":"(fn[x y](= (contains? y x) (= (x y) nil)))","problem":134,"user":"4eeff8ba535d305ff5cb7f23"},{"problem":134,"code":"(fn [key map] \n  (if (contains? map key)\n    (= (key map) nil)\n    false))","user":"5c1156a2e4b01240ff567176"},{"problem":134,"code":"(fn [a, m] (and (contains? m a) (not (a m))))","user":"59a0262ee4b0871e7608b82d"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)\n  (nil?(get y x))\n  false))","user":"568967cde4b0dcc4269f407c"},{"code":"(fn iff [akey inmap]\n  (and (contains? inmap akey) (nil? (get inmap akey))))","problem":134,"user":"52812b9fe4b0757a1b171423"},{"code":"#(= nil (get %2 %1 \"missing\"))","problem":134,"user":"50a4f36be4b0344e360f3bc9"},{"code":"#( and (contains? %2 %1) (= (%2 %1) nil))","problem":134,"user":"505fc8e3e4b08f2a82ad10b6"},{"problem":134,"code":"(fn [a b] (if (contains? b a) (case (b a)\n            nil true\n            false) false))","user":"519e70d5e4b0acf32bc6a42c"},{"problem":134,"code":"(fn [k m] (= nil (get m k :bad)))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":134,"code":"(fn [my-key my-map]  \n  (and (nil? (get my-map my-key))\n       (contains? (set (keys my-map)) my-key)\n       \n  )\n)","user":"5545f713e4b0a04f7929953a"},{"code":"(fn [k m] (and (nil? (m k))\r\n               (contains? m k)))","problem":134,"user":"502f4c89e4b0842eb223d8b9"},{"code":"(fn [k v] (and (contains? v k) (nil? (k v))))","problem":134,"user":"51dd6a7ce4b0c33a4e1da409"},{"problem":134,"code":"(fn [k xs] \n  (and \n  \t(contains? xs k)\n    (nil? (k xs))\n  )\n)","user":"5aac468ae4b073f17744256b"},{"problem":134,"code":"#(and (contains? (set (keys %2)) %1) (nil? (get %2 %1)))","user":"54d2829ce4b0e8a36923e5f6"},{"code":"(fn [a b]\n  (cond\n   (nil? (find b a)) false\n   :else (nil? (val (find {:a nil :b 2} a)))\n   )\n  )","problem":134,"user":"5002c798e4b0678c553fc42d"},{"problem":134,"code":"(fn [x ary] \n  (if \n    (contains? ary x) \n    (nil? \n     (get ary x)) \n    false))","user":"5a011305e4b01bb0ae8afd40"},{"code":"(fn [k m]\n    (and (contains? m k) (= (k m) nil)))","problem":134,"user":"524d90c0e4b0a16e35cf6ded"},{"problem":134,"code":"(fn [a b] (nil? (get b a \"not-found\")))","user":"5eff339ae4b0cf489e8d7f0c"},{"problem":134,"code":"(fn[x y] (and (contains? y x) (nil? (get y x))))","user":"5522234ee4b0882d96d0919d"},{"code":"(fn [k m]\n  (and (nil? (k m)) \n          (contains? m k)))","problem":134,"user":"4ee7b354535d93acb0a6686b"},{"problem":134,"code":"(fn [k l] \n  (and (contains? l k)\n       (= nil (k l))))","user":"59258aa7e4b072a2710fce74"},{"problem":134,"code":"#(nil? (get %2 %1 \"miss\"))","user":"57995ac1e4b05b1deef9adbf"},{"code":"(fn [mikey mimap] (and (contains? mimap mikey) (= nil (val (find mimap mikey)))) )","problem":134,"user":"4ead76b7535d7eef30807320"},{"problem":134,"code":"(fn[key map] (and (contains? map key)(= nil (get map key))))","user":"574da407e4b02ea114799232"},{"problem":134,"code":"(fn[v m]\n  (and (contains? m v) (nil? (v m)))\n)","user":"54b90836e4b0ed20f4ff6e9d"},{"code":"(fn [ky mp]\n  (= nil (get mp ky \"none\")))","problem":134,"user":"5032e6c8e4b0e4096af89718"},{"problem":134,"code":"(fn [k, m]\n  (and (nil? (k m)) (contains? m k)))","user":"5590e55de4b0277789237676"},{"problem":134,"code":"#(and (= nil (%1 %2)) (contains?  %2 %1))","user":"59deedace4b01968742fed84"},{"code":"#(nil? (get %2 % :nf))","problem":134,"user":"5268f5b4e4b03e8d9a4a71cf"},{"code":"(fn [k m] (and (map? m) (contains? m k) (nil? (m k))))","problem":134,"user":"4dcc5aff535d5973398f9293"},{"problem":134,"code":"#(and\n  (not\n   (boolean (get %2 %1)\n            )) \n  (boolean (contains? %2 %1)))","user":"5c960295e4b048ec896c5a54"},{"problem":134,"code":"(fn check [x y] (if (contains? y x) (= (x y) nil) false))","user":"55357ab5e4b09218d5f44faf"},{"code":"#(nil? (%2 %1 :not-def))","problem":134,"user":"4fc4e9b5e4b081705acca352"},{"code":"(fn [k m] (and \n  (contains? m k)\n  (nil? (k m))))","problem":134,"user":"4eb59464535d7eef30807369"},{"problem":134,"code":"(fn [elem, map] (and (contains? map elem) (nil? (elem map))))","user":"58e6e624e4b056aecfd47cc1"},{"code":"(fn [k m] (nil? (get m k \"\")))","problem":134,"user":"4daf4d2fedd6309eace4d178"},{"problem":134,"code":"(fn key?\n  [k coll]\n  (nil? (get coll k \"missing\")))","user":"5401aefbe4b0df28a13c62c7"},{"code":"(fn [k m] (if (contains? m k) (= (m k) nil) false))","problem":134,"user":"4ed72e51535d10e5ff6f52ee"},{"problem":134,"code":"(fn [col somemap] (if (and (contains? somemap col) (nil? (col somemap))) true false))","user":"57b758f4e4b0fbc9809a27cf"},{"problem":134,"code":"#(let [{key %1 :or {key 2}} %2] (empty? (str key)))","user":"60e955ade4b0584f1d4a8dc1"},{"code":"(fn [k m] (nil? (k m :not-found)))","problem":134,"user":"4ff4bed0e4b0678c553fc35f"},{"problem":134,"code":";(fn [key map] \n; (and (contains? map key) (= (get map key) nil)))\n(fn [k m]\n  (and (contains? m k) (nil? (k m))))","user":"597af3f7e4b02382a38ad1f0"},{"problem":134,"code":"(fn [key coll]\n  (and \n   (contains? coll key)\n   (nil? (key coll))))","user":"55bccbc6e4b01b9910ae29f5"},{"code":"(fn [key map] (and (nil? (map key)) (contains? map key)))","problem":134,"user":"4dddff47535d08e6dec9fdd4"},{"code":"(fn [k m] (= nil (get m k -123)))","problem":134,"user":"50a9504de4b07e35d68b27ae"},{"code":";; This is based on solutions of other 4clojure users (changed to the fn form from the # form and adapted to handle all required cases)\n(fn [k hmap] (nil? (hmap k 0)))\n\n;; my old solution: \n;;fn [k hmap] (and (contains? hmap k) (nil? (get hmap k)))) \n;; (k hmap) works in this case since keys in the tests are keywords, \n;; but (get hmap k) works no matter what the key is","problem":134,"user":"50fac9e3e4b07934dda8b0d1"},{"code":"(fn [k map-to-test] (nil? (get map-to-test k :notfound)))","problem":134,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn [key map] (if (nil? (find map key)) false (nil? (get-in map [key]))))","problem":134,"user":"52565fcfe4b0541d1855ba19"},{"problem":134,"code":"#(= nil (%1 %2 10))","user":"5a21d34ce4b0ff51aa4b32b9"},{"problem":134,"code":"(fn my-map_value-is-nil? [k m]\n  (if (contains? m k)\n    (if (nil? (k m))\n      true\n      false)\n    false))","user":"54a31fdae4b09f271ff37c64"},{"code":"#(not (get %2 %1 0))","problem":134,"user":"4e6a5158535d8ccf87e9fec5"},{"code":"(fn [x m]\n  (and (contains? m x) (nil? (get m x))))","problem":134,"user":"4eee5c7f535d93acb0a668c6"},{"problem":134,"code":"#(if (and (some #{%1} (keys %2))\n          (not (%1 %2)))\n   true\n   false)","user":"54b2ec84e4b09f271ff37d33"},{"problem":134,"code":"#(nil? (get %2 %1 42))","user":"583e27e2e4b089d5ab817daa"},{"problem":134,"code":"(fn [x y] \n (and \n   (contains? y x) \n   (nil? (x y))\n  )\n)","user":"5b0c21fbe4b0cc2b61a3bde3"},{"code":"#(not (get %2 % 5))","problem":134,"user":"52b48f04e4b0c58976d9ad29"},{"code":"(fn [x, y] (if (contains? y x) (nil? (x y)) false))","problem":134,"user":"4fe183a0e4b0dd6cd5ce3635"},{"problem":134,"code":"(fn [k, m]\n  (if (contains? m k)\n    (= (m k) nil)\n    false\n  )\n  \n)","user":"56ea8b75e4b04a395b9a0409"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)\n    (nil? (x y))\n    (contains? y x)))","user":"5dd70ee3e4b0948ae9d9ad85"},{"code":"(fn [key, col] (if (and (contains? col key) (= nil (key col))) true false))","problem":134,"user":"4f26b520e4b0d6649770a004"},{"code":"(fn [k m] (if (nil? (get m k \"pancreas\"))  true false))","problem":134,"user":"50f6a4e4e4b0035e89151845"},{"problem":134,"code":"#(and (= nil (%2 %1)) (not (= nil (find %2 %1))))","user":"552a672de4b0ffed3738f954"},{"code":"(fn empty-key [x y]\n  (if (and (contains? y x) (nil? (x y)))\n      true\n      false))","problem":134,"user":"50588af1e4b06522596eba7d"},{"code":"(fn [key map] (and (contains? map key) (= (get map key) nil)))","problem":134,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":134,"code":"(fn isTrue [x y] ( = (contains? y x) ( = nil (get y x)) ) )","user":"57110290e4b09c608db7043e"},{"problem":134,"code":"(fn [x, y] (and (contains? y x) (nil? (get y x))))","user":"545bbaa4e4b01be26fd74656"},{"problem":134,"code":"(fn [k m] not (nil? (get m k 1)))","user":"54ff2968e4b07d26eda61d4a"},{"problem":134,"code":"(fn [key map]\n  (if (= nil (get map key :nff)) true false))","user":"5aa15ec0e4b0d174b936c848"},{"code":"#(if (and (nil? (%2 %1)) ((set (keys %2)) %1)) true false)","problem":134,"user":"5245fbbbe4b09dbe66b56183"},{"problem":134,"code":"(fn [k m] \n  (and (contains? m k)\n       (= nil (get m k))))","user":"55f344afe4b06e875b46ce5a"},{"code":"#(if (and (contains? %2 %1)\n          (= (%1 %2) nil)) true false)","problem":134,"user":"4e8b6f4d535d65386fec211e"},{"code":"(fn [k coll]\n  (and (contains? coll k) (nil? (k coll))))","problem":134,"user":"504eed01e4b0e7ad84dbc4a5"},{"problem":134,"code":"(fn foo [k m] (if (contains? m k) (nil?(k m)) false))","user":"5f19ecbae4b091ba50b4dbdf"},{"problem":134,"code":"#(nil? (if (contains? %2 %1) (%1 %2) :foo))","user":"5360e9ade4b0243289761e3b"},{"problem":134,"code":"(fn [key map]\n   (= (map key false) nil))","user":"5eeb03dde4b029a2061bbeca"},{"code":"(fn [x, y] (= (get y x 0) nil))","problem":134,"user":"52fa57ece4b047fd55836ff8"},{"code":"(fn[ind, m] (and (contains? m ind) (not (ind m))))","problem":134,"user":"520aaac2e4b01da9d47a99e6"},{"code":"(fn foo [x y]\n  (and (contains? y x) (nil? (y x))))","problem":134,"user":"4f8b20fce4b02e764a0a5178"},{"problem":134,"code":"(fn [x,y] (if (or (not (contains? y x)) (get y x)) false true))","user":"560acfc7e4b05f002753df0a"},{"code":"#(nil? (%1 %2 -))","problem":134,"user":"4dbbdf86535d3f4042261ece"},{"code":"(fn [key values](nil? (get values key false)))","problem":134,"user":"50dcb2f4e4b02e6ac9592c91"},{"code":"(fn cc [key coll]\n(and (contains? coll key) (not (get coll key))))","problem":134,"user":"4f418eaee4b0d7d3c9f3fce9"},{"code":"(fn [n m] (let [res (find m n)] (if (nil? res) false (nil? (second res)))))","problem":134,"user":"51cfc616e4b0e42293a22578"},{"problem":134,"code":"(fn map-nil? [k, m]\n  (if (contains? m k)\n  \t(if (= (k m) nil) true\n      false)\n  false))","user":"5c5a313ae4b01df32ab7326e"},{"code":"(fn[k coll] (and (contains? coll k) (nil? (k coll))))","problem":134,"user":"527c4071e4b0757a1b17135a"},{"code":"(fn [a b]\r\n  (and (= nil (get b a)) (contains? b a)))","problem":134,"user":"4f831dd2e4b033992c121c16"},{"problem":134,"code":"(fn [a b] (nil? (b a :default)))","user":"5c0e3f86e4b01240ff56713d"},{"problem":134,"code":"(fn [key1 map1] (and (contains? map1 key1) (nil? (map1 key1))))","user":"5be70bd5e4b0f319e2d7ec53"},{"code":"(fn[k m]\n  (and (contains? m k) (nil? (k m))))","problem":134,"user":"4e889643535d8b9bb0147ca5"},{"code":"(fn[x y] (and (contains? y x)\n             (nil? (x y))))","problem":134,"user":"506c0a02e4b0eda3100c090d"},{"problem":134,"code":"(fn [k coll] (and (contains? coll k)(nil? (k coll))))","user":"572ea970e4b0cd1946bd0f89"},{"problem":134,"code":"#(not (%2 % true))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":134,"code":"(fn [k m] \n  (let [entry (find m k)]\n    (if (= entry nil)\n      \tfalse\n      \t(= (val entry) nil)\n      )\n  ))","user":"5996b419e4b07157cc8daab5"},{"code":"(fn [k m]\n  (if (and (contains? m k)\n          (= (k m) nil))\n    true\n    false))","problem":134,"user":"4e7fe7c6535db62dc21a62ac"},{"code":"#(nil? (%2 %1 ::not-found))","problem":134,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":134,"code":"(fn [k m] (if (contains? m k) (if (= nil (m k)) true false) false))","user":"56ef077ae4b04a395b9a0459"},{"problem":134,"code":"(fn [a b] (and (contains? b a ) (nil? (get b a) )))","user":"55bc5280e4b01b9910ae29f1"},{"problem":134,"code":"(fn [key coll] (if (contains? coll key)\n                   (= (key coll) nil)\n                   false ))","user":"5e70c16de4b085ba37836dae"},{"code":"(fn [key mapp]\n  (and (contains? mapp key) (nil? (key mapp))))","problem":134,"user":"53733312e4b06d7f452d9e0a"},{"code":"(fn [tgt lst]\n (nil? (get lst tgt false)))","problem":134,"user":"4dd0e8f7535da60f04a96e57"},{"code":"#(= nil (get %2 %1 :not-found))","problem":134,"user":"511623cbe4b0d4f670fd2fe1"},{"problem":134,"code":"#(nil? (get %2 % :n))","user":"558b41fce4b0277789237628"},{"problem":134,"code":"(fn [mykey mymap] (if (if (contains? mymap mykey) true false) (if (nil? (mymap mykey)) true false) false))","user":"58bfa998e4b021aa9917ecd9"},{"problem":134,"code":"(fn [k m] (and (nil? (m k)) (contains? m k) ))","user":"5717d674e4b07c98581c3b1a"},{"problem":134,"code":"(fn [k coll] (nil? (get coll k :notexist)))","user":"54d55abfe4b0a52adc2e200f"},{"problem":134,"code":"(fn [k v] (if (contains? v k) (= (v k) nil) false))","user":"5cf6c211e4b0b71b1d808a62"},{"problem":134,"code":"(fn nil-key [k m]\n              (= nil (get m k :not-found)))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":134,"code":"(fn nil-key? [k m]\n  (if (contains? m k)\n  (nil? (m k))\n  false))","user":"609aa543e4b00e9e6653c40c"},{"code":"#(if (and (contains? %2 %1) (= (%1 %2) nil)) true false)","problem":134,"user":"4f032f30535dcb61093f6a73"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k) (= (m k) nil)\n    false))","user":"575d16f8e4b02ea114799377"},{"code":"#(if (nil? (get %2 %1 0))\n   true\n   false)","problem":134,"user":"51b965dde4b0e871ca495905"},{"problem":134,"code":"(fn [k m]\n  (not (k m 1)))","user":"565f8fd2e4b068f2fe63dc41"},{"problem":134,"code":"(fn [k m] (and \n           (nil? (k m))\n           (contains? m k) ))","user":"555c6344e4b0b056612e224c"},{"problem":134,"code":"#(= nil (get %2 %1 :not_found))","user":"57de9169e4b0bd073c202454"},{"code":"#(let [x (find %2 %1)] (if x (nil? (val x)) false))","problem":134,"user":"51392535e4b0a5db03d727e1"},{"problem":134,"code":"(fn [kv mv]\n  (nil? (kv mv :not-found)))","user":"5b7292b3e4b047b03b2036a4"},{"code":"(fn [k m] (= (get m k false) nil))","problem":134,"user":"4ffb43b9e4b0678c553fc3ca"},{"code":"(fn [k m]\n  (let [v (find m k)]\n    (if (nil? v)\n      false\n      (= nil (second v)))))","problem":134,"user":"4ddbfb8a535d02782fcbea00"},{"code":"(fn [key hash] (if (contains? hash key) (nil? (hash key)) false))","problem":134,"user":"4fb1d7ace4b081705acca281"},{"code":"(fn [key coll] (and  (nil? (key coll))  (contains? coll key) ))","problem":134,"user":"52cb94e5e4b07d0d72b2734e"},{"problem":134,"code":"(fn [k m] \n  (and (contains? m k)\n       (nil? (get-in m [k]))))","user":"523578efe4b0a643f2dcb74c"},{"code":"(fn [x xs]\n  (and (contains? xs x) (nil? (get xs x))))","problem":134,"user":"526f2e16e4b03e8d9a4a7353"},{"problem":134,"code":"(fn [key map] (and (.containsKey map key) (= nil (key map))))","user":"55b37eaae4b01b9910ae2972"},{"code":"(fn [k map] (nil? (get map k 1)))","problem":134,"user":"4f3ca5a6e4b0e243712b1f53"},{"problem":134,"code":"(fn [k m]\n  (let [v (get m k :not-found)]\n    (= v nil)))","user":"545f737ce4b01be26fd74688"},{"problem":134,"code":"(fn [elem currMap]\n  (if (contains? currMap elem)\n    (if (= nil (get currMap elem))\n      true\n      false\n    )\n    false\n  )\n)","user":"5bf2cf8be4b0a6d31fed217c"},{"problem":134,"code":"( fn contains_nil [mykey mymap] (and (contains? mymap mykey) (= (mymap mykey) nil) ) )","user":"55532e28e4b0deb715856dfe"},{"code":"(fn [k m]\n  (and\n   (contains? m k)\n   (nil? (m k))))","problem":134,"user":"504f3a85e4b0a02f9cffde5c"},{"problem":134,"code":"(fn [k m]\n  (nil? (m k false)))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":134,"code":"(fn [y m] (and (contains? m y) (nil? (get m y))))","user":"5d6a9b96e4b04d129b00f29d"},{"code":"(fn [k coll]\n  (and (contains? coll k)\n        (nil? (k coll))))","problem":134,"user":"4ed94cd6535d10e5ff6f5302"},{"code":"(fn [x s] (if (contains? s x) (= (x s) nil) false))","problem":134,"user":"511dada0e4b0a5c68a34840c"},{"problem":134,"code":"(fn [k m] (and (not= :default (m k :default)) (nil? (m k))))","user":"60606490e4b03746e80ebf67"},{"problem":134,"code":"#(and\n  (contains? %2 %1)\n  (nil? \n    (get %2 %1)\n  )\n)","user":"558ec312e4b0277789237656"},{"code":"(fn [x s]\n  (and (contains? s x) (not (s x))))","problem":134,"user":"515f8a0de4b0e2be8aa20bce"},{"code":"(fn [elem mapmap] \n  (and \n    (.contains (keys mapmap) elem)\n    (nil? (mapmap elem))\n  )\n)","problem":134,"user":"4f2a6169e4b0d6649770a03d"},{"problem":134,"code":"(fn\n[k,m] \n(if (contains? m k)\n\t(= (get m k) nil)\n  \tfalse\n)\n)","user":"54d12740e4b0e8a36923e5dd"},{"code":"#(if (and (= nil (get %2 %1)) (contains? %2 %1)) true false)","problem":134,"user":"52fe869be4b047fd5583703f"},{"code":"(fn [x y] (nil? (get y x false)) )","problem":134,"user":"504f65bae4b0a02f9cffde7e"},{"code":"(fn [x coll] (nil? (x coll true)))","problem":134,"user":"52a8ca0fe4b0c58976d9ac36"},{"code":"(fn f[x y]\n  (if (contains? y x)\n  (= nil (get y x ))\nfalse\n\n)\n  \n  )","problem":134,"user":"50255bafe4b0b0b8afb15aa8"},{"code":"(fn [k m] (if (contains? m k)\n              (nil? (get m k))\n              false))","problem":134,"user":"505193b7e4b0a561d07d8f08"},{"problem":134,"code":"(fn\n  [key-name mapp]\n  (and (contains? mapp key-name) (nil? (key-name mapp))))","user":"5a948d79e4b0d174b936c73a"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains?  m k)\n           (nil? (k m))) true\n      false))","user":"55f8180fe4b06e875b46ceba"},{"problem":134,"code":"(fn[k m]\n\n(and (contains? m k) (nil? (get m k))))","user":"539f9f79e4b0ca733b97449e"},{"problem":134,"code":"(fn [k m] (if (nil? (get m k)) (contains? m k) false))","user":"5673c886e4b05957ce8c6123"},{"problem":134,"code":"#( and (= nil (%2 %1) ) ( contains? %2 %1 ))","user":"513e39f9e4b02b2a3d8235bd"},{"problem":134,"code":"#(= nil\n  (get %2 %1 1)\n  )","user":"4e28ddd1535deb9a81d77efd"},{"problem":134,"code":"#(= (%2 %1 true) nil)","user":"54eea988e4b024c67c0cf875"},{"problem":134,"code":";#(if (contains? %2 %1) (= (%2 %1) nil) false)\n#(nil? (get %2 %1 \" \"))","user":"57ee41a6e4b0bfb2137f5baf"},{"code":"(fn [k m] (and (= nil (m k)) (contains? m k)))","problem":134,"user":"506b40ade4b0eda3100c0905"},{"code":"(fn [k m] (if (and (contains? m k) (nil? (m k))) true false))","problem":134,"user":"5073de20e4b054001656acca"},{"problem":134,"code":"#(nil? (get %2 %1 \"m\"))","user":"5799c6dee4b05b1deef9adca"},{"problem":134,"code":"(fn [k m] (if (contains? m k) \n            (nil? (m k))\n            false))","user":"5d3b0764e4b01671435dbd61"},{"code":"#(not (empty? (filter nil? (vals (select-keys %2 [%1])))))","problem":134,"user":"511e3454e4b028ee16def195"},{"code":"( fn [x y] \n  (if (find y x) \n    (nil? (x y)) \n     false )\n)","problem":134,"user":"4f10234c535d64f603146413"},{"problem":134,"code":"(fn [x y] (nil? ( get-in y [x] \"nf\")))","user":"578682bbe4b0ebec4cfb74f9"},{"code":"(fn [a b] (nil? (get b a a)))","problem":134,"user":"4fc863a9e4b0ee37620e1831"},{"problem":134,"code":"(fn [k xs] (if (contains? xs k) (nil? (k xs)) false))","user":"59445ff2e4b0b03edd0057a8"},{"problem":134,"code":"(fn [k m] \n (and (contains? m k) (nil? (k m)))\n)","user":"5e316490e4b05b4b01516225"},{"problem":134,"code":"(fn [k a-map] \n  (cond\n   (contains? a-map k) (if (= (a-map k) nil) true false)\n   :else false\n  ))","user":"6023dda3e4b0d5df2af22215"},{"problem":134,"code":";;(and (contains? %2 %1) (nil? (get %2 %1))))\n\n;;#(nil? (get-in %2 [%1] false))\n\n#(nil? (%1 %2 false))","user":"55c497d4e4b0e31453f649a0"},{"code":"(fn [key coll]\n  (and\n    (contains? coll key)\n    (nil? (get coll key))))","problem":134,"user":"4dadb891c9a9d6ed3699dc57"},{"problem":134,"code":"(fn [a b]\n  (if (contains? b a)\n    (nil? (b a))\n    false))","user":"5ff82adae4b06df49cee14a4"},{"code":"(fn [key map] (and (contains? map key) (= (map key) nil)))","problem":134,"user":"4f13047d535d64f60314642c"},{"code":"#(if (and (= (get %2 %1) nil) (= (contains? %2 %1) true)) true false)","problem":134,"user":"52e73b36e4b09f7907dd1483"},{"code":"(fn [k h]\n  (and (contains? (set (keys h)) k)\n       (nil? (h k))))","problem":134,"user":"4dade9e9c9a9d6ed4799dc57"},{"code":"(fn [key map]\n  (= nil (get map key :not-found))\n)","problem":134,"user":"4f9f9ff5e4b0dcca54ed6d3a"},{"problem":134,"code":"(fn [key, m] (and (contains? m key) (nil? (get m key))))","user":"53e150e5e4b0d874e779ae53"},{"code":"(fn [el v] (= (= (v el) nil) (contains? v el)))","problem":134,"user":"50e896a5e4b0ebbe794eb7eb"},{"problem":134,"code":"(fn [my-key, my-map]\n  (if (and (contains? my-map my-key) (nil? (my-key my-map))) true false))","user":"53b85932e4b047364c0444db"},{"code":"(fn isnil [k m] (and (contains? m k) (nil? (m k))))","problem":134,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":134,"code":"#( and (contains? %2 %1)\n       (nil? (%1 %2))\n  )","user":"5805e70de4b0a837a8b30cd0"},{"problem":134,"code":"(fn [k s]\n  (and\n  \t(contains? s k)\n   \t(nil? (k s))))","user":"564452d1e4b0018b46ad8c0d"},{"code":"(fn [k m]\n    (and (contains? m k) (= (get m k) nil))  \n  )","problem":134,"user":"50f4894be4b004d364930528"},{"code":"(fn [x y] (if (nil? (find y x)) false (if (nil? (y x)) true false)))","problem":134,"user":"519273c3e4b08962174cf744"},{"code":"#(nil? (get %2 % %))","problem":134,"user":"4e9a8c0e535dbda64a6f6b72"},{"problem":134,"code":"(fn [a b] (and (contains? b a)(nil? (b a))))","user":"5f06d26ae4b0cf489e8d7f53"},{"code":"(fn [k m]\n  (and \n   (contains? m k)\n   (nil? (k m))\n   )\n  )","problem":134,"user":"52fba50ce4b047fd5583700d"},{"problem":134,"code":"(fn [x arr]\n  (if (contains? arr x)\n    (= (arr x) nil)\n    false\n    )\n  )","user":"5d28222ee4b092dab7f59c7a"},{"problem":134,"code":"(fn\n  [key map]\n  (if (and (contains? map key) (= nil (get map key)))\n    true\n    false))","user":"5789ebf8e4b0ebec4cfb7534"},{"code":"#(and (not(nil? ((set(keys %2)) %1))) (nil? (%2 %1)))","problem":134,"user":"51f59607e4b0abb92f97f9d5"},{"problem":134,"code":"(fn f [x m]\n  (and (contains? m x) (nil? (get m x)))\n  )","user":"5fee18f2e4b05ac5b16ea1d2"},{"problem":134,"code":"(fn [k m] \n  (and\n    (contains? m k)\n    (nil? (k m))\n   ))","user":"574e7be7e4b02ea114799242"},{"code":"(fn [key, map]\n  (and (contains? map key) (nil? (map key))))","problem":134,"user":"4ed152d5535d44c135fd68cc"},{"code":"(fn [x y]\n  (if (some #{x} (keys y))\n    (nil? (x y))\n    false))","problem":134,"user":"51f82769e4b09be9c177e527"},{"problem":134,"code":"(fn [k m]\n  (= (get m k :not-found) nil))","user":"531c6e72e4b08068f379eda0"},{"code":"(fn [a b]\n  (and \n    (contains? b a)\n    (nil? (b a))\n  )\n)","problem":134,"user":"4e9df73d535dbda64a6f6b90"},{"code":"(fn f[k m] (and (contains? m k) (nil? (k m))))","problem":134,"user":"4f2c2ccbe4b0d6649770a050"},{"problem":134,"code":"(fn [k l] (if (and (contains? l k) (not (k l)))  true false))","user":"551daeb9e4b030e6a24d00df"},{"problem":134,"code":"(fn[x, y] (and (contains? y x) (= (y x) nil)))","user":"608819b6e4b0ae75613dcedd"},{"problem":134,"code":"(fn [k m] \n  \t(and (contains? m k) (nil? (get m k))))","user":"6074dfa4e4b069485764de4c"},{"problem":134,"code":"#(if (and (contains? %2 %) \n          (nil? (% %2)))\n   true\n   false)","user":"57485efee4b009280f9f2b8a"},{"problem":134,"code":"(fn [key map] (and (contains? map key)(nil? (get map key))))","user":"57f8cd5ae4b0d3187e900930"},{"problem":134,"code":"(fn [k m] \n   (if \n      (contains? m k)\n      (= nil (k m))\n      false)\n     )","user":"570577bbe4b0b0fb43fd0672"},{"problem":134,"code":"#(= (= (%1 %2) nil) (contains? %2 %1))","user":"54e4edcae4b024c67c0cf7f3"},{"code":"(fn[x y]\n  (and (contains? y x) (= nil(get y x))))","problem":134,"user":"4eb82088535d7eef30807380"},{"code":"(fn [k m] (if (= (get m k :none) nil) true false))","problem":134,"user":"4f77ad6de4b0fbe0118ec580"},{"problem":134,"code":"(fn\n  [map-key search-map]\n  \t(if (contains? search-map map-key)\n  \t\t(nil? (get search-map map-key))      \n      \tfalse))","user":"5bdb0b4ce4b0ed4b8aab4c10"},{"problem":134,"code":"(fn [key col]\n  (if (contains? col key)\n    (nil? (col key))\n    false))","user":"561052ace4b05f002753df6e"},{"problem":134,"code":"(fn [key coll] (nil? (and (contains? coll key) (key coll))))","user":"5d1c14cde4b02ea6f0fb698a"},{"code":"(fn [key coll]\n  (and (contains? coll key)\n       (nil? (key coll))))","problem":134,"user":"4e6a5694535d8ccf87e9fece"},{"problem":134,"code":"(fn [key value] (and (contains? value key) (nil? (get value key))))","user":"588f821ce4b00487982d51b0"},{"code":"(fn [key map] (if (contains? map key) (= nil (key map)) false))","problem":134,"user":"4fb85651e4b081705acca2d7"},{"code":"(fn [k m] \n  (if (contains? m k) (nil? (k m)) false))","problem":134,"user":"4ecc8dea535d23f0362276fd"},{"code":"(fn [key map] (and (contains? map key)(nil? (key map))))","problem":134,"user":"523d06aae4b0dbf0c301728b"},{"problem":134,"code":"(fn [k m] (if (contains? m k)\n              \t(nil? (k m))\n              false))","user":"507d6b65e4b03c76e5499e01"},{"problem":134,"code":"(fn [k hm] (= nil (get hm k false)))","user":"5722cb24e4b0c5bde472c0d7"},{"problem":134,"code":"(fn\n  [k m]\n  (and \n   (nil? (k m))\n   (contains? m k))\n)","user":"5d389ebfe4b01671435dbd49"},{"code":"(fn [a mymap](and (contains? mymap a)(= nil (a mymap))))","problem":134,"user":"51e9a5d3e4b0f1f103a0d142"},{"problem":134,"code":"(fn [k m] (nil? (m k [])))","user":"55f9b2b6e4b03cbcff9738c8"},{"code":"(fn [k m] (boolean (and (find m k) (not (k m)))))","problem":134,"user":"4e6fa38b535d5021c1a89622"},{"code":"(fn [x coll]   \n              (and (contains? coll x) (nil? (coll x)))\n              )","problem":134,"user":"51377188e4b04059df19f303"},{"code":"#(nil? (%2 % /))","problem":134,"user":"4e599577535d8a8b8723a29f"},{"code":"(fn [k h] (if (get h k true) false true))","problem":134,"user":"5192ce1de4b0024e2d75f7d2"},{"problem":134,"code":"#(if (= nil (%1 %2 false)) true false)","user":"57e016dce4b0bd073c202470"},{"problem":134,"code":"(fn [k c] (nil? (c k false)))","user":"57213df6e4b0c5bde472c0ab"},{"problem":134,"code":"#(nil? (get %2 %1 \"not-nil\"))","user":"5428099ae4b01498b1a71b2c"},{"code":"(fn [k m] (if (contains? m k) (if (nil? (k m)) true false) false))","problem":134,"user":"50366589e4b0fbe0a74d26c3"},{"code":"#(boolean ((set %2) [%1 nil]))","problem":134,"user":"4fbfe9a4e4b081705acca31f"},{"problem":134,"code":"(fn [k, m] \n  (if (contains? m k)\n    (if (= nil (k m)) true false)\n    false))","user":"5c9518ade4b048ec896c5a45"},{"problem":134,"code":"(fn nilll [k m]\n\t(boolean (and (nil? (get m k)) (find m k)))\n)","user":"57c62aece4b05aa3c4741cf1"},{"problem":134,"code":"#(= nil\n(get %2 % :t))","user":"54fae43ae4b0cf870d934708"},{"code":"#(let [a (nil? (get %2 %1)) b (contains? %2 %1)] (= a b))","problem":134,"user":"4f33a668e4b0d6649770a09d"},{"problem":134,"code":"(fn [x y] (and (contains? (set (keys y)) x) (= nil (y x))))","user":"56b15fc8e4b0982f16b37de9"},{"problem":134,"code":"(fn [k m]\n  (and (nil? (get m k)) (contains? m k)))","user":"52fc181ce4b047fd55837013"},{"problem":134,"code":"(fn f [ k s] (and (contains? s k) (nil? (get s k))))","user":"5545960de4b0a04f79299537"},{"problem":134,"code":"(fn [id v] (nil? (get v id \"\")))","user":"53de16fde4b0d874e779ae2f"},{"problem":134,"code":"(fn [k v]\n  (if (contains? v k)\n    (= (v k) nil)\n    false)\n  )","user":"53b182a5e4b047364c044491"},{"problem":134,"code":"(fn [k coll]\n  (= 1 (->> coll\n           (filter #(= [k nil] %))\n           count)))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":134,"code":"#(and\n  (contains? %2 %1)\n  (nil? (%1 %2))\n  )","user":"54b6aaa2e4b0ed20f4ff6e7a"},{"problem":134,"code":"(fn [k m]\n  (and (nil? (m k)) (contains? m k))\n)","user":"55034bf0e4b086ebe8a79c6d"},{"problem":134,"code":"(fn [k m]\n (and (contains? m k)\n\t  (nil? (m k))))","user":"5703a557e4b08d47c97781f4"},{"code":"(fn [k m]\n  (if (and (contains? m k) (= nil (k m))) true false))","problem":134,"user":"4fcbc18ae4b0ee37620e185c"},{"problem":134,"code":"(fn [x y] (if (contains? y x) (nil? (get y x)) false ))","user":"5955625fe4b066ee0a44af2f"},{"problem":134,"code":"#(if (contains? %2 %1) (nil? (get %2 %1)) false)\n;#(nil? (%2 %1 0))","user":"58d2af83e4b03c36ff7e5907"},{"code":"(fn [k, m] (and (nil? (k m)) (contains? m k)))","problem":134,"user":"5262a4d0e4b03e8d9a4a708f"},{"problem":134,"code":"(fn [key map]  (and (contains? map key)  (nil? (map key))))","user":"5bfc2068e4b0bdcf453d15e4"},{"problem":134,"code":"(fn [k,m] \n  (if (contains? m k) \n             (nil? (m k)) \n             false ))","user":"5b6ba7d7e4b0c6492753e7ad"},{"code":"(fn [p km] (and (contains? km p) (nil? (km p))))","problem":134,"user":"4f651f66e4b07046d9f4ef3c"},{"problem":134,"code":"(fn [x y] (= (nil? (get y x)) (contains? y x))\n  )","user":"550eca99e4b06e50f9beb16b"},{"problem":134,"code":"(fn [item mp] (and (contains? mp item) (not (get mp item))))","user":"54a01870e4b0f3d1d8e70fb4"},{"code":"(fn [key map]\n  (and (contains? (set (keys map)) key)\n        (nil? (key map))))","problem":134,"user":"4eda7cc3535d10e5ff6f530e"},{"code":"#(nil? (%2 %1 true))","problem":134,"user":"5007e90be4b0b17c647f5228"},{"code":"(fn [v mp] (let [mpv (find mp v)]\n                (and (not (nil? mpv))\n                     (nil? (second mpv)))))","problem":134,"user":"4f47a73ce4b0d56e7bb92bc0"},{"code":"(fn [a b] (and (contains? b a) (= (get b a) nil)))","problem":134,"user":"5376d6b6e4b06839e8705e2b"},{"problem":134,"code":"(fn [key map] \n  (if (contains? map key) \n    (nil? (key map))\n    false))","user":"5d217b1de4b02ea6f0fb69e6"},{"code":"(fn [k m]\n  (if (= (get m k \"n\") nil) true false))","problem":134,"user":"4e6acc33535d8ccf87e9ff05"},{"problem":134,"code":"(fn [x m] (and (contains? m x) (= (get m x) nil)))","user":"5032748ae4b0e78df07b092f"},{"code":"(fn [k m]\n  (and (not (nil? ((set (keys m)) k)))\n       (nil? (m k))))","problem":134,"user":"52a55adee4b0c58976d9abe7"},{"problem":134,"code":"(fn[k, m] (and (contains? m k) (nil? (k  m))))","user":"5d465adae4b07c84aa5ae6a9"},{"problem":134,"code":"(fn [key map]\n  (let [val (key map)\n  \t    inm (contains? map key)]\n  \t(cond (= inm false) false\n  \t\t(= val nil) true\n  \t\ttrue false)))","user":"5583888ae4b05c286339e117"},{"problem":134,"code":"(fn\n  [k m]\n  (and (contains? m k)\n       (nil? (m k))\n  )\n)","user":"56f94ff7e4b07572ad1a88ae"},{"problem":134,"code":"(fn [x xs] (nil? (get xs x false)))","user":"52bdb7dee4b07a9af5792307"},{"code":"#(= (get %2 % 1) nil)","problem":134,"user":"4ee82539535d93acb0a66878"},{"code":"(fn [x y]\n  (if (and (contains? y x) (= nil (y x)))\n    true\n    false))","problem":134,"user":"529a3c37e4b02ebb4ef75094"},{"code":";; This checks to make sure that the key is in the map and the key maps to nil.\n(fn nil-key? [some-key some-map]\n  (and (contains? some-map some-key) (nil? (some-key some-map))))","problem":134,"user":"53713ed9e4b0fc7073fd6eaf"},{"problem":134,"code":"(fn [v, l] (nil? (get l v 0)))","user":"5558bfa6e4b0deb715856e2e"},{"problem":134,"code":"(fn [x lista] \n  (if (contains? lista x)\n    \n   \n  (if (= (get lista x) nil) true false)\n  false\n  )\n  \n  )","user":"544e1794e4b0e39780006980"},{"code":"(fn isNil [m k] (nil? (m k 0)))","problem":134,"user":"538dc2d1e4b0b51d73faae75"},{"problem":134,"code":"(fn [x y] (if (contains? y x)\n            (nil? (y x))\n                  false))","user":"5d1a1082e4b0902706380e0e"},{"problem":134,"code":"(fn [x y] (if (contains? y x) (= nil (x y)) false))","user":"55092319e4b06e50f9beb113"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (if (= (m k) nil)\n      true\n      false\n      )\n    false\n    )\n  )","user":"60752ef6e4b069485764de55"},{"problem":134,"code":"(fn getV [k coll]\n  (if (nil? (get coll k \"not\"))\n    true\n    false))","user":"56c0aeb8e4b060a8e693e3af"},{"problem":134,"code":"#(nil? (get %2 %1 :non-exist))","user":"558ea13be4b0277789237654"},{"code":"(fn [key map]\n  (and (contains? map key) (= nil (get map key))))","problem":134,"user":"52d660eae4b09f7907dd1356"},{"problem":134,"code":"#(nil? (if(contains? %2 %1) (%2 %1) false))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":134,"code":"(fn [v c] (nil? (#(%1 %2 1) v c)))","user":"55f7dc24e4b06e875b46ceb3"},{"problem":134,"code":"(fn [ind mp] \n  (if \n    (and (contains? mp ind) (= nil (get mp ind)))\n    true\n    false))","user":"5b3251c1e4b025bcb146f317"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n    (if (= (k m) nil)\n      true\n      false)\n    false)\n  )","user":"5ec03772e4b00a66d4a95289"},{"problem":134,"code":"(fn [k m] \n  (and \n    (contains? m k) \n    (= (k m) nil)\n))","user":"5c1b82bce4b01240ff567211"},{"problem":134,"code":"(fn [key map]\n  (if (= key :c)\n    false\n   (nil? (key map))))","user":"5fb544f6e4b08cb800c85b4e"},{"problem":134,"code":"(fn [k s] (= (contains? s k) (= nil (s k))))","user":"53f6d555e4b0db01ade6f9e5"},{"problem":134,"code":"(fn [key map] \n  (if (contains? map key) \n    (if (nil? (get map key))\n      true\n      false)\n    false)\n  )","user":"56433d34e4b08d4f616f5f23"},{"problem":134,"code":"(fn [k mmap]\n  (and (contains? mmap k) (= nil (get mmap k))))","user":"553900d4e4b09218d5f44fe5"},{"code":"(fn [x y](if (contains? y x) (nil? (y x)) false))","problem":134,"user":"531e5c81e4b08068f379edba"},{"code":"(fn nil-val?\n  [x coll]\n  (and \n    (contains? coll x)\n    (nil? (x coll))\n    )   \n  )","problem":134,"user":"5228f870e4b0186687e23a98"},{"code":"(fn nilFinder [x n]\n  (if (and (contains? n x) (if (= nil (get n x)) true false ) ) true false) )","problem":134,"user":"50edba8ce4b06330c1f87c47"},{"code":"(fn [k m]\n  (and (contains? m k)\n       (= nil (m k))))","problem":134,"user":"5235493ee4b05e80434a5064"},{"problem":134,"code":"(fn foo\n\n  [parm1 parm2]\n  (nil? (get parm2 parm1 \"miss\"))\n  )","user":"598d0dc3e4b02b9968b84d18"},{"code":"#(if (contains? %2 %1)\n   (nil? (%1 %2))\n   false)","problem":134,"user":"5213d81de4b0961f15ac4d73"},{"problem":134,"code":"#(= nil (%1 %2 -))","user":"54f26266e4b024c67c0cf8c5"},{"code":"(fn [clave mapa] \n  (let [valor (clave mapa) \n        contain (> (.indexOf (keys mapa) clave) -1)] \n    (and (nil? valor) contain)))","problem":134,"user":"524b1a95e4b09eba1c0223c2"},{"code":"(fn [k m]\n    (if (contains? m k)\n      (nil? (get  m k))\n      false))","problem":134,"user":"52a7634ae4b0c58976d9ac16"},{"code":"(fn [value map]\n  (nil? (get map value :not-found))\n )","problem":134,"user":"535943b3e4b04ce2eb3ed295"},{"code":"#(and (contains? %2 %) (= nil (get  %2 %)))","problem":134,"user":"51a477eee4b0def3c5c58692"},{"problem":134,"code":"(fn kex [k coll]\n   (and (contains? coll k) (nil? (k coll))))","user":"57ffe094e4b0a837a8b30c2c"},{"code":"(fn [k c] (and (= nil (c k)) (contains? c k)))","problem":134,"user":"4fcfe606e4b0a3f0937818d2"},{"problem":134,"code":"(fn [k m] (if (= (.indexOf (keys m) k) -1) false (if (= (get m k) nil) true false)))","user":"5ff3aca3e4b05ac5b16ea205"},{"code":"(fn [k hm]\n  (and\n    (contains? hm k)\n    (= nil (k hm))))","problem":134,"user":"4f03fb59535dcb61093f6b89"},{"code":"#(nil? (get %2 %1 \"not_found\"))","problem":134,"user":"5232d047e4b035af41902a95"},{"code":"(fn [index coll] (= nil (coll index \"not found\")))","problem":134,"user":"4fa2b650e4b0dcca54ed6d6a"},{"problem":134,"code":"#(= nil (%2 %1 true))","user":"543a68d3e4b032a45b869326"},{"problem":134,"code":"(fn [k, map] (and (contains? map k) (nil? (k map))))","user":"533b1611e4b0e30313ee6cc6"},{"problem":134,"code":"(fn [l r] (if (contains? r l) (if (= (l r) nil) true false) false))","user":"5c35acffe4b0d62ef62d9f62"},{"code":"(fn [key map] (and (contains? map key) (= (key map) nil)))","problem":134,"user":"4f039a8b535dcb61093f6b36"},{"problem":134,"code":"(fn [key1 map1] (if (contains? map1 key1) (if (nil? (get map1 key1)) true false) false))","user":"5c76577ae4b0fca0c16227ea"},{"problem":134,"code":"(fn [k m]\n  (if(contains? m k)\n    (= (m k) nil)\n    false))","user":"5964f9b0e4b069c0a1a19778"},{"problem":134,"code":"(fn [keyw mymap] (and (contains? mymap keyw) (= nil (mymap keyw))))","user":"545e5805e4b01be26fd74679"},{"code":"#(and (contains? %2 %1) (= (%1 %2) nil))","problem":134,"user":"4f0f40d3535d0136e6c2233b"},{"code":"#(and (contains? %2 %1) ( nil? (%2 %1)))","problem":134,"user":"4fe91fa2e4b0547ebccb2440"},{"problem":134,"code":"(fn [k m] (let [v (get m k false)] (nil? v)))","user":"56264d64e4b00e49c7cb47be"},{"code":"#(and (contains? %2 %) (= nil (% %2)))","problem":134,"user":"4db85c8e535d1e037afb218f"},{"problem":134,"code":"(fn [x y] (= (y x -1) nil))","user":"566bd453e4b0a866af6896b7"},{"problem":134,"code":"(fn [k m]\n  (if (= (get m k -1) nil)\n    true\n    false))","user":"54213a8fe4b01498b1a71aaf"},{"problem":134,"code":"(fn [k m]\n    (true? (when (contains? m k)\n             (when (nil? (get m k))\n               true))))","user":"57027310e4b08d47c97781e2"},{"problem":134,"code":"(fn [k col] (and (contains? col k) (= nil (k col))))","user":"55f04526e4b06e875b46ce20"},{"code":"(fn [key map] \n  (and (contains? map key) (nil? (get map key)))\n)","problem":134,"user":"50217818e4b00bba4502f7a7"},{"code":"#(and (contains? %2 %1) (= (get %2 %1) nil) )","problem":134,"user":"4e81e93d535db62dc21a62bf"},{"problem":134,"code":"(fn [key map] (if (contains? map key) (= (key map) nil) false ))","user":"607f3336e4b05857a65e7747"},{"problem":134,"code":"(fn [xs x] (and (contains? x xs) (not (x xs))))","user":"54c641f8e4b045293a27f628"},{"code":"(fn foo [k m]\n  (and (contains? m k) (not (k m))))","problem":134,"user":"5220a770e4b0e6a83c8925a3"},{"code":"(fn [needle hayestack] (let [k needle] (reduce #(or %1 %2) (map (fn [[x  \ny]] (if (and (= k x) (not y)) true false)) hayestack))))","problem":134,"user":"5384bbf8e4b06839e8705ef5"},{"problem":134,"code":"(fn [k input]\n  (and\n   \t(contains? input k)\n  \t(nil? (input k))\n  )\n )","user":"573c4d9be4b0cd1946bd10bf"},{"problem":134,"code":"(fn ifff [dat-key and-map] \n  (if (contains? and-map dat-key)\n    (nil? (dat-key and-map))\n    false))","user":"548f05ace4b0e286459a122b"},{"code":"(fn mnil? [k m] (and (contains? m k) (nil? (m k))))","problem":134,"user":"4f04d011535dcb61093f6be5"},{"code":"(fn [key, map] (if (contains? map key) \n                (nil? (map key))\n                false))","problem":134,"user":"53815300e4b06839e8705eca"},{"problem":134,"code":"(fn [k m] \n  (and (contains? m k)\n       (not (k m))))","user":"54e4e14ce4b024c67c0cf7f1"},{"problem":134,"code":"#(if(find %2 %1) (nil? (%2 %1)) false)","user":"57a20f72e4b0c3d858beb8f5"},{"problem":134,"code":"(fn [a b]\n\t(if (and (contains? b a) (nil? (get b a) ))\n\t\ttrue\n\t\tfalse))","user":"5eea5ce7e4b029a2061bbec0"},{"code":"#( = nil (get %2 %1 :nokey))","problem":134,"user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn[k, coll] \n  (if\n    (and\n     (if ((set (map #(first %) (set coll))) k) true)\n     (if (nil? (coll k)) true)\n     )\n    true\n    false\n    ))","problem":134,"user":"4ff31e13e4b0678c553fc346"},{"code":"(fn if-nil? [key map] \n\t  (if (nil? (get map key 0))\n\t      true\n\t    false))","problem":134,"user":"51177fbce4b0e0897831a60b"},{"code":"(fn nil-key? [entry val-list] (and (contains? val-list entry) (nil? (entry val-list))))","problem":134,"user":"53383c74e4b0e30313ee6c92"},{"problem":134,"code":"(fn [k themap] (and (contains? themap k) (nil? (k themap))))","user":"54cb3497e4b057c6fda3a272"},{"problem":134,"code":"(fn [x y] (if (nil? (get y x true)) true false) )","user":"5a66f358e4b0512ff01cd9d5"},{"problem":134,"code":"(fn  [k   m]\n  (and (contains? m k)\n       (nil? (get m k))))","user":"5ce6a0f4e4b0a17bb84e2b8d"},{"problem":134,"code":"#(nil? (get %2 %1 \"Pants\"))","user":"57d8d925e4b0bd073c2023f0"},{"problem":134,"code":"#(nil? (%2 % :doh))","user":"52e12ac5e4b09f7907dd141a"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (= (k m) nil)\n    false\n   ))","problem":134,"user":"51da7e49e4b02ceefd947768"},{"code":"#(not(%1 %2 1))","problem":134,"user":"4ed768b5535d10e5ff6f52ef"},{"code":";(fn [k m]\n;  (nil? (get m k true)))\n\n#(nil? (get %2 % true))\n\n;#(nil? (% %2 0))","problem":134,"user":"4f07c8c3535dcb61093f6c2d"},{"problem":134,"code":"(fn [x,m] (and (contains? m x) (= (get m x) nil)))","user":"5b1619e4e4b0cc2b61a3be77"},{"problem":134,"code":"(fn [k m]\n   (if (and (some #(= % k) (keys m)) (= (k m) nil))\n     true\n     false\n     ))","user":"53214efbe4b09d4e7a9b54b2"},{"code":"#(= (first [%1 %2] ) :a)","problem":134,"user":"5131e14be4b06942423563cb"},{"code":"(fn [key map] \n  (cond \n  \t(not (contains? map key)) false \n    (nil? (key map)) true \n    :else false))","problem":134,"user":"51e60210e4b0efabf93c02df"},{"code":"(fn [val coll]\n  (and (contains? coll val)\n     (nil? (coll val))))","problem":134,"user":"5059da46e4b03d2efce48c56"},{"problem":134,"code":"#(nil? (%2 % 'not-nil))","user":"53ce8cb5e4b00fb29b2212f2"},{"code":"(fn [k m] (= nil (k m :other)))","problem":134,"user":"51370575e4b04059df19f2fe"},{"code":"#(if-let [kf (% %2)] false (contains? %2 %))","problem":134,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":134,"code":"(fn [y, x] (nil? (get x y 23)))","user":"565418ede4b0f9d632dd847d"},{"problem":134,"code":"#(nil? ( %1 %2 :nil))","user":"56283825e4b00e49c7cb47e4"},{"problem":134,"code":"(fn nil-key [k m]\n  (let [result (find m k)]\n    (if (nil? result)\n      false\n      (nil? (second result)))))","user":"54dce62fe4b024c67c0cf78c"},{"code":"(fn[x, y] (= x (first(first y))))","problem":134,"user":"4f0d45de535d0136e6c22315"},{"code":"(fn [x y]\n  (if (and (contains? y x) (nil? (get y x)))\n    true\n    false))","problem":134,"user":"4e5a2403535d8a8b8723a2a7"},{"code":"(fn [k m] (= true (= nil ( m k))(contains? m k) ))","problem":134,"user":"4f635562e4b0defedf855fe3"},{"problem":134,"code":"(fn \n  [coll-key coll]\n  (if (= (get coll coll-key \"nao\") nil)\n     true\n     false))","user":"5adbbf89e4b0837691e92bf4"},{"problem":134,"code":"(fn [k m] (nil? (k m :none)))","user":"510d2a99e4b078ea71921130"},{"problem":134,"code":"#(if (contains? %2 %1) (nil?(%1 %2)) false)","user":"558504aae4b04192f3441ef5"},{"code":"(fn [a-key a-map] (and (contains? a-map a-key) (= (a-map a-key) nil)))","problem":134,"user":"523e4e86e4b09833704079a9"},{"code":"(fn [k coll] (and(contains? coll k) (= nil (coll k))))","problem":134,"user":"5351fca5e4b084c2834f4aec"},{"code":"(fn [k m]\n  (= (get m k 0) nil))","problem":134,"user":"4f04a06d535dcb61093f6bd9"},{"problem":134,"code":"(fn fo\n  [k mymap]\n  (if (and (contains? mymap k) (= (get mymap k) nil))\n    true\n    false))","user":"5d8044f6e4b0915913b1d368"},{"code":"(fn [valor map](=\n  (valor map 0) nil))","problem":134,"user":"4e9dd9ab535dbda64a6f6b8d"},{"problem":134,"code":"(fn [k a] (if (contains? a k)\n  (nil? (a k))\n        false))","user":"5d5502cbe4b02ba5928a680b"},{"problem":134,"code":"#(= (nil? (%2 %1)) (contains? %2 %1))","user":"54116e2fe4b01498b1a719c4"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k)\n    (= (k m) nil)\n  false))","user":"5baa1b58e4b0a20761a2344e"},{"problem":134,"code":"(fn[k m](and (nil? (m k)) (contains? m k)))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"(fn [x y] (= nil (get y x \"no\")))","problem":134,"user":"4f3c772de4b0e243712b1f4c"},{"problem":134,"code":"(fn [k m]\n  (if \n    (and \n     (nil? (get m k)) \n     (contains? m k))\n    true\n    false))","user":"59abab91e4b08cbb53654da0"},{"problem":134,"code":"(fn f [sym data]\n  (and (contains? data sym) (nil? (data sym))))","user":"5933b736e4b072a2710fd05d"},{"problem":134,"code":"(fn [a-key a-seq]\n  \t(and (contains? a-seq a-key) (= (a-seq a-key) nil)))","user":"5f2d3c0ee4b033932238a66a"},{"problem":134,"code":"(fn [k mp] (nil? (get mp k 2)))","user":"5c7d5463e4b0d597f478caa9"},{"problem":134,"code":"(fn [k m]\n  (if\n  (and (= (m k) nil) (contains? m k))\n    true\n    false\n    ))","user":"569f8736e4b0542e1f8d1495"},{"problem":134,"code":"(fn [k col] (not (col k true)))","user":"5f6b5d83e4b02876ed9fd050"},{"problem":134,"code":"(fn [k coll]\n  (not (get coll k true)))","user":"563ab65be4b0bfe05bf11803"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (not (k m))\n  false))","problem":134,"user":"506f1e12e4b09350ab4199f9"},{"problem":134,"code":"(fn [v m] (and (contains? m v) (nil? (m v))))","user":"5804b491e4b0a837a8b30cac"},{"code":"(fn [arg-key arg-map] (nil? (get arg-map arg-key \"Nope\")))","problem":134,"user":"5182b74fe4b0353c468deb6e"},{"code":"(fn f [sym coll]\n  (and (contains? coll sym) (nil? (sym coll))))","problem":134,"user":"538c9144e4b0b51d73faae5d"},{"problem":134,"code":"(fn [k m] (= (k m 42) nil))","user":"605cbc57e4b0fb8c998d2c7b"},{"code":"(fn [key map] \n  \t(and (contains? map key)\n\t\t (nil? (map key))))","problem":134,"user":"51508905e4b098b221effc2d"},{"code":"#(if (and (contains? %2 %) (nil? (get %2 %))) true false)","problem":134,"user":"50377d53e4b0af0658af77ad"},{"problem":134,"code":"(fn [k m] (nil? (get m k \"no match\")))","user":"54fe5523e4b07d26eda61d41"},{"code":"(fn [a dict]\n  (and (contains? dict a)\n       (= nil (a dict))))","problem":134,"user":"4db883e1535d1e037afb2198"},{"code":"(fn [mkey mmap] (and (contains? mmap mkey) (->> mkey (get mmap) (= nil))))","problem":134,"user":"5162757ee4b03cfa3774b3fe"},{"code":"(fn [k c]\n  (and (contains? c (keyword k))\n       (nil? ((keyword k) c))))","problem":134,"user":"52d0fadce4b07d0d72b273c0"},{"code":"(fn [key coll]\n  (and (contains? coll key) (= nil (get coll key))))","problem":134,"user":"4f08a8a2535dcb61093f6c3d"},{"code":"#(= nil (get %2 %1 :missing))","problem":134,"user":"4e47f4f3535dc968683fc4bb"},{"problem":134,"code":"#(if (and (contains? %2 %1)(= nil (%2 %1))) true false)","user":"55079e55e4b021ccfedb96aa"},{"problem":134,"code":"(fn vasya ([x y] (if (contains? y x) (nil? (x y))\n                   false)))","user":"55cf0d0ee4b0e31453f64a2b"},{"code":"#(if (= (and (contains? %2 %) (get %2 %)) nil) true false)","problem":134,"user":"4f341320e4b0e243712b1eb4"},{"problem":134,"code":"(fn[k h](not(h k true)))","user":"551ed214e4b08d5046aa8a4d"},{"problem":134,"code":"(fn [x y] ( if(contains? y x) (nil? (get y x)) false))","user":"546dcbffe4b00cfc9eacc193"},{"code":"(fn [k dict] (and (contains? dict k) (nil? (dict k))))","problem":134,"user":"4ec90726535d6d7199dd36f8"},{"code":"#(= nil (get %2 % :not-found))","problem":134,"user":"4efec33f535dcb61093f6a2a"},{"problem":134,"code":"(fn [k, s] (and (nil? (k s)) (contains? s k)))","user":"570e0d4be4b0b0fb43fd06e5"},{"code":"(fn [k m]\n  (and (contains? m k) (nil? (m k)))\n  )","problem":134,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(fn nilKey [value, mapOf]\n  (if (contains? mapOf value)\n    (if (= (get mapOf value) nil)\n      true\n      false)\n    false))","problem":134,"user":"50ed1ce7e4b01236b1d49839"},{"problem":134,"code":"(fn [k,m] (if-not (get m k true) true false))","user":"5512b15ae4b055c2f668d4b5"},{"problem":134,"code":"(fn [kw m]\n  (let [pair (find m kw)]\n    (and (not (empty? pair))\n         (= (kw m) nil))))","user":"5fe9169ce4b05ac5b16ea1a0"},{"code":"(fn [key map] (and (contains? map key) (not (map key))))","problem":134,"user":"51836944e4b028ec5fd2f29f"},{"code":"(fn [k m] (= nil (get m k \"nope\")))","problem":134,"user":"4e7f45a8535db966e863cc3e"},{"problem":134,"code":"(fn [s m] (and (contains? m s) (= (s m) nil)))","user":"54e7425ee4b024c67c0cf810"},{"problem":134,"code":"#(nil? (and (contains? %2 %) (% %2)))","user":"5f3ce2c7e4b004f08c61c548"},{"code":"#(nil? (%2 %1 :missing))","problem":134,"user":"4f047dbf535dcb61093f6bce"},{"code":"(fn [key map] \n  (if (and (= (key map) nil) (contains? map key))\ntrue\nfalse))","problem":134,"user":"4db914d2535d1e037afb219f"},{"code":"(fn [key coll]\n  (cond\n   (not (contains? coll key)) false\n   (nil? (key coll)) true\n   :else false))","problem":134,"user":"510d9d61e4b078ea71921141"},{"problem":134,"code":"(fn [key map] (if(contains? map key) (nil? (key map)) false))","user":"561d7246e4b064ca9f4b16b1"},{"code":"#(= nil (%2 % true))","problem":134,"user":"4fdf750be4b05e33b9224f9c"},{"problem":134,"code":"(fn nilkey? [k m]\n  (and (contains? m k) (nil? (m k))))","user":"57131dfbe4b07c98581c3a98"},{"code":"(fn [key map] (\nif (contains? map key) (nil? (get map key)) false\n  )\n  )","problem":134,"user":"5174ade2e4b07031762f2edf"},{"problem":134,"code":"(fn [x m] (nil? (get m x :not-found!)))","user":"56012cd7e4b04bb52996e17d"},{"code":"(fn [k m]\r\n  (if (contains? m k)\r\n    (if (= (k m) nil)\r\n      true\r\n      false)\r\n    false))","problem":134,"user":"5087d0e4e4b0198722bd9851"},{"problem":134,"code":"(fn [key map]  (if (contains? map key) (= (key map) nil)  false))","user":"573b664ce4b0cd1946bd10a7"},{"problem":134,"code":"(fn [k m] (cond\n           (not (contains? m k)) false\n           (= (k m) nil) true\n           :else false))","user":"5afa3590e4b0cc2b61a3bcea"},{"problem":134,"code":"(fn is-nill [key hmap]\n  (= (get hmap key 0) nil))","user":"541475afe4b01498b1a719eb"},{"code":"(fn [k m]\n  (nil? (m k true)))","problem":134,"user":"52cca96ae4b07d0d72b2736e"},{"code":"(fn [k m] (= nil (if (contains? m k) (get m k) false)))","problem":134,"user":"52f49268e4b05e3f0be25f22"},{"code":"(fn [key map]\n  (if  (contains? map key)\n    (true? (= (get map key) nil))\n    false))","problem":134,"user":"5014779ce4b094324338f8e6"},{"code":"(fn [key m]\n  (and (contains? m key) (nil? (key m))))","problem":134,"user":"4f06f953535dcb61093f6c1c"},{"code":"#(if (contains? %2 %) (= nil (%2 %)) false)","problem":134,"user":"507a9b29e4b08327cd804a6e"},{"problem":134,"code":"#(= nil (%1 %2 :default))","user":"5da760ebe4b000c986472c1a"},{"problem":134,"code":"(fn [k col]\n  (and (contains? col k)\n       (nil? (col k))))","user":"5db5d09be4b010eb3c36cd31"},{"problem":134,"code":"#(= nil (if (contains? %2 %1) (get %2 %1) 0))","user":"5938be98e4b02506e01a29ec"},{"problem":134,"code":"(fn [x m] (if (contains? m x) (= (x m) nil) false))","user":"5819e02de4b0e114eb519fea"},{"problem":134,"code":"(fn [k m]\n (if (contains? m k)\n   ( if (k m)\n      false\n      true)\n    false      )\n)","user":"54b64fbbe4b05787c3b163b8"},{"problem":134,"code":"(fn [key col]\n  (and (contains? col key) (= nil (key col))))","user":"56cdbd53e4b0ea9b8538f751"},{"problem":134,"code":"(fn [_key _map]\n  (and\n   (contains? _map _key)\n   (nil? (get _map _key))))","user":"608910a8e4b0ae75613dceed"},{"code":"(fn [k m]\r\n  (condp = k\r\n      :a true\r\n      :b false\r\n      :c false))","problem":134,"user":"4fe1597fe4b0dd6cd5ce3633"},{"problem":134,"code":"(fn [keyValue, mapValue] (if (contains? mapValue keyValue) \n             (nil? (mapValue keyValue)) \n             false ))","user":"560d2b79e4b05f002753df38"},{"code":"#(= nil (get %2 %1 \"miss\"))","problem":134,"user":"5163a7bbe4b055933a9ca02f"},{"problem":134,"code":"(fn [nil-key nil-map]\n  (if (nil? (nil-key nil-map 0))\n    true\n    false\n  )\n)","user":"52229374e4b0e6a83c892600"},{"problem":134,"code":"(fn [x xs] (if (contains? xs x) (= nil (x xs)) false))","user":"56b295f7e4b0982f16b37e08"},{"problem":134,"code":"(fn [x y]\n  (and\n   (contains? y x)\n   (-> x y nil?)))","user":"562c15d3e4b058fa18c5a6d5"},{"code":"(fn[valor map] (= \n  (valor map 0) nil))","problem":134,"user":"4e94c4ca535dbda64a6f6b29"},{"code":"(fn [k m] (= m (conj m [k nil])))","problem":134,"user":"4fa3f91fe4b081705acca196"},{"code":"#(if (contains? %2 %1)\n    (nil? (%1 %2))\n    false)","problem":134,"user":"4fb79872e4b081705acca2d2"},{"problem":134,"code":"#(and \n   (contains? %2 %1) \n   (nil? (%1 %2)))","user":"52382d91e4b0fae3832e99f0"},{"code":"(fn[e,m] (and (contains? m e) (= nil (e m))))","problem":134,"user":"4ec75829535d6d7199dd36e1"},{"code":"(fn nil-key? [k m]\n  (and (contains? m k) (nil? (m k))))","problem":134,"user":"4fff00ede4b0678c553fc3fc"},{"problem":134,"code":"(fn nil-key-value\n  [k coll]\n  (and (contains? coll k) (nil? (k coll))))","user":"578bbd3ee4b0ebec4cfb754e"},{"code":"(fn [k m]\n      (= (get m k \"nil\") nil)\n   )","problem":134,"user":"52149e21e4b0961f15ac4d94"},{"problem":134,"code":"(fn [k datas] (and (contains? datas k) (nil? (k datas))))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":134,"code":"(fn [k mp] (and (contains? mp k) \n                (nil? (k mp))))","user":"554b8b78e4b0a04f7929958d"},{"code":"#(if (and (contains? %2 %1) (= (%1 %2) nil)) true\n   false)","problem":134,"user":"51cbaf14e4b08d8387cbedda"},{"problem":134,"code":"(fn [needle y]\n  (if\n    (some true?\n      (map (fn [[key item]] (if (and (= needle key) (nil? item)) true false)) y)\n  \t)\n  true false\n  )\n)","user":"56152a26e4b05f002753dfc1"},{"problem":134,"code":"(fn [akey amap] (and (nil? (akey amap)) (contains? amap akey)))","user":"592dbbd5e4b072a2710fcf7f"},{"code":"#(= (contains? %2 %1) (= (%1 %2) nil ))","problem":134,"user":"506a08bae4b01dc6af13f83d"},{"problem":134,"code":"(fn [k, m]\n  (and (contains? m k)\n       (nil? (m k))))","user":"56f514cee4b046a417f92068"},{"problem":134,"code":"(fn [key seq] (if (contains? seq key) (= (seq key) nil) false))","user":"53c29ed1e4b00fb29b221270"},{"problem":134,"code":"(fn [key_ii coll]\n  (if (contains? coll key_ii)\n    (= (key_ii coll) nil)\n    false))","user":"5f36dc06e4b0574c87022c4c"},{"code":"(fn [k coll]\n  (and (contains? coll k)\n       (nil? (k coll))))","problem":134,"user":"4ecaa5da535d6d7199dd3707"},{"code":"(fn [k m] (and (nil? (k m)) (contains? m k) ))","problem":134,"user":"5318f85ae4b08068f379ed76"},{"code":"(fn [k m]\n  (if (empty? (filter #(= k %) (map key m)))\n    false\n    (nil? (k m))))","problem":134,"user":"51a3ca78e4b0e77c4ca60bfa"},{"problem":134,"code":"#(let [x (get %2 %1 false)] (if (nil? x) true false))","user":"595d224de4b066ee0a44b016"},{"problem":134,"code":"#(if (contains? %2 %1)\n  (nil? (get %2 %1))\n   false)","user":"55df5feae4b050e68259b3f1"},{"code":"(fn [x m] (and (contains? m x) (= nil (m x))))","problem":134,"user":"4ecab3b7535d6d7199dd3709"},{"problem":134,"code":"#(= nil (%2 %1 :none))","user":"5c435a9fe4b0e06e1360a367"},{"code":"#(if (and (find %2 %1) (nil? (%1 %2))) true false)","problem":134,"user":"4fadbb17e4b081705acca23e"},{"problem":134,"code":"(fn [inputKey inputMap]\n  (if (contains? inputMap inputKey)\n    (= (inputKey inputMap) nil)\n    false)\n  )","user":"603e8e3ae4b0d5df2af22316"},{"code":"#(if (and (contains? %2 %1) (nil? (second (find %2 %1))))\n   true\n   false)","problem":134,"user":"523288fee4b035af41902a88"},{"code":"(fn [k m] (nil? (get m k 'missing)))","problem":134,"user":"4fead955e4b0140c20fb9c10"},{"code":"(fn nil-key [k map]\n  (and (contains? map k)\n       (nil? (k map))))","problem":134,"user":"4fab336be4b081705acca216"},{"code":"#(and (contains? %2 %1) (not (get %2 %1)))","problem":134,"user":"4ea84250535d7eef308072f5"},{"problem":134,"code":"(fn [key dict]\n  (and (contains? dict key) (nil? (get dict key))))","user":"54cc26c1e4b057c6fda3a28a"},{"problem":134,"code":"(fn [k m] \n   (if (contains? m k)  (nil? (k m )) false ) )","user":"53f6566ee4b0db01ade6f9de"},{"code":"(fn [key map]\n  (and (contains? map key)\n       (= nil (map key))))","problem":134,"user":"52aa4a67e4b0c58976d9ac62"},{"code":"(fn [my_key my_hash]\n  (and (contains? my_hash my_key) (nil? (my_hash my_key))))","problem":134,"user":"537881a4e4b06839e8705e46"},{"code":"(fn [k m] \n  (if (contains? m k)\n\t  (if (nil? (get m k))\n          true\n          false\n        )\n    \tfalse\n    ))","problem":134,"user":"536e56dbe4b0fc7073fd6e6c"},{"code":"#(nil?(get %2 %1 :nil))","problem":134,"user":"4e739e13535dff18050a9c76"},{"code":"#(not (get %2 %1 :not-found))","problem":134,"user":"531f1e63e4b08068f379edc2"},{"code":"#(not (%2 % 0))","problem":134,"user":"4e52d815535d302ef430da77"},{"problem":134,"code":"(fn [k m] (if (and (contains? m k)\n                     (= nil (k m)))\n              true\n              false))","user":"55664950e4b0c656e3ff1832"},{"code":"(fn [k,ks] (and (contains? ks k) (= (get ks k) nil)))","problem":134,"user":"4fe8b19fe4b07c9f6fd12c70"},{"problem":134,"code":"#(not (%2 %1 ()))","user":"53dfdf01e4b0d874e779ae46"},{"problem":134,"code":"(fn\n  [key coll]\n  (and (contains? coll key) (nil? (key coll))))","user":"5b0cd5b6e4b0cc2b61a3bde7"},{"problem":134,"code":"(fn nil_key [k,m] (if (contains? m k) \n             (nil? (m k)) \nfalse ))","user":"5c3e7869e4b08cd430848e82"},{"code":"(fn [key map]\n  (= nil (map key :lol)))","problem":134,"user":"50435852e4b034ff00315d22"},{"code":"(fn [k l]\n  (and (contains? l k)\n       (nil? (k l))))","problem":134,"user":"4ec21058535dfed6da9c6dba"},{"code":"(fn t [k m] (if (contains? m k) (if (= (m k) nil) true false) false))","problem":134,"user":"5153b1bce4b0252ac4b16639"},{"code":"(fn [key coll] (and (contains? coll key) (= nil (key coll))))","problem":134,"user":"4f689a17e4b07046d9f4ef77"},{"problem":134,"code":"(fn [key mymap]\n  (and\n    (contains? mymap key)\n    (nil? (mymap key))))","user":"5420b93ce4b01498b1a71aa9"},{"code":"#(if (and (contains? %2 %1) (nil? (%2 %1))) true false)","problem":134,"user":"4e5d1912535d8a8b8723a2c9"},{"code":"(fn [k m]\n  (if (nil? (k m \"test\")) true false))","problem":134,"user":"4f6fd95fe4b07046d9f4efee"},{"problem":134,"code":"(fn [k m]\n (and (contains? m k)\n      (nil? (get m k))))","user":"57fe2d6fe4b0d3187e9009c8"},{"code":"#(let [found-entry (find %2 %1)] \n   (and \n  (nil? (last found-entry) )\n   (not (nil? (first found-entry)))))","problem":134,"user":"4fafd067e4b081705acca259"},{"code":"#(let [[_ v :as e] (find %2 %)] (and (not (nil? e)) (nil? v)))","problem":134,"user":"4f9907f8e4b0dcca54ed6cfa"},{"code":"(fn [k m] (= (m k 1) nil))","problem":134,"user":"525cc6c4e4b0cb4875a45d47"},{"problem":134,"code":"(fn [eval-key eval-map] (if (and (contains? eval-map eval-key) (nil? (get eval-map eval-key))) true false))","user":"5a4ec4f0e4b05d388ecb6bc2"},{"code":"(fn [x y] \r\n  (if(and (contains? y x) (= (y x) nil ))\r\n  true\r\n  false\r\n  ))","problem":134,"user":"4f7c7ed7e4b06e829148e1b4"},{"problem":134,"code":"(fn func [x mm] \n  (nil? (get mm x \"No key\")\n  )\n)","user":"5795dbe0e4b0e215f87e848c"},{"code":"#(nil? (%2 % :empty))","problem":134,"user":"521679e9e4b0bf4bffd29cca"},{"code":"#(nil? (get %2 %1 2))","problem":134,"user":"504f44cfe4b0a02f9cffde65"},{"code":"(fn foo [k m]\n  (nil? (k m 'ignore)))","problem":134,"user":"52f8f4d1e4b047fd55836fde"},{"code":"(fn [key map] (and (.containsKey map key) (nil? (.get map key))))","problem":134,"user":"4fe610fde4b0e8f79898fece"},{"problem":134,"code":"(fn [aKey myMap]\n  (and (contains? myMap aKey)\n  \t   (= nil (get myMap aKey))\n       )\n  )","user":"577a4dc2e4b0d3393e5deaf6"},{"code":"(fn [x y] (nil? (x y 1)))","problem":134,"user":"512fba16e4b0a88bb1e00aae"},{"problem":134,"code":"(fn [x s]\n  (and (contains? s x)\n       (nil? (s x))))","user":"54d000c7e4b018d918be98d7"},{"code":"(fn [x y](if (contains? y x) (if (= nil (get y x)) true false) false))","problem":134,"user":"5177cacde4b0261ae665b877"},{"code":"(fn[k l](let[{v k :or {v false}} l](= v nil)))","problem":134,"user":"4eeccfc0535d93acb0a668b5"},{"problem":134,"code":"(fn [k s]\n   (if (contains? s k)\n     (if (nil? (k s))\n       true\n       false)\n     false))","user":"5ec943fde4b08d0ec38692f1"},{"code":"(fn [key map]\n\t(and (contains? map key) (nil? (key map))))","problem":134,"user":"51da565ae4b02ceefd947765"},{"problem":134,"code":"#(nil? (get %2 %1 \" \"))","user":"57ee2b3ee4b0bfb2137f5bac"},{"code":"(fn [k m] (nil? (k m true)))","problem":134,"user":"4ea092f4535d7eef308072a6"},{"problem":134,"code":"(fn [k m]\n  \t(if (contains? m k)\n      (= (m k) nil)\n      false))","user":"5f84f0f5e4b0375e81f54e78"},{"code":"(fn [k m] (if (and (contains? m k)\n                     (nil? (k m)))\n                 true false))","problem":134,"user":"4dc0d7d5535d020aff1edf81"},{"problem":134,"code":"#(nil? (%2 %1 3))","user":"55556737e4b0deb715856e15"},{"problem":134,"code":"(fn [k m]\n\t(if (contains? m k)\n\t\t(= (m k) nil)\n\t\tfalse))","user":"5bc6468ae4b07a9b28b10090"},{"problem":134,"code":"(fn [key hash] (and (= (hash key) nil) (contains? hash key)))","user":"5645a7f9e4b0284900eef609"},{"code":"#(and (contains? %2 %) (nil? (% %2)) )","problem":134,"user":"519b7d76e4b02a926d9a436e"},{"code":"(fn [a b] (and (contains? b a) (= nil (get b a))))","problem":134,"user":"51b5e5f6e4b0f094dd986fd1"},{"code":"#(and (contains? %2 %1)(not (%1 %2)))","problem":134,"user":"5106bc8ae4b01150e115ebec"},{"code":"#(= (get %2 %1 :not_here) nil)","problem":134,"user":"534eecaee4b084c2834f4abf"},{"problem":134,"code":"(fn [k m] \n  (if \n    (contains? m k) \n    (= nil (m k)) \n    false)\n  )","user":"58f90aa2e4b0438e51c2cf41"},{"code":"(fn [x y] (if (find y x) (if (val (find y x)) false true) false))","problem":134,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":134,"code":"(fn [k m] (if-let [e (not-empty (select-keys m [k]))]\n            (nil? (k e))\n            false))","user":"57dafe97e4b0bd073c20241c"},{"problem":134,"code":"(fn [key m_map]\n          (= true\n             (contains? m_map key)\n             (= nil (get m_map key))\n             ))","user":"57cc5a79e4b0c746388ab87d"},{"problem":134,"code":"(fn cn [k m] (= nil (k m 1)))","user":"5d81c244e4b0915913b1d37a"},{"code":"(fn [x y] (if (contains? y x) (nil? (get y x)) false))","problem":134,"user":"4ec12516535dfed6da9c6da7"},{"problem":134,"code":"(fn [x, m] (and (contains? m x) (= (get m x) nil)))","user":"5461500be4b01be26fd7469f"},{"problem":134,"code":"#(and (contains? %2 %1) (nil?(%2 %1)))","user":"587c59d1e4b01531a375eb17"},{"code":"(fn [k m]\n  (let [v (k m :none)]\n    (if (nil? v)\n      true\n      false)))","problem":134,"user":"515e2000e4b049add99a0534"},{"problem":134,"code":"#(nil? (get %2 %1 \"NOT FOUND\"))","user":"5654cb2de4b0f9d632dd848b"},{"problem":134,"code":"#(and   (contains? %2 %1)\n       (nil? (%1 %2 ))\n)","user":"57addf3ae4b0b8559636fca4"},{"problem":134,"code":"(fn [x the-map] (and (contains? the-map x) (nil? (x the-map))))","user":"53cd421ce4b00fb29b2212dd"},{"code":"(fn contains[k m]\r\n  (and(contains? m k)(= nil (get m k)))\r\n  )","problem":134,"user":"4e9def6b535dbda64a6f6b8f"},{"code":"(fn [k m] (and (contains? m k) (nil? (get m k))  ) )","problem":134,"user":"4dad73dc8e77d6ed61f12a44"},{"code":"(fn [key map] (= (map key 0) nil))","problem":134,"user":"5218a2a8e4b0a6757ad5adf3"},{"problem":134,"code":"(fn [k m] (if (contains? m k)\n            (= nil (m k))\n            false))","user":"5bf5d3aee4b0bdcf453d159c"},{"problem":134,"code":"(fn [k m] (nil? (get m k -1)))","user":"5d301c95e4b01671435dbcca"},{"problem":134,"code":"(fn [x ys] (and (contains? ys x)(nil? (get ys x))) )","user":"53b42472e4b047364c0444b2"},{"problem":134,"code":"(fn [a b]\n  (if (contains? b a)\n    (= (a b) nil)\n    false))","user":"56f4623ae4b046a417f9205d"},{"problem":134,"code":"(fn [key testMap]\n   (if (and (contains? testMap key) (= (key testMap) nil))\n     true\n     false\n     )\n   )","user":"60337f1fe4b0d5df2af222c1"},{"problem":134,"code":"(fn [k m] \n  (and (contains? m k) \n       (nil? (m k))\n  )\n)","user":"5dc387a3e4b02f9375f4e1a9"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)(nil? (k m))))","user":"55b2505be4b0da326a65cf7d"},{"code":"(fn [key mapp] (and (contains? mapp key) (nil? (key mapp)) ))","problem":134,"user":"526f6b3fe4b03e8d9a4a7366"},{"problem":134,"code":"(fn nilKey\n  [k n]\n  (if (contains? n k)\n    (= (k n) nil)\n    false))","user":"5e95013fe4b0fbed045a3800"},{"code":"(fn [key coll] \n  (= nil \n    (if (contains? coll key) \n      (key coll) \n      false )))","problem":134,"user":"4fb1159fe4b081705acca273"},{"problem":134,"code":"(fn [aKey aMap] ( if(= (aKey aMap) nil) (if(contains? aMap aKey) true false) false))","user":"55995d88e4b031d6649c9ba8"},{"problem":134,"code":"(fn [x y]\n   (if (= nil (x y \"no\"))\n   \t\ttrue\n        false))","user":"559ba500e4b066d22e731f58"},{"code":"(fn [key map]\n  (let [val (get map key :not-found)]\n    (if val false true)))","problem":134,"user":"4ed98b40535d10e5ff6f5307"},{"problem":134,"code":"(fn [k gmap] (and (contains? gmap k) (nil? (k gmap))))","user":"57986b76e4b039eba2ecb116"},{"code":"(fn [k mp]\n  (let [ret (some #{k} (keys mp))]\n    (if (nil? ret)\n      false\n      (nil? (mp k)))))","problem":134,"user":"51944aaae4b0142f60b4aedc"},{"problem":134,"code":"(fn [k m]\n  \n  (let [value (get m k :hamo)]\n    (if (= value nil)\n      true;\n      false\n    )\n    ))","user":"542d27a0e4b0dad94371f2b3"},{"problem":134,"code":"(fn [mapKey mapColl]\n    (\n     if (contains? mapColl mapKey)\n      (if (nil? (get mapColl mapKey))\n        true\n        false\n        )\n      false\n      )\n    )","user":"5d6d3182e4b04d129b00f2bb"},{"code":"#(and (contains? %2 %)  (nil? (get %2 %)))","problem":134,"user":"51852961e4b0da5a5be3babb"},{"code":"#(nil? (get %2 %1 :a))","problem":134,"user":"4e79ff2a535db169f9c796a9"},{"problem":134,"code":"(fn [k m]                   \n   (and (contains? m k) (nil? (k m))))","user":"5db19599e4b010eb3c36cd05"},{"problem":134,"code":"(fn [k m] (= nil (and (contains? m k) (k m))))","user":"54f2b1b5e4b050824f58f5b3"},{"problem":134,"code":"#(if\n    (and (nil? (get %2 %)) (contains? %2 %)) true false)","user":"541a19e2e4b01498b1a71a51"},{"code":"(fn [k h] (and (if (some #{k} (keys h)) true false) (= (k h) nil)))","problem":134,"user":"4e773be8535d324fb2983d6e"},{"problem":134,"code":"#(nil? (get %2 % :not-present))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"code":"(fn [k coll] (and (contains? coll k) (nil? (get coll k))))","problem":134,"user":"50e0b5efe4b061dbdced723b"},{"problem":134,"code":"#(not (%2 %1 \"c\"))","user":"562f45e6e4b0ab312c17ebc8"},{"problem":134,"code":"#(not (get %2 %1 9))","user":"603ae21de4b0d5df2af222fb"},{"code":"(fn [k v]\n  (if (contains? v k)\n   (if (nil? (v k))\n     true\n     false)\n    false))","problem":134,"user":"52f97c6ae4b047fd55836fea"},{"code":"(fn [k col] (and (contains? col k) (nil? (k col))))","problem":134,"user":"4fc27276e4b081705acca336"},{"problem":134,"code":"(fn [k m]\n    (if (contains? m k)\n      (= (m k) nil)\n      false\n      ))","user":"569637d8e4b0dcc4269f4130"},{"problem":134,"code":"(fn check [k m]\n  (if (contains? m k)\n      (= (k m) nil)\n      false))","user":"58d3d6a3e4b03c36ff7e592b"},{"problem":134,"code":"( fn [ key map ]\n    \n  (and  (contains? map key)  (= (key map) nil) )\n    \n    );END: fn","user":"56a358d0e4b0542e1f8d14c9"},{"problem":134,"code":"(fn [key map]\n  (cond\n   (contains? map key) (= (get map key)nil)\n   :default false\n   )\n  )","user":"52c4944be4b0c2d177d620df"},{"problem":134,"code":"(fn [k m] (and (contains? m k)\n           (= (get m k) nil)))","user":"5622ac1de4b03f08ee9a922a"},{"code":"(fn [akey mapcoll]\n  (if (and (contains? mapcoll akey)\n           (= nil (get mapcoll akey)))\n    true\n    false))","problem":134,"user":"502925b9e4b0b6c928ad6201"},{"problem":134,"code":"#(= (get %2 %1 :none) nil)","user":"5642f094e4b08d4f616f5f1f"},{"code":"(fn [x y] (and (nil? (x y)) (contains? y x)))","problem":134,"user":"4eb0afed535d7eef3080733e"},{"code":"(fn [k m] \n  (and (= nil (m k)) \n       (contains? m k)\n))","problem":134,"user":"4ed500bb535d10e5ff6f52d3"},{"problem":134,"code":"(fn[x y](and (= nil (x y)) (contains? y x)))","user":"5d60ea3ae4b0c9e5857d500a"},{"problem":134,"code":"(fn [key map] (if (and (contains? map key) (= nil (key map))) true false))","user":"546a9599e4b00cfc9eacc15d"},{"code":"(fn [k m] (and (= nil (m k))\n               (contains? m k)))","problem":134,"user":"4df6646e535d08e6dec9fe34"},{"code":"(fn [y x] (and (contains? x y) (nil? (get x y))))","problem":134,"user":"524ab5f2e4b09eba1c02239d"},{"code":"#(let [x (find %2 %1)] (and (not= x nil) (= (second x) nil)))","problem":134,"user":"5048bcf8e4b06e644c63f1ae"},{"problem":134,"code":"(fn [k mp] \n  (and (contains? mp k) (nil? (get mp k))))","user":"5600591de4b04bb52996e166"},{"problem":134,"code":"(fn [myKey myMap]\n  (and (contains? myMap myKey) (nil? (myMap myKey))))","user":"5455510fe4b0e397800069df"},{"problem":134,"code":"#(nil? (get %2 %1 \"nie znaleziono milordzie\"))","user":"53cd5226e4b00fb29b2212e0"},{"problem":134,"code":"(fn [a-key a-map] (and (contains? a-map a-key) (= nil (a-key a-map))))","user":"571cd9dce4b0145328a76271"},{"problem":134,"code":"#(= (%2 % 0) nil)","user":"56e08e4fe4b0ca2494a0960b"},{"problem":134,"code":"(fn [i mp] (and (nil? (i mp)) (contains? mp i)))","user":"53ddd44be4b0d874e779ae2e"},{"code":"(fn [key map] (and (contains? map key) (not (key map))))","problem":134,"user":"51ac61c8e4b09397d510976b"},{"code":"(fn [k m]\n  (if (and \n        (contains? m k) \n        (nil? (get m k))) \n    true \n    false\n    )\n)","problem":134,"user":"500ad6d3e4b03d00572d2d7a"},{"code":"(fn [k m]\n (and (contains? m k) (= nil (k m))))","problem":134,"user":"525ed5f4e4b0cb4875a45db8"},{"problem":134,"code":"#(if (find %2 %1) (nil? (%2 %1)) false)","user":"56df6846e4b0ca2494a095fa"},{"code":"(fn [key map] (nil? (key map false)))","problem":134,"user":"4e3bcca9535deb9a81d77f54"},{"code":"(fn [keyy mapp] (and (contains? mapp keyy) (nil? (mapp keyy))))","problem":134,"user":"52e253fce4b09f7907dd1432"},{"problem":134,"code":"(fn [x coll] (= (x coll true) nil))","user":"5919d209e4b09b4ee5954bcc"},{"code":"#(if (= nil (%1 %2 0)) true false)","problem":134,"user":"50782c80e4b0fc74642bff65"},{"problem":134,"code":"(fn [key, map]\n  (and (= nil (key map)) (contains? map key)))","user":"5cf938a5e4b0b71b1d808a90"},{"problem":134,"code":"(fn myfun [k m] (if (and (contains? m k) (= nil (k m)) ) true false ))","user":"58622733e4b0f14aab7c8803"},{"code":"#(if (and (some #{%} (keys %2)) (nil? (% %2))) true false)","problem":134,"user":"4db2cd84535df7e46ed9b6c6"},{"problem":134,"code":"#(if (contains? %2 %1)\n    (= (%2 %1) nil)\n     false)","user":"574f1c24e4b02ea114799255"},{"problem":134,"code":"(fn [key m] \n\t(if (and (contains? m key)  (= nil (key m)))\n\t\ttrue false))","user":"554efd47e4b00713264bd99b"},{"code":"#(if (contains? %2 %1) (not (%1 %2)) false)","problem":134,"user":"4ebfdfda535dfed6da9c6d9e"},{"code":"(fn [x y] \n  (and \n   (not (nil? (find y x))) \n   (nil? (val (find y x)))))","problem":134,"user":"5154b16be4b0179c5115f4e2"},{"code":"(fn [x y] (if (contains? y x) (nil? (y x)) (contains? y x)))","problem":134,"user":"514d398ee4b019235f6c0583"},{"problem":134,"code":"(fn [i j] (if (contains? j i)\n    (= (j i) nil)\n    false))","user":"5e9d1c75e4b0157ca9664801"},{"code":"(fn [v m] (and (contains? m v) (nil? (get m v))))","problem":134,"user":"5165a235e4b079ad97ec44ac"},{"problem":134,"code":"#(if (nil? (get %2 %1 \"not present\")) true false)","user":"549eb44fe4b0f3d1d8e70fa6"},{"code":"(fn [x y]  (and (contains? y x) (nil? (y x))))","problem":134,"user":"528ad4cce4b0239c8a67ae84"},{"problem":134,"code":"#(nil? (%1 %2 :z))","user":"5b81139fe4b047b03b203782"},{"problem":134,"code":"(fn [ke ma] (and (contains? ma ke)(= nil (ke ma))))","user":"5c71de4ce4b0fca0c162279e"},{"problem":134,"code":"#(do (and (contains? %2 %1) (nil? (%1 %2))))","user":"5875cb95e4b01531a375ea73"},{"problem":134,"code":"(fn [key map]\n  (if-let [k (-> map keys set (some [key]))]\n    (nil? (map k))\n    false))","user":"5256c4c1e4b0541d1855ba36"},{"problem":134,"code":"(fn [x m]\n  (if (contains? m x)\n    (if (= (m x) nil)\n      true\n      false)\n    false))","user":"5756e218e4b02ea1147992e5"},{"code":"(fn [k m] (nil? (k m -1)))","problem":134,"user":"4f2861eee4b0d6649770a017"},{"problem":134,"code":"#(if (contains?  %2 %1)\n   (nil? (%1 %2))\n   false)","user":"59a1fd6be4b066c664927d1b"},{"problem":134,"code":"(fn [k coll] \n  (and \n   (contains? coll k) \n   (nil? (coll k))))","user":"559bdf16e4b066d22e731f5a"},{"problem":134,"code":"(fn check-val [k coll] (if (contains? coll k) (= (get coll k) nil) false))","user":"56f57481e4b046a417f92072"},{"code":"(fn [x map]\n  \t\t(nil? (x map false)))","problem":134,"user":"4f4daa4ae4b03ad3f0c10cac"},{"problem":134,"code":"(fn [key mp]\n   (if (and (contains? mp key) (= nil (mp key))) \n     \ttrue \n     \tfalse)\n )","user":"5e481209e4b043cd24807a39"},{"problem":134,"code":"#(if(contains? %2 %) (nil? (% %2)) false)","user":"58631579e4b0f14aab7c8817"},{"problem":134,"code":"(fn foo [k, m] \n  (and \n   (contains? m k) \n   (nil? (m k))))","user":"5a55f38ae4b05d388ecb6c44"},{"problem":134,"code":"(fn [word coll] (and (contains? coll word) (nil? (word coll))))","user":"53b41d17e4b047364c0444b1"},{"code":"(fn [x,y](and (contains? y,x) (= (get y,x) nil)))","problem":134,"user":"53266a93e4b09d4e7a9b54ee"},{"code":"(fn [e map]\n  (if (contains? map e) (nil? (e map)) false))","problem":134,"user":"51e595a6e4b0efabf93c02d8"},{"problem":134,"code":"(fn [x y] (if (= x :c) false (= nil (x y)) ) )","user":"557e8326e4b05c286339e0d7"},{"code":"#(= nil (get %2 % false))","problem":134,"user":"4ffb38e8e4b0678c553fc3c6"},{"code":"(fn [k m]\n  (if (contains? m k)\n  (= nil (k m))\nfalse))","problem":134,"user":"4f287f96e4b0d6649770a018"},{"problem":134,"code":"(fn [key coll]\n    (nil? (get coll key true)))","user":"585aad0be4b0f14aab7c8753"},{"code":"#(if (contains? %2 %1)\n    (= nil (%1 %2))\n    false)","problem":134,"user":"4fc3b0d4e4b081705acca343"},{"problem":134,"code":"(fn [k m] \n  (and \n   (not (nil? (find m k)))\n   (nil? (k m))))","user":"5e032281e4b0a607a9a45d54"},{"code":"#(and (contains? %2 (keyword %1)) (= nil (%1 %2)))","problem":134,"user":"4fe97adde4b0547ebccb245e"},{"code":"#(let [x (get %2 %1 true)] (nil? x))","problem":134,"user":"535920b2e4b04ce2eb3ed294"},{"problem":134,"code":"(fn [passed-key passed-map]\n           (if (and (contains? passed-map passed-key)\n                    (= nil (passed-key passed-map))) true false))","user":"5422c959e4b01498b1a71ac7"},{"problem":134,"code":"(fn [k m]\n  (if (and (contains? m k) (nil? (k m)))\n    true\n    false)\n  )","user":"579fa28fe4b0264b925669fb"},{"code":"#(if (some #{%1} (keys %2)) (= nil (%2 %1)) false)","problem":134,"user":"52727d52e4b03e8d9a4a7439"},{"problem":134,"code":"(fn \n  [some-key\n   some-map]\n\t(= (some-map some-key true) nil))","user":"5749ab6ae4b009280f9f2b9f"},{"problem":134,"code":"(fn [k, m] (if (contains? m k)\n            (nil? (m k))\n            false ))","user":"5bf31833e4b0a6d31fed218a"},{"problem":134,"code":"(fn [x y] (if (contains? y x)\n              (= nil (x y))\n            false))","user":"55c3c1b0e4b0e31453f6498c"},{"code":"(fn [k m]\n    (= (find m k) [k nil])\n)","problem":134,"user":"511d4a52e4b022853b0e07a1"},{"code":"(fn [%1 %2] (and (contains? %2 %1) (nil? (get %2 %1))))","problem":134,"user":"4fa2fa5ee4b081705acca186"},{"problem":134,"code":"(fn [x y]\n  (if (contains? y x)\n   (= (y x) nil)\n   false))","user":"57480c4de4b009280f9f2b7e"},{"problem":134,"code":"(fn [key, hash] (= nil (key hash 1)))","user":"59759a9ce4b01722bebd4cca"},{"problem":134,"code":"(fn aaa[ky mp](cond\n                  (contains? mp ky) (= nil (ky mp))\n                  :else false))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":134,"code":"(fn [k maps] (if (contains? maps k) (if (= (get maps k) nil) true false) false))","user":"5dcd182ae4b0b296f82db5a9"},{"code":"(fn [key map]\n  (if (= nil (get map key \"\"))\n    true\n    false))","problem":134,"user":"50611456e4b0dc10a69545a5"},{"problem":134,"code":"(fn x [k m] (and (contains? m k)(nil? (k m))))","user":"537393b2e4b06d7f452d9e14"},{"code":"#(= (= nil (%1 %2)) (contains? %2 %1))","problem":134,"user":"4fcc70b3e4b0ee37620e1862"},{"problem":134,"code":"(fn check-nil-key [key map] \n  (if (contains? map key) \n    (= (key map) nil) \n    false))","user":"5c2dfca3e4b0d62ef62d9efc"},{"code":"(fn [x y] ( and (contains? y x) (nil? (y x))))","problem":134,"user":"504ea40ee4b069badc5a33bf"},{"problem":134,"code":"(fn [key coll] (nil? (key coll :not-found)))","user":"54856d54e4b0e286459a11aa"},{"code":"#(= nil (% %2 true))","problem":134,"user":"502bb7c0e4b0194ad32ea1a3"},{"code":"(fn [k m] (if (nil? (get m k true)) true false))","problem":134,"user":"4f03bd9d535dcb61093f6b5b"},{"problem":134,"code":"(fn [a coll]\n  (and (contains? coll a) (nil? (get coll a))))","user":"5a5dbe9de4b0512ff01cd92b"},{"problem":134,"code":"(fn [k m]\n  (if (contains? m k)\n  \t(nil? (k m))\n    false))","user":"583e02fce4b089d5ab817da5"},{"problem":134,"code":"#(nil? (get %2 %1 \"not here\"))","user":"54d81ddde4b0a52adc2e2036"},{"problem":134,"code":"(fn [mkey data] (let [[k v] (find data mkey)] (and (not (nil? k)) (nil? v))))","user":"52da20c7e4b09f7907dd13b3"},{"problem":134,"code":"(fn [key1 seq1] (if (contains? seq1 key1)\n                   (nil? (key1 seq1))\n                   false))","user":"609980fce4b00e9e6653c408"},{"problem":134,"code":"(fn [chave mapa] \n  (and (true? (contains? mapa chave)) (nil? (.get mapa chave))))","user":"58694f69e4b0f14aab7c889f"},{"code":"(fn [k m] (if (contains? m k) (nil? (k m)) false))","problem":134,"user":"4faac363e4b081705acca200"},{"problem":134,"code":"(fn [k m] \n  (and (contains? m k) (= (k m) nil)))","user":"56bb652ae4b0f26550335953"},{"problem":134,"code":"(fn [k col] (if (contains? col k) (nil? (k col)) false))","user":"5ea970d1e4b00a66d4a951c6"},{"problem":134,"code":"(fn nilkey [k m]\n  (and (contains? m k) (nil? (m k))))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"(fn [keyX mapX] (and (contains? mapX keyX) (= nil (keyX mapX))))","problem":134,"user":"53906b89e4b0b51d73faae99"},{"problem":134,"code":"#(if (contains? %2 %1)\n  (nil? (%1 %2))\n  false)","user":"5ece3905e4b016b56eae059a"},{"code":"(fn [key map]  \r\n  (and (contains? map key)\r\n\t\r\n (nil? (map key))))","problem":134,"user":"4fa82205e4b081705acca1cf"},{"problem":134,"code":"(fn [key, coll] (nil? (get coll key \"missing\")))","user":"5376190de4b06839e8705e1c"},{"code":"#(and  (contains? %2 %1) (nil? (%2 %1)))","problem":134,"user":"4e9b22e2535dbda64a6f6b74"},{"code":"(fn f [k m]\n  (letfn [(cont? [x l]\n                 (loop [i (first l)\n                        rst (rest l)]\n                   (cond\n                    (nil? i) false\n                    (= i x) true\n                    true (recur (first rst) (rest rst)))))]\n    (and (cont? k (keys m)) (nil? (k m)))))","problem":134,"user":"52d7b0ade4b09f7907dd137c"},{"code":"#(= true  (contains? %2 %1) (= nil (get %2 %1)))","problem":134,"user":"4f8bf8eae4b02e764a0a5187"},{"problem":134,"code":"#(and (contains? %2 %1 ) (= nil (get %2 %1)))","user":"55b118fae4b002ce9d5cbc2d"},{"problem":134,"code":"(fn [ x input_map ]\n    (if (contains? input_map x)\n      (if (nil? (get input_map x)) \n        true\n        false\n        )\n      false\n      )\n   )","user":"5cf7215ce4b0b71b1d808a67"},{"problem":134,"code":"(fn [pkey parammap] (if (and (contains? parammap pkey) (= (get parammap pkey) nil)) true false))","user":"5c63fc80e4b0fca0c162266d"},{"problem":134,"code":"(fn [k m] \n  (if (contains? m k)\n\t(nil? (get m k)) false))","user":"573ddfc2e4b05c31a32c081b"},{"code":"(fn [key map] \n  \n    (and (contains? map key) (= (get  map key) nil))\n  \n)","problem":134,"user":"4edf95a8535d10e5ff6f5342"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k) \n       (if (= (k m) nil)\n         true\n         false)))","user":"569aca1ee4b0542e1f8d144d"},{"problem":134,"code":"(fn [v m]\n  (= nil (get m v ::notfound)))","user":"55934bebe4b0c79f6e1db93b"},{"code":"(fn [k m] (and (not (nil? (find m k)))\n               (nil? (m k))))","problem":134,"user":"4f567cdbe4b0a7574ea71824"},{"problem":134,"code":"(fn [k m] \n  (and\n   (contains? m k)\n   (= (m k) nil)\n  )\n)","user":"55a59ebae4b0acc240e3154d"},{"problem":134,"code":"(fn [k coll]\n  (and (contains? coll k) (= (k coll) nil)))","user":"53c9d29ae4b00fb29b2212c2"},{"code":"(fn[key map] (cond (= nil (find map key)) false\n                   (= nil (get map key)) true \n                   :else false\n               )\n)","problem":134,"user":"537b64eee4b06839e8705e68"},{"problem":134,"code":"(fn [k m]     (and  (nil?(get m k)) (contains? m k))  )","user":"569ce6fee4b0542e1f8d146c"},{"problem":134,"code":"(fn [arg1 arg2] \n  (if (contains? arg2 arg1)\n    (nil? (arg1 arg2))\n    false\n    )\n  )","user":"5ae71f14e4b0837691e92ca7"},{"code":"(fn nil-value? [k m] (and (contains? m k) (nil? (get m k))))","problem":134,"user":"4f65140ee4b07046d9f4ef3b"},{"problem":134,"code":"(fn [k h] (nil? (get h k true)))","user":"598e7998e4b02b9968b84d34"},{"problem":134,"code":"(fn [k, m] \n\t(and (contains? m k) (nil? (get m k))))","user":"5caa5e42e4b048ec896c5c35"},{"problem":134,"code":"#(false? (boolean (% %2 true)))","user":"5627444fe4b00e49c7cb47cd"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k) (not (k m))))","user":"55f8fd70e4b03cbcff9738bc"},{"problem":134,"code":"(fn [k l](= (get l k 22) nil))","user":"53bd65abe4b0d9a98559a6ce"},{"code":"(fn [a b]\n  (if\n   (and (contains? b a)\n        (= (a b) nil))\n    true\n    false))","problem":134,"user":"4e6961f0535d8ccf87e9fe9b"},{"problem":134,"code":"(fn [key map] (= nil (get map key \"falsey\")))","user":"5af361d4e4b0cc2b61a3bc83"},{"code":"(fn [key map] \n  (if (contains? map key) (nil? (get map key)) false))","problem":134,"user":"4f30aee5e4b0d6649770a07d"},{"problem":134,"code":"#(and \n    (contains? %2 %1) \n    (= (%1 %2) nil))","user":"585e6aabe4b0f14aab7c87b1"},{"problem":134,"code":"(fn h [a b] (nil? (a b 0)))","user":"5f1eec36e4b0f565ad998274"},{"code":"(fn [keyx mapx]\n  (let [check (get mapx keyx \"not found\")]\n    (if (nil? check)\n      true\n      false)\n ); let\n); fn","problem":134,"user":"4f601623e4b0defedf855fa3"},{"problem":134,"code":"(fn [chave mapa]\n  (if (contains? mapa chave)\n      (nil? (chave mapa))\n      false))","user":"58a0ac0de4b02bd94d917e9c"},{"code":"(fn [k m]\n(and (contains? m k)\n(nil? (m k))))","problem":134,"user":"4f4bdf9de4b03ad3f0c10c80"},{"problem":134,"code":"(fn [k m] (and\n           (contains? m k)\n           (nil? (k m))))","user":"598ff38ce4b0fcebec4de869"},{"code":"#(= (%1 %2 :n) nil)","problem":134,"user":"534941d1e4b084c2834f4a60"},{"code":"#(not (get %2 % true))","problem":134,"user":"4dcd818e535d5973398f929d"},{"problem":134,"code":"(fn [theKey theMap]\n  (if (contains? theMap theKey)\n       (nil? (get theMap theKey))\n        false))","user":"5ba6d337e4b0a20761a23414"},{"problem":134,"code":"#(nil? (% %2 :nope))","user":"58461304e4b089d5ab817e81"},{"code":"(fn soln [ky mm]\n  (let [rtn (some #{ky} (keys mm))]\n  (if (and (= ky rtn) (nil? (mm rtn)))\n    true\n    false\n    )))","problem":134,"user":"4ec5b713535d6d7199dd36b2"},{"code":"(fn [x y] (and (contains? y x) (nil? (x y))))","problem":134,"user":"4e9ff8d0535d7eef3080729c"},{"code":"(fn [ky coll] (= (nil? (ky coll)) (contains? coll ky)) )","problem":134,"user":"5117caa0e4b0e0897831a60d"},{"code":"(fn [a b] (and (nil? (a b)) (contains? b a)))","problem":134,"user":"51dabb76e4b02ceefd947772"},{"problem":134,"code":"#(if (and (contains? %2 %1) (nil? (%1 %2)))\n   true\n   false)","user":"53da3fcde4b0e771c3025497"},{"code":"#(if (and (contains? %2 %1) (= (%2 %1) nil)) true false)","problem":134,"user":"5342f075e4b084c2834f4a14"},{"problem":134,"code":"(fn [k m]\n  (nil? (get m k \"non-existent\")))","user":"591770dae4b09b4ee5954b9c"},{"problem":134,"code":"(fn [a l] (and (contains? l a) (nil? (get l a))))","user":"566d8c43e4b0a866af6896cc"},{"code":"(fn [k m]\n  (= [k nil] (find m k)))","problem":134,"user":"51000111e4b00d7ad4cab15e"},{"problem":134,"code":"(fn [key m]\n  (nil? (get m key :not-found)))","user":"543f854fe4b032a45b86935b"},{"problem":134,"code":"(fn [k mp]\n  (if (contains? mp  k)\n    (not (mp k))\n    false))","user":"581a5fdbe4b0e114eb51a002"},{"code":"#(cond (and (= nil (% %2)) (contains? %2 %)) true :else false)","problem":134,"user":"4fea2de5e4b0140c20fb9bfe"},{"problem":134,"code":"(fn isNil? [k m]\n  (nil? (get m k true)))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":134,"code":"(fn [key map] (and (not (= (find map key) nil)) (= (map key) nil)))","user":"56c55fbce4b05cc29241eea5"},{"problem":134,"code":"(fn [k m] (if (k m) false (= (count m) (count (assoc m k nil)))))","user":"54903056e4b0b312c081ff2e"},{"code":"(fn [key coll] \n  (if (and (contains? coll key) (nil? (get coll key)))\n    true\n    false\n  )\n)","problem":134,"user":"50b32f0fe4b03ea880433569"},{"problem":134,"code":"(fn [k m] \n  (nil? (get  m k :x))\n  )","user":"583048d9e4b051871117c007"},{"problem":134,"code":"(fn [f c] (if (and (contains? c f) (nil? (f c))) true false ))","user":"56db90d4e4b0ea9b8538f80d"},{"problem":134,"code":"(fn [foo bar] (nil? (bar foo 1)))","user":"5437d6c5e4b032a45b86930b"},{"problem":134,"code":"(fn [key map]\n  (= (get map key :not-here) nil))","user":"5f05ef21e4b0cf489e8d7f4d"},{"code":"(fn[k mp]\n\t(if(contains? mp k)\n\t\t(if(nil? (k mp))\n\t\t\ttrue\n\t\t\tfalse)\n\t\tfalse))","problem":134,"user":"529952a4e4b02ebb4ef75081"},{"problem":134,"code":"(fn [m k]\n  (nil? (get k m false)))","user":"578e5750e4b0ebec4cfb7581"},{"code":"(fn [k m]\n  (and (contains? m k) (= (get m k) nil))\n  )","problem":134,"user":"52586d24e4b0cb4875a45cb0"},{"problem":134,"code":"(fn [k m] \n    (if (= (find m k) nil)\n      false\n    (nil? (get m k))))","user":"5b985983e4b0c0b3ffbd4aaf"},{"problem":134,"code":"ns","user":"602e6adce4b0d5df2af22282"},{"problem":134,"code":"(fn a-nil-key [key map]\n  (if (contains? map key)\n    (= (key map) nil)\n    false))","user":"58b18ba0e4b0ebc645576cfa"},{"code":"#(and (not (get %2 %1)) (contains? %2 %1))","problem":134,"user":"4f037310535dcb61093f6ad6"},{"problem":134,"code":"(fn [the-key the-map]\n   (if (contains? the-map the-key)\n     (if (= nil (get the-map the-key))\n       true\n       false)\n     false))","user":"5d6eaa58e4b04d129b00f2cd"},{"code":"#(= %2 (assoc %2 %1 nil))","problem":134,"user":"4f410b63e4b0e243712b1fc5"},{"code":"#(if (contains? %2 %) (nil? (% %2)) false)","problem":134,"user":"4e7ec984535db169f9c7971c"},{"problem":134,"code":"#(= (get %2 %1 \"lol wut am i doing\") nil)","user":"4f03e60d535dcb61093f6b7a"},{"code":"#(if (and (contains? %2 %) (= nil (% %2))) true false)","problem":134,"user":"5210ac52e4b080a8d9b9d63e"},{"code":"(fn [key m] \n          (if (and (contains? m key) (= (get m key) nil))\n              true\n              false))","problem":134,"user":"4f2f7e87e4b0d6649770a06f"},{"problem":134,"code":"(fn nilequal\n  [k m]\n  (and (contains? m k) (= nil (k m))))","user":"547a714ae4b0c51c1f4d72cc"},{"problem":134,"code":"(fn [k m]\n   (if (contains? m k)\n     (= (m k) nil)\n     false))","user":"5cda0e26e4b05ee0cb311710"},{"code":"(fn [k,m] (and (contains? m k) (->> k (get m) (nil?))))","problem":134,"user":"4f030bb4535dcb61093f6a4a"},{"problem":134,"code":"(fn a ([key, values] (nil? (key values 1))))","user":"59b1a1b2e4b0e1f4e384c8eb"},{"code":"(fn [k m]\n  (true? (and ((set (keys m)) k) (nil? (m k)))))","problem":134,"user":"527cd633e4b0757a1b17136f"},{"problem":134,"code":"#(nil? (if (contains? %2 %1) (%1 %2) false ))","user":"553bda0de4b09218d5f4500b"},{"code":"(fn [k m] (and (not (nil? (find m k))) (nil? (k m))))","problem":134,"user":"50e135f4e4b084616e11c667"},{"problem":134,"code":"(fn bala [x y] \n  (if (contains? y x)\n  (= nil (x y))\n  false))","user":"5643ba10e4b0018b46ad8bff"},{"code":"(fn [k m]\n  (if (= (m k :not) :not)\n    false\n  \t(= (m k) nil)))","problem":134,"user":"524ad140e4b09eba1c0223a9"},{"problem":134,"code":"#(if (= (contains? %2 %1) (nil? (get %2 %1)))\n   true \n   false)","user":"5d0902e8e4b0cc9c91588211"},{"problem":134,"code":"(fn [k m] ( if (contains? m k)\n            (= nil (m k))\n            false))","user":"552102bde4b08d5046aa8a67"},{"code":"(fn\n  [k m]\n  (if (and (contains? m k) (= (m k) nil)) true false))","problem":134,"user":"529dd5a4e4b04e0c58e87b82"},{"problem":134,"code":"(fn moo \n  [x mp]\n  (if (and (contains? mp x) (= nil (x mp)))\n    true\n    false))","user":"5ed81965e4b016b56eae05ed"},{"problem":134,"code":"(fn test [x coll]\n  (and (= (x coll) nil)\n       (contains? coll x)))","user":"579332c2e4b0e215f87e8452"},{"code":"(fn [x coll] (if (contains? coll x) (if (= nil (x coll)) true false) false ))","problem":134,"user":"513ca934e4b0b86ece9f3228"},{"problem":134,"code":"(fn [x y] (if (contains? y x) (nil? (y x)) false))","user":"5703b65be4b08d47c97781f6"},{"code":"#(if-let [res (find %2 %1)]\n   (nil? (res 1))\n   false)","problem":134,"user":"526fc549e4b03e8d9a4a7380"},{"code":"(fn [a b]\n  (if (contains? b a)\n      (nil? (a b))\n      false))","problem":134,"user":"4ed60c9c535d10e5ff6f52dd"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (= nil (get m k))\n  false))","problem":134,"user":"4f8c50f9e4b02e764a0a5195"},{"problem":134,"code":"(fn [key value]\n  (and (contains? value key) (nil? (key value))))","user":"58ee2c14e4b056aecfd47d9e"},{"code":"#(nil? (get %2 % \"no\"))","problem":134,"user":"51f0ade4e4b0274c496158d9"},{"code":"(fn [k m]\n  (if (contains? m k)\n    (if (= (m k) nil)\n      true\n      false)\n    false))","problem":134,"user":"52cefb7ee4b07d0d72b27397"},{"code":"(fn [key map] (if (and (nil? (key map)) (contains? map key))true false))","problem":134,"user":"4fb86dc9e4b081705acca2d8"},{"problem":134,"code":";(fn[x y] (nil? (x y 10)))\n\n;#(nil?(get %2 % 0))\n\n#(nil?(% %2 0))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":134,"code":"(fn [v l]\n  (if (and (contains? l v) (= (v l) nil)) true\n    false))","user":"5c7d947be4b0d597f478cab6"},{"problem":134,"code":"(fn [c m] (and (contains? m c) (nil? (c m))))","user":"5ed6c4ede4b016b56eae05e3"},{"code":"(fn [key m] (nil? (get m key :b)))","problem":134,"user":"4ec60eac535d6d7199dd36c1"},{"problem":134,"code":"(fn [keyArg mapArg]\n  (and \n     (contains? mapArg (keyword keyArg)) \n     (nil? (get mapArg (keyword keyArg)))\n  )\n)","user":"53765e1ae4b06839e8705e23"},{"code":"(fn [k m]\n  (if (and (contains? m k) (nil? (get m k)))\n    true\n    false))","problem":134,"user":"515bed3be4b0388ca8ca1525"},{"problem":134,"code":"#(and (nil? (get %2 %1))(contains? %2 %1))","user":"52c7c40be4b0c2d177d62125"},{"problem":134,"code":"(fn [the_key the_map]\n (nil?\n  (if (contains? the_map the_key)\n  (the_map the_key)\n  \"value\"\n  )\n  )\n)","user":"60c7c23be4b0e0fa5f1b42eb"},{"problem":134,"code":"(fn [k m] (if (get m k :nil) false true))","user":"551b329ae4b07993ea3788cf"},{"code":"(fn [ key map] (if (contains? map key) \n  (= nil (get map key))(= 1 2)))","problem":134,"user":"4f5d0f25e4b0030a34fb2b33"},{"problem":134,"code":"(fn [a-key a-map]\n   (if (contains? a-map a-key)\n     (nil? (a-key a-map))\n     false))","user":"53729c50e4b06d7f452d9dfe"},{"code":"(fn [ x y ] (if (nil? (get y x \"missing\")) true false) )","problem":134,"user":"51a7f74be4b08d8ec191b802"},{"code":"(fn [k m] (if (= (get m k 0) nil) true false))","problem":134,"user":"4fc5ca5ee4b0ee37620e17fe"},{"problem":134,"code":"(fn[k coll]\n(if (contains? coll k)\n  (if(= (get coll k) nil)\n     true\n     false)false))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"#(= (get %2 %1 :null) nil)","problem":134,"user":"4fba0877e4b081705acca2dd"},{"code":"#(if (contains? %2 %)\n       (nil? (% %2))\n   \t\tfalse)","problem":134,"user":"4e6e3aac535d5021c1a89603"},{"problem":134,"code":"(fn [key, map] (nil? (get map key \"missing\")))","user":"5ab126cde4b073f1774425b9"},{"problem":134,"code":"(fn xxx [k m]\n  (and (contains? m k) (nil? (m k))))","user":"59dec79ee4b01968742fed81"},{"problem":134,"code":"(fn [k m]\n(and\n    (not\n     \t(nil?\n         \t((set (keys m)) k)\n         )\n     )\n \t(nil? (k m))\n ))","user":"5f9491cbe4b0715f5002d7bf"},{"code":"#(if (contains? %2 %1) (if (= (%1 %2) nil) true false) false )","problem":134,"user":"4ecd0d84535d23f036227701"},{"problem":134,"code":"#(and (contains? %2 %1) (->>%1 %2 nil?) )","user":"551a380fe4b091ff45eda994"},{"problem":134,"code":"#(= (%2 %1 1) nil)","user":"566b8946e4b0a866af6896b0"},{"code":"#(and (contains?  %2 %1) (nil? (%1 %2)))","problem":134,"user":"4f066916535dcb61093f6c10"},{"problem":134,"code":"(fn [key map] \n  (if (and (contains? map key) (nil? (key map)))\n    true\n    false))","user":"567072fbe4b0a866af6896f3"},{"code":"#(and (contains?%2 %1) (nil?(%1 %2)))","problem":134,"user":"4fda0678e4b05e33b9224f44"},{"problem":134,"code":"(fn [x y] (and (if-not (get y x) true false) (= clojure.lang.MapEntry (class (find y x)))))","user":"4fe5895be4b0e8f79898fec6"},{"problem":134,"code":"(fn [k coll] (if (contains? coll k) \n             (nil? (coll k)) \n             false ))","user":"566b7a77e4b0a866af6896af"},{"code":"(fn [x y] (nil? (get y x true)))","problem":134,"user":"4f384abde4b0e243712b1eda"},{"problem":134,"code":"(fn [key m] (and (contains? m key) (= (m key) nil)))","user":"5376f0d0e4b06839e8705e2c"},{"code":"(fn [key map]   \n    (and (contains? map key) (nil? (map key))))","problem":134,"user":"4e57afc5535d8a8b8723a288"},{"code":"(fn [k h] (and (contains? h k) (= nil (last (find h k)))))","problem":134,"user":"515624efe4b04360f2428e5f"},{"problem":134,"code":";(fn [k v] (when-not (get v k) true))\n\n(fn [k v] (and (contains? v k) (nil? (k v))))","user":"5a4e3166e4b05d388ecb6bbb"},{"problem":134,"code":"(fn [k m]  (and (not (nil? (find m k))) (= nil (get m k))))","user":"54edcf96e4b024c67c0cf866"},{"code":"(fn getKey [x y] (if (and (contains? y x) (= (get y x) nil)) true false))","problem":134,"user":"52d4acc8e4b09f7907dd1333"},{"problem":134,"code":";(fn [k m] (and (contains? m k) (nil? (m k))))\n#(not (%2 % 0))","user":"57035ccfe4b08d47c97781ef"},{"problem":134,"code":"(fn [k m]\n  (if (nil? (get m k false)) true\n    false))","user":"59cd351ee4b0ef0a1e9b5b35"},{"problem":134,"code":"(fn [key seq] (if (nil? (get seq key key)) true false))","user":"5e51a268e4b027a2e10ac0d1"},{"problem":134,"code":"(fn foo\n  [parm1 parm2]\n  (nil? (get parm2 parm1 \"\"))\n  )","user":"598d22b1e4b02b9968b84d1a"},{"problem":134,"code":"(fn [k m]  (and (nil? (k m))\n                  (contains? m k)))","user":"53623eaee4b0243289761e4f"},{"problem":134,"code":"(fn [k m]\n  (and (= nil (k m)) (contains? m k)))","user":"542c0708e4b0dad94371f29b"},{"problem":134,"code":"(fn\n  [key map]\n  (if (and (= (get map key) nil) (contains? map key))\n    true\n    false)\n  )","user":"5772ddb0e4b0979f896515d4"},{"problem":134,"code":"(fn getNil\n  [k m]\n  (nil? (get m k false)))","user":"5e9636fee4b0fbed045a3816"},{"problem":134,"code":"(fn [sim coll]\n  (if (nil? (get coll sim \"\")) true false)\n  )","user":"5510d948e4b06e50f9beb18d"},{"problem":134,"code":"(fn [el lst]\n  (and\n   \t(= nil (el lst))\n   \t(= (count lst)\n       (count (conj {el nil} lst)))))","user":"55527251e4b0deb715856df3"},{"problem":134,"code":"(fn [k m] (and (contains? m k)\n              (nil? (m k))))","user":"5e89b832e4b0cb0169546315"},{"problem":134,"code":"(fn foo [key items] (and (nil? (key items)) (contains? (set (keys items)) key)))","user":"56020b3fe4b04bb52996e19b"},{"problem":134,"code":"(fn [k m] \n  (nil? (get m k :fuck)))","user":"56db8fbde4b0ea9b8538f80c"},{"code":"#(nil? (get %2 % \"foo\"))","problem":134,"user":"4f611e0ee4b0defedf855fb8"},{"problem":134,"code":"(fn [k, m] (= (get m k \"missing\") nil))","user":"57064231e4b0b0fb43fd067a"},{"problem":134,"code":"#(if (and (contains? %2 %) (= (% %2) nil)) \n   true\n   false)","user":"5579bc24e4b05c286339e098"},{"code":"#(\n    if (contains? %2 %1)\n      (= nil (%2 %1))\n      (= 1 2)\n    \n)","problem":134,"user":"4e94a900535dbda64a6f6b18"},{"problem":134,"code":"(fn [mkey mymap]\n  (if (contains? mymap mkey)\n    (nil? (mkey mymap))\n    false))","user":"56f1b558e4b04a395b9a049a"},{"code":"(fn [k,s] (= (get s k \"missing\") nil))","problem":134,"user":"52299d14e4b04c906c9c6a7e"},{"problem":134,"code":"(fn [key map] (if (= (map key 1) nil) true false))","user":"545d911be4b01be26fd74670"},{"problem":134,"code":"(fn [key seq] (and (contains? seq key) (= (key seq) nil)))","user":"51376d99e4b04059df19f302"},{"problem":134,"code":"#(= (get %2 %1 \"m\") nil)","user":"54730420e4b094393f72dd7c"},{"code":"#(nil? (get (merge {%1 true} %2) %1))","problem":134,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"(fn [k m]\n  (if (nil? (get m k 1)) true false))","problem":134,"user":"5030f16fe4b05b7df5a0b84b"},{"code":"#(nil? (%2 %1 0))","problem":134,"user":"4e5fe31a535d8ccf87e9fe50"},{"code":"(fn [key hash] \n  (if (contains? hash key)\n      (= (key hash) nil)\n      false))","problem":134,"user":"4f29d9abe4b0d6649770a034"},{"problem":134,"code":"#(and(contains? %2 %1)(nil? (%1 %2)))","user":"52419e78e4b076e5d3121f21"},{"code":"#(if (and (contains? %2 %1)\n              (= (%1 %2) nil)) true false)","problem":134,"user":"5249a506e4b05ef8e38e646d"},{"code":"(fn null-value [k m]\n  (if (contains? m k)\n    (if (= (get m k) nil)\n      true\n      false)\n    false)\n  )","problem":134,"user":"512a8ef7e4b0ff5c4bc1f99e"},{"problem":134,"code":"(fn [idx coll] \n  (and\n   (contains? coll idx)\n   (nil? (idx coll))))","user":"5e3f2720e4b01d43a70e8e32"},{"code":"#(not (get %2 %1 1))","problem":134,"user":"4ee624f8535d93acb0a66855"},{"problem":134,"code":"#(if-let [[k v] (find %2 %1)] (= v nil) false)","user":"5482150ae4b0e286459a117b"},{"problem":134,"code":"(fn is_key_nil?\n  [key map_content]\n  (if (and (contains? map_content key) (= nil (map_content key)))\n    true\n    false))","user":"5f4b6433e4b0102c75033953"},{"problem":134,"code":"(comp #(and (boolean %) (nil? (val %))) #(find %2 %1))","user":"521ed5b4e4b0e6c71e0c0bc0"},{"problem":134,"code":";#(if(contains? %2 %1)(= (%2 %1) nil) false)\n#(nil? (get %2 %1 \" \"))","user":"57ef7393e4b0bfb2137f5bd6"},{"code":"#(= (get %2 % false) nil)","problem":134,"user":"4f10175e535d64f603146411"},{"code":"#(nil? (% %2 -))","problem":134,"user":"4e6e4210535d5021c1a89606"},{"problem":134,"code":"#(nil? (get %2 % \"not-found\"))","user":"56441634e4b0018b46ad8c08"},{"code":"(fn [si lst]\n   (if (some #{si} (keys lst))\n      (= (get lst si) nil )\n     false )\n\n   )","problem":134,"user":"5124619ae4b02c3f2a072ccd"},{"problem":134,"code":"#(and (not( empty? (find %2 %1))) (= nil (%1 %2)))","user":"59ef5280e4b0966464fe6a2b"},{"code":"(fn [k m]\n  (let [entry (find m k)]\n   (and (not (nil? entry)) (nil? (val entry)))\n))","problem":134,"user":"4fcebce4e4b03432b189f404"},{"code":"(fn [key, map]\n                (and (\n                      nil? (get map key )\n                     )\n                     (\n                       contains? map key\n                     )\n                 ) \n          )","problem":134,"user":"4f03e7b5535dcb61093f6b7d"},{"problem":134,"code":"#(nil?(get %2 %1 \"win\"))","user":"553e2cc0e4b0a04f792994e9"},{"code":"#(= nil (get %2 % \"\"))","problem":134,"user":"4f8aa1c1e4b02e764a0a516e"},{"problem":134,"code":"#(nil? (%2 %1\n           false))","user":"5f724f55e4b02876ed9fd089"},{"problem":134,"code":"(fn [tkey tmap] (and (contains? tmap tkey) (nil? (get tmap tkey))))","user":"547dc4c7e4b0c51c1f4d72f8"},{"code":"(fn iff-key[k m] (and (contains? m k) (nil? (k m)))\n                     )","problem":134,"user":"52a1edd6e4b04e0c58e87be4"},{"code":"(fn [k m] (= nil (get  m k true)))","problem":134,"user":"5349ac2be4b084c2834f4a67"},{"problem":134,"code":"#(if  (get %2 %1 true)\n               false\n               true)","user":"56349008e4b0bfe05bf117bd"},{"problem":134,"code":"(fn has_key_and_is_nil [my_key my_map]\n  (and\n   (contains? my_map my_key)\n   (= nil (my_key my_map))))","user":"547e3846e4b0c51c1f4d7302"},{"problem":134,"code":"(fn [idx m] (and (contains? m idx) (nil? (m idx))))","user":"53e1e1f1e4b0d874e779ae5e"},{"code":"(fn [nkey nmap]\n  (if (and\n        (not (empty? (select-keys nmap [nkey])))\n        (= nil (nkey nmap)))\n    true\n    false))","problem":134,"user":"4e9a3a03535dbda64a6f6b70"},{"problem":134,"code":"(fn [k m] (let [v (k m 0)\n                is-nil (nil? v)]\n            is-nil))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn [key map]\n  (if (contains? map key) \n     (nil? (get map key))\n     false))","problem":134,"user":"536dcc51e4b0fc7073fd6e62"},{"code":"(fn contains-nil? [k m]\n  (= (find m k) [k nil])\n  )","problem":134,"user":"500a214de4b03d00572d2d74"},{"code":"(fn [key map] (if (= nil (key map)) (contains? map key) false))","problem":134,"user":"513a49d3e4b067e25a345ec9"},{"problem":134,"code":"(fn [k lst] \n  (if (contains? lst k)\n    (= (k lst) nil)\n    false))","user":"5c70641de4b0fca0c162277f"},{"code":"(fn [e s] \n  (= s (assoc s e nil)))","problem":134,"user":"50901b2ee4b0ea685a20f774"},{"problem":134,"code":"(fn [x y](= nil (get y x \"NIL\")))","user":"555f620ce4b0a2eb076a39c3"},{"code":"(fn [sym dict] (and (contains? dict sym) (nil? (dict sym))))","problem":134,"user":"504f865ee4b0a02f9cffde90"},{"problem":134,"code":"#(and (nil? (%1 %2)) (contains? (into #{} (keys %2)) %1))","user":"587cf147e4b01531a375eb29"},{"code":"(fn [k mp] (and (contains? mp k) (nil? (k mp))))","problem":134,"user":"4f1d1299535d64f603146487"},{"problem":134,"code":"(fn [x y]\n   ;(= nil (y x))\n   ;(keys y)\n   ;(filter (fn [k] (= k x)) (keys y))\n   ;(< 0 (count (filter (fn [k] (= k x)) (keys y))))\n   (and (< 0 (count (filter (fn [k] (= k x)) (keys y)))) \n         (= nil (y x))\n         )\n        \n   )","user":"60630af9e4b069485764ddbc"},{"code":"(fn [k m] (and\n  (contains? m k)\n  (= nil (get m k))))","problem":134,"user":"4ef41f26535dced4c769f230"},{"code":"(fn jnilkey\n  [key m]\n  (and (contains? m key) (= (m key) nil)))","problem":134,"user":"534ff8a6e4b084c2834f4ad1"},{"code":"(fn [a b]\n (and (contains? b a) (nil? (get b a))))","problem":134,"user":"4f3e2fbbe4b0e243712b1f7e"},{"problem":134,"code":"(fn nilkey? \n  [my-key my-map]\n  (if (contains? my-map my-key)\n    (nil? (my-key my-map))\n    false))","user":"5bb5cd43e4b0a20761a23575"},{"code":"(fn [k m] (nil? (m k ::nil)))","problem":134,"user":"4dbad895535d1e037afb21ae"},{"problem":134,"code":"(fn [k m]\n (and (contains? m k)\n      (nil? (m k))))","user":"5410499de4b01498b1a719a6"},{"problem":134,"code":"(fn[key map]  (and (contains? map key) (= (get map key) nil)))","user":"546fa7a7e4b00cfc9eacc1b1"},{"problem":134,"code":"(fn  [key m]\n  (if (contains? m key)\n    (nil? (get m key))\n    false\n    ))","user":"5fa6db67e4b0fa27300f3dd2"},{"problem":134,"code":"(fn [map key]\n    (if (nil? (key map (symbol \"notFound\")))\n        true\n        false\n    )\n)","user":"57dd2c99e4b0bd073c20243c"},{"problem":134,"code":"(fn f\n   [k m]\n   (and (contains? m k) (nil? (m k))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":134,"code":"#(and (contains? (set (keys %2)) %1) (nil? (%2 %1)))","user":"52d84ea7e4b09f7907dd1390"},{"code":"#(and (not (nil? (find %2 %))) (= nil (% %2)))","problem":134,"user":"512c0f84e4b03a42b6300232"},{"problem":134,"code":"(fn\n [search-key map]\n (and (contains? map search-key) (= nil (map search-key)))\n)","user":"5caf94a5e4b026601754b896"},{"code":"#(if-let [[_ v] (find %2 %)] (nil? v) false)","problem":134,"user":"50c75d38e4b00bb60fe0c532"},{"code":"#(nil? (get %2 %1 ::nf))","problem":134,"user":"5289f1f4e4b0239c8a67ae6d"},{"code":"(fn [k m] (and (contains? m k) (nil?(get m k))))","problem":134,"user":"4f57a153e4b0a7574ea7183a"},{"problem":134,"code":"(fn [k m]\n  (and (contains? m k)\n  (= nil (get m k))))","user":"5f8e2a08e4b0715f5002d767"},{"problem":134,"code":"(fn [k m] (= (and (contains? m k) (m k)) nil))","user":"53aeb3ebe4b047364c044477"},{"problem":134,"code":"(fn [x y] (\n           =\n           (contains? y x)\n           (= nil (x y))\n           )\n  )","user":"58e88b85e4b056aecfd47cf2"},{"code":"(fn check [k cols]\n  (if (and (contains? cols k) (= (get cols k) nil))\n    true\n    false))","problem":134,"user":"52b9cd85e4b07a9af57922c4"},{"problem":134,"code":"(fn nil-val? [k m] (and (contains? m k) (nil? (m k))))","user":"53bb512ce4b047364c044503"},{"code":"(fn [k l] (nil? (k l 'p)))","problem":134,"user":"4f9a5d3ae4b0dcca54ed6d08"},{"code":"#(= nil (%1 %2 \"NULL\"))","problem":134,"user":"524fafdfe4b0541d1855b818"},{"problem":134,"code":"(fn [k,m] (if (contains? m k)(nil? (m k)) false ))","user":"588f80a0e4b00487982d51ad"},{"problem":134,"code":"(fn [key hmap]\n  (and (contains? hmap key) (nil? (hmap key)))\n)","user":"5822b578e4b04b46fc4b0fa4"},{"problem":134,"code":"(fn[x,y]\n  (if (contains? y x)\n     (= (y x) nil)\n    false))","user":"5bdc4a76e4b0ed4b8aab4c30"},{"code":"(fn g[idx m] (and (contains? m idx) (= (get m idx) nil)))","problem":134,"user":"52bf0116e4b07a9af5792328"},{"problem":134,"code":"#(and\n  (= (get %2 %1) nil)\n  (contains? %2 %1)\n  )","user":"566648e6e4b0e91d5f5c566c"},{"problem":134,"code":"(fn [x m] (if (and (contains? m x) (nil? (m x))) true false))","user":"5965eb8de4b069c0a1a19796"},{"problem":134,"code":"(fn [k m] \n  (and\n  (contains? m k)\n  (= nil (get m k))\n))","user":"5ce867fce4b0a17bb84e2baf"},{"code":"(fn [member the-map] (= the-map (merge the-map {member nil})))","problem":134,"user":"4f547d2ce4b0a7574ea717e3"},{"problem":134,"code":"(fn find-nil-value-pair [key coll]\n  (if (and (contains? coll key) (nil? (get coll key))) true false)\n    )","user":"584e9acae4b0b7285a6f4e54"},{"problem":134,"code":"(fn\n  [key dict]\n  (if (contains? dict key)\n    (nil? (dict key))\n    false)\n  )","user":"5e309d65e4b05b4b01516217"},{"problem":134,"code":"(fn\n   [key map]\n    (and (contains? map key) (= nil (get map key))))","user":"60396c95e4b0d5df2af222f4"},{"problem":134,"code":"(fn [inp-key inp-map]\n  (if(and (contains? inp-map inp-key) (= nil (get inp-map inp-key)))\n    true\n    false\n    ))","user":"5952b62ee4b066ee0a44aece"},{"problem":134,"code":"(fn nilkey [key myMap]  \n  (if (contains? myMap key)\n    (nil? (get-in myMap [key]))\n        false))","user":"53bcf632e4b0d9a98559a6c4"},{"problem":134,"code":"(fn [k x] (every? true? [(= nil (k x)) (contains? x k)])\n             )","user":"541c1e46e4b01498b1a71a70"},{"problem":134,"code":"(fn [key map] (if (contains? map key)\n                (nil? (key map))\n                (false? true)))","user":"59c3d1e7e4b0a024fb6ae4e5"},{"problem":134,"code":"(fn [k m] (and (contains? m k) (= nil (get m k) ) ))","user":"600777a3e4b074f607df6667"},{"code":"(fn [k m] (let [x (get m k)]\n    (if (and (= x nil) (contains? m k)) \n        true \n        false)))","problem":134,"user":"5262efade4b03e8d9a4a709f"},{"problem":134,"code":"(fn anil[k m]\n  (if (contains? m k)\n    (nil? (k m))\n    false))","user":"57bd960fe4b05aa3c4741c52"},{"code":"(fn [k m]\r\n    (if (not (contains? m k))\r\n      false\r\n      (if (= nil (k m)) true false)))","problem":134,"user":"4dc97aec535d5973398f9284"},{"code":"(fn [k s]\n  (if (contains? s k)\n    (not (k s))\n    false\n    ))","problem":134,"user":"515ef58be4b02c55805ea237"},{"problem":134,"code":"#(= (%1 %2 \"nope\") nil)","user":"59d4d126e4b0ef0a1e9b5be9"},{"problem":134,"code":"(fn [k m] (if (contains? m k) (= (m k) nil) false ))","user":"5422979be4b01498b1a71ac2"},{"problem":134,"code":"(fn [k map] (and (contains? map k) (= nil (map k))))","user":"5d89427ae4b0915913b1d3b5"},{"code":"(fn [key m]\n     (and (contains? m key)\n          (nil? (key m))))","problem":134,"user":"4f91fd31e4b0dcca54ed6ca8"},{"code":"(fn nilkey[k m](and (contains? m k) (nil? (get m k))))","problem":134,"user":"52cbf89ee4b07d0d72b27354"},{"problem":134,"code":"(fn\n  [k m]\n  (and\n   \t(contains? m k)\n   \t(nil? (m k))))","user":"5576fee3e4b05c286339e078"},{"problem":134,"code":"#(nil? (get %2 %1 5))","user":"59a2d49de4b066c664927d30"},{"code":"(fn [k m]\n  (let [ks (set (keys m))]\n    (if (and (contains? ks k) (nil? (get m k))) true false)))","problem":134,"user":"4e88feef535d8b9bb0147ca8"},{"problem":134,"code":"(fn [x col]  (and (contains? col x) (nil? (x col))))","user":"500e57d6e4b0e8bab5c55da6"},{"problem":134,"code":"(fn [my-key my-map] \n     (and (contains? my-map my-key) (= nil (get my-map my-key)))\n )","user":"547b9cdce4b0c51c1f4d72da"},{"problem":134,"code":"(fn [k m] (boolean (some (fn [[k1 v1]] (and (= k1 k) (nil? v1) true)) m)))","user":"57e22420e4b0bfb2137f5a85"},{"code":"(fn [k m]\n  (cond\n    (not (contains? m k)) false\n    (not (nil? (get m k))) false\n    :else true))","problem":134,"user":"4f05a9cf535dcb61093f6bfc"},{"code":"(fn [k,m] (if (contains? m k) \n             (nil? (m k)) \n              false ))","problem":134,"user":"51d11f5de4b067c365486360"},{"code":"(fn [k mp] (if (> (count (filter (fn [n] n) (map (fn [n] (= n k)) (keys mp)))) 0) (= nil (k mp)) false))","problem":134,"user":"5256a1d4e4b0541d1855ba29"}]