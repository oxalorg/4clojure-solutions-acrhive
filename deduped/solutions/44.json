[{"problem":44,"code":"(fn spotrot [n c]\n   (cond\n     (= n 0) c\n     (< n 0) (spotrot (+ (count c) n) c)\n     :else (spotrot (dec n) (concat (rest c) (list (first c))))))","user":"60882700e4b0ae75613dcedf"},{"code":"(fn [n c] (let [idx (mod n (count c)) ] (concat (drop idx c) (take idx c))) )","problem":44,"user":"52da20c7e4b09f7907dd13b3"},{"code":"#(let[n (mod %1 (count %2))]\n   (concat\n    (drop n %2)\n    (take n %2)))","problem":44,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn rotate [n x]\n  (cond\n      (= n 0) x\n      (> n 0) (rotate \n\t      (dec n) \n    \t  (concat (rest x) (list (first x))))\n      (< n 0) (rotate\n               (inc n)\n               (concat (list (last x)) (butlast x)))))","problem":44,"user":"4fe88f78e4b07c9f6fd12c45"},{"code":"(fn [n s]\n  (let [n (mod n (count s))\n        c (count s)]\n    (concat (take-last (- c n) s) (take n s))))","problem":44,"user":"4f038017535dcb61093f6afa"},{"code":"(fn [n input] (let [l (count input) rot (rem n l)] \n    (if (pos? rot)\n      (concat (drop rot input) (take rot input))\n      (concat (drop (+ l rot) input) (take (+ l rot) input)))))","problem":44,"user":"5341b141e4b00652c8746ecf"},{"problem":44,"code":"(fn [n xs]\n   (let [n* (rem n (count xs))]\n     (if (pos? n*)\n       (concat (drop n* xs) (take n* xs))\n       (concat (take-last (unchecked-negate n*) xs) (drop-last (unchecked-negate n*) xs)))))","user":"5c387c51e4b0d62ef62d9f83"},{"code":"#(apply concat (reverse (split-at (mod % (count %2)) %2)))","problem":44,"user":"4e80e0f2535db62dc21a62b8"},{"code":"(fn [r l]\n  (letfn [(regr \n           [r]\n           (let [cl (count l)]\n             (if (< r 0) (regr (+ r cl))\n               (if (> r cl) (regr (- r cl))\n                 r))))]\n    (let [rr (regr r)]\n      (concat (drop rr l) (take rr l))\n      )))","problem":44,"user":"52faec2ee4b047fd55837004"},{"problem":44,"code":"#(let [i (mod % (count %2))]\n    (concat (drop i %2) (take i %2)))","user":"53829b28e4b06839e8705ed6"},{"problem":44,"code":"(fn rotate-sequence [n1 xs]\n  (let [n (rem n1 (count xs))]\n    (cond \n      (> n 0)\n      (->> xs\n           (take n)\n           (concat xs)\n           (drop n))\n      (< n 0)\n      (->> xs\n           (take (+ (count xs) n))\n           (concat xs)\n           (drop (+ (count xs) n)))\n      :always\n      xs)))","user":"5984e7dee4b021a7a535fe43"},{"code":"(fn [n xs]\n  (let [size (count xs)\n        [taken dropped] (split-at (mod n size) xs)]\n    (concat dropped taken)))","problem":44,"user":"5160195ae4b0e2be8aa20be3"},{"code":"(fn [x y]\r\n  (let [c (count y)]\r\n    (take c (drop (mod x c) (cycle y)))))","problem":44,"user":"4f82ed48e4b033992c121c0e"},{"problem":44,"code":"(fn [n coll] (take (count coll) (drop (+ (* 2 (count coll)) n) (cycle coll))))","user":"5b4c2212e4b02d533a91bca6"},{"code":"(fn solution44 [n-dex collection] \n  (take (count collection) (drop (mod n-dex (count collection)) (cycle collection))))","problem":44,"user":"50e1bdd8e4b019fc399ce17f"},{"problem":44,"code":"(fn [sh s] \n  (let [n (mod sh (count s))\n        front (take n s)\n        back (drop n s)\n        result (concat back front)]\n    result))","user":"53c1ce3ee4b00fb29b221268"},{"code":"(fn [n coll]\n  (let [[f s] (split-at (mod n (count coll)) coll)]\n    (concat s f)))","problem":44,"user":"4e3bccb1535deb9a81d77f55"},{"problem":44,"code":"(fn [n xs]\n\t(cond\n\t\t(zero? n) xs\n\t\t(> n 0) (recur (dec n) (concat (rest xs) (list (first xs))))\n\t\t(< n 0) (recur (inc n) (concat (list (last xs)) (drop-last 1 xs)))\n\t)\n)","user":"5409f8eae4b0addc1aec66e6"},{"problem":44,"code":"(fn [n coll] (let [c (count coll)] (nth (partition c 1 (cycle coll)) (mod n c))))","user":"5a5894d9e4b05d388ecb6c81"},{"code":"(fn [c ll] (letfn [(rotateright [l] (concat (list (last l)) (drop-last l))) (rotateleft [l] (concat (rest l) (list (first l))))] (if (zero? c) ll (if (> c 0)(recur (dec c) (rotateleft ll)) (recur (inc c) (rotateright ll))))))","problem":44,"user":"510931ede4b0c71f76895663"},{"code":"(fn f [n v]\n  (loop [nn (+ (count v) (rem n (count v))) vv v]\n    (if (= nn 0) vv\n      (recur (dec nn) (conj (vec (drop 1 vv)) (first vv))))))","problem":44,"user":"52196842e4b0890f2f822bfa"},{"problem":44,"code":"#(let [size (count %2)\n       steps (rem %1 size)]\n   (cond\n    (= steps 0) %2\n    (> steps 0) (concat (drop steps %2) (take steps %2))\n    :else (concat (drop (+ size steps) %2) (take (+ size steps) %2))))","user":"556c70dae4b09a3098a524fd"},{"code":"(fn[x xs]   \n    (take \n     (count xs) \n     (drop (mod (+ (count xs) x) (count xs)) (cycle xs))))","problem":44,"user":"506406c8e4b075d771da6f9f"},{"code":"(fn rot [x s] \n  (apply concat \n    (reverse \n      (split-at (mod x (count s)) s))))","problem":44,"user":"50d0d4c8e4b00b15ecee976a"},{"problem":44,"code":"(fn [n coll]\n  (let [[left right] (split-at (mod n (count coll)) coll)]\n    (concat right left)))","user":"541f6bc0e4b01498b1a71a98"},{"code":"(fn [n c]\n  (let [nb (rem n (count c))\n        i (if (> nb 0) nb (+ nb (count c)))]\n    (flatten (reverse (split-at i c)))))","problem":44,"user":"4e8a0d5d535d3e98b802328e"},{"problem":44,"code":"(fn [n s]\n  (if (pos? n)\n    (drop n (take (+ n (count s)) (cycle s)))\n    (reverse (drop (- n) (take (+ (- n) (count s)) (cycle (reverse s)))))))","user":"55aaa36fe4b0988bba2ad94f"},{"problem":44,"code":"(fn [s l]\n  (let [s (mod s (count l))\n        d (drop s l)\n        t (take s l)]\n    (concat d t)))","user":"56b1b59be4b0982f16b37df2"},{"code":"(fn [s l]\n (let [s (mod s (count l))]\n  (drop s (take (+ s (count l)) (cycle l)))))","problem":44,"user":"4f244f26e4b0d66497709fea"},{"problem":44,"code":"(fn [r sq]\n  (let [bound-r (mod r (count sq))]\n    (concat (drop bound-r sq) (take bound-r sq)))\n  )","user":"5ed16f26e4b016b56eae05bb"},{"code":"(fn rotate \n  [n xs] \n  (let [mod-n (mod n (count xs))] \n    (concat (drop mod-n xs) (take mod-n xs))))","problem":44,"user":"513d121fe4b0e544971636a2"},{"code":"(fn [n l]\n  (cond\n    (= n 0) l\n    (> n 0) \n    (recur (- n 1) (concat (rest l) (list (first l))))\n    (< n 0) \n    (recur (+ n 1) (concat (list (last l)) (butlast l)))\n  )\n)","problem":44,"user":"4e9e6bd6535dbda64a6f6b96"},{"code":"(fn [x y] (let [k (mod x (count y))] (concat (drop k y) (take k y))))","problem":44,"user":"4e1e7f88535d04ed9115e808"},{"problem":44,"code":"(fn [dir s] \n  (let [n (mod dir (count s))]\n    (concat (drop n s) (take n s))\n    )\n  )","user":"5652dd89e4b0f9d632dd8469"},{"code":"#(let [n (mod % (count %2))]\n     (concat (drop n %2) (take n %2)))","problem":44,"user":"4eda8d7c535d10e5ff6f530f"},{"code":"#(take (count %2)\r\n  (drop (mod % (count %2))\r\n(cycle %2)))","problem":44,"user":"4e14b925535d04ed9115e7df"},{"code":"(fn [x s]\n  (let [n (mod x (count s))]\n    (take (count s) (drop n (cycle s)))))","problem":44,"user":"5007f751e4b0b17c647f522b"},{"code":"(fn [x col] (let [n (mod x (count col))] (if (> n 0) (concat (drop n col) (take n col)) (concat (take-last (* -1 n) col) (drop-last (* -1 n) col)))))","problem":44,"user":"50be9b4ae4b00fb48fed2ef6"},{"problem":44,"code":"(fn f [n s]\n  (let [l (count s)]\n    (if (> n 0)\n      (take l (drop n (cycle s)))\n      (take l (drop (+ l (mod n l)) (cycle s))))))","user":"5908b36be4b047aa04b19982"},{"code":"#(flatten (reverse (split-at (mod %1 (count %2)) %2)))","problem":44,"user":"4e58c019535d8a8b8723a297"},{"problem":44,"code":"(fn rotate2 [x coll]\n  (if (< x 0) \n     (rotate2 (inc x) (concat [(last coll)] (drop-last coll)))\n     (if (= x 0) \n      coll \n      (rotate2 (dec x) (concat (rest coll) [(first coll)])))))","user":"54980edae4b0b312c081ff79"},{"code":"(fn rotate [rot x]\n  (if (pos? rot)\n    (last (take (inc rot)\n      (iterate\n        (fn [%]\n          (concat (rest %) (list (first %)))\n        )\n      x)\n    ))\n    (rotate (- (count x) (- 0 rot)) x)\n  )\n)","problem":44,"user":"4e3456f9535deb9a81d77f2a"},{"problem":44,"code":"#(apply concat (-> (->> (count %2)\n                         (mod %1))\n                    (split-at %2)\n                    reverse))","user":"60ac91c5e4b00e9e6653c485"},{"problem":44,"code":"(fn [n sq] \n  (if (< n 0)\n    (let [ss (vec sq) n1 (mod (- n) (count sq)) n2 (- (count sq) n1)]\n      (apply conj (vec (take-last n1 ss)) (take n2 ss)))\n    (let [ss (vec sq) n1 (mod n (count sq)) n2 (- (count sq) n1)]\n      (apply conj (vec (take-last n2 ss)) (take n1 ss)))))","user":"53069e16e4b02e8216869798"},{"code":"(fn [m col]\n  (let [n (count col)\n        icol (cycle col)]\n    (cond\n      (= m n) col\n      (< m 0) (take n (drop (mod m n) icol))\n      (> m 0) (take n (drop m icol)))))","problem":44,"user":"52ba2af3e4b07a9af57922cc"},{"problem":44,"code":"(fn [i s]\n  (take (count s) \n        (drop (loop [x i\n                     y (count s)]\n                (if (> (+ x y) y)\n                  x\n                  (recur (+ x y) y)))\n              (cycle s))))","user":"55be464ce4b01b9910ae2a07"},{"problem":44,"code":"(fn s44 [n coll]\n  (let [c (count coll)]\n    (take c (drop (+ c (mod n c)) (cycle coll)))))","user":"54f5aa4ce4b0f2f3c5226e94"},{"code":"#(let [cnt (count %2)] \n  (take cnt (drop (mod % cnt) (cycle %2))))","problem":44,"user":"5097cfcbe4b00ad8bab4e977"},{"code":"(fn [n c]\n  (let [n (mod n (count c))]\n    (concat (drop n c) (take n c))))","problem":44,"user":"500d8c49e4b07ccb9a7ddb00"},{"problem":44,"code":"(fn [r coll]\n  (let [c (count coll)]\n    (->> (cycle coll)\n         (drop (if (pos? r) r (- c (rem (- r) c))))\n         (take c))))","user":"55f2e47de4b06e875b46ce4d"},{"problem":44,"code":"(fn [n s]\n  (loop [n n s s]\n    (cond\n     (pos? n) (recur (dec n) (concat (rest s) [(first s)]))\n     (neg? n) (recur (inc n) (concat [(last s)] (butlast s)))\n     (zero? n) s)))","user":"57e20474e4b0bfb2137f5a82"},{"code":"(fn [n coll]\n  (if (pos? n)\n    (let [n (mod n (count coll))]\n      (concat (drop n coll) (take n coll)))\n    (let [n (mod (* n -1) (count coll))]\n      (concat (take-last n coll) \n              (drop-last n coll)))))","problem":44,"user":"5012ec0ae4b0c87326002230"},{"code":"(fn rotate [n coll]\n  (let [len (count coll)\n        x (mod (Math/abs n) len)\n        rcoll (cycle coll)]\n    (if (pos? n)\n      (->> rcoll (drop x) (take len))\n      (->> rcoll (drop (- len x)) (take len)))))","problem":44,"user":"4e976f79535dbda64a6f6b55"},{"problem":44,"code":"(fn [n xs]\n  (let [c (count xs)\n        n (mod (+ n c) c)]\n    (concat (drop n xs) (take n xs))))","user":"5290257ae4b0239c8a67af03"},{"code":"#(flatten (list (drop (mod % (count %2)) %2) \n       (take (mod % (count %2)) %2)))","problem":44,"user":"4ecf1f51535d1f5ad70dba3a"},{"code":"(fn [n coll] \n  (let [ntime (if (neg? n) (- n) n)\n        << #(concat (rest %) [(first %)])\n        >> #(cons (last %) (drop-last %))]\n    ((apply comp (repeat ntime (if (neg? n) >> <<))) coll)))","problem":44,"user":"52446511e4b0d8acf9ed6a9a"},{"problem":44,"code":"(fn rotate [n xs]\n     (let [n (mod n (count xs))]\n       (concat (drop n xs) (take n xs))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":44,"code":"(fn [arg1 arg2]\n(cond\n(and (= arg1 2) (= arg2 [1 2 3 4 5])) (quote (3 4 5 1 2))\n(and (= arg1 -2) (= arg2 [1 2 3 4 5])) (quote (4 5 1 2 3))\n(and (= arg1 6) (= arg2 [1 2 3 4 5])) (quote (2 3 4 5 1))\n(and (= arg1 1) (= arg2 (quote (:a :b :c)))) (quote (:b :c :a))\n(and (= arg1 -4) (= arg2 (quote (:a :b :c)))) (quote (:c :a :b))\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":44,"code":"(fn [n s]\n  (loop [n n\n         s s]\n    (cond\n     (zero? n) s\n     (neg? n) (recur (+ n (count s)) s)\n     true (recur (dec n) (conj (vec (rest s)) (first s))))))","user":"551ed214e4b08d5046aa8a4d"},{"code":"(fn [n coll]\n  (let [rshift #(cons (last %) (drop-last %))\n        lshift #(concat (rest %) (vector (first %)))\n        abs #(if (neg? %) (- %) %)\n        opfun (if (neg? n) rshift lshift)]\n   (nth (iterate opfun coll) (abs n))))","problem":44,"user":"5102ef6be4b00c483ae176fc"},{"code":"(fn [n xs]\n  (let [r (mod n (count xs))]\n       (concat (drop r xs) (take r xs))))","problem":44,"user":"4ee75ec2535d93acb0a66867"},{"problem":44,"code":"(fn [n coll]\n      (loop [a n\n             b coll]\n        (if (and (> a 0)\n                 (< a (count b)))\n          (flatten (reduce conj (first (split-at a b))\n                           (list (second (split-at a b)))))\n          (recur (if (< a 0) (+ a (count b))\n                     (- a (count b))) b))))","user":"5386f784e4b06839e8705f17"},{"problem":44,"code":"(fn [n coll]\n  (loop [result coll, c n]\n    (if (= 0 c)\n      result\n      (if (< c 0)\n        (recur (cons (last result) (butlast result)) (inc c))\n        (recur (reverse (conj (reverse (rest result)) (first result))) (dec c))))))","user":"56c55fbce4b05cc29241eea5"},{"code":"(fn [c coll]\n  (let [amt (mod c (count coll))]\n(concat (drop amt coll) (take amt coll))))","problem":44,"user":"4dfe65a1535d04ed9115e787"},{"code":"(fn [n input]\n\t\t(let [rotation (mod n (count input))]\n\t\t\t(flatten (conj (take rotation input) (drop rotation input)))))","problem":44,"user":"51205867e4b0e88f5a20c40f"},{"code":"#(->> %2 cycle (drop (mod % (count %2))) (take (count %2)))","problem":44,"user":"530cb5b8e4b02e82168697e0"},{"problem":44,"code":"(fn rotate-seq [shift coll]\n  (if (zero? shift)\n    coll\n    (if (> shift 0)\n      (rotate-seq (dec shift) (concat (rest coll) (take 1 coll)))\n      (rotate-seq (inc shift) (concat (take-last 1 coll) (butlast coll))))))","user":"5d7aa22ee4b02e6b30c9354e"},{"problem":44,"code":"#(apply concat ((juxt drop take) (mod % (count %2))%2))","user":"558aabbfe4b0277789237621"},{"code":"(fn rot [r xs](if (> r 0) (concat (drop (mod r (count xs)) xs) (take (mod r (count xs)) xs))\n    (concat (drop (+ (count xs) (mod r (- 0 (count xs)))) xs) (take (+ (count xs) (mod r (- 0 (count xs)))) xs))))","problem":44,"user":"50981062e4b04e098a4c7268"},{"code":"(fn [n s]\n  (let [i (mod n (count s))]\n    (concat (drop i s) (take i s))))","problem":44,"user":"4f050dec535dcb61093f6bef"},{"problem":44,"code":"(fn rotate [n s]\n  (let [a (mod n (count s))]\n    (concat (drop a s) (take a s))))","user":"5f10ab01e4b091ba50b4dba6"},{"problem":44,"code":"#(take (count %2) (drop (if (neg? %1) (* (dec %1) -1) %1) (cycle %2)))","user":"58e5fbbae4b056aecfd47ca6"},{"problem":44,"code":"(fn rotate\n  [n s]\n  (if (> n 0) \n    (loop [counter n\n           sequence s]\n      (if (= counter 0)\n        sequence\n        (recur (dec counter) (concat (rest sequence) (list (first sequence))))))\n    (loop [counter n\n           sequence s]\n      (if (= counter 0)\n        sequence\n        (recur (inc counter) (conj (butlast sequence) (last sequence)))))))","user":"52561295e4b0541d1855ba03"},{"problem":44,"code":"(fn [dist xs]\n    (let [\n          len (count xs)\n          delta (mod dist len)\n          ]\n      (take len (drop delta (cycle xs)))))","user":"53c3397be4b00fb29b221279"},{"problem":44,"code":"(fn rotate [amount coll]\n  (if (< amount 0)\n    (recur (+ amount (count coll)) coll)\n    (if (= amount 0)\n      coll\n      (let [[head & tail] (vec coll)]\n        (recur (dec amount) (conj (vec tail) head))))))","user":"58e45a2ce4b056aecfd47c69"},{"code":"#(let [[left right] (split-at (mod %1 (count %2)) %2)]\n   (concat right left))","problem":44,"user":"5166e80de4b060c690c1f4c5"},{"code":"#(let [rot (mod %1 (count %2))]\n   (concat (drop rot %2) (take rot %2)))","problem":44,"user":"4fa340b4e4b081705acca18c"},{"code":"(fn [x coll]\n  (let [n (count coll)]\n    (->> (concat coll coll) (drop (mod x n)) (take n))))","problem":44,"user":"531f7a2de4b08068f379edc6"},{"problem":44,"code":"(fn rotate-sequence [n sqn]\n  (let [m (count sqn)\n        n* (mod n m)]\n    (concat (drop n* sqn) (take n* sqn))))","user":"569f99cce4b0542e1f8d1497"},{"problem":44,"code":";; with inline function\n;(fn rotate [n coll]\n;  (letfn [(normalize-rotation [n coll-size]\n;            (let [r (rem n coll-size)]\n;              (if (neg? r) (+ coll-size r) r)))]\n;    (let [r (normalize-rotation n (count coll))]\n;      (concat (drop r coll) (take r coll)))))\n;; simplified with a single (let)\n(fn rotate [n coll]\n  (let [coll-size  (count coll)\n        in-range-n (rem n coll-size)\n        normed-n   (if (neg? in-range-n) (+ coll-size in-range-n) in-range-n)]\n    (concat (drop normed-n coll) (take normed-n coll))))","user":"57407ab3e4b05c31a32c0854"},{"code":"(fn [n xs] \n  (let [m (mod n (count xs))]\n    (concat (drop m xs) (take m xs))))","problem":44,"user":"51269362e4b083bb8f88cf09"},{"problem":44,"code":"#(let [c (mod %1 (count %2))]\n  (concat (drop c %2) (take c %2)))","user":"58d71ef5e4b03c36ff7e597f"},{"code":"(fn [n coll]\n  (let [len (count coll)]\n    (take len (drop (mod n len) (cycle coll)))))","problem":44,"user":"4ded27db535d08e6dec9fe0a"},{"code":"(fn [n xs]\n  (let [n (mod n (count xs))]\n    (concat (drop n xs) (take n xs))))","problem":44,"user":"50c9e5e3e4b0a409464667d7"},{"problem":44,"code":"(fn [n coll]\n  (let [v (vec coll)\n        c (count v)\n        i (mod n c)]\n    (concat (subvec v i) (subvec v 0 i))))","user":"5896a0e6e4b00487982d52a8"},{"problem":44,"code":"(fn [nr my-vect]\n   (let [remainder (rem nr (count my-vect))\n         shiftee (Math/sqrt (* remainder remainder))\n         movable (- (count my-vect) shiftee)\n         special_op (comp flatten into)]\n     (println movable shiftee remainder)\n     (if (> remainder 0)\n       (into (take shiftee my-vect) (reverse (drop shiftee my-vect)))\n       (special_op (vector (drop movable my-vect)) (take movable my-vect)))))","user":"5655e056e4b0f9d632dd849b"},{"code":"(fn [n coll]\n  (let [n (mod n (count coll))\n        [a b] (split-at n coll)]\n    (concat b a)))","problem":44,"user":"4e1047ad535d04ed9115e7bf"},{"problem":44,"code":"(fn [rot-amt coll]\n   (let [rot (rem (Math/abs rot-amt) (count coll))\n         neg-rot (- (count coll) rot)\n         dir-rt (if (< 0 rot-amt) true false)\n         _ (println \"rot-amt\" rot-amt)\n         _ (println \"rot\" rot)\n         _ (println \"dir-rt\" dir-rt)]\n     (if dir-rt\n       (concat (nthrest coll rot) (take rot coll)) \n       (concat (nthrest coll neg-rot) (take neg-rot coll)))))","user":"58ed2e21e4b056aecfd47d7a"},{"problem":44,"code":"(fn [start coll]\n   (let [shift (if (< start 0) (- (count coll) (dec start)) start)]\n     (take (count coll) (drop shift (cycle coll)))))","user":"55808f8ee4b05c286339e0ee"},{"problem":44,"code":"(fn [n xs]\n   (let [r (mod n (count xs))]\n     (concat (drop r xs) (take r xs))))","user":"5327c591e4b09d4e7a9b54ff"},{"problem":44,"code":"(fn [x y] (nth (iterate (fn [a] (flatten (list (rest a) (first a)))) y) (first (filter pos? (map (fn [a] (+ (* a (count y) ) x)) (range))))))","user":"54461393e4b032a45b8693a5"},{"code":"(fn [n v]\n   (let [x (mod (+ n (count v)) (count v))] \n     (concat (drop x v) (take x v))))","problem":44,"user":"50bce014e4b0594b91591c63"},{"code":"(fn [i l]\n  (subvec\n   (apply vector (concat l l))\n   (mod i (count l))\n   (+ (count l) (mod i (count l)))))","problem":44,"user":"521dceeae4b050d5da042802"},{"problem":44,"code":"(fn [n, coll]\n  (let [len (count coll)\n        ep (mod n len)]\n    (concat (drop ep coll) (take ep coll))\n  )\n)","user":"59ac559ee4b00adcf69795d2"},{"code":"(fn [x coll] (flatten (reverse (split-at (mod (+ (count coll) x) (count coll)) coll))))","problem":44,"user":"5230d9bde4b0035e815da397"},{"code":"(fn [s v]\n        (let [ sh (mod s (count v))]\n        (into (take sh v) (reverse (drop sh v)))))","problem":44,"user":"4fa9da14e4b081705acca1e7"},{"code":"(fn [n s] \n  (let [[s1 s2] (map vec (split-at (mod n (count s)) s))]\n             (into s2 s1)))","problem":44,"user":"4e1f9bb5535d04ed9115e80d"},{"problem":44,"code":"(fn rotseq [i lst]\n    (take (count lst) (drop (mod i (count lst)) (cycle lst))))","user":"59a2ba97e4b066c664927d2c"},{"code":"(fn [n s] (let [[a b] (split-at (mod n (count s)) s)] (concat b a)))","problem":44,"user":"52bc6f5ee4b07a9af57922f6"},{"code":"(fn r[n l]\n  (cond\n    (> n 0) (r (- n 1) (concat (rest l) (list (first l))))\n    (< n 0) (reverse (r (* n -1) (reverse l)))\n\t:else l))","problem":44,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":44,"code":"(fn rotate [n s]\n  (let [seq (apply concat (repeat s))\n        c (count s)]\n    (for [i (range c)]\n      (if (neg? n)\n        (nth seq (+ i (+ c (mod n c))))\n        (nth seq (+ i n))))))","user":"5e21c933e4b05b4b01516128"},{"problem":44,"code":"(fn [n l]\n  (nth (iterate \n        (fn rotate [x] \n          (concat \n           (rest x)\n           (list (first x)))) l) \n       \t(mod n (count l))))","user":"59663e77e4b069c0a1a1979f"},{"problem":44,"code":"(fn [n l]\n  (let [n (- (mod n (count l)))]\n    (reduce\n     (fn [o ne]\n     (conj (butlast o) (last o)))\n   (vec l)\n   (range (max n (+ n (count l)))))))","user":"57395f32e4b0cd1946bd1070"},{"problem":44,"code":"(fn [start xs]\n    (let [size (count xs)]\n      (->> xs\n           cycle\n           (drop (mod start size))\n           (take size)\n           )\n      )\n    )","user":"5c17467fe4b01240ff5671df"},{"problem":44,"code":"(fn [a b]\n\t(loop [x (mod (- 0 a) (count b)) y (into [] b)]\n\t\t(if (= 0 x)\n\t\t\ty\n\t\t\t(recur (dec x) (pop (into (vector (get y (dec (count y)))) y))))))","user":"5eea5ce7e4b029a2061bbec0"},{"problem":44,"code":"(fn rotate\n  [r s]\n  (let [reduced-r (rem r (count s))\n        real-r (if (neg? reduced-r)\n                 (+ reduced-r (count s))\n                 reduced-r)]\n    (concat (drop real-r s) (take real-r s))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":44,"code":"#(let [[a b] (split-at (mod %1 (count %2)) %2)] (flatten [b a] ))","user":"5454b84ce4b0e397800069d9"},{"code":"#(loop [x % y %2]\r\n  (if (= 0 x)\r\n    y\r\n    (if (< 0 x) (recur (- x 1) (flatten (cons (rest y) (list (first y)))))\r\n      (recur (+ x 1) (cons (last y) (butlast y))))\r\n  ))","problem":44,"user":"4e1fe7f1535d04ed9115e810"},{"problem":44,"code":"(fn foo [n xs]\n  (if (> n 0)\n    (let [k (rem n (count xs))]\n      (concat (drop k xs) (take k xs)))\n    (let [m (- 0 n)\n          k (rem m (count xs))\n          l (- (count xs) k)]\n      (concat (drop l xs) (take l xs)))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":44,"code":"(fn [n s]\n\t(if (> n 0) \n    \t(loop [i n r s] (if (= i 0) r \n        \t(recur (dec i) (concat (rest r) (list (first r)) ))))\n\t\t(loop [i (- 0 n) r s] (if (= i 0) r \n        \t(recur (dec i) (concat (list (last r)) (butlast r) ))))))","user":"575ddfd1e4b02ea11479938d"},{"code":"(fn \n  ([x coll]\n    (take (count coll) (drop (mod x (count coll)) (cycle coll)))))","problem":44,"user":"51d28e15e4b0d13b04db0d9b"},{"problem":44,"code":"(fn [i l] (let [n (mod i (count l))](concat (drop n l) (take n l))))","user":"5630471ce4b073c1cf7a9be4"},{"code":"(fn rotate [n coll]\n    (let [coll-c (count coll)\n          first-count (cond (< n 0) (if (> (Math/abs n) coll-c)\n                                      (+ coll-c (+ coll-c n))\n                                      (+ coll-c n))\n                            (> n coll-c) (- n coll-c)\n                            :else n)\n          first-part (take first-count coll)\n          last-part (drop first-count coll)]\n      (seq (apply concat [last-part first-part]))))","problem":44,"user":"50c113bee4b096f585049c37"},{"problem":44,"code":"(fn [y x] (take (count x) (drop (mod y (count x)) (cycle x))))","user":"540479e7e4b0addc1aec665a"},{"code":"(fn [n xs]\n  (apply concat (reverse (split-at\n                          (mod n (count xs))\n                          xs))))","problem":44,"user":"510acd6ee4b078ea719210f4"},{"code":"(fn rotate-seq\n  [r s]\n  (let [n (count s)\n    r1 (mod r n)]\n  (take n (drop r1(cycle s)))))","problem":44,"user":"4fc6d2c1e4b0ee37620e181b"},{"problem":44,"code":"(fn [n lst] \n  (let [cl (map list lst)\n        cnt (count cl)\n        lst cl]\n   (flatten (take cnt \n         (nthrest (concat lst lst) \n                  (mod n cnt) )))) )","user":"5642b939e4b08d4f616f5f1b"},{"code":"(fn [shift coll]\n      (let [shift (rem shift (count coll))]\n        (if (pos? shift)\n          (concat (drop shift coll) (take shift coll))\n          (let [diff (- (count coll) (* -1 shift))]\n            (concat (drop diff coll) (take diff coll))))))","problem":44,"user":"4f4544e1e4b0d56e7bb92b7a"},{"code":"(fn [ind s] (flatten (reverse (if (and (>= ind 0) (< ind (count s))) \n                                    (split-at ind s) \n                                    (if (> ind 0) \n                                      (let [ind (- ind (count s))] (split-at ind s)) \n                                      (let [ind (if (>= (+ (count s) ind) 0) (+ (count s) ind) (+ (count s) (count s) ind))] (split-at ind s)) )))))","problem":44,"user":"513ca934e4b0b86ece9f3228"},{"problem":44,"code":"#(let [r (mod %1 (count %2))] \n   (concat (drop r %2) (take r %2)))","user":"5d46fbc6e4b07c84aa5ae6af"},{"code":"#(let [c (count %2), o (rem (+ (rem %1 c) c) c)] \n(into (take o %2) (reverse (drop o %2))))","problem":44,"user":"4eabb245535d7eef30807319"},{"problem":44,"code":"(fn [deg seq]\n  (let [norm-deg (mod deg (count seq) )\n        vec-seq (into [] seq)]\n    (concat (subvec vec-seq norm-deg) (subvec vec-seq 0 norm-deg))\n    ))","user":"5cdbb1b2e4b05ee0cb311732"},{"problem":44,"code":"(fn rot [shift, s] (concat (subvec (vec s) (mod shift (count s))) (subvec (vec s) 0 (mod shift (count s)))))","user":"5be182eae4b0ed4b8aab4c9d"},{"code":"(fn [n ls]\n  (let [m (count ls)]\n    (take m (drop (mod n m) (cycle ls)))))","problem":44,"user":"4de165f3535d08e6dec9fde6"},{"problem":44,"code":"(fn [n xs]\n  (if (zero? n)\n    xs\n    (if (pos? n)\n\t    (recur (dec n)\n    \t       (conj (vec (drop 1 xs)) (first xs)))\n      \t(recur (inc n)\n               (cons (last xs) (drop-last 1 xs))))))","user":"594880ade4b07ddc2dafadc2"},{"problem":44,"code":"(fn [n data] (take (count data) (drop (mod n (count data)) (cycle data))))","user":"5746cb28e4b009280f9f2b68"},{"code":"#(let [n (mod % (count %2))]\n         (concat (drop n %2)\n                 (take n %2)\n                 ))","problem":44,"user":"4dc537fd535d8a4b2fd74282"},{"code":"(fn [n coll]\n  (let [n (mod n (count coll))]\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"4fb2101ce4b081705acca284"},{"code":"#(-> (split-at (mod % (count %2)) %2) reverse flatten)","problem":44,"user":"4fb3b865e4b081705acca2a2"},{"code":"(fn [n xs]\n  (let [N (count xs)]\n    (for [m (range N)]\n      (nth xs (mod (+ n m) N)))))","problem":44,"user":"52cb6bb0e4b07d0d72b2734c"},{"problem":44,"code":"(fn [shift coll]\n  (let [cycle-left-by-one  (fn [coll] (concat (rest coll) (list (first coll))))\n        cycle-right-by-one (fn [coll] (concat (list (last coll)) (butlast coll)))]\n    (cond (< shift 0) (nth (iterate cycle-right-by-one coll) (- shift)) \n          (> shift 0) (nth (iterate cycle-left-by-one coll) shift)\n          :else coll)))","user":"541cf6dfe4b01498b1a71a7a"},{"code":"(fn [idx coll]\n    (let [sz    (count coll)\n          cidx  (mod idx sz)\n          lcidx (- sz cidx)]\n    \n    (concat (take-last lcidx coll) (take cidx coll))))","problem":44,"user":"4e2f9e71535deb9a81d77f11"},{"problem":44,"code":"#(let [c (mod %1 (count %2))]\n   (concat (drop c %2)\n           (take c %2)))","user":"606da089e4b069485764de15"},{"problem":44,"code":"(fn [n s]\n  (if (> n 0)\n    (let [x (mod n (count s))\n          a drop\n          b take]\n      (concat (a x s) (b x s)))\n    (let [x (mod (* n -1) (count s))\n          a take-last\n          b drop-last]\n      (concat (a x s) (b x s)))))","user":"5512aca6e4b055c2f668d4b4"},{"code":"#(let [[l r] (split-at (mod %1 (count %2)) %2)]\n  (concat r l))","problem":44,"user":"4e4870d1535dc968683fc4bc"},{"code":"(fn [rotateby stuff]\n  (let [size (count stuff)\n        rotateby (loop [i rotateby]\n                    (cond\n                      (neg? i) (recur (+ i size))\n                      :default (mod i size)))]\n    (concat \n      (drop rotateby stuff)\n      (drop-last (- (count stuff) rotateby) stuff))))","problem":44,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":44,"code":"(fn [n sq]\n          (let [n (rem n (count sq))]\n            (println n)\n            (cond\n              (pos? n) (concat\n                        (take-last (- (count sq) n) sq)\n                        (take n sq))\n              (neg? n) (concat\n                        (take-last (- n) sq)\n                        (take (- (count sq) (- n)) sq))\n              :else sq)))","user":"5c995fa4e4b048ec896c5a96"},{"problem":44,"code":"(fn [r v]\n  (nth (iterate #(concat (rest %1) [(first %1)]) v) \n       (if (pos? r) r (inc (Math/abs r)))))","user":"576d398be4b0979f8965155d"},{"problem":44,"code":"(fn rotate [steps coll]\n  (let [f #(->> (cycle %)\n                (drop (Math/abs steps))\n                (take (count %)))]\n    (if (pos? steps)\n      (f coll)\n      (reverse (f (reverse coll))))))","user":"5f663bc0e4b02876ed9fd02d"},{"problem":44,"code":"(fn [n v]\n  (let [i (mod n (count v))]\n    (concat (drop i v) (subvec (into [] v) 0 i))))","user":"56990b68e4b0542e1f8d143a"},{"problem":44,"code":"(fn my-rotate [n coll]\n  (if (= 0 n)\n    coll\n    (if (pos? n)\n      (recur (dec n) (conj (vec (rest coll)) (first coll)))\n      (recur (inc n) (cons (last coll) (drop-last coll)))\n      )\n    )\n  )","user":"5b421edce4b02d533a91bc2c"},{"code":"(fn [n xs]\r\n  (cond (= 0 n) xs\r\n        (< 0 n) (recur (dec n) (concat (rest xs) [(first xs)]))\r\n        (> 0 n) (recur (inc n) (cons (last xs) (butlast xs)))))","problem":44,"user":"5063b9a0e4b075d771da6f9d"},{"code":"(fn [n coll]\n  (cond\n    (> n 0) (recur (dec n) (concat (rest coll) [(first coll)]))\n    (< n 0) (recur (inc n) (cons (last coll) (butlast coll)))\n    :else coll))","problem":44,"user":"4eb51942535d7eef30807365"},{"code":"(fn rotate [n sq]\r\n  (let [count-sq (count sq)]\r\n    (take count-sq (drop (mod n count-sq) (cycle sq)))))","problem":44,"user":"4f71db68e4b07046d9f4f015"},{"problem":44,"code":"(fn [n xs]\n  (let [d (mod n (count xs))]\n    (concat (drop d xs) (take d xs))))","user":"541168dee4b01498b1a719c3"},{"problem":44,"code":"(fn [shift in]\n  (let [shift_val (mod (+ shift (count in)) (count in))]\n    (concat (subvec (vec in) shift_val) (subvec (vec in) 0 shift_val))\n  )\n)","user":"5a244240e4b0ff51aa4b32e9"},{"problem":44,"code":"(fn\n  [d xs]\n  (cond\n    (< d 0) (recur (inc d) (cons (last xs) (vec (butlast xs)) ))\n    (> d 0) (recur (dec d) (conj (vec (rest xs)) (first xs)  ))\n    :else xs\n    )\n  )","user":"58eed4c5e4b056aecfd47db7"},{"problem":44,"code":"(fn [x coll]\n  (let [n (mod (Math/abs x) (count coll))]\n    (cond\n      (zero? x) coll\n      (pos? x) (concat (drop n coll) (take n coll))\n      (neg? x) (concat (take-last n coll) (drop-last n coll)))))","user":"57b39fbee4b0fbc9809a2783"},{"code":"#(nthnext (take (+ (count %2) (mod % (count %2))) (cycle %2)) (mod % (count %2)))","problem":44,"user":"4f826548e4b033992c121c08"},{"problem":44,"code":"#(loop [x %1 len (count %2)]\n  (cond\n   (>= x len) (recur (- x len) len)\n   (neg? x) (recur (+ x len) len)\n   :else (concat (drop x %2) (take x %2))))","user":"5b552117e4b02d533a91bd2c"},{"code":"(fn rot2 [c s] (take (count s) (drop (mod c (count s)) (cycle s))))","problem":44,"user":"52655949e4b03e8d9a4a710b"},{"code":"(fn rotate [n s]\n  (let [repeating (apply concat (repeat s))\n        number-to-drop (Math/abs (mod n (count s)))]\n    (take (count s) (drop number-to-drop repeating))))","problem":44,"user":"4ec70f26535d6d7199dd36dd"},{"problem":44,"code":"(fn [n col]\n  (let [pos (mod n (count col))\n        [back front] (split-at pos col)]\n    (concat front back)))","user":"50a2e3fbe4b029e8bace3629"},{"problem":44,"code":"(fn xrotate [n x]                                                             \n  (loop [ cnt (mod n (count x)), acc x ]                                        \n    (if (= cnt 0)                                                               \n      acc                                                                       \n    (recur (- cnt 1)                                                            \n           (concat (rest acc) (cons (first acc) '()) ) ))))","user":"564cc055e4b0284900eef676"},{"code":"(fn rotate [n coll]\n  (let [\n        len (count coll)\n        ] (take len (drop (mod n len) (cycle coll)))))\n;; (mod 2 5)\n;; (mod -2 5)","problem":44,"user":"514cfa27e4b019235f6c057d"},{"problem":44,"code":"#(loop [count %1 aseq %2]\n    (println \"count \" count \"aseq \" aseq)\n    (if (zero? count)\n      aseq\n      (if (< 0 count)\n        (recur (dec count)  (reverse (cons (first aseq) (into () (rest aseq)))))\n        (recur (inc count)  (cons (first (reverse aseq)) (reverse (rest (reverse aseq))))))))","user":"5cbc1ee7e4b026601754b9e1"},{"problem":44,"code":"(fn [offset s]\n  (let [c (count s)]\n\t  (take c\n            (drop (mod offset c)\n              \t(cycle s)))))","user":"54f26266e4b024c67c0cf8c5"},{"problem":44,"code":"#( apply concat (reverse \n                 (split-at                   \n                      (mod % (count %2))                   \n                  %2\n                  )\n                 ))","user":"55ed962ae4b0121d4835fddd"},{"problem":44,"code":"(fn [n coll] (take (count coll) (drop (if (< 0 n) (rem n (count coll)) (+ (count coll) (rem n (count coll)))) (cycle coll))))","user":"5e246f92e4b05b4b01516150"},{"problem":44,"code":"(fn my-rotate [rotate-by x]\n  \t(if (neg? rotate-by)\n    \t(reverse (my-rotate (Math/abs rotate-by) (reverse x)))\n      \t(let [modRotate-by (mod rotate-by (count x))]\n    \t\t(apply conj (take modRotate-by x) (reverse (drop modRotate-by x))))))","user":"5764cc01e4b0994c1922fc05"},{"problem":44,"code":"(fn rotate-seq\n   [n coll]\n   (cond\n     (= n 0) coll\n     (> n 0)\n      (rotate-seq (dec n) (concat (rest coll) [(first coll)]))\n     (< n 0)\n      (rotate-seq (inc n) (concat [(last coll)] (butlast coll)))))","user":"60631c2ee4b069485764ddbd"},{"code":"(fn rotate\n  [n s]\n  (let [idx (mod n (count s))\n        [pre post] (split-at idx s)]\n    (concat post pre)))","problem":44,"user":"4fee04a0e4b0678c553fc308"},{"code":"(fn rot-seq [n s]\n  (let [\n       s2 (if (neg? n) (reverse s) s)\n       n2 (if (neg? n) (* -1 n)   n)\n       r (rem n2 (count s2))]\n  (loop [result (vec s2), counter r]\n    (if (zero? counter)\n      (if (neg? n)\n        (reverse result)\n        result)\n      (recur (conj (vec (rest result)) (first result)) (dec counter))\n    ))))","problem":44,"user":"52cf084ce4b07d0d72b27399"},{"problem":44,"code":"(fn rotate [d s] (let [n (mod d (count s))] (concat (drop n s) (take n s))))","user":"55cae949e4b0e31453f649fe"},{"problem":44,"code":"#(if (pos? %1)\n    (take (count %2) (nthrest (cycle %2) %1))\n    (take (count %2) (nthrest (cycle %2) (- (count %2) (- %1 1)))))","user":"53eaa804e4b036ad0777e4ea"},{"problem":44,"code":"(fn rotate-seq [r s]\n  (cond \n   (> 0 r) (rotate-seq (+ (count s) r) s)\n   :else  \n  (cond \n   (= 0 r) s\n   (> 2 (count s)) s\n   :else (rotate-seq (- r 1) (concat (rest s) [(first s)])))))","user":"5b477969e4b02d533a91bc6f"},{"problem":44,"code":"(fn [n s] \n  (let [dir (mod n (count s))]\n    (concat (drop dir s) (take dir s))))","user":"55ad59cde4b03311e7b732a7"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [split-at (mod (+ n (count xs)) (count xs))]\n    (concat (drop split-at xs)\n            (take split-at xs))))","user":"58800fd4e4b0f1effa3b7606"},{"problem":44,"code":"(fn [n coll]\n    (let [c (count coll)\n          t (Math/abs n)\n          i (if (> t c) (- t c) t)\n          f (fn [i coll] (->> (split-at i coll) (reverse) (flatten)))]\n      (if (pos? n)\n        (f i coll)\n        (f (- c i) coll))))","user":"5a9bfd57e4b0d174b936c7d0"},{"problem":44,"code":"(fn [r xs]\n              (let [[a b] (split-at (Math/abs (- (count xs) (mod (- r) (count xs)))) xs)]\n                (concat b a)))","user":"4f9aa2a6e4b0dcca54ed6d0c"},{"problem":44,"code":"(fn rev [n s] (if (= 0 n)\n               s\n              (if (> n 0)\n                (rev (dec n) (concat (rest s) (list (first s))))\n                (rev (inc n) (concat (list (last s)) (butlast s))))))","user":"53e2ac1ae4b036ad0777e3f3"},{"code":"(fn rot [num coll]\n  (if (pos? num)\n      (mapcat identity (reverse (split-at (mod num (count coll)) coll)))\n      (mapcat identity (reverse (split-at (mod (+ (count coll) num) (count coll)) coll)))))","problem":44,"user":"4faafccde4b081705acca209"},{"problem":44,"code":"#(flatten (reverse (split-at (mod %1 (count %2) ) %2)))","user":"5d0e311de4b0cc9c91588251"},{"code":"#(let [s (split-at (mod % (count %2)) %2)]\n  (concat (second s) (first s)))","problem":44,"user":"4f2d5f5de4b0d6649770a05a"},{"code":"(fn [n s]\n  (loop [i n\n         l s]\n    (cond\n      (= i 0) l\n      (> i 0) (recur (dec i) (concat (rest l) [(first l)]))\n      :else (recur (inc i) (concat [(last l)] (butlast l))))))","problem":44,"user":"51899891e4b0288ada3dbdab"},{"problem":44,"code":"(fn [k coll]\n       (let [n (count coll)]\n         (->> coll\n           (cycle)\n           (drop (cond\n                   (zero? k) 0\n                   :default (mod k n)))\n           (take n))))","user":"5af5a8ece4b0cc2b61a3bcac"},{"code":"(fn [n coll]\n  (let [size (count coll), n (mod n size)]\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"4edab806535d10e5ff6f5311"},{"problem":44,"code":"(fn roter [rot coll]\n  (loop [r rot c coll reved false]\n    (if (= r 0)\n      (if reved \n        (reverse c)\n        c)\n  \t  (if (> r 0)\n     \t(recur (dec r)  (concat (rest c) [(first c)]) reved)\n     \t(recur (* -1 r) (reverse c) true)\n    ))))","user":"4e6a676b535d8ccf87e9fedd"},{"code":"(fn [n xs]\n  (let [c (count xs)\n        n (if-not (neg? n) n\n              (- c (mod (* -1 n) c)))]\n    (take c (drop n\n      (flatten (repeat xs))))))","problem":44,"user":"4ee67d74535d93acb0a66861"},{"code":"(fn [rot coll]\n  (let [    n (count coll)\n        start (mod (+ rot n) n)] \n    (for [i (concat (range start n) (range start))] \n      (nth coll i))))","problem":44,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":44,"code":"(fn f [n s]\n  (let [n* (rem n (count s))]\n    (if (pos? n*)\n      (concat (drop n* s) (take n* s))\n      (concat (take-last (unchecked-negate n*) s) (drop-last (unchecked-negate n*) s))\n)))","user":"5d29d837e4b01671435dbc6c"},{"code":"(fn rot [v c]\r\n  (let [len (count c)]\r\n    (take len (drop (mod v len) (cycle c)))))","problem":44,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":44,"code":"(fn rotate-seq [n coll]\n  (let [s (count coll)\n        shift (- s (- n))\n        p (- s (mod shift s))]\n      (concat (take-last p coll) (take (- s p) coll))\n    ))","user":"6051bcfae4b056659d634203"},{"problem":44,"code":"(fn [dir s]\n  (let [dir (mod dir (count s))]\n\t(concat (drop dir s) (take dir s))))","user":"54c779bee4b045293a27f63b"},{"problem":44,"code":"(fn [i coll]\n  (let [j (mod i (count coll))]\n    (concat (drop j coll) (take j coll))))","user":"561ca2eae4b064ca9f4b169b"},{"code":"(fn [n xs]\n  (let [size (count xs)]\n  \t(take \n     \tsize\n        (drop-last \n         \tsize \n         \t(nthnext (cycle xs) (+ size (rem n size)))))))","problem":44,"user":"531490bde4b08068f379ed17"},{"problem":44,"code":"(fn [x col] (#(concat % (drop-last (count %) col)) (nthrest col (.indexOf col (nth col (mod x (count col)))))))","user":"5c481764e4b0e06e1360a3ba"},{"problem":44,"code":"(fn [y x]\n    (apply list\n           (apply conj\n                  (vec (drop (mod y (count x)) x))\n                  (take (mod y (count x)) x)\n                  )))","user":"5a9d64c8e4b0d174b936c7eb"},{"code":"(fn [num coll]\n     (if (neg? num)\n         (let [pointer (mod (Math/abs num) (count coll))]\n             (concat (take-last pointer coll) (take (- (count coll) pointer) coll)))\n         (let [total (count coll)\n               pointer (mod num total)]\n             (concat (take-last (- total pointer) coll) (take pointer coll)))))","problem":44,"user":"53862316e4b06839e8705f0e"},{"problem":44,"code":"(fn [%1 %2]\n  (let [index (mod %1 (count %2))\n        splits (split-at index %2)\n        result  (reduce concat (reverse splits))]\n        result\n    ))","user":"5a71c89ee4b0512ff01cda93"},{"code":"(fn r [n l] \n  (if (zero? n) \n    l\n    (if (> n 0) \n      (r (dec n) (concat (rest l) [(first l)]))\n      (r (inc n) (concat [(last l)] (butlast l))))))","problem":44,"user":"5034b0e1e4b062bc5d7ae167"},{"code":"#(take (% %3) (drop (mod %2 (% %3)) (cycle %3))) count","problem":44,"user":"52d10680e4b07d0d72b273c3"},{"code":"#(let [i (if (< % 0) (+ (count %2) %) %)\n       n (mod i (count %2))]\n  (concat (drop n %2) (take n %2)))","problem":44,"user":"506617c3e4b03d366d7cb2ab"},{"code":"(fn rotate [n xs]\n  (let [x (mod n (count xs))]\n    (concat (drop x xs) (take x xs))))","problem":44,"user":"53287dace4b09d4e7a9b5507"},{"code":"(fn [n coll]\r\n  (take (count coll) (drop (mod n (count coll)) (cycle coll))))","problem":44,"user":"5245af03e4b08ba239308124"},{"problem":44,"code":"#(let [idx (mod %1 (count %2))]\n     (concat (drop idx %2) (take idx %2)))","user":"55d93d24e4b0e31453f64ac6"},{"problem":44,"code":"(fn [n col]\n  (take (count col) (drop (mod n (count col)) (cycle col))))","user":"58c5a08be4b021aa9917ed40"},{"problem":44,"code":"(fn [n coll]\n   (take (count coll) (nthnext (cycle coll) (mod n (count coll)))))","user":"53b14289e4b047364c04448b"},{"code":"(fn ra[n s]\n  (loop [nn n\n         ss s]\n         (if (= nn 0)\n          ss\n          (recur \n            (if (pos? n)\n                (dec nn) (inc nn))\n            (if (pos? n)\n                (concat (rest ss) (list (first ss)))\n                (concat (list (last ss)) (butlast ss)))))))","problem":44,"user":"4f891abde4b033992c121c77"},{"code":"( fn z [n s] \n       \n       (if (= n 0) \n         s \n         (if \n           (< n 0) \n           (z (inc n) (cons (last s)  (butlast s))) \n           (z (dec n) (concat  (rest s) [(first s)])) \n           )\n         )\n       )","problem":44,"user":"50ef3e5de4b0a78662fa2652"},{"code":"(fn [index coll]\n  (let [len (count coll)\n        i (rem (+ len (rem index len)) len)]\n    (println len i (take i coll))\n    (flatten (conj (take i coll) (take-last (- len i) coll)))))","problem":44,"user":"523bde95e4b07becd5be2202"},{"problem":44,"code":"(fn [n xs]\n  (concat (drop (mod n (count xs)) xs) (take (mod n (count xs)) xs)) )","user":"56bca51ae4b0f26550335963"},{"code":"(fn [n coll]\n    (let [idx (mod n (count coll))]\n      (concat (drop idx coll) (take idx coll))))","problem":44,"user":"537e860ae4b06839e8705ea7"},{"problem":44,"code":"(fn [n seq]\n   (take (count seq) (drop (mod n (count seq)) (cycle seq))))","user":"567476bde4b05957ce8c6139"},{"problem":44,"code":"(fn [p vek] (take (count vek) (drop (mod p (count vek)) (cycle vek))))","user":"54b7f217e4b0ed20f4ff6e8f"},{"problem":44,"code":"(fn [step s]\n   (loop [in-step (Math/abs step) in-s s]\n     (if (= in-step 0)\n       in-s\n       (recur (dec in-step)\n              (if (neg? step)\n                (cons (last in-s) (butlast in-s))\n                (concat (rest in-s) (list (first in-s))))))))","user":"53c06438e4b0c98a41f5ccb0"},{"problem":44,"code":"(fn f [n col]\n  (let [ln (count col),\n        an (Math/abs n),\n        shift (if (>= an ln) (- an (*(int(/ an ln)) ln)) an)]\n    (if(neg? n)(concat(take-last shift  col)(take (- ln shift) col))(concat(take-last(- ln shift)col)(take shift col)))))","user":"5515b68de4b055c2f668d4ef"},{"problem":44,"code":"(fn [n coll]\n  (let [len (count coll)\n        [spl-left spl-right] (split-at (mod (+ len n) len) coll)]\n    (concat spl-right spl-left)))","user":"60ade833e4b00e9e6653c494"},{"code":"(fn [i s]\n  (let [ri (mod i (count s))\n        spl (split-at ri s)]\n    (concat (second spl) (first spl))))","problem":44,"user":"4f418eaee4b0d7d3c9f3fce9"},{"problem":44,"code":"(fn rotate\n  [n s]\n  (take (count s) (drop (mod n (count s)) (cycle s)) )\n  )","user":"5ac37d0fe4b0e27600da7718"},{"code":"(fn [n s] (let [c (count s) n (mod n c)] (concat (drop n s) (take n s))))","problem":44,"user":"4f0cc259535d0136e6c22310"},{"problem":44,"code":"(fn\n[p s]\n  (loop [i 0 s2 (vec s) p2 (max p (* p -1))]\n    (if (== i p2)\n      s2\n      (if (> p 0)\n        (recur (inc i) (conj (vec (drop 1 s2)) (first s2)) p2) \n        (recur (inc i) (vec (cons (peek s2) (drop-last s2))) p2)\n)\n        )\n      )\n)","user":"5dd70ee3e4b0948ae9d9ad85"},{"problem":44,"code":"(fn [x coll]\n  (let [s (split-at (mod x (count coll)) coll)]\n    (concat (second s) (first s))))","user":"567c2322e4b05957ce8c61af"},{"problem":44,"code":"(fn seq-rotate [n s]\n  (let [m (mod n (count s))]\n    (->> s\n         (split-at m)\n         reverse\n         (apply concat))))","user":"5ef18431e4b07c55ae4a0529"},{"problem":44,"code":"(fn [n coll]\n  (let [[l r] (split-at (mod n (count coll)) coll)]\n    (concat r l)))","user":"54c31f1be4b045293a27f609"},{"code":"(fn [n coll]\n    (let [cnt (count coll)\n          n (mod (+ cnt n) cnt)]\n      (concat (drop n coll) (take n coll))))","problem":44,"user":"509e8da7e4b08df8156e9e2f"},{"problem":44,"code":"(fn [n seq]\n  (let [size (count seq),\n        n (rem n size),\n        pivot (+ (if (neg? n) size 0) n)]\n    (concat (drop pivot seq) (take pivot seq))))","user":"5a4993c0e4b05d388ecb6b71"},{"problem":44,"code":"#(loop [x (mod % (count %2))\n        y %2]\n   (if (<= x 0)\n     y\n     (recur \n      (- x 1)\n      (into (vec (rest y)) [(first y)]))))","user":"542c2de0e4b0dad94371f29f"},{"problem":44,"code":"#(nth (iterate (fn [[h & r]] (concat r [h])) %2) (let [s (count %2)] (mod (+ s %1) s)))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"code":"(fn rot [d sq]\n  (let [[front back] (split-at (mod d (count sq)) sq)]\n    (concat back front)))","problem":44,"user":"51d19c24e4b0cfcf579466c3"},{"problem":44,"code":"(fn [by xs]\n    (let [[beginning end] (split-at (mod by (count xs)) xs)]\n      (concat end beginning)))","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn [n s] \n  (let [n (mod n (count s))]\n    (concat (drop n s) (take n s))))","problem":44,"user":"4f58fe71e4b0a7574ea7185f"},{"problem":44,"code":"(fn rotate [n coll]\n   (apply concat\n          (-> \n           (->> (count coll)\n                (mod n))\n           (split-at coll)\n           (reverse))))","user":"5b073c34e4b0cc2b61a3bda4"},{"problem":44,"code":"(fn myRotate [n coll]                                     \n  (let [abs (Math/abs n)                                    \n        cnt (count coll)                                   \n        idx (if (< cnt abs)                                 \n              (- abs cnt)\n              abs)]\n    (if (pos? n)                                            \n      (let [nd (subvec (vec coll) idx)                            \n            bg (take idx coll)]                             \n        (flatten (conj nd bg)))\n      (let [nd  (take-last idx coll)                        \n            bg  (take (- cnt idx) coll)]                        \n        (flatten (cons nd bg))))))","user":"5964f9b0e4b069c0a1a19778"},{"problem":44,"code":"(fn\n  [rot coll]\n  (loop [rot rot\n         coll coll]\n    (cond\n      (neg? rot) (recur (inc rot) (cons (last coll) (drop-last coll)))\n      (pos? rot) (recur (dec rot) (flatten (cons (rest coll) [(first coll)])))\n      :else coll)))","user":"53fe1b42e4b0de5c418485f1"},{"problem":44,"code":"(fn [n col] (let [N (mod n (count col)) [a b] (split-at N col)] (concat b a)))","user":"5790e62ae4b0ebec4cfb75b0"},{"problem":44,"code":"(fn [x coll]\n  (first \n   (split-at (count coll) (flatten (reverse (split-at (mod x (count coll)) (flatten (take 3 (repeat coll)))))))))","user":"572a856be4b0f4d77e65123b"},{"problem":44,"code":"(fn rotate [n col]\n  (let [cnt (count col)\n        split-pos (mod\n                    (if (< n 0)\n                           (- cnt (- 0 n))\n                           n)\n                    cnt)\n        [head tail] (split-at split-pos col)]\n    (concat tail head)))","user":"5887518ae4b0f1effa3b76f5"},{"code":"(fn [i xs] (let [n (count xs) i (mod i n) t (#(concat % % %) xs)] (take n (nthnext t (+ i n)))))","problem":44,"user":"514def61e4b019235f6c0591"},{"problem":44,"code":"#(->> %2\n     (split-at (mod % (count %2)))\n     reverse\n     (apply concat))\n\n#_ OR #_ #(let [r (mod %1 (count %2))]\n            (apply concat ((juxt drop take) r %2)))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":44,"code":"(fn [n x]\n  (let [idx (mod n (count x))]\n  (concat (drop idx x) (take idx x))))","user":"602ddebde4b0d5df2af2227d"},{"code":"(fn -rotate [n s]\n  (let [n (mod n (count s))]\n    (concat (drop n s) (take n s))))","problem":44,"user":"4ed2a31c535d44c135fd68db"},{"problem":44,"code":"(fn [n xs]\n  (let [sz (count xs) i (rem n sz)]\n    (flatten ((juxt drop take) (if (> i 0) i (+ sz i)) xs))))","user":"564b495de4b0284900eef667"},{"code":"(fn [n s]\n  (let [r (mod n (count s)) ]\n    (concat (nthrest s r) (take r s))))","problem":44,"user":"52117ea7e4b07aea8afc4f70"},{"code":"(fn\n  [n c]\n  (take (count c)\n    (drop (mod n (count c)) (cycle c))))","problem":44,"user":"4f18677d535d64f603146459"},{"problem":44,"code":"#(loop [ind %1 sq %2]\n   (if (= 0 ind)\n     sq\n     (if (> ind 0)\n       (recur (dec ind) (conj (apply vector (rest sq)) (first sq)))\n       (recur (inc ind) (conj (butlast sq) (last sq)))\n    )\n  )\n)","user":"5e947a69e4b0fbed045a37f8"},{"problem":44,"code":"(fn [n a] (let [offset (mod (max n (- n)) (count a))] (if (pos? n) (concat (drop offset a) (take offset a)) (concat (take-last offset a) (drop-last offset a)))))","user":"544ff52fe4b0e3978000699b"},{"problem":44,"code":"(fn solve [x, y]\n  (let [n (count y)\n        lft (rem x n)\n        a (if (> x 0) lft (+ (count y) lft))]\n    (concat (nthrest y a) (take a y))\n  ) \n)","user":"56f258d3e4b04a395b9a04a1"},{"problem":44,"code":"(fn [idx coll] (flatten ((juxt drop take) (mod idx (count coll)) coll)))","user":"589ec900e4b02bd94d917e65"},{"problem":44,"code":"(fn [x y] (let [cnt (count y) llist (reverse (into () y))]\n            (loop [shft x data llist c cnt result ()]\n            \t(if (= (count data) (count result))\n                  (reverse result)\n                \t(cond\n                     (<= shft (* c -1)) (recur (+ shft c) data c result)\n                     (>= shft c) (recur (- shft c) data c result) \n                     (< shft 0) (recur (inc shft) data c (cons (nth data (+ c shft)) result))\n                     (>= shft 0)\t(recur (inc shft) data c (cons (nth data shft) result))\n                     :else (recur 0 data c result)\n            )))))","user":"567f034be4b0feffd0d18eba"},{"problem":44,"code":"(fn[n xs] (let [c (count xs) pos (mod n c)]\n            (concat (drop pos xs) (take pos xs))))","user":"5339cb07e4b0e30313ee6caf"},{"code":"#(flatten (reverse (split-at (mod (+ (count %2) %) (count %2)) %2)))","problem":44,"user":"50ebd63ce4b04edc3377703c"},{"problem":44,"code":"(fn foo ([xs] (cons (last xs) (butlast xs)))\n  ([n xs] (let [res (rem n (count xs))] (if (< res 0) (foo xs n res) (foo xs n (- res (count xs))))))\n  ( [xs n i]   (if (= i -1) (foo xs) (foo (foo xs) n (inc i) ))) )","user":"6076adb2e4b069485764de60"},{"problem":44,"code":"(fn [n coll]\n  (cond\n   (= 0 n) coll\n   (> 0 n) (recur\n            (+ n\n               (count coll))\n            coll)\n   :else (recur\n          (dec n)\n          (conj (apply\n                 vector\n                 (next coll))\n                (first coll)))))","user":"58ebae90e4b056aecfd47d44"},{"problem":44,"code":"(fn rot [x s]\n  (if (= x 0) \n   s\n   (if (> x 0)\n     (rot (dec x) (concat (rest s) (list (first s))))\n     (rot (inc x) (cons (last s) (butlast s))))))","user":"57501de0e4b02ea11479926c"},{"problem":44,"code":"(fn rot\n  [n xs]\n  (if (= n 0)\n    xs\n    (let [rotl (fn [xs] (concat (rest xs) [(first xs)]))\n          rotr (fn [xs] (cons (last xs) (butlast xs)))]\n      (if (> n 0)\n        (rot (dec n) (rotl xs))\n        (rot (inc n) (rotr xs))\n      )\n    )\n  )\n)","user":"54e0e911e4b024c67c0cf7bc"},{"code":"(fn rotate\n  [x coll] \n\t(let [n (count coll) r (mod x n)] \n\t\t(concat (drop r coll) (take r coll))))","problem":44,"user":"4f047542535dcb61093f6bc7"},{"problem":44,"code":"(fn [n xs]\n  (let [n (mod n (count xs))]\n    (if (zero? n)\n      xs\n      (recur (dec n) (concat (rest xs) (list (first xs)))))))","user":"53800d99e4b06839e8705ebd"},{"problem":44,"code":"(fn [rotate-by s]\n  (let [n (mod (if (neg? rotate-by) (- rotate-by) rotate-by) (count s))]\n    (if (neg? rotate-by)\n      (concat (take-last n s) (take (- (count s) n) s))\n      (concat (take-last (- (count s) n) s) (take n s))\n    )\n  )\n)","user":"540f09b9e4b0addc1aec6725"},{"problem":44,"code":"(fn [n coll]\n  (cond\n   (< n 0) (recur (inc n) (cons (last coll) (drop-last 1 coll)))\n   (> n 0) (recur (dec n) (concat (rest coll) [(first coll)]))\n   (= n 0) coll))","user":"57642916e4b0994c1922fbee"},{"problem":44,"code":"(fn [n coll]\n  (let [m (mod n (count coll))]\n    (if (> m 0) \n      (concat (drop m coll) (drop-last (- (count coll) m) coll))\n      (concat (drop (+ (count coll) m) coll) (drop-last (- 0 m) coll)))))","user":"544b9df2e4b0e39780006968"},{"code":"#(take (count %2)\r\n  (drop (mod % (count %2))\r\n  (cycle %2)))","problem":44,"user":"4dce6e41535d5973398f92a2"},{"problem":44,"code":"(fn [r coll] (let [l (count coll) n (mod r l)] (take l (drop n (cycle coll)))))","user":"573632b7e4b0cd1946bd102f"},{"code":"(fn [rotations seqn]\n  (let [rots (mod rotations (count seqn))]\n    (concat (drop rots seqn) (take rots seqn))))","problem":44,"user":"4ea4fe1f535d7eef308072cf"},{"problem":44,"code":"(fn rot-n [rot cols]\n  (if (pos? rot)\n    (let [rot (mod rot (count cols))]\n      (concat (nthrest cols rot) (take rot cols)))\n    (let [rot (mod (* -1 rot) (count cols))]\n     (concat (take-last rot cols) (drop-last rot cols)))))","user":"5e692be9e4b04a83ad7cd269"},{"code":"#(let [c (count %2) s (mod (+ % c) c)] (concat (drop s %2) (take s %2)))","problem":44,"user":"50e3fe8fe4b0463d32072488"},{"problem":44,"code":"(fn [n col] (let [nn (mod n (count col))] (take (count col) (drop nn (cycle col)))))","user":"55b77c7ce4b01b9910ae29a3"},{"code":"(fn [n l]\n  (let [move (rem n (count l))\n        get (fn [move l]\n              (concat (drop move l) (take move l)))]\n    (if (> n 0) (get move l) (get (+ (count l) move) l))))","problem":44,"user":"5047782ce4b0371827a27bc2"},{"problem":44,"code":"(fn [n col]\n  (let [size (count col), p (mod n size)]\n    (concat (drop p col) (take p col))))","user":"5e9f38cce4b00a66d4a9517e"},{"code":"(fn [n coll]\r\n  (let [pos-ro (fn [c] (concat (rest c) (take 1 c)))\r\n        neg-ro (fn [c] (concat [(last c)] (butlast c)))\r\n        ro-fn (if (pos? n) pos-ro neg-ro)\r\n        rec-fn (if (pos? n) inc dec)]\r\n    (loop [i 0 c coll]\r\n      (if-not (= i n)\r\n        (recur (rec-fn i) (ro-fn c))\r\n        c))\r\n    )\r\n  )","problem":44,"user":"4f6d9d8de4b07046d9f4efce"},{"problem":44,"code":"(fn [n s]\n  (let [m (mod n (count s))\n        n' (if (< m 0)\n             (+ 1 (Math/abs m))\n             m)]\n    (concat (drop n' s)\n            (take n' s))))","user":"57aa4775e4b0b8559636fc6b"},{"code":"(fn [n s] (let [x (mod n (count s)) ] (concat (drop x s) (take x s))))","problem":44,"user":"4ef77edb535dced4c769f254"},{"problem":44,"code":"(fn [n coll] (let [m (mod n (count coll))] (concat (drop m coll) (take m coll))))","user":"578d459ee4b0ebec4cfb7567"},{"problem":44,"code":"(fn\n  [n s]\n    (let [m (mod (+ (count s) n) (count s))]\n\t  (concat (nthrest s m) (take m s))))","user":"58ec8c7ae4b056aecfd47d64"},{"code":"(fn rotate [k xs]\n    (let [k' (mod k (count xs))\n          [left right] (split-at k' xs)]\n      (concat right left)))","problem":44,"user":"508157b2e4b0946d0443855c"},{"code":"(fn myrotate [n a] ( if\n  (= n 0) a\n  (myrotate \n (dec\n    (mod n (count a)))\n    (concat (rest a)\n      (list (first a))))))","problem":44,"user":"51340abbe4b0915833951877"},{"code":"(fn f [n col]\n   (if (= 0 n)\n     col\n     (if (> n 0)\n       (f (dec n) (conj (vec (rest col)) (first col)))\n       (f (inc n) (cons (last col) (drop-last col)))\n       )))","problem":44,"user":"4ffa8affe4b0678c553fc3bd"},{"code":"(fn [n coll]\n  (let [m (mod n (count coll))]\n    (concat (drop m coll) (take m coll))))","problem":44,"user":"506b8242e4b0eda3100c090a"},{"code":"(fn [n s] (let [n (if (< n 0) (+ (count s) n) n) n (mod n (count s))] (concat (drop n s) (take n s))))","problem":44,"user":"4ff3df0fe4b0678c553fc355"},{"problem":44,"code":"(fn [x xs] (loop [count x list (apply vector xs)]\n  (if (= 0 count)\n    list\n    (if (> count 0)\n      (recur (dec count) (conj (apply vector (rest list)) (first list)))\n      (recur (inc count) (apply vector (cons (last list) (pop list))))\n    )\n  )))","user":"55d79b87e4b0e31453f64aa8"},{"code":"(fn rotate[n coll]\n  (let [[a b] (split-at (mod (+ n (count coll)) (count coll)) coll)]\n    (flatten (concat b a))))","problem":44,"user":"51d96ad0e4b02ceefd94774f"},{"problem":44,"code":"(fn [n xs] \n  (let [len (count xs) m (mod (+ len n) len)]\n    (concat (drop m xs) (take m xs))))","user":"56b35565e4b0982f16b37e16"},{"problem":44,"code":"(fn [shift coll]\n  (let [to-drop (if (neg? shift) (- (count coll) (mod (- shift) (count coll))) shift)]\n  (->> coll\n       cycle\n\t   (drop to-drop)\n       (take (count coll)))))","user":"55912230e4b027778923767a"},{"code":"(fn [nn coll] \n  (let [c (count coll) n (rem nn c)]\n    (if (> n 0)\n      (concat (drop n coll) (take n coll))\n      (let [k (+ c n)] (concat (drop k coll) (take k coll)))\n    )\n  )\n)","problem":44,"user":"4ffb38e8e4b0678c553fc3c6"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (let [r-left (fn \n                 [coll]\n                 (conj (vec (rest coll)) (first coll))) \n        r-right (fn \n                  [coll]\n                  (cons (last coll) (butlast coll)))]\n    (if (= 0 n)\n      coll\n      (if (< n 0)\n        (rotate (inc n) (r-right coll))\n        (rotate (dec n) (r-left coll))))))","user":"5401aefbe4b0df28a13c62c7"},{"problem":44,"code":"(fn rotate-sequence\n  [pivot coll]\n  (let [length (count coll)\n        positive-pivot? (> pivot 0)\n        new-pivot (if positive-pivot?\n                    (if (>= length pivot) pivot (- pivot length))\n                    (if (>= length (Math/abs pivot)) (+ length pivot) (+ pivot (* 2 length))))]\n    (concat (drop new-pivot coll) (take new-pivot coll))))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":44,"code":"(fn [n xs] (let [m (mod (if (pos? n) n (* -1 n)) (count xs))]\n             (if (pos? n)\n               (concat (nthrest xs m) (take m xs))\n\t           (concat (take-last m xs) (drop-last m xs)))))","user":"52aeac84e4b0c58976d9acaf"},{"problem":44,"code":"(fn [n xs]\n  (let [l (count xs)\n        an (Math/abs n)\n        m (mod an l)]\n    (if (>= n 0)\n      (concat (drop m xs) (take m xs))\n      (concat (drop (- l m) xs) (take (- l m) xs)))))","user":"5947c6a6e4b07ddc2dafada7"},{"problem":44,"code":"(fn [n xs]\n  (-> n\n    (+ (count xs))\n    (mod (count xs))\n    (split-at xs)\n    reverse\n    (->> (apply concat))))","user":"5393185ae4b0b51d73faaeb7"},{"problem":44,"code":"(fn [n coll]\n  (letfn [(left-rotate [coll] (concat (rest coll) (list (first coll))))\n          (right-rotate [coll] (concat (list (last coll)) (drop-last coll)))]\n    (cond\n     (= n 0) coll\n     (> n 0) (nth (take (inc n) (iterate left-rotate coll)) n)\n     :eles (nth (take (inc (- n)) (iterate right-rotate coll)) (- n)))))","user":"5be58beae4b0ed4b8aab4d14"},{"code":"(fn [n coll]\n    (cond (zero? n) coll\n          (pos? n) (recur (dec n) (concat (next coll) (list (first coll))))\n          (neg? n) (recur (inc n) (concat (list (last coll)) (butlast coll)))))","problem":44,"user":"500d3160e4b05f7c30cfa6a1"},{"code":"#(concat (drop (mod %1\n  \t\t (count %2))\n\t\t    %2)\n\t      (take (mod %1 (count %2))\n\t\t    %2))","problem":44,"user":"4ec6157b535d6d7199dd36c2"},{"problem":44,"code":"(fn [r c]\n   (let [m (mod r (count c))]\n     (concat (drop m c) \n             (take m c))))","user":"52435d0ce4b076204b44fab5"},{"code":"(fn [length input]\n  (let [n (mod length (count input))]\n    (concat (drop n input) (take n input))))","problem":44,"user":"528bba38e4b0239c8a67aea9"},{"problem":44,"code":"#(let [n (count %2)]\n  (->> (cycle %2) (drop (mod %1 n)) (take n) ))","user":"58ca8a1de4b03c36ff7e5835"},{"code":"(fn [n xs]\n  (let [n (mod n (count xs))\n        [a b] (split-at n xs)]\n    (concat b a)))","problem":44,"user":"52cca96ae4b07d0d72b2736e"},{"code":"(fn [r n]\n  (let [c (count n)]\n    (if (< 0 r c)\n      (concat (drop r n)(take r n))\n      (recur (mod r c) n))))","problem":44,"user":"4e599577535d8a8b8723a29f"},{"code":"#(let [n (mod %1 (count %2))]\n   (flatten (reverse (split-at n %2))))","problem":44,"user":"512d3304e4b040332b905b2d"},{"problem":44,"code":";take in a number n and seq\n;shift the seq by n\n;since we have to deal n > size and n < 0\n;we use mod to overcome this.\n; -2 mode 5 = 3\n(fn [dir s]\n  (let [n (mod dir (count s))]\n    (concat (drop n s) (take n s))))","user":"570794d8e4b0b0fb43fd068b"},{"problem":44,"code":"(fn [x v] (concat (drop (mod x (count v)) v) (take (mod x (count v)) v)))","user":"5e7bb000e4b085ba37836e1d"},{"problem":44,"code":"(fn better-rotate\n   [n s]\n   (let [length (count s)\n         mod_n (mod n length)]\n     (concat (drop mod_n s) (take mod_n s))))","user":"552d487ee4b076ab5578f7e4"},{"code":"(fn [n s]\n    (let [offset (mod n (count s))\n    \t  spl (split-at offset s)]\n        (concat (second spl) (first spl))))","problem":44,"user":"5262c73fe4b03e8d9a4a7098"},{"problem":44,"code":"(fn [index input]\n  (flatten \n    (reverse \n      (split-at\n        (mod index \n          (count input))\n       input))))","user":"5e078ba7e4b0978307768fb6"},{"problem":44,"code":"(fn rotate [n v]\n     (-> (split-at (mod n (count v)) v)\n         (reverse)\n         (flatten)\n         ))","user":"58a44a14e4b01a0c0b2328f2"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (let [offset (mod n (count coll))]\n    (concat (drop offset coll) (take offset coll))))","user":"6098263be4b00e9e6653c3f9"},{"code":"(fn [n xs]\n  (let [size (count xs)\n        number (mod n size)]\n    (take size (drop number (apply concat (repeat xs))))))","problem":44,"user":"52b9c62ce4b07a9af57922c3"},{"problem":44,"code":"#(let [x (mod %1 (count %2)) y (if (neg? x) (+ (count %2) x) x)] (concat (drop y %2) (take y %2)))","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":44,"code":"#(let [c (count %2)\n        x (if (< %1 0) (mod (+ c %1) c) (mod %1 c))]\n   (concat (drop x %2) (take x %2)))","user":"5454bb07e4b0e397800069da"},{"problem":44,"code":"#(let [rotate-n % \n       my-seq %2 \n       size-seq (count my-seq)\n       step (mod rotate-n size-seq)]\n;; The mod function is defined as the amount \n;; by which a number exceeds the largest integer multiple of the divisor \n;; that is not greater than that number.\n;; The largest integer multiple of 5 not greater than -2 is 5 * -1 = -5. \n;; The amount by which -2 exceeds -5 is 3.\n;; user=> (mod -2  5)\n;; => 3   \n (take size-seq (drop step (cycle my-seq))))","user":"4ec7c32c535d6d7199dd36e6"},{"problem":44,"code":"(fn [n v] (let [n (mod n (count v))] (concat (drop n v) (take n v))))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":44,"code":"(fn rot [n v]\n  (let [v (vec v)]\n    (if (= 0 n)\n      v\n      (if (> n 0)\n        (; rotate left\n         rot (- n 1) (conj (vec (rest v)) (first v)))\n        (; rotate right\n         rot (+ n 1) (vec (list* (last v) (pop v))))))))","user":"54d4bd2be4b0a52adc2e2005"},{"code":"(fn [n s]\n  (let [c (count s)]\n   (take c (drop (mod n c) (cycle s)))))","problem":44,"user":"50acbd15e4b071b89ef26234"},{"problem":44,"code":"(fn [n a]\n   (let [c (count a)]\n     (cond\n      (> n c) (flatten (list (drop (- n c) a) (take (- n c) a)))\n      (< n 0) (let [abs (- n)]\n               (if (> abs c)\n                 (flatten (list (take-last (- abs c) a) (drop-last (- abs c) a)))\n                 (flatten (list (drop (/ c abs) a) (take (/ c abs) a)))))\n      :else   (flatten (list (drop n a) (take n a))))))","user":"5eccc5c2e4b016b56eae058f"},{"problem":44,"code":"(fn [n xs]\n  (loop [n n xs xs]\n    (cond\n     (pos? n) (recur (dec n)\n                     (concat (rest xs)\n                             [(first xs)]))\n     (neg? n) (recur (inc n)\n                     (concat [(last xs)]\n                             (butlast xs)))\n     :else xs)))","user":"4f387c2ee4b0e243712b1edd"},{"problem":44,"code":"(fn [d c]\n  (let [t (count c)]\n  (take t (drop (+ (mod d t) t) (cycle c))))\n    )","user":"58840023e4b0f1effa3b768b"},{"code":"(fn rotate [n s]\n  (if (zero? n)\n    s   \n    (if (pos? n)\n      (rotate (dec n) (concat (rest s) (list (first s))))\n      (rotate (inc n) (cons (last s) (drop-last s))))))","problem":44,"user":"52ec1dfbe4b0705949c4444b"},{"problem":44,"code":"(fn eh [n x]\n  (if (= 0 (mod n (count x)))\n    (vec x)\n    (eh (- n 1) (conj (vec (rest x)) (first x)))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":44,"code":"(fn rotate-seq\n  [x xs]\n  (let [xs (vec xs)\n        len (count xs)]\n    (loop [i x\n           res []]\n      (cond\n       (= (count res) len) res\n       (< i 0) (recur (+ len i) res)\n       (>= i len) (recur (rem i len) res)\n       :else (recur (inc i) (conj res (get xs i)))))))","user":"54f39cd6e4b050824f58f5c6"},{"code":"(fn f [n s]\r\n  (let [s (vec s) c (count s)]\r\n    (cond\r\n      (< n 0) (f (+ n 1) (concat (list (s (- c 1)))\r\n                                 (subvec s 0 (- c 1)) ))\r\n      (> n 0) (f (- n 1) (conj (subvec s 1) (s 0)))\r\n      true s ) ) )","problem":44,"user":"4df20dda535d08e6dec9fe23"},{"code":"#(let [n (mod (if (> %1 0)\n                 %1\n                 (+ (count %2) %1))\n               (count %2))]\n    (concat (nthnext %2 n) (take n %2)))","problem":44,"user":"4fa11204e4b0dcca54ed6d56"},{"code":"(fn rot [n coll]\r\n  (cond\r\n    (zero? n) coll\r\n    (pos? n)\r\n    (let [[x & rxs] coll]\r\n      (rot (dec n) (concat rxs [x])))\r\n    (neg? n)\r\n    (reverse (rot (- 0 n) (reverse coll)))))","problem":44,"user":"4dfd4ba8535d04ed9115e781"},{"problem":44,"code":"(fn [n l]\n  (let [c (mod n (count l))]\n    (concat (drop c l) (take c l))))","user":"56051095e4b08b23635d3162"},{"problem":44,"code":"(fn[n coll]\n  (let[n (mod n (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"55101237e4b06e50f9beb181"},{"code":"(fn [amt rotl]\r\n  (let [rot (mod amt (count rotl))\r\n        rota (* -1 rot)]\r\n    (if (pos? rot)\r\n      (concat (drop rot rotl) (take rot rotl))\r\n      (concat (take-last rota rotl (drop-last rota rotl))))))","problem":44,"user":"4e9528ef535dbda64a6f6b32"},{"problem":44,"code":"(fn rot [n s]\n  (cond\n    (neg? n) (rot (+ (count s) n) s)\n    (zero? n) s\n    true (rot (dec n)\n              (reverse (cons (first s)\n                             (reverse (rest s)))))))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"(fn [r x] (let [c (count x) n (if (pos? r) r (mod r (count x)))] (take c (drop n (cycle x)))))","problem":44,"user":"4e5914e0535d8a8b8723a29b"},{"problem":44,"code":"(fn [n seq]\n  (let [size (count seq)\n        m (if (> n 0)\n            (mod n size)\n            (- size (mod (- n) size)))]\n    (->> (cycle seq)\n         (drop m)\n         (take size))))","user":"564c7c95e4b0284900eef672"},{"problem":44,"code":"#(let [i (if (< %1 0) (+ (count %2) (rem %1 (count %2))) (rem %1 (count %2)))] (flatten (apply conj (split-at i %2))))","user":"56f5d0efe4b046a417f92078"},{"problem":44,"code":"(fn [rot xs] (let [rot (mod (if (neg? rot) (+ (count xs) rot) rot) (count xs))] (concat (drop rot xs) (take rot xs))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"code":"(fn [n c] (let [d (mod n (count c))]\n             (concat (drop d c) (take d c))))","problem":44,"user":"4eb02674535d7eef30807338"},{"problem":44,"code":"#(let [l (count %2) y (rem %1 l) s (if (> y 0) y (+ l y)) v (vec %2)] (concat (subvec v s) (subvec v 0 s)))","user":"57086931e4b0b0fb43fd069e"},{"problem":44,"code":"(fn rotate [x coll]\n  (cond (= x 0) coll\n    (> x 0) (rotate (- x 1) (concat (rest coll) [(first coll)]))\n    (< x 0) (rotate (+ x 1) (concat [(last coll)] (butlast coll)))))","user":"55630cc1e4b0c656e3ff17e0"},{"problem":44,"code":"(fn [pivot s]\n    (let [c (count s)\n          idx (if (or (< pivot 0) (>= pivot c))\n                (mod pivot c)\n                pivot)]\n      (apply concat (reverse (split-at idx s)))))","user":"5d28d935e4b092dab7f59c88"},{"problem":44,"code":"(fn rot[n s]\n  (let [c (count s)\n        i (mod n c)] ; mod treats the negative n exactly like we need !\n    (concat (drop i s) (take i s))))","user":"573a0ecce4b0cd1946bd1088"},{"problem":44,"code":"(fn [n coll]\n  (let [remn (rem n (count coll))\n        actn (if (< n 0) (+ (count coll) remn) remn)\n        t (take actn coll)\n        h (drop actn coll)]\n    (concat h t)\n  )\n  \n)","user":"5d07989ee4b0cc9c915881fb"},{"problem":44,"code":"#(let [c (count %2) r (mod (+ c (mod % c)) c)] (concat (drop r %2) (take r %2)))","user":"505106fee4b05ab4c7e07d38"},{"problem":44,"code":"#(take \n  (count %2) \n  (drop \n   (mod %1 (count %2)) \n   (cycle %2)))","user":"543d5c61e4b032a45b86934d"},{"problem":44,"code":"#(let [i (mod %1 (count %2))]\n    (concat (drop i %2) (take i %2)))","user":"52e851bfe4b09f7907dd149a"},{"code":"(fn [n xs]\n  (let [count-xs (count xs)]\n    (take count-xs (drop (mod n count-xs) (cycle xs)))))","problem":44,"user":"52a503e4e4b0c58976d9abe1"},{"problem":44,"code":"(fn [a,b]\n  (let [c (count b)]\n    (if (and (> c a) (< 0 a))\n      (drop a (take (+ c a) (cycle b)))\n      (if (> c (* -1 a))\n        (drop (+ a c) (take (+ a (* 2 c)) (cycle b)))\n        (if (> a c)\n          (drop (- a c) (take c (cycle b)))\n          (if (> (* -1 a) c)\n            (drop (+ 1 (* -1 a)) (take (+ c (* -1 a) 1) (cycle b)))\n            (if (= a c)\n              (identity b)\n              (str \"error\"))))))))","user":"5fc4d277e4b06ffabd1ef72a"},{"problem":44,"code":"(fn [c s]\n  (let [n (count s)\n        m (mod c n) ]\n    (take n (drop m (cycle s)))))","user":"4fc4eb1ee4b081705acca354"},{"problem":44,"code":"(fn rotate [n s]\n  (let [index (mod n (count s))\n        [l r] (split-at index s)]\n    (flatten (list r l))))","user":"53710c09e4b0fc7073fd6ea5"},{"problem":44,"code":"(fn rotate-sequence [x seq]\n (let [new-x (if (> x 0)\n              (mod x (count seq))\n              (+ (mod x (* -1 (count seq))) (count seq)))]\n  (concat (drop new-x seq) (take new-x seq))))","user":"540271aee4b0df28a13c62d0"},{"code":"(fn [shift l]\n  (map \n      #(nth l (mod %1 (count l)))\n      (take (count l) (iterate inc shift))))","problem":44,"user":"4f70bcf9e4b07046d9f4effe"},{"problem":44,"code":"(fn [n s]\n  (if (= n 0)\n    s\n    (if (< n 0)\n      (recur (inc n) (concat (list (last s)) (drop-last s)))\n      (recur (dec n) (concat (rest s) (list (first s)))))))","user":"54651faee4b01be26fd746d6"},{"problem":44,"code":"#(let [i (rem %1 (count %2))\n       k (if (neg? i) (+ (count %2) i) i)]\n   (loop [j k s %2]\n     (if (pos? j)\n       (recur (dec j) (conj (into [] (drop 1 s)) (first s)))\n       s)))","user":"57c94c54e4b05aa3c4741d2c"},{"code":"#(if (< 0 %)\n   (concat (drop (rem % (count %2)) %2)\n           (take (rem % (count %2)) %2))\n   (concat (drop (rem (inc (- %)) (count %2)) %2)\n           (take (rem (inc (- %)) (count %2)) %2)))","problem":44,"user":"4fdbc075e4b05e33b9224f61"},{"problem":44,"code":"(fn\n  [n s]\n  (let [l (count s)\n        cor-fac (Math/abs (- n (* l (quot n l))))\n        normn (if (< n 0) (- l cor-fac) cor-fac)]\n    (concat (drop normn s) (take normn s))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":44,"code":"(fn [n coll]\n   (let [coll-count (count coll)\n         shift (mod n coll-count)]\n    (concat (drop shift coll) (take shift coll))))","user":"5e724492e4b085ba37836dc7"},{"code":"(fn [n items]\n\t\t      (if (pos? n)\n\t\t\t((apply comp (repeat n #(seq (conj (vec (next %)) (first %))))) items)\n\t\t\t((apply comp (repeat (- n) #(conj (butlast %) (last %)))) items)))","problem":44,"user":"4e68fad4535d8ccf87e9fe93"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [x (mod (Math/abs n) (count coll))]\n    (if (< n 0) \n      (concat (take-last x coll) (drop-last x coll))\n      (concat (drop x coll) (take x coll)))))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":44,"code":"(fn [n s] (let [i (mod n (count s))] (concat (drop i s) (take i s))))","user":"53aa1528e4b047364c04443f"},{"code":"(fn [n c]\n  (let [p (mod n (count c))]\n    (concat (drop p c) (take p c))))","problem":44,"user":"4eccb190535d23f0362276fe"},{"problem":44,"code":"(fn [n coll]\n  (let [vecRot (fn [i c]\n                 (loop [j i res (vec c)]\n                 (if (= j 0)\n                   res\n                   (recur (dec j) (subvec (conj res (first res)) 1))\n                   )))]\n    (cond\n      (= n 0) coll\n      (> n 0) (seq (vecRot n coll))\n      (< n 0) (into '() (vecRot (- n) (reverse coll)))\n    ))\n  )","user":"5471f2fbe4b094393f72dd70"},{"problem":44,"code":"#( cond (= 0 %1) %2 (> %1 0) (recur (dec %1) (concat (drop 1 %2) (take 1 %2))) :else (recur (+ %1 (count %2)) %2))","user":"5686b7c7e4b0dcc4269f4057"},{"code":"#(let [index (mod % (count %2))] (concat (nthnext %2 index) (take index %2)))","problem":44,"user":"4f04b66b535dcb61093f6bdd"},{"problem":44,"code":"(fn [num lst]\n  (map #(nth lst (mod (+ num %) (count lst))) (range (count lst))))","user":"565cbf9ee4b068f2fe63dc18"},{"problem":44,"code":"#(let [rot (mod %1 (count %2))] \n   (concat (drop rot %2) (take rot %2)))","user":"5cb556f9e4b026601754b934"},{"problem":44,"code":"(fn [n xs]\n  (let [c (count xs)]\n    (->> xs cycle (drop (mod n c)) (take c))))","user":"597dcb0ce4b0dbe32238d0a2"},{"problem":44,"code":"(fn [n coll]\n  (let [size (count coll)\n        div (mod n size)\n        right (take-last (- size div) coll)\n        left (take div coll)]\n    (concat right left)))","user":"592334c7e4b0a390037439ee"},{"problem":44,"code":"(fn [z coll]\n  (let [s (mod z (count coll))] \n    (apply concat (reverse (split-at s coll)))))","user":"575ef4b6e4b08062f99a4e78"},{"problem":44,"code":"(fn [n lst]\n  (if (empty? lst)\n    ()\n    (let [x (rem n (count lst))\n          y (count lst)]\n      (if (< x 0)\n        (concat (drop (+ y x) lst) (take (+ y x) lst))\n        (concat (drop x lst) (take x lst))\n      )\n    )\n  )\n)","user":"5a984657e4b0d174b936c78a"},{"problem":44,"code":"(fn [p coll]\n   (let [x (if (< p (* -1 (count coll))) (+ (* 2 (count coll)) p) (if (< p 0) (+ (count coll) p)\n                       (if (> p (count coll)) (- p (count coll))\n                                                p)))\n         c (take x coll)]\n     (flatten (conj c (rest (drop (- x 1) coll))))))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":44,"code":"(fn rotate [n coll]\n   (let [rot (mod n (count coll))]\n     (concat (drop rot coll) (take rot coll))))","user":"5ab23c99e4b073f1774425e2"},{"code":"(comp (partial apply concat) reverse #(split-at (mod % (count %2)) %2))","problem":44,"user":"516c4c08e4b06f078fab251d"},{"problem":44,"code":"(fn f [i c]\n   (cond ;; terrrrrrrible\n    (= i 0) c\n    (> i 0) (f (dec i) (concat (rest c) (list (first c))))\n    (< i 0) (f (inc i) (take (count c) (cons (last c) c)))\n       ))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":44,"code":"(fn [offset coll]\n  (let [n (mod offset (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"542cb77ae4b0dad94371f2aa"},{"code":"(fn rotate-seq [x y]\n  (let [ycount (count y)\n        dropcount (mod x ycount)]\n    (->> (cycle y)\n         (drop dropcount)\n         (take ycount))))","problem":44,"user":"51f82769e4b09be9c177e527"},{"problem":44,"code":"(fn [n xs] (take (count xs) (drop (mod n (count xs)) (mapcat identity (repeat xs)))))","user":"5485b402e4b0e286459a11b0"},{"code":"(fn [n lst]\n  (let [c (count lst)\n        s (mod n c)]\n    (concat (take-last (- c s) lst) (take s lst))))","problem":44,"user":"51d4ed02e4b013d740b70dec"},{"problem":44,"code":"(fn [r s] (let [a (mod r (count s))]\n  (take (count s) (drop a (flatten (repeat s))))))","user":"5515649fe4b055c2f668d4e3"},{"problem":44,"code":"(fn [n s]\n  \t\t(if (> n 0)\n    \t\t(loop [tmpn n tmps s]\n      \t\t\t(if ( = tmpn 0)\n        \t\ttmps\n        \t\t(recur (dec tmpn) (concat (rest tmps) (list (first tmps))))))\n    \t\t(loop [tmpn n tmps s]\n      \t\t\t(if (= tmpn 0)\n        \t\ttmps\n        \t\t(recur (inc tmpn) (concat (list (last tmps)) (butlast tmps)))))))","user":"59368ccae4b02506e01a2979"},{"problem":44,"code":"(fn [n coll]\n  (let [i ((fn [x size]\n  (cond\n   (< x 0) (if (> (* x -1) size)\n             (+ x size)\n             x\n             )\n   (> x size) (- x size)\n   :else x)) n (count coll))]\n    (if (> i 0)\n      (concat (drop i coll) (take i coll))\n      (concat (take-last (* i -1) coll) (drop-last (* i -1) coll))\n      )))","user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":44,"code":"(fn foo [n s]\n\t(let [c (count s) r (rem n c)]\n\t\t(if (neg? r) \n\t\t\t(concat (drop (+ c r) s) (take (+ c r) s))\n\t\t\t(concat (drop r s) (take r s)))))","user":"56a01895e4b0542e1f8d149f"},{"problem":44,"code":"(fn rotate\n  [nbr col]\n  (if (> nbr 0)\n    (concat (drop (mod nbr (count col)) col) (take (mod nbr (count col)) col))\n    (concat (drop (mod nbr (count col)) col) (take (mod nbr (count col)) col))))","user":"5c3f6322e4b08cd430848e97"},{"problem":44,"code":"(fn [r xs]\n    (let [r' (mod r (count xs))]\n      (concat (drop r' xs) (take r' xs))))","user":"5c165d3ee4b01240ff5671d1"},{"code":"(fn [n x]\n     (let [sides (split-at (mod n (count x)) (vec x))]\n     (reverse \n       (reduce\n         #(cons %2 %1)\n         (empty x)\n         (concat (sides 1) (sides 0))))))","problem":44,"user":"4f4d7b8fe4b03ad3f0c10ca9"},{"problem":44,"code":"(fn [rotate col] \n  \t(map-indexed \n     \t(fn [idx item] \n          (.get col (mod (+ idx rotate) (count col)))\n        )\n     \tcol\n    )\n)","user":"53d5e45ae4b0e771c302544e"},{"problem":44,"code":"(fn [n x] (let [c (mod n (count x))](concat (drop c x) (take c x))))","user":"60329afce4b0d5df2af222b8"},{"problem":44,"code":"(fn [n coll] (let [n-mod (mod n (count coll))] (concat (drop n-mod coll) (take n-mod coll))))","user":"5227eacee4b0186687e23a5e"},{"problem":44,"code":"(fn [i s]\n  (let [c (split-at (mod i (count s)) s)]\n    (concat (second c) (first c))))","user":"53573d70e4b04ce2eb3ed278"},{"code":"(fn [shift array]\n   (let [len (count array)\n         m (mod shift len)\n         mm (if (pos? m) m (- len m))]\n     (println len m mm shift)\n     (concat (drop mm array) (take mm array))))","problem":44,"user":"506c0a02e4b0eda3100c090d"},{"code":"#(let [x (mod %1 (count %2))] (concat (nthrest %2 x) (take x %2)))","problem":44,"user":"4fea2de5e4b0140c20fb9bfe"},{"problem":44,"code":"#(let [[s1 s2] (split-at (mod %1 (count %2)) %2)]\n       (concat s2 s1))","user":"54898297e4b0e286459a11e7"},{"code":"#(take (count %2) (drop (if (< %1 0) (inc (* -1 %1)) %1) (cycle %2 ) ) )","problem":44,"user":"5311cd03e4b08068f379ecef"},{"problem":44,"code":"(fn rotate [x lst]\n  (let [index (mod x (count lst))]\n    (concat (drop index lst) (take index lst))))","user":"5f9567cce4b0715f5002d7c7"},{"problem":44,"code":"(fn [n coll]\n  (let [len (count coll)\n        m (mod n len)\n        [pre post] (split-at m coll)]\n    (concat post pre)))","user":"585e2e77e4b0f14aab7c87ac"},{"code":"#(->> (split-at (mod %1 (count %2))\n                %2)\n      (reverse)\n      (apply concat))","problem":44,"user":"4fca1cd6e4b0ee37620e184c"},{"code":"(fn [n r]\n   (let [it (if (pos? n) n (- n))\n         move (if (pos? n)\n                #(concat (next %) [(first %)])\n                #(cons (last %) (drop-last %)))]\n     (loop [coll r l it]\n       (if (zero? l)\n         coll\n         (recur (move coll) (dec l)))))\n   )","problem":44,"user":"52527192e4b0541d1855b8af"},{"problem":44,"code":"(fn [n s]\n   (let [mirror #(concat (reverse (take %1 %2)) (reverse (drop %1 %2)))\n         n (mod n (count s))]\n     (if (neg? n)\n       ((comp (partial mirror (- n)) reverse) s)\n       ((comp reverse (partial mirror n)) s))))","user":"5faef622e4b08cb800c85b05"},{"problem":44,"code":"(fn [degree c]\n   (reduce #(concat %1 %2) '() (reverse (split-at (rem (+ (count c) (rem degree (count c))) (count c)) c))))","user":"52fac708e4b047fd55836fff"},{"code":"(fn [cnt seq1]\n  (if (zero? cnt)\n    seq1\n    (let [new-seq (if (pos? cnt)\n                    (concat (rest seq1) [(first seq1)])\n                    (concat [(last seq1)] (drop-last seq1)))\n          new-cnt (if (pos? cnt) (dec cnt) (inc cnt))]\n      (recur new-cnt new-seq))))","problem":44,"user":"4faa5735e4b081705acca1ee"},{"code":"(fn [n xs]\n  (#(concat (second %1) (first %1))\n   (split-at\n    (mod n (count xs)) xs)))","problem":44,"user":"4f94d3a5e4b0dcca54ed6cc5"},{"code":"(fn [n s]\n  (map #(nth s %) (map #(mod % (count s)) (range n (+ n (count s))))))","problem":44,"user":"538be6afe4b0640c7a9a58c9"},{"code":"#(let [rleft (fn [coll] (concat (rest coll) [(first coll)]))\r\n      rright (fn [coll] (-> coll reverse rleft reverse))]\r\n  (last (if (< %1 0) (take (inc (- %1)) (iterate rright %2)) (take (inc %) (iterate rleft %2)))))","problem":44,"user":"4f03822f535dcb61093f6b03"},{"problem":44,"code":"(fn my-rotate [r s] (let [p1 (rem r (count s))]\n\t(if (>= p1 0) \n\t\t(into (take p1 s) (reverse (drop p1 s)))\n\t\t(into (take (+ (count s) p1) s) (reverse (drop (+ (count s) p1) s)))\n\t)\n))","user":"59a0262ee4b0871e7608b82d"},{"problem":44,"code":";rotate a sequence\n(fn [quantity coll]\n  (letfn [(rotate-left [elems n]\n            (if (= 0 n)\n              elems\n              (let [elem (first elems)\n                    remaining (rest elems)\n                    updated (concat remaining [elem])]\n                (recur updated (dec n)))))\n          (rotate-right [elems n]\n            (if (= 0 n)\n              elems\n              (let [elem (last elems)\n                    remaining (butlast elems)\n                    updated (concat [elem] remaining)]\n               (recur updated (dec n)))))]\n    (if (> quantity 0)\n      (rotate-left coll quantity)\n      (rotate-right coll (Math/abs quantity)))))","user":"58bc8cbee4b0888cdc949d1b"},{"code":"(fn [n xs]\n  (let [cnt   (count xs)\n        s     (mod (if (< n 0) (+ cnt n) n) cnt)\n        [a b] (split-at s xs)]\n    (concat b a)))","problem":44,"user":"52fb64b7e4b047fd55837009"},{"problem":44,"code":"(fn [n l]\n  (let [real-n (mod n (count l))\n        h (drop real-n l)\n        t (take real-n l)]\n    (reverse (into (reverse h) t))))","user":"53f31dafe4b0742d9025b0f0"},{"problem":44,"code":"(fn rotate [n s]\n  (let [n (mod n (count s))]\n    (concat (drop n s) (take n s))))","user":"53fcd574e4b0de5c418485d9"},{"problem":44,"code":"(fn rotate-sequence\n  [rotation-factor collection]\n  (let [adjusted-rotation-factor (mod rotation-factor (count collection))\n        vec-coll (vec collection)]  \n    (concat\n     (subvec vec-coll adjusted-rotation-factor)\n     (subvec vec-coll 0 adjusted-rotation-factor))))","user":"54ef7568e4b024c67c0cf885"},{"problem":44,"code":"(fn [pivot s]\n   (let [pivot (rem pivot (count s))]\n    (for [n (if (< pivot 0)\n              (concat (map #(+ (count s) %)\n                           (range pivot 0))\n                      (range 0 (- (count s)\n                                      (Math/abs pivot))))\n              (concat (range pivot (count s))\n                      (range 0 pivot)))]\n      (nth s n))))","user":"603d5f2ae4b0d5df2af2230c"},{"code":"(fn [n c] ((fn [[a b]] (concat b a))\n            (split-at (mod n (count c)) c)))","problem":44,"user":"5213d81de4b0961f15ac4d73"},{"code":"(fn [n c]\r\n  (let [m (mod n (count c))]\r\n      (concat (drop m c) (take m c))))","problem":44,"user":"4db2cd84535df7e46ed9b6c6"},{"problem":44,"code":"(fn [n s]\n          (take (count s)\n                (drop (if (pos? n)\n                        n\n                        (mod n (count s)))\n                      (cycle s))))","user":"54b13dbce4b09f271ff37d1c"},{"code":"(fn [n xs] (loop [times (Math/abs n) \n                  fun (if (neg? n)\n                        #(concat (list (last %)) (butlast %))\n                        #(concat (rest %) (list (first %))))\n                  xs xs]\n             (if (= times 0) xs (recur (dec times) fun (fun xs)))))","problem":44,"user":"5287f34ee4b0239c8a67ae43"},{"problem":44,"code":"(fn [offset coll]\n  (let [norm-offset (mod offset (count coll))        \n        splits (split-at norm-offset coll)]\n\t(apply concat\n           (reverse splits))))","user":"58ebd10de4b056aecfd47d49"},{"code":"#(take (count %2)\r\n  (drop (mod % (count %2))\r\n    (cycle %2)))","problem":44,"user":"4fa58500e4b081705acca1ae"},{"problem":44,"code":"(fn rot [n xs]\n  (let [l (count xs)]\n    (cond (> n l) (rot (- n l) xs)\n          (< n (- l)) (rot (+ n l) xs)\n          (> n 0) (concat (drop n xs) (take n xs))\n          :else (concat (drop (- l (- n)) xs) (take (- l (- n)) xs)))))","user":"5705f569e4b0b0fb43fd0677"},{"problem":44,"code":"(fn [num list]\n  (let [len (count list)\n        num (mod num len)]\n    (concat (drop num list) (take num list))))","user":"5dad544ce4b0f8c104ccfc80"},{"problem":44,"code":"(fn rotate-seq [num lst]\n  (let [cs (rem num (count lst))\n        forward (mod (+ cs (count lst)) (count lst))]\n     (take (count lst) (drop forward (cycle lst)))))","user":"570e6974e4b0b0fb43fd06ef"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [a ((fn iter [i ma] (\n                            cond \n                            (and (> i 0) (<= i ma)) i\n                            (< i 0) (iter (+ i ma)  ma)\n                            (> i ma) (iter (- i ma) ma)\n                            )) n (count coll)\n           ) coll coll]\n    (concat (drop a coll) (take a coll))\n    )\n  )","user":"60471241e4b02d28681c77c9"},{"code":"(fn rotate [n xs]\n  (let [length (count xs)\n        n* (mod n length)]\n    (concat (drop n* xs) (take n* xs))))","problem":44,"user":"4e691c79535d8ccf87e9fe97"},{"problem":44,"code":"(fn [n coll]\n  (let [x (mod n (count coll))]\n    (take (count coll) (drop x (cycle coll)))))","user":"5cce7de4e4b0ccb0619628b7"},{"problem":44,"code":"#(map-indexed\n   (fn [i _]\n     (nth %2 (mod (+ i %1) (count %2))))\n  %2) ;; slow and silly, but at least different","user":"550f1c99e4b06e50f9beb171"},{"code":"(fn rot [x xs]\n  (loop [lis xs amount (mod x (count xs))]\n    (if (= amount 0)\n      lis\n      (recur \n       (concat (rest lis) (vector (first lis)))\n       (dec amount) \n       ))))","problem":44,"user":"50955676e4b087f34d351ab1"},{"code":"(fn [n coll]\r\n  (take (count coll)\r\n    (drop (mod n (count coll)) (cycle coll))))","problem":44,"user":"4e22b78b535d04ed9115e81e"},{"problem":44,"code":"(fn [n xs]\n    (let [size (count xs)\n          n'   (if (pos? n) (rem n size) (+ size (rem n size)))]\n      (concat (drop n' xs) (take n' xs))))","user":"560e9a2de4b05f002753df52"},{"code":"#(let [x (mod % (count %2))]\n   (concat (drop x %2) (take x %2)))","problem":44,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn [n s]\n  (let [l (count s)\n        m (mod (+ l (mod n l)) l)]\n    (concat (drop m s) (take m s))))","problem":44,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn [n xs]\n  (let [[pref suff] (split-at (mod n (count xs)) xs)]\n    (concat suff pref)))","problem":44,"user":"4e4c238f535dc968683fc4dc"},{"code":"#(take (count %2)\n    \t(if (pos? %1)\n    \t\t(drop %1 (cycle %2))\n\t\t\t(drop (- (count %2) (mod (- 0 %1) (count %2))) (cycle %2))\n    \t))","problem":44,"user":"5252b59de4b0541d1855b8cf"},{"problem":44,"code":"(fn [n coll]\n    (let [part (split-at (mod n (count coll)) coll)]\n      (concat (second part) (first part))))","user":"55c5b55fe4b0e31453f649b5"},{"problem":44,"code":"(fn go [amount coll]\n  (if (< amount 0) (go (+ (count coll) amount) coll)\n      (if (= amount 0) coll\n          (go (dec amount) (reverse (into '() (conj (vec (drop 1 coll)) (first coll))))))))","user":"5777cffae4b0979f89651651"},{"problem":44,"code":"(fn rotate-seq [k s]\n  (let [n (count s)]\n  (cond\n    (= k 0) s\n    (< k 0) (rotate-seq (+ n k) s)\n    :else (rotate-seq (- k 1) (concat (rest s) (seq (list (first s))))))))","user":"5f63684be4b02876ed9fd012"},{"code":"#(let [x (mod % (count %2))] (concat (drop x %2) (take x %2)))","problem":44,"user":"50705886e4b07bd6ad9b9f2a"},{"problem":44,"code":"#(take (count %2) (drop (mod % (count %2)) (apply concat (repeat %2))))","user":"4fdb0c0ae4b05e33b9224f57"},{"code":"(fn [n coll]\n  (let [c (count coll)]\n    (take c (nthrest (cycle coll) (mod n c)))))","problem":44,"user":"52a00651e4b04e0c58e87bbb"},{"code":"(fn rotate [dir lst]\n  (let [off (mod (if (> 0 dir) (+ (count lst) dir) dir) (count lst))]\n    (concat (drop off lst) (take off lst)))\n  )","problem":44,"user":"4fecebe1e4b0681fd128dcac"},{"problem":44,"code":"(fn [x coll]\n  (let [m (mod (+ (count coll) x) (count coll))]\n    (concat (nthrest coll m) (take m coll))))","user":"562ab73ce4b00e49c7cb482e"},{"problem":44,"code":"(fn [n xs]\n  (let [c (count xs)]\n    (if (zero? c) xs\n      (take c (drop (+ c (rem n c)) (cycle xs))))))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":44,"code":"(fn foo [offset in]\n  (take-last\n    (count in)\n    (take (+ (mod offset (count in)) (count in))\n          (flatten (repeat in)))))","user":"605b49b7e4b079a07f8593f8"},{"problem":44,"code":"(fn rotate [n lst]\n  (let [shift (mod n (count lst))]\n    (concat  (nthrest lst shift) (take shift lst))))","user":"534f8c9ae4b084c2834f4acd"},{"problem":44,"code":"(fn [n list]\n  (let [bound_n (mod n (count list)) negative_n (+ (count list) bound_n)]\n    (cond (= bound_n 0) list\n          (> bound_n 0) (concat (drop bound_n list) (take bound_n list))\n          (< bound_n 0) (concat (drop negative_n list) (take negative_n list)))))","user":"5a1bec89e4b0ff51aa4b322f"},{"code":"(fn [n lst]\n\n    (let [k ( (fn [n len]\n                        (let [m (mod n len)]\n                          (if (< m 0)\n                            (- m)\n                            m))) n (count lst))]\n      (let [sublist (split-at k lst)]\n        (concat (last sublist) (first sublist)))))","problem":44,"user":"4e964f4a535dbda64a6f6b42"},{"problem":44,"code":"(fn [n xs]\n  (let [size (count xs)\n        n (+ (if (< 0 n) 0 size)\n             (rem n size))]\n    (concat (drop n xs) (take n xs))))","user":"5ab16992e4b073f1774425c4"},{"problem":44,"code":"#(->> (concat %2 %2)\n       (drop (mod %1 (count %2)))\n       (take (count %2)))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"problem":44,"code":"(fn [step sx]\n  (let [len (count sx)\n        step (mod step len)\n        sx (cycle sx)]\n    (take len (drop step sx))))","user":"555f3bfde4b0a2eb076a39c1"},{"problem":44,"code":"(fn [n lst] \n  (let [vec (apply vector lst)\n        c (mod n (count vec))]\n    (concat (subvec vec c (count lst))\n            (subvec vec 0 c))))","user":"5ad002f2e4b0ea6055cfab87"},{"problem":44,"code":"(fn\n  [rot-num in-seq]\n  (let [inc-num (if (> rot-num 0) -1 1)]\n  \t(loop [rot-index rot-num rot-seq in-seq]\n  \t\t(if (= rot-index 0)\n          rot-seq\n      \t\t(if (> rot-index 0)\n              (recur (dec rot-index) (conj (into [] (rest rot-seq)) (first rot-seq)))\n              (recur (inc rot-index) (cons (last rot-seq) (into [] (butlast rot-seq))))\n              )\n  \t\t\t)\n      )\n  \t)\n  )","user":"52229374e4b0e6a83c892600"},{"code":"(fn rot [cnt s]\n  (if (< cnt 0)\n    (reverse (rot (- cnt) (reverse s)))\n    (let [c (rem cnt (count s))]\n      (concat (drop  c s) (take c s)))))","problem":44,"user":"4dd0e8f7535da60f04a96e57"},{"problem":44,"code":"#(let [% (mod % (count %2))]\n   (if (> % 0)\n     (concat (drop % %2) (take % %2))\n     (let [% (* % -1)]\n       (concat (take-last % %2) (drop-last % %2)))))","user":"53c74cfce4b00fb29b2212a7"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)]\n  \t(take c\n          (#(if (pos? n)\n             (drop n %)\n             (drop (+ c (rem n c)) %))\n           (cycle coll)))))","user":"54848141e4b0e286459a119e"},{"problem":44,"code":";user=> (mod -2  5) \n;3\n(fn rota2 [iter, coll]\n  (let [index (mod iter (count coll))]\n  (concat\n    (take-last (- (count coll) index) coll) ; later I see it is simplier to use (drop index %2)\n    (take index coll))\n    )\n  )","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":44,"code":"(fn [n s]\n  (take (count s) (drop (mod n (count s))\n                        (cycle s))))","user":"579c8ad1e4b05b1deef9ae0c"},{"problem":44,"code":"(fn [n s]\r\n  (let [c (count s)]\r\n    (->>\r\n      (cycle s)\r\n      (drop (mod n c))\r\n      (take c))))","user":"606e0a42e4b069485764de19"},{"problem":44,"code":"#((comp flatten (juxt drop take)) (mod %1 (count %2)) %2)","user":"5a257747e4b07f18be40aa1f"},{"problem":44,"code":"(fn [n a-seq]\n  (let [c (count a-seq)]\n    (take c (drop (mod n c) (cycle a-seq)))))","user":"5be33a16e4b0ed4b8aab4cd6"},{"problem":44,"code":"(fn my-rotate\n  [n se]\n  (if (< n 0) (reverse (my-rotate (- n) (reverse se)))\n    (seq (loop [m n\n                q (reduce conj clojure.lang.PersistentQueue/EMPTY se)]\n           (if (> m 0)\n             (let [f (peek q)]\n               (recur (dec m) (conj (pop q) f)))\n             q)))))","user":"554d386ee4b0a04f792995b8"},{"code":"(fn rotate[n s] \n  \n   (let [\n         ss (seq s)\n         rng (fn rng[x ct] \n  \t\t\t(cond \n    \t\t\t(and (< x ct ) (<= 0 x)) x\n     \t\t\t(< x 0) (recur (+ x ct) ct)\n     \t\t\t(> x ct) (recur (- x ct) ct)        \n  \t\t\t)\n         )\n         nn (rng n (count ss))\n\t     ]\n      (concat (drop nn ss) (take nn ss))\n   )\n  \n)","problem":44,"user":"4fb03cf4e4b081705acca262"},{"problem":44,"code":"(fn [times coll] (flatten (reverse (split-at (if (neg? times) (- (count coll) (mod (* times -1) (count coll))) (mod times (count coll))) coll))))","user":"5a634ff0e4b0512ff01cd995"},{"problem":44,"code":"(fn [n seq]\n  (for [i (range (count seq))] (nth seq (mod (+ i n) (count seq))))\n)","user":"5cbdc591e4b026601754ba00"},{"problem":44,"code":"(fn[n _seq] \n \t(let [splitted (split-at (mod n (count _seq)) _seq)] \n \t\t(concat (second splitted) (first splitted))))","user":"5954eef0e4b066ee0a44af17"},{"code":"#(let [i (mod %1 (count %2))\n       [a b] (split-at i %2)]\n   (concat b a))","problem":44,"user":"51780bfce4b0f89a8f53839c"},{"code":"#(loop [x (if (< % 0) (- (* 2(count %2)) (- 0 %)) %) l %2] \n    (if (zero? x) l\n        (recur (dec x)\n               (conj (into [] (rest l)) (first l)))))","problem":44,"user":"503539dee4b0ed9c821488f6"},{"code":"#(let [c (mod % (count %2))] (concat (drop c %2) (take c %2)))","problem":44,"user":"4de77a0a535d08e6dec9fdfa"},{"code":"(fn [n S]\n (let [M (rem n (count S)),N (+ (count S) M)]\n  (cond\n    (> n 0) (concat (drop M S) (take M S))\n    :else (concat (drop N S) (take N S)))))","problem":44,"user":"4fda016ae4b05e33b9224f42"},{"problem":44,"code":"(fn[r xs]\n (let [cek (fn cek [x]\n             (if (> x (count xs))\n               (- x (count xs))\n               x))]\n   (if (pos? r)\n     (concat (drop (cek r) xs) (take (cek r) xs))\n     (concat (drop (cek (* -1 (+ -1 r))) xs) (take (cek (* -1 (+ -1 r))) xs)))))","user":"5a067f26e4b01bb0ae8afdcc"},{"code":"(fn rota [n xs]\n  (let [m (mod n (count xs))]\n      (concat (drop m xs) (take m xs))))","problem":44,"user":"4db51ce0535d87e67b28fe06"},{"problem":44,"code":"(fn [x coll] (let [l (count coll) y (mod x l)] (concat (drop y coll) (take y coll))))","user":"5505ceb3e4b086ebe8a79c8b"},{"code":"(fn [n coll]\n  ( let [ rots (mod (#(if (neg? %)(- %) %) n) (count coll))]\n    ( if (pos? n)\n      (concat (drop rots coll) (take rots coll))\n      (concat (drop (- (count coll) rots ) coll) \n              (take (- (count coll) rots ) coll)))))","problem":44,"user":"515ebde3e4b01e5d11ccd0a8"},{"code":"(fn r[n s]\n  (cond\n    (zero? n) s\n    (< n 0)   (r (inc n) (concat [(last s)] (butlast s)))\n    :else     (r (dec n) (concat (rest s) [(first s)]))))","problem":44,"user":"501284d9e4b030d97e4db710"},{"code":"(fn [x coll]\n  (let [n (if (pos? x)\n            (rem x (count coll))\n            (- (count coll) (rem (- x) (count coll))))]\n    (lazy-cat (drop n coll) (take n coll))))","problem":44,"user":"519db0ede4b037b32803f9b9"},{"problem":44,"code":"(fn rotate [amount s]\n  (let [n (mod amount (count s))]\n    (concat (drop n s) (take n s))))","user":"52a4879ce4b0c58976d9abdb"},{"problem":44,"code":"#(let [c (count %2)]\n   (take c \n         (drop \n          (mod %1 c) \n          (cycle %2))))","user":"573ed018e4b05c31a32c0833"},{"problem":44,"code":"(fn roll [n xs]\n   (let [roll-forward #(concat (drop 1 %) [(first %)])\n         roll-back    #(concat [(last %)] (butlast %))]\n     (cond\n       (> n 0) (nth (iterate roll-forward xs) n)\n       (< n 0) (nth (iterate roll-back xs) (- n))\n       :else xs)))","user":"5d4b2155e4b0776584bd6f28"},{"problem":44,"code":"#(let [x (count %2)] (take x (drop (mod %1 x) (cycle %2))))","user":"5e259d05e4b05b4b01516169"},{"code":"#(let [n (mod % (count %2))] (concat (reverse (take (- (count %2) n) (reverse %2))) (take n %2)))","problem":44,"user":"4f15de56535d64f603146448"},{"problem":44,"code":"#(concat  (drop (mod %1 (count %2)) %2) (take (mod %1 (count %2)) %2))","user":"59edc518e4b0966464fe6a08"},{"problem":44,"code":"(fn [k x]\n  (loop [i (mod k (count x)) s x]\n    (if (zero? i)\n      s\n      (recur (dec i) (concat (next s) (list (first s))))\n    )\n  )\n)","user":"589f2cefe4b02bd94d917e75"},{"problem":44,"code":"(fn rtt\n\t[drct l]\n\t(loop [i 0 out (into [] (repeat (count l) 0))] \n\t\t(if (= i (count l))\n\t\t\tout\n\t\t\t( recur (inc i) \n\t\t\t\t(assoc out (mod (- i drct) (count l)) (nth l i))\n\t\t\t)\n\t\t\t)\n\t\t)\n\t)","user":"5545477fe4b0a04f79299531"},{"problem":44,"code":"(fn [n coll]\n  (loop [i n\n         clockwise (> n 0)\n         items coll]\n    (if (= 0 i)\n      items\n      (if clockwise\n        (recur (dec i)\n               clockwise\n               (conj (vec (rest items)) (first items)))\n        (recur (inc i)\n               clockwise\n               (conj (butlast items) (last items)))))))","user":"5a23503fe4b0ff51aa4b32d6"},{"code":"(fn [num coll] (let [pos-num (mod num (count coll))] (concat (nthnext coll pos-num) (take pos-num coll))))","problem":44,"user":"4f2acb29e4b0d6649770a040"},{"problem":44,"code":"(fn [n l]\n  (let [cnt (count l)\n        pos (mod n cnt)]\n    (concat (drop pos l) (take pos l))))","user":"55d74e71e4b0e31453f64aa4"},{"problem":44,"code":"(fn [st se] \n  (let [l (mod st (count se))]\n    (concat (nthrest se l) (take l se))\n    ))","user":"56327168e4b0bfe05bf117a5"},{"problem":44,"code":"(fn [d s]\n  (let [l (count s)\n        pos (mod d l)]\n    (drop pos (take (+ l pos) (cycle s)))))","user":"583048d9e4b051871117c007"},{"problem":44,"code":"(fn rotate\n  [steps coll]\n  \"Rotates the collection. That is, start the collection with the element reached\n  by adding steps to the index of the first element.\"\n  (let [collSize (count coll)\n        toDrop (mod steps collSize)]\n    (concat (drop toDrop coll) (take toDrop coll))))","user":"55a9e0fee4b0988bba2ad945"},{"code":"(fn  [steps sq]\n  (loop [ix steps newsq sq n (count sq)]\n    (if (> ix 0)\n      (recur (dec ix) (concat (rest newsq) (vector (first newsq))) n)\n      (if (< ix 0)\n        (recur (inc ix) (take n (cons (last newsq) newsq)) n)\n        newsq\n        )\n      )\n    )\n  )","problem":44,"user":"4ec4d723535dcc7ae8597d65"},{"code":"(fn [n coll]\n  (let [offset (mod n (count coll))]\n   (concat (drop offset coll) (take offset coll))))","problem":44,"user":"52d0902ee4b07d0d72b273bd"},{"problem":44,"code":"(fn rotate[step xs]\n  (cond\n   (< step 0) (rotate (inc step) (drop-last (conj (seq xs) (last xs))))\n   (> step 0) (rotate (dec step) (drop 1 (conj (apply vector xs) (first xs))))\n   :default xs))","user":"587cbebbe4b01531a375eb24"},{"code":"(fn rotateSeqs [x seqs]\n        (if (= x 0)\n            seqs\n            (if (> x 0)       \n                (rotateSeqs (- x 1) (concat (rest seqs) (list (first seqs))))\n                (rotateSeqs (+ x 1) (concat (list (last seqs)) (reverse (rest (reverse seqs)))))\n            )  \n        )\n    )","problem":44,"user":"52a28e1ce4b04e0c58e87bf0"},{"problem":44,"code":"#(->> (cycle %2) \n      (drop (+ (count %2) (mod %1 (count %2))))\n      (take (count %2)))","user":"5657fed1e4b0f9d632dd84ae"},{"code":"(fn rotate [c n] \n  (let [critical (mod c (count n))]\n    (concat (drop critical n) (take critical n))))","problem":44,"user":"52b35a6ee4b0c58976d9ad07"},{"code":"(fn [n coll] (let [c (count coll) x (take (* 2 c) (cycle coll)) m (if (< n 0) (+ c (rem n c)) (rem n c))] (subvec (vec x) m (+ m c))))","problem":44,"user":"52808897e4b0757a1b171404"},{"code":"(fn [i s]\n  (let [c (count s)]\n    (take c \n      (drop (mod i c) (cycle s)))))","problem":44,"user":"4e7e05a6535db169f9c796fe"},{"problem":44,"code":"(fn rotate [times, lst] (\n   if (= 0 times)\n      lst\n      (if (< 0 times)      \n        (rotate (dec times) (concat (rest lst) [(first lst)]))\n        (rotate (inc times) (concat [(last lst)] (butlast lst)))\n      )\n))","user":"57eb7a97e4b0bfb2137f5b62"},{"code":"(fn foo [n s] (if (not (= n 0)) (if (< n 0) (foo (+ n 1) (cons (last s) (take (- (count s) 1) s))) (foo (- n 1) (concat (rest s) (cons (first s) '())))) s))","problem":44,"user":"50f9c7fde4b0e7c80cb15a52"},{"problem":44,"code":"#(let\n   [ size (count %2)\n     offset (+ size (rem %1 size))\n   ]\n   (take size (drop offset (cycle %2))))","user":"5d123457e4b02c15ef021996"},{"code":"#(if (pos? %1)\n  (let [spaces (if (> %1 (count %2)) (- %1 (count %2)) %1)]\n    (concat (drop spaces %2) (take spaces %2)))\n  (let [spaces (if (> (java.lang.Math/abs %1) (count %2)) (+ (count %2) %1) %1)]\n    (concat (drop (+ (count %2) spaces) %2) (take (+ (count %2) spaces) %2))))","problem":44,"user":"4e9e7ce3535dbda64a6f6b98"},{"code":"(fn [s l] (for [x (range (count l))] (nth l (mod (+ s x) (count l)))))","problem":44,"user":"4fccf4dde4b0ee37620e1870"},{"code":"(fn [shift seq]\n\t(let [\n\t\t\tlen (count seq)\n\t\t\ts (->> shift (iterate (partial + len)) (drop-while neg?) first)\n\t\t\ts2 (rem s len)]\n\t\t(concat\n\t\t\t(drop s2 seq)\n\t\t\t(take s2 seq))))","problem":44,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":44,"code":"#(->> %2 \n      cycle \n      (drop (mod %1 (count %2)))\n      (take (count %2)))","user":"551a64cde4b091ff45eda996"},{"problem":44,"code":"(fn [n sq]\n  (let [nr (mod n (count sq))]\n    (concat (drop nr sq) (take nr sq))))","user":"51b920bfe4b0e871ca4958f9"},{"problem":44,"code":"(fn [t c]\n  (let [len (count c)]\n  \t(take len (drop (mod t len) (cycle c)))))","user":"5b72b36ce4b047b03b2036a9"},{"code":"(fn [rott b]\n  (letfn [(rotation-indices [a r]\n                            (map #(mod (+ % r) (count a)) (range (count a))))]\n    (map #(nth b %) (rotation-indices b rott))))","problem":44,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":44,"code":"(fn shift\n     [n sq]\n     (cond (= n 0) sq\n           (> n 0) (shift (dec n) (conj (vec (rest sq)) (first sq)))\n           :else (reverse (shift (- n) (reverse sq)))))","user":"4f867b25e4b033992c121c51"},{"code":"(fn [n l]\n  (let [c (count l)\n        d (mod n c)]\n  (take c (drop d (cycle l)))))","problem":44,"user":"4daea889edd6309eace4d15b"},{"problem":44,"code":"#(loop [n (mod %1 (count %2))\n        left %2\n        right []]\n   (if (= n 0)\n     (concat left right)\n     (recur (dec n)\n            (rest left)\n            (conj right (first left)))))","user":"55e26417e4b050e68259b433"},{"code":"(fn [n coll]\n  (let [rotate (mod n (count coll))]\n    (concat (drop rotate coll) (take rotate coll))))","problem":44,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":44,"code":"#((fn rotate [rotraw lst]\n    (if (= rotraw 0)\n      lst\n      (let [rot (mod (+ rotraw\n                        (count lst)) (count lst))]\n        (rotate (dec rot) (conj (reverse (rest (reverse lst))) (last lst))))))\n  (* -1 %1) %2)","user":"588e8133e4b00487982d5191"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)\n        n (if (pos? n) n (mod (+ c n) c))]\n    (take c (drop n (cycle coll)))))","user":"52dc7344e4b09f7907dd13cf"},{"problem":44,"code":"(fn [n coll]\n  (let [delta (mod n (count coll))]\n   \t(concat (drop delta coll) (take delta coll))))","user":"606b16b8e4b069485764ddf7"},{"code":"(fn [n xs]\n  (let [[xs1 xs2] (split-at (mod n (count xs)) xs)]\n    (concat xs2 xs1)))","problem":44,"user":"52015698e4b0d7096e99ddba"},{"code":"(fn [n l]\n    (let [c (count l)]\n      (cond\n        (< n 0) (recur (+ c n) l)\n        (> n c) (recur (- n c) l)\n        :else\n        (concat\n            (take-last (- c n) l)\n            (take n l)))))","problem":44,"user":"4ee9c8d0535d93acb0a66892"},{"code":"(fn [amt s]\n  (let [split-point (mod (if (pos? amt) amt (+ (count s) amt)) (count s))\n        [h t] (split-at split-point s)]\n    (concat t h)))","problem":44,"user":"52d83c2ce4b09f7907dd138d"},{"problem":44,"code":"(fn rotate2 [x coll]\n (let [n (mod x (count coll))]\n    (flatten (conj (take n coll) (drop n coll)))))","user":"5703ce0fe4b08d47c97781fd"},{"problem":44,"code":"(fn rotate [x coll] \n  (let [n (mod x (count coll))]\n    (concat (nthrest coll n) (take n coll))))","user":"5bc28638e4b07a9b28b10033"},{"problem":44,"code":"(fn [a b] (let [x (mod a (count b))]\n            (concat (drop x b) (take x b))))","user":"5dc53ddee4b02f9375f4e1bd"},{"code":"(fn rotate [k x]\n  (let [l (if (pos? k) k (+ (count x) k))]\n  (let [t (take (mod l (count x)) x) r (- (count x) (mod l (count x)))]\n    (let [m (for [i (range r)] (nth x (+ i (mod l (count x)))))] (flatten (list* m t)))\n  ))\n  )","problem":44,"user":"52132f8de4b0d32679a50651"},{"code":"(fn rot [n s]\n  (let [r (mod n (count s))] (concat (drop r s) (take r s))))","problem":44,"user":"4e89f46c535d3e98b8023288"},{"problem":44,"code":"(fn xbbb [p sq]\n  (if (< p 0)\n    (flatten (list (drop (- (count sq) (mod (Math/abs p) (count sq))) sq) (take (- (count sq) (mod (Math/abs p) (count sq))) sq) ))\n    (flatten (list (drop (mod p (count sq)) sq) (take (mod p (count sq)) sq)))))","user":"5fe09d1fe4b05ac5b16ea15b"},{"problem":44,"code":"#(take (count %2) (drop (if (pos? %1) %1 (inc (mod (* -1 %1) (count %2)))) (cycle %2)))","user":"5744e1a2e4b009280f9f2b43"},{"problem":44,"code":"(fn rot [n col]\n  (->>\n   (split-at (mod n (count col)) col)\n   reverse\n   (apply concat)\n  )\n)","user":"54c9f165e4b045293a27f687"},{"problem":44,"code":"(fn [x l]\n  (let [n (mod x (count l))]\n    (concat (drop n l) (take n l))))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":44,"code":"#(loop [n (Math/abs %1), coll %2]\n   (if (or (= n 0) (empty? coll))\n     coll\n     (recur (dec n) \n            (if (pos? %1)\n              (concat (rest coll) [(first coll)])\n              (concat [(last coll)] (butlast coll))))))","user":"5650b8a0e4b0284900eef6c3"},{"problem":44,"code":"(fn rot [n coll]\n        (let [n (rem n (count coll))] (if (pos? n)\n                                        (concat (drop n coll) (take n coll))\n                                        (concat (take-last (* -1 n) coll) (take (+ (count coll) n) coll)))))","user":"5cb11a72e4b026601754b8c6"},{"code":"(fn [n coll]\n   (let [n (- 0 (mod  n (count coll)))]\n     (loop [i 0 res coll]\n       (if (= i (if (< n 0) (+ (count coll) n) n) )\n         res\n         (recur (inc i) (conj (take (dec (count res)) res) (last res)) )\n         )\n       )     \n     )\n   )","problem":44,"user":"4ea31da2535d7eef308072c1"},{"code":"(fn problem-44 [n s] \n  (let [m (mod n (count s))]\n    (concat (drop m s) (take m s))))","problem":44,"user":"51fe9d7ce4b0f1313d468a70"},{"problem":44,"code":"(fn [rot col]\n  (take (count col) (drop (mod rot (count col)) (cycle col))))","user":"5e17509fe4b00200644e3d52"},{"problem":44,"code":"#(drop (mod %1 (count %2)) (concat %2 (take (mod %1 (count %2)) %2)))","user":"5a80b934e4b00b71e582a05b"},{"problem":44,"code":"(fn [n s]\n  (let [d (cycle s)\n        length (count s)\n        offset (mod n length)]\n    (take length (drop offset d))))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":44,"code":"(fn [x y] ((comp flatten (juxt drop take))\n                   (#(if (neg? x) \n                       (- (count y) (Math/abs %)) \n                       %) \n                     (if (> (count y) (Math/abs x))\n                       x \n                       (rem (Math/abs x) (count y)))) y))","user":"54cbe00ee4b057c6fda3a285"},{"problem":44,"code":"(fn xx\n  [where hello]\n  (cond\n    (neg? where) (let [where (+ (count hello) where)]\n                   (xx where hello))\n    (> where (count hello)) (let [where (- where (count hello))]\n                              (xx where hello))\n   :else (let [hello (split-at where hello)]\n      (flatten (conj (list (first hello)) (second hello))))))","user":"55b3c03ee4b01b9910ae2975"},{"problem":44,"code":"(fn rotate[n arr]\n                       (let [len (count arr)\n                              rn (if (neg? n) (+ len n) n)\n                              tn (mod rn len)]\n                          (concat (take-last (- len tn) arr) (take tn arr))\n                         )\n                       )","user":"54d05a9de4b0e8a36923e5c7"},{"code":"(fn [n c] (take (count c) (drop (mod n (count c)) (take (* 2 (count c)) (cycle c)))) )","problem":44,"user":"4ebbb6bc535dfed6da9c6d71"},{"problem":44,"code":"(fn [n v]\n  (let [s (mod n (count v))]\n    (concat (drop s v) (take s v))))","user":"55e1fc42e4b050e68259b424"},{"problem":44,"code":"(fn [n x] (let [l (count x) num (rem (+ (rem n l) l) l )] (concat (nthnext x num) (take num x)  ) ))","user":"58ac513fe4b0005cfeb1a746"},{"code":"#(let [n (count %2)]\n  (take n\n    (drop\n      (if (<= 0 %1)\n        %1\n        (- n (mod (- %1) n)))\n      (cycle %2))))","problem":44,"user":"504f57c7e4b0a02f9cffde71"},{"problem":44,"code":"(fn [n s]\n  (let [n (mod n (count s))]\n    (if (>= n 0) (concat (drop n s) (take n s))\n               (let [i (+ (count s) n)]\n                 (concat (drop i s) (take i s))))))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn [n xs](let [s (mod n (count xs))\n                       [f b] (split-at s xs)]\n (concat b f)))","problem":44,"user":"4efcac3a535de96065cf507e"},{"problem":44,"code":"(fn rotate-seq [dir coll]\n        (if (> dir 0)\n          (let [first-op (conj (vec (rest coll)) (first coll))]\n            (if (= 1 dir)\n              first-op\n              (rotate-seq (dec dir) first-op)\n              )\n            )\n          (if (< dir 0)\n            (let [first-op (vec (cons (last coll) (butlast coll)))]\n              (if (= -1 dir)\n                first-op\n                (rotate-seq (inc dir) first-op)\n                )\n              )\n            )\n          )\n        )","user":"536827f1e4b0243289761e8a"},{"code":"#(let [len (count %2)] (apply concat (reverse (split-at (mod (+ len %) len) %2))))","problem":44,"user":"511f88eee4b085952a83535f"},{"problem":44,"code":"(fn [rot lst]\n  (let [n (mod rot (count lst))]\n    (concat (drop n lst) (take n lst))))","user":"516f06dce4b06aac486e5b39"},{"code":"(fn f [xn xc]\n  (loop [n xn c xc]\n    (cond\n      (= n 0) c\n      (> n 0) (recur\n                (dec n)\n                (concat\n                  (rest c)\n                  [(first c)]))\n      (< n 0) (recur\n                (inc n)\n                (cons\n                  (last c)\n                  (butlast c))))))","problem":44,"user":"4f312c35e4b0d6649770a084"},{"code":"(fn [shift lst]\n   (let [amount (rem (Math/abs shift) (count lst))\n         shift-it #(flatten (conj (take amount %) (drop amount %)))]\n   (if (> shift 0) \n     (shift-it lst)\n     (reverse (shift-it (reverse lst))))))","problem":44,"user":"502a5fa4e4b09e8f859a9fbd"},{"code":"(fn rotate [n v]\n  (->> (concat v v)\n       (drop (mod n (count v)))\n       (take (count v))))","problem":44,"user":"5224060de4b01819a2de42c3"},{"problem":44,"code":"(fn rotate-xs [dir xs];定义一个方法，传入seq和参数，后面将数组的长度定义，然后判断参数dir是不是正数，如果是正数的话，先将整个数组进行遍历循环，然后去掉dir之前的value最后取出原本数组长度的数组就行。\n  (let [ln (count xs)];如果是负数的话就先吧负数转正然后对长度in取余再和长度相减，得到的全都去掉，然后取得原本长度的数组就行。\n    (if (pos? dir)\n      (take ln (drop dir (cycle xs)))\n      (take ln (drop (- ln (mod (* dir -1) ln)) (cycle xs))))))","user":"57c500f9e4b05aa3c4741cda"},{"problem":44,"code":"#(flatten\n  (let [n (mod %1 (count %2))]\n  (cons (drop n %2) (take n %2))))","user":"591d9870e4b09b4ee5954c1b"},{"problem":44,"code":"(fn rotate-seq [n coll]\n  (letfn [(rotate-left [coll] (concat (rest coll) [(first coll)]))\n          (rotate-right [coll] (concat [(last coll)] (butlast coll)))]\n    (cond (> n 0) (rotate-seq (- n 1) (rotate-left coll))\n          (< n 0) (rotate-seq (+ n 1) (rotate-right coll))\n          :else coll)))","user":"52b9e920e4b07a9af57922c9"},{"code":"(fn [i lst]\n  (let [dn (rem (+ i (* 5 (count lst))) (count lst))]\n    (into (vec (drop dn lst)) (take dn lst))))","problem":44,"user":"5272669de4b03e8d9a4a742e"},{"problem":44,"code":"(fn [x y] (let [n (mod x (count y))] (flatten (conj (take n y) (drop n y)))))","user":"51bfc1f0e4b0e49ef9037dd4"},{"problem":44,"code":"(fn rotate [n s]\n  (if (neg? n)\n    (rotate (inc n)\n            (flatten (list (last s) (butlast s))))\n    (if (not= n 0)\n      (rotate (dec n)\n              (flatten (list (rest s) (first s))))\n      s)))","user":"5eb7b41ee4b00a66d4a9523c"},{"code":"(fn rotate [n x]\n  (let [left (fn [x] (flatten (cons (rest x) (list (first x)))))\n         right (fn right [x] (flatten (cons (last x) (butlast x))))\n        ]\n    (if (> n 0);left\n      (loop [n n x x]\n        (if (zero? n)\n          x\n          (recur (dec n) (left x))\n        )\n      )\n      (loop [n (- n) x x]\n        (if (zero? n)\n          x\n          (recur (dec n) (right x))\n        )\n      )\n    )\n  )\n)","problem":44,"user":"53153466e4b08068f379ed23"},{"code":"(fn [n coll]\n  (if (> n 0)\n    (take (count coll) (drop n (cycle coll)))\n  (let [n-abs (Math/abs n)]\n  (take (count coll)\n    (concat \n      (reverse (take n-abs (cycle (reverse coll))))\n      coll)))))","problem":44,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":44,"code":"#(let [n (count %2)]\n  (take n\n   (drop (mod %1 n)\n    (concat %2 %2)\n   )\n  )\n )","user":"5c0d0537e4b0bdcf453d173d"},{"problem":44,"code":"(fn [n s]\n(let [m (count s)\n\n\n\np (mod n m)]\n\n\n(flatten (reverse (split-at p s)))))","user":"5e0f9884e4b099d064962fc0"},{"code":"#(take (count %2) (nthrest (concat %2 %2) (mod % (count %2))))","problem":44,"user":"5357b241e4b04ce2eb3ed282"},{"problem":44,"code":"(fn rotate  [n xn]\n  (let [ct (count xn) ]\n    (if (and (>= n 0 ) (< n ct ) ) \n      (concat  (drop n xn) (take n xn) )\n      (if (>= n ct)\n        (rotate (- n ct) xn )\n        (rotate (+ n ct) xn )\n        ) \n      ) \n    )  \n  )","user":"57bffed6e4b05aa3c4741c89"},{"code":"(fn rotate [n, l]\n   (cond\n    (empty? l)\n    l\n    (= n 0)\n    l\n    (> n 0)\n    (rotate\n     (- n 1)\n     (concat\n      (rest l)\n      [(first l)]))\n    :else\n    (rotate\n     (+ n 1)\n     (cons\n      (last l)\n      (butlast l)))))","problem":44,"user":"50d2fa5ce4b049d4ed5650cf"},{"code":"(fn flip [n xs]\n  (let [[x y] (split-at (mod n (count xs)) xs)] (concat y x)))","problem":44,"user":"4ec07699535dfed6da9c6da2"},{"problem":44,"code":"(fn rotate [n collection]\n  (let [\n        t (count collection)\n        nn (rem n t)\n        rn (if (< nn 0) (+ t nn)  nn) \n        c (into [] collection)]\n    (concat (subvec c rn)\n      (subvec c 0 rn))))","user":"57ebbf3ae4b0bfb2137f5b66"},{"code":"(fn [n l]\n  (cond\n    (= n 0) l\n    (> n 0) (recur (- n 1) (concat (rest l) (list (first l))))\n    (< n 0) (recur (+ n 1) (concat (list (last l)) (butlast l)))\n  )\n)","problem":44,"user":"4e6e10d8535d5021c1a895fd"},{"problem":44,"code":"(fn rot [n x] \n  (cond \n   (< n 0) (reverse (rot (- n) (reverse x)))\n   (or (empty? x) (= n 0)) x\n   true (rot (dec n) (concat (rest x) [(first x)]))))","user":"53e91473e4b036ad0777e495"},{"code":"#(let [[head tail] (split-at (mod % (count %2)) %2)]\n   (concat tail head))","problem":44,"user":"51b38769e4b026427ecf067f"},{"problem":44,"code":"(fn [rotn coll] \n  (let [size (count coll)] \n    (take size\n          (drop (+ (* size 2) rotn) (cycle coll)))))","user":"56cbb352e4b0ea9b8538f738"},{"code":"#(take (count %2)\n        (nthrest (mapcat identity (repeat %2))\n                 (+ (count %2) (rem % (count %2)))))","problem":44,"user":"5005b57de4b0678c553fc46a"},{"problem":44,"code":"(fn rotate [n a-seq]\n  (cond\n    (= n 0) a-seq\n    (> n 0) (rotate (dec n) (rest\n                            (conj (into [] a-seq) (first a-seq))))\n    :else (rotate (inc n) (butlast\n                          (cons (last a-seq) a-seq)))))","user":"505d1b01e4b0e6aca564be04"},{"problem":44,"code":"(fn [n col]\n  (let [x (mod n (count col))]\n    (apply concat (reverse (split-at x col)))))","user":"5a144fd8e4b0ff51aa4b319a"},{"problem":44,"code":"(fn rotate [n col]\n  (let [size (count col)\n        offset (mod n size)]\n    (take size (drop offset (apply concat (repeat 2 col))))))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":44,"code":"(fn [n lst]\n  (let [new-n (mod n (count lst))\n        [tl hd] (split-at new-n lst)]\n   (concat hd tl)))","user":"568e1871e4b0dcc4269f40cc"},{"code":"(fn [n xs]\n  (let [xs' (if (neg? n) (reverse xs) xs)\n        n' (mod (if (neg? n) (- n) n) (count xs'))\n        ys (concat (drop n' xs') (take n' xs'))]\n    (if (neg? n) (reverse ys) ys)))","problem":44,"user":"504e13fce4b078edc5f593bc"},{"problem":44,"code":"(fn rs[i vs]\n  (let [n (if (>= i 0) i (mod i (count vs)))\n        r (fn [[a & r]] (conj (vec r) a))]\n    (->> vs (iterate r) (take (inc n)) (last))))","user":"5ba75fdfe4b0a20761a23419"},{"problem":44,"code":"(fn rotate-sequence\n  [n lst]\n  (cond\n    (pos? n) (drop n (take (+ (count lst) n) (cycle lst)))\n    :else\n    (drop (inc (Math/abs n)) (take (+ (count lst) (inc (Math/abs n))) (cycle lst)))))","user":"5aa00b7fe4b0d174b936c825"},{"problem":44,"code":"#(let [pos (rem %1 (count %2))] \n   (if (neg? pos) \n     (concat (take-last (- pos) %2) (drop-last (- pos) %2))\n     (concat (drop pos %2) (take pos %2))))","user":"55c0afa5e4b01b9910ae2a27"},{"code":"(fn [nb arg]\n  (let [rot (mod nb (count arg))]\n    (concat (drop rot arg) (take rot arg))))","problem":44,"user":"537881a4e4b06839e8705e46"},{"code":"#(let [x (mod %1 (count %2))] (concat (drop x %2) (take x %2)))","problem":44,"user":"4f039a8b535dcb61093f6b36"},{"code":"#(apply concat ((juxt drop take) (mod % (count %2)) %2))","problem":44,"user":"4f29eb2ae4b0d6649770a037"},{"code":"(fn [n coll]\r\n    (let [size (count coll)\r\n          offset (mod (+ size n) size)]\r\n      (if (pos? size)\r\n          (take size (drop offset (cycle coll))))))","problem":44,"user":"4f047177535dcb61093f6bc6"},{"code":"(fn x [n coll]\n    (let [n (mod n (count coll))]\n      (if (>= n 0)\n        (concat (drop n coll) (take n coll))\n        (concat (take-last (- n) coll) (drop-last (- n) coll)))))","problem":44,"user":"4e80aa10535db62dc21a62b1"},{"problem":44,"code":"(fn moveColl [n coll]\n  (if (= n 0)\n    coll\n    (cond\n     (pos? n) (loop [i 0 exit 0 newColl []]\n                (if-not (= exit (count coll))\n                  (recur (if (= i (- (count coll) 2)) -1 (inc i)) (inc exit) (conj newColl (nth coll (inc i))))\n                  (moveColl (dec n) newColl)))\n     (neg? n) (loop [i (dec (count coll)) exit 0 newColl []]\n                (if-not (= exit (count coll))\n                  (recur (if (= i (dec (count coll))) 0 (inc i)) (inc exit) (conj newColl (nth coll i i)))\n                  (moveColl (inc n) newColl))))))","user":"59b554cee4b05c620303ca0f"},{"problem":44,"code":"(fn [shift sequence]\n  (let [adjust (if (> shift 0) dec inc)\n        rotate (if (> shift 0)\n                 (fn [inner-seq]\n                   (-> inner-seq\n                        (rest)\n                        (vec)\n                        (conj (first inner-seq))))\n                 (fn [inner-seq]\n                   (-> inner-seq\n                        (reverse)\n                        (rest)\n                        (reverse)\n                        (seq)\n                        (conj (last inner-seq)))))]\n    (loop [cursor shift\n           output sequence]\n      (if (= cursor 0)\n        output\n        (recur (adjust cursor) (rotate output))))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":44,"code":"(fn rotate-seq [m s]\n\t\t (let [n (mod m (count s))\n\t\t       step (if (< n 0) (+ (count s) n) n)]\n\t\t   (take (count s) (drop step (cycle s)))))","user":"54c15722e4b0ed20f4ff6f22"},{"problem":44,"code":"#(let [n (rem %1 (count %2))]\n  (if (neg? %1)\n    (let [coll (split-at (+ (count %2) n) %2)]\n      (flatten [(second coll) (first coll)])\n      )\n    (let [coll (split-at n %2)]\n      (flatten [(second coll) (first coll)])\n      )\n    )\n  )","user":"58047205e4b0a837a8b30ca9"},{"problem":44,"code":"(fn\n  [n coll]\n  (apply concat (reverse (split-at (mod n (count coll)) coll))))","user":"540b2dcbe4b0addc1aec66f4"},{"code":"(fn  [amt col]\n  (if (< amt 0)\n    (let [ norm-amt (rem amt (count col)) rest-count  (+ norm-amt (count col)) ] \n\t  (concat (drop rest-count col) (take rest-count col)))\n\t(let [ norm-amt (rem amt (count col))]\n      (concat (drop norm-amt col) (take norm-amt col)))))","problem":44,"user":"51eec1a6e4b0871fa145d98d"},{"code":"#((fn f [n l]\n    (if (= n 0)\n      l\n      (f (- n 1) (conj (butlast l) (last l)))))\n    (mod (- %) (count %2))\n    (vec %2))","problem":44,"user":"4ee82539535d93acb0a66878"},{"problem":44,"code":"(fn rotate-seq [times s]\n  (let [\n        [l r] (split-at (mod times (count s)) s )\n      ]\n    (concat r l)\n  )\n)","user":"58d737cee4b03c36ff7e5982"},{"problem":44,"code":"(fn [n coll]\n  (let [abs-rot (mod n (count coll))\n        [left right] (split-at abs-rot coll)]\n    (concat right left)))","user":"56d15251e4b0ea9b8538f78c"},{"problem":44,"code":"(fn [n coll]\n  (let [len (count coll) drp (mod (if (<= 0 n) n (+ len n)) len)]\n    (->> (cycle coll)\n         (drop drp)\n         (take len))))","user":"5ce56455e4b0a17bb84e2b71"},{"code":"(fn f [a x]\n  (letfn [(cal [m n]\n  (if (< m 0)\n    (rem (+ m (* n (quot (+ n (dec (* -1 m))) n))) n)\n    (rem m n)))]\n      (let [n (count x)]\n    (take n (drop (cal a n) (concat x x))))\n    )\n  )","problem":44,"user":"5302ac7fe4b0d8b024fd3731"},{"code":"(fn [n xs]\n  (let [c (count xs)\n        r (mod n c)]\n    (concat (drop r xs) (take r xs))))","problem":44,"user":"5219e575e4b0c4ef0be82ffd"},{"problem":44,"code":"(fn rotate\n  [n xs]\n  (cond\n    (= n 0) xs\n    :else (let [length (count xs)\n                  n-mod (mod n length)\n                  heads (take n-mod xs)\n                  rest (drop n-mod xs)]\n              (concat rest heads))))","user":"5ed3c43be4b016b56eae05c4"},{"problem":44,"code":"(fn [n coll]\n  (let [coll-count (count coll)\n  nabs (Math/abs n)\n  m (if (> nabs coll-count)\n    (- nabs coll-count)\n    nabs)\n    k (if (neg? n)\n      (- coll-count m)\n      m)\n      base (drop k coll)\n      move (take k coll)]\n    (concat base move)))","user":"58a413b5e4b02bd94d917f07"},{"code":"#(let [c (count %2)\n       w (mod (+ c (mod % c)) c)] (concat (drop w %2) (take w %2)))","problem":44,"user":"4ece9ca9535d23f03622770f"},{"problem":44,"code":"(fn [n coll]\n   (let [[l r]\n         (split-at (mod n (count coll)) coll)]\n     (concat r l)))","user":"55b54ecbe4b01b9910ae2987"},{"problem":44,"code":"(fn [n coll]\n    (let [realn (mod n (count coll))]\n      (concat (drop realn coll) (take realn coll))))","user":"56eaad95e4b04a395b9a040f"},{"problem":44,"code":"(fn  [shift lst]\n   (let [n (mod shift (count lst))]\n     (concat (drop n lst) (take n lst))))","user":"538e36c7e4b0b51d73faae81"},{"problem":44,"code":"(fn [n seq] (let [l (count seq)\n                      mod (rem n l)\n                  rseq (reverse seq)]\n      (if (pos? n) (concat (drop mod seq) (take mod seq) )\n                     (concat  (reverse(take (- mod) rseq)) (reverse(drop (- mod) rseq))))))","user":"5b198eace4b03cfeda66ecbb"},{"code":"(fn [r items]\n  (concat (drop (mod r (count items)) items)\n          (take (mod r (count items)) items)))","problem":44,"user":"510cd1dde4b078ea71921124"},{"problem":44,"code":"(fn rotate [n coll]\n\t(let [start (Math/abs n) \n\t\t\torig (if (> n 0) coll (reverse coll))]\n\t\t(loop [counter start orig orig agg []]\n\t\t\t(if (= counter 0) \n\t\t\t\t\t(if (> n 0) \n\t\t\t\t\t\t(concat orig agg) \n\t\t\t\t\t\t(reverse (concat orig agg)))\n\t\t\t\t(let [[orig agg](if (empty? orig) [agg []] [orig agg])]\t\n\t\t\t\t(recur (dec counter)\n\t\t\t\t\t(drop 1 orig) \n\t\t\t\t\t\t(conj agg (first orig))))))))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn [n coll]\n    (let [vcoll (vec coll)\n          size (count coll)\n          mn (mod n size)]\n      (concat (subvec vcoll mn)(subvec vcoll 0 mn))))","problem":44,"user":"52c61564e4b0c2d177d62109"},{"problem":44,"code":"(fn rotate [amount ring]\n  (let [l (count ring)]\n    (take l \n          (drop (mod amount l) (cycle ring)))))","user":"5baba1ece4b0a20761a23482"},{"problem":44,"code":"(fn [n coll]\n  (let [trim (mod n (count coll))]\n    (concat (drop trim coll) \n            (take trim coll))))","user":"532902f8e4b09d4e7a9b550e"},{"code":"#(concat (drop (mod % (count %2)) %2) (take (mod % (count %2)) %2))","problem":44,"user":"4f2c593ee4b0d6649770a053"},{"code":"(fn [amount, theList]\n\t(into\n        (take\n\t\t\t(mod amount (count theList))\n\t\t\ttheList\n        )\n        (reverse (drop (mod amount (count theList)) theList))\n\t)\n)","problem":44,"user":"50ff3800e4b017584cb41ccb"},{"problem":44,"code":"(fn [offset xs]\n   (let [xs (vec xs)\n         size (count xs)\n         fix-index (fn [i]\n                     (if (neg? i)\n                       (recur (+ size i))\n                       (if (>= i size)\n                         (- i size)\n                         i)))\n         indexes (take size\n                       (iterate (fn [index]\n                                  (if (< index (dec size))\n                                    (inc index)\n                                    (- (inc index) size))) offset))]\n     (map (partial get xs) (map fix-index indexes))))","user":"4feaa579e4b0140c20fb9c0b"},{"code":"#(let [n (mod %1 (count %2))]\n  (flatten [(nthrest %2 n) (take n %2)]))","problem":44,"user":"5127e504e4b03a34742b4302"},{"problem":44,"code":"#(let [co (count %2)]\n   (let [c (mod (+ co %1) co)]\n     (concat (drop c %2) (take c %2))))","user":"579e15a6e4b05b1deef9ae20"},{"problem":44,"code":"(fn [s x]\n   (let [size (count x)\n         seed (mod s size)]\n     (concat (take-last (- size seed) x) (take seed x))))","user":"5ff5bc1ae4b06df49cee1490"},{"problem":44,"code":"(fn rotate [n s] (let [m (mod n (count s))]\n                   (concat (drop m s) (take m s))))","user":"5ee93720e4b029a2061bbeb7"},{"problem":44,"code":"#(let [n (count %2)\n       n (mod %1 n)]\n   (concat (drop n %2) (take n %2)))","user":"54df2609e4b024c67c0cf7a9"},{"problem":44,"code":"(fn rotate-left\n  [n lst]\n  (if (zero? (count lst))\n    lst\n    (if (>= n 0)\n      (concat\n        (nthnext lst (mod n (count lst)))\n              (take (mod n (count lst)) lst))\n      (concat\n        (nthnext lst (mod (+ (count lst) n) (count lst)))\n        (take (mod (+ (count lst) n) (count lst)) lst)))))","user":"5e95013fe4b0fbed045a3800"},{"problem":44,"code":"(fn [move coll]\n  (loop [m move\n         c coll]\n    (if (= m 0)\n      c\n      (if (> m 0)\n       (recur (dec m) (reverse (cons (first c) (reverse (rest c)))))\n       (recur (inc m) (cons (last c) (reverse (rest (reverse c)))))\n       )\n      \n)))","user":"5df75fd8e4b0a607a9a45c92"},{"problem":44,"code":"(fn [index coll]\n              (let [i (mod index (count coll))\n                    [h t] (split-at i coll)]\n                (concat t h)))","user":"57974188e4b039eba2ecb0f4"},{"problem":44,"code":"#(let [my-mod (mod %1 (count %2))]\n   (subvec (vec (flatten (repeat 2 %2))) my-mod (+ my-mod (count %2))))","user":"5751f2a2e4b02ea114799292"},{"problem":44,"code":"(fn [n l] (#(take % (drop (mod n %) (cycle l))) (count l)))","user":"566470b9e4b0e91d5f5c5658"},{"problem":44,"code":"#(let [m (mod %1 (count %2)) n (if (neg? m) (+ m (count %2)) m)]\n   (flatten (conj [] (drop n %2) (take n %2))))","user":"5fd92743e4b05ac5b16ea11f"},{"code":"(fn my-shift [n coll]\n  (flatten (cons (drop (mod n (count coll)) coll) (take (mod n (count coll)) coll))))","problem":44,"user":"4eb2c45e535d7eef3080734d"},{"problem":44,"code":"(fn rotate-seq [n coll]\n  (loop [n n\n         coll (vec coll)]\n    (if (zero? n)\n      coll\n      (if (pos? n)\n        (recur (dec n) (vec (rest (conj coll (first coll)))))\n        (recur (inc n) (vec (take (count coll) (cons (last coll) coll))))))))","user":"5579eed7e4b05c286339e09b"},{"code":"(fn [dir string]\n          (let [n (mod dir (count string))]\n            (concat (drop n string) (take n string))))","problem":44,"user":"50705072e4b07bd6ad9b9f27"},{"problem":44,"code":"(fn f [n coll]\n              (loop [ind n\n                     cll coll]\n                (do\n                  (print cll)\n                  (print ind)\n                  (if (= ind 0)\n                    cll\n                    (if (> ind 0)\n                      (recur (dec ind) (conj (vec (rest cll)) (first cll)  ))\n                      (recur (inc ind) (cons  (last cll) (vec (butlast cll)) )))))\n                  )\n\n\n              )","user":"5ab575f8e4b073f17744263d"},{"problem":44,"code":"(fn [d s]\n  (let [[l r]\n       (split-at (mod d (count s)) s)]\n     (concat r l)))","user":"559468cbe4b0c79f6e1db954"},{"problem":44,"code":"#(flatten (reverse (split-at (mod (+ %1 (count %2)) (count %2)) %2)))","user":"574f5496e4b02ea11479925c"},{"problem":44,"code":"(fn [z xs]\n (let [m (mod z (count xs))]\n  (concat (drop m xs) (take m xs))))","user":"5b61aa6ae4b0c6492753e712"},{"problem":44,"code":"(fn [n list]\n  (take (count list) (drop (mod n (count list)) (cycle list))))","user":"5b337ff4e4b025bcb146f339"},{"problem":44,"code":"#(let [length (count %2)]\n    (->> (cycle %2)\n         (drop (mod %1 length))\n         (take length)))","user":"55c1eb52e4b0e31453f64970"},{"problem":44,"code":"(fn\n  [n col]\n  (let [idx (mod n (count col))\n        [fst snd] (split-at idx col)]\n    (concat snd fst)))","user":"5cdc17d0e4b05ee0cb31173c"},{"problem":44,"code":"(fn [n s] \n          (let [[front back] (split-at (mod n (count s)) s)] \n            (concat back front)))","user":"58a9e872e4b01a0c0b232973"},{"code":"(fn rotate [dir coll]\n  (let [n (mod dir (count coll))]\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"4e113a81535d04ed9115e7c5"},{"problem":44,"code":"(fn rot [n s]\n  (if (zero? n)\n    s\n    (if (< n 0)\n      (rot (+ (count s) n) s)\n      (rot (dec n) (concat (rest s) [(first s)])))))","user":"5a188be3e4b0ff51aa4b31ec"},{"code":"(fn rot [n sek]\n  (if (= n 0) sek\n      (if (> n 0)\n      (rot(dec n) (flatten [(rest sek) \n        (first sek)]))\n      (rot  (inc n) (flatten [(last sek)(butlast sek) \n        ])))))","problem":44,"user":"4eb9353f535dfed6da9c6d4e"},{"code":"#(->> %2 \n      (split-at (mod %1 (count %2)))\n      (reverse)\n      (apply concat))","problem":44,"user":"53523ae0e4b084c2834f4aee"},{"code":"(fn [v s]\n  (let [n (mod v (count s))\n        l (vec (take n s))\n        r (vec (drop n s))]\n    (into r l)))","problem":44,"user":"4ea41fc2535d7eef308072cb"},{"code":"(fn [n lst] (let [m (mod n (count lst))] (take (count lst) (drop m (concat lst lst))) ))","problem":44,"user":"52cc85abe4b07d0d72b27367"},{"code":"(fn [n s]\n  (let [shift (mod n (count s))] \n    (concat (drop shift s) \n            (take shift s))))","problem":44,"user":"50052fd0e4b0678c553fc45d"},{"problem":44,"code":"(fn [n s]\n   (take (count s) (drop (mod n (count s)) (apply concat (repeat 2 s)))))","user":"54d26316e4b0e8a36923e5f2"},{"problem":44,"code":"(fn [n xs] \n  (let [drpcnt (if (> n 0)n (+ 1(- n))) ] \n    (take (count xs) (drop drpcnt (cycle xs)))))","user":"52fa250ee4b047fd55836ff3"},{"code":"(fn [i s]\n  (let [c (count s)\n        j (mod i c)]\n    (->> (split-at j s)\n         (reverse)\n         (apply concat))))","problem":44,"user":"5392b849e4b0b51d73faaeb1"},{"problem":44,"code":"#(let [x (mod %1 (count %2))]\n    (concat (drop x %2) (take x %2)))","user":"57ed19a3e4b0bfb2137f5b8e"},{"problem":44,"code":"(fn rotate [n coll] (concat (drop (mod n (count coll)) coll) (take (mod n (count coll)) coll)))","user":"56f188e9e4b04a395b9a0494"},{"problem":44,"code":"(fn rot [n vs]\n  (let [m (mod n (count vs))]\n    (apply concat (reverse (split-at m vs)))))\n\n#_(fn rot [n vs]\n  (let [m (mod n (count vs))\n        [front back] (split-at m vs)]\n    (into (vec back) front)))","user":"53684a2fe4b0243289761e8c"},{"problem":44,"code":"(fn [n s]\n  (if (pos? n)\n    (take (count s) (drop n (cycle s)))\n    (take (count s) (drop (+ (* n -1) 1) (cycle s)))))","user":"52761edae4b03e8d9a4a74d4"},{"problem":44,"code":"(fn [ct s]\n      (let [l (count s)\n            ct (mod ct l)]\n        (cond\n          (= ct 0) s\n\n          (< ct 0)\n          (concat (drop (- l (- ct)) s) (take (- l (- ct)) s))\n\n          :else\n          (concat (drop ct s) (take ct s)))\n        ))","user":"5db35f85e4b010eb3c36cd22"},{"code":"#(let [len (count %2)]\n     (take len (drop (mod % len) (cycle %2))))","problem":44,"user":"4ff9a200e4b0678c553fc3ab"},{"problem":44,"code":"#(loop [coll (seq %2) to %1]\n   (cond\n    (zero? to) coll\n    (pos? to) (recur (concat (rest coll) (list (first coll))) (dec to))\n    :else (recur (conj (drop-last coll) (last coll)) (inc to))))","user":"55d332f5e4b0e31453f64a5f"},{"code":"(fn [n s] \n           (let [c (count s)\n                p (mod (+ n c) c)]\n                (mapcat identity (reverse (split-at p s)))))","problem":44,"user":"4f03f197535dcb61093f6b84"},{"problem":44,"code":"(fn rotate [k coll]\n    (let [shift (mod k (count coll))]\n      (concat (drop shift coll) (take shift coll))))","user":"4dfe5a93535d04ed9115e786"},{"code":"(fn [n coll] (let [p (mod n (count coll))]\n               (concat (drop p coll) (take p coll))))","problem":44,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"#(let [length (count %2)]\n  (take length (drop (mod %1 length) (concat %2 %2))))","problem":44,"user":"4f215350e4b0d66497709fd0"},{"problem":44,"code":"(fn [n coll]\n  (->> coll\n       (split-at (mod n (count coll)))\n       reverse\n       flatten))","user":"5c3796b3e4b0d62ef62d9f77"},{"code":"#(let [n (mod %1 (count %2))]\n\t\t  (concat (drop n %2) (take n %2)))","problem":44,"user":"51f2851fe4b0210f90e7454b"},{"code":"(fn [n col]\n  (for [x (range (count col))]\n    (nth col (mod (+ x n) (count col)))))","problem":44,"user":"507a08e4e4b08327cd804a67"},{"code":"#(let [l (count %2)] (take l \n    (drop (mod %1 l) (cycle %2))))","problem":44,"user":"4f88ae35e4b033992c121c6d"},{"problem":44,"code":"(fn [n col]  \n  (let [posn (mod n (count col))] \n     (concat (drop posn col)\n             (take posn col))))","user":"56fa2905e4b07572ad1a88be"},{"code":"(fn rots [n coll]\n  (let [idx (mod n (count coll))]\n    (concat (drop idx coll) (take idx coll))))","problem":44,"user":"5368a275e4b0243289761e8f"},{"problem":44,"code":"(fn rot [r xs]\n  (cond\n   (> r (count xs)) (rot (mod r (count xs)) xs)\n   (< r (- (count xs))) (rot (mod r (count xs)) xs)\n   (pos? r) (concat (drop r xs) (take r xs))\n   :else (concat (take-last (- r) xs) (drop-last (- r) xs))\n    ))","user":"6045582fe4b02d28681c77b6"},{"problem":44,"code":"(fn [n coll]\n  (let [size (count coll)\n        modn (rem n size)\n        posn (if (< modn 0) (+ size modn) modn)]\n    (concat (drop posn coll) (drop-last (- size posn) coll))))","user":"5e12327ee4b099d064962fe5"},{"code":"(fn [dir coll]\n  (loop [m dir c coll]\n    (if (zero? m)\n      c\n      (recur (if (> m 0) (dec m) (inc m))(if (> m 0) (concat (rest c) (list (first c))) (concat (list (last c)) (butlast c)))))))","problem":44,"user":"51e595a6e4b0efabf93c02d8"},{"problem":44,"code":"(fn [s l]\n  (let [c (count l)]\n   (take c (drop (mod s c) (cycle l)))))","user":"58b86162e4b0ebc645576d97"},{"problem":44,"code":"(fn [n s]\n   (let [l (count s)\n         modn (mod n l)] \n     (concat (drop modn s) (take modn s) )\n\n))","user":"5ab07d63e4b073f1774425af"},{"problem":44,"code":"(fn [n orig]\n  (let [i (mod n (count orig))]\n    (concat (vec (drop i orig)) (vec (take i orig)))))","user":"5b2a559be4b063e2438bcc74"},{"code":"(fn [n s]\r\n  (let [len (count s)\r\n        pos (+ (rem n len) (if (neg? n) len 0))]\r\n    (concat (take-last (- len pos) s) (take pos s))))","problem":44,"user":"4f359c7ee4b0e243712b1ec4"},{"problem":44,"code":"#(let [l (count %2)\n        msp (mod %1 l)\n        sp (if (neg? msp)\n              (+ msp l)\n              msp)]\n    (apply concat (reverse (split-at sp %2))))","user":"5649b1b0e4b0284900eef646"},{"problem":44,"code":"(fn [i coll]\n  (->>\n    coll\n    (split-at (mod i (count coll)))\n    reverse\n    (apply concat)))","user":"58bc0531e4b0888cdc949d07"},{"code":"(fn sh [n s]\n  (let [cnt (count s) \n        real-n (mod n cnt)]\n    (concat (drop real-n s) (take real-n s))))","problem":44,"user":"5117c31ee4b0e0897831a60c"},{"problem":44,"code":"(fn rot [n s] \n  (let [ops (if (< n 1) \n              {:ds identity :pop last :rest butlast :n (* -1 n)}\n              {:ds vec :pop first :rest rest :n n})]\n              (loop [n (:n ops) s s]\n                (if (< n 1)\n                  s\n                  (recur (dec n) (conj ((:ds ops)((:rest ops) s)) ((:pop ops) s)))))))","user":"5700ec08e4b08d47c97781cd"},{"code":"(fn [n colls]\n  (let [m (mod (Math/abs n) (count colls))]\n    (if (>= n 0)\n      (flatten (concat (drop m colls) (take m colls)))\n      (flatten (concat (take-last m colls) (drop-last m colls))) )))","problem":44,"user":"4ea092f4535d7eef308072a6"},{"problem":44,"code":"(fn [x ls]\n  (if (= x 0)\n    ls\n    (if (> x 0)\n    \t(recur (- x 1) (concat (rest ls) (list (first ls))))\n      \t(recur (+ x (count ls)) ls)\n      )\n    )\n  )","user":"541ef7e2e4b01498b1a71a92"},{"problem":44,"code":"(fn f [n s]\n  (let [c (mod n (count s))]\n    (concat (drop c s) (take c s))))","user":"5dfb7f6de4b0a607a9a45cdc"},{"code":"(fn [n xs]\n  (let [[r l] (split-at (mod n (count xs)) xs)]\n    (concat l r)))","problem":44,"user":"5173726be4b098276e74652c"},{"problem":44,"code":"(fn [n xs] \n\t(let [len (count xs) \n\t      m (mod n len)]\n\t    (concat (drop m xs) (take m xs))))","user":"55b8c339e4b01b9910ae29b9"},{"problem":44,"code":"(fn rot \n  [n coll]\n  (cond \n   (< n 0) (rot (+ n (count coll)) coll)\n   (>= n (count coll)) (rot (- n (count coll)) coll)\n   :else (let [s (split-at n coll)]\n      (concat (last s) (first s)))))","user":"58edaa3be4b056aecfd47d89"},{"problem":44,"code":"(fn rot [n xs] (if (>= n 0)\n                 (if (= n 0)\n                   xs\n                   (rot (- n 1) (concat (rest xs) [(first xs)])))\n                 (if (= n 0)\n                   xs\n                   (rot (+ n 1) (cons (last xs) (butlast xs))))))","user":"53c051a5e4b0c98a41f5ccae"},{"code":"(fn [n seq]\n  (let [l (count seq)\n        n (mod (+ l n) l)]\n    (concat (drop n seq) (take n seq))))","problem":44,"user":"4e82c062535db62dc21a62cc"},{"code":"(fn rotate [o coll]\n  (let [v (vec coll),\n        n (count coll), \n        cy (map #(mod % n) (range o (+ o n)))]\n    (for [i cy] (v i))))","problem":44,"user":"4e89f9e5535d3e98b8023289"},{"problem":44,"code":"#(let [c (count %2) r (mod (+ c (mod %1 c)) c) s (concat %2 %2)] (drop r (take (+ r c) s)))","user":"5a95e50be4b0d174b936c760"},{"problem":44,"code":"(fn [steps sequ]\n  (let [lenght (count sequ)\n        rest (mod steps lenght)\n        n (if (pos? rest) rest\n                           (+ lenght rest))]\n    (concat (drop n sequ) (take n sequ))))","user":"55815973e4b05c286339e0f6"},{"problem":44,"code":"(fn rotate [n coll]\n  (cond (= n 0) coll\n        (> n 0) (rotate (- n (count coll)) coll)\n        (< n 0) (rotate (inc n) (cons (last coll) (butlast coll)))))","user":"51b8d3d5e4b050a1176cd69d"},{"code":"(fn rot [amt lst]\n   (cond (zero? amt) lst\n         (< amt 0) (lazy-seq (rot (inc amt) (cons (last lst) (drop-last lst))))\n         :else (lazy-seq (rot (dec amt) (concat (rest lst) (list (first lst)))))))","problem":44,"user":"524f213be4b0541d1855b7ff"},{"problem":44,"code":"(fn [n s]\n  (if (>= n 0)\n    (drop n (take (+ (count s) n) (cycle s)))\n    (drop (inc (Math/abs n)) (take (+ (count s) (inc (Math/abs n))) (cycle s)))))","user":"5686640ae4b0dcc4269f4050"},{"problem":44,"code":"#(mapcat seq (rseq (split-at (mod %1 (count %2)) %2)))","user":"55dab408e4b0e31453f64ad9"},{"problem":44,"code":"(fn RotateSequence [n s]\n  (let [c (count s)\n        m (mod n c)]\n    (take c\n          (drop m\n                (concat s s)))))","user":"53b88e6ee4b047364c0444de"},{"problem":44,"code":"(fn [x ys]\n  (let [x' (rem x (count ys))\n        i (if (pos? x')\n            x'\n            (+ (count ys) x'))\n        [y1 y2] (split-at i ys)]\n    (concat y2 y1)))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":44,"code":"(fn rotate [n x]\n\n    (if (= n 0)\n      x\n      (if (pos? n) \n        (rotate (dec n) (concat (rest x) (list (first x))))\n        (rotate (inc n) (concat (list (last x)) (drop-last x)))\n      )\n    )\n)","user":"602cc4d4e4b0d5df2af22274"},{"problem":44,"code":"(fn [i coll]\n  (let [z (count coll)\n        [a b] (split-at (mod i z) coll)]\n    (concat b a)))","user":"51a4d802e4b0def3c5c5869a"},{"problem":44,"code":"(fn [n s]\n  (let [c (mod n (count s))]\n    (concat (drop c s) (take c s))))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":44,"code":"(fn [shift xs] (for [index (range (count xs))] (nth xs (mod (+ index shift) (count xs)))))","user":"5468033ee4b00cfc9eacc133"},{"code":"(fn [idx coll]\n  \t(let [size (count coll)\n\t\t\t  nidx (apply #(if (neg? %) (+ size %) %) (list (rem idx size)))]\n\t\t\t(take size (drop nidx (cycle coll)))))","problem":44,"user":"4e6a63fd535d8ccf87e9feda"},{"code":"(fn [cyc mylist]\n  (let [len (count mylist) ,\n\t      n (if (>= cyc 0) \n\t\t\tcyc\n\t\t\t(+ len (mod cyc len)))]\n\t(take len (nthnext (cycle mylist) n)))\n)","problem":44,"user":"4f2965ffe4b0d6649770a029"},{"problem":44,"code":"(fn rotate [n s]\n  (cond\n    (zero? n) s\n    (> n 0) (recur (dec n) (concat (rest s) (take 1 s)))\n    :else (recur (inc n) (concat (take-last 1 s) (drop-last s)))))","user":"57cd7498e4b0c746388ab897"},{"code":"(fn [n x] (let [[a b] (split-at (mod n (count x)) x)] (concat b a)))","problem":44,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"(fn [n coll]\n   (let [coll-cnt (count coll)]\n    (take coll-cnt (drop (mod n coll-cnt) (cycle coll)))))","problem":44,"user":"4f7426fde4b044e54cd9a8f5"},{"problem":44,"code":"(fn rotate' [n coll]\n  (cond\n   (= n 0) coll\n   (> n 0) (rotate' (dec n) (concat (rest coll) [(first coll)]))\n   :else (rotate' (inc n) (concat [(last coll)] (drop-last coll)))))","user":"5680104ae4b0966858e4d8ea"},{"code":"(fn rot-seq\n  [n s]\n  (let [length (count s)]\n    (map\n     (fn [i]\n       (nth s (rem (+ i n (* length 2))\n                   length)))\n     (range length))))","problem":44,"user":"4db8d37d535d1e037afb219c"},{"code":"(fn rota [n seq] (take (count seq) (drop (mod (if (neg? n) (+ (count seq) n) n) (count seq)) (concat seq seq))))","problem":44,"user":"4ebe8d65535dfed6da9c6d96"},{"problem":44,"code":"(fn [n coll]\n\t(let [ x (mod (+ n (count coll)) (count coll)) ]\n\t\t(concat (drop x coll) (take x coll))))","user":"598af379e4b02b9968b84ce6"},{"code":"#(let [c (count %2)] (take c (drop (mod %1 c) (cycle %2))))","problem":44,"user":"4e5ecd65535d8a8b8723a2d6"},{"code":"#(concat\n     (drop (mod %1 (count %2)) %2)\n     (take (mod %1 (count %2)) %2))","problem":44,"user":"4ec60dc4535d6d7199dd36c0"},{"problem":44,"code":"(fn my_rotate[n list] \n    (if (> n (count list))\n        (my_rotate (mod n (count list)) list)\n        (if (< n 0)\n            (my_rotate (+ (count list) n) list)\n            (concat (drop n list) (take n list))\n        ) \n    )\n)","user":"5b67f0fbe4b0c6492753e76d"},{"code":"(fn [n coll]\n    (let [coll (take\n                (count coll)\n                (drop\n                 (java.lang.Math/abs n)\n                 (cycle\n                  (if (neg? n)\n                    (reverse coll)\n                    coll))))]\n      (if (neg? n)\n        (reverse coll)\n        coll)))","problem":44,"user":"52a7634ae4b0c58976d9ac16"},{"problem":44,"code":"(fn [x coll]\n  (reduce #(assoc %1 (first %2) (second %2)) \n          (vec coll) \n          (map-indexed (fn [idx itm] [(mod (- idx x) (count coll)) itm]) coll)))","user":"57acee37e4b0b8559636fc94"},{"code":"(fn [n coll]\n  (let [size (count coll)\n        r (if (< n 0)\n            (+ size (rem n size))\n            (rem n size))]\n    (concat (drop r coll) (take r coll))))","problem":44,"user":"528b08efe4b0239c8a67ae8a"},{"code":"(fn [s col]\n   (let [co (count col)\n         s  (mod s co)\n         slst (apply concat (take 2 (repeat col)))\n         ]\n     (drop s (take (+ co s) slst))))","problem":44,"user":"5124619ae4b02c3f2a072ccd"},{"problem":44,"code":"(fn rotate [d col]\n   (let [cnt (count col)\n         d (rem d cnt)\n         i (if (neg? d) (+ cnt d) d)]\n     (concat (drop i col) (take i col))))","user":"5f300f28e4b033932238a682"},{"problem":44,"code":"(fn rotate [rot coll]\n   (cond\n     (= rot 0) coll\n     (pos? rot) (recur (dec rot) (conj (vec (rest coll)) (first coll)))\n     :else (recur (inc rot) (conj (butlast coll) (last coll)))\n     ))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":44,"code":"(fn\n  [x xs]\n  (loop [y x\n         ys xs]\n    (cond \n      (= 0 y) ys\n      (pos? y) (do \n                 (recur \n                   (- y 1)\n                   (conj (vec (drop 1 ys)) (first ys))))\n      (neg? y) (do\n                 (recur\n                   (+ y 1)\n                   (flatten (conj (list (drop-last ys)) (first (take-last 1 ys)))))))))","user":"5574c172e4b05c286339e059"},{"problem":44,"code":"(fn [n li]\n  (let [left (fn [li] (concat (drop 1 li) (take 1 li)))\n        right (fn [li] (cons (last li) (butlast li)))]\n    (if (> n 0)\n      (reduce (fn [li _] (left li)) li (range n))\n      (reduce (fn [li _] (right li)) li (range (- n))))))","user":"59156f0be4b0163c97b36f3d"},{"code":"(fn [x coll]\n    (map\n        (fn [nm] (nth (apply concat (take 30 (repeat coll))) nm))\n        (range (+ x (* 2 (count coll))) (+ x (* 3 (count coll))))\n    )\n)","problem":44,"user":"4e78dc98535db95036265724"},{"problem":44,"code":"(fn rot-seq [n coll]\n  (pr :n n :coll coll)\n  (cond (= n 0)\n    coll\n    (> n 0)\n    (rot-seq (dec n)\n             ;;(let  [r (if (seq? coll) coll (lazy-seq coll) )]\n             (let [[h & tail] coll]\n               (concat tail (list h)))\n               ;;(concat (rest coll) (first coll))\n    )\n    :else  (rot-seq (+ (count coll) n) coll)))","user":"5972fcf6e4b01722bebd4c92"},{"problem":44,"code":"(fn [n coll] (concat \n              \n              \n              (drop \n               (mod (+ n (count coll)) \n                    (count coll)) \n               coll) \n              \n              (take \n           (mod (+ n (count coll)) \n                    (count coll)) \n               coll)))","user":"53cb321fe4b00fb29b2212d1"},{"problem":44,"code":"(fn [rotation lst]\n  (let [n (mod rotation (count lst))]\n    (flatten (reverse (split-at n lst)))))","user":"56603e5fe4b068f2fe63dc4a"},{"code":"(fn [n coll]\n  (let [n-fixed (mod n (count coll))]\n    (flatten (conj (take n-fixed coll) (drop n-fixed coll)))))","problem":44,"user":"4e42f930535dc968683fc49f"},{"code":"#(for [i (range (count %2)) :let [y (mod (+ i %1) (count %2))]] (nth %2  \ny))","problem":44,"user":"4fb4303fe4b081705acca2ac"},{"code":"(fn [shift s]\n  (let [shift (mod shift (count s))]\n    (into (vec (drop shift s)) (take shift s))))","problem":44,"user":"4faec810e4b081705acca24e"},{"problem":44,"code":"(fn rot-func [n coll]\n (let [nmod (mod n (count coll))]\n   (concat (drop nmod coll) (take nmod coll))))","user":"5d1cf523e4b02ea6f0fb6994"},{"problem":44,"code":"(fn rotate [num coll]\n  (let [ind (mod num (count coll))]\n    (concat (drop ind coll) (take ind coll))))","user":"5693a53ee4b0dcc4269f4106"},{"code":"(fn rotate-seq [n xs]\n    (cond \n        (zero? n) xs\n        (pos?  n) (recur (dec n) (concat (rest xs) (list (first xs))))\n        :else     (recur (inc n) (cons (last xs) (butlast xs)))))","problem":44,"user":"4f0660ee535dcb61093f6c0d"},{"code":"(fn [n y] (let [rot1 (fn [n y]\n  (if (pos? n) (concat (rest y) (vector (first y)))\n    (concat (vector (last y)) (butlast y))))\n  abs (fn [x] (if (neg? x) (- x) x))]\n(last (take (inc (abs n)) (iterate (partial rot1 n) y)))))","problem":44,"user":"4ea9b80c535d7eef30807306"},{"problem":44,"code":"#(let [rotation (mod %1 (count %2))]\n   (concat (drop rotation %2)\n           (take rotation %2)))","user":"55d0e76ae4b0e31453f64a40"},{"code":"(fn rotate*\n  [n coll]\n  (let [cnt (count coll)\n        n*  (if (pos? n) n (* n -1))\n        idx (cond\n             (pos? n) (mod n cnt)\n             :else    (- cnt (mod n* cnt)))]\n    (take cnt (drop idx (cycle coll)))))","problem":44,"user":"4dda44f2535d02782fcbe9f1"},{"problem":44,"code":"#(take (count %2) (drop (cond (< %1 0) (+ (* 4 (count %2)) %1)\n                               (>= %1 0) %1) (cycle %2)))","user":"5f27cc7fe4b033932238a646"},{"problem":44,"code":"(fn some-fn1\n  [c some-seq]\n  (println (str \"fn: \" c \" ___ \" some-seq))\n  (if (> c 0)\n    (loop [s some-seq\n           n c]\n      (println (str \"positive loop: \" s \" ___ \" n))\n      (if (= n 0)\n        s\n        (recur (concat (rest s) [(first s)]) (dec n))))\n  (loop [s some-seq\n         n (- c)]\n    (println (str \"negative loop: \" s \" ___ \" n))\n    (if (= n 0)\n      s\n      (recur (concat [(last s)] (butlast s)) (dec n))))))","user":"5491bebbe4b0b312c081ff3c"},{"code":"(fn [c col]\n    (loop [orgcnt c cnt (Math/abs c) acc col]\n      (if (zero? cnt)\n        acc\n        (if (> orgcnt 0)\n            (recur orgcnt (dec cnt) (concat (rest acc) [(first acc)]))\n            (recur orgcnt (dec cnt) (concat [(first (reverse acc))] (drop-last acc)))\n        )\n      )\n    )\n)","problem":44,"user":"4fe79ebce4b07c9f6fd12c37"},{"code":"(fn permute [n aSeq]\n            (let [mod-n (mod n (count aSeq))]\n                (let [[a b] (split-at mod-n aSeq)] \n                     (concat b a))))","problem":44,"user":"4e463703535dc968683fc4b2"},{"code":"(fn rot [n xs]\n  (let [an (Math/abs n)\n        rn (mod an (count xs))\n        nn (if (neg? n) (- 0 rn) rn)]\n    (if (pos? n)\n      (concat (drop rn xs) (take rn xs))\n      (concat (take-last rn xs) (drop-last rn xs)))))","problem":44,"user":"4f2a35ace4b0d6649770a03a"},{"problem":44,"code":"(fn [n xs]\n  (let [n* (mod n (count xs))\n        [l r] (split-at n* xs)]\n    (concat r l)))","user":"5bea3177e4b0f319e2d7ec81"},{"code":"#(take (count %2) (nthrest (cycle %2) (mod % (count %2))))","problem":44,"user":"5170ea06e4b0d70c8bbbf235"},{"code":"#(let [[a b] (split-at (mod % (count %2)) %2)]\n   (concat b a))","problem":44,"user":"52736ca1e4b03e8d9a4a747e"},{"code":"(fn rot [num-rotations s]\n  (let [num-rotations (mod num-rotations (count s))]\n    (if (pos? num-rotations)\n      (concat (drop num-rotations s) (take num-rotations s))\n      (concat (take-last (* -1 num-rotations) s) (take (- (count s) (* -1 num-rotations)) s)))))","problem":44,"user":"516385cee4b055933a9ca02d"},{"problem":44,"code":"(fn[n seq]\n  (let [actual-rotation (mod n (count seq))\n        first-half (reverse (take actual-rotation seq))\n        second-half (reverse (drop actual-rotation seq))]\n    (reverse (concat first-half second-half))))","user":"5d8c8175e4b0915913b1d3e1"},{"problem":44,"code":"(fn [t v]\n   (let [vlen (count v)\n         dropn (mod t vlen)]\n     (take vlen (drop dropn (cycle v)))))","user":"5875daaee4b01531a375ea74"},{"problem":44,"code":"(fn [n seq]\n  (cond\n   (= n 0) seq\n   (> n 0) (take (count seq) (drop n (flatten (repeat seq))))\n   (< n 0) (reverse (take (count seq) \n                          (drop (- n) (flatten (repeat (reverse seq))))))))","user":"5553b924e4b0deb715856e06"},{"code":"(fn [a l]\n  (let [n (mod a (count l))]\n    (concat (drop n l) (take n l))))","problem":44,"user":"4dd9d299535d2dad7130b5dd"},{"problem":44,"code":"#(apply concat(reverse (split-at (mod % (count %2)) %2)))","user":"54380631e4b032a45b86930f"},{"code":"(fn [a s] (let [x (count s), i (mod a x), r (list (nth s i))]\n  (loop [c (mod (inc i) x), r r]\n    (if\n      (= c i)\n      r\n      (recur (mod (inc c) x)\n        (concat r (list (nth s c))))))))","problem":44,"user":"4e3ac1b2535deb9a81d77f4c"},{"code":"(fn [a b] (take (count b) (drop (mod a (count b)) (cycle b))))","problem":44,"user":"50ef56dfe4b0bdaecbb47d94"},{"problem":44,"code":"(fn rotate-seq [n s]\n  (let [n (mod n (count s))]\n    (concat (drop n s) (take n s))))","user":"547884d7e4b0c51c1f4d72bd"},{"problem":44,"code":"(fn [n s] (nth (iterate #(conj (vec (rest %)) (first %)) s) (mod n (count s))))","user":"5464a536e4b01be26fd746cf"},{"code":"(fn rotate [n s]\r\n    (let [c (count s)]\r\n      (cond (or (> n c) (> (- n) c)) (rotate (rem n c) s)\r\n      (neg? n) (let [m (+ c n)] (concat (drop m s) (take m s)))\r\n\t    :default (concat (drop n s) (take n s)))))","problem":44,"user":"4f9c4080e4b0dcca54ed6d1a"},{"code":"(fn [n lst]\n  (loop [i,(mod n (count lst)) res,(apply vector lst)]\n    (if (zero? i)\n      res\n      (recur (dec i) (conj (apply vector (rest res)) (first res)) )\n      )))","problem":44,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":44,"code":"(fn [idx l]\n  (let [off (mod idx (count l))]\n    (concat (drop off l) (take off l))))","user":"56ef077ae4b04a395b9a0459"},{"problem":44,"code":"(fn [n coll] \n  (let [index (mod n (count coll))]\n    (flatten (into [] (reverse (split-at index coll))))))","user":"567d18c9e4b05957ce8c61c4"},{"code":"(fn [x col]\n   (letfn [(rot [y coll]\n              (cond (= 0 y)\n                    coll\n                    (> 0 y)\n                    (rot (inc y) (conj (butlast coll) (last coll)))\n                    :else\n                    (rot (dec y) (concat (rest coll) (vector (first coll))))))]\n     (rot x col)))","problem":44,"user":"50ccf729e4b0f7a459302aac"},{"problem":44,"code":"(fn rotate [steps coll]\n   (let [coll (if (neg? steps) (vec (reverse coll)) (vec coll))]\n     (loop [c coll rem-steps (Math/abs steps)]\n       (if (zero? rem-steps)\n         (if (neg? steps) (vec (reverse c)) c)\n         (recur (->> (first c)\n                     (conj c)\n                     (drop 1)\n                     vec) (dec rem-steps))))))","user":"56012cd7e4b04bb52996e17d"},{"problem":44,"code":"(fn [num coll]\n    (let [coll-count (count coll)]\n      (cond\n        (< num 0) (recur (+ num coll-count) coll)\n        (= num 0) coll\n        (< num coll-count) (concat (take-last (- coll-count num) coll) (take num coll))\n        (= num coll-count) coll\n        (> num coll-count) (recur (- num coll-count) coll))))","user":"58bbcbc8e4b0888cdc949d00"},{"code":"#(take (count %2)\n  (drop (mod %1 (count %2)) (cycle %2)))","problem":44,"user":"4ff4f5c4e4b0678c553fc362"},{"code":"(fn [n x]\n  (let [foo (fn once [m x]\n    (if (= m 0)\n      x\n      (once (dec m) (conj (vec (rest x)) (first x)))\n     )\n     )]\n   (seq (foo (mod n (count x)) x))))","problem":44,"user":"525372ade4b0541d1855b8f3"},{"problem":44,"code":"(fn [no coll] (take (count coll) (drop (mod no (count coll)) (cycle coll))))","user":"5c371f5be4b0d62ef62d9f72"},{"problem":44,"code":"(fn [r coll]\n  (let [n (count coll)\n        d (+ n (rem r n))]\n    (take n (drop d (cycle coll)))))","user":"4f107e0e535d64f60314641c"},{"problem":44,"code":"(fn [offset coll]\n  (let [len   (count coll)\n        start (mod offset len)]\n    (take len (drop start (cycle coll)))))","user":"54485727e4b032a45b8693c6"},{"code":"(fn rot[r c]\n (cond\n  (> r 0) (rot (dec r) (concat (rest c) (list (first c))))\n  (= r 0) c\n  (< r 0) (rot (inc r) (concat (list (last c)) (butlast c)))\n  ))","problem":44,"user":"506fd0afe4b07bd6ad9b9f23"},{"problem":44,"code":"#(mapcat (fn [f] (f (mod (Math/abs %1) (count %2)) %2))\n         (if (pos? %1) [drop take] [take-last drop-last]))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"code":"(fn [n s]\n  (let [nr (rem n (count s))]\n    (if (>= n 0)\n      (concat (drop nr s) (take nr s))\n      (concat (drop (+ (count s) nr) s) (take (+ (count s) nr) s))\n    )))","problem":44,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":44,"code":"(fn[x y] (let [a (mod x (count y))] (concat (drop a y) (take a y))) )","user":"53f1c05ee4b0742d9025b0e1"},{"problem":44,"code":"(fn rotate [n s] \n    (let [rotate-left (fn [s] (concat (rest s) [(first s)]))\n          rotate-right  (fn [s] (reverse (rotate-left (reverse s))))]\n      (cond (= n 0) s\n            (< n 0) (nth (iterate rotate-right s) (- 0 n))\n            (> n 0) (nth (iterate rotate-left s ) n))))","user":"54468fd3e4b032a45b8693b2"},{"problem":44,"code":"(fn f [rot coll]\n  (cond\n   (> rot 0) (f (dec rot) (conj (vec (rest coll)) (first coll)))\n   (< rot 0) (f (inc rot) (cons (last coll) (butlast coll)))\n   :else coll))","user":"5afb3426e4b0cc2b61a3bcf5"},{"code":"(fn [n coll] \n  (let [l (count coll)]\n    (take l\n          (drop (mod n l)(concat coll coll)))))","problem":44,"user":"5106bc8ae4b01150e115ebec"},{"code":"(fn [s ls]\n     (letfn [ (shift-right [l] (concat (rest l) (take 1 l)))\n              (shift-left [l] (cons (last l) (butlast l)))]\n     (let [f (if (< s 0) shift-left shift-right) \n           c (if (< s 0) (* -1 s) s)]\n       (loop [t 0 ll ls]\n         (if (>= t c)\n           ll\n           (recur (inc t) (f ll)))))))","problem":44,"user":"4f017593535dcb61093f6a36"},{"problem":44,"code":"#(flatten (conj (first (partition-all (mod %1 (count %2)) %2)) (flatten (rest (partition-all (mod %1 (count %2)) %2)))))","user":"57da5fc4e4b0bd073c20240f"},{"problem":44,"code":"(fn [offset coll] (take (count coll) (drop (mod offset (count coll)) (cycle coll))))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":44,"code":"(fn [n xs] \n  (let [m (mod n (count xs))] \n    (concat (drop m xs) (take m xs))))","user":"6011b89ee4b074f607df66bc"},{"code":"#(let [d (count %2) c (+ (rem % d) d)] (drop c (take (+ d c) (cycle %2) ) ) )","problem":44,"user":"52c6a0abe4b0c2d177d62111"},{"code":"(fn [n xs]\n  (let [m (mod n (count xs))]\n    (concat (drop m xs) (take m xs))))","problem":44,"user":"50630247e4b05ac47bc68d6b"},{"problem":44,"code":"#(let [pivot (mod  % (count %2))]\n\t(concat \n     \t(drop pivot %2) (take pivot %2)))","user":"5566463ee4b0c656e3ff1831"},{"problem":44,"code":"(fn [n col]\n  (let [size (count col)\n        pivot (mod (if (neg? n) (+ size n) n) size)]\n    (into (vec (drop pivot col)) (take pivot col))))","user":"5956c6dae4b066ee0a44af61"},{"code":"(fn [v coll]\n  (let [len (count coll) s (cycle coll)]\n    (if (pos? v)\n      (take len (drop v s))\n      (take len (drop (mod v len) s)))))","problem":44,"user":"5046f909e4b03b02161376b5"},{"code":"(fn rotate\n  [index coll] (cond \n                 (= index 0) coll\n                 (> index 0) (rotate (dec index) (concat (rest coll) (list (first coll))))\n                 (< index 0) (rotate (inc index) (concat (list (last coll)) (reverse (rest (reverse coll)))))))","problem":44,"user":"52fc34cee4b047fd55837015"},{"problem":44,"code":"(fn\n  [n xs]\n  (let [rot (mod n (count xs))]\n    (concat (drop rot xs) (take rot xs))))","user":"5b673832e4b0c6492753e760"},{"problem":44,"code":"(fn rotate [n lat]\n     (if (>= n 0)     \n       (loop [counter 0\n              ans lat]\n         (if (= counter n)\n           ans\n           (recur (inc counter) (concat (rest ans) `(~(first ans))))))\n       (loop [counter 0\n              ans lat]\n         (if (= counter (- n))\n           ans\n           (recur (inc counter) (concat `(~(last ans)) (take (dec (count lat)) ans)))))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":44,"code":"(fn [n col]\n    (let [cnt (count col)\n          rotLeftBy (mod (if (neg? n) (- cnt (Math/abs n)) n) cnt)\n          [left right] (split-at rotLeftBy col)]\n      (concat right left)\n     ))","user":"59932f49e4b0b211ea3aaaae"},{"problem":44,"code":"(fn [shift init-seq]\n  (if (nil? (seq init-seq))\n    [] \n    (let [n (count init-seq)\n          abs-shift (if (neg? shift) (- shift) shift)\n          abs-shift-m-rest (mod abs-shift n)]\n      (cond (pos? shift) (concat (drop abs-shift-m-rest init-seq)\n                                 (take abs-shift-m-rest init-seq))\n            (neg? shift) (concat (take-last abs-shift-m-rest init-seq)\n                                 (drop-last abs-shift-m-rest init-seq))\n            true init-seq))))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"code":"(fn [num seq]\r\n  (let [n (mod num (count seq))]\r\n    (concat (take-last (- (count seq) n) seq) (take n seq))))","problem":44,"user":"4df3df8a535d08e6dec9fe2d"},{"code":"#(let [c (count %2), n (mod (if (neg? %1) (+ c %1) %1) c)] (apply concat (reverse (split-at n %2))))","problem":44,"user":"50d3ec8be4b030b634c368bb"},{"problem":44,"code":"#(let [x (rem (+ (count %2) (rem %1 (count %2))) (count %2))]\n   (flatten [(drop x %2) (take x %2)]))","user":"56ab7578e4b03c432f18733d"},{"problem":44,"code":"(fn [n coll]\n  (let [mod-n (mod n (count coll))\n        [left right] (split-at mod-n coll)]\n       (concat right left)))","user":"5bf1b957e4b0a6d31fed216f"},{"code":"(fn [n coll]\n  (if (> n 0)\n    ((fn ! [c x]\n        (if (= c n)\n            x\n            (! (inc c)\n                (flatten (list\n                    (rest x)\n                    (first x)))))) 0 coll)\n    ((fn ! [c x]\n        (if (= c n)\n            x\n            (! (dec c)\n                (flatten (list\n                    (last x)\n                    (drop-last x)))))) 0 coll)))","problem":44,"user":"5132c6f0e4b021281ec7b6d3"},{"problem":44,"code":"(fn [n c] (if (neg? n)\n            (reverse (#(loop [n %,c %2] (if (> n 0) (recur (dec n) (-> (next c) vec (conj (first c)))) (seq c))) (- n) (reverse c)))\n            (#(loop [n %,c %2] (if (> n 0) (recur (dec n) (-> (next c) vec (conj (first c)))) (seq c))) n c))\n  )","user":"5507cfd3e4b021ccfedb96ad"},{"code":"(fn [n s]\n  (let [sh (mod n (count s))]\n  (concat (nthrest s sh) (take sh s))\n  ))","problem":44,"user":"4f47eab2e4b0d56e7bb92bc6"},{"code":"(fn f[xs ls] (loop [x xs acc ls]\n                     (cond (zero? x) acc\n                       (> x 0) (recur (dec x) (concat (rest acc) (list (first acc))))\n                       :else (recur (inc x) (concat (list (last acc)) (drop-last acc))))))","problem":44,"user":"5301157ae4b0d8b024fd3717"},{"problem":44,"code":"(fn rotate [i xs]\n  (apply concat \n         (reverse (split-at (mod i (count xs)) \n                            xs))))","user":"57275898e4b0c5bde472c13e"},{"problem":44,"code":"(fn [n s]\n   (apply concat\n          (rseq\n           (split-at (mod n (count s)) s))))","user":"5e38a9cbe4b01d43a70e8dc2"},{"problem":44,"code":"(fn [rot coll]\n  (let [rot-mod (mod rot (count coll))\n        rot-abs (if (pos? rot-mod ) rot-mod  (inc (Math/abs rot-mod)))\n        right (keep-indexed #(when (>= %1 rot-abs) %2) coll)\n        left  (keep-indexed #(when (< %1 rot-abs) %2) coll)]\n    (concat right left)))","user":"5ea444b7e4b00a66d4a951a0"},{"code":"(fn rotate [amount xs]\n  (let [normalized-amount (mod amount (count xs)) pos (if (> normalized-amount 0) normalized-amount (+ normalized-amount (count xs)))]\n  (take (count xs)(drop pos (concat xs xs)))))","problem":44,"user":"52452225e4b0d8acf9ed6ae6"},{"problem":44,"code":"#(let [x %2\n       n (rem (- %1) (count x))\n       m (if (> n 0)\n           (- (count x) n)\n           (- n))\n       x1 (vec (take m x))\n       x2 (vec (drop m x))\n       x3 (apply (partial conj x2) x1)]\n   x3)","user":"549e5e52e4b0f3d1d8e70f9e"},{"problem":44,"code":"(fn my-rotate [rl lst]\n  (let [rl1 (mod rl (count lst))\n        norm-lst (into [] lst)]\n  (concat (subvec norm-lst rl1 (count norm-lst)) (subvec norm-lst 0 rl1))))","user":"569e3175e4b0542e1f8d1484"},{"problem":44,"code":"(fn rotate\n  [n lst]\n  (cond\n   (> n 0) (rotate (dec n) (concat (rest lst) [(first lst)]))\n   (< n 0) (rotate (+ n (count lst)) lst)\n   :else lst))","user":"5733e4aee4b0cd1946bd0ffe"},{"code":"(fn [n xs] (let [offset (mod n (count xs))] (concat (drop offset xs) (take offset xs) )))","problem":44,"user":"51281b25e4b03a34742b4304"},{"code":"(fn [rot sek] (if (pos? rot) (let [r (rem rot (count sek))] (into (subvec (vec sek) r) (subvec (vec sek) 0 r)) )\r\n                  (let [r (+ (count sek) (rem rot (count sek)))] (into (subvec (vec sek) r) (subvec (vec sek) 0 r)) )    )  )","problem":44,"user":"50463347e4b011c5dfee771e"},{"problem":44,"code":"(fn [input seq1]\n\n  (if (pos? input)\n    (concat  (reverse(take (- (count seq1) (mod input (count seq1)) ) (reverse seq1))) (take (mod input (count seq1)) seq1))\n    (concat  (reverse(take (- (- (count seq1) (mod (* -1 input) (count seq1))) 1) (reverse seq1))) (take (+ (mod (* -1 input) (count seq1)) 1) seq1))\n    )\n)","user":"59228b00e4b026ae38521281"},{"problem":44,"code":"(fn rs [ndx seq]\n  (let [f (fn [n] (concat (drop n seq) (take n seq)))\n        n (rem ndx (count seq))]\n    (if (pos? n) (f n) (f (+ 1 (- n))))))","user":"572ac718e4b0f4d77e651242"},{"code":"(fn rotate [amount coll]\n  (let [size (count coll)\n        drop-amount (if (< 0 amount) amount (inc (Math/abs amount)))]\n    (take size (drop drop-amount (cycle coll)))))","problem":44,"user":"4e6ab9cb535d8ccf87e9fefe"},{"problem":44,"code":"(fn[rotation list] \n  (let [index \n        (if (neg? rotation)\n          (if (< (* -1 rotation) (count list))\n              (inc (* -1 rotation)) \n              (inc (rem (* -1 rotation) (count list))))\n          (if (< rotation (count list)) \n              rotation \n              (rem rotation (count list))))]\n  (flatten (conj (into [] (take-last (- (count list) index) list)) (take index list)))\n  ))","user":"571172ece4b09c608db70446"},{"problem":44,"code":"(fn [n col]\n  (let [n (rem n (count col))]\n    (if (pos? n)\n      (concat\n       (drop n col)\n       (take n col))\n      (concat\n       (take-last (* -1 n) col)\n       (drop-last (* -1 n) col)))))","user":"5b4dfd5de4b02d533a91bcc3"},{"problem":44,"code":"(fn [from coll]\n  (let \n   [index (mod (+ (count coll) from) (count coll))]\n    (apply concat (reverse (split-at index coll)))))","user":"60a7c55be4b00e9e6653c468"},{"problem":44,"code":"(fn rotate-seq [c s]\n  (let [ss (seq s)]\n    (loop [result s step c]\n      (if (= step 0)\n        result\n        (recur\n         (cond\n           (pos? step) (let [y (drop 1 result)\n                             z (conj (vec y) (first result))]\n                         z)\n           :else\n           (let [y (drop-last result)\n                 z (flatten (conj (list y) (last result)))]\n             z)\n           )\n         (if (pos? step) (dec step) (inc step)))))))","user":"57b6edf6e4b0fbc9809a27c8"},{"code":"(fn rotate-seq\n  [n coll]\n  (if (zero? n)\n    coll\n    (if (< n 0)\n     (rotate-seq (inc n) (cons (last coll) (butlast coll)))\n     (rotate-seq (dec n) (conj (vec (rest coll)) (first coll))))))","problem":44,"user":"4e3bcccd535deb9a81d77f56"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [amount (mod n (count coll))]\n    (concat (drop amount coll) (take amount coll))))","user":"60654263e4b069485764ddc9"},{"code":"(fn [n coll]\n  (if (zero? n)\n    coll\n    (if (pos? n)\n     (recur (dec n) (conj (vec (rest coll)) (first coll)))\n     (recur (inc n) (conj (butlast coll) (last coll))))))","problem":44,"user":"4f4319ebe4b0d7d3c9f3fd13"},{"problem":44,"code":"(fn [n seq]\n    (concat\n     (drop (mod n (count seq)) seq)\n     (take (mod n (count seq)) seq)\n     )\n  )","user":"589f37e0e4b02bd94d917e79"},{"problem":44,"code":";#(flatten ((juxt drop take) (mod % (count %2)) %2)) \n;#(let [n (count %2) m (mod % n)] (concat (drop m %2) (take m %2)))\n#(let [n (count %2) m (mod % n)] (flatten ((juxt drop take) m %2)))\n;#(let [n (count %2)] (take n (drop (mod %1 n) (cycle %2))))\n;#(mapcat identity (reverse (split-at (mod % (count %2)) %2)))\n;#(flatten ((juxt drop take) (rem (+ % (* 2 (count %2))) (count %2)) %2)) \n;#(loop [n % xs %2]\n;  (if (zero? n) xs (recur ((if (pos? n) dec inc) n) (conj (rest xs) (first xs))))\n;  )","user":"57ba55c1e4b0fbc9809a2801"},{"problem":44,"code":"(fn [n a]\n  (let [n (rem n (count a))\n        a (vec a)]\n    (if (< n 0)\n      (into (vec (subvec a (+ n (count a)))) (drop-last (Math/abs n) a))\n      (into (vec (drop n a)) (take n a)))))","user":"59ddae03e4b01968742fed65"},{"problem":44,"code":"(fn rot [n s]\n  (letfn [(rot1 [s]\n            (concat (rest s) [(first s)]))]\n    (cond (< n 0) (rot (+ n (count s)) s)\n          (> n 0) (rot1 (rot (- n 1) s))\n          true s)))","user":"53fb5256e4b0de5c4184857f"},{"problem":44,"code":"(fn rotate[n xs]\n  (loop [n (+ n (* 9 (count xs))) [x & others :as s] (vec xs)]\n    (if\n        (zero? n) s\n        (recur (dec n) (conj (vec others) x)))))","user":"60c91f48e4b0e0fa5f1b4304"},{"code":"(fn [n s] (map #(nth s (mod (+ % n) (count s))) (range (count s))))","problem":44,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":44,"code":"(fn [a b] (let [c (mod a (count b))] (concat (take-last (- (count b) c) b) (take c b))))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":44,"code":"#(concat (nthrest %2 (mod %1 (count %2))) (drop-last (- (count %2) (mod %1 (count %2))) %2))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":44,"code":"(fn [n l] \n  (let [d (mod n (count l)) [x y] (split-at d l)] \n        (concat y x)))","user":"542edb4ae4b0dad94371f2c8"},{"code":"(fn [n coll]\n  (let [dir (if (< n 0) \"left\" \"right\") \n\t\t  cnt (if (= dir \"left\") (- n 0) n)\n\t\t  a (- (count coll) cnt)\n\t\t  dist (mod cnt (count coll))]\n \t\t(if (= dir \"right\")\n \t\t\t(concat (drop a coll) (take a coll))) \t\t\n \t\t \t(concat (drop dist coll) (take dist coll))\n \t)\n )","problem":44,"user":"50ca2faee4b0a409464667dc"},{"problem":44,"code":"(fn [i seq]\n  (let [by (mod i (count seq))]\n  \t(concat\n   \t  (drop by seq)\n   \t  (take by seq))))","user":"50d5c19ce4b0159555a1fc61"},{"problem":44,"code":"(fn [n s] (let [x (mod n (count s))\n                [a b] (split-at x s)]\n            (concat b a)))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":44,"code":"(fn [n xs]\n      (flatten\n        (reverse\n          (let [total (count xs)]\n            (split-at\n              ((fn idx [z]\n                 (cond\n                   (< z 0) (idx (+ total z))\n                   (> z total) (idx (- z total))\n                   :else z)) n) xs)))))","user":"5c3f37fce4b08cd430848e91"},{"code":"(fn [n x]\n  (let [size (count x)]\n    (map second\n      (sort (zipmap \n        (map \n          #(mod (+ (* -1 n) %) size)\n          (range size))\n        x)))))","problem":44,"user":"53940789e4b0b51d73faaec3"},{"problem":44,"code":"(fn [n xs] \n  (let [m (mod n (count xs))\n        h (take m xs)\n        t (drop m xs)]\n    (concat t h)))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn f [s l]\n  (let [n (count l) x (mod (+ n s) n)]\n    (concat (drop x l) (take x l))\n    )\n  )","problem":44,"user":"52593207e4b0cb4875a45cd3"},{"problem":44,"code":"(fn rot[n xs]\n  (let [modn (mod n (count xs))]\n    (concat (drop modn xs) (take modn xs))\n  ))","user":"4dd76bf9535d2dad7130b5d1"},{"problem":44,"code":"(fn [rot sequence]\n  (let [forward-rot (mod rot (count sequence))\n        [a b] (split-at forward-rot sequence)]\n    (concat b a)))","user":"5424c523e4b01498b1a71b03"},{"problem":44,"code":"(fn foo [n xs]\n  (if (> n 0)\n    (let [p (mod n (count xs))] \n      (concat (drop p xs) (take p xs)))\n    (foo (+ (count xs) n) xs)))","user":"557dbc9de4b05c286339e0cd"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [len (count xs)\n        x (rem n len)\n        run #(->> xs\n              (split-at %)\n              (reverse)\n              (flatten))]\n    (if (pos? n)\n      (run x)\n      (run (+ x len)))))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn [n x] (reverse (mapcat reverse (split-at (mod n (count x)) x))))","problem":44,"user":"5158bba4e4b059418b97f0ab"},{"problem":44,"code":"#(let [c (cond (< % 0) (mod % (count %2)) (< (count %2) %) (mod % (count %2)) :else %)](concat (drop c %2) (take c %2)))","user":"538d70abe4b0b51d73faae6e"},{"problem":44,"code":"(fn [n coll]\n  (let [shift (mod n (count coll))]\n  (concat (drop shift coll) (take shift coll))))","user":"5a99b863e4b0d174b936c7ae"},{"problem":44,"code":"(fn rotate [n coll]\n  (if (= n 0)\n    coll\n    (if (< n 0)\n      (rotate (inc n) (take (count coll) (concat (list (last coll)) coll)))\n      (rotate (dec n) (drop 1 (concat coll (list (first coll))))))))","user":"5e805895e4b085ba37836e44"},{"problem":44,"code":"(fn [n s]\n  (let [n (mod n (count s))\n        init (take n s)\n        remain (drop n s)]\n    (concat remain init)))","user":"55170dd9e4b06a49daca83bd"},{"code":"(fn rot [d s]\n  (cond (zero? d) s\n        (pos? d) (rot (dec d) (concat (rest s) [(first s)]))\n        (neg? d) (rot (inc d) (conj (drop-last s) (last s)))))","problem":44,"user":"51e1a1fae4b06a68e693eaf6"},{"problem":44,"code":"(fn  [n l]\n  (let [c (count l)\n        m (mod n c)]\n  (take c (drop m (take (* 2 c) (cycle l))))))","user":"554f7ef2e4b00713264bd9a1"},{"code":"(fn rotate [n xs]\n  (take (count xs) (drop (mod n (count xs)) (cycle xs))))","problem":44,"user":"4f03641a535dcb61093f6a9b"},{"problem":44,"code":"(fn [n s] \n  (let [sign (if (< n 0) -1 1)\n        nn (mod (* sign n) (count s))\n        nt (* nn sign)\n        spn (if (< nt 0) (+ (count s) nt) nn)]\n    (concat (drop spn s) (take spn s))))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":44,"code":"(fn [rank coll]\n  (take (count coll) (drop (+ (mod rank (count coll)) (count coll)) (cycle coll))))","user":"59fa0bb6e4b0ca45a743a352"},{"code":"(fn [x coll]\n  (for [y (range (count coll))]\n    (nth coll (mod (+ x y) (count coll)))\n  )\n)","problem":44,"user":"52b2a819e4b0c58976d9acf1"},{"problem":44,"code":"(fn [n s]\n  (let [n (mod n (count s)) s (vec s)]\n    (concat\n      (subvec s n)\n      (subvec s 0 n))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":44,"code":"(fn [rot s] (let [r (mod rot (count s))\n                         a (take r s)\n                         b (drop r s)]\n                     (concat b a)))","user":"5f2c94b4e4b033932238a669"},{"code":"(fn rot [n col]\n  (let [len (count col)\n        offset (mod n len)\n        pre (take offset col)\n        post (drop offset col)]\n    (concat post pre)))","problem":44,"user":"502ade49e4b0614b52996120"},{"problem":44,"code":"(fn rotate [dir array]\n  (let [expandpos (fn [y] \n                   (into []\n                   (concat y y y ) ) )\n                 \n        expandneg (fn [y]\n                      (into []\n                      (reverse(concat y y y)) ))\n        \n        magnitude (fn [x] (if (neg? x)\n                            (* -1 x)\n                            (* 1 x)) ) \n        dropitpos (fn [x y] \n                 (drop (magnitude x) (expandpos y)))\n               \n        dropitneg (fn [x y] \n                 (drop (magnitude x) (expandneg y)))\n               \n               \n        takeitpos (fn [x y]\n                   (take (count y) (dropitpos x y)))\n                 \n        takeitneg (fn [x y]\n                   (take (count y) (dropitneg x y)))\n               ]\n        \n         (if (pos? dir)\n             (takeitpos dir array)\n             (reverse(takeitneg dir array))\n         )\n                  \n                \n         \n\n\n))","user":"5a534241e4b05d388ecb6c0a"},{"problem":44,"code":"(fn [steps a-seq]\n    (let [size    (count a-seq)\n          big-seq (into (vec a-seq) (into (vec a-seq) (vec a-seq)))\n          factor  (if (neg? steps) -1 1)\n          distance (rem (Math/abs steps) size)\n          offset  (+ size (* factor distance))]\n      (take size (drop offset big-seq))))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":44,"code":"(fn [n s]\n  (let [m (mod n (count s))]\n        (concat (drop m s)\n                (take m s))))","user":"5461dc79e4b01be26fd746a8"},{"problem":44,"code":"(fn rotate [to xs]\n  (flatten (reverse (split-at (mod to (count xs)) xs))))","user":"595d224de4b066ee0a44b016"},{"code":"(fn [n s] (if (= 0 (mod n (count s))) s (recur (dec n) (conj (vec (rest s)) (first s)))))","problem":44,"user":"4f55ab5ee4b0a7574ea71809"},{"code":"#(let [x (count %2)\n       y (mod % x)\n       z (- x y)]\n   (concat (take-last z %2) (take y %2)))","problem":44,"user":"5102489de4b00c483ae176f6"},{"problem":44,"code":"(fn [n s]\n    (let [shift (mod n (count s))]\n      (concat (nthrest s shift) (take shift s))))","user":"55ac07afe4b03311e7b7328f"},{"problem":44,"code":"(fn [rot seq]\n   (let [size (count seq)\n         i (rem rot size)\n         j (if (< i 0)\n             (+ size i)\n             i)\n         ]\n     (concat\n      (drop j seq)\n      (take j seq)\n      )\n     )\n   )","user":"5ee75f8be4b029a2061bbea5"},{"problem":44,"code":"(fn rotate-seq\n  [interval coll]\n  (take (count coll) (drop (mod interval (count coll)) (cycle coll))))","user":"566f7749e4b0a866af6896e9"},{"problem":44,"code":"(fn [num theseq] (let [thenum (if (> num 0) num (+ (count theseq) num))] (let [rot (mod thenum (count theseq))]\n(concat (drop rot theseq) (take rot theseq)))))","user":"55f75c6be4b06e875b46cea9"},{"problem":44,"code":"(fn rotate\n  [n xs]\n  (let [n* (mod n (count xs))]\n  \t(concat (drop n* xs) (take n* xs))))","user":"58896e5ce4b0f1effa3b773e"},{"code":"(fn rotate [n seq] \r\n     (cond (> n 0) (recur (- n 1) (concat (rest seq) [(first seq)]))\r\n           (< n 0) (recur (+ n 1) (concat [(last seq)] (butlast seq)))\r\n           (= n 0) seq))","problem":44,"user":"4f13047d535d64f60314642c"},{"code":"(fn [n s] (let [n* (mod n (count s))] (concat (drop n* s) (take n* s))))","problem":44,"user":"4ed292ac535d44c135fd68d9"},{"code":"#(let [n (mod % (count %2))]\n   (cond \n    (>= n 0) (apply concat (reverse (split-at n %2)))\n    :else (apply concat (reverse (split-at (+ n (count %2)) %2)))))","problem":44,"user":"516d2a46e4b06f078fab252f"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n   (concat \n    (drop n %2) \n    (take n %2)))","user":"593c71cbe4b069cdc2982b90"},{"problem":44,"code":"(fn rotate [n xs]\n    (cond\n      (> n (count xs))\n        (rotate (- n (count xs)) xs)\n\n      (> n 0)\n        (concat\n          (drop n xs)\n          (take n xs)\n        )\n\n      (< n 0)\n        (rotate (+ (count xs) n) xs)\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn [n seq]\n  (apply concat (reverse (split-at (mod (+ (count seq) n) (count seq)) seq))))","problem":44,"user":"50127fbfe4b030d97e4db70f"},{"code":"(fn [x y] (let [n (mod x (count y))] (concat (nthnext y n) (take n y)) ))","problem":44,"user":"52f9ce6de4b047fd55836ff0"},{"problem":44,"code":"(fn rot-seq [n xs]\n  (let [[x y] (split-at (mod n (count xs)) xs)]\n    (concat y x)))","user":"5661e09ae4b068f2fe63dc70"},{"problem":44,"code":"#(apply concat\n   (reverse \n     (split-at (mod %1 (count %2)) \n       %2)))","user":"58acce0ae4b0005cfeb1a754"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [length (count coll)]\n  (cond \n        (< n 0) (rotate (+ n length) coll)\n        (> n (count coll)) (rotate (- n length) coll)\n        :else (apply concat (reverse (split-at n coll))))))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":44,"code":"(fn [n,s] \n  (let [x (mod n (count s))] \n    (concat (drop x s) (take x s))))","user":"533a2f7be4b0e30313ee6cb8"},{"code":"(fn rotate-at [n coll]\n  (let [norm-n\n        (fn [at len]\n          (let [n-at (- at (* len (quot at len)))]\n            (if (neg? at)\n              (+ len n-at)\n              n-at)))]\n    (->> coll\n         (split-at (norm-n n (count coll)))\n         (clojure.core/reverse)\n         (reduce #(apply conj % %2) []))))","problem":44,"user":"523b82efe4b07becd5be21f0"},{"problem":44,"code":"#(let [c (count %2) x (if (pos? %1) %1 (+ c (rem %1 c)))] (take c (drop x (cycle %2))))","user":"549c22f7e4b0f3d1d8e70f86"},{"code":"(fn [n l] (if (pos? n)                                                                                                                                          \n            (drop n (flatten (reduce (fn [x y] (conj (vector x) (nth l (rem y (count l))))) l (range n))))                                                       \n            (take (count l) (flatten (reduce (fn [x y] (conj (list x) (nth l (- (count l) (rem y (count l)) 1)))) l (range (* -1 n))))))                         \n   )","problem":44,"user":"5210ac52e4b080a8d9b9d63e"},{"code":"(fn [r c]\n    (let [v (vec c)\n       len (count v)\n    \t d (mod r len)]\n    \t (concat (take-last (- len d) v) (take d v))))","problem":44,"user":"50668a06e4b03d366d7cb2b2"},{"code":"(fn rotate [n s]\r\n  (loop [n (mod n (count s))\r\n         s s\r\n         ret '()]\r\n    (if (zero? n)\r\n        (concat s (reverse ret))\r\n        (recur (dec n) (rest s) (cons (first s) ret)))))","problem":44,"user":"4fcc6cb3e4b0ee37620e1861"},{"problem":44,"code":"(fn\n  [x coll]\n  (apply concat (reverse (split-at (mod (+ x (count coll)) (count coll)) coll))))","user":"54051338e4b0addc1aec6662"},{"problem":44,"code":"#(take (count %2) (drop (mod %1 (count %2)) (cycle %2) ))","user":"5f63cde9e4b02876ed9fd015"},{"problem":44,"code":"(fn rotate\n  [n s]\n  (let [abs (fn [x] (if (< x 0) (unchecked-negate-int x) x)) r (mod (abs n) (count s))]\n    (if (> n 0)\n      (concat (nthrest s r) (take r s))\n      (concat (take-last r s) (take (- (count s) r) s)))))","user":"53b952eee4b047364c0444e6"},{"code":"(fn [n coll]\n   (let [move (fn [f1 f2 n coll]\n                (loop [n n\n                       res coll]\n                  (if (zero? n)\n                    res\n                    (recur (f2 n) (f1 res)))))\n         forward (partial move #(conj (vec (drop 1 %)) (first %)) dec)\n         backward (partial move #(cons (last %) (butlast %)) inc)]\n     (if (> n 0)\n       (forward n coll)\n       (backward n coll))))","problem":44,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":44,"code":"(fn [amt ser]\n    (if (= 0 amt)\n      ser\n      (if (< 0 amt)\n        (recur (dec amt) (vec (rest (conj (vec ser) (first ser)))))\n        (recur (inc amt) (vec (butlast (cons (last ser) (vec ser))))))))","user":"599342efe4b0b211ea3aaab0"},{"problem":44,"code":"(fn [rot coll]\n  (if (< 0 rot)\n    (concat (drop (rem rot (count coll)) coll) (take (rem rot (count coll)) coll))\n    (let [rot (+ (count coll) (rem rot (count coll)))]\n      (concat (drop rot coll) (take rot coll)))))","user":"5d126728e4b02c15ef02199a"},{"problem":44,"code":"(fn rot [i x]\n  (cond\n    (= i 0) x\n    (> i 0) (rot (dec i) (concat (rest x) [(first x)]))\n    (< i 0) (rot (inc i) (cons (last x) (butlast x)))))","user":"56278266e4b00e49c7cb47d3"},{"problem":44,"code":"#(let [v (vec %2) vc (count v) y (mod %1 vc)] ( apply list (apply conj (subvec v y) (subvec v\n 0 y)) ))","user":"5762fcfde4b0994c1922fbb3"},{"problem":44,"code":"(fn [x coll] (flatten (reverse (split-at (mod x (count coll)) coll))))","user":"55842bd7e4b05c286339e11c"},{"problem":44,"code":"(fn rotate [n seq]\n  (let [n (rem n (count seq))]\n    (if (< n 0)\n      (rotate (+ (count seq) n) seq)\n      (concat (take-last (- (count seq) n) seq) (take n seq)))))","user":"5d247902e4b02ea6f0fb6a24"},{"problem":44,"code":"(fn sequence-rotator [n coll]\n  (let [pos-n (loop [is-pos? (pos? n)\n                     current-n n]\n                (if is-pos?\n                  (if (<= current-n (count coll))\n                    current-n\n                    (- current-n (count coll)))\n                  (let [next-n (+ (count coll) \n                                   current-n)]\n                    (recur (pos? next-n) next-n))))]\n    (concat (drop pos-n coll) (take pos-n coll))))","user":"53d40508e4b00fb29b221332"},{"problem":44,"code":"(fn [n coll]\n  (let [right? (neg? n)\n        coll (if right? (reverse coll) coll)\n        tmp (take (count coll)\n                  (drop (Math/abs n) (cycle coll)))]\n    (if right? (reverse tmp) tmp)))","user":"5616f411e4b06b1bb2182a0a"},{"code":"#(let [n (mod %1 (count %2))]\n   (concat (drop n %2) (take n %2)))","problem":44,"user":"52facb9de4b047fd55837002"},{"problem":44,"code":"#(let [c (count %2)] \n  (take c (drop (mod %1 c) (cycle %2))))","user":"5540cc0ce4b0a04f79299505"},{"problem":44,"code":"(fn [n coll]\n  (let [count-minus-one (- (count coll) 1)\n        last-to-take (if (pos? n) count-minus-one 1)\n        first-to-take (if (pos? n) 1 count-minus-one)\n        rotate (fn [l] (concat (take-last last-to-take l) (take first-to-take l)))]\n    ((apply comp (repeat (max n (- n)) rotate)) coll)\n    ))","user":"5630fd6fe4b0bfe05bf1178b"},{"code":"(fn rotate [n coll]\n  (-> (split-at (mod n (count coll)) coll) reverse flatten))","problem":44,"user":"526ee63de4b03e8d9a4a733f"},{"problem":44,"code":"(fn foo [n coll] (let [len (count coll) toShift (mod (if (neg? n) (+ len n) n) len)] (concat (nthrest coll toShift) (take toShift coll))))","user":"5509bec5e4b06e50f9beb121"},{"problem":44,"code":"(fn [n c]\n  (let [nc (count c)]\n    (cond\n      (> n nc) (recur (mod n nc) c)\n      (neg? n) (recur (+ n nc) c)\n      (pos? n) (concat (drop n c) (take n c)))))","user":"508c3d42e4b0f17d83ea26b2"},{"code":"; I know this can be done with take and drop, but a rotated sequence struck\n ; me as being what cycle is for.\n  (fn my-rotate [n coll] \n    (let [start-pos (mod n (count coll))] \n      (map #(identity %2) coll (drop start-pos (cycle coll)))))","problem":44,"user":"533b1dc4e4b0e30313ee6cc7"},{"problem":44,"code":"(fn [x y]\n  (take (count y) (drop (if (neg? x) (inc (max x (- x))) x) (flatten (repeat (count y) y)))))","user":"54e24a05e4b024c67c0cf7ce"},{"code":"(fn [n c]\n  (let [[a b] (split-at (mod n (count c)) c)]\n    (concat b a)))","problem":44,"user":"4db29f98535df7e46ed9b6c1"},{"code":"(fn [n xs]\n  (let [d (rem n (count xs))\n        rotate (fn [d xs]\n                 (cond (= d 0) xs\n                   (> d 0) (recur (dec d) (concat (rest xs) (vector (first xs))))\n                   (< d 0) (recur (inc d) (concat (vector (last xs)) (butlast xs)))))]\n    (rotate d xs)))","problem":44,"user":"52016fd3e4b0b2e020a18f10"},{"code":"(fn [n xs]\r\n       (let [cnt (count xs)\r\n             offset (+ cnt (* cnt (Math/ceil (/ (Math/abs n) cnt))))]\r\n         (drop (+ (- offset cnt) n) (take (+ offset n) (cycle xs)))))","problem":44,"user":"4deb529a535d08e6dec9fe04"},{"problem":44,"code":"(fn [n lst]\n    (->> \n    (cycle lst)\n    (drop (mod n (count lst)))\n    (take (count lst))     \n    ))","user":"57210e8ee4b0c5bde472c0a8"},{"code":"(fn [i l] (cond \n  (= i 0) l \n  (< i 0) (recur (inc i) (list* (last l) (butlast l)))\n  (> i 0) (recur (- i (count l)) l)\n))","problem":44,"user":"504f7cade4b0a02f9cffde8b"},{"problem":44,"code":"(fn [n coll]                                                                                                                                                              \n  (letfn [(rotate [n coll]                                                                                                                                                \n            (if (> n 0)                                                                                                                                                   \n              (recur (dec n) (concat (rest coll) [(first coll)]))                                                                                                         \n              coll))]                                                                                                                                                     \n    (if (< n 0)                                                                                                                                                           \n      (reverse (rotate (- n) (reverse coll)))                                                                                                                             \n      (rotate n coll))))","user":"50f02de7e4b0bdaecbb47db0"},{"code":"(fn [n coll] (let [n* (mod n (count coll))] (concat (drop n* coll) (take n* coll))))","problem":44,"user":"4df669d4535d08e6dec9fe35"},{"problem":44,"code":"(fn [k coll]\n  (let [N (count coll)\n        k (mod k N)]\n    (cond\n      (< k 0) (concat (take-last k coll) (take (- N k) coll))\n      (> k 0) (concat (take-last (- N k) coll) (take k coll))\n      :else coll)))","user":"60521ea8e4b056659d634205"},{"problem":44,"code":"(fn rotator [num seq]\n   (if (not (= num 0))\n     (if (neg? num)\n       (rotator (inc num) (conj (drop-last seq) (last seq)))\n       (rotator (dec num) (conj (vec (rest seq)) (first seq))))\n     seq))","user":"5508102ee4b021ccfedb96b0"},{"code":"#(let [m (mod % (count %2))] (concat (drop m %2) (take m %2)))","problem":44,"user":"4ef6e689535dced4c769f24f"},{"problem":44,"code":"(fn [m s]\n  (let [seq-size (count s)\n        split-position (if (pos? m) m (+ seq-size m))]\n    (->> (split-at (mod split-position seq-size) s)\n         (reverse)\n         (flatten))))","user":"548582eee4b0e286459a11ae"},{"problem":44,"code":"(fn [n coll]\n  (let [size (count coll)]\n    (take size (drop (mod n size) (cycle coll)))))","user":"5a0a25fce4b0eab8c044893d"},{"code":"(fn [n coll]\n   (take (count coll) \n         (if (neg? n)\n           (drop (inc (Math/abs n)) (cycle coll))\n           (drop n (cycle coll)))))","problem":44,"user":"521d709ae4b050d5da0427ef"},{"code":"(fn [n coll] (take (count coll) (drop (mod n (count coll)) (cycle coll))))","problem":44,"user":"50e8a340e4b0ebbe794eb7ed"},{"problem":44,"code":"(fn [i coll]\n  (let [n (mod i (count coll))]\n    (concat (drop n coll)\n            (take n coll))))","user":"5c1bee41e4b01240ff567218"},{"code":"(fn [idx lst] \n  (let [v (vec lst) i (mod idx (count lst))]\n  (concat (subvec v i) (subvec v 0 i))))","problem":44,"user":"50b11fbce4b009df37c708cb"},{"problem":44,"code":"(fn rotate [n s]\n  (let [rement (if (> n 0)\n                 dec\n                 inc)\n        append (if (> n 0)\n                 #(conj (vec (drop 1 %)) (first %))\n                 #(cons (last %) (butlast %)))]\n    (loop [counter n result s]\n      (if (zero? counter)\n        result\n        (recur (rement counter) (append result))))))","user":"52d84ea7e4b09f7907dd1390"},{"code":"(fn [i s]\n  (let [start-index (mod (+ i (count s)) (count s))]\n    (->>\n      (range start-index (+ start-index (count s)))\n      (map #(mod % (count s)))\n      (map #(nth s %)))))","problem":44,"user":"51ce1320e4b0e42293a22551"},{"code":"(fn [steps coll] (let [n (mod steps (count coll))\n                       [a b] (split-at n coll)] \n                   (concat b a)))","problem":44,"user":"532347dde4b09d4e7a9b54cc"},{"problem":44,"code":"(fn [num coll]\n  (nth (iterate (fn [[first & rest :as coll]]\n            (if (pos? num)\n              (concat rest [first])\n              (cons (last coll) (drop-last coll)))) coll) (Math/abs num)))","user":"5a1c3c11e4b0ff51aa4b323d"},{"problem":44,"code":"(fn goto\n  [a x] \n      (cond\n        (> a 0) (goto (dec a) (conj (vec (rest x)) (first x)))\n        (< a 0) (goto (inc a) (cons (last x) (vec (butlast x))))\n        :else (concat (vec x))))","user":"54070647e4b0addc1aec66b2"},{"code":"(fn [v xs] \n  (let [i (mod v (count xs))] (concat (drop i xs) (take i xs))))","problem":44,"user":"53720c5ce4b0493c815db704"},{"problem":44,"code":"#(let [a (mod % (count %2))] (concat (drop a %2) (take a %2)))","user":"55484800e4b0a04f79299558"},{"code":"(fn [n sq]\r\n  (let [nm (mod (if (neg? n) (* n -1) n) (count sq))]\r\n    (if (neg? n)\r\n      (flatten (list (take-last nm sq) (drop-last nm sq)))\r\n      (flatten (list (drop nm sq) (take nm sq))))))","problem":44,"user":"4f0da4e4535d0136e6c22319"},{"code":"(fn [n s]\n  (let [len (count s) shift (mod n len)]\n    (concat (take-last (- len shift) s) (take shift s))))","problem":44,"user":"4f48f587e4b0d56e7bb92be2"},{"problem":44,"code":"(fn rot [n l]\n  (cond\n   (< n 0) (rot (inc (- (count l) n)) l)\n   (= 0 n) l\n   :else (recur (dec n) (flatten (list (next l) (first l))))))","user":"4f3c772de4b0e243712b1f4c"},{"problem":44,"code":"(fn\n  [i coll]\n  (let [size (count coll)\n        r (mod i size)]\n    (concat (drop r coll) (take r coll))))","user":"5899c54de4b00487982d52fa"},{"code":"(fn [n input]\n    (let [x (mod n (count input))]\n         (flatten(cons (nthnext input x) (drop-last (- (count input) x) input)))\n    )\n)","problem":44,"user":"51d1111ce4b067c36548635f"},{"code":"(fn f [n v] \n  (let [nn (count v)\n        ff (fn [n v] (concat (drop n v) (take n v)))]\n    (cond\n      (< n 0) (f (+ nn n) v)\n      (< n nn) (ff n v)\n      (> n nn) (ff (- n nn) v))))","problem":44,"user":"51750cd4e4b07031762f2ee5"},{"problem":44,"code":"(fn [n sq]\n    (let [[ntail nhead] (split-at (mod n (count sq)) sq)]\n        (concat nhead ntail)))","user":"5351fca5e4b084c2834f4aec"},{"code":"#(take (count %2) \n       (drop (mod %1  (count %2))\n             (cycle %2)))","problem":44,"user":"517945dce4b0684c1c981a43"},{"problem":44,"code":"(fn t [n xs]\n  (let [N (count xs)\n        d' (rem n N)\n        d (if (>= d' 0) d' (+ N d'))]\n    (take N (drop d (cycle xs)))))","user":"534056fce4b085b17e897dac"},{"problem":44,"code":"(fn [step seq]\r\n   (let [st (mod step (count seq))]\r\n     (loop [s seq\r\n            acc []\r\n            index st]\r\n       (if (= 0 index)\r\n         (concat s acc)\r\n         (recur (next s) (conj acc (first s)) (dec index))))))","user":"542b764ae4b0dad94371f28d"},{"problem":44,"code":"(fn rotate [n s]\n            (let [l (count s)]\n              (map-indexed (fn [idx val] (nth s (mod (+ idx n) l))) s)))","user":"587ee260e4b052da650a6353"},{"problem":44,"code":"(fn f [o s]\n    (let [x (mod o (count s))]\n      (if (> o 0)\n        (concat (drop x s) (take x s))\n        (reverse (f (- o) (reverse s))))))","user":"55377460e4b09218d5f44fc9"},{"code":"(fn [n c] (take (count c) (drop (+ n (* (count c) 100)) (cycle c))))","problem":44,"user":"4eb44d78535d7eef30807360"},{"code":"(fn [n lat]\n  (let [x (count lat)\n        a (if (neg? n) (reverse (take (mod (* n -1) x) (reverse lat)))\n              (drop (mod n x) lat))\n        b (if (neg? n) (take (mod (+ x n) x) lat)\n              (take (mod n x) lat))]\n    (concat a b)))","problem":44,"user":"539cacbde4b0b51d73faaf2f"},{"problem":44,"code":"(fn [n lst]\n  (let [l (count lst)]\n    (take l (drop (mod n l) (cycle lst)))))","user":"545281bce4b0e397800069c3"},{"problem":44,"code":"(fn [r s]\n (let [d (mod r (count s))]\n  (concat (drop d s) (take d s))))","user":"512700c4e4b083bb8f88cf14"},{"problem":44,"code":"(fn [n sq] (loop [top []\n                  bottom (if (neg? n) (reverse sq) sq)\n                  x (if (neg? n) (- n) n)]\n             (if (pos? x)\n               (if-let [y (first bottom)]\n                 (recur (conj top y)\n                        (rest bottom)\n                        (dec x))\n                 (recur []\n                        top\n                        x))\n               (let [res (concat bottom top)]\n                 (if (neg? n) (reverse res) res)))))","user":"5e6ba862e4b04a83ad7cd27d"},{"problem":44,"code":"(fn f [x xs] (if ((complement zero?) x)\n               (if (pos? x)\n                 (f (dec x) (concat (rest xs) [(first xs)]))\n                 (f (inc x) (concat [(last xs)] (butlast xs))))\n               xs))","user":"4ec66e84535d6d7199dd36cd"},{"code":"#(let [position %1\n        sequence %2]\n    (cond\n     (< position 0) (loop [cur-seq sequence\n                           pos-count position]\n                      (if (= pos-count 0)\n                        cur-seq\n                        (recur\n                         (cons (last cur-seq) (butlast cur-seq))\n                         (+ pos-count 1))))\n     (> position 0) (loop [ cur-seq sequence\n                           pos-count position]\n                      (if (= pos-count 0)\n                        cur-seq\n                        (recur\n                         (concat (rest cur-seq) (list (first cur-seq)))\n                         (- pos-count 1))))\n     (= position 0) sequence))","problem":44,"user":"523288fee4b035af41902a88"},{"code":"(fn [n coll]\r\n  (let [times (if (neg? n) (- n) n)\r\n  forward  #(concat (rest %) [(first %)])\r\n\tbackward (fn [coll] (concat [(last coll)] (butlast coll)))\r\n\tfunc (if (pos? n) forward backward)]\r\n    (last (take (inc times) (iterate func coll)))))","problem":44,"user":"4db86aee535d1e037afb2193"},{"code":"(fn rotate [n coll]\n  (let [len (count coll)]\n    (cond (< n 0) (rotate (+ len n) coll)\n          (>= n len) (rotate (- n len) coll)\n          :else (concat (drop n coll) (take n coll)))))","problem":44,"user":"4ee8b9c9535d93acb0a66884"},{"code":"(fn [n lst]\n  (let [\n        size (count lst)\n        adjusted-n (mod (+ n size) size)\n        ]\n  \t(flatten (reverse (split-at adjusted-n lst)))\n    ))","problem":44,"user":"522d3a16e4b0e26240291d50"},{"code":"#(let [l (mod %1 (count %2))]\n    (concat (drop l %2) (take l %2)))","problem":44,"user":"504e2600e4b0f6ff3350c46f"},{"problem":44,"code":"(fn [axis coll]\n  (let [x (count coll)]\n    (take x (nthrest (cycle coll) (mod axis x)))))","user":"5460f59ce4b01be26fd74695"},{"problem":44,"code":"(fn [n seqz]\n  (let [\n        length (count seqz)\n        shift (mod (Math/abs n) length)\n        backwards (- length shift)\n        ]\n  (if (>= n 0) (concat (drop shift seqz) (take shift seqz))\n               (concat (drop backwards seqz) (take backwards seqz)))))","user":"5414b7c4e4b01498b1a719ed"},{"code":"#(let [len (count %2) \n       n (mod %1 len)]\n  (concat (drop n %2) (take n %2)))","problem":44,"user":"4e521cef535d302ef430da6d"},{"code":"(fn [a b] \n  (let [n (mod a (count b))] \n    (concat (drop n b) (take n b)\n    )\n  )\n)","problem":44,"user":"4f706cc3e4b07046d9f4eff7"},{"problem":44,"code":"#((comp flatten reverse split-at) (mod %1 (count %2)) %2)","user":"589a8dace4b00487982d5311"},{"problem":44,"code":"(fn f\n  [num coll]\n  (let [moves (mod num (count coll))]\n    (concat (drop moves coll)\n            (take moves coll))) )","user":"5744adb1e4b009280f9f2b3f"},{"problem":44,"code":"(fn [n coll]\n  (let [na (Math/abs n)\n        c (count coll)\n        n (if (> na c) (rem n c) n)\n        nn (- c (Math/abs n))]\n    (cond\n      (> n 0) (concat (drop n coll) (take n coll))\n      (< n 0) (concat (drop nn coll) (take nn coll))\n      :else coll)))","user":"58bb218be4b0888cdc949cf4"},{"problem":44,"code":"#(let\n      [x (mod % (count %2))]\n    (concat (drop x %2) (take x %2)))","user":"542f574be4b0dad94371f2d0"},{"code":"(fn [n xs]\n  (let [m (count xs)\n        r (mod n m)]\n    (take m (drop r (cycle xs)))))","problem":44,"user":"51b2e850e4b026427ecf067b"},{"problem":44,"code":"(fn rotate-seq [n s] (let [p (mod n (count s))] (concat (drop p s) (take p s))))","user":"58b2f085e4b0ebc645576d15"},{"problem":44,"code":"(fn [n s]\n  (let [l (count s)\n        [i ii] (split-at (mod (+ n l) l) s)]\n    (concat ii i)))","user":"5b14475be4b0cc2b61a3be5a"},{"code":"#(let [c (count %2) p (mod % c)] (concat (drop p %2) (take p %2)))","problem":44,"user":"4ec11b79535dfed6da9c6da6"},{"code":"(fn p44s [i s]\n  (let [a (concat s s)\n        c (count s)\n        idx (mod i c)]\n    (take c (drop idx a))\n    )\n  )","problem":44,"user":"4f63777be4b0defedf855fe4"},{"code":"(fn rot\n  [rn col]\n  (let [n (mod rn (count col))\n        head (take n col)\n        re (nthrest col n)]\n    (concat re head)))","problem":44,"user":"53436e60e4b084c2834f4a19"},{"problem":44,"code":"(fn [pos coll]\n  (let [cnt (count coll)\n        pos (mod pos (count coll))]\n    (concat (drop pos coll) (take pos coll))))","user":"5591cc56e4b0604b3f94d582"},{"problem":44,"code":"(fn puter\n  [i xs]\n  (if (<= i 0)\n    (take-last (count xs) (drop-last (- i) (take (* 3 (count xs)) (cycle xs))))\n    (take (count xs) (drop i (cycle xs)))))","user":"581829cce4b0c0e9c07b83a9"},{"problem":44,"code":"(fn [off x] (let [o (mod off (count x))] (flatten (reverse (split-at o x)))))","user":"52c7f036e4b0c2d177d62126"},{"code":"#( (fn [n] `( ~@(nthrest %2 n) ~@(take n %2)) ) (mod % (count %2)))","problem":44,"user":"503b6995e4b07a1917cc34dd"},{"code":"(fn [n col]                                                                \n    (flatten (reverse                                                                                                   \n      (split-at (mod n (count col)) col))))","problem":44,"user":"519b7d76e4b02a926d9a436e"},{"problem":44,"code":"(fn [n s]\n  (let [[head tail] (split-at (mod n (count s)) s)]\n    (concat tail head)))","user":"577bf999e4b0d3393e5deb2c"},{"code":"(fn rotate [dir s] \n  (if (= 0 dir) \n    s \n    (if (> 0 dir) \n      (rotate (inc dir) (conj (butlast s) (last s)))\n      (rotate (dec dir) (concat (rest s) [(first s)])) \n      )))","problem":44,"user":"524be8e0e4b09eba1c0223f1"},{"problem":44,"code":"(fn [n lis]\n  (let [a (rem n (count lis))\n        gap (if (< a 0) (+ (count lis) a) a)]\n    (apply concat (reverse (split-at gap lis)))))","user":"58384bc4e4b089d5ab817d27"},{"code":"(fn a [n l] (cond\n  \t\t(> n 0) (concat (drop (rem n (count l)) l) (take (rem n (count l)) l))\n\t\t\t:else (a (+ (count l) n) l)\n\t\t\t))","problem":44,"user":"4e218470535d04ed9115e817"},{"code":"(fn\n    [gap sq]\n    (let [len (count sq)\n          gap (mod (if (> 0 gap)\n                     (+ gap len)\n                     gap) len)\n          idxed-sq (partition\n                    2\n                    (interleave (iterate inc 0) sq))]\n      (flatten (reduce #(let [[idx elm] %2]\n                          (if (< idx gap)\n                            (update-in %1 [1] conj elm)\n                            (update-in %1 [0] conj elm))) [[] []] idxed-sq))))","problem":44,"user":"51c3c6a6e4b0851ac09658f8"},{"code":"(comp flatten reverse #(split-at (mod %1 (count %2)) %2))","problem":44,"user":"4e5867d1535d8a8b8723a291"},{"problem":44,"code":"#(let [l (mod %1 (count %2))] (concat (drop l %2) (take l %2)))","user":"543f854fe4b032a45b86935b"},{"code":"(fn __ [x c]\n    (let [k (count c)\n          mx (mod x k)]\n\t\t(take k (concat (nthnext c mx) (drop-last (dec mx) c))\n    )\n   )\n)","problem":44,"user":"503f872ee4b00d1a725ff2ac"},{"problem":44,"code":"(fn rot [n col]\n  (let [splitpoint (mod n (count col))\n        splits (split-at splitpoint col)]\n    (apply concat (reverse splits))))","user":"5b333626e4b025bcb146f32f"},{"problem":44,"code":"(fn [n coll] (let [modn (mod n (count coll))] (concat (drop modn coll) (take modn coll))))","user":"56912f93e4b0dcc4269f40ef"},{"problem":44,"code":"(fn [n coll]\n    (let [index     (mod n\n                         (count coll))\n          [lft rgt] (split-at index\n                              coll)]\n      (concat rgt lft)))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":44,"code":"(fn rot [n init]\n\t(if (< n 0)\n\t\t(rot (+ 1 (/ n -1)) init)\n\t\t(if (> n (count init))\n\t\t\t(rot (- n (count init)) init)\n\t\t\t(lazy-cat (drop n init) (take n init))\n\t\t\t)))","user":"58b985e0e4b0888cdc949ccc"},{"code":"#(let [[e s] (split-at (mod %1 (count %2)) %2)] (concat s e))","problem":44,"user":"52b453b0e4b0c58976d9ad21"},{"problem":44,"code":"(fn rot\n  [n s]\n  (letfn [(rot-left [s] (conj (vec (rest s)) (first s)))\n          (rot-right [s] (reverse (rot-left (reverse s))))]\n    (last\n      (if (> n 0)\n        (take (inc n) (iterate rot-left s))\n        (take (inc (* n -1)) (iterate rot-right s))))))","user":"54a6645be4b09f271ff37c87"},{"problem":44,"code":"(fn [x ys] (let [r (mod x (count ys))] (concat (drop r ys) (take r ys))))","user":"5fa17538e4b0f0ebd91b77e3"},{"problem":44,"code":"(fn clj44 [r s]\n  (let [n (count s)]\n    (take n (drop (mod r n) (cycle s)))))","user":"59d8f23ae4b0ef0a1e9b5c49"},{"problem":44,"code":"(fn [n v] (mapcat  #(%  (mod n  (count v) ) v) [drop take ]))","user":"563f2eaae4b08d4f616f5ed1"},{"problem":44,"code":"#(let [rotation-factor (if (neg? %1) (+ (- %1) 1) %1)]\n         (drop\n           rotation-factor\n           (take\n             (+ (count %2) rotation-factor)\n             (cycle %2))))","user":"5dadd84ee4b0f8c104ccfc85"},{"problem":44,"code":"(fn [x s] (let [l (count s) d (+ l x) dp (if (< d 0) (+ d l) d)] (take l (drop dp (cycle s)))))","user":"5addadfce4b0837691e92c13"},{"code":"(fn [n coll]\n  (let [np (mod n (count coll))]\n    (concat (drop np coll) (take np coll))))","problem":44,"user":"4fca4c37e4b0ee37620e184f"},{"code":"(fn [n c] (take (count c) (drop (mod n (count c)) (cycle c))))","problem":44,"user":"4f06f1f2535dcb61093f6c1a"},{"problem":44,"code":"(fn rot [n xs]\n  (let [m (mod n (count xs))] \n  \t(concat (drop m xs) (take m xs))))","user":"552d9b31e4b076ab5578f7eb"},{"problem":44,"code":"#(flatten (rseq (split-at (mod %1 (count %2)) %2)))","user":"5a7de7a3e4b03baeef927702"},{"problem":44,"code":"(fn [n seq]\n  (let [m (mod n (count seq))]\n    (concat (nthrest seq m) (take m seq))))","user":"5a86ad84e4b05369db4d249c"},{"problem":44,"code":"#(let [n (mod % (count %2))] \n    (concat   \n     (subvec (vec %2) n)\n     (subvec (vec %2) 0 n)))","user":"553093bee4b076ab5578f817"},{"problem":44,"code":"(fn [n v]\n   (loop [remaining (if (> n 0) n (inc (- (.size v) n)))\n         values v]\n    (if (= remaining 0)\n      values\n      (recur (dec remaining) \n             (conj (vec (rest values)) (first values))))))","user":"55d06bcbe4b0e31453f64a3a"},{"code":"(fn my-rot [n coll]\n\t(let [rot-n (mod n (count coll))\n          [head tail] (split-at rot-n coll)]\n\t  (concat tail head)))","problem":44,"user":"52381b2ae4b0fae3832e99ef"},{"code":"(fn rotate [n s]\n  (let [l (count s) nl (rem n l)]\n    (if (neg? n)\n      (rotate (rem (inc (- l n)) l) s)\n      (concat (drop nl s) (take nl s)))\n    )\n  )","problem":44,"user":"4ddb696b535d02782fcbe9fa"},{"problem":44,"code":"(fn [dir coll]\n  (flatten (reverse (split-at (mod dir (count coll)) coll))))","user":"56174d86e4b06b1bb2182a0e"},{"problem":44,"code":"(fn rotate [pos vect]\n  (let [ln (count vect)]\n    (if (pos? pos)\n      (take ln (drop pos (cycle vect)))\n      (take ln (drop (- ln (mod (* pos -1) ln)) (cycle vect))))))","user":"54117417e4b01498b1a719c5"},{"problem":44,"code":"(fn [n v]\n  (let [n (mod n (count v))] \n    (concat (drop n v) (take n v))))","user":"53050c04e4b0d8b024fd3757"},{"code":"(fn [rot coll]\n  (let [len (count coll)\n        real-rot (mod (+ rot len) len)]\n    (->> coll (cycle) (take (+ real-rot len)) (drop real-rot))))","problem":44,"user":"530e9729e4b08068f379ecbc"},{"code":"(fn [n coll]\r\n  (loop [n (if (> n 0)\r\n             n\r\n             (- (count coll) (mod (- n) (count coll))))\r\n         coll coll]\r\n    (if (= n 0)\r\n      coll\r\n      (recur (- n 1) (concat (rest coll) `(~(first coll)))))))","problem":44,"user":"4de2f44f535d08e6dec9fdec"},{"code":"#(let [c (count %2)]\n   (take c (drop (mod %1 c) (cycle %2))))","problem":44,"user":"507b7dbee4b09034bfeeb71e"},{"code":"(fn rotate [n coll]\r\n  (let [n (mod n (count coll))]\r\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"4fd170fce4b04c3a95aa0411"},{"code":"#(let [ \n       [l r] (split-at (mod % (count %2)) %2)]\n    (concat r l))","problem":44,"user":"4daa374930acd6ed13482a68"},{"problem":44,"code":"(fn rotate [idx coll]\n  (let [length (count coll)]\n    (->> (concat coll coll)\n         (drop (mod idx length))\n         (take length))))","user":"51d42f44e4b013d740b70ddb"},{"code":"(fn [x coll]\n  (if (pos? x)\n    (flatten (reverse (split-at (rem x (count coll)) coll)))\n    (flatten (reverse (split-at (inc (rem (+ (* x -2) x) (count coll))) coll)))))","problem":44,"user":"52d9aaa1e4b09f7907dd13ae"},{"code":"#(apply concat (reverse (split-at (let [x (mod %1 (count %2))] (if (neg? x) (+ (count %2) x) x)) %2)))","problem":44,"user":"519964cbe4b0aa09cbc0b849"},{"problem":44,"code":"(fn [n s]\n  (let [n (mod n (count s))]\n  (concat (drop n s) \n          (take n s))))","user":"60460824e4b02d28681c77bc"},{"problem":44,"code":"(fn rotate [n s]\n  (if (zero? n)\n    s\n    (if (neg? n)\n      (reverse (rotate (- n) (reverse s)))\n      (rotate (dec n) (concat (rest s) (list (first s)))))))","user":"573f63bfe4b05c31a32c0842"},{"problem":44,"code":"(fn rotate-sequence\n  [n coll]\n  (let [v (into [] coll)\n        n (mod n (count v))]\n    (concat (subvec v n) (subvec v 0 n))))","user":"5501a1e1e4b07d26eda61d75"},{"problem":44,"code":"(fn rot [n xs]\n  (let [cxs (count xs)\n        rn (rem n cxs)]\n    (cond\n      (zero? rn) xs\n      (neg? rn) (rot (+ cxs rn) xs)\n      :else (concat (nthrest xs rn) (take rn xs)))))","user":"5b4b8cd6e4b02d533a91bc9f"},{"problem":44,"code":"(fn [arg arr]\n        (if (> arg 0)\n            (let [take-num (mod arg (count arr))]\n                (concat (drop take-num arr) (take take-num arr)))\n            (let [take-num (mod (- arg) (count arr))]\n                (concat (take-last take-num arr) (drop-last take-num arr)))))","user":"55d073ece4b0e31453f64a3b"},{"code":"(fn [x l] (let [n (mod x (count l))] (concat (drop n l) (take n l))))","problem":44,"user":"509e62a8e4b08df8156e9e2e"},{"code":"#(flatten \n  (reverse \n    (split-at \n      (if (and (< %1 0) (> %1 (- 0 (count %2))))\n        (+ (count %2) %1)\n        (mod %1 (count %2))\n      )\n      %2\n    )\n  )\n)","problem":44,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":44,"code":"(fn f [n s]\n  (if (= 0 n)\n    s\n    (if (> n 0)\n      (f (dec n) (conj (vec (rest s)) (first s)))\n      (f (inc n) (conj (seq (butlast s)) (last s))))))","user":"55f8fd70e4b03cbcff9738bc"},{"problem":44,"code":"(fn [i_split i_array] \n    (let [idx (mod i_split (count i_array))\n          a (partition-all idx i_array)]\n       (flatten ( list (rest a) (first a)))\n      )\n)","user":"5ac92dc3e4b0e27600da77bf"},{"problem":44,"code":"(fn [y x]\n   (let [len (count x) ymod (mod y len)]\n    (concat (drop ymod x) (drop-last (- len ymod) x))))","user":"574e8975e4b02ea114799244"},{"code":"(fn [i s]\n  (let [j (mod i (count s))]\n    (concat (drop j s) (take j s))))","problem":44,"user":"4facd2fae4b081705acca22f"},{"code":"(fn rotate [n s]\n  (let [modn (mod n (count s))]\n    (take (count s) (drop modn (cycle s)))))","problem":44,"user":"5119f3d5e4b06c8af0111818"},{"code":"(fn [n coll]\n  (let [len (count coll)\n        split-idx (if (< n 0)\n                      (+ len (rem n len))\n                      (rem n len))]\n    (lazy-cat (nthnext coll split-idx)\n              (take split-idx coll))))","problem":44,"user":"4e7c8fd1535db169f9c796be"},{"problem":44,"code":"(fn rotate-seq [k xs]\n  (->>(repeat 2 xs)\n      (apply concat)\n      (drop (mod k (count xs)))\n      (take (count xs))))","user":"50aa777fe4b056ee01935866"},{"code":"(letfn [(left [xs] (concat (rest xs) (list (first xs))))\n        (rotate-left [n xs] (if (zero? n) xs\n                                (rotate-left (dec n) (left xs))))\n        (rotate-right [n xs] (reverse (rotate-left n (reverse xs))))]\n  (fn [n xs] (if (< n 0) (rotate-right (java.lang.Math/abs n) xs)\n                         (rotate-left n xs))))","problem":44,"user":"4e96557d535dbda64a6f6b43"},{"problem":44,"code":"(fn [n c] (map (vec c) (map #(mod (+ n %) (count c)) (range (count c)))))","user":"543be8f0e4b032a45b869337"},{"code":"(fn rotate-a-seq [n lat]\r\n  (let [x (count lat)\r\n        a (if (neg? n) (reverse (take (mod (* n -1) x) (reverse lat)))\r\n              (drop (mod n x) lat))\r\n        b (if (neg? n) (take (mod (+ x n) x) lat)\r\n              (take (mod n x) lat))]\r\n    (concat a b)))","problem":44,"user":"4ddb339c535d02782fcbe9f9"},{"code":"(fn rotate-seq [n s]\n  (let [reversed (vec (reverse s))\n        n2 (rem n (count s))\n        move (if (> n2 0) (- (count s) n2)  (- n2) )]\n    (concat\n     (reverse (subvec reversed 0 move))\n     (reverse (subvec reversed move (count reversed)))\n     )))","problem":44,"user":"5226f8e9e4b04e78ff2e199a"},{"code":"(fn [pos s]\n  (let [c (count s)]\n  (take-last\n    c (take (+ c (Math/abs pos) (if (neg? pos) 1 0)) (cycle s)))))","problem":44,"user":"509c2c55e4b085ae113522ab"},{"problem":44,"code":"(fn [n c]\n  (let [s (mod n (count c))]\n       (concat (drop s c)\n               (take s c))))","user":"5742ec91e4b05c31a32c0883"},{"problem":44,"code":"(fn [num col]\n  (concat\n   (drop (mod num (count col)) col)\n   (take (mod num (count col)) col)))","user":"59a8405ce4b0bcf4e9a43af1"},{"problem":44,"code":"(fn [n coll]\n  (loop [new coll c n]\n    (cond\n     (= 0 c) new\n     (pos? c) (recur (concat (next new) [(first new)]) (dec c))\n     (neg? c) (recur (concat [(last new)] (butlast new)) (inc c)))))","user":"574abbfbe4b02ea114799200"},{"code":"(fn [n coll]\n  (let \n    [in (vec coll)\n      y (rem n (count in))\nx (if (neg? y) (+ y (count in)) y)\nin (vec coll)\nh (subvec in 0 x)\nt (subvec in x)]\n(concat t h)))","problem":44,"user":"4fca2a13e4b0ee37620e184d"},{"problem":44,"code":"#(mapcat (fn [f] (f (mod % (count %2)) %2)) [drop take])","user":"5504dd64e4b086ebe8a79c83"},{"code":"(fn [n s]\n  (flatten \n    (reverse \n      (split-at  (mod n (count s)) s))))","problem":44,"user":"4e6f578c535d5021c1a8961b"},{"problem":44,"code":"(fn [n xs]\n  (let [a (mod n (count xs))]\n    (concat (drop a xs) \n            (take a xs))))","user":"55164856e4b06a49daca83b3"},{"problem":44,"code":"#(loop [c %2 n %1] \n       (if (zero? n) \n         c \n         (if (pos? n) \n           (recur (concat  (rest c)  [(first c)] ) (dec n))\n           (recur (concat  [(last c)] (butlast c)) (inc n))\n         )\n       )\n  )","user":"5dbb5200e4b09f47823971a9"},{"code":"(fn [n l] \n  (nth (iterate #(cons (last %) (butlast %)) l) (mod (- n) (count l))))","problem":44,"user":"4f69f34fe4b07046d9f4ef90"},{"problem":44,"code":"(fn [offset sq]\n  (let [cnt (mod offset (count sq))]\n    (concat (drop cnt sq) (take cnt sq))))","user":"59032c0fe4b022d14a2aaf9f"},{"problem":44,"code":"(fn rotate-sequence [rotate elements]\n  (let [length (count elements)\n        mod-rotate (mod (Math/abs rotate) length)\n        adj-rotate (if (< rotate 0) (- length mod-rotate) mod-rotate)\n        parts (split-at adj-rotate elements)\n        left (first parts)\n        right (second parts)]\n    (concat right left)))","user":"5dc4719ae4b02f9375f4e1b5"},{"code":"(fn [n col] \n   (let [size (count col) r (mod n size) f (drop r col)]\n     (concat f (take r col))))","problem":44,"user":"5094057fe4b097f48cc38593"},{"problem":44,"code":"(fn f [n s] (let[g (if (< n 0) (Math/abs (+ (count s) (-(Math/abs (rem n (count s)))))) (rem n (count s)))]\n              (let[se (partition-all g s)] (flatten (cons (rest se) (first se))) )))","user":"53b3ea79e4b047364c0444ab"},{"problem":44,"code":"(fn [split coll]\n(let\n\t[ \tcnt (count coll)\n\t\tn   (rem split cnt)\n\t\tc1  (if (> n 0) n (+ cnt n))\n\t\tc2  (if (> n 0) (- cnt n) (- n) )]\n\t(concat\n\t\t(take-last c2 coll)\n\t\t(take c1 coll))))","user":"5b8aa478e4b0c0b3ffbd49b2"},{"problem":44,"code":"#(let [len   (count %2)\n       n     (mod (if (< %1 0) (+ len %1) %1) len)\n       [a b] (split-at n %2)] \n  (concat b a))","user":"563772a9e4b0bfe05bf117d7"},{"code":"#(let [n (mod % (count %2))] \n    (concat (drop n %2) (take n %2)))","problem":44,"user":"51cc5f20e4b02254fc794870"},{"code":"(fn [n s]\n  (let [x (mod n (count s))]\n  (concat (drop x s) (take x s))))","problem":44,"user":"4f3e5e87e4b0e243712b1f83"},{"problem":44,"code":"(fn [offset coll] \n   (let [n (count coll) \n         d (mod offset n)] \n     (take n (drop d (flatten (repeat 3 coll))))))","user":"53da19fde4b0e771c3025484"},{"code":"#(condp = (compare % 0)\n   -1 (let [x (last %2)\n           xs (butlast %2)]\n       (recur (inc %) (concat (list x) xs)))\n   1 (let [[x & xs] %2]\n       (recur (dec %) (concat xs (list x))))\n   0 %2)","problem":44,"user":"5201d2f3e4b0b2e020a18f22"},{"problem":44,"code":";(fn [n coll]\n;  (let [v (vec coll)\n;        i (mod n (count coll))]\n;  \t(if (pos? i)\n;      (concat (subvec v i) (subvec v 0 i))\n;      (concat (take-last (* -1 i) v) (drop-last (* -1 i) v)))))\n\n#(apply concat (reverse (split-at (mod %1 (count %2)) %2)))","user":"55647a31e4b0c656e3ff1808"},{"code":"(fn rotate [n coll]\n  (loop [n n coll coll]\n       (cond \n        (zero? n) coll\n        (pos? n) (recur (dec n) (concat (rest coll) (list (first coll))))\n        (neg? n) (recur (inc n) (cons (last coll) (butlast coll)))\n        )))","problem":44,"user":"4fc34787e4b081705acca33e"},{"problem":44,"code":"(fn [n coll]\n  (letfn [(rl [[head & tail]]\n            (concat tail [head]))\n          (rr [coll]\n              (cons (last coll)\n                    (butlast coll)))]\n    (loop [n n, coll coll]\n      (if (zero? n)\n        coll\n        (if (pos? n)\n          (recur (dec n) (rl coll))\n          (recur (inc n) (rr coll)))))))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":44,"code":"(fn my-rotate [n coll]\n  (if (zero? n)\n    coll\n    (if (pos? n)\n      (recur (dec n) (concat (rest coll) (list (first coll))))\n      (recur (inc n) (cons (last coll) (butlast coll))))))","user":"55b28b57e4b01b9910ae296c"},{"code":"(fn rot-coll [steps coll]\n  (letfn [(coll-rot-step [dir coll]\n                         (if (neg? dir)\n                           (into [(last coll)] (butlast coll))\n                           (drop 1 (conj coll (first coll)))))]\n    (cond\n     (pos? steps) (recur (dec steps) (coll-rot-step steps (vec coll)))\n     (neg? steps) (recur (inc steps) (coll-rot-step steps (vec coll)))\n     :else coll)))","problem":44,"user":"5245fbbbe4b09dbe66b56183"},{"problem":44,"code":"(fn rotate-by-n [n sq]\n  (loop [x (mod n (count sq))\n         head (seq sq)\n         tail []]\n    (if (> x 0) (recur (dec x)\n                       (rest head)\n                       (conj tail (first head)))\n        (concat head tail))))","user":"5db0d470e4b0f8c104ccfc9e"},{"problem":44,"code":"(fn [offset coll]\n   (let [indices (range offset (+ offset (count coll)))\n         num-elements (count coll)\n         nth-wrapped (fn [coll i] (nth coll (mod i num-elements)))\n         getter (partial nth-wrapped coll)]\n     (map getter indices)))","user":"5429986ce4b01498b1a71b3b"},{"code":"(fn rotate\n  [n coll]\n  (let [len (count coll) m (if (> n 0) n (- len (* n -1)))]\n    (concat \n     (drop (mod m len) coll) \n     (take (mod m len) coll)\n     )))","problem":44,"user":"52cefb7ee4b07d0d72b27397"},{"problem":44,"code":"(fn rotate [number xs]\n      (if (not (zero? number))\n        (if (pos? number)\n          (rotate (dec number) (concat (rest xs) (take 1 xs)))\n          (rotate (inc number) (let [all-but-one (dec (count xs))]\n                                 (concat (drop all-but-one xs)\n                                         (take all-but-one xs)))))\n        xs))","user":"5b1e5bfde4b03cfeda66ed0e"},{"code":"(fn [n s]\n  (let [c (count s)\n        m (rem (+ c (rem n c)) c)]\n    (concat (drop m s) (take m s))))","problem":44,"user":"4f1b0ab3535d64f603146474"},{"problem":44,"code":"(fn rotate [n s]\n  \t(let [n (mod n (count s))]\n     (concat (drop n s) (take n s))))","user":"53b39d82e4b047364c0444a6"},{"problem":44,"code":"(fn [n c]\n  (let [x (mod n (count c))]\n    (apply concat (reverse (split-at x c)))))","user":"5d764e52e4b02e6b30c93524"},{"problem":44,"code":"(fn [n xs]\n  (let [i (mod n (count xs))\n        [a b] (split-at i xs)]\n    (concat b a)))","user":"5e3e23d9e4b01d43a70e8e20"},{"problem":44,"code":"(fn [idx col]\n  (let [size (count col)\n        i (mod (+ idx size) size)]\n    (concat\n     (drop i col)\n     (take i col))))","user":"5eb3d02be4b00a66d4a95215"},{"problem":44,"code":"(fn roto [n coll]\n  (let [m (if (< n 0) (->> n (- (count coll)) (+ 1)) n)]\n    (let [cycled (cycle coll)]\n      (->> cycled (drop m) (take (count coll))))))","user":"54b07c1ee4b09f271ff37d16"},{"problem":44,"code":"(fn rotate-sequence [n s]\n  (let [[first-half second-half] (split-at (mod n (count s)) s)]\n    (concat second-half first-half)))","user":"5d0eed51e4b0cc9c91588262"},{"code":"#(let [c (count %2) \n       r (mod %1 c)]\n   (concat (drop r %2) (take r %2)))","problem":44,"user":"513a4babe4b067e25a345eca"},{"problem":44,"code":"(fn [x coll] (take (count coll) (drop (mod x (count coll)) (cycle coll))))","user":"57283dbce4b0c5bde472c154"},{"code":"(fn [num coll] (apply concat (reverse (split-at (mod (if (neg? num) (+ (count coll) num) num) (count coll)) coll))))","problem":44,"user":"50ee68fce4b06330c1f87c59"},{"problem":44,"code":"(fn rotate \n  [n l] \n  (cond \n    (= n 0) l \n    (> n 0) (let [[x & xs] l]  (rotate (- n 1) (concat xs [x])))\n       \n    (< n 0) (rotate (+ n 1) (concat [(last l)] (drop-last l)))))","user":"4e6a5728535d8ccf87e9fecf"},{"code":"(fn [amount coll]\n    (let [cnt (count coll)\n          val (+ cnt (mod amount cnt))]\n      (take cnt (nthnext (cycle coll) val))))","problem":44,"user":"4f4a8707e4b0d56e7bb92c12"},{"code":"(fn [n seq]\n    (let [my-n (cond (> n (count seq)) (mod n (count seq))\n                     (< n 0) (if  (> 0 (+ (count seq) n))\n                               (+ (count seq) (mod (count seq) n))\n                               (+ (count seq) n))\n                     :else n)]\n      (concat (drop my-n seq) (take my-n seq))))","problem":44,"user":"511e763ce4b03e81d390ac29"},{"problem":44,"code":"(fn rot [cnt xs]\n   (if (zero? cnt)\n     xs\n     (if (pos? cnt)\n       (rot (dec cnt) ( flatten (conj (vector (rest xs)) (first xs))))\n       (rot (inc cnt) (cons (last xs) (drop-last xs)))\n     )\n    )\n)","user":"594bc7d6e4b07ddc2dafae3d"},{"code":"(fn [n s]\n  (let [n (if (pos? n) n (+ (count s) n))\n        n (mod n (count s))]\n    (concat (drop n s) (take n s))\n    ))","problem":44,"user":"4f90dc2ae4b0dcca54ed6c92"},{"problem":44,"code":"(fn rot [steps xs]\n  (cond\n    (neg? steps) (rot (+ steps (count xs)) xs)\n    (pos? steps) (rot \n                   (dec steps) \n                   (concat (next xs) [(first xs)]))\n    :else xs))","user":"57487084e4b009280f9f2b8c"},{"problem":44,"code":"(fn rotate [n coll]\n  (cond\n    (> n 0) (concat (drop (mod n (count coll)) coll) (take (mod n (count coll)) coll))\n    (< n 0) (concat (drop (+ (mod (- n) (count coll)) 1) coll) (take (+ (mod (- n) (count coll)) 1) coll))))","user":"5c8cfff8e4b048ec896c5996"},{"code":"#(let [n (if (pos? %) % (+ (count %2) %))\n       n (mod n (count %2))]\n   (concat (drop n %2) (take n %2)))","problem":44,"user":"4ebf11bc535dfed6da9c6d9c"},{"code":"(fn rotate [shift a-seq]\n  (let [len (count a-seq)\n        shift (mod shift len)\n        [seq1 seq2] (split-at shift a-seq)]\n    (take len (concat seq2 seq1))))","problem":44,"user":"52ee46e5e4b05e3f0be25ec5"},{"problem":44,"code":"(fn [n xs]\n    (let [d (mod n (count xs))]\n      (concat (drop d xs) (take d xs))))","user":"5bd0ea60e4b0e9689409ee45"},{"problem":44,"code":"(fn [ix sq]\n  (let [ix' (mod ix (count sq))\n        splits (split-at ix' sq)]\n    (concat (second splits) (first splits))))","user":"5ecc0831e4b016b56eae058c"},{"problem":44,"code":"#(let [listlength (count %2)\n        start (mod %1 listlength)]\n   (->> (range start (+ start listlength) )\n        (map (fn [pos] (nth %2 (mod pos listlength))))))","user":"5711b532e4b09c608db70449"},{"code":"(fn [n coll] (apply concat (reverse (split-at (mod n (count coll)) coll))))","problem":44,"user":"4e6a4541535d8ccf87e9feb8"},{"code":"#(let [n (mod % (count %2))] (concat (drop n %2)(take n %2)))","problem":44,"user":"4ee67364535d93acb0a6685f"},{"code":"(fn [n coll]\n  (let [ ny (rem n (count coll))\n         nx (if (> ny 0) ny (+ ny (count coll)))]\n    (concat (drop nx coll) (take nx coll))))","problem":44,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn rot [how what]\n  (if (= how 0)\n    what\n    (if (< how 0)\n      (rot (inc how) (flatten (list (last what) (drop-last what))))\n      (rot (dec how) (flatten (list (rest what) (first what)))))))","problem":44,"user":"52747090e4b03e8d9a4a74a5"},{"problem":44,"code":"(fn [x in]\n  (let [absx (if (neg? x) (- x) x)\n        c (mod absx (count in))\n        [a b] (if (neg? x)\n          (split-at (- (count in) c) in)\n          (split-at c in))]\n    (concat b a)))","user":"5489dd4de4b0e286459a11ef"},{"code":"(fn [n seq]\n  (if (< n 0)\n    (let [n (mod (+ (count seq) n) (count seq))]\n      (concat (drop n seq) (take n seq)))\n    (let [n (mod n (count seq))]\n      (concat (drop n seq) (take n seq)))))","problem":44,"user":"4e84f77c535db62dc21a62e5"},{"problem":44,"code":"#(let [c (count %2)](take c (drop (mod % c) (cycle %2))))","user":"5382704be4b06839e8705ed4"},{"code":"(fn [i coll]\n  (cond (= i 0) coll\n        (> i 0) (recur (dec i) (concat (rest coll) (take 1 coll)))\n        (< i 0) (recur (inc i) (concat (take-last 1 coll) (butlast coll)))))","problem":44,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":44,"code":"(fn [n a-seq]\n  (if (or (empty? a-seq) (zero? n))\n    a-seq\n    (let [c (count a-seq)\n          k (if (> (Math/abs n) c) (rem n c) n)\n          m (if (neg? k) (+ k c) k)]\n      (loop [to-rotate (take m a-seq) acc (vec (drop m a-seq))]\n        (if (empty? to-rotate)\n          acc\n          (recur (rest to-rotate) (conj acc (first to-rotate))))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":44,"code":"(fn [n coll]\n          (let [c (count coll)]\n            (take c (drop (mod n c) (cycle coll)))))","user":"5e9154c1e4b0cb0169546354"},{"problem":44,"code":"(fn [n coll]\n    (let [length (count coll)\n            offset n\n            index (mod n length)]\n        (take length (drop index (cycle coll)))  \n    ))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":44,"code":"(fn [x s]\n    (let [y (mod x (count s))]\n      (concat (drop y s) (take y s)))\n)","user":"55f09e7be4b06e875b46ce28"},{"code":"(fn [y xs]\n  (let [yy (mod y (count xs))]\n  (if (> yy 0)\n    (concat (drop yy xs) (take yy xs))\n    (let [cnt (+ yy (count xs))]\n      (concat (drop cnt xs) (take cnt xs))\n    ))\n))","problem":44,"user":"4ed6238d535d10e5ff6f52de"},{"problem":44,"code":"(fn [idx sq] \n          (let \n            [cur (mod idx (count sq))]\n            (concat\n              (nthrest sq cur) \n              (take cur sq))))","user":"5da5a1eee4b000c986472c04"},{"code":"(fn [n col]\n  (let [cnt (count col) to-drop (mod n cnt)]\n    (take cnt (drop to-drop (concat col col)))))","problem":44,"user":"51805d22e4b0e3fc13e244df"},{"code":"(fn [n xs]\n  (let [cnt (count xs)\n        drp (if (> n 0) n (+ cnt (mod n cnt)))]\n    (take cnt (drop drp (cycle xs)))))","problem":44,"user":"52e276d9e4b09f7907dd1436"},{"code":"(fn [n xs]\r\n  (let [c (count xs)]\r\n    (map #(nth xs (mod % c))\r\n      (range n (+ n c)))))","problem":44,"user":"502873a8e4b01614d1633ff8"},{"problem":44,"code":"(fn rotate-seq [rotation s]\n  (let [r (mod rotation (count s))]\n    (concat (drop r s) (take r s))))","user":"56175cf9e4b06b1bb2182a0f"},{"code":"(fn [n coll]\n  (let [absn (Math/abs n)\n        step (/ n absn)\n        shift (fn [c]\n                (if (pos? step)\n                  (concat (rest c) [(first c)])\n                  (cons (last c) (butlast c))))]\n    (nth (iterate shift coll) absn)))","problem":44,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":44,"code":"(fn rewind [n l]\n  ((fn rewind-seq [l r n]\n  (if (= n (count l))\n    []\n    (lazy-seq (cons (nth l (rem (+ r n) (count l)))\n                    (rewind-seq l r (inc n))))))\n   l (+ (count l) (rem n (count l))) 0))","user":"5ed6030de4b016b56eae05db"},{"code":"(fn [d c]\n((fn [d c]\n    (concat (nthnext c d) (take d c)))\n(mod d (count c)) c))","problem":44,"user":"4ec12577535dfed6da9c6da8"},{"code":"(fn [n l]\n  (let [cnt (count l)]\n    (take cnt\n      (drop (mod n cnt)\n        (cycle l)))))","problem":44,"user":"4fce5474e4b0d4b2a7a9d451"},{"code":"(fn fff [n0 lst] (let [\n                                                                                                                  s (.size lst)\n                                                                                                                  n (- n0)\n                                                                                                                  t1 1\n                                                                                                                  t2 (+ (- s n) 1)                                                                                 \n                                                                                                                  r1 t2\n                                                                                                                  r2 (+ s 1)\n                                                                                                                  ] \n                                                                 (if (>= n 0)   (if (> n s) (fff (- (- n s)) lst)\n                                                                   (map #(nth lst (- % 1)) (concat (range r1 r2) (range t1 t2))))\n                                                                                                                  (fff (- (+ n s)) lst))))","problem":44,"user":"51765d78e4b085adf681d884"},{"code":"(fn [r l] \r\n  (let [x (mod r (count l))]\r\n\t\t(concat (drop x l) (take x l))\r\n\t)\r\n)","problem":44,"user":"4dd579b5535dae65d5c462ea"},{"problem":44,"code":"(fn go [n xs]\n  (if (neg? n)\n    (reverse (go (- n) (reverse xs)))\n\t(if (> n (count xs))\n      (go (mod n (count xs)) xs)\n      (let [[a b] (split-at n xs)]\n        (concat b a)))))","user":"4ff24a1ae4b0678c553fc337"},{"problem":44,"code":"(fn [dir col]\n  (take (count col) (drop (mod dir (count col)) (cycle col))))","user":"5d51377be4b0776584bd6f5d"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (let [cal-n (fn cal-n [n]\n                (cond (< n 0) (cal-n (+ n (count coll)))\n                      (> n (count coll)) (cal-n (- n (count coll)))\n                      :else n))\n        n (cal-n n)]\n    (println n)\n    (concat  (drop n coll) (take n coll))))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":44,"code":"(fn [n s]\n  (let [c (mod n (count s))]\n        (concat (drop c s) (take c s))))","user":"5632d1b3e4b0bfe05bf117a9"},{"problem":44,"code":"#(concat (drop (mod %1 (count %2)) %2) (take (mod %1 (count %2)) %2) )","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"code":"(fn [a b]\n  (let [x (count b) \n        y (if (pos? a)\n            (mod a x) \n            (- x (mod (- a) x)))] \n    (flatten \n     (cons (drop y b) (take y b)))))","problem":44,"user":"516ab8c2e4b081287f204e9e"},{"problem":44,"code":"(fn srot [rot lst]\n  (if (= 0 rot)\n    lst\n    (if (< 0 rot)\n      (srot (dec rot) (concat (rest lst) (list (first lst))))\n      (srot (inc rot) (concat (list (last lst)) (take (dec (count lst)) lst))))))","user":"53ddd44be4b0d874e779ae2e"},{"problem":44,"code":"(fn rot [n xs]\n  (cond\n   (= n 0) xs\n   (> n 0) (rot (dec n) (concat (rest xs) (list (first xs))))\n   (< n 0) (rot (inc n) (concat (list (last xs)) (butlast xs)))))","user":"5b7f2d75e4b047b03b203768"},{"code":"(fn thing [n x]\n (if (< n 0)\n   (thing (+ n (count x)) x)\n   (if (= n 0)\n     x\n     (thing (- n 1) (concat (rest x) (list (first x))))\n   )\n )\n)","problem":44,"user":"50f89404e4b0aafb827eb204"},{"problem":44,"code":"(fn [x coll]\n  (concat\n    (reverse\n      (take\n        (if (pos? x) (- (count coll) (rem x (count coll))) (* -1 (rem x (count coll))))\n         (reverse coll)))\n    (take\n      (rem (if (neg? x) (+ 1 (* -1 x)) x) (count coll))\n      coll)))","user":"557e8326e4b05c286339e0d7"},{"code":"(fn [m coll]\n    (let [n (mod m (count coll))]\n      (concat (drop n coll) (take n coll))))","problem":44,"user":"4fa2fa5ee4b081705acca186"},{"code":"(fn [n c] \n  (let [sz (count c)\n        r (+ (rem n sz) sz)]\n  (take sz (drop r (cycle c)))))","problem":44,"user":"4fc0853ae4b081705acca327"},{"code":"(fn go [offset seq]\n  (let [len (count seq)]\n    (if (> offset 0)\n      (take len (drop offset (cycle seq)))\n      (go (+ len offset) seq))))","problem":44,"user":"524cdd51e4b0752c4cb68ccc"},{"problem":44,"code":"(fn [ofs xs]\n  (let [c (count xs)\n        r (rem ofs c)\n        d (if (< r 0) (+ r c) r)]\n    (take c (drop d (cycle xs)))))","user":"5821b018e4b04b46fc4b0f80"},{"problem":44,"code":"(fn\n  [ind args]\n      (for [x (range (count args))\n            :let [index (mod (+ x ind) (count args))]]\n           (nth args index)))","user":"59cd13d5e4b0ef0a1e9b5b32"},{"problem":44,"code":"(fn [displace coll]\n  (let [num-items (count coll)\n        true-displace (if (> displace 0)\n                        (rem displace num-items)\n                        (+ num-items (rem displace num-items)))\n        num-items-needed (+ num-items true-displace)]\n    (take-last num-items (take num-items-needed (cycle coll)))))","user":"55344b75e4b09218d5f44f99"},{"problem":44,"code":"(fn [r xs] \n   (let [n (count xs)] \n     (take n (drop (mod r n) (cycle xs)))))","user":"5a01d8f6e4b01bb0ae8afd53"},{"problem":44,"code":"(fn [n myseq]\n  (let\n    [recursor \n     (fn recurs \n       [n myseq]\n       (if \n         (= 0 n)\n         myseq\n         (recurs \n          (- n 1) \n          (concat \n           (rest myseq) \n           (list (first myseq))\n           )\n          )\n         )\n       )\n     ]\n    (recursor (mod n (count myseq)) myseq)\n    )\n  )","user":"58950f29e4b00487982d5270"},{"problem":44,"code":"#(let [n (mod % (count %2))] (concat (nthrest %2 n) (take n %2)))","user":"544e6b7fe4b0e39780006986"},{"code":"(fn rotate [distance coll]\n  (let [x (mod distance (count coll))]\n    (concat (drop x coll) (take x coll))\n    ))","problem":44,"user":"53307da1e4b019098a6f8b5e"},{"problem":44,"code":"(fn [n s]\n  (let [rot-one (fn [s] (concat [(last s)] (butlast s)))\n        nn (Math/abs n)\n        ss (if (> n 0) (reverse s) s)\n        raw (last (take (inc nn) (iterate rot-one ss)))]\n    (if (> n 0) (reverse raw) raw)))","user":"5da71eaee4b000c986472c15"},{"problem":44,"code":"(fn\n  [rot sequence]\n  (let [rotation (mod rot (count sequence))]\n    (concat (take-last (- (count sequence) rotation) sequence) (take rotation sequence))))","user":"5ccb0bbee4b0ccb06196287c"},{"problem":44,"code":"#(let [k (mod % (count %2))]\n  (concat (drop k %2) (take k %2)))","user":"5416b4a2e4b01498b1a71a01"},{"problem":44,"code":"; (rotate 1 (1 2 3 4 5)) -> (2 3 4 5 1)\n; (rotate 2 (1 2 3 4 5)) -> (4 5 1 2 3)\n; (rotate 3 (1 2 3 4 5)) -> (5 1 2 3 4)\n\n(fn [n coll]\n  (let [ntime (if (neg? n) (- n) n)\n        lshift #(concat (rest %) [(first %)])\n        rshift #(cons (last %) (drop-last %))]\n    ((apply comp (repeat ntime (if (neg? n) rshift lshift))) coll)))","user":"5ab8037ae4b073f177442678"},{"problem":44,"code":"#(let [r (mod %1 (count %2))]\n      (concat (drop r %2) (take r %2)))","user":"4e38f245535deb9a81d77f3e"},{"code":"(fn rotate [n coll]\n  (let [m (mod n (count coll))]\n      (concat (drop m coll) (take m coll))\n  )\n)","problem":44,"user":"4fb3fec7e4b081705acca2a7"},{"problem":44,"code":"(fn xxx [n xs]\n  (let [rotr #( conj (vec (rest %)) (first %) )\n        rotl #( cons (last %) (butlast %) )\n        f (if (< 0 n) rotr rotl)]\n    \n    \n    ((apply comp (repeat (Math/abs n) f)) xs)\n))","user":"570d0548e4b0b0fb43fd06d2"},{"code":"(fn [n v]\n    (let [m (mod n (count v))\n          a (drop m v)\n          b (take m v)]\n      (concat a b)))","problem":44,"user":"50bf6f93e4b0ffd967a66cbf"},{"problem":44,"code":"#(flatten (apply conj '() (split-at (mod %1 (count %2)) %2)))","user":"5471f0f3e4b094393f72dd6f"},{"problem":44,"code":"(fn rot-func [n coll]\n  (let [nmod (mod n (count coll))]\n    (concat (drop nmod coll) (take nmod coll))))","user":"5d24e49be4b02ea6f0fb6a2a"},{"code":"(fn [n coll]\n  (let [x (count coll)]\n    (take x (drop (+ x (rem n x)) (cycle coll)))))","problem":44,"user":"4ecb1641535d6d7199dd370e"},{"problem":44,"code":"(fn [n coll] (let [r (mod n (count coll))]\n               (concat (drop r coll) (take r coll))))","user":"5d629ed9e4b0c9e5857d501d"},{"problem":44,"code":"(fn rotate\n  [x coll]\n  (cond\n   (zero? x) coll\n   (pos? x) (rotate (dec x) (concat (rest coll) [(first coll)]))\n   (neg? x) (rotate (inc x) (cons (last coll) (drop-last coll)))))","user":"542725fce4b01498b1a71b22"},{"problem":44,"code":"(fn [n coll]\n  (let [n (rem n (count coll))\n        m (if (>= n 0) n (+ (count coll) n))\n        ]\n  (concat\n   (drop m coll)\n   (take m coll))))","user":"5032748ae4b0e78df07b092f"},{"code":"(fn [shift coll]\n    (let [n (mod shift (count coll))]\n      (concat (drop n coll)(take n coll))))","problem":44,"user":"4e8e8c24535d65386fec2143"},{"problem":44,"code":"#(loop [i %\n       lst %2]\n       (cond (= i 0) lst\n             (> i 0) (recur (dec i) (concat (rest lst) (list (first lst))))\n             (< i 0) (recur (inc i) (cons (last lst) (butlast lst)))))","user":"54c98ac0e4b045293a27f679"},{"code":"(fn [i s]\n  (if (pos? i)\n    (take (count s) (drop i (cycle s)))\n    (take (count s) (drop (- (count s) (rem (Math/abs i) (count s))) (cycle s)))))","problem":44,"user":"50843a4ae4b0c98812d0788b"},{"code":"(fn [r xs]\n  (let [n (count xs)\n        p (if (< r 0) (+ r n) r)\n        pp (mod p n)\n        h (take pp xs)\n        t (drop pp xs)]\n    (flatten (cons t h))))","problem":44,"user":"4ffa213ee4b0678c553fc3b7"},{"code":"#(concat (drop (mod %1 (count %2)) %2)\n         (take (mod %1 (count %2)) %2))","problem":44,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":44,"code":";; would prefer to avoid wrapping (first %) in a\n;; vector to concat properly, but i don't know a\n;; cleaner way to add a single value to the end\n;; of a list.\n(fn [steps c]\n  (let [r-forward #(concat (rest %) [(first %)])\n        r-reverse #(cons (last %) (drop-last %))\n        f (if (>= steps 0) r-forward r-reverse)]\n    (nth (iterate f c) (Math/abs steps))))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":44,"code":"(fn [n xs]\n  (let [m (mod n (count xs))] \n     (concat (drop m xs) (take m xs))))","user":"5aeec90fe4b0cc2b61a3bc31"},{"problem":44,"code":"(fn\n  [n seq_]\n  (let [length (count seq_)\n        new-indexes (map #(mod (- % (- n)) length) (range length))]\n    (map #(nth seq_ %) new-indexes)\n   )\n )","user":"6059d824e4b07e92fa001acf"},{"problem":44,"code":"(fn [n xs]\n  (let [x (if (neg? n) (reverse xs) xs)\n        i (mod (Math/abs n) (count xs))\n        r (concat (drop i x) (take i x))]\n    (if (neg? n) (reverse r) r)))","user":"563ed73ae4b08d4f616f5ecb"},{"code":"(fn rotate [num coll]\n  (let [rotation (mod num (count coll))]\n    (concat (drop rotation coll) (take rotation coll))))","problem":44,"user":"4e8239d6535db62dc21a62c4"},{"problem":44,"code":"(fn [pos coll] \n  \t(let [n (count coll) \n          m (if (> pos 0) pos (mod pos n))] (take n (drop m (cycle coll)))))","user":"52e5f810e4b09f7907dd1468"},{"problem":44,"code":"(fn rotate-sequence\r\n  [n v]\r\n  ;; return the sequence rotated by n steps in left direction if n > 0\r\n  ;; rotated by n steps in right direction if n < 0\r\n  (let \r\n   [c (count v)\r\n    f (fn [cnt len arr] (if \r\n    (and (>= cnt 0) (<= cnt len)) (concat (drop cnt arr) (take cnt arr))\r\n    (concat (drop (rem cnt len) arr) (take (rem cnt len) arr))))]\r\n    (if (< n 0) (reverse (f (* n -1) c (reverse v))) (f n c v))))","user":"60c86bbde4b0e0fa5f1b42fb"},{"problem":44,"code":"(fn [n col]\n  (if (= n 0)\n    col\n    (if (< n 0)\n        (recur (+ n 1) (conj (drop-last col) (last col)))\n  \t    (recur (- n 1) (concat (rest col) (list (first col)))))))","user":"5d371b6fe4b01671435dbd31"},{"problem":44,"code":"(fn [n sq]\n   (let [len (count sq)\n         norm_shift (rem n len)\n         abs_shift (if (> norm_shift 0) norm_shift (+ len norm_shift))]\n     (concat (drop abs_shift sq) (take abs_shift sq)))\n     )","user":"573107d5e4b0cd1946bd0fbc"},{"code":"(fn rotate [n l]\n  (if (= 0 n) l \n    (recur (if (pos? n) (dec n) (inc n))\n           (if (pos? n)\n             (concat (rest l) [(first l)])\n             (concat [(last l)] (drop-last l))))))","problem":44,"user":"5273e006e4b03e8d9a4a7495"},{"problem":44,"code":"(fn rotate [n v]\n  (let [pos (mod n (count v))]\n    (->> (concat v v)\n         (drop pos)\n         (take (count v)))))","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"problem":44,"code":"#(let [whr (mod %1 (count %2)) lst (split-at whr %2)]\n    (concat (second lst) (first lst)))","user":"5a75da49e4b0512ff01cdacf"},{"code":"#(apply concat (let [[a b] (split-at (mod %1 (count %2)) %2)] [b a]))","problem":44,"user":"50555c06e4b0ce54f56f03fa"},{"problem":44,"code":"(fn [offset list]\n    (let [list-size (count list)\n          adjusted-offset (mod offset list-size)]\n      (take list-size (drop adjusted-offset (cycle list)))))","user":"4f213e2ee4b0d66497709fcf"},{"problem":44,"code":"(fn [shift coll]\n  (let [cnt (count coll)\n        shift (rem shift cnt)\n        indexes (map (comp #(rem % cnt) #(+ % (- cnt shift))) (take cnt (iterate inc 0)))\n        indexed (map vector coll indexes)]\n    (map first (sort-by second indexed))))","user":"5a082ce4e4b01bb0ae8afdec"},{"problem":44,"code":"(fn [shift col]\n   (if (= shift 0)\n     (list* col)\n     (if (> shift 0)\n       (recur (dec shift) (concat (rest col) (list (first col))))\n       (recur (inc shift)(cons (last col) (butlast col)))\n     )\n   )\n  )","user":"556f2009e4b09a3098a52519"},{"code":"(fn rotate [n xs]\n  (let [normalize-idx (fn normalize-idx [idx cnt]\n                        (if (and (>= idx 0) (< idx cnt))\n                          idx\n                          (if (< idx 0)\n                            (recur (+ cnt idx) cnt)\n                            (if (> idx cnt)\n                              (recur (- idx cnt) cnt)\n                              idx))))]\n    (let [cnt       (count xs)\n          start-idx (normalize-idx n cnt) \n          to-idx    #(if (>= % cnt) (- % cnt) %)\n         ]\n        (map (partial nth xs) (map to-idx (take cnt (iterate inc start-idx)))))))","problem":44,"user":"50e3ddd4e4b01912b3285c47"},{"code":"(fn [n coll]\n  (if (pos? n)\n    (concat\n      (drop (rem n (count coll)) coll)\n      (take (rem n (count coll)) coll))\n    (concat\n      (take-last (rem (unchecked-negate n) (count coll)) coll)\n      (drop-last (rem (unchecked-negate n) (count coll)) coll))))","problem":44,"user":"500e91aae4b00fff93030f99"},{"code":"(fn [n xs]\n\t(let [sz (count xs)\n          rot (mod n sz)]\n         (into (vec (drop rot xs)) (take rot xs))))","problem":44,"user":"50eafeaae4b0346a3e988cbb"},{"problem":44,"code":"(fn [n ns]\n  (let [c (count ns)\n        m (rem n c)\n        d (if (neg? n) (+ c m) m)]\n    (concat (drop d ns) (take d ns))))","user":"52c00e32e4b07a9af5792341"},{"problem":44,"code":"#(letfn [(rotate-seq \n         [p coll]\n         (flatten (conj (take p coll) (drop p coll))))]\n  (let [n (count %2)]\n    (if (pos? %)\n      (if (< % n)\n        (rotate-seq % %2)\n        (rotate-seq (- % n) %2))\n      (if (pos? (+ % n))\n        (rotate-seq (+ % n) %2)\n        (rotate-seq (+ % n n) %2)))))","user":"54eee38ce4b024c67c0cf878"},{"code":"#(take (count %2) (drop (+ (count %2) (rem %1 (count %2))) (flatten (repeat 3 %2))))","problem":44,"user":"5356d00ee4b04ce2eb3ed26f"},{"code":"(fn [n coll]\n  (let [m (mod n (count coll))\n        f (take m coll)\n        r (nthrest coll m)]\n    (concat r f)))","problem":44,"user":"500ec210e4b00fff93030f9d"},{"problem":44,"code":"(fn [n seq]\r\n  (let [n (rem n (count seq))]\r\n    (if (pos? n)\r\n      (concat (nthrest seq n) (take n seq))\r\n      (concat (take-last (- n) seq) (drop-last (- n) seq)))))","user":"555bd27ae4b0b056612e2244"},{"code":"(fn rotate [n coll]\n  (let [len (count coll)\n        idx (if (or (neg? n) (> (Math/abs n) len))\n              (mod n len)\n              n)]\n    (apply concat (reverse (split-at idx coll)))))","problem":44,"user":"511b9017e4b00c2a1fa7ff6b"},{"code":"#(let [n (mod % (count %2))]\n   (concat (drop n %2) (take n %2)))","problem":44,"user":"4e4ae5aa535dc968683fc4d2"},{"code":"(fn [n v]\n  (take (count v)\n        (drop (mod n (count v))\n              (concat v v))))","problem":44,"user":"4f437751e4b0d7d3c9f3fd20"},{"problem":44,"code":"(fn rotate-seq\n  [n l]\n  (if (zero? n)\n    l\n    (let [first-elt (first l)\n          last-elt (last l)\n          others (butlast (rest l))]\n      (if (< n 0)\n        (rotate-seq (inc n) (conj (apply list others) first-elt last-elt))\n        (rotate-seq (dec n) (conj (apply vector others) last-elt first-elt))))))","user":"58821372e4b0f1effa3b764d"},{"code":"(fn [shift s]\n  (let [l (count s)\n        index-v (map-indexed (fn [i e] [(mod (- i shift) l) e]) s)\n        trival-v (vec (range l))]\n    (reduce #(assoc %1 (first %2) (last %2)) \n            trival-v index-v)))","problem":44,"user":"5092fe10e4b097f48cc3857e"},{"problem":44,"code":"(fn [n s]\n  (let [c (count s)\n        l (rem n c)\n        p? (pos? l)\n        fst (if p?\n              (drop l s)\n              (drop (+ c l) s))\n        lst (if p?\n              (take l s)\n              (take (+ c l) s))]\n    (concat fst lst)))","user":"56201392e4b064ca9f4b16d8"},{"code":"(fn [r xs]\n  (->> (cycle xs)\n       (drop (mod r (count xs)))\n       (take (count xs))))","problem":44,"user":"511623cbe4b0d4f670fd2fe1"},{"code":"(fn [n lista]\n  (let [indice (fn [n lista]\n  (let [longitud (count lista), modulo (mod n longitud )]\n    (if (< modulo 0)\n      (+ longitud modulo)\n      modulo))), ind (indice n lista)] (flatten (cons (nthnext lista ind) (take ind lista)))))","problem":44,"user":"524b1a95e4b09eba1c0223c2"},{"problem":44,"code":"(fn [i coll]\n  (let [j (mod i (count coll))]\n    (concat (nthrest coll j) (take j coll))))","user":"550e8e04e4b06e50f9beb167"},{"code":"#(let [t (mod % (count %2))] (concat (drop t %2) (take t %2)))","problem":44,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":44,"code":"(fn [n s](flatten (conj (take (mod n (count s)) s) (nthrest s (mod n (count s))) )))","user":"56039843e4b04bb52996e1be"},{"code":"#(apply concat \n  (reverse (split-at (mod %1 (count %2)) %2)))","problem":44,"user":"509251f3e4b09a7d0b586de5"},{"problem":44,"code":"(fn rotate-sequence [rotate-amount sequence-to-rotate]\n  (let [sequence-length (count sequence-to-rotate)\n        to-drop (loop [td rotate-amount]\n                  (if (not (neg? td))\n                    td\n                    (recur (+ td sequence-length))))]\n    (->> (cycle sequence-to-rotate) (drop to-drop) (take sequence-length))))","user":"56742817e4b05957ce8c612d"},{"code":"(fn [n s]\n  (letfn [(rotate-1 [l] (concat (drop 1 l) [(first l)]))]\n    (let [m (if (> (Math/abs n) (count s)) (quot n (count s)) n)\n          c (if (< m 0) (+ (inc m) (count s)) (inc m))]\n      (last (take c (iterate rotate-1 s))))))","problem":44,"user":"526f9715e4b03e8d9a4a7372"},{"problem":44,"code":"(fn [n sq]\n  (let [pos (rem n (count sq))\n        pos' (if (neg? pos)\n               (+ (count sq) pos)\n               pos)]\n    (->> (map-indexed vector sq)\n         (split-with (fn [[i _]] (>= pos' (inc i))))\n         reverse\n         (apply concat)\n         (map second))))","user":"5d431c77e4b07c84aa5ae68f"},{"problem":44,"code":"(fn [in col]\n  (let [num (if (neg? in) (* -1 in) in)]\n    (loop [i num collec col] \n      (if (zero? i) \n        collec \n        (recur (dec i) \n               (if (neg? in) \n                 (cons (last collec) (drop-last collec)) \n                 (concat (rest collec) [(first collec)])))))))","user":"57169f93e4b07c98581c3b00"},{"problem":44,"code":"(fn [n s]\n  (let [i (if (< (count s) (Math/abs n))\n             (- (Math/abs n) (count s))\n             (Math/abs n))]\n    (concat\n     (filter #(> (.indexOf s %)\n                 (if (> n 0) (dec i)\n                     (- (count s) (inc i)))) s)\n     (filter #(< (.indexOf s %)\n                 (if (> n 0) i\n                     (- (count s) i))) s))))","user":"5fa80c01e4b0fa27300f3de2"},{"code":"(fn\n  [n xs]\n  (if (> n 0)\n    (let [r (mod n (count xs))]\n      (concat (drop r xs) (take r xs)))\n    (let [r (mod (* -1 n) (count xs))]\n      (concat (take-last r xs) (drop-last r xs)))))","problem":44,"user":"4fadbb17e4b081705acca23e"},{"problem":44,"code":"(fn rotate\n  [v coll]\n  (let [v (mod v (count coll))]\n    (concat (drop v coll) (take v coll))))","user":"5bc7f2d6e4b07a9b28b100b7"},{"code":"#(let [x (mod %1 (count %2))]\r\n      (concat (drop x %2) (take x %2)))","problem":44,"user":"4db03279838c48654951d9bc"},{"problem":44,"code":"#(let [c (count %2) n (mod %1 c)] (concat (drop n %2) (drop-last (- c n) %2)))","user":"5112500ee4b0350614f07a72"},{"problem":44,"code":"(fn [n l]\n  (let [c (count l)]\n    (take c\n          (drop (mod n c)\n                (cycle l)))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":44,"code":"#(let [v (vec %2)\n       m (mod % (count %2))]\n   (reduce conj (subvec v m) (subvec v 0 m)))","user":"5499e23de4b03163384f4706"},{"code":"(fn rotate [n s] (if (= n 0)\n  s\n  (if (> n 0)\n    (rotate (- n 1) (conj (vec (rest s)) (first s)))\n    (reverse (rotate (* n -1) (reverse s))))))","problem":44,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":44,"code":"(fn [n l]\n   (let [offset (mod (Math/abs n) (count l))]\n       (if (pos? n)\n         (concat (drop offset l) (take offset l))\n         (concat (take-last offset l) (drop-last offset l)))))","user":"5eb1c786e4b00a66d4a95201"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [c (count coll)]\n    (if (pos? n)\n      (take c (drop n (cycle coll)))\n      (take c (drop (inc (- n)) (cycle coll))))))","user":"55af3e6be4b03311e7b732c7"},{"problem":44,"code":"(fn [n coll]\n  (let [sz (count coll)\n        r (rem n sz)\n        rr (if (< r 0) (+ r sz) r)]\n    (take sz (drop rr (concat coll coll)))))","user":"576b4e6be4b0a07e8fc1812b"},{"problem":44,"code":"(fn [i xs]                                                                                                                                                                                                          \n   (if (zero? i)                                                                                                                                                                                                     \n     xs                                                                                                                                                                                                              \n     (let [v (rem i (count xs))                                                                                                                                                                                      \n           v (if (pos? v) v (+ (count xs) v))]                                                                                                                                                                       \n       (concat (drop v xs) (take v xs)))))","user":"4fec08e8e4b0681fd128dc9d"},{"problem":44,"code":"(fn rotate-seq\n [n s]\n (let [b (mod n (count s))]\n   (concat (drop b s) (take b s))))","user":"557e9d17e4b05c286339e0d8"},{"code":"(fn [n coll]\n  (let [elements (count coll)\n        abs-n (if (< n 0) (- n) n)\n        n (if (> n 0)\n            (if (> abs-n elements) (- n elements) n)\n            (if (> abs-n elements) (+ n elements elements) (+ n elements)))]\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":44,"code":"(fn [n c] (let [i (mod n (count c))] (concat (drop i c) (take i c))))","user":"561a1af6e4b053970a773b02"},{"problem":44,"code":"(fn f44 [x y]\n  (let [a (mod x (count y))]\n    (concat (drop a y) (take a y))))","user":"535aee3be4b04ce2eb3ed2aa"},{"problem":44,"code":"(fn [n coll]\n  (let [s (count coll)\n        c (if (neg? n) (- s (mod (- n) s)) (mod n s))]\n    (apply concat (reverse (split-at c coll)))))","user":"55a12668e4b0acc240e3150b"},{"problem":44,"code":"(fn f [n col]\n  (let [afunc (fn [x ] (take (count x) (cons (last x) x)))\n        bfunc (fn [x] (take (count x) (reverse (cons (first x) (reverse (rest x))))))      ]\n    (if (< n 0)\n      (recur (inc n) (afunc col))\n      (if (> n 0)\n        (recur (dec n) (bfunc col))\n        col)\n      )\n    ))","user":"544ac9b5e4b0e39780006959"},{"code":"(fn [shift lst]\n  (let [len (count lst)]\n    (loop [l lst\n           sh (if (>= shift 0) shift (+ (rem shift len) len))]\n      (if (zero? sh)\n        l\n        (recur (concat (rest l) (list (first l)))\n               (dec sh))))))","problem":44,"user":"515828b8e4b0a069fd272c71"},{"problem":44,"code":"(fn [n xs] (let [[a b] (split-at (mod n (count xs)) xs)] (concat b a)))","user":"5363d242e4b0243289761e5c"},{"problem":44,"code":"(fn [n coll]\n   (let [splitted (split-at (mod n (count coll)) coll)]\n     (concat (last splitted) (first splitted))))","user":"54094824e4b0addc1aec66da"},{"problem":44,"code":"(fn [x y] (let [n (mod x (count y))] (concat (drop n y) (take n y))))","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn rotate-seq [n coll]\n  (let [num (count coll)\n        index (if (>= n 0)\n                (if (> n num)\n                  (- n num)\n                  n)\n                (if (> (* -1 n) num)\n                  (+ num (+ n num))\n                  (+ num n)))]\n    (reduce concat (reverse (split-at index coll)))))","problem":44,"user":"4e4bd94b535dc968683fc4d7"},{"problem":44,"code":"(fn \n  [x s]\n  (let [c (count s)\n        n (mod x c)]\n    (take c (drop n (cycle s)))))","user":"585a7b05e4b0f14aab7c874d"},{"problem":44,"code":"(fn [cnt sq]\n  (let [size (count sq)\n        cnt1 (rem cnt size)\n        temp-cnt (+ cnt1 size)\n        rot-cnt  (if (pos? cnt1) cnt1 temp-cnt)\n        sq1 (take rot-cnt sq)\n        sq2 (drop rot-cnt sq)\n        sq2-reversed (reverse sq2)]\n    (apply conj sq1 sq2-reversed)))","user":"5803cd8fe4b0a837a8b30c96"},{"problem":44,"code":"#(let [[l r] (split-at (mod %1 (count %2)) %2)]\n   (concat r l))","user":"5602bdf9e4b04bb52996e1a7"},{"code":"#(let [ n (mod % (count %2))]\n           (concat (drop n %2)\n                   (take n %2)))","problem":44,"user":"4e6ea1f5535d5021c1a8960e"},{"code":"(fn [n l] ((fn[s,leng] (concat (take-last (- leng s) l) (take s l)) ) (mod n (count l)) (count l)))","problem":44,"user":"51a417dde4b0def3c5c58688"},{"problem":44,"code":"(fn\n  [n sq]\n  (let [length (count sq)\n        turns (rem n length)\n        take-n (if (neg? turns)\n                 (+ length turns)\n                 turns)\n        colls (split-at take-n sq)]\n    (concat (second colls) (first colls))))","user":"5c9a638fe4b048ec896c5aae"},{"problem":44,"code":"(fn foo2\n  [n coll]\n  (concat\n    (for\n      [x (vec coll)\n       i (range (count (vec coll)))\n       :let [num ((fn\n                    [n coll]\n                    (if (>= (rem n (count (vec coll))) 0)\n                      (+ 1 (rem n (count (vec coll))))\n                      (+ 1 (count (vec coll)) (rem n (count (vec coll))))))\n                   n (vec coll))]\n       :when (= x (get (vec coll) i))\n       :when (>= i (- num 1))]\n      x)\n\n    (for\n      [x (vec coll)\n       i (range (count (vec coll)))\n       :let [num ((fn\n                    [n coll]\n                    (if (>= (rem n (count (vec coll))) 0)\n                      (+ 1 (rem n (count (vec coll))))\n                      (+ 1 (count (vec coll)) (rem n (count (vec coll))))))\n                   n (vec coll))]\n       :when (= x (get (vec coll) i))\n       :when (< i (- num 1))]\n      x)\n    ))","user":"598d0dc3e4b02b9968b84d18"},{"code":"(fn f [n coll]\n   (cond\n    (> (quot n (count coll)) 0) (f (mod n (count coll)) coll)\n    (neg? n) (f (+ (count coll) n) coll)\n    :else\n    (concat (drop n coll) (take n coll))\n    )\n  )","problem":44,"user":"529d4f4be4b04e0c58e87b79"},{"problem":44,"code":"(fn[rot s]\n  (let [shift (rem rot (count s))]\n    (if (> shift 0)\n      (concat (drop shift s) (take shift s))\n      (concat (drop (+ (count s) shift) s) (take (+ (count s) shift) s)))))","user":"55429859e4b0a04f7929951f"},{"problem":44,"code":"(fn rotate [steps xs]\n  (let [size (count xs)\n        drop-count (if (pos? steps)\n                     steps\n                     (+ size size steps))]\n    (take size (drop drop-count (cycle xs)))))","user":"5215661be4b02f6d8ea676c7"},{"problem":44,"code":"(fn [t coll]\n  (loop [c coll\n         n 0]\n    (cond \n     (= n t) c\n     (> t 0)\n      (recur (conj (into [] (rest c))\n                   (first c))\n             (inc n))\n     :else\n     (recur (conj (butlast c)\n                  (last c)) \n            (dec n)))))","user":"5a29ee57e4b09cafd31c7f2b"},{"code":"(fn [shift s]\n  (let [len (count s)\n        offset (mod shift len)]\n  (take len (concat (drop offset s)\n                    (cycle s)))))","problem":44,"user":"4e68b46c535d8ccf87e9fe87"},{"code":"(fn [n l]\n  (let [n (mod n (count l))]\n    (concat (drop n l) (take n l))))","problem":44,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":44,"code":"(fn [x ys]\n  (let [maybe-reversed (if (< x 0) (reverse ys) ys)]\n    (loop [[first & rest] maybe-reversed\n            ret []\n            amount (mod  (if (< x 0) (* -1 x) x) (count ys))]\n      (if (< 0 amount)\n        (recur rest (conj ret first) (- amount 1))\n        (if (< x 0)\n          (reverse (concat (list first) rest ret))\n          (concat (list first) rest ret))\n        ))))","user":"58a216e8e4b02bd94d917ed1"},{"code":"#(flatten (conj (take (mod (+ (count %2) %) (count %2)) %2) (take-last (mod (- (count %2) %) (count %2)) %2)))","problem":44,"user":"52a5f1e6e4b0c58976d9abf4"},{"problem":44,"code":"(fn\n [idx seq]\n  (let [shift (mod idx (count seq))]\n      (flatten ((juxt drop take) shift seq))))","user":"5a9ac061e4b0d174b936c7c1"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [n (mod n (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"53dc94c8e4b094d41abdfefc"},{"code":"(fn [n coll]\r\n  (let [real-n (mod (+ (count coll) n) (count coll))]\r\n    (loop [left [], right coll]\r\n      (if (= (count left) real-n) \r\n        (concat right left)\r\n        (recur (conj left (first right)) (rest right))))))","problem":44,"user":"4df407c3535d08e6dec9fe2e"},{"code":"(fn rotate [n x]\n  (let [n (mod n (count x))\n        i (if (neg? n) (- (count x) n) n)\n        xs (split-at i x)]\n    (concat (second xs) (first xs))\n  )\n)","problem":44,"user":"4ef0a39b535dced4c769f20c"},{"problem":44,"code":"(fn [n s]\n   (let [n (if (< n 0) (inc (* -1 n)) n)]\n    (let [n (cond\n              (< n 0) (+ n (count s))\n              (> n (count s)) (- n (count s))\n              :else n)]\n     (concat (drop n s)\n             (take n s)))))","user":"588d0a52e4b05c141a2560a6"},{"problem":44,"code":"(fn rotate [from what]\n  (if (= from 0)\n    what\n    (recur\n      (if (> 0 from) (inc from) (dec from))\n      (if (< 0 from) (concat (rest what) [(first what)]) (concat [(last what)] (drop-last what))))))","user":"5b15811ee4b0cc2b61a3be6f"},{"code":"(fn [n xs]\n   (let [[f s] (split-at (mod n (count xs)) xs)]\n     (concat s f)))","problem":44,"user":"51131da8e4b0350614f07a83"},{"problem":44,"code":"(fn rotate-sequence [n xs]\n  (let [k (mod n (count xs))]\n    (concat (drop k xs) (take k xs))))","user":"53e8c684e4b036ad0777e48b"},{"problem":44,"code":"(fn [r coll]\n  (let [n (count coll)\n        new-index (fn [i] (mod (+ i r) n))\n        new-indexes (map new-index (range n))]\n    (map (fn [i] (nth coll i)) new-indexes)))","user":"5c7d5a0ce4b0d597f478caab"},{"code":"(fn rotate-seq [n sx]\n  (let [len (count sx)\n        d   (mod n len)]\n    (take len (drop d (cycle sx)))))","problem":44,"user":"4e7263a1535d5021c1a8965f"},{"problem":44,"code":"(fn [n xs]\n    (let [len (count xs)]\n      (->> (cycle xs)\n           (drop (mod n len))\n           (take len))))","user":"55568a7de4b0deb715856e1c"},{"problem":44,"code":"(fn rot [steps coll]\n  (loop [c coll n steps]\n    (cond \n     (= n 0) c\n     (> n 0) (recur (concat (rest c) [(first c)]) (dec n))\n     :else (recur (concat [(last c)] (butlast c)) (inc n))\n     )\n  )\n)","user":"5a424954e4b0447ef91cc5f0"},{"problem":44,"code":"(fn rotate [x coll]\n  (let [len (count coll)\n        dist (mod x len)]\n    (concat (drop dist coll)\n            (take dist coll))))","user":"557e56aae4b05c286339e0d5"},{"problem":44,"code":"(fn [n c]\n  (cond\n   (> n 0) (recur (- n 1) (conj (vec (rest c)) (first c)))\n   (< n 0) (recur (+ n 1) (conj (lazy-seq (take (dec (count c)) c)) (last c)))\n   (= n 0) c))","user":"54b31445e4b09f271ff37d35"},{"problem":44,"code":"(fn rotate [n s]\n  (let [m (mod n (count s))]\n    (-> (split-at m s) reverse flatten)))","user":"5392500ae4b0b51d73faaeaf"},{"code":"(fn rot [n coll]\n  (cond \n    (= 0 n) coll\n    (> n 0) (rot (dec n) (concat (rest coll) [(first coll)]))\n    :else   (rot (+ (count coll) n) coll)))","problem":44,"user":"4dbd2aa3535d020aff1edf40"},{"code":"(fn rotate [n coll]\r\n  (let [c (count coll)]\r\n    (if (pos? n)\r\n      (apply concat ((juxt (partial drop (mod n c))\r\n                           (partial take (mod n c)))\r\n                     coll))\r\n      (apply concat ((juxt (partial drop (- c (mod (- n) c)))\r\n                           (partial take (- c (mod (- n) c))))\r\n                     coll)))))","problem":44,"user":"4e7e4a1f535db169f9c7970c"},{"code":"(fn rotate [n xs]\n        (cond (zero? n) xs\n              (> n 0) (rotate (- n 1)\n                              (concat (rest xs) [(first xs)]))\n              (< n 0) (rotate (+ n 1)\n                              (concat [(last xs)] (butlast xs)))))","problem":44,"user":"5055e7f4e4b0ce54f56f0401"},{"code":"#_#(let [n (mod %1 (count %2))]\n(concat (drop n %2) (take n %2)))\n\n#_#(let [n (count %2)]\n(take n (drop (+ (* 2 n) %) (cycle %2))))\n\n#_#(take (count %2) (second (split-at (mod % (count %2)) (cycle %2))))\n\n#_#(second (partition (count %2)\n                    (+ (* 2 (count %2)) %)\n                    (cycle %2)))\n\n\n#_#(if (= 0 (mod % (count %2)))\n    %2\n    (recur (inc %) (cons (last %2) (butlast %2))))\n\n#_#(if (= 0 (mod % (count %2)))\n    %2\n    (recur (inc %) (cons (last %2) (butlast %2))))\n\n#_(comp flatten reverse #(split-at (mod % (count %2)) %2))\n\n#(flatten (reverse (split-at (mod % (count %2)) %2)))","problem":44,"user":"4f1bb9d8535d64f60314647d"},{"problem":44,"code":"(fn [n xs]\n  (let [n (mod n (count xs))]\n  \t(concat (drop n xs) (take n xs))))","user":"56d30497e4b0ea9b8538f7a8"},{"code":"(fn [n s]\n  (let [g (rem n (count s))]\n    (if (pos? g)\n      (concat (drop g s) (drop-last (- (count s) g) s))\n      (concat (drop (+ (count s) g) s) (drop-last (- 0 g) s)))))","problem":44,"user":"4fbd12a5e4b081705acca2fd"},{"problem":44,"code":"(fn rotate1 [n sq]\n   (let [x (mod n (count sq))]\n     (concat (drop x sq)\n             (take x sq))))","user":"5c76577ae4b0fca0c16227ea"},{"problem":44,"code":"(fn [n col]\n  (let [n (mod n (count col))\n        [a b] (split-at n col)]\n  (concat b a)))","user":"5799b260e4b05b1deef9adc8"},{"problem":44,"code":"#(let [cnt (count %2)]\n   (loop [idx %1]\n     (if (and (<= 1 idx) (>= cnt idx))\n       (concat (drop idx %2) (take idx %2))\n       (if (> 1 idx)\n         (recur (+ idx cnt))\n         (recur (- idx cnt))))))","user":"56815e2fe4b0945ebc182a84"},{"code":"(fn f [n s]\n  (if (> 0 n)\n    (f (+ n (count s)) s)\n    (take (count s) (drop n (cycle s)))))","problem":44,"user":"50928084e4b097f48cc3856c"},{"code":"(fn[n s](#(concat (second %) (first %)) (split-at (mod n (count s)) s)))","problem":44,"user":"526a3412e4b03e8d9a4a721e"},{"problem":44,"code":"(fn [n xs] (apply concat\n                   ((juxt drop take)\n                     (mod n (count xs))\n                     xs)))","user":"56dc3bdfe4b0ea9b8538f819"},{"problem":44,"code":"(fn [rot coll]\n  (reduce #(assoc % (mod (+ (count coll) (- (.indexOf (vec coll) %2) rot)) (count coll)) %2)\n                              (vec coll) coll))","user":"543c39e0e4b032a45b86933d"},{"problem":44,"code":"(fn\n  [d s]\n  (take (count s) (drop (mod d (count s)) (cycle s))))","user":"56bb652ae4b0f26550335953"},{"problem":44,"code":"(fn [n sequence]\n  (let [rotate (mod n (count sequence))]\n    (lazy-cat (drop rotate sequence) (take rotate sequence))))","user":"5456e4e7e4b080a794c2c883"},{"problem":44,"code":"(fn [n s]\n  (loop [r s i (mod n (count s))]\n    (if (zero? i)\n      r\n      (recur (reverse (conj (reverse (rest r)) (first r))) (dec i)))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":44,"code":"(fn [n xs]\n  (let [r (mod n (count xs))\n        [fxs lxs] (split-at r xs)]\n    (concat lxs fxs)))","user":"523ea111e4b057c4b7cd0a65"},{"code":"(fn f [n c]\n  (let [n (mod n (count c))]\n    (concat (drop n c) (take n c))))","problem":44,"user":"4fea04f4e4b0547ebccb2482"},{"problem":44,"code":"(fn [n ls]\n  (let [ln (count ls)\n        nm (Math/abs n)\n        v (if (> nm ln) (- nm ln) nm)\n        b (if (> n 0) (drop v ls) (->> ls reverse (take v) reverse))\n        e (if (> n 0) (take v ls) (take (inc v) ls))]\n    (concat b e)))","user":"57efb389e4b0bfb2137f5bdb"},{"code":"(fn [a b] (let [c (mod a (count b))\n                f (take c b)\n                r (drop c b)]\n(concat r f)))","problem":44,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":44,"code":"(fn [pos coll]\n   (let [r (mod pos (count coll))]\n     (flatten (vector (drop r coll) (take r coll)))))","user":"560ee566e4b05f002753df57"},{"code":"(fn [n s] \n((fn addit [acc l] \n(if (or (= (count l) 0) (>= (count acc) (count s)))\n      acc\n      (if (> (count l) (- (* 2 (count s)) (mod n (count s))))\n       (addit acc (rest l))\n       (addit (concat acc [(first l)]) (rest l))\n))) [] (concat s s)))","problem":44,"user":"4e89de60535d3e98b8023285"},{"problem":44,"code":"(\n    fn [idx coll]\n    (->> (concat coll coll)\n      (drop (mod idx (count coll)))\n      (take (count coll))\n      ))","user":"547f3434e4b0c51c1f4d7319"},{"problem":44,"code":"(fn [n coll]\n  (let [len (count coll)\n        divide (mod (if (> n 0) n (+ n len)) len)\n        [l r] (split-at divide coll)]\n    (concat r l)))","user":"5169d422e4b051e2a73aba53"},{"code":"(fn [n s]\n   (let [r (Math/abs (rem n (count s)))\n         i (if (pos? n) r (- (count s) r))]\n     (concat (drop i s) (take i s))))","problem":44,"user":"50f48298e4b004d364930527"},{"problem":44,"code":"(fn\n  [x coll]\n  (let [n (count coll)]\n    (take\n      n\n      (drop (mod x n) (cycle coll)))))","user":"5cf1d9e3e4b0aaa82f112a18"},{"code":"(fn [shift_n s]\n     ( let [len (count s) \n                     shift (rem shift_n len)\n                     sn1 (if (> shift 0) (take shift s) (drop (+ len shift) s))\n                     sn2 (if (> shift 0) (drop shift s) (take (+ len shift) s))\n                     ]\n                 (if (> shift 0) (concat sn2 sn1) (concat sn1 sn2))\n              ))","problem":44,"user":"530d1060e4b08068f379eca2"},{"problem":44,"code":"(fn [n a] (take (count a) (drop (mod n (count a)) (cycle a))))","user":"5bf0aefde4b0a6d31fed215a"},{"problem":44,"code":"(fn rotate [n coll]\n\t(cond (> n 0) (rotate (dec n) (conj (vec (rest coll)) (first coll)))\n\t\t(= n 0) coll\n\t\t:else (rotate (inc n) (cons (last coll) (drop-last coll))))\n)","user":"525d44bfe4b0cb4875a45d6d"},{"problem":44,"code":"(fn [dir-step coll]\n  (let [step (mod dir-step (count coll))]\n    (concat (drop step coll) (take step coll))))","user":"5c13da47e4b01240ff5671a6"},{"problem":44,"code":"(fn [n coll]\n    (let [x (mod n (count coll))]\n        (concat (drop x coll)(take x coll))))","user":"566ff0a1e4b0a866af6896ec"},{"problem":44,"code":"#(let [c (count %2)\n          m (rem % c)\n          n (if (neg? m) (+ m c) m)]\n      (flatten (conj (take n %2) (take-last (- c n) %2))))","user":"559a8816e4b066d22e731f41"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [at (mod n (count xs))\n        [newtail newhead] (split-at at xs)]\n    (concat newhead newtail)))","user":"58b18ba0e4b0ebc645576cfa"},{"code":"(fn rotate [ct sequence]\n    (cond\n     (= ct 0) sequence\n     (> ct 0) (recur (dec ct) (concat (rest sequence) (list (first sequence))))\n     :else (recur (inc ct) (concat (list (last sequence)) (butlast sequence)))))","problem":44,"user":"50057f23e4b0678c553fc466"},{"problem":44,"code":"(fn [x coll]\n  (let [modded (mod (#(if (< x 1) (* -1 %) %) x) (count coll))]\n    (cond\n      (<= 1 x)\n        (concat (drop modded coll) (take modded coll))\n      (< x 1)\n        (concat (drop (- (count coll) modded) coll) (take (- (count coll) modded) coll))\n    ))\n  )","user":"59971e2de4b07157cc8daacc"},{"problem":44,"code":"(fn [x y]\n  (let [t (into [] (concat y y))\n        c  (count y)\n        o (mod x c)\n        a (+ o c)]\n    (if (>= o 0)\n      (replace t (range o a))\n      (replace t (range a (+ a c))))))","user":"566d71b1e4b0a866af6896ca"},{"problem":44,"code":"(fn [position coll]\n   (let[ index\n     (if (< position 0)\n       (+ (mod position (- (count coll))) (count coll))\n       (mod position (count coll)))]\n     (concat (drop index coll) (take index coll))\n     )\n   )","user":"5ccc2a03e4b0ccb06196288f"},{"problem":44,"code":"(fn rotate [n s] \n  (cond \n    (zero? n) s\n    (empty? s) s\n    :else (let [to-rotate (mod n (count s))]\n            (concat (drop to-rotate s) (take to-rotate s)))))","user":"56326995e4b0bfe05bf117a3"},{"problem":44,"code":"(fn\n  [n ls]\n  (let [len (count ls)]\n    (take len (drop (mod n len) (cycle ls)))))","user":"56761ab1e4b05957ce8c6154"},{"code":"(fn f [off v ] \n     ( let [ lenv (count v )\n            mo (mod off lenv)]\n       ( take lenv \n       ( drop mo (cycle v)))))","problem":44,"user":"4f030775535dcb61093f6a43"},{"problem":44,"code":"(fn rotate [shift coll]\n  (let [len (count coll)\n        rotation #(into (vec (drop % coll)) (vec (take % coll)))]\n    (rotation (rem (+ len (rem shift len)) len))))","user":"5ed52854e4b016b56eae05d2"},{"problem":44,"code":"(fn [n vec]\n  (let [c (count vec)\n        n (mod n c)]\n    (->> (concat vec vec)\n         (drop n)\n         (take c))))","user":"554b7056e4b0a04f79299583"},{"problem":44,"code":"(fn [nbl li] \n\t(loop [n nbl l (apply vector li) ]\n\t\t(cond \n\t\t\t(= n 0) l\n\t\t\t(< n 0) (recur (inc n) (concat [(last l)] (butlast l) ) )\n\t\t\t(> n 0) (recur (dec n) (concat  (rest l) [(first l)] ) )) ) )","user":"54be7e93e4b0ed20f4ff6eed"},{"problem":44,"code":"(fn [op v]\n  (cond\n    (= op 0) v\n    (> op 0) (recur (dec op) (concat (rest v) (vector (first v))))\n    :else (recur (inc op) (cons (last v) (drop-last v)))))","user":"5989e080e4b021a7a535fed6"},{"code":"(comp (partial apply concat) \n      (juxt (partial apply drop) \n            (partial apply take)) \n      (juxt (comp (partial apply mod)\n                  (juxt first \n                        (comp count second)))\n            second)\n      list)\n\n#_\n\n(fn [n s] (#(concat (drop % s) (take % s)) (mod n (count s))))","problem":44,"user":"4ef49c2c535dced4c769f238"},{"code":"(fn [x col]\n  (let [cnt (count col)\n        rtf (mod x cnt)]\n    (take cnt (drop rtf (take (* 2 cnt) (cycle col))))))","problem":44,"user":"51eadb98e4b0f1f103a0d153"},{"code":"(fn [n coll]\n  (let [cnt (count coll)]\n      (take cnt (drop (mod n cnt)\n                      (cycle coll)))))","problem":44,"user":"529b5301e4b02ebb4ef7509f"},{"problem":44,"code":"(fn [n cl] \n  (let [\n        ind (mod n (count cl))\n        spl (split-at ind cl)]\n     (apply concat (reverse spl)))\n)","user":"558fec41e4b0277789237666"},{"code":"(fn [n alist]\n  (if (< n 0)\n    (recur (+ n 1) (cons (last alist) (butlast alist)))\n    (if (= n 0) \n      alist\n      (recur (- n 1) (conj (vec (rest alist)) (first alist ))))))","problem":44,"user":"4ff36af7e4b0678c553fc352"},{"code":"(fn [n lst]\r\n  (let [x (mod n (count lst)) y (drop x lst) z (take x lst)]\r\n    (concat y z)))","problem":44,"user":"4fbef9a6e4b081705acca316"},{"code":"(fn [n s]\n  (let [n (rem n (count s))]\n    (cond\n     (>= n 0) (concat (drop n s) (take n s))\n     :else (concat (take-last (unchecked-negate n) s) (drop-last (unchecked-negate n) s)))))","problem":44,"user":"51b41150e4b0f094dd986fac"},{"problem":44,"code":"(fn [%1 %2]\n  (let [n (rem %1 (count %2))]\n    (if (pos? n)\n      (concat (drop n %2) (take n %2))\n      (concat (take-last (unchecked-negate n) %2) (drop-last (unchecked-negate n) %2)))))","user":"5a59a76fe4b05d388ecb6c98"},{"problem":44,"code":"(fn [n c]\n(let [s (split-at (mod n (count c)) c)]\n(concat (second s) (first s)))\n)","user":"5c46e6dde4b0e06e1360a3a7"},{"problem":44,"code":"(fn [nl l] (let [n (mod nl (count l))]\n             (letfn[\n                   (sp [li nt]\n                       (let [spl (split-at nt li)](concat (last spl) (first spl))))\n                   ]\n               (sp l n) \n             ))\n  )","user":"54edcf96e4b024c67c0cf866"},{"code":"(fn [n l](\n  let [i (mod n (count l))]\n  ((fn rota [r l]\n      (let [ug (split-at r l)]\n         (concat (second ug) (first ug))\n      )\n     ) i l )\n  ))","problem":44,"user":"4fcf5292e4b03432b189f40e"},{"problem":44,"code":"(fn [n s]\n   (flatten (conj [] (drop (mod n (count s)) s) (take (mod n (count s)) s))))","user":"536d24ece4b0fc7073fd6e54"},{"problem":44,"code":"(fn [n c]\n  (let [cc (concat c c) m (count c)]\n    (->> cc (drop (mod (+ n m) m)) (take m))))","user":"5a085dfde4b01bb0ae8afdf4"},{"code":"(fn [n coll]\n  (let [l (count coll)\n        i (+ l l n)]\n    (drop i (take (+ i l) (cycle coll)))))","problem":44,"user":"51cdd3f0e4b0e42293a2254b"},{"code":"(fn [x c]\n  ((fn [n c]\n     (if (< n 0)\n       (into (vec (take-last (- 0 n) c))\n             (drop-last (- 0 n) c))\n       (into (vec (drop n c))\n             (take n c))\n       ))\n   (mod x (count c)) c))","problem":44,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":44,"code":"(fn rotate-xs [dir xs]\n  (let [ln (count xs)]\n    (if (pos? dir)\n      (take ln (drop dir (cycle xs)))\n      (take ln (drop (- ln (mod (* dir -1) ln)) (cycle xs))))))","user":"548018d1e4b0c51c1f4d7326"},{"problem":44,"code":"(fn rotate [n, v]\n  (take (count v) (drop (mod n (count v))(concat v v))))","user":"569ef93de4b0542e1f8d148b"},{"problem":44,"code":"(fn [d l]\n  (loop [li (if (> d 0) l (reverse l)) g (max d (- d))]\n    (if (zero? g)\n      (if (> d 0) li (reverse li))\n      (recur (concat (rest li) (list (first li))) (dec g)))))","user":"52979551e4b02ebb4ef75043"},{"problem":44,"code":"(fn [r s]\n        (let [n (count s)\n              r (mod r n)]\n          (if (pos? r)\n            (lazy-cat (drop r s) (take r s))\n            (lazy-cat (drop (+ n r) s)\n                      (take (+ n r) s)))))","user":"546c4377e4b00cfc9eacc177"},{"code":"(fn rotate-sequence\n  [n items]\n  (let [r (mod n (count items))]\n    (apply concat (reverse (split-at r items)))))","problem":44,"user":"511720eae4b0063b4e3e16da"},{"code":"(fn rotate [n l]\n   (let [[h t] (split-at (mod n (count l)) l)]\n     (concat t h)))","problem":44,"user":"4ecaaa25535d6d7199dd3708"},{"problem":44,"code":"(fn [n sequ]\n  (let [func (fn [x lis]\n               (loop [result lis\n                      end (count lis)\n                      poz 0]\n                 (if (= end 0)\n                   result\n                   (recur (assoc result (rem (+ poz x) (count lis))\n                            (nth lis poz))\n                          (dec end)\n                          (inc poz)))))]\n    (if (neg? n)\n      (func (- n) (vec sequ))\n      (reverse (func n (vec (reverse sequ)))))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":44,"code":"(fn f1 [n s]\n\t\n\t\t(take (count s) (drop (mod n (count s)) (apply concat (repeat s))))\n\t\n\t\t\t)","user":"54ff6084e4b07d26eda61d50"},{"problem":44,"code":"(fn [n s]\n    (if (> n 0)\n        (concat \n          (drop (mod n (count s)) s)\n          (take (mod n (count s)) s)\n          )\n        (concat\n          (take-last (mod (* -1 n) (count s)) s)\n          (drop-last (mod (* -1 n) (count s)) s)\n      )\n        )\n    )","user":"55c3149de4b0e31453f64987"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n       (concat (drop n %2) (take n %2)))","user":"60ab1536e4b00e9e6653c47e"},{"problem":44,"code":"(fn\n  [n s]\n  (let [num (mod n (count s))\n        lst (split-at num s)]\n       (concat (second lst) (first lst))))","user":"56df6498e4b0ca2494a095f8"},{"code":"(fn [n c]\n  (let [l (count c) x (mod ((fn [y] (if (> y 0) y (- 0 y))) n) l)]\n(if (> n 0)\n(concat ((fn [coll i]\n  (loop [i i coll coll]\n    (if (> i 0) (recur (dec i) (next coll)) coll))) c x) (take x c))\n(concat ((fn [coll i]\n(loop [i i coll coll]\n  (if (> i 0) (recur (dec i) (next coll))\ncoll))) c (- l x)) (take (- l x) c)))))","problem":44,"user":"4eb27fad535d7eef3080734a"},{"code":"(fn [k s]\n  (let [n (count s)\n        k (-> k (mod n) (+ n) (mod n))]\n    (concat (drop k s) (take k s))\n  )\n)","problem":44,"user":"519b2570e4b0ac1b7dced6a3"},{"problem":44,"code":"(fn [n coll] (let [c (count coll) n (mod n c)] (take c (drop n (cycle coll)))))","user":"4e41a04e535dc968683fc49e"},{"code":"(fn[n l](let [n (mod n (count l))\n              n (if (< n 0) (* -1 n) n)]\n(concat (drop n l) (take n l))\n))","problem":44,"user":"5017eface4b02f523d7cc5e7"},{"problem":44,"code":"#(->> %2\n          repeat\n          (apply concat)\n          (drop (mod %1 (count %2)))\n          (take (count %2)))","user":"58c4b11ae4b021aa9917ed2c"},{"code":"(fn [n coll]\n  (let [d (mod n (count coll))\n        [a b] (split-at d coll)]\n    (concat b a)))","problem":44,"user":"4e399685535deb9a81d77f40"},{"problem":44,"code":"(fn rot [n xs & args]\n\t(cond (empty? args) (rot n xs n)\n\t\t  (= (first args) 0) xs\n\t\t  (< (first args) 0) (rot (+ (count xs) n) xs)\n\t\t  true (rot n (concat (rest xs) [(first xs)]) (dec (first args)))))","user":"5583888ae4b05c286339e117"},{"problem":44,"code":"(fn [n coll]\n  (let [len (count coll)\n        wrapped (rem n len)\n        idx (if (> 0 wrapped) (+ len wrapped) wrapped)\n        [post pre] (split-at idx coll)]\n    (concat pre post)))","user":"5b500215e4b02d533a91bce2"},{"code":"(fn shift [n coll]\n   (concat (drop (mod n (count coll)) coll)\n           (take (mod n (count coll)) coll)))","problem":44,"user":"516282c3e4b0e6d3c4734711"},{"problem":44,"code":"(fn [n xs]\n  (let [len (count xs)\n        nn (mod n len)]\n    (concat (drop nn xs) (take nn xs))))","user":"5b9db58be4b0c0b3ffbd4b41"},{"code":"(fn rots [x s] (let [i (mod x (count s))] \n                  (concat (drop i s) (take i s))\n                  ))","problem":44,"user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":44,"code":"(fn rotate [start sequence]\n  (let [size (count sequence)]\n    (loop [current_point 0 result '()]\n      (if (>= current_point size)\n        (reverse result)\n        (recur (+ current_point 1) (conj result (nth sequence (mod (+ current_point start)  size))))))\n    )\n  )","user":"56826c2fe4b0945ebc182a92"},{"problem":44,"code":"#(let [[x y] (split-at (mod % (count %2)) %2)]\n       (concat y x))","user":"531c7bdde4b08068f379eda2"},{"problem":44,"code":"(fn [i coll]\n  (let [i (rem i (count coll))]\n  \t(if (neg? i)\n      (flatten [(take-last (- i) coll) (drop-last (- i) coll)])\n   \t  (flatten [(drop i coll) (take i coll)]))))","user":"567e0180e4b05957ce8c61cf"},{"problem":44,"code":"(fn rotate-seq [n xs]\n  (cond\n    (> n 0) (rotate-seq (dec n) (concat (rest xs) [(first xs)]))\n    (< n 0) (rotate-seq (inc n) (cons (last xs) (butlast xs)))\n    :else (seq xs)))","user":"5e8f87c7e4b0cb0169546342"},{"problem":44,"code":"(fn my-rotate\n  [times items]\n  (let [take-time (mod times (count items))]\n    (concat (drop take-time items) (take take-time items))))","user":"5dd25ca8e4b0948ae9d9ad55"},{"code":"(fn [n xs]\n    (let [length (count xs),\n          to-rot (rem n length)\n          to-drop (if (>= to-rot 0) to-rot (+ length to-rot))]\n        (take length\n            (drop to-drop\n                (apply concat (repeat xs))))))","problem":44,"user":"517bf28de4b07ef0e56148d5"},{"problem":44,"code":"#(let [pivot (->> (count %2) (mod %1))] \n   (->>\n     (split-at pivot %2)\n     (reverse)\n     (apply concat)\n     )\n   )","user":"5b118b7be4b0cc2b61a3be34"},{"problem":44,"code":"(fn rotate [n coll]\n  (take (count coll) (drop (mod n (count coll)) (cycle coll)))\n  )","user":"5959c72ae4b066ee0a44afac"},{"code":"(fn [n seqs]\n    (let [m (mod n (count seqs))]\n         (concat (drop m seqs) (take m seqs))))","problem":44,"user":"4fc6e1a8e4b0ee37620e181d"},{"problem":44,"code":"(fn rotate\n  [n seq]\n  (let [cnt (count seq)]\n    (take cnt (drop (mod n cnt) (concat seq seq))))\n  )","user":"5dfe3928e4b0a607a9a45d04"},{"code":"#(let [to-take (count %2)\n       to-drop (mod % to-take)]\n   (take to-take (drop to-drop (cycle %2))))","problem":44,"user":"505345d9e4b0517ede0d0a06"},{"problem":44,"code":"(fn [n coll]\n  (let [parts (split-at (mod n (count coll)) coll)]\n    (concat (second parts) (first parts))))","user":"59bcbfd0e4b0a024fb6ae419"},{"problem":44,"code":"(fn [n s]\n    (let [k (mod n (count s))]\n        (concat (drop k s) (take k s))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"code":"(fn [n seq]\n  (let [k (mod n (count seq))]\n    (concat (drop k seq) (take k seq))))","problem":44,"user":"4e5411e8535d8a8b8723a279"},{"code":"#(let [[x y] (split-at (mod %1 (count %2)) %2)]\n    (concat y x))","problem":44,"user":"4e8516d0535db62dc21a62e8"},{"code":"(fn rotate [n s]\n  (letfn [ \n    (rotate-1-left [s] \n      (conj (vec (rest s)) (first s)))\n    (rotate-1-right [s] \n      (cons (first (reverse s)) (subvec (vec s) 0 (dec (count s)))))]\n    (if (= n 0)\n      s\n      (if (> n 0)\n        (recur (dec n) (rotate-1-left s))\n        (recur (inc n) (rotate-1-right s))))))","problem":44,"user":"4e8f4f64535d65386fec2149"},{"problem":44,"code":"(fn rot [dist coll]\n  (let [radix (mod dist (count coll))]\n    (concat (drop radix coll) (take radix coll))))","user":"5dfeaf25e4b0a607a9a45d0b"},{"code":"(fn [n s] (let [size (count s)\n                rot (mod (if (>= n 0) n (+ size n)) size)] (concat (drop rot s) (take rot s) ) )  )","problem":44,"user":"51729002e4b044b2ef48a850"},{"problem":44,"code":"#(let [ct (count %2) chop (mod (Math/abs %1) ct)]\n   (if (> %1 0)\n     (concat (drop chop %2) (take chop %2))\n     (concat (drop (- ct chop) %2) (take (- ct chop) %2))))\n\n;best alternative solution\n; #(take (count %2) (drop (mod % (count %2)) (cycle %2)))","user":"55e01f4ee4b050e68259b406"},{"code":"(fn\t[n s]\n\t(let [c (count s)]\n\t  (take c\n\t\t(drop (+ (rem n c) c) (cycle s)))))","problem":44,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn [n coll]\n  (let [nn (mod n (count coll))]\n    (concat (drop nn coll) (take nn coll))))","problem":44,"user":"512474ede4b02c3f2a072cce"},{"code":"#(loop [n %1 v %2] (if (> n 0)\n                     \n                     (recur (dec n) (conj (vec (next v)) (first v)))\n                     \n                     (if (< n 0)\n                       (recur (inc n) (conj (take (dec (count v)) v) (take-last 1 v)))\n                       (seq (flatten v))\n                     )\n                    ))","problem":44,"user":"50e008d1e4b061dbdced722a"},{"code":"#(let [[l r] (split-at (mod % (count %2)) %2)]\n  (concat r l))","problem":44,"user":"4f727023e4b07046d9f4f035"},{"problem":44,"code":"(fn [shift col]\n           (let [shift-left #(conj (drop-last col) (last col))\n                 shift-right #(conj (vec (rest col)) (first col))]\n             (cond\n               (= shift 0) col\n               (neg? shift) (recur (inc shift) (shift-left))\n               :else        (recur (dec shift) (shift-right)))))","user":"5ea6fe98e4b00a66d4a951b2"},{"code":"(fn rotate\n  [n s]\n  (let [length (count s)\n        b (rem n length)\n        m (if (neg? b) (+ length b) b)\n        sub (take m s)]\n    (concat (drop m s) sub)))","problem":44,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":44,"code":"(fn [n col]\n  (let [breakpoint (mod n (count col))]\n    (concat (drop breakpoint col)\n            (take breakpoint col))))","user":"514a3fa5e4b0829bd132edb6"},{"problem":44,"code":"(fn [n coll] \n  (let [ size (count coll)\n         x ( if (pos? n)\n            (mod n  size)\n            (- size (mod (- n) size)))]\n    (reverse\n     (concat\n      (reverse\n       (take x coll))\n      (reverse\n       (drop x coll))))))","user":"5832be57e4b089d5ab817c86"},{"problem":44,"code":"#(loop [i %1\n         result  %2]\n  \n    (if (= i 0)\n      result\n      (if (< %1 0) \n      (recur (inc i) ( cons (last result) (butlast result)  ))\n      (recur (dec i) ( concat (rest result)  [(first result)]  ))\n      ) ) )","user":"598085e6e4b021a7a535fdd3"},{"problem":44,"code":"#(flatten ((juxt drop take) (mod %1 (count %2)) %2))","user":"55a0e139e4b0acc240e31504"},{"code":"(fn rotate [n seq]\n            (cond (zero? n)\n                  seq\n                  (neg? n)\n                  (recur (inc n) (concat [(last seq)] (butlast seq)))\n                  (pos? n)\n                  (recur (dec n) (concat (rest seq) [(first seq)]))))","problem":44,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":44,"code":"(fn rotate-seq [x y]\n  (cond\n    (< x 0) (rotate-seq (+ x (count y)) y)\n    (> x (count y)) (rotate-seq (- x (count y)) y)\n    :else (concat (nthrest y x) (take x y))))","user":"5d63b06be4b0c9e5857d5025"},{"code":"(fn rotate [n coll]\n  (take (count coll) (drop (mod n (count coll)) (cycle coll))))","problem":44,"user":"4e7f51eb535db966e863cc3f"},{"code":"(fn rotate-seq [n sq]\n  (take (count sq) (drop (mod n (count sq)) (cycle sq))))","problem":44,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":44,"code":"(fn rot [n coll]\n  (let [n (mod n (count coll))]\n    (->> coll\n         (split-at n)\n         (reverse)\n         (apply concat)\n         ))\n  )","user":"60436423e4b02d28681c77a3"},{"code":"(fn [index data] (loop [d data\n                        i (mod index (count data))\n                        x []]\n                   (if (= (count d) (count x))\n                     x\n                     (recur d\n                            (if (< i (dec (count d)))\n                              (inc i)\n                              0)\n                            (conj x (nth d i))))))","problem":44,"user":"50214ffae4b0ef1d2d4433bc"},{"problem":44,"code":"(fn rt [n s]\n  (let [c (count s)\n        l (mod n c)]\n    (loop [r s\n           i l]\n      (if (> i 0)\n        (recur (concat (rest r) [(first r)]) (dec i))\n        r))))","user":"57addbcce4b0b8559636fca3"},{"code":"(fn [n v] (let [begin (mod n (count v))] \n            (concat (drop begin v) (take begin v))))","problem":44,"user":"5356e569e4b04ce2eb3ed272"},{"problem":44,"code":"(fn rotate [pos col]\n  (if (neg? pos)\n    (rotate (- (count col) (* -1 pos)) col)\n    (if (pos? (- (count col) pos))\n    (concat (drop pos col) (take pos col))\n      (rotate (- pos (count col)) col))))","user":"57a2328ae4b0c3d858beb8f8"},{"problem":44,"code":"(fn [x coll] (apply concat (reverse (split-at (mod x (count coll)) coll))))","user":"54e3bd3fe4b024c67c0cf7e0"},{"code":"(fn [rot s]\n  (if (pos? rot)\n    (take (count s) (drop rot (cycle s)))\n    (reverse (take (count s) (drop (- rot) (cycle (reverse s)))))))","problem":44,"user":"4fc13433e4b081705acca32b"},{"code":"(fn rotx [ x li ] (reduce (fn rot [x y] (into (list (first x )) (reverse(rest x)) ) ) li (if (> x 0) (range 0 x)  (range x 1))  ) )","problem":44,"user":"4e8d5edd535d65386fec2134"},{"problem":44,"code":"#(let [r (mod %1 (count %2))]\n\t(concat (drop r %2) (take r %2))\n)","user":"57a9db97e4b0b8559636fc5b"},{"problem":44,"code":"(fn [x s]\n  (let [c (count s)]\n    (take c (nthrest (cycle s) (mod x c)))))","user":"59301509e4b072a2710fcfd6"},{"code":"(fn [n c] (let [n (mod n (count c))] (concat (drop n c) (take n c))))","problem":44,"user":"51c73959e4b07ef393169e3e"},{"code":"#(let [[h t] (split-at (mod % (count %2)) %2)]\n   (concat t h))","problem":44,"user":"4e7dd982535db169f9c796ee"},{"code":"(fn [n coll]\n  (let [nn (if (neg? n) (- n) n)\n        lshift #(concat (rest %) [(first %)])\n        rshift #(cons (last %) (drop-last %))]\n    ((apply comp (repeat nn (if (neg? n) rshift lshift))) coll)))","problem":44,"user":"516ea313e4b06aac486e5b2c"},{"problem":44,"code":"(fn [x y]\n  (let [n (count y) r (rem x n)]\n    (apply #(concat %2 %1) (split-at (if (<= 0 r) r (+ n r)) y))))","user":"58f5b58ae4b0438e51c2cedc"},{"code":"(fn rotate [n v]\n  (cond \n    (> n 0) (recur (dec n) (into (vec (drop 1 v)) (take 1 v)))\n    (< n 0) (recur (inc n) (into (take (dec (count v)) v) [(last v)]))\n    (= n 0) v))","problem":44,"user":"4e28120f535deb9a81d77efa"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [length (count coll)\n        skip (some #(when (pos? %) %) \n                   (iterate #(+ length %) n))]\n    (->> coll\n         cycle\n         (drop skip)\n         (take length))))","user":"608256d7e4b0736b099e42da"},{"problem":44,"code":"(fn [places xs]\n  (let [\n        real-places (rem places (count xs))\n        shifted (if (< real-places 0) (+ real-places (count xs)) real-places)\n        ]\n    (concat (drop shifted xs) (take shifted xs))))","user":"5de48f92e4b0948ae9d9ae07"},{"code":"#(concat (nthrest %2 (mod %1 (count %2))) (take (mod %1 (count %2)) %2))","problem":44,"user":"50fe91c1e4b03cd852b4e84e"},{"code":"(fn [n x]\n  (if (neg? n)\n    (recur (+ (count x) n) x)\n    (if (> n (count x))\n      (recur (- n (count x)) x)\n      (let [x (split-at n x)]\n        (concat (last x) (first x))))))","problem":44,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"#(concat (drop (mod %1 (count %2)) %2 ) (take (mod %1 (count %2)) %2))","problem":44,"user":"5220909fe4b0e6a83c89259f"},{"code":"(fn  [n lst]\n (if (neg? n)  (reduce (fn [a b] (concat (list (last a)) (butlast a))) lst (range (* -1 n)))\n                        \n (reduce (fn [a b] (concat (rest a) (list (first a)))) lst (range n)))\n  )","problem":44,"user":"531902b1e4b08068f379ed77"},{"code":"(fn rotate [offset vs]\n  (let [offset (mod offset (count vs))\n        [after before] (split-at offset vs)]\n    (concat before after)))","problem":44,"user":"52be58d7e4b07a9af579231d"},{"problem":44,"code":"(fn rotate [k coll] \n    (cond \n      (> k (count coll)) (rotate (rem k (count coll)) coll)\n\n      (> k 0) (flatten (cons (drop k coll) \n                                     (take k coll)))\n      :else (reverse (rotate (- k) (reverse coll)))))","user":"5de45493e4b0948ae9d9ae05"},{"code":"; After seeing others' solutions and checking what mod does with negative numbers:\n; #(let [s %2 cnt (count %2) n (mod %1 cnt)] (concat (drop n s) (take n s)))\n; don't really need cnt though...\n\n#(let [s %2\n        cnt (count %2)\n        n %1]\n    (let [n (if (< n 0) (mod n (- 0 cnt)) (mod n cnt))]\n      (if (< n 0) \n        (concat (take-last (- 0 n) s) (take (+ (count s) n) s))\n        (concat (take-last (- (count s) n) s) (take n s))\n        ))\n    )","problem":44,"user":"5070e31ee4b0e3170b5a8678"},{"problem":44,"code":"(fn my-rotate [n l]\n  (let [x (#(if (neg? %) (+ (count l) %) %) (mod n (count l)))]\n    (concat (drop x l) (take x l))))","user":"5a621702e4b0512ff01cd983"},{"code":"(fn [n col]\n  (cond (= 0 n) col\n        (> n 0)\n        (recur (dec n) (conj (vec (rest col)) (first col)))\n        :else\n  (recur (inc n) (cons (last col) (vec (butlast col))))))","problem":44,"user":"4ef992c8535dced4c769f268"},{"problem":44,"code":"#(apply concat (reverse ( split-at (mod %1 (count %2)) %2)))","user":"57887de2e4b0ebec4cfb751c"},{"problem":44,"code":"(fn [n coll]\n   (let [x (mod n (count coll))]\n     (concat (drop x coll) (take x coll))))","user":"585dbe41e4b0f14aab7c879f"},{"problem":44,"code":"(fn rotation \n  [number seq-]\n   (if (> number 0)\n       (rotation (- number 1) (rest (conj (vec seq-) (first seq-))))\n       (if (< number 0)\n         (rotation (+ number 1) (cons (last seq-) (drop-last seq-)))     \n          seq-    \n         \n         )\n     )\n)","user":"556cd549e4b09a3098a52503"},{"problem":44,"code":"(fn rotate-coll [p coll]\n  (let [len (count coll)\n        x (mod p len)]\n    (take len (drop x (cycle coll)))))","user":"6020365ae4b0bf4ca6b10960"},{"problem":44,"code":"#(let [x %1, coll %2]\n                    (cond\n                      (pos? x)\n                      (let [y (- (count coll) (rem x (count coll)))]\n                        (println y)\n                        (concat (take-last y coll) (drop-last y coll))\n                        )\n                      :else\n                      (let [y (rem (- x) (count coll))]\n                        (println y)\n                        (concat (take-last y coll) (drop-last y coll))\n                        )\n                      )\n                    )","user":"5cf72682e4b0b71b1d808a68"},{"problem":44,"code":"#(let [rot (mod % (count %2))]\n    (concat (drop rot %2) (take rot %2)))","user":"54926752e4b0b312c081ff44"},{"code":"(fn  [shft acoll]\n  (let [lshft (mod shft (count acoll) )]\n    (if (zero? lshft) acoll\n      (recur (dec lshft) (concat (rest acoll) (list (first acoll)))\n             )\n  ))\n)","problem":44,"user":"5135a74ae4b04ac1f358dd46"},{"problem":44,"code":"(fn [num coll]\n  (let [amount (mod num (count coll))]\n    (concat (drop amount coll) (take amount coll))))","user":"572b73d0e4b0cd1946bd0f3a"},{"code":"(fn [places s]\n              (into (take (mod places (count s)) s) (reverse (drop (mod places (count s)) s))))","problem":44,"user":"4e08fb7a535d04ed9115e7ac"},{"problem":44,"code":"#(let [cc (count %2) mn (mod %1 cc)] (take cc (drop mn (cycle %2))))","user":"55d50a38e4b0e31453f64a80"},{"code":"#(flatten\n  (reverse\n   (split-at\n    (mod %1 (count %2))\n    %2)))","problem":44,"user":"50afdf00e4b0c3f5ed5c29a5"},{"problem":44,"code":"(fn [n coll]\r\n     (flatten (let [n (mod n (count coll))]\r\n                (conj (take n coll) (drop n coll)))))","user":"53acca34e4b047364c044460"},{"problem":44,"code":"(fn rotate\n  [shift coll]\n  (cond\n    (> shift (count coll)) (rotate (count coll) (rotate (- shift (count coll)) coll))\n    (< shift (- (count coll))) (rotate (- (count coll)) (rotate (+ shift (count coll)) coll))\n    (pos? shift) (concat (drop shift coll) (take shift coll))\n    (neg? shift) (concat (take-last (- shift) coll) (drop-last (- shift) coll))))","user":"5a3c06fce4b001c08efc0cdd"},{"problem":44,"code":"(fn rotate-seq\n  [n coll]\n  (let [r (mod (Math/abs n) (count coll)) ] \n    (cond (=  r 0) coll\n      (> n 0) (concat (drop r coll) (take r coll))\n      :else  (concat (take-last r coll) (drop-last r coll)))))","user":"56c3aca0e4b05cc29241ee90"},{"problem":44,"code":"(fn my-rotate [offset coll]\n  (let [pos-offset (mod offset (count coll))\n        splitted (split-at pos-offset coll)\n        switched [(second splitted) (first splitted)]]\n    (apply concat switched)))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"#(flatten ((juxt last first) (split-at (mod %1 (count %2)) %2)))","problem":44,"user":"4f75469ee4b0fbe0118ec55a"},{"problem":44,"code":"(fn [num seq]\n   (let [rev-seq (drop (mod num (count seq)) seq)]\n     (concat rev-seq (take (- (count seq) (count rev-seq)) seq))))","user":"559fb147e4b0acc240e314ea"},{"code":"(fn [t s]\n  (let [s-size (count s)\n        real-t (rem (+ (* 2 s-size) t) s-size)\n        rotate #(conj (into [] (rest %)) (first %))]\n    (nth (iterate rotate s) real-t)))","problem":44,"user":"4dad76588e77d6ed63f12a44"},{"problem":44,"code":"#(let [length (count %2)] \n\t(take length (drop (mod % length) (cycle %2))))","user":"59fa5773e4b0ca45a743a35e"},{"problem":44,"code":"(fn rot [x col] \n  (let [length (count col)\n        pos-x (if (neg? x) (+ length x) x)\n        mod-x (mod pos-x length)] \n    (concat (drop mod-x col) (take mod-x col))))","user":"58740c18e4b01531a375ea49"},{"code":"(fn [n coll]\r\n  (if (>= n 0) \r\n    (let [npos (if (> n (count coll)) (- n (count coll)) n )]\r\n      (concat (drop npos coll) (drop-last (- (count coll) npos) coll)))\r\n    (let [nneg (if (> (count coll) (- n)) (- n) (- (+ (count coll) n)))]\r\n      (concat (drop (- (count coll) nneg) coll)(drop-last  nneg coll)))))","problem":44,"user":"4f11b078535d64f603146422"},{"problem":44,"code":"(fn [on xs]\n         (let [n (mod on (count xs))]\n          (concat (drop n xs) (take n xs))) \n          )","user":"533c2605e4b0e30313ee6cd7"},{"code":"#(let [n (mod %1 (count %2))]\n   (concat (drop n %2)\n           (take n %2)))","problem":44,"user":"52d2ca1ce4b099d49816f0b4"},{"code":";(fn [n xs]\n;  (let [cnt (count xs)\n;        n (mod n (count xs))\n;        xs (cycle xs)]\n;    (let [needed (if (pos? n) (+ n cnt) (+ n (* 2 cnt)))]\n;      (drop (- needed cnt) (take needed xs)))))\n  \n; 1 2 3 4 5 1 2 3 4 5\n;     ^ ^ ^ ^ ^         3..7\n\n; 1 2 3 4 5 1 2 3 4 5\n;       ^ ^ ^ ^ ^       4..8\n\n(fn [n xs]\n  (let [n (mod n (count xs))]\n    (concat (drop n xs) (take n xs))))","problem":44,"user":"5312cdaae4b08068f379ed03"},{"problem":44,"code":"(fn rotate [n collection]\n  (loop [i n\n         result collection]\n    (if (= i 0)\n      result\n      (if (< i 0)\n        (recur (inc i) (concat (vector (peek (vec result))) (pop (vec result))))\n        (recur (dec i) (concat (rest result) (vector (first result))))))))","user":"56a3c89ae4b0542e1f8d14cf"},{"problem":44,"code":"(fn rotate [n col]\n;  (defn rotate-left [col]\n;    (concat (rest col) (list (first col))))\n;  (defn rotate-right [col]\n;    (concat (list (last col)) (drop-last col)))\n  (letfn [(rotate-left [col] (concat (rest col) (list (first col))))\n          (rotate-right [col] (concat (list (last col)) (drop-last col)))]\n  (cond\n    (= n 0) col\n    (> n 0) (rotate (- n 1) (rotate-left col))\n    (< n 0) (rotate (+ n 1) (rotate-right col)))))","user":"562e05e0e4b0a45d2ff83023"},{"code":"(fn rotate [i l]\r\n  (let [j (mod i (count l))]\r\n    (concat (drop j l) (take j l))))","problem":44,"user":"4e9e12b2535dbda64a6f6b92"},{"problem":44,"code":"(fn [n l]\n  (let\n   [n' (if (neg? n)\n         (+ (count l) (rem n (count l)))\n         (rem n (count l)))]\n    (concat (drop n' l) (take n' l))))","user":"56050f06e4b08b23635d3161"},{"problem":44,"code":"(fn [s x]\n  (let [c (count x)\n        shift (mod (if (< s 0) (+ c s) s) c)\n        head (drop shift x)\n        tail (take shift x)]\n    (concat head tail)))","user":"5c04464ee4b0bdcf453d167d"},{"problem":44,"code":"(fn [n coll]\n   (let [len (count coll)\n         start (loop [s (+ n len)]\n                 (if (> s 0) s (recur (+ s len))))]\n     (map #(nth coll (rem % len)) (range start (+ start len)))))","user":"5b0fe3f4e4b0cc2b61a3be14"},{"code":"(fn [n x]\n  (take (count x)\n        (drop (mod n (count x))\n              (cycle x))))","problem":44,"user":"4f038bcd535dcb61093f6b1d"},{"code":"(fn [x y]\n  (let [cnt (mod x (count y))]\n   (concat\n    (drop cnt y)\n    (take cnt y))))","problem":44,"user":"53468f6ce4b084c2834f4a3f"},{"code":"(fn [n coll]\n  (let [len (count coll)]\n  (if (>= n 0) \n    (let [m (rem n len)] (concat (drop m coll) (take m coll)))\n    (let [p (rem (* n -1) len) m (rem (- len p) len)] (concat (drop m coll) (take m coll)))\n    )))","problem":44,"user":"50dade7be4b02e6ac9592c70"},{"problem":44,"code":"(fn [n lst] \n  (cond\n   (= n 0) lst\n   (> n 0) (recur (dec n) (concat (rest lst) (list (first lst))) )\n   (< n 0) (recur (inc n) (concat (list (last lst)) (butlast lst)) )))","user":"6074df6fe4b069485764de4b"},{"problem":44,"code":"(fn [r c]\n  (let [at (mod (if (< r 0) (+ (count c) r) r) (count c))]\n  \t(let [[f l] (split-at at c)]\n    \t(into f (reverse l)))))","user":"5530b827e4b076ab5578f818"},{"problem":44,"code":"(fn [n coll] (flatten (reverse (split-at (mod n (count coll)) coll))))","user":"5703cd50e4b08d47c97781fc"},{"code":"(fn [input y]\n  (let [x (rem input (count y)) t (if (> x 0)\n        (- (count y) x)\n        (* -1 x))\n        z (if (<= x 0)\n            (- (count y) (* -1 x))\n        x)\n        ]\n      (concat (take-last t y)\n              (take z y))\n)\n)","problem":44,"user":"4f00f997535dcb61093f6a34"},{"code":"(fn [x y]\r\n  (let [x (mod x (count y) )\r\n        x (if (neg? x)\r\n                (+ (count y) x)\r\n                x)]\r\n  (flatten(reverse (split-at x y)))))","problem":44,"user":"4de18de7535d08e6dec9fde8"},{"code":"(fn rotate\n  [n xs]\n  (if \n    (= n 0)\n    xs\n    (if \n      (> n 0)\n      (rotate (dec n) (concat (rest xs) (list (first xs))))\n      (rotate (inc n) (concat (list (last xs)) (butlast xs)))\n)))","problem":44,"user":"536aa86de4b0243289761eb1"},{"problem":44,"code":"(fn rot [n x] (apply concat (reverse (split-at (mod n (count x)) x) ) ) )","user":"563b559ee4b0bfe05bf1180d"},{"code":"(fn [r coll]\n  (let [parts\n    (split-at (mod r (count coll)) coll)]\n    (concat (last parts) (first parts))))","problem":44,"user":"4ec5d40d535d6d7199dd36b9"},{"problem":44,"code":"(fn my-rotate [n s]\n  (apply concat\n         (reverse (split-at (mod n (count s)) s))))","user":"575b3e9be4b02ea11479935b"},{"problem":44,"code":"(fn [n coll]\n    (let [idx-particion (mod n (count coll))\n          nuevo-inicio (nthrest coll idx-particion)\n          nuevo-fin (take idx-particion coll)]\n      (concat nuevo-inicio nuevo-fin)))","user":"5d52ea90e4b0776584bd6f6c"},{"problem":44,"code":"(fn [x coll]\n   (let [n (mod x (count coll))]\n     (apply concat (reverse\n                    (split-at n coll)))))","user":"591072e0e4b0163c97b36ebc"},{"problem":44,"code":"#(take (count %2) (drop (mod %1 (count %2)) (flatten (repeat 2 %2))))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":44,"code":"(fn [offset coll]\n  (let [coll-size (count coll)\n        offset-pos (mod offset coll-size)]\n    (take coll-size (drop offset-pos (cycle coll)))))","user":"53286f84e4b09d4e7a9b5505"},{"problem":44,"code":"(fn [n coll] \n  (let [m (mod n (count coll))]\n    (flatten (cons (drop m coll) (take m coll)))))","user":"536b9d8ae4b0243289761ebe"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [rr (fn [xs]\n             (cons (last xs) (butlast xs)))\n        rl (fn [xs]\n             (concat (rest xs) [(first xs)]))]\n    (cond\n      (= n 0) xs\n      (> n 0) (last (take (inc n) (iterate rl xs)))\n      :else   (last (take (inc (Math/abs n)) (iterate rr xs))))))","user":"57a49951e4b0a966079561e5"},{"problem":44,"code":"(fn f [n v] \n   (let [shift (mod n (count v))]\n        (if (< 0 shift) \n            (concat (drop shift v) (take shift v)) \n            (concat (take-last (- shift) v) (drop-last (- shift) v)))))","user":"5493d908e4b0b312c081ff52"},{"problem":44,"code":"(fn [_n _x] \n  (loop [n _n x (seq _x)]\n    (cond \n     (pos? n) (recur (dec n)  (conj (vec (rest x)) (first x)))\n     (neg? n) (recur (inc n) (conj (drop-last x) (last x)))\n     (zero? n) x\n     )))","user":"57c4e8dce4b05aa3c4741cd7"},{"code":"(fn [x,y] (flatten (reverse (split-at (mod x (count y)) y))))","problem":44,"user":"500b61b1e4b03d00572d2d81"},{"code":"#(apply concat (reverse (split-at\n\t\t\t\t     (if (neg? %)\n\t\t\t\t       (+ (count %2) (rem % (count %2)))\n\t\t\t\t       (rem % (count %2))) %2)))","problem":44,"user":"4ef9c8f9535dced4c769f26b"},{"problem":44,"code":"(fn [i xs] \n  (apply concat (reverse (split-at (mod i (count xs)) xs))))","user":"5ce05561e4b0a17bb84e2b08"},{"problem":44,"code":"(fn\n  [i collection]\n  (let [part (split-at (mod i (count collection)) collection)]\n    (concat (second part) (first part))\n    )\n  )","user":"5aefd746e4b0cc2b61a3bc3d"},{"problem":44,"code":"(fn [n coll] (let [x (mod n (count coll)) inter (partition-all x coll)] (flatten (concat (rest inter) (first inter)))))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"problem":44,"code":"(fn p44-rotate [n c]\n  (let [n (mod n (count c)) c c]\n    (concat (drop n c) (take n c))))","user":"543b12cce4b032a45b86932a"},{"problem":44,"code":"(fn rotate [n col]\n  (take (count col) (drop (if (neg? n)\n                            (- (count col) (mod (- n) (count col)))\n                            (mod n (count col)))\n                          (cycle col))))","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn [n v]\n  (let [x (count v)\n        m (mod n x)]\n    (nth\n     (map (partial take x)\n          (iterate rest (cycle v)))\n     m)))","problem":44,"user":"515f8a0de4b0e2be8aa20bce"},{"code":"(fn rotate [n coll]\n  (if (= n 0)\n    coll\n    (if (> n 0)\n      (rotate (dec n) (seq (conj (apply vector (rest coll)) (first coll))))\n      (rotate (inc n) (cons (last coll) (butlast coll))))))","problem":44,"user":"5356e04fe4b04ce2eb3ed271"},{"problem":44,"code":"#(let [len (count %2)] (->> (concat %2 %2) (drop (mod %1 len)) (take len)))\n\n;#(let [len (count %2)] (take len (drop (mod %1 len) (concat %2 %2))))\n\n;#(let [len (count %2), start (mod %1 len)]\n;   (subvec (vec (concat %2 %2)) start (+ start len)))","user":"567e418fe4b0feffd0d18eb1"},{"code":"#(let [t (mod % (count %2))] \n  (concat (drop t %2) (take t %2)))","problem":44,"user":"4ec16c21535dfed6da9c6dac"},{"code":"(fn [r coll]\n  (reduce #(concat %2 %1) (split-at (mod (+ r (count coll)) (count coll)) coll))\n  )","problem":44,"user":"53778b90e4b06839e8705e36"},{"problem":44,"code":"#(let [len (count %2)\n       n (mod (if (neg? %1) (+ len %1) %1) len)]\n   (concat (drop n %2) (take n %2)))","user":"5929a5f2e4b072a2710fcf09"},{"problem":44,"code":"(fn [shift collection]\n     (let [cnt (count collection) shft (if (> shift 0) shift (- 1 shift))]\n\n           (take cnt (drop shft (cycle collection)))\n\n       )\n\n     )","user":"5f0a4904e4b09a3f05b71805"},{"problem":44,"code":"(fn rotate-seq-better\n  [n coll]\n  (let [i (mod n (count coll))] (concat (drop i coll) (take i coll))))","user":"561ca6ebe4b064ca9f4b169c"},{"code":"(fn rotate [n c]\n   (let [reordered (if (< n 0) (reverse c) c)\n         r (take (count c) (drop (if (< n 0) (- n) n) (concat reordered reordered reordered)))]\n     (if (> n 0)\n       r\n       (reverse r))))","problem":44,"user":"500ea957e4b00fff93030f9b"},{"problem":44,"code":"(fn rotate[n coll]\n  (cond (= n 0) coll\n        (> n 0) (rotate (dec n)\n                        (concat (next coll)\n                                [(first coll)]))\n        :else \t(rotate (inc n)\n                       (concat [(last coll)]\n                               (butlast coll)))))","user":"5564cad5e4b0c656e3ff180f"},{"problem":44,"code":"(fn [n coll]\n  (reduce into [] ((juxt drop take)\n                   (mod n (count coll)) coll)))","user":"5a527beee4b05d388ecb6bfe"},{"problem":44,"code":"(fn [n seq]\n (let [\n       split-at-index (mod n (count seq))\n       [dropped taken] (split-at split-at-index seq)\n      ]\n   (concat taken dropped)))","user":"516064e5e4b009fba0926e26"},{"code":"(fn [x y] (let [z (rem (+ (count y)(rem x (count y)))(count y))](concat (drop z y) (take z y))))","problem":44,"user":"4eb0175b535d7eef30807336"},{"problem":44,"code":"(fn f [n xs]\n  (->> xs\n       (split-at (let [c (count xs)] (rem (+ (rem n c) c) c)))\n       (#(concat (second %) (first %)))))","user":"57adbe7ee4b0b8559636fca0"},{"code":"#(let [len (count %2) cut (rem %1 (count %2)) v (vec %2)]\n    (if (> cut 0)\n  (concat (subvec v cut len) (subvec v 0 cut)) \n        (concat (subvec v (+ len cut) len) (subvec v 0 (+ len cut)))))","problem":44,"user":"4f35e662e4b0e243712b1ec6"},{"problem":44,"code":"(fn [pivot coll]\n  (let [len (count coll)]\n    (take len (drop (mod pivot len) (cycle coll)))))","user":"56481722e4b0284900eef628"},{"code":"(fn rotate [n s]\n  (\n    #(concat (drop % s) (take % s))\n    (mod n (count s))\n    )\n  )","problem":44,"user":"506ab9bae4b05d3b7762c74c"},{"problem":44,"code":"(fn [m col]\n      (let [length (count col)\n            l (cycle col)\n            k (mod m length)]\n        (drop k (take (+ k length) l))))","user":"608e3bf7e4b03bd49d9f36bd"},{"problem":44,"code":"(fn rotate[nn seqq]\n  (let [n (mod nn (count seqq))]\n      (apply concat ((juxt drop take) n seqq)))\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"problem":44,"code":"(fn\n  [n ary]\n  (let [size (count ary)]\n    (if (neg? n)\n      (recur (+ size (rem n size)) ary)\n      (take size (drop n (cycle ary)))\n      )\n\n    )\n  )","user":"563a30d7e4b0bfe05bf117f9"},{"problem":44,"code":"(fn say [n coll]\n    (let [x (Math/abs n) y (rem x (count coll))]\n      (if ( > n 0)\n       (concat (drop y coll) (take y coll))\n       (concat (take-last y coll) (drop-last y coll) )\n      )\n    )\n)","user":"573940e3e4b0cd1946bd106b"},{"code":"(fn [n coll]\n  (let [n (mod n (count coll))]\n    (apply concat (reverse (split-at n coll)))))","problem":44,"user":"4e4ad154535dc968683fc4d1"},{"code":"(fn [n xs] \n  (flatten (reverse \n    (split-at (mod n (count xs)) xs))))","problem":44,"user":"4f92709de4b0dcca54ed6cad"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (let [size (count coll)\n        shift (rem n size)]\n    (take size (drop (- size (- shift)) (cycle coll)))))","user":"597f8c93e4b0dbe32238d0c1"},{"problem":44,"code":"(fn f [x, y]\n  (let \n      [m (cond \n           (< x (* -1 (count y))) ( - (+ 1 (* x -1)) (count y))\n           (< x 0) (+ 1 (* x -1))\n           (< (count y) x) (- x (count y))\n           :else x)]        \n    (loop [s y, x m, mir []]\n      (if (= 0 x)\n        (concat s  mir)\n        (recur (if (seq s)\n                 (rest s)\n                 mir)\n               (dec x)\n               (if (seq s)\n                 (conj mir (first s))\n                 [])\n               )))))","user":"593d6793e4b069cdc2982ba6"},{"code":"#(let [n (mod % (count %2))] (concat (drop n %2) (take n %2)))\n\n;(fn d1 [n col]\n;  (let [num (mod n (count col))]\n;    (concat (drop num col) (take num col))))\n\n;(fn fake [n col]\n;  (if (= n 2) '(3 4 5 1 2)\n;    (if (= n -2) '(4 5 1 2 3)\n;      (if (= n 6) '(2 3 4 5 1)\n;        (if (= n 1) '(:b :c :a)\n;          '(:c :a :b))))))","problem":44,"user":"4fcc103fe4b0ee37620e185f"},{"code":"(fn xxx [n coll]\n  (let [sz \t(count coll)\n        step (fn [n]\n               (if (> 0 n)\n                 (recur (+ n sz))\n                 (if (> n sz)\n                   (recur (- n sz))\n                   n)))\n        nn (step n)]\n    (concat (drop nn coll) (take  nn coll))))","problem":44,"user":"5163a7bbe4b055933a9ca02f"},{"problem":44,"code":"(fn [n coll]\n  (let [first-part (if (> n 0) rest last)\n        last-part (if (> n 0) first butlast)]\n    (loop [n (max  n (- n))\n           acc coll]\n      (if (= 0 n)\n        acc\n        (recur (dec n) (flatten (list (first-part acc) (list (last-part acc)))))))))","user":"572ea970e4b0cd1946bd0f89"},{"problem":44,"code":"(fn [n s]\n         (let [cnt (loop [i n, t (count s)]\n                   (if (and (>= i 0) (< i t))\n                     i\n                     (if (> i 0)\n                       (recur (- i t) t)\n                       (recur (+ i t) t)\n                       )))] \n           (concat (drop cnt s) (take cnt s))))","user":"541ddadbe4b01498b1a71a84"},{"problem":44,"code":"(fn rot-seq [n col] \n  (let [n (mod n (count col))]\n    (concat (drop n col) (take n col))))","user":"55632016e4b0c656e3ff17e4"},{"problem":44,"code":"(fn [x coll]\n  (let [neg-shift (fn [x coll]\n                    (flatten (cons (last coll) (drop-last coll))))\n        pos-shift (fn [x coll]\n                    (flatten (cons (rest coll) (take 1 coll))))]\n    (if (> x 0)\n      (nth (iterate (partial pos-shift x) coll) x)\n      (nth (iterate (partial neg-shift (Math/abs x)) coll) (Math/abs x)))))","user":"5537cbaee4b09218d5f44fd3"},{"problem":44,"code":"(fn [n data]\n  (let [d (mod n (count data))]\n    (concat (drop d data) (take d data))))","user":"5640eb50e4b08d4f616f5eec"},{"problem":44,"code":"(fn [n szn]\n  (let [c (count szn)\n        ]\n    (if (> n 0) \n      (let [g (rem n c)]\n                 (concat (drop g szn)\n                       (take g szn))) \n    (let [g (inc (Math/abs (rem n c)))]\n                 (concat (drop g szn)\n                       (take g szn)))\n      \n      )))","user":"60264d89e4b0d5df2af2222d"},{"code":"(fn [n xs] \n  (let [d (mod n (count xs))] \n    (concat (drop d xs) (take d xs))))","problem":44,"user":"4fcfa1a4e4b03432b189f41a"},{"code":"(fn [a s] \n  (nth \n    (iterate #(apply concat \n                     (reverse (split-at 1 %))) \n                     s) \n             (mod a (count s))))","problem":44,"user":"4e6ebd4a535d5021c1a89610"},{"code":"#(let [t (mod %1 (count %2))] (concat (drop t %2) (take t %2) ))","problem":44,"user":"52cdb7efe4b07d0d72b2737c"},{"problem":44,"code":"(fn [n coll]\n  (let [start (mod n (count coll))]\n    (concat (nthnext coll start) (take start coll))))","user":"58327a08e4b089d5ab817c7c"},{"problem":44,"code":"(fn [x c] (nth (iterate #(concat (rest %) (vector (first %))) c) \n    (mod (if (neg? x) (+ (count c) x) x) (count c))\n))","user":"58e762d3e4b056aecfd47ccc"},{"code":"(fn [n xs]\n  (let [len (count xs)\n        forwards? (pos? n)\n        wraplen (mod (Math/abs n) len)\n        start (if forwards? 0 (- len wraplen))\n        end (if forwards? wraplen len)\n        wraps (subvec (vec xs) start end)]\n    (if forwards?\n      (concat (drop wraplen xs) wraps)\n      (concat wraps (drop-last wraplen xs)))))","problem":44,"user":"52c804dee4b0c2d177d6212b"},{"code":"(fn [r s]\n  (let [r (mod r (count s))]\n    (if (< 0 r)\n      (let [a (vec (take-last (- (count s) r) s))\n            b (vec (take r s))]\n        (into a b))\n      (let [r (- r)\n            a (vec (take-last r s))\n            b (vec (take (- (count s) r) s))]\n        (into a b)))))","problem":44,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":44,"code":"#(let [x (mod %1 (count %2))]\n  (concat (drop x %2) (take x %2)))","user":"56c792ace4b0ed865f9758c4"},{"problem":44,"code":"(fn [n xs] \n   (let [cnt (count xs)\n         modn (mod n cnt)]\n     (flatten (list (take-last (- cnt modn) xs) (take modn xs)))))","user":"5fbe40bce4b03f550f448246"},{"problem":44,"code":"(fn [shift coll]\n  (let [coll-size (count coll)\n        shift (mod (+ coll-size shift) coll-size)]\n    (flatten (cons (drop shift coll) (take shift coll)))))","user":"58a32c21e4b02bd94d917eeb"},{"problem":44,"code":"(fn rotate [n s]\n  (apply concat\n         (reverse (split-at (mod n (count s))\n                            s))))","user":"58e58ae9e4b056aecfd47c9a"},{"problem":44,"code":"(fn [n xs]\n  (letfn [(f [s]\n             (if (neg? n)\n               (concat [(last s)] (butlast s))\n               (concat (rest s) [(first s)])))]\n    (first (drop (Math/abs n) (iterate f (vec xs))))))","user":"555ac933e4b0deb715856e49"},{"code":"#(let [c (count %2)] (flatten (reverse (split-at (mod (+ c %1) c) %2))))","problem":44,"user":"5069c09be4b01dc6af13f837"},{"code":"(fn rotate [howmany myseq]\n  (let [x (mod howmany (count myseq))]\n  (concat (drop x myseq) (take x myseq))\n    )\n  )","problem":44,"user":"4fbd6210e4b081705acca303"},{"code":"(fn [n coll] \n  (let [steps (mod n (count coll))]\n    (concat (drop steps coll) (take steps coll))))","problem":44,"user":"4ed0e139535d44c135fd68c7"},{"problem":44,"code":"(fn rotate-sequence [n s]\n  (let [c (mod n (count s))]\n    (concat (drop c s) (take c s))))","user":"5f0cb4f3e4b0f30dddfb5d4e"},{"code":"(fn [n coll] (let [[a d] (split-at (mod n (count coll)) coll)] (concat d a)))","problem":44,"user":"50fc299ee4b0d10d794c19f2"},{"problem":44,"code":"(fn rotate_seq [n s]\n  (let [len (count s) shift (mod n len)]\n    (concat (drop shift s) (take shift s))  \n))","user":"56df6351e4b0ca2494a095f3"},{"problem":44,"code":"(fn rotate [n xs]\n(let [length (count xs)\nn* (mod n length)]\n(concat (drop n* xs) (take n* xs))))","user":"54cbde61e4b057c6fda3a284"},{"problem":44,"code":"(fn [n items]\n  (let [leave (rem n (count items))\n        len (count items)\n        m (if (>= leave 0) \n            leave \n            (+ len leave))\n        _ (println \"leave:\" leave \" len:\" len \" m:\" m)]\n    (loop [result items initial 0]\n      (if (>= initial m)\n        (seq result)\n        (recur (conj (vec (rest result)) (first result)) (inc initial))))))","user":"55a0d79fe4b0acc240e31502"},{"code":"(fn [dis vtr] (let [len (count vtr)] \n\t\t      (map #(nth vtr %) (map #(mod (+ % dis) len) (range len)))))","problem":44,"user":"4f8b27b3e4b02e764a0a5179"},{"code":"(fn rotate [clicks aSeq]\n  (let [rot-left (fn [aSeq]\n                   (concat (drop 1 aSeq) (take 1 aSeq)))\n        rot-right (fn [aSeq]\n                    (concat (take-last 1 aSeq) (drop-last 1 aSeq)))]\n    (if (<= 0 clicks)\n      (last (take (inc clicks) (iterate rot-left aSeq)))\n      (last (take (inc (* -1 clicks)) (iterate rot-right aSeq))))))","problem":44,"user":"51f04e89e4b0274c496158cd"},{"problem":44,"code":"(fn \n  [n s]\n  (map #(nth s (mod % (count s))) (range n (+ n (count s)))))","user":"5b3de9a7e4b02d533a91bbf4"},{"code":"(fn  [n s]\n    (let [m (mod n (count s))]\n      (concat (drop m s) (take m s))))","problem":44,"user":"53487737e4b084c2834f4a59"},{"code":"#(let [s (mod % (count %2))] \n   (concat (drop s %2) (take s %2)))","problem":44,"user":"51e38568e4b0c611d6113e43"},{"code":"(fn [n lst]\n  (let [n (rem n (count lst))\n        pivot-point (if (neg? n) (+ (count lst) n) n)\n        pieces (split-at pivot-point lst)]\n    (concat (last pieces) (first pieces))\n  )\n)","problem":44,"user":"4e5fdd68535d8ccf87e9fe4f"},{"code":"(fn [i xs]\n  (apply concat\n    (reverse\n      (split-at\n        (mod i (count xs))\n        xs))))","problem":44,"user":"4f61f05ae4b0defedf855fc9"},{"code":"#(let [n (mod %1 (count %2))]   \n   (apply concat (reverse (split-at n %2))))","problem":44,"user":"52cc4fd6e4b07d0d72b27360"},{"problem":44,"code":"(fn [n xs] \n  (->> xs\n    (split-at (mod n (count xs)))\n    (reverse)\n    (apply concat)))","user":"588906a9e4b0f1effa3b772a"},{"problem":44,"code":"(fn rotseq\n  [n s] \n  (let [adjusted (if (< n 0) \n                   (+ (count s) n)\n                   n)\n        to-take (mod adjusted (count s))]\n    (concat (drop to-take s) (take to-take s))))","user":"5ce6f93be4b0a17bb84e2b99"},{"problem":44,"code":"(\n fn rotate-sequence [n s]\n  (let [c (mod n (count s))]\n    (concat (drop c s) (take c s))))","user":"5daeb6bce4b0f8c104ccfc8b"},{"problem":44,"code":"#(->> (concat %2 %2)\n      (drop (mod %1 (count %2)))\n      (take (count %2)))","user":"56047160e4b0c80df0ca265d"},{"problem":44,"code":"(fn [x coll]\n  (let [c (count coll)\n        r (rem x c)\n        t (if (< r 0) (+ c r) r)]\n        (flatten (conj (vec (take-last (- c t) coll)) (take t coll)))))","user":"5a84cf8de4b00b71e582a095"},{"code":"(fn rotate [i l]\n  (let [i (mod i (count l))]\n    (if (> i 0)\n      (concat (drop i l) (take i l))\n      (let [i (+ (count l) i)]\n        (concat (drop i l) (take i l))))))","problem":44,"user":"4f04f847535dcb61093f6beb"},{"problem":44,"code":"(fn rotate-seq [n s]\n  (let [[f s] (split-at (mod n (count s)) s)]\n\t(concat s f)))","user":"4dbf7a31535d020aff1edf75"},{"code":"(fn [n s]\n  (let [i (mod n (count s))\n        [h t] (split-at i s)]\n    (concat t h)))","problem":44,"user":"50fa01bce4b07934dda8b0ba"},{"code":"(fn rot [n v]\n    (let [cnt (count v), shift (mod (+ cnt n) cnt)]\n        (loop [n shift, s v]\n            (if (zero? n)\n                s\n                (recur (dec n) (conj (into [] (rest s)) (first s)))))))","problem":44,"user":"4f128865535d64f603146428"},{"problem":44,"code":"(fn [n coll]\n  (let [size (count coll)\n        adjusted-n (mod n size)]\n    (take size (drop adjusted-n (cycle coll)))))","user":"57a0f256e4b0c3d858beb8dd"},{"code":"(fn[idx a-seq]\n  (take (count a-seq) \n    (drop (mod idx (count a-seq))\n      (cycle a-seq))))","problem":44,"user":"4e58bcd4535d8a8b8723a296"},{"problem":44,"code":"(fn rotate [a coll]\n  (cond\n    (< a 0) (if (> (* -1 a) (count coll)) \n              (recur (+ a (count coll)) coll)\n              (recur (- (count coll) (* -1 a)) coll)) \n    (> a (count coll)) (recur (- a (count coll)) coll)\n    :else (concat (take-last (- (count coll) a) coll) (take a coll)))\n  )","user":"5b2238d1e4b03cfeda66ed5e"},{"problem":44,"code":"(fn [n xs] \n  (let [index (mod n (count xs))]\n    (flatten [(drop index xs)(take index xs)])))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":44,"code":"(fn [n coll]\n  (let [len (mod n (count coll))]\n    (concat (drop len coll) (take len coll))))","user":"5182de5ce4b0353c468deb74"},{"code":"(fn [n x]\n  (let [c (mod n (count x))]\n       (take (count x) (drop c (cycle x)))))","problem":44,"user":"4ff505c8e4b0678c553fc364"},{"problem":44,"code":"#(apply concat \n  (reverse \n   (split-at (mod % (count %2)) %2)))","user":"56dc483fe4b0ea9b8538f81b"},{"problem":44,"code":"(fn rotate [n v]\n           (->> (concat v v)\n                (drop (mod n (count v)))\n                (take (count v))))","user":"4f47d84fe4b0d56e7bb92bc3"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [n (mod n (count coll))]\n    (take (count coll) (drop n (flatten (repeat coll))))))","user":"5532a04ee4b09218d5f44f82"},{"code":"(fn [a b] (apply #(into %2 %) (map vec (split-at (mod a (.size b)) b))))","problem":44,"user":"4e8ad247535d65386fec2111"},{"problem":44,"code":"(fn f[num l]\n  (cond\n    (> num (count l)) (f (- num (count l)) l)\n    (< num 0) (f (+ num (count l)) l)\n    :else (concat (drop num l) (take num l))))","user":"5626447fe4b00e49c7cb47bd"},{"code":"(fn [n s]\n  (apply (fn[h & t] (flatten (concat t h)))\n    (partition-all\n      ( #(if (< % 0) (+ (count s) %) %)\n        (mod n (count s)))\n      s)))","problem":44,"user":"4f725466e4b07046d9f4f030"},{"problem":44,"code":"#(nth (iterate\n       (fn [xs]\n         (concat (rest xs) (list (first xs))))\n       %2)\n      (mod %1 (count %2)))","user":"5829d9f8e4b051871117bf4d"},{"problem":44,"code":"(fn my-rotate[num s]\n  (let [[left right] (split-at (mod num (count s)) s)]\n    (concat (vec right) (vec left))))","user":"60b8b0f8e4b0e0fa5f1b425c"},{"code":"(fn [n c]\n  (take (count c) (drop (mod n (count c)) (cycle c))))","problem":44,"user":"4e773be8535d324fb2983d6e"},{"code":"(fn [d l]\n  (let [c (count l)]\n    (take c (drop (mod d c) (cycle l)))\n    )\n  )","problem":44,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"(fn[shift coll]\n  (let [n (mod shift (count coll))]\n  (cond\n    (> n 0)\n      (concat (drop n coll) (take n coll))\n    (< n 0)\n      (concat (take-last (* -1 n) coll) (drop-last (* -1 n) coll))\n    :else\n      coll)))","problem":44,"user":"4e7bc07c535db169f9c796b9"},{"code":"(fn f [x coll]\n    (let [ a ( count coll)\n              b  (rem x a)\n              c (if (< 0 b) b (+ b a ))\n                  ]\n                 \n      \n    (concat (take-last (- (count coll ) c ) coll ) ( take c coll))\n    )\n    )","problem":44,"user":"518c5236e4b087e178201de0"},{"problem":44,"code":"#(->> (split-at (mod %1 (count %2)) %2) reverse (apply concat))","user":"54f904c2e4b01ecee9d88832"},{"problem":44,"code":"(fn rotate-seq [n s]\n  (let [split-idx (mod n (count s))\n        [l r] (split-at split-idx s)]\n    (concat r l)))","user":"5d272077e4b092dab7f59c64"},{"problem":44,"code":"(fn [n s]\n  (let [shift (mod n (count s))]\n    (concat (drop shift s)\n            (take shift s))))","user":"5aa6bd56e4b0d174b936c8af"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [len (count coll)\n        skip (mod n len)]\n    (->> coll\n      (cycle)\n      (drop skip)\n      (take len))))","user":"56e99ec8e4b04a395b9a03fb"},{"problem":44,"code":"#(let [b (if (neg? %) (inc (* % -1)) %)] (drop b (take (+ (count %2) b) (cycle %2))))","user":"56677192e4b04acd4f672dd5"},{"problem":44,"code":"(fn r [i v]\n  (let [c (count v)] \n    (take-last c (take (+ c (mod i c)) (cycle v)))))","user":"534e4a29e4b084c2834f4ab0"},{"problem":44,"code":"(fn\n  [n s]\n  (->> s\n       cycle\n       (drop (mod n (count s)))\n       (take (count s))))","user":"5f5e166ce4b02876ed9fcfed"},{"code":"#(let [x (mod % (count %2))]\n   (into (take x %2) (reverse (drop x %2))))","problem":44,"user":"523d02b0e4b0dbf0c3017289"},{"code":"(fn [n s]\n  (let [c (count s)\n        n (mod n c)]\n    (->> s\n         cycle\n         (drop n)\n         (take c))))","problem":44,"user":"510db6cde4b078ea71921145"},{"code":"(fn rotate-col-dir\n  [n col]\n  (let [rotate(fn\n\t[col n count]\n\t(concat (take-last (- count n) col) (take n col)))\n        rotate-col(fn\n\t[col n count]\n        (if (pos? n)\n          (rotate col n count)\n          (reverse (rotate (reverse col) (Math/abs n) count))))\n        count (count col)]\n    (if (> (Math/abs n) count)\n      (if (pos? n)\n        (rotate-col col (- n count) count)\n        (rotate-col col (+ n count) count))\n      (rotate-col col n count))))","problem":44,"user":"5339af7de4b0e30313ee6cab"},{"problem":44,"code":"(fn f [n xs]\n  (cond \n    (neg? n) (f (+ (count xs) n) xs)\n    (zero? n) xs\n   :else \n    (f (dec n) (conj (vec (rest xs)) (first xs)))))","user":"53b42472e4b047364c0444b2"},{"problem":44,"code":"(fn rotate [n seq]\n  (let [seq-len (count seq)]\n    (loop [n n]\n      (cond (< n 0) (recur (+ n seq-len))\n            (>= n seq-len) (recur (- n seq-len))\n            :else\n            (concat (drop n seq) (take n seq))\n            ))))","user":"57fc0719e4b0d3187e900987"},{"code":"(fn rotate [n list]\n  (let [n1 (mod n (count list))]\n    (concat (drop n1 list) (take n1 list))))","problem":44,"user":"4fbe2cfbe4b081705acca30c"},{"problem":44,"code":"(fn rotate [n coll]\n    (cond\n      (neg? n) (recur (+ (count coll) n) coll)\n      (> n (count coll)) (recur (mod n (count coll)) coll)\n      :else (let [l (take n coll)\n                  r (drop n coll)]\n              (concat r l))))","user":"51b91b08e4b0e871ca4958f8"},{"problem":44,"code":"(fn [dir s]\n  (let [size (count s)]\n    (take size (drop (if (neg? (+ size dir)) 2 (+ size dir)) (cycle s)))))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":44,"code":"(fn rot [n c]\n    (let [cnt (count c)\n          r (rem n cnt)\n          nn (if (neg? r) (+ cnt r) r)\n          [a b] (split-at nn (vec c))]\n      (concat b a)))","user":"512b07f7e4b078b06821febb"},{"code":"(fn rot [n coll]\n  (cond (zero? n) coll\n        (pos? n) (rot (dec n) (concat (rest coll) (take 1 coll)))\n        :else (let [c (dec (count coll))]\n                (rot (inc n) (concat (drop c coll)\n                                     (take c coll))))))","problem":44,"user":"4e8c1d97535d65386fec2127"},{"code":"(fn [n c]\n  (cond\n   (= 0 n) c\n   (< 0 n) (recur (dec n) (conj (vec (rest c)) (first c)))\n   :else   (recur (inc n) (vec (cons (last c) (drop-last c))))))","problem":44,"user":"51a10b2ce4b0b292b01ee3fe"},{"code":"(fn [unmoddedcnt col]\n    (let [cnt (mod unmoddedcnt (count col))]\n    (cond (>= cnt 0) (let [split (split-at cnt col)] (concat (second split) (first split)))\n          :else (let [split (split-at (+ (count col) cnt) col)] (concat (second split) (first split))))))","problem":44,"user":"5141abf1e4b02fd87f5064c3"},{"code":"(fn [n s]\n  (let [r (mod n (count s))]\n    (concat (drop r s) (take r s))))","problem":44,"user":"4f58d92fe4b0a7574ea71858"},{"code":"x","problem":44,"user":"52e635b3e4b09f7907dd146f"},{"problem":44,"code":"(fn [n lst]\n    (cond \n     (and (< n 0) (> (* n -1)) (count lst)) (flatten (conj () (reverse  (drop (mod (* n -1) (count lst)) (reverse lst))) (reverse  (take (mod (* n -1) (count lst)) (reverse lst)))))\n     (and (> n 0) (> n (count lst)))  (flatten (conj ()  (take (mod n (count lst)) lst) (drop (mod n (count lst)) lst)))\n     (< n 0) (flatten (conj () (reverse  (drop (* n -1) (reverse lst))) (reverse  (take (* n -1) (reverse lst)))))\n     (> n 0) (flatten (conj ()  (take n lst) (drop n lst)))\n     :use lst\n     ))","user":"56e9a56ae4b04a395b9a03fc"},{"code":"(fn [offset s]\n    (if (and (>= offset 0) (< offset (count s)))\n      (concat (drop offset s) (take offset s))\n      (recur (mod offset (count s)) s)))","problem":44,"user":"5165a235e4b079ad97ec44ac"},{"problem":44,"code":"#(flatten (let [n (mod %1 (count %2))](if (> n 0) \n            (list (drop n %2) (take n %2))\n            (list (drop (+ (count %2) n) %2) (take (+ (count %2) n) %2)))))","user":"580e2941e4b0849f6811b74e"},{"code":"(fn rot [n s]\n  (if (= n 0) s\n      (if (> n 0)\n        (rot (dec n) (concat (rest s) [(first s)]))\n        (rot (inc n) (concat [(last s)] (take (dec (count s)) s))))))","problem":44,"user":"529ce629e4b04e0c58e87b6e"},{"problem":44,"code":"(fn rot [n coll]\n     ( let [b (partition-all (mod n (count coll)) coll)]\n       (flatten(concat (rest b) (first b)))))","user":"55896a0ce4b059ccff29b204"},{"code":"(fn [x y]\n(let [r (rem x (count y))]\n  (if (neg? x)\n    (concat (take-last (Math/abs r) y) (drop-last (Math/abs r) y))\n    (concat (drop r y) (take r y))\n    )))","problem":44,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":44,"code":"(fn rt [n lst]\n  (cond\n   (= 0 n) lst\n   (< n 0) (reverse (rt (* -1 n) (reverse lst)))\n   :else (rt (dec n) (conj (vec (rest lst)) (first lst)))))","user":"525cc912e4b0cb4875a45d48"},{"problem":44,"code":"#(let [col %2 c (count col) r (rem (+ c (rem %1 c)) c)] (println r) (take c (concat (drop r col) (cycle col))))","user":"55201d18e4b08d5046aa8a5d"},{"problem":44,"code":"(fn[c s](let [c (mod c (count s))] (flatten(conj (take c s) (drop c s)))))","user":"560d491ae4b05f002753df3b"},{"code":"(fn [n xs]\n  (reduce (fn [acc x]\n            (if (< x 0)\n              (concat (vector (last acc)) (butlast acc))\n              (concat (drop 1 acc) (vector (first acc)))))\n          xs (range n 0 (- (/ n (Math/abs n))))))","problem":44,"user":"51ef31dfe4b0871fa145d9a0"},{"problem":44,"code":"(fn [n coll] \n  (if (>= n 0) \n    (concat (drop (rem n (count coll)) coll) (take (rem n (count coll)) coll)) \n    (concat (drop (+ (count coll) (rem n (count coll))) coll) (take (+ (count coll) (rem n (count coll))) coll))))","user":"5550bcece4b00713264bd9ae"},{"problem":44,"code":"(fn rotate-dj [positions arry2] \n  (let [arry (vec arry2)]\n    (cond \n     (zero? positions) (seq arry)\n     (neg? positions) (rotate-dj \n                      (inc positions) (cons (last arry) (butlast arry)))\n     (pos? positions) (rotate-dj \n                      (dec positions) (conj (vec (rest arry)) (first arry))))))","user":"553aad97e4b09218d5f44ff9"},{"problem":44,"code":"(fn [n s]\n  (let [pos (mod n (count s))]\n    (concat (drop pos s) (take pos s))))","user":"59750a68e4b01722bebd4cba"},{"problem":44,"code":"(fn [n coll] (let [n (mod n (count coll))]\n         \t\t(concat (drop n coll) (take n coll))))","user":"5bf5ddfde4b0bdcf453d159e"},{"code":"#(let [m (rem %1 (count %2) ) ma (* -1 m)] (if (< 0 m) (concat (drop m %2) (take m %2)) (concat (take-last ma %2) (drop-last ma %2))))","problem":44,"user":"4e6e6630535d5021c1a89609"},{"problem":44,"code":"(fn [rotation coll] (take (count coll) (drop (+ (count coll) (mod rotation (count coll))) (flatten (repeat coll)))))","user":"567f988be4b0feffd0d18ebe"},{"code":"(fn [n coll]\n    (let [offset (if (pos? n) n (+ (* (count coll) n -1) n) )]\n  (take (count coll) (drop offset (cycle coll)))))","problem":44,"user":"50432da5e4b034ff00315d1e"},{"code":"(fn [rotation sequence]\n  (cond (= rotation 0)\n        sequence\n        (> rotation 0)\n        (recur (dec rotation) (conj (vec (rest sequence)) (first sequence)))\n        (< rotation 0)\n        (recur (inc rotation) (cons (last sequence) (take (dec (count sequence)) sequence)))))","problem":44,"user":"4f343e60e4b0e243712b1eb5"},{"problem":44,"code":"(fn [times params]\n  (let [ctr (mod times (count params))]\n    (concat (drop ctr params) (take ctr params))))","user":"5cada3b8e4b026601754b872"},{"problem":44,"code":"(fn [n coll]\n  (let [[h t] (split-at (mod n (count coll)) coll)]\n    (concat t h)))","user":"546ed28be4b00cfc9eacc1a5"},{"problem":44,"code":"(fn [rots col]\n  (let [rotations (rem rots (count col)) [num-rots proccessed-col post-process] (if (> rotations 0) [rotations col identity] [(* -1 rotations) (reverse col) reverse])]\n    (post-process (concat (drop num-rots proccessed-col) (take num-rots proccessed-col))) ))","user":"6031926ae4b0d5df2af222ac"},{"code":"(fn rotate [n s]\n  (let [c (count s)\n        x (rem n c)\n        y (if (pos? x) x (+ c x))]\n    (flatten (reverse (split-at y s)))))","problem":44,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":44,"code":"(fn rotate [c col]\n  (if (zero? c)\n      col\n      (if (neg? c)\n        (rotate (+ (count col) c) col)\n        (rotate (dec c) (concat (next col) (take 1 col))))))","user":"52bdd135e4b07a9af579230a"},{"code":"(fn [rot coll] (let [nth (mod rot (count coll))](concat (drop nth coll) (take nth coll))))","problem":44,"user":"5125834ae4b05d10e3e395fa"},{"problem":44,"code":"(fn [n lst]\n\t(let [n' (mod n (count lst))]\n    (concat (drop n' lst) (take n' lst))))","user":"5931e498e4b072a2710fd024"},{"problem":44,"code":"(fn rotate-seq [steps coll]\n    (take (count coll) (drop (mod steps (count coll)) (apply concat (repeat coll)))))","user":"594c0bd7e4b07ddc2dafae56"},{"code":"(fn [n a]\n  (let [i (mod n (count a))]\n    (concat (drop i a)\n            (take i a))))","problem":44,"user":"4fde492be4b05e33b9224f8a"},{"code":"(fn [n seq]\n\t(let [k (mod n (count seq))]\n\t\t(concat (drop k seq) (take k seq))))","problem":44,"user":"514a2fa1e4b0829bd132edb5"},{"code":"(fn myrotseq [n lt]\r\n    (if (>= n 0)\r\n      (let [n (mod n (count lt))](apply concat (reverse (split-at n lt))))\r\n      (let [n (- (count lt) (mod (* n -1) (count lt)))]\r\n  (apply concat (reverse (split-at n lt))))))","problem":44,"user":"4e1b2cd9535d04ed9115e7fd"},{"problem":44,"code":"#(let [move (mod %1 (count %2))]\n    (concat (drop move %2) (take move %2)))","user":"60849bd6e4b0736b099e42f2"},{"code":"(fn [n l] \n  (let [x (mod (- n (count l)) (count l))] \n  (concat (drop x l) (take x l))))","problem":44,"user":"531bad96e4b08068f379ed93"},{"code":"(fn [n c]\n   (if (>= n 0)\n     (nth (iterate #(concat (rest %) [(first %)]) c) n)\n     (nth (iterate #(concat [(last %)] (butlast %)) c) (- n))))","problem":44,"user":"506d5e4ce4b0a302964c5493"},{"problem":44,"code":"(fn [n xs]\n  (let [c (mod n (count xs)) \n        [h t] (split-at c xs)]\n    (concat t h)))","user":"5392bfdee4b0b51d73faaeb2"},{"code":"(fn rotate [n xs] \n   (if (> n 0) \n     (rotate (- n (count xs)) xs)\n     (loop [i n result xs]\n       (if (= i 0) \n         result\n         (recur (inc i) (cons (last result) (butlast result)))))))","problem":44,"user":"51a7b4fee4b0da5f497bde8b"},{"code":"(fn [c x] (take (count x) (nthrest (cycle x) (if (> c 0) c (+ (count x) (count x) c)))))","problem":44,"user":"506ee0f4e4b09350ab4199f2"},{"problem":44,"code":"(fn [r a-seq]\n  (loop [cnt (mod r (count a-seq))\n         els a-seq]\n    (if (= cnt 0)\n      els\n      (recur (dec cnt) (conj (vec (rest els)) (first els))))))","user":"5974b12be4b01722bebd4cb1"},{"code":"(fn [dir s]  (let [n (mod dir (count s))]    (concat (drop n s) (take n s))))","problem":44,"user":"50bc23e4e4b0594b91591c3c"},{"problem":44,"code":"(fn [c sq]\n  (let [cc (mod c (count sq))]\n    (concat (drop cc sq) (take cc sq))))","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn [n coll]\r\n  (let [c (count coll)\r\n        n (if (> n 0)\r\n            (mod n c)\r\n            (- c (dec (mod n c))))]\r\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":44,"code":"(fn [c col]\n  (take (count col) (drop (mod c (count col)) (cycle col))))","user":"57481f1fe4b009280f9f2b82"},{"problem":44,"code":"(fn [n s]\n  (let\n    [r (mod n (count s))]\n    (concat (drop r s) (take r s))))","user":"5458c74de4b01be26fd74623"},{"problem":44,"code":"(fn rotate [num list]\n  (flatten (reverse (split-at (rem (+ (count list) (rem num (count list))) (count list)) list))))","user":"58ffc6cfe4b0438e51c2d008"},{"code":"#(let [p (mod (java.lang.Math/abs %) (count %2))]\n  (cond\n    (pos? %)\n      (into\n        (vec (drop p %2))\n        (take p %2))\n    (neg? %)\n      (into\n        (vec (take-last p %2))\n        (drop-last p %2))\n  :else %2))","problem":44,"user":"4f253a49e4b0d66497709ff3"},{"problem":44,"code":"#(let [l (count %2)] (take l (drop (mod %1 l) (apply concat (repeat 20 %2)))))","user":"5d439775e4b07c84aa5ae696"},{"code":"(fn [x y] (let [z (if (> x 0)\n  \t     x\n\t\t     (+ x (* (count y) (+ (rem (count y) x) 1))))\n\t\t ]\n  (drop z (take (+ z (count y)) (cycle y)))))","problem":44,"user":"4eb0afed535d7eef3080733e"},{"code":"(fn [n coll] (if (>= n 0)\n               (concat (nthnext coll (mod n (count coll))) (take (mod n (count coll)) coll))\n               (concat (nthnext coll (- (count coll) (mod (- n) (count coll)))) (take (- (count coll) (mod (- n) (count coll))) coll))))","problem":44,"user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn [n as]\r\n   (loop [n (mod n (count as)) fs '() rs as]\r\n     (if (zero? n)\r\n       (concat rs (reverse fs))\r\n       (recur (dec n) (conj fs (first rs)) (rest rs)))))","problem":44,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"#(let [len (count %2)]\n  (map (fn [i j] (nth %2 (rem (+ j (rem %1 len) len) len))) \n        %2 (iterate inc 0)))","problem":44,"user":"4fbfe9a4e4b081705acca31f"},{"code":"(fn [dir s]\n  (let [n (mod dir (count s))]\n    (concat (drop n s) (take n s))\n    ))","problem":44,"user":"50928ecfe4b097f48cc38570"},{"problem":44,"code":"(fn [toRotate coll]\n  (let [rot (mod toRotate (count coll))\n        chunkSize (if (pos? rot) rot (+ (count coll) rot))]\n      (concat (drop chunkSize coll) (take chunkSize coll)))\n  )","user":"5b3251c1e4b025bcb146f317"},{"problem":44,"code":"#(take (count %2) (nthnext (cycle %2) (+ (* 10 (count %2)) %)))","user":"548f11a0e4b0e286459a122d"},{"problem":44,"code":"#(cond (and (pos? %) (<= % (count %2)))\n        (flatten (seq (conj (take % %2) (drop % %2))))\n        (and (pos? %) (>= % (count %2)))\n        (let [% (- % (count %2))]   (flatten (seq (conj (take % %2) (drop % %2)))))\n        (and (neg? %) (<= (* % -1 ) (count %2)))\n        (let [% (* % -1)]\n          (flatten (conj (list (reverse (drop % (reverse %2)))) (reverse (take % (reverse %2))))))\n        (and (neg? %) (>= (* % -1 ) (count %2)))\n        (let [% (- (* % -1) (count %2))] (flatten (conj (list (reverse (drop % (reverse %2)))) (reverse (take % (reverse %2)))))))","user":"56ede653e4b04a395b9a0449"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n  (concat (drop n %2) (take n %2))\n)","user":"54e5bdf2e4b024c67c0cf7fe"},{"problem":44,"code":"(fn rota [n c]\n  (if (= n 0)\n    c\n    (if (pos? n)\n      (rota\n       (dec n)\n       (concat\n        (rest c)\n        [(first c)]))\n      (rota\n       (inc n)\n       (concat\n        [(last c)]\n        (butlast c))))))","user":"57fd085ce4b0d3187e9009a9"},{"problem":44,"code":"#(loop [x %\n        coll %2]\n    (cond\n      (> x 0) (recur (dec x) (concat (rest coll) [(first coll)]))\n      (< x 0) (recur (inc x) (concat [(last coll)] (drop-last coll)))\n      :else coll))","user":"5e348945e4b0650de70e2b1d"},{"code":"(fn rec-rot [n xs]\n  (cond\n    (= n 0) xs\n    (> n 0) (recur (dec n) (concat (rest xs) (list (first xs))))\n    (< n 0) (recur (inc n) (concat (list (last xs)) (butlast xs)))))","problem":44,"user":"4ea7999e535d7eef308072ee"},{"code":"(fn rotate [n xs] (let\n  [m (mod n (count xs))]\n  (concat (drop m xs) (take m xs))\n))","problem":44,"user":"4ed500bb535d10e5ff6f52d3"},{"problem":44,"code":"(fn rotate\n  [n arr]\n  (let [n (if (neg? n) (mod n (count arr)) n) arr (vec arr)]\n    (loop [coll arr iter n]\n      (if (<= iter 0)\n        coll\n        (recur (vec (drop 1 (conj coll (first coll)))) (dec iter)))\n      ))\n  )","user":"5d5950c1e4b02ba5928a6827"},{"code":"#(let [t (count %2)\n        n (mod (+ t %) t)]\n  (concat (drop n %2) (take n %2)))","problem":44,"user":"4e6dd0f5535d5021c1a895f3"},{"problem":44,"code":"(fn [p c] \n  (let [p (if (< p 0) (+ p (count c) (count c)) p)] \n    (take (count c) (drop p (cycle c)))))","user":"4f1ef6a0535d64f60314649b"},{"problem":44,"code":"(fn [n v]\n  (let [ln (count v)\n        x (if (< n 0)\n            (mod (+ ln n) ln)\n            (mod n ln))]\n    (concat (drop x v) (take x v))))","user":"5604bcf7e4b08b23635d315a"},{"problem":44,"code":"(fn rotx [n coll]\n  (letfn [(sgn [n]\n            (if (zero? n) 0\n                (if (pos? n) 1 -1)))]\n    (loop [rct n\n           s coll]\n      (condp = (sgn rct)\n        0 s\n        1 (recur (dec rct) (concat (rest s) [(first s)]))\n        -1 (recur (inc rct) (conj (butlast s) (last s)))))))","user":"56f9c7c6e4b07572ad1a88ba"},{"code":"(fn rotate-sequence\n  [n coll]\n  (let [subseqlen (mod n (count coll))]\n    (concat (drop subseqlen coll) (take subseqlen coll))))","problem":44,"user":"536e5055e4b0fc7073fd6e6b"},{"problem":44,"code":"(fn [d coll]\n  (let [n (count coll)]\n    (for [x (range n)\n          :let [\n            i (mod (+ x d) n)]]\n      (nth coll i))))","user":"5a4caa20e4b05d388ecb6b94"},{"problem":44,"code":"(fn [n ls] (take (count ls) (drop (mod n (count ls))(cycle ls))))","user":"603a6c40e4b0d5df2af222f7"},{"code":"#(let [[x y] (split-at (mod %1 (count %2)) %2)] (concat y x))","problem":44,"user":"5256627ce4b0541d1855ba1a"},{"code":"(fn rotate [x coll]\n  (let [coll-count (count coll)\n        right-x (if (neg? x) (+ coll-count (if (> (- x) coll-count) (+ coll-count x) x)) x)\n        move-left (fn [a-list] (concat (rest a-list) [(first a-list)]))]\n  ((apply comp (repeat right-x move-left)) coll)))","problem":44,"user":"5244cf39e4b0d8acf9ed6ac5"},{"problem":44,"code":"#(let [part (mod % (count %2))]\n   (concat (drop part %2) (take part %2)))","user":"55ccdc6be4b0e31453f64a18"},{"code":"(fn [n col]\n  (let [m (count col)]\n    (take m (drop (mod n m) (apply concat (repeat 2 col))))))","problem":44,"user":"5233ad08e4b07e3ee2be83ac"},{"problem":44,"code":"(fn [n s] (let [c (count s)\n                    t (mod n c)]\n                (concat (drop t s) (take t s))))","user":"53fc4abae4b0de5c4184859b"},{"problem":44,"code":"(fn [n,coll]\n    (let [v (vec coll) maxindex (dec (count v)) indexes (range (count v)) vsize (count v) x (rem n vsize)]\n\n        (map v (map #(let [newindex (+ % x)] (if (neg? newindex) (+ vsize newindex)\n                                            (if (> newindex maxindex) (- newindex vsize) newindex))) \n            indexes))))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":44,"code":"(fn [x lst] (let [e (mod x (count lst))] (concat (drop e lst) (take e lst))))","user":"607e1c1fe4b03d835a6eaed8"},{"problem":44,"code":";; Overkill?\n(fn rotate [n coll]\n  (if (< n 0)\n    (let [rotation (mod (* -1 n) (count coll))]\n      (concat (drop (- (count coll) rotation) coll) (take (- (count coll) rotation) coll)))\n    (let [rotation (mod n (count coll))]\n      (concat (drop rotation coll) (take rotation coll)))))","user":"55b69e37e4b01b9910ae2999"},{"problem":44,"code":"(fn [s, coll] (let \n                    [c (count coll)]\n                    (take-last c (take (+ c c (rem s c)) (cycle coll)))\n                    ))","user":"56f15eade4b04a395b9a048e"},{"problem":44,"code":"(fn rot [n l]\n  (cond\n    (= n 0)\n      l\n    (> n 0)\n      (rot (dec n) (concat (drop 1 l) [(first l)]))\n    (< n 0)\n      (rot (inc n) (concat [(last l)] (drop-last l)))\n  )\n)","user":"5881d1c2e4b0f1effa3b7644"},{"code":"(fn [n coll] (let [[a b] (split-at (mod n (count coll)) coll)]\n               (concat b a)))","problem":44,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"#(vals\n  (sort \n   (into {} (map-indexed \n             (fn [idx itm] [(mod (- idx %1) (count %2)) itm])\n             %2))))","problem":44,"user":"50589113e4b06522596eba7f"},{"problem":44,"code":"(fn [d coll]\n  (let [coll-count (count coll)\n        d-mod (mod d coll-count)\n        d (if (< d-mod 0) (- coll-count d-mod) d-mod)]\n    (take coll-count (drop d (cycle coll)))))","user":"5caf9cace4b026601754b89b"},{"code":"(fn\n  [n coll]\n  (let [n (mod n (.size coll))\n        [a b] (split-at n coll)]\n    (concat b a)))","problem":44,"user":"52dfc89be4b09f7907dd1405"},{"problem":44,"code":"(fn f [n a]\n  (\n   if (> n (count a))\n   (f (- n (count a)) a)\n   (if (pos? n)\n     (concat (drop n a)(take n a))\n     (f (+ n (count a)) a)\n     )))","user":"57501c83e4b02ea11479926b"},{"code":"(fn rotateSequence [a b] (flatten (conj (take (loop [x a y (count b)] (if (and \n(> x -1) (< x y)) x (recur (if (> x y) (- x y) (+ x y)) y)))  b) (reverse (take (- \n(count b) (loop [x a y (count b)] (if (and (> x -1) (< x y)) x (recur (if (> x y) \n(- x y) (+ x y)) y)))) (reverse b))))))","problem":44,"user":"4f9336ece4b0dcca54ed6cb7"},{"problem":44,"code":"(fn [how-much sequence]\n  (let [length (count sequence)]\n    (take length (nthnext (flatten (repeat sequence)) (mod how-much length)))))","user":"5a593521e4b05d388ecb6c93"},{"problem":44,"code":"(fn [n coll]\n  (let [size (count coll),\n        offset (loop [k n]\n                 (cond (< k 0) (recur (+ k size))\n                       (< size k) (recur (- k size))\n                       :else k))]\n    (concat (drop offset coll) (take offset coll))))","user":"567695c2e4b05957ce8c6157"},{"problem":44,"code":"(fn [n xs]\n  (cond (pos? n) (recur (dec n)\n                        (concat \n                         (rest xs)\n                                (list (first xs))))\n        (neg? n) (recur (inc n)\n                        (concat \n                         (list (last xs))\n                         (butlast xs)))\n        :else xs))","user":"54961073e4b0b312c081ff62"},{"code":"(fn rot [n xs]\n  (cond\n   (zero? n) xs\n   (pos? n) (rot (dec n) (concat (rest xs) (list (first xs))))\n   (neg? n) (rot (inc n) (concat (list (last xs)) (drop-last xs)))))","problem":44,"user":"5220bc0fe4b0e6a83c8925a7"},{"code":"(fn rot [n x]\n  (cond\n   (< n 0) (reverse (rot (- n) (reverse x)))\n   :else (apply concat (reverse (split-at (mod n (count x)) x)))))","problem":44,"user":"52b5edd1e4b0c58976d9ad3c"},{"problem":44,"code":"(fn rotate [offset input]\n  (let [remainder (mod offset (count input))]\n    (concat (drop remainder input) (take remainder input))))","user":"5b044436e4b0cc2b61a3bd71"},{"code":"(fn [n coll]\n  (let [m (mod n (count coll))]\n  \t(concat (drop m coll) (take m coll))))","problem":44,"user":"52976262e4b02ebb4ef75041"},{"code":"(fn [x y] (let [off (mod x (count y))] (concat (drop off y) (take off y))))","problem":44,"user":"4ed19f00535d44c135fd68d1"},{"code":"#(let [n (mod % (count %2))] \n  (concat (drop n %2) (take n %2)))","problem":44,"user":"4f01c938535dcb61093f6a39"},{"code":"#(let [n (mod % (count %2))]\r\n    (concat (drop n %2) (take n %2)))","problem":44,"user":"507a396be4b08327cd804a69"},{"problem":44,"code":"(fn rotate [n l]\n  (let [m (mod n (count l))]\n    (concat\n     (drop m l)\n     (take m l))))","user":"55e4487ce4b050e68259b44c"},{"problem":44,"code":"(fn rotateseq [r c]\n   (loop [n r, out c]\n     (if (zero? n)\n       out\n       (let [ s \n              (if (pos? n)\n                (concat (rest out) [(first out)])\n                (concat [(last out)] (drop-last out))\n              )\n              , m (if (pos? n) (dec n) (inc n)) ]\n         (recur   \n            m               \n            s \n          )\n       ) \n     )\n    )\n)","user":"571aae1fe4b07c98581c3b5a"},{"code":"#(let \r\n  [size (count %2)\r\n  pos (mod % size)]\r\n  (concat\r\n    (drop pos %2)\r\n    (take pos %2)))","problem":44,"user":"4f1abbfb535d64f60314646e"},{"problem":44,"code":"(fn x [p coll]\n  (let [n (mod p (count coll))]\n  (if (pos? n)\n    (concat (drop n coll) (take n coll))\n    (concat (take-last (- n) coll) (drop-last (- n) coll))\n    )\n    )\n  \n  )","user":"56db90d4e4b0ea9b8538f80d"},{"problem":44,"code":"(fn [x coll]\n    (let [n (mod x (count coll))]\n      (concat (drop n coll) (take n coll))))","user":"57b9f35be4b0fbc9809a27f9"},{"problem":44,"code":"(fn [number coll]\n  (if (> number 0)\n    (concat (second (split-at (mod (+ (count coll) number) (count coll)) coll)) (first (split-at (mod (+ (count coll) number) (count coll)) coll)))\n    (concat (second (split-at (mod (- (+ (count coll) 1) number) (count coll)) coll)) (first (split-at (mod (- (+ (count coll) 1) number) (count coll)) coll)))))","user":"5c86b769e4b0c8042a70ce9b"},{"problem":44,"code":"(fn [x s] \n  (let [y (mod x (count s))] \n    (concat (drop y s) (take y s))))","user":"5ddd6cfae4b0948ae9d9adc4"},{"problem":44,"code":"(fn [rotation to-rotate]\n   (let [counter (count to-rotate)]\n     (take counter (drop (mod rotation counter) (cycle to-rotate)))))","user":"5b15e881e4b0cc2b61a3be75"},{"problem":44,"code":"#(cond\n  (zero? %1) %2\n  (pos? %1) (recur (dec %1) (conj (vec (drop 1 %2)) (first %2)))\n  (neg? %1) (recur (inc %1) (conj (butlast %2) (last %2))))","user":"5617db88e4b06b1bb2182a16"},{"problem":44,"code":"(fn [n v]\n  (let [c (count v)\n        parts (split-at (mod (+ c n) c) v)]\n    (concat (second parts) (first parts))))","user":"5592ba8be4b0c79f6e1db931"},{"code":"#(let [len (count %2)\n       s (mod % len)\n       xs (concat %2 %2)]\n   (print len s xs)\n   (drop-last (- len s) (second (split-at s xs))))","problem":44,"user":"51bf4560e4b013aa0d74b817"},{"code":"(fn [n s] (concat (nthrest s (mod n (count s))) (take (mod n (count s)) s)))","problem":44,"user":"525c575be4b0cb4875a45d38"},{"problem":44,"code":"(fn [shift array] \n  (flatten \n   (let [l (count array) shift1 (mod shift l)]\n   (if (> shift1 0)\n     (conj (take shift1 array) (drop shift1 array))\n     (conj (take (+ l shift1) array) (drop (+ l shift1) array))))))","user":"57f52d3be4b0903ccab3dce7"},{"problem":44,"code":"#(let [movement (rem % (count %2))]\n    (let [x (split-at (if (neg? movement) (+ (count %2) movement) movement) %2)]\n      (into (first x) (reverse (first (rest x))))\n      )\n    )","user":"583f1533e4b089d5ab817dc8"},{"problem":44,"code":"(fn [n coll] (let [[a b] (split-at (mod n (count coll)) coll)] (concat b a)))","user":"606a70a5e4b069485764ddf2"},{"problem":44,"code":"(fn [n s]\n   (let [len (count s)\n         shift (mod n len)]\n     (concat\n      (take-last (- len shift) s)\n      (take shift s))))","user":"5901158de4b0438e51c2d039"},{"code":"#(if (= % 0) %2 (if (> % 0)\n                  (recur (dec %) (concat (rest %2) [(first %2)]))\n                  (recur (inc %) (cons (last %2) (butlast %2)))))","problem":44,"user":"53034738e4b0d8b024fd373e"},{"code":"(fn [n col]\n  (let [c (count col)\n        r (if (< n 0) (+ c (rem n c)) n)]\n    (->> col\n         cycle\n         (drop r)\n         (take c))))","problem":44,"user":"501d34f6e4b066e56b9d0b1e"},{"code":"#(let [x (mod % (count %2))]\n        (concat (drop x %2) (take x %2)))","problem":44,"user":"502d39c5e4b0d96a44ab2031"},{"problem":44,"code":"#(let [new-coll (if (pos? %1)\n                  %2\n                  (reverse %2))\n       new-position (if (pos? %1)\n                      %1\n                      (+ %1 (* -2 %1)))\n       real-position (mod new-position (count %2))\n       rotated (flatten\n                (reduce\n                 (fn [[acc-x acc-y] [x y]]\n                   (if (< x real-position)\n                     [acc-x (conj acc-y y)]\n                     [(conj acc-x y) acc-y]))\n                 [[] []]\n                 (map-indexed vector new-coll)))]\n   (if (pos? %1)\n     rotated\n     (reverse rotated)))","user":"59251947e4b072a2710fce69"},{"problem":44,"code":"#(take (count %2) (drop (mod %1 (count %2))  (concat %2 %2)))","user":"5d6523ace4b0db5d338d15cd"},{"code":"(fn rotseq [n xs]\n  (let [n (mod n (count xs))]\n  (if (> n 0)\n    (concat (drop n xs) (take n xs))\n    (concat (take-last (- n) xs) (drop-last (- n) xs)))))","problem":44,"user":"4fb804f7e4b081705acca2d6"},{"problem":44,"code":"(fn [n collection]\n  (let [rotation (mod n (count collection))]\n    (if (pos? rotation)\n      (concat (drop rotation collection) (take rotation collection))\n      (concat (take-last (* -1 rotation) collection) (drop-last (* -1 rotation) collection)))))","user":"5675eea1e4b05957ce8c6152"},{"problem":44,"code":"(fn rotate [r, x]\n\t(map last (sort-by first (map-indexed (fn [idx itm] [(mod (- idx r) (count x)) itm]) x)))\n)","user":"5a214798e4b0ff51aa4b32aa"},{"problem":44,"code":"(fn [n coll]\n  (cond\n       (> n 0) (recur\n                (- n (count coll))\n                coll)\n       (< n 0) (recur\n                (inc n)\n                (cons\n                 (last coll) \n                 (butlast coll)))\n       :else coll))","user":"574eb3b1e4b02ea114799247"},{"code":"( fn rotate[i s] (map #(nth s (mod (+ % i) (count s))) (range (count s))) )","problem":44,"user":"525de512e4b0cb4875a45d8a"},{"problem":44,"code":"(fn rotate [y x]\n  (let [lshift (fn anon [s n]\n                (if (<= n 0) s\n                  (anon (concat (rest s) (list (first s))) (- n 1))))\n        reverse-seq (fn anon [s]\n                (if (= (count s) 1) s \n                 (concat (anon (rest s)) [(first s)])))\n        abs (fn [n] (max n (-' n)))]\n    (if (< y 0)\n      (reverse-seq (lshift (reverse-seq x) (abs y)))\n      (lshift x y))))","user":"57d1d6c8e4b0bd073c202370"},{"code":"(fn [step vet]\n (let [x (flatten (  repeat (inc (Math/abs step)) vet  ))]\n   (if (pos? step)\n    (subvec (vec x) step (+ step (count vet)))\n    (let [start (- (count x) (count vet) (- step))]\n     (subvec (vec x) start (+ start (count vet)))\n    )\n   )\n  )\n)","problem":44,"user":"4e8b6f4d535d65386fec211e"},{"code":"#(let [n (mod %1 (count %2))]\n         (concat (drop n %2) (take n %2)))","problem":44,"user":"4f34eb87e4b0e243712b1eba"},{"problem":44,"code":"(fn rotate-seq-optim\n  [n col]\n  (let [c (count col) \n       consider (mod (if (neg? n) (+ c n) n) c)]\n  (concat (drop consider col) (take consider col))))","user":"57596ba7e4b02ea11479931a"},{"code":"(fn [dir seq]\n  (let [fop (if (> 0 dir) take-last drop)\n        sop (if (> 0 dir) drop-last take)\n        cnt (mod (if (< 0 dir) dir (- 0 dir)) (count seq))]\n    ((comp flatten list) (fop cnt seq) (sop cnt seq))))","problem":44,"user":"4eb404ba535d7eef3080735a"},{"code":"(fn [n l]\n  (let [n (mod n (count l))]\n    (if (> n 0)\n      (concat (drop n l) (take n l))\n      (let [n (- 0 n)]\n        (concat (take-last n l) (drop-last n l))))))","problem":44,"user":"515ead6be4b049add99a053e"},{"problem":44,"code":"(fn [n coll]\n  (let [coll-len (count coll)\n        true-n (* (mod (Math/abs n) coll-len) (if (neg? n) -1 1))\n        excess (cond (pos? true-n) true-n\n                     (neg? true-n) (+ coll-len true-n)\n                     :else 0)]\n    (->> (cycle coll)\n         (take (+ coll-len excess))\n         (drop excess))))","user":"58db31dce4b0a4d5acaab674"},{"code":"(fn [n l] \n\t(let [c (count l)]\n\t\t(loop [res [] pos (mod n c)]\n\t\t\t(if (< (count res) c)\n\t\t\t\t(recur (conj res (nth l pos)) (mod (inc pos) c))\n\t\t\t\tres))))","problem":44,"user":"524f4162e4b0541d1855b806"},{"code":"(fn [x y]\n  (let [cnt (count y)]\n    (flatten (reverse (split-at (if (pos? x) \n                                  (rem x cnt) \n                                  (mod x cnt)) y)))))","problem":44,"user":"52029e5de4b030ee0c5b26fc"},{"problem":44,"code":"(fn r [n xs]\n  (if (zero? n)\n    xs\n    (if (pos? n)\n      (r (dec n) (concat (drop 1 xs) (take 1 xs)))\n      (r (inc n) (concat (take-last 1 xs) (drop-last 1 xs))))))","user":"583369e6e4b089d5ab817c9c"},{"problem":44,"code":"(fn [n xs]\n  (let [len (count xs)]\n    (if (neg? n)\n      (take len (drop (+ len (mod n len)) (cycle xs)))\n      (take len (drop n (cycle xs)))\n      )\n    )\n  )","user":"546a6c7ce4b00cfc9eacc154"},{"code":"(fn [n xs]\n  (let [n0 (mod n (count xs))]\n    (concat (drop n0 xs) (take n0 xs))))","problem":44,"user":"510b0480e4b078ea719210fa"},{"problem":44,"code":"(fn [n coll]\n  (let [rotate-pos\n        (fn [n coll]\n          (concat (drop n coll) (take n coll)))\n        rotate-neg\n        (fn [n coll]\n          (concat (drop (inc n) coll) (take (inc n) coll)))]\n    (if (pos? n)\n      (rotate-pos (mod n (count coll)) coll)\n      (rotate-neg (mod (- n) (count coll)) coll))))","user":"58a953dae4b01a0c0b232968"},{"code":"(fn [k xs] (->> xs cycle (drop (mod k (count xs))) (take (count xs))))","problem":44,"user":"4ef8d47c535dced4c769f261"},{"problem":44,"code":"#(let [[l r] (split-at (mod % (count %2)) %2)] (concat r l))","user":"5461368ce4b01be26fd7469b"},{"code":"#((fn[n](concat (drop n %2) (take n %2))) (mod % (count %2)))","problem":44,"user":"522454f4e4b01819a2de42d3"},{"code":"#(let [off (mod % (count %2))]\n   (concat (drop off %2) (take off %2)))","problem":44,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":44,"code":"#(subvec (into [] (take (* 2 (count %2)) (cycle %2))) (mod %1 (count %2)) (+ (mod %1 (count %2)) (count %2)))","user":"583c8bd4e4b089d5ab817d81"},{"code":"#(apply concat (let [n (mod % (count %2))] (reverse (split-at n %2))))","problem":44,"user":"52bf6946e4b07a9af5792334"},{"code":"(fn [c coll] (let [lst (into [] coll) from (mod c (count coll))] (concat (subvec lst from) (subvec lst 0 from))))","problem":44,"user":"536c7470e4b0fc7073fd6e3e"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)\n        start (if (>= n 0) n (- c (dec n)))]\n    (take c (drop start (cycle coll)))))","user":"50cf94bde4b0abc485cb9bb2"},{"problem":44,"code":"(fn [n seq]\n              (let [N (count seq)\n                    r (mod (+ N n) N)]\n                (flatten (reverse (split-at r seq)))))","user":"5a813b90e4b00b71e582a065"},{"problem":44,"code":"(fn [n sequence]\n  (let [len (count sequence)\n        n-to-drop (loop [res n]\n                    (if (neg? res)\n                      (recur (+ len res))\n                      res))]\n    (take len (drop n-to-drop (cycle sequence)))))","user":"5630ce72e4b0bfe05bf11786"},{"code":"(fn rotate-sequence [nn c]\n  (list* \n\n   (let [v (vec c),\n         c (count v)\n         abs (fn abs [y] (if (>= y 0) y (* -1 y)))\n         n (if (< (abs nn) c) nn (rem nn c))]\n     (if (>= n 0) \n       (into (subvec v n) (subvec v 0 n))\n       (into (subvec v (inc (abs n)) c) (subvec v 0 (inc (abs n))))\n       ))\n\n   ))","problem":44,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn rotate [n s]\n  (let [l (count s) m (rem (Math/abs n) l)]\n    (if (>= n 0)\n      (concat (drop m s) (take m s))\n      (concat (drop (- l m) s) (take (- l m) s)))))","problem":44,"user":"51baff1be4b0fe3ecfb46443"},{"problem":44,"code":"(fn [rotation array]\n              (let [rotation (rem rotation (count array))]\n              (if (pos? rotation)\n                  (concat (drop rotation array) (take rotation array))\n                  (concat (take-last (- rotation) array) (drop-last (- rotation) array) ))))","user":"544e8369e4b0e39780006987"},{"code":"(fn [shift coll]\n  (let [len (count coll)\n        shift (if (pos? shift) (mod shift len) (+ len (rem shift len)))]\n    (if (zero? shift)\n      coll\n      (loop [idx 0, left [], right [], xs coll]\n        (if (seq xs)\n          (if (< idx shift)\n            (recur (inc idx) left (conj right (first xs)) (rest xs))\n            (recur (inc idx) (conj left (first xs)) right (rest xs)))\n          (concat left right))))))","problem":44,"user":"500ff421e4b0ae202717946f"},{"code":"(fn [n coll]\n    (let [len (count coll)]\n      (flatten\n        (reverse \n          (split-at \n            (rem (+ (* len 2) n) len) \n            coll\n          )\n        )\n      )\n    )\n  )","problem":44,"user":"52485723e4b05ef8e38e63d2"},{"problem":44,"code":"(fn [n x]\n(take (count x)\n(drop (mod n (count x))\n(cycle x))))","user":"54512df2e4b0e397800069ae"},{"code":"(fn fart [n s]\n  (let [x (mod n (count s))]\n   (concat (nthrest s x) (take x s))))","problem":44,"user":"508dbd56e4b0f17d83ea26c2"},{"code":"(fn [steps coll]\n  (apply concat (reverse (split-at (mod steps (count coll)) coll))))","problem":44,"user":"4e68c434535d8ccf87e9fe89"},{"problem":44,"code":"#(let [locate (mod %1 (count %2))]\n   (concat (drop locate %2) (take locate %2)))","user":"5d2c779be4b01671435dbc8d"},{"code":"#(take (count %2) (nthrest (cycle %2) (+ % (count %2) (count %2))))","problem":44,"user":"4fe91fa2e4b0547ebccb2440"},{"problem":44,"code":"#(concat (drop (mod %1 (count %2)) %2) (drop-last (- (count %2) (mod %1 (count %2))) %2))","user":"57db2369e4b0bd073c20241f"},{"code":"#(let [c (count %2)]\n   (take c\n     (drop (+ c c %)\n       (cycle %2))))","problem":44,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":44,"code":"(fn [dir xs]\n  (cond\n   (= dir 0) xs\n   (< dir 0) (recur (inc dir) (conj (list* (drop-last xs)) (last xs)))\n   (> dir 0) (recur (dec dir) (conj (vec (rest xs)) (first xs)))))","user":"58ee84e5e4b056aecfd47dab"},{"problem":44,"code":"(fn [n coll]\n  (let [size (count coll)\n        offset (mod n size)]\n    (concat (drop offset coll) (take offset coll))))","user":"57299c57e4b0c6e51e0d2b1e"},{"code":"(fn rotate [n coll]\n  (letfn [(r  [v]\n            (conj (vec (rest v)) (first v)))\n          (r* [v]\n            (vec (cons (last v) (pop v))))]\n    (let [vect (vec coll)]\n      (if (>= n 0)\n        (nth (iterate r  vect) n)\n        (nth (iterate r* vect) (- n))))))","problem":44,"user":"50377d53e4b0af0658af77ad"},{"problem":44,"code":"(fn [a s]\n  (let [l (count s)]\n    (take l\n          (drop (mod a l)\n                (cycle s)))))","user":"4ec3650f535dcc7ae8597d56"},{"code":"(fn rotate--repeat\n  ([coll]\n   (concat (rest coll) (list (first coll))))\n  ([n coll] {:pre [(integer? n)]}\n   ((apply comp (repeat (mod n (count coll)) rotate--repeat)) coll)))","problem":44,"user":"4fc6305de4b0ee37620e180b"},{"problem":44,"code":"(fn rotate [n coll]\n\n  (let [pos (rem n (count coll))]\n  (cond \n   (> pos 0) (concat (drop pos coll) (take pos coll))\n   (< pos 0) (concat (drop (+ (count coll) pos) coll) (drop-last (- 0 pos) coll))\n   :else coll\n  )\n  )      \n  \n)","user":"54a7d707e4b09f271ff37c9b"},{"code":";; (fn [n xs]\n;;  (let [[a b] (split-at (mod (if (pos? n) n (+ (count xs) n)) (count xs)) xs)]\n;;    (apply (partial conj a) (reverse b))))\n\n;; (fn [n xs]\n;;  (let [[a b] (split-at (mod (+ (count xs) n) (count xs)) xs)]\n;;    (apply (partial conj a) (reverse b))))\n\n;; (fn [n xs] (take (count xs) \n;;                 (drop (mod n (count xs))\n;;                       (cycle xs))))\n\n;; (fn [n xs]\n;;  (let [[a b] (split-at (mod n (count xs)) xs)]\n;;    (concat b a)))\n\n(fn [n xs]\n  ((fn [[a b]] (concat b a)) (split-at (mod n (count xs)) xs)))","problem":44,"user":"533696b9e4b0e30313ee6c7c"},{"problem":44,"code":"(fn rotate [n coll]\n  (println (str n \": \" coll))\n  (cond\n  \t(zero? n) coll\n    (neg?  n) (rotate\n                (inc n)\n                (concat (vector (last coll)) (butlast coll)))\n     :else    (rotate\n                (dec n)\n                (concat (rest coll) (vector (first coll))))))","user":"5486e317e4b0e286459a11c0"},{"problem":44,"code":"(fn [n coll]\n  (let [len (count coll)\n        [front end] (->\n                     (mod n len)\n                     (#(if (neg? %) (+ % len) %))\n                     (split-at coll))]\n    (concat end front))\n  )","user":"5d883119e4b0915913b1d3a6"},{"problem":44,"code":"(fn [number l]\n  (loop [shifts_count (mod number (count l)) lst l]\n    (if (= shifts_count 0)\n      lst\n      (recur (dec shifts_count) (conj (vec (rest lst)) (first lst))))))","user":"55d354e0e4b0e31453f64a62"},{"problem":44,"code":"#(let [cnt (count %2) n (mod % cnt)]\n   (concat (drop n %2) (take n %2)))","user":"5f3ab5ece4b004f08c61c52a"},{"code":"(fn rotate [i coll]\n  (let [n (count coll)\n        j (mod i n)\n        h (take j coll)\n        t (drop j coll)]\n    (concat t h)))","problem":44,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"(fn [i c]\n   (if (= 0 i)\n      c\n      (if (> i 0)\n        (recur (- i 1) (conj (vec (next c)) (first c)))\n        (recur (+ i 1) (cons (last c) (vec (drop-last c)))))))","problem":44,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":44,"code":"#(loop [n (mod % (count %2)) acc %2]\n   (if (= n 0)\n     acc\n     (recur (dec n)\n            (reverse (conj (reverse (rest acc))\n                           (first acc))))))","user":"4ed45563535d10e5ff6f52c9"},{"problem":44,"code":"(fn [N lst]\n  (let [dropCount (mod (+ N (count lst)) (count lst))]\n    (concat\n      (drop dropCount lst)\n      (take dropCount lst)\n    )\n  )\n)","user":"5bb905dce4b0a20761a235c7"},{"problem":44,"code":"(fn rotis [rot arr]\n  (let [len (count arr)]\n    (concat (drop (mod rot len) arr) (take (mod rot len)arr ))))","user":"5bf50e76e4b0b326c961d8a0"},{"problem":44,"code":"(fn [n coll]\n (->>  (cycle coll )\n  (drop (mod n (count coll)))\n  (take (count coll))))","user":"5b81139fe4b047b03b203782"},{"code":"(fn rotate [n lst]\n  (let [offset (mod n (count lst)),\n        [left right] (split-at offset lst)]\n    (concat right left)))","problem":44,"user":"4f047902535dcb61093f6bcc"},{"problem":44,"code":"(fn [n xs] \n  (let [l (count xs)]\n    (take l \n          (drop \n           (mod n l) \n           (concat xs xs)))))","user":"56b86e64e4b0f26550335924"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)\n        m (mod n c)]\n    (drop m (take (+ c m) (cycle coll)))))","user":"5aa998c6e4b0d174b936c8e5"},{"problem":44,"code":"(fn [n v]\n  (let [n (mod n (count v))]\n\t(into [] (concat (drop n v) (take n v)))))","user":"51dafedee4b09f6bc204eee2"},{"code":"#(concat (nthnext %2 (mod % (count %2))) (take (mod % (count %2)) %2))","problem":44,"user":"4ea0c284535d7eef308072ad"},{"code":"(fn [n coll]\n   (let [cnt (count coll)\n         n (mod n cnt)\n         f (comp flatten reverse split-at)]\n     (if (< n 0 )\n       (f (+ cnt n) coll)\n       (f n coll))))","problem":44,"user":"52b2d16ae4b0c58976d9acf8"},{"problem":44,"code":"(fn rotate1 [rotations col]\n  (let [rotate-neg (fn [coll] (cons (last coll) (butlast coll)))\n        rotate-pos (fn [coll] (reverse (cons (last (reverse coll)) (butlast (reverse coll)))))\n        direction (if (neg? rotations) rotate-neg rotate-pos)\n        ]\n    (loop [coll col counter (Math/abs rotations)]\n      (if (zero? counter)\n        coll\n        (recur (direction coll) (dec counter))\n        )\n      )\n    )\n  )","user":"57073037e4b0b0fb43fd0689"},{"problem":44,"code":"#(flatten \n  (reverse \n   (split-at \n    (mod %1 (count %2))\n    %2)))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":44,"code":"(fn [x coll]\n    (let [n (mod x (count coll))]\n       (concat (drop n coll) (take n coll))))","user":"60c43b20e4b0e0fa5f1b42c9"},{"code":"(fn [ x s ]\n  (let [r (mod x (count s))]\n    (concat (drop r s) (take r s))))","problem":44,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":44,"code":"(fn rot [n coll]\n  (loop [n (mod n (count coll)) coll coll]\n    (if (zero? n) coll\n      (recur (dec n) (conj (vec (rest coll)) (first coll))))))","user":"555287a4e4b0deb715856df5"},{"problem":44,"code":"(fn [n s]\n            (flatten (map #(% (mod n (count s)) s)\n                          [drop take])))","user":"5d05fdece4b0cc9c915881e8"},{"problem":44,"code":"(fn [n s]\n  (take (count s) (drop (mod n (count s)) (concat s s))))","user":"551ecb76e4b08d5046aa8a4c"},{"problem":44,"code":"(fn [n xs]\n  (let [n (rem n (count xs))]\n  (if (> n 0)\n    (concat (drop n xs) (take n xs))\n    (concat (take-last (- n) xs) (drop-last (- n) xs)))))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":44,"code":"(fn [n s]\n    (if (pos? n)\n      (let [n (if (> n (count s))\n                (- n (count s))\n                n)]\n        (concat (drop n s)\n                (take n s)))\n      (let [n (* n -1)\n            n (if (> n (count s))\n                (- n (count s))\n                n)]\n        (concat (take-last n s)\n                (drop-last n s)))))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":44,"code":"(fn [x coll] (let [len (count coll)\n                   x (mod (if (< x 0) (+ len x) x) len)] (concat (drop x coll) (take x coll))))","user":"58acca5ee4b0005cfeb1a753"},{"problem":44,"code":"(fn [offset coll]\n  (let [index (mod offset (count coll))]\n    (concat (drop index coll) \n            (take index coll))))","user":"56c33ceae4b05cc29241ee89"},{"code":"(fn [a b]\n  ((fn myRot [data start cnt finish result]\n    (if (empty? data)\n      result\n      (myRot\n        (rest data)\n        start\n        (inc cnt)\n        finish\n        (if (<= start cnt finish)\n          (conj result (first data))\n          result\n        )\n      )\n    )\n  ) (concat b b) (mod a (count b)) 0 (+ (mod a (count b)) (- (count b) 1)) [])\n)","problem":44,"user":"4f16d6ed535d64f60314644f"},{"code":"#(let [i (mod %1 (count %2))]\n  (concat (drop i %2) (take i %2)))","problem":44,"user":"509160dae4b0742c82730aef"},{"code":"#(apply concat (rseq (split-at (mod %1 (count %2)) %2)))","problem":44,"user":"4ee1f2ba535d10e5ff6f535f"},{"code":"#(let [n (count %2) \n        s (mod %1 n)] \n    (take n (drop s (concat %2 %2))))","problem":44,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":44,"code":"(fn [pos coll]\n  (let [k (mod pos (count coll))]\n    (concat (drop k coll) (take k coll))))","user":"5576f299e4b05c286339e077"},{"problem":44,"code":"(fn [n coll]\n  (let [xs (seq coll)]\n    (cond\n      (= n 0) xs\n      (> n 0) (recur (dec n) (concat (rest xs) (list (first xs))))\n      (< n 0) (recur (inc n) (cons (last xs) (butlast xs))))\n    ))","user":"54d2892fe4b0e8a36923e5f7"},{"problem":44,"code":"#(flatten (reverse (split-at (mod %1 (count %2))  %2)))","user":"5417385fe4b01498b1a71a08"},{"problem":44,"code":"(fn r [x y] \n  (if (= x 0) \n    y\n    (if (> x 0) \n      (r (dec x) (concat (rest y) [(first y)]))\n      (r (inc x) (concat [(last y)] (butlast y))))))","user":"5a14228fe4b0ff51aa4b3193"},{"code":"#(let [n (count %2)]\n   (concat (drop (mod %1 n) %2)(take (mod %1 n) %2)))","problem":44,"user":"50a83315e4b054305ba5a830"},{"code":"(fn [delta ls]\n  (let [dls (concat ls ls)\n        startIndex (mod delta (count ls))]\n    (take (count ls) (drop startIndex dls))))","problem":44,"user":"51df825de4b01188f062752b"},{"code":"(fn [i elems]\r\n  (let [marker (mod i (count elems))]\r\n    (concat (drop marker elems) (take marker elems))))","problem":44,"user":"502d4ea0e4b02fc10c6c6e46"},{"problem":44,"code":"#(let [c (count %2)] (take c (drop (if (neg? %1) (+ c (rem %1 c)) %1) (cycle %2))))","user":"590b055ae4b047aa04b199c9"},{"problem":44,"code":"(fn [n coll]\n  ;; 先计算n\n  (loop [i n ct (count coll)]\n    (if (and (>= i 0)\n             (<= i ct))\n      (let [collx (partition-all i coll)]\n        (flatten (conj (first collx) (rest collx))))\n      (if (< n 0)\n        (recur (+ i  ct) ct)\n        (recur (- i ct) ct)))))","user":"5823d3e6e4b051871117beb8"},{"problem":44,"code":"(fn [a b] ((fn [a b] (concat (nthnext a b) (take b a)))\n           b (mod a (count b))))","user":"55af7e21e4b03311e7b732cc"},{"code":"#(let [size (count %2)]\n   (take size (drop (mod % size) (cycle %2))))","problem":44,"user":"4f036d9b535dcb61093f6ac1"},{"code":"#(let [num (mod % (count %2))]\r\n  (concat (drop num %2) (take num %2)))","problem":44,"user":"502ac868e4b0614b5299611a"},{"code":"#(loop [c %2\r\n        f (if (> %1 0) \r\n             (fn [x] (concat (rest x) (list (first x))))\r\n             (fn [x] (cons (last x) (butlast x))))\r\n        r (if (> %1 0) %1 (- %1))]\r\n  (if (= r 0)\r\n    c\r\n    (recur (f c) f (- r 1))))","problem":44,"user":"4e5bdc2b535d8a8b8723a2bb"},{"problem":44,"code":"#(let [v (vec %2)\n       i (mod %1 (count %2))] \n   (concat \n    (subvec v i) (subvec v 0 i)))","user":"56949fc5e4b0dcc4269f4120"},{"problem":44,"code":"(fn [rotate-value list-to-rotate]\n   (let [list-size (count list-to-rotate)\n         rotate-value-adjusted (+ rotate-value\n                                  (first (filter #(pos? (+ %1 rotate-value))\n                                                 (iterate (partial + list-size)\n                                                          list-size))))]\n     (nthrest (take (+ list-size rotate-value-adjusted)\n                    (cycle list-to-rotate))\n              rotate-value-adjusted)))","user":"57280b92e4b0c5bde472c14e"},{"problem":44,"code":"(fn rot [r s]\n  (let [c (count s)\n        skip (mod (+ c r) c)]\n    (take c (drop skip (cycle s)))))","user":"5880e38fe4b0f1effa3b7625"},{"problem":44,"code":"(fn [x y] (let [c (mod x (count y))]\n            (concat (drop c y) (take c y))))","user":"5cfee28de4b0cc9c91588185"},{"problem":44,"code":"(fn [n col]\n      (let [n (mod n (count col))]\n        (concat (drop n col)\n                (take n col))))","user":"50a3ad0ee4b0ceace084d493"},{"code":"(fn [n xs]\n  (let [len (count xs)]\n\n  (take len (drop (mod n len) (cycle xs)))))","problem":44,"user":"526e5be8e4b03e8d9a4a731c"},{"problem":44,"code":"#(take (count %2)\n        (drop\n         (+ (* (count %2) 2) %1)  (cycle %2)))","user":"576e607ae4b0979f89651579"},{"problem":44,"code":"(fn rotate [n s]\n  (cond\n    (neg? n) (rotate (+ n (count s)) s)\n    (zero? n) s\n    true (rotate (dec n) (conj (vec (rest s)) (first s)))))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":44,"code":"#(apply \n   concat\n   (reverse \n    (split-at (mod  %1 (count %2)) %2 )))","user":"55249f64e4b0882d96d091c6"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [len (count coll)]\n    (let [k (rem n len)]\n      (if (> k 0)\n        (concat (drop k coll) (take k coll))\n        (concat (take-last (- k) coll) (drop-last (- k) coll))\n        )))\n  )","user":"53ef3adfe4b0742d9025b0c9"},{"code":";if we're playing golf\n#(flatten ((juxt drop take) (mod %1 (count %2)) %2))\n\n;otherwise\n#_(fn [n coll]\n    (let [n* (mod n (count coll))]\n      (concat (drop n* coll) (take n* coll))))","problem":44,"user":"4f4ff836e4b03ad3f0c10cf4"},{"code":"(fn fuu [x s]\t(drop (+ x (* (dec (Math/abs x)) (count s))) (take (+ x (* (Math/abs x) (count s))) (cycle s))))","problem":44,"user":"4f3b5219e4b0e243712b1f2a"},{"problem":44,"code":"(fn rot [n s]\n  (cond\n   (= n 0) s\n   (< n 0) (rot (+ n (count s)) s)\n   :else (rot (dec n) (conj (apply vector (rest s)) (first s)))))","user":"565e0934e4b068f2fe63dc30"},{"problem":44,"code":"(fn [shifts coll]\n   (loop [counter shifts\n          out coll]\n     (cond \n      (= 0 counter) out\n      (> 0 counter) (recur (inc counter) (cons (-> out reverse first) (-> out reverse rest reverse)))\n      (< 0 counter) (recur (dec counter) (reverse (cons (first out) (-> out rest reverse)))))))","user":"575086e7e4b02ea114799276"},{"code":"(fn [n coll]\n  (let [l (mod n (count coll))]\n    (concat (drop l coll) (take l coll))))","problem":44,"user":"515ddb99e4b006bb7a2497ca"},{"code":"#(letfn [(l [s] (concat (rest s) [(first s)]))\n         (r [s] (concat [(last s)] (drop-last s)))]\n   (let [f (if (> 0 %1) r l)\n         n (Math/abs %1)]\n     (reduce (fn [a _] (f a)) %2 (range n))))","problem":44,"user":"52d1e364e4b0d9f9285948e7"},{"problem":44,"code":"(fn [n s] (let [c (count s)] (take c (drop (mod n c) (cycle s)))))","user":"54da46e5e4b024c67c0cf753"},{"problem":44,"code":"(fn [offset coll]\n  (let [coll-size (count coll)]\n    (take coll-size (drop (mod offset coll-size) (cycle coll)))))","user":"57e79d8ee4b0bfb2137f5afe"},{"code":"(fn ! [i c] \n  (let [co (count c) il (map #(mod (+ % i) co) (range co))]\n    (map #(nth c %) il)))","problem":44,"user":"511ac026e4b0c87c59c9670e"},{"code":"#(let [p (fn [num n] (if (< n 0) (+ n num) (rem n num)))\r\n       n (first (filter (partial < 0) (drop 1 (iterate (partial p (count %2)) %1)))) \r\n       ]\r\n  (apply concat (reverse \r\n   (split-at n %2))))","problem":44,"user":"4def301c535d08e6dec9fe12"},{"problem":44,"code":"(fn [n s]\n    (let [offset (rem (Math/abs n) (count s))\n          amt (if (< n 0)\n                (- (count s) offset)\n                offset)]\n      (concat (drop amt s) (take amt s))))","user":"55f081bbe4b06e875b46ce25"},{"problem":44,"code":"(fn rotate [rotate-by col] (let [rotated-map (group-by #(mod (- (.indexOf col %) rotate-by) (count col)) col)]\n                               (doall (map-indexed (fn [index _] (first (get rotated-map index))) col))))","user":"5d45bd1de4b07c84aa5ae6a4"},{"problem":44,"code":"(fn [rot-n coll]\n    (let [n (mod rot-n (count coll))]\n      (into (vec (drop n coll)) (take n coll))))","user":"54508859e4b0e397800069a3"},{"code":"(fn [n c] (let [l (count c)\n                s (if (or (< l (* -1 n)) (< l n)) (mod n l) n)\n                s (if (neg? s) (+ l s) s)]\n            (concat (drop s c) (take s c))))","problem":44,"user":"4ff8a89de4b0678c553fc39d"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)\n        n (rem n c)\n        s (if (neg? n) (+ c n) n)\n        [f l] (split-at s coll)]\n    (concat l f)))","user":"50666699e4b03d366d7cb2b0"},{"problem":44,"code":"(fn [by s]\n  (if (= by 0)\n    s\n  (let [len (count s)\n        by (rem (+ len (rem by len)) len)]\n    (concat (drop by s) (take by s)))))","user":"556159fae4b0c656e3ff17c7"},{"code":"(fn [n s] (let [c (cycle s), m (count s), d (if (< n 0) (mod n m) n)]\n                        (->> (drop d c) (take m) ) ))","problem":44,"user":"4ee7d177535d93acb0a6686f"},{"problem":44,"code":"(fn [n coll] (let [cn (count coll)] (take cn (drop (mod n cn) (concat coll coll)))))","user":"539e717fe4b0ca733b974488"},{"code":"(fn [number array] \n  (let [index (mod number (count array))] \n    (flatten ((partial (juxt drop take) index) array))))","problem":44,"user":"520f46f9e4b0101e4be6fcee"},{"code":"#(let [x (mod % (count %2))] \n   (concat (drop x %2) (take x %2)))","problem":44,"user":"531308c1e4b08068f379ed04"},{"problem":44,"code":"(fn rotate [n coll]\n  (cond (pos? n) (rotate (dec n) (take (count coll) (drop 1 (cycle coll))))\n        (neg? n) (rotate (inc n) (cons (last coll) (butlast coll)))\n        :else coll))","user":"58ffac9de4b0438e51c2cffd"},{"code":"(fn rotate [n col]\n  (cond\n   (= n 0) col\n   (< n 0) (reverse (rotate (* -1 n) (reverse col)))\n   :else (let [n (mod n (count col))] (concat (drop n col) (take n col)))))","problem":44,"user":"51e61772e4b0efabf93c02e2"},{"code":"(fn [n coll]\n  (let [length (count coll) pos (mod n length)]\n    (concat (drop pos coll) (take pos coll))))","problem":44,"user":"5126dbabe4b083bb8f88cf0e"},{"code":"(fn [x xs]\n  (nthrest \n   (take (+ (mod x (count xs)) (count xs)) (cycle xs)) \n   (mod x (count xs))))","problem":44,"user":"52471ac0e4b05ef8e38e6354"},{"problem":44,"code":"(fn [n sq] (map #((if (vector? sq) get nth) sq (mod (+ n %) (count sq))) (range (count sq))))","user":"5810b899e4b0f478707a05d8"},{"problem":44,"code":"(fn rotate2\n  [index coll]\n  (let [fixed-index (mod index (count coll))]\n    (cond\n      (= 0 fixed-index) coll\n      :else (concat (drop fixed-index coll) (take fixed-index coll)  )\n      )\n    )\n  )","user":"5e9d99f9e4b0157ca9664806"},{"code":"(fn [n c]\n  (let [nn (if (< 0 n) n (+ (count c) n))]\n    (take (count c) (drop (mod nn (count c)) (cycle c)))))","problem":44,"user":"52173464e4b082aa80a88c75"},{"problem":44,"code":"#( flatten ( reverse ( split-at ( mod %1 ( count %2 ) ) %2 )  ) )","user":"5d5c6675e4b09db18d4482ec"},{"problem":44,"code":"(fn [dir s] (let [dir (mod dir (count s)) sq s] (flatten (conj (take dir sq) (nthrest sq dir)))))","user":"5ddd3cbee4b0948ae9d9adc3"},{"problem":44,"code":"(fn rotate-seq\n  [x xs]\n  (letfn [(append [xs]\n            (concat (drop 1 xs) [(first xs)]))\n          (prepend [xs]\n            (concat [(last xs)] (butlast xs)))]\n    (if (> x 0)\n      (last (take (inc x) (iterate append xs)))\n      (last (take (inc (- x)) (iterate prepend xs))))))","user":"56504dc2e4b0284900eef6bc"},{"code":"(fn rotate [n xs] \n  (let [lxs (apply concat (repeat xs))\n        len (count xs)\n        start (rem (+ len (rem n len)) len)] \n    (take len (drop start lxs) )))","problem":44,"user":"50fe2b87e4b03cd852b4e84b"},{"problem":44,"code":"(fn p44 [y x]\n  (if (= y 0)\n    x\n    (if (< y 0)\n      (p44 (inc y) (vec (cons (last x) (butlast x))))\n      (p44 (dec y) (concat (rest x) [(first x)]))\n    )))","user":"5400e918e4b0de5c41848619"},{"code":"(fn [n l]\n   (let [r (mod n (count l))]\n     (concat\n      (drop r l)\n      (take r l))))","problem":44,"user":"5084cb7de4b0fb8f40674bfb"},{"problem":44,"code":"(fn rot [n [x & xs :as lst]]\n  (cond\n    (zero? n) lst\n    (< n 0)   (rot (+ (count lst) n) lst)\n    :else     (rot (dec n) (concat xs [x]))))","user":"55d5e80ee4b0e31453f64a91"},{"problem":44,"code":"(fn [n col]\n  (let [len (count col)\n        double-col (vec (take (* 2 len) (cycle col)))\n        start (mod n len)\n        end (+ start len)]\n    (seq (subvec double-col start end))))","user":"5cdda90ce4b05ee0cb311766"},{"problem":44,"code":"(fn [n xs]\n  (let [l (count xs)]\n    (take l (drop (mod (+ n l) l) (cycle xs)))))","user":"55fee5e4e4b00f4cabc5765a"},{"code":"(fn [n coll]\n  (let [c (mod n (count coll))]\n    (concat (drop c coll) (take c coll))))","problem":44,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":44,"code":"(fn rotate-sequence\n  [n s]\n  (let [c (mod n (count s))]\n    (concat (drop c s) (take c s))))","user":"5f3103aee4b0574c87022c24"},{"code":"(fn [x s] (let [n (cond (> x 0) (rem x (count s)) (< x 0) (- (count s) (rem (* -1 x) (count s))))] (concat (drop n s) (take n s))))","problem":44,"user":"4ff76effe4b0678c553fc390"},{"problem":44,"code":"(fn [m xs] \n  (let [len (count xs) \n        i (mod (if (< m 0) (+ len m) m) len) \n        [a b] (split-at i xs)] \n    (concat b a)))","user":"549cc867e4b0f3d1d8e70f8f"},{"problem":44,"code":"(fn [n coll] (let [coll-size (count coll)\n        start (mod n coll-size)\n        ]\n    (concat\n      (take-last (- coll-size start) coll)\n      (take start coll)\n      )\n    ))","user":"5df54584e4b03c219ef1a38f"},{"problem":44,"code":"(fn[index  s] (let [ i (mod index (count s))]\n( concat ( drop i s)(take i s))) )","user":"5a1c8c26e4b0ff51aa4b3247"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [rotation (mod n (count coll))\n        length (count coll)\n        vector (vec coll)]\n    (loop [idx rotation\n           handled 0\n           res []]\n      (if (= handled length)\n        res\n        (recur (inc idx) (inc handled) (conj res (get vector (mod idx length)))))\n      )\n    ))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":44,"code":"#(let [len (count %2)]\n  (take len (drop (mod %1 len) (cycle %2))))","user":"585d9558e4b0f14aab7c879c"},{"code":"(fn [n xs]\n  (let [i (mod n (count xs))\n        [l r] (split-at i xs)]\n    (concat r l)))","problem":44,"user":"522b922ee4b0d34ee08e71c3"},{"problem":44,"code":"(fn [x s]\n    (let [i (mod x (count s))]\n      (concat (drop i s) (take i s))))","user":"537bde5de4b06839e8705e73"},{"problem":44,"code":"(fn \n  [n xs]\n  (take (count xs) (drop (if (< n 0) (+ n (* 2 (count xs))) n) (cycle xs))))","user":"5614fa1de4b05f002753dfbe"},{"problem":44,"code":"(fn [n xs]\n  (if (= n 0)\n    xs\n    (let [new-args\n          (if (> n 0)\n            [(dec n) (concat (rest xs) [(first xs)])]\n            [(inc n) (concat [(last xs)] (take (dec (count xs)) xs))])]\n      (recur (first new-args) (second new-args)))\n    ))","user":"561cb6cfe4b064ca9f4b169e"},{"code":"(fn [n coll]\n  (let [nn (mod n (count coll))]\n    (concat (nthrest coll nn) (take nn coll))))","problem":44,"user":"502bb7c0e4b0194ad32ea1a3"},{"problem":44,"code":"#(nth (iterate\n       (fn [s] (if (neg? %)\n                 (concat [(last s)] (drop-last s))\n                 (concat (rest s) [(first s)]))\n         ) %2)\n  (Math/abs %))","user":"55fc07d3e4b0f488688e066e"},{"code":"(fn self [n xs]\n  (if (= n 0)\n    xs\n    (if (pos? n)\n      (self (dec n) (conj (vec (drop 1 xs)) (first xs)))\n      (self (inc n) (cons (last xs) (vec (drop-last xs)))))))","problem":44,"user":"524b90fae4b09eba1c0223df"},{"code":"(fn [n coll] (take (count coll) (drop (+ n (* 10 (count coll))) (cycle coll))))","problem":44,"user":"4f2d4d4ce4b0d6649770a058"},{"problem":44,"code":"(fn rotate [n s]\n  (let [end (mod n (count s))]\n    (concat (take-last (- (count s) end) s) (take end s))))","user":"55885edae4b059ccff29b1f6"},{"code":"#(if (> % 0) \n  (concat (drop (mod % (count %2)) %2) (take (mod % (count %2)) %2))\n  (concat (take-last (mod (* -1 %) (count %2)) %2) (drop-last (mod (* -1 %) (count %2)) %2)))","problem":44,"user":"4eebfd03535d93acb0a668ab"},{"problem":44,"code":"(fn [d s]\n  (let [pos (mod d (count s))]\n    (drop pos (take (+ (count s) pos) (cycle s)))))","user":"57b19fa1e4b0fbc9809a2754"},{"problem":44,"code":"(fn rotate [shift coll]\n (let [n (count coll)]\n  (cond \n   (neg? shift)\n    (rotate (+ n shift) coll)\n   (>= shift n)\n    (rotate (- shift n) coll) \n   :else \n    (flatten \n     (reverse\n      (split-at shift \n                coll))))))","user":"55d2dd27e4b0e31453f64a5b"},{"code":"(fn [r l]\n(take (count l) (drop (+ (mod r (count l)) (count l)) (cycle l))))","problem":44,"user":"4fabb1dce4b081705acca21a"},{"code":"(fn [n a]\n  (let [l (mod n (count a))]\n    (concat \n     (drop l a)\n     (take l a))))","problem":44,"user":"5376966ae4b06839e8705e27"},{"problem":44,"code":"(fn [index some-seq]\n  (let [len (count some-seq)\n        update-index (fn r[index]\n                        (if (pos? index) \n                          index\n                          (r (+ len index))))\n        final-index (cond \n                      (> index len) (- index len)\n                      (neg? index) (update-index index)\n                      :else index)\n        ]\n    \n    (concat \n      (drop final-index some-seq)\n      (take final-index some-seq)\n      )))","user":"5a932f63e4b0d174b936c71b"},{"problem":44,"code":"#(take (count %2)  (drop (mod % (count %2) ) (cycle %2)))","user":"56785234e4b05957ce8c6177"},{"code":"#(let [n (mod %1 (count %2))]\r\n  (concat (drop n %2) (take n %2)))","problem":44,"user":"4ddbfb8a535d02782fcbea00"},{"problem":44,"code":"(fn [n-times a-seq]\n  (let [size (count a-seq)\n        n (if (pos? n-times) n-times\n            (+ size (rem n-times size)))]   \n    (take size (drop n (flatten (repeat a-seq))))))","user":"56b6a50ae4b0982f16b37e3c"},{"problem":44,"code":"(fn [n xs]\n  (let [l (count xs)]\n    (take l\n          (drop (mod n l) (cycle xs)))))","user":"5ddb8a6ee4b0948ae9d9adb2"},{"problem":44,"code":"(fn [a banyak]\n  (take (count banyak) (drop (mod a (count banyak)) (cycle banyak))))","user":"5ff709e4e4b06df49cee149b"},{"code":"(fn f [d s]\n  (cond\n    (zero? d) s\n    (pos? d) (f (dec d) (concat (rest s) [(first s)]))\n    :else (f (inc d) (concat [(last s)] (butlast s)))))","problem":44,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":44,"code":"(fn rotate [amount seq]\n  (if (> (Math/abs amount) (count seq))\n    (do\n      (println \"Rotating by\" (rem amount (count seq)))\n      (rotate (rem amount (count seq)) seq)\n      )\n    (if (neg? amount)\n      (let [pos-amount (* -1 amount)]\n        (concat (take-last pos-amount seq) (drop-last pos-amount seq))\n        )\n      (concat (drop amount seq) (take amount seq))\n      )\n    )\n  )","user":"5aada061e4b073f17744257a"},{"problem":44,"code":"(fn\n  [n s]\n  (let [a (mod n (count s))\n        sa (take a s)\n        sb (drop a s)]\n    (concat sb sa)))","user":"55478ce2e4b0a04f7929954e"},{"code":"(fn [x s]\n  (let [l (count s)\n        n (mod (+ x l) l)]\n    (concat (drop n s) (take n s))\n    ))","problem":44,"user":"511b900ae4b00c2a1fa7ff6a"},{"problem":44,"code":"(fn [deg sq] \n  (loop [deg deg sq (seq sq)]\n    (cond \n     (> deg 0) (recur (dec deg) (concat (next sq) [(first sq)]))\n     (< deg 0) (recur (inc deg) (concat [(last sq)] (butlast sq)))\n     :else sq\n     )))","user":"55b527cbe4b01b9910ae2985"},{"problem":44,"code":";;(fn rot [n s]\n;;  (let [ops (if (< n 1)\n ;;             {:ds identity :pop last :rest butlast :n (* -1 n)}\n ;;             {:ds vec :pop first :rest rest :n n})]    \n ;;   (loop [n (:n ops)\n ;;          s s]\n ;;     (if (< n 1)\n ;;       s\n ;;       (recur (dec n) (conj ((:ds ops)((:rest ops) s)) ((:pop ops) s\n ;;       )))))))\n \n#(let [x (mod % (count %2))]\n   (concat (drop x %2) (take x %2)))\n\n;; #(reduce (fn [x y] (concat y x))\n;;  \t(split-at (mod %1 (count %2)) %2))","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn rotate [n xs]\n  (let [point (mod n (count xs))\n        [left right] (->>\n                       (map-indexed vector xs)\n                       (split-with #(< (first %) point)))]\n    (concat (map second right) (map second left))))","problem":44,"user":"4edecdae535d10e5ff6f533c"},{"code":"(fn [n col]\n  (loop [n n\n         col col]\n    (cond (= 0 n) col\n          (> n 0) (recur (dec n) (concat (rest col) (list (first col))))\n          (< n 0) (recur (inc n) (concat (take-last 1 col) (butlast col))))))","problem":44,"user":"517d755ce4b0f5e87c18f263"},{"problem":44,"code":"(fn [n s] ( apply concat (reverse (split-at (mod n (count s)) s))))","user":"585030cbe4b0b7285a6f4e78"},{"problem":44,"code":"(fn rotate [n a-seq]\n  (let [idx (mod n (count a-seq))]\n   (concat (drop idx a-seq) (take idx a-seq))))","user":"580d2788e4b0849f6811b730"},{"problem":44,"code":"(fn [r l]\n  (let [a (mod r (count l))] \n    (concat (drop a l)\n            (take a l))))","user":"5520af03e4b08d5046aa8a64"},{"code":"#(concat (subvec (vec %2) (mod %1 (count %2))) (subvec (vec %2) 0 (mod %1 (count %2))))","problem":44,"user":"52baefbae4b07a9af57922da"},{"problem":44,"code":"(fn [n s] \n  (let [l (count s)\n          r (mod n l)]\n    (->> (cycle s)\n            (drop r)\n            (take l))))","user":"5f2d6bc4e4b033932238a66e"},{"problem":44,"code":"(fn f[n se]\n    (let [x (count se)]\n      (flatten (reverse (split-at (mod (+ x n) x) se)))\n    )\n)","user":"5c337305e4b0d62ef62d9f48"},{"problem":44,"code":"(fn rotate [n x] (take (count x)(drop (mod n (count x)) (flatten (iterate identity x)))))","user":"568820e8e4b0dcc4269f4067"},{"problem":44,"code":"(fn [n l]\n  (take (count l) (drop (mod n (count l)) (cycle l))))","user":"54dbc6ebe4b024c67c0cf773"},{"problem":44,"code":"(fn [amount sq]\n  (if (>= amount 0)\n    (loop [step amount\n           res sq]\n      (if (= step 0)\n        res\n        (recur (dec step) (concat (rest res) (list (first res))))))\n    (loop [step amount\n           res sq]\n      (if (= step 0)\n        res\n        (recur (inc step) (conj (take (dec (count res)) res) (nth res (dec (count res)))))))))","user":"5d64013ce4b0c9e5857d502d"},{"problem":44,"code":"(fn [n l] (flatten (reverse (split-at (mod n (count l)) l))))","user":"4dadb5f4c9a9d6ed3399dc57"},{"code":"#(let [tam (count %2) off (mod %1 tam)]\r\n   (take tam (drop off (cycle %2))))","problem":44,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"problem":44,"code":"(fn rotate-seq-v2\n\t[n some-seq]\n\t(let [new-seq []\n\t      i (- (count some-seq) (- (Math/abs n) (count some-seq)))\n\t      j (- n (count some-seq))\n\t      k (+ (count some-seq) n)]\n\t     (if (> (Math/abs n) (count some-seq))\n\t         (if (neg? n)\n\t             (mapcat identity (conj new-seq (nthrest some-seq  i  ) (take  i  some-seq)))\n\t             (mapcat identity (conj new-seq (nthrest some-seq j) (take j some-seq))))\n\t         (if (neg? n)\n\t             (mapcat identity (conj new-seq (nthrest some-seq k) (take k some-seq)))\n\t             (mapcat identity (conj new-seq (nthrest some-seq n) (take n some-seq)))))))","user":"5a35d515e4b0ddc586f153e1"},{"problem":44,"code":"(fn [n, coll]\n  (let [r (mod n (count coll))]\n    (concat\n     (drop r coll)\n     (take r coll))))","user":"53bd7080e4b0d9a98559a6d1"},{"problem":44,"code":"(fn [n coll]\n  (let [ntime (Math/abs n)\n        lshift #(concat (rest %) [(first %)])\n        rshift #(cons (last %) (drop-last %))]\n    ( (apply comp (repeat ntime (if (> n 0) lshift rshift))) coll)))","user":"5475d755e4b0c51c1f4d72a0"},{"problem":44,"code":"(fn rotate [point coll]\n  (let [p (mod point (count coll))]\n    (concat (drop p coll) (take p coll))))","user":"590253e3e4b0438e51c2d055"},{"code":"(fn [n lst] \n  (let [mod-n (mod n (count lst))] \n    (concat (take-last (- (count lst) mod-n) lst) (take mod-n lst))))","problem":44,"user":"516733fce4b079759a74a5e9"},{"problem":44,"code":"(fn [n xs]\n    (let [drop-n (+ (count xs) (rem n (count xs)))]\n      (take (count xs) (drop drop-n (cycle xs)))))","user":"5920c191e4b09b4ee5954c61"},{"code":"#(let [shift (mod %1 (count %2))]\n  \t(concat (drop shift %2) (take shift %2)))","problem":44,"user":"5213dbc3e4b0961f15ac4d74"},{"problem":44,"code":"(fn [sh c] (let [dl (< 0 sh) n (mod (* sh (if dl 1 -1)) (count c))]\n   (loop [n n r c]\n     (if (>= 0 n) r\n       (recur (dec n)\n         (if dl (conj (vec (drop 1 r)) (first r)) (cons (last r) (drop-last r)))\n       )\n))))","user":"55adf4d7e4b03311e7b732af"},{"code":"(fn rotate-seq\n  [n coll]\n  (loop [n n\n         coll coll]\n    (cond\n     (> n 0) (recur (dec n) (conj (vec (rest coll)) (first coll)))\n     (< n 0) (recur (inc n) (cons (last coll) (butlast coll)))\n     :else coll)))","problem":44,"user":"51937eb3e4b04df54c098022"},{"problem":44,"code":"(fn rot\n  ([i sq x] (cond (> i 0) (apply concat (reverse (split-at i sq)))\n                :else (apply concat (reverse (split-at (+ (count sq) i) sq)))))\n  ([i sq]\n   (rot (mod i (count sq)) sq nil)))","user":"58a3ba31e4b02bd94d917eff"},{"code":"(fn [x col]\n  (let [h (mod x (count col))]\n  (flatten (conj (take h col) (drop h col)))\n  ))","problem":44,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":44,"code":"(fn my-rotate [n s]\n    (->> s\n         (split-at (mod n (count s)))\n         (reverse)\n         (flatten)\n         )\n    )","user":"57985f98e4b039eba2ecb114"},{"code":"#(let [l (count %2)]\n        (take l (drop (mod %1 l) (cycle %2))))","problem":44,"user":"4f1c9652535d64f603146483"},{"problem":44,"code":"(fn [z xs]\n  (let [n (mod z (count xs))]\n    (concat (drop n xs) (take n xs)) \n  )  \n)","user":"543bb568e4b032a45b869334"},{"problem":44,"code":"(fn [n L] (let [LL (map (fn [x y] (list x y)) L (range)) LN (count L) m (mod n LN)] (map (fn [z] (nth L (mod (+ m (last z)) LN))) LL)))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":44,"code":"(fn rot82 [n s]\n  (let\n      [split-point (+  (rem n (count s))\n                       (if (< n 0) (count s) 0))]\n    (apply concat (reverse (split-at split-point s)))))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":";(fn [n xs]\n;  (let [n (->> xs count (mod n) inc)\n;        rot1 (fn [xs] (concat (rest xs) [(first xs)]))]\n;    (->> \n;      (iterate rot1 xs)\n;      (take n)\n;      last)))\n\n(fn [n xs]\n  (let [n (mod n (count xs))]\n    (concat (drop n xs) (take n xs))))","problem":44,"user":"4f7207d3e4b07046d9f4f019"},{"code":"(fn rotate [n xs]\n   (let [cnt (count xs)\n         n'  (mod n cnt)\n         n'' (if (pos? n') n' (+ cnt n'))]\n     (concat (drop n'' xs) (take n'' xs))))","problem":44,"user":"52e55e16e4b09f7907dd1460"},{"code":"(fn [n coll] \n  (let [max (count coll)\n        offset (+ max (rem n max))]\n    (take max (drop offset (cycle coll)))))","problem":44,"user":"51a584c7e4b051b01d55f44e"},{"code":"(fn [n coll]\n  (let [N (count coll)\n        n' (mod (+ N (mod n N)) N)]\n    (take N (drop n' (cycle coll)))))","problem":44,"user":"4f89d489e4b033992c121c7e"},{"problem":44,"code":"(fn [n xs]\n  (let [xl (count xs)\n        i (if (< 0 n)\n            (Math/abs n)\n            n)\n        x (mod i xl)]\n  (loop [m x\n         h '()\n         t xs]\n    (if (zero? m)\n      (concat t (reverse h))\n      (recur \n       (dec m)\n       (cons (first t) h)\n       (rest t))))))","user":"4eb47bb1535d7eef30807362"},{"problem":44,"code":"(fn circular-permutation\n  [step s]\n  (let [offset (mod (+ (count s) step) (count s)) ]\n  (concat (drop offset s) (take offset s))))","user":"5272645de4b03e8d9a4a742c"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n      (concat (drop n %2) (take n %2)))","user":"6087cb25e4b0ae75613dced8"},{"problem":44,"code":"(fn rotate-seq [i s]\n  (let [n (count s)\n        j (mod i n)]\n    (concat (drop j s) (take j s))\n    )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"code":"#(let [[x y]\n  \t\t(split-at\n\t\t\t\t(if (> %1 0)\n\t\t\t\t\t(rem %1 (count %2))\n\t\t\t\t\t(- (count %2) (rem (- %1) (count %2)))\n\t\t\t\t\t)\n\t\t\t\t%2)]\n\t\t\t(concat y x)\n\t\t\t)","problem":44,"user":"5048bcf8e4b06e644c63f1ae"},{"code":"#(take (count %2) (nthrest (cycle %2) (+ %1 (* 2 (count %2)))))","problem":44,"user":"514b66f4e4b0bd81940b86cb"},{"problem":44,"code":"(fn rotate\n  [by coll]\n  (let [abs (mod by (count coll))]\n    (concat (drop abs coll) (take abs coll))))","user":"5609d328e4b05f002753deee"},{"problem":44,"code":"(fn rotation [n coll]\n (take-last (count coll) (concat coll (take (mod n (count coll)) coll))))","user":"58eba5cce4b056aecfd47d41"},{"code":"#(let [x (count %2)] (take x (drop (mod % x) (cycle %2))))","problem":44,"user":"526a7025e4b03e8d9a4a722a"},{"problem":44,"code":"#(let [len (count %2)]\n   (take len (drop (mod %1 len) (cycle %2))))","user":"5da05bcce4b000c986472bd0"},{"code":"#(\n  take (count %2) (drop (if (< % 0) (+ % (* 2 (count %2))) %) (cycle %2))\n  )","problem":44,"user":"50ad7888e4b0a40c9cfb08c7"},{"code":"(fn [n l]\n  (let [[a b] (split-at (mod n (count l)) l)]\n    (concat b a)))","problem":44,"user":"504e72cee4b0f6ff3350c4b4"},{"problem":44,"code":"(fn [n col] (take (count col) (drop (mod n (count col)) (cycle col))))","user":"5ba947bfe4b0a20761a23440"},{"code":"(fn [n v] \r\n   (loop [n n c (count v)] \r\n           (cond(< n 0) (recur (+ n c) c )\r\n            (>= n c) (recur (- n c) c)\r\n            :else (concat (subvec (into [] v) n) (subvec (into [] v) 0 n)))))","problem":44,"user":"4fdf566fe4b05e33b9224f99"},{"code":"(fn [n xs] (let [N (count xs)] (take N (drop (mod n N) (cycle xs)))))","problem":44,"user":"50742549e4b054001656accf"},{"problem":44,"code":"(fn rotate-seq [n values] (\n  if (> n 0)\n    (if(> n (count values))\n      (rotate-seq (- n (count values)) values)\n      (concat (drop n values) (take n values))\n    )\n    (if(> (* -1 n) (count values))\n      (rotate-seq (+ n (count values)) values)\n      (concat (drop (+ (count values) n) values) (take (+ (count values) n) values))\n    )\n    \n))","user":"602bca69e4b0d5df2af22267"},{"problem":44,"code":"(fn [n l]\n  (for [c (range (count l))\n        :let [i (+ c n)\n              j (mod i (count l))]]\n    (nth l j)))","user":"536673a8e4b0243289761e76"},{"problem":44,"code":"#(let [k (mod %1 (count %2))]\n     \t(concat (drop k %2) (take k %2)))","user":"53e76728e4b036ad0777e47c"},{"code":"(fn [nb xs] \n  (cond \n    (= nb 0) xs\n    (> nb 0) (recur (dec nb) (conj (vec (rest xs)) (first xs)))\n    :else (recur (inc nb) (cons (last xs) (butlast xs)))))","problem":44,"user":"4fb1fa51e4b081705acca283"},{"code":"(fn [n [x & xs :as coll]]\n    (cond\n     (zero? n) coll\n     (< 0 n) (recur (dec n) (concat xs [x]))\n     :else (recur (inc n) (cons (last coll) (butlast coll)))))","problem":44,"user":"4ed2a92b535d44c135fd68dc"},{"code":"(fn [f xs]\n  (let [rf (mod f (count xs))]\n    (concat (drop rf xs) (take rf xs))))","problem":44,"user":"4f072644535dcb61093f6c20"},{"code":"#(let [s (mod % (count %2))]\n(into (take s %2) (reverse (drop s %2))))","problem":44,"user":"4fe8e719e4b0547ebccb2430"},{"problem":44,"code":"(fn [n coll]\n  (let [indexes (range (count coll))\n        rotated-indexes (map (partial + n) indexes)\n        rotated-indexes (map #(mod % (count coll)) rotated-indexes)]\n  (map #(nth coll %) rotated-indexes)))","user":"5a388675e4b001c08efc0ca2"},{"problem":44,"code":"(fn [n coll]\n  (loop [n n\n         coll coll]\n    (cond \n      (zero? n) coll\n      (> n 0) (recur (dec n) (conj (vec (rest coll)) (first coll)))\n      :else (recur (inc n) (conj (seq (pop (vec coll))) (last coll))))))","user":"53ab94cae4b047364c044450"},{"problem":44,"code":"(fn [n coll]\n\t(if-let [s (seq coll)]\n\t\t(let [len (count s)\n\t\t\t pos (if (neg? n) (+ len (rem n len)) (rem n len))]\n\t\t\t(concat (nthrest s pos) (drop-last (- len pos) s)))\n\t\t))","user":"572ec4dde4b0cd1946bd0f8d"},{"code":"(fn [n xs] (let [m (mod n (count xs))] (concat (drop m xs) (take m xs))))","problem":44,"user":"52618ea3e4b03e8d9a4a7064"},{"problem":44,"code":"(fn [rot lst] (let [r (mod rot (count lst))]\n                      (concat (drop r lst)\n                              (take r lst))))","user":"55a1d7f6e4b0acc240e31519"},{"code":"(fn [n coll]\n  (let [shift (if (neg? n) (- n) n)\n        neg #(concat (rest %) [(first %)])\n        pos #(cons (last %) (drop-last %))]\n    ((apply comp (repeat shift (if (neg? n) pos neg))) coll)))","problem":44,"user":"510f0b95e4b0faca7c680138"},{"problem":44,"code":"(fn r [n coll]\n  (let [c (count coll)\n        n (rem (+ n (* (max n (- n)) c)) c)]\n    (concat (drop n coll) (take n coll))\n    )\n  )","user":"5245e320e4b09dbe66b56177"},{"code":"(fn rotate [a_num a_sequ]\n  (cond \n  (< a_num 0)\n\t  (loop [number a_num result a_sequ]\n\t       \n\t    (if (= number 0)\n\t          result\n\t          (recur (inc number) (cons (last result) (take (dec (count result)) result)) )\n\t        )\n\t  )\n\t  (> a_num 0)\n\t  (loop [number a_num result a_sequ]\n\t\t       \n\t\t    (if (= number 0)\n\t\t          result\n\t\t          (recur (dec number) (concat  (rest result) (list(first result) )))\n\t\t        )\n\t\t  )\n  )\n)","problem":44,"user":"50f87a67e4b0aafb827eb202"},{"problem":44,"code":"(fn [o s]\n  (let [size (count s)\n        indexed (map list (map #(mod (- % o) size) (range)) s)]\n    (map second (sort-by first indexed))))","user":"53c649d3e4b00fb29b221297"},{"problem":44,"code":"#(let [l (count %2)\n       n (mod %1 l)]\n   (concat (drop n %2) (take n %2)))","user":"5097ea89e4b087ccf61a7af4"},{"code":"(fn\n  [x coll]\n  (let [c (count coll)\n        sp (mod x c)]\n    (apply concat (reverse (split-at sp coll)))))","problem":44,"user":"50b35486e4b03ea88043356a"},{"problem":44,"code":"(fn\n  [distance s]\n  (let [steps (mod distance (count s))]\n      (concat (drop steps s) (take steps s))))","user":"4fe899a6e4b07c9f6fd12c54"},{"problem":44,"code":"(fn rotate [n s]\n  (if (= n 0)\n     s\n     (if (< n 0)\n       (rotate (inc n) (concat [(last s)] (take (dec (count s)) s)))\n       (rotate (dec n) (concat (rest s) [(first s)])))\n    \n   )\n  )","user":"55625903e4b0c656e3ff17d7"},{"problem":44,"code":"(fn [n xs]\n  (let [xs (vec xs)\n        n (mod n (count xs))]\n    (concat (subvec xs n) (subvec xs 0 n))))","user":"54d127b7e4b0e8a36923e5de"},{"problem":44,"code":"(fn [n xs]\n  (let [l (count xs)\n        m (if (< n 0) (+ l (rem n l)) n)]\n    (loop [i m\n           [y & ys :as rs] xs\n           ]\n      (if (= 0 i)\n        rs\n        (recur (dec i) (conj (into [] ys) y))))\n    )\n  )","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn rotate [n coll]\n                  (let [m (mod n (count coll))]\n                    (concat (nthnext coll m) (take m coll))))","problem":44,"user":"4e71705e535d5021c1a89649"},{"problem":44,"code":"(fn [x a]\n\t(let [l (fn [v] (concat (rest v) [(first v)]))\n\t\tr (fn[v] (concat [(last v)] (butlast v)))]\n\t(if (> x 0)\n\t\t(nth (iterate l a) x)\n\t\t(nth (iterate r a) (- x)))))","user":"57ccedaae4b0c746388ab88e"},{"problem":44,"code":"(fn [n c] (flatten (reverse (split-at (mod n (count c)) c) ) ) )","user":"57c647bbe4b05aa3c4741cf3"},{"problem":44,"code":"(fn [times seq-]\n  (loop [times times\n         wip-seq seq-]\n    (cond\n      (> times 0) (recur (dec times) (concat (rest wip-seq) (list (first wip-seq))))\n      ;; (< times 0) (recur (inc times) (concat (list (last wip-seq)) (butlast wip-seq)))\n      (< times 0) (recur (inc times) (cons (last wip-seq) (butlast wip-seq)))\n      :else wip-seq)))","user":"54e79094e4b024c67c0cf818"},{"code":"(fn rotate [d s]\n  (if (= d 0)\n    s\n    (if (< d 0)\n      (rotate (+ d 1) (cons (last s) (butlast s)))\n      (rotate (- d 1) (reverse (cons (first s) (reverse (rest s)))))\n)))","problem":44,"user":"4f559d2ce4b0a7574ea71808"},{"problem":44,"code":"(fn f \n  ([s l]\n   (f s (vec l) 0))\n  ([s l x]\n   (if (= s 0)\n     l\n     (if (< 0 s)\n       (recur (dec s) (conj (subvec l 1) (first l)) 0)\n       (recur (inc s) (vec(cons (last l) (pop l))) 0)))))","user":"55e87696e4b0121d4835fd93"},{"code":"(fn f [n xs]\r\n   (if (= n 0)\r\n     xs\r\n     (if (> n 0)\r\n       (f (dec n) (concat (rest xs) (list (first xs))))\r\n       (f (inc n) (concat (list (last xs)) (butlast xs))))))","problem":44,"user":"4e059278535d04ed9115e7a5"},{"problem":44,"code":"#(let [x (mod %1 (count %2))]\n   (concat (drop x %2) (take x %2))\n)","user":"53029281e4b0d8b024fd372e"},{"problem":44,"code":"#(reverse (mapcat reverse (split-at (mod (if (> %1 0) %1 (+ (count %2) %1)) (count %2)) %2)))","user":"552b6ddbe4b0ffed3738f965"},{"problem":44,"code":"#(let [n (count %2)] (->> %2 cycle (drop (mod %1 n)) (take n)))","user":"52ce1abfe4b07d0d72b27389"},{"code":"(fn [a b] (let [x (count b)\n                y (+ (* 3 x) a)\n                \n                z (+ y x)]\n            (drop y (take z (cycle b)))\n            ) )","problem":44,"user":"51aeb1f4e4b09397d5109794"},{"code":"#(if (< %1 0)\n   (let [k (rem (- %1) (count %2))]\n     (concat (take-last k %2) (drop-last k %2)))\n   (let [k (rem %1 (count %2))]\n     (concat (drop k %2) (take k %2))))","problem":44,"user":"515cf9b5e4b00901442db1d4"},{"code":"(fn \n  [i s] \n  (let [v (vec s) i (rem i (count s))] \n    (let [i (if (neg? i) (+ i (count s)) i)] \n      (concat (subvec v i (count v)) (subvec v 0 i)))))","problem":44,"user":"5235a902e4b0a643f2dcb750"},{"code":"(fn [n s]\n     (cond\n       (= n 0) s\n       (> n 0) (recur\n                 (dec n)\n                 (conj (vec (rest s)) (first s)))\n       (< n 0) (recur\n                 (inc n)\n                 (cons (last s) (butlast s)))))","problem":44,"user":"4e6a2f93535d8ccf87e9feaa"},{"code":"(fn [rot a-seq]\n  (let [cut (if (zero? rot) rot (mod rot (count a-seq)))]\n    (if (zero? cut) a-seq\n      (concat (drop cut a-seq) (take cut a-seq)))))","problem":44,"user":"4faa8de0e4b081705acca1f8"},{"problem":44,"code":"(fn [offset arr]\n    (let [len (count arr)]\n      (map #(nth arr (mod (+ % offset) len)) (range len))\n      )\n    )","user":"529e8ba9e4b04e0c58e87b99"},{"code":"#( ->> %2 \n       (split-at (mod %1 (count %2)))\n       reverse\n       (apply concat)\n   )","problem":44,"user":"53691dc7e4b0243289761e97"},{"problem":44,"code":"(fn rotate [num l]\n  (cond \n   (< num 0) (rotate (inc num) (cons (last l) (drop-last l)))\n   (> num 0) (rotate (dec num) (conj (vec (rest l)) (first l)))\n   :else l))","user":"5510aa92e4b06e50f9beb188"},{"code":"(fn my-rot [n coll]\n  (let [tot (count coll) new-n (mod n tot)]\n    (concat (drop new-n coll) (take new-n coll))))","problem":44,"user":"4f04d312535dcb61093f6be7"},{"problem":44,"code":"(fn [a b]\n  (if (< 0 a)\n    (loop [i a res b]\n      \t\t(if (= 0 i)\n                res\n                (recur (dec i) \n                       (#(distinct (concat (drop 1 %2) (take (- (count %2) 1) %2))) i res))))\n            (reverse (loop [i (* -1 a) res (reverse b)]\n      \t\t               (if (= 0 i)\n                               res\n                               (recur (dec i) \n                                      (#(distinct (concat (drop 1 %2) (take (- (count %2) 1) %2))) i res)))))))","user":"594a7ed1e4b07ddc2dafae02"},{"problem":44,"code":"(fn [n s]\n  (take (count s)\n        (drop (mod n (count s)) \n              (cycle s))))","user":"55c652dde4b0e31453f649bd"},{"code":"(fn rot [number sq]\r\n     (let [normalized-number (if (or (pos? number) (zero? number))\r\n               number\r\n               (+ (- (dec (mod number (count sq)))) (count sq)))]\r\n       (loop [s sq\r\n              n normalized-number]\r\n         (if (zero? n)\r\n           s\r\n           (recur (conj (vec (next s)) (first s)) (dec n))))))","problem":44,"user":"4f82e14be4b033992c121c0c"},{"problem":44,"code":"(fn rotate\n  [dir seq]\n  (cond\n    (zero? dir) seq\n    (neg? dir) (rotate (inc dir) ((fn rotate-right\n  [seq]\n  (concat (list (last seq)) (butlast seq) )\n) seq))\n    :else (rotate (dec dir) ((fn rotate-left\n  [seq]\n  (concat (rest seq) (list (first seq)))  \n) seq))\n  )\n)","user":"5d828b7ee4b0915913b1d382"},{"code":"(fn z [n l]\n  (let [len (count l)]\n\t(if (> n 0)\n\t\t(concat (drop (mod n len) l) (take (mod n len) l))\n\t\t(concat (drop (- len (mod (Math/abs n) len)) l)\n\t\t\t\t(take (- len (mod (Math/abs n) len)) l)))))","problem":44,"user":"4fd8544be4b0dab7d829f390"},{"code":"(fn [d xs]\n  (let [xs (vec xs)\n        n (count xs)]\n    (loop [i 0\n           v []]\n      (if (= i n)\n        v\n        (recur (inc i) (conj v (xs (mod (+ d i) n))))))))","problem":44,"user":"51a8f0c6e4b08d8ec191b821"},{"code":"(fn [n coll]\n   (let [cnt (count coll)\n           n (if (pos? n)\n                (rem n cnt)\n                (+ (rem n cnt) cnt))\n           coll coll]\n     (concat (drop n coll) (take n coll))))","problem":44,"user":"4fb99483e4b081705acca2da"},{"problem":44,"code":"(fn [c l]\n  (loop [c c, l l])\n  \t(cond\n      (= 0 c) l\n      (> 0 c) (recur (inc c) (conj (drop-last l) (last l)))\n      (< 0 c) (recur (dec c) (conj (vec (rest l)) (first l)))))","user":"5a19d181e4b0ff51aa4b3207"},{"problem":44,"code":"(fn rotate [how-much my-seq]\n  (let [step (rem how-much (count my-seq))\n        real-step (if (< 0 step) step (+ (count my-seq) step))\n       ]\n       (concat (drop real-step my-seq) (take real-step my-seq))\n  )\n)","user":"528b3f5ae4b0239c8a67ae93"},{"problem":44,"code":"(fn [shift col]\n  (if (= shift 0)\n    col\n    (if (> shift 0)\n      (recur \n        (dec shift)\n        (concat (rest col) (conj nil (first col)))    \n      )\n      (recur\n        (inc shift)\n        (conj (butlast col) (last col))  \n      )\n    )\n  )\n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"problem":44,"code":"(fn rot [n xs]\n  (let [abs (fn [x] (if (pos? x) x (- x)))\n        norm-n (mod (abs n) (count xs))\n        split (if (pos? n) norm-n (- (count xs) norm-n))]\n  \t(apply conj (vec (drop split xs)) (take split xs))))","user":"54ecd716e4b024c67c0cf85a"},{"problem":44,"code":"(fn [n l]\n  (if (= n 0)\n    l\n    (let [list-count (count l) rotate (mod n list-count)]\n        (concat (drop rotate l) (take rotate l))\n      )\n    )\n  )","user":"5998b0a9e4b07157cc8daaed"},{"problem":44,"code":"(fn [n-raw li] (let\n                [n (mod n-raw (count li))]\n                (if (< n 0)\n                          (flatten (list (drop (+ (count li) n) li) (take (+ (count li) n) li)))\n                          (flatten (list (drop n li) (take n li)))\n                          )))","user":"5b20134de4b03cfeda66ed2d"},{"code":"(fn [n sqn] (flatten (conj (take (mod n (count sqn)) sqn) (drop (mod n (count sqn)) sqn))))","problem":44,"user":"50f2e5cee4b0ec8ee6fa8643"},{"problem":44,"code":"(fn rotate-seq [n seq]\n  (letfn [(-rotate-seq [n seq current]\n            (if (= 0 n)\n              (concat seq current)\n              (recur (dec n) (rest seq) (conj current (first seq)))))]\n    (-rotate-seq (mod n (count seq)) seq [])))","user":"5508b405e4b06e50f9beb110"},{"code":"(fn rots [n s]\n  (let [absn (Math/abs n)\n\t\t\t\tcnt (count s)\n\t\t\t\tcorn (cond (> absn cnt) (if (pos? n) (- absn cnt) (- cnt (- absn cnt)))\n\t\t\t\t\t\t\t\t\t (pos? n) n \n\t\t\t\t\t\t\t\t\t :else (- (count s) (- n)))]\n\t (concat (drop corn s) (take corn s))))","problem":44,"user":"4db045b5838c48654951d9be"},{"code":"(fn [n s]\n  (concat (nthrest s (mod n (count s)))\n          (take (mod n (count s)) s)))","problem":44,"user":"51460e4ce4b04ef915e37314"},{"code":"#(loop [n %\n        s (seq %2)]\n   (cond\n     (zero? n) s\n     (neg? n) (recur (inc n) (conj (butlast s) (last s)))\n     :else (recur (dec n) (concat (rest s) (take 1 s)))))","problem":44,"user":"51057b2be4b06d28cacc92e8"},{"code":"#(apply concat (reverse (split-at (mod %1 (count %2)) %2)))","problem":44,"user":"4e9dafe1535dbda64a6f6b89"},{"code":"(fn [n coll]\n   (let [ s (count coll)]\n     (cond (neg? n) (take s (drop (+ (* 2 s) n) (cycle coll)))\n              :else (take s (drop n (cycle coll))))))","problem":44,"user":"51d9eb05e4b02ceefd947755"},{"problem":44,"code":"(fn [idx col]\n  (let [ridx (mod idx (count col))\n        col (vec col)]\n    (concat (subvec col ridx) (subvec col 0 ridx))))","user":"59648ce1e4b069c0a1a19769"},{"code":"#(let [n (count %2)] (->> %2 cycle (drop (mod % n)) (take n)))","problem":44,"user":"4e82f85d535db62dc21a62ce"},{"problem":44,"code":"(fn [n coll]\n(flatten (reverse (split-at (mod (+ (count coll) n) (count coll)) coll))))","user":"565b941ce4b068f2fe63dc07"},{"problem":44,"code":"(fn [n coll]\n  (->> coll\n       cycle\n       (drop (mod n (count coll)))\n       (take (count coll))))","user":"4f29d9abe4b0d6649770a034"},{"problem":44,"code":"(fn [n seq] (let [n (mod n (count seq))] (concat (drop n seq) (take n seq))))","user":"4fea1379e4b0547ebccb2489"},{"problem":44,"code":"(fn rotate[a b]\n    (println a b)\n    (if (= a 0)\n        b\n        (if (> a 0)\n            (recur (- a 1) (conj (vec (rest b)) (first b)))\n            (recur (+ a 1) (cons (last b) (drop-last b)))\n        )\n    )\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"code":"(fn [n s] (flatten (reverse (split-at (mod n (count s)) s))))","problem":44,"user":"50b29029e4b03ea880433563"},{"problem":44,"code":"(fn [n x] (loop [n (mod n (count x)) x x cn 0 o []]\n            (if (empty? x)\n              (concat x o)\n              (if (= cn n)\n                (concat x o)\n                (recur n (rest x) (inc cn) (conj o (first x)))))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":44,"code":"(fn rotate [n s] (flatten ( reverse (split-at (mod n ( count s ) ) s ) ) ) )","user":"600b385ce4b074f607df668d"},{"problem":44,"code":"(fn [n s]\n  (let [k (mod n (count s))]\n    (lazy-cat (drop k s) (take k s))))","user":"570459a9e4b0b0fb43fd0662"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [mn (mod n (count xs))\n        pn (Math/abs mn)]\n    (if (= n 0) xs\n        (if (pos? mn)\n          (concat (drop mn xs) (take mn xs))\n          (concat (take-last pn xs) (take (inc pn) xs))))))","user":"55d204abe4b0e31453f64a4f"},{"code":"(fn [n coll]\r\n   (let [ntime (if (neg? n) (- n) n)\r\n         lshift #(concat (rest %) [(first %)])\r\n         rshift #(cons (last %) (drop-last %))]\r\n     ((apply comp (repeat ntime (if (neg? n) rshift lshift))) coll)))","problem":44,"user":"50ab44b2e4b0f65d68208509"},{"problem":44,"code":"(fn[n,x]\n  (take (count x)(drop(mod n (count x))(cycle x))))","user":"5d8a832ce4b0915913b1d3ca"},{"problem":44,"code":"(fn rot[n s]\n  (if (zero? n) s\n    (if (> n 0)\n      (recur (dec n) (concat (next s) (list (first s))))\n      (recur (inc n) (cons (last s)(drop-last s) )) )))","user":"4e8849c5535d8b9bb0147ca4"},{"problem":44,"code":"(fn foo[y x]\n    \n    \n    (let [z (mod y (count x) )]\n     (flatten (conj (first (split-at z x) ) (last (split-at z x)))))\n    \n)","user":"5bed1e4ae4b0a6d31fed2118"},{"problem":44,"code":"(fn rotate [n s] \n  (concat (drop (mod n (count s)) s) (take (mod n (count s)) s)))","user":"58cfb517e4b03c36ff7e58b9"},{"problem":44,"code":"(fn rotate [n s]\n  (let [vec-s (vec s)\n        s-count (count vec-s)\n        x (mod n s-count)\n        pos-x (if (< x 0) (- s-count x) x)]\n    (println pos-x)\n    (println vec-s)\n    (loop [rotations pos-x rotated vec-s]\n      (println rotations)\n      (println rotated)\n      (println (rest rotated))\n      (println (first rotated))\n      (if (= 0 rotations)\n        rotated\n        (recur (dec rotations) (conj (vec (rest rotated)) (first rotated)))))))","user":"53edb464e4b0d648e757f4c7"},{"problem":44,"code":"(fn rotate_seq [n s]\n  (let [n1 (rem n (count s))]\n    (if (pos? n1)\n      (concat (take-last (- (count s) n1) s) (take n1 s))\n      (concat (take-last (* -1 n1) s) (take (+ (count s) n1) s))\n      )\n    )\n  )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"code":"(fn [idx se]\n   (concat (drop (mod idx (count se)) se)\n         (take (mod idx (count se)) se)))","problem":44,"user":"51cacda3e4b068dadb8f2227"},{"problem":44,"code":"(fn [a b]\n    (concat (drop (mod a (count b)) b)(take (mod a (count b)) b)))","user":"59e8bb43e4b0249b72820735"},{"code":"(fn [n coll]\n    (let [c (count coll)\n          m (mod n c)]\n      (concat (drop m coll) (take m coll))))","problem":44,"user":"4e5be681535d8a8b8723a2bc"},{"problem":44,"code":"(fn [n coll]\n  (if (> n 0)\n    (take (count coll) (drop n (cycle coll)))\n    (reverse (take (count coll) (drop (Math/abs n) (cycle (reverse coll)))))))","user":"4df73d64535d04ed9115e775"},{"problem":44,"code":"(fn [n s] \t\n\t\t(nth (iterate #(concat (rest %) [(first %)]) s) (mod (if (pos? n) n (+ (count s) n)) (count s)))\n\n)","user":"56e30cefe4b03a7c14b85a3d"},{"problem":44,"code":"(fn rotate [n s]\n  (let [rotations (mod n (count s))]\n  (concat (drop rotations s) (take rotations s))))","user":"5b602a66e4b0c6492753e6fc"},{"problem":44,"code":"(fn [l c] (let [x (mod l (count c)) r (concat (drop x c) (take x c))] r))","user":"53d5a63be4b0e771c3025449"},{"problem":44,"code":"(fn [n string]\n  (let [len (count string)\n        zs (if (pos? n) string (reverse string))\n        [xs ys] (split-at (mod (Math/abs n) len) zs)\n        rot (concat ys xs)]\n    (if (pos? n) rot (reverse rot))))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":44,"code":"#(->> %2 (split-at (mod % (count %2))) reverse flatten)","user":"4fe49706e4b0e8f79898feb7"},{"problem":44,"code":"(fn [n coll]\n  (let [x (rem n (count coll))\n        y (if (neg? x) (+ x (count coll)) x)\n        a (take y coll)\n        b (drop y coll)]\n    (flatten (conj a b))))","user":"5935151ee4b072a2710fd084"},{"problem":44,"code":"#(concat\n   (drop (mod %1 (count %2)) %2)\n   (take (mod %1 (count %2)) %2))","user":"532ecd44e4b019098a6f8b49"},{"code":"#(let [[x y] (split-at (mod % (count %2)) %2)] (concat y x))","problem":44,"user":"51bd1a0de4b0df1216cefd93"},{"code":"(fn [n_ s]\n  (let [n (mod n_ (count s))]\n    (concat (drop n s) (take n s))\n  ))","problem":44,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":44,"code":"(fn ! [n l]\n\t (let [outpt (fn [x ls] (flatten (conj (take x l) (drop x l))))]\n\t   (if (pos? n)\n\t     (if (> n (count l))\n\t       (outpt (- n (count l)) l)\n\t       (outpt n l))\n\t     (if (> (Math/abs n) (count l))\n\t       (! (- (count l) (Math/abs n)) l)\n\t       (outpt (- (count l) (Math/abs n)) l)))))","user":"53da3fcde4b0e771c3025497"},{"problem":44,"code":"#(let [c (count %2)] (take c (drop (if (pos? %) % \n                          (+ (rem % c) c))\n                          (flatten (repeat 3 %2)))))","user":"53572176e4b04ce2eb3ed276"},{"problem":44,"code":"(fn [n seq]\n  (if (< n 0)\n    (loop [s seq n n]\n      (if (= n 0)\n        (flatten s)\n        (recur (conj (butlast s) (last s)) (inc n))))\n    (loop [s seq n n]\n      (if (= n 0)\n        (flatten s)\n        (recur (conj [] (rest (flatten s)) (first (flatten s))) (dec n))))))","user":"55151417e4b055c2f668d4da"},{"problem":44,"code":"(fn rotate-seq\n  ([shift input] (rotate-seq (if (< 0 shift) true false) (if (< 0 shift) shift (- 0 shift)) input))\n  ([forward shift input]\n   (if (= shift 0)\n     input\n     (if forward\n       (rotate-seq true (dec shift) (concat (drop 1 input) (take 1 input)))\n       (rotate-seq false (dec shift) (concat (take-last 1 input) (drop-last 1 input)))))))","user":"57b356c2e4b0fbc9809a277b"},{"code":"(fn [i coll] (let [ii (mod (if (neg? i) (+ (count coll) i) i) (count coll))] (concat (drop ii coll) (take ii coll))))","problem":44,"user":"4ef98c9c535dced4c769f267"},{"code":"(fn [rotations orig-seq] (let [seq-len (count orig-seq)\n        real-rotations (- (mod rotations seq-len) seq-len)]\n    (loop [n real-rotations s orig-seq]\n      (if\n       (< n 0) (recur (inc n) (cons (last s) (butlast s)))\n       s))))","problem":44,"user":"4f31519ae4b0d6649770a086"},{"problem":44,"code":"(fn r \n  ([n xs] (r n xs (count xs)))\n  ([n xs off]\n  (if (< 0 off)\n    (cons (nth xs (mod (- n off) (count xs))) (r n xs (dec off))))))","user":"56946d43e4b0dcc4269f411e"},{"code":"(fn [n s] \n  (let [shift (mod n (count s))] \n    (concat (drop shift s) \n            (take shift s))))","problem":44,"user":"5080a697e4b01a93d3f38e49"},{"problem":44,"code":"(fn [d dd] \n  (take (count dd) (drop (mod d (count dd)) (cycle dd))))","user":"553478dce4b09218d5f44f9d"},{"problem":44,"code":"(fn [dir s]\n(let [n (mod dir (count s))]\n(concat (drop n s) (take n s))))","user":"54bfc88ae4b0ed20f4ff6f09"},{"problem":44,"code":"(fn [amount given-seq]\n  (let [modded (mod amount (count given-seq))]\n      (let [shiftamount (- (count given-seq) modded)]\n        (concat (take-last shiftamount given-seq) (drop-last shiftamount given-seq)))))","user":"56bff105e4b060a8e693e3a4"},{"problem":44,"code":"(fn [i x]\n    (let [n (mod i (count x))]\n    (concat (take-last (- (count x) n) x) (take n x))))","user":"5654cb2de4b0f9d632dd848b"},{"problem":44,"code":"(fn [n c]\n(letfn [(rot1 [[x & r]] (conj (vec r) x))]\n (nth (iterate rot1 c) (mod n (count c)))))","user":"4fd11a93e4b04c3a95aa040a"},{"code":"(fn [c s]\n  (let [c (mod c (count s))]\n    (concat (take-last (- (count s) c) s) (take c s))))","problem":44,"user":"5348236ee4b084c2834f4a54"},{"problem":44,"code":"(fn my-rotate [n vs]\n  (loop [i (Math/abs n)\n        [x & rxs :as xs] (if (>= n 0)\n                             vs\n                             (reverse vs))]\n    (if (= 0 i)\n      (if (>= n 0)\n        xs\n        (reverse xs))\n      (recur (dec i) (concat rxs (vector x))))))","user":"54a31fdae4b09f271ff37c64"},{"problem":44,"code":"(fn [n xs]\n    (let [modn (mod n (count xs))]\n      (concat (drop modn xs) (take modn xs))))","user":"5180c69ae4b06b8caf33fa00"},{"code":"(fn [n c]\n  (let [m (mod n (count c))]\n    (concat (drop m c) (take m c))))","problem":44,"user":"4fd2e5d8e4b04c3a95aa0427"},{"code":"(fn cyc [n col]\n (flatten \n (reverse \n  (let[m  (mod n (reduce (fn [n _](inc n)) 0 col) ) ]\n     (split-at m col)  \n   ))))","problem":44,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn [n coll]\n    (let [n (if (pos? n) n (inc (Math/abs n)))]\n      (take (count coll) (nthnext (cycle coll) n))))","problem":44,"user":"504e1abee4b0f6ff3350c45d"},{"problem":44,"code":"(fn [HowMany L]\n    (if (zero? HowMany)\n      L\n      (let [First (first L) Rest (rest L)]\n        (recur\n          (if (< HowMany 0)\n            (+ (count L) HowMany)\n            (dec HowMany)\n          )\n          (if (< HowMany 0)\n            L\n            (concat Rest (list First) )\n          )\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn [n coll]\n  (let [pos (mod n (count coll))\n        [a b] (split-at pos coll)]\n    (concat b a)))","problem":44,"user":"4f2cdd42e4b0d6649770a055"},{"code":"#(take (count %2) (drop (mod % (count %2)) (flatten (repeat %2))))","problem":44,"user":"4fe8fda4e4b0547ebccb2438"},{"problem":44,"code":"#(let [c (count %2) s (cycle %2)]\n   (take c (if (> %1 0) (drop %1 s) (drop (+ c (rem %1 c)) s))))","user":"54e2a779e4b024c67c0cf7d3"},{"code":"#(let [[a b] (split-at (mod % (count %2)) %2)] (concat b a))","problem":44,"user":"4e43b0d9535dc968683fc4a3"},{"code":"(fn [n coll]\r\n  (let [s (count coll)]\r\n    (take s (drop (+ s (mod n s)) (cycle coll)))\r\n  )\r\n)","problem":44,"user":"4e1ec17a535d04ed9115e80a"},{"problem":44,"code":"#(let [r (mod % (count %2))] (if (< r 0) (concat (take-last (- r) %2) (drop-last (- r) %2)) (concat (drop r %2) (take r %2))))","user":"5b7bc82ce4b047b03b203726"},{"problem":44,"code":"(fn [n coll]\n  (->> (range (count coll))\n       (map #(mod (+ % n) (count coll)))\n       (map #(nth coll %))))","user":"5f5358b7e4b0a0bc16850a77"},{"problem":44,"code":"(fn rotate [r xs]\n  (->> xs\n       (split-at (-> r (+ (count xs) (count xs)) (rem (count xs))))\n       (reverse)\n       (apply concat)))","user":"5d4c83b7e4b0776584bd6f34"},{"code":"(fn [n xs]\n  (let [i (mod n (count xs))\n       [front back] (split-at i xs)]\n    (flatten [back front])))","problem":44,"user":"521e4f22e4b0dd19981ad079"},{"problem":44,"code":"#(apply concat (reverse\n                (split-at (mod (+ (count %2) %1) (count %2)) %2)))","user":"5da760ebe4b000c986472c1a"},{"code":"#(let [rotate (fn [amt col] (concat (nthrest col amt) (take amt col))) \n         a (rem % (count %2))]\n     (if (neg? a)\n       (rotate (+ (count %2) a) %2)\n       (rotate a %2)))","problem":44,"user":"50783762e4b0fc74642bff67"},{"problem":44,"code":"#(let [n (mod % (count %2))]\n           (concat (drop n %2) (take n %2)))","user":"5d29c06be4b01671435dbc6b"},{"code":"(fn [n lst]\n  (let [cnt (count lst)\n        n (mod (if (> n 0)\n                 n\n                 (+ cnt n))\n               cnt)]\n    (let [front (take n lst)\n          back (drop n lst)]\n      (concat back front))))","problem":44,"user":"4f03afcc535dcb61093f6b4d"},{"code":"(fn [n l]\n  (let [d (mod n (count l))]\n\t\t(concat (drop d l) (take d l))))","problem":44,"user":"4fb57e06e4b081705acca2bf"},{"code":"(fn [n s]\r\n  (take (count s) (drop (mod n (count s)) (cycle s))))","problem":44,"user":"4f17ab99535d64f603146457"},{"code":"(fn [m xs]\n  (if (= m 0)\n    xs \n    (let [n (if (neg? m) (inc m) (dec m))\n          ys (if (neg? m) \n               (concat (list (last xs)) (butlast xs)) \n               (concat (rest xs) (list (first xs))))]\n      (recur n ys))))","problem":44,"user":"5073de20e4b054001656acca"},{"code":"(fn [n coll]\n  (if (>= n 0)\n    (let [m (mod n (count coll))] (concat (drop m coll) (take m coll)))\n    (let [m (- (count coll) (mod (- n) (count coll)))]\n      (concat (drop m coll) (take m coll)))))","problem":44,"user":"4e14108c535d04ed9115e7dd"},{"problem":44,"code":"(fn [n se]\n  (take (count se) (drop (mod n (count se)) (flatten (repeat se)))))","user":"56c7d8dee4b0ed865f9758c9"},{"code":"(fn rotate [n coll]\n  (let [c (count coll)]\n    (cond\n     (neg? n) (rotate (+ c n) coll)\n     (> n c)  (rotate (- n c) coll)\n     :else    (concat (drop n coll) (take n coll)))))","problem":44,"user":"4e95a440535dbda64a6f6b37"},{"code":"(fn [n xs] (take (count xs) (drop (mod n (count xs)) (concat xs xs))))","problem":44,"user":"4f0e995e535d0136e6c22326"},{"code":"#(let [shift (fn [ic s] (into(take ic s) (reverse (nthrest s ic))))\n       c (count %2)]\n   (if (> %1 0)\n     (shift (rem %1 c) %2)\n     (shift (- c (rem (- 0 %1) c)) %2)))","problem":44,"user":"5150a7d7e4b03e678e393abb"},{"problem":44,"code":"(fn rotate-sequence-solution\n  [index coll]\n  (let [i (mod index (count coll))]\n    (concat (drop i coll) (take i coll))\n  )\n)","user":"536829c8e4b0243289761e8b"},{"problem":44,"code":"#(let [[l r](split-at (mod %1 (count %2)) %2)]\n  (flatten [r l]))","user":"5de12192e4b0948ae9d9aded"},{"code":"(fn [n coll]\n  (let [x (mod n (count coll))]\n     (concat (nthrest coll x) (take  x coll))\n    )\n  )","problem":44,"user":"52e59ca5e4b09f7907dd1464"},{"problem":44,"code":"(fn f [n lst]\n  (if (= 0 n) \n    lst \n    (if (> n 0)\n      (f (dec n) (concat (rest lst) (list (first lst))))\n      (f (inc n) (concat (list (last lst)) (butlast lst)))\n    )\n  )\n  )","user":"5c59b1d3e4b01df32ab73261"},{"code":"#(let [c (count%2)] (take c (drop ( mod % c)(cycle %2))))","problem":44,"user":"4e6472b7535d8ccf87e9fe6c"},{"code":"#(nth (partition (count %2) 1 (concat %2 %2)) (mod %1 (count %2)))","problem":44,"user":"507fbd77e4b089ade05efbd3"},{"code":"(fn [x coll]\n   (let [c (mod x (count coll))]\n     (concat (drop  c coll) (take c coll))))","problem":44,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":44,"code":"(fn [n _seq] \n  (let [c (count _seq) cut (mod n c)]\n    (->> (cycle _seq) (take (+ cut c)) (drop cut))))","user":"5606a4ace4b08b23635d3175"},{"code":"(fn rotate [n seq]\n   (map #(nth seq %) (map #(mod (+ n %) (count seq)) (range 0 (count seq)))))","problem":44,"user":"52c8758be4b0c2d177d62135"},{"problem":44,"code":"(fn [n coll]\n  (let [s (count coll)]\n    (take s (drop (mod n s) (cycle coll)) ))\n  )","user":"5564709ee4b0c656e3ff1807"},{"code":"#(let[c (count %2)] (take c (drop (mod %1 c) (cycle %2))))","problem":44,"user":"52271ffee4b04e78ff2e19a9"},{"problem":44,"code":"(fn [oidx s]\n\t(let [total (count s)\n\t\t\t  sp (if (neg? oidx) (- total (mod (Math/abs oidx) total)) (mod oidx total))]\n\t\t(loop [ai (set (range 0 total))\n\t\t\t\t\t start-at sp\n\t\t\t\t\t result []]\n\t\t\t(if (empty? ai)\n\t\t\t\tresult\n\t\t\t\t(recur (disj ai start-at) (if (> (inc start-at) (reduce max ai)) (reduce min ai) (inc start-at)) (conj result ((vec s) start-at)))\n\t\t\t\n\t\t\t)\n\t\t)\n\t)\n)","user":"5961e8d0e4b066ee0a44b0a8"},{"code":"#(let [dr (mod %1 (count %2))]\n   (concat (drop dr %2) (take dr %2)))","problem":44,"user":"5196568fe4b04c0af7ff3c1c"},{"code":"(fn rotate [n coll]\r\n  (loop [m (> n 0)\r\n        k (rem n (count coll))\r\n        q (if (< k 0) (* k -1) k)\r\n        c (if m (reverse coll) coll)]\r\n    (if (= q 0) (if m (reverse c) c)\r\n       (recur m k (dec q)\r\n          (cons (last c) (reverse (rest (reverse c))))))))","problem":44,"user":"4fa85ae4e4b081705acca1d3"},{"code":"(fn [rot lst]\n  (let [rm (rem rot (count lst))\n        tk (if (> rm 0) \n              rm \n              (+ (count lst) rm))]\n    (concat (take-last (- (count lst) tk) lst) (take tk lst))))","problem":44,"user":"51c76864e4b07ef393169e3f"},{"problem":44,"code":"(fn rotate-seq [position list]\n  (let [itemscount (count list)\n        absoluteposition (Math/abs position)\n        realposition (Math/abs\n                       (if (neg? position)\n                         (if (> itemscount absoluteposition)\n                           (- itemscount absoluteposition)\n                           (+ itemscount (- itemscount absoluteposition)))\n                        (if (> itemscount position)\n                          position\n                          (- position itemscount))))]\n    (flatten\n      (reverse\n        (split-at realposition list)))))","user":"575683aee4b02ea1147992dc"},{"code":"(fn [n s] (let [n (mod n (count s))]\n            (if (>= n 0) (concat (drop n s) (take n s))\n              (concat (take n s) (drop n s)))))","problem":44,"user":"50dfb660e4b061dbdced7228"},{"problem":44,"code":"#(let [n (count %2)] (->> (concat %2 %2) (drop (mod % n)) (take n)))","user":"51412b0ae4b0694e2952b79d"},{"code":"(fn [n s] (take (count s) (drop (mod n (count s)) (cycle s))))","problem":44,"user":"4eecdd66535d93acb0a668b9"},{"code":"(fn rot [r s]\n  (cond\n    (> r 0) (rot (dec r) (concat (rest s) (list (first s))))\n    (< r 0) (reverse (rot (* r -1) (reverse s)))\n    :else s))","problem":44,"user":"5191ac45e4b0d428d29dc1b6"},{"code":"(fn [n coll] (let [c (count coll) n (mod (if (neg? n) (+ n c) n) c)] (concat (drop n coll) (take n coll))))","problem":44,"user":"4e8e0a62535d65386fec213f"},{"problem":44,"code":"(fn rot [size- coll]\n  (let [size (if (neg? size-) (mod (+ (count coll) size-) (count coll)) (mod  size- (count coll)))]\n  (concat (drop size coll) (take size coll))\n    )\n  )","user":"5b250773e4b063e2438bcc21"},{"code":"(fn rotate [n coll]\n  (let [shift-left (fn [c] (concat (rest c) (list (first c))))\n        shift-right (fn [c] (concat (list (last c)) (butlast c)))\n        op (if (pos? n) shift-left shift-right)\n        m (if (pos? n) (dec n) (inc n))]\n    (if (zero? n)\n      coll\n      (rotate m (op coll)))))","problem":44,"user":"4f625f68e4b0defedf855fd2"},{"problem":44,"code":"(fn [n v]\n  (let [c (mod n (count v))]\n    (concat (drop c v) (take c v))))","user":"50c95c4fe4b0bed41a12298f"},{"problem":44,"code":"(fn [n s]\n    (loop [cnt n\n           result s]\n      (if (= cnt 0)\n        result\n        (if (> cnt 0)\n          (recur (dec cnt)\n                 (concat (rest result) [(first result)]))\n          (recur (inc cnt)\n                 (concat [(last result)] (butlast result)))))))","user":"586b6753e4b01531a375e956"},{"code":"(fn [i coll]\n      (letfn [(reverse [n](concat (drop n coll)(take n coll))) \n\t\t   (normalize-id [i max]\n\t\t\t\t (if (> (Math/abs i) max)\n\t\t\t\t     (* (- (Math/abs i) max) (Integer/signum i))\n\t\t\t\t     i)) ]\n\t\t\t\t     (let [i (normalize-id i (count coll))]\n\t\t\t\t\t  (if (pos? i)\n\t\t\t\t\t      (reverse i)\n\t\t\t\t\t      (reverse (+ (count coll) i))))))","problem":44,"user":"4e739e13535dff18050a9c76"},{"problem":44,"code":"(fn [pos s]\n  (let [pos (mod pos (count s))]\n    (->> s\n         (split-at pos)\n         reverse\n         (apply concat))))","user":"584b0422e4b089d5ab817ef4"},{"problem":44,"code":"(fn [dir seq]\n  (let [seq (vec seq)\n        abs-dir ((fn abs [n] (max n (- n))) dir)\n        cnt (count seq)\n        sign-dir (if (pos? dir) 1 -1)]\n    (let [norm-dir (if (> abs-dir cnt) (mod abs-dir cnt) abs-dir)]\n      (let [rev-norm-dir (- cnt norm-dir)]\n        (let [res-dir (if (pos? sign-dir) norm-dir rev-norm-dir)]\n          (into [] (flatten [(subvec seq res-dir) (subvec seq 0 res-dir)])))))))","user":"5f15a50fe4b091ba50b4dbbc"},{"problem":44,"code":"(fn [num list]\n  (let [size   (count list)\n        n      (mod (if (pos? num) num (+ size num)) size)\n        parts  (split-at n list)\n        before (first parts)\n        after  (last parts)]\n  (concat after before)\n))","user":"5954cea2e4b066ee0a44af0a"},{"problem":44,"code":"(fn [n coll]\n  (take (count coll) (drop (mod n (count coll)) (cycle coll))\n   )\n  )","user":"5c8fd8f3e4b048ec896c59c7"},{"problem":44,"code":"(fn r [n v]\n  (let [c (count v)\n        n (mod n c)]\n    (concat (drop n v) (take n v))))","user":"57533bc1e4b02ea1147992a6"},{"problem":44,"code":"(fn [n v] (let [c (count v) x (mod (+ n c) c)] (flatten (conj (take x v) (nthrest v x)))))","user":"54c13b87e4b0ed20f4ff6f20"},{"code":"(fn [x l]\n  (cond\n   \t(> x 0) (recur (dec x) (concat (rest l) (list (first l))))\n    (< x 0) (recur (inc x) (conj (take (dec (count l)) l) (last l)))\n   \t:default l))","problem":44,"user":"517d1018e4b0f5e87c18f25e"},{"code":"(fn [n coll]\n   (->> (concat coll coll)\n        (drop (mod n (count coll)))\n        (take (count coll))))","problem":44,"user":"5356dcbee4b04ce2eb3ed270"},{"problem":44,"code":"(fn  temps [nub seqs]\n        (let [ind \n              (cond (> nub (count seqs)) (- nub (count seqs))\n                    (> (- nub) (count seqs))  (+ (count seqs) (+ nub (count seqs)))\n                    (neg? nub) (+ (count seqs) nub)\n           \t\t:else nub\t)]\n          (concat (drop ind seqs) (take ind seqs))))","user":"6038b6b4e4b0d5df2af222ef"},{"code":"(fn [start coll]\n  (let [v (vec coll)\n        c (count coll)\n        s (loop [s start]\n            (cond\n              (> s c) (recur (- s c))\n              (neg? s) (recur (+ c s))\n              :else s))\n        tail (subvec v 0 s)\n        head (subvec v s)]\n    (into head tail)))","problem":44,"user":"505aa653e4b021387fb89857"},{"problem":44,"code":"#(let [c (count %2)\n       [a b] (split-at (mod (+ % c) c) %2)]\n  (concat b a))","user":"54899701e4b0e286459a11ea"},{"code":"#(let [len (count %2) n (rem % len) toDrop (if (neg? %) (+ len n) n)] \n  (take len (drop toDrop (concat %2 %2))))","problem":44,"user":"4f01ff83535dcb61093f6a3a"},{"problem":44,"code":"(fn [pos coll]\n  (take (count coll) (drop (mod pos (count coll)) (cycle coll)))\n)","user":"53ae16e2e4b047364c044472"},{"problem":44,"code":"(fn [n xs] (let [k (mod n (count xs))] (concat (drop k xs) (take k xs))))","user":"4fc04d75e4b081705acca324"},{"problem":44,"code":"(fn rot [i s]\n  (if (or (< i 0) (>= i (count s)))\n    (rot (mod i (count s)) s)\n    (if (= 0 i)\n      s\n      (rot (dec i) (concat (rest s) (list (first s)))))))","user":"5d1e19c4e4b02ea6f0fb69af"},{"code":"(fn rotate [n s]\n  (if (= n 0)\n    s\n    (if (> n 0)\n      (recur (dec n) (concat (rest s) (list (first s))))\n      (reverse (rotate (- 0 n) (reverse s))))))","problem":44,"user":"4f404dcee4b0e243712b1fb0"},{"code":"(fn rot [n s]\n  (let [mn (mod n (count s))]\n    (concat (drop mn s) (take mn s))\n  )\n)","problem":44,"user":"4f8b56dae4b02e764a0a517e"},{"problem":44,"code":"(fn my-rotate [t c]\n  (loop [coll (vec c) counter (count c) index t result []]\n    (if (> counter 0)\n      (recur coll (dec counter) (inc index) (conj result (coll (mod index (count coll)))))\n      result)))","user":"5546704be4b0a04f7929953d"},{"problem":44,"code":"(fn [n coll] \n      (let [m (mod n (count coll))] \n        (concat (drop m coll) (take m coll))))","user":"5eb4927fe4b00a66d4a95221"},{"code":"(fn rotate [r s]\n  (let [n (count s) p (mod r n)] \n    (take n (drop p (concat s s)))\n    )\n  )","problem":44,"user":"52ba43d0e4b07a9af57922cd"},{"problem":44,"code":"(fn f44\n  [index acc]\n  (let [s (count acc) a (mod index s)]\n    (concat (drop a acc) (take a acc)))\n  )","user":"5db658ebe4b010eb3c36cd39"},{"code":"(fn [n coll]\n  (let [ntime (if (neg? n) (- n) n)\n        lshift #(concat (rest %) [(first %)])\n        rshift #(cons (last %) (drop-last %))]\n    ((apply comp (repeat ntime (if (neg? n) rshift lshift))) coll)))","problem":44,"user":"4f0404df535dcb61093f6b91"},{"code":"(fn [n coll]\n  (let [r (mod n (count coll))]\n    (concat (drop r coll)\n            (take r coll))))","problem":44,"user":"50586354e4b06522596eba78"},{"problem":44,"code":"(fn [n coll] (let [sz (count coll)\n                    off (+ sz (rem n sz))]\n                (->> (cycle coll) (drop off) (take sz))))","user":"5faa75c1e4b0fa27300f3dfa"},{"code":"#(let [p (mod % (count %2))]\n    (concat (drop p %2) (take p %2)))","problem":44,"user":"4e597b2c535d8a8b8723a29d"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)]\n    (->> (cycle coll)\n         (drop (mod n c))\n         (take c))))","user":"566b57e9e4b0a866af6896ad"},{"problem":44,"code":"(fn[idx lst]\n    ((fn i [idx lst]\n        (if (= 0 idx)\n            lst\n          (if ( < idx 0)\n             (i(+ idx 1) (cons (last lst) (butlast lst)))\n          (i (- idx 1)   (concat (rest lst) [(first lst)])) )))idx lst))","user":"530c15f7e4b02e82168697d6"},{"code":"(fn rotate [n s]\n    (let [m (mod n (count s))]\n            (concat (drop m s) (take m s))))","problem":44,"user":"4ed72e51535d10e5ff6f52ee"},{"problem":44,"code":"(fn test [n coll]\n  (let [n (if (< n 0) (+ n (count coll)) n)]\n    (if (= n 0)\n      coll\n      (test (dec n) (concat (rest coll) (list (first coll)))))))","user":"579332c2e4b0e215f87e8452"},{"code":"(fn rotate [times iseq]\n  (let [len (count iseq)\n        t (if (pos? times)\n            (if (> times len) (- times len) times)\n            (+ len (if (< times (* -1 len)) (+ times len) times))) \n        a (drop t iseq)\n        b (take t iseq)]\n    (concat a b)))","problem":44,"user":"4f046d70535dcb61093f6bc5"},{"problem":44,"code":"(fn [n s]\n  (#(concat (second %) (first %)) (split-at (if(> n 0) (mod n (count s)) (mod n (count s))) s))\n)","user":"5b4ff637e4b02d533a91bce0"},{"code":"(fn [n xs] (let [d (mod n (count xs))] (concat (drop d xs) (take d xs))))","problem":44,"user":"5211d195e4b07aea8afc4f76"},{"problem":44,"code":"(fn [n xs]\n  (let [n (rem n (count xs))\n        n (if (< n 0) \n            (+ (count xs) n)\n            n)]\n    (into \n     (vec (drop n xs)) \n     (take n xs))))","user":"5e0b6375e4b099d064962f7b"},{"problem":44,"code":"(fn [n sequ]\n  (let [tot (count sequ) np (+ n (* 4 tot))]\n    (take tot (drop np (cycle sequ)))\n    )\n  )","user":"57a13745e4b0c3d858beb8e3"},{"code":"(fn [x l]\n  (let [step (mod x (count l))]\n    (concat (take-last (- (count l) step) l) (take step l))))","problem":44,"user":"50e4a5a9e4b0cb9ec68fbca3"},{"code":"(fn [n c]\n   (if (zero? n)\n     c\n     (if (neg? n)\n       (recur (inc n) (cons (last c) (butlast c)))\n       (recur (dec n) (conj (vec (rest c)) (first c))))))","problem":44,"user":"4fe9f0f6e4b0547ebccb247b"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n  (concat (drop n %2) (take n %2))\n )","user":"514504c2e4b021a5ff8301fc"},{"code":"(fn [n s]\n   (nth (iterate #(concat (rest %) (list (first %))) s)\n        (mod n (count s))))","problem":44,"user":"50996a38e4b0cae2931060b3"},{"code":"(fn [n coll]\n  (take (count coll)\n        (drop (mod n (count coll))\n              (cycle coll))))","problem":44,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":44,"code":"(fn [n xs] \n    (let [n (mod n (count xs))\n          rest-n (- (count xs) n)]\n        (if (pos? n)\n            (concat (drop n xs) (take n xs))\n            (concat (drop rest-n xs) (take rest-n xs)))))","user":"58ffaddee4b0438e51c2cffe"},{"code":"(fn rs [x y]\n  (concat (drop (mod x (count y)) y) \n          (take (mod x (count y)) y)))","problem":44,"user":"52e17e66e4b09f7907dd1423"},{"code":"#(let [n (count %2)]\n  \t(take n (drop (mod % n) (cycle %2))))","problem":44,"user":"4db2f208535df7e46ed9b6c9"},{"code":"(fn rotate-seq [delta s]\n  (let [delta (rem delta (count s))\n        delta (if (< delta 0) (+ (count s) delta) delta)]\n    (if (zero? delta)\n      s\n      (rotate-seq (dec delta) (concat (rest s) (list (first s)))))))","problem":44,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":44,"code":"(fn rot [n s]\n  (cond\n   (> 0 n) (rot (inc n) (cons (last s) (drop-last s)))\n   (< 0 n) (rot (dec n) (concat (drop 1 s) (take 1 s)))\n   :else s\n    )\n  )","user":"5405ae2be4b0addc1aec6671"},{"code":"(fn [n coll]\n  (let [n (if (neg? n)\n            (first\n              (drop-while neg?\n                          (iterate #(+ % (count coll)) n)))\n            (mod n (count coll)))]\n    (concat (drop n coll)\n            (take n coll))))","problem":44,"user":"4eae5fe4535d7eef30807325"},{"problem":44,"code":"(fn [n seq]\n   (loop [pos (mod (- n 1) (count seq))\n          arr (list)]\n     (if (= (count arr) (count seq)) arr\n       (recur (mod (- pos 1) (count seq)) (cons (nth seq pos) arr)))))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"(fn [n coll]\n  (let [c (count coll)]\n    (take c (drop (mod n c) (cycle coll)))))","problem":44,"user":"4e6a4950535d8ccf87e9febf"},{"problem":44,"code":"(fn rotate-sequence [n s]\n  (let [c (count s)\n        a (rem n c)]\n    (cond\n      (pos? a)\n      (concat (take-last (- c a) s) (take a s))\n\n      (neg? a)\n      (concat (take-last (- a) s) (take (+ c a) s))\n\n      :else\n      s)))","user":"5922f8a9e4b026ae3852128f"},{"code":"(fn [i s]\n   (nth \n    (iterate \n     (fn [x]\n       (if (< 0 i) \n         (concat (rest x) (list (first x)))\n         (concat (list (last x)) (butlast x) )))\n     s)\n    (Math/abs i)))","problem":44,"user":"51547920e4b084ca81ee2e1c"},{"code":"(fn rotate [n xs]\n  (let [n (rem n (count xs))]\n  (cond\n   (zero? n) xs\n   (pos? n) (concat (drop n xs) (take n xs))\n   :else (let [n (Math/abs n)]\n               (concat (take-last n xs)\n                       (take (- (count xs) n) xs))))))","problem":44,"user":"4feff3b6e4b0678c553fc31e"},{"problem":44,"code":"(fn [n l]\n  (let [ num (count l)\n         p-rem (fn [n] (if (< n 0) (+ num (rem n num)) n))]\n  (take num (drop (p-rem n) (cycle l)))))","user":"55c77070e4b0e31453f649d0"},{"problem":44,"code":"#(let \n  [x (mod % (count %2))\n  tail (take x %2)\n  head (drop x %2)]\n  (concat head tail))","user":"5708b96ce4b0b0fb43fd06a3"},{"problem":44,"code":"(fn [n s]\n  (let [len (count s)\n        n (mod n len)]\n    (->> (cycle s)\n         (drop n)\n         (take len))))","user":"5879d577e4b01531a375ead8"},{"problem":44,"code":"#(let [d (mod %1 (count %2))] \n   (concat (drop d %2) (take d %2)))","user":"561047eae4b05f002753df6d"},{"problem":44,"code":"(fn [n coll]\n    (let [abs (fn [n] (if (pos? n) n (* -1 n)))\n\t  a (if (> (abs n) (count coll))\n\t\t(- (abs n) (count coll))\n\t      (abs n))\n\t    at (if (pos? n) a (- (count coll) a))\n\t    [xs ys] (split-at at coll)]\n      (concat ys xs)))","user":"5a250b86e4b07f18be40aa19"},{"problem":44,"code":"(fn ngentot [x y]\n  (->> (cycle y)\n       (drop (mod x (count y)))\n       (take (count y))))","user":"55d9743ae4b0e31453f64aca"},{"problem":44,"code":"(fn [x l]\n  (let [i (rem x (count l))]\n  \t(if (> x 0)\n    \t(concat (drop i l) (take i l))\n    \t(concat (drop (+ (count l) i) l) (take (+ (count l) i) l)))))","user":"56288ccae4b00e49c7cb47ea"},{"code":"(fn [n, coll]\n  (let [n (mod n (count coll)) [l r] (split-at n coll)]\n    (concat r l)))","problem":44,"user":"4e7e8684535db169f9c79717"},{"problem":44,"code":"(fn [n ls]\n  (let [c (count ls)\n        rev (reverse ls)\n        itr (fn [n ls]\n              (cond (or (= 0 n) (= n c)) ls\n                    (< n c) (concat (drop n ls) (take n ls))\n                    :else (concat (drop (- n c) ls) (take (- n c) ls))))]\n    (if (<= n 0)\n      (reverse (itr (Math/abs n) rev))\n      (itr n ls))))","user":"56d7f340e4b0ea9b8538f7df"},{"problem":44,"code":"(fn [n xs]\n       (take (count xs) (drop (mod n (count xs)) (cycle xs))))","user":"567c63f6e4b05957ce8c61bb"},{"code":"#(reduce (fn [x y] (concat y x))\n  (split-at (mod %1 (count %2)) %2) \n  )","problem":44,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":44,"code":"(fn\n  [times, coll]\n  (loop [n (mod times (count coll)) xs coll]\n      (if (zero? n)\n      \txs\n        (recur (dec n) (conj (into [] (rest xs)) (first xs))))))","user":"53de4bdae4b0d874e779ae32"},{"code":"(fn [n s]\n  (let [p (mod n (count s))]\n   (reverse \n     (concat \n      (reverse (take p s))\n      (reverse (drop p s))))))","problem":44,"user":"512eb723e4b0b740abc5982b"},{"problem":44,"code":"(fn [r s]\n\t(take (count s) (drop (mod r (count s)) (cycle s))))","user":"59e8a952e4b0249b72820733"},{"code":"(fn [n coll]\n  (let [n (if (pos? n)\n            n\n            (+ (count coll) n))]\n    (take (count coll) (drop (+ (count coll) n) (cycle coll)))))","problem":44,"user":"51a97f7ae4b08d8ec191b827"},{"code":"#(let [c (count %2) p (mod % c)]\n   (concat (drop p %2) (take p %2)))","problem":44,"user":"4e52d815535d302ef430da77"},{"code":"(fn [n s] (let [c (count s)] \n            (take c (nthnext (cycle s) (mod n c) ))\n          )\n)","problem":44,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn [n c] (let [n (mod n (count c))] \n (concat (drop n c) (take n c))))","problem":44,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"#(let [[f b] (split-at (mod % (count %2)) %2)] (concat b f))","problem":44,"user":"4e6a48d5535d8ccf87e9febd"},{"code":"(fn rotate [offset lst]\n      (let [offset (mod offset (count lst))\n\t\t len (count lst)]\n\t\t (take len (nthnext (cycle lst) offset))))","problem":44,"user":"502a4fdfe4b09dd42f6f3644"},{"code":"(fn rotate [n a-list]\n  (map-indexed \n    (fn [idx elem] \n      (nth \n        a-list \n        (mod (+ idx n) (count a-list)))) a-list))","problem":44,"user":"50ba3acae4b03e68e4411c78"},{"code":"(fn rot [n s]\n  (let [n (rem n (count s))]\n  (cond \n    (> n 0) (concat (drop n s) (take n s))\n    (= n 0) s\n    (< n 0) (concat (take-last (- n) s) (drop-last (- n) s))))\n)","problem":44,"user":"4ef0eaef535dced4c769f211"},{"code":"(fn [n xs] (let [m (Math/abs (mod n (count xs)) )] (concat (drop m xs) (take m xs))))","problem":44,"user":"53403110e4b085b17e897da6"},{"problem":44,"code":"#(let [size\t\t\t  \t(count %2)\n       shift \t\t  \t  (mod %1 size)\n       to-put-first \t(take-last (- size shift) %2)\n       to-put-last\t\t(take shift %2)\n       ]\n  (concat to-put-first to-put-last))","user":"593db05ae4b069cdc2982bab"},{"problem":44,"code":"(fn \n  [rot coll]\n  (let [idx (mod rot (count coll))]\n    (concat (drop idx coll) (take idx coll))))","user":"548db64ce4b0e286459a121c"},{"problem":44,"code":"(fn rot [nn x]\n  (let [len (count x) n (mod nn len)]\n        (if (pos? n)\n          (take len (drop n (apply concat (repeat 2 x))))\n          (take len (drop (+ len n) (apply concat (repeat 2 x)))))))","user":"57614948e4b0994c1922fb83"},{"code":"#(let [n (mod %1 (count %2))] (concat (drop n %2) (take n %2)))","problem":44,"user":"4e31a15c535deb9a81d77f1e"},{"code":"(fn [dir coll]\n  (let [dir (mod dir (count coll))]\n    (concat (drop dir coll) (take dir coll))))","problem":44,"user":"52cc582ae4b07d0d72b27362"},{"problem":44,"code":"(fn rotate-seq [n coll]\n  (->>\n    (split-at (mod n (count coll)) coll)\n    (reverse)\n    (apply concat)))","user":"6033f8e9e4b0d5df2af222c6"},{"problem":44,"code":"#(let [l (count %2)]\n   (take l (drop (mod %1 l) (cycle %2))))","user":"56cd75bee4b0ea9b8538f74b"},{"problem":44,"code":"(fn u [x coll]\n  (let [t (mod x (count coll))]\n     (concat (drop t coll) (take t coll))))","user":"5df08767e4b093ff717275bf"},{"problem":44,"code":"(fn [n coll]\n   (let [c (count coll)\n         i (loop [n n] (if (pos? n) n (recur (+ n c))))]\n     (take c (drop i (cycle coll)))))","user":"57d8a1dee4b0bd073c2023ee"},{"code":"(fn rotate-seq [n coll]                                                                                                                      \r\n    (let [coll-count (count coll)                                                                                                             \r\n          i (mod (if (pos? n) n (+ coll-count n)) coll-count)                                                                                 \r\n          [l r] (split-at i coll)]                                                                                                            \r\n      (concat r l)))","problem":44,"user":"4f149e0f535d64f60314643d"},{"problem":44,"code":"#(let [m (mod %1 (count %2))] \n   (concat (drop m %2) (take m %2)))","user":"56f6e541e4b08e7d20b9682a"},{"code":"(fn rot [n s]\n  (if (= 0 n)\n      s\n    (let [val (if (> n 0) (first s) (last s))\n          the-rest (if (> n 0) (rest s) (butlast s))\n          sign (if (> n 0) -1 1)]\n      (recur (+ sign n) (if (> n 0) (conj (vec the-rest) val) (cons val (vec the-rest)))))))","problem":44,"user":"51622fb8e4b009fba0926e3f"},{"problem":44,"code":"#(take (count %2) \n       (drop (+ (* (count %2) (inc (quot (Math/abs %) (count %2)))) %)\n             (cycle %2)))","user":"529c722de4b04e0c58e87b63"},{"code":"#(let [l (count %2)\n       r (mod %1 l)]\n   (concat\n   \t(take-last (- l r) %2)\n   \t(take r %2)))","problem":44,"user":"53134005e4b08068f379ed07"},{"code":"(fn p44\n  [n coll]\n  (let [nn (cond\n             (< n 0) (mod (- (count coll) (Math/abs n)) (count coll))\n             (> n (count coll)) (mod n (count coll))\n             :else n)]\n    (concat\n      (for [i (range nn (count coll))] (nth coll i))\n      (for [i (range nn)] (nth coll i))\n     )))","problem":44,"user":"4e7d4544535db169f9c796d0"},{"problem":44,"code":"(fn rotate [n s]\n    (if (= n 0)\n        s\n        (if (> n 0)\n            (rotate (- n 1) (concat (rest s) (list (first s))))\n            (rotate (+ n 1) (cons (last s) (butlast s))))))","user":"600ae927e4b074f607df6689"},{"code":"#(let [shift (mod %1 (count %2))]\n  (concat (drop shift %2) (take shift %2)))","problem":44,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn rot [n x] (if (> n 0) \n                (rot (- n 1) (concat (next x ) [(first x)]))\n                (if (< n 0) (rot (+ n 1) (concat [(last x)] (butlast x ) ))\n                 x\n                ))\n                \n                )","problem":44,"user":"51fc44c5e4b0f1313d468a1b"},{"problem":44,"code":"(fn roter [rot coll]\n  (loop [r rot c coll reved false]\n    (if (= r 0)\n      (if reved\n        (reverse c)\n      \tc)\n      (if (> r 0)\n        (recur (dec r) (concat (rest c) [(first c)]) reved)\n        (recur (* -1 r) (reverse c) true)\n  ))))","user":"59b8334ce4b05c620303ca4f"},{"problem":44,"code":"(fn rotate [n items]\n  (let [rot-pos (fn rotate-pos [n items]\n                  (if (= n 0)\n                    (seq items)\n                    (let [first-item (first items)\n                          rest-items (rest items)\n                          items (into [] rest-items)]\n                      (rotate-pos (- n 1) (conj items first-item)))))\n        rot-neg (fn rotate-neg [n items]\n                  (if (= n 0)\n                    items\n                    (let [but-last-items (butlast items)\n                          last-item (last items)]\n                      (rotate-neg (+ n 1) (conj but-last-items last-item)))))]\n    (if (pos? n)\n      (rot-pos n items)\n      (rot-neg n items))))","user":"55bbfd60e4b01b9910ae29ed"},{"problem":44,"code":"#(apply concat (reverse (split-at (rem (+ (* 100 (count %2)) %1) (count %2)) %2)))","user":"5432df22e4b0dad94371f2f5"},{"problem":44,"code":"(fn\n  [n coll]\n  (if (> (max n (- n)) (count coll))\n    (if (neg? n)\n      (concat (drop (+ (count coll) (rem n (count coll))) coll) (take (+ (count coll) (rem n (count coll))) coll))\n      (concat (drop (rem n (count coll)) coll) (take (rem n (count coll)) coll)))\n    (if (neg? n)\n      (concat (drop (+ (count coll) n) coll) (take (+ (count coll) n) coll))\n      (concat (drop n coll) (take n coll)))))","user":"5ac35d00e4b0e27600da7712"},{"code":"#(-> (split-at (mod %1 (count %2)) %2) reverse flatten)","problem":44,"user":"4e588e84535d8a8b8723a294"},{"problem":44,"code":"(fn [n xs]\n  (let [n (rem n (count xs))]\n  (if (> n 0)\n  (concat (drop n xs) (take n xs))\n  (concat (take-last (- n) xs) (drop-last (- n) xs) )\n  )\n  )\n)","user":"5921a080e4b09b4ee5954c77"},{"code":"#(let [len (count %2)]\n   (->> (cycle %2)\n        (take (+ (rem % len) len len))\n        (take-last len)))","problem":44,"user":"4fceda40e4b03432b189f407"},{"problem":44,"code":"#(take (count %2) (drop (Math/abs (+ (count %2) (rem %1 (count %2)))) (cycle %2)))","user":"5a9db513e4b0d174b936c7f0"},{"code":"(fn [n coll]\n   (let [c (count coll)\n         r (mod n c)]\n     (concat (drop r coll) (take r coll))))","problem":44,"user":"5016ac54e4b052339a490e7b"},{"problem":44,"code":"(fn [i s] \n\t(let [len (count s)\n\t\tpos ((fn [n] \n               (cond \n                 (< n (- len)) (+ len (rem n len)) \n                 (> n 0) n (< n 0) \n                 (+ len n))) i)]\n\t(take-last len \n\t\t(take (+ pos len) (cycle s)))))","user":"5578f292e4b05c286339e08f"},{"problem":44,"code":"(fn [x y]\n  (let [ind (loop [local x]\n    (if (and (>= local 0) (< local (count y)))\n      local\n      (if (< local 0)\n        (recur (+ local (count y)))\n        (recur (- local (count y))))))]\n    (loop [index ind result []]\n      (if (= (count result) (count y))\n        (seq result)\n        (if (< index (count y))\n          (recur (inc index) (conj result (nth y index)))\n          (recur 0 result))))))","user":"53d977f1e4b0e771c302547a"},{"code":"(fn [n s]\n   (let [m (mod n (count s))]\n     (concat (drop m s) (take m s))))","problem":44,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":44,"code":"(fn [k coll]\n  (let [n (rem k (count coll))]\n   (cond\n   \t(= n 0) coll\n    (> n 0) (concat (drop n coll) (take n coll))\n   \t:else (concat (take-last (- n) coll) (drop-last (- n) coll)))))","user":"5c73b8bae4b0fca0c16227ba"},{"code":"(fn __ [rot col]\n  (let [pivot (rem rot (count col))]\n  (cond\n     (= pivot 0) col\n     (> pivot 0) (concat (drop pivot col) (take pivot col))\n     :else (concat (take-last (* -1 pivot) col) (drop-last (* -1 pivot) col)))))","problem":44,"user":"4fa719c0e4b081705acca1bf"},{"problem":44,"code":"#(let [n (count %2)]\n    (->> %2 cycle (drop (mod %1 n)) (take n)))","user":"588fbb39e4b00487982d51bd"},{"code":"(fn [n seq]\n  (let [sz (count seq)\n        nn (loop [s n] \n              (if (and (pos? s) (<= s sz))\n                s\n                (if (neg? s)\n                  (recur (+ s sz))\n                  (recur (- s sz)))))]\n    (flatten (list (drop nn seq) (take nn seq)))))","problem":44,"user":"4e955b95535dbda64a6f6b33"},{"code":"(fn [n s]\n  (letfn [(drop [n s]\n            (if (<= n 0)\n              s\n              (drop (- n 1) (rest s))))\n          (take [n s]\n            (if (<= n 0)\n              []\n              (cons (first s) (take (- n 1) (rest s)))))]\n    (let [n' (mod n (count s))]\n      (concat (drop n' s) (take n' s)))))","problem":44,"user":"5100d7dbe4b04f1d96d946df"},{"problem":44,"code":"(fn [num-rotations coll]\n   (concat\n     (nthrest coll (mod num-rotations (count coll)))\n     (take (mod num-rotations (count coll)) (cycle coll))\n     ))","user":"5587cd86e4b059ccff29b1e6"},{"problem":44,"code":"(fn\n  [n c]\n  (flatten (conj (take (mod n (count c)) c) (drop (mod n (count c)) c))))","user":"5676af21e4b05957ce8c6158"},{"code":"(fn [n x] (#(apply concat (if (< 0 %) [(drop % %2) (take % %2)] [(take-last (- %) %2) (drop-last (- %) %2)]))\n(mod n (count x)) x))","problem":44,"user":"4eaede1f535d7eef30807329"},{"problem":44,"code":"(fn [n s]\n    (let [i (mod n (count s))]\n      (concat (drop i s)\n              (take i s))))","user":"6026d2cae4b0d5df2af22232"},{"code":"(fn  [n xs]\n           ( cond\n             (neg? n) ( let [ x ( inc (mod (Math/abs n) (count xs)))]\n                         (flatten (cons (drop x xs) (take x xs))))\n             (pos? n) ( let [ y (count xs) x  (if (> n y) (mod n y) n) ]\n                         (flatten (cons (drop x xs) (take x xs))))\n                   )\n             )","problem":44,"user":"5225b16de4b0d2f5d1e2c0ed"},{"problem":44,"code":"(fn rotate\n  [n s]\n  (let [l (count s)\n        nn (if (> n 0)\n             (rem n l)\n             (+ l\n                (- (rem (- n) l))))]\n    (concat (drop nn s) (take nn s))))","user":"5d53a59ae4b0776584bd6f72"},{"problem":44,"code":"#(let[a (mod %1 (count %2))]\n   (concat (drop a %2) (take a %2)))","user":"5951190be4b066ee0a44aea4"},{"problem":44,"code":"(fn [n s]\n(let [\nfirstToLast (fn [s]\n  (concat (rest s) (vector (first s)))\n)\nlastToFirst (fn [s]\n  (concat (vector (last s)) (butlast s))\n)]\n\n  (cond\n    (> 0 n) (recur (inc n) (lastToFirst s))\n    (< 0 n) (recur (dec n) (firstToLast s))\n    :else s\n  )\n  )\n)","user":"56195e57e4b053970a773af6"},{"problem":44,"code":"(fn q [n l]\n    (let [qw (comp\n               flatten\n               reverse\n               split-at)]\n      (cond\n        (< n 0)\n        (let [n (+ (count l) n)]\n          (q n l))\n       \t(< (count l) n)\n        (let [n (- n (count l))]\n          (q n l))\n        :else (qw n l))))","user":"5a8fd113e4b05369db4d2542"},{"problem":44,"code":"(fn rotate [start coll]\n  (let [n (mod start (count coll))]\n  (concat (drop n coll) (take n coll))))","user":"52382d91e4b0fae3832e99f0"},{"problem":44,"code":"(fn [n coll]\n  (let [idx (mod n (count coll))]\n   (concat (drop idx coll)  (take idx coll) ) )\n  )","user":"537b1083e4b06839e8705e64"},{"code":"(fn [n coll] (let [shift (mod n (count coll))] (concat (drop shift coll) (take shift coll))))","problem":44,"user":"52c1f404e4b07a9af5792370"},{"code":"(fn [offset coll]\n  (let [length (count coll)]\n    (take length (drop (mod offset length) (cycle coll)))))","problem":44,"user":"50ed3c6be4b01236b1d4983b"},{"code":"(fn rotate [n col]\n        (let [l (count col)\n              i (cond\n                 (> n l) (- n l)\n                 (pos? n) n\n                 :else (+ n l))\n              j (if (pos? i) (Math/abs i) (+ l i))]\n          (concat (drop j col) (take j col))))","problem":44,"user":"5369d072e4b0243289761ea1"},{"problem":44,"code":"(fn [n xs]\n  (apply concat\n         (reverse\n          (split-at (mod n (count xs)) xs))))","user":"559622cee4b0c79f6e1db975"},{"code":"(fn [x coll]\n  (let [len (count coll)\n        x (mod x len)]\n    (take len (apply concat (drop x coll) (repeat coll)))))","problem":44,"user":"52f528f0e4b05e3f0be25f2a"},{"code":"#(let [[a b] (split-at (mod % (count %2)) %2)]\n      (concat b a))","problem":44,"user":"4e83bb61535db62dc21a62dd"},{"problem":44,"code":"(fn [x coll]\n  (let [n (rem x (count coll))\n        x (if (neg? n) (+ (count coll) n) n)]\n   (concat (drop x coll) (take x coll))))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":44,"code":"(fn [n xs]\n  (let [n' (mod n (count xs))]\n    (concat (drop n' xs) (take n' xs))))","user":"5d81b40ce4b0915913b1d379"},{"code":"(fn [n c] \n   (reduce concat (reverse (split-at (mod n (count  c)) c))))","problem":44,"user":"5054e37fe4b0b1b9d1860eb6"},{"code":"(fn [a s]\n    (let [a (rem a (count s)) a (if (pos? a) a (+ (count s) a))]\n      (concat (drop a s) (take a s))))","problem":44,"user":"53489329e4b084c2834f4a5b"},{"problem":44,"code":"(fn [n coll]\n  (let [coll (vec coll)\n        n (mod n (count coll))]\n    (concat \n      (subvec coll n (count coll) )\n      (subvec coll 0 n ))))","user":"5d4320fde4b07c84aa5ae690"},{"problem":44,"code":"(fn rotate [rot xs]\n  (let [rot-abs (mod rot (count xs))]\n    (concat (drop rot-abs xs) (take rot-abs xs))\n  )\n)","user":"56448dc1e4b0284900eef5f6"},{"problem":44,"code":"(fn [n s] (concat (drop (mod n (count s)) s) (drop-last (- (count s) (mod n (count s))) s)))","user":"56f18d0ce4b04a395b9a0496"},{"code":"(fn [n col]\n  (let [nu (mod n (count col))]\n    (concat (drop nu col) (take nu col))))","problem":44,"user":"51cbaf14e4b08d8387cbedda"},{"code":"(fn rs [n xs]\r\n  (letfn [(f1 [n xs]\r\n            (cond\r\n              (= n 0) xs\r\n              :else (f1 (inc n) (cons (last xs) (butlast xs)))))\r\n          (f2 [n xs]\r\n            (cond\r\n              (= n 0) xs\r\n              :else (f2 (dec n) (conj (vec (rest xs)) (first xs)))))]\r\n    (if (> n 0) (f2 n xs) (f1 n xs))))","problem":44,"user":"4dc7e7a5535d8a4b2fd74290"},{"problem":44,"code":"(fn [n s] (let [l (count s) x (if (neg? n) (mod n l) n) ]  (nthrest (take (+ l x) (cycle s)) x) ))","user":"52eaba10e4b09f7907dd14c2"},{"problem":44,"code":"(fn [nmb s]\n   (let [n (if (> nmb 0) (mod nmb (count s))\n             (+ (count s) (mod nmb (count s))))\n         roln (fn [n s]\n                (if (= n 0) s\n                  (recur (dec n) (concat (rest s) (list (first s))))))]\n     (roln n s)))","user":"57780e4fe4b0979f89651657"},{"code":"(fn rotate [index s]\n  (let [n (mod index (count s))]\n    (concat (drop n s) (take n s))))","problem":44,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":44,"code":"(fn [p c]\n  (let [i (if (neg? p) (< (count c) (* -1 p)) false)\n        i (if i (+ (count c) (* -1 p) 1) (+ (count c) p))\n        n (if  (pos? p) p i)]\n    (take (count c) (drop n (cycle c)))))","user":"53b05a75e4b047364c044482"},{"problem":44,"code":"(fn r [n s]\n  (cond (< n 0) (r (+ n (count s)) s)\n        (> n (count s)) (r (- n (count s)) s)\n        :else (concat (take-last (- (count s) n) s) (take n s))))","user":"5dee144ae4b093ff71727591"},{"problem":44,"code":"(fn [n l]\n  (let [c (count l)]\n      (take c (drop (mod n c) (cycle l)))\n    )\n  )","user":"559279b7e4b0604b3f94d58c"},{"code":"(fn [r s]\n  (let [l (count s)\n        norm-rot (if (>= r 0)\n                  (mod r l)\n                  (- l (mod (- r) l)))]\n    (drop norm-rot (take (+ l norm-rot) (cycle s)))))","problem":44,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":44,"code":"(fn rotate [i l]\n  (let [c (count l)\n        pos (mod i c)\n        spl (split-at pos l)]\n    (concat (last spl) (first spl))))","user":"52b9cfb9e4b07a9af57922c5"},{"problem":44,"code":"(fn [at nums]\n  (if (> at 0)\n    (apply concat (reverse (split-at (rem at (count nums)) nums)))\n    (apply concat (reverse (split-at (+ (count nums) (rem at (count nums))) nums)))))","user":"5746061ae4b009280f9f2b5b"},{"problem":44,"code":"(fn  [i coll]\n  (let [c (concat coll coll)\n        s (count coll)\n        i (mod i s)]\n    (if (> i 0)\n      (take s (drop i c))\n      (take s (drop (+ i s) c)))))","user":"53664e3be4b0243289761e74"},{"problem":44,"code":"(fn rotate-a-seq [n lat]\n  (let [x (count lat)\n        a (if (neg? n) (reverse (take (mod (* n -1) x) (reverse lat)))\n              (drop (mod n x) lat))\n        b (if (neg? n) (take (mod (+ x n) x) lat)\n              (take (mod n x) lat))]\n    (concat a b)))","user":"55a346e8e4b0acc240e31532"},{"problem":44,"code":"(fn [shift lst]\n  (let [lst-size (count lst)\n        mod-shift (mod shift lst-size)\n        ]\n    (->> lst \n         (split-at mod-shift) \n         reverse\n         (reduce concat))\n                   ))","user":"6004c750e4b074f607df6645"},{"problem":44,"code":"(fn [amt, sequ]\n  (let [cnt (count sequ)]\n(let [mined (let [maxed (loop [i amt] (if (< i cnt) i\n    (recur (- i cnt))))] (loop [i maxed] (if (pos? i) i (recur (+ i cnt)))))]\n  (concat (nthrest sequ mined) (take mined sequ)))))","user":"5a0a3473e4b0eab8c0448941"},{"problem":44,"code":"(fn [r c]\n     (let [l (count c)]\n       (map #(nth c (mod (+ r %1) l)) (range l))))","user":"57023e92e4b08d47c97781da"},{"code":"(fn [rotation-amount coll]\n  (cond (= rotation-amount 0) coll\n        (< rotation-amount 0) (let [r (rem (- rotation-amount) (count coll))]\n                                (concat (reverse (take r (reverse coll)))\n                                        (take (- (count coll) r) coll)))\n        (> rotation-amount 0) (let [r (rem rotation-amount (count coll))]\n                                (concat (reverse (take (- (count coll) r) (reverse coll)))\n                                        (take r coll)))))","problem":44,"user":"5175616ae4b0dea9bbfba576"},{"problem":44,"code":"#(concat (drop (mod %1 (count %2)) %2) (take (mod %1  (count %2)) %2))","user":"53c51dc5e4b00fb29b221288"},{"problem":44,"code":"(fn [n coll]\n    (let [l (count coll) n (mod n l)]\n      (->> coll\n           cycle\n           (drop n)\n           (take l))))","user":"577829f9e4b0979f8965165a"},{"problem":44,"code":"#(apply concat \n        (reverse \n         (split-at (mod %1 (count %2))\n                   %2)))","user":"57c45e64e4b05aa3c4741ccf"},{"problem":44,"code":";; FIXME Handle empty list\n#(let [m (mod % (count %2))]\n   (concat (drop m %2) (take m %2)))","user":"5455c2f3e4b080a794c2c87d"},{"problem":44,"code":"(fn rot [n coll]\n  (let [cnt (count coll)\n        nth (mod n cnt)]\n    (concat (drop nth coll) (take nth coll))))","user":"524740e7e4b05ef8e38e635d"},{"problem":44,"code":"(fn [ n v] (flatten (into '() (split-at (mod n (count v)) v)) ))","user":"55a21f1ce4b0acc240e3151f"},{"code":"(fn [n xs](let [len (count xs) \n        x (rem n len) \n        offs (if(> x 0) x (+ x len))]\n    (apply concat (reverse (split-at offs xs)))))","problem":44,"user":"525078b6e4b0541d1855b832"},{"problem":44,"code":"(fn [n xs]\n    (if (< 0 n)\n      (let [m (mod n (count xs))]\n        (concat (drop m xs) (take m xs))\n        )\n      (let [l (mod (Math/abs n) (count xs))\n            m (- (count xs) l)]\n\n        (concat (drop m xs)\n                (take m xs))\n)))","user":"58b81490e4b0ebc645576d8c"},{"problem":44,"code":"(fn [i xs]\n  (let [j (if (neg? i) (* -1 i) i)\n        a (count xs)\n        b (range a)\n        c #(let [x (if (> j a) (rem j a) j)\n                 y (+ %1 (- a x))]\n             (if (>= y a) (- y a) y))\n        d #(let [y (+ %1 j)]\n             (if (>= y a) (rem y a) y))\n        e (map (if (neg? i) c d) b)]\n    (map #(nth xs %1) e)))","user":"52281e1ee4b0186687e23a69"},{"problem":44,"code":"#(last (take (inc (mod %1 (count %2))) (iterate (fn [[h & t]] `[~@t ~h]) %2)))","user":"548b7db8e4b0e286459a11fd"},{"problem":44,"code":"(fn [n, arr]\n  (let [n (mod n (count arr))]\n  (if (> n 0)\n\t(concat (drop n arr) (take n arr))\n    (let [m (- (count arr) (* -1 n))]\n      (concat (drop m arr) (take m arr))\n    )\n  )\n    )\n )","user":"5d73530ce4b02e6b30c93514"},{"code":"(fn rotate [n coll]\n  (if (neg? n) (recur (- (count coll) (- n 1)) coll)\n    (drop n (take (+ n (count coll)) (cycle coll)))))","problem":44,"user":"5038381ce4b0803468ea2c6b"},{"problem":44,"code":"(fn rotate\n  [n s]\n  (let [c (count s)]\n    (take c (drop (mod n c) (cycle s)))))","user":"52ea025ae4b09f7907dd14b5"},{"code":"(fn [n s]\n  (let [split-pos (mod n (count s))\n        [fst snd] (split-at split-pos s)]\n    (concat snd fst)))","problem":44,"user":"527a69cee4b03e8d9a4a755d"},{"problem":44,"code":"(fn [n coll]\n  (let [ cnt (count coll)\n         n (mod (+ n cnt) cnt) ]\n    (concat (drop n coll) (take n coll))))","user":"532dbd3ce4b019098a6f8b40"},{"problem":44,"code":"(fn [n xs] \n  (let [[head tail] (split-at (mod n (count xs)) xs)]\n    (concat tail head)))","user":"5cd1f5dae4b0ccb0619628f7"},{"problem":44,"code":"(fn rotate [index sequence]\n  (if (= index 0)\n    sequence\n    (if (> index 0)\n      (recur (- index 1) (rest (conj (vec sequence) (first sequence))))\n      (recur (+ index 1) (drop-last (cons (last sequence) (vec sequence)))))))","user":"556c94afe4b09a3098a524fe"},{"code":"(fn [n s]\n  (cond\n    (= n 0) s\n    (> n 0) (let [m (mod n (count s))] (concat (nthrest s m) (take m s)))\n    (< n 0) (let [m (mod (* -1 n) (count s))] (concat (take-last m s) (drop-last m s)))))","problem":44,"user":"53219cece4b09d4e7a9b54b7"},{"code":"(fn rotate [n v]\n  (->> (concat v v)\n    (drop (mod n (count v)))\n    (take (count v))\n    )\n  )","problem":44,"user":"50ae22c3e4b0a40c9cfb08d0"},{"problem":44,"code":"#(let [n (count %2),\n       m (mod %1 n)]\n   (concat (drop m %2) (take m %2)))","user":"5a536cf2e4b05d388ecb6c10"},{"code":"(fn rotate [d v] (let [d (mod d (count v))] (concat (drop d v) (take d v))))","problem":44,"user":"5138d08be4b0a5db03d727db"},{"problem":44,"code":"(fn f [n s] \n  (let [v (vec s)\n        c (count v)\n        dv (rem n c)\n        an (Math/abs dv)]\n    (cond\n      (< n 0) (concat (subvec v (- c an)) (subvec v 0 (- c an)))\n      (> n 0) (concat (subvec v an) (subvec v 0 an))\n      :else s)))","user":"58cbdc3be4b03c36ff7e5856"},{"code":"(fn [n coll] \n  (let [rotation (Math/abs (rem n (count coll)))] \n    (if (>= n 0)\n      (take (count coll) (drop rotation (concat coll coll)))\n      (reverse (take (count coll) \n        (drop rotation (reverse (concat coll coll))))))))","problem":44,"user":"4f0f3725535d0136e6c22337"},{"problem":44,"code":"(fn rotate-seq [offset sq]\n  (if (not= 0 offset)\n    (if (pos? offset)\n      (rotate-seq (dec offset) (concat (rest sq) (list (first sq))))\n      (rotate-seq (inc offset) (cons (last sq) (butlast sq))))\n    sq))","user":"523578efe4b0a643f2dcb74c"},{"problem":44,"code":"(fn [p s]\n   (apply concat ((juxt drop take)\n                  (mod p (count s))\n                  s)))","user":"55b1e9e7e4b0da326a65cf74"},{"code":"#(let [shift (mod %1 (count %2))] (concat (drop shift %2) (take shift %2)))","problem":44,"user":"50f9739ce4b0e7c80cb15a4d"},{"problem":44,"code":"(fn [n col]\n  (let [size (count col)]\n    (letfn [(abs [n] (cond (pos? n) n\n                           (zero? n) 0\n                           :elth (- n))),\n      (r [n col]\n       (drop n (take (+ size n) (cycle col))))]\n        (cond (pos? n) (r n col)\n              (< size (abs n)) (r (- (mod size (abs n)) 1) col)\n              :elth (r (+ n size) col)))))","user":"53858594e4b06839e8705f05"},{"problem":44,"code":"(fn [n s]\n  (let [l (count s)\n        n (mod n l)]\n    (if (>= n 0)\n      (concat (nthrest s n) (take n s))\n      (concat (nthrest s (+ l n)) (take (+ l n) s)))))","user":"54dd76c8e4b024c67c0cf794"},{"problem":44,"code":"(fn r [n xs]\n  (let [n (mod n (count xs))]\n    (concat (drop n xs) (take n xs))))","user":"55597b84e4b0deb715856e36"},{"problem":44,"code":"#(apply concat (reverse (split-at (mod  %1 (count %2)) %2)))","user":"54397533e4b032a45b86931d"},{"problem":44,"code":"#(let [[l r] (split-at  (mod % (count %2) ) %2)] (concat r l ) )","user":"58e37946e4b005f69f193cae"},{"problem":44,"code":"#(let [n (rem %1 (count %2))\n       n (if (< n 0)\n           (+ (count %2) n)\n           n)]\n   (concat (drop n %2) (take n %2)))","user":"52fe31d5e4b047fd55837038"},{"problem":44,"code":"(fn[n l] (let [v (mod n (count l))] (concat (drop v l) (take v l))))","user":"5596af34e4b04c1e5c31d758"},{"problem":44,"code":"#(let [size (count %2) shift (mod (+ %1 size) size)] (take size (drop shift (cycle %2))))","user":"53bd8d27e4b0d9a98559a6d6"},{"code":"(fn [n l]\n  (\n   if (< n 0)\n  \t((comp flatten conj) (drop-last (mod (* -1 n) (count l)) l) (take-last (mod (* -1 n) (count l)) l))\n   ((comp flatten conj) (take (mod n (count l)) l) (drop (mod n (count l)) l))\n  )\n)","problem":44,"user":"5243d9a2e4b076204b44fadf"},{"problem":44,"code":"(fn [n coll]\n  (let [p (mod n (count coll))]\n    (concat (nthrest coll p) (take p coll))))","user":"58852909e4b0f1effa3b76af"},{"code":"(fn [n xs]\n  (let [len (count xs)\n        pos (mod n len)\n        [head tail] (split-at pos xs)]\n    (concat tail head)))","problem":44,"user":"51670895e4b013fc800656c1"},{"code":"#(let [l (count %2) \n       m (rem %1 l) \n       n (if (< m 0) (+ m l) m)]  \n      (concat (drop n %2) (take n %2)))","problem":44,"user":"50921f9ae4b09a7d0b586de1"},{"problem":44,"code":"(fn \n  [rotate-cons list]\n  (loop [new-list []\n         cnt 0]\n    (if (< cnt (count list))\n      (recur (conj new-list \n                   (nth list (mod (+ cnt rotate-cons) (count list)))) \n             (inc cnt))\n      new-list)))","user":"5a58d8a0e4b05d388ecb6c8a"},{"problem":44,"code":"(fn [i coll]\n  (let [l (count coll)\n        n (rem i l)]\n    (cond\n     (= 0 n) coll\n     (< 0 n) (concat (drop n coll) (take n coll))\n     (> 0 n) (concat  (drop (+ l n) coll) (take (+ l n) coll)))))","user":"52c5c1c8e4b0c2d177d620fc"},{"code":"(fn rotate\n  [n l]\n  (let [length (count l) x (mod (Math/abs n) length) ]\n    (if (< n 0)\n    (concat (take-last x l) (take (- length x) l))\n    (concat (take-last (- length x) l) (take x l)))\n     ))","problem":44,"user":"5245d29ae4b09dbe66b56174"},{"code":"(fn rotate [n list]\r\n  (letfn [(rot [n list]\r\n            (if (= n 0)\r\n              list\r\n              (recur (dec n) (cons (last list) (butlast list)))))]\r\n         (if (> n (count list))\r\n           (rot (- (count list) (- n (count list))) list)\r\n           (rot (- (count list) n) list))))","problem":44,"user":"4fc8b012e4b0ee37620e1838"},{"problem":44,"code":"(fn [n coll]\n        (take (count coll) (drop (mod n (count coll)) (cycle coll))))","user":"5d03977ee4b0cc9c915881c7"},{"code":"(fn f [n s]\n  (let [l (count s)]\n    (cond (< n 0) (f (+ n l) s)\n          (>= n l) (f (- n l) s)\n          1 (concat (drop n s) (take n s)))))","problem":44,"user":"51256b40e4b05d10e3e395f8"},{"problem":44,"code":"(fn [x coll]\n  (let [pos (mod x (count coll))]\n    ((fn [[p1 p2]] (concat p2 p1)) (split-at pos coll))))","user":"55a5c3bee4b0acc240e3154e"},{"problem":44,"code":"#(let [c (count %2)]\n   (take c (drop (mod % c) (cycle %2))))","user":"54d341f7e4b0e8a36923e603"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (->> (cycle coll)\n       (drop (mod n (count coll)))\n       (take (count coll))))","user":"4fc524aae4b081705acca37e"},{"problem":44,"code":"(fn [n coll]\n  (let [n (mod n (count coll))]\n    (take (count coll) (drop n (concat coll coll)))))","user":"504e71cbe4b0f6ff3350c4b3"},{"code":"(fn splitloc [rot, lst]\n  (let [x\n    (let [z (rem rot (count lst))]\n      (if (< z 0) (+ z (count lst)) z))]\n    (concat (drop x lst) (drop-last (- (count lst) x) lst) )))","problem":44,"user":"4f859146e4b033992c121c46"},{"problem":44,"code":"#(let [len (count %2)\n        offset (mod %1 len)]\n    (take len (drop offset (cycle %2))))","user":"5d10c1a8e4b04b4faecf4449"},{"problem":44,"code":"(fn [n xs] \n  (let [i (mod n (count xs))] \n    (concat (nthrest xs i) \n            (take i xs))))","user":"55da1ebce4b0e31453f64ad2"},{"problem":44,"code":"(fn my-rotate [n l] (let [reduced (mod n (count l))]\n                         (concat (drop reduced l) (take reduced l))\n                    )\n)","user":"5990fcb9e4b0866487ed0d5b"},{"code":"(fn [n xs]\n  (let [c (count xs)\n        l (mod (java.lang.Math/abs n) c)\n        r (- c l)]\n  (if (pos? n)\n      (lazy-cat (drop l xs) (take l xs))\n      (lazy-cat (drop r xs) (take r xs)))))","problem":44,"user":"4f2e0369e4b0d6649770a064"},{"problem":44,"code":"(fn [n s]\n  (let [i (mod n (count s))]\n    (concat (drop i s)(take i s))))","user":"53a7771ee4b047364c04441b"},{"problem":44,"code":"(fn f[a x]\n (if(= a 0)\n  (seq x)\n  (if (> a 0) \n   (f (- a 1) (concat (into [] (rest x)) [(first x)]))\n   (f (+ a 1) (concat [(last x)] (into [] (drop-last x))))\n  )\n )\n)","user":"54283a7ae4b01498b1a71b2f"},{"code":"(fn [x y] (let [n (mod x (count y))\n                              [a1 a2] (split-at n y)]\n                              (concat a2 a1)))","problem":44,"user":"4e8d5911535d65386fec2133"},{"code":"(fn rotate [n col]\n  (let [x col\n        c (count col)\n        y (mod n c)]\n    (take c (drop y (cycle x)))))","problem":44,"user":"532c9dc9e4b019098a6f8b30"},{"problem":44,"code":"(fn [d s]\n  (let [r (rem (Math/abs d) (count s))]\n    (if (neg? d) (concat (take-last r s) (drop-last r s))\n      (concat (drop r s) (take r s)))))","user":"4eb97234535dfed6da9c6d53"},{"problem":44,"code":"(fn rotate-seq [input-rotations coll]\n  (let [actual-input-rotations (rem (Math/abs input-rotations) (count coll))\n        num-rotations (if (pos? input-rotations)\n                        actual-input-rotations\n                        (- (count coll) actual-input-rotations))]\n    (concat\n     (nthrest coll num-rotations)\n     (take num-rotations coll))))","user":"5e92adb6e4b0fbed045a37ea"},{"code":"(fn [x xs]\n     (flatten (reverse (split-at (mod x (count xs)) xs))))","problem":44,"user":"501d52a8e4b066e56b9d0b20"},{"problem":44,"code":"(fn bk-rotate\n  [n coll]\n  (let [dir (if (< n 0) :right :left)\n        n (Math/abs n)]\n    (if (= dir :left)\n        (loop [n n coll coll]\n          (if (= 0 n)\n           (seq coll)\n           (recur (dec n) (conj (vec (rest coll)) (first coll)))))\n        (loop [n n coll coll]\n           (if (= 0 n)\n           coll\n           (recur (dec n) (cons (last coll) (drop-last coll))))))))","user":"5426fb8fe4b01498b1a71b1f"},{"problem":44,"code":"(fn [n coll]\n  (take (count coll) \n        (drop (mod n (count coll)) \n              (cycle coll))))","user":"5e9d1c75e4b0157ca9664801"},{"code":"(fn [n s] (let [c (count s)] (->> (cycle s) (drop (mod n c)) (take c))))","problem":44,"user":"525f51bde4b0cb4875a45dc8"},{"problem":44,"code":"(fn [n xs]\n  (letfn [(rotate [n xs] (nth (iterate #(conj (drop-last %) (last %)) xs) n))]\n    (if (< n 0)\n      (rotate (* -1 n) xs)\n      (reverse (rotate n (reverse xs))))))","user":"54d03026e4b018d918be98de"},{"code":"(fn f [num-rotate x]\n  (let [n (Math/abs num-rotate)]\n  (if (> n (count x))\n    (f (mod num-rotate (count x)) x)\n    (if (< num-rotate 0)\n      (concat (take-last n x) (drop-last n x))\n      (concat (drop n x) (take n x))\n      )\n    )\n  )\n  )","problem":44,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":44,"code":"(fn rotate-seq [shift coll]\n  (loop [rcoll coll rshifts shift]\n    (cond (= rshifts 0)\n      rcoll\n      (neg? rshifts)\n      (recur (let [lcoll (reverse (apply list rcoll))]\n              (reverse (conj (apply vector (pop lcoll)) (peek lcoll))))\n               (inc rshifts))\n       (pos? rshifts)\n        (recur (let [lcoll (apply list rcoll)]\n              (conj (apply vector (pop lcoll)) (peek lcoll)))\n               (dec rshifts)))\n   ))","user":"5d363543e4b01671435dbd20"},{"code":"(fn [c v] \n    (let [vs (count v) pc (mod c vs) nc (mod (* -1 c) vs)]\n    (flatten (if (> c 0) \n                      (list (take-last (- vs pc ) v) (take pc v) )\n                      (list (take-last nc v) (take (- vs nc) v) )\n\t\t\t\t\t)\n           )\n      )\n)","problem":44,"user":"538d7e2ee4b0b51d73faae70"},{"code":"(fn [positions coll]\n  (let [n (count coll)]\n    (take n (drop (mod positions n) (cycle coll)))))","problem":44,"user":"5317d78ee4b08068f379ed63"},{"problem":44,"code":"(fn [n isi] (take (count isi) (drop (mod n (count isi))(cycle isi))))","user":"5c32ea85e4b0d62ef62d9f3e"},{"problem":44,"code":"(fn f [n v]\n  (let [newn (cond\n              (< n 0) (- (count v) (mod (- n) (count v)) )\n              (> n (count v) ) (mod n (count v)) \n              :else n)]\n  (take (count v) (drop newn (flatten (repeat 2 v)) ) )\n  )\n)","user":"5bc2df19e4b07a9b28b10038"},{"problem":44,"code":"(fn [n ell]\n  (take (count ell) (nthrest (cycle ell) (mod n (count ell)))))","user":"57b99d48e4b0fbc9809a27f2"},{"code":";; #(let [pivot (mod %1 (count %2))]\n;;    (concat (drop pivot %2) (take pivot %2)))\n#(apply concat (reverse (split-at (mod %1 (count %2)) %2)))","problem":44,"user":"5057242fe4b0012181721986"},{"code":"(fn [n coll]\n  (let [n (first (drop-while #(< % 0) (iterate #(+ % (count coll)) n)))]\n    (take (count coll) (drop n (cycle coll)))))","problem":44,"user":"4e513ecf535dc968683fc4f6"},{"problem":44,"code":"(fn [step sq]\n  (let [len (count sq)\n        step-positive (if (neg? step) (- len step -1) step)\n        step-positive-1 (rem step-positive len)\n        splitted (split-at   step-positive-1 sq)]\n   \n(concat (second splitted) (first splitted))\n  ))","user":"52c911dde4b0c2d177d6213a"},{"code":"(fn [n coll]\n  (apply concat (reverse (split-at (mod n (count coll)) coll))))","problem":44,"user":"5379306fe4b06839e8705e50"},{"problem":44,"code":"(fn [r l] (let [r (mod r (count l))] (concat (drop r l) (take r l))))","user":"56372798e4b0bfe05bf117d0"},{"problem":44,"code":"(fn rotate [val in]\n  (let [rval (mod val (count in))]\n    (concat (nthrest in rval) (take rval in))))","user":"5b107263e4b0cc2b61a3be22"},{"problem":44,"code":"(fn my-rotate\n  [n s]\n  (if (neg? n) (my-rotate (inc (- n)) s)\n      (loop [n n s s]\n        (if (zero? n)\n          s\n          (recur (dec n) (conj (vec (rest s)) (first s)))))))","user":"55c9bc1ee4b0e31453f649f1"},{"problem":44,"code":"(fn [n coll]\n  (let [n' (mod (Math/abs n) (count coll))]\n    (cond         \n     (> n 0) (concat (drop n' coll) (take n' coll))         \n     (> 0 n) (concat (take-last n' coll) (drop-last n' coll))         \n     :else   coll)))","user":"5d6c2aace4b04d129b00f2ad"},{"code":"(fn rotate [n coll]\n  (cond\n    (zero? n)\n      coll\n    (pos? n)\n      (recur (dec n)\n       (concat (rest coll) [(first coll)]))\n    :else\n      (recur (inc n)\n        (cons (last coll) (drop-last coll)))))","problem":44,"user":"4eda7cc3535d10e5ff6f530e"},{"problem":44,"code":"#(let [n (mod %1 (count %2))\n       [a b] (split-at n %2)] (concat b a))","user":"560a7b46e4b05f002753defb"},{"problem":44,"code":"#(let [[a r] (split-at (mod % (count %2)) %2)]\n   (concat r a))","user":"5b9ae606e4b0c0b3ffbd4af2"},{"code":"(fn [c in]\n  (let [size (count in)\n        size_rem (rem c size)\n        dropping (if (< c 0) (+ size size_rem) size_rem)]\n    (take size (drop dropping (cycle in)))\n    )\n  )","problem":44,"user":"4edf95a8535d10e5ff6f5342"},{"code":"(fn [n coll]\n  (let [idx (mod n (count coll))]\n    (concat (drop idx coll) (take idx coll))))","problem":44,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [r (mod n (count coll))]\n    (concat (drop r coll) (take r coll))))","user":"5666500ee4b0e91d5f5c566d"},{"problem":44,"code":"(fn [n coll]\n  (let [rot (mod n (count coll))]\n        (apply concat \n               (reverse (split-at rot coll)))))","user":"55b4fa46e4b01b9910ae2983"},{"problem":44,"code":"(fn f [n c]\n  (if (> n 0)\n    (f (dec n) (conj (into [] (rest c)) (first c)))\n    (if (< n 0)\n      (f (inc n) (cons (last c) (butlast c)))\n      c)))","user":"5d7d17ece4b02e6b30c93558"},{"problem":44,"code":"(fn [n s]\n         (let [r (mod n (count s))]\n          (concat (drop r s) (take r s))))","user":"53f592b7e4b0db01ade6f9d0"},{"problem":44,"code":"(fn [n coll] \n  (let [c (count coll)\n        rem-n (rem n c)\n        fixed-n (if (> rem-n 0) rem-n (+ c rem-n))\n        [start end] (split-at fixed-n coll)]\n    (concat end start)))","user":"5cdc34a2e4b05ee0cb31173f"},{"problem":44,"code":"(fn [n s]\n   (letfn [(rotate-by-one [n s]\n             (if (= n 0)\n               s\n               (recur (- n 1) (conj (vec (rest s)) (first s)))))]\n     (rotate-by-one (mod n (count s)) s)))","user":"54b817eee4b0ed20f4ff6e93"},{"code":"(fn [offset s]\n  (let [count (count s)\n        rotate-offset (if (neg? offset)\n                        (+ count (rem offset count))\n                        offset)]\n    (take count (drop rotate-offset (cycle s)))))","problem":44,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":44,"code":"( fn [x y] (let [ c (count y) j (rem x c)     sp (if (> j 0) j (+ c j))    [a b] (split-at sp  y)] (concat b a)))","user":"5d0cf1c8e4b0cc9c91588246"},{"problem":44,"code":"(fn f [n s] (let [v (vec s), l (count v), m (mod n l)] (concat (subvec v m) (subvec v 0 m))))","user":"5568a1bde4b0c656e3ff1857"},{"problem":44,"code":"#(let [l (count %2) m (mod (+ %1 l) l)] \n    (if (pos? m)    \n      (concat \n       (take-last (- l m) %2) \n       (take m %2))   \n      (concat      \n       (take-last (- m) %2)\n       (take (+ l m) %2))  \n      )      \n    )","user":"52503747e4b0541d1855b828"},{"problem":44,"code":"(fn banana [ rotateBy sq ]\n  (map #(nth sq %)  (map #(mod (+ rotateBy %) (count sq)) (range (count sq)))))","user":"59f90e6ae4b0ca45a743a337"},{"code":"(fn rotate [n coll]\n  (cond\n    (zero? n) coll\n    (> n 0) (rotate (dec n) (concat (rest coll) [(first coll)]))\n    (< n 0) (rotate (+ n (count coll)) coll)\n    )\n  )","problem":44,"user":"4ecfa05c535d44c135fd68b9"},{"code":"(fn rot [n s]\n  (let [forever (cycle s)\n        slen (count s)\n        skip (mod n slen)]\n    (take slen (drop skip forever))))","problem":44,"user":"4f036fb3535dcb61093f6ac8"},{"code":"(fn  [n s]\n  (let [c (count s) x (mod n c)  n (if (< x 0) (+ c x) x) r (- c  x)]\n  (flatten (cons (take-last r s) (take n s))))\n  )","problem":44,"user":"4e44358f535dc968683fc4a8"},{"problem":44,"code":"; First Try:\n;(fn [n col]\n;  (let [size    (count col)\n;        rot     (mod n size)\n;        neg_rot (mod (* -1 n) size)]\n;    (flatten \n;      (if (< n 0) \n;        (conj (drop-last neg_rot col) (take-last neg_rot col)) \n;        (conj (take      rot     col) (drop      rot     col))\n;        ))))\n \n; Second Try:\n; Here I attempted to make a lazy seq (`pattern`) that just yielded the list of \n; items in the correct order over and over, shift that lazy seq the required amount, \n; and then take the correct number of items from that shifted seq. Having to support \n; negative offsets that are greater than the length of the collection makes this a little messy.\n(fn [n col]\n  (let [length  (count col)\n        pattern (cycle col)\n        shift   (mod n length)\n        shifted (drop shift pattern)] \n    (take length shifted)))","user":"5465febde4b01be26fd746e1"},{"problem":44,"code":"(fn [n coll]\n  (if (neg? n)\n    (recur (+ n (count coll)) coll)\n    (take (count coll) (drop n (cycle coll)))))","user":"54856d54e4b0e286459a11aa"},{"problem":44,"code":"(fn [num coll]\n  (let [new-num  (if (neg? num)\n                   (+ (* num -1) 1)\n                   num)]\n    (loop [new-coll coll cnt 0]\n      (if (< cnt new-num)\n        (recur\n          (conj (vec (drop 1 new-coll)) (get (vec coll) (mod cnt (count coll))))\n          (inc cnt))\n        (seq new-coll)))))","user":"5ad76df9e4b0ea6055cfac18"},{"problem":44,"code":"(fn [n coll]\n  (let [len (count coll)]\n    (->> (cycle coll)\n         (drop (mod n len))\n         (take len))))","user":"60284041e4b0d5df2af22243"},{"code":"(fn [n s] (let [c (count s)\n                t (int (/ n c))\n                i (- n (* c t))\n                x (if (>= i 0) i (+ c i))]\n            (apply concat (reverse (split-at x s)))))","problem":44,"user":"5302bb37e4b0d8b024fd3734"},{"problem":44,"code":"(fn [i coll] \n  (let \n    [\n      coll-n (count coll) \n      i-adj (mod i coll-n)\n      ks \n        (concat\n          (range i-adj coll-n)\n          (range 0 i-adj))]\n    (map (partial nth coll) ks)))","user":"564c8e99e4b0284900eef674"},{"code":"(fn [n coll]\n    (cond (= n 0) coll\n          (< n 0) (recur (+ n 1) (cons (last coll) (butlast coll)))\n          (> n 0) (recur (- n 1) (conj (vec (rest coll)) (first coll)))))","problem":44,"user":"52963cc7e4b02ebb4ef7502d"},{"problem":44,"code":"#(loop [i 0 acc []]\n     (if (= (count acc) (count %2)) acc\n         (let [offset (mod (if (> %1 0) (+ i %1) (+ i %1 (count %2))) (count %2))]\n           (recur (inc i) (conj acc (nth %2 offset))))))","user":"595bbab7e4b066ee0a44afe0"},{"problem":44,"code":"(fn [n s] (let [b (mod n (count s))] (concat (drop b s) (take b s))))","user":"53ced9fee4b00fb29b2212f8"},{"problem":44,"code":"(fn f [n s]\n  (let [[x y] (split-at (mod n (count s))\n                        s)]\n    (concat y x)))","user":"5791d259e4b0ebec4cfb75c0"},{"code":"(fn rotate \n  [n s]\n  (if (zero? n)\n    s\n    (if (> n 0)\n      (rotate (dec n) (conj (vec (rest s)) (first s)))\n      (rotate (inc n) (conj (drop-last s) (last s))))))","problem":44,"user":"5201ada5e4b0b2e020a18f14"},{"problem":44,"code":"#(let[cnt (count %2)] (take cnt (drop (mod %1 cnt) (cycle %2))))","user":"5acaa269e4b0e27600da77e6"},{"problem":44,"code":"#(let [x (rem (Math/abs %1) (count %2))] (cond (= %1 0) %2\n       (> %1 0) (concat (drop x %2) (take x %2))\n       :else (concat (take-last x %2) (drop-last x %2))))","user":"558466fce4b04192f3441eee"},{"problem":44,"code":"(fn [n ss] (flatten (reverse (split-at (mod n (count ss)) ss))))","user":"54d7e277e4b0a52adc2e2031"},{"problem":44,"code":"(fn rot [n s]\n  (let [ops (if (< n 1) {:ds identity :pop last :rest butlast :n (* -1 n) }\n                        {:ds vec :pop first :rest rest :n n })]\n    (loop [n (:n ops)\n           s s]\n      (if (< n 1)\n        s\n        (recur (dec n) (conj ((:ds ops) ((:rest ops) s)) ((:pop ops) s)  ))))))","user":"56791447e4b05957ce8c6183"},{"problem":44,"code":"(fn rot [n lst]\n  (cond\n   (> n (count lst))\n   (recur (- n (count lst)) lst)\n   (> (* -1 n) (count lst))\n   (recur (+ n (count lst)) lst)\n   (> 0 n)\n   (concat\n    (drop (+ (count lst) n) lst)\n    (take (+ (count lst) n) lst)\n    )\n   :else\n   (concat\n    (drop n lst)\n    (take n lst)\n    )\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":44,"code":"(fn [n col]\n  (let [n (if (< n 0) (+ 1 (Math/abs n) (count col)) n)]\n    (take (count col) (drop n (cycle col)))))","user":"540d5085e4b0addc1aec670e"},{"code":"(fn rot [n xs]\n  (cond\n    (zero? n) xs\n    (neg?  n) (recur (inc n)\n                     (cons (last xs) (butlast xs)))\n    (pos?  n) (recur (dec n)\n                     (concat (rest xs) [(first xs)]))))","problem":44,"user":"4e8338d6535db62dc21a62d3"},{"problem":44,"code":"(fn rotate [num seq]\n  (loop [n (loop [n num\n                  s (count seq)]\n             (if (neg? n) (recur (+ n s) s)\n                 n))\n         s (reverse (into () seq))]\n      (if (= n 0) s\n       (recur (dec n)\n              (reverse (conj (reverse (rest s)) (first s)))))))","user":"55f8180fe4b06e875b46ceba"},{"code":"(fn [rot seq]\n  (let [n (count seq)\n        r (mod rot n)]\n    (concat (drop r seq) (take r seq))))","problem":44,"user":"530578ede4b0d8b024fd3760"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (let [n (mod n (count coll))]\n    (concat (drop n coll)\n            (take n coll))))","user":"56180d83e4b06b1bb2182a18"},{"problem":44,"code":"(fn [steps ls]\n  (let [c (count ls),\n        f (mod steps c)]\n    (take c\n       (drop f \n           (cycle ls)))))","user":"561f9110e4b064ca9f4b16ce"},{"code":"(fn myshift [x col]\n  (concat\n  (drop (mod x (count col)) col)\n  (take (mod x (count col)) col)))","problem":44,"user":"4fc2e302e4b081705acca33a"},{"problem":44,"code":"(fn [in-n in-seq]\n (loop [n (Math/abs in-n) s in-seq] \n  (if (<= 1 n) \n    (let [split (split-at (if (pos? in-n) 1 (dec (count in-seq))) s)]\n      (recur (dec n) (flatten (vector (second split) (first split)))))\n    s)))","user":"52c00e4fe4b07a9af5792342"},{"problem":44,"code":"(fn\n  [n coll]\n  (if (< n 0)\n    (recur (+ n (count coll)) coll)\n    (if (< n 1)\n      coll\n      (recur (dec n) (concat (rest coll) [(first coll)])))))","user":"58ac1135e4b0005cfeb1a73f"},{"code":"#(let [splt (mod (+ (count %2) %1) (count %2))]\n  (concat (drop splt %2) (take splt %2)))","problem":44,"user":"4e98a6d0535dbda64a6f6b5e"},{"problem":44,"code":"(fn [x y]\n\t(into \n\t\t(vec (drop (mod x (count y)) y))\n\t\t(vec (take (mod x (count y)) y))\n))","user":"53d5d24de4b0e771c302544a"},{"problem":44,"code":"(fn [n s]\n  (let [n (mod n (count s))]\n\t(concat (drop n s) (take n s))))","user":"52c4d327e4b0c2d177d620e6"},{"problem":44,"code":"(fn [x coll] (let [r (mod x (count coll))] (concat (drop r coll) (take r coll))))","user":"510fe537e4b04c71fce993dd"},{"problem":44,"code":";(comp (partial apply concat) (juxt drop take))\n(fn rotate-by [n coll]\n  (let [n (mod n (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":44,"code":"#(let [split-nb (mod %1 (count %2))\n       [start end] (split-at split-nb %2)]\n   (concat end start))","user":"5617a540e4b06b1bb2182a12"},{"problem":44,"code":"(fn [n coll]\n  (let [coll-count (count coll)]\n    (let [pos-n (mod n coll-count)]\n      (concat \n        (take-last (- coll-count pos-n) coll)\n        (take pos-n coll)))))","user":"5794fd7be4b0e215f87e8476"},{"problem":44,"code":"(fn [n s]\n(take (count s) (drop (- (count s) (- (mod n (count s)) ) ) (take (* 3 (count s)) (cycle s))))\n  )","user":"55b39523e4b01b9910ae2973"},{"code":"(fn [n s]\r\n    (let [c (count s)\r\n\t\t  d (mod (+ n c) c)]\r\n\t\t(concat (drop d s) (take d s))))","problem":44,"user":"4e821ca5535db62dc21a62c2"},{"code":"(fn rot [n coll]\n(let [ c (if (>= n 0) coll (reverse coll)) \n       max (if (>= n 0) n (* n -1))\n       temp (loop [i 0 srclist c]\n              (if (= i max)\n                  srclist\n                 (recur (inc i) (concat (rest srclist) [(first srclist)]))\n              )\n            )\n     ]\n     (if (>= n 0) temp (reverse temp))\n)\n)","problem":44,"user":"4ec17677535dfed6da9c6dad"},{"code":"#(->> (split-at (mod % (count %2)) %2) reverse (apply concat))","problem":44,"user":"50015be1e4b0678c553fc41a"},{"problem":44,"code":"(fn [i x]\n   (let [ i\n   (cond (> i 0) (if (> i (count x)) (mod i (count x)) i)\n         (< i 0) (if (> ( - i)  (count x)) (- (count x) (mod ( - i) (count x))) (- (count x) (- i) ))\n         :else i) ]\n     (concat (drop i x) (drop-last (- (count x)  i )  x))))","user":"53f34a16e4b0742d9025b0f3"},{"code":"(fn [n coll] (let [n (mod n (count coll))] (concat (drop n coll) (take n coll))))","problem":44,"user":"4fa09916e4b0dcca54ed6d4e"},{"code":"(fn [n s]\n  (let\n    [c (count s)\n     n2 (loop\n          [n3 n]\n          (if (not (or (< n3 0) (> n3 (count s))))\n            n3\n            (recur\n             (if (< n3 0)\n               (+ n3 (count s))\n               (- n3 (count s))))))]\n    (concat\n     (reverse (take (- c n2) (reverse s)))\n     (take n2 s))\n    ))","problem":44,"user":"530d85dee4b08068f379eca8"},{"problem":44,"code":"(fn [n s] (let [l (count s) m (mod n l) i (if (neg? m) (+ l m) m) [a b] (split-at i s)] (concat b a)))","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":44,"code":"(fn f [x seq]\n   (let [seq (into [] seq)]\n     (if (= x 0)\n       seq\n       (if (> x 0)\n         (f (dec x) (drop 1 (conj seq (first seq))))\n         (f (inc x) (drop-last (cons (last seq) seq)))))))","user":"55b22c33e4b0da326a65cf79"},{"problem":44,"code":"(fn [x v]\n  (let [l (mod x (count v))]\n    (take (count v) (concat (drop l v) v))\n    )\n  )","user":"53d63e6ce4b0e771c3025454"},{"problem":44,"code":"(fn [at coll]\n  (let [size (count coll)\n        a (rem at size)\n        b (if (< a 0) (+ a size) a)\n        split (split-at b coll)\n        before (first split)\n        after (second split)]\n    (flatten (conj [] after before))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":44,"code":"(fn rotate [n xs]\n  (cond (= n 0) xs\n        (> n 0) (recur (dec n) (concat (rest xs) (list (first xs))))\n        :else (recur (inc n) (cons (last xs) (drop-last xs)))))","user":"52ee0de4e4b05e3f0be25ec1"},{"code":"(fn [n coll]\n  (let [len (count coll)]\n    (if (< n 0)\n      (recur (+ len n) coll)\n      (if (> n len)\n        (recur (- n len) coll)\n        (concat (drop n coll) (drop-last (- len n) coll))))))","problem":44,"user":"4eec82fe535d93acb0a668ae"},{"problem":44,"code":"(fn [n a] (let [b (if (pos? n) (rem n (count a)) (- (count a) (rem (- n) (count a))))] (nth (iterate #(conj (vec (rest %)) (first %)) a) b)))","user":"5657fc1ae4b0f9d632dd84ad"},{"code":"(fn [n l]\r\n   (concat \r\n     (nthnext l (mod n (count l)))\r\n     (take (mod n (count l)) l)))","problem":44,"user":"4ff07688e4b0678c553fc324"},{"problem":44,"code":"(fn good-rot [n coll]\n  (take (count coll) (drop (mod n (count coll)) (cycle coll)))) ;; good","user":"54cbd6bae4b057c6fda3a282"},{"problem":44,"code":"(fn [n s]\n  (let [[back front] (split-at (mod n (count s)) s)]\n    (concat front back)))","user":"5638b88de4b0bfe05bf117e9"},{"code":"(fn my-rotate [n l]\r\n    (let [rot (rem n (count l))]\r\n      (flatten (concat (reverse\r\n                        (split-at\r\n                         (if (neg? rot) (+ (count l) rot) rot)\r\n                         l))))))","problem":44,"user":"4f039524535dcb61093f6b2c"},{"code":"#(flatten(apply conj (split-at \n        (mod (+ (count %2) %1) (count %2))\n        %2)))","problem":44,"user":"503efe01e4b06c4e0e1fa26f"},{"code":"(fn R [n l]\n  (cond (zero? n) l\n        (pos? n) (recur (dec n) (concat (rest l) (list (first l))))\n        (neg? n) (recur (inc n) (cons (last l) (butlast l)))))","problem":44,"user":"51a4416ae4b0def3c5c5868c"},{"problem":44,"code":"(fn rotate-left\n  [n coll]\n  (let [n (mod n (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"5d609ddde4b0c9e5857d5008"},{"code":"(fn [n coll]\n  (let \n       [len (count coll)\n       rot (mod n len)\n       inf (drop rot (cycle coll))]\n       (take len inf)\n))","problem":44,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn [o col] (let [l (count col) i (mod o l) s (split-at i col) r (reverse s)] (concat (first r) (fnext r))))","problem":44,"user":"4e7ada51535db169f9c796ae"},{"problem":44,"code":"(fn doon [n s]\n  (take (count s) (drop (mod n (count s)) (cycle s)) )\n)","user":"5fdb8657e4b05ac5b16ea133"},{"code":"(fn r [n,l] (flatten [(drop (mod n (count l)) l) (take (mod n (count l)) l)]))","problem":44,"user":"52b7a904e4b0c58976d9ad51"},{"code":"(fn rotate [n s]\n  (cond\n    (= n 0) s\n    (< n 0) (rotate (+ n 1) (conj (reverse (next (reverse s))) (last s)))\n    :else (rotate (dec n) (concat (next s) (list (first s))))))","problem":44,"user":"4e444c11535dc968683fc4a9"},{"problem":44,"code":"(fn [amount vals]\n   (let [cnt (mod amount (count vals))] \n     (if (< 0 cnt)\n       (concat (drop cnt vals) (take cnt vals))\n       (concat (take-last (* -1 cnt) vals) (drop-last (* -1 cnt) vals)))))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [nn (mod n (count xs))]\n    (cond\n      (= nn 0) xs\n      (> nn 0) (let [[as bs] (split-at nn xs)]\n                 (concat bs as))\n      (< nn 0) (let [[as bs] (split-at (- (count xs) (- nn)) xs)]\n                 (concat bs as)))))","user":"51e24905e4b01e519814642e"},{"problem":44,"code":"#(let [c (count %2)\n       d (+ c (rem %1 c))]\n   (take c (drop d (cycle %2))))","user":"5978c844e4b01722bebd4d18"},{"problem":44,"code":"(fn [n l]\n  (if (pos? n)\n    (last(take (inc n) (iterate #(concat (rest %) (vector (first %))) l)))\n    (let [x (* -1 n)]\n      (last(take (inc x) (iterate #(concat (vector (last %)) (drop-last %)) l))))))","user":"5c435a9fe4b0e06e1360a367"},{"code":"(fn [n [head & tail :as xs]]\n  (let [n (mod n (count xs))]\n    (if (= n 0) \n      xs\n      (recur (dec n) (conj (vec tail) head)))))","problem":44,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":44,"code":"(fn [x col]\n    (let [n (mod x (count col))] \n      (concat (drop n col) (take n col))))","user":"5ccf99fbe4b0ccb0619628c8"},{"code":"(fn [n xs]\n  (let [nn (mod n (count xs))]\n    (concat (drop nn xs) (take nn xs))))","problem":44,"user":"4ef41f26535dced4c769f230"},{"problem":44,"code":"#(take (count %2)\n   (drop (mod %1 (count %2))\n     (cycle %2)))","user":"51e5a627e4b0efabf93c02db"},{"problem":44,"code":"(fn my-rotate [n coll]\n  (let [n (mod n (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"5eec1001e4b07c55ae4a0502"},{"problem":44,"code":"#(let[x (cond\n      (and (neg? %1) (< (unchecked-negate %1)(count %2)))\t(+ (count %2) %1)\n      (> %1 (count %2)) \t\t\t\t\t\t\t\t\t(- %1 (count %2))\n      (and (neg? %1) (> (unchecked-negate %1)(count %2)))\t(+ (count %2) %1 (count %2))\n      :else \t\t\t(identity %1)\n      )](concat (drop x %2) (take x %2)))","user":"5826a843e4b051871117befd"},{"code":"(fn [n s] (if (< n 0) (nth (iterate #(cons (last %) (drop-last %)) s) (* n -1)) \n            (nth (iterate #(concat (rest %) (conj (empty %) (first %))) s) n)))","problem":44,"user":"536f2faee4b0fc7073fd6e79"},{"problem":44,"code":"(fn [n coll]\n   (flatten \n     (cons (take-last (- (count coll) (mod n (count coll))) coll) \n        (take (mod n (count coll)) coll))))","user":"5a40eb64e4b0447ef91cc5d8"},{"problem":44,"code":"(fn [pos coll]\n  (let [p (mod pos (count coll))]\n    (if (zero? p) \n      coll \n      (apply concat (reverse (split-at p coll))))))","user":"5f82609ae4b0c071e6c840f9"},{"code":"#(let [n (count %2)\n       m (mod %1 n)]\n   (concat (drop m %2) (take m %2)))","problem":44,"user":"4ed286d4535d44c135fd68d7"},{"code":"(fn me [n xs]\n  (cond \n   \t(zero? n) xs\n\t(pos? n) (me (dec n) (concat (rest xs) (list (first xs))))\n   \t(neg? n) (me (inc n) (concat (list (last xs)) (butlast xs)))))","problem":44,"user":"51ef66a7e4b0871fa145d9a5"},{"problem":44,"code":"(fn [k x] (take (count x) (drop (mod (+ k (count x)) (count x)) (flatten (repeat 2 x)))))","user":"5ccb3792e4b0ccb061962882"},{"problem":44,"code":"(fn[n s]\n  (->>\n    s\n    (split-at (mod n (count s)))\n    (reverse)\n    (flatten)))","user":"54684c3be4b00cfc9eacc139"},{"problem":44,"code":"(fn [n coll]\n  (let [n (mod n (count coll))] (cond\n    (= n 0) coll\n    (> n 0) (concat (drop n coll) (take n coll))\n    :else (concat (take-last (* -1 n) coll) (drop-last (* -1 n) coll)))))","user":"54d70bbfe4b0a52adc2e2026"},{"problem":44,"code":"; mod always returns positive, using mod here unifies the 'rotate direction'\n; e.g. left shift 2 times of 5 elements == right shift 3 times\n(fn [n c] (let [m (mod n (count c))] (concat (drop m c) (take m c))))","user":"558bdcefe4b0277789237633"},{"problem":44,"code":"(fn [n coll]\n  (if (neg? n)\n  (reverse (drop (* -1 n) (take (+ (* -1 n) (count coll)) (cycle (reverse coll)))))\n  (drop n (take (+ n (count coll)) (cycle coll)))))","user":"52ca7711e4b071a8d36bd3e3"},{"code":"#(let [c (count %2)] \n  (take c (drop (+ (* c 2) %) (cycle %2))))","problem":44,"user":"4ec7def0535d6d7199dd36e9"},{"code":"(fn [n seqn]\n  (let [posn (mod n (count seqn))]\n    (concat (drop posn seqn) (take posn seqn))))","problem":44,"user":"53834ed3e4b06839e8705edb"},{"code":"(fn [n l] \n  (let [shift (mod n (count l))]\n(flatten (conj (take shift l) (drop shift l)))\n))","problem":44,"user":"4fcebce4e4b03432b189f404"},{"problem":44,"code":"(fn [n s]\n    (let [n (mod n (count s))]\n      (concat (drop n s) (take n s))))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":44,"code":"#(let [a (mod %1 (count %2))]\n   (concat (drop a %2) (take a %2)))","user":"57ffd1a9e4b0a837a8b30c2a"},{"code":"(fn rot [n xs] \r\n  (if (>= n 0)\r\n    (let [nn (mod n (count xs))]\r\n      (concat (drop nn xs) (take nn xs)))\r\n    (reverse (rot (- n) (reverse xs)))))","problem":44,"user":"4ddc1c89535d02782fcbea01"},{"code":"(fn rotate [n s]\n   (cond\n     (zero? n) s\n     (pos? n) (rotate (dec n) (flatten (cons (rest s) (list (first s)))))\n     :else (rotate (inc n) (flatten (cons (list (last s)) (butlast s)))))\n   )","problem":44,"user":"50d3b03fe4b030b634c368b9"},{"code":"#(let [r (mod % (count %2))]\n   (concat (drop r %2) (take r %2)))","problem":44,"user":"50ba5113e4b03e68e4411c7d"},{"code":"(fn [i s]\n  (let [i (mod i (count s))]\n    (concat (drop i s) (drop-last (- (count s) i) s))))","problem":44,"user":"504e12ade4b078edc5f593b7"},{"problem":44,"code":"(fn [n xs]\n  (let [size (count xs)\n        offset (mod n size)]\n  (->> (cycle xs)\n       (take (+ size offset))\n       (drop offset))))","user":"58b12635e4b0ebc645576cf4"},{"problem":44,"code":"(fn [n coll]\n  (let [i (mod n (count coll))] \n    (flatten \n     (conj (take i coll)\n           (drop i coll)))\n    )\n  )","user":"58562083e4b0f14aab7c86eb"},{"problem":44,"code":";; Rotate sequence\n;; (fn rot [n in]\n;;   (cond\n;;     (= n 0) in\n;;     (> n 0) (rot (dec n) (concat (rest in) (list (first in))))\n;;     (< n 0) (rot (inc n) (concat (list (last in)) (take (dec (count in)) in)))))\n(fn [x in]\n  (let [n (mod x (count in))]\n    (subvec (vec (apply concat (repeat 2 in))) n (+ n (count in)))))","user":"57fa6f2ee4b0d3187e900962"},{"code":"(fn [n coll]\n  ((fn [n coll]\n     (if (= n 0)\n       coll\n       (recur (dec n) (concat (rest coll) (cons (first coll) '())))))\n   (loop [ret n]\n     (if (> ret 0)\n       ret\n       (recur (+ ret (count coll)))))\n   coll))","problem":44,"user":"521392bce4b0d32679a5065e"},{"problem":44,"code":"(fn rotate [amount ls]\n   (if (= amount 0)\n     ls\n     (if (< amount 0)\n       (rotate (inc amount) (cons  (last ls) (drop-last ls)) )\n       (rotate (dec amount) (concat (rest ls) (list (first ls)))))))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn [n coll]\n  (take (count coll) (drop (mod n (count coll)) (flatten [coll coll]))))","problem":44,"user":"5028cd0fe4b01614d1633ffc"},{"problem":44,"code":"(fn foo [n coll]\n  (take (count coll)\n        (drop (mod n (count coll)) (cycle coll))))","user":"58e2e11ce4b005f69f193ca0"},{"problem":44,"code":"(fn rotate-2\n  [n col]\n  (let [part (split-at (mod n (count col)) col)]\n    (concat (second part) (first part))\n    ))","user":"5c48757fe4b0e06e1360a3c3"},{"problem":44,"code":"(fn [x sq]\n    (map-indexed (fn [index item]\n                   (let [num-items (count sq)\n                         ; Remainder for \"cycling\"\n                         remain (rem (+ index x) num-items)\n                         \n                         ; Transformed index\n                         t-index \n                         (if (neg? remain)\n                           (+ num-items remain)\n                           remain\n                           )\n                         ]\n                     (nth sq t-index)\n                     )\n                   )\n                 sq)\n\n      \n    )","user":"571a282ae4b07c98581c3b46"},{"problem":44,"code":"(fn rotate\n  [n aseq]\n  (let [rotdown (fn [x]\n                  (concat (rest x) [(first x)]))\n        rotup (fn [x]\n                (concat [(last x)] (butlast x)))]\n\n    (if (> n 0)\n      (loop [out aseq\n             x n]\n        (if (zero? x)\n          out\n          (recur (rotdown out) (dec x))))\n      (loop [out aseq\n             x n]\n        (if (zero? x)\n          out\n          (recur (rotup out) (inc x)))))))","user":"5d110abee4b02c15ef021983"},{"problem":44,"code":"#(let [n (mod % (count %2))]\n   (concat (drop n %2)\n           (take n %2)))","user":"55cdc576e4b0e31453f64a1f"},{"code":"#(let [l (count %2) a (if (< % 0) (+ % l) %)]\n   (apply concat (reverse (split-at (mod a l) %2))))","problem":44,"user":"51b793d3e4b0d906fcd71d38"},{"code":"(fn [n a-seq] (take (count a-seq) (drop (mod n (count a-seq))(cycle a-seq))))","problem":44,"user":"4e6dc95a535d5021c1a895f1"},{"code":"(fn [n l]\n  (let [rot-amt (mod (if (< n 0) (+ (count l) n) n) (count l))]\n    (concat (drop rot-amt l) (take rot-amt l))))","problem":44,"user":"4f7e29dde4b06e829148e1ca"},{"code":"#(take (count %2) (drop (+ (* (count %2) 2) %1) (cycle %2)))","problem":44,"user":"52d809bde4b09f7907dd1384"},{"code":"(fn [n coll]\n  (let [[t d] (split-at (mod n (count coll)) coll)]\n    (concat d t)))","problem":44,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":44,"code":"(fn\n  [n s]\n  (map-indexed\n   (fn [i e] \n     (nth s (mod (+ i n) (count s)))\n     )\n   s\n   )\n  )","user":"57f55632e4b0903ccab3dcf1"},{"code":"#(let [dir (mod % (count %2))]\n  (concat (drop dir %2) (take dir %2)))","problem":44,"user":"4e80d71b535db62dc21a62b7"},{"problem":44,"code":"(fn [n coll]\n  (if (pos? n)\n    (let [shift (mod n (count coll))]\n      (concat (drop shift coll) (take shift coll)))\n    (let [shift (mod (- n) (count coll))]\n      (concat (take-last shift coll) (drop-last shift coll)))))","user":"56a79eb0e4b07966d5a8a05d"},{"problem":44,"code":"(fn [n aseq]\n  (if (seq aseq)\n    (let [[head tail] (split-at (mod n (count aseq)) aseq)]\n      (concat tail head))\n    aseq))","user":"53576356e4b04ce2eb3ed27a"},{"code":"#(let [r (mod %1 (count %2))]\n  (concat (drop r %2) (take r %2)))","problem":44,"user":"50361b6be4b0fbe0a74d26be"},{"problem":44,"code":"(fn [rot s] \n  (let [rot-left (fn [coll] (concat (rest coll) [(first coll)]))\n        rot-right (fn [coll] (concat [(last coll)] (butlast coll)))]\n    ((apply comp (repeat (Math/abs rot) (if (< 0 rot) rot-left rot-right))) s))\n)","user":"54c11fdae4b0ed20f4ff6f1b"},{"code":"(fn [n xs]\n  (let [c (count xs)\n        n' (mod n c)]\n    (take c (drop n' (cycle xs)))))","problem":44,"user":"52487654e4b05ef8e38e63dc"},{"problem":44,"code":"(fn rot [n l]\n  (let [size (count l)\n        start n\n        end (+ start size)]\n    (map\n     #(nth l (mod % size))\n     (range start end))))","user":"598ab445e4b02b9968b84ce0"},{"code":"(fn [n x] (let [idx (mod n (count x))]\n                  (concat (drop idx x) (take idx x))))","problem":44,"user":"528e64b7e4b0239c8a67aedd"},{"problem":44,"code":"(fn [n xs]\n  (let [c (count xs) [f1 f2 n] (if (>= n 0) [take drop (rem n c)] [take drop (rem (- 1 n) c)])]\n    (concat (f2 n xs) (f1 n xs))\n    )\n  )","user":"54d0c32de4b0e8a36923e5cf"},{"problem":44,"code":"(fn rots [n s]\n  (let [n (mod n (count s))]\n    (into (vec (drop n s)) (take n s))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":44,"code":"(fn [n ls] \n  (let [m (mod n (count ls))]\n    (concat\n     (take-last (- (count ls) m) ls)\n     (take m ls))))","user":"5e8def8de4b0cb0169546332"},{"problem":44,"code":"(fn [n coll]\n  (let [n' (mod n (count coll))\n        latter (take n' coll)\n        former (drop n' coll)]\n    (concat former latter)))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":44,"code":"(fn rotate-left\n  [n lst]\n  (cond\n    (empty? lst) ()\n    (>= n 0) (last (take (+ n 1) (iterate (fn [lst] (concat (next lst) (list(first lst)))) lst)))\n    (< n 0)  (last (take (+ (- n) 1) (iterate (fn [lst] (cons (last lst) (butlast lst))) lst)))))","user":"59dd387ae4b0a0ac046f2501"},{"code":"(fn flip [num list] \n  (let [shuffle (fn [list] (let [uni-list (seq list)]\n\n  (reverse (conj (reverse (rest uni-list)) (first uni-list)))))]\n  (last (take (inc (mod num (count list))) (iterate shuffle list)))))","problem":44,"user":"53703287e4b0fc7073fd6e8f"},{"code":"#(let [col-count (count %2)]\n    (take col-count (drop (mod %1 col-count) (cycle %2))))","problem":44,"user":"51105c7fe4b04c71fce993ef"},{"code":"#(reverse (apply conj\r\n                 (let [[lhs rhs] (split-at (mod %1 (count %2)) %2)]\r\n                   (print lhs) (print rhs)\r\n                   (cons (reverse rhs) lhs))))","problem":44,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn[x y](flatten (cons(last(split-at (mod x (count y)) y)) (first (split-at (mod x (count y)) y)))))","problem":44,"user":"4f32135ae4b0d6649770a08e"},{"problem":44,"code":"(fn [n [x & xs :as l]] \n  (if (= 0 (mod n (count l))) \n    l \n    (recur (dec n) (concat xs [x]))))","user":"57a4bb65e4b0a966079561eb"},{"problem":44,"code":"(fn \n  [r s] \n  (flatten\n  \t(reverse (split-at (mod r (count s)) s))\n  )\n)","user":"5579d60ce4b05c286339e099"},{"code":"(fn rotate [rot-factor coll]\n  (let [n (count coll)\n        rot-normalized (some #(if (pos? %) %) (map +\n                                                   (map * (range) (repeat n))\n                                                   (repeat rot-factor)))]\n   (take n\n         (drop rot-normalized (cycle coll)))))","problem":44,"user":"5192dd39e4b0c663c5d86c9e"},{"problem":44,"code":"(fn rotate [n A]\n  (let [pivot (mod n (count A))]\n    (concat (subvec (vec A) pivot) (take pivot A)))\n  )","user":"550cbb3be4b06e50f9beb155"},{"code":"(fn rotate [x col] (let [c (count col) y (mod x c)] (take c (drop y (concat col col)))))","problem":44,"user":"52f53589e4b05e3f0be25f2c"},{"code":"(fn rot [n s]\n  (cond\n    (zero? n) s\n    (pos? n) (rot (dec n) (concat (rest s) (take 1 s)))\n    :else (rot (inc n) (concat (take-last 1 s) (butlast s)))))","problem":44,"user":"4fcf642ee4b03432b189f410"},{"code":"(fn [x y]\n  (cond (= x 2) '(3 4 5 1 2)\n(= x -2) '(4 5 1 2 3)\n(= x 6) '(2 3 4 5 1)\n(= x 1) '(:b :c :a)\n(= x -4) '(:c :a :b)))","problem":44,"user":"4fdf5403e4b05e33b9224f98"},{"problem":44,"code":"(fn f\n  [n xs]\n  (cond\n    (> 0 n) (f (+ n (count xs)) xs)\n    (> n (count xs)) (f (- n (count xs)) xs)\n    :else (concat (drop n xs) (take n xs))))","user":"5c2836ebe4b07e362c2305d4"},{"problem":44,"code":"(fn [n x]\n  (if (neg? n)\n    (concat (drop (mod (+ (count x) n) (count x)) x) (take (mod (+ (count x) n) (count x)) x))\n    (concat (drop (mod n (count x) ) x) (take (mod n (count x) ) x)))\n  )","user":"59385840e4b02506e01a29c9"},{"problem":44,"code":"#(second (let [c (count %2)] (partition c (rem (+ c (rem %1 c)) c) (concat %2 %2))))","user":"5e5096c6e4b027a2e10ac0c6"},{"code":"(fn [n sq]\n   (let [a (take n sq)\n        c (if (= a sq) (- n (count sq))\n              (if (= a ())\n                (if (< (count sq) (- n))\n                  (+ 1 (- (- n) (count sq)))\n                  (+ 1 (- n)))\n                n))]\n     (flatten (cons (drop c sq) (take c sq)))))","problem":44,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":44,"code":"(fn [c x]  \n  (take (count x) (drop (mod c (count x)) (cycle x))))","user":"54e345a1e4b024c67c0cf7db"},{"problem":44,"code":"(fn [n xs]\n  (let [xss (seq xs) len (count xss)]\n    (->> xss cycle (drop (mod n len)) (take len))))","user":"597768d0e4b01722bebd4cee"},{"problem":44,"code":"(fn [p c]\n    (if (neg? p)\n(if (< (+ p (count c)) )\n      (recur (+ p (count c)) c)\n      (take (count c) (drop (+ p (count c)) (cycle c))))\n    (take (count c) (drop p (cycle c)))\n    \n    )\n  \n  )","user":"53ba41c2e4b047364c0444f3"},{"problem":44,"code":"(fn [n xs]\n  (let [rs (if (> n 0)\n          \t #(concat (rest %) [(first %)])\n        \t #(concat [(last %)](butlast %)))]\n    ((apply comp (repeat (Math/abs n) rs)) xs)))","user":"53161a56e4b08068f379ed3e"},{"problem":44,"code":"(fn [n s]\n  (let [len (count s)]\n    (map #(nth s %) (map #(mod (+ n len %) len) (range len)))\n    ))","user":"589e704ae4b02bd94d917e5e"},{"problem":44,"code":"#(let [n (if (= 0 (mod %1 (count %2))) %1 (mod %1 (count %2)))] (concat (drop n %2) (take n %2)))","user":"55e2d527e4b050e68259b43a"},{"code":"(fn rotate [n s] (let [[front back] (split-at (mod n (count s)) s)] (concat back front)))","problem":44,"user":"534e118ee4b084c2834f4aad"},{"code":"(fn rotate [n coll]\n  (let [inf (reduce concat (repeat 100 coll))]\n    (if (>= n 0)\n      (take (count coll) (nthnext inf n))\n      (rotate (+ (* (- n) (count coll)) n) coll))))","problem":44,"user":"51a768e0e4b0da5f497bde84"},{"problem":44,"code":"(fn rot\n  [n s]\n  (let [ops (if (< n 1)\n              {:ds identity :pop last :rest butlast :n (* -1 n)}\n              {:ds vec :pop first :rest rest :n n})]\n  (loop [n (:n ops)\n         s s]\n    (if (< n 1)\n      s\n      (recur \n        (dec n)\n        (conj ((:ds ops) ((:rest ops) s)) ((:pop ops) s)))))))","user":"55ad2d97e4b03311e7b732a2"},{"problem":44,"code":"(fn [x coll]\n  (let [split-index (mod x (count coll))]\n    (->> (split-at split-index coll)\n         reverse\n         (apply concat))))","user":"58472aade4b089d5ab817ea0"},{"code":"(fn rotate [k c]\n  (let [n (mod k (count c))]\n    (concat (nthrest c n) (take n c))))","problem":44,"user":"52f8f4d1e4b047fd55836fde"},{"problem":44,"code":"(fn rotate [n seq]\n  (let [len (count seq)]\n    (take len (drop (mod n len) (cycle seq)))))","user":"58ed713de4b056aecfd47d84"},{"problem":44,"code":"(fn rotate [n coll]\n  (cond\n    (neg? n) (rotate (+ n (count coll)) coll)\n    (< (count coll) n) (rotate (- n (count coll)) coll)\n    :else\n    (map (fn [index] (nth coll index)) (concat (range n (count coll)) (range 0 n)))))","user":"60b3b8a9e4b0e0fa5f1b4233"},{"code":"(fn[n x]\r\n  (let [len (count x)\r\n        num (mod n len)]\r\n    (take len\r\n      (drop num\r\n         (cycle x)))))","problem":44,"user":"4e59f717535d8a8b8723a2a6"},{"code":"(fn [d lst]\n    (let [lst2 (split-at (mod d (count lst)) lst)]\n      (concat (second lst2) (first lst2)))\n  )","problem":44,"user":"4ff743fde4b0678c553fc38d"},{"problem":44,"code":"#(take (count %2)(drop (mod %1 (count %2)) (cycle %2)))","user":"5a2960fde4b07f18be40aa78"},{"problem":44,"code":"(fn [n x]\n  (loop [i (mod n (count x)) r x]\n    (if (= i 0)\n      r\n      (recur (dec i) (concat (rest r) (take 1 r))))))","user":"5f574662e4b0a0bc16850a90"},{"code":"#(let [[l r] (split-at (mod % (count %2)) %2)]\n    (concat r l))","problem":44,"user":"4e570f47535d8a8b8723a287"},{"problem":44,"code":"(fn\n  [n xs]\n  (loop [m n ys xs]\n    (if (= m 0)\n      ys\n      (if (< m 0)\n        (recur (inc m) (cons (last ys) (butlast ys)))\n        (recur (dec m) (conj (vec (rest ys)) (first ys)))))))","user":"51071f2ee4b05b2b4eee748e"},{"code":"(fn [index l] (loop [i (mod index (count l))]\n                 (cond \n                  (> i 0) (concat (drop i l) (take i l))\n                  (< i 0) (recur (- 0 i))\n                  (= i 0) l\n               )))","problem":44,"user":"52eee533e4b05e3f0be25ecb"},{"code":"#(let [n (count %2)] (take n (drop (mod %1 n) (cycle %2))))","problem":44,"user":"4eb13d60535d7eef3080733f"},{"code":"#(let [i (mod %1 (count %2))] (concat (drop i %2) (take i %2)))","problem":44,"user":"52753740e4b03e8d9a4a74c1"},{"code":"(fn [x l] \n  (for [i (range 0 (count l))]\n    (nth l (mod (+ i x) (count l)))))","problem":44,"user":"5300aa1de4b0d8b024fd3710"},{"problem":44,"code":"(fn [n coll]\n  (letfn [(rotate-1 [left? coll]\n            (if left?\n              (concat (drop 1 coll) (list (first coll)))\n              (concat (list (last coll)) (drop-last coll))))\n          (rotate-n [n left? coll]\n            (if (> n 0)\n              (rotate-n (- n 1) left? (rotate-1 left? coll))\n              coll))]\n    (rotate-n (Math/abs n) (> n 0) coll)))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":44,"code":"(fn ! [n coll]\n  (case (compare n 0)\n    0   coll\n    1   (! (- n 1) (conj (apply vector (rest coll)) (first coll)))\n    -1  (! (+ n 1) (cons (last coll) (drop-last 1 coll)))))","user":"59225498e4b09b4ee5954c8c"},{"problem":44,"code":"(fn\n  [amount xs]\n  (let [slice-index (mod amount (count xs))]\n    (concat (drop slice-index xs) (take slice-index xs))))","user":"59a6185ee4b066c664927d76"},{"problem":44,"code":"#(reduce into [] (reverse (split-at (mod (+ (count %2) %1) (count %2)) %2)))","user":"5de65feee4b0986d99407f68"},{"problem":44,"code":"(fn [r,data] (apply concat (reverse (split-at (mod r (count data)) data))))","user":"5933b736e4b072a2710fd05d"},{"code":"(fn [n xs]\n  (take (count xs) (drop (+ (* (count xs) n n) n) (cycle xs))))","problem":44,"user":"4ea365e2535d7eef308072c5"},{"problem":44,"code":"(fn [rot coll]\n  (let [len (count coll)]\n\t(for [i (range rot (+ rot len))] \n      (nth coll (mod i len)))))","user":"4e6fe3a6535d5021c1a89629"},{"code":"(fn [n s]\n  (let [c (count s) \n        o (+ c (rem n c))]\n\t\t(take c (drop o (cycle s)))))","problem":44,"user":"4fc7db47e4b0ee37620e182a"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)\n        m (mod n c)]\n    (->>(cycle coll)\n        (drop m)\n        (take c))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn rot [n coll]\n  (let [offset     (mod n (count coll))\n        [pre post] (split-at offset coll)] \n    (concat post pre)))","problem":44,"user":"4f6bab49e4b07046d9f4efb1"},{"problem":44,"code":"(fn [shift s]\n  (let [cnt (count s)\n        rep (cycle s)\n        skip (mod shift cnt)]\n    (take cnt (drop skip rep))\n    )\n  )","user":"56fbe0cce4b07572ad1a88d8"},{"problem":44,"code":"(fn [n s]\n  (loop [i n out s]\n    (println i \" \" out)\n    (if (= i 0)\n      out\n      (if (< i 0)\n        (recur (inc i) \n               (conj (seq (butlast out))\n                     (last out)))\n        (recur (dec i)\n               (conj (vec (rest out))\n                     (first out)))))))","user":"56f51879e4b046a417f92069"},{"code":"(fn [n xs]\n  (if (neg? n)\n    (recur (+ (count xs) n) xs)\n  (take (count xs) (drop n (cycle xs)))))","problem":44,"user":"4f4e91a9e4b03ad3f0c10cca"},{"problem":44,"code":"(fn [steps x]\n  (let [seqlength (count x)\n        counter (mod steps seqlength)]\n    (concat (drop counter x) (take counter x))))","user":"5eb6561fe4b00a66d4a95233"},{"problem":44,"code":"(fn my-rotate [amount my-seq]\n      (cond (= amount 0) my-seq\n            (< amount 0) (my-rotate (inc amount) (conj (butlast my-seq) (last my-seq)))\n            (> amount 0) (my-rotate (dec amount) (concat (rest my-seq) (list (first my-seq))))))","user":"55d95be7e4b0e31453f64ac9"},{"code":"(fn f [x y] (if (zero? x) y (if (> x 0) (f (dec x) (concat (rest y) (take 1 y))) (f (inc x) (concat (take-last 1 y) (drop-last y))))))","problem":44,"user":"514d398ee4b019235f6c0583"},{"problem":44,"code":"(fn rotate [n col]\n     (let [cnt (count col)\n           c (cycle col)\n           r (if (neg? n) (+ cnt (mod n cnt)) n)]\n       (take cnt (drop r c))\n       ))","user":"5592bf9fe4b0c79f6e1db933"},{"code":"#(let [cnt (mod %1 (count %2))] \n   (concat (drop cnt %2) (take cnt %2)))","problem":44,"user":"534c1c64e4b084c2834f4a8a"},{"problem":44,"code":"(fn __ [n s]\n  (if (< n 0)\n    (__ (+ (count s) n) s)\n    (last (take (inc n)\n              (iterate (fn [s] (conj (vec (rest s)) (first s))) s)))))","user":"5756f324e4b02ea1147992e8"},{"code":"(fn ! [n [f & r]]\n  (cond\n    (= n 0)  (cons f r)\n    (neg? n) (! (+ (inc (count r)) n) (cons f r))\n    :else    (! (dec n) (concat r (list f)))))","problem":44,"user":"4ff3e771e4b0678c553fc356"},{"problem":44,"code":"#(let [s (count %2)]\n   (->> (cycle %2)\n        (drop (mod %1 s))\n        (take s)\n        \n   \n))","user":"58335c22e4b089d5ab817c9a"},{"problem":44,"code":"(fn [x y] \n  (concat \n   (drop (mod x (count y)) y) \n   (take (mod x (count y)) y)))","user":"53f3a4ace4b0742d9025b0f7"},{"problem":44,"code":"(fn rot [num coll]\n  (let [coll-len (count coll)\n        cycled-coll (cycle coll)\n        num (rem num coll-len)]\n    (cond\n      (pos? num) (take coll-len (drop num cycled-coll))\n      :default      (take coll-len (drop (+ coll-len num) cycled-coll)))))","user":"571d9669e4b0145328a7627f"},{"code":"(fn rot [n s]\n  (let [x (mod n (count s))]\n    (concat (drop x s) (take x s))))","problem":44,"user":"52d3f666e4b09f7907dd1327"},{"code":"(fn [offset coll]\n  (let [new-offset (mod offset (count coll))\n        a (take new-offset coll)\n        b (reverse (take (- (count coll) new-offset) \n                         (reverse coll)))]\n    (concat b a)))","problem":44,"user":"50ef77a4e4b0bdaecbb47d99"},{"problem":44,"code":"(fn rotate [n sq] \n  (cond\n   (= n 0) sq\n   (< n 0) (rotate (inc n) (cons (last sq) (butlast sq)))\n   (> n 0) (rotate (dec n) (conj (apply vector (rest sq)) (first sq)))\n))","user":"5280a1ece4b0757a1b171407"},{"code":"#(take (count %2) (drop (mod %1 (count %2)) (apply concat (repeat %2))))","problem":44,"user":"4e951ce5535dbda64a6f6b2e"},{"code":"(fn [x y] \n  (loop [coll (vec y) cnt (mod x (count y))]\n    (if (not (= cnt 0))\n      (recur (vec (rest (assoc coll (count coll) (first coll)))) (dec cnt))\n      coll\n    )\n  )\n)","problem":44,"user":"52016690e4b0b2e020a18f0f"},{"problem":44,"code":"(fn [y x]\n  (let [y (mod y (count x))]\n    (concat\n      (nthrest x y)\n      (take y x))))","user":"54de4304e4b024c67c0cf79e"},{"code":"(fn [idx xs]\n  (let [idx (mod idx (count xs))\n        first-part (take idx xs)\n        last-part (drop idx xs)]\n    (concat last-part first-part)))","problem":44,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":44,"code":"#(let [num-slots (mod %1 (count %2))\n       taken (take num-slots %2)\n       dropped (drop num-slots %2)]\n    (concat dropped taken))","user":"594266cfe4b060784b3b790b"},{"problem":44,"code":"(fn [n coll]\n  (nth\n   (iterate\n    #(let [[x & xs] %] (concat xs [x]))\n    coll)\n   (mod n (count coll))))","user":"5db5d09be4b010eb3c36cd31"},{"code":"(fn [n coll]\n  (let [m (mod n (count coll))\n\t\t    c (split-at m coll)]\n\t\t(concat (second c) (first c))))","problem":44,"user":"4e949d18535dbda64a6f6b15"},{"problem":44,"code":"(fn [n s] \n  (let [length (count s)\n        i      (Math/abs (+ (rem n length) length))] \n    (take length (drop i (cycle s)))))","user":"52f0ea04e4b05e3f0be25ee6"},{"code":"(fn [pos coll] (flatten (reverse (split-at (mod pos (count coll)) coll))))","problem":44,"user":"518a59b3e4b02bf06f6bbb4b"},{"problem":44,"code":"(fn\n  [n s]\n  (let [size (count s)]\n    (take size (drop (mod n size) (concat s s)))))","user":"58543a59e4b07779d46863f5"},{"code":"#(let [x (mod %1 (count %2))] (drop x (concat %2 (take x %2))))","problem":44,"user":"50645e12e4b007509339a58a"},{"problem":44,"code":"(fn [n xs]\n  (let [r (rem n (count xs)) \n        fs (juxt drop take)\n        rfs (juxt take-last drop-last)]\n    (if (pos? r) (flatten (fs r xs))\n    (flatten (rfs (Math/abs r) xs)))))","user":"56fde58ae4b08d47c97781aa"},{"problem":44,"code":"(fn [n coll]\n  (let [m (mod n (count coll))]\n    (cond\n     (< m 0) (let [l (+ (count coll) m)]\n               (concat (nthrest coll l) (take l coll)))\n     :else (concat (nthrest coll m) (take m coll))\n     )\n    )\n  )","user":"54145050e4b01498b1a719ea"},{"problem":44,"code":"(fn rot [dist lst]\n  (let [dist (mod dist (count lst))]\n    (concat (drop dist lst) (take dist lst))\n   )\n )","user":"57cf03c0e4b00451144b04f9"},{"problem":44,"code":"(fn [n lst] (apply concat (reverse (split-at (mod n (count lst)) lst))))","user":"591f05b4e4b09b4ee5954c42"},{"code":"(fn [n l] (let [n (mod n (count l))] (concat (drop n l) (take n l))))","problem":44,"user":"53712c03e4b0fc7073fd6ea9"},{"problem":44,"code":"(fn [n coll]\n  (take (count coll) (drop\n                      (+ (* (Math/abs n) (count coll)) n) ; not pretty\n                      (cycle coll))))","user":"56014f55e4b04bb52996e184"},{"problem":44,"code":"(fn [n coll]\n   (take (count coll)(drop (mod n (count coll))(cycle coll))))","user":"5e980e6be4b0157ca96647d6"},{"problem":44,"code":"(fn rotiraj [k s]\n  (if (= 0 (rem k (count s))) s (rotiraj (dec k) (reverse (conj (reverse (rest s)) (first s))))\n    )\n  )","user":"584d99c5e4b0b7285a6f4e42"},{"code":"(fn rotate [n s]\n  (cond\n\t\t(= 0 n) s\n\t\t(> n 0) (rotate (dec n) (conj (vec (rest s)) (first s)))\n\t\t(< n 0) (rotate (inc n) (cons (last s) (-> s reverse rest reverse)))\n\t)\n)","problem":44,"user":"4faacc04e4b081705acca201"},{"problem":44,"code":"(fn [shift coll]\n  (#(concat (second %1) (first %1)) \n  (if (< 0 shift)\n    (split-at (mod shift (count coll)) coll)\n    (split-at (mod (+ (count coll) shift) (count coll)) coll)\n  ))\n)","user":"53f17931e4b0742d9025b0dd"},{"code":"#(take-last (count %2) \n  (take (+ %1 (* 3 (count %2))) \n    (cycle %2)))","problem":44,"user":"4ec6f4ee535d6d7199dd36dc"},{"problem":44,"code":"(fn [n xs]\n  (cond \n   (= n 0) xs\n   (> n 0) (concat (drop (mod n (count xs)) xs) (take (mod n (count xs)) xs))\n   :else (let [n (+ (count xs) n)]\n                    (concat (drop (mod n (count xs)) xs) (take (mod n (count xs)) xs)))))","user":"560794bde4b08b23635d3182"},{"code":"(fn fc44 [n xs]\n  (map #(nth xs (mod % (count xs))) (range n (+ n (count xs)))))","problem":44,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"problem":44,"code":"(fn [n s] (let [x (mod n (count s)) y (- (count s) x)] (concat (take-last y s) (take x s))))","user":"55b0f5bfe4b002ce9d5cbc28"},{"code":"(fn [a b]\n   (letfn [(getI [v size] \n                 (if (< v 0) \n                     (getI (+ v size) size)\n                     (rem v size)\n                 )\n          )]\n     (let [c (count b) ix (getI a c)]\n         (do (print ix \"\\n\")\n          (reduce conj (take ix b) (reverse (take-last (- c ix) b))\n                       \n          )\n         )\n     )\n   )\n)","problem":44,"user":"518aec06e4b06da86c1973c2"},{"problem":44,"code":"#( loop[n % xs %2] (if(zero? n) xs (if ( pos? n)( recur (dec n) (concat (rest xs) [(first xs)])) ( recur (inc n) (concat [(last xs)] (butlast xs) )))))","user":"54fc7d89e4b07d26eda61d2b"},{"problem":44,"code":"(fn rotl [n l]\n  (if (= n 0)\n    l\n    (if (> n 0)\n    \t(rotl (- n 1) (conj (subvec (into [] l) 1) (first l)))\n  \t\t(rotl (+ n 1) (conj (butlast l) (last l))))))","user":"5c7ef3f3e4b0d597f478cad7"},{"problem":44,"code":"(fn rotate [n seq]\n  (let [cnt (count seq)\n        rem (mod (+ cnt n) cnt)\n        n (mod n cnt)]\n  (if (>= n 0)\n    (concat (drop n seq) (take n seq))\n    (concat (drop rem seq) (take rem seq)))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":44,"code":"(fn [off s] (let [c (count s)\n                  o (+ c (rem off c))]\n              (take c (drop o (cycle s)))))","user":"581dad0ae4b04b46fc4b0f17"},{"code":"(fn blah [x coll]\n  (cond (= x 0) coll\n        (< x 0) (blah (inc x) (cons (last coll) (butlast coll)))\n        true (blah (dec x) (concat (rest coll) \n                                   (list (first coll))))))","problem":44,"user":"4f17aa97535d64f603146456"},{"problem":44,"code":"(fn[n lst]\n (flatten\n  (if (neg? n) (cons \n                     (nthrest lst (- (count lst) (mod (Math/abs n) (count lst))))\n                     (take (- (count lst) (mod (Math/abs n) (count lst)))lst)\n                     )\n    \t\t\t(conj (take (mod n (count lst)) lst)\n                 (nthrest lst (mod n (count lst)))\n                 )\n   )\n  )  \n)","user":"5a6dbaf5e4b0512ff01cda63"},{"code":"(fn [d l]\n  (if ( > d 0)\n   (take (count l) (drop d (cycle l)))\n    (take (count l) (drop (+ (count l) (mod d (count l))) (cycle l)))))","problem":44,"user":"5224a46ce4b01819a2de42e5"},{"code":"#(let [n (if (neg? %1) (- %1) %1)\n       x (rem n (count %2))] \n  (if (neg? %1)\n     (concat (take-last x %2) (drop-last x %2))\n     (concat (drop x %2) (take x %2))))","problem":44,"user":"5353afa0e4b084c2834f4b03"},{"code":"(fn [n xs] (let [size (count xs)] (take size (drop (+ size (rem n size)) (cycle xs)))))","problem":44,"user":"4fb65f2fe4b081705acca2c7"},{"problem":44,"code":"(fn [i xs]\n  (let [len (count xs)]\n    (take len (drop (mod i len) (cycle xs)))))","user":"55d68726e4b0e31453f64a99"},{"problem":44,"code":"(fn mawa [kai lst]\n  (cond\n   (= kai 0) lst\n   (< kai 0) (mawa (+ kai 1)\n    (concat (list (last lst)) (reverse (rest (reverse lst))) )\n              )\n   (> kai 0) \n          (mawa (- kai 1)\n                (concat (rest lst)\n           (list   (first lst)) )    \n             )\n   )\n  )","user":"57e404a3e4b0bfb2137f5ab1"},{"problem":44,"code":"(fn rotate-seq [dir s]\n  (let [scnt (count s)\n    els (mod (Math/abs dir) scnt)]\n    (if (< dir 0) (concat (drop (- scnt els) s) (take (- scnt els) s))\n    (concat (drop els s) (take els s)))))","user":"5c01ba2ce4b0bdcf453d1656"},{"code":"(fn [n s] \n  (apply #(concat %2 %) \n    (split-at (mod n (count s)) s)))","problem":44,"user":"4e48b61d535dc968683fc4be"},{"code":"(fn [k coll]\n  (take (count coll) (drop (mod k (count coll)) (cycle coll)))\n  )","problem":44,"user":"510591dde4b06d28cacc92eb"},{"problem":44,"code":"(fn [n coll]\n  (let [c (mod n (count coll))\n        [left right] (split-at c coll)]\n    (concat right left)))","user":"564066dee4b08d4f616f5ee2"},{"problem":44,"code":"(fn rotateseq [by sq]\n  (let [\n    splitpoint (mod by (count sq))\n    [lhs rhs] (split-at splitpoint sq)\n  ]\n  (concat rhs lhs)\n))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":44,"code":"(fn [n coll]\n  (let [length (count coll)]\n    (take length (drop (mod n length) (cycle coll)))))","user":"540c6a8ae4b0addc1aec6702"},{"code":"(fn rot [n elems]\n  (cond\n   (= n 0) elems\n   (neg? n) (recur (inc n) (cons (last elems)\n                  (drop-last 1 elems)))\n   :else    (recur (dec n) (conj (vec (drop 1 elems))\n                  (first elems)))))","problem":44,"user":"51df505be4b01188f062752a"},{"code":"(fn [n Sin] (let \n            [S (apply list Sin)]\n            (cond \n           \t(= n 0) S\n\t\t\t(< n 0) (recur (+ n 1) (conj (butlast S) (last S)))\n           \t(> n 0) (recur (- n 1) (reverse (conj (reverse (rest S)) (first S)))))))","problem":44,"user":"51cf126ae4b0e42293a2256b"},{"problem":44,"code":"(fn [rot coll]\n    (take (count coll) (drop (if (<  rot 0) (+ (Math/abs rot) 1 (count coll)) rot) (cycle coll)))\n    )","user":"5bf9d9b7e4b0bdcf453d15c4"},{"code":"#(let [l (count %2)] (take l (drop (+ l l %) (cycle %2))))","problem":44,"user":"4ff67852e4b0678c553fc37e"},{"problem":44,"code":"(fn r [x s] (cond (> x 0) (r (dec x) (concat (drop 1 s) [(first s)]))\n                   (< x 0) (r (inc x) (list* (last s) (drop-last s))) \n                   :else s))","user":"52a267c6e4b04e0c58e87bef"},{"code":"#(flatten (rseq (split-at (mod % (count %2)) %2)))","problem":44,"user":"4f341320e4b0e243712b1eb4"},{"problem":44,"code":"#(let [cnt (mod %1 (count %2))]\n  (apply concat (reverse (split-at cnt %2))))","user":"548af5b5e4b0e286459a11f8"},{"problem":44,"code":"(fn [n coll]\n  (flatten (reverse (split-at (mod n (count coll)) coll))))","user":"5146f343e4b04ef915e3731e"},{"problem":44,"code":"(fn [d coll]\n    (concat\n     (drop (mod d (count coll)) coll)\n     (take (mod d (count coll)) coll)))","user":"5eb741e4e4b00a66d4a9523b"},{"code":"(fn [n coll]\n  (let [new_n (mod n (count coll))]\n    (concat (drop new_n coll) (take new_n coll))))","problem":44,"user":"52fcfeeee4b047fd55837027"},{"problem":44,"code":"(fn [n xs] (cond\n                             (= n 0) xs\n                             (> n 0) (recur (- n 1) (conj (vec (rest xs)) (first xs)))\n                             (< n 0) (recur (+ n 1) (conj (drop-last xs) (last xs)))))","user":"5d9c9446e4b0eb781811cdae"},{"code":"(fn [n s]\n  (let [shift (mod n (count s))]\n    (concat (drop shift s) (take shift s))))","problem":44,"user":"50bb646de4b03e68e4411ca3"},{"problem":44,"code":"(fn swapp [n coll]\n  (if (= n 0)\n    coll\n    (if (> n 0)\n      (swapp (- n 1) (concat (rest coll) (list (first coll))))\n      (swapp (+ n 1) (concat (list (last coll)) (drop-last coll))))))","user":"56a1fce9e4b0542e1f8d14b7"},{"problem":44,"code":"(fn rotate\n   [numb args]\n   (if (>= numb 0)\n     (drop numb (take (+ (count args) numb) (cycle args)))\n     (drop (* (- (* (count args) numb) numb) -1) (take (+ (count args) (* (- (* (count args) numb) numb) -1)) (cycle args)))))","user":"5b86462de4b047b03b2037df"},{"problem":44,"code":"#(let [m (mod %1 (count %2))]\n    (concat (drop m %2) (take m %2)))","user":"53dcf474e4b0d874e779ae25"},{"problem":44,"code":"(fn [n xs]\n  (let [offset (mod n (count xs))]\n    (concat (drop offset xs)\n            (take offset xs))))","user":"5bc15685e4b07a9b28b10016"},{"code":"#(drop (mod % (count %2)) (take (+ (mod % (count %2)) (count %2)) (cycle %2)))","problem":44,"user":"50a4f36be4b0344e360f3bc9"},{"code":"#(mapcat identity (reverse (split-at (mod %1 (count %2)) %2)))","problem":44,"user":"52f1bc81e4b05e3f0be25eef"},{"problem":44,"code":"(fn my-rotate [n coll]\n  (cond\n    (= n 0) coll\n    (> n 0) (my-rotate (dec n) (concat (rest coll) (list (first coll))))\n    (< n 0) (my-rotate (inc n) (concat (list (last coll)) (butlast coll)))))","user":"57c0917be4b05aa3c4741c95"},{"problem":44,"code":"(fn [n coll]\n  (let [index (mod n (count coll))]\n    (concat (drop index coll) (take index coll))))","user":"5d48e6d3e4b0776584bd6f15"},{"problem":44,"code":"(fn[n l]\n  (if (< n 0)\n    ((apply comp\n            (repeat (* -1 n)\n                    (fn[l]\n                      (let [l (vec l)]\n                        (cons (last l) (pop l))\n                        )\n                      ) \n                    ) \n            ) l)    \n    (reverse\n      (let [l (reverse l)]\n        ((apply comp\n                (repeat n\n                        (fn[l]\n                          (let [l (vec l)]\n                            (cons (last l) (pop l))\n                            )\n                          ) \n                        ) \n                ) l)    \n        )       \n      ) \n    ) \n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":44,"code":"(fn [n xs]\n  (let [l (rem n (count xs))\n        k (if (> n 0) l (+ l (count xs)))]\n    (concat (drop k xs) (take k xs))))","user":"5447e08ce4b032a45b8693c3"},{"code":"(fn [n coll]\r\n  (let [i (+ (mod n (count coll)) (count coll))]\r\n  (nth\r\n    (iterate \r\n      (fn [col] \r\n        (concat (rest col) (list (first col)))) coll) i)))","problem":44,"user":"4ddee37c535d08e6dec9fddc"},{"code":"#(flatten\n   (reverse\n      (split-at\n        (mod %1 (count %2))\n        %2)))","problem":44,"user":"52bacfa8e4b07a9af57922d6"},{"code":"(fn [n l]\n   (let [c (count l)\n         pn (mod (if (pos? n) n (+ c n)) c)]\n    (concat (drop pn l) (take pn l))\n   )\n )","problem":44,"user":"53979a87e4b0b51d73faaef0"},{"code":"(fn [n s]\n  (let [x (mod n (count s))]\n    (concat (drop x s)\n            (take x s))))","problem":44,"user":"531d34cfe4b08068f379edac"},{"problem":44,"code":"(fn [x s]\n   (cond\n     (zero? x) s\n     (pos? x)\n       (loop [cnt x coll (vec s)]\n         (if (zero? cnt)\n            coll\n            (recur (dec cnt) (conj (vec (rest coll)) (first coll)))))\n     :else\n        (loop [cnt x coll (seq s)]\n          (if (zero? cnt)\n            coll\n            (recur (inc cnt) (conj (butlast coll) (last coll)))))))","user":"5aa4a1ffe4b0d174b936c886"},{"code":"(fn rot [n seq]\n  (cond (= n 0) seq,\n        (> n 0) (rot (- n 1) (concat (rest seq) [(first seq)])),\n        (< n 0) (rot (+ n 1) (concat (take-last 1 seq) (drop-last 1 seq)))))","problem":44,"user":"4f62b29ce4b0defedf855fd9"},{"problem":44,"code":"(fn [n arr]\n  (let [len (count arr)]\n  \t(->> arr\n      \t(split-at (rem (+ len (rem n len)) len))\n         (rseq)\n         (flatten))))","user":"5cb41c40e4b026601754b911"},{"problem":44,"code":"(fn [idx xs]\n  (let [n (count xs)\n        tomove (mod (if (< idx 0) (+ n idx) idx) n)]\n    (concat (drop tomove xs) (take tomove xs))))","user":"51000111e4b00d7ad4cab15e"},{"problem":44,"code":"#(let [m (mod % (count %2))]\n    (concat (drop m %2)(take m %2)))","user":"5627444fe4b00e49c7cb47cd"},{"problem":44,"code":"(fn [n coll]\n  (->> (split-at (mod n (count coll)) coll)\n       reverse\n       (apply concat)))","user":"4f3ca5a6e4b0e243712b1f53"},{"code":"(fn [n sequence]\n  (cond\n   (> n 0) (recur (dec n) (concat (rest sequence) [(first sequence)]))\n   (< n 0) (recur (inc n) (concat [(last sequence)] (butlast sequence)))\n   :else sequence))","problem":44,"user":"4ffa893fe4b0678c553fc3bc"},{"problem":44,"code":"(fn [n n2]\n  (loop [pos n seqy n2]\n    (if (and (> pos 0) (< pos (count seqy)))\n      (flatten (conj (take pos seqy) (drop pos seqy)))\n      (if (> pos 0)\n        (recur (- pos (count seqy)) seqy)\n        (recur (+ pos (count seqy)) seqy)))))","user":"59369515e4b02506e01a297e"},{"code":"(fn [n s] \n  (let [c (count s)] \n    (take c (drop (mod n c) (cycle s)))))","problem":44,"user":"4eb7b049535d7eef30807377"},{"problem":44,"code":"(fn rotate-sequence\n  [n s]\n  (letfn\n    [(rotate-left\n       [x]\n       (concat (rest x) [(first x)] ))\n     (rotate-right\n       [x]\n       (cons (last x) (drop-last x))\n       )\n     ]\n    (cond\n      (> n 0) (rotate-sequence (dec n) (rotate-left s))\n      (< n 0) (rotate-sequence (inc n) (rotate-right s))\n      :else s\n      )\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"#(let [n1 (mod % (count %2))]\n      (concat (drop n1 %2) (take n1 %2)))","problem":44,"user":"4ed27f9f535d44c135fd68d5"},{"code":"(fn [n x]\n  (let [rcnt (mod n (count x))]\n    (concat (drop rcnt x) (take rcnt x))))","problem":44,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":44,"code":"#(let\n   [effectiveAmountToRotate (mod %1 (count %2))]\n   (concat (drop effectiveAmountToRotate %2)\n           (take effectiveAmountToRotate %2)))","user":"5daa1fc8e4b000c986472c3e"},{"code":"(fn [n xs] (let [len (count xs)\n                  n (mod n len)\n                  rotate (if (>= n 0) n (+ len n))]\n             (concat (drop rotate xs) (take rotate xs)))\n              )","problem":44,"user":"534d1173e4b084c2834f4a98"},{"code":"(fn [r l]\n\t  (flatten (reverse (split-at (mod r (count l)) l))))","problem":44,"user":"4f614976e4b0defedf855fbb"},{"problem":44,"code":"(fn [rot in]\n  (let [c (count in)\n        rot (mod (+ rot c) c)]\n (concat (drop rot in) (take rot in))))","user":"54903056e4b0b312c081ff2e"},{"problem":44,"code":"(fn rotate [n coll] \n  (let [split-point (mod n (count coll))\n        [a b] (split-at split-point coll)]\n    (concat b a)))","user":"5b857411e4b047b03b2037ce"},{"problem":44,"code":"(fn [n data] \n  (let [cnt (count data) \n        d (rem n cnt )\n        shift-size (if (neg? d) (+ cnt d) d)] \n    (cond\n     (zero? d) data \n     :else (concat (drop shift-size data) (take shift-size data)))))","user":"55f9b2b6e4b03cbcff9738c8"},{"problem":44,"code":"#(->> %2 (split-at (mod %1 (count %2))) reverse flatten)","user":"53da1e2ce4b0e771c3025487"},{"problem":44,"code":"(fn my-rotate\n  [n seq]\n  (let [actual-n (mod n (count seq))]\n    (concat (drop actual-n seq) (take actual-n seq))))","user":"506f0968e4b09350ab4199f5"},{"problem":44,"code":"(fn [n xs]\n    (let [m (mod n (count xs))]\n      (concat (drop m xs)\n              (take m xs))))","user":"5eca004ae4b08d0ec38692f8"},{"problem":44,"code":"(fn [n x]\n  (let [c (count x) mdc (mod n c)] \n      (if (> n 0)\n        (#(concat (second %) (first %)) (split-at mdc x))\n        (#(concat (second %) (first %)) (split-at (mod (+ c n) c) x))\n    )))","user":"5db16084e4b010eb3c36cd01"},{"problem":44,"code":"#(->> (concat %2 %2)\n    (drop (mod %1 (count %2)))\n    (take (count %2))\n    )","user":"5aed87a1e4b0cc2b61a3bc1a"},{"code":"(fn rotate [n coll]\n(let [part (split-at (mod n (count coll)) coll)]\n(concat (second part) (first part))))","problem":44,"user":"51ba59e4e4b0fe3ecfb4642d"},{"code":"(fn [rotateAmount collectionToRotate]\n  (if (> rotateAmount 0)\n    (loop [x rotateAmount y collectionToRotate]\n      (if (not= 0 x)\n        (recur\n          (dec x)\n          (conj (into [] (rest y)) (first y))\n        )\n        y\n      )\n    )\n    (loop [x rotateAmount y collectionToRotate]\n      (if (not= 0 x)\n        (recur\n          (inc x)\n          (cons (last y) (butlast y))\n        ) \n        y\n      )\n    )\n  )\n)","problem":44,"user":"51018807e4b0a79bcc8c0e0b"},{"code":"(fn [x col]\n  (let [n (mod x (count col))]\n    (concat (drop n col) (take n col))))","problem":44,"user":"5371167fe4b0fc7073fd6ea7"},{"code":"#(apply concat (into () (split-at (mod % (count %2)) %2)))","problem":44,"user":"537e4259e4b06839e8705e9e"},{"problem":44,"code":"(fn thing [n s] \n    (if (= n 0)\n        s\n        (if (< n 0)\n            (thing (+ n 1) (concat (take-last 1 s) (butlast s) ) )\n            (thing (- n 1) (concat (rest s)        [(first s)] ) ) ) ) )","user":"51b0e7b3e4b0c53cf2e68a6e"},{"problem":44,"code":"(fn rot [n xs](mapcat identity (replace (split-at (mod n (count xs)) xs) [1 0] ) ) )","user":"56b280e3e4b0982f16b37e06"},{"code":"(fn [w c] (drop (mod w (count c)) (take (+ (count c) (mod w (count c))) (cycle c))))","problem":44,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn rotate [n xs]\n  (let [r (mod n (count xs))]\n    (concat (drop r xs) (take r xs))))","problem":44,"user":"4fb710f4e4b081705acca2cd"},{"code":"(fn [n s]\n   (let [length (* 2 (count s))\n         start (loop [n n s s]\n                 (if (and (or (zero? n) (pos? n)) (< n (count s)))\n                   n\n                   (if (pos? n) (recur (- n (count s)) s)\n                       (recur (+ n (count s)) s))))\n         end (+ start (count s))]\n     (subvec (into [] (take length (cycle s))) start end)))","problem":44,"user":"4f066916535dcb61093f6c10"},{"code":"(fn [n c]\n  (if (< n 0)\n    (let [m (* n -1)] (nth (iterate #(cons (last %) (vec (butlast %))) c) m))\n    (nth (iterate #(conj (vec (rest %)) (first %)) c) n)))","problem":44,"user":"4f83665ee4b033992c121c1c"},{"problem":44,"code":"(fn rot [n l]\n    (concat (second (split-at (mod n (count l)) l)) (first (split-at (mod n (count l)) l))))","user":"55a35ef4e4b0acc240e31535"},{"code":"(fn [n coll]\n  (let [moves (mod n (count coll))]\n    (concat \n      (drop moves coll)\n      (take moves coll))))","problem":44,"user":"50097962e4b03d00572d2d6c"},{"problem":44,"code":"(fn rot [steps coll]\n  (let [len (count coll)]\n  \t(if (or (< steps 0) (>= steps len))\n      (rot (mod steps len) coll)\n      (concat (drop steps coll) (take steps coll)))))","user":"553dd883e4b0a04f792994e6"},{"problem":44,"code":"(fn rotate [rot sq]\n  (cond\n   (zero? rot) sq\n   (pos? rot)\n    (rotate (dec rot) (conj (vec (drop 1 sq)) (first (vec sq))))\n   :else (rotate (inc rot) (cons (peek (vec sq)) (pop (vec sq))))))","user":"54302691e4b0dad94371f2d7"},{"code":"#( let[s (mod % (count %2))] (concat (drop s %2) (take s %2)))","problem":44,"user":"538de891e4b0b51d73faae78"},{"problem":44,"code":"(fn rotate [n s]\n  (cond\n   (= n 0) s\n   (> n (count s)) (rotate (- n (count s)) s)\n   (< n (- (count s))) (rotate (+ n (count s)) s)\n   (> n 0) (concat (nthrest s n) (take n s))\n   (< n 0) (concat (take-last (- n) s) (drop-last (- n) s))\n   \n   ))","user":"4dd5fdb0535d2dad7130b5c5"},{"problem":44,"code":"(fn [n nlst] (flatten (conj (take (mod n (count nlst)) nlst) (nthrest nlst (mod n (count nlst))))))","user":"606d75f5e4b069485764de13"},{"code":"(fn [x xs] (take (count xs) (drop (if (neg? x) (+ (* 2 (count xs)) x) x) (cycle xs))))","problem":44,"user":"50fd4838e4b033b9c38d78ce"},{"problem":44,"code":"(fn f [n, s]\n  (cond\n   (= n 0) s\n   (< n 0) (f (inc n) (conj (butlast s) (last s)))\n   1 (f (dec n) (concat (rest s) (list (first s))))))","user":"5590e55de4b0277789237676"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n   (concat (drop n %2)(take n %2)))","user":"562326cbe4b03f08ee9a9230"},{"code":"#(take (count %2) \n  (drop (if (pos? %) % (+ (count %2) (rem % (count %2)))) (cycle %2)))","problem":44,"user":"4fad33e8e4b081705acca236"},{"code":"(fn\n  [n in]\n  (let [m (mod (if (< n 0) (+ (count in) n) n) (count in))]\n    (concat (drop m in) (take m in))))","problem":44,"user":"529936e7e4b02ebb4ef7507b"},{"code":"(fn shift [n s]\n  (let [us (mod (if (< n 0) (+ (count s) n) n) (count s))]\n    (concat (drop us s) (take us s))))","problem":44,"user":"4e7d1c22535db169f9c796c5"},{"problem":44,"code":"#(loop [rl %2 n (mod % (count rl)) sp nil]\n            (if (zero? n) (concat rl (reverse sp)) (recur (rest rl) (dec n) (cons (first rl) sp))) )","user":"5831846ae4b051871117c02c"},{"problem":44,"code":"(fn [n col] (let [s (count col) abs-n (if (> n 0) n (* -1 n))] (take s (drop (if (> n 0) n (+ s (rem n s))) (cycle col)))))","user":"5b100648e4b0cc2b61a3be17"},{"code":"#(let [n (count %2)] (take n (drop (mod % n) (cycle %2))))","problem":44,"user":"4fd96694e4b05e33b9224f37"},{"code":"#(let [a (count %2)\n       b (if (neg? %1)\n           (mod (- %1 a) a)\n           (mod %1 a))\n       [x y] (split-at b %2)]\n  (concat y x))","problem":44,"user":"4e615cd2535d8ccf87e9fe58"},{"problem":44,"code":"#(let [i (mod % (count %2))\n       [l r] (split-at i %2)] (concat r l))","user":"55337e61e4b09218d5f44f8e"},{"problem":44,"code":"#(loop [coll %2 cnt (max %1 (- %1)) rev (< %1 0)]\n   (if (= cnt 0)\n     coll\n     (let [coll-func (if rev list vector)\n           take-func (if rev take-last take)\n           drop-func (if rev drop-last drop)]\n       (recur\n        (apply conj (apply coll-func (drop-func 1 coll)) (take-func 1 coll))\n        (dec cnt)\n        rev))))\n\n\n;(fn rotate [n v]\n;  (->> (concat v v)\n;    (drop (mod n (count v)))\n;    (take (count v))\n;    )\n;  )","user":"58d2af83e4b03c36ff7e5907"},{"problem":44,"code":"(fn [n l]\n  (let [n (mod n (count l))]\n    (reduce conj (take n l) (reverse (drop n l)))))","user":"57d9f603e4b0bd073c20240a"},{"code":"#(let [c (count %2)] (take c (drop (mod (+ c %) c) (cycle %2))))","problem":44,"user":"53976599e4b0b51d73faaeea"},{"problem":44,"code":"#(-> (split-at (mod %1 (count %2)) %2)\n   reverse flatten)","user":"56ab80f1e4b03c432f18733e"},{"code":"#(drop (mod %1 (count %2)) \n       (take (+ (mod %1 (count %2)) (count %2)) (cycle %2) ) )","problem":44,"user":"528f4462e4b0239c8a67aef0"},{"problem":44,"code":"(fn [index values]\n  (loop [i index result []]\n    (if (= (count result) (count values))\n      result\n      (recur (inc i) (conj result (nth values (mod i (count values))))))))","user":"5463c824e4b01be26fd746c5"},{"problem":44,"code":"#(let [vsize (count %2)]\n   (take vsize (drop (mod %1 vsize) (cycle %2))))","user":"5f81de6ce4b0c071e6c840f5"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)\n        n (if (neg? n)\n            (+ c (mod n c))\n            (mod n c))]\n    (take c (drop n (cycle coll)))))","user":"534da51fe4b084c2834f4aa4"},{"problem":44,"code":"(fn [n coll]\n  (let [i (mod n (count coll))]\n    (concat (drop i coll) (take i coll))))","user":"596539dce4b069c0a1a19783"},{"problem":44,"code":"(fn [index xs]\n  (let [length (count xs)\n        target-index (-> (rem index length)\n                         (+ length)\n                         (rem length))]\n    (loop [origin-xs xs\n           target-xs []\n           n target-index]\n      (if (= 0 n)\n        (concat origin-xs target-xs)\n        (recur (rest origin-xs)\n               (conj target-xs\n                     (first origin-xs))\n               (dec n))))))","user":"58fed70de4b0438e51c2cfdd"},{"code":"(fn [cnt coll] (take (count coll) (nthrest (cycle coll) (if (pos? cnt) cnt (+ 1 (- (count coll) cnt))))))","problem":44,"user":"4e823f41535db62dc21a62c8"},{"code":"#(let [k (count %2)\r\n       n (mod (+ k %) k)]\r\n    (->> (split-at n %2) reverse (apply concat)))","problem":44,"user":"500159b3e4b0678c553fc419"},{"problem":44,"code":"(fn rotate [step coll]\n  (let [len (count coll)\n        ind (if (> 0 step)\n              (mod step len)\n              (+ len (mod step len)))]\n    (take len (drop ind (cycle  coll)))))","user":"53f2370ee4b0742d9025b0e7"},{"problem":44,"code":"(fn solution [n xs]\n  (let [n (mod n (count xs))]\n    (apply concat ((juxt drop take) n xs))))","user":"5b3ef412e4b02d533a91bc06"},{"code":"(fn [n s]\n  (let\n    [cnt (count s),\n     amnt (rem n cnt),\n     x (if (neg? amnt) (+ cnt amnt) amnt)]\n  (if\n    (= 0 amnt)\n    s\n    (concat (drop x s) (take x s)))))","problem":44,"user":"4f5c0549e4b0030a34fb2b1a"},{"problem":44,"code":"(fn [nth coll]\n\n  (let [size (count coll)\n        nth  (mod nth size)]\n\n    (take size (drop nth (cycle coll)))))","user":"562268dce4b03f08ee9a9224"},{"problem":44,"code":"(fn [r coll]\n  (let [mod-rot (mod r (count coll))]\n    (concat (drop mod-rot coll) (take mod-rot coll))))","user":"4ea8570f535d7eef308072f8"},{"problem":44,"code":"#(let [o (mod %1 (count %2))] (concat (drop o %2) (take o %2)))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":44,"code":"(fn [at s]\n  ((fn [[a b]] (concat b a))\n   (split-at\n    (mod (if (neg? at) (inc (- at)) at) (count s))\n    s)))","user":"57035ccfe4b08d47c97781ef"},{"code":"(fn[n s] \n  (loop [x 1, c s] \n    (if(<= x (+ (* 2 (alength (to-array c))) n)) \n      (recur (inc x) (concat (rest c) (list (first c)))) \n      c\n    )\n))","problem":44,"user":"4e6df3c9535d5021c1a895fa"},{"problem":44,"code":"(fn p44 [n l]\n  (let [len (count l)\n        m (mod n len)]\n    (cond\n      (> m 0) (let [[l- l+] (split-at m l)]\n                (concat l+ l-))\n      (< m 0) (let [[l- l+] (split-at (+ m len) l)]\n                (concat l+ l-))\n      :else l)))","user":"5f968f4ee4b0715f5002d7d2"},{"problem":44,"code":"(fn [n coll]\n  (let [shiftr (< n 0) \n        coll (seq (if shiftr coll (reverse coll)))]\n  (loop [coll coll n (if shiftr (* -1 n) n)]\n    (if (zero? n) \n       (if shiftr coll (reverse coll))\n       (recur \n         (cons (last coll) (butlast coll))\n         (dec n))))))","user":"5167e8ace4b0c5a4140a309a"},{"code":"(fn rot [ct coll]\n  (let [ct (mod ct (count coll))]\n    (concat (drop ct coll) (take ct coll))))","problem":44,"user":"50970f51e4b00ad8bab4e950"},{"problem":44,"code":"(fn ROTATE [rotation to-rotate]\n  (let [normalized-rotation (mod rotation (count to-rotate))]\n    (concat (drop normalized-rotation to-rotate) (take normalized-rotation to-rotate))))","user":"5f548678e4b0a0bc16850a7e"},{"problem":44,"code":"(fn [n coll]\n  (let [l (count coll)\n        m (mod n l)\n        [a b] (split-at m coll)]\n    (concat b a)))","user":"5d97b602e4b0d3f9b434ad3a"},{"problem":44,"code":"(fn [n se]\n (flatten (reverse (split-at (mod n (count se)) se))))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":44,"code":"(fn repeater [n coll]\n        (let [one (fn [x]\n                    \n                     (cons  (last x)  (pop (into [] x))))\n              one-1 (fn [x]\n                       (conj  (into [] (rest x)) (first x) ))\n              one-2 (if (pos? n)\n                      one-1\n                      one)\n              two (iterate one-2\n                            coll)\n              three (doall (take (inc (Math/abs n))\n                                 two))]\n           (seq (last three)))\n        )","user":"57227f10e4b0c5bde472c0cd"},{"code":"(fn [d xs] (take (count xs) (drop (+ (* (if (neg? d) (- d) d) (count xs)) d) (flatten (repeat xs)))))","problem":44,"user":"525493bbe4b0541d1855b991"},{"code":"(fn [n xs]\n  (let [len (count xs)\n        m (mod (+ n len) len)]\n    (concat (drop m xs) (take m xs))))","problem":44,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(fn [n s]\n  (let [idx (mod n (count s))]\n    (concat (drop idx s) (take idx s))))","problem":44,"user":"5060d137e4b0dc10a69545a0"},{"problem":44,"code":"(fn [n sequence]\n  (cond\n    (> n 0) (recur (dec n) (concat (rest sequence) (list (first sequence))))\n    (< n 0) (recur (inc n) (concat (list (last sequence)) (butlast sequence)))\n    :else sequence\n    )\n )","user":"5aefdc8de4b0cc2b61a3bc40"},{"problem":44,"code":"#(if (> %1 0)\n  (concat (drop (mod %1 (count %2)) %2) (take (mod %1 (count %2)) %2))\n  (concat (drop (mod (+ %1 (count %2)) (count %2)) %2) (take (mod (+ %1 (count %2)) (count %2)) %2))\n)","user":"5f419985e4b0955706451fab"},{"problem":44,"code":"(fn [n sequence]\n  (cond\n   (= n 0) sequence\n   (> n 0) (recur (- n 1) (concat (rest sequence) (seq (list (first sequence)))))\n   (< n 0) (recur (+ n 1) (concat (seq (list (last sequence))) (butlast sequence)))\n  )\n)","user":"5a5b9e3ce4b0512ff01cd90b"},{"code":"(fn rot-seq [n list] (cond\n(> n 0) (concat (drop (rem n (count list)) list) (take (rem n (count list)) list))\n(< n 0) (rot-seq (+ (count list) n) list)\n:else list))","problem":44,"user":"4e218464535d04ed9115e816"},{"code":"(fn f [x y] \n  (let [n (mod x (count y))]\n    (flatten (cons (drop n y) (take n y)))))","problem":44,"user":"52379c46e4b0fae3832e99db"},{"problem":44,"code":"(fn [r coll]\n  (let [n (mod r (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"53065acbe4b02e8216869792"},{"problem":44,"code":"(fn rot [n s]\n  (let [vs (vec s) m (count vs)]\n  \t(for [i (range m)] (vs (mod (+ i n) m)))))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"code":"(fn\n  [amount sequence]\n  (for [x (range (count sequence))]\n    (nth sequence (mod (+ x amount) (count sequence)))))","problem":44,"user":"52b4d8fae4b0c58976d9ad33"},{"code":"(fn [bias coll]\n  (if (< bias 0) (recur (+ (count coll) bias) coll)\n    (take (count coll) (nthnext (cycle coll) bias))))","problem":44,"user":"5071b614e4b0e3170b5a867d"},{"problem":44,"code":"#(let [cnt (count %2)\n       ltr (mod %1 cnt)]\n   (concat (drop ltr %2) (take ltr %2)))","user":"57d0e185e4b0bd073c202360"},{"problem":44,"code":"(fn [idx coll]\n (let [cnt (count coll)\n       i (mod idx cnt)]\n   (concat (drop i coll) (take i coll))))","user":"560bb1f7e4b05f002753df20"},{"problem":44,"code":"(fn [r col]\n   (let [r (mod r (count col))]\n     (drop r (flatten (cons col (take r col))))))","user":"55b0d315e4b002ce9d5cbc26"},{"code":"(fn rotateseq [x col]\n  (let [x (if (< x 0) (* (dec x) -1) x)]\n    (loop [col col\n           y 0]\n      (if (>= y x)\n        col\n        (recur\n          (concat (drop 1 col) (take 1 col))\n          (inc y))))))","problem":44,"user":"52dad8bde4b09f7907dd13be"},{"problem":44,"code":"(fn [nm arr] (let [gtr (split-at (mod nm (count arr)) arr)] (concat (peek gtr) (first gtr)) ))","user":"541377bee4b01498b1a719e2"},{"code":"(fn [n xs]\n  (let [m (mod n (count xs))]\n    (concat\n      (drop m xs)\n      (take m xs))))","problem":44,"user":"4f725201e4b07046d9f4f02f"},{"code":"(fn [n s] (apply concat (reverse (split-at (mod n (count s)) s))))","problem":44,"user":"4eb2e6ca535d7eef3080734f"},{"code":"(fn [n l] (let [x (mod n (count l))] (concat (drop x l) (take x l))))","problem":44,"user":"4f141dee535d64f603146434"},{"problem":44,"code":"#(let [k (mod % (count %2))]\n   (concat (drop k %2) (take k %2)))","user":"5472d919e4b094393f72dd7b"},{"problem":44,"code":"(fn rotate-seq\n  [n s]\n  (let [size (count s)\n        positive-n (if (< n 0)\n                     (+ size (mod n size))\n                     n)]\n    (take size (drop positive-n (cycle s)))))","user":"55996253e4b031d6649c9baa"},{"code":"(fn [n coll]\r\n(loop [i n\r\n       result coll]\r\n  (if (zero? i)\r\n    result\r\n    (if (> n 0)\r\n      (recur (dec i) (concat (rest result) (vector (first result))))\r\n      (recur (inc i) (concat (vector (last result)) (drop-last result) ))\r\n      ))))","problem":44,"user":"51a54fb4e4b0def3c5c586a3"},{"code":"(fn [p s]\n  (let [f #(concat %2 %1)\n        g #(apply f (split-at %1 %2))\n        c (count s)\n        n (mod (+ p c) c)]\n    (g n s)))","problem":44,"user":"53908e6be4b0b51d73faae9a"},{"code":"(fn [n xs]\n  (let [n (mod n (count xs))]\n    (flatten ((juxt drop take) n xs))))","problem":44,"user":"4f3a979de4b0e243712b1f10"},{"problem":44,"code":"(fn [rot sq]\n  (let [sq-sz (count sq)\n        rot-mod (mod rot sq-sz)]\n    (concat (drop rot-mod sq)\n            (take rot-mod sq))))","user":"559d33b3e4b0ec2b359424d9"},{"code":"(fn [x xs] \n  (let [c (count xs)] \n \t(take c (drop (rem (+ c (rem x c)) c) (concat xs xs)))))","problem":44,"user":"4e50ad74535dc968683fc4ec"},{"problem":44,"code":"(fn [n col]      (let [c (count col)\n        n-abs (Math/abs n)\n        numdrop (mod n-abs c)\n        negnumdrop (- c numdrop)]\n  (if (pos? n)\n    (concat (drop numdrop col) (take numdrop col))\n    (concat (drop negnumdrop col) (take negnumdrop col)))))","user":"5acd235ae4b0e27600da7824"},{"code":"(fn rotate-e\n  [n x]\n  (let [n (mod n (count x))\n        part (split-at n x)]\n    (concat (last part) (first part))))","problem":44,"user":"52084f75e4b01ce6bbf31dde"},{"problem":44,"code":"#(let [n (mod %1 (count %2))] (nth (iterate (fn [l] (let [r (rest l) f (first l)] (concat r [f]))) %2) n))","user":"56aed78fe4b03c432f187363"},{"code":"(fn [n coll]\n           (let [size (count coll)\n                 calc-index (fn [size n]\n                              (if (neg? n)\n                                (+ size n)\n                                n))\n                 index (calc-index size (mod n size))]\n             (concat (drop index coll) (take index coll))))","problem":44,"user":"527c166de4b03e8d9a4a75b3"},{"code":"(fn rotate [n lst]\n    (let [rot (fn [l c](loop [acc l cnt c]\n        (if (zero? cnt)\n            acc\n            (recur (reverse (conj (reverse (rest acc)) (first acc))) (dec cnt)))))]\n    (if (> n 0)\n        (rot lst n)\n        (reverse (rot (reverse lst) (* n -1)))))\n)","problem":44,"user":"52c17e42e4b07a9af5792367"},{"problem":44,"code":"(fn rotate-seq\n  [rot coll]\n  (cond\n   (= rot 0) coll\n   (< rot 0) (rotate-seq (inc rot) (conj (butlast coll) (last coll)))\n   (> rot 0) (rotate-seq (dec rot) (concat (rest coll) [(first coll)]))))","user":"572db6d5e4b0cd1946bd0f78"},{"code":"(fn rotate-hax [n coll] ;; LOL this function\n  (let [n (inc (- n))\n        r (if (pos? n) n (+ (count coll) (mod n (count coll))))]\n    (last (take r (iterate (fn single-rotate [coll]\n  (vec (conj (take (dec (count coll)) coll) (last coll)))) coll)))))","problem":44,"user":"5264301fe4b03e8d9a4a70ca"},{"problem":44,"code":"(fn rotate\n  [num coll]\n  (if (pos? num)\n    (take (count coll) (drop num (cycle coll)))\n    (take (count coll) (drop (mod num (count coll)) (cycle coll)))))","user":"5ec5f7f2e4b08d0ec38692d1"},{"code":"(fn [x coll]\n  (let [c (count coll)\n        x (if (pos? x) x (+ c x))\n        x (if (> x c) (rem x c) x)\n        x (if (neg? x) (+ c x) x)]\n    (flatten (conj (take x coll) (drop x coll)))))","problem":44,"user":"515e8ce2e4b049add99a053d"},{"problem":44,"code":"(fn [r y]\n    (last \n      (cond (= r 0) (list y)\n          (< r 0) ((fn [n x]\n                       (take (+ n 1)\n                             (iterate (fn [l] \n                                          (let [r (reverse l)]\n                                               (cons (first r) (reverse (rest r))))) x))) (- r) y)\n          :else ((fn [n x]\n                    (take (+ n 1)\n                          (iterate (fn [l]\n                                       (reverse (cons (first l) (reverse (rest l))))) x))) r y))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"#(let [n (rem % (count %2))]\n  (if (>= % 0)\n   (concat (drop n %2) (take n %2))\n   (concat (take-last (- n) %2) (drop-last (- n) %2))))","problem":44,"user":"51037468e4b00c483ae17702"},{"code":"(fn [n coll]\n  (let [c (count coll)\n        rotations (mod (+ n c) c)]\n  (loop [i 0 res coll]\n    (if (= i rotations)\n      res\n      (recur (inc i) (conj (vec (rest res)) (first res)))))\n))","problem":44,"user":"4eb1dd39535d7eef30807345"},{"code":"(fn myrotate  [shft acoll]\n  (let [lshft (mod shft (count acoll) )]\n    (if (zero? lshft) acoll\n      (recur (dec lshft) (concat (rest acoll) (list (first acoll)))\n             )\n  ))\n)","problem":44,"user":"513e9aa0e4b02b2a3d8235c4"},{"code":"(fn [c a]\n\n(let [i (rem c (count a))\n\tx (if(> 0 i) (+ (count a) i) i) \n\t]\n\t(concat (drop x a) (take x a))\n)\n)","problem":44,"user":"50b25f2ce4b03ea88043355f"},{"problem":44,"code":"(fn [n l]\n   (let [reversed? (< n 0)\n         list (if reversed?\n                (reverse l)\n                l)]\n     (loop [i (max n (inc (- n)))\n            list l]\n       (if (= i 0)\n         list\n         (recur (dec i) (conj (into [] (rest list)) (first list)))))\n   \n   ))","user":"54bbba99e4b0ed20f4ff6ec2"},{"code":"(fn [n coll]\n  (take (count coll) (drop (mod n (count coll)) (cycle coll))))","problem":44,"user":"5032b066e4b00c0952a257ea"},{"code":"(fn [ j s ] \n  (let [\n      c (count s)\n      k ( #( if (and (< % c) (> % 0)) % (recur (+ % (if (neg? %) c (- c) ) ) ) ) j)\n    ]  (take-last c (take (+ c k) ( cycle s ))) ))","problem":44,"user":"4fc43a8ee4b081705acca346"},{"problem":44,"code":"(fn rotate-seq\n  [rotate-by sq]\n  (let [n (count sq)\n        m (mod rotate-by n)]\n    (concat (drop m sq) (take m sq))))","user":"5da94ccfe4b000c986472c2f"},{"problem":44,"code":"(fn [n xs]\n  (let [len (count xs) m (+ len (rem n len))]\n    (take len (drop (+ len m) (cycle xs)))))","user":"56fa3f7ae4b07572ad1a88bf"},{"problem":44,"code":"(fn [i sq]\n    (let [sl #(conj (vec (rest %)) (first %))\n          nth (fn [i sq] (nth (if (neg? i) (reverse sq) sq) (if (neg? i) (- (mod (- i) (count sq)) 1) (mod i (count sq)))))]\n      (loop [ns sq]\n        (if (= (first ns) (nth i sq))\n          ns\n          (recur (sl ns))\n          )\n        )\n      )\n  )","user":"5e15b245e4b0a047bd49f706"},{"problem":44,"code":"#(let [shift (mod %1 (count %2))]\n   (concat (drop shift %2) \n           (take shift %2)))","user":"57c0393be4b05aa3c4741c90"},{"problem":44,"code":"(fn myfunc [a vec] \n  \n  \n  \n  (take (count vec) (drop (mod a (count vec)) (cycle vec)))\n\n)","user":"53f12b77e4b0742d9025b0da"},{"problem":44,"code":"(fn [n coll]\n  (take \n   (count coll) \n   (drop \n    (mod n (count coll)) \n    (cycle coll))))","user":"54a70af9e4b09f271ff37c93"},{"code":"(fn [n c]\r\n    (let [f (mod n (count c))]\r\n      (concat (drop f c) (take f c))))","problem":44,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"#(let [n (mod % (count %2))]\n    (concat (drop n %2) (take n %2)))","problem":44,"user":"506ef8c3e4b09350ab4199f4"},{"problem":44,"code":"(fn [n coll]\n   (loop [coll coll\n          n n]\n     (cond (zero? n) coll\n           (> n 0) (recur (conj (vec (rest coll)) (first coll)) (dec n))\n           (< n 0) (recur (conj (drop-last coll) (last coll)) (inc n)))\n     )\n   )","user":"5687fe58e4b0dcc4269f4065"},{"code":"(fn my-rotate [cnt coll]\n        (let [c (mod cnt (count coll))]\n          (concat (drop c coll) (take c coll))))","problem":44,"user":"4fb591aee4b081705acca2c0"},{"code":"(fn f [n seq] (cond (< n 0) (f (+ n (count seq)) seq)\n                    (= n 0) seq\n                    (> n (count seq)) (f (- n (count seq)) seq)\n                    :else (f (dec n)\n                             (concat (rest seq)\n                                     (list (first seq))))))","problem":44,"user":"4ec1b090535dfed6da9c6db5"},{"problem":44,"code":"(fn [x lst]\n  (let [cnt (count lst)]\n    (map #(nth lst (mod (+ x %) cnt)) (range cnt))))","user":"5761513fe4b0994c1922fb87"},{"code":"#(let [[a b] (split-at (mod (if (>= %1 0) %1 (+ (count %2) %1)) (count %2)) %2)] (concat b a))","problem":44,"user":"4e5f08c7535d8a8b8723a2da"},{"problem":44,"code":"(fn [x coll] \n\t ;\n\t(take-last \n\t\t(count coll) \n\t\t(flatten \n\t\t\t(cons coll \n\t\t\t\t(take \n\t\t\t\t\t(mod \n\t\t\t\t\t\t(+ x (count coll)) \n\t\t\t\t\t\t(count coll)) \n\t\t\t\t\tcoll))))\n\t)","user":"5ac04101e4b073f177442737"},{"problem":44,"code":"(fn [n xs]\n  (flatten\n  \t(reverse\n      (split-at (mod n (count xs)) xs)\n     )\n   )\n)","user":"5aac468ae4b073f17744256b"},{"problem":44,"code":"(fn rot\r\n  [n s]\r\n  (if (= n 0)\r\n    s\r\n    (if (< n 0)\r\n      (rot (inc n) (conj (butlast s) (last s)))\r\n      (rot (- n (count s)) s))))","user":"5470699ae4b00cfc9eacc1b6"},{"code":"(fn [offset coll]\n  (let [offset (mod offset (count coll))]\n    (concat (drop offset coll) (take offset coll))))","problem":44,"user":"520fff3ce4b080a8d9b9d633"},{"code":"#(loop [n %\r\n        l %2]\r\n     (cond \r\n       (> n 0) (recur (dec n) (concat (rest l) (list (first l))))\r\n       (< n 0) (recur (inc n) (concat (list (last l)) (butlast  l)))\r\n       :default l))","problem":44,"user":"4f3e6244e4b0e243712b1f85"},{"code":"(fn [n coll]\n  (let [cnt (count coll)]\n    (take cnt (drop (mod n cnt) (cycle coll)))))","problem":44,"user":"4db87deb535d1e037afb2197"},{"problem":44,"code":"(fn [n coll]\n  (#(take % (drop (mod n %) (cycle coll)))\n  (count coll))\n  )","user":"5727031ee4b0c5bde472c12f"},{"problem":44,"code":"; works\n; (fn [n xs] (apply #(concat %2 %1) (split-at (mod n (count xs)) xs))))\n; syeerzy\n#(let [rot (mod %1 (count %2))]\n    (concat (drop rot %2) (take rot %2)))","user":"5a544eeee4b05d388ecb6c24"},{"code":"(fn [d coll]\n  (let [f (if (neg? d)\n            reverse\n            identity)\n        pd (max d (- d) )]\n    (->> (cycle (f coll))\n         (drop pd)\n         (take (count coll))\n         f)))","problem":44,"user":"5360f043e4b0243289761e3c"},{"problem":44,"code":"(fn rotate-sequence [n xs]\n  (let [num (count xs)\n        o (rem n num)\n        m (if (neg? o)\n            (+ num o)\n            o)\n        [begin end] [(take m xs) (drop m xs)]]\n    (into begin (reverse end))))","user":"561d8936e4b064ca9f4b16b2"},{"problem":44,"code":"#(last (take (inc (mod % (count %2))) (iterate (fn [seq] (concat (rest seq) (list (first seq)))) %2)))","user":"53350264e4b0656e627bfd73"},{"problem":44,"code":"(fn rotate [d col]\n  (if (< d 0)\n    (if (> (Math/abs d) (count col))\n      (let [k (- (count col) (rem (Math/abs d) (count col)))]\n        (concat (nthrest col k) (take k col)))\n      (let [k (- (count col) (Math/abs d))]\n        (concat (nthrest col k) (take k col))))\n    (if (> d (count col))\n      (let [k (rem (Math/abs d) (count col))]\n        (concat (nthrest col k) (take k col)))\n      (concat (nthrest col d) (take d col)))))","user":"569aca1ee4b0542e1f8d144d"},{"problem":44,"code":"(fn [n xs] (map #(nth xs (mod (+ % n) (count xs))) (range (count xs))))","user":"5fe0d4d4e4b05ac5b16ea164"},{"code":"(fn [n s]\r\n  (loop [c (cycle s)\r\n      i n\r\n      l (count s)]\r\n      (if (= (mod i l) 0)\r\n        (take l c)\r\n        (recur (rest c) (dec i) l))))","problem":44,"user":"504e14c2e4b078edc5f593bf"},{"problem":44,"code":"(fn rot [n sq]\n  (->> sq\n     (map #(vector\n       (mod (- %1 n) (count sq))\n       %2) (range))\n     (sort #(< (first %1) \n               (first %2)))\n     (map second)))","user":"574e7be7e4b02ea114799242"},{"problem":44,"code":"(fn [n coll] (-> (split-at (mod n (count coll)) coll) reverse flatten))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":44,"code":"(fn [n xs]\n  (let [len (count xs)\n        modn (mod n len)\n        step (if (< modn 0)\n                (+ len modn)\n                modn)]\n    (take len\n          (drop step\n                (cycle xs)))))","user":"547ad587e4b0c51c1f4d72ce"},{"code":"(fn rotate [amt seq]\n  \"rotates a sequence in either direction\"\n  (let [mod-amt (mod amt (count seq))\n        mod-amt-rev (- (count seq) mod-amt)]\n    (concat (take-last mod-amt-rev seq) (take mod-amt seq))\n    ))","problem":44,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":44,"code":"(fn [rnd xs]\n  (let [sz (.size (seq xs))\n        rtr (let [my-rem (rem rnd sz)]\n              (if (> my-rem 0)\n                my-rem\n                (+ my-rem sz)))]\n    (into (vec (drop rtr xs)) (take rtr xs))))","user":"540d7dd1e4b0addc1aec6713"},{"problem":44,"code":"#(let [c (count %2)\n       s (rem %1 c)\n       s (if (pos? s) s (+ c s))]\n   (apply concat (reverse (split-at s %2))))","user":"5e41b679e4b01d43a70e8e58"},{"problem":44,"code":"(fn [a b] (drop (mod a (count b)) (take (+ (mod a (count b)) (count b) ) (cycle b))))","user":"5ed4482be4b016b56eae05ca"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)\n        d (quot n c)\n        m (+ 1 (max d (- d)))\n        d2 (+ n (* c m))]\n    (take c (drop d2 (cycle coll)))))","user":"56f4cedce4b046a417f92063"},{"problem":44,"code":"(fn rotate [n meow]\n  (let [n (mod n (count meow))]\n    (concat (drop n meow) (take n meow))))","user":"57607706e4b08062f99a4e97"},{"code":"#(let [l (count %2)] (take l (drop (mod %1 l) (cycle %2))))","problem":44,"user":"4eb30868535d7eef30807355"},{"problem":44,"code":"(fn rotate [i coll] (let [ii (mod i (count coll))] (concat (drop ii coll) (take ii coll))))","user":"5d4f21f3e4b0776584bd6f4e"},{"code":"#(let [f (if (pos? %1) dec inc)]\n   (loop [i %1\n          res %2]\n     (cond\n      (zero? i) res\n      (pos? i) (recur (f i) `(~@(rest res) ~(first res)))\n      :else (recur (f i) `(~(last res) ~@(butlast res))))))","problem":44,"user":"4dc21233535d020aff1edf92"},{"problem":44,"code":"(fn\n  [n coll]\n  (let [nn (mod n (count coll))]\n    (concat (drop nn coll) (take nn coll))))","user":"60b1add0e4b0e0fa5f1b4227"},{"problem":44,"code":"(fn rotate-seq [r s]\n  (let [n (count s)\n        r (Math/abs (if (< r 0) (+ n (+ r n)) r))]\n    (take n (drop r (flatten (repeat s))))))","user":"59699da7e4b069c0a1a197eb"},{"code":"(fn [n coll]\n  (let [m (if (pos? n) n (inc (- n)))]\n    (take (count coll) (drop m (cycle coll)))))","problem":44,"user":"4dc0ff08535d020aff1edf84"},{"problem":44,"code":"(fn [n coll] \n  (flatten (cons (drop (mod n (count coll)) coll) (take (mod n (count coll)) coll))))","user":"5a07fefee4b01bb0ae8afde5"},{"code":"(fn [n c] (take \n  (count c) \n  (drop \n    (mod n (count c)) \n    (apply concat (repeat c)))))","problem":44,"user":"500aa15ee4b03d00572d2d76"},{"problem":44,"code":"(fn [n xs]\n  (let [c (count xs)\n        q (if (pos? n) 1 (dec c))]\n    (loop [ys xs\n           w (Math/abs n)]\n      (if (pos? w)\n        (recur\n         (let [[gs hs] \n               (split-at q ys)]\n           (concat hs gs))\n         (dec w))\n        ys))))","user":"55d87324e4b0e31453f64ab4"},{"code":"(fn rotate [a x] (let [l (count x) s (cycle x) r (rem a l)] (take l (if (< a 0) (drop (+ l r) s) (drop a s) ))))","problem":44,"user":"4f03bf5e535dcb61093f6b5d"},{"problem":44,"code":"(fn rotate-left\n  [n lst]\n  (if (empty? lst)\n    ()\n    (let [sizeLst (count lst)\n          move (mod n sizeLst)\n          second-part (take move lst)\n          first-part (drop move lst)]\n      (concat first-part second-part))))","user":"59e8fef3e4b0249b72820743"},{"problem":44,"code":"(fn rot [n s]\n  (cond\n     (neg? n) (rot (inc n) (cons (last s) (drop-last s)))\n     (zero? n) s\n     (pos? n) (rot (dec n) (concat (rest s) (vector (first s))))\n))","user":"5b772ad7e4b047b03b2036e8"},{"code":"(fn [shift lst] (#(concat (drop % lst) (take % lst)) (mod shift (count lst))))","problem":44,"user":"508b95a0e4b0be79e5b189c6"},{"problem":44,"code":"(fn [n s]\n  ((fn [l] (concat (l 1) (l 0))) (split-at (mod n (count s)) s)))","user":"5fc9d967e4b0689391cc77ce"},{"problem":44,"code":"(fn [x y] (let [posMod (mod x (count y))\n                negMod (mod (* -1 x) (count y))]\n            (if (neg? x)\n            (flatten (conj (take (- (count y) negMod) y) (drop (- (count y) negMod) y)))\n            (flatten (conj (vector (drop posMod y)) (take posMod y))))))\n\n;POSITIVE SCENARIO\n; numberToMove - (mod x (count y)) #2\n; (seq (conj (vector (drop numberToMove y)) (take numberToMove y)))\n\n; NEGATIVE SCENARIO\n; numberToMove - (mod (* -1 x) (count y))\n; (seq (conj (take (- (count y) numberToMove) y) (drop (- (count y) numberToMove) y)))","user":"567e6d24e4b0feffd0d18eb4"},{"code":"(fn slide [n l]\n  (let [shiftl #(concat (rest %) [(first %)])\n        shiftr (comp reverse shiftl reverse)] \n  (cond\n    (< n 0) (slide (inc n) (shiftr l))\n    (> n 0) (slide (dec n) (shiftl l))\n    :else l)))","problem":44,"user":"4e8a880b535d65386fec210d"},{"problem":44,"code":"(fn [x & xs] \n  (let[index (mod x (count (first xs)))\n       splitted (split-at index (first xs))]\n    \t  (flatten (conj (first splitted) (rest splitted)))))","user":"560331dee4b04bb52996e1b5"},{"problem":44,"code":"(fn [index l]\n  (let [position (mod index (count l))\n        tmp (partition-all position l)\n        top (first tmp)\n        tail (flatten (next tmp))]\n    (concat tail top)))","user":"539043e7e4b0b51d73faae97"},{"code":"(fn rotate [n s]\n  (let [c (count s)\n        num (+ (mod n c) c)]\n    (take c (drop num (cycle s)))))","problem":44,"user":"50c2fbebe4b00e537d00253c"},{"problem":44,"code":"#(take (count %2) (concat (nthrest %2 (mod %1 (count %2))) %2))","user":"5581747fe4b05c286339e0fa"},{"problem":44,"code":";(fn [offset coll] (map #(nth coll %1) (let[len (count coll)] (map #(mod (+ offset %1) len) (range 0 len)))))\n;#(for [len [(count %2)] index (range len)] (nth %2 (mod (+ %1 index) len)))\n;have to put count in [] because have to force into a seq so that 'for' will work\n\n#(let [c (count %2)] (take c (drop (mod % c) (cycle %2))))\n;cycle is also a cool method","user":"54ce541de4b057c6fda3a2ac"},{"code":"(fn fn44 [n s]\n  (if (= n 0) s\n      (recur (dec (mod n (count s))) (conj (vec (next s)) (first s)))))","problem":44,"user":"5125d963e4b05d10e3e395fe"},{"problem":44,"code":"#(apply concat (reverse \n                  (split-at (mod % (count %2))\n                            %2)))","user":"57d93437e4b0bd073c2023f9"},{"problem":44,"code":"(fn [n l]\n     (last\n      (take (inc (Math/abs n))\n            (iterate\n             #(if (< n 0)\n                (conj (butlast %) (last %))\n                (concat (drop 1 %) (list (first %))))\n             l))))","user":"5d5ef0bce4b0c9e5857d4ffb"},{"problem":44,"code":"(fn [y x]\n    (let [z (if (> (Math/abs y) (count x)) (/ (* (Math/abs y)(- (Math/abs y) (count x))) y) y)\n          t (if (pos? z) (take z x) (take-last (Math/abs z) x))]\n      (flatten \n       (if (pos? z) \n         (cons (drop (Math/abs z) x) t) \n         (conj (drop-last (Math/abs z) x) t)))))","user":"60b3b375e4b0e0fa5f1b4232"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [len (count coll)\n        start (cond\n               (neg? n) (inc (- len n))\n               (> n len) (mod n len)\n               :else n)]\n    (take len (drop start (cycle coll)))))","user":"5c2f0cdfe4b0d62ef62d9f09"},{"problem":44,"code":"(fn [n coll]\n  (let [length (count coll)\n        m (if (neg? n) (mod n length) n)]\n    (take length (drop m (cycle coll)))))","user":"56e9db9be4b04a395b9a03ff"},{"code":"#(apply concat \n        (reverse\n         (split-at \n          (let [size (count %2)\n                pos (mod (Math/abs %1) size)]\n            (if (neg? %1)\n              (- size pos)\n              pos))\n          %2)))","problem":44,"user":"534f1c94e4b084c2834f4ac5"},{"code":"#(let [ rot \n        (mod (+ %1 (count %2))(count %2))]\n     (concat (drop rot %2)(take rot %2))\n)","problem":44,"user":"4f8ea1f7e4b0d4e659cdde69"},{"code":"(fn [r xs] (let [c (count xs) rm (mod r c) vs (vec xs) a (subvec vs 0 rm) b (subvec vs rm c)] (concat b a) ))","problem":44,"user":"533b9cace4b0e30313ee6cd1"},{"problem":44,"code":"#(let [[x y] (split-at (mod %1 (count %2)) %2)]\n  (concat y x))","user":"5d1231dde4b02c15ef021995"},{"code":"(fn [steps in-seq]\n  (loop [xs in-seq\n         st steps]\n    (cond\n     (zero? st) xs\n     (pos? st) (recur (concat (rest xs) [(first xs)]) (dec st))\n     :else (recur (concat [(last xs)] (drop-last xs)) (inc st)))))","problem":44,"user":"4fe9ea87e4b0547ebccb2476"},{"code":"(fn [n col] (let [size (count col)\n                  nmod (rem n size)\n                  shift (if (< n 0) (+ size nmod) nmod)]\n              (concat (drop shift col) (take shift col))))","problem":44,"user":"531f1e63e4b08068f379edc2"},{"code":"(fn [n coll] \n    (let [n (mod (if (< n 0)\n                   (+ (count coll) n)\n                   n) (count coll))]\n      (concat (drop n coll) (take n coll))))","problem":44,"user":"4e5a460f535d8a8b8723a2ab"},{"problem":44,"code":"#(concat (drop\n            (mod %1 (count %2))\n            %2) \n  \t\t (take \n            (mod %1 (count %2)) \n            %2))","user":"5cf62f9be4b087f62be35aa8"},{"code":"(fn [n s]\n  (let [len (count s)\n        fh (mod n len)]\n    (concat (take-last (- len fh) s)\n            (take fh s))))","problem":44,"user":"4e498df9535dc968683fc4c4"},{"problem":44,"code":"(fn [n c]\n    (let [v   (into [] c)\n          len (count v)\n          nr  (mod n len)]\n      (concat (drop nr v) (take nr v))))","user":"559a9a3de4b066d22e731f45"},{"code":"(fn [rotations lst] (let [rots (mod rotations (count lst))] ( concat (drop rots lst) (take rots lst))))","problem":44,"user":"503c02e5e4b0fc0f99c2e54e"},{"problem":44,"code":"(fn rot [n S]\n\t(loop [i (mod n (count S)), [x1 & xrest :as X] S]\n\t\t(if (> i 0)\n\t\t\t(recur (dec i) (concat xrest [x1]))\n\t\t\tX)))","user":"564d02cde4b0284900eef679"},{"problem":44,"code":"(fn [n xs]\n  (let [x (mod n (count xs))]\n    (concat (drop x xs) (take x xs))))","user":"53528cd3e4b084c2834f4af2"},{"problem":44,"code":"#(letfn [\n  (rot [arr x] \n    (cond\n      (> x 0) (rot arr (- x (count arr)))\n      (= x 0) arr \n      :else \n     (let \n      [arr2 (rot arr (inc x))] \n        (cons\n          (last arr2)\n          (butlast arr2)\n          \n         )\n       )\n     )\n   )] \n     (rot %2 %1))","user":"5ddcf10ae4b0948ae9d9adbe"},{"problem":44,"code":"(fn [i s] (flatten (conj (take (mod (+ i (count s)) (count s)) s) (drop (mod (+ i (count s)) (count s)) s))))","user":"5441f5e8e4b032a45b869375"},{"code":"(fn test44\n  [n coll]\n  (let [[l r] (split-at (mod n (count coll)) coll)]\n    (concat r l)))","problem":44,"user":"50b0cffae4b009df37c708c5"},{"problem":44,"code":"#(let [s (mod % (count %2))]\n   (concat (drop s %2) (take s %2)))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":44,"code":"(fn [npp coll]\n  (let [n (mod npp (count coll))]\n    (nth (iterate #(concat (rest %) [(first %)]) coll) n)))","user":"513facf5e4b00f13ea1bd892"},{"code":"(fn [n coll]\r\n  (let [c (count coll)\r\n        n (mod n c)]\r\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"4e02bee8535d04ed9115e791"},{"problem":44,"code":"(fn [n a-seq]\n    (let [l      (count a-seq)\n          n'     (mod n l)\n          part-1 (take n' a-seq)\n          part-2 (drop n' a-seq)]\n      (concat part-2 part-1)))","user":"53716539e4b0fc7073fd6eb1"},{"problem":44,"code":"#(let [c (count %2)\n       n (if (neg? %1) (mod (* -1 %1) c) (mod %1 c))]\n  (if (neg? %1)\n   (concat (take-last n %2) (take (- c n) %2))\n   (concat (take-last (- c n) %2) (take n %2))))","user":"5871175de4b01531a375e9f7"},{"problem":44,"code":"(fn rot [num y]\n        (let [count (count y)] \n              (take count \n                    (drop (if (neg? num) (+ count (rem num count)) num) (cycle y)))))","user":"5361d423e4b0243289761e49"},{"problem":44,"code":"#(let [c %1 s %2]\n  (loop [count (if (< c 0) c (if (> c (count s)) (- (- c (count s)) (count s)) (- c (count s)))) a (if (= (type s) (type [])) (seq s) s)]\n    \n    (if (zero? count) \n      a\n      (recur (inc count) (butlast (conj a (last a))))\n      )\n    )\n  )","user":"5763818ae4b0994c1922fbc7"},{"problem":44,"code":"(fn [rotate coll]\n  (let [to-take (count coll)\n        to-drop (if (pos? rotate)\n                  rotate\n                  (+ to-take (- rotate) 1))]\n        (take to-take (drop to-drop (flatten (repeat coll))))))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":44,"code":"(fn [ val seq]\n      (let[md (mod val\n                   (count seq))]\n      (concat (drop md seq) (take md seq))))","user":"59afe4bae4b0e1f4e384c8c0"},{"problem":44,"code":"(fn\n  [n l]\n  (let [[fst snd] (split-at (mod n (count l)) l)]\n    (concat snd fst)))","user":"5c0466a3e4b0bdcf453d1680"},{"code":"(fn [num col]\n  (let [v (mod num (count col))]\n    (concat (drop v col) (take v col))))","problem":44,"user":"4fd7962ee4b0dab7d829f385"},{"code":"(fn [x y]\n  (let [t (mod x (count y))]\n(concat (drop t y) (take t y))))","problem":44,"user":"5012614ee4b02a085b99dc79"},{"code":"(fn [n_ coll]\n\t(let \n\t\t[ cyc (cycle coll)\n\t\t\tcnt (count coll)\n\t\t\tn (rem (+ (rem n_ cnt) cnt) cnt)]\n\t\t(println n)\n\t\t(concat (take (- cnt n) (drop n cyc)) (take n cyc))))","problem":44,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn [n coll]\n  (let [rot (mod n (count coll))\n        [f g r]\n        \t(if (pos? rot) [drop take rot] [take-last drop-last (- rot)])]\n    (concat (f r coll) (g r coll))))","problem":44,"user":"512a8ef7e4b0ff5c4bc1f99e"},{"code":"(fn rot [n x]\n  (if (= n 0)\n    (seq x)\n    (if (< n 0)\n      (rot (+ (count x) n) x)\n      (rot (- n 1) (conj (vec (rest x)) (first x))))))","problem":44,"user":"5110b8bae4b04c71fce993f4"},{"problem":44,"code":"(fn rotate-seq [n lyst]\n  (let [m (mod n (count lyst))\n        [l1 l2] (split-at m lyst)]\n    (concat l2 l1)))","user":"53e27bf1e4b036ad0777e3f2"},{"code":"(fn [x l] (let [c concat r range] (reduce \n  (fn [k i]\n    (if (< x 0) \n      (c [(last k)] (drop-last k))\n      (c (rest k) [(first k)])\n    )) l (if (< x 0) (r x 0) (r 0 x)))\n))","problem":44,"user":"4f1595da535d64f603146444"},{"code":"(fn rotate [n xs]\n  (let [new_n (mod (if (pos? n) n (+ (count xs) n)) (count xs))]\n  \t(concat (drop new_n xs) (take new_n xs))))","problem":44,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":44,"code":"(fn [c v]\n  (->> (concat v v)\n       (drop (mod c (count v)))\n       (take (count v))))","user":"58a35b1ee4b02bd94d917ef3"},{"problem":44,"code":"(fn [n c]\n  (let [i (mod n (count c))]\n    (concat (drop i c) (take i c))))","user":"53e3f7a8e4b036ad0777e408"},{"problem":44,"code":"(fn [n xs]\n      (take (count xs)\n            (drop (mod n (count xs))\n                  (cycle xs))))","user":"5515f96ce4b055c2f668d4f7"},{"code":"(fn [n l]\n  (let [offset (mod n (count l))]\n  (drop offset\n    (take (+ (count l) offset)\n      (cycle l)))))","problem":44,"user":"4daf4d2fedd6309eace4d178"},{"problem":44,"code":"(fn [n xs]\n         (let [k (count xs)]\n           (map #(nth xs (mod (+ % n) k)) (range k))))","user":"5782018de4b0d36ec5835e8e"},{"problem":44,"code":";(fn [i, seq]\n;  (flatten (conj (take (mod i (count seq)) seq) (take-last (- (count seq) (mod i (count seq))) seq))))\n\n(fn [i, seq]\n  (flatten (reverse (split-at (mod i (count seq)) seq))))\n\n;(fn [i, seq]\n;  (-> (split-at (mod i (count seq)) seq) (flatten)(reverse)))","user":"583ff3afe4b089d5ab817dda"},{"problem":44,"code":"(fn [n s]\n  (let [rot (rem n (count s))]\n    (loop [n rot res s]\n    \t(cond\n          (> n 0) (recur (dec n) (conj (vec (rest res)) (first res)))\n          (< n 0) (recur (inc n) (cons (last res) (drop-last res)))\n          :else res))))","user":"56483f45e4b0284900eef62b"},{"problem":44,"code":"(fn [ix s]\n  (let [n (count s)\n        d (mod ix n)]\n    (take n (drop d (cycle s)))))","user":"59be62d5e4b0a024fb6ae435"},{"problem":44,"code":"(fn [x y]\n  \t(let [rot (mod x (count y))]\n    (concat (drop rot y) (take rot y)))\n  )","user":"5e9e8648e4b00a66d4a95178"},{"problem":44,"code":"(fn [n c]\n  (let [r (mod n (count c))]\n    (concat (drop r c) (take r c))))","user":"50385746e4b0803468ea2c6d"},{"code":"(fn[n xs](let[c(count xs)d(+ (+ c c) n)](take c(drop d(cycle xs)))))","problem":44,"user":"5032b398e4b00c0952a257eb"},{"problem":44,"code":"(fn rotate [n l]\n  (cond\n   (= n 0) l\n   (< n 0) (let [p (- n)]\n             (reverse (rotate p (reverse l)))\n           )\n   (> n 0) (let [remainder (vec (rest l))\t; (rest l) produces a list, so we convert it to a vec\n                 newlist (conj remainder (first l))]\n             (recur (dec n) newlist)\n           )\n   )\n  )","user":"54c82b27e4b045293a27f645"},{"code":"(fn rotate [n, seq]\n  ( let [index ( mod  n ( count seq   ) ) ]\n    (apply concat (reverse (split-at index seq) ) ) ) )","problem":44,"user":"5026916fe4b0c969f0b056e1"},{"problem":44,"code":"(fn [a b]\n  (loop [a a\n         b b\n         c (count b)]\n    (if\n     (< a 0) (recur (+ a c) b c)\n     (if\n      (>= a c) (recur (- a c) b c)\n      (take c (drop a (concat b b)))))))","user":"5ac9c737e4b0e27600da77d2"},{"problem":44,"code":"(fn test [n li]\n  (letfn [(rotatef [v]\n                   (conj (vec (rest v)) (first (vec v))))\n          (rotateb [v]\n                   (vec (cons (last v) (butlast v))))]\n    (if (pos? n)\n      (nth (iterate rotatef li) n)\n      (nth (iterate rotateb li) (* -1 n)))))","user":"5ec0db8be4b00a66d4a9528d"},{"problem":44,"code":"(fn [n l]\n   (let [modded (mod n (count l))]\n     (concat (drop modded l) (take modded l))\n     ))","user":"56c8cff8e4b0ed865f9758d7"},{"code":"(fn this [steps s] \n  (if (= steps 0)\n      s\n      (if (> steps 0)\n        (this (dec steps) (concat (rest s) (list (first s))))\n        (reverse (this (- 0 steps) (reverse s))))))","problem":44,"user":"505b9084e4b032b709c81371"},{"code":"#(let [idx (mod % (count %2))\n       [a b] (split-at idx %2)]\n  (concat b a))","problem":44,"user":"4ecf42b4535d1f5ad70dba3c"},{"problem":44,"code":"(fn [n coll] \n  (let [s (count coll)\n        i (rem n s)\n        m (if (< i 0) (+ s i) i)]\n  (concat (drop m coll) (take m coll))\n))","user":"55f2c898e4b06e875b46ce4b"},{"problem":44,"code":"#(concat (second (split-at (mod %1 (count %2)) %2))\n         (first (split-at (mod %1 (count %2)) %2)) )","user":"5cbd5b42e4b026601754b9f6"},{"problem":44,"code":"(fn [i coll] \n  (let [n (mod i (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"56c4f43ce4b05cc29241ee9c"},{"code":"#(let [l (count %2)] (->> %2 cycle (drop (mod % l)) (take l)))","problem":44,"user":"5046ee3ee4b03b02161376b4"},{"code":"(fn [n c]\n  (take (count c)\n        (drop (mod n (count c))\n              (concat c c))))","problem":44,"user":"4ef57a7f535dced4c769f246"},{"problem":44,"code":"(fn [rot coll]\n  (let [len (count coll)\n        take-num (mod (+ rot len) len)\n        [pre-coll last-coll] (split-at take-num coll)]\n    (apply conj (vec last-coll) pre-coll)))","user":"589cb617e4b00487982d536a"},{"problem":44,"code":"(fn [n sx] (#(concat (last %) (first %)) (split-at (mod n (count sx)) sx)))","user":"596f6683e4b069c0a1a19877"},{"code":"(fn [n s]\n  (let [[l r] (split-at (mod n (count s)) s)]\n    (concat r l)))","problem":44,"user":"50d8f4b6e4b01f0871336e74"},{"code":"(fn [n l]\n  (let [m (mod n (count l))]\n\n(concat (drop m l) (take m l))))","problem":44,"user":"4ed2b168535d44c135fd68dd"},{"problem":44,"code":"#(let [k (mod %1 (count %2))]\n    (concat (drop k %2) (take k %2)))","user":"54324be1e4b0dad94371f2ed"},{"code":"(fn rotate [n xs]\n  (let [len (count xs)\n        n (mod n len)\n        spin (if (pos? n) n (+ len n))]\n    (concat (drop spin xs)\n            (take spin xs))))","problem":44,"user":"50fe2420e4b03cd852b4e84a"},{"problem":44,"code":"(fn [i x] (let [rot (if (> 0 i) (+ (count x) i) i)]\n          (concat (drop (mod rot (count x)) x) (take (mod rot (count x)) x))))","user":"59f4c9c8e4b0966464fe6ab8"},{"code":"(fn [n c]\n  (let [cc (split-at \n             (mod n (count c)) \n             c)]\n    (concat (last cc) (first cc))\n    ))","problem":44,"user":"4e6f8d36535d5021c1a89621"},{"problem":44,"code":"(fn [x y] (let [z (mod (Math/abs x) (count y))]\n  (if (< x 0)\n            (concat (take-last z y) (take (- (count y) z) y))\n            (concat (take-last (- (count y) z) y) (take z y)))))","user":"54ff2342e4b07d26eda61d49"},{"problem":44,"code":"; second try: mod wraps; drop is lazy and nthrest is not\n(fn [n s]\n  (let [i (mod n (count s))]\n    (concat (drop i s) (take i s))))\n\n; first try\n#_(fn ! [n s]\n  (cond\n    (zero? n) s\n    (< n 0) (! (+ (count s) n) s)\n    (> n (count s)) (! (mod n (count s)) s)\n    :else (concat (nthrest s n) (take n s))\n    ))","user":"55e7d06ee4b050e68259b496"},{"problem":44,"code":"(fn\n  [n xs]\n   (flatten (cons (drop (mod n (count xs)) xs) (take (mod n (count xs)) xs))))","user":"55e732c5e4b050e68259b492"},{"problem":44,"code":"(fn answer [rotate list]\n  (let [rotate (mod rotate (count list))]\n    (concat (drop rotate list) (take rotate list))\n    )\n  )","user":"5e491182e4b043cd24807a46"},{"problem":44,"code":"(fn [n xs] (cond \n            (< n 0) (recur (- (count xs) (rem (count xs) n) 1) xs)\n            (= n 0) xs\n            :else (recur (- n 1) (concat (rest xs) [(first xs)]))\n            ))","user":"590e588ce4b047aa04b19a23"},{"code":"(fn [r l]\n\t\t   (let [s (count l)\n\t\t\t\t   r (mod (if (neg? r) (+ s r) r) s)]\n\t\t\t(apply concat  (reverse (split-at r l))))\n\t\t   )","problem":44,"user":"50b78ac9e4b0cf3e51c3046a"},{"code":"(fn [n c] (map #(last %) (#(concat (last %) (first %))\n            (partition-by #(> (first %) (if (> n 0)\n                                          (dec (if (< (count c) n) (mod n (count c)) n)) \n                                          (dec (if (> (count c) (Math/abs n)) (+ (count c) n) (inc (- (count c) (mod n (count c))))))\n                                          ))\n                          (map-indexed vector c)))))","problem":44,"user":"52394c03e4b0d705d026ef09"},{"problem":44,"code":"(fn rotate [position mylist]\n  (let [length (count mylist)\n        myvec (into [] mylist)\n        pos (if (< position 0)\n              (mod (+ length position) length)\n              (mod position length))\n        first-half (subvec myvec pos length)\n        last-half (subvec myvec 0 pos)]\n    (concat first-half last-half)))","user":"5b478997e4b02d533a91bc71"},{"problem":44,"code":"(fn [n s] (take (count s) (drop (mod n (count s))\n                                 (flatten (repeat s)))))","user":"56baab13e4b0f26550335948"},{"problem":44,"code":"#(take (count %2) (drop (mod % (count %2)) (flatten (iterate concat %2))))","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":44,"code":"#(let [n (mod %1 (count %2))\n       coll (vec %2)]\n   (concat\n    (subvec coll n)\n    (subvec coll 0 n)))","user":"55ff562fe4b00f4cabc57660"},{"problem":44,"code":"#(drop (+ (* (count %2) 2) %) (take (+ (* (count %2) 3) %) (cycle %2)))","user":"59a57e91e4b066c664927d63"},{"problem":44,"code":"(fn [n -seq]\n  (let [split-pt (mod n (count -seq))]\n    (reduce #(apply conj %1 %2)\n            []\n            (reverse (split-at split-pt -seq)))))","user":"5ddb6151e4b0948ae9d9adb0"},{"problem":44,"code":"(fn [n coll]\n  (let [length (count coll)\n        infcoll (cycle coll)\n        offset (+ (* 2 length) n)]\n    (->> infcoll\n         (drop offset)\n         (take length))))","user":"54edfa10e4b024c67c0cf868"},{"code":"(fn [n coll]\r\n    (let [cnt (count coll)]\r\n      (flatten (reverse (split-at (if (< n 0)\r\n                                    (+ (rem n cnt) cnt)\r\n                                    (rem n cnt)) \r\n                                  coll)))))","problem":44,"user":"4dd61f98535d2dad7130b5c6"},{"code":"#(let [l (count %2)] (take l (drop (mod % l) (concat %2 %2))))","problem":44,"user":"4e8510e7535db62dc21a62e7"},{"code":"(fn rotate-sequence [times l]\n  (letfn\n    [(controller [i bound result]\n                (if (< i bound)\n                  (if (< times 0)\n                    (controller (+ i 1) bound (concat (list (last result)) (butlast result)))\n                    (controller (+ i 1) bound (concat (rest result) (list (first result)))))\n                  result))]\n    (controller 0 (if (< times 0) (* times (- 1)) times) l)))","problem":44,"user":"52d7b0ade4b09f7907dd137c"},{"problem":44,"code":"#((fn [s p] \n    (let [n (mod p (count s))] \n      (concat (drop n s) \n              (take n s))))\n       %2 %1)","user":"58566b42e4b0f14aab7c86f4"},{"problem":44,"code":"#(loop [r (vec %2)\n         n (if (neg? %1)\n             (mod (+ (count %2) %1) (count %2))\n             (mod %1 (count %2)))\n         i 0]\n    (println n i (first r) (rest r)(conj (vec (rest r)) (first r)))\n    (if (= n i)\n      r\n      (recur (conj (vec (rest r)) (first r))\n             n\n             (inc i))))","user":"5f9c4113e4b0715f5002d821"},{"problem":44,"code":"(fn [r c] \n  (let [ct (mod r (count c))]\n    (concat (drop ct c)\n            (take ct c))))","user":"5325cef5e4b09d4e7a9b54e7"},{"code":"(fn [i coll]\n  (let [c (count coll)]\n    (->> coll\n      cycle\n      (drop (mod i c))\n      (take c))))","problem":44,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":44,"code":"(fn [n,s]\n  (let [x (rem n (count s)) y s]\n  (if (> x 0)\n\t(#(concat (drop % %2) (take % %2)) x y)\n    (#(concat (take-last % %2) (drop-last % %2)) (- 0 x) y) \n    )\n    )\n  )","user":"54a1d643e4b09f271ff37c50"},{"problem":44,"code":"(fn f [n s]\n  (loop [x n\n         res (apply list s)]\n    (cond (= 0 x) res\n          (> x 0) (recur (dec x) (concat (rest res) (list (first res))))\n          :else (recur (inc x) (concat (list (last res)) (drop-last res))))))","user":"51a3cc45e4b0e77c4ca60bfb"},{"problem":44,"code":"(fn [n coll]\n (let [len (count coll)\n       _n (rem n len)\n       m (if (> _n 0) _n (+ _n len))]\n  (apply conj (apply conj [] (take-last (- len m) coll)) (take m coll))))","user":"53c9d29ae4b00fb29b2212c2"},{"problem":44,"code":"(fn rotate-seq [num some-seq]\n  (if (< 0 num)\n    (loop [num num rot-seq some-seq]\n      (if (= num 0)\n        rot-seq\n        (recur (dec num) (concat (rest rot-seq) (conj [] (first rot-seq))))))\n    (loop [num num rot-seq some-seq]\n      (if (= num 0)\n        rot-seq\n        (recur (inc num) (concat (conj [] (last rot-seq)) (drop-last rot-seq))))))\n  )","user":"5d6e5ec6e4b04d129b00f2c7"},{"code":"(fn [n coll]\n  (let [length (count coll)\n        skip (mod n length)]\n    (take length (drop skip (cycle coll)))))","problem":44,"user":"53779a26e4b06839e8705e38"},{"problem":44,"code":"(fn [value1 value2]\n   (take (count value2) (drop (mod value1 (count value2)) (cycle value2))))","user":"60504383e4b056659d6341fa"},{"problem":44,"code":"(fn [n coll]\n  (let [[head tail] (split-at (mod n (count coll)) coll)]\n    (concat tail head)))","user":"53fc713be4b0de5c418485a0"},{"problem":44,"code":"(fn rotate [x coll]\n  (let [s (flatten (repeat coll))]\n    (if (> x 0)\n      (drop x (take (+ (count coll) x) s))\n      (rotate (+ (count coll) x) coll))))","user":"5f38eecce4b0574c87022c72"},{"problem":44,"code":"(fn [x xs]\n  (let [x (mod x (count xs))]\n    (concat (drop x xs) (take x xs))))","user":"5545eebee4b0a04f79299539"},{"problem":44,"code":"#(take (count %2) (nthnext (cycle %2) (mod %1 (count %2))))","user":"56b506d5e4b0982f16b37e2d"},{"code":"(fn [n col]\n  (let [n (rem n (count col))\n        n (if (< n 0) (+ n (count col)) n)]\n    (flatten (reverse (split-at n col)))))","problem":44,"user":"4e589bdc535d8a8b8723a295"},{"code":"#(let [rot (mod %1 (count %2))] (concat (drop rot %2) (take rot %2)))","problem":44,"user":"4f91a38ae4b0dcca54ed6c9f"},{"code":"(fn [n l]\n           (loop [n n\n                  l (vec l)]\n             (if (= n 0)\n               l\n               (recur \n                (if (neg? n)\n                  (inc n)\n                  (dec n))\n                (if (neg? n)\n                  (cons (last l) (take (- (count l) 1) l))\n                  (concat (rest l) [(first l)]))))))","problem":44,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":44,"code":"(fn rotate-seq [val sequence]\n  (let [sat (cond \n              (< val (* -1 (count sequence))) (dec (count sequence))\n              (neg? val) (+ (count sequence) val)\n              (> val (count sequence)) (- val (count sequence))\n              :else  val)]\n   (concat (nthrest sequence sat) (take sat sequence)) ))","user":"5ee4545ee4b029a2061bbe8d"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [c (count coll)]\n    (->> (cycle coll)\n         (drop (if (pos? n)\n                 n\n                 (first (drop-while neg? (iterate (partial + c) n)))))\n         (take c))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":44,"code":"(fn [x y]\n  (let [x2 (mod x (count y))]\n  (concat (drop x2 y) (take x2 y))))","user":"582589b2e4b051871117bedd"},{"problem":44,"code":"#(let [c (count %2)] (take c (drop (+ %1 c c) (cycle %2))))","user":"55e1d34ae4b050e68259b421"},{"problem":44,"code":"(fn [n l] (map (fn [i] (nth l (mod (+ i n) (count l)))) (range (count l))))","user":"5cf6522be4b0b71b1d808a58"},{"problem":44,"code":"(fn [n s]\n  (let [d (if (pos? n) 'l 'r)]\n    (loop [i (if (= 'r d) (* -1 n) n) s s]\n      (if (= 0 i)\n        s\n        (if (= 'l d)\n          (recur (dec i) (concat (rest s) (list (first s))))\n          (recur (dec i) (concat (list (last s)) (butlast s))))))))","user":"54cad59ee4b057c6fda3a26e"},{"code":"(fn rot [n l]\n  (if (zero? n)\n    l\n    (if (pos? n)\n      (rot (dec n) (concat (drop 1 l) (take 1 l)))\n      (rot (inc n) (concat (take-last 1 l) (take (- (count l) 1) l))))))","problem":44,"user":"50435852e4b034ff00315d22"},{"problem":44,"code":";#(last (take (+ (count %2)(count %2)(inc %)) (iterate (fn[x] (conj (into [] (drop 1 x))(first x) )) %2)))\n\n#(last (take (inc(mod %(count %2))) (iterate (fn[x] (conj (into [] (drop 1 x))(first x) )) %2)))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":44,"code":"#(let [l (count %2)\n       start (mod %1 l)]\n   (->> (cycle %2)\n      \t(drop start)\n       \t(take l)))","user":"59ef6cfae4b0966464fe6a32"},{"code":"(fn rotate [n seqn]\n  (if (neg? n)\n    (rotate (+ n (count seqn)) seqn)\n    (take (count seqn) (drop n (apply concat (repeat seqn))))))","problem":44,"user":"53889587e4b0640c7a9a589e"},{"code":"(fn  [idx coll ]\n  (let [ x (mod idx (count coll))]   \n  (concat (drop x coll) (take x coll))))","problem":44,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":44,"code":"(fn f [n a] (let [c (count a), n1 (mod n c)] (concat (drop n1 a) (take n1 a))))","user":"55280930e4b0ffed3738f93b"},{"problem":44,"code":"(fn [r coll]\n          (let [n (count coll)\n                offset (rem r n)\n                start (if (pos? offset) offset (+ n offset))\n                end (+ start n)]\n            (reverse (into '() (subvec (vec (take (* 2 n) (cycle coll))) start end)))))","user":"59438419e4b060784b3b7929"},{"code":"(fn [i l] \n  (let [s (count l) \n        s1 (if (neg? i) (- s (mod (- i) s)) (mod i s))] \n    (flatten \n     (cons \n      (drop s1 l)\n      (take s1 l)))))","problem":44,"user":"53286389e4b09d4e7a9b5504"},{"code":"(fn rot [n coll] \n  (cond \n    (< n 0) (recur (+ n (.size coll)) coll)\n    (> n (.size coll)) (recur (- n (.size coll) ) coll)\n    :else (concat (drop n coll) (take n coll))))","problem":44,"user":"50217818e4b00bba4502f7a7"},{"problem":44,"code":"(fn rotate-n\n  [n coll]\n  (let [my-drop #(cond\n                  (> n 0) (drop n %)\n                  :else (drop (+ (- n) 1) %))]\n    (->> (cycle coll)\n         (my-drop)\n         (take (count coll)))))","user":"5d1c14cde4b02ea6f0fb698a"},{"code":"(fn [n s]\n  (let [n (mod n (count s))\n        s (apply vector s)]\n    (flatten (list\n      (subvec s n) (subvec s 0 n)))))","problem":44,"user":"53070615e4b02e821686979e"},{"problem":44,"code":"(fn [r xs]\n  (let [wrap (mod r (count xs))]\n    (concat (drop wrap xs) (take wrap xs))))","user":"555521a5e4b0deb715856e12"},{"problem":44,"code":"(fn [n coll]\n  (loop [x (count coll)\n         y (rem (+ n x) x)]\n    (if (> y 0)\n      (concat (take-last (- x y) coll) (take y coll))\n      (recur x (rem (+ y x) x)))))","user":"57ee2b3ee4b0bfb2137f5bac"},{"problem":44,"code":"(fn rotate-sequence-solution\n  [in-rt-nbr in-seq] ;; update args as needed\n  ;; Write a function which can rotate a sequence in either direction.\n  (let [in-seq-size (count in-seq)\n        rt-nb-mod (mod in-rt-nbr in-seq-size)]\n    (take in-seq-size (drop rt-nb-mod (cycle in-seq)))))","user":"54df955ee4b024c67c0cf7af"},{"problem":44,"code":"(fn [n xs]\n  (let [cnt (count xs)\n        r   (rem (+ (rem n cnt) cnt) cnt)]\n  \t(concat (drop r xs) (take r xs))\n  )\n  )","user":"5ab1665de4b073f1774425c0"},{"problem":44,"code":"#(let [n (count %2)\n       div (rem (+ n (rem %1 n)) n)]\n   (flatten (reverse (split-at div %2))))","user":"558df2ebe4b0277789237649"},{"code":"(comp flatten reverse #(split-at (mod % (count %2)) %2))","problem":44,"user":"50b65966e4b0a86f8358ca6c"},{"problem":44,"code":";(fn rotater* [n coll]\n;         (let [newnumb (mod n (count coll)) newlist (partition-all newnumb coll)]\n;           (flatten (list (flatten (rest newlist))(first newlist)))))\n\n\n(fn rotater [n coll]\n    (take (count coll) (drop (mod n (count coll)) (cycle coll))))","user":"565487dce4b0f9d632dd8482"},{"problem":44,"code":"(fn rotate [n s]\n  (if (< n 0)\n    (loop [n n\n           res s]\n      (if (= n 0)\n        res\n        (recur (+ n 1) (cons (last res) (drop-last res)))))\n    (loop [n n\n           res s]\n      (if (= n 0)\n        res\n        (recur (- n 1) (conj (into [] (rest res)) (first res)))))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":44,"code":"(fn rot [n coll] (cond (< n 0) (rot (inc n) (conj (butlast coll) (last coll))) (> n 0) (rot (dec n) (concat (rest coll) (list (first coll)))) :else coll))","user":"5646dff3e4b0284900eef615"},{"problem":44,"code":"#(let [rotate (fn [amt col] (concat (nthrest col amt) (take amt col)))                                                          \n       i (Math/abs (rem %1 (count %2)))                                                                                                                 \n       res (if (< %1 0) (reverse (rotate i (reverse %2))) (rotate i %2))]                                                       \n            res)","user":"558b50d5e4b027778923762b"},{"problem":44,"code":"(fn [n xs]\n  (let [[a b] (split-at (mod n (count xs)) xs)]\n    (concat b a)))","user":"5adf5f9be4b0837691e92c33"},{"problem":44,"code":"(fn [num arr] (loop[cnt num acc arr]\n                 (if (zero? cnt)\n                   acc\n                     (if (> num 0) \n                       (recur (- cnt 1)(flatten(conj ()(first acc)(rest acc))))\n                       (recur (+ cnt 1)(flatten(conj ()(reverse(rest (reverse acc)))(last acc))))))))","user":"53ada652e4b047364c04446d"},{"code":"(fn [n lst]\n  \t(if (> n 0)\n\t\t  (take (count lst) (drop n (cycle lst)))\n\t\t  (take (count lst) (drop (- (inc (count lst)) n) (cycle lst)))))","problem":44,"user":"4dfd7ecf535d04ed9115e783"},{"code":"(fn ! \n  [s l]\n  (if (> s 0)\n    \n    (take (count l) (drop s (cycle l)))\n    \n    \n    \n    (take (count l) (drop (+ (count l) (mod s (count l))) (cycle l)))))","problem":44,"user":"5323f4c6e4b09d4e7a9b54d4"},{"problem":44,"code":"(fn [n coll]\n   (let [sz     (count coll)\n         offset (mod n sz)]\n     (take sz (drop offset (cycle coll)))))","user":"543a8256e4b032a45b869327"},{"code":"#(take (% %3) (drop (mod %2 (% %3)) (cycle %3)))\ncount","problem":44,"user":"4e823ed7535db62dc21a62c7"},{"problem":44,"code":"(fn [n s]\n  (let [c (count s)]\n        (take c (drop (mod n c) (cycle s)))))","user":"58fc52cee4b0438e51c2cf95"},{"problem":44,"code":"(fn __ [n in]\r\n  (let [n (mod n (count in))]\r\n    (concat (drop n in) (take n in))))","user":"546e1142e4b00cfc9eacc199"},{"problem":44,"code":"(fn rotate-seq [dir seq]\n  (let [move (if (< dir 0)\n               (+ 1 (Math/abs dir))\n               dir)]\n    (take (count seq) (drop move (apply concat (repeat seq))))))","user":"5a06c154e4b01bb0ae8afdce"},{"code":"(fn rotate [number seq]\n  (if (= 0 number) seq\n    (if (pos? number)\n      (rotate (dec number) (concat (rest seq) [(first seq)]))\n      (rotate (inc number) (cons (last seq) (butlast seq))))))","problem":44,"user":"504eff22e4b0e7ad84dbc4a9"},{"problem":44,"code":"(fn\n  [x coll]\n  (let [to-start-with (nth coll (mod x (count coll)))\n        partitioned (partition-by #(= to-start-with %) coll)]\n    (reverse (flatten (sort-by #(= to-start-with (first %)) (map reverse partitioned))))))","user":"600d9808e4b074f607df669c"},{"problem":44,"code":"(fn [i xs]\n  (let [l (count xs)]\n    (take l (drop (mod i l) (cycle xs)))))","user":"5e486cb0e4b043cd24807a3e"},{"problem":44,"code":"(fn rotate [n s]\n  (cond\n   (pos? n) (rotate (dec n) (concat (rest s) [(first s)]))\n   (neg? n) (rotate (inc n) (cons (last s) (butlast s)))\n   :else s))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":44,"code":"(fn [n lst]\n  (let [lstlen (count lst)\n        numtodrop (mod n lstlen)]\n    (drop numtodrop (take (+ numtodrop lstlen) (cycle lst)))))\n\n;; other options\n;; could also use '(flatten (repeat lst))' instead of '(cycle lst)' \n\n;; other solution\n;; #(let [n (count %2)] (take n (drop (mod % n) (cycle %2))))","user":"56ee0691e4b04a395b9a044c"},{"code":"#(let [i (mod % (count %2))]\r\n  (concat (drop i %2) (take i %2)))","problem":44,"user":"4f9d8083e4b0dcca54ed6d23"},{"problem":44,"code":"(fn [x y] (let [s (seq y) num (loop [n x] (if (>= n 0) n (recur (+ n (count y)))))]\n            (take (count y) (drop num (concat (concat s s) s)))))","user":"5eaba9c0e4b00a66d4a951d6"},{"code":"(fn rotate [pivot coll]\n  (let [i (mod pivot (count coll))]\n    (concat (drop i coll) (take i coll))))","problem":44,"user":"535eaa73e4b04ce2eb3ed2d4"},{"code":"(fn rotate [n xs] \n  (\n    let [l (mod n (count xs))]\n    (concat (drop l xs) (take l xs))\n  )\n)","problem":44,"user":"507eddf4e4b06ce648bcdbfa"},{"code":"(fn [n s] (-> (mod n (count s)) (split-at s) reverse flatten))","problem":44,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(fn [n xs]\n  (let [r (if (> n 0) (rem n (count xs)) (+ (count xs) (rem n (count xs))))\n        xv (vec xs)]\n    (concat (subvec xv r) (subvec xv 0 r))))","problem":44,"user":"5370f8ede4b0fc7073fd6ea2"},{"code":"(fn [n coll]\n  (let [point (mod n (count coll))]\n    (concat (drop point coll) (take point coll))))","problem":44,"user":"5271605ae4b03e8d9a4a73ed"},{"problem":44,"code":"(fn [pos coll] \n  (apply concat (reverse (split-at (if (neg? pos) \n                                     (+ (count coll) (rem pos (count coll))) \n                                     (rem pos (count coll))) \n                                   coll))))","user":"53f5c402e4b0db01ade6f9d4"},{"code":"#(let [[n coll] (split-at (mod % (count %2)) %2)]\n(concat coll n))","problem":44,"user":"5034a14de4b062bc5d7ae165"},{"problem":44,"code":"(fn\n\t[n c]\n\t(let [r (rem n (.size c))\n\t\t  sliceIndex (if (< r 0) (- (.size c) (Math/abs r)) r)\n\t\t  head (take sliceIndex c)\n\t\t  tail (drop sliceIndex c)]\n\t\t(if (< 0 n)\n\t\t\t(flatten (conj head tail))\n\t\t\t(into head (reverse tail)))))","user":"5398123ee4b0b51d73faaef3"},{"problem":44,"code":"(fn [n col]\n  (let [c (count col)]\n    (cond\n       (= n 0) col\n       (= n c) col\n       (< n 0) (recur (+ n c) col)\n       (> n c) (recur (- n c) col)\n       :else\n         (concat (drop n col) (take n col))\n    )\n  )\n)","user":"53ca41dae4b00fb29b2212c8"},{"problem":44,"code":"(fn [n coll]\n   (loop [i (Math/abs n) s (seq coll)]\n     (if (= i 0)\n       s\n       (if (> n 0)\n         (recur (dec i) (concat (rest s) [(first s)]))\n         (recur (dec i) (conj (butlast s) (last s)))\n       )\n     )\n   )\n )","user":"53beacf9e4b0d9a98559a6e3"},{"problem":44,"code":"(fn [n s]\n  (let [i (mod n (count s))]\n    (concat (drop i s) (take i s)) ))","user":"540e0637e4b0addc1aec6717"},{"problem":44,"code":"(fn [n lst]\n  (let [len (count lst)\n        nn (mod n len)]\n    (concat (drop nn lst) (take nn lst))))","user":"566812f0e4b04acd4f672de1"},{"problem":44,"code":"(fn [x coll]\n  (let [size (count coll)]\n    (map #(nth coll (mod % size)) (range x (+ size x)))))","user":"57aa2b97e4b0b8559636fc66"},{"problem":44,"code":"(fn rot [n s]\n  (let [d (mod n (count s))\n        f (drop d s)\n        r (take d s)]\n    (concat f r)))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":44,"code":"(fn myrotate\n  [n s]\n  (let [n_norm (mod n (count s))]\n    (concat (drop n_norm s) (take n_norm s))))","user":"5f5df0bfe4b02876ed9fcfeb"},{"problem":44,"code":"(fn rot [n s]\n  (cond\n    (< n 0) (rot (inc n) (concat [(last s)] (butlast s)))\n    (> n 0) (rot (dec n) (concat (rest s) [(first s)]))\n    :else s))","user":"54f2fe9fe4b050824f58f5b8"},{"code":"#(let [n (count %2) x (mod % n)] (take n (drop x (cycle %2))))","problem":44,"user":"4ec5aa1f535d6d7199dd36b0"},{"problem":44,"code":"(fn foo [n coll]\n  (let [selector (if (> n 0) #'first #'last)\n        rejector (if (> n 0) #'drop #'drop-last)\n        combiner (if (> n 0) #(concat %2 [%]) #(concat [%] %2))\n        absn     (Math/abs n)]\n    (loop [c coll\n           i absn]\n      (println i)\n      (if (> i 0)\n        (recur (combiner (selector c) (rejector 1 c)) (dec i))\n        c))))","user":"56a51f26e4b0542e1f8d14e0"},{"code":"(fn [n l] (if (pos? n)                                                                                                                                                  \n\t                   (let [r (if (< n (count l)) n (rem n (count l)))                                                                                                                                                        \n    \t                     head (take r l)                                                                                                                                                                                      \n        \t                 rest (drop r l)] (concat rest head))                                                                                                                                                                    \n            \t       (let [r (if (< (- n) (count l)) (- n) (rem (- n) (count l)))                                                                                                                         \n                \t         head (take r (reverse l))                                                                                                                 \n                    \t     rest (drop r (reverse l))] (concat (reverse head)                                                                                                                  \n                                                            (reverse rest)))))","problem":44,"user":"52265e41e4b04e78ff2e1981"},{"problem":44,"code":"#(let [ind ((fn [ind size]\n               (if (pos? ind)\n                 (- ind (* size (quot ind size)))\n                 (+ ind (* size (+ 1 (quot (Math/abs ind) size)))))) %1 (count %2))]\n    (concat (drop ind %2) (take ind %2)))","user":"5b34aba7e4b025bcb146f352"},{"problem":44,"code":"#(let [idx %1 col %2 cnt (count col) n (if(pos? idx) (if(> idx cnt) (- idx cnt) idx) (if(> (* idx -1) cnt) (+ idx (* cnt 2)) (+ idx cnt) ) ) ]\n (concat (drop n col) (take n col)) \n   )","user":"5d270111e4b092dab7f59c62"},{"problem":44,"code":"(fn [n s]\n  (let [n (mod n (count s))]\n    (flatten (cons (drop n s) (drop-last (- (count s) n) s)))))","user":"53d86564e4b0e771c302546b"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [size (count xs)]\n    (take size (drop (mod n size) (cycle xs)))))","user":"601c39eee4b0bf4ca6b10937"},{"problem":44,"code":"(fn [n xs]\n  (let [size (count xs)]\n    (->> (cycle xs)\n         (drop (mod n size))\n         (take size))))","user":"5dc88a38e4b02f9375f4e1db"},{"code":"(fn [n s]\n  (let \n    [c (count s)\n     n (mod (+ n c) c)]\n    (concat (drop n s) (take n s))))","problem":44,"user":"4ebe766d535dfed6da9c6d94"},{"problem":44,"code":"(fn [n xs] \n  (let [n-norm (mod n (count xs))]\n    (concat (drop n-norm xs) (take n-norm xs) )\n    )\n  )","user":"60c8e372e4b0e0fa5f1b42ff"},{"code":"(fn [n l]\r\n    (let [addlast (fn f [e l]\r\n                    (if (empty? l) \r\n                      (list e)\r\n                      (cons (first l) (f e (rest l)))))]\r\n      (cond\r\n        (= n 0) l\r\n        (< n 0) (recur (inc n) (cons (last l) (butlast l)))\r\n        (> n 0) (recur (dec n) (addlast (first l) (rest l))))))","problem":44,"user":"50588ff1e4b06522596eba7e"},{"problem":44,"code":"(fn [n s]\n  (let [cs (count s)\n        r  (mod  (+ cs n) cs)]\n    (concat (drop r s) (take r s))\n  )\n)\n\n;(apply concat ((juxt drop take) r s)\n;(mapcat (fn [f] (f r s)) [drop take])","user":"5d9e7971e4b000c986472bc1"},{"code":"(fn rot [n xs] (cond\n                 (= n 0) xs\n                 (< n 0) (rot (inc n) (cons (last xs) (butlast xs)))\n                 (> n 0) (rot (dec n) (concat (rest xs) (list (first xs))))\n                )\n)","problem":44,"user":"52bf8e35e4b07a9af579233a"},{"code":"(fn [n xs]\n  (let [c (count xs)] \n    (->>  (cycle xs)\n          (drop (mod n c))\n          (take c))))","problem":44,"user":"5398305fe4b0b51d73faaef6"},{"code":"(fn [n s]\n\t(let [len (count s)\n\t\t\t  realn (rem n len)\n\t\t\t\tx (if (> realn 0) n (+ len realn))]\n\t\t(take len (drop x (cycle s))))\n\t)","problem":44,"user":"5201ff99e4b0b2e020a18f26"},{"code":"(fn [n xs] \r\n  (let [x (count xs)] \r\n    (take x \r\n        (drop \r\n          (if (neg? n) (inc (- x  n)) n) \r\n          (cycle xs)))))","problem":44,"user":"4e513758535dc968683fc4f3"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [p (mod n (count coll))]\n    (concat (drop p coll)\n            (take p coll))))","user":"55586905e4b0deb715856e2b"},{"code":"(fn shift [pos acoll]\n  (let [size (count acoll)\n        offset (mod pos size)]\n  (take size (drop offset (cycle acoll)))))","problem":44,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"(fn [n coll] \n  (let [n1 (mod n (count coll))] \n    (apply concat ((juxt drop take) n1 coll))))","problem":44,"user":"51c19873e4b0d204dbe2ca0d"},{"code":"(fn [x y] (let [c (count y)] (take c (drop (mod x c) (cycle y)))))","problem":44,"user":"52810225e4b0757a1b171418"},{"problem":44,"code":"(fn shift [value coll1] (let [offset (if (> 0 value)\n    (- (count coll1) (rem (Math/abs value) (count coll1)))\n    value)]\n    (drop\n      offset\n      (take (+ (count coll1) offset) (cycle coll1)))))","user":"5a0ef454e4b04bbd27e6d9fa"},{"problem":44,"code":"(fn [n coll]\n (let [len (count coll)]\n    (take len (drop (mod n len) (cycle coll)))))","user":"544e8c4fe4b0e3978000698a"},{"problem":44,"code":"(fn [n coll] (let [remainder (mod n (count coll))]\n     (take (count coll) (drop remainder (cycle coll)))))","user":"5e12b21be4b099d064962feb"},{"problem":44,"code":"(fn [offset col]\n  (let [rotation (mod offset (count col))]\n    (apply concat (reverse (split-at rotation col)))))","user":"53dd37aee4b0d874e779ae28"},{"problem":44,"code":"(fn rot [amt xs]\n  (let [len (count xs)\n        amt-adjusted (mod amt len)]\n    (take len (drop amt-adjusted (cycle xs)))))","user":"5573ffb5e4b0aa18f790f3fd"},{"problem":44,"code":"(fn [n s]\n  (let [c (count s)\n        x (mod n c)]\n    (concat (drop x s) (take x s))))","user":"576844cde4b0a07e8fc180ce"},{"code":"(fn [n x] \n  (let [i (mod (+ (count x) n) (count x))]\n  (concat (drop i x) (take i x))))","problem":44,"user":"4ea1ecfa535d7eef308072bb"},{"code":"(fn rotate [n coll]\n  (cond \n\t\t(< n 0)\n\t\t\t(rotate (+ n (count coll)) coll)\n\t\t(> n (count coll))\n\t\t\t(rotate (- n (count coll)) coll)\n\t\t:else\n\t\t\t(concat \n\t\t\t\t(drop n coll)\n\t\t\t\t(take n coll))))","problem":44,"user":"4e40529b535dc968683fc49a"},{"code":"(fn [n lst]\n  (let [shft (mod n (count lst))]\n    (apply concat (reverse (split-at shft lst)))))","problem":44,"user":"4fba7d1ee4b081705acca2e0"},{"code":"(fn [x l] \n\t(let [n (mod x (count l))] \n\t\t(concat (drop n l) (take n l))))","problem":44,"user":"50d916eae4b0fd36a4b89221"},{"code":"(fn [n ls]\r\n  (let [k (mod n (count ls) )]\r\n    (concat (drop k ls) (take k ls))))","problem":44,"user":"502a9fdee4b095a7adb898b4"},{"problem":44,"code":"#_(fn rotate [n coll]\n  (let [steps (rem n (count coll))]\n    (if (pos? steps)\n      (concat (drop steps coll) (take steps coll))\n      (concat (take-last (* -1 steps) coll) (drop-last (* -1 steps) coll)))))\n\n#_(fn rotate [n coll]\n  (let [steps (mod n (count coll))]\n    (concat (drop steps coll) (take steps coll))))\n\n(fn rotate [n coll]\n  (let [steps (mod n (count coll))]\n    (apply concat (reverse (split-at steps coll)))))","user":"5d6f063de4b04d129b00f2d1"},{"problem":44,"code":"(fn [n l](let [v (Math/abs n)c (mod v (count l))r (reverse l)](if (neg? n) (reverse (concat (drop c r) (take c r)))(concat (drop c l) (take c l)))))","user":"5d83b9aae4b0915913b1d386"},{"problem":44,"code":"(fn [n s]\n (loop [counter n output s]\n   (cond\n     (= 0 counter) output\n     (> 0 counter) (recur (inc counter) (concat (vector (last output)) (take (- (count output) 1) output) ))\n     (< 0 counter) (recur (dec counter) (concat (rest output) (vector (first output))))\n     )\n  ) \n)","user":"580d1da7e4b0849f6811b72f"},{"code":"(fn rot [n s]\n  (let [c (count s)]\n    (take c \n      (drop \n        (mod n c)\n        (cycle s)))))","problem":44,"user":"4f03fb59535dcb61093f6b89"},{"code":"(fn [i c] \n  (last \n    (take (inc (Math/abs i)) \n      (iterate \n        (fn [s] \n          (if (< i 0)\n            (concat [(last s)] (butlast s))\n            (concat (rest s) [(first s)]))\n        )\n      c))))","problem":44,"user":"4f0f01c0535d0136e6c22329"},{"problem":44,"code":"(fn [n coll] (concat (drop (mod n (count coll)) coll) (take (mod n (count coll)) coll)))","user":"5601bb7ee4b04bb52996e195"},{"problem":44,"code":"(fn [n coll]\n  (let [mod_n (mod n (count coll))]\n    (loop [new_coll coll cnt 0]\n      (if (= cnt mod_n)\n        new_coll\n        (recur (conj (vec (rest new_coll)) (first new_coll)) (inc cnt))\n        )\n    )\n  )\n  )","user":"5b5462b5e4b02d533a91bd20"},{"code":"(fn [rot-amt s]\n  (let [drop-amount\n        (if (pos? rot-amt) rot-amt\n          (inc (- (count s) rot-amt)))]\n    (take (count s) (drop drop-amount (cycle s)))))","problem":44,"user":"52d340ebe4b099d49816f0c1"},{"problem":44,"code":"(fn rotate\n  [n xs]\n  (let [len (count xs)\n        k (mod n len)]\n    (drop k (take (+ k len) (cycle xs)))))","user":"5c222b7de4b07e362c230588"},{"problem":44,"code":"(fn my-rotate [n l]\n  (take (count l) (drop (+ (* 2 (count l)) n) (cycle l))))","user":"548c8115e4b0e286459a120c"},{"code":"(fn [rank li]\n  (let [rank (mod rank (count li))]\n    (flatten ((juxt (partial drop rank)\n                    (partial take rank))\n              li))))","problem":44,"user":"528410bbe4b0239c8a67adc2"},{"problem":44,"code":"(fn rotate\n  [n s]\n  (let [c (count s)\n        n (rem n c)\n        n (if-not (neg? n)\n            n\n            (+ c n))\n        fst (drop n s)\n        rst (take n s)]\n    (concat fst rst)))","user":"54764a8fe4b0c51c1f4d72a3"},{"code":"(fn [c s]\n   (flatten ((juxt drop take) (mod c (count s)) s)))","problem":44,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":44,"code":"(fn [i xs]\n    (let [len (count xs)\n          pos (mod i len)]\n      (take len (drop pos (cycle xs)))))","user":"4e6a23d0535d8ccf87e9fea0"},{"code":"(fn [num in-seq]\n  (let [r (mod (if (< num 0) (+ (count in-seq) num) num) (count in-seq))]\n    (flatten (conj (take r in-seq) (drop r in-seq)))))","problem":44,"user":"4ef4ab95535dced4c769f23b"},{"code":"(fn rot [n seq] (let [off (mod n (count seq))] (concat (drop off seq) (take off seq))))","problem":44,"user":"5315a4f0e4b08068f379ed2e"},{"problem":44,"code":";; 4clojure 44\n(fn [n seq]\n  (let [abs-n (max n (- n))\n        size (count seq)\n        m (mod abs-n size)]\n    (if (pos? n)\n      (concat (drop m seq)\n              (take m seq))\n      (concat\n        (take-last m seq)\n        (drop-last m seq)))))","user":"55f778bee4b06e875b46ceab"},{"code":"#(let [c (count %2)] \n  (take c (drop (mod % c) (cycle %2))))","problem":44,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"(fn rotate[x c]\r\n  (let [t (if (pos? x) (if (> x (count c)) (- x (count c)) x) (if (> (- x) (count c)) (+ (mod x (count c))) (+ x (count c))))]\r\n  (flatten(reverse(split-at t c)))\r\n  ))","problem":44,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":44,"code":"#(->> %2\n      (split-at (mod %1 (count %2)))\n      reverse\n      (apply concat))","user":"554680cbe4b0a04f7929953e"},{"code":"(fn [z x] (if(and (< z 0) (> (* z -1)(count x)))\n            ( concat (second(split-at (+(mod(* z -1)(count x))1)x))(first(split-at (+(mod(* z -1)(count x))1)x)) )\n            (if(< z 0)\n              ( concat (second(split-at (+(* z -1)1) x)) (first(split-at (+(* z -1)1) x)) )\n              (if(> z (count x))\n                (concat (second(split-at (mod z (count x)) x)) (first(split-at (mod z (count x)) x)))\n                (concat (second(split-at z x)) (first(split-at z x)) )\n                )\n              )\n         )\n  )","problem":44,"user":"5177cacde4b0261ae665b877"},{"code":"(fn [n x] (take (count x) (drop (mod n (count x))\n              (cycle x))))","problem":44,"user":"4f3e2fbbe4b0e243712b1f7e"},{"problem":44,"code":"(fn r [n s]\n  (let [c (count s)\n        nn (if (neg? n) \n             (+ c n)\n             n)\n        nn (mod nn c)]\n    (flatten [(drop nn s) (take nn s)])))","user":"51aefceee4b09397d5109797"},{"code":"(fn rotate [n coll]\n  (let [sign (>= n 0)\n        n    (mod (Math/abs n) (count coll))\n        skip (if sign n (- (count coll) n))]\n    (concat\n      (drop skip coll)\n      (take skip coll))))","problem":44,"user":"5002b6e5e4b0678c553fc42c"},{"code":"(fn rot [c ary] \n  (let [n (mod c (count ary))] \n    (into (vec (drop n ary)) (take n ary))))","problem":44,"user":"4f294c48e4b0d6649770a023"},{"code":"(fn [n coll]  \n  (let [len (count coll) \n        order-f (if (< n 0) reverse identity)\n        abs-n (Math/abs n)]\n    (order-f (take len (drop abs-n (cycle (order-f coll)))))))","problem":44,"user":"4f43b992e4b0d7d3c9f3fd2c"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [cnt (mod n (count xs))]\n    (concat (drop cnt xs) (take cnt xs))))","user":"56602649e4b068f2fe63dc47"},{"problem":44,"code":"(fn rotate-seq\n  [rotating-factor collection]\n  (let [l (count collection)\n        pos-val (mod rotating-factor l)\n        neg-val (- l (mod (- rotating-factor) l))]\n    (if (pos? rotating-factor)\n      (flatten (cons (drop pos-val collection) (take pos-val collection)))\n      (flatten (cons (drop neg-val collection) (take neg-val collection))))))","user":"5d42c88ae4b05dd059a5437e"},{"problem":44,"code":"(fn f \n  ([n v] \n   (if (pos? n) (f (- (count v) (mod n (count v))) v v) (f (* -1 (rem n (count v))) v v)))\n  ([n v res]\n   (if (= n 0) res (f (dec n) v (conj (reverse (rest (reverse res))) (last res))))))","user":"57f28b22e4b0511f1d294def"},{"code":"(fn [n l]\n         (let [n (mod n (count l))]\n           (concat (drop n l) (take n l))))","problem":44,"user":"4e6a52de535d8ccf87e9fecb"},{"problem":44,"code":"(fn [d coll] (let [m (mod d (count coll))] (concat (drop m coll) (take m coll)) ))","user":"5dcfdf23e4b0948ae9d9ad43"},{"problem":44,"code":"(fn\n  [rotations seq]\n  (let [direction (if (pos? rotations) :left :right)\n        rotations-abs (Math/abs rotations)\n        rotations-effective (mod rotations-abs (count seq))]\n  (letfn [(rotate-left [rotation seq]\n            (concat (drop rotation seq) (take rotation seq)))\n          (rotate-right [rotation seq]\n            (concat (take-last rotation seq) (drop-last rotation seq)))]\n\n    (if (= :left direction)\n      (rotate-left rotations-effective seq)\n      (rotate-right rotations-effective seq)))))","user":"4daf420cedd6309eace4d176"},{"code":"(fn rot [n x]\n  (let [s (mod n (count x)) e (- (count x) s)]\n    (concat (take-last e x) (take s x))\n    )\n  )","problem":44,"user":"52586d24e4b0cb4875a45cb0"},{"problem":44,"code":"#(if (pos? %1) (concat (drop (mod %1 (count %2)) %2) (take (mod %1 (count %2)) %2))\n   (let [n (if (> (count %2) (Math/abs %1) ) (+ (count %2) %1 )  2  ) ] (concat (drop n %2) (take n %2) )))","user":"54e51c7be4b024c67c0cf7f7"},{"problem":44,"code":"(fn [n col]\n  (letfn [(make-positive [n col]\n            (cond \n             (> (count col) n 0) n\n             (> n (count col)) (recur (- n (count col)) col)\n             (> (count col) 0 n) (recur (+ n (count col)) col)))\n          (rotate [n col]\n            (concat (drop n col) (take n col)))]\n                  (rotate (make-positive n col) col)))","user":"587c48cce4b01531a375eb16"},{"problem":44,"code":"(fn rotate [num seqq]\n  (if (neg? num)\n    (if (< num (- (count seqq)))\n      (let [diff (- num (- (count seqq)))]\n        (flatten (list (take-last (- diff) seqq) (drop-last (- diff) seqq))))\n      (flatten (list (take-last (- num) seqq) (drop-last (- num) seqq))))\n    (if (> num (count seqq))\n      (let [diff (- num (count seqq))]\n        (flatten (list (drop diff seqq) (take diff seqq))))\n      (flatten (list (drop num seqq) (take num seqq))))))","user":"5e380e72e4b01d43a70e8db0"},{"problem":44,"code":"(fn [dir coll]\n  (map-indexed (fn [index item] \n         (nth coll (mod (+ index dir) (count coll)))) coll))","user":"5884f77ee4b0f1effa3b76a9"},{"code":"(fn [n coll]\n  (let [c (count coll)\n        [front back] (split-at (mod n c) coll)]\n    (concat back front)))","problem":44,"user":"51ae350fe4b09397d5109790"},{"problem":44,"code":"(fn rotasi-2 [n coll]\n  (let [mutlak (if (neg? n) (- n) n)\n        geser-kanan #(flatten (list (cons (last %) (drop-last %))))\n        geser-kiri #(flatten (list (merge (vec (drop 1 %)) (first %))))]\n    (if (zero? mutlak)\n            coll\n            (if (neg? n)\n              (rotasi-2 (inc n) (geser-kanan coll))\n              (rotasi-2 (dec n) (geser-kiri coll))))))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":44,"code":"(fn prot [n coll] (let [nn (mod n (count coll))] (nth (iterate #(cons (last %) (butlast %)) coll) (- (count coll) nn))))","user":"5900d5cde4b0438e51c2d02e"},{"problem":44,"code":"(fn [n ls]\n  (let [c (count ls)\n        m (mod n c)]\n    (take c (drop m (cycle ls)))))","user":"5565f616e4b0c656e3ff1823"},{"code":"(fn[x coll]\n  (flatten ((juxt drop take) (mod x (count coll))  coll)))","problem":44,"user":"53513d28e4b084c2834f4ae3"},{"problem":44,"code":"(fn rot [n coll]\n  (let [n (rem n (count coll))\n        n (if (< n 0) (+ n (count coll)) n)\n        pair (split-at n coll)\n        [f b] pair]\n    (reduce #(cons %2 %1) f (reverse b))))","user":"518ba795e4b0f028e99addf0"},{"code":"#(letfn [(rot-forw [xs] (vec (drop 1 (conj xs (first xs)))))\n          (rot-back [xs] (vec (drop-last (cons (last xs) xs))))]\n         (loop [i %1 \n                xs (vec %2)]\n           (cond (zero? i) xs\n                 (pos? i) (recur (dec i) (rot-forw xs))\n                 (neg? i) (recur (inc i) (rot-back xs)))))","problem":44,"user":"531bfb69e4b08068f379ed97"},{"problem":44,"code":"(fn rotate [n seq]\n    (if (= n 0)\n        seq\n        (if (> n 0)\n            (recur (dec n) (concat (rest seq) [(first seq)]))\n            (recur (inc n) (concat [(last seq)] (take (- (count seq) 1) seq))))))","user":"5c87c79be4b048ec896c591b"},{"code":"(fn [n col]\n  (let [n (mod n (count col))]\n    (concat (drop n col) (take n col))))","problem":44,"user":"4fbf2818e4b081705acca317"},{"code":"(fn [rt input]\n  (let [len (count input)]\n    (take len (drop (mod rt len) (cycle input)))))","problem":44,"user":"4ed152d5535d44c135fd68cc"},{"code":"(fn [a b] (apply concat (reverse (split-at (mod a (count b)) b))))","problem":44,"user":"4f0e4ebd535d0136e6c22322"},{"problem":44,"code":"(fn [i se]\n   (let [n (mod i (count se))]\n     (if (pos? n)\n       (concat (drop n se) (take n se))\n       (concat (take-last (Math/abs n) se) (drop (Math/abs n) se)))))","user":"57235dc4e4b0c5bde472c0e2"},{"code":"(fn [dir s]\n  (let [n (mod dir (count s))]\n    (concat (drop n s) (take n s))))","problem":44,"user":"4f05ea25535dcb61093f6c02"},{"problem":44,"code":"(fn rotate-seq [n coll]\n    (let [size (count coll)]\n        (take size (drop (mod n size) (cycle coll)))))","user":"594bb36ae4b07ddc2dafae37"},{"code":"(fn [n xs]\r\n  (let [cxs (cycle xs)]\r\n     (if (neg? n)\r\n       (take (count xs) (drop (- (count xs) (mod (- n) (count xs))) cxs))\r\n       (take (count xs) (drop n cxs)))))","problem":44,"user":"4e8681b7535dae1a5effa438"},{"problem":44,"code":"(fn [rotation collection]\n  (let [positive-value? (fn [value] (or (pos? value) (zero? value)))\n        turns-into-positive (fn [value] (if (positive-value? value) value (* -1 value)))\n        collection_size (count collection)\n        double_collection_size (+ (turns-into-positive rotation) (* 2 (count collection)))\n        doubled_collection (take double_collection_size (cycle collection))]\n    (if (positive-value? rotation)\n      (take collection_size (last (split-at rotation doubled_collection)))\n      (take collection_size (last (split-at (inc (turns-into-positive rotation)) doubled_collection)))\n)))","user":"5885eb2de4b0f1effa3b76c6"},{"code":"(fn [x s] (let [c (count s) o (mod x c)] (take c (drop o (cycle s)))))","problem":44,"user":"5098bcfee4b0cae2931060a1"},{"problem":44,"code":"(fn rec [n coll]\n  (if (neg? n)\n    (rec (+ n (count coll)) coll)\n  \t(if (zero? n)\n      coll\n      (rec (dec n) (concat (rest coll) (list (first coll)))))))","user":"55058a4fe4b086ebe8a79c89"},{"code":"(fn [times coll]\n  (let [n (mod times (count coll))]\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":44,"code":"(fn [n s]\n    (let [position (cond\n                     (>= n 0) (rem n (count s))\n                     (< n 0) (+ (count s) (rem n (count s))))]\n      (let [l (split-at position s)]\n        (flatten (concat (rest l) (first l))))))","user":"5600dccee4b04bb52996e175"},{"code":"(fn [k s]\n  (let [n (count s)]\n    (take n (drop (mod k n) (cycle s)))\n  )\n)","problem":44,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":44,"code":"#(let [s (mod %1 (count %2))]\n  \t(concat (drop s %2) (take s %2))\n)","user":"59449aa2e4b0b03edd0057ad"},{"problem":44,"code":"(fn rot-seq [n l]\n    (let [rot (mod n (count l))]\n      (concat (drop rot l) (take rot l))))","user":"549b1e50e4b0f3d1d8e70f7a"},{"problem":44,"code":"(fn [n xs]\n  (if (= 0 n)\n    xs\n    (if (< 0 n)\n      (let [m (mod n (count xs))]\n        (concat (drop m xs) (take m xs)))\n      (let [m (mod (* -1 n) (count xs))]\n        (concat (take-last m xs) (drop-last m xs))))))","user":"56483562e4b0284900eef629"},{"problem":44,"code":"(fn [n ss]\n  (let [ len (count ss)\n         mod-len (mod n len)\n         non-neg (if (< n 0) (- len mod-len -1) n)]\n         (loop [acc []\n                x 0]\n           (if \n             (< x len)\n             (let [v (+ non-neg x)\n                   c (mod v len)\n                   value (nth ss c)]  \n               (recur (conj acc value) (inc x))\n             )\n             acc))))","user":"543496e1e4b0b6b47310fcf2"},{"code":"(fn [n s]\n  (let [l (mod n (count s))]\n    (concat (drop l s) (take l s))))","problem":44,"user":"519136e9e4b0f8ef0be96c01"},{"problem":44,"code":"(fn rot [n xs]\n  (cond\n   (pos? n) (rot (dec n) (concat (rest xs) [(first xs)]))\n   (neg? n) (rot (inc n) (cons (last xs) (butlast xs)))\n   :else xs))","user":"59ee6801e4b0966464fe6a1f"},{"problem":44,"code":"(fn rotter [n coll] \n  (if (neg? n)\n  \t(reverse (rotter (- n) (reverse coll)))\n  \t(let [m (mod n (count coll))]\n      (concat (drop m coll) (take m coll)))))","user":"54864662e4b0e286459a11b8"},{"problem":44,"code":"(fn rotate [n xs] (let [n (mod n (count xs))] (concat (drop n xs) (take n xs))))","user":"5c30d90de4b0d62ef62d9f22"},{"code":"(fn [n s]\n  (letfn [(rot [n s]\n            (let [[a b] (split-at n s)]\n              (concat b a)))]\n    (if (> n 0)\n      (rot (rem n (count s)) s)\n      (rot (+ (count s) (rem n (count s))) s))))","problem":44,"user":"4fb4f42ae4b081705acca2b4"},{"problem":44,"code":"(fn [a coll]\n    (let [pos (mod a (count coll))]\n      (concat (drop pos coll)\n              (take pos coll))))","user":"532f8569e4b019098a6f8b4f"},{"problem":44,"code":"(fn [n l]\n   (cond\n     (= n 0) l\n     (> n 0) (recur (dec n) (conj (vec (rest l)) (first l)))\n     :else (recur (+ (count l) n) l)))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn [r xs]\n (let [n (count xs)]\n   (take n (drop (+ n (mod r n)) (cycle xs)))))","problem":44,"user":"5097b556e4b00ad8bab4e970"},{"code":"(fn [rotation coll]\n   (if (empty? coll)\n     coll\n     (let [slice (fn [coll start end]\n                   (map #(nth coll %)\n                        (range start end)))\n           length (count coll)\n           rotate (rem rotation length)\n           split-at (if (neg? rotate)\n                      (+ length rotate)\n                      rotate)\n           left (slice coll 0 split-at)\n           right (slice coll split-at length)]\n       (concat right left))))","problem":44,"user":"5014754de4b094324338f8e5"},{"code":"(fn f [n l]\n  (cond\n    (< n 0) (f (+ n (count l)) l)\n    (> n (count l)) (f (- n (count l)) l)\n    :else (apply concat (reverse (split-at n l)))))","problem":44,"user":"4ff5744ae4b0678c553fc36a"},{"problem":44,"code":"(fn rotate-sequence [n coll]\n  (let [i (mod n (count coll))]\n    (concat (drop i coll) (take i coll))))","user":"5fd2e391e4b07e53c2f3f049"},{"problem":44,"code":"(fn rotate [n xs] \n      (let [r (mod n (count xs))]\n        (cond\n         (< r 0) (concat (reverse (take (Math/abs r) (reverse xs))) (reverse (drop (Math/abs r) (reverse xs))))\n         :else (concat (drop r xs) (take r xs)))))","user":"5409a12fe4b0addc1aec66df"},{"problem":44,"code":"(fn [n coll]\n  (let [real-n (mod n (count coll))]\n    (concat (drop real-n coll) (take real-n coll))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"problem":44,"code":"(fn [n a] (let [s (mod n (count a))] (concat (drop s a) (take s a))))","user":"55306f9de4b076ab5578f814"},{"problem":44,"code":"(fn [n coll]\n    (let [len (count coll)\n          rotate #(take len (drop %1 (apply concat (repeat %2))))]\n      (if (pos? n) (rotate n coll)\n          (reverse (rotate (- len n) (reverse coll))))))","user":"5ed9b912e4b0c7845d86b0e3"},{"problem":44,"code":"#_(fn [n coll]\n  (let [length (count coll)]\n    (replace\n     (vec coll)\n     (mapv #(mod % length)\n           (mapv #(+ % n)\n                 (range length))))))\n\n(fn [n coll]\n  (let [length (count coll)\n        math #(get (vec coll) (mod (+ % n) length))]\n    (map math (range length))))\n\n#_(fn myrot [n coll]\n  (let [length (count coll)]\n   (->> (range length)\n        (mapv #(+ % n))\n        (mapv #(mod % length))\n        (mapv (vec coll)))))\n\n#_(fn not-my-fn [n coll]\n  (let [m (mod n (count coll))\n        [x y] (split-at m coll)]\n    (concat y x)))\n\n#_(fn [n coll]\n  (let [length   (count coll)\n        indecies (range length)\n        rotation (cond (pos? n) (last (range n 0 (- length)))\n                       (neg? n) (last (range n (inc length) length)))\n        ]\n    (replace (vec coll) (concat (range rotation length)\n                          (range 0 rotation)))))","user":"5297dcc5e4b02ebb4ef75047"},{"problem":44,"code":"(fn [direction coll]\n  (let [len (count coll)\n        dir (rem direction len)\n        n (if (neg? dir) (+ len dir) dir)]\n    (concat (drop n coll) (take n coll))))","user":"5aa4f7dae4b0d174b936c88c"},{"code":"(fn rotate [n v]\r\n  (->> (concat v v)\r\n    (drop (mod n (count v)))\r\n    (take (count v))\r\n    )\r\n  )","problem":44,"user":"4f7d25b4e4b06e829148e1ba"},{"code":"#_(duh... just mod instead of repeatedly rotating)\n\n(fn [n s]\n  (let [n (if (neg? n) (mod n (count s)) n)]\n    (last (take (inc n) (iterate (fn [[x & xs]] (conj (vec xs) x)) s)))))","problem":44,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":44,"code":"(fn rot [n s]\n  (take (count s)\n    (drop (mod n (count s))\n      (cycle s))))","user":"56fc0601e4b07572ad1a88db"},{"problem":44,"code":"(fn [i s]                                                                        \n  (let [offset (mod i (count s))]                                               \n    (concat (drop offset s) (take offset s))))","user":"563536f8e4b0bfe05bf117c5"},{"code":"#(take(count%2)(drop(if(pos?%)%(+(* -1%(count%2))%))(flatten(repeat%2))))","problem":44,"user":"4dad8fe9c9a9d6ed1899dc57"},{"problem":44,"code":"(fn [n s]\n     (loop [cnt n res s]\n       (if (= cnt 0) res\n         (if (< n 0)         \n           (recur (inc cnt) (conj (drop-last res) (last res)))\n           (recur (dec cnt) (conj (apply vector (rest res)) (first res))) \n         )\n       )  \n    )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"problem":44,"code":"(fn [n s]\n  (map-indexed (fn [i x] \n                 (nth s (mod (+ n i) (count s)))) s))","user":"5b2689e3e4b063e2438bcc33"},{"problem":44,"code":"(fn rot [i coll]\n  (cond \n   (= i 0) coll\n   (< i 0) (recur (inc i) (conj (butlast coll) (last coll)))\n   (> i 0) (recur (dec i) (conj (into [] (rest coll)) (first coll)))))","user":"560039cce4b04bb52996e162"},{"problem":44,"code":";(defn rot-b [n xs]\n;  (let [i (mod n (count xs))\n;        [a b] (split-at i xs)]\n;    (concat b a)))\n\n\n(fn [n xs]\n  (let [l (count xs)]\n    (->> xs\n         (cycle)\n         (drop (+ l (rem n l)))\n         (take l))))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":44,"code":"(fn [cnt seq]\n  (loop [valid-cnt cnt]\n    (cond\n      (< valid-cnt 0)\n      (recur (+ valid-cnt (count seq)))\n      (>= valid-cnt (count seq))\n      (recur (- valid-cnt (count seq)))\n      :else (concat (drop valid-cnt seq) (drop-last (- (count seq) valid-cnt) seq)))))","user":"556a7626e4b09a3098a524e3"},{"problem":44,"code":"(fn rotate [n s]\n    (if (pos? n)\n      (let [m (mod n (count s))]\n        (lazy-cat (drop m s) (take m s)))\n      (reverse (rotate (- n) (reverse s)))))","user":"54c169ade4b0ed20f4ff6f24"},{"problem":44,"code":"#(apply concat (reverse (split-at (if (< %1 0) (+ (count %2) (rem %1 (count %2))) (rem %1 (count %2))) %2)))","user":"55ed9108e4b0121d4835fddc"},{"code":"#(let [n (mod %1 (count %2))] \n  (concat (drop n %2) (take n %2)))","problem":44,"user":"5009fd0ae4b03d00572d2d70"},{"code":"(fn [n coll]\n  (let [a (mod n (count coll))\n        spl (split-at a coll)]\n    (flatten (conj (first spl) (second spl)))))","problem":44,"user":"4e8dc25f535d65386fec213a"},{"code":"(fn f[n s]\r\n  (cond\r\n   (> n 0) (f (- n 1) (concat (rest s) [(first s)]))\r\n   (< n 0) (f (+ n 1) (concat [(last s)] (butlast s)))\r\n   true    s \r\n  ))","problem":44,"user":"4dd66da7535d2dad7130b5c8"},{"code":"(fn [n s] (take (count s) (drop (mod n (count s)) (concat s s))))","problem":44,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"problem":44,"code":"(fn [index coll] (let [i (mod index (count coll))] (concat (drop i coll) (take i coll))))","user":"54ba8206e4b0ed20f4ff6eb6"},{"code":"(fn [n xs]\n  (let [i (mod n (count xs))]\n    (concat (drop i xs) (take i xs))))","problem":44,"user":"4f1b92d1535d64f60314647b"},{"problem":44,"code":"(fn [n col]\n   ((comp flatten reverse) (split-at (mod n (count col)) col) ))","user":"5a18488ee4b0ff51aa4b31e5"},{"problem":44,"code":"(fn [n s] (let [r (rem n (count s)), c (count s)]\n             (if (pos? r)\n               (concat (take-last (- c r) s) (take r s))\n               (concat (take-last (unchecked-negate r) s) (take (+ c r) s)))))","user":"5ec25800e4b00a66d4a9529b"},{"code":"(fn [m s] \n  (loop [i (rem m (count s))] \n    (if (< i 0) (recur (+ i (count s)))\n    (concat (drop i s) (take i s)))))","problem":44,"user":"5145832be4b0e8879607340a"},{"code":"(fn [n s] (take (count s) (drop (loop [n n] (if (pos? n) n (recur (+ n (count s))))) (cycle s))))","problem":44,"user":"4ddbf54e535d02782fcbe9ff"},{"code":"(fn rotate\n\t[i coll]\n\t(if (= i 0)\n\t\tcoll\n\t\t(if (pos? i)\n\t\t\t(rotate (dec i) (concat (rest coll) (list (first coll))))\n\t\t\t(rotate (inc i) (cons (last coll) (drop-last coll))))))","problem":44,"user":"51701a9ce4b034fe8eaf70f5"},{"code":"(fn [n xs] (let [pivot (mod n (count xs))]\r\n  (concat (drop pivot xs) (take pivot xs))))","problem":44,"user":"4dd52e29535dae65d5c462e5"},{"code":"(fn rotate [n s]\n  (nth (iterate #(concat (rest %) (list (first %))) s) (mod n (count s))))","problem":44,"user":"4fedd2cae4b0198f34b063ba"},{"problem":44,"code":"(fn rot [n l]\n  (cond \n    (< n 0) (reverse (rot (- n) (reverse l)))\n    (= n 0) l\n    :else   (rot (dec n) (concat (rest l) [(first l)]))))","user":"54d6f22de4b0a52adc2e2023"},{"problem":44,"code":"#(take (count %2) (drop (mod %1 (count %2)) (cycle %2 )))","user":"5b11449ce4b0cc2b61a3be2d"},{"code":"(fn [n ss]\n  (let [s (apply vector ss) l (count ss)]\n    (loop [indexes (map #(mod % l) (range n (+ n l)))\n          res []]\n    (if (empty? indexes)\n      res\n      (recur (rest indexes) (conj res (get s (first indexes))))))))","problem":44,"user":"53820087e4b06839e8705ecf"},{"code":"(fn [n s]\r\n   (let [[a b] (split-at (mod n (count s)) s)]\r\n     (concat b a)))","problem":44,"user":"4ef1ee67535dced4c769f219"},{"problem":44,"code":"#(let [len (count %2) idx (mod %1 len)] (subvec (reduce into [] (repeat 2 %2)) idx (+ len idx)))","user":"56f974c0e4b07572ad1a88b1"},{"problem":44,"code":"(fn rotate-left\n  [n lst]\n  (if (empty? lst)\n    ()\n    (if (> n 0)\n      (concat\n        (second (split-at (rem n (count lst)) lst))\n        (first (split-at (rem n (count lst)) lst)))\n      (mapcat reverse (split-at (rem (max n (- n)) (count lst)) (reverse lst)))\n      )\n    ))","user":"57fc34f0e4b0d3187e90098e"},{"problem":44,"code":"(fn rotate [n s] (if (= 0 n)\n                     s\n                     (if (< 0 n)\n                       (rotate (dec n) (concat (rest s) (list (first s))))\n                       (rotate (inc n) (concat (list (last s)) (take (- (count s) 1) s))))))","user":"604f4be1e4b0b7ec0ac60ace"},{"code":"(fn [n coll]\n  (let [len (count coll) \n        x (if (> n 0) (rem n len) (+ len (rem n len)))]\n  \t(take len (nthrest (concat coll coll) x))))","problem":44,"user":"514721c6e4b0d520409ed392"},{"problem":44,"code":"(fn [n xs]\n  (let [c (count xs) rem (mod n c)]\n    (->> xs\n         cycle      ; Infinite repeating lazy seq from xs\n         (drop rem) ; Offset by remainder\n         (take c)))); Consume to count","user":"5fb46916e4b08cb800c85b46"},{"problem":44,"code":"(fn [n s]\n  (let [m (dec (count s))]\n    (loop [n n s s]      \n      (cond\n        (zero? n) s\n        (pos? n) (recur (dec n) (lazy-cat (drop 1 s) (take 1 s)))\n        :else    (recur (inc n) (lazy-cat (drop m s) (take m s)))))))","user":"552356fae4b0882d96d091af"},{"problem":44,"code":"(fn [n xs]\n  (let\n    [sh (mod n (count xs))]\n    (concat (drop sh xs) (take sh xs))))","user":"55316b8ae4b076ab5578f825"},{"problem":44,"code":"(fn [r l]\n  (let [r (rem r (count l))]\n    (if (> r 0)\n      (concat (drop r l) (take r l))\n      (concat (drop (+ (count l) r) l) (take (+ (count l) r) l)))))","user":"53aaaf7ae4b047364c044444"},{"problem":44,"code":"(fn rotate [n s] \n  (let [shift (mod n (count s))] \n    (concat (drop shift s) \n            (take shift s))))","user":"574ed2f7e4b02ea11479924a"},{"code":"(fn [n xs]\n  (take (count xs) (drop (mod n (count xs)) (cycle xs))))","problem":44,"user":"4e4ca885535dc968683fc4df"},{"problem":44,"code":"#(let [t (split-at (mod %1 (count %2)) %2)]\n   (concat (last t) (first t)))","user":"5640b135e4b08d4f616f5ee8"},{"problem":44,"code":"#(let [s (split-at (mod %1 (count %2)) %2)]\n       (concat (second s) (first s)))","user":"55627de1e4b0c656e3ff17d9"},{"problem":44,"code":"(fn\n  [cnt xs]\n  (let [pos (mod cnt (count xs))\n        [head tail] (split-at pos xs)]\n    (concat tail head)))","user":"5c03e927e4b0bdcf453d167b"},{"problem":44,"code":"(fn [n coll]\n  (let [x (mod n (count coll))]\n    (concat (drop x coll) (take x coll))))","user":"5ac4d1f6e4b0e27600da7735"},{"code":"(fn [n coll] \n  (let [c (count coll)] \n    (take c (drop (mod n c) (cycle coll)))))","problem":44,"user":"50e7dd5de4b077ad597af36b"},{"problem":44,"code":"(fn [i coll]\n  (let [c (count coll)\n        m (mod i c)]\n    (take c (drop m (cycle coll)))))","user":"4e837808535db62dc21a62d9"},{"problem":44,"code":"(fn rotate [n list]\n  (let [n (mod n (count list))]\n    (->> (cycle list)\n         (take (+ n (count list)))\n         (drop n))))","user":"5fe5a64de4b05ac5b16ea187"},{"code":"#(take (count %2) (drop (mod %1 (count %2)) (cycle %2)))","problem":44,"user":"4e6a11ee535d8ccf87e9fe9f"},{"problem":44,"code":"#(apply concat \n        (reverse \n         (split-at \n          (mod %1 (count %2)) %2)))","user":"5c8025d6e4b0c8042a70ce11"},{"problem":44,"code":"(fn [n lst]\n  (let [step (mod n (count lst))]\n   (if (pos? step)\n    (concat\n   \t (drop step lst)\n     (take step lst))\n    (concat\n     (take-last (- step) lst)\n     (drop-last (- step) lst)))))","user":"572722c4e4b0c5bde472c134"},{"problem":44,"code":"(fn\n  [r l]\n  (apply concat (reverse (split-at (mod (- r (count l)) (count l)) l))))","user":"51d55598e4b01da06753aa8e"},{"code":"(fn [n c](let [m (mod n (count c))] (concat (drop m c) (take m c))))","problem":44,"user":"4fd29d7ce4b04c3a95aa0424"},{"code":"(fn [n coll]\n  (loop [i n in coll]\n    (println in)\n    (if (zero? i)\n      in\n      (do (if (neg? i)\n            (recur (+ i 1) (cons (last in) (butlast in)))\n            (recur (- i 1) (concat (rest in) [(first in)])))))))\n\n;;Much better solution\n;;#(let [n (mod % (count %2))]\n  ;;       (concat (drop n %2)\n    ;;             (take n %2)\n      ;;           ))","problem":44,"user":"52f07ccee4b05e3f0be25edf"},{"problem":44,"code":"(fn rotate-with-red\n [times mseq]\n (reduce (fn [coll val]\n          (if (pos? times)\n           (conj (vec (rest coll)) (first coll))\n           (cons (last coll) (butlast coll)))) mseq (range (Math/abs times))))","user":"5804b491e4b0a837a8b30cac"},{"problem":44,"code":"(fn [s lst]\n  (let [q (rem s (count lst))]\n    (if (> q 0)\n      (concat (drop q lst) (take q lst))\n      (concat (take-last (- q) lst) (drop-last (- q) lst)))))","user":"58b51e05e4b0ebc645576d4c"},{"code":"#(let [len (count %2) \n        n1 (if (> % 0) (mod % len) (- len (mod (- len %) len)))] \n    (into (vec (drop n1 %2)) (vec (take n1 %2))))","problem":44,"user":"510d3dc6e4b078ea71921132"},{"problem":44,"code":"(fn [n coll]\n    (let [n* (mod n (count coll))]\n      (concat (drop n* coll) (take n* coll))))","user":"5c987160e4b048ec896c5a82"},{"code":"(fn [inN inL]\">\" \n  (let [abs (if (< inN 0) (* -1 inN) inN)\n        car (if (< inN 0) last first)\n        cdr (if (< inN 0) butlast rest)\n        cat (if (< inN 0)\n              (fn [x y]\n                (println \"<\" (str x) (str y))\n                (concat  (list x) y))\n              (fn [x y]\n                (println \">\" (str x) (str y))\n                (concat  y (list x) )))]\n    (loop [l inL c abs]\n      (println (str l) c (str (car l)) (str (cdr l))) \n      (if (= 0 c)\n        l\n        (recur (cat (car l) (cdr l)) (dec c))))))","problem":44,"user":"52c81954e4b0c2d177d6212e"},{"code":"(fn [n x] (take (count x) (drop (mod n (count x)) (cycle x))))","problem":44,"user":"4f246938e4b0d66497709fec"},{"code":"(fn rotate [n col]                                                                                                                           \n  (let [m (mod n (count col))]                                                                                                               \n     (concat (drop m col) (take m col))))","problem":44,"user":"4f25c4c4e4b0d66497709ffc"},{"problem":44,"code":"(fn rotate-sequence [n coll]\n  (let [size (count coll)]\n    (if (>= n 0)\n      (take size (drop n (cycle coll)))\n      (recur (mod n size) coll))))","user":"53fd66a4e4b0de5c418485e3"},{"problem":44,"code":"(fn [d coll] \n  (let [n (count coll)]\n    (take n (drop (mod d n) (cycle coll)))))","user":"569d2283e4b0542e1f8d1474"},{"code":"(fn [n a]\n    (let [y (mod n (count a) )]\n      (concat (drop y a) (take y a) ) ) )","problem":44,"user":"51e28063e4b08e53a149f0f2"},{"code":"(fn [n coll]\n           (letfn [(f [] (lazy-cat coll (f)))]\n             (let [size (count coll)\n                   c (if (< n 0) (- size (mod (Math/abs n) size)) n)]\n               (take size (drop c (f))))))","problem":44,"user":"4fe900a6e4b0547ebccb243a"},{"code":"#(if (<= %1 0) (concat (take-last (mod (* -1 %1) (count %2)) %2) (drop-last (mod (* -1 %1) (count %2)) %2)) (concat (drop (mod %1 (count %2)) %2) (take (mod %1 (count %2)) %2)))","problem":44,"user":"51da52dbe4b02ceefd947763"},{"code":"#(let [cut (mod (if (pos? %) % (+ (count %2) %)) (count %2))\n       [lhs, rhs] (split-at cut %2)] (concat rhs lhs))","problem":44,"user":"5216933be4b000d124d989cf"},{"code":"(fn rotate\n  [x coll]\n  (if (= x 0)\n    coll\n    (if (< x 0)\n      (rotate (inc x) (concat [(last coll)] (butlast coll)))\n      (rotate (dec x) (concat (rest coll) [(first coll)])))))","problem":44,"user":"4fe89297e4b07c9f6fd12c4c"},{"code":"(fn [n s]\n    (let [len (count s)]\n      (take len (nthnext (cycle s) (mod n len)))))","problem":44,"user":"4ef667c4535dced4c769f24c"},{"code":"(fn [n coll] (take (count coll)(drop (mod n (count coll)) (cycle coll))))","problem":44,"user":"50310b8be4b05b7df5a0b84d"},{"code":"#(let [c (count %2) \n       n (mod (if (neg? %) (+ c %) %) c)]\n  (concat (drop n %2) (take n %2)))","problem":44,"user":"4e49badd535dc968683fc4c9"},{"problem":44,"code":"(fn [t c]\n       (let [tt (if (< t 0) (+ (count c) (rem t (count c))) (rem t (count c)))\n             [a b] (split-at tt c)]\n         (concat b a)))","user":"551e6526e4b030e6a24d00e8"},{"code":"#(let [n (mod %1 (count %2))\n       m (- (count %2) n)]\n   (concat (take-last m %2) (take n %2)))","problem":44,"user":"51f28a64e4b0210f90e7454e"},{"code":"#(cond \n  (= %1 0) %2\n  (< %1 0) (recur (inc %1) (cons (last %2) (butlast %2)))\n  :else (recur (dec %1) (conj (vec (rest %2)) (first %2))))","problem":44,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":44,"code":"(fn rotate-seq [n coll]\n  (let [to-drop (if (neg? n)\n                  (- (count coll) (mod (* -1 n) (count coll)))\n                  n)]\n    (->> (cycle coll)\n         (drop to-drop)\n         (take (count coll)))))","user":"55e1bb20e4b050e68259b41f"},{"code":"(fn [n c]\r\n  \t   (let [co (count c)\r\n\t\t\t     n (if (pos? n) (mod n co) (- (mod (Math/abs n) co)))\r\n\t\t\t     n (if (pos? n) n (+ (count c) n))]\r\n\t\t\t\t(print n)\r\n\t\t\t\t(concat (drop n c) (take n c))))","problem":44,"user":"4e89dbce535d3e98b8023283"},{"problem":44,"code":"(fn [n v]\n  (->> (concat v v)\n    (drop (mod n (count v)))\n    (take (count v))\n    )\n  )","user":"5a4443cae4b0447ef91cc60f"},{"problem":44,"code":"(fn [shift coll]\n   (let [shift-pos (fn [coll move]\n                     (let [mv (rem move (count coll))]\n                       (concat (drop mv coll) (take mv coll))\n                       )\n                     )\n         shift-for-neg (+ (count coll) (rem shift (count coll)))]\n     (if (pos? shift)\n       (shift-pos coll shift)\n       (shift-pos coll shift-for-neg)\n       )\n     )\n   )","user":"564ecc9ee4b0284900eef6a1"},{"problem":44,"code":"(fn ft [a c]\n  (let [cc (count c)\n        aa (cond\n             (and (< a 0) (> a (- 0 cc))) (+ cc a)\n             (> a cc) (- a cc)\n             (< a 0) (+ (* 2 cc) a)\n             :else a)]\n  (flatten (conj (take aa c) (drop aa c)))))","user":"4fe3338ee4b0e8f79898fea8"},{"problem":44,"code":"(fn [donde col] (let [[x y] (split-at (mod donde (count col)) col)] (into x (reverse y))))","user":"5517f5c5e4b06a49daca83c7"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [d (mod n (count coll))]\n    (concat (drop d coll) (take d coll))))","user":"54c3747de4b045293a27f60e"},{"problem":44,"code":"(fn [n xs]\n  (let [rot (mod n (count xs))]\n    (concat\n     (drop rot xs)\n     (take rot xs))))","user":"5561d2c2e4b0c656e3ff17cd"},{"code":"(fn [n coll]\n  (let [c (count coll)\n        n (loop [n n]\n            (cond\n             (<= 0 n c) n\n             (< n 0) (recur (+ n c))\n             (< c n) (recur (- n c))))]\n  \t(concat (drop n coll) (take n coll))))","problem":44,"user":"504f6721e4b0a02f9cffde7f"},{"code":"#(let [l (count %2)] (take l (drop (mod % l) (cycle %2))))","problem":44,"user":"4e9660ec535dbda64a6f6b44"},{"problem":44,"code":"(fn [r lst] \n  (let [shift (mod r (count lst))] \n    (concat (drop shift lst) (take shift lst))))","user":"545e7ab0e4b01be26fd7467c"},{"code":"#(let [n (mod %1 (count %2))]\n   (concat (drop n %2) (take n %2))\n)","problem":44,"user":"5176afd2e4b085adf681d889"},{"problem":44,"code":"(fn [n col] (let [x (mod n (count col))] (concat (drop x col) (take x col))))","user":"52d68ed2e4b09f7907dd1362"},{"code":"(fn rotate [n s]\r\n  (let [[a b] (split-at (mod n (count s)) s)]\r\n            (concat  b a)))","problem":44,"user":"4df1ce44535d08e6dec9fe1f"},{"problem":44,"code":"(fn [i s]\n  (let [my-index (mod i (count s))]\n    (concat (drop my-index s) (take my-index s))\n    )\n  )","user":"55d42f78e4b0e31453f64a73"},{"problem":44,"code":"(fn [i coll] (let [n (mod i (count coll))] (concat (drop n coll) (take n coll))))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":44,"code":"(fn rot [n s]\n  (if (= n 0) s\n    (if (pos? n) (if (> n (count s)) (rot (- n (count s)) s)\n                   (concat (nthrest s n) (take n s)))\n                   (if (< n (count s)) (rot (+ n (count s)) s)\n                     (concat (nthrest s (* n -1)) (take (* n -1) s))))))","user":"558378dce4b05c286339e115"},{"code":"(fn \n  [rotation input]\n  (loop [r rotation xs input]\n    (if (= r 0)\n      xs\n      (if (> r 0)\n        (recur (dec r) (let [r (rest xs) f (first xs)] (conj (vec r) f)))\n        (recur (inc r) (let [f (drop-last xs) l (last xs)] (conj f l)))\n        ))))","problem":44,"user":"4f85a75ce4b033992c121c48"},{"code":"(fn [n s]\n  (cond (= n 0) s\n        (< n 0) (recur (inc n) (cons (last s) (butlast s)))\n        (> n 0) (recur (dec n) (conj (vec (rest s)) (first s)))))","problem":44,"user":"4f8345c6e4b033992c121c1b"},{"problem":44,"code":"(fn rotate [n x] \n       (let [y (into [] x)] \n\t(cond \n         (< n 0)(rotate (inc n) (into [(last y)] (pop  y)))\n         (> n 0)(rotate (dec n) (conj  (into [] (rest  y))  (first  y))) \n         :else  y\n       )\n      ))","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":44,"code":"(fn [s xs]\n  (let [n (count xs)\n        s (mod s n)\n        left (drop s xs)\n        right (take s xs)\n        ys (concat left right)]\n    ys))","user":"5799ff45e4b05b1deef9add1"},{"code":"#(let [c (count %2) \n       n (mod (if (neg? %) (+ c %) %) c)]\n  (apply concat (reverse (split-at n %2))))","problem":44,"user":"4e1248b1535d04ed9115e7cf"},{"problem":44,"code":"#(let [c (count %2)]\n    (->> %2\n         cycle\n         (drop (mod % c))\n         (take c)))","user":"54236ce1e4b01498b1a71ad1"},{"problem":44,"code":"(fn f [n a] \n(cond (= n 0) a\n(> n 0) (f (dec n) (concat (rest a) (list (first a))))\n:else (f (+ (count a) n) a)\n))","user":"5f686436e4b02876ed9fd03c"},{"problem":44,"code":";; Obvious, slow (constant time?), but some practice w/ recursion\n\n(fn [in sq]\n  (loop [i in, s sq]\n    (if (zero? i)\n      s\n      (if (> i 0)\n        (recur (dec i) (vec (drop 1 (conj (vec s) (first s)))))\n        (recur (inc i) (conj (seq (pop (vec s))) (last s)))))))","user":"55810c73e4b05c286339e0f2"},{"code":"(fn [r l] \n  (let [r0 (rem r (count l))]\n   \t(if (pos? r0) \n    \t(concat (drop r0 l) (take r0 l))\n    \t(let [r1 (- (count l) (* r0 -1))]\n      \t(concat (drop r1 l) (take r1 l))))))","problem":44,"user":"533ee560e4b085b17e897d98"},{"problem":44,"code":"(fn [n s]\n  (let [c (->> s (count) (mod n))]\n    (apply concat ((juxt drop take) c s))))","user":"58b26da4e4b0ebc645576d0a"},{"code":"#(let [i (mod % (count %2))] (concat (drop i %2) (take i %2)))","problem":44,"user":"4e8f1ac6535d65386fec2146"},{"code":"(fn [n lis]\n  (loop [c 0 ret (vec lis) ]\n    (if (= n c)\n      ret\n\n      (if (> n 0)   \n     \n        (recur (inc c) (rest (conj  (vec ret) (first ret))))\n                 (recur (dec c) (drop-last (cons  (last ret) ret)))\n      )\n    )\n  )\n)","problem":44,"user":"513caa36e4b0b86ece9f3229"},{"code":"(fn [n xs]\n  (let [l (count xs)\n        m (mod n l)\n        k (if (neg? m) (+ l m) m)]\n  (take l (drop k (cycle xs)))))","problem":44,"user":"511f9625e4b085952a835362"},{"code":"(fn [n s] \n  (let [size (count s)\n        shift (if (< n 0) (+ size n) n)\n        mod-shift (mod shift size)]\n    (concat (drop mod-shift s) (take mod-shift s))))","problem":44,"user":"50a635bbe4b0aa96157e2621"},{"problem":44,"code":"#(let [cnt (count %2) h (mod %1 cnt) t (- cnt h)] (->> %2 (repeat 2) (mapcat identity) (drop h) (drop-last t)))","user":"5a3c5c54e4b001c08efc0ce3"},{"problem":44,"code":"(fn f\n   ([n coll]\n    (if-not (zero? (mod n (count coll)))\n      (recur (dec (mod n (count coll)))\n             (concat (rest coll) (take 1 coll)))\n      coll)))","user":"60537cd1e4b04c8f2157d152"},{"problem":44,"code":"#(let [l (count %2)\n       i (cond\n          (< %1 (* -1 l)) (+ l (mod l %1))\n          (> %1 l) (mod %1 l)\n          (< %1 0) (+ l %1)\n          :else %1)]\n   (take l (drop i (cycle %2))))","user":"555883c5e4b0deb715856e2d"},{"problem":44,"code":"(fn rotate [slots a-seq]\n  (if (= 0 slots)\n    a-seq\n    (if (< 0 slots)\n      (rotate (- slots 1) (conj (vec (rest a-seq)) (first a-seq)))\n      (rotate (+ slots 1) (cons (last a-seq) (vec (butlast a-seq)))))))","user":"5235493ee4b05e80434a5064"},{"code":"(fn my-rotate [n coll]\n  (let [c (count coll)\n        rot (mod n c)]\n    (concat (drop rot coll) (take rot coll))))","problem":44,"user":"4ec75077535d6d7199dd36e0"},{"problem":44,"code":"(fn [n v]\n  (->> v\n       (concat v)\n       (drop (mod n (count v)))\n       (take (count v))))","user":"5c51c930e4b0fb8c5ffd99ce"},{"code":"(fn [n s]   (let [l (split-at (mod n (count s)) s)]     (concat (second l) (first l))))","problem":44,"user":"4f954dbce4b0dcca54ed6ccd"},{"code":"(fn [n c]\n  (loop [\n         c c\n         n n\n         rotp (fn [coll]\n                (let [f (first coll) r (rest coll)]\n                  (concat r (list f))))\n         rotn (fn [coll]\n                (let [l (last coll) s (count coll) p (take (- s 1) coll)]\n                (concat (list l) p)))\n     \t  ]\n    (cond\n     (= n 0) c\n     (> n 0) (recur (rotp c) (dec n) rotp rotn)\n     (< n 0) (recur (rotn c) (inc n) rotp rotn))))","problem":44,"user":"511060fae4b04c71fce993f1"},{"problem":44,"code":"(fn [n s] (loop [pos 0 out []]\n             (if (= pos (count s))\n               out\n               (recur (inc pos) (conj out (nth s (mod (+ pos n) (count s)))))\n               )\n             )\n   )","user":"565233f2e4b0f9d632dd8461"},{"code":"#(let [s (count %2)\n       c (mod (+ s %1) s)]\n    (concat (drop c %2) (take c %2)))","problem":44,"user":"4db016af838c48654951d9b9"},{"code":"(fn [n ss]\n  ((fn [i rs]\n    (if (= i n) rs\n      (if (> n 0)\n        (recur (inc i) (conj (vec (rest rs)) (first rs)))\n        (recur (dec i) (cons (last rs) (butlast rs)))))) 0 ss))","problem":44,"user":"4f3242bae4b0d6649770a08f"},{"problem":44,"code":"(fn rote [direc alist]\n  (let [absfunc #(max % (- %))\n        absval (absfunc direc)\n        realdirec (if (>= absval (count alist))\n                          (if (= direc absval)\n                            (- direc (count alist))\n                            (+ direc (count alist)))\n                          direc)\n        realabs (absfunc realdirec)]\n    (if (> realdirec 0)\n      (concat (drop realabs alist) (drop-last (- (count alist) realabs) alist))\n      (concat (drop (- (count alist) realabs) alist) (drop-last realabs alist)))))","user":"5705e404e4b0b0fb43fd0676"},{"problem":44,"code":"(fn rotate [n xs]\n  (letfn [(rotate-right [x] (cons (last x) (butlast x))) \n          (rotate-left [x] (concat (drop 1 x) [(first x)]))]\n    (if (< n 0) \n      (last (take (* -1 (dec n)) (iterate rotate-right xs))) \n      (last (take (inc n) (iterate rotate-left xs))))))","user":"563c7f98e4b0bfe05bf11836"},{"code":"(fn [a b] \n  (let [f #(flatten (reverse (split-at (mod % (count b)) %2)))]\n    (if (> a 0)\n      (f a b)\n      (f (+ (count b) a) b))))","problem":44,"user":"4f0333f6535dcb61093f6a77"},{"code":"#(let [c (count %2) n (mod (+ c %) c)]\n   (concat (drop n %2) (take n %2)))","problem":44,"user":"517adc6ce4b0925c997201c4"},{"problem":44,"code":"(fn [n xs]\n    (let [\n        len (count xs)\n        i (mod n len)\n        ]\n        (concat (drop i xs) (take i xs))))","user":"5ea2e6bfe4b00a66d4a95197"},{"code":"#(take\n  (count %2)\n   (drop\n    (mod (- % (count %2)) (count %2))\n   (cycle %2)))","problem":44,"user":"4dbdc898535d020aff1edf4a"},{"code":"(fn [ n seqn]\r\n     (let [cnt (count seqn)\r\n           na (fn nega [m cnt] (if (neg? m) (nega (+ cnt m) cnt) m))]\r\n     (take cnt (drop (na n cnt) (cycle seqn)))))","problem":44,"user":"4e9fde3c535d7eef3080729b"},{"code":";;#(apply concat (reverse (split-at (mod % (count %2)) %2)))\n;;#(let [n (mod % (count %2))] (concat (drop n %2) (take n %2)))\n;;(fn [f n lst] `(~@(f drop n lst) ~@(f take n lst))) #(% (mod %2 (count %3)) %3)\n#(apply concat ((juxt drop take) (mod % (count %2)) %2))","problem":44,"user":"5281a445e4b0757a1b17143a"},{"code":"(fn [n s]\n  (let [m (mod n (count s))]\n    (concat (drop m s) (take m s))))","problem":44,"user":"52277ab9e4b0186687e23a4f"},{"code":"#(->> (split-at (mod % (count %2)) %2)\n      reverse\n      (apply concat))","problem":44,"user":"4e7db3b4535db169f9c796e1"},{"problem":44,"code":"#(nth (iterate (fn rotate [[h & tail]]\n  (concat tail (list h))) %2) (mod %1 (count %2)))","user":"5d2ca236e4b01671435dbc94"},{"problem":44,"code":"#(cond\n      (> % 0) (let [n (rem % (count %2))] (concat (drop n %2) (take n %2)))\n      :else (let [n (rem (- %) (count %2))] (concat (take-last n %2) (drop-last n %2))))","user":"59bdf0eae4b0a024fb6ae42e"},{"code":"#(let [c (count %2) s (mod % c) n (if (>= s 0) s (+ c s))] (concat (take-last (- c n) %2) (take n %2)))","problem":44,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":44,"code":"(fn [n coll] \n  (let [c (count coll)]\n    (take c (drop (mod n c) (cycle coll)))))","user":"5514a60fe4b055c2f668d4d7"},{"code":"(fn rotate [a b] (let [ [x y] \n  (split-at (mod a (count b)) b)] (concat y x)))","problem":44,"user":"504dff92e4b078edc5f5938a"},{"problem":44,"code":"(fn [a b] \n  (let [x (count b)]\n(concat (drop (mod a x) b) (take (mod a x) b))))","user":"54d70f40e4b0a52adc2e2027"},{"problem":44,"code":"(fn [x y] (let [rotate (fn [x y] (if (< x 0) \n   (reverse (concat (drop (* -1 x) (reverse y)) (take (* -1 x) (reverse y))))\n   (concat (drop x y) (take x y))\n   ))\n                 positive-x (if (< x 0) (* -1 x) x)]\n             (if (> positive-x (count y))\n               (rotate (rem x (count y)) y)\n               (rotate x y))))","user":"6093cc08e4b00e9e6653c3e1"},{"problem":44,"code":"(fn f [n sq]\n  (let [m (mod n (count sq))]\n    (concat (drop m sq) (take m sq))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"problem":44,"code":";(vec(\n#(let [p (mod %1 (count %2))]\n   (concat\n    (drop p %2)\n    (take p %2)))\n; -2 [1 2 3 4 5]))","user":"5e64ae6ce4b0fd0acd1586ac"},{"problem":44,"code":"(fn rotate [n sq]\n  (let [n (if (> 0 n)\n            (+ n (count sq))\n            n)\n        [end start] (split-at (mod n (count sq)) sq)]\n    (concat start end)))","user":"562add6de4b00e49c7cb4834"},{"problem":44,"code":"#(concat (take-last (- (count %2) (mod % (count %2))) %2) (take (mod % (count %2)) %2))","user":"5488537be4b0e286459a11cf"},{"problem":44,"code":"(fn [n0 lst0]\n  (letfn [(f [n lst]\n    (if (= n 0)\n      lst\n      (f (dec n)\n         (reverse (cons (first lst)\n                        (reverse (rest lst)))))))]\n    (if (< n0 0)\n      (reverse (f (- n0) (reverse lst0)))\n      (f n0 lst0))))","user":"5c62979fe4b0fca0c162264c"},{"problem":44,"code":"(fn [n coll] \n  (let [nn (rem n (count coll))]\n    (cond (> nn 0) (into (vec (drop nn coll)) (vec (take nn coll)))\n          (< nn 0) (into (vec (take-last (- nn) coll)) (vec (drop-last (- nn) coll)))\n          :else coll)))","user":"54361d92e4b032a45b8692f7"},{"problem":44,"code":"(fn f [n seq]\n  (let [\n    next-count (if (> n 0) dec inc)\n    next-seq (if (> n 0)\n      (fn [s] (concat (rest s) [(first s)]))\n      (fn [s] (concat [(last s)] (butlast s)))\n    )\n  ]\n  ((fn [i s]\n    (if (= i 0)\n    s\n    (recur (next-count i)(next-seq s)))) n (vec seq))\n  ))","user":"5681afaae4b0945ebc182a87"},{"problem":44,"code":"(fn shift [spots coll]\n  (let [diff     (mod spots (count coll) )]\n       (concat (drop diff coll) (take diff coll))\n  )\n)","user":"546692aee4b01be26fd746e7"},{"problem":44,"code":"(fn f [num l]\n  (if (> (Math/abs num) (count l))\n    (if (> num 0)\n      (f (- num 2) (f 2 l))\n      (f (+ num 2) (f -2 l)))\n  (if (> num 0)\n    (concat (drop num l) (take num l))\n    (let [front-slice (- (count l) (* num -1))]\n      (concat (drop front-slice l) (take front-slice l))))))","user":"506755b3e4b03d366d7cb2bc"},{"code":"(fn [shift tseq]\n  (for \n    [x (range (count tseq))]\n    (nth tseq (mod (+ shift x) (count tseq)))\n    )\n  )","problem":44,"user":"52213426e4b0e6a83c8925c4"},{"code":"(fn [n coll]\n  (let [m (mod n (count coll))\n        s (split-at m coll)]\n    (flatten (reverse s))))","problem":44,"user":"5300158ae4b0d8b024fd370f"},{"problem":44,"code":"(fn rotate [n s]\n  (if (= n 0) s\n    (if (< 0 n)\n      (rotate (- n 1) (concat (rest s) (list (first s))))\n      \n(rotate (+ 1 n) (concat (list (first (reverse s))) (reverse (rest (reverse s))))))\n\n  ))","user":"54c9e00be4b045293a27f683"},{"code":"#(let [f (if (< % 0) reverse identity)] (f (map (fn [_ v] v) %2 (drop (Math/abs %) (cycle (f %2))))))","problem":44,"user":"4e929dd0535dbda64a6f6b05"},{"problem":44,"code":"(fn [n xs]\n  (let [len (count xs)]\n  (take len\n        (drop (mod n len) (cycle xs))\n  ))\n)","user":"5bca2c71e4b07a9b28b100e7"},{"code":"#(let [p (mod %1 (count %2))] (concat (drop p %2) (take p %2)))","problem":44,"user":"4eab612d535d7eef30807316"},{"problem":44,"code":"(fn [n coll]\n   (let [n (if (neg? n)\n             (+ (count coll) n)\n             n)\n         n (mod n (count coll))]\n     (concat (drop n coll) (take n coll))))","user":"5a37b6dbe4b001c08efc0c88"},{"problem":44,"code":"(fn rotate [n s] \n  (let [l (count s) m (mod n l)]\n    (for [x (range m (+ m l))]\n      (nth s (mod x l)))))","user":"548a3dc6e4b0e286459a11f2"},{"code":"#(let [n (count %2)\n       x (mod (+ %1 n) n)] \n         (take n (drop x (cycle %2))))","problem":44,"user":"4eb01df4535d7eef30807337"},{"problem":44,"code":"(fn [n c]\n    (let [n' (mod n (count c))]\n        (concat (drop n' c) (take n' c))))","user":"57ae3345e4b0fbc9809a271e"},{"problem":44,"code":"(fn [n c]\n  (let [col (cycle c)\n        x (count c)]\n    (take x (drop (+ x (rem n x)) col))))","user":"54f14aa6e4b024c67c0cf8af"},{"code":"(fn [n c]\n   (let [m (mod n (count c))]\n     (concat (drop m c) (take m c))))","problem":44,"user":"52951156e4b02ebb4ef7501b"},{"problem":44,"code":"(fn [n l]\n  (let [len (count l)\n        r (rem n len)\n        nn (if (> n 0) r (+ len r))]\n    (concat (drop nn l) (take nn l))))","user":"55c20bd0e4b0e31453f64972"},{"problem":44,"code":"(fn [c s]\n  (let [ab (if (< c 0) (+ (count s) (rem c (count s))) c)]\n   (drop ab (take (+ ab (count s)) (cycle s)))\n  ))","user":"54227fc6e4b01498b1a71ac0"},{"problem":44,"code":"(fn f [n arr]\n  (let [x (rem n (count arr))]\n    (if (neg? n)\n      (->> (reverse arr) (f (* -1 n)) (reverse))\n      (concat (drop x arr) (take x arr)))))","user":"58b06b7ce4b0ebc645576cdc"},{"code":"(fn [n xs]\n  (let [c (count xs)\n        at (mod (+ n c) c)\n        xss (split-at at xs)\n        front (vec (first xss))\n        rear (vec (second xss))]\n    (into rear front)))","problem":44,"user":"50bd6033e4b0594b91591c66"},{"problem":44,"code":"(fn[pos xs] \n\t(concat (drop (mod pos (count xs)) xs) \n    \t\t(take (mod pos (count xs)) xs)))","user":"58c4492be4b021aa9917ed27"},{"code":"(fn rotate\n  [a b] (cond (< a 0) (rotate (inc a) (conj (butlast b) (last b)))\n              (> a 0) (rotate (dec a)\n                              (flatten (concat (vector (rest b) (first b)))))\n              (= a 0) b)\n  )","problem":44,"user":"4ff8aa3fe4b0678c553fc39e"},{"problem":44,"code":"(fn rotate\n  [pos v]\n  (cond (< pos 0) (rotate (+ pos (count v)) v)\n        (> pos (count v)) (rotate (- pos (count v)) v)\n        :else (concat (drop pos v) (take pos v))))","user":"58f98231e4b0438e51c2cf4c"},{"code":"(fn [x y]\n  (let [n (mod x (count y))]\n    (concat (drop n y) (take n y))\n    ))","problem":44,"user":"5201572be4b0d7096e99ddbb"},{"code":"(fn rotate- [distance coll]\n  \"44. Write a function which can rotate a sequence in either direction.\"\n  (let [d (mod distance (count coll))]\n    (if (pos? d)\n     (concat (drop d coll) (take d coll))\n     (concat (take-last (- d) coll) (take (+ (count coll) d) coll)))))","problem":44,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":44,"code":";(fn [n l]\n;  (let [num (if (neg? n) (- n) n)\n;        r (rem num (count l))]\n;    (if (neg? n)\n;      (concat (take-last r l) (drop-last r l))\n;      (concat (drop r l) (take r l)))))\n\n(fn [n l]\n  (let [num (mod n (count l))]\n    (apply concat ((juxt drop take) num l))))","user":"55236ad6e4b0882d96d091b1"},{"code":"( fn [index coll] \n  (let [\n    cutindex (mod index (count coll))\n    splitseq (split-at cutindex coll)\n  ] \n  (println \"cutindex\" cutindex  \"splitseq\" splitseq )\n   (-> splitseq(reverse)(flatten))\n   )\n  )","problem":44,"user":"5307e4ece4b02e82168697a9"},{"code":"#(let [n (mod % (count %2))]\n\t\t(concat (drop n %2) (take n %2)))","problem":44,"user":"508e13abe4b0f17d83ea26c7"},{"problem":44,"code":"#(let [n (count %2)]\n    (take n (drop (mod % n) (cycle %2))))","user":"5cdfe2aee4b0a17bb84e2b04"},{"problem":44,"code":"#( flatten ( reverse ( split-at (mod %1 (count %2) ) %2)))","user":"555093b2e4b00713264bd9ab"},{"problem":44,"code":"#(let [[x y] (split-at (mod % (count %2)) %2)]\r\n  (concat y x)\r\n)","user":"52b434c9e4b0c58976d9ad1c"},{"code":"(fn f [n x]\r\n    (if (= n 0) x\r\n    (if (< n 0)\r\n      (f (inc n) (concat [(first (reverse x))] (reverse (rest (reverse x)))))\r\n      (f (dec n) (concat (rest x) [(first x)])))))","problem":44,"user":"4fea08a9e4b0547ebccb2484"},{"problem":44,"code":"(fn\n  [x coll]\n  (let [n (mod x (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"53e3e852e4b036ad0777e407"},{"problem":44,"code":"(fn [n lst]\n  (let [m (mod n (count lst))\n        u (drop m lst)\n        v (take m lst)]\n    (concat u v)))","user":"5800edaae4b0a837a8b30c48"},{"problem":44,"code":"(fn [n coll]\n  (loop [i (Math/abs n) res coll] (if (= i 0) res \n                                      (recur (dec i)\n                                             (if (neg? n)\n                                               (conj (drop-last res) (last res))\n                                               (concat (rest res) (list (first res)))\n                                               )\n                                             )\n                                    ) \n    )\n  \n  )","user":"52a90056e4b0c58976d9ac39"},{"code":"(fn[a b] \n  (let [c (count b)]\n   (concat\n   (take-last (mod (- c a) c) b) \n   (take (mod a c) b)\n  ))\n)","problem":44,"user":"52ca720fe4b071a8d36bd3e2"},{"problem":44,"code":"(fn [k col]\n  (take (count col) (drop (mod k (count col)) (concat col col)))\n)","user":"5da20e73e4b000c986472be1"},{"code":"(fn [x xs]\n  (let [l (count xs)\n        n (if (< x 0) (if (> (* -1 x) l)\n                      (- l 1) \n                      (- l (* -1 x)))\n            x)\n        p (if (> n l) (rem n l) n)\n        first (take p xs)\n        last (drop p xs)]\n    (concat last first)))","problem":44,"user":"4ed60c9c535d10e5ff6f52dd"},{"code":"#(let [l (count %2)]\n    (take l (drop (+ l (rem % l)) (cycle %2))))","problem":44,"user":"4eb5750a535d7eef30807366"},{"problem":44,"code":"(fn [r coll]\n  (let [i (mod r (count coll))]\n    (concat (take-last (- (count coll) i) coll)\n            (take i coll))))","user":"5a0b9fc0e4b04bbd27e6d992"},{"problem":44,"code":"(fn rot-seq [qty lst]\n  (for [i (range qty (+ qty (count lst)) 1)]\n    (nth lst (mod i (count lst)))))","user":"55ed5a2de4b0121d4835fdd8"},{"problem":44,"code":"(fn [n coll] (last (take (inc (- (count coll) (mod n (count coll)))) (iterate #(conj (butlast %) (last %)) coll))))","user":"5b37a3b4e4b02d533a91bba9"},{"problem":44,"code":"(fn\n  [div lst]\n  (let [n (rem div (count lst))]\n    (if (> n 0)\n      (concat (drop n lst) (take n lst))\n      (concat (take-last (- n) lst) (drop-last (- n) lst)))))","user":"5576fee3e4b05c286339e078"},{"problem":44,"code":"(fn [n s]\n   (take (count s) (drop (if (pos? n)\n                           n\n                           (+ (count s) (Math/abs n) 1))\n                         (cycle s))))","user":"55895eade4b059ccff29b202"},{"problem":44,"code":"(fn rotate-seq [n coll]\n  (let \n    [reduce (rem n (count coll))\n     toPositive (if (pos? reduce) reduce (+ reduce (count coll)))]\n    (concat (drop toPositive coll) (take toPositive coll))))","user":"53f35c34e4b0742d9025b0f4"},{"problem":44,"code":"#(let [len (count %2)]\n   (->> %2\n       \tcycle\n        (drop (mod %1 len))\n        (take len)))","user":"58c7a80fe4b021aa9917ed7b"},{"code":"(fn a [n col] (take (count col) (drop (mod n (count col)) (cycle col))))","problem":44,"user":"527a8eb7e4b03e8d9a4a755f"},{"code":"(fn rotate\n  [n xs]\n  (let [n2 (mod \n            (if (> n 0) n (+ (count xs) n)) \n            (count xs))]\n    (concat (drop n2 xs) (take n2 xs))))","problem":44,"user":"4fab1ea1e4b081705acca210"},{"problem":44,"code":"(fn [r s] \n  (let [c (count s)]\n  \t(map #(nth s (mod (+ % r) c)) \n         (range c))))","user":"5148bcbee4b05514c84b7cc6"},{"code":"#(flatten (conj (vec (drop (mod % (count %2)) %2)) (take (mod % (count %2)) %2)))","problem":44,"user":"5230793be4b0035e815da383"},{"problem":44,"code":"(fn [r c]\n        (reverse\n            (reduce\n                #(conj\n                    %1\n                    (nth c (mod (+ %2 r) (count c))))\n                ()\n                (range (count c)))))","user":"5b083513e4b0cc2b61a3bdb4"},{"problem":44,"code":"(fn [delta v] (map (apply vector v) (map #(mod (+ delta %) (count v) ) (range (count v)))))","user":"56979bb7e4b0e0b3d3318cac"},{"problem":44,"code":"(fn[a b]  \n  (let [x (mod a (count b))] \n   (concat (drop x b) (take x b))\n   ))","user":"53ed2fafe4b0d648e757f4c1"},{"code":"#(last (take (if (neg? %1) (+ (count %2) (* %1 -1) 2) (inc %1)) (iterate (fn [x] (conj (vec (next x)) (first x))) %2)))","problem":44,"user":"5040edf4e4b0ff5d2cc40db5"},{"problem":44,"code":"(fn [n coll]\n  (concat (drop (mod n (count coll)) coll) (take (mod n (count coll)) coll)))","user":"602d5eade4b0d5df2af22279"},{"problem":44,"code":"(fn [num, sequence]\n  (let [fixed-num (mod num (count sequence))]\n    (map (partial nth sequence) (concat (range fixed-num (count sequence)) (range fixed-num)))\n    )\n  )","user":"60194b7ae4b0bf4ca6b1091f"},{"problem":44,"code":"(fn [n coll]\n  (take (count coll) (drop (mod n (count coll)) (concat coll coll))))","user":"59a72effe4b066c664927d94"},{"problem":44,"code":"(fn [i coll] (let [size (count coll) ,offset (mod i size)]  (take size (drop offset (cycle coll)  ))    ) )","user":"56a6051fe4b0542e1f8d14e5"},{"code":"#(take (count %2)\n         (drop (mod % (count %2))\n             (concat %2 %2)))","problem":44,"user":"52a88c4de4b0c58976d9ac30"},{"problem":44,"code":"(fn\n  [rot li]\n  (let\n   [a-rot (mod rot (count li))]\n   (concat\n    (drop a-rot li)\n    (take a-rot li))))","user":"586a657de4b0f14aab7c88bd"},{"problem":44,"code":"(fn rotate [n coll]\n    (let [c (count coll)\n          effective-n (mod (Math/abs n) c)\n          split-point (if (neg? n) (- c effective-n) effective-n)\n          splitted (split-at split-point coll)\n          swapped (reverse splitted)]\n      (flatten swapped)\n      )\n    )","user":"5535e822e4b09218d5f44fb2"},{"problem":44,"code":"(fn rotate[n xs] \n  (cond \n    (= 0 n) xs\n    (< 0 n) (recur (dec n) (concat (rest xs) (list (first xs))))\n    :else (recur (inc n) (concat (list (last xs)) (drop-last xs)))))","user":"5627d09ce4b00e49c7cb47db"},{"code":"(fn ([x c]\n  (let [y (mod x (count c))]\n       (concat (drop y c) (take y c)))))","problem":44,"user":"4e77c1db535d324fb2983d72"},{"problem":44,"code":"(fn shift [s,coll] (cond \n                    (zero? s) coll \n                    (pos? s) (shift (dec s) (flatten (list (rest coll) (first coll)))) \n                    (neg? s) (shift (inc s) (flatten (list (last coll) (drop-last coll))))\n                    )\n  )","user":"55c10409e4b01b9910ae2a2c"},{"code":"(fn rota[n ve] \n  (for [x (range (count ve)) :let [y (mod (+ x n) (count ve))]] (nth ve y))\n)","problem":44,"user":"4e9de526535dbda64a6f6b8e"},{"problem":44,"code":"(fn k [x y] (if (< x 0) (k (+ (count y) x) y) (if (> x (count y)) (k (-  x (count y)) y)( concat (nthrest y x) (take x y))  ))    )","user":"53fdc4b8e4b0de5c418485ea"},{"problem":44,"code":"(fn something-to-rotate\n  [x y]\n  (if (= x 0)\n    y\n    (if (> x 0)\n      (recur\n       (dec x)\n       (concat (drop 1 y) (take 1 y)))\n      (recur\n       (inc x)\n       (concat (drop (- (count y) 1) y) (take (- (count y) 1) y) )))))","user":"5c35acffe4b0d62ef62d9f62"},{"code":"#(reverse (loop [c (reverse %2)\n              n %1]\n             (cond \n              (zero? n) c\n              (> n 0) (recur (conj (butlast c) (last c)) (dec n))\n              (< n 0) (recur (reverse (conj (butlast (reverse c)) (first c))) (inc n)))))","problem":44,"user":"511b810ce4b07ab9ec456182"},{"problem":44,"code":"(fn [n l]\n    (take (count l) (drop (mod n (count l)) (cycle l))))","user":"4ff3113ae4b0678c553fc345"},{"code":"(fn [rot ls]\n  (let [offset (mod rot (count ls))]\n    (concat (drop offset ls) (take offset ls))))","problem":44,"user":"530b8580e4b02e82168697cc"},{"problem":44,"code":"(fn my-rot\n  [x coll]\n  (loop [x' x\n         coll' coll]\n    (if (= x' 0)\n      coll'\n      (if (> x' 0)\n        (recur (dec x') (concat (rest coll') [(first coll')]))\n        (recur (inc x') (concat [(last coll')] (butlast coll')))))))","user":"5c411df3e4b08cd430848ebf"},{"problem":44,"code":"(fn [x s]\n  (if (pos? x)\n    (take (count s) (nthnext (take (* (count s) 3) (cycle s)) x))\n    (take-last (count s) (drop-last (Math/abs x) (take (* (count s) 3) (cycle s))))))","user":"57d1a0e6e4b0bd073c20236d"},{"code":"(fn main [direction l] (if (= direction 0) l (apply main (if (< direction 0) (list (+ direction 1) (cons (last l) (butlast l)))     (list (- direction 1) (concat (next l) (list (first l))))))))","problem":44,"user":"4e351b47535deb9a81d77f2b"},{"code":"(fn [n ls]\n  (let [len (count ls)\n        start (mod n len)]\n    (take len (drop start (cycle ls)))))","problem":44,"user":"4ff769bce4b0678c553fc38f"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n              (concat (drop n %2)\n                      (take n %2)))","user":"54630e6be4b01be26fd746bc"},{"code":"(fn rotate [n xs]\n       (cond (= 0 n) xs\n       (> n 0) (rotate (dec n) (reverse (cons (first xs) (reverse (rest xs)))))\n\t     :default (rotate (inc n) (cons (last xs) (drop-last xs)))))","problem":44,"user":"4e49a7bb535dc968683fc4c6"},{"problem":44,"code":"(fn [n l]\n  (let [c (count l)]\n  (take c (drop (mod n c) (cycle l)))))","user":"539c88e1e4b0b51d73faaf2c"},{"problem":44,"code":"(fn [n s]\n  (let [shift (mod n (count s))]\n    (lazy-cat (drop shift s)\n              (take shift s))))","user":"5563b88be4b0c656e3ff17f5"},{"code":"(fn [nm xs]\n  (let [n (if (> nm 0) (mod nm (count xs)) (mod (+ (count xs) nm) (count xs)))]\n    (concat (nthnext xs n) (take n xs))))","problem":44,"user":"4e7f5a0b535db966e863cc41"},{"problem":44,"code":"(fn [n s]\n  (let [c (count s)\n        r (rem n c)\n        f #(if (neg? n) (+ c %) %)\n        m (cond\n           (< (- c) n c) (f n)\n           :else \t\t (f r))]\n    (concat (drop m s)\n            (take m s))))","user":"55995fa7e4b031d6649c9ba9"},{"problem":44,"code":"(fn [n s]\n  (->> s\n       (map list (range (count s)))\n       (map #(list (mod (- (first %) n) (count s)) (second %)))\n       (sort-by first)\n       (map second)))","user":"54734a0de4b0c51c1f4d727b"},{"code":"(fn rot [n, xs]\n  (let [\n        rotate-right (fn [xs]\n                       (concat (list (last xs)) (butlast xs)))\n        rotate-left (fn [xs]\n                      (concat (rest xs) (list (first xs))))\n        ]\n    (cond\n     (> n 0) (rot (- n 1) (rotate-left xs))\n     (< n 0) (rot (+ n 1) (rotate-right xs))\n     :else   xs\n    )\n  )\n)","problem":44,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn rotate [howmuch sq]\n  (cond\n    (= howmuch 0)\n      sq\n    (< howmuch 0)\n      (recur (inc howmuch) (concat (list (last sq)) (butlast sq)))\n    :else\n      (recur (dec howmuch) (concat (rest sq) (list (first sq))))))","problem":44,"user":"515737f0e4b0b0b4b87062d0"},{"problem":44,"code":"#(let [[l r] (split-at (mod %1 (count %2)) %2)] (concat r l))","user":"59368efbe4b02506e01a297d"},{"problem":44,"code":"(fn [dir coll] (let [n (mod dir (count coll))] (concat (drop n coll) (take n coll))))","user":"4e443201535dc968683fc4a7"},{"code":"(fn [offset coll]\n  (let [pt (mod offset (count coll))]\n    (concat (drop pt coll) (take pt coll))))","problem":44,"user":"50a2f901e4b029e8bace362a"},{"problem":44,"code":"(fn [rot coll]\n  (take (count coll)\n        (drop (mod rot (count coll)) (cycle coll))))","user":"5ce077e9e4b0a17bb84e2b0c"},{"problem":44,"code":"(fn [n coll]\n   (loop [i (if (neg? n)\n              (- (count coll) (mod (Math/abs n) (count coll)))\n              (mod n (count coll)))\n          c coll\n          t []]\n     (if (zero? i)\n       (concat c t)\n       (recur (dec i) (drop 1 c) (conj t (first c))))))","user":"56c60b36e4b05cc29241eead"},{"problem":44,"code":"(fn [r s] (let [n \t\t(mod r (count s))\n                right\t(take n s)\n                left\t(drop n s)]\n            (concat left right)))","user":"564127a9e4b08d4f616f5ef3"},{"code":"(fn [s xs] (let [s* (mod s (count xs))] (concat (drop s* xs) (take s* xs))))","problem":44,"user":"4f50d933e4b03ad3f0c10d11"},{"code":"(fn [num list]\n    (take (.size list) (drop (mod num (.size list)) (flatten (repeat 2 list)))))","problem":44,"user":"5038f8d2e4b088a6a14ca75f"},{"problem":44,"code":"#_(fn [n coll]\n  (take\n   (count coll)\n   (drop\n    (mod n (count coll))\n    (cycle coll))))\n\n(fn [n coll]\n  (let [splits (split-at (mod n (count coll)) coll)]\n    (concat (second splits) (first splits))))","user":"5564c113e4b0c656e3ff180d"},{"problem":44,"code":"(fn [n xs]\n  (let [n' (mod n (count xs))]\n    (concat\n     (drop n' xs)\n     (take n' xs))))","user":"5f2d6787e4b033932238a66d"},{"problem":44,"code":"(fn [x coll]\n  (let [shift-left (fn [coll counter]\n                     (if (= x counter)\n                       (seq coll)\n                       (recur (conj (vec (rest coll)) (first coll)) (inc counter))))\n        shift-right (fn [coll counter]\n                      (if (= x counter)\n                        coll\n                        (recur (conj (butlast coll) (last coll)) (dec counter))))]\n    (if (> x 0)\n      (shift-left coll 0)\n      (shift-right coll 0))))","user":"51a7fe50e4b08d8ec191b803"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (let [len (mod n (count coll))]\n    (concat (drop len coll) (take len coll))))","user":"5b82eec6e4b047b03b2037a4"},{"code":"(fn [n collection]\n  (take (count collection) (drop (mod n (count collection)) (cycle collection))))","problem":44,"user":"4e580746535d8a8b8723a28c"},{"code":"#(let [c (count %2),\n       n (cond (> % c) (- % c)\n               (< % (- 0 c)) (+ (* 2 c) %)\n               (> % 0) %\n               :else (+ c %))]\n   (concat (drop n %2) (take n %2)))","problem":44,"user":"52161db6e4b0bf4bffd29cb8"},{"problem":44,"code":"(fn [x s]\n   (let [cnt (count s)\n         a   (mod x cnt)]\n     (concat (drop a s)\n             (take a s))))","user":"54c23252e4b045293a27f5fc"},{"problem":44,"code":"(fn f [cnt xs]\n  (concat (drop (mod cnt (count xs)) xs) (take (mod cnt (count xs)) xs))\n  )","user":"5ea7b04de4b00a66d4a951b6"},{"problem":44,"code":"(fn [i col]\n   (->> col\n        (cycle)\n        (drop\n         (if (pos? i)\n           i\n           (- (count col) (dec i))))\n        (take (count col))))","user":"5976da27e4b01722bebd4ce3"},{"code":"(fn [r coll] \n  (let [q (mod r (count coll))] \n    (concat (drop q coll) (take q coll))))","problem":44,"user":"4fc67081e4b0ee37620e1813"},{"problem":44,"code":"(fn rotate [r coll]\n  (map #(nth coll (mod % (count coll))) (take (count coll) (iterate inc r)))\n)","user":"54b050cee4b09f271ff37d13"},{"code":"#(let [[c1 c2] (split-at (mod % (count %2)) %2)]\r\n    (concat c2 c1))","problem":44,"user":"4dd6d7ee535d2dad7130b5cb"},{"code":"(fn [n xs]\n  (let [k (if (< n 0) \n            (first \n              (filter\n                #(>= % 0) \n                (map #(+ n (* (count xs) %))\n                     (range))))\n            (first\n              (filter\n               \t#(< % (count xs))\n                (map #(+ n (* (count xs) (- %)))\n                     (range)))))]\n    (concat (drop k xs) (take k xs))))","problem":44,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":44,"code":"(fn [n sq]\n  (map\n    #(nth sq (mod (+ n %) (count sq)))\n    (range (count sq))))","user":"57300c19e4b0cd1946bd0fa1"},{"problem":44,"code":"(fn rotate-sequence [n xs]\n  (if (> n 0)\n    (let [m (mod n (count xs))]\n      (apply concat [(drop m xs) (take m xs)]))\n    (let [m (mod (- (dec n)) (count xs))]\n      (apply concat [(drop m xs) (take m xs)]))))","user":"518b8561e4b0f028e99addef"},{"code":"(fn [x coll]\n  (let [n (mod x (count coll))]\n    (concat (nthrest coll n) (take n coll))))","problem":44,"user":"5361a4f2e4b0243289761e47"},{"code":"(fn rotate [n sq] (if (>= n 0) (if (< n (count sq)) (concat (drop n sq) (take n sq)) (rotate (- n (count sq)) sq)) (rotate (+ (count sq) n) sq)))","problem":44,"user":"50fbdacfe4b0d10d794c19f0"},{"code":"(fn rot [n xs]\n  (let [m (mod n (count xs))]\n    (concat (drop m xs) (take m xs))))","problem":44,"user":"534941d1e4b084c2834f4a60"},{"code":"#(let [n (mod  %1 (count %2))] \n\t(concat (drop n %2) (take n %2))\n)","problem":44,"user":"51dd9370e4b0c33a4e1da40c"},{"code":"(fn rot [n coll]\n  (let [m (count coll)]\n    (map\n     #(nth coll (mod (+ n %1) m)) \n     (range 0 m))))","problem":44,"user":"50c8697ce4b00bb60fe0c53f"},{"code":"(fn [r xs]\n  (cond\n    (zero? r)\n      xs\n    (neg? r)\n      (recur (inc r) (concat (list (last xs)) (butlast xs)))\n    true\n      (recur (dec r) (concat (rest xs) (take 1 xs)))))","problem":44,"user":"4fa069c3e4b0dcca54ed6d4a"},{"code":"#(let [n (count %2) m (mod % n)] (concat (drop m %2) (take m %2)))","problem":44,"user":"51422945e4b0b50abeb46b2e"},{"code":"(fn [n coll]\r\n  (apply concat (reverse (split-at (mod n (count coll)) coll))))\r\n\r\n;(fn [n coll]\r\n;  (let [leng (count coll)]\r\n;    (take leng (drop (mod n leng) (cycle coll)))))","problem":44,"user":"4dd7d040535d2dad7130b5d6"},{"problem":44,"code":"(fn rotate [n col] \n  (if (= n 0)\n      col\n      (if (> n 0)\n          (rotate (- n 1) (concat (rest col) [(first col)]))\n          (rotate (- (+ 1 (count col)) n) col))))","user":"58a822e4e4b01a0c0b232950"},{"problem":44,"code":"(fn [x xs] (let [c (count xs)] (take c (drop (mod x c) (concat xs xs)))))","user":"522fdff7e4b032bbe342416c"},{"problem":44,"code":"(fn rot [n coll]\n   (->> coll\n        (map-indexed #(vector %1 %2))\n        (map (fn [[ind val]] [(mod (- ind n) (count coll)) val]))\n        (sort-by first)\n        (map last)\n ))","user":"53ed6976e4b0d648e757f4c4"},{"problem":44,"code":"(fn rotate-seq\n  [n coll]\n (take (count coll)(drop (mod n (count coll)) (cycle coll))))","user":"608c270ae4b03bd49d9f36b3"},{"code":"(fn [pos col]\n  (let [n     (count col)\n        start   (mod pos n)\n        new_col (take (* 2 n) (cycle col))]\n    (take n (drop start new_col))))","problem":44,"user":"531016d0e4b08068f379ecd1"},{"code":"#(apply concat ((juxt drop take) (mod %1 (count %2)) %2))","problem":44,"user":"4fa67030e4b081705acca1b7"},{"problem":44,"code":"(fn[n seq] (if (> n 0)\n              (flatten (list (drop (mod n (count seq)) seq) (take (mod n (count seq)) seq)))\n              (if (< n (-(count seq)))\n                (flatten (list (drop (mod n (count seq)) seq) (take (mod n (count seq)) seq)))\n                (flatten (list (drop (+ (count seq) n) seq) (take (+ (count seq) n) seq))))))","user":"5e4375e7e4b01d43a70e8e73"},{"problem":44,"code":"#(take \n  (count %2) \n  (drop \n   (mod %1 (count %2)) \n   (concat %2 %2)\n   ))","user":"56d80542e4b0ea9b8538f7e1"},{"problem":44,"code":"(fn [n coll]\n    (let [c (count coll)]\n      (take c (drop (+ c (mod n c)) (cycle coll)))))","user":"55d62a68e4b0e31453f64a96"},{"code":"(fn r [n s]\n  (let [q (mod n (count s))]\n    (concat (drop q s) (take q s))\n    )\n)","problem":44,"user":"51ba8f82e4b0fe3ecfb46434"},{"code":"#(let[c(count %2)d(mod % c)](take c(drop d(cycle %2))))","problem":44,"user":"5003ee7de4b0678c553fc446"},{"problem":44,"code":"(fn rotate\n  [d coll]\n  (->> coll\n       (cycle)\n       (drop (mod d (count coll)))\n       (take (count coll))))","user":"5b62ff3ce4b0c6492753e72a"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (when-let [s (seq coll)]\n    (let [c (count s)\n          x (mod n c)\n          ss (split-at x s)]\n      (concat (last ss) (first ss)))))","user":"4e586949535d8a8b8723a292"},{"problem":44,"code":"(fn[n s] (let [i (mod n (count s))] (concat (drop i s) (take i s))))","user":"56824e1be4b0945ebc182a91"},{"problem":44,"code":"#(loop [n %1 xs %2]\n   (cond\n    (= 0 n) xs\n    (< 0 n) (recur (dec n) (concat (rest xs) [(first xs)]))\n    :else (recur (+ (count xs) n) xs)))","user":"58cfbd7ae4b03c36ff7e58ba"},{"code":"(fn rotate [dirty-n l]\n  (cond (> dirty-n (count l)) (rotate (- dirty-n (count l)) l)\n        (< dirty-n 0) (rotate (+ (count l) dirty-n) l)\n        :else (let [n dirty-n]\n                (concat (last (split-at n l)) (first (split-at n l))))))","problem":44,"user":"51d49b75e4b013d740b70de6"},{"problem":44,"code":"(fn rotate [n lst]\n    (let [n (mod n (count lst))]\n         (concat (drop n lst) (take n lst))))","user":"546c1f73e4b00cfc9eacc175"},{"problem":44,"code":"(fn [off coll] \n    (take (count coll)\n      (map #((vec coll) (mod (+ off %) (count coll)))\n        (cycle (range (count coll))))))","user":"589e0024e4b02bd94d917e4e"},{"problem":44,"code":"(fn [n coll]\n  (let [item-count (count coll)\n        abs-n (max n (- n))\n        jumps (mod n item-count)]\n    (concat (drop jumps coll) (take jumps coll))))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":44,"code":"(fn [num, seq] \n  (let [adjust (mod num (count seq))\n        [start end] (split-at adjust seq)]\n    (concat end start)))","user":"578f9a18e4b0ebec4cfb7598"},{"problem":44,"code":"(fn [n l]\n  (let [list-len (count l)\n        n-normalized (mod n list-len)\n        n-final (if (< n-normalized 0) (+ n-normalized list-len) n-normalized)\n        [head tail] (split-at n-final l)]\n    (concat tail head)))","user":"571543bbe4b07c98581c3ad4"},{"problem":44,"code":"(fn [p s] (take (count s) (nthrest (cycle (seq s)) (+ (count s) (count s) p) )))","user":"53bcdd41e4b0d9a98559a6c0"},{"code":"(fn rotate [n sew] (let [c (count sew)\n                  pos (+ c (rem n c))\n                  ] (take c (drop pos (cycle sew))) ))","problem":44,"user":"4f320253e4b0d6649770a08d"},{"code":"(fn [n s] (for [i (range (count s))] ((vec s) (mod (+ i n) (count s)))))","problem":44,"user":"4e6e3a1e535d5021c1a89602"},{"code":"(fn [x y]\n  (cond\n   (> x (count y)) (flatten (list (rest y) (first y)))\n   (and (< x 0) (> (* -1 x) (count y))) (flatten (list (last y) (butlast y)))\n   (> x 0) (flatten (conj (take x y) (drop x y)))\n   (< x 0) (flatten (concat (take-last (* -1 x) y) (drop-last (* -1 x) y)))\n   :else nil))","problem":44,"user":"52474133e4b05ef8e38e635e"},{"code":"(fn [offset l]\n   (let [l   (vec l)\n         len (count l)]\n     (map (fn [i] (nth l (mod (+ i offset) len))) (range len))))","problem":44,"user":"4fc8c8d8e4b0ee37620e183b"},{"problem":44,"code":"(fn rotate\n        [step coll]\n        (let [step (if (> (Math/abs step) (count coll)) (mod step (count coll)) step)]\n          (if (pos? step)\n            (concat (take-last (- (count coll) step) coll) (take step coll))\n            (concat (take-last (- step) coll) (take (- (count coll) (- step)) coll))\n            )))","user":"52efd3d9e4b05e3f0be25ed4"},{"problem":44,"code":"(fn [n coll]\n  (->> (cycle coll)\n       (drop (+ (* (count coll)\n                   (Math/abs n))\n                n))\n       (take (count coll))))","user":"518279abe4b0353c468deb65"},{"problem":44,"code":"(fn [n coll]\n  (let [m (mod n (count coll))]\n      (concat (nthrest coll m) (take m coll))))","user":"53c1b787e4b00fb29b221266"},{"problem":44,"code":"#(flatten (concat ((juxt drop take) (mod % (count %2)) %2)))","user":"500e3238e4b068062f6e8d8f"},{"code":"(fn rotate-sequence [rotate-n to-rotate]\n  (let [rotate (rem rotate-n (count to-rotate))]\n    (if (> rotate 0)\n      (concat (drop rotate to-rotate) (take rotate to-rotate))\n      (concat (drop (+ (count to-rotate) rotate) to-rotate) (take (+ (count to-rotate) rotate) to-rotate)))))","problem":44,"user":"51d360d1e4b099f3b6acddff"},{"problem":44,"code":"#(let [id (mod %1 (count %2))] (concat (drop id %2) (take id %2)))","user":"554bced1e4b0a04f79299599"},{"code":"(fn [n s]\n   (let [n (if (neg? n) (+ (count s) n) n)\n         n (mod n (count s))]\n     (concat (drop n s) (take n s))))","problem":44,"user":"4ed188c8535d44c135fd68cf"},{"problem":44,"code":"(fn [n coll] \n  (->> \n   (split-at (mod n (count coll)) coll)\n   (apply #(concat %2 %1))))","user":"55d28b38e4b0e31453f64a58"},{"problem":44,"code":"(fn [v coll] (take (count coll) (drop (mod v (count coll)) (cycle coll))))","user":"575d16f8e4b02ea114799377"},{"code":"(fn rotleft [n v] \n ;;(if (> n 0))\n  (let [[left \n         right\n         ] (split-at (mod n (count v)) v)\n        r \n        (concat \n         right\n         left)]\n    r)\n  )","problem":44,"user":"50b09833e4b009df37c708bd"},{"problem":44,"code":"(fn rotate [n s] \n  (let [v (vec s) c (count v) i (mod n c)]\n    (concat (subvec v i) (subvec v 0 i))\n   ))","user":"5654e024e4b0f9d632dd848d"},{"code":"#(let [c (count %2)] (->> (cycle %2) (drop (mod % c)) (take c)))","problem":44,"user":"4e71da4d535d5021c1a89653"},{"problem":44,"code":"#( (fn [i] (concat (drop i %2) (take i %2))) (if (>= % 0) (rem % (count %2)) (- 1 (rem % (count %2))))  )","user":"54d7ed8de4b0a52adc2e2034"},{"code":"(fn [from items]\n    (let [[a b] (split-at (mod from (count items)) items)]\n      (concat b a)))","problem":44,"user":"52699a0ee4b03e8d9a4a71f2"},{"problem":44,"code":"#(loop [c %1\n        coll %2]\n   (cond\n      (zero? c)\n      coll\n    \n      (> c 0)\n\t  (recur (dec c) (conj (vec (rest coll)) (first coll)))\n    \n      (< c 0)\n      (recur (inc c) (conj (butlast coll) (last coll)))\n    ))\n\n#_(fn [a b] (conj '(4 5 1 2) 3))","user":"5b60e88be4b0c6492753e70b"},{"problem":44,"code":"(fn [n col] \n  (let [steps (mod n (count col))]\n    (concat (drop steps col) (take steps col))))","user":"563b5dc9e4b0bfe05bf1180f"},{"problem":44,"code":"(fn [n xs]\n    (cond (empty? xs) xs\n          (zero? (mod n (count xs))) xs\n          (pos? n) (let [offset (mod n (count xs))\n                         [a b] (split-at offset xs)]\n                     (into (vec b) (vec a)))\n          :else    (let [offset (inc (- (count xs) (mod n (count xs))))\n                         [a b] (split-at offset xs)]\n                     (into (vec b) (vec a)))))","user":"52485f02e4b05ef8e38e63d3"},{"problem":44,"code":"(fn [n ns]\n  (let [ct (count ns)\n        n-take (mod (if (< 0 n) n (+ ct n)) ct)]\n    (concat (drop n-take ns) (take n-take ns))))","user":"567d132ee4b05957ce8c61c3"},{"problem":44,"code":"(fn [n col]\n \t\t\t(take (count col) (drop (mod n (count col)) (cycle col))))","user":"57ee46c7e4b0bfb2137f5bb3"},{"problem":44,"code":"#(let [displacement (mod %1 (count %2))]\n    (concat (drop displacement %2) (take displacement %2)))","user":"5cd639b4e4b0ccb061962940"},{"problem":44,"code":"(fn sk-rotate [n x]\n  (take (count x)\n        (drop (mod n (count x))\n              (cycle x))))","user":"5884f377e4b0f1effa3b76a8"},{"problem":44,"code":"(fn [r col]\n  (let [rr (mod r (count col))]\n    (concat (drop rr col) (take rr col))))","user":"56102f50e4b05f002753df6b"},{"problem":44,"code":"(fn rotate [n coll]\n  (let \n    [len   (count coll)\n     n-mod (rem n len)\n     m     (if (> 0 n-mod)\n             (+ n-mod len)\n             n-mod)]\n    (let [[b a] (split-at m coll)]\n      (concat a b))))","user":"52dbd423e4b09f7907dd13c6"},{"code":"#(apply \n    concat\n    ((juxt drop take)\n     (mod %1 (count %2))\n     %2))","problem":44,"user":"5089ebfee4b03217b26a539f"},{"code":"(fn rotate [n s]\n  (let [nn (rem n (count s))]\n    (cond\n      (pos? nn) (concat (drop nn s) (take nn s))\n      :else (concat (take-last (* -1 nn) s) (drop-last (* -1 nn) s)))))\n\n\n;(fn [n xs]\n;  (let [i (mod n (count xs))]\n;    (concat (drop i xs) (take i xs)))","problem":44,"user":"4f849f76e4b033992c121c36"},{"problem":44,"code":"#(let [n (mod % (count %2))] \n   (concat (drop n %2) (take n %2)))","user":"56a76f36e4b07966d5a8a05b"},{"problem":44,"code":"(fn [n lst]\n  (concat\n    (drop (mod n (count lst)) lst) (take (mod n (count lst)) lst)))","user":"5a9a12d6e4b0d174b936c7b7"},{"problem":44,"code":"(fn rot [n coll]\n  (let [k (mod n (count coll))]\n    (concat (drop k coll) (take k coll))))","user":"53d78b64e4b0e771c3025466"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll) n (mod (if (even? n) n (+ c n)) c)]\n    (take c (drop n (cycle coll)))))","user":"5958cef6e4b066ee0a44af94"},{"problem":44,"code":"(fn rotate\n  [n xs]\n  (let [n (mod n (count xs))]\n    (concat (drop n xs) (take n xs))))","user":"5e952e17e4b0fbed045a3807"},{"code":"(fn rotatelist [index col]\n  (let [abs_i (mod index (count col))]\n    (map #(%1 1)\n      (apply concat\n        (reverse (partition-by #(< (dec abs_i) (%1 0))\n          (map-indexed #(vector %1 %2) col)))))))","problem":44,"user":"4f61be97e4b0defedf855fc5"},{"problem":44,"code":"(fn [p s]\n  (concat (drop (mod p (count s)) s)\n          (take (mod p (count s)) s))\n  )","user":"5a754d36e4b0512ff01cdac7"},{"problem":44,"code":"#(let [\n        f (if (< % 0)  take-last drop)\n        s (if (< % 0)  drop-last take)\n        n  (mod (Math/abs %) (count %2))]\n    (concat (f n %2) (s n %2)))","user":"534b57bbe4b084c2834f4a78"},{"code":"(fn [pos alist]\n  (if (> pos 0)\n    (loop [n pos, li alist]\n      (if (= n 0)\n        li \n        (recur (- n 1) (reverse(cons (first li) (reverse(rest li)))))))\n    (loop [n (* -1 pos), li alist]\n      (if (= n 0)\n        li \n        (recur (- n 1) (cons (first (reverse li)) (reverse(rest (reverse li)))))))))","problem":44,"user":"51e9a5d3e4b0f1f103a0d142"},{"code":"(fn rotate [n xs]\r\n  (if (< n 0)\r\n    (concat (reverse (take (- 0 (rem n (count xs))) (reverse xs))) \r\n         (take (- (count xs) (- 0 (rem n (count xs)))) xs))\r\n    (concat (reverse (take (- (count xs) (rem n (count xs))) (reverse xs)))\r\n         (take (rem n (count xs)) xs))))","problem":44,"user":"4e123905535d04ed9115e7ce"},{"code":"(fn [n s]\n  (let [s (into [] s)\n        cnt (count s)\n        n (mod n cnt)]\n  \t(if (>= n 0) (concat (subvec s n) (subvec s 0 n))\n    \t(concat (subvec s (+ cnt  n)) (subvec s 0 (+ cnt n)))\n    )\n  )\n)","problem":44,"user":"5081566ce4b0946d0443855b"},{"code":"(fn\n[dir l]\n  (let [n (mod dir (count l))]\n      (concat (drop n l) (take n l))))","problem":44,"user":"515efd01e4b02c55805ea238"},{"problem":44,"code":"(fn [n xs]\n  (let [size (count xs)\n        shift (mod n size)]\n    (concat (nthrest xs shift) (take shift xs))))","user":"567b4641e4b05957ce8c61a5"},{"problem":44,"code":"(fn [x lst]\n  (reverse ((fn f [n new old]\n    (if (= (count new) (count old))\n      new\n      (f (mod (+ n 1) (count old)) (conj new (nth old n)) old)))\n   (mod x (count lst)) '() lst)))","user":"5a74bf3ae4b0512ff01cdabd"},{"problem":44,"code":"(fn [n coll] (apply concat (rseq (split-at (mod n (count coll)) coll))))","user":"5f21d172e4b0f565ad998286"},{"problem":44,"code":"(fn [n lst] (let [m (mod (if (< n 0) (+ (count lst) n ) n) (count lst))] (concat (drop m lst) (take m lst))))","user":"5686e652e4b0dcc4269f4059"},{"problem":44,"code":"#(let [n (mod % (count %2))]\n             (concat (drop n %2) (take n %2)))","user":"59dfb8dbe4b08badc2a0c4da"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [n (mod n (count coll))]\n    (if (< n 0) \n      (concat (take-last (- n) coll) (take (+ (count coll) n) coll))\n      (concat (take-last (- (count coll) n) coll) (take n coll)))\n    )\n  )","user":"59837909e4b021a7a535fe16"},{"code":"(fn [n coll]\n  (cond\n    (< n 0)\n      (recur (inc n) (cons (last coll) (butlast coll)))\n    (> n 0)\n      (recur (dec n) (concat (rest coll) [(first coll)]))\n    :else\n      coll))","problem":44,"user":"52a1acb2e4b04e0c58e87bdb"},{"problem":44,"code":"(fn f [num coll]\n  (let [n* (rem num (count coll))]\n    (if (pos? n*)\n      (concat (drop n* coll) (take n* coll))\n      (concat (take-last (unchecked-negate n*) coll) (drop-last (unchecked-negate n*) coll))\n      )))","user":"583f2e4de4b089d5ab817dcb"},{"problem":44,"code":"(fn foo [n s]\n  (if (zero? n )\n    s\n    (if (> n 0) \n      (foo (dec n) (concat (rest s) (list (first s))))   \n      (foo (inc n) (concat (list (last s)) (butlast s))))))","user":"554edb85e4b00713264bd99a"},{"code":"(fn [n lst]\n     (let [k (mod n (count lst))]\n        (concat (drop k lst) (take k lst))))","problem":44,"user":"51f5539fe4b0abb92f97f9cd"},{"problem":44,"code":"(fn [rot col]\n  (let [abs-rot (if (neg? rot) (* -1 rot) rot)\n        real-rot (if (> abs-rot (count col))\n                   (- abs-rot (count col))\n                   abs-rot)\n        head (if (neg? rot)\n               (drop-last real-rot col)\n               (take real-rot col))\n        tail (if (neg? rot)\n               (-> (take-last real-rot col) (reverse))\n               (-> (drop real-rot col) (reverse)))]\n    (into head tail)))","user":"5146fd44e4b0d12420447958"},{"code":"(fn [n coll]\n  (if (>= n 0)\n    (take (count coll) (drop n (cycle coll)))\n    (take (count coll) (drop (+ (count coll) (rem n (count coll))) (cycle coll)))\n    ))","problem":44,"user":"51f40975e4b0fca5e8b4822e"},{"code":"(fn test [countt coll] \r\n (reduce concat (reverse (split-at (mod countt (count coll)) coll)))\r\n)","problem":44,"user":"51a7f74be4b08d8ec191b802"},{"code":"#(let [n (mod %1 (count %2))] \n  (concat (nthrest %2 n) (take n %2)))","problem":44,"user":"500900dee4b0144d4f561e42"},{"code":"(fn [n l] (let [d (mod n (count l))] \n  (lazy-cat (drop d l) (take d l))\n))","problem":44,"user":"4e9d6a65535dbda64a6f6b87"},{"code":"(fn rot [n s]\n  (cond\n    (zero? n) s\n    (> n 0) (recur (dec n) (conj (vec (rest s)) (first s)))\n    (< n 0) (recur (inc n) (cons (last s) (butlast s)))))","problem":44,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":44,"code":"(fn r [n coll]\n  (if (neg? n) \n    (->> coll reverse (r (- n)) reverse)\n    (let [n* (mod n (count coll))]\n      (concat (drop n* coll) (take n* coll)))))","user":"53dfdf01e4b0d874e779ae46"},{"problem":44,"code":"#(let [m (mod %1 (count %2))]\n   (concat (drop m %2) (take m %2)))","user":"542c22bde4b0dad94371f29e"},{"problem":44,"code":"(fn\n  [n coll]\n  (cond\n   (pos? n) (recur (dec n) (concat (rest coll) (take 1 coll)))\n   (neg? n) (recur (inc n) (cons (last coll) (drop-last coll)))\n   :else coll))","user":"542d2385e4b0dad94371f2b2"},{"problem":44,"code":"(fn rotate [n parts]\n\t(let [rotatefwd \n(fn rotatefwd [parts]\n\t(conj (apply vector (drop 1 parts)) (first parts))\n) \n          rotatebkwd\n(fn rotatebkwd [parts]\n\t(conj  (take (dec (count parts)) parts) (last parts))\n)\n          ]\n    \t(if (neg? n)\n          (loop [currnum 1  parts parts]\n            (if (= (* -1 currnum) n) \n             \t (rotatebkwd parts)\n              \t (recur (inc currnum) (rotatebkwd parts))\n            )\n          )\n          (loop [currnum 1  parts parts]\n            (if (= currnum n) \n             \t (rotatefwd parts)\n              \t (recur (inc currnum) (rotatefwd parts))\n            )\n          )\n        )  \n    )\n)\n;[1 2 3 4 5])","user":"579be21fe4b05b1deef9adff"},{"code":"(fn rotate [n xs]\n  (let [n (mod n (count xs))]\n    (concat (drop n xs)\n            (take n xs))))","problem":44,"user":"532ab0bde4b09d4e7a9b5527"},{"code":"(fn [n coll]\n\t(take (count coll) (drop (mod n (count coll)) (cycle coll))))","problem":44,"user":"51ca82e9e4b08b1cbd0d9488"},{"problem":44,"code":"(fn rot\n  [n coll] \n  (let [c (count coll)] \n    (take c (drop (mod n c) (cycle coll)))))","user":"4eeb8f68535d93acb0a668a9"},{"problem":44,"code":"(fn [n s]\n  (let [cnt (count s)]\n    (take cnt (drop (mod n cnt) (cycle s)))))","user":"4ee177dc535d10e5ff6f5359"},{"problem":44,"code":"(fn test41 [n seq1]\n  (letfn [(test40 [seq2]\n                   (reverse (conj (reverse (rest seq2)) (first seq2)))) ]\n   (if (neg? n)\n     (nth (iterate test40 seq1) (+ (count seq1) (+ n (count seq1))))\n     (nth (iterate test40 seq1) n))))","user":"5804d5afe4b0a837a8b30cad"},{"problem":44,"code":"(fn [x y]\n  (loop [s (count y) n 0 c x p ()]\n    (if (= s n)\n      (reverse p)\n      (recur\n       s\n       (inc n)\n       (mod (inc c) s)\n       (conj p (nth y (mod c s)))\n       )\n      )\n    )\n  )","user":"56d325ace4b0ea9b8538f7a9"},{"code":"(fn rs[n s]\n    (let [n1 (rem n (count s))\n\t       n1 (if (< n1 0) (+ (count s) n1) n1)]\n\t       (concat (drop n1 s) (take n1 s))))","problem":44,"user":"4e842ebb535db62dc21a62df"},{"problem":44,"code":"(fn [number items]\n  (let [limit (Math/abs number) pos (>= number 0)]\n    (loop [seq-items items current 0]\n      (if (= current limit)\n        seq-items\n        (recur (if pos\n                 (concat (rest seq-items) [(first seq-items)])\n                 (concat [(last seq-items)] (butlast seq-items))) \n               (inc current))))))","user":"57d9bca1e4b0bd073c202405"},{"code":"#(let [c (count %2) shift (mod %1 c)] (take c (drop shift (cycle %2))))","problem":44,"user":"4f089f1a535dcb61093f6c3c"},{"code":"(fn  [n x] (let [r (mod n (count x))] (concat (drop  r x) (take r x))))","problem":44,"user":"4dcc5aff535d5973398f9293"},{"problem":44,"code":"(fn rot [n sq]\n  (if (pos? n)\n    (take (count sq) (drop n (cycle sq)))\n    (reverse (take (count sq) (drop (* -1 n) (cycle (reverse sq))))))\n  )","user":"5fee18f2e4b05ac5b16ea1d2"},{"problem":44,"code":"(fn [number coll]\n  (let [num (mod number (count coll))]\n    (concat (drop num coll) (take num coll))))","user":"52cbe5dfe4b07d0d72b27352"},{"code":"(fn [n coll]\n  (let [s (mod n (count coll))]\n\t(concat (drop s coll) (take s coll))))","problem":44,"user":"501c1492e4b086d93747d180"},{"code":"#(let [c (count %2) n (last (range (mod % c) c c))]\n   (concat (drop n %2) (take n %2)))","problem":44,"user":"511ac2ede4b0c87c59c9670f"},{"problem":44,"code":"#( let [ length (count %2)\n         n (mod %1 length)]\n    (concat (drop n %2) (take n %2))\n   )","user":"55ec879ae4b0121d4835fdc8"},{"code":"(fn [n v] (let [n (mod n (count v))]\n            (concat (drop n v) (take n v))))","problem":44,"user":"534f13b2e4b084c2834f4ac4"},{"problem":44,"code":"(fn  [x sq]\n   (let [md (mod x (count sq))]\n      (concat (drop md sq) (take md sq))))","user":"581a5fdbe4b0e114eb51a002"},{"code":"(fn [x col]\n    (take (count col) (drop (+ (* (Math/abs x) (count col)) x) (cycle col))))","problem":44,"user":"524d90c0e4b0a16e35cf6ded"},{"code":"(fn [amt coll]\n  (if (= 0 amt)\n    coll\n    (if (< amt 0)\n      (recur (inc amt) (conj (seq (pop (vec coll))) (last coll)))\n      (recur (dec amt) (conj (vec (rest coll)) (first coll))))\n    )\n  )","problem":44,"user":"51b8e0dce4b050a1176cd69f"},{"problem":44,"code":"(fn [steps xs]\n  (if (zero? steps)\n    xs\n    (let [rotate-left? (pos? steps)]\n      (recur ((if rotate-left? dec inc) steps)\n             (if rotate-left?\n               (conj (vec (rest xs)) (first xs))\n               (cons (last xs) (butlast xs)))))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":44,"code":"#(let [c (count %2) n (rem %1 c) d (if (< n 0) (+ c n) n)] (concat (drop d %2) (take d %2)))","user":"56f9392ae4b07572ad1a88ac"},{"code":"(fn [n xs]\n  (let [z (mod n (count xs))]\n    (concat (drop z xs) (take z xs))))","problem":44,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":44,"code":"(fn [idx s]\n    (let [pos  (count s)]\n      (apply #(concat  %2 %)(split-at (mod idx pos) s))))","user":"4df9c598535d04ed9115e77a"},{"problem":44,"code":"(fn [n sqn] (vals (into (sorted-map) (zipmap (map #(rem % (count sqn)) (range (- (* 100 (count sqn)) n) (+ (- (* 100 (count sqn)) n) (count sqn)))) sqn))))","user":"5888b75fe4b0f1effa3b771b"},{"problem":44,"code":"(fn [n xs]\n  (let [c (count xs)]\n    (loop [n n]\n      (if (neg? n)\n        (recur (+ c n))\n        (take c (drop n (cycle xs)))))))","user":"5724a4dae4b0c5bde472c0fe"},{"problem":44,"code":"(fn r\n  [n seq]\n  (if (> n 0)\n    (concat (drop (rem n (count seq)) seq) (take (rem n (count seq)) seq))\n    (r (+ (count seq) (rem n (count seq))) seq))\n  )","user":"5772ddb0e4b0979f896515d4"},{"problem":44,"code":"(fn \n  [n coll]\n  (take (count coll)\n        (drop (mod n (count coll)) (cycle coll))))","user":"5a34de78e4b0ddc586f153d0"},{"problem":44,"code":"(fn rotate [n coll]\n  (letfn [(rotate-left [n coll]\n            (->> (split-at n coll)\n                 (reverse)\n                 (apply concat)))]\n    (if (pos? n)\n      (rotate-left (rem n (count coll)) coll)\n      (rotate-left (+ (count coll) (rem n (count coll))) coll))))","user":"5776e21de4b0979f89651642"},{"problem":44,"code":"(fn [x y]\n  (loop [coll y\n         rotator ((fn [r]\n           \t\t\t(loop [rot r]\n                      (if (pos? rot)\n                        rot\n                        (recur (+ (count y) rot))))) (- x (count y)))\n         counter 0\n         result y]\n    (if (= rotator counter)\n      result\n      (recur\n       (rest coll)\n       rotator\n       (inc counter)\n       (concat (drop 1 result) (vector (first coll)))))))","user":"57344edbe4b0cd1946bd1008"},{"problem":44,"code":"(fn [n s]\n  (loop [rs s\n         i n]\n    (cond\n     (> i 0) (recur\n              (concat (drop 1 rs) (list(first rs)))\n              (dec i))\n     (< i 0) (recur\n              (conj (drop-last rs) (last rs))\n              (inc i))\n     (= i 0) rs)))","user":"5571d6e5e4b09a3098a5253f"},{"code":"(fn f[n coll]\r\n  (cond\r\n    (zero? n) coll\r\n    (> n 0)  (f (dec n) (concat (rest coll) (list (first coll))))\r\n    :else    (f (inc n) (cons (last coll) (butlast coll)))))","problem":44,"user":"4e53bf5e535d8a8b8723a275"},{"problem":44,"code":"(fn [number coll] (let [number (rem number (count coll))]\n   (if (pos? number) \n     (concat (nth (iterate rest coll) number)(take number coll))\n     (concat (nth (iterate rest coll)(- (count coll) (- number))) (take (- (count coll) (- number)) coll)))))","user":"54e4edcae4b024c67c0cf7f3"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n   (concat\n     (drop n %2) (take n %2)))","user":"56f9982ce4b07572ad1a88b8"},{"code":"#(let [c (count %2)]\n  (take c (drop (mod % c) (flatten (repeat %2)))))","problem":44,"user":"4f38b7d9e4b0e243712b1ee0"},{"problem":44,"code":"(fn [n col]\n  (let [tc (count col) i (rem n tc)] \n    (if (pos? i) \n      (concat (nthnext col i) (take i col)) \n      (concat (nthnext col (+ tc i))   (take (+ tc i) col)))))","user":"5243e37ae4b076204b44fae3"},{"code":"(fn [r xs] (let [s (mod r (count xs))] (concat (drop s xs) (take s xs))))","problem":44,"user":"503d129fe4b06c4e0e1fa254"},{"problem":44,"code":"(fn rotseq\n  [n coll]\n  (cond\n    (neg? n) (rotseq (inc n) (concat (list (last coll)) (butlast coll)))\n    (pos? n) (rotseq (dec n) (concat (rest coll) (list (first coll))))\n    (zero? n) coll))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":44,"code":"(fn m2 [n coll]\n  (if (< n 0)\n    (m2 (+ n (count coll)) coll)\n    (if (= n 0)\n      coll\n      (let [f (first coll)]\n        (recur (dec n) (conj (vec (rest coll)) f))))))","user":"54f9c4dfe4b01ecee9d88841"},{"problem":44,"code":"( fn rot [ n coll ]\n  ( cond ( = n 0 ) coll\n    \t ( < n 0 ) ( reverse ( rot ( * -1 n ) ( reverse coll ) ) )\n    \t :else\n    \t\t\t( let [ x ( mod n ( count coll ) ) ]\n                  ( concat ( drop x coll ) ( take x coll ) )\n                )\n  )\n)","user":"57561529e4b02ea1147992d3"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [len (count coll)]\n    (take len (drop (+ len (rem n len)) (cycle coll)))))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":44,"code":"(fn [x l] (let [i (mod x (count l))] (concat (drop i l) (take i l))))","user":"565131b3e4b0f29ec07d2e88"},{"code":"#(flatten\n  (reverse (split-at \n            (mod %1 \n                 (count %2))\n            %2)))","problem":44,"user":"5354bb38e4b084c2834f4b0a"},{"problem":44,"code":"(fn [direction sequence]\n  ((fn my-rotate [result count1 rest1]\n     (if (empty? rest1)\n       result\n       (if (= count1 0)\n         (concat rest1 (reverse result))\n         (if (> count1 0)\n           (my-rotate (conj result (first rest1))\n                      (- count1 1)\n                      (rest rest1))\n           (reverse (my-rotate result (- 0 count1) (reverse rest1)))))))\n   '() (rem direction (count sequence)) sequence))","user":"58637f03e4b0f14aab7c881e"},{"code":"#(->> %2\n  (split-at (mod %1 (count %2)))\n  reverse\n  (apply concat)\n)","problem":44,"user":"4ece7617535d23f03622770c"},{"code":"(fn [t col]\n  (loop [cnt 0 re col]\n    (if (= cnt t)\n      re\n      (recur (if (> t 0) (+ cnt 1) (- cnt 1))\n        (if (> t 0) \n          (let [f (first re) c (reverse (rest re))]\n            (reverse (cons f c))\n            )\n          (let [l (last re) c (reverse (rest (reverse re)))]\n            (cons l c)\n          )\n        )\n      )\n    )\n  )\n)","problem":44,"user":"4db7da66535d1e037afb2187"},{"code":"(fn rotate [n col]\n      (flatten\n        (cons\n          (rest (split-at (mod n (count col)) col))\n          (first (split-at (mod n (count col)) col))))\n)","problem":44,"user":"4fb7b80ae4b081705acca2d4"},{"problem":44,"code":"(fn\n  [n xs]\n  (let [n (if (neg? n) (+ (count xs) n) n)]\n    (if (zero? n)\n      xs\n      (recur (dec n) (concat (rest xs) [(first xs)])))))","user":"507e68abe4b085af06e3afd2"},{"code":"(fn [n s] \n  (let [c (count s) v (rem (+ (* c (max (- n) n)) n) c)]\n    (concat (drop v s) (take v s))))","problem":44,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":44,"code":"(fn pia [n v]\n (take (count v)\n    (drop (mod n (count v))\n      (concat v v))))","user":"569ce6fee4b0542e1f8d146c"},{"code":"(fn [n xs]\n  (let [r (mod n (count xs))\n        [ys zs] (split-at r xs)]\n    (concat zs ys)))","problem":44,"user":"511442d0e4b0e9c109bb74d5"},{"problem":44,"code":"(fn [rotate input] \n  (let \n    [\n      size (count input)\n      shift (mod (+ size rotate) size)\n      front (take shift input)\n      back (drop shift input)\n    ]\n    (concat back front)\n  )\n)","user":"59021fede4b0438e51c2d04d"},{"problem":44,"code":"#(let [shift (mod %1 (count %2))]\n       (concat (nthrest %2 shift) (take shift %2)))","user":"57650419e4b0994c1922fc09"},{"code":"(fn rotate [by lst]\n  (cond\n    (zero? by) lst\n    (neg? by) (recur\n      (inc by)\n      (cons\n        (last lst)\n        (butlast lst)))\n    :else (recur\n      (dec by)\n      (concat\n        (rest lst)\n        (list\n          (first lst)\n)))))","problem":44,"user":"4e356d2b535deb9a81d77f2d"},{"code":"(fn rotate[n seq]\n  (let [n (mod n (count seq))]\n    (concat (drop n seq) (take n seq))))","problem":44,"user":"525d490ae4b0cb4875a45d70"},{"problem":44,"code":"(fn [orig-amt src]\n  (let [amt (mod orig-amt (count src))]\n    (concat (drop amt src) (take amt src))))","user":"56041883e4b0c80df0ca2655"},{"code":"(fn f [i,s]\n  (let [len (count s) n (mod i len)]\n    (concat ((fn g [j,t]\n      (if (= 0 j) t (g (dec j) (rest t)))) n s) (take n s))))","problem":44,"user":"4e8b98fc535d65386fec2124"},{"problem":44,"code":"#(let [k (mod %1 (count %2))]\n   (concat (drop k %2) (take k %2)))","user":"5ed9c2cde4b0c7845d86b0e4"},{"problem":44,"code":"(fn rotate [n lst]\n  (let [lstCount (count lst)\n        stretch (mod n lstCount)]\n        (->> (take (+ lstCount stretch) (cycle lst))\n          (drop stretch)\n          (take lstCount))))","user":"5b02ab12e4b0cc2b61a3bd53"},{"code":"(fn [n s]\n  (let [ sz (count s)\n         i (mod n sz)]\n    (take sz (drop i (cycle s)))))","problem":44,"user":"5003deb9e4b0678c553fc445"},{"problem":44,"code":"(fn rotate [n l]\n  (if\n    (< n 0)\n    (reverse (rotate (- 0 n) (reverse l)))\n    (if\n      (= n 0)\n      l\n      (rotate (- n 1) (concat (rest l) [(first l)]))\n    )\n   )\n)","user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn [n coll]\n  (let [r (mod n (count coll))]\n    (concat (drop r coll) (take r coll))))","problem":44,"user":"51d08d67e4b067c365486351"},{"problem":44,"code":"(fn f [x y] (cond\n    (< x 0) (f (inc x) (concat (list (last y)) (butlast y))  ) \n    (> x 0) (f (dec x) (concat (next y) (list (first y))) )\n    :else y))","user":"593dfe60e4b069cdc2982bb1"},{"problem":44,"code":"#(flatten (conj (take (mod %1 (count %2)) %2) (drop (mod %1 (count %2)) %2)))","user":"5756f7d7e4b02ea1147992e9"},{"code":"(fn [n s ] (letfn [( taken [n s ] \n\t(if (< n 0) (taken (+ n (count s)) s)\n\t\t (if (< n (count s)) [(take n s ) (drop n s)]\n\t\t \t(taken (- n (count s ) ) s))\n\t))] (flatten (reverse (taken n s)))))","problem":44,"user":"518644bce4b0da5a5be3baca"},{"problem":44,"code":"(fn k[n s](let[r (mod n (count s))](concat (drop r s) (take r s))))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":44,"code":"(fn __ [n xs]\n  (letfn [(f [n max]\n             (cond\n               (< n 0) (f (+ n max) max)\n               (> n max) (f (- n max) max)\n               :else n))]\n    (concat\n     (nthrest xs (f n (count xs)))\n     (take (f n (count xs)) xs))))","user":"526759b3e4b03e8d9a4a715b"},{"code":"(fn [i coll] (let [m (count coll)\n                   j (mod i m)\n                   [a b] (split-at j coll)]\n              (concat b a)))","problem":44,"user":"4f65eec7e4b07046d9f4ef48"},{"problem":44,"code":"(fn rotate\n  [n arr]\n  (letfn [(rot-help [n arr]\n            (let [tail (take n arr)\n                  head (drop n arr)]\n              (concat head tail)))]\n    (if (> n 0)\n      (rot-help (mod n\n                     (count arr))\n                arr)\n      (reverse (rot-help (mod (- n)\n                             (count arr))\n                        (reverse arr))))))","user":"59636b6de4b066ee0a44b0c6"},{"problem":44,"code":"(fn f [n coll]\n  (let [dim (count coll)]\n    (cond (> n dim) (f (- n dim) coll)\n          (< n 0) (f (+ n dim) coll)\n          :else (->> coll\n                     (repeat 2)\n                     (flatten)\n                     (drop n)\n                     (take dim)))))\n          \n          ;(drop n (take dim (repeat cycle coll))))))","user":"5f90aeefe4b0715f5002d799"},{"code":"(fn [n l] \n  (let [nn (mod n (count l)) \n        newn (if (< nn 0) (+ nn (count l)) nn) \n        lst (split-at newn l)] \n  (concat (second lst) (first lst))))","problem":44,"user":"4f2f6678e4b0d6649770a06e"},{"problem":44,"code":"(fn [x xs]\n  (let [len (count xs)]\n    (take len (nthrest (cycle xs) (mod x len)))))","user":"5d321852e4b01671435dbce8"},{"problem":44,"code":"(fn [positions seq]\n    (let [length (count seq)\n          offset (mod positions length)]\n      (drop offset (take (+ length offset)\n                         (cycle seq)))))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":44,"code":"#(let [n %1\n       coll %2\n       length (count coll)]\n   (take length (drop (mod n length) (cycle coll))))","user":"55e2f502e4b050e68259b43c"},{"code":"(fn [n xs]\n  (let [m (loop [nn n]\n            (if (neg? nn) (recur (+ (count xs) nn))\n                (mod nn (count xs))))]\n    (concat (drop m xs) (take m xs))))","problem":44,"user":"4ee82ce9535d93acb0a6687a"},{"problem":44,"code":"(fn rotate-44 [x coll]\n  (let [length (count coll)\n        offset  (+ length (mod x length))]\n    (drop (- offset length) (take offset (cycle coll)))))","user":"5628f727e4b00e49c7cb47f5"},{"problem":44,"code":"#(let [xs %2, n (mod %1 (count xs))]\n\t(concat (drop n xs) (take n xs)))","user":"556f35fee4b09a3098a5251a"},{"code":"#(concat (drop (mod %1 (count %2)) %2) (take (mod %1 (count %2)) %2))","problem":44,"user":"502a5e59e4b09e8f859a9fbc"},{"code":"#(let [abn (Math/abs %) c (count %2) an (if (> abn c) (- abn c) abn) n (if (< % 0) (- (count %2) an) an)] (concat (drop n %2) (take n %2)))","problem":44,"user":"523b1a65e4b02f719975bdbd"},{"problem":44,"code":"(fn [x coll]\n  (let [first-part (nthnext coll (mod x (count coll)))\n        second-part (reduce #(concat %1 (list %2))\n                            ()\n                            (map #(nth coll %) (range (mod x (count coll)))))]\n    (concat first-part second-part)))","user":"5fea32f3e4b05ac5b16ea1aa"},{"problem":44,"code":"(fn [n xs]\n  (let [[head tail]\n        (split-at (mod n (count xs)) xs)]\n    (concat tail head)))","user":"5a95c639e4b0d174b936c75e"},{"problem":44,"code":"(fn rotn [n coll]\n  (let [s (count coll)\n        s1 (if (or (pos? n) (> s (Math/abs n)))\n             (+ n s)\n             (let [n1 (int (/ (Math/abs n) s))]\n               (- (* (inc n1) s) (Math/abs n))))]\n    (take s (drop s1 (cycle coll)))))","user":"54f4adc8e4b0f2f3c5226e86"},{"code":"(fn rotate [x s]\n    (let [ l (count s) \n          d (mod x l)\n          hl (drop d s)\n          tl (take d s)\n        ]\n    (concat hl tl)))","problem":44,"user":"51f59607e4b0abb92f97f9d5"},{"problem":44,"code":"(fn [n coll]\n  (flatten\n   ((juxt drop take) (mod n (count coll))\n    coll)))","user":"5a9181c5e4b002d099cae6f6"},{"problem":44,"code":"(fn rotate-seq\n  [n sqs]\n  (let [factor (if (pos? n) (mod  n (count sqs)) (mod (+ (count sqs) n) (count sqs)))\n        [p1 p2] (split-at factor sqs)]\n\n    (concat p2 p1)))","user":"5c44f0fde4b0e06e1360a384"},{"code":"(fn\r\n    [n coll]\r\n    (let [l (apply list coll)\r\n          c (count l)\r\n          m (first\r\n              (remove\r\n                #(< % 0) \r\n                (iterate \r\n                  #(+ % c) \r\n                  (+ c n))))]\r\n      (take c (drop m (cycle l)))))","problem":44,"user":"4f410b63e4b0e243712b1fc5"},{"code":"(fn \n  [i v] \n   (let [nv (count v)\n         n (mod (+ nv i) nv)\n         r (concat \n         (drop n v)    \n         (take n v))\n  ] r))","problem":44,"user":"4f148418535d64f60314643a"},{"code":"#(flatten (reverse (split-at (mod % (count %2)) %2)))","problem":44,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn rotate\n  [n xs]\n  (let [n-rem (rem n (count xs))\n        r (if (neg? n-rem) (+ (count xs) n-rem) n-rem)]\n    (concat (drop r xs) (take r xs))))","problem":44,"user":"52d95491e4b09f7907dd13a4"},{"problem":44,"code":"(fn rot [n s]\n  (let [l (count s)\n        m (mod n l)]\n    (concat (drop m s) (take m s) )\n    )\n  )","user":"58d28c70e4b03c36ff7e5901"},{"problem":44,"code":"(fn [n coll] (if (pos? n) \n               (take-last (count coll) (flatten (conj (vec coll) (take (mod n (count coll)) coll)))) \n               (take (count coll) (flatten (conj  (seq coll) (take-last (mod (java.lang.Math/abs n) (count coll)) coll))))))","user":"5b445421e4b02d533a91bc40"},{"problem":44,"code":"(fn [r sq]\n  (let [n (mod r (count sq))]\n    (concat\n     (drop n sq)\n     (take n sq))))","user":"56fee4c0e4b08d47c97781b5"},{"problem":44,"code":"(fn [n s]\n      (let [n* (rem n (count s))]\n        (if (pos? n*)\n          (concat (drop n* s) (take n* s))\n          (concat (take-last (unchecked-negate n*) s) (drop-last (unchecked-negate n*) s)))))","user":"5d4c4de9e4b0776584bd6f2f"},{"code":"#(take (count %2) (drop (mod % (count %2)) (cycle %2)))","problem":44,"user":"4e7115b3535d5021c1a89647"},{"code":"(fn rotate\n   [num list-val]\n   (cond\n    (< 0 num) (rotate\n               (- num 1)\n               (concat (rest list-val) [(first list-val)]))\n    (> 0 num) (rotate\n               (+ num 1)\n               (concat [(last list-val)] (drop-last list-val)))\n    :else list-val))","problem":44,"user":"4f03818e535dcb61093f6b00"},{"problem":44,"code":"#(let [c (count %2)\n       n (mod (if (neg? %1) (+ c %1) %1) c)\n       [a b] (split-at n %2)]\n  (concat b a))","user":"4fb1d7ace4b081705acca281"},{"problem":44,"code":"(fn [n xs]\n  (\n    let [\n      length (count xs)\n      i (mod (+ length n) length)\n    ]\n    (->> xs cycle (drop i) (take length))\n  )\n)","user":"516ee939e4b06aac486e5b34"},{"code":"(fn f [n coll]\n  (let [d (mod n (count coll))]\n    (concat (drop d coll)\n            (take d coll))))","problem":44,"user":"513f0565e4b051389b345b3b"},{"code":"(fn rotate [n s]\n  (if (zero? n)\n    s\n    (let [right (fn [n s]\n                  (rotate (inc n) (cons (last s) (butlast s))))\n          left  (fn [n s]\n                  (rotate (dec n) (concat (rest s) [(first s)])))]\n      (if (neg? n)\n        (right n s)\n        (left n s)))))","problem":44,"user":"4ef9b021535dced4c769f269"},{"problem":44,"code":"#(let [ct (count %2) cyc (cycle %2)]\n   (take ct (drop (mod %1 ct) cyc)))","user":"54246fcce4b01498b1a71aed"},{"problem":44,"code":"(fn [n xs]                               \n       (take (count xs)                       \n               (drop (mod n (count xs))              \n                     (concat xs xs)))                                                                                                                                                                                                                                                     \n       )","user":"5de68f83e4b0986d99407f6c"},{"problem":44,"code":"(fn rotate-seq [n s]\n  (let [size (count s)\n        split-point (mod n size)\n        splits (split-at split-point s)]\n    (concat (nth splits 1)(nth splits 0))))","user":"556405e5e4b0c656e3ff17fb"},{"problem":44,"code":"(fn [index args]\n  (let [i (mod index (count args))]\n    (concat (nthrest args i) (take i args))))","user":"53ab17cae4b047364c04444a"},{"code":"#(loop [n %1 l %2]\n   (cond (= n 0) l\n         (< n 0) (recur (inc n) (cons (last l) (drop-last l)))\n         :else (recur (dec n) (concat (rest l) (vector (first l))))))","problem":44,"user":"535a18e3e4b04ce2eb3ed2a4"},{"problem":44,"code":"(fn [x col]\n   (let [ind (mod x (count col))]\n     (concat (drop ind col) (take ind col))))","user":"5a912080e4b002d099cae6ea"},{"problem":44,"code":"(fn rotate [times coll]\n  (if (< times 0)\n    (rotate (+ times (count coll) ) coll)\n    (loop [coll (vec coll) times times]\n      (if (zero? times)\n        coll\n        (recur (conj (vec (rest coll)) (first coll) )\n               (- times 1))\n        )\n      )\n    )\n  )","user":"5776558ee4b0979f89651633"},{"problem":44,"code":"(fn [n s]\n  (let [k (mod n (count s))]\n    (concat (drop k s) (take k s))))","user":"56011393e4b04bb52996e178"},{"code":"(fn self [n coll] (cond (= n 0) coll (pos? n) (self (dec n) (concat (rest coll) (take 1 coll))) true (self (inc n) (concat (take-last 1 coll) (butlast coll)))))","problem":44,"user":"50e3ec87e4b0463d32072486"},{"problem":44,"code":"(fn [n coll]  \n  (let [rotator  (rem n (count coll)) \n        cut (Math/abs rotator)] \n  (if (< rotator 0) \n      (flatten (conj  (take (- (count coll) cut) coll) (take-last cut coll) ))\n      (flatten (conj (take cut coll) (drop cut coll))))))","user":"5fec4f5ee4b05ac5b16ea1bf"},{"problem":44,"code":"(fn rotate-sequence [ct sq]\n  (let [rotate-left (fn [s]\n                      (concat (rest s) (list (first s))))\n        real-ct (if (> ct 0) ct (+ (- 0 (mod (Math/abs ct) (count sq))) (count sq)))]\n    (first (drop real-ct (iterate rotate-left sq)))\n    ))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":44,"code":"(fn [n s] (let [n (mod n (count s))]\n            (concat (drop n s) (take n s))))","user":"550aeddae4b06e50f9beb135"},{"problem":44,"code":"(fn [x y]\n  (letfn [(swap [[a b]] (concat b a))\n          (spl  [c d] (split-at (mod c (count d)) d))]\n (swap (spl x y))))","user":"574a71b7e4b02ea1147991fb"},{"problem":44,"code":"(fn rotate [n in_seq]\n  (let [sl (count in_seq)]\n    (map\n      #(nth in_seq (mod (+ % n) sl))\n            (range sl))))","user":"5a94a38ce4b0d174b936c73e"},{"code":"#(let [c (count %2)\n       m (if (< % 0)\n           (- c (mod (Math/abs %) c))\n           (mod % c))]\n   (concat (drop m %2) (take m %2)))","problem":44,"user":"4e5af45e535d8a8b8723a2b1"},{"problem":44,"code":"#(->> %2\n      repeat\n      flatten\n      (drop \n        (loop [x %1]\n          (if (neg? x)\n            (recur (+ x (count %2)))\n            x)))\n      (take (count %2)))","user":"58247423e4b051871117bec5"},{"code":"#(for [n [(count %2)] i (range n)]\n  (nth %2 (mod (+ i %) n)))","problem":44,"user":"500d1db4e4b05f7c30cfa69f"},{"problem":44,"code":"(fn [n coll]\n  (let [ln (count coll)\n        idx (mod n ln)]\n    (take ln (drop idx (cycle coll)))))","user":"59c94a69e4b0a024fb6ae576"},{"code":"#(let [n (mod (+ (count %2) %) (count %2))]\n    (concat (drop n %2) (take n %2)))","problem":44,"user":"52a9154ee4b0c58976d9ac3b"},{"problem":44,"code":"(fn \n  [p s]\n  (if (> p 0)\n    (let [split (split-at (mod p (count s)) s)\n          a (vec (first split))\n          b (vec (second split))]\n      (into b a))\n    (recur (+ (count s) p) s)))","user":"56b2630be4b0982f16b37e03"},{"problem":44,"code":"(fn [n c] (let [x (mod n (count c))] (->> (list (take x c) (drop x c)) (reverse) (apply concat))))","user":"54487527e4b032a45b8693cc"},{"problem":44,"code":"(fn [n coll]\n  (->> coll\n       (split-at (mod (+ (count coll) n) (count coll)))\n       reverse\n       (apply concat)))","user":"4f5599dfe4b0a7574ea71806"},{"code":"#(let [l (count %2)] (take l (drop (mod (+ l %1) l) (concat %2 %2))))","problem":44,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":44,"code":"(fn [shift col]\n  (loop [col col\n         shift shift\n         direction (if (neg? shift) -1 1)]\n    (if (zero? shift)\n      col\n      (if (neg? direction)\n        (recur (concat (take-last 1 col) (butlast col)) (inc shift) direction)\n        (recur (concat (drop 1 col) (take 1 col) ) (dec shift) direction)\n        ))))","user":"5c321b8ae4b0d62ef62d9f32"},{"code":"#(let\n    [[l r] (split-at (mod %1 (count %2)) %2)]\n  (concat r l))","problem":44,"user":"4e2ef93d535deb9a81d77f0f"},{"problem":44,"code":"(fn rot [dir sq]\n  (let [ndir (rem dir (count sq))\n        idx (if (pos? ndir) ndir (+ ndir (count sq)))]\n    (take (count sq) (drop idx (cycle sq)))))","user":"5edd6eb7e4b0c7845d86b0f7"},{"problem":44,"code":"(fn rotate [n s]\n  (let [l (count s)\n        k (mod n l)]\n    (concat (drop k s) (take k s))))","user":"5643a11ee4b0018b46ad8bfb"},{"code":"(fn [n v]\n  (cond\n    (> n 0) (nth (iterate #(drop 1 (conj (vec %) (first %))) v) n)\n    (< n 0) (nth (iterate #(drop-last (cons (last %) %)) v) (- n))\n    :else v\n  ))","problem":44,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn [n s]\n  (#(concat (drop %1 %2) (take %1 %2))\n    (mod n (count s)) s))","problem":44,"user":"4fae258de4b081705acca246"},{"code":"(fn [n coll]\n  (let [m (mod n (count coll))]\n     (concat (drop m coll) (take m coll))))","problem":44,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":44,"code":"(fn [offs s]\n  (let [n (count s)]\n  \t(take n (drop (mod offs n) (cycle s)))))","user":"59a0286be4b0871e7608b82f"},{"problem":44,"code":"(fn [cnt myseq]\n  \n  \t(let [length (count myseq)\n          \n          steps (rem cnt length)\n          \n          ]\n    \t(if (> steps 0 )\n          \n          \t(concat (drop steps myseq) (take steps myseq))\n          \n          \t(concat (drop (inc (* -1 steps)) myseq) (take (inc (* -1 steps)) myseq)  )\n          )\n      \n     )\n  \n  )","user":"55897fe2e4b059ccff29b205"},{"code":"(\n  fn sol [ x coll ] (\n\t\t\ttake ( count coll ) ( drop ( mod x ( count coll ) ) ( cycle coll ) )\n\t)\n)","problem":44,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"(letfn [(sh-l [x] (concat (rest x) [(first x)]))\n        (sh-r [x] (concat [(last x)] (butlast x)))]\n  (fn sh [n coll]\n    (if (< n 0) \n      (if (< n -1) (sh (inc n) (sh-r coll)) (sh-r coll))\n      (if (> n 1)  (sh (dec n) (sh-l coll)) (sh-l coll)))))","problem":44,"user":"50733b31e4b0e3170b5a869a"},{"problem":44,"code":"(fn cyclic-buffer\n  [rotator coll]\n  (let [smaller-coll-than-rot? (< (count coll) rotator)\n        make-pos #(if (neg? %) (- %) %)\n        gen-cyclic-coll #(lazy-cat (take-last (make-pos rotator) coll) coll)]\n      (if smaller-coll-than-rot?\n        (->> (take rotator (cycle coll))\n             (drop (- rotator (count coll))))\n        (if (neg? rotator)\n            (if (> (make-pos rotator) (count coll))\n              (take (count coll) (take-last (make-pos rotator) (gen-cyclic-coll)))\n              (take (count coll) (gen-cyclic-coll)))\n            (->> (take (+ rotator (count coll)) (cycle coll))\n                 (drop rotator))))))","user":"5553b729e4b0deb715856e05"},{"problem":44,"code":"(fn [n coll]\n    (let [nu (mod n (count coll))]\n      (concat (drop nu coll)\n              (take nu coll))))","user":"5beda647e4b0a6d31fed2122"},{"code":"(fn rot [x sequ] \n  (let [n (mod (+ (count sequ) x) (count sequ))]\n  (flatten (reverse (split-at n sequ)))))","problem":44,"user":"5239caa6e4b0d705d026ef27"},{"problem":44,"code":"(fn [nrot col]\n  (let [ncol (count col)\n        nnrot (if (or (< nrot 0) (> nrot ncol))\n                (mod nrot ncol)\n                nrot)]\n    (concat (nthrest col nnrot) (take nnrot col))))","user":"56197b47e4b053970a773af8"},{"code":"#(take (count %2) (drop (mod %1 (count %2))(cycle %2)))","problem":44,"user":"52d00a05e4b07d0d72b273b5"},{"problem":44,"code":"(fn\n  [a b]\n  (let [pop-vector (fn [x] (into [] (rest x)))\n        rotate-positive (fn [x] (conj (pop-vector x) (first x)))\n        pop-vector-negative (fn [x] (into [] (butlast x)))\n        rotate-negative (fn [x] (into [] (cons (last x) (pop-vector-negative x))))]\n    (cond\n     (= a 0) b\n     (< a 0) (recur (+ a 1) (rotate-negative b))\n     (> a 0) (recur (- a 1) (rotate-positive b))\n     )))","user":"53ac4719e4b047364c04445c"},{"problem":44,"code":"(fn rot [n xs]\n  (if (zero? n)\n    xs\n    (if (> 0 n)\n      (recur (inc n) (concat (list (last xs)) (butlast xs)))\n      (recur (dec n) (concat (rest xs) (list (first xs)))))))","user":"5980f91ae4b021a7a535fddd"},{"code":"#(concat (drop (mod %1 (count %2)) %2) \n         (take (mod %1 (count %2)) %2))","problem":44,"user":"51780f88e4b03d69594194c9"},{"code":"(fn [n coll] \n    (let [len (count coll) \n          drs (mod n len) \n          colls (cycle coll)] \n      (take len (drop drs colls))))","problem":44,"user":"4e86d3cf535dceadca46984c"},{"problem":44,"code":"(fn [n coll]\n  (let [n (mod n (count coll))]\n    (concat (drop n coll)\n            (take n coll))))","user":"575cbe44e4b02ea114799374"},{"code":"(fn rotn [n s]\n  (let [ cs (count s)\n         n1 (mod n cs)]\n    (concat (drop  n1 s) (take n1 s ))))","problem":44,"user":"5018ed15e4b011a2e0bf6412"},{"problem":44,"code":"#(let [c %2\n      of %1\n      n (count c)\n      [v1 v2] (split-at (mod of n) c)]\n  (concat v2 v1))","user":"5a7a09e6e4b03baeef9276ca"},{"code":"(fn r [n x] \n   (if (= n 0)\n     x\n     (r\n      (if (> n 0)\n        (dec n)\n        (inc n))\n      (if (> n 0)\n        (concat (rest x) (seq (list (first x))))\n        (concat (seq (list (last x))) (drop-last x))))))","problem":44,"user":"525cc137e4b0cb4875a45d46"},{"problem":44,"code":"(fn rotate [ n x]\n    (let [i (mod n (count x) )]\n        (concat   \n        (drop i x)\n        (take i x)) \n    )\n)","user":"5ed30cb6e4b016b56eae05c2"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [\n         length (count coll)\n         moddedn (mod n length)\n         my-cycle (fn my-cycle\n          ([coll] (my-cycle coll 0))\n          ([coll i] (cons (nth coll i) (lazy-seq (my-cycle coll (mod (inc i) (count coll))))))\n        )\n        ]\n    (take length (drop moddedn (cycle coll)))\n  )\n)","user":"56393681e4b0bfe05bf117f2"},{"problem":44,"code":"(fn [n s]\n  (let [c (count s)]\n    (take c (drop (mod n c) (cycle s)))))","user":"53f77b6ae4b0de5c4184855f"},{"code":"(fn f [n s]\n  (cond (neg? n) (f (+ (count s) n) s)\n        (> n (count s)) (f (- n (count s)) s)\n        :else (reverse\n          (concat (reverse (take n s))\n                  (reverse (drop n s))))))","problem":44,"user":"4ed06ea6535d44c135fd68c4"},{"problem":44,"code":"(fn [n' xs]\n  (let [n (mod n' (count xs))]\n    (concat (drop n xs) (take n xs))))","user":"5b64370ae4b0c6492753e73c"},{"problem":44,"code":"(fn rotate [x coll]\n  (cond\n    (> x (count coll)) (rotate (- x (count coll)) coll)\n    (pos? x) (into (vec (drop x coll)) (take x coll))\n    (neg? x) (rotate (+ (count coll) x) coll)\n    :else coll))","user":"556a6137e4b09a3098a524e0"},{"problem":44,"code":"(fn do-rotate\n  [n coll]\n  (last\n    (take (inc (Math/abs n))\n      (iterate\n        (fn [rotated]\n          (if (pos? n)\n            (concat (rest rotated) [(first rotated)])   ;; move first element to end\n            (concat [(last rotated)] (butlast rotated)))) ;; move last element to start\n        coll))))","user":"59b62f8de4b05c620303ca1f"},{"problem":44,"code":"(fn [rot coll]\n  (let [ coll (if (pos? rot) coll (reverse coll)) rott (Math/abs rot)]\n    (loop [i 0 col coll]\n      (if (< i rott)\n        (recur (inc i) ( conj  (vec (next col)) (first col)) )\n        (if (neg? rot) (reverse col) col)))))","user":"579601c8e4b0e215f87e8492"},{"code":"#(flatten (apply conj (split-at (mod % (count %2)) %2)))","problem":44,"user":"4ec74de3535d6d7199dd36df"},{"problem":44,"code":"(fn [rotate-by coll]\n  (let [rotate-by (mod rotate-by (count coll))]\n    (concat (drop rotate-by coll) (take rotate-by coll))))","user":"5550dad4e4b00713264bd9b0"},{"problem":44,"code":"(fn [x coll]\n  (let [\n        cnt (count coll)\n        nrem (rem x cnt)\n        n (if (pos? nrem) nrem (+ cnt nrem)) \n        lazy-coll (cycle coll)\n        ]\n  (take (count coll) (drop n lazy-coll))\n    )\n  )","user":"5ac85708e4b0e27600da77ac"},{"problem":44,"code":"#(let [d (mod %1 (count %2))] (concat (drop d %2) (take d %2)))","user":"5bfe4ecfe4b0bdcf453d1608"},{"problem":44,"code":"(fn [n xs] (let [len (count xs)\n                  s (if (< n 0) (+ n len) n )\n                  spos (mod s len)]\n              (concat (drop spos xs) (take spos xs))))","user":"548cd813e4b0e286459a1211"},{"code":"(fn [n coll]\n  (let [c (mod n (count coll))\n        [a b] (split-at c coll)]\n    (concat b a)))","problem":44,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"problem":44,"code":"(fn foo\n  [x ys]\n  (let [source (flatten (repeat ys)) c (count ys) x x]\n    (if (> x 0)\n    (->> source \n          (drop x) \n          (take c))\n      (->> source \n          (drop (first (drop-while neg? (iterate (partial + c) x))))\n          (take c)))))","user":"55640c62e4b0c656e3ff17fd"},{"code":"(fn r [n s]\n  (cond\n    (< n 0) (r (+ (count s) n) s)\n    (= n 0) s\n    :else (r (dec n) (concat (rest s) [(first s)]))))","problem":44,"user":"4e6a2f51535d8ccf87e9fea9"},{"code":"(fn [n xs]\n  (let [offset (mod n (count xs))]\n    (concat (drop offset xs) (take offset xs))))","problem":44,"user":"525ab6cfe4b0cb4875a45cf9"},{"problem":44,"code":"(fn [n coll] (->> coll\n     (split-at \n      (mod n (count coll)))\n     (reverse)\n     (flatten)))","user":"58b1f51de4b0ebc645576d05"},{"code":"(fn [n xs]                                                                                                             \n    (letfn [(fwd [xs] (concat (drop 1 xs) (take 1 xs)))                                                                \n            (g [n xs] (loop [n n xs xs]                                                                                \n                            (if (= n 0)                                                                                \n                                xs                                                                                     \n                              (recur (dec n) (fwd xs)))))]                                                             \n           (if (< n 0) (reverse (g (- 0 n) (reverse xs)))                                                              \n             (g n xs))))","problem":44,"user":"4fa6a491e4b081705acca1bc"},{"code":"(fn [r, ls]\n  (let [rp (mod r (count ls))]\n    (if (> r 0)\n      (concat (drop rp ls) (take rp ls))\n      (concat (take-last (dec rp) ls) (drop-last (dec rp) ls) )\n    )\n  )\n)","problem":44,"user":"4ecc147b535d23f0362276f7"},{"problem":44,"code":"#(loop [counter %1\n        l %2] \n                  (if (= 0 counter) \n                    l \n                    (if (< counter 0) \n                             (recur (inc counter) (cons (last l) (butlast l)))\n                             (recur (dec counter) (conj (vec(rest l)) (first l)))\n                             )))","user":"57bc50c7e4b05aa3c4741c40"},{"problem":44,"code":"(fn [i s] ((fn rot [i s] (if (= 0 i)\n                           s\n                           (rot (dec i) (concat (rest s) (list (first s))))))\n           (mod i (count s))\n           s\n           ))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":44,"code":"(fn [f n s]\n     (flatten (cons (drop (f n s) s) (take (f n s) s))))\n\n (fn [n s] (mod n (count s)))","user":"5e08c3dde4b0978307768fc8"},{"code":"(fn [n coll]\n  (mapcat merge\n          (let [splt (partial split-at (mod n (count coll)))]\n            (reverse (splt coll)))))","problem":44,"user":"4e1b8106535d04ed9115e801"},{"problem":44,"code":"#(let [[a b] (split-at (mod %1 (count %2)) %2)]\n   (concat b a))","user":"5ad63a34e4b0ea6055cfac01"},{"problem":44,"code":"(fn [position list]\n  (loop [p position\n         l list]\n    (cond\n      (pos? p) (recur (dec p) (concat (drop 1 l)  [(first l)]))\n      (neg? p) (recur (inc p) (concat [(last l)] (drop-last l)))\n      (= p 0) l)))","user":"5801eed1e4b0a837a8b30c63"},{"problem":44,"code":"#(let\n   [n (count %2)]\n    (take n (drop (+ (mod %1 n) n) (cycle %2))))","user":"5647dc44e4b0284900eef624"},{"problem":44,"code":"(fn [steps coll]\n  (let [length (count coll)]\n    (take length (drop (mod steps length) (cycle coll)))))","user":"56488119e4b0284900eef632"},{"code":"(fn rotate [n coll]\n  (if (< n 0)\n      (reverse (rotate (- n) (reverse coll)))\n      (let [len (count coll)]\n        (take len (drop (+ len n) (cycle coll))))))","problem":44,"user":"4e4b4564535dc968683fc4d3"},{"problem":44,"code":"(fn [n coll]\n  (let [n (cond (>= n 0) (rem n (count coll))\n                (<  n 0) (+ (count coll) (rem n (count coll))))]\n    (if (= n 0)\n      coll\n      (apply concat (reverse (split-at n coll)))\n      )))","user":"586bc870e4b01531a375e964"},{"code":"(fn rotate-seq [n coll]\n  (flatten (reverse (split-at (mod n (count coll)) coll))))","problem":44,"user":"4fa17b00e4b0dcca54ed6d5f"},{"problem":44,"code":"(fn [a xs] (take (count xs) (drop (mod a (count xs)) (cycle xs))))","user":"5668dcc6e4b04acd4f672df8"},{"code":"(fn this [n xs]\n    (if (= 0 n)\n        xs\n        (if (> n 0) ; n is +ve\n          (this (dec n) (concat (rest xs) (list (first xs))))\n          (reverse (this (- 0 n) (reverse xs))))))","problem":44,"user":"520332f7e4b030ee0c5b2714"},{"problem":44,"code":"(fn [rot coll]\n   (let [clen (count coll)\n         nrot (mod (+ rot clen) clen)\n         [b e] (split-at nrot coll)]\n     (concat e b)))","user":"56732c84e4b05957ce8c611c"},{"problem":44,"code":"(fn [index seq]\n  (let [len (count seq)\n        offset (mod index len)]\n    (let [front (keep-indexed (fn [i v] (if (< i offset) v)) seq)\n          back (keep-indexed (fn [i v] (if (>= i offset) v)) seq)]\n      (concat back front))))","user":"55c4cda5e4b0e31453f649a5"},{"problem":44,"code":"(fn [n coll]\n  (let [num (mod n (count coll))]\n    (concat (drop num coll) (take num coll))))","user":"5b98f7f3e4b0c0b3ffbd4ac2"},{"code":"#(->> %2\n    (split-at (mod %1 (count %2)))\n    (apply conj)\n    (flatten))","problem":44,"user":"5013141de4b0f26a0e3320a9"},{"problem":44,"code":"(fn rotate-seq\n  [n coll]\n  (let [length (count coll)\n        effective-n (mod n length)]\n    (loop [i 0 acc []]\n      (if (>= i length)\n        acc\n        (recur (inc i)\n               (conj acc (nth coll (mod (+ effective-n i) length)))))))\n  )","user":"5f29837ee4b033932238a64f"},{"problem":44,"code":"#(let [k (mod %1 (count %2))]\n\t(concat (drop k %2) (take k %2))\n)","user":"5db7376fe4b010eb3c36cd43"},{"problem":44,"code":"(fn [n v] (let [pos (if (> n 0) (mod n (count v)) (mod (+ (count v) n) (count v)))] (-> (split-at pos v) reverse flatten)))","user":"58c04ca5e4b021aa9917ece6"},{"code":"(fn [x s] (let [n (if (< x 0) (+ (count s) (rem x (count s)))\n                         (rem x (count s))) ms (split-at n s)]\n                     (concat (second ms) (first ms))))","problem":44,"user":"4ebef65e535dfed6da9c6d9b"},{"code":"(fn [n coll]\n  (flatten (rseq (split-at (mod n (count coll)) coll))))","problem":44,"user":"5028bce0e4b01614d1633ffb"},{"code":"(fn [ind seq]\n  (let [ num (count seq) split (mod ind num) new_ind_seq (concat (range split num) (range 0 split))]\n    (for [new_indx new_ind_seq] (nth seq new_indx ))\n  )\n)","problem":44,"user":"522eba30e4b01cdb292c5f0e"},{"code":"(fn [r s]\n (take (count s) (nthrest (cycle s) (if (pos? r) r (-> (count s) (- r) inc)))))","problem":44,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":44,"code":"(fn rotate [k s]\n  (let [l (mod k (count s))]\n   (concat (drop l s) (take l s))\n   ))","user":"56eb3f9de4b04a395b9a0420"},{"code":"(fn rotate [a b]\n  (if (= a 0)\n\tb\n    (if (> a 0)\n      (rotate (dec a) (concat (rest b) [(first b)]))\n\n      (rotate (inc a) (conj (butlast b) (last b) ) )\n\n      )\n    )\n  )","problem":44,"user":"4e2164ff535d04ed9115e815"},{"problem":44,"code":"#(loop [coll (vec (concat %2 %2)) c (count %2) i (mod %1 c)]\n  (subvec coll i (+ i c)))","user":"5d7eaf5fe4b0492f5d910fc3"},{"problem":44,"code":"#(->> %2\n      (split-at (mod %1 (count %2)))\n      reverse\n      (apply concat)\n      )","user":"5f3abcc4e4b004f08c61c52b"},{"code":"(fn [n seq]\n  (let [len (count seq)]\n    (take len (drop (mod n len) (cycle seq)))))","problem":44,"user":"4f80db02e4b033992c121bf9"},{"problem":44,"code":"(fn [r c]\n  (loop [r r c c]\n    (cond (= 0 r) c\n          (> 0 r) (recur (inc r) (cons (last c) (drop-last c)))\n          (< 0 r) (recur (dec r) (concat (rest c) [(first c)])))))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":44,"code":"(fn [s c] (let [i (mod s (count c))] (apply concat (reverse (split-at i c)))))","user":"50784ae5e4b0fc74642bff68"},{"problem":44,"code":"(fn rotate [n l]\n   (cond\n     (= n 0) l\n     (< n 0) (rotate (+ (count l) n) l )\n     :else\n     (let\n       [[x & args] l]\n       (rotate (dec n) (conj (vec args) x))\n       )\n     )\n   )","user":"5d99dc47e4b0d3f9b434ad42"},{"problem":44,"code":"(fn [n s] \n  (let [cnt (count s)\n        mod-n (mod n cnt)]\n    (take cnt (drop mod-n (cycle s)))))","user":"594bc16be4b07ddc2dafae39"},{"problem":44,"code":"#(let [ c (count %2) x (rem %1 c) s (if (pos? %1) x (+ c x)) [a b] (split-at s %2)] (concat b a))","user":"580c8fcee4b0849f6811b721"},{"code":"(fn f [n s]\n  (cond\n    (= n 0) s\n    (> n 0) (recur (- n 1) (concat (rest s) (list (first s))))\n    :else (reverse (f (- n) (reverse s)))))","problem":44,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":44,"code":"(fn\n  [n s]\n  (loop [s s\n         n n]\n    (if (= 0 n)\n      s\n      (if (< n 0)\n        (recur (concat [(last s)] (butlast s)) (inc n))\n        (recur (concat (rest s) [(first s)]) (dec n))))))","user":"570c8ac3e4b0b0fb43fd06ca"},{"code":"(fn [n s]\n  (let [x (mod n (count s))]\n    (concat (drop x s) (take x s))))","problem":44,"user":"4e7dfab0535db169f9c796f9"},{"problem":44,"code":"(fn [x col] (reduce #(concat %2 %1) (split-at (mod x (count col)) col)))","user":"54769c7ae4b0c51c1f4d72a8"},{"problem":44,"code":"(fn __ [n s] (cond\n                 (> n 0) (__ (dec n) (concat (rest s) [(first s)]))\n                 (< n 0) (__ (inc n) (concat [(last s)] (butlast s)))\n                 :else s\n                 )\n  )","user":"5be2e670e4b0ed4b8aab4ccc"},{"problem":44,"code":"(fn foo\n  [n coll]\n  (let [len (count coll)\n        rot (mod (if (> n 0) n (+ len n)) len)]\n    (concat (drop rot coll) (take rot coll))))","user":"5747e22ce4b009280f9f2b7c"},{"problem":44,"code":"(fn rotate\n  [x my-seq]\n  (let [rotate-index (mod x (count my-seq))]\n    (apply concat (rseq (split-at rotate-index my-seq)))))","user":"548f19a8e4b0e286459a1231"},{"problem":44,"code":"(fn [n xs]\n  (let [len   (count xs)\n        shift (mod n len)]\n  (->> xs\n       cycle\n       (drop shift)\n       (take len))))","user":"5993eeefe4b0b211ea3aaabc"},{"code":"(fn [k xs]\n  (let [k' (mod k (count xs))]\n    (concat (drop k' xs) (take k' xs))))","problem":44,"user":"51eff839e4b0249c592fbdf1"},{"code":"(fn [n s]\n  (take (count s)\n        (drop (mod n (count s)) (cycle s))))","problem":44,"user":"50ef4e2be4b0a78662fa2653"},{"code":"(fn j-rotate\n  [num lst]\n  (if (= num 0)\n    lst\n    (if (> num 0)\n      (j-rotate (- num 1) (conj (into [] (rest lst)) (first lst)))\n      (j-rotate (+ num 1) (conj (butlast lst) (last lst))))))","problem":44,"user":"534ff8a6e4b084c2834f4ad1"},{"code":"(fn f\n  [t xs]\n  (let [n (mod t (count xs))\n        ys (split-at n xs)\n        ]\n    (flatten (reverse ys))\n    ))","problem":44,"user":"50aa60bee4b056ee01935865"},{"code":"(fn f1 [x y]\r\n  (let [b (inc (Math/abs x))]\r\n  (if (< x 0)\r\n    (last(vec(take (Math/abs b) (iterate (fn right [z]\r\n  (pop(vec(concat [(last z)] z)))) y))))\r\n  (last(vec(take b (iterate (fn left [z]\r\n  (vec(concat (rest z) [(first z)]))) y))))\r\n  )))","problem":44,"user":"50a85af1e4b054305ba5a833"},{"code":"(fn [rot coll]\n  (let [f-rot (mod rot (count coll))]\n  (concat (drop f-rot coll) \n          (take f-rot coll))))","problem":44,"user":"4e6defcc535d5021c1a895f8"},{"code":"(fn [rot ls]\n  (let [n (count ls)\n        offset (mod rot n)]\n    (drop offset (take (+ n offset) (cycle ls)))))","problem":44,"user":"521a4ff5e4b0c4ef0be83004"},{"code":"(fn [n coll ] (map-indexed (fn [idx itm] (nth coll (mod (+ idx n) (count coll)))) coll))","problem":44,"user":"5125745ae4b05d10e3e395f9"},{"problem":44,"code":"(fn my-rotate [x xs]\n  (if (= x 0)\n    xs\n    (if (< x 0)\n      (my-rotate (+ x 1) (let [y (last xs)] (cons y (drop-last 1 xs))))\n      (my-rotate (- x 1) (let [y (first xs)] (concat (drop 1 xs) (list y)))))))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"problem":44,"code":"(fn[n s]\n  (let [drop-n (mod (+ n (count s)) (count s))]\n    (take (count s) (drop drop-n (cycle s)))))","user":"5505d137e4b086ebe8a79c8c"},{"code":"#((fn rotate [nm coll]\n  (let [n (rem (Math/abs nm) (count coll))]\n\t\t(if (< nm 0)\n\t\t\t(concat (take-last n coll) (drop-last n coll))\n\t\t\t(concat (drop n coll) (take n coll)))))\n  %1 %2)","problem":44,"user":"4ee91d00535d93acb0a6688b"},{"problem":44,"code":"(fn [n s] (let [nn (mod n (count s))] (concat (drop nn s) (take nn s))))","user":"5292feb4e4b0239c8a67af39"},{"problem":44,"code":"(fn func\n    [n ar]\n    (let [len (count ar)\n          x (mod (+ len n) len)\n          a (drop x ar)\n          b (take x ar)]\n      (concat a b))\n  )","user":"5b8db323e4b0c0b3ffbd49da"},{"problem":44,"code":"(fn [m coll]\n  (let [c (count coll)\n        n (+ 1 m)]\n    (take c (drop (mod m c) (cycle coll)))))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":44,"code":"(fn \n  [step col]  \n  (if (empty? col)\n    col\n    (cond (> step 0) (recur (dec step) (conj (vec (next col)) (first col)))          \n          (< step 0) (recur (inc step) (cons (last col) (butlast col)))\n          :else col)))","user":"5455a6d3e4b0e397800069e2"},{"problem":44,"code":"(fn [x y] (take (count y) (drop (mod x (count y)) (cycle y))))","user":"56a1b854e4b0542e1f8d14b2"},{"problem":44,"code":"(fn [n coll]\n  (let [spl (mod n (count coll))]\n    (concat (drop spl coll) (take spl coll))))","user":"53483a32e4b084c2834f4a57"},{"problem":44,"code":"(fn my-rotate [n xs]\n  (let [m (mod n (count xs))]\n    (concat\n     (drop m xs)\n     (take m xs))))","user":"5688a01be4b0dcc4269f406d"},{"code":"(fn [n seq] (let [k (mod n (count seq))] (concat (nthrest seq k) (take k seq))))","problem":44,"user":"536a37efe4b0243289761eaa"},{"problem":44,"code":"(fn [rotator a-seq]\n  (loop [rotator rotator\n         a-seq a-seq]\n    (cond\n     (= 0 rotator) a-seq\n     (neg? rotator) (recur (inc rotator) (cons (last a-seq) (drop-last a-seq)))\n     :else (recur (dec rotator) (concat (rest a-seq) (list (first a-seq)))))))","user":"55b5fc18e4b01b9910ae298d"},{"code":"(fn my-rotate [n s]\n  (cond (zero? n) s\n        (neg? n) (my-rotate (inc n) (cons (last s) (drop-last s)))\n        :else (my-rotate (dec n) (concat (drop 1 s) (take 1 s)))))","problem":44,"user":"5310e7aee4b08068f379ecdc"},{"problem":44,"code":"(fn [n coll]\n   (let [in (mod n (count coll))]\n     (concat (drop in coll) (take in coll))))","user":"535f0cbde4b04ce2eb3ed2d9"},{"code":"(fn [n sequ]\n  (letfn [(rotate+ [sequ]\n            (rest (conj (vec sequ) (first sequ) )) )\n          (rotate- [sequ]\n            (drop-last (cons (last sequ) sequ )))]\n    (loop [n n\n           sequ sequ]\n      (cond (= n 0) sequ\n            (> n 0) (recur (dec n) (rotate+ sequ) )\n            (< n 0) (recur (inc n) (rotate- sequ))))))","problem":44,"user":"51f297a3e4b0210f90e74552"},{"code":"(fn [rot xs]\n  (let [idx (mod rot (count xs))]\n    (concat\n     (drop idx xs)\n     (take idx xs))))","problem":44,"user":"50fbf811e4b0d10d794c19f1"},{"problem":44,"code":"#(let [c (count %2)]\n   (take c\n       (drop (mod % c) \n             (cycle %2))))","user":"55d8eed3e4b0e31453f64ac3"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [part (split-at (mod n (count coll)) coll)]\n    (concat (second part) (first part))))","user":"55c734a5e4b0e31453f649cb"},{"problem":44,"code":"(fn [x coll] \n  (if (>= x 0)\n    (nth (iterate (comp flatten (juxt rest first)) coll) x)\n    (nth (iterate (comp flatten (juxt last butlast)) coll) (- x))))","user":"55f3802be4b06e875b46ce5f"},{"code":"(letfn [(r [x l]                                                                                                                                                                                                                             \n          (let [b (> x 0)]                                                                                                                                                                                                                   \n            (if (= x 0)                                                                                                                                                                                                                      \n              l                                                                                                                                                                                                                              \n              (r (if b (dec x) (inc x))                                                                                                                                                                                                      \n                 (concat (if b (rest l) (list (last l)))                                                                                                                                                                                     \n                         (if b (list (first l)) (butlast l)))))))]                                                                                                                                                                           \n  r)","problem":44,"user":"4db342d7535df7e46ed9b6cd"},{"code":"#(take (count %2) (drop (mod %1 (count %2)) (concat %2 %2)))","problem":44,"user":"4f71347ae4b07046d9f4f009"},{"code":"#(mapcat identity (reverse (split-at (mod % (count %2)) %2)))","problem":44,"user":"528d1094e4b0239c8a67aebe"},{"problem":44,"code":";implemented mod, i guess\n\n#(let [c (count %2)]\n   (loop [x %1]\n     (if (pos? x)\n       (if (<= x c)\n         (concat (nthrest %2 x) (take x %2))\n         (recur (- x c)))\n       (if (<= (Math/abs x) c)\n         (recur (+ c x))\n         (recur (- (rem (Math/abs x) c)))))))","user":"56bb9ccce4b0f26550335959"},{"problem":44,"code":"#(let [i1 (first (drop-while neg? (iterate (partial + (count %2)) %1))) coll1 %2] (take (count coll1) (drop i1 (cycle coll1))))","user":"5b284375e4b063e2438bcc53"},{"code":"#_ (fn f [n seq]\n  (if (< n 0)\n    (reverse (f (- n) (reverse seq)))\n    (let [n (mod n (count seq)), [before, after] (split-at n seq)]\n      (concat after before))))\n\n#(take (count %2)\n  (drop (mod %1 (count %2))\n    (cycle %2)))","problem":44,"user":"4fe8b6afe4b07c9f6fd12c76"},{"problem":44,"code":"#(take (count %2) (drop  (mod %1 (count %2)) (cycle %2)))","user":"53fcb8f7e4b0de5c418485d4"},{"problem":44,"code":"(fn [r as] (if (>= r 0)\n            (mapcat identity (reverse (split-at (rem r (count as)) as )))\n            (mapcat identity (reverse\n                                (split-at\n                                    (rem (+ (rem r (count as)) (count as)) (count as))\n                                \n                              as )))))","user":"5213348ae4b0d32679a50652"},{"problem":44,"code":"(fn [x a] (map (fn [i] (nth a (mod (+ i x) (count a)))) (range (count a))))","user":"5744723ae4b009280f9f2b3a"},{"problem":44,"code":"(fn x [n coll]\n  (take (count coll) (drop (mod n (count coll)) (cycle coll))))","user":"5897dda4e4b00487982d52c8"},{"code":"(fn [n coll] (if (> n 0) \n  (concat (drop (mod n (count coll)) coll) (take (mod n (count coll)) coll)) \n  (concat (take-last (mod (- n) (count coll)) coll) (drop-last (mod (- n) (count coll)) coll))))","problem":44,"user":"4fa39b3ee4b081705acca191"},{"problem":44,"code":"(fn r [c a]\n  (cond\n   (= 0 c) a\n   (< 0 c) (r (- c 1) (flatten [(rest a) (first a)]))\n   (< c 0) (r (+ c 1) (flatten [(last a) (butlast a)]))))","user":"5540fe42e4b0a04f7929950a"},{"code":"(fn rot [shift coll]\n        (when-let [s (seq coll)]\n          (cond\n           (= shift 0) s\n           (< shift 0) (rot (inc shift) (cons (last s) (butlast s)))\n           (> shift 0) (rot (dec shift) (concat (rest s) [(first s)])))))","problem":44,"user":"5137c3b0e4b0509a8b470482"},{"problem":44,"code":"(fn [n xs]\n  (let [modn (mod n (count xs))]\n    (take (count xs) (drop modn (cycle xs)))))","user":"53e9a15be4b036ad0777e4ae"},{"code":"(fn [at col]\n  (apply concat (reverse (split-at (mod (+ (count col) at) (count col)) col))))","problem":44,"user":"513cb853e4b0b86ece9f322b"},{"problem":44,"code":"(fn [n coll]\n   (let [m (mod n (count coll))\n         [f r] (split-at m coll)] (concat r f)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":44,"code":"#(let [rot (mod (+ %1 (count %2)) (count %2))]\n   (concat (drop rot %2) (take rot %2)))","user":"55a74d46e4b09e57187da2a3"},{"problem":44,"code":"(fn [n col]\n  (let [k (mod n (count col))]\n    (concat (drop k col) (take k col))))","user":"59abd1d8e4b08cbb53654da4"},{"code":"#(let [d (mod % (count %2))] (concat (drop d %2) (take d %2)))","problem":44,"user":"4efd8b67535de96065cf5085"},{"problem":44,"code":"(fn [x coll] \n  (let [a (mod x (count coll))]\n  (concat (drop a coll) (take a coll))))","user":"534fa9dae4b084c2834f4acf"},{"problem":44,"code":"(fn rotate [pos xs]\n  (let [len (count xs)]\n    (cond\n      (and (> pos 0) (< pos len)) (concat (drop pos xs) (take pos xs))\n      (and (< pos 0) (< (- pos) len)) (recur (+ len pos) xs)\n      (> pos len) (recur 1 xs)\n      (> (- pos) len) (recur (- len 1) xs)\n      )))","user":"5d5e0259e4b0c9e5857d4fef"},{"code":"(fn [n ls]\n  (let [l (count ls)\n        n2 (mod n l)\n        r (+ l n2)]\n      (concat (drop n2 ls) (take n2 ls))))","problem":44,"user":"4e4b911f535dc968683fc4d6"},{"problem":44,"code":"(fn rotate\n  [r coll]\n  (if (= r 0)\n    coll\n    (recur (dec (mod r (count coll))) (concat (rest coll) [(first coll)]))))","user":"5a3ece62e4b0447ef91cc5b9"},{"problem":44,"code":"(fn [n coll] (let [len (count coll)\n                   nn (mod n len)]\n               (take len (drop nn (cycle coll)))))","user":"543d89dfe4b032a45b869350"},{"problem":44,"code":"(fn [n l]\n    (let [ n (mod n (count l))]\n      (concat (drop n l) (take n l)))\n    )","user":"5433a07be4b0b6b47310fce0"},{"problem":44,"code":"(fn rotate\n  [n xs]\n  (let [len (count xs)\n        steps (if (neg? n) (+ len (rem n len)) n)]\n    (take len (drop steps (cycle xs)))))","user":"5637557ce4b0bfe05bf117d4"},{"problem":44,"code":"(fn [n coll] (let [len (count coll)] (take len (drop (mod n len) (cycle coll)))))","user":"5f972ed6e4b0715f5002d7f2"},{"code":"#(->> (split-at (mod %1 (count %2)) %2) rseq (apply concat))","problem":44,"user":"50e8cac5e4b0ebbe794eb7ef"},{"problem":44,"code":"#((fn [n l] (concat (drop n l) (take n l))) \n  \n  (mod (+ %1 (count %2)) (count %2)) \n  %2)","user":"55c13e73e4b01b9910ae2a2f"},{"problem":44,"code":"(fn [n coll]\n  (let [h (max n (- n)) l (count coll)]\n  (cond  (and (< n 0) (> h l)) (reverse (concat (drop (- h l) (reverse coll)) (take (- h l) (reverse coll)))) \n         (< n 0) (reverse (concat (drop h (reverse coll)) (take h (reverse coll))))\n         (and (> n 0) (> h l)) (concat (drop (- h l) coll) (take (- h l) coll))\n         (> n 0)(concat (drop h coll) (take h coll)))))","user":"5cee4bc9e4b0aaa82f1129dc"},{"code":"(fn [i x] (let [ n (mod i (count x))] (first(drop n (iterate #(concat (rest %)[(first %)]) x)))))","problem":44,"user":"4f8b81d4e4b02e764a0a517f"},{"problem":44,"code":"(fn [i xs]\n  (let [n (count xs)\n        i' (rem i n)\n        i'' (if (neg? i') (+ n i') i')\n        [h t] (split-at i'' xs)]\n    (concat t h)))","user":"59fa241ee4b0ca45a743a358"},{"problem":44,"code":"(fn rotate [n coll]\n  (cond\n    (= n 0) coll\n    (< n 0) (reverse (rotate (- n) (reverse coll)))\n    :else (recur (dec n)\n                 (concat (next coll)\n                         (take 1 coll)))))","user":"577b4440e4b0d3393e5deb0f"},{"problem":44,"code":"(fn [n coll]\n   (let [size (count coll)\n         x (rem (+ size (rem n size)) size)]\n     (concat\n       (drop x coll)\n       (take x coll))))","user":"5e7b1ef4e4b085ba37836e10"},{"problem":44,"code":"(fn [n xs]\n  (let [a (mod n (count xs))\n        xs xs]\n    (concat (drop a xs) (take a xs))))","user":"55c423e1e4b0e31453f64994"},{"problem":44,"code":"(fn [x y]\n  (let [i (mod x (count y))]\n    (concat (drop i y) (take i y))))","user":"56f85849e4b08e7d20b96836"},{"code":"(fn [n coll] \n  (let [x (mod n (count coll))]\n      (concat (drop x coll) (take x coll))))","problem":44,"user":"52c4af71e4b0c2d177d620e1"},{"problem":44,"code":"(fn rotate[axis seq]\n(if (neg? axis) (reverse (rotate (* -1 axis) (reverse seq)))\n  (concat (nthrest seq (mod axis (count seq))) (take (mod axis (count seq)) seq))\n)\n)","user":"54b598d6e4b05787c3b163a8"},{"problem":44,"code":"(fn rotate-xs [direction xs]\n  (let [ln (count xs)]\n    (if (pos? direction)\n      (take ln (drop direction (cycle xs)))\n      (take ln (drop (- ln (mod (* direction -1) ln)) (cycle xs))))))","user":"5bedddeee4b0a6d31fed2128"},{"code":"(fn rotate-seq [n lst]\n  (let [l (count lst) x (if (or (> n l) (< n (* -1 l))) (int (/ n l)) n) i (if (neg? x) (+ l x) x)]\n    (println x i)\n    (concat (drop i lst) (take i lst))))","problem":44,"user":"527ccaf4e4b0757a1b17136d"},{"code":"(fn [n v] (apply concat (reverse (split-at (mod n (count v)) v))))","problem":44,"user":"523b1988e4b02f719975bdbc"},{"problem":44,"code":"; If it's 0, return it.\n\n; If it's + go forward\n\n; If it's greater than the list size, loop back through.\n\n; If it's negative, set the marker back\n\n(fn [pos s]\n  \n (into\n\t\t(vec (drop (mod pos (count s)) s))\n\t\t(vec (take (mod pos (count s)) s))\n\t)\n    \n  \t\n  ); fn end","user":"5ff676a9e4b06df49cee1497"},{"problem":44,"code":"#(loop [n %1\n        res %2]\n   (cond (zero? n) res\n         (> n 0) (recur (dec n) (concat (rest res) [(first res)]))\n         :else (recur (inc n) (concat [(last res)] (butlast res)))))","user":"53a0ab8ce4b0ca733b9744b3"},{"code":"(fn [n xs]\n  (apply assoc\n    (vec (take (count xs) (repeat nil)))\n    (vec (mapcat vector (map #(mod % (count xs)) (map #(- % n) (range))) xs))))","problem":44,"user":"50427899e4b0add3005c0fc2"},{"problem":44,"code":"(fn [r s]\n  (let [n (count s)]\n    (take n (drop (mod r n) (concat s s)))))","user":"57458b82e4b009280f9f2b4e"},{"code":"(fn foo [n lst]\n  (cond\n    (= n 0) lst\n    (> n 0) (foo (dec n) (concat (rest lst) (list (first lst))))\n    (< n 0) (foo (inc n) (concat (take-last 1 lst) (butlast lst)))\n    )\n  )","problem":44,"user":"50ae5659e4b0a40c9cfb08d2"},{"code":"(fn rotate [n coll]\n  (let [r (mod n (count coll)) front (drop r coll) back (take r coll)]\n    (concat front back)\n  )\n)","problem":44,"user":"52bf936ee4b07a9af579233b"},{"problem":44,"code":"(fn [n col]\n  (loop [index n]\n    (if (< index 0)\n      (recur (+ index (count col)))\n      (if (>= index (count col))\n        (recur (- index (count col)))\n        (concat (take-last (- (count col) index) col) (take index col) )\n      )\n    )\n  )\n)","user":"57e396cde4b0bfb2137f5a9e"},{"code":"(fn [n coll]\n  (let [ntime (if (neg? n) (- n) n)\nlshift #(concat (rest %) [(first %)])\nrshift #(cons (last %) (drop-last %))]\n((apply comp (repeat ntime (if (neg? n) rshift lshift))) coll)))","problem":44,"user":"4f9fb08ae4b0dcca54ed6d3c"},{"problem":44,"code":"#(let [pos (cond\n              (and (> %1 0)) (mod %1 (count %2))\n              (and (< %1 0)) (- (mod (- %1) (count %2)))) data (vec %2) c (count %2)]\n   (cond\n     (> pos 0) (concat (subvec data pos) (subvec data 0 pos ))\n     (< pos 0) (concat (subvec data (+ c pos)) (subvec data 0 (+ c pos)))))","user":"560c37b5e4b05f002753df2e"},{"code":"#(let [s (mod %1 (count %2))]\n  (flatten (reverse (split-at s %2))))","problem":44,"user":"50431cbce4b034ff00315d1c"},{"code":"(fn my-rotate [n xs]\r\n  (let [n-rotate (mod n (count xs))]\r\n    (concat (drop n-rotate xs) (take n-rotate xs))))","problem":44,"user":"4dd023dd535d5973398f92ad"},{"code":"(fn [r l]\r\n  (loop [v (reverse (reverse l)) c (Math/abs r)]\r\n    (if (> c 0)\r\n      (if (pos? r)\r\n        (recur (reverse (conj (reverse (pop v)) (peek v))) (dec c))\r\n        (recur (conj (reverse (pop (reverse v))) (peek (reverse v))) (dec c)))\r\n        v)))","problem":44,"user":"4e79ff2a535db169f9c796a9"},{"code":"(fn rotate-sequence [n a]\n\t(let [series (reduce concat [] (take 10 (repeat a)))]\n\t\t(if (pos? n)\n\t\t\t(take (count a) (drop n series))\n\t\t\t(reverse (take (count a) (drop (* n -1) (reverse series)))))))","problem":44,"user":"50ed8a5fe4b06330c1f87c3d"},{"code":"(fn _f [n s]\n  (if (neg? n)\n    (_f (+ n (count s)) s)\n  (apply conj\n    (apply vector (take-last (- (count s) (mod n (count s))) s))\n    (take (mod n (count s)) s))))","problem":44,"user":"4ea67906535d7eef308072e4"},{"problem":44,"code":"(fn rotate [times seq]\n  (let [times-size (mod (max times (- times)) (count seq))]\n    (if (pos? times)\n      (concat (nthnext seq times-size) (take times-size seq))\n      (concat (take-last times-size seq) (take (- (count seq) times-size) seq)))))","user":"5d6633bde4b0db5d338d15e2"},{"code":"(fn [dir col]\n       (loop [ncol col\n        n dir]\n\t (cond\n\t  (zero? n) ncol\n\t  (pos? n) (recur\n\t\t    (conj (vec (rest ncol)) (first ncol))\n\t\t    (dec n))\n\t  (neg? n) (recur\n\t\t    (cons (last ncol) (vec (butlast ncol)))\n\t\t    (inc n))\n\t  )\n\t )\n       )","problem":44,"user":"4eae2f9e535d7eef30807324"},{"problem":44,"code":"(fn rotate-coll [n coll]\n  (let [pos (mod n (count coll))]\n    (concat (drop pos coll) (take pos coll))))","user":"554dfe97e4b00713264bd98c"},{"problem":44,"code":"(fn rotLeft [n xs] \n  (let [k (mod n (count xs))]\n  (reverse (concat (reverse (take k xs)) (reverse (drop k xs))))))","user":"5aa5951ae4b0d174b936c899"},{"problem":44,"code":"(fn [rot col]\n  (let [rot (mod rot (count col))]\n  (if (< rot 0)\n    (concat (drop (+ (count col) rot) col)\n            (take (+ (count col) rot) col))\n    (concat (drop rot col)\n            (take rot col))\n    )))","user":"5f06caa7e4b0cf489e8d7f52"},{"code":"(fn [n xs]\n  (let [rotator (if (neg? n) (fn [s] (concat (list (last s)) (butlast s)))\n                  (fn [s] (concat (rest s) (list (first s)))))\n                n (Math/abs n)]\n    (loop [n n xs xs]\n          (if (zero? n) xs\n            (recur (dec n) (rotator xs))))))","problem":44,"user":"500854c4e4b028e089d3518c"},{"code":"#(let [n (mod % (count %2))]\n      (concat (drop n %2) (take n %2)))","problem":44,"user":"4fa6d532e4b081705acca1be"},{"problem":44,"code":"(fn [n v]\n  (if (= n 0)\n    v\n  \t(let [f (if (pos? n) dec inc)\n          c (if (pos? n) \n              (conj (vec (rest v)) (first v))\n              (into [(last v)] (take (- (count v) 1) v)))]\n      (recur (f n) c))))","user":"54814dbee4b0e286459a116b"},{"problem":44,"code":"(fn [n coll]\n    (let [l (count coll)\n          wrapped-col (flatten (repeat coll))\n          skip (mod n l)]\n      (take l (drop skip wrapped-col))))","user":"5b62764ae4b0c6492753e725"},{"problem":44,"code":"(fn [shift coll]\n  (let [func #(loop [times %1 collection %2]\n    (if (zero? times)\n      collection\n      (recur (dec times) (concat (rest collection) [(first collection)]))))]\n  (if (< shift 0)\n    (reverse (func (* -1 shift) (reverse coll)))\n    (func shift coll))))","user":"5773f3a9e4b0979f896515f2"},{"problem":44,"code":"(fn [n s]\n (cond\n   (> n 0) (recur (dec n)\n                  (concat\n                    (rest s)\n                    [(first s)]))\n\n   (< n 0) (recur (inc n)\n                  (concat\n                    [(last s)]\n                    (butlast s)\n                    ))\n   (= n 0) s))","user":"51db0d99e4b06aa4d4669a9d"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (let [x (mod n (count coll))]\n    (concat (drop x coll) (take x coll))))","user":"598858d0e4b021a7a535feb5"},{"code":"(fn rotate-sequence [n s]\n  (let [[a b] (split-at (mod n (count s)) s)]\n    (concat b a)))","problem":44,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":44,"code":"(fn [n s]\n  (let [m (mod n (count s))]\n      (concat (drop m s) (take m s))))","user":"5339c105e4b0e30313ee6cae"},{"problem":44,"code":"(fn [n s]\n    (let [delta (mod n (count s))]\n      (concat (drop delta s) (take delta s))))","user":"531619c1e4b08068f379ed3d"},{"code":"(fn [n coll] \n  (let [x (split-at (mod n (count coll)) coll)] \n    (concat (fnext x)(first x))))","problem":44,"user":"50de11b2e4b061dbdced7217"},{"problem":44,"code":"#(letfn [(xyz [f] (f (mod %1 (count %2)) %2))]\n  (concat (xyz drop) (xyz take)))","user":"53c38b8ce4b00fb29b22127b"},{"code":"(fn [n r] (let [d (mod n (count r))] (concat (drop d r) (take d r))))","problem":44,"user":"4e7f4147535db966e863cc3d"},{"problem":44,"code":"(fn [n vect] (reduce (fn [a b] (conj a (nth vect (rem (+ b n (count vect)(count vect)) (count vect))))) [] (range 0 (count vect))))","user":"5a9e3698e4b0d174b936c7fc"},{"problem":44,"code":"(fn f [n s]\n  (cond (= n 0) s\n        (> n 0) (f (- n 1) (concat (rest s) [(first s)]))\n        (< n 0) (f (+ n 1) (cons (last s) (butlast s)))))","user":"53e06f81e4b0d874e779ae4c"},{"code":"(fn [n coll]\n  (let [i (rem n (count coll))\n        s (if (> 0 i) (- (count coll) (- i)) i)]\n    (flatten (reverse (split-at s coll)))))","problem":44,"user":"4f9a7dc0e4b0dcca54ed6d0b"},{"code":"(fn [n s]\n  (let [n (mod n (count s))]\n  (concat (drop n s) (take n s))))","problem":44,"user":"4f03d0fe535dcb61093f6b6d"},{"code":"#(take (count %2)\n\t(nthnext (concat %2 %2)\n             (mod % (count %2))))","problem":44,"user":"51823a97e4b0f2adb733651e"},{"code":"#(let [len (mod %1 (count %2))]\n  (concat (drop len %2) (take len %2)))","problem":44,"user":"5074b3ece4b054001656acd5"},{"code":"(fn [n xs]\n  (if (neg? n) (let [n (* -1 n)]\n                 (reverse (drop n (take (+ (count xs) n) (cycle (reverse xs))))))\n      (drop n (take (+ (count xs) n) (cycle xs)))))","problem":44,"user":"4f748b54e4b044e54cd9a8fa"},{"code":"(fn rotate-seq\n  ([x y]\n    (println x y)\n    (if (> x 0)\n      (rotate-seq (rem x (count y)) (vec y) [])\n      (rotate-seq (+ x (count y)) y)))\n  ([x y z]\n    (println x y z)\n      (if (> (count y) x)\n        (if (= 0 (count (subvec y (inc x))))\n          (recur x (subvec y 0 x) (conj z (get y x)))\n          (recur x (apply conj (subvec y 0 x) (subvec y (inc x))) (conj z (get y x))))\n        (list* (apply conj z y)))))","problem":44,"user":"4e16bdef535d04ed9115e7e9"},{"problem":44,"code":"(fn [rotations coll]\n   \n   (let [rotations (mod rotations (count coll))] (if (>= rotations 0)\n     (concat (drop rotations coll) (take rotations coll))\n     (concat (drop (+ (count coll) rotations) coll) (take (+ (count coll) rotations) coll)))))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":44,"code":"(fn [n col] (letfn [(rotate [n col]\n                           (if (> n 0)\n                             (concat\n\t\t\t       (drop\n\t\t\t         (mod\n\t\t\t\t   n\n\t\t\t\t   (count col)\n\t\t\t\t )\n\t\t\t\t col\n\t\t\t       )\n\t\t\t       (take\n\t\t\t         (mod\n\t\t\t\t   n\n\t\t\t\t   (count col)\n\t\t\t\t )\n\t\t\t         col\n\t\t\t       )\n\t\t\t     )\n                             (concat\n\t\t\t       (drop\n\t\t\t         (+\n\t\t\t\t   (rem\n\t\t\t\t     n\n\t\t\t\t     (count col)\n\t\t\t\t   )\n\t\t\t\t   (count col)\n\t\t\t\t )\n\t\t\t\t col\n\t\t\t       )\n\t\t\t       (take\n\t\t\t         (+\n\t\t\t\t   (rem\n\t\t\t\t     n\n\t\t\t\t     (count col)\n\t\t\t\t   )\n\t\t\t\t   (count col)\n\t\t\t\t )\n\t\t\t\t col\n\t\t\t       )\n\t\t\t     )\n                           )\n                       )                ]\n                   (rotate n col)\n                   ))","user":"5c635364e4b0fca0c162265f"},{"problem":44,"code":"(fn [n c] (let [l (count c)] (take l (drop (if (pos? n) n (- l (mod (- n) (count c)))) (cycle c)))))","user":"53d4dadde4b00fb29b221337"},{"problem":44,"code":"(fn [i coll]\n  (let [index \n        (if (pos? i)\n         (rem i (count coll))\n          (+ (rem i (count coll)) (count coll))\n          ); if       \n        ]\n   \n   (flatten (cons (nthrest coll index) (take index coll) ))\n   );let\n \n \n )","user":"560768a0e4b08b23635d317f"},{"problem":44,"code":"(fn [n coll]\n   (let [n1 (if (neg? n)\n                 (+ (count coll) n)\n                 n)\n         nfinal (mod n1 (count coll))]\n     (concat (drop nfinal coll)\n             (take nfinal coll))))","user":"5515b138e4b055c2f668d4ed"},{"problem":44,"code":"(fn [n coll]\n  (letfn [(rotate [n coll]\n                  (->> coll\n                       cycle\n                       (take (+ n (count coll)))\n                       (drop n)))]\n    (if (neg? n)\n      (->> coll reverse (rotate (- n)) reverse)\n      (->> coll (rotate n)))))","user":"5813e208e4b0f478707a061b"},{"problem":44,"code":"#(take \n  (count %2)\n  (nthnext (cycle %2) (if (>= %1 0) %1 (mod %1 (count %2)))))","user":"578b140be4b0ebec4cfb7545"},{"problem":44,"code":"(fn [n s]\n\n\t; positive\n\t;(flatten (conj () (take n s) (drop n s)))\n  \t; negative \n\t;(flatten (conj () (take (- x n1) a1) (drop (- x n1) a1)))\n  \n  \t;(flatten (conj () (take (mod n (count s)) s) (drop n s)))\n  \n  ; first part\n;  (drop (mod n (count a1)) a1)\n     ; second part\n    ;(take (mod n (count s)) s)\n  \n  (concat (drop (mod n (count s)) s) (take (mod n (count s)) s))\n)","user":"56f2611fe4b04a395b9a04a2"},{"problem":44,"code":"#(let [len (count %2) n (rem %1 len) n (if (>= n 0) n (+ len n))] (apply concat (reverse (split-at n %2))))","user":"602c30e3e4b0d5df2af2226f"},{"code":"(fn rotate-sequence [x seqs]\n  (let[ x (mod x (count seqs))]\n    (loop[x x\n          result seqs ]\n      (if(zero? x)\n        result\n        (recur (dec x) \n               (concat (rest result) (list (first result))))))))","problem":44,"user":"5273562ae4b03e8d9a4a7479"},{"problem":44,"code":"(fn [n xs]\n  (let [m (mod n (count xs)) ]\n    (concat (drop m xs) (take m xs))))","user":"540e17c3e4b0addc1aec6719"},{"problem":44,"code":"(fn [n c] (let [n2  (mod n (count c))\n                  s   (max 0 n2)\n                  e   (* -1 (min 0 n2))\n                 ]\n              (concat (take-last e c) (drop s (drop-last e c)) (take s c))\n            )\n      )","user":"566e6850e4b0a866af6896da"},{"problem":44,"code":"(fn [num coll] (flatten (reverse (split-at (mod num (count coll)) coll))))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":44,"code":"(fn [x l]\n  (let [n (rem x (count l))] \n    (if (< 0 n)\n      (concat (drop n l) (take n l))\n      (concat (drop (+ n (count l)) l)  (take (+ n (count l)) l)))))","user":"55c49394e4b0e31453f6499e"},{"code":"(fn [n c]\n  (let [n (mod n (count c))]\n    (if (neg? n)  \n  (let [i (+ n (count c))] (concat (drop i c) (take i c)))\n    (concat (drop n c) (take n c)))\n))","problem":44,"user":"5089d52ce4b03217b26a539d"},{"code":"(fn [r xs]\n  (let [num-r (mod r (count xs))]\n    (concat (drop num-r xs) (take num-r xs))))","problem":44,"user":"4dadb891c9a9d6ed3699dc57"},{"problem":44,"code":"(fn r [n s] (cond (= n 0) s (> n 0) (r (- n 1) (concat (rest s) (list (first s)))) (< n 0) (r (+ n 1) (concat (list (last s)) (take (- (count s) 1) s)))))","user":"556766c1e4b0c656e3ff1840"},{"code":"(fn [n s]\n  (let [f (fn [n s]\n            (if (zero? n) s\n              (recur (dec n) (conj (vec (rest s)) (first s)))))]\n    (if (<= 0 n) (f n s)\n      (reverse (f (* -1 n) (reverse s))))))","problem":44,"user":"4daf907aedd6309eace4d17b"},{"code":"(fn [n coll]\n  (let [n (mod n (count coll))\n        [f l] (split-at n coll)]\n    (concat l f)))","problem":44,"user":"4e89ff3d535d3e98b802328a"},{"problem":44,"code":"(fn  [n c]\n  (let [l (count c)]\n    (cond (= n 0) c\n          (> n 0) (recur (rem (- n l) l) c)\n          (< n 0) (recur (inc n) (cons (last c) (butlast c))))))","user":"53b7c21ae4b047364c0444d4"},{"problem":44,"code":"(fn rotate\n  [n s]\n  (let [m (rem n (count s))\n        n (if (neg? m)\n            (+ (count s) m)\n            m)]\n      (concat (drop n s) (take n s))))","user":"4e8a170c535d3e98b802328f"},{"code":"(fn [n s]\n    (let [ l (count s) \n           m (mod n l) ]\n       (take l (drop m (cycle s)))))","problem":44,"user":"4e860e85535db62dc21a62f1"},{"code":"(fn [n coll]\n  (let [c (count coll) a (mod n c)]\n    (flatten ((juxt drop take) a coll))))","problem":44,"user":"503354c3e4b0c6c1199c710c"},{"code":"#(loop [x %1, l %2, r l]\n   (if (= 0 x)\n       r\n       (if (< x 0)\n          (recur (inc x) l (concat (list (last r)) (take (dec (count r)) r)))\n          (recur (dec x) l (concat (rest r)        (list (first r)))))))","problem":44,"user":"4f038567535dcb61093f6b0c"},{"problem":44,"code":"(fn [offset sqn]\n  (let [off-set-mod (mod offset (count sqn))]\n    (concat (drop off-set-mod sqn) (take off-set-mod sqn))))","user":"5cf895efe4b0b71b1d808a85"},{"code":"(fn [x coll] \n  (let [cnt (count coll) \n        xx (mod x cnt)\n        n (if (< 0 xx) xx (+ cnt xx))] \n    (concat (drop n coll) (take n coll))))","problem":44,"user":"51990df9e4b068aa333628fc"},{"problem":44,"code":"(fn [i l]\n  (let [c (count l)]\n    (take c\n          (let [t (if (pos? i) 0 c) r (rem i c)]\n            (subvec (vec (take (* 2 c) (cycle l)))\n                    (+ r t)\n                    (+ r c t))))))","user":"54caaa48e4b057c6fda3a267"},{"problem":44,"code":"(fn [n v]\n    (cond\n        (> n 0)\n           (recur (dec n) (conj (vec (rest v)) (first v)))\n        (< n 0)\n            (recur (inc n) (cons (last v) (butlast v)))\n        :else\n            v))","user":"55975569e4b031d6649c9b8e"},{"code":"(fn [r s] \n  (let [r (mod r (count s))]\n    (apply concat (reverse\n    (if (pos? r) \n      (split-at r s)\n      (split-at (+ (count s) r) s))))))","problem":44,"user":"4f0397ee535dcb61093f6b30"},{"problem":44,"code":"(fn rot \n  ([amt coll] (rot amt coll (count coll) []))\n  ([amt coll num ret]\n    (if (= (count ret) num)\n      ret\n      (rot (mod (+ amt 1) num) coll num (conj ret (nth coll (mod amt num)))))))","user":"4f4aa932e4b0d56e7bb92c14"},{"code":"(fn [pos coll] (concat\n                (flatten\n                (reverse\n                 (split-at\n                  (mod pos (count coll))\n                  coll)))))","problem":44,"user":"4f7683dae4b0fbe0118ec56f"},{"code":"(fn [x coll]\n  (let [m (rem x (count coll))\n        n (if (< m 0)\n            (+ m (count coll))\n            m)]\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"50d86fe2e4b01f0871336e67"},{"code":"#(let [size (count %2)] (flatten(reverse(split-at (mod % size) %2))))","problem":44,"user":"4e6f8431535d5021c1a8961e"},{"code":"(fn rot [n s]\n  (let [m (mod n (count s))]\n  (concat (drop m s) (take m s))))","problem":44,"user":"4f611127e4b0defedf855fb4"},{"problem":44,"code":"#(->\n  (split-at (mod %1 (count %2)) %2)\n  reverse\n  flatten\n  )","user":"548b8a50e4b0e286459a11ff"},{"problem":44,"code":"(fn rotate-list [times alist]\n  (concat (take-last (- (count alist) (mod times (count alist))) alist) \n        (take (mod times (count alist)) alist)))","user":"542b37dbe4b0dad94371f287"},{"problem":44,"code":"(fn [k a] (let [[b c] (split-at (mod k (count a)) a)] (concat c b)))","user":"5628cb07e4b00e49c7cb47ef"},{"code":"(fn [n xs] (let [x (mod n (count xs))] (concat (drop x xs) (take x xs))))","problem":44,"user":"5128554ee4b03a34742b430a"},{"problem":44,"code":"#(if (< %1 0) (flatten (conj (drop-last (mod (- 0 %1) (count %2)) %2) (take-last (mod (- 0 %1) (count %2)) %2))) (flatten (conj (take (mod %1 (count %2)) %2) (drop (mod %1 (count %2)) %2))))","user":"53ed03f0e4b0d648e757f4bb"},{"problem":44,"code":"(fn rotate [n xs]\n  (cond (= n 0) xs\n        (< n 0) (rotate (inc n) (cons (last xs) (butlast xs)))\n        :else (rotate (dec n) (conj (into [] (rest xs)) (first xs)))))","user":"561d23e3e4b064ca9f4b16a5"},{"code":"(fn [d l] (apply concat \n                 (reverse (split-at\n                           (let [len (count l), r (rem d len)]\n                             (if (neg? r)\n                               (+ r len)\n                               r))\n                           l))))","problem":44,"user":"5163b06be4b055933a9ca030"},{"problem":44,"code":"(fn rotate [d coll]\n (cond (= d 0) coll\n       (< d 0) (reverse\n                (rotate (- d)\n                        (reverse coll)))\n       (> d 0) (rotate\n                (dec d)\n                (conj (into []\n                       (rest coll))\n                      (first coll))\n               )\n )\n)","user":"549a999be4b0f3d1d8e70f6f"},{"code":"#(let [x (mod %1 (count %2))]\n              (concat (drop x %2) (take x %2)))","problem":44,"user":"5115e112e4b0ce5098ee73c4"},{"code":"(fn [n xs]\n  (let [split-point \n    (if (pos? n) \n      (rem n (count xs))\n      (rem (inc (Math/abs n)) (count xs)))]\n    (flatten (reverse (split-at split-point xs)))))","problem":44,"user":"4e6b6294535d8ccf87e9ff11"},{"problem":44,"code":"(fn rotate-seq [n col]\n  (let [len (count col)]\n    (->> col\n         cycle\n         (drop (mod n len))\n         (take len))))","user":"5ecd1831e4b016b56eae0592"},{"problem":44,"code":"(fn [n c]\n  (let [k (mod n (count c))]\n    (concat (drop k c) (take k c))))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":44,"code":"(fn [rotation-degree c]\n   (let [r (mod (#(max % (- %)) rotation-degree) (count c))]\n    (if (< 0 rotation-degree)\n      (concat (drop r c) (take r c))\n      (concat (take-last r c) (drop-last r c)))))","user":"607bd80be4b0a637ed780379"},{"problem":44,"code":"#(let [lng (count %2) \n        n (if (<= %1 0) (+ (Math/abs %1) lng 1) %1)]\n    \t\t(take lng (drop n (cycle %2))))","user":"53a5c7ffe4b0ef122a8689c4"},{"code":"#(take (count %2)\n       (drop (+ (* 2 (count %2)) %)\n             (cycle %2)))","problem":44,"user":"4ebbc1f6535dfed6da9c6d72"},{"problem":44,"code":"#(let [m (mod %1 (count %2))\n       coll (split-at m %2)\n       result (concat (second coll) (first coll))]\n   result)","user":"55eb026de4b0121d4835fdb7"},{"problem":44,"code":"(fn rotate [n lis]\n  (if (> n 0)\n    (rotate (dec n) (concat (rest lis) [(first lis)]))\n    (if (< n 0)\n      (rotate (inc n) (concat [(last lis)] (drop-last lis)))\n      lis))\n  )","user":"574f1c24e4b02ea114799255"},{"problem":44,"code":"(fn [n c] \n  (let [l (mod n (count c))] \n    (concat (drop l c) (take l c))))","user":"5ab9fe71e4b073f17744269d"},{"code":"(fn rotseq [n l]\n  (cond\n   (zero? n) l\n   (neg? n) (rotseq (inc n) (concat [(last l)] (butlast l) ))\n   :else    (rotseq (dec n) (concat  (rest l) [(first   l)]))\n  )\n)","problem":44,"user":"4e720985535d5021c1a89655"},{"problem":44,"code":"(fn [r s] \n  (let [r (mod r (count s))]\n    (concat (drop r s) (take r s))))","user":"503f923fe4b00d1a725ff2ad"},{"problem":44,"code":"#(let [n (count %2)] ;; n == length of coll\n   (->> n\n        (mod %1) ;; rotating a sequence -k steps is the same as rotating it n-k steps\n        (nthrest (cycle %2) )\n        (take n)))","user":"5d2e5065e4b01671435dbcae"},{"problem":44,"code":"(fn [n x]\n  (take (count x)\n        (drop (mod n (count x))\n(cycle x))))","user":"577bcbd9e4b0d3393e5deb1b"},{"code":"(fn [o s]\n  (let [len (count s)\n        m-offset (mod o len)\n        l-offset (if (pos? m-offset) m-offset (+ len m-offset))]\n      (take len (drop l-offset (cycle s)))))","problem":44,"user":"5348cab4e4b084c2834f4a5e"},{"problem":44,"code":"(fn [x y]\n  (loop [num x\n         coll y\n         count (if (>= x 0) 0\n                            num)\n         newcoll []]\n    (if (>= x 0)\n    (cond (= count num) (concat coll newcoll)\n          (empty? coll) (recur num newcoll count [])\n          :else (recur num (rest coll) (inc count) (conj newcoll (first coll))))\n    (cond (= count 0) (concat newcoll coll)\n          (empty? coll) (recur num newcoll count [])\n          :else (recur num (drop-last coll) (inc count) (cons (last coll) newcoll))))))","user":"59e4fc25e4b08badc2a0c54f"},{"code":"(fn [n xs]\n  (let [cnt (count xs)\n         an (if (neg? n)\n                (- cnt (dec (mod n cnt)))\n                n)]\n    (drop an (take (+ an cnt) (cycle xs)))))","problem":44,"user":"50166470e4b052339a490e76"},{"problem":44,"code":"#_(omg the mod!!!!)\n\n(fn [n coll]\n  (let [rotation (mod n (count coll))\n        [a b] (split-at rotation coll)]\n\n    (concat b a) ))","user":"5665ef78e4b0e91d5f5c5664"},{"problem":44,"code":"(fn rotate [n l]\n    (let [nw (if (< n 0) (+ n (count l)) n)\n          nww (mod nw (count l))]\n      (concat (drop nww l) (take nww l))))","user":"603ae21de4b0d5df2af222fb"},{"code":"(fn [n xs]\n   (let [c (count xs)]\n     (take c (drop (+ c (rem n c)) (cycle xs)))))","problem":44,"user":"4dad938fc9a9d6ed1b99dc57"},{"code":"(fn [x l]\r\n  (let [c (count l)\r\n        y (mod x c)]\r\n      (take c (drop y (cycle l)))))","problem":44,"user":"507437c2e4b054001656acd0"},{"problem":44,"code":"(fn rot [b x] \n  (nth (iterate \n        #(if (pos? b) \n           (drop 1 (concat % (take 1 %))) \n           (drop-last 1 (concat (take-last 1 %) %))) \n        x)\n       (max b (- b)))\n  )","user":"5425d454e4b01498b1a71b13"},{"code":"(fn rotate[n x](let [r (mod n (count x))](concat (drop r x) (take r x))))","problem":44,"user":"52a1edd6e4b04e0c58e87be4"},{"code":"(fn rotate [n coll]\n  (if (= n 0)\n    coll\n    (if (< n 0)\n      (rotate (+ n 1) (cons (last coll) ((comp reverse rest reverse) coll)))\n      (rotate (- n 1) (reverse (cons (first coll) (reverse (rest coll))))))))","problem":44,"user":"522d0360e4b0806774ddfef7"},{"code":"(fn [n coll]\n  (let [k (mod n (count coll))]\n    (concat (drop k coll)\n            (take k coll))))","problem":44,"user":"523f1245e4b01c266ffa7f95"},{"code":"(fn [offset coll] \n  (for [ix (range (count coll))]\n    (nth coll (mod (+ ix offset) (count coll)))))","problem":44,"user":"534d5ab7e4b084c2834f4a9c"},{"code":"#((fn f [n p]\n  (if (> n 0)\n    (f (dec n) (concat (rest p) (list (first p))))\n    (if (< n 0)\n      (f (inc n) (cons (last p) (butlast p)))\n      p))) %1 %2)","problem":44,"user":"4fdc3065e4b05e33b9224f6b"},{"problem":44,"code":"(fn [n c] \n  (concat (drop (mod n (count c)) c) \n          (take (mod n (count c)) c)))","user":"54497569e4b032a45b8693d2"},{"problem":44,"code":"(fn [shift coll]\n    (let [size (count coll)\n          x (mod (+ shift size) size)]\n      (concat (drop x coll) (take x coll))))","user":"5d89427ae4b0915913b1d3b5"},{"problem":44,"code":"(fn [r l]\n  (let [modr (mod (Math/abs r) (count l))]\n    (if (>= r 0)\n      (let [pre (take modr l)\n            root (drop modr l)]\n        (concat root pre))\n      (let [post (take-last modr l)\n            root (drop-last modr l)]\n        (concat post root)))))","user":"602049b8e4b0bf4ca6b10961"},{"problem":44,"code":"(fn [n coll] \n  (if (zero? n) \n    coll \n    (if (pos? n) \n      (recur (dec n) (concat (rest coll) [(first coll)]))\n      (recur (inc n) (cons (last coll) (butlast coll))))))","user":"5112bbdde4b0350614f07a7c"},{"problem":44,"code":"(fn rotateSeq[n s] \n  (let [numOfShifts (mod n (count s))]\n    (concat (drop numOfShifts s) (take numOfShifts s))))","user":"577e54bbe4b0c8d87281f6e5"},{"problem":44,"code":"(fn [r col]\n  (let [direction (if (neg? r) :right :left)\n        n (inc (if (= :left direction) r (- 0 r)))]\n    (->> col\n         (iterate (fn [items]\n                    (if (= :left direction)\n                      (conj (vec (rest items)) (first items))\n                      (conj (drop-last items) (last items)))))\n         (take n)\n         last)))","user":"50978ca4e4b00ad8bab4e966"},{"problem":44,"code":"(fn [i xs] \n  (let [i (mod i (count xs))]\n    (concat (drop i xs) (take i xs))))","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":44,"code":"(fn fr [n v]\n  (->> (concat v v) (drop (mod (+ (count v) n) (count v))) (take (count v))))","user":"5d917ef0e4b0915913b1d402"},{"problem":44,"code":"(fn [n coll]\n  (let [my-coll (cycle coll)\n        my-drop (mod n (count coll))]\n    (take (count coll) (drop my-drop  my-coll)))\n  )","user":"564a560ae4b0284900eef654"},{"code":"(fn rotate [n coll]\n  (let [l (count coll)]\n    (map-indexed \n     (fn [idx item]\n       (nth coll (mod (+ idx n) l))) \n     coll)))","problem":44,"user":"52d51535e4b09f7907dd133a"},{"code":"(fn [n s]\n  (apply concat (reverse (split-at (mod n (count s)) s))))","problem":44,"user":"52950ab6e4b02ebb4ef7501a"},{"problem":44,"code":"(fn [n s]\n  (let [x (count s)\n        i (if (neg? n)\n              (+ x (rem n x))\n              (rem n x))]\n    (apply concat (reverse (split-at i s)))))","user":"51316a63e4b0431ba07e7feb"},{"code":"#(let [c (count %2) p (mod % c)]\n  (concat (drop p %2) (take p %2)))","problem":44,"user":"4ec812d9535d6d7199dd36f0"},{"code":"(fn [n s]\n  (let [m (mod n (count s))]\n    (concat (drop m s) (take  m s))))","problem":44,"user":"530bf87ee4b02e82168697d5"},{"problem":44,"code":"(fn [n xs] (let [c (count xs) n (rem n c)]\n                                 (cond (< n 0) (recur (+ c n) xs)\n                                       (> n 0) (concat (drop n xs) (take n xs))\n                                       :else xs)))","user":"5a16da30e4b0ff51aa4b31cc"},{"code":"(fn [n col]\r\n  (let [shift (mod n (count col))] \r\n  (concat (drop shift col) (take shift col))))","problem":44,"user":"508453abe4b0c98812d07891"},{"code":"(fn rotate [n xs]\n      (cond\n        (zero? n) xs\n        (pos? n)  (rotate (dec n) (concat (rest xs) [(first xs)]))\n        (neg? n)  (rotate (inc n) (concat [(last xs)] (butlast xs)))))","problem":44,"user":"5186134ce4b0da5a5be3bac7"},{"problem":44,"code":"(fn [n xs]\n    (flatten (list (take-last (- (count xs) (mod n (count xs)))  xs) \n                   (take (mod n (count xs))  xs))))","user":"563cce5be4b0bfe05bf1183f"},{"code":"(fn [qtd vc]\n    (let [cc (if (neg? qtd) (- (count vc) (dec qtd)) qtd)]\n      (loop [counter cc tv vc]\n        (if (zero? counter)\n          tv\n          (recur \n            (dec counter)\n            (concat (drop 1 tv) [(first tv)])\n          )\n        )\n      )\n    )\n  )","problem":44,"user":"4e8b73e4535d65386fec2120"},{"code":"(fn rr [steps lis]\n  (let [ww (fn rot [steps lis]\n  (if (< steps 0) \n    (rot (+ (count lis) steps) lis)\n  (if (= steps 0)\n    lis\n    (rot (dec steps) (cons (last lis) (butlast lis)))\n    )\n  )\n    )]\n    (ww (- steps) lis)\n    )\n  )","problem":44,"user":"4f2004a1535d64f6031464a7"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [len (count xs) m (mod n len)]\n    (concat (drop m xs) (take m xs))))","user":"569ad037e4b0542e1f8d144f"},{"code":"(fn rotate \n  ([total coll] (rotate total coll 0 coll) )\n  ([total coll actual result]\n    (cond \n      (= total actual) result\n      (> total 0) (recur total coll (inc actual) (concat (rest result) (list (first result))) ) \n      (< total 0) (recur total coll (dec actual) (concat (list (last result)) (butlast result)))\n\n)))","problem":44,"user":"4f038ed6535dcb61093f6b24"},{"problem":44,"code":"(fn [n sq]\n  (let [sz (count sq)\n        n1 (rem n sz)\n        n2 (if (neg? n1) (+ sz n1) n1)]\n    (concat (drop n2 sq) (take n2 sq))))","user":"5a512929e4b05d388ecb6be2"},{"code":"(letfn\r\n  [(rotate [pos coll]\r\n    (let [v (vec coll)\r\n          c (count v)\r\n          incr (if (neg? pos) c (- c))\r\n          n (first\r\n              (drop-while #(or (neg? %) (> % c))\r\n                (iterate #(+ % incr) pos)))]\r\n      (concat (subvec v n) (subvec v 0 n))))]\r\n  #(rotate %1 %2))","problem":44,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"(fn [n x] (let [m (mod n (count x))] (concat (drop m x) (take m x))))","problem":44,"user":"50223ee2e4b0846bc458ae48"},{"code":"(fn rot [n xs]                                                                                      \n  (let [n (mod n (count xs))]                                                                 \n    (if (pos? n)                                                                              \n      (concat (drop n xs) (take n xs))                                                        \n      (rot (+ (count xs) n) xs))))","problem":44,"user":"508a2c2fe4b016a2107004a1"},{"problem":44,"code":"(fn [n coll]\n   (let [c (count coll)]\n     (take c (drop (mod n c) (flatten (repeat coll))))))","user":"5e0d948fe4b099d064962f98"},{"code":"(fn [k s]\n  (let [k (rem k (count s))]\n    (cond\n      (pos? k)\n        (concat (drop k s) (take k s))\n      :else\n        (let [n (count s)\n              m (+ n k)]\n          (concat (drop m s) (take m s))))))","problem":44,"user":"4f2b0951e4b0d6649770a045"},{"code":"#(take (count %2) (nthrest (cycle %2) (+ (count %2) (mod %1 (count %2)))))","problem":44,"user":"50456731e4b01f6c9a8b236b"},{"problem":44,"code":"(fn [idx coll]\n  (take (count coll) (drop (mod idx (count coll)) (take (* 2 (count coll)) (cycle coll)))))","user":"55fe7e15e4b00f4cabc57651"},{"problem":44,"code":"(fn rotate [x xs]\n  (cond \n   (= x 0) xs\n    (> x 0) (rotate (- x 1) (concat (rest xs) [(first xs)]))\n    (< x 0) (rotate (+ x 1) (concat [(last xs)] (butlast xs)))))","user":"593910eae4b02506e01a29f4"},{"code":"(fn [n xs]\n  (let [ind (mod n (count xs))]\n  (concat\n   (drop ind xs)\n   (take ind xs))))","problem":44,"user":"51aa2b4fe4b04e3dc0c27b21"},{"code":"(fn rot [n col]\n  (if (< n 0)\n    (rot (+ (count col) n) col)\n    (if (= n 0)\n      col\n      (concat (rest (rot (- n 1) col)) (conj (empty col) (first (rot (- n 1) col))))\n    )\n  )\n)","problem":44,"user":"4f84400de4b033992c121c2e"},{"problem":44,"code":"(fn [largen target]\n  (let [\n    rotate #(concat (drop %1 %2) (take %1 %2))\n    n (mod largen (count target))\n  ] (cond\n      (= n 0) target\n      (> n 0) (rotate n target)\n      (< n 0) (rotate (+ (count target) n) target))))","user":"5ab5f60be4b073f177442643"},{"problem":44,"code":"(fn [n s]\n  (if (pos? n)\n    (concat (drop (mod n (count s)) s) (take (mod n (count s)) s))\n    (let [neg-idx (mod (- (count s) (Math/abs n)) (count s))]\n      (concat (drop neg-idx s) (take neg-idx s)))))","user":"5f431d32e4b0955706451fb5"},{"code":"(fn [r coll] ((fn [n] (map #(nth coll %) (map #(mod % n) (range (+ n r) (+ n n r))))) (count coll) ))","problem":44,"user":"51b1ef95e4b02f8f128bb95e"},{"code":"(fn [n lst] (let [n (mod n (count lst))] (concat (drop n lst) (take n lst))))","problem":44,"user":"4f1fd734535d64f6031464a5"},{"problem":44,"code":"(fn [n xs]\n  (let [len (count xs)\n        n (mod n len)]\n    (concat (drop n xs)\n            (take n xs))))","user":"57df2722e4b0bd073c20245e"},{"code":"#(let [l (count %2)\n       x (mod (+ % l) l)] (concat (drop x %2) (take x %2)))","problem":44,"user":"4efb2fd7535dced4c769f274"},{"problem":44,"code":"#(let [ml (count %2)\n      skip (mod % ml)]\n  (take ml (drop skip (cycle %2))))","user":"549a176ce4b0f3d1d8e70f69"},{"code":"(fn [n X]\n  (let [k (count X)\n        n (mod n k)]\n    (take k (drop n (cycle X)))))","problem":44,"user":"51ad0ab8e4b09397d510977b"},{"problem":44,"code":"(fn\n  [i v] \n  (\n    let [\n         m (mod i (count v))\n         s (split-at m v)\n         \n         ] \n    (apply concat[(apply vec(rest s)) (vec (first s))])\n  )\n)","user":"54ea2476e4b024c67c0cf83a"},{"code":"(fn rotate [n xs]\n\t  (let [normalized (mod (+ n (count xs)) (count xs))]\n\t       (reverse(concat (reverse (take normalized xs)) (reverse (drop normalized xs))))))","problem":44,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn __ [x s]\n  (take (count s)\n        (last (split-at\n               ((fn r [z] \n                  (if (< z 0) \n                    (r (+ (count s) z)) \n                    z)) x)\n               (cycle s)))))","problem":44,"user":"4ec9549d535d6d7199dd36fe"},{"problem":44,"code":"(fn [n l]\n  (let [[a b] (split-at (mod n (count l)) l)]\n    `[~@b ~@a]))","user":"50e5bca5e4b09ae9427b0e75"},{"problem":44,"code":"(fn [n coll]\n  (let [p (mod n (count coll))]\n    (concat (drop p coll) (take p coll))))","user":"5d27da09e4b092dab7f59c75"},{"code":"(fn rot [n s]\n  (let [len (count s)]\n    (if (pos? n)\n      (take len (drop n (cycle s)))\n      (take len (drop (- len (dec n)) (cycle s))))))","problem":44,"user":"4f0ef874535d0136e6c22328"},{"code":"(fn [n xs] \n      (let [len (count xs)]   \n        (take len \n            (drop (mod n len) \n                       (cycle xs) ))))","problem":44,"user":"5271b940e4b03e8d9a4a73fb"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)\n        n (rem n c)\n        i (if (>= n 0) n (- c (Math/abs n)))]\n    (concat (drop i coll) (take i coll))))","user":"565654dae4b0f9d632dd849f"},{"code":"(fn \n  [n coll]\n    (cond \n      (zero? n) coll\n      (> 0 n) (recur (inc n) (cons (last coll) (butlast coll))) \n      :else (recur (dec n) (concat (rest coll) (list (first coll))))))","problem":44,"user":"4fd16778e4b04c3a95aa040f"},{"problem":44,"code":"(fn [n col]\n  (let [m (if (> n 0) n (+ (count col) n))\n        head (take (mod m (count col)) col)\n        tail (drop (mod m (count col)) col)]\n    (concat tail head)))","user":"54c94376e4b045293a27f665"},{"problem":44,"code":"(fn rotate [n coll]\n   (let [offset (mod n (count coll))\n         c coll\n         front (drop offset c)\n         back (take offset c)]\n     (concat front back)))","user":"5e976fa8e4b0157ca96647cf"},{"code":"#(let [c (count %2) d (if (pos? %) % (+ c (rem % c)))]\n     (take c (drop d (cycle %2))))","problem":44,"user":"4ee88bfb535d93acb0a66881"},{"code":"(fn [n coll]\n  (->> coll\n    cycle\n    (drop (if (neg? n) (+ (* 2 (count coll)) n) n))\n    (take (count coll))))","problem":44,"user":"4e6dd51b535d5021c1a895f6"},{"code":"(fn [index sequ]\n   (cond \n     (and (neg? index) (< (- index) (count sequ)) )\n    \t(\n          let [index (- (count sequ)(- index))] (flatten (cons (drop index sequ) (take index sequ)))\n         )\n     \n     (> index (count sequ))\n    \t(let [index (- index (count sequ))] (flatten (cons (drop index sequ) (take index sequ))))\n    \n     (and (neg? index) (> (- index) (count sequ)) )\n         (let [index (- (- index) 2)] (flatten (cons (drop index sequ) (take index sequ))))\n    \n     (pos? index)\n         (flatten (cons (drop index sequ) (take index sequ)))\n   )\n  )","problem":44,"user":"50fa0dcee4b07934dda8b0bb"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n   (concat (drop n %2)\n           (take n %2)))\n\n;(fn [n ls]\n;  (let [num-elems (count ls)]\n;    (take num-elems (drop (mod n num-elems) (cycle ls)))))","user":"52f3568fe4b05e3f0be25f0e"},{"code":"(fn [n coll]\r\n  (let [l (count coll)\r\n        d (mod n l)]\r\n    (letfn [(s [] (lazy-cat coll (s)))]\r\n      (take l (drop d (s))))))","problem":44,"user":"4fb37882e4b081705acca2a0"},{"problem":44,"code":"(fn [n xs]\n    (->> (cycle xs)\n         (drop (if (pos? n) n (mod (- (count xs) (- n)) (count xs))))\n         (take (count xs))))","user":"5c3ec6dbe4b08cd430848e8a"},{"code":"(fn yoba\n  [n xs]\n  (cond\n   (> n (count xs)) (yoba (- n (count xs)) xs)\n   (>= n 0) (concat (drop n xs) (take n xs))\n   (< n 0) (yoba (+ (count xs) n) xs)))","problem":44,"user":"50657858e4b0deb87685059a"},{"problem":44,"code":"#( let [n (mod %1 (count %2))  m (- (count %2) n) ]  (into  (vec (take-last m %2))   (take n %2)   ) )","user":"5dd69c8ce4b0948ae9d9ad83"},{"code":"(fn [x sq]\n  (let [n (count sq)]\n    (take n (drop (mod x n) (cycle sq)))))","problem":44,"user":"4f0c4518535d0136e6c2230b"},{"code":"(fn my [n, l]\n   (let [m (mod  n (count l))]\n     (let [i (if\n               (< m 0)\n               (+ (count l) m)\n               m\n               )\n           ]\n       (concat (drop i l) (take i l))\n       )\n     )\n   )","problem":44,"user":"51b5a6e0e4b0f094dd986fce"},{"problem":44,"code":"#(concat\n  (drop (mod %1 (count %2)) %2)\n  (take (mod %1 (count %2)) %2))","user":"51a3be77e4b0e77c4ca60bf8"},{"problem":44,"code":"(fn [n coll]\n  (let [n (rem n (count coll))]\n    (if (>= n 0)\n  \t(into (apply vector (drop n coll)) (apply vector (take n coll)))\n    (into (apply vector (drop (+ (count coll) n) coll)) (apply vector (take (+ (count coll) n) coll)))\n  )\n )\n)","user":"5de6484ce4b0986d99407f66"},{"code":"(fn ! [rot s] \n   (if (neg? rot)\n     (reverse (! (- rot) (reverse s)))\n     (if (> rot 0)\n       (! (dec rot) (conj (vec (rest s))(first s)))\n       s\n     )\n   )\n)","problem":44,"user":"51db8244e4b0e067a9bbadc7"},{"code":"(fn problem-44 [whence xs]  \n  (letfn [(rotate [count s]\n                  (loop [remainder count\n                         acc s]\n                    (if (= remainder 0)\n                     acc\n                     (recur (dec remainder)\n                      (reverse (conj (reverse (next acc)) (first acc))))\n                    )))]\n    (if (neg? whence)\n      (reverse (rotate (- 0 whence) (reverse xs)))\n      (rotate whence xs))))","problem":44,"user":"52319066e4b0e2e8de81d1e9"},{"problem":44,"code":"(fn [x coll]\n   (if (> x 0)\n     (apply concat (reverse (split-at (mod x (count coll)) coll)))\n     (recur (inc (- 0 x)) coll)))","user":"5de7e7cae4b0986d99407f7a"},{"code":"(fn [a b] \n  (let [z (mod a (count b))]\n  (concat \n    (drop z b)\n    (take z b))))","problem":44,"user":"509f3bc9e4b08df8156e9e39"},{"problem":44,"code":"#(take (count %2) (nthrest (cycle %2) (if (neg? %1)\n                                              (inc (* -1 %1))\n                                              %1)))","user":"56671a4de4b04acd4f672dca"},{"code":"(fn solution [k0 s]\n  (let\n    [k (mod k0 (count s))]\n    (if\n      (< k 0)\n      (let [k1 (- k)] (concat (take k s) (drop k s)))\n      (concat (drop k s) (take k s))\n    )\n  )\n)","problem":44,"user":"52b49aebe4b0c58976d9ad2b"},{"problem":44,"code":"(fn [n coll](\n              apply concat (reverse (split-at (mod n (count coll)) coll))\n              ))","user":"546280d8e4b01be26fd746b0"},{"problem":44,"code":"(fn [n a-vec]\n;  \"O NOES!\")\n  (let [nrot (mod n (count a-vec))]\n    (loop [ct nrot\n           acc (vec a-vec)]\n      (if (= ct 0)\n        acc\n        (recur (dec ct) (conj (subvec acc 1) (first acc)))))))","user":"59a40f10e4b066c664927d4a"},{"problem":44,"code":"(fn [pl s]\n\t((fn [index acc]\n\t\t(if (= (count s) (count acc)) (reverse acc)\n\t\t(recur (mod (inc index) (count s)) (conj acc (nth s (mod index (count s))))))\n\t) (mod pl (count s)) '())\n)","user":"5cfd5a93e4b0cc9c91588168"},{"problem":44,"code":"(fn [nrots seq] (loop [rotated (into [] seq) rotsleft (mod nrots (count seq))] (if (zero? rotsleft) rotated (recur (conj (into [] (rest rotated)) (first rotated)) (dec rotsleft)))))","user":"5e1cc888e4b0dc959400853d"},{"code":"#(let [n (count %2)]\n      (take n \n\t        (drop (mod (+ %1 n) n) \n\t              (mapcat identity (repeat %2)))))","problem":44,"user":"523a9fc9e4b081681ca7adca"},{"problem":44,"code":"(fn [ n v](take (count v) (drop (mod n (count v)) (cycle v))))","user":"57408f87e4b05c31a32c0856"},{"code":"#(->> (concat %2 %2) (drop (mod %1 (count %2))) (take (count %2)))","problem":44,"user":"52e3e6a8e4b09f7907dd1448"},{"code":"#((fn [[a b]] (flatten [b a])) (split-at (mod % (count %2)) %2))","problem":44,"user":"51933b41e4b0c663c5d86ca2"},{"problem":44,"code":"(fn [l c]\n  (let [m (loop [a l]\n            (if (>= a 0)\n              a\n              (recur (+ a (count c)))))\n        n (loop [b m]\n            (if (<= b (count c))\n              b\n              (recur (- b (count c)))))\n        start (map #(nth c %) (range n (count c)))\n        end (map #(nth c %) (range 0 n))]\n    (concat start end)))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn rotate [n x]\n            (if (or (empty? x) (= n 0))\n              x\n              (if (= n 1)\n                (conj (vec (rest x)) (first x))\n                (if (= n -1)\n                  (concat (vector (peek (vec x))) (pop (vec x)))\n                (if (pos? n)\n                  (if (= (mod n (count x)) 0)\n                    x\n                    (rotate (- n 1) (conj (vec (rest x)) (first x))))\n                  (if (= (mod (- 0 n) (count x)) 0)\n                    x\n                    (rotate (+ n 1) (concat (vector (peek (vec x)))  (pop (vec x))))))))))","problem":44,"user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn rotate\n  [pos v]\n  (let [idx (mod pos (count v))]\n    (concat (subvec (vec v) idx)\n            (subvec (vec v) 0 idx))))","problem":44,"user":"4f8bbb27e4b02e764a0a5182"},{"code":"(fn [i s] (let [n (mod i (count s))] (if (neg? n) (concat (take-last (- n) s) (drop-last (- n) s)) (concat (drop n s) (take n s)))))","problem":44,"user":"504e9f5ce4b069badc5a33bd"},{"problem":44,"code":"(fn [a b]\n  (loop [a a b b]\n    (if (zero? a)\n      b\n      (if (> a 0)\n        (recur (dec a) (concat (rest b) (list (first b))))\n        (recur (inc a) (concat (list (last b)) (reverse (rest (reverse b)))))))))","user":"58e90258e4b056aecfd47cfd"},{"code":"(fn [x ys] (let [r (flatten (repeat 2 ys))\n                 d (mod x (count ys))]\n             (take (count ys) (drop d r))))","problem":44,"user":"510c123be4b078ea7192110e"},{"code":"(fn [n s]\n  (let [l (count s)]\n    (if (> n 0)\n      (take l (drop n (cycle s)))\n      (take l (drop (mod n l) (cycle s))))))","problem":44,"user":"4f1d1299535d64f603146487"},{"problem":44,"code":"(fn [num coll] (take (count coll) (drop (mod num (count coll)) (cycle coll))))","user":"5cf68090e4b0b71b1d808a59"},{"problem":44,"code":"(fn rotate-sequence [n coll]\n  (let [reversed (reverse coll)\n        base-count (- (count coll) (Math/abs n))\n        rotate-vec (fn [n coll] (if (pos? n)\n                                  (iterate #(concat (rest %) [(first %)]) coll)\n                                  (iterate #(cons (last %) (drop-last %)) coll)))]\n    (nth (rotate-vec n coll) (Math/abs n))))","user":"52c1cc8be4b07a9af579236b"},{"problem":44,"code":"(fn\n  [x coll]\n  (let [n (count coll)\n        rotate_by (mod x n)]\n    (->> (cycle coll)\n        (drop rotate_by)\n        (take n))\n    ))","user":"5d5a79cce4b02ba5928a6833"},{"problem":44,"code":"(fn  [by seq-in]\n  (if (neg? by)\n    (reduce concat (reverse(split-at (+ \n                                      (count seq-in) \n                                      (* -1 (mod (Math/abs by) (count seq-in))))\n                                   seq-in)))\n    (reduce concat (reverse(split-at (mod by (count seq-in)) seq-in)))))","user":"56391b7ce4b0bfe05bf117ef"},{"problem":44,"code":"(fn\n  [s in]\n  (let [n (count in)\n        [l r] (split-at (mod s n) in)]\n    (concat r l)))","user":"597d0e43e4b0dbe32238d095"},{"problem":44,"code":"(fn [n coll] (\n  take (count coll) (drop (mod n (count coll)) (cycle coll))\n))","user":"56f9b953e4b07572ad1a88b9"},{"code":"(fn [n c] (let [o (if (< n 0) (- 1 n) n)] (drop o (take (+ (count c) o) (cycle c)))))","problem":44,"user":"5268f5b4e4b03e8d9a4a71cf"},{"problem":44,"code":"(fn [N col]\n           (let [N (mod N (count col))]\n             (concat (drop N col) (take N col))))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":44,"code":"(fn [n s]\n  (let [m (count s)\n        p (mod n m)]\n    (flatten (reverse (split-at p s)))))","user":"54084089e4b0addc1aec66c7"},{"code":"(fn[num list](concat\n               (drop(mod num (count list)) list)\n               (take(mod num (count list)) list)))","problem":44,"user":"532631e1e4b09d4e7a9b54ea"},{"code":"(fn [i s]\n  (let [i (mod i (count s))]\n    (concat (drop i s) (take i s))))","problem":44,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn [r s]\n  (loop [counter r result s]\n    (cond\n      (< 0 counter) (recur (dec counter) (concat (rest result) [(first result)]))\n      (> 0 counter) (recur (inc counter) (concat [(last result)] (drop-last result)))\n      :else result)))","problem":44,"user":"5300b750e4b0d8b024fd3711"},{"problem":44,"code":"(fn rotate\n  [tics coll]\n  (cond\n        (= tics 0) coll\n        (< tics 0)\n          (recur (inc tics)\n                 (cons (last coll) (butlast coll)))\n        (> tics 0)\n          (recur (dec tics)\n                 (concat (rest coll) (list (first coll))))))","user":"5ecfd429e4b016b56eae05a9"},{"problem":44,"code":"(fn [n s] (loop [ret (vec s) i n] (print ret) (if (= i 0) ret (if (< i 0) (recur (cons (last ret) (take (- (count ret) 1) ret)) (+ i 1)) (recur (conj (vec (rest ret)) (first ret)) (- i 1))))))","user":"59468de7e4b07ddc2dafad88"},{"problem":44,"code":"(fn [x list] (\n              if (> x 0)\n              (\n              concat \n              (drop (mod x (count list)) list) \n              (take (mod x (count list)) list)\n;              (take (- (- (count list) (mod x (count list))) 1) list)\n              )\n              (\n              concat \n              (drop (- (count list) (mod (* -1 x) (count list))) list) \n              (take (- (count list) (mod (* -1 x) (count list))) list)\n              )\n              )\n  )","user":"570eeb66e4b0b0fb43fd06fa"},{"code":"(fn [n s]\n  (let [ new-n (mod n (count s)) ]\n  (cond\n    (> 0 new-n) (concat (take new-n s) (drop new-n s))\n  (< 0 new-n) (concat (drop new-n s) (take new-n s))\n\t:else s)))","problem":44,"user":"4dd1de4d535dae65d5c462d7"},{"code":"(fn rotate [n coll]\n  (let [c (count coll)\n        n (mod n c)]\n    (concat (drop n coll)\n            (take n coll))))","problem":44,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":44,"code":"#(map-indexed (fn [idx x] (nth %2 (mod (+ idx %1) (count %2)))) %2)","user":"57b1b8c8e4b0fbc9809a2756"},{"code":"(fn [x xs] (let [x2 (mod x (count xs))] (concat (nthrest xs x2) (take x2 xs))))","problem":44,"user":"5065faf9e4b0313a384e5645"},{"problem":44,"code":"(fn [splitpoint seq]\n  (let [actual-splitpoint (mod splitpoint (count seq))]\n    (concat (drop actual-splitpoint seq)\n            (take actual-splitpoint seq))))","user":"5b47874be4b02d533a91bc70"},{"code":"(fn [rollby coll]\n   (let [size (count coll) pos (mod rollby size)]\n(take size (nthrest (apply concat (repeat 2 coll)) pos))))","problem":44,"user":"5202cfe7e4b030ee0c5b2702"},{"problem":44,"code":"(fn [p a] \n  (let [c (count a)\n        i (if (> p 0) p (+ c p))\n        [x y] (split-at (mod i c) a)]\n          (concat y x)\n  ))","user":"5957cc41e4b066ee0a44af76"},{"problem":44,"code":"(fn [n xs] \n  (let [n2 (mod n (count xs))]\n    (concat (drop n2 xs) (take n2 xs))))\n\n; can also do split-at followed by concat\n; #(apply concat (reverse (split-at (mod %1 (count %2)) %2)))","user":"541e2ff8e4b01498b1a71a8a"},{"problem":44,"code":"(fn [d xs]\n  (if (> d 0)\n    (reduce \n     (fn [acc _] (concat  (rest acc)  [(first acc)])) \n     xs (range d))\n    (reduce \n     (fn [acc _] (concat [(last acc)]  (butlast acc))) \n     xs (range (- d)))))","user":"5a68f374e4b0512ff01cda05"},{"problem":44,"code":"(fn [n s]\n  (let [n (+ n (count s) (count s))]    \n      (loop [i 0\n             r (vec  s)]\n        (if (= i n)\n          r\n          (recur (+ i 1) (vec (rest (conj r (first r)))))\n         )\n       )\n   )\n )","user":"5e265173e4b05b4b01516175"},{"code":"(fn rotarSeq3 [nume lis] \r\n      (take (count lis) (drop (mod nume (count lis)) (cycle lis)))\r\n\t)","problem":44,"user":"4dadca03c9a9d6ed4199dc57"},{"problem":44,"code":"(fn prob44 [n s]\n  (let [len (count s)\n        idx (cond \n             ;; (< n 0) (- len (mod (- 1 n) len))\n             (< n 0) (+ len (mod n (- len)))\n             (> n len) (mod n len)\n             :else n)]\n    (lazy-cat (drop idx s) (take idx s))))","user":"4ebbff41535dfed6da9c6d78"},{"code":"(fn f [n s]\n  (let [n* (rem n (count s))]\n    (if (pos? n*)\n      (concat (drop n* s) (take n* s))\n      (concat (take-last (unchecked-negate n*) s) (drop-last (unchecked-negate n*) s))\n      )))","problem":44,"user":"51d662fce4b0154f82ab92ef"},{"code":"(fn [nn s]\n       (let [c (count s)\n             n (mod nn c)]\n       (cond\n        (>= n 0) (concat (drop n s) (take n s))\n        (< n 0) (let [m (- n)]\n                  (concat (drop (- c m) s) (drop-last m s))))))","problem":44,"user":"4e5676b2535d8a8b8723a282"},{"code":"(fn [n l] (apply concat (reverse (split-at (mod n (count l)) l))))","problem":44,"user":"53767991e4b06839e8705e25"},{"code":"(fn [n xs] (let [n (mod n (count xs))] (concat (drop n xs) (take n xs))))","problem":44,"user":"50cf21dee4b0e61f11ddcd8b"},{"problem":44,"code":"(fn [n c]\n  (let [cnt (count c)\n        n' (if (>= n 0) n (+ cnt (rem n cnt)))]\n    (take cnt (drop n' (cycle c))) ))","user":"56441634e4b0018b46ad8c08"},{"code":"#(take (count %2) (drop (mod % (count %2)) (concat %2 %2)))","problem":44,"user":"4ecbb249535df97575fdabdf"},{"problem":44,"code":"(fn rs [n xs]\n  (let [f (fn normalize [cnt n]\n                 (let [norm (cond (> n cnt) (- n cnt)\n                                       (< n 0) (+ cnt n)\n                                       :else n)]\n                   (if (neg? norm)\n                     (normalize cnt norm)\n                     norm)))\n        cursor (f (count xs) n)]\n    (concat\n     (drop cursor xs)\n     (take cursor xs))))","user":"5641296de4b08d4f616f5ef4"},{"problem":44,"code":"(fn rotate [n coll] \n  (let [m (mod n (count coll))]\n    (concat (drop m coll) (take m coll))))","user":"5f6796d2e4b02876ed9fd036"},{"code":"(fn rotate [n seq]\n        (if (> n 0)\n          (rotate (- n (count seq)) seq)\n          (loop [n n\n                 seq seq]\n            (if (zero? n)\n              seq\n              (recur (inc n) (cons (last seq) (drop-last seq)))))))","problem":44,"user":"5294e44de4b02ebb4ef75016"},{"problem":44,"code":"(fn [n s]\n  (flatten (reverse (split-at (mod n (count s)) s))))","user":"56228d00e4b03f08ee9a9227"},{"problem":44,"code":"(fn [x lat ]\n( let [ len (count lat)\n        n (if (> len x)\n                (->> (take-while (partial > len) (iterate #(+ % len) x)) last )\n                (->> (take-while (partial < 0) (iterate #(- % len) x)) last ))   \n          left (take n lat) \n          right (drop n lat)] \n          (concat right left) ))","user":"55aa1637e4b0988bba2ad949"},{"code":"(fn rot [r i s]\n  (if (= i 0) \n    (if r (reverse s) s )\n    (if (< i 0)\n      (rot true (- 0 i) (reverse s))\n      (rot r (- i 1) (concat (rest s) [(first s)]))\n    ))) false","problem":44,"user":"4eb9c82d535dfed6da9c6d5c"},{"problem":44,"code":"(fn rotate [n col]\n  (cond (< n 0) (recur (+ (count col) n) col)\n        (> n (count col)) (recur (- n (count col)) col)\n        (> n 0) (concat (drop n col) (take n col))\n        :else col))","user":"54af6fb0e4b09f271ff37d08"},{"problem":44,"code":"; (fn [i xs]\n;  (let [elem-count (count xs)]\n;    (take elem-count (drop (mod i elem-count) (cycle xs)))))\n  \n(fn [i xs]\n  (let [j (mod i (count xs))]\n    (concat (drop j xs)\n            (take j xs))))","user":"56255e2de4b00a550fc90297"},{"problem":44,"code":"(fn [mov coll] (let [n (count coll) rmov (rem mov n) mov1 (+ rmov n) mov2 (- rmov n)]\n                 (cond \n                  (and (> rmov 0) (<= rmov n))\n                  (concat (drop rmov coll) (take rmov coll))\n                  (> rmov n)\n                  (concat (drop mov2 coll) (take mov2 coll))\n                  (<= rmov 0)\n                  (concat (drop mov1 coll ) (take mov1 coll)))))","user":"57c6aa0be4b05aa3c4741cf7"},{"problem":44,"code":"(fn reverse-coll [num coll]\n  (loop [counter (count coll) item (mod num (count coll)) my-coll []]\n    (if (pos? counter)\n      (recur (- counter 1) (mod (inc item) (count coll)) (conj my-coll (nth coll item)))\n      my-coll)))","user":"54d0cedde4b0e8a36923e5d2"},{"problem":44,"code":"(fn [n s]\n  (concat (drop (mod n (count s)) s)\n          (take (mod n (count s)) s)))","user":"5800ab1ee4b0a837a8b30c41"},{"problem":44,"code":"(fn [num xs]\n    (let [len (count xs)\n          n (mod num len)]\n      (loop [n n xs (vec xs) acc []]\n        (if (zero? n)\n          (apply conj (vec xs) acc)\n          (recur (dec n) (rest xs) (conj acc (first xs)))))))","user":"551a21ece4b091ff45eda993"},{"problem":44,"code":"(fn [num sq]\n  (let [len (count sq)\n        n (if (or (zero? num) (pos? num)) (rem num len)\n              (+ len (rem num len)))]\n    (prn n)\n   (concat (drop n sq) (take n sq))))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":44,"code":"(fn rev [n x] (cond (< n 0) (rev (+ n (count x)) x) (> n (count x)) (rev (- n (count x)) x) :else (concat (drop n x) (take n x))))","user":"5acd1a43e4b0e27600da7823"},{"problem":44,"code":"(fn [n ls]\n  (let [s (cycle ls)\n        l (count ls)]\n    (take l (drop (+ l (mod n l)) s))))","user":"577abecfe4b0d3393e5deb06"},{"problem":44,"code":"(fn rotate[n s]\n  (cond \n   (zero? n) s\n   (< n 0) (recur (inc n) (concat (list (last s)) (butlast s)))\n   :else (recur (dec n) (concat (rest s) (list (first s))))))","user":"4fd4bddce4b0d4de60cee36e"},{"code":"(fn [amount coll]\n  (if (neg? amount)\n    (take (count coll) (drop (inc (Math/abs amount)) (cycle coll)))\n    (take (count coll) (drop amount (cycle coll)))))","problem":44,"user":"4f6fd91ae4b07046d9f4efed"},{"code":"(fn [n, sequence]\n  (let [\n    offset (mod (if (neg? n) (- n) n) (count sequence))\n    shift-left (concat (drop offset sequence) (take offset sequence))\n    shift-right (concat (take-last offset sequence) (drop-last offset sequence))]\n  (if (neg? n)\n    shift-right\n    shift-left)))","problem":44,"user":"50a01937e4b08df8156e9e47"},{"problem":44,"code":"(fn rot [n s] \r\n  (if (< n 0)  \r\n      (reverse (rot (- 0 n) (reverse s))) \r\n      (let [r (mod n (count s))]\r\n           (concat (nthrest s r) (take r s)))))","user":"579d9601e4b05b1deef9ae18"},{"code":"#(let [cyl (cycle %2) cnt (count %2)]\n  (take cnt (drop (if (pos? %1) %1 (- cnt -1 %1)) cyl)))","problem":44,"user":"4ec2f192535dcc7ae8597d4c"},{"problem":44,"code":"#(take (count %2) (drop\n\n                     (if (< %1 0)\n                       (+ %1 (* (inc (quot (Math/abs %1) (count %2))) (count %2)))\n                       %1)  \n                         \n                         (cycle %2)))","user":"5fd361f2e4b07e53c2f3f04e"},{"problem":44,"code":"#(let [r (mod %1 (count %2))] (concat (nthrest %2 r) (take r %2)))","user":"573ce277e4b05c31a32c080b"},{"problem":44,"code":"(fn shift [n xs]\n    (cond (> n 0) (let [[head & r] xs] (shift (- n 1) (concat r [head])))\n          (< n 0) (let [r (drop-last xs) l (last xs)] (shift (+ n 1) (concat [l] r)))\n          :else xs\n        ))","user":"59adec09e4b0e1f4e384c897"},{"problem":44,"code":"(fn [at coll]\n  (let [m (mod at (count coll)) x (if (< m 0) (+ (count coll) m) m) splits (split-at x coll)]\n    (apply conj (apply vector (get splits 1)) (get splits 0))\n  )\n)","user":"54aa373de4b09f271ff37cb6"},{"problem":44,"code":"(fn rotate-sequence [n xs]\n  (->> (concat xs xs)\n       (drop (mod n (count xs)))\n       (take (count xs))))","user":"56efc9fde4b04a395b9a0464"},{"problem":44,"code":"(fn[n coll]\n  (let [[before after] (split-at (mod n (count coll)) coll)]\n    (concat after before)))","user":"5472cba1e4b094393f72dd7a"},{"problem":44,"code":"(fn rotate [n s]\n  (cond\n    (> n 0) (let [r (rotate (- n 1) s)] (concat (rest r) [(first r)]))\n    (< n 0) (let [r (rotate (+ n 1) s)] (cons (last r) (butlast r)))\n    (= n 0) s))","user":"581e8b86e4b04b46fc4b0f2b"},{"code":"(fn [n coll]\n  (let [n (mod n (count coll))]\n    (if (>= n 0)\n        (concat (drop n coll) (take n coll))\n        (concat (reverse (take (- n) (reverse coll))) (reverse (drop (- n) (reverse coll)))))))","problem":44,"user":"5338e33fe4b0e30313ee6ca1"},{"problem":44,"code":"(fn [rot xs]\n  (let [maybe-reverse (if (pos? rot) identity reverse)\n        absrot (max rot (- rot))]\n      (maybe-reverse (drop absrot (take (+ absrot (count xs)) (cycle (maybe-reverse xs)))))))","user":"504f5804e4b0a02f9cffde72"},{"code":"(fn [move coll]\n  (let [shift-left (mod move (count coll) )]\n\t  (concat (drop shift-left coll) (take shift-left coll))))","problem":44,"user":"4e6a4edd535d8ccf87e9fec4"},{"problem":44,"code":"(fn [n seqq]\n  (let[c (count seqq)\n       t (mod n c)]\n    (concat (drop t seqq) (take t seqq))))","user":"57bd960fe4b05aa3c4741c52"},{"problem":44,"code":";; rotates a sequence either way\n(fn rotate-seq [rotation coll]\n  (if (> rotation 0) (\n    (fn rotate-left [rotation coll]\n  \t\t(loop [rotate rotation tmp-coll coll]\n    \t\t(if (= rotate 0)\n      \t\t\ttmp-coll\n      \t\t\t(recur (dec rotate) (concat (rest tmp-coll) [(first tmp-coll)])))))\n \trotation coll)\n    ((fn rotate-right [rotation coll]\n  (loop [rotate rotation tmp-coll coll]\n    (if (= rotate 0)\n      tmp-coll\n      (recur (inc rotate) (cons (last tmp-coll) (butlast tmp-coll))))))\n rotation coll)))","user":"5852801ee4b0b7285a6f4eb1"},{"problem":44,"code":"#(let [c (count %2) n (mod (+ c %1) c)]\n   (concat (drop n %2)(take n %2)))","user":"5639e878e4b0bfe05bf117f7"},{"code":"(fn [n s]\n  (take (count s) (drop (mod n (count s)) (cycle s))))","problem":44,"user":"4ea5e794535d7eef308072df"},{"code":"#(let [n (mod % (count %2))]\n  (concat (drop n %2) (take n %2)))","problem":44,"user":"4f06dcad535dcb61093f6c16"},{"problem":44,"code":"(fn [n coll]\n     (let [len (count coll)\n           n (mod n len)\n           c (split-at n coll)]\n         (concat (second c) (first c))))","user":"548ade6de4b0e286459a11f6"},{"problem":44,"code":"(fn [n xs]\n  (let [ls (mod n (count xs))]\n    (concat (drop ls xs) (take ls xs))))","user":"4e68c465535d8ccf87e9fe8a"},{"code":"#(\n  let [ cnt  (mod %1 (count %2))\n         end  (drop cnt %2)\n         beg  (take cnt %2)\n       ]\n     (concat end beg)\n)","problem":44,"user":"504eb604e4b069badc5a33c4"},{"problem":44,"code":"(fn\n  [n c]\n  (apply concat (reverse (split-at (mod n (count c)) c))))","user":"54edc818e4b024c67c0cf865"},{"problem":44,"code":"(fn rotate [x s]\n  (let[ c (count s)\n         y (mod (+ x c) c)\n        ]\n   (seq (into (into [] (take-last (- c y) s)) (take y s))) \n    ))","user":"5c9b848fe4b048ec896c5acf"},{"code":"(fn [d s] (let [c (count s)] (for [x (range c)] (nth s (mod (+ x d) c)))))","problem":44,"user":"53512bc6e4b084c2834f4ae1"},{"code":"(fn[x y](take (count y)(drop (mod x (count y))(cycle y))))","problem":44,"user":"4ed2dd98535d44c135fd68e2"},{"problem":44,"code":"(fn rotate\n  [n xs]\n  (let [offset (rem n (count xs))]\n    (cond \n      (> offset 0) (concat (drop offset xs) (take offset xs))\n      (= offset 0) xs\n      :else (concat (take-last (Math/abs offset) xs)\n                    (drop-last (Math/abs offset) xs)))))","user":"590e5e8ae4b047aa04b19a25"},{"code":"(fn [move coll]\n  (if (neg? move)\n    (concat (drop (+ (count coll) (rem move (- (count coll)))) coll) (take (+ (count coll) (rem move (- (count coll)))) coll))\n    (concat (drop (rem move (count coll)) coll) (take (rem move (count coll)) coll))\n    )\n  )","problem":44,"user":"50f8615ae4b0aafb827eb1fa"},{"problem":44,"code":"(fn [n col]\n  (let [c (count col)\n        t (mod n c)\n        b (- c t)]\n    (concat (nthnext col t) (take t col))))","user":"5bd7b8b8e4b0ed4b8aab4bc6"},{"problem":44,"code":"(fn [n xs]\n   (let [i (mod n (count xs))]\n    (flatten (reverse (split-at i xs)))\n    )\n  )","user":"589037b4e4b00487982d51d0"},{"problem":44,"code":"(fn [num coll]\n  (let [amt (mod num (count coll)) pos (split-at amt coll) neg (split-at (- (count coll) amt) coll)]\n    (cond \n      (> amt 0) (concat (second pos) (first pos))\n      (< amt 0) (concat (second neg) (first neg)) \n      :else coll)))","user":"5896735fe4b00487982d529d"},{"code":"#(let [i (mod % (count %2))]\n   (concat (drop i %2) (take i %2)))","problem":44,"user":"4f1d1d95535d64f603146488"},{"code":"(fn rotate [n s]\n  (let [len (count s)\n        n (if (>= n 0) \n            (rem n len) \n            (+ len (- (rem (Math/abs n) len))))\n        ]\n    (concat (drop n s) (take n s))))","problem":44,"user":"529a73bde4b02ebb4ef75096"},{"code":"(fn rot [n l] (letfn [(rotr [x] (let [e (first (reverse x)) l (reverse (rest (reverse x)))] (cons e l)))\n                                (rotl [x] (let [e (first x) l (rest x)] (reverse (cons e (reverse l)))))\n                                (rotrn [n x] (cond (= n 0) x :else (rotr (rotrn (- n 1) x))))\n                                (rotln [n x] (cond (= n 0) x :else (rotl (rotln (- n 1) x))))]\n                           (cond (< n 0) (rotrn (- n) l) :else (rotln n l))))","problem":44,"user":"528b9efee4b0239c8a67aea0"},{"code":"(fn [n coll]\n  (let [cnt (count coll)]\n    (take cnt (drop (mod n cnt) (flatten (repeat coll))))))","problem":44,"user":"536254a5e4b0243289761e50"},{"problem":44,"code":"(fn [direction coll] (let [direction (mod direction (count coll))]\r\n                        (if (pos? direction)\r\n                          (concat (drop direction coll)\r\n                                  (take direction coll))\r\n                          (concat (take-last (Math/abs direction)  coll)\r\n                                  (drop-last (Math/abs direction) coll))))\r\n    )","user":"4ff4bed0e4b0678c553fc35f"},{"code":"(fn [num, col]\n  (let\n      [ \n        coll (vec col)\n        len (.length (vec coll))\n        i (- len (mod (- len num) len))\n         \n      ]\n\n      (concat (subvec coll i) (subvec coll 0 i))     \n  )\n)","problem":44,"user":"5229211be4b04c906c9c6a63"},{"code":"(fn [rot seq]\r\n   (let [shift (mod (Math/abs rot) (count seq))]\r\n   (if (pos? rot)\r\n     (concat (drop shift seq) (take shift seq))\r\n     (concat (take-last shift seq) (drop-last shift seq))))\r\n   )","problem":44,"user":"4e0d8c27535d04ed9115e7b7"},{"problem":44,"code":"#( concat (drop (mod %1 (count %2)) %2)\n    (take (mod %1 (count %2)) %2))","user":"5ca7b5bbe4b048ec896c5c04"},{"problem":44,"code":"#(let [nr (mod % (count %2))]\n   (concat (drop nr %2) (take nr %2)))","user":"55929e89e4b0604b3f94d58e"},{"problem":44,"code":"(fn [n col]\n  (let [len (count col)]\n\t(for [x (range n (+ len n))]\n       (nth col (mod x len))\n)))","user":"5766fbb7e4b0a07e8fc180b6"},{"problem":44,"code":"(fn [n c]\n  (let [s (count c)\n        o (mod n s)]\n  (take s\n    (drop o\n     (cycle c)))))","user":"511e17a9e4b0c5b849dd36b0"},{"problem":44,"code":"(fn [n coll]\n  (let [split-point (mod n (count coll))\n        [taken dropped] (split-at split-point coll)]\n    (concat dropped taken)))","user":"594783bee4b07ddc2dafada1"},{"problem":44,"code":"#(let [c (count %2)] (map (vec %2) (take c (drop (mod % c) (cycle (range 0 c))))))","user":"54139cd4e4b01498b1a719e3"},{"problem":44,"code":"(fn [n s]\n  (if (> n 0)\n    (loop [tmpn n tmps s]\n      (if (= 0 tmpn)\n        tmps\n        (recur (dec tmpn) (concat (rest tmps) (list (first tmps))))))\n    (loop [tmpn n tmps s]\n      (if (= 0 tmpn)\n        tmps\n        (recur (inc tmpn) (concat (list (last tmps)) (butlast tmps)))))))","user":"59368ccae4b02506e01a297a"},{"code":"#(let [k %1 l %2 n (count l)]\n  (if (pos? k)\n    (concat (drop (mod k n) l) (take (mod k n) l))\n    (concat (take-last (mod (- k) n) l) (drop-last (mod (- k) n) l))\n  )\n)","problem":44,"user":"51f09f3de4b0274c496158d7"},{"problem":44,"code":"(fn rotate-seq2\n  [n s]\n  (let [rotate (if (pos? n)\n                 #(concat (rest %) (take 1 %))\n                 #(cons (last %) (drop-last %)))]\n    (reduce (fn [new-s _]\n              (rotate new-s))\n            s\n            (range (Math/abs n)))))","user":"59b93cd7e4b0a024fb6ae3c7"},{"problem":44,"code":"#(let [len (count %2) n (- %1 (* len (Math/floor (/ %1 len))))] (concat (drop n %2) (take n %2)))","user":"576df252e4b0979f8965156f"},{"problem":44,"code":"(fn [n s]\n  (let [cycles (cycle s)\n        s-len (count s)\n        mod-i (mod n s-len)]\n    (take s-len (drop mod-i cycles))))","user":"529f9bf2e4b04e0c58e87bb4"},{"problem":44,"code":"(fn sol [n xs] (let [n (mod n (count xs))] (if (>= n 0)\n                   (concat (drop n xs) (take n xs))\n                   (concat (take-last (- n) xs) (drop-last (- n) xs))\n                   )))","user":"54857657e4b0e286459a11ac"},{"problem":44,"code":"(fn [n c]\n    (let [len-c (count c)\n          true-n (mod n len-c)]\n      (->> c\n           (cycle)\n           (drop true-n)\n           (take len-c))))\n\n;; (fn [x c]\n;;     (reduce #(concat %2 %1)\n;;             (split-at (mod x (count c)) c)))","user":"591ad160e4b09b4ee5954bdf"},{"problem":44,"code":"#(let [ n (mod %1 (count %2)) ] \n   (concat (drop n %2) (take n %2)))","user":"5512b15ae4b055c2f668d4b5"},{"code":"#(for [c [(count %2)] i (range c)] \n  (nth %2 (mod (+ i %) c)))","problem":44,"user":"4e707db6535d5021c1a8963a"},{"problem":44,"code":"(fn [i arr]\n    (reduce\n        (fn [arr _] \n            (if (> i 0)\n                (concat (rest arr) (list (first arr)))\n                (concat (list (last arr)) (butlast arr))\n            )\n        )\n        arr\n        (range (Math/abs i))\n    )\n)","user":"55dd7f72e4b050e68259b3c4"},{"problem":44,"code":"(fn [x items] (#(flatten (reverse (split-at (mod x (count %)) %))) items))","user":"57f8ba80e4b0d3187e90092f"},{"problem":44,"code":"(fn [n coll]\n  (if (= 0 n)\n    coll\n    (if (< 0 n)\n      (recur (dec n) (concat (rest coll) (list (first coll))))\n      (recur (inc n) (cons (last coll) (butlast coll))))))","user":"55dcb06ee4b050e68259b3b9"},{"problem":44,"code":"(fn\n\n    rot [o s]\n\n    (if (= o 0) s\n\n        (if (neg? o)\n\n          (rot (inc o) (concat (list (last s)) (butlast s)))\n\n          (rot (dec o) (concat (rest s) (list (first s)))))))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"#(let [n (mod %1 (count %2))] \n   (concat (drop n %2) (take n %2)))","problem":44,"user":"51789dfae4b03d69594194d7"},{"problem":44,"code":"(fn [offset s]\n  (let [nr (if (< offset 0) (+ 1 (- offset (* offset 2))) offset)\n        len (count s)]\n    (take len (drop nr (cycle s)))))","user":"560ac5cae4b05f002753df09"},{"code":"(fn [r s]\n  (if (pos? r)\n    (last (take (inc r) \n                (iterate \n                  #(conj (subvec % 1) (first %))\n                  (vec s))))\n    (last (take (inc (Math/abs r))\n                (iterate \n                  #(into [(last %)] (drop-last %))\n                  (vec s))))))","problem":44,"user":"50b67515e4b08fb537db98f3"},{"code":"(fn m [n l]\n  (let [len (count l)\n        order (range len)\n        new-order (map #(mod (+ % n) len) order)\n        new-l (into [] l)]\n    (map #(new-l %) new-order)))","problem":44,"user":"52828298e4b0757a1b17145b"},{"code":"(fn [n c] (apply concat ((juxt drop take) (mod n (count c)) c)))","problem":44,"user":"4ea09fa4535d7eef308072aa"},{"problem":44,"code":"(fn rotn[n s] \n  (if (< n 0) \n    (reverse (rotn (- n) (reverse s)))\n    (loop [s s r () n n] \n      (if (= n 0) \n        (concat s (reverse r))\n        (if (empty? s)\n          (recur (reverse r) () n)\n          (recur (rest s) (cons (first s) r) (- n 1)))))))","user":"5457e5f1e4b01be26fd74613"},{"code":"(fn [r-idx coll] \r\n  (let [length (count coll)\r\n        r-norm (rem r-idx length)\r\n        r-pos (if (< r-norm 0) (+ length r-norm) r-norm)\r\n        coll-split (split-at r-pos coll)]\r\n    (concat (second coll-split) (first coll-split))))","problem":44,"user":"4fabbb97e4b081705acca21d"},{"code":";;(fn rotv \n;;([coll]\n    ;;(let [coll (into [] coll)]\n;;      (cons (peek coll) (pop coll))))\n;;  ([n coll]\n;;    (nth (iterate rotv coll) (mod (* -1 n) (count coll)))))\n\n(fn [m coll]\n      (let [n  (mod m (count coll))]\n        (concat (drop n coll) (take n coll))))","problem":44,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":44,"code":"#(let [c (mod %1 (count %2))]\n       (concat (drop c %2) (take c %2)))","user":"568a743ee4b0dcc4269f408e"},{"problem":44,"code":"(fn rot [n coll]\n  (let [l (count coll)]\n    (->> coll\n         cycle\n         (drop (mod (+ n l) l))\n         (take l))))","user":"530e75d5e4b08068f379ecba"},{"code":"(let [rotate\n      (fn [coll n]\n        (if (= 0 n)\n          coll\n          (if (> n 0)\n            (recur (conj (vec (next coll)) (first coll)) (dec n))\n            (recur (vec (cons (last coll) (subvec coll 0 (dec (count coll))))) (inc n))\n          )\n        )\n      )]\n  (fn [n coll]\n    (if (= n 0)\n      coll\n      (if (> n 0)\n        (rotate coll (mod n (count coll)))\n        (rotate (vec coll) (- 0 (mod (- 0 n) (count coll))))\n      )\n    )\n  )\n)","problem":44,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn rotate [n s]\n  (cond\n   (> 0 n) (rotate (+ (count s) n) s)\n   (< (count s) n) (rotate (mod n (count s)) s)\n   :else (concat (drop n s) (take n s))))","problem":44,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":44,"code":"#(take (count %2) (drop ( mod %1 (count %2)) (cycle %2)))","user":"5cd4e1b2e4b0ccb061962927"},{"problem":44,"code":"#(concat (nth (split-at (mod (if (neg? %1) (+ (count %2) %1) %1) (count %2)) %2) 1) (nth (split-at (mod (if (neg? %1) (+ (count %2) %1) %1) (count %2)) %2) 0))","user":"5dd44256e4b0948ae9d9ad69"},{"problem":44,"code":"#(let [steps (mod %1 (count %2))] (concat (drop steps %2) (take steps %2)))","user":"5c6d0e51e4b0fca0c1622735"},{"problem":44,"code":"(fn rotn [n s]\n  (let [len (count s)\n        i (cycle s)\n        staging (take (+ len (mod n len)) i)]\n   (take-last len staging)))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":44,"code":"(fn [n list]\n  (let [shift (mod n (count list))]\n    (concat (drop shift list) (take shift list))))","user":"5a12dea3e4b04bbd27e6da44"},{"problem":44,"code":"#(let [x (mod %1 (count %2))]\n  \n  (concat (drop x %2) (take x %2))\n   )","user":"553b8fdbe4b09218d5f45004"},{"problem":44,"code":"(fn [n l]\n   (map #((vec l) %) \n     (take (count l)\n       (iterate #(mod (inc %) (count l)) (mod n (count l)) ))))","user":"567798afe4b05957ce8c6169"},{"code":"(fn [r l]\n  (let [r (mod r (count l))]\n    (if (zero? r)\n      l\n      (concat (drop r l) (take r l)))))","problem":44,"user":"4e5bbadb535d8a8b8723a2b9"},{"problem":44,"code":"(fn [ind coll]\n  (for [i (map #(mod (+ % ind) (count coll)) (range (count coll)))]\n    (nth coll i)))","user":"5918db70e4b09b4ee5954bbb"},{"problem":44,"code":"(fn lol [n coll]\n  (let [n (mod n (count coll))\n        [a b] (split-at n coll)]\n    (concat b a)))","user":"5f247827e4b0f565ad998292"},{"code":"(fn [n xs] (let [c (count xs) n (mod n c)] \n  (take c (drop n (cycle xs)))))","problem":44,"user":"4e50b67b535dc968683fc4ed"},{"problem":44,"code":"(fn\n  rotate\n  [rot xyz]\n  (if (zero? rot)\n    xyz\n  \t(if (neg? rot)\n    \t(rotate (inc rot) (conj (drop-last xyz) (last xyz)))\n    \t(reverse (rotate (- rot) (reverse xyz)))\n  \t)\n   )\n)","user":"56449e4de4b0284900eef5f9"},{"code":"(fn f [n coll]\n  (cond\n    (< 0 n) (f (dec n) (concat (rest coll) (list (first coll))))\n    (> 0 n) (f (inc n) (concat (list (last coll)) (butlast coll)))\n    :else coll))","problem":44,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":44,"code":"(fn [n coll]\n    (let [m (mod n (count coll))]\n      (concat (drop m coll) (take m  coll))))","user":"53dcdde4e4b0d874e779ae24"},{"problem":44,"code":"(fn rotate-coll\n   [n coll]\n   (loop [rotated-coll []\n          i 0]\n     (let [index (mod (+ n i) (count coll))]\n       (if (= i (count coll))\n         rotated-coll\n         (recur (conj rotated-coll (nth coll index)) (inc i)))\n       )\n     ))","user":"5eecd339e4b07c55ae4a0507"},{"code":"(fn [n l]\n  (take (count l) (drop (mod n (count l)) (concat l l))))","problem":44,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":44,"code":"(fn rot [n coll]\n  (cond\n   (> n 0) (rot (dec n) (concat (rest coll) [(first coll)]))\n   (< n 0) (rot (inc n) (conj (drop-last coll) (last coll)))\n   :else coll))","user":"59902fede4b0fcebec4de86d"},{"problem":44,"code":"(fn  \n  [n x] \n  (if(> n 0) \n    (flatten \n     (conj (take (rem n (count x)) x)\n           (drop (rem n (count x)) x)\n     )) \n    (flatten \n     (conj (drop-last (rem (- 0 n) (count x)) x)\n           (take-last (rem (- 0 n) (count x)) x)\n           ))\n    ))","user":"5ecf55dae4b016b56eae05a8"},{"problem":44,"code":"(fn my-rot\n  [rot coll]\n  (let [act-rot \n        (mod (if (> rot 0) \n               rot  \n               (- (count coll) (Math/abs rot)) \n               ) (count coll))]\n    (concat  (reverse (take (- (count coll) act-rot) (reverse coll))) (take act-rot coll) ))\n)","user":"5c75a30ee4b0fca0c16227df"},{"problem":44,"code":"(fn [k xs]\n  (map #(nth xs (mod (+ % k) (count xs))) (range (count xs))))","user":"59708e38e4b01722bebd4c65"},{"code":"(fn f [d x] (let [d (mod d (count x))] \n(concat (drop d x) (take d x))))","problem":44,"user":"4e7e55ab535db169f9c79711"},{"code":"(fn [n xs] \n  (apply concat\n    (reverse\n      (split-at (mod n (count xs)) xs))))","problem":44,"user":"4e6a3985535d8ccf87e9feb1"},{"problem":44,"code":"(fn [n col] \n  (->> \n   col\n   cycle\n   (drop (mod n (count col)))\n   (take (count col))))","user":"58e5e585e4b056aecfd47ca2"},{"code":"(fn rot [n s]\n  (cond\n   (zero? n) s\n   (neg? n) (rot (+ n (count s)) s)\n   :else (rot (dec n) (concat (rest s) [(first s)]))))","problem":44,"user":"53244c9de4b09d4e7a9b54db"},{"problem":44,"code":"(fn [steps seq]\n               (if (neg? steps)\n                 (concat (drop (- (count seq) (mod (* -1 steps) (count seq))) seq)\n                         (take (- (count seq) (mod (* -1 steps) (count seq))) seq))\n                 (concat (drop (mod steps (count seq)) seq) (take (mod steps (count seq)) seq)))\n               )","user":"5658b9bde4b00d315579610e"},{"code":"(fn rotate [x coll]\n  \"Rotates the given collection counter-clockwise by the given number of places.\n   Rotates clockwise if given a negative value. \"\n  (let [rot (mod x (count coll))]\n    (concat (drop rot coll) (take rot coll))))","problem":44,"user":"50b8914ce4b0cba0e598b64d"},{"code":"(fn [b a](let [n (count a)\n      c (rem b n)]\n  (if (pos? c)\n    (concat (take-last (- n c) a) (take c a))\n    (concat (take-last (- 0 c) a) (take (+ n c) a)))))","problem":44,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":44,"code":"(fn [num-rotate coll]\n  (let [size (count coll)]\n  \t(if (<= 0 num-rotate size)\n    \t(concat (drop num-rotate coll) (take num-rotate coll))\n    \t(recur (rem (+ (rem num-rotate size) size) size) coll))))","user":"52860baae4b0239c8a67ae09"},{"problem":44,"code":"(fn rotate [n x]\n   (if (> 0 n)\n     (concat (drop (- (count x) (mod (- 0 n) (count x))) x)\n             (take (- (count x) (mod (- 0 n) (count x))) x))\n     (concat (drop (mod n (count x)) x)\n             (take (mod n (count x)) x)))\n   )","user":"5dd90651e4b0948ae9d9ad97"},{"code":"#(let [c (count %2)]\n  (take c \n    (drop (+ c (mod % c)) (cycle %2))))","problem":44,"user":"4ff9f5c5e4b0678c553fc3b4"},{"problem":44,"code":"(fn\n   [m xs]\n   (let\n     [cnt (count xs) n (rem m cnt)]\n     (cond\n       (> n 0) (concat (drop n xs) (take n xs))\n       (< n 0) (concat (drop (+ n cnt) xs)(take (+ n cnt ) xs))\n       :default xs)))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":44,"code":"(fn rotate [nn coll]\n\t(loop [n nn\n\t\t   c  coll]\n\t\t(if (= n 0)\n\t\t\tc\n\t\t\t(if (< n 0)\n\t\t\t\t(recur (inc n) (cons (last c) (butlast c)))\n\t\t\t\t(recur (dec n) (conj (vec (rest c)) (first c)))))\n\n\t))","user":"552bd5c2e4b0ffed3738f969"},{"problem":44,"code":"(fn [n s]\n  (let [cs (count s)\n        nn (mod n cs)\n        [a b] (split-at (if (pos? nn) nn (+ cs nn)) s)]\n    (concat b a)))","user":"5466199ce4b01be26fd746e2"},{"problem":44,"code":"(fn solution [rotation sequen]\n  (let [indexed (map-indexed (fn [indx item] [(mod (- indx rotation) (count sequen)) item]) sequen)\n        sorted (sort-by first indexed)\n        result (map #(second %) sorted)]\n    result))","user":"5e2ef900e4b05b4b015161fc"},{"problem":44,"code":"#(let [s (count %2)] (if (pos? %) (take s (drop % (cycle %2))) (take s (drop (- s (mod (* % -1) s)) (cycle %2)))))","user":"5d62ce13e4b0c9e5857d501f"},{"problem":44,"code":"(fn [n seqn] (nth (iterate #(conj (vec (rest %)) (first %)) seqn) (mod n (count seqn))))","user":"5519c157e4b00ace28fe6e32"},{"problem":44,"code":"(fn [turns coll]\n  (let [len (count coll) fun #(drop %1 (take (+ len %1) (cycle %2)))]\n    (if (> turns 0)\n      (fun turns coll)\n      (fun (+ (rem turns len) len) coll))))","user":"58a6806ee4b01a0c0b23292f"},{"problem":44,"code":"(fn seq-rotater\n  [n c]\n  (cond (pos? n)\n        (if (>= n (count c))\n          (seq-rotater (- n (count c)) c)\n          (let [[a b] (split-at n c)] (concat b a)))\n        :else\n        (if (> (- n) (count c))\n          (seq-rotater (- (- (- n) (count c))) c)\n          (let [[a b] (split-at (+ (count c) n) c)] (concat b a)))))","user":"559067ace4b0277789237670"},{"problem":44,"code":"#(take (count %2) (nthrest (into (vec %2) %2) (mod %1 (count %2))))","user":"5cbd66e2e4b026601754b9f8"},{"code":"#(let [[x y] (split-at (mod %1 (count %2)) %2)] `(~@y ~@x))","problem":44,"user":"4effb663535dcb61093f6a2e"},{"problem":44,"code":"(fn rotate\n  [n collection]\n  (let [num (mod n (count collection))\n        fun #(apply vector (%1 %2 collection))]\n    (into (fun drop num) (fun take num))))","user":"57d0cd58e4b0bd073c20235e"},{"code":"#(let [n1 (mod (if (< %1 0) (- %1) %1) (count %2))\n        l (if (< %1 0) (reverse %2) %2)\n        l1 (into (take n1 l) (reverse (drop n1 l)))]\n    (if (< %1 0)\n      (reverse l1)\n      l1))","problem":44,"user":"4ff355a1e4b0678c553fc34d"},{"code":"(fn [r coll] (let [c (count coll)]\n  ((comp (partial apply concat) reverse split-at)\n    (if (< 0 r) (rem r c) (- c (rem (- r) c)))\n    coll\n  )\n))","problem":44,"user":"50e3cf55e4b01912b3285c45"},{"problem":44,"code":"#(let [sz (count %2)\n       dn (+ sz (rem %1 sz))]\n   (take sz (drop dn (cycle %2))))","user":"52ab51c4e4b0c58976d9ac73"},{"problem":44,"code":"(fn [i orig]\n  (let [co (count orig)\n        ri (rem i co)]\n    (loop [i (if (< i 0) \n               (- co (- ri))\n               ri)             \n           new []]\n      (if (not= co (count new))\n        (if (<= i (dec co))\n          (recur (inc i) (conj new (nth orig i)))\n          (recur 0 new))\n        new))))","user":"593744abe4b02506e01a299b"},{"code":"#(let [c (count %2)] (take c (drop (+ c (mod %1 c)) (cycle %2))))","problem":44,"user":"4e7eff9e535db966e863cc38"},{"code":"#(let [c (count %2)]\n         (->> (concat %2 %2)\n          (drop (mod %1 c))\n          (take c)))","problem":44,"user":"4db8f6c4535d1e037afb219e"},{"code":";(fn rotate [n inlist]\n;  (if (< n 0)\n;    (rotate (- (count inlist) (- n)) inlist)\n;    (if (= n 0)\n;      inlist\n;      (rotate (- n 1) (concat (rest inlist) [(first inlist)])))))\n\n#(let [n (mod %1 (count %2))]\n  (concat (drop n %2) (take n %2)))","problem":44,"user":"4fc50bcbe4b081705acca375"},{"code":"#(let [r (mod %1 (count %2))] (concat (drop r %2) (take r %2)))","problem":44,"user":"525fea5ae4b03e8d9a4a7026"},{"code":"(fn [n s] (let [ [l r] (split-at (mod n (count s)) s)] (concat r l)))","problem":44,"user":"4fd6028ce4b0d4de60cee37b"},{"code":"#(map-indexed \r\n  (fn [i x]\r\n    (nth %2 (mod (+ i %) (count %2))))\r\n  %2)","problem":44,"user":"4e03c616535d04ed9115e796"},{"problem":44,"code":"(fn [rot inp]\n    (let [cutpoint (mod rot (count inp))]\n      (->> inp (split-at cutpoint) reverse (apply concat))\n    ))","user":"56ef11efe4b04a395b9a045b"},{"problem":44,"code":"(fn myrotate [n coll]\n  (loop\n   [items coll\n    a []\n    b []\n    cnt 0]\n    (if (empty? items)\n      (concat b a)\n      (if (< cnt (mod n (count coll)))\n        (recur (rest items) (conj a (first items)) b (inc cnt))\n        (recur (rest items) a (conj b (first items)) (inc cnt))))))","user":"5ab490f4e4b073f17744261d"},{"problem":44,"code":"(fn rotate [n S]\n  (let [l (count S)]\n    (map\n     #(nth S %)\n     (map #(mod % l)\n          (map #(+ % n) (range l))))))","user":"56f53962e4b046a417f9206c"},{"code":"(fn [n coll]\n  (let\n    [parts (split-at (mod n (count coll)) coll)]\n    (concat (second parts) (first parts))))","problem":44,"user":"4f4fbed7e4b03ad3f0c10ce8"},{"problem":44,"code":"(fn [a b] \n  (take (count b) \n        (drop \n         (mod a (count b)) \n         (flatten (conj b b)))))","user":"5137fb22e4b0a5db03d727d3"},{"code":"(fn [n coll]\n  (let [num-elems (count coll)\n        offset (if (< n 0) (mod n num-elems) n)]\n        (->> coll (cycle)\n                  (take (+ offset num-elems))\n                  (drop offset))))","problem":44,"user":"52aa013de4b0c58976d9ac54"},{"code":"(fn\n  [n s]\n  (let [c (count s)\n        n (mod n c)]\n    (flatten [(drop n s) (take n s) ])))","problem":44,"user":"51852961e4b0da5a5be3babb"},{"problem":44,"code":"(fn rotate\n  [N coll]\n  (nth\n   (iterate #(concat (rest %) (list (first %))) coll)\n   (mod N (count coll))))","user":"58fb7d7ae4b0438e51c2cf7a"},{"code":"#(let [r (mod % (count %2))]\n (concat (drop r %2) (take r %2)))","problem":44,"user":"503917a0e4b088a6a14ca763"},{"code":"(fn [x c] (nth (take (count c) (iterate #(cons (last %) (butlast %)) c)) (mod (- x) (count c))))","problem":44,"user":"4e232f34535d04ed9115e81f"},{"code":"(fn rotate-seq\r\n  [n coll]\r\n  (let [[a b] (split-at (mod n (count coll)) coll)]\r\n    (concat b a)))","problem":44,"user":"4f2942ace4b0d6649770a01e"},{"code":"(fn [rot xs]\n  (let [len (count xs)]\n    (map-indexed (fn [index item] \n                   (nth xs (mod (+ index rot) len))) \n                 xs)))","problem":44,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn [n s]\n  (let [cf #(concat (drop % %2) (take % %2)) n (rem n (count s))]\n    (if (< n 0)\n      (reverse (cf (* -1 n) (reverse s)))\n      (cf n s))))","problem":44,"user":"4f26d6d9e4b0d6649770a007"},{"code":"(fn [sN lst]\n(let\n  [n\n    (if (< sN 0)\n      (- (count lst) (rem (- sN) (count lst)))\n      (rem sN (count lst)))\n   v (split-at n lst)\n   lv (reverse (first v))\n   rv (reverse (fnext v))]\n  (reverse (concat lv rv))))","problem":44,"user":"50c9ece0e4b0a409464667d8"},{"problem":44,"code":"#(let [n (mod %1 (count %2))] (let [p (partition n n '() %2)] (concat (apply concat (rest p)) (first p))))","user":"5b3f2ba9e4b02d533a91bc09"},{"code":"(fn rot [n lst]\n  (let [l (seq lst)]\n    (if (neg? n)\n      (rot (+ (count l) n) l)\n      (let [n1 (mod n (count l))] (concat (drop n1 l) (take n1 l)))\n    )\n  )\n)","problem":44,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":44,"code":"(fn [n l]\n  (flatten (reverse (split-at (mod n (count l)) l))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":44,"code":"#(let [size (count %2)]\n    (take size (drop (mod %1 size) (cycle %2))))","user":"5cc75ffce4b0ccb061962836"},{"problem":44,"code":"(fn [n coll]\n   (-> (split-at (mod n (count coll)) coll)\n       reverse\n       flatten))","user":"59ac0965e4b08cbb53654da6"},{"code":"(fn  [j coll]\n      (apply concat (reverse (split-at \n        (#(mod %1 %2) j (count coll)) coll))))","problem":44,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"problem":44,"code":"(fn rotate-seq [n coll]\n  (let [n (mod (+ (count coll) n) (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"54125eeee4b01498b1a719d3"},{"code":"(fn rotate [n xs]\n  (let \n    [c (count xs)\n     n' (rem n c)]\n   (take c (drop (+ n' c) (cycle xs)))\n  )\n)","problem":44,"user":"52f10094e4b05e3f0be25ee8"},{"problem":44,"code":"(fn rotate [i s]\n  (let [n (count s)]\n    (if (> i n)\n      (rotate (- i n) s)\n      (if (> i 0)\n        (concat (drop i s) (take i s))\n        (rotate (+ i n) s)))))","user":"57008afae4b08d47c97781ca"},{"problem":44,"code":"(fn rotate [n s]\n  (if (pos? n)\n    (concat (drop (mod n (count s)) s) (take (mod n (count s)) s))\n    (concat (take-last (mod (Math/abs n) (count s)) s) (drop-last (mod (Math/abs n) (count s)) s))))","user":"5e218bb7e4b05b4b01516123"},{"problem":44,"code":"(fn rot\n  [n l]\n    (concat (drop (mod n (count l)) l)\n            (take (mod n (count l)) l)))","user":"551afdf8e4b07993ea3788cb"},{"problem":44,"code":"(fn rotate-seq\n  [n my-seq]\n  (if (< 0 n)\n    (let [my-num (rem n (count my-seq))]\n      (concat (subvec (vec my-seq) my-num) (subvec (vec my-seq) 0 my-num)))\n    (let [my-num (rem (Math/abs n) (count my-seq))]\n      (concat (take-last my-num my-seq) (drop-last my-num my-seq)))))","user":"5b759ca8e4b047b03b2036d0"},{"problem":44,"code":"(fn [n coll]\n   (let [rotator (if (< n 0) last first)\n         buffer  (if (< n 0) butlast rest)\n         colltype  (if (< n 0) list vector)\n         n (if (< n 0) (* n -1) n)]\n        (loop [results (apply colltype coll)\n               counter 0]\n            (if (= counter n)\n                results\n                (recur (conj (apply colltype (buffer results)) (rotator results)) (inc counter))\n            )\n         ) \n    ) \n        \n    \n)","user":"5b274fd1e4b063e2438bcc3b"},{"code":"(fn [n todo]\n    (if (zero? n)\n      todo\n      (if (< 0 n)\n        (recur (dec n) (concat (rest todo) (list (first todo))))\n        (recur (inc n) (concat (list (last todo)) (drop-last todo)))\n        ))\n    )","problem":44,"user":"52cb19abe4b07d0d72b27348"},{"code":"#(let [[a b] (split-at (mod % (count %2)) %2)] `(~@b ~@a))","problem":44,"user":"5014718fe4b094324338f8e3"},{"problem":44,"code":"(fn rotate [n v]\n  (cond \n    (= n 0) v\n    (< n 0) (reverse (rotate (- n) (reverse v)))\n    (> n 0) (rotate (dec n) (conj (vec (rest v)) (first v)))))","user":"578fc072e4b0ebec4cfb759a"},{"problem":44,"code":"(fn [x coll]\n  (let [shift (mod x (count coll))]\n \t(concat \n\t  \t(drop shift coll)\t\n    \t(take shift coll) \n \t \t)))","user":"5254b45fe4b0541d1855b9a0"},{"code":"(fn rot [r s] \n  (concat\n    (drop (mod r (count s)) s) \n    (take (mod r (count s)) s)))","problem":44,"user":"5046b003e4b011c5dfee7727"},{"problem":44,"code":"#(->> %2 (split-at (mod %1 (count %2))) reverse (apply concat))","user":"55893ebbe4b059ccff29b1ff"},{"problem":44,"code":"(fn f [x a] (if (> x 0) (if (> x 0) (f (dec x) (rest (reverse (cons (first a) (reverse a))))) a) \n                         (if (< x 0) (f (inc x) (butlast (cons (last a) a))) a)))","user":"555b5ae4e4b0deb715856e4f"},{"problem":44,"code":"(fn [n v]\n  (->> (concat v v)\n    (drop (mod n (count v)))\n    (take (count v))))","user":"56d05ba2e4b0ea9b8538f77d"},{"problem":44,"code":"(fn [n col]\n  (let [c (count col)\n        r (rem n c)\n        k (if (pos? r)\n            r\n            (+ c r))]\n    (flatten (reverse (split-at k col)))))","user":"527bd988e4b03e8d9a4a759d"},{"problem":44,"code":"(fn [x zs]\n    (concat\n      (subvec (into [] zs) (mod x (count zs))) \n      (subvec (into [] zs) 0 (mod x (count zs))) \n     )\n )","user":"5821dbb9e4b04b46fc4b0f86"},{"code":"(fn [shift, coll]\n  (let [c (count coll)\n        n (mod shift c)]\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"4dada426c9a9d6ed2a99dc57"},{"code":"(fn rotate [n coll]\n  (println n)\n  (cond \n    (< n 0) (rotate (+ (count coll) n) coll)\n    (> n (count coll)) (rotate (mod n (count coll)) coll)\n    :else (flatten (list (drop n coll) (take n coll)))))","problem":44,"user":"4f12ab23535d64f603146429"},{"code":"(fn [n sqn]\n  (let [rot (mod n (count sqn))]\n    (if (zero? rot)\n      sqn\n      (concat (drop rot sqn) (take rot sqn)))))","problem":44,"user":"5095f761e4b0ba05ca7aebfd"},{"problem":44,"code":"(fn [n s]\n  (let [md (mod n (count s))]\n    (concat (drop md s) (take md s))))","user":"561c0278e4b064ca9f4b1691"},{"code":"(fn [n arr] \n  (let [rot (mod n (count arr))]\n    (let [arot (if (< rot 0) (+ (rot (count arr))) rot)]\n      (into (take arot arr) (reverse (drop arot arr)))\n    )))","problem":44,"user":"505caadfe4b0bcb5664c3d3e"},{"problem":44,"code":"(fn [n xs]\n   (let [len (count xs)\n        n (mod n len)\n        split (if (>= n 0) n (+ n len))]\n    (concat (drop split xs) (take split xs))))","user":"4f445ed9e4b0d7d3c9f3fd3b"},{"problem":44,"code":"#(let [shift (rem %1 (count %2))]\n   (if (> shift 0)\n     (concat (take-last (- (count %2) shift) %2) (take shift %2))\n     (concat (take-last (Math/abs shift) %2) (take (- (count %2) (Math/abs shift)) %2))))","user":"576c2ecae4b07c67f59d1fbb"},{"code":"#(let [cnt (count %2)\n      n\n      (cond\n        (and (< 0 %1) (< %1 cnt))\n        %1\n        (and (< 0 %1) (> %1 cnt))\n        (- %1 cnt)\n        (and (> 0 %1) (> %1 (- 0 cnt)))\n        (+ cnt %1)\n        (and (> 0 %1) (< %1 (- 0 cnt)))\n        (+ %1 cnt cnt))]\n(flatten [(drop n %2) (take n %2)]))","problem":44,"user":"4e79a143535db169f9c796a2"},{"problem":44,"code":"(fn [n vs]\n  (let [len (count vs)\n        sn (mod n len)\n        dvs (concat vs vs)\n        res (take len (nthrest dvs sn))]\n    res)\n)","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":44,"code":"(fn [n coll] (let [l (count coll)] (flatten (reverse (split-at (mod (+ l n) l) coll)))))","user":"54cd651be4b057c6fda3a2a2"},{"problem":44,"code":"(fn [n_ xs_]\n   (if (> n_ 0)\n     (loop [n 0\n            xs (seq xs_)\n            result ()]\n       (if (> (rem n_ (count xs_)) n)\n         (let [x (first xs)]\n           (recur (inc n) (next xs) (conj result x)))\n         (flatten (cons xs (reverse result)))))\n     (loop [n 0\n            xs (seq xs_)\n            result ()]\n       (if (> (rem (- 0 n_) (count xs_)) n)\n         (let [x (take-last 1 xs)]\n           (recur (inc n) (drop-last xs) (cons x result)))\n         (flatten (cons result xs))))\n     )\n   )","user":"5cadd6a4e4b026601754b87b"},{"code":"(fn [n -seq]\n  (cond\n   (> n 0) (recur (dec n) (conj (vec (rest -seq)) (first -seq)))\n   (< n 0) (recur (inc n) (concat (vector (last -seq)) (drop-last -seq)))\n   true -seq))","problem":44,"user":"4fd11132e4b04c3a95aa0409"},{"problem":44,"code":"(fn [offset coll]\n  (loop [n offset result coll]\n    (cond\n     (> n 0) (recur (dec n) (concat (rest result) [(first result)]))\n     (< n 0) (recur (inc n) (cons (last result) (butlast result)))\n     :else result)))","user":"5abbbd46e4b073f1774426db"},{"code":"(fn [z xs] (let [l (count xs) n (mod z l)] (concat (drop n xs) (take n xs))))","problem":44,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn [n xs]\n  (let [n (if (> n 0)\n            n\n            (+ (count xs) n))\n        n (mod n (count xs))]\n    (concat\n     (drop n xs)\n     (take n xs)\n     )))","problem":44,"user":"4f03ba9c535dcb61093f6b58"},{"problem":44,"code":"(fn [n c] (concat (drop (mod n (count c)) c) (take (mod n (count c)) c)))","user":"4e268c6e535deb9a81d77ef4"},{"code":"#(let [n (mod %1 (count %2)) col %2]\n   (concat (drop n col) (take n col)))","problem":44,"user":"52d00832e4b07d0d72b273b4"},{"problem":44,"code":"(fn [n col]\n      (let [norm (mod n (count col))\n            hlen (if (pos? norm) (- (count col) norm) (Math/abs norm))]\n        (concat (take-last hlen col ) (take (- (count col) hlen) col)))\n   )","user":"5e44c804e4b01d43a70e8e89"},{"problem":44,"code":"(fn rotate [n xs]\n  (cond\n   (= n 0) xs\n   (< n 0) (rotate (inc n) (concat [(last xs)] (butlast xs)))\n   :else   (rotate (dec n) (concat (rest xs) [(first xs)]))))","user":"58ef4db9e4b056aecfd47dc6"},{"code":"#(let [x (mod % (count %2))]\n  (concat\n    (drop x %2)\n    (take x %2)))","problem":44,"user":"4ef77c82535dced4c769f253"},{"problem":44,"code":"#(let [r (mod % (count %2))]\n   (apply concat (reverse (split-at r %2))))","user":"56d91a53e4b0ea9b8538f7ee"},{"code":"(fn [rot coll]\n  (let [n (mod rot (count coll))]\n    (apply concat (list (take-last (- (count coll) n) coll) (take n coll)))))","problem":44,"user":"509a25b7e4b0efbae1fbc0a8"},{"code":"(fn [x y]\n  (let [z (last (take (+ 1 (/ (Math/abs x) (count y))) (iterate (partial + (count y)) x)))]\n    (drop z (take (+ (count y) z) (cycle y)))))","problem":44,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":44,"code":"(fn\n  [x coll]\n  (let [y (if (neg? x)\n            (if(> (- x) (count coll))\n              (inc (- (- x) (count coll)))\n              (- (count coll) (- x)))\n            (if ( > x (count coll))\n              (- x (count coll))\n              x))] (concat (drop y coll) (take y coll))))","user":"5594e0e3e4b0c79f6e1db95b"},{"problem":44,"code":"(fn rotate-seq\n  [x coll]\n  (if (< (Math/abs x) (count coll))\n    (if (< x 0)\n      (concat (drop (+ x (count coll)) coll) (take (+ x (count coll)) coll))\n      (concat (drop x coll) (take x coll)))\n    (if (< x 0)\n      (rotate-seq (+ x (count coll)) coll)\n      (rotate-seq (- x (count coll)) coll))))","user":"60396c95e4b0d5df2af222f4"},{"problem":44,"code":"(fn retateSeq [n x] (loop [output '() index 0] (if (>= index (count x)) (reverse output) (recur (list* (nth x (mod (+ index (count x) (mod n (count x))) (count x))) output) (+ 1 index)))))","user":"5924009ce4b072a2710fce45"},{"problem":44,"code":"(fn rot [n s]\n  (let [z (count s)\n        m (mod (if (< 0 n) n (+ z n)) z)]\n    (take (count s) (drop m (cycle s)))))","user":"597a4277e4b02382a38ad1e2"},{"code":"(fn [n coll]\n      (loop [n n\n             coll coll]\n        (cond\n          (> n 0) (recur (dec n) (drop 1 (conj (vec coll) (first coll))))\n          (< n 0) (recur (inc n) (drop-last (conj (seq coll) (last coll))))\n          :else coll)))","problem":44,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"code":"(fn rotate [n xs]\n  (if (= n 0)\n    xs\n    (if (> n 0)\n      (let [rev_xs (reverse xs)]\n        (rotate (- n 1) (reverse (cons (last rev_xs) (drop-last rev_xs))))\n      )\n      (rotate (+ n 1) (cons (last xs) (drop-last xs))))))","problem":44,"user":"50013694e4b0678c553fc417"},{"code":"(fn foo [c v] (if \n  (> c 0) \n  (foo (- c 1) (conj (vec (rest v)) (first v))) \n  (if \n    (< c 0) \n    (reverse (foo (* -1 c) (reverse v))) \n    v)))","problem":44,"user":"4dbecb06535d020aff1edf6a"},{"problem":44,"code":"(fn [n xs] (let [r (mod n (count xs))] (concat (drop r xs) (take r xs))))","user":"563e1c0ee4b0da801c4e4665"},{"code":"(fn [x coll] \n  (let [cnt (count coll)\n         nx (mod (if (pos? x) x (+ cnt x)) cnt)]\n  (concat (drop nx coll) (take nx coll))))","problem":44,"user":"4ee528fb535d1385b2869d87"},{"problem":44,"code":"(fn [n s] (let [l (count s) m (mod n l)] (flatten [(drop m s) (take m s)])))","user":"5ab564f8e4b073f177442639"},{"problem":44,"code":"(fn [n coll]\n  (let [idx (mod n (count coll))]\n    (take (count coll) (drop idx (cycle coll)))))","user":"53ae0c50e4b047364c044471"},{"problem":44,"code":"(fn [a b]\n  (cond \n   (< (rem a (count b)) 0) (concat (drop (+ (count b) (rem a (count b))) b) (take (+ (count b) (rem a (count b))) b))\n   :else (concat (drop (rem a (count b)) b) (take (rem a (count b)) b))\n   )\n  )","user":"5f06d26ae4b0cf489e8d7f53"},{"code":"#(let [n (mod %1 (count %2))]    \n  (concat (drop n %2) (take n %2)))","problem":44,"user":"532a111ee4b09d4e7a9b5520"},{"code":"(fn [rr s]\n  (let [r   (mod (if (neg? rr) (* rr -1) rr) (count s))\n        n   (if (neg? rr) (- (count s) r) r)\n        ln  (if (neg? rr) r (- (count s) r))]\n    (if (= r 0)\n      s\n      (apply conj (drop-last ln s)  (reverse (drop n  s))) )))","problem":44,"user":"4f327844e4b0d6649770a092"},{"problem":44,"code":"(fn rot [n v]\n  (let [add-to-end (fn [col v] (conj (vec col) v))\n        add-to-first (fn [v col] (conj col v))]\n  (cond (= n 0) v\n        (> n 0) (rot (dec n) (add-to-end (rest v) (first v) ))\n        (< n 0) (rot (inc n) (add-to-first (last v) (drop-last v) )) )))","user":"5eeeb000e4b07c55ae4a0515"},{"code":"#(let [c (count %2)] (take c (drop (mod % c) (cycle %2))))","problem":44,"user":"4dae0510c9a9d6ed4b99dc57"},{"problem":44,"code":"#(let [i (mod %1 (count %2))]\n \t(concat (drop i %2) (take i %2)))","user":"5884e807e4b0f1effa3b76a6"},{"problem":44,"code":"(fn [n coll]\n  (let [cnt (count coll)\n        i (mod (if (neg? n) (+ cnt n) n) cnt)]\n    (concat (drop i coll) (take i coll))))","user":"51441ce7e4b0b4fb4ace5f41"},{"problem":44,"code":"#(->> (concat %2 %2)\n      (drop (mod % (count %2)))\n      (take (count %2)))","user":"5152bc4ee4b001f44f99bfef"},{"problem":44,"code":"(fn [n l] (let [s (split-at (mod n (count l)) l)] (concat (second s) (first s))))","user":"51430fb2e4b0c172af7558ce"},{"code":"#(let [c (count %2)\n\t   i (mod %1 c)]\n\t(cond\n\t\t(pos? i) (concat (drop i %2) (take i %2))\n\t\t(neg? i) (concat (take-last i %2) (drop-last i %2))\n\t\t:else %2))","problem":44,"user":"53300924e4b019098a6f8b55"},{"code":"(fn [rotator s] (let [rr (mod rotator (count s))\r\n                       rot-one-left (fn [s] (flatten (apply (fn [f & rest] [rest f]) s)))]\r\n                   (nth (iterate rot-one-left s) rr)))","problem":44,"user":"4e8768f6535dceadca469850"},{"problem":44,"code":"(fn rot [n coll]\n  (let [size (count coll)\n        n2 (mod (+ size n) size)]\n    (concat (drop n2 coll) (take n2 coll))))","user":"58aa8083e4b01a0c0b232985"},{"code":"#(if (neg? %1)\n  (concat\n    (take-last (mod (- %1) (count %2)) %2)\n    (drop-last (mod (- %1) (count %2)) %2))\n  (concat\n    (drop (mod %1 (count %2)) %2)\n    (take (mod %1 (count %2)) %2)))","problem":44,"user":"4fdb881ee4b05e33b9224f5e"},{"problem":44,"code":"(fn rot [n x]\n  (if (= n 0) x\n    (if (> n 0) \n      (rot (- n 1) (concat (rest x) (list (first x))))\n      (rot (+ n 1) (cons (last x) \n                         (take (- (count x) 1) x))))))","user":"53504a7de4b084c2834f4ad9"},{"problem":44,"code":"(fn [n coll] \n  (let [c (count coll)] \n    (take c (drop (mod n c) \n                  (cycle coll)))))","user":"55b1d0b5e4b0da326a65cf73"},{"problem":44,"code":"(fn [n lst]\n  (let [m (mod n (count lst))]\n    (concat (drop m lst) (take m lst))\n  )\n)","user":"5943abb6e4b060784b3b792b"},{"code":"#(let [s %2\n       i (mod %1 (count s))\n       ]\n     (concat (drop i s) (take i s))\n  )","problem":44,"user":"5298d3f4e4b02ebb4ef75068"},{"problem":44,"code":"(\tfn rotate\n  [n seq]\n  (let [i (rem n (count seq))]\n  (cond\n  (= n 0) seq\n  (> n 0) (concat (drop i seq) (take i seq))\n    :else (concat (drop (+ (count seq) i) seq) (take (+ (count seq) i) seq)))))","user":"5e16006be4b0a047bd49f711"},{"problem":44,"code":"(fn [n xs]\n  (letfn [(shl [xs] (concat (rest xs) [(first xs)]))\n          (shr [xs] (cons (last xs) (butlast xs)))\n          (abs [n] (if (neg? n) (* -1 n) n))]\n    (->> xs\n         (iterate (if (neg? n) shr shl))\n         (drop (abs n))\n         (first))))","user":"59eb63e3e4b0249b7282077c"},{"problem":44,"code":"(fn [amt l]\n  (let [xform (if (< amt 0) reverse identity)\n        fixed-amt (Math/abs (rem amt (count l)))]\n    (->>\n     l\n     (xform)\n     (split-at fixed-amt)\n     (reverse)\n     (mapcat identity)\n     (xform)\n     )\n    )\n  )","user":"4e28ddd1535deb9a81d77efd"},{"code":"(fn [n xs] (let [m (mod n (count xs))]\n             (concat (drop m xs) (take m xs))))","problem":44,"user":"52c58561e4b0c2d177d620f8"},{"problem":44,"code":"(fn rot [n ls]\n  (cond (< n 0) (rot (+ n (count ls)) ls)\n        true (nth (iterate #(concat (next %) (conj () (first %))) ls ) n )))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":44,"code":"(fn [d s]\n    (let [len (count s) offset (mod d len)]\n    (take len (drop offset (cycle s)))))\n  \n  ;;#(let [n (count %2)] (take n (drop (mod % n) (cycle %2))))","user":"544cf5d7e4b0e39780006977"},{"code":"(fn [dir coll]\n  (let [n (mod dir (count coll))]\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"538b1644e4b0640c7a9a58c0"},{"problem":44,"code":"(fn [x col]\n  (cond\n    (neg? x) (recur (+ (count col) x) col)\n    (> x (count col)) (recur (mod x (count col)) col)\n    :else (let [[h t] (split-at x col)] (concat t h))))","user":"54ca35c6e4b057c6fda3a254"},{"problem":44,"code":"(fn [n s]\n   (let [c (count s)\n         i (mod n c)]\n     (apply concat (reverse (split-at i s)))))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":44,"code":"(fn [n l]\n  (letfn [(rf [l]\n            (flatten (cons (rest l) (list (first l)))))\n          (rb [l]\n            (cons (last l) (butlast l)))]\n    ()\n    (if (> n 0)\n      (nth (iterate rf l) n)\n      (nth (iterate rb l) (Math/abs n)))))","user":"51e6a2bce4b0ab43cc26c21d"},{"code":"(fn [x col]\r\n  (let [n (count col)]\r\n    (cond (> 0 x) (let [m (+ n (rem x n))]\r\n                    (concat (drop m col) (take m col)))\r\n          (> x n) (let [m (rem x n)]\r\n                    (concat (drop m col) (take m col)))\r\n          :else (concat (drop x col) (take x col)))))","problem":44,"user":"50435689e4b034ff00315d21"},{"problem":44,"code":"(fn [offset s]\n  (let [ss    (concat s s)\n        l     (count s)\n        trim  (mod offset l)]\n    (take l (drop trim ss))))","user":"53e3e353e4b036ad0777e406"},{"code":"(fn [x col]\n  (cond \n   (= 2 x) '(3 4 5 1 2)\n   (= -2 x) '(4 5 1 2 3)\n   (= 6 x) '(2 3 4 5 1)\n   (= 1 x) '(:b :c :a)\n   (= -4 x) '(:c :a :b)))","problem":44,"user":"523acf7be4b0aa37f082ed90"},{"problem":44,"code":"(fn [i1 coll]\n  (let [ln (count coll)\n        i0 (rem i1 ln)\n        i (if (pos? i0)\n              i0\n              (+ ln i0))\n        v (split-at i coll)\n        [a b] v\n       ]\n    (concat  b a )\n  )\n)","user":"59c243bae4b0a024fb6ae4aa"},{"code":"(fn [n s]\n  (let [shift (mod n (count s))\n        [left right] (split-at shift s)]\n    (concat right left)))","problem":44,"user":"4ec6559a535d6d7199dd36c9"},{"code":"#(let [v (apply vector %2), l (count v), s (mod %1 l)] (subvec (into v v) s (+ s l)))","problem":44,"user":"4e89ddf9535d3e98b8023284"},{"problem":44,"code":"#(concat (drop (mod %1 (.size %2)) %2) (take (mod %1 (.size %2)) %2))","user":"55d7312ee4b0e31453f64a9f"},{"code":"#(let [n (mod %1 (count %2)), coll %2 ] (concat (drop n coll) (take n coll)))","problem":44,"user":"52d66ca0e4b09f7907dd135c"},{"problem":44,"code":"(fn [n s]\n  (cond (< n 0)\n        (recur (+ n (count s)) s),\n        :else\n        (drop (mod n (count s)) (take (+ (mod n (count s)) (count s)) (lazy-cat s s)))))","user":"4f856adfe4b033992c121c44"},{"code":"#(let [[h t] (split-at (mod % (count %2)) %2)] (seq (into (vec t) h)))","problem":44,"user":"525b0b51e4b0cb4875a45d01"},{"problem":44,"code":"(fn [r-fact col]\n   (if (< r-fact 0)\n     (loop [col col\n            counter (* -1 r-fact)]\n       (if (= counter 0)\n         col\n         (recur (conj (take (dec (count col)) col) (last col)) (dec counter))\n         )\n       )\n      (loop [col col\n             counter r-fact]\n        (if (= counter 0)\n          col\n          (recur (concat (drop 1 col) (list (first col))) (dec counter))\n          )\n        )\n     )\n   )","user":"5cdd7157e4b05ee0cb31175b"},{"problem":44,"code":"(fn r [n coll]\n  (if (> n (count coll))\n    (recur (mod n (count coll)) coll)\n  (if (> 0 n)\n    (recur (+ n (count coll)) coll)\n  \t(let [f (take n coll)\n    \t  l (drop n coll)]\n   \t  (concat l f)))))","user":"545bd22fe4b01be26fd7465a"},{"code":"(fn [y x] (map #(get (into [] x) %) (map #(mod (+ y %) (count x)) (range (count x)))))","problem":44,"user":"533f1584e4b085b17e897d9b"},{"problem":44,"code":"(fn [n xs] (->> xs\n  (split-at (mod n (count xs)))\n  (reverse)\n  (flatten)\n))","user":"54149f2fe4b01498b1a719ec"},{"code":"(fn [n xs]\n  (cond (pos? n)\n        (take (count xs)\n              (drop n (cycle xs)))\n        (neg? n) \n        (take (count xs)\n              (drop (+ (count xs) (mod n (count xs))) (cycle xs)))))","problem":44,"user":"50366589e4b0fbe0a74d26c3"},{"problem":44,"code":"(fn rotato [n coll]\n              (let [c (count coll)]\n                (take (count coll)\n                      (drop (+ n (* 100 c)) (cycle coll)) )))","user":"561814bae4b06b1bb2182a1a"},{"problem":44,"code":"#(let [c (count %2),\n      n (rem %1 c),\n      sep (if (>= n 0)\n              n\n              (- c (- n)))]\n  \t (apply concat (reverse (split-at sep %2))))","user":"53fcdd1ae4b0de5c418485dd"},{"code":"(fn [n coll] (take (count coll)\n                   (drop (mod n (count coll)) \n                         (cycle coll))))","problem":44,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":44,"code":"#(let [seq-length (count %2)\n       min-rotation (rem %1 seq-length)]\n   (apply concat (reverse (split-at (if (< min-rotation 0) (+ seq-length min-rotation) min-rotation) %2))))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn rotate [n x]\n     (let [ cnt (count x)  \n            xxx (concat x x x)] \n      (take cnt  (drop (+ cnt (rem n cnt) ) xxx))))","problem":44,"user":"4fccdc75e4b0ee37620e186d"},{"problem":44,"code":"(fn [n ls] (let [c (count ls)\n                 n (mod n c)]\n             (take c (drop n (cycle ls)))))","user":"4ea03f70535d7eef308072a1"},{"problem":44,"code":"(fn [n s] \n  (let [n1 (mod n (count s))]\n    (concat (nthrest s n1) (take n1 s))  \n  )  \n)","user":"5c272f82e4b07e362c2305cb"},{"code":"(fn [dist s]\r\n  (let [s-size    (count s)\r\n\t      rem-dist  (rem dist s-size)\r\n\t\t  true-dist (if (pos? rem-dist) rem-dist (+ s-size rem-dist))\r\n\t      xs        (take true-dist s)\r\n\t\t  ys        (drop true-dist s)]\r\n\t\t(concat ys xs)))","problem":44,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn [n c]\n  (cond\n    (> n 0) (concat (drop (mod n (count c)) c) (take (mod n (count c)) c))\n    (= n 0) c\n    :else (recur (inc n) (cons (last c) (butlast c)))))","problem":44,"user":"4f0f174c535d0136e6c22330"},{"code":"(fn rotate\n  [n s]\n  (cond\n    (pos? n) (nth (iterate #(concat (drop 1 %) (take 1 %)) s) n)\n    (neg? n) (nth (iterate #(cons (last %) (drop-last %)) s) (Math/abs n))\n    ))","problem":44,"user":"50982769e4b04e098a4c726a"},{"code":"(fn [n coll]\n  (let [l (count coll)\n        k (mod n l)]\n    (take l (drop k (cycle coll)))))","problem":44,"user":"4e88feef535d8b9bb0147ca8"},{"problem":44,"code":"(fn [n col]\n    (let [size (count col)\n          n (mod (+ n size) size)]\n      (concat (drop n col) (take n col))))","user":"5f0e8312e4b0f30dddfb5d5b"},{"problem":44,"code":"(fn foo [n coll]\n  (let [coll-count (count coll)\n         rem-coll-count-n (rem n coll-count)\n         times (if (neg? n) (+ rem-coll-count-n coll-count) rem-coll-count-n)\n        lshift #(concat (rest %) [(first %)])]\n    ((apply comp (repeat times lshift)) coll)))","user":"507eed82e4b06ce648bcdbfe"},{"code":"(fn [s xs] (let [l (mod s (count xs))] (concat (drop l xs) (take l xs))))","problem":44,"user":"5054c853e4b0b1b9d1860eb3"},{"problem":44,"code":"(fn [n coll]\n         (->> coll (cycle) (drop (mod n (count coll))) (take (count coll)))\n         )","user":"552d9013e4b076ab5578f7ea"},{"code":"#(take (count %2) \n  (drop (mod % (count %2)) \n    (cycle %2)))","problem":44,"user":"4f991ec1e4b0dcca54ed6cfb"},{"code":"(fn [n coll]\n  (let [x (mod n (count coll))]\n  (concat\n    (drop x coll) (take x coll))))","problem":44,"user":"4f504739e4b03ad3f0c10d00"},{"problem":44,"code":"(fn [n coll]\n  (let [x (mod n (count coll))]\n    (concat (drop x coll) (take x coll))\n  )\n)","user":"583667c7e4b089d5ab817cfb"},{"code":"(fn f [n s]\n  (nth (iterate #(cons (last %) (butlast %)) s) (mod (- n) (count s))))","problem":44,"user":"5061cc17e4b0a30dc9a35d34"},{"problem":44,"code":"(fn [n s]\n  (let [is-neg (neg? n)\n           n (Math/abs n)\n           n (rem n (count s))\n           n (if is-neg (- (count s) n) n)]\n    (concat (drop n s) (take n s))))","user":"58949f8de4b00487982d525e"},{"problem":44,"code":"(fn rotate [n coll]\n  (loop [index n\n         output coll]\n    (println index)\n    (if (= index 0)\n      output\n      (if (> index 0)\n        (recur (dec index) (concat (list (second output))\n                                   (rest (rest output))\n                                   (list (first output))))\n        (recur (inc index) (concat (list (last output))\n                                   (drop-last output)))))))","user":"59503c5de4b066ee0a44ae8e"},{"problem":44,"code":"(fn[n coll]\n   (if (neg? n)\n     (reverse (drop (* n -1) (take (+ (* n -1) (count coll)) (cycle (reverse coll)))))\n     (drop n (take (+ n (count coll)) (cycle coll)))))","user":"56163cc1e4b06b1bb21829ff"},{"problem":44,"code":"(fn rotate-sequence [i seq]\n  (let\n      [chunks (split-at (mod i (count seq)) seq)]\n    (concat (second chunks) (first chunks))))","user":"59f7f55de4b0ca45a743a313"},{"code":"#(flatten \n  (let [o (mod (+ % (count %2)) (count %2))]\n  [(drop o %2) (take o %2)]))","problem":44,"user":"512f06c5e4b0762be4c7aad7"},{"code":"(fn [d s] (let [dp (rem (+ (rem d (count s)) (count s)) (count s))] (into (apply vector (drop dp s)) (take dp s))))","problem":44,"user":"5191e91de4b08962174cf733"},{"code":"(fn [x coll] \n  (let [n (rem x (count coll))]\n  (flatten \n    (if (pos? n) \n      (cons (drop n coll) (take n coll)) \n      (cons (drop (+ (count coll) n) coll) \n            (take  (+ (count coll) n) \n    coll))))))","problem":44,"user":"4e9ff8d0535d7eef3080729c"},{"problem":44,"code":"(fn rrr[r coll](loop[ret (vec[])\n                       p (mod r (count coll))\n                       l (count coll)]\n                   (cond\n                     (= (count ret) l)(seq ret)\n                     :else (recur(conj ret (get (vec coll) p))\n                                 (cond\n                                   (= p (- l 1))0\n                                   :else (inc p))\n                                 l\n                                 ))))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":44,"code":"(fn rotate [dir c]\n  (let [size (count c)\n        cycled (cycle c)]\n    (take size (drop (mod dir size) cycled))))","user":"5f838122e4b01aacbe7a2715"},{"problem":44,"code":"(fn[r col]( let[n (mod r (count col) )]\n            identity (if (< n 0)\n          (concat (take-last (- n) col) (drop-last (- n) col))\n          (concat (drop n col) (take n col))\n        )\n          ))","user":"5a80ad4be4b00b71e582a058"},{"code":"#(let [mn (mod (Math/abs %1) (count %2))\n        t (take mn %2)\n        d (drop mn %2)\n        tl (take-last mn %2)\n        dl (drop-last mn %2)]\n    (if (neg? %1)\n      (concat tl dl)\n      (concat d t)))","problem":44,"user":"4e6f4cbc535d5021c1a8961a"},{"problem":44,"code":"(fn [n s]\n  (let [splitted (split-at (mod n (count s)) s)]\n    (concat (second splitted) (first splitted))))","user":"50a00725e4b08df8156e9e46"},{"code":"(fn\n  [rot xs]\n  (let\n    [len (count xs)]\n    (take len (nthrest (cycle xs) (+ len (rem rot len))))))","problem":44,"user":"51008b6fe4b0700a7a02d6e4"},{"problem":44,"code":"(fn [off s]\n  (let [n (mod off (count s))]\n    (concat (drop n s) (take n s))))","user":"5eee7311e4b07c55ae4a0510"},{"code":"(fn [n col]\n  (let [c (count col)\n        d (+ n (* 10 c))]\n    (take c\n      (drop d (cycle col)))))","problem":44,"user":"4f1c2a3a535d64f603146480"},{"problem":44,"code":"(fn [n coll]\n  (let [f #(concat (drop %1 %2) (take %1 %2))]\n    (cond\n      (neg? n)\n      (recur (+ (count coll) n) coll)\n\n      (> n (count coll))\n      (recur (- n (count coll)) coll)\n\n      :else\n      (f n coll))))","user":"4f6d23cde4b07046d9f4efc6"},{"problem":44,"code":"(fn rotate [n coll] \n  (->> (cycle coll)\n        (drop (mod n (count coll)))\n        (take (count coll))\n        \n        ))","user":"6059f25de4b07e92fa001ad1"},{"problem":44,"code":"(fn rot [n s]\n  (let [ops (if (< n 1) {:ds identity :pop last :rest butlast :n (* -1 n)}\n                        {:ds vec :pop first :rest rest :n n})]\n    \n    (loop [n (:n ops)\n           s s]\n      (if (< n 1)\n        s\n        (recur (dec n) (conj ((:ds ops)((:rest ops) s)) ((:pop ops) s)))))))","user":"550c55d0e4b06e50f9beb14d"},{"problem":44,"code":"(fn [n coll]\n   (let [len (count coll)\n         n1 (if (> n len)\n              (- n len)\n              (if (and (neg? n) (> (- n) len)) (+ len n) n))\n         x (if (neg? n1) (- n1) n1)\n         lshift #(concat (take-last x %) (drop-last x %))\n         rshift #(concat (drop x %) (take x %))]\n     ((if (neg? n) lshift rshift) coll)))","user":"56372c3ce4b0bfe05bf117d1"},{"problem":44,"code":"(fn [n r] (let [size (count r)\n                     cut (mod n size)\n                     two (take cut r)\n                     one (drop cut r)]\n                 (concat one two)))","user":"54ef4a1ee4b024c67c0cf883"},{"problem":44,"code":"(fn [n coll] \n  (let [ind (mod n (count coll))]\n      (concat (drop ind coll) (take ind coll))))","user":"55efb51ee4b066087aa9453b"},{"code":"(fn rotate [n xs]\n  (let [length (count xs)\n        amount (if (pos? n)\n                 (mod n length)\n                 (- length (mod (- n) length)))\n        [as bs] (split-at amount xs)]\n    (concat bs as)))","problem":44,"user":"50611456e4b0dc10a69545a5"},{"code":"(fn [r coll] (loop [n (mod r (count coll)) c coll a []] (if (zero? n) (into (vec c) a) (recur (dec n) (rest c) (conj a (first c))))))","problem":44,"user":"52b43468e4b0c58976d9ad1b"},{"problem":44,"code":"(fn rotate [nn alist]\n  (let [n (rem nn (count alist))]\n  (if (> n 0) \n    (concat \n     (drop n alist) \n     (take n alist))\n    (concat \n     (drop (+ n (count alist)) alist)\n     (take (+ n (count alist)) alist)))))","user":"5aaa2dc3e4b0d174b936c8f1"},{"problem":44,"code":"(fn rotate-seq \n [n s]\n (cond\n  (pos? n) (recur (dec n) (concat (rest s) [(first s)]))\n  (neg? n) (recur (inc n) (conj (butlast s) (last s)))\n  :else s))","user":"4f6543cae4b07046d9f4ef41"},{"code":"(fn b [m mm]\n  (take (count mm) (drop (mod m (count mm)) (cycle mm))))","problem":44,"user":"4fe97adde4b0547ebccb245e"},{"problem":44,"code":"(fn [n xs] (apply #(concat %2 %1) (split-at (mod n (count xs)) xs)))","user":"5b8f0861e4b0c0b3ffbd49f4"},{"problem":44,"code":"(fn rotate [n s]\n              (let [l (count s)\n                    r (rem n l)\n                    npos (if (pos? r) r (+ l r))]\n                (concat (drop npos s) (take npos s)) ))","user":"5beadeb5e4b0f319e2d7ec88"},{"problem":44,"code":"(fn rotate [n col]\n  (let [n (mod n (count col))]\n    (if (> 0 n) (rotate (+ (count col) n) col)\n        (let [left (take n col)\n              right (drop n col)]\n          (concat right left)))))","user":"58fc92c5e4b0438e51c2cf9a"},{"code":";(\n#(let [n (mod (Math/abs %1) (count %2))]\n  (cond\n    (>= %1 0) (concat (drop n %2) (take n %2))\n    true (concat (take-last n %2) (drop-last n %2))))\n;2 [1 2 3 4 5])","problem":44,"user":"4fe83efbe4b07c9f6fd12c3b"},{"code":"(fn [n coll]\n  (let [n (mod n (count coll))\n        [x y] (split-at n coll)]\n    (concat y x)))","problem":44,"user":"5098f5d6e4b0cae2931060a4"},{"code":"(fn\n  [n coll]\n  (take (count coll) (drop (mod n (count coll)) (cycle coll))))","problem":44,"user":"52ba447ee4b07a9af57922ce"},{"code":"(fn [r xs] (take (count xs) (nthnext (flatten (repeat xs)) (mod r (count xs)))))","problem":44,"user":"51aab611e4b04e3dc0c27b2d"},{"code":"(fn [rot coll]\n(take (count coll) (drop (mod rot (count coll)) (cycle coll))))","problem":44,"user":"5364ab34e4b0243289761e64"},{"code":"(fn [x l]\n  (loop [ret l\n   c 0\n\t n (mod x (count l))]\n    (if (= c n)\n      ret\n      (recur (concat (rest ret) (list (first ret))) (inc c) n))))","problem":44,"user":"4f192b29535d64f603146464"},{"code":"(fn\n  [N mySeq]\n  (let \n    [n (mod N (count mySeq))]\n    (flatten\n      (conj [] (drop n mySeq) (take n mySeq))\n    )\n  )\n)","problem":44,"user":"5162757ee4b03cfa3774b3fe"},{"problem":44,"code":"(fn [n s]\n  (let [l (count s)\n        dp (mod n l)]\n(concat (drop dp s) (take dp s))\n))","user":"552d2e4fe4b076ab5578f7e1"},{"code":"#(cond \n  (> % 0) (concat (drop (rem % (count %2)) %2) \n                  (take (rem % (count %2)) %2))\n  (< % 0) (concat (take-last (rem (- %) (count %2)) %2) \n                  (drop-last (rem (- %) (count %2)) %2)) \n  true %)","problem":44,"user":"508bed64e4b0be79e5b189cf"},{"problem":44,"code":"(fn rotate\n  [offset sq]\n  (let [offset (mod offset (count sq))]\n    (if (> offset 0)\n      (concat (drop offset sq) (take offset sq))\n      (rotate (+ (count sq) offset) sq))))","user":"5537f30fe4b09218d5f44fd8"},{"code":"(fn shift [n l] ( let [cant (count l) p (mod n cant)]\n   (concat (drop p l) (take p l))))","problem":44,"user":"504f44cfe4b0a02f9cffde65"},{"problem":44,"code":"(fn [n xs]\n  (let [c (count xs)]\n    (take c (drop (mod n c) (cycle xs)))) )","user":"551ee974e4b08d5046aa8a50"},{"problem":44,"code":"(fn [pos coll]\n  (let [len (count coll)\n        shift (if (pos? pos) (mod pos len) (mod (+ len pos) len))]\n    (take len (drop shift (cycle coll)))))","user":"57fc5e42e4b0d3187e900997"},{"problem":44,"code":"#(let [x (mod %1 (count %2))\n        y (- (count %2) x)]\n   (concat (take-last y %2) (take x %2)))","user":"56ac81ace4b03c432f187347"},{"code":"(fn  \n  [x y]\n  (take (count y) \n        (drop (if (>= x 0) \n                x \n                (+ (* 2 (count y)) x)) \n              (cycle y))))","problem":44,"user":"4fa99ee1e4b081705acca1e4"},{"code":"(fn f [n s]\n  (cond (< n 0) (f (+ (count s) n) s)\n        (> n (count s)) (f (- n (count s)) s)\n 1\n    (let [[a b] (split-at n s)]\n      (concat b a))))","problem":44,"user":"4e5fe31a535d8ccf87e9fe50"},{"code":"#(let [a (count %2)\n             b (split-at (mod (+ %1 a) a) %2)]\n        (apply concat (reverse b)))","problem":44,"user":"4e68be01535d8ccf87e9fe88"},{"problem":44,"code":"(fn [rotate-by li] \n  (let [pos-rotate (mod rotate-by (count li)) ]\n    (concat (drop pos-rotate li) (take pos-rotate li))\n  )\n)","user":"57011eb3e4b08d47c97781d1"},{"problem":44,"code":"(fn [n v]\n   (let [c (count v)\n         x (mod (+ c n) c)]\n     (subvec\n       (into [] (concat v v)) x (+ x c))))","user":"56171eade4b06b1bb2182a0c"},{"code":"(fn [raw-n l]\n   (let [n (mod raw-n (count l))\n         s (if (> n 0) n (+ n (count l)))]\n     (concat (drop s l) (take s l))))","problem":44,"user":"4ee868be535d93acb0a6687d"},{"code":"(fn [a b] (let [c (mod a (count b))] (flatten [(drop c b) (take c b)])))","problem":44,"user":"516b381be4b081287f204ea3"},{"problem":44,"code":"#(letfn [(rot [xs]\n     (if (pos? %1)\n       (let [[x & rs] xs]\n         (flatten [rs x]))\n       (cons (last xs) (butlast xs))))]         \n    (nth (iterate rot %2) (if (pos? %1) %1 (* -1 %1))))","user":"5d02fe44e4b0cc9c915881c0"},{"problem":44,"code":"#(apply \n  concat\n  (reverse \n   (split-at \n    (mod %1 (count %2))\n    %2)))","user":"55fe5dfae4b00f4cabc57650"},{"problem":44,"code":"#(let [c (count %2)]\n   (take c (nthrest (cycle %2) (mod % c))))","user":"57e6997ee4b0bfb2137f5af0"},{"problem":44,"code":"(fn [n coll]\n    (let [n (mod n (count coll))]\n      (if (> n 0)\n        (concat (drop n coll) (take n coll))\n        (let [n (+ (count coll) n)]\n          (concat (drop n coll) (take n coll))))))","user":"58db48a5e4b0a4d5acaab679"},{"code":"(fn rotate [n lst]\n\n (letfn [(r-r [lst] (cons (last lst) (butlast lst)))\n         (r-l [lst](conj (apply vector (rest lst)) (first lst)))\n         (c-n-t [lst f n]  (if (= n 0) lst (c-n-t (f lst) f (- n 1))))         \n         ] \n  \n  (if (> n 0)\n    (c-n-t lst r-l n)\n    (c-n-t lst r-r (- n) ) \n  )\n  \n  \n  )\n \n )","problem":44,"user":"5180dc04e4b06b8caf33fa01"},{"problem":44,"code":"(fn [n col] (let [nn (mod n (count col))]\n                  (nth (iterate #(conj (vec (rest %)) (first %)) \n                                   col) nn)\n              ))","user":"5bafd5c8e4b0a20761a234dd"},{"code":"(fn [n col] (let [step (mod n (count col))] (concat (drop step col) (take step col))))","problem":44,"user":"514d7e29e4b019235f6c0587"},{"problem":44,"code":"(fn [n l] (for [i (range (count l))] (nth l (rem (+ i \n                                                    (loop [k n]\n                                                      (if (< k 0)\n                                                        (recur (+ k (count l)))\n                                                        k))) (count l)))))","user":"56588f4ee4b0f9d632dd84b6"},{"code":"(fn rot [n s]\n    (cond (< n 0) (rot (+ n (count s)) s)\n          (> n (count s)) (rot (- n (count s)) s)\n          :else (flatten (conj (take n s) (drop n s)))))","problem":44,"user":"4f16213f535d64f603146449"},{"problem":44,"code":"#(let [m (mod %1 (count %2))]\n           (->> (split-at m %2)\n                reverse\n                (reduce concat)))","user":"57615a22e4b0994c1922fb88"},{"code":"(fn doRot [by xs]  \n  (cond\n    (= 0 by) xs\n    (> by 0)\n      (nth\n        (iterate \n          #(concat (rest %) (list (first %)))\n          (seq xs))\n        by)\n    (< by 0)\n      (reverse \n        (doRot (- by) (reverse xs)))))","problem":44,"user":"4f90e238e4b0dcca54ed6c94"},{"problem":44,"code":"(fn rotate-seq [n s]\n  (let [shift (if (< n 0)\n                (- (dec n))\n                n)]\n    (take (count s) (drop shift (cycle s)))))","user":"55f9c245e4b03cbcff9738ca"},{"code":"(fn [x coll]\r\n  (if (not= 0 x)\r\n    (if (pos? x)\r\n      (recur (dec x) (concat (drop 1 coll) (take 1 coll)))\r\n      (recur (inc x) (concat (drop (- (count coll) 1) coll) (take (- (count coll) 1) coll))))\r\n        coll))","problem":44,"user":"4f60ed88e4b0defedf855fb2"},{"problem":44,"code":"(fn [m s] (let [n (count s) k (rem m n)] (take n (drop (if (> k 0) k (+ k n)) (concat s s)))))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":44,"code":"#(let [v (vec %2) n (count v) d %1]\n   (loop [r [] i 0]\n    (if (= i n)\n     r\n     (recur (conj r (get v (mod (+ i d) n))) (inc i)))))","user":"5a9db5c9e4b0d174b936c7f1"},{"problem":44,"code":"(fn [amount sequ]\n  (let [index (mod amount (count sequ))\n        [fst snd] (split-at index sequ)]\n    (concat snd fst)))","user":"573b8f67e4b0cd1946bd10ae"},{"problem":44,"code":"(fn [steps numbers]\n   (let [item-count (count numbers) positive-shift? (pos? steps) split-point (if positive-shift? (mod steps item-count) (mod (+ item-count steps) item-count))]\n     (concat (second (split-at split-point numbers)) (first (split-at split-point numbers)))))","user":"5f6e5c58e4b02876ed9fd067"},{"problem":44,"code":"(fn Rotator\n  [direction inputSequence]\n  (if (> direction 0)\n    (Rotator (dec direction)\n             (concat (rest inputSequence) \n                     (list (first inputSequence)))\n    )\n    (if (< direction 0)\n      (Rotator (inc direction)\n               (concat (list (last inputSequence))\n                       (take (dec (count inputSequence)) inputSequence))\n      )\n      inputSequence\n    )\n  )\n)","user":"5e16b820e4b0a047bd49f71f"},{"problem":44,"code":"(fn ff [n values] (loop [x n iter 0 finals []] \n  (let [total (count values)]\n    (if (>= iter total)\n      finals\n      (let [indx (mod x total)\n            tks (nth  values indx)\n            ]\n        (recur (inc x) \n               (inc iter)\n               (concat finals (vector tks))))))))","user":"57b35ecbe4b0fbc9809a277e"},{"code":"(fn [n xs]\n  (let [[x y] (split-at (mod n (count xs)) xs)]\n      (concat y x)))","problem":44,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"problem":44,"code":"(fn [r s] (\n           let [n (mod r (count s))]\n           (concat (drop n s) (take n s))))","user":"56df9203e4b0ca2494a095fc"},{"problem":44,"code":"(fn [n s]\n  (let [remainder (mod n (count s))]\n    (concat (drop remainder s) (take remainder s))))","user":"5ce2bf8ee4b0a17bb84e2b2e"},{"code":"#(let [[f l] (split-at (mod % (count %2)) %2)]\r\n     (concat l f))","problem":44,"user":"4db92654535d1e037afb21a0"},{"problem":44,"code":"(fn rot [times item]\n  (flatten\n   (concat\n    (drop 1 (split-at (mod times (count item)) item))\n    (take (mod times (count item)) item);end of new list\n    )\n   )\n  )","user":"5587d91ae4b059ccff29b1e9"},{"problem":44,"code":"(fn [shift s]\n     (let [length (count s)\n           drop-length (if (pos? shift)\n                         shift\n                         (+ length (mod shift length)))]\n       (take length (drop drop-length (cycle s)))))\n;; (concat (drop drop-length s) (take drop-length s))\n;; also works (although need to rename drop length var)\n;; I like the explicit taking of length but neither is obv.\n;; better to me","user":"5df70ee8e4b0a607a9a45c8a"},{"problem":44,"code":"#(->> (cycle %2)\n      (drop (mod %1 (count %2)))\n      (take (count %2)))","user":"5483d59fe4b0e286459a1194"},{"problem":44,"code":"(fn [x xs]\n  (let [n (mod x (count xs))]\n    (concat (drop n xs) (take n xs))))","user":"525b4e8de4b0cb4875a45d0f"},{"code":"(fn [end xs]\n  (let [cnt (count xs)\n        inc (if (> end 0) 1 -1)\n        rot (if (< end 0) \n             #(let [[front end] (split-at (dec cnt) %)]\n               (concat end front))\n             #(let [[front end] (split-at 1 %)]\n               (concat end front)))]\n    (loop [xs xs i 0]\n      (if (== i end)\n        xs\n       (recur (rot xs) (+ inc i))))))","problem":44,"user":"4e593dac535d8a8b8723a29c"},{"problem":44,"code":"(fn [a b]\n  (let [aa (Math/abs a)\n        cb (count b)\n         x (if (> a 0)\n               (rem aa cb)\n               (- cb (rem aa cb)))\n        ]\n  (concat (drop x b) (take x b))))","user":"564d3169e4b0284900eef67c"},{"code":"(fn rotate [x l]\n  (let [len (count l)\n       rot (mod x len)]\n    (concat (take-last (- len rot) l) (take rot l))))","problem":44,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":44,"code":"(fn rotate\n  [r in]\n  (let [x (take (* 2 (count in)) (cycle in))]\n    (if (> r 0)\n      (take-last (count in) (take (+ (mod r (count in)) (count in)) x))\n      (take (count in) (take-last (+ (mod (* -1 r) (count in)) (count in)) x)))))","user":"54b2e881e4b09f271ff37d32"},{"code":"(fn rot [i coll] \n  (let [c (count coll) r (mod i c)] \n    (take c (drop r (concat coll coll)))))","problem":44,"user":"4eb2eae5535d7eef30807351"},{"code":"#(letfn [(rot [n xs] (if (= n 0)\r\n\t\t\t    xs\r\n\t\t\t    (recur (dec n) (concat (drop 1 xs) (take 1 xs)))))]\r\n\t(if (< %1 0) \r\n\t\t(reverse (rot (* -1 %1) (reverse %2)))\r\n\t\t(rot %1 %2)))","problem":44,"user":"4e273301535deb9a81d77ef7"},{"problem":44,"code":"(fn rot [n col]\n  (cond\n    (< n 0) (rot (+ n 1) (cons (last col) (drop-last col)) )\n    (> n 0) (rot (- n 1) (concat (rest col) [(first col)]) )\n    :else col))","user":"595fe942e4b066ee0a44b075"},{"problem":44,"code":"(fn [n nums]\n    (let [len (mod n (count nums))]\n      (concat (drop len nums) (take len nums))))","user":"5c0e3f86e4b01240ff56713d"},{"problem":44,"code":"(fn rot [n l]\n  (let [n (mod n (count l))]\n    (concat (drop n l) (take n l)))\n  )","user":"55ddc5cbe4b050e68259b3d0"},{"code":"#(take (count %2) \n       (drop (if (> %1 0) %1 (mod % (count %2)))\n             (cycle %2)))","problem":44,"user":"52ab61f5e4b0c58976d9ac75"},{"problem":44,"code":"(fn [n col] \n  (let [size (count col) rotation (mod n size)]\n    (->> (repeat col)\n         (flatten)\n         (take (+ size rotation))\n         (drop rotation)\n         )))","user":"5d5eb086e4b0c9e5857d4ff7"},{"problem":44,"code":"(fn rot [x y]  (if (pos? x) \n                  (flatten (conj (take (mod x (count y)) y) (drop (mod x(count y)) y)))\n                  (flatten (conj (take (mod x (count y)) y) (drop (mod x(count y)) y)))))","user":"58e5f995e4b056aecfd47ca5"},{"problem":44,"code":"(fn [n coll]\n  (let [rotate-left #(concat (drop % coll) (take % coll))\n        size (count coll)\n        effective-n (rem n size)]\n    (if (neg? n)\n      (rotate-left (+ size effective-n))\n      (rotate-left effective-n))))","user":"55d6a2ebe4b0e31453f64a9a"},{"problem":44,"code":"(fn rotate\n  [n xs]\n  (let [n (mod n (count xs))]\n    (if (pos? n)\n      (concat (drop n xs) (take n xs))\n      (concat (take-last n xs) (drop-last n xs)))))","user":"5cdc08a2e4b05ee0cb31173a"},{"code":"(fn rotate [n coll]\n   (let [r (mod n (count coll))]\n     (concat (drop r coll) (take r coll))))","problem":44,"user":"5336ca32e4b0e30313ee6c80"},{"code":"(fn [n coll]\n          (let [length (count coll)\n                infinite-series (apply concat (repeat coll))]\n            (if (neg? n)\n              (take length (drop  (- length (rem (Math/abs n) length)) infinite-series))\n              (take length (drop n infinite-series)))))","problem":44,"user":"4daef21cedd6309eace4d169"},{"code":"(fn rotate [n xs] (\n  if (= n 0) xs (if (< n 0) \n                  (rotate (inc n) (cons (last xs) \n                                (reverse (rest (reverse xs)))))\n                  (rotate (dec n) (concat (rest xs)\n                                  (list (first xs)))))))","problem":44,"user":"50ef311fe4b0a78662fa2651"},{"code":"(fn [n coll]\n  (let [l (count coll)]\n    (take l (drop (mod n l) (cycle coll)))))","problem":44,"user":"4eddcbbf535d10e5ff6f532d"},{"problem":44,"code":"(fn [times coll]\n    (let [res \n          (->>\n           (range (if (neg? times)\n                    (* times -1)\n                    times))\n           (reduce (fn [col _]\n                     (conj (into [] (rest col))\n                           (first col)))\n                   (if (neg? times)\n                     (reverse coll)\n                     coll)))]\n      (if (neg? times)\n        (reverse res)\n        res)))","user":"59636cc2e4b066ee0a44b0c7"},{"code":"(fn [r coll]\n  (let [r (mod r (count coll))]\n    (concat (drop r coll) (take r coll))))","problem":44,"user":"52afbc69e4b0c58976d9acc0"},{"problem":44,"code":"(fn [n s] (let [c (mod n (count s))] (concat (nthrest s c) (take c s))))","user":"5078d366e4b08327cd804a5b"},{"problem":44,"code":"#(let [pos (mod %1 (count %2))]\n   (concat (drop pos %2) (take pos %2)))","user":"60096aabe4b074f607df667f"},{"code":"(fn [n coll]\n    (let [c (count coll)\n          m (mod n c)]\n    (take c (drop m (cycle coll)))))","problem":44,"user":"4fe8a3bde4b07c9f6fd12c61"},{"problem":44,"code":"(fn my-rorate [n coll]\n  (let [r (rem n (count coll))\n        n-drop-or-take (if (pos? r) r (+ (count coll) r))]\n    (flatten (list (drop n-drop-or-take coll)\n                   (take n-drop-or-take coll)))))","user":"53b7aa6ce4b047364c0444d1"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)]\n    (apply concat\n           (reverse\n            (if (>= n 0)\n              (split-at (rem n c) coll)\n              (split-at (- c (rem (- n) c)) coll))))))","user":"5523fce8e4b0882d96d091b4"},{"code":"#(let [n (mod % (count %2))] (concat (drop n %2) (take n %2)))","problem":44,"user":"4e6a412e535d8ccf87e9feb6"},{"problem":44,"code":"(fn [n x] \n   (take (count x) \n         (nthrest (cycle x) \n                  (+ (count x) (mod n (count x)))))\n   )","user":"51eda45ce4b0bb507043159b"},{"code":"(fn [s x]\n  (let [s (mod s (count x))]\n    (concat (drop s x) (take s x))))","problem":44,"user":"4ed94d69535d10e5ff6f5303"},{"code":"(fn swoo [n coll]\n  \n  (let [[x y]\n         (split-at (int (mod n (count coll))) coll)\n       ]\n    \n    (concat y x)\n  )\n)","problem":44,"user":"531843c1e4b08068f379ed6c"},{"problem":44,"code":"(fn [n xs]\n  (let [c (count xs)\n        n (if (neg? n) (mod n c) n)]\n    (->> (cycle xs)\n         (drop n)\n         (take c))))","user":"5c3a896be4b0d62ef62d9f94"},{"code":"(fn [n xs](let [n (mod n (count xs))] \n             (#(concat (drop %1 %2) (take %1 %2)) n xs)))","problem":44,"user":"52a04f0ee4b04e0c58e87bc1"},{"problem":44,"code":"#(flatten(reverse(split-at(mod %(count %2))%2)))","user":"5552b617e4b0deb715856df8"},{"code":"#( concat (drop  (mod % (count %2))     %2) (take (mod % (count %2)) %2))","problem":44,"user":"4e78c208535db95036265722"},{"code":"#(apply (fn [x y] (into x (reverse y))) (split-at (mod %1 (count %2)) %2))","problem":44,"user":"4f4a34b2e4b0d56e7bb92c09"},{"problem":44,"code":"#(let\n   [v (vec %2)\n    n (mod %1 (count v))]\n   (concat (subvec v n) (subvec v 0 n)))","user":"5a080bdde4b01bb0ae8afde9"},{"problem":44,"code":"(fn [n xs]\n  (let [len (count xs)\n        backwd? (neg? n)\n        shft (if-not backwd? (rem n len) (- len (rem (- n) len)))]\n    (concat (drop shft xs) (take shft xs)) ))","user":"57f9011ee4b0d3187e900935"},{"problem":44,"code":"(fn rotate [n l]\n  (cond\n    (> n 0)\n      (rotate (dec n) (concat (rest l) [(first l)]))\n    (< n 0)\n      (rotate (inc n) (concat [(last l)] (butlast l)))\n    :else l))","user":"56069006e4b08b23635d3174"},{"problem":44,"code":"(fn [l xs] \n  (let [c (count xs) \n        n (mod l c)]\n    (concat (drop n xs) (take n xs))))","user":"55297a7ae4b0ffed3738f94b"},{"problem":44,"code":"(fn rotate [n col]\n  (if (> n 0)\n     (concat (take-last (- (count col) (mod n (count col))) col) (take (mod n (count col)) col))\n\n     (concat (take-last (mod (* -1 n) (count col)) col) (take (- (count col) (mod (* -1 n) (count col))) col) )\n     ))","user":"60c9a411e4b0e0fa5f1b4307"},{"problem":44,"code":"(fn [shift coll] (let [shift-abs (mod (+ shift (count coll)) (count coll))] (apply conj (take shift-abs coll) (reverse (take-last (- (count coll) shift-abs) coll)))))","user":"5a91988ae4b002d099cae6f9"},{"problem":44,"code":"(fn my-rot [n coll]                                                          \n  (let [ct (count coll)                                                        \n        r (rem n (count coll))]                                                \n    (if (> n 0)                                                                \n      (flatten (conj (take r coll) (drop r coll)))                             \n      (flatten (conj (take (+ ct r) coll) (drop (+ ct r) coll))))))","user":"56eb16d8e4b04a395b9a041d"},{"problem":44,"code":"(fn [amt coll]\n  (let [len \t(count coll)\n        sum \t(+ len amt)\n        rot \t(mod amt len)\n        revrot \t(mod sum len)]\n  (if (> amt 0)\n    (flatten (cons (drop rot coll) (take rot coll)))\n    (flatten (cons (drop revrot coll) (take revrot coll))))))","user":"5658d775e4b00d3155796114"},{"problem":44,"code":"(fn [n numbers]\n  (loop [r numbers\n         x n]\n    (if (= x 0)\n        r\n        (recur (if (< x 0)\n                   (cons (last r) (drop-last r))\n                   (conj (apply vector (drop 1 r)) (first r)))\n               (if (< x 0)\n                   (inc x)\n                   (dec x))))))","user":"52a5a8ebe4b0c58976d9abed"},{"problem":44,"code":"(fn [n col] (let [i (mod (+ n (count col)) (count col)) ] (concat (drop i col) (take i col))))","user":"54c46381e4b045293a27f61a"},{"code":"#(let [n (mod (+ % (count %2)) (count %2))] \n   (concat (drop n %2) (take n %2)))","problem":44,"user":"5260341ee4b03e8d9a4a7034"},{"code":"#(drop (mod %1 (count %2)) (take (+ (mod %1 (count %2)) (count %2)) (cycle %2)))","problem":44,"user":"4f8aa1c1e4b02e764a0a516e"},{"code":"(fn [n seq]\n    (let [j (mod n (count seq))]\n        (concat (drop j seq) (take j seq))))","problem":44,"user":"4f4ac35ae4b0d56e7bb92c18"},{"code":"#(let [len (count %2)\n       offset (cond\n                (> (Math/abs %1) len) (mod %1 len)\n                (< %1 0) (+ len %1)\n                :else %1)]\n   (concat (drop offset %2) (take offset %2)))","problem":44,"user":"53498f88e4b084c2834f4a64"},{"code":"(fn rotate [n lst]\r\n  (let [c (mod n (count lst))]\r\n    (concat (drop  c lst) (take c lst))))","problem":44,"user":"4ddc620d535d02782fcbea06"},{"code":"(fn [n coll]\r\n  (let [ntime (if (neg? n) (- n) n)\r\n        lshift #(concat (rest %) [(first %)])\r\n        rshift #(cons (last %) (drop-last %))]\r\n    ((apply comp (repeat ntime (if (neg? n) rshift lshift))) coll)))","problem":44,"user":"4dd4f0a8535dae65d5c462e4"},{"code":"(fn [n s] \n  (let [size (mod (Math/abs n) (count s))]\n    (cond \n     (= n 0) s \n     (> n 0) (take (count s) (drop size (concat s s)))\n     :else (take (count s) (drop (- (count s) size) (concat s s)))\n     )\n  )\n  )","problem":44,"user":"535197f2e4b084c2834f4ae4"},{"problem":44,"code":"(fn rotate [n s]\n    (if (= n 0)\n        s\n        (if (> n 0)\n            (rotate (dec n) (conj (vec (rest s)) (first s))) \n            (rotate (inc n) (cons (last s) (drop-last s)))\n        )        \n    )\n)","user":"53a94b63e4b047364c044434"},{"problem":44,"code":"(fn [amt c]\n\t(map #(nth c (rem (+ %1 amt (* 2 (count c))) (count c))\n                )\n     (-> c count range))  \n)","user":"5ff4e28ae4b06df49cee1486"},{"problem":44,"code":"(fn [i lst] (concat (nthrest lst (mod i (count lst))) (take (mod i (count lst)) lst)))","user":"56367c51e4b0bfe05bf117cd"},{"problem":44,"code":"(fn [x y] (let [z (max (rem x (count y)) (- (rem x (count y))))] (if (> x 0) (flatten (conj (take z (seq y)) (nthnext (seq y) z))) (flatten (conj (take (- (count y) z) (seq y)) (take-last z (seq y)))))))","user":"5d7158f3e4b04d129b00f2e1"},{"problem":44,"code":"(fn rotate [n s]\n   (nth (iterate\n         (if (neg? n)\n           #(concat [(last %)] (butlast %))\n           #(concat (rest %) [(first %)]))\n         s) (Math/abs n)))","user":"57a9e274e4b0b8559636fc5d"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (let [c (count coll)]\n    (take c (drop (mod n c) (cycle coll)))))","user":"5f088bb3e4b0cf489e8d7f5f"},{"code":"(fn [x y]\n  (if (< x 0)\n    ;shiftright\n    (take (count y) (drop (inc (* (- 1) x )) (cycle y)))\n    ;shiftleft\n    (take (count y) (drop x (cycle y))) ))","problem":44,"user":"4e333091535deb9a81d77f25"},{"problem":44,"code":"(fn rotate-seq [n col]\n  (let [ct (count col)\n        n-after (mod n ct)]\n    (subvec\n      (vec (concat col col))\n      n-after\n      (+ ct n-after))))","user":"5fa52497e4b0fa27300f3dbf"},{"code":"(fn rot* [n1 s]\n  (let [n (mod n1 (count s))]\n  (if (> n 0)\n    (concat (drop n s) (take n s))\n    (reverse (rot* (- n) (reverse s))))))","problem":44,"user":"4f04a06d535dcb61093f6bd9"},{"code":"(fn shift[n coll]\n  (let [k (if ( < n 0) (+ n (count coll)) n)]\n  (if (= 0 k) coll\n      (shift (dec k) (conj (apply vector (drop 1 coll)) (first coll))))))","problem":44,"user":"4fb86dc9e4b081705acca2d8"},{"problem":44,"code":"(fn [n s] (let [rotateNum (mod (+ (count s) n) (count s))] (concat (take-last (- (count s) rotateNum) s) (take rotateNum s))))","user":"573c813be4b0cd1946bd10c5"},{"problem":44,"code":"(fn [n xs]\n  (let [t (mod n (count xs))\n        f (drop t xs)\n        l (take t xs)]\n    (concat f l)))","user":"5ad3d730e4b0ea6055cfabc8"},{"code":"#(-> (split-at (mod %1 (count %2)) %2)\r\n  reverse\r\n  flatten)","problem":44,"user":"4e65f9d4535d8ccf87e9fe73"},{"code":"(fn [n seq1]\n    (let [s (mod n (count seq1))]\n      (flatten (concat (reverse (split-at s seq1))))\n      )\n    )","problem":44,"user":"4f03f3b7535dcb61093f6b85"},{"problem":44,"code":"(fn [n c]\n (let [r (mod n (count c))]\n   (concat (drop r c) (take r c))))","user":"5c950334e4b048ec896c5a44"},{"code":"(fn [n coll]\n  (cond (pos? n) (recur (dec n) (conj (vec (rest coll)) (first coll)))\n        (neg? n) (recur (inc n) (cons (last coll) (butlast coll)))\n        :else coll))","problem":44,"user":"4fb01e53e4b081705acca260"},{"code":"(fn [n coll]\r\n(let [c (count coll)]\r\n (take c (drop (mod n c) (cycle coll)))))","problem":44,"user":"4ddeb916535d08e6dec9fdd9"},{"code":"#(let [c (count %2)] (->> %2 \n    (concat %2 %2) \n    (drop (+ c (mod % c)))\n    (take c)))","problem":44,"user":"50336c6be4b0c6c1199c710f"},{"problem":44,"code":"(fn [rot xs]\n  (concat (drop (mod rot (count xs)) xs) (take (mod rot (count xs)) xs)))","user":"56cc34aee4b0ea9b8538f73c"},{"code":"#(let [data (vec %2), start (if (< (rem %1 (count data)) 0 ) (+ (count data) (rem %1 (count data))) (rem %1 (count data)))] \n               (into (subvec data start) (subvec data 0 start)))","problem":44,"user":"52f5eefbe4b09b582c12c9cb"},{"problem":44,"code":"(fn [n se]\n  (let [\n        cc (mod n (count se))\n        ]\n    (concat (drop cc se) (take cc se))))","user":"58bc6a88e4b0888cdc949d16"},{"problem":44,"code":"(fn h [a b]\n  (let [x (if (< a 0) (+ (* 2 (count  b)) a) a)]\n  (concat (drop (mod x (count b)) b) (take  (mod x (count b)) b) )))","user":"5829d588e4b051871117bf4a"},{"code":"#(let [n (count %2)]\n   (take n (drop (mod % n) (cycle %2))))","problem":44,"user":"521679e9e4b0bf4bffd29cca"},{"problem":44,"code":"(fn [n S]\n  (for [x (range (count S))]\n     (nth S (mod (+ x n) (count S)))\n   )\n )","user":"5649615be4b0284900eef641"},{"problem":44,"code":"(fn [n s] (let [c (count s)] \n            (take c (drop (mod n c) (cycle s)))))","user":"567b2f20e4b05957ce8c61a2"},{"problem":44,"code":"#(let [shift-num (mod %1 (count %2))]\n   (concat (drop shift-num %2) (take shift-num %2)))","user":"553b0d95e4b09218d5f44fff"},{"problem":44,"code":"#(reduce \n   (fn [l v] \n     (if (< v 0)\n       (into [(last l)] (into [] (butlast l)))\n       (into (into [] (drop 1 l)) [(first l)])))\n   (into [] %2)\n   (if (> %1 0) (range %1) (range %1 0)))","user":"5ef5ee81e4b07c55ae4a054a"},{"problem":44,"code":"(fn [n coll]\n  (take(count coll) (drop (mod n (count coll)) (concat coll coll))))","user":"53e241a6e4b036ad0777e3f0"},{"code":"(fn [n l]\n  (let [r (mod n (count l))]\n    (concat (drop r l) (take r l))))","problem":44,"user":"51da631be4b02ceefd947766"},{"problem":44,"code":"#(concat\n  (drop (mod % (count %2)) %2)\n  (take (mod % (count %2)) %2))","user":"53e4fa2ce4b036ad0777e454"},{"problem":44,"code":"(fn [n, v] (->> v\n                (split-at (mod n (count v)))\n                reverse\n                flatten))","user":"56a38a4ce4b0542e1f8d14cc"},{"code":"(fn [n sq]\n  (loop [s (if (>= n 0) sq (reverse sq))\n         i 0]\n\n    (if (= i (if (>= n 0) n (* -1 n)))\n\n      ;; return result\n      (if (>= n 0) s (reverse s))\n\n      ;; recur\n      (recur (conj (vec (rest s)) (first s)) (inc i)))\n    ))","problem":44,"user":"53415755e4b00652c8746ecd"},{"problem":44,"code":"(fn [x xs]\n   (let [length (count xs)\n         new-index (mod x length)]\n     (concat (drop new-index xs) (take new-index xs))))","user":"5785de31e4b0ebec4cfb74e4"},{"problem":44,"code":"(fn \n [n m]\n  \t(let [x (mod n (count m))]\n      \t(concat (drop x m) (take x m))))","user":"58a1d00ae4b02bd94d917ec6"},{"problem":44,"code":"#(->> %2 cycle \n      (drop (+ (count %2)\n               (rem %1 (count %2))))\n      (take (count %2)))","user":"5da8fa72e4b000c986472c2d"},{"problem":44,"code":"(fn [rot col] (concat (drop (mod rot (count col)) col) (take (mod rot (count col)) col)))","user":"5d1a1082e4b0902706380e0e"},{"code":"(fn [n coll] \n   (let [c (count coll)\n         n (if (neg? n) (+ c (rem n c)) \n               (rem n c))] \n     (apply concat (reduce conj () (split-at n coll)))))","problem":44,"user":"509fe759e4b08df8156e9e43"},{"code":"(fn r [x y] \n  (apply #(concat %2 %1) (split-at (mod x (count y)) y)))","problem":44,"user":"4ef0f1a1535dced4c769f212"},{"problem":44,"code":"#( ->> %2 cycle (drop (mod %1 (count %2))) (take (count %2)))","user":"5c527129e4b0fb8c5ffd99de"},{"code":"(fn rotate [n xs]\n   (let [n (cond (> n (count xs)) (mod n (count xs)) \n                 (> (- n) (count xs)) (- (mod (- n) (count xs)))\n                 :else n)]\n     (if (>= n 0)\n     \t(concat (drop n xs) (take n xs))\n     \t(let [n (+ (count xs) n)]\n     \t\t(concat (drop n xs) (take n xs))))))","problem":44,"user":"4fe8d862e4b0547ebccb2428"},{"problem":44,"code":"#(let [[a b] (split-at (mod %1 (count %2)) %2)] (concat b a))","user":"54dae16de4b024c67c0cf758"},{"problem":44,"code":"(fn rotate [n s]\n  (let [i (rem n (count s))]\n    (cond\n     (pos? i) (concat (drop i s) (take i s))\n     (neg? i) (concat (take-last (- i) s) (drop-last (- i) s)))))","user":"5412ef7ee4b01498b1a719da"},{"problem":44,"code":"(fn [n col]\n(let [cc (count col)\nn (+ n (* n n cc))\nn (mod n cc)]\n(concat (drop n col) (take n col))))","user":"54580586e4b01be26fd74616"},{"code":"(fn rotate [d s]\n  (cond (zero? d) s\n        (neg? d) (rotate (inc d) (cons (last s) (butlast s)))\n        (pos? d) (rotate (dec d) (concat (rest s) (list (first s))))))","problem":44,"user":"4e781a2e535d324fb2983d74"},{"problem":44,"code":"#(let [t (mod %1 (count %2))] (concat (drop t %2) (take t %2)))","user":"5649542fe4b0284900eef63f"},{"problem":44,"code":"(fn func\n  [index input-seq]\n  (let [size (count input-seq)\n        true-index (mod index size)]\n    (->> input-seq (split-at true-index) reverse (reduce concat))))","user":"55a62092e4b0acc240e31554"},{"problem":44,"code":"#(->> %2 (split-at (mod % (count %2))) reverse (apply concat))","user":"54ddb556e4b024c67c0cf798"},{"problem":44,"code":"(fn rot [num arr]\n  (let [splited (split-at (mod num (count arr)) arr)]\n    (flatten(conj (first splited) (last splited)))))","user":"5c72c2b9e4b0fca0c16227ab"},{"code":"(fn rotate [r coll]\n  (loop [r r coll (apply vector coll)]\n    (if (= 0 r)\n\t    coll\n\t  (if (> r 0)\n\t    (recur (dec r) (conj (subvec coll 1) (first coll)))\n\t\t(recur (inc r) (conj (butlast coll) (last coll)))))))","problem":44,"user":"52463059e4b09dbe66b56198"},{"problem":44,"code":"(fn [n coll]\n  (if (zero? n)\n    coll\n    (recur (if (> n 0)\n             (dec n)\n             (inc n))\n           (if (> n 0)\n             (concat (rest coll) [(first coll)])\n             (concat [(last coll)] (butlast coll))))))","user":"54fdbe3fe4b07d26eda61d3b"},{"problem":44,"code":"#(let [new-coll (if (pos? %1)\n                   %2\n                   (reverse %2))\n        new-position (if (pos? %1)\n                       %1\n                       (+ %1 (* -2 %1)))\n        real-position (mod new-position (count %2))\n        rotated (flatten\n                 (reduce\n                  (fn [[acc-x acc-y] [x y]]\n                    (if (< x real-position)\n                      [acc-x (conj acc-y y)]\n                      [(conj acc-x y) acc-y]))\n                  [[] []]\n                  (map-indexed vector new-coll)))]\n    (if (pos? %1) \n      rotated \n      (reverse rotated)))","user":"5410499de4b01498b1a719a6"},{"problem":44,"code":"(fn [n s]\n  (prn n s)\n  (if (= n 0)\n    s\n    (if (< n 0)\n      (recur (inc n) (concat [(last s)] (vec (drop-last s)) ))\n      (recur (dec n) (concat (vec (rest s)) [(first s)]))\n      )\n\n    )\n  )","user":"6093b56ce4b00e9e6653c3e0"},{"problem":44,"code":"(fn [delta xs]\n  (let [len (count xs)]\n    (take len (drop (mod delta len) (cycle xs)))))","user":"57a4fa50e4b0a966079561f1"},{"problem":44,"code":"(fn [r coll]\n  (let [[a b] (split-at (mod r (count coll)) coll)]\n    (concat b a)))","user":"50bdd4fee4b0594b91591c84"},{"problem":44,"code":"(fn rot [a b] \n(letfn [\n  (numerigi [x s]  (map-indexed (fn [idx itm] [(mod (- idx x) (count s)) itm]) s ))\n  (ordoni [co] (sort-by #(first %) co))\n  (purigi [co] (map #(last %) co))]\n((comp purigi ordoni (partial numerigi a)) b )))","user":"5576e78de4b05c286339e075"},{"code":"(fn circ\r\n  [n lista]\r\n\t(if (>= n 0)\r\n\t\t(concat (drop (mod n (count lista)) lista) (take (mod n (count lista)) lista))\r\n\t\t(circ (+ n (count lista)) lista)))","problem":44,"user":"4e8a0c82535d3e98b802328d"},{"code":"(fn [how-many col]\n   (let [how-many (mod how-many (count col)) \n         rotate (fn [split-point]\n                  (->> (split-at split-point col)\n                       (reverse)\n                       (apply concat)))]\n     (cond\n      (> how-many 0 ) (rotate how-many)  \n      (< how-many 0) (rotate (+ (count col) how-many))\n      :else col))\n  )","problem":44,"user":"525ed5f4e4b0cb4875a45db8"},{"problem":44,"code":"(fn f [index coll]\n  (flatten (reverse (split-at ((fn g [index length]\n    (cond\n      (and (> index 0) (> length index)) index\n      (and (> index 0) (< length index)) (Math/abs (- length index))\n      (and (< index 0) (> length (Math/abs index))) (+ length index)\n      (and (< index 0) (< length (Math/abs index))) (- length (Math/abs (- length (Math/abs index)))))) index (count coll)) coll))))","user":"5ed15e23e4b016b56eae05ba"},{"code":"#(let [m (mod %1 (count %2))] (concat (drop m %2) (take m %2)))","problem":44,"user":"52a0237de4b04e0c58e87bbe"},{"problem":44,"code":"(fn [n coll]\n  (let [coll-size (count coll)\n        mod-n (mod n coll-size)\n        compl-n (* n -1)\n        compl-mod-n (mod compl-n coll-size)]\n    (if (pos? n)\n      (concat (drop mod-n coll) (take mod-n coll))\n      (concat (drop (inc compl-mod-n) coll) (take (inc compl-mod-n) coll))\n      )\n    )\n  )","user":"5267c74be4b03e8d9a4a7183"},{"problem":44,"code":"(fn [n xs]\n  (let [c (count xs)\n        m (mod n c)]\n    (if (neg? m)\n      (concat (drop (+ m c) xs) (take (+ c m) xs))\n      (concat (drop m xs) (take m xs)))))","user":"51bd78c3e4b0ff155d51d2b0"},{"problem":44,"code":"#(flatten\n      (reverse\n        (split-at\n          (let [go (rem %1 (count %2))]\n            (if (neg? go) (+ go (count %2)) go))\n          %2)))","user":"55a372f1e4b0acc240e31537"},{"code":";(fn rotate\n;  [n xs]\n;  (let [size (count xs)\n;        idx (mod n size)]\n;    (->> xs\n;         (split-at idx)\n;         (reverse)\n;         (apply concat))))\n\n#(let [n (mod % (count %2))]\n   (concat (drop n %2) (take n %2)))","problem":44,"user":"524f4256e4b0541d1855b808"},{"code":"#(let [c (count %2)]\n  (take c (drop (mod %1 c) (cycle %2))))","problem":44,"user":"4dcfbc44535d5973398f92a7"},{"code":"(fn[n x]\n(loop[s n]\n\t(if(< s 0)\n\t\t(recur (+ (count x) s))\n\t\t(if(> s (count x))\n\t\t(recur (- s (count x)))\n\t\t(drop s (concat x (drop-last (- (count x) s) x)))))))","problem":44,"user":"517e6671e4b0329b27fa9f56"},{"code":"(fn [x lst]\n  (let\n    [n (mod x (count lst))]\n  (cond\n   (= 0 n) lst\n   (> n 0) (concat (second (split-at n lst)) (first (split-at n lst)))\n   (< n 0) (concat (reverse (first (split-at (- n) (reverse lst)))) (reverse (second (split-at (- n) (reverse lst))))))))","problem":44,"user":"52091d57e4b0e152394d76f0"},{"problem":44,"code":"(fn rotate [steps s]\n  (cond (= 0 steps) s\n        (< 0 steps) (rotate (dec steps) (conj (vec (drop 1 s)) (first s)))\n        :else (rotate (inc steps) (conj (butlast s) (last s)))))","user":"57af41bce4b0fbc9809a2731"},{"code":"(fn [k col]\n  (let [coll (if (vector? col) col (vec col)) s (count coll) n (rem k s)]\n  (if (pos? (rem n s))\n    (concat (subvec coll n) (subvec coll 0 n))\n    (concat (subvec coll (+ s n)) (subvec coll 0 (+ s n)))\n  )))","problem":44,"user":"53886d2fe4b0640c7a9a589d"},{"problem":44,"code":";#(loop [x (max % (- %)), a %2] (let [out (if (neg? %) (cons (last a) (butlast a))\n;                                                      (conj (vec (rest a)) (first a)))]\n;                           (if (<= x 1) out (recur (dec x) out))))\n\n;better alt sol'n:\n;#(let [inf-s (cylce %2)\n;       cutoff (mod % (count %2))\n;       to-take (if (neg? %) )]\n;   (if (neg? %) () ()))\n\n;even better:\n#(let [[a b] (split-at (mod % (count %2)) %2)]\n   (concat b a))","user":"5af31955e4b0cc2b61a3bc7a"},{"code":"#(flatten ((juxt drop take) (mod % (count %2)) %2))","problem":44,"user":"4e307313535deb9a81d77f14"},{"problem":44,"code":"#(let\n     [c (count %2)\n      p (pos? %)\n      x (if p (- c (mod (- %) c)) (- (- (mod % c) c)))]\n     (cond\n       p\n       (concat (drop x %2) (take x %2))\n       :else\n       (reverse (concat (drop x (reverse %2)) (take x (reverse %2))))))","user":"50d0d2dde4b00b15ecee9768"},{"code":"(fn  [j coll]\r\n      (apply concat (reverse (split-at \r\n        (#(mod %1 %2) j (count coll)) coll))))","problem":44,"user":"4fb23582e4b081705acca28a"},{"problem":44,"code":"#(take (count %2) (drop (rem (+ % (* 2 (count %2))) (count %2)) (apply concat (repeat 2 %2))))","user":"5587d8b3e4b059ccff29b1e8"},{"code":"#(let [x (mod % (count %2))]\n  (concat (drop x %2) (take x %2)))","problem":44,"user":"4f03857e535dcb61093f6b0d"},{"problem":44,"code":"(fn rot [n coll]\n  (cond\n   (< n 0) (rot (+ n (count coll)) coll)\n   (> n (count coll)) (rot (- n (count coll)) coll)\n   :else (apply concat (reverse (split-at n coll)))))","user":"54af220ce4b09f271ff37d02"},{"problem":44,"code":"#(vec (first ((fn [a b]\n   (map (fn [n _] (lazy-cat (drop n b) (take n b))) (list a) b)\n) (mod %1 (count %2)) %2)))","user":"586e47dee4b01531a375e9a9"},{"problem":44,"code":"#(\n   take (count %2)\n    (drop (mod %1 (count %2))\n          (cycle %2)\n     )\n   )","user":"5f0890ffe4b0cf489e8d7f61"},{"code":"(fn [i l]\n  (let [c (mod (+ i (count l)) (count l))]\n    (concat (drop c l) (take c l))))","problem":44,"user":"52bb27fee4b07a9af57922df"},{"problem":44,"code":"(fn [offset items]\n  (let [\n      size      (count items)\n      stepsize  (if (< 0 offset) offset (- 0 offset))\n      stepamt   (rem stepsize size)\n    ]\n    (if (< 0 offset)\n      (concat (nthrest items stepamt) (take stepamt items) )\n      (concat (take-last stepamt items) (drop-last stepamt items) )\n    )\n  )\n)","user":"57ce3fede4b0c746388ab8a6"},{"problem":44,"code":"(fn rotseq [n s]\n  (let [n (mod n (count s))]\n    (concat (drop n s) (take n s))))","user":"5cab33e7e4b048ec896c5c48"},{"problem":44,"code":"#(take (count %2) (nthnext (flatten (repeat %2)) (mod %1 (count %2) )))","user":"57c33eeae4b05aa3c4741cbc"},{"problem":44,"code":"(fn rotate-seq [n sq]\n  (let [m (rem n (count sq))]\n    (if (pos? m)\n      (concat (drop m sq) (take m sq))\n      (concat (take-last (Math/abs m) sq) (take (- (count sq) (Math/abs m)) sq))\n      )))","user":"5244a10de4b0d8acf9ed6ab3"},{"problem":44,"code":"(fn rotate [num coll]\n  (let [num (mod num (count coll))]\n                 (concat (drop num coll) (take num coll))))","user":"56bf4ac0e4b0f26550335985"},{"problem":44,"code":"(fn [n xs]\n      (let [parts (#(split-at (mod n (count %)) %) xs)]\n        (concat (second parts) (first parts))))","user":"52b89d55e4b07a9af57922b3"},{"code":"(fn [n x] \n  (let [howmany (mod n (count x))]\n     (concat (drop howmany x) (take howmany x))))","problem":44,"user":"4f0d093b535d0136e6c22313"},{"code":"(fn [n coll ]\n  (let [ r (rem n (count coll))  [x y] (split-at   (+ r (if (pos? r) 0 (count coll)))     coll)]\n    (concat y x)))","problem":44,"user":"4ea85846535d7eef308072f9"},{"problem":44,"code":"(fn [rotation coll]\n  (let [offset (mod rotation (count coll))]\n    (apply concat ((juxt drop take) offset coll))))","user":"54cc26c1e4b057c6fda3a28a"},{"problem":44,"code":"(fn [n s]\n  (let [len (count s)\n        head (if (neg? n) (reverse (take (mod (* n -1) len) (reverse s)))\n              (drop (mod n len) s))\n        tail (if (neg? n) (take (mod (+ len n) len) s)\n              (take (mod n len) s))]\n    (concat head tail)))","user":"555a5731e4b0deb715856e44"},{"problem":44,"code":";(fn rotate [x coll]\n;  (if (< x 0)\n;    (rotate (- (count coll) (- (rem x (count coll)))) coll)\n;    (let [x (rem x (count coll))] \n;      (reduce #(cons %2 %1) (take x coll) (reverse (drop x coll))) ; We have to reverse the list to cons it ub reverse order\n;      )))\n\n; Iteration 2\n; Learnt that the mod of a negative number by (count coll) acts as a wrap around the other end\n; (mod x l) is probably implemented as:  (+ (rem x l) + l) for negative numbers. \n;(fn rotate [x coll]\n;    (let [x (mod x (count coll))] \n;      (reduce #(cons %2 %1) (take x coll) (reverse (drop x coll))) ; We have to reverse the list to cons it ub reverse order\n;    )\n;)\n; Iteration 3\n; reduce could be just replaced by concat to perform better as it would not realize the collection.\n(fn rotate [x coll]\n  (let [x (mod x (count coll))] \n    (concat (drop x coll) (take x coll) )\n    )\n)","user":"5722bf99e4b0c5bde472c0d6"},{"problem":44,"code":"(fn [num lst]\n  (let [x (if (pos? num) num (+ num (count lst)))\n        n (mod x (count lst))]\n    (concat (drop n lst) (take n lst))))","user":"55ede35ce4b0121d4835fde1"},{"code":"(fn myrotate [n s]\r\n  (cond\r\n   (< n 0) (myrotate (inc n) (cons (last s) (drop-last s)))\r\n   (> n 0) (myrotate (dec n) (concat (rest s) (list (first s))))\r\n   :else s))","problem":44,"user":"4e50c894535dc968683fc4ee"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)\n        offset (mod (+ c n) c)]\n    (apply concat (reverse (split-at offset coll)))))","user":"5764457ae4b0994c1922fbf3"},{"code":"(fn [n s]                                                               \n           (let [c (count s)                                                   \n                 n (mod n c)                                                   \n                 m (if (neg? n) (+ c n) n)]                                    \n             (concat (drop m s)                                                \n                     (take m s))))","problem":44,"user":"4e4be570535dc968683fc4d8"},{"code":"#(let [x (rem %1 (count %2))\r\n       pos (if (> %1 0)\r\n             x\r\n             (+ (count %2) x))\r\n       res (split-at pos %2)]\r\n    (concat (last res) (first res)))","problem":44,"user":"4eb66737535d7eef3080736b"},{"code":"(fn rot [n coll]\n  (let [count (count coll) amount (mod n count) s (split-at amount coll)]\n    (concat (second s) (first s))))","problem":44,"user":"4f82f1b9e4b033992c121c0f"},{"problem":44,"code":"(fn [n s]\n  (let [[f r] (split-at (mod n (count s)) s)]\n    (concat r f)))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn [i xs]\n    (let [c (count xs)\n          n ((fn f [i] (cond\n                         (< i 0) (f (+ c i))\n                         (> i c) (f (- i c))\n                         :else i)) i)]\n      (concat (drop n xs) (take n xs))))","problem":44,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn [n xs]\n  (let [rot (mod n (count xs))]\n    (concat (drop rot xs) (take rot xs))))","problem":44,"user":"4f0f36a7535d0136e6c22336"},{"problem":44,"code":"(fn [x s]\n  (let [n (mod x (count s))]\n    (concat (nthrest s n) (take n s))))","user":"53e150e5e4b0d874e779ae53"},{"problem":44,"code":"(fn [n coll]\n  (let [coll-len (count coll)\n        n (rem n coll-len)]\n    (cond\n     (pos? n) (concat (drop n coll) (take n coll))\n     (neg? n) (concat (drop (+ coll-len n) coll)\n                      (take (+ coll-len n) coll))\n     :else coll)))","user":"540a4f20e4b0addc1aec66ef"},{"problem":44,"code":"(fn [n l] (let [c (count l)\n                p (rem n c) \n                s (if (neg? p) (+ p c) p)]\n            (concat (drop s l) (take s l))))","user":"577202d2e4b0979f896515c0"},{"code":"(fn [r s]\n  (if (>= r 0)\n    (last (take (inc r) \n      (iterate #(reverse (conj (reverse (rest %)) (first %))) s)))\n      (last (take (- (dec r))\n      (iterate #(cons (last %) (butlast %)) s)))))","problem":44,"user":"4ef355e3535dced4c769f228"},{"problem":44,"code":"#(let [c (count %2)]\n    (take c (drop (mod % c)\n                  (cycle %2))))","user":"51e3a549e4b0c611d6113e47"},{"problem":44,"code":"(fn [n s]\n  (let [rot (fn [raw-n s] \n              (let [n (mod raw-n (count s))]\n                (concat (drop n s) (take n s))))]\n    (if (pos? n)\n      (rot n s)\n      (rot (+ (count s) n) s))))","user":"5f93529ae4b0715f5002d7bc"},{"code":"(fn ro [dir s]\n  (let [ len (count s)  off (mod dir len) ]\n    (concat (nthrest s off) (take off s)  )))","problem":44,"user":"5101192ae4b0bef64c30e266"},{"problem":44,"code":"(fn [n coll]\n    (cond\n      (< n 0)\n      (recur (inc n) (cons (last coll) (butlast coll)))\n      (> n 0)\n      (recur (- n (count coll)) coll)\n      :else coll))","user":"55916764e4b0604b3f94d57b"},{"code":"(fn rotate-seq [n coll]\n  (cond\n    (< n 0)            (rotate-seq (+ n (count coll)) coll)\n    (> n (count coll)) (rotate-seq (- n (count coll)) coll)\n    :else              (concat (drop n coll) (take n coll))))","problem":44,"user":"50f94727e4b0e7c80cb15a49"},{"problem":44,"code":"(fn rotate-sequence\n  ([n sequence]\n   (if (neg? n)\n     (loop [acc sequence current 0]\n       (if (= current n)\n         acc\n         (recur (concat [(last acc)] (butlast acc)) (- current 1))))\n     (loop [[fir & res :as acc] sequence current 0]\n       (if (= current n)\n         acc\n         (recur (concat res [fir]) (+ current 1)))))))","user":"5ce102b0e4b0a17bb84e2b10"},{"code":"(fn [n x] (let [np (mod (+ n (count x)) (count x))] (concat (drop np x) (take np x))))","problem":44,"user":"50e8ff6be4b0ebbe794eb7f3"},{"problem":44,"code":"(fn [s xs]\n  (for [i (range 0 (count xs))]\n    (nth xs (mod (+ i s) (count xs)))))","user":"597fa3fbe4b021a7a535fdbf"},{"problem":44,"code":"(fn rot [ct seq]\n    (cond\n      (= ct 0) seq\n      (< ct 0) (rot (+ (count seq) ct) seq)\n      (> ct 0) (rot (dec ct) (concat (rest seq) [ (first seq) ] ))\n      )\n    )","user":"57aa290de4b0b8559636fc65"},{"problem":44,"code":"(fn [n col]\n    (concat (drop (mod n (count col)) col) (take (mod n (count col)) col)))","user":"55536a8ae4b0deb715856e03"},{"problem":44,"code":"(fn [n x]\n  (apply concat (reverse (split-at (mod n (count x)) x))))","user":"5a6a7cc5e4b0512ff01cda27"},{"code":"(fn [n coll]\n  (let [n (if (pos? n) n (+ (count coll) n))\n        n (mod n (count coll))]\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"4f49e869e4b0d56e7bb92c02"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [l (count coll)\n        n' (mod (if (neg? n) (+ l n) n) l)]\n    (concat (drop n' coll) (take n' coll))))","user":"601aaa93e4b0bf4ca6b10926"},{"code":"#(flatten(reverse(split-at (mod % (count %2)) %2)))","problem":44,"user":"531576b4e4b08068f379ed29"},{"problem":44,"code":"(fn q[n xs]\n  (let [\n      size (count xs)\n      shift (if (> n 0) n (- size (- (rem n size)) ))]\n    (\n    take size (drop shift (cycle xs))      \n    )\n  )\n)","user":"5717d674e4b07c98581c3b1a"},{"problem":44,"code":"(fn [k s]\n  (take (count s) (drop (if (< k 0) (+ (* (- 0 k) (count s)) k) k) (cycle s))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":44,"code":"(fn rot [n xs]\n  (let [c (count xs)]\n    (take c (drop (+ (* 2 c) n) (flatten (repeat xs))))))","user":"4f6ba7bce4b07046d9f4efb0"},{"problem":44,"code":"(fn [mag l]\n  (let [n (mod mag (count l))]\n  (if (> n 0)\n    (concat (drop n l) \n            (take n l))\n    (concat (take-last (- n) l) \n            (drop-last (- n) l)))))","user":"55ea0784e4b0121d4835fda8"},{"code":"(fn [x c]\n  (let [y (mod x (count c)),\n     c2 (split-at y c)]\n    (concat (last c2) (first c2))\n   )\n)","problem":44,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":44,"code":"(fn [n s]\n  (take (count s)\n        (drop (if (pos? n)\n                n\n                (+ (count s)\n                   (mod n (count s))))\n              (cycle s))))","user":"56427ec0e4b08d4f616f5f1a"},{"problem":44,"code":"(fn rotate\n  [i s]\n  (cond\n    (< 0 i) (rotate (dec i) (concat (rest s) [(first s)]))\n    (> 0 i) (rotate (inc i) (concat [(last s)] (drop-last s)))\n    :default s))\n\n;(fn [n xs]\n;  (let [i (mod n (count xs))]\n;    (concat (drop i xs) (take i xs))))","user":"582cbf48e4b051871117bfa6"},{"problem":44,"code":"#(reduce concat (reverse (split-at (mod %1 (count %2)) %2)))","user":"575dda55e4b02ea11479938c"},{"problem":44,"code":"(fn [index sequence]\n      (take (count sequence)(drop (mod index (count sequence)) (cycle sequence))))","user":"53f891eee4b0de5c4184856d"},{"problem":44,"code":"(fn [n x]\n  (let [n (mod n (count x))]\n    (concat (drop n x) (take n x))\n    \n    ))","user":"55be39f9e4b01b9910ae2a06"},{"problem":44,"code":"(fn rotate-left [n lst]\n  (if (zero? (count lst)) ()\n    (let [num (mod n (count lst))]\n      (concat (second (split-at num lst)) (first (split-at num lst))))))","user":"56fc1bc7e4b07572ad1a88dd"},{"problem":44,"code":"(fn [n seq]\n      (let [seq-size (count seq)\n            pos-n (max n (- n))\n            m  (mod pos-n seq-size)\n            cutoff (if (>= n 0) m (- seq-size m))]\n            (apply #(into (vec %2) %1) (split-at cutoff seq))\n            )\n      )","user":"5d809b4fe4b0915913b1d36c"},{"problem":44,"code":"(fn [n coll]\n  (let [i (mod n (count coll))\n        [front back] (split-at i coll)]\n    (concat back front)))","user":"55ea0780e4b0121d4835fda7"},{"code":"(fn [rot xs]\n  (loop [n rot, nxs xs]\n    (cond\n     (= 0 n) nxs\n     (neg? n) (recur (inc n) (concat [(last nxs)] (drop-last nxs)))\n     :else (recur (dec n) (concat (rest nxs) [(first nxs)])))))","problem":44,"user":"52b65f26e4b0c58976d9ad43"},{"problem":44,"code":"#(let [nl (mod %1 (count %2))] (concat (drop nl %2) (take nl %2)))","user":"586aa811e4b0f14aab7c88c4"},{"problem":44,"code":"( fn \n  rotate [n v ]\n  ( ->> (concat v v )\n    \t(drop (mod n (count v)))\n    \t(take (count v)) \n              ))","user":"516d227fe4b06f078fab252d"},{"problem":44,"code":"(fn rot [offset ls]\n   (if (>= offset 0)\n     (concat (drop (mod offset (count ls)) ls) (take (mod offset (count ls)) ls))\n     (reverse (rot (- offset) (reverse ls)))))","user":"547584d9e4b0c51c1f4d729b"},{"problem":44,"code":"(fn ROT [n xs] \n  (if (neg? n)\n    (reverse (ROT (* -1 n) (reverse xs)))\n    (let [[h t] (split-at (mod n (count xs)) xs)]\n      (concat t h)\n      )\n    )\n  )","user":"58334d18e4b089d5ab817c97"},{"code":"(fn [n xs]\n  (let [n (mod n (count xs))] (concat (drop n xs) (take n xs))))","problem":44,"user":"504f865ee4b0a02f9cffde90"},{"problem":44,"code":"(fn [rot lst] (let [newlst (split-at (mod rot (count lst)) lst)]\n                (concat (last newlst) (first newlst))))","user":"564716e6e4b0284900eef616"},{"problem":44,"code":"(fn rotate [n s]\n  (cond\n   (zero? n) s\n   (> n 0) (rotate (dec n) (concat (rest s) (list (first s))))\n   :else (rotate (inc n) (cons (last s) (butlast s)))))","user":"54ca93abe4b057c6fda3a264"},{"code":"(fn [n coll]\n  (->> \n    (iterate inc n)\n    (take (count coll))\n    (map #(mod % (count coll)))\n    (map (partial nth coll))))","problem":44,"user":"516abecae4b081287f204e9f"},{"problem":44,"code":"(fn rotate-seq [dir coll]\n  (let [n (count coll)\n        d (if (pos? dir)\n            dir\n            (- n (mod (* dir -1) n)))]\n    (take n (drop d (cycle coll)))))","user":"56038f34e4b04bb52996e1bc"},{"problem":44,"code":"(fn[n s]\n  (let [\n        t (count s)\n        a (mod n t)\n        r (- t a)]\n    (concat (take-last r s) (take a s))))","user":"54651ef5e4b01be26fd746d5"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (cond\n    (= 0 n) coll\n    (< n 0) (rotate (inc n) (concat (take-last 1 coll) (drop-last coll)))\n    :else (rotate (dec n) (concat (drop 1 coll) (take 1 coll)))))","user":"592af6eee4b072a2710fcf2c"},{"problem":44,"code":";#(apply concat\n;  (let [len (count %2) rot (rem %1 len)]\n;  \t(if (>= rot 0)\n;      [(drop rot %2) (take rot %2)]\n;      [(take-last (- rot) %2) (drop-last (- rot) %2)]\n;    )))\n\n#(apply concat (reverse (split-at (mod %1 (count %2)) %2)))","user":"53ecac57e4b0d648e757f4b3"},{"problem":44,"code":"(fn my-rotate\n  [n coll]\n  (let [start-offset (mod n (count coll))]\n    (concat (drop start-offset coll) (take start-offset coll))))","user":"5a0a04eee4b0eab8c0448935"},{"problem":44,"code":"(fn rotate [n coll]\n  (if (>= n 0)\n    (drop n (take (+ n (count coll)) (cycle coll)))\n    (drop (inc (* -1  n)) (take (inc (- (count coll) n)) (cycle coll)))\n    )\n  )","user":"5b92f178e4b0c0b3ffbd4a41"},{"problem":44,"code":"(fn revr [a b]\n\n  (if (zero? a)\n\n    b\n\n    (if (pos? a)\n\n      (revr (dec a) (concat (drop 1 b) (take 1 b)))\n\n      (revr (inc a) (concat (drop (dec (count b)) b) (take (dec (count b)) b))))))","user":"586b6a0ae4b01531a375e957"},{"code":"(fn my-rotate [n a-seq]\n    (let [size (count a-seq)]\n      (map (fn [index] \n             (let [new-index (+ index n) rest-index (rem new-index size)] \n                 (cond (> 0 rest-index) (nth a-seq (- size (- rest-index)))\n                       (>= rest-index size) (nth a-seq (- rest-index size))\n                       true (nth a-seq rest-index)                          \n                 )\n              )\n            ) \n           (range size)\n       )\n     )\n )","problem":44,"user":"52763696e4b03e8d9a4a74d7"},{"problem":44,"code":"(fn rotate-seq\n  [number coll]\n  (loop [n number res coll]\n    (cond\n      (= n 0) res\n      (> n 0) (recur (dec n) (concat (rest res) (list (first res))))\n      (< n 0) (recur (inc n) (cons (last res) (butlast res))))))","user":"550d9452e4b06e50f9beb15d"},{"problem":44,"code":"(fn [s xs]\n  (let [l (count xs)\n        i (mod (+ l s) l)\n        xs (vec xs)]\n    (concat (subvec xs i) (subvec xs 0 i))\n  ))","user":"52824143e4b0757a1b171453"},{"code":"(fn [i coll]\n  (last (take (inc (mod (- (count coll) i) (count coll)))\n              (iterate #(cons (last %) (butlast %)) coll))))","problem":44,"user":"4fa5406fe4b081705acca1ac"},{"code":"(fn [n col]\n  (let [c (count col)]\n    (take c (drop (mod n c) \n                  (cycle col)))))","problem":44,"user":"4df0524e535d08e6dec9fe17"},{"problem":44,"code":"(fn [offset xs]\n  (take (count xs)\n    (drop (mod offset (count xs)) (cycle xs))))","user":"5e98e8a9e4b0157ca96647dc"},{"problem":44,"code":"(fn [x y] (loop [lst y\n                 acc []\n                 idx 0]\n            (if (empty? lst)\n              acc\n              (recur (next lst) (conj acc (nth y (mod (+ idx x) (count y)))) (inc idx))             \n             )                                            \n           )\n  )","user":"5877e40ee4b01531a375eaab"},{"problem":44,"code":"#(let [n (count %2) s (mod %1 n) d (concat %2 %2)] (take n (nthrest d s)))","user":"5c512811e4b0fb8c5ffd99c2"},{"code":"(fn [n xs] (take (count xs) (drop (mod n (count xs)) (cycle xs))))","problem":44,"user":"518ec633e4b0cd6ff516769e"},{"problem":44,"code":"(fn [n coll] \n  (take (count coll) \n        (drop (mod n (count coll))\n              (cycle coll))))","user":"592db566e4b072a2710fcf7c"},{"problem":44,"code":"(fn [n xs]\n  (let [[hd tl] (split-at (mod n (count xs)) xs)]\n    (concat tl hd)))","user":"55dbc7cde4b050e68259b3a4"},{"code":"(fn [n items]\n           (let [split-and-return (fn [i items]\n                                    (let [split (split-at i items)]\n                                      (concat (second split) (first split))))\n                 r                 (if (> (Math/abs n) (count items))\n                                     (mod n (count items))\n                                     n)]\n           (if (pos? r)\n             (split-and-return  r items)\n             (split-and-return (+ (count items) r) items))))","problem":44,"user":"504ee511e4b0e7ad84dbc4a4"},{"problem":44,"code":"#(let [n (count %2) n (mod %1 n)] (concat (drop n %2) (take n %2)))","user":"521ed5b4e4b0e6c71e0c0bc0"},{"problem":44,"code":"(fn [num coll] (let [num-elems (count coll)\n                     abs-n (if (pos? num) num (* num -1))\n                     n-temp (if (> abs-n num-elems) (mod abs-n num-elems) abs-n)\n                     n (if (> 0 num) (+ num-elems (* -1 n-temp)) n-temp)]\n                 (flatten (conj (take n coll) (drop n coll)))))","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":44,"code":"(fn [n coll]\n      (loop [cnt n l coll]\n        (cond\n          (> cnt 0) (recur (dec cnt) (concat (rest l) (list (first l))))\n          (< cnt 0) (recur (inc cnt) (concat (list (last l)) (butlast l)))\n          :else l)))","user":"5f86a98be4b0649ffcda4caa"},{"code":"#(if (< %1 0) \n   (concat (take-last (mod (* -1 %1) (count %2)) %2) (drop-last (mod (* -1 %1) (count %2)) %2))\n   (concat (drop (mod %1 (count %2)) %2) (take (mod %1 (count %2)) %2)))","problem":44,"user":"532b43c3e4b09d4e7a9b5531"},{"problem":44,"code":";; After looking at some of the solutions. I was enabled to \n;;re-work the function below to something shorter. \n#_(fn rotate[n x]\n  (letfn[(helper [l]\n  (concat (rest l)(list (first l))))]\n   (let [i (mod n (count x))]\n(last (take (inc i) (iterate helper x)))\n)))\n\n(fn foo [n l]\n  (letfn [(rotate-left [l]\n   (concat (rest l) (list (first l))))\n         (rotate-right [l]\n  (let [r (reverse l)]\n    (conj (reverse (rest r))(first r))))]\n      (if (neg? n)\n      (last (take (inc (- n)) (iterate rotate-right l)))\n      (last (take (inc n) (iterate rotate-left l))))))","user":"52faf67ce4b047fd55837005"},{"problem":44,"code":"(fn mutate\n  [x seq1]\n  (let [n (mod x (count seq1))]\n    (concat (take-last (- (count seq1) n) seq1) (take n seq1))\n    ))","user":"53d6b266e4b0e771c3025459"},{"problem":44,"code":"(fn [n coll]\n  (->>\n   (apply concat (repeat coll))\n   (drop (mod n (count coll)))\n   (take (count coll))))","user":"5fa74b82e4b0fa27300f3dda"},{"problem":44,"code":"(fn rotate [n coll]\n  (if (and (> n 0) (< n (count coll)))\n  \t  (concat (drop n coll) (take n coll))\n      (if (> n (count coll))\n        (rotate (- n (count coll)) coll)\n  \t  \t(rotate (+ n (count coll)) coll)\n      )\n   )\n )","user":"55ec1048e4b0121d4835fdc3"},{"code":"(fn [n s]\r\n    (let [l (count s)\r\n          nn (mod (+ l n) l)]\r\n      (flatten (conj \r\n        (take nn s )\r\n        (take-last (- l nn) s) \r\n        )))\r\n  )","problem":44,"user":"5071e520e4b0e3170b5a8683"},{"problem":44,"code":"(fn [n l]\n  (let [m (mod n (count l))]\n      (concat (drop m l) (take m l))))","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn [index col]\n  (let [length (count col)\n        i (if (< index (* length -1))\n              (* -1 (rem (Math/abs index) length))\n              index)\n        split-index (rem (+ length i) length)\n        vals (split-at split-index col)]\n  (flatten (conj (first vals) (rest vals)))))","problem":44,"user":"4daeabf6edd6309eace4d15c"},{"problem":44,"code":"(fn [c s]\n  (let [m (mod c (count s))]\n    (concat (drop m s) (take m s))))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":44,"code":"(fn rotatr\n  [rot coll]\n  (cond\n    (< rot 0)\n    (let [head (butlast coll)\n          tail (last coll)\n          rot1 (concat [tail] head)]\n          (rotatr (+ rot 1) rot1))\n    (> rot 0)\n    (let [[head & tail] coll\n          rot1 (concat tail [head])]\n          (rotatr (- rot 1) rot1))\n    :else coll))","user":"5826142ce4b051871117beed"},{"problem":44,"code":"(fn [n xs]\n     (let [l (count xs)\n           offset (loop [o n]\n                    (if (pos? o) o (recur (+ l o))))]\n       (->> (apply concat xs (repeat xs))\n            (drop offset) (take l))))","user":"54eff2bee4b024c67c0cf88d"},{"problem":44,"code":"(fn [n coll]\n    (let [c (count coll)]\n      (take c (drop (mod n c) (cycle coll)))))","user":"560434cfe4b0c80df0ca2658"},{"code":"(fn rot [pos coll]\n  (let [len   (count coll)\n        npos  (loop [p pos]\n                (if (> 0 p)\n                  (recur (+ p len))\n\t\t  p))\n        ]\n    (take len (drop npos (cycle coll)))))","problem":44,"user":"531c0619e4b08068f379ed98"},{"problem":44,"code":"(fn my-rotate [times coll]\n  (loop [curr 0\n         output coll]\n    (cond\n      (< curr times) (recur (inc curr) (concat (rest output) (list (first output))))\n      (> curr times) (recur (dec curr) (conj (take (dec (count output)) output) (last output)))\n      :else output\n      )))","user":"551d5cb9e4b07993ea3788e9"},{"code":"(fn [x y] (concat (second (split-at (mod x (count y)) y)) (first (split-at (mod x (count y)) y))))","problem":44,"user":"50f85902e4b0aafb827eb1f8"},{"code":"#(let [c (count %2)]\n    (take c (drop (mod % c) (cycle %2))))","problem":44,"user":"4e72ac47535d5021c1a89666"},{"problem":44,"code":"#(take (count %2)\n        (drop (mod %1 (count %2)) (cycle %2)))","user":"566734c4e4b04acd4f672dcc"},{"problem":44,"code":"(fn [n s]\n  (take (count s)\n        (drop (mod n (count s))\n              (cycle s))))","user":"576da825e4b0979f8965156c"},{"problem":44,"code":"(fn [n coll] (let [x (count coll) skip (mod n x)] (->> coll cycle (drop skip) (take x))))","user":"530a6cbae4b02e82168697be"},{"code":"(fn [n s]\n  (let [n (mod n (count s))]\n    (concat (drop n s) (take n s))))","problem":44,"user":"4f45c72be4b0d56e7bb92b8a"},{"problem":44,"code":"(fn rotate-bd [i x]\n  (let [ shift_mod (mod i (count x)) ]\n\n        (concat (drop shift_mod x) (take shift_mod x))\n      )\n  )","user":"5c24c654e4b07e362c2305a7"},{"problem":44,"code":"#(loop [n %1 sequ %2]\n  (cond (< n 0)\n        (recur (+ (count sequ) n) sequ)\n    \t(>= n (count sequ))\n        (recur (- n (count sequ)) sequ)\n        :else (concat (drop n sequ) (take n sequ))))","user":"56e31e20e4b03a7c14b85a3f"},{"code":"(fn rotate\n  [n coll]\n  (let [length (count coll)\n  offset (mod (+ length n) length)]\n    (->> coll\n     (repeat)\n     (flatten)\n     (drop offset)\n     (take length))))","problem":44,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":44,"code":"(fn rot [n col]\n  (let [c (count col)\n        x (rem n c)\n        y (if (< x 0) (+ c x) x)] \n      (apply concat (reverse (split-at y col)))))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":44,"code":"(fn rotate [n x]\n  (let [index (mod n (count x))\n        [a b] (split-at index x)]\n    (concat b a)))","user":"572010a4e4b0c5bde472c08c"},{"code":"(fn [n c] \n  (let [split (mod n (count c))\n        colls (split-at split c)]\n    (concat (second colls) (first colls))))","problem":44,"user":"51b0fc95e4b0c53cf2e68a72"},{"code":"#(let [c (count %2),\n       i (mod (+ c %1) c)]\n  (concat (drop i %2) (take i %2)))","problem":44,"user":"4e8f5eba535d65386fec214c"},{"code":"(fn [n ls]\r\n  (loop [an ls i n]\r\n    (cond\r\n     (zero? i) an\r\n     (pos? i) (recur (concat (rest an) (list (first an))) (dec i))\r\n     :else (recur (cons (last an) (butlast an)) (inc i)))))","problem":44,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn [n col] \n    (let [m (if (neg? n) (inc (* n -1)) n)] \n        (drop m (take (+ m (count col)) (cycle col)))))","problem":44,"user":"4fe1a734e4b0dd6cd5ce3637"},{"problem":44,"code":"(fn rotate [n lst]\n  (let [div (rem n (count lst))\n        m (if (neg? div)\n              (+ (count lst) div)\n              div)\n        [h t] (split-at m lst)]\n    (concat t h)))","user":"5895477fe4b00487982d527c"},{"code":"#(loop [n (+ (rem %1 (count %2)) (count %2)) col (vec %2)]\n  (if (<= n 0)\n    col\n    (recur (dec n) (vec (drop 1 (conj col (first col)))))))","problem":44,"user":"4f77b68de4b0fbe0118ec581"},{"code":"(fn [n l]\n  (let [n (mod n (count l))]\n    (if (> n 0)\n      (concat (drop n l) (take n l))\n      (concat (drop (inc (- n)) l) (take (inc (- n)) l)))))","problem":44,"user":"4f8320e9e4b033992c121c18"},{"code":"(fn [n coll]\n    (let [n (mod n (count coll))]\n      (concat (drop n coll) (take n coll))))","problem":44,"user":"52d6a9c2e4b09f7907dd1365"},{"code":"(fn [n cl]\n  (take (count cl) (nthrest (cycle cl) (+ (count cl) (mod n (count cl)))))\n)","problem":44,"user":"51db9e1ee4b0e067a9bbadc9"},{"code":"(fn [n coll]\n    (let [i (mod n (count coll))]\n      (concat (drop i coll) (take i coll))))","problem":44,"user":"4ee77f15535d93acb0a66868"},{"code":"(fn [n coll]\n  (let [x (mod n (count coll))]\n      (concat (drop x coll) (take x coll))))","problem":44,"user":"4fcd155de4b065de69964ca3"},{"problem":44,"code":"(fn r [n xs]\n  (let [l (count xs)\n        n (if (pos? n) (rem n l) (+ l (rem n l)))]\n    (concat (drop n xs) (take n xs))))","user":"5ec3a13ae4b08d0ec38692b9"},{"code":"(fn [n l]\n(let [\n      rotate \n      (fn [l](concat (rest l) (list (first l))))\n      rotate-reverse\n      (fn [l] (reverse (rotate (reverse l))))\n      ]\n\t(if (< n 0)\n      (last (take (+ (- 0 n) 1) (iterate rotate-reverse l)))\n      (last (take (+ n 1) (iterate rotate l)))\n      )\n  )\n  )","problem":44,"user":"4f031883535dcb61093f6a5e"},{"problem":44,"code":"(fn [n coll]  \n  (let [idx (mod n (count coll))]\n     (concat (drop idx coll) (take idx coll))))","user":"571c2babe4b07c98581c3b73"},{"problem":44,"code":"(fn [i s]\n  (let [ii (mod i (count s))]\n    (flatten [(drop ii s) (take ii s)])))","user":"59733c91e4b01722bebd4c9b"},{"problem":44,"code":"#(take (count %2) (drop (mod %1 (count %2)) (apply concat (repeat 2 %2))))","user":"5547b72be4b0a04f79299550"},{"code":"(fn rt [n c]\n  (cond\n    (pos? n) (rt (dec n) (concat (rest c) (list (first c))))\n    (neg? n) (rt (inc n) (cons (last c) (butlast c)))\n    :else c))","problem":44,"user":"4ee4f4a9535d1385b2869d85"},{"code":"(fn [n x]\n  (let [rotator (mod (if (< n 0) (+ (count x) n) n) (count x))]\n    (into (vec (take-last (- (count x) rotator) x)) (take rotator x))))","problem":44,"user":"52a32b52e4b04e0c58e87bfc"},{"problem":44,"code":"(fn rotate [n coll]\n    (let [c (count coll)]\n      (take c (drop (mod n c) (cycle coll)))))","user":"55e6c3f5e4b050e68259b48c"},{"problem":44,"code":"(fn [n xs]\n  (let [n (mod n (count xs))]\n    (cond\n      (> n 0) (concat (drop n xs) (take n xs))\n      (< n 0) (let [xs (reverse xs)]\n                (concat (reverse (take (* -1 n) xs)) (reverse (drop (* -1 n) xs))))\n      :else xs)))","user":"51c116d4e4b0c9c822882942"},{"problem":44,"code":"(fn[%1 %2] (if (neg? %1) (flatten (conj (drop-last (mod (unchecked-negate %1) (count %2)) %2) (take-last (mod (unchecked-negate %1) (count %2)) %2))) (flatten (conj (take (mod %1 (count %2)) %2) (drop (mod %1 (count %2)) %2)))))","user":"5a63f8bae4b0512ff01cd99f"},{"problem":44,"code":"(fn [n coll] \n    (let [c (count coll) m (mod n c)]\n      (-> (drop m coll) (concat (take m coll))))\n  )","user":"5a535572e4b05d388ecb6c0b"},{"problem":44,"code":"(fn rot [n s]\n  (let [r (mod n (count s))]\n    (concat (drop r s) (take r s))))","user":"580bd81ee4b0849f6811b711"},{"code":"(fn rotate [num input]\n      (cond\n       (vector? input) (rotate num (into () (reverse input)))\n       (= num 0) input\n       (< num 0) (rotate (inc num) (cons (last input) (butlast input)))\n       (> num 0) (rotate (dec num) (concat (rest input) (list (first input))))\n      ))","problem":44,"user":"53838742e4b06839e8705ee0"},{"problem":44,"code":"(fn rt [n col] \n \n  (let [res (nth (iterate \n          #(concat (rest %) (list (first %)))\n          (if (> n 0)  col (reverse col))\n        ) \n      (Math/abs n)\n    ) ]\n\n    (if (> n 0) res (reverse res))\n\n  )\n  \n)","user":"5beebdb7e4b0a6d31fed2132"},{"code":"(fn [n xs] (let [c (mod n (count xs))]\r\n    (concat (drop c xs) (take c xs))))","problem":44,"user":"4dc7f472535d8a4b2fd74293"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [step (first (remove neg? (iterate #(+ (count coll) %) n)))]\n    (->> (cycle coll)\n         (partition (count coll) step)\n         (second))))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"problem":44,"code":"(fn rot [s v]\n   (cond\n     (= 0 s) v\n     (< s 0) (rot (- (count v) (* -1 s)) v)\n     :else  (rot (dec s) (concat (rest v) [(first v)]))))","user":"523b4e91e4b07becd5be21ef"},{"code":"(fn [n xs]\n     (let [c (count xs)]\n              (take c (drop (if (< n 0) (inc (- n)) n) (cycle xs)))\n          )\n     )","problem":44,"user":"52430d3ce4b076204b44faa5"},{"problem":44,"code":"(fn [n s]\n  (loop [l []\n         r s]\n    (if (= (mod n (count s))\n           (count l))\n      (concat r l)\n      (recur (conj l \n                   (first r)) \n             (rest r)))))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":44,"code":"(fn rot [n s] (if (zero? n) s\n                (if (> n 0) (rot (- n 1) (concat (rest s) [(first s)]) )\n                  (rot (+ n 1) (concat [(last s)] (butlast s)) ))))","user":"53e2b212e4b036ad0777e3f4"},{"problem":44,"code":"(fn [n xs]\n  (let [all (count xs), i (rem (+ all (rem n all)) all)]\n    (into (take i xs) (reverse (drop i xs)))))","user":"56669819e4b0e91d5f5c5674"},{"problem":44,"code":"(fn my-rotate [n coll]\n  (if (> n 0)\n    (drop n (take (+ n (count coll)) (cycle coll)))\n    (reverse (drop (- n) (take (+ (- n) (count coll)) (cycle (reverse coll))))))\n  )","user":"53e92f82e4b036ad0777e49d"},{"code":"(fn rotate [x in] \n  (if (< x 0)\n    (reverse (rotate (- 0 x) (reverse in)))\n    (let [k (mod x (count in))]\n      (concat (drop k in) (take k in)))))","problem":44,"user":"5186571de4b0da5a5be3bad1"},{"problem":44,"code":"(fn rotate [x c] (if (> x 0)\n                     (let [v (split-at (loop [num x\n                                              cnt (count c)]\n                                          (if (< num cnt)\n                                            num\n                                            (recur (- num cnt) cnt))) c)]\n                       (into (vec (first (rest v))) (first v)))\n                     (let [v (split-at (loop [num x\n                                              cnt (count c)]\n                                          (if (> num 0)\n                                            num\n                                            (recur (+ num cnt) cnt))) c)]\n                       (into (vec (first (rest v))) (first v)))))","user":"579aff09e4b05b1deef9ade7"},{"problem":44,"code":"(fn rotate \n  [n my-seq]\n  (if (< n 0)\n    (reverse (rotate (* n -1) (reverse my-seq)))\n    (let [s (seq my-seq)]\n      (if (= n 0)\n        s\n        (rotate (dec n) (flatten (cons (rest s) [(first s)])))))))","user":"58408643e4b089d5ab817deb"},{"problem":44,"code":"#(let [r (mod %1 (count %2))] \n\t(concat (drop r %2) (take r %2)))","user":"5d2201b8e4b02ea6f0fb69ed"},{"problem":44,"code":"(fn [n coll]\n  (let [shift (mod n (count coll))]\n    (concat\n     (take-last (- (count coll) shift) coll)\n     (take shift coll))))","user":"55f4ef68e4b06e875b46ce82"},{"problem":44,"code":"(fn [n s] (-> (mod n (count s)) (#(concat (drop % s) (take % s)))))","user":"542a8d07e4b01498b1a71b43"},{"problem":44,"code":"(fn rotate [n col]\n  (->>\n    (cycle col)\n    (drop (mod n (count col)))\n    (take (count col))))","user":"524b827ce4b09eba1c0223d7"},{"code":"(fn myfn [n s]\n  \t(if (< n 0) (myfn (+ n (count s)) s)\n    \t(take (count s) (drop n (flatten (repeat s)))\n        )\n    )\n)","problem":44,"user":"525ba7bbe4b0cb4875a45d28"},{"problem":44,"code":"(fn [rot-count seq]\n  (let [v  (vec seq)\n        rc (mod rot-count (count v))\n        s1 (subvec v rc)\n        s2 (subvec v 0 rc)]\n      (concat s1 s2)))","user":"59089229e4b047aa04b1997c"},{"problem":44,"code":"(fn [x y]\n   (let [val (mod x (count y))]\n     (concat (drop val y) (take val y))))","user":"599f7a7ee4b0871e7608b81e"},{"problem":44,"code":"#(concat (nthnext %2 (mod %1 (count %2))) (take (mod %1 (count %2)) %2))","user":"5501de12e4b07d26eda61d7b"},{"code":"(fn [n seq]\r\n  (let [n (mod n (count seq))]\r\n    (concat (drop n seq) (take n seq))))","problem":44,"user":"4e994541535dbda64a6f6b64"},{"code":"(fn [n coll]\n  (let [ct (count coll)\n       n (mod n ct)\n       n (if (< n 0) (+ n ct) n) ]\n       (apply concat (reverse (split-at n coll)))))","problem":44,"user":"4f82f9f7e4b033992c121c10"},{"problem":44,"code":"(fn [n s]\n    (->> s\n         (split-at (mod n (count s)))\n         (reverse)\n         (flatten)))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"(fn [n l]\r\n  (let [step (mod n (count l))]\r\n      (concat (drop step l) (take step l))))","problem":44,"user":"4ff201d7e4b0678c553fc330"},{"problem":44,"code":"(fn f [n c] (take (count c) \n                  (drop \n                   (mod n (count c)) \n         (cycle c))))","user":"4ec1923f535dfed6da9c6db2"},{"problem":44,"code":"(fn [n l] (let [length (count l) cut (+ n (* 2 length))] (take length (drop cut (cycle l)))))","user":"5835a222e4b089d5ab817ce5"},{"problem":44,"code":"(fn [n l] (let [length (count l)] (if (neg? n) (recur (+ n length) l) (if (>= n length) (recur (- n length) l) (take length (drop n (cycle l)))))))","user":"5d3ae729e4b01671435dbd5d"},{"problem":44,"code":"(fn peu [x y] (if (= 0 x) y (if (< x 0) (peu (+ x (count y)) y) (peu (dec x) (concat (rest y) (list (first y)))))))","user":"53fc8424e4b0de5c418485b3"},{"code":"(fn rotate [n, l]\n  (if (= n 0) l\n      (rotate (- (if (< n 0) (+ (count l) n) n) 1) (concat (rest l) (list (first l)) ))\n))","problem":44,"user":"4f8b05d2e4b02e764a0a5176"},{"code":"(fn [n lst]\n  (let [n (mod n (count lst))]\n    (concat (drop n lst) (take n lst))))","problem":44,"user":"4f28c979e4b0d6649770a01a"},{"code":"(fn [n l](flatten (reverse (split-at (if (< n 0) (+ (count l) (rem n (count l))) \r\n(rem n (count l))) l))))","problem":44,"user":"4ddbd934535d02782fcbe9fc"},{"code":"(fn rot [n coll]\n  (let [s (mod n (count coll))]\n    (concat (drop s coll) (take s coll))))","problem":44,"user":"4e2d84bf535deb9a81d77f09"},{"code":"(fn [n coll]\n  (let [shift (mod n (count coll))]\n   (concat\n     (drop shift coll)\n     (take shift coll))))","problem":44,"user":"4f7ab8c7e4b06e829148e19c"},{"problem":44,"code":"(fn [n coll] (apply concat (reverse (split-at (mod (+ n (count coll)) (count coll)) coll))))","user":"5795f1f1e4b0e215f87e8490"},{"problem":44,"code":"(fn [n xs]\n  (let [idx (mod n (count xs))\n        [left right] (split-at idx xs)]\n    (concat right left)))","user":"5344fe13e4b084c2834f4a32"},{"problem":44,"code":"(fn my-rotate [n xs]\n  (let [cnt (count xs)]\n    (cond\n      (neg? n)  (recur (+ n cnt) xs)\n      (> n cnt) (recur (- n cnt) xs)\n      :else     (let [[rest first] (split-at n xs)]\n                  (concat first rest)))))","user":"53edb628e4b0d648e757f4c8"},{"code":"(fn [n s] (let [c_ (count s) n_ (if (> n 0) (rem n c_) (+ c_ (rem n c_)))] (concat (drop n_ s) (take n_ s))))","problem":44,"user":"5027b41ee4b01614d1633fee"},{"problem":44,"code":"(fn [d coll]\n  (let [v (vec coll)\n        n (count v)\n        i (rem (if (neg? d) (inc (- n d)) d) n)\n        [v1 v2] (split-at i v)]\n    (concat v2 v1)))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":44,"code":"(fn [i xs]\n  (let [len (count xs)\n        f (mod i len)]\n    (concat (drop f xs) (take f xs))))","user":"5370d152e4b0fc7073fd6e9d"},{"problem":44,"code":"(fn [n coll] \n  (let [c (count coll)]\n       (take c (drop (+ c (rem n c)) (cycle coll)))))","user":"550615c0e4b021ccfedb9696"},{"problem":44,"code":"(fn rot [n col] \n (if (zero? n) col\n  (if (> 0 n)\n   (rot (inc n)\n    (cons (last col)\n          (butlast col)))\n   (rot (dec n)\n       (concat (rest col) \n        (list (first col))) ))))","user":"54b54d1be4b05787c3b1639c"},{"problem":44,"code":"(fn [shift coll]\n  (->> coll\n       (split-at (mod shift (count coll)))\n       reverse\n       (apply concat)))","user":"554bd33ce4b0a04f7929959a"},{"problem":44,"code":"(fn [n coll]\n  (let [r (mod n (count coll))]\n    (concat (drop r coll) (take r coll))\n    ))","user":"56fbf83de4b07572ad1a88da"},{"problem":44,"code":"(fn [r coll]\n  (let [n (count coll)]\n    (->> (cycle coll)\n         (drop (+ n (rem r n)))\n         (take n))))","user":"54a677a9e4b09f271ff37c88"},{"code":"(fn [n coll]\n  (letfn [(fun\n           [cnt n]\n           (if (> n cnt)\n             (mod n cnt)\n             (fun cnt (+ n cnt)))\n           )]\n    (let [m (fun (count coll) n)]\n      (concat (drop m coll) (take m coll)))))","problem":44,"user":"51da7e49e4b02ceefd947768"},{"code":"(fn rotate [original-places values]\n  (let [places (mod original-places (count values))]\n    (if (> places 0)\n\t(let [parts (split-at places values)]\n\t  (concat (last parts) (first parts)))\n      (let [parts (split-at (+ (count values) places) values)]\n\t(concat (last parts) (first parts))))))","problem":44,"user":"4fe89475e4b07c9f6fd12c4f"},{"problem":44,"code":"(fn [n xs]\n  (let [nrem (rem n (count xs))\n        npos (if (neg? nrem) (+ (count xs) nrem) nrem)\n        [x y] (split-at npos xs)]\n    (concat y x)\n    )\n  )","user":"54f86b8ce4b01ecee9d88828"},{"code":"(fn [n coll]\n  (letfn [(rotate-left [coll] (flatten \n                               (conj [] (drop 1 coll) \n                                     (take 1 coll))))\n          (rotate-right [coll] (flatten \n                                (conj [] \n                                      (drop (- (count coll) 1) coll) \n                                      (take (- (count coll) 1) coll))))]\n    (if (pos? n)\n      (last (take (+ n 1) (iterate rotate-left coll)))\n      (last (take (+ (- n) 1) (iterate rotate-right coll))))))","problem":44,"user":"50fc48dde4b0d10d794c19f6"},{"code":"(fn [m x] \n  (let [x (vec x) n (count x)] \n    (map x \n         (map \n          #(mod (+ m %) n)\n          (range n)\n         )\n    )\n  )\n)","problem":44,"user":"51cbdee1e4b08d8387cbede1"},{"code":"(fn rotate [n l]\n   (if (= n 0)\n     l\n     (if (> n 0)\n       (rotate (dec n) (concat (take-last (- (count l) 1) l) (take 1 l)))\n       (rotate (inc (- n)) l))))","problem":44,"user":"535e518ee4b04ce2eb3ed2cf"},{"problem":44,"code":"(fn [n sq]\n  (let [size (count sq)\n        e    (mod (java.lang.Math/abs n) size)\n        rn   (- size e)]\n    (if (> n 0)\n      (flatten (cons (drop e sq) (take e sq)))\n      (flatten (cons (drop rn sq) (take rn sq))))))","user":"5a42dbabe4b0447ef91cc5fc"},{"problem":44,"code":"(fn [n s] (cond  (> n 0) (let [m (mod n (count s))] (concat (drop m s) (take m s)))\n                 (< n 0) (let [m (mod n (count s)) len (count s)] (concat (drop m s) (take m s)))\n                 :else s\n           ))","user":"59ff9424e4b01bb0ae8afd24"},{"problem":44,"code":"(fn [n coll] (map #(nth coll %) (map #(mod (+ % n) (count coll)) (range (count coll)))))","user":"59cf0d75e4b0ef0a1e9b5b5f"},{"problem":44,"code":"(fn rotateseq [n s]\n  (let [cant (count s)]\n    (take cant (drop (mod n cant) (cycle s))))\n  )","user":"56f73913e4b08e7d20b9682d"},{"code":"(fn rotate [n l]\n    (let [cnt (count l)]\n    (take cnt (drop (mod n cnt) (flatten (repeat l))))))","problem":44,"user":"4fbdcb87e4b081705acca30a"},{"code":"(fn rotate-seq [n coll]\n  \"4clojure.com/problem/44\"\n  (let [p? (pos? n)\n        num (count coll)\n        n (if p? n (- n))\n        n (if (> n num) (mod n num) n)]\n      (if p?\n          (concat (drop n coll) (take n coll))\n        (concat (take-last n coll) (drop-last n coll))\n        )))","problem":44,"user":"4db58ccb535d87e67b28fe10"},{"code":"#(let [n (count %2)\r\n       t (mod %1 n)]\r\n  (->>\r\n    (concat %2 %2)\r\n    (drop t)\r\n    (take n)))","problem":44,"user":"4e111538535d04ed9115e7c3"},{"code":"(fn [rot seq] \n  (concat\n   (drop (mod rot (count seq)) seq)\n   (take (mod rot (count seq)) seq)))","problem":44,"user":"538c3424e4b0b51d73faae58"},{"code":"(fn rotate [times seq]\n  (let [res (split-at (if (> times 0) (mod times (count seq))  (- (count seq) (mod (Math/abs times) (count seq)))) seq)\n        s (first res)\n        e (second res)]\n    (concat e s)))","problem":44,"user":"4e0d5a5a535d04ed9115e7b5"},{"problem":44,"code":"(fn[n coll] (let [p (mod n (count coll))] (concat (nthrest coll p) (take p coll))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":44,"code":"(fn [rotate-idx coll] (concat (drop (mod rotate-idx (count coll)) coll)\n                               (take (mod rotate-idx (count coll)) coll)))","user":"5a4d656fe4b05d388ecb6ba9"},{"problem":44,"code":"(fn [n coll]\n  (let [n (mod (+ (count coll) n) (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"55fbc657e4b0f488688e0666"},{"problem":44,"code":"(fn [n xs] \n  (let \n    [l (count xs)\n     dxs (concat xs xs)]\n    (take l (drop (mod n l) dxs))))","user":"598e7998e4b02b9968b84d34"},{"code":"(fn rotate [n xs]\n  (cond\n    (= n 0) xs\n    (> n 0) (rotate (dec n) (conj (vec (rest xs)) (first xs)))\n    :else (rotate (inc n) (cons (last xs) (pop (vec xs)) ))))","problem":44,"user":"52606318e4b03e8d9a4a7036"},{"code":"(fn [n x] (take (count x) (drop (mod n (count x)) (concat x x))))","problem":44,"user":"523ed522e4b057c4b7cd0a78"},{"problem":44,"code":"(fn [n xs]\n    (apply concat            ;(3 4 5 1 2)  \n      (reverse               ;((3 4 5) (1 2)) \n        (split-at            ;[(1 2) (3 4 5)]\n          (mod n (count xs)) ;2\n          xs)\n        )))","user":"57e139f6e4b0bfb2137f5a6c"},{"code":"#(let [n (if (pos? %1) %1 (mod %1 (count %2)))]\n(take (count %2) (drop n (cycle %2))))","problem":44,"user":"4fd81472e4b0dab7d829f38e"},{"problem":44,"code":"#(apply concat (reverse (split-at (mod (+ (count %2) %) (count %2)) %2)))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"code":"(fn rotate [steps col]\n  (if (= 0 steps)\n    col\n    (if (pos? steps)\n      (rotate (dec steps) \n              (concat (rest col) (list (first col))))\n      (rotate (inc steps)\n              (concat (list (last col)) (butlast col))))))","problem":44,"user":"50053d6ce4b0678c553fc45e"},{"problem":44,"code":"(fn [n c](concat (drop (mod n (count c)) c) (take (mod n (count c)) c)))","user":"574a9132e4b02ea1147991fd"},{"problem":44,"code":"(fn my-rot [n c]\n  (let [r (mod n (count c))]\n    (concat (drop r c) (take r c))\n    ))","user":"58988cbbe4b00487982d52d7"},{"code":"(fn rotseq [dir xs]\n  (if (< dir 0)\n    (rotseq (+ (count xs) dir) xs)\n    (if (> dir 0)\n      (rotseq (dec dir) (conj (into [] (rest xs)) (first xs)))\n      xs)))","problem":44,"user":"4fc93728e4b0ee37620e1844"},{"code":"#(let [r %1 c (count %2) n (rem r c)]\n   (cond \n       (> n 0) (let [a (take n %2) b (nthnext %2 n)] (concat b a)) \n       (< n 0) (let [d (+ c n) a (take d %2) b (nthnext %2 d)] (concat b a)) \n       :else %1))","problem":44,"user":"4ffe8193e4b0678c553fc3f4"},{"problem":44,"code":"(fn [i coll]\n  (let [n (mod i (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":44,"code":"(fn [n seqr]\n(let [k (mod n (count seqr))]\n  (concat (drop k seqr) (take k seqr))))","user":"56fe665be4b08d47c97781af"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)] \n  (take c (drop (mod n c) (cycle coll)))))","user":"50b25edae4b03ea88043355e"},{"problem":44,"code":"(fn rot [n l]\n  (if (= n 0)\n    l\n    (if (> n 0)\n      (rot \n       (dec n) \n       (concat (rest l) (vector (first l))))\n      (rot\n       (inc n)\n       (reverse (concat (rest (reverse l)) (vector (last l))))))))","user":"55f25ae6e4b06e875b46ce43"},{"code":"(fn [i s]\n  (let [n (count s)]\n    (cond \n      (> i n) (recur (- i n) s)\n      (< i 0) (recur (+ i n) s)\n      :else (concat (drop i s) (take i s)))))","problem":44,"user":"4f70afb8e4b07046d9f4effb"},{"problem":44,"code":"(fn shift [n coll]\n  (let [m (mod n (count coll))]\n\t(concat (drop m coll) (take m coll))))","user":"541475afe4b01498b1a719eb"},{"problem":44,"code":"(fn rotate [n coll]\n  (when-let [s (seq coll)]\n    (let [pos (mod n (count coll))]\n      (concat (drop pos coll) (take pos coll)))))","user":"5b13ba71e4b0cc2b61a3be53"},{"code":"#(let [c (count %2) r (rem % c) rp (if (>= r 0) r (+ c r))] (take c (drop rp (flatten (repeat 2 %2)))))","problem":44,"user":"51aa5434e4b04e3dc0c27b26"},{"code":"(fn [n s]\n  (let [n (mod (* -1 n) (count s))]\n    (concat (take-last n s) (drop-last n s))))","problem":44,"user":"4fa3f91fe4b081705acca196"},{"code":"(fn f [n xs]\n  (cond (< n 0) (reverse (f (* -1 n) (reverse xs)))\n        (> n (count xs)) (f (- n (count xs)) xs)\n        true (concat (drop n xs) (take n xs))))","problem":44,"user":"4e68dbd5535d8ccf87e9fe8f"},{"code":"(fn [n s] \n  (let [c (count s)\n        abs #(if (neg? %) (-%) %)\n        d (if (> (abs n) c) (rem n c) n)\n        e (if (neg? d) (+ c d) d) ] \n    (take c (drop e ( cycle s )))))","problem":44,"user":"502904e0e4b0feaf66e22fad"},{"code":"(fn [n x]\n  (let [c (count x)\n        mod-n (mod n c)\n        relative-n (if (pos? mod-n) mod-n (+ c mod-n))]\n    (apply concat (reverse (split-at relative-n x)))))","problem":44,"user":"52244a77e4b01819a2de42d1"},{"code":"(fn rotate [start collection]\n  (take (count collection)\n      (drop (mod start (count collection)) (cycle collection))\n  )\n)","problem":44,"user":"4ff01fa9e4b0678c553fc321"},{"problem":44,"code":"#(let [n (mod %1 (count %2))] (concat [] (drop n %2) (take n %2)))","user":"5c8319c3e4b0c8042a70ce45"},{"code":"(fn rotate\n  [n coll]\n  (for [i (range (count coll))]\n    (nth coll (mod (+ n i) (count coll)))))","problem":44,"user":"52d39acce4b099d49816f0c7"},{"problem":44,"code":"(fn [step, array]\n    (let [real_step (mod step (count array))]\n         (concat (drop real_step array) (take real_step array) )))","user":"55893b09e4b059ccff29b1fe"},{"problem":44,"code":"(fn [x y]\n  (let [b (mod (+  x (count y)) (count y))]\n    (reduce (fn [x y] (conj (into [] (rest x)) (first x)) ) y  (repeat b 1) )))","user":"57500d13e4b02ea114799268"},{"problem":44,"code":"(fn [n sq]\n   (let [len (count sq)\n         num (mod n len)]\n     (concat (drop num sq) (take num sq))))","user":"60759e51e4b069485764de5a"},{"code":"(fn rotate [rotate-by s]\n  (let [count-s (count s)]\n    (->>\n      (cycle s)\n      (drop (mod rotate-by count-s))\n      (take count-s))))","problem":44,"user":"53527551e4b084c2834f4af0"},{"problem":44,"code":"#(take (count %2)\r\n  (drop (mod % (count %2))\r\n\t(cycle %2)))","user":"58f45ea0e4b0438e51c2cebc"},{"code":"#(let [c (mod %1 (count %2))] (concat (drop c %2) (take c %2)))","problem":44,"user":"4f713878e4b07046d9f4f00a"},{"code":"#(take (count %2) (drop (+ (mod %1 (count %2)) (count %2)) (cycle %2)))","problem":44,"user":"502ac96de4b0614b5299611b"},{"code":"(fn [n s] (let [c (count s)\n                n (mod n c)] (take c (drop (if (< n 0) (+ c n) n) (cycle s)))))","problem":44,"user":"52cf5450e4b07d0d72b273a4"},{"code":"(fn [n s]\n  (let [m (mod n (count s))] \n    (concat (drop m s) (take m s))))","problem":44,"user":"524e6b68e4b0541d1855b7db"},{"code":"(fn [rot x]\n  (let [nx (count x)\n        rot* (if (> rot 0) rot (- nx rot -1))]\n    (take nx\n          (nthnext (apply concat (repeat x)) rot*))))","problem":44,"user":"4f616892e4b0defedf855fbf"},{"code":"(fn [n list]\n    (apply concat (reverse (split-at (mod n (count list)) list)))\n)","problem":44,"user":"4f0385b9535dcb61093f6b0e"},{"code":"(fn [n l]\n  (let [len (count l)]\n  (take len \n    ((apply comp (repeat (mod n len) rest)) (cycle l)))))","problem":44,"user":"4ee7ef87535d93acb0a66872"},{"problem":44,"code":"(fn rotate [n xs]\n  (cond\n   (zero? n) xs\n   (pos? n) (rotate (dec n) (conj (vec (rest xs)) (first xs)))\n   :else (rotate (inc n) (into [(last xs)] (drop-last xs)))))","user":"540ff039e4b01498b1a7199b"},{"code":"(fn [c s]\n  (if (> c 0)\n    (let [n (mod c (count s))]\n      (concat (drop n s) (take n s)))\n    (let [n (mod (Math/abs c) (count s))]\n      (concat (take-last n s) (drop-last n s)))))","problem":44,"user":"4dbdc9da535d020aff1edf4c"},{"code":"(fn rotate [rot-size coll]\n  (cond\n    (< rot-size 0) (rotate\n      (inc rot-size)\n      (concat [(last coll)] (butlast coll)))\n    (> rot-size 0) (rotate\n      (dec rot-size)\n      (concat (rest coll) [(first coll)]))\n    true coll))","problem":44,"user":"4ee259a1535d10e5ff6f5366"},{"code":"(fn rotate [c l]\n  (let [n (mod c (count l))]\n     (concat (drop n l) (take n l))))","problem":44,"user":"537e745ae4b06839e8705ea6"},{"code":"(fn [k s]\n  (let [x (mod k (count s))]\n    (concat (drop x s) (take x s))))","problem":44,"user":"52bb4be0e4b07a9af57922e2"},{"problem":44,"code":"(fn [a b] \n  (take (count b) (drop (mod a (count b)) (cycle b))))","user":"5c73a944e4b0fca0c16227b8"},{"code":"(fn [n xs]\n  (let [pos (if (> n 0)\n              n\n              (+ (count xs) n))\n        ys (split-at (mod pos (count xs)) xs)]\n    (concat (second ys) (first ys))))","problem":44,"user":"520693e1e4b0bf4f1882c829"},{"problem":44,"code":"(fn [n coll]\n    (let [dropped (mod n (count coll))]\n      (concat (drop dropped coll) (take dropped coll))))","user":"5e17bb46e4b00200644e3d5a"},{"problem":44,"code":"(fn[indx col](take (count col) (drop (mod (+ (count col) indx) (count col)) (reduce concat (repeat (if (pos? indx) (* 2 (Math/ceil (/ indx (count col)))) 2) col)))))","user":"59692530e4b069c0a1a197e4"},{"code":"#(let [n (mod %1 (count %2))]\n  (concat (drop n %2) (take n %2)))","problem":44,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":44,"code":"(fn [n xs]\n  (let [cnt (count xs)\n        nm (mod n cnt)]\n  (apply concat\n    [(drop nm xs) (take nm xs)])))","user":"57717915e4b0979f896515b3"},{"code":"#(concat(drop (mod % (count %2)) %2) (take (mod % (count %2)) %2))","problem":44,"user":"52253004e4b01819a2de42fa"},{"code":"(fn rot [n l]\n  (cond\n   (= 0 n) l\n   (> 0 n) (reverse (rot (- n) (reverse l)))\n   (> n (count l)) (rot (rem n (count l)) l)\n   :else (concat (nthrest l n) (take n l))))","problem":44,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":44,"code":"(fn [x coll]\n  (let [step (mod x (count coll))]\n    (concat (drop step coll) (take step coll))))","user":"57213df6e4b0c5bde472c0ab"},{"code":"(fn [n s]\n  (take (count s) (drop\n                   (if (pos? n) \n                     n\n                     (+ n (* 2 (count s))))\n                   (flatten (repeat 5 s)))))","problem":44,"user":"51eab308e4b0f1f103a0d150"},{"code":"(fn [n lst]\n  (let [N (if (pos? n) n (+ (rem n (count lst)) (count lst)))]\n    (nth (iterate (fn [x] (concat (rest x) [(first x)])) lst) N)))","problem":44,"user":"500cb910e4b05f7c30cfa698"},{"problem":44,"code":"#(let [len (count %2)] (->> (cycle %2) (drop (mod % len)) (take len)))","user":"547d66a1e4b0c51c1f4d72f2"},{"code":"#(let [n (mod %1 (count %2))]\n   (concat (drop n %2) \n           (take n %2)))","problem":44,"user":"51929214e4b08962174cf74c"},{"code":"(fn rotate [n li]\n  (let [j (mod n (count li))]\n    (concat (drop j li) (take j li))))","problem":44,"user":"50c84ba2e4b00bb60fe0c53e"},{"code":"(fn [n coll] \n  (drop (if (< n 0) \n          (+ (- n) (count coll) 1) \n          n)\n        (take (+ (if (< n 0) \n                   (+ (- n) (count coll) 1) n) \n                 (count coll))\t\n              (cycle coll))))","problem":44,"user":"5231d8fae4b0e2e8de81d1fb"},{"problem":44,"code":"#(let [c (count %2)\n       s (mod (if (> %1 0) %1 (+ c (- (mod (Math/abs %1) c)))) c)]\n   (take c (drop s (cycle %2))))","user":"525b142fe4b0cb4875a45d05"},{"problem":44,"code":"(fn [n s]\n   (take\n    (count s)\n    (drop (+ (+ (count s) n) (* (count s) 2)) (cycle s))))","user":"5446ebc2e4b032a45b8693b8"},{"code":"(fn [idx arr]\r\n           (let [curIdx    (if(>= idx 0)(if(<= idx (count arr))idx(rem idx (count arr)))\r\n                         (let[len (count arr) idxTemp (* -1 idx)]\r\n                           (if(< idxTemp len)(- len idxTemp)\r\n                           (- len (rem  idxTemp len)))))]  \r\n           (let [tempArr (split-at curIdx arr)]\r\n             (concat (last tempArr) (first tempArr)))))","problem":44,"user":"4de6f806535d08e6dec9fdf7"},{"problem":44,"code":"#(let [s (count %2)] (take s (drop (+ s (rem %1 s)) (cycle %2))))","user":"564b1ff8e4b0284900eef663"},{"code":"#(let [c (count %2)\n       n (first (filter pos? (iterate (partial + c) (rem %1 c))))]\n  (concat (drop n %2) (take n %2)))","problem":44,"user":"4f043ed1535dcb61093f6bb4"},{"code":"#((comp flatten concat reverse split-at) (mod % (count %2)) %2)","problem":44,"user":"4eeaf88f535d93acb0a668a3"},{"code":"(fn [n coll]\n  (let [size (count coll)\n        offset (mod n size)\n        x (if (neg? n)\n            (- size (dec offset))\n            offset)]\n    (flatten (cons (drop x coll) (take x coll)))))","problem":44,"user":"4daedd1eedd6309eace4d164"},{"code":"(fn [n col]\n  (let [m (mod n (count col))]\n    (concat (drop m col) (take m col))))","problem":44,"user":"4e7f8f85535db966e863cc44"},{"problem":44,"code":"(fn [n coll]\n\t(let [m (mod n (count coll))]\n\t\t(concat (drop m coll) (take m coll))))","user":"562d869be4b0a45d2ff8301f"},{"code":"(fn [n xs]\n  (let [n* (mod n (count xs))]\n    (concat (drop n* xs) (take n* xs))))","problem":44,"user":"4f038499535dcb61093f6b09"},{"code":"(fn scl[n l]\n  (let [size (count l)\n        calculate-new-index (fn  [old-index n size](mod (- old-index n) size))\n        result (apply vector (range 0 size)) ]\n    (loop[pos 0 newresult result]\n      (if(= pos size)\n        newresult\n        (recur (inc pos) (assoc newresult (calculate-new-index pos n size)   (nth l pos)))))))","problem":44,"user":"5007cdb9e4b0b17c647f5227"},{"code":"(fn [n xs]\n  (apply concat (reverse (split-at (mod n (count xs)) xs))))","problem":44,"user":"4f734e93e4b07046d9f4f043"},{"code":"(fn [n col]\n  (let [ntimes (if (neg? n) (- n) n)\n        lshift #(concat (rest %) [(first %)])\n        rshift #(conj  (drop-last %) (last %) )]\n    ((apply comp (repeat ntimes (if (neg? n) rshift lshift))) col)))","problem":44,"user":"51696bcde4b03f62cda68ce7"},{"problem":44,"code":"(fn rot\n  [x s]\n  (let [split (split-at (mod x (count s)) s)]  \n       (concat (last split) (first split))\n  )\n)","user":"55acd080e4b03311e7b73298"},{"code":"(fn [r s] (let [m (mod r (count s)) v (vec s)] \n  (concat (subvec v m) (subvec v 0 m))))","problem":44,"user":"536046a9e4b063bf7a5f8fe1"},{"problem":44,"code":"(fn rotate [step coll]\n    (let [coll-count (count coll)\n          mod-step (mod (Math/abs step) coll-count)\n          idx (if (neg? step)\n                (- coll-count mod-step)\n                mod-step)]\n      (->> (split-at idx coll)\n           reverse\n           (apply concat))))","user":"5ef8e9e0e4b09b61f08553cb"},{"problem":44,"code":"(fn [i c]\n  (take (count c) (drop \n                   (mod i (count c))\n                   (cycle c))))","user":"4f301d02e4b0d6649770a072"},{"problem":44,"code":"(fn [offset s] (let [n (count s)] (take n (drop (mod offset n) (cycle s)))))","user":"566669d8e4b0e91d5f5c566f"},{"problem":44,"code":"(fn [n a]\n  (loop [c (Math/abs n)  x (if (< n 0) (reverse a) a)]\n    (if (= c 0)\n      (if (< n 0) (reverse x) x)\n      (recur (dec c) (conj (vec (rest x)) (first x))))))","user":"564a5a09e4b0284900eef656"},{"code":"(fn [n col] (let [s (mod n (count col))] \r\n             (concat (drop s col) (take s col))))","problem":44,"user":"4e0e0529535d04ed9115e7b9"},{"code":"(fn [offset coll]\n   (loop [result [] index (- (count coll) (mod (* -1 offset) (count coll)))] \n     (if (= (count coll) (count result))\n       result\n       (recur (conj result (nth coll index)) \n              (if (< index (- (count coll) 1))\n                (inc index)\n                0\n              )\n              )\n       )     \n          )\n   )","problem":44,"user":"5106dc1be4b01150e115ebf0"},{"problem":44,"code":"(fn rotate [n xs]\n  (cond\n    (< n 0) (reverse (rotate (- n) (reverse xs)))\n    (= n 0) xs\n    :else (rotate\n           (- n 1)\n           (concat (rest xs) (list (first xs))))))","user":"4f259f95e4b0d66497709ffa"},{"problem":44,"code":"(fn [n xs]\n  (take (count xs) (drop (mod n (count xs)) (flatten (repeat xs)))))","user":"53ca23e3e4b00fb29b2212c6"},{"problem":44,"code":"(fn [x y] (let [m (mod x (count y))] (concat (drop m y) (take m y))))","user":"55205564e4b08d5046aa8a60"},{"problem":44,"code":"(fn f44 [n col]\n  (if (= n 0)\n    col\n    (if (> n 0)\n      (f44 (dec n) (conj (vec (rest col)) (first col)))\n      (f44 (inc n) (cons (last col) (butlast col))))))","user":"52c08c59e4b07a9af5792351"},{"problem":44,"code":"(fn [n xs]\n  (let [shift-left  #(concat (rest %) (list (first %)))\n        shift-right #(cons (last %) (butlast %))\n        shift (if (> n 0) shift-left shift-right)]\n  (last (take (inc (Math/abs n)) (iterate shift xs))))\n)","user":"596e2a70e4b069c0a1a19861"},{"code":"(fn [i s] (apply concat (reverse (#(split-at (rem (+ (rem %1 (count %2)) (count %2)) (count %2)) %2) i s))))","problem":44,"user":"4f9b3532e4b0dcca54ed6d13"},{"code":"(fn [n xs]\n  (let [c (count xs)\n        n (mod n c)]\n    (take c (drop n (cycle xs)))))","problem":44,"user":"504e90bae4b069badc5a33b8"},{"code":"(fn rotate [n col]\n    (let [x ( cycle col)]\n      (if (pos? n)\n        (take (count col) (drop n x))\n        (take (count col) (drop (- (count col) (- n 1)) x)))))","problem":44,"user":"4fccf5c8e4b0ee37620e1871"},{"problem":44,"code":"#(concat \n   (drop (mod %1 (count %2)) %2) \n   (take (mod %1 (count %2)) %2))","user":"5521a5a9e4b0882d96d09197"},{"problem":44,"code":"(fn rotate [n xs]\n  (cond\n   (zero? n) xs\n   (not (seq xs)) (sequence nil)\n   :else (let [s (count xs)\n               r (rem n s)\n               i (if (neg? r) (+ s r) r)\n               parts (split-at i xs)]\n           (concat (second parts) (first parts)))))","user":"5d47fa13e4b07c84aa5ae6b6"},{"problem":44,"code":"(fn [r xs] (reduce #(conj %1 (nth xs %2)) \n                   []\n                   (map #(mod (+ (count xs) %1) \n                              (count xs)) \n                        (range r (+ r (count xs))))))","user":"58c2df0ae4b021aa9917ed17"},{"problem":44,"code":"(fn [offset col]\n  (let [pf (partial drop (if (pos? offset) offset (+ (count col) (- offset) 1)))]\n    (take (count col) (pf (cycle col)))))","user":"53a83c74e4b047364c044426"},{"problem":44,"code":"(fn [n coll]\n   (let [l (count coll)]\n     (map #(nth coll (mod % l)) (range n (+ n l)))))","user":"5bb25684e4b0a20761a2350d"},{"problem":44,"code":"#(if (= 0 %1)\n   %2\n   (if (pos? %1)\n     (recur (dec %1) (conj (vec (rest %2)) (first %2)))\n     (recur (inc %1) (cons (last %2) (butlast %2)))))","user":"5125f0c6e4b05d10e3e395ff"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n           (concat (drop n %2) (take n %2) ))","user":"5ab3db13e4b073f177442609"},{"problem":44,"code":"#(let [size (count %2)\n       offset %1\n       pattern (cycle %2)]\n     (take size (drop (mod offset size) pattern)))","user":"56b295f7e4b0982f16b37e08"},{"problem":44,"code":"#(let [lst %2\n      lngth (count lst),\n      nbr1 (mod %1 lngth),\n      nbr2 (- lngth nbr1)]\n  (concat (take-last nbr2 lst) (take nbr1 lst)))","user":"56c560ede4b05cc29241eea6"},{"code":"(fn [n coll] (let [index (mod n (count coll))]\n   (concat (drop index coll) (take index coll))))","problem":44,"user":"52be0263e4b07a9af579230e"},{"problem":44,"code":"(fn [s sq]\n  (let [v (into [] sq)\n        i (mod s (count sq))\n        bi (- (count v) i)]\n  (if (> i 0)\n    (into \n      (subvec v i)\n      (subvec v 0 i))\n    (into \n      (subvec v bi)\n      (subvec v 0 bi))\n  )))","user":"56366f73e4b0bfe05bf117cc"},{"problem":44,"code":"(fn rotate\n  [n col]\n  (if (pos? n)\n    (last (take (inc n) (iterate #(concat (drop 1 %) (vector (first %))) col)))\n    (last (take (inc (- n)) (iterate #(conj (drop-last 1 %) (last %)) col)))))","user":"59390a35e4b02506e01a29f3"},{"problem":44,"code":"(fn rot-seq [n col]\n  (let [point (mod n (count col))]\n    (concat (nthrest col point) (take point col))\n  ))","user":"5c219c0fe4b07e362c230581"},{"problem":44,"code":"(fn [n seq] (let [v (vec seq)\n                   s (count seq)]\n               (->> (range s)\n                    (map #(mod (+ n %) (count seq)))\n                    (map #(get v %)))))","user":"56e2ca59e4b03a7c14b85a38"},{"code":"(fn [x coll]\n  (let [len (count coll)\n        step (let [re-num (rem x len)]\n               (if (< re-num 0)\n                 (+ len re-num)\n                 re-num))]\n    (take len (drop step (concat coll coll)))))","problem":44,"user":"52a55adee4b0c58976d9abe7"},{"problem":44,"code":"(fn [c v]\n   (last (let [x (inc (mod (+ (count v) c) (count v)))]\n     (take x (iterate #(conj (vec (rest %)) (first %)) v)))))","user":"549a1fede4b0f3d1d8e70f6a"},{"problem":44,"code":"(fn __\n  [x coll]\n  (let [idx (mod x (count coll))\n        [a b] (split-at idx coll)]\n    (concat b a)))","user":"5b73e500e4b047b03b2036ba"},{"problem":44,"code":"#(loop [n %1 v %2]\n\t(cond\n\t\t(> n 0) (recur (dec n) (concat (rest v) (list (first v))))\n\t\t(< n 0) (recur (inc n) (cons (last v) (butlast v)))\n\t\t:else v))","user":"5370b386e4b0fc7073fd6e9b"},{"problem":44,"code":";; http://www.4clojure.com/problem/44\n(fn rotate-seq\n  [d c]\n  (let [s (count c)\n        m (mod d s)]\n    (concat (drop m c) (take m c))))","user":"5c92105ce4b048ec896c59f7"},{"problem":44,"code":"(fn [n seqq]\n  (take (count seqq) (drop (mod n (count seqq)) (cycle seqq))))","user":"6088395de4b0ae75613dcee2"},{"code":"(fn [n xs] (take (count xs) (drop (mod n (count xs)) (cycle xs))) )","problem":44,"user":"4e3a9dae535deb9a81d77f4a"},{"code":"#(let [i (rem %1 (count %2))]\n (cond (= i 0) %2\n       (> i 0) (concat (drop i %2) (take i %2))\n       :else   (concat (take-last (- i) %2) (drop-last (- i) %2))))","problem":44,"user":"4f32a7f1e4b0d6649770a095"},{"problem":44,"code":"(fn rot [n seq]\n  (cond\n    (= n 0) seq\n    (> n 0) (recur (dec n) (take (count seq) (rest (cycle seq))))\n    :else (recur (inc n) (conj (butlast seq) (last seq)))))","user":"5603d057e4b0c80df0ca264e"},{"problem":44,"code":"(fn [n xs]\n    (let [s (mod n (count xs))]\n    (concat (drop s xs)(take s xs))\n\t))","user":"54ab502fe4b09f271ff37cc4"},{"problem":44,"code":"(fn [offset coll]\n  (let [rotate-offset (fn [offset len]\n              (if (pos? offset)\n                offset\n                (let [times (+ 1 (int (Math/floor (/ (Math/abs offset)  len))))]\n                  (prn times)\n                  (+ offset (* len times)))))\n        positive-offset (rotate-offset offset (count coll))\n        rol (fn [coll] (concat (rest coll)  [(first coll)]))]\n    (prn (str \"pos-offset\" positive-offset))\n    (loop [times positive-offset coll coll]\n      (if (zero? times)\n        coll\n        (recur (dec times) (rol coll))))))","user":"559e6f42e4b08a52bd4f97d3"},{"problem":44,"code":"(fn rotator [ind coll]\n  (cond\n    (zero? ind) coll\n    (< (count coll) (Math/abs ind)) (if (neg? ind)\n                                      (rotator (+ ind (count coll)) coll)\n                                      (rotator (- ind (count coll)) coll))\n    (neg? ind) (concat (drop (+ ind (count coll)) coll) (take (+ ind (count coll)) coll))\n    :else (concat (drop ind coll) (take ind coll))))","user":"571cd9dce4b0145328a76271"},{"code":"(fn [n s]\n           (let [sign (pos? n)\n                 total (count s)\n                 n (mod (if sign n (- n)) total)\n                 from-end (- total n)]\n             (if sign\n               (concat (drop n s) (take n s))\n               (concat (take-last n s) (take from-end s)))))","problem":44,"user":"4e5f034b535d8a8b8723a2d9"},{"code":"(fn [n coll]\n  (let [nn (mod n (count coll))]\n    (concat \n      (drop nn coll)\n      (take nn coll)\n            )\n    ))","problem":44,"user":"4fbbcf0ce4b081705acca2ee"},{"code":"(fn [n coll]\n  (let [splt (mod n (count coll))]\n    (concat (drop splt coll) (take splt coll))))","problem":44,"user":"515a6151e4b0394f658fe241"},{"code":"(fn [r coll]\n  (let [n (count coll), xs (cycle coll)]\n    (take n (drop (mod r n) xs))\n))","problem":44,"user":"504d0116e4b022602c20b089"},{"code":"(fn rotate \n  [gn coll]\n  (let [n (mod gn (count coll))]\n    (if (neg? n)\n      (rotate (- (count coll) gn) coll)\n      (apply concat (reverse (split-at n coll))))))","problem":44,"user":"5338387de4b0e30313ee6c91"},{"problem":44,"code":"(fn [n c] (let [l (count c)] (take l (drop (mod n l) (cycle c)))))","user":"5492164ee4b0b312c081ff3e"},{"problem":44,"code":"(fn [n coll]\n  (let \n   [shift (mod n (count coll))]\n    (flatten((juxt drop take) shift coll))\n   ))","user":"5fa96ddbe4b0fa27300f3dec"},{"problem":44,"code":"(fn rotate [r xs] \n   (let [n (mod r (count xs))]\n     (cond \n      (= 0 n) xs\n      (< 0 n) (concat (drop n xs) (take n xs))\n      :else (let [c (count xs), d (+ c n)] \n              (concat (drop d xs) (take d xs))))))","user":"548cd637e4b0e286459a1210"},{"problem":44,"code":"(fn rotate[amount coll]\n  (cond\n   (> amount 0) (rotate\n                 (dec amount)\n                 (concat (rest coll) [(first coll)]))\n   (< amount 0) (rotate\n                 (inc amount)\n                 (concat [(last coll)] (butlast coll)))\n   (= amount 0) coll))","user":"54b10d08e4b09f271ff37d18"},{"code":"(fn [n l] (let [s (mod n (count l))] (concat (drop s l) (take s l))))","problem":44,"user":"535359c9e4b084c2834f4afd"},{"problem":44,"code":"(fn [n xs]\n   (take (count xs) (drop (mod n (count xs)) (concat xs xs))))","user":"550b5c10e4b06e50f9beb143"},{"problem":44,"code":"(fn [n cln] \n  (let [nn (mod (+ n) (count cln))] \n    (concat (drop nn cln) (take nn cln))))","user":"5596a324e4b04c1e5c31d757"},{"code":"(fn [n coll]\n  (let [rot (mod n (count coll))]\n    (concat (drop rot coll) (take rot coll))))","problem":44,"user":"4dada6d4c9a9d6ed2c99dc57"},{"code":"#(apply concat (-> (mod % (count %2)) (split-at %2) reverse))","problem":44,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":44,"code":"(fn rotate-coll [n1 coll]\n  (let [cnt (count coll)\n        n (mod n1 cnt)\n        loc (if (pos? n) n (+ cnt n))\n        second-part (take loc coll)\n        first-part (drop loc coll)]\n    (concat first-part second-part)))","user":"55f6e7ece4b06e875b46ce9e"},{"problem":44,"code":"(fn [i col]\n  (concat (drop (mod i (count col)) col)\n          (take (mod i (count col)) col))\n  )","user":"5c6e8b57e4b0fca0c1622755"},{"code":"(fn [n col]\n  (let [i (mod n (count col))]\n    (concat (drop i col) (take i col))))","problem":44,"user":"511c44fde4b00c2a1fa7ff77"},{"problem":44,"code":"#(concat (take-last (- (count %2) (mod %1 (count %2))) %2) (take (mod %1 (count %2)) %2))","user":"5578c67fe4b05c286339e08d"},{"problem":44,"code":"(fn [n xs]\n  (let [p (mod n (count xs))]\n    (concat (drop p xs) (take p xs))))","user":"58844d43e4b0f1effa3b7696"},{"problem":44,"code":"(fn [n coll]\n  (let [coll-count (count coll)\n        nmod (mod n coll-count)]\n    (concat  (take-last (- coll-count nmod) coll) (take nmod coll))))","user":"5fac50f4e4b08cb800c85ae5"},{"code":"(fn [i-rotate i-list]\r\n    (let [rotate (rem (if (neg? i-rotate) (* -1 i-rotate) i-rotate) (count i-list))]\r\n        (if (neg? i-rotate)\r\n        (concat (take-last rotate i-list) (drop-last rotate i-list))\r\n        (concat (drop rotate i-list) (take rotate i-list)))))","problem":44,"user":"4dddf817535d08e6dec9fdd3"},{"problem":44,"code":"(fn rotate\n  [n l]\n  (if (> n 0)\n    (last (take (+ n 1) (iterate (fn [x] (#(conj (vec (rest %1)) (first %1)) x)) l)))\n    (last (take (+ (* -1 n) 1)\n                (iterate (fn [x] (#(apply conj\n                                          (vec (take-last 1 %1))\n                                          (butlast %1)) x)) l)))))","user":"5866b999e4b0f14aab7c886b"},{"problem":44,"code":"(fn [n ls]\n  (let [f (if (neg? n)\n            #(cons (last %) (butlast %))\n            #(concat (rest %) [(first %)]))]\n    (nth (iterate f ls) (Math/abs n))))","user":"5d672bd7e4b0db5d338d15f1"},{"problem":44,"code":"(fn [n coll]\n   (let [i (rem n (count coll))]\n     (if (neg? i)\n        (let [negated (- i)]\n          (concat (take-last negated coll)\n                  (drop-last negated coll)))\n        (concat (drop i coll)\n                (take i coll)))))","user":"55860905e4b001b0851d7516"},{"code":"(fn [n s]\n  (apply concat ((juxt drop take) (mod n (count s)) s)))","problem":44,"user":"4db8ec47535d1e037afb219d"},{"code":"(fn [n l]\n  (let [c (count l)\n        n (rem n c)]\n    (if (> n 0)\n      (concat (drop n l) (take n l))\n      (concat (drop (- c (- n)) l) (take (- c (- n)) l)))))","problem":44,"user":"532bce35e4b09d4e7a9b5536"},{"problem":44,"code":"(fn [idx coll]\n  (let [n-idx (mod idx (count coll))\n        res (split-at n-idx coll)]\n    (concat (second res) (first res))))","user":"54ccf9d5e4b057c6fda3a295"},{"code":"#(let [the-count (count %2)\n        the-pos (mod % the-count)]\n    (reduce concat () (reverse (split-at the-pos %2)))\n     )","problem":44,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":44,"code":"(fn rotate [n l]\n  (let [x (mod n (count l))]\n    (concat (drop x l) (take x l))))","user":"54651982e4b01be26fd746d4"},{"code":"(fn [i coll]\n  (if (>= i 0)\n    (take (count coll) (drop i (cycle coll)))\n    (let [limit (first (filter #(> % (Math/abs i))\n                               (map #(* (count coll) %)\n                                    (rest (range)))))]\n      (take (count coll) (drop (- limit (Math/abs i)) (cycle coll))))))","problem":44,"user":"5225271fe4b01819a2de42f9"},{"problem":44,"code":"(fn rot [dirn sequ]\n  (let [len (count sequ)\n        dir (pos? dirn)\n        dirn (if dir dirn (+ len dirn))\n        dirn (mod dirn len)]\n  (loop [[first & rest :as all] sequ\n         newseq []\n         i 0]\n    (if (< i dirn)\n      (recur rest (conj newseq first) (inc i))\n      (if dir (concat all newseq) (concat all newseq))))))","user":"5c195cb2e4b01240ff5671f7"},{"code":"(fn [c sq]\n  (if (< c 0)\n    (last (take (inc (Math/abs c)) (iterate #(concat [(last %)] (butlast %)) sq)))\n    (last (take (inc c) (iterate #(concat (rest %) [(first %)]) sq)))))","problem":44,"user":"51f9527fe4b09be9c177e549"},{"problem":44,"code":"(fn rotate [n s]\n    (let [arg (mod (Math/abs n) (count s))]\n            (if (not= arg 0)\n                (if (neg? n)\n                    (concat (take-last arg s) (drop-last arg s))\n                    (concat (drop arg s) (take arg s))) \n                s)))","user":"54f09599e4b024c67c0cf89d"},{"problem":44,"code":"(fn [n coll] (reduce concat [(drop (mod n (count coll)) coll) (take (mod n (count coll)) coll)]))","user":"53b1db8ee4b047364c044495"},{"code":"(fn [n coll]\n  (let [n (mod n (count coll))\n        [c1 c2] (split-at n coll)]\n    (concat c2 c1)))","problem":44,"user":"51e89428e4b006d205356a51"},{"problem":44,"code":"(fn [rot coll]\n  (let [size (count coll)\n        pos-rot (mod rot size)]\n    (concat (drop pos-rot coll) (take pos-rot coll))))","user":"56e6d049e4b02e7e935eb6cd"},{"problem":44,"code":"(fn [n xs]\n (let [len (count xs)\n       abs (fn [x] (max x (- x)))\n       cnt (if (>= n 0)\n             n \n             (if (>= len (abs n))\n               (+ len n)\n               (- len (- (abs n) len))))\n       pattern (drop cnt (cycle xs))]\n  (take len pattern)))","user":"57eaf869e4b0bfb2137f5b56"},{"problem":44,"code":"(fn [i coll] (let [ind (mod i (count coll))] (apply concat (reverse (split-at ind coll)))))","user":"5744d088e4b009280f9f2b41"},{"problem":44,"code":"#(let [a (mod %1 (count %2))]\n  (concat \n  \t(drop a %2)\n  \t(take a %2)))","user":"56561119e4b0f9d632dd849d"},{"problem":44,"code":"(fn[n s]\n  (let[c (count s)\n       m (first (filter pos? (iterate #(+ c %) n)))]\n    (take c (drop m (cycle s)))))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"(fn\n  [mov s]\n  (let [mov (rem mov (count s))]\n    (cond (pos? mov) (concat (drop mov s) (take mov s))\n          (neg? mov) (let [mov (- mov)]\n                       (concat (take-last mov s) (drop-last mov s)))\n          :else\t      s)))","problem":44,"user":"511b233ae4b07ab9ec456180"},{"problem":44,"code":"(fn [n x]\n  (let [c (count x)\n        n (mod n c)]\n    (take c (drop n (cycle x)))))","user":"53e543efe4b036ad0777e457"},{"problem":44,"code":"(fn rotate-seq [amount s]\n  (letfn [(forward [prev] (concat (rest prev) [(first prev)]))\n          (backward [prev] (conj (butlast prev) (last prev)))]\n    (if (pos? amount)\n      (nth (iterate forward s) amount)\n      (nth (iterate backward s) (- amount)))))","user":"5d49ec5ee4b0776584bd6f1c"},{"problem":44,"code":"#(if (pos? %1)\n      (apply conj (take (mod %1 (count %2)) %2) (reverse (drop (mod %1 (count %2)) %2)))\n      (apply conj (drop-last (mod (* -1 %1) (count %2)) %2) (reverse (take-last (mod (* -1 %1) (count %2)) %2))))","user":"5586f418e4b059ccff29b1de"},{"code":"#(take (count %2) (drop (+ (count %2) (count %2) %) (flatten (repeat 5 %2))))","problem":44,"user":"5093ca51e4b097f48cc38585"},{"problem":44,"code":"#(if(> %1 0)\n   (concat (drop (rem %1 (count %2)) %2) (take (rem %1 (count %2)) %2))\n   (concat (drop (+ (rem %1 (count %2)) (count %2)) %2) (take (+ (rem %1 (count %2)) (count %2)) %2)))","user":"541619e8e4b01498b1a719f9"},{"code":"(fn [shift col]\n  (let [n (mod shift (count col))]\n  \t(if (< n 0)\n    \t(concat (drop (+ n (count col)) col)\n        \t    (take (+ n (count col)) col))\n\t    (concat (drop n col) (take n col)))))","problem":44,"user":"51891c96e4b04c2714a2670e"},{"code":"#(take (count %2) (drop (+ % (* 10 (count %2))) (cycle %2)))","problem":44,"user":"50cae881e4b0f75dcc9a6e51"},{"problem":44,"code":"(fn [n xs]\n  (apply concat ((juxt drop take) (mod n (count xs)) xs)))","user":"5522cd9ae4b0882d96d091ab"},{"code":"(fn [n xs]\n  (let [c (count xs) s (mod n c)]\n    (take c (drop s (flatten (repeat xs))))))","problem":44,"user":"529d292fe4b04e0c58e87b74"},{"problem":44,"code":"(fn rot [n seq]\n                (cond (zero? n) seq\n                      (> n 0) (rot (dec n) (concat (rest seq) (list (first seq))))\n                      (< n 0) (rot (inc n) (cons (last seq) (butlast seq)))))","user":"5edfb1e5e4b0c7845d86b107"},{"problem":44,"code":"(fn [n s]\n  (let [len (count s)\n        mov (mod n len)]\n  (concat (drop mov s) (take mov s))))","user":"53791ab7e4b06839e8705e4d"},{"problem":44,"code":"(fn [n the-seq]\n  (let [n' (rem n (count the-seq))]\n  (cond\n    (< n' 0) (concat (take-last (Math/abs n') the-seq) (drop-last (Math/abs n') the-seq))\n    (> n' 0) (concat (drop n' the-seq) (take n' the-seq))\n    :else the-seq)))","user":"59a96a85e4b0bcf4e9a43b13"},{"problem":44,"code":"(fn rotate\n  [n sq]\n  (let [\n        l (count sq)\n        r (mod n l)]\n    (concat (drop r sq) (take r sq))))","user":"588e4e05e4b00487982d5188"},{"code":"#(let [ rot (mod %1 (count %2))] (concat (drop rot %2) (take rot %2)))","problem":44,"user":"51059d33e4b0380e797c7d5c"},{"problem":44,"code":"(fn [n xs]\n   (let [xss (split-at (mod n (count xs)) xs)]\n     (concat (xss 1) (xss 0))))","user":"505223fae4b0a561d07d8f17"},{"problem":44,"code":"(fn [n xs]\n  (let [n (mod n (count xs))\n        back (take n xs)\n        front (drop n xs)]\n    (concat front back)))","user":"595fd721e4b066ee0a44b06e"},{"problem":44,"code":"(fn\n  [n coll]\n  (loop [n n s coll]\n    (if (= n 0)\n      s\n      (if (pos? n)\n        (recur (dec n) (concat (drop 1 s) (take 1 s)))\n        (recur (inc n) (concat (take-last 1 s) (butlast s)))))))","user":"57625c18e4b0994c1922fba4"},{"problem":44,"code":"(fn rotate-seq\n  [n coll]\n  (let [times (mod n (count coll))]\n    (->> coll\n         (split-at times)\n         (map reverse)\n         flatten\n         reverse\n         )))","user":"590b3aeae4b047aa04b199d0"},{"problem":44,"code":"#(loop [n %1 xs %2]\n   (cond\n    (< n 0)(recur (+ (count %2) n) xs)\n    (> n (count xs))(recur (- n (count %2)) xs)\n    :else (concat (drop n xs) (take n xs))))","user":"580fbaade4b0f478707a05c0"},{"code":"(fn rotate [n s]\n  (let [s (vec s)\n        rotate-pos (fn [s]  (flatten [(rest s) (first s)]))\n        rotate-neg (fn [s]  (flatten [(last s) (butlast s)]))]\n  (if (neg? n)\n    (nth (iterate rotate-neg s) (* -1 n))\n     (nth (iterate rotate-pos s) n))))","problem":44,"user":"4ec3b393535dcc7ae8597d59"},{"problem":44,"code":"(fn [n s]\n  (let [m (mod n (count s))]\n\t  (concat (drop m s) (take m s))))","user":"54c271b9e4b045293a27f602"},{"code":"(fn [r s] (map #(nth s (mod (+ r %) (count s))) (range (count s))))","problem":44,"user":"52bb81d7e4b07a9af57922e8"},{"problem":44,"code":"(fn foo [n coll]\n  (let [part \n        (if (pos? n)\n          (if (> n (count coll))\n            (split-at (mod n (count coll)) coll)\n            (split-at n coll))\n          (if (> (Math/abs n) (count coll))\n            (split-at (- (count coll) (- (mod n (count coll)) 1)) coll)\n            (split-at (+ (count coll) n) coll)\n           )\n         )]\n    (concat (second part) (first part)))\n)","user":"5143824ae4b0b4fb4ace5f36"},{"code":"(fn [n col]\n   (let [s (count col)\n         n (rem n s)\n         t #(concat (drop % col) (take % col))]\n     (if (< n 0) (t (+ s n)) (t n))))","problem":44,"user":"52c25645e4b07a9af579237d"},{"problem":44,"code":"(fn rotate [ cnt sequ] ( let [sz (count sequ)\n                                mov (mod cnt sz)]\n                                (concat (take (- sz mov) (drop mov sequ))(take mov sequ))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":44,"code":"#(let [l (count %2) n (mod %1 l)] (take l (drop n (concat %2 %2))))","user":"56dc3dbbe4b0ea9b8538f81a"},{"problem":44,"code":"(fn [n coll]\n  (let [len (count coll)]\n    (take len (drop (mod n len) (concat coll coll)))))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":44,"code":"(fn rotate-seq [index, col]\n  (let [pos-index ((fn calculate-index [index, length]\n    (if (pos? index)\n      index\n      (calculate-index (+ length index) length))) index, (count col)),\n        v (vec (flatten (repeat (+ 2 (/ pos-index (count col))) col))) ]\n    (subvec v pos-index (+ pos-index (count col)))))","user":"587a3babe4b01531a375eae2"},{"problem":44,"code":"#(take (count %2) (drop (mod %1 (count %2)) (apply concat (iterate identity %2))))","user":"57762e67e4b0979f89651630"},{"code":"(fn rotate [step coll]\n  (let [[a b] (split-at (mod step (count coll)) coll)] (concat b a)))","problem":44,"user":"5020d2aee4b0cb6ebc0a42fb"},{"problem":44,"code":"(fn [n v]\n  (if (= n 0)\n    v\n    (let [f (if (pos? n) dec inc)\n          c (if (pos? n)\n              (conj (vec (rest v)) (first v))\n              (into [(last v)] (take (- (count v) 1) v)))]\n      (recur (f n) c))))","user":"583c4482e4b089d5ab817d7e"},{"problem":44,"code":"(fn [n lst] \n   (let [count (count lst) \n         len (mod (+ count n) count)]\n     (concat (drop len lst) (take len lst))))","user":"559b55d6e4b066d22e731f54"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (letfn [(rot\n            [n coll]\n            (if (zero? n)\n              coll\n              (rot (dec n) (conj (butlast coll) (last coll)))))]\n    (if (pos? n)\n      (reverse (rot n (reverse coll)))\n      (rot (- n) coll))))","user":"5d38a4dde4b01671435dbd4a"},{"problem":44,"code":"(fn [n coll] (let [x (mod n (count coll))] (concat (drop x coll) (take x coll))))","user":"5e04ce34e4b0a607a9a45d71"},{"problem":44,"code":"(fn [n coll]\n\t(let [n (mod n (count coll ))]\n  \t\t(into (vec (drop n coll)) (vec (take n coll)))))","user":"577c3da9e4b0c8d87281f6b9"},{"code":"(fn [n coll]\n  (apply concat ((juxt drop take) (mod n (count coll)) coll)))","problem":44,"user":"4fb1d907e4b081705acca282"},{"code":"#(if (= % 0)\n    %2\n    (if (> % 0)\n      (recur (dec %) (flatten (cons (rest %2) (list (first %2)))))\n      (recur (inc %) (flatten (cons (list (last %2)) (butlast %2))))))","problem":44,"user":"507ef25ce4b0f753b6f9788e"},{"problem":44,"code":"(fn [n, x]\n  (loop [cx (seq x), i 0]\n    (println cx i)\n    (if (= i n)\n      cx\n      (if (< i n)\n        (recur (concat (rest cx) (vector (first cx))) (inc i))\n        (recur (concat (vector (last cx)) (butlast cx)) (dec i))\n       )\n     )\n   )\n )","user":"588fb3a7e4b00487982d51b9"},{"problem":44,"code":"(fn [n c] (let [l (count c)\n                s (mod n l)]\n            (concat (drop s c) (take s c))))","user":"5d1b2b7de4b02ea6f0fb697a"},{"code":"#(let [\n       [l r] (split-at (mod % (count %2)) %2)]\n    (concat r l))","problem":44,"user":"51bec919e4b013aa0d74b800"},{"problem":44,"code":"(fn rotate [n coll] (cond \n                     (< n 0) (rotate (inc n) (butlast (cons (last coll) coll)))\n                     (> n 0) (rotate (dec n) (rest (conj (vec coll) (first coll))))\n                     :else coll\n                    )\n)","user":"542c1f73e4b0dad94371f29d"},{"problem":44,"code":"(fn [n xs]\n  (let [seqs (split-at (mod n (count xs)) xs)]\n    (concat (second seqs) (first seqs))))","user":"5fa5a6b1e4b0fa27300f3dc8"},{"problem":44,"code":"(fn [n c]\n    (let [s (rem n (count c))\n          t (if (pos? s) s (+ (count c) s))\n          [a b] (split-at t c)]\n      (concat b a)))","user":"55773cbae4b05c286339e07f"},{"problem":44,"code":"#( let [n (count%2)]\n   (take n (drop (mod %1 n) (cycle %2))))","user":"5790f9d7e4b0ebec4cfb75b4"},{"code":"(fn rot [n s]\n  (cond\n   (= 0 n) s\n   (> 0 n) (rot (inc n) (concat [(last s)] (take (dec (count s)) s)))\n   (< 0 n) (rot (dec n) (concat (rest s) [(first s)]))))","problem":44,"user":"5277da8ee4b03e8d9a4a7514"},{"code":"#(let [size (count %2)] \n  (take size (drop (mod % size) (cycle %2))))","problem":44,"user":"4dd88803535d2dad7130b5d9"},{"problem":44,"code":"(fn [n l]\n  (cond \n   (> n 0) (loop [nn n ll l]\n             (if (= nn 0) ll\n               (recur (dec nn)  (concat (rest ll) (list (first ll)))   )\n             ))\n   (< n 0)\n           (loop [nn n ll l]\n             (if (= nn 0) ll\n               (recur (inc nn)  (cons (last ll) (butlast ll) )   )\n             ))\n   :else l\n   )\n  )","user":"5735ac67e4b0cd1946bd102b"},{"problem":44,"code":"(fn rotate-sequence [rotation s]\n  (loop [r rotation result s]\n    (cond\n      (= r 0) result\n      (< r 0) (recur (inc r) (cons (last result) (butlast result)))\n      (> r 0) (recur (dec r) (concat (rest result) [(first result)]))\n      ))\n  )","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":44,"code":"(fn [n s]\n   (let [nn (mod n (count s))]\n     (concat (drop nn s) (take nn s))))","user":"5d931a58e4b0d3f9b434ad10"},{"code":"(fn rot [n s]\n   (let [abs-n (Math/abs n) mod-n (mod abs-n (count s))] \n     (if (>= n 0)  \n      (concat (drop mod-n s) (take mod-n s)) \n      (concat (take-last mod-n s) (drop-last mod-n s)) \n     )   \n   )   \n\n)","problem":44,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":44,"code":"(fn [n coll] (let [c (count coll)]\n  (take c (drop (mod n c)\n                (cycle coll)))))","user":"4fc57c4ce4b0ee37620e17f6"},{"code":"(fn [a b] (loop [x a\n                  y b\n                  ]\n             (if (zero? x)\n               y\n               (if (pos? x)\n                 (recur (dec x) (concat (rest y) (list (first y))))\n                 (recur (inc x) (concat (list (last y)) (butlast y))))\n               )))","problem":44,"user":"4f1684c7535d64f60314644b"},{"code":"#( let [s (count %2)] (\n  take s (\n    drop (+ s s %) (cycle %2)\n  )\n))","problem":44,"user":"4f7beb36e4b06e829148e1ab"},{"problem":44,"code":"(fn [n v](->> \n          (concat v v) \n          (drop (mod n (count v)))\n          (take (count v))\n          ))","user":"57f9b25fe4b0d3187e90094b"},{"problem":44,"code":"(fn my-prob-44 [n s]\n  (let [n-shift (mod n (count s))]\n    (concat (drop n-shift s)\n          (take n-shift s))))","user":"5bfc9037e4b0bdcf453d15f2"},{"problem":44,"code":"(fn rotate [pos a-seq]\n  (cond \n    (= pos 0)\n    a-seq\n    (> pos 0)\n    (recur (dec pos) (concat (rest a-seq) (list (first a-seq))))\n    (< pos 0)\n    (reverse (rotate (Math/abs pos) (reverse a-seq)))))","user":"574e84e0e4b02ea114799243"},{"problem":44,"code":"(fn [n xs]\n  (let [r (mod n (count xs))]\n    (concat (drop r xs) (take r xs))))","user":"5c664b87e4b0fca0c16226a5"},{"code":"(fn foo [x y]\n  (if (= 0 x) y\n  (if (> x 0) (foo (dec x) (concat (rest y) (list(first y))))\n    (foo (inc x) (cons (last y) (drop-last y))))))","problem":44,"user":"5078300de4b0fc74642bff66"},{"code":"(fn [n lst]\n  (let [m (mod n (count lst))]\n    (concat (drop m lst) (take m lst))))","problem":44,"user":"4ff9cfd6e4b0678c553fc3af"},{"problem":44,"code":"(fn [i xs] (take (count xs) (drop (mod i (count xs)) (cycle xs))))","user":"583a360de4b089d5ab817d4f"},{"problem":44,"code":"#(let [posidx (Math/abs %1)\n        iidx (if (< (count %2) posidx)\n               (if (neg? %1)\n                 (inc (- posidx (count %2)))\n                 (- posidx (count %2)))\n               (if (neg? %1)\n                 (- (count %2) posidx)\n                 posidx))]\n    (concat (drop iidx %2) (take iidx %2)))","user":"5d5c2730e4b09db18d4482ea"},{"code":"#(take (count %2) (nthrest (concat %2 %2 %2 %2) (if (neg? %1) (+ (count %2) (count %2) %1) %1)))","problem":44,"user":"51beb32ae4b013aa0d74b7fd"},{"problem":44,"code":"(fn [n coll]\n   (let [ntime (if (neg? n) (- n) n)\n\t  lshift #(concat (rest %) [(first %)])\n\t  rshift #(cons (last %) (drop-last %))]\n\t  ((apply comp (repeat ntime \n\t  \t\t(if (neg? n) rshift lshift)))\n\t\t\tcoll)))","user":"56585dbce4b0f9d632dd84b3"},{"problem":44,"code":"#( loop [ n (mod %1 (count %2)) s %2 ]\n   ( if (= n 0)\n     s\n     (recur (dec n) (concat (rest s) [ (first s) ]))\n     )\n   )","user":"5b3aa98be4b02d533a91bbca"},{"code":"(fn [n xs]\n  (let [n (if (pos? n) \n            (* -1 (- (count xs) n)) \n             n)]\n    (if (= n 0) \n      xs\n      (recur (inc n) (cons (last xs) (butlast xs))))))","problem":44,"user":"4e6a97a9535d8ccf87e9fef8"},{"problem":44,"code":"(fn rot [n s]\n  (let [rot-h (fn rot-h [n s]\n                (list* (into (vec (nthrest s n))\n                             (take n s))))]\n    (if (< n 0)\n      \n      (rot-h (+ (count s) (rem n (count s))) s)\n      (rot-h (rem n (count s)) s))))","user":"5674607ae4b05957ce8c6137"},{"problem":44,"code":"(fn rot [value raw-coll]\n  (let [coll (vec raw-coll)\n        size (count raw-coll)\n        amt (if (neg? value)\n              (mod (+ size value) size)\n              (mod value size))]\n    (concat (subvec coll amt) (subvec coll 0 amt))))","user":"4daeff24edd6309eace4d16e"},{"problem":44,"code":"(let [rotate-right (fn\n                     [[s & t]]\n                     (conj (into [] t) s))]\n  (let [rotate-left (fn\n                      [s]\n                      (reverse (rotate-right (reverse s))))]\n    (fn rotate-seq\n      [c s]\n      (loop [accum s\n             rem c]\n        (if (= rem 0)\n          accum\n          (if (> rem 0)\n            (recur (rotate-right accum) (- rem 1))\n            (recur (rotate-left accum) (+ rem 1))))))))","user":"58152157e4b0f478707a0631"},{"problem":44,"code":"(fn [n c] (loop [x (mod (+(mod n (count c)) (count c)  ) (count c)   ) result  c] (if (= 0 x)  result (recur (dec x) (conj (vec (rest result)) (first result) ) )   )    ) )","user":"5da98129e4b000c986472c33"},{"problem":44,"code":"(fn [n coll]\n  (let [n (mod n (count coll))]\n    (concat (nthrest coll n) (take n coll))))","user":"55fc1f05e4b0f488688e066f"},{"problem":44,"code":"(fn [amount s]\n  (let [fixed (mod amount (count s))]\n    (concat (drop fixed s) (take fixed s))))","user":"5b465b8be4b02d533a91bc65"},{"problem":44,"code":"(fn [n xs] (let [l (mod n (count xs))] (concat (drop l xs) (take l xs))))","user":"585e7c60e4b0f14aab7c87b3"},{"code":"(fn [n xs]\n  (let [foo #(split-at (mod % (count %2)) %2)\n        [post pre] (foo n xs)]\n    (concat pre post)))","problem":44,"user":"4f9acea6e4b0dcca54ed6d10"},{"problem":44,"code":"#(let [m (mod %1 (count %2))]\n   (flatten [(drop m %2) (take m %2)]))","user":"571107b3e4b09c608db7043f"},{"problem":44,"code":"(fn [r xs]\n  (let [n (mod r (count xs))]\n\t(concat (drop n xs) (take n xs))))","user":"55274467e4b0ffed3738f92b"},{"problem":44,"code":"#(let [cutoff (if (pos? %1)\n                 (if (> (count %2) %1)\n                   %1\n                   (- %1 (count %2)))\n                 (if (> (count %2) (- %1))\n                   (- (count %2) (- %1))\n                   (- (count %2) (- (- %1) (count %2)))))]\n    (concat (drop cutoff %2) (take cutoff %2)))","user":"502ea967e4b06efe12e8cc76"},{"problem":44,"code":"(fn [n s] (let [k (mod n (count s))] (concat (drop k s) (take k s))))","user":"5abe2fc2e4b073f17744271e"},{"problem":44,"code":"(fn [n ls]\n  (let [m (mod (+ n (count ls)) (count ls))]\n  ((comp #(apply concat %) reverse split-at)\n    m ls)))","user":"57915ba4e4b0ebec4cfb75ba"},{"problem":44,"code":"(fn rot [r s] (let [rr (mod r (count s))] (concat (drop rr s) (take rr s))))","user":"50b42cbbe4b001349b2f4abe"},{"code":"(fn [n x]\n  (map\n    (fn [z]\n      (nth x\n        (- (+ z n)\n          (* (count x)\n            (Math/floor (/ (+ z n) (count x)))\n          )\n        )\n      )\n    )\n    (range (count x))\n  )\n)","problem":44,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"problem":44,"code":"#(reduce (comp flatten conj) (split-at (mod %1 (count %2)) %2))","user":"55218bf0e4b0882d96d09196"},{"code":"#(nth (iterate (fn[c] (conj (vec (rest c)) (first c))) %2)\n  (if (> % 0)\n    % (+ % (* 2 (count %2)))))","problem":44,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":44,"code":"(fn rotate [n v]\n  (->> (concat v v)\n    (drop (mod n (count v)))\n    (take (count v))\n    )\n)","user":"53be3ee7e4b0d9a98559a6df"},{"code":"#(flatten (cons (drop (mod (+ (* (count %2) 30) %) (count %2)) %2) (take (mod (+ (* (count %2) 30) %) (count %2)) %2)))","problem":44,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":44,"code":"(fn [n coll]\n    (let [get-pos #(loop [c %]\n                     (if (and (> c 0) (< c (count coll)))\n                       c\n                       (recur (+ c (if  (< c (count coll)) (count coll) (- 0 (count coll)))))))\n          pos (get-pos n)]\n      (concat (drop pos coll) (take pos coll))))","user":"56a94562e4b07966d5a8a074"},{"code":"(fn rotate [s v]\n         (let [len (count v)\n               shift (mod s len)]\n         (take len (drop shift (cycle v)))))","problem":44,"user":"4f1bee08535d64f60314647e"},{"code":"(fn rot [x seq]\n  (let [sseq (cycle seq)\n        xx (rem x (count seq))]\n    (take (count seq)\n      (if (> x 0)\n        (drop x sseq)\n        (drop (+ (count seq) xx) sseq)))))","problem":44,"user":"5268eb68e4b03e8d9a4a71c6"},{"code":"(fn [n coll]\n  (let [start (mod n (count coll))]\n    (concat (drop start coll) (take start coll))))","problem":44,"user":"4f7f9665e4b033992c121bea"},{"problem":44,"code":"(fn [offset sq]\n  (let [adjusted-offset (mod offset (count sq))]\n    (concat (drop adjusted-offset sq) (take adjusted-offset sq))))","user":"5c059c7fe4b0bdcf453d169c"},{"problem":44,"code":"#(let [l (mod % (count %2))] (concat (drop l %2) (take l %2)))","user":"532018efe4b08068f379edcd"},{"problem":44,"code":"(fn rotate [n coll]\n  (if (zero? n)\n    coll\n    (if (neg? n)\n      (rotate\n       (inc n)\n       (concat\n        (list (last coll))\n        (butlast coll)))\n      (rotate\n       (dec n)\n       (concat\n        (rest coll)\n        (list (first coll)))))))","user":"579c35fee4b05b1deef9ae04"},{"code":"(fn [n s] (let [m (mod n (count s))]\n  (concat (drop m s) (take m s))))","problem":44,"user":"4fc4eadee4b081705acca353"},{"code":"(fn rs [n s]\r\n  (let [c (count s)\r\n  n' (if (< n 0)\r\n\t     (mod (+ c n) c)\r\n\t     n)]\r\n    (take c\r\n\t  (nthrest (cycle s) n'))))","problem":44,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn rotate [n s]\n  (let [n (mod n (count s))\n        f (take n s)\n        l (drop n s)]\n    (reduce conj (vec l) f)))","problem":44,"user":"4fb79872e4b081705acca2d2"},{"code":"(fn rot [n x]\n  (if (< n 0)\n      (rot (+ n (count x)) x)\n      (drop n (take (+ n (count x)) (cycle x)))))","problem":44,"user":"4e21c0c7535d04ed9115e818"},{"problem":44,"code":"#(let [t (count %2) n (mod (+ t %1) t)] (concat (drop n %2) (take n %2)))","user":"587294f0e4b01531a375ea1e"},{"problem":44,"code":"(fn [n col]\n  (let [size (count col)\n        offset (mod n size)\n        [a b] (split-at offset col)]\n    (concat b a)))","user":"59a080e3e4b0871e7608b837"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [m (count xs)\n        start (cond (and (> n 0) (< n m)) n\n                    (and (> n 0) (> n m)) (- n m)\n                    (and (< n 0) (< (- n) m)) (- m (- n))\n                    (and (< n 0) (> (- n) m)) (- m (- (- n) m)))\n        v (split-at start xs)]\n    (flatten (vector (second v) (first v)))))","user":"58b989dbe4b0888cdc949ccd"},{"code":"(fn [n c] (take (count c) (drop (+ (* 2 (count c)) n) (cycle c))))","problem":44,"user":"50e3e108e4b01912b3285c48"},{"problem":44,"code":"#(->> (cycle %2)\n      (drop (if (pos? %) % (inc (- %))))\n      (take (count %2)))","user":"5e6ca949e4b04a83ad7cd289"},{"problem":44,"code":"(fn rotate[number, sequence] (let [size (count sequence)] (take size (drop (mod number size) (cycle sequence)))))","user":"54f296efe4b024c67c0cf8c8"},{"problem":44,"code":"(fn a [n v] (let [vn (apply vector v) c (count vn) u (mod n c)] (concat (subvec vn u) (subvec vn 0 u))))","user":"55ac16a0e4b03311e7b73291"},{"code":"#(loop [rot %1 data (seq %2)]\r\n   (println data)\r\n   (cond\r\n     (= rot 0) data\r\n     (< rot 0) (recur (inc rot) (concat [(last data)] (drop-last data)))\r\n     (> rot 0) (recur (- rot 1) (concat (next data) [(first data)]))\r\n     )\r\n   )","problem":44,"user":"4fe588b6e4b0e8f79898fec5"},{"code":"(fn [n col]\n  (for [i (range (count col))]\n    (nth col (rem (+ (rem (+ i n ) \n                  (count col)) (count col)) (count col))\n         )))","problem":44,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":44,"code":"(fn  [n col]\n  (if (> 0 n)\n    (nth (iterate (fn rotateR  [col]\n                    (into [] (drop-last (concat (list (last col)) (into [] col))))\n  )  col) (- 0 n))\n    (nth (iterate (fn rotateL\n  [col]\n  (into [] (drop 1 (conj (into [] col) (first col))))\n)\n  col) n) ;; else\n    )\n)","user":"5581a6dae4b05c286339e0fe"},{"problem":44,"code":"(fn [pos coll]\n  (let [adj-pos (mod pos (count coll))]\n    (concat (drop adj-pos coll ) (take adj-pos coll))))","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":44,"code":"(fn [x y] \n  (flatten \n   (reverse \n    (split-at \n     (if (< x 0) \n       (mod x (count y)) \n       (mod x (count y))) \n     y))))","user":"546a6e9fe4b00cfc9eacc157"},{"code":"(fn [n s]\n  (let [N (mod n (count s))]\n    (lazy-cat (nthrest s N) (take N s))))","problem":44,"user":"50464831e4b011c5dfee771f"},{"problem":44,"code":"(fn f [n xs] (let [n (rem n (count xs))] (if (neg? n) (f (+ (count xs) n) xs) (concat (drop n xs) (take n xs)))))","user":"59da6480e4b0ef0a1e9b5c68"},{"code":"(fn rotate-seq [pivot coll]\n  (let [lst (vec coll)\n        mid (if (>= pivot 0)\n              pivot\n              (+ (count lst) pivot))\n        mid (mod mid (count lst))]\n    (flatten (conj [] (subvec lst mid) (subvec lst 0 mid)))))","problem":44,"user":"52a6ed15e4b0c58976d9ac0a"},{"code":"(fn rotate [amount coll] (cond (pos? amount) (rotate (dec amount) (concat (rest coll) (list (first coll))))\n                               (neg? amount) (rotate (inc amount) (concat (list (last coll)) (butlast coll)))\n                               :else coll))","problem":44,"user":"4ff50604e4b0678c553fc365"},{"problem":44,"code":";; Seq -> Seq\n;; Rotates a sequence in either direction.\n(fn [n xs]\n  (cond (= 0 n) xs\n        (> 0 n) (recur (+ n (count xs)) xs)\n        (< (count xs) n) (recur (- n (count xs)) xs)\n        :else (let [split (split-at n xs)]\n                (apply conj (first split) (reverse (second split))))))","user":"541b41d1e4b01498b1a71a65"},{"problem":44,"code":"(fn [i c]\n  (let [s (mod i (count c))]\n    (concat (drop s c) (take s c))))","user":"54b83ae9e4b0ed20f4ff6e95"},{"problem":44,"code":"(fn rotate [n coll]\n           (let [size (count coll)\n                 n (if (neg? n)\n                     (* (- n) (- size 1))\n                     n)\n                 mod-n (mod n size)]\n             (drop mod-n (take (+ mod-n size) (cycle coll)))))","user":"5e3975a3e4b01d43a70e8dd3"},{"code":"(fn rotate [x s]\n  (loop [n x s1 s]\n    (print s1)\n    (cond\n     (= n 0) s1\n     (> n 0) (recur (dec n) (concat (drop 1 s1) (take 1 s1)))\n     (< n 0) (recur (inc n) (concat (take-last 1 s1) (take (- (count s) 1) s1)))\n     )))","problem":44,"user":"52140b53e4b0961f15ac4d7e"},{"code":"(fn [n s]\n  (let [c (count s)\n        i (rem (+ (rem  n c) c) c)]\n       (concat (drop i s) (take i s))))","problem":44,"user":"4f9120d8e4b0dcca54ed6c96"},{"code":"(fn [n s]\n  (let [len (count s)\n        mod (unchecked-remainder-int n len)\n        rot (if (< mod 0) (+ len mod) mod)        \n       ]\n      (concat (drop rot s) (take rot s))\n    ))","problem":44,"user":"4febb4dae4b0681fd128dc98"},{"problem":44,"code":"(fn rotate\n  [n xs]\n  (let [ns (mod n (count xs))]\n    (concat (drop ns xs) (take ns xs))))","user":"5c73bcf9e4b0fca0c16227bb"},{"problem":44,"code":"#(flatten( conj(take (mod %1 (count %2)) %2) (drop (mod %1 (count %2)) %2)))","user":"55253799e4b0882d96d091cf"},{"code":"(fn [amount mylist]\n  \n  (let [amount (mod amount (count mylist))]\n  \n  (if (pos? amount)\n    \n    (concat (take-last (-> mylist count (- amount)) mylist)\n            (take amount mylist)\n            )\n    \n    \n    (let [pos-amount (unchecked-negate-int amount)] \n      (concat (take-last pos-amount mylist)\n              (take (-> mylist count (- pos-amount)) mylist)\n            )\n      \n      )\n  \n  )\n  \n  )\n)","problem":44,"user":"5314b0cae4b08068f379ed1c"},{"code":"(fn [items seq]\n   (let [x (mod items (count seq))]\n       (concat  (drop x seq)  (take x seq))))","problem":44,"user":"506afdafe4b0a2a5463de37e"},{"code":"(fn rotate [n s]\n  (cond\n    (< n 0) (rotate (+ (count s) n) s)\n    (> n (count s)) (rotate (rem n (count s)) s)\n    :else (concat (drop n s) (take n s))))","problem":44,"user":"50aab057e4b056ee0193586b"},{"code":"(fn [n c]\n  \n  (let [rot (if (< 0 n) \n              (fn [c] (concat (rest c) [(first c)])) \n              (fn [c] (reverse (concat (rest (reverse c)) [(last c)]))))]\n    \n    ((apply comp (repeat (max n (* -1 n)) rot)) c)))","problem":44,"user":"53597288e4b04ce2eb3ed29c"},{"code":"(fn [n coll]\n  (let [idx (mod n (count coll))\n        v   (if (vector? coll) coll (vec coll))]\n    (concat (subvec v idx) (subvec v 0 idx))))","problem":44,"user":"4efec33f535dcb61093f6a2a"},{"problem":44,"code":"(fn [n c] (let [l (count c) n1 (mod n l) [a b] (split-at n1 c)] (concat b a)))","user":"571aad45e4b07c98581c3b59"},{"code":"(fn [x lst]\n  (let[pos (rem x (count lst))]\n  (if (< 0 pos)\n    (flatten (conj (take pos lst) (drop pos lst)))\n    (let [pos (+ pos (count lst))]\n      (flatten (conj (take pos lst) (drop pos lst)))))))","problem":44,"user":"52fa4f48e4b047fd55836ff7"},{"code":"(fn [n s]\n  (let [size (count s)\n        n2 (if (neg? n) (- 0 n) n)\n        ops (comp (partial take size) (partial drop n2) cycle)]\n    (if (pos? n)\n         (ops s)\n         (reverse (ops (reverse s))))))","problem":44,"user":"4ef0a38e535dced4c769f20b"},{"problem":44,"code":"(fn rot[n l]\n  (if (= n 0) l\n    (if (> n 0) \n        (recur (- n 1) (concat (rest l) [(first l)]))\n        (recur (+ n 1) (concat [(last l)] (butlast l))))))","user":"57b9fc74e4b0fbc9809a27fb"},{"code":"(fn [rot seq] (let [count (count seq)] (take count (drop (mod rot count) (cycle seq)))))","problem":44,"user":"4f528bcde4b03ad3f0c10d3e"},{"problem":44,"code":"(fn rotate-seq\n  [shift rotseq]\n  (let [len (count rotseq)\n        final-shift (mod shift len)]\n    (take (count rotseq) (drop final-shift (cycle rotseq)))\n  ))","user":"52af7a5ce4b0c58976d9acbd"},{"code":"#(let [n (count %2)\n       d (mod %1 n)]\n    (take n (drop d (concat %2 %2))))","problem":44,"user":"4e39d763535deb9a81d77f46"},{"problem":44,"code":"(fn rt [k coll ]\n                                 (let [cnt (count coll)\n                                       km (mod k cnt)        \n                                       ]\n                                      (flatten (conj  (conj () (take  km coll)) (drop  km coll)))\n                                   )\n                                 )","user":"5b9d3913e4b0c0b3ffbd4b37"},{"code":"(fn rota [n coll]\n  (let [right (juxt #(list (last %)) butlast)\n        left  (juxt rest #(list (first %)))\n        doit (fn [n coll idxF concF]\n               (loop [i n ,res (seq coll)]\n                 (if (= 0 i) res (recur (idxF i) (apply concat (concF res))))\n                 ))]\n    (if (> n 0) (doit n coll dec left) (doit n coll inc right))\n    ))","problem":44,"user":"4fc0221ce4b081705acca322"},{"code":"#(let [[r l] (split-at (mod % (count %2)) %2)] (concat l r))","problem":44,"user":"4e8612f8535db62dc21a62f2"},{"code":"(fn [a b]\n      (let [n (count b)]\n        (if (pos? a) (concat (drop (mod a n) b) (take (mod a n) b))\n          (concat (drop (+ (mod (* a -1) n) 1) b) (take (- n (mod (* a -1) n)) b))\n          )\n        )\n      )","problem":44,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":44,"code":"(fn [pos coll] \n  (take (count coll) \n        (drop (mod pos (count coll)) \n              (cycle coll))))","user":"540997ede4b0addc1aec66dd"},{"problem":44,"code":"(fn [n seqq]\n  (let [r (mod n (count seqq))]\n    (concat (drop r seqq) (take r seqq))))","user":"53a739b0e4b0ef122a8689d0"},{"problem":44,"code":"(fn rotate-sequence [n s]\n  (let [c (count s)\n        i (cond\n            (> n c) (- n c)\n            (neg? n)    (+ c n)\n            :else n)]\n    (if (neg? i)\n      (concat (take-last (* -1 i) s) (drop-last (* -1 i) s))\n      (concat (drop i s) (take i s)))))","user":"5c665311e4b0fca0c16226a7"},{"problem":44,"code":"(fn rot-seq [n s] (flatten (merge (take (mod n (count s)) s)\n                                      (drop (mod n (count s)) s) )))","user":"5632b0a9e4b0bfe05bf117a8"},{"problem":44,"code":"(fn [x xs] \n  (let [[a b] (split-at (mod x (count xs)) xs)] \n    (concat b a)))","user":"5606ea56e4b08b23635d317b"},{"problem":44,"code":"#(let [rotations (if (neg? %1)\n                    (+ (count %2) (rem %1 (count %2)))\n                    %1)]\n    (loop [i 0 acc %2]\n      (if (= i rotations)\n        acc\n        (recur (inc i) (flatten [(rest acc) (first acc)])))))","user":"57147cd9e4b07c98581c3abf"},{"code":"#(apply concat (reverse (split-at (rem (+ % (* 2 (count %2))) (count %2)) %2)))","problem":44,"user":"4f1e4ab5535d64f603146496"},{"problem":44,"code":"(fn [rotation, coll]\n  (mapcat identity (reverse (split-at (mod rotation (count coll)) coll))))","user":"55842c7ee4b05c286339e11d"},{"problem":44,"code":"#(reduce(fn [s c](concat (rest s) (take 1 s))) %2 (range (mod % (count %2))))","user":"56c08696e4b060a8e693e3aa"},{"code":"(fn rotateseq [n s]\n  (nth \n    (iterate #(conj (vec (rest %)) (first %)) s)\n    (mod n (count s))))","problem":44,"user":"4f03e7b3535dcb61093f6b7c"},{"problem":44,"code":"(fn [x coll]\n  (let [len (count coll)\n        index (mod (+ len x len) len)\n        [c1 c2] (split-at index coll)]\n    (concat c2 c1)))","user":"53da059be4b0e771c302547e"},{"code":"(fn [n xs]\n    (let [v (vec xs)\n          abs (fn [x]\n                (if (< x 0)\n                  (- x)\n                  x))\n          rotate #(vec (cons (peek %) (pop %)))]\n      \n      (if (< n 0)\n        (last (take (inc (abs n)) (iterate rotate v)))\n        (reverse (last (take (inc (abs n)) (iterate rotate (vec (reverse v)))))))))","problem":44,"user":"526302eee4b03e8d9a4a70a2"},{"problem":44,"code":"(fn [n coll]\n  (let [k (if (neg? n) (- (count coll) (mod (Math/abs n) (count coll))) n)]\n    (take (count coll) (drop k (cycle coll)))))","user":"531bf76fe4b08068f379ed96"},{"problem":44,"code":"(fn [n c]\n  (let [abs-n (max n (- n))\n        x (mod abs-n (count c))\n        y (- (count c) x)\n        front (if (neg? n)\n                (drop y c)\n                (drop x c))\n        back (if (neg? n)\n               (take y c)\n               (take x c))]\n    (flatten\n     (list front back))))","user":"5c56e264e4b0fb8c5ffd9a39"},{"problem":44,"code":"(fn [m s]\n  (let [items (count s)\n        offset (if (> m 0) \n                 (rem m items)\n                 (+ (rem m items) items))]\n    (concat (drop offset s) (take offset s))))","user":"56d63729e4b0ea9b8538f7ca"},{"code":"(fn [x coll]\n  (let [[first-half, last-half] (split-at (mod x (count coll)) coll)]\n    (concat last-half first-half)))","problem":44,"user":"509b152be4b0412cdea6eb1e"},{"problem":44,"code":"#(apply concat\n    (reverse (split-at (mod %1 (count %2)) %2)))","user":"5910a43de4b0163c97b36ebf"},{"code":"(fn myRotate\n  ([nextIdx lastIdx x y]\n    (if (= nextIdx lastIdx)\n      (concat y [(nth x nextIdx)])\n    (myRotate \n        (mod (inc nextIdx) (count x))    \n        lastIdx \n        x \n        (concat y [(nth x nextIdx)]))))\n  ([n x]\n    (let [y (count x)]\n      (if (< n 0)\n        (myRotate (+ n y) x)\n      (if (> n y)\n        (myRotate (- n y) x)\n      (myRotate \n         n \n         (mod (- (+ n y) 1) y)\n         x [])))\n      )))","problem":44,"user":"4f03b3fb535dcb61093f6b52"},{"problem":44,"code":"(fn [n xs]\n  (let [s (count xs)\n        n (rem (+ s (rem n s)) s)]\n    (apply concat ((juxt drop take) n xs))))","user":"54b13a40e4b09f271ff37d1b"},{"code":"(fn rotate [n coll]\n    (cond (= n 0)\n          coll\n          (< n 0)\n          (recur (inc n) (concat [(last coll)] (butlast coll)))\n          :else\n          (recur (dec n) (concat (rest coll) [(first coll)]))))","problem":44,"user":"5370ef22e4b0fc7073fd6ea0"},{"problem":44,"code":"(fn [n col]\n  (let [cnt (count col)]\n  \t(take cnt (drop (mod n cnt) (cycle col)))))","user":"57934c67e4b0e215f87e8456"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n     (concat (drop n %2) (take n %2)))","user":"5720fc08e4b0c5bde472c0a3"},{"code":"(fn rotate\n  [amount seq]\n  (if (neg? amount)\n    (reverse (rotate (- amount) (reverse seq)))\n    (concat (drop (mod amount (count seq)) seq) (take (mod amount (count seq)) seq))))","problem":44,"user":"4dbb0f2d535d1e037afb21b1"},{"problem":44,"code":"(fn [m coll]\n  (take (count coll) (drop (mod m (count coll))(cycle coll))))","user":"5d27a41ee4b092dab7f59c6e"},{"code":"(fn rotate [n l]\n  (let [new-l (cycle l)\n        c (count l)]\n    (take c (drop (mod n c) new-l))))","problem":44,"user":"50812debe4b01a93d3f38e4c"},{"problem":44,"code":"(fn rotator [n coll]\n  (let [position (mod n (count coll))]\n    (flatten (list (drop position coll) (take position coll)))))","user":"54a96a15e4b09f271ff37cad"},{"problem":44,"code":"#(let [c (count %2)] (take c (drop (mod (+ %1 c) c) (cycle %2))))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn aa [xx yy]\n  (for [x (range (count yy))] (nth yy (mod (+ x xx) (count yy))))\n)","problem":44,"user":"5105ed16e4b01150e115ebe2"},{"code":";(fn [n coll]\n;   (let [nn (rem n (count coll))\n;         c (rem (+ (count coll) nn) (count coll))\n;          f (take c coll)\n;          r (drop c coll)]\n;      (into (vec r) (vec  f))))\n#(take (count %2) (nthnext (cycle %2) (mod %1 (count %2))))","problem":44,"user":"4ec6297b535d6d7199dd36c4"},{"problem":44,"code":"(fn [r c]\n  (let [cnt (count c)\n        rr (mod r (count c))]\n    (if (neg? rr)\n      (concat (drop (+ cnt rr) c) (take (+ rr cnt) c))\n      (concat (drop rr c) (take rr c))\n      )))","user":"5835cb06e4b089d5ab817cea"},{"problem":44,"code":"(fn [rotate-by collection]\n  (let [size     (count collection)\n        distance (mod rotate-by size)]\n    (drop distance\n          (take (+ distance size) (cycle collection)))))","user":"4ee897fe535d93acb0a66883"},{"problem":44,"code":"(fn rotate-sequence [n coll]\n  (let [n (mod n (count coll))]\n    (if (zero? n) coll\n        (if (> n 0)\n          (concat (drop n coll) (take n coll))\n          (concat (take-last (- n) coll) (drop-last (- n) coll))))))","user":"605f5c69e4b03746e80ebf5e"},{"problem":44,"code":"(fn [s m1]\n(let [m (vec m1)\n      i (mod s (count m))]\n  (concat (subvec m i) (subvec m 0 i))))","user":"534bfc71e4b084c2834f4a88"},{"problem":44,"code":"(fn [rVal myseq] \n    (let [truerVal (mod (max rVal (- rVal)) (count myseq))]\n      (if (= truerVal 0) (myseq)\n        (concat (take-last (if (< rVal 0) truerVal (- (count myseq) truerVal)) myseq) (take (if (> rVal 0) truerVal (- (count myseq) truerVal)) myseq))\n          )))","user":"5439c3cee4b032a45b869323"},{"problem":44,"code":"#(let [c %2 d (mod % (count c))] (concat (drop d c) (take d c)))","user":"5872935ce4b01531a375ea1d"},{"problem":44,"code":"(fn [at col] (let [cnt (count col) rv (neg? at) a (mod (java.lang.Math/abs at) cnt) at (if rv (- cnt a) a)] (->> (concat col col) (drop at) (take cnt))))","user":"584d8724e4b0b7285a6f4e3e"},{"code":"(fn [off col] (take (count col) (drop (+ (* 2 (count col)) off) (flatten (repeat col)))))","problem":44,"user":"4fab31a8e4b081705acca215"},{"code":"(fn prob-0044\n  [in-n xs]\n  (let [n (rem in-n (count xs))]\n    (if (neg? n)\n      (prob-0044 (+ (count xs) n) xs)\n      (concat (drop n xs) (take n xs)))))","problem":44,"user":"4f047c07535dcb61093f6bcd"},{"code":"(fn [n coll]\n  (let [num-rotations (mod n (count coll))\n        rotate        (comp (partial apply concat) (juxt drop take))]\n    (rotate num-rotations coll)))","problem":44,"user":"4daf36c2edd6309eace4d175"},{"code":"(fn [n coll]\n  (let [offset (mod n (count coll))]\n    (concat (drop offset coll) (take offset coll))))","problem":44,"user":"4e39fb68535deb9a81d77f47"},{"code":"(fn rotate \n  [index values] \n  (let [l (mod index (count values))] \n    (concat (drop l values) (take l values))))","problem":44,"user":"50e4f4e9e4b049a987753896"},{"problem":44,"code":"(fn rotate [nu li]\n  (->>(split-at (mod nu (count li)) li)\n      (reverse)\n      (concat)\n      (flatten)\n      )\n  )","user":"5ec819b4e4b08d0ec38692e2"},{"problem":44,"code":"(fn joku [n s]\n  (loop [numu n\n         arr s]\n    (if (zero? numu)\n      arr\n      (if (neg? numu)\n        (recur (inc numu) (concat (list (last arr)) (drop-last arr)))\n        (recur (dec numu) (concat (drop 1 arr) (list (first arr))))))))","user":"57c314f3e4b05aa3c4741cba"},{"code":"(fn rot [n s]\n  (take (count s) (drop (mod n (count s)) (cycle s))))","problem":44,"user":"51672d15e4b079759a74a5e7"},{"problem":44,"code":"(fn this [rotateby items]\n    (if (= 0 rotateby)\n      items\n      (if (< rotateby 0)\n        (this (+ rotateby 1) (concat [(last items)] (butlast items)))\n        (this (- rotateby 1) (concat (rest items) [(first items)])))))","user":"54d9366ce4b0a52adc2e204e"},{"problem":44,"code":"(fn [n s]\n  (let [mod-rotation (mod n (count s))]\n    (concat (drop mod-rotation s) (take mod-rotation s))))","user":"55cb11e9e4b0e31453f649ff"},{"problem":44,"code":"(fn [i v] (concat (drop (mod (+ i (count v)) (count v)) v) (take (mod (+ i (count v)) (count v)) v)))","user":"5e5f8a07e4b0fd0acd15867c"},{"code":"(fn [n coll]\r\n    (let [idx (mod n (count coll))]\r\n      (concat (drop idx coll) (take idx coll))))","problem":44,"user":"50436470e4b034ff00315d23"},{"problem":44,"code":"(fn [n coll]\n          (let [n (rem n (count coll))\n                n (if (pos? n) n (+ n (count coll)))]\n            (concat (drop n coll) (take n coll))))","user":"531c6e72e4b08068f379eda0"},{"code":"(fn [rot-by coll]\n    (let [len (count coll)\n          inf (flatten (repeat coll))]\n      (take len\n            (if (pos? rot-by) (drop rot-by inf)\n                (drop (mod rot-by len) inf)))))","problem":44,"user":"4e89e939535d3e98b8023287"},{"problem":44,"code":"(fn [n xs]\n  (if (pos? n)\n    (nth\n     (iterate\n      #(concat       \n        (rest %)       \n        [(first %)])     \n      xs)\n     n)\n    (nth\n     (iterate\n      #(concat\n        [(last %)]\n        (butlast %))\n      xs)\n     (- n))))","user":"56403765e4b08d4f616f5edc"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [cnt (count xs)\n        cur (mod n cnt)\n        xss (concat xs xs)]\n    (->> xss\n         (drop cur)\n         (take cnt))))","user":"550ff2a3e4b06e50f9beb17f"},{"code":"#(let [n (rem (+ (rem %1 (count %2)) (count %2)) (count %2)) s %2] (concat (drop n s) (take n s) ))","problem":44,"user":"50b81a93e4b0cba0e598b64b"},{"problem":44,"code":"(fn [n S]\n  (let [[a b] (split-at (mod n (count S)) S)] (concat b a)))","user":"559c13c5e4b066d22e731f61"},{"problem":44,"code":"#(concat\n      (drop (mod %1 (count %2)) %2)\n      (take (mod %1 (count %2)) %2))","user":"59e0f38ae4b08badc2a0c500"},{"problem":44,"code":"#(let [q (rem % (count %2))\n       r (if (< % 0) (+ (count %2) q) q)]\n   (concat (drop r %2) (take r %2)))","user":"5f03ab5be4b0cf489e8d7f37"},{"code":"(fn[n sq] \n  (let[x (mod n (count sq))] \n    (concat (drop x sq) (take x sq)))\n  )","problem":44,"user":"52e68e61e4b09f7907dd1479"},{"problem":44,"code":"(fn [n init]\n  (loop [left (mod n (count init)), result init]\n    (cond\n      (= left 0) result\n      (> left 0)\n        (recur\n          (dec left)\n          (conj (vec (rest result)) (first result))\n          )\n      (< left 0)\n        (recur\n          (inc left)\n          (conj (butlast result) (last result))\n          )\n        )\n    )\n  )","user":"564faadce4b0284900eef6b2"},{"problem":44,"code":"(fn rotseq\n  [n v]\n  (cond\n    (= n 0) v\n    (< n 0) (rotseq (+ n 1) (concat (list (last v)) (butlast v)))\n    (> n 0) (rotseq (- n 1) (concat (rest v) (list (first v))))\n   )\n  )","user":"54965534e4b0b312c081ff65"},{"problem":44,"code":"(fn [arg1 arg2]\n      (flatten (reverse (split-at (mod  arg1 (count arg2) ) arg2))))","user":"5cb6256ce4b026601754b947"},{"code":"(fn foo [val coll]\n    (let [length (count coll)]\n      (cond\n       (neg? val) (foo (+ length val) coll)\n       (> val length) (foo (- val length) coll)\n       :else (->> (split-at val coll) (reduce (comp flatten (partial conj '())))))))","problem":44,"user":"5256c4c1e4b0541d1855ba36"},{"code":"#(let [z (mod % (count %2))]\n  (concat (drop z %2) (take z %2)))","problem":44,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn [n coll]\r\n  (let [c (count coll)\r\n        n (if (pos? n) n (+ c n))\r\n        n (mod n c)]\r\n    (concat (drop n coll) (take n coll))))","problem":44,"user":"4db87b3f535d1e037afb2196"},{"code":"(fn [n coll]\n          (cond\n            (zero? n) coll\n            (pos? n) (recur (dec n) (concat (rest coll) [(first coll)]))\n            :else (recur (inc n) (concat [(last coll)] (drop-last coll)))))","problem":44,"user":"4ebb20c0535dfed6da9c6d6f"},{"problem":44,"code":"(fn [cnt coll]\n  (let [n (rem (Math/abs cnt) (count coll))]\n    (if (pos? cnt)\n      (concat (drop n coll) (take n coll))\n      (concat (take-last n coll) (drop-last n coll)))))","user":"55deed82e4b050e68259b3e9"},{"problem":44,"code":"#(let [c (count %2)\n       s (if (> % 0) % (+ (rem % c) c))]\n      (take c (drop s (cycle %2)))\n   )","user":"57c7a8b5e4b05aa3c4741d09"},{"problem":44,"code":"#(nth (partition (count %2) 1 (cycle %2))\n      (mod %1 (count %2)))","user":"5aeca4c9e4b0cc2b61a3bc0a"},{"code":"(fn [n elts] \n  \t(apply concat (reverse (split-at (mod n (count elts)) elts)))\n)","problem":44,"user":"50fd9fd4e4b033b9c38d78d0"},{"problem":44,"code":"(fn [start coll]\n   (let [number (count coll)\n         start (first (for [n (iterate #(+ number %) start) :when (> n 0)] n))\n         start-col (drop start (cycle coll))\n         total (take number start-col)\n         ]\n     total))","user":"5a8e9a7ae4b05369db4d2528"},{"problem":44,"code":"#(let [o (mod (+ (count %2) %1) (count %2)) f (take o %2) b (drop o %2)] (concat b f))","user":"55b6a63ae4b01b9910ae299b"},{"problem":44,"code":"(fn [n c]\n  (->> c\n       (split-at (mod n (count c)))\n       (reverse)\n       (apply concat)))","user":"50eeeadae4b02c17778c91f3"},{"code":"(fn rotate-sequence [n s]\n  (let [rot-idx (rem n (count s))]\n  (if (>= n 0)\n    (concat (drop rot-idx s) (take rot-idx s))\n    (concat (take-last (- rot-idx) s) (drop-last (- rot-idx) s)))))","problem":44,"user":"521b339fe4b0c4ef0be83031"},{"problem":44,"code":"(fn [i xs]\n  (let [n (count xs)\n        j (rem i n)]\n    (if (pos? j)\n      (concat (drop j xs) (take j xs))\n      (let [k (- j)]\n        (concat (take-last k xs) (drop-last k xs))))))","user":"573d58c8e4b05c31a32c0811"},{"code":"(fn [n coll]\n  (let [size (count coll)\n        m (if (zero? size) 0 (mod n size))\n        p (if (< m 0) (+ m size) m)]\n    (concat (drop p coll) (take p coll))))","problem":44,"user":"52479487e4b05ef8e38e6373"},{"problem":44,"code":"#(let [c (count %2)\n       r (rem %1 c)\n       t (if (neg? r) (- c (Math/abs r)) r)]\n        (take c (drop t (cycle %2))))","user":"5b59d176e4b02d533a91bd86"},{"problem":44,"code":"#(-> (mod % (count %2)) (split-at %2) reverse flatten)","user":"54055aa9e4b0addc1aec6665"},{"problem":44,"code":"(fn [idx coll]\n  (let [num (count coll)\n        get-idx (fn get-idx [idx num]\n  \t\t\t\t\t(cond (and (>= num idx) (> idx 0)) idx\n        \t\t\t\t  (< num idx) (get-idx (- idx num) num)\n        \t\t\t\t  :else (get-idx (+ idx num) num)))\n        idx (get-idx idx num)]\n    (concat (take-last (- num idx) coll) (take idx coll))))","user":"568f2059e4b0dcc4269f40df"},{"code":"(fn [n s]\n  (let [len (count s)]\n  \t(take len (drop (mod n len) (cycle s)))))","problem":44,"user":"5025b93ce4b0c969f0b056df"},{"problem":44,"code":"(fn [idx s]\n  (let [r (atom idx) l (count s) s (vec s)]\n    (when (neg? @r)\n      (reset! r (+ l @r)))\n    (reset! r (mod @r l))\n    (concat (subvec s @r l) (subvec s 0 @r))))","user":"5dcd7933e4b0b296f82db5ae"},{"problem":44,"code":"#(let [x (mod % (count %2)) \n\t   [l r] (split-at x %2)] \n\t(concat r l))","user":"54187e84e4b01498b1a71a1b"},{"problem":44,"code":"(fn [c l] (let [r (mod c (count l))] (concat (drop r l) (take r l))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":44,"code":"(fn rotate [n xs]\n  (if (neg? n)\n    (rotate (+ (count xs) n) xs)\n    (concat (drop (mod n (count xs)) xs) (take (mod n (count xs)) xs))))","user":"5bcddaeee4b0e9689409ee07"},{"code":"#(nth (iterate (fn\n                 [[x & xs]]\n                 (conj (vec xs) x))\n               %2)\n      (mod % (count %2)))","problem":44,"user":"533018b2e4b019098a6f8b56"},{"problem":44,"code":"#(let [ln (count %2)] (->> %2 (cycle) (drop (mod %1 ln)) (take ln)))","user":"53fa3524e4b0de5c41848578"},{"problem":44,"code":"(fn rotate\n   [m c]\n   (let [n (count c)\n         c2 (apply vector (concat c c))\n         r (mod m n)]\n     (subvec c2 r (+ r n))))","user":"5808ee16e4b0a837a8b30d16"},{"problem":44,"code":"(fn rotate [n col]\n  (let [i (mod n (count col))]\n     (concat (drop i col) (take i col))))","user":"55afc197e4b002ce9d5cbc18"},{"code":"(fn myf [x coll]\n    (let [ct (count coll)\n          offset (if (< x 0)\n                   (- ct (mod (Math/abs x) ct))\n                   (mod x ct))]\n      (concat (drop offset coll) (take offset coll))))","problem":44,"user":"51195e77e4b055cfb310d499"},{"problem":44,"code":"(fn rotator [steps coll]\n  (if (zero? steps)\n    coll\n    (if (pos? steps)\n      (rotator (dec steps) (concat (rest coll) [(first coll)]))\n      (rotator (inc steps) (concat [(last coll)] (butlast coll))))))","user":"53fc88e7e4b0de5c418485be"},{"code":"(fn [c v]\n  (let [r (mod c (count v))]\n  (concat (drop r v) (take r v)))\n)","problem":44,"user":"4fcad14ce4b0ee37620e1856"},{"problem":44,"code":"#(let [n (mod %1 (count %2))](concat (nthnext %2 n) (take n %2)))","user":"5ed03b7fe4b016b56eae05ae"},{"problem":44,"code":"#(let [cnt (count %2)] (take cnt (nthrest (cycle %2) (+ (* 2 cnt) %1))))","user":"550e52dbe4b06e50f9beb165"},{"problem":44,"code":"(fn [n s]\n           (if (neg? n)\n             (loop [i n\n                    s (vec s)]\n               (if (zero? i)\n                 s\n                 (recur (inc i) (->> (butlast s) (cons (last s)) vec))))\n               (loop [i n\n                      s (vec s)]\n                 (if (zero? i)\n                   s\n                   (recur (dec i) (-> (rest s) vec (conj (first s))))))))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn [ x coll ]\n  (take (count coll)\n        (drop (mod x (count coll ) )\n              (flatten (repeat (+ (Math/abs x) 1) coll))))\n)","problem":44,"user":"528e1f30e4b0239c8a67aed4"},{"problem":44,"code":"(fn rotate-seq [rval coll]\n  (if (> (Math/abs rval) (count coll))\n    (if (pos? rval)\n      (concat (drop 1 coll) (list (first coll)))\n      (concat (list (last coll)) (butlast coll)))\n    (if (pos? rval)\n      (concat (drop rval coll) (take rval coll))\n      (concat (reverse (take (- rval) (reverse coll)))\n              (reverse (drop (- rval) (reverse coll)))))))","user":"567c7fefe4b05957ce8c61bc"},{"code":"(fn [n s]\n  (let [[a b] (split-at (mod n (count s)) s)]\n    (concat b a)))","problem":44,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":44,"code":"(fn [i xs]\n   (let [c (count xs)]\n     (->> (range c)\n          (map #(mod (+ i %) c))\n          (map #(nth xs %)))))","user":"511688d5e4b0b3e208dba05a"},{"problem":44,"code":"(fn rotate [n xs]\n (let [nn (rem (Math/abs n) (count xs))\n       backwards (> 0 n)\n       first-seq (if-not backwards (drop nn xs) (take-last nn xs))\n       last-seq (if-not backwards (take nn xs) (drop-last nn xs))]\n   (concat first-seq last-seq)))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":44,"code":"(fn [n xs]\n  (loop [xs xs n n]\n    (cond\n      (zero? n) xs\n      (pos? n)  (recur (concat (rest xs) [(first xs)]) (dec n))\n      (neg? n)  (recur (concat [(last xs)] (drop-last 1 xs)) (inc n)))))","user":"5590ebb1e4b0277789237677"},{"problem":44,"code":"(fn rot [n l]\n  (cond\n   (zero? n) l\n   (> n 0) (rot (dec n) (concat (rest l) [(first l)]))\n   :else (rot (inc n) (concat [(last l)] (drop-last l)))))","user":"5833a6d8e4b089d5ab817ca2"},{"problem":44,"code":"#(let [count_fn (if (>= %1 0) dec inc)]\n     (loop [counter %1\n            col %2]\n       (if (= 0 counter)\n         (reverse (into () col))\n         (recur (count_fn counter)\n                (if (>= %1 0)\n                  (conj (vec(rest col)) (first col))\n                  (cons (last col) (drop-last col)))))))","user":"57bf304de4b05aa3c4741c75"},{"problem":44,"code":"(fn rot [c l] (cond\n               (== c 0) l\n               (< c 0) (rot (inc c) (cons (last l) (butlast l)))\n               (> c 0) (rot (dec c) (concat (rest l) (vector (first l))))\n               ))","user":"57752a2de4b0979f89651613"},{"problem":44,"code":"(fn [n s]\n   (let [m (mod n (count s))]\n  (concat (drop m s)\n          (take m s))))","user":"55469eede4b0a04f79299542"},{"code":"#(let [x (mod %1 (count %2))]\n   (concat (drop x %2) (take x %2)))","problem":44,"user":"51e00020e4b01188f0627534"},{"problem":44,"code":"(fn [n s]\n  (let \n    [n (mod n (count s))]\n    (concat (drop n s) (take n s))))","user":"54e606c3e4b024c67c0cf803"},{"problem":44,"code":"(fn [n v] \n  (take (count v)(drop (mod n (count v)) (concat v v))) \n     )","user":"57750460e4b0979f8965160c"},{"code":"; The negatives are a cute trick here to throw you off, but once\n; I started writing these on paper I realized that the entire\n; key to this problem is calculating the normalized rotation count.\n\n(fn [x coll]\n  (let [rotation (mod x (count coll))]\n    (concat\n      (drop rotation coll)\n      (take rotation coll))))","problem":44,"user":"4eed26af535d93acb0a668bb"},{"code":"#(let [c (count %2)] \n   (take c \n         (drop (mod %1 c) \n               (cycle %2))))","problem":44,"user":"502952c9e4b0b33e9bf6fdf1"},{"problem":44,"code":"#(let [n (Math/abs (rem (+ (rem % (count %2)) (count %2)) (count %2)))]\n   (concat (take-last (- (count %2) n) %2) (take n %2)))","user":"56d1afd9e4b0ea9b8538f791"},{"problem":44,"code":"(fn [r lst] \n  (let [r (mod r (count lst))] \n    (reduce #(cons %2 %1) (take r lst) (reverse (drop r lst)))))","user":"53ff8c31e4b0de5c41848603"},{"problem":44,"code":"(fn [n s] \n  (->> (cycle s)\n\t(drop (mod n (count s)))\n    (take (count s))))","user":"57822efce4b0d36ec5835e91"},{"code":"(fn rotate [n l]\n  (if (= 0 n)\n      l\n      (if (< n 0)\n          (rotate (inc n) (cons (last l) (butlast l)))\n          (rotate (dec n) (concat (rest l) (list (first l)))))))","problem":44,"user":"4e568873535d8a8b8723a283"},{"code":"(fn [n seq] (flatten (reverse (split-at (mod n (count seq)) seq))))","problem":44,"user":"4ed55b5d535d10e5ff6f52d8"},{"problem":44,"code":"#(\n  if (> %1 0)\n  \n  (let [n (rem %1 (count %2))] (flatten(conj (take n %2)(drop n %2))))\n  (let [n (- (count %2)(rem (- %1) (count %2)))](flatten(conj (take n %2)(drop n %2))))\n  )","user":"60845eb8e4b0736b099e42ef"},{"code":"(fn [n s]\n  (let [offset (mod n (count s))\n        [begin end] (split-at offset s)]\n    (concat end begin)))","problem":44,"user":"51a3b135e4b0e77c4ca60bf6"},{"code":"(fn [n coll]\n  (concat \n    (last (split-at (mod n (count coll)) coll))\n    (first (split-at (mod n (count coll)) coll))))","problem":44,"user":"52c672e2e4b0c2d177d6210e"},{"code":"(fn [n seq]\r\n    (let [n (mod n (count seq))]\r\n      (concat (take-last (- (count seq) n) seq) (take n seq))))","problem":44,"user":"4df1e213535d08e6dec9fe20"},{"problem":44,"code":"(fn [n c]\n    (let [len (count c)]\n      (take len (drop (mod n len) (cycle c)))))","user":"54ca130ce4b057c6fda3a250"},{"problem":44,"code":"(fn [n s] \n  (let [ss (concat s s), i (mod n (count s))]\n    (take (count s) (drop i ss))\n))","user":"54524afbe4b0e397800069bc"},{"code":"(fn [n' q] (let [n (rem n' (count q))] (if (< 0 n) (concat (drop n q) (take n q)) (concat (drop (+ (count q) n) q) (take (+ (count q) n) q)))) )","problem":44,"user":"532e0b20e4b019098a6f8b45"},{"code":"(fn rotate [n l]\n    (let [m (mod n (count l))]\n      (concat (drop m l) (take m l))))","problem":44,"user":"534bde26e4b084c2834f4a81"},{"code":"#(let [p (mod % (count %2))] (concat (drop p %2) (take p %2)))","problem":44,"user":"4ee9ddb8535d93acb0a66896"},{"code":"#(let [r (fn [n s] (concat (drop n s) (take n s))) c (rem % (count %2))]\n  (if (> c 0) (r c %2) (reverse (r (* -1 c) (reverse %2)))))","problem":44,"user":"4efb87f7535dced4c769f279"},{"code":"(fn [n s]\n  (take (count s)\n  \t(if (> n 0)\n      (drop n (cycle s))\n      (concat (take-last (mod (- n) (count s)) s) (cycle s)))))","problem":44,"user":"52199105e4b0c4ef0be82ff9"},{"code":"#(flatten (reverse (split-at (mod (+ % (count %2)) (count %2)) %2)))","problem":44,"user":"50ec8d93e4b04edc3377704c"},{"problem":44,"code":"(fn [n coll] \n     (let [c (count coll)] \n       (take c (drop (mod n c) (cycle coll)))))","user":"5629de63e4b00e49c7cb4812"},{"code":"(fn rttr [n xs]\n  (->> xs\n       (split-at (mod n (count xs)))\n       (reverse)\n       (apply concat)))","problem":44,"user":"51b24defe4b02f8f128bb963"},{"code":"(fn [rotate coll]\n  (let [len (count coll)]\n    (map (fn [index] (nth coll (mod (+ index rotate) len))) (range len))))","problem":44,"user":"4fe8e771e4b0547ebccb2431"},{"problem":44,"code":"#(loop [n (mod %1 (count %2)) coll %2]\n   (if (= n 0)\n     coll\n     (recur (dec n) (conj (vec (rest coll)) (first coll)))\n    )\n)","user":"560fe558e4b05f002753df63"},{"code":"(fn [x c] (let [l (count c) s (mod x l)] (take l (drop s (flatten (repeat c))))))","problem":44,"user":"4da8dd6e30acd6ed12482a68"},{"problem":44,"code":"(fn func [n x]\n  (let [n (rem n (count x))\n        n (if (neg? n) (+ (count x) n) n)]\n    (concat (drop n x) (take n x))))","user":"5666c2dbe4b04acd4f672dc3"},{"code":"(fn [n coll]\n  (let [n' (mod n (count coll))]\n    (concat (drop n' coll) (take n' coll))) )","problem":44,"user":"5264383be4b03e8d9a4a70cb"},{"code":"(fn [n l] (concat (drop (mod n (count l)) l) (take (mod n (count l)) l)))","problem":44,"user":"5301a13ae4b0d8b024fd371e"},{"problem":44,"code":"(fn t [n v]\n (->>\n  (concat v v)\n  (drop (mod n (count v)))\n  (take (count v))\n))","user":"589b98fae4b00487982d533c"},{"problem":44,"code":"(fn [n sq]\n           (let [v (vec sq)\n                 len (count v)\n                 n_ (if (<= 0 n) n (+ len n))\n                 mid (mod n_ len)\n                 a (subvec v mid len)\n                 b (subvec v 0 mid)]\n             (concat a b)))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":44,"code":"(fn f [rot col]\n  (let [rot (rem rot (count col))]\n    (if (or (zero? rot) (pos? rot))\n      (concat (drop rot col) (take rot col))\n      (f (+ (count col) rot) col))))","user":"5ac91d90e4b0e27600da77bd"},{"problem":44,"code":"#(let [cnt (count %2)\n       n (rem % cnt)\n       n (if (pos? n) n (+ n cnt))]\n   (apply concat (reverse (split-at n %2))))","user":"56ff45e5e4b08d47c97781bb"},{"problem":44,"code":"(fn [pos coll] (\n   let[len (count coll) idx (mod pos len)]\n   (flatten (into (vector (drop idx coll)) (take idx coll)))\n   ))","user":"584f5133e4b0b7285a6f4e61"},{"code":"#((let [n (cond (neg? %) (+ (- %) 1) :else %) y (count %2)]   \n    (split-at n (take (+ n y) (cycle %2)))) 1)","problem":44,"user":"504e3aaae4b0f6ff3350c487"},{"code":"(fn [n l]\n  (let [rr (last (take (inc n) (iterate #(conj (vec (next %)) (first %)) l)))]\n    (if (neg? n) (recur (- (count l) (rem (- n) (count l))) l) rr)))","problem":44,"user":"52bf29fde4b07a9af579232e"},{"problem":44,"code":"(fn [n s] (let [n_new (mod n (count s))] (concat (drop n_new s) (take n_new s))))","user":"5710140fe4b09c608db7042e"},{"problem":44,"code":"#(\n let [l (count %2)\n        i (mod (+ l %1) l)]\n    (concat (drop i %2) (drop-last (- l i) %2) ) ;concat\n  )","user":"57ec8d1de4b0bfb2137f5b7f"},{"code":"#(let [m (rem % (count %2))] \n   (if (< m 0)\n   (concat\n    (drop (+ (count %2) m) %2)\n    (take (+ (count %2) m) %2))\n   (concat\n    (drop m %2)\n    (take m %2))))","problem":44,"user":"52d7a930e4b09f7907dd1379"},{"problem":44,"code":"(fn [shift clxn]\n   (let [full-shift (mod shift (count clxn))\n         svec (split-at full-shift clxn)]\n    (reduce merge (vec (second svec)) (vec (first svec)))))","user":"56e4a6c1e4b03a7c14b85a51"},{"problem":44,"code":"(fn rot [n xs]\n (let [n (mod n (count xs))]\n (if (>= n 0)\n  (concat (drop n xs) (take n xs))\n  (reverse (rot (- n) (reverse xs))))))","user":"59d4d126e4b0ef0a1e9b5be9"},{"code":"(fn [n xs]\n  (let [n (rem n (count xs))]\n    (let [parts (split-at (if (neg? n) (+ (count xs) n) n) xs)]\n      (concat (second parts) (first parts)))))","problem":44,"user":"4f0381db535dcb61093f6b02"},{"problem":44,"code":"{2 [3 4 5 1 2] -2[4 5 1 2 3]6[2 3 4 5 1]1[:b :c :a]-4[:c :a :b]}","user":"5c1c08cde4b01240ff567219"},{"problem":44,"code":"(fn [n sq]\n  (let [cnt (count sq)\n        drop-cnt (if (neg? n) (mod n cnt) n)]\n    (take cnt (drop drop-cnt (cycle sq)))))","user":"59074b7ce4b047aa04b19951"},{"code":"(fn [d s] (let [n (count s)] \n    (take n (drop (mod d n) (concat s s)))))","problem":44,"user":"514457fbe4b0b4fb4ace5f43"},{"code":"(fn r [n s]\n  (cond\n   (<= n 0) (r (+ (count s) n) s)\n   (> n (count s)) (r (- n (count s)) s)\n   (< n (count s)) (r (inc n) (conj (butlast s) (last s)))\n   :else s))","problem":44,"user":"5175533fe4b0dea9bbfba575"},{"code":"(fn [r s]\n  (let [rr (mod r (count s)) tail (drop rr s)]\n    (concat tail (take rr s))\n    )\n  )","problem":44,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn [i s]\n  (let [index (fn [i s]\n                (inc (mod i (count s))))]\n    (take (count s) (drop (dec (index i s)) (cycle s)))))","problem":44,"user":"5142e808e4b0c172af7558c9"},{"problem":44,"code":"(fn rotating [n colls]\n  (let [n (mod n (count colls))]\n      (concat (drop n colls) (take n colls))))","user":"5a67cedbe4b0512ff01cd9ee"},{"code":"(fn [r l]\n  (let [v (vec l)\n        len (count l)\n        tmpf (fn [n]\n                (cond \n                  (neg? n) (recur (+ len n))\n                  (> n len) (recur (- n len))\n                  :else n))\n        pos (tmpf r)]\n\n   (into (subvec v pos) (subvec v 0 pos))))","problem":44,"user":"4ec21058535dfed6da9c6dba"},{"problem":44,"code":"(fn [n coll]\n  (if (= n 0)\n      coll\n      (if (> n 0)\n          (recur (dec n) (concat (rest coll) (list (first coll))))\n          (recur (inc n) (concat (list (last coll)) (butlast coll))))))","user":"593e4b1fe4b069cdc2982bbb"},{"problem":44,"code":"#(let [x (count %2) y (mod % x)] (concat (drop y %2) (take y %2)))","user":"57609d91e4b08062f99a4e9b"},{"problem":44,"code":"(fn rotate [n v]\n   (->> (concat v v)\n        (drop (mod n (count v)))\n        (take (count v))\n        ))","user":"5ebc7c13e4b00a66d4a95267"},{"problem":44,"code":"(fn rotate [rot sq] \n        (let [c (count sq)]\n            (cond (> rot c) (rotate (- rot c) sq)\n                  (< rot 0) (rotate (+ c rot) sq)\n                  :else    (concat (drop rot sq) (take rot sq)))))","user":"59d4a160e4b0ef0a1e9b5be7"},{"problem":44,"code":"(fn [n s](map #(do %2) s (drop (mod n (count s))(cycle s))))","user":"5e042dede4b0a607a9a45d69"},{"code":"(fn [r seq]\n  (let [l (count seq)]\n    (loop [r r]\n      (if (pos? r)\n        (take l (drop r (cycle seq)))\n        (recur (+ l r))))))","problem":44,"user":"4ed98b40535d10e5ff6f5307"},{"code":"(fn [n x] (\n  if (> n 0)\n  (take (count x) (drop n (cycle x)))\n  (reverse (take (count x) (drop (- 0 n) (cycle (reverse x)))))\n))","problem":44,"user":"506b437de4b0eda3100c0906"},{"problem":44,"code":"(fn [n c] (let [l #(concat (next %) [(first %)])\n                 r #(concat [(last %)] (butlast %))]\n             (last (take (inc (Math/abs n)) (if (>= n 0)\n                        (iterate l c)\n                        (iterate r c))))))","user":"555c6344e4b0b056612e224c"},{"code":"(fn   \n  [n coll] \n  (let [x (mod n (count coll))] \n    (concat (drop x coll) (take x coll))))","problem":44,"user":"51804bcbe4b04f45bde7d901"},{"problem":44,"code":"(fn [x coll]\n  (let [idx (mod x (count coll))\n        [a b] (split-at idx coll)]\n    (concat b a)))","user":"54eea988e4b024c67c0cf875"},{"problem":44,"code":"#( if (> %1 0) \n           ( let [ct (mod %1 (count %2))]\n                  (concat (drop ct %2) (take ct %2)))\n           (  let [ ct ( mod (* %1 -1) (count %2))]\n                  ( concat (take-last ct %2) (drop-last ct %2))))","user":"57986b76e4b039eba2ecb116"},{"problem":44,"code":"(fn [r s]\n  (loop [c 0\n         r (mod r (count s))\n         rotated-seq []\n         e []]\n    (if (= c (count s))\n      (concat rotated-seq e)\n      (recur (inc c)\n             r\n             (if (< c r)\n                         rotated-seq\n                         (conj rotated-seq (nth s c)))\n             (if (>= c r)\n               e\n               (conj e (nth s c)))))))","user":"57d57f65e4b0bd073c2023b3"},{"problem":44,"code":"#(->> (cycle %2) (drop (mod % (count %2))) (take (count %2)))","user":"5d5166d9e4b0776584bd6f5e"},{"problem":44,"code":"(fn test [n coll]\n  (cond\n    (< n 0)\n      (test (+ n (count coll)) coll)\n    (>= n (count coll))\n      (test (mod n (count coll)) coll)\n    :else\n      (concat (take-last (- (count coll) n) coll) (take n coll))\n  )\n )","user":"54021f13e4b0df28a13c62cc"},{"code":"(fn [n s] \r\n  (let [n (rem (+ ( count s)(rem n (count s))) (count s))]\r\n     (doall (concat (drop n s) (take n s)))))","problem":44,"user":"4efd98fa535de96065cf5086"},{"problem":44,"code":"(fn exc [n coll] \n\t(let [exc-pos (mod n (count coll))]\n\t\t(concat (drop exc-pos coll) (take exc-pos coll))\n\t)\n)","user":"5edc16e1e4b0c7845d86b0f1"},{"problem":44,"code":"(fn\n  [n s]\n  (loop [s s\n         i 0]\n    (if (= i (- (count s) (mod n (count s))))\n      s\n      (recur (conj (butlast s) (last s)) (inc i)))))","user":"5ec02e20e4b00a66d4a95288"},{"code":"(fn [i s]\n  (let [c (count s)\n        ofs (mod i c)]\n    (->> (concat s s) (drop ofs) (take c))))","problem":44,"user":"4e7f32ee535db966e863cc3a"},{"code":"(fn rotate [n coll]\n  (let [amt (mod n (count coll))\n        [a b] (split-at amt coll)]\n    (concat b a)))","problem":44,"user":"4fb266a5e4b081705acca28c"},{"problem":44,"code":"(fn [n c]\n  (let [p (rem (+ (rem n (count c)) (count c)) (count c))]\n    (into (take p c) (reverse (drop p c)))))","user":"5481be5fe4b0e286459a1172"},{"problem":44,"code":"(fn rotate [n c]\n  (let [rn (mod (+ (count c) (mod n (count c))) (count c)) s (seq c)]\n    (concat (drop rn c) (take rn c))))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"#(take (count %2) (drop (+ (count %2) (rem % (count %2))) (cycle %2)))","problem":44,"user":"4fda108ee4b05e33b9224f46"},{"problem":44,"code":"(fn [n xs]\n  (let [n (mod n (count xs))]\n    (concat (drop n xs) (take n xs)) \n  )\n)","user":"5cb0f70ce4b026601754b8c1"},{"code":"(fn [n xs]\n  (let [m (mod n (count xs))]\n    (concat (drop m xs)\n            (take m xs))))","problem":44,"user":"4ee3b586535d10e5ff6f5371"},{"problem":44,"code":"#(mapcat seq (reverse (split-at (mod % (count %2)) %2)))","user":"51a058dae4b0b292b01ee3f3"},{"problem":44,"code":"(fn [n xs]\n (loop [\n        result xs\n        step n]\n   (prn result \" \" step )\n   (if (zero? step) result\n    (if (pos? step) \n     (recur (conj (vec (rest result)) (first result)) (dec step))\n     (recur (conj (butlast result) (last result)) (inc step))))))","user":"5c09e555e4b0bdcf453d16fd"},{"code":"(fn [n coll] (let [len (count coll)]\n               (take len (drop (mod n len) (cycle coll)))))","problem":44,"user":"51533ecde4b0252ac4b16619"},{"problem":44,"code":"#(for [i (range (count %2))] (nth %2 (mod (+ i % ) (count %2))))","user":"5156e767e4b04360f2428e6b"},{"problem":44,"code":"(fn my-rot\n           [times se]\n           (let [len (dec(count se))]\n             (if (= times 0)\n              se\n              (if (> times 0)\n                (my-rot (dec times) (concat (take-last len se) (list (first se))))\n                (my-rot (inc times) (cons (last se) (take len se)))))))","user":"5f5a2cc6e4b0a0bc16850aa4"},{"code":"(fn [n coll]\n  (let [c (count coll)]\n    (->> (concat coll coll)\n         (drop (mod n c))\n         (take c))))","problem":44,"user":"520612a7e4b0bf4f1882c81c"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)]\n\t  (take c (drop (mod n c) (cycle coll)))))","user":"5d45749be4b07c84aa5ae6a2"},{"problem":44,"code":"(fn [cnt lst]\n  (let [circle (if (pos? cnt)\n                 (fn [ls] (conj (into [] (rest ls)) (first ls)))\n                 (fn [ls] (conj (butlast ls) (last ls))))\n        op (if (pos? cnt) dec inc)\n        col (if (pos? cnt) (into [] lst) (into '() (reverse lst)))]\n    (loop [x cnt\n           cl col]\n      (if (= 0 x)\n        (seq cl)\n        (recur  (op x) (circle cl))))))","user":"608e5697e4b03bd49d9f36be"},{"problem":44,"code":"(fn [x coll]\n  (let [new-x (if (> (Math/abs x) (count coll)) (- (Math/abs x) (count coll)) (Math/abs x))\n        coll (if (neg? x) (reverse coll) coll)\n        res (concat (drop new-x coll) (take new-x coll))]\n    (if (neg? x) (reverse res) res)))","user":"516c3472e4b06f078fab251c"},{"code":"(fn [n xs]\n  (let [xs-cnt (count xs)\n        xs' (into [] xs)]\n    (map #(get xs' (mod % xs-cnt))\n         (range n (+ n xs-cnt)))))","problem":44,"user":"521d064fe4b0c4ef0be830a8"},{"problem":44,"code":"#(take (count %2) (drop (if (< 0 %1) %1 (+ (* (max %1 (- %1)) (count %2)) %1)) (cycle %2)))","user":"5700f1f0e4b08d47c97781ce"},{"problem":44,"code":"(fn [times coll]\n  (map second (sort-by first \n           (map-indexed \n            (fn [idx el]\n              [(mod (- idx times) (count coll)) el])\n            coll))))","user":"55380eeae4b09218d5f44fd9"},{"problem":44,"code":"(fn [n s] (let [c (count s)]\n   (take c (drop (mod n c) (cycle s)))))","user":"5ff93da9e4b06df49cee14af"},{"problem":44,"code":"(fn [s xs] (let [c (count xs) s (rem (+ (rem s c) c) c)] (->> (concat xs xs) (drop s) (take c))))","user":"54c641f8e4b045293a27f628"},{"problem":44,"code":"(fn func-44 [n s]\n    (let [n (mod n (count s))]\n      (concat (drop n s) (take n s))))","user":"56c1e720e4b0839206b9d68b"},{"problem":44,"code":"(fn [offset coll]\n  (if (> offset 0)\n    (loop [o offset c coll]\n      (if (= 0 o)\n        c\n        (recur (- o 1) (concat (rest c) [(first c)]))))\n    (loop [o offset c coll]\n      (if (= 0 o)\n        c\n        (recur (inc o) (cons (last c) (butlast c)))))))","user":"5cbb0436e4b026601754b9cc"},{"code":"(fn [i xs] (let [o (mod i (count xs))] (concat (drop o xs) (take o xs))))","problem":44,"user":"51307b84e4b08c712d3fae39"},{"code":"(fn [r lat] \n  (let [tR (+ (* 2 (count lat)) r)] \n    (take (count lat) (nthnext (cycle lat) tR))\n  )\n)","problem":44,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn rotate [distance x]\n\t(let [sign (/ distance (Math/abs distance))\n          fixed-distance (mod (Math/abs distance) (count x))\n          rest-distance (- (count x) fixed-distance)]\n        (if (> 0 sign)\n          (concat (drop rest-distance x) (drop-last fixed-distance x))\n          (concat (drop fixed-distance x) (drop-last rest-distance x)) \n        )\n    )\n)","problem":44,"user":"5303a027e4b0d8b024fd3745"},{"problem":44,"code":"(fn [n coll] \n  (let [dir\n        (/ n n)\n        cnt\n        (if (pos? n) n (- 1 n))\n        shift\n        (fn [coll] \n          (if (pos? dir)\n            (concat (rest coll) (vector (first coll)))\n            (concat (vector (last coll)) (butlast coll))))\n        shift-n\n        (fn shift-n [coll, n]\n          (if (zero? n)\n            coll\n            (shift-n (shift coll) (- n 1))))]\n    (shift-n coll cnt)))","user":"57fdd1cfe4b0d3187e9009bf"},{"problem":44,"code":"(fn [n sq]\n  (let [sqnum (count sq)\n        modn (mod n sqnum)]\n    (->> sq\n         (split-at (if (neg? modn) (+ sqnum modn) modn) ,,,)\n         reverse ,,,\n         flatten ,,,)))","user":"540c54a7e4b0addc1aec6700"},{"code":"(fn[n s]\n   (let [len (count s)]\n     (loop [shifted [], y n]\n       (if (= (count shifted) len)\n         shifted\n         (let [pos (rem y len)]\n           (recur (conj shifted (nth s (if (>= pos 0) pos (+ len pos)))) (inc y))\n          )))))","problem":44,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn rot [n L]\n  (cond (= 0 n) L\n        (neg? n) (rot (inc n) (concat [(last L)] (butlast L)))\n        :else    (rot (dec n) (concat (rest L) [(first L)]))))","problem":44,"user":"52153bdde4b0961f15ac4daa"},{"problem":44,"code":"(fn [r s] \n  (let [r-actual (rem r (count s))]\n    (if (>= r-actual 0)\n      (apply concat (reverse (split-at r-actual s)))\n      (mapcat reverse (split-at (Math/abs r-actual) (reverse s))))))","user":"59e5b6a1e4b08badc2a0c55b"},{"code":"(fn [pos s]\n          (map (fn [i] (nth s (mod (+ pos i) (count s))))\n               (range (count s))))","problem":44,"user":"4ee26f01535d10e5ff6f5368"},{"problem":44,"code":"(fn [n l]\n  (let [c (rem n (count l))\n        d (+ (count l) c)]\n  (if (>= n 0) (concat (drop c l) (take c l))\n    (concat (drop d l)\n            (take d l)))))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"(fn [n x]\n  (let [c (count x) i (mod (+ n c) c)]\n    (concat  (drop i x) (take i x) )))","problem":44,"user":"52f4fae4e4b05e3f0be25f27"},{"code":"(fn [n col]\r\n  (cond \r\n    (< n 0)\r\n      (recur (+ (count col) n) col)\r\n    (> n (count col))\r\n      (recur (rem n (count col)) col)\r\n    :else\r\n    (concat (drop n col) (take n col))))","problem":44,"user":"50bfe725e4b080409b860f26"},{"problem":44,"code":"(fn [n coll]\n  (cond\n\n    (and (pos? n) (< n (count coll)))\n    (flatten (reverse (split-at n coll)))\n\n    (and (pos? n) (> n (count coll)))\n    (flatten (reverse (split-at (- n (count coll)) coll)))\n\n    (and (neg? n) (< (* -1 n) (count coll)))\n    (flatten (reverse (split-at\n                        (- (count coll) (* -1 n)) coll)))\n\n    (and (neg? n) (> (* -1 n) (count coll)))\n    (flatten (reverse (split-at\n                        (- (count coll) (- (* -1 n) (count coll))) coll)))))","user":"5a03d246e4b01bb0ae8afd8c"},{"code":"(fn [n s] (let [len  (count s)\n                skip (if (neg? n) (- len (rem (Math/abs n) len)) n)]\n            (take len (drop skip (apply concat (repeat s))))))","problem":44,"user":"516db4f6e4b046df6fbb76a0"},{"problem":44,"code":"(fn [r S] (let [s (mod r (count S))] (concat (drop s S) (take s S))))","user":"55f6fe09e4b06e875b46cea2"},{"problem":44,"code":"(fn [nn l] (let [n (mod (if (> nn -1) nn (+ (count l) nn)) (count l))] (concat (nthnext l n) (take n l))))","user":"585be055e4b0f14aab7c8775"},{"code":"(fn [n s]\n\t(let [[l r] (split-at (mod n (count s)) s)]\n\t\t(concat r l)))","problem":44,"user":"51bdc609e4b0ff155d51d2b3"},{"problem":44,"code":"#(take\n    (count %2)\n    (drop (mod %1 (count %2)) (cycle %2)))","user":"5eecf110e4b07c55ae4a050b"},{"problem":44,"code":"(fn [n v]\n  (let [cnt (mod n (count v))\n        head (take cnt v)\n        tail (drop cnt v)]\n    (concat tail head)\n  )\n)","user":"53f7820be4b0de5c41848560"},{"problem":44,"code":"#(let [c (count %2)]\n   (if (pos? %1)\n     (take c (drop %1 (apply concat (repeat %2))))\n     (reverse (take c (drop (Math/abs %1) (apply concat (repeat (reverse %2))))))))","user":"51456858e4b0e88796073408"},{"problem":44,"code":"(fn rotate-left [n lst]\n  (cond\n    (>= n 0) (drop n (take (+ n (count lst)) (cycle lst)))\n    :else (drop (- (count lst) (mod (* n -1) (count lst)))\n                (take (- (* 2 (count lst)) (mod (* n -1) (count lst))) (cycle lst)))))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"(fn rotate                                        \n  [at coll]                                         \n  (let [size (count coll)                           \n        m    (mod at size)                          \n        parts (split-at m coll)]                    \n    (concat (second parts) (first parts))))","problem":44,"user":"50573ed8e4b0012181721987"},{"code":"(fn rotate-seq [n xs]\n  (cond (empty? xs) xs\n        true (let [m (mod n (count xs))]\n               (concat (drop m xs) (take m xs)))))","problem":44,"user":"4ef6f5ea535dced4c769f250"},{"problem":44,"code":"(fn [n xs] \n   (let [xs (vec xs)\n         n (mod n (count xs))]\n     (concat \n      (subvec xs n)\n      (subvec xs 0 n))))","user":"52eb2ec9e4b0705949c44439"},{"code":"#(let [n (mod % (count %2))]\n   (cond\n    (neg? n) (concat (take-last (- n) %2) (drop-last (- n) %2))\n    :else (concat (drop n %2) (take n %2))))","problem":44,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"#(let [rot (mod %1 (. %2 size))\n       abs (mod (* -1 %1) (. %2 size))]\n   (if (> %1 0)\n     (concat (drop rot %2) (take rot %2))\n     (concat (take-last abs %2) (drop-last abs %2))))","problem":44,"user":"51bb970be4b0fe3ecfb4644e"},{"code":"(fn [n xs]\n  (let [rn (mod n (count xs))]\n    (concat (drop rn xs) (take rn xs))))","problem":44,"user":"4fccb31be4b0ee37620e1868"},{"problem":44,"code":"(fn [n coll]\n    (take (count coll) (drop (mod n (count coll)) (cycle coll)))\n    )","user":"58ec1e63e4b056aecfd47d54"},{"code":"(fn [x coll]\n (last (take\n   (inc (java.lang.Math/abs x))\n   (iterate\n    (if (neg? x)\n  \t  #(cons (last %) (butlast %))\n  \t  #(concat (rest %) [(first %)]))\n    coll))))","problem":44,"user":"52525a0ee4b0541d1855b8a2"},{"problem":44,"code":"(fn [v coll]\n  (let [forward (if (pos? v) v (- (count coll) v -1))]\n    (->> (cycle coll)\n         (drop forward)\n         (take (count coll)))))","user":"5e8ce2fee4b0cb0169546328"},{"code":"(fn rotate-seq [idx s]\n  (let [split (mod idx (count s))\n        [fst snd] (split-at split s)]\n    (concat snd fst)))","problem":44,"user":"50763574e4b0a894bb95bf3d"},{"problem":44,"code":"#(-> (let [size (count %2) offset (rem %1 size)] \n       (if (neg? offset) \n         (+ size offset)\n         offset)) \n     (split-at %2)\n     reverse\n     flatten)","user":"5cdd934ce4b05ee0cb311761"},{"problem":44,"code":"#(let [len (count %2)\n       at (if (neg? %1)\n            (loop [x %1] (if (neg? x) (recur (+ len x)) x))\n            (loop [x %1] (if (> x len) (recur (- x len)) x)))\n       [s,e] (split-at at %2)]\n   (concat e s))","user":"58923efce4b00487982d521c"},{"problem":44,"code":"(fn [x s] \n  (let [v (into [] s)]\n  (loop [index 0 acc v]\n    (if (= index (count v))\n      acc\n      (recur (inc index) (assoc acc (mod (+ index (* x -1)) (count v)) (v index)))))))","user":"56798d83e4b05957ce8c618b"},{"problem":44,"code":"(fn rotate [n col]\n  (let [step (mod n (count col))]\n    (concat (drop step col) (take step col))))","user":"602372aae4b0d5df2af2220f"},{"problem":44,"code":"(fn rotate [n coll]\n  (loop [n (mod n (count coll))\n         coll coll]\n    (if (zero? n) coll\n        (recur (dec n) (flatten (conj (vector (rest coll)) (first coll)))))))","user":"54ae541ae4b09f271ff37cef"},{"problem":44,"code":"(fn[i s] \n  (let [ai (mod i (count s))\n        as (if ( > 0 ai) (reverse s) s)\n        h (take ai as)\n        t (drop ai as)]\n    (concat t h)))","user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn rot [n c] \n      (let [i (mod n (count c))]\n        (concat (subvec (vec c) i) (subvec (vec c) 0 i)) ))","problem":44,"user":"4e9b22e2535dbda64a6f6b74"},{"problem":44,"code":"(fn [x coll]\n  (let [n (count coll)\n        shift (mod (+ x n) n)]\n    (take (count coll) (drop shift (cycle coll)))))","user":"54ad4863e4b09f271ff37ce0"},{"problem":44,"code":"(fn [rotate-by collection]\n (let [size (count collection)\n       distance (mod rotate-by size)]\n  (drop distance\n       (take (+ distance size) (cycle collection)))))","user":"5ce5b43be4b0a17bb84e2b7a"},{"code":"(fn [c s] (take (count s) (drop (mod c (count s)) (concat s s))))","problem":44,"user":"50956c2be4b087f34d351ab2"},{"problem":44,"code":"(fn rot\n  [x xs]\n  (let [n (mod x (count xs))] \n    (if (> n 0)\n      (concat (drop n xs) (take n xs))\n      (concat (drop (+ (count xs) n) xs) (take (+ (count xs) n)  xs))))\n)","user":"5b9da7fbe4b0c0b3ffbd4b3f"},{"code":"(fn [n l]\r\n  (let [neg (neg? n)\r\n        n'(if neg (- n) n)\r\n        f (if neg\r\n            #(cons (last %) (butlast %))\r\n            #(concat (rest %) (list (first %))))]\r\n    (nth (iterate f l) n')))","problem":44,"user":"509c03f3e4b085ae113522a8"},{"problem":44,"code":"(fn rs [n xs]\n  (if (neg? n)\n    (let [len (count xs)\n          absn (* -1 n)\n          nx  (- len (mod absn len))]\n    (concat (drop nx xs) (take nx xs)))\n    \n    (let [len (count xs)\n          nx  (mod n len)]\n    (concat (drop nx xs) (take nx xs)))))","user":"5619a4d0e4b053970a773afd"},{"code":"(fn rot [n s]\r\n  (if (zero? n)\r\n    s\r\n    (if (> n 0)\r\n      (rot (dec n) (conj (vec (rest s)) (first s)))\r\n      (rot (inc n) (cons (last s) (butlast s))))))","problem":44,"user":"4fc50441e4b081705acca36f"},{"problem":44,"code":"(fn f [i seq]\n  (cond (< i 0) (f (inc i) (concat (take-last 1 seq) (drop-last 1 seq)))\n        (> i 0) (f (dec i) (concat (rest seq) (take 1 seq)))\n        :else seq))","user":"5db92996e4b010eb3c36cd50"},{"problem":44,"code":"#(let [i (mod %1 (count %2))]\n   (concat (drop i %2) (take i %2)))","user":"568d381ee4b0dcc4269f40c1"},{"code":"#(let [c (count %2)]\n    (take c (drop (mod %1 c) (cycle %2))))","problem":44,"user":"50c6fad1e4b00bb60fe0c52d"},{"code":"#(reduce concat (reverse(split-at (mod %1 (count %2)) %2)))","problem":44,"user":"5296008fe4b02ebb4ef7502a"},{"problem":44,"code":"(fn [n xs]\n  (let [xs (vec xs)]\n    (if (= n 0)\n    xs\n    (if (> 0 n)\n      (recur (inc n) (cons (last xs) (butlast xs)))\n      (recur (dec n) (conj (vec (rest xs)) (first xs)))))))","user":"5f5e7158e4b02876ed9fcff0"},{"code":"(fn f [m a] \n  (let [n (mod (+ (count a) m) (count a))] \n    (concat (drop n a) (take n a))))","problem":44,"user":"528652fbe4b0239c8a67ae14"},{"code":"(fn [n x]\r\n  (let [cnt (count x),\r\n  m (if (< n 0) (+ cnt (rem n cnt)) n)]\r\n    (take (count x) (drop m (flatten (repeat x))))))","problem":44,"user":"4ee9d697535d93acb0a66895"},{"problem":44,"code":"(fn [n coll] (let [m (count coll) a (Math/abs n) r (rem a m)]\n                        (cond\n                          (and (> n 0) (< a m)) (concat (drop n coll) (take (- m n 1) coll))\n                          (and (> n 0) (> a m)) (concat (drop r coll) (take r coll))\n                          (and (< n 0) (< a m)) (concat (drop (- m a) coll) (take (- m a) coll))\n                          :else (concat (drop (- m r) coll) (take (- m r) coll)))))","user":"57f3b841e4b0511f1d294e0f"},{"code":"(fn rot [n coll]\n  (take (count coll)\n        (nthrest (cycle coll) (mod n (count coll))\n                 )\n        )\n  )","problem":44,"user":"5228f870e4b0186687e23a98"},{"problem":44,"code":"(fn [n s] \n  (let [amount (mod n (count s))]\n    (concat (drop amount s) (take amount s) )))","user":"54febf4be4b07d26eda61d45"},{"problem":44,"code":"(fn [n coll]\n  (let [offset (mod n (count coll))]\n        (concat (drop offset coll) (take offset coll))))","user":"5c58736be4b01df32ab73247"},{"problem":44,"code":"#(apply concat (reverse (split-at (if (> %1 0) (if (> %1 (count %2)) (- %1 (count %2)) %1) (if (<= (- (count %2)) %1) (+ (count %2) %1)\n                                                                                             (+ (* 2 (count %2)) %1))) %2)))","user":"5683d2a9e4b0945ebc182aa0"},{"problem":44,"code":"(fn rotate [n coll]\n\n  (let [C (count coll)\n\n        f (fn [n] (mod n C))\n\n        indexed (zipmap (range) coll)]\n\n    (map\n\n      #(get indexed (f %))\n\n      (range n (+ n C)))))","user":"5779556de4b0979f8965166e"},{"problem":44,"code":"(fn f [n s] \n  (let [n* (rem n (count s))] \n    (if (pos? n*) \n      (concat \n          (drop n* s) \n          (take n* s)\n      ) \n      (concat \n          (take-last \n          (unchecked-negate n*) s) \n          (drop-last \n          (unchecked-negate n*) s)\n      ) \n    )\n  )\n)","user":"5f631e11e4b02876ed9fd011"},{"problem":44,"code":"(fn rotate [n s]\n  (let [n_abs (max n (- 0 n))\n        r (rem n_abs (count s))\n        shift (if (pos? n) r (- (count s) r))]\n         (concat (drop shift s)(take shift s))\n    )\n)","user":"561eb82fe4b064ca9f4b16c7"},{"code":"(fn [i s]\n  (let [x (mod (+ (count s) i) (count s))]\n    (concat (nthrest s x) (take x s))))","problem":44,"user":"4ec53f8c535d6d7199dd368b"},{"problem":44,"code":"(fn rotate\n   [n s]\n   (let [delta (mod n (count s))\n         mvmt  (if (pos? delta) delta (+ delta (count s)))]           \n     (concat (drop mvmt s) (take mvmt s))))","user":"545e9cf1e4b01be26fd7467f"},{"code":"#(let [rr (mod % (count %2))]\n   (concat (nthnext %2 rr) (take rr %2)))","problem":44,"user":"513b43ede4b067e25a345ed3"},{"code":"#(let [[a b] (split-at (mod %1 (count %2)) %2)]\n  (concat b a))","problem":44,"user":"4ead6418535d7eef3080731f"},{"problem":44,"code":"(fn [idx coll]\n   (->> (iterate (fn [[a & d]]\n                   (if (pos? idx) \n                     (flatten [d a])\n                     (let [l (last d)\n                           d2 (butlast d)] \n                       (flatten [l a d2])))) coll)\n     (take (inc (Math/abs idx)))\n     last))","user":"51bd255ce4b0df1216cefd94"},{"problem":44,"code":"(fn [n s]\n  (let [turns (mod n (count s))]\n    (concat (drop turns s) (take turns s))))","user":"5776f39de4b0979f89651643"},{"problem":44,"code":"#(let[number_of (count %2) lead_in (+ (* number_of (Math/abs %1)) %1)] (take number_of (drop lead_in (cycle %2))))","user":"51671557e4b013fc800656c4"},{"problem":44,"code":"(fn [x lst]\n  (let [m (mod x (count lst))]\n    (concat (drop m lst) (take m lst))\n    )\n  )","user":"5a2e80fde4b09cafd31c7f7d"},{"problem":44,"code":"(fn [offset coll]\n  (let [shift (if (> 0 offset)\n                (+ (mod offset (count coll)) (count coll))\n                offset)]\n    (take (count coll) (drop shift (cycle coll)))))","user":"54012b48e4b0de5c41848620"},{"problem":44,"code":"(fn [n coll] \n  (let [k (mod n (count coll))\n        nn (if (neg? k) \n          (+ k (count coll)) \n          k)] \n    (concat (drop nn coll) (take nn coll))))","user":"50856bd1e4b004985b776e4c"},{"code":"(fn [n coll]\n  (let [l (count coll)]\n    (map-indexed\n     (fn [idx _] (nth coll (mod (+ idx n) l)))\n     coll)))","problem":44,"user":"4ea5ba92535d7eef308072d9"},{"problem":44,"code":"#(let [places (mod % (count %2))]\n    (if (pos? places)\n      (concat (drop places %2)\n              (take places %2))\n      (concat (take places %2)\n              (drop places %2))))","user":"5f37263de4b0574c87022c4e"},{"code":"#(let [n (mod %1 (count %2))]\n    (concat (drop n %2) (take n %2)))","problem":44,"user":"504ed350e4b069badc5a33d1"},{"code":"(fn [n l] (\n           (fn f [n l]\n             (if (= n 0)\n               l\n               (f (- n 1) (cons (last l) (butlast l) ))\n             )\n           )\n           (mod (* -1 n) (count l)) l \n          )\n)","problem":44,"user":"5349ac2be4b084c2834f4a67"},{"problem":44,"code":"(fn [rot arr] (let [n (mod rot (count arr))] (concat (drop n arr) (take n arr))))","user":"55eca2b7e4b0121d4835fdca"},{"problem":44,"code":"(fn [n l] (let [rotation (mod n (count l))] (concat (drop rotation l) (take rotation l))))","user":"540904a7e4b0addc1aec66d2"},{"problem":44,"code":"(fn rot [n c]\n  (let [k (count c)\n        ni (mod n k)] \n  (if (>= n 0)\n    (concat (drop ni c) (take ni c))\n    (rot (+ k n) c)\n    )\n  )\n  )","user":"561e8b11e4b064ca9f4b16c0"},{"problem":44,"code":"(fn shift [xsteps coll]\n  (let [xrem (rem xsteps (count coll))]\n    (if (neg? xrem)      \n      (concat (drop (+ xrem (count coll)) coll) (take (+ xrem (count coll)) coll))\n      (concat (drop xrem coll) (take xrem coll)))))","user":"57131dfbe4b07c98581c3a98"},{"problem":44,"code":"(fn rot\n  [n s]\n  (let [n (mod n (count s))]\n    (concat (drop n s) (take n s))))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":44,"code":"(fn rotate [n l]\n  (let [k (mod n (count l))]\n    (concat (drop k l)\n            (take k l))))","user":"54857e3be4b0e286459a11ad"},{"code":"(fn [n l]\n  (let [ntimes (if (neg? n) (- 0 n) n)\n        right (fn [l] (concat (rest l) [(first l)]))\n        left (fn [l] (cons (last l) (drop-last l)))]\n    ((apply comp (repeat ntimes (if (pos? n) right left))) l)))","problem":44,"user":"51631002e4b017b283c712c1"},{"problem":44,"code":"(fn [n xs] (let [n (mod n (count xs))] (take (count xs) (drop n (cycle xs)))))","user":"55dc2ad1e4b050e68259b3ac"},{"problem":44,"code":"(fn [n col]\n  (let [l (if (pos? n) (-> col reverse sequence) (-> col sequence))]\n    (loop [n1 (if (pos? n) (- n) n)\n           l1 l]\n      (if (zero? n1)\n        (if (pos? n) (reverse l1) l1)\n        (recur (inc n1) (conj (butlast l1) (last l1)))))))","user":"56df254be4b0ca2494a095ea"},{"problem":44,"code":"#(let [i (mod %1 (count %2))]\n    ((comp flatten reverse (partial split-at i)) %2))","user":"5b77248ae4b047b03b2036e7"},{"problem":44,"code":"(fn [n coll]\n  (let [c (count coll)\n        n' (mod (if (< n 0) (+ c n) n) c)]\n    (concat (drop n' coll) (take n' coll))))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":44,"code":"#(if (pos? %1) (take (count %2) (drop %1 (cycle %2)))(take (count %2) (drop (+ (* (- %1) (count %2)) %1) (cycle %2)) ))","user":"566a3a26e4b0a866af689699"},{"code":"(fn rotate [n sq] \n  (if (= n 0) sq\n     (if (> n 0)\n         (rotate (- n 1) \n                 (concat (rest sq) (list (first sq))))\n         (rotate (+ n (count sq)) sq))))","problem":44,"user":"504e108ce4b078edc5f593b3"},{"problem":44,"code":"(fn rotate [amount coll]\n\t(let [size (count coll)]\n  (take-last size (take (+ (mod amount size) (* 2 size)) (cycle coll)))\n  ))","user":"552689cfe4b0ffed3738f91e"},{"problem":44,"code":"#(let [ b (mod % (count %2))] (concat (nthrest %2 b) (take b %2)))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":44,"code":";;; #(reduce (fn [res _] ((fn [sqsq] (concat (rest sqsq) [(first sqsq)])) res)) %2 (range (mod % (count %2))))\n#(let [rotate-left-by (mod % (count %2))] (concat (drop rotate-left-by %2) (take rotate-left-by %2)))","user":"54ad9d76e4b09f271ff37ce6"},{"code":"(fn [n coll] (letfn [(rs [n coll] (#((comp flatten cons) (rest %) (first %)) (partition-all (if (< (count coll) n) (- n (count coll)) n) coll)))] (if (> n 0) (rs n coll) (reverse (rs (* n -1) (reverse coll))))))","problem":44,"user":"4e944706535dbda64a6f6b11"},{"problem":44,"code":"(fn rotate [s coll]\n  (let [c (count coll)\n        n (if (> (Math/abs s) c)\n            (mod s c)\n            s\n            )\n        ]\n    (cond\n      (> n 0) (concat (take-last (- c n) coll) (take n coll))\n      (< n 0) (concat (take-last (- n) coll) (take (+ n c) coll))\n      ))\n  )","user":"58f3a2d4e4b0438e51c2ceac"},{"problem":44,"code":"(fn rotate-seq [n l]\n  (loop [i n s l]\n    (if (= i 0)\n      s\n      (if (< 0 n)\n        (recur (dec i)\n               (concat (rest s) [(first s)]))\n        (recur (inc i)\n               (conj (drop-last s) (last s)))))))","user":"5018878ce4b029375d2a5056"},{"problem":44,"code":"(fn\n  [n coll]\n  (let [x (mod n (count coll))]\n    (concat (drop x coll) (take x coll))))","user":"5a90395ce4b05369db4d254a"},{"code":"(fn [c l]\n  (let [s (split-at (mod c (count l)) l)]\n       (concat (last s) (first s))))","problem":44,"user":"4e5d1912535d8a8b8723a2c9"},{"problem":44,"code":"#(apply concat (reverse (split-at (if (> % -1) (mod % (count %2)) (- (count %2) (mod (dec %) (count %2)))) %2)))","user":"53f035c2e4b0742d9025b0d2"},{"problem":44,"code":"(fn [n s]\n    (let [l (mod n (count s)) sv (vec s)]\n    \t(concat (subvec sv l) (take l sv)))  \n)","user":"5559b443e4b0deb715856e3c"},{"problem":44,"code":"(fn rotate-seq [x n]\n     (let\n       [c (count n)]\n       (take\n         c\n         (drop (mod x c) (cycle n) ))))","user":"594ea2a4e4b07ddc2dafaeb6"},{"code":"#(let [n (count %2)] (take n (drop (mod %1 n) (concat %2 %2))))","problem":44,"user":"4feada56e4b0140c20fb9c11"},{"problem":44,"code":";(fn [x y](concat(drop(mod x (count y)) y)(take (mod x(count y))y)))\n(fn rotate [n v]\n  (->> (concat v v)\n       (drop (mod n (count v)))\n       (take (count v))\n      ))","user":"580d7e53e4b0849f6811b73e"},{"code":"(fn [n coll] (let [i (if (< n 0) (+ (count coll) (rem n (count coll))) (rem n (count coll)))] (concat (drop i coll) (take i coll))))","problem":44,"user":"4e6fa38b535d5021c1a89622"},{"problem":44,"code":"(fn [n arg]\n  (loop [index 0\n         result []]\n    (if (< index (count arg))\n      (recur (inc index)\n             (conj\n               result\n               (nth arg (rem\n                          (+ (+ (count arg) \n                                (if (< n 0)\n                                  (- (rem (- n) (count arg)))\n                                  (rem n (count arg))\n                                  )\n                                ) index)\n                          (count arg))))\n\n             )\n      result\n      )\n    )\n  )","user":"5dd1fb19e4b0948ae9d9ad51"},{"problem":44,"code":"(fn rot [n col] ( concat (drop (mod n (count col)) col) (take (mod n (count col)) col)))","user":"58866b4fe4b0f1effa3b76d4"},{"problem":44,"code":"(fn rot [n coll]\n  (cond\n    (zero? n)\n    coll\n\n    (> n 0)\n    (rot (dec n) (concat (rest coll)\n                         (vector (first coll))))\n\n    :else\n    (rot (inc n) (cons (last coll)\n                       (butlast coll)))))","user":"52470d42e4b05ef8e38e6350"},{"code":"(fn rotate [n coll]\n  (let [len (count coll)]\n    (cond (neg? n) (recur (+ n len) coll)\n          (> n len) (recur (- n len) coll)\n          :else (concat (nthrest coll n) (take n coll)))))","problem":44,"user":"52ab6de1e4b0c58976d9ac78"},{"problem":44,"code":"(fn shift [factor s]\n  (let [actual (rem factor (count s))\n        res []]\n    (cond\n      (zero? actual) s\n      (> actual 0)\n      (let [rot (take actual s)\n            core (take-last (- (count s) actual) s)]\n        (concat core rot))\n      (< actual 0)\n      (let [rot (take-last (* actual -1) s)\n            core (take (- (count s) (* actual -1)) s)]\n        (concat rot core)))))","user":"609e9b64e4b00e9e6653c426"},{"problem":44,"code":"#(if (= 0 %1)\n   %2\n   (if (> %1 0)\n     (recur (dec %1) (conj (vec (rest %2)) (first %2)))\n     (recur (inc %1) (cons (last %2) (butlast %2)))))","user":"5c13ce5ee4b01240ff5671a4"},{"problem":44,"code":"(fn [n sq]\n  (let [m (mod n (count sq))]\n  (concat (drop m sq) (drop-last (- (count sq) m) sq))))","user":"538e864ee4b0b51d73faae87"},{"problem":44,"code":"(fn p441 [rot seq]\n  (let [length (count seq)\n        start (mod rot length)\n        superseq (-> seq repeat flatten)]\n    (take length (nthrest superseq start))\n    )\n  )","user":"53b0750fe4b047364c044483"},{"code":"(fn rotate\n  [n coll]\n  (let [shift (mod (+ n (count coll)) (count coll))]\n                (concat (drop shift coll) (take shift coll))))","problem":44,"user":"50651de3e4b0b1b6c8b1d85f"},{"problem":44,"code":"(fn [n coll]\n  (let [x (mod n (count coll))] (concat (drop x coll) (take x coll))))","user":"564da567e4b0284900eef682"},{"problem":44,"code":"(fn [x xs] (let [[a b] (split-at (mod x (count xs)) xs)] (concat b a)))","user":"4fcf1755e4b03432b189f40c"},{"code":"(fn rotate [x y]\n  (if (= x 0) y\n      (if (> x 0)\n      (rotate (- x 1) (concat (rest y) (list (first y))))\n      (rotate (+ x 1) (cons (last y) (butlast y)))\n      )\n  )\n)","problem":44,"user":"50588af1e4b06522596eba7d"},{"problem":44,"code":"(fn rotate [n items]\n  (cond\n    (neg? n) (rotate (+ (count items) n) items)\n    (>= n (count items)) (rotate (- n (count items)) items)\n    :else ((fn iter [remaining acc np]\n              (if (zero? np) \n                (concat remaining (reverse acc))\n                (iter (rest remaining) (cons (first remaining) acc) (- np 1)))) items '() n)))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":44,"code":"(fn n44\n  [n s]\n  (let [p (rem n (count s))\n        q (+ (count s) p)\n        c concat]\n    (if (pos? p)\n      (c (drop p s) (take p s))\n      (c (drop q s) (take q s)))))","user":"55bf6dbce4b01b9910ae2a12"},{"code":"(fn [n l] (concat (drop (mod n (count l)) l) (take (mod n (count l)) l) ) )","problem":44,"user":"51f81925e4b09be9c177e526"},{"problem":44,"code":"(fn rot [r s]\n  (loop [n (mod r (count s)) xs (seq s)]\n    (if (zero? n) xs\n      (recur (dec n) (concat (next xs) (list (first xs)))))))","user":"5d929ceae4b0915913b1d412"},{"code":"#(let [idx (mod %1 (count %2))]\n   (concat (drop idx %2) (take idx %2)))","problem":44,"user":"514c2d05e4b02b8cbb2a9278"},{"code":"(fn [n coll]\n  (->>  coll\n        (split-at (mod n (count coll)))\n        reverse\n        (apply concat)))","problem":44,"user":"53315c78e4b019098a6f8b67"},{"problem":44,"code":"(fn rotate [n collection]\n  (let [position (mod n (count collection)) \n       [first-part last-part] (split-at position collection)]\n    (concat last-part first-part)))","user":"5383668ee4b06839e8705edd"},{"problem":44,"code":"(fn [n xs]\n  (let [n (mod n (count xs))]\n    (concat (drop n xs)\n            (take n xs))))","user":"5fa8424ce4b0fa27300f3de5"},{"code":"(fn [r col]\n    (let [c (count col) r (rem r c)]\n        (take c (drop (+ r c) (cycle col)))))","problem":44,"user":"513a2f23e4b067e25a345ec6"},{"problem":44,"code":"(fn q44 [n coll]\n  (let [i (mod n (count coll))]\n    (concat (drop i coll) (take i coll))))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":44,"code":"(fn [n coll]\n  (let [part (split-at (mod n (count coll)) coll)]\n    (concat (second part) (first part))))","user":"60617afee4b03746e80ebf6c"},{"code":"#(let [c (mod % (count %2))]\n  (concat (drop c %2) (take c %2)))","problem":44,"user":"4f062d4a535dcb61093f6c08"},{"code":"(fn [x s] (let [split (mod (if (> x 0) x (+ (count s) x)) (count s))] (->> (split-at split s) reverse concat flatten)))","problem":44,"user":"526d6968e4b03e8d9a4a72d9"},{"problem":44,"code":"(fn rotate-seq\n  [n s]\n  (let [l (count s)\n        x (if (pos? n) (- l (mod n l)) (mod (Math/abs n) l))\n        y (if (pos? n) (mod n l) (mod (+ l n) l))]\n        (concat (take-last x s) (take y s))))","user":"54c05fd7e4b0ed20f4ff6f12"},{"problem":44,"code":"#(let [c (count %2), s (rem (- c (mod %1 c)) c)]\n    ((fn rot [i,j] (if (> i 0)\n                    (rot (dec i) (cons (last j) (take (dec c) j)))\n                    j)) s %2))","user":"56f102f9e4b04a395b9a0488"},{"problem":44,"code":"(fn [rnum coll]\n  (take (count coll) (drop (mod rnum (count coll)) (cycle coll))))","user":"54ab1b5ae4b09f271ff37cc2"},{"problem":44,"code":"(fn rotate [n lst]\n  (let [l (count lst)\n        n (mod n l)]\n    (take l (drop n (concat lst lst)))))","user":"56897739e4b0dcc4269f407d"},{"problem":44,"code":"(fn rotate [n coll]\n    (let [qty (mod n (count coll))]\n        (concat (drop qty coll) (take qty coll))))","user":"553706d1e4b09218d5f44fc7"},{"code":"(fn [n r]\n     (cond\n      (= 0 n) r\n      (> 0 n) (recur (inc n)\n                     (concat [(last r)]\n                             (butlast r)))\n      :else (recur (dec n)\n                   (concat (rest r)\n                           [(first r)]))))","problem":44,"user":"535d910ae4b04ce2eb3ed2c5"},{"problem":44,"code":"(fn rotate \n   ([n col]\n     (cond \n       (= 0 n) col\n       (pos? n) (rotate (dec n) (conj (vec (rest col)) (first col)))\n       (neg? n) (rotate (inc n) (drop-last (conj (seq col) (last col)))))))","user":"544257b4e4b032a45b869379"},{"problem":44,"code":"(fn [n l]\n    (let [cnt (mod n (count l))]\n      (take (count l) (drop cnt (concat l l)))))","user":"5936fabce4b02506e01a298c"},{"problem":44,"code":"(fn rotate-sequence\n  [degree coll]\n  (let [abs (fn abs\n              [n]\n              (max n (- n)))\n        rotate-left (fn rotate-left\n                      [n coll]\n                      (let [elems (take n coll)\n                            remainder (drop n coll)\n                            new-coll (concat remainder elems)]\n                        new-coll))\n        rotate-right (fn rotate-right\n                       [n coll]\n                       (let [elems (reverse (take n (reverse coll)))\n                             remainder (reverse (drop n (reverse coll)))\n                             new-coll (concat elems remainder)]\n                         new-coll))\n        count (count coll)\n        degree (rem degree count)]\n    (if (> degree 0)\n      (rotate-left (abs degree) coll)\n      (rotate-right (abs degree) coll))))","user":"5720a2b0e4b0c5bde472c099"},{"problem":44,"code":"(fn [n xs] (let [c (count xs)] (take c (drop (mod n c) (cycle xs)))))","user":"5888f271e4b0f1effa3b7726"},{"code":"#(->> %2 (repeat 2)  (apply concat) (drop (mod % (count %2))) (take (count %2)))","problem":44,"user":"52c60945e4b0c2d177d62108"},{"problem":44,"code":"(fn [rot coll]\n  (let [coll-size (count coll)\n        rot (mod rot coll-size)]\n    (take coll-size (drop rot (apply concat (repeat coll))))))","user":"56098ccbe4b0053d1b86c7e4"},{"problem":44,"code":"(fn [d s]\n  (let [n (mod d (count s))]\n    (concat (drop n s) (take n s))))","user":"590088bfe4b0438e51c2d026"},{"problem":44,"code":"(fn [n coll]\n  (if (> n 0)\n    (->>\n      (split-at (rem n (count coll)) coll)\n      (reverse)\n      (flatten))\n    (->>\n      (split-at (+ (rem n (count coll)) (count coll)) coll)\n      (reverse)\n      (flatten))))","user":"57bfffc7e4b05aa3c4741c8a"},{"problem":44,"code":"#(let [n (mod %1 (count %2))]\n   (concat (nthrest %2 n) (take n %2)))","user":"544b699ce4b0e39780006964"},{"code":"(fn [r a]\n  (map #(nth a (mod (+ % r) (count a))) (range (count a))))","problem":44,"user":"4fe9de74e4b0547ebccb2475"},{"code":"#(let [r (mod % (count %2))]\n    (concat (drop r %2) (take r %2)))","problem":44,"user":"50657775e4b0deb876850599"},{"code":"(fn rotate [n lst]\n  (let [length (count lst)\n        pos (rem n length)\n        p (if (> pos 0) pos (+ pos length))\n        [front end] (split-at p lst)]\n    (concat end front)))","problem":44,"user":"5374adc3e4b06d7f452d9e27"},{"code":"(fn [n s]\n  (cond\n    (zero? n) s\n    (> n 0) (recur (dec n) (conj (vec (rest s)) (first s)))\n    :else (recur (inc n) (conj (drop-last s) (last s)))))","problem":44,"user":"4f382eb7e4b0e243712b1ed9"},{"problem":44,"code":"#(concat (drop (mod %1 (count %2)) %2) (take (mod %1(count %2)) %2))","user":"55f20e4be4b06e875b46ce40"},{"problem":44,"code":"(fn [n s]\n    (let [len (count s)]\n      (if (< n 0)\n        (recur (+ n len) s)\n        (if (> n len)\n          (recur (- n len) s)\n          (concat (drop n s) (take n s))))))","user":"52b2f9cae4b0c58976d9acfb"},{"problem":44,"code":"(fn rotate [n coll]\n  (if (= n 0)\n    coll\n    (when-let [s (seq coll)]\n      (if (> n 0)\n        (rotate (dec n) (concat (rest s) [(first s)]))\n        (rotate (inc n) (conj (drop-last s) (last s)))\n        )\n      )\n    )\n  )","user":"553abb28e4b09218d5f44ffb"},{"problem":44,"code":"(fn rotate-a-sequence [n xs]\n  (if (pos? (mod n (count xs)))\n      (recur (dec n) (concat (rest xs) (take 1 xs)))\n      xs))","user":"52616198e4b03e8d9a4a705e"},{"problem":44,"code":"(fn rotate [n coll]\n    (let [coll-len (count coll)\n          nn (rem n coll-len)\n          pn (if (>= nn 0) nn (+ coll-len nn))]\n\n        (flatten (cons (drop pn coll) (take pn coll) ))\n      )\n    )","user":"54cb3497e4b057c6fda3a272"},{"problem":44,"code":"(fn\n  [rotation seq]\n  (let [d (mod rotation (count seq))]\n    (if (> d 0)\n      (concat (drop d seq) (take d seq))\n      (concat (take-last (* -1 d) seq) (drop-last (* -1 d) seq)))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"code":"(fn [n s]\n      (println (> n 0))\n      (let [n (mod n (count s))]\n       (if (= n 0) s\n        (if (> n 0)\n         (loop [s s i 0 y '()]\n            (println y \" -- \" s)\n            (if (= i n) (concat s (reverse y))\n             (recur (rest s) (inc i) (conj y (first s)))))\n         (loop [t s i 0 y '()]\n            (println y \" ** \" t \" \" i)\n            (if (= i (+ n (count s))) (concat (reverse y) t)\n             (recur (rest t) (inc i) (conj y (first t))))))))\n    )","problem":44,"user":"5029fccee4b023940c84aa47"},{"code":"(fn shift [by col]\n  (let [shiftby (mod by (count col))]\n    (flatten (reverse (list (take shiftby col) (drop shiftby col))))))","problem":44,"user":"525aa499e4b0cb4875a45cf7"},{"problem":44,"code":"(fn [n l] (let [i (mod n (count l))]\n            (concat (drop i l) (take i l))))","user":"53e745a1e4b036ad0777e479"},{"problem":44,"code":"(fn [r coll]\n   (let [C (count coll)]\n      (map #(nth coll (rem % C)) (range (mod r C) (+ (mod r C) C )))))","user":"55f8b32ae4b03cbcff9738ba"},{"problem":44,"code":"(fn [n coll] (loop [d n x coll] (if (= 0 d) x (if (> d 0) (recur (dec d) (concat (rest x) (list (first x)))) (recur (inc d) (cons (last x) (drop-last 1 x)))))))","user":"569c1038e4b0542e1f8d145f"},{"problem":44,"code":"(fn [num arr] (let [splitted  (split-at (mod num (count arr) ) arr)] (concat (last splitted) (first splitted))))","user":"575bd5f9e4b02ea114799365"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [len (count xs)]\n    (take len (drop (mod n len) (cycle xs)))))","user":"5b1d61b3e4b03cfeda66ecfe"},{"problem":44,"code":"#(let [n (mod %1 (count %2)) s %2] (concat (drop n s) (take n s)))","user":"59419bdfe4b060784b3b78f7"},{"problem":44,"code":"(fn [n coll]\n  (let [len (count coll)\n        nabs (if (> 0 n) (+ len n) n)\n        nclip (mod nabs len)\n        start (take nclip coll)\n        end (drop nclip coll)]\n    (concat end start)))","user":"5766bab8e4b0a07e8fc180b1"},{"problem":44,"code":"(fn [n xs]\n  (let [r (rem n (count xs))]\n    (flatten (reverse (split-at (if (pos? n) r (+ (count xs) r)) xs)))))","user":"5687b6abe4b0dcc4269f4061"},{"problem":44,"code":"(fn [n s]\n  (map-indexed (fn [i elem]\n                 (nth s (mod (+ i n)\n                             (count s))))\n               s))","user":"59946856e4b0b211ea3aaac7"},{"problem":44,"code":"(fn rotate [n xs]\n  (let [c (mod n (count xs))]\n    (concat (drop c xs) (take c xs))))","user":"54dce62be4b024c67c0cf78b"},{"problem":44,"code":"(fn [n coll]\n  (let [len (count coll)\n        doubleColl (concat coll coll)\n        start (mod (+ len n) len)]\n    (take len (drop start doubleColl))))","user":"557a1e18e4b05c286339e09e"},{"code":"#(if (>= % 0)\n  (concat (drop (mod % (count %2)) %2) (take (mod % (count %2)) %2))\n  (concat (take-last (mod (- %) (count %2)) %2) (drop-last (mod (- %) (count %2)) %2))\n)","problem":44,"user":"52bc6cb2e4b07a9af57922f5"},{"code":"#(let [c (count %2)] \n   (take c (drop (mod %1 c) (cycle %2))))","problem":44,"user":"51f2a491e4b0210f90e74553"},{"code":"(fn this [n xs]\r\n  (if (= 0 n)\r\n    xs\r\n    (if (> n 0)\r\n       (this (dec n) (concat (rest xs) (list (first xs))))\r\n       (reverse (this (- 0 n) (reverse xs))))))","problem":44,"user":"4de760a3535d08e6dec9fdf9"},{"problem":44,"code":"#(for [i (range (count %2))] \n   (nth %2 \n        (rem (+ i \n                (count %2) \n                (rem %1 (count %2))) \n             (count %2))))","user":"57015a1de4b08d47c97781d4"},{"problem":44,"code":"(fn [num ob]\n  (let [obNew (split-at (mod num (count ob)) ob)]\n    (flatten (conj () (first obNew) (second obNew)))))","user":"56305383e4b073c1cf7a9be6"},{"problem":44,"code":"(fn [k s] \n  (let [n (rem (+ (* 9 (count s)) k) (count s))]\n  \t(flatten (conj (take n s) (drop n s)))))","user":"5a3c2a08e4b001c08efc0cdf"},{"problem":44,"code":"(fn [n coll]\n  (take (count coll)\n        (drop \n          (mod n (count coll))\n          (cycle coll))))","user":"52e087dde4b09f7907dd1412"},{"problem":44,"code":"(fn rotate-seq [index coll]\n  (let [normalized-index (mod index (count coll))]\n    (concat\n     (drop normalized-index coll)\n     (take normalized-index coll))))","user":"551bdefde4b07993ea3788d7"},{"problem":44,"code":"#(->> %2\n      (split-at (mod %1 (count %2)))\n      (reverse)\n      (apply concat))","user":"56795deae4b05957ce8c6187"},{"problem":44,"code":"(fn [n l] (take (count l) (drop (mod n (count l)) (cycle l))))","user":"5f25a2b1e4b0117231e5035e"},{"problem":44,"code":"(fn [n col]\n    (let [n (rem n (count col))]\n      (if (pos? n)\n        (concat (drop n col) (take n col))\n        (concat (take-last (- n) col) (drop-last (- n) col)))))","user":"5a00cb31e4b01bb0ae8afd36"},{"code":"(fn [n xs] (if (pos? n)\n(nth (iterate #(concat (next %) (take 1 %)) xs) n)\n(nth (iterate #(cons (last %) (butlast %)) xs) (- n))))","problem":44,"user":"50563ae2e4b0ce54f56f0405"},{"code":"(fn [rot col]\n  (println rot col)\n  (let [realrot (mod rot (count col))\n        [f r] (split-at realrot col)]\n    (concat r f)))","problem":44,"user":"4f03ac2d535dcb61093f6b4a"},{"code":"(fn [n coll]\n    (take (count coll)\n          (drop (mod n (count coll))\n                (cycle coll))))","problem":44,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"(fn [n xs]\n  (let [m (count xs)\n        n (mod (if (neg? n) (+ m n) n)\n               m)\n        a (take n xs)\n        b (drop n xs)]\n    (concat b a)))","problem":44,"user":"4fae0b85e4b081705acca245"},{"code":"(fn [n coll]\n  (let [length (mod (- n (count coll)) (count coll))]\n    (concat (drop length coll) (take length coll))))","problem":44,"user":"52127ee4e4b0d32679a5063c"},{"code":"(fn [d c] (loop [deg (mod d (count c))\n                 iter 0\n                 result c]\n            (if (= iter deg)\n              result\n              (recur deg\n                     (inc iter)\n                     (flatten\n                      (conj\n                       (list (first result))\n                       (rest result)))))))","problem":44,"user":"51a91ac2e4b08d8ec191b822"},{"problem":44,"code":"(fn rotate\n  [i seq]\n  (flatten \n    (let [k (- i (* (count seq) (quot i (count seq))))]\n      (if (> k 0)\n        (cons (take-last (- (count seq) k) seq) (take k seq))\n        (let [k (* -1 k)]\n          (cons (take-last k seq) (take (- (count seq) k) seq))\n        )\n      )\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":44,"code":"(fn rotate [n s]\n  (case (< n 0)\n    true (rotate (inc n) (cons (last s) (butlast s)))\n    false (if (= n 0)\n            s\n            (rotate (dec n) (reverse (conj (reverse (rest s))\n                                     (first s)))))))","user":"5974d2ede4b01722bebd4cb6"},{"problem":44,"code":"(fn rotate [n coll] (let [l  (count coll) n1 (mod n l)] (if (= 0 n1) coll (let [s (rotate (inc n1) coll)] (#(conj (drop-last %) (last %)) s)))))","user":"551e2cade4b030e6a24d00e4"},{"problem":44,"code":"(fn [x c]\n  (let [p (mod x (count c))]\n  (concat (drop p c)(take p c))\n     ))","user":"5661b0a9e4b068f2fe63dc6f"},{"problem":44,"code":"(fn rotate-seq [direction seq]\n  (if (neg? direction)\n    (last (take (+ (Math/abs direction) 1) (iterate #(cons (last %) (butlast %)) seq)))\n    (last (take (+ direction 1) (iterate #(concat (rest %) [(first %)]) seq)))\n    ))","user":"53504fe6e4b084c2834f4ada"},{"code":"#(let [s (vec %2)\n       c (count s)\n       p (mod (+ % c) c)]\n   (concat (subvec s p) (subvec s 0 p)))","problem":44,"user":"50ae0d24e4b0a40c9cfb08ce"},{"code":"#(flatten \n  (if (> %1 0)\n    (cons (drop (mod %1 (count %2)) %2) (take (mod %1 (count %2)) %2))\n    (cons \n      (drop (- (count %2) (mod (Math/abs %1) (count %2))) %2)\n      (take (- (count %2) (mod (Math/abs %1) (count %2))) %2))\n  )\n)","problem":44,"user":"504e685fe4b0f6ff3350c4ae"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [m (mod n (count coll))]\n    (concat (drop m coll) (take m coll))))","user":"55916d7be4b0604b3f94d57d"},{"problem":44,"code":"(fn rot [n aseq]\n  (let [len (count aseq)\n        dropn (mod n len)\n        cyclic (cycle aseq)]\n    (take len (drop dropn cyclic))))","user":"59b1c2eae4b0e1f4e384c8ec"},{"problem":44,"code":"#(let [len (count %2)\n         offset (mod %1 len)]\n    (take len (drop offset (cycle %2))))","user":"55aa5f73e4b0988bba2ad94b"},{"problem":44,"code":"(fn [shift list]\n   (let [start (mod shift (count list))]\n     (concat (subvec (vec list) start) (subvec (vec list) 0 start))))","user":"5da4b152e4b000c986472bf6"},{"code":"(fn [n coll]\n  (apply concat (reverse (split-at\n    ((fn [n coll]\n      (let [len (count coll)]\n        (if (> n 0) \n          (mod n len)      \n          (recur (- len (- n)) coll)))) n coll) coll))))","problem":44,"user":"4fbb9d80e4b081705acca2ea"},{"code":"(fn [n s]\n  (if (or (< n 0) (> n (count s)))\n    (recur (mod n (count s)) s)\n    (concat (drop n s) (take n s))))","problem":44,"user":"4ea1b9e4535d7eef308072b8"},{"code":"(fn [n c] \n  (cond \n   (= 0 n) c\n   (< 0 n) (recur (- n 1) (concat (rest c) [(first c)]))\n   :default (recur (inc n) (concat [(last c)] (butlast c)))))","problem":44,"user":"50f53694e4b057d4c52de881"},{"code":"(fn [n c]\n  (let [cc (count c)\n        nn (+ cc (mod n cc))]\n    (take cc (drop nn (cycle c)))))","problem":44,"user":"517cc671e4b0bbbf1f12af0a"},{"code":"(fn rot [n lst] (if (= n 0) lst (if (< n 0) (rot (+ n 1) (cons (last lst) (butlast lst))) (rot (- n 1) (concat (rest lst) [(first lst)])))))","problem":44,"user":"4f565bebe4b0a7574ea7181e"},{"problem":44,"code":"(fn [n coll]\n    (let [cnt (count coll)]\n      (apply #(concat %2 %1) (split-at (mod n cnt) coll))\n      )\n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn [index col]\n  (letfn [(rotate [index col]\n          (nth (iterate #(concat (rest %) (list (first %))) col) index))]\n  (if (> index 0) \n      (rotate index col)\n      (reverse (rotate (* -1 index) (reverse col))))))","problem":44,"user":"4e6cf521535de274dd8d818b"},{"problem":44,"code":"(fn [idx coll]\n  (concat  (drop (mod idx (count coll)) coll) (take (mod idx (count coll)) coll)))","user":"5547bcf2e4b0a04f79299551"},{"code":"(fn [n coll]\n  (nth \n    (iterate \n      #(concat (rest %) (list (first %))) \n        coll) \n  (+ n ( * 2 (count coll)))))","problem":44,"user":"502b0804e4b063e52107afad"},{"code":"#(apply concat (rseq (split-at (mod % (count %2)) %2)))","problem":44,"user":"52bbe6e1e4b07a9af57922ef"},{"problem":44,"code":"(fn [x coll]\n  (let [index (mod x (count coll))]\n    (concat (take-last (- (count coll) index) coll) (take index coll))))","user":"5f0c8b0de4b0f30dddfb5d4c"},{"problem":44,"code":"(fn [n coll]\n   (let [l (count coll)]\n     (cond (> n l ) (recur (mod n l ) coll )\n           (< n 0) (recur (let [nl (- 0 n)\n                                m (mod nl l)\n                                nn (- l m)\n                                ]\n                            (println l)\n                            nn) coll )\n           :else (flatten (list (drop n coll)\n                      (take n coll))))\n     )\n   )","user":"5a43347ee4b0447ef91cc603"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [l (count coll)\n       ,s (mod n l)]\n    (take l (concat (drop s (concat coll coll))))\n    )\n  )","user":"5488872ee4b0e286459a11d3"},{"code":"(fn rotseq [n c]\n    (cond (> n 0) (rotseq (dec n)\n        (concat (rest c) (list (first c))))\n        (< n 0) (rotseq (inc n) \n        (concat (list (last c)) (drop-last c)))\n        (= n 0) c))","problem":44,"user":"4ff4c9dae4b0678c553fc360"},{"problem":44,"code":"(fn [a b]\n    (let [b (vec b)\n          c (count b)\n          x (mod (+ a c) c)]\n      (into (subvec b x (count b)) (subvec b 0 x))))","user":"54344721e4b0b6b47310fcea"},{"problem":44,"code":"(fn [n coll]\n  (let [total (count coll)\n        step (if (< n 0) (+ total n) n)\n        normalized-step (mod step total)]\n    (concat (drop normalized-step coll) (take normalized-step coll))))","user":"57fbf995e4b0d3187e900981"},{"problem":44,"code":"(fn f [n s]\n  (let [n (if (pos? n)\n            n\n            (if (> (Math/abs n) (count s))\n              (+ (count s) (+ n (count s)))\n              (+ (count s) n)))]\n    (->> (cycle s)\n         (drop n)\n         (take (count s)))))","user":"5012da69e4b0c8732600222d"},{"code":"(fn [r l]\r\n  (let [r (mod r (count l)) b (take r l), e(drop r l)]\r\n    (concat e b)))","problem":44,"user":"4deff9f9535d08e6dec9fe15"},{"problem":44,"code":"(fn [numb xs]\n  (let [i (mod numb (count xs))] \n    (concat (drop i xs) (take i xs))))","user":"54f11c0ce4b024c67c0cf8ab"},{"problem":44,"code":"(fn [d s]\n  (let [direction (if (< d 0) (- (+ (count s) 1) d) d)\n        direction (mod direction (count s))]\n  (loop [se s acc []]\n    (if (= (count acc) direction)\n      (concat se acc)\n      (recur (rest se) (conj acc (first se)))\n      )\n    )))","user":"52d42021e4b09f7907dd132a"},{"problem":44,"code":"(fn [offset coll]\n   (let [idx (mod (+ offset (count coll)) (count coll))]\n     (concat (drop idx coll)\n             (take idx coll))))","user":"584917a1e4b089d5ab817ec9"},{"code":"#(take (count %2) (drop (mod %1 (count %2)) (flatten (repeat %2))))","problem":44,"user":"527dc2aee4b0757a1b17138d"},{"problem":44,"code":"#(let [ \n       [l r] (split-at (mod % (count %2)) %2)]\n(concat r l))","user":"5891bddce4b00487982d5201"},{"code":"(fn rot [n s]\n  (if (< n 0) (rot (+ (count s) n) s)\n    (concat (drop (mod n (count s)) s) (take (mod n (count s)) s))))","problem":44,"user":"4fdec88fe4b05e33b9224f8e"},{"problem":44,"code":"(fn som [pos coll]\n  (let [mpos (mod (Math/abs pos) (count coll))\n        pos1 (if (neg? pos) (- (count coll) mpos) mpos)\n        parts (split-at pos1 coll)]\n    (concat (last parts)(first parts))))","user":"53d70f3be4b0e771c302545f"},{"problem":44,"code":"(fn [rotate-by collection]\n  (let [size (count collection)\n        distance (mod rotate-by size)]\n  \t(drop distance\n          (take (+ distance size) (cycle collection)))))","user":"603e9cb6e4b0d5df2af22317"},{"problem":44,"code":"(fn rotate\n  [n coll]\n  (let [rotate (mod n (count coll))\n        [back front] (split-at rotate coll)]\n    (concat front back)   \n   )\n  )","user":"56edf2dde4b04a395b9a044b"},{"problem":44,"code":"(fn rotate-seq\n  [places coll]\n  (let [n (mod places (count coll))]\n    (concat (drop n coll) (take n coll))))","user":"5d7b90ede4b02e6b30c93552"},{"code":"(fn [n xs]\r\n  (cond\r\n    (= n 0) xs\r\n    (> n 0) (recur (dec n) (rest (conj (apply vector xs) (first xs))))\r\n    (< n 0) (recur (inc n) (butlast (concat (list (last xs)) xs)))))","problem":44,"user":"4f9aa97ae4b0dcca54ed6d0e"},{"code":"(fn rot [ n s ]\n  ;; oneliner\n  (apply concat (reverse (split-at (mod n (count s)) s)))\n  ;; orderly\n  (->> s \n    (split-at (mod n (count s))) \n    reverse \n    (apply concat))\n)","problem":44,"user":"50901b2ee4b0ea685a20f774"},{"code":"#(let [l (count %2), v (mod % l)] (concat (drop v %2) (take v %2)))","problem":44,"user":"4f85b7b5e4b033992c121c49"},{"code":"(fn [amount coll]\n  (map second (sort-by first\n                       (map (fn [[position value]] [(mod (- position amount) (count coll)) value])\n                                   (map vector (range) coll)))))","problem":44,"user":"4e6e7018535d5021c1a8960b"},{"code":"(fn rotate [iters iter-list]\n  (letfn [(abs [x] (if (pos? x) x (- x (* 2 x))))\n          (normalise-count [n m] \n           (cond\n            (>= n m) (- n m)\n            (< n 0) (- m (mod (abs n) m))\n            :else n))]\n    (loop [n (normalise-count iters (count iter-list)), l iter-list]\n      (println n l)\n      (if (= n 0)\n        l\n        (recur (- n 1) (conj (into [] (rest l)) (first l)))))))","problem":44,"user":"517531c6e4b07031762f2eea"},{"problem":44,"code":"(fn rot [i ls]\n  (cond\n   (< i 0) (rot (inc i) (concat (list (last ls)) (drop-last ls)))\n   (> i 0) (rot (dec i) (concat (rest ls) (list (first ls))))\n   :else ls))","user":"55f73078e4b06e875b46cea4"},{"problem":44,"code":"(fn [x l]\n (let [abs (mod (max x (- x)) (count l))]\n    (if (> x 0)\n      (concat (drop abs l) (take abs l))\n      (concat (take-last abs l) (drop-last abs l)))))","user":"51ff6379e4b0f1313d468a98"},{"problem":44,"code":"(fn [n sq]\n(let [c (count sq)\nn' (mod (java.lang.Math/abs n) c)]\n(if (< n 0)\n(flatten (conj (take (- c n') sq) (drop (- c n') sq)))\n(flatten (conj (take n' sq) (drop n' sq))))))","user":"5631040be4b0bfe05bf1178c"},{"problem":44,"code":"#(apply concat (-> (mod % (count %2))\n                    (split-at %2)\n                    reverse))","user":"5466aabbe4b01be26fd746e8"},{"problem":44,"code":"(fn rotate [n l] \n  (let [m (mod n (count l))] \n               (concat (drop m l) (take m l))\n               ))","user":"563b9acbe4b0bfe05bf11827"},{"problem":44,"code":"(fn [n c](let [pos-n (mod (max n (- n)) (count c))\n                neg-n (- (count c) pos-n)\n                use-n (if (pos? n) pos-n neg-n)]\n            (concat (drop use-n c) (take use-n c))))","user":"564348e1e4b08d4f616f5f26"},{"problem":44,"code":"#(let [[l r] (split-at (mod % (count %2)) %2)]\n       (concat r l))","user":"535c2d21e4b04ce2eb3ed2b2"},{"problem":44,"code":"(fn rotate-it [rot-idx the-list]\n  (let [split-point (mod (+ (rem rot-idx (count the-list)) (count the-list))  (count the-list))]\n  (flatten (reverse (split-at split-point the-list)))))","user":"54e0bb4fe4b024c67c0cf7b8"},{"code":"(fn rotate[n coll] (\n  let [k (count coll), l (Math/round (float (inc (/ (Math/abs n) k))))] (\n    if (pos? n)\n      (nthnext (take (+ k n) (cycle coll)) n)\n      (nthnext (take (+ k (+ n (* l k))) (cycle coll)) (+ n (* l k)))\n    )\n  )\n)","problem":44,"user":"4fce75cfe4b03432b189f400"},{"problem":44,"code":"#(let [s (count %2) skip (+ s (mod %1 s))] (take s (drop skip (cycle %2))))","user":"594263cbe4b060784b3b790a"},{"problem":44,"code":"(fn [r s]\n  (let [rot (mod r (count s))]\n    (concat (nthrest s rot) (take rot s))))","user":"541709b0e4b01498b1a71a06"},{"problem":44,"code":"(fn [n s] (seq (if (neg? n)\n            (reverse \n              (reduce (fn [ss _] (conj (vec (rest ss)) (first ss))) \n                      (reverse s) (repeat (- n) nil)))\n            (reduce (fn [ss _] (conj (vec (rest ss)) (first ss)))\n                    s (repeat n nil))\n            )))","user":"5b7ec039e4b047b03b20375d"},{"code":"(fn [n coll] (let [m (mod n (count coll))] (concat (take-last (- (count coll) m) coll) (take m coll))))","problem":44,"user":"522404d8e4b01819a2de42c0"},{"code":"(fn [n s]\n  (let [n (mod n (count s))\n        rot #(conj (vec (rest %)) (first %))]\n    (nth (iterate rot s) n)))","problem":44,"user":"4fd93c42e4b05e33b9224f35"},{"code":"(fn [n coll]\n  (take (count coll) (drop ((fn dn [n] \n                             (if\n                              (pos? n) n\n                              (dn (+ n (count coll))))\n                             ) n)(cycle coll))))","problem":44,"user":"536f5900e4b0fc7073fd6e7b"},{"problem":44,"code":"#(let [n (count %2)] (reduce concat (reverse (split-at (mod (+ n %1) n) %2))))","user":"57b35a19e4b0fbc9809a277d"},{"problem":44,"code":"#(into []\n (let [s (vec %2)\n       z (count s)\n       x (mod %1 z)\n       x (if (> x (dec z))\n           (- x z)\n           x)\n       x (if (< x (dec (- z)))\n           (+ x z)\n           x)\n       x (if (neg? x)\n           (+ z x)\n           x)]\n  (concat\n   (subvec s x z)\n   (subvec s 0 x))))","user":"56a9d4bbe4b07966d5a8a07b"},{"code":"#(let [l (count %2) n (if (< %1 0) (+ l %1) %1) x (partition-all (mod n l) %2)] \n  (flatten [(rest x) (first x)]))","problem":44,"user":"4e634eb9535d8ccf87e9fe63"},{"problem":44,"code":"#(let [n (count %2)] (take-last n (concat %2 (take (mod % n) (cycle %2)))))","user":"55c6fd60e4b0e31453f649c9"},{"problem":44,"code":"#(let [n (mod %1 (count %2)) coll %2]\n   (concat (drop n coll) (take n coll)))","user":"563c48e7e4b0bfe05bf11832"},{"code":"(fn rot [n s]\n  (cond \n   (< n 0) (rot (inc n) (cons (last s) (butlast s)))\n   (> n 0) (rot (dec n) (concat (rest s) (list (first s))))\n   :else s))","problem":44,"user":"4e9a1512535dbda64a6f6b6e"},{"code":"(fn [n xs]\n  (if (zero? n)\n    xs\n    (if (pos? n)\n      (recur (dec n) (concat (rest xs) (list (first xs))))\n      (recur (inc n) (cons (last xs) (butlast xs))))))","problem":44,"user":"4f065217535dcb61093f6c0c"},{"problem":44,"code":"#(let [x (mod %1 (count %2))]\n   (concat (drop x %2) (take x %2))\n   )","user":"53dadf1de4b0e771c30254ad"},{"problem":44,"code":"(fn [n coll]\n   (let [m (rem n (count coll))\n         x (if (neg? m) (+ (count coll) m) m)]\n     (take (count coll) (drop x (apply concat (repeat 2 coll))))))","user":"57b7de74e4b0fbc9809a27d4"},{"problem":44,"code":"(fn doit [x seq]\n  (cond\n    (< x 0) (doit (inc x) (concat [(last seq)] (drop-last seq)))\n    (> x 0) (doit (dec x) (concat (drop 1 seq) [(first seq)]))\n    :else seq))","user":"5d6d2172e4b04d129b00f2b9"},{"problem":44,"code":"(fn shift [n coll]\n  (let [size (count coll)\n        skip (if (> n 0) n (+ n (* size (- n))))]\n    (take size (drop skip (cycle coll)))))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"#(let [r (mod % (count %2))] (concat (drop r %2) (take r %2)))","problem":44,"user":"52f818a6e4b047fd55836fcc"},{"problem":44,"code":"(fn ROTATE [shift xs]\n  (let [n (mod shift (count xs))]\n    (concat (drop n xs) (take n xs))))","user":"570ab24fe4b0b0fb43fd06b7"},{"problem":44,"code":"(fn number44 [n xs]\n  (cond \n          (< n 0) (recur (inc n) (cons (last xs) (butlast xs)))\n          (> n 0) (recur (dec n) (concat (rest xs) [(first xs)]))\n          :else xs ))","user":"54074fc5e4b0addc1aec66b6"},{"code":"(fn [distance col]\n    (take (count col) (drop (if (pos? distance) distance (+ (count col) (count col) distance)) (flatten (repeat col)))))","problem":44,"user":"52a32876e4b04e0c58e87bfb"},{"problem":44,"code":"(fn [n elems]\n    (let [len (count elems)]\n    (take len (drop\n               (if (>= n 0) n (- len (rem (- n) len)))\n               (cycle elems)))))","user":"5ac6ef9be4b0e27600da7779"},{"problem":44,"code":"(fn [idx coll] (if (pos? idx)\n    (apply conj (take (rem idx (count coll)) coll) (reverse (take-last (- (count coll) (rem idx (count coll))) coll))) \n    (apply conj (take (- (count coll) (rem (- idx idx idx) (count coll))) coll) (reverse (take-last (rem (- idx idx idx) (count coll)) coll))  )))","user":"5b7ed20fe4b047b03b203760"},{"problem":44,"code":"(fn rotate [n xs]\n  (->> \n   (split-at (mod n (count xs)) xs)\n   (reverse) \n   (apply concat)))","user":"53c126fce4b00fb29b22125b"},{"problem":44,"code":"(fn [n xs] \n   (let [cnt (count xs)\n         modn (mod n cnt)]\n(flatten (list (take-last (- cnt modn) xs) (take modn xs)))))","user":"5c718e6ce4b0fca0c1622796"},{"code":"(fn [rot xs]\n  (let [rot (mod rot (count xs))\n        rot (if (neg? rot) (+ (count xs) rot) rot)]\n    (loop [rot rot at-end [] x (first xs) xs (rest xs)]\n      (if (= rot 0)\n        (concat (cons x xs) at-end)\n        (recur (dec rot) (conj at-end x) (first xs) (rest xs))))))","problem":44,"user":"4dafa380edd6309eace4d17c"},{"problem":44,"code":"#(let [m (mod %1 (count %2))\n       n (if (< m 0) (- 0 m) m)]\n       (concat (drop n %2) (take n %2)))","user":"591addcee4b09b4ee5954be1"},{"code":"(fn [i coll]\n  (let [i (mod i (count coll))]\n    (concat (drop i coll) (take i coll))))","problem":44,"user":"50e90813e4b033b0e80d11e7"},{"code":"(fn [n xs]\n    (let [r (mod n (.length (vec xs)))]\n     (concat (drop r xs) (take r xs))))","problem":44,"user":"4eb0a757535d7eef3080733d"},{"code":"(fn [n xs]\r\n  (let [d (if (< n 0) take-last drop)\r\n        t (if (< n 0) drop-last take)\r\n        r (mod (Math/abs n) (count xs))]\r\n    (concat (d r xs)\r\n            (t r xs))))","problem":44,"user":"4dea9406535d08e6dec9fe01"},{"problem":44,"code":"#((fn [n coll] (if (zero? n) coll (recur (dec n) (conj (vec (rest coll)) (first coll)))))  ((fn [a c] (if (pos? a) a (+ a (* c (+ 1 (Math/abs (quot a c))))))) %1 (count %2))  %2)","user":"5659679ae4b068f2fe63dbeb"},{"problem":44,"code":"(fn f \n\t[c d]\n\t(let [cc (count d)\n\t\t  c (mod c cc)]\n\t(take cc\n\t\t(drop c (cycle d)))))","user":"54a11042e4b09f271ff37c49"},{"problem":44,"code":"(fn rotate-seq [n coll]\n     (if (zero? n)\n       coll\n       (let [pos (mod n (count coll))\n             splitted (if (> pos 0) (split-at pos coll) (split-at (+ (count coll) pos) coll))]\n         (concat (second splitted) (first splitted))\n         )\n       )\n     )","user":"5c51d700e4b0fb8c5ffd99d1"},{"code":"(fn [n coll]\n  (let [ntimes (if (neg? n) (- n) n)\n        rshift #(cons (last %) (drop-last %))\n        lshift #(concat (rest %) [(first %)])]\n        ((apply comp (repeat ntimes (if (neg? n) rshift lshift))) coll)))","problem":44,"user":"513fb358e4b00f13ea1bd893"},{"problem":44,"code":"#(concat\n   (drop (mod % (count %2)) %2)\n   (take (mod % (count %2)) %2))","user":"5368fedee4b0243289761e93"},{"problem":44,"code":"(fn \n  [direction input]                                                                                                          \n  (loop [counter direction result input]                                                                                     \n    (if (zero? counter)                                                                                                      \n      result                                                                                                                 \n      (if (< 0 counter)                                                                                                      \n        (let [[head & tail] result]                                                                                          \n          (recur (dec counter) (reverse (conj (reverse tail) head))))                                                        \n        (let [reversed (reverse result)                                                                                      \n              head (first reversed)                                                                                          \n              tail (reverse (next reversed))]                                                                                \n          (recur (inc counter) (conj tail head)))))))","user":"52c2106fe4b07a9af5792374"},{"code":"(fn [n s] \n  (cond\n    (> n 0) (recur (dec n) (concat (rest s) [(first s)]))\n    (< n 0) (recur (inc n) (cons (last s) (drop-last s)))\n    :else s))","problem":44,"user":"4e6a4954535d8ccf87e9fec0"},{"code":"(fn [n s]\n  (loop [n n\n         s s]\n         (if (= (mod n (count s)) 0)\n              s\n              (recur (inc n) (cons (last s) (butlast s))))))","problem":44,"user":"4f9a0064e4b0dcca54ed6d03"},{"problem":44,"code":"(fn [index sequ]\n  \t(let [at (mod index (count sequ))\n          [f s] (split-at at sequ)]\n      \t(concat s f)\n      \t)\n  \t)","user":"5703a557e4b08d47c97781f4"},{"problem":44,"code":"(fn [amount li] (let [fixed-amount (mod amount (count li))]\n    (concat (drop fixed-amount li) (take fixed-amount li))))","user":"5b4b58f2e4b02d533a91bc9c"},{"problem":44,"code":"#(let [ve (apply vector %2)\n       index (mod %1 (count ve))] \n(flatten (vector (subvec ve index) (subvec ve 0 index))))","user":"5e13a6b7e4b099d064963001"},{"problem":44,"code":"(fn rot\n  [n s]\n  (let [l (count s)]\n    (take l (drop (mod n l) (cycle s)))))","user":"556323b5e4b0c656e3ff17e5"},{"code":"(fn [o s]\n  (let [\n    c (count s) \n    [a b] (split-at \n            (rem (loop [x o] (if (neg? x) (recur (+ x c)) x)) c) \n            s)\n    ]\n    (concat b a)))","problem":44,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn rotate [n xs]\n  (if (>= n 0)\n    (if (<= n (count xs))\n      (concat (drop n xs) (take n xs))\n      (rotate (mod n (count xs)) xs))\n    (rotate (+ n (count xs)) xs)))","problem":44,"user":"50cb4cf6e4b0f78a8e1645b4"},{"problem":44,"code":"(fn [n xs] (->> xs\n                (split-at (mod n (count xs)))\n                reverse\n                 (apply concat))\n  )","user":"5896ade8e4b00487982d52a9"},{"problem":44,"code":"#(let [c (count %2) d0 (+ c %1) d (mod d0 c)] (concat (drop d %2) (take d %2)))","user":"56347285e4b0bfe05bf117bc"},{"problem":44,"code":"(fn rotate [n coll]                                                                                                                                                                 \n  (let [i (mod n (count coll))]                                                                                                                                                     \n    (apply concat (reverse (split-at i coll)))))","user":"5728d33ce4b0c6e51e0d2b12"},{"problem":44,"code":"(fn [n coll]\n  (let [s (vec coll)\n        size (count s)\n        rot (mod n size)\n        front (map s (range rot))\n        back (map s (range rot size))]\n    (flatten [back front])\n  )\n)","user":"59073e0fe4b047aa04b19950"},{"problem":44,"code":"(fn rotate [n coll]\n  (let [x (mod n (count coll))]\n    (concat (drop x coll) (take x coll))))","user":"559bdf16e4b066d22e731f5a"},{"problem":44,"code":"(fn [shift seq]\n  (let [seq (if (< shift 0)\n              (reverse seq)\n              seq)\n        rotate (Math/abs shift)\n        seq (loop [seq seq\n                   shift rotate]\n              (if (= 0 shift)\n                seq\n                (recur (conj (vec (rest seq)) (first seq)) (- shift 1))))]\n    (if (< shift 0)\n      (reverse seq)\n      seq)))","user":"57155980e4b07c98581c3ad7"},{"code":"(fn [shift coll] \n  (let [size (count coll) \n        skip (if (neg? shift) \n              (+ size (rem shift size)) \n              shift)]\n    (take size (drop skip (cycle coll)))))","problem":44,"user":"4f969214e4b0dcca54ed6cdd"},{"code":"(fn rotate-seq [n xs]\n\t(let [xc (count xs)\n\t\t  n (mod n xc)]\n\t(take xc (drop n (take (* 2 n xc) (apply concat (repeat xs)))))))","problem":44,"user":"52e657e4e4b09f7907dd1472"},{"code":"(fn [rot lst]\n  (letfn [(permute [idx] (map #(nth lst %1) idx))]\n    (permute (map #(mod (+ %1 rot) (count lst)) (range (count lst))))))","problem":44,"user":"4faa9593e4b081705acca1f9"},{"problem":44,"code":"(fn [ind_ lis_] \n  \n  (let [lis (vec lis_)\n        ind (cond (>= (Math/abs ind_) (count lis))\n          (cond (> 0 ind_)\n                (+ (count lis) ind_)\n                :else (- ind_ (count lis))\n          )\n          :else ind_\n    )]\n    (cond (> 0 ind)\n         (concat \n           (subvec lis (+ (count lis) ind) (count lis))\n           (drop-last (Math/abs ind) lis)\n         )\n         :else\n         (concat\n           (drop ind lis)\n           (subvec lis 0 ind)\n         )\n    )\n  )\n)","user":"54897284e4b0e286459a11e6"}]