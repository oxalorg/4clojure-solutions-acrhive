[{"code":"#(loop [f %1 s %2 arg %&]\n  (if (empty? arg) f\n      (recur (s f (first arg)) (second arg) (rest (rest arg)))))","problem":135,"user":"4f4bbda0e4b03ad3f0c10c7b"},{"problem":135,"code":"(fn infix-calc\n  [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"57f81544e4b0d3187e900917"},{"problem":135,"code":"(fn [s & more]\n  (let [p (partition 2 more)\n        calc (fn [a [op b]]\n               (op a b))]\n    (reduce calc s p)))","user":"55a65872e4b09e57187da299"},{"problem":135,"code":"(fn infix [& expr]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity expr))","user":"6074e1e4e4b069485764de4f"},{"code":"(fn infix [x op y & rest]\n  (let [result (op x y)]\n    (if (nil? rest)\n      result\n      (apply infix (cons result rest)))))","problem":135,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":135,"code":"(fn asdf [& xs]\n  (loop [ops (apply list xs)]\n    (if (= 1 (count ops))\n      (first ops)\n      (let [next ((second ops) (first ops) (nth ops 2))]\n        (recur (cons next (drop 3 ops)))))))","user":"5283a919e4b0239c8a67adbe"},{"problem":135,"code":"(fn [& s]\n  (let [[l o r] (take 3 s)\n        v (o l r)]\n    (if-let [t (nthnext s 3)]\n      (recur (cons v t))\n      v)))","user":"54dd76c8e4b024c67c0cf794"},{"problem":135,"code":"(fn [x y & more] (loop [out (y x (first more)) remaining (rest more)] (if (empty? remaining) out (recur ((first remaining) out (second remaining)) (nthrest remaining 2)))))","user":"5d7158f3e4b04d129b00f2e1"},{"code":"(fn [& args]\n  (loop [c (rest args), r (first args)]\n    (if (seq c)\n      (recur (drop 2 c) ((first c) r (second c)))\n      r)))","problem":135,"user":"4f301d02e4b0d6649770a072"},{"problem":135,"code":"(fn [v1 opr1 v2 & r1]\n\t(let [res1 (opr1 v1 v2)]\n\t\t(if (empty? r1)\n\t\t\tres1\n\t\t\t(let [opr2 (first r1)\n\t\t\t\t\t v3 (first (rest r1))\n\t\t\t\t\t r2 (rest (rest r1))]\n\t\t\t\t\t (recur res1 opr2 v3 r2)))))","user":"5dc85f8ae4b02f9375f4e1da"},{"problem":135,"code":"(fn R ([n] n) ([n f m & E] (apply R (cons (f n m) E))))","user":"55f6fe09e4b06e875b46cea2"},{"code":"(fn [f o & l]\n  (loop [fst f op o mores l]\n   (if (= 0 (count mores))\n\t   fst\n    (recur (op fst (first mores)) (first (rest mores)) (rest (rest mores))))))","problem":135,"user":"4df9c598535d04ed9115e77a"},{"code":"(fn [& xs]\n   (reduce #((first %2) %1 (second %2)) (first xs) \n           (partition 2 (rest xs))))","problem":135,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn calc [num1 f num2 & rest] \n  (let [result (f num1 num2)]\n  (if rest (apply calc result rest) result)))","problem":135,"user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":135,"code":"(fn calc [& args]\n  (if (= (count args) 3)\n    ((nth args 1) (nth args 0) (nth args 2))\n    ((last (butlast args))\n     (apply calc (butlast (butlast args)))\n     (last args))))","user":"541d3c0fe4b01498b1a71a7e"},{"code":"(fn infix [x op y & more]\n  (if more\n    (apply infix (op x y) more)\n    (op x y)))","problem":135,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":135,"code":"(fn [& args]\n  (loop [n (first args) items (rest args)]\n    (if (empty? items)\n      n\n      (recur ((first items) n (first (rest items))) (rest (rest items))))))","user":"56877fcbe4b0dcc4269f405e"},{"problem":135,"code":"(fn [a & b]\n  (loop [b b\n         acc a]\n    (if (empty? b) \n      acc\n      (recur (drop 2 b) ((first b) acc (second b))))))","user":"4f963487e4b0dcca54ed6cd9"},{"problem":135,"code":"(fn infix [& operations]\n  (let [\n        x (first operations)\n        op (second operations)\n        y (second (rest operations))\n        etc (drop 3 operations)\n        result (op x y)\n   ]\n    (cond\n     (= (count etc) 0) result\n     :else (apply infix (cons result etc))\n     )\n    )\n  )","user":"60752ef6e4b069485764de55"},{"problem":135,"code":"(fn [f & r]\n  (reduce \n   (fn [a [op b]] (op a b)) \n   f\n   (partition 2 r)))","user":"561c0278e4b064ca9f4b1691"},{"problem":135,"code":"#(reduce (fn [acc x]\n           (if (number? x)\n             (acc x)\n             (partial x acc)))\n         %&)","user":"5336ca32e4b0e30313ee6c80"},{"problem":135,"code":"(fn [x f y & zs]\n  (let [t (f x y)]\n    (if-let [[g b & cs] zs] (recur t g b cs) t)))","user":"5afecee2e4b0cc2b61a3bd28"},{"code":"(fn [x s & y]\n  (if (next y)\n    (recur (s x (first y)) (fnext y) (nnext y))\n    (s x (first y))))","problem":135,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":135,"code":"(fn [x & r] \n  (reduce (fn [a [op c]] (op a c)) x (partition 2 r)))","user":"5b9ae606e4b0c0b3ffbd4af2"},{"problem":135,"code":"(fn infix [& nums]\n  (if (>= (count nums) 3)\n    (apply infix ((second nums) (first nums) (first (drop 2 nums)))\n           (drop 3 nums))\n    (first nums)\n    )\n  )","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":135,"code":"(fn infix-calc [& exp]\n   (reduce #((first %2) %1 (second %2)) 0 (partition 2 (cons + exp))) ; [[+ 1] [+ 2] [+ 3]]\n  )","user":"558bdcefe4b0277789237633"},{"problem":135,"code":"#(reduce (fn [a [x y]] (x a y)) (first %&) (partition 2 (rest %&)))","user":"5b59d176e4b02d533a91bd86"},{"problem":135,"code":"(fn kalkutator\n   ([a & b] (if (nil? b)\n              a\n              (kalkutator (conj (next (next b)) ((first b) a (second b))))))\n   ([pektor] (if (< (count pektor) 2)\n               (first pektor)\n               (kalkutator (vec (conj (nthnext pektor 3) ((second pektor) (first pektor) (second (next pektor))))))))\n   )","user":"5b7ed20fe4b047b03b203760"},{"problem":135,"code":"(fn calculator [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"5e950310e4b0fbed045a3802"},{"problem":135,"code":"(fn [& [a o b & r]] (if r (recur (cons (o a b) r)) (o a b)))","user":"56b2573ce4b0982f16b37e02"},{"problem":135,"code":"(fn i [x f y & g]\n  (if g\n    (apply i (f x y) g)\n    (f x y)))","user":"533018b2e4b019098a6f8b56"},{"problem":135,"code":"(fn [x & xs] \n  (reduce \n   (fn [acc [op y]] (op acc y))\n   x \n   (partition 2 xs)))","user":"56b86e64e4b0f26550335924"},{"code":"(fn infix\r\n  ([n]\r\n     n)\r\n  ([a op b & rest]\r\n     (apply infix (op a b) rest)))","problem":135,"user":"4e8338d6535db62dc21a62d3"},{"code":"(fn [& args]\n  (reduce (fn [v [op arg]] (op v arg))\n          (first args)\n          (partition 2 (rest args))))","problem":135,"user":"5225271fe4b01819a2de42f9"},{"code":"(fn infix [ & args]\n  (if (even? (count args))\n    (println \"Improper Arguments Supplied. Dont waste my fucking time!\")\n    (if (= 1 (count args))\n      (first args)\n      (let [arg1 (first args) func (second args) arg2 (nth args 2)]\n        (apply infix (list* (func arg1 arg2) (rest (rest (rest args)))))))))","problem":135,"user":"50a4d1d3e4b0344e360f3bc6"},{"problem":135,"code":"(fn calc [& xs]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) xs))","user":"569ad037e4b0542e1f8d144f"},{"code":"(fn [& vc] ((fn f [x] (if (= 3 (count x)) ((get x 1) (get x 0) (get x 2)) (f (vec (concat [((get x 1) (get x 0) (get x 2))] (drop 3 x)))))) (vec vc)))","problem":135,"user":"5017f840e4b02f523d7cc5e8"},{"problem":135,"code":"(fn infix-calc [l op r & args]\n  (if-not (empty? args)\n    (apply infix-calc (op l r) args) \n    (op l r)))","user":"5edd05bfe4b0c7845d86b0f3"},{"code":"(fn calc [a b c & r]\n  (if r\n    (apply calc (b a c) r)\n    (b a c)))","problem":135,"user":"4f6b4237e4b07046d9f4efa9"},{"problem":135,"code":"(fn [& l]\n  (loop [l l\n         res []]\n    (cond (empty? (drop 3 l))\n          ((second l)\n                        (first l)\n                        (nth l 2))\n          :else (recur \n                 (cons ((second l)\n                        (first l)\n                        (nth l 2)) (drop 3 l)) \n                 (conj res \n                       ((second l)\n                        (first l)\n                        (nth l 2))\n                       )))))","user":"5c3f29d4e4b08cd430848e8f"},{"code":"(fn\r\n  [& args]\r\n  (let [f (first args)\r\n        op-list (partition 2 2 (next args))\r\n        reducer (fn [r e]\r\n                  ((first e) r (second e)))]\r\n    (reduce reducer f op-list)\r\n    ))","problem":135,"user":"4fee04a0e4b0678c553fc308"},{"problem":135,"code":"(fn [& xs]\n  (:acc\n   \t(reduce\n       #(let [op (:op %1)\n         \t  acc (:acc %1)]\n          (if (nil? op)\n            {:acc acc :op %2}\n            {:acc (op acc %2) :op nil})) {:acc 0 :op +} xs)))","user":"55d1ec3ee4b0e31453f64a4c"},{"problem":135,"code":"(fn [& xs]\n  (reduce\n   #((first %2) % (second %2))\n   (first xs)\n   (partition 2 (rest xs))))","user":"54926752e4b0b312c081ff44"},{"problem":135,"code":"(fn infix [& args]\n  (reduce\n    (fn [n1 [op n2]]\n      (op n1 n2)) \n    (first args) \n    (partition 2 (rest args))))","user":"557e56aae4b05c286339e0d5"},{"code":"(fn [& args]\n  (letfn [(f ([x] x)\n             ([x op y & remaining] (apply f (op x y) remaining)))]\n    (apply f args)))","problem":135,"user":"51a3b135e4b0e77c4ca60bf6"},{"code":"(fn infix [x & y] (if (empty? y)\n              x\n              (apply infix (concat \n                     [((first y) \n                       x\n                       (second y))]\n                     (drop 2 y)))))","problem":135,"user":"4f8b27b3e4b02e764a0a5179"},{"problem":135,"code":"(fn [x & others]\n   (loop [xs others acc x]\n     (let [curr (first xs) nxt (first (rest xs))]\n       (if (or (empty? xs) (nil? nxt))\n         acc\n         (recur (drop 2 xs) (curr acc nxt))))))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn [& tokens]\n  (reduce (fn [result [operator number]] (operator result number))\n  \t(first tokens) (partition 2 (rest tokens))))","problem":135,"user":"4f03641a535dcb61093f6a9b"},{"code":"(fn [& others] (let [sz (count others) f (first others) s (second others) t (nth others 2)]\n                  (cond (= sz 1) (first others)\n                        (= sz 3) (s f t)\n                        :else (recur (conj (drop 3 others) (s f t))))))","problem":135,"user":"52161db6e4b0bf4bffd29cb8"},{"problem":135,"code":"(fn [x & args]\n  (if-not (seq args)\n    x\n    (let [[op y & rest] args]\n      (recur (op x y) rest))))","user":"566b57e9e4b0a866af6896ad"},{"problem":135,"code":"(fn my-infix\n  ([op1 oper op2] (oper op1 op2))\n  ([op1 oper op2 & args]\n   (apply my-infix (my-infix op1 oper op2) args)\n  )\n)","user":"5dd25ca8e4b0948ae9d9ad55"},{"problem":135,"code":"(fn [& params]\n  (reduce (fn [a [b c]] (b a c))\n          (first params)\n          (partition 2 (rest params))))","user":"564d3169e4b0284900eef67c"},{"code":"(fn infix\n  ([a] a)\n  ([a op b & r]\n    (apply infix (op a b) r)))","problem":135,"user":"506a1985e4b01dc6af13f83e"},{"code":"(fn infix\n  ([num1] num1)\n  ([num1 op num2 & more] (apply infix (op num1 num2) more))\n)","problem":135,"user":"4f74a4fbe4b044e54cd9a901"},{"problem":135,"code":"(fn [& args]\n  (loop [a (first args)\n         r (rest  args)\n         o nil]\n    (if-let [f (first r)]\n      (let [x (if (fn? f) a (o a f))]\n        (recur x (rest r) f))\n      a)))","user":"55995fa7e4b031d6649c9ba9"},{"code":"(fn infix-calculator [& more]\n  (reduce (fn [x [f y]] (f x y))\n          (first more)\n          (partition 2 (rest more))))","problem":135,"user":"4ea55757535d7eef308072d3"},{"code":"(fn this ([x f y & more]\n          (let [res (f x y)]\n            (if more\n              (apply this res more)\n              res))))","problem":135,"user":"50e3e108e4b01912b3285c48"},{"code":"(fn incalc [a f b & m]\n  (let [c (apply f [a b])]\n    (if (empty? m)\n      c \n      (recur c (first m) (second m) (drop 2 m)))))","problem":135,"user":"4ff4c9dae4b0678c553fc360"},{"problem":135,"code":"(fn [v & s] (reduce (fn [x[y z]] (y x z)) v (partition 2 s)))","user":"549c22f7e4b0f3d1d8e70f86"},{"code":"(fn calc\n  ([x op y] (op x y))\n  ([x op1 y op2 z] (calc (calc x op1 y)\n                         op2\n                         z))\n  ([x op1 y op2 z & more] (apply calc (cons (calc x op1 y op2 z)\n                                            more))))","problem":135,"user":"519db0ede4b037b32803f9b9"},{"problem":135,"code":"(fn [& args] (reduce (fn [a [f b]] (f a b)) (first args) (partition 2 2 (rest args))))","user":"5e246f92e4b05b4b01516150"},{"problem":135,"code":"(fn [i & a]\n  (loop [[o v & r] a\n  \t      n i]\n  \t(if o\n       (recur r (o n v))\n              n)))","user":"5499e23de4b03163384f4706"},{"problem":135,"code":"(fn inf [x op y & r] \n  (if r\n    (apply inf (op x y) r)\n    (op x y)))","user":"548b8a50e4b0e286459a11ff"},{"code":"(fn ([& [x o y & s]] \n  (let [r (o x y)] \n    (if s (recur (cons r s)) r))))","problem":135,"user":"4dada16fc9a9d6ed2699dc57"},{"code":"(fn\n  [& exp]\n  (loop [xs (rest exp) n (first exp)]\n    (if (empty? xs) n\n        (let [[op x] xs]\n          (recur (drop 2 xs) (op n x))))))","problem":135,"user":"4fadbc3fe4b081705acca23f"},{"problem":135,"code":"(fn [x & xs] (reduce (fn [s [f v]] (f s v)) x (partition 2 xs)))","user":"4fcf1755e4b03432b189f40c"},{"problem":135,"code":"(fn [& args]\n  (loop [x  (nth args 0) \n         op (nth args 1)\n         y  (nth args 2)\n         lst (drop 3 args)]\n    (let [ans (op x y)]\n      (if(empty? lst)\n        ans\n        (recur ans \n               (nth lst 0) \n               (nth lst 1) \n               (drop 2 lst))))))","user":"599ed08fe4b0871e7608b812"},{"problem":135,"code":"#(loop [[l f r & x] %&]\n   (if (empty? x)\n     (f l r)\n     (recur (cons (f l r) x))))","user":"54d341f7e4b0e8a36923e603"},{"code":"(fn f [x & e] \n  (reduce #((first %2) % (second %2)) x (partition 2 e)))","problem":135,"user":"4f01c938535dcb61093f6a39"},{"problem":135,"code":"(fn [initial-term & rest-expression]\n  (let [op-term-pairs (partition 2 rest-expression)]\n    (reduce (fn [result [op term]] (op result term))\n            initial-term\n            op-term-pairs)))","user":"54cc26c1e4b057c6fda3a28a"},{"code":"(fn[a & x]\n       (reduce (fn[v [o p]](o v p)) a (partition 2 x)))","problem":135,"user":"4e778d36535d324fb2983d71"},{"code":"(fn infix [v & rest]\n  (let [r (partition 2 rest)]\n    (reduce (fn [v1 [op v2]] (op v1 v2)) v r))\n  )","problem":135,"user":"51424cc8e4b0b50abeb46b34"},{"code":"(fn [& args]\n  (reduce #((first %2) %1 (second %2)) \n  (first args) (partition 2 (rest args))))","problem":135,"user":"5097ea89e4b087ccf61a7af4"},{"code":"(fn [& args]\n  (loop [args args]\n    (if (< (count args) 3) (first args)\n    \t(let [[a op b & args] args\n            x (op a b)]    \t\t\n          (recur (cons x args)))))\n)","problem":135,"user":"5081566ce4b0946d0443855b"},{"problem":135,"code":"(fn [ a b c & more]\n  (let [x (b a c)]\n    (if (empty? more)\n      x\n      (recur  x (first more) (second more) (drop 2 more)))))","user":"54f14aa6e4b024c67c0cf8af"},{"problem":135,"code":"(fn [v & rest]\n  (reduce #(let [[op w] %2]\n             (op % w)) v (partition 2 rest)))","user":"54fdbe3fe4b07d26eda61d3b"},{"code":"(fn\n  [& xs]\n  (loop [r (first xs)\n         xs (rest xs)]\n    (if (empty? xs)\n      r\n      (recur ((first xs) r (second xs)) (nthrest xs 2)))))","problem":135,"user":"4fdf566fe4b05e33b9224f99"},{"problem":135,"code":"(fn m\n  ([a op b] (op a b))\n  ([a op b & more] (let [a1 (op a b)\n                         op1 (first more)\n                         b1 (second more)\n                         more1 (drop 2 more)] (apply m a1 op1 b1 more1))))","user":"564da567e4b0284900eef682"},{"code":"(fn f\n  ([a * b] (* a b))\n  ([a * b & c] (apply f (cons (* a b) c))))","problem":135,"user":"534bde26e4b084c2834f4a81"},{"problem":135,"code":"(fn calc\n  ([x f y] (f x y))\n  ([x f y & args]\n   (apply calc (f x y) args)))","user":"5a065388e4b01bb0ae8afdcb"},{"code":"(fn [& xs]\n((fn [[e op e1 & es]] (if (empty? es) (op e e1) (recur (cons (op e e1) es)))) xs))","problem":135,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"code":"(fn [& v]\n   ((fn [[a o b & r]]\n      (if (nil? o) a (recur (cons (o a b) r)))) v))","problem":135,"user":"4ee868be535d93acb0a6687d"},{"code":"(fn [x & e] (reduce (fn [a [op b]] (op a b)) x (partition 2 e)))","problem":135,"user":"5028cd0fe4b01614d1633ffc"},{"code":"(fn f [a o b & c]\n  (if c\n    (apply f (o a b) c)\n    (o a b)))","problem":135,"user":"4e49badd535dc968683fc4c9"},{"problem":135,"code":"(fn [& args] \n  (loop [val (first args) op + sq (rest args)] \n    (cond \n     (empty? sq) val \n     (number? (first sq)) (recur (op val (first sq)) op (rest sq)) \n     :else (recur val (first sq) (rest sq)))))","user":"5d7a748ce4b02e6b30c93547"},{"problem":135,"code":"(fn [& c]\n  (loop [r (first c) c (next c)]\n    (if (seq c) (recur ((first c) r (second c)) (next (next c))) r)))","user":"5eff339ae4b0cf489e8d7f0c"},{"problem":135,"code":"(fn [& ls] (letfn [(calc ([x] x) ([x y & z] (y (apply calc z) x)))] (apply calc (reverse ls))))","user":"58e7229fe4b056aecfd47cc4"},{"problem":135,"code":"(fn inCalc\n  ([x] x)\n  ([x op & args] (apply inCalc (op x (Integer. (first args))) (rest args))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":135,"code":"#(reduce (fn [r [f n]] (f r n)) (first %&) (partition 2 (rest %&)))","user":"5fd92743e4b05ac5b16ea11f"},{"problem":135,"code":"(fn [t f & v]\n  (if (nil? f)\n    t\n    (let [[a b & c] v]\n      (recur (f t a) b c))))","user":"577ab41fe4b0d3393e5deb05"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [a [o b]] (o a b))\n          (first args)\n          (partition 2\n                     (rest args))))","user":"5c51c930e4b0fb8c5ffd99ce"},{"problem":135,"code":"(fn infix-calculator [& args]\n    (loop [args args]\n    (if (= (count args) 1)\n      (first args)\n      (let [[x op y & new-args] args]\n        (recur (cons (op x y) new-args))))))","user":"511720eae4b0063b4e3e16da"},{"problem":135,"code":"#(loop [[res first-operation first-num & rest-coll] %&]\n    (if first-operation\n      (recur (cons (first-operation res first-num) rest-coll))\n      res))","user":"5cc80598e4b0ccb061962840"},{"code":"(fn [f & r]\n   ((fn [acc [[op n] & r]]\n     (if (nil? op)\n       acc\n       (recur (op acc n) r)))\n    f (partition 2 r)))","problem":135,"user":"51fa90aae4b0f1313d4689e0"},{"problem":135,"code":"(fn\n  ([fst & others]\n    (loop [ttl fst op nil remaining others]\n      ;(println fst op (rest remaining))\n      (if (empty? remaining)\n        ttl\n        (if (= nil op)\n          ; no op, pass through total and the op/number\n          (if (number? (first remaining))\n            (recur ttl nil (rest remaining))\n            (recur ttl (first remaining) (rest remaining)))\n          ; op, update the ttl\n          (recur (op ttl (first remaining)) nil (rest remaining)))))))","user":"55d8bdcae4b0e31453f64abe"},{"code":"(fn [& a] (reduce #((nth %2 0) % (nth %2 1)) (first a) (partition 2 (rest a))))","problem":135,"user":"50e4f4e9e4b049a987753896"},{"code":"(fn t [& x] (if (= (count x) 3) ((second x) (first x) (nth x 2)) (apply t (cons ((second x) (first x) (nth x 2)) (drop 3 x)))))","problem":135,"user":"4ef6e689535dced4c769f24f"},{"code":"(fn [& args] (reduce (fn [l [op r]] (op l r)) (first args) (partition 2 (rest args))))","problem":135,"user":"52c5c1c8e4b0c2d177d620fc"},{"problem":135,"code":"(fn exprs \n  ([& args] \n   (println args)\n   (let [[op1 opr op2] (take 3 args)]\n     (if (nil? op2) op1\n         (apply exprs (opr op1 op2) (drop 3 args))))))","user":"57af41bce4b0fbc9809a2731"},{"problem":135,"code":"(fn infix \n  ( [f] f )\n  ( [f o s & r] (apply infix (cons (o f s) r)))\n)","user":"562add6de4b00e49c7cb4834"},{"problem":135,"code":"#(reduce \n   (fn [a [b c]] (b a c)) \n   %1 \n   (partition 2 %&))","user":"5463fbbde4b01be26fd746ca"},{"code":"#(if-let [[f x & r] %&] (recur (f % x) r) %)","problem":135,"user":"4f437751e4b0d7d3c9f3fd20"},{"problem":135,"code":"(fn [& args]\n  (loop [[a b & numbs] (filter number? args)\n         [f & others] (remove number? args)\n         result nil]\n    (if (nil? f)\n      result\n\t  (recur (conj numbs (f a b))\n             others\n             (f a b)))))","user":"579c35fee4b05b1deef9ae04"},{"code":"(fn [& s]\n    (loop [se s]\n    \n      (if (= 1(count se))\n        (first se) \n        (let [t3 (take 3 se) \n              p1 (first t3) \n              op (second t3) \n              p2 (last t3)]    \n        (recur (conj (drop 3 se) (op p1 p2)))))))","problem":135,"user":"4f29eb2ae4b0d6649770a037"},{"problem":135,"code":"#(reduce (fn [a [o v]] (o a v)) (first %&) (partition 2 (next %&)))","user":"59638af5e4b066ee0a44b0cc"},{"problem":135,"code":"(fn infix [x op y & more] \n  (if more\n    (apply infix (op x y) more)\n    (op x y)))","user":"53576356e4b04ce2eb3ed27a"},{"problem":135,"code":"(fn infix\n  ([n1 op n2 & r] (apply infix (op n1 n2) r))\n  ([n1 op n2] (op n1 n2)))","user":"5b77d3c8e4b047b03b2036f1"},{"problem":135,"code":";(fn [acc op & xs]\n;   (if (empty? xs)\n;     acc\n;     (recur (op acc (first xs)) (second xs) (drop 2 xs)))\n;   )\n; \n(fn [acc & args]\n  (->> args\n       (partition 2)\n       (reduce #((first %2) % (last %2)) acc))\n  )","user":"56f7ecdfe4b08e7d20b96834"},{"problem":135,"code":"(fn calc\n  ([a op b] (op a b))\n  ([a op b & rest] (apply calc (calc a op b) rest)))","user":"5a12dea3e4b04bbd27e6da44"},{"problem":135,"code":"(fn ff [a op b & args]\n  (let [r (op a b)]\n    (if (empty? args) r\n      (apply ff (cons r args)))))","user":"5bafd5c8e4b0a20761a234dd"},{"code":"(fn [& args]\n  (loop [left (drop 3 args)\n         out ((second args) (first args) (nth args 2))]\n    (if (empty? left)\n      \tout\n      \t(recur (drop 2 left) ((first left) out (second left))))))","problem":135,"user":"51baff1be4b0fe3ecfb46443"},{"problem":135,"code":"(fn c [x & args]\n  (reduce #((first %2) %1 (last %2))\n          x\n          (partition 2 args)))","user":"54df2609e4b024c67c0cf7a9"},{"problem":135,"code":"( fn infix \n  ([a op b] (op a b))\n  ([a op b & rst] (apply infix (op a b) rst ))\n  )","user":"5135a74ae4b04ac1f358dd46"},{"code":"(fn [& expr]\n  (reduce #((first %2) %1 (second %2)) (first expr) (partition 2 (rest expr))))","problem":135,"user":"4df407c3535d08e6dec9fe2e"},{"problem":135,"code":"(fn calc\n  [a o b & xs]\n  (if xs\n    (apply calc (o a b) xs)\n    (o a b)))","user":"542d2385e4b0dad94371f2b2"},{"problem":135,"code":"(fn infix\n  [& args]\n  (let [op? (complement integer?)]\n    (loop [ops (filter op? args)\n           nums (remove op? args)\n           acc 0]\n      (if (seq nums)\n        (if (zero? acc)\n          (recur (rest ops) (drop 2 nums) ((first ops) (first nums) (second nums)))\n          (recur (rest ops) (rest nums) ((first ops) acc (first nums))))\n        acc))))","user":"5574c172e4b05c286339e059"},{"problem":135,"code":"(fn infix \n  ([x] x)\n  ([x op y & args] (apply infix (op x y) args)))","user":"56c4f43ce4b05cc29241ee9c"},{"problem":135,"code":"(fn calc [& l]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity l))","user":"5bbbd484e4b0a20761a23617"},{"code":"(fn [& a]\n  (loop [l a]\n    (if (= (count l) 1)\n        (first l)\n        (recur (merge (rest (rest (rest l)))   ((second l) (first l) (second (rest l))) ) )\n    )\n  )\n)","problem":135,"user":"518aec06e4b06da86c1973c2"},{"problem":135,"code":"(fn [& args]\n  (loop [cumm (first args) rst (partition 2 (rest args))]\n    (if (> (count rst) 0)\n      (let [[op operand] (first rst)]\n        (recur (op cumm operand) (rest rst)))\n      cumm)))","user":"4daeff24edd6309eace4d16e"},{"problem":135,"code":"(fn [& ks]\n    (:value (reduce (fn [m value]\n                        (if (fn? value)\n                          (assoc m :operator value)\n                          (let [operator (:operator m)]\n                               (if (fn? operator)\n                                 (-> m\n                                     (assoc :operator nil)\n                                     (update-in [:value] #(operator % value)))\n                                 (assoc m :value value)))))\n                    {:value 0 :operator nil}\n                    ks)))","user":"5f331015e4b0574c87022c37"},{"problem":135,"code":"(fn infix\n  [& stuff]\n  (loop [a  (first stuff)\n         op (second stuff)\n         [n & stuff] (drop 2 stuff)]\n    (if (nil? n)\n      a\n      (recur (op a n) (first stuff) (drop 1 stuff)))))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":135,"code":"(fn [& tokens]\n  (loop [[left op right & tokens] tokens]\n    (let [val (op left right)]\n      (if (empty? tokens)\n        val\n        (recur (cons val tokens))))))","user":"4fe49706e4b0e8f79898feb7"},{"code":"(fn [& arguments] (loop [args arguments\n                         x -1\n                    \t y -1\n                    \t func nil\n                    \t xset false\n                    \t yset false\n                    \t funcset false]\n                    (if (empty? args)\n                      (func x y)\n                      (recur (if (and xset yset funcset)\n                               args\n                               (rest args))\n                             (if (and xset yset funcset)\n                               (func x y)\n                               (if (not xset)\n                                 (first args)\n                                 x))\n                             (if (and xset funcset (not yset))\n                               (first args)\n                               y)\n                             (if (and xset (not funcset))\n                               (first args)\n                               func)\n                             (if (not xset)\n                               true\n                               xset)\n                             (if (and xset yset funcset)\n                               false\n                               (if (and xset funcset (not yset))\n                                 true\n                                 yset))\n                             (if (and xset yset funcset)\n                               false\n                               (if (and xset (not funcset))\n                                 true\n                                 funcset))))))","problem":135,"user":"50214ffae4b0ef1d2d4433bc"},{"problem":135,"code":"(fn infix\n  [a op b & xs]\n  (loop [res (op a b), coll xs]\n    (if (zero? (count coll))\n      res\n      (recur ((first coll) res (second coll)) (drop 2 coll)))))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":135,"code":"(fn paska \n     [& args] (reduce #( (first %2) % (last %2) )    (first args)  (partition 2 (rest args))))","user":"575bd5f9e4b02ea114799365"},{"code":"(fn calculator [& xs]\n  (loop [res (first xs) ops (rest xs)]\n    (if (empty? ops) \n      res\n      (recur ((first ops) res (second ops))\n             (rest (rest ops))))))","problem":135,"user":"4e71a12c535d5021c1a8964f"},{"code":"(fn [& sq]\n  (let [opndx-list\n          (filter #(not (nil? %))\n            (map-indexed\n               (fn [idx itm]\n                 (if (not (number? itm))\n                   idx\n                   nil))\n               sq))\n         op-map {clojure.core$_PLUS_ @#'+, clojure.core$_ @#'-, \n                 clojure.core$_STAR_ @#'*, clojure.core$_SLASH_ @#'/} ]\n       (reduce\n          (fn [acc itm]\n            ((op-map (type (nth sq itm))) acc (nth sq (inc itm))))\n          (first sq)\n          opndx-list)))","problem":135,"user":"523bd9c0e4b07becd5be2201"},{"code":"(fn [& s]\n  (reduce (fn [x [y z]] (y x z)) 0 (partition 2 (cons + s))))","problem":135,"user":"4f954dbce4b0dcca54ed6ccd"},{"problem":135,"code":"(fn infix ([x y z] (y x z)) ([x y z & more] (apply infix (cons (y x z) more))))","user":"6076adb2e4b069485764de60"},{"problem":135,"code":"(fn [& cs] (reduce #((first %2) % (second %2)) (first cs) (partition 2 (rest cs))))","user":"4e68c465535d8ccf87e9fe8a"},{"problem":135,"code":"(fn ! [& exp]\n  (let [[o1 o o2] (take 3 exp)\n        res (o o1 o2)\n        more (drop 3 exp)]\n    (if (seq more)\n      (apply ! (cons res more))\n      res)\n    ))","user":"557232a1e4b09a3098a52543"},{"problem":135,"code":"(fn calc [& args]\n  (let [[a b c & d] args]\n    (loop [x a y b z c r d]\n      (if (not r)\n        (y x z)\n        (recur (y x z) (first r) (second r) (next (next r)))))))","user":"561a1af6e4b053970a773b02"},{"problem":135,"code":"(fn f\n    [& args]\n    (let [infix (fn infix\n                  [curr args]\n                  (cond (empty? args) curr\n                        :else         (infix\n                                        ((nth args 0) curr (nth args 1))\n                                        (rest (rest args)))))]\n      (infix (first args) (rest args))))","user":"56df62eee4b0ca2494a095f0"},{"code":"(fn [x & xs] (reduce (fn [y [op z]] (op y z)) x (partition 2 xs)))","problem":135,"user":"52470d42e4b05ef8e38e6350"},{"problem":135,"code":"(fn [& args]\n  (loop [jono (rest args) result (first args) ]\n    (if (empty? jono)\n      result\n      (recur (drop 2 jono) ((first jono) result (second jono))))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":135,"code":"(fn [& args]\n  (reduce #((first %2) %1 (second %2)) (first args) (partition 2 (rest args)) \n  \n  \n  )\n  )","user":"56db90d4e4b0ea9b8538f80d"},{"problem":135,"code":"(fn [& args]\n  (let [[x f y] (take 3 args)]\n    (loop [res (f x y)\n           calc (drop 3 args)]\n      (if (empty? calc)\n        res\n        (let [[f x] (take 2 calc)]\n          (recur (f res x) (drop 2 calc)))))))","user":"5b72b36ce4b047b03b2036a9"},{"problem":135,"code":"(fn f [& args]\n  (loop [args1 (rest args) acc (first args)]\n    (if (empty? args1)\n      acc\n      (recur (rest (rest args1)) ((first args1) acc (second args1)))\n    )\n  )\n)","user":"55280930e4b0ffed3738f93b"},{"problem":135,"code":"(fn [& params]\n   (loop [value (first params)\n          list (rest params)]\n     (if (empty? list)\n       value\n       (recur (#((first list) %1 %2) value (second list)) (rest (rest list))))))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn [x f y & more]\n  (loop [tot x f f y y remain more]\n    (let [tot (f tot y)]\n      (if (seq remain)\n        (recur tot (first remain) (second remain) (nthnext remain 2))\n        tot))))","problem":135,"user":"50e3cf55e4b01912b3285c45"},{"problem":135,"code":"(fn [f & re]\n  ((fn s [r p]\n    (if (zero? (count p))\n      r\n      (s ((first p) r (second p)) (drop 2 p))\n    )\n  ) f re))","user":"53ae16e2e4b047364c044472"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [a b] \n            (if (fn? a)\n              (a b)\n              (fn [x] (b a x))))\n          args))","user":"5c3a896be4b0d62ef62d9f94"},{"problem":135,"code":"(fn f ([v] v) ([a o c & t] (apply f (o a c) t)))","user":"5282f54be4b0239c8a67ada0"},{"code":"(fn ! [& args]\n      (loop [result (first args) args1 (rest args)]\n        (if (empty? args1)\n          result\n          (recur ((first args1) result (first (rest args1))) (rest (rest args1)) )\n          )\n        )\n      )","problem":135,"user":"4ea31da2535d7eef308072c1"},{"problem":135,"code":"(fn infix [& col]\n  (let [acc (first col)\n        exprs (partition 2 (rest col))]\n    (println acc col)\n    (reduce #((first %2) %1 (second %2)) acc exprs)))","user":"569dd6e8e4b0542e1f8d1480"},{"code":"(fn [& l] (letfn [(helper [[x1 op x2 & rest]] \n                           (if (empty? rest) \n                             (cons (op x1 x2) rest) \n                             (helper (cons (op x1 x2) rest))))] \n             (first (helper l))))","problem":135,"user":"52265e41e4b04e78ff2e1981"},{"problem":135,"code":"(fn [& datas] \n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity datas))","user":"5fa358a1e4b0f0ebd91b77fd"},{"code":"(fn [v & ops]\n  (reduce (fn [v1 [op v2]]\n            (op v1 v2))\n          v (partition 2 ops)))","problem":135,"user":"5107b86de4b05b2b4eee7495"},{"problem":135,"code":"(fn simple-calc\n  \t([x] x)\n  \t([x op y & more]\n     (apply simple-calc (op x y) more)))","user":"56897739e4b0dcc4269f407d"},{"code":"(fn [x & xs]\n  (reduce #((first %2) % (second %2)) x (partition 2 xs)))","problem":135,"user":"4fcf642ee4b03432b189f410"},{"code":"(fn [& args] (loop [[a b c & d] args]\n    (if (nil? d) (b a c) (recur (cons (b a c) d))\n  )))","problem":135,"user":"50921f9ae4b09a7d0b586de1"},{"code":"(fn aa [& args]\n (first (reduce #(if (or (= (last %1) +) (= (last %1) -) (= (last %1) *) (= (last %1) /))\n                     \n                     \n                     \n                     (conj (vec (drop-last 2 %1)) ((last %1) (last (butlast %1)) %2)) (conj %1 %2)) [] args)\n             ) \n     \n                   )","problem":135,"user":"5105ed16e4b01150e115ebe2"},{"problem":135,"code":"(fn f\n  [& joe]\n  (loop\n      [joe joe\n       joe2 (rest joe)\n       numero (first joe)]\n\t(if (empty? joe2)\n      numero\n    (recur joe (rest (rest joe2)) ((first joe2) numero (second joe2))))))","user":"56df63e1e4b0ca2494a095f6"},{"code":"(fn infix [& args] \n  (if (= (count args) 1) \n    (first args)\n    (let [[a op b] (take 3 args)]\n    \t(apply infix (cons (op a b) (drop 3 args))))))","problem":135,"user":"51990df9e4b068aa333628fc"},{"code":"(fn [& paras]\n  (loop [result (first paras)\n         form (rest paras)]\n    (if (empty? form)\n      result\n      (recur (apply (first form)\n                    [result (second form)])\n             (drop 2 form)))))","problem":135,"user":"5092fe10e4b097f48cc3857e"},{"problem":135,"code":"(fn [n & args]\n  (loop [acc n\n         [f x & xs] args]\n    (if (empty? xs)\n      (f acc x)\n      (recur (f acc x) xs))))","user":"53528cd3e4b084c2834f4af2"},{"code":"(fn [x & xs]\n  (reduce (fn [x [o op]] (o x op)) x\n    (partition 2 xs)))","problem":135,"user":"506406c8e4b075d771da6f9f"},{"problem":135,"code":"(fn [& xs]\n     (loop [ys (rest xs) r (first xs)]\n           (if (empty? ys)\n               r\n               (let [op (first ys)\n                     v (second ys)]\n                    (recur (rest (rest ys)) (apply op (list r v)))))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn i\n  ([a f b] (f a b))\n  ([a f b c & x] (apply i (f a b) c x)))","problem":135,"user":"4fadbb17e4b081705acca23e"},{"problem":135,"code":"(fn [initial-val & args]\n    (let [operation-pairs (partition 2 args)]\n      (reduce #((first %2) %1 (last %2)) initial-val operation-pairs)))","user":"5a0a3473e4b0eab8c0448941"},{"problem":135,"code":"(fn[& args](\n (fn x[n c r]\n  (if (empty? c) n (x ((first c) n (last c)) (take 2 r) (drop 2 r))\n  )\n )\n (first args) (take 2 (rest args)) (drop 2 (rest args))\n))","user":"574a9132e4b02ea1147991fd"},{"problem":135,"code":"(fn [& args]\n  (loop [result (first args) col (next args)]\n    (if (empty? col)\n      result\n      (recur ((first col) result (first (next col))) (next (next col))))))","user":"541f89a5e4b01498b1a71a99"},{"code":"(fn [& args]\n  (let [f (first args)\n        s (second args)\n        t ((comp first rest rest) args)]\n    (if (= (count args) 1)\n      (first args)\n      (recur (cons (s f t) ((comp rest rest rest) args))))))","problem":135,"user":"5098f5d6e4b0cae2931060a4"},{"code":"(fn infix-eval [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [[a op b] (take 3 args)\n          remaining (drop 3 args)\n          value (op a b)]\n      (apply infix-eval\n             (cons value remaining)))))","problem":135,"user":"530578ede4b0d8b024fd3760"},{"problem":135,"code":"(fn[& args]\n  (let [[lhs op rhs & other] args r (op lhs rhs)]\n    (if (empty? other) r (recur (cons r other)))))","user":"5b6473eee4b0c6492753e73f"},{"code":"(fn infix [r & opt]\n   (if opt\n     (let [act (nth opt 0)\n           num2 (nth opt 1)\n           args (concat [(act r num2)] (drop 2 opt))\n           ]\n       (apply infix args)\n       )\n     r\n     ))","problem":135,"user":"51d9eb05e4b02ceefd947755"},{"problem":135,"code":"(fn infix-calculator\n  [left-operand operator right-operand & rest-expr]\n   (let [result (operator left-operand right-operand)]\n     (if (empty? rest-expr)\n       result\n       (apply infix-calculator (cons result rest-expr)))))","user":"55dcb06ee4b050e68259b3b9"},{"code":"(fn [a & xs]\n  (reduce #((first %2) %1 (last %2)) a (partition 2 xs)))","problem":135,"user":"51d10b1fe4b067c36548635e"},{"code":"(fn [& args] \n   ((fn ! [x] (if(= 1 (count x)) \n             (first x) \n              ((second x) (!(drop 2 x)) (first x)))) (reverse args)))","problem":135,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":135,"code":"(fn [& args] (loop [acc (first args) sq (rest args)]\n              (if (empty? sq)\n                acc\n                (recur ((first sq) acc (fnext sq)) (drop 2 sq)))))","user":"58225587e4b04b46fc4b0f94"},{"problem":135,"code":"(fn [& as] \n     (reduce (fn [x [op y]] (op x y))\n             (first as)\n             (partition 2 (rest as))))","user":"59bac5c9e4b0a024fb6ae3ed"},{"code":"#(reduce (fn [t [o a]] (o t a)) (first %&) (partition-all 2 (rest %&)))","problem":135,"user":"528d1094e4b0239c8a67aebe"},{"problem":135,"code":"(fn infix ([x op y] (op x y))\n  ([ x op y & xs] (apply infix (op x y) xs)))","user":"58cf00c8e4b03c36ff7e58ac"},{"code":"(fn calc [left op right & etc]\n  (let [result (op left right)]\n    (if (nil? etc)\n      result\n      (apply calc result etc))))","problem":135,"user":"53779a26e4b06839e8705e38"},{"problem":135,"code":"(fn [i & args]\n    (reduce (fn [x [f y]] (f x y)) i (partition 2 args)))","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(fn simple-calc\n  [& args]\n  (let [*coll (into [] args)\n        *coll2 (rest (rest (rest *coll)))\n        res ((second *coll) (first *coll) (second (rest *coll)))]\n    (if (empty? *coll2)\n      res\n      (recur (cons res (into []  *coll2))))))","problem":135,"user":"4e3bcccd535deb9a81d77f56"},{"problem":135,"code":"(fn compute [a b c & rst]\n  (if (empty? rst) (b a c)\n  \t(apply compute  (b a c) (first rst) (second rst) (drop 2 rst))))","user":"54f4a457e4b0f2f3c5226e83"},{"problem":135,"code":"(fn [& more]\n  (reduce  \n   #((first %2) %1 (second %2))\n   (first more)\n   (partition 2 (rest more)))\n  )","user":"5510d948e4b06e50f9beb18d"},{"problem":135,"code":"(fn [a1 f a2 & xs]\n    (loop [f  f\n           a1 a1\n           a2 a2\n           xs xs]\n      (if (or (nil? xs) (= xs '()))\n        (f a1 a2)\n        (recur (first xs)\n               (f a1 a2)\n               (first (rest xs))\n               (rest (rest xs))))))","user":"559a9a3de4b066d22e731f45"},{"code":"(fn [& exp]\r\n    (let [ops (filter fn? exp)\r\n          nums (reverse (remove fn? exp))\r\n          rpn (concat nums ops)]\r\n      (peek (reduce (fn [stack item]\r\n                      (if (fn? item)\r\n                        (let [a (peek stack)\r\n                              b (peek (pop stack))]\r\n                          (conj (pop (pop stack)) (item a b)))\r\n                        (conj stack item))) [] rpn))))","problem":135,"user":"4f047177535dcb61093f6bc6"},{"problem":135,"code":"(fn infix [& args]\n  (reduce (fn [a [op b]] (op a b))\n          (first args)\n(partition 2 (rest args))))","user":"5950f0bfe4b066ee0a44ae9f"},{"code":"(fn f [x y & z]\n  (if (empty? (rest z)) \n    (y x (first z))\n    (apply f (cons (y x (first z)) (rest z)))))","problem":135,"user":"5102489de4b00c483ae176f6"},{"problem":135,"code":"(fn [& s]\n  (reduce #((first %2) %1 (second %2)) (first s) (partition 2 (rest s))))","user":"56bca51ae4b0f26550335963"},{"code":"(fn infix [x f y & more]\n  (let [nx (f x y)]\n    (if (empty? more) nx\n      (apply infix nx more))))","problem":135,"user":"4e9ff8d0535d7eef3080729c"},{"problem":135,"code":"(fn f\n  ([x] x)\n  ([l o r & v] (apply f (o l r) v)))","user":"55d1b565e4b0e31453f64a49"},{"code":"(fn calc [x f y & next]\n  (let [x (f x y)]\n    (if (seq next)\n      (apply calc x next)\n      x)))","problem":135,"user":"4fa5406fe4b081705acca1ac"},{"problem":135,"code":"(fn simple-calc\n  [hh & tt]\n  (loop [[op arg & t] tt\n         accum hh]\n    (let [new-accum (op accum arg)]\n      (if (nil? t)\n          new-accum\n          (recur t new-accum)))))","user":"58152157e4b0f478707a0631"},{"problem":135,"code":"(fn [x op y & rem]\n  (if (empty? rem)\n    (op x y)\n    ((fn [res [op2 z & rem2]]\n      (if (empty? rem2)\n        (op2 res z)\n        (recur (op2 res z) rem2)))\n    (op x y) rem)))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":135,"code":"(fn [& lst]\n  (loop [acc (first lst) \n         rem-list (rest lst)]\n    (if (empty? rem-list)\n      acc\n      (recur ((first rem-list)\n              acc\n              (second rem-list))\n             (rest (rest rem-list))))))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":135,"code":"(fn calc [a o b & other]\n  (let [res (o a b)] \n    (if (empty? other)\n      res\n      (apply calc (cons res other)))))","user":"594263cbe4b060784b3b790a"},{"problem":135,"code":"(fn infix\n  ([a] a)\n  ([a op b] (op a b))\n  ([a op b & rest] (apply infix (cons (op a b) rest))))","user":"4eda8d7c535d10e5ff6f530f"},{"problem":135,"code":"(fn math [one op two & more]\n  (if (not more)\n    (op one two)\n    (apply math (cons (op one two) more))))","user":"581e8b86e4b04b46fc4b0f2b"},{"problem":135,"code":"(fn [& lst]\n  (loop [l lst]\n    (cond \n     (= 1 (count l)) (first l)\n     :else (let [[a op b & r] l] (recur (cons (op a b) r))))))","user":"545e7ab0e4b01be26fd7467c"},{"code":"(fn i [x y z & r]\n  (let [f (y x z)]\n    (if (empty? r) f\n      (apply i (conj r f)))))","problem":135,"user":"514d8084e4b019235f6c0588"},{"problem":135,"code":"(fn f [& args] (loop [od1  (nth args 0)\n        op   (nth args 1)\n        od2  (nth args 2)\n        tail (drop 3 args )]\n   (let [res (apply op [od1 od2])]\n     (if (> (count tail) 0)\n       (recur res (first tail) (second tail) (drop 2 tail))\n       res)) )  \n   )","user":"53d64811e4b0e771c3025456"},{"problem":135,"code":"(fn [init & ops]\n  (reduce #((first %2) %1 (second %2)) init (partition 2 ops)))","user":"5292feb4e4b0239c8a67af39"},{"code":"#(reduce (fn [x [o y]] (o x y)) % (partition 2 %&))","problem":135,"user":"4db92654535d1e037afb21a0"},{"code":"(fn [& e]\r\n  (loop [s 0\r\n         fs (partition 2 (concat [+] e))]\r\n    (if (nil? fs)\r\n      s\r\n      (recur ((first (first fs)) s (second (first fs)))  (next fs)))))","problem":135,"user":"4fab31a8e4b081705acca215"},{"problem":135,"code":"(fn [a & b] (loop [x a y b] (if (empty? y) x (recur ((first y) x (second y)) (drop 2 y)))))","user":"55c3f19de4b0e31453f64991"},{"problem":135,"code":"(fn [& ys] \n  (loop [xs (rest ys), acc (first ys)]\n    (cond\n     (empty? xs) acc\n     :else (recur (drop 2 xs) ((first xs) acc (second xs))))))","user":"552b6ddbe4b0ffed3738f965"},{"problem":135,"code":"(fn f [a op b & etc] \n  (if (seq? etc) (apply f (cons (op a b) etc))\n   (op a b)\n))","user":"5f686436e4b02876ed9fd03c"},{"code":"(fn infix-calc [& args]\n  (let [result ((second args) (first args) (nth args 2))]\n    (if (= (count args) 3)\n      result\n      (apply infix-calc result (nthrest args 3)))))","problem":135,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":135,"code":"(fn [i & op]\n\t(reduce (fn [x [op y]] (op x y)) i (partition 2 op))\n)","user":"5d2201b8e4b02ea6f0fb69ed"},{"problem":135,"code":"(fn f1[a o b & v]  \n  \t(let [head (o a b)]\n     (if v (apply f1 head v) head))\n   )","user":"52271ffee4b04e78ff2e19a9"},{"problem":135,"code":"(fn infix [& colls]\n  (loop [xs (rest colls)\n         cur (first colls)]\n    (if (empty? xs) \n      cur\n        (recur (drop 2 xs) ((first xs) cur (second xs))))))","user":"5a67cedbe4b0512ff01cd9ee"},{"problem":135,"code":"(fn prob135 [val & others]\n  ;; a X b X c\n  (loop [acc val\n         stack others]\n    (if (empty? stack)\n      acc\n      (let [op (first stack)\n            b (second stack)\n            rem (rest (rest stack))]\n        (recur (op acc b) rem)))))","user":"4ebbff41535dfed6da9c6d78"},{"problem":135,"code":"(fn infix-calculator\n  [& args]\n  (let [a (first args)\n        rest-args (partition 2 (rest args))]\n    (reduce #((first %2) %1 (second %2)) a rest-args)))","user":"59b9e669e4b0a024fb6ae3db"},{"code":"(fn [& terms]\n    (loop [v (first terms) [op operand & tail] (drop 1 terms)]\n      (if (nil? op)\n        v\n        (recur (op v operand) tail))))","problem":135,"user":"50cb4cf6e4b0f78a8e1645b4"},{"code":"(fn [& ops]\n  (reduce (fn [a [op b]] (op a b))\n          (first ops)\n          (partition 2 (rest ops))))","problem":135,"user":"520612a7e4b0bf4f1882c81c"},{"code":"(fn [& args]\n  (if (= (count args) 1) (first args)\n      (let [x (first args)\n            op (second args)\n            y (second (rest args))\n            rst (rest (rest (rest args)))]\n        (recur (cons (op x y) rst)))))","problem":135,"user":"4ed45563535d10e5ff6f52c9"},{"problem":135,"code":"(fn [x op y & rest] (if (empty? rest) (op x y) (recur (op x y) (first rest) (second rest) (drop 2 rest))))","user":"544285dde4b032a45b869380"},{"problem":135,"code":"(fn compute [& args]\n  (loop [num 0\n         op +\n         others args]\n    (if (empty? others)\n      num\n      (recur (op num (first others)) (second others) (drop 2 others)))))","user":"4f041de1535dcb61093f6ba5"},{"problem":135,"code":"(fn [& args] (let [_nums (flatten (partition 1 2 (vec args)))\n                   _ops (vec (flatten (partition 1 2 (rest args))))]\n               (loop [result (apply (_ops 0) (take 2 _nums))\n                      ops (vec (next _ops))\n                      nums (vec (drop 2 _nums))]\n                 (if (empty? ops) result\n                     (recur (apply (ops 0) (cons result [(nums 0)]))\n                            (vec (next ops))\n                            (vec (next nums)\n                                 ))))))","user":"5e8ce2fee4b0cb0169546328"},{"problem":135,"code":"(fn [x & args]\n  (loop [value x args args]\n    (if (empty? args)\n      value\n      (recur ((first args) value (second args)) (rest (rest args)))\n      )\n    )\n  )","user":"5776558ee4b0979f89651633"},{"code":"(fn [& c] \n  (reduce \n    (fn [x y] \n      (if \n        (number? x) \n        (fn [z] (y x z)) \n        (x y)\n      )\n    ) \n    c\n  )\n)","problem":135,"user":"5162757ee4b03cfa3774b3fe"},{"problem":135,"code":"(fn infix \n  ([x op y] (op x y))\n  ([x op y & xs]\n   (apply infix (op x y) xs)))","user":"55f73078e4b06e875b46cea4"},{"code":"(fn self [& input]\n  (if (= 1 (count input)) (first input)\n      (let [[n1 op n2 & rest] input]\n        (apply self (cons (op n1 n2) rest))\n        )))","problem":135,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":135,"code":"#(loop [x %1 f %2 y %3 g %&] \n   (if\n     (empty? g) (f x y) \n     (recur (f x y) (first g) (second g) (drop 2 g))\n     )\n   )","user":"51e1c176e4b06a68e693eafb"},{"code":"(fn [& args]\r\n  (let [ops #{+ - / *}\r\n        calc\r\n          (fn [cur acc rsq]\r\n            (cond\r\n              (empty? rsq)\r\n                acc\r\n              (ops cur)\r\n                (recur (second rsq) (cur acc (first rsq)) (-> rsq rest rest))\r\n              :else\r\n                (recur cur acc (rest rsq))))]\r\n    (calc (second args) (first args) (-> args rest rest))))","problem":135,"user":"4ee40938535d10e5ff6f5375"},{"code":"(fn calc ([x] x)\n         ([a op b] (op a b))\n         ([a op b & rest] (apply calc (cons (op a b) rest) )))","problem":135,"user":"4db883e1535d1e037afb2198"},{"problem":135,"code":"(fn infix ([x] x)\n    ([x o y & more] (apply infix (conj more (o x y)))))","user":"533975f0e4b0e30313ee6ca9"},{"problem":135,"code":"(fn infix-math [a op b & args]\n  (if args\n      (apply infix-math (op a b) args)\n      (op a b)))","user":"5a022949e4b01bb0ae8afd60"},{"code":"(fn infix ([a b c] (b a c))\r\n  \t      ([a b c & more]\r\n\t\t\t  (apply infix (infix a b c) more)))","problem":135,"user":"4e370a04535deb9a81d77f37"},{"problem":135,"code":"(fn inCal\n  [n & exp]\n  (if (empty? exp)\n   n\n  (recur ((first exp) n (second exp)) (drop 2 exp))\n    )\n  )","user":"5c82db41e4b0c8042a70ce42"},{"problem":135,"code":"(fn c [i & a] (if (empty? a) i (apply c ((first a) i (second a)) (drop 2 a))))","user":"552694e7e4b0ffed3738f920"},{"problem":135,"code":"#(loop [[x f y & r] %&] (if-not r (f x y) (recur (cons (f x y) r))))","user":"5e3071abe4b05b4b01516213"},{"code":"(fn [& xs]\n  (first \n   (reduce (fn [acc i]\n             (if (and (number? i) (not (empty? acc)))\n               (cons ((first acc) (second acc) i) (drop 2 acc))\n               (cons i acc)))\n           []\n           xs)))","problem":135,"user":"5173726be4b098276e74652c"},{"code":"(fn infix-calc [x & others]\n  (let [[operation y & ops] others]\n     (if (nil? operation) x\n       (apply infix-calc \n         (cons \n           (operation x y) \n           ops))\n       )\n    )\n  )","problem":135,"user":"4ecfa05c535d44c135fd68b9"},{"problem":135,"code":"(fn foo[& args]\n  (first (reduce (fn[m e] (if (== (count m) 2) \n                       (vector ((nth m 1) (nth m 0) e))\n                       (conj m e))) \n  [] args)))","user":"5537b2c7e4b09218d5f44fce"},{"problem":135,"code":"(fn calc--comp\n  [& [init & ops :as expr]]\n  {:pre [(even? (count ops)),\n         (if (seq expr) (number? init))\n         (for [[op x] (partition 2 ops)]        ; This checks that expr consists\n           (and (#{+ - * /} op) (number? x)))]} ; of alternating nums and ops.\n  (let [r-partial (fn [f y] (fn [x] (f x y))),\n        r-comp (fn [f g] (comp g f))]\n    ((->> (map r-partial ops (rest ops))\n          (take-nth 2)\n          (reduce r-comp))\n     init)))","user":"4fc6305de4b0ee37620e180b"},{"problem":135,"code":"(fn infix [& args]\n  (loop [out (first args) rem-args (drop 1 args)] \n    (if (< (count rem-args) 2) out\n      (recur (apply #(% out %2) (take 2 rem-args)) (drop 2 rem-args)))))","user":"53e76bb2e4b036ad0777e47d"},{"problem":135,"code":"(fn f [a op b & r]\n  (let [v (op a b)]\n    (if r (apply f v r) v)))","user":"4e7db3b4535db169f9c796e1"},{"problem":135,"code":"(fn [& args]\n  (reduce #(if (fn? %2) (partial %2 %1) (%1 %2)) args)\n)","user":"6059d824e4b07e92fa001acf"},{"problem":135,"code":"(fn [a f b & r]\n  (loop [a a f f b b l r]\n    (if (nil? b) a\n      (recur (f a b) (first l) (second l) (rest (rest l))))))","user":"57d9f603e4b0bd073c20240a"},{"problem":135,"code":"(fn [& args]\n  (reduce\n     (fn [total [operator arg]] (operator total arg))\n     (first args)\n     (partition 2 (rest args))))","user":"4df73d64535d04ed9115e775"},{"problem":135,"code":"(fn calc \n  ([lhs op rhs & remaining] \n   \t(apply calc (op lhs rhs) remaining)) \n  ([lhs] lhs))","user":"536f96e3e4b0fc7073fd6e83"},{"code":"(fn [ival & terms]\n  (loop [cterms terms, result ival]\n    (if (< (count cterms) 2)\n      result\n      (recur (nnext cterms) (apply (first cterms) (vector result (second cterms)))))))","problem":135,"user":"4ec5cdb0535d6d7199dd36b8"},{"code":"(fn z ( [n] n)\n  ([ a b c & l] (apply z (conj l (b a c)))))","problem":135,"user":"52bb27fee4b07a9af57922df"},{"code":"(fn calc [& args]\n  (if (= (count args) 3)\n    (let [[a b c] args]\n      (b a c))\n    (let [a (drop-last 2 args) b (last (drop-last 1 args)) c (last args)]\n      (b (apply calc a) c))))","problem":135,"user":"4ddb696b535d02782fcbe9fa"},{"problem":135,"code":"(fn infix-calc\n([n] n)\n  ([n val x & res] \n   (apply infix-calc (val n x) res)))","user":"5a99b861e4b0d174b936c7ad"},{"code":"(fn infix [x op y & expr]\n  (if (empty? expr) (op x y)\n      (apply infix (cons (op x y) expr))))","problem":135,"user":"4f567cdbe4b0a7574ea71824"},{"problem":135,"code":"(fn [& args]\n  (loop [acc (first args) op (rest args)]\n    (do\n      (println acc \" \" op)\n      (if (empty? op)\n        acc\n        (recur ((first op) acc (second op)) (drop 2 op))))))","user":"57f80350e4b0d3187e90090c"},{"problem":135,"code":"(fn values [& symbols] \n  (loop [acc (first symbols) \n         syms (rest symbols)] \n    (if \n      (empty? syms) acc\n      (recur ((first syms) acc (second syms)) (nthrest syms 2)))))","user":"57297fb2e4b0c6e51e0d2b1c"},{"code":"(fn infix\n  ([x] x)\n  ([x op y & more] (apply infix (op x y) more)))","problem":135,"user":"4f3444b7e4b0e243712b1eb6"},{"problem":135,"code":"(fn [x & as]\n  (let [ops (partition 2 as)]\n    (reduce (fn [res [op arg]] (op res arg)) x ops)))","user":"548fa2dfe4b0e286459a1240"},{"code":"(fn infix-calc [& ops]\n  (if (= 1 (count ops))\n    (first ops)\n    (apply infix-calc \n     (cons \n      ((second ops) (first ops) (nth ops 2)) \n      (drop 3 ops)))))","problem":135,"user":"51e38568e4b0c611d6113e43"},{"problem":135,"code":"(fn \n  [& args] \n  (reduce \n   (fn [a [f b]] (f a b))\n   (first args)\n   (partition 2 (rest args)))\n  )","user":"5b857411e4b047b03b2037ce"},{"problem":135,"code":"(fn infix [& args]\n  (if (= 1 (count args))\n      (nth args 0)\n      (loop [a (nth args 0)\n             b (nth args 1)\n             c (nth args 2)]\n        (apply infix (b a c) (drop 3 args)))))","user":"4f8ac2bde4b02e764a0a5172"},{"problem":135,"code":"(fn [a & expr]\n  (let [r (partition 2 expr)]\n    (reduce (fn [x [op y]] (op x y)) a r)))","user":"5484143de4b0e286459a1197"},{"code":"(fn calculate [& coll]\n  (cond (= 1 (count coll)) (first coll)\n    (= 3 (count coll)) ((second coll) (first coll) (last coll))\n        :else (apply calculate (cons (apply calculate (take 3 coll)) (drop 3 coll)))))","problem":135,"user":"51780f88e4b03d69594194c9"},{"problem":135,"code":"(fn [x op y & rest] \n  (if (empty? rest)\n    (op x y)\n    (recur (op x y) (first rest) (second rest) (drop 2 rest))))","user":"5405ae2be4b0addc1aec6671"},{"code":"(fn c [a o b & r]\n  (let [n (o a b)]\n    (if (empty? r)\n      n\n      (apply c (cons n r)))))","problem":135,"user":"538be6afe4b0640c7a9a58c9"},{"problem":135,"code":"(fn [& ops]\n    (let [numbers (group-by number? ops)\n          nums (numbers true)\n          ops (numbers false)]\n\t(reduce (fn [acc [n op]]\n              (op acc n))\n            (first nums)\n            (map vector (drop 1 nums) ops))))","user":"576b4e6be4b0a07e8fc1812b"},{"problem":135,"code":"(fn calc\n  [& n]\n  (reduce #((first %2) %1 (last %2)) (first n) (partition 2 (rest n))))","user":"57f81534e4b0d3187e900915"},{"code":"(fn [& s]\n  (reduce \n   (fn [a b] (if (fn? b) #(b a %) (a b))) s))","problem":135,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":135,"code":"(fn [& args] (first (reduce (fn [[y op] x] (if (fn? x) [y x] [(op y x) op])) [0 +] args)))","user":"56aad332e4b03c432f187337"},{"code":"(fn cal [& more]\n  (loop [l (first more)\n         r (rest more)]\n    (if (nil? (second r))\n      l\n      (recur ((first r) l (second r)) (drop 2 r)))))","problem":135,"user":"51502056e4b098b221effc25"},{"problem":135,"code":"(fn infix [n f n2 & r] \n    (let [acc (f n n2)]\n      (if r \n        (apply infix acc r)\n        acc)))","user":"5368fedee4b0243289761e93"},{"problem":135,"code":"(fn [& args]\n    (loop [result (first args)\n           rem (rest args)]\n      (if (empty? rem) \n        result\n        (recur ((first rem) result (second rem)) (drop 2 rem)))\n      ))","user":"5ea6fe98e4b00a66d4a951b2"},{"problem":135,"code":"(fn [num & args]\n  (reduce (fn [a b] ((first b) a (last b))) num (partition 2 args))\n  )","user":"5cd4e1b2e4b0ccb061962927"},{"problem":135,"code":"(fn foo [x op y & body] (if (seq body) (apply foo (op x y) body) (op x y)))","user":"513e8141e4b02b2a3d8235c1"},{"code":"(fn $\n  ([a] a)\n  ([a b c & d] (apply $ (conj d (b a c)))))","problem":135,"user":"53712c03e4b0fc7073fd6ea9"},{"problem":135,"code":"(fn calc [accum func & body] (if (nil? func)\n                                accum\n                                (apply calc (flatten (list (func accum (first body)) (first (rest body)) (rest (rest body))))))\n  )","user":"5759cd46e4b02ea11479932e"},{"problem":135,"code":"(fn calculator [& args]\n  (loop [in args\n         op1 nil\n         op2 nil\n         func nil]\n    (cond\n      (and (not (nil? op1)) (not (nil? op2)) (not (nil? func))) (recur in (func op1 op2) nil nil )\n      (empty? in) op1\n      (and (integer? (first in)) (nil? op1)) (recur (rest in) (first in) op2 func)\n      (and (integer? (first in)) (not (nil? op1))) (recur (rest in) op1 (first in) func)\n      (not (integer? (first in))) (recur (rest in) op1 op2 (first in))\n    )))","user":"551d5cb9e4b07993ea3788e9"},{"problem":135,"code":"(fn [n & args]\n  (reduce #(let [x %1, [op y] %2] (op x y)) n (partition 2 args)))","user":"567695c2e4b05957ce8c6157"},{"problem":135,"code":"(fn [a & xs] (reduce (fn [s [f x]] (f s x)) a (partition 2 xs)))","user":"55cdc576e4b0e31453f64a1f"},{"problem":135,"code":"(fn [& params]\n  (loop [coll params]   \n   (let [[p1 op p2] (take 3 coll)]  \n     (if (= 1 (count coll))\n         (first coll)\n         (recur (conj (drop 3 coll) (op p1 p2)))))))","user":"5794fd7be4b0e215f87e8476"},{"problem":135,"code":"(fn t [l op r & ops]\n   (if ops\n     (let [ret (op l r)]\n       (apply t (cons ret ops)))\n     (op l r))\n   )","user":"542b764ae4b0dad94371f28d"},{"problem":135,"code":"(fn [& ops]\n  (reduce (fn [total pair]\n            (let [[operator next-operand] pair]\n              (operator total next-operand)))\n          (first ops) (partition 2 (rest ops))))","user":"4fe899a6e4b07c9f6fd12c54"},{"code":"(fn in-math [& coll]\n  (loop [coll coll]\n    (let [[a b c] (take 3 coll)\n          left (drop 3 coll)]\n      (if (empty? left)\n        (b a c)\n        (recur (cons (b a c) left))))))","problem":135,"user":"52a55adee4b0c58976d9abe7"},{"code":"(fn infix-calc [opr & rst]\n  (let [op-oprnd (partition 2 rst)]\n    (reduce #((first %2) %1 (second %2)) opr op-oprnd)))","problem":135,"user":"4dd0e8f7535da60f04a96e57"},{"code":"(fn [f & e]\n  (reduce #((first %2) % (second %2)) f (partition 2 e)))","problem":135,"user":"506617c3e4b03d366d7cb2ab"},{"code":"(fn [& args] (reduce (fn [x y] (if (odd? (.indexOf args y)) (partial y x) (x y))) args))","problem":135,"user":"52a5d1f3e4b0c58976d9abf1"},{"code":"(fn f\n  ([n] n)\n  ([n op m & args] \n     (apply f (op n m) args)))","problem":135,"user":"4e860e85535db62dc21a62f1"},{"problem":135,"code":"(fn [f & r](reduce (fn [t [k v]](k t v)) f (partition 2 r)))","user":"5382704be4b06839e8705ed4"},{"code":"(fn[& args] \n    (loop[a (rest args) r (first args)] \n      (let[f (first a) n (second a)] \n        (if(or (nil? r) (and (not (nil? f)) (nil? n))) \n          (throw (IllegalArgumentException. \"Invalid expression\")) \n          (if(empty? a) \n            r \n            (recur (drop 2 a) (f r n))\n            )\n          )\n        )\n      )\n    )","problem":135,"user":"52e68e61e4b09f7907dd1479"},{"problem":135,"code":"(fn infixr [a op b & c]\n  (if c\n    (apply infixr (op a b) c)\n    (op a b)))","user":"55810c73e4b05c286339e0f2"},{"code":"(fn\n  [c & args]\n  (loop [a c\n         args args]\n        (if args\n            (let [[op c & args'] args\n                  a' (op a c)]\n                 (recur a' args'))\n            a)))","problem":135,"user":"52dfc89be4b09f7907dd1405"},{"problem":135,"code":"(fn [x & xs]\n  (reduce #((first %2) % (second %2))\n          x\n          (partition 2 xs)))","user":"594cb88be4b07ddc2dafae6e"},{"problem":135,"code":"(fn calc\n  ([x] x)\n  ([x op y & other] (apply calc (list* (op x y) other))))","user":"4fd4bddce4b0d4de60cee36e"},{"problem":135,"code":"(fn [x & xs]\n  (reduce (fn [r [op y]] (op r y))\n          x (partition 2 xs)))","user":"555521a5e4b0deb715856e12"},{"problem":135,"code":"(fn [& s]\n  (loop [r 0 [f op t & ss] s]\n    (if-not op\n      r\n      (recur (op f t) (cons (op f t) ss)))))","user":"5c665311e4b0fca0c16226a7"},{"problem":135,"code":"(fn [& s]\n    (reduce (fn [acc x]\n                (if (number? x)\n                  (acc x)\n                  (partial x acc)))\n            identity\n            s))","user":"5901158de4b0438e51c2d039"},{"problem":135,"code":"(fn calc \n  ([x]\n   x)\n  ([x f y & rest]\n   (apply calc (f x y) rest)))","user":"58ee5371e4b056aecfd47da8"},{"code":"(fn infix [& x]\n  (if (= (count x) 1)\n    (first x)\n    (apply infix (cons ((second x) (first x) (nth x 2)) (drop 3 x)))\n    )\n  )","problem":135,"user":"52586d24e4b0cb4875a45cb0"},{"code":"(fn infix-calculator [  x y z & colls]\n  (if (empty? colls)\n    ( y x z)\n    (recur ( y x z) (first colls) (second colls) (rest (rest colls)))))","problem":135,"user":"5273562ae4b03e8d9a4a7479"},{"problem":135,"code":"(fn [& xs]\n  (reduce (fn [x [op y]] (op x y)) 0\n          (partition 2 (cons + xs))))","user":"553e0b70e4b0a04f792994e8"},{"problem":135,"code":"(fn [p & rest]\n   (loop [[op num & remaining] rest\n         res p]\n     (if (nil? op)\n       res\n       (recur remaining (op res num)))))","user":"5d0beecee4b0cc9c91588239"},{"code":"(fn [& c]\n    (reduce #((first %2) %1 (second %2)) \n            (first c) ;; the first element doesn't have an op\n            (partition 2 (rest c)))) ;; break into op/num pairs","problem":135,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":135,"code":"(fn calcul [init & args]\n  (if (= 0 (count args))\n   init\n   (let [result ((nth args 0) init (nth args 1))\n         restant (drop 2 args)]\n     (apply calcul result restant))))","user":"547e3846e4b0c51c1f4d7302"},{"code":"(fn foo [& exp]\n\t (loop [res (first exp) op nil elems (rest exp)]\n\t    (if (empty? elems)\n\t\tres\n\t      (let [e (first elems)]\n\t\t   (if (number? e)\n\t\t       (recur (op res e) nil (rest elems))\n\t\t       (recur res e (rest elems)))))))","problem":135,"user":"4e68fad4535d8ccf87e9fe93"},{"problem":135,"code":"(fn [seed & ops] (reduce #((first %2) %1 (second %2)) seed (partition 2 ops)))","user":"53c649d3e4b00fb29b221297"},{"problem":135,"code":"(fn doogie [& args] \n  (let [[x y z] (take 3 args) res (y x z)] \n    (if (= (count args) 3) \n    res \n    (apply doogie (cons res (drop 3 args))))))\n\n;(fn infix-calculator [& args]\n;  (let [[first-operand operator second-operand] (take 3 args)\n ;       result (operator first-operand second-operand)]\n  ;  (if (= (count args) 3)\n   ;   result\n    ;  (apply infix-calculator (cons result (drop 3 args))))))","user":"5fd12b42e4b07e53c2f3f02f"},{"problem":135,"code":"(fn infix [a b c & more] \n   (if (empty? more)\n     (b a c)\n     (apply infix (cons (b a c) more))\n     )\n   )","user":"544e9022e4b0e3978000698b"},{"code":"(fn calc [& args]\n  (if (= (count args) 1) (first args)\n    (let [[x op y & col] args]\n      (recur (cons (op x y) col)))))","problem":135,"user":"515e8ce2e4b049add99a053d"},{"problem":135,"code":"(fn prob135 [& args]\n (let [vectorMap (apply map vector [(apply vector args) (apply vector (take (dec (count args)) (drop 1 (cycle args))))])] (reduce (fn [resultr [x y]] (if (number? y) (x resultr y) resultr)) (first args) vectorMap)))","user":"58e6a2c5e4b056aecfd47cba"},{"problem":135,"code":"(fn [x & ops] (loop [x1 x ops1 ops] (if (empty? ops1) x1 (let [[op2 v2 & ops2] ops1] (recur (op2 x1 v2) ops2)))))","user":"571aad45e4b07c98581c3b59"},{"problem":135,"code":"(fn [& all]\n  (reduce (fn [a [op b]] (op a b)) (first all) (partition 2 (rest all))))","user":"50f17c0de4b06d9538fe2123"},{"problem":135,"code":"(fn inf [& args]\n  (if (empty? (drop 3 args)) (((vec args) 1) ((vec args) 0) ((vec args) 2))\n    (((vec args) (- (count args) 2)) (apply inf (take (- (count args) 2) args)) ((vec args) (- (count args) 1)))))","user":"56278266e4b00e49c7cb47d3"},{"problem":135,"code":"(fn infix-calc [& args]\n   (letfn [(calc-stack [args result]\n             (if (empty? args)\n               result\n               (recur (drop 2 args) ((first args) result (second args)))))]\n     (calc-stack (rest args) (first args))))","user":"54b817eee4b0ed20f4ff6e93"},{"code":"(fn [x y z & args]\n    (let [tuples (partition-all 2 args)]\n      (reduce (fn [a [b c]]\n                (b a c))\n              (y x z)\n              tuples)))","problem":135,"user":"52eb400ee4b0705949c4443b"},{"code":"#(loop [s %&]\n  (if (= (count s) 1) \n    (first s)\n    (let [[a f b & r] s] (recur (cons (f a b) r)))))","problem":135,"user":"4f06dcad535dcb61093f6c16"},{"problem":135,"code":"(fn [ & ops]\n         (if (> (count ops) 1)\n           (let [[a op b] (take 3 ops)]\n             (recur (concat [(op a b)] (drop 3 ops)) )\n             )\n           (first ops)\n           )\n         )","user":"552d9013e4b076ab5578f7ea"},{"code":"(fn [& vv ]\n    (reduce #((first %2) %1 (last %2)) (first vv) (partition 2  (next vv))))","problem":135,"user":"4f030775535dcb61093f6a43"},{"problem":135,"code":"(fn [& r] (reduce #((first %2) %1 (last %2)) (first r) (partition-all 2 (rest r)) ))","user":"524025bce4b0ad64fa01030f"},{"problem":135,"code":"(fn [& x]\n  (loop [tot ((second x) (first x) (nth x 2)) x (drop 3 x)]\n        (if (empty? x)\n          tot\n          (recur ((first x) tot (second x))  (drop 2 x)))))","user":"54e24a05e4b024c67c0cf7ce"},{"code":"(fn solvit [& l]\n  (let [maths (fn maths [& args]\n    (println args)\n    (if (= 1 (count args))\n      (first args)\n    (let [[num operator & rest] args] \n      (operator (apply maths rest) num))))]\n  (apply maths (reverse l))))","problem":135,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":135,"code":"(fn infix [& args]\n  (loop [terms args]\n      (if (= (count terms) 1)\n        (first terms)\n        (let [[v1 op v2 & others] terms\n              calc (op  v1  v2)]\n          (recur (conj others calc))))) )","user":"5e078ba7e4b0978307768fb6"},{"problem":135,"code":"(fn [x & args] (reduce (fn [a [f b]] (f a b)) x (partition 2 args)))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"(fn e ([x] x)\n    ([x op y & rest]\n      (apply e (op x y) rest)))","problem":135,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"(fn [& c] (reduce #(if (fn? %2) (partial %2 %) (% %2)) + c))","problem":135,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":135,"code":"(fn [i op j & more]\n   (reduce #((first %2) % (second %2))\n     (op i j) (partition 2 more)))","user":"51bd255ce4b0df1216cefd94"},{"problem":135,"code":"(fn calc\n  ([& more]\n     (loop [acc (first more) coll (rest more)]\n       (if (empty? coll)\n         acc\n         (recur ((first coll) acc (second coll)) (nthrest coll 2))))))","user":"53f2370ee4b0742d9025b0e7"},{"problem":135,"code":"(fn\n   [start & args]\n   (loop [res start\n          args args]\n     (if (empty? args)\n       res\n       (let [operator (first args)\n             x-val (first (rest args))\n             leftover-args (rest (rest args))]\n         (println leftover-args) \n         (recur\n          ((fn [op x] (op res x)) operator x-val)\n          leftover-args)))))","user":"5c936583e4b048ec896c5a1c"},{"code":"(fn [start & e]\n  (letfn [(trans [r] (loop [result [] l r]\n    (if (empty? l) result\n      (recur (conj result (vec (take 2 l))) (drop 2 l)))))]\n    (reduce (fn [s [f d]] (f s d)) start (trans e))))","problem":135,"user":"50481b70e4b0ec70b3ef8d98"},{"code":"(fn infix [x & xs] (if (empty? xs) x \n                       (apply infix ((first xs) x (first (rest xs))) (rest (rest xs)))\n                   )\n)","problem":135,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn [ & args ]\n  (if (= (count args) 1)\n    (first args)\n    (let [[x op y & aargs ] args]\n      (recur (cons (op x y) aargs)))))","problem":135,"user":"4dd67f10535d2dad7130b5c9"},{"code":"(fn calc\n  ([x] x)\n  ([x op y & xs] (apply calc (op x y) xs)))","problem":135,"user":"4fa6a491e4b081705acca1bc"},{"code":"(fn infix [v0 & ops-and-vals]\n  (reduce (fn [v1 [op v2]] (op v1 v2))\n    v0\n    (partition 2 ops-and-vals)))","problem":135,"user":"508923d5e4b06d8254e936e8"},{"problem":135,"code":"(fn [acc & rst]\n  (loop [res acc\n         t rst\n         ]\n    (if (empty? t)\n      res\n      (recur ((first t) res (second t)) (drop 2 t)))\n    ))","user":"590253e3e4b0438e51c2d055"},{"problem":135,"code":"(fn infix\n  ([x op y]\n   (op x y))\n  ([x op y & vals]\n   (apply infix (cons (infix x op y) vals))))","user":"5317d78ee4b08068f379ed63"},{"problem":135,"code":"(fn [& args]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) args))","user":"53ea72b6e4b036ad0777e4e5"},{"problem":135,"code":"(fn infix-calculator [initial & sum] (reduce #((nth %2 0) %1 (nth %2 1)) initial (partition 2 sum)))","user":"5d45bd1de4b07c84aa5ae6a4"},{"problem":135,"code":"(fn infix\n  [& ops]\n  (loop\n    [operator (second ops)\n     operand2 (nth ops 2)\n     remainder (drop 3 ops)\n     value (first ops)]\n    (if (empty? remainder)\n      (operator value operand2)\n      (recur (first remainder)\n             (nth remainder 1)\n             (drop 2 remainder)\n             (operator value operand2)))))","user":"51b01309e4b0c53cf2e68a57"},{"code":"(fn [x & xs]\n  (reduce \n    (fn [res [f x]] (f res x))\n    x \n    (partition 2 xs)))","problem":135,"user":"4fe88f78e4b07c9f6fd12c45"},{"problem":135,"code":"(fn calc [x op y & z] (let [v (op x y)] \n                        (if (empty? z) v (recur v (first z) (second z) (drop 2 z)))))","user":"5fa17538e4b0f0ebd91b77e3"},{"problem":135,"code":"(fn [o & xs]\n  (reduce (fn [a [op b]] (op a b)) o (partition 2 xs)))","user":"53f77b6ae4b0de5c4184855f"},{"problem":135,"code":"(fn [& p]\n  (letfn [(f [[a b c & r]] (if b (recur (cons (b a c) r)) a))] (f p)))","user":"56824e1be4b0945ebc182a91"},{"problem":135,"code":"#(loop\n   [s (drop 1 %&)\n    v (first %&)]\n   (\n    if (empty? s) v\n    (recur\n     (drop 2 s)\n     ((first s) v (second s))\n    )\n   )\n )","user":"54c8eb61e4b045293a27f658"},{"problem":135,"code":"(fn [& n]\n    (loop [lst n]\n        (if (= (count lst) 1)\n            (first lst)\n            (recur (cons ((nth lst 1) (nth lst 0) (nth lst 2)) (drop 3 lst)))\n            )))","user":"5f74de11e4b02876ed9fd0a5"},{"problem":135,"code":"(fn [& a] (reduce (fn([x [o y]] (o x y))) (first a) (partition 2 (rest a))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"code":"(fn [x & s]\n  (reduce #((first %2) %1 (second %2))\n      x (partition 2 s)))","problem":135,"user":"500854c4e4b028e089d3518c"},{"problem":135,"code":"(fn [ x & args ] (reduce #((first %2) %1 (second %2)) x (partition 2 args)))","user":"55536a8ae4b0deb715856e03"},{"code":"(fn ic\n  ([result] result)\n  ([oper1 op oper2] (op oper1 oper2))\n  ([oper1 op oper2 & args] (apply ic (conj args (op oper1 oper2)))))","problem":135,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"#((fn m [x] (if (next x) \n            ((second x) (m (drop 2 x)) (first x))\n            (first x))) (reverse %&))","problem":135,"user":"4eaede1f535d7eef30807329"},{"code":"(fn [a & d] (if (empty? d) a (recur ((first d) a (first (rest d))) (rest (rest d)))))","problem":135,"user":"4dbbdf86535d3f4042261ece"},{"problem":135,"code":"(fn calc [& args]\n  (let [instructions (partition-all 2 (reverse args))\n        result (reduce \n                 (fn [acc v]\n                   (if (> (count v) 1)\n                     (comp acc #((second v) % (first v)))\n                     acc)) \n                 identity \n                 instructions)]\n    (result (last (reverse args)))))","user":"55170dd9e4b06a49daca83bd"},{"code":"(fn infix [a f b & more]\n  (let [result (f a b)]\n    (if (empty? more)\n      result\n      (apply (partial infix result) more))))","problem":135,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":135,"code":"(fn\n  ([n] n)\n  ([n0 & ops]\n    (->>\n      ops\n      (partition 2 ,,,)\n      (reduce (fn [n1 [op n2]] (op n1 n2)) n0 ,,,))))","user":"5c6227fee4b0fca0c1622641"},{"code":"(fn [& v]\n  (reduce \n    #((first %2) %1 (second %2))\n    (first v)\n    (partition 2 (rest v))\n    )\n  )","problem":135,"user":"510b704ee4b078ea71921100"},{"problem":135,"code":"(fn [x & rest]\n  (reduce\n    (fn [a [op b]] (op a b))\n    x\n    (partition 2 rest)))","user":"597dcb0ce4b0dbe32238d0a2"},{"code":"(fn f \n  ([r] r)\n  ([a op b & r] (apply f (op a b) r)))","problem":135,"user":"508c3d42e4b0f17d83ea26b2"},{"problem":135,"code":"(fn [val & others]\n  (loop [acc   val\n         stack others]\n    (if (empty? stack)\n      acc\n      (let [op (first stack)\n            b (second stack)\n            rem (rest(rest stack))]\n        (recur (op acc b) rem)))))","user":"558053b1e4b05c286339e0e9"},{"problem":135,"code":"(fn infix\n  [& params]\n  (let [[a b c & the-rest] params]\n    (if (nil? the-rest)\n      (b a c)\n      (apply infix (b a c) the-rest))))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":135,"code":"(fn [first & rest]\n  (reduce (fn [m [f y]] (f m y)) first (partition 2 rest)))","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":135,"code":"(fn [a & r] (reduce #((partial (first %2) %1) (second %2)) a (partition 2 r)))","user":"564a5a09e4b0284900eef656"},{"problem":135,"code":"(fn [& arg] (->> (iterate (fn [[a f b & xs]] (concat (vector (f a b)) xs)) arg)\n                  (take (inc (count (filter ifn? arg))))\n                  last\n                  first))","user":"5c435a9fe4b0e06e1360a367"},{"code":"(fn [a & ar] (reduce #(let [[f n] %2] (f %1 n)) a (partition 2 ar)))","problem":135,"user":"528a3e14e4b0239c8a67ae72"},{"problem":135,"code":"(fn infix-calculator [& args]\n  (loop [current (first args)\n         input (rest args)]\n    (println \"current\" current \"input\" input)\n    (if\n      (empty? input)\n      current\n      (let [f (first input)\n            n (second input)]\n        (recur (f current n) (-> input (rest)\n                               (rest))))))\n  )","user":"563b9acbe4b0bfe05bf11827"},{"code":"(fn infix\n  ([left op right]\n   (op left right))\n  ([left op right & more]\n   (apply infix (op left right) more)))","problem":135,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":135,"code":"(fn infix-calc\n  ([x] x)\n  ([x y z & r] (apply infix-calc (cons (y x z) r))))","user":"557e9d17e4b05c286339e0d8"},{"code":"(fn infix-calc [& expr]\n  (if (> (count expr) 1)\n    (let [a (first expr)\n          b (first (drop 1 expr))\n          c (first (drop 2 expr))]\n      (apply infix-calc (cons (b a c) (drop 3 expr))))\n    (first expr)))","problem":135,"user":"4e7f51eb535db966e863cc3f"},{"problem":135,"code":"(fn infix-calc\n  [& xs]\n  (reduce (fn [acc v]\n            (if (fn? v)\n              (partial v acc)\n              (acc v))) (partial + 0) xs))","user":"5ef18431e4b07c55ae4a0529"},{"problem":135,"code":"(fn [x & xs]\n   (let [args (concat [x] xs)\n         rord (fn [xs x]\n                (let [ce (if (fn? x)\n                         (concat [x] xs)\n                         (concat xs [x]))]\n                  (if (= (count ce) 3)\n                    [((first ce) (second ce) (last ce))]\n                    ce)))]\n     (first (reduce rord [] args))))","user":"52281e1ee4b0186687e23a69"},{"code":"(fn infix-calc [& lst]\n  (letfn [(the-first [lst n]\n                     (reverse (nthrest (reverse lst) (- (count lst) n))))]\n    (cond (= (count lst) 1) (nth lst 0)\n          (= (count lst) 3) (apply (nth lst 1) (list (nth lst 0) (nth lst 2)))\n          true (apply infix-calc (apply infix-calc (into [] (the-first lst 3)))\n                      (nthrest lst 3)))))","problem":135,"user":"51e0198ee4b01188f0627539"},{"code":"(fn f[& a] (if (= 3 (count a)) ((nth a 1) (nth a 0) (nth a 2)) (apply f (cons ((nth a 1) (nth a 0) (nth a 2)) (second (split-at 3 a))))))","problem":135,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":135,"code":"(fn [start & args]\n  (let [p (partition 2 args)]\n    (reduce (fn [acc new] ((first new) acc (second new))) start p)))","user":"5756f7d7e4b02ea1147992e9"},{"problem":135,"code":"(fn [head & tail]\n  (if tail\n    (let [[op other & new-tail] tail]\n      (recur (op head other) new-tail))\n    head))","user":"58e2e11ce4b005f69f193ca0"},{"code":"#(reduce (fn [sum [op n]] (op sum n)) %1 (partition 2 %&))","problem":135,"user":"4fae0b85e4b081705acca245"},{"problem":135,"code":"(fn [v & r]\n  (loop [v v r r]\n    (if (empty? r)\n      v\n      (let [[op n] (take 2 r)]\n        (recur (op v n) (drop 2 r))))))","user":"556159fae4b0c656e3ff17c7"},{"problem":135,"code":"(fn [& sum]\n  (loop [result (first sum) col (rest sum)]\n    (let [op (first col) m (if (>= (count col) 2) (nth col 1) nil)]             \n     (if (empty? col) result (recur (op result  m) (rest (rest col)))  )\n     \n      )\n  )\n)","user":"547b4ec6e4b0c51c1f4d72d5"},{"problem":135,"code":"(fn [arg & args] (reduce (fn [x [f y]] (f x y)) arg (partition 2 args)))","user":"5d9e7971e4b000c986472bc1"},{"problem":135,"code":"(fn [i & c]\n  (reduce (fn [r [o n]] (o r n)) i (partition 2 c)))","user":"4dad8fe9c9a9d6ed1899dc57"},{"problem":135,"code":"(fn calc\n   ([x] x)\n   ([x f y & more] (apply calc (f x y) more)))","user":"5632b0a9e4b0bfe05bf117a8"},{"code":"(fn [i & s]\r\n  \t  (reduce (fn [a [f b]] (f a b)) i (partition 2 s)))","problem":135,"user":"4e50c894535dc968683fc4ee"},{"code":"(fn[x & y] \n  (reduce \n    (fn[a [b c]] (b a c) ) \n    x\n    (partition 2 y)))","problem":135,"user":"4e3ae7cd535deb9a81d77f4e"},{"problem":135,"code":"(fn [n & xs]\n    (loop [xs xs\n           n n]\n      (if (empty? xs)\n        n\n        (recur (rest (rest xs))\n               ((first xs) n (first (rest xs)))\n               ))))","user":"58b81490e4b0ebc645576d8c"},{"code":"(fn [& args]\r\n  ((fn infix \r\n    ([expr] (infix (rest expr) (first expr)))\r\n    ([expr result]\r\n      (let [operator (first expr)\r\n            arg (second expr)]\r\n        (if (empty? expr) \r\n          result\r\n          (infix (drop 2 expr) (operator result arg)))))\r\n    ) args))","problem":135,"user":"4f0da4e4535d0136e6c22319"},{"problem":135,"code":"(fn [init & args]\n  (reduce (fn [acc [op x]] (op acc x))\n          init (partition 2 args)))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn [& e]\n  (loop [acc (first e)\n         s (next e)]\n    (if (nil? s)\n      acc\n      (recur ((first s) acc (second s)) (next (next s))))))","problem":135,"user":"4ff9d4e5e4b0678c553fc3b0"},{"code":"(fn [first-item & expressions]\n (reduce \n   (fn [acc [operator operand]] (operator acc operand))\n   first-item\n   (partition 2 expressions)))","problem":135,"user":"4f92884de4b0dcca54ed6caf"},{"code":"(fn i [& x]\n  (if (= (count x) 1)\n    (last x)\n    (apply\n      i\n      (cons ((second x) (first x) (nth x 2))\n            (drop 3 x))\n    )\n  )\n)","problem":135,"user":"4e3456f9535deb9a81d77f2a"},{"code":"(fn [& l]\n  (loop [[fst op snd & ls] l]\n    (if snd\n      (recur (list* (op fst snd) ls))\n      fst)))","problem":135,"user":"52753740e4b03e8d9a4a74c1"},{"problem":135,"code":"(fn infix-calculator\n  ([k o p] (o k p))\n  ([k o p & rest]\n   (apply infix-calculator (cons (o k p) rest))))","user":"5c20b6abe4b07e362c230576"},{"code":"(fn calc [x o y & args] (if (empty? args) (o x y) (apply calc (concat (list (o x y)) args))))","problem":135,"user":"52e17e66e4b09f7907dd1423"},{"problem":135,"code":"(fn [& args]\n  (if (= (count args) 1) (first args)\n                         (let [[x op y & col] args]\n                           (recur (cons (op x y) col)))))","user":"5d6e5b53e4b04d129b00f2c6"},{"problem":135,"code":"(fn [f & r]\n  (reduce\n   (fn [t [o n]] (o t n))\n   f\n   (partition 2 r)))","user":"5742ec91e4b05c31a32c0883"},{"problem":135,"code":"(fn [& args]\n\n  (reduce (fn [a [op b]] (op a b))\n\n          (first args)\n\n          (partition 2 (rest args))))","user":"57b8f784e4b0fbc9809a27ea"},{"problem":135,"code":"(fn[x & args]\n      (reduce (fn[acc curr] ((first curr) acc (last curr)))\n              x \n              (partition 2 args)))","user":"58ffaddee4b0438e51c2cffe"},{"problem":135,"code":"#(case (first %&) 2 7 38 42 10 8 20 72)","user":"5507cfd3e4b021ccfedb96ad"},{"code":"(fn [x & ops]\n  (reduce\n    (fn [x [op operand]] (op x operand))\n    x\n    (partition 2 ops)))","problem":135,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":135,"code":"(fn [& args] (reduce (fn [x [f y]] (f x y)) (first args) (partition 2 (rest args))))","user":"54236ce1e4b01498b1a71ad1"},{"problem":135,"code":"(fn [& xs] (reduce #(apply (first %2) [%1 (second %2)]) (first xs) (partition 2 (rest xs))))","user":"5686e652e4b0dcc4269f4059"},{"problem":135,"code":"; Wow chouser's is so simple.  I wish I understood it!\n\n(fn [& args]\n    (first \n    (reduce\n      (fn[acc x]\n        (cond\n          (or (zero? (count acc)) (contains? #{ / + - * } x)) (conj acc x)\n          :else\n          [((last acc) (first acc) x)])\n        )\n      [] args)))","user":"5535e822e4b09218d5f44fb2"},{"code":"(fn [& args]\n  (let [a (first args)\n        op (second args)\n        b (nth args 2)\n        acc (op a b)\n        args (rest (rest (rest args)))]\n    (if (empty? args) acc\n      (recur (cons acc args)))))","problem":135,"user":"5300158ae4b0d8b024fd370f"},{"code":"(fn infix\n  ([x] x)\n  ([x op y & r] (apply infix (op x y) r)))","problem":135,"user":"52d9aaa1e4b09f7907dd13ae"},{"problem":135,"code":"(letfn [(calc [acc l] (if (nil? l) acc (let [[op v & r] l] (calc (op acc v) r))))]\n  (fn [& args] (calc (first args) (rest args))))","user":"5ecc0831e4b016b56eae058c"},{"code":"(fn calc [& xs]\n  (if (next xs)\n    (let [[l o r & xs] xs\n          n (o l r)]\n      (apply calc (cons n xs)))\n        (first  xs)))","problem":135,"user":"4ebe766d535dfed6da9c6d94"},{"code":"(fn [i & n]\n  ((fn [a p]\n     (if (= (count a) 2)\n       ((first a) p (second a))\n       (recur (drop 2 a) ((first a) p (second a)) ))\n     ) n i)\n  )","problem":135,"user":"50a173e4e4b08df8156e9e68"},{"code":"(fn [& pack]\n  ((fn infi [s]\n  (if (>= (count s) 3)\n    (infi (conj (nthrest s 3) ((second s) (first s) (nth s 2))))\n    (first s))) pack))","problem":135,"user":"5150a7d7e4b03e678e393abb"},{"problem":135,"code":"(fn [& args]\n  (loop [lst (rest (seq args))\n         res (first (seq args))]\n    (if (empty? lst)\n      res\n      (recur (rest (rest lst))\n             ((first lst) res (first (rest lst)))))))","user":"57f8104ce4b0d3187e900910"},{"code":"(fn [& c] (->> (partition 2 (rest c)) (reduce #(apply (first %2) [%1 (second %2)]) (first c))))","problem":135,"user":"518279abe4b0353c468deb65"},{"problem":135,"code":"(fn infix [& args]\n  (let [initial (first args)\n        stuff (partition 2 (rest args))]\n    (reduce\n      (fn [acc [f arg]] (f acc arg))\n      initial\n      stuff)))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":135,"code":"(fn \n  [x & xs]\n  (if (empty? xs) x (reduce #((first %2) %1 (second %2)) x (partition 2 xs)) ))","user":"5ceef51ee4b0aaa82f1129e9"},{"problem":135,"code":"(fn [& args]\n  (cond\n   (empty? args) 0\n   (= (count args) 1) (first args)\n   :else (loop [o1 (first args)\n                op (first (rest args))\n                o2 (first (rest (rest args)))\n                left (rest (rest (rest args)))]\n           (if (empty? left)\n             (op o1 o2)\n             (recur (op o1 o2)\n                    (first left)\n                    (first (rest left))\n                    (rest (rest left)))))))","user":"585e2e77e4b0f14aab7c87ac"},{"code":"(fn [& args]\n  (let [operands (take-nth 2 args)\n        operators (take-nth 2 (rest args))]\n    (->> (map vector operators (rest operands))\n         (reduce #((first %2) %1 (second %2)) (first operands)))))","problem":135,"user":"51ab4082e4b04e3dc0c27b31"},{"code":"(fn f [& params]\n  (let [[l o r & args] params]\n    (if (nil? o)\n      l\n      (apply f (cons (o l r) args)))))","problem":135,"user":"52fc34cee4b047fd55837015"},{"problem":135,"code":"(fn [f & r] (reduce (fn [acc [fun num]] (fun acc num)) f (partition 2 r)))","user":"5d6d2172e4b04d129b00f2b9"},{"code":"(fn [x & ops] (reduce #((first %2) %1 (second %2)) x (partition 2 ops)))","problem":135,"user":"5002b6e5e4b0678c553fc42c"},{"problem":135,"code":"(fn calc\n  [& args]\n  (loop [result (first args)\n         remaining (rest args)]\n    (if (empty? remaining)\n      result\n      (let [[op v] (take 2 remaining)]\n        (recur (op result v) (drop 2 remaining))))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":135,"code":"(fn infix-new [first second third & rest]\n  (if (empty? rest)\n    (second first third)\n    (apply infix-new (second first third) rest)))","user":"605a876be4b000d535e6f53c"},{"code":"(fn calculate [x func y & args]\n  (if args\n    (apply calculate (func x y) args)\n    (func x y)))","problem":135,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"code":"(fn [n & xs] (reduce (fn [x [f y]] (f x y)) n (partition 2 xs)))","problem":135,"user":"51bd1a0de4b0df1216cefd93"},{"code":"(fn infix\n  ([f] f)\n  ([f op s & rest]\n    (apply infix (op f s) rest)))","problem":135,"user":"4eae5fe4535d7eef30807325"},{"code":"(fn icalc \n  ([total] total)\n\t([a b c & r] (apply icalc (b a c) r)))","problem":135,"user":"4ec16c21535dfed6da9c6dac"},{"code":"(fn [& args]\n  (letfn [(%calculate [& args] \n                       (if (= (count args) 1) \n                         (first args)\n                         (recur\n                           (conj(nthnext args 3) \n                                         (+ (apply (second args) (list (first args) (nth args 2))))))))]\n    (apply %calculate (conj args + 0))))","problem":135,"user":"51f8e057e4b09be9c177e53d"},{"code":"(fn infix [x & xs]\n  (reduce \n    (fn [result [op arg]] (op result arg))\n    x\n    (partition 2 xs)))","problem":135,"user":"4f6845d2e4b07046d9f4ef74"},{"problem":135,"code":"#(reduce (fn [a [op b]] (op a b))\n         (first %&)\n         (partition 2 (rest %&)))","user":"59ef6cfae4b0966464fe6a32"},{"code":"(fn [& xs]\n  (loop [l (rest xs) acc (first xs)]\n    (if (empty? l)\n      acc\n      (recur (nnext l) ((first l) acc (second l))))))","problem":135,"user":"51f9b1d0e4b09be9c177e550"},{"code":"(fn [& calc]\n  (reduce (fn [work current]\n    (if (number? work)\n      (list work current)\n      ((second work) (first work) current))) calc))","problem":135,"user":"4ea7999e535d7eef308072ee"},{"problem":135,"code":"(fn [start & args]\n  (loop [input args value start]\n    (if (empty? input)\n      value\n      (recur (rest (rest input)) ((first input) value (second input)))\n    )\n  )\n)","user":"53beacf9e4b0d9a98559a6e3"},{"code":"(fn f [a op b & o]\n  (if (empty? o)\n    (op a b)\n    (apply f (op a b) o )))","problem":135,"user":"50bc4e73e4b0594b91591c3d"},{"code":"(fn [s & rs]\n  (let [terms (partition 2 rs)]\n    (reduce (fn [z [op t]] (op z t)) s terms)\n    ))","problem":135,"user":"515cf9b5e4b00901442db1d4"},{"problem":135,"code":"(fn [& args]\n  (loop [nums (filter number? args)\n         ops (filter (comp not number?) args)\n         ]\n    (if (or (< (count args) 2) (empty? ops))\n      (first nums)\n      (let [next-sum ((first ops) (first nums) (second nums))]\n        (recur\n         (conj (drop 2 nums) next-sum)\n         (rest ops))))))","user":"5df6c8b8e4b0a607a9a45c87"},{"code":"(fn [& col]\n  (let [[p0 f0 p1 & restcol ] col]\n  (loop [sum (f0 p0 p1) col1 restcol]\n    (if (empty? col1)\n        sum \n        (recur ((nth col1 0) sum (nth col1 1)) (drop 2 col1))\n  ))))","problem":135,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":135,"code":"(fn [& exp]\n  (reduce (fn [n [op nn]] (op n nn))\n          (first exp)\n          (partition 2 (rest exp))))","user":"51dafedee4b09f6bc204eee2"},{"code":"(fn calc [& expr]\n    (loop [[h op & tail] expr, acc h]\n      (if op (recur tail (op acc (first tail))) acc)))","problem":135,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":135,"code":"(fn infix [& args]\n  (reduce #(\n             (first %2) %1 (second %2)\n            ) (first args) (partition 2 (rest args)))\n  )","user":"57f81045e4b0d3187e90090f"},{"problem":135,"code":"(fn [& args]\n  (reduce\n    (fn [acc [op v]]\n      (op acc v))\n    (first args)\n    (partition 2 (rest args))))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":135,"code":"(fn math-operation\n  [& x] (loop [ops (remove number? x)\n              vals (filter number? x)]\n          (if (empty? ops)\n            (first vals)\n            (recur (rest ops  ) (cons ((first ops) (first vals) (second vals)) (rest (rest vals)))))\n                              )  )","user":"52457931e4b08ba239308107"},{"code":"(fn [& args]\n   (loop [res 0 symbols args]\n       (if (>= (count symbols) 3)\n         (let [calculation ((second symbols) (first symbols) (nth symbols 2))]\n                (recur calculation\n                       (concat [calculation] (drop 3 symbols))))                \n          res)))","problem":135,"user":"525ed5f4e4b0cb4875a45db8"},{"code":"(fn [a & s]\r\n  (reduce (fn [x [o y]] (o x y)) a (partition 2 s)))","problem":135,"user":"50acbd15e4b071b89ef26234"},{"problem":135,"code":"(fn foo\n  ([x] x)\n  ([a op b & xs] (apply foo (cons (op a b) xs))))","user":"4ea03f70535d7eef308072a1"},{"code":"(fn [& args]\n  (if (= (count args) 1) (first args)\n   (let [[x op y & col] args]\n     (recur (cons (op x y) col)))))","problem":135,"user":"5165e7eee4b04cc958b892be"},{"code":"(fn [x & y]\n  (let [compute (fn\n                 [exp & acc]\n                   (cond (empty? exp) acc\n                         (nil? acc) (recur (rest exp) (first exp))\n                         :else (recur (drop 2 exp) ((first exp) acc (nth exp 1)))))]\n    (compute (concat [x] y))))","problem":135,"user":"4f343e60e4b0e243712b1eb5"},{"code":"(fn [& args] \n  (reduce \n    #(if (number? %2)(% %2)(partial %2 %)) \n    args))","problem":135,"user":"4f3cc2fbe4b0e243712b1f55"},{"problem":135,"code":"(fn infix-calc [operand1 op operand2 & rest]\n  (if (nil? rest)\n    (op operand1 operand2)\n    (apply infix-calc (conj rest (op operand1 operand2)))))","user":"5f63684be4b02876ed9fd012"},{"code":"(fn infix [& args]\n  (reduce (fn [a [op b]] (op a b))\n          (first args)\n          (partition 2 (rest args))))","problem":135,"user":"51367626e4b04ac1f358dd53"},{"problem":135,"code":"(fn[& l](loop [[first op second & r] l]\n             (if-not (nil? op)\n               (recur (cons (op first second) r))\n               first)))","user":"5ed6030de4b016b56eae05db"},{"problem":135,"code":"(fn [& x] (reduce (fn [a [b c]] (b a c)) (first x) (partition 2 (rest x))))","user":"58a0fd0be4b02bd94d917ea4"},{"code":"(fn infix\n  ([val] val)\n  ([a op b & more]\n    (apply infix (cons (op a b) more))))","problem":135,"user":"4ec5d40d535d6d7199dd36b9"},{"problem":135,"code":"(fn [& ops]\n  (reduce (fn [tot [operator val]]\n            (operator tot val))\n          (first ops)\n          (partition 2 (rest ops))))","user":"532902f8e4b09d4e7a9b550e"},{"code":"(fn [& args]\n  (loop [result (first args)\n         newargs (rest args)]\n    (if (not (first newargs))\n      result\n      (recur ((first newargs) result (second newargs)) (drop 2 newargs)))\n    )\n  )","problem":135,"user":"52c8a8b9e4b0c2d177d62139"},{"problem":135,"code":"#(reduce \n  (fn [a [op b]] (op a b))\n  (first %&) (partition 2 (rest %&)))","user":"57d0e185e4b0bd073c202360"},{"code":"(fn infix-calculator [ & xs]\n  (let [calculate (fn [x [operator y]]\n                    (operator x y))]\n    (reduce calculate\n            (first xs)\n            (partition 2 (rest xs)))))","problem":135,"user":"50ec4ed7e4b04edc33777046"},{"problem":135,"code":"(fn fun [x & y]\n   (let [z (flatten y) a ((first z) x (second z)) b (drop 2 z)]\n     (if (seq b)\n       (fun a b)\n       ((first z) x (second z))\n       ))\n\n   )","user":"5f8fe45ae4b0715f5002d78d"},{"code":"(fn f ([a]\n     a)\n\t   ([a o b & m]\n\t       (apply f (o a b) m)))","problem":135,"user":"4dae4da5c9a9d6ed4e99dc57"},{"problem":135,"code":"(fn calc [hd & tl]\n  (if (empty? tl)\n    hd\n    (let [[op x & remaining] tl]\n   \t  (apply (partial calc (op hd x)) remaining))))","user":"53fb5256e4b0de5c4184857f"},{"code":"(fn [n & more]\n  (reduce\n   #((first %2) % (second %2))\n   n\n   (partition 2 more)))","problem":135,"user":"522a01ade4b0590a43906ced"},{"problem":135,"code":";(fn infix [& expr]\n;  (letfn [(infix-1 [[oper1 op oper2]] (op oper1 oper2))]\n;      (if (= 1 (count expr))\n;        (first expr)\n;        (apply infix (cons (infix-1 (take 3 expr)) (drop 3 expr))))))\n;(fn infix [oper1 op oper2 & tail]\n;  (if tail\n;    (apply infix (op oper1 oper2) tail)\n;    (op oper1 oper2)))\n(fn infix\n  ([oper1 op oper2]\n   (op oper1 oper2))\n  ([oper1 op oper2 & tail]\n   (apply infix (op oper1 oper2) tail)))","user":"60794173e4b0a637ed78035d"},{"code":"(fn inficacl [& args]\n  (first (reduce (fn [x y]\n                   (cond\n                    (empty? x) [y]\n                    (re-matches #\"[0-9]+\" (str y)) [((first x) (first (rest x)) y)]\n                    :else [y (first x)])) '() args))\n)","problem":135,"user":"52140b53e4b0961f15ac4d7e"},{"problem":135,"code":"(fn infix-calculator\n  ([x f y] (f x y))\n  ([x f y & more]\n   (let [x (infix-calculator x f y), [f y & more] more]\n     (apply infix-calculator x f y more))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":135,"code":"(fn [a & xs]\n  (loop [[f v & coll] xs, rs a]\n    (if-not f \n      rs \n      (recur coll (f rs v)))))","user":"59c94a69e4b0a024fb6ae576"},{"problem":135,"code":"(fn [& cols]\n  (reduce #((first %2) %1 (second %2))\n          (first cols)\n          (partition 2 (rest cols))))","user":"55d5ee3fe4b0e31453f64a92"},{"problem":135,"code":"(fn [& r] (if (= 3 (count r)) ((second r) (first r) (nth r 2)) (recur (conj (nthrest r 3) ((second r) (first r) (nth r 2))) )))","user":"573ce277e4b05c31a32c080b"},{"problem":135,"code":"(fn [& args]\n  (letfn [(helper [args acc]\n                  (if (empty? args)\n                    acc\n                    (helper (rest (rest args)) ((first args) acc (second args)))))]\n    (helper (rest args) (first args))))","user":"5be58beae4b0ed4b8aab4d14"},{"problem":135,"code":"(fn [l op r & args]\n  (loop [res (op l r)\n         [nextop nextr & nextargs] args]\n    (if (and nextop nextr)\n      (recur (nextop res nextr) nextargs)\n      res)))","user":"5169d422e4b051e2a73aba53"},{"problem":135,"code":"(fn [& args]\n  (reduce\n    (fn [x y]\n      (if (= (class y) java.lang.Long)\n        (x y)\n        (partial y x)))\n    args))","user":"5784ff88e4b0ebec4cfb74d4"},{"problem":135,"code":"(fn [& exps]\n   (loop [result (first exps)\n          rs (next exps)]\n     (if (empty? rs)\n       result\n       (recur ((first rs) result (second rs))\n              (drop 2 rs))\n       )))","user":"5808ee16e4b0a837a8b30d16"},{"problem":135,"code":"(fn [& nxt]\n  (loop [ops (rest nxt) result (first nxt)]\n    (if (empty? ops)\n      result\n      (recur\n        (rest (rest ops))\n        ((first ops) result (second ops)))\n      )\n\n    )\n  )","user":"5f58db95e4b0a0bc16850a9a"},{"code":"(fn [x & expr] \n    (loop [a x l expr]\n      (if (nil? l) a\n        (let [[op b & r] l] (recur (op a b) r)))))","problem":135,"user":"527675cbe4b03e8d9a4a74e2"},{"problem":135,"code":"(fn [& args]\n  ((fn f [result args]\n     (if (empty? args) result\n       (f ((first args) result (second args)) (rest (rest args))))) (first args) (rest args)))","user":"5760715de4b08062f99a4e96"},{"problem":135,"code":"(fn [ a & args]\n  (loop [c args r a]\n    (if (nil? c)\n      r\n      (recur (nnext c) ((first c) r (second c))))))","user":"574abbfbe4b02ea114799200"},{"code":"(fn [& exprs]\r\n   (loop [[op v & es :as ess] (rest exprs), acc (first exprs)]\r\n     (if (empty? ess)\r\n       acc\r\n       (recur es (op acc v)))))","problem":135,"user":"4ef1ee67535dced4c769f219"},{"code":"(fn [x & coll]\n  \t(reduce #((first %2) % (second %2)) x (partition 2 coll)))","problem":135,"user":"5271605ae4b03e8d9a4a73ed"},{"problem":135,"code":"(fn calculator [& args]\n  (if (> (count args) 1)\n    (let [current (take 3 args)\n          rest (drop 3 args)\n          result ((second current) (first current) (last current))]\n      (apply calculator (conj rest result)))\n    (first args)))","user":"5d64ecb2e4b0c9e5857d5036"},{"code":"(fn infix [x op y & more]\n  (if (seq more)\n    (recur (op x y)\n           (first more)\n           (second more)\n           (drop 2 more))\n    (op x y)))","problem":135,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":135,"code":"(fn infix [& expr]\n\t(reduce \n\t\t#(if (number? %2) (%1 %2)\n\t\t\t(fn [op] (%2 %1 op))) expr))","user":"5545477fe4b0a04f79299531"},{"code":"(fn [& xs]\r\n  (loop [curr-val (first xs)\r\n         ops (rest xs)]\r\n    (if (empty? ops)\r\n      curr-val\r\n      (recur ((first ops) curr-val (second ops)) (drop 2 ops)))))","problem":135,"user":"5060d137e4b0dc10a69545a0"},{"problem":135,"code":"(fn [& s]\n  (loop [remaining s]\n    (let [[a op b] (take 3 remaining)\n          result    (op a b)]\n      (if (seq (drop 3 remaining))\n        (recur (cons result (drop 3 remaining)))\n        result))))","user":"545e9cf1e4b01be26fd7467f"},{"problem":135,"code":"(fn calc [a b c & args]\n  (if args\n    (apply calc (cons (b a c) args))\n    (b a c)))","user":"568f2059e4b0dcc4269f40df"},{"problem":135,"code":"(fn [x & r] (reduce (fn [result [f n]] (f result n)) x (partition 2 r)))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"problem":135,"code":"(fn calculator\n  ([result] result)\n  ([left operator right & tail] (apply calculator (cons (operator left right) tail))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":135,"code":"(fn calc [a f b & tail] (let [result (f a b)] (if (empty? tail) result (apply calc (into [result] tail)))))","user":"5680fff3e4b0966858e4d8f6"},{"problem":135,"code":"(fn [& exp] (reduce #((first %2) %1 (second %2)) (first exp) (partition 2 (rest exp))))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":135,"code":"(fn [& args]\n         (reduce \n          (fn [left [op right]] (op left right)) \n          (first args) (partition 2 (rest args))))","user":"4e36e647535deb9a81d77f36"},{"code":"(fn [& xs]\n    (reduce #(cond\n              (and (number? %2) (not (nil? %1))) (%1 %2)\n              (and (number? %2) (nil? %1)) %2\n              :else (partial %2 %1)\n              ) xs))","problem":135,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":135,"code":"(fn [& abunch]\n    (reduce (fn [x y]\n              (if (number? y)\n                (x y)\n                (partial y x))) (first abunch) (rest abunch)))","user":"591f5124e4b09b4ee5954c45"},{"problem":135,"code":"(fn [& xs]\n  (reduce\n   (fn [prev next]\n     (cond\n      (fn? next)     (partial next prev)\n      (number? next) (prev next)))\n   xs))","user":"505aa653e4b021387fb89857"},{"code":"(fn [& s]\n  (let [ss (cons + s)]\n    (reduce #((first %2) % (second %2)) 0 (partition 2 ss))))","problem":135,"user":"504f2071e4b0e7ad84dbc4be"},{"code":"(fn [& args]\n  (reduce #((first %2) %1 (second %2)) (first args) (partition 2 (rest args))))","problem":135,"user":"53527551e4b084c2834f4af0"},{"code":"(fn [x & ops] \n  (reduce #((first %2) % (last %2)) x (partition 2 ops)))","problem":135,"user":"504f3fa3e4b0a02f9cffde62"},{"code":"(fn [a op b & r] (if (= 0 (count r)) (op a b) (recur (op a b) (first r) (second r) (drop 2 r))))","problem":135,"user":"51a05bede4b0b292b01ee3f4"},{"code":"(fn h [x o y & r] \n  (if (empty? r) (o x y)\n   (apply h (cons (o x y) r))\n))","problem":135,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":135,"code":"(fn [& seq] (reduce (fn [acc next] ((first next) acc (second next))) (first seq) (partition 2 (rest seq))))","user":"5589e88ae4b0277789237610"},{"problem":135,"code":"(fn f [& args]\n  (loop [[a op b & lst] args]\n    (if (nil? op)\n      a\n      (recur (cons (op a b) lst)))))","user":"5c62979fe4b0fca0c162264c"},{"problem":135,"code":"(fn [x & y]\n  (reduce (fn [a [f b]] (f a b)) x (partition 2 y)))","user":"593dfe60e4b069cdc2982bb1"},{"code":"(fn infix2 [& exprs]\n  (let [an (first exprs)\n        args (rest exprs)]\n    (loop [an an [op y & rest] args]\n      (if (nil? op)\n        an\n        (recur (op an y) rest)))))","problem":135,"user":"4dd62278535d2dad7130b5c7"},{"problem":135,"code":"(fn [& x] (reduce (fn [a b] (if (fn? a) (a b) #(b a %))) x))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":135,"code":"(fn [x & fys]\n  (reduce #(let [[f y] %2] (f % y)) x (partition 2 fys)))","user":"5566463ee4b0c656e3ff1831"},{"code":"(fn infixh [& r]\n  (letfn [(infix [[x op y & rest :as l]]\n            (if (<= (count l) 1)\n              (first l)\n              (recur (conj rest (op x y)))))]\n  \t(infix r)))","problem":135,"user":"532b43c3e4b09d4e7a9b5531"},{"code":"(fn [f & rest]\n  (if \n    (empty? rest) f\n    (recur ((first rest) f (second rest)) (drop 2 rest))))","problem":135,"user":"4f03fb59535dcb61093f6b89"},{"problem":135,"code":"(fn calc\n  [& n]\n  (if (< (count n) 3)\n    (first n)\n    (apply calc (cons ((second n) (first n) (nth n 2)) (drop 3 n)))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":135,"code":"(fn [& args]\n  (let [start (first args)\n        opsList (partition 2 (rest args))]\n    (reduce (fn [cur op] ((first op) cur (second op))) start opsList)))","user":"5e909685e4b0cb016954634d"},{"code":"(fn infix-eval [&[x op y & t]]\n  (if op (recur (cons (op x y) t)) x))","problem":135,"user":"4f6160a7e4b0defedf855fbe"},{"problem":135,"code":"(fn calc-3 [& args]\n  (reduce (fn [x [op y]] (op x y))\n          (first args)\n          (partition 2 (rest args))))","user":"5c48757fe4b0e06e1360a3c3"},{"code":"(fn infc [n op & more]\n  (if (= 1 (count more))\n    (op n (first more))\n    (apply infc (conj (rest more) (op n (first more))))))","problem":135,"user":"504e12ade4b078edc5f593b7"},{"code":"(fn [& args] (reduce (fn [x [op y]] (op x y)) (first args) (partition 2 (rest args))))","problem":135,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"problem":135,"code":"(fn inline-eval [& expr]\n  (first (reduce (fn [[acc-val opt] val]\n                   (if (number? val)\n                     [(opt acc-val val) nil]\n                     [acc-val val]))\n                 [(first expr) nil]\n                 (rest expr))))","user":"60460824e4b02d28681c77bc"},{"code":"#(reduce (fn [x y] ((first y) x (last y))) (first %&) (partition 2 (rest %&)))","problem":135,"user":"50b65966e4b0a86f8358ca6c"},{"code":"(fn [& xs]\n  (reduce\n    (fn [left [op right]] (op left right))\n    (first xs)\n    (partition 2 (rest xs))))","problem":135,"user":"4f85a75ce4b033992c121c48"},{"problem":135,"code":"#(reduce (fn [a b]\n           (if (fn? b)\n             (partial b a)\n             (a b))) %&)","user":"51a4d802e4b0def3c5c5869a"},{"problem":135,"code":"(fn [& a]\n  (loop [a a s '()]\n    (if (and (empty? a)\n             (nil? (second s)))\n      (first s)\n      (recur (rest a)\n             (case (count s)\n               0 (concat s (list (first a)))\n               1 (concat s (list (first a)))\n               2 (concat s (list (first a)))\n               3 (list ((second s) (first s) (last s))\n                       (if (not (empty? a))\n                         (first a))))))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":135,"code":"(fn infix [& args]\n   (reduce (fn [a [op b]] \n             (op a b)) (first args) (partition 2 (rest args))))","user":"56c60b36e4b05cc29241eead"},{"problem":135,"code":"(fn infix\n  [a op b & args]\n  (let [r (op a b)]\n    (if (empty? args)\n      r\n      (apply infix (cons r args)))))","user":"56504dc2e4b0284900eef6bc"},{"problem":135,"code":"(fn [& args]\n  (let [start (take 3 args)\n        seed ((second start) (first start) (nth start 2))\n        paired (partition 2 (drop 3 args))\n        ]\n  (reduce (fn [agg [op n]] (op agg n)) seed paired)\n    )\n  )","user":"6004c750e4b074f607df6645"},{"code":"(fn [& symbols]\n  (loop [acc (first symbols)\n         syms (rest symbols)]\n \n    (if\n        (empty? syms) acc\n        (recur ((first syms) acc (second syms)) (nthrest syms 2)))))","problem":135,"user":"53512bc6e4b084c2834f4ae1"},{"problem":135,"code":"(fn [& l]\n   (reduce \n    (fn [a [op b]] (op a b))\n    (first l)\n    (partition 2 (rest l))\n    )\n   )","user":"55e8a85be4b0121d4835fd98"},{"code":"(fn [a & b]\n  (loop [r a b b ]\n    (if (and (first b) (second b))\n      (recur ((first b) r (second b)) (nthrest b 2))\n      r)))","problem":135,"user":"53219cece4b09d4e7a9b54b7"},{"problem":135,"code":"(fn [initial & args] (\n  reduce \n  #(apply (first %2) [%1 (second %2)])\n  initial\n  (partition 2 args)))","user":"5e7fb908e4b085ba37836e3f"},{"code":"(fn [a & xs] (reduce (fn [r [op v]] (op r v)) a (partition 2 2 xs)))","problem":135,"user":"4e9b22e2535dbda64a6f6b74"},{"problem":135,"code":"(fn infix \n  [& elements]\n  (reduce \n    (fn [a [operator b]] (operator a b))  \n      (first elements)\n    (partition 2 (rest elements))))","user":"5a3c06fce4b001c08efc0cdd"},{"problem":135,"code":"(fn [& xs]\n  (reduce\n    (fn [acc [f n]] (f acc n))\n    (first xs)\n    (partition-all 2 (rest xs))))","user":"559057c4e4b027778923766e"},{"problem":135,"code":"(fn\n  [& l]\n  (loop [li (rest l)\n         res (first l)]\n    (if (empty? li) res\n      (recur (rest (rest li)) ((first li) res (second li))))))","user":"56df636ae4b0ca2494a095f4"},{"problem":135,"code":"(fn [& lots]\n  (let [data (partition 2 (rest lots))]\n    (reduce (fn [a [b c]]\n                 (b a c))\n            (first lots)\n            data)))","user":"55912230e4b027778923767a"},{"code":"(fn infix [a op b & r]\n  (if (seq r)\n    (apply infix (list* (op a b) r))\n    (op a b)))","problem":135,"user":"4fd2529ae4b04c3a95aa041f"},{"problem":135,"code":"(fn countt \n   ([a b c & rest] (apply countt (countt a b c) rest))\n   ([a b c] (b a c)))","user":"5797d3d2e4b039eba2ecb106"},{"problem":135,"code":"(fn infix-eval [& expr]\n  (loop [acc (first expr) current-expr (rest expr)]\n    (if (empty? current-expr)\n      acc\n      (let [[op arg & remaining-expr] current-expr]\n        (recur (op acc arg) remaining-expr)))))","user":"5813e208e4b0f478707a061b"},{"problem":135,"code":"(fn [& args]\n  (:total (reduce #(cond\n                    (and (integer? %2) (integer? (:total %1))) (assoc %1 :total ((:exp %1) (:total %1) %2))\n              (integer? %2) (assoc %1 :total %2)\n              :else (assoc %1 :exp %2)) {:total nil :exp nil} args)))","user":"543823f1e4b032a45b869311"},{"problem":135,"code":"(fn [& xs]\n  (let [res ((nth xs 1) (nth xs 0) (nth xs 2))\n        rem-xs (drop 3 xs)]\n    (if (empty? rem-xs)\n      res\n      (recur (cons res rem-xs)))))","user":"564c8e99e4b0284900eef674"},{"problem":135,"code":"(fn infix-calc [& args]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) \n          identity args))","user":"5bbbce70e4b0a20761a2360f"},{"problem":135,"code":"(fn math [& args]\n  (let [[o1 op o2] (take 3 args)]\n    (reduce (fn [acc [op o1]] (op acc o1)) (op o1 o2) (partition 2 (drop 3 args)))))","user":"56a51f26e4b0542e1f8d14e0"},{"code":"(fn [& lst]\n   (loop [xs (rest lst)\n          acc (first lst)]\n     (if (empty? xs)\n       acc\n       (recur (drop 2 xs) ((first xs) acc (second xs))))))","problem":135,"user":"50868795e4b004985b776e5e"},{"problem":135,"code":"(fn infix\n  ([n1 op n2] (op n1 n2))\n  ([n1 op n2 & coll]\n    (apply infix (cons (op n1 n2) coll))))","user":"52c1ede2e4b07a9af579236d"},{"problem":135,"code":"(fn\n  [x & args]\n  (reduce\n    #((first %2) % (second %2))\n    x\n    (partition 2 args)))","user":"50ec409ce4b04edc33777045"},{"code":"(fn f [a o b & c]\n          (if c\n            (apply f (o a b) c)\n            (o a b)))","problem":135,"user":"4fea09b2e4b0547ebccb2485"},{"code":"(fn [& s] (reduce \n (fn [a [op b]] (op a b))\n  (first s) (partition 2 (rest s))))","problem":135,"user":"502904e0e4b0feaf66e22fad"},{"problem":135,"code":"(fn infix [val & args]\n  (reduce (fn [result [op arg]] (op result arg)) val (partition 2 args)))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":135,"code":"(fn my-calc [x oper y & ys]\n  (let [f (cond\n            (= oper /) /\n            (= oper +) +\n            (= oper *) *\n            (= oper -) -)\n        x (f x y)\n        stop (empty? ys)]\n    (if stop\n      x\n      (apply my-calc x (first ys) (rest ys))\n    )\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"problem":135,"code":"(fn [& input]\n  (reduce (fn [acc [op operand]] (op acc operand))\n          (first input)\n          (partition 2 (rest input))))","user":"5990fcb9e4b0866487ed0d5b"},{"problem":135,"code":"(fn [init & r]\n  (reduce (fn [acc [op v]] (op acc v))\n          init\n          (partition 2 r)))","user":"55895eade4b059ccff29b202"},{"code":"#(->> (partition 2 (rest %&))\n      (reduce (fn [r [f v]] (f r v)) (first %&)))","problem":135,"user":"50336c6be4b0c6c1199c710f"},{"code":"(fn [a plus b & more] (let [c (plus a b)] (if (empty? more) c (recur c (first more) (second more) (drop 2 more)))))","problem":135,"user":"4f3d83b5e4b0e243712b1f69"},{"problem":135,"code":"(fn f [a o b & r] (#(if r (apply f % r) %) (o a b)))","user":"575ddfd1e4b02ea11479938d"},{"problem":135,"code":"(fn [& equation] \n  (if (= (count equation) 1) (first equation)\n    (let [[x op y & col] equation]\n      (recur (cons (op x y) col)))))","user":"5e8308abe4b09a7a73c8bbb4"},{"problem":135,"code":"(fn w [x f & [y & z]]\n  (if z (apply w (f x y) z) (f x y)))","user":"527ba29de4b03e8d9a4a7594"},{"code":"(fn infixr\n  [& steps]\n  (loop [[a op b & remaining] steps]\n    (let [step (op a b)]\n      (if (empty? remaining)\n        step\n        (recur (cons step remaining))))))","problem":135,"user":"51f9527fe4b09be9c177e549"},{"problem":135,"code":"(fn [st & coll]\n   (let [ops (partition 2 coll)]\n     (reduce #((first %2) %1 (second %2) ) st ops)))","user":"51e7c1f1e4b0a3e081b8cbef"},{"code":"(fn [a o b & xs]\r\n  (loop [left a op o right b others xs]\r\n    (if (empty? others) (op left right)\r\n      (recur (op left right) (first others) (second others) (rest (rest others))))))","problem":135,"user":"4dad76588e77d6ed63f12a44"},{"code":"(fn calc \n  ([x] x)\n  ([x op y & rs] (apply (partial calc (op x y)) rs)))","problem":135,"user":"524be8e0e4b09eba1c0223f1"},{"problem":135,"code":"(fn [& args]\n  (reduce\n   (fn [a b] \n     (if (ifn? b) \n       (list b a)\n       ((first a) (second a) b)))\n   args))","user":"52213426e4b0e6a83c8925c4"},{"problem":135,"code":"(fn infix-calc\n  [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [a (take 3 args)\n          reduced-a (apply (second a) [(first a) (last a)])\n          b (drop 3 args)]\n      (apply infix-calc (cons reduced-a b)))))","user":"5e218bb7e4b05b4b01516123"},{"code":"(fn [& args]\n    (apply (fn my-eval [& lst]\n         (if (empty? (rest lst))\n           (first lst)\n           ((second lst) (apply my-eval (rest (rest lst))) (first lst))))\n     (reverse args)))","problem":135,"user":"4ff9cfd6e4b0678c553fc3af"},{"problem":135,"code":"(fn f\n  ([a] a)\n  ([a b c & rst]\n   (apply f (b a c) rst)))","user":"4ee7d6d8535d93acb0a66870"},{"code":"(fn [v & [o y & r]]\r\n  (if (nil? o)\r\n    v\r\n    (recur (o v y) r)))","problem":135,"user":"4f410b63e4b0e243712b1fc5"},{"problem":135,"code":"(fn [x & xs]\n  (loop [acc x\n         op (first xs)\n         y (first (rest xs))\n         xs (drop 2 xs)]\n    (if (empty? xs)\n      (op acc y)\n      (recur (op acc y)\n             (first xs)\n             (first (rest xs))\n             (drop 2 xs)))))","user":"56fee4c0e4b08d47c97781b5"},{"problem":135,"code":"(fn [& args] (loop [expr args\n                    result (first expr)]\n               (if (= 1 (count expr))\n                 result\n                 (recur (drop 2 expr) ((second expr) result (nth expr 2))))))","user":"6074e278e4b069485764de51"},{"problem":135,"code":"(fn ifx3 \n  ([t1 t2 t3] (t2 t1 t3)) \n  ([t1 t2 t3 & terms] \n     (apply ifx3 (t2 t1 t3) terms)\n  )\n)","user":"5d4f21f3e4b0776584bd6f4e"},{"code":"(fn infix\n  ([a op b] (op a b))\n  ([a op b & more]\n    (apply infix (cons (op a b) more))))","problem":135,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":135,"code":"(fn my-infix [& args] \n  (if  (= 1 (count args))\n    (first args)\n    (let [[acc op n & tail] args]\n      (apply my-infix (cons (op acc n) tail)))))","user":"56bb652ae4b0f26550335953"},{"problem":135,"code":"(fn infix [a op b & c]\n  (if (empty? c)\n    (op a b)\n    (apply infix (op a b) c)))","user":"5136f659e4b04059df19f2fd"},{"problem":135,"code":"(fn [& coll] \n  (reduce\n   (fn [prev el] (apply (first el) (list prev (second el))))\n   (first coll)\n   (partition-all 2 (rest coll))))","user":"5514a60fe4b055c2f668d4d7"},{"code":"(fn i \n  ([x] x)\n  ([x o y & m] (apply i (o x y) m))\n)","problem":135,"user":"5098bcfee4b0cae2931060a1"},{"code":"(fn f [a b c & d] (let [x (b a c)] (if (= d nil) x (apply f (cons x d)))))","problem":135,"user":"53500869e4b084c2834f4ad3"},{"code":"(fn [a f b & r]\n  (if (nil? (seq r))\n    (f a b)\n  (recur (f a b) (nth r 0) (nth r 1) (drop 2 r))))","problem":135,"user":"4f2c2ccbe4b0d6649770a050"},{"problem":135,"code":"(fn infix-calculator ([f s & ops] (infix-calculator (cons s ops) f))\n  ([[op num & others] xs]\n    (if(nil? op)\n      xs\n      (infix-calculator others (op xs num)))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":135,"code":"(fn [ & args]\n   (loop [ x (first args) nums (rest args)]\n     (if(empty? nums)\n       x\n       (recur ( (first nums) x (second nums) ) (drop 2 nums)))))","user":"5cbd5b42e4b026601754b9f6"},{"problem":135,"code":"(fn calc\n       ([x] x)\n       ([x op y] (op x y))\n       ([x op y & more] (apply calc (concat [(op x y)] more))))","user":"5745bb9fe4b009280f9f2b54"},{"code":"(fn [& args]\r\n  (loop [a (rest args) acc (list (first args))]\r\n    (if (empty? a)\r\n      (first acc)\r\n      (recur (rest a)\r\n        (if (fn? (first acc))\r\n          (let [op (peek acc) x (peek (pop acc)) res (op x (first a))]\r\n            (conj (pop (pop acc)) res))\r\n          (conj acc (first a)))))))","problem":135,"user":"5050b107e4b063148f524126"},{"code":"#(reduce (fn [x y]\n            ((first y) x (second y)))\n         (first %&) (partition 2 (rest %&)))","problem":135,"user":"4e1f9bb5535d04ed9115e80d"},{"problem":135,"code":"#(reduce (fn [sum x] ((first x) sum (second x))) % (partition 2 %&))","user":"5f03ab5be4b0cf489e8d7f37"},{"problem":135,"code":"(fn blah \n  ([x]\n   x)\n  ([farg op sarg & args]\n   (apply blah (op farg sarg) args)\n    ))","user":"535f9a5ce4b04ce2eb3ed2de"},{"problem":135,"code":"(fn calc [x op y & args]\n  (let [curr (op x y)]\n    (if (empty? args)\n      curr\n      (apply calc (conj args curr)))))","user":"55f8fd70e4b03cbcff9738bc"},{"problem":135,"code":"(fn infix [& a]\n  (if (= 1 (count a))\n    (first a)\n    (let [operator (last (butlast a))\n          y (last a)\n          x (apply infix (butlast (butlast a)))]\n      (operator x y))))","user":"546e4ab8e4b00cfc9eacc19c"},{"code":"(fn [& x]\n    (if (< (count x) 3)\n      (first x)\n      (recur (cons (#((second %) \n                       (first %) \n                       (last %)) \n                     (take 3 x)) \n                   (drop 3 x)))))","problem":135,"user":"4e77c1db535d324fb2983d72"},{"problem":135,"code":"(fn infixify [& params]\n  (loop [v (first params) params (rest params)]\n    (if params\n      (let [[op nextval & params] params\n            v (op v nextval)]\n        (recur v params))\n      v)))","user":"556405e5e4b0c656e3ff17fb"},{"problem":135,"code":"(fn [& col]\n  (loop [col col]\n    (if (= (count col) 1)\n      (first col)\n      (let [ [a oper b & c] col ]\n        (recur (cons (oper a b) c))))))","user":"57e396cde4b0bfb2137f5a9e"},{"code":"(fn fb [& s]\n(first ((fn fa [v]\n      (if (> (count v) 2) (fa (cons ((second v) (first v) (second (next v)))  (nthrest v 3))) v)) s)))","problem":135,"user":"515ff4b9e4b0e2be8aa20bd9"},{"problem":135,"code":"(fn infix\n     ([operand1 operator operand2]\n       (operator operand1 operand2))\n    ([operand1 operator operand2 & more]\n      (apply infix (cons (infix operand1 operator operand2) more) )\n      )\n       )","user":"59692530e4b069c0a1a197e4"},{"problem":135,"code":"(fn [x & xs]\n  (reduce (fn [res [op n]] (op res n)) x (partition 2 xs)))","user":"529dfc6de4b04e0c58e87b8a"},{"code":"(fn f[ a op b & xs ]\n  (cond\n   (nil? xs) (op a b)\n   :else (apply f (op a b) xs)))","problem":135,"user":"50fa01bce4b07934dda8b0ba"},{"problem":135,"code":"(fn [& f]\n                (if (= 1 (count f))\n     (first f)\n     (recur (conj (drop 3 f) (apply #(%2 %1 %3) (take 3 f))))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"code":"(fn o [& s]\n    (loop [a (first s)\n           s (rest s)]\n      (if (empty? s)\n        a\n        (recur\n          ((nth s 0)\n            a\n            (nth s 1))\n          (drop 2 s)))))","problem":135,"user":"51b3f109e4b0f094dd986fa9"},{"code":"(fn arith [a op b & c]\n  (let [res (op a b)]\n    (if (empty? c)\n      res\n      (apply arith (cons res c)))))","problem":135,"user":"50d882d4e4b01f0871336e69"},{"code":"#(reduce \r\n     (fn[a [b c]](b a c))\r\n     % (partition 2 %&))","problem":135,"user":"4daddc19c9a9d6ed4599dc57"},{"code":"(fn [& args] (reduce (fn [a [f b]] (f a b)) (first args) (partition 2 (rest args))))","problem":135,"user":"4df669d4535d08e6dec9fe35"},{"code":"(fn infix-calc [& args] (letfn [(calc [v s] \n  \t\t\t  (if (seq s) (calc ((first s) v (second s) ) (nnext s)) v))] \n\t\t\t   (calc (first args) (next args))))","problem":135,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":135,"code":"(fn [& exps]\n  (reduce (fn [acc exp]\n            (if (= java.lang.Long\n                   (class exp))\n              (acc exp)\n              (fn [num] (exp acc num))))\n          identity\n          exps))","user":"567bf820e4b05957ce8c61ad"},{"code":"(fn [n & a]\n  (reduce #((first %2) % (second %2)) n (partition 2 a)))","problem":135,"user":"4f01ff83535dcb61093f6a3a"},{"problem":135,"code":"(fn f [x o y & z] \n  (let [r (o x y)]\n\t(if (empty? z) r (apply f r z))\n))","user":"5654d0e1e4b0f9d632dd848c"},{"code":"(fn calc [& a](reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity a))","problem":135,"user":"50ef56dfe4b0bdaecbb47d94"},{"problem":135,"code":"(fn [& input]\n  (reduce (fn [result [operator value]] (operator result value))\n          (first input)\n          (partition 2 (rest input))))","user":"5463c824e4b01be26fd746c5"},{"problem":135,"code":"(fn f [& args] \n    (->> args \n        reverse\n        (partition-all 2)\n        (map reverse)\n        reverse\n        ((fn [[[init] & calcs]]\n          (reduce (fn [res [op arg]] \n                      (op res arg))\n                  init\n                  calcs)))))","user":"5cdfe2aee4b0a17bb84e2b04"},{"problem":135,"code":"(fn [& args]\n  (let [start (first args)\n        ops (map (fn [pair] #((first pair) % (second pair))) (partition 2 (drop 1 args)))]\n    (reduce #(%2 %1) start ops)))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":135,"code":"(fn [arg & args]\n    (loop [a arg\n           more args]\n      (if (empty? more)\n        a\n        (let [op (first more)\n              b (second more)\n              r (rest (rest more))]\n          (recur (op a b) r)))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"(fn [& coll]\n    (letfn [(calculator [x remaining]\n              (if (empty? remaining)\n                x\n                (let [fst (first remaining)\n                      rst (rest remaining)]\n                  (if (number? fst)\n                    (calculator (x fst) rst)\n                    (calculator (partial fst x) rst)))))]\n      (calculator identity coll)))","problem":135,"user":"4dc29a1d535d020aff1edf96"},{"code":"(fn [& args]\n  (let [s (seq args)\n        n (filter number? s)\n        op (filter (complement number?) s)]\n    (loop [op op\n           n1 (first n)\n           nc (rest n)]\n      (if (empty? op)\n        n1\n        (recur (rest op) ((first op) n1 (first nc)) (rest nc))))))","problem":135,"user":"512474ede4b02c3f2a072cce"},{"problem":135,"code":"(fn sk-shunxu [& e]\n  (let [[a b c & r] e]\n    (if r\n      (apply sk-shunxu (b a c) r)\n      (b a c))))","user":"51d42f44e4b013d740b70ddb"},{"problem":135,"code":"#(reduce (fn [t [o n]] (o t n)) (first %&) (partition 2 (rest %&)))","user":"586b6f13e4b01531a375e959"},{"code":"(fn [& args]\n  (if (= (count args) 1)\n    (first args)\n    (let [[left op right & other-args] args]\n        (recur (cons (op left right) other-args))\n    )\n  )\n)","problem":135,"user":"506af7d8e4b0a2a5463de37d"},{"code":"(fn calc\n  [a op b & r]\n  (if (nil? r)\n    (op a b)\n    (recur (op a b) (first r) (second r) (next (next r)))\n    )   \n  )","problem":135,"user":"5228f870e4b0186687e23a98"},{"problem":135,"code":"(fn [x & expr] \n  (reduce (fn [acc [oper y]] (oper acc y))\n           x (partition 2 expr)))","user":"57644395e4b0994c1922fbf2"},{"code":"(fn [i & r] \n  (reduce #((first %2) %1 (last %2)) i (partition 2 r)))","problem":135,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn infix [v1 & args]\n  (loop [a (take 2 args)\n   r (drop 2 args)\n\t v v1]\n    (if (= a [])\n      v\n      (recur\n       (take 2 r)\n       (drop 2 r)\n       (apply\n\t(first a) (cons v (rest a)))))))","problem":135,"user":"4ddc620d535d02782fcbea06"},{"problem":135,"code":"(fn [& coll] \n  (reduce (fn [ret [op elem]] (op ret elem))\n          (first coll) \n          (partition 2 (rest coll))))","user":"5d2bfb68e4b01671435dbc86"},{"code":"(fn [x & rest]\n  (reduce #((first %2) %1 (last %2)) x (partition 2 rest)))","problem":135,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":135,"code":"(fn [x & more]\n  (reduce (fn [x [op y]]\n            (op x y))\n          x\n          (partition 2 more)))","user":"575cbe44e4b02ea114799374"},{"problem":135,"code":"(fn [& c]\n    (letfn [(get-rst [rest-c rst]\n              (if (empty? (rest rest-c))\n                rst\n                (let [operator (first rest-c)\n                      op2 (second rest-c)\n                      new-rst (operator rst op2)]\n                  (recur (drop 2 rest-c)\n                         new-rst))))]\n      (get-rst (rest c) (first c))))\n\n;; (fn [x & r]\n;;     (reduce (fn [acc [op operand]]\n;;               (op acc operand))\n;;             x\n;;             (partition 2 r)))\n\n;; (fn ff\n;;     ([x op y] (op x y))\n;;     ([x op y & r] (apply ff (op x y) r)))\n\n;; #((fn [[a op b & r]]\n;;       (if op\n;;         (recur (cons (op a b) r))\n;;         a)) %&)\n\n;; (fn [& c]\n;;     (letfn [(get-rst [cc]\n;;               (let [[a op b & args] cc\n;;                     cur (op a b)]\n;;                 (if (empty? args)\n;;                   cur\n;;                   (recur (cons cur args)))))]\n;;       (get-rst c)))\n\n;; (fn ff [a op b & args]\n;;     (let [cur (op a b)]\n;;       (if (empty? args)\n;;         cur\n;;         ;; (apply ff (cons cur args))\n;;         (apply ff cur args))))","user":"591ad160e4b09b4ee5954bdf"},{"problem":135,"code":"(fn [start & args]\n   (let [s (partition 2 args)]\n     (reduce (fn [acc new] ((first new) acc (second new))) start s)))","user":"607d6bc1e4b03d835a6eaecc"},{"problem":135,"code":"(fn ! [n1 & [op n2 & r]] (if op (apply ! (op n1 n2) r) n1))","user":"50310713e4b05b7df5a0b84c"},{"code":"(fn [n & r] (reduce (fn [x [f y]] (f x y)) n (partition 2 r)))","problem":135,"user":"503917a0e4b088a6a14ca763"},{"problem":135,"code":"(fn calc \n   ([val1 op val2] (op val1 val2))\n   ([val1 op val2 & rest] (apply calc (cons (op val1 val2) rest))))","user":"560039cce4b04bb52996e162"},{"code":"(fn [x & xs]\r\n  (reduce #((first %2) % (second %2)) x (partition 2 xs)))","problem":135,"user":"4dc1ee85535d020aff1edf91"},{"problem":135,"code":"(fn [& args]\n   (reduce #((first %2) %1 (second %2)) (first args) (partition-all 2 (rest args))))","user":"55a372f1e4b0acc240e31537"},{"problem":135,"code":"(fn solve [& xs]\n  (reduce\n   (fn [x [f y]] (f x y))\n   (first xs)\n   (partition 2 (rest xs))))","user":"60537cd1e4b04c8f2157d152"},{"problem":135,"code":"(fn [f & args]\n  (reduce #((first %2) %1 (last %2)) f (partition 2 args)))","user":"55933c7ae4b0c79f6e1db938"},{"code":"(fn f [a op b & xs]\n  (if xs\n    (apply f (op a b) xs)\n    (op a b)))","problem":135,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":135,"code":"(fn infix \n  ([a op b]\n   (op a b))\n  ([a op b & xs]\n  \t(apply infix (cons (op a b) xs))))","user":"524ad140e4b09eba1c0223a9"},{"code":"(fn [& args]  \r\n(first (nth \r\n(iterate (fn[args](conj  (drop 3 args)  ((second args)(first args)(nth args 2)))) args) \r\n(/ (- (count args) 1) 2)\r\n)))","problem":135,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":135,"code":"(fn infix\n  [& args]\n  (reduce (fn [base [sig b]] (sig base b)) (first args) (partition 2 (rest args))))","user":"5bbbcf9ee4b0a20761a23614"},{"code":"(fn infix [n & r]\n  (reduce #((first %2) %1 (second %2)) n (partition 2 r)))","problem":135,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":135,"code":"(fn [x & more] (reduce (fn [r [op y]] (op r y)) x (partition 2 more)))","user":"54bad522e4b0ed20f4ff6eb8"},{"problem":135,"code":"(fn [h & t] (reduce (fn [r [s n]] (s r n)) h (partition 2 t)))","user":"549375e4e4b0b312c081ff4e"},{"problem":135,"code":"(fn [x & other]\n   (reduce (fn [x [func num]] (func x num)) x (partition 2 other)))","user":"5f4fe1fae4b0a0bc16850a5c"},{"problem":135,"code":"(fn [& args]\n  (loop [[x op y & t] args]\n    (let [r (op x y)]\n      (if (empty? t)\n        r\n        (recur (conj t r))))))","user":"55c4cda5e4b0e31453f649a5"},{"problem":135,"code":"(fn [& args]\n(\n   (fn [a b]\n      (loop [xs a ys b acc 0]\n        ;(if (empty? xs)\n        (if (empty? ys)\n            acc\n            (\n              recur (if (zero? acc) \n                          (rest (rest xs))\n                          (rest xs)\n                          )\n                    (rest ys)\n                    (if (zero? acc) \n                        ( (first ys) (first xs) (second xs) )\n                        ( (first ys) acc (first xs) )\n                      )\n            )\n        )\n      )\n    )\n  (vec (keep-indexed #(if (even? %1) %2) args))\n  (vec (keep-indexed #(if (odd? %1) %2) args))\n  )\n  )","user":"55d7312ee4b0e31453f64a9f"},{"problem":135,"code":"(fn infix-calculator [& operands]\n  (let [pairs (partition 2 operands)\n        numbers (conj (into [] (map first pairs)) (last operands))\n        operations (into [] (map second pairs))]\n    \n    (loop [ops operations nums numbers]\n      (if (empty? ops)\n        (first nums)\n        (recur (rest ops) (cons\n                           ((first ops) (first nums) (second nums))\n                           (nthrest nums 2)))))))","user":"5693a53ee4b0dcc4269f4106"},{"code":"(fn [& xs]\n  (loop [[a op b] (take 3 xs) \n        lst (drop 3 xs)]\n    (if (nil? (seq lst))\n      (op a b)\n      (recur (cons (op a b) (take 2 lst)) (drop 2 lst)))\n)\n)","problem":135,"user":"4ff743fde4b0678c553fc38d"},{"problem":135,"code":"(fn infx [a x c & d] (if(empty? d) (x a c) (apply infx (cons (x a c) d))))","user":"5c7d5463e4b0d597f478caa9"},{"problem":135,"code":"#(reduce (fn [z [f x]] (f z x)) % (partition 2 %&))","user":"50ef4e2be4b0a78662fa2653"},{"problem":135,"code":"(fn infix-calc [a f b & args]\n  (if (empty? args)\n    (f a b)\n    (apply infix-calc (f a b) args)))","user":"59b554cee4b05c620303ca0f"},{"problem":135,"code":"(fn [x & xs]\n  (if-not xs\n    x\n    (reduce (fn [acc [operator operand]]\n              (operator acc operand))\n            x\n            (partition 2 xs))))","user":"5c38422ae4b0d62ef62d9f7f"},{"code":"(fn calc \n  ([a op b & args] (apply calc (calc a op b) args))\n  ([a op b] (op a b))\n  ([ret] ret)\n  )","problem":135,"user":"50807940e4b01a93d3f38e44"},{"code":"(fn infix [x op y & rest]\n  (let [v (op x y)]\n    (if rest\n      (apply infix (cons v rest))\n      v)))","problem":135,"user":"4eca2cea535d6d7199dd3702"},{"problem":135,"code":"(fn f\n  ([x] x)\n  ([l o r & v]\n   (apply f (o l r) v)))","user":"56949fc5e4b0dcc4269f4120"},{"code":"(fn [& args]\n  ((fn helper [accu [x & xs]]\n    (cond\n       (nil? x) accu\n       (fn? x) (recur (x accu (first xs)) (rest xs))\n       :else (recur x xs))) 0 args))","problem":135,"user":"50217818e4b00bba4502f7a7"},{"code":"(fn [& args]\n  (loop [ret (first args)\n         al (rest args)]\n          (if (empty? al) ret\n                (recur ((first al) ret (second al))\n                       (rest (rest al))))))","problem":135,"user":"4ec21058535dfed6da9c6dba"},{"problem":135,"code":"(fn [& [x op y & others]]\n  (let [result (op x y)]\n    (if (seq others)\n      (recur (cons result others))\n      result)))","user":"53571732e4b04ce2eb3ed275"},{"problem":135,"code":"(fn [& [a & xs]]   \n   (loop [[op b & more] xs\n          res a]\n     (if b\n       (recur more (op res b))\n       res)))","user":"5680104ae4b0966858e4d8ea"},{"problem":135,"code":"(fn\n  [& array]\n  (loop [input array]\n    (let [[operand1 operator operand2 & tail] input]\n      (if (nil? tail)\n        ( operator operand1 operand2)\n        (recur (cons (operator operand1 operand2) tail)\n               )\n        ))\n    )\n  )","user":"5aa8863ce4b0d174b936c8d0"},{"code":"(fn [f & r] (reduce #((first %2) %1 (last %2)) f (partition 2 r)))","problem":135,"user":"525de512e4b0cb4875a45d8a"},{"problem":135,"code":"(fn [s & xs](\n           reduce (fn [a [f p]](f a p)) s (partition-all 2 xs)\n          ))","user":"546280d8e4b01be26fd746b0"},{"problem":135,"code":"#(reduce \n  (fn \n    [rslt [operator operand]]\n    (operator rslt operand)) \n  % \n  (partition 2 %&))","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":135,"code":"(fn [n & args] \n  (loop [oper (take-nth 2 args), numerot (take-nth 2 (rest args)), tulos n]\n    (if (empty? oper)\n      tulos\n      (let [tulos ((first oper) tulos (first numerot))]\n        (recur (rest oper) (rest numerot) tulos)))))","user":"5ce52271e4b0a17bb84e2b69"},{"code":"(fn c [a f b & s]\n  (if (empty? s)\n    (f a b)\n    (apply c (f a b) s)))","problem":135,"user":"5191ac45e4b0d428d29dc1b6"},{"code":"(fn infix-calc [a f b & more]\r\n  (println a f b more)\r\n  (let [z (flatten more)]\r\n    (cond\r\n      (nil? f) a\r\n      (empty? more) (f a b)\r\n      true (infix-calc (f a b) (first z) (second z) (nnext (flatten more))))))","problem":135,"user":"4ef0f1a1535dced4c769f212"},{"code":"(fn [& s]\n  (let [f (first s)\n        r (rest s)\n        pairs (partition 2 r)]\n    (reduce (fn [a pair] ((first pair) a (last pair))) f pairs)))","problem":135,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":135,"code":"(fn inf [vl o vr & r]\n    (if\n      (nil? r)\n      (o vl vr)\n      (apply inf (cons (o vl vr) r))))","user":"5c9dcb36e4b048ec896c5b1d"},{"code":"(fn expr [a op b & args] \n  (let [r (apply op (list a b))]\n  (if (empty? args)\n    r\n    (apply expr (cons r args)))))","problem":135,"user":"4e25176e535d04ed9115e829"},{"problem":135,"code":"(fn infix [& xs]\n  (loop [a (first xs)\n         xs (rest xs)]\n    (if (empty? xs)\n        a\n        (recur ((first xs) a (second xs)) (nthrest xs 2 )))))","user":"5510aa92e4b06e50f9beb188"},{"code":"(fn [ & coll ] (loop [ c coll]\n     (let [[x op y :as ops] c]\n       (if (< (count ops) 3) x\n       (recur  (cons (op x y) (drop 3 ops) ))\n     ))\n  ))","problem":135,"user":"522eba30e4b01cdb292c5f0e"},{"problem":135,"code":"(fn\n  [arg & args]\n  (reduce (fn [a [op n]] (op a n)) arg (partition-all 2 args)))","user":"57efb389e4b0bfb2137f5bdb"},{"code":"(fn [ & argss]\n  (let [args (apply vector argss)]\n    (loop [v1 (nth args 0) op (nth args 1) v2 (nth args 2) r (subvec args 3)]\n      (if (empty? r)\n        (op v1 v2)\n        (recur \n          (op v1 v2)\n          (nth r 0)\n          (nth r 1)\n          (subvec r 2))))))","problem":135,"user":"4f03ac2d535dcb61093f6b4a"},{"code":"(fn [& e] (reduce #((first %2) %1 (second %2)) (first e) (partition 2 (next e))))","problem":135,"user":"52c8758be4b0c2d177d62135"},{"problem":135,"code":"(fn [first-value & values]\n  (let [[operation second-value & remaining] values]\n    (if (= operation nil)\n      first-value\n      (let [accumulator (operation first-value second-value)]\n      (recur accumulator remaining)))))","user":"5ee66158e4b029a2061bbe98"},{"code":"(fn [init-arg & op-args]\n  (reduce (fn [acc [op arg]] (op acc arg))\n          init-arg\n          (partition 2 op-args)))","problem":135,"user":"50fbf811e4b0d10d794c19f1"},{"problem":135,"code":"(fn [& args] (if (= (count args) 1)(first args)(let [[x f y & col] args](recur (cons (f x y) col)))))","user":"511036c5e4b04c71fce993ee"},{"code":"(fn [x & xs]\n  ((fn impl [xs r]\n    (if (empty? xs)\n      r\n      (cond\n       (= (first xs) +) (impl (next (next xs)) (+ r (first (next xs))))\n       (= (first xs) -) (impl (next (next xs)) (- r (first (next xs))))\n       (= (first xs) *) (impl (next (next xs)) (* r (first (next xs))))\n       (= (first xs) /) (impl (next (next xs)) (/ r (first (next xs)))))))\n   xs x))","problem":135,"user":"521392bce4b0d32679a5065e"},{"problem":135,"code":"(fn [& s]\n  (let [[a op b & rest] s\n        v (op a b)]\n    (if (seq rest)\n      (recur (cons v rest))\n      v)))","user":"500e6ddee4b04a05d36fcc06"},{"problem":135,"code":"(fn calc [init & args]\n  (let [ops (partition 2 args)]\n    (reduce (fn [a [op b]] (op a b)) init ops)))","user":"58fc92c5e4b0438e51c2cf9a"},{"code":"(fn calc \n  [ & args ]\n  (loop [xs args]\n    (if (= (count xs) 3) \n      ((second xs) (first xs) (nth xs 2))\n      (recur (conj (drop 3  xs ) ((second xs) (first xs) (nth xs 2)))))))","problem":135,"user":"5101192ae4b0bef64c30e266"},{"problem":135,"code":"(fn [& body]\n  (reduce (fn[acc [op o1]] (op acc o1)) (first body) (partition 2 (rest body))))","user":"57c0917be4b05aa3c4741c95"},{"problem":135,"code":"(fn [& body]\n  (let [left (first body)\n        [op right & exprs :as in] (rest body)]\n    (cond (empty? in) left\n          :else (recur (cons (apply op [left right]) exprs)))))","user":"5472cba1e4b094393f72dd7a"},{"code":"(fn infix [& args]\n  (loop [acc (first args) xs (rest args)]\n    (if (empty? xs) acc\n      (recur ((first xs) acc (second xs)) (nthrest xs 2)))))","problem":135,"user":"532c9dc9e4b019098a6f8b30"},{"problem":135,"code":"(fn f\n  ( [ x op y & res]\n   (let\n     [v (op x y)]\n     (if \n       (nil? res)\n       v\n       (apply f (cons v res))))))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":135,"code":"(fn [& args] (reduce #(if(fn? %1) (%1 %2) (partial %2 %1)) identity args))","user":"5b337ff4e4b025bcb146f339"},{"code":"(fn [v & s] (reduce (fn [x [f y]] (f x y)) v (partition 2 s)))","problem":135,"user":"523b1988e4b02f719975bdbc"},{"problem":135,"code":"(fn [& aseq]\n  ((fn calc\n     ([] (calc ((second aseq) (first aseq) (nth aseq 2)) (drop 3 aseq)))\n     ([val s]\n      (cond\n        (empty? s) val\n        (= 2 (count s)) ((first s) val (second s))\n        :else (calc ((first s) val (second s)) (drop 2 s)))))))","user":"5705e404e4b0b0fb43fd0676"},{"code":"(fn [& l]\n   (loop [ops (map second (partition 2 l))\n          vals (map second (partition 2 (rest l)))\n          res (first l)]\n     (if (= 0 (count ops))\n       res\n       (recur (rest ops)\n              (rest vals)\n              ((first ops) res (first vals))))))","problem":135,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":135,"code":"#(reduce (fn [x y]\n           (cond\n            (ifn? y) (fn [n] (y x n))\n            :default (x y)))\n         %&)","user":"57c94c6ee4b05aa3c4741d2d"},{"problem":135,"code":"(fn [& inputs]\n  (let [inputs (reverse inputs)]\n    ((fn calc [[arg op & more]]\n       (if (next more)\n         (op (calc more) arg)\n         (op (first more) arg))) inputs)))","user":"57002b81e4b08d47c97781c7"},{"problem":135,"code":"(fn spotcalc [a & args]\n  (loop [acc a, [op b & r] args]\n    (if (nil? op)\n      acc\n      (recur (apply op (list acc b)) r))))","user":"60882700e4b0ae75613dcedf"},{"problem":135,"code":"(fn [& coll]\n  (reduce #((first %2) %1 (last %2))\n          (first coll)\n          (partition 2 (rest coll))))\n;(fn calc [& coll]\n;  (let [ex (fn calc [expr acc]\n;             (if (seq ((comp rest)  expr))\n;               (calc ((comp rest rest)  expr)\n;                     ((first expr) acc (second expr)))\n;               acc))]\n;    (ex (rest coll) (first coll))))","user":"56754c4be4b05957ce8c6149"},{"code":"(fn f [a o & b]\n  (if (> (count b) 1)\n    (apply f (cons (o a (first b)) (next b)))\n    (o a (first b))))","problem":135,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":135,"code":"(fn infix [a f b & more]\n  (if (empty? more)\n    (f a b)    \n    (apply infix (f a b) more)))","user":"544257b4e4b032a45b869379"},{"problem":135,"code":"(fn [& abc]\n  (reduce #(if (fn? %2)\n             (partial %2 %1)\n             (%1 %2)) identity abc))","user":"56d63729e4b0ea9b8538f7ca"},{"code":"(fn [x & xs]\n  (reduce (fn [acc [operator operand]]\n            (operator acc operand))\n          x (partition 2 xs)))","problem":135,"user":"4f49e869e4b0d56e7bb92c02"},{"problem":135,"code":"(fn [& args]\n\t((fn a [n b]\n\t\t(if (< n (- (count b) 3)) \n\t\t\t(apply (get b (+ n 1)) (into [] (cons (a (+ n 2) b) [(get b n)])))\n\t\t\t(apply (get b (+ n 1)) (into [] (cons (get b (+ n 2)) [(get b n)])))\n\t\t)\t\t\n\t) 0 (into [] (reverse (into [] args))))\n)","user":"5710e574e4b09c608db7043b"},{"problem":135,"code":"(fn\n  [& expr]\n  (loop [[first-op oper second-op & tail] expr]\n    (if oper\n      (recur (conj tail (oper first-op second-op)))\n      first-op)))","user":"57972c9ee4b039eba2ecb0f2"},{"code":"(fn cal [& all]\n  (letfn [(calc0 [a lst] (if (empty? lst) a\n                           (let [fs (first lst) ns (next lst)]\n                             (if (integer? fs)\n                               (calc0 fs ns)\n                               (calc0 (fs a (first ns)) (next ns))\n                               )\n                             )))]\n    (calc0 0 all)))","problem":135,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn [f & r] (loop [s f l r] (if (empty? l) s (recur ((first l) s (first (rest l))) (rest (rest l))))))","problem":135,"user":"4f148418535d64f60314643a"},{"problem":135,"code":"(fn [& args]\n   ((fn [args accu]\n      (if (empty? args)\n        accu\n        (recur (rest (drop 1 args)) ((first args) accu (second args)))\n      )\n   ) (rest args) (first args))\n)","user":"53ecd01fe4b0d648e757f4b9"},{"code":"(fn [a & args]\n  (reduce (fn [a [op b]] (op a b)) a (partition 2 args)))","problem":135,"user":"5312cdaae4b08068f379ed03"},{"code":"(fn comput\r\n  ([a f b & other]\r\n    (if (empty? other)\r\n        (f a b)\r\n        (comput other (f a b))\r\n        )\r\n    )\r\n  ([[f b & other] result]\r\n    (if (empty? other)\r\n        (f result b)\r\n        (comput other (f result b) )\r\n     )  \r\n  )\r\n)","problem":135,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn infix\n  ([x o y]\n    (o x y))\n  ([x o y & more]\n    (apply infix (o x y) more)))","problem":135,"user":"4f18677d535d64f603146459"},{"problem":135,"code":"(fn [ & args ]\n  (reduce (fn [res [op x]]\n            (op res x))\n          (first args)\n          (partition 2 (rest args))))","user":"53480973e4b084c2834f4a52"},{"problem":135,"code":"(fn [myfirst & myrest]\n  (loop\n    [res  myfirst\n     todo myrest]\n    (if (empty? todo)\n      res\n      (let [[op nex & end] todo]\n      (recur (op res nex) end)))))","user":"5658d775e4b00d3155796114"},{"code":"(fn [s & r]\n  (reduce (fn [a1 [op a2]] (op a1 a2))\n    s (partition 2 r)))","problem":135,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn [x & r] (reduce #((first %2) % (second %2)) x (partition 2 r)))","problem":135,"user":"505d4b21e4b0e6aca564be07"},{"problem":135,"code":"(fn [tot & [f y & xs]]\n  (if f\n    (recur (f tot y) xs)\n    tot))","user":"4ff9a200e4b0678c553fc3ab"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [x y]\n            (if (number? y)\n              (x y)\n              (partial y x))) args))","user":"58303fc3e4b051871117c006"},{"code":"(fn ic [& vs]\n  (let [[a op b & rests] vs]\n    (cond\n      (nil? op) a\n      (empty? rests) (op a b)\n      :else (apply ic (cons (op a b) rests)))))","problem":135,"user":"4fbb9d80e4b081705acca2ea"},{"code":"(fn [ & infix]\n\t(loop [tot (first infix) op (second infix) bd (rest (rest infix))]\n        (if (empty? bd)\n          tot\n          (recur (op tot (first bd)) (second bd) (rest (rest bd))) )))","problem":135,"user":"513cb853e4b0b86ece9f322b"},{"problem":135,"code":"(fn calc [o1 op o2 & ops]\n  (let [app (apply op [o1 o2])]\n    (if ops\n    (apply calc (cons app ops))\n    app)))","user":"5fb85760e4b03f550f44821b"},{"problem":135,"code":"(fn [x & xs]\n  (reduce (fn [acc [f y]] (f acc y)) x (partition 2 2 xs)))","user":"560a67a1e4b05f002753def6"},{"problem":135,"code":"(fn [a & xs]\n         (loop [l xs \n                res a]\n           (if (empty? l)\n             res\n             (recur (drop 2 l) \n                    ((first l) res (first (next l)))))))","user":"58c4492be4b021aa9917ed27"},{"problem":135,"code":"; andthorn's solution:\n(fn infix\n  ([x f y] (f x y))\n  ([x f y & r] (apply infix (f x y) r)))\n\n; first solution\n#_(fn [x & coll]\n  (reduce #((first %2) % (second %2)) x (partition 2 coll)))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn infix\n  [& es]\n  (let [i (first es)\n        groups (partition-all 2 (rest es))]\n    \t(reduce #(do (println %) ((first %2) %1 (second %2))) i groups)))","problem":135,"user":"524f4256e4b0541d1855b808"},{"problem":135,"code":"(fn [& vs]\n   (reduce (fn [acc [op v1]] (op acc v1)) (first vs) (partition 2 (rest vs))))","user":"5310e968e4b08068f379ecdd"},{"problem":135,"code":"(fn [n & args]\n  (reduce (fn  [r [function operant]]\n            (function r operant)\n            ) n (partition 2 args)))","user":"5ccc2a03e4b0ccb06196288f"},{"code":"(fn [n & other]\n  (loop [c other r n]\n    (if (empty? c)\n    r\n    (recur (drop 2 c)\n      (apply (first c) [r (second c)])\n      ))))","problem":135,"user":"5033ed65e4b062bc5d7ae15a"},{"problem":135,"code":";; third rewrite:\n(fn f\n  ([a] a)\n  ([a b c & m]\n     (apply f (b a c) m)))","user":"4fa436dce4b081705acca19b"},{"code":"(fn [& l] (reduce (fn [v [op o]] (op v o)) (first l) (partition 2 (rest l))))","problem":135,"user":"5294e44de4b02ebb4ef75016"},{"code":"(fn [& formula]\n  (let [partitioned (partition-all 2 (drop 1 formula))\n        start (first formula)]\n    (reduce #((first %2) %1 (second %2)) start partitioned)))","problem":135,"user":"4e58ef07535d8a8b8723a299"},{"problem":135,"code":"(fn\n    [a operator & [b & more]]\n    (cond\n      (empty? more) (operator a b)\n      :else (recur (operator a b) (first more) (rest more))))","user":"54e79094e4b024c67c0cf818"},{"problem":135,"code":"(fn [x & args] (loop [[op b & coll] args a x] \n     (if (empty? coll) \n       (op a b)\n       (recur coll (op a b)))))","user":"562326cbe4b03f08ee9a9230"},{"code":"(fn [& args]\n  (if (= (count args) 1)\n    (first args)\n    (let [[x f y & rst] args]\n      (recur (cons (f x y) rst)))))","problem":135,"user":"519136e9e4b0f8ef0be96c01"},{"code":"(fn [& expr] \n   (loop [r (first expr) x (rest expr)]\n     (println r x)\n     (if (empty? x)\n       r\n       (recur ((first x) r (second x)) (nthrest x 2)))))","problem":135,"user":"52c81954e4b0c2d177d6212e"},{"problem":135,"code":"(fn n ([x] x) ([x o y & r ] (apply n (o x y) r)) )","user":"53a01fb1e4b0ca733b9744a6"},{"problem":135,"code":"(fn [& r]\n  (let [red (fn [f p] (if (integer? p) #(f p) #(p (f) %)))]\n    ((reduce red #(+ 0 %) r))))","user":"4e3ac1b2535deb9a81d77f4c"},{"problem":135,"code":"(fn [& c]\n  (reduce\n    (fn [v x] (if (number? x) (v x) #(x v %))\n      ) #(do %) c\n    )\n  )","user":"55e1d34ae4b050e68259b421"},{"problem":135,"code":"(fn infixcalc [x & op]\n  (loop [v x ops (partition 2 op) op (first ops)]\n    (if (not op)\n      v\n      (recur ((first op) v (last op)) (drop 1 ops) (first (drop 1 ops))))))","user":"5d88d820e4b0915913b1d3b1"},{"problem":135,"code":"(fn infix\n  ([x f y] (f x y))\n  ([x f y & rest] (apply infix (f x y) rest)))","user":"5a544eeee4b05d388ecb6c24"},{"problem":135,"code":"(fn f [x op y & ys] \n  (if (seq ys)\n    (apply f (op x y) ys)\n    (op x y)))","user":"53b42472e4b047364c0444b2"},{"problem":135,"code":"(fn prob-135 [c & r]\n  (loop [s (seq r) a1 [c]]\n    (if (not s)\n      (first a1)\n      (let [o1 (first s)]\n        (if (number? o1)\n          (recur (seq (rest s)) (conj a1 o1))\n          (let [o2 (first (rest s))\n                o3 (last a1)]\n            (recur (seq (rest (rest s))) (conj (pop a1) (o1 o3 o2)))))))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":135,"code":"(fn [& args]\n  ((fn infix [op result rst]\n     (if (empty? rst) result\n       (let [cur (first rst)]\n         (if (number? cur) (infix nil (op result cur) (rest rst))\n           (infix cur result (rest rst)))))) nil (first args) (rest args)))","user":"58f98231e4b0438e51c2cf4c"},{"problem":135,"code":"(fn ex135-2\n  [& expr-stack]\n  (if (= 1 (count expr-stack))\n      (first expr-stack)\n      (recur (ex135-2 (let [[a b c] (take 3 expr-stack)]\n                        (conj (drop 3 expr-stack) (b a c)))))))","user":"532bce35e4b09d4e7a9b5536"},{"code":"(fn infix [& args]\n  (let [fc (fn [[a b c & more] acc]\n\t\t\t           (let [calc (b a c)]\n\t\t\t\t           (if (empty? more)\n\t\t\t\t             calc\n\t\t\t\t             (recur (cons calc more) calc))))]\n    (fc args 0)))","problem":135,"user":"50ee145de4b06330c1f87c53"},{"problem":135,"code":"(fn [f & r]\n   (reduce\n    #(cond\n      (= + (first %2)) (+ %1 (last %2))\n      (= - (first %2)) (- %1 (last %2))\n      (= / (first %2)) (/ %1 (last %2))\n      (= * (first %2)) (* %1 (last %2)))\n    f\n    (partition-all 2 r)))","user":"52fac708e4b047fd55836fff"},{"problem":135,"code":"(fn [& xs]\n (first (reduce \n    (fn [a x]\n      (let [f (second a)]\n        (if (fn? f)\n          [(f (first a) x)]\n          (conj a x))))\n    []\n    xs)))","user":"55fee5e4e4b00f4cabc5765a"},{"code":"(fn inf [& args]\n  (let [curr (take 3 args)\n        val ((second curr)(first curr)(last curr))\n        others (drop 3 args)]\n       (if (empty? others) val\n         (apply inf (cons val others)))))","problem":135,"user":"4dcfbc44535d5973398f92a7"},{"problem":135,"code":"(fn [x & xs]\n  (reduce\n    (fn [x [op y]]\n      (op x y))\n    x\n    (partition 2 xs)))","user":"53161a56e4b08068f379ed3e"},{"problem":135,"code":"#(reduce (fn[acc [f a]] (f acc a)) %1 (partition 2 %&))","user":"5b210749e4b03cfeda66ed48"},{"code":"(fn [a & d]\n  (loop [acc a terms d]\n    (if (empty? terms)\n      acc\n      (let [[op term & remaining] terms]\n        (recur (op acc term) remaining)))))","problem":135,"user":"50fc299ee4b0d10d794c19f2"},{"problem":135,"code":"(fn [& r]\n   (loop [re r]\n     (let [first-tree (take 3 re)]\n       (if (>= 1 (count first-tree))\n         (first first-tree)\n         (let [[v1 f v2] first-tree]\n           (recur (cons (f v1 v2) (drop 3 re))))))))","user":"54a11042e4b09f271ff37c49"},{"problem":135,"code":"(fn [& x]\n   (loop [ac (first x) ops (rest x)]\n     (if-not (seq ops)\n       ac\n       (recur ((first ops) ac (second ops)) (rest (rest ops))))))","user":"4ec66e84535d6d7199dd36cd"},{"problem":135,"code":"(fn [a operator b & rest]\n  (if (nil? operator)\n    a\n    (recur (operator a b) (first rest) (second rest) (drop 2 rest))))","user":"576c2ecae4b07c67f59d1fbb"},{"code":"(fn [& args]\r\n  (loop [num (take-nth 2 args) f (take-nth 2 (rest args))]\r\n    (if (empty? f)\r\n    (first num)\r\n    (recur (cons ((first f) (first num) (nth num 1)) (drop 2 num)) (rest f)))))","problem":135,"user":"4fdf4e2be4b05e33b9224f96"},{"code":"(letfn [(cal [n  [o v & s :as ovs]]\n  (if (empty? ovs) n\n    (recur (o n v) s)))]\n  (fn [f & s] (cal f s)))","problem":135,"user":"50901b2ee4b0ea685a20f774"},{"code":"#(reduce (fn [a b]\n          (if (fn? b) (partial b a) (a b)))\n        identity\n        %&)","problem":135,"user":"51b9d1f0e4b0e871ca49590b"},{"code":"(fn [& c] (reduce #(if (fn? %) (% %2) (partial %2 %)) + c))","problem":135,"user":"5093ca51e4b097f48cc38585"},{"problem":135,"code":"(fn [initial & xs]\n (let [pairs (partition 2 xs)]\n   (reduce (fn [result [op value]] (op result value)) initial pairs)))","user":"4f43894ee4b0d7d3c9f3fd21"},{"problem":135,"code":"(fn calculate\n  ([arg] arg)\n  ([arg1 op arg2 & args]\n   (apply calculate (op arg1 arg2) args)))","user":"59a96a85e4b0bcf4e9a43b13"},{"problem":135,"code":"(fn calculate \n  ([num] num)\n  ([num1 op num2 & coll]\n   (apply calculate (op num1 num2) coll)))","user":"53286f84e4b09d4e7a9b5505"},{"code":"(fn p135a [& args]\n  (loop [coll (rest args)\n         rslt (first args)]\n    (if (empty? coll)\n      rslt\n      (recur (nthrest coll 2) ((first coll) rslt (second coll))))))","problem":135,"user":"519c4111e4b0a1d87b003458"},{"code":"(fn [op1 & opPairs]\n  (if (empty? opPairs)\n    op1\n    (recur ((first opPairs) op1 (second opPairs)) (drop 2 opPairs))))","problem":135,"user":"5149f383e4b0829bd132edb2"},{"code":"(fn [x & more]\n  (->> (partition 2 more)\n       (reduce (fn [acc [f y]] (f acc y)) x)))","problem":135,"user":"4daec9dcedd6309eace4d15f"},{"code":"(fn infix\n  ([a o b] (o a b))\n  ([a o b & xs]\n   (apply infix (cons (o a b) xs))))","problem":135,"user":"51a97f7ae4b08d8ec191b827"},{"problem":135,"code":"(fn [& args]\n\t(loop [[op1 operator op2 & rst] args]\n    \t(let [res (operator op1 op2)]\n    \t\t(if (nil? rst)\n      \t\t\tres\n      \t(recur (conj rst res))))))","user":"566e87cfe4b0a866af6896dc"},{"problem":135,"code":"(fn [& exprs]\n  (loop [s (seq exprs), left nil, op nil]\n    (if (seq s)\n      (cond\n       op (recur (rest s) (op left (first s)) nil)\n       left (recur (rest s) left (first s))\n       :else (recur (rest s) (first s) nil))\n      left)))","user":"54ca93abe4b057c6fda3a264"},{"code":"(fn infix-calculator [& args]\n  (reduce (fn [n1 [op n2]] (op n1 n2)) ;operations the first number by the next, then reduces the results of each one after\n          (first args)\n          (partition 2 (rest args))))","problem":135,"user":"53713ebee4b0fc7073fd6ead"},{"problem":135,"code":"(fn [& p] \n  ((fn [r] (let [a (first r)\n                 b (second r)\n                 c (nth r 2)\n                 rst (drop 3 r)\n                 res (b a c)] (if (empty? rst) res (recur (cons res rst))))\n    ) p)\n  )","user":"60471241e4b02d28681c77c9"},{"code":"(fn [F & M] \r\n      (reduce\r\n\t     #((first %2) %1 (second %2))\r\n\t     F\r\n\t     (partition 2 M)))","problem":135,"user":"4dadca03c9a9d6ed4199dc57"},{"code":"(fn [a & b] (reduce (fn [c [d e]] (d c e)) a (partition 2 b)))","problem":135,"user":"5159849ce4b0394f658fe236"},{"code":"(fn [& args] (loop [x (drop 3 args) \n   res ((second args) (first args) (nth args 2))]\n         (if (seq x) \n               (recur (drop 2 x) ((first x) res (second x)))\n                res)))","problem":135,"user":"4efd98fa535de96065cf5086"},{"code":"(fn in-fix [a op b & more]\n    (let [e (op a b)]\n      (if (seq more)\n        (apply in-fix e more)\n        e)))","problem":135,"user":"538e29d1e4b0b51d73faae80"},{"problem":135,"code":"(fn infix-calculator\n    [& args]\n    (reduce\n     \t\t;; On applique l'operateur sur les premiers operantes\n     \t\t(fn \n                [a [op b]]\n                (op a b))\n          (first args)\n     \t  ;; Puis on coupe le reste en deux\n          (partition 2 (rest args))))","user":"587bead1e4b01531a375eb0d"},{"code":"(fn [a & arr] (reduce #((nth %2 0) %1 (nth %2 1)) a (partition 2 arr)))","problem":135,"user":"526fce6fe4b03e8d9a4a7383"},{"problem":135,"code":"#(reduce (fn [r [op n]] (op r n)) (first %&) (partition 2 (rest %&)))","user":"5603c31fe4b04bb52996e1c1"},{"problem":135,"code":"(fn infix-cal [& args]\n\t(let [n1 (first args)\n\t\t  rest-args (rest  args)]\n\t  (reduce (fn [result args]\n\t            (apply (first args) (list result (second args))))    \n\t    n1 (partition 2 rest-args))))","user":"532dbd3ce4b019098a6f8b40"},{"problem":135,"code":"(fn [acc & ns]\n  (loop [[f h & tail] ns\n         res acc]\n    (if (empty? tail)\n      (f res h)\n      (recur tail (f res h)))))","user":"5565f616e4b0c656e3ff1823"},{"problem":135,"code":"(fn compute [x op y & xs] (let [result (op x y)] (if (empty? xs) result (apply compute (conj xs result)))))","user":"54d03026e4b018d918be98de"},{"problem":135,"code":"(fn inCalculator\n  [& n]\n  (reduce (fn [a [op b]] (op a b))\n          (first n)\n          (partition 2 (rest n))))","user":"59dd3930e4b0a0ac046f2504"},{"code":"(fn [& args]\n  (loop [v (first args) op (second args) right (nth args 2) others (drop 3 args)]\n    (if (empty? others) (op v right)\n      (recur (op v right) (first others) (second others) (drop 2 others))\n    )\n  )\n)","problem":135,"user":"51c342e9e4b0851ac09658f3"},{"problem":135,"code":"(fn [x & terms]\n  (->> terms\n       (partition 2)\n       (reduce (fn [n [f m]] (f n m)) x)))","user":"5a95c639e4b0d174b936c75e"},{"code":"(fn f [a b c & d]\n  (if d\n    (apply f (b a c) d)\n    (b a c)))","problem":135,"user":"5125c7e9e4b05d10e3e395fd"},{"problem":135,"code":"(fn [head & tail]\n  ((fn [args acc]\n     (if (empty? args)\n       acc\n       (recur (drop 2 args) ((first args) acc (second args)))))\n   tail head))","user":"55e2f502e4b050e68259b43c"},{"problem":135,"code":"(fn [a & as]\n   (reduce (fn [x [o y]] (o x y)) a (partition 2 as)))","user":"550b502ae4b06e50f9beb13f"},{"problem":135,"code":"(fn calc [ a & r] (loop [ x a s (seq r)] ( if (empty? s )  x (recur ((first s) x (second s)) (rest (rest s)))) ) )","user":"55d44dd6e4b0e31453f64a75"},{"code":"(fn a [x op y & args] (if-not(nil? args)(apply a (op x y) (first args) (second args) (nnext args))(op x y)))","problem":135,"user":"527a8eb7e4b03e8d9a4a755f"},{"code":"(fn c [& _more]\n(loop [more (vec(flatten _more))]\n  (let [result ((nth more 1) (nth more 0) (nth more 2))]\n  (if (> 4 (count more))\n    result\n    (recur (vec (cons result (subvec more 3))))))))","problem":135,"user":"507bb3ece4b09034bfeeb720"},{"code":"(fn [arg & more]\n  (loop [rem more\n         result arg]\n    (println rem)\n    (println result)\n    (if (nil? (second rem))\n      result\n      (recur (drop 2 rem) ((first rem) result (second rem))))))","problem":135,"user":"50481532e4b0ec70b3ef8d96"},{"code":"(fn infix\n  [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [[x y z & r] args\n          a [x z]]\n      (apply infix (cons (apply y a) r)))))","problem":135,"user":"4f73f78de4b044e54cd9a8f3"},{"problem":135,"code":"(fn calc\n  ([num] num)\n  ([left op right & rest2] \n   (let [result (op left right)]\n     (if (empty? rest2)\n       result\n       (apply calc (cons result rest2))\n     )\n   )\n  )\n)","user":"5606d71ce4b08b23635d317a"},{"problem":135,"code":"(fn infix-calc\n  [x f y & d]\n  (if (empty? d)\n    (f x y)\n    (apply infix-calc (cons (f x y) d))))","user":"5ac35d00e4b0e27600da7712"},{"problem":135,"code":"(fn infix-calculator [& args]\n  (loop [args args result 0 initial true]\n    (if (empty? args)\n      result\n      (let [a   (if initial (nth args 0) result)\n            op  (if initial (nth args 1) (nth args 0))\n            b   (if initial (nth args 2) (nth args 1))\n            drop-n (if initial 3 2)]\n        (recur (drop drop-n args) (+ (op a b)) false)))))","user":"5d0859fbe4b0cc9c91588208"},{"problem":135,"code":"(fn [& e] (reduce #(if (fn? %) (% %2) (partial %2 %)) e))","user":"5fd10010e4b07e53c2f3f02a"},{"problem":135,"code":"(fn [a & args]\n  (reduce #((first %2) % (last %2)) a (partition 2 args)))","user":"541ddadbe4b01498b1a71a84"},{"problem":135,"code":"(fn [f & xs] \n  (reduce (fn [a [op sec]] \n            (op a sec)) \n          f (partition 2 xs)))","user":"50c781bbe4b00bb60fe0c535"},{"problem":135,"code":"(fn my-infix\n  ([num-1 operator num-2] (operator num-1 num-2))\n  ([num-1 operator num-2 & args] (apply my-infix (cons (operator num-1 num-2) args)))\n)","user":"5c3440fee4b0d62ef62d9f50"},{"problem":135,"code":"(fn infix\n        ([& args]\n           (if (= 1 (count args))\n             (first args)\n             (let [[a op b & rest] args]\n               (apply infix (cons (op a b) rest))))))","user":"52efd3d9e4b05e3f0be25ed4"},{"code":"(fn [a & more] (reduce (fn [r [op v]] (op r v)) a (partition 2 more)))","problem":135,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":135,"code":"(fn infix\n  [x f y & args]\n  (let [a (f x y)]\n    (if (empty? args)\n      a\n      (recur a (first args) (second args) (drop 2 args)))))","user":"54091b82e4b0addc1aec66d5"},{"problem":135,"code":"(fn infix-calc [n & ops]\n  (reduce #((first %2) %1 (second %2)) n (partition 2 ops)))","user":"567e418fe4b0feffd0d18eb1"},{"problem":135,"code":"(fn [& x]\n  (loop [a (first x) b (rest x)]\n           (if (not-empty b)\n           \t(recur ((first b) a (second b)) (rest (rest b)))\n            a)))","user":"4e44358f535dc968683fc4a8"},{"code":"(fn i [x & s] \n   (if (seq s)\n     (apply i ((first s) x (second s)) (rest (rest s)))\n     x))","problem":135,"user":"4db0114d838c48654951d9b8"},{"problem":135,"code":"(fn f [l & nol]\n (reduce\n  (fn [a [op b]]\n   (op a b))\n  l\n  (partition 2 nol)))","user":"549a999be4b0f3d1d8e70f6f"},{"code":"(fn cal [& xs]\n  (if (second xs)\n    (let [[x op y & t] xs ]\n    (apply cal (cons (op x y) t)))\n    (first xs)))","problem":135,"user":"50b35486e4b03ea88043356a"},{"code":"(fn infix [larg op rarg & rest]\n\t(if rest\n\t\t(apply infix (op larg rarg) rest)\n\t\t(op larg rarg)))","problem":135,"user":"4fb804f7e4b081705acca2d6"},{"code":"(fn f [& args]\n  (reduce #((first %2) % (second %2)) (first args) (partition 2 (rest args))))","problem":135,"user":"51750cd4e4b07031762f2ee5"},{"code":"#(loop [l (rest %&), r (first %&)] \n   (if (seq l)\n     (recur\n       (drop 2 l)\n       ((first l) r (second l)))\n     r))","problem":135,"user":"4e82f85d535db62dc21a62ce"},{"problem":135,"code":"(fn x [first-num & coll] \n  (reduce \n   (fn [x [oper y]] (oper x y)) \n   first-num \n   (partition 2 coll)))","user":"5ea970d1e4b00a66d4a951c6"},{"code":"(fn [x & s]\n    (reduce #((first %2) % (last %2)) x (partition 2 s)))","problem":135,"user":"4f39f902e4b0e243712b1efe"},{"code":"(fn [x & exp] (reduce (fn [acc [op y]] (op acc y)) x (partition 2 exp)))","problem":135,"user":"4ee6400c535d93acb0a6685b"},{"problem":135,"code":"(fn infix-calc [& exps]\n  (loop [[a op b :as e] exps]\n    (if (= (count e) 1) (first e)\n        (recur (cons (op a b) (drop 3 e))))))","user":"5146f343e4b04ef915e3731e"},{"problem":135,"code":"(fn cal [fval op sval & args]\n    (if (= (count args) 0)\n     (op fval sval)\n     (apply cal (op fval sval) args)))","user":"5874d5ace4b01531a375ea5b"},{"problem":135,"code":"(fn calc [a & others]\n  (let [others (partition 2 others)]\n    (reduce (fn [acc curr]((first curr) acc (second curr))) a others)))","user":"5eecf110e4b07c55ae4a050b"},{"problem":135,"code":"(fn calc\n  ([x y z] (y x z))\n  ([x y z & args] (apply calc (y x z) args)))","user":"572a856be4b0f4d77e65123b"},{"problem":135,"code":"(fn infix [& args]\n  (if (<= (count args) 3)\n    ((second args) (first args) (nth args 2))\n    (apply infix (cons\n                   ((second args) (first args) (nth args 2))\n                   (drop 3 args)))))","user":"54c8d4a8e4b045293a27f654"},{"problem":135,"code":"(fn [& symbols](loop [lista symbols res (first symbols)]\n                       (if (= 1 (count lista)) res\n                         (recur \n                          (cons ((second lista) res (nth lista 2)) (drop 3 lista)) ((second lista) res (nth lista 2))))))","user":"54e4edcae4b024c67c0cf7f3"},{"problem":135,"code":"(fn infix\n   ([x op y] (op x y))\n   ([x op y & xs]\n    (apply infix (cons (infix x op y) xs))))","user":"5a03d246e4b01bb0ae8afd8c"},{"problem":135,"code":"#(reduce (fn [l [op r]] (op l r)) % (partition 2 %&))","user":"5339c105e4b0e30313ee6cae"},{"code":"(fn f [& args]\n  (loop [[a op b & more] args] \n    (let [first (op a b)]\n      (if (seq more)\n        (recur (cons first more))\n        first))))","problem":135,"user":"4dbd2aa3535d020aff1edf40"},{"problem":135,"code":"(fn [l op r & args]\n  (let [res (op l r)\n        [op2 rhs] args]\n    (if (not (empty? args))\n      (recur res op2 rhs (drop 2 args))\n      res)))","user":"541168dee4b01498b1a719c3"},{"problem":135,"code":"(fn [& args]\n  (first (reduce\n   (fn [acc cur]\n     (let\n       [val (first acc)\n        prev (last acc)]\n       (if (instance? clojure.lang.IFn prev)\n         [(prev val cur) cur]\n         [val cur])))\n   [0 +]\n   args)))","user":"57fdd1cfe4b0d3187e9009bf"},{"problem":135,"code":"(fn [fst & others]\n  (loop [acc   fst\n         stack others]\n    (if (empty? stack) acc\n      (let [op   (first stack)\n            b    (second stack)\n            tail (rest (rest stack))]\n        (recur (op acc b) tail)))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":135,"code":"(fn simple-infix [& exp]\n  ;; If an operator, returns a partial of that op and the previous accumilated\n  ;; value. If a number, return the value of the previous partial function\n  ;; applied to the number. The cycle repeats\n  (reduce (fn [acc x]\n            (if (number? x)\n              (acc x)\n              (partial x acc)))\n          identity\n          exp))","user":"58327a08e4b089d5ab817c7c"},{"code":"(fn infix ([n] n)\r\n  ([x op y & r] (apply infix (op x y) r)))","problem":135,"user":"504e14c2e4b078edc5f593bf"},{"problem":135,"code":"(fn [& args]\n  (loop [[x op y & r] args]\n    (if (empty? r)\n      (op x y)\n      (recur (cons (op x y) r))\n    )\n  )\n)","user":"5f6b8222e4b02876ed9fd052"},{"code":"(fn [x & r] (reduce (fn [s [f n]] (f s n)) x (partition 2 r)))","problem":135,"user":"536973e5e4b0243289761e9e"},{"problem":135,"code":"(fn ifx [& xs]\n   (println :xs xs)\n   (cond\n     (second xs)\n     (let [[a op b & mas] xs\n           r (op a b)]\n       (apply ifx (cons r mas)))\n     :default (first xs)))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":135,"code":"(fn icalc\n([x] x)\n([x op y] (op x y))\n([x op y & more]\n (apply icalc (concat (list (op x y)) more))))","user":"5590ebb1e4b0277789237677"},{"code":"(fn\n  [& xs]\n  (first\n   (reduce #(if (fn? %2) [(%1 0) %2] [((%1 1) (%1 0) %2) +]) [0 +] xs)))","problem":135,"user":"4db53f87535d87e67b28fe08"},{"problem":135,"code":"(fn [& args]\n  (:x (reduce (fn [t v]\n                (if (fn? v) \n                  (assoc t :func v)\n                  (assoc t :x ((:func t) (:x t) v))))\n              {:x (first args)}\n              (rest args))))","user":"54dce62be4b024c67c0cf78b"},{"problem":135,"code":"(fn [v & args] (reduce (fn [v0 [o n]] (o v0 n)) v (partition 2 args)))","user":"55632016e4b0c656e3ff17e4"},{"problem":135,"code":"(fn infix [& sq]\n  (loop [z (first sq) cl (rest sq)]\n    (if (empty? cl) \n      z\n      (let [[f a & rst] cl]\n        (recur (f z a) rst)))))","user":"57de9169e4b0bd073c202454"},{"problem":135,"code":"(fn calc\n  ([x & l]\n   (if (empty? l) x\n      (apply calc (conj (drop 2 l) ((first l) x (second l)))))))","user":"53767991e4b06839e8705e25"},{"code":"(fn [& coll]\n\t  (reduce  #(if (fn? %2)\n\t\t\t   (partial %2 %1)\n\t\t\t (%1 %2)) \n\t\t   coll))","problem":135,"user":"5151c184e4b03e678e393add"},{"code":"(fn f [x op y & r]\n  (let [v (op x y)]\n    (if r\n      (apply f v r)\n      v)))","problem":135,"user":"500d8c49e4b07ccb9a7ddb00"},{"code":"(fn infix\n  ([a op b & r] (apply infix (cons (op a b) r)))\n  ([a] a))","problem":135,"user":"534efe66e4b084c2834f4ac1"},{"problem":135,"code":"(fn [& coll] (reduce (fn [acc new] ((first new) acc (second new))) (first coll) (partition 2 (next coll))))","user":"52485723e4b05ef8e38e63d2"},{"problem":135,"code":"(fn [& args]\n  (reduce #((first %2) % (last %2))\n          (first args)\n          (partition 2 (rest args))))","user":"59dd38a8e4b0a0ac046f2503"},{"code":"(fn [& coll]\n  (loop [acc (first coll) c (rest coll)]\n        (if (nil? c) acc\n          (recur\n            ((first c) acc (second c))\n            (nthnext c 2)))))","problem":135,"user":"53806e5be4b06839e8705ec1"},{"problem":135,"code":"(fn [& exp]\n  (loop [[a op b & other] exp]\n    (if (nil? op) \n      a\n      (recur (cons (op a b) other)))))","user":"563dfc02e4b0da801c4e4662"},{"code":"(fn [& args] (reduce (fn [a [op b]] (op a b)) (first args) (partition 2 (rest args))))","problem":135,"user":"5183f5d7e4b02826a645f393"},{"code":"(fn [& coll]\n\t(let [a0 (first coll), c (partition 2 (rest coll))]\n\t\t(reduce #((first %2) %1 (second %2)) a0 c)))","problem":135,"user":"5370b386e4b0fc7073fd6e9b"},{"problem":135,"code":"(fn\n  [& lst]\n  (reduce (fn [a [f b]] (f a b))\n          (first lst)\n          (partition 2 (rest lst))))","user":"5aa2f1dee4b0d174b936c865"},{"problem":135,"code":"(fn [& args]\n  (loop [i 0\n         v identity]\n    (if (= i (count args))\n      v\n      (if (= 0 (mod i 2))\n        (recur (inc i) (v (nth args i)))\n        (recur (inc i) (partial (nth args i) v))))))","user":"57d57f65e4b0bd073c2023b3"},{"problem":135,"code":"(fn [& input]\n  (loop [expr input]\n    (if (<= (count expr) 1)\n      (first expr)\n      (let [[x op y & zs] expr]\n        (recur (cons (op x y) zs))))))","user":"59ee6801e4b0966464fe6a1f"},{"problem":135,"code":"(fn [init & r] (reduce (fn [r [op v]] (op r v)) init (partition 2 r)))","user":"4eb97234535dfed6da9c6d53"},{"code":"(fn calc [x op y & args]\n  (if (empty? args)\n    (op x y)\n    (apply calc (cons (op x y) args))))","problem":135,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":135,"code":"(fn infix \n  [& var]\n  (if (= (count var) 1) \n    (first var)\n    (let [[x operacion y & lst] var]\n        (recur (cons (operacion x y) lst)))))","user":"59e68254e4b0249b728206fc"},{"problem":135,"code":"(fn f [x o y & r]\n  (if r\n    (apply f (o x y) r)\n    (o x y)))","user":"5c718e6ce4b0fca0c1622796"},{"code":"(fn [& xs]\r\n    (if (= (count xs) 1) (first xs)\r\n        (recur (cons ((second xs) (first xs) (second (rest xs)))\r\n                     (rest (rest (rest xs)))))))","problem":135,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":135,"code":"#(reduce (fn [a [f b]]\n           (f a b))\n        %1\n        (partition 2 %&))","user":"53b7aa6ce4b047364c0444d1"},{"code":"(fn x [a f b & r] (let [z (f a b)] (if r (apply x (conj r z)) z)))","problem":135,"user":"4f5d0f25e4b0030a34fb2b33"},{"problem":135,"code":"(fn red [& q]\n       (let [res ((first (rest q)) (first q) (first (rest (rest q))))\n             others (rest (rest (rest q)))]\n  \t(if (>= 3 (count q))\n\t    res\n   \t\t(apply red (into others [res]))))\n     \n     )","user":"540479e7e4b0addc1aec665a"},{"problem":135,"code":"(fn [& toks]\n  (loop [total (first toks)\n         toks  (rest toks)]\n    (if (empty? toks)\n      total\n      (let [[op x] (take 2 toks)]  \n        (recur (op total x)\n               (drop 2 toks))))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":135,"code":"(fn [accum & s]\n  (if (empty? s)\n    accum\n    (let [[op operand & s] s]\n      (recur (op accum operand) s))))","user":"5215661be4b02f6d8ea676c7"},{"code":"(fn ! \n([a]\n  a) \n([a op b & xs]\n  (apply ! (op a b) xs)))","problem":135,"user":"50573ed8e4b0012181721987"},{"problem":135,"code":"(fn [& args]\n  (loop [res (first args) c (rest args)]\n    (if (empty? c) res\n    (recur ((first c) res (second c)) (drop 2 c)))))","user":"5d764e52e4b02e6b30c93524"},{"code":"(fn [a & b]\n  (if (empty? b)\n      a\n      (recur ((first b) a (fnext b)) (drop 2 b))))","problem":135,"user":"4e72ac47535d5021c1a89666"},{"problem":135,"code":"(fn [a op b & xs]\n      (if (empty? xs)\n        (op a b)\n        (recur (op a b)\n               (first xs)\n               (second xs)\n               (rest (rest xs)))))","user":"504f5804e4b0a02f9cffde72"},{"code":"(fn infix [val & args] \n  (let [[op next & r] args ]\n     (if (seq args)\n\t     (apply infix (into [(op val next)] r ))\n\t\t val)))","problem":135,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn [& more]\n  (reduce\n    (fn [a b] ((first b) a (second b) ))\n    (first more)\n    (partition 2 (rest more))\n  )\n)","problem":135,"user":"501ffbb1e4b0cb6ebc0a42f2"},{"code":"(fn [x & args] (reduce #((first %2) %1 (second %2)) x (partition 2 args)))","problem":135,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":135,"code":"(fn[f o & r]\n  (println (count r) f o (flatten r))\n  (if (= (count r) 1)\n    (apply o [f (first (flatten r))])\n    (recur (apply o [f (first (flatten r))]) (first(rest r)) (rest(rest r)))))","user":"53e241a6e4b036ad0777e3f0"},{"problem":135,"code":"(fn c \n  ([x] x) \n  ([x f y & a] (apply c (f x y) a)))","user":"56327168e4b0bfe05bf117a5"},{"problem":135,"code":"(comp (fn eval-exp\n        [[v op & exp]]\n        (if op\n          (op (eval-exp exp) v)\n          v))\n      reverse\n      vector)","user":"5c30da5ae4b0d62ef62d9f23"},{"problem":135,"code":"#(reduce\n  (fn [a [f b]] (f a b))\n  (first %&)\n  (partition 2 (rest %&)))","user":"543b4746e4b032a45b86932c"},{"problem":135,"code":"(fn [& expr]\n    (loop [s (rest expr) acc (first expr)]\n      (if (empty? s)\n        acc\n        (recur (drop 2 s) ((first s) acc (second s))))))","user":"5c165d3ee4b01240ff5671d1"},{"problem":135,"code":"(fn [x & more]\n  (reduce\n   (fn [acc [op y]]\n     (op acc y))\n   x\n   (partition 2 more)))","user":"5346f409e4b084c2834f4a46"},{"code":"(fn [x & xs]\n  (let [grouped-lst (partition 2 xs)\n        helper (fn [zero xs]\n          (let [ys (vec xs)\n                f (first xs)\n                z (second xs)\n                ]\n                (apply f (list zero z))))\n        ]\n    (reduce helper x grouped-lst)))","problem":135,"user":"50611456e4b0dc10a69545a5"},{"code":"(fn[a & b] (reduce #((first %2) %1 (second %2)) a (partition 2 b)))","problem":135,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":135,"code":"(fn [& args]\n  (let [[init coll] (split-at 3 args)]\n    (loop [parts (partition 2 coll), acc ((fn [[x op y]] (op x y)) init)]\n      (if (empty? parts)\n        acc\n        (let [[op x] (first parts)]\n          (recur (rest parts) (op acc x)))))))","user":"552356fae4b0882d96d091af"},{"code":"(fn i [& f]\n  (if (= (count f) 1)\n    (first f)   \n    (apply i (cons (apply (second f)\n                              (list (first f)\n                                    (second (rest f))))\n                       (drop 3 f)))))","problem":135,"user":"4facd2fae4b081705acca22f"},{"problem":135,"code":"(fn [& exp]\n  (let [f (first exp)\n        ops (partition 2 (rest exp))]\n    (reduce (fn [r [op x]] (op r x))\n            f\n            ops)))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":135,"code":"(fn inf [& xs]\n  (if (= (count xs) 1)\n    (first xs)\n    (apply inf (conj (drop 3 xs) ((second xs) (first xs) (nth xs 2))))))","user":"56800ba1e4b0966858e4d8e8"},{"problem":135,"code":"(fn infix\n  [x & coll]\n  (if (empty? coll)\n    x\n    (recur ((first coll) x (second coll)) (drop 2 coll))))","user":"5594e0e3e4b0c79f6e1db95b"},{"problem":135,"code":"(fn [l & r] (reduce (fn [o [f a]] (f o a)) l (partition 2 r)))","user":"563536f8e4b0bfe05bf117c5"},{"problem":135,"code":"(fn [& args]\n  (loop  [p (first args)\n          r (rest args)]\n    (if (empty? r)\n      p\n      (recur ( (first r) p (second r)) (rest (rest r)))\n      )))","user":"55a21f1ce4b0acc240e3151f"},{"code":"(fn infix* [& l]\n  (let [opera (fn [l]( (nth l 1) \n           (nth l 0) (nth l 2)))]\n  (if (=  (count l) 3)\n      (opera l)\n      (apply infix* (cons (opera (take 3 l))\n             (drop 3 l))))))","problem":135,"user":"4f04a06d535dcb61093f6bd9"},{"problem":135,"code":"(fn [n1 sign n2 & args]\n  (loop [i (count args) res (sign n1 n2) l args ]\n    (cond\n      (< i 1) res\n      :else\n      (recur (- i 2) ( (first l) res (first (rest l)) ) (drop 2 l))\n    )\n  )\n)","user":"5e94ff5fe4b0fbed045a37ff"},{"problem":135,"code":"(fn [& coll] (reduce #((first %2) %1 (last %2)) (first coll) (partition 2 (rest coll))))","user":"5797d4bae4b039eba2ecb107"},{"code":"#(reduce (fn [acc [op x]] (op acc x)) % (partition 2 %&))","problem":135,"user":"50479524e4b0371827a27bc4"},{"code":"#(loop [res (first %&) expr (next %&)]\n  (if expr\n    (recur ((first expr) res (second expr)) (nthnext expr 2))\n    res))","problem":135,"user":"4ec5a5f9535d6d7199dd36ad"},{"problem":135,"code":"(fn [h & t]\n  (first (reduce\n           (fn [[acc b] e]\n             (if b [(partial e acc) false]\n                   [(acc e) true]))\n           [h true] t)))","user":"6026737ee4b0d5df2af2222f"},{"problem":135,"code":"(fn my-calc2\n  ([a] a)\n  ([a op b & others ] (apply my-calc2 (cons (op a b) others))))","user":"5ce3bcd6e4b0a17bb84e2b43"},{"problem":135,"code":"(fn infix [& args]\n  (reduce (fn[a [op b]] (op a b))\n          (first args)\n          (partition 2 (rest args))))","user":"53bf9cfbe4b0c98a41f5cca4"},{"code":"(fn [f & r] (\n               reduce (fn [r1 [op r2]]\n                          (cond\n                          (= op +) (+ r1 r2)\n                          (= op -) (- r1 r2)\n                          (= op *) (* r1 r2)\n                          (= op /) (/ r1 r2))  \n                        )\n               f\n               (partition 2 r)\n               )\n   )","problem":135,"user":"50d8739ae4b01f0871336e68"},{"problem":135,"code":"(fn [a & z] (reduce (fn [x [f y]] (f x y)) a (partition 2 z)))","user":"559b2ad1e4b066d22e731f4e"},{"problem":135,"code":"(fn [& args]\n    (loop [val 0 [fun arg & restvals] (cons + args)]\n      (let [currval (fun val arg)]\n        (if (empty? restvals)\n          currval\n          (recur currval restvals)))))","user":"53a83c74e4b047364c044426"},{"problem":135,"code":"(fn infix [x & more] (reduce #((first %2) %1 (last %2)) x (partition 2 more)))","user":"56912f93e4b0dcc4269f40ef"},{"problem":135,"code":"(fn [f & args] \n   (reduce (fn [a [op v]] (op a v)) \n           f \n           (partition 2 args)))","user":"58b86162e4b0ebc645576d97"},{"problem":135,"code":"(fn __\n  ([acc] acc)\n  ([acc op x & xs]\n   (apply __ (cons (op acc x) xs))))","user":"55916764e4b0604b3f94d57b"},{"problem":135,"code":"(fn [& rest]\n    (->> (partition-all 2 (next rest))\n         (reduce (fn [res [f n]]\n                   (f res n))\n                 (first rest))))","user":"5ff64845e4b06df49cee1495"},{"code":"(fn [& expr]\n  (reduce\n   (fn [accu term] ((first term) accu (second term)))\n   (first expr)\n   (partition 2 (rest expr))))","problem":135,"user":"4e82c062535db62dc21a62cc"},{"code":"(fn polishcalculator [& x]\n              (if (empty? x)\n                '()\n                (if (empty? (rest x))\n                  (first x)\n                  ((peek (pop (vec x))) (apply polishcalculator (pop (pop (vec x)))) (peek (vec x))))))","problem":135,"user":"532727bae4b09d4e7a9b54fa"},{"problem":135,"code":"(fn [& col] (reduce (fn[a [op b]](op a b))\n        (first col)\n        (partition 2 (rest col))))","user":"574ef311e4b02ea11479924d"},{"problem":135,"code":"(fn [& tokens]\n  (loop [sq (seq tokens)]\n    (if (= 1 (count sq))\n      (first sq)\n      (let [[l op r] sq\n            new      (op l r)]\n        (recur (conj (drop 3 sq) new))))))","user":"5e0ceca5e4b099d064962f91"},{"code":"(fn [& exprs]\n  (let [[op1 f op2 & more] exprs]\n    (if (and f op2)\n      (recur (cons (f op1 op2) more))\n      op1\n      )\n    ))","problem":135,"user":"4dca8b6d535d5973398f9288"},{"code":"(fn infix\n  ([x op y] (op x y))\n  ([x op y & more]\n   \t(apply infix (op x y) more)))","problem":135,"user":"521249f5e4b06aa6d1666ba2"},{"code":"(fn [& x]\n  (let [digest (fn [[a o1 b :as all]]\n                 (cond (= o1 nil) a\n                       true (recur (cons (o1 a b) (drop 3 all)))))]\n    (digest x)))","problem":135,"user":"51df825de4b01188f062752b"},{"code":"(fn [h & r] \n  (reduce (partial apply (fn [a f b] (f a b))) h (partition 2 r)))","problem":135,"user":"4ec53831535d6d7199dd3684"},{"problem":135,"code":"(fn [& args]\n  (let [coll (vec args)]\n    (reduce (fn [state [verb noun]]\n              (apply verb [state noun]))\n            (first coll)\n    \t\t(partition 2 (rest coll)))))","user":"5297dcc5e4b02ebb4ef75047"},{"problem":135,"code":"(fn [& [n func k & remaining]]\n  (if (and func n k)\n    (recur (cons (func n k) remaining))\n    n))","user":"5383668ee4b06839e8705edd"},{"problem":135,"code":"(fn infix-calculator [& seqz]\n  (if (= (count seqz) 1) (first seqz)\n      (let [[ x f y & more ] seqz]\n           (recur (cons (f x y) more)))))","user":"5414b7c4e4b01498b1a719ed"},{"problem":135,"code":"(fn inf [x & xs]\n  (let [ser (partition 2 xs)]\n    (reduce (fn [acc [op y]] (op acc y)) x ser)))","user":"5573ffb5e4b0aa18f790f3fd"},{"problem":135,"code":"(fn c\n  ([a f b & args] (apply c (cons (f a b) args)))\n  ([v] v))","user":"55ed9108e4b0121d4835fddc"},{"problem":135,"code":"(fn [expr & more]\n  (loop [e expr\n         ops (partition 2 more)]\n    (if (empty? ops)\n      e\n      (recur ((ffirst ops) e (first (nfirst ops)))\n             (next ops)))))","user":"54f26266e4b024c67c0cf8c5"},{"problem":135,"code":"(fn infix ([x op y]\n      (op x y))\n  ([x op y & xs]\n     (apply infix (cons (infix x op y) xs))))","user":"577b9cfde4b0d3393e5deb16"},{"problem":135,"code":"(fn [& args] (reduce (fn [s e] \n                       (if (fn? s) \n                         (s e) \n                         (partial e s)))\n                     identity \n                     args\n                       )\n                     )","user":"553f70cae4b0a04f792994f8"},{"problem":135,"code":"(fn [ & args]\n  (first (reduce (fn [tot curr]\n    (if (= 2 (count tot))\n      (list ((first tot) (second tot) curr))\n      (conj tot curr))) '() args)))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":135,"code":"(fn p\n  [& params]\n  (loop [lst (first params)\n         restlst (rest params)]\n    (if (empty? restlst)\n      lst\n      (recur ((first restlst) lst (second restlst)) (rest (rest restlst))))))","user":"56df7440e4b0ca2494a095fb"},{"code":"#(reduce (fn [r [o v]] (o r v)) % (partition 2 %&))","problem":135,"user":"50ad7888e4b0a40c9cfb08c7"},{"problem":135,"code":"(fn [start & rest]\n                  (let [split (partition-all 2 rest)]\n                    (reduce (fn [v [op v2]] (op v v2)) start split)))","user":"5cdc08a2e4b05ee0cb31173a"},{"problem":135,"code":"(fn [x & coll]\n  (loop [arg1 0 op + arg2 x other coll]\n    (if (nil? arg2)\n      arg1\n      (recur (op arg1 arg2) (first other) (second other) (drop 2 other)))))","user":"53968a70e4b0b51d73faaee0"},{"problem":135,"code":"(fn infix\n  ([x] x)\n  ([x y z & xs] (apply infix (cons (y x z) xs)))\n)","user":"5943abb6e4b060784b3b792b"},{"problem":135,"code":"(fn ev\n  ([a o1 b]\n   (o1 a b))\n  ([a o1 b & c]\n   (apply ev (cons (o1 a b) c)) )\n)","user":"583048d9e4b051871117c007"},{"code":"(fn f ([x] x) ([x y z & m] (apply f (y x z) m)))","problem":135,"user":"4dc78527535d8a4b2fd7428f"},{"problem":135,"code":"(fn infix ([x] x) ([x y z] (y x z)) ([x y z & others] (apply infix (cons (y x z) others))))","user":"558466fce4b04192f3441eee"},{"code":"(fn f\n  ([x] x)\n  ([x o y & z] (apply f (o x y) z)))","problem":135,"user":"51256b40e4b05d10e3e395f8"},{"problem":135,"code":"(fn [x & y] (reduce #((first %2) %1 (last %2)) x (partition 2 y)))","user":"5c1aadcde4b01240ff567209"},{"code":"(fn [x & more]\n  (reduce (fn [n [op y]] (op n y))\n          x\n          (partition 2 more)))","problem":135,"user":"4fb01e53e4b081705acca260"},{"problem":135,"code":"(fn calc [& lyst]\n  (let [f (fn f [acc [op op1 & ops :as all-ops]]\n            (if (empty? all-ops)\n              acc\n             (f (op acc op1) ops) ))]\n    (f (first lyst) (rest lyst))))","user":"53e27bf1e4b036ad0777e3f2"},{"problem":135,"code":"(fn infix [& exprs]\n  (if (= 1 (count exprs))\n    (first exprs)\n    (let [args (take-last 2 exprs)]\n      ((first args) (apply infix (drop-last 2 exprs)) (last args)))))","user":"59f4c42ce4b0966464fe6ab6"},{"code":"(fn m [& coll]\n  ((fn infix [n r]\n     (if (empty? r)\n       n\n       (let [op (first r) m (second r)]\n         (recur (op n m) (drop 2 r)))))\n    (first coll)\n    (rest coll)))","problem":135,"user":"52828298e4b0757a1b17145b"},{"code":"(fn cal [ x y z & w]\n  (if (seq w)\n      (apply cal (cons (y x z) w))\n      (y x z)))","problem":135,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"(fn [& d]\n  (loop [v (first d)\n          r (rest d)]\n    (if (empty? r)\n      v\n      (recur ((first r) v (second r)) (rest (rest r))))))","problem":135,"user":"4ddbfb8a535d02782fcbea00"},{"problem":135,"code":"(fn [& args]\n  (loop [e args]\n    (if (= (count e) 1)\n      (first e)\n      (let [[a op b & l] e]\n        (recur (conj l (op a b)))\n      )\n    )\n  )\n)","user":"57873017e4b0ebec4cfb7503"},{"problem":135,"code":"(fn [& xs]\n  (reduce (fn [v x]\n            (if (number? x)\n              (v x)\n              (partial x v)))\n          (partial + 0)\n          xs))","user":"5188c249e4b0bdff0e072d54"},{"code":"(fn calc [& a]\n  (let [l (first a)\n        o (second a)\n        r (nth a 2)\n        a (drop 3 a)\n        z (o l r)]\n  (if (seq a)\n    (apply calc (conj a z))\n    z)))","problem":135,"user":"4dbdc9da535d020aff1edf4c"},{"problem":135,"code":"(fn func [& [a op b & r]]\n  (if (nil? op)\n    a\n    (apply func (cons (op a b) r))))","user":"5e805895e4b085ba37836e44"},{"code":"(fn [& expr]\n  \"Evaluate infix calculations. It evaluates from left to right (no prioritized operations) (= 1 (infix 1 + 2 / 3) ) \"\n  (reduce (fn [a b]\n            (if (number? b)\n              (a b)\n              (partial b a)))\n          identity\n          expr))","problem":135,"user":"5054e37fe4b0b1b9d1860eb6"},{"code":"(fn [& args]\n  (reduce #(if (fn? %1) \n      \t\t(%1 %2) \n      \t\t(partial %2 %1))\n   args))","problem":135,"user":"512eb1e7e4b0b740abc5982a"},{"problem":135,"code":"(fn [& args]\n  (loop\n    [args_ (rest args)\n     total (first args)]\n     (if (empty? args_)\n      total\n      (let\n       [[operator, elem] (take 2 args_)\n        rest_ (drop 2 args_)]\n        (recur rest_ (operator total elem))))))","user":"549e5e52e4b0f3d1d8e70f9e"},{"problem":135,"code":"(fn [n & r] (reduce #((first %2) %1 (last %2)) n (partition 2 r)))","user":"565b2fa5e4b068f2fe63dbfe"},{"code":"(fn math [& c] \n  (if (= (count c) 3)\n    ((nth c 1) (nth c 0) (nth c 2))\n    (apply math (cons ((nth c 1) (nth c 0) (nth c 2)) (drop 3 c)))))","problem":135,"user":"4db2f208535df7e46ed9b6c9"},{"problem":135,"code":"(fn infix-calculator [& args]\n  (let [[first-operand operator second-operand] (take 3 args)\n        result (operator first-operand second-operand)]\n    \t(if (= (count args) 3) \n          result\n          (apply infix-calculator (cons result (drop 3 args))))\n    ))","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"problem":135,"code":"(fn [x op1 y & r]\n  (loop [a x op op1 b y remaind r]\n    (if (empty? remaind)\n      (op a b)\n      (recur (op a b) (first remaind) (second remaind) (drop 2 remaind)))))","user":"57995ac1e4b05b1deef9adbf"},{"code":"(fn [& [a o b & r]]\n  (if r\n    (recur (cons (o a b) r))\n    (o a b)))","problem":135,"user":"4dada913c9a9d6ed2d99dc57"},{"problem":135,"code":"(fn calc\n  ([x] x)\n  ([x op y & expr]\n   (if (empty? expr)\n     (op x y)\n     (apply calc (op x y)\n            (first expr)\n            (second expr)\n            (drop 2 expr)))))","user":"55f9acade4b03cbcff9738c7"},{"code":"(fn infix [m & rest]\n (reduce #((first %2) % (second %2)) m (partition 2 rest)))","problem":135,"user":"4db6ce85535d1e037afb217f"},{"code":"(fn [& args] \n      (:value \n        (reduce \n          #(if (integer? %2) \n             (assoc %1 :value (if (nil? (:op %1)) %2 ((:op %1) (:value %1) %2))) \n             (assoc %1 :op %2)) \n          {:value 0 :op nil} \n          args)))","problem":135,"user":"52c00e4fe4b07a9af5792342"},{"problem":135,"code":"(fn [& a] (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity a))","user":"6074e088e4b069485764de4d"},{"code":"(fn suckitjoe\n    ([a b c]\n       (b a c))\n    ([a b c & xs]\n       (if (= 2 (count xs))\n         (apply suckitjoe (b a c) xs)\n         (recur (b a c) (first xs) (second xs) (rest (rest xs))))))","problem":135,"user":"50057f23e4b0678c553fc466"},{"code":"(fn c [& i]\n  (let [n (partition 2 2 '() (conj i +))]\n  (reduce #((first %2) % (last %2)) 0 n)))","problem":135,"user":"4e5d1912535d8a8b8723a2c9"},{"problem":135,"code":"(fn calc\n  ([x] x) \n  ([x op y & more] (apply calc (cons (op x y) more) )) \n)","user":"56979bb7e4b0e0b3d3318cac"},{"code":"(fn a [& x] (reduce #((first %2) % (second %2)) (conj (partition 2 (rest x)) (first x))))","problem":135,"user":"51d5f2bee4b01da06753aa97"},{"code":"(fn [& l]\n  (loop [n 0 f + l l]\n    (cond\n     (empty? l) n\n     (fn? (first l)) (recur n (first l) (rest l))\n     :else (recur (f n (first l)) nil (rest l)))))","problem":135,"user":"51284226e4b03a34742b4308"},{"problem":135,"code":"(fn calc [x f y & more] (cond \n                          (nil? more)\n                          (f x y)\n                          :else\n                          (apply calc (f x y) more)))","user":"5b4c2212e4b02d533a91bca6"},{"code":"(fn infix [x op y & more]\r\n  (if (empty? more)\r\n      (op x y)\r\n      (apply infix (op x y) more)))","problem":135,"user":"4fabbb97e4b081705acca21d"},{"code":"(fn [x & y]\n  (reduce \n   #((first %2) %1 (last %2)) \n   x \n   (partition 2 y)))","problem":135,"user":"4e781a2e535d324fb2983d74"},{"code":"(fn calc [& args] \n    (loop [coll args]\n      (if (= 1 (count coll))\n        (first coll)\n        (recur (cons ((second coll) (first coll) (nth coll 2)) (drop 3 coll))))))","problem":135,"user":"50112acee4b0d82cfac69f4c"},{"problem":135,"code":"(fn [x & others]\n  (reduce (fn [acc [op y]]\n            (op acc y))\n          x\n          (partition 2 others)))","user":"55c4e48be4b0e31453f649a7"},{"problem":135,"code":"(fn [x & xs]\n     (reduce #((first %2) % (second %2)) x (partition 2 xs)))","user":"5d29c06be4b01671435dbc6b"},{"code":"(fn calc [n1 op n2 & x]\n  (if x\n  (apply calc (op n1 n2) x)\n  (op n1 n2)))","problem":135,"user":"51eab308e4b0f1f103a0d150"},{"problem":135,"code":"(fn foo [x operator y & rest] \n  (if rest\n    (apply foo (operator x y) rest)\n    (operator x y)))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":135,"code":"(fn infix\n  ([a op b]            (op a b))\n  ([a op b & more]     (apply infix (cons (infix a op b) more))))","user":"505d1b01e4b0e6aca564be04"},{"problem":135,"code":"(fn infix \n    ([a op b] (op a b))\n    ([a op b & rest] (apply infix (op a b) rest)))","user":"57f6e666e4b0d3187e9008f2"},{"problem":135,"code":"(fn[f & rest] \n   (reduce (fn [val1 [f val2]] (f val1 val2)) f (partition 2 rest)))","user":"54094824e4b0addc1aec66da"},{"problem":135,"code":"(fn [x & more]\n  (reduce (fn [acc [op y]]\n            (op acc y))\n          x\n          (partition 2 more)))","user":"5791d259e4b0ebec4cfb75c0"},{"code":"(fn [& args]\n     (if (= (count args) 1) (first args)\n         (let [[x op y & col] args]\n           (recur (cons (op x y) col)))))","problem":135,"user":"4fa39b3ee4b081705acca191"},{"problem":135,"code":"(fn calc\n  ([x] x)\n  ([x f y & rest]\n   (apply calc (f x y) rest)))","user":"553698fae4b09218d5f44fc0"},{"problem":135,"code":"(fn\n   [init & fvs]\n   (reduce #((first %2) %1 (second %2))\n           init (partition 2 fvs)))","user":"56a36f76e4b0542e1f8d14ca"},{"code":"(fn foo\n  ([x] x)\n  ([x a] (if (empty? a) x (foo ((first a) x (second a)) (rest (rest a)))))\n  ([x a b & y] (foo (a x b) y)))","problem":135,"user":"4f8b20fce4b02e764a0a5178"},{"code":"(fn solveInfix\n  ([x op y] (op x y))\n  ([x op y & r] (apply solveInfix\n                 (cons (op x y)\n                 r)))\n  )","problem":135,"user":"52d5bee0e4b09f7907dd1344"},{"code":"(fn my-infix [a f b & more]\n  (loop [tot a x f y b m more]\n    (if (= (rest m) '())\n      (x tot y)\n      (recur (x tot y) (first m) (second m) (rest (rest m))))))","problem":135,"user":"4f04d312535dcb61093f6be7"},{"problem":135,"code":"(fn f [a o b & c]\n                     (if c\n                       (apply f (o a b) c)\n                       (o a b)))","user":"5d9c9446e4b0eb781811cdae"},{"problem":135,"code":"(fn infix-calc\n  ([sum] sum)\n  ([x f y & t] (apply infix-calc (cons (f x y) t))))","user":"576a972ce4b0a07e8fc1811a"},{"problem":135,"code":"(fn [& infix-sequence]\n  \n  (loop [r (first infix-sequence)\n         c (rest infix-sequence)]\n\n    (if (empty? c)\n      r\n      (recur ((first c) r (second c)) (drop 2 c)))))","user":"562268dce4b03f08ee9a9224"},{"problem":135,"code":"(fn [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) exp))","user":"5cee521ce4b0aaa82f1129dd"},{"problem":135,"code":"(fn [& lst] (let [fst (first lst)\n                 lst (partition 2 (rest lst))]\n             (reduce (fn [acc [f oprnd]] (f acc oprnd)) fst lst)))","user":"6011b89ee4b074f607df66bc"},{"problem":135,"code":"(fn infix ([x op y] (op x y))([x op y & rest] (apply infix (cons (infix x op y) rest))))","user":"5b0546eae4b0cc2b61a3bd7e"},{"code":"#(loop [a % t %&]\n  (if (seq t)\n   (recur ((first t) a (second t)) (drop 2 t))\n    a))","problem":135,"user":"5088082ae4b0198722bd9854"},{"problem":135,"code":"(fn [& ops]\n  (let[infix \n       #(let [n (second %2)]\n          (condp = (first %2)\n            + (+ %1 n)\n            - (- %1 n)\n            / (/ %1 n)\n            * (* %1 n)))]\n    (reduce infix (first ops) (partition 2 2 (rest ops)))))","user":"5d13af73e4b0902706380dbe"},{"problem":135,"code":"(fn ff ([x] x)\n  ([x f y & more] (apply ff (cons (f x y) more))))","user":"54908cc1e4b0b312c081ff32"},{"code":"(fn [h & t]\n     (reduce (fn [a [op n]] (op a n)) h (partition 2 2 t))\n     )","problem":135,"user":"503ca47fe4b06c4e0e1fa24f"},{"code":"(fn [& s] (reduce #(let [[op a] %2] (op %1 a)) (first s) (partition 2 (next s))))","problem":135,"user":"4eb5750a535d7eef30807366"},{"code":"(fn [& args]\n((fn [result r]\n  (if (seq r)\n    (recur \n      ((first r) result (second r))\n      (nthnext r 2))\n    result))\n(first args) (next args)))","problem":135,"user":"4ec12577535dfed6da9c6da8"},{"code":"(fn ifx [& args]\n  (reduce \n    (fn [a b] \n      (if (fn? b)\n        (partial b a) \n        (a b))) \n    (first args) \n    (rest args)))","problem":135,"user":"4dd61f98535d2dad7130b5c6"},{"problem":135,"code":"(fn [x & other]\n   (reduce (fn [acc [op y]] (op acc y))\n           x\n           (partition 2 other)))","user":"5515b138e4b055c2f668d4ed"},{"code":"(fn infix [x op y & more]\n  (if (empty? more) (op x y)\n      (apply infix (op x y) more)))","problem":135,"user":"50996a38e4b0cae2931060b3"},{"problem":135,"code":"(fn loo [ & rep]\n\t(cond\n\t\t(= 3 (count rep)) ((second rep) (first rep) (last rep))\n\t\t:else (recur \n\t\t\t\t\t  (concat \n\t\t\t\t\t  \t(vector ((second rep) ( first rep) (first (drop 2 rep)))) \n\t\t\t\t\t\t  (drop 3 rep))\n\t\t\t\t\t  )))","user":"51e8ee6be4b07cae92c04bfd"},{"code":"(fn calc ([num1 op num2] (op num1 num2))\n         ([num1 op num2 & args] (apply calc (concat [(op num1 num2)] args))))","problem":135,"user":"5300f68de4b0d8b024fd3714"},{"code":"(fn[x y z & more] (if (= (count more) 0) (y x z) (recur (y x z)  (first more) (second more) (rest (rest more)))))","problem":135,"user":"4fc18846e4b081705acca331"},{"problem":135,"code":"(fn [& s] (reduce (fn [a b] (if (fn? b) (partial b a) (a b))) s))","user":"5ab564f8e4b073f177442639"},{"problem":135,"code":"(fn [e & X]\n  (reduce (fn [a [f n]] (f a n)) e (partition 2 X)))","user":"559c13c5e4b066d22e731f61"},{"problem":135,"code":"(fn test47 [& args]\n  (do (println (first args))\n      (if (= 1 (count (flatten args)))\n      (first (flatten args))\n      (test47 (cons  (#((second %) (first %) (nth % 2)) (flatten args)) (drop 3 (flatten args)))))))","user":"5804d5afe4b0a837a8b30cad"},{"problem":135,"code":"(fn infix [l op r & more]\n    [l op r more]\n    (let [n (op l r)]\n      (if more\n        (apply infix n more)\n        n)))","user":"500d3160e4b05f7c30cfa6a1"},{"code":"(fn [i & xs]\n  (reduce\n   (fn [a [op b]]\n     (op a b))\n   i (partition 2 xs)))","problem":135,"user":"50a2f901e4b029e8bace362a"},{"code":"(fn [left-operand & args]\n  (if (seq args)\n    (recur ((first args) left-operand (second args)) (drop 2 args))\n    left-operand))","problem":135,"user":"505fd903e4b08f2a82ad10b7"},{"code":"(fn my-eval\n  ([a] a)\n  ([a op b & exp] (apply my-eval (cons (op a b) exp))))","problem":135,"user":"516282c3e4b0e6d3c4734711"},{"code":"(fn [a & b] (reduce (fn [x [f y]] (f x y))  a (partition 2 b)))","problem":135,"user":"4f280840e4b0d6649770a010"},{"problem":135,"code":"(fn f ([x] x)\n  ([x y z & rest]\n   (apply f (y x z) rest)))","user":"589f37e0e4b02bd94d917e79"},{"problem":135,"code":"(fn [& init-s]\n  (loop [ r (first init-s)\n          s (rest init-s)]\n    (if (empty? s)\n      r\n      (recur ((first s) r (second s)) (rest (rest s))))))","user":"57addbcce4b0b8559636fca3"},{"problem":135,"code":"(fn [& lst]\n  (loop [ l (next lst)\n          f (first l)\n          a (first lst)\n          b (second l) ]\n    (if (= (count l) 2)\n      (f a b)\n      (recur (nnext l) (first (nnext l)) (f a b) (second (nnext l))))))","user":"5e6ca949e4b04a83ad7cd289"},{"code":"(fn [& x]\n  (loop\n    [total (first x)\n     r (rest x)]\n    (if (= nil (first r))\n      total\n      (recur\n       ((first r) total (second r))\n       (rest (rest r))))))","problem":135,"user":"530d85dee4b08068f379eca8"},{"problem":135,"code":"(fn  [& s]\n  (first (last (take-while (comp not nil?)\n                           (iterate \n                            (fn [[first second third & args]]\n                              (if (not (nil?  second))\n                                (cons (second first third) args))) s)))))","user":"5b2689e3e4b063e2438bcc33"},{"code":"(fn f\n  ([lv]\n    lv\n  )\n  ([lv op rv & more]\n  \n    (let [\n        acc (op lv rv)\n        ]\n       (apply f acc more)\n         \n    ) \n  ) \n)","problem":135,"user":"4fb03cf4e4b081705acca262"},{"problem":135,"code":"(fn inline\n  [x & args]\n  (loop [coll args\n         res x]\n    (if (seq coll)\n      (let [f (first coll)\n            y (second coll)]\n        (recur (rest (rest coll)) (f res y)))\n      res)))","user":"5f6e23e6e4b02876ed9fd064"},{"code":"(fn [& a]\n  (reduce (fn [v [f n]] (f v n)) (first a) (partition 2 (rest a))))","problem":135,"user":"4fbf2818e4b081705acca317"},{"code":"(fn [& expr]\n  (loop [res (first expr)\n         expr (next expr)]\n    (if (seq expr)\n      (let [[op arg & expr] expr]\n        (recur (op res arg) expr))\n      res)))","problem":135,"user":"511442d0e4b0e9c109bb74d5"},{"problem":135,"code":"(fn [& args]\n    (loop [so-far (first args)\n           incoming (rest args)]\n      (let [[op num] incoming\n            todo (drop 2 incoming)\n            so-far' (op so-far num)]\n        (if (seq todo)\n          (recur so-far' todo)\n          so-far'))))","user":"53716539e4b0fc7073fd6eb1"},{"problem":135,"code":"(fn [& args] (reduce (fn [memo [op arg]] (op memo arg)) (first args) (partition 2 (rest args))))","user":"51f38193e4b0fca5e8b48226"},{"problem":135,"code":"(fn calc [& args]\n  (if (= 1 (count args))\n    (first args)\n    (apply calc (cons ((second args) (first args) (nth args 2)) (drop 3 args)))))","user":"54125eeee4b01498b1a719d3"},{"code":"(fn infix-calculator [& ex]\n  (first (reduce\n          \n          (fn [[a,f] x] \n            (if-not (number? x)\n              [a,x]\n              [(f a x),nil])) \n          \n          [(first ex),nil]\n          (rest ex))))","problem":135,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":135,"code":"(fn [& symbols]\n  (nth (reduce\n    (fn [acc token]\n      (let [[value state operation] acc]\n        (cond\n          (= :initial state) [token :operation nil]\n          (= :operation state) [value :operand token]\n          :else [(operation value token) :operation nil])))\n    [0 :initial nil]\n    symbols) 0))","user":"5773f3a9e4b0979f896515f2"},{"problem":135,"code":"(fn calc\n  ([x f y] (f x y))\n  ([x f y & r] (apply calc (f x y) r)))","user":"53623eaee4b0243289761e4f"},{"problem":135,"code":"(fn [a0 & resto]\n\t(reduce\n\t\t(fn [a [op b]] (op a b))\n      \ta0\n\t\t(partition 2 resto)))\n;(fn [a op b & resto0]\n;\t(loop [resultado (op a b)\n;\t\t\t\t resto resto0]\n;\t\t(if (empty? resto)\n;\t\t\tresultado\n;\t\t\t(recur ((first resto) resultado (second resto)) (drop 2 resto)))))","user":"57c1b32be4b05aa3c4741ca4"},{"problem":135,"code":"(fn [a & maths]\n  (let [pairs (partition 2 maths)]\n    (reduce #((first %2) %1 (second %2)) a pairs)))","user":"6088395de4b0ae75613dcee2"},{"problem":135,"code":"(fn [start & args]\n  (let [s (partition 2 args)]\n   (reduce (fn [acc new] ((first new) acc (second new))) start s)))","user":"5a99b83fe4b0d174b936c7aa"},{"code":"(fn [n & r]\n  (loop [a n c r]\n    (if (empty? c)\n      a\n      (recur ((nth c 0) a (nth c 1)) (drop 2 c)))))","problem":135,"user":"52160dbee4b0bf4bffd29cb3"},{"code":"(fn [& args]\n  (loop [a (vec args)]\n    (if (= 1 (count a))\n      (first a)\n      (recur (cons ((nth a 1) (first a) (nth a 2)) (drop 3 a))))))","problem":135,"user":"50843a4ae4b0c98812d0788b"},{"code":"(fn[e & rs]((fn f[lst](let[x (first lst), \n               op (second lst), \n               y (first (nnext lst))]\n           (if(nil? op) x (f (cons (op x y) (drop 3 lst)))\n           )\n          )\n         ) (cons e rs))\n)","problem":135,"user":"4ec75829535d6d7199dd36e1"},{"code":"(fn [x & ops]\n  (reduce (fn [x [op operand]] (op x operand))\n          x\n          (partition 2 ops)))","problem":135,"user":"5106bc8ae4b01150e115ebec"},{"problem":135,"code":"(fn [& p]\n      (loop [x p r [] op nil]\n        (println \"x =\" x)\n        (println \"r =\" r )\n        (println \"op =\" op \"\\n\")\n        (let [fx (first x)]\n        (println \"next: \" fx)\n        (if (empty? x)\n          (first r)\n          (cond\n            (number? fx)\n              (if (nil? op)\n                (recur (rest x) (conj r fx) nil)\n                (recur (rest x) [(apply op (conj r fx))] nil)\n                )\n            :else\n              (recur (rest x) r (first x))\n          )\n        ))))","user":"5763818ae4b0994c1922fbc7"},{"code":"(fn [x & ops]\n  (loop [acc x\n         o ops]\n    (if (not (seq o))\n      acc\n      (let [[op y] o]\n      \t(recur (op acc y) (nnext o))))))","problem":135,"user":"4ee8b9c9535d93acb0a66884"},{"problem":135,"code":"(fn   [& args]\n  (letfn [(iter \n            ([a] a)\n            ([a op & r]\n             (op (apply iter r) a)))]\n    (apply iter (reverse args))))","user":"5eee7311e4b07c55ae4a0510"},{"code":"(fn [x & xs] (reduce #((first %2) % (last %2)) x (partition 2 xs)))","problem":135,"user":"50166470e4b052339a490e76"},{"problem":135,"code":"(fn [initial & more]\n  (reduce\n     (fn [ans pair] ((first pair) ans (last pair)))\n     initial\n     (partition 2 more)\n  )\n)","user":"5aa998c6e4b0d174b936c8e5"},{"problem":135,"code":"(fn [& args]\n\t(loop [terms (rest args) numLeft (first args)]\n      (if (empty? terms) numLeft\n        (let [[operator numRight & termsRest] terms]\n          (recur termsRest\n              (operator numLeft numRight)\n          )\n        )\n      )\n    )\n)","user":"5aac468ae4b073f17744256b"},{"problem":135,"code":"(fn i-calculator\n  [& args]\n  ((fn [[a f b & more]]\n    (if-not f\n      a\n      (let [t (f a b)]\n        (recur (cons t more)))))\n  args))","user":"5a6af090e4b0512ff01cda2d"},{"code":"(fn inf [a & rest]\n  (let [g (partition 2 rest)]\n    (reduce (fn [acc [op x]] (op acc x))\n            a\n            g)))","problem":135,"user":"4e7f32ee535db966e863cc3a"},{"problem":135,"code":"(fn [x & coll]\n   (let [par (partition 2 coll)]\n     (reduce (fn [m [op v]]\n               (op m v)) x par)))","user":"56fbf83de4b07572ad1a88da"},{"code":"(fn infix [acc & expr]\n  (reduce\n    (fn [acc [f n]] (f acc n))\n    acc\n    (partition 2 expr)))","problem":135,"user":"4de165f3535d08e6dec9fde6"},{"code":"(fn infix [& args]\n  (loop\n      [acc (first args)\n       lst (rest args)]\n    (let\n        [res (apply\n               (first lst)\n               [acc (second lst)])\n         restlst (drop 2 lst)\n         ]\n      (cond\n        (> (count restlst) 1)\n        (recur res restlst)\n        :else res\n        ))))","problem":135,"user":"530cb5b8e4b02e82168697e0"},{"problem":135,"code":"(fn [x & y]\n (reduce #((first %2) %1 (last %2)) x (partition 2 y)))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn [& exp]\n  (reduce #(if (fn? %1)\n             (%1 %2)\n             (partial %2 %1))\n          identity exp))","problem":135,"user":"50052fd0e4b0678c553fc45d"},{"problem":135,"code":"(fn infix [& args] (reduce (fn [a [op b]] (op a b))\n          (first args)\n          (partition 2 (rest args))))","user":"553fa883e4b0a04f792994f9"},{"code":"(fn [n & ops]\n          (loop [n n\n                 [op b & rem] ops]\n            (if (nil? op) n\n                (recur (apply op [n b]) rem))))","problem":135,"user":"4e5f034b535d8a8b8723a2d9"},{"problem":135,"code":"(fn [& args]\n  (loop [input args, ans []]\n    (if (empty? input)\n      (apply int ans)\n      (if (empty? ans) ;if empty, put first num in vector,\n        (recur (rest input) (conj ans (first input))) ;otherwise apply operator to first in vector plus next input num\n        (recur (rest (rest input)) (vector ((first input) (first ans) (second input))))))))","user":"59369515e4b02506e01a297e"},{"code":"(fn calc [& args]\n  (reduce (fn [prev [f arg]]\n            (f prev arg))\n          (first args)\n          (partition 2 (next args))))","problem":135,"user":"5080a697e4b01a93d3f38e49"},{"code":"(fn t\n    ([x o y] (o x y))\n    ([x o y & m] (apply t (cons (o x y) m))))","problem":135,"user":"4e4870d1535dc968683fc4bc"},{"code":"(fn [& xs]\n  (loop [stack (first xs)\n         src   (rest xs)]\n    (if (empty? src)\n      stack\n      (recur ((first src) stack (second src)) (drop 2 src)))))","problem":135,"user":"525ab6cfe4b0cb4875a45cf9"},{"problem":135,"code":"(fn infix-calc [first-value & args]\n\t((fn do-calc [ret args]\n\t\t(if (empty? args)\n\t\t\tret\n\t\t\t(do-calc \n\t\t\t\t((first args) ret (first (rest args)))\n\t\t\t\t(drop 2 args)))) first-value args))","user":"53a94b63e4b047364c044434"},{"problem":135,"code":"(fn [& args]\n  (loop [[n f m & tail] args]\n    (if tail\n      (recur (cons (f n m) tail))\n      (f n m))))","user":"5e3d183fe4b01d43a70e8e11"},{"problem":135,"code":"(fn infix\n  [& input]\n  (reduce\n   (fn [result [operator operand]]\n     (operator result operand))\n   (first input)\n   (partition 2 (rest input))))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"code":"(fn [& a] (let [[n & a] a] (loop [a a n n] (if (empty? a) n (let [[o x & a] a] (recur a (o n x)))))))","problem":135,"user":"4f0cc259535d0136e6c22310"},{"problem":135,"code":"(fn [& args]\n  (letfn [(co [n szn]\n    \t(if (empty? szn) n\n               (co (apply (nth szn 0) (list n (nth szn 1)))\n                   (drop 2 szn))))]\n    (co (first args) (rest args))))","user":"60264d89e4b0d5df2af2222d"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [a [op b]] (op a b))\n          (first args) (partition 2 (rest args))))","user":"54bad977e4b0ed20f4ff6eb9"},{"problem":135,"code":"(fn [& args]\n  (loop [x (first args), xs (rest args)]\n    (if (empty? xs)\n      x\n      (let [op (first xs), num (second xs), os (drop 2 xs)]\n        (recur (op x num) os)))))","user":"56669819e4b0e91d5f5c5674"},{"problem":135,"code":"(fn [n & expr]\n  (loop [op nil [f & r] expr total n]\n    (if (= nil f)\n      total\n      (recur (if (= java.lang.Long (class f)) nil f) r (if (= java.lang.Long (class f)) (op total f) total)))))","user":"5e7f62cce4b085ba37836e3b"},{"problem":135,"code":"(fn [a & s] (reduce #((first %2) % (second %2)) a (partition 2 s)))","user":"558f4fbae4b0277789237661"},{"problem":135,"code":"(fn\n  [x op y & args]\n    (loop [v (op x y)\n            args args]\n      (let [[op z & args] args]\n        (if (nil? op)\n          v\n          (recur (op v z) args)))))","user":"5ea35bb1e4b00a66d4a9519b"},{"code":"(fn [x & xs] (reduce (fn [a [f o]] (f a o)) x (partition 2 xs)))","problem":135,"user":"50cf21dee4b0e61f11ddcd8b"},{"code":"(fn [& A] (reduce (fn [R O]\n\t\t((first O) R (second O)))\n\t      (first A) (partition 2 (rest A))))","problem":135,"user":"536c77f1e4b0fc7073fd6e3f"},{"problem":135,"code":"(fn inf[a b c & xs]\n  (reduce (fn[accum [f n]]  (f accum n)) (b a c) (partition 2 xs)))","user":"539f9f79e4b0ca733b97449e"},{"code":"(fn infix [a op b & rest]\n  (let [r (op a b)]\n    (if (nil? rest) r\n      (apply infix (conj rest r)))))","problem":135,"user":"531619c1e4b08068f379ed3d"},{"code":"(fn [ f & ops ]\n  (reduce (fn [r [o v]] (o r v)) f (partition 2 ops)))","problem":135,"user":"4e6dc95a535d5021c1a895f1"},{"problem":135,"code":"(fn [x & r]\n  (reduce (fn [a [f b]] (f a b)) x (partition 2 r)))","user":"4de77a0a535d08e6dec9fdfa"},{"problem":135,"code":"(fn [f & r] (reduce (fn [v [o d]] (o v d)) f (partition 2 r)))","user":"4dc986d0535d5973398f9285"},{"code":"(fn  [& args]\n  (loop [rm (seq args), acc 0, index 0, f nil]\n    (cond (empty? rm) acc\n          (= 0 index) (recur (rest rm) (first rm) (inc index) nil)\n          (= 0 (mod index 2)) (recur (rest rm) (f acc (first rm)) (inc index) nil)\n          :else (recur (rest rm) acc (inc index) (first rm)))))","problem":135,"user":"538e36c7e4b0b51d73faae81"},{"problem":135,"code":"(fn [res & more]\n  (reduce (fn [res [op arg]] (op res arg))\n          res\n          (partition 2 more)))","user":"563f24f9e4b08d4f616f5ed0"},{"problem":135,"code":"(fn calc[& args]\n    (if (= (count args) 1) (first args) \n     (let [[x op y & col] args] \n       (recur (cons (op x y ) col  ))\n     )\n    )\n)","user":"537b1083e4b06839e8705e64"},{"code":"(fn infix [left & remaining]\n  (reduce (fn [accum [op right]] (op accum right))\n          left\n          (partition 2 remaining)))","problem":135,"user":"53834ed3e4b06839e8705edb"},{"problem":135,"code":"(fn [& args]\n  (let [op1 ((nth args 1) (nth args 0) (nth args 2)) eq (drop 3 args)]\n    (loop [ans op1 arr eq]\n      (cond (empty? arr) ans\n            :else (recur ((first arr) ans (second arr)) (drop 2 arr))))))","user":"57acee37e4b0b8559636fc94"},{"problem":135,"code":"(fn [x & xs]\n   (if (empty? xs)\n     x\n     (recur ((first xs) x (second xs)) (drop 2 xs))))","user":"58b80ec1e4b0ebc645576d89"},{"problem":135,"code":";(fn infix [a & more]\n;  (if (empty? more)\n;    a\n;    (let [op (first more)\n;          b (second more)\n;          left (drop 2 more)]\n;      (recur (op a b) left))))\n(fn infix\n  ([a op b] (op a b))\n  ([a op b & more] (apply infix (op a b) more)))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":135,"code":"(fn lambda [a op b & args]\n  (if (empty? args) (op a b) (apply lambda (cons (op a b) args))))","user":"54c5cc17e4b045293a27f624"},{"code":"(fn this [& ps]\n    (cond (= (count ps) 1) (first ps)\n           :else (let [a (first ps) \n                       b (nth ps 2) \n                       op (nth ps 1) \n                       tmp-sum (op a b) \n                       new-list (conj (nthnext ps 3) \n                                       tmp-sum)]   \n                   (println new-list)\n                   (apply this new-list)\n                  )\n    )\n)","problem":135,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":135,"code":"(fn [& a]\n  (if (= (count a) 1)\n    (first a)\n    (let [[x f y] (take 3 a)]\n      (recur (conj (nthrest a 3) (f x y))))))","user":"55495318e4b0a04f79299566"},{"problem":135,"code":"(fn [acc & ops]\n  (if (empty? ops)\n    acc\n      (recur ((first ops) acc (second ops)) (drop 2 ops))))","user":"58800fd4e4b0f1effa3b7606"},{"problem":135,"code":"(fn[& x] (loop[c (drop 1 x) r (nth x 0)]\n            (if (empty? c)\n              r\n              (recur (drop 2 c) ((first c) r (second c)))\n              )\n            )\n   )","user":"5c683fb5e4b0fca0c16226d5"},{"problem":135,"code":"(fn infix-calculator [a op b & more]\n  (if (= 0 (count more))\n    (op a b)\n    (recur (op a b) (first more) (second more) (drop 2 more))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":135,"code":"(fn calculate \n  [& exp]\n  (reduce #(if (fn? %1)\n             (%1 %2)\n             (partial %2 %1))\n          identity exp)\n  )","user":"5f724f55e4b02876ed9fd089"},{"code":"(fn ([x & more]\n    (reduce (fn [acc [op arg]] (op acc arg)) x (partition 2 more))))","problem":135,"user":"4f4ac35ae4b0d56e7bb92c18"},{"code":"(fn f [a o b & c]\n   (if c\n     (apply f (o a b) c)\n     (o a b)))","problem":135,"user":"506cad7de4b0a302964c548e"},{"code":"(fn [& [x & xs]] \n   (first \n     (reduce \n       (fn [[r l] x]      \n         (if l\n           [(l r x) nil]\n           [r x]))\n       [x nil] xs)))","problem":135,"user":"4e513758535dc968683fc4f3"},{"code":"(fn infix\n  ([a] a)\n  ([a b c & rest] (apply infix (b a c) rest)))","problem":135,"user":"4eecc9ad535d93acb0a668b4"},{"problem":135,"code":"(fn f [a op b & args]\n  (if args\n    (apply f (op a b) args)\n    (op a b)))","user":"5f3ddc71e4b004f08c61c551"},{"problem":135,"code":"(fn f\n  ([n] n)\n  ([n1 op n2 & args]\n    (apply f (cons (op n1 n2) args))))","user":"544cf5d7e4b0e39780006977"},{"problem":135,"code":"(fn [a1 & args]\n  (reduce (fn [a [op b]] (op a b)) a1 (partition 2 args)))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"code":"(fn infix [init & rawops] (let [\n    ops (partition 2 rawops)\n    do-op (fn [v op] ((first op) v (second op)))]\n    (reduce do-op init ops)))","problem":135,"user":"51cbdee1e4b08d8387cbede1"},{"problem":135,"code":"(fn a [& args]\n                    (loop [res args]\n                      (if (= 1 (count res))\n                        (first res)\n                        (recur (conj (drop 3 res) ((second res) (first res) (nth res 2)))))))","user":"5cf72682e4b0b71b1d808a68"},{"problem":135,"code":"(fn\n  [& expr]\n  (reduce #((first %2) %1 (second %2)) (first expr) (partition 2 (rest expr))))","user":"54e0e911e4b024c67c0cf7bc"},{"problem":135,"code":"(fn infix\n   ([x op y] (op x y))\n   ([x op y & r] (apply infix (cons (op x y) r))))","user":"576e607ae4b0979f89651579"},{"problem":135,"code":"(fn[& args](\n        \n       loop [x args]\n         (if (= (count x) 1) (first x) \n           (recur  \n\t\t\t\t     (  (fn[s](\n\t\t\t\t          flatten\n\t\t\t\t\t\t        (map-indexed\n\t\t\t\t\t\t\t        (fn[idx itm](\n\t\t\t\t\t\t\t          cond\n\t\t\t\t\t\t\t          (< idx 2) []\n\t\t\t\t\t\t\t          (= idx 2) ((nth s 1) (nth s 0) (nth s 2))\n\t\t\t\t\t\t\t          :else itm\n\t\t\t\t\t\t\t        ))\n\t\t\t\t\t          s)\n\t\t\t\t        ))\n\t\t         x))\n\t\t    )  \n    ))","user":"56039843e4b04bb52996e1be"},{"problem":135,"code":"(fn [f & f1]\n  \n  (reduce\n   \n   (fn[f2 f3]\n     \n      ((first f3) f2 (second f3)))f (partition 2 f1))\n  \n  )","user":"5f727be9e4b02876ed9fd08d"},{"code":"(fn [a & args] (reduce #((first %2) %1 (second %2)) a (partition 2 args)))","problem":135,"user":"4feada56e4b0140c20fb9c11"},{"code":"(fn [& args]\n\n   (loop [acc (first args)\n          op (nth args 1)\n          b (nth args 2)\n          left (drop 3 args)]\n     (if (nil? op)\n       acc\n       (recur (op acc b) (first left) (nth left 1 nil) (drop 2 left))))\n   )","problem":135,"user":"50cae881e4b0f75dcc9a6e51"},{"code":"(fn [& args]\n\t    (loop [val (first args)\n\t\t   instructions (rest args)]\n\t      (if (empty? instructions)\n            val\n\t\t\t(recur\n\t\t\t ((first instructions) val (second instructions))\n\t\t\t (drop 2 instructions)))))","problem":135,"user":"5289f1f4e4b0239c8a67ae6d"},{"problem":135,"code":"(fn [x & ops] \n  (if (empty? ops)\n    x\n  \t(recur ((first ops) x (second ops)) (drop 2 ops))))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"(fn [first & args] (reduce (fn [x [op y]] (op x  y)) first (partition 2 \nargs)))","problem":135,"user":"4e6f578c535d5021c1a8961b"},{"problem":135,"code":"(fn calc [& args] (reduce (fn [x [y z]] (y x z))(first args)\n          (partition 2 (rest args))))","user":"604f4be1e4b0b7ec0ac60ace"},{"problem":135,"code":"(fn [& expr]\n    (loop [[x & xs] expr acc 0 op +]\n      (cond\n        (nil? x) acc\n        (number? x) (recur xs (op acc x) nil)\n        :else (recur xs acc x))))","user":"55c5b55fe4b0e31453f649b5"},{"code":"(fn [& args]\n  (let [a  (first args)\n        xs (partition 2 (next args))]\n    (reduce #((first %2) % (last %2)) a xs)))","problem":135,"user":"51db1abae4b094966a2cd685"},{"problem":135,"code":"(fn calc [v & more]\n  (if (empty? more)\n    v\n    (recur\n     ((first more) v (first (rest more)))\n     (rest (rest more)))))","user":"5338387de4b0e30313ee6c91"},{"problem":135,"code":"(fn f [a o b & c]\n  (if c\n     (apply f (o a b) c)\n    (o a b)))","user":"56011393e4b04bb52996e178"},{"code":"(fn [a f b & args]\n  (if (empty? args)\n    (f a b)\n    (recur (f a b) (first args) (second args) (drop 2 args) )))","problem":135,"user":"538e864ee4b0b51d73faae87"},{"problem":135,"code":"(fn [x & rst]\n  (let [op (first rst)\n        y (second rst)\n        tail (drop 2 rst)]\n    (if (#{+ - * /} op)\n      (recur (op x y) tail)\n      x)))","user":"4fdb881ee4b05e33b9224f5e"},{"problem":135,"code":"(fn infx\n  ([a f b & fcs]\n    (apply infx (list* (f a b) fcs)))\n  ([a f b]\n     (f a b)))","user":"5703eda3e4b08d47c9778200"},{"problem":135,"code":"(fn infix [& [x op y & remainder]]\n  ;; assumes well formed expression\n  (if remainder\n    (recur (cons (op x y) remainder))\n    (op x y)))","user":"5a257747e4b07f18be40aa1f"},{"code":"(fn ! [a & d] \n  (reduce (fn [acc [f i]](f acc i)) a (partition 2 d)))","problem":135,"user":"511ac026e4b0c87c59c9670e"},{"code":"(fn [x & xs]\n        (reduce (fn [x [f y]]\n                   (f x y))\n                x\n                (partition 2 xs)))","problem":135,"user":"4dad7adac9a9d6ed0599dc57"},{"code":"(fn [x & s]\n   (reduce #((first %2) %1 (second %2)) x (partition 2 s)))","problem":135,"user":"4f75469ee4b0fbe0118ec55a"},{"code":"(fn [x & ys]\n  (reduce\n   #((first %2) %1 (second %2))\n   x\n   (partition 2 ys)))","problem":135,"user":"51dd9370e4b0c33a4e1da40c"},{"code":"(fn x ([n] n) ([a o & r] (apply x (o a (first r)) (rest r))))","problem":135,"user":"5134973ce4b0230e9f713b42"},{"code":"(fn [& args]\n   (loop [a1 (first args) f (second args) a2 (nth args 2) more (drop 3 args)]\n     (if (= (count more) 0)\n       (f a1 a2)\n       (recur (f a1 a2) (first more) (second more) (drop 2 more)))))","problem":135,"user":"4f9174d0e4b0dcca54ed6c9b"},{"problem":135,"code":"(fn [& args]\n  (let [[x op y & r] args\n        val (op x y)]\n    (if (empty? r) val (loop [s val\n                             [op x] r\n                             re (drop 2 r)]\n                         (if (empty? re) (op s x) (recur (op s x) re (drop 2 re)))))))","user":"53b182a5e4b047364c044491"},{"problem":135,"code":"(fn [& exp]\n    (let [a [(seq [(first exp)])]\n          b (partition 2 (next exp))\n          target (concat a b)]\n      (reduce \n        (fn [r v] \n          (if (= 1 (count v))\n            (first v)\n            ((first v) r (last v))\n          )\n        )\n        0\n        target\n      )      \n    )\n  )","user":"5e2586afe4b05b4b01516167"},{"problem":135,"code":"(fn ic[pr & ops]\n  (loop [previous-result pr\n         operands (partition 2 ops)]\n    (if (empty? operands)\n      previous-result\n      (let [next-op (first operands)\n            next-operation (first next-op)\n            next-operand (last next-op)]\n        (recur (next-operation previous-result next-operand)(rest operands))))))","user":"5980f91ae4b021a7a535fddd"},{"code":"(fn [& args]\n  (let [a (fn a [ops x]\n            (if (empty? ops) x\n              (let [[op value] (take 2 ops)]\n                (a (drop 2 ops) (op x value)))))]\n    (a (rest args) (first args))))","problem":135,"user":"4ddbd934535d02782fcbe9fc"},{"problem":135,"code":"(fn infix[& etc]\n  (reduce\n   #(if(fn? %1)\n      (%1 %2)\n      (partial %2 %1))identity etc))","user":"6085edade4b0736b099e42fc"},{"problem":135,"code":"(fn __ [x op y & args]\n  (let [ret (op x y)]\n    (if (empty? args)\n        ret\n        (apply __ (conj args ret)))))","user":"593f95d8e4b069cdc2982be3"},{"code":"#(loop [r (first %&) td (rest %&)]\n  (if (empty? td)\n    r\n    (recur ((first td) r (second td)) (drop 2 td))))","problem":135,"user":"4ee7ef87535d93acb0a66872"},{"code":"#(if-let [[op y & rest] %&] (recur (op % y) rest) %)","problem":135,"user":"500ec210e4b00fff93030f9d"},{"problem":135,"code":"(fn [res & coll]\n    (loop [coll coll\n           res res\n           op nil]\n      (if (empty? coll)\n        res\n        (let [rst (rest coll)\n              frst (first coll)]\n          (if (nil? op)\n           (recur rst res frst)\n           (recur rst (op res frst) nil)\n           )\n          ))\n      )\n    )","user":"5ab575f8e4b073f17744263d"},{"code":"(fn [& args]\n  (loop [[v1 operator v2 & rest] args]\n    (if-not operator\n      v1\n      (recur (cons (operator v1 v2) rest)))))","problem":135,"user":"4f039c67535dcb61093f6b3a"},{"code":"(fn [l & more]\n  (reduce\n    (fn [l [o r]] (o l r))\n    l\n    (partition 2 more)))","problem":135,"user":"4f969a66e4b0dcca54ed6cde"},{"code":"(fn infix [rand1 op rand2 & rest]\n  (let [result (op rand1 rand2)]\n    (if (empty? rest)\n      result\n      (apply infix (cons result rest)))))","problem":135,"user":"52bc6cb2e4b07a9af57922f5"},{"problem":135,"code":"(fn [n1 & ops] (reduce (fn [n [op n2]] (op n n2)) n1 (partition 2 ops)))","user":"5f648ef1e4b02876ed9fd01b"},{"problem":135,"code":"(fn[& expr]\n        (loop [[eye & more] expr\n               symb :term\n               op +\n               res 0]\n          (if (nil? eye)\n            res\n            (case symb\n              :term (recur more :oper nil (op res eye))\n              :oper (recur more :term eye res)))))","user":"57e6f90de4b0bfb2137f5af6"},{"code":"(fn infix [s & xs]\n  (cond (empty? xs) s\n        :else (recur ((first xs) s (second xs)) (drop 2 xs))))","problem":135,"user":"50366589e4b0fbe0a74d26c3"},{"problem":135,"code":"(fn  \n    [& xs]\n    (\n      loop [input xs]\n      (\n        if (= 1 (count input))\n          (first input)\n          (recur (concat [((second input) (first input) (first (drop 2 input)) )] (drop 3 input)))\n      )\n    )\n  )","user":"5717d674e4b07c98581c3b1a"},{"problem":135,"code":"(fn infix [x op y & xs]\n  (let [z (op x y)]\n    (if xs\n      (apply infix z xs)\n      z)))","user":"583369e6e4b089d5ab817c9c"},{"problem":135,"code":"(fn [& xp]\n  (reduce (fn [r [op n]]\n            (op r n))\n          (first xp)\n          (partition 2 (rest xp))))","user":"5012da69e4b0c8732600222d"},{"code":"(fn [x & xs]\n  (reduce\n    #((first %2) %1 (second %2))\n    x\n    (partition 2 xs)))","problem":135,"user":"4e9519b4535dbda64a6f6b2d"},{"code":"(fn calc [first-value & other]\n         (letfn[\n                (calculation [acc lst]\n                  (if (seq lst)\n                    (let [operation (first lst), value (first (rest lst))]\n                      (calculation (operation acc value) (rest(rest lst))))\n                    acc\n                    ))\n                ]\n           (calculation first-value other)))","problem":135,"user":"51f81925e4b09be9c177e526"},{"code":"(fn ic [& as]\n  (first\n    (reduce\n      #(if (fn? %2)\n         (fn [n] (%2 (last %) n))\n         [(% %2)])\n      [(first as)] (rest as))))","problem":135,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":135,"code":"(fn infix\n  ([a op b]\n    (op a b))\n  \n  ([a op b & rs]\n    (apply infix (cons (op a b) rs))))","user":"5b500215e4b02d533a91bce2"},{"code":"(fn [x y z & r]\n  (if (empty? r)\n  (y x z)\n  (recur (y x z) (first r) (second r) (rest (rest r)))))","problem":135,"user":"4e16bdef535d04ed9115e7e9"},{"problem":135,"code":"(fn [val & others]\n  (loop [acc   val\n         stack others]\n    (if (empty? stack)\n      acc\n      (let [op  (first stack)\n            b   (second stack)\n            rem (rest (rest stack))]\n        (recur (op acc b) rem)))))","user":"5508a292e4b06e50f9beb10f"},{"code":"(fn infix [a operator b & others]\n  (if (empty? others)\n    (operator a b)\n    (apply infix (conj others (operator a b)))))","problem":135,"user":"51197750e4b057cba170bc99"},{"code":"(fn [n & ops]\n  (reduce\n    (fn [accum [f n]] (f accum n))\n    n\n    (partition 2 ops)))","problem":135,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":135,"code":"(fn pf\n  ([x] x)\n  ([x y z] (y x z))\n  ([x y z & args] (apply pf (concat [(y x z)] args))))","user":"5a6a7cc5e4b0512ff01cda27"},{"code":"(fn [init & arg_rest]\n\t   ((fn calc [init arg_rest]\n\t\t(let [func (first arg_rest)\n\t\t\t   arg  (second arg_rest)\n\t\t\t   result (func init arg)\n\t\t\t   next_arg_rest (nthrest arg_rest 2)]\n\t\t  (if (empty? next_arg_rest)\n\t\t      result\n\t\t    (calc result next_arg_rest)))) init arg_rest))","problem":135,"user":"5016ac54e4b052339a490e7b"},{"code":"(fn [& [val & ops]] \n  (reduce \n   (fn [so-far [op v]] (op so-far v)) \n   val \n   (partition 2 ops)))","problem":135,"user":"500aa15ee4b03d00572d2d76"},{"code":"(fn [n & args]\n  (loop [c args r n]    \n    (if (empty? c) r (recur (drop 2 c) ((first c) r (second c))))))","problem":135,"user":"4ed27f9f535d44c135fd68d5"},{"code":"(fn [& coll]\n  (reduce\n    (fn [acc [f x]] (f acc x))\n    0\n    (partition 2 2 nil (cons + coll))))","problem":135,"user":"504eed01e4b0e7ad84dbc4a5"},{"code":"(fn f [a o b & c]\n (if c\n (apply f (o a b) c)\n (o a b)))","problem":135,"user":"4e6eff83535d5021c1a89615"},{"problem":135,"code":"(fn f [x op y & t]\n  (let [v (op x y)]\n    (if t (apply f (cons v t)) v)))","user":"56baa68ce4b0f26550335947"},{"code":"(fn x ([s f v] (f s v)) ([s f v & r] (apply x (cons (f s v) r))))","problem":135,"user":"4e7f4147535db966e863cc3d"},{"problem":135,"code":"(fn f [& x]\n  (if (= 1 (count x))\n    (first x)\n    (let [[a op b] (into [] (take 3 x))]\n      (recur (cons (op a b) (drop 3 x))))))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":135,"code":"#(loop [r (first %&) c (next %&)] (if (empty? c) r (recur ((first c) r (first (next c))) (next (next c)))))","user":"58987ee9e4b00487982d52d2"},{"problem":135,"code":"(fn [a op b & c]\n  (if (empty? c)\n    (op a b)\n    (recur (op a b) (first c) (second c) (drop 2 c))))","user":"53e9dce1e4b036ad0777e4bc"},{"problem":135,"code":"(fn  [arg1 & expr] \n  (if (> (count expr) 0)\n    (let [op (first expr)\n          arg2 (second expr)\n          exprrest (drop 2 expr)]\n    (recur (op arg1 arg2) exprrest)\n    \n    )\n    arg1\n  ) \n)","user":"54418311e4b032a45b869370"},{"problem":135,"code":"(fn infix [x & xs] \n\t(reduce #((first %2) %1 (second %2)) x (partition-all 2 xs)))","user":"52e657e4e4b09f7907dd1472"},{"code":"#(reduce (fn [a [b c]] (b a c)) % (partition 2 %&))","problem":135,"user":"4ebaf790535dfed6da9c6d6e"},{"code":"(fn [x op y & args]\n  (let [result (op x y)]\n    (if (empty? args) result\n      (recur result\n             (first args)\n             (second args)\n             (rest (rest args))))))","problem":135,"user":"4f92de49e4b0dcca54ed6cb2"},{"problem":135,"code":"(fn infx\n  ([x op y] (op x y))\n  ([x op y & tail] (apply infx (op x y) tail)))","user":"54e956d9e4b024c67c0cf831"},{"problem":135,"code":"(fn [& args]\n\t(let [coll (seq args)]\n\t\t(if (= 3 (count coll))\n\t\t\t((nth coll 1) (first coll) (last coll))\n\t\t\t(recur (cons ((nth coll 1) (nth coll 0) (nth coll 2)) (nthrest coll 3)))\n\t\t)\n\t)\n)","user":"533a399de4b0e30313ee6cb9"},{"code":"(fn [& args] (reduce #((first %2) %1 (last %2)) (first args) (partition 2 (rest args))))","problem":135,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":135,"code":"(fn calc [& [o1 op o2 & rest :as args]] (if (= (count args) 1) o1 (apply calc (op o1 o2) rest)))","user":"55c10409e4b01b9910ae2a2c"},{"problem":135,"code":"#(reduce (fn [x y] (if (fn? x) (x y) (partial y x))) identity %&)","user":"5e13a6b7e4b099d064963001"},{"problem":135,"code":"(fn [f & s]    \n  (reduce #(let [[op f2] %2] (op %1 f2)) f (partition 2 s)))","user":"53213810e4b09d4e7a9b54b0"},{"problem":135,"code":"(fn [& args]\n  (reduce\n   (fn[a [op b]] (op a b))\n   (first args)\n   (partition 2 (rest args))))","user":"5ccf99fbe4b0ccb0619628c8"},{"code":"(fn infix-math2 \n  ([num] num)\n  ([num1 op num2 & more] \n     ;;(println \"args:\" num1 op num2)\n     (apply infix-math2 (cons (op num1 num2) more))))","problem":135,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":135,"code":"(fn calc\n  [& etc]\n  (reduce (fn [rslt [oper sarg]] \n            (oper rslt sarg)) \n          (first etc) \n          (partition 2 (rest etc))))","user":"5665ef78e4b0e91d5f5c5664"},{"problem":135,"code":"(fn [first-operand & ops]\n  (reduce (fn [acc [operator operand]]\n            (operator acc operand))\n          first-operand\n          (partition 2 ops)))","user":"5424c523e4b01498b1a71b03"},{"code":"(fn [& args]\n  (let [operators (filter #(#{+ - * /} %)       args)\n        numbers   (filter #(not (#{+ - * /} %)) args)\n        init-val  (first numbers)\n        numbers   (rest  numbers)]\n\n    (loop [oprs    operators    ; list of operators\n           nums    numbers      ; list of numbers\n           cur-val init-val]    ; current result\n      (if (and (= 1 (count oprs))\n               (= 1 (count nums)))\n        ;; Last case\n        ((first oprs) cur-val (first nums))\n        ;; Non-last case\n        (recur (rest oprs) (rest nums) ((first oprs) cur-val (first nums))))\n      )\n    ))","problem":135,"user":"53415755e4b00652c8746ecd"},{"problem":135,"code":"(fn [& args]\n  (loop [result (first args) args (rest args)]\n    (if\n      (or (empty? args) (< (count args) 2))\n      result\n      (recur\n       ((first args) result (second args))\n       (drop 2 args)))))\n\n;(fn infix [& args]\n;  (reduce (fn [a [op b]] (op a b))\n;          (first args)\n;          (partition 2 (rest args))))","user":"58d2af83e4b03c36ff7e5907"},{"problem":135,"code":"(fn [& lst] \n  (loop [acc (first lst) rst (rest lst)] \n    (if (empty? rst) acc \n      (let [[op s & nxt] rst] (recur (op acc s) nxt )))))","user":"533ea7e8e4b085b17e897d94"},{"code":"(fn calc [init & exp]\n  (reduce #(let [[f n] %2] (f %1 n)) init (partition 2 exp)))","problem":135,"user":"4effb663535dcb61093f6a2e"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [x item]\n            (if (fn? x)\n              (x item)\n              (partial item x)))\n          args))","user":"5b4fef74e4b02d533a91bcde"},{"problem":135,"code":"(fn calculator\n   [& params]\n   (loop [total (first params)\n          the-list (drop 1 params)]\n     (if (empty? the-list)\n       total\n       (let [[opr val & next-list] the-list]\n         (recur (opr total val) next-list)))))","user":"58a34442e4b02bd94d917ef2"},{"code":"(fn calc [& args]\n  (loop [expr (vec args)]\n    (if (<= (count expr) 1)\n      (first expr)\n      (let [a (expr 0)\n            b (expr 2)\n            f (expr 1)\n            val (f a b)]\n        (recur (assoc (subvec expr 2) 0 val))))))","problem":135,"user":"526ee63de4b03e8d9a4a733f"},{"problem":135,"code":"(fn infix [ a op b & xs ]\n  (if (seq xs) (apply infix (op a b) xs) (op a b)))","user":"56fde58ae4b08d47c97781aa"},{"problem":135,"code":"(fn calc ([n] n) ([a op b & rest] (apply calc (op a b) rest)))","user":"5c30d90de4b0d62ef62d9f22"},{"problem":135,"code":"#((fn d [l] (if \n\t(= 3 (count l))\n\t((get (vec l) 1)(first l)(get (vec l) 2))\n\t(d (into (vec (list (d (take 3 l)))) (drop 3 l)))\n)) (vec %&))","user":"53d5d24de4b0e771c302544a"},{"code":"(fn [x & args]\n  (reduce (fn [a [op b] ] (op a b)) x (partition 2 args)))","problem":135,"user":"53691dc7e4b0243289761e97"},{"problem":135,"code":"(fn infic-calc\n  [f & more]\n  (reduce #((first %2) %1 (second %2)) f (partition 2 more)))","user":"509a25b7e4b0efbae1fbc0a8"},{"problem":135,"code":"(fn f [n & x]\n  (reduce (fn [acc x] ((first x) acc (second x))) n (partition 2 x)))","user":"562d869be4b0a45d2ff8301f"},{"problem":135,"code":"(fn [x & more]\n  (loop [acc x\n         [op n & more] more]\n    (if op\n      (recur (op acc n) more)\n      acc)))","user":"580a0783e4b0a837a8b30d2c"},{"code":"(fn [& more]\n   (let [x more]\n     (loop [args (rest x) arg0 (first x)]\n       (if (empty? args)\n         arg0\n         (recur (nnext args)  ((first args) arg0 (second args)))))))","problem":135,"user":"4f066916535dcb61093f6c10"},{"problem":135,"code":"(fn infix [l o r & xs]\n  (if (empty? xs)\n    (o l r)\n    (apply infix (flatten [(o l r) (first xs) (rest xs)]))))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn f [ v & l] (loop [a v l l] \n  (if (empty? l) a (recur ((first l) a (first (rest l))) (rest (rest l)) ))))","problem":135,"user":"4f69f34fe4b07046d9f4ef90"},{"code":"(fn [x f y & xs] (if xs (recur (f x y) (first xs) (second xs) (nnext xs)) (f x y)))","problem":135,"user":"511d11d7e4b022853b0e079f"},{"problem":135,"code":"(fn [h & ts] (reduce (fn [a [op b]] (op a b)) h (partition 2 ts)))","user":"54d22860e4b0e8a36923e5ef"},{"problem":135,"code":"(fn [& args]\n  (loop [result 0 operator nil seq1 args]\n    (if (nil? (first seq1))\n      result\n      (if (number? (first seq1))\n        (if (not (nil? operator))\n          (recur (operator result (first seq1)) nil (rest seq1))\n          (recur (first seq1) nil (rest seq1)))\n        (recur result (first seq1) (rest seq1))))))","user":"57f52d3be4b0903ccab3dce7"},{"code":"(fn infix\n  [a & args]\n  (let [pair-gen (fn [acc coll]\n                    (if (empty? coll) acc\n                      (let [[op val & rest] coll]\n                        (recur (conj acc [op val]) rest))))\n        pairs (pair-gen [] args)]\n    (reduce\n      (fn [res nxt] (let [[op v] nxt] (op res v)))\n      a\n      pairs)))","problem":135,"user":"4edfb618535d10e5ff6f5343"},{"problem":135,"code":"(fn [& coll]\n     (reduce #(if (fn? %2) (partial %2 %1) (%1 %2)) coll))","user":"59e0f38ae4b08badc2a0c500"},{"problem":135,"code":"(fn [& body]\n  (loop [a (first body)\n        op (second body)\n        r (drop 2 body)]\n    (if (= (count r) 1)\n      (op a (first r))\n      (recur (op a (first r)) \n             (second r)\n             (drop 2 r)))))","user":"57bfffc7e4b05aa3c4741c8a"},{"code":"(fn [& args] (loop [ret (first args) n (rest args)] (let [op (first n) arg (second n)]  (if (empty? n) ret (recur (op ret arg) (nthrest n 2))))))","problem":135,"user":"4f47eab2e4b0d56e7bb92bc6"},{"code":"(fn [& t]\n  (if (= 1 (count t))\n    (first t)\n    (recur (cons ((nth t 1) (nth t 0) (nth t 2)) (drop 3 t)))))","problem":135,"user":"4dc1bd76535d020aff1edf8d"},{"problem":135,"code":"(fn calc\n  ([x] x)\n  ([x op y & more] (apply calc (op x y) more)))","user":"5b772ad7e4b047b03b2036e8"},{"code":"(fn inf \n  ([n] n)\n  ([n op & ns] (apply inf (op n (first ns))(rest ns))))","problem":135,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"problem":135,"code":"(fn calc\n  ([n] n)\n  ([a op b & others]\n   (apply calc (conj others (op a b)))))","user":"50ef77a4e4b0bdaecbb47d99"},{"problem":135,"code":"(fn [init & other]\n  (reduce #((nth %2 0) %1 (nth %2 1)) init (partition 2 other)))","user":"4e7e4d5c535db169f9c7970f"},{"problem":135,"code":"(fn my-calc [& args]\n  (cond (= (count args) 1) (first args)\n        :else (let [[var1 operator var2 & rest] args]\n                (recur (conj rest (operator var1 var2))))))","user":"543d89dfe4b032a45b869350"},{"code":"(fn [& args]\n  (loop [[arg1 f arg2 & more] args]\n    (if (nil? f) arg1\n        (recur (cons (f arg1 arg2) more)))))","problem":135,"user":"53300924e4b019098a6f8b55"},{"code":"(fn[& s]\n\t(reduce (fn[ret x]\n\t\t  ((first x) ret (second x))) (first s) (partition 2 2 (drop 1 s))))","problem":135,"user":"4e8849c5535d8b9bb0147ca4"},{"code":"(fn [& args]\n  (let [pairs (partition 2 (rest args))]\n  (reduce \n    (fn [acc [op n]]\n      (op acc n)) (first args) pairs)))","problem":135,"user":"51d08d67e4b067c365486351"},{"problem":135,"code":"(fn calculator [& xss]\n  (letfn [\n          (do-calculator [acc xss]\n            (if (empty? xss)\n              acc\n              (let [f (first xss)\n                    y (second xss)]\n                (do-calculator (f acc y) (rest (rest xss))))))]\n    \n    (do-calculator (first xss) (rest xss))))","user":"57d9bca1e4b0bd073c202405"},{"problem":135,"code":"(fn calc [& exp] (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) exp))","user":"55631739e4b0c656e3ff17e2"},{"problem":135,"code":"(fn [& args] \n    (reduce #((first %2) %1 (second %2)) (first args) (partition 2 (rest args)) )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn [& math] \n  (reduce #(if (number? %1) (partial %2 %1) (%1 %2)) math))","problem":135,"user":"504e397ee4b0f6ff3350c485"},{"problem":135,"code":"(fn q135 [a func b & c]\n  (if (not (empty? c))\n    (apply q135 (func a b) c)\n    (func a b)))","user":"52c672e2e4b0c2d177d6210e"},{"problem":135,"code":"(fn [& col]\n   (loop [rem col]\n     (if (<= (count rem) 1)\n       (first rem)\n       (recur (cons ((second rem) (first rem) (nth rem 2)) (drop 3 rem)))\n       )))","user":"590b3aeae4b047aa04b199d0"},{"code":"(fn [base & t]\n   (reduce #((first %2) %1 (second %2)) base (partition 2 t)))","problem":135,"user":"4f409e29e4b0e243712b1fb6"},{"code":"(fn [& calc]\n  (reduce #((first %2) %1 (last %2))\n            (first calc)\n            (partition 2 (rest calc))))","problem":135,"user":"4fd6f4d8e4b0dab7d829f37b"},{"problem":135,"code":"(fn infix\n  ([a b c] (b a c))\n  ([a b c & more]\n   (apply infix (cons (b a c) more))))","user":"5632d1b3e4b0bfe05bf117a9"},{"problem":135,"code":"(fn [x & xs]\n(reduce #((first %2) %1 (second %2)) x (partition 2 xs)))","user":"55ff562fe4b00f4cabc57660"},{"code":"(fn infix-calculator [a op b & r] (if (empty? r) (op a b) (apply infix-calculator (op a b) r)))","problem":135,"user":"52f10094e4b05e3f0be25ee8"},{"problem":135,"code":"(fn [& args]\n  (loop [ args args ]\n    (let [val ((nth args 1) (nth args 0) (nth args 2))]\n      (if (= (count args) 3)\n        val\n        (recur (conj (nthrest args 3) val))))))","user":"536673a8e4b0243289761e76"},{"code":"(fn f [a op b & r]\r\n   ((if r\r\n      #(apply f % r)\r\n      *)\r\n    (op a b)))","problem":135,"user":"4e6a5a32535d8ccf87e9fed0"},{"problem":135,"code":"(fn infix-cal [& args]\n  (reduce (fn [a [op b]]\n            (op a b))\n          (first args)\n          (partition 2 (rest args))))","user":"565654dae4b0f9d632dd849f"},{"code":"(fn calc [& args]\n  (if (= (count args) 1)\n    (first args)\n    (let [new-value ((second args) (first args) (nth args 2))\n          remaining-parts (nthnext args 3)]\n      (recur (cons new-value remaining-parts)))))","problem":135,"user":"516385cee4b055933a9ca02d"},{"code":"(fn infix [ & o] \n      (if (= (second o) nil)\n            (first o)\n            (apply infix (cons \n                    ((second o) (first o) (second (next o)))\n                    (drop 3 o)\n                    )\n            )\n      )\n)","problem":135,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":135,"code":"#(loop [[re f & xs ] %& ]\n    (if\n      (not (second xs)) (f re (first xs))  \n      (recur (cons (f re (first xs)) (rest xs)))))","user":"5dc12b0ae4b0e59a23173d84"},{"code":"(fn infix [acc & coll]\n  (if (empty? coll)\n      acc\n      (let [op (first coll)]\n        (recur (op acc (first (rest coll))) (drop 2 coll)))))","problem":135,"user":"512e8f5ce4b0b740abc59829"},{"code":"(fn [one & r] (loop [result one operands r]\n  (if (empty? operands)\n     result\n  (recur ((first operands) result (second operands)) (drop 2 operands)) \n  )))","problem":135,"user":"4e43b0d9535dc968683fc4a3"},{"code":"(fn [& r] (reduce #(if (fn? %2) (partial %2 %) (% %2)) r))","problem":135,"user":"523ed522e4b057c4b7cd0a78"},{"problem":135,"code":"(fn infix-math\n  ([x op y & res] (apply (partial infix-math (op x y)) res))\n  ([x op y] (op x y))\n  )","user":"55f06183e4b06e875b46ce23"},{"code":"(fn [fst & args]\n  (letfn [(f [x [op y & chain :as tail]] (if (empty? tail)\n                                            x\n                                            (f (op x y) chain)))]\n         (f fst args)))","problem":135,"user":"5216933be4b000d124d989cf"},{"problem":135,"code":";; http://www.4clojure.com/problem/135\n(fn infix-calc\n  [& args]\n  (reduce (fn [val val-f-pair]\n            ((first val-f-pair) val (second val-f-pair)))\n          (first args)\n          (partition 2 (rest args))))","user":"5c92105ce4b048ec896c59f7"},{"problem":135,"code":"(fn [x & s]\n  (reduce\n   (fn [res [op n]]\n     (op res n))\n  x\n  (partition 2 s)))","user":"547f37c9e4b0c51c1f4d731a"},{"problem":135,"code":"(fn f [a o b & c]\n (if c\n    (apply f (o a b) c)\n    (o a b)))","user":"54d70f40e4b0a52adc2e2027"},{"code":"(fn [& rest]\n  (reduce \n    #(let [snd %2\n           fst %1] \n  (if (fn? snd) (partial snd fst)\n                 (fst snd))) rest))","problem":135,"user":"4fc5a693e4b0ee37620e17fc"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [a [op b]] (op a b))\n  (first args) (partition 2 (rest args))))","user":"557f7c8be4b05c286339e0e0"},{"problem":135,"code":"(fn [& xs]\n  (reduce #((first %2) % (second %2)) (first xs) (partition 2 (rest xs))))","user":"53f5c402e4b0db01ade6f9d4"},{"code":"(fn __ [& args]\n  (loop [a (first args) b (nth args 2) op (second args) arg (drop 3 args)]\n  (if (nil? b)\n\t  a\n      (recur (op a b) (second arg) (first arg) (drop 2 arg)))))","problem":135,"user":"4fa719c0e4b081705acca1bf"},{"problem":135,"code":"(fn [& more] \n  (let [xs (vec more)\n        ops (partition 2 (rest xs))]\n    (reduce #((first %2) %1 (second %2))\n            (first xs) ops)))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn [& l]\n  (let [n (flatten (partition 1 2 (drop 2 l)))\n        o (flatten (partition 1 2 (rest l)))\n        c (first l)]\n    ((fn p [n o c]\n      (if (empty? n)\n        c\n        (p (rest n) (rest o) ((first o) c (first n)))))\n    n o c)))","problem":135,"user":"52091d57e4b0e152394d76f0"},{"problem":135,"code":"(fn peu [x y & z] ((fn peu2 [u v w] (if (= 1 (count w)) (v u (first w)) (peu2 (v u (first w)) (second w) (rest (rest w))))) x y (vec z)))","user":"53fc8424e4b0de5c418485b3"},{"problem":135,"code":"(fn [& rest] \n  (loop [x (first rest) f (second rest) y (nth rest 2) others (drop 3 rest)] \n    (if (= f nil)\n      x\n      (recur (f x y) (first others) (second others) (drop 2 others)))))","user":"588fd085e4b00487982d51c0"},{"problem":135,"code":"(fn [first-num & symbols]\n  (loop [n first-num xs symbols]\n    (if (empty? xs)\n      n\n      (let [[op b & rest-xs] xs]\n      (recur (op n b) rest-xs))\n    )\n  )\n)","user":"51f09f3de4b0274c496158d7"},{"code":"(fn [x op y & xs]\r\n  (loop [acc (op x y) r xs]\r\n    (if (empty? r)\r\n      acc\r\n      (let [[op2 y2 & more] r]\r\n        (recur (op2 acc y2) more)))))","problem":135,"user":"4dc97aec535d5973398f9284"},{"problem":135,"code":"(fn [a op b & args] (loop [result a\n                    lst args\n                    operand op\n                    nextnum b]\n                         (println result)\n               (if (empty? lst)\n                 (operand result nextnum)\n                 (recur (operand result nextnum) (rest (rest lst)) (first lst) (first (rest lst))))))","user":"607e1d9de4b03d835a6eaedb"},{"problem":135,"code":"(fn ev ([x] x)\n       ([x op y & more] (apply ev (op x y) more)))","user":"4f5eda39e4b0030a34fb2b56"},{"problem":135,"code":"(fn infix\n  ([res] res)\n  ([f o s] (o f s))\n  ([f o s & args] (apply infix (cons (o f s) args))))","user":"56bb9ccce4b0f26550335959"},{"problem":135,"code":"(fn inf\n  ([x op y] (op x y))\n  ([x op y & xs]\n   (apply inf (op x y) xs)))","user":"5776f39de4b0979f89651643"},{"code":"(fn [& fs]\n  (if (= 1 (count fs))\n    (first fs)\n    (recur (let [[a1 op a2] (take 3 fs)\n                 result (op a1 a2)]\n             (conj (drop 3 fs) result)))))","problem":135,"user":"4db3393e535df7e46ed9b6cc"},{"problem":135,"code":"(fn f\n  [& as]\n  (let [[a b c & d] as]\n    (if b\n      (apply f (b a c) d)\n      a)))","user":"52ae886de4b0c58976d9acab"},{"problem":135,"code":"(fn [a op b & xs]\n    (loop [a a op op b b xs xs]\n      (if (empty? xs)\n        (op a b)\n        (recur (op a b) (first xs) (second xs) (rest (rest xs))))))","user":"551a21ece4b091ff45eda993"},{"problem":135,"code":"(fn [& xs]\n  (loop [result (first xs) r (rest xs)]\n    (if (empty? r) \n      result\n      (recur ((first r) result (second r)) (rest (rest r))))))","user":"5745b884e4b009280f9f2b53"},{"problem":135,"code":"(fn [a op b & [op' c & rest]]\n  (if op\n    (recur (op a b) op' c rest)\n    a))","user":"56441634e4b0018b46ad8c08"},{"code":"(fn x [a f b & c](if c (apply x (f a b) c) (f a b)))","problem":135,"user":"4f296a80e4b0d6649770a02a"},{"code":"(fn [& args]\n  (reduce (fn [a b]\n            (if (fn? b)\n              (vector b a)\n              (apply (first a) [(second a) b])))\n          args))","problem":135,"user":"4f047902535dcb61093f6bcc"},{"code":"(fn f\n  [x & args]\n  (reduce (fn [acc [f y]] (f acc y)) x (partition 2 args)))\n  ;;(loop [v x a (partition 2 args)]\n  ;;  (if (empty? a)\n  ;;   v\n  ;;    (recur ((first (first a)) v (last (first a))) (rest a)))))","problem":135,"user":"525fffb8e4b03e8d9a4a702b"},{"code":"(fn [l o r & [o2 r2 & rest]]\n  (let [x (o l r)]\n    (if o2 (recur x o2 r2 rest)\n    x)))","problem":135,"user":"4ea41fc2535d7eef308072cb"},{"problem":135,"code":"(fn expr ([a op b] (op a b)) \n  ([a op b & xs] (apply expr (op a b) xs)))","user":"598e7998e4b02b9968b84d34"},{"problem":135,"code":"(fn [x & args] (if (empty? args) x (recur ((first args) x (second args)) (drop 2 args))))","user":"5f3567d6e4b0574c87022c44"},{"problem":135,"code":"(fn [x & more] (reduce (fn [a b] ((fn [x] ((first x) (last x) (second x))) (concat b (list a)))) x (vec (partition 2 more))))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"(fn inflix [& ops]\n        (loop [res (first ops) [f v & ops] (rest ops)]\n          (if f\n            (recur (f res v) ops)\n            res)))","problem":135,"user":"4e589bdc535d8a8b8723a295"},{"problem":135,"code":"(fn infix [x op y & xs]\n  (let [res (op x y)]\n    (if (seq xs)\n      (apply (partial infix res) xs)\n      res)))","user":"54448e84e4b032a45b869393"},{"code":"(fn [x & xs]\n  (reduce (fn [r [f y]] (f r y)) x (partition 2 xs)))","problem":135,"user":"5063fe48e4b075d771da6f9e"},{"problem":135,"code":"(fn [& args]\n         (reduce (fn [acc [op val]] (op acc val)) (first args) (partition 2 (rest args))))","user":"537bde5de4b06839e8705e73"},{"problem":135,"code":"(fn calc [num op & args]\n  (loop [result num op op next (first args) later (rest args)]\n    (if (= later [])\n      (op result next)\n      (recur (op result next) (first later) (second later) (nthrest later 2)))))","user":"5cb11a72e4b026601754b8c6"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [v1 [op v2]] (op v1 v2)) \n          (first args)\n          (partition 2 (rest args))))","user":"582d7569e4b051871117bfbe"},{"code":"(fn [& e]\n  ((fn parse [expr]\n     (cond (= 3 (count expr))\n           ((second expr)\n            (first expr)\n            (first (drop 2 expr)))\n           :else\n           (let [[op opand] (take-last 2 expr)]\n             (op\n              (parse (drop-last 2 expr))\n              opand)))) e))","problem":135,"user":"4ff304f4e4b0678c553fc343"},{"problem":135,"code":"(fn [& x]\n  (if (not (seq? x)) (recur (list x))\n(cond \n  (= (count x) 1) (first x)\n  (= (count x) 3) (recur (list ((second x) (first x) (nth x 2))))\n  (> (count x) 3) \n    (recur (conj (drop 3 x) ((second x) (first x) (nth x 2))))\n))\n)","user":"59ef5280e4b0966464fe6a2b"},{"code":"(fn [& c]\n   (first (reduce\n           #(if (number? %2) `(~((first %) (last %) %2))\n                (cons %2 %)) `(~(first c)) (rest c))))","problem":135,"user":"52c25645e4b07a9af579237d"},{"code":"#((fn [r [o d & q]]\n    (if o\n      (recur (o r d) q)\n      r))\n  % %&)","problem":135,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":135,"code":"(fn inf [& exprs]\n  (loop [acc    0\n         op     :start\n         elems  exprs]\n    (cond\n     (empty? elems) acc\n     (= op :start)  (recur (first elems) nil (rest elems))\n     (nil? op)      (recur acc (first elems) (rest elems))\n     :else          (recur (op acc (first elems)) nil (rest elems)))))","user":"5779556de4b0979f8965166e"},{"problem":135,"code":"(fn f [x op y & more]\n  (let [z (op x y)]\n    (if (seq more) (apply f (cons z more)) z)))","user":"5799ff45e4b05b1deef9add1"},{"problem":135,"code":"(fn [& s]\n    (reduce (fn [cur [f x]] (f cur x))\n            (first s)\n            (partition 2 (next s))))","user":"4f9b3532e4b0dcca54ed6d13"},{"code":"(fn [a x b & [y c & z]]\r\n  (if x \r\n    (recur (x a b) y c z)\r\n    a))","problem":135,"user":"4f58d92fe4b0a7574ea71858"},{"code":"(fn infix-calc [& args]\r\n    (loop [[a op b & more] args]\r\n      (if (and (not (nil? op)) (not (nil? b)))\r\n       (recur (cons (op a b) more))\r\n       a)))","problem":135,"user":"4f149e0f535d64f60314643d"},{"code":"(fn rec [x op & [fst & rst]]\n  (if rst\n    (apply rec (op x fst) rst)\n    (op x fst)))","problem":135,"user":"50645e12e4b007509339a58a"},{"problem":135,"code":"(fn test\n  ([a f b & args]\n   (apply test (f a b) args)\n  )\n  ([a] a)\n )","user":"54021f13e4b0df28a13c62cc"},{"problem":135,"code":"(fn [& args]\n  (reduce \n   (fn [x [f y]] (f x y))\n   (first args)\n   (partition 2 (rest args))))","user":"55625903e4b0c656e3ff17d7"},{"problem":135,"code":"(fn [f & r]\n  (reduce (fn [acc [op n]] (op acc n))\n          f\n          (partition 2 r)))","user":"553b0d95e4b09218d5f44fff"},{"problem":135,"code":"(fn [x & col]\n  (reduce (fn [v [o a]] (o v a)) x (partition 2 col)))","user":"53b7c21ae4b047364c0444d4"},{"problem":135,"code":"(fn [& s]\n  (let [x (partition 2 2 nil (rest s))\n        t (first s)]\n    (reduce\n      (fn [total [op n]]\n        (op total n))\n      t x)))","user":"55c66ffee4b0e31453f649c2"},{"problem":135,"code":"(fn [& infix-notation]\n  (letfn [(infix [l & coll]\n            (let [[op r & rest] coll\n                  result (op l r)]\n              (if (nil? rest)\n                result\n                (apply infix result rest))))]\n    (apply infix infix-notation)))","user":"52c49401e4b0c2d177d620de"},{"code":"(fn calc [num & [op num2 & rest]]\n  (if (not op) num\n      (do (assert num2)\n          (apply calc (op num num2) rest))))","problem":135,"user":"4fbfe9a4e4b081705acca31f"},{"problem":135,"code":"(fn infix [& more]\n  (loop [s (rest more) result (first more)]\n    (if (empty? s) result\n      (recur (drop 2 s) ((first s) result (second s))))))","user":"55d29fb6e4b0e31453f64a59"},{"code":"(fn [x & r] (reduce (fn [e [o l]] (o e l)) x (partition 2 r)))","problem":135,"user":"4ee9ddb8535d93acb0a66896"},{"problem":135,"code":"(fn mycalc [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"53d5d43ce4b0e771c302544d"},{"problem":135,"code":"(fn infix\n\t([x] x)\n\t([x op y & z] (apply infix (op x y) z))\n)","user":"5472d919e4b094393f72dd7b"},{"code":"(fn [ival & xs]\n  (reduce (fn [sofar [op y]] (op sofar y))\n          ival (partition 2 xs)))","problem":135,"user":"510acd6ee4b078ea719210f4"},{"problem":135,"code":"(fn calc ([l op r & xs] (apply calc (op l r) xs)) ([r] r))","user":"54d6c80ce4b0a52adc2e2020"},{"code":"(fn [& expression]\n\t  ((fn [expression acum]\n\t       (cond (empty? expression) acum\n\t\t     :else (recur (drop 2 expression) ((first expression) acum (nth expression 1))))) (rest expression) (first expression)))","problem":135,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":135,"code":"(fn infix-calculator [x operator y & rest]\n  (let [result (operator x y)]\n    (if (nil? rest)\n      result\n      (apply infix-calculator (cons result rest)))))","user":"58db097fe4b0a4d5acaab66f"},{"problem":135,"code":"(fn f [a op b & xs]\n  (if xs\n    (apply f (cons (op a b) xs))\n    (op a b)\n    ))","user":"4f6ba7bce4b07046d9f4efb0"},{"problem":135,"code":"(fn calc [a op b & args]\n  (let [ans (op a b)]\n    (if\n      (empty? args)\n      ans\n    (apply calc (cons ans args)))))","user":"5ec819b4e4b08d0ec38692e2"},{"problem":135,"code":"(fn [a & b] (reduce (fn [f [d e]] (d f e)) a (partition 2 b)))","user":"58b54852e4b0ebc645576d52"},{"problem":135,"code":"(fn[& exp](reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) exp))","user":"5e48ec09e4b043cd24807a45"},{"code":"(fn ieval\n  ([a] a)\n  ([a o b & os]\n    (apply ieval (cons (o a b) os))))","problem":135,"user":"50657775e4b0deb876850599"},{"problem":135,"code":"#(reduce  (fn [accum [op e]] (op accum e)) (first %&) (partition 2(rest %&)))","user":"54af6fb0e4b09f271ff37d08"},{"code":"(fn [& xs]\n  (loop [xs xs\n         acc 0]\n    (cond\n     (empty? xs) acc\n     (number? (first xs)) (recur (rest xs) (first xs))\n     :else (recur (rest (rest xs)) ((first xs) acc (second xs))))))","problem":135,"user":"5220bc0fe4b0e6a83c8925a7"},{"problem":135,"code":"(fn [& args]\n  (loop [total (first args)\n         idx 1]\n    (if (> (inc idx) (count args))\n      total\n      (recur ((nth args idx) total (nth args (inc idx))) (+ idx 2)))))","user":"5a9ac061e4b0d174b936c7c1"},{"code":"(fn [op1 & more]\n   (loop [op1 op1 more more]\n       (if (empty? more)\n         op1\n        (recur ((first more) op1 (second more)) \n               (drop 2 more)))))","problem":135,"user":"51cacda3e4b068dadb8f2227"},{"problem":135,"code":"(fn [& lst]\n  (first (first (drop-while\n          #(> (count %) 1)\n          (iterate\n           (fn [[a op b & rest]] (cons (op a b) rest))\n             lst))))\n              \n              )","user":"5a566e8fe4b05d388ecb6c51"},{"problem":135,"code":"(fn infix [& s] (reduce #(if (number? %2) (%1 %2) (partial %2 %1)) (partial + 0) s))","user":"5654e024e4b0f9d632dd848d"},{"code":"(fn infix [& x]\n  (if (= 1 (count x))\n    (first x)\n    (apply infix\n      (conj\n        (drop 3 x)\n        ((second x) (first x) (nth x 2))))))","problem":135,"user":"5012aefce4b0c8732600222a"},{"problem":135,"code":"(fn [& coll]\n    (reduce \n     (fn [acc [f a]] (f acc a))\n     (first coll)\n     (partition 2 (rest coll))))","user":"540d5085e4b0addc1aec670e"},{"problem":135,"code":"(fn [& args]\n(loop [[op n & remaining] (rest args) \n        res (first args)]\n(if (nil? op ) res\n    (recur remaining (op res n))\n)))","user":"60654263e4b069485764ddc9"},{"problem":135,"code":"(fn [& ops]\n  (loop [a (first ops) f (first (rest ops)) b (first (rest (rest ops))) remain (rest (rest (rest ops)))]\n    (if (empty? remain)\n      (f a b)\n      (recur (f a b) (first remain) (first (rest remain)) (rest (rest remain))))))","user":"53791ab7e4b06839e8705e4d"},{"code":"(fn [& args]\n  (loop [init (first args) op (second args) n (nth args 2) rst (drop 3 args)]\n    (let [res (op init n)]\n      (if (empty? rst) res\n        (recur res (first rst) (second rst) (drop 2 rst))\n      )\n    )\n  )\n)","problem":135,"user":"511cca27e4b00c2a1fa7ff7d"},{"code":"(fn [first-operand & expr]\n  (reduce\n   (fn [oper1 [op oper2]]\n     (op oper1 oper2))\n   first-operand\n   (partition 2 expr)))","problem":135,"user":"51281b25e4b03a34742b4304"},{"problem":135,"code":"(fn infix\n [& math-stuff]\n (loop [stuff (rest math-stuff)\n        calc (first math-stuff)]\n    (if (= (count stuff) 2)\n      (apply #(%2 %1 %3) (take 3 (cons calc stuff)))\n      (recur (-> stuff (rest) (rest))\n          (apply #(%2 %1 %3) (take 3 (cons calc stuff)))))))","user":"5c1d9f05e4b0efcb0b05b24c"},{"code":"(fn calc\n  ([n] n)\n  ([n1 op n2 & es] (apply calc (op n1 n2) es)))","problem":135,"user":"4ed94d69535d10e5ff6f5303"},{"problem":135,"code":"(fn f [i o & x]\n  (if (= 1 (count x))\n    (o i (first x))\n    (apply f (o i (first x)) (second x)  (drop 2 x))))","user":"551c66dae4b07993ea3788de"},{"code":"#(loop [x 0 [o y & e] (cons + %&)]\n    (if o\n      (recur (o x y) e)\n      x))","problem":135,"user":"4eb97b2e535dfed6da9c6d54"},{"code":"(fn f [x op y & z]\n  (if (first z)\n    (apply f (op x y) z)\n    (op x y)))","problem":135,"user":"528bba38e4b0239c8a67aea9"},{"code":"(fn[& x](nth(reduce #(if(= 2(count %1))(let[[m o]%1][(o m%2)])(conj%1%2))[0 +]x)0))","problem":135,"user":"4e39b020535deb9a81d77f44"},{"code":"(fn [x & xs]\n    (reduce #((first %2) %1 (last %2)) x (partition 2 xs)))","problem":135,"user":"5125745ae4b05d10e3e395f9"},{"problem":135,"code":"(fn inflix [& args]\n  (loop [result (first args) operations (partition 2 (rest args))]\n    (if (empty? operations) result\n        (let [[operator n] (first operations)]\n          (recur (operator result n) (rest operations))))))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":135,"code":"(fn f [x o y & r]\n  (let [v (o x y)]\n    (if r\n      (apply f v r)\n      v)))","user":"5259451ce4b0cb4875a45cd7"},{"problem":135,"code":"(fn [base & args]\n  (reduce (fn [acc [op arg]] (op acc arg)) \n          base \n          (partition 2 args)))","user":"51647faae4b003cf19fdde3b"},{"problem":135,"code":"; Write a function\n; that accepts a variable length mathematical expression consisting of numbers and the operations\n(fn [& math-expressions] \n   \n  ; Starts with a num\n  ; Not doing edge cases (no num, only num no op, end on op)\n  \n  (loop [expr (rest math-expressions) res (first math-expressions)]\n    \n    ; Any more math expressions? Do 'em : Return the result\n    (if (empty? expr)\n      \n      res\n      \n      (recur (drop 2 expr) ( (first expr) ; first end\n                            res (first (rest expr) ; rest end\n                                                    ) ; first end\n                            ) ; 2nd arg of recur end\n              ) ; recur end (Good use of the drop fn here; also here's where immutable values helps)\n      \n      \n      ) ; if end\n    \n    ) ; loop end \n  \n  ) ; fn end","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn infix [n1 expr n2 & more]\n  (if (empty? more)\n    (expr n1 n2)\n    (apply infix (cons (expr n1 n2) more))))","problem":135,"user":"531dfaf5e4b08068f379edb3"},{"problem":135,"code":"(fn [& vals]\n  (reduce\n   (fn [lh [op rh]] (op lh rh))\n   (first vals)\n   (partition 2 (rest vals))))","user":"57481f1fe4b009280f9f2b82"},{"code":"(fn infix [& args]\n  (reduce (fn [acc [op val]] (op acc val))\n          (first args)\n          (partition 2 (rest args))))","problem":135,"user":"52facb9de4b047fd55837002"},{"problem":135,"code":"(fn [& v]\n    (loop [v_ v ret 0]\n        (if (= (count v_) 1)\n            ret\n            (let [r ((second v_) (first v_) (nth v_ 2))]\n                (recur (conj (rest (rest (rest v_))) r) r)))))","user":"55975569e4b031d6649c9b8e"},{"problem":135,"code":"(fn [v & rest]\n\t(let [cs (partition 2 rest)]\n\t(reduce #((first %2) %1 (second %2)) v cs)))","user":"53573d70e4b04ce2eb3ed278"},{"code":"(fn\n  [& args]\n  (let [head (first args)\n        ops (partition 2 (rest args))\n        fixer (fn [acc [op arg]] (op acc arg))]\n   (reduce fixer head ops)))","problem":135,"user":"4ef7a483535dced4c769f258"},{"code":"(fn infix [& expr] \n  (if (>= (count expr) 3)\n    (apply infix (concat (list (apply #(%2 %1 %3) (take 3 expr))) (drop 3 expr)))\n      (first expr)))","problem":135,"user":"4f03ba9c535dcb61093f6b58"},{"code":"(fn infix [& args]\n  (reduce (fn [ret e]\n            (if (fn? e)\n              (partial e ret)\n              (ret e))) args))","problem":135,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":135,"code":"(fn [& args]\n  (let [r (partition 2 (rest args))]\n    (reduce #((first %2) %1 (last %2)) (first args) r)))","user":"5c7d5a0ce4b0d597f478caab"},{"problem":135,"code":"(fn [init & args] (reduce #((first %2) %1 (second %2)) init (partition 2 2 args)))","user":"5991d9cbe4b0866487ed0d69"},{"problem":135,"code":"(fn fun135\n  [& arg]\n  (let [init (first arg)]\n    (loop [todo (rest arg)\n           result init]\n      (if (seq todo)\n        (let [op (first todo)\n              val (second todo)]\n          (recur (rest (rest todo)) (op result val)))\n        result))))","user":"5075e374e4b09049dea827a5"},{"problem":135,"code":"(fn [& args] (let [[v & w] args x (partition 2 w)]\n               (reduce (fn [a [o u]] (apply o [a u])) v x)\n               ))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":135,"code":"(fn calc [& args]\n  (if (= (count args) 1) \n    (first args)\n    (let [[l op r] (take 3 args)]\n      (apply calc (cons (op l r) (drop 3 args))))))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":135,"code":"(fn [& terms]\n    (reduce #((first %2) %1 (last %2)) (first terms) (partition 2 (rest terms))))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"(fn infix [& seq] (if (= (count seq) 1)\n                       (first seq)\n                       (apply infix (cons ((second seq) (first seq) (second (rest seq))) (drop 3 seq)))))","problem":135,"user":"4f13047d535d64f60314642c"},{"problem":135,"code":"(fn [& L] \n    (loop [\n        Ret (first L) \n        Op ((comp first rest) L) \n        Second ((comp first rest rest) L) \n        Rest ((comp rest rest rest) L) \n      ]\n      ;;(println Ret Op Second)\n      (if (nil? Op)\n        Ret\n        (recur\n          (Op Ret Second)\n          (first Rest)\n          ((comp first rest) Rest)\n          ((comp rest rest) Rest) \n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":135,"code":"(fn [& xs]\n  (reduce (fn[n [o v]](o n v)) (first xs) (partition 2 (rest xs))))","user":"55597b84e4b0deb715856e36"},{"code":"(fn [n & e]\n  (reduce\n   (fn [i [s x]]\n     (s i x))\n   n (partition 2 e)))","problem":135,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"problem":135,"code":"(fn f\n  ([x] x)\n  ([x op y & xs] (apply f (op x y) xs)))","user":"5933b736e4b072a2710fd05d"},{"code":"(fn [c op n & rst]\n  (if (empty? rst)\n    (op c n)\n    (recur (op c n) (first rst) (first (rest rst)) (rest (rest rst)))))","problem":135,"user":"4f849f76e4b033992c121c36"},{"problem":135,"code":"(fn [& xs] (first\n            (reduce (fn [cum token]\n                      (condp = (count cum)\n                        2 (list ((second cum) (first cum) token))\n                        1 (list (first cum) token)\n                        0 (list token))) [] xs)))","user":"5233564ae4b0f0b72fabf403"},{"problem":135,"code":"(fn calcu [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"607e1cf9e4b03d835a6eaed9"},{"problem":135,"code":"(fn infix\n  [result & more]\n  (if (seq more)\n    (let [op (first more)\n          x  (second more)]\n      (recur (op result x) (drop 2 more)))\n    result))","user":"5afcd6d1e4b0cc2b61a3bd17"},{"code":"(fn f [& args]\n  (let [functions (filter #(not (number? %)) args)\n        numbers (filter #(number? %) args)]\n    (loop [res (first numbers)\n           numb (second numbers)\n           rnumbs (rest (rest numbers))\n           func (first functions)\n           rfuncs (rest functions)]\n      (if (nil? numb)\n        res\n        (recur (func res numb) (first rnumbs) (rest rnumbs) (first rfuncs) (rest rfuncs))))))","problem":135,"user":"52d7b0ade4b09f7907dd137c"},{"problem":135,"code":"(fn [ & s]\n    (loop [x (first s) t (rest s)]\n      (if (nil? t)\n      x\n      (let [ [op y & z] t]\n        (recur (op x y) z)))))","user":"5cd4c3dae4b0ccb061962925"},{"problem":135,"code":"(fn f [& a]\n  (\n    let [b (flatten a)]\n      (if (> (count b) 2) \n      (f (conj (drop 3 b) ((nth b 1) (nth b 0) (nth b 2))))\n      (first b)\n    )  \n  )\n)","user":"54a7efdee4b09f271ff37c9d"},{"code":"(fn [& s]\n  (let [op (for [i (range 1 (count s) 2)] (nth s i))\n        data (for [i (range 2 (count s) 2)] (nth s i))]\n    (reduce (fn [old [n op]] (op old n))\n              (first s)\n              (map vector data op))))","problem":135,"user":"4dcd2065535d5973398f929a"},{"code":"(fn [& args]\r\n  (reduce #((first %2) % (second %2))\r\n    (first args) (partition 2 (rest args))))","problem":135,"user":"509160dae4b0742c82730aef"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [a b] ((first b) a (last b) ))\n          (first args) (partition 2 (rest args))))","user":"564a560ae4b0284900eef654"},{"problem":135,"code":"(fn [& operands] \n  (reduce \n    (fn [x [op y]] (op x y)) \n    (first operands) \n    (partition 2 (rest operands))))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":135,"code":"(fn [& args]\n  (loop [curr (first args) next (rest args)]\n    (if (empty? next)\n      curr\n      (recur ((first next) curr (second next)) (drop 2 next)))))","user":"56a01895e4b0542e1f8d149f"},{"problem":135,"code":"(fn infix\n  [& xs]\n  (reduce\n    (fn [acc e]\n      (if (fn? e)\n        (partial e acc)\n        (acc e)))\n    (partial + 0) xs))","user":"5eec1001e4b07c55ae4a0502"},{"code":"(fn f [& a] ( let [l (flatten a)]\n  (if (nil? (fnext l)) \n\t\t(first l)\n\t\t(f (cons ((fnext l) (first l) (first (nthnext l 2))) (nthnext l 3) ))\n\t\t) \n\t\t))","problem":135,"user":"4f4bd422e4b03ad3f0c10c7e"},{"problem":135,"code":"(fn p135-infix [& input]\n  (loop [[a op b & others] input]\n    (if-not (seq? others)\n      (op a b)\n      (recur (cons (op a b) others)))))","user":"543b12cce4b032a45b86932a"},{"code":"(fn opt ([x op y] (op x y))\n  ([x op y & c]\n   (apply opt (cons (opt x op y) c))))","problem":135,"user":"52ba2af3e4b07a9af57922cc"},{"problem":135,"code":"(fn [init & body]\n  (reduce (fn [res [op operand]]\n            (op res operand))\n          init\n          (partition 2 body)))","user":"561ca2eae4b064ca9f4b169b"},{"code":"(fn infix [& args]\n  (let [op (take 3 args)]\n    (if (< (count args) 3)\n      (first op)\n      (apply infix (cons (apply #(%2 %1 %3) op) (nthrest args 3)))\n    )))","problem":135,"user":"529d4f4be4b04e0c58e87b79"},{"problem":135,"code":"(fn [n & more]\n  (reduce (fn [x [op y]] (op x y)) n (partition 2 more)))","user":"55a74d46e4b09e57187da2a3"},{"code":"(fn [a & ops] (reduce (fn [t [f x]] (f t x)) a (partition 2 ops)))","problem":135,"user":"504e71cbe4b0f6ff3350c4b3"},{"problem":135,"code":"(fn infix [lhs op rhs & args]\n  (let [lhs' (op lhs rhs)]\n    (if (nil? args)\n      lhs'\n      (apply infix lhs' args))))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":135,"code":"(fn [& x]\n  (let [ops (remove number? x)\n        args (filter number? x)]\n    (loop [opList ops\n           argList args]\n      (if (empty? opList)\n        (first argList)\n        (recur (rest opList) (cons ((first opList) (first argList) (second argList)) (drop 2 argList)))))))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn f[x & xs]\n  (if (empty? xs)\n    x\n    (apply f ((first xs) x (second xs))(drop 2 xs))))","problem":135,"user":"4db2cc55535df7e46ed9b6c5"},{"code":"(fn [head & tail]\n(reduce (fn [acc [op n]] (op acc n)) head (partition 2 tail)))","problem":135,"user":"52bf0116e4b07a9af5792328"},{"code":"(fn rec-infix [ a & xs ]\n  (let [[o b] (take 2 xs)\n        xxs (drop 2 xs)]\n   (if (nil? o) a\n    (recur (o a b) xxs))))","problem":135,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn [a o b & r]\n  (if (nil? o)\n    a\n    (recur (o a b) (first r) (second r) (nnext r))))","problem":135,"user":"4f991ec1e4b0dcca54ed6cfb"},{"code":"(fn [& s]\n  (reduce #(if (number? %2) (%1 %2) (partial %2 %1)) identity s))","problem":135,"user":"4fc4eadee4b081705acca353"},{"problem":135,"code":"(fn calc [& args]\n  (let [[x op y & more] args result (op x y)]\n    (if (seq more)\n      (apply calc result more)\n      result)))","user":"534d1173e4b084c2834f4a98"},{"problem":135,"code":"(fn infix-calc \n  [& lst]\n  (loop [\n         res (first lst)\n         expre (rest lst)\n         ]\n    (if (empty? expre)\n      res\n      (cond\n        (= + (first expre))(recur (+ res (first(rest expre))) (drop 2 expre))\n        (= - (first expre)) (recur (- res (first(rest expre))) (drop 2 expre))\n        (= * (first expre)) (recur (* res (first(rest expre))) (drop 2 expre))\n        (= / (first expre)) (recur (/ res (first(rest expre))) (drop 2 expre))\n        :else (print expre)\n        )\n      )\n    )\n  )","user":"59e12c94e4b08badc2a0c509"},{"problem":135,"code":"(fn [i & x] (reduce (fn [a [f b]] (f a b)) i (partition 2 x)))","user":"5880e38fe4b0f1effa3b7625"},{"problem":135,"code":"(fn [f & r] (reduce #((first %2) % (last %2)) f (partition-all 2 r)))","user":"54187e84e4b01498b1a71a1b"},{"problem":135,"code":"(fn [start & rest]\n  (loop [result start expr rest]\n    (if (= (count expr) 0) result \n    (let [func (first expr)\n          value (nth expr 1)]\n      (recur (func result value) (nthrest expr 2))))))","user":"535943b3e4b04ce2eb3ed295"},{"code":"(fn [& exp]\n       (loop [l exp acu 0 op +]\n         (cond (nil? l) acu  \n               (number? (first l))\n               (recur (next l) (op acu (first l)) nil)\n               :else\n               (recur (next l) acu (first l))\n               )))","problem":135,"user":"4dcc5aff535d5973398f9293"},{"problem":135,"code":"(fn [head & tail]\n  (reduce \n   (fn [acc it] ((first it) acc (second it)))\n   head\n   (partition 2 tail)))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":135,"code":"#(reduce (fn [a b] ((first b) a (second b))) %1 (partition 2 %&))","user":"541d306ee4b01498b1a71a7d"},{"problem":135,"code":"(fn [ & numb]\n  (loop [answer (first numb) llist (rest numb) ]\n    (if (= (count llist) 0) answer\n      (recur ( (first llist) answer (first (rest llist))) (rest (rest llist))))))","user":"563130e4e4b0bfe05bf1178d"},{"problem":135,"code":"(fn infix \n  ([x op y] (op x y))\n  ([x op y & xs]\n    (apply infix (cons (infix x op y) xs))))","user":"5f4eb036e4b0102c75033969"},{"problem":135,"code":"(fn ([a] (first a))\n    ([a b c]\n     (b a c))\n    ([a b c d e f g]\n     (f (d (b a c) e) g))\n    ([a b c d e f g h i j k l m n o]\n     (n (l (j (h (f (d (b a c) e) g) i) k) m) o)))","user":"55484800e4b0a04f79299558"},{"problem":135,"code":"(fn[& exp](let[[x op y & r] exp](let[m (op x y)](if r (recur (cons m r)) m ))))","user":"555c6344e4b0b056612e224c"},{"problem":135,"code":"(fn infix-calc [x f y & more]\n  (if (= nil more)\n    (f x y)\n    (apply infix-calc (f x y) more)))","user":"54651faee4b01be26fd746d6"},{"code":"(fn [& x] (reduce #( (first %2) % (last %2)) (first x) (partition  2 (rest x))))","problem":135,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":135,"code":"(fn [fst & terms]\n  ((fn [acc [f o & r]]\n     (let [new-acc (f acc o)]\n     (if (empty? r)\n       new-acc\n       (recur new-acc r))))\n   fst terms))","user":"53bd7080e4b0d9a98559a6d1"},{"problem":135,"code":"(fn [& s] (loop [x (rest s), v (first s)] (if (empty? x) v (recur (rest (rest x)) (apply (first x) [v (second x)])))))","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":135,"code":"(fn calc \n  ([a] a)\n  ([a op b & r] \n   (prn \"a:\" a \"op:\" op \"r:\" r)\n   (apply calc (conj r (op a b) ))))","user":"57487084e4b009280f9f2b8c"},{"problem":135,"code":"(fn [ah & at]\n   (loop [coll at\n          acc ah]\n     (if (empty? coll) acc \n         (let [[h1 h2 & t] coll]\n           (recur t (h1 acc h2))))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"(fn pp [a op b & r] \n                  (if (= (count r) 0)\n                      (op a b)\n                      (apply pp (cons (op a b) r))\n                      )\n                   \n)","problem":135,"user":"504457c0e4b01f6c9a8b2360"},{"code":"(fn [& s] (reduce #((first %2) % (second %2)) (first s) (partition 2 (next s))))","problem":135,"user":"50b24a2fe4b03ea88043355c"},{"code":"(fn [x & xs]\n  (reduce (fn [res [f num]] (f res num))\n          x\n          (partition 2 xs)))","problem":135,"user":"4db86aee535d1e037afb2193"},{"problem":135,"code":"(fn infix\n  [n1 op n2 & args]\n  (if (empty? args)\n    (op n1 n2)\n    (apply infix (cons (op n1 n2) args))))","user":"5609d328e4b05f002753deee"},{"problem":135,"code":"(fn [& args]\n          (loop [args args]\n            (if (= 1 (count args))\n              (first args)\n              (let [[v1 f v2 & other] args]\n                (recur (cons (f v1 v2) other))))))","user":"531c6e72e4b08068f379eda0"},{"code":"(fn myfn [n1 & s1]\n\t(reduce \n    \t(fn myfn2 [x y]\n        \t(if (fn? x)\n            \t(x y)\n            \t(fn [z] (y x z))\n            )\n        ) \n     \tn1 s1\n    )\n)","problem":135,"user":"525ba7bbe4b0cb4875a45d28"},{"code":"(fn [n & more]\n  (let [result n\n        coll (partition 2 more)]\n    (reduce #((first %2) % (last %2)) result coll)))","problem":135,"user":"52be0263e4b07a9af579230e"},{"code":"#(reduce\n  (fn [a [f b]] (f a b))\n  %1\n  (partition 2 %&))","problem":135,"user":"4f7f9665e4b033992c121bea"},{"code":"(fn calc [x o y & rest] (cond (nil? rest) (o x y)\n                              :else (apply calc (conj rest (o x y)))))","problem":135,"user":"5311079de4b08068f379ece2"},{"code":"(fn [x & y]\n  [x y]\n    (loop [res x\n           ra y]\n      (if (empty? ra)\n        res\n        (recur ((first ra) res (second ra)) (rest (rest ra))))))","problem":135,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":135,"code":"(fn \n  [a & b] \n  (let [x (partition 2 b)] \n    (reduce (fn [c n] ((first n) c (second n))) a x)))","user":"57f81532e4b0d3187e900914"},{"problem":135,"code":"#((fn [ops rest] (\n    reduce (fn [a b] (\n    (first b) a (nth b 1)\n    )) \n    ((nth ops 1) (first ops) (nth ops 2)) rest\n))\n\n(take 3 %&) (partition 2 (drop 3 %&)))","user":"59a0262ee4b0871e7608b82d"},{"code":"(fn foo [x f y & z] (if z (apply foo (conj z (f x y))  ) (f x y)) )","problem":135,"user":"4e8d5edd535d65386fec2134"},{"problem":135,"code":"(fn [& args]\n  (let [[x op y & rest] args\n        v (op x y)]\n    (if (empty? rest) v (reduce #((first %2) %1 (last %2)) v (partition 2 rest)))))","user":"51bf0ccee4b013aa0d74b811"},{"problem":135,"code":"(fn [& args] (reduce (fn [a [op b]] (op a b))(first args) (partition 2 (rest args))))","user":"55f09e7be4b06e875b46ce28"},{"code":"(fn [& as]\n  (let [o (atom nil)\n        a (atom nil)]\n  (reduce #(if (fn? %2)\n              (do\n                (reset! a %1)\n                (reset! o %2))\n              (@o @a %2))\n     as)))","problem":135,"user":"502940a9e4b061fd216be4b8"},{"code":"(fn [& x]\n  (reduce #((first %2) %1 (second %2))\n    (first x) (partition-all 2 (rest x))))","problem":135,"user":"5046b003e4b011c5dfee7727"},{"code":"(fn [x & coll]\n  (loop [x x coll coll]\n    (if (empty? coll)\n      x\n      (recur ((first coll) x (second coll)) (drop 2 coll)))))","problem":135,"user":"503354c3e4b0c6c1199c710c"},{"problem":135,"code":"(fn cc [& fm]\n (let [[fir sec thi] (take 3 fm) nxt (sec fir thi)]\n     (if (= 3 (count fm)) \n         nxt\n         (apply cc (cons nxt (drop 3 fm)))\n     )\n )\n)","user":"56be8649e4b0f26550335983"},{"problem":135,"code":"(fn [x op y & args]\n  (let [total (op x y) [op n & more] args]\n    (if (empty? args)\n      total\n      (recur total op n more))))","user":"4f7207d3e4b07046d9f4f019"},{"problem":135,"code":"(fn calc [& exp]\n  (reduce (fn [v1 v2] (println v1)\n            (if (fn? v1) (v1 v2) (partial v2 v1)) )\n            exp))","user":"5bc611e3e4b07a9b28b10083"},{"problem":135,"code":"(fn [a f b & remaining]\n  (let [n (f a b)]\n    (if (nil? remaining) n\n      (recur n (first remaining) (second remaining) (next (next remaining)))\n      )\n    )\n  )","user":"564b495de4b0284900eef667"},{"problem":135,"code":"(fn [& symbols]\n  (let [operation (take 3 symbols)\n        result ((second operation) (first operation) (nth operation 2))\n        rest-of-args (drop 3 symbols)]\n    (if (.isEmpty rest-of-args)\n      result\n      (recur (cons result rest-of-args)))))","user":"54a96a15e4b09f271ff37cad"},{"problem":135,"code":"(fn infix-thing [& terms]\n  (loop [result (first terms)\n         [operator operand & other-terms] (rest terms)]\n    (if operator\n      (recur (operator result\n                       operand)\n             other-terms)\n      result)))","user":"5512aca6e4b055c2f668d4b4"},{"problem":135,"code":"(fn f \n  ([x] x)\n  ([x o y & expr]\n   (apply f (o x y) expr)))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn [& x]\n  (reduce #((first %2) % (last %2))\n          (first x)\n          (partition 2 (rest x))))","problem":135,"user":"4ead2841535d7eef3080731e"},{"problem":135,"code":"(fn infix\n  ([o f t] (f o t))\n  ([o f t & more] (apply infix (f o t) more)))","user":"53e3f7a8e4b036ad0777e408"},{"problem":135,"code":"(fn calc [& exp]\n  (reduce #(if (fn? %1) (%1 %2) \n             (partial %2 %1)) \n          identity exp))","user":"5aa4b961e4b0d174b936c888"},{"code":"(fn [x op y & more]\n  (loop [acc (op x y) more more]\n    (if (empty? more)\n      acc\n      (let [[op z & more] more]\n        (recur (op acc z) more)))))","problem":135,"user":"4fe99c8ee4b0547ebccb2467"},{"problem":135,"code":"(fn [& x]\n  (reduce #((first %2) %1 (last %2)) (first x) (partition 2 (rest x))))","user":"5aa6d44de4b0d174b936c8b2"},{"problem":135,"code":"(fn [f & r]\n  (reduce\n   #((first %2) % (last %2))\n     f (partition 2 r)))","user":"51aefceee4b09397d5109797"},{"problem":135,"code":"(fn [& coll]\n  (reduce (fn [result [op v]]\n            (op result v))\n          (first coll)\n          (partition 2 (drop 1 coll))))","user":"57822efce4b0d36ec5835e91"},{"code":"(fn [& x]\n    (loop [op nil y (rest x) ret (first x)]\n      (if (empty? y)\n        ret\n        (cond\n         (number? (first y))\n         (recur nil (rest y) (op ret (first y)))\n         :else\n         (recur (first y) (rest y) ret)))))","problem":135,"user":"4e89ff3d535d3e98b802328a"},{"code":"(fn iifx [& r]\n  (loop [a (first r) r (rest r)]\n    (if (empty? r)\n       a\n       (let [[op b & r] r]\n         (recur (op a b) r)))))","problem":135,"user":"4ee88269535d93acb0a6687f"},{"code":"(fn [& args]\r\n  ((comp first first)\r\n  (reduce\r\n    (fn [[accx accf] x]\r\n        (if (fn? x)\r\n            [accx x]\r\n            (if (nil? accf)\r\n                [(concat accx [x]) nil]\r\n                [[(apply accf (concat accx [x]))] nil])))\r\n    []\r\n    args)))","problem":135,"user":"50427899e4b0add3005c0fc2"},{"problem":135,"code":"(fn infix-calculator [& args]\n  (let [[first-operand operator second-operand] (take 3 args)\n        result (operator first-operand second-operand)]\n    (if (= (count args) 3)\n      result\n      (apply infix-calculator (cons result (drop 3 args))))))","user":"59251947e4b072a2710fce69"},{"code":"(fn i [l o r & ts] \n  (let [v (o l r)]\n    (if ts\n      (apply i (cons v ts))\n      v)))","problem":135,"user":"4fbacdbae4b081705acca2e5"},{"code":"(fn [& a]\n  (reduce \n    #((first %2) %1 (second %2)) \n    (first a) \n    (partition 2 (next a))))","problem":135,"user":"50bfd849e4b042992946c649"},{"code":"(fn [i & f] \n  (reduce \n   #((first %2) %1 (last %2)) \n   i (partition 2 f)))","problem":135,"user":"528652fbe4b0239c8a67ae14"},{"problem":135,"code":"(fn infix [o1 op o2 & r]\n   (cond \n     (nil? op) o1\n     (nil? r) (op o1 o2)\n     :else (apply infix (cons (op o1 o2) r))))","user":"5d63f1c2e4b0c9e5857d502b"},{"code":"(fn calc [l op r & rem]\n  (let [res (op l r)]\n    (if (empty? rem) \n      res\n      (apply calc res rem))))","problem":135,"user":"5125834ae4b05d10e3e395fa"},{"code":"(fn infix [x op y & more]\n  (if more\n    (apply infix (cons (op x y) more))\n    (op x y)))","problem":135,"user":"4e52d815535d302ef430da77"},{"problem":135,"code":"(fn [& xs]\n  (loop [d (next xs)\n         final (first xs)]\n    (if (seq d)\n      (recur (next (next d)) ((first d) final (second d)))\n      final)))","user":"593744abe4b02506e01a299b"},{"code":"(fn [& l] (reduce\n  #(if (fn? %1) (apply %1 (list %2)) (partial %2 %1))\nl))","problem":135,"user":"4ef48422535dced4c769f236"},{"code":"(fn infix [& args]\n  (reduce #( (nth %2 0) %1 (nth %2 1))\n          (first args)\n          (partition 2 (rest args))\n          )\n  )","problem":135,"user":"53307da1e4b019098a6f8b5e"},{"problem":135,"code":"(fn infix [ & d ]\n  (reduce #(if (fn? %2)\n             (partial %2 %1)\n             (%1 %2)) d))","user":"5ec943fde4b08d0ec38692f1"},{"problem":135,"code":"(fn [& tokens]\n  (loop [remaining tokens]\n    (if (= 1 (count remaining))\n      (first remaining)\n      (let [infix-exp (take 3 remaining)]\n        (recur (cons ((second infix-exp) (first infix-exp) (last infix-exp)) \n                     (drop 3 remaining)))))))","user":"526e1bd0e4b03e8d9a4a730b"},{"code":"(fn calc\n  ([n] n)\n  ([a op b & r] (apply calc (concat [(op a b)] r))))","problem":135,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":135,"code":"(fn foo [x1 x2 x3 & xs]\n  (let [n (x2 x1 x3)]\n    (if (empty? xs)\n      n\n      (apply foo (conj xs n)))))","user":"600ae927e4b074f607df6689"},{"code":"(fn [& tokens]\n  (loop [[f op s & r] tokens]\n    (if op\n      (recur (cons (op f s) r))\n      f)))","problem":135,"user":"4e7c8fd1535db169f9c796be"},{"code":"(fn [begin & rest] (reduce (fn [accum [f x]] (f accum x)) begin (partition 2 rest)))","problem":135,"user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn [e & es]\n  (reduce #((first %2) %1 (second %2)) \n    e (partition-all 2 es)))","problem":135,"user":"4ed7b617535d10e5ff6f52f3"},{"problem":135,"code":"(fn [& args]\n  (loop [[a f b & rst] args ]\n    (if (nil? rst)\n      (f a b)\n      (recur (apply vector (f a b) (first rst) (second rst) (drop 2 rst))))))","user":"5489dd4de4b0e286459a11ef"},{"code":"(fn infix \n  ([a] a)\n  ([a op b & r] (apply infix (op a b) r)))","problem":135,"user":"51fa7154e4b0f1313d4689da"},{"code":"(fn infix [l o r & rest]\n   (let [result (o l r)]\n     (if-not rest result (apply infix (conj rest result)))))","problem":135,"user":"508f97c0e4b0ea685a20f768"},{"code":"(fn f [x o y & r] \n  (if (empty? r) \n    (o x y) \n    (apply f (cons (o x y) r))))","problem":135,"user":"4f067029535dcb61093f6c12"},{"code":"(fn [& eq]\n  (loop [\n         total ((second eq) (first eq) (nth eq 2))\n         remain (drop 3 eq)\n         ]\n    (if (nil? (not-empty remain)) total\n      (recur\n       ((first remain) total (second remain))\n       (drop 2 remain)\n      )\n    )\n  )         \n)","problem":135,"user":"5167e4a2e4b0c5a4140a3099"},{"code":"(fn f [& r]\n  (let [[x op y & r] r]\n    (if op (apply f (op x y) r) x)))","problem":135,"user":"4e50b67b535dc968683fc4ed"},{"code":"(fn infix [a op b & rest]\n  (if rest\n    (apply infix (op a b) rest)\n    (op a b)))","problem":135,"user":"533f09e1e4b085b17e897d9a"},{"problem":135,"code":"(fn i [& args] (if (= 1 (count args))\n                   (first args)\n                   (apply i (conj (drop 3 args) ((second args) (first args) (nth args 2))))\n                  ))","user":"53a739b0e4b0ef122a8689d0"},{"code":"(fn [number & expressions]\n  (if (empty? expressions)\n    number\n    (let [operator (first expressions)\n          operand (second expressions)]\n      (recur (operator number operand) (next (next expressions))))))","problem":135,"user":"4f951375e4b0dcca54ed6cc8"},{"code":"(fn f[a op b & args]\n  (if (empty? args) \n    (op a b)\n    (apply f (op a b) args)))","problem":135,"user":"4db13ff51254ad5b4805fa68"},{"problem":135,"code":"(fn calc [& args]\n  (reduce (fn [a [op b]] (op a b)) (first args) (partition 2 (rest args)))\n)","user":"4eeb8f68535d93acb0a668a9"},{"code":"(fn infix [a b c & rest]\n   (if (empty? rest) (b a c)\n       (apply infix (cons (b a c) rest))))","problem":135,"user":"4e89f46c535d3e98b8023288"},{"problem":135,"code":"#(reduce \n  (fn [r [op v]] (op r v))\n  (first %&)\n  (partition 2 (rest %&)))","user":"55216aa5e4b0882d96d09192"},{"code":"(fn inFixCalculator [& many] (loop [x (apply list many)] (if (= (count x) 1) (first x) \n(recur (conj (-> x rest rest rest) ((nth x 1) (first x) (nth x 2)))))))","problem":135,"user":"4f9336ece4b0dcca54ed6cb7"},{"problem":135,"code":"(fn [& args]\n    (loop [lst args]\n        (if (= 1 (count lst))\n            (first lst)\n            (recur (cons ((second lst) (first lst) (nth lst 2))\n                         (rest (rest (rest lst))))))))","user":"5f77890ae4b02876ed9fd0b9"},{"code":"(fn [f & more]\n  (reduce #((first %2) %1 (last %2)) f\n      (partition 2 more)))","problem":135,"user":"52b02329e4b0c58976d9acc5"},{"problem":135,"code":"(fn [& exprs]\n  (loop [[lhs op rhs & rest] exprs]\n    (if (empty? rest)\n      (op lhs rhs)\n      (recur (conj rest (op lhs rhs))))))","user":"5685e9fde4b04eec3ec5cfd1"},{"problem":135,"code":"(fn calc \n  [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"57f8153de4b0d3187e900916"},{"problem":135,"code":"(fn f [acc & args] \n    (if (empty? args)\n      acc\n      (apply f ((first args) acc (second args)) (drop 2 args))))","user":"59a0286be4b0871e7608b82f"},{"problem":135,"code":"(fn [& fs]\n  (let [ops  (filter fn? fs)\n        nums (filter (complement fn?) fs)]\n\n    (loop [r (first nums)\n           op ops\n           num (next nums)]\n      (if (first op)\n        (recur ((first op) r (first num)) (next op) (next num))\n        r))))","user":"5a66f358e4b0512ff01cd9d5"},{"problem":135,"code":"(fn c [& [p1 s p2 & l]]\n   (if s\n     (apply c (conj l (s p1 p2)))\n     p1))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":135,"code":"(fn infix-calc [& coll]\n  (let [base (first coll)\n        commands (rest coll)]\n    (reduce (fn [acc [op arg]]\n              (op acc arg))\n            base\n            (partition-all 2 commands))))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":135,"code":"(fn [& [fst & rst]]\n    (reduce (fn [acc [f v]] (f acc v))\n            fst\n            (partition-all 2 rst)))","user":"532f8569e4b019098a6f8b4f"},{"problem":135,"code":"(fn [number operator & args]\n  (loop [n number\n         op operator\n         others args]\n    (if (<= (count others) 1)\n      (op n (first others))\n      (recur (op n (first others)) (second others) (rest (rest others))))))","user":"542c026ae4b0dad94371f29a"},{"code":"(fn [& args]\n         (reduce (fn [acc [op el]] (op acc el))\n                 (first args)\n                 (partition 2 (rest args))))","problem":135,"user":"4f1bb9d8535d64f60314647d"},{"code":"(fn infix [& a]\n  (loop [f +, t 0, c a]\n    (if-let [x (first c)]\n      (let [y (next c)]\n        (if (fn? x)\n          (recur x t y)\n          (recur f (f t x) y)))\n      t)))","problem":135,"user":"4ecbb249535df97575fdabdf"},{"code":"(fn [& args] ((fn inf [s l] (if (empty? l) s\n                          (inf ((first l) s (second l)) (drop 2 l))))  (first args) (rest args)))","problem":135,"user":"51bf4560e4b013aa0d74b817"},{"problem":135,"code":"(fn [& args] (let [[a op b & oth] args]\n                   (if (= nil oth)\n                       (op a b)\n                       (recur (cons (op a b) oth))  )))","user":"6074df6fe4b069485764de4b"},{"problem":135,"code":"(fn calc [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1))\n          identity exp))","user":"5a9cdec0e4b0d174b936c7e1"},{"problem":135,"code":"(fn [& args]\n        (:acc\n         (reduce (fn [m x]\n                  (println \"args: m =\" m \"| x =\" x)\n                  (let [m (if-not m {:acc nil\n                                     :op nil}\n                                  m)]\n                    (if (fn? x)\n                      (assoc m :op x)\n                      (if (nil? (:acc m))\n                        (assoc m :acc x)\n                        (assoc m :acc ((:op m) (:acc m) x))))))\n                nil args)))","user":"5a5d0726e4b0512ff01cd91b"},{"code":"(fn [& more] (apply (fn a ([x] x) ([x f & xs] (f (apply a xs) x))) (reverse more)))","problem":135,"user":"4fb1325de4b081705acca276"},{"code":"(fn [a b c & d] \n  (loop [r (b a c) d d] \n    (if (empty? d) r (recur ((first d) r (second d)) (rest (rest d))))))","problem":135,"user":"5235a902e4b0a643f2dcb750"},{"problem":135,"code":"(fn [& ex] (reduce (fn [a [o v]] (o a v)) (first ex) (partition 2 (rest ex))))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":135,"code":"(fn [& args] \n    (let [ops {(type +) + (type -) - (type *) * (type /) /}] \n      (:res (reduce \n              #(if (= java.lang.Long (type %2)) \n                (assoc %1 :res ((get ops (type (:last %1))) (:res %1) %2)) \n                (assoc %1 :last %2)) \n              {:res 0 :last +} args))))","user":"577829f9e4b0979f8965165a"},{"problem":135,"code":"(fn [& xs]\n  (loop [bits (rest xs) result (first xs)]\n    (if (empty? bits) result\n      (recur (drop 2 bits) ((first bits) result (second bits))))))","user":"52cf1e25e4b07d0d72b2739c"},{"code":"(fn [& args]\n  (reduce\n    (fn [a b]\n      ((first b) a (second b)))\n    ((second args) (first args) (nth args 2))\n    (partition 2 (drop 3 args))))","problem":135,"user":"4daf4d2fedd6309eace4d178"},{"code":"(fn infix [& args]\n                     (if (= (count args) 1) args\n                      (if (= (count args) 3) ((second args) (first args) (last args))\n                      (apply infix (cons ((second args) (first args) (nth args 2)) (drop 3 args))))))","problem":135,"user":"4fbd12a5e4b081705acca2fd"},{"problem":135,"code":"(fn [& xs] (reduce (fn [y z] ((first z) y (last z))) (first xs) (partition 2 (rest xs))))","user":"5b7bc82ce4b047b03b203726"},{"problem":135,"code":"(fn infix [x op y & zs]\n  (cond\n   (empty? zs) (op x y)\n   :else (apply infix (op x y) zs)))","user":"5da7176ae4b000c986472c13"},{"code":"(fn infix-calculator [& infixes]\n  (if (= (count infixes) 1)\n    (first infixes)\n    (let [[x operator y & others] infixes]\n      (recur (cons (operator x y) others))\n    )\n  )\n)","problem":135,"user":"4faa6184e4b081705acca1f1"},{"problem":135,"code":"(fn [& symbols]\n  (loop [[arg1 & args] symbols]\n    (if-not\n        args arg1\n        (let [[op & rest] args\n              [arg2 & rest] rest\n              next-arg (op arg1 arg2)]\n          (recur (concat [next-arg] rest))))))","user":"57d82295e4b0bd073c2023e6"},{"problem":135,"code":"(fn e [f & exp]\n  (loop [exp exp, res f]\n    (if (seq exp)\n      (recur (rest (rest exp)) ((first exp) res (second exp)))\n      res)))","user":"5a7ae674e4b03baeef9276d5"},{"problem":135,"code":"(fn [x & ret] \n   (loop [full ret \n           sum x]\n     (if (empty? full)\n       sum \n       (recur (drop 2 full)\n              ((first full) sum (second full))))))","user":"55c77070e4b0e31453f649d0"},{"code":"(fn [& x]\n   ((fn inf [x]\n      (if (= 1 (count x))\n         (first x)\n         (let [[arg1 operator arg2] (take 3 x) ]\n            (inf (cons (operator arg1 arg2) (drop 3 x)))\n         )\n      )\n) x)\n   )","problem":135,"user":"4f4aa932e4b0d56e7bb92c14"},{"code":"(fn calc[& col] \n  (reduce \n     (fn[acc el] ((first el) acc (last el)))\n     0 \n     (partition 2 (cons + col))\n   )\n)","problem":135,"user":"5307e4ece4b02e82168697a9"},{"code":"(fn [& lst]\n  (reduce #(if (fn? %2) (partial %2 %1) (%1 %2)) (partial + 0) lst )\n)","problem":135,"user":"5124619ae4b02c3f2a072ccd"},{"code":"#(reduce (fn [a [f b]] (f a b)) 0 (partition 2 (cons + %&)))","problem":135,"user":"517bc969e4b07ef0e56148d0"},{"problem":135,"code":"#(loop [a %\n        s %&\n        f 0]\n   (if s\n     (if (instance? Number (first s))\n       (recur (f a (first s)) (next s) f)\n       (recur a (next s) (first s)))\n     a))","user":"52d9ba39e4b09f7907dd13af"},{"problem":135,"code":"(fn infix [& args]\n(reduce (fn [a [op b]] (op a b))\n(first args)\n(partition 2 (rest args))))","user":"54d75e4ce4b0a52adc2e202a"},{"code":"(fn [& exs]\n  (reduce #((first %2) % (second %2))\n    (first exs)\n    (partition 2 (rest exs))))","problem":135,"user":"4f38b7d9e4b0e243712b1ee0"},{"code":"(fn calc\n  ([a] a)\n  ([a op b & r] (apply calc (op a b) r)))","problem":135,"user":"4e6a4950535d8ccf87e9febf"},{"problem":135,"code":"(fn infix\n  ([a]\n   a)\n  ([a f b & c]\n   (apply infix (f a b) c)))","user":"57bd960fe4b05aa3c4741c52"},{"problem":135,"code":"(fn [& args] \n   (loop [ret (first args) s (rest args)]\n     (if (empty? s)  ret\n         (recur  ((first s)  ret (second s)) \n                (rest (rest s))) )))","user":"572ac718e4b0f4d77e651242"},{"problem":135,"code":"(fn [& s]\n  (reduce (fn [acc elem] ((first elem) acc (second elem)))\n          (first s)\n          (partition 2 (rest s))))","user":"5fef4292e4b05ac5b16ea1d7"},{"problem":135,"code":"#(reduce (fn [acc [op rnd]]\n              (`~op acc rnd)) \n         % (partition 2 %&))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn infix-calc [& other]\n  (loop [left (rest other) rst (first other)]\n    (if (empty? left) rst\n  (recur (drop 2 left) ((first left) rst (second left))))))","problem":135,"user":"4e7d1c22535db169f9c796c5"},{"problem":135,"code":"(fn [& x]\n  (loop [res (first x)\n         remaining (rest x)]\n    (if (empty? remaining)\n      res\n      (let [op (first remaining)\n            next (second remaining)]\n        (recur (op res next) (rest (rest remaining)))))))","user":"53322cece4b019098a6f8b73"},{"problem":135,"code":"(fn ifx\n ([a] a)\n ([a o b & rest] (apply ifx (o a b) rest))\n)","user":"54a854f5e4b09f271ff37ca2"},{"code":"(fn [a op b & xs]\n  (if (= 0 (count xs)) (op a b) \n    (recur (op a b) (first xs) (nth xs 1) (drop 2 xs))))","problem":135,"user":"4f12ab23535d64f603146429"},{"code":"(fn [v & a]\n  (if (nil? a)\n    v\n    (recur ((first a) v (second a)) (nnext a))))","problem":135,"user":"5117c31ee4b0e0897831a60c"},{"code":"(fn [v & more] (reduce (fn [res [f v]] (f res v)) v (partition 2 more)))","problem":135,"user":"4f702dcae4b07046d9f4eff4"},{"problem":135,"code":"(fn [& args] \n  (reduce (fn [acc [op val]] \n              (op acc val)) \n            (first args)\n            (partition 2 (rest args))\n  )\n)","user":"52f9c68ce4b047fd55836fef"},{"code":"(fn infix [ & args]\n  (reduce (fn [a [op b]] (op a b))\n    (first args)\n          (partition 2 (rest args))))","problem":135,"user":"4ef2eb4d535dced4c769f226"},{"problem":135,"code":"(fn calc [s & rest]\n  (reduce  (fn [a b] ((first b) a (second b))) s (partition 2 rest))\n  )","user":"56ebe773e4b04a395b9a042a"},{"code":"(fn [x & xs] (reduce (fn [a [o v]] (o a v))\n                      (cons x (partition 2 2 xs))))","problem":135,"user":"504f865ee4b0a02f9cffde90"},{"code":"#(loop [[a o x & r] %&]\n    (if o\n       (recur (cons (o a x) r))\n       a))","problem":135,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":135,"code":"(fn [& v]\n  (loop [n (first v) op (second v) v (nnext v)]\n    (if (empty? (rest v))\n      (op n (first v))\n      (recur (op n (first v)) (second v) (nnext v)))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":135,"code":"(fn [o & s] (reduce \n  #((first %2) % (second %2))\n  o (partition 2 s)))","user":"53572176e4b04ce2eb3ed276"},{"code":"(fn [x & xs]                                                                                                                                                                                   \n  (reduce (fn [accu [op n]] (op accu n)) \n    x (partition 2 xs)))","problem":135,"user":"4eca7a87535d6d7199dd3705"},{"code":"(fn c [& [a f b & r]] (if f (apply c (cons (f a b) r)) a))","problem":135,"user":"4db8f6c4535d1e037afb219e"},{"code":"(fn infix\n  ([a] a)\n  ([a op b & r] (apply infix (op a b) r)))","problem":135,"user":"4f05ea25535dcb61093f6c02"},{"problem":135,"code":"(fn [n & a]\n\t(loop [value n args a f (fn [x] x)]\n      (if (empty? args) (f value)\n     \t(recur (-> args rest first) (-> args rest rest) #((first args) (f value) %1))\n      )\n    )  \n)","user":"5ff4e28ae4b06df49cee1486"},{"problem":135,"code":"(fn my-infix\n  [& ns]\n  (reduce\n    (fn [a b] (if (fn? b)\n                (partial b a)\n                (a b)))\n    (first ns)\n    (rest ns)))","user":"583166c1e4b051871117c025"},{"problem":135,"code":"(fn infix-c [& args]\n  (loop [result (first args) acc (rest args) ]\n    (if (empty? acc)\n      result\n      (recur ((first acc) result (first (rest acc))) (rest (rest acc)))))\n)","user":"575ebba3e4b08062f99a4e70"},{"problem":135,"code":"(fn math [x & tokens]\n\n  (if (empty? tokens) x\n  (recur ((first tokens) x (second tokens)) (rest (rest tokens))\n         )))","user":"5a05a807e4b01bb0ae8afdb8"},{"problem":135,"code":"(fn [& exp]\n  (reduce\n   (fn [x y]\n     (if (fn? x)\n       (x y)\n       (partial y x)))\n   (partial + 0)\n   exp))","user":"55ac07afe4b03311e7b7328f"},{"code":"(fn infix \n  ([x op y] (op x y))\n  ([x op y & xs] (apply infix (op x y) xs)))","problem":135,"user":"50eafeaae4b0346a3e988cbb"},{"code":"(fn [& o]\n  (loop [[x f y & xs] o]\n    (let [a (f x y)]\n      (if (empty? xs) a\n        (recur (cons a xs))))))","problem":135,"user":"4daf907aedd6309eace4d17b"},{"code":"(fn [& MOAR] \n      (reduce (fn ([arg1 p90X] (let [vec-9000 p90X \n                                       f (nth vec-9000 0 nil) \n                                       arg2 (nth vec-9000 1 nil)] (f arg1 arg2)))) \n              (first MOAR) (partition 2 (rest MOAR))))","problem":135,"user":"50e1bdd8e4b019fc399ce17f"},{"code":"(fn infix\n  ([v1 f v2] (f v1 v2))\n  ([v1 f v2 & more] (apply infix (f v1 v2) more)))","problem":135,"user":"510d9d61e4b078ea71921141"},{"code":"(fn infix-it [& args]\n  (cond\n    (<= (count args) 1) (first args)\n    (= (count args) 3) ((nth args 1) (first args) (nth args 2))\n    true (let [\n               op (nth args 1)\n               x (first args)\n               y (nth args 2)\n               newargs (cons (op x y) (drop 3 args))]\n           (apply infix-it newargs))))","problem":135,"user":"4f697a66e4b07046d9f4ef8a"},{"problem":135,"code":"(fn [init & args] \n   (reduce #((first %2)%1 (second %2)) \n           init \n           (map #(list (first %) (second %)) \n                (partition 2 args))))","user":"573107d5e4b0cd1946bd0fbc"},{"problem":135,"code":"(fn [init & args] (reduce (fn [result [op n]] (op result n)) init (partition 2 args)))","user":"57f8ba80e4b0d3187e90092f"},{"code":"(fn [x & xs]\n  (letfn \n    [(mycalc \n      [nu l] \n      (if (empty? l) nu\n        (mycalc ((first l) nu (second l)) (rest (rest l)))\n        ))]\n    (mycalc x (vec xs))\n    ))","problem":135,"user":"52faec2ee4b047fd55837004"},{"problem":135,"code":"(fn [& data]\n  (loop [[fnumber operator snumber _ :as d] data\n         ]\n    (if (= 3 (count d))\n      (operator fnumber snumber)\n      (recur (cons (operator fnumber snumber) (drop 3 d))\n             ))))","user":"5e860270e4b09a7a73c8bbdb"},{"problem":135,"code":"(fn infix [& b]\n  (loop [n b res (first n)]\n    (if (empty? n)\n      res\n      (if (not (number? (first n)))\n        (recur (rest n) ((first n) res (second n)))\n        (recur (rest n) res)))))","user":"5a9482b7e4b0d174b936c737"},{"code":"(fn [r & args] (reduce #((first %2) %1 (last %2)) r (partition 2 args)))","problem":135,"user":"52b577c9e4b0c58976d9ad39"},{"problem":135,"code":"(fn [& args]\n  (loop [result (first args) proc nil rest-of (rest args)]                 \n    (if (empty? rest-of)\n        result\n        (if (contains?  #{+ - * /} (first rest-of))\n          (recur result (first rest-of) (rest rest-of))\n          (recur (proc result (first rest-of)) nil (rest rest-of))))))","user":"59156f0be4b0163c97b36f3d"},{"code":"(fn [x & args]\n  (reduce #((first %2) %1 (second %2)) x (partition 2 args)))","problem":135,"user":"51227a00e4b068a9582e656b"},{"code":"(fn [x & more]\n  (reduce (fn [y [op z]] (op y z)) x (partition 2 more)))","problem":135,"user":"52cca65be4b07d0d72b2736b"},{"code":"(fn compute-infix-term [& args]\n  (letfn [(nthlast [coll idx]\n           (nth (reverse coll) idx))]\n  (if (> (count args) 1)\n    (let [outmost-op (nthlast args 1)\n          second-arg (last args)]\n         (outmost-op (apply compute-infix-term (drop-last 2 args)) second-arg))\n    (first args))))","problem":135,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":135,"code":"#(reduce (fn [x y] ((first y) x (last y))) % (partition 2 %&))","user":"56fdd9a1e4b08d47c97781a8"},{"problem":135,"code":"(fn infix [& [fst & rst]]\n  (reduce (fn [acc [func num]] (func acc num)) fst (partition 2 rst)))","user":"54f09599e4b024c67c0cf89d"},{"problem":135,"code":"(fn calc [p1 & p]  (loop [lp p res p1 op (first lp)] (if (empty? lp) res (recur (rest (rest lp)) (op res (first (rest lp))) (first (rest (rest lp)))))))","user":"53347274e4b0656e627bfd6b"},{"code":"(fn infix [& args]\n  (let [fc (fn [[a f b & more] acc]\n\t\t\t           (let [calc (f a b)]\n\t\t\t\t           (if (empty? more)\n\t\t\t\t             calc\n\t\t\t\t             (recur (cons calc more) calc))))]\n    (fc args 0)))","problem":135,"user":"4db045b5838c48654951d9be"},{"problem":135,"code":"(fn [h & t]\n  (reduce \n   (fn [r [o b]] (o r b))\n   h\n   (partition 2 t)))","user":"503e91d4e4b06c4e0e1fa269"},{"problem":135,"code":"(fn ifx [x y z & more]\n  \t(if-let [a (seq more)] (apply ifx (cons (y x z) a)) (y x z)))","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(letfn [(f [a & l]\n  (if (empty? l)\n    a\n    (apply f ((first l)\n              a (second l))\n           (rest (rest l)))))]\n  f)","problem":135,"user":"50b668dde4b08fb537db98f2"},{"problem":135,"code":"(fn simple-math ([n] n) ([n o m] (o n m)) ([n o m & more-args] (apply simple-math (cons (o n m) more-args))))","user":"56dc3dbbe4b0ea9b8538f81a"},{"problem":135,"code":"(fn infix\n  [& args]\n  (loop [[f y & others] args stack '()]\n    (if f\n      (cond\n       (fn? f) (let [stack (->> (f (peek stack) y)\n                                (conj stack))]\n                 (recur others stack))\n       :else (recur (conj others y) (conj stack f)))\n      (peek stack))))","user":"53d28800e4b00fb29b22131e"},{"problem":135,"code":"(fn [operand operator & expr]\n  (let [result (operator operand (first expr))\n        expr (rest expr)]\n\t(if (not (empty? expr))\n        (recur result (first expr) (rest expr))\n        result)))","user":"597f8c93e4b0dbe32238d0c1"},{"problem":135,"code":"(fn nfx\n  ([x f y] (f x y))\n  ([x f y & more]\n   (apply nfx (conj more (f x y)))))","user":"563cf9e5e4b0bfe05bf11844"},{"problem":135,"code":"(fn ifc\n   ([x] x)\n   ([x y z]  (y x z))\n   ([x y z & more] (apply \n                     ifc \n                     ((first more) (ifc x y z) (second more)) \n                     (rest (rest more))\n                     )))","user":"55f8b32ae4b03cbcff9738ba"},{"code":"(fn c [ & a ]\r\n  (loop [iv (first a)\r\n         l (rest a)]\r\n    (if ( empty? l)\r\n      iv\r\n      (recur (apply (first l) [iv (second l)]) (drop 2 l ) )\r\n      )\r\n    )\r\n  )","problem":135,"user":"4febb4dae4b0681fd128dc98"},{"problem":135,"code":"#(apply (fn ev\n  ([a] a)\n  ([a o & b]\n   (o (apply ev b) a))) (reverse %&))","user":"52e16face4b09f7907dd1421"},{"code":"(fn calc [& args]\n  (loop [acc (nth args 0)\n         b (nth args 2)\n         op (nth args 1)\n         others (drop 3 args)]\n    (if (empty? others)\n      (op acc b)\n      (recur (op acc b)\n             (nth others 1)\n             (nth others 0)\n             (drop 2 others)))))","problem":135,"user":"4ff769bce4b0678c553fc38f"},{"code":"(fn [x op y & rest] \n  (let [res (op x y)]\n    (if (empty? rest)\n      res\n      (recur res (first rest) (second rest) (nnext rest)))))","problem":135,"user":"4ed55b5d535d10e5ff6f52d8"},{"problem":135,"code":"(fn infix-calc [& args]\n  ((fn inner-infix-calc [[operand1 operator operand2 & more]]\n    (let [result (operator operand1 operand2)] \n      (if more\n          (recur (conj more result))\n          result)))\n   args))","user":"57e9a77ae4b0bfb2137f5b35"},{"code":"(fn infix-calculator [& more]\r\n  (reduce (fn [x [f y]] (f x y))\r\n          (first more)\r\n          (partition 2 (rest more))))","problem":135,"user":"4dd7d040535d2dad7130b5d6"},{"problem":135,"code":"(fn [& c] (reduce (fn[a [o e]] (o a e)) (first c) (partition 2 (rest c))))","user":"4f1ef6a0535d64f60314649b"},{"code":"(fn f [& [t1 op t2 & args]]\n           (let [res (op t1 t2)]\n             (if (seq args)\n                 (apply f res args)\n               res)))","problem":135,"user":"4e4be570535dc968683fc4d8"},{"code":"(fn[& args]\n((fn do-ops[lst]\n   (let[a (nth lst 0) op (nth lst 1) b (nth lst 2) rlst (rest (rest (rest lst)))]\n     (let[res (op a b)]\n       (if (empty? rlst) res\n           (do-ops (cons res rlst)))))) args))","problem":135,"user":"4fb86dc9e4b081705acca2d8"},{"code":"(fn [x & more]\n  (reduce (fn[a coll]\n            ((first coll) a (second coll))) x \n          (partition 2 more)))","problem":135,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"problem":135,"code":"(fn [h & t]\n    (reduce (fn [a b]\n      (let [[i v] (vec b)]\n       (i a v))) h (partition-all 2 t)))","user":"548b7db8e4b0e286459a11fd"},{"problem":135,"code":"(fn [& args]\n  (letfn [(inner [total [x1 x2 & xs]]\n                 (cond\n                   (nil? x1) total\n                   (number? x1) (inner x1 (cons x2 xs))\n                   :else        (inner (x1 total x2) xs)))]\n    (inner 0 args)))","user":"518ba795e4b0f028e99addf0"},{"problem":135,"code":"(fn calc\n  ([value] value)\n  ([a f b & remainder] (apply calc (f a b) remainder)))","user":"591f63e6e4b09b4ee5954c47"},{"code":"(fn [& p]\r\n  (loop [a (rest p) b (first p)]\r\n    (if (empty? a)\r\n      b\r\n    (recur (rest (rest a)) \r\n           ((first a) b (second a))))))","problem":135,"user":"4fd8544be4b0dab7d829f390"},{"problem":135,"code":"(fn[& l]\n  (reduce \n   \t(fn[a [x y]]\n      (x a y))\n   \t(first l)\n   \t(partition 2 (rest l))))","user":"57b9fc74e4b0fbc9809a27fb"},{"problem":135,"code":"(fn [x & other]\n    (reduce (fn [a [op x]] (op a x)) x (partition 2 other)))","user":"4e8a170c535d3e98b802328f"},{"problem":135,"code":"(fn [op1 & expr]\n  (reduce (fn [op1 [f op2]] (f op1 op2)) op1 (partition 2 expr)))","user":"5eb1c786e4b00a66d4a95201"},{"problem":135,"code":"(fn [& params]\n  (loop [s (rest params) v (first params)]\n    (if (empty? s)\n      v\n      (recur (drop 2 s) ((first s) v (second s))))))","user":"58ca613de4b021aa9917edb7"},{"problem":135,"code":"(fn ss [num & values] (loop [remaining values final num] \n  (if (empty? remaining)\n    final\n    (let [two (take 2 remaining)\n          op (first two)\n          val (last two)\n          dps (drop 2 remaining)         \n          ]\n        (recur dps\n             (op final val))))))","user":"57b35ecbe4b0fbc9809a277e"},{"problem":135,"code":"(fn p [x op y & in]\n  (if (empty? in)\n    (op x y)\n    (apply p (cons (op x y) in))))","user":"53664e3be4b0243289761e74"},{"problem":135,"code":"(fn \n  ([x f y] (f x y))\n  ([x f y f2 z f3 w] (f3 (f2 (f x y) z) w))\n  ([x f y f2 z f3 w f4 a f5 b f6 c f7 d] (f7 (f6 (f5 (f4 (f3 (f2 (f x y) z) w) a) b) c) d))\n  )","user":"568ad3c1e4b0dcc4269f4096"},{"problem":135,"code":"(fn solve [op1 fun op2 & args]\n  (if (empty? args)\n    (fun op1 op2)\n    (recur (fun op1 op2) (first args) (nth args 1) (nnext args) ) ))","user":"57ffe094e4b0a837a8b30c2c"},{"problem":135,"code":"(fn [head & params]\n  (reduce\n    (fn [result [operator x]]\n      (if (nil? operator)\n        result\n        (operator result x)))\n    head\n    (partition 2 params)))","user":"5989e080e4b021a7a535fed6"},{"code":"(fn [init & exprs]\n    (reduce (fn [sub [op val]] (op sub val)) init (partition 2 exprs)))","problem":135,"user":"4fe9ea87e4b0547ebccb2476"},{"code":"(fn [& col] (get (reduce (fn [a b] (if (= (type b) java.lang.Long) (assoc a :sum ((get a :op) (get a :sum) b)) (assoc a :op b))) {:sum 0 :op +\n} col) :sum))","problem":135,"user":"52c1bd29e4b07a9af579236a"},{"problem":135,"code":"(fn [& expr]\n  (if (empty? (next expr))\n    (first expr)\n    (let [[a op b & cs] expr]\n      (recur (cons (op a b) cs)))))","user":"5895477fe4b00487982d527c"},{"problem":135,"code":"(fn [head & ops]\n  (reduce (fn [res [op val]] (op res val)) \n          head\n          (partition 2 ops)))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn this ( [a op v & rst] (apply this (op a v) rst )) ([b] b))","problem":135,"user":"53a5bc3ae4b0ef122a8689c3"},{"problem":135,"code":"(fn [x & xs]\n  ((fn f [[op m & ms] t]\n     (if (empty? ms)\n       (op t m)\n       (f ms (op t m)))) xs x))","user":"56483562e4b0284900eef629"},{"problem":135,"code":"(fn [& ls]\n  ((fn c-iter [acum l]\n     (if (empty? l) acum\n                    (c-iter ((first l) acum (second l) ) (drop 2 l)))) (first ls) (rest ls)) )","user":"54f8b6f4e4b01ecee9d8882c"},{"code":"(fn left-to-right [& symbols] (reduce #((first %2) %1 (second %2)) (first symbols) (partition 2 (rest symbols))))","problem":135,"user":"52a62e16e4b0c58976d9abf9"},{"problem":135,"code":"(fn [& e]\n   (reduce #((first %2) % (second %2)) (first e) (partition 2 (rest e))))","user":"53ea5307e4b036ad0777e4e2"},{"code":"(fn f \n  ([a] a)\n  ([a b c & d] \n    (apply f (apply b [a c]) d)))","problem":135,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":135,"code":"(fn [x & y] (reduce (fn [acc pair] (let [[op v] pair] (op acc v))) x (partition 2 y)))","user":"5839f079e4b089d5ab817d48"},{"problem":135,"code":";;(fn infix-cal[& exp] (reduce (fn[ x[op y]] (op x y)) (first exp) (partition 2 (rest exp))  ))\n\n(fn infix-cal[& exp] (reduce #((first %2) %1 (last %2)) (first exp) (partition 2 (rest exp))  ))","user":"5cf53196e4b087f62be35a94"},{"problem":135,"code":"(fn [arg1 op arg2 & args]\n  (loop [arg1 arg1\n         op op\n         arg2 arg2\n         args args]\n    (if (empty? args)\n      (op arg1 arg2)\n      (recur (op arg1 arg2) (first (take 2 args)) (second (take 2 args)) (drop 2 args))\n      )\n  )\n)","user":"5b3251c1e4b025bcb146f317"},{"problem":135,"code":"(fn math [a op b & args] (let [res (op a b)] (if args (apply math res args) res)))","user":"55306f9de4b076ab5578f814"},{"problem":135,"code":"(fn [& args]\n   (reduce \n     (fn [acc [f n]] (f acc n))\n     (first args)\n     (partition 2 (rest args))))","user":"5630ce72e4b0bfe05bf11786"},{"code":"(fn [x & xs]\r\n  (reduce #((first %2) %1 (last %2)) x (partition 2 2 xs)))","problem":135,"user":"4f07c8c3535dcb61093f6c2d"},{"code":"(fn i [x op y & r]\n  (if r\n    (apply i (op x y) r)\n    (op x y)))","problem":135,"user":"4e7dd982535db169f9c796ee"},{"problem":135,"code":"(fn\n  [fst & all]\n  (loop [tot fst remainder all]\n    (if (empty? remainder)\n      tot\n      (let [op (first remainder)\n            val (second remainder)\n            whatsleft (rest (rest remainder))]\n        (recur (op tot val) whatsleft)))))","user":"56d4b1aee4b0ea9b8538f7ba"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [a [op b]] (op a b))\n  (first args)\n  (partition 2 (rest args)))\n  )","user":"54026d7de4b0df28a13c62cf"},{"code":"(fn [& args]\r\n  (loop [res (first args), ops (rest args)]\r\n    (if (empty? ops) res\r\n      (recur\r\n        ((first ops) res (second ops))\r\n        (drop 2 ops)))))","problem":135,"user":"4e994541535dbda64a6f6b64"},{"problem":135,"code":"(fn [& args] \n  (reduce (fn [a [op b]] (op a b)) (first args) (partition 2 (rest args))))","user":"576186a5e4b0994c1922fb8e"},{"code":"; not mine :(\r\n(fn [x & s]\r\n  (reduce (fn [a b] ((first b) a (last b)))\r\n          x \r\n          (partition 2 s)))","problem":135,"user":"50576483e4b001218172198b"},{"code":"(fn [& args] ( (fn rec [n arr] (if (empty? arr) n (rec ((first arr) n (nth arr 1 )) (nthnext arr 2))))  (first args) (next args)))","problem":135,"user":"50ef3e5de4b0a78662fa2652"},{"problem":135,"code":"(fn [& ls]\n    (reduce (fn [acc [op x]] (op acc x)) (first ls) (partition 2 2 (rest ls))))","user":"5fe1b893e4b05ac5b16ea16f"},{"code":"(fn[& syms]\n  (let [[x & xs] syms]\n    (reduce #((first %2) %1 (second %2)) x (partition 2 xs))))","problem":135,"user":"50ef96a1e4b0bdaecbb47d9d"},{"problem":135,"code":"(fn [& a]\n    (if (= 1 (count a))\n      (first a)\n      (recur (cons (apply (second a) (list (first a) (nth a 2))) (nthnext a 3)))))","user":"549cd548e4b0f3d1d8e70f91"},{"code":"(fn [& s]\n  (loop [[left op right & rest] s]\n    (if (nil? op)\n      left\n      (recur (cons (op left right) rest)))))","problem":135,"user":"53070615e4b02e821686979e"},{"code":"(fn c [& x]\n  (let [y ((nth x 1) (nth x 0) (nth x 2))]\n    (if (= 3 (count x))\n      y\n      (apply c y (drop 3 x)))))","problem":135,"user":"507ef25ce4b0f753b6f9788e"},{"code":"(fn infix \n  ([x op y] (op x y))\n  ([x op y & xs]\n   (apply infix (cons (infix x op y)\n                xs))))\n\n;#(loop [coll %& result %1]\n;   (if (empty? coll)\n;     result\n;     (recur (drop 2 coll) ((first coll) result (second coll)))))","problem":135,"user":"518ccf6be4b05e6c8537e386"},{"code":"(fn foo [& args]                                                                                                                   \n            (if (= 1 (count args)) (first args)                                                                                            \n                (let [ [ a op b & res] args ]                                                                                              \n                     (recur (cons  ( op a b) res)))))","problem":135,"user":"4eed6b32535d93acb0a668bc"},{"problem":135,"code":"#(reduce (fn [acc arg]\n            (if (fn? arg)\n              (partial arg acc)\n              (acc arg)))\n          %&)","user":"541709b0e4b01498b1a71a06"},{"problem":135,"code":"(fn foo [& args]\n        (loop [num_col (filter number? args)\n               func_col (conj (filter (complement number?) args) +)\n               res 0]\n          (if (not (empty? num_col))\n            (recur\n              (rest num_col)\n              (rest func_col)\n              ((first func_col) res (first num_col)))\n            res)))","user":"5cea925ce4b0a17bb84e2bd2"},{"code":"#(reduce (fn [lhs [op rhs]] (op lhs rhs))\n         (first %&)\n         (partition 2 (rest %&)))","problem":135,"user":"506ba58be4b0eda3100c090b"},{"problem":135,"code":"(fn [& coll] (loop [[x y z & tail] coll]\n                (if (nil? z)\n                  x\n                  (recur (into [(y x z)] tail))\n                )\n              ))","user":"568c2d96e4b0dcc4269f40af"},{"problem":135,"code":"(fn [x & xs]\n   (loop [x x \n          xs xs]\n     (if (empty? xs)\n       x\n       (recur ((first xs) x (second xs)) (drop 2 xs)))))","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":135,"code":"(fn infix [& lst]\n  (reduce (fn [x [n y]] (n x y))\n    (first lst) (partition 2 (rest lst))))\n\n;Partition is used to divide elements in various elements, as an example if is used for a range of 10 and you make the partition for 2 the result will be (1 2) (3 4) and so on up to number 10.\n;Reference: https://clojuredocs.org/clojure.core/partition","user":"5a99b87ee4b0d174b936c7af"},{"code":"(fn infix [& args]\n    (let [f (first args) other (rest args)]\n       ((fn calc [v o]\n          (if (first o)\n            (let [op (first o) next-arg (second o) r (drop 2 o) ]\n                 (calc (op v next-arg) r)\n             )\n             v\n         )\n       ) f other) \n\n    ) \n )","problem":135,"user":"52763696e4b03e8d9a4a74d7"},{"code":"(fn [& args]\n   (let [col (flatten (conj [] args))]\n     (loop [acc (first col), all (rest col)]\n       (let [[f x & more] all, result (f acc x)]\n         (if (= 0 (count more))\n           result\n           (recur result more)\n         )\n       )\n     )\n    )\n   )","problem":135,"user":"52d42021e4b09f7907dd132a"},{"problem":135,"code":"(fn [init & elements]\n    (reduce \n        (fn [a [f b]] (f a b))\n        init\n        (partition 2 elements)))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":135,"code":"(fn [& x]\n        (loop [a (rest x) r (first x)]\n        (if (seq a)\n                (recur (drop 2 a) ((first a) r (second a)))\n                r\n        ))\n)","user":"5661b0a9e4b068f2fe63dc6f"},{"problem":135,"code":"(fn inf [x0 op x1 & ex] (let [r (op x0 x1) l  (flatten ex)] (if (not= (count l) 0) (inf r (first l) (second l) (drop 2 l)) r)))","user":"58983e3fe4b00487982d52ce"},{"code":"(fn [x & xs] (reduce #((first %2) % (second %2)) x (partition 2 xs)))","problem":135,"user":"4e7ada51535db169f9c796ae"},{"code":"(fn c [ & a] (if (= (count a) 1)\n              (first a)\n              (let [[q o r & s] a]\n                (apply c (o q r) s))))","problem":135,"user":"51780bfce4b0f89a8f53839c"},{"problem":135,"code":"(fn [& l] (reduce #((first %2) % (second %2)) (first l) (partition 2 (rest l))))","user":"5c54e605e4b0fb8c5ffd9a14"},{"problem":135,"code":"(fn infix\n  ([x op y] (op x y))\n  ([x op y & args] (apply infix (op x y) args)))","user":"5bc7f2d6e4b07a9b28b100b7"},{"problem":135,"code":"(fn my-infix-eval\n  ([x] x)\n\n  ([x op y & rest]  (apply my-infix-eval (conj rest (op x y)) ))\n  )","user":"5fa6db67e4b0fa27300f3dd2"},{"problem":135,"code":"(fn [x o y & r]\n  (if (empty? r)\n    (o x y)\n    (recur (o x y) (nth r 0) (nth r 1) (drop 2 r))))","user":"568227fee4b0945ebc182a8a"},{"problem":135,"code":"(fn calc [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1))  exp))","user":"575d16f8e4b02ea114799377"},{"code":"(fn [& coll]\n  (loop [a (first coll)\n         coll (rest coll)]\n    (if (empty? coll)\n      a\n      (recur ((first coll) a (second coll)) (nthnext coll 2)))))","problem":135,"user":"535d4b0ae4b04ce2eb3ed2be"},{"code":"(fn rithmetic [a op b & args]\n  (let [c (op a b)]\n  (if (empty? args) c\n      (apply (partial rithmetic c) args))))","problem":135,"user":"4db2cd84535df7e46ed9b6c6"},{"problem":135,"code":"(fn solve\n  ([x]\tx)\n  ([a op b & others]\n   \t(apply solve (op a b) others)))","user":"54848141e4b0e286459a119e"},{"problem":135,"code":"(fn [& math]\n (loop [math math]\n   (if (= (count math) 1)\n     (first math)\n     (recur (conj (drop 3 math) ((nth math 1) (nth math 0) (nth math 2)))))))","user":"553b87abe4b09218d5f45003"},{"code":"(fn [& ar]\n     (reduce #(if (fn? %1)\n                 (%1 %2)\n                 (partial %2 %1)) ar))","problem":135,"user":"50d3b03fe4b030b634c368b9"},{"problem":135,"code":"(fn infix\n  ([x y z] (y x z))\n  ([x y z & more] (apply infix (y x z) more)))","user":"57c2d0c1e4b05aa3c4741cb8"},{"problem":135,"code":"(fn [& args]\n    (reduce (fn [acc ops]\n              ((first ops) acc (second ops)))\n            (first args)\n            (partition 2 (rest args))))","user":"54508859e4b0e397800069a3"},{"problem":135,"code":"(fn red [x op y & rest]\n  (if (nil? rest)\n    (op x y)\n    (apply red (cons (op x y) rest))))","user":"53e4fa2ce4b036ad0777e454"},{"problem":135,"code":"(fn [init & args]\n         (reduce (fn [res [op n]] (op res n))\n                 init\n                 (partition 2 args)))","user":"531bf76fe4b08068f379ed96"},{"problem":135,"code":"(fn calculate [& params]\n  (if\n    (= 1 (count params))\n    (first params)\n    (let [[operator operand] (take-last 2 params)]\n      (operator (apply calculate (butlast (butlast params))) operand))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":135,"code":"(fn [x & xs]\n  (loop [a x\n         as xs]\n    (if (nil? as)\n      a\n      (let [[op b & bs] as]\n        (recur (apply op [a b]) bs)))))","user":"5ab9fe71e4b073f17744269d"},{"code":"(fn myf ([a f b] (f a b))\n  ([a f b & zs] (apply myf (f a b) zs)))","problem":135,"user":"4f9510b5e4b0dcca54ed6cc7"},{"problem":135,"code":"(fn [& expr]\n                  (let [operators #{+ / - *}]\n                    (loop [operator nil\n                           operands '()\n                           remaining expr]\n                      (let [head (first remaining)\n                            found-operator (operators head)]\n                        (if (empty? remaining)\n                          (apply operator (reverse (take 2 operands)))\n                          (recur (or found-operator operator)\n                                 (cond\n                                   (and found-operator operator) (conj (drop 2 operands) (apply operator (reverse (take 2 operands))))\n                                   (not found-operator) (conj operands head)\n                                   :else operands)\n                                 (rest remaining)))))))","user":"57f904c5e4b0d3187e900936"},{"code":"(fn calc [& a]\n  (loop [acc (first a)\n         syms (rest a)]\n    (if\n      (empty? syms) acc\n      (recur ((first syms) acc (second syms)) (nthrest syms 2)))))","problem":135,"user":"51929214e4b08962174cf74c"},{"problem":135,"code":"(fn [& x] \n   (loop [tmp (next x) result (first x)]\n     (if (empty? tmp)\n       result\n       (recur (nnext tmp)\n              ((first tmp) result (second tmp))\n              )\n       \n       )\n     )\n   )","user":"57750460e4b0979f8965160c"},{"problem":135,"code":"(fn\n  [& args]\n  (let [a (take 3 args)\n        b (drop 3 args)\n        operand (nth a 1)\n        ans (cond\n              (= + operand) (+ (nth a 0) (nth a 2))\n              (= - operand) (- (nth a 0) (nth a 2))\n              (= * operand) (* (nth a 0) (nth a 2))\n              (= / operand) (/ (nth a 0) (nth a 2)))]\n    (cond (empty? b) ans\n          (not-empty b) (recur (cons ans b)))))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":135,"code":"(fn calc [& symbols]\n  (loop [acc (first symbols)\n         syms (rest symbols)]\n \n    (if\n        (empty? syms) acc\n        (recur ((first syms) acc (second syms)) (nthrest syms 2)))))","user":"55efc44ee4b066087aa9453e"},{"code":"(fn ff[a op b & rs] (let [v (op a b)] (if rs (apply ff v rs) v)))","problem":135,"user":"4f1fd734535d64f6031464a5"},{"problem":135,"code":"(fn sol3 [fi & params] (reduce (fn [op1 [op op2]] (op op1 op2) ) fi (partition 2 params)))","user":"50856bd1e4b004985b776e4c"},{"code":"(fn [x y & more]\n  (let [expr (conj (conj more y) x)\n        my-eval #(%2 %1 %3)]\n    (loop [st (first expr)\n           nd (first (rest expr))\n           rd (first (rest (rest expr)))\n           core (rest (rest (rest expr)))]\n      (cond (= core ()) (my-eval st nd rd)\n            :default (recur (my-eval st nd rd)\n                            (first core)\n                            (first (rest core))\n                            (rest (rest core)))))))","problem":135,"user":"4e49a7bb535dc968683fc4c6"},{"code":"(fn [& args]\n  (if (second args)\n    (let [[a op b & tail] args]\n      (recur (cons (op a b) tail)))\n    (first args)))","problem":135,"user":"4fe8da4de4b0547ebccb2429"},{"problem":135,"code":"#(loop [s % r %&]\n   (if (< (count r) 2) s\n       (recur ((first r) s (second r)) (drop 2 r))\n   ))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":135,"code":"(fn [& args] (loop [[a b c & d] args] (if (nil? b) a (recur (cons (b a c) d)))))","user":"606a70a5e4b069485764ddf2"},{"problem":135,"code":"(fn infix [& exprs]\n  (loop [[x & xs] exprs \n         acc 0 \n         oper +]\n     (cond \n        (nil? x) acc\n        (number? x) (recur xs (oper acc x) nil)\n        :else (recur xs acc x))))","user":"56cba075e4b0ea9b8538f737"},{"problem":135,"code":"(fn f\n  ([x g y] \n      (g x y))\n  ([x g y & r]\n     (apply f (cons (g x y) r))))","user":"536e5b68e4b0fc7073fd6e6d"},{"problem":135,"code":";(fn [& expressions]\n;  (if (= 1 (count expressions))\n;    (first expressions)\n;    (recur\n;      (conj\n;        (drop 3 expressions)\n;        ((second expressions) (first expressions) (nth expressions 2))\n;        )\n;      )\n;    )\n;  )\n(fn [& expressions]\n  (reduce #((first %2) %1 (second %2)) (first expressions) (partition 2 (rest expressions)))\n  )","user":"566639f4e4b0e91d5f5c566b"},{"code":"(fn [init & opers]\n  (reduce #(let [[op n] %2] (op % n)) init (partition 2 opers)))","problem":135,"user":"4f89d489e4b033992c121c7e"},{"problem":135,"code":"(fn infix-calculator [& xs]\n  (if (> (count xs) 1)\n    (let [[these more] (split-at 3 xs)]\n      (let [res ((fnext these) (first these) (first (nnext these)))]\n        (if more\n          (apply infix-calculator (conj more res))\n          res)))\n    (first xs)))","user":"55fb58b2e4b0f488688e0661"},{"problem":135,"code":"(fn [& c] (reduce #((first %2) %1 (last %2)) (first c) (partition 2 (rest c))))","user":"574a546ee4b02ea1147991f6"},{"problem":135,"code":"(fn [& coll] \n  (reduce (fn [n m] (if (fn? m)\n                      {:a n :f m}\n                      ((:f n) (:a n) m))) coll))","user":"51e3a549e4b0c611d6113e47"},{"code":"(fn [s & c] (reduce #((first %2) %1 (last %2)) s (partition 2 c)))","problem":135,"user":"4eadc217535d7eef30807321"},{"problem":135,"code":"(fn f135 [& args]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity args))","user":"57bbc9bde4b05aa3c4741c31"},{"code":"(fn t [x f y & r] (if (= nil r)                                                                                               \n                      (f x y)\n                      (apply t (concat (list (f x y)) r))))","problem":135,"user":"4f2c593ee4b0d6649770a053"},{"code":"(fn f \n  ([x] x)\n  ([x y z & r]\n  (apply f (cons (y x z) r))))","problem":135,"user":"4f7869c2e4b0fbe0118ec589"},{"problem":135,"code":"(fn infix-calc \n  ([& xs]\n   (let [[a op b & more] xs]\n     (if op\n      (recur (cons (op a b) more))\n      a))))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"problem":135,"code":"(fn infix\n  [& args]\n  (if (= 1 (count args))\n      (first args)\n      (let [[first op last] (take 3 args)\n            rest (drop 3 args)\n            val (op first last)]\n          (apply infix (conj rest val)))))","user":"56fc0601e4b07572ad1a88db"},{"problem":135,"code":"(fn [& args]\n  (reduce #(if (number? %2)\n              (%1 %2)\n              (partial %2 %1)) args))","user":"55380eeae4b09218d5f44fd9"},{"code":"(fn calc [& args] (println args)\n  (if (= 1 (count args))\n    (first args)\n    (let [[x op y & rest] args\n          val (op x y)]\n      (apply calc (concat [val] rest)))))","problem":135,"user":"504db141e4b021508a333965"},{"problem":135,"code":"(fn\n  [& x]\n  (let [p (fn p [h [a b & as]]\n               (if a\n                 (if (nil? h)\n                   (p (+ a 0) (concat [b] as))\n                   (p (a h b) as))\n                 h))]\n    (p nil x)))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":135,"code":"(fn infix [a op b & xs]\n  (let [c (op a b)]  \n    (if (nil? xs) c (apply infix c xs))))","user":"5884e807e4b0f1effa3b76a6"},{"code":"(fn [n & args]\n  (loop [x n [op y & ys :as xs] args]\n    (if (empty? xs)\n        x\n        (recur (op x y) ys))))","problem":135,"user":"4ee3b586535d10e5ff6f5371"},{"problem":135,"code":"(fn calc [a op b & others]\n  (let [res (op a b)]\n    (if (empty? others)\n      res\n      (apply calc (cons res others)))))","user":"5ff93da9e4b06df49cee14af"},{"problem":135,"code":"(fn [& more]\n  (reduce (fn [v1 [f v2]] (f v1 v2) ) (first more) (partition 2 (rest more))))","user":"5486adf7e4b0e286459a11be"},{"problem":135,"code":"(fn meq [& xeq]\n  (loop [e xeq]\n    (if (= 1(count e))\n      (first e)\n      (recur (conj \n               (drop 3 e)\n               ((nth e 1) (first e) (nth e 2))    \n               )\n      )\n\n    )\n  )\n  )","user":"5885e90de4b0f1effa3b76c5"},{"problem":135,"code":"(fn calc [& args]\n    (let [[arg1 op arg2 & argn] args]\n      (if op\n        (apply calc (op arg1 arg2) argn)\n        (or arg1 0))))","user":"539fa040e4b0ca733b97449f"},{"code":"(fn ff\n  ([x f y] (f x y))\n  ([x f y & l]\n    (apply ff (cons (f x y) l))))","problem":135,"user":"4ff5744ae4b0678c553fc36a"},{"problem":135,"code":"(fn [& args]\n  (loop [result (first args) xs (rest args) oper (first xs) arg (second xs)]\n    (if (empty? xs)\n      result\n      (let [ys (drop 2 xs)]\n      \t(recur (oper result arg) ys (first ys) (second ys))))))","user":"5b58d012e4b02d533a91bd71"},{"code":"(fn [& coll]\n((fn one-thirty-five\n  [[n op m & xs]]\n  (if (nil? op)\n    n\n    (one-thirty-five (cons (op n m) xs)))) coll))","problem":135,"user":"510591dde4b06d28cacc92eb"},{"problem":135,"code":"(fn  [ & args ]\n\n  (loop [argsrem (rest args)\n         total (first args)]\n     (if (empty? argsrem)\n       total\n       (recur (drop 2 argsrem) ((first argsrem) total (second argsrem))\n\n))))","user":"56f2611fe4b04a395b9a04a2"},{"problem":135,"code":"(fn infix\n  ([a op b]\n   (op a b))\n  ([a op b & more]\n   (apply infix (cons (op a b) more))))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":135,"code":"(fn infix-math [first-el op second-el & rest-el]\n  (let [result (op first-el second-el)]\n    (if (empty? rest-el)\n      (op first-el second-el)\n      (recur result (first rest-el) (second rest-el) (rest (rest rest-el))))))","user":"5783c505e4b0ebec4cfb74bc"},{"problem":135,"code":"(fn [x & rest] (reduce (fn [acc n] ((first n) acc (second n))) x (partition 2 rest)))","user":"5799b260e4b05b1deef9adc8"},{"code":"(fn [& xs]\n  (reduce (fn [a b]\n            (if (number? a) {:v a :f b}\n                ((:f a) (:v a) b)))\n          xs))","problem":135,"user":"52b65f26e4b0c58976d9ad43"},{"problem":135,"code":"(fn\n  [op & ops]\n   (if-let [ops (seq ops)]\n     (recur ((first ops) op (second ops)) (nnext ops))\n     op))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":135,"code":"(fn infix\n  ([x op y] (op x y)) \n  ([x op y & xs] (apply infix (cons (infix x op y) xs)))\n)","user":"57b55290e4b0fbc9809a27a9"},{"problem":135,"code":"(fn calc\n  ([x] x)\n  ([x op y & rs] (apply calc (cons (op x y) rs))))","user":"605b7a90e4b079a07f8593fc"},{"code":"(fn [& ops]\n  (if (= 1 (count ops))\n    (first ops)\n    (let [[x op y & rest] ops]\n      (recur (cons (op x y) rest)))))","problem":135,"user":"527cd633e4b0757a1b17136f"},{"problem":135,"code":"(fn infix\n  ([a] a)\n  ([a o b & rs] (apply infix (o a b) rs)))","user":"4fbe2cfbe4b081705acca30c"},{"problem":135,"code":"(fn [seed & others]\n  (reduce #((first %2) %1 (last %2)) seed (partition 2 others)))","user":"546c4c5fe4b00cfc9eacc178"},{"code":"(fn infix [& ops]\n  (first\n    (reduce\n      (fn [stack op]\n        (if (= (count stack) 2)\n          (list ((first stack) (second stack) op))\n          (cons op stack)))\n      []\n      ops)))","problem":135,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":135,"code":"(fn [& args]\n  (if (not (next args))\n    (first args)\n    (let [[arg1 op arg2 & remaining] args\n           new-args (cons (op arg1 arg2) remaining)]\n      (recur new-args))))","user":"5ed9c2cde4b0c7845d86b0e4"},{"problem":135,"code":"(fn [ & args]  (letfn [(step [tri-args]\n                ((second tri-args) (first tri-args) (nth tri-args 2)))]\n         (loop [answer (step (take 3 args))\n                args   (drop 3 args)]\n              (cond\n                  (= (count args) 0) answer\n                  :else              (recur (step (conj (take 2 args) answer)) (drop 2 args))))))","user":"544e8369e4b0e39780006987"},{"problem":135,"code":"(fn f\n  [& args]\n  (loop [a (first args)\n         lst (rest args)]\n    (if (empty? lst)\n      a\n      (recur ((first lst) a (nth lst 1)) (rest (rest lst))))))","user":"59e778aae4b0249b72820716"},{"problem":135,"code":"(fn [ & args] (reduce #(let [[op number] %2] (apply op [%1 number])) (first args) (partition 2 (rest args))))","user":"5ea97df7e4b00a66d4a951c8"},{"code":"(fn infix\r\n  ([x] x)\r\n  ([x op y] (op x y))\r\n  ([x op y & more] (apply infix (op x y) more)))","problem":135,"user":"4e6ab9cb535d8ccf87e9fefe"},{"code":"(fn [& args] \r\n  (loop [x (first args)\r\n         r (rest args)]\r\n    (if-let [op2 (fnext r)]\r\n      (recur ((first r) x op2)\r\n             (nnext r))\r\n       x)))","problem":135,"user":"4f038355535dcb61093f6b04"},{"code":"(fn infix-\r\n  ^{:doc \"Write a function that accepts a variable length mathematical                                                                                  \r\n  expression consisting of numbers and the operations +, -, *, and                                                                                      \r\n  /.\"}\r\n  ([x] x)\r\n  ([x op y & rest] (apply infix- (op x y) rest)))","problem":135,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":135,"code":"(fn\n  [a b c & args]\n  (loop [tot (b a c)\n         [d e & r] args]\n    (if (nil? d) tot\n        (recur (d tot e) r))))","user":"558b41fce4b0277789237628"},{"problem":135,"code":"(fn [start & args]\n  (let [funcs (partition 2 args)\n        accumer (fn [cumil [oper opand]] (oper cumil opand))]\n    (reduce accumer start funcs)))","user":"59f15e20e4b0966464fe6a5a"},{"code":"(fn f\n  ([x] x)\n  ([x o y & a]\n    (apply f (cons (o x y) a))))","problem":135,"user":"4eb2d0ae535d7eef3080734e"},{"code":"(fn infix [& expr]\n  (if (= (count expr) 1)\n    (first expr)\n  \t((first (take-last 2 expr)) (apply infix (drop-last 2 expr)) (last expr))))","problem":135,"user":"538c3424e4b0b51d73faae58"},{"problem":135,"code":"(fn [start & args]\n  (reduce (fn [acc [f v]]\n            (f acc v))\n          start\n          (partition 2 args)))","user":"53dd37aee4b0d874e779ae28"},{"code":"(fn infix\n  [x op y & more] (if more\n\t\t(apply infix (op x y) more)\n\t\t(op x y)))","problem":135,"user":"4f047542535dcb61093f6bc7"},{"problem":135,"code":"(fn infix ([a f b] (f a b))\n  ([a f b & r] (apply infix (f a b) r)))","user":"55f2b42be4b06e875b46ce4a"},{"code":"(fn [l & more]\n  (reduce \n    (fn [l [o r]] (o l r))\n     l\n     (partition 2 more)))","problem":135,"user":"5041b3c0e4b06d8231e4facf"},{"code":"(fn simple-infix-calc [& args]\n  (reduce (fn [a [f x]] (f a x))\n          (first args)\n          (partition 2 (rest args))))","problem":135,"user":"4e6a412e535d8ccf87e9feb6"},{"problem":135,"code":"(fn [i & a] (reduce #((first %2) %1 (second %2)) i (partition 2 a)))","user":"587294f0e4b01531a375ea1e"},{"problem":135,"code":"(fn infix [& args]\n  (loop [curr     (first args)\n         op       (second args)\n         the-rest (rest (rest args))]\n    (if (empty? the-rest)\n      curr\n      (recur (op curr (first the-rest)) (second the-rest) (rest (rest the-rest))))))","user":"4ea8570f535d7eef308072f8"},{"problem":135,"code":"(fn calc [& vals]\n  (reduce (fn [acc [op x]] (op acc x))\n          (first vals)\n          (partition 2 (rest vals))))","user":"5aa4f7dae4b0d174b936c88c"},{"code":"#(if (next %&) (recur (list* ((second %&) (first %&) (nth %& 2)) (drop 3 %&)))(first %&))","problem":135,"user":"4e6a61d8535d8ccf87e9fed8"},{"problem":135,"code":"(fn f\n  ([x op y]\n   (op x y))\n  ([x op y & rst]\n   (apply f (cons (f x op y) rst))))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn g [a f b & xs]\n   (if xs (apply g (f a b) xs) (f a b)))","problem":135,"user":"51e58e02e4b0efabf93c02d0"},{"problem":135,"code":"(fn [& args]\n    (reduce (fn [a [op b]] (op a b))\n            (first args)\n            (partition 2 (rest args))))","user":"57839ae9e4b0ebec4cfb74b8"},{"problem":135,"code":"(fn [f & r] \n  (reduce (fn [a [op n]]\n            (op a n)) f (partition 2 2 r)))","user":"5b22328ee4b03cfeda66ed5d"},{"problem":135,"code":"(fn [operand & given-string]\n   (reduce\n    (fn [acc [operator operand1]]\n      (operator acc operand1)\n    )\n      operand\n      (partition 2 given-string))\n    )","user":"5d8c8175e4b0915913b1d3e1"},{"problem":135,"code":"(fn f ([lhs op rhs & more] \n        (f (into [lhs op rhs] more)))\n      ([[lhs op rhs & more] ]\n        (if op\n          (recur (cons (op lhs rhs) more))\n          lhs)))","user":"60836285e4b0736b099e42e4"},{"problem":135,"code":"(fn [head & args]\n    (let [args (partition 2 args)]\n      (reduce (fn [acc [op val]]\n                (op acc val))\n              head\n              args)))","user":"5a084a24e4b01bb0ae8afdf2"},{"code":"(fn [& args] (first (reduce \n              #(if (number? %2)\n                 [((last %1)(first %1) %2)(last %1)]\n                 [(first %1) %2]\n                ) [0 +] args)))","problem":135,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":135,"code":"(fn [x & ops] (reduce (fn [acc [f y]] (f acc y)) x (partition 2 ops)))","user":"547584d9e4b0c51c1f4d729b"},{"code":"(fn i [a & s]\n  (let [[f b & r] s]\n    (if b\n      (apply i (f a b) r)\n      a)))","problem":135,"user":"4e8612f8535db62dc21a62f2"},{"problem":135,"code":"(fn [& args]\n  (let [op (atom nil) arg1 (atom nil) arg2 (atom nil)]\n    (loop [stuff args]\n      (if (empty? stuff) @arg1\n        \n        (do (if (fn? (first stuff)) ;; 3 do\n              \n          (do (reset! op (first stuff)) (recur (rest stuff))) ;; true closed, 2 do\n              \n          (do (if (nil? @arg1) (reset! arg1 (first stuff)) ;; 1 do\n                (reset! arg2 (first stuff))) ;; close if\n            \n            (if (and (false? (nil? @op)) (false? (nil? @arg1)) (false? (nil? @arg2)))\n              (do (swap! arg1 @op @arg2) (reset! op nil) (reset! arg2 nil))) ;; close if\n            \n            (recur (rest stuff))))))))) ;; close do 1","user":"53d977f1e4b0e771c302547a"},{"problem":135,"code":"(fn [& coll]\n    (reduce (fn [w [f v]]\n              (f w v)) (first coll) (partition 2 2 (rest coll))))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn icalc\n  ([x] x)\n  ([l & [op r & xs]] \n    (if xs\n      (recur (op l r) xs)\n      (op l r))))","problem":135,"user":"502ade49e4b0614b52996120"},{"code":"(fn [& args] ((fn [ret col]\n  (if (= (count col) 0 )\n    ret\n  (recur ((first col) ret (second col)) (drop 2 col)))) (first args) (rest args)))","problem":135,"user":"50bfe725e4b080409b860f26"},{"code":"(fn [& args]\n  (reduce (fn [res item]\n            ((first item) res (second item))) \n        0\n        (partition-all 2 (conj args +))))","problem":135,"user":"4f3e6244e4b0e243712b1f85"},{"problem":135,"code":"(fn [term1 & ops]\n  (loop [term1 term1\n         ops ops]\n    (let [op (first ops)\n          term2 (second ops)\n          remaining (rest (rest ops))]\n      (if (empty? remaining)\n        (op term1 term2)\n        (recur (op term1 term2) remaining)))))","user":"54df3c94e4b024c67c0cf7aa"},{"code":"(fn [& args]\n  ((fn [n res]\n    (if (not (empty? res))\n      (recur ((first res) n (second res))\n             (rest (rest res)))\n      n)) (first args) (rest args)))","problem":135,"user":"4fbe42b7e4b081705acca30f"},{"problem":135,"code":"(fn [& terms]\n  ((fn evaluate [result terms]\n    (if (seq terms)\n      (evaluate ((first terms) result (second terms))\n                (nnext terms))\n      result))\n   (first terms)\n   (rest terms)))","user":"546ed28be4b00cfc9eacc1a5"},{"problem":135,"code":"(fn [%1 & args]\n   (loop [n %1\n          a args]\n     (if (empty? a)\n       n\n       (recur ((first a) n (second a)) (drop 2 a)))))","user":"571dd145e4b0145328a76283"},{"code":"(fn eval* [& expr]\n  (loop [e (rest expr)\n         x (first expr)]\n    (if (empty? e)\n      x\n      (recur (rest (rest e))\n             ((first e) x (second e))))))","problem":135,"user":"5341b141e4b00652c8746ecf"},{"code":"(fn[& a](\n    reduce (fn[x [o y]] (o x y))\n    (first a)\n    (\n        (fn[s] (let [r (reduce (fn[x y] {:r1 (if (x :f) (x :r1) (conj (x :r1) y))\n                         :r2 (if (x :f) (conj (x :r2) y) (x :r2))\n                         :f (not (x :f))\n                        })\n                {:r1 []\n                 :r2 []\n                 :f false\n                }\n                s\n              )]\n            (map list (r :r1) (r :r2))\n        ))\n        (next a)\n    )\n)\n)","problem":135,"user":"5017eface4b02f523d7cc5e7"},{"problem":135,"code":"(fn foo [& exp]\n  (reduce (fn [result instr]\n            (apply (first instr) (list result (second instr))))\n          (first exp)\n          (partition 2 (rest exp))\n          )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"code":"(fn infix [& symbols]\n  (if (= 1 (count symbols))\n    (first symbols)\n    (let [[x op y & remaining] symbols]\n      (apply infix (cons (op x y) remaining)))))","problem":135,"user":"510cd1dde4b078ea71921124"},{"code":"(fn [& args]\n  (loop [args args]\n    (let [eval-expr ((second args) (first args) (nth args 2))]\n      (cond\n        (= (count args) 3) eval-expr\n        :else (recur (cons eval-expr (drop 3 args)))))))","problem":135,"user":"51789dfae4b03d69594194d7"},{"code":"(fn cc [a b c & expr]\n  (let [r (b a c)]\n    (if (nil? expr)\n      r\n    (apply cc r expr))))","problem":135,"user":"4ec1923f535dfed6da9c6db2"},{"problem":135,"code":"(fn [& args]\r\n  (let [\r\n    [a op b & tail] args\r\n    term (op a b)]\r\n    (if (empty? tail)\r\n      term\r\n      (recur (cons term tail)))))","user":"555bd27ae4b0b056612e2244"},{"problem":135,"code":"(fn calc [a1 opr a2 & rest] (\n                               if (empty? rest)\n                                  (opr a1 a2)\n                                  (apply calc (conj rest (opr a1 a2)))\n                              ))","user":"58e6e624e4b056aecfd47cc1"},{"problem":135,"code":"(fn infix [a op b & rest]\n    (if (empty? rest)\n      (op a b)\n      (apply infix \n             (cons (op a b) rest)\n        )\n      )\n    )","user":"55c3149de4b0e31453f64987"},{"code":"(fn [& args] \n  (reduce \n   (fn [s [op v]] (op s v))\n   (first args)\n   (partition 2 (drop 1 args))))","problem":135,"user":"50f53694e4b057d4c52de881"},{"problem":135,"code":"(fn calc-infix [a op b & more]\n  (letfn [(infix [a op b] (op a b))]\n    (if (zero? (count more))\n      (infix a op b)\n      (recur (infix a op b) (first more) (second more) (drop 2 more)))))","user":"5f84f110e4b0375e81f54e79"},{"problem":135,"code":"(fn f[a b c & d](let[z (b a c)](if d(apply f(conj d z))z)))","user":"58a01c73e4b02bd94d917e95"},{"problem":135,"code":"(fn infix-calc\n  ([arg1 opr arg2]\n   (opr arg1 arg2))\n  ([arg1 opr arg2 & remaining]\n   (let [remaining (flatten remaining)]\n     (if (= (count remaining) 2)\n       (infix-calc (opr arg1 arg2) (first remaining) (second remaining))\n       (infix-calc (opr arg1 arg2) (first remaining) (second remaining) (drop 2 remaining))))))","user":"574e84e0e4b02ea114799243"},{"code":"(fn [& b] (loop [accum (first b) n (rest b)]\n   (if (empty? n) accum \n     (recur ((first n) accum (second n)) (-> n rest rest) )))\n )","problem":135,"user":"52ab61f5e4b0c58976d9ac75"},{"code":"(fn [& operations]\n  (reduce (fn [t [op n]] (op t n)) 0\n          (partition-all 2 (vec (concat [+] operations)))))","problem":135,"user":"521d709ae4b050d5da0427ef"},{"code":"(fn [l o & rargs]\n   (let [[r & args] rargs]\n     (if (empty? args)\n       (o l r)\n       (let [[no & nrargs] args]\n     (recur (o l r) no nrargs)))))","problem":135,"user":"4f1bee08535d64f60314647e"},{"problem":135,"code":"(fn infix\n  ([x] x)\n  ([x f y & rest] (apply infix (f x y) rest)))","user":"601aaa93e4b0bf4ca6b10926"},{"code":"(fn [& v]\n        (loop [[a b c & xs] v]\n           (cond \n             (nil? xs) (b a c)\n             :else (recur (cons (b a c) xs) ))))","problem":135,"user":"4e739e13535dff18050a9c76"},{"problem":135,"code":"(fn infix \n  [& args]\n  (reduce (fn [a [op b]] (op a b))\n          (first args) (partition 2 (rest args))))","user":"5a9f005be4b0d174b936c810"},{"problem":135,"code":"(fn [ & e]\n  (reduce\n   #(if (fn? %2)\n      (partial %2 %)\n      (% %2)  \n   \n   )\n   identity\n   e\n   )\n  )","user":"5735ac67e4b0cd1946bd102b"},{"problem":135,"code":"(fn x[a b c & d]\n  (if(empty? d)\n    (b a c)\n    (apply x (b a c) d)))","user":"53ed2fafe4b0d648e757f4c1"},{"problem":135,"code":"(fn infix\n  ([a1 op a2] (op a1 a2))\n  ([a1 op a2 & more] (apply infix (cons (infix a1 op a2) more)))\n)","user":"540f09b9e4b0addc1aec6725"},{"problem":135,"code":"(fn calculate-it [x op y & more]\n  (println \"x=\" x \"op=\" op \"y=\" y \"more=\" more)\n  (cond \n\t(empty? (flatten more)) (op x y)\n\t:else (calculate-it (op x y) (first (flatten more)) (first (drop 1 (flatten more))) (drop 2 (flatten more)))))","user":"52b71bd2e4b0c58976d9ad4d"},{"code":"(fn infix-op [x op y & args]\n  (->> (partition 2 args)\n       (reduce (fn [left-value [operator right-value]]\n                 (operator left-value right-value))\n               (op x y))))","problem":135,"user":"52381b2ae4b0fae3832e99ef"},{"problem":135,"code":"(fn [& expr]\n  (letfn [(test-help [acc op expr]\n                    (let [current (first expr)]\n                      (cond (empty? expr) acc\n                            (not (some #{current} [+ - * /])) (recur (op acc current) op (rest expr))\n                            :else\n                            (recur acc current (rest expr)))))]\n  (test-help 1 * expr)))","user":"579332c2e4b0e215f87e8452"},{"code":"(fn [r & more]\n  (loop [r r\n         [f x & more] (seq more)]\n    (if f\n      (recur (f r x) more)\n      r)))","problem":135,"user":"4ea4e98a535d7eef308072ce"},{"problem":135,"code":"(fn [& r]\n   (loop [c r]\n     (if (= 1 (count c))\n       (first c)\n       (recur (cons\n               (apply (nth c 1) (list (nth c 0) (nth c 2)))\n               (rest (rest (rest c))))))))","user":"52c45ac8e4b0c2d177d620d9"},{"code":"(fn [a & bs] (loop [res a next bs]\n  (if (empty? next)\n    res\n    (recur ((first next) res (first (rest next))) (rest (rest next))))))","problem":135,"user":"4f0e995e535d0136e6c22326"},{"problem":135,"code":"(fn [& tokens]\n  (peek (reduce (fn [stack token]\n                  (if (or (empty? stack)\n                          (fn? token))\n                    (conj stack token)\n                    (let [[op n & others] stack]\n                      (conj others (op n token)))))\n                '()\n                tokens)))","user":"5ce077e9e4b0a17bb84e2b0c"},{"problem":135,"code":"(fn infix\n  ([x op y]\n   (op x y))\n  ([x op y & xs]\n   (apply infix (cons (infix x op y) xs))))","user":"55b3c03ee4b01b9910ae2975"},{"problem":135,"code":"(fn [& args]\n  (let [[x & xs] args]\n    (reduce\n     (fn [n [op n2]]\n       (op n n2))\n     x (partition 2 xs))))","user":"4f8490fae4b033992c121c34"},{"code":"(fn [& x]\r\n  (loop [sum (first x) action (rest x)]\r\n    (if (nil? (first action))\r\n      sum\r\n      ( recur ((first action) sum (first (rest action))) (rest (rest action)))\r\n      )\r\n    )\r\n)","problem":135,"user":"500c5b4ae4b03d00572d2d88"},{"code":"(fn [& args]\n  (first (reduce\n    (fn [stack v]\n      (if\n        (= 2 (count stack))\n        [((peek stack) (first stack) v)]\n        (conj stack v)))\n    []\n    args)))","problem":135,"user":"5201ada5e4b0b2e020a18f14"},{"problem":135,"code":"(fn [& args] (let [v (first args)\n                 ops (partition 2 (rest args))\n                 ]\n             (reduce #(let [op (first %2) arg (second %2)] (op %1 arg)) v ops)))","user":"54c13b87e4b0ed20f4ff6f20"},{"code":"(fn [v & args]\r\n  (reduce (fn [a [f b]] (f a b)) v (partition 2 args)))","problem":135,"user":"509c03f3e4b085ae113522a8"},{"problem":135,"code":"(fn [& args]\n  (loop [numbers (filter number? args)\n        operators (remove number? args)]\n    (if (= 1 (count operators))\n     ((first operators) (first numbers) (second numbers))\n     (let [interm (drop 2 numbers)]\n       (recur (conj interm ((first operators) (first numbers) (second numbers)))\n              (rest operators))))))","user":"54eee38ce4b024c67c0cf878"},{"code":"(fn [x & xs]\n    (reduce (fn [a [op b]] (op a b))\n            x\n           (partition 2 xs)))","problem":135,"user":"4f9d8083e4b0dcca54ed6d23"},{"problem":135,"code":"(fn func [& args] (first (reduce #(if (= 2 (count %1)) [((%1 1) (%1 0) %2)] (conj %1 %2)) (apply vector (conj (drop 2 args) (vec (take 2 args)))))))\n; Looking at other's answers, it's easier by partitioning as follows: 38 (+ 48) (- 2) (/ 2)","user":"55fc07d3e4b0f488688e066e"},{"problem":135,"code":"(fn [first-num & more]\n  (->> more\n       (partition 2)\n       (reduce #((first %2) %1 (last %2)) first-num)))","user":"5cb41c40e4b026601754b911"},{"problem":135,"code":"(fn a\n  ([first op next] (op first next))\n  ([first op next & more] (apply a (op first next) more)))","user":"53fc88e7e4b0de5c418485be"},{"problem":135,"code":"(fn calc [& input] (let [base (first input)\n                    operations (seq(partition 2 (rest input)))]\n                       (reduce (fn [acc x]\n                          (let [[operator value] x]\n                            (operator acc value)))\n                        base operations)))","user":"5e9b7aefe4b0157ca96647f1"},{"problem":135,"code":"(fn [& args]\n   (reduce\n     (fn [acc [op x]]\n       (op acc x))\n     (first args)\n     (partition 2 (rest args))))","user":"5991eec7e4b0866487ed0d6e"},{"code":"(fn infick \n   ([x op y & tail]\n      (apply infick  (cons (op x y)  tail)))\n   ([x]\n      x))","problem":135,"user":"5300aa1de4b0d8b024fd3710"},{"problem":135,"code":"(fn [& tkns]\n  (let [[v1 op v2 & rest-tkns] tkns\n        nv (op v1 v2)]\n  (if (empty? rest-tkns) nv\n    (recur (conj rest-tkns nv)))))","user":"53dad484e4b0e771c30254ac"},{"code":"(fn d1 [ & m]\n  (if (>= (count m) 3)  \n    (let [[x1 op x2] m val1 (op x1 x2)]\n      (recur (cons (op x1 x2) (drop 3 m)))\n      )\n    (first m)\n    )\n  )","problem":135,"user":"4ec4d723535dcc7ae8597d65"},{"problem":135,"code":"(fn [x & s]\n  (reduce #((first %2) %1 (last %2)) x (partition 2 s)))","user":"56d7f340e4b0ea9b8538f7df"},{"problem":135,"code":"(fn [& more]\n  (loop [continuation identity,\n         expressions more]\n    (cond\n     (empty? expressions) (continuation)\n     (fn? (first expressions)) (recur (partial (first expressions) (continuation)) (rest expressions))\n     true (recur #(continuation (first expressions)) (rest expressions)))))","user":"551ed214e4b08d5046aa8a4d"},{"problem":135,"code":"(fn [& args]\n  (loop [op (first args)\n         nums (rest args)]\n    (if\n        (empty? nums) op\n        (recur ((first nums) op (second nums)) (nthrest nums 2)))))","user":"525c575be4b0cb4875a45d38"},{"problem":135,"code":"(fn infix [ & args]\n  (loop [res ((second args) (first args) (nth args 2)) args (drop 3 args)]\n    (if (empty? args) res\n                      (recur ((first args) res (second args)) (drop 2 args)))\n    )\n\n  )","user":"5c3ac091e4b0d62ef62d9f95"},{"code":"(fn [& args]\n  (loop [a (first args) coll (rest args)] \n    (if (empty? coll) a \n      (let [op (first coll) b (second coll)]\n        (recur (op a b) (nthrest coll 2))))))","problem":135,"user":"4e823f41535db62dc21a62c8"},{"problem":135,"code":"(fn [& args]\n  (loop [list args]\n    (if (< (count list) 3)\n      (first list)\n      (let [[first second third] list]\n        (recur (cons (second first third) (drop 3 list)))))))","user":"55b22c33e4b0da326a65cf79"},{"problem":135,"code":"(fn ff [x f y & z]\n (if (seq z)\n  (apply ff (cons (f x y) z))\n  (f x y)))","user":"5b61aa6ae4b0c6492753e712"},{"code":"#(\n  reduce\n  (fn [x [op y]] (op x y))\n  %\n  (partition 2 %&)\n  )","problem":135,"user":"5281a445e4b0757a1b17143a"},{"code":"(fn math [& ops]\n  (if (= (count ops) 1)\n    (first ops)\n    (let [x (first ops),\n          op (second ops),\n          y (-> ops rest second),\n          others (-> ops rest rest rest)]\n      (apply math (cons (op x y) others)))))","problem":135,"user":"5175616ae4b0dea9bbfba576"},{"problem":135,"code":"(fn cal\n  ([a] a)\n  ([a b c & l]\n  \t(apply cal (cons (b a c) l))))","user":"539c88e1e4b0b51d73faaf2c"},{"problem":135,"code":"(fn [a & more]\n  (reduce (fn [acc [op x]] (op acc x)) a (partition 2 more)))","user":"5649b1b0e4b0284900eef646"},{"code":"(fn t [x f y & rest]\n    (if rest\n      (apply t (f x y) rest)\n      (f x y)))","problem":135,"user":"4e8e8c24535d65386fec2143"},{"code":"(fn calc [& args]\n  (if (= (count args) 1) (first args)\n      (let [[x op y & coll] args]\n        (recur (cons (op x y) coll)))))","problem":135,"user":"4f98ead0e4b0dcca54ed6cf8"},{"code":"(fn infix [& s]\n  (if (= (count s) 1)\n    (first s)\n    (let [[x op y] (take 3 s)]\n      (apply infix (apply op [x y]) (drop 3 s)))))","problem":135,"user":"4f04f847535dcb61093f6beb"},{"problem":135,"code":"(fn calc [x & more]\n  (if-let [op (first more)]\n    (let [y (second more)\n          r (op x y)]\n      (recur r (rest (rest more))))\n    x))","user":"54f2fe9fe4b050824f58f5b8"},{"problem":135,"code":"(fn [start & args]\n  (let [s (partition 2 args)]\n    (reduce (fn [acc new] ((first new) acc (second new))) start s)))","user":"5c06fab7e4b0bdcf453d16bd"},{"code":"(fn [i & a] (let [f (first a) o (second a) r (drop 2 a)] (reduce #((first %2) %1 (second %2)) (f i o) (partition-all 2 r))))","problem":135,"user":"52244a77e4b01819a2de42d1"},{"code":"(fn calc [a b c & args]\n    (if (nil? args)\n        (b a c)\n        (apply calc (b a c) args)))","problem":135,"user":"5054c7e1e4b0b1b9d1860eb2"},{"code":"(fn [& lst]\n  (loop [[op nxt & rst] (rest lst)\n         accum (first lst)]\n    (if (nil? op)\n      accum\n      (recur rst (op accum nxt)))))","problem":135,"user":"4ee271e2535d10e5ff6f5369"},{"problem":135,"code":"(fn f [& args] \n  (let [start (first args)\n        ops (partition 2 (rest args))]\n       (reduce (fn [agr [op val]] (op agr val)) start ops)))","user":"5493d908e4b0b312c081ff52"},{"code":"(fn infix [a op b & args]\n  (let [res (op a b)]\n    (if (empty? args) res (apply infix (conj args res)))))","problem":135,"user":"52736ca1e4b03e8d9a4a747e"},{"code":"(fn [& args]\n  (loop [acc (first args)\n         ops (rest args)]\n    (if (empty? ops)\n      acc\n      (recur ((first ops) acc (second ops))\n             (drop 2 ops)))))","problem":135,"user":"50f0ec9ce4b0d527ce5b30df"},{"problem":135,"code":"(fn [& x]\n  (reduce (fn [v1 [f v2]]\n            (f v1 v2))\n          (first x)\n          (partition 2 (rest x))))","user":"5ac4d1f6e4b0e27600da7735"},{"code":"(fn [& args] (first (reduce (fn [a b] (if (= 2 (count a)) (list ((first a) (second a) b)) (cons b a))) (list (first args)) (rest args))))","problem":135,"user":"53638ed2e4b0243289761e5b"},{"code":"(fn [& v] (let\n  [f (first v)\n   r (partition 2 (rest v))]\n  (reduce\n   (fn [a l] (apply (first l) a (rest l)))\n   f r)))","problem":135,"user":"531c0619e4b08068f379ed98"},{"problem":135,"code":"(fn i \n  ([x op y & xs] (i (op x y) xs))\n  ([t xs]\n   (if (empty? xs) t\n     (i ((first xs) t (second xs)) (drop 2 xs)))))","user":"54ab502fe4b09f271ff37cc4"},{"problem":135,"code":"(fn [a & b]\n    (if (empty? b)\n      a\n      (recur ((first b) a (second b)) (drop 2 b))))","user":"5b0bd9cfe4b0cc2b61a3bdd9"},{"problem":135,"code":"(fn infix \n  ([el] el)\n  ([x f y & rest] (apply infix (f x y) rest)))","user":"59a72effe4b066c664927d94"},{"problem":135,"code":"(fn infix [& expressions] \n  (if (= (count expressions) 1) \n    (first expressions)\n    (let [first-term ((nth expressions 1) (nth expressions 0) (nth expressions 2))]\n      (apply infix (cons first-term (drop 3 expressions))))))","user":"563c7f98e4b0bfe05bf11836"},{"code":"(fn infix [& terms]\n  (if (= (count terms) 1) (first terms)\n    (loop [ret (first terms)\n           op (fnext terms)\n           other-terms (drop 2 terms)]\n      (if (= (count other-terms) 1) (op ret (first other-terms))\n        (recur (op ret (first other-terms)) (fnext other-terms) (drop 2 other-terms) )))))","problem":135,"user":"5119f3d5e4b06c8af0111818"},{"problem":135,"code":"(fn [& args]\n  (first\n  \t(reduce (fn [acc op]\n\t    (if (number? op)\n\t\t\t(if (nil? (first acc)) \n                    [op (second acc)]\n                    [((second acc) (first acc) op) nil])\n             [(first acc) op]\n            ))    \n   [nil nil] args)))","user":"559b55d6e4b066d22e731f54"},{"problem":135,"code":"(fn [& args]\n   (reduce (fn [a b]\n             (if (fn? a)\n               (a b)\n               (fn [x] (apply b (list a x)))))\n           identity\n           args))","user":"51672d15e4b079759a74a5e7"},{"code":"(fn maf \n  ([x] x)\n  ([l op r & args] (apply maf (op l r) args)))","problem":135,"user":"51cec7b1e4b0e42293a2255b"},{"problem":135,"code":"; solution is stolen and reworked, I failed figuring out the sintax :(\n(fn Infix\n   ([a fun b] (fun a b));([x] x) ; it also works instead\n   ([a fun b & rest] (apply Infix (fun a b) rest))\n)","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn rec [& x]\n  (let [a (first x)\n        b (second x)\n        c (drop 2 x)\n        d (first c)\n        e (rest c)]\n    (if (nil? b) a\n        (apply rec (cons (b a d) e)))))","problem":135,"user":"52d1e364e4b0d9f9285948e7"},{"code":"(fn [x & ops]\n  (reduce\n    (fn [res [op el]] (op res el))\n    x\n    (partition 2 ops)\n  )\n)","problem":135,"user":"51473a70e4b0d520409ed394"},{"problem":135,"code":"(fn infix [x f y & rest]\n  (let [r (f x y)]\n    (if rest\n      (apply infix (cons r rest))\n      r)))","user":"52bdb7dee4b07a9af5792307"},{"problem":135,"code":"(fn infix [a b c & args]\n  (let [ans (b a c) args (flatten args)]\n   (if (or (nil? args) (empty? args)) ans\n       (infix ans (first args) (second args) (drop 2 args)))))","user":"56ff45e5e4b08d47c97781bb"},{"problem":135,"code":"(fn calc\n  ([x op y & exp]\n   (let [r (op x y)]\n     (apply calc (cons r exp))\n    )\n   )\n  ([x]\n   x\n  )\n )","user":"57cf03c0e4b00451144b04f9"},{"problem":135,"code":"(fn[& x] (loop [xs (take-nth 2 x)\n         fs (take-nth 2 (rest x))\n         r 0]\n    (if (seq (rest xs))\n      (recur (cons (apply (first fs) (take 2 xs)) (drop 2 xs)) (rest fs) (apply (first fs) (take 2 xs)))\n      r)))","user":"559067ace4b0277789237670"},{"code":"(fn [n & args] (reduce (fn [a [op num]] (op a num)) n (partition 2 args)))","problem":135,"user":"4e773be8535d324fb2983d6e"},{"code":"(fn [& args]\n   (loop [v args]\n     (if (= 1 (count v))\n       (first v)\n       (recur (conj (nthrest v 3) ((nth v 1) (nth v 0) (nth v 2)))))))","problem":135,"user":"50bce014e4b0594b91591c63"},{"code":"(fn [& args]\n  (loop [exp args]\n    (if (= 1 (count exp))\n      (first exp)\n      (recur (cons (apply (second exp) (list (first exp) (nth exp 2)))\n                   (drop 3 exp))))))","problem":135,"user":"4f31519ae4b0d6649770a086"},{"problem":135,"code":"#(reduce (fn [x [a b]] (a x b)) (first %&) (partition 2 (rest %&)))","user":"57ec3d29e4b0bfb2137f5b77"},{"problem":135,"code":"(fn p\n  [& l]\n  (loop [v (first l) l (rest l)]\n   (if (empty? l)\n     v\n     (recur ((first l) v (second l)) (drop 2 l)))))","user":"56df632ce4b0ca2494a095f2"},{"problem":135,"code":"(fn infix [& xs]\n  (let [[x0 & xs] xs\n        ops-and-values (partition 2 xs)]\n    (reduce (fn [acc [f v]] (f acc v)) x0 ops-and-values)))","user":"601c39eee4b0bf4ca6b10937"},{"code":"(fn f [&[x op y & t]]\n  (if op (recur (cons (op x y) t)) x))","problem":135,"user":"5065faf9e4b0313a384e5645"},{"code":"(fn ev [p1 f p2 & p]\n  (if (empty? p) (f p1 p2)\n    (apply ev (f p1 p2) p)))","problem":135,"user":"535ca812e4b04ce2eb3ed2b7"},{"problem":135,"code":"(fn cal [& p] (loop[pl (apply conj [] p)]\n                    (if(> (count pl) 3) (recur (cons ((second pl) (first pl) (second (rest pl))) (drop 3 pl))) ((second pl) (first pl) (second (rest pl))))))","user":"5971763fe4b01722bebd4c72"},{"problem":135,"code":"(fn [f & e] (->> (partition 2 e)\n                 (reduce #((first %2) % (second %2)) f)))","user":"55236ad6e4b0882d96d091b1"},{"code":"(fn [n & a] (reduce #((first %2) %1 (second %2)) n (partition 2 a)))","problem":135,"user":"4fb2101ce4b081705acca284"},{"problem":135,"code":"(fn cal \n  ([a op b] (op a b))\n  ([a op b & arg](apply cal (cal a op b)  arg)))","user":"566ff0a1e4b0a866af6896ec"},{"problem":135,"code":"(fn [x & c] (reduce #((first %2) % (last %2)) x (partition 2 c)))","user":"5c41db45e4b08cd430848ece"},{"problem":135,"code":"(fn [& arg]\n  (loop [coll (rest arg)\n         res (first arg)\n         prev (first arg)]\n    (cond\n     (empty? coll) res\n     (= prev +) (recur (next coll) (+ res (first coll)) (first coll))\n     (= prev -) (recur (next coll) (- res (first coll)) (first coll))\n     (= prev *) (recur (next coll) (* res (first coll)) (first coll))\n     (= prev /) (recur (next coll) (/ res (first coll)) (first coll))\n     :else (recur (next coll) res (first coll))\n     \n     )  \n   \n   )\n  \n  )","user":"5fc5c303e4b02c825b0c8c1a"},{"code":"(fn infix [x f y & more]\n  (if (fn? f)\n    (apply infix (f x y) (first more) (second more) (drop 2 more))\n    x\n  )\n)","problem":135,"user":"5176afd2e4b085adf681d889"},{"problem":135,"code":"(fn [& args]\n  (let [res (first args)\n        start (next args)]\n  (loop [[op a3 & tail] start, result res]\n    (cond\n      (nil? op)\n        result\n      :else\n        (let [sum (op result a3)]\n          (recur tail, sum)\n          )\n      )\n    ))\n  )","user":"558ee1c9e4b0277789237659"},{"code":"(fn [left op right & args]\n  (let [result (op left right)]\n    (if (empty? args)\n      result\n      (recur result (first args) (second args) (drop 2 args)))))","problem":135,"user":"52e27501e4b09f7907dd1435"},{"problem":135,"code":"(fn [& args] (loop [seed (first args) rem (rest args)]\n               (if (empty? rem) seed\n                 (recur ((first rem) seed (second rem)) (drop 2 rem)))))","user":"56baab13e4b0f26550335948"},{"code":"(fn f \n  ([arg]\n  \targ)\n  ([arg1 op arg2 & rest]\n  \t(apply f (op arg1 arg2) rest)))","problem":135,"user":"516abecae4b081287f204e9f"},{"code":"(fn evaluate\n  ([exp]\n    exp)\n  ([exp0 op & [exp1 & exps]]\n    (apply evaluate (cons (op exp0 exp1) exps))))","problem":135,"user":"4e691c79535d8ccf87e9fe97"},{"problem":135,"code":"(fn infix-calculator\n  [& terms]\n  (reduce\n    (fn [result [operator term]]\n      (operator result term))\n    (first terms)\n    (partition 2 (rest terms))))","user":"6098263be4b00e9e6653c3f9"},{"problem":135,"code":"(fn calc\n  ([x op y] \n   (op x y))\n  ([x op y & more] \n   (apply calc (op x y) more)))","user":"59089229e4b047aa04b1997c"},{"code":"(fn [& args]\n    (if (>= (count args) 3)\n      (let [[l op r & xs] args]\n        (recur (conj xs (op l r) )))\n      (first args)))","problem":135,"user":"4f4544e1e4b0d56e7bb92b7a"},{"code":"(fn c [& z]\n  (let [[a f b & r] z]\n    (if f\n      (apply c (cons (f a b) r))\n      a)))","problem":135,"user":"52951156e4b02ebb4ef7501b"},{"code":"(fn infix-calc\n  [& xs]\n  (reduce \n  #((nth %2 0) % (nth %2 1)) \n  (first xs) \n  (partition 2 (rest xs))))","problem":135,"user":"536aa86de4b0243289761eb1"},{"problem":135,"code":"(fn infix [& [n1 op n2 & exp]]\n  (if (nil? op) n1\n      (apply infix (cons (op n1 n2) exp))))","user":"575b3e9be4b02ea11479935b"},{"problem":135,"code":"(fn f135 [x & all]\n    (reduce (fn [m n] (if (number? n) (m n) #(n m %)) ) x all)\n  )","user":"526698c9e4b03e8d9a4a7144"},{"code":"(fn infix [& args]\n  (let [[a b c & more] args] \n    (cond (seq more) (->> (b a c) (conj more) (apply infix))\n          c (b a c))))","problem":135,"user":"504e108ce4b078edc5f593b3"},{"problem":135,"code":"(fn [& args] (reduce #((first %2) % (last %2)) 0 (partition 2 (cons + args))))","user":"4f435ee8e4b0d7d3c9f3fd1f"},{"code":"(fn[x1 f1 x2 & params]\n  (let [lft (partition 2 params)]\n    (reduce #((first %2) % (second %2)) (f1 x1 x2) lft)))","problem":135,"user":"5036eba7e4b0af0658af77a5"},{"problem":135,"code":"(fn aa [& v] \n  (loop [x (first v) y (rest v)]\n    (if (empty? y)\n      x\n      (recur ((first y) x (second y)) (rest (rest y)))\n    )\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"problem":135,"code":"(fn [& args]\n  (loop [operation (take 2 (rest args)), remaining (drop 3 args), result (first args)]\n    (if (empty? operation)\n      result\n      (let [operator (first operation), b (first (rest operation))]\n       (recur (take 2 remaining) (drop 2 remaining) (operator result b))))))","user":"5c6e1006e4b0fca0c1622744"},{"problem":135,"code":"(fn cal-fn [arg & more]\n  (loop [result arg\n          rst more]\n    (if (empty? rst)\n     result\n     (let [op (nth rst 0)\n           lop result\n           rop (nth rst 1)]\n      (recur (op lop rop)\n             (nthnext rst 2))))))","user":"5708e8f6e4b0b0fb43fd06a4"},{"code":"(fn P135 [ fo & exp]\n  (loop [ [op so & r] exp result fo]\n    (if (empty? r)\n      (op result so)\n      (recur r (op result so)))))","problem":135,"user":"5046f909e4b03b02161376b5"},{"problem":135,"code":"(fn p135\n  [& ops]\n  (letfn [(calc [acc ops]\n            (if (empty? ops)\n              acc\n              (let [operator (first ops)\n                    arg2     (second ops)\n                    rest     (rest (rest ops))]\n                (calc (operator acc arg2) rest))))]\n    (calc (first ops) (apply vector (rest ops))))\n  )","user":"550ff2a3e4b06e50f9beb17f"},{"problem":135,"code":"(fn [& args]\n  (let [args (vec args)]\n  (let [initial-val (args 0)\n       darest (rest args)]\n\n    ((fn calc [iv rrest]\n      (if (empty? rrest)\n        iv\n        (let [rrest (vec rrest)]\n          (println (rest (rest rrest)))\n          (println rrest 1)\n          (calc ((rrest 0) iv (rrest 1)) (rest(rest rrest))))\n       )\n    )\n    initial-val darest)\n  ))\n)","user":"52d6d490e4b09f7907dd1369"},{"problem":135,"code":"(fn my-calc [a op b & other]\n (cond \n  (= (count other) 0) (op a b)\n  :else (apply my-calc (op a b) (first other) (nth other 1) (rest (rest other)))\n   ))","user":"6065755ee4b069485764ddcc"},{"code":"(fn problem-135 [& exprs]\n  (loop [res nil\n         elems exprs\n         op (fn [x y] y)]\n    (if (empty? elems)\n      res\n      (let [curr (first elems)]\n        (recur (if (number? curr)\n                 (op res curr)\n                 res)\n               (rest elems)\n               curr)))))","problem":135,"user":"51fe9d7ce4b0f1313d468a70"},{"problem":135,"code":"(fn [a & b]\n  (let [args (partition-all 2 b)]\n    (reduce\n      (fn\n        [acc [op arg]]\n        (do\n          (println acc)\n          (op acc arg)))\n      a args)))","user":"571543bbe4b07c98581c3ad4"},{"problem":135,"code":"(fn [& coll]\n  (reduce #((first %2) %1 (second %2)) (first coll) (partition 2 (rest coll)))\n  \n  )","user":"583667c7e4b089d5ab817cfb"},{"problem":135,"code":"(fn infix [init & op-vals]\n  (reduce (fn [r [f v]] (f r v)) init (partition 2 op-vals)))","user":"57407ab3e4b05c31a32c0854"},{"problem":135,"code":"(fn [x & ops]\n  (reduce (fn [x [f y]] (f x y))\n          x\n          (partition 2 ops)))","user":"5540cc0ce4b0a04f79299505"},{"problem":135,"code":"(fn infix-left-calc [x & xs]\n  (reduce (fn [l [f r]] (f l r)) x (partition 2 xs)))","user":"58e37946e4b005f69f193cae"},{"problem":135,"code":"(fn [& args]\n    (first (reduce (fn [a v]\n                     (let [newstack (cons v a)\n                           [op l] a]\n                       (if (number? v)\n                         (list (op l v))\n                         newstack)\n                       ))\n                   '(+ 0)\n                   args))\n    \n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":135,"code":"(fn [& args]\n  (let [first-arg (first args)\n        rest-args (rest args)]\n    (reduce #((first %2) %1 (second %2)) first-arg (partition 2 rest-args))))","user":"57ebbf3ae4b0bfb2137f5b66"},{"problem":135,"code":"(fn [stack & s]\n  (if (empty? s)\n    stack\n    (let [[op y & t] s]\n      (recur (op stack y) t))))","user":"56eb3f9de4b04a395b9a0420"},{"problem":135,"code":"(fn [& expr] (loop [[x op y & more] expr]\n                      (if op\n                        (recur (cons (op x y) more))\n                        x)))","user":"5782018de4b0d36ec5835e8e"},{"problem":135,"code":"(fn infix [i & exps]\n    (reduce (fn [acc [op j]] (op acc j))\n            i\n            (partition 2 exps)))","user":"4dfe5a93535d04ed9115e786"},{"problem":135,"code":"(fn [& args]\n  (loop [[num-1 op num-2 & remaining] args]\n    (let [result (op num-1 num-2)]\n      (if (empty? remaining)\n        result\n        (recur (conj remaining result))))))","user":"5ca1c45ae4b048ec896c5b85"},{"problem":135,"code":"(fn [& args]\n  (loop [total   (first args)\n         op-args (rest args)]\n    (let [[op arg] (take 2 op-args)]\n      (if op\n        (recur (op total arg) (nthrest op-args 2))\n        total))))","user":"51008b6fe4b0700a7a02d6e4"},{"problem":135,"code":"(fn [& c]   \n  (let [n (filter integer? c)\n        nn (filter (complement integer?) c)\n        x (cons (first n) (interleave (rest n) nn))\n        ]\n    (first (reduce \n      (fn [r a] (if (integer? a) (concat r [a]) [(apply a r)])\n        )\n      []\n     x\n    ))\n  )\n)","user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn f [x op y & m]\n  (if m\n    (apply f (op x y) m)\n    (op x y)))","problem":135,"user":"4ef77edb535dced4c769f254"},{"problem":135,"code":"(fn [& args]\n    (letfn [(c [l a] (if (empty? l)\n                       a\n                       (recur (rest (rest l)) ((first l) a (second l)))))]\n      (c (rest args) (first args))))","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":135,"code":"(fn f\n  ([a o b & r]\n   (apply f (o a b) r))\n  ([a]\n   a))","user":"5829bc55e4b051871117bf49"},{"code":"(fn [& args] (loop [[l o r & rest] args] (if-not rest (o l r) (recur (cons (o l r) rest) ))))","problem":135,"user":"4efccd24535de96065cf5080"},{"code":"(fn calc [left op right & more]\n  (let [tmp (op left right)]\n    (if more (apply calc tmp more) tmp)))","problem":135,"user":"51aa2b4fe4b04e3dc0c27b21"},{"code":"(fn ic [& e] \n  (if \n    (= 1 (count e)) \n    (first e) \n    (apply \n      ic \n      (cons \n        ((second e) (first e) (nth e 2)) \n        (nthnext e 3)))))","problem":135,"user":"50a4f36be4b0344e360f3bc9"},{"problem":135,"code":"(fn [& m]\n  (loop [acc (first m)\n        m (rest m)]\n    (if (seq m)\n      (recur ((first m) acc (second m)) (drop 2 m))\n      acc)))","user":"53f5666ee4b0db01ade6f9cf"},{"problem":135,"code":"(fn calc [& args]\n  (if (= (count args) 1)\n    (first args)\n    (let [data (take 3 args)\n          rest (drop 3 args)\n          op (nth data 1)]\n      (apply calc (conj rest (op (nth data 0) (nth data 2)))))))","user":"5008d149e4b0144d4f561e41"},{"code":"(fn calc [x & [op y & more]]\n  (if (nil? op)\n    x\n  (apply calc (op x y) more)))","problem":135,"user":"4fca4c37e4b0ee37620e184f"},{"problem":135,"code":"(fn infix-calc [& exprs]\n    (loop [xs exprs\n           res (first xs)]\n      (let [[a op b] xs]\n        (if (= 1 (count xs))\n          res\n          (recur (cons res (drop 3 xs)) (op res b))))))","user":"5c58736be4b01df32ab73247"},{"problem":135,"code":"(fn [& operands]\n(let [opset #{* / + -}]\n(:r (reduce (fn [{opf :opf r :r} e]\n    (cond\n    (opset e) {:opf e :r r}\n    :else {:opf nil :r (opf r e)}))\n\t{:opf nil :r (first operands)} \n\t(rest operands)))))","user":"525b142fe4b0cb4875a45d05"},{"code":"(fn [& args] \n  (let [syms (filter fn? args) \n        nums (filter number? args) \n        f #(if (empty? %2) %1 \n             (recur ((first %3) %1 (first %2)) (rest %2) (rest %3)))] \n    (f (first nums) (rest nums) syms)))","problem":135,"user":"5273e006e4b03e8d9a4a7495"},{"problem":135,"code":"(fn calc [& args]\n  (let [[a b c & d] args]\n    (if (empty? d) \n      (b a c)\n      (recur (cons (b a c) d)))))","user":"5b9db58be4b0c0b3ffbd4b41"},{"code":"(fn [& s]\n  (reduce (fn [a [f b]] (f a b)) (first s) (partition 2 (rest s))))","problem":135,"user":"51696ee7e4b03f62cda68ce8"},{"problem":135,"code":"(fn [n & more] (reduce (fn [x [op y]] (op x y)) n (partition 2 more)))","user":"4eb70649535d7eef30807373"},{"problem":135,"code":"(fn calc [a op b & s]\n   (if (empty? s)\n     (op a b)\n     (apply calc (op a b) s)))","user":"54b54d1be4b05787c3b1639c"},{"code":"; too bad eval is \"bad\": (fn [exprs] (eval (concat '(-> (first exprs)) (partition 2 (rest exprs)))))\n; too bad I don't know how to do macros in this Web UI: (defmacro infix [& exprs] `(-> ~(list* '-> (first exprs) (partition 2 (rest exprs)))))\n(fn [fst & rst] (reduce (fn [a [op b]] (op a b)) fst (partition 2 rst)))","problem":135,"user":"4fc7db47e4b0ee37620e182a"},{"code":"(fn [& xs]\n          (reduce #((first %2) % (last %2)) (first xs) (partition 2 (rest xs))))","problem":135,"user":"52c7f036e4b0c2d177d62126"},{"code":"(fn [x & xs] (reduce (fn [a [f b]] (f a b)) x (partition 2 xs)))","problem":135,"user":"4f569a3ce4b0a7574ea71828"},{"problem":135,"code":"(fn calculator [& m]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity m))","user":"5f7e91c8e4b0c071e6c840d8"},{"problem":135,"code":"(fn infix [ v & args ]\n  (loop [[ op n & rest ] args\n         v v ]\n    (if (nil? op)\n      v\n      (recur rest (op v n)))))","user":"574e7be7e4b02ea114799242"},{"code":"(fn nn ([x] x) ([x o y & r ] (apply nn (o x y) r)) )","problem":135,"user":"4ff67852e4b0678c553fc37e"},{"code":"(fn infix\n  ([res] res)\n  ([l op r & rest]\n     (if op\n       (apply infix (op l r) rest)\n       l)))","problem":135,"user":"4fe89297e4b07c9f6fd12c4c"},{"code":"(fn [& expr]\n  (letfn\n      [(prefix [[x op & args]]\n         (if (nil? op) x\n             (op (prefix args) x)))]\n    (prefix (reverse expr))))","problem":135,"user":"4f0c4518535d0136e6c2230b"},{"code":"(fn [hd & tl]\n  (loop [v hd, expr tl]\n    (if (empty? expr)\n      v\n      (let [[f next-v & others] expr]\n        (recur (apply f [v next-v]) others)))))","problem":135,"user":"4ea4fe1f535d7eef308072cf"},{"problem":135,"code":"(fn prefix-math\n  [& args]\n  (let [nums (filter number? args)\n        symbols (filter #(not (number? %)) args)\n        compute (fn compute\n                  [operators numbers acc]\n                  (if (empty? numbers)\n                    acc\n                    (let [op (first operators)]\n                      (recur (rest operators) (rest numbers) (op acc (first numbers))))))]\n    (compute symbols (rest nums) (first nums))))","user":"5b478997e4b02d533a91bc71"},{"code":"(fn [a op b & more] \n  (if (seq more)\n    (recur (op a b) (first more) (second more) (drop 2 more))\n    (op a b)))","problem":135,"user":"523f0bbfe4b01c266ffa7f91"},{"code":"(fn [& a]\r\n  (let [[x y z & c] a]\r\n    (if (= 1 (count a))\r\n      (first a)\r\n      (recur (cons (y x z) c)))))","problem":135,"user":"4fd2e5d8e4b04c3a95aa0427"},{"problem":135,"code":"(fn [num & operations]\n    (let [pairs (partition 2 operations)]\n         (reduce\n          (fn [acc [operation item]] (operation acc item))\n          num\n          pairs)))","user":"58b0bbc5e4b0ebc645576ce6"},{"code":"(fn [x op y & expr] (loop [ acc x op op y y expr expr] (if (empty? expr) (op acc y) (recur (op acc y) (first expr) (second expr) (drop 2 expr)))))","problem":135,"user":"51059d33e4b0380e797c7d5c"},{"problem":135,"code":"(fn infix [x op y & more]\n  (if (empty? more) (op x y) (apply infix (op x y) more)))","user":"552d9b31e4b076ab5578f7eb"},{"problem":135,"code":"(fn [& more] (:result (reduce (fn [m v] \n                                (let [lop (:op m)]\n                                  (if (fn? v) \n                                    (assoc m :op v)\n                                    (if lop\n                                      (-> m\n                                          (assoc :op nil)\n                                          (assoc :result (lop (:result m) v)))\n\t\t\t\t\t\t\t\t\t  (assoc m :result v)                                      \n                                      )))) \n                              {:result 0 :op nil} \n                              more)))","user":"5744d088e4b009280f9f2b41"},{"problem":135,"code":"(fn duder [x & args]\n  (let [o (first args)\n        y (first (rest args))\n        z (rest (rest args))]\n    (if (empty? z)\n      (o x y)\n      (apply (partial duder (o x y)) z)\n      \n      )\n    \n    \n    )\n  \n  \n  \n  \n  )","user":"51fc44c5e4b0f1313d468a1b"},{"problem":135,"code":"(fn calc [x op y & r]\n  (if (empty? r)\n    (op x y)\n    (apply calc (cons (op x y) r))))","user":"55702081e4b09a3098a52529"},{"code":"(fn calc [& args]\n  (:tot (reduce (fn reducer [m n]\n            (if (number? n)\n              (assoc m :tot ((:op m) (:tot m) n))\n              (assoc m :op n)))\n          {:op +, :tot 0} args)))","problem":135,"user":"4faafccde4b081705acca209"},{"code":"(fn infix\r\n  [& args]\r\n\t(let [e (first args) s (second args) t (second (next args))]\r\n\t\t(if s\r\n\t\t\t(apply infix (concat [(s e t)] (drop 3 args)))\r\n\t\t\te)))","problem":135,"user":"4e8a0c82535d3e98b802328d"},{"code":"(fn [& more]\n  (let [calc (fn [init args]\n                 (if (empty? args)\n                   init\n                   (let [op (first args) ed (first (rest args))]\n                     (recur (op init ed) (rest (rest args))))))]\n    (calc (first more) (rest more))))","problem":135,"user":"535920b2e4b04ce2eb3ed294"},{"problem":135,"code":"(fn [& s] (reduce (fn [x [o y]] (o x y)) (first s) (partition 2 (rest s))))","user":"54f0d3fde4b024c67c0cf8a6"},{"code":"(fn [x & z] (reduce #((first %2) % (second %2))\n                      x (partition 2 z)))","problem":135,"user":"4f9754d4e4b0dcca54ed6ce9"},{"code":"(fn [& xs] (reduce #((first %2) %1 (second %2)) (first xs) (partition 2 (rest xs))))","problem":135,"user":"4f7d75a2e4b06e829148e1c2"},{"problem":135,"code":"(fn infix' [& x]\n  (let [[a f b & c] x]\n    (if (= (count x) 1) (first x)\n      (recur (cons (f a b) c)))))","user":"55d9743ae4b0e31453f64aca"},{"problem":135,"code":"(fn [& row]\n  (loop [n nil\n         op nil\n         terms row]\n    (if (empty? terms)\n      n\n      (if (number? (first terms))\n        (if op\n          (recur (op n (first terms)) nil (rest terms))\n          (recur (first terms) op (rest terms)))\n        (recur n (first terms) (rest terms))))))","user":"5032748ae4b0e78df07b092f"},{"problem":135,"code":"(fn calc [v & s]\n  (if (empty? s)\n    v\n    (recur ((first s) v (second s)) (drop 2 s))\n  )\n)","user":"60335b35e4b0d5df2af222bf"},{"code":"(fn [x & y] \n  (reduce (fn [a,[b,c]] (b a c)) x (partition 2 y)))","problem":135,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn infix5 [& y] ((fn xx [x] (if (< 2 (count x))\n                       ((second x)\n                        (xx (rest (rest x)))\n                          (first x)\n                         )\n                       (last x))) (reverse (vec y))))","problem":135,"user":"5296aa9be4b02ebb4ef75034"},{"problem":135,"code":"(fn calc [arg1 op arg2 & args] \n  (let [result (op arg1 arg2)]\n    (if (empty? args)\n      result\n      (apply calc (cons result args))\n    )\n  )\n)","user":"5fd8bcb3e4b05ac5b16ea11b"},{"code":"(fn infix-calculator\n  [x & s]\n  (reduce #((first %2) % (last %2)) x (partition 2 s)))","problem":135,"user":"501b1a8ee4b0b12d9c5f4d81"},{"problem":135,"code":"(fn [result & expr]\n     (if (empty? expr) result\n       (recur ((first expr) result (second expr)) (drop 2 expr))))","user":"5ab3db13e4b073f177442609"},{"problem":135,"code":"(fn calc [& exp] \n  ( reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"55e5c852e4b050e68259b474"},{"problem":135,"code":"(fn infix-calc [v1 op v2 & others]\n  (if (empty? others)\n       (op v1 v2)\n       (apply infix-calc (cons (op v1 v2) others))))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":135,"code":"(fn [& args]\n  (loop [expr (rest args)\n         ans (first args)]\n    (if (seq expr)\n      (recur (nnext expr) ((first expr) ans (fnext expr)))\n      ans)))","user":"5479c58de4b0c51c1f4d72c7"},{"problem":135,"code":"(fn calc [n & params]\n  (reduce #((first %2) %1 (second %2)) n (partition 2 params)))","user":"5a99b863e4b0d174b936c7ae"},{"problem":135,"code":"#((fn infx\n\n    ([x xs]\n\n     (if (= (count xs) 2)\n\n       ((second xs) x (first xs))\n\n       ((second xs) (infx x (drop 2 xs)) (first xs))))) %1 (reverse %&))","user":"586b6a0ae4b01531a375e957"},{"problem":135,"code":"(fn infix [a op b & args]\n   (let [res (op a b)]\n     (if (empty? args)\n       res\n       (apply infix res (first args) (rest args)))))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":135,"code":"(fn calc [frst op scnd & remaining] (let [result (op frst scnd)] (if (empty? remaining) result (apply calc result remaining))))","user":"5c7bc0a5e4b0fca0c1622865"},{"problem":135,"code":"(fn [ & args]\n   (let [ini (first args)\n         ops (partition 2 (rest args))]\n     (reduce (fn [a [op b]] (op a b)) ini ops)\n     )\n   )","user":"538db083e4b0b51d73faae74"},{"code":"(fn [& args]\n  (let [m (group-by number? args)]\n    (loop [ns (rest (get m true))\n           os (get m false)\n           res (first (get m true))]\n      (if (empty? os) res\n          (recur (rest ns) \n                 (rest os) \n                 ((first os) res (first ns)))))))","problem":135,"user":"5027b41ee4b01614d1633fee"},{"code":"(fn f [x o y & rs]\n  (let [first (o x y)]\n    (if (empty? rs) first\n      (apply f (conj rs first)))))","problem":135,"user":"50232eeae4b0b5d8b1bd2397"},{"problem":135,"code":"(fn \n  [a op b & more]\n  (letfn [(infix [a op b] (op a b))]\n  (if (zero? (count more))\n      (infix a op b)\n  \t  (recur (infix a op b) (first more) (second more) (drop 2 more)))))","user":"5723e6d6e4b0c5bde472c0f1"},{"problem":135,"code":"(fn infix [& c] \n        (let [[l op & r] c]\n          (if (seq (rest r))\n            (apply infix (concat (list (op l (first r))) (rest r)))\n            (op l (first r)))))","user":"541ae7dbe4b01498b1a71a61"},{"code":"(fn calc [& xs](reduce #((first %2) % (second %2)) (first xs) (partition 2 (rest xs))))","problem":135,"user":"51c1d159e4b0d204dbe2ca18"},{"problem":135,"code":"(fn [& x] (reduce (fn [x y] (if (number? y) (x y) (partial y x))) x))","user":"5afa3590e4b0cc2b61a3bcea"},{"problem":135,"code":"(fn infix\n  [operand & infixed]\n  (loop [cinfixed infixed result operand]\n    (if (empty? cinfixed)\n      result\n      (let [[operation right & remaining] cinfixed]\n        (recur remaining (operation result right))))))","user":"57f55632e4b0903ccab3dcf1"},{"problem":135,"code":"(fn calc\n  ([x] x)\n  ([x op y] (op x y))\n  ([x op y & rest] (apply calc (calc x op y) rest)))","user":"55d68726e4b0e31453f64a99"},{"problem":135,"code":"(fn calc [n1 s & args]\n  (if (= (count args) 0)\n    n1\n    (recur\n     (s n1 (first args))\n     (first (next args))\n     (next (next args)))))","user":"5e380e72e4b01d43a70e8db0"},{"problem":135,"code":"(fn [& args]\n          (loop [\n                n   (first args)\n                ops (rest args)\n                ]\n            (if (empty? ops)\n              n\n              (let [\n                    operator (first ops)\n                    operand  (fnext ops)\n                    ops (nnext ops)\n                    n (operator n operand)\n                    ]\n                (recur n ops)\n                ))\n              )\n\n          )","user":"55aa5f73e4b0988bba2ad94b"},{"code":"(fn f[a o b & x](if x(apply f(o a b)x)(o a b)))","problem":135,"user":"4dd4034a535dae65d5c462df"},{"problem":135,"code":"(fn calc [h & r]\n  (if-let [[op p & rr] r]\n    (recur (op h p) rr)\n    h))","user":"54c23252e4b045293a27f5fc"},{"problem":135,"code":"(fn [& args] \n   (reduce \n    (fn [p [f s]] (f p s)) \n    (first args)\n    (partition-all 2 (rest args))))","user":"53f6d555e4b0db01ade6f9e5"},{"problem":135,"code":"(fn [a f b & others]\n  (loop[x a\n        f f\n        y b\n        others others]\n    (if (empty? others)\n      (f x y)\n      (recur (f x y)\n             (first others)\n             (second others)\n             (drop 2 others)))))","user":"567d18c9e4b05957ce8c61c4"},{"code":"(fn infixcalc\n  [& args]\n  (loop [result (first args)\n         [op arg2 & remaining] (rest args)]\n    (if (empty? remaining)\n      (op result arg2)\n      (recur (op result arg2) remaining))))","problem":135,"user":"536e5055e4b0fc7073fd6e6b"},{"code":"(fn i [a o b & r]\n  (if r\n    (apply i (o a b) r)\n    (o a b)))","problem":135,"user":"5046ee3ee4b03b02161376b4"},{"problem":135,"code":"(fn calc [& args]\n  (loop [r 0\n         [h & t] args\n         op nil]\n    (cond\n      (nil? h) r\n      (fn? h) (recur r t h)\n      op (recur (op r h) t nil)\n      :else (recur h t nil))))","user":"559622cee4b0c79f6e1db975"},{"code":"(fn [a & b]\n  (reduce #((first %2) %1 (second %2)) a (partition 2 b)))","problem":135,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":135,"code":"(fn [x & xs] (reduce (fn [x [op y]] (op x y)) x (partition 2 xs)))","user":"5b919d9de4b0c0b3ffbd4a24"},{"code":"(fn g [a f b & x] \n  (let [y (flatten x)]\n    (if (or (empty? y) (= nil y))\n\t  (f a b)\n\t  (do\n\t    (g (f a b) (first y) (nth y 1) (drop 2 y))\n\t  )\n\t)\n  )\n)","problem":135,"user":"50f4894be4b004d364930528"},{"code":"(fn calc [acc0 & rst] \n              (println rst)\n                (reduce (fn [acc [op num]] (op acc num))\n                        acc0\n                        (partition 2 rst)))","problem":135,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":135,"code":"(fn [& l]\n  (reduce (fn [s [f x]] (f s x))\n          (first l)\n          (partition 2 (rest l))))","user":"57c796b4e4b05aa3c4741d08"},{"code":"(fn f [l o r & rst]\n  (if (empty? rst)\n      (o l r)\n      (apply f (o l r) rst)))","problem":135,"user":"4f1abbfb535d64f60314646e"},{"problem":135,"code":"(fn infix [l op r & more]\n  (if (seq more)\n    (apply infix (op l r) more)\n    (op l r)))","user":"5e7f075ee4b085ba37836e36"},{"problem":135,"code":"(fn infix [& args]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) args))","user":"59971e2de4b07157cc8daacc"},{"code":"(fn infix [& args]\n  (loop [tokens (rest args)\n         result (first args)]\n    (if (empty? tokens)\n      result\n      (recur (drop 2 tokens) ((first tokens) result (second tokens))))))","problem":135,"user":"4f3a979de4b0e243712b1f10"},{"code":"#(reduce (fn [x y] (if (fn? y) (partial y x) (x y)))  %&)","problem":135,"user":"4fb12b35e4b081705acca275"},{"problem":135,"code":"(fn [x opr y & nxt]\n  (letfn [(infix [x opr y] (opr x y))]\n    (if (zero? (count nxt))\n         (infix x opr y)\n    \t(recur (infix x opr y) (first nxt) (second nxt) (drop 2 nxt)))))","user":"56a80d8fe4b07966d5a8a06a"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [r [op num]] (op r num)) (first args) (partition 2 (rest args))))","user":"53c1ce3ee4b00fb29b221268"},{"problem":135,"code":"(fn [& c]\n  (loop [a (first c)\n         o (nth c 1)\n         b (nth c 2)\n         c (drop 3 c)]\n    (if (= 0 (count c))\n      (o a b)\n      (recur (o a b) (first c) (nth c 1) (drop 2 c)))))","user":"54126d0ce4b01498b1a719d5"},{"code":"(fn infix [& s]\n    (loop [[a & r] s ptl identity]\n      (if (seq r) (recur (rest r) (partial (first r) (ptl a)))\n                  (ptl a))))","problem":135,"user":"4eb0a757535d7eef3080733d"},{"problem":135,"code":"(fn [& l] \n    (letfn [(q[n l]\n              (if (seq l)\n                (q ((first l) n (second l)) (drop 2 l))\n                n\n                )\n              )\n            ]\n      (q (first l) (rest l))\n      )\n    )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":135,"code":"(fn x ([a] a)([a b c & d](apply x (conj d (b a c)))))","user":"54aa665fe4b09f271ff37cb8"},{"code":"(fn calcwerk [no & args]\n  (let [ops (partition 2 args)]\n      (reduce\n        (fn [prev curr]\n            (let [op (first curr)\n                  n (second curr)]\n              (op prev n)))\n        no\n        ops)))","problem":135,"user":"523b10dfe4b02f719975bdb8"},{"problem":135,"code":"(fn [& args] (reduce #((first %2) % (second %2)) (first args) (partition 2 (rest args))))","user":"539dcb24e4b0b51d73faaf3d"},{"problem":135,"code":"(fn Calculator [& exp]\n  (reduce #(if (fn? %1) (%1 %2) \n             (partial %2 %1)) \n          identity exp))","user":"5a99b766e4b0d174b936c7a8"},{"code":"(fn [& args] \n  (let [ initial-value (first args)\n         ops (partition 2 (rest args)) ]\n    (reduce \n      (fn [result [op operand]] (op result operand))\n      initial-value ops)))","problem":135,"user":"4ee3afde535d10e5ff6f5370"},{"code":"(fn infix-calculator [& args]\n  (loop [to-calculate (rest args)\n         result (first args)]\n    (if (empty? to-calculate)\n      result\n      (recur \n       (rest (rest to-calculate))\n       ((first to-calculate) result (second to-calculate))))))","problem":135,"user":"51d360d1e4b099f3b6acddff"},{"code":"(fn [& args] (reduce (fn [a [op1 b]] (op1 a b)) (first args) (partition 2 (rest args))))","problem":135,"user":"534c1c64e4b084c2834f4a8a"},{"problem":135,"code":"(fn calcu [a op b & osta]\n (if (empty? osta) (op a b) (apply calcu (op a b) osta)))","user":"584d99c5e4b0b7285a6f4e42"},{"problem":135,"code":"(fn f [& x]\n  (reduce (fn [a [o b]] (o a b))\n          (first x)\n          (partition 2 (rest x))))","user":"5405885ee4b0addc1aec6668"},{"problem":135,"code":"(fn [i & e] (reduce (fn[r [f v]] (f r v)) i (partition 2 e)))","user":"5481be5fe4b0e286459a1172"},{"problem":135,"code":"(fn ops[sumary & args]\n    (let [o (first args)\n          sec (second args)]\n      (if (and sumary o sec)\n        (apply ops (flatten [ (o sumary sec) (drop 2 args)]))\n        sumary\n        )\n      )\n    )","user":"54bbba99e4b0ed20f4ff6ec2"},{"problem":135,"code":"(fn sdsd[a b c & others]\n  (if (nil? others)\n    (b a c)\n    (apply sdsd (concat [(b a c)] others))))","user":"55f01316e4b06e875b46ce1a"},{"problem":135,"code":"(fn infix [n op n2 & r ]\n    (if (nil? r)\n      (op n n2)\n      (apply infix (cons (op n n2) r)))\n  )","user":"573a0ecce4b0cd1946bd1088"},{"problem":135,"code":"(fn [x & s]\n  (reduce (fn [res [op val]]\n            (op res val))\n          x\n          (partition 2 s)))","user":"55586905e4b0deb715856e2b"},{"code":"(fn [& exprs]\n    (reduce (fn [acc x]\n              (if (fn? x)\n                (partial x acc)\n                (acc x)))\n            exprs))","problem":135,"user":"4dc0ff08535d020aff1edf84"},{"code":"(fn calc \n  ([x] x)\n  ([x op y & r] (apply calc (conj r (op x y)))))","problem":135,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":135,"code":"(fn [n & args]\n     (if (empty? args)\n       n\n       (recur ((first args) n (second args)) (rest (rest args)))))","user":"58134ba8e4b0f478707a060b"},{"problem":135,"code":"(fn infix\n  ([num1 op num2] (op num1 num2))\n  ([num1 op num2 & nums]\n   (apply infix (cons (infix num1 op num2) nums))))","user":"5f8e2a08e4b0715f5002d767"},{"problem":135,"code":"(fn [ & xs] (loop [r (first xs) ops (rest xs)] (if (empty? ops) r (recur ((first ops) r (second ops)) (rest (rest ops))))))","user":"556a3243e4b09a3098a524de"},{"problem":135,"code":"(fn [initial & items]\n    (reduce\n     (fn [acc [op n]]\n       (op acc n))\n     initial\n     (partition 2 items)))","user":"603d5f2ae4b0d5df2af2230c"},{"code":"(fn moo[& args]\n  ((fn rdc[acc, argl]\n     (if (empty? argl)\n       acc\n       (rdc ((first argl) acc (second argl)) (nthnext argl 2)))\n\n    ) (first args) (rest args)))","problem":135,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":135,"code":"(fn [& ops]\n  (loop [[x op y & more] (list* ops)]\n    (if (seq more)\n      (recur (conj more (op x y)))\n      (op x y))))","user":"4e6ffaa3535d5021c1a8962e"},{"problem":135,"code":"(fn \n  [h & t] \n  (reduce \n   #((first %2) %1 (second %2)) \n   h \n   (partition 2 t)))","user":"5462ce20e4b01be26fd746b8"},{"code":"(fn inf [& coll]\n  (loop [s (rest coll), result (first coll)]\n    (if (empty? s)\n      result\n      (recur (drop 2 s) ((first s) result (nth s 1)))\n    )))","problem":135,"user":"52cf084ce4b07d0d72b27399"},{"code":"(fn f [x & xs]\n  (if (empty? xs) x\n    (let [[op n & ns] xs]\n      (apply f (op x n) ns))))","problem":135,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":135,"code":"(fn calc\n    ([a] a)\n    ([a op b & rest]\n        (apply calc (conj rest (op a b)))))","user":"56897829e4b0dcc4269f407e"},{"problem":135,"code":"(fn [n & args]\n    (reduce (fn [acc nxt] ((first nxt) acc (second nxt))) \n      n\n      (partition 2 args))\n    )","user":"5bbbce0ee4b0a20761a2360d"},{"problem":135,"code":"(fn [sum & tail] (reduce (fn [sum [f v]] (f sum v)) sum (partition 2 tail)))","user":"527818f7e4b03e8d9a4a7519"},{"problem":135,"code":"(fn [itemOne & calculator-list]\n  (loop [x calculator-list result itemOne]\n    (if (not= '() x)\n      (recur (rest (rest x)) ((first x) result (second x)))\n      result)))","user":"5628f727e4b00e49c7cb47f5"},{"code":"(fn [x & rest]\n\t(reduce (fn [y [f z]] (apply f [y z]))\n          x\n          (partition 2 rest)))","problem":135,"user":"4daf36c2edd6309eace4d175"},{"code":"(fn infixcalc\n  [& args]\n  ((fn infixexp\n     [[x op & more]]\n     (let [value (op x (first more))]\n       (if (empty? (rest more))\n         value\n         (infixexp (conj (rest more) value)))))\n   args))","problem":135,"user":"4db8d37d535d1e037afb219c"},{"code":"(fn [x & xs]\n  (reduce (fn [acc [op y]]\n\t        (op acc y))\n\t  x (partition 2 xs)))","problem":135,"user":"5160195ae4b0e2be8aa20be3"},{"problem":135,"code":"(fn [& arg_list] \n  (loop [arg_val (first arg_list)\n         op_list (rest arg_list)] \n    (if (empty? op_list)\n      arg_val\n      (recur ((first op_list) arg_val (second op_list)) (drop 2 op_list) )\n      )\n    )\n  )","user":"5ae71f14e4b0837691e92ca7"},{"problem":135,"code":"(fn [& args] (reduce (fn [sum [op n]] (op sum n)) (first args) (partition 2 (rest args))))","user":"58ee84e5e4b056aecfd47dab"},{"problem":135,"code":"(fn [inicio & args]\n  (let [parts\n        (partition 2 args)]\n    (reduce (fn [ant nuevo] ((first nuevo) ant (second nuevo))) inicio parts)))","user":"5bcb672ee4b07a9b28b10100"},{"code":"(fn f \n  ([a] a)\n  ([a o b & r] (apply f (o a b) r)))","problem":135,"user":"4ef2d243535dced4c769f221"},{"problem":135,"code":"(fn infix-calculator\n  ([a] a)\n  ([a op b & tokens] (apply infix-calculator (op a b) tokens)))","user":"5879d577e4b01531a375ead8"},{"code":"(fn [& xs]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity xs))","problem":135,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":135,"code":"(fn [& s]\n    (reduce (fn [cur [op n]]\n              (op cur n))\n            (first s)\n            (partition 2 (rest s))))","user":"4e617114535d8ccf87e9fe5b"},{"problem":135,"code":"(fn[& lst] (loop [lst lst]\n              (let [n1 (first lst)\n                    op (second lst)\n                    n2 (first (rest (rest lst)))]\n                  (if (= 3 (count lst))\n                      (op n1 n2)\n                      (recur (cons (op n1 n2) (rest (rest (rest lst)))))\n                      )))\n     )","user":"5f727d2fe4b02876ed9fd08f"},{"problem":135,"code":"#(reduce (fn [r [f x]] (f r x)) 0 (partition 2 (-> %& seq (conj +))))","user":"56dc3bdfe4b0ea9b8538f819"},{"problem":135,"code":"(fn [& formula]\n  (let [result (first formula)\n        op-num-pairs (partition 2 (rest formula))]\n    (reduce (fn [r [ops n]]\n              (ops r n))\n            result op-num-pairs)))","user":"50385746e4b0803468ea2c6d"},{"problem":135,"code":"(fn infix-calc [& args]\n  (reduce (fn [i [f val]] (f i val)) (first args) (partition 2 (rest args)))\n\n  )","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn f\n  ([a] a)\n  ([a op b & s]\n    (apply f (op a b) s)))","problem":135,"user":"4e39d763535deb9a81d77f46"},{"problem":135,"code":"(fn calc ([l] l) ([l op r & args] (apply calc (op l r) args)))","user":"5710140fe4b09c608db7042e"},{"problem":135,"code":"(fn [& args]\n   (loop [new-args (rest args)\n          result (first args)]\n     (if (empty? new-args)\n       result\n       (recur (drop 2 new-args) ((first new-args) result (second new-args))))))","user":"571cd9dce4b0145328a76271"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [accum [op arg]] (op accum arg)) (first args) (partition 2 (rest args))))","user":"50b42cbbe4b001349b2f4abe"},{"code":"(fn calc [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","problem":135,"user":"5032b066e4b00c0952a257ea"},{"code":"(fn [ & [i o n & r]]\n  (if o\n    (recur (conj r (o i n)))\n    i))","problem":135,"user":"4e7dfab0535db169f9c796f9"},{"code":"#(loop [n (first %&)\n        l  (rest %&)]\n  (if (empty? l)\n      n\n      (recur ((first l) n (second l)) (nnext l))))","problem":135,"user":"50a83315e4b054305ba5a830"},{"problem":135,"code":"(fn [a & args ] (let [op (nth args 0) b (nth args 1) y (op a b) nargs (drop 2 args)] (if (empty? nargs) y (recur y nargs))))","user":"53b2a7f8e4b047364c04449c"},{"code":"(fn infix [op1 f op2 & others] (if (empty? others) (f op1 op2) (apply infix (cons (f op1 op2) others))))","problem":135,"user":"52cdb7efe4b07d0d72b2737c"},{"problem":135,"code":"(fn [a x b & rest] (if (seq rest) (recur (x a b) (first rest) (second rest) (drop 2 rest)) (x a b)))","user":"553a43cae4b09218d5f44ff2"},{"problem":135,"code":"(fn calc [& args]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity args))","user":"59e63a2ce4b08badc2a0c569"},{"problem":135,"code":"(fn [& args]\n  (loop [nargs (rest args)\n         res (first args)]\n    (if (empty? nargs)\n      res\n      (recur (drop 2 nargs)\n             (reduce (first nargs) (list res (nth nargs 1)))))))","user":"5c748bf5e4b0fca0c16227cb"},{"problem":135,"code":"(fn infix-calc [& es]\n  (loop [[a op b & es] es]\n    (if (nil? op)\n      a\n      (recur (cons (op a b) es)))))","user":"5f300f28e4b033932238a682"},{"code":"(fn [& lst] (reduce (fn [a [b c]] (b a c)) (first lst) (partition 2 (rest lst))))","problem":135,"user":"52570aeae4b0541d1855ba42"},{"code":"(fn [a & b]\n  (if (empty? b)\n    a\n    (recur ((first b) a (first (rest b)))\n           (rest (rest b)))))","problem":135,"user":"4daeabf6edd6309eace4d15c"},{"code":"(fn asdf [a b c & d] (if (empty? d) (b a c) (apply asdf (b a c) (first d) (second d) (drop 2 d))))","problem":135,"user":"5012036ce4b0a040369c12f4"},{"code":"(fn [& args]\n  (if (= (count args) 1) (first args)\n      (let [[x op y & coll] args]\n        (recur (cons (op x y) coll)))))","problem":135,"user":"51181009e4b0e0897831a60f"},{"problem":135,"code":"(fn infix-calc\n  ([x] x)\n  ([x op y & more] (apply infix-calc (op x y) more)))","user":"57a4fa50e4b0a966079561f1"},{"problem":135,"code":"(fn [& args] ((fn [exprs] (if (= (count exprs) 1) (first exprs)\n                              (recur (cons ((nth exprs 1) (nth exprs 0) (nth exprs 2)) (drop 3 exprs))))) args))","user":"584dadebe4b0b7285a6f4e44"},{"problem":135,"code":"(fn [x & args] \n   (reduce #((first %2) % (last %2)) x (partition 2 args)))","user":"51c8f1d8e4b07ef393169e5d"},{"code":"#(reduce (fn [v i] (if (fn? i) (partial i v) (v i))) identity %&)","problem":135,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":135,"code":"(fn infix\n  [x op y & rem]\n  (if (empty? rem)\n    (op x y)\n    (apply infix (op x y) rem)))","user":"5f003099e4b0cf489e8d7f17"},{"code":"(fn calc [& expr]\n  (loop [acc 0 num nil op + expr expr]\n    (println acc num op expr)\n    (cond\n      (empty? expr) (op acc num)\n      (nil? op) (recur acc num (first expr) (rest expr))\n      (nil? num) (recur acc (first expr) op (rest expr))\n      :else (recur (op acc num) nil nil expr))))","problem":135,"user":"4dafa380edd6309eace4d17c"},{"code":"(fn simple-calc [n & args]\n  (if (seq args)\n    (recur ((first args) n (second args)) (drop 2 args))\n    n))","problem":135,"user":"4ec75077535d6d7199dd36e0"},{"code":"(fn [a & coll]\n  (reduce #((first %2) % (second %2)) a (partition 2 coll)))","problem":135,"user":"5152bc4ee4b001f44f99bfef"},{"problem":135,"code":"(fn calc [x & more]\n  (if-not (empty? more)\n    (recur ((first more) x (second more)) (drop 2 more))\n    x))","user":"58524875e4b0b7285a6f4ead"},{"problem":135,"code":"(fn [& args]\n    (reduce (fn [p x]\n              (if (number? x) (p x) (partial x p)))\n            identity\n            args))","user":"6026d2cae4b0d5df2af22232"},{"code":"(fn [& args]\r\n  (reduce #((first %2) % (second %2)) (first args) (partition 2 (rest args))))","problem":135,"user":"4facff22e4b081705acca230"},{"code":"(fn [& x]\r\n  (loop [x x]\r\n      (if (= (count x) 1)\r\n        (first x)\r\n        (let [f (vec (take 3 x))]\r\n          (recur (cons ((f 1) (f 0) (f 2))\r\n                       (drop 3 x)))))))","problem":135,"user":"4db4714f535dc0f10411755a"},{"problem":135,"code":"(fn [origin & args] (reduce (fn [x [f y]] (f x y)) origin (partition 2 args)))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":135,"code":"(fn f [& args]\n  (loop [remain (rest args)\n         x (first args)]\n    (if (empty? remain)\n      x\n      (let [op (first remain)\n            y (first (rest remain))]\n        (recur (rest (rest remain))\n               (op x y))))))","user":"5777c3d6e4b0979f8965164f"},{"problem":135,"code":"(fn [& expr]\n  (loop [[x & xs] expr acc 0 op +]\n     (cond \n      (nil? x) acc\n      (number? x) (recur xs (op acc x) nil)\n      :else (recur xs acc x))))","user":"549c1713e4b0f3d1d8e70f82"},{"code":"(fn [x & inst]\n  (reduce\n   #((first %2) % (last %2))\n   x\n   (partition 2 inst)))","problem":135,"user":"524f61bee4b0541d1855b80f"},{"problem":135,"code":"(fn infix [& args]\n  (reduce (fn [arg1 arg2]\n            (if (number? arg1)\n              (partial arg2 arg1)\n              (arg1 arg2)))\n          args))","user":"5235493ee4b05e80434a5064"},{"problem":135,"code":"(fn [& formula]\n  (loop [formula formula]\n    (let[[left-op operator right-op & rest-not] formula]\n    (if (empty? rest-not)\n      (operator left-op right-op)\n      (recur (cons (operator left-op right-op) rest-not))))))","user":"57202eb7e4b0c5bde472c090"},{"problem":135,"code":"(fn infix\n  ([x op y] (op x y))\n  ([x op y & xs]\n    (apply infix (cons (infix x op y)\n    \t\t\t\txs))))","user":"527ccaf4e4b0757a1b17136d"},{"code":"(fn [initial & ops]\n  (reduce (fn [total [f v]] (f total v)) initial (partition 2 ops)))","problem":135,"user":"5125d963e4b05d10e3e395fe"},{"problem":135,"code":"(fn infix-calc [el & args]\n   (let [operation (take 2 args)]\n     (if (empty? args)\n       el\n       (apply infix-calc ((first operation) el (last operation)) (drop 2 args)))))","user":"5db98f39e4b010eb3c36cd53"},{"problem":135,"code":"(fn inf ([x op y] (op x y))\n  \t([x op y & more] (apply inf (conj more (op x y)))))","user":"56561119e4b0f9d632dd849d"},{"code":"(\n  fn sol [ a & coll ](\n\t\treduce #( ( first %2 ) % ( last %2 ) ) a ( partition 2 coll ) \n\t) \n)","problem":135,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"(fn [& args]\n  (let [initial-value (first args)\n        operations (partition-all 2 (rest args))]\n    (reduce #((first %2) %1 (last %2)) initial-value operations)))","problem":135,"user":"4ec70f26535d6d7199dd36dd"},{"problem":135,"code":"(fn [& r]\n  (reduce #(if (not (number? %2))\n             (partial %2 %1)\n             (%1 %2)) r))","user":"574b4f3ee4b02ea114799207"},{"code":"(fn calc [& args]\n  (reduce #((first %2) %1 (last %2))\n          (first args)\n          (partition 2 (rest args))))","problem":135,"user":"4eb66737535d7eef3080736b"},{"problem":135,"code":"(fn [l & r] (if (= (count r) 0) l (recur ((first r) l (first (next r))) (drop 2 r)) ))","user":"5c35acffe4b0d62ef62d9f62"},{"code":"(fn calc [x op y & more]\n\t(if more\n      (apply calc (op x y) more)\n      (op x y)))","problem":135,"user":"4f21838fe4b0d66497709fd2"},{"code":"(fn [& s] (loop [r (first s) ss (rest s)] \n                     (if (empty? ss) r\n                       (recur ((first ss) r (second ss))\n                              (nnext ss)))))","problem":135,"user":"513bb7a6e4b04402f587b77d"},{"problem":135,"code":"(fn evaluate\n  [x & xs]\n  (let [f (fn g \n            [a [y z & ys]]\n             (if (first ys)\n               (g (y a z) (vec ys))\n               (y a z)))]\n    (f x (vec xs))))","user":"59390a35e4b02506e01a29f3"},{"code":"(fn calc\n        ([a o b & args]\n           (apply calc (o a b) args))\n        ([a] a))","problem":135,"user":"4f031eac535dcb61093f6a67"},{"problem":135,"code":"(fn infix-calc\n  [a op b & exps]\n  (let [ab (op a b)\n        op-tuples (partition 2 exps)]\n    (reduce #((first %2) %1 (second %2)) ab op-tuples)))","user":"4fc524aae4b081705acca37e"},{"code":"(fn [n & args]\n  (if args\n    (let [[op x & xs] args]\n      (recur (op n x) xs)  \n    )\n    n\n  ) \n)","problem":135,"user":"51ba8f82e4b0fe3ecfb46434"},{"code":"(fn [x & c] (reduce (fn [i [f j]] (f i j)) x (partition 2 c)))","problem":135,"user":"4f50d933e4b03ad3f0c10d11"},{"code":"(fn appl [a & [op b & next]]\n  (if op \n    (apply appl (cons (op a b) next))\n    a))","problem":135,"user":"507a396be4b08327cd804a69"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [res [op num]] (op res num))\n          (first args)\n          (partition 2 (rest args))))","user":"56603e5fe4b068f2fe63dc4a"},{"problem":135,"code":"(fn f [fst & rst]\n  (reduce (fn [m [op opd]] (op m opd)) fst (partition 2 rst)))","user":"56795deae4b05957ce8c6187"},{"problem":135,"code":"(fn [x & s]\n  (reduce (fn [a [f b]] (f a b)) x (partition 2 s)))","user":"5504dd64e4b086ebe8a79c83"},{"problem":135,"code":"(fn calc [& args]\n  (let [[x f y] (take 3 args)\n        args (apply list args)\n        result (f x y)]\n    (if \n      (= 3 (count args)) \n      \tresult\n      \t(apply calc (conj (drop 3 args) result))\n    )\n  )\n)","user":"560ae540e4b05f002753df0d"},{"code":"(fn infix [& s]\n  (loop [[l op r & rr] s]\n    (if rr\n      (recur (cons (op l r) rr))\n      (op l r)\n      )\n    )\n  )","problem":135,"user":"506ab9bae4b05d3b7762c74c"},{"problem":135,"code":"(fn [& args]\n  (let [nums (filter number? args) \n        ops (filter (complement number?) args)]\n    (loop [nums nums ops ops]\n      (if (> (count nums) 1)\n        (let [op1 (first nums)\n              op2 (second nums)\n              fun (first ops)]\n          (recur (cons (fun op1 op2) (drop 2 nums))\n                 (rest ops)))\n        (first nums)))))","user":"5385e633e4b06839e8705f08"},{"problem":135,"code":"(fn calc [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) exp))","user":"572de985e4b0cd1946bd0f7c"},{"code":"(fn infix [x & coll]\n  (if (empty? coll) x\n    (let [ [f y & r] coll]      \n       (apply infix (cons (f x y) r)))))","problem":135,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"(fn [a opr c & ops]\n  (if (nil? ops)\n    (opr a c)\n    (recur (opr a c) (first ops) (second ops) (next (next ops)))))","problem":135,"user":"501b1efee4b0b12d9c5f4d82"},{"problem":135,"code":"(fn [& math]\n  (let [[initial & operations] math]\n  \t(->> operations\n\t\t(partition 2)\n        (reduce (fn [a [operation b]]\n                  (operation a b))\n                initial))))","user":"54da46e5e4b024c67c0cf753"},{"code":"(fn [x & xs] (reduce (fn [x [f y]] (f x y)) x (partition 2 xs)))","problem":135,"user":"51ca7906e4b08b1cbd0d9487"},{"code":"(fn simplecaculate [a & args]\r\n  (loop [result a args args]\r\n    (if (next args)\r\n      (recur ((nth args 0) result (nth args 1)) (drop 2 args) )\r\n      result)))","problem":135,"user":"4fd170fce4b04c3a95aa0411"},{"code":"(fn ifx [a op b & rst]\n  (if (empty? rst) (op a b)\n    (apply\n      ifx\n      (op a b)\n      (first rst)\n      (rest rst))))","problem":135,"user":"4e356d2b535deb9a81d77f2d"},{"problem":135,"code":"#(loop [l (rest %&) res (first %&)] (if (empty? l) res (recur (drop 2 l) ((first l) res (second l)))))","user":"5686b7c7e4b0dcc4269f4057"},{"code":"(fn [& args]\n  (loop [my-args args]\n    (if (= 1 (count my-args))\n      (first my-args)\n      (let [[a op b & more] my-args]\n        (recur (cons (op a b) more))))))","problem":135,"user":"50b29029e4b03ea880433563"},{"code":"(fn infix\n  ([x op y] (op x y))\n  ([x op y & xs]\n   (apply infix (cons (op x y) xs))))","problem":135,"user":"523ea111e4b057c4b7cd0a65"},{"code":"(fn [& math]\n           (let [[x op y & rest] math]\n             (if (nil? op)\n               x\n               (let [result (op x y)]\n                 (recur (concat [result] rest))))))","problem":135,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":135,"code":"(fn [ & s] (loop [[x y z & xs] s]\n   (if (nil? xs) (y x z)\n     (recur  (cons (y x z) xs)))))","user":"57dafe97e4b0bd073c20241c"},{"problem":135,"code":"(fn [x & args] (reduce\n              (fn [a [op b]] (op a b))\n              x\n              (partition 2 args)))","user":"581dad0ae4b04b46fc4b0f17"},{"problem":135,"code":"(fn [& arg]\n  (let [v (vec arg)]\n    (if (= 1 (count v))\n      (first v)\n      (recur (cons\n               ((second v) (first v) (nth v 2))\n               (drop 3 v))))))","user":"565487dce4b0f9d632dd8482"},{"problem":135,"code":"(fn [& args]  \n   (loop [l (seq args)]\n     (let [v ((second l) (first l) (nth l 2))]\n       (if (empty? (drop 3 l))\n         v\n         (recur (conj (drop 3 l) v))))))","user":"585dbe41e4b0f14aab7c879f"},{"problem":135,"code":"(fn [i & args] (reduce #((first %2) %1 (last %2)) i (partition 2 args)))","user":"512b07f7e4b078b06821febb"},{"code":"(fn [& v]\n   (reduce #((first %2) %1 (second %2)) \n              (first v)\n              ((comp (partial partition 2) rest) v)))","problem":135,"user":"501fa1aee4b0cb6ebc0a42eb"},{"code":"(fn self\n  ([x op y] (op x y))\n  ([x op y & args]\n     (apply self (op x y) args)))","problem":135,"user":"5233ad08e4b07e3ee2be83ac"},{"code":"(fn infix-calc [& xs]\n  (cond (empty? xs) '()\n        (= (count xs) 1) (first xs)\n        (= (count xs) 2) nil\n        true (let [x1 (nth xs 0) op (nth xs 1) x2 (nth xs 2)]\n               (apply infix-calc (cons (op x1 x2) (drop 3 xs))))))","problem":135,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn [num1 & opnums]\n  (reduce #(let [[f n] %2] (f %1 n)) num1 (partition 2 opnums)))","problem":135,"user":"4ef89fb0535dced4c769f260"},{"code":"(fn [& ops] (let [gatherops (fn [calc] (reduce #(if (number? %2) (assoc %1 :numbers (conj (:numbers %1) %2)) (assoc %1 :ops (conj (:ops %1) %2))) {:numbers [] :ops []} calc)) calcops (fn [stacks] (loop [op (:ops stacks) num (:numbers stacks)] (if (< (count num) 2) (first num) (recur (rest op) (conj (drop 2 num) (apply (first op) (take 2 num)))))))] (calcops (gatherops ops))))","problem":135,"user":"4ed6238d535d10e5ff6f52de"},{"code":"(fn f [a o b & c]\r\n  (if c\r\n    (apply f (o a b) c)\r\n    (o a b)))","problem":135,"user":"50b47c46e4b0c464d223d1b8"},{"problem":135,"code":"(fn [n & args] (if-not (seq args) n (recur ((first args) n (second args)) (nnext args))))","user":"4e6fa38b535d5021c1a89622"},{"code":"(fn [& l]\n   (loop [l l\n          acc nil\n          opr (first (filter fn? l))]\n     (if (nil? opr)\n       acc \n       (do \n         (println \"L: \" l)\n         (println \"ACC: \" acc)\n         (println \"OPR: \" opr)\n         (recur\n          (drop-while integer? (remove #{opr} l))\n          (if acc \n            (apply opr acc (take-while integer? (remove #{opr} l)))\n            (apply opr (take-while integer? (remove #{opr} l))))\n          (first (filter fn? (remove #{opr} l))))))))","problem":135,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":135,"code":"(fn infix\n  ([n] n)\n  ([n f] (f n))\n  ([n f o] (f n o))\n  ([n f o & r] (apply infix (f n o) r)))","user":"5ebff55de4b00a66d4a95286"},{"code":"(fn calculator [& nodes]\n  (let [first-node (first nodes)\n        calculate (fn [remaining current previous current-operation]\n                    (let [next-previous (if (nil? current-operation)\n                                          previous\n                                          (current-operation previous current))]\n                      (if (empty? remaining)\n                        next-previous\n                        (recur\n                         (rest remaining)\n                         (first remaining)\n                         next-previous\n                         (if (number? current) nil current)))))]\n    \n    (calculate (rest nodes) first-node first-node nil)))","problem":135,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [res [op value]] (op res value)) (first args) (partition 2 (rest args)) ))","user":"5ab23a78e4b073f1774425e1"},{"problem":135,"code":"(fn [& args]\n  (reduce\n   \t(fn [n [op x]]\n      (if (fn? op)\n        (op n x)\n        n))\n    (first args)\n   \t(partition 2 1 args)))","user":"5626447fe4b00e49c7cb47bd"},{"code":"(fn [& arr]\n  ((fn h [[v f & ar]]\n    (if (nil? ar)\n      v\n      (f (h ar) v)))\n  (reverse arr)))","problem":135,"user":"515896f2e4b059418b97f0a8"},{"problem":135,"code":"#({2 7,38 42,10 8,20 72}% %&)","user":"4db2903f535df7e46ed9b6bf"},{"code":"(fn calculate [result & other-ops]\n  (if (empty? other-ops)\n    result\n    (let [operator (first other-ops)\n          operand (first (rest other-ops))\n          result (reduce operator (list result operand))]\n      (recur result (rest (rest other-ops))))))","problem":135,"user":"4f0feb75535d64f60314640f"},{"code":"(fn [& arg]\n  (reduce \n    (fn [acc op] ((first op) acc (second op)))\n    (first arg)\n    (partition 2 (rest arg))))","problem":135,"user":"4fc0853ae4b081705acca327"},{"code":"(fn i [a o b & x]\n  (if x\n    (apply i (o a b) x)\n    (o a b)))","problem":135,"user":"4daef21cedd6309eace4d169"},{"code":"(fn infix ([x op y] (op x y))\n          ([x op y op2 & xs] (apply infix (infix x op y) op2 xs)) \n)","problem":135,"user":"4f6345b8e4b0defedf855fe2"},{"code":"(fn [firstlhs & t]\n  (let [oprhs (partition 2 t)]\n    (reduce (fn [lhs [op rhs]] (op lhs rhs)) firstlhs oprhs)))","problem":135,"user":"4fa340b4e4b081705acca18c"},{"problem":135,"code":"#(loop [result (first %&) remaining (rest %&)]\n   (if (empty? remaining) \n     result \n     (recur ((first remaining) result (second remaining)) \n            (drop 2 remaining))))","user":"5956c6dae4b066ee0a44af61"},{"code":"(fn [& x]\r\n  (if (= (count x) 1)\r\n    (first x)\r\n    (recur\r\n      (cons ((second x) (first x) (nth x 2))\r\n            (drop 3 x)))))","problem":135,"user":"4da3e51330acd6ed10482a68"},{"problem":135,"code":"(fn  [& args]\n  (reduce (fn [a [op b]] (op a b))\n          (first args)\n          (partition 2 (rest args))))","user":"55e6c3f5e4b050e68259b48c"},{"code":"(fn [fst & rst]\n  (reduce #(%2 %1) fst\n          (map\n           (fn [pair]\n             #((first pair) % (nth pair 1)))\n           (partition 2 rst))))","problem":135,"user":"5315a4f0e4b08068f379ed2e"},{"problem":135,"code":"(fn [& xs]\n  (reduce (fn [a [f b]] (f a b)) (first xs) (partition 2 (rest xs))))","user":"56706f01e4b0a866af6896f2"},{"problem":135,"code":"(fn [& args]\n  (loop [acc (first args) rems (rest args)]\n    (if (empty? rems)\n      acc\n      (recur ((first rems) acc (second rems)) (nthrest rems 2)))))","user":"5ab276f2e4b073f1774425e6"},{"code":"(fn infix\n  ([x y z]\n    (y x z))\n  ([x y z & xs]\n    (apply infix (cons (y x z) xs))))","problem":135,"user":"4fda108ee4b05e33b9224f46"},{"problem":135,"code":"(fn [ & xs]\n  (loop [[x & xs] xs arg 0 ops +]\n    (cond (nil? x) arg\n          (number? x) (recur xs (ops arg x) nil)\n          :else (recur xs arg x))))","user":"546176e7e4b01be26fd746a2"},{"code":"(fn [& args]\n      (loop [numbers (filter number? args)\n             operators (remove number? args)]\n        (if (empty? operators)\n          (first numbers)\n          (recur\n           (cons\n            ((first operators) (first numbers) (second numbers))\n            (drop 2 numbers))\n           (rest operators))\n          )))","problem":135,"user":"53838742e4b06839e8705ee0"},{"code":"(fn infix-cal [& args]\n  (loop [v args]\n    (if (= (count v) 1)\n      (first v)\n      (let [part ((second v) (first v) (nth v 2))\n            remainder (drop 3 v)]\n        (recur (cons part remainder))))))","problem":135,"user":"4e7263a1535d5021c1a8965f"},{"problem":135,"code":"(fn [& coll]\n  (first\n   (reduce (fn [[val op] cur]\n             (cond\n              (number? cur) [(op val cur) nil]\n              :else [val cur]))\n            [0 +]\n            coll)))","user":"5f37839ee4b0574c87022c59"},{"problem":135,"code":"(fn infix-calculator [& xs]\n   (loop [cur (first xs)\n          xs (rest xs)]\n     (if (empty? xs) cur\n         (let [[op right & xs] xs]\n           (recur (op cur right) xs)))))","user":"5d4b2155e4b0776584bd6f28"},{"problem":135,"code":"(fn [n & xs]\n  (reduce (fn [acc [op n]] (op acc n)) n \n          (partition 2 xs)))","user":"50d3ec8be4b030b634c368bb"},{"problem":135,"code":"#(reduce (fn [acc [f x]] (f acc x)) \n         %1 \n         (partition 2 %&))","user":"53acaf1fe4b047364c04445f"},{"problem":135,"code":"(fn [& args]\n  (loop [v (vec args)]\n    (println v)\n    (if (= (count v) 1)\n      (peek v)\n      (recur (apply vector\n                    ((second v) (first v) (nth v 2))\n                    (nthrest v 3))))))","user":"4f1e4ab5535d64f603146496"},{"problem":135,"code":"(fn [& s]\n  (reduce (fn [result [op elem]]\n            (op result elem)) (first s) (map vector (filter fn? s) (rest (filter (complement fn?) s)))))","user":"60b8b0f8e4b0e0fa5f1b425c"},{"code":"(fn [a & s]\n  (loop [x a c s]\n    (if (seq c)\n      (let [[p n & r] c]\n        (recur (p x n) r))\n      x)))","problem":135,"user":"531488f3e4b08068f379ed16"},{"code":"(fn infix [l op r & more]\n  (if (nil? more)\n    (op l r)\n    (apply infix (op l r) more)))","problem":135,"user":"4f58fe71e4b0a7574ea7185f"},{"problem":135,"code":"(fn infix-calculator [r & op-num-list]\n  (reduce (fn [r [op num]] (op r num))\n          r (partition 2 op-num-list)))","user":"56ac81ace4b03c432f187347"},{"code":"(fn z\n  ([x o y & r] (apply z (o x y) r))\n  ([x] x))","problem":135,"user":"4db29f98535df7e46ed9b6c1"},{"code":"(fn f [& [a op b & c]] (if (nil? b) a (apply f (cons (op a b) c))))","problem":135,"user":"50742549e4b054001656accf"},{"problem":135,"code":"(fn\n  [& a]\n  (loop [n (rest (filter number? a)) f (filter fn? a) r (first a)]\n    (if (empty? f)\n      r\n      (recur (rest n) (rest f) ((first f) r (first n))))\n    )\n  )","user":"5772ddb0e4b0979f896515d4"},{"problem":135,"code":"(fn [a & xs] \n (reduce\n  (fn [acc [op b]]\n   (op acc b))\n   a\n   (partition 2 xs)))","user":"57f9011ee4b0d3187e900935"},{"problem":135,"code":"(fn [& args]\n  (reduce\n    (fn [a [op b]]\n      (op a b))\n    (first args)\n    (partition 2 (rest args))))","user":"5b99554ae4b0c0b3ffbd4ace"},{"code":"(fn [x & args]\n  (loop [x x args args]\n    (if (empty? args)\n        x\n        (recur ((first args) x (second args))\n               (drop 2 args)))))","problem":135,"user":"50435689e4b034ff00315d21"},{"code":"(fn infixr \n  ([a op b] (op a b))\n  ([a op b & others] \n    (apply infixr (op a b) (first others) (rest others))))","problem":135,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":135,"code":"(fn [f & args]\n  (let [ops (partition 2 args)]\n    (reduce #(apply (first %2) [%1 (second %2)]) f ops)))","user":"5daae405e4b000c986472c44"},{"problem":135,"code":"(fn [& exprs]\n  (loop [[x & xs] exprs\n         value (constantly x)]\n    (cond\n     (nil? x) (value)\n     (number? x) (recur xs (constantly (value x)))\n     :else (recur xs #(x (value) %))\n     )))","user":"527dc2aee4b0757a1b17138d"},{"problem":135,"code":"(fn [& arr] (loop [[a op b] (take 3 arr) s (drop 3 arr)] (if (empty? s) (op a b) (let [newS (cons (op a b) s)] (recur (take 3 newS) (drop 3 newS))))))","user":"5ce62d8ee4b0a17bb84e2b83"},{"code":"(fn i [a o b & c]\n  (if (empty? c)\n    (o a b)\n    (apply i (o a b) (first c) (second c) (drop 2 c))))","problem":135,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn [x & xs]\n  (reduce (fn [a [f b]] (f a b)) x (partition 2 xs)))","problem":135,"user":"4e8f4f64535d65386fec2149"},{"code":"#((fn e [l] \n    (if (= 1 (count l)) (first l)\n    (apply  (last (butlast l))\n            [(e (butlast (butlast l)))\n            (last l)]))) %&)","problem":135,"user":"4fa30027e4b081705acca187"},{"code":"(fn [& xs]\n  (reduce\n    (fn [x p]\n      ((first p) x (second p)))\n    (first xs)\n    (partition 2 (rest xs))))","problem":135,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"problem":135,"code":"(fn my-infix-calc [& arguments]\n  (let [groups (group-by #(contains? #{- + / *} %) arguments)\n        args (reverse (groups false))\n        ops (reverse (groups true))]\n    ((fn this [as os]\n       (println as os)\n       (if (= (count os) 1)\n         ((first os) (second as) (first as))\n         ((first os) (this (rest as) (rest os)) (first as))))\n     args ops)))","user":"55b28b57e4b01b9910ae296c"},{"code":"(fn [x & xs] (reduce (fn [result [op right]] (op result right)) x (partition 2 xs)))","problem":135,"user":"50e3ddd4e4b01912b3285c47"},{"problem":135,"code":"(fn recursive-infix [& args]\n  (if (not= 1 (count args)) ;;base case\n   (apply recursive-infix \n    (conj (drop 3 args) (apply #(%2 %1 %3) (take 3 args)))) \n (first args)))","user":"56ede653e4b04a395b9a0449"},{"problem":135,"code":"(fn infix\n   [x f & args]\n   (let [y (first args)\n         xs (rest args)]\n     (if (empty? xs)\n       (f x y)\n       (apply infix (f x y) xs))))","user":"56c70cc2e4b0ed865f9758b5"},{"problem":135,"code":"(fn [& xs]\n  (loop [[arg1 op arg2 & others] xs]\n    (if-not (nil? others)\n      (recur (conj others (op arg1 arg2)))\n      (op arg1 arg2))))","user":"573d8658e4b05c31a32c0814"},{"code":"(fn calc[& coll]\r\n  ((fn calculate[coll]\r\n      (if (= (count coll) 3)\r\n    \t\t((second coll) (first coll) (last coll))\r\n    \t\t(calculate (cons ((second coll) (first coll)\r\n                              (nth coll 2))\r\n                             \t(rest (rest (rest coll))))))) coll))","problem":135,"user":"5065bd94e4b0148eb3925aed"},{"problem":135,"code":"(fn doMath ([r] r) ([a op b & more] (apply doMath (op a b) more)))","user":"580c8fcee4b0849f6811b721"},{"problem":135,"code":"(fn [& args]\n  (->> (partition 2 (rest args))\n       (reduce (fn [acc [op n]]\n                 (op acc n))\n               (first args))))","user":"5484c3b2e4b0e286459a11a2"},{"code":"(fn [& vals]\n  (loop [fval (first vals)\n         rvals (rest vals)]\n    (if (seq rvals)\n      (let [f (first rvals)\n            y (second rvals)]\n        (recur (f fval y) (drop 2 rvals)))\n      fval)))","problem":135,"user":"505bd09fe4b032b709c81373"},{"problem":135,"code":"(fn [& o]\n  (reduce\n   #(%2 %1)\n   (first o)\n   (map #(apply (fn [f v]\n                  (fn [a] (f a v))) %)\n        (partition 2 (rest o)))))","user":"5dab11cde4b000c986472c45"},{"problem":135,"code":"(fn [& expr] (reduce (fn [a b] ((first b) a (last b))) (first expr) (partition 2 (rest expr))))","user":"5578f292e4b05c286339e08f"},{"code":"(fn [v & r]\n  (loop [val v rem r]\n    (if (empty? rem)\n      val\n      (let [[func nxt] (take 2 rem)\n            result (func val nxt)\n            remains (drop 2 rem)]\n        (recur result remains)))))","problem":135,"user":"512d3304e4b040332b905b2d"},{"problem":135,"code":"(fn infix\n  ([a op b]\n\t(op a b))\n  ([a op b & xs]\n\t(apply infix (cons (infix a op b) xs))))","user":"5564c113e4b0c656e3ff180d"},{"problem":135,"code":"(fn\n  [v1 & args]\n  (reduce #(apply (first %2)\n                  (list %1 (last %2)))\n          v1\n          (partition 2 args)))","user":"56826ebce4b0945ebc182a93"},{"code":"(fn [& args] (reduce (fn [a b] (if (number? b) (a b) (partial b a))) identity args))","problem":135,"user":"51a768e0e4b0da5f497bde84"},{"code":"(fn [acc & stuff]\n  (if (empty? stuff) acc\n    (recur (apply (first stuff) (list acc (second stuff))) (rest (rest stuff)))\n    )\n  )","problem":135,"user":"52bdf6bde4b07a9af579230d"},{"problem":135,"code":"(fn infx [& s]\n  (loop [s s]\n    (if (= (count s) 1)\n      (first s)\n      (let [[a op b & s] s] (recur (conj s (op a b)))))))","user":"5f8b06afe4b0715f5002d74a"},{"code":"(fn infix [& li]\n  \t(if-not (= (count li) 1)\n      \t(let [ [x func y & tmp] li] \n          (recur \n           (conj (drop 3 li) (func x y))\n           )\n          )\n      \t(first li)\n      )\n  )","problem":135,"user":"51aab611e4b04e3dc0c27b2d"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [result pair] ((first pair) result (second pair)))\n          (first args)\n          (partition 2 (rest args))))","user":"5764457ae4b0994c1922fbf3"},{"code":"(fn mycalc [& xs]\n    (first\n        (reduce\n            (fn [l r]\n                (let [v (first l), f (second l)]\n                    (if (number? r)\n                        (assoc l 0 (f v r))\n                        (assoc l 1 r)))) [0 +] xs)))","problem":135,"user":"4f128865535d64f603146428"},{"problem":135,"code":"(fn [& x] (reduce #((first %2) %1 (second %2)) (first x) (partition 2 (rest x))))","user":"58247423e4b051871117bec5"},{"problem":135,"code":"(fn [v & a] (reduce #(let [[f b] %2] (f %1 b)) v (partition 2 a)))","user":"4f070ce6535dcb61093f6c1e"},{"code":"(fn parse [init op nex & xs]\n  (if (not (seq xs))\n    (op init nex)\n    (let [[new-op c & cs] xs]\n    \t(recur (op init nex)\n        \t   new-op\n           \t   c\n           \t   cs))))","problem":135,"user":"52890634e4b0239c8a67ae5e"},{"code":"(fn calculator [a op b & args]\n  (if (= (count args) 0)\n      (op a b)\n  \t  (apply calculator (cons (op a b) args))))","problem":135,"user":"5213dbc3e4b0961f15ac4d74"},{"problem":135,"code":"(fn \n    [& exprs]\n    (loop [[x & xs] exprs\n           res 0\n           op +]\n      (cond \n       (nil? x) res\n       (number? x) (recur xs (op res x) nil)\n       :else (recur xs res x))\n      )\n    )","user":"56e9a56ae4b04a395b9a03fc"},{"problem":135,"code":"(fn calc\n  ([x] x)\n  ([x op y & more]\n   (apply calc (op x y) more)))","user":"551ecb76e4b08d5046aa8a4c"},{"code":"(fn calculate [& sym]\n  (if (= (count sym) 1)\n    (first sym)\n    ((last (butlast sym))\n      (apply calculate (butlast (butlast sym)))\n      (last sym)\n    )\n  )\n)","problem":135,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"problem":135,"code":"(fn evalexp [& args]\n    (if (= (count args) 1)\n      (first args)\n      (apply evalexp (cons ((second args) (first args) (first (next (next args)))) (drop 3 args)))))","user":"54f4adc8e4b0f2f3c5226e86"},{"problem":135,"code":"(fn p135 [& args]\n  (let [nums (filter integer? args)\n        ops (remove integer? args)]\n\n    ((fn calculator [ops nums result]\n       (if (empty? nums)\n         result\n         (calculator (rest ops) (rest nums) ((first ops) result (first nums)))\n         )\n       ) ops (rest nums) (first nums))\n\n\n    ))","user":"5400e918e4b0de5c41848619"},{"code":"(fn infix [x f y & z]\r\n  (if z (apply infix (f x y) z) (f x y)))","problem":135,"user":"4fb23582e4b081705acca28a"},{"problem":135,"code":"(fn simple-calc [& args]\n(if (= (count args) 1) (first args)\n(let [[x op y & col] args]\n(recur (cons (op x y) col)))))","user":"53d88bd5e4b0e771c302546e"},{"problem":135,"code":"(fn\n [x & more]\n  (loop [s x m more]\n    (if (= 0 (count m))\n      s\n      (recur ((first m) s (first (rest m))) (drop 2 m))))\n\n)","user":"5dd70ee3e4b0948ae9d9ad85"},{"code":"(fn [& s]\n  (loop [fa (first s) ff (second s) sa (nth s 2) o (drop 3 s)]\n    (cond (empty? o) (ff fa sa)\n          ;(contains? #{* /} ff) (recur (ff fa sa) (first o) (second o) (drop 2 o))\n          ;(contains? #{* /} (first o)) (recur fa ff ((first o) sa (second o)) (drop 2 o))\n          :else (recur (ff fa sa) (first o) (second o) (drop 2 o)))))","problem":135,"user":"507fbd77e4b089ade05efbd3"},{"code":"(fn calc [head & tail]\n  (if (seq tail)\n      (apply calc ((first tail) head (second tail)) (drop 2 tail))\n    head))","problem":135,"user":"4eda7cc3535d10e5ff6f530e"},{"code":"(fn [a & fns] (reduce (fn [x [op y]] (op x y)) a (partition 2 fns)))","problem":135,"user":"521dceeae4b050d5da042802"},{"code":"(fn [a & b]\n  (loop [acc a l b]\n    (if (empty? l)\n        acc\n        (recur ((first l) acc (first (rest l)))\n               (rest (rest l))))))","problem":135,"user":"4e6e3a1e535d5021c1a89602"},{"problem":135,"code":"(fn infix\n  ([a] a)\n  ([a o b & more]\n   (if more\n     (apply infix (o a b) more)\n     (o a b))))","user":"553527ede4b09218d5f44fab"},{"problem":135,"code":"(fn infix [& args]\n  (reduce (fn [a [x b]] (x a b))\n          (first args)\n          (partition 2 (rest args))))","user":"59e9f03be4b0249b72820752"},{"problem":135,"code":"(fn calc [& x]\n  (if (= (count x) 1)\n    (first x)\n    (let [l (butlast x)\n          left (apply calc (butlast l))]\n      ((last l) left (last x)))))","user":"55205564e4b08d5046aa8a60"},{"problem":135,"code":"(fn [x & xs] (reduce #(if (number? %2)\n                        (%1 %2)\n                        (partial %2 %1))\n                     x xs))","user":"53a0ab8ce4b0ca733b9744b3"},{"code":"(fn eval-infix\n    ([c] c)\n    ([a funk b & expr] (apply eval-infix (seq (cons (funk a b) expr)))))","problem":135,"user":"4ee77f15535d93acb0a66868"},{"code":"#(apply\n   (fn f\n     ([x o & l] (o (apply f l) x))\n     ([x] x))\n   (reverse %&))","problem":135,"user":"4ee82539535d93acb0a66878"},{"problem":135,"code":"(fn [& s]\n  (let [divided (cons (first s) (partition 2 (rest s)))]\n    (reduce (fn [a b] ((first b) a (last b))) divided)))","user":"5e950178e4b0fbed045a3801"},{"code":"(fn ([& a] (reduce #(if (fn? %2) (partial %2 %) (% %2)) a)))","problem":135,"user":"4ecf1f51535d1f5ad70dba3a"},{"code":"(fn c [a f b & s]\n         (if (empty? s)\n           (f a b)\n           (recur (f a b) (first s) (second s) (rest (rest s)))))","problem":135,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":135,"code":"(fn [& x]\n  (let [[r o n & s] x]\n  (if (nil? s)\n    (o r n)\n    (recur (cons (o r n) s))\n    )\n  ))","user":"56066e82e4b08b23635d3173"},{"code":"(fn f\n  ([a b c] (b a c))\n  ([a b c & args]\n    (apply f (b a c) args)))","problem":135,"user":"4e2b1d48535deb9a81d77f03"},{"problem":135,"code":"(fn [start & args]\n    (let [s (partition 2 args)]\n      (reduce (fn [acc new] ((first new) acc (second new))) start s)))","user":"550c55d0e4b06e50f9beb14d"},{"problem":135,"code":"(fn [& ops] (reduce\n             (fn [res op] ((first op) res (second op)))\n             (first ops)\n             (partition 2 (rest ops))))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":135,"code":"(fn [& args]\n  (loop [c (first args)\n         l (next args)]\n    (if (empty? l)\n      c\n      (recur ((first l) c (second l)) (drop 2 l)))))","user":"56051095e4b08b23635d3162"},{"problem":135,"code":"(fn [x & y] (reduce #((first %2) %1 (last %2)) x (partition 2 y) ) )","user":"5da98129e4b000c986472c33"},{"code":"(fn func [a f & args]\n      (let [fargs (flatten args)]\n        (if (= 1 (count fargs))\n          (f a (first fargs))\n          (func (f a (first fargs)) (second fargs) (drop 2 fargs))\n        )\n      )\n    )","problem":135,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":135,"code":"(fn [a & x]\n    ((fn [a [op b & x]]\n       (if x\n         (recur (op a b) x)\n         (op a b))) a x))","user":"507e68abe4b085af06e3afd2"},{"code":"(fn [& xs]\r\n  (loop [input xs]\r\n    (let [temp ((nth input 1) (nth input 0) (nth input 2))]\r\n    (if (== 3 (count input))\r\n        temp\r\n        (recur (conj (drop 3 input) temp))))))","problem":135,"user":"5028bce0e4b01614d1633ffb"},{"code":"(fn [& more] (reduce (fn [x [f y]] (f x y)) (first more) (partition 2 (rest more))))","problem":135,"user":"4e6ac593535d8ccf87e9ff02"},{"problem":135,"code":"(fn compute\n  ([x] x)\n  ([a f b & tail]\n   (apply compute (cons (f a b) tail))))","user":"54b10d08e4b09f271ff37d18"},{"code":"(fn calc [& tokens] \n  (:res (reduce \n   (fn [acc token]\n     (if (fn? token)\n       (assoc acc :operator token)\n       (if (:prev acc)\n         (let [sum ((:operator acc) (:prev acc) token)]\n         (assoc acc\n           :res sum\n           :operator nil\n           :prev sum))\n         (assoc acc :prev token)\n         )))\n   {:res 0 :prev nil :operator nil}\n   tokens)))","problem":135,"user":"526fc549e4b03e8d9a4a7380"},{"problem":135,"code":"(fn [ x & xs ]\n  (reduce\n   (fn [a [f b]]\n     (f a b))\n   x\n   (partition 2 xs)))","user":"513facf5e4b00f13ea1bd892"},{"problem":135,"code":"(fn fn-135 [f & y] (loop [i 0 acc f]\n                       (if (> i (- (count y) 1))\n                         acc\n                         (recur (+ i 2) ((nth y i) acc (nth y (+ i 1)))))))","user":"598d22b1e4b02b9968b84d1a"},{"code":"(fn infix-calc [& args]\r\n  (let [operands (take-nth 2 args)\r\n        operators (take-nth 2 (rest args))]\r\n    (loop [oprnds (rest operands)\r\n           oprs operators\r\n           result (first operands)]\r\n      (if (empty? oprnds)\r\n        result\r\n        (recur (rest oprnds) (rest oprs) ((first oprs) result (first oprnds)))))))","problem":135,"user":"4fb79872e4b081705acca2d2"},{"code":"(fn calc\n([a f b] (f a b))\n([a f b & res] (apply calc (f a b) res)))","problem":135,"user":"4e8a880b535d65386fec210d"},{"problem":135,"code":"(fn calc [a f b & [g c & more :as all]]\n  (if (empty? all)\n    (f a b)\n    (apply calc (f a b) g c more)))","user":"5ca14eb1e4b048ec896c5b7d"},{"code":"(fn f ([v] v) ([v1 o v2 & rest] (apply f (o v1 v2) rest)))","problem":135,"user":"5165a235e4b079ad97ec44ac"},{"problem":135,"code":"(fn [& expr]\n  (loop [i1 (first expr)\n         i2 (nth expr 2)\n         oper (nth expr 1)\n         expr-now (drop 3 expr)]\n   (if\n     (empty? expr-now)\n     (oper i1 i2)\n     (recur (oper i1 i2) (nth expr-now 1) (nth expr-now 0) (drop 2 expr-now)))))","user":"5f548678e4b0a0bc16850a7e"},{"code":"(fn [a op b & coll]\n  (if (zero? (count coll))\n\t\t\t(op a b)\n\t\t\t(recur (op a b) (first coll) (second coll) (drop 2 coll))))","problem":135,"user":"501c1492e4b086d93747d180"},{"code":"(fn infix [& equation]\n     (reduce #((first %2) %1 (second %2)) (first equation) (partition 2 (rest equation))))","problem":135,"user":"535056a7e4b084c2834f4adb"},{"problem":135,"code":"(fn [& args]\n  (loop [rem-args args]\n    (let [[lhs op rhs & others] rem-args\n          result (op lhs rhs)]\n      (if (empty? others) result\n        (recur (conj others result))))))","user":"4ed152d5535d44c135fd68cc"},{"problem":135,"code":"(fn my-infix [& args]\n  (reduce #(cond \n            (fn? %1) (%1 %2) \n            :else (partial %2 %1)) identity args))","user":"59dd387be4b0a0ac046f2502"},{"code":"#(let [f first r rest]\n   (loop [x (r %&) \n        y (f %&)] \n   (if (seq x)\n     (recur (r(r x)) ((f x) y (f(r x))))\n     y)))","problem":135,"user":"5251d3c1e4b0541d1855b87f"},{"problem":135,"code":"(fn\n  [n & args]\n  (loop [result n statement args]\n    (if (empty? statement)\n      result\n      (recur ((first statement) result (second statement)) (rest (rest statement)))\n      )))","user":"57596ba7e4b02ea11479931a"},{"problem":135,"code":"(fn [x & xs]\n  (reduce (fn [v [op w]] (op v w)) x (partition 2 xs)))","user":"50cf94bde4b0abc485cb9bb2"},{"problem":135,"code":"(fn [x o y & others]\n   (let [new-x (o x y)\n         new-o (first others)\n         new-y (second others)\n         new-others (drop 2 others)]\n     (if\n       (empty? others)\n       new-x\n       (recur new-x new-o new-y new-others)\n\n       ))\n\n   )","user":"57fc5e42e4b0d3187e900997"},{"code":"(comp\n(partial\n (fn f [res func lst]\n  (if (empty? lst) \n    res\n    (if (instance? Number (first lst))\n      (f (func res (first lst)) nil (next lst))\n      (f res (first lst) (next lst))\n      ))) 0 +)\n list)","problem":135,"user":"4f8aa1c1e4b02e764a0a516e"},{"code":"(fn calc\n  [v & args]\n  (if (seq args)\n    (let [[op v2 & remaining] args]\n      (apply calc (concat [(op v v2)] remaining)))\n    v))","problem":135,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":135,"code":"(fn infix-calculator [& args]\n        (let [[first-operand operator second-operand] (take 3 args)\n              result (operator first-operand second-operand)]\n          (if (= (count args) 3)\n            result\n            (apply infix-calculator (cons result (drop 3 args))))))","user":"5410499de4b01498b1a719a6"},{"code":"(fn [& x]\n  (let [[a & b] x]\n    (loop [ret a [op c & r] b]\n      (if r\n        (recur (op ret c) r)\n        (op ret c)))))","problem":135,"user":"4e74e119535d7a570dd295bc"},{"problem":135,"code":"(fn incalc [ & xs ]\n  (reduce (fn [p n]\n            (if (fn? p)\n              (p n)\n              (partial n p)))\n          identity\n          xs))","user":"5cab33e7e4b048ec896c5c48"},{"problem":135,"code":"(fn infix-calc [& elems]\n  \n  (loop [ [ a op b & others]     elems]\n    \n    (if-not others\n      (op a b)\n      (recur  (cons (op a b) others)  )  )\n    ))","user":"598085e6e4b021a7a535fdd3"},{"code":"(fn [f & expr] ((fn oper [in ex]\n  (if (empty? ex) in\n    (oper ((first ex) in (second ex)) (rest (rest ex))))) f expr))","problem":135,"user":"505dcfc8e4b0e6aca564be0d"},{"problem":135,"code":"(fn [& x]\n  (loop [[a op b & rest] x]\n    (let [value (op a b)]\n      (if (nil? rest) value\n        (recur (cons value rest))))))","user":"4f16d3fd535d64f60314644e"},{"code":"(fn [& args]\n  (let [\n        start-num (first args)\n        op-pairs (partition 2 (rest args))\n        ]\n    (loop [n (first op-pairs) r (rest op-pairs) v start-num]\n           (if n\n             (let [[operation value] n]\n               (recur (first r) (rest r) (operation v value))\n               )\n             v)\n           )\n    )\n  )","problem":135,"user":"4f031883535dcb61093f6a5e"},{"code":"(fn [head & tail] \n  (reduce (fn [a [f b]] (f a b)) head (partition 2 tail)))","problem":135,"user":"4f04b66b535dcb61093f6bdd"},{"code":"(fn infix [& coll]\r\n  (loop [result (first coll)\r\n         coll (rest coll)]\r\n    (if (empty? coll)\r\n      result\r\n      (recur ((first coll) result (second coll))\r\n             (drop 2 coll)))))","problem":135,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":135,"code":"(fn [o1 op o2 & more]\n  (loop [acum (op o1 o2)\n         lst more]\n    (if (empty? lst)\n      acum\n      (recur ((first lst) acum (first (rest lst))) (rest (rest lst))))))","user":"57f81549e4b0d3187e900918"},{"problem":135,"code":"(fn [& exp]\n  (loop [remaining exp ans 0]\n    (if (= 1(count remaining))\n      ans\n      (let [[digit-1 op digit-2 & remain] remaining]\n        (recur (cons (op digit-1 digit-2) remain) (op digit-1 digit-2))))))","user":"5746061ae4b009280f9f2b5b"},{"problem":135,"code":"(fn [x & args] \n  (reduce (fn [acc [op y]] (op acc y))\n           x (partition 2 args)))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":135,"code":"(fn  [& arg] (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity arg))","user":"5dfa1c67e4b0a607a9a45cc5"},{"problem":135,"code":"(fn [x & xs]\n  (first\n    (reduce\n      (fn [[tot op] x]\n        (if op\n          [(op tot x)]\n          [tot x]))\n      [x]\n      xs)))","user":"562cd94ee4b0a45d2ff83015"},{"code":"(fn incalc [& args]\n  (let [result ((second args) (first args) (nth args 2))]\n\t  (if (> (count args) 3)\n\t    (let [newargs (cons result (nthnext args 3))]\n\t      (apply incalc newargs))\n\t    result)))","problem":135,"user":"51f82769e4b09be9c177e527"},{"problem":135,"code":"(fn[& xs](let [firstval (first xs) ys (partition 2 2 (rest xs))]\n           (loop [zs ys result firstval]\n             (if (empty? zs) result\n               (recur (rest zs) (let [operator (first (first zs))\n                                      operand (second (first zs))]\n                                  (operator result operand)))))))","user":"54f86b8ce4b01ecee9d88828"},{"code":"(fn calc [& args]\n  (prn args)\n  (if (< (count args) 3)\n    (first args)\n    (let [[a b c] args]\n      (apply calc (b a c) (drop 3 args)))))","problem":135,"user":"52173464e4b082aa80a88c75"},{"code":"(fn infix [& s] (if (= (count s) 1) (first s)\n                (apply infix (cons ((second s) (first s) (second (rest s))) (rest (rest (rest s)))))))","problem":135,"user":"50dfb660e4b061dbdced7228"},{"code":"(fn f [x & more] (if (= 0 (count more)) x (apply f (cons ((first more) x (second more)) (drop 2 more)))))","problem":135,"user":"514d398ee4b019235f6c0583"},{"problem":135,"code":"(fn c\n  ([] 0)\n  ([x] x)\n  ([x o y & r]\n   (apply c (o x y) r)))","user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":135,"code":"(fn infix [x op y & args]\n  (let [part (op x y)]\n    (if (seq args) \n      (apply infix part args)\n      part)))","user":"5412ef7ee4b01498b1a719da"},{"problem":135,"code":"(fn [& args]\n  (loop [args args]\n    (if (> (count args) 2)\n      (let [[x op y & more] args]\n        (recur (cons (op x y) more)))\n      (first args))))","user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn [& args] \n  (reduce  (fn [res [op num]] (op res num))\n    (first args) (partition 2 (rest args))))","problem":135,"user":"50de11b2e4b061dbdced7217"},{"code":"(fn cl [& lst]\n    ((fn calc [cum lst] \n\t(if (not (seq lst))\n\t\tcum\n\t\t(let [func (first lst) n (second lst) rlst (rest (rest lst))]\n\t\t\t(calc (func cum n) rlst)))) (first lst) (rest lst)))","problem":135,"user":"50e135f4e4b084616e11c667"},{"problem":135,"code":"(fn [x & xs]\n   (let [result ((first xs) x (second xs))]\n     (if (> (count xs) 2)\n       (recur result (nthrest xs 2))\n       result\n       )\n     )\n   )","user":"589037b4e4b00487982d51d0"},{"code":"(fn [& args] \n  (loop [rv (first args) l (partition 2 (rest args))]\n    (if (seq l)\n      (let [[op b] (first l)]\n        (recur (apply op [rv b]) (rest l)))\n      rv)))","problem":135,"user":"534f13b2e4b084c2834f4ac4"},{"problem":135,"code":"#(let [[[_ acc] & ops] (partition 2 (concat [+] %&))] (reduce (fn [acc [f x]] (f acc x)) acc ops))","user":"4e11b92a535d04ed9115e7cb"},{"problem":135,"code":"(fn [& args]\n  (let [op (first (next args))]\n    (if op\n\t    (recur (cons (op (first args) (nth args 2)) (drop 3 args)))\n\t    (first args))))","user":"574c3a7ce4b02ea114799219"},{"problem":135,"code":"(fn calc [x op y & args]\n  (if (empty? args) \n    (op x y)\n  \t(apply calc (cons (op x y) args))))","user":"5dd60c58e4b0948ae9d9ad7c"},{"problem":135,"code":"(fn f [a op b & r]\n      (if r\n        (apply f (op a b) r)\n        (op a b)))","user":"5195fadee4b04c0af7ff3c11"},{"code":"(fn [& ops]\n  (reduce (fn [acc [op v]] (apply op [acc v]))\n          (first ops)\n          (partition 2 (rest ops))))","problem":135,"user":"4fc3a72ae4b081705acca342"},{"problem":135,"code":"(fn p135 [& xs]\n  (letfn [(calc [fs]\n            ((second fs) (first fs) (last fs)))]\n    (if (= 3 (count xs))\n      (calc xs)\n      (recur (cons (calc (take 3 xs)) (drop 3 xs))))\n    )\n  )","user":"58eed4c5e4b056aecfd47db7"},{"code":"(fn calc [& args]\n          (if (< (count args) 2)\n             (first args)\n             (let [[v1 op v2] (take 3 args)]\n                (apply calc (cons (op v1 v2) (drop 3 args))))))","problem":135,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":135,"code":"(fn i\n  ([x o y]\n      (o x y))\n  ([x o y & r]\n     (apply i (cons (i x o y) r))))","user":"4fe9de74e4b0547ebccb2475"},{"code":"(fn i\n  ([x o y] (o x y))\n  ([x o y & s]\n     (apply i (cons (o x y) s))))","problem":135,"user":"53460d02e4b084c2834f4a39"},{"problem":135,"code":"(fn [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"52ba2639e4b07a9af57922cb"},{"problem":135,"code":"(fn [& xs]\n  (first \n    (reduce \n      #(let [terms (concat %1 [%2])]\n        (if \n          (= 3 (count terms)) \n          (list (apply (fn [x f y] (f x y)) terms))\n          terms))\n      []\n      xs)))","user":"55ecb2c0e4b0121d4835fdce"},{"code":"(fn [& coll]\n  (loop [xs (rest coll) acc (first coll)]\n    (let [[f x] xs]\n      (if (empty? xs)\n        acc\n        (recur (drop 2 xs) (f acc x))))))","problem":135,"user":"4e7f5a0b535db966e863cc41"},{"problem":135,"code":"(fn [val & others] (reduce #((first %2) %1 (second %2)) val (partition 2 others)))","user":"5567f164e4b0c656e3ff184d"},{"problem":135,"code":"(fn infix [& args]\n     (reduce (fn [a [op b]]\n               (println b)\n               (op a b))\n             (first args)\n             (partition 2 (rest args))))","user":"58a44a14e4b01a0c0b2328f2"},{"code":"(fn [fi & s]\n  (reduce (fn [a [f b]] (f a b)) \n          fi\n          (partition 2 s)))","problem":135,"user":"502952c9e4b0b33e9bf6fdf1"},{"problem":135,"code":"(fn [& v]\n  (loop [x (first v)\n         r (rest v)]\n   (if (empty? r)\n     x\n     (recur ((first r) x (second r)) (nthrest r 2)))))","user":"52ee9ac7e4b05e3f0be25ec9"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [a [op b]] (op a b))\n          (first args)\n          (partition 2 (rest args)) )\n  )","user":"56f188e9e4b04a395b9a0494"},{"problem":135,"code":"(fn calc [a op b & more]\n  (if (not more)\n    (op a b)\n    (apply calc (op a b) more)))","user":"56ef077ae4b04a395b9a0459"},{"problem":135,"code":"(fn infix [left & args]\n  (let [op (first args)\n        right (first (rest args))\n        more (rest (rest args))\n        result (op left right)]\n    (if (empty? more) result (apply infix result more))))","user":"536b9d8ae4b0243289761ebe"},{"code":"#(loop [[n1 f n2 & more] %&]\n  (if more\n    (recur (cons (f n1 n2) more))\n    (f n1 n2)))","problem":135,"user":"4e1047ad535d04ed9115e7bf"},{"code":"(fn [& xs] (reduce #(if (number? %1) (partial %2 %1) (%1 %2)) xs))","problem":135,"user":"5097a95fe4b00ad8bab4e96e"},{"code":"(fn [& e]\n   (first (reduce\n           #(if (number? %2)\n              (if (empty? %1)\n                (list %2)\n                (list ((first %1) (second %1) %2))) \n              (cons %2 %1))\n           '()\n           e)))","problem":135,"user":"52046600e4b0c283853240c5"},{"code":"(fn __ [initial & args]\n  (let [ops (partition 2 args)]\n    (reduce #((first %2) %1 (second %2)) initial ops)))","problem":135,"user":"52463059e4b09dbe66b56198"},{"problem":135,"code":"(fn [& c] (reduce #(if (list? %1) ((last %1) (first %1) %2) \n                     (list %1 %2) )c))","user":"53e2ac1ae4b036ad0777e3f3"},{"problem":135,"code":"(fn [v & ops] (reduce (fn [a [f b]] (f a b)) v (partition 2 ops)))","user":"575ef4b6e4b08062f99a4e78"},{"code":"(fn [& args] (reduce #((nth %2 0) %1 (nth %2 1)) (first args) (partition 2 (rest args))))","problem":135,"user":"5210ac52e4b080a8d9b9d63e"},{"problem":135,"code":"(fn [head & remainings] (reduce #((first %2) %1 (last %2)) head (partition 2 remainings)))","user":"5ee81beae4b029a2061bbeac"},{"problem":135,"code":"(fn mcal [ x op y & xs ]\n  (if (empty? xs)\n    (op x y)\n    (apply mcal (op x y) xs)\n    ))","user":"4fdb0c0ae4b05e33b9224f57"},{"problem":135,"code":"(fn calc [& xs]\n  (loop [ops (filter #{+ - * /} xs)\n         args (remove #{+ - * /} xs)]\n    (if (empty? ops)\n      (first args)\n      (recur (rest ops)\n             (cons (apply (first ops) (take 2 args))\n                   (drop 2 args))))))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":135,"code":"(fn fix\n  ([a op b] (op a b))\n  ([a op b & more] (apply fix (cons (op a b) more))))","user":"57642916e4b0994c1922fbee"},{"problem":135,"code":"(fn ff [a op b & args]  \n  (let [cur (op a b)]\n    (if (empty? args)\n      cur\n      (apply ff (cons cur args)))))","user":"567d132ee4b05957ce8c61c3"},{"problem":135,"code":"(fn f\n   ([n1 op n2] (op n1 n2))\n   ([n1 op n2 & xs] (apply f (op n1 n2) xs)))","user":"55caabd1e4b0e31453f649fb"},{"problem":135,"code":"(fn f [a op b & rest]                                                                                                           \n    (if (empty? rest)                                                                                                                                   \n        (op a b)                                                                                                                \n        (apply f (op a b) rest)))","user":"558b50d5e4b027778923762b"},{"problem":135,"code":"(fn f [a op b & c]\n  (if c\n    (apply f (op a b) c)\n    (op a b)))","user":"53572767e4b04ce2eb3ed277"},{"code":"(fn [& xs]\n  (reduce #((first %2) %1 (last %2)) (first xs) (partition 2 (rest xs))))","problem":135,"user":"4f1b92d1535d64f60314647b"},{"problem":135,"code":"(fn f [x oper y & leftover]\n  (if leftover\n    (apply f (oper x y) leftover)\n    (oper x y)))","user":"546692aee4b01be26fd746e7"},{"problem":135,"code":"(fn calc [operand1 operator operand2 & cont]\n  (let [partial-result (operator operand1 operand2)]\n    (if (empty? cont)\n      (identity partial-result)\n      (apply calc (concat (list partial-result) cont))\n    )  \n  )  \n)","user":"54468ebfe4b032a45b8693b1"},{"code":"(fn [& l]\r\n    (loop [s (rest l) r (first l)]\r\n\t       (if (< (count s) 2)\r\n\t\t   r\r\n\t\t   (recur (rest (rest s)) ((first s) r (fnext s))))))","problem":135,"user":"4e821ca5535db62dc21a62c2"},{"problem":135,"code":"(fn foo [& xs]  \n  (if (= (count xs) 1) (first xs)\n  (let [ev ((second xs) (first xs) (second (rest xs)))] \n    (apply foo (cons ev (drop 3 xs))))))","user":"54133900e4b01498b1a719de"},{"problem":135,"code":"(fn infix\n  ([a op b] (op a b))\n  ([a op1 b & x]\n   (apply infix (op1 a b) x)))","user":"5ec3a13ae4b08d0ec38692b9"},{"code":"(fn [x & xs]\n  (reduce (fn [y [f z]] (f y z)) x (partition 2 xs)))","problem":135,"user":"4fe8fda4e4b0547ebccb2438"},{"code":"(fn infix-calculator [head & tail]\n  (if-let [[op x] (seq tail)]\n    (apply infix-calculator (op head x) (drop 2 tail))\n    head))","problem":135,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"(fn calc [a o b & s]\n  (if (= (count s) 0)\n    (o a b)\n    (apply calc (concat [(o a b)] s))))","problem":135,"user":"4fa67030e4b081705acca1b7"},{"problem":135,"code":"(fn [& args]\n  (let [nummap (group-by #(number? %) (vec args))\n        nums (nummap true)\n        ops  (nummap false)\n        initial ((first ops) (first nums) (second nums))]\n    (loop [numbers (drop 2 nums)\n           operations (rest ops)\n           acc initial]\n      (if-not (seq numbers)\n        acc\n        (recur (rest numbers) (rest operations) ((first operations) acc (first numbers)))))))","user":"58182480e4b0c0e9c07b83a7"},{"code":"(fn f [& x] \n      ( reduce #((first %2) %1 (last %2) ) \n            (first x) \n            (partition 2 (rest x)) \n      ) )","problem":135,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn [f & args]\n  \n  (reduce (fn [x [f y]]\n            (f x y)\n            ) f (partition 2 args)))","problem":135,"user":"51bec919e4b013aa0d74b800"},{"code":"(fn infixcacl [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [[x op y & r] args]\n      (recur (cons (op x y) r)))))","problem":135,"user":"51852961e4b0da5a5be3babb"},{"problem":135,"code":"(fn f [& [a o b & r]] (if o (apply f (o a b) r) a))","user":"4fb1d7ace4b081705acca281"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [a [operation b]] (operation a b))\n          (first args)\n          (partition 2 (rest args))))","user":"5e978fe5e4b0157ca96647d1"},{"problem":135,"code":"(fn calc \n  ([expr]\n   expr)\n  ([a op b & expr]\n   (apply calc (op a b) expr)))","user":"57dda21be4b0bd073c202445"},{"code":"(fn infix [& coll] \n  (reduce \n    (fn [memo pair] ((first pair) memo (second pair)))\n    (first coll)\n    (partition 2 (rest coll))))","problem":135,"user":"508fd6bae4b0ea685a20f76b"},{"code":"(fn calc [x op y & z]\n  (let [res (op x y)]\n    (if (nil? z) \n      res\n      (apply calc (conj z res)))))","problem":135,"user":"53110f32e4b08068f379ece4"},{"problem":135,"code":"(fn [& args] \n  (loop [s (first args)\n        [f x & xs :as all] (rest args)]\n    (if (seq all)\n      (recur (f s x) xs)\n      s)))","user":"55a12668e4b0acc240e3150b"},{"problem":135,"code":"(fn infix-calc\n  [& expr]\n    \"Calculates operations from left to right\"\n  ((fn step [init [a f b & more]]\n     (if-not f init\n               (let [r (f a b)]\n                 (recur r (cons r more))))) 0 expr))","user":"5bbbd077e4b0a20761a23615"},{"code":"(fn inf [a f n & r]\n    (if f\n      (recur (({+ +,* *,/ /,- -} f) a n) (first r) (second r) (nnext r))\n      a))","problem":135,"user":"4e95f5a5535dbda64a6f6b3b"},{"problem":135,"code":"(fn infix-calc \n  [x & args]\n  (reduce (fn [acc [op y]]\n            (op acc y))\n          x\n          (partition 2 args)))","user":"539e717fe4b0ca733b974488"},{"problem":135,"code":"(fn in-calc\n  [n & r]\n  (if (empty? r)\n    n\n    (recur ((first r) n (nth r 1)) (rest (rest r)))\n  ))","user":"54b31445e4b09f271ff37d35"},{"problem":135,"code":"(fn infix [& exp]\n  (let [[a op b & rest-exp] exp]\n    (if (empty? rest-exp)\n      (op a b)\n      (apply infix (conj rest-exp (op a b))))))","user":"5c196e7be4b01240ff5671fb"},{"problem":135,"code":"(fn [x f y & args] \n  \t(if (zero? (count args))\n                          (f x y)\n                          (recur (f x y) (first args) (second args) (drop 2 args)) ))","user":"57887de2e4b0ebec4cfb751c"},{"code":"(fn\n  [fst & args]\n  (reduce (fn [m [op arg]] (op m arg) ) fst (partition 2 args)))","problem":135,"user":"5073de20e4b054001656acca"},{"problem":135,"code":"(fn infix-calculator [& more]\n  (loop [operators (filter fn? more) operands (filter number? more) result (first operands)]\n    (if (empty? operators) result\n        (recur (rest operators) (rest operands) ((first operators) result (second operands))))))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [acc [op r]] (op acc r))\n          (first args)\n          (partition 2 (rest args))))","user":"52d38c51e4b099d49816f0c5"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [acc x] (if (fn? x) (partial x acc) (acc x))) args))","user":"51b76227e4b0d906fcd71d35"},{"code":"(fn [a & t] (reduce (fn [v [f b]] (f v b)) a (partition 2 t)))","problem":135,"user":"4e3f480c535dc968683fc497"},{"problem":135,"code":"(fn cal [& expr]\n  (let [[[a op b] r] (split-at 3 expr)\n        v (op a b)]\n    (if (empty? r) v (apply cal (cons v r)))))","user":"54c641f8e4b045293a27f628"},{"problem":135,"code":"(fn infix [& args]\n  (let [[x f y & remaining] args]\n\t(if (empty? remaining)\n      (f x y)\n      (apply infix (cons (f x y) remaining)))))","user":"5666500ee4b0e91d5f5c566d"},{"code":"(fn infix\n  ([x o y] (o x y))\n  ([x o y & more]\n   (->> more (cons (o x y)) (apply infix))))","problem":135,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn [& coll]\n  (loop [a (first coll) b (partition 2 (rest coll))]\n    (if (empty? b)\n      a\n      (recur (apply #(% a %2) (first b)) (rest b)))))","problem":135,"user":"4f26d6d9e4b0d6649770a007"},{"problem":135,"code":"(fn calc [a op b & args]\n  (if (empty? args)\n    (op a b)\n    (apply calc (op a b) args)))","user":"5a080bdde4b01bb0ae8afde9"},{"problem":135,"code":"(fn calc\n  ([x op y & other]\n   (apply calc (cons (op x y) other)))\n  ([x op y]\n   (op x y)))","user":"54a677a9e4b09f271ff37c88"},{"problem":135,"code":"(fn [& args]\n  (loop [acc (first args) arr (rest args)]\n    (if (empty? arr)\n      acc\n      (recur ((first arr) acc (second arr)) (rest (rest arr))))))","user":"5ad99ddee4b0ea6055cfac3a"},{"problem":135,"code":"(fn __ [ret & nums]\n  (loop [r ret\n         n nums]\n    (if (empty? n) r\n    (recur ((first n) r (second n)) (rest (rest n))))))","user":"5475d755e4b0c51c1f4d72a0"},{"code":"(fn [i & exp] (reduce (fn [a [o v]] (o a v)) i (partition 2 exp)))","problem":135,"user":"4e9660ec535dbda64a6f6b44"},{"code":"(fn [x & args]\n         (reduce #((first %2) %1 (second %2)) x (partition 2 args)))","problem":135,"user":"51a8f0c6e4b08d8ec191b821"},{"problem":135,"code":"(fn joe2 [& args]\n  (reduce (fn [t curr] ((first curr) t (second curr))) (first args) (partition 2 (rest args))))","user":"5c76577ae4b0fca0c16227ea"},{"problem":135,"code":"(fn [& params] \n     (loop [expr (rest params)\n            accu (first params)]\n       (if (empty? expr) accu\n         (recur (rest (rest expr)) ((first expr) accu (second expr))))))","user":"53c38b8ce4b00fb29b22127b"},{"code":"(fn c [v1 op v2 & rest]\n  (let [v (op v1 v2)]\n    (if rest\n      (apply c v rest)\n      v)))","problem":135,"user":"4f0f36a7535d0136e6c22336"},{"problem":135,"code":"(fn cal\n   [v & rst]\n   (loop [v1 v\n          coll rst]\n     (let [f (first coll)\n           v2 (second coll)\n           res (f v1 v2)]\n       (println \"v1:\" v1 \", v2:\" v2 \", res:\" res)\n       (println \"coll:\" coll)\n       (if (= 2 (count coll))\n         res\n       (recur res (drop 2 coll))\n         ))))","user":"5a64dcabe4b0512ff01cd9a9"},{"code":"(fn [& args]\n  (if (= (count args) 1)\n    (first args)\n    (let [[x op y & rest] args]\n      (recur (cons (op x y) rest)))))","problem":135,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":135,"code":"(fn td [a f c & d]\n  (if (= 0 (count d))\n   \t(f a c)\n    (apply td (cons (f a c) d))\n   ) \n)","user":"5ce41d1be4b0a17bb84e2b50"},{"code":"(fn [x & xs]\n  (loop [ret x\n         xs xs]\n    (if xs\n      (recur ((first xs) ret (second xs))\n             (next (next xs)))\n      ret)))","problem":135,"user":"520cb8c4e4b0b022ef140c9a"},{"code":"#(reduce (fn [x y](if (fn? y)(fn [z](y x z))(x y))) %&)","problem":135,"user":"4ed2dd98535d44c135fd68e2"},{"code":"(fn [& [s & col]]\n  (reduce (fn [m [f n]] (f m n)) s (partition 2 col)))","problem":135,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn f \n  ([x] x)\n  ([x o y & more] (apply f ( conj more (o x y))))\n)","problem":135,"user":"506b437de4b0eda3100c0906"},{"problem":135,"code":"(fn calc [x f y & other] \n\t(let [t (f x y)]\n\t\t(if (nil? other) t\n\t\t\t(apply calc (conj other t)))))","user":"59f043d0e4b0966464fe6a3d"},{"code":"#(loop [math %&]\n  (if (= 1 (count math)) (first math)\n      (let [[x f y & rest] math]\n        (recur (cons (f x y) rest)))))","problem":135,"user":"4fa6d532e4b081705acca1be"},{"code":"(fn [& args]\n  ((fn foo [coll]\n    (if (= 1 (count coll)) (first coll)\n    (foo (cons ((second coll) (first coll) (nth coll 2))\n     (drop 3 coll)))))\nargs))","problem":135,"user":"5078300de4b0fc74642bff66"},{"problem":135,"code":"(fn [l op r & e]\n  (loop [acc l\n         [op r more] [op r e]]\n    (if (empty? more)\n      (op acc r)\n      (recur (op acc r) [(first more) (second more) (nthrest more 2)]))))","user":"535558b9e4b04ce2eb3ed25a"},{"problem":135,"code":"(fn infix [& num-op-num]\n  (reduce (fn [accum [op num]] (op accum num))\n          (first num-op-num)\n          (partition 2 (rest num-op-num))))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"(fn [& args]\n    (loop [arg-pairs (partition 2 (next args)) ; '((+ 2) (+ 4) (+ 8) ...)\n           answer (first args)]                ; 20\n      (if (empty? arg-pairs) answer\n          (let [[op arg] (first arg-pairs)] ; +, 2\n            (recur (next arg-pairs)\n                   (op answer arg))))))","problem":135,"user":"4e89e939535d3e98b8023287"},{"code":"(fn [x & xs]\n         (reduce (fn [before [f val]]\n                   (f before val))\n                 x (partition 2 xs)))","problem":135,"user":"509e62a8e4b08df8156e9e2e"},{"problem":135,"code":"(fn [& exp]\n   (let \n     [recursor \n      (fn recurs \n        [prev in] \n        (if \n          (empty? in) \n          prev \n          (let \n            [\n             op (first in), \n             arg (second in),\n             remaining (drop 2 in)\n             ]\n            (recurs\n             (op prev arg)\n             remaining\n             )\n            )\n          )\n        )\n      ]\n     (recursor (first exp) (rest exp))\n     )\n   )","user":"58950f29e4b00487982d5270"},{"code":"(fn [& args]\n  (reduce (fn [r [op b]]\n            (op r b))\n          (first args)\n          (partition 2 (rest args))))","problem":135,"user":"5392b849e4b0b51d73faaeb1"},{"code":"(fn [y & r]\n  (reduce\n    (fn [y [op x]] (op y x))\n    y\n    (partition 2 r)\n  )\n)","problem":135,"user":"507eddf4e4b06ce648bcdbfa"},{"code":"(fn [& more]\n(let [lst (partition-all 2 more)]\n  (reduce #(let [[a op1] %\n               [b op2] %2]\n           (if (nil? op2)             \n               (apply op1 [a b])\n             (list (apply op1 [a b]) op2)))\n          (first lst) (next lst))))","problem":135,"user":"4fbef9a6e4b081705acca316"},{"problem":135,"code":"(fn [head & tail]\n  (reduce\n   (fn [acc [op n]] (op acc n))\n   head (partition 2 tail)))","user":"534941d1e4b084c2834f4a60"},{"problem":135,"code":"(fn [& all]\n   (if (= 1 (count all))\n     (first all)\n     (recur (cons ((second all) (first all) (nth all 2)) (drop 3 all)))))","user":"5d887d27e4b0915913b1d3a8"},{"code":"(fn infix [a & s]\n  (loop [e (partition 2 s)\n        r a]\n    (if (empty? e)\n      r\n      (recur (rest e) \n             ((first (first e)) r (second (first e)))))))","problem":135,"user":"4eb99b3d535dfed6da9c6d57"},{"code":"(fn x [& more] (apply\n  (fn ([b] b)\n      ([a o & more] (o (apply x (reverse more)) a))) (reverse more)))","problem":135,"user":"4faac363e4b081705acca200"},{"problem":135,"code":"(fn calc[a f b & rest]\n  (let [c (f a b)]\n    (if (seq rest)\n      (apply calc (cons c rest))\n      c)))","user":"5627d09ce4b00e49c7cb47db"},{"code":"(fn calc [x op y & exprs]\n  (let [res (op x y)]\n    (if (seq exprs)\n      (apply calc res exprs)\n      res)))","problem":135,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":135,"code":"(fn [f & r] (reduce (fn [l [o r]] (o l r)) f (partition 2 r)))","user":"55f2fdc3e4b06e875b46ce51"},{"code":"(fn [s & args]\n\t(loop [a args b s]\n\t\t(if (empty? a)\n\t\t\tb\n\t\t\t(recur (nthnext a 2)\n\t\t\t\t(let [c (second a)]\n\t\t\t\t\t(condp = (first a) + (+ b c) - (- b c) * (* b c) / (/ b c)))))))","problem":135,"user":"50fe91c1e4b03cd852b4e84e"},{"problem":135,"code":"(fn [n1 & args]\n  (reduce (fn [l [o r]] (o l r)) n1 (partition 2 args)))","user":"541e2ff8e4b01498b1a71a8a"},{"code":"(fn[& body]\n  (loop [bb body]\n    (if (= 1 (count bb))\n      (first bb)      (recur (conj (next (next (next bb))) ((nth bb 1)  (nth bb 0)  (nth bb 2)))))))","problem":135,"user":"52196842e4b0890f2f822bfa"},{"code":"(fn [& more]\n  (let [[n f m & r] more]\n    (if (empty? r)\n      (f n m)\n      (recur (conj r (f n m))))))","problem":135,"user":"4f3ca5a6e4b0e243712b1f53"},{"code":"(fn cal [& exp]\n    (if (= (count exp) 1)\n        (first exp)\n        (let [[m op n & args] exp]\n            (recur (cons (op m n) args))\n        )\n    )\n)","problem":135,"user":"51d1111ce4b067c36548635f"},{"problem":135,"code":"(fn infix-calculator [& xs]\n  (loop [r (first xs)\n         xs (rest xs)]\n    (if (empty? xs)\n      r\n      (recur ((first xs) r (second xs)) (nthrest xs 2)))))","user":"5a42dbabe4b0447ef91cc5fc"},{"code":"(fn infix [a op b & args]\n  (let [x (op a b)]\n    (if (nil? args)\n      x\n      (apply infix (cons x args)))))","problem":135,"user":"52039e12e4b0fb7e47ea51ff"},{"code":"(fn [& a] (reduce (fn [x [o y]] (o x y)) (first a) (partition 2 (rest a))))","problem":135,"user":"52e3e6a8e4b09f7907dd1448"},{"code":"(fn ! [left op right & rt]\n  (if rt \n    (apply ! (op left right) rt)\n    (op left right)))","problem":135,"user":"4f036d9b535dcb61093f6ac1"},{"code":"(fn rec [& args]\n  (if (second args)\n    (let [[x op y & r] args]\n      (recur (cons (op x y) r)))\n    (first args)))\n\n;(fn [& a]\n;  (if (= a [2 + 5]) 7\n;    (if (= a [38 + 48 - 2 / 2]) 42\n;      (if (= a [10 / 2 - 1 * 2]) 8\n;        72))))","problem":135,"user":"4fcc103fe4b0ee37620e185f"},{"problem":135,"code":"(fn infix [x op y & xs]\n  (let [res (op x y)]\n    (if (empty? xs)\n      res\n      (recur res (first xs) (second xs) (drop 2 xs)))))","user":"55ede35ce4b0121d4835fde1"},{"code":"(fn r135\n  ([x f y] (f x y))\n  ([x f y & xs] (apply r135 (f x y) xs)))","problem":135,"user":"4f8c6bf6e4b02e764a0a519b"},{"problem":135,"code":"(fn [num & symbols]\n  (reduce (fn [acc [f val]] (f acc val)) num (partition 2 symbols)))","user":"55f5b8d6e4b06e875b46ce8d"},{"code":"(fn __ [& args]\n  (reduce #(if (number? %)\n               (list % %2)\n               ((second %) (first %) %2)) args))","problem":135,"user":"4ec9549d535d6d7199dd36fe"},{"problem":135,"code":"(fn [init & rest]\n   (loop [s rest r init]\n     (if (seq s)\n       (recur (drop 2 s) (apply #(% r %2) (take 2 s)))\n       r)))","user":"5dcd7933e4b0b296f82db5ae"},{"problem":135,"code":"(fn infix\n    ([v1 op v2] (op v1 v2))\n    ([v1 op v2 & more] (apply infix (infix v1 op v2) more))\n    )","user":"569951e4e4b0542e1f8d143e"},{"code":"(fn [x & more]\n  (reduce #(let [[op n] %2]\n                (op % n))\n          x\n          (partition 2 more)))","problem":135,"user":"502a4fdfe4b09dd42f6f3644"},{"problem":135,"code":"(fn [r & in] (if (empty? in) r \n               (recur ((first in) r (second in)) (drop 2 in))))","user":"56b1b59be4b0982f16b37df2"},{"problem":135,"code":"(fn [x & xs]\n  (if (seq xs)\n    (let [y ((first xs) x (second xs))]\n      (recur y (drop 2 xs)))\n    x))","user":"55c652dde4b0e31453f649bd"},{"code":"(fn [& x] \n (letfn [(cal [a & r]\n  (if (= (count r) 0)\n     a\n     (let [[o b & rr] r]\n         (apply cal (cons (o a b) rr)))))]\n(apply cal x)))","problem":135,"user":"4f62b29ce4b0defedf855fd9"},{"code":"#(loop [a (first %&)\n        [o b & r] (rest %&)]\n  (let [x (o a b)]\n    (if (seq r)\n      (recur x r)\n      x)))","problem":135,"user":"4f043ed1535dcb61093f6bb4"},{"problem":135,"code":"(fn infix [& args]\n  (loop [[first-num o second-num & rest-of] args]\n     (if (nil? second-num) \n       first-num\n       (recur (conj rest-of\n                    (o first-num second-num))))))","user":"53a26cede4b0f1fc7453882a"},{"problem":135,"code":"(fn [& args]\n         (\n           loop [res (first args) s (rest args)]\n           (if (empty? s)\n             res\n             (recur ((first s) res (second s)) (drop 2 s))\n             )\n           )\n\n         )","user":"55d42f78e4b0e31453f64a73"},{"problem":135,"code":"(fn [ & args]\n  (loop [ arg (rest args) \n          i 0 \n          sum (first args)]\n    (if (nil? (next arg)) \n      sum\n      (recur (rest(rest arg))\n             (inc i) \n             ((first arg) sum (first (rest arg)) )\n            )\n      )\n    )\n  )","user":"6038b6b4e4b0d5df2af222ef"},{"code":"(fn [x & expr]\n  (let [compute (fn [x [op y]] (op x y))]\n  (reduce compute x (partition 2 expr))))","problem":135,"user":"50b8914ce4b0cba0e598b64d"},{"problem":135,"code":"(fn [x & expr] \n  (reduce (fn [acc [oper y]] (oper acc y)) x (partition 2 expr)))","user":"56f4cedce4b046a417f92063"},{"code":"(fn f135\n  ([x] x)\n  ([x op y] (op x y))\n  ([x op y & args] (apply f135 (op x y) args)))","problem":135,"user":"4e88feef535d8b9bb0147ca8"},{"code":"(fn [x op y & rs]\n  (reduce\n   (fn [acc [op z]]\n        (op acc z))\n   (op x y)\n   (partition 2 rs)))","problem":135,"user":"5224a46ce4b01819a2de42e5"},{"problem":135,"code":"(fn [& args]\n    (:v (reduce\n       (fn [acc e]\n          (if (number? e)\n              (let [new_v ((:f acc) (:v acc ) e)]\n                (assoc acc :v new_v :f nil))  \n                (assoc acc :f e)))  \n                  (assoc {} :f + :v 0)\n       args)))","user":"5957cc41e4b066ee0a44af76"},{"problem":135,"code":"(fn [& args]\n  (loop [elems args]\n    (let [[e1 f e2] (take 3 elems)\n          res (f e1 e2)]\n     (if (= 3 (count elems))\n         res\n         (recur (cons res (drop 3 elems)))))))","user":"5a527beee4b05d388ecb6bfe"},{"problem":135,"code":"(fn nfix [& [seed & coll]]\n  (reduce (fn [v [op numb]]\n            (op v numb))\n          seed (partition 2 coll)))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":135,"code":"(fn infix\n  [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [[arg1 op arg2 & rest] args\n          res (op arg1 arg2)]\n      (apply infix (conj rest res)))))","user":"5d48884ee4b07c84aa5ae6bb"},{"problem":135,"code":"(fn\n  [initial-result & args]\n  (let [pairs (partition 2 args)]\n    (reduce (fn [previous [operator operand]] (operator previous operand))\n            initial-result\n            pairs)))","user":"5d68f5e6e4b0db5d338d1605"},{"problem":135,"code":"(fn [start & more] (reduce #((first %2) %1 (last %2)) start (partition 2 more)))","user":"5a19d181e4b0ff51aa4b3207"},{"problem":135,"code":"(fn infix [& args]\n  (reduce (fn [acc [op e]] (op acc e))\n          (first args)\n          (partition 2 (rest args))))","user":"594c0bd7e4b07ddc2dafae56"},{"code":"#(reduce (fn [a [op b]] (op a b)) (first %&) (partition 2 (rest %&)))","problem":135,"user":"51057b2be4b06d28cacc92e8"},{"code":"(fn c\n  ([r] r)\n  ([l o r & args] (apply c (cons (o l r) args))))","problem":135,"user":"4e1350af535d04ed9115e7d8"},{"code":"(fn [& xs]\n  (if (= 1 (count xs))\n    (first xs)\n    (recur (conj (drop 3 xs) ((second xs) (first xs) (second (rest xs)))))))","problem":135,"user":"516f06dce4b06aac486e5b39"},{"code":"(fn [a & rest]\n  (reduce #((first %2) % (second %2)) a (partition 2 rest))\n  )","problem":135,"user":"4e720985535d5021c1a89655"},{"problem":135,"code":"(fn [v1 & args]\n  (reduce (fn [acc [op v1]]\n            (op acc v1))\n          v1\n          (partition 2 args)))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn [& all]\n  (loop [val (first all)\n         [op d & xs] (rest all)]\n    (if (nil? op) val\n      (recur (op val d) xs))))","problem":135,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"code":"(fn [& s]\n  (let [[a b c & d] s]\n    (if (nil? b)\n      a\n      (recur (cons (b a c) d)))))","problem":135,"user":"4e842ebb535db62dc21a62df"},{"problem":135,"code":"(fn infix-calc\n  [operand operator & more]\n  (if (> (count more) 1)\n    (apply infix-calc (operator operand (first more)) (rest more))\n    (operator operand (first more))))","user":"57b356c2e4b0fbc9809a277b"},{"code":"(fn infix [ & s]\n  (loop [f (nth s 0) op (nth s 1) se (nth s 2) idx 2]\n    (if (or (nil? op) (nil? se))\n      f\n      (recur (op f se) (nth s (+ idx 1) nil) (nth s (+ idx 2) nil) (+ idx 2)))))","problem":135,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"(fn m [& [n o p & r]]\n  (if (nil? o) n (apply m (o n p) r)))","problem":135,"user":"4fb3b865e4b081705acca2a2"},{"code":"#(loop [x %&]\n   (if (empty? (rest x))\n     (first x)\n     (recur (cons\n             ((nth x 1) (nth x 0) (nth x 2))\n             (nthnext x 3)))))","problem":135,"user":"51352899e4b082aeb3a3f03b"},{"code":"(fn [& s]\n  (loop [t (first s) e (rest s)]\n    (if (empty? e)\n      t\n      (recur ((first e) t (second e)) (drop 2 e)))))","problem":135,"user":"526f9715e4b03e8d9a4a7372"},{"problem":135,"code":"(fn [& args]\n   (first (reduce\n    (fn [assembled current]\n      (let [ret (conj assembled current)]\n        (if (= (count ret) 3)\n          [((get ret 1) (get ret 0) (get ret 2))]\n          ret)))\n    []\n    args)))","user":"59be62d5e4b0a024fb6ae435"},{"code":"(fn infix [& args]\n  (loop [accumulator (first args)\n         op (second args)\n         arg (nth args 2) ; this is the third argument\n         argsleft (rest (rest (rest args)))]; the initial conditions consume 3 arguments\n    (if\n      (nil? op) ; must be at end of args\n      accumulator\n      (recur \n        (op accumulator arg) ; the accumulator on next pass\n        (first argsleft) ; after first pass, the next op heads the list (or first is nil)\n        (second argsleft) ; the argument\n        (rest (rest argsleft)) ; two arguments consumed\n      )\n    )\n  )\n)","problem":135,"user":"518e6966e4b051adb72789ec"},{"code":"(fn foo [& xs]\n   (if (= (count xs) 1)\n     (first xs)\n     (recur (conj (next (nnext xs)) ((second xs) (first xs) (nth xs 2))))))","problem":135,"user":"50aedb8ce4b0a40c9cfb08d4"},{"problem":135,"code":"(fn [start & args]\n  (let [s (partition 2 args)]\n    (reduce\n      (fn [result [op val]]\n        (op result val))\n      start\n      s)))","user":"54684c3be4b00cfc9eacc139"},{"problem":135,"code":"(fn \n  ([buffer func numb & rest]\n   (if (empty? rest)\n     (func buffer numb)\n     (recur (func buffer numb) (first rest) (second rest) (drop 2 rest))\n     )\n   )\n  \n)","user":"57011eb3e4b08d47c97781d1"},{"problem":135,"code":"(fn infixd\n  ([n] n)\n  ([a f b & tail] (apply infixd (f a b) tail)))","user":"5530baa5e4b076ab5578f81a"},{"problem":135,"code":"(fn [& args]\n  (loop [f (first args)\n         o (second args)\n         s (nth args 2)\n         params (drop 3 args)]\n    (if (empty? params) (o f s)\n      (recur (o f s)\n             (first params)\n             (second params)\n             (drop 2 params)))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":135,"code":"(fn [& s]\n    (reduce \n       #(if (integer? %2)\n          \n          (% %2)\n          (partial %2 %))\n      s))","user":"50d0d2dde4b00b15ecee9768"},{"problem":135,"code":"(fn infix-calc [& args]\n\t(loop [r args]\n\t\t(let [[x op y] r]\n\t\t\t(if (= 1 (count r))\n\t\t\t\t(first r)\n\t\t\t\t(recur (cons (op x y) (drop 3 r)))))))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn [& coll]\n  (loop [acc (first coll)\n         ops (rest coll)]\n    (if (empty? ops)\n      acc\n      (let [[op n & rest-ops] ops]\n        (recur (op acc n) rest-ops)))))","problem":135,"user":"4ebf11bc535dfed6da9c6d9c"},{"code":"#((fn f [[a p b & r]]\n    (if p\n       (f (cons (p a b) r))\n       a)) %&)","problem":135,"user":"4f08b15b535dcb61093f6c40"},{"code":"(fn [n & ops]\n        (reduce \n         (fn [n [f x]]\n           (f n x))\n         n (partition 2 ops)))","problem":135,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":135,"code":"(fn infix-calculator [& expr]\n  (reduce (fn [res next]\n            (if (fn? next)\n              (partial next res)\n              (res next)))\n          identity\n          expr))","user":"5b47874be4b02d533a91bc70"},{"code":"(fn compute [param1 op param2 & tail]\n  (if (empty? tail)\n    (op param1 param2)\n    (apply compute (op param1 param2) tail)))","problem":135,"user":"507b7dbee4b09034bfeeb71e"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [a [f b]]\n            (f a b))\n          (first args)\n          (partition 2 (rest args))))","user":"598858d0e4b021a7a535feb5"},{"code":"(fn [left & more]\n  (loop [left left [f right & more] more]\n    (if (zero? (count more))\n      (f left right)\n      (recur (f left right) more))))","problem":135,"user":"4e22b78b535d04ed9115e81e"},{"code":"(fn f [x o y & r]\n  (let [a (o x y)]\n    (if r\n      (apply f a r)\n      a)))","problem":135,"user":"4ec3650f535dcc7ae8597d56"},{"problem":135,"code":"(fn [& arr]\n  (->> arr\n       rest\n       (partition 2)\n       (reduce #((first %2) %1 (second %2)) (first arr))))","user":"56a38a4ce4b0542e1f8d14cc"},{"problem":135,"code":"(fn calc [& coll]\n  (let [operators (keep-indexed #(if (odd? %1) %2) coll)\n        operands (keep-indexed #(if (even? %1) %2) coll)]\n            (reduce (fn [acc x] \n                        ((first x) acc (second x))) \n                        (apply (first operators) (take 2 operands))\n                        (map vector (drop 1 operators) (drop 2 operands)))))","user":"5fb2eac0e4b08cb800c85b2f"},{"code":"(fn [x & xs]\n  (loop [rv x [op b & r] xs]\n    (let [t (op rv b)]\n      (if (empty? r)\n        t\n        (recur t r)\n        ))))","problem":135,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn calc [a op b & more]\n (if (nil? more)\n   (op a b)\n   (apply calc (cons (op a b) more))))","problem":135,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"(fn infix-calc [& args]\n  (reduce #((first %2) %1 (second %2)) (first args) (partition 2 (rest args))))","problem":135,"user":"4ff355a1e4b0678c553fc34d"},{"problem":135,"code":"(fn [& [x & xs]]\n  (if (empty? xs)\n    x\n    (let [[op y & xs] xs]\n      (recur (cons (op x y) xs)))))","user":"5aea2d21e4b0cc2b61a3bbe2"},{"code":"(fn [& b] \n   ((fn r [a]\n      (if (= 1 (count a))\n        (first a)\n        (r (cons ((second a) (first a) (second (rest a))) (drop 3 a)))))\n      b))","problem":135,"user":"525cc137e4b0cb4875a45d46"},{"problem":135,"code":"(fn [start & args]\n  (reduce\n   \t(fn [res [op number]] (op res number))\n    start\n    (partition 2 args)))","user":"57eb38dbe4b0bfb2137f5b5e"},{"code":"(fn [& xs] \n  (reduce \n   (fn [m x] ((first x) m (last x))) \n   (first xs) \n   (partition 2 (rest xs))))","problem":135,"user":"4e50ad74535dc968683fc4ec"},{"code":"#(reduce (fn [v t] ((first t) v (last t))) (cons 0 (partition 2 (cons + %&))))","problem":135,"user":"51944aaae4b0142f60b4aedc"},{"problem":135,"code":"(fn ax ([a] a)\n        ([a b c] (b a c))  \n        ([a b c & x] (apply ax (b a c) x)))","user":"55a0e139e4b0acc240e31504"},{"problem":135,"code":"#(loop [rst (next %&)\n        loperand (first %&)]\n   (if-not rst\n     loperand\n     (recur (nthnext rst 2)\n            ((first rst) loperand (second rst))\n            )))","user":"60096aabe4b074f607df667f"},{"code":"(fn infix [& args]\r\n  (reduce (fn [a [op b]] (op a b))\r\n          (first args)\r\n          (partition 2 (rest args))))","problem":135,"user":"4f7d25b4e4b06e829148e1ba"},{"code":"(fn [& tokens]\n  (loop [acc (first tokens) tokens (rest tokens)]\n    (if (empty? tokens)\n      acc\n      (let [[op n & tokens] tokens]\n        (recur (op acc n) tokens)))))","problem":135,"user":"4ed188c8535d44c135fd68cf"},{"problem":135,"code":"(fn [& xs]\n  (loop [[op x & tail :as remaining] (rest xs)\n         acc (first xs)]\n    (if (empty? remaining)\n      acc\n      (recur tail (op acc x)))))","user":"5cc75ffce4b0ccb061962836"},{"problem":135,"code":"(fn [x & t]\n  (loop [r x t t]\n    (if (empty? t)\n      r\n      (recur ((first t) r (second t)) (rest (rest t))))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":135,"code":"(fn foo\n  ([x o y] (o x y))\n  ([x o y & more]\n   (apply foo (conj more (o x y)))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":135,"code":"(fn f [x & xs]\n  (if (empty? xs)\n    x\n    (apply f (cons ((first xs) x (second xs))\n                   (drop 2 xs)))))","user":"594880ade4b07ddc2dafadc2"},{"problem":135,"code":"(fn [& x] (reduce (fn [t i] (if (number? i) (t i) #(i t %))) (seq x)))","user":"53b15e65e4b047364c04448e"},{"problem":135,"code":"(fn f\n  ([a]\n   a)\n  ([a o b & more]\n   (apply f (o a b) more)))","user":"56a76f36e4b07966d5a8a05b"},{"code":"(fn [x op y & rest]\n  (loop [ res          (op x y)\n         [op z & rest] rest]\n    (case op\n      nil res\n      (recur (op res z) rest))))","problem":135,"user":"508304ede4b06a522e8c7af6"},{"problem":135,"code":"(fn [& xs]\n  (reduce #((first %2) %1 (second %2))\n          (first xs)\n          (partition 2 (rest xs))))","user":"5591cc56e4b0604b3f94d582"},{"code":"(fn  p135s [a b c & s]\n  (if (empty? s)\n    (b a c)\n    (apply p135s (b a c) s)\n    )\n  )","problem":135,"user":"4f63777be4b0defedf855fe4"},{"problem":135,"code":"(fn infix-calculator [& inputs]\n\t(loop [out (first inputs) others (rest inputs)]\n\t\t(if (empty? others)\n\t\t\tout\n\t\t\t(do (prn (first others))\n\t\t\t(recur ((first others) out (second others))\n\t\t\t\t   (rest (rest others)))))))","user":"53703287e4b0fc7073fd6e8f"},{"problem":135,"code":"(fn infix-calc [ & expr]\n  (if (= (count expr) 1)\n    (first expr)\n    (let [[x op y & rest-expr] expr]\n      (apply infix-calc (op x y) rest-expr))))","user":"52b9e920e4b07a9af57922c9"},{"code":"(fn [& args] \n  (let[[a & more] args]\n    (reduce #((first %2) %1 (last %2)) a (partition 2 more))))","problem":135,"user":"50ccf729e4b0f7a459302aac"},{"problem":135,"code":"(fn infix\n  ([a b c] (b a c))\n  ([a b c d e f g] (f (d (b a c) e) g))\n  ([a b c d e f g h i j k l m n o] (n (l (j (h (f (d (b a c) e) g) i) k) m) o)))","user":"557e8326e4b05c286339e0d7"},{"code":"(fn [op1 oper op2 & args]\n  (let [args (flatten args)]\n    (if (= (count args) 0)\n          (oper op1 op2)\n          (recur (oper op1 op2) (nth args 0) (nth args 1) (subvec (vec args) 2)))))","problem":135,"user":"530e0e4ee4b08068f379ecb4"},{"problem":135,"code":"(fn [& exp]\n  (loop [ans (first exp)\n         ops (rest exp)]\n  (if (empty? ops) ans\n    (recur\n      ((first ops) ans (second ops))\n      (drop 2 ops)\n  ))))","user":"5625f678e4b00e49c7cb47b8"},{"code":"(fn [& s]\n  (let [x  (nth s 0)\n        op (nth s 1)\n        y  (nth s 2)\n        r0 (op x y)\n        reducer (fn [acc [op2 y2]] (op2 acc y2))]\n    (reduce reducer r0 (partition 2 (drop 3 s)))\n    ))","problem":135,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":135,"code":"(fn\n  [init & other]\n  (reduce (fn [acc [operator value]] (operator acc value)) init (partition 2 other))\n  )","user":"5918b824e4b09b4ee5954bb9"},{"code":"(fn infix [start & expr]\n  (loop [result start [[op n] expr] (split-at 2 expr)]\n  (if (empty? expr)\n  (op result n)\n  (recur (op result n) (split-at 2 expr))\n)))","problem":135,"user":"51a7b4fee4b0da5f497bde8b"},{"problem":135,"code":"#(reduce (fn [a [o n]] (o a n)) % (partition-all 2 %&))","user":"523630eee4b05f3be1c7c8e8"},{"code":"(fn [x & xs] (loop [acc x r xs]\n  (if (empty? r) acc\n    (recur ((first r) acc (second r)) (drop 2 r)))))","problem":135,"user":"4ffb38e8e4b0678c553fc3c6"},{"problem":135,"code":"(fn [& args]\n  (let [init ((second args) (first args) (nth args 2))]\n    (loop [result init args (drop 3 args)]\n      (if (empty? args)\n        result\n        (recur ((first args) result (second args)) (drop 2 args))\n       )\n    )\n  )\n )","user":"5de6484ce4b0986d99407f66"},{"problem":135,"code":"(fn [& xs]\n  (loop\n    [acc (first xs)\n     args (rest xs)]\n    (if (empty? args)\n      acc\n      (let [op (first args)\n            n (second args)\n            other (rest (rest args))]\n        (recur (op acc n) other)))))","user":"53c1b787e4b00fb29b221266"},{"problem":135,"code":"(fn [& x]\n    (loop [i x res[] ]\n        (if (empty? i)\n            (last res )\n            (if (fn? (first i))\n                (recur (nnext i) (conj res ((first i) (last res) (second i))))\n                (recur (rest i) (conj res (first i)))\n             )\n        )\n    )\n)","user":"55382530e4b09218d5f44fdd"},{"code":"(fn [& s] (reduce #(if (number? %2) (% %2) (partial %2 %)) s))","problem":135,"user":"536e0930e4b0fc7073fd6e66"},{"code":"(fn [& args]\n  (first\n   (reduce #(if (= 2 (count %)) [((last %) (first %) %2)] (conj % %2)) [] args)))","problem":135,"user":"52479487e4b05ef8e38e6373"},{"problem":135,"code":"(fn calc [a f b & r]\n  (if (nil? r)\n    (f a b)\n  \t(apply calc (cons (f a b) r))))","user":"5e3a25d4e4b01d43a70e8dde"},{"code":"(fn [& xs]\n  (reduce (fn [result [op n]]\n            (op result n)) \n      (first xs) \n      (partition 2 (rest xs))))","problem":135,"user":"4e5867d1535d8a8b8723a291"},{"code":"(fn [& s]\n  (loop [s_ s res 0 op +]\n    (cond\n      (not s_) res\n      op \n        (recur \n          (next s_) \n          (op res (first s_)) \n          nil)\n      :else \n        (recur \n          (next s_) \n          res \n          (first s_)))))","problem":135,"user":"4f050dec535dcb61093f6bef"},{"problem":135,"code":"(fn simple-infix\n  [& xs]\n  (reduce (fn [accum [op x]] (op accum x)) (first xs) (partition 2 (rest xs))))","user":"5c222b7de4b07e362c230588"},{"problem":135,"code":"(fn my-infix\n  ([x op y] (op x y))\n  ([x op y & others] (apply my-infix (op x y) others)))","user":"53ce4cd4e4b00fb29b2212ef"},{"problem":135,"code":"(fn infix ([x op y] (op x y)) ([x op y & rest] (apply infix (cons (infix x op y) rest))))","user":"54e5dc08e4b024c67c0cf800"},{"problem":135,"code":"(fn infix-expr [& args]\n  (letfn [(calc [acc args]\n                ; (println acc \" : \" args)\n                (if (empty? args) acc\n                  (let [op (first args)\n                        val (first (rest args))\n                        nextacc (op acc val)]\n                    (recur nextacc (-> args rest rest)))))]\n    (calc (first args) (rest args))\n    ))","user":"52ee0de4e4b05e3f0be25ec1"},{"code":"(fn ([] 0)\n    ([a & exp]\n       (loop [total a exp exp]\n         (if (empty? exp)\n           total\n           (let [[op b & xs] exp] (recur (op total b) xs))))))","problem":135,"user":"4e48b61d535dc968683fc4be"},{"problem":135,"code":"(fn infix [x op y & math]\n  (let [res (op x y)]\n    (if (empty? math)\n      res\n      (apply infix (concat [res] math)))))","user":"55ccdc6be4b0e31453f64a18"},{"problem":135,"code":"(fn\n  [x a y & xs]\n  (if(= (count xs) 0)\n\t(a x y)\n    (recur (a x y) (first xs) (second xs) (drop 2 xs))))","user":"5697fda8e4b0542e1f8d142c"},{"problem":135,"code":"(fn [& xs] (let [[a b c & d] xs ] (if (nil? b) a (recur (cons (b a c) d)))))","user":"5b924123e4b0c0b3ffbd4a34"},{"problem":135,"code":"(fn infix\r\n  ([a & s] \r\n    (reduce\r\n      (fn [r [o b]] (o r b))\r\n      a\r\n      (partition 2 s))))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":135,"code":"#(loop [op %2 \n         x %1\n         y %3\n         z  %&]     \n    (if (nil? z)\n      (apply op [x y])\n      (recur (first z) (apply op [x y]) (second z)  (nthnext z 2))))","user":"538d70abe4b0b51d73faae6e"},{"problem":135,"code":"(fn [number & rest-of-form]\n  (loop [n number\n         other rest-of-form]\n    (if (empty? other)\n      n\n      (let [op (first other)\n            m (first (rest other))\n            res (op n m)]\n        (recur res (rest (rest other)))))))","user":"5b0e6795e4b0cc2b61a3be03"},{"code":"(fn [a & more]\n  (reduce (fn [a [op b]] (op a b)) a (partition 2 more)))","problem":135,"user":"5126dbabe4b083bb8f88cf0e"},{"problem":135,"code":"(fn [d & ds] \n  (reduce #((first %2) % (last %2)) d (partition 2 ds)))","user":"56e2dbf4e4b03a7c14b85a3b"},{"code":"(fn my-calc [ & args]\n (if (= (count args) 1)\n \t(first args)\n \t(apply my-calc \n(cons \n ((second args) (first args) (nth args 2))\n (nthnext args 3)))))","problem":135,"user":"51c09719e4b0c9c82288293c"},{"code":"(fn infix\n  ([v1 f v2]\n     (f v1 v2))\n  ([v1 f v2 & ops]\n     (apply infix (cons (infix v1 f v2) ops))))","problem":135,"user":"52527192e4b0541d1855b8af"},{"problem":135,"code":"(fn solution135\n  [x & args]\n  (first (reduce (fn [[ans f] elem]\n            (if (number? elem)\n              [(apply f [ans elem]) f]\n              [ans elem])) [x nil] args)))","user":"595bc925e4b066ee0a44afe2"},{"problem":135,"code":"(fn f \n  ([x op & r]\n   (println r)\n   (if (empty? (rest r))\n     (op x (first r))\n     (apply f (cons (op x (first r)) (rest r))))))","user":"58a822e4e4b01a0c0b232950"},{"code":"(fn [x & xs] (reduce #((first %2) %1 (second %2)) x (partition 2 xs)))","problem":135,"user":"50f9739ce4b0e7c80cb15a4d"},{"problem":135,"code":"(fn infix [& items]\n   (if (= (count items) 3)\n     ((second items) (first items) (nth items 2))\n     (recur (conj (drop 3 items) ((second items) (first items) (nth items 2))))))","user":"589e22fae4b02bd94d917e56"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [r [f v]] (f r v))\n          (first args)\n          (partition 2 (rest args))))","user":"540a4f20e4b0addc1aec66ef"},{"code":"(fn ev \n  ([x] x)\n  ([x op y & args] (apply ev (op x y) args)))","problem":135,"user":"53720c5ce4b0493c815db704"},{"code":"(fn [& terms]\n  (loop [result 0\n         op +\n         [term & tail] terms]\n    (if term\n      (if (fn? term)\n        (recur result term tail)\n        (recur (op result term) nil tail))\n      result)))","problem":135,"user":"525431dfe4b0541d1855b970"},{"problem":135,"code":"(fn [elem & expr]\n  (loop [result elem expr expr]\n    (let [[op value & remaining] expr]\n      \n      (if (nil? op)\n        result\n        (recur (op result value) remaining)\n        )\n      )\n    )   \n  )","user":"563a30d7e4b0bfe05bf117f9"},{"code":"(fn [ & more] (let [nums (filter #(number? %) more ) ops (filter #(ifn? %) more) ] \r\n      (loop [ret nums operands ops] (if (= 1 (count ret)) (first ret)  (recur (cons ((first operands) (first ret) (first (rest ret))) (rest (rest ret))) (rest operands)  )  ))\r\n  ))","problem":135,"user":"50463347e4b011c5dfee771e"},{"problem":135,"code":"(fn [& args]\n  (let [ops #{+ - * /}]\n    (loop [res '()  [x & xs] args]\n      (cond\n        (empty? xs) (first res)\n        (contains? ops x) (recur (conj res (x (first res) (first xs))) (rest xs))\n        :else (recur (conj res x) xs)))))","user":"52950ab6e4b02ebb4ef7501a"},{"code":"(fn [& coll] (reduce #((first  %2) %1 (second %2)) (first coll) (partition 2 2 (rest coll))))","problem":135,"user":"4ea11921535d7eef308072af"},{"problem":135,"code":"(fn [& rest] \n  (loop [acc (first rest) rst (drop 1 rest)] \n    (if (empty? rst) \n      acc \n      (recur \n       ((first rst) acc (second rst))\n       (drop 2 rst)))))","user":"4fc77f5ae4b0ee37620e1821"},{"code":"(fn [ & x]\n            (loop [acc (first x)\n                   x (rest x)]\n              (if (= (count x) 0)\n                acc\n                (let [op (first x)\n                      p (second x)]\n                  (recur (op acc p) (rest (rest x)))))))","problem":135,"user":"4fcbc18ae4b0ee37620e185c"},{"problem":135,"code":"(fn [h & t] (reduce (fn [r [op x]] (op r x)) h (partition 2 t)))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"problem":135,"code":"(fn[& coll] (reduce (fn[x y] ((first y) x (last y) )) (first coll) (partition-all 2 (rest coll)) ) )","user":"55757e81e4b05c286339e063"},{"code":"(fn calc [& ops]\n  (if (= (count ops) 1)\n    (first ops)\n    (apply calc \n      (cons \n        ((nth ops 1) (nth ops 0) (nth ops 2))\n        (drop 3 ops)))))","problem":135,"user":"4f559d2ce4b0a7574ea71808"},{"problem":135,"code":"(fn infix\n  ([x] x)\n  ([x fun y & xs]\n   (apply infix (fun x y) xs)))","user":"54ad4863e4b09f271ff37ce0"},{"code":"(fn [& a]\n  ((fn [l res]\n     (if (empty? l) res\n       (recur (drop 2 l) ((first l) res (second l)))))\n   (rest a) (first a)))","problem":135,"user":"51da631be4b02ceefd947766"},{"problem":135,"code":"(fn infix [& terms]\n  (loop [t terms]\n    (if (< (count t) 3)\n      (first t)\n      (let [[a op b & rs] t]\n        (recur (cons (op a b) rs))))))","user":"56175cf9e4b06b1bb2182a0f"},{"code":"(fn calc [& ops]\n  (if (= 1 (count ops))\n      (first ops)\n      (apply calc ((nth ops 1) (nth ops 0) (nth ops 2)) (drop 3 ops))))","problem":135,"user":"5338e33fe4b0e30313ee6ca1"},{"problem":135,"code":"(fn x [& xs]\n  (if (= 1 (count xs))\n    (first xs)\n    (let [[a b c] (take 3 xs)]\n      (apply x (cons (b a c) (drop 3 xs))))))","user":"51bd78c3e4b0ff155d51d2b0"},{"code":"(fn [& x]\n  (loop [acc (first x) left (partition 2 (rest x))]\n    (if (empty? left) acc\n        (let [op (first (first left))\n              secarg (second (first left))]\n          (recur (op acc secarg) (rest left))))))","problem":135,"user":"5133e51ae4b0d7a043de8cf6"},{"code":"(fn [& r] (loop [x (first r) [o s & v] (rest r)] \n  (if (nil? o)\n    x\n    (recur (o x s) v))))","problem":135,"user":"5220909fe4b0e6a83c89259f"},{"problem":135,"code":"(fn [& args]\n  (loop [[a b c & d] args]\n    (let [result (b a c)]\n   \t (if (empty? d)\n    \t  result\n     \t (recur (conj d result))) \n    )\n  ))","user":"546a6c7ce4b00cfc9eacc154"},{"code":"(fn [x & s]\n  (reduce #((first %2) % (last %2)) x (partition 2 s)))","problem":135,"user":"52e087dde4b09f7907dd1412"},{"code":"(fn [& args]\n  (loop [A 0,[f s t & r :as S] args]\n    (if (> (count S) 2)\n      (recur (s f t) (cons (s f t) r))\n      A)))","problem":135,"user":"4fda016ae4b05e33b9224f42"},{"code":"(fn [a & b]\n  (reduce \n    #((first %2) %1 \n                 (second %2)) \n    a \n    (partition 2 b)))","problem":135,"user":"4e6ebd4a535d5021c1a89610"},{"code":"(fn [& args]\n  (reduce\n    (fn [acc tok]\n      (if (number? tok)\n        (acc tok)\n        (partial tok acc)))\n    identity\n    args))","problem":135,"user":"504e13fce4b078edc5f593bc"},{"problem":135,"code":"(fn l [a f b & more]\n   (if more\n     (apply l (cons (f a b) more))\n     (f a b)))","user":"57e2e1bde4b0bfb2137f5a8f"},{"problem":135,"code":"(fn [& args]\n  (loop [res (first args) ext (rest args)]\n    (if (seq ext)\n      (recur ((first ext) res (second ext)) (nthrest ext 2))\n      res)))","user":"54a80855e4b09f271ff37c9e"},{"code":"(fn [& input]\n  (let [[acc & ops] input]\n     (loop [acc acc remainder ops]\n       (if (nil? remainder)\n         acc\n         (let [[op number & remainder2] remainder]\n           (recur (apply op [acc number]) remainder2)\n           )\n       ))\n     \n     )\n  )","problem":135,"user":"4edf95a8535d10e5ff6f5342"},{"problem":135,"code":"(fn [x op y & more]\n  (loop [op op\n         x x\n         y y\n         more more]\n    (if (seq more)\n      (recur (first more) (op x y) (second more) (drop 2 more))\n      (op x y))))","user":"58740c18e4b01531a375ea49"},{"code":"(fn [x & r]\n  (reduce #((nth %2 0) % (nth %2 1)) x (partition 2 r)))","problem":135,"user":"512f06c5e4b0762be4c7aad7"},{"code":"(fn func [& expr]\r\n  (reduce #((first %2) %1 (last %2)) \r\n          (first expr) (partition-all 2 (rest expr))))","problem":135,"user":"505dd5c4e4b0e6aca564be0e"},{"code":"(fn [& args] ((fn c [[a f b & more]] (if (next more) (c (into [(f a b)] more)) (f a b))) (vec args)))","problem":135,"user":"4f83665ee4b033992c121c1c"},{"code":"(fn infix [a f b & s]\n  (if (empty? s)\n    (f a b)\n    (recur (f a b) (first s) (second s) (drop 2 s))))","problem":135,"user":"51740b65e4b0d277d717bc67"},{"problem":135,"code":"(fn infix-calculator [& expr]\n  (group-by integer? expr)\n  (first (reduce (fn [result func] (conj (rest (rest result)) (func (first result) (second result)))) (filter integer? expr) (filter (comp not integer?) expr))))","user":"570e6974e4b0b0fb43fd06ef"},{"code":"(fn [& args]\n  (loop [r (first args) \n         exp (rest args)]\n    (if (seq exp)\n        (recur ((first exp) r (nth exp 1)) (drop 2 exp))\n        r)))","problem":135,"user":"4ef57a7f535dced4c769f246"},{"code":"(fn infix-calc [& args]\n  (let [[n1 op n2] args]\n    (if op\n      (apply infix-calc (cons (op n1 n2) (drop 3 args)))\n      n1)))","problem":135,"user":"4eab612d535d7eef30807316"},{"problem":135,"code":"(fn infix [num1 op num2 & args]\n  (reduce (fn [acc [op_ num_]]\n            (op_ acc num_))\n          (op num1 num2)\n          (partition 2 args)))","user":"5657fed1e4b0f9d632dd84ae"},{"problem":135,"code":"(fn [r op n & more]\n  (if op\n    (recur (op r n) (first more) (second more) (nthrest more 2))\n    r))","user":"580bd81ee4b0849f6811b711"},{"problem":135,"code":"(fn\n  [& expr]\n  ((fn step [init [a f b & more]]\n     (if-not f\n       init\n       (let [r (f a b)]\n         (recur r (cons r more)))))\n   0 expr))","user":"592518f0e4b072a2710fce68"},{"problem":135,"code":"(fn rpt [a f b & args]\n    (if-not (empty? args)\n      (apply rpt (f a b) args)\n      (f a b)))","user":"54eff2bee4b024c67c0cf88d"},{"problem":135,"code":"(fn [init & s]\n  (let [ops (partition 2 s)\n        red (fn [r [f n]] (f r n))]\n    (reduce red init ops)))","user":"5379306fe4b06839e8705e50"},{"problem":135,"code":"(fn [a & b] (reduce #((first %2) %1 (second %2)) a (partition 2 b)))","user":"576a8d02e4b0a07e8fc18117"},{"code":"(fn c [x f y & r]\n  ((if r\n     #(apply c % r) +)\n   (f x y)))","problem":135,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":135,"code":"#(loop [[op b & r] (rest %&) a (first %&)]\n   (if op\n     (recur r (op a b))\n     a))","user":"57035ccfe4b08d47c97781ef"},{"code":"(fn infix [& m]\n   (let [a ((second m) (first m) (nth m 2))]\n     (if (> (count m) 3)\n       (apply infix (cons a (drop 3 m)))\n       a)))","problem":135,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"(fn infixes\n  ([x] x)\n  ([x arith y & args] (apply infixes (cons (arith x y) args))))","problem":135,"user":"4f0365fc535dcb61093f6aa4"},{"problem":135,"code":"(fn [curr & other] \n    (loop [acc curr stack other]\n      (if (empty? stack)\n        acc\n        (let [operation (first stack)\n              number (second stack)\n              remaining (rest (rest stack))]\n          (recur (operation acc number) remaining)))))","user":"56a358d0e4b0542e1f8d14c9"},{"code":"(fn [init & e]\n  (let [tail (partition-all 2 e)]\n    (reduce (fn [ax [op v]](op ax v)) init tail)))","problem":135,"user":"51efd397e4b0249c592fbdeb"},{"problem":135,"code":"(fn infix [& ls]\n      (letfn [(infix2 [accum l]\n            (if (empty? l)\n              accum\n              (infix2 ((first l) accum (second l)) (rest (rest l)))))]\n    (infix2 (first ls) (rest ls))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":135,"code":"(fn [x & y]\n  (reduce (fn [a [f n]] (f a n))\n          x (partition 2 y)))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn myfn [& y] ((fn gg [ h ] \r\n                    (let [x (first h)]\r\n                      ( if (= (count x) 1) (first x)\r\n                         ( gg\r\n                  [(conj (rest (rest (rest x))) \r\n                  ((second x) (first x) (second (rest x))))])))) \r\n                  [y] ))","problem":135,"user":"50646c01e4b007509339a58b"},{"problem":135,"code":"#(reduce (fn [x y] ((first y) x (second y))) (first %&) (partition 2 (rest %&)))","user":"5ddd6cfae4b0948ae9d9adc4"},{"problem":135,"code":";(fn [& rs]\n; \"A smarter calculator\"\n  ;((fn [xs]\n    ;(loop [[a f b g & r] xs]                                                                                \n       ;(cond (nil? f) a\n         ;(or (= g *) (= g /)) (recur (cons a (cons f (cons (g b (first r)) (rest r)))))                  \n             ;(nil? g) (recur [(f a b)])                                                                      \n             ;:else (recur (cons (f a b) (cons g r)))))) rs))\n\n(fn [& rs]                                                                                         \n  ((fn [xs]\n     (loop [[a f b & r] xs]                                                                   \n       (cond (nil? f) a\n             (empty? r) (recur [(f a b)])                                                              \n             :else (recur (cons (f a b) r))))) rs))","user":"541b41d1e4b01498b1a71a65"},{"problem":135,"code":"(fn [& x]\n  (let [[ops nums] (vector (vec (filter (complement number?) x)) (vec (filter number? x)))]\n    (loop [result (first nums) op ops num (rest nums)]\n      (if (empty? op)\n        result\n        (recur ((first op) result (first num)) (rest op) (rest num))))))","user":"57ee2b3ee4b0bfb2137f5bac"},{"problem":135,"code":"(fn [& args]\n\n     (reduce (fn [x [f y]]\n                (f x y)\n                )\n             (first args)\n             (partition 2 (rest args))\n             )\n\n     )","user":"5dd1fb19e4b0948ae9d9ad51"},{"code":"(fn calc [x op y & rest]\n          (if (empty? rest)\n            (op x y)\n            (apply calc (cons (op x y) rest))))","problem":135,"user":"503b6995e4b07a1917cc34dd"},{"code":"(fn calc-infix [& args]\n  (reduce (fn [x [op y]] (op x y))\n          (first args)\n          (partition 2 (rest args))))","problem":135,"user":"50812debe4b01a93d3f38e4c"},{"problem":135,"code":"(fn [& arg]\n  (loop [expression (rest arg) result (first arg)]\n    (if (empty? expression)\n      result\n      (recur (rest (rest expression)) ((first expression) result (second expression)))\n      )))","user":"55d354e0e4b0e31453f64a62"},{"problem":135,"code":"(fn infix\n  [& ops]\n  (loop [[x op y & tail] ops]\n    (if (nil? tail)\n      (op x y)\n      (recur (conj tail (op x y))))))","user":"5553b729e4b0deb715856e05"},{"code":"#(reduce (fn [r p] ((first p) r (second p))) (first %&) (partition-all 2 (rest %&)))","problem":135,"user":"51f66e0ee4b06ff1c25c52c3"},{"code":"(fn [n op & rs]\n  (loop [rs rs f (partial op n)]\n    (if (= (count rs) 1)\n      (f (first rs))\n      (let [n (first rs) op (second rs) rss (drop 2 rs)]\n        (recur rss (partial op (f n)))))))","problem":135,"user":"5063b9a0e4b075d771da6f9d"},{"problem":135,"code":"(fn calculator\n  ([n1 o1 n2]\n    (o1 n1 n2))\n\n  ([n1 o1 n2 o2 n3 o3 n4]\n     (o3 (o2 (o1 n1 n2) n3) n4)\n    )\n\n  ([n1 o1 n2 o2 n3 o3 n4 o4 n5 o5 n6 o6 n7 o7 n8]\n     (o7(o6(o5(o4(o3(o2(o1 n1 n2)n3)n4)n5)n6)n7)n8) \n    )\n  )","user":"5b6962c1e4b0c6492753e787"},{"problem":135,"code":"(fn [x & y] (reduce #((first %2) % (last %2)) x (apply list (partition 2 y))))","user":"54db3d82e4b024c67c0cf75f"},{"problem":135,"code":"(fn [arg & args]\n  (loop [result arg\n         rest args]\n    (if (empty? rest)\n      result\n      (let [next-op (first rest)\n            next-arg (second rest)]\n        (recur (next-op result next-arg) (drop 2 rest))))))","user":"5713c575e4b07c98581c3aab"},{"problem":135,"code":"(fn infixCalculator\n  [& x]\n  (if (= 1 (count x))\n    (first x)\n    (let [[x op y & rest] x]\n      (recur (cons (op x y) rest)))))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":135,"code":"(fn calc [x f y & xs] (if-not (seq xs) (f x y) (apply calc (conj xs (f x y)))))","user":"5505ceb3e4b086ebe8a79c8b"},{"problem":135,"code":"(fn f [n s m & r]\n  (loop [n1 n s1 s m1 m r1 r]\n    (cond \n     \t(empty? r1) (s1 n1 m1)\n     \t:else (recur (s1 n1 m1) (first r1) (second r1) (rest (rest r1)) )  \n     )\n    )\n  )","user":"56df6351e4b0ca2494a095f3"},{"problem":135,"code":"(fn [& args]\n    (loop [acc ((second args) (first args) (nth args 2))\n           todo (drop 3 args)]\n      (if (empty? todo)\n        acc\n        (recur ((first todo) acc (second todo)) (drop 2 todo)))))","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn infix-calc\n          [x & more]\n        (reduce (fn [x [f y]]\n                    (f x y))\n                x (partition 2 more)))","problem":135,"user":"4fb591aee4b081705acca2c0"},{"code":"#(reduce (fn [r [o x]] (o r x)) (first %&) (partition 2 (rest %&)))","problem":135,"user":"4e80e0f2535db62dc21a62b8"},{"code":"(fn i \n  ([x op y]\n    (apply op [x y]))\n  ([x op y & args]\n    (apply i (apply op [x y]) args)))","problem":135,"user":"50eebf46e4b06330c1f87c61"},{"code":"(fn [& args]\n  (let [i-val (first args)\n        operations (filter #(not (= '() %)) (partition 2 (rest args)))]\n    (reduce #((first %2) %1 (second %2)) i-val operations)))","problem":135,"user":"523288fee4b035af41902a88"},{"problem":135,"code":"(fn [& x]\n   (let [n (first x)]\n     (loop [a (rest x) b n]\n       (if (empty? a) b\n                      (let [a1 (first a)\n                            a2 (second a)]\n                        (recur (rest (rest a)) (a1 b a2))))))\n   )","user":"5a4443cae4b0447ef91cc60f"},{"problem":135,"code":"(fn f [n & xs]\n  (if (empty? xs)\n    n\n    (let [r (drop 2 xs)]\n      (apply (partial f ((first xs) n (second xs)))r))))","user":"519e70d5e4b0acf32bc6a42c"},{"problem":135,"code":"(fn calc [x & xs]\n  (if (empty? xs)\n    x\n    (let [[[op operand] xxs] (split-at 2 xs)]\n      (recur (op x operand) xxs))))","user":"52ce1abfe4b07d0d72b27389"},{"problem":135,"code":"(fn [& args]\n    (reduce\n      (fn [total [op v]](op total v))\n      (first args)\n      (partition 2 (rest args))))","user":"564348e1e4b08d4f616f5f26"},{"problem":135,"code":"(fn calc [& exp]  \n  (loop [res (nth exp 0) i 0]\n    (if (< i (/ (- (count exp) 1) 2))\n      (recur ((nth exp (+ (* i 2) 1)) res (nth exp (+ (* i 2) 2))) (inc i))\n      res\n      )\n    )\n\n  )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"code":"(fn [l o r & x]\n      (if\n        (empty? x)\n        (o l r)\n        (recur\n          (o l r)\n          (first x)\n          (nth x 1)\n          (nthrest x 2) ) ) )","problem":135,"user":"51e28063e4b08e53a149f0f2"},{"problem":135,"code":"(fn infix [& forms]\n  (if (= 3 (count forms))\n    ((second forms) (first forms) (nth forms 2))\n    (apply infix ((second forms) (first forms) (nth forms 2)) (drop 3 forms))))","user":"545801f6e4b01be26fd74615"},{"problem":135,"code":"(fn operX [a x c & d] (if(empty? d) (x a c) (apply operX (cons (x a c) d))))","user":"568820e8e4b0dcc4269f4067"},{"problem":135,"code":"(fn infix-calculator\n  ([x op y] (op x y))\n  ([x op y & xs] (apply infix-calculator (cons (infix-calculator x op y) xs)))\n  )","user":"5b73e500e4b047b03b2036ba"},{"code":"(fn [n op n2 & more] (reduce (fn [a [op n]] (op a n)) (op n n2) (partition 2 more)))","problem":135,"user":"4db091b7838c48654951d9c2"},{"problem":135,"code":"(fn infix-calc\n\t; calculates operations from left to right\n  [& expr]\n  ((fn step [init [a f b & more]]\n     (if-not f init\n       (let [r (f a b)]\n         (recur r (cons r more))))) 0 expr))","user":"5bbbcecee4b0a20761a23611"},{"problem":135,"code":"(fn infix\n  ([x] x)\n  ([x f y & xs] (apply infix (f x y) xs)))","user":"5db5d09be4b010eb3c36cd31"},{"problem":135,"code":"(fn [& args]\n  (loop [v (vec (rest args)) acc (first args)]\n    (if (seq v)\n      (recur (subvec v 2) ((first v) acc (second v)))\n      acc)))","user":"5280539ce4b0757a1b1713f3"},{"problem":135,"code":"(fn infix\n  [token1 op token2 & args]\n  (let [result (op token1 token2)] \n    (if (nil? args)\n      result\n      (apply infix result args))))","user":"5843b231e4b089d5ab817e3d"},{"code":"(fn calc [& args]\n  (let [f (fn f [acc xs]\n            (if (empty? xs)\n              acc\n              (f ((first xs) acc (second xs)) (rest (rest xs)))))]\n    (f (first args) (rest args))))","problem":135,"user":"52d660eae4b09f7907dd1356"},{"problem":135,"code":"(fn calc\n  ([a] a)\n  ([a b c & other] (apply calc (b a c) other)))","user":"5eb4927fe4b00a66d4a95221"},{"problem":135,"code":"(fn f\n  [a op b & c]\n  (if c\n    (apply f (op a b) c)\n    (op a b)))","user":"5401aefbe4b0df28a13c62c7"},{"code":"(fn [x & ys] (reduce (fn [x [f y]] (f x y)) x (partition 2 ys)))","problem":135,"user":"515ead6be4b049add99a053e"},{"code":"(fn [a & b]\n  (loop [acc a lst b]\n    (if (empty? lst)\n      acc\n      (recur ((first lst) acc (first (rest lst)))\n              (rest (rest lst))))))","problem":135,"user":"4f8386c5e4b033992c121c1d"},{"problem":135,"code":"(fn [a & args] (reduce #((first %2) %1 (last %2)) a (partition 2 args)))","user":"57c647bbe4b05aa3c4741cf3"},{"code":"(fn calc\n  ([arg1 op arg2] (op arg1 arg2))\n  ([arg1 op arg2 & rest] (apply calc (calc arg1 op arg2) rest)))","problem":135,"user":"53523ae0e4b084c2834f4aee"},{"problem":135,"code":"(fn [& args]\n   (loop [result 0\n          xs (conj args +)]\n     (if\n       (empty? xs) result\n       (recur ((first xs) result\n               (second xs))\n              (nthrest xs 2)))))","user":"4e6a23d0535d8ccf87e9fea0"},{"problem":135,"code":"(fn [& args]\n  (reduce #(%2 %1) (first args)\n          (map (fn [op x] (fn [y] (op y x)))\n               (filter fn? args)\n               (filter (complement fn?) (rest args)))))","user":"561d23e3e4b064ca9f4b16a5"},{"code":"(fn f [a b c & r]\n  (let [s (b a c)]\n    (if (empty? r) s (apply f (cons s r)))))","problem":135,"user":"4f062d4a535dcb61093f6c08"},{"problem":135,"code":"(fn [x & r] (if (empty? r) x (recur ((first r) x (second r)) (drop 2 r)) ))","user":"53fe1c3be4b0de5c418485f2"},{"problem":135,"code":"(fn [n & ops]\n  (reduce\n   (fn [r [op n]]\n     (op r n))\n   n\n   (partition-all 2 ops)))","user":"5cf6522be4b0b71b1d808a58"},{"problem":135,"code":"(fn infix-cal [& a]\n  (loop [total (first a) res (rest a)]\n    (if (empty? res)\n      total\n      (recur ((first res) total (second res)) (drop 2 res)))))","user":"5f6adf5ee4b02876ed9fd049"},{"problem":135,"code":"(fn [arg1 op arg2 & args]\n  (let [v (op arg1 arg2)] \n    (if (not-empty args) (recur v (first args) (second args) (drop 2 args)) v)\n  )\n)","user":"558fec41e4b0277789237666"},{"code":"(fn cal\n  ([x op y] (op x y))\n  ([x op y & exps]\n   (apply cal (cons (op x y) exps))))","problem":135,"user":"514721c6e4b0d520409ed392"},{"code":"(fn [x f & z] (if (= 1 (count z))\n                  (apply f [x (first z)])\n                  (recur (apply f [x (first z)]) (second z) (drop 2 z))))","problem":135,"user":"534bd9c1e4b084c2834f4a80"},{"problem":135,"code":"(fn [& xs]\n  (reduce (fn [acc [f y]] (f acc y))\n          0\n          (partition 2 (conj xs +))))","user":"4f6fd91ae4b07046d9f4efed"},{"problem":135,"code":"(fn [x & oy]\n  (reduce (fn [acc [o y]] (o acc y)) x (partition 2 oy))\n  )","user":"56d91a53e4b0ea9b8538f7ee"},{"problem":135,"code":"(fn inn[x & more](loop[coll more\n                         ret x]\n                     (cond\n                       (empty? coll) ret\n                       :else(recur (vec(drop 2 coll))\n                                   ((first coll) ret (second coll))))))","user":"5dadf73ee4b0f8c104ccfc86"},{"code":"#((reduce (fn [p [x f]] (partial f (p x)))\n          identity\n          (partition 2 %&))\n  (last %&))","problem":135,"user":"4ef49c2c535dced4c769f238"},{"problem":135,"code":"(fn calc\n  [& x]\n  (loop [acc (first x)\n         [op num & xs] (next x)]\n    (if-not op\n      acc\n      (recur (op acc num) xs))))","user":"5b13ba71e4b0cc2b61a3be53"},{"code":"(fn calc [fop op top & args]\n  (if (empty? args)\n    (op fop top)\n    (apply calc (op fop top) args)))","problem":135,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(fn j-infix\n  [& expression]\n  (loop [x expression]\n    (if ( = (count x) 1)\n    (first x)\n    (recur (seq (cons ((second x) (first x) (last (take 3 x))) (drop 3 x) ))   ))))","problem":135,"user":"534ff8a6e4b084c2834f4ad1"},{"problem":135,"code":"(fn f \n  ([x] x) \n  ([x op y & r] (apply f (cons (op x y) r))))","user":"5b81139fe4b047b03b203782"},{"code":"(fn [& args] (loop [a (rest args) result (first args)] (if (empty? a) result (recur (drop 2 a) ((nth a 0) result (nth a 1))))))","problem":135,"user":"4f0e4ebd535d0136e6c22322"},{"problem":135,"code":"(fn [& args]\n        (let [a (group-by integer? args)\n              nums (a true)\n              ops (a false)]\n          (reduce #(%2 %1)\n                  (first nums)\n                  (map #(fn [x] (%1 x %2)) ops (rest nums)))))","user":"58c4b11ae4b021aa9917ed2c"},{"code":"(fn [& s]\n  (loop [x (first s)\n         s (rest s)]\n    (if (empty? s) x\n          (recur ((first s) x (second s))\n                 (rest (rest s))))))","problem":135,"user":"51a4416ae4b0def3c5c5868c"},{"problem":135,"code":"(fn i\n  ([r] r)\n  ([l o r & m] (apply i (o l r) m)))","user":"543366dde4b0b6b47310fcdf"},{"problem":135,"code":"(fn [& terms]\n  (reduce #(if (ifn? %1) (%1 %2) (partial %2 %1))\n          terms))","user":"5609866ee4b0053d1b86c7e3"},{"code":"(fn blah [s & more] \n  (reduce #((first %2) %1 (second %2)) s (partition 2 more)))","problem":135,"user":"5003deb9e4b0678c553fc445"},{"code":"(fn [a f b & more]\n   (loop [arg_1 (f a b)\n          arg_2 more]\n      (if (>= (count arg_2) 2)\n        (let [op (first arg_2)\n              arg_2* (second arg_2)\n              rst (drop 2 arg_2)]\n          (recur (op arg_1 arg_2*) rst))\n        arg_1)))","problem":135,"user":"52fa4f48e4b047fd55836ff7"},{"problem":135,"code":"(fn [& rest_]\n  ((fn inner [result index rest_]\n     (if (empty? rest_)\n       result\n       (if (odd? index)\n         (inner (apply (first rest_)\n                       result\n                       [(first (rest rest_))])\n                (+ index 2)\n                (rest (rest rest_)))\n         (inner (first rest_)\n                (+ index 1)\n                (rest rest_)))))\n   '() 0 rest_))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn infix [& items] (if (= (count items) 1) (first items) (apply infix ((second items) (first items) (nth items 2))\n                                                                 (next (nnext items)))))","problem":135,"user":"52fb903ee4b047fd5583700b"},{"problem":135,"code":"(fn [& instrs]\n  (loop [n 0, is instrs]\n    (let [i (first is)]\n     (cond\n      (number? i) (recur i (rest is))\n      (fn? i) (recur (i n (second is))\n                     (drop 2 is))\n      :default n))))","user":"4e6a2f93535d8ccf87e9feaa"},{"code":"(fn [& input] (loop [result (first input) elements (rest input)]\n                 (if (empty? elements)\n                   result\n                   (recur ((first elements) result (second elements)) (rest (rest elements)))\n                   )))","problem":135,"user":"5106dc1be4b01150e115ebf0"},{"problem":135,"code":"(fn [a & args]\n  (reduce (fn [res [op x]]\n            (op res x))\n          a\n          (partition 2 args)))","user":"53ea5851e4b036ad0777e4e4"},{"code":"#(loop [args (filter (complement fn?) %&) ops (filter fn? %&)] \n   (if (empty? (rest args)) \n       (first args) \n       (recur (cons ((first ops) (first args) (nth args 1)) (nthrest args 2)) \n              (rest ops))))","problem":135,"user":"524469dee4b0d8acf9ed6a9d"},{"code":"(fn [& mylst]\n    ((fn foo[ acc lst] (if (empty? lst) acc (foo ((first lst) acc (second lst))(drop 2 lst))) ) (first mylst) (rest mylst))\n    \n  )","problem":135,"user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn [& args] \n  (reduce #((first %2) %1 (second %2)) (first args) (partition 2 (rest args)) ))","problem":135,"user":"5201572be4b0d7096e99ddbb"},{"problem":135,"code":"(fn calcrev [& args] (letfn\n              [(calc [args] (cond\n                             (empty? (rest args)) (first args)\n                                (= + (first (rest args))) (+ (calc (rest (rest args))) (first args))\n                                (= - (first (rest args))) (- (calc (rest (rest args))) (first args))\n                                (= * (first (rest args))) (* (calc (rest (rest args))) (first args))\n                                (= / (first (rest args))) (/ (calc (rest (rest args))) (first args))))]\n              (calc (reverse args))))","user":"5ee93720e4b029a2061bbeb7"},{"code":"(fn[& a] (reduce (fn[x y] ((first y) x (second y))) (first a) (partition 2 (rest a)) ))","problem":135,"user":"50b25f2ce4b03ea88043355f"},{"code":"(fn [f & args]\n  (reduce \n     (fn [acc [f s]] (f acc s))\n     f\n     (partition 2 args)))","problem":135,"user":"5012ec0ae4b0c87326002230"},{"problem":135,"code":"(fn [& args] \n  (reduce (fn [a [op b]]  (op a b))\n             (first args)\n              (partition 2 (rest args)))\n  )","user":"580d7de3e4b0849f6811b73d"},{"problem":135,"code":"(fn infixCalc [a o b & c]\n  (if c\n    (apply infixCalc (o a b) c)\n    (o a b)))","user":"50c6052ce4b0c9dc10d15c56"},{"code":"(fn calc [& args]\n  (if (= (count args) 1)\n    (first args)\n    (let [[a op b] (take 3 args)]\n      (apply calc (cons (op a b) (drop 3 args))))))","problem":135,"user":"4fde492be4b05e33b9224f8a"},{"code":"(fn [primeiro & resto]\n   (reduce (fn [total seguinte]\n             ((first seguinte) total (second seguinte))) \n           primeiro (partition 2 resto)))","problem":135,"user":"4ff4bed0e4b0678c553fc35f"},{"problem":135,"code":"(fn f ([r] r) ([l o r & m] (apply f (o l r) m)))\n;(fn [x & rest] (reduce #((first %2) % (second %2)) x (partition 2 rest)))\n;#(case (first %&) 2 7 38 42 10 8 20 72)\n\n;#(loop [[op b & r] (rest %&) a (first %&)]\n;   (if op\n;     (recur r (op a b))\n;     a))","user":"57ba55c1e4b0fbc9809a2801"},{"problem":135,"code":"(fn math [& s]\n  (reduce (fn [a [op b]] (op a b)) (first s) (partition 2 (rest s))))","user":"53e8c684e4b036ad0777e48b"},{"problem":135,"code":"(fn f [x o y & rs]\n  (if rs\n  \t(apply f (o x y) rs)\n    (o x y)))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"(fn [& xs]\n  (if (empty? (rest xs))\n  (first xs)\n  (recur (cons\n          ((first (rest xs)) (first xs) (first (rest (rest xs))))\n          (rest (rest (rest xs)))))))","problem":135,"user":"51897709e4b0288ada3dbdaa"},{"problem":135,"code":"(fn [& args] (reduce (fn [a b] ((first b) a (last b))) (first args) (partition 2 (rest args))))","user":"59e18b9be4b08badc2a0c50f"},{"problem":135,"code":"(fn infix\n  ([x op y]\n\t(op x y))\n  ([x op y & args]\n  \t(apply infix (cons (op x y) args))))","user":"54d127b7e4b0e8a36923e5de"},{"problem":135,"code":"(fn math\n  [& expr]\n  (loop [n (first expr)\n         [f x & more] (rest expr)]\n    (if f\n      (recur (f n x) more)\n      n)))","user":"5d609ddde4b0c9e5857d5008"},{"problem":135,"code":"(fn [x & xs]\n  (reduce\n   (fn [operand1 [operator operand2]] (operator operand1 operand2))\n   x\n   (partition 2 xs)))","user":"54722c55e4b094393f72dd74"},{"problem":135,"code":"(fn infixer [& args]\n  (reduce (fn [acc [op n]]\n            (op acc n))\n          (first args)\n          (partition 2 (rest args))))","user":"5d7aa22ee4b02e6b30c9354e"},{"code":"(fn infix-calculator [x & xs]\n  (loop [result x a xs]\n    (if (= 2 (count a))\n      ((first a) result (second a))\n      (recur ((first a) result (second a)) (rest (rest a))))))","problem":135,"user":"4e95a440535dbda64a6f6b37"},{"code":"(fn [f & exp]\n  (let [order (partition 2 exp)]\n   (reduce \n     #(apply (first %2) [% (last %2)])\n     f order)\n))","problem":135,"user":"4f0446f9535dcb61093f6bb8"},{"problem":135,"code":"#(reduce (fn [a p] ((first p) a (last p))) %1 (partition 2 %&))","user":"54e2a779e4b024c67c0cf7d3"},{"problem":135,"code":"(fn [& d]\n  (let [[x1 f x2 & r] d]\n    (if x2\n      (recur (conj r (f x1 x2)))\n      x1)))","user":"5c2836ebe4b07e362c2305d4"},{"problem":135,"code":"(fn t1 [a f & b] (if (= 1 (count b)) (f a (first b)) (recur (f a (first b)) (first (rest  b)) (rest (rest b)))))","user":"5b421edce4b02d533a91bc2c"},{"problem":135,"code":"#(loop [[oper n & tail :as stuff] (rest %&) acc (first %&)]\n   (if (empty? stuff)\n     acc\n     (recur tail (oper acc n))))","user":"5f665d45e4b02876ed9fd02f"},{"problem":135,"code":"(fn infix [v & ops] (if (empty? ops)\n                      v\n                      (apply infix\n                             ((first ops) v (fnext ops))\n                             (nnext ops))))","user":"5e6ba862e4b04a83ad7cd27d"},{"code":"(fn [& xs]\n  (reduce #(if (fn? %2) (partial %2 %1) (%1 %2)) xs))","problem":135,"user":"504e04a4e4b078edc5f59397"},{"code":"(fn [init & rest] (reduce #((first %2) %1 (second %2)) init (partition-all 2 rest)))","problem":135,"user":"513d121fe4b0e544971636a2"},{"code":"#(reduce (fn [v [f n]] (f v n)) 0 (partition 2 (cons + %&)))","problem":135,"user":"50c75d38e4b00bb60fe0c532"},{"code":"(fn [x o y & more]\n  (loop [r (o x y)\n         m (partition 2 more)]\n    (if (nil? (first m))\n      r\n      (let [[a b] (first m)]\n        (recur (a r b) (rest m))))))","problem":135,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":135,"code":"(fn calculator\n  [& x]\n  (if (= 1 (count x))\n    (first x)\n    (let [[x op y & rest] x]\n      (recur (cons (op x y) rest)))))","user":"5e95013fe4b0fbed045a3800"},{"problem":135,"code":"(fn infix-Calculator [& args]\n   (reduce (fn [a [op b]] (op a b))\n           (first args)\n           (partition 2 (rest args))))","user":"59e14ee3e4b08badc2a0c50c"},{"code":"(fn [& x]\n       (reduce\n         (fn [acc [op v]] (op acc v))\n         (first x)\n         (partition 2 (rest x))))","problem":135,"user":"52a88c4de4b0c58976d9ac30"},{"code":"#(reduce\n  (fn [a [op b]]\n    (op a b))\n  (first %&)\n  (partition 2 (rest %&)))","problem":135,"user":"4dbb0b6c535d1e037afb21b0"},{"code":"(fn f\n  ([x] x)\n  ([x o y & a] (apply f (o x y) a)))","problem":135,"user":"4f6fbb68e4b07046d9f4efeb"},{"code":"; The calculation string looks like an initial term followed by pairs of \n; partial functions - ideal for a reduce! Took me ages to put this into \n; practice though for some reason. \n(fn [& args]\n\t(let [a (first args)\n\t\t\t\tpairs (partition 2 (rest args))]\n\t\t(reduce (fn [a [op b]] (op a b) ) a pairs)\n\t\t))","problem":135,"user":"5201ff99e4b0b2e020a18f26"},{"problem":135,"code":"(fn [& m]\n  (loop [[a b c & r] m]\n      (if-not r\n        (b a c)\n        (recur (cons (b a c) r)))))","user":"602d5eade4b0d5df2af22279"},{"problem":135,"code":"(fn sol [& xs] (->> (conj xs +) (partition 2) (reduce #((first %2) %1 (second %2)) 0)))","user":"54857657e4b0e286459a11ac"},{"problem":135,"code":";(fn [& x]\n;  (loop [o (first x)\n;         a (drop 1 x)]\n;    (if (empty? a)\n;      o\n;      (recur ((first a) o (second a))\n;             (drop 2 a)))))\n\n(fn m\n  ([x f y] (f x y))\n  ([x f y & r] (apply m (f x y) r)))","user":"57533bc1e4b02ea1147992a6"},{"problem":135,"code":"(fn infix [f & args] \n  (let [li (partition 2 args)]\n    (reduce (fn [prev [func a]] (func prev a)) f li)))","user":"546c1b2ce4b00cfc9eacc174"},{"code":"(fn [& x]\n  (let [operands (keep #(if (number? %) % nil) x) \n      operators (keep #(if (number? %) nil %) x)\n      evalfn (fn [f a b] \n        (cond\n          (= / f) (/ a b)\n          (= * f) (* a b)\n          (= + f) (+ a b)\n          (= - f) (- a b)\n            :else 0))]\n    (loop [fns operators ops (rest operands) \n            result (first operands)] \n      (if (= 1 (count fns))\n        (evalfn (first fns) result (first ops))\n        (recur (rest fns) (rest ops)\n          (evalfn (first fns) result (first ops)))))))","problem":135,"user":"4ea9b80c535d7eef30807306"},{"problem":135,"code":"(fn ic [& a]\n  (loop [s a]\n    (let [[a op b & r] s\n          ir (op a b)]\n      (if (empty? r) ir\n        (recur (conj r ir))))))","user":"53e745a1e4b036ad0777e479"},{"code":"(fn [& expr] \n  (let [ops (filter #(not (number? %)) expr)\n        numbers (filter number? expr)] \n    (loop [rops ops rnum (rest numbers) ret (first numbers)] \n      (if-not (empty? rops) \n        (recur (rest rops) (rest rnum) (apply (first rops) [ret (first rnum)]))\n        ret))))","problem":135,"user":"4ec1619b535dfed6da9c6dab"},{"code":"(fn [x & xs]\n  (reduce\n    (fn [a [f y]] (if f (f a y) a))\n    x \n    (partition 2 xs)))","problem":135,"user":"4fd96694e4b05e33b9224f37"},{"problem":135,"code":"#(reduce (fn [a [o b]] (o a b)) %1 (partition 2 %&))","user":"5ba75fdfe4b0a20761a23419"},{"code":"(fn infix [n1 op n2 & args]\n  (let [result (op n1 n2)]\n    (if (empty? args)\n      result\n      (apply infix (cons result args)))))","problem":135,"user":"4ec6559a535d6d7199dd36c9"},{"code":"(fn [& args]\n  (loop [[one op two & eqn] args]\n    (let [res (op one two)]\n    (if (empty? eqn) res (recur (cons res eqn))))))","problem":135,"user":"4dade9e9c9a9d6ed4799dc57"},{"problem":135,"code":"( fn [ & args ] ( loop [ a (rest args) res (first args) ] ( if (empty? a) res ( recur (drop 2 a) ((first a) res (second a))))))","user":"5b3aa98be4b02d533a91bbca"},{"code":"(fn [& exprs]\n  (loop [[a op b & rst] exprs]\n    (if (not (and a op b)) a\n        (recur (cons (op a b) rst)))))","problem":135,"user":"504f57c7e4b0a02f9cffde71"},{"problem":135,"code":"(fn infix [& numbers-and-ops]\n        (let [fst (first numbers-and-ops)\n              rst (partition 2 (rest numbers-and-ops))]\n          (reduce #((first %2) %1 (second %2)) fst rst)))","user":"540c54a7e4b0addc1aec6700"},{"code":"(fn [& exps]\n  (loop [result 0\n         f nil\n         x (first exps)\n         more (rest exps)]\n    (cond\n     (nil? x) result\n     (number? x) (if f\n                   (recur (f result x)\n                          nil\n                          (first more)\n                          (rest more))\n                   (recur x\n                          nil\n                          (first more)\n                          (rest more)))\n     :else (recur result\n                  x\n                  (first more)\n                  (rest more)))))","problem":135,"user":"52ab51c4e4b0c58976d9ac73"},{"code":"(fn [& xs]\n  (loop [[acc op arg & more] xs]\n    (let [acc (op acc arg)]\n      (if (seq more)\n        (recur (cons acc more))\n        acc))))","problem":135,"user":"4e6b6fd8535d8ccf87e9ff13"},{"problem":135,"code":"(fn furp [& x]\n  (if (= 1 (count x))\n    (first x)\n    ((nth x (- (count x) 2))\n     (apply furp (drop-last 2 x))\n     (last x)\n    )\n  )\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":135,"code":"(fn [x & y] (reduce #((first %2) %1 (last %2)) (conj (partition 2 y) x)))","user":"5585f088e4b001b0851d7513"},{"code":"(fn [x & args]\n  (if (seq args)\n    (recur ((first args) x (second args)) (drop 2 args))\n    x))","problem":135,"user":"50b1d166e4b03ea880433554"},{"code":"(fn [& a]\n  (reduce #((partial (first %2) %) (last %2)) (first a) (partition 2 (rest a))))","problem":135,"user":"50464831e4b011c5dfee771f"},{"problem":135,"code":"(fn [x & args] (reduce (fn [x [f y]] (f x y)) x (partition 2 args)))","user":"526e5159e4b03e8d9a4a7316"},{"problem":135,"code":"(fn [& args] (\n  reduce\n    #((first %2) %1 (second %2))\n    (first args)\n    (partition 2 (rest args))))","user":"5677f9ffe4b05957ce8c616f"},{"problem":135,"code":"(fn infix-notation\n  [& args]\n  (let [acc (first args)]\n    ((fn thing-helper [acc lst]\n       (if (empty? (rest (rest lst)))\n         ((first lst) acc (second lst))\n         (thing-helper ((first lst) acc (second lst)) (rest (rest lst))))) acc (rest args))))","user":"57434103e4b0c285004e8a9e"},{"code":"(fn i ([r] r) ([l o r & m] (apply i (o l r) m)))","problem":135,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn infix [v & rem]\n  (reduce (fn [v1, [f v2]]\n            (f v1 v2))\n          v (partition 2 rem)))","problem":135,"user":"4dada426c9a9d6ed2a99dc57"},{"problem":135,"code":"(fn [& args]\n  (loop [coll args]\n    (let [[a op b & xs] coll\n          r (op a b)]\n      (if (empty? xs) r\n        (recur (cons r xs))))))","user":"537f4652e4b06839e8705eb1"},{"problem":135,"code":"(fn infix\n  ([x] x)\n  ([x op y & rs] (apply infix (op x y) rs)))","user":"59f78b49e4b0ca45a743a30e"},{"problem":135,"code":"(fn [& [op1 op op2 & tail]]\n    (if-not op\n      op1\n      (let [v (apply op [op1 op2])]\n        (recur (cons v tail)))))","user":"516db4f6e4b046df6fbb76a0"},{"problem":135,"code":"(fn [& ops]\n  (loop [[x op y & rest] ops]\n    (if (empty? rest)\n      (op x y)\n      (recur (cons (op x y) rest)))))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn my-math\n  [res & args]\n  (let [formula (flatten args)\n        op (first formula)\n        v (second formula)\n        tail (drop 2 formula)]\n    (if (empty? tail)\n      (do\n        (op res v))\n      (my-math (op res v) tail))))","problem":135,"user":"5348cab4e4b084c2834f4a5e"},{"problem":135,"code":"#(reduce (fn [result e]\n        ((first e) result (second e))) \n        \t(first (into [] %&))\n    \t\t(partition 2 (next (into [] %&))))","user":"57fe68e2e4b0d3187e9009ce"},{"problem":135,"code":"(fn [& math-things]\n\t(loop [remaining (rest math-things) acc (first math-things)]\n\t\t(if (empty? remaining) acc\n\t\t\t(recur (rest (rest remaining)) ((first remaining) acc (second remaining)))\n\t\t)\n\t)\n)","user":"5409f8eae4b0addc1aec66e6"},{"code":"(fn infix \n  ([ a ] a)\n  ([ a o b & r] (apply infix (o a b) r)))","problem":135,"user":"535a18e3e4b04ce2eb3ed2a4"},{"code":"(fn [& tokens]\n  (let [[[a o b] t] (split-at 3 tokens)]\n    (reduce\n      (fn [r [op x]] (op r x))\n      (o a b)\n      (partition 2 t))))","problem":135,"user":"504c8165e4b09724c857af31"},{"problem":135,"code":"#((fn m [e] (if (< (count e) 2) (first e) ((second e) (m (drop 2 e)) (first e)))) (reverse %&))","user":"52a267c6e4b04e0c58e87bef"},{"problem":135,"code":"(fn calculate [& expr]\n  (reduce #(if (fn? %1)\n    \t\t(%1 %2)\n    \t\t(partial %2 %1))\n          identity expr))","user":"573102bbe4b0cd1946bd0fbb"},{"problem":135,"code":"(fn [a & other]\n  (if (seq other) (recur ((first other) a (second other)) (-> other rest rest)) a))","user":"574eb3b1e4b02ea114799247"},{"problem":135,"code":"(fn [& exps]\n  (if (= (count exps) 1)\n    (first exps)\n    (let [[first op second & more] exps]\n      (recur (cons (op first second) more)))))","user":"53a55de5e4b0b62ce3005739"},{"problem":135,"code":"(fn [& l] \n  (nth (reduce (fn [accum x]\n            (if (= (count accum) 2)\n              [((nth accum 1) (nth accum 0) x)]\n              (conj accum x))\n            ) [] l) 0))","user":"5e6e6537e4b04a83ad7cd29a"},{"problem":135,"code":"(fn eval-infix [& args]\n  (if (= (count args) 1)\n    (first args)\n    (let [arg1 (first args)\n          arg2 (first (drop 2 args))\n          op (second args)\n          res (op arg1 arg2)]\n      (apply eval-infix (conj (drop 3 args) res)))))","user":"5553b924e4b0deb715856e06"},{"code":"(fn [& e] (let [k   (partition 2 (rest e))\n                      a   (first e)]\n                      (reduce #(apply (first %2) (list % (last %2))) a k)))","problem":135,"user":"4f03f197535dcb61093f6b84"},{"problem":135,"code":"(fn calc [& coll] \n  (let [x (first coll)\n        pairs (partition 2 (rest coll))]\n    (reduce (fn [old [op val]]  (op old val)) x pairs))\n  )","user":"53ed6976e4b0d648e757f4c4"},{"problem":135,"code":"#(loop [x (first %&) a (rest %&)]\n   (if (empty? a) x\n     (recur ((first a) x (second a)) (rest (rest a))))\n   )","user":"5547b72be4b0a04f79299550"},{"problem":135,"code":"(fn infix[& args]\n  (loop [n (first args)\n         r (rest args)]\n    (if (= 0 (count r))\n           n\n           (recur\n            ((first r) n (second r))\n            (drop 2 r)))))","user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn [& args] \n  (loop [acum (first args) rem (rest args)]\n    (if (empty? rem)\n      acum\n      (recur ((first rem) acum (second rem))\n              (drop 2 rem)))))","problem":135,"user":"4faec810e4b081705acca24e"},{"problem":135,"code":"#(loop [acc              %1\r\n        [op x & formula] %&]\r\n   (if (nil? op) acc\r\n       (recur (op acc x) formula)))","user":"55d0e76ae4b0e31453f64a40"},{"problem":135,"code":"(fn [a & b] (reduce (fn [x [f y]] (f x y)) a (partition 2 b)))","user":"5776385fe4b0979f89651632"},{"problem":135,"code":"#(reduce (fn [a [s v]]\n             (s a v))\n          %1\n          (partition 2 %&))","user":"4e38f245535deb9a81d77f3e"},{"code":"(fn [a op1 b & m]\n  (reduce (fn [result [op2 x]] (op2 result x)) (op1 a b) (partition 2 m)))","problem":135,"user":"5006b7d2e4b0678c553fc48c"},{"problem":135,"code":"(fn [x & s] (reduce #((first %2) % (last %2)) x (partition 2 s)))","user":"51bfc1f0e4b0e49ef9037dd4"},{"problem":135,"code":"(fn [a f b & r]\n  (if (seq r)\n    (recur (f a b) (first r) (nth r 1) (drop 2 r))\n    (f a b)))","user":"54b2ec84e4b09f271ff37d33"},{"code":"(fn [g & r] ((fn a [s l] (if (empty? l) s (a ((first l) s (second l)) (rest(rest l))))) g r))","problem":135,"user":"510931ede4b0c71f76895663"},{"problem":135,"code":"(fn [& inps ]\n  (loop [ oprs inps]\n    (if (= (count oprs) 1)\n      (first oprs)\n      (do \n      (let [[f o s] (take 3 oprs)]\n      (recur (conj (drop 3 oprs)   (o f s))))))))","user":"55f9b2b6e4b03cbcff9738c8"},{"code":"(fn [& seq]\n  (letfn [(do-op [op & opands]\n            (apply op opands))\n          (calculate [seq acc]\n            (if (nil? seq)\n              acc\n              (calculate (next (next seq)) (do-op (first seq) acc (second seq)))))]\n    (calculate (rest seq) (first seq))))","problem":135,"user":"4eb404ba535d7eef3080735a"},{"problem":135,"code":"(fn [& args]\n  (reduce \n   (fn [acc [op n]]\n     (op acc n))\n   (first args)\n   (partition 2 (rest args))))","user":"57275898e4b0c5bde472c13e"},{"problem":135,"code":"(fn [x & xs]\n   (reduce #((first %2) %1 (second %2)) x (partition 2 xs)))","user":"52561295e4b0541d1855ba03"},{"problem":135,"code":"(fn [x & args]\n  (reduce #((first %2) %1 (last %2)) x (partition 2 args))\n  )","user":"55fe7e15e4b00f4cabc57651"},{"problem":135,"code":"(fn [& args] \n  (reduce \n   (fn [acc [op arg]] (op acc arg)) \n   (first args) \n   (partition 2 (rest args))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"code":"(fn [& c]\n  (loop [t (rest c), a (first c)]\n    (if (empty? t)\n      a\n      (recur (->> t (drop 2)) ((first t) a (second t))))))","problem":135,"user":"50a83794e4b054305ba5a831"},{"code":"(fn do-infix [a op b & more]\n  (if (seq more)\n    (apply do-infix (op a b) more)\n    (op a b)))","problem":135,"user":"4db1b3951254ad5b4805fa6f"},{"problem":135,"code":"(fn [start & args]\n  (let [s (partition 2 args)]\n    (reduce (fn [acc new] ((first new) acc (second new)))\n    \tstart s)))\n;; TODO: rename variables to make clearer purpose, function, intent","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn infix [a & e] \r\n  (if (empty? e)\r\n    a\r\n    (apply infix ((first e) a (second e)) (rest (rest e)))))","problem":135,"user":"4f0f01c0535d0136e6c22329"},{"problem":135,"code":"(fn\n    [& v]\n     (reduce (fn\n         [v1 [p v2]]\n         (p v1 v2))\n         (first v)\n         (partition 2 (rest v)))\n         )","user":"6074f5ede4b069485764de52"},{"code":"(fn [v & vs] (reduce (fn [r [op v] ] (op r v)) v (partition 2 vs)))","problem":135,"user":"5204173be4b0fb7e47ea5216"},{"code":"(fn [& args] (reduce (fn [r [op b]] (op r b))\n                      (first args)\n                      (partition-all 2 (rest args))))","problem":135,"user":"4ee88bfb535d93acb0a66881"},{"problem":135,"code":"(fn infix [x & s]\n  (let [news (partition 2 s)]\n    (reduce #((first %2) %1 (last %2)) x news)))","user":"57a13745e4b0c3d858beb8e3"},{"problem":135,"code":"(fn calculate [x & more]\n  (let [ops (partition 2 more)]\n    (reduce\n     (fn apply-op [acc [op arg]]\n       (op acc arg))\n     x\n     ops)))","user":"551bdefde4b07993ea3788d7"},{"problem":135,"code":"(fn [& pars]\n  (reduce \n   (fn [acc [ff va]] (ff acc va))\n   (first pars)\n   (partition 2 (rest pars))\n   )\n  )","user":"58bc6a88e4b0888cdc949d16"},{"code":"(fn infix [& args]\n  (if (empty? (rest (rest args)))\n    (first args)\n    (let [el (first args)\n          op (second args)\n          next (op el (second (rest args)))]\n      (apply infix (cons next (rest (rest (rest args))))))))","problem":135,"user":"5220a770e4b0e6a83c8925a3"},{"code":"(fn [i & s] (reduce (fn [x [f y]] (f x y)) i (partition 2 s)))","problem":135,"user":"519ef784e4b087743fad2198"},{"code":"(fn [& more]\n  (reduce (fn [x [f y]] (f x y))\n          (first more)\n          (partition 2 (rest more))))","problem":135,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":135,"code":"(fn f [& args]\n  (reduce \n    #((first %2) %1 (second %2))\n    (first args) \n    (partition-all 2 (rest args))))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":135,"code":"(fn [n & other]\n  (cond\n   (nil? other) n\n   :else\n     (loop [[op otherOperand & others] other acc n]\n       (cond\n        (nil? others) (op acc otherOperand)\n        :else (recur others (op acc otherOperand))\n  ))))","user":"57d837d5e4b0bd073c2023e7"},{"code":"(fn [& e]\r\n  (if (> (count e) 1)\r\n    (let [[a f b & r] e]\r\n        (recur (cons (f a b) r)))\r\n    (first e)))","problem":135,"user":"4dbb1126535d1e037afb21b3"},{"problem":135,"code":"(fn [v & args]\n  (reduce (fn [acc op]\n            ((first op) acc (second op)))\n          v (partition 2 args)))","user":"570459a9e4b0b0fb43fd0662"},{"code":"(fn infix-cal [x op & xs]\r\n  (if (empty? xs)\r\n\t    x\r\n\t  (recur (op x (first xs)) (second xs) (-> xs rest rest))))","problem":135,"user":"4f2942ace4b0d6649770a01e"},{"code":"(fn p135[& x]\n\t(loop [fns (filter fn? x)\n    \t   nums (remove fn? x)]\n  \t(if (= (count nums) 1)\n    \t(first nums)\n    \t(recur (rest fns) \n                (cons ((first fns) (first nums) (second nums)) (rest (rest nums)))))))","problem":135,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn infix [a & args]\n  (if-let [[op arg & more] args]\n    (apply infix (op a arg) more)\n    a))","problem":135,"user":"51d19c24e4b0cfcf579466c3"},{"problem":135,"code":"(fn [h & r] \n  (reduce #((first %2) %1 (last %2)) h (partition 2 r)))","user":"58384bc4e4b089d5ab817d27"},{"problem":135,"code":"(fn infix\n  ([x f y]\n   (f x y))\n  ([x f y & more]\n   (apply infix (infix x f y)\n          more)))","user":"58ef4db9e4b056aecfd47dc6"},{"code":"(fn [a & e] (reduce #((first %2) % (last %2)) a (partition-all 2 e)))","problem":135,"user":"51a058dae4b0b292b01ee3f3"},{"problem":135,"code":"(fn [& l]\n  (let [ops (partition 2 (rest l)) init (first l)]\n    (reduce #((first %2) %1 (second %2)) init ops)))","user":"5a9db5c9e4b0d174b936c7f1"},{"code":"(fn infix-eval\n  ([a op b] (op a b))\n  ([a op b & more] (apply infix-eval (op a b) more)))","problem":135,"user":"51592b81e4b0394f658fe22c"},{"problem":135,"code":"(fn [& x]\n  (loop [acc (first x) op (rest x)]\n    (if (empty? op)\n      acc\n      (recur ((first op) acc (first (rest op))) (rest (rest op))))))","user":"542ab1afe4b01498b1a71b48"},{"problem":135,"code":"(fn ans-135 [& args]\n  (reduce (fn [acc item]\n            ((first item) acc (second item)))\n          (first args)\n          (for [i (range 1 (count args) 2)]\n            [(nth args i) (nth args (+ 1 i))])))","user":"608fac60e4b03bd49d9f36c7"},{"problem":135,"code":"(fn [& terms]\n  (loop [formula (rest terms) acc (first terms)]\n    (if (empty? formula)\n      acc\n      (recur (drop 2 formula) ((first formula) acc (second formula))))))","user":"5a512929e4b05d388ecb6be2"},{"problem":135,"code":"(fn infix-cal [x & stuff]\n  (let [[foo y & otherstuff] stuff]\n    (if (nil? foo)\n      x\n      (recur (foo x y) otherstuff)\n    )\n  )\n)","user":"5f3a8493e4b004f08c61c527"},{"problem":135,"code":"(fn [& args]\n   (loop [c (first args)\n          l (rest args)]\n     (if (empty? l)\n       c\n       (let [o (first l)\n             b (second l)]\n          (recur (o c b) (drop 2 l))))))","user":"5835a222e4b089d5ab817ce5"},{"code":"(fn __ [& l]\n  (reduce #(if (number? %2)\n             (%1 %2)\n             (fn [i]\n               (%2 %1 i))\n             )\n          l))","problem":135,"user":"509b152be4b0412cdea6eb1e"},{"problem":135,"code":"(fn calculator [& exp]\n  (reduce #(if (fn? %1)(%1 %2)\n             (partial %2 %1))\n          identity exp)\n  )","user":"608b3fe1e4b0adce4b61c442"},{"problem":135,"code":"(fn [& exp] (->> exp\n                         identity\n                         ( (fn [col] (conj (partition 2 (rest col)) (first col))))\n                         (reduce #(apply (first %2) (list %1 (last %2))))\n                         ))","user":"5793931ee4b0e215f87e845c"},{"code":"#((fn rec [a lst]\n    (if (empty? lst)\n      a\n      (rec ((first lst) a (second lst)) (drop 2 lst))))\n \t(first %&) (rest %&))","problem":135,"user":"52cc09c1e4b07d0d72b27356"},{"problem":135,"code":"(fn infix [& args]\n  (cond\n    (= 1 (count args)) (first args)\n    :else (let [first-val (first args)\n                op (second args)\n                second-val (nth args 2)]\n            (recur (concat [(op first-val second-val)] (drop 3 args))))\n    )\n  )","user":"5da975b9e4b000c986472c32"},{"code":"#(reduce (fn [a [f b]] (f a b))\n   (conj (partition 2 (conj (seq %&) +)) 0))","problem":135,"user":"504e3aaae4b0f6ff3350c487"},{"code":"(fn [& e] \n  (reduce\n    (fn [a [f n]] \n      (f a n)\n    )\n    (first e)\n    (partition 2 (rest e))\n))","problem":135,"user":"4f1595da535d64f603146444"},{"problem":135,"code":"(fn [x & in]\n  (loop [x x, [f y & rest] in]\n    (if (nil? f)\n      x\n      (recur (f x y) rest))))","user":"559454f2e4b0c79f6e1db952"},{"code":"(fn infix [& args]\n  (if (= 1 (count args)) \n    (first args)\n    (let [[a op b] (take 3 args)]\n      (apply infix (cons (op a b) (drop 3 args))))))","problem":135,"user":"4ef41f26535dced4c769f230"},{"problem":135,"code":"(fn infix [& args]\n      (let [[x op y & rargs] args\n             r (op x y)]\n        (if (= (count rargs) 0) r\n          (apply infix (cons r rargs)))))","user":"4e526cc4535d302ef430da74"},{"code":"(fn this\n  ([x op y] (op x y))\n  ([x op y & rest] (apply this (op x y) rest)))","problem":135,"user":"523d02b0e4b0dbf0c3017289"},{"problem":135,"code":"#(reduce (fn [x [op y]] (op x y)) (first %&) (partition 2 (rest %&)))","user":"59074b7ce4b047aa04b19951"},{"code":"(fn app\n  ([a b c] (b a c))\n  ([a b c d e f g] (f (d (b a c) e) g) )\n  ([a b c d e f g h i j k l m n o] (n (l (j (h (f (d (b a c) e) g) i) k) m) o) )\n)","problem":135,"user":"4dd579b5535dae65d5c462ea"},{"problem":135,"code":"(fn [x & args]\n  (reduce #((first %2) % (second %2)) x (partition 2 args)))","user":"55b107fee4b002ce9d5cbc2a"},{"code":"(fn mp [v & x]\r\n(let [a v [b c & d] x]\r\n (if (and b c)\r\n    (apply mp (b a c) d)\r\n    a)))","problem":135,"user":"4e9def6b535dbda64a6f6b8f"},{"code":"(fn simple-calc [& args]\n  (if (= (count args) 1) (first args)\n      (let [[x op y & col] args]\n        (recur (cons (op x y) col)))))","problem":135,"user":"4ddb339c535d02782fcbe9f9"},{"code":"(fn [x & y]\n\t(let [li (map #(mapv identity %1) (partition 2 y))]\n\t\t(reduce #((%2 0) %1 (%2 1)) x li)))","problem":135,"user":"524f4162e4b0541d1855b806"},{"code":"(fn\n\t[x op y & r]\n\t(if (empty? r)\n\t    (op x y)\n\t  (recur (op x y) (first r) (second r) (nnext r))))","problem":135,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn infix\n  ([v] v)\n  ([v1 op v2 & more]\n   (apply infix (op v1 v2) more))\n)","problem":135,"user":"4f88ae35e4b033992c121c6d"},{"problem":135,"code":"(fn [& a]\n  (reduce (fn [a [op b]] (op a b)) (first a) (partition 2 (rest a))))","user":"5e42b688e4b01d43a70e8e6b"},{"code":"(fn calc [& l] \n  (if (= (.size l) 1) \n    (first l) \n    (apply calc (conj \n      (drop 3 l) \n      ((nth l 1) (nth l 0) (nth l 2))))))","problem":135,"user":"4ef355e3535dced4c769f228"},{"code":"(fn [& args]\n  (loop [in args reg 0]\n    (cond \n      (empty? in) reg\n(number? (first in)) \n  (recur (rest in) (first in))\n:else\n  (recur (rest (rest in))\n         ((first in) reg (first (rest in)))\n))))","problem":135,"user":"4fca2a13e4b0ee37620e184d"},{"code":"(fn infix-calc\n  ([v] v)\n  ([v1 op v2 & more] (apply infix-calc (cons (op v1 v2) more))))","problem":135,"user":"4f047c07535dcb61093f6bcd"},{"problem":135,"code":"(fn myreduce [& args]\n          (loop [result (first args)\n                 remaining (rest args)]\n            (println result)\n            (if (empty? remaining)\n              result\n              (recur ((first remaining) result (second remaining)) (drop 2 remaining)))))","user":"5654cb2de4b0f9d632dd848b"},{"code":"(fn [f & r]\n  (reduce (fn [x [o y]]\n            (o x y))\n          f\n          (partition 2 r)))","problem":135,"user":"53034738e4b0d8b024fd373e"},{"problem":135,"code":"(fn\n  [& coll]\n  (reduce (fn\n            [total [f n]]\n            (f total n))\n          (apply #(%2 %1 %3) (take 3 coll))\n          (partition 2 (drop 3 coll))))","user":"5ecfd429e4b016b56eae05a9"},{"code":"(fn [& seq] (loop [[arg1 op arg2 & t] seq] \n  (if op (recur (cons (op arg1 arg2) t)) arg1)))","problem":135,"user":"4eabb245535d7eef30807319"},{"code":"(fn x ([a] a)\n  ([a op b & rest] (apply x (op a b) rest)))","problem":135,"user":"4fe900a6e4b0547ebccb243a"},{"problem":135,"code":"(fn [h & g] (reduce (fn [a [p r]] (p a r)) h (partition 2 g)))","user":"53b15e6ee4b047364c04448f"},{"problem":135,"code":"(fn simple-calculator \n  [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"5e9771dee4b0157ca96647d0"},{"problem":135,"code":"(fn [& s] (loop [xs (rest s) x (first s)]\n            (if (empty? xs) x \n              (recur (rest (rest xs)) ((first xs) x (second xs))))))","user":"53ca23e3e4b00fb29b2212c6"},{"problem":135,"code":"(fn [& args]\n  (->> args\n      (map-indexed vector)\n      (reduce #(if (fn? (second %2))\n             ((second %2) %1 (nth args (inc (first %2))))\n             %1)\n          (first args))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"problem":135,"code":"(fn foo [& args]\n    (let [[n1 f n2 & args] args]\n      (if (nil? f)\n        n1\n        (apply foo (f n1 n2) args))))","user":"5c995fa4e4b048ec896c5a96"},{"problem":135,"code":"(fn [& args]\n  (loop[result (first args), opSeq (next args)]\n   (if(empty? opSeq) result\n     (recur ((first opSeq) result (second opSeq)) (drop 2 opSeq)))))","user":"556c70dae4b09a3098a524fd"},{"problem":135,"code":"#(reduce (fn [acc [op v]] (op acc v))\n         %\n         (partition 2 %&))","user":"5455c2f3e4b080a794c2c87d"},{"code":"(fn [& args]\n  (reduce \n    (fn [so-far token]\n      (if (integer? token)\n         (let [[val op] so-far]\n           (op val token))\n         (vector so-far token)))\n     [0 +]\n     args))","problem":135,"user":"5014754de4b094324338f8e5"},{"problem":135,"code":"(fn c [& exp] (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"5bc7ba68e4b07a9b28b100b0"},{"code":"#(loop [acc (first %&) rst (rest %&)]\n   (if (empty? rst)\n     acc\n     (recur ((nth rst 0) acc (nth rst 1)) (drop 2 rst))))","problem":135,"user":"52b405e1e4b0c58976d9ad15"},{"problem":135,"code":"(fn calc\n  ([x o y] (o x y))\n  ([x o y & r] (apply calc (o x y) r)))\n\n;(fn [& s]\n;  (reduce (fn [r [f n]] \n;            (f r n)) \n;                (first s) \n;                (partition 2 (rest s))))","user":"55b1e9e7e4b0da326a65cf74"},{"code":"(fn [& [a b c & others]]\r\n   (if (empty? others)\r\n     (b a c) (recur (cons (b a c) others) )\r\n   )\r\n  )","problem":135,"user":"4ead76b7535d7eef30807320"},{"problem":135,"code":"(fn infixer [& x]\n  (if (> (count x) 3)\n      (apply infixer ((second x) (first x) (nth x 2)) (drop 3 x))\n      ((second x) (first x) (nth x 2))))","user":"574a71b7e4b02ea1147991fb"},{"code":"(fn infx \n  ([a f b & rst]\n    (apply infx (cons (f a b) rst) ))\n  ([x] x))","problem":135,"user":"502a5fa4e4b09e8f859a9fbd"},{"code":"(fn infix\n  ([& infix_expr]\n    (\n      (fn [infix_expr current_result]\n        (if\n          (empty? infix_expr)\n          current_result\n          (let [first_operand current_result\n                func (first infix_expr)\n                second_operand (first (rest infix_expr))]\n            (recur\n              (rest (rest infix_expr))\n              (func first_operand second_operand)\n            )\n          )\n        )\n      )\n      (rest infix_expr) (first infix_expr)\n    )\n  )\n)","problem":135,"user":"502be4fae4b08f5602f232eb"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [fst snd]\n            (if (number? fst) (partial snd fst) (fst snd)))\n          args))","user":"588e4e05e4b00487982d5188"},{"problem":135,"code":"(fn mycal\n\t[& args]\n\n\t(loop \n\t\t[myseq args \n\t\t res   0\n\t\t myfn  #(+ %1 %2)\n\t\t]\n\t\t(if (empty? myseq)\n\t\t\tres\n\t\t\t(cond\n\t\t\t\t(= (first myseq) +) (recur (rest myseq) res #(+ %1 %2) )\n\t\t\t\t(= (first myseq) -) (recur (rest myseq) res #(- %1 %2) )\n\t\t\t\t(= (first myseq) *) (recur (rest myseq) res #(* %1 %2) )\n\t\t\t\t(= (first myseq) /) (recur (rest myseq) res #(/ %1 %2) )\n\t\t\t\t:else (recur (rest myseq) (myfn res (first myseq)) myfn         )\n\n\t\t\t\t)\n\n\t\t\t)\n\t\t)\n\t)","user":"55897fe2e4b059ccff29b205"},{"problem":135,"code":";(fn [x & _] ({2 7 38 42 10 8 20 72} x))\n(fn [x & y] ((fn f [a [b c & d]] (if b (f (b a c) d) a)) x y))","user":"539f4e9ee4b0ca733b974498"},{"problem":135,"code":"(fn [& rest]\n  (loop [xs rest]\n    (if (= (count xs) 1)\n      (first xs)\n      (recur (conj (drop 3 xs) ((second xs) (first xs) (nth xs 2)))))))","user":"57015a1de4b08d47c97781d4"},{"problem":135,"code":"(fn [operand & infix-seq]\n  (reduce (fn [roll [operator operand]] (operator roll operand)) operand (partition 2 infix-seq)))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":135,"code":"(fn [& x] \n  (loop [res 0\n         ops (cons + x)]\n    (if (empty? ops)\n        res\n        (let [[op val & rops] ops]\n          (recur (op res val) rops)))))","user":"56018dd4e4b04bb52996e18f"},{"problem":135,"code":"(fn infix\n   ([x op y]\n    (op x y))\n   ([x op y & xs]\n    (apply infix (cons (op x y) xs))))","user":"54577fefe4b01be26fd7460d"},{"code":"(fn [x & xs]\n  (reduce #((first %2) %1 (second %2)) x (partition 2 xs)))","problem":135,"user":"53468f6ce4b084c2834f4a3f"},{"problem":135,"code":"(fn e[n & s] \n  (if (empty? s) \n    n \n    (apply e ((first s) n (second s)) (rest (rest s)))))","user":"5457e5f1e4b01be26fd74613"},{"code":"(fn calc [& more]\n  (if-not (nth more 3 nil)\n    ((second more) (first more) (nth more 2))\n    (apply calc ((second more) (first more) (nth more 2)) (nthrest more 3))))","problem":135,"user":"52bafc88e4b07a9af57922dc"},{"problem":135,"code":"(fn [x & xs] (loop [result x stack xs]\n  (if (= 0 (count stack))\n    result\n    (recur ((first stack) result (first (rest stack))) (rest (rest stack)))\n  )\n))","user":"55d79b87e4b0e31453f64aa8"},{"problem":135,"code":"(fn [x & y] (let [pairs (partition 2 y)]\n\t\t\t (reduce (fn [acc [op oper]] (op acc oper)) x pairs)))","user":"54d2b411e4b0e8a36923e5f9"},{"problem":135,"code":"(fn [& s]\n  (reduce (fn [m v]\n            ((first v) m (second v))) (first s) (partition 2 (rest s))))","user":"56b6e354e4b0982f16b37e41"},{"code":"(fn calc [acc & coll] (if (empty? coll) acc\n  \t\t\t\t\t\t  (let [[opr opa & xs] coll] \n                               (apply calc (opr acc opa) xs))))","problem":135,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":135,"code":"(fn [a f b & args]\n   (reduce (fn [x [f y]] (f x y)) (f a b) (partition 2 args)))","user":"59473563e4b07ddc2dafad97"},{"code":"(fn c [& s]\n((fn calc [res args]\n  (let [f1 res\n        op (first args)\n        fN (next args)\n        f2 (first fN)]\n    (if (seq args)\n      (calc (op f1 f2)\n            (next fN))\n      res))) (first s) (next s)))","problem":135,"user":"522048b3e4b0e6c71e0c0c16"},{"problem":135,"code":"(fn [a & s] (reduce #((first %2) % (last %2)) a (partition-all 2 s)))","user":"56c08696e4b060a8e693e3aa"},{"problem":135,"code":"(fn func\n  [op1 f op2 & rest]\n  (if (empty? rest)\n    (f op1 op2)\n    (apply\n      func\n      (concat\n        (vector (f op1 op2) (first rest) (second rest))\n        (drop 2 rest)))))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":135,"code":"(fn [& s]\n  (reduce (fn [r i]\n            (if (vector? r)\n              ((first r) (second r) i)\n              (vector i r)))\n          s))","user":"57008afae4b08d47c97781ca"},{"code":"(fn [& args] (loop [s (rest args) a (first args)] (if (empty? s) a (recur (rest (rest s)) ((first s) a (second s)) ))))","problem":135,"user":"52b43468e4b0c58976d9ad1b"},{"problem":135,"code":"(fn calc \n  ([n] n)\n  ([a b c & more]\n  \t(apply calc (cons (b a c) more))))","user":"5803ba6de4b0a837a8b30c95"},{"problem":135,"code":"(fn answer [& all]\n  (loop [[x f y & more] all]\n    (if (empty? more)\n      (f x y)\n      (recur (cons (f x y) more))\n    )\n  )\n)","user":"5e491182e4b043cd24807a46"},{"code":"(fn [& x] (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) x))","problem":135,"user":"4e61bb60535d8ccf87e9fe5c"},{"problem":135,"code":"(fn [& args]\n   (reduce \n     (fn [accum [op nxt]]\n       (op accum nxt))\n   (first args)\n   (partition 2 (rest args))))","user":"58d27bcae4b03c36ff7e58fe"},{"code":"(fn [x & expr] (reduce (fn [a [op b]] (op a b)) x (partition 2 expr)))","problem":135,"user":"4eb2e6ca535d7eef3080734f"},{"code":"(fn [x f y & args]\n  (let [calc-iter\n        (fn calc-iter [acc, xs]\n  (cond\n   (empty? xs) acc\n   :else       (calc-iter ((nth xs 0) acc (nth xs 1)) (drop 2 xs))\n   )\n  )]\n  (calc-iter (f x y) args)\n    )\n)","problem":135,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn [b & m]\n  (reduce (fn [b [o a]] (o b a)) b (partition 2 m)))","problem":135,"user":"4db1f7d223724b71670a9c07"},{"problem":135,"code":"(fn function-135\n\n [t & tooo]\n   (loop\n     [[f1 & r1 :as f] (for [x tooo :when (not (number? x))] x)\n      [f2 & r2 :as n] (for [x tooo :when (number? x)] x)\n      num t]\n     (if (and (empty? f) (empty? n))\n       num\n       (recur\n         r1\n         r2\n         (f1 num f2)))))","user":"598d0dc3e4b02b9968b84d18"},{"code":"(fn infix-calc [& args]\n  (if (= (count args) 1)\n    (first args)\n    (let [a (first args)\n          b (nth args 2)\n          operator (second args)\n          result (operator a b)\n          new-args (conj (rest (rest (rest args)))\n                         result)]\n      (recur new-args))))","problem":135,"user":"51db0d99e4b06aa4d4669a9d"},{"code":"(fn [n & rst]\n  (reduce\n    #(let [[op x] %2] (op % x))\n    n\n    (partition 2 rst)))","problem":135,"user":"4fe4c09ee4b0e8f79898febb"},{"problem":135,"code":"(fn inthehood\n    [fi se & more] \n    (\n      if(= (count more) 1)\n      (se fi (first more))\n      (apply inthehood (se fi (first more)) (rest more))\n    )\n  )","user":"5034b623e4b062bc5d7ae168"},{"problem":135,"code":"(fn [& exprs]\n  (loop [[x & xs] exprs\n         acc 0\n         oper +]\n    (cond\n      (nil? x) acc\n      (number? x) (recur xs (oper acc x) nil)\n      :else (recur xs acc x))))","user":"54d7e277e4b0a52adc2e2031"},{"code":"(fn ! ([l o r] (o l r)) ([l o r & x] (apply ! (o l r) x)))","problem":135,"user":"513dcc1ce4b0825f97f7f964"},{"code":"(fn math [& expr]\n  (->> expr\n       (#(list (next (take-nth 2 %))\n           (take-nth 2 (next %))))\n       (apply map list)\n       (reduce #(apply (second %2) [%1 (first %2)] )\n               (first expr))))","problem":135,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":135,"code":"(fn [& args]\n   (reduce #((first %2) %1 (last %2)) (first args) (partition 2 (rest args)))\n   )","user":"5687fe58e4b0dcc4269f4065"},{"code":"(fn c [& [n f m & r]]\n  (if (nil? r)\n    (f n m)\n    (apply c (cons (f n m) r))))","problem":135,"user":"53973e7be4b0b51d73faaee6"},{"problem":135,"code":"(fn calculate-infix-expression\n  [& expr]\n  (reduce (fn [acc v]\n            ((first v) acc (second v)))\n          (first expr)\n          (partition 2 (rest expr))))","user":"5d53a59ae4b0776584bd6f72"},{"code":"(fn i [a op b & r]\n  (let [aob (op a b)]\n    (if (nil? r)\n      aob\n      (apply i aob r))))","problem":135,"user":"50435852e4b034ff00315d22"},{"code":"#(loop [[a o b & r] %&]\n   (let [v (o a b)]\n     (if (seq r)\n       (recur (conj r v))\n       v ) ) )","problem":135,"user":"4df20dda535d08e6dec9fe23"},{"code":"(fn [x & y]\n  (reduce\n    #(let [[o n] %2] (o % n))\n    x\n    (partition 2 y)))","problem":135,"user":"4db85282535d1e037afb218a"},{"problem":135,"code":"(fn calc [& args]\n  (let [[a op b & args] args\n        x (op a b)]\n    (if (seq args)\n      (recur (cons x args))\n      x)))","user":"55088bb3e4b06e50f9beb10c"},{"code":"(fn calc [x & xs]\n  (reduce #((nth %2 0) %1 (nth %2 1)) x (partition 2 xs)))","problem":135,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":135,"code":"#(->> (drop 1 %&)\n         (partition 2)\n         (reduce (fn [result [op val]] (op result val)) (first %&))\n         )","user":"596d630ae4b069c0a1a19846"},{"code":"(fn [& a]\n  ((fn calc [x]\n  (if (= 1 (count x))\n    (last x)\n    ((last (butlast x)) (calc (butlast (butlast x))) (last x) )))a))","problem":135,"user":"513b77f3e4b00f740c76c403"},{"problem":135,"code":"(fn [a & args]\n  (reduce \n   (fn [a [op b]] (op a b))\n   a\n   (partition 2 args)))","user":"57458b82e4b009280f9f2b4e"},{"problem":135,"code":"(fn fix_math [init & args](if (empty? args) init (recur (apply #(%1 init %2) (take 2 args)) (drop 2 args))))","user":"5a533cc0e4b05d388ecb6c09"},{"code":"(fn [ & args]\n(letfn [(f [expr]\n          (let [[a g b] (take 3 expr)]\n            (if g\n              (f (cons (g a b) (drop 3 expr)))\n              (first expr))))]\n  (f args)))","problem":135,"user":"5097b556e4b00ad8bab4e970"},{"problem":135,"code":"(fn calc [a f b & args]\n  (if (empty? args) (f a b)\n    (apply calc (concat [(f a b)] args))))","user":"558378dce4b05c286339e115"},{"problem":135,"code":"(fn calculate [& args]\n   (loop [s (rest args)\n          res (first args)]\n     (if (empty? s)\n       res\n       (recur (drop 2 s) ((first s) res (second s))))))","user":"55a5c3bee4b0acc240e3154e"},{"problem":135,"code":"(fn [& args]\n  (let [seed (first args)\n        ops (partition 2 (rest args))]\n    (reduce (fn [x [op n]] (op x n)) seed ops)))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":135,"code":"(fn k [& args](reduce (fn [a [b c]](b a c)) (first args) (partition 2 (rest args))))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":135,"code":"(fn infix [val & others]\n  (loop [total-so-far val [next-operator next-operand & remaining-opps] others]\n    (let [next-result (next-operator total-so-far next-operand)]\n      (cond\n        (nil? remaining-opps) next-result\n        :else (recur next-result remaining-opps)))))","user":"60c91f48e4b0e0fa5f1b4304"},{"problem":135,"code":"(fn\n   [a & sq]\n   (reduce (fn [x [f y]]\n             (f x y))\n           a\n           (partition 2 sq))\n   )","user":"5da94ccfe4b000c986472c2f"},{"problem":135,"code":"(fn infix-calc\n  [& args]\n  (reduce \n   #((first %2) %1 (last %2)) \n   (first args)\n   (partition 2 (rest args))))","user":"53b952eee4b047364c0444e6"},{"code":"(fn calc\n           ([a op b] (op a b))\n           ([a op b op2 & more] (apply calc (op a b) op2 more))\n           )","problem":135,"user":"4f3cd535e4b0e243712b1f56"},{"code":"(fn [n & ops] (reduce (fn [l [f r]] (f l r)) n (partition 2 ops)))","problem":135,"user":"51aa56c4e4b04e3dc0c27b27"},{"code":"(fn [& more]\n\t(letfn \n\t\t[(step [coll]\n\t\t\t(if\n\t\t\t\t(seq coll)\n\t\t\t\t(if \n\t\t\t\t\t(= 3 (count coll))\n\t\t\t\t\t((second coll) (first coll) (nth coll 2))\n\t\t\t\t\t(step\n\t\t\t\t\t\t(cons\n\t\t\t\t\t\t\t((second coll) (first coll) (nth coll 2))\n\t\t\t\t\t\t\t(drop 3 coll))))))]\n\t\t(step more)))","problem":135,"user":"514d7e29e4b019235f6c0587"},{"code":"(fn [& args] (if (= (count args) 1) (first args) (let [[x op y & col] args] (recur (cons (op x y) col)))))","problem":135,"user":"52d2e54ae4b099d49816f0b9"},{"problem":135,"code":"(fn [& args]\n     (reduce\n       #(if (fn? %1)\n            (%1 %2)\n            (partial %2 %1))\n             args))","user":"56df6417e4b0ca2494a095f7"},{"code":"(fn calc [& xs]\n  (if (= 1 (count xs))\n    (first xs)\n    (let [[x op y] xs]\n      (recur (conj (drop 3 xs) (op x y))))))","problem":135,"user":"4feff3b6e4b0678c553fc31e"},{"problem":135,"code":"(fn [n & expr]\n    (reduce\n      #((first %2) %1 (nth %2 1))\n      n\n      (partition 2 expr)))","user":"551afdf8e4b07993ea3788cb"},{"problem":135,"code":"(fn calc [& coll]\n  (reduce (fn [acc el] \n            ((first el) acc (second el)))\n        (first coll)\n        (partition 2 (rest coll))))","user":"5d078e2de4b0cc9c915881fa"},{"problem":135,"code":"(fn [x & xs]\n    (reduce (fn[acc operArgPair]\n            ((first operArgPair) acc (second operArgPair))) x (partition 2 xs)))","user":"563cce5be4b0bfe05bf1183f"},{"problem":135,"code":"(fn infix-calc [& args]\n  (reduce (fn [accumulated next]\n            ((first next) accumulated (second next))) \n          (first args) \n          (partition 2 (rest args))))","user":"59f192e0e4b0966464fe6a5e"},{"problem":135,"code":"(fn calc [x & [op & expr]]\n  (if-not op\n    x\n    (apply calc (op x (first expr))\n           (rest expr))))","user":"5393185ae4b0b51d73faaeb7"},{"code":"(fn f\n  ([a] a)\n  ([a b c & r ] (apply f (conj r (b a c)))))","problem":135,"user":"4deff9f9535d08e6dec9fe15"},{"problem":135,"code":"(fn c [i & l]\r\n   (reduce (fn [a [o n]] (o a n)) i (partition 2 l)))","user":"5f2c02d1e4b033932238a65f"},{"problem":135,"code":"(fn [& eqn]\n  (loop [eq eqn n 0 op nil]\n    (let [x (first eq) xs (rest eq)]\n      (cond\n        (empty? xs) (op n x)\n        (fn? x) (recur xs n x)\n        (number? x) (if (nil? op)\n                      (recur xs x nil)\n                      (recur xs (op n x) op))))))","user":"55c68089e4b0e31453f649c4"},{"code":"(fn [x & xs]\n  (loop [tot x [op n & expr] xs]\n    (if (nil? op)\n      tot\n      (recur (op tot n) expr))))","problem":135,"user":"517b59b8e4b0925c997201d0"},{"problem":135,"code":"(fn [& as] (loop [[a b c & d] as]\n              (if (nil? d)\n                (b a c)\n                (recur (flatten (list (b a c) d))))\n              ))","user":"572b73d0e4b0cd1946bd0f3a"},{"code":"(fn [x & y] (reduce \n  (fn [s [o a]] (o s a))\n  x \n  (partition 2 y)))","problem":135,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"code":"(fn [& x]\n  (reduce #((first %2) %1 (last %2))\n     (conj \n     (partition 2 (rest x))\n     (first x))))","problem":135,"user":"52f5f8b4e4b09b582c12c9cc"},{"code":"(let [f\n      (fn [args result]\n       (if (nil? args)\n         result\n         (recur (nnext args) ((first args) result (second args)))\n       )\n      )]\n  (fn [& args] (f (next args) (first args)))\n)","problem":135,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":135,"code":"(fn [l op r & res]\n  (loop [left l\n         operation op\n         right r\n         the-rest res]\n    (let [result (operation left right)]\n      (if\n        (empty? the-rest)\n        result\n        (recur result (first the-rest) (second the-rest) (rest (rest the-rest)))\n        )\n      )\n    )\n  )","user":"5e44f5b1e4b01d43a70e8e8d"},{"problem":135,"code":"(fn [& args]                              ; receive multiple arguments\n  (let [[x op y] args                     ; destructuring first expression 3 elements\n        result (op x y)                   ; make the first operation and store it\n        next-exp (drop 3 args)]           ; discard first expresion and maintain the rest\n    (if (empty? next-exp)                 ; if no more expression to evaluate\n        result                            ; return the final result\n        (recur (cons result next-exp))))) ; if is not empty evaluate result with next expression","user":"560dbf17e4b05f002753df44"},{"problem":135,"code":"(fn infix-calc [one op two & args]\n  (loop [args args res (op one two)]\n    (if (empty? args)\n      res\n      (recur (rest (rest args)) ((first args) res (second args))))))","user":"55151417e4b055c2f668d4da"},{"code":"(fn [num & opnums]\n    (reduce (fn [x [op y]] (op x y)) num (partition 2 opnums)))","problem":135,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"(fn [& args]\n   (loop [coll (vec args)]\n      (if (= 1 (count coll))\n         (first coll)\n         (recur (cons ((second coll) (first coll) (nth coll 2)) (drop 3 coll))))))","problem":135,"user":"4fb99483e4b081705acca2da"},{"problem":135,"code":"(fn [& expr]\n  (loop [res (first expr) expr (rest expr)]\n    (if (seq expr)\n      (recur ((first expr) res (second expr)) (nthrest expr 2))\n      res)))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":135,"code":"(fn [& args]\n               (loop [res 0 infix (into [+] args)]\n        (if (= 0 (count infix))\n          res\n          (let [ops (take 2 infix)\n                operator (first ops)\n                operand (second ops)\n                infix (drop 2 infix)]\n            (recur (operator res operand) infix)))))","user":"5dc53ddee4b02f9375f4e1bd"},{"code":"(fn math [n1 op n2 & args]\n  (let [result (op n1 n2)]\n    (if (seq args)\n      (apply math (cons result args))\n      result)))","problem":135,"user":"4ef0eaef535dced4c769f211"},{"code":"(fn f [& args]  (if (= 3 (count args)) ((second args) (first args) (nth  args 2))  (apply f (cons ((second args) (first args) (nth  args 2)) (drop 3 args)))))","problem":135,"user":"5296008fe4b02ebb4ef7502a"},{"code":"(fn [n & col] \n   (reduce #((first %2) % (last %2)) n (partition 2 col)))","problem":135,"user":"506d5e4ce4b0a302964c5493"},{"code":"(fn [& [x op y & r]]\n  (if op (recur (cons (op x y) r)) x))","problem":135,"user":"51c8301ee4b07ef393169e4d"},{"problem":135,"code":"(fn [& sentence]\n  (loop [exprs (rest sentence)\n         acc (first sentence)]\n    (if (empty? exprs) acc\n      (recur (drop 2 exprs) ((first exprs) acc (second exprs))))))","user":"5566d812e4b0c656e3ff1837"},{"problem":135,"code":"(fn infix \n  [& lst]\n  \n  (reduce (fn [x [operation y]] (operation x y))\n     (first lst)\n     (partition 2 (rest lst))))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":135,"code":"(fn f\n  [start & others]\n  (reduce \n    #(if (fn? %2)\n      (partial %2 %)\n      (% %2))\n    start\n    others))","user":"55a62092e4b0acc240e31554"},{"problem":135,"code":"(fn infix-calc [first & rest]\n  (reduce (fn [a [op b]] (op a b)) first (partition 2 rest)))","user":"57e79d8ee4b0bfb2137f5afe"},{"code":"(fn [& args]\n  (let [a (partition 2 (rest args)) r (first args)]\n    (reduce #((nth %2 0) %1 (nth %2 1)) r a)))","problem":135,"user":"50a5f72fe4b0aa96157e2611"},{"code":"(fn [& body]\n  (loop [lhs (first body) expr (rest body)]\n    (if (empty? expr) lhs\n      (let [[op rhs] expr]\n        (recur (op lhs rhs) (drop 2 expr))))))","problem":135,"user":"4ee4f4a9535d1385b2869d85"},{"problem":135,"code":"#(reduce (fn [result e]\n        ((first e) result (second e))) \n            (first (into [] %&))\n            (partition 2 (next (into [] %&))))","user":"5801eed1e4b0a837a8b30c63"},{"code":"(fn i \n    ([r] r) \n    ([l o r & m] (apply i (o l r) m)))","problem":135,"user":"50e7dd5de4b077ad597af36b"},{"problem":135,"code":"(fn\n  ([& args]\n   (reduce (fn [num-1 [op num-2]] (op num-1 num-2))\n           (first args)\n           (partition 2 (rest args)))))","user":"57b084ece4b0fbc9809a2745"},{"problem":135,"code":"(fn [& args]\n   (reduce (fn [a [op b]] (op a b))\n           (first args)\n           (partition 2 (rest args))))","user":"6040e6dbe4b0d5df2af2232a"},{"problem":135,"code":"(fn infixCalculator\n  ([x] x)\n  ([x op y] (op x y))\n  ([x op y & more] (apply infixCalculator (op x y) more)))","user":"57fc34f0e4b0d3187e90098e"},{"code":"(fn f ([n] n)\n  ([n o v & z] (apply f (cons (o n v) z))))","problem":135,"user":"50e82c31e4b0ebbe794eb7da"},{"problem":135,"code":"(fn [& coll] \n  (let [f #(%2 %1 %3)]\n    (loop [[head tail] (split-at 3 coll)]\n      (let [res (apply f head)]\n        (if (empty? tail)\n          res\n          (recur [(cons res (take 2 tail)) (drop 2 tail)]))))))","user":"5071b614e4b0e3170b5a867d"},{"code":"(fn f [a o b & args]\n  (if args\n    (apply f (o a b) args)\n    (o a b)))","problem":135,"user":"4de52c87535d08e6dec9fdf0"},{"problem":135,"code":"(fn inf [& arg]\n  (loop [cur (first arg) ops (rest arg)]\n    (if (nil? ops)\n      cur\n      (let [nv ((first ops) cur (second ops))\n            no (next (next ops))]\n        (recur nv no)))))","user":"54b95f3de4b0ed20f4ff6eab"},{"code":"(fn [x & xs](first (reduce\n   (fn [[x f] y] (if f [(f x y) nil] [x y]))\n   [x nil]\n   xs)))","problem":135,"user":"52319066e4b0e2e8de81d1e9"},{"problem":135,"code":"(fn [& s] (reduce (fn [acc [operand1 operator operand2]] (operator (or acc operand1) operand2)) nil (partition 3 2 s)))","user":"57cd7498e4b0c746388ab897"},{"problem":135,"code":"(fn infix \n  ([x op y] (op x y))\n  ([x op y & rest]\n    (apply infix (cons (infix x op y) rest))))","user":"565418cde4b0f9d632dd847c"},{"problem":135,"code":"(fn [& expression]\n  (let [reduce-fn (fn [x y] ((first y) x (second y)))\n        op-num-pairs (partition 2 (rest expression))\n        init-num (first expression)]\n    (reduce reduce-fn init-num op-num-pairs)))","user":"55cb11e9e4b0e31453f649ff"},{"problem":135,"code":"(fn calc\n  ([a op b & remaining]\n   (if (empty? remaining)\n     (op a b)\n     (apply calc (op a b) remaining)))\n  ([a]\n   a))","user":"5866b999e4b0f14aab7c886b"},{"code":"(fn [& l]                                                     \n  (let [ops #{+ - * /}                                                          \n        evaluate (fn [current input]                                            \n                   (cond (ops input) (assoc current :op input)                  \n                         (:op current) (assoc current :cur                      \n                                              ((:op current)                    \n                                               (:cur current) input))           \n                         :else (assoc current :cur input)))]                    \n    (:cur (reduce evaluate {:cur 0 :op nil} l))))","problem":135,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":135,"code":"#(reduce\n   (fn [a [op b]] (op a b))\n   %1\n   (partition 2 %&))","user":"583e27e2e4b089d5ab817daa"},{"problem":135,"code":"(fn [x & xs]\n   (->> xs\n        (partition 2)\n        (reduce (fn [a [func b]] (func a b)) x)))","user":"588906a9e4b0f1effa3b772a"},{"code":"(fn [x & xs]\n  (reduce (fn [x [f y]] (f x y)) x\n    (partition 2 xs)))","problem":135,"user":"4e8f1ac6535d65386fec2146"},{"problem":135,"code":"(fn [& args]\n  (reduce #(apply (first %2) [% (last %2)]) (first args) (partition 2 (rest args))))","user":"53d5a63be4b0e771c3025449"},{"problem":135,"code":"(fn foo [& s]\n  (if (= 1 (count s)) \n    (first s)\n    (apply foo (cons ((second s) (first s) (nth s 2)) (drop 3 s)))))","user":"554edb85e4b00713264bd99a"},{"problem":135,"code":"(fn calc [x op1 y & [op2 z & expr]]\n  (if-not op1\n    x\n    (apply calc (op1 x y) op2 z expr)))","user":"55f2e47de4b06e875b46ce4d"},{"problem":135,"code":"(fn  [& args] (let [init (first args), ops (rest args)] (reduce #((first %2) %1 (nth %2 1 )  ) init (partition 2 ops)     ) ))","user":"56a6051fe4b0542e1f8d14e5"},{"code":"(fn [x & y] (loop [[b c & d] y a x] (if (nil? b) a (recur d (b a c)))))","problem":135,"user":"4f045946535dcb61093f6bba"},{"problem":135,"code":"(fn bar [& y] ((fn foo [x]\n(if (> (count x) 1)\n((second x)  (foo (subvec x 2)) (first x))\n(first x)\n)\n) (vec (reverse y))))","user":"5f1aade6e4b091ba50b4dbe4"},{"code":"(fn [& args]\n  (loop [res (first args) c (rest args)]\n    (if (empty? c)\n      res\n      (recur ((first c) res (second c)) (drop 2 c)))))","problem":135,"user":"51e595a6e4b0efabf93c02d8"},{"problem":135,"code":"(fn [& args]\n  (loop [value (first args)\n         remaining (rest args)]  \n    (if (empty? remaining)\n      value\n      (recur ((first remaining) value (second remaining))\n             (rest (rest remaining))))))","user":"587f8393e4b0f1effa3b75f2"},{"code":"(fn do-infix [& desc]\n    (let [\n          m (group-by number? desc)\n          vs (m true)\n          ops (m false)]\n      (loop [val (first vs) vs (rest vs) ops ops]\n        (if (empty? ops)\n          val\n          (recur ((first ops) val (first vs)) (rest vs) (rest ops))\n          )\n        )\n))","problem":135,"user":"5094057fe4b097f48cc38593"},{"code":"(fn f [& p]\n  (if (nil? (second p ))\n    (first p)\n    (apply f (cons (\n                    (nth p 1) (nth p 0 ) (nth p 2)\n                    )\n                   (rest (rest ( rest p)))\n                   )\n           )\n    )\n  )","problem":135,"user":"518c5236e4b087e178201de0"},{"problem":135,"code":"(fn\n  [a1 & args]\n  (if (empty? args)\n    a1\n  (recur ((first args) a1 (second args)) (drop 2 args))))","user":"56ab7578e4b03c432f18733d"},{"code":"(fn [& expr] (letfn ([infix [exp]\n    (cond\n        (empty? exp)            0\n        (= (count exp) 1)       (first exp)\n        true                    (let [\n                                        res     (apply (second exp) (list (first exp) (nth exp 2)))\n                                        part    (drop 3 exp)\n                                     ]\n                                        (cond (empty? part) res true (infix (cons res part)))\n                                )\n    )\n]) (infix expr)))","problem":135,"user":"52cc85abe4b07d0d72b27367"},{"problem":135,"code":"(fn [& args] (loop [val (first args) remaining (rest args)] (if (seq remaining) (recur ((first remaining) val (second remaining)) (drop 2 remaining)) val)))","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn infix [val & terms]\n  (reduce (fn [acc val] \n          (let [[func arg] val]\n            (func acc arg))) val (partition 2 terms)))","problem":135,"user":"522d0360e4b0806774ddfef7"},{"problem":135,"code":"(fn [x & args]\n   (reduce #((first %2) % (last %2)) x (partition 2 args)))","user":"52cee992e4b07d0d72b27395"},{"problem":135,"code":"(fn [x & s]\n    (reduce (fn [a [t b]] (t a b))\n            x (partition 2 s)))","user":"52b2f9cae4b0c58976d9acfb"},{"problem":135,"code":"(fn [a & r] (if (empty? r) a (recur ((first r) a (first (rest r))) (rest (rest r)))))","user":"5abe2fc2e4b073f17744271e"},{"code":"(fn [arg1 op arg2 & more]\n  (let [v (op arg1 arg2)]\n    (if (nil? (seq more))\n      v\n      (let [[op2 arg4 & other] more]\n        (recur v op2 arg4 other)))))","problem":135,"user":"529b5301e4b02ebb4ef7509f"},{"code":"(fn [a & z]\n           (reduce #((first %2) %1 (second %2)) a (partition 2 z)))","problem":135,"user":"4f34eb87e4b0e243712b1eba"},{"problem":135,"code":"(fn [& args]\n  (loop [args args\n         acc  0]\n    (if-not args\n      acc \n      (cond (fn? (first args))\n            (let [[operator operand & xs] args]\n              (recur xs (operator acc operand)))\n\n            (number? (first args))\n            (recur (rest args) (first args))))))","user":"51b8d3d5e4b050a1176cd69d"},{"problem":135,"code":"(fn [start & args] \n  (loop [result start, [oper var :as acc] args] \n      (if (empty? acc) \n        result \n        (recur (oper result var) (drop 2 acc)))))","user":"5c13da47e4b01240ff5671a6"},{"code":"(fn infix-calc [& args]\n  (let [first-value (first args)\n        operations (partition 2 (rest args))]\n    (reduce #((first %2) %1 (second %2)) \n            first-value operations)))","problem":135,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":135,"code":"(fn [& inputs]\n  (loop [ins inputs]\n    (if (= 1 (count ins)) (first ins)\n      (let [[a op b] (take 3 ins)]\n        (recur (concat [(op a b)] (drop 3 ins)))))))","user":"5c1edf23e4b0efcb0b05b25d"},{"code":"(fn infix [a op b & more]\n  (if (empty? more) (op a b)\n      (apply infix (cons (op a b) more))))","problem":135,"user":"500cb910e4b05f7c30cfa698"},{"problem":135,"code":"(fn f' [x f y & z]\n   (if z\n     (apply f' (f x y) z)\n     (f x y)))","user":"51febd40e4b0f1313d468a76"},{"code":"(fn a [x y z & args]\n  (if (nil? args) (y x z)\n      (apply a (cons (y x z) args))))","problem":135,"user":"4ff6aea8e4b0678c553fc381"},{"problem":135,"code":"(fn [op1 & others] (reduce (fn [acc [op op2]] (op acc op2)) op1 (partition 2 others)))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"problem":135,"code":"(fn i [a f b & r]\n   (if r (apply i (f a b) r) (f a b)))","user":"588fbb39e4b00487982d51bd"},{"code":"(fn [& expression-list]\n  (loop [current-list expression-list]\n    (let [[left op right & rest-of-list] current-list]\n      (if (= 1 (count current-list))\n        (first current-list)\n        (recur (cons (op left right) rest-of-list))))))","problem":135,"user":"50270618e4b01614d1633feb"},{"code":"(fn [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [[val1 op val2] args]\n      (recur (cons (op val1 val2) (nthrest args 3))))))","problem":135,"user":"4e09392a535d04ed9115e7ae"},{"problem":135,"code":"(fn f [op1 opc op2 & rest]\n  (if (empty? rest)\n    (opc op1 op2) \n    (apply f (opc op1 op2) rest)))","user":"5e2549c8e4b05b4b0151615f"},{"code":"(fn [& args]\n  (let [partitioned-args (partition 2 (rest args))\n        final-args (conj partitioned-args (list + (first args)))]\n    (reduce #((first %2) %1 (second %2)) 0 final-args)\n  ))","problem":135,"user":"52af7a5ce4b0c58976d9acbd"},{"code":"(fn [& ls]\n  (reduce (fn [v p]\n    (apply (first p) (seq [v (last p)]))) (first ls) (partition 2 (rest ls))))","problem":135,"user":"4f017593535dcb61093f6a36"},{"problem":135,"code":"(fn [a & e] (reduce (fn [a [op b]] (op a b)) a (partition 2 e)))","user":"56347285e4b0bfe05bf117bc"},{"code":"(fn [& xs]\n\t  (loop [r [(first xs) (second xs)] xs (drop 2 xs)]\n\t    (if (seq xs)\n\t      (let [c (first xs)]\n\t        \n\t\t(recur (if (not (ifn? c))\n\t\t\t [((second r) (first r) c)]\n\t\t\t (conj r c)) (next xs))\n\t\t)\n\t      (first r))))","problem":135,"user":"4ef9c8f9535dced4c769f26b"},{"code":"(fn [& more] \n  (if (= (count more) 1)\n    (first more)\n    (let [[a func b & args] more]\n    (recur (cons (func a b) args )))))","problem":135,"user":"4e836a16535db62dc21a62d6"},{"problem":135,"code":"(fn [& args]( reduce (fn[a [op b]](op a b)) (first args) (partition 2 (rest args))))","user":"6001460ce4b074f607df6611"},{"problem":135,"code":"(fn\n  [& nums]\n  (loop [res (first nums)\n         lst (rest nums)]\n      (if (empty? lst)\n        res\n        (recur ((first lst) res (second lst)) (rest (rest lst))))))","user":"56df6498e4b0ca2494a095f8"},{"code":"(fn i [a b c & d] (if (empty? d) (b a c) (apply i (b a c) d)))","problem":135,"user":"4dae916eedd6309eace4d155"},{"problem":135,"code":"(fn [& xs]\n  (loop [[x y z & ys] xs]\n    (if (nil? y)\n      x\n      (recur (cons (y x z) ys)))))","user":"51823a97e4b0f2adb733651e"},{"problem":135,"code":"(fn sk-infix [begin & rest]\n  (reduce\n    (fn [a [op b]]\n      (op a b))\n    begin\n    (partition 2 rest)))","user":"5884f377e4b0f1effa3b76a8"},{"code":"(fn [f & m]\n  (reduce #((first %2) %1 (second %2)) \n    f\n    (partition 2 m)\n  ))","problem":135,"user":"4de18de7535d08e6dec9fde8"},{"code":"(fn [& args]\n  (reduce\n    (fn [acc [op value]]\n      (op acc value))\n    (first args)\n    (partition 2 (rest args))))","problem":135,"user":"4dbad895535d1e037afb21ae"},{"code":"(fn ff\n  ([x f y] (f x y))\n  ([x f y & args] (apply ff (concat (list (ff x f y)) args)) \n     ))","problem":135,"user":"5259a16ee4b0cb4875a45ce1"},{"code":"(fn [& eq]\n    (loop [s (filter (complement number?) eq)\n           n (filter number? eq)]\n      (if (empty? s)\n        (first n)\n        (recur (rest s) (cons (apply (first s) (take 2 n)) (drop 2 n)))\n      )\n    )\n  )","problem":135,"user":"4e8b73e4535d65386fec2120"},{"problem":135,"code":"(fn calculator\n  [& args]\n  (let [l args\n        c (count l)\n        i (range 0 c)\n        ipar (filter even? i)\n        inon (filter odd? i)\n        val (map #(nth l %) ipar)\n        sym (map #(nth l %) inon)]\n    (loop [res (first val)\n           val (rest val)\n           sym sym]\n      (if (empty? val)\n        res\n        (recur ((first sym) res (first val))\n               (rest val)\n               (rest sym))))))","user":"5c7dad57e4b0d597f478caba"},{"code":"(fn [x & [op y & remaining]]\n\t(if (nil? op) x\n\t  (recur (op x y) remaining)))","problem":135,"user":"5166e80de4b060c690c1f4c5"},{"code":"(fn [x & ops] \n  (reduce (fn [acc [f y]] (f acc y)) x (partition 2 ops)))","problem":135,"user":"4ecf42b4535d1f5ad70dba3c"},{"code":"(fn [& args]\n  (when (seq args))\n    (let [val (first args)]\n       (reduce #((first %2) %1 (second %2)) val (partition 2 (rest args)))))","problem":135,"user":"4fd7962ee4b0dab7d829f385"},{"code":"(fn calcu [& sequ] (loop [operand (second sequ)\n   val1 (first (rest (rest sequ))) \n  acc (first sequ)\n  restseq (rest (rest (rest sequ)))] \n\n(if\n  (= 0 (count restseq))\n  (operand acc val1)\t\n  (recur (first restseq) \n\t(second restseq)\n\t(operand acc val1)\n\t(rest (rest restseq)))\n  ) \n))","problem":135,"user":"4e9de526535dbda64a6f6b8e"},{"code":"(fn [& s]\n  (loop [[x o y & more] s]\n    (let [res (o x y)]\n      (if more\n        (recur (cons res more))\n        res))))","problem":135,"user":"4e47f4f3535dc968683fc4bb"},{"code":"(fn prefix [x op y & opts]\r\n    (let [acc (op x y)]\r\n      (if (nil? opts)\r\n        acc\r\n        (apply prefix acc (first opts) (second opts) (drop 2 opts)))))","problem":135,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":135,"code":"(fn infix [& args]\n  (loop [[v1 op v2 & more] args]\n    (if (seq more)\n      (recur (into [(op v1 v2)] more))\n      (op v1 v2))))","user":"4f04664a535dcb61093f6bc1"},{"code":"(fn [& params]\n  (let [[op1 f op2 & rem] params]\n    (if f (recur (cons (f op1 op2) rem))\n          op1)))","problem":135,"user":"500900dee4b0144d4f561e42"},{"code":"(fn f\n  ([x op y & xs]\n    (apply f (op x y) xs))\n  ([x]\n   x))","problem":135,"user":"52487654e4b05ef8e38e63dc"},{"code":"(fn f \n  ([x y z] (y x z))\n  ([x y z & args] (apply f (f x y z) args)))","problem":135,"user":"4dda44f2535d02782fcbe9f1"},{"code":"(fn calc\n  ([a op b] (op a b))\n  ([a op b & args]\n    (apply calc (op a b) args)))","problem":135,"user":"4fe84c74e4b07c9f6fd12c3c"},{"code":"(fn [& l]\n  (letfn [(r [iv op l]\n            (if (empty? l) iv\n                (r (op iv (first l))  (second l) (rest (rest l)))))]\n    (r (first l) (second l) (rest (rest l)))))","problem":135,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":135,"code":"(fn [start & rest]\n  (let [pairs (partition 2 rest)]\n    (reduce\n     (fn [result [operator operand]] (operator result operand)) \n     start pairs))\t\n  )","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":135,"code":"(fn [& args]\n   (loop [items args]\n     (let [result ((nth items 1) (nth items 0) (nth items 2))]\n      (if (= 3 (count items))\n        result\n        (recur (concat [result] (drop 3 items)))))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":135,"code":"(fn calc [a op b & args]\n  (if (empty? args)\n    (op a b)\n    (apply calc (cons (op a b) args))))","user":"596a66cde4b069c0a1a19803"},{"code":"(fn debugcool [& args] \n  (reduce \n   (fn debugcool2 [a [op b]] (op a b))\n   (first args)\n   (partition 2 (rest args))\n   )\n  )","problem":135,"user":"4f2b728ce4b0d6649770a04a"},{"problem":135,"code":"(fn infix ([x op y] (op x y))\n   ([x op y & xs] (apply infix (cons (op x y) xs))))","user":"57123c96e4b09c608db70454"},{"problem":135,"code":"; NOT the best answer, but hey, i was learning\n(fn my-reduce-infix-calc [& args]\n  (reduce #((first %2) %1 (second %2))\n          (first args)\n          (partition 2 (rest args))))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn [& args]\n    (loop [coll (rest args) acc (first args)]\n      (if (empty? coll)\n        acc\n        (recur (rest (rest coll)) ((first coll) acc (second coll))))))","problem":135,"user":"50588ff1e4b06522596eba7e"},{"problem":135,"code":"(fn wtf [& args]\n  (reduce \n   (fn [result pair]\n     (apply (first pair) [result (last pair)]))\n   (first args)\n   (partition 2 (rest args))))","user":"5fed2610e4b05ac5b16ea1c7"},{"code":"(fn calc\n  [& args]\n  (loop [[l op r & extra] args]\n    (if (< (count extra) 2)\n      (op l r)\n      (recur (cons (op l r) extra)))))","problem":135,"user":"4f8bbb27e4b02e764a0a5182"},{"problem":135,"code":"(fn [a & args]\n  (if (empty? args)\n    a\n    (recur ((first args) a (second args)) (drop 2 args))))","user":"5bf0aefde4b0a6d31fed215a"},{"problem":135,"code":"(fn [initial & args]\n  (reduce (fn [lhs [op rhs]]\n            (op lhs rhs))\n          initial \n          (partition 2 args)))","user":"4f29d9abe4b0d6649770a034"},{"problem":135,"code":"(fn c [x y z & s] (if (empty? s) (y x z) (apply c (cons (y x z) s))))","user":"53f035c2e4b0742d9025b0d2"},{"problem":135,"code":"(fn\n  [x f y & xs]\n  (if (empty? xs)\n    (f x y)\n    (recur (f x y)\n           (first xs)\n           (second xs)\n           (drop 2 xs))))","user":"56a44067e4b0542e1f8d14da"},{"problem":135,"code":"(fn [& args]\n    (loop [col (rest args) result (first args)]\n      (if (seq col)\n        (recur (rest (rest col)) ((first col) result (first (rest col))))\n        result)\n      )\n    )","user":"515ebde3e4b01e5d11ccd0a8"},{"problem":135,"code":"(fn [s & r]\n  (reduce (fn [a [f v]] (f a v)) s (partition 2 r)))","user":"4db599e6535d87e67b28fe11"},{"code":"(fn f ([a] a) ([a op b & ws] (apply f (cons (op a b) ws))))","problem":135,"user":"53244c9de4b09d4e7a9b54db"},{"problem":135,"code":"(fn [val & others]\n  (if (empty? others)\n    val\n    (let [op (first others)\n          b (second others)\n          rem (rest (rest others))]\n      (recur (op val b) rem))))","user":"50b63c5ee4b0a86f8358ca69"},{"problem":135,"code":"(fn [a b c & x]\n  (let [y (partition 2 x)\n        init-val (b a c)]\n    (reduce (fn [a1 a2] \n              ((first a2) a1 (last a2))) \n            init-val y)\n    )\n  )","user":"5cfee28de4b0cc9c91588185"},{"problem":135,"code":"(fn [x op y & xs]\n     (let [m (op x y)]\n       (if (nil? (first xs))\n         m\n         (recur m (first xs) (second xs) (nnext xs)))))","user":"52c58561e4b0c2d177d620f8"},{"problem":135,"code":"#(reduce \n  (fn [a [b c]]  \n    (b a c)\n   ) \n  0 \n  (partition 2 (cons + %&))\n  )","user":"5007c7c7e4b0b17c647f5226"},{"problem":135,"code":"(fn g\n  ([x op y] (op x y))\n  ([x op y & rst]\n   (let [v (op x y)\n         nxt (cons v rst)]\n     (apply g nxt))))","user":"5766bab8e4b0a07e8fc180b1"},{"problem":135,"code":"(fn infix [& args]\n  (if (< (count args) 3) (first args)\n      (let [[arg1 op arg2 & rest] args]\n          (apply infix (op arg1 arg2) rest))))","user":"55f6f1d3e4b06e875b46cea0"},{"problem":135,"code":"(fn infix [a op c & t]\n   (loop [acc (op a c)\n          coll t]\n     (if (seq coll)\n       (recur ((first coll) acc (second coll)) (nthrest coll 2))\n       acc)))","user":"535eaa73e4b04ce2eb3ed2d4"},{"problem":135,"code":"#(loop [v1 (first %&)\n       args (rest %&)]\n  (let [[op v2 & r] args]\n    (if op\n      (recur (op v1 v2) r)\n      v1)))","user":"57609d91e4b08062f99a4e9b"},{"code":"(fn [& e]\n  (cond (= (count e) 3) ((nth e 1) (nth e 0) (nth e 2))\n        (= (count e) 5) ((nth e 3) ((nth e 1) (nth e 0) (nth e 2)) (nth e 4))\n        (= (count e) 7) ((nth e 5) ((nth e 3) ((nth e 1) (nth e 0) (nth e 2)) (nth e 4)) (nth e 6))\n        (= (count e) 9) ((nth e 7) ((nth e 5) ((nth e 3) ((nth e 1) (nth e 0) (nth e 2)) (nth e 4)) (nth e 6)) (nth e 8))\n        (= (count e) 11) ((nth e 9) ((nth e 7) ((nth e 5) ((nth e 3) ((nth e 1) (nth e 0) (nth e 2)) (nth e 4)) (nth e 6)) (nth e 8)) (nth e 10))\n        (= (count e) 13) ((nth e 11) ((nth e 9) ((nth e 7) ((nth e 5) ((nth e 3) ((nth e 1) (nth e 0) (nth e 2)) (nth e 4)) (nth e 6)) (nth e 8)) (nth e 10)) (nth e 12))\n        (= (count e) 15) ((nth e 13) ((nth e 11) ((nth e 9) ((nth e 7) ((nth e 5) ((nth e 3) ((nth e 1) (nth e 0) (nth e 2)) (nth e 4)) (nth e 6)) (nth e 8)) (nth e 10)) (nth e 12)) (nth e 14))))","problem":135,"user":"4f038567535dcb61093f6b0c"},{"code":"(fn [& args]\n  (loop [[a op b & rest] args]\n    (if (nil? op)\n      a\n      (recur (into [(op a b)] rest)))))","problem":135,"user":"4fccb31be4b0ee37620e1868"},{"code":"(fn [n1 o n2 & more]\n  (cond\n   (empty? more) (o n1 n2)\n   :else (recur (o n1 n2) (first more) (second more) (drop 2 more))))","problem":135,"user":"4daf8f84edd6309eace4d17a"},{"problem":135,"code":"(fn shit \n       ([l op r] (op l r))\n       ([l op r & rest]\n         (apply shit (cons (op l r) rest))))","user":"54d05a9de4b0e8a36923e5c7"},{"code":"(fn calculator\n  [a op b & args]\n  (if (empty? args)\n    (op a b)\n    (apply (partial calculator (op a b)) args)))","problem":135,"user":"525d490ae4b0cb4875a45d70"},{"problem":135,"code":"(fn [& args]\n  (let [paired-args (cons + args)]\n       (reduce\n         (fn [acum elem]\n             (if (number? elem)\n                 (acum elem)\n                 (partial elem acum)))\n         0\n         paired-args)))","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":135,"code":"(fn [& infix-expr]\n                     (if (= 1 (count infix-expr))\n                       (first infix-expr)\n                       (let [[operand-1 operator operand-2 & rest-expr] infix-expr]\n                         (recur (cons (operator operand-1 operand-2) rest-expr)))\n                       ))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":135,"code":"(fn calc[l op r & rest] (if rest (apply calc (op l r ) rest) (op l r)))","user":"561d7246e4b064ca9f4b16b1"},{"problem":135,"code":"(fn i [o f t & r]\n  (if (= 0 (count r))\n    (f o t)\n    (apply i (into [(f o t)] r))))","user":"5540fe42e4b0a04f7929950a"},{"code":"(fn [& args]\n  (loop [rt (first args)\n         op (second args)\n         args (nnext args)]\n   (if args\n      (recur (op rt (first args)) (second args) (nnext args))\n      rt)))","problem":135,"user":"4ef992c8535dced4c769f268"},{"code":"(fn f [x & r] (if (seq r)\n                (apply f ((first r) x (second r))\n                   (nnext r))\n                x))","problem":135,"user":"535d2533e4b04ce2eb3ed2bc"},{"problem":135,"code":"(fn infix-calc [x op y & more] \n                (loop [subtotal (op x y)\n                       more more]\n                  (let [op (first more)\n                        y (second more)\n                        next-more (drop 2 more)]\n                    (if (empty? more)\n                      subtotal\n                      (recur (op subtotal y) next-more)))))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn f\n  ([n] n)\n  ([n1 op n2 & more]\n    (apply f (op n1 n2) more)))","problem":135,"user":"4ed0e139535d44c135fd68c7"},{"problem":135,"code":"(fn [x y z & more]\n  (if (empty? more)\n  \t(y x z)\n    (recur (y x z) (first more) (second more) (drop 2 more))))","user":"53dfbc75e4b0d874e779ae44"},{"problem":135,"code":"(fn f [& args] (if (< 2 (count args)) (let [[a o b & rest] args] (apply f (cons (o a b) rest))) (first args)))","user":"59adec09e4b0e1f4e384c897"},{"code":"(fn rearrange [& ls] \r\n  \r\n    (let [[x & xs] ls\r\n        pairs (partition 2 xs)]\r\n    (reduce (fn [res [op v]] (do (println op) (cond\r\n                               (= op +) (+ res v)\r\n                               (= op *) (* res v)\r\n                               (= op -) (- res v)\r\n                               (= op /) (/ res v)\r\n                               :else (do(println \"!\"))\r\n                               ))) x pairs)))","problem":135,"user":"502a9fdee4b095a7adb898b4"},{"code":"(fn [f & m]\n  (reduce #((first %2) % (second %2))\n          f (partition 2 m)))","problem":135,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":135,"code":"(fn [& args]\n  (loop [t (first args) lst (rest args)]\n    (if (empty? lst)\n      t\n      (recur ((first lst) t (second lst)) (drop 2 lst)))))","user":"59368ccae4b02506e01a2979"},{"problem":135,"code":"(fn infix [& symbols]\n    (let\n        [\n            infix_helper\n                (fn f [ops symbols]\n                    (loop [head (first symbols) tail (rest symbols)]\n                        (let\n                            [\n                                [op next_operand] (take 2 tail)\n                            ]\n                            (cond\n                                (empty? tail) head\n                                (or (nil? (ops op)) (nil? next_operand) (not (number? next_operand)))\n                                    (throw (Exception. \"Badly formed symbols. Please check your inputs.\"))\n                                :otherwise (recur (op head next_operand) (drop 2 tail))\n                            )\n                        )\n                    )\n                )\n        ]\n        (infix_helper #{+ / - *} symbols)\n    )\n)","user":"5db7376fe4b010eb3c36cd43"},{"code":"(fn [& coll]\n  (reduce #(if (fn? %1)\n             (%1 %2)\n             (partial %2 %1))\n          (first coll) (rest coll)))","problem":135,"user":"4fad33e8e4b081705acca236"},{"code":"(fn e [x & r]\n  (let [op (first r)\n        s (rest r)\n        y (first s)\n        v (op x y)\n        ss (rest s)]\n  (if (seq ss) \n    (apply e (cons v ss))\n    v)))","problem":135,"user":"4edd038c535d10e5ff6f5327"},{"problem":135,"code":"(fn [& args]\n  (reduce #((first %2) % (second %2))\n          (first args)\n          (partition 2 (next args))))","user":"5eb741e4e4b00a66d4a9523b"},{"problem":135,"code":"(fn p [& params]\n  (loop [a (first params) lst (rest params)]\n    (if (empty? lst) a\n      (recur ((first lst) a (second lst)) (rest (rest lst))))))","user":"56fc1bc7e4b07572ad1a88dd"},{"code":"(fn f ([a] a) ([a o b & m] (apply f (cons (o a b) m))))","problem":135,"user":"50ed4626e4b01236b1d4983c"},{"code":"(fn infix [acc & more]\n  (if (empty? more)\n    acc\n    (recur ((first more) acc (second more)) (rest (rest more)))))","problem":135,"user":"528b08efe4b0239c8a67ae8a"},{"problem":135,"code":"(fn infix ([x op y] (op x y))\n   ([x op y & xs]\n    (apply infix (cons (infix x op y) xs))))","user":"59385840e4b02506e01a29c9"},{"problem":135,"code":"(fn l->r [& sq] \n  (reduce #(if (not (fn? %)) (partial %2 %) (% %2)) sq))","user":"54ae541ae4b09f271ff37cef"},{"code":"(fn [x & xs] (reduce (fn [acc [op n]] (op acc n))\n                     x\n                     (partition 2 xs)))","problem":135,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"(fn [a & args]\n  (reduce #((first %2) %1 (last %2)) a (partition 2 args)))","problem":135,"user":"51195e77e4b055cfb310d499"},{"code":"(fn infix \n  ([v] v)\n  ([v1 o v2 & r] (apply infix\n      (cond\n         (= o +) (+ v1 v2)\n         (= o -) (- v1 v2)\n         (= o /) (/ v1 v2)\n         (= o *) (* v1 v2)) r)))","problem":135,"user":"4f9120d8e4b0dcca54ed6c96"},{"code":"(fn [x op y & rest] (let [calc (fn calc [x op y] (op x y ))]\n   (reduce (fn [acc in] (calc acc (first in) (second in)) )\n          (calc x op y) (partition 2 rest))))","problem":135,"user":"50783762e4b0fc74642bff67"},{"problem":135,"code":"(fn [& args]\n  (if (next args)\n  \t(let [[v1 op v2 & remaining] args]\n      (recur (cons (op v1 v2) remaining)))\n    (first args)))","user":"529f9bf2e4b04e0c58e87bb4"},{"problem":135,"code":"(fn [& el]\n  (let [x (filter number? el) y (filter fn? el)]\n    (loop [nums x ops y]\n      (if (empty? ops)\n        (first nums)\n        (recur (cons ((first ops) (first nums) (second nums)) (drop 2 nums)) (next ops))))))","user":"5df08767e4b093ff717275bf"},{"problem":135,"code":"(fn\n  [& args]\n  (loop [r    (first args)\n         f    (-> args rest first)\n         args (rest (rest args))]\n    (if-not (empty? args)\n      (let [current-arg (first args)]\n        (if (number? current-arg)\n          (recur (f r current-arg) nil (rest args) )\n          (recur r  current-arg  (rest args))))\n      r)))","user":"58de563fe4b0a4d5acaab6e3"},{"code":"(fn [& coll]\n  (if (= (count coll) 1)\n    (first coll)\n    (recur (cons ((second coll) (first coll) (second (rest coll))) (drop 3 coll)))))","problem":135,"user":"4ef4c1ff535dced4c769f23e"},{"code":"(fn infix [& args]\n    (reduce (fn [a [op b]] (op a b))\n    (first args)\n    (partition 2 (rest args))))","problem":135,"user":"52cdec6ce4b07d0d72b27383"},{"code":"(fn [& args]\n  (loop [op (second args) a (first args) b (nth args 2) m (nthnext args 3)]\n    (if (empty? m)\n      (op a b)\n      (recur (first m) (op a b) (second m) (nthnext m 2)))))","problem":135,"user":"4eddcbbf535d10e5ff6f532d"},{"problem":135,"code":"(fn __\n    [ x & args ]\n    (if (empty? args)\n        x          \n        (let [ r ((first args) x (second args)) ]\n            (apply __ (cons r (rest (rest args))))\n        )\n    )\n)","user":"55c9ff22e4b0e31453f649f3"},{"code":"(fn this [& s]\n  (let [[arg1 fu arg2 & others] s res (fu arg1 arg2)]\n    (if (empty? others) res\n      (apply this res others))))","problem":135,"user":"4f418eaee4b0d7d3c9f3fce9"},{"problem":135,"code":"(fn [& args] (reduce #((first %2) %1 (last %2))\n                      (first args)\n                      (partition 2 (rest args))))","user":"542c44f8e4b0dad94371f2a1"},{"problem":135,"code":"(fn infix-calc [& es]\n    (let [[a op b & r] es]\n      (if (nil? op)\n        a \n        (apply infix-calc (cons (apply op [a b]) r)))))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"(fn hof [a & sq]\n  (do \n    (if (empty? sq)\n      a\n      (apply hof (( nth sq 0) a (nth sq 1))  (drop 2 sq)))))","problem":135,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"#(let [a (partition 2 2%&)]\n   (reduce (fn [x [f y]] (f x y)) % a))","problem":135,"user":"4f048f67535dcb61093f6bd3"},{"code":"(fn [& vs]\n  (reduce (fn [a [op n]] (op a n))\n          (first vs)\n          (partition 2 (rest vs))))","problem":135,"user":"5175533fe4b0dea9bbfba575"},{"problem":135,"code":"(fn [n1 opr n2 & args] (reduce (fn [res [opr num]] (opr res num)) (opr n1 n2) (partition 2 args)))","user":"5c6d0e51e4b0fca0c1622735"},{"code":"#(letfn [(f [x] \n     (if (= 1 (count x)) \n       (first x) \n       (f (cons ((second x) (first x) (nth x 2)) (nthrest x 3)))))]\n     (f %&))","problem":135,"user":"5224cf82e4b01819a2de42ef"},{"code":"(fn f [& r]\n  (let [[a op b & s] r]\n  (if (nil? b)\n    a\n    (apply f (cons (op a b) s))\n    )\n  )\n )","problem":135,"user":"52593207e4b0cb4875a45cd3"},{"problem":135,"code":"(fn infix\n  ([a op b] (op a b))\n  ([a op b & more] (apply infix (op a b) more)))","user":"54a6399ee4b09f271ff37c85"},{"code":"(fn infix-calc [n1 & more]\n  (when\n    (even? (count more))\n    (loop [result n1, coll more]\n      (if\n        (empty? coll)\n        result\n        (let [oper (first coll), n2 (second coll)]\n          (recur (oper result n2) (rest (rest coll))))))))","problem":135,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn [x & z] (reduce (fn [n1 o] ((first o) n1 (second o))) x (partition 2 2 z)))","problem":135,"user":"511b810ce4b07ab9ec456182"},{"problem":135,"code":"(fn [x & xs]\n    (reduce (fn [memo [f y]] (f memo y)) x (partition 2 xs))\n    )","user":"53c3397be4b00fb29b221279"},{"problem":135,"code":"(fn [acc & args]\n  (loop [args args acc acc]\n    (if (empty? args) acc\n      (let [[op n & more] args]\n        (recur more (op acc n))))))","user":"53ea3a63e4b036ad0777e4dc"},{"code":"(fn c [x o y & r]\n  (if (seq r)\n    (apply c (o x y) r)\n    (o x y)))","problem":135,"user":"52b453b0e4b0c58976d9ad21"},{"code":"(fn [& sq] (reduce #((first %2) %1 (second %2)) (first sq) (partition 2 (rest sq))))","problem":135,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":135,"code":"(fn [& a]\n  (let [start ((second a) (first a) (nth a 2))\n        ops (partition 2 (drop 3 a))]\n       (reduce (fn [v [o n]] (o v n)) start ops)))","user":"5958cef6e4b066ee0a44af94"},{"code":"(fn [& args]\n  (let [iter (fn [args]\n               (if (= 1 (count args))\n                 (first args)\n                 (let [next-n (apply (nth args 1) (list (nth args 0) (nth args 2)))]\n                   (recur (conj (drop 3 args) next-n)))))]\n    (iter args)))","problem":135,"user":"4e42f930535dc968683fc49f"},{"problem":135,"code":"(fn f [x & xs]\n         (println x xs)\n         (cond\n           (empty? xs) x\n           :else (apply f ((first xs) x (first (rest xs)))\n                    (rest (rest xs)))))","user":"58731176e4b01531a375ea2a"},{"code":";; first version; intentionally blunt\n;(fn infix-math-expr [initial-term & rest-of-expr]\n;  (loop [left-arg initial-term\n;         roe rest-of-expr]\n;    (if (empty? roe)\n;      left-arg\n;      (recur ((first roe) left-arg (second roe))\n;             (nnext roe)))))\n\n;; second solution: more idiomatic?\n;(fn [v & mexp]\n;  (if-let [[op arg & more] (seq mexp)]\n;    (recur (op v arg) more)\n;    v))\n\n \n(fn [init & more]\n  (let [op-arg-pairs (partition 2 more)]\n    (reduce (fn [accum [op right-arg]]\n              (op accum right-arg))\n            init op-arg-pairs)))","problem":135,"user":"4efa3d4b535dced4c769f270"},{"code":"(fn f [x op y & more] (if more (apply f (op x y) more) (op x y)))","problem":135,"user":"500d1db4e4b05f7c30cfa69f"},{"problem":135,"code":"(fn [& tokens]\n  (if (empty? tokens)\n    nil\n    (loop [value-stack [] op-stack [] toks tokens]\n      (if (= (count value-stack) 2)\n        (let [[b value-stack] [(peek value-stack) (pop value-stack)]\n              [a value-stack] [(peek value-stack) (pop value-stack)]\n              [op op-stack] [(peek op-stack) (pop op-stack)]]\n          (recur (conj value-stack (op a b)) op-stack toks))\n        (if (empty? toks)\n          (first value-stack)\n          (let [ctok (first toks)]\n            (if (fn? ctok)\n                 (recur value-stack (conj op-stack ctok) (rest toks))\n                 (recur (conj value-stack ctok) op-stack (rest toks)))))))))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":135,"code":"(fn fun [& args]\n  (reduce\n    (fn [val col]\n      ((first col) val (last col))\n    )\n    0\n    (partition 2 (conj args +))\n  )\n)","user":"5da20e73e4b000c986472be1"},{"problem":135,"code":"(fn apply-parens [& commands] (if \n         (= (count commands) 1) (first commands) \n         (let [new-first ((second commands) (first commands) (first (drop 2 commands))) ]\n         \n          \n          (apply apply-parens (cons new-first (drop 3 commands))) )        \n               \n\t)\n  \n  \n)","user":"5471f090e4b094393f72dd6e"},{"problem":135,"code":"#(first (reduce (fn [[res f] itm]\n           (if (number? itm)\n             [(f res itm) nil]\n             [res itm]))\n   [0 +] %&))","user":"5a1c3c11e4b0ff51aa4b323d"},{"code":"(fn [& s] (reduce #((first %2) % (second %2)) (first s) (partition 2 (rest s))))","problem":135,"user":"5061cc17e4b0a30dc9a35d34"},{"problem":135,"code":"(fn myinf [a b c & d] (if (nil? d) (b a c) (apply myinf (cons (b a c) d))))","user":"5576e78de4b05c286339e075"},{"code":"(fn [& terms]\r\n  (reduce (fn [acc x]\r\n            (if (fn? x)\r\n                (partial x acc)\r\n                (acc x)))\r\n          terms))","problem":135,"user":"4fb37882e4b081705acca2a0"},{"code":"(fn [n op m & others] \n  (let [[op1 m1 & others1] others] \n    (if (empty? others) (op n m) (recur (op n m) op1 m1 others1))))","problem":135,"user":"5246e945e4b0644eb7b0783b"},{"problem":135,"code":"(fn [i & r]\n  (reduce (fn [m [f v]] (f m v))\n          i (partition 2 r)))","user":"54074fc5e4b0addc1aec66b6"},{"problem":135,"code":"(fn infix-calc\n  ([val] val)\n  ([a op b & rest]\n   (apply infix-calc (cons (op a b) rest))))","user":"5cc4b34de4b0ccb061962805"},{"problem":135,"code":"(fn [f & more]\n   (loop [a more\n          r f]\n     (if (empty? a) r\n       (recur (drop 2 a) ((first a) r (second a))))))","user":"57213df6e4b0c5bde472c0ab"},{"problem":135,"code":"(fn infixify [value & others]\n  (if (empty? others)\n    value\n    (recur ((first others) value (second others))\n           (drop 2 others))))","user":"569f99cce4b0542e1f8d1497"},{"code":"(fn [a b c & x]\r\n  (if x\r\n    (recur (b a c) (first x) (fnext x) (nthnext x 2))\r\n    (b a c)))","problem":135,"user":"4e6a97a9535d8ccf87e9fef8"},{"code":"(fn calc [a op b & c]                               \n(let [partialRes (op a b) s (flatten c)]                            \n   (if (> (count s) 1)                                              \n     (let [[op2 b2 & r] s] (calc partialRes op2 b2 r))              \n    partialRes)))","problem":135,"user":"4e8a0d5d535d3e98b802328e"},{"problem":135,"code":"(fn [& exp]\n  (reduce (fn [result instr]\n            (apply (first instr) (list result (second instr))))\n          (first exp)\n          (partition 2 (rest exp))\n          )\n  )","user":"50b25edae4b03ea88043355e"},{"problem":135,"code":"(fn infix-calculator [v & args] (reduce #((first %2) %1 (second %2)) v (partition 2 args)))","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn g \n  ([x] x)\n  ([x f y & z]\n    (apply g (f x y) z)))","problem":135,"user":"4e823ed7535db62dc21a62c7"},{"code":"#(loop [value \t\t(first %&)\n        curr-list\t(rest %&)]\n   (if-not (seq curr-list)\n     value\n     (recur ((first curr-list) value (second curr-list))\n            (drop 2 curr-list))))","problem":135,"user":"531c7f0de4b08068f379eda4"},{"problem":135,"code":"(fn infix [& args]\n  (loop [res (first args)\n         ops (rest args)]\n    (let [op (first ops)\n          l  res\n          r  (second ops)]\n      (if (empty? ops)\n        res\n        (recur (op l r) (drop 2 ops))))))","user":"53710c09e4b0fc7073fd6ea5"},{"code":"#(reduce (fn [sum x] (apply (first x) (list  sum (first (rest x))))) % (partition 2 %&))","problem":135,"user":"5047782ce4b0371827a27bc2"},{"code":"(fn f [x y z & xs]\n     (if (nil? xs)\n       (apply y [x z])\n       (apply f (cons (apply y [x z]) xs))))","problem":135,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn f [a op b & more]\r\n  (if more\r\n    (apply f (op a b) more)\r\n    (op a b)))","problem":135,"user":"4f7d5328e4b06e829148e1bf"},{"problem":135,"code":"(fn math [& args]\n    (cond\n     (> 3 (count args))(first args)\n     :else\n     (let [a (first args)\n           op (second args)\n           b (nth args 2)\n           r (nthrest args 3)\n           new (op a b)\n           newlist (cons new r)]\n       (apply math newlist))))","user":"559f06bae4b0acc240e314e6"},{"code":"(fn [& xs] (reduce #(if (fn? %2) (partial %2 %1) (%1 %2)) xs))","problem":135,"user":"4fb65f2fe4b081705acca2c7"},{"problem":135,"code":"(fn f \n  ([x op y] \n   (op x y))\n  ([x op y & args]\n   (apply f (cons (f x op y) args))))","user":"5fb3a096e4b08cb800c85b35"},{"problem":135,"code":"(fn infix\n  ([x op y] (op x y))\n  ([x op y & xs]\n    (apply infix (cons (infix x op y) xs))))","user":"5717ad6fe4b07c98581c3b14"},{"code":"(fn calc [x y z & more]\n  (if (nil? more) \n      (y x z)\n      (apply calc (y x z) more)))","problem":135,"user":"50588af1e4b06522596eba7d"},{"problem":135,"code":"(fn [& args]\n    (if (= (count args) 1)\n      (first args)\n      (let [[x op y & col] args]\n        (-> (op x y)\n            (cons col)\n            recur))))","user":"53a777f9e4b047364c04441c"},{"problem":135,"code":"(fn infix [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [[a op b] (take 3 args)\n          result (op a b)]\n      (apply infix (cons result (drop 3 args))))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":135,"code":"#(loop [x %&] (if (> (count x) 1) (recur (cons ((fn [[i j k & rest-param]] (j i k)) x) (drop 3 x))) (first x)))","user":"575e71a2e4b0846ea39baf26"},{"code":"(fn [& as]\n   (if (= 1 (count as))\n     (first as)\n     (let [[a op b & cs] as]\n       (recur (cons (op a b) cs)))))","problem":135,"user":"50f48298e4b004d364930527"},{"code":"(fn infix [num1 op num2 & more]\n    (if (empty? more)\n        (op num1 num2)\n        (apply infix (op num1 num2) more)))","problem":135,"user":"4fc50bcbe4b081705acca375"},{"code":"#(loop [n %1 l %&]\n   (if (= (count l) 0) n\n     (recur ((nth l 0) n (nth l 1)) (drop 2 l))))","problem":135,"user":"538d8bb8e4b0b51d73faae71"},{"problem":135,"code":"(fn calc [& exp]\n    (reduce \n      #(if (fn? %1)\n         (%1 %2)\n         (partial %2 %1))\n      identity exp))","user":"58dcb8cde4b0a4d5acaab6a7"},{"code":"(fn [& s] (let [first-num (first s)\n                      ops (partition 2 (rest s))]\n                  (reduce #((first %2) %1 (second %2)) first-num ops)\n                  ))","problem":135,"user":"50956c2be4b087f34d351ab2"},{"code":"(fn [a & r]\n  (reduce\n    (fn [a [op b]] (op a b))\n    a (partition 2 r)))","problem":135,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [& items]\n  ((fn calc [[a op b & others]]\n     (let [r (op a b)]\n       (if (empty? others)\n         r\n         (calc (into [r] others))))) \n   items))","problem":135,"user":"50d86fe2e4b01f0871336e67"},{"code":"(fn\n  [& args]\n  (let [start (first args)\n        ops   (partition 2 (next args))\n        f_red (fn\n                [n op_pair]\n                ((first op_pair) n (second op_pair)))]\n    (reduce f_red start ops)))","problem":135,"user":"511b233ae4b07ab9ec456180"},{"problem":135,"code":"(fn calculator [& restt]\n  (loop [l (rest restt)\n         resp (first restt)]\n    (if (= l [])\n      resp\n      (recur (rest (rest l)) ((first l) resp (second l))))))","user":"574f1c24e4b02ea114799255"},{"code":"(fn [x & ys]\n  (reduce #((first %2) % (last %2)) x (partition 2 ys)))","problem":135,"user":"50772e6ae4b0fc74642bff5d"},{"code":"(fn f[& expr]\n ((fn c [ex]\n    (if (= (count ex) 1) (first ex)\n      (let [v1 (first ex)\n            op (first (rest ex))\n            v2 (first(rest(rest ex)))\n            r (rest(rest(rest ex)))] \n        (c (conj r ( op v1 v2))))) ) expr))","problem":135,"user":"5060c117e4b024449d699b5d"},{"code":"(fn yoba [init & e]\n  (loop [result init e e]\n    (if (empty? e)\n        result\n        (recur ((first e) result (second e))\n               (rest (rest e))))))","problem":135,"user":"50310b8be4b05b7df5a0b84d"},{"code":"(fn infix [a & more]\n  (if (seq more)\n    (let [[o b] more]\n      (apply infix (cons (o a b) (drop 2 more))))\n  a))","problem":135,"user":"4f3e5e87e4b0e243712b1f83"},{"problem":135,"code":"(fn [& args] (first (reduce (fn [s x] (if (fn? x) (cons x s) (if (= 2 (count s)) (list ((first s) (last s) x)) (conj s x)))) () args)))","user":"5a5894d9e4b05d388ecb6c81"},{"code":"(fn infix ([a b c & d] (b a c) (apply infix (b a c) d))\n  ([a] a))","problem":135,"user":"4f748b54e4b044e54cd9a8fa"},{"problem":135,"code":"(fn calc [a op b & r]\n  (if (empty? r)\n    (op a b)\n    (apply (partial calc (op a b)) r)))","user":"5617a540e4b06b1bb2182a12"},{"code":"(fn [& args]\n  (loop [acc (first args) xs (rest args)]\n    (if (not-empty xs)\n      (recur ((first xs) acc (second xs)) (drop 2 xs))\n      acc)))","problem":135,"user":"52015698e4b0d7096e99ddba"},{"problem":135,"code":"(fn calc [a op b & more]\n  (let [x (op a b)]\n    (if (empty? more)\n      x\n      (apply calc (conj more x)))))","user":"5adf5f9be4b0837691e92c33"},{"problem":135,"code":"(fn ff [n1 op n2 & args]\n   (if args\n     (apply ff (op n1 n2) args)\n     (op n1 n2)))","user":"5b34aba7e4b025bcb146f352"},{"problem":135,"code":"(fn cal [x & r]\n    (if (empty? r) x\n        (apply cal (cons ((first r) x (second r)) (drop 2 r)))))","user":"57ee82b1e4b0bfb2137f5bbd"},{"code":"(fn f [x & more]\n  (letfn [(cal [x sum op]\n            (if (empty? x) sum\n                (cond\n                 (number? (first x)) (recur (rest x) (op sum (first x)) nil)\n                 (fn? (first x) ) (recur (rest x) sum (first x))\n                 ))\n            )]\n    (cal more x nil))\n  )","problem":135,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":135,"code":"(fn [x & xs] (reduce (fn [r [f y]] (f r y)) x (partition 2 xs)))","user":"5de12192e4b0948ae9d9aded"},{"problem":135,"code":"(fn f[& b]\n   (let [a (if (seq? (first b)) \n               (first b)\n               (reverse b))]\n     (if (= (count a) 1) \n         (first a)\n         ((second a)(f (drop 2 a))(first a)))))","user":"59e8bb43e4b0249b72820735"},{"code":"(fn infix-math [a op b & args]\n                  (if (empty? args)\n                    (op a b)\n                    (apply infix-math (cons (op a b) args))))","problem":135,"user":"4edb314d535d10e5ff6f5317"},{"code":"(fn c [acc op val & lis]\n  (let [v (op acc val)]\n    (if-not (nil? lis) (apply c v lis) v)))","problem":135,"user":"500e38a5e4b068062f6e8d90"},{"problem":135,"code":"(fn infix [x & xs]\n  (reduce (fn [acc [op v]] (op acc v)) \n          x (partition 2 xs)))","user":"5bea3177e4b0f319e2d7ec81"},{"code":"(fn f [& coll]\n  (if (= (count coll) 1) (first coll)\n  (recur (cons ((nth coll 1) (nth coll 0) (nth coll 2))\n    (rest (rest (rest coll)))))))","problem":135,"user":"4e14108c535d04ed9115e7dd"},{"code":"(fn [& args]\n  (if (= 3 (count args))\n    ((second args) (first args) (nth args 2))\n    (recur (cons ((second args) (first args) (nth args 2)) (drop 3 args)))))","problem":135,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":135,"code":"(fn [& exp] (if (= 1 (count exp)) (first exp) (recur (cons ((nth exp 1) (first exp) (nth exp 2)) (nnext (next exp)) ))))","user":"58ee0bb6e4b056aecfd47d97"},{"problem":135,"code":"(fn [x & r]\n  (loop [res x, tail r]\n    (if (= (count tail) 0)\n      res\n      (recur ((first tail) res (second tail))\n             (rest (rest tail))))))","user":"59225498e4b09b4ee5954c8c"},{"problem":135,"code":"(fn [a op b & rst] (loop [r (op a b) pp rst]\n                                    (if (empty? pp)\n                                      r\n                                      (recur ((first pp) r (second pp)) (drop 2 pp)))))","user":"5f2c94b4e4b033932238a669"},{"code":"(fn [& args]\r\n  (loop [lst (rest args)\r\n         r (first args)]\r\n    (if (empty? lst)\r\n      r\r\n      (recur (nthrest lst 2) ((first lst) r (second lst))))))","problem":135,"user":"4de2f44f535d08e6dec9fdec"},{"problem":135,"code":"(fn infix-calc\n  [& coll]\n  (loop [init (first coll)\n         more (rest coll)]\n    (if (empty? more)\n      init\n      (recur ((first more) init (second more))\n             (nnext more)))))","user":"4e586949535d8a8b8723a292"},{"problem":135,"code":"(fn [& [h & t]] (reduce (fn [a [o v]] (o a v)) h (partition 2 t)))","user":"5960a1a6e4b066ee0a44b08e"},{"code":"(fn infix\n  ([a operator b & rest]\n      (apply infix (conj rest (operator a b))))\n  ([arg] arg))","problem":135,"user":"50cfcad6e4b00b15ecee9752"},{"code":"#(reduce (fn [acc [op b]] (op acc b)) (first %&) (partition 2 (rest %&)))","problem":135,"user":"51cfc616e4b0e42293a22578"},{"code":"(fn infix\n  ([a] a)\n  ([a f b & r] (apply infix (f a b) r)))","problem":135,"user":"4f8345c6e4b033992c121c1b"},{"code":"(fn [x & y] (reduce (fn [a [f c]] (f a c)) x (partition 2 y)))","problem":135,"user":"5125029de4b0ce9225d2ed3e"},{"problem":135,"code":"(fn\n  [start & args]\n  (loop [result start\n         op (first args)\n         operand (second args)\n         remaining (nthnext args 2)]\n    (let [result (op result operand)]\n      (if (nil? remaining)\n        result\n        (recur result (first remaining) (second remaining) (nthnext remaining 2))))))","user":"53ac4719e4b047364c04445c"},{"problem":135,"code":"(fn inf \n  ([a op b]      (op a b))\n  ([a op b & xs] (apply inf (op a b) xs)))","user":"5be9ad9be4b0f319e2d7ec76"},{"problem":135,"code":"(fn [& args]\n  (loop [in (rest args) out (first args)]\n    (if (empty? in)\n      out\n      (recur (rest (rest in))\n             ((first in) out (second in))))))","user":"58b997afe4b0888cdc949cd1"},{"problem":135,"code":"(fn [h & t]\n  (reduce (fn [a [f b]] (f a b)) h (partition 2 t)))","user":"59eb63e3e4b0249b7282077c"},{"problem":135,"code":"(fn infix \n  ([a] a)\n  ([a f b] (f a b))\n  ([a f b & r] \n   (apply infix (flatten [(f a b) r] ))))","user":"54e345a1e4b024c67c0cf7db"},{"problem":135,"code":"(fn [& args] (loop \n  [xs (next args) acc (first args)]\n  (if xs\n    (recur (next (next xs)) ((first xs) acc (second xs)))\n    acc\n  )\n))","user":"543bb568e4b032a45b869334"},{"code":"(fn calc [a op b & r]\n  (if (= r nil)\n    (op a b)\n    (apply calc (conj r (op a b)))))","problem":135,"user":"50e8ff6be4b0ebbe794eb7f3"},{"code":"(fn  [a & r]\r\n  (loop [out nil\r\n         rst r]\r\n    (if (nil? (first rst))\r\n      (reduce #((first %2) %1 (second %2))\r\n              a\r\n              (reverse out))\r\n      (recur (cons (list (first rst)\r\n                         (second rst))\r\n                   out)\r\n             (nthrest rst 2)))))","problem":135,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn infix [operand & others]\n  (reduce #((first %2) %1 (second %2)) operand (partition 2 others)))","problem":135,"user":"4ff01fa9e4b0678c553fc321"},{"code":"(fn foo                                                                          \n  ([ans] ans)                                                                      \n  ([a op b & exprs] (apply foo (op a b) exprs)))","problem":135,"user":"530e9729e4b08068f379ecbc"},{"problem":135,"code":"(fn f\n    ([a] a)\n    ([a op b & others] (apply f (op a b) others)))","user":"55568a7de4b0deb715856e1c"},{"code":"(fn [& args]\n   (reduce (fn [a [op b]] (op a b))\n           (conj (partition 2 (rest args)) (first args))))","problem":135,"user":"53224d45e4b09d4e7a9b54c0"},{"code":"(fn [& args] \n   (if (< (count args) 3) \n     (last args) \n     (recur (cons (apply (second args) [(first args) (nth args 2)]) \n                            (drop 3 args)))))","problem":135,"user":"4fae5401e4b081705acca249"},{"problem":135,"code":"(fn [& args]\n  (loop [xs args v 0 o +]\n    (let [x (first xs)]\n      (if x\n        (if (= (class x) Long)\n           (recur (rest xs) (o v x) nil)\n           (recur (rest xs) v x))\n         v))))","user":"52f53589e4b05e3f0be25f2c"},{"code":"(fn infix [& args]\n  (let [[init & op-pairs] args]\n    (reduce (fn [x1 [f x2]] (f x1 x2)) init (partition 2 op-pairs))))","problem":135,"user":"4edecdae535d10e5ff6f533c"},{"problem":135,"code":"(fn \n  [& args]\n  (reduce (fn [a [op b]] (op a b))\n          (first args)\n          (partition 2 (rest args)))\n  )","user":"5bbbce99e4b0a20761a23610"},{"code":"(fn [& ops]\n  (let [result (first ops)]\n    (->> (rest ops)\n         (partition-all 2)\n         (reduce (fn [r op]\n                   ((first op)\n                    r (second op)))\n                 result))))","problem":135,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn f\r\n  ([a] a)\r\n  ([a b c & m]\r\n   (apply f (b a c) m)))","problem":135,"user":"4db858d1535d1e037afb218c"},{"problem":135,"code":"(fn [& e]\n  (if (empty? (rest e))\n    (first e)\n    (recur (conj (drop 3 e) (apply (nth e 1) (list (first e) (nth e 2)))))))","user":"598229d6e4b021a7a535fdfb"},{"code":"; (fn [x & y]\n;   (reduce\n;     #(let [[o n] %2] (o % n))\n;     x\n;     (partition 2 y)))\n\n(fn my-infix-calc [& more]\n  (loop [val (first more) expr (rest more)]\n    (if (empty? expr) val\n        (recur (apply (nth expr 0) (list val (nth expr 1))) (drop 2 expr))\n        )))","problem":135,"user":"4fc6d2c1e4b0ee37620e181b"},{"code":"#(reduce (fn [x [f y]] (f x y)) %1 (partition 2 %&))","problem":135,"user":"4f052eaf535dcb61093f6bf3"},{"code":"(fn me\n  ([x f y] (f x y))\n  ([x f y & r] (apply me (f x y) r)))","problem":135,"user":"5349ac2be4b084c2834f4a67"},{"problem":135,"code":"(fn [a & pairs]\n  (reduce (fn [acc [op x]] (op acc x)) \n          a (partition 2 pairs)))","user":"5f82609ae4b0c071e6c840f9"},{"problem":135,"code":"(fn f [& args]\n    (reduce \n     (fn [x y] (if (fn? x) (x y) (partial y x))) identity args))","user":"5aa8f753e4b0d174b936c8d9"},{"problem":135,"code":"(fn [& vs] (loop [n 0 op + vs vs] (if-not (seq vs) n (recur (apply op [n (first vs)]) (first (rest vs)) (rest (rest vs))))))","user":"53b71b94e4b047364c0444cd"},{"problem":135,"code":"(fn [& args]\n  (loop [[n1 op n2 & rest] args]\n    (if (nil? op)\n      n1\n      (let [res (op n1 n2)] (recur (cons res rest))))))","user":"543c5200e4b032a45b86933e"},{"code":"#(reduce (fn [s a] (let [[f x] a] (f s x))) (first %&) (partition 2 (rest %&)))","problem":135,"user":"529b44afe4b02ebb4ef7509d"},{"problem":135,"code":"(fn infix \n  ([x] x)\n  ([x op y] (op x y))\n  ([x op y & more] (apply infix (op x y) more)))","user":"53ff8c31e4b0de5c41848603"},{"code":"(fn [op1 f1 op2 & blah] \n\t   (let [l (partition 2 blah)](reduce #((first %2) %1 (second %2)) (f1 op1 op2) l)))","problem":135,"user":"503539dee4b0ed9c821488f6"},{"problem":135,"code":"(fn [a & r]\n  (reduce (fn [x [f y]]\n            (f x y))\n          a\n          (partition 2 r)))","user":"5893c64ce4b00487982d524b"},{"code":"(fn [f & r]\n  (reduce #((first %2) %1 (second %2)) f (partition 2 r)))","problem":135,"user":"536b2048e4b0243289761eb7"},{"code":"(fn infix [x & xs]\n  (reduce (fn [a [f b]] (f a b)) x (partition 2 xs)))","problem":135,"user":"4f251302e4b0d66497709ff0"},{"problem":135,"code":"(fn infix                                            \n  ([a] a)                                            \n  ([a b c] (b a c))                                  \n  ([a b c & d] (apply infix (cons (infix a b c) d))))","user":"5b14475be4b0cc2b61a3be5a"},{"problem":135,"code":"(fn [& more]\n  (loop [res (first more)\n         remaining (next more)]\n    (if remaining\n      (recur ((first remaining) res (second remaining)) (next (next remaining)))\n      res)))","user":"54edc818e4b024c67c0cf865"},{"code":"(fn infix\r\n  [init & args]\r\n  (loop [a init [op b & args] args]\r\n    (if op\r\n      (recur (op a b) args)\r\n      a)))","problem":135,"user":"500159b3e4b0678c553fc419"},{"problem":135,"code":"(fn g [& args]\n  (if (= (count args) 1)\n    (first args)\n    (apply g (conj (drop 3 args) ((second args) (first args) (nth args 2))))))","user":"5918db70e4b09b4ee5954bbb"},{"problem":135,"code":"(fn infix [& args]\n  (if (> (count args) 3)\n    (let [[op1 f op2 & rest] args]\n      (apply infix (cons (f op1 op2) rest)))\n    (let [[op1 f op2] args]\n      (f op1 op2))))","user":"55f85b93e4b03cbcff9738ae"},{"code":"(fn [x & args]\n  (reduce\n   (fn [v l]\n     ((first l) v (last l))) x (partition 2 args)))","problem":135,"user":"4e6e3aac535d5021c1a89603"},{"code":"(fn [& a]\n  (if (= (count a) 1)\n    (first a)\n    (let [[x o y & r] a]\n      (recur (cons (o x y) r)))))","problem":135,"user":"4ee75ec2535d93acb0a66867"},{"code":"(fn [& exp]\n  (reduce \n (fn [acc n] \n   (apply (first n) [acc (second n)])) (first exp) (partition 2 (rest exp))))","problem":135,"user":"52a32876e4b04e0c58e87bfb"},{"code":"(fn infix [x opr y & zs]\n  (let [result (opr x y)]\n    (if (empty? zs)\n        result\n        (apply infix result zs))))","problem":135,"user":"4fcf0ce9e4b03432b189f40b"},{"problem":135,"code":"(fn my-func [& input]\n  (letfn [(infix [x func y] (func x y))\n          (init [] (apply infix (take 3 input)))\n          (others [] (partition 2 (drop 3 input))) ]\n  (reduce (fn [carry item] (infix carry (first item) (last item))) (init) (others))     ))","user":"552456e3e4b0882d96d091c2"},{"code":"(fn infix[& xs]\n  (let [ops (vec xs)\n        init (first ops)\n        bytwos (partition 2 (rest ops))\n        ]\n      (reduce #((first %2) %1 (second %2)) init bytwos)\n    )\n  )","problem":135,"user":"529a73bde4b02ebb4ef75096"},{"code":"(fn[& nums](loop [cnt 1 acc (nth nums 0)] (if (> cnt (- (count nums) 2))  acc\n          (recur (+ cnt 2) ((nth nums cnt) acc (nth nums (+ 1 cnt)))))))","problem":135,"user":"4f32135ae4b0d6649770a08e"},{"problem":135,"code":"(fn ip [start & ops]\n  (loop\n    [v start\n     ops ops]\n    (if (nil? ops) v\n      (let [[op param & more-ops] ops]\n        (recur (op v param) more-ops)) \n      )\n  ))","user":"6045582fe4b02d28681c77b6"},{"problem":135,"code":"(fn [x & l]\n  (loop [x x l l]\n   (if (empty? l)\n     x\n     (let [[f y & l] l]\n       (recur (f x y) l)))))","user":"565e0934e4b068f2fe63dc30"},{"problem":135,"code":"(fn calc [x op y & args]\n  (if-not (empty? args)\n    (apply calc (op x y) args)\n    (op x y)))","user":"5e41b679e4b01d43a70e8e58"},{"problem":135,"code":"(fn [& args]\n  (loop [rem (rest args)\n         res (first args)]\n    (if (empty? rem)\n      res\n      (recur (drop 2 rem) ((first rem) res (second rem))))))","user":"5522cd9ae4b0882d96d091ab"},{"problem":135,"code":"(fn [a0 & args] \n  \n  (loop [loop-args args \n         vL  a0] \n    (let [[operator vR & rest-args] loop-args\n          newValue (operator vL vR)]\n      (if (empty? rest-args) \n        newValue \n        (recur rest-args newValue)\n      )\n      \n    )\n  )\n)","user":"554a75c9e4b0a04f79299575"},{"problem":135,"code":"(fn [& args]\n        (loop [res (first args) [op x & xs] (rest args)]\n          (if (nil? op)\n            res\n            (recur (op res x) xs))))","user":"546c4377e4b00cfc9eacc177"},{"problem":135,"code":"(fn [& v]\n  (loop [r (first v) a (partition 2 (rest v))]\n    (if (empty? a)\n      r\n      (recur (apply #(%1 r %2) (first a)) (rest a)))))","user":"5683d2a9e4b0945ebc182aa0"},{"problem":135,"code":"(fn [& args]\n  (reduce\n   #((first %2) %1 (last %2))\n   (first args)\n   (partition 2 (rest args))))","user":"532ecd44e4b019098a6f8b49"},{"code":"#(last (reduce (fn [[o v] x]\n            (if (number? x)\n              [nil (if o (o v x) x)]\n              [x v]))\n          [] %&))","problem":135,"user":"52be58d7e4b07a9af579231d"},{"code":"(fn [& args] (reduce (fn [val [f a]] (f val a)) (first args) (partition 2 (rest args))))","problem":135,"user":"50be9b4ae4b00fb48fed2ef6"},{"code":"(fn [& args]\n  (loop [[x f y & others] args]\n    (let [r (f x y)]\n      (if-not others\n        r\n        (recur (cons r others))))))","problem":135,"user":"5078d366e4b08327cd804a5b"},{"code":"#(reduce (fn [x [y z]] (y x z)) % (partition 2 %&))","problem":135,"user":"4e9a8c0e535dbda64a6f6b72"},{"problem":135,"code":"(fn infix \n  ([x] x)\n  ([a op b & rest] (apply infix (op a b) rest)))","user":"59ac0965e4b08cbb53654da6"},{"problem":135,"code":"(fn [init & ops]\n  (reduce (fn [x [op y]] (op x y)) init (partition 2 ops)))","user":"5821b018e4b04b46fc4b0f80"},{"code":"(fn [& args]\n  (reduce (fn [result [f x]] (f result x)) (first args) (partition 2 (rest args))))","problem":135,"user":"51ae350fe4b09397d5109790"},{"problem":135,"code":"(fn infix\n  ([x f y] (f x y))\n  ([x f y & more] (apply infix (f x y) more)))","user":"5409a12fe4b0addc1aec66df"},{"problem":135,"code":"(fn [& n]\n  (reduce #(if (= (type %2) Long)\n             (%1 %2)\n             (partial %2 %))\n          n))","user":"4ebbc1f6535dfed6da9c6d72"},{"problem":135,"code":"(fn [& exprs] (reduce (fn [a [op b]] (op a b))\n    (first exprs) (partition 2 (rest exprs))))","user":"56df62b3e4b0ca2494a095ef"},{"code":"(fn [& args]\n    (cond (= (count args) 1) (first args)\n          :else (let [inp (apply list args)\n                      operands [(first inp) (second (rest inp))]]\n                  (recur (conj (drop 3 inp) (apply (second inp) operands))))))","problem":135,"user":"52b5edd1e4b0c58976d9ad3c"},{"code":"(fn [init & args]\n  (reduce (fn [acc [f n]] (f acc n)) init (partition 2 args)))","problem":135,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(fn [f & e]\n    (reduce (fn [acc [op left]]\n              (op acc left)) f (partition 2 e)))","problem":135,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"(fn [& args]\n  (reduce (fn [a [op b]] (op a b)) (first args) (partition 2 (rest args))))","problem":135,"user":"51bdc609e4b0ff155d51d2b3"},{"code":"(fn [& args]\n  (loop [res (first args), xs (rest args)]\n    (if (empty? xs)\n      res\n      (let [[op x] xs]\n        (recur (op res x) (drop 2 xs))))))","problem":135,"user":"500ff421e4b0ae202717946f"},{"problem":135,"code":"(fn math [& args]\n    (let [[x op y & more] args\n          subtotal (op x y)]\n      (if (empty? more)\n        subtotal\n        (apply math (cons subtotal more)))))","user":"5531e445e4b09218d5f44f76"},{"code":"(fn [& xxs] (loop [v (first xxs) x (rest xxs)] \n             (if (empty? x) v\n               (recur ((first x) v (fnext x)) (drop 2 x))\n             ))  \n)","problem":135,"user":"5158bba4e4b059418b97f0ab"},{"code":"(fn [& args]\n  (let [ps (take-nth 2 args)\n        fs (take-nth 2 (rest args))]\n    (loop [inps (rest ps)\n           infs (rest fs)\n           result ((first fs) (first ps) (second ps))]\n      (if (empty? infs)\n        result\n        (recur (rest inps)\n               (rest infs)\n               ((first infs) result (second inps)))))))","problem":135,"user":"4fdbc075e4b05e33b9224f61"},{"code":"(fn infix [& all]\n  (loop [total (first all)\n        [[operator operand] & r] (partition 2 (rest all))]\n    (if (nil? operand)\n    \ttotal\n    \t(recur (operator total operand) r))))","problem":135,"user":"51a1659de4b00957e520db72"},{"code":"#(reduce (fn ! [a b] (if (fn? a) (a b) (partial b a))) %&)","problem":135,"user":"4e8a460e535d65386fec2109"},{"code":"(fn calc [a b c & d]\n  (let [result (b a c)]\n    (if (> (count d) 1)\n      (apply calc (conj d result))\n      result)))","problem":135,"user":"52dad8bde4b09f7907dd13be"},{"code":"(fn cal\n  ([x op y & r] (apply cal (cons (op x y) r)))\n  ([x] x))","problem":135,"user":"519b2570e4b0ac1b7dced6a3"},{"code":"(fn [x & rst]\n  (if (zero? (count rst))\n    x\n    (let [op (first rst) y (second rst)]\n      (recur (op x y) (drop 2 rst)))))","problem":135,"user":"506b8242e4b0eda3100c090a"},{"problem":135,"code":"(fn [& p]\n  (loop [s (rest p) r (first p)]\n    (if (empty? s) r\n      (recur (drop 2 s) ((first s) r (second s))))))","user":"592bb806e4b072a2710fcf46"},{"code":"(fn [& a]\n  (first\n    (reduce\n      (fn [x y]\n        (if (= 2 (count x))\n          [((second x) (first x) y)]\n          (conj x y)))\n    []\n    a)))","problem":135,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":135,"code":"(fn [& nums]\n  (loop [res (first nums)\n         rem (rest nums)]\n    (if (empty? rem)\n      res\n      (recur ((first rem) res (first (rest rem))) (rest (rest rem))))))","user":"5bb5cd43e4b0a20761a23575"},{"code":"(fn [val & expr]\n  (if (empty? expr)\n    val\n    (let [[f op & rst] expr]\n      (recur (f val op) rst))))","problem":135,"user":"5127e504e4b03a34742b4302"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [r a]\n            (if (number? a)\n              (r a)\n              (partial a r))) args))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":135,"code":"(fn [& args] (loop [arg (rest args) acc (first args)]\n                   (if (empty? arg) acc\n                       (recur (rest (rest arg)) ((first arg) acc (first (rest arg)))))))","user":"56483f45e4b0284900eef62b"},{"code":"(fn [& args]\n  (reduce #((first %2) % (second %2)) (first args) (partition 2 (rest args))))","problem":135,"user":"515a6151e4b0394f658fe241"},{"code":"(fn calculator[x & ops] \n  (if (nil? ops)\n    x \n    (apply calculator ((first ops) x (second ops)) (nnext ops))))","problem":135,"user":"531490bde4b08068f379ed17"},{"code":"(fn f [a & xs]\n  (if-not xs\n    a\n    (let [[b c] xs]\n      (apply f (cons (b a c) (rest (rest xs)))))))","problem":135,"user":"510db6cde4b078ea71921145"},{"code":"(fn infix [& x]\n  (letfn [(infmath [& [a f b]] (f a b))]\n    (if (> (count x) 2)\n        (apply infix \n             (cons \n               (apply infmath (take 3 x)) \n               (drop 3 x)))\n        (first x))))","problem":135,"user":"4fc93728e4b0ee37620e1844"},{"code":"(fn infix [& parms]\r\n  (let [[a b c & d] parms]\r\n    (if (empty? d)\r\n      (b a c)\r\n      (apply infix (conj d (b a c))))))","problem":135,"user":"50045388e4b0678c553fc44e"},{"problem":135,"code":"(fn [a & l]\n  ((fn cal [a l]     \n     (if (empty? l) a \n     (cal ((first l) a (first (rest l))) (drop 2 l)))) \n   a l))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"(fn abc [& more] \n  (let [op1 (first more)\n        f (first (rest more))\n        op2 (first (rest (rest more)))\n        others (rest (rest (rest more)))]\n    (if-not (seq others)\n      (f op1 op2)\n      (apply abc (cons (f op1 op2) others))\n    )))","problem":135,"user":"52fcfeeee4b047fd55837027"},{"problem":135,"code":"(fn [x op y & res]\n  (letfn [(infix [x op y] (op x y))]\n    (if (zero? (count res))\n      (infix x op y)\n      (recur (infix x op y) (first res) (second res) (drop 2 res)))))","user":"588f500ae4b00487982d51a4"},{"code":"(fn infix \n          ([x] x)\n          ([x op y & rest] (apply infix (op x y) rest)))","problem":135,"user":"4e599577535d8a8b8723a29f"},{"problem":135,"code":"(fn myIndexCalculator [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"5c74b043e4b0fca0c16227ce"},{"code":"(fn calc [n & expr]\r\n  (reduce (fn [value [operator operand]] (operator value operand)) n (partition 2 expr)))","problem":135,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":135,"code":"#(reduce (fn [a x] (if (coll? a) (let [[n f] a] (f n x)) [a x])) %&)","user":"54aec375e4b09f271ff37cf9"},{"problem":135,"code":"(fn infix-calc\n  ([a & tokens]\n   (infix-calc (conj tokens a)))\n  ([tokens]\n   (if (> (count tokens) 1)\n     (recur (conj (drop 3 tokens)\n                  ((fn [[a b c]] (b a c)) tokens)))\n     (first tokens))))","user":"54570d08e4b080a794c2c888"},{"code":"(fn [start & args]\n  (let [args (partition 2 args)]\n    (reduce (fn [p [f n]] (f p n)) start args)))","problem":135,"user":"4e568873535d8a8b8723a283"},{"problem":135,"code":";PB helped\n(fn eval-infix [x & args]\n  (if (empty? args) x\n    (let [[op rhs & restofit] args]\n      (apply eval-infix (cons (apply op (list x rhs)) restofit))\n      )))","user":"53dadf1de4b0e771c30254ad"},{"code":"(fn [& args]\n  (if (= (count args) 1) (first args)\n      (let [[x op y & col] args]\n        (recur (cons (op x y) col)))))","problem":135,"user":"4e14b925535d04ed9115e7df"},{"code":"(fn [& args]\n         (first\n          (reduce (fn [[arg op] i]\n                    (cond\n                     (fn? i) [arg i]\n                     op [(op arg i) nil]\n                     :else [i nil]))\n                  [0 nil]\n                  args)))","problem":135,"user":"4fa3c137e4b081705acca193"},{"problem":135,"code":"(fn [x & args] (reduce (fn [memo [op v]] (op memo v)) x (partition 2 args)))","user":"5454b84ce4b0e397800069d9"},{"problem":135,"code":"(fn left-to-right-calc [& args]\n  (loop [[first op second & tail] args]\n    (let [res (if (= op +)\n                (+ first second)\n                (if (= op -)\n                  (- first second)\n                  (if (= op *)\n                    (* first second)\n                    (/ first second))))]\n      (if (empty? tail)\n        res\n        (recur (cons res tail)))\n      ))\n  )","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":135,"code":"(fn calc\n  ([fst] fst)\n  ([fst op snd & end] (apply calc (op fst snd) end))\n )","user":"585bcd51e4b0f14aab7c8771"},{"problem":135,"code":"(fn infix-recur [& args] \n   (loop [acc (first args) infix-list (partition 2 (rest args))]\n     (if (not-empty infix-list)\n       (recur \n        (#((first %2) %1 (second %2)) acc (first infix-list)) \n        (rest infix-list)) \n       acc)))","user":"567476bde4b05957ce8c6139"},{"problem":135,"code":"(fn f [a op b & r]\n  (if-not (seq r)\n    (op a b)\n    (apply f (op a b) r)))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"problem":135,"code":"(fn foo [& args] (let [argsf (flatten args)] (if (> (count argsf) 3) (foo ((second argsf) (first argsf) (nth argsf 2)) (rest(rest(rest argsf)))) ((second argsf) (first argsf) (nth argsf 2)))))","user":"577412c6e4b0979f896515f6"},{"code":"(fn infix[& x]((fn infix-inner[current xin](\n                   if (first xin)\n                   (infix-inner ((first xin) current (second xin)) (drop 2 xin))\n                   current)) \n                  (first x) (rest x)))","problem":135,"user":"52a1edd6e4b04e0c58e87be4"},{"problem":135,"code":"(fn [& lst]\n    (letfn [(infix-calculator [current [lf & lst]]\n              (cond \n                    (nil? lf) (first current)\n                    (fn? lf) (let [nxt (lf (first current) (first lst))] \n                               (infix-calculator (cons nxt (rest current)) (rest lst))\n                               )\n                    :else (infix-calculator (cons lf current) lst)))]\n      (infix-calculator [] lst)\n      ))","user":"55aa1637e4b0988bba2ad949"},{"problem":135,"code":"(fn [v & r] \n   (reduce \n    (fn [a p] (let [[f x] p] (f a x))) \n    v \n    (partition 2 r)))","user":"55249f64e4b0882d96d091c6"},{"problem":135,"code":"(fn [& args] (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) args))","user":"5b77248ae4b047b03b2036e7"},{"problem":135,"code":"(fn [a op b & r]\n  (if (empty? r)\n    (op a b)\n    (recur (op a b) (first r) (second r) (drop 2 r))))","user":"5dc98501e4b02f9375f4e1e6"},{"code":"(fn [arg1 op arg2 & args]\n  (if (nil? op) \n    arg1\n  \t(recur (op arg1 arg2) (first args) (second args) (drop 2 args))))","problem":135,"user":"4ff83003e4b0678c553fc396"},{"problem":135,"code":"(fn [& args]\n  (loop  [math-vars args]\n      (if (= (count math-vars) 1)\n      (first math-vars)\n      (recur (cons ((second (vec math-vars)) (first (vec math-vars)) ((vec math-vars) 2)) (drop 3 math-vars))))))","user":"53bb95d0e4b047364c044508"},{"code":"(fn [x & coll] (reduce (fn [a b] ((first b) a (second b))) x (partition 2 coll)))","problem":135,"user":"51beb32ae4b013aa0d74b7fd"},{"code":"(fn [& r]\n   (reduce #((first %2) %1 (second %2)) (first r) (partition 2 (rest r))))","problem":135,"user":"535e518ee4b04ce2eb3ed2cf"},{"problem":135,"code":"(fn calc[x & args] (loop [fir x res args]) (if (> (count args) 1) (recur ((first args) x (second args)) (drop 2 args)) x))","user":"53f64f38e4b0db01ade6f9dc"},{"problem":135,"code":"(fn do-infix\n  [& l]\n  (let [\n         initial (first l)\n         rest-of-l (rest l)\n         operations (partition 2 rest-of-l) ;list of eg. (+ 3)\n        ]\n    (reduce (fn [value operation] ((first operation) value (second operation))) initial operations)\n  )\n)","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn [ & args] (reduce  #(if (nil? %1) %2 (if (fn? %2) (partial %2 %1) (%1 %2))) args))","problem":135,"user":"51f4d46ee4b0fca5e8b48243"},{"problem":135,"code":"(fn infix [& args]\n   (let [data (partition-all 2 args)]\n     (:val (reduce (fn [a [val opt]]\n                     (if (nil? (:opt a))\n                       (assoc a :val val\n                                :opt opt)\n                       (assoc a :val ((:opt a) (get a :val) val)\n                                :opt opt)))\n                   {} data))\n     ))","user":"5b5efecde4b0c6492753e6e6"},{"problem":135,"code":"(fn calc [& s]\n  (let [start (first s)\n        pairs (partition 2 (rest s))]\n    (reduce #((first %2) %1 (second %2)) start pairs)))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":135,"code":"(letfn [(f [x & xs]\n           (if (seq xs)\n             (let [[op y & ys] xs]\n               (apply f (conj ys (op x y))))\n             x))]\n  f)","user":"540470dae4b0addc1aec6658"},{"code":"(fn f \n  ([x] x)\n  ([x y z & more] \n    (apply f (conj more (y x z)))))","problem":135,"user":"51b0fc95e4b0c53cf2e68a72"},{"problem":135,"code":"#(reduce (fn [acc p]\n           ((first p) acc (second p)))\n         (first %&)\n         (partition 2 (rest %&)))","user":"58e58ae9e4b056aecfd47c9a"},{"problem":135,"code":"(fn [& a]\n            ((fn [r a]\n               (if (nil? (first a))\n                 r\n                 (recur ((first a) r (second a)) (drop 2 a))))\n             (first a) (rest a)))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":135,"code":"(fn [& args]\n  (let [parse (fn [{:keys [op res]} curr]\n                (if (#{+ - * /} curr)\n                  {:op curr :res res}\n                  (if op\n                    {:op nil :res (op res curr)}\n                    {:op nil :res curr})))]\n  \t(:res (reduce parse {:op nil :res nil} args))))","user":"53ee7f2ee4b0d648e757f4cf"},{"problem":135,"code":"(fn [i & e] \n  (reduce \n   \t(fn [a [f v]] (f a v)) \n    i \n    (partition 2 e)))","user":"561047eae4b05f002753df6d"},{"problem":135,"code":"(fn [& args]\n  (reduce #((first %2) %1 (last %2)) (first args) (partition 2 (drop 1 args))))","user":"536046a9e4b063bf7a5f8fe1"},{"problem":135,"code":"(fn calc\n  [first-num & coll]\n  (loop [rsf  first-num\n         coll coll]\n    (if (empty? coll)\n      rsf\n      (recur ((first coll) rsf (second coll))\n             (next (next coll))))))","user":"5a9829e5e4b0d174b936c788"},{"problem":135,"code":"(fn naiveval [& expr]\n                (let [[a op b & rst] expr  _fold (op a b)]\n                  (if rst\n                    (recur (cons _fold rst) )\n                    _fold))\n                )","user":"561814bae4b06b1bb2182a1a"},{"problem":135,"code":"(fn foo [a & more]\n  (loop [acc a\n         stack more]\n    (if (empty? stack)\n      acc\n      (let [op  (first stack)\n            b   (second stack)\n            res (rest (rest stack))]\n        (recur (op acc b) res)))))","user":"5d7bd68ee4b02e6b30c93554"},{"problem":135,"code":"(fn [& args]\n            (:sum (reduce (fn [{:keys [op sum]} x]\n                            (if op\n                              {:op nil :sum (op sum x)}\n                              {:op x :sum sum})) {:op + :sum 0} args)))","user":"57b7de74e4b0fbc9809a27d4"},{"code":"(fn [a & ts]\n  (reduce (fn [r [op x]] (op r x)) a (partition 2 ts)))","problem":135,"user":"51805d22e4b0e3fc13e244df"},{"problem":135,"code":"(fn infix [& args]\n  (cond\n    (> (count args) 3)\n    (apply infix ((second args) (first args) (nth args 2)) (rest (rest (rest args))))\n    (= (count args) 3)\n    ((second args) (first args) (nth args 2))\n    :else\n    args\n    )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":135,"code":"(fn [& x]\n  (reduce (fn [agg [f x]] (f agg x)) (first x) (partition 2 (rest x))))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"(fn [& infs]\n  (loop [result (first infs)\n         nums (rest (filter integer? infs))\n         ops (filter (complement integer?) infs)]\n    (if (empty? nums)\n      result\n      (recur ((first ops) result (first nums)) (rest nums) (rest ops)))))","problem":135,"user":"5361a4f2e4b0243289761e47"},{"code":"(fn [& args]\n\t(if (= 1 (count args)) \n\t\t(first args)\n\t\t(let \t[[a op b & coll] args]\n\t\t\t\t\t(recur (cons (op a b) coll)))\n\t)\n)","problem":135,"user":"5029f263e4b023940c84aa45"},{"code":"(fn calc-prefix\n  [& ops]\n  (first\n    (reduce (fn [[res op :as acc] i]\n              (if op\n                [(op res i) nil]\n                [res i]))\n            [(first ops) nil]\n            (rest ops))))","problem":135,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":135,"code":"(fn [& args]\n  (loop [val nil\n         ops (filter #(not (number? %)) args)\n         opnds (filter number? args)]\n    (cond (nil? val) (recur ((first ops) (first opnds) (second opnds))\n                            (rest ops)\n                            (nnext opnds))\n          (empty? ops) val\n          :else (recur ((first ops) val (first opnds))\n                       (rest ops)\n                       (rest opnds)))))","user":"58d48df8e4b03c36ff7e5941"},{"code":";(fn [val1 & args]\n;  (if (= (count args) 2)\n;    ((first args) val1 (second args)) \n;    (recur ((first args) val1 (second args)) (drop 2 args))))\n\n(fn [& args]\n  (reduce #((first %2) %1 (last %2))  (first args) (partition 2 (rest args))))","problem":135,"user":"5290ffaee4b0239c8a67af10"},{"code":"(fn infix [x op y & args]\n  (if (empty? args)\n    (op x y)\n    (recur (op x y) (first args) (second args) (drop 2 args))\n    )\n  )","problem":135,"user":"52e59ca5e4b09f7907dd1464"},{"problem":135,"code":"(fn [& args]\n    (reduce \n        (fn [calc x] \n            (if (number? x)\n                (calc x) \n                (partial x calc)))\n        (partial + 0)\n        args))","user":"5eff6c0ee4b0cf489e8d7f11"},{"code":"(fn from-infix [& exprs]\n  (loop [[x op y & rest] exprs]\n    (let [val (op x y)]\n      (if (empty? rest) val (recur (cons val rest))))))","problem":135,"user":"50763574e4b0a894bb95bf3d"},{"problem":135,"code":"(fn inf [& s]\n  (let [curr ((second s) (first s) (nth s 2))\n        left (drop 3 s)]\n    (if (empty? left)\n      curr\n      (apply inf (cons curr left)))))","user":"577629abe4b0979f8965162e"},{"problem":135,"code":"(fn [x & y] \n  (let [ p (partition 2 y)]\n    (reduce (fn [r [op v]] (op r v)) x p)))","user":"541619e8e4b01498b1a719f9"},{"code":"(fn f\n  ([v] v)\n  ([v operator operand & rest]\n    (apply f (cons (operator v operand) rest))))","problem":135,"user":"521b73f5e4b0c4ef0be83043"},{"problem":135,"code":"(fn [& stack]\n  ((fn recur-calc\n     [col acc]\n     (if (= 2 (count col))\n       ((first col) acc (last col))\n       (recur (drop 1 (rest col)) ((first col) acc (nth col 1)))))\n   (rest stack) (first stack)))","user":"5acd08eee4b0e27600da7822"},{"problem":135,"code":"(fn [i & ov] \n  (loop [v i vs ov] \n    (if (empty? vs) \n      v \n      (recur ((first vs) v (second vs)) (drop 2 vs)))))","user":"538d7e2ee4b0b51d73faae70"},{"problem":135,"code":"(fn [& args] (let [args (conj args +)]\n   (reduce #((first %2) %1 (second %2)) 0 (partition 2 args))))","user":"54344721e4b0b6b47310fcea"},{"code":"(fn [& expr]\n  (let [calc (fn [[acc op] nval]\n               (if (#{+ / - *} nval) [acc nval] [(op acc nval) nil]))]\n    (first (reduce calc [0 '+] expr))))","problem":135,"user":"4ff3df0fe4b0678c553fc355"},{"code":"(fn f [a & [_1 _2 & r]] (if (nil? _1) a (apply f (_1 a _2) r)))","problem":135,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":135,"code":"(fn infix\n  [& args]\n  (loop [[x f & xs] args res x]\n    (if f\n      (recur xs (f res (first xs)))\n      res)))","user":"550d9452e4b06e50f9beb15d"},{"problem":135,"code":"(fn [& xs]\n (reduce (fn [x [f y]]\n           (f x y))\n         (first xs)\n         (partition 2 (rest xs))))","user":"54246fcce4b01498b1a71aed"},{"problem":135,"code":"(fn infix-eval\n  [& args]\n  (loop [currentNum (first args)\n         op (second args)\n         i 2]\n    (let [currentVal (op currentNum (nth args i))]\n      (if (>= i (dec (count args)))\n        currentVal\n        (recur currentVal \n               (nth args (inc i))\n               (+ i 2))))))","user":"59b93cd7e4b0a024fb6ae3c7"},{"code":"(fn x [a op b & m] \n  (if m \n      (apply x (cons (op a b) m))\n      (op a b)))","problem":135,"user":"4ebb78a2535dfed6da9c6d70"},{"problem":135,"code":"(fn [init & r]\n  (reduce (fn [memo [f n]] (f memo n))\n          init\n          (partition 2 r)))","user":"59fa241ee4b0ca45a743a358"},{"problem":135,"code":"; This method is really good. The Kung Fu is very strong.\n\n(fn infix [& args]\n  (reduce (fn [a [op b]] (op a b))\n          (first args)\n          (partition 2 (rest args))))\n\n\n\n; My idea -- not so much. The list could not identify the + as a + but as an #object[clojure.core$_PLUS_\n\n;(fn [& args]\n;   (let [coll (apply list args)]\n;   (loop [out 0\n;          in coll]\n;     (if (empty? in)\n;       (out)\n;        (case (second coll) \n;          + (+ (first coll) (recur (drop 2 coll)))\n;          - (- (first coll) (recur (drop 2 coll)))\n;          * (* (first coll) (recur (drop 2 coll)))\n;          / (/ (first coll) (recur (drop 2 coll)))))))","user":"5633bb9de4b0bfe05bf117b4"},{"code":"(fn infixcalc [& more]\n  (if (= (count more) 1)\n    (first more)\n    (let [ops #{+ - * /}\n          [a op b & rest] more]\n      (apply infixcalc (op a b) rest))))","problem":135,"user":"523c6451e4b07becd5be2222"},{"code":"(fn [a & rest]\n   (reduce\n    #((first %2) % (second %2))\n    a\n    (partition 2 rest)))","problem":135,"user":"4f80db02e4b033992c121bf9"},{"problem":135,"code":"(fn [a f b & rst]\n (let [r (f a b)]\n  (if (empty? rst)\n   r\n   (recur r (first rst) (second rst) (drop 2 rst)))))","user":"586615e6e4b0f14aab7c8858"},{"code":"(fn [& more]\n  (let [ops #{+ - / *} ]\n    (loop [rv (first more), right (drop 1 more)]\n      (if (ops (first right))\n        (recur ((first right) rv (second right)) (drop 2 right))\n        rv\n      )  \n    )\n  )\n)","problem":135,"user":"5229211be4b04c906c9c6a63"},{"problem":135,"code":"(fn infix-calc [& args]\n  (let [[frst operator scnd] (take 3 args) result (operator frst scnd)]\n    (if (= (count args) 3) result (apply infix-calc (cons result (drop 3 args))))))","user":"5a99b688e4b0d174b936c7a6"},{"code":"(fn calc [ f1 & r ]\n  (cond (empty? r) f1\n        :else (recur ((first r) f1 (second r)) (drop 2 r))))","problem":135,"user":"51e1a1fae4b06a68e693eaf6"},{"code":"(fn calc [& expr]\n  (loop [expr' expr]\n        (if (= (count expr') 1) (first expr')\n          (let [[[a op b] remain] (split-at 3 expr')]\n            (recur (cons (op a b) remain))))))","problem":135,"user":"508157b2e4b0946d0443855c"},{"problem":135,"code":"(fn calc\n  ([x op & args]\n   (if (= 1 (count args))\n     (op x (first args))\n     (apply calc (op x (first args)) (rest args)))))","user":"5c664b87e4b0fca0c16226a5"},{"problem":135,"code":"(fn [& args] \n  (reduce (fn [a [f b]] (f a b)) \n          (first args) \n          (partition 2 (rest args))))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":135,"code":"(fn\n  [n f & re]\n  (if (empty? re)\n    n\n    (recur (f n (first re))\n           (second re)\n           (drop 2 re))))","user":"55bf6dbce4b01b9910ae2a12"},{"code":"(fn [& l]\n  (letfn [(calc [[x f y & tmp]]\n            (if (empty? tmp) (f x y)\n              (calc (conj tmp (f x y)))))]\n    (calc l)))","problem":135,"user":"4dbdab4e535d020aff1edf49"},{"code":"(fn m [& args]\n  (reduce \n    (fn [r f]\n      ((first f) r (second f))) \n    (first args)\n    (partition 2 (rest args))))","problem":135,"user":"4ec34578535dcc7ae8597d51"},{"problem":135,"code":"(fn f[& args]\n  (let [[a op b] (take 3 args)] \n    (if op \n      (apply (partial f (op a b)) (drop 3 args))\n      a)))","user":"5a8aa992e4b05369db4d24d8"},{"problem":135,"code":"(fn [& expr]\n   (first \n    (reduce\n     (fn [acc x]\n       (if (number? x)\n         (list ((first acc) (last acc) x))\n         (cons x acc)))\n     (list (first expr))\n     (rest expr))))","user":"554bd33ce4b0a04f7929959a"},{"code":"(fn calc \n  ([v1 o v2 & fs]\n    (apply calc (cons (o v1 v2) fs)))\n  ([v] v))","problem":135,"user":"4ee82223535d93acb0a66877"},{"problem":135,"code":"(fn [a & b] (reduce (fn [r [f b2]] (f r b2)) a (partition 2 b)))","user":"57086931e4b0b0fb43fd069e"},{"problem":135,"code":"(fn calc\n  [acc & args]\n  (reduce (fn [acc [op arg]] (op acc arg))\n          acc\n          (partition 2 args)))","user":"521ed5b4e4b0e6c71e0c0bc0"},{"problem":135,"code":"(fn [a & ops]\n  (loop [[op b & remainder] ops\n         result a]\n    (if (empty? remainder)\n      (op result b)\n      (recur \n       remainder\n       (op result b)))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":135,"code":"(fn [a & x] \n  (reduce \n   #((first %2) % (second %2)) \n   a \n   (partition 2 x)))","user":"53f78944e4b0de5c41848561"},{"problem":135,"code":"(fn this \n  [a op b & params]\n  (let [r (op a b)]\n    (if (seq params)\n\t  (apply this (cons r params))\n      r)))","user":"4e68c434535d8ccf87e9fe89"},{"code":"(fn [& args]\n  (loop [stack args]\n    (if-let [[x & more] stack]\n      (if-let [[op y & more] more]\n        (recur (cons (op x y) more))\n        x)\n      0)))","problem":135,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn [& args] \n  (reduce \n   (fn [x [op y]] \n     (op x y))\n   (first args)\n   (partition 2 (rest args))))","problem":135,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn calc [l op r & others]\n  (if\n    (= 0 (count others))\n    (op l r)\n    (apply calc (cons (op l r) others))\n    )\n)","problem":135,"user":"4faacc04e4b081705acca201"},{"problem":135,"code":"(fn [init & args]\n  (reduce #((first %2) %1 (second %2)) init (partition 2 args)))","user":"59f75327e4b0966464fe6aec"},{"code":"(fn t\n  ([n] n)\n  ([n1 f n2 & args] (apply t (f n1 n2) args))\n)","problem":135,"user":"4e72187b535d5021c1a8965b"},{"problem":135,"code":"(fn incal [& args]\n  ((fn calc [l]\n    (cond\n     (zero? (dec (count l))) (first l)\n     :else ((second l) (calc (rest (rest l))) (first l)))) (reverse args)))","user":"5833a6d8e4b089d5ab817ca2"},{"code":"(fn calc [x & xs]\n  (let [c (fn [acc [fun a & as]]\n            (if (nil? as)\n              (fun acc a)\n              (recur (fun acc a) as)))]\n    (c x xs)))","problem":135,"user":"50fe2420e4b03cd852b4e84a"},{"problem":135,"code":"(fn ([a] a) ([a b c & l] (let [r (b a c)] (if l (recur r (first l) (second l) (seq (drop 2 l))) r))))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn [& s] ((fn [l a] (if (empty? l) a (recur (rest (rest l)) ((first l) a (second l)))))  (rest s) (first s)))","problem":135,"user":"51729002e4b044b2ef48a850"},{"problem":135,"code":"(fn [& args]\n    (let [[a op b & rst] args\n          N (op a b)]\n         (if (empty? rst)\n              N\n              (recur (cons N rst)))))","user":"5649615be4b0284900eef641"},{"problem":135,"code":"(fn [x & others]\n  (let [pairs (partition 2 others)]\n    (reduce #((first %2) %1 (second %2)) x pairs)))","user":"607a1523e4b0a637ed78036a"},{"problem":135,"code":"(fn infix\n  ([a] a)\n  ([a op b & rst] (apply infix (op a b) rst)))","user":"54e540c1e4b024c67c0cf7f9"},{"problem":135,"code":"(fn infix-calc [arg1 op arg2 & more]\n  (if-not more\n    (op arg1 arg2)\n    (apply infix-calc (op arg1 arg2) more)))","user":"52393e16e4b0d705d026ef06"},{"code":"(fn [x & xs] (reduce (fn [a [f s]] (f a s)) x (partition 2 xs)))","problem":135,"user":"4e704293535d5021c1a89634"},{"problem":135,"code":"(fn infix [& args]\n  (prn (type args))\n  (let [argvec (map vector (take-nth 2 (next args)) (take-nth 2 (nnext args)))]\n    (reduce #((%2 0) % (%2 1)) (first args) argvec)))\n\n;; Note @frenata's nice use of destructuring and recursion:\n#_(fn infix [& [x op y & remainder]]\n  ;; assumes well formed expression\n  (if remainder\n    (recur (cons (op x y) remainder))\n    (op x y)))","user":"5c950334e4b048ec896c5a44"},{"problem":135,"code":"(fn f \n  ([v] v)\n  ([v o & r]\n    (apply f (cons (o v (first r)) (rest r)))\n    )\n  )","user":"539ec9f9e4b0ca733b974491"},{"code":"(fn infix-calc [x op y & rest]\n  (let [res (op x y)]\n    (if rest\n      (apply infix-calc (cons res rest))\n      res)))","problem":135,"user":"4eb51942535d7eef30807365"},{"code":"(fn infcalc [a o b & re]\n  (if re\n    (apply infcalc (cons (o a b) re))\n    (o a b)\n    ))","problem":135,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":135,"code":"(fn infix [a op b & more]\n    (if (empty? more)\n      (op a b)\n      (apply infix (cons (op a b) more))\n      )\n    )","user":"58ec1e63e4b056aecfd47d54"},{"problem":135,"code":"(fn infix [a & rest]\n  (if (not-empty rest)\n    (let [[b c & r] rest]\n      (apply infix (b a c) r))\n    a))","user":"5fa74b82e4b0fa27300f3dda"},{"code":"(fn [lhs & others]\n  (if (empty? others)\n    lhs\n    (let [[op rhs & therest] others\n          result (apply op [lhs rhs])]\n      (recur result therest))))","problem":135,"user":"4f2e0369e4b0d6649770a064"},{"problem":135,"code":"(fn [& b]\n  (loop [body (rest b) r (first b)]\n    (if (empty? body)\n      r\n      (recur (rest (rest body))\n             ((first body) r (first (rest body)))))))","user":"52979551e4b02ebb4ef75043"},{"problem":135,"code":"(fn [& a]\n  (let [i (first a)\n        o (partition 2 (rest a))]\n    (reduce #((first %2) % (second %2)) i o)))","user":"54acf5c7e4b09f271ff37cdd"},{"code":"(fn([l o r] (o l r))\n   ([a] a)\n   ([l o r & rest] (if (empty? rest) (o l r) (recur (o l r) (first rest) (second rest) (drop 2 rest)))))","problem":135,"user":"5301157ae4b0d8b024fd3717"},{"problem":135,"code":"(fn my-calc [& lst]\n  (if (= 1 (count lst))\n    (first lst)\n    ((second (reverse lst)) (apply my-calc (reverse (rest (rest (reverse lst)))))(first (reverse lst)))))","user":"5684e200e4b04eec3ec5cfc4"},{"problem":135,"code":"(fn f [& xs]\n        (if (= 1 (count xs))\n          (first xs)\n          ((last (drop-last xs)) (apply f (drop-last 2 xs)) (last xs))))","user":"575fbe58e4b08062f99a4e87"},{"code":"(fn infix [x op y & r]\n  (if (empty? r)\n    (op x y)\n    (apply infix (op x y) r)))","problem":135,"user":"4e976f79535dbda64a6f6b55"},{"problem":135,"code":"(fn vec [& args]\n   (reduce (fn [x y] (if (number? y)\n                       ((first x) (second x) y)\n                       (list y x)) ) args))","user":"5508102ee4b021ccfedb96b0"},{"code":"(fn [l & more]\n  (reduce\n    (fn [left [o r]] (o left r))\n    l\n    (partition 2 more)))","problem":135,"user":"50b0cffae4b009df37c708c5"},{"code":"(fn [f & coll] (reduce (fn [a [b c]] (b a c)) f (partition 2 coll)))","problem":135,"user":"536c7470e4b0fc7073fd6e3e"},{"problem":135,"code":";; I can't figure out how to get macros in here, or to evaluate an expression without eval (which is illegal) otherwise the answer could have been as simple as defining, and then using the macro\n;; (defmacro bei [& eq] `(-> ~(first eq) ~@(partition 2 (rest eq))))\n\n;; using reduce and making it comprehensible:\n(fn [& e] \n  (reduce (fn [tot eq] \n                (let [[op a2] eq] \n                  (op tot a2))) \n              (first e) \n              (partition 2 (rest e))))\n;; I am very curious what other's answers are. :)","user":"5005b57de4b0678c553fc46a"},{"problem":135,"code":"(fn calc\n  ([x op y & ys] (apply calc (list* (op x y) ys)))\n  ([x] x))","user":"55d5e80ee4b0e31453f64a91"},{"code":"(fn [& args]\n ((fn infix [sum l]\n     (if (empty? l) sum\n      (infix ((first l) sum (second l))  (drop 2 l))\n )) (first args) (rest args))\n  \n)","problem":135,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":135,"code":"(fn infix-cal [& more]\n  (let [helper (fn [lst acc op]\n  \t\t(cond (empty? lst) \n              \tacc\n         \t  (= (class (first lst)) java.lang.Long)\n    \t\t\t(recur (rest lst) (op acc (first lst)) op)\n              :else \n              \t(recur (rest lst) acc (first lst))))]\n  (helper (rest more) (first more) identity)))","user":"53de622ce4b0d874e779ae34"},{"problem":135,"code":"(fn[& xs]\n  (nth (reduce #(let [x (conj %1 %2)]\n             (if (= 3 (count x)) [((x 1) (x 0) (x 2))] x)) [] xs) 0))","user":"5602ab92e4b04bb52996e1a3"},{"code":"(fn in\r\n  [& e]\r\n  (if (= 1 (count e))\r\n    (first e)\r\n    (apply in (cons ((second e) (first e) (second (rest e))) (drop 3 e)))))","problem":135,"user":"4f17ab99535d64f603146457"},{"problem":135,"code":"(fn infix [a f b & more]\n     (if more\n       (apply infix (f a b) more)\n       (f a b)))","user":"5eb193fde4b00a66d4a951fe"},{"problem":135,"code":"(fn [s1 s2 s3 & sr] \n    (reduce\n      (fn [e1 [e2 e3]](e2 e1 e3))\n     (s2 s1 s3)\n     (partition 2 sr)))","user":"5156e767e4b04360f2428e6b"},{"code":"(fn\n   [a f & more]\n  (loop [aa a ff f mmore more]\n    (if (nil? mmore)\n      aa\n      (if (nil? (next (next mmore)))\n          (ff aa (first mmore))\n          (recur (ff aa (first mmore)) (second mmore) (rest (rest mmore)))\n        \n    ))))","problem":135,"user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":135,"code":"(fn [initial & args] (loop  [answer initial remaining args]\n                               (if (empty? remaining)\n                                 answer\n                                 (recur ( (first remaining) answer (second remaining) ) (drop 2 remaining)) \n                                 )\n                                 )\n                               )","user":"542baf7ce4b0dad94371f291"},{"problem":135,"code":"(fn [& args]\n  (if (= 1 (count args)) (first args)\n    (let [[x op y & exp] args]\n      (recur (cons (op x y) exp)))))","user":"5d48e6d3e4b0776584bd6f15"},{"problem":135,"code":"(fn infix-calc [& args]\n  (:result (reduce (fn [{:keys [result op]} val]\n                     (if (fn? val)\n                       {:result result :op val}\n                       {:result (op result val) :op op}))\n                   {:result 0 :op +}\n                   args)))","user":"5d49ec5ee4b0776584bd6f1c"},{"code":"(fn [& s] (reduce #((first %2) % (second %2)) 0 (partition 2 (cons + s)) ) )","problem":135,"user":"4ee7d177535d93acb0a6686f"},{"problem":135,"code":"#(loop [items (rest %&)\n        total (first %&)]\n   (if (not (empty? items))\n     (recur (drop 2 items)\n            ((first items) total (second items)))\n     total))","user":"5764cc01e4b0994c1922fc05"},{"problem":135,"code":"(fn [value & tl]\n  (loop [acc value xs tl]\n    (if (< 1 (count xs))\n      (recur  ((first xs) acc (second  xs) ) (drop 2 xs))\n      acc ))\n  )","user":"552e1c98e4b076ab5578f7ee"},{"code":"(fn [ & args]\n  (loop [v 0 o + r args]\n    (if (empty? r) v\n      (if o\n        (recur (o v (first r)) nil (rest r))\n        (recur v (first r) (rest r))))))","problem":135,"user":"503a234de4b088a6a14ca76d"},{"problem":135,"code":"(fn [& ys]\n   (loop [ret (first ys)\n          xs (rest ys)]\n     (if (or (nil? xs) (< (count xs) 2))\n       ret\n       (recur ((first xs) ret (second xs)) (drop 2 xs)))))","user":"5327c591e4b09d4e7a9b54ff"},{"problem":135,"code":"(fn [& args]\n  (loop [[a op b & remaining] args]\n    (let [res (op a b)\n          next-args (concat [res] remaining)\n          done (nil? remaining)]\n      (if done\n        res\n        (recur next-args)))))","user":"52fe31d5e4b047fd55837038"},{"code":"(fn [initial & args]\n  (reduce (fn [r [f n]] (f r n))\n     initial\n     (partition 2 args)))","problem":135,"user":"4e5411e8535d8a8b8723a279"},{"problem":135,"code":"#(loop [ans (first %&) lst (next %&)]\n   (if lst\n     (recur ((first lst) ans (second lst)) (-> lst next next))\n     ans\n   )\n )","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":135,"code":"(fn op [a f b & args]\n   (if (empty? args)\n     (f a b)\n     (apply op (f a b) args)))","user":"54be7c0de4b0ed20f4ff6eec"},{"code":"(fn f\n  ([x op y] (op x y))\n  ;([x op y & more] (apply (partial f (op x y)) more))\n  ([x op y & more] (apply f (cons (op x y) more)))\n)","problem":135,"user":"5323a414e4b09d4e7a9b54d1"},{"problem":135,"code":"(fn fr ([a f b] (f a b)) \n       ([a f b & rs] (apply fr (f a b) rs)))\n\n;(fn [n & rs] (reduce #((first %2) % (second %2)) n (partition 2 rs)))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":135,"code":"(fn [a & xs] \n(reduce \n#((first %2) %1 (last %2))\na\n(partition 2 xs)\n\n))","user":"58335c22e4b089d5ab817c9a"},{"problem":135,"code":"( fn infix\n  [ x op y & remains ]\n  ( let [ a ( op x y ) ]\n    ( if ( empty? remains ) a\n      ( apply infix ( conj remains a ) )\n    )\n  )\n)","user":"57561529e4b02ea1147992d3"},{"problem":135,"code":"(fn calc [res & xs]\n  (if (empty? xs)\n  \tres\n  \t(recur ((first xs) res (second xs)) (drop 2 xs))))","user":"5d02fe44e4b0cc9c915881c0"},{"problem":135,"code":"(fn [n & r] (reduce (fn [acc y] ((first y) acc (last y))) n (partition 2 r)))","user":"5addadfce4b0837691e92c13"},{"code":"(fn [x & xs] (reduce #((first %2) %1 (last %2)) x (partition 2 xs)))","problem":135,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn [& more]\n  (let [init (first more)\n        pairs (partition 2 (rest more))\n        f (fn [cur [op value]] (op cur value))]\n    (reduce f init pairs)))","problem":135,"user":"51a8ef91e4b08d8ec191b820"},{"code":"(fn infix\n  ([x op y]\n    (op x y))\n  ([x op y & r]\n    (apply infix (cons (op x y) r))))","problem":135,"user":"539a2901e4b0b51d73faaf0f"},{"code":"(fn foo [ a op b & exprs ]\n  (if exprs\n    (apply foo (op a b) exprs)\n    (op a b)))","problem":135,"user":"506755b3e4b03d366d7cb2bc"},{"problem":135,"code":"#(reduce (fn [a [f n]] (f a n)) (%2 % %3) (partition 2 %&))","user":"54ddb556e4b024c67c0cf798"},{"problem":135,"code":"(fn infix\n  [a f & [b & args]]\n  (if args\n    (apply infix (f a b) args)\n    (f a b)))","user":"51a3be77e4b0e77c4ca60bf8"},{"code":"(fn infix\n  ([x] x)\n  ([x1 op x2 & xs] (apply infix (cons (op x1 x2) xs))))","problem":135,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":135,"code":"(fn [& args]\n  (loop [acc (first args) f nil coll (rest args)]\n    (if (empty? coll)\n      acc\n      (let [arg (first coll)]\n        (if (number? arg)\n          (recur (f acc arg) nil (rest coll))\n          (recur acc arg (rest coll)))))))","user":"5576f299e4b05c286339e077"},{"problem":135,"code":"(fn [& xs]\n   (let [f (fn [[a op b & bs]]\n             (if (nil? op)\n               a\n               (recur (conj bs (op a b)))))]\n     (f xs)))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":135,"code":"(fn [n & args] (reduce (fn [s [o e]] (o s e)) n (partition 2 args)))","user":"57c94c54e4b05aa3c4741d2c"},{"problem":135,"code":"(fn inf [a f b & rest]\n    (if (nil? rest) \n     (f a b)\n     (apply inf (cons (f a b) rest))))","user":"570d0548e4b0b0fb43fd06d2"},{"code":"(fn [& args]\n  (reduce (fn [a [op p]] (op a p))\n          (first args)\n          (partition 2 (rest args))))","problem":135,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"code":"#(loop [result %&]\n   (if (< (count result) 2)\n     (first result)\n     (recur \n      ( conj \n       \t( next (nnext result) )\n        ( (second result) (first result) (first (nnext result)) )\n        )\n      )\n    )\n )","problem":135,"user":"528f4462e4b0239c8a67aef0"},{"code":"(fn [x op y & xs]\n  (loop [acc (op x y) r xs]\n    (if (empty? r)\n      acc\n      (let [[op2 y2 & more] r]\n        (recur (op2 acc y2) more)))))","problem":135,"user":"4f072644535dcb61093f6c20"},{"problem":135,"code":"(fn [first-num & more]\n  (->> more\n       (partition 2)\n       (reduce (fn [res [f arg]]\n                 (f res arg))\n               first-num)))","user":"53e4b5a3e4b036ad0777e44b"},{"code":"(fn [& s]\n  (let [[x o y & zs] s]\n    (cond\n     (nil? o) x\n     :e (recur (conj zs (o x y))))))","problem":135,"user":"5256627ce4b0541d1855ba1a"},{"problem":135,"code":"(fn [ & objects ]\n  (loop [expressions (rest objects) accumulator (first objects)] \n    (if (empty? expressions)\n      accumulator\n      (let [ [operator value] (take 2 expressions) \n              other           (drop 2 expressions) ]\n        (recur other (operator accumulator value))))))","user":"54d6f22de4b0a52adc2e2023"},{"problem":135,"code":"(fn this\n  ([x op y] (op x y))\n  ([x op y & more] (apply this (op x y) more)))","user":"5a04e923e4b01bb0ae8afda9"},{"problem":135,"code":"(fn [x & whatevers]\n     (reduce (fn [r-total current-item] \n               ((first current-item) r-total (last current-item)))\n             x (partition 2 whatevers)) )","user":"5e70c16de4b085ba37836dae"},{"code":"(fn infix-calc [a & args]\n  (if-let [[b c & args] args]\n    (recur (b a c) args)\n    a))","problem":135,"user":"4e521cef535d302ef430da6d"},{"problem":135,"code":"(fn infix-calculator\n  [x op y & args]\n  (reduce #((first %2) %1 (second %2))\n          (op x y)\n          (partition 2 args)))","user":"5a61bf79e4b0512ff01cd97b"},{"problem":135,"code":"#(let [fres (%2 %1 %3)]\n   (if (empty? %&)\n     fres (let [partitions (partition-all 2 %&)]\n            (reduce (fn [a b] ((first b) a (second b))) fres partitions))))","user":"60aecd73e4b00e9e6653c49a"},{"problem":135,"code":"#(reduce (fn [ x [op y]] (op x y)) % (partition 2 %&))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":135,"code":"(fn maths\n  [current & args]\n  (if (empty? args)\n    current\n    (apply\n     maths\n     ((first args) current (second args))\n     (drop 2 args))))","user":"5bab5440e4b0a20761a23475"},{"code":"(fn f\n  ([a] a)\n  ([a o b & r] (apply f (cons (o a b) r))))","problem":135,"user":"506e0e5ae4b09350ab4199eb"},{"problem":135,"code":"(fn [x & more]\n    (reduce\n      (fn [a b]\n        ((first b) a (second b)) \n        )\n      x (partition 2 more)\n      )\n    )","user":"528ce039e4b0239c8a67aebc"},{"problem":135,"code":"(fn [& xs]\n  (loop [so-far (first xs)\n         todo (partition 2 (rest xs))]\n    (let [now (first todo)]\n      (if (nil? now)\n        so-far\n        (recur ((first now) so-far (second now)) (rest todo))\n       ))))","user":"57717915e4b0979f896515b3"},{"code":"(fn f [& xs]\n  (let [s ((second xs) (first xs) (nth xs 2)) r (partition 2 2 (drop 3 xs))]\n    (reduce #((first %2) % (second %2)) s r)\n))","problem":135,"user":"50ab8ae3e4b01d6eb43ce9a0"},{"problem":135,"code":"(fn infix [& args]\n  (reduce (fn [a [op b]] (op a b))\n    (first args)\n    (partition 2 (rest args))))","user":"569ce6fee4b0542e1f8d146c"},{"problem":135,"code":"(fn calc\n  [& ops]\n  (loop [list-ops ops]\n    (if (= 1 (count list-ops))\n    (first list-ops)\n    (recur (cons (#(let [[a f b] %] (f a b)) (take 3 list-ops)) (nthrest list-ops 3))\n     )\n    )\n    )\n  )","user":"54e0bb4fe4b024c67c0cf7b8"},{"problem":135,"code":"(fn [& args]\n  (loop [t (first args) tmp (rest args)]\n    (if (empty? tmp)\n      t\n      (recur ((first tmp) t (second tmp)) (rest (rest tmp))))))","user":"59368ccae4b02506e01a297a"},{"code":"(fn [a & r]\n  (reduce (fn [x [o y]] (o x y))\n          a\n          (partition 2 r)))","problem":135,"user":"535d910ae4b04ce2eb3ed2c5"},{"code":"(fn [m & ops]\n  (let [[op n & more-ops] ops]\n    (if (empty? more-ops)\n      (op m n)\n      (recur (op m n) more-ops))))","problem":135,"user":"4f934325e4b0dcca54ed6cb8"},{"problem":135,"code":"(fn [& x] (if (= 1 (count x))\n            (last x)\n            (recur (into [((nth x 1) (nth x 0) (nth x 2))] (drop 3 x)))))","user":"5a3c2a08e4b001c08efc0cdf"},{"problem":135,"code":"(fn [start & args]\n  (loop [result start vals args]\n    (if (empty? vals) result\n        (let [operation (first vals)\n              val (second vals)\n              new-result (operation result val)]\n          (recur (operation result val) (rest (rest vals)))))))","user":"596aaeefe4b069c0a1a19808"},{"problem":135,"code":"(fn infix \n  ([v] v)\n  ([v1 f v2 & r]\n   \t(apply infix (cons (f v1 v2) r))))","user":"53b39d82e4b047364c0444a6"},{"problem":135,"code":"(fn [& args] \n      (reduce (fn [a [op b] ] (op a b)) \n              (first args) \n              (partition 2 (rest args))))","user":"58c71509e4b021aa9917ed6e"},{"code":"(fn doit [& c]\n  (if (= 1 (count c))\n    (first c)\n    (let [[a f b] (take 3 c)]\n       (apply doit (conj (drop 3 c) (f a b))))))","problem":135,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":135,"code":"(fn __ [& args]\n  (loop [out args]\n    (println out)\n    (if (= (count out) 1)\n      (first out)\n      (recur (concat\n               [((nth out 1) (nth out 0) (nth out 2))]\n               (drop 3 out))))))","user":"526759b3e4b03e8d9a4a715b"},{"code":"(fn [& s] (reduce\n  (fn [l [op r]] (op l r))\n  (first s)\n  (partition 2 (rest s))))","problem":135,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn\n  [x & args]\n  (reduce #((first %2) %1 (second %2)) x (partition 2 args)))","problem":135,"user":"51f13b80e4b06a20a2523f38"},{"problem":135,"code":"(fn [first-val & more]\n   (let [op-val-pairs (partition 2 more)] ; From 'more' make a sequence like: ([op1 x1] [op2 x2] ...)\n     (reduce (fn [acc [op val]] (op acc val)) first-val op-val-pairs)))","user":"563772a9e4b0bfe05bf117d7"},{"code":"(fn [x & args]\n  (reduce #((first %2) % (second %2))\n  x (partition 2 args)))","problem":135,"user":"52ce8648e4b07d0d72b27390"},{"code":"(fn [& args] (loop [coll args\n                    total 0]\n               (let [cn (count coll)]\n                 (cond (= cn 0) total\n                       (= cn 1) (first coll)\n                       (= cn 2) ((first coll) total (last coll))\n                       (= cn 3) ((second coll) (first coll) (last coll))\n                       (> cn 3) (if (number? (first coll)) \n                                  (recur (drop 3 coll) ((second coll) (first coll) (nth coll 2)))\n                                  (recur (drop 2 coll) ((first coll) total (second coll))))))))","problem":135,"user":"5078dedae4b08327cd804a5d"},{"problem":135,"code":"(fn f\n([x op y]\n(op x y))\n([x op y & xs]\n(apply f (cons (f x op y) xs))))","user":"569adec2e4b0542e1f8d1450"},{"problem":135,"code":"(fn calc\n  ([] 0)\n  ([a op b] (op a b))\n  ([a op b & args]\n   (apply calc (op a b) args)))","user":"57db2369e4b0bd073c20241f"},{"problem":135,"code":"(fn f [a o b & c](if c (apply f (o a b) c) (o a b)))","user":"5565d5e4e4b0c656e3ff181f"},{"problem":135,"code":"(fn infix-calculator [& [head & tail]]\n  (let [-infix-calc (fn [a [op b & rest :as all]]\n                      (if (nil? all)\n                        a\n                        (recur (op a b) rest)))]\n    (-infix-calc head tail)))","user":"590d3702e4b047aa04b199ff"},{"problem":135,"code":"(fn [& c]\n  (loop [c c\n         n (first c)]\n    (let [s ((second c) n (nth c 2))]\n    (if (<= (count c) 3)\n      s\n      (recur (nnext c) s)))))","user":"541ef7e2e4b01498b1a71a92"},{"problem":135,"code":"(fn infix [a op b & r]\n  (if r \n    (apply infix (op a b) r) \n    (op a b)))","user":"594bc16be4b07ddc2dafae39"},{"problem":135,"code":"(fn recursive \n          ([x y z & more]\n            (if \n             (not (empty? (flatten more))) \n             (recursive (y x z) \n                        (first (flatten more)) \n                        (second (flatten more)) \n                        (flatten (next (flatten (next (flatten more)))))\n                        )\n             (y x z)\n             ) \n             \n           )\n         )","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":135,"code":"(fn [h & t] (reduce (fn [a [o b]] (apply o [a b])) h (partition 2 t)))","user":"5bfe4ecfe4b0bdcf453d1608"},{"code":"(fn f[& m]\n  (loop [l m]\n    (if (= 1 (count l)) \n               (first l) \n               (recur (cons (apply (first (filter fn? (take 3 l))) \n               (filter number? (take 3 l))) (drop 3 l))))))","problem":135,"user":"50503117e4b0a02f9cffdeb5"},{"problem":135,"code":"(fn [a & b]\n  (loop [x a\n         y b]\n    (let [[y1 y2] y]\n      (if (empty? y)\n        x\n        (recur (y1 x y2) (rest (rest y)))))))","user":"566d71b1e4b0a866af6896ca"},{"problem":135,"code":"(fn calc [x f y & ops]\n  (let [v (f x y)]\n    (if ops (apply calc v ops) v)))","user":"4fa5c8dde4b081705acca1af"},{"code":"(fn f\n  ([& all]\n   (if (> (count all) 2)\n     (letfn [(slast [x]\n      (last (drop-last 1 x)))]\n    ((slast all) (apply f (drop-last 2 all)) (last all))\n   )\n     \n   (first all) \n   )\n   )\n  \n )","problem":135,"user":"5191045ee4b0f8ef0be96bf3"},{"problem":135,"code":"(fn [f & r] (reduce (fn [res [op operand]] (op res operand)) f (partition 2 r)))","user":"52e851bfe4b09f7907dd149a"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [x pair] ((first pair) x (second pair)))\n          (first args)\n          (partition 2 (rest args))))","user":"5ec6de19e4b08d0ec38692da"},{"problem":135,"code":"(fn\n  [init & rst]\n  (reduce (fn [a [op x]] (op a x)) init (partition 2 rst)))","user":"55ed5a2de4b0121d4835fdd8"},{"code":"(fn f [a o n & r]\r\n  (if r (apply f (o a n) r)\r\n    (o a n)))","problem":135,"user":"4dce6e41535d5973398f92a2"},{"code":"(fn [& args]\n  (reduce\n    #(if (fn? %2)\n       (partial %2 %)\n       (% %2))\n    args))","problem":135,"user":"522454f4e4b01819a2de42d3"},{"code":"(fn [num & exp]\n  (reduce #(if (fn? %2)\n             (partial %2 %1)\n             (%1 %2))\n          num exp))","problem":135,"user":"51105c7fe4b04c71fce993ef"},{"problem":135,"code":"(fn\n  [a & args]\n  (reduce (fn [acc [f v]] (f acc v)) a (partition 2 args)))","user":"5c24671be4b07e362c2305a1"},{"problem":135,"code":"(fn infix [& args]\n  (loop [s (rest args)\n         res (first args)]\n    (if (seq s)\n      (recur (drop 2 s) ((first s) res (first (rest s))))\n      res)))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"(fn infix [x & forms]\n\t(if (empty? forms)\n\t\tx\n\t\t(let [[op y & rs] forms]\n\t\t\t(apply infix (cons (op x y) rs)))))","problem":135,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":135,"code":"(fn [x & xs] (reduce (fn [n [op m]] (op n m)) x (partition 2 xs)))","user":"57ccedaae4b0c746388ab88e"},{"problem":135,"code":"(fn infix\n  ([a] a)\n  ([a op b & xs]\n   (apply infix (op a b) xs)))","user":"58b51e05e4b0ebc645576d4c"},{"code":"(fn infix [& symbols]\r\n  (let [[s1 s2 s3 & rest] symbols]\r\n    (if (nil? rest) \r\n      (s2 s1 s3)\r\n      (apply infix (cons (s2 s1 s3) rest)))))","problem":135,"user":"4fb266a5e4b081705acca28c"},{"problem":135,"code":"(fn [x & args]\n  (loop [fns (filter #(fn? %) args)\n         xs (remove #(fn? %) args)\n         result x]\n    (if-not (seq fns)\n      result\n      (recur (rest fns) (rest xs) ((first fns) result (first xs))))))","user":"52540bcce4b0541d1855b952"},{"code":"(fn [& a]\n  (loop [val (first a)  args (rest a)  oper (first args)  num (fnext args)]\n    (if (nil? oper)\n      val\n      (recur (oper val num) (nthrest args 2) (first (nthrest args 2)) (fnext (nthrest args 2))))))","problem":135,"user":"52117ea7e4b07aea8afc4f70"},{"problem":135,"code":"(fn t [l o r & xs]\n  (if (empty? xs)\n    (o l r)\n    (apply t (o l r) xs)))","user":"53fcd574e4b0de5c418485d9"},{"problem":135,"code":"(fn [& xs]\n  (reduce (fn [r [f i]] (f r i)) (first xs) (partition 2 (rest xs))))","user":"549def9ce4b0f3d1d8e70f99"},{"problem":135,"code":"(fn [& args]\n  (loop [a args]\n    (let [c (take 3 a)\n          d (count c)]\n      (if (= 3 d)\n        (let [[a1 f a2] c\n              e (f a1 a2)]\n          (recur (cons e (drop 3 a))))\n        (first c)))))","user":"51456858e4b0e88796073408"},{"problem":135,"code":"#(reduce (fn [a b] (if (number? b) (a b) (partial b a))) %&)","user":"5f3abcc4e4b004f08c61c52b"},{"code":"(fn infixer [& l]\n  (let [start (first l)]\n    (loop [a1 (rest l) accum start]\n      (if (empty? a1)\n        accum \n      (recur (rest (rest a1)) ((first a1) accum (first (rest a1))))))))","problem":135,"user":"51622fb8e4b009fba0926e3f"},{"problem":135,"code":"(fn[& args] \n  (first \n   (reduce \n    #(if (and (number? %2) (seq %1)) \n       (conj [] ((last %1) (first %1) %2))\n       (conj %1 %2)) \n    [] args)))","user":"571172ece4b09c608db70446"},{"problem":135,"code":"(fn f [& xs] \n  (if (= 3 (count xs))\n    ((second xs) (first xs) (nth xs 2))\n    (apply f ((second xs) (first xs) (nth xs 2)) (drop 3 xs))))","user":"5ade6bafe4b0837691e92c23"},{"problem":135,"code":"(fn [& expr] (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity expr))","user":"5ee4545ee4b029a2061bbe8d"},{"problem":135,"code":"(fn [first-val & more] \n  (let [op-args (partition 2 more)] \n    (reduce \n     (fn [res [op arg]] (op res arg)) \n     first-val op-args)))","user":"5227eacee4b0186687e23a5e"},{"problem":135,"code":"(fn [& more] (loop [result more]\n               (if (= 1 (count result))\n                    (first result)\n               \t\t(let[first-operand (nth result 0)\n                    \toperator (nth result 1)\n                    \tsecond-operand (nth result 2)]\n                 \t(recur (conj (drop 3 result) (operator first-operand second-operand)))))))","user":"5148bae3e4b05514c84b7cc4"},{"problem":135,"code":"(fn [& exp] (reduce #(if (fn? %2) (partial %2 %) (% %2)) exp))","user":"53908e6be4b0b51d73faae9a"},{"code":"(fn [& args]\n  (let [calc (fn calc [acc rest]\n               (cond (empty? rest) acc\n                     :else (calc (list ((first rest) (first acc) (second rest))) (drop 2 rest))))]\n    (first (calc (list (first args)) (rest args)))))","problem":135,"user":"5142e808e4b0c172af7558c9"},{"problem":135,"code":"(fn [x & args]\n  (reduce (fn [r [op y]] (op r y)) x (partition 2 args)))","user":"54055aa9e4b0addc1aec6665"},{"problem":135,"code":"#(reduce (fn [a [f b]] (f a b)) % (partition 2 %&))","user":"52541fe6e4b0541d1855b964"},{"problem":135,"code":"(fn calc [& args]\n   (reduce (fn [a [oper b]] (oper a b))\n           (first args)\n           (partition 2 (rest args))))","user":"59e0111ae4b08badc2a0c4e4"},{"code":"(fn [x op y & xs]\n       (loop [value (op x y)\n        infix-list xs]\n\t (if (= (count infix-list) 0)\n\t   value\n\t   (recur ((first infix-list) value (second infix-list))\n\t\t  (drop 2 infix-list)))))","problem":135,"user":"4eae2f9e535d7eef30807324"},{"code":"(fn [& args]\n  (loop [o-seq (seq args)\n         o (second o-seq)\n         a (first o-seq)\n         b (nth o-seq 2)]\n    (if (= 3 (count o-seq))\n      (o a b)\n      (recur (cons (o a b) (drop 3 o-seq)) \n             (second (cons (o a b) (drop 3 o-seq))) \n             (first (cons (o a b) (drop 3 o-seq)))\n             (nth (cons (o a b) (drop 3 o-seq)) 2)))))","problem":135,"user":"4fdf2b50e4b05e33b9224f93"},{"code":"(fn infix([a] a)\n  ([a f b & args](apply infix (cons (f a b) args))))","problem":135,"user":"526a3412e4b03e8d9a4a721e"},{"problem":135,"code":"(fn [& args]\n  ((fn rec [accum coll]\n    (if (empty? coll)\n      accum\n      (let [f (first coll)\n            n (second coll)]\n         (rec (f accum n) (drop 2 coll))))) (first args) (rest args)))","user":"55058a4fe4b086ebe8a79c89"},{"problem":135,"code":"(fn infix\n  ([x f y] (f x y))\n  ([x f y & r] (apply infix (f x y) r)))","user":"554f7ef2e4b00713264bd9a1"},{"problem":135,"code":"(fn simple-calc [& args]\n  (if (= (count args) 1) (first args)\n                         (let [[x op y & col] args]\n                           (recur (cons (op x y) col)))))","user":"5a6b15e9e4b0512ff01cda32"},{"code":"(fn calc [a op b & rest]\n  (if rest\n    (apply calc (op a b) rest)\n    (op a b)))","problem":135,"user":"51269362e4b083bb8f88cf09"},{"code":"(fn calc\n  ([n] n)\n  ([n op n2 & rst] (apply calc (cons (op n n2) rst))))","problem":135,"user":"4e9a1512535dbda64a6f6b6e"},{"problem":135,"code":"(fn [& [a f b & xs]]\n  (if f \n    (recur (cons (f a b) xs))\n    a))","user":"56df254be4b0ca2494a095ea"},{"code":"#(loop [r % v %&] (if (empty? v) r (let [[op v2] v] (recur  (+ (op r v2)) (drop 2 v)))))","problem":135,"user":"52e48632e4b09f7907dd1450"},{"code":"(fn f\n  ([a] a)\n  ([a b c & m]\n   (apply f (b a c) m)))","problem":135,"user":"4ed9354f535d10e5ff6f5301"},{"problem":135,"code":"(fn [n1 & ops]\n  (->> (partition 2 ops)\n       (map (fn [[op n2]] #(op % n2)))\n       reverse\n       (apply comp)\n       (#(% n1))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":135,"code":"(fn infix [& args]\n  (reduce (fn [a b] ( (first b) a (second b ) ) ) (first args) (partition 2 (rest args))))","user":"57b99d48e4b0fbc9809a27f2"},{"code":"(fn infix [ & terms] (if (>= (count terms) 3) (apply infix (conj (drop 3 terms) (apply (nth terms 1) (list (nth terms 0) (nth terms 2))))) (first terms)))","problem":135,"user":"4fcebce4e4b03432b189f404"},{"code":"(fn calc [p1 o p2 & r]\n  (let [p (o p1 p2)]\n    (if r\n      (apply calc (cons p r))\n      p)))","problem":135,"user":"4dab218f30acd6ed15482a68"},{"problem":135,"code":"(fn [& tokens]\n  (reduce #((first %2) %1 (second %2))\n          (first tokens)\n          (map vector (take-nth 2 (rest tokens)) (take-nth 2 (drop 2 tokens)))))","user":"525cc912e4b0cb4875a45d48"},{"problem":135,"code":"(fn maf [& l]\n             (let [ct (count l)]\n               (loop [i 2 prod (nth l 0)]\n                 (if (< i ct)\n                   (recur (+ i 2) ((nth l (- i 1)) prod (nth l i)) )\n                   prod))\n               )\n             )","user":"5d974b1de4b0d3f9b434ad36"},{"problem":135,"code":"(fn ifx [a f b & x]\n   (if\n     (empty? x)\n     (f a b)\n     (apply ifx (cons (f a b) x))))","user":"55630cc1e4b0c656e3ff17e0"},{"problem":135,"code":"(fn [start & args]\n  (let [s (partition 2 args)]\n    (reduce (fn [acc new] ((first new) acc (second new)))\n            start s)))","user":"54a627bce4b09f271ff37c83"},{"code":"(fn calc\n  ([x o y] (o x y))\n  ([x o y & more] (apply calc (calc x o y) more))\n)","problem":135,"user":"5277fb07e4b03e8d9a4a7518"},{"problem":135,"code":"(fn infix \n  ([a] a)\n  ([a f b & exp] (apply infix (conj exp (f a b)))))","user":"5ee738dee4b029a2061bbea2"},{"code":"(fn infix [x & xs] \n     (let \n     [lhs x\n\t  rest (flatten xs)\n      op (first rest)\n      rhs (second rest)\n      expr (op lhs rhs)] \n     (cond \n       (= 2 (count rest) ) expr\n       :else (infix expr (drop 2 rest)))))","problem":135,"user":"53286389e4b09d4e7a9b5504"},{"code":"(fn calc \n  ([n] n)\n  ([lhs op rhs & more] (apply calc (op lhs rhs) more)))","problem":135,"user":"532347dde4b09d4e7a9b54cc"},{"problem":135,"code":"(fn [& a]\n  (reduce #(if (fn? %2)\n             (partial %2 %)\n             (% %2))\n          a))","user":"5835cb06e4b089d5ab817cea"},{"problem":135,"code":"(fn infix [& operacion]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity operacion))","user":"59e55cc8e4b08badc2a0c555"},{"problem":135,"code":"(fn [x & args]\n    (reduce (fn [r [op n]] (op r n)) x (partition 2 args)))","user":"5a9bfd57e4b0d174b936c7d0"},{"problem":135,"code":"(fn infix\n  ([a op b] (apply op (list a b)))\n  ([a op b & more] (apply infix (infix a op b) more)))","user":"540ed3a7e4b0addc1aec6722"},{"code":"(fn this\n  \t([l op r & more] (apply this (conj more (op l r))))\n\t\t([l] l)\n\t\t)","problem":135,"user":"5048bcf8e4b06e644c63f1ae"},{"problem":135,"code":"(fn [x op y & args]\n  (let [r1 (op x y)]\n    (reduce (fn [r [f z]] (f r z)) r1\n            (partition 2 args))))","user":"58949f8de4b00487982d525e"},{"problem":135,"code":"(fn [x & xs]\n  (reduce #((first %2) % (last %2)) x (partition 2 xs)))","user":"56ae214ce4b03c432f18735a"},{"problem":135,"code":"(fn infix [& more]\n  (if (= (count more) 3)\n    ((second more) (first more) (last more))\n    (let [x ((second more) (first more) (nth more 2))]\n      (apply infix (cons x (rest (rest (rest more))))))))","user":"543be8f0e4b032a45b869337"},{"code":"(fn calc [a op b & rest-of-calc] (let [res (op a b)] (if rest-of-calc (apply calc (cons res rest-of-calc)) res)))","problem":135,"user":"52e8b2fce4b09f7907dd149c"},{"problem":135,"code":"(fn [v op & r]\n  (let [x rest re (x r) f first]\n  (if (empty? re)\n    (op v (f r))\n    (recur (op v (f r)) (f re) (x re))\n  )\n    )\n)","user":"5a244240e4b0ff51aa4b32e9"},{"code":"(fn [a b c & rest]\r\n   (let [acc (b a c)]\r\n       (loop [newrest rest\r\n        newacc acc]\r\n\t (if (not (next newrest))\r\n\t   newacc\r\n\t   (recur (drop 2 newrest) ((first newrest) newacc (second newrest)))))))","problem":135,"user":"4e8768f6535dceadca469850"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [acc [op item]]\n            (op acc item))\n          (first args)\n          (partition 2 (rest args))))","user":"5829d588e4b051871117bf4a"},{"problem":135,"code":"(fn [a & xs]\n  (loop [r a xx xs]\n  \t(if (seq xx)\n       (let [[op b & xs2] xx]\n         (recur (op r b) xs2))\n       r)))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":135,"code":"#(let [liste %&]\n    ((fn [liste] \n       (loop  [rliste (nthrest liste 3) res (apply (second liste) (list (first liste) (nth liste 2))) ]\n          (if (empty? rliste) \n            res\n            (recur (nthrest rliste 2) (apply (first rliste) (list res (second rliste) ) ))\n          )\n        )\n      ) liste)\n  )","user":"556f2009e4b09a3098a52519"},{"problem":135,"code":"(fn [n & args]\n  (loop [[op nu & re] args r n]\n    (if (nil? op) r\n      (recur re (op r nu)))))","user":"59ddae03e4b01968742fed65"},{"code":"(fn [v & e]\n  (reduce #((first %2) %1 (second %2)) v (partition 2 e))\n  )","problem":135,"user":"528e64b7e4b0239c8a67aedd"},{"code":"(fn calc\n  ([x1 op x2 & args]\n    (apply calc (cons (op x1 x2) args)))\n  ([x] x))","problem":135,"user":"5018ed15e4b011a2e0bf6412"},{"problem":135,"code":"(fn [& z]\n  (loop [ops (filter #(not (number? %)) z),\n        dig (filter number? z)]\n    (if\n      (empty? (rest ops))\n      ((first ops) (first dig) (first (rest dig)))\n      (recur\n        (rest ops)\n        (cons\n           ((first ops) (first dig) (first (rest dig)))\n           (rest (rest dig))\n        )\n      )\n    )\n  )\n)","user":"53ca41dae4b00fb29b2212c8"},{"code":"(fn [& x] (let [ops (flatten (partition 1 2 (rest x)))\n                args (flatten (partition 1 2 (rest (rest x))))\n                zip (map vector ops args ) ]\n              (reduce #((first %2) % (second %2)) (first x) zip)))","problem":135,"user":"53403110e4b085b17e897da6"},{"problem":135,"code":"(fn [a operator b & args]\n   (let [calculation\n         (fn\n         [a operator b]\n         (operator a b))]\n     (if (= 0 (count args))\n       (calculation a operator b)\n       (recur (calculation a operator b) (first args) (second args) (drop 2 args)))))","user":"5bbc0ddfe4b0a20761a2361e"},{"code":"(fn [& w] (reduce (fn [a [o x]] (o a x)) (first w) (partition 2 (rest w))))","problem":135,"user":"4db016af838c48654951d9b9"},{"code":"(fn [& args] \n  (reduce \n    (fn [z1 [op z2]] (op z1 z2)) \n    (first args) \n    (partition 2 (rest args))))","problem":135,"user":"4ee528fb535d1385b2869d87"},{"code":"(fn [& expr] (reduce #((first %2) %1 (second %2)) (first expr) (partition 2 (rest expr))))","problem":135,"user":"5394162be4b0b51d73faaec5"},{"problem":135,"code":"#(loop [[x f y & tail] %&] (if-not tail (f x y) (recur (list* (f x y) tail) )))","user":"53bed4b5e4b0c98a41f5cc94"},{"code":"(fn infix [& args]\n  (reduce (fn [a [op b]]\n            (op a b)\n            \n            ) (first args) (partition 2 (rest args))))","problem":135,"user":"51da7e49e4b02ceefd947768"},{"problem":135,"code":"(fn infix\n  ([x op y]\n      (op x y))\n  ([x op y & xs]\n     (apply infix (cons (infix x op y) xs))))","user":"538243f3e4b06839e8705ed1"},{"code":"(fn [x & xs]\n        (reduce (fn [out [op i]]\n                  (op out i))\n                x\n                (partition 2 xs)))","problem":135,"user":"4db58ccb535d87e67b28fe10"},{"code":"(fn [x & col]\n  (reduce #((first %2) %1 (last %2)) x (partition 2 col)))","problem":135,"user":"5131d817e4b06942423563ca"},{"problem":135,"code":"(fn infix\n  [& args]\n  (loop [[op y & xs :as rest] (rest args)\n         total (first args)]\n    (if (empty? rest)\n      total\n      (recur xs (op total y)))))","user":"4eb47bb1535d7eef30807362"},{"problem":135,"code":"#(reduce\n  (fn [x y]\n    (if (fn? x) (x y) (partial y x)))\n  %&)","user":"5da760ebe4b000c986472c1a"},{"problem":135,"code":"(fn infix-calculator [& args]\n    (let [do-math (fn [[a b c]] (b a c))]\n      (if (> (count args) 3)\n        (apply infix-calculator (concat [(do-math args)] (drop 3 args)))\n        (do-math args))))","user":"5501a1e1e4b07d26eda61d75"},{"problem":135,"code":"(fn [& args]\n  (loop [i 0 r (first args) s (rest args)]\n    (if (empty? s)\n      r\n      (recur (inc i) ((first s) r (second s)) (drop 2 s)))))","user":"53bbae20e4b047364c044509"},{"problem":135,"code":"(fn [& args]\n  (reduce\n   (fn [m [f e]]\n     (f m e))\n   (first args)\n   (partition 2 (drop 1 args)))\n)","user":"5881d1c2e4b0f1effa3b7644"},{"problem":135,"code":"(fn [s & x] (loop [xs x sum s] (if (first xs) (recur (rest(rest xs)) ((first xs) sum (second xs))) sum)))","user":"52a3c66ce4b04e0c58e87c04"},{"code":"(fn [& exp]\n  (\n    (fn r [c]\n      (if (= (count c) 1)\n        (first c)\n        ((second c) (r (rest (rest c))) (first c))\n      )\n    )\n    (reverse exp)\n  )\n)","problem":135,"user":"4f84400de4b033992c121c2e"},{"problem":135,"code":"(fn f\n  ([acc op num & args] (apply f (op acc num) args))\n  ([acc]               acc))","user":"5dc88a38e4b02f9375f4e1db"},{"code":"(fn my-infix [v1 op v2 & more]\r\n  (loop [result (op v1 v2)\r\n\t\t\tmorep more]\r\n\t\t(if (empty? morep)\r\n\t\t\tresult\r\n\t\t\t(recur ((first morep) result (second morep)) (nthnext morep 2)))))","problem":135,"user":"4efb92ce535dced4c769f27a"},{"code":"(fn calc [left op right & rest]\n   (let [v (op left right)]\n     (if (nil? rest)\n       v\n       (apply calc (cons v rest)))\n   ))","problem":135,"user":"4f616892e4b0defedf855fbf"},{"problem":135,"code":"(fn [& args]\n  (let [acc (first args)\n        ops (partition 2 (rest args))]\n    (reduce (fn [acc [f value]] (f acc value)) acc ops)))","user":"524740e7e4b05ef8e38e635d"},{"code":"(fn f [x op y & r] (let [a (op x y)] (if (nil? r) a (apply f (cons a r)))))","problem":135,"user":"50563ae2e4b0ce54f56f0405"},{"code":"(fn calc [v1 op v2 & r]\n  (if r\n    (apply calc (op v1 v2) r)\n    (op v1 v2)))","problem":135,"user":"51d96ad0e4b02ceefd94774f"},{"problem":135,"code":"(fn [& s] (reduce #(let [[f x] %2] (f %1 x)) (first s) (partition 2 (rest s))))","user":"5e471203e4b043cd24807a2a"},{"problem":135,"code":"(fn calculate [& args]\n         (let [[arg1 op arg2 & tail] args\n               result-so-far (op arg1 arg2)]\n           (if (empty? tail)\n             result-so-far\n             (apply calculate (cons result-so-far tail)))))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn [& args]\n  (loop [acc (first args) r (next args)]\n    (let [f (first r) v (next r)]\n       (if f (recur (f acc (first v)) (next v)) acc))))","problem":135,"user":"511618b1e4b0d4f670fd2fdf"},{"problem":135,"code":"(fn infix [a b c & ops] (let [n (b a c)] (if (empty? ops) n (apply infix (cons n ops)))))","user":"594d4c57e4b07ddc2dafae87"},{"code":"(fn [& x]\n  (loop [result (first x)\n         x (rest x)]\n    (if (empty? x)\n      result\n      (recur ((first x) result (second x)) (nthrest x 2)))))","problem":135,"user":"538d464ee4b0b51d73faae69"},{"code":"(fn wis [x y z & re ]\n\t(if (nil? re)   \n\t\t(y x z )  \n\t( apply wis (cons (y x z ) re ))\t) \n\t)","problem":135,"user":"518644bce4b0da5a5be3baca"},{"code":"#(reduce (fn [x [f y]] (f x y)) (first %&) (partition 2 (rest %&)))","problem":135,"user":"52f4fae4e4b05e3f0be25f27"},{"problem":135,"code":"(fn [& xs] (reduce #((first %2) %1 (second %2)) (first xs) (partition 2 (rest xs))) )","user":"567798afe4b05957ce8c6169"},{"problem":135,"code":"(fn calc [& x]\n  (let [cnt     (count x)\n        evendat (take (int (/ (inc cnt) 2)) (iterate #(+ % 2) 0))\n        odddat  (take (int (/ cnt 2)) (iterate #(+ % 2) 1))\n        oprdat  (map #(nth x %) evendat)\n        oprc    (map #(nth x %) odddat)]\n       (loop [result  (first oprdat) \n              roprdat (next  oprdat)\n              roptc   oprc]\n         (if (empty? roprdat)\n           result\n           (recur \n             ((first roptc) result (first roprdat))\n             (next roprdat) \n             (next roptc))))))","user":"5243e37ae4b076204b44fae3"},{"problem":135,"code":"(fn infix [& s]\n  (if (= (count s) 1)\n    (first s)\n  (loop [[x op y & remaining] s]\n      (let [z (op x y)]\n        (if (empty? remaining)\n          z\n          (recur (cons z remaining)))))))","user":"58a0fc33e4b02bd94d917ea3"},{"code":"(fn [& args] (reduce #((first %2) %1 (second %2)) (first args) (partition 2 (rest args))))","problem":135,"user":"4e79ff2a535db169f9c796a9"},{"problem":135,"code":"(fn infix-calc\n  [& expr]\n  ((fn step [init [a f b & more]]\n     (if-not f\n       init\n       (let [r (f a b)]\n         (recur r (cons r more)))))\n   0 expr))","user":"534056fce4b085b17e897dac"},{"code":"(fn[& args](let [pargs (partition 2 (rest args)) initarg (first args)](loop [n 0 result initarg](if-not (< n (count pargs)) result (let [op (nth (nth pargs n) 0) operand (nth (nth pargs n) 1)] (recur (inc n) (op result operand)))))))","problem":135,"user":"5138d08be4b0a5db03d727db"},{"problem":135,"code":"(fn [fst & args]\n  (loop [result fst\n         ops args]\n    (if (empty? ops)\n      result\n      (let [op (first ops)\n          number (second ops)]\n      \t(recur (op result number) (drop 2 ops))))))","user":"5486e317e4b0e286459a11c0"},{"code":"(fn [a & b] (reduce (fn [acc [f x]] (f acc x)) a (partition 2 b)))","problem":135,"user":"5244fa73e4b0d8acf9ed6acb"},{"problem":135,"code":";(fn [i & s]\n ; (loop [t s\n  ;       u i]\n   ; (if (empty? t)\n    ;  u\n     ; (recur (rest (rest t)) ((first t) u (first (rest t)))))))\n\n(fn [i & s] (reduce #((first %2) %1 (second %2)) i (partition 2 s)))\n\n; (/ (- (+ 38 48) 2) 2)","user":"5e3e23d9e4b01d43a70e8e20"},{"code":"(fn inf[& args]\n  (\n     loop [[a1 op a2 & e] args]\n     (if (nil? e)\n        (op a1 a2)\n        (recur (concat (vector (op a1 a2)) e))\n     )\n  )\n  )","problem":135,"user":"513f53c6e4b051389b345b40"},{"problem":135,"code":"(fn infix [a op b & rest] \n  (let [l (op a b)] (if (nil? rest) l (apply infix l rest))))","user":"4fc4eb1ee4b081705acca354"},{"code":"(fn calc\n  ([x] x)\n  ([x o y & res] (apply calc (cons (o x y) res))))","problem":135,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":135,"code":"(fn [& c] (reduce (fn [t [f a]] (f t a)) (first c) (partition 2 (rest c))))","user":"56102f50e4b05f002753df6b"},{"problem":135,"code":";;(fn [x & xs] \n;;  (loop [acc x xs xs]\n;;    (if (empty? xs)\n;;      acc\n;;      (let [op (first xs)\n;;            arg (first (rest xs))]\n;;        (recur (op acc arg) (drop 2 xs))))))\n;;\n(fn [x & args] (reduce (fn [acc [op arg]] (op acc arg)) x (partition 2 args)))","user":"595fd721e4b066ee0a44b06e"},{"problem":135,"code":"(fn [& args]\n  (loop [rest-args (rest args)\n         ret (first args)]\n    (if (empty? rest-args)\n      ret\n      (recur (nthrest rest-args 2) ((first rest-args) ret (second rest-args))))))","user":"53fe1b42e4b0de5c418485f1"},{"problem":135,"code":"(fn [& args]\n  (->>\n      (map vector\n           (take-nth 2 (rest args))\n           (rest (take-nth 2 args))) ;; ))\n      (reduce (fn [acc x] ((first x) acc (second x)))\n              (first args))))","user":"5d672bd7e4b0db5d338d15f1"},{"problem":135,"code":"(fn [init-val & args]\n    (loop [result init-val\n           to-calc args]\n      (if (empty? to-calc)\n        result\n        (recur ((first to-calc) result (second to-calc))\n               (drop 2 to-calc)))))","user":"5b60e88be4b0c6492753e70b"},{"code":"(fn [& args]\n  (loop [[first-number operation second-number & remaining] args]\n    (let [result (operation first-number second-number)]\n      (if (empty? remaining)\n        result\n        (recur (conj remaining result))))))","problem":135,"user":"4f5599dfe4b0a7574ea71806"},{"code":"(fn calc [left op right & rest] (if rest (apply calc (apply op (list left right)) rest) (apply op (list left right)) ))","problem":135,"user":"4f98b69ae4b0dcca54ed6cf4"},{"problem":135,"code":"(fn algo \n  [& lst]\n  (loop [\n         res (first lst)\n         expre (rest lst)\n         ]\n    (if (empty? expre)\n      res\n      (cond\n        (= + (first expre))(recur (+ res (first(rest expre))) (drop 2 expre))\n        (= - (first expre)) (recur (- res (first(rest expre))) (drop 2 expre))\n        (= * (first expre)) (recur (* res (first(rest expre))) (drop 2 expre))\n        (= / (first expre)) (recur (/ res (first(rest expre))) (drop 2 expre))\n        :else (print expre)\n        )\n      )\n    )\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":135,"code":"(fn [& args]\n  ((fn [[arg1 f arg2 & remaining]]\n    (let [next-arg1 (f arg1 arg2)]\n      (if (empty? remaining)\n        next-arg1\n        (recur (cons next-arg1 remaining)))))\n   args))","user":"55d6a2ebe4b0e31453f64a9a"},{"problem":135,"code":"(fn f1 [op1 fnn op2 & rest]\n    (if (empty? rest)\n      (fnn op1 op2)\n      (apply f1 (cons (fnn op1 op2) rest))))","user":"5920c191e4b09b4ee5954c61"},{"problem":135,"code":"(fn [n & r]\n  (reduce (fn [p [f q]] (f p q)) n (partition 2 r)))","user":"53fa3524e4b0de5c41848578"},{"problem":135,"code":"(fn [init & args]\n (loop [acc init\n        rem args]\n  (let [op (first rem)\n        arg (second rem)]\n   (if op\n    (recur (op acc arg) (next (next rem)))\n    acc))))","user":"54580586e4b01be26fd74616"},{"code":"(fn [& c]\n  (reduce\n    (fn [a [op b]] (op a b))\n    (first c)\n    (partition 2 (rest c))))","problem":135,"user":"4f0b2028535d0136e6c222ff"},{"problem":135,"code":"(fn my-135\n  [num & rest]\n  (reduce \n       #((first %2) %1 (last %2)) \n       num \n       (partition 2 rest)))","user":"56c3aca0e4b05cc29241ee90"},{"code":"(fn joe [ & args]\n  (if (== 1 (count args)) (first args)\n    (apply joe\n      (cons\n        ((second args) (first args) (nth args 2))\n        (drop 3 args)))))","problem":135,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn [& e]\n  (loop [s (rest e) r (first e)]\n    (if (empty? s) r\n      (recur (drop 2 s) ((first s) r (second s))))))","problem":135,"user":"523bc0e6e4b07becd5be21f9"},{"problem":135,"code":"(fn tst [& vars] (loop [[a b c & others] vars] (if (empty? others) (b a c) (recur (cons (b a c) others)))) )","user":"5b284375e4b063e2438bcc53"},{"code":"(fn do-math \n  [arg1 operator arg2 & more-args]\n  \n  (let [result (operator arg1 arg2)]\n  (if more-args \n    (apply do-math (cons result more-args))\n    result))\n  )","problem":135,"user":"523e4e86e4b09833704079a9"},{"code":"(fn infix-calc\n  ([first] first)\n  ([left op & more]\n     (apply infix-calc (op left (first more)) (rest more))))","problem":135,"user":"4e0d5a5a535d04ed9115e7b5"},{"code":"(fn [x & args]\n  (reduce (fn [s [op v]] (op s v)) x (partition 2 args)))","problem":135,"user":"4dbe8729535d020aff1edf62"},{"problem":135,"code":"(fn infix-calculator [& args]\n  (let [[operand-1 operator operand-2] (take 3 args)\n        result (operator operand-1 operand-2)]\n    (if (= (count args) 3)\n      result\n      (recur (cons result (drop 3 args))))))","user":"58ed713de4b056aecfd47d84"},{"code":"(fn [v & r]\n  (reduce\n   #((first %2) % (last %2))\n   v\n   (partition 2 r)))","problem":135,"user":"4ec53f8c535d6d7199dd368b"},{"problem":135,"code":"(fn [& x] (loop [a (first x) b (second x) c (nth x 2) remainding (drop 3 x)]\n            (let [result (b a c)]\n              (if (empty? remainding)\n                result\n                (recur \n                 result\n                 (first remainding)\n                 (second remainding)\n                 (drop 2 remainding)\n                 )))))","user":"571346c0e4b07c98581c3a9b"},{"code":"(fn f[l op r & rst]\n  (let [t (op l r)]\n    (if (empty? rst) t (apply f (cons t rst)))))","problem":135,"user":"52b0323ee4b0c58976d9acc6"},{"problem":135,"code":"(fn calc [x op y & args]\n  (if args\n    (apply calc (op x y) args)\n    (op x y)))","user":"53eb8ceae4b036ad0777e4fb"},{"code":"(fn [& [a op b & xs]]\n  (let [t (op a b)]\n    (if xs \n      (recur (into [t] xs)) \n        t)))","problem":135,"user":"4eb955da535dfed6da9c6d50"},{"code":"(fn math\n  ([x] x)\n  ([x op y & rest]\n    (apply math (op x y) rest)))","problem":135,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":135,"code":"(fn [& args] (reduce\n  (fn [acc [f x]] (f acc x))\n  (first args)\n  (->> args rest (partition 2))))","user":"5a4993c0e4b05d388ecb6b71"},{"code":"(fn [& e] (reduce #((first %2) %1 (second %2)) (cons (first e) (partition 2 (rest e)))))","problem":135,"user":"4efd8b67535de96065cf5085"},{"problem":135,"code":"(fn infix [& args]\n  (let [f #(%2 %1 %3)]\n \t (loop [ops (seq args)]\n    \t(if (= 3 (count ops))\n      \t\t(apply f ops)\n      \t\t(recur (conj (drop 3 ops) (apply f (take 3 ops))))))))","user":"51441ce7e4b0b4fb4ace5f41"},{"problem":135,"code":"(fn calc\n  ([v] v)\n  ([v1 o v2 & vs]\n     (apply calc (cons (o v1 v2) vs))))","user":"553dd883e4b0a04f792994e6"},{"code":"(fn infix ([a b c & args] (apply infix (b a c) args)) ([a] a))","problem":135,"user":"528a791ae4b0239c8a67ae77"},{"problem":135,"code":"(fn [& exp]\n  (let [[a op b & exp] exp]\n    (if exp\n      (recur (cons (op a b) exp))\n      (op a b))))","user":"5712854ce4b07c98581c3a89"},{"problem":135,"code":"(fn [& items]\n  (let [\n    get_odd (fn [y] (remove nil? (map (fn [key item] (if (odd? key) item)) (range (count y)) y)))   \n    get_even (fn [y] (remove nil? (map (fn [key item] (if (even? key) item)) (range (count y)) y)))   \n  ]\n    (reduce\n      (fn [sum pair] ((get pair 0) sum (get pair 1)))\n      0\n      (map (fn [sign number] [sign number]) (cons + (get_odd items)) (get_even items))\n    )\n  )\n)","user":"56152a26e4b05f002753dfc1"},{"problem":135,"code":"(fn [acc & [oper val2 & next-values :as values]]\n    (if-not values acc\n      (recur (oper acc val2) next-values)))","user":"509e8da7e4b08df8156e9e2f"},{"problem":135,"code":"(fn infix [arg1 op arg2 & more]\n  (let [res (op arg1 arg2)]\n    (if more\n      (apply infix res more)\n      res)))","user":"51b91b08e4b0e871ca4958f8"},{"problem":135,"code":"(fn [first & next]\n  (reduce (fn [acc [op arg]]\n            (op acc arg))\n          first\n          (partition 2 next)))","user":"543a8256e4b032a45b869327"},{"problem":135,"code":"(fn [a & more]\n  (reduce (fn [a [f b]] (f a b))\n          a (partition 2 more)))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":135,"code":"(fn g \n  ([x o y](o x y))\n  ([x o y & r](apply g (o x y) r)))","user":"567c63f6e4b05957ce8c61bb"},{"code":"(fn[& x](reduce #((first %2) %1 (second %2) )  (first(seq x)) (partition 2 (rest (seq x)))))","problem":135,"user":"52bbd09ee4b07a9af57922ee"},{"code":"(fn [& ops]\n  (reduce (fn [r [op arg]]\n      (op r arg))\n\t  (first ops)\n\t  (partition 2 (rest ops))))","problem":135,"user":"4e513ecf535dc968683fc4f6"},{"problem":135,"code":"(fn [& els] (reduce (fn [a b] (if (fn? a)\n                                (a b)\n                                #(b a %)))\n                    (fn [c] (+ 0 c))\n                    els))","user":"565233f2e4b0f9d632dd8461"},{"code":"(fn [& statement]\n     (letfn [(calc [or1 [op or2 & other]]\n               (if (empty? other)\n                 (op or1 or2)\n                 (recur (op or1 or2)\n                        other)))]\n       (calc (first statement)\n             (rest statement))))","problem":135,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":135,"code":"(fn infix-calc\n  [& args]\n  (let [[a op b & more] args]\n    (if op\n      (recur (cons (op a b) more))\n      a)))","user":"54c3747de4b045293a27f60e"},{"code":"(fn infix [x op y & rst]\n  (if (empty? rst)\n    (op x y)\n    (apply infix (op x y) rst)))","problem":135,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"problem":135,"code":"(fn [& cl] (let [cf (filter #(fn? %) cl), cn (filter #(number? %) cl), v (first cn)] (loop [f cf, c (drop 1 cn), r v]\n           (if (empty? c) (do (println (str \"result: \" r)) r)\n             (recur (drop 1 f) (drop 1 c) ((first f) r (first c)))) \n   )))","user":"55adf4d7e4b03311e7b732af"},{"problem":135,"code":"(fn mycal\n\t ([x op y]\n\t   (op x y))\n\t ([x op y & more]\n\t   (apply mycal (cons (mycal x op y) more))))","user":"541096bde4b01498b1a719b2"},{"code":"(fn infix-calc [& args]\n  (if (= (count args) 1) (first args) ;;if it has only one operand then that's the answer.\n      (let [[x op y & col] args]\n        (recur (cons (op x y) col)))))","problem":135,"user":"518ad8fce4b06da86c1973c1"},{"problem":135,"code":"(fn [& args]\n  (loop [pairs (partition 2 (rest args))\n         result (first args)]\n    (if (empty? pairs)\n      result\n      (let [[f n] (first pairs)]\n        (recur (rest pairs) (f result n))))))","user":"52dc7344e4b09f7907dd13cf"},{"problem":135,"code":"(fn c [x op y & tail]\n  (if (seq tail) \n    (apply c (op x y) tail)\n    (op x y)))","user":"55da18d5e4b0e31453f64ad1"},{"code":"(fn [& args] (reduce (fn [a b] (if (fn? a) (a b) (partial b a))) args))","problem":135,"user":"51307b84e4b08c712d3fae39"},{"code":"(fn c [v o & r]\n    (loop [v v o o r r]\n      (if (fn? o)\n        (recur (apply o [v (first r)]) (second r) (drop 2 r))\n        v)))","problem":135,"user":"4e8df08f535d65386fec213e"},{"problem":135,"code":"(fn [x & m]\n  (reduce #((first %2) %1 (second %2))\n          x (partition 2 m)))","user":"5b4b8cd6e4b02d533a91bc9f"},{"problem":135,"code":"(fn [& n] (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) n))","user":"58ad4349e4b0ebc645576c9d"},{"problem":135,"code":"(fn [a & args]\n\t(reduce\n\t #(if (number? %2)\n\t    (%1 %2)\n\t    (partial %2 %1))\n\t a\n\t args))","user":"53da3fcde4b0e771c3025497"},{"code":"(fn [& args]\n  (let [lst (flatten args)]\n    (if (< (count lst) 3) (first lst)\n        (recur (cons (apply (second lst) [(first lst) (nth lst 2)]) (nthrest lst 3))))))","problem":135,"user":"4f2d5f5de4b0d6649770a05a"},{"code":"(fn infixcal [left op right & expr]\n  (let [r (op left right)]\n    (if (nil? expr)\n      r\n      (apply infixcal r expr))))","problem":135,"user":"512eb723e4b0b740abc5982b"},{"problem":135,"code":"(fn f [& xs]\n  (loop [numbers (take-nth 2 xs)\n         ops (cons + (take-nth 2 (rest xs)))\n         result 0]\n      (if (not (seq numbers))\n        result\n        (let [op (first ops)\n              n (first numbers)]\n          (recur (rest numbers) (rest ops) (op result n))))))","user":"57262710e4b0c5bde472c120"},{"code":"(fn r [& re]\n  (loop [start (first re) vect (rest re)]\n    (if (empty? vect)\n        start\n        (recur ((first vect) start (second vect)) (drop 2 vect))\n    )\n  )\n)","problem":135,"user":"4fcf5292e4b03432b189f40e"},{"code":"(fn [& xs]\n  \t(loop [[x1 op x2 & xs] xs]\n\t\t   (let [r (op x1 x2)]\n\t\t\t\t(if (empty? xs) r\n\t\t\t\t\t(recur (cons r xs))))))","problem":135,"user":"4ee67d74535d93acb0a66861"},{"code":"(fn [& tokens] (loop [res (first tokens)\n                       ops (filter fn? tokens)\n                       nbs (rest (remove fn? tokens))\n                       ]\n                  (cond \n                   (empty? ops) res     \n                   :else (recur \n                          ((first ops) res (first nbs))\n                          (rest ops)\n                          (rest nbs)))))","problem":135,"user":"5154fa3fe4b0179c5115f4e6"},{"code":"(fn [init & expr]\n  (reduce (fn [ret [op x]] (op ret x)) init (partition 2 expr)))","problem":135,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":135,"code":"(fn [& xs]\n   (loop [variables xs]\n     (let [x1 (nth variables 0)\n           f (nth variables 1)\n           x2 (nth variables 2)\n           rs (f x1 x2)]\n       (if (<= (count variables) 3)\n         rs\n         (recur (concat [rs] (nthrest variables 3)))))))","user":"58ed2e21e4b056aecfd47d7a"},{"problem":135,"code":"(fn [& args]\n   (:total (reduce (fn [m [n f]]\n                     (assoc m :total ((:fn m) (:total m) n)\n                              :fn f))\n                   {:total 0\n                    :fn    +} (partition-all 2 2 args)))\n   )","user":"5ebc7c13e4b00a66d4a95267"},{"problem":135,"code":"#(reduce \n   (fn [x [y z]] (y x z))\n   % (partition 2 %&))","user":"5e5096c6e4b027a2e10ac0c6"},{"problem":135,"code":"(fn [a & rs]\n           (loop [start a rest rs]\n             (println start rest)\n             (if (empty? rest)\n               start\n               (recur ((first rest) start (second rest)) (nthrest rest 2)))))","user":"56b1ab17e4b0982f16b37df1"},{"problem":135,"code":"(fn f [& args]\n        (if (= 1 (count args))\n          (first args)\n          (apply f (cons ((second args) (first args) (first (drop 2 args))) (drop 3 args)))))","user":"5cc6b4bfe4b0ccb061962827"},{"code":"(fn [seed & args]\n  (reduce (fn [l [op r]] (op l r))\n          seed\n          (partition 2 args)))","problem":135,"user":"502873a8e4b01614d1633ff8"},{"code":"(fn [& x]\n  (loop [s (rest x)\n         expr (first x)]\n    (if (empty? s)\n      expr\n      (recur (rest (rest s)) ((first s) expr (second s))))))","problem":135,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":135,"code":"(fn\n  [& args]\n  (reduce (fn [a [op b]] (op a b))\n          (first args)\n          (partition 2 (rest args))))","user":"55842bd7e4b05c286339e11c"},{"code":"(fn [& xs]\n  (loop [xs xs\n         res 0]\n    (if-not (seq xs)\n      res\n      (if (number? (first xs))\n        (recur (rest xs) (first xs))\n        (recur (drop 2 xs) ((first xs) res (second xs)))))))","problem":135,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":135,"code":"(fn [& args]\n  (loop [ans ((second args) (first args) (nth args 2))\n         index 3]\n    (if (> (inc index) (count args))\n      ans\n      (recur ((nth args index) ans (nth args (inc index))) (+ index 2))\n      )\n    )\n  )","user":"5a984657e4b0d174b936c78a"},{"code":"(fn [& args]\n  (let [[res] (reduce (fn [[res op :as acc] arg] \n                        (cond \n                          (nil? res) [arg]\n                          (nil? op)  [res arg]\n                          :else      [(op res arg)]))\n                      []\n                      args)]\n    res))","problem":135,"user":"5245fbbbe4b09dbe66b56183"},{"code":"(fn [& a] (loop [coll a]\r\n    (if (= (.size coll) 1) (first coll)\r\n      (recur (conj (drop 3 coll) (#((nth % 1) (nth % 0) (nth % 2)) (take 3 coll)))))))","problem":135,"user":"4f03822f535dcb61093f6b03"},{"problem":135,"code":"(fn [x & ops] \n  (reduce #((first %2) %1 (second %2)) \n          x\n          (partition 2 ops)))","user":"5da8fa72e4b000c986472c2d"},{"problem":135,"code":"(fn [val & args]\n  (let [exprs (partition 2 args)]\n    (reduce (fn [res [op par]] (op res par)) val exprs)))","user":"5267c74be4b03e8d9a4a7183"},{"code":"(fn [& more] (reduce #((first %2) % (second %2)) (first more) (partition 2 (rest more))))","problem":135,"user":"51a54fb4e4b0def3c5c586a3"},{"code":"(fn [& s] (if (and (seq s) (> (count s) 1)) \n            (recur (conj (drop 3 s) ((second s) (first s) (nth s 2)))) \n            (first s)))","problem":135,"user":"52df232fe4b09f7907dd13fc"},{"problem":135,"code":"(fn mth [& args] (let [a (first args) f (nth args 1) b (nth args 2)]\n                     (if (> (count args) 3)\n                       (apply mth (cons (f a b) (nthrest args 3)))\n                       (f a b))))","user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":135,"code":"(fn [ & xs ]\n  (reduce (fn [total [operator operand]] (operator total operand)) (first xs) (partition 2 (next xs))))","user":"525b4e8de4b0cb4875a45d0f"},{"code":"(fn f[x0 & y0]\n   (loop [x x0 y y0]\n     (if (empty? y)\n       x\n       (recur ((first y) x (second y)) (rest (rest y))))))","problem":135,"user":"4f40f055e4b0e243712b1fc2"},{"problem":135,"code":"(fn [init & stuff] (reduce (fn [res [f x]] (f res x)) init (partition 2 stuff)))","user":"5b7d03a0e4b047b03b20373d"},{"problem":135,"code":";(fn infix [& args]\n;  (let [x (first args)\n;        op (nth args 1)\n;        y (nth args 2)\n;        r (drop 3 args)]\n;    (if (empty? r)\n;      (op x y)\n;      (apply infix (cons (op x y) r)))))\n\n(fn infix [& args]\n  (reduce (fn [a [op b]] (op a b))\n          (first args)\n          (partition 2 (rest args))))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"code":"(fn [& a]\n  (loop [acc (first a) c (rest a)]\n    (if-let [[op n & r] (seq c)]\n       (recur (op acc n) r)\n       acc)))","problem":135,"user":"4eeaf88f535d93acb0a668a3"},{"problem":135,"code":"(fn f [& args]\n  (case (count args)\n    0 nil\n    1 (first args)\n    2 (throw (Exception. \"dunno what to do\"))\n    (let [[a op b & more] args\n          _ (println :a a :op op :b b :more more)\n          c (op a b)]\n      (if (empty? more)\n        c\n        (apply f c more)))))","user":"512e31e9e4b0b740abc59823"},{"problem":135,"code":"(fn calc\n  ([x op y] (op x y))\n  ([x op y & args]\n   (let [z (calc x op y)]\n     (apply calc (cons z args)))))","user":"5b073c34e4b0cc2b61a3bda4"},{"problem":135,"code":"(fn [& xs] \n  (let [{nums true funcs false}\n        (group-by #(= (class %) Long) xs)\n        acc (atom (first nums))\n        nums (rest nums) ]\n    \n  (doall  (for [i (range (count funcs))]  \n        \n        (swap! acc\n          #((nth funcs i) % (nth nums i))\n        )\n      \n      ))\n    \n    @acc\n\n  )\n)","user":"54e51c7be4b024c67c0cf7f7"},{"problem":135,"code":"(fn infix\n  ([n] n)\n  ([a f b] (f a b))\n  ([a f b & args]\n   (apply infix (infix a f b) (first args) (rest args))))","user":"57235dc4e4b0c5bde472c0e2"},{"code":"(fn infix\n  ( [n1 op n2] (op n1 n2) )\n  ( [n1 op n2 & args] (apply infix (cons (op n1 n2) args))))","problem":135,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"#(if (= (count %&) 1)\n     (first %&)\n     (let [[x oper y & coll] %&]\n       (recur (cons (oper x y) coll))))","problem":135,"user":"52e0e646e4b09f7907dd1416"},{"problem":135,"code":"(fn cal\n  ([x] x)\n  ([x1 op x2 & xs]\n   (apply cal (cons (op x1 x2) xs))))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":135,"code":"(fn infix [& params]\n  (let [[acc opp arg & rest] params]\n    (if (nil? rest)\n      (opp acc arg)\n      (apply infix (opp acc arg) rest))))","user":"56069006e4b08b23635d3174"},{"code":"(fn [& expr]\n  (reduce\n   #(if (clojure.core/integer? %)\n      (partial %2 %)\n      (% %2))\n  expr))","problem":135,"user":"51b41150e4b0f094dd986fac"},{"code":"(fn calc ([a] a) ([a op b & l] (apply calc (cons (op a b) l))))","problem":135,"user":"5034b0e1e4b062bc5d7ae167"},{"code":"(fn infix [& xs]\n  (let [nums (take-nth 2 xs)\n        ops (take-nth 2 (rest xs))]\n    (loop [n_ (rest nums) o_ ops acc (first nums)]\n      (cond\n        (empty? n_) acc\n        :else (recur (rest n_)\n                     (rest o_)\n                     ((first o_) acc (first n_)))))))","problem":135,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":135,"code":"(fn self [a b c & others]\n  (if (empty? others)\n    (b a c)\n    (apply self (b a c) others)))","user":"52ce5056e4b07d0d72b2738f"},{"code":"(fn [& seq]\n  (reduce (fn [h v] ((first v) h (second v)))\n    (first seq)\n    (partition 2 (rest seq))))","problem":135,"user":"4e7f8f85535db966e863cc44"},{"problem":135,"code":"(fn infix [& c]\n  (if (< (count c) 3)\n    (first c)\n    (apply infix (concat [((second c) (first c) (nth c 2))] (drop 3 c)))))","user":"54dbcbbde4b024c67c0cf774"},{"code":"(fn [x y & more]\n  (loop [ temp (partial y x)\n          more more]\n    (if (= 1 (count more))\n      (temp (first more))\n      (recur (partial (second more) (temp (first more))) \n             (drop 2 more)))))","problem":135,"user":"4f49c002e4b0d56e7bb92bfd"},{"problem":135,"code":"(fn f ([a] a) ([a op b & r] (apply f (cons (op a b) r))))","user":"576df252e4b0979f8965156f"},{"problem":135,"code":"(fn [& arg] \n  (first (reduce \n   (fn [acc cur] \n     (do (println acc cur)) \n     (if (number? cur)\n       (list ((first acc) (second acc) cur))\n       (conj acc cur)\n       )) (list (first arg)) (rest arg))))","user":"555883c5e4b0deb715856e2d"},{"code":"(fn [& args]\n    (let [[expr coll] (split-at 3 args)\n          [a f b] expr\n          result (f a b)]\n      (if (empty? coll)\n        result\n        (recur (conj coll result)))))","problem":135,"user":"5328febee4b09d4e7a9b550d"},{"problem":135,"code":"(fn __ [v1 o v2 & rest]\n  (println v1 o v2 rest)\n  (if (seq? rest)\n    (apply __ (o v1 v2) rest)\n    (o v1 v2)))","user":"54ef4a1ee4b024c67c0cf883"},{"problem":135,"code":"(fn [& vs]\n            {:pre [(odd? (count vs))\n                   (every? fn?\n                           (->> (map-indexed vector vs)\n                                (filter (fn [[i _]] (odd? i)))\n                                (map second)))\n                   (every? number?\n                           (->> (map-indexed vector vs)\n                                (filter (fn [[i _]] (even? i)))\n                                (map second)))]}\n            (reduce (fn [acc [op x]]\n                      (op acc x))\n                    (first vs)\n                    (->> (rest vs) (partition 2))))","user":"53684a2fe4b0243289761e8c"},{"code":"(fn [& args] (reduce (fn [a [f itm]] (f a itm)) (first args) (partition 2 (rest args))))","problem":135,"user":"521e8227e4b0dd19981ad082"},{"problem":135,"code":"(fn math-it [left operator right & rest]\n    (if rest\n        (apply math-it (operator left right) (first rest) (second rest) (drop 2 rest))\n        (operator left right)))","user":"54fdaeace4b07d26eda61d39"},{"problem":135,"code":"(fn infix [a op b & c] (let [e (op a b)]\n                         (if c (apply infix (cons e c)) e)))","user":"59419bdfe4b060784b3b78f7"},{"code":"(fn [& args] (reduce (fn [r [f a]] (f r a)) (first args) (partition 2 (rest args))))","problem":135,"user":"519b7d76e4b02a926d9a436e"},{"problem":135,"code":"(fn [& args]\n   (let [fns (cons identity (filter fn? args))\n         nums (filter number? args)]\n     (loop [r nil\n            n (first nums)\n            f (first fns)\n            nums (rest nums)\n            fns (rest fns)]\n       (if-not (nil? f)\n         (let [r (if (nil? r) (f n) (f r n))]\n             (recur r (first nums) (first fns) (rest nums) (rest fns)))\n         r))))","user":"511688d5e4b0b3e208dba05a"},{"problem":135,"code":"(fn infix-calc\n  ([a] a)\n  ([a op b & args] (apply (partial infix-calc (op a b))\targs)))","user":"530bf87ee4b02e82168697d5"},{"problem":135,"code":"(fn infix [& args]\n         (let [prefix (if (not (vector? (first args))) (into [] args) (first args))\n               value ((second prefix) (first prefix) (nth prefix 2))\n               prefix (drop 3 prefix)]\n           (if (empty? prefix)\n             value\n             (infix (into [] (conj prefix value))))))","user":"57b19fa1e4b0fbc9809a2754"},{"problem":135,"code":"(fn[& args]\n  (loop[[op n & r] (rest args) res (first args)]\n   (if (and op n)\n     (recur r (op res n))\n     res)))","user":"57b3efb1e4b0fbc9809a278a"},{"problem":135,"code":"(fn infix-calc\n  [h & tl]\n  (loop [acc h tl tl]\n    (if (seq tl)\n     (let [[f r] (take 2 tl)]\n       (recur (f acc r) (drop 2 tl)))\n     acc)))","user":"5369d072e4b0243289761ea1"},{"problem":135,"code":"(fn\n    [a f b & rs]\n    (println rs)\n    (if (empty? rs)\n      (f a b)\n      (recur (f a b) (first rs) (second rs) (drop 2 rs))))","user":"5ad002f2e4b0ea6055cfab87"},{"problem":135,"code":"(fn [a & more]\n  (loop [src more, result a]\n    (if (empty? src)\n      result\n      (recur (rest (rest src))\n             ((first src) result (second src))))))","user":"56c55fbce4b05cc29241eea5"},{"problem":135,"code":"(fn calc [& expr]\n   (reduce (fn [x [f y]] (f x y)) (first expr) (partition 2 (rest expr))))","user":"564ecc9ee4b0284900eef6a1"},{"problem":135,"code":"(fn r ([x op y & z]\n         (if (nil? z)\n           (op x y)\n           (apply r (op x y) (first z) (rest z)))))","user":"4e837808535db62dc21a62d9"},{"problem":135,"code":"(fn f [a b c & r] (if (empty? r)(b a c)(apply f (b a c) r)))","user":"4f1052b9535d64f603146418"},{"code":"(fn infix\n  ([n] n)\n  ([a op b] (op a b))\n  ([a op b & r] (apply infix (cons (op a b) r)))\n)","problem":135,"user":"4f725201e4b07046d9f4f02f"},{"problem":135,"code":"(fn inlist \n  [& args]\n  (let [inlist-inner \n        (fn inlist-inner\n            ([a1] a1)\n            ([a1 op & more] (op (apply inlist-inner more) a1)))]\n    (apply inlist-inner (reverse args))))","user":"590b055ae4b047aa04b199c9"},{"code":"(fn [& [x op y & rest]]\n   (if op (recur (cons (op x y) rest)) x))","problem":135,"user":"4ea1b9e4535d7eef308072b8"},{"problem":135,"code":"(fn f [a o b & c] \n  (if c\n    (apply f (o a b) c)\n    (o a b)\n    )\n  )","user":"56ec0af1e4b04a395b9a0430"},{"problem":135,"code":"(fn [head & tail]  \n  (loop [ acc \thead \n          tail  tail]\n\t(if-let [op (first tail)]\n      \t(recur (op acc (second tail)) (drop 2 tail))\n      \tacc )))","user":"564127a9e4b08d4f616f5ef3"},{"problem":135,"code":"(fn infix [& args]\n  (when (< (count args) 3)\n    (throw ( RuntimeException.)))\n  (if (= 3 (count args))\n    (let [[a op b] args]\n      (op a b))\n    (let [[a op b & rest] args]\n      (apply infix (conj rest (op a b))))))","user":"53a511aae4b0b62ce3005735"},{"code":"(fn [& s]\n  (reduce #((first %2) % (second %2)) (first s)\n    (partition 2 (rest s))))","problem":135,"user":"4f956072e4b0dcca54ed6ccf"},{"problem":135,"code":"(fn solution [& args]\n  (loop [[operand1 operator operand2 & overs] args\n         result 0]\n    (if (and operand1 operator operand2)\n      (let [sum (operator operand1 operand2)]\n        (recur (cons sum overs) sum))\n      result)))","user":"5e2ef900e4b05b4b015161fc"},{"code":"(fn [f & r]\n  (reduce (fn [l [o r]]\n            (o l r))\n            f\n            (partition 2 r)))","problem":135,"user":"50436470e4b034ff00315d23"},{"code":"(fn f\n    ([x] x)\n    ([x y z & r]\n       (let [n (apply y [x z])\n             d (cons n r)]\n         (apply f d))))","problem":135,"user":"506c0a02e4b0eda3100c090d"},{"code":"(fn mycal [& a]\n  (reduce #((first %2) %1 (second %2)) (first a) (vec (partition 2 (rest a))))\n  )","problem":135,"user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn [h & t] (reduce (fn [a [o b]] (o a b)) h (partition 2 t)))","problem":135,"user":"4e96557d535dbda64a6f6b43"},{"problem":135,"code":"(fn infix-math [& remain]\n    (loop [col (rest remain)\n           total (first remain)]\n      (if (empty? col)\n          total\n          (recur (rest (rest col))\n           \t\t ((first col) total (second col))))))","user":"56f57481e4b046a417f92072"},{"code":"(fn [& args]\n  (let [parts (partition 2 (rest args))\n        r (fn [acc [f v]]\n            (f acc v))]\n    (reduce r (first args) parts)))","problem":135,"user":"4fd11132e4b04c3a95aa0409"},{"problem":135,"code":"(fn [a & args]\n  (let [s (partition 2 args)]\n    (reduce (fn [res new] ((first new) res (second new))) a s)))","user":"58b989dbe4b0888cdc949ccd"},{"code":"(fn [& args]\n  (reduce (fn [a b] \n    ((first b) a (last b))\n    )\n    (first args)\n    (partition 2 (rest args))\n  )\n)","problem":135,"user":"4f8b56dae4b02e764a0a517e"},{"code":"(fn [x & reszta] (loop [t x r reszta] (if (empty? r) t \r\n(recur ((first r) t (second r)) (drop 2 r)))))","problem":135,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"(fn [& args]\n  (let [[f o s & r] args]\n    (loop [v (o f s)\n           [op p & rm] r]\n      (if (nil? op)\n        v\n      (recur (op v p) rm)))))","problem":135,"user":"4e68b46c535d8ccf87e9fe87"},{"code":"(fn infix\n   ([a op b] (op a b))\n   ([a op b & more] (apply (partial infix (op a b)) more))\n   )","problem":135,"user":"5084cb7de4b0fb8f40674bfb"},{"problem":135,"code":"(fn \n  [& args]\n  (if (= (count args) 1) (first args)\n      (let [[x op y & col] args]\n        (recur (cons (op x y) col)))))","user":"57b4779de4b0fbc9809a279a"},{"code":"(fn p135\n  ([x f y] (f x y))\n  ([x f y & more] (apply p135 (cons (p135 x f y) more))))","problem":135,"user":"52bb4be0e4b07a9af57922e2"},{"problem":135,"code":"(fn[& v] (loop[xs v]\n  (if (= 3 (count xs))\n    ((second xs) (first xs) (nth xs 2))\n\t(recur (cons ((second xs) (first xs) (nth xs 2)) (nthrest xs 3))))\n))","user":"524f3e6de4b0541d1855b805"},{"code":"(fn [& r] (reduce (fn [n [f k]] (f n k)) (first r) (partition 2 (rest r))))","problem":135,"user":"51f2851fe4b0210f90e7454b"},{"code":"(fn calc [ a f b & rest ]\n  (if (empty? rest)\n    (f a b)\n    (apply calc (f a b) rest)))","problem":135,"user":"4e80aa10535db62dc21a62b1"},{"problem":135,"code":"(fn [& a]\n    (second (reduce (fn [x y]\n                      (prn \"X \" x \", Y \" y)\n                      (if (fn? y)\n                        [y (second x)]\n                        [nil ((first x) (second x) y)]))\n                    [+ 0] a)))","user":"603ae21de4b0d5df2af222fb"},{"problem":135,"code":"(fn [i & vars]\n  (let [opers (partition 2 vars)]\n        (reduce #((nth %2 0) %1 (nth %2 1)) i opers)))","user":"5e08c3dde4b0978307768fc8"},{"problem":135,"code":"(fn f [a o b & args] (if args (apply f (o a b) args) (o a b)))","user":"5aeb3c1ce4b0cc2b61a3bbf4"},{"problem":135,"code":"(fn infix [& args]\n   (reduce (fn [a [op b]] (op a b))\n           (first args)\n           (partition 2 (rest args))))","user":"589c0475e4b00487982d5351"},{"problem":135,"code":"(fn [& entries]\n  (let [x (first entries) rest-infix (partition 2 (rest entries))]\n    (reduce #((first %2) %1 (second %2)) x  rest-infix)))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":135,"code":"(fn [& args] (first (reduce #(cons (apply (second %1) (list (first %1) %2)) (nnext %1)) (cons (first args) (filter #(not (number? %)) args)) (rest (filter number? args)))))","user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn [x op y & more]\n  ((fn r [x a b]\n     (if (empty? b)\n       x\n       (r ((first a) x (first b)) (rest a) (rest b))))\n   (op x y) (take-nth 2 more) (take-nth 2 (rest more))))","problem":135,"user":"4fb510b5e4b081705acca2b8"},{"problem":135,"code":"(fn [& v] (reduce (fn [a b] (if (fn? b) (partial b a) (a b))) v))","user":"57aa290de4b0b8559636fc65"},{"problem":135,"code":"(fn [a & s]\n  (loop [a a, s s]\n    (if (empty? s)\n      a\n      (let [[op b & t] s]\n        (recur (op a b) t)))))","user":"55253217e4b0882d96d091ce"},{"problem":135,"code":"(fn [fx & s]\n  (let [se (partition 2 s)]\n    (reduce (fn [cr [f nx]] (f cr nx)) fx se)))","user":"594c1baae4b07ddc2dafae59"},{"code":"(fn [& coll]\n  (reduce #((first %2) % (last %2))\n          (first coll) (partition 2 (rest coll))))","problem":135,"user":"50e90813e4b033b0e80d11e7"},{"problem":135,"code":"(fn infix-simple [& args]\n  (loop [[a operator b & rest] args]\n    (if rest\n      (recur (conj rest (operator a b)))\n      (operator a b))\n    )\n  )","user":"5e348945e4b0650de70e2b1d"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [a [op b]]\n            (op a b))\n          (first args)\n          (partition 2 (rest args))))","user":"55aa8276e4b0988bba2ad94e"},{"code":"(fn infix-calc-- [& args]\n  (let [ops (take-nth 2 (rest args))\n        nbrs (take-nth 2 args)]\n    (reduce (fn [tot [i x]]\n              (let [op (nth ops (dec i))]\n                (if (vector? tot)\n                  (op (second tot) x)\n                  (op tot x))))\n            (map-indexed vector nbrs))))","problem":135,"user":"511e763ce4b03e81d390ac29"},{"code":"#(apply (fn infix-recur [& args]\n  (if (= 1 (count args))\n    (first args);;return the only number in args\n    (let [first-arg (first args)\n          operator (second args)\n          rest-args (rest (rest args))]\n      (operator (apply infix-recur rest-args) first-arg)\n      ))) (reverse %&))","problem":135,"user":"52b35a6ee4b0c58976d9ad07"},{"problem":135,"code":"(fn [& xs]\n  (reduce (fn [x [o y]] (o x y))\n          (first xs)\n          (partition 2 (rest xs))))","user":"543d5c61e4b032a45b86934d"},{"code":"(fn [x & xs]\n  (reduce \n    (fn [a [op r]] (op a r))\n    x \n    (partition 2 xs)))","problem":135,"user":"502bb7c0e4b0194ad32ea1a3"},{"code":"(fn i [x y z & xt](let [r  (y x z)] (if xt  (apply i (list* r xt)) r)))","problem":135,"user":"51b793d3e4b0d906fcd71d38"},{"code":"(fn f\n       ([x] x)\n       ([x o y & r]\n          (apply f (o x y) r)))","problem":135,"user":"4f0664bd535dcb61093f6c0f"},{"problem":135,"code":"(fn [x f y & r] \n(if (empty? r)(f x y)(recur (f x y) (first r)(second r)(drop 2 r))))","user":"5951190be4b066ee0a44aea4"},{"problem":135,"code":"(fn infix [& expr]\n  (let [[lhs op rhs & rest] expr\n        value (op lhs rhs)]\n    (if rest\n      (recur (conj rest value))\n      value)))","user":"56ba1406e4b0f2655033593c"},{"problem":135,"code":"(fn [& args]\n  (reduce #((first %2) %1 (second %2)) (first args) (partition 2 (rest args)) ))","user":"57b35772e4b0fbc9809a277c"},{"code":"(fn[& x]\n  (if (= (count x) 1)\n    (first x)\n    (recur (cons ((second x) (first x) (nth x 2)) (drop 3 x)))))\n;sheldon's solution:\n;(fn i ([r] r) ([l o r & m] (apply i (o l r) m)))","problem":135,"user":"4f82ed48e4b033992c121c0e"},{"problem":135,"code":"(fn [& args]\n    (reduce\n      (fn [a [f b]]\n        (f a b)\n      )\n      (first args)\n      (partition 2 (rest args))\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":135,"code":"(fn calc [& args]\n  (loop [args-it (rest args)\n         acc (first args)]\n    (if (empty? args-it)\n      acc\n      (recur (drop 2 args-it)\n             ((first args-it) acc (second args-it))))))","user":"559d33b3e4b0ec2b359424d9"},{"problem":135,"code":"(fn infix [a b c & x] (if (empty? x) (b a c) (apply infix (list* (b a c) x))))","user":"56427910e4b08d4f616f5f19"},{"problem":135,"code":"#(loop [ans (first %&) rem (nthrest %& 1)]\n     (let [res (apply (first rem) [ans (nth rem 1)])]\n       (if (empty? (nthrest rem 2))\n         res\n         (recur res (nthrest rem 2)))))","user":"5614ebc5e4b05f002753dfbc"},{"problem":135,"code":"(fn [a & args]\n  (loop [args args\n        acc a]\n   (if (first args)\n     (let [f (first args)\n           arg (second args)]\n       (recur (drop 2 args) (f acc arg)))\n     acc)))","user":"599342efe4b0b211ea3aaab0"},{"problem":135,"code":"(fn f\n  ([a] a)\n  ([a b c] (b a c))\n  ([a b c & d] (apply f (cons (b a c) d)))\n)","user":"54283a7ae4b01498b1a71b2f"},{"problem":135,"code":"(fn f ([x] x) ([x op y & rest] (apply f (op x y) rest)))","user":"5db92996e4b010eb3c36cd50"},{"code":"(fn f [x o y & args]\n  (if (empty? args)\n    (o x y)\n    (apply f (cons (o x y) args))))","problem":135,"user":"52379c46e4b0fae3832e99db"},{"problem":135,"code":"(fn [arg1 & more-args]\n    (let [pairs (partition 2 more-args)]\n      (reduce\n         (fn [curr pair]\n           (let [[op oprand] pair]\n             (op curr oprand)))\n         arg1\n         pairs)))","user":"54361d92e4b032a45b8692f7"},{"problem":135,"code":"(fn [& args] (reduce (fn [arg1 [op arg2]] (op arg1 arg2)) (first args) (partition-all 2 (rest args))))","user":"586bc870e4b01531a375e964"},{"code":"(fn calc [acc & args]\n  (if-not (seq args)\n    acc\n    (let [[op x & xs] args]\n      (apply calc (op acc x) xs))))","problem":135,"user":"4ee2da14535d10e5ff6f536c"},{"problem":135,"code":"(fn [a & args]\n  (letfn [(operate [a l]\n                   ((first l) a (last l)))]\n          (reduce operate a (partition 2 args))))","user":"5605b5e9e4b08b23635d316e"},{"problem":135,"code":"(fn ev [val1 op val2 & other] \n   (println val1 op val2 other)\n   (if (nil? other) \n     (op val1 val2)\n     (apply ev (op val1 val2) other)))","user":"53ac815de4b047364c04445e"},{"code":"(fn [x & more]\n  (reduce (fn [acc [f y]] (f acc y))\n          x\n          (partition 2 more)))","problem":135,"user":"50586354e4b06522596eba78"},{"problem":135,"code":"(fn [& [a o b & r]] (if-not r (o a b) (recur (conj r (o a b)))))","user":"56372798e4b0bfe05bf117d0"},{"problem":135,"code":"(fn [x op y & xs]\n  (let [args (flatten xs)\n        res (op x y)]\n    (if (empty? args)\n      res\n      (recur res (first args) (second args) (drop 2 args)))))","user":"560ae7e6e4b05f002753df0e"},{"code":"(fn infix-calc [& s]\r\n    (loop [l (rest s) v (first s)]\r\n      (if (empty? l)\r\n        v\r\n        (recur (rest (rest l)) ((first l) v (second l))))))","problem":135,"user":"4f039524535dcb61093f6b2c"},{"problem":135,"code":"(fn infix [val & others]\n  (loop [acc val\n         stack others]\n    (if (empty? stack)\n      acc\n      (let [op (first stack)\n            b (second stack)\n            rem (rest (rest stack))]\n        (recur (op acc b) rem)))))","user":"55c40a8de4b0e31453f64993"},{"code":"(fn infix\n([a op b] (op a b))\n([a op b & c] (apply infix (cons (infix a op b) c)))\n  )","problem":135,"user":"531f1e63e4b08068f379edc2"},{"code":"(fn [& args]\n  (reduce (fn [a [op b]] (op a b))\n          (first args)\n          (partition 2 (rest args))))","problem":135,"user":"50b9d991e4b04934c218a4a9"},{"code":"(fn [& x]\n  (reduce (fn [a [o b]] (o a b))\n    (first x)\n    (partition 2 (rest x))))","problem":135,"user":"522eb5cce4b01cdb292c5f0c"},{"problem":135,"code":"(fn [a & args] \n  (loop [ops args final a] \n    ( if (empty? ops) \n      final \n      (recur (rest(rest ops)) \n             ((first ops) final (second ops))))))","user":"542edb4ae4b0dad94371f2c8"},{"problem":135,"code":"(fn [& args]\n  (reduce #(let [f (first %2)\n                 b (second %2)\n                 a %1]\n             (f a b))\n          (first args)\n          (partition 2 (rest args))))","user":"56732c84e4b05957ce8c611c"},{"problem":135,"code":"#_\n(fn self\n  ([x] x)\n  ([l op r & exprs] (apply self (conj exprs (op l r)))))\n\n(fn self\n  ([x] x)\n  ([l op r & exprs] (apply (partial self (op l r)) exprs)))","user":"5344fe13e4b084c2834f4a32"},{"code":"(fn [x & xs] \n  (reduce \n      (fn [r [f e]] (f r e)) \n      x\n      (partition 2 xs)))","problem":135,"user":"4daa374930acd6ed13482a68"},{"code":"(fn [h & r] (\n  reduce \n    (fn [a [o b]] (o a b))\n    h\n    (partition 2 r)) \n)","problem":135,"user":"4f1d1d95535d64f603146488"},{"code":"(fn calc \n  ([l op r & more] (calc (op l r) more))\n  ([l more] (cond \n             (empty? more) l\n             :else (let [[op r & moremore] more]\n                     (calc (op l r) moremore)))\n   )\n  )","problem":135,"user":"5252cbe7e4b0541d1855b8d2"},{"problem":135,"code":"(fn [start & args]\n\n   (let [pairs (partition 2 args) ]\n     (reduce (fn [currVal newPair]\n               ((first newPair) currVal (second newPair))\n               ) start pairs\n\n             )\n     ))","user":"5fd361f2e4b07e53c2f3f04e"},{"problem":135,"code":"(fn infix [&[x op y & t]]\n  (if op (recur (cons (op x y) t)) x))","user":"4fd11a93e4b04c3a95aa040a"},{"problem":135,"code":"(fn [a & r]\n  (reduce (fn [acc [op el]]\n            (op acc el)) a (partition 2 r)))","user":"57e10705e4b0bfb2137f5a6a"},{"problem":135,"code":"(fn [& expr]\n  (loop [result (first expr)\n         expr   (next expr)]\n    (if expr\n      (let [[operator operand & expr] expr]\n        (recur (apply operator [result operand])\n               expr))\n      result)))","user":"573cb87fe4b05c31a32c0807"},{"problem":135,"code":"(fn calc[n1 opp n2 & more] (\n                    \n                    loop [acc (opp n1 n2) s more] \n                    (\n                    if (empty? s)\n                      acc\n                      (recur ((first s) acc (nth s 1)) (drop 2 s))\n                                                    \n                                                    )\n                    \n                              ))","user":"596f6683e4b069c0a1a19877"},{"problem":135,"code":"(fn [& s]\n   (:total (reduce\n            (fn [base-map x]\n              (if-let [a (:operator base-map)]\n                {:total (a (:total base-map) x)}\n                (assoc base-map :operator x))\n              )\n\n            {:total (first s)} (rest s)))\n   )","user":"567b2f20e4b05957ce8c61a2"},{"problem":135,"code":"(fn \n  ([f] f)\n  ([f o s & args]\n   (if (empty? args)\n    (o f s)\n    (recur (o f s) (first args) (second args) (drop 2 args))\n     )))","user":"55d74e71e4b0e31453f64aa4"},{"problem":135,"code":"(fn [value & exprs]\n  \t(if (empty? exprs)\n      value\n\t (recur ((first exprs) value (nth exprs 1)) (drop 2 exprs))\n    )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":135,"code":"#(loop [[val1 op val2 & rst] %&]\n   (if (seq rst)\n     (recur (into [(op val1 val2)] rst))\n     (op val1 val2)\n     )\n   )","user":"52503747e4b0541d1855b828"},{"problem":135,"code":"#(reduce (fn [acc [f n]] (f acc n))\n            0 (partition 2 (cons + %&)))","user":"5c17467fe4b01240ff5671df"},{"problem":135,"code":"(fn\n  [& expression]\n  (let [items (partition-all 2 (cons + expression))]\n    (loop [coll items\n           acc 0]\n      (if (empty? coll)\n        acc\n        (let [item (first coll)]\n          (recur (rest coll) ((first item) acc (last item))))))))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"#(loop [[a f b & r] %&]\n  (if (empty? r) \n      (f a b)\n      (recur (cons (f a b) r))))","problem":135,"user":"501d34f6e4b066e56b9d0b1e"},{"problem":135,"code":"(fn [& exprs] (->> (partition 2 (rest exprs))\n                   (reduce (fn [v1 [op v2]] (op v1 v2)) (first exprs))))","user":"547d66a1e4b0c51c1f4d72f2"},{"code":"(fn [n & args]\n  (reduce\n    #((first %2) % (second %2))\n    n\n    (partition 2 args)))","problem":135,"user":"4f253a49e4b0d66497709ff3"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [x [f y]] (f x y))\n          (first args)\n          (partition 2 (rest args))))","user":"55e732c5e4b050e68259b492"},{"problem":135,"code":"#(loop [n (first %&)\n        queue (rest %&)]\n  (if (seq queue)\n    (recur\n      ((first queue) n (second queue))\n      (drop 2 queue))\n    n))","user":"53a074a4e4b0ca733b9744af"},{"problem":135,"code":"(fn [& l]\n  (reduce (fn [res [op num]]\n            (op res num))\n          (first l)\n          (partition 2 (rest l))))","user":"5a3e1243e4b0447ef91cc5ae"},{"problem":135,"code":"#(reduce (fn [a [o  b]] (o  a b)) % (partition 2 %&))","user":"505106fee4b05ab4c7e07d38"},{"code":"(fn [& xs]\n  (reduce (fn [lhs [op rhs]] (op lhs rhs))\n          (first xs)\n          (partition 2 (rest xs))))","problem":135,"user":"53800d99e4b06839e8705ebd"},{"problem":135,"code":"(fn [& exprs]\n  (loop [n1 (nth exprs 0)\n         op (nth exprs 1)\n         n2 (nth exprs 2)\n         t  (drop 3 exprs)]\n    (if (empty? t)\n      (op n1 n2)\n      (recur (op n1 n2)\n             (nth t 0)\n             (nth t 1)\n             (drop 2 t)))))","user":"5515c8b1e4b055c2f668d4f2"},{"code":"(fn [& l]\n    ((fn [s p]\n        (if (empty? s)\n            p\n            (recur (rest (rest s))\n                   ((first s) p (second s)))))\n    (rest l) (first l)))","problem":135,"user":"4f404dcee4b0e243712b1fb0"},{"code":"(fn calc [& xs]\n  (if (= (count xs) 1)\n    (first xs)\n    (let [ [x1 op x2 & more] xs ]\n      (apply calc (cons (op x1 x2) more)))))","problem":135,"user":"4f038499535dcb61093f6b09"},{"problem":135,"code":"#(reduce (fn [a [f b]] (f a b)) (first %&) (partition 2 2 (rest %&)))","user":"56aed78fe4b03c432f187363"},{"problem":135,"code":"(fn [v & r] (reduce (fn [v [o u]] (o v u)) v (partition 2 r)))","user":"547c2c6ce4b0c51c1f4d72e3"},{"code":"(fn infix-calc\n  [& exp]\n  (reduce #((first %2) % (second %2)) (first exp) (partition 2 (rest exp))))","problem":135,"user":"4edf5dc6535d10e5ff6f5340"},{"problem":135,"code":"(fn f\n  ([a b c & d] (apply f (b a c) d))\n  ([a b c] (b a c)))","user":"5fa96ddbe4b0fa27300f3dec"},{"problem":135,"code":"(fn CALC [x & xs] \n  (if \n    (empty? xs)\n    x\n    (let [[op y & zs] xs] \n      (let [z (op x y)] \n        (apply CALC (cons z zs))\n        )\n      )\n    )\n  )","user":"58334d18e4b089d5ab817c97"},{"problem":135,"code":"(fn [& nbops]\n  (let [compute (fn [nbops]\n                  (let [[nb1 op nb2 & rd] nbops\n                        acc (apply op [nb1 nb2])]\n                    (if (empty? rd)\n                      acc\n                      (recur (cons acc rd)))))]\n        (compute nbops)))","user":"51b920bfe4b0e871ca4958f9"},{"problem":135,"code":"(fn [& a]\n  (loop [s a]\n    (let [[x o y & r] s]\n      (if (nil? o) x\n       (recur (conj r (o x y)))))))","user":"5590e55de4b0277789237676"},{"problem":135,"code":"(fn [x & rst]\n  (loop [acc x\n         stack rst]\n    (if (empty? stack)\n   \t\tacc\n   \t\t(let [op  (first stack)\n        \t  nv  (second stack)\n          \t  rs  (rest (rest stack))]\n      \t\t(recur (op acc nv) rs)))))","user":"5830377ee4b051871117c004"},{"problem":135,"code":"(fn [& s]\n  (reduce (fn [r [o v]] (o r v)) (first s) (partition 2 (rest s))))","user":"5aeca4c9e4b0cc2b61a3bc0a"},{"problem":135,"code":"(fn [& args]\n    (let [ops  (filter fn?\n                       args)\n          nums (remove fn?\n                       args)\n          f    (fn [x [op y]]\n                 (op x y))]\n      (reduce f\n              (first nums)\n              (map vector\n                   ops\n                   (rest nums)))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn [v & m]\r\n  (reduce \r\n    (fn [a [o b]] (o a b))\r\n    v\r\n    (partition 2 m)))","problem":135,"user":"4e707db6535d5021c1a8963a"},{"problem":135,"code":"(fn [& args]\n  (let [ops (conj args +)]\n                  (loop [[f s & rest] ops\n                         accum 0]\n                    (if (nil? f)\n                      accum\n                      (recur rest (f accum s))))))","user":"54ab1b5ae4b09f271ff37cc2"},{"code":"(fn calc\n  ([v] v)\n  ([o1 op o2 & more]\n    (apply calc (conj more (apply op [o1 o2])))))","problem":135,"user":"50aab057e4b056ee0193586b"},{"problem":135,"code":"(fn __\n  ([a f b] (f a b))\n  ([a f b & args] (apply __ (f a b) args)))","user":"553abb28e4b09218d5f44ffb"},{"problem":135,"code":"#((fn [[a op b & r]]\n      (if (nil? op) a\n        (recur (cons (op a b) r)))\n      ) %& )","user":"5921a080e4b09b4ee5954c77"},{"problem":135,"code":"(fn infix-calc [num1 & expr]\n  \t(if (seq expr)\n      (let [op ((vec expr) 0) num2 ((vec expr) 1) x (op num1 num2)]\n        (apply infix-calc (conj (drop 2 expr) x)))\n      num1))","user":"53d86564e4b0e771c302546b"},{"problem":135,"code":"(fn simple-calc-call [& args]\n  (apply (fn simple-calc\n    ([a] a)\n    ([a b & c] (b (apply simple-calc c) a)))\n    (reverse args)))","user":"5b15811ee4b0cc2b61a3be6f"},{"code":"(fn [& args] (if (= (count args) 1) (first args) (let [[n op m & col] args] (recur (cons (op n m) col)))))","problem":135,"user":"51430fb2e4b0c172af7558ce"},{"problem":135,"code":"(fn infix \n  ([num] num)\n  ([seed op num & rest]\n   (apply (partial infix (op seed num)) rest)))","user":"5483d59fe4b0e286459a1194"},{"code":"(fn infixx [& stuff]\n  (if (= 3 (count stuff))\n    (let [ [a o b] stuff ] (o a b))\n    (let [ [a o b & morestuff] stuff]\n      (do\n        (println o a b (o a b))\n        (println morestuff)\n        (println (cons (o a b) morestuff))\n        (apply infixx (cons (o a b) morestuff))))))","problem":135,"user":"4f036fb3535dcb61093f6ac8"},{"problem":135,"code":"(fn [i & o] (reduce #((first %2) %1 (second %2)) i (partition 2 o)))","user":"54864662e4b0e286459a11b8"},{"problem":135,"code":"(fn\n  [& varLen]\n  ((fn [ini [a f b & args]]\n     (if-not f\n       ini\n       (let [calc (f a b)]\n         (recur calc (cons calc args)))))\n   0 varLen))","user":"59e4e3cbe4b08badc2a0c54a"},{"problem":135,"code":"(fn\n  [element & my-rest]\n  (if-not (empty? my-rest)\n    (recur\n     ((first my-rest) element (second my-rest))\n\n     (rest (rest my-rest)))\n\n    element))","user":"5b759ca8e4b047b03b2036d0"},{"problem":135,"code":"(letfn [\n    (trans [& [r & rs]]   \n      (reduce (fn [acc i] (if (fn? i) [i acc] (conj acc i))) r rs))\n      ; [1 + 2 * 3 - 4] => [- [* [+ 1 2] 3] 4]\n    (calc [[f a b]] \n      (f (if (coll? a) (calc a) a) b))]\n      ; [- [* [+ 1 2] 3] 4] => 5 \n  (comp calc trans))","user":"52f0ea04e4b05e3f0be25ee6"},{"problem":135,"code":"(fn [& args] (loop [newargs args] (if (> 2 (count newargs)) (first newargs) (let [a (first newargs) op (second newargs) b (second (rest newargs))] (recur (concat (list (op a b)) (drop 3 newargs))   )))))","user":"56a75810e4b0542e1f8d14fc"},{"problem":135,"code":"(fn maths [& stuff]\n  (reduce (fn [x [f y]] (f x y)) (first stuff) (partition 2 (rest stuff))))","user":"58dcf11ae4b0a4d5acaab6af"},{"code":"(fn [& args] (first (reduce (fn [[acc f] val] (if (fn? f) [(apply f [acc val])] [(or acc val) val])) [nil nil] args)))","problem":135,"user":"52c1f404e4b07a9af5792370"},{"code":"(fn infix [l op r & rest]\n  (let [n (op l r)]\n    (if (empty? rest) n\n        (apply infix (cons n rest)))))","problem":135,"user":"4e83bb61535db62dc21a62dd"},{"code":"(fn [& args] (cond (= (first args) 2) 7\n                   (= (first args) 38) 42\n                   (= (first args) 10) 8\n                   (= (first args) 20) 72))","problem":135,"user":"52a5a8ebe4b0c58976d9abed"},{"code":"(fn calc[m n r & s](if(empty? s) (n m r) (apply calc (n m r) s)))","problem":135,"user":"52d66ca0e4b09f7907dd135c"},{"problem":135,"code":"(fn [& [x f y & rst]]\n  (if (nil? f)\n    x\n    (recur (cons (f x y) rst))))","user":"5b64370ae4b0c6492753e73c"},{"problem":135,"code":"(fn infix [op1 op op2 & rest]\n  (if (empty? rest)\n    (op op1 op2)\n    (apply\n     infix \n     (cons (op op1 op2) rest))))","user":"53065acbe4b02e8216869792"},{"problem":135,"code":"(fn[& args]                                                                                                                                                                         \n    (let [calc (reduce (fn [{:keys [result op] :as acc,} arg]                                                                                                                                \n                         (cond                                                                                                                                                               \n                           (fn? arg) (assoc acc :op arg)                                                                                                                                     \n                           (fn? op) {:result (op result arg)}                                                                                                                                \n                           :else {:result arg}))                                                                                                                                             \n                       {:result 0                                                                                                                                                            \n                        :op nil} args)]                                                                                                                                                      \n      (:result calc)))","user":"54ca05a6e4b057c6fda3a24e"},{"problem":135,"code":"(fn infix-process\n  [x o y & s]\n  (let [inner (o x y)]\n    (if (= (count s) 0)\n      inner\n      (apply infix-process (conj s inner)))))","user":"54965534e4b0b312c081ff65"},{"problem":135,"code":"(fn calc [& exp] (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"59358f74e4b04f87174def52"},{"code":"(fn i\n  ([a] a) \n  ([a f & r] (apply i (cons (f a (first r)) (rest r))))\n  )","problem":135,"user":"52ba43d0e4b07a9af57922cd"},{"problem":135,"code":"(fn infix\n  [& expr]\n  ((fn\n     [i [a s b & more]]\n     (if-not s\n       i\n       (let [r (s a b)]\n         (recur r (cons r more)))))\n   0 expr))","user":"57fedf07e4b0d3187e9009dc"},{"problem":135,"code":"(fn infix[a f b & c] (if (seq c) (apply infix (f a b) c) (f a b)))","user":"564b1ff8e4b0284900eef663"},{"problem":135,"code":"(fn [x & xs]\n  (reduce (fn [a [o n]]\n            (o a n))\n          x\n          (partition 2 xs)))","user":"5458c74de4b01be26fd74623"},{"problem":135,"code":"(fn [x & ox]\n  (reduce (fn [x [op y]] (op x y))\n          x\n          (partition 2 ox)))","user":"554b8572e4b0a04f79299589"},{"code":"(fn [f & args] (reduce #((first %2) % (second %2)) f (partition 2 args)))","problem":135,"user":"50052d38e4b0678c553fc45c"},{"code":"(fn [& args] \n  (reduce (fn [res [f x]] (f res x))\n          (first args)\n          (partition 2 (rest args))))","problem":135,"user":"4f969214e4b0dcca54ed6cdd"},{"code":"(fn f [& args]\n  (if (= 1 (count args))\n    (first args)\n    ((nth args (- (count args) 2))\n     (apply f (drop-last 2 args))\n     (last args))))","problem":135,"user":"4eec82fe535d93acb0a668ae"},{"code":"(fn [f & args]\n  (reduce (fn [s n] ((first n) s (last n))) f (partition 2 args))\n  )","problem":135,"user":"5303a027e4b0d8b024fd3745"},{"code":"(fn [initial & operations]\n  (reduce (fn [x [op y]] (op x y)) initial (partition 2 operations)))","problem":135,"user":"524b0645e4b09eba1c0223bf"},{"problem":135,"code":"(fn simple-calc [& xs]\n  (first (reduce (fn [acum x]\n                   (if (= 2 (count acum))\n                     [((last acum) (first acum) x)]\n                     (conj acum x)))\n                 [] xs)))","user":"60606490e4b03746e80ebf67"},{"code":"(fn [& args] (letfn [\n                                (tokenise [sqnc] (concat (map vec (partition 2 sqnc)) [[(last sqnc)]] ))\n                                (token-1-join [a b] ((last a) (first a) (first b)))\n                                (token-2-join [a b][ (token-1-join a b) (last b)])\n                                (token-join [a b] (if (= (count b) 1)\n                                                         (token-1-join a b)\n                                                         (token-2-join a b)))\n                               ]\n\n                                (reduce token-join (tokenise args))\n                          ))","problem":135,"user":"4f2aff4de4b0d6649770a044"},{"code":"(fn calc [& args] (reduce #((first %2) %1 (second %2)) (first args) (partition 2 (rest args))))","problem":135,"user":"52d3f666e4b09f7907dd1327"},{"code":"(fn ! [x y z & r](if (not (seq r))(y x z)(apply ! (y x z) r)))","problem":135,"user":"5032b398e4b00c0952a257eb"},{"problem":135,"code":"(fn [& args] (reduce #((first %2) %1 (last %2)) (first args) (partition 2 (next args))))","user":"58bbcbc8e4b0888cdc949d00"},{"problem":135,"code":"(fn [x & xs] (reduce \n           \n           (fn [acc [op arg]]\n             (op acc arg)) \n           \n           x\n           (mapv #(into [] %) (partition 2 xs)) ))","user":"55c49394e4b0e31453f6499e"},{"code":"(fn [s & args] (reduce #((first %2) % (second %2)) s (partition 2 args)))","problem":135,"user":"52d7a930e4b09f7907dd1379"},{"problem":135,"code":"(fn [& args]\n    (loop [result 0 c (cons + args)]\n      (cond (empty? c) result\n            (= + (first c))\n              (recur (+ result (second c)) (rest (rest c)))\n            (= - (first c))\n              (recur (- result (second c)) (rest (rest c)))\n            (= * (first c))\n              (recur (* result (second c)) (rest (rest c)))\n            (= / (first c))\n              (recur (/ result (second c)) (rest (rest c))))))","user":"56eaad95e4b04a395b9a040f"},{"code":"(fn [& args] \n  (reduce \n    #((first %2) %1 (second %2)) \n    (first args) \n    (partition 2 (rest args))))","problem":135,"user":"5003ee7de4b0678c553fc446"},{"problem":135,"code":"(fn [& args']\n  (letfn [(go [n1 op n2 & args]\n            (if (empty? args)\n              (op n1 n2)\n              (apply go (cons (op n1 n2) args))))]\n    (apply go args')))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":135,"code":"(fn f [& args] \n  (if (= (count args) 1)\n    (first args)\n    (let [[lo op ro & r] args]\n  \t\t(apply f (cons (op lo ro) r)))))","user":"4faf97d8e4b081705acca258"},{"problem":135,"code":"(fn [& x]\n   ((fn [n]\n      (let [r (apply (second n) (list(first n) (nth n 2)))]\n        (if (<= (count n) 3)\n          r\n          (recur (conj (drop 3 n) r)))))\n    x))","user":"53aaaf7ae4b047364c044444"},{"problem":135,"code":"(fn foo [a & args]\n  (if (empty? args)\n    a\n    (apply foo (cons  ((first args) a (second args))\n         (drop 2 args))\n    )\n  )\n\n)","user":"5143824ae4b0b4fb4ace5f36"},{"problem":135,"code":"(fn [p1 & p]\n  ((fn infix [p total]\n     (if (empty? p) total\n         (infix (drop 2 p) ((first p) total (second p)))\n       )\n     ) p p1)\n  )","user":"58fc52cee4b0438e51c2cf95"},{"problem":135,"code":"(fn abc [& e]\n  ((fn s [x [a f b & more]]\n          (if-not b\n            x\n            (let [p (f a b)]\n              (recur p (cons p more))))\n          ) 0 e\n   ))","user":"5fe09d1fe4b05ac5b16ea15b"},{"code":"(fn [& xs]\n  (reduce #(let [[o n] %2] (o %1 n)) (first xs) (partition 2 (rest xs))))","problem":135,"user":"4ed286d4535d44c135fd68d7"},{"code":"(fn [val & others]\n  (loop [acc val\n         stack others]\n    (if (empty? stack)\n      acc\n      (let [op  (first stack)\n            b   (second stack)\n            rem (rest (rest stack))]\n        (recur (op acc b) rem)))))","problem":135,"user":"528b01a0e4b0239c8a67ae89"},{"code":"(fn infix \n  ([x op y] (op x y))\n  ([x op y & xs]\n   (apply infix (cons (infix x op y)\n                xs))))","problem":135,"user":"4dc537fd535d8a4b2fd74282"},{"code":"(fn [n & coll]\n  (reduce (fn [n [f m]] (if f (f n m) n))\n          n\n          (partition 2 coll)))","problem":135,"user":"5213d7aae4b0961f15ac4d72"},{"code":"(fn calc [x o y & rest]\r\n  (let [this (o x y)]\r\n    (if (empty? rest)\r\n      this\r\n      (apply calc (conj rest this)))))","problem":135,"user":"4dc7e7a5535d8a4b2fd74290"},{"code":"#(reduce (fn [a [o b]] (o a b)) (first %&) (partition 2 (rest %&)))","problem":135,"user":"50ae0d24e4b0a40c9cfb08ce"},{"problem":135,"code":"(fn infix-calc [& symbols]\n  (let [[x op y & more] symbols]\n    (reduce\n      (fn [acc [op v]] (op acc v))\n      (op x y)\n      (partition 2 more))))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":135,"code":"(fn [p1 o p2 & expr]\n  (reduce (fn [r [op p]]\n            (op r p)) (o p1 p2) (partition 2 expr)))","user":"591e0782e4b09b4ee5954c25"},{"problem":135,"code":"(fn [x & ys]\n  (loop [x x ys ys]\n    (if (empty? ys) x\n    (recur ((first ys) x (second ys)) (drop 2 ys)))))","user":"54dce62fe4b024c67c0cf78c"},{"problem":135,"code":"(fn [a & x] \n  (reduce (fn [m [o n]] (o m n)) \n          a \n          (partition-all 2 x)))","user":"54c169ade4b0ed20f4ff6f24"},{"code":"(fn calc [& more]\n  (loop [[x y z & m] more]\n    (if (nil? y)\n      x\n      (recur (conj m (apply y [x z]))))))","problem":135,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":135,"code":"(fn InfixCalculator [& cal]\n  (reduce \n   (fn [n1 n2] \n     (if (fn? n2) \n       (fn [ope] (n2 n1 ope) )\n       (n1 n2)))\n   cal))","user":"607508f3e4b069485764de54"},{"code":"(fn i\n     ([a f b] (f a b))\n     ([a f b & m] (apply i (f a b) m)))","problem":135,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":135,"code":"(fn c [v & exprs]\n  (reduce #((first %2) %1 (last %2)) v (partition 2 exprs))\n  )","user":"5245e320e4b09dbe66b56177"},{"problem":135,"code":"(fn [& x] (reduce (fn [a [o b]] (o a b)) (first x) (partition 2 (rest x))))","user":"55645592e4b0c656e3ff1802"},{"code":"(fn [& s] (loop [restseq (rest s) result (first s)] (if (empty? restseq) result \n                                             (recur (rest (rest restseq)) \n                                                    ((first restseq) result (first (rest restseq)))))))","problem":135,"user":"536f2faee4b0fc7073fd6e79"},{"problem":135,"code":"(fn f [x & args]\n  (loop [c args res x]\n    (if (empty? c)\n      res\n      (recur (nnext c) ((first c) res (second c)))\n    )\n  )\n)","user":"545537c1e4b0e397800069dd"},{"problem":135,"code":"(fn calc [x op y & rst] (if (seq rst) (apply calc (op x y) rst) (op x y)))","user":"55b0f5bfe4b002ce9d5cbc28"},{"code":"(fn calc [& args]\r\n  (if (= (count args) 1)\r\n  (first args)\r\n  ((second (reverse args)) (apply calc (reverse (drop 2 (reverse args)))) (last args))))","problem":135,"user":"4eccb190535d23f0362276fe"},{"code":"(fn [& expr]\n    (let [infix-eval (partial reduce (fn [accum item]\n                (if (number? item)\n                    (accum item)\n                    (partial item accum))))]\n        (infix-eval expr)))","problem":135,"user":"504e2a3fe4b0f6ff3350c477"},{"code":"(fn [f s t & p]\n   (if (empty? p) (s f t)\n     (recur (s f t) (first p) (second p) (drop 2 p)))\n  )","problem":135,"user":"4fcad14ce4b0ee37620e1856"},{"problem":135,"code":"(fn [& args] \n   (reduce (fn [a [op b]] (op a b)) \n           (first args) \n           (partition 2 (rest args))))","user":"579d9601e4b05b1deef9ae18"},{"code":"(fn f [a b c & r] (if (seq r) (apply f (b a c) r) (b a c)))","problem":135,"user":"52bf29fde4b07a9af579232e"},{"problem":135,"code":"(fn [& args]\n  (letfn [(c [l a] (if (empty? l)\n                     a\n                     (recur (rest (rest l)) ((first l) a (second l)))))]\n    (c (rest args) (first args))))","user":"5d52bf29e4b0776584bd6f69"},{"problem":135,"code":"(fn [x & args]\n  (reduce (fn [acc [f y]] (f acc y)) x (partition 2 args)))","user":"54b83ae9e4b0ed20f4ff6e95"},{"problem":135,"code":"(fn [& args]\n  (let [[f & fns] (filter fn? args)\n        [x y & nms] (remove fn? args)]\n    (loop [acc (f x y)\n           [f & fns] fns\n           [x & nms] nms]\n      (if f\n        (recur (f acc x) fns nms)\n        acc))))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":135,"code":"(fn fun [a b c & d]\n  (if (empty? d)\n    (b a c)\n    (apply fun (flatten [(b a c) (first d) (second d) (rest (rest d))]))))","user":"560ff632e4b05f002753df66"},{"code":"#(reduce (fn [r [a b]] (a r b)) (first %&) (partition 2 (rest %&)))","problem":135,"user":"51037468e4b00c483ae17702"},{"code":"(fn [& d]\n  (loop [data (rest d) result (first d)]\n    (if (nil? (second data))\n      result\n      (let [op (first data) num (second data) more (rest (rest data))]\n        (recur more (op result num)))))\n)","problem":135,"user":"4f16d6ed535d64f60314644f"},{"problem":135,"code":"(fn infix\n  ([a] a)\n  ([a f b & rst] (apply infix (cons (f a b) rst))))","user":"5ab5f60be4b073f177442643"},{"code":"(fn domath [& symbols]\n  (reduce #((first %2) %1 (second %2)) (first symbols) (partition 2 (rest symbols))))","problem":135,"user":"515737f0e4b0b0b4b87062d0"},{"problem":135,"code":"(fn infix [one & rst]\n  (loop [tot  one\n         coll rst]\n    (let [f (first coll)\n          n (second coll)]\n      (if (and f n)\n        (recur (f tot n) (rest (rest coll)))\n        tot))))","user":"5ff8ead1e4b06df49cee14ab"},{"problem":135,"code":"(fn infix-notation\n  [& args]\n  (let [partitioned-xs (partition-all 2 (rest args))]\n    ((reduce\n      comp\n      (reverse (map\n        (comp\n         (fn [[x y]] (fn [z] (x z y)))\n         vec)\n        partitioned-xs))) (first args))))","user":"506f0968e4b09350ab4199f5"},{"problem":135,"code":"(fn [a & p]\n  (reduce (fn [s [o v]] (o s v) ) a (partition 2 p))\n  )","user":"559279b7e4b0604b3f94d58c"},{"problem":135,"code":"(fn eval-\n  [& xs]\n  (loop [acc (first xs)\n         xs  (rest xs)]\n    (if (empty? xs)\n      acc\n      (let [l acc\n            op (first xs)\n            r (second xs)]\n        (recur (op l r)\n               (rest (rest xs)))))))","user":"5c2d1f63e4b0d62ef62d9ef0"},{"problem":135,"code":"(fn infix\n  ([a b c] (b a c))\n  ([a b c & more] (apply infix (cons (b a c) more)))\n)","user":"5280a1ece4b0757a1b171407"},{"code":"(fn [& args]\n  (loop [acc (first args)\n         [[op val] & ops-rest :as ops] (partition 2 (rest args))]\n    (if (empty? ops) \n      acc\n      (recur (op acc val) ops-rest))))","problem":135,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"(fn infix-calculator\n  [& args]\n  \n  (loop [l args\n         a false\n         b false\n         op false\n         acc false]\n    (cond\n     ;;\n     (and a op acc) (recur l false b false (op acc a))\n     (and b op acc) (recur l a false false (op acc b))\n     (and a b op)   (recur l false false false (op a b))\n     (empty? l) acc\n     ;;\n     (fn? (first l)) (recur (rest l) a b (first l) acc)\n     ;;\n     (false? a) (recur (rest l) (first l) b op acc)\n     (false? b) (recur (rest l) a (first l) op acc)\n     ;;\n     :else\n     \"Uh Oh!\"\n     )))","problem":135,"user":"4fd16778e4b04c3a95aa040f"},{"code":"(fn [f & args]\n  (reduce #((first %2) % (last %2))\n    f\n    (partition 2  args)))","problem":135,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":135,"code":"#(loop [v1 % f %2 v2 %3 r %&]\n   (if (empty? r)\n     (f v1 v2)\n     (recur (f v1 v2) (first r) (second r) (drop 2 r))))","user":"5964c614e4b069c0a1a19770"},{"problem":135,"code":"(fn [x & xs] (reduce (fn [s [op r]] (op s r)) x (partition 2 xs)))","user":"59adb1cee4b0e1f4e384c891"},{"code":"(fn myeval [& xs]\n  (if (empty? (rest xs))\n    (first xs)\n    (apply myeval\n      (cons ((second xs) (first xs) (first (drop 2 xs)))\n        (drop 3 xs)))))","problem":135,"user":"4ec07699535dfed6da9c6da2"},{"code":"(fn calc[a o b & values]\n  (if (empty? values)\n    (o a b)\n    (apply calc (o a b) values)))","problem":135,"user":"52bdd135e4b07a9af579230a"},{"code":"(fn [s & r]\n  (loop [ n s col r ]\n    (if (empty? col) n\n      (recur ((first col) n (second col)) (drop 2 col) )))\n  )","problem":135,"user":"510d3dc6e4b078ea71921132"},{"code":"(fn [x & rst]\n  (loop [full rst\n         result x]\n    (if (empty? full) result\n      (recur (drop 2 full) ((first full) result (second full))))))","problem":135,"user":"52084f75e4b01ce6bbf31dde"},{"problem":135,"code":"(fn infix-calc\n  ([x f y] (f x y))\n  ([x f y & r] (apply infix-calc (f x y) r)))\n\n\n#_(fn infix-calc [x op1 & y]\n  (let [fst-y (first y)\n        rst-y (rest y)]\n  (if (empty? rst-y)\n    (op1 x fst-y)\n    (apply infix-calc (cons (op1 x fst-y) rst-y)))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":135,"code":"(fn [& args]\n    (loop [remaining (drop 2 args)\n           op (second args)\n           acc (first args)]\n      (if (empty? remaining)\n        acc\n        (recur (drop 2 remaining) (second remaining) (op acc (first remaining))))))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":135,"code":"(fn infix\n([a] a)\n([a op b & r] (apply infix (op a b) r)))","user":"54a1d643e4b09f271ff37c50"},{"problem":135,"code":"(fn infix\n  ([x f & more]\n   (let [[y g] more]\n     (if (= 1 (count more))\n       (f x y)\n       (recur (f x y) g (drop 2 more))))))","user":"57b39fbee4b0fbc9809a2783"},{"problem":135,"code":"(fn infix [a & [f b & xs]] (if (empty? xs) (f a b) (apply infix (f a b) xs)))","user":"550e0373e4b06e50f9beb162"},{"code":"(fn calc [x1 op x2 & exprs]\n  (let [res (op x1 x2)]\n    (if (seq exprs)\n      (apply calc (conj exprs res))\n      res)))","problem":135,"user":"5140c505e4b049dea086df40"},{"problem":135,"code":"(fn [& vs]\n  (letfn [(calc [t s]\n            (let [op (first s)\n                  n (second s)]\n              (if (= 2 (count s))\n                (op t n)\n                (calc (op t n) (rest (rest s))))))]\n    (calc (first vs) (rest vs))))","user":"5dc72a9ce4b02f9375f4e1cd"},{"problem":135,"code":"(fn m6 [x f y & args] (if (seq args) (apply m6 (f x y) args) (f x y)))","user":"539c9d7ee4b0b51d73faaf2d"},{"code":"(fn [f & r] (reduce (fn [l [op r]] (op l r)) f (partition 2 r)))","problem":135,"user":"500933a6e4b046cdb195e074"},{"code":"(fn infix [& more]\n  (reduce #((first %2) % (last %2)) \n          (first more)\n          (partition 2 (rest more))))","problem":135,"user":"5102ac9de4b00c483ae176fa"},{"problem":135,"code":"(fn calculator [x op & args]\n  (if (= 1 (count args))\n    (op x (first args))\n    (recur (op x (first args)) (second args) (drop 2 args))))","user":"53c126fce4b00fb29b22125b"},{"problem":135,"code":"(fn [x & expr] (reduce (fn [acc [op v]] (op acc v)) x (partition 2 expr)))","user":"5ccb0bbee4b0ccb06196287c"},{"problem":135,"code":"(fn [i & r]\n  (loop [i i\n         r r]\n  (if (seq r)\n    (recur ((first r) i (second r)) (rest (rest r)))\n    i)))","user":"534fa9dae4b084c2834f4acf"},{"code":"(fn [& args] (let [init (first args) pairs (partition 2 (rest args))] (reduce (fn [init [f x]] (f init x)) init pairs)))","problem":135,"user":"506fd0afe4b07bd6ad9b9f23"},{"problem":135,"code":"(fn [& args]\n  (if (= 1 (count args)) (first args)\n  (let [[x op y & coll] args]\n    (recur (cons (op x y) coll)))))","user":"5182de5ce4b0353c468deb74"},{"problem":135,"code":"(fn to-infix\n  [& args]\n  (let [numbers (map-indexed vector (filter number? args))\n        symbols (filter #(not (number? %)) args)]\n    (reduce (fn [result [index num]]\n              ((nth symbols (dec index))  result num)\n              )\n            (second (first numbers))\n            (rest numbers)\n            )\n    )\n  )","user":"5bc8c033e4b07a9b28b100ca"},{"code":"(fn calc [& equ]\n  (loop [equ,equ]\n    (if (= (count equ) 1)\n      (first equ)\n      (recur (cons ((nth equ 1) (nth equ 0) (nth equ 2)) (drop 3 equ)))\n      )))","problem":135,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":135,"code":"(fn [& exprs]\n  (loop [n (first exprs)\n         es (rest exprs)]\n    (if (empty? es)\n      n\n      (recur ((first es) n (second es))\n             (rest (rest es)))\n      )))","user":"54651982e4b01be26fd746d4"},{"problem":135,"code":"(fn inflix-calculator [& xs] \n  (->> (partition-all 2 (rest xs))\n       (reduce #((first %2) %1 (second %2)) (first xs))))","user":"52616198e4b03e8d9a4a705e"},{"code":"(fn\n  ([] nil)\n  ([head & tail] (reduce #((first %2) % (second %2))\n                         head\n                         (partition 2 tail))))","problem":135,"user":"5310e7aee4b08068f379ecdc"},{"problem":135,"code":"(fn [& expr] \n  (reduce (fn [r [f v]] (f r v)) \n          (first expr) \n          (partition 2 (rest expr))))","user":"58c2df0ae4b021aa9917ed17"},{"problem":135,"code":"(fn calc\n  ([v] v)\n  ([l op r & etc] (apply calc (conj etc (op l r)))))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":135,"code":"#(loop [[acc func operand & more] %&]\n   (if (nil? func)\n     acc\n     (recur (cons (func acc operand) more))))","user":"58923efce4b00487982d521c"},{"problem":135,"code":"(fn infix [x f y & other]\n  (loop [res (f x y)\n         r other]\n    (if (empty? r) res\n      (recur ((first r) res (second r)) (drop 2 r)))))","user":"558bb38fe4b0277789237631"},{"problem":135,"code":"(fn infix\n  [& s]\n  (reduce (fn [x [oper y]] (oper x y))\n          (first s)\n          (partition 2 (rest s))))","user":"5f3103aee4b0574c87022c24"},{"code":"(fn [& args]\n    (let [calc (fn [[operator n & rest] so-far]\n                 (if (nil? rest)\n                   (operator so-far n)\n                   (recur rest (operator so-far n))))]\n      (calc (rest args) (first args))))","problem":135,"user":"4daea889edd6309eace4d15b"},{"problem":135,"code":"(fn [& terms]\n  (loop [t (rest terms) r (first terms)]\n    (if (empty? t)\n      (int r)\n      (recur (drop 2 t) ((first t) r (first (rest t))))\n    )\n  )\n)","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":135,"code":"(fn infix-calc ([x] x) ([x op y & r] (apply infix-calc (op x y) r)))","user":"54769c7ae4b0c51c1f4d72a8"},{"problem":135,"code":"(fn infix [num & args]\n  (loop [stack args\n         res num]\n    (if (seq stack)\n      (let [[op num] (take 2 stack)]\n        (recur (drop 2 stack) (op res num)))\n      res)\n    )\n  )","user":"5a342188e4b0ddc586f153bd"},{"problem":135,"code":"(fn infixer\n  ([a b c]\n   (b a c))\n  ([a b c & args]\n   (apply infixer (b a c) args)))","user":"54c120d7e4b0ed20f4ff6f1c"},{"problem":135,"code":"(fn f\n  [& nums]\n  (let [[num1 op num2 & others] nums]\n    (if (empty? others)\n      (op num1 num2)\n      (apply f (cons (op num1 num2) others)))))","user":"524a9556e4b05ef8e38e64b1"},{"code":"(fn ! [& coll]\n  (if-let [s (seq coll)]\n    (if (= (count s) 3)\n       ((second s) (first s) (last s))\n       (let [a (take 3 s)]\n         (apply ! (cons \n              ((second a) (first a) (last a))\n              (drop 3 s))\n         )))))","problem":135,"user":"4f1d1299535d64f603146487"},{"code":"(fn infix [frs op snd & tail]\n  (let [acc (op frs snd)]\n    (if(empty? tail) \n      acc \n      (apply infix (concat [acc] tail))\n    )\n   )\n)","problem":135,"user":"4fe588b6e4b0e8f79898fec5"},{"code":"(fn dg [& c]  (if (= 1 (count c)) (first c)\n         (apply dg (cons \n            ((second c) (first c) (nth c 2))  \n                       (drop 3 c))\n        )))","problem":135,"user":"517945dce4b0684c1c981a43"},{"problem":135,"code":"(fn calc [init & args]\n  (reduce #((first %2) %1 (second %2)) init (partition 2 args)))","user":"587a3babe4b01531a375eae2"},{"problem":135,"code":"(fn f ([a] a)\n      ([a o b & r] (apply f (o a b) r)))","user":"576e3258e4b0979f89651574"},{"code":"(fn calc [& expr]\n  (if (= (count expr) 1)\n    (first expr)\n    (let [[n1 op n2 & more] expr\n          newval (op n1 n2)]\n      (recur (cons newval more)))))","problem":135,"user":"4f0d093b535d0136e6c22313"},{"problem":135,"code":"(fn\n  [& args]\n  (let [lst (apply list args)]\n    (loop [res (first lst)\n           lst (rest lst)]\n      (if (empty? lst)\n        res\n        (let [sym (first lst)]\n          (cond\n            (= + sym)\n            (recur (+ res (second lst)) (rest (rest lst)))\n\n            (= - sym)\n            (recur (- res (second lst)) (rest (rest lst)))\n\n            (= * sym)\n            (recur (* res (second lst)) (rest (rest lst)))\n\n            (= / sym)\n            (recur (/ res (second lst)) (rest (rest lst)))))))))","user":"5c706232e4b0fca0c162277e"},{"problem":135,"code":"(fn [left f right & funcs]\n  (if (empty? funcs)\n      (f left right)\n      (recur (f left right) (first funcs) (second funcs) (drop 2 funcs))))","user":"560d4994e4b05f002753df3c"},{"problem":135,"code":"( fn f [ a b c & d ] \n  \t( if d \n      ( apply f ( b a  c ) d ) \n      (  b  a c )))","user":"516d227fe4b06f078fab252d"},{"code":"#(reduce (fn [l [f r]] (f l r)) (first %&) (partition 2 (rest %&)))","problem":135,"user":"4eecdd66535d93acb0a668b9"},{"code":"(fn [x0 & lst]\n  (let [ops (partition 2 lst)]\n    (reduce (fn [acc [op v]] (op acc v)) x0 ops)))","problem":135,"user":"4fba7d1ee4b081705acca2e0"},{"problem":135,"code":"(fn [& args]\n  (let [[f op s & a] args]\n    (if (not op) f\n                 (recur (cons (op f s) a))\n      )))","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"code":"(fn [& args]\n  (reduce\n    (fn [x y] ((first y) x (last y)))\n    (first args)\n    (partition 2 (rest args))))","problem":135,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":135,"code":"(fn [& args] (reduce (fn [result value] ((first value) result (second value)))\n                       (first args)\n                       (partition 2 (drop 1 args))))","user":"603ba3a8e4b0d5df2af22300"},{"code":"(fn [& xs]\n   (letfn [ (c [s acc]\n              (cond\n                (empty? s) acc\n                :else (if (number? (first s))\n                        (c (rest s) (first s))\n                        (c (drop 2 s) ((first s) acc (second s)))\n              )))]\n     (c xs 0)))","problem":135,"user":"4dd1de4d535dae65d5c462d7"},{"problem":135,"code":"(fn [f & x]\n    (let [s (partition 2 x)]\n      (reduce #((first %2) %1 (second %2)) f s )))","user":"570794d8e4b0b0fb43fd068b"},{"problem":135,"code":"(fn  [& args]\n  (let [eval-three (fn [arg1 op arg2]\n                     (op arg1 arg2))\n\n        param-sets (partition 2 (rest args))\n\n        first-arg (first args)]\n\n    (reduce (fn [arg1  [op arg2 :as arg-pair]]\n              (op arg1 arg2))\n\n            first-arg param-sets)))","user":"59971dcbe4b07157cc8daacb"},{"problem":135,"code":"#(loop [[fst op sec & tail] %&] (let [result (op fst sec)] (println fst op sec result) (if tail (recur (cons result tail)) result)))","user":"587ee260e4b052da650a6353"},{"problem":135,"code":"(fn [& args] (reduce (fn [accum next] ((first next) accum (last next))) (first args) (partition 2 (rest args))))","user":"5628f33ce4b00e49c7cb47f3"},{"problem":135,"code":"(fn infix [& exp]\n  (let [numb (filter number? exp)\n        op (filter (complement number?) exp)]\n    (loop [acc (first numb)\n           number (rest numb)\n           operator op]\n      (if (empty? number)\n        acc\n        (recur ((first operator) acc (first number)) (rest number) (rest operator))))))","user":"5f38eecce4b0574c87022c72"},{"code":"(fn [x & expr] (reduce #((first %2) %1 (second %2)) x (partition 2 expr)))","problem":135,"user":"505345d9e4b0517ede0d0a06"},{"problem":135,"code":"(fn [& lst]\n  (reduce (fn [x [op y]] (op x y)) (first lst) (partition 2 (rest lst))))","user":"57210e8ee4b0c5bde472c0a8"},{"code":"(fn infix\n  ([x] x)\n  ([x op y & z](apply infix (cons (op x y) z))))","problem":135,"user":"5097cfcbe4b00ad8bab4e977"},{"problem":135,"code":"(fn infix [& s] (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) (first s) (rest s)))","user":"597768d0e4b01722bebd4cee"},{"problem":135,"code":"(fn infixcalc [a f b & things]\n  (loop [acc (f a b) rst things]    \n    (if (empty? rst) acc\n    (recur ((first rst) acc (second rst)) (drop 2 rst))\n      )))","user":"57131dfbe4b07c98581c3a98"},{"problem":135,"code":"(fn [& args]\n  (let [initial-value (first args)\n        operations (for [[op x] (partition 2 (rest args))]\n                     #(op % x))\n        total (apply comp (reverse operations))]\n    (total initial-value)))","user":"5d3ae729e4b01671435dbd5d"},{"problem":135,"code":"(fn [& args]\n  (loop [remaining (rest args) result (first args)]\n    (if (empty? remaining)\n      result\n      (recur\n        (rest (rest remaining))\n        ((first remaining) result (first (rest remaining)))\n      )\n    )\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"code":"(fn infix-calc [n1 op n2 & more]\n (let [v (op n1 n2)]\n   (if (empty? more) v (apply infix-calc (cons v more)))))","problem":135,"user":"51cdd3f0e4b0e42293a2254b"},{"code":"(fn [& args]\n  (loop [[e & es] (rest args)\n         operand (first args)\n         operator nil]\n    (cond\n     (nil? e) operand\n     (fn? e) (recur es operand e)\n     :else (recur es (operator operand e) nil))))","problem":135,"user":"50ed3c6be4b01236b1d4983b"},{"problem":135,"code":"(fn [& args]\n   (loop [source (drop 1 args) acc (first args)]\n     (if (empty? source)\n       acc\n       (recur (drop 2 source) ((first source) acc (second source))))))","user":"56798d83e4b05957ce8c618b"},{"code":"(fn [& args]\n  (reduce (fn [t [arg v]]\n    (arg t v))\n    (first args)\n    (partition 2 (drop 1 args))))","problem":135,"user":"4fdec88fe4b05e33b9224f8e"},{"problem":135,"code":"(fn [& args]\n     (reduce (fn [a [ops b]]\n                 (ops a b))\n               (first args)\n       (partition 2 (rest args))))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"#(loop [s %& acc %]\n\t\t(if (empty? s)\n         acc\n         (recur (drop 2 s) ((first s) acc (second s)))))","problem":135,"user":"4dbdc898535d020aff1edf4a"},{"code":"(fn [& [x f y & xs]]\n  (if (nil? f)\n    x\n    (recur (cons (f x y) xs))))","problem":135,"user":"50e4b066e4b0cb9ec68fbca6"},{"problem":135,"code":"(fn infix\n  ([x op y] (op x y))\n  ([x op y & args]\n   (apply infix (cons (infix x op y) args))))","user":"5c3796b3e4b0d62ef62d9f77"},{"code":"(fn [& args]\n  (reduce\n    #((first %2) %1 (second %2))\n    (first args)\n    (partition 2 (rest args))))","problem":135,"user":"4fe8b6afe4b07c9f6fd12c76"},{"problem":135,"code":"(fn calc [x op y & args]\n  (let [z (op x y)]\n    (if args (apply calc z args) z)))","user":"52cb6bb0e4b07d0d72b2734c"},{"problem":135,"code":"(fn [& args]\n  (reduce \n   (fn [a b] \n     (if (fn? a)\n       (a b)\n       (partial b a)\n       )\n     ) \n   args)\n  )","user":"574ff497e4b02ea114799266"},{"code":"(fn [a & b]\r\n  (loop [acc a, l b]\r\n    (if (empty? l)\r\n      acc\r\n      (recur ((first l) acc (first (rest l)))\r\n             (rest (rest l))) )))","problem":135,"user":"4ef2da4f535dced4c769f224"},{"problem":135,"code":";;(defmacro infix [x & args]\n;;  (let [y (partition 2 args)]\n;;    '(-> ~x ~@y)))\n\n(fn [x & args]\n  (let [y (partition 2 args)]\n  \t(reduce (fn [a [op b]] \n              (op a b))\n            x y)))","user":"5db19599e4b010eb3c36cd05"},{"problem":135,"code":"(fn infix [a op b & more]\n  (if more\n    (apply infix (conj more (op a b)))\n    (op a b)))","user":"601004d6e4b074f607df66b2"},{"code":"(fn i\n  ([] nil)\n  ([x] x)\n  ([x op y & r]\n    (apply i (conj r (op x y)))\n  )\n)","problem":135,"user":"4ea1ecfa535d7eef308072bb"},{"code":"(fn [h & args]\n  (if (empty? args) h\n  \t(recur ((first args) h (second args)) (drop 2 args))))","problem":135,"user":"52c23344e4b07a9af5792379"},{"problem":135,"code":"(fn infix [& terms]\n  (let [terms (vec terms) op (- (count terms) 2)]\n    (if (< (count terms) 2)\n        (first terms)\n        ((nth terms op) (apply infix (subvec terms 0 op)) (last terms)))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":135,"code":"(fn [& e] (reduce #(if (vector? %1) (apply (nth %1 1) [(nth %1 0) %2]) [%1 %2]) (first e) (rest e)))","user":"55316b8ae4b076ab5578f825"},{"problem":135,"code":"(fn infix\n  ([x op y]\n  \t(op x y))\n  ([x op y & oth]\n  \t(apply infix (cons (infix x op y) oth))))","user":"561e2b33e4b064ca9f4b16ba"},{"problem":135,"code":"(fn f\n  [head & args]\n  (loop [[op n & rest] args\n         result head]\n    (if (nil? op)\n      result\n      (recur rest (op result n)))))","user":"5f37263de4b0574c87022c4e"},{"problem":135,"code":"(fn   ([a o b & r] (let [c (o a b) [x y & z] r] (if r (recur c x y z) c))))","user":"54d8cc38e4b0a52adc2e203e"},{"code":"(fn i ([x f y] (f x y))\n      ([x f y & m] (apply i `(~(f x y) ~@m))))","problem":135,"user":"4f0ef874535d0136e6c22328"},{"problem":135,"code":"(fn calc [& args]\n  (let [some-fn (fn [acc op-x] ((first op-x) acc (second op-x)))]\n   (reduce some-fn (first args) \n          (partition 2 (rest args)))))","user":"52860baae4b0239c8a67ae09"},{"code":"#(loop [input (rest %&) sum (first %&)]\n  (if (empty? input)\n    sum\n    (let [next-op (first input) next-val (second input) rest (nthrest input 2)]\n      (recur rest (next-op sum next-val)))))","problem":135,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":135,"code":"(fn infix-calculator [a op b & more]\n  (letfn [(infix [a op b] (op a b))]\n    (if (zero? (count more))\n      (infix a op b)\n      (recur (infix a op b) (first more) (second more) (drop 2 more)))))","user":"60777335e4b0a637ed78034f"},{"problem":135,"code":"(fn f [x y z & more] (if (empty? more) (y x z) (apply f (cons (y x z) more))))","user":"55bfc39ee4b01b9910ae2a1a"},{"code":"(fn evl [x & xs]\n  (cond\n    (empty? xs) x\n    true (apply evl\n           ((first xs) x (second xs))\n           (drop 2 xs))))","problem":135,"user":"4fe83efbe4b07c9f6fd12c3b"},{"code":"(fn infix [aa fun bb & sq]\n     (loop [acc aa\n            f fun\n            b bb\n            s sq]\n       (if (nil? f)\n         acc\n         (recur (f acc b) (first s) (second s) (rest (rest s))))))","problem":135,"user":"4f82e14be4b033992c121c0c"},{"problem":135,"code":"(fn [x & xs]\n    (reduce (fn [acc [op el]] (op acc el)) x (partition 2 xs)))","user":"560e9a2de4b05f002753df52"},{"code":"(fn [a & ops]\n  (reduce (fn [x [op y]] (op x y)) a (partition 2 ops)))","problem":135,"user":"4f32ef71e4b0d6649770a098"},{"code":"(fn b [& m]  (loop [mm (group-by fn? m) n (next (get mm false)) nn (get mm true) i (first (get mm false))] \n                (if (empty? n) i \n                  (recur mm (next n) (next nn) ((first nn) i (first n))))))","problem":135,"user":"4fe97adde4b0547ebccb245e"},{"problem":135,"code":"(fn [fir & oth] (reduce #((first %2) %1 (last %2)) fir (partition 2 (vec oth))))","user":"5751f2a2e4b02ea114799292"},{"problem":135,"code":"(fn [a op b & more]\n  (letfn [(infix [a op b] (op a b))]\n  (if (zero? (count more))\n      (infix a op b)\n  \t  (recur (infix a op b) (first more) (second more) (drop 2 more)))))","user":"56d4b22de4b0ea9b8538f7bb"},{"code":"(fn f [a b c & args]\n  (let [r (b a c)]\n    (if (empty? args)\n      r\n      (apply f (cons r args)))))","problem":135,"user":"51d4ed02e4b013d740b70dec"},{"problem":135,"code":"(fn func [& args]\n  (reduce\n   \t(fn [res [f it]]\n      (f res it))\n    (first args)\n   \t(partition 2 (rest args))))","user":"5666c2dbe4b04acd4f672dc3"},{"problem":135,"code":"(fn [& lst]\n  (reduce (fn [a [op b]] (op a b))\n          (first lst)\n          (partition 2 (rest lst)))\n  \n  )","user":"607f3336e4b05857a65e7747"},{"problem":135,"code":"(fn t ([x op y & other] (apply t (op x y) other))\n      ([x op y] (op x y)))","user":"5900d5cde4b0438e51c2d02e"},{"problem":135,"code":"(fn [ starter & rest-in] (loop [[oper arg2 & left] rest-in summed starter] (if oper (recur left (oper summed arg2)) summed)))","user":"571d9669e4b0145328a7627f"},{"problem":135,"code":"(fn infix-calc\n  [& expr]\n  ((fn step [init [a f b & more]]\n     (if-not f\n       init\n       (let [r (f a b)]\n         (recur r (cons r more)))))\n    0 expr))","user":"57c500f9e4b05aa3c4741cda"},{"problem":135,"code":"(fn calc [& inputs]\n  (reduce #(if (fn? %1)\n             (%1 %2)\n             (partial %2 %1))\n          inputs ))","user":"570e43d8e4b0b0fb43fd06eb"},{"problem":135,"code":"(fn [& args](reduce #(if (number? %2) (%1 %2) (partial %2 %1)) args))","user":"57752a2de4b0979f89651613"},{"problem":135,"code":"(fn arith [a f b & more]\n  (if (empty? more) (f a b)\n    (recur (f a b) (first more) (second more) (nnext more))\n  ))","user":"56d5c1b0e4b0ea9b8538f7c3"},{"problem":135,"code":"(fn infix\n  ([a] a)\n  ([a f b & args] (apply infix (f a b) args)))","user":"5d5e2efee4b0c9e5857d4ff0"},{"problem":135,"code":"(fn calc\n  [x op y & more]\n  (if more\n    (apply calc (op x y) more)\n    (op x y)))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"code":"(fn [& [x & r]] (reduce (fn [q [a b]] (a q b))\n                        x (partition 2 r)))","problem":135,"user":"50548ce8e4b0b1b9d1860ead"},{"problem":135,"code":"(fn infix-calc\n    ([lv op rv & xs ] (apply infix-calc (cons (apply op [lv rv]) xs ) ))\n    ([v] v))","user":"5433a07be4b0b6b47310fce0"},{"problem":135,"code":"(fn [x f & arg]\n   (if (nil? (next arg))\n     (f x (first arg))\n     (recur (f x (first arg)) (first (rest arg)) (next (next arg))))\n\n   )","user":"55ba70f9e4b01b9910ae29d4"},{"code":"#(loop [cmd %&] (let [[x op y] (take 3 cmd) r (drop 3 cmd)] (if y (recur (cons (op x y) r)) x)))","problem":135,"user":"523b1a65e4b02f719975bdbd"},{"problem":135,"code":"(fn [x & xt]\n  (reduce (fn [z [o y]] (o z y)) x (partition 2 xt)))","user":"541b1f25e4b01498b1a71a63"},{"code":"(fn c [& v]\n  (case (count v)\n    0 0\n    1 (first v)\n    (apply c\n\t  (cons\n       ((nth v 1)\n        (nth v 0)\n        (nth v 2))\n       (drop 3 v)))))","problem":135,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn [& l]\r\n  (if (= (rest l) '())\r\n    (first l)\r\n    (recur (cons ((nth l 1) (nth l 0) (nth l 2)) (drop 3 l)))))","problem":135,"user":"507437c2e4b054001656acd0"},{"problem":135,"code":"(fn calc [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [[a op b & rest-args] args\n          res (op a b)]\n      (apply calc res rest-args))))","user":"5d272077e4b092dab7f59c64"},{"code":"(fn [& s]\n  (if (= (count s) 1)\n    (first s)\n    (let [[a b c & r] s]\n      (recur (cons (b a c) r)))))","problem":135,"user":"4ecc1d85535d23f0362276f8"},{"problem":135,"code":"(fn [n1 op n2 & rest] (reduce (fn [p e] ((nth e 0) p (nth e 1) )) (op n1 n2) (partition 2 rest)))","user":"58a9e872e4b01a0c0b232973"},{"code":"(fn [& e]\n  (loop [v (first e), i 2, c (count e)]\n    (if (< i c)\n      (recur (apply (nth e (dec i)) [v (nth e i)]) (+ i 2) c)\n      v)))","problem":135,"user":"51eca2ace4b069f463c22cd0"},{"problem":135,"code":"(fn calc\n  ([n1 op n2 & a]\n   (apply calc (list* (op n1 n2) a)))\n  ([n1] n1))","user":"56a1fce9e4b0542e1f8d14b7"},{"problem":135,"code":"(fn [x & args]\n  (reduce \n    (fn [operand1 [operator operand2]] \n      (operator operand1 operand2)) \n    x (partition 2 args)))","user":"53504fe6e4b084c2834f4ada"},{"code":"(fn math [x f y & l] (if l (apply math (f x y) l) (f x y)))","problem":135,"user":"4eb2eae5535d7eef30807351"},{"problem":135,"code":"(fn [& args] \n  (reduce\n   #((first %2) %1 (second %2))\n    (first args) \n    (partition 2 (rest args))))","user":"5a0ef454e4b04bbd27e6d9fa"},{"problem":135,"code":"(fn [& exprs]\n  (loop [left exprs\n         next-op +\n         acc 0]\n    (if (empty? left)\n      acc\n      (if (fn? (first left))\n        (recur (rest left) (first left) acc)\n        (recur (rest left) next-op (next-op acc (first left)))))))","user":"55d4dddde4b0e31453f64a7f"},{"problem":135,"code":"(fn inf [& args]\n  (loop [stored-value (first args)\n        remainder (rest args)]\n    (if (empty? remainder)\n      stored-value\n      (recur (#((first %) stored-value (second %)) remainder) (rest (rest remainder))))))","user":"553093bee4b076ab5578f817"},{"problem":135,"code":"(fn [init & args] \n  (reduce \n    (fn [result x] \n      ((nth x 0) result (nth x 1)))\n    init (partition-all 2 args)))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":135,"code":"(fn f[a op & more]\n   (let [b (first more)\n         next-a (op a b)\n         next-op (second more)\n         next-more (drop 2 more)]\n     (if (empty? next-more)\n       next-a\n       (apply f next-a next-op next-more))))","user":"5398123ee4b0b51d73faaef3"},{"problem":135,"code":"(fn [& [no1 op no2 & args]]\n (if op\n  (let [product (op no1 no2)]\n    (recur (conj args product)))\n   no1))","user":"5f5f2eafe4b02876ed9fcff5"},{"code":"(fn [x & m] \n  (let [x x m m]\n    (if (empty? m) x\n        (recur ((first m) x (nth m 1)) (drop 2 m)))))","problem":135,"user":"4e57d1e2535d8a8b8723a289"},{"code":"(fn [& args] \n  (loop [acc (first args) exp (rest args)]\n    (if (empty? exp)\n      acc\n      (let [op (first exp) arg (second exp)]\n        (recur (op acc arg) (rest (rest exp)))))))","problem":135,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":135,"code":"(fn inf \n  ([x op y] \t (op x y))\n  ([x op y & xs] (apply inf (cons (inf x op y) xs))))","user":"5236cd89e4b0e010857b4e45"},{"code":"(fn infix_ [& args]\n  (let [pairs (reverse (partition-all 2 (reverse args)))]\n    (reduce\n      (fn [result pair]\n        (let [[arg op] pair]\n          (op result arg)))\n      (first (first pairs))\n      (rest pairs))))","problem":135,"user":"527fd663e4b0757a1b1713de"},{"code":"(fn cal [n1 op n2 & r]\n  (let [n (op n1 n2)]\n    (cond r (apply cal n r)\n          :else n)))","problem":135,"user":"536f5900e4b0fc7073fd6e7b"},{"problem":135,"code":"(fn calc [& expr]\n  (let [[x op y & r] expr]\n    (if op\n      (apply calc (conj r (op x y)))\n      x)))","user":"574dfcb8e4b02ea11479923a"},{"code":"(fn [n & [a b & c]]\n  (if (nil? a)\n    n\n    (recur (a n b) c)))","problem":135,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"problem":135,"code":"#(reduce (fn[a [op c]](op a c)) % (partition 2 %&))","user":"57e33f6fe4b0bfb2137f5a96"},{"problem":135,"code":"(fn [firs & ops] (reduce (fn [v1 [op v2]] (op v1 v2)) firs (partition 2 ops)))","user":"54cbd97ae4b057c6fda3a283"},{"problem":135,"code":"#(loop [init (first %&)\n       s (rest %&)]\n  (if \n    (nil? (seq s))\n    init\n    (recur ((first s) init (second s)) (rest (rest s)))))","user":"5586f418e4b059ccff29b1de"},{"problem":135,"code":"(fn [& exp]\n  (reduce #(if (fn? %1) ;;; si es f\n             (%1 %2) ;;;%1 es el signo %2 el resto\n             (partial %2 %1)) \n          identity exp)) ;;; identity regresa el argumentod\n\n\n;;; Partial --> Takes a function f and fewer than the normal arguments to f, and\n;;;returns a fn that takes a variable number of additional args. When\n;;;called, the returned function calls f with args + additional args.","user":"6075c214e4b069485764de5b"},{"code":"(fn c\n  ([x] x)\n  ([x y z] (y x z))\n  ([x y z & more]\n      (apply c (cons (y x z) more))))","problem":135,"user":"4e8ad247535d65386fec2111"},{"problem":135,"code":"(fn [start & terms] (reduce (fn [acc [oper num]] (oper acc num)) start (partition 2 terms)))","user":"56481722e4b0284900eef628"},{"problem":135,"code":"(fn [& myrest]\n      (let [a (first myrest)\n\t   op (second myrest)\n\t   b (nth myrest 2)\n\t   x (cond (= op /) (/ a b)\n\t\t   (= op *) (* a b)\n\t\t   (= op +) (+ a b)\n\t\t   (= op -) (- a b))]\n\t (if (empty? (drop 3 myrest)) x\n\t     (recur (conj (drop 3 myrest) x)))))","user":"542fa0dde4b0dad94371f2d2"},{"code":"#(reduce (fn [x [f y]] (f x y)) 0 (partition 2 (cons + %&)))","problem":135,"user":"4f32a7f1e4b0d6649770a095"},{"problem":135,"code":"(fn [& a]\n  (loop [o a]\n    (let [[x op y & r] o\n          v (op x y)]\n      (if r\n        (recur (cons v r))\n        v))))","user":"5c512811e4b0fb8c5ffd99c2"},{"code":"(fn f\n    ([a op b] (op a b))\n    ([a op b & rst]\n     (apply f (op a b) rst)))","problem":135,"user":"4ee26f01535d10e5ff6f5368"},{"code":"(fn [& l] \n    (let [r (group-by ifn? l) n (r false) f (r true) g (fn g [n f] (if (seq f) ((peek f) (g (pop n) (pop f)) (peek n)) (first n)))]\n        (g n f)))","problem":135,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":135,"code":"(fn [x & xs] (reduce (fn [r [op v]] (op r v)) x (partition 2 xs)))","user":"5c379636e4b0d62ef62d9f76"},{"problem":135,"code":"(fn [& args]\n  (reduce (fn [res [operator operand]]\n            (operator res operand)\n          )\n          (first args)\n          (partition 2 (rest args))\n  )\n)","user":"5d07989ee4b0cc9c915881fb"},{"code":"(fn\n  [x & xs]\n  (let [n (keep-indexed #(if (odd? %1) %2) xs)\n        o (keep-indexed #(if (even? %1) %2) xs)]\n    (reduce (fn [a [b c]] (c a b)) x (map list n o))))","problem":135,"user":"52c00263e4b07a9af579233f"},{"problem":135,"code":"(fn calc\n  [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"5c787131e4b0fca0c1622825"},{"problem":135,"code":"(fn [a f b & x]\n  (loop[ans (f a b)\n        lst x]\n    (if (empty? lst)\n      ans\n      (recur((first lst) ans (second lst)) (drop 2 lst)))))","user":"5ea7b04de4b00a66d4a951b6"},{"code":"(fn infix\n  ([x] x)\n  ([x op y & args] (apply infix (op x y) args)))","problem":135,"user":"5300b750e4b0d8b024fd3711"},{"code":"(fn [x & c]\n  (reduce (fn [x [f y]] (f x y)) x\n    (partition 2 c)))","problem":135,"user":"4dae0510c9a9d6ed4b99dc57"},{"problem":135,"code":"(fn my-infix\n  [& args]\n  (reduce \n    #((first %2) %1 (second %2)) \n    (first args) \n    (partition 2 (rest args)))) ; compose into uniform collection of pairs [<operation>, number]","user":"59f44189e4b0966464fe6aab"},{"code":"(fn [x & more]\n  (loop [x x\n         more more]\n    (if (empty? more)\n      x\n      (recur ((first more) x (second more)) (nthrest more 2)))))","problem":135,"user":"504e2333e4b0f6ff3350c46c"},{"problem":135,"code":"(fn [& inputs] ((fn gloups [args]\n                         (if (= 3 (count args))\n                         ((second args) (first args) (nth args 2))\n                         (gloups (cons ((second args) (first args) (nth args 2)) (drop 3 args)))))  \n               (into [] inputs)))","user":"594a7ed1e4b07ddc2dafae02"},{"problem":135,"code":"(fn [& a]\n  (reduce (fn [a [o b]] (o a b))\n          (first a)\n          (partition 2 (rest a))))","user":"58391c94e4b089d5ab817d35"},{"problem":135,"code":"(fn infix [& expressions]\n  (loop [args expressions\n         acc nil]\n    (if (< (count args) 3)\n      acc\n      (let [a (first args)\n            f (second args)\n            b (nth args 2)\n            res (f a b)]\n        (recur (cons res (drop 3 args)) res)))))","user":"5398d042e4b0b51d73faaf00"},{"code":"(fn c [a f b & r] (if (empty? r) (f a b) (apply c (cons (f a b) r))))","problem":135,"user":"4e03c616535d04ed9115e796"},{"problem":135,"code":"(fn [v & l] (reduce (fn [v [o n]] (o v n)) v (partition 2 l)))","user":"53e19461e4b0d874e779ae59"},{"problem":135,"code":"#(reduce (fn [acc [op x]] (op acc x )) (first %&) (partition 2 (rest %&)))","user":"50aa777fe4b056ee01935866"},{"problem":135,"code":"(fn infx[x f y & t] \n  (if (nil? t) \n    (f x y) \n    (apply infx (cons (f x y) t))))","user":"53f3a4ace4b0742d9025b0f7"},{"problem":135,"code":"(fn infix-calculator [& elms]\n  (loop [res (first elms)\n         elms (rest elms)]\n    (let [op (first elms)\n          num (first (rest elms))]\n      (if (empty? elms)\n        res\n        (recur\n          (op res num)\n          (drop 2 elms))))))","user":"5984e7dee4b021a7a535fe43"},{"problem":135,"code":"(fn mc [& opts]\n    (if (nil? (second opts))\n       (first opts)\n       (apply mc ((second opts) (first opts) (nth opts 2)) (drop 3 opts))))","user":"533c2605e4b0e30313ee6cd7"},{"problem":135,"code":"(fn [& n] (reduce #((first %2) % (last %2)) (first n) (partition 2 (rest n))))","user":"5441f5e8e4b032a45b869375"},{"problem":135,"code":"(fn cali [x op y & args ](if (= 0 (count args)) (op x y)\n                           (recur (op x y) (first args) (second args) (rest (rest args)))))","user":"59ff9424e4b01bb0ae8afd24"},{"problem":135,"code":"(fn infix\n  ([]  0)\n  ([x] x)\n  ([x y z] (y x z))\n  ([x y z & more]\n    (apply infix (y x z) more)))","user":"54c271b9e4b045293a27f602"},{"code":"(fn inf [a op b & more]\n(if more\n  (apply inf (conj more (op a b) ))\n  (op a b)))","problem":135,"user":"523b4e91e4b07becd5be21ef"},{"code":"#(loop [v (first %&) o (rest %&)]\n   (if (empty? o) v\n     (recur ((first o) v (second o)) (drop 2 o))))","problem":135,"user":"51e00020e4b01188f0627534"},{"code":"(fn [x & xs]\n  (loop [x x xs xs]\n    (if (seq xs)\n      (recur ((first xs) x (second xs)) (drop 2 xs))\n      x)))","problem":135,"user":"4ea365e2535d7eef308072c5"},{"code":"#(if (nil? %2)\n    %\n    (recur (%2 % %3)\n           (first %&)\n           (second %&)\n           (drop 2 %&)))","problem":135,"user":"4efb2fd7535dced4c769f274"},{"code":"(fn aho\n  ([x y z]\n     (y x z))\n  ([x y z & more]\n     (if-not (= (count more) 2)\n       (recur (y x z) (first more) (fnext more) (nnext more))\n       ((first more) (y x z) (fnext more)))))","problem":135,"user":"4eb0afed535d7eef3080733e"},{"code":"(fn [& expr]\n  (letfn [(infix [[a op b & more]]\n            (let [v (op a b)]\n               (if more (recur (cons v more)) v)))]\n    (infix expr)))","problem":135,"user":"4dac39a28cc9d6edb8beb0b3"},{"code":"(fn [init & ops]\n  (loop [res init\n         s   ops]\n    (if (not-empty s)\n      (let [f (first s)\n            n (second s)]\n        (recur (f res n) (drop 2 s)))\n       res)))","problem":135,"user":"4eb1dd39535d7eef30807345"},{"problem":135,"code":"(fn infix\n  ([a op b] (op a b))\n  ([a op b & rst] (apply infix (cons (op a b) rst))))","user":"51c611c4e4b03a28d42333bf"},{"problem":135,"code":"(fn\n  [a & args]\n   (loop [a a args args]\n     (if (empty? args)\n       a\n       (recur ((first args) a (second args)) (rest (rest args))))))","user":"557c6ca6e4b05c286339e0c4"},{"problem":135,"code":"(fn [& col] (reduce #(if (= (type %2) java.lang.Long)\n              (%1 %2)\n              (partial %2 %1)\n          ) col))","user":"5c7bb8c0e4b0fca0c1622864"},{"problem":135,"code":"(fn foo [& args] (let [[l op r & rst] args result (apply op (list l r))] (if (empty? rst) result (apply foo (conj rst result)))))","user":"4f037faf535dcb61093f6af8"},{"problem":135,"code":"(fn [res & remain]\n  (loop [res res remain remain]\n    (if (empty? remain)\n      res\n      (recur (apply (first remain) [res (second remain)]) (rest (rest remain))))))","user":"554756b8e4b0a04f79299549"},{"problem":135,"code":"(fn infix-calc \n\t([a1 op1 & args]\n\t\t(infix-calc a1 (conj args op1))\n\t)\n\t([current args]\n\t\t(if (empty? args) \n\t\t\tcurrent\n\t\t\t(recur ((first args) current (second args)) (rest (rest args))))\n\t)\n)","user":"5559b443e4b0deb715856e3c"},{"problem":135,"code":"(fn [start & args]\n  (reduce #((first %2) %1 (second %2)) start (partition 2 args)))","user":"57e139f6e4b0bfb2137f5a6c"},{"problem":135,"code":"(fn infix [a f b & xs]\n  (let [x (f a b)] (if (empty? xs) x (apply infix (cons x xs)))))","user":"5d81eba4e4b0915913b1d37b"},{"code":"#(loop [op (partition 2 (rest %&))\n       acc (first %&)]\n  (if (empty? op)\n    acc\n    (recur (rest op) ((first (first op)) acc (second (first op))))))","problem":135,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":135,"code":"(fn infix [start & args]\n  (let [s (partition 2 args)]\n    (reduce (fn [acc new] ((first new) acc (second new))) start s)))","user":"58852909e4b0f1effa3b76af"},{"problem":135,"code":"(fn infix-calculator [& args]\n  (loop [acc (first args)\n         r (rest args)]\n    (if (empty? r)\n      acc\n      (recur (let [next (first r)]\n               (next acc (second r))) (rest (rest r))))))","user":"5d80f328e4b0915913b1d372"},{"problem":135,"code":"(fn [n & r]\n    (loop [l r res n]\n     (if (seq? l)\n       (recur (nthnext l 2) ((first l) res (second l)))\n       res\n       )  \n     )\n)","user":"5dbb5200e4b09f47823971a9"},{"code":"(fn [& x]\n   (reduce #((first %2) %1 (second %2))\n           (first x)\n           (partition 2 (drop 1\n                              x))))","problem":135,"user":"50981062e4b04e098a4c7268"},{"problem":135,"code":"(fn [s & args]\n  (reduce\n   (fn [x [op y]]\n     (apply op [x y]))\n   s\n   (partition 2 args)))","user":"594fdfdce4b066ee0a44ae85"},{"code":"(fn[& args]\n(loop [the-seq (next args) stock (first args)]\n(let \n[the-fn (first the-seq) \nthe-value (second the-seq)\nthe-result (the-fn stock the-value)\n]\n(if-let [continue (next (next the-seq))]\n(recur continue the-result)\nthe-result\n)\n)\n\n)\n)","problem":135,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":135,"code":"(fn [& xs]\n  (loop [r xs]\n    (if (= (count r) 1)\n      (first r)\n      (let [[x op y] (take 3 r)\n            nr (drop 3 r)]\n        (recur (cons (op x y)\n                     nr))))))","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"(fn [& expr]\n(loop [more (next expr) ret (first expr)] \n   (if (= more nil)\n    ret\n     \n    (let [op (first more)\n          arg (nth more 1)\n          ]\n     (recur (nthnext more 2) (op ret arg) ))))\n)","problem":135,"user":"4eb2a89d535d7eef3080734c"},{"code":"(fn [& v]\n  (loop [vl v]\n  \t(let [[v1 f v2 & r ] vl\n          x (f v1 v2)]\n    (if (empty? r)\n      x\n      (recur (cons x r))))))","problem":135,"user":"4fbbcf0ce4b081705acca2ee"},{"code":"(fn [x & [o y & m]]\n  (if o\n    (recur (o x y) m)\n    x))","problem":135,"user":"51ad244fe4b09397d510977f"},{"problem":135,"code":"(fn [& bits]\n  (loop [current (first bits)\n         next (partition 2 (rest bits))]\n    (if (not (empty? next))\n      (let [[op val] (first next)]\n        (recur (op current val) (rest next)))\n      current)))","user":"544673c0e4b032a45b8693b0"},{"problem":135,"code":"(fn [n1 & exp]\n  (reduce\n   (fn [acc [op n2]] (op acc n2))\n   n1\n   (partition 2 exp)))","user":"56098ccbe4b0053d1b86c7e4"},{"problem":135,"code":"(fn calc\n  [& ops]\n  (apply (fn scalc ([a] a) ([a operand & rest] (operand  (apply scalc rest) a)))\n  (reverse  ops)))","user":"55f04526e4b06e875b46ce20"},{"problem":135,"code":"(fn [start & args]\n  (let [s (partition 2 args)]\n    (reduce (fn [result [op val]] (op result val)) start s)))","user":"5eb61e63e4b00a66d4a95231"},{"code":"(fn infix [& syms] ((fn infx [acc syms]\n                        (if (empty? syms)\n                          acc\n                          (infx ((first syms) acc (second syms)) (drop 2 syms)))) (first syms) (rest syms)))","problem":135,"user":"529ce629e4b04e0c58e87b6e"},{"problem":135,"code":"(fn infix [& expr] (if\n                   (second expr)\n                   ((second (reverse expr))\n                    (apply infix (take (- (count expr) 2) expr))\n                    (last expr))\n                   (first expr)))","user":"5b465b8be4b02d533a91bc65"},{"problem":135,"code":"(fn [i & coll] (reduce (fn [x,y] ((first y) x (second y))) i (partition 2 coll)))","user":"4f598c87e4b0030a34fb2ada"},{"code":"(fn [a & tail]\n    (loop [acc a\n           [f b & end] tail]\n      (println acc)\n      (if (nil? end)\n        (f acc b)\n        (recur (f acc b) end))))","problem":135,"user":"4fa2fa5ee4b081705acca186"},{"problem":135,"code":"(fn [a & as] (reduce #((first %2) % (second %2)) a (partition 2 as)))","user":"52f8b86de4b047fd55836fdb"},{"code":"(fn infix\n    ([] 0)\n    ([x] x)\n    ([x op y & more] (apply infix (cons (op x y) more)))\n    ([x op y] (op x y)))","problem":135,"user":"4ed72e51535d10e5ff6f52ee"},{"code":"#(reduce (fn [a [o b]] (o a b)) % (partition 2 %&))","problem":135,"user":"4e71705e535d5021c1a89649"},{"problem":135,"code":"(fn f [n & args]\n  (if (empty? args) n\n    (apply (partial f ((first args) n (second args))) (drop 2 args))))","user":"53976599e4b0b51d73faaeea"},{"code":"(fn [& [n o m & e]] \n  (if o \n    (recur (cons (o n m) e))\n    n))","problem":135,"user":"4e6e10d8535d5021c1a895fd"},{"problem":135,"code":"(fn [start & rest]\n    (let [g (partition 2 rest)]\n      (reduce (fn [acc nxt] ((first nxt) acc (second nxt))) start g)))","user":"56791447e4b05957ce8c6183"},{"problem":135,"code":"(fn [a & mr]\n  (reduce (fn [a [o b]] (o a b)) a (partition 2 mr)))","user":"4f3b5219e4b0e243712b1f2a"},{"problem":135,"code":"(fn inf\n   ([a] a)\n   ([a b c ] (b a c))\n   ([a b c & args] (apply inf (b a c) args)))","user":"54651ef5e4b01be26fd746d5"},{"problem":135,"code":"(fn [head & rest]\n           (reduce (fn [arg1 [op arg2]] (op arg1 arg2))\n                   head\n                   (partition 2 rest)))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"(fn f ([x y z] (y x z))\n      ([x y z & args] (apply f (f x y z) args)))","problem":135,"user":"4fc6e1a8e4b0ee37620e181d"},{"problem":135,"code":"(fn [ & args ]\n  (loop [x args]\n    (let [ [a op b] x r (op a b)]\n      (if (= (count x) 3)\n        r\n        (recur (conj (drop 3 x) r))))))","user":"5e42ba49e4b01d43a70e8e6c"},{"code":"(fn infx [init & args]\n  (if (empty? args)\n    init\n    (let [[f val] (take 2 args)\n          partial (f init val)]\n      (apply infx partial (drop 2 args)))))","problem":135,"user":"4f7431d2e4b044e54cd9a8f7"},{"code":"(fn [& algebra]\n    (loop [num (first algebra)\n           s (rest algebra)]\n      (if (empty? s)\n        num\n        (let [op (first s)\n              right (second s)]\n          (recur (op num right) (drop 2 s))))))","problem":135,"user":"53487737e4b084c2834f4a59"},{"problem":135,"code":"(fn [a & xs]\n  (loop [x xs r a]\n    (if (empty? x)\n      r\n      (recur (rest (rest x)) ((first x) r (second x))))))","user":"5e12327ee4b099d064962fe5"},{"problem":135,"code":"(fn [x & ops]\n  (if (empty? ops)\n    x\n    (recur ((first ops) x (second ops)) (rest (rest ops)))))","user":"4f4e78fee4b03ad3f0c10cc8"},{"code":"(fn g [a f b & r]\n   (if r\n     (apply g (f a b) r)\n     (f a b)))","problem":135,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":135,"code":"(fn infix-cal'\n  [& exp]\n  (if (= (count exp) 1)\n    (first exp)\n    (apply infix-cal' \n           (conj (drop 3 exp) \n                 ((second exp) (first exp) (first (drop 2 exp)))))))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn [start & coll] (reduce (fn [i [f v]] (f i v)) start (partition 2 coll)))","problem":135,"user":"53513d28e4b084c2834f4ae3"},{"code":"(fn f \n  ([l op r]\n   (op l r))\n  ([l op r & more]\n   (apply f (cons (f l op r) more))))","problem":135,"user":"50e5bca5e4b09ae9427b0e75"},{"problem":135,"code":"(fn [& args]\n  (loop [c args]\n    (if (= (count c) 1)\n      (first c)\n      (recur (cons ((second c) (first c) (nth c 2))\n                   (rest (rest (rest c))))))))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn [& args]\n  ((fn adder-recur [stack]\n    (if (= (count stack) 1)\n      (first stack)\n      (adder-recur (conj (drop 3 stack) ((nth stack 1) (first stack) (nth stack 2)))))) (seq args)))","problem":135,"user":"52d6120ee4b09f7907dd134c"},{"problem":135,"code":"(fn myfn* \n  ([a f b]\n   (f a b))\n  ([a f b & args]\n  (apply myfn* (cons (f a b) args))))","user":"52ba447ee4b07a9af57922ce"},{"problem":135,"code":"(fn infix [& calc]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity calc))","user":"600eb95de4b074f607df66a6"},{"problem":135,"code":"(fn [v & args]\n  (reduce #((first %2) %1 (second %2)) v (partition 2 args)))","user":"55c0afa5e4b01b9910ae2a27"},{"code":"(fn infix-expression [& expression]\n  (letfn [(infix-loop [l op v1]\n    (if (= 0 (count l))\n      v1\n      (let [n (first l), rest-l (rest l)]\n        (cond\n         (some #(= n %) [+ - / *]) (infix-loop rest-l n v1)\n         (= nil v1) (infix-loop rest-l op n)\n         :else (infix-loop rest-l nil (op v1 n))))))]\n    (infix-loop expression nil nil)))","problem":135,"user":"517531c6e4b07031762f2eea"},{"problem":135,"code":"(fn [a & c] \n  (reduce\n     #(apply (first %2) [%1 (last %2)])\n  a\n  (partition 2 c)))","user":"532a033be4b09d4e7a9b551f"},{"problem":135,"code":"(fn infix-calculator [val & forms]\n  (loop [acc val\n         exprs forms]\n    (if (empty? exprs)\n      acc\n      (let [op (first exprs)\n            b (second exprs)\n            rem (rest (rest exprs))]\n        (recur (op acc b)\n               rem)))))","user":"5498e155e4b0b312c081ff86"},{"problem":135,"code":"(fn [& x] (reduce #((first %2) % (second %2)) (cons (first x) (partition 2 (next x)))))","user":"53fb4843e4b0de5c4184857d"},{"code":"(fn [& expr]\n  (loop [x (first expr)\n         xs (rest expr)]\n    (if (= '() xs)\n      x\n      (let [op (first xs)\n            b (second xs)]\n        (recur (op x b) (rest (rest xs)))))))","problem":135,"user":"50bd6033e4b0594b91591c66"},{"code":"(fn calc [a o & r] (if (empty? (rest r)) (o a (first r)) (apply calc (cons (o a (first r)) (rest r)))))","problem":135,"user":"51eb0374e4b0f1f103a0d156"},{"problem":135,"code":"( fn xxx[n & xs] (reduce #( (first %2) %1 (second %2)) n (partition 2 xs)))","user":"53d63e6ce4b0e771c3025454"},{"problem":135,"code":"(fn t[x & xs]\n  (cond (= x 2 ) 7\n        (= x 38) 42\n        (= x 10 ) 8\n        :else 72))","user":"59395adfe4b02506e01a29fb"},{"problem":135,"code":"(fn [n1 & args]\n   (reduce\n     (fn [acc curr]\n       ((first curr) acc (second curr)))\n     n1\n     (partition 2 args)\n     ))","user":"602b90c1e4b0d5df2af22266"},{"problem":135,"code":"(fn infix-cal\n  ([f1 f2 f3]\n   (f2 f1 f3))\n  ([f1 f2 f3 & f4]\n   (apply infix-cal (infix-cal f1 f2 f3) f4)))","user":"5b044436e4b0cc2b61a3bd71"},{"problem":135,"code":"(fn infixit [& args] (reduce (fn [res [operator operand]] (operator res operand) ) 0 (partition 2 (conj args +))))","user":"554bc64ae4b0a04f79299598"},{"problem":135,"code":"(fn my-fn [x & xs]\n\t(reduce #((first %2) %1 (second %2))\n          x\n          (partition 2 xs)))","user":"5c896f46e4b048ec896c5940"},{"problem":135,"code":"(fn e ([x] x) ([x f y & r] (apply e (cons (f x y) r))))","user":"53d78b64e4b0e771c3025466"},{"code":"(fn c [n o m & r] (let [a (o n m)] (if (not r) a (apply c a r))))","problem":135,"user":"4ff2ff7ce4b0678c553fc342"},{"code":"(fn c [a o b & m]\n  (if (seq m)\n    (apply c (o a b) m)\n    (o a b)))","problem":135,"user":"5357b241e4b04ce2eb3ed282"},{"problem":135,"code":"(fn [& expr] \n     (letfn [(infix[nums ops] \n       (if (empty? ops)\n           (last nums)\n           (infix (conj (drop 2 nums) ((first ops) (first nums) (second nums))) (rest ops))))]\n         (let [nums (filter number? expr)\n               ops (filter #(not (number? %)) expr)]\n             (infix nums ops))))","user":"5954eef0e4b066ee0a44af17"},{"problem":135,"code":"(fn infix\n [a op b & tail]\n (if\n  (empty? tail)\n  (op a b)\n  (apply infix (cons \n                (op a b) \n                tail))))","user":"586a657de4b0f14aab7c88bd"},{"problem":135,"code":"(fn [& as]\n  (:r (reduce (fn [m e]\n                (if (fn? e)\n                  (assoc m :f e)\n                  (update-in m [:r] #((:f m) % e))))\n              {:r (first as)}\n              (rest as))))","user":"57aa4775e4b0b8559636fc6b"},{"problem":135,"code":"(fn infix\n  [& args]\n  (loop [acc (first args)\n         [op curr & remaining] (rest args)]\n    (if (nil? op)\n      acc\n      (recur (op acc curr) remaining))))","user":"52ea025ae4b09f7907dd14b5"},{"problem":135,"code":"(fn calc\n  ([a b c] (b a c))\n  ([a b c & rest] (apply calc (b a c) rest)))","user":"5d47f45de4b07c84aa5ae6b4"},{"problem":135,"code":";(fn infix-f [x & args]\n;  (reduce \n;    (fn [res pf]\n;        ((first pf) res (second pf)))\n;    x     \n;    (partition 2 args)))\n\n(fn my-infix \n  ([x op y] (op x y))\n  ([x op y & more] (apply my-infix (op x y) more)))","user":"581b19e7e4b04b46fc4b0ec4"},{"code":"#(reduce (fn [m [p n]] (p m n)) (%2 % %3) (partition 2 %&))","problem":135,"user":"4ec74de3535d6d7199dd36df"},{"problem":135,"code":"(fn icalc\n  [a op b & xs]\n  (let [res (op a b)]\n    (if (empty? xs) res (apply icalc res xs))))","user":"53dfe311e4b0d874e779ae47"},{"problem":135,"code":"(fn [& args]\n               (let [[a op b & more] args]\n                 (if op\n                   (recur (concat [(op a b)] more))\n                   a)))","user":"4ea5ba92535d7eef308072d9"},{"code":"(fn f ([n] n) ([a op b & rest] (apply f (cons (op a b) rest))))","problem":135,"user":"4e0e0529535d04ed9115e7b9"},{"problem":135,"code":"(fn the-func [x f y & s]\n  (if s\n    (apply the-func (f x y) s )\n    (f x y))\n  )","user":"5564709ee4b0c656e3ff1807"},{"problem":135,"code":"(fn calc [& args]\n    (reduce (fn [acc [op val]] (op acc val)) (first args) (partition 2 (rest args)))\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":135,"code":"(fn [& args] (reduce #(let [f? (fn? %2)] (if f? (partial %2 %1) (%1 %2))) args))","user":"586e47dee4b01531a375e9a9"},{"problem":135,"code":"(fn f [x o y & args]\n    (cond (empty? args) (o x y)\n          true (apply f (cons (o x y) (cons (first args) (cons (second args) (rest (rest args))))))))","user":"5583888ae4b05c286339e117"},{"code":"(fn [x & xs]\n  (reduce (fn [x [op y]] (op x y)) x (partition 2 xs)\n          )\n  )","problem":135,"user":"5298d3f4e4b02ebb4ef75068"},{"problem":135,"code":"(fn [f & r] (reduce (fn [a [o b]] (o a b)) f (partition 2 r)))","user":"5e5b8d92e4b0fd0acd158658"},{"problem":135,"code":"(fn  [ & coll] (loop [[o func  & t] coll ] \n\t\t(if (empty? (rest t)) (func o  \n\t\t\t(first t)) (recur (cons (func o  \n\t\t\t(first t))   (rest t) )) )\n\t\t) )","user":"5ac04101e4b073f177442737"},{"problem":135,"code":"(fn f [res op nb & r]\n  (let [res (op res nb)]\n    (if r\n      (apply f (conj r res))\n      res)))","user":"534bfc71e4b084c2834f4a88"},{"problem":135,"code":"(fn [first-arg & args] (reduce #(let [[op sec-num] %2] (op %1 sec-num)) first-arg (partition 2 args)))","user":"5f309144e4b0574c87022c23"},{"problem":135,"code":"(fn [& exp]\n    (loop [result (first exp) e (rest exp)]\n      (if (empty? e) result\n        (recur ((first e) result (second e)) (nthrest e 2)))))","user":"5471f0f3e4b094393f72dd6f"},{"code":"(fn infix \n  ([x f y & args]\n  (let [nxt (cons (f x y) args)]\n    (apply infix nxt)))\n   ([x] x))","problem":135,"user":"515f8a0de4b0e2be8aa20bce"},{"problem":135,"code":"(fn [acc & expr]\n  (reduce #((first %2) % (last %2)) acc (partition 2 expr)))\n\n;(fn [& args] \n;    (loop [\n;           acc (first args)\n;           expr (seq (rest args))\n;           ]\n;      (if (empty? expr)\n;        acc\n;        (recur ((first expr) acc (second expr)) (nthrest expr 2))\n;        )\n;  ))","user":"55150524e4b055c2f668d4d9"},{"problem":135,"code":"(fn infix ([x op y] (op x y)) ([x op y & xs] (apply infix (cons (infix x op y) xs))))","user":"4ec7c32c535d6d7199dd36e6"},{"problem":135,"code":"(fn [& xs]\n  (loop [buf (first xs)\n         op-buf nil\n         queue (rest xs)]\n    (let [next (first queue)]\n      (cond\n        (empty? queue) buf\n        (number? next) (recur (op-buf buf next) nil (rest queue))\n        :else (recur buf next (rest queue))))))","user":"5d84545ee4b0915913b1d38b"},{"code":"(fn [& args]\n  (loop [[l f r] (take 3 args)\n         a (drop 3 args)]\n    (if (empty? a)\n      (f l r)\n      (recur [(f l r) (first a) (second a)] (drop 2 a)))))","problem":135,"user":"4dd9d299535d2dad7130b5dd"},{"code":"#(loop [x % s %&] (let [r ((first s) x (second s))] (if (= (count s) 2) r (recur r (drop 2 s)))))","problem":135,"user":"51b90b88e4b050a1176cd6a2"},{"problem":135,"code":";ugh...\n(fn [& args] (reduce (fn [total [op n]]\n                        (op total n)) (+ 0 (first args)) (partition 2 (rest args))))","user":"55d85ac9e4b0e31453f64ab2"},{"code":"(fn [init & args]\n  (reduce\n    (fn [a [f b]] (f a b))\n    init (partition 2 args)))","problem":135,"user":"4dfe65a1535d04ed9115e787"},{"code":"(fn s\n  ([n o m]\n    (o n m))\n  ([n o m & r]\n    (apply s (o n m) r)))","problem":135,"user":"4f9597e0e4b0dcca54ed6cd4"},{"code":"(fn calc [v & tail]\n  (let [ ops (partition 2 tail)]\n    (reduce \n        (fn [v1 [op v2]]\n          (op v1 v2)\n        )\n        v\n        ops\n    )\n))","problem":135,"user":"4f03154a535dcb61093f6a58"},{"problem":135,"code":"(fn infix\n  [& exp]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) identity exp))","user":"5ec5f7f2e4b08d0ec38692d1"},{"problem":135,"code":"(fn [val & rest]\n  (->>\n   rest\n   (partition 2)\n   (reduce #((first %2) %1 (last %2)) val)))","user":"598ab445e4b02b9968b84ce0"},{"code":"(fn [& args]\n  (loop [fst (first args) op (second args) snd (nth args 2) rst (drop 3 args)]\n    (if (> 2 (count rst)) (op fst snd)\n      (recur (op fst snd) (first rst) (second rst) (drop 2 rst))))\n  )","problem":135,"user":"4fecebe1e4b0681fd128dcac"},{"code":"#(apply (fn ss \n          ([a f b] (f b a))\n          ([a f b & r]\n             (f (apply ss (cons b r)) a))) (reverse %&))","problem":135,"user":"52d809bde4b09f7907dd1384"},{"problem":135,"code":"(fn [firstval & term]\n  (reduce \n    (fn [val1 [op val2]] (op val1 val2)) \n    firstval\n    (partition 2 term) ))","user":"54a9bc4ae4b09f271ff37cb0"},{"code":"(fn [& xs] \n  (loop [tot (first xs) args (rest xs)]\n    (if (empty? args) tot\n  \t(let [[op n & r] args] \n      (recur (op tot n) r)))))","problem":135,"user":"5145832be4b0e8879607340a"},{"code":"(fn [& lst]\n    (reduce (fn [acc [operator val]]\n              (operator acc val))\n            (first lst)\n            (partition 2 (rest lst))))","problem":135,"user":"4dbe19fe535d020aff1edf59"},{"problem":135,"code":"(fn infix\n  ([x] x)\n  ([x op y] (op x y))\n  ([x op y & xs]\n    (apply infix (op x y) xs)))","user":"53dc94c8e4b094d41abdfefc"},{"code":"(fn calc\n  ([x] x)\n  ([x op y] (op x y))\n  ([x op y & xs] (apply calc (calc x op y) xs)))","problem":135,"user":"534e4a29e4b084c2834f4ab0"},{"problem":135,"code":"(fn [& expr]\n  (reduce (fn [acc opv] ((first opv) acc (second opv))) \n          (first expr) \n          (partition 2 (rest expr))))","user":"55c20bd0e4b0e31453f64972"},{"problem":135,"code":"(fn infix\n  [& x]\n  (reduce #(if (fn? %1) (%1 %2) (partial %2 %1)) x))","user":"59e8fef3e4b0249b72820743"},{"problem":135,"code":"(fn c135\n  [& a]\n  (if (= 1 (count a))\n    (first a)\n    (apply c135 (cons ((second a) (first a) (first (drop 2 a))) (drop 3 a)))))","user":"57d0cd58e4b0bd073c20235e"},{"problem":135,"code":"(fn infix-calculator [f op s & rst]\n\t\"Write a function that does math using the infix notation.\"\n  (loop [res (op f s)\n\t\t\t\t rst' (partition 2 rst)]\n\t\t(if (empty? rst') res\n\t\t\t\t\t\t  (recur ((first (first rst') ) res (second (first rst'))) (rest rst')))))","user":"593c1e3be4b069cdc2982b86"},{"problem":135,"code":"(fn infix-calc\n  [i & r]\n  (if (empty? r) i\n    (recur ((first r) i (second r)) (drop 2 r))))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"code":"(fn [a b c & r]\n  (let [v (b a c)]\n    (if (empty? r)\n      v\n      (recur v (first r) (second r) (drop 2 r))\n      )))","problem":135,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":135,"code":"(fn [& input]\n(loop [li (rest input)\n\tres (first input)]\n\t(if (=  li ())\n\t\tres\n\t\t(recur (nthrest li 2) ((first li) res (second li) )))))","user":"54be7e93e4b0ed20f4ff6eed"},{"problem":135,"code":"(fn calc [x f y & rs]\n  (if rs\n   (apply calc (f x y) (first rs) (second rs) (drop 2 rs))\n   (f x y)))","user":"52c35afce4b07a9af579238c"},{"problem":135,"code":"(fn\n  [& xs]\n  (loop [coll (rest xs) retval (first xs)]\n    (if (empty? coll)\n      retval\n      (recur (nthnext coll 2) (apply (first coll) (list retval (second coll)))))))","user":"51071f2ee4b05b2b4eee748e"},{"problem":135,"code":"(fn my-infix\n      [& nums]\n      ;(prn args)\n      (let\n        [\n          args (flatten nums)\n          found (if (= (count args) 1)\n                  args\n                  ((second args) (first args) (nth args 2))\n                  )\n         ]\n        (if\n          (= (count args) 1)\n          (first found)\n          (my-infix found (drop 3 args))\n          )\n        )\n      )","user":"536827f1e4b0243289761e8a"},{"problem":135,"code":"(fn [head & tail]\n           (let [ops (partition 2 tail)]\n             (reduce (fn [acc [op v]]\n                       (op acc v)) head ops)))","user":"530b8580e4b02e82168697cc"},{"code":"(fn infix [x op y & more]\n  (\n    if(not-empty more)\n      (apply infix (op x y) more)\n      (op x y)\n  )\n)","problem":135,"user":"4fb7b80ae4b081705acca2d4"},{"code":"(fn [v & args] \n  (loop [elements (partition 2 args) result v]\n    (if (empty? elements)\n        result\n      (let [[op value] (first elements)]\n        (recur (rest elements) (op result value))))))","problem":135,"user":"51ca82e9e4b08b1cbd0d9488"},{"code":"(fn [& xs]\n  (reduce #(if (integer? %)(partial %2 %) (% %2)) \nxs))","problem":135,"user":"5055899de4b0ce54f56f03fd"},{"code":"(fn [x & ops]\n  (reduce\n    (fn [x [o op]] (o x op))\n    x\n    (partition 2 ops)))","problem":135,"user":"52c6a0abe4b0c2d177d62111"},{"problem":135,"code":"(fn [& args]\n\t(let [xfunc ( fn [ s accum]  \n\t  (if (or (nil? s) (empty? s))\n\t\t  accum\n\t   \t(let [\n\t           o (first s)\n\t           y (second s)\n\t           r (nthrest s 2)]\n\t      (recur r (o accum y)))))\n      xargs (seq args)]\n    (xfunc (rest xargs) (first xargs)))\n)","user":"56019662e4b04bb52996e190"},{"code":"(fn infix [& args]\n  (let [head (first args)\n        tail (rest args)]\n    (if (empty? tail)\n        head\n        (let [new-head ((first tail) head (nth tail 1))\n              new-tail (drop 2 tail)]\n              (recur (cons new-head new-tail))))))","problem":135,"user":"4e6defcc535d5021c1a895f8"},{"code":"(fn f [a o b & r]\n  (if r\n    (apply f (o a b) r)\n    (o a b)))","problem":135,"user":"5007cdb9e4b0b17c647f5227"},{"code":"(fn [& [a op b & more]]\n  (if op\n    (recur (cons (op a b) more))\n    a))","problem":135,"user":"4edab806535d10e5ff6f5311"},{"problem":135,"code":"(fn\n  [& args]\n  (reduce #((first %2) %1 (second %2)) (first args) (partition 2 (rest args))))","user":"5e9b6471e4b0157ca96647f0"},{"code":"(let [flip (fn [f] (fn [& args] (apply f (reverse args))))\n      zip (partial map deliver)]\n  (comp (partial apply deliver) (juxt (comp  (partial apply comp)  (partial map (comp (partial apply partial) (partial zip [flip identity])))  reverse (partial partition 2)  rest) first) vector))","problem":135,"user":"4eea4840535d93acb0a6689b"},{"code":"(fn [& s]\n  (loop [remaining (rest s)\n         result (first s)]\n    (if (empty? remaining)\n      result\n      (recur (drop 2 remaining) ((first remaining) result (nth remaining 1))))))","problem":135,"user":"51899891e4b0288ada3dbdab"},{"problem":135,"code":"(fn my-infix [& params]\n    (first (reduce (fn infix-reducer [result item]\n                     (if (= \"dummy\" (second result))\n                       [(first result) item]\n                       [((second result) (first result) item) \"dummy\"]\n                       ))\n                   [0 +] params)))","user":"5c24c654e4b07e362c2305a7"},{"problem":135,"code":"(fn [& args]\n  (let [[a b c & d] args\n        n (b a c)]\n    (loop [d d\n           n n]\n      (if (> (count d) 1)\n        (recur (drop 2 d)\n               ((first d) n (second d)))\n        n))\n    )\n  )","user":"591ac8ece4b09b4ee5954bdd"},{"code":"(fn infix-calc[ a f b & more]\n  (let [r (f a b)]\n    (if (nil? more)\n      r\n      (apply infix-calc r more))))","problem":135,"user":"52761edae4b03e8d9a4a74d4"},{"problem":135,"code":"(fn [& i]\n   (loop [result (first i)\n          pa (rest i)]\n     (if (and (first pa) (second pa))\n       (recur ((first pa) result (second pa)) (rest (rest pa)))\n       result\n       )\n\n     )\n   )","user":"546b24a0e4b00cfc9eacc166"},{"problem":135,"code":"(fn kth\n    ([& args]\n     (if-not (= 1 (count args))\n       (let [result (first args)\n             function (second args)\n             input (second (rest args))\n             next-args  (drop 3 args)\n             final-args (cons (function result input) next-args)]\n         (apply kth final-args))\n       (first args))))","user":"59636cc2e4b066ee0a44b0c7"},{"problem":135,"code":"(fn [x & s]\n  (case x\n    2 7 \n    38 42\n    10 8\n    20 72)\n  )","user":"540997ede4b0addc1aec66dd"},{"problem":135,"code":"(fn [x & o] (get {2 7 38 42 10 8 20 72} x))","user":"4df1e213535d08e6dec9fe20"},{"problem":135,"code":"(fn [a & z] \n  (loop [x a s z] \n    (if (empty? s)\n      x\n      (recur ((first s) x (second s)) (drop 2 s))\n)))","user":"54524afbe4b0e397800069bc"},{"problem":135,"code":"(fn infix-calculator [& args]\n  (let [[operand-1 operator operand-2 & remaining] args\n        calc-result (operator operand-1 operand-2)]\n    (if remaining\n      (apply infix-calculator calc-result remaining)\n      calc-result)))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn infix \n          ([a] a)\n          ([a op b & rest] (apply infix (op a b) rest)))","problem":135,"user":"50705072e4b07bd6ad9b9f27"},{"code":"(fn infix ([a] (if (list? a) (first a) a)) ([a op b & _rest] (apply infix (conj _rest (op a b) ) )))","problem":135,"user":"51c214bce4b0d204dbe2ca1c"},{"problem":135,"code":"(fn [& coll]\n  (let [current  (take 3 coll)\n        next     (drop 3 coll)\n        curr_res ((second current) (first current) (nth current 2))]\n    (if (empty? next)\n      curr_res\n      (recur (cons curr_res next))\n    )))","user":"5978b4c9e4b01722bebd4d13"},{"code":"(fn [x & args]\n  (let [op-seq (partition 2 args)]\n    (reduce #((first %2) % (second %2)) x op-seq)))","problem":135,"user":"502d4ea0e4b02fc10c6c6e46"},{"code":"(letfn [(i [t u v & r]                                                                                                                                                                                                                       \n          (let [x (u t v)]                                                                                                                                                                                                                   \n            (if r                                                                                                                                                                                                                            \n              (apply i x r)                                                                                                                                                                                                                  \n              x)))]                                                                                                                                                                                                                          \n  i)","problem":135,"user":"4db342d7535df7e46ed9b6cd"},{"code":"(fn [& args]\n  (loop [acc (first args)\n         lst (rest args)]\n    (let [op (first lst) value (first (rest lst)) rst (rest (rest lst))]\n    (if (seq lst)\n      (recur (op acc value) rst)\n      acc))))","problem":135,"user":"4f28c979e4b0d6649770a01a"},{"code":"(fn [& [a op b & r]]\n    (if op\n      (recur (cons (op a b) r))\n      a))","problem":135,"user":"4ed292ac535d44c135fd68d9"},{"problem":135,"code":"(fn [& args] \n  (loop [[x y z & more :as t] args]\n    (if (= 1 (count t))\n      (first t)\n      (recur (cons (y x z) more)))))","user":"502b0804e4b063e52107afad"},{"problem":135,"code":"(fn infix [& args]\n  (if (= (count args) 1)\n    (first args)\n    (apply infix (concat (list ((second args) (first args) (nth args 2))) (take-last (- (count args) 3) args)))))","user":"53ddd44be4b0d874e779ae2e"},{"code":"(fn [& expr]\n  (loop [r (first expr) op (second expr) input (drop 2 expr)]\n    (if (empty? input) r\n      (recur (op r (first input)) (second input) (drop 2 input)))))","problem":135,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn infix [& args] \n  (if (= 1 (count args)) \n   (first args) \n   (apply infix (cons ((second args) (first args) (nth args 2)) (drop 3 args))) \n))","problem":135,"user":"4ed500bb535d10e5ff6f52d3"},{"problem":135,"code":"(fn [& args] \n             (if (= 1 (count args))\n               (first args)\n               (let [replace ((nth args 1) (nth args 0) (nth args 2))]\n                 (recur (conj (drop 3 args) replace)))))","user":"53c73e8ae4b00fb29b2212a5"},{"code":"(fn [& coll]\n  (reduce (fn [a [f v]] (f a v))\n          (first coll)\n          (partition 2 (rest coll))))","problem":135,"user":"51f40975e4b0fca5e8b4822e"},{"code":"(fn [h & t]\n  (loop [s h\n         l t]\n    (if (nil? l)\n      s\n      (let [[op arg & t] l] (recur (op s arg) t)))))","problem":135,"user":"4fc8c8d8e4b0ee37620e183b"},{"problem":135,"code":"(fn [& args] \n  (let [[a f b & more] args]\n    (if (empty? more) (f a b) (recur (cons (f a b) more)))))","user":"51000111e4b00d7ad4cab15e"},{"problem":135,"code":"(fn infix [& args]\n  (loop [loopargs args]\n    (println args)\n    (if (= 1 (count loopargs))\n      (first loopargs)\n      (recur\n        (flatten\n          (conj\n            (vector ((second loopargs) (first loopargs) (nth loopargs 2)))\n            (drop 3 loopargs)))))))","user":"59503c5de4b066ee0a44ae8e"},{"problem":135,"code":"(fn [h & t]\n  (reduce #((first %2) %1 (second %2))\n          h\n          (partition-all 2 t)))","user":"565f8fd2e4b068f2fe63dc41"},{"code":"(fn [x & r]\n  (reduce\n    (fn [a [o x]]\n      (o a x))\n    x\n    (partition 2 r)))","problem":135,"user":"52bacfa8e4b07a9af57922d6"},{"problem":135,"code":"(fn [start-value & calculation]\n  (loop [res start-value, calc calculation]\n    (if (seq calc)\n      (let [[op x & more] calc]\n        (recur (op res x) more))\n      res)))","user":"55868660e4b059ccff29b1d4"},{"code":"(fn [& xs]\n  (reduce #((first %2) %1 (second %2)) (first xs) (partition 2 (rest xs))))","problem":135,"user":"508e13abe4b0f17d83ea26c7"},{"problem":135,"code":"(fn [n & args]  \n  (reduce (fn [result op] ((first op) result (second op))) n (partition 2 args)))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":135,"code":"#(reduce (fn [a [o e]] (o a e)) % (partition 2 %&))","user":"577202d2e4b0979f896515c0"},{"code":"(fn [& l] (reduce (fn [v1 [op v2]] (op v1 v2)) (first l) (partition 2 (rest l))))","problem":135,"user":"525f51bde4b0cb4875a45dc8"},{"code":"(fn [& args]\n   (loop [result (first args), y (rest args)]\n     (if (not (empty? y))\n     (recur ((first y) result (nth y 1)) (nnext y))\n     result)))","problem":135,"user":"4fba77fae4b081705acca2df"},{"problem":135,"code":"(fn [& [x f y & xs]]\n  (if (empty? xs)\n    (f x y)\n    (recur (conj xs (f x y)))))","user":"5ab16992e4b073f1774425c4"},{"problem":135,"code":"(fn calc \n  ([x op y]\n   (op x y))\n  \n  ([x op y & xs]\n    (apply calc (cons (calc x op y) xs))))","user":"55e06f82e4b050e68259b40d"},{"code":"(fn [& x]\r\n  (letfn [(infix-helper\r\n     [m]\r\n\t   (if (= (count m) 3) ((second m) (first m) (last m))\r\n\t       (infix-helper (cons ((second m) (first m) (nth m 2))\r\n\t\t\t\t   (rest (rest (rest m)))))))]\r\n    (infix-helper x)))","problem":135,"user":"4ee9d697535d93acb0a66895"},{"problem":135,"code":"(fn [& ts]\n   (reduce (fn [init [operator val]]\n             (operator init val)) (first ts) (partition 2 (rest ts))))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":135,"code":"(fn [v & more]\n  (reduce (fn [acc [f x]] (f acc x))\n          v\n          (partition 2 more)))","user":"54b13a40e4b09f271ff37d1b"},{"problem":135,"code":"(fn lr [& args]\n  \t (let [[%1 %2 %3 & other] args]\n  \t (if (= (count other) 0) \n  \t  (%2 %1 %3)\n  \t  (recur (flatten (cons (%2 %1 %3) other))))))","user":"53d6b266e4b0e771c3025459"},{"code":"(fn [x & args] (loop [y (partition 2 args)\n        index 0\n        result x]\n    (if (< index (count y))\n      (recur y (inc index) ((first (nth y index)) result (second (nth y index))))\n      result\n    )\n  ))","problem":135,"user":"52016690e4b0b2e020a18f0f"},{"problem":135,"code":"(fn [& args]\n  (let [[l func r] (take 3 args)\n        other-ops (drop 3 args)]\n  (loop [left (func l r) \n         others other-ops]\n    (if (seq others)\n      (let [[new-fn right] (take 2 others)]\n        (recur (new-fn left right) (drop 2 others))\n      )\n      left\n    )\n  )))","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":135,"code":"(fn [& args]\n  (loop [in (rest (rest args))\n         op (second args)\n         out (first args)]\n    (if (empty? (rest in))\n      (op out (first in))\n      (let [x-0 (first in)\n            in-0 (rest (rest in))\n            op-0 (second in)\n            out-0 (op out x-0)]\n        (recur in-0 op-0 out-0)))))","user":"594bd637e4b07ddc2dafae41"},{"code":"(fn solution [& mau]\n  (let [t (flatten mau)]\n    (if (= 3 (count t))\n      ((second t) (first t) (nth t 2))\n      (solution (conj (drop 3 t) ((second t) (first t) (nth t 2)) ) ))))","problem":135,"user":"4e2164ff535d04ed9115e815"},{"problem":135,"code":"(fn f [a o b & x]\n  (if x\n  (apply f (cons (o a b) x))\n  (o a b)))","user":"54b7f217e4b0ed20f4ff6e8f"}]