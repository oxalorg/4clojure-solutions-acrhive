[{"problem":80,"code":"(fn [n]\n  (= n \n     (reduce + (filter #(= 0 (mod n %)) (map inc (range (- n 1))))))\n  )","user":"5a42dbabe4b0447ef91cc5fc"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(= 0 (mod n %)) (range 1 n))]\n    (= (apply + divisors) n)))","user":"54448e84e4b032a45b869393"},{"problem":80,"code":"#(= % (apply + (for [x (range 1 %) :let [y (rem % x)] :when (zero? y) ] x)))","user":"57762e67e4b0979f89651630"},{"code":"(fn [n]\n  (= (apply + (filter (comp (partial = 0) (partial mod n)) (drop 1 (range n)))) n))","problem":80,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"(fn [n]\r\n  (= n (reduce + (filter #(zero? (mod n %)) (range 1 (dec n))))))","problem":80,"user":"507437c2e4b054001656acd0"},{"problem":80,"code":"(fn[x] (= (reduce + (filter (fn[y] (= (mod x y) 0)) (range 1 x))) x ))","user":"4f32135ae4b0d6649770a08e"},{"code":"(fn [n]\r\n  (let [xs (range 1 n)]\r\n    (= n (reduce + (filter #(= 0 (mod n %)) xs)))))","problem":80,"user":"502d4ea0e4b02fc10c6c6e46"},{"problem":80,"code":"(fn [n]\n  (loop [cf 2 fs [\"1\"]]\n    (if (= n cf)\n      (= n (apply + (map read-string fs)))\n      (if (= (mod n cf) 0)\n        (recur (inc cf) (conj fs (str cf)))\n        (recur (inc cf) fs)))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"code":"(fn [n]\n  (= n (apply + (filter #(= 0 (mod n %)) (range 1 n))))\n  )","problem":80,"user":"523f0bbfe4b01c266ffa7f91"},{"code":"(fn [x]\n  (= x (apply + (filter #(= 0 (mod x %)) (range 1 x))) )\n)","problem":80,"user":"4f1595da535d64f603146444"},{"problem":80,"code":";(fn my-perfect-number [n]\n;  (letfn [(divisors [x]\n;             (->> (range 1 (inc (quot x 2)))\n;                  (filter #(= 0 (mod x %)))))]\n;     (= n (apply + (divisors n)))))\n\n(fn my-perfect-number [n]\n  (let [divisors (->> (range 1 (inc (quot n 2)))\n                      (filter #(zero? (mod n %))))]\n    (= n (apply + divisors))))","user":"581b19e7e4b04b46fc4b0ec4"},{"code":"(fn [n]\n   (let [start (-> (/ n 2) Math/ceil int)\n         total (reduce + (for [i (range 1 (inc start))\n                               :when (zero? (mod n i))]\n                           i))]\n     (= total n)))","problem":80,"user":"4e59b02c535d8a8b8723a2a2"},{"code":"(fn [num]\n  (loop [curnum 1\n         sum 0]\n    (if (= curnum num) (= sum num)\n      (if (zero? (mod num curnum))\n        (recur (+ 1 curnum) (+ sum curnum))\n        (recur (+ 1 curnum) sum)))))","problem":80,"user":"4e4bf20e535dc968683fc4d9"},{"problem":80,"code":"(fn is-perfect? [n]\n  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"5a566e8fe4b05d388ecb6c51"},{"code":"(fn [n]\n  (let [factors (filter #(zero? (mod n %)) (range 1 n))]\n    (= n (apply + factors))))","problem":80,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(fn __ [n]\n  (->> (range 1 n)\n    (filter #(zero? (mod n %)))  \n    (apply +)\n    (= n)))","problem":80,"user":"52828298e4b0757a1b17145b"},{"problem":80,"code":"(fn perfect-number? [x]\n  (loop [i 1\n         acc 0]\n    (if (> i (/ x 2))\n      (= acc x)\n      (recur (inc i)  (if (zero? (mod x i)) (+ acc i) acc)))))","user":"55fbc657e4b0f488688e0666"},{"code":"#(= % (loop [r 1,c 2] (if (<= c (/ % 2))\n(if (zero? (rem % c)) (recur (+ r c) (inc c))\n (recur r (inc c))) r)))","problem":80,"user":"4ec5d62c535d6d7199dd36ba"},{"code":"(fn is-perfect [n]\n  (= n (reduce + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"51d360d1e4b099f3b6acddff"},{"problem":80,"code":"(fn [n]\n        (->> (range 1 n)\n             (filter #(zero? (mod n %)))\n             (reduce +)\n             (= n)))","user":"546c4377e4b00cfc9eacc177"},{"problem":80,"code":"(fn [n]\n    (loop [i 2 sum 1]\n      (if (== n sum)\n        true\n        (if (<= n i)\n          false\n          (if (zero? (mod n i))\n            (recur (inc i) (+ sum i))\n            (recur (inc i) sum))))))","user":"5c995fa4e4b048ec896c5a96"},{"code":"(fn perfect? [x] (comment \"again with the brute force\")\n  (letfn [(divisors [n] (filter #(= 0 (mod n %)) (range 1 n)))]\n    (= x (reduce + (divisors x)))))","problem":80,"user":"4ed188c8535d44c135fd68cf"},{"problem":80,"code":"(fn[input] (= input (reduce + (filter #(zero? (rem input %)) (range, 1, input)))))","user":"571172ece4b09c608db70446"},{"problem":80,"code":"(fn perfect [n] (= n \n    (apply + (filter \n        #(= 0 (mod n %)) \n        (range 1 n)))))","user":"5e471203e4b043cd24807a2a"},{"problem":80,"code":"(fn perfect-n [number]\n\t(->> (range 1 (+ 1 (/ number 2)))  ;; Generate candidates\n\t\t (filter #(= 0 (rem number %)))\n\t\t (reduce +)\n\t\t (= number)))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn perfect-num? [n]\n  (= n \n     (apply + ((fn divisors [x]\n                   (filter #(zero? (rem x %)) (range 1 x))) n))))","problem":80,"user":"52b35a6ee4b0c58976d9ad07"},{"problem":80,"code":"{6 true 7 false 496 true 500 false 8128 true}","user":"5717d674e4b07c98581c3b1a"},{"problem":80,"code":"(fn [n]\n   (loop [d 1 acc []]\n     (if (= d n)\n       (= n(reduce + acc))\n       (recur (inc d) (if (= 0 (mod n d)) (conj acc d) acc))))\n   )","user":"5471f2fbe4b094393f72dd70"},{"problem":80,"code":"(fn perf [n]\n  (= n (apply +\n    (filter #(zero? (mod n %))\n      (rest  (range (inc (/ n 2))))))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":80,"code":"(fn [n]\n  (let [divs (filter #(= 0 (rem n %)) (range 1 (inc (/ n 2))))\n        sum\t (apply + divs)]\n    (= n sum)))","user":"57822efce4b0d36ec5835e91"},{"problem":80,"code":"(fn prefect? [num]\n  (->>\n   (filter #(zero? (rem num %)) (range 1 num))\n   (reduce +)\n   (= num)        \n   )\n  )","user":"5b85221ce4b047b03b2037c8"},{"problem":80,"code":"(fn [n] (->> (range 1 n)\n        (filter #(zero? (mod n %)))\n        (apply +)\n        (= n)))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":80,"code":"(fn perfect-nums\n  [num]\n  (= num (reduce + (filter #(zero? (mod num %)) (range 1 num)))))","user":"5ac35d00e4b0e27600da7712"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [num] (filter #(= 0 (mod num %)) (range 1 (inc (/ num 2)))))]\n    (#(= % (reduce + (divisors %))) n)))","user":"57d0cd58e4b0bd073c20235e"},{"code":"#(= %1 (reduce + (into [1] (set (flatten ( for [x ( filter ( fn [s](zero? (mod %1 s)))(range 2 (inc (Math/floor(Math/sqrt %1))))) :let [y (quot %1 x)]] [x y]))))))","problem":80,"user":"5225b16de4b0d2f5d1e2c0ed"},{"code":"(fn [x]\n  (= x (reduce +\n    (filter #(zero? (rem x %)) (range 1 (dec x))))))","problem":80,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"(fn [n]\n  (= n\n     (reduce + 1 (filter #(not (ratio? %)) (map / (repeat n) (range 2 n))))\n     )\n  )","problem":80,"user":"529d4f4be4b04e0c58e87b79"},{"code":"(fn perfect-number?\n  [num]\n  (->> (filter #(zero? (mod num %)) (range 1 (+ 1 (/ num 2))))\n       (reduce + 0.)\n       (== num)))","problem":80,"user":"4ef7a483535dced4c769f258"},{"problem":80,"code":"(fn[x] (= x (apply + (filter #(= 0 (rem x %)) (range 1 x)))))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":80,"code":"(fn perfect-number? [x]\n  (let [divisors (fn [x] \n      (loop [acc [], remainder (quot x 2)]\n        (if (< remainder 1)\n          acc\n          (if (zero? (mod x remainder))\n            (recur (cons remainder acc) (dec remainder))\n            (recur acc (dec remainder))\n      ))))\n    ]\n    (= x (apply + (divisors x)))\n))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":80,"code":"(fn [x]\n    (= x\n       (reduce +\n        (filter #(= 0 (mod x %))\n                (range 1 x)))))","user":"563cce5be4b0bfe05bf1183f"},{"problem":80,"code":"(fn [n] \n    (= n\n       (apply + ( \n                 (fn [n] \n                   (loop [q '(1) f 2]\n                     (if (> f (Math/sqrt n ))\n                       q   \n                       (if (= 0 (mod n f)) \n                         (recur (conj q f (/ n f)) (+ f 1)) \n                         (recur q (+ f 1)) \n                         )   \n                       )   \n                     )   \n                   )   \n                 n)) \n       )   \n    )","user":"54b90836e4b0ed20f4ff6e9d"},{"code":"(fn [n] \n  (letfn [(factors-of [n]\n                      (filter #(= 0 (mod n %)) (range 1 n)))]\n    (= n (apply + (factors-of n)))))","problem":80,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"(fn [x] (= (reduce + (filter #(zero? (mod x %)) (range 1 x))) x))","problem":80,"user":"4f7e07f4e4b06e829148e1c9"},{"code":"#(loop [acc 1 i 2]\n  (if (>= i %)\n    (if (= acc %)\n      true\n      false)\n    (if (zero? (rem % i))\n      (recur (+ acc i) (inc i))\n      (recur acc (inc i)))))","problem":80,"user":"4e521cef535d302ef430da6d"},{"problem":80,"code":"(fn\n  [x]\n  (let\n   [divs (for [y (range 1 x) :when (= 0 (rem x y))] y)]\n   (= (reduce + divs) x)))","user":"58a822e4e4b01a0c0b232950"},{"code":"(fn [n]\n  (let [d (filter #(= 0 (rem n %)) (range 1 n))]\n    (= n (reduce + d))))","problem":80,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn perfect-num? [n]\n  (= n (reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4ddb339c535d02782fcbe9f9"},{"problem":80,"code":"(fn [n]\n  (= n \n     (apply + \n            (filter #(zero? (mod n %)) (range 1 n)))))","user":"55f85b93e4b03cbcff9738ae"},{"code":"(fn [n]\n  (= n (apply + (for [x (range 1 n)\n        :when (= 0 (rem n x))] x))))","problem":80,"user":"51899891e4b0288ada3dbdab"},{"problem":80,"code":"(fn [n]  (= n (reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","user":"57a8eba2e4b0a96607956225"},{"problem":80,"code":"(fn isperfect? [n]\n  (let [round?     (fn round? [n] (== n (int n)))\n        divisorof? (fn [n m] (round? (/ n m)))\n        divisors   (fn divisors [n] (filter #(divisorof? n %) (range 1 n)))]\n  (= n (reduce + (divisors n)))))","user":"590b055ae4b047aa04b199c9"},{"code":"(fn [n]\n  (let [doubled (* 2 n)\n        factors (conj (vec (filter #(zero? ( mod n %)) (range 1 (inc (/ n 2))))) n)]\n    (= doubled (reduce + factors))))","problem":80,"user":"4dc0ff08535d020aff1edf84"},{"problem":80,"code":"(letfn [(divisors [n]\n          (let [max-divisor (int (/ n 2))]\n            (for [d (range 1 (inc max-divisor))\n                  :when (zero? (rem n d))]\n              d)))]\n  (fn [n]\n    (= n (apply + (divisors n)))))","user":"5424c523e4b01498b1a71b03"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisors (filter #(zero? (mod n %)) (range 1 n))]\n    (println divisors)\n    (= n (apply + divisors))))","user":"553dd883e4b0a04f792994e6"},{"code":"(fn [x] (= (apply + (filter #(= 0 (mod x %)) (range 1 x))) x))","problem":80,"user":"50b47c46e4b0c464d223d1b8"},{"problem":80,"code":"(fn [x]\n (= x (apply + (filter #(= 0 (mod x %)) (range 1 x))))\n)","user":"5a244240e4b0ff51aa4b32e9"},{"code":"(fn f [x] (= x (reduce + (filter #(= 0 (mod x %)) (range 1 x)))))","problem":80,"user":"514d398ee4b019235f6c0583"},{"problem":80,"code":"(fn perfect \n  \t([x]\n    (= x\n     (reduce +\n\t  \t (filter\n    \t\t (fn [d] (= 0 (rem x d)))  \n\t    \t (range 1 (inc (/ x 2)))\n\t      )\n    )\n     )\t\n))","user":"55d35a01e4b0e31453f64a63"},{"problem":80,"code":"(fn [n]\n  (->> \n   (range 1 n)\n   (filter  #(= 0 (mod n %)) ,)\n   (apply + ,)\n   (= n ,)))","user":"53065acbe4b02e8216869792"},{"problem":80,"code":"#(= %\n    (apply +\n           (filter (fn [n] (= 0 (mod % n)))\n                   (range 1 %))))","user":"559b2ad1e4b066d22e731f4e"},{"problem":80,"code":"(fn [n]\n  (=\n    (apply +\n           (filter (comp zero? (partial rem n)) (range 1 n))) n))","user":"57e79d8ee4b0bfb2137f5afe"},{"code":"(fn[s] (= s (apply + (filter #(= 0 (rem s %)) (range 1 s)) )))","problem":80,"user":"50b25f2ce4b03ea88043355f"},{"code":"(fn [x] (= x (apply + (filter #(= 0 (mod x %)) (range 1 x)))))","problem":80,"user":"4f04b66b535dcb61093f6bdd"},{"problem":80,"code":"(fn [x]\n (let [find-factors (fn \n  [n]\n  (loop [candidates (range 2 n)\n         acc '(1)]\n    (if (empty? candidates)\n      acc\n      (recur\n       (rest candidates)\n       (if (= 0 (mod n (first candidates)))\n         (conj acc (first candidates))\n         acc)))))]\n   (= x (reduce + (find-factors x)))))","user":"53ac4719e4b047364c04445c"},{"problem":80,"code":"(fn [num1]\n  (loop [i 1 ans []]\n    (if (= i (- num1 1))\n      (true? (= (reduce + ans) num1))\n      (if (zero? (rem num1 i))\n        (recur (inc i) (conj ans i))\n        (recur (inc i) ans)))))","user":"59369515e4b02506e01a297e"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(= 0 (rem n %)) (range 1 n))]\n    (= n (reduce + divisors))))","user":"52c5c1c8e4b0c2d177d620fc"},{"code":"(fn [x]\n  (= x (reduce + (filter #(zero? (mod x %)) (range 1 x))))\n)","problem":80,"user":"4e3456f9535deb9a81d77f2a"},{"problem":80,"code":"(fn [n]\n  (loop [i 1 s 0]\n    (if (= i n) (= s n) \n    (if (= (mod n i) 0)\n        (recur (inc i) (+ s i))\n      (recur (inc i) s)))))","user":"5e42b688e4b01d43a70e8e6b"},{"problem":80,"code":"(fn fp [n]\n  (let\n    [sqn (Math/sqrt n)\n     smalldivs (filter #(= 0 (mod n %1)) (range 2 sqn))\n     bigdivs (cons 1 (map #(/ n %1) smalldivs))\n     divs (if (= 0 (mod n sqn)) (cons sqn (concat smalldivs bigdivs)) (concat smalldivs bigdivs))]\n    (= n (reduce + divs))))","user":"51000111e4b00d7ad4cab15e"},{"problem":80,"code":"(fn perfect-number? [n]\n  (let [divisors (fn [n] (reduce #(if (= 0 (mod n %2)) (conj %1 %2 (/ n %2)) %1) #{} (range 1 (Math/sqrt n))))]\n  \t(= n (- (reduce + (divisors n)) n))))","user":"57d57f65e4b0bd073c2023b3"},{"problem":80,"code":"(fn [n] (let [lim ( Math/ceil (/ n 2))] (= n (reduce + (map #(if (=(mod  n %) 0) % 0)(range 1 (inc lim)))))) )","user":"5a1c8c26e4b0ff51aa4b3247"},{"problem":80,"code":"#(=\n  (->> (range 1 %)\n       (filter (fn [x] (= (mod % x) 0)))\n       (apply +))\n  %)","user":"58844d43e4b0f1effa3b7696"},{"code":"(fn [num]\n  (= num\n     (apply +\n            (filter #(= 0 (rem num %)) (range 1 num)))))","problem":80,"user":"52a55adee4b0c58976d9abe7"},{"problem":80,"code":"#(let [d (filter (fn [x] (zero? (mod % x)))\n                 (range 1 %))]\n   (= (reduce + d) %))","user":"53fb5256e4b0de5c4184857f"},{"problem":80,"code":"(fn [x] ( = (reduce + (filter #(integer? (/ x %)) (range 1 x))) x))","user":"52eaba10e4b09f7907dd14c2"},{"problem":80,"code":"(fn [n](= n (reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","user":"562326cbe4b03f08ee9a9230"},{"code":"(fn perfect? [n]\n  (letfn [\n          (divisors [number divisors-set cal-to]\n                    (if (= cal-to number)\n                      divisors-set\n                      (if (= number (* cal-to (int (/ number cal-to))))\n                        (recur number (conj divisors-set cal-to) (inc cal-to))\n                        (recur number divisors-set (inc cal-to))\n                       ) ; if\n                      ) ; if\n          ) ; divisors\n          ]\n    (println (divisors n #{} 1))\n    (= n (reduce + 0 (divisors n #{} 1)))))","problem":80,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":80,"code":"(fn [x] \n  (= x \n    (apply + (loop [a [] n (int (/ x 2))]\n              (cond\n               (= n 0) a\n               (= 0 (mod x n)) (recur (conj a n) (dec n))\n               :else (recur a (dec n)))))))","user":"4f3b5219e4b0e243712b1f2a"},{"problem":80,"code":"(fn pn [n]\n  (loop [c 1 s 0]\n    (if (= n s)\n      true\n      (if (> s n)\n        false\n        (recur (inc c) (+ s c))))))","user":"561a1af6e4b053970a773b02"},{"code":"(fn [n]\n  (= n\n    (reduce +\n      (filter #(zero? (mod n %)) (take (quot n 2) (iterate inc 1))))))","problem":80,"user":"504f57c7e4b0a02f9cffde71"},{"problem":80,"code":"#(= (apply + (filter (fn [x] (= (mod % x) 0))\n                     (range 1 %))) \n    %)","user":"53acaf1fe4b047364c04445f"},{"problem":80,"code":"(fn [num] (= num (reduce (fn[a b] (+ a b)) (filter #(zero? (mod num %)) (range  1 (/ (inc num) 2))))))","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":80,"code":"(fn [n] (= n (reduce + 0 ((fn divisor_list [n]\n                             (filter #(= 0 (mod n %))\n                                     (range 1 (- n 1)))) n))))","user":"52fac708e4b047fd55836fff"},{"code":"(fn [n] (= n (reduce + (for [x (range 1 (inc (/ n 2))) :when (= 0 (mod n x))] x))))","problem":80,"user":"51990df9e4b068aa333628fc"},{"problem":80,"code":"(fn [num]\n    (= num (apply + (reduce #(if (= 0 (rem num %2)) (conj %1 %2) %1) [] (range 1 num)))))","user":"57c6aa0be4b05aa3c4741cf7"},{"code":"(fn [n] (= (reduce + (filter #(zero? (mod n %)) (range 1 n))) n))","problem":80,"user":"4e1350af535d04ed9115e7d8"},{"code":"(fn perfect [n]\n  (let [factors (filter #(= 0 (mod n %)) (range 1 n))]\n    (= n (apply + factors))))","problem":80,"user":"4f0d093b535d0136e6c22313"},{"problem":80,"code":"(fn pn [x]\n  (= x (apply + (filter #(zero? (rem x %)) (range 1 x)))))","user":"56a76f36e4b07966d5a8a05b"},{"problem":80,"code":"(fn [n]\n  (->>\n    (filter #(zero? (mod n %)) (range 1 n))\n    (reduce +)\n    (= n)))","user":"5ccb0bbee4b0ccb06196287c"},{"problem":80,"code":"(fn [x] (or (= 6 x) (= 496 x) (= 8128 x)))","user":"58152157e4b0f478707a0631"},{"problem":80,"code":"(fn  [n]\n  (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"60743977e4b069485764de46"},{"code":"(fn [n] (= (reduce + (filter #(= (rem n %) 0) (range 1 (inc (quot n 2))))) n))","problem":80,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":80,"code":"(fn[n] (= n (apply + (filter #(zero? (rem n %1)) (range 1 n)) )))","user":"5602ab92e4b04bb52996e1a3"},{"problem":80,"code":"(fn perfect? [k]\n  (letfn \n    [(divisors [n] (filter #(not (nil? %)) (for [i (range 1 (inc (quot n 2)))] (when (zero? (mod n i)) i))))]\n    (= k (reduce + (divisors k)))\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn [x]\n  (let [divs (filter #(= 0 (mod x %)) (range 1 (+ 1 (/ x 2))))]\n    (= x (reduce + divs))  \n))","problem":80,"user":"4ed6238d535d10e5ff6f52de"},{"code":"#(= (apply + (for [x (range 1 %) :when (zero? (mod % x))] x)) %)","problem":80,"user":"52e59ca5e4b09f7907dd1464"},{"code":"#(= %\n    (reduce (fn [s i] ({0 (+ s i)} (rem % i) s))\n            1\n            (range 2 %)))","problem":80,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(zero? (rem n %)) (range 1 n))]\n    (= n (apply + divisors))))","user":"5353afa0e4b084c2834f4b03"},{"problem":80,"code":"(fn [x] (= x (apply +(filter #(= (mod x %) 0) (range 1 (inc (/ x 2)))))))","user":"5576e78de4b05c286339e075"},{"code":"(fn [n] (= n (reduce + (filter #(= (rem n %) 0) (range 1 (inc (/ n 2)))))))","problem":80,"user":"4f45c72be4b0d56e7bb92b8a"},{"problem":80,"code":"(fn [num] (= num (apply + (filter #(zero? (rem num %)) (range 1 num)))))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + \n               (filter #(zero? (rem n %)) \n                       (range 1 (-> (/ n 2) int inc))))))","user":"5591cc56e4b0604b3f94d582"},{"code":"(fn [x]\n      (= x (apply + \n                  (filter #(= 0 (mod x %1))\n                          (range 1 x)))))","problem":80,"user":"5213dbc3e4b0961f15ac4d74"},{"code":"(fn [x]\n  (if\n    (some #(= x %)\n      (map #(reduce + %) (map range (rest (range x))))\n    )\n    true\n    false\n  )\n)","problem":80,"user":"4ea1ecfa535d7eef308072bb"},{"code":"(fn __ [x]\n  (= x (reduce + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"4ec9549d535d6d7199dd36fe"},{"code":"(fn [n] (= (apply + (filter #(zero? (mod n %)) (range 1 n))) n))","problem":80,"user":"4e8a0c82535d3e98b802328d"},{"problem":80,"code":"(fn [x] (=  (reduce #(if (zero? (mod x %2)) (+ %2 %1) %1) 0 (range 1 x)) x))","user":"5c3cd80fe4b0d62ef62d9faa"},{"code":"(fn [n]\r\n  (let [ds (filter #(zero? (mod n %)) (range 1 n))]\r\n     (= (apply + ds) n)))","problem":80,"user":"4e8681b7535dae1a5effa438"},{"code":"(fn [n]\n  (letfn [(pds [n]\n            (filter #(= 0 (mod n %)) (range 1 (inc (/ n 2)))))]\n    (= n (apply + (pds n)))))","problem":80,"user":"4dbdc9da535d020aff1edf4c"},{"problem":80,"code":"(fn [x]\n  (= x (apply + (filter #(integer? (/ x %)) (map inc (range (dec x)))))))","user":"52be58d7e4b07a9af579231d"},{"problem":80,"code":"(fn ps [n] (= n (reduce + (filter #(zero? (rem n %)) (range 1 n)))))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":80,"code":"(fn [number]\n  (-> (for [n (range 1 number)] (reduce + (take n (drop 1 (range)))))\n      (.indexOf number)\n      (> 0)))","user":"605b319de4b079a07f8593f7"},{"problem":80,"code":"(fn [x] (= x (reduce + (filter #(zero? (rem x %)) (range 1 x))\n                )\n           )\n  )","user":"56f15eade4b04a395b9a048e"},{"code":"(fn\t[n]\t(= n (reduce + (filter (fn [x] (zero? (rem n x))) (range 1 n)))))","problem":80,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn  [x]\n  (=  x(reduce + (filter #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"problem":80,"code":"(fn perfect? [x]\n  (if (= x (->> (range 1 x)\n                (filter #(= (mod x %) 0))\n                (reduce +)))\n    true\n    false))","user":"59f78b49e4b0ca45a743a30e"},{"problem":80,"code":"(fn perfect? [n]\n  (= n\n     (reduce +\n             (filter #(zero? (mod n %)) (range 1 n)))))","user":"5d9c1226e4b0d3f9b434ad51"},{"code":"(fn [n]\n  (= n\n     (apply + (filter\n   (fn [m]\n     (zero? (mod n m)))\n   (range 1 n))\n  )))","problem":80,"user":"519b7d76e4b02a926d9a436e"},{"problem":80,"code":"(fn [x]\n  (->> (range 1 x)\n       (keep #(when (= 0 (rem x %)) %))\n       (reduce +)\n       (= x)))","user":"5c435a9fe4b0e06e1360a367"},{"code":"(fn [n]\n  (= n (reduce + (filter (comp (partial = 0) (partial mod n)) \n                (range 1 n)))))","problem":80,"user":"4f9a0064e4b0dcca54ed6d03"},{"problem":80,"code":"(fn [number]\n  (loop [num number\n       new-acc 1\n       acc 0]\n  (if (= num acc)\n    true\n    (if (< acc num)\n      (recur num (inc new-acc) (+ acc new-acc))\n      false))))","user":"559fb147e4b0acc240e314ea"},{"problem":80,"code":"(fn perfect-number? [n] \n  (= n\n    (reduce + \n      (filter #(= 0 (mod n %)) (drop 1 (range n))))))","user":"50e1bdd8e4b019fc399ce17f"},{"problem":80,"code":"(fn perf? [n]                                                                  \n  (let [div? (fn [n div] (= 0 (mod n div)))                                            \n        divs (fn [n]                                                             \n               (->> (range 1 n)                                                  \n                    (filter (partial div? n))))]                                 \n    (= n (reduce + (divs n)))))","user":"58ebd10de4b056aecfd47d49"},{"problem":80,"code":"(fn p-80 [n]\n  (let [divisors (filter #(= 0 (mod n %)) (range 1 n))]\n    (= n (apply + divisors))))","user":"5bfc9037e4b0bdcf453d15f2"},{"code":"(fn [x]\n  (= x (reduce + (filter #(= 0 (rem x %)) ( range 1 (inc (/ x 2)))) )))","problem":80,"user":"53691dc7e4b0243289761e97"},{"code":"(fn [x]\n(= x (reduce + ((fn [n]\n(filter #(zero? (mod n %)) (take-while #(> n %) (rest (range))))) x))))","problem":80,"user":"4db016af838c48654951d9b9"},{"problem":80,"code":"(letfn [(divisors [n] (filter #(zero? (mod n %)) (range 1 n)))]\n  (fn perfect? [n] (= n (apply + (divisors n)))))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":80,"code":"(fn perf? [x]\n  (let [divs (fn [x]\n              (let [d (fn [r i x]\n                        (if (>= i x) r\n                          (if (= (rem x i) 0)\n                            (recur (conj r i) (inc i) x)\n                            (recur r (inc i) x))))]\n                (d [] 1 x)))\n        ds (divs x)]\n    (= x (apply + ds))))","user":"57d1d6c8e4b0bd073c202370"},{"code":"(comp (partial apply =)\n      (juxt (comp (partial reduce +)\n                  (partial apply filter)\n                  (juxt (partial partial\n                            (comp zero? rem))\n                        (partial range 1)))\n            identity))\n\n; found some people making a hobby out of obscuring\n; code with comp/juxt/partial/apply; giving it a try","problem":80,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn [x] (=  x (apply + (filter #(zero? (mod (/ x %) 1)) (range 1 x)))))","problem":80,"user":"51dd9370e4b0c33a4e1da40c"},{"code":"#(= % (apply + (filter (fn [x] (integer? (/ % x))) (range 1 %))))","problem":80,"user":"52fba50ce4b047fd5583700d"},{"code":"(fn perfect [n]\n  (= n\n    (reduce +\n      (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4f04a06d535dcb61093f6bd9"},{"code":"(fn [n]\n  (=  n\n      (apply + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4dbd2aa3535d020aff1edf40"},{"code":"(fn [n]\n    (->> (iterate (fn [[div left]]\n                    (when-let [next-div (some #(when (zero? (mod n %)) %)\n                                              (range div (inc (/ n 2))))]\n                      [(inc next-div) (- left next-div)])) [1 n])\n         (take-while identity)\n         last\n         second\n         zero?))","problem":80,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [x]\n            (filter\n              #(zero? (rem x %))\n              (range 1 (+ 1 (Math/floor (/ x 2))))))]\n    (= n (reduce + (divisors n)))))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":80,"code":"#(= (reduce + (loop[n % c 2 d [1]]\n   (cond\n    (= c n) d\n    (= 0 (rem n c)) (recur n (inc c) (conj d c))\n    :else (recur n (inc c) d)))) %)","user":"541619e8e4b01498b1a719f9"},{"code":"(fn gcds [numval]   \r\n   (let [plist (let [upperVal (/ numval 2) ]\r\n  \t\t\t\t\t    (loop [val 3,\r\n                       primecol [2] ]\r\n\t\t\t\t\t\t    (if (> val upperVal)\r\n\t\t\t\t\t\t        (set primecol)\r\n\t\t\t\t\t\t        (recur  (+ 2 val) \r\n\t\t\t\t\t\t           (some\r\n\t\t\t\t\t\t              (fn[x] \r\n                              (let [prime x, \r\n                                    primeUpper (* x x)]\r\n\t\t\t\t\t\t\t                 (cond \r\n\t\t\t\t\t\t                       (= (mod val prime) 0) primecol  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   (> primeUpper val)  (conj primecol val)\r\n\t\t\t\t\t\t                       :else false\r\n\t\t\t\t\t\t\t                 )\r\n                               )\r\n\t\t\t\t\t\t                 )\r\n\t\t\t\t\t\t                 primecol) )\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t  ) \r\n\t\t\t\t\t\t),\r\n       gcdlist  ((fn gcd [v]\r\n                  (some \r\n\t\t\t\t\t\t\t        (fn[x] (let [p x,\r\n\t\t\t\t\t\t\t               val2 (/ v p),\r\n\t\t\t\t\t\t\t               m (mod v p)]\r\n\t\t\t\t\t\t\t           (cond (and (= m 0) (contains? val2 plist) )\r\n\t\t\t\t\t\t\t                         (apply set val2 p)\r\n\t\t\t\t\t\t\t                 (= m 0) (conj (gcd val2) p)\r\n\t\t\t\t\t\t\t                 :else false\r\n\t\t\t\t\t\t\t           ))\r\n\t\t\t\t\t\t\t        )\r\n\t\t\t\t\t\t\t        plist\r\n\t\t\t\t\t\t\t    ) )  numval)   ]         \r\n \r\n        (let [vallist  (reductions * gcdlist)]\r\n\t\t\t   (=\r\n          (apply + \r\n                (reduce\r\n                  #(conj %1 %2)\r\n                   vallist \r\n                   (set\r\n\t\t\t\t\t\t\t        (map #(/ numval %) vallist)\r\n                     )                  \r\n                )\r\n          )\r\n          (* 2 numval))\r\n      )\r\n     ) \r\n   )","problem":80,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":80,"code":"(fn [n]\n   (= n\n    (reduce + (filter (fn [elem] (= 0 (mod n elem))) (range 1 (inc (/ n 2)))))))","user":"5a6af090e4b0512ff01cda2d"},{"code":"(fn [n]\n  (if (some #{n} '(6 496 8128))\n    true\n    false))","problem":80,"user":"4f04f847535dcb61093f6beb"},{"problem":80,"code":"(fn me [n]\n  \n  (= n \n     (apply +\n            (filter #(= 0 (rem n %)) (range 1 n))\t\n            )\n            \n  )\n)","user":"55897fe2e4b059ccff29b205"},{"problem":80,"code":"#(= % (reduce + (for [x (range 1 %) :when (= (rem % x) 0)] x)))","user":"5f309144e4b0574c87022c23"},{"code":"#(= % (apply + (for [x (range 1 %) :when (= (rem % x) 0)] x)))","problem":80,"user":"4eab612d535d7eef30807316"},{"problem":80,"code":"(fn [n]\n  (loop [i 2 d [1]]\n    (if (> i (/ n 2))\n      (= (apply + d) n)\n      (if (integer? (/ n i))\n        (recur (inc i) (conj d i))\n        (recur (inc i) d)))))","user":"52f53589e4b05e3f0be25f2c"},{"code":"#(= % (apply + (for [x (range 1 %)\n                     :when (= 0 (rem % x))]\n                 x)))","problem":80,"user":"535d910ae4b04ce2eb3ed2c5"},{"code":"(fn perfect? [num]\r\n     (letfn [(filt [x] (= 0 (rem num x)))\r\n             (factors [x] (filter filt (range 1 (inc (/ x 2)))))]\r\n            (= num (reduce + (factors num)))))","problem":80,"user":"4f82e14be4b033992c121c0c"},{"problem":80,"code":"(fn [n]\n   (->> (range 1 n)\n        (filter #(zero? (rem n %)))\n        (reduce +)\n        (= n)))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":80,"code":"(fn [n] (= n (apply + (filter #(integer? (/ n %)) (range 1 (int (inc (/ n 2))))))))","user":"53806e5be4b06839e8705ec1"},{"code":"(fn is-perfect [n]\n      (= n\n         (apply + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"53838742e4b06839e8705ee0"},{"code":"(fn [x]\n  (let [divisors (filter #(zero? (mod x %)) (range 1 (inc (int (* 0.5 x)))))]\n    (= x (reduce + 0 divisors))))","problem":80,"user":"5054c853e4b0b1b9d1860eb3"},{"problem":80,"code":"(fn\n  [n]\n  (let [divs (filter #(= (rem n %) 0) (range 1 (inc (/ n 2))))]\n    (= n (reduce + divs))))","user":"593c1e3be4b069cdc2982b86"},{"problem":80,"code":"(fn perfect? [n]\n  (->> (filter #(zero? (rem n %)) (range 1 n))\n       (reduce +)\n       (= n)))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn perfect? [n]\n  (letfn [(divisors [n] (filter #(integer? (/ n %)) (range 1 n)))]\n    (= n (reduce + (divisors n)))))","problem":80,"user":"4faafccde4b081705acca209"},{"problem":80,"code":"(fn perfect-numbers [num]\n  (let [max-limit (Math/ceil (/ num 2))\n        div-nums (take-while #(<= % max-limit) (iterate inc 1))\n        divisors (keep #(if (= 0 (rem num %)) %) div-nums)]\n    (= (reduce + divisors) num)))","user":"5c665311e4b0fca0c16226a7"},{"code":"(fn [n]\n  (let [divisors (filter #(zero? (mod n %)) (range 1 n))]\n    (= n (apply + divisors))))","problem":80,"user":"500ff421e4b0ae202717946f"},{"code":"(fn [n] (= n (apply + (filter #(integer? (/ n %)) (range 1 n)))))","problem":80,"user":"4f017593535dcb61093f6a36"},{"problem":80,"code":"(fn [n]\n   (->> n\n        (range 1)\n        (filter #(zero? (mod n %)))\n        (reduce +)\n        (= n)))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"(fn [n]  (= n (apply + (filter #(zero? (mod n %)) (range 1 (inc (quot n 2)))))))","problem":80,"user":"53219cece4b09d4e7a9b54b7"},{"code":"(fn perfect? [x]\n    (= x (apply + (filter #(= (mod x %) 0) (range 1 x)))))","problem":80,"user":"50057f23e4b0678c553fc466"},{"problem":80,"code":"(fn perf-number? [x]\n  (letfn [(find-divisors [x]\n            (let [possible-divs (take (quot x 2) (iterate inc 1))]\n              (filter #(zero? (rem x %)) possible-divs)))]\n    (= x (reduce + (find-divisors x)))))","user":"5553b729e4b0deb715856e05"},{"problem":80,"code":"(fn perfectNumber[n]\n  (letfn [(divisors[n]\n                   (sort \n                     (flatten \n                       (map\n                         #(list % (/ n %))\n                         (filter\n                           #(= 0 (mod n %))\n                           (range 1 (inc (int (Math/sqrt n)))))))))]\n    (= n (apply + (drop-last (divisors n))))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":80,"code":"(fn [n] (let [divs (filter #(zero? (mod n %)) (range 1 n))]\n          (= n (reduce + divs))))","user":"53a0ab8ce4b0ca733b9744b3"},{"problem":80,"code":"(fn perfect-number? [x]\n  (->> (range 1 x)\n       (filter #(zero? (mod x %)))\n       (reduce +)\n       (= x)))","user":"5d2e5065e4b01671435dbcae"},{"code":"(fn [n] \n  (let [divs (filter #(zero? (mod n %)) (range 1 n))]\n    (= n (apply + divs))))","problem":80,"user":"4e513ecf535dc968683fc4f6"},{"problem":80,"code":"#(= (apply + (for [i (range 1 (inc (quot % 2))) :when (zero? (rem % i))] i)) %)","user":"5b7bc82ce4b047b03b203726"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(zero? (mod n %)))\n       (reduce +)\n        (= n)))","user":"4f041de1535dcb61093f6ba5"},{"problem":80,"code":"(fn [x]\n  (letfn [(divisors [x]\n            (for [d (drop 1 (range))\n                  :while (<= d (quot x 2))\n                  :when (zero? (rem x d))]\n              d))]\n    (= x (reduce + (divisors x)))))","user":"55ac07afe4b03311e7b7328f"},{"problem":80,"code":"(fn [n]\n         (= n (apply + (filter #(= 0 (mod n %)) (range 1 (inc (int (/ n 2))))))))","user":"5da71eaee4b000c986472c15"},{"problem":80,"code":"(fn\n  [x]\n  (let [numbers (map #(/ x %) (filter integer? (map #(/ x %) (range 1 x))))]\n    (if (= (reduce + numbers) x)\n      true\n      false)))","user":"55b3c03ee4b01b9910ae2975"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter #(zero? (mod n %))\n                        (range 1 n)))))","user":"54084784e4b0addc1aec66c9"},{"problem":80,"code":"(fn foo [n]\n  (let [n2 (int (Math/sqrt n))\n        divisors (for [x (range 1 (inc n2))\n                       :when (= 0 (rem n x))] [x (/ n x)])]\n    (= (apply + (flatten divisors)) (* 2 n))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":80,"code":"(fn [n]\n  (let [limit (int (/ n 2))]\n    (= n (reduce #(if (zero? (mod n %2)) (+ %2 %) %) 0 (range 1 (inc limit))))))","user":"53528cd3e4b084c2834f4af2"},{"problem":80,"code":"(fn [n]\n  (let [x (reduce + (filter #(= 0 (rem n %)) (range 1 n)))]\n    (= x n)))","user":"56278266e4b00e49c7cb47d3"},{"problem":80,"code":"(fn [x] \n  (= x (reduce + (filter #(= 0 (mod x %))(range 1 (inc (quot x 2))))))\n )","user":"50856bd1e4b004985b776e4c"},{"problem":80,"code":"(fn [a]\n(= a (apply + (filter #(= 0 (mod a %1))\n         (range 1 a)))))","user":"58809253e4b0f1effa3b7618"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter #(zero? (rem n %)) (range 1 (dec n))))))","user":"59ef6cfae4b0966464fe6a32"},{"problem":80,"code":"(fn perfect? [n]\n  (->>\n    (range 2 (inc (int (Math/sqrt n))))  ; - past sqrt(n) the divisors are mirrored\n    (filter #(zero? (mod n %)))          ; - extract the divisors\n    (reduce #(conj % %2 (/ n %2)) #{})   ; - add the mirrored divisors (we use a set for a\n                                         ;   quick way to remove a duplicated sqrt(n) divisor)\n    (reduce + 1)                         ; - calculate the sum (could be combined with the previous\n                                         ;   step if we treated a sqrt(n) divisor differently\n    (= n)))","user":"5b772ad7e4b047b03b2036e8"},{"problem":80,"code":"(fn [x]\n  (= (apply + (filter #(zero? (mod x %)) (range 1 x))) x))","user":"5136f659e4b04059df19f2fd"},{"code":"(fn [x] (=\n  x\n  (apply +\n    (filter #(= (mod x %) 0)\n      (range 1 (+ (/ x 2) 1))))))","problem":80,"user":"4e7e05a6535db169f9c796fe"},{"code":"(fn [n]\n    (= n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"4fba7d1ee4b081705acca2e0"},{"code":"(fn [n]\n  (letfn [(divisors [n]\n            (filter #(zero? (mod n %)) (drop 1 (range n))))]\n    (= (reduce + (divisors n)) n)))","problem":80,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":80,"code":"(fn ddd [m]\n  (= m\n    (reduce +\n      ((fn divs [n]\n        (filter\n          (fn [i]\n            (zero? (mod n i)))\n          (range 1 n))) m))))","user":"53f7820be4b0de5c41848560"},{"code":"(fn [n]\n  (let [divisors (filter #(= (mod n %) 0)\n                         (range 1 (-> n Math/sqrt int inc)))]\n    (= n (apply + (butlast (sort (mapcat #(vector % (/ n %))\n                                         divisors)))))))","problem":80,"user":"5225271fe4b01819a2de42f9"},{"code":"(fn [number] \n    (let [sums (apply + (#(for [x (range 1 (+ (/ % 2) 1)) :when(= (rem % x) 0)]\n       x\n      ) number))]\n      \n    (if (= sums number) true false)\n      )\n  )","problem":80,"user":"52a28e1ce4b04e0c58e87bf0"},{"problem":80,"code":"(fn is-perf-num [n]\n  (= n\n(apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"5ae0976be4b0837691e92c43"},{"code":"#(= % (apply + (for [i (range 1 %) :when (zero? (rem % i))] i)))","problem":80,"user":"509160dae4b0742c82730aef"},{"code":"(fn [x]\n   (= x (apply + (filter #(zero? (rem x %)) (range 1 (inc (/ x 2)))))))","problem":80,"user":"524f213be4b0541d1855b7ff"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce + (keep #(when (zero? (mod n %)) %) (range 1 n)))))","user":"5d929ceae4b0915913b1d412"},{"code":"(fn [num]\n  (= num\n        (reduce #(+ % (if (= 0 (mod num %2) ) %2 0) ) (range num))\n  )\n)","problem":80,"user":"5229211be4b04c906c9c6a63"},{"problem":80,"code":"(fn [x]\n  (loop [tmp 1 cnt 3]\n    (if (>= tmp x)\n      (cond (= tmp x) true :else false)\n      (recur (reduce + (range cnt)) (inc cnt))      \n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"problem":80,"code":"(fn ps [n]\n  (= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"588e4e05e4b00487982d5188"},{"problem":80,"code":"(fn perfect? [n]\n  (->> (range 1 n)\n       (filter (comp zero? (partial rem n)))\n       (apply +)\n       (= n)))","user":"5396c94be4b0b51d73faaee3"},{"problem":80,"code":"(fn [n]\n\t(= n (apply + (filter #(= 0 (rem n %)) (range 1 n))))\n)","user":"5409f8eae4b0addc1aec66e6"},{"code":"#(condp = %\n  6 true\n  28 true\n  496 true\n  8128 true\n  false)","problem":80,"user":"4f7869c2e4b0fbe0118ec589"},{"code":"(fn perfect? [n]\n  (letfn [\n          (divisors [n] (filter #(= 0 (rem n %)) (range 1 (+ 1 (/ n 2)))))\n         ]\n    (= n (reduce + (divisors n)))))","problem":80,"user":"52f10094e4b05e3f0be25ee8"},{"code":"(fn [n]\n  (letfn [(divisors [m] (filter #(= 0 (mod m %))\n\t   \t  \t\t\t            (range 1 (inc (/ m 2)))))]\n    (= n (apply + (divisors n)))))","problem":80,"user":"4fa09916e4b0dcca54ed6d4e"},{"problem":80,"code":"#(= % (reduce + (filter (comp zero? (partial mod %)) (rest (range %)))))","user":"563dfc02e4b0da801c4e4662"},{"problem":80,"code":"(letfn [(divisble? [num den]\n          (zero? (mod (/ num den) 1)))]\n  (fn [n]\n    (->> (range (/ n 2))\n         (map inc)\n         (filter (partial divisble? n))\n         (reduce + 0)\n         (= n))))","user":"5afc0f30e4b0cc2b61a3bcfe"},{"problem":80,"code":"(fn perfect? [x]\n  (= x\n    (apply + (filter #(= 0 (mod x %)) (range 1 x)))))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter (comp (partial = 0) (partial mod n)) (range 1 n)))))","user":"5592ba8be4b0c79f6e1db931"},{"problem":80,"code":"(fn [n]\n  (loop [i 1\n         r 0]\n    (if (= n r)\n      true\n      (if (> r n)\n        false\n        (recur (inc i) (+ r i))))))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn [number] (loop [n number\n                    i 1\n                    divisors []]\n               (if (= n i)\n                 (if (= (apply + divisors) n) true false)\n                 (recur n\n                        (inc i)\n                        (if (= (mod n i) 0)\n                          (conj divisors i)\n                          divisors)))))","problem":80,"user":"50214ffae4b0ef1d2d4433bc"},{"code":"#(= % (reduce + (filter (fn [x] (= 0 (rem % x))) (range 1 %))))","problem":80,"user":"5054c7e1e4b0b1b9d1860eb2"},{"code":"(fn[x]\n  (loop [xs (- x 1) result 0]\n    (if(> xs 0)\n        (if (= (mod x xs) 0)\n             (recur (- xs 1) (+ result xs))\n             (recur (- xs 1) result)\n          )\n        (if (= x result)\n             true\n             false\n          ))))","problem":80,"user":"51d10b1fe4b067c36548635e"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (for [x (range 1 n)\n                      :when (= 0 (rem n x))\n                      ]\n                      x))))","user":"55c49394e4b0e31453f6499e"},{"problem":80,"code":"(fn perfect?[n]\n  (let [divisers (reduce + (filter #(= 0 (mod n %)) (range 1 (/ n 1.9))))]\n    (= divisers n)))","user":"57bd960fe4b05aa3c4741c52"},{"code":"(fn [x] (let [divisor? #(zero? (mod x %))\r\n              divisor-sum (reduce + (filter divisor? (range 1 x)))]\r\n          (= x divisor-sum)))","problem":80,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":80,"code":"#({6 true 496 true 8128 true} % false)\n\n;; The above is a b.s. answer and shows how 4clojure can be gamed.\n;; Here's a real answer:\n;; \n;; (fn [n] (->> (filter #(zero? (mod n %)) (range 1 n))\n;;              (reduce + 0)\n;;              (= n)))","user":"5357b241e4b04ce2eb3ed282"},{"problem":80,"code":"(fn [x] (->> (range 1 x)\n             (filter #(zero? (mod x %)))\n             (apply +)\n             (= x)))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn [n]\n  (= n\n     (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4f38b7d9e4b0e243712b1ee0"},{"problem":80,"code":"(fn [x] (= x (apply + (filter #(zero? (rem x %)) (range 1 (inc (quot x 2)))))))","user":"4ff4bed0e4b0678c553fc35f"},{"problem":80,"code":"(fn perfect? [n]\n  (letfn [(sum-divisors [n]\n            (->> (range 1 n)\n                 (filter #(zero? (mod n %)))\n                 (reduce +)))]\n    (= n (sum-divisors n))))","user":"547884d7e4b0c51c1f4d72bd"},{"problem":80,"code":"(fn perfect [n]\n (= n (reduce + (filter #(= (rem n %) 0) (range 1 (/ (+ 1 n) 2))))))","user":"55b22c33e4b0da326a65cf79"},{"code":"(fn *perfect                                                                                                                               \n  [n]                                                                                                                                        \n  (= n \n    (- \n      (reduce + \n        (filter #(integer? (/ n %)) \n          (range 1 (+ n 1)))) n)))","problem":80,"user":"4e3bcccd535deb9a81d77f56"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + \n               (filter\n                #(zero? (mod n %))\n                (range 1 n)))))","user":"567931e9e4b05957ce8c6184"},{"problem":80,"code":"(fn [n]\n  (let [possible (range 2 (Math/sqrt n))\n        divs (filter #(= 0 (mod n %)) possible)\n        sum (+ 1 (reduce #(+ % %2 (/ n %2)) 0 divs))]\n    (= sum n)))","user":"549eb44fe4b0f3d1d8e70fa6"},{"code":"(fn [n]\n  (let [nums (range 1 n)]\n    (boolean (= n (apply + (filter #(= 0 (mod n %)) nums))))))","problem":80,"user":"51281b25e4b03a34742b4304"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisors (->> n range rest (filter #(= 0 (rem n %))))]\n    (= n (reduce + divisors))))","user":"52ee46e5e4b05e3f0be25ec5"},{"code":"(fn [x]\n  (= x (reduce + (for [i (rest (range x)) :when (= 0 (rem x i))] i))))","problem":80,"user":"4e28120f535deb9a81d77efa"},{"problem":80,"code":"(fn perfect-num\n  [n]\n  (= n (reduce + 0 (filter #(= 0 (mod n %1)) (range 1 n)))))","user":"5ec943fde4b08d0ec38692f1"},{"code":"(fn [n] (let [divisors (filter #(zero? (mod n %))\n                               (range 1 n))]\n          (= n (apply + divisors))))","problem":80,"user":"510acd6ee4b078ea719210f4"},{"code":"(fn divs [n]\n  (= (apply + (filter #(zero? (mod n %)) (range 1 n)))\n     n))","problem":80,"user":"4e5914e0535d8a8b8723a29b"},{"problem":80,"code":"(fn [n] (->> n (range 1) (filter #(= 0 (mod n %))) (apply +) (= n)))","user":"53fcdd1ae4b0de5c418485dd"},{"problem":80,"code":";every even perfect number is represented in binary as p ones followed by p − 1  zeros\n;whether odd perfect number exists is still to be proven\n(fn perfect-num? [n] (let [x (partition-by identity (Integer/toBinaryString n)) \n      a (first x) b (second x)] \n        (if (and (= 2 (count x)) \n                 (= 1 (- (count a) (count b))))\n          \t\t\ttrue \n          \t\t\tfalse)))","user":"558bdcefe4b0277789237633"},{"problem":80,"code":"(fn [n]\n            (->> n\n                 Math/sqrt\n                 int\n                 range\n                 (map inc)\n                 (filter (fn [d] (zero? (rem n d))) )\n                 (map (fn [v] [v (quot n v)]))\n                 rest\n                 flatten\n                 (into #{})\n                 (apply +)\n                 inc\n                 (= n)))","user":"53684a2fe4b0243289761e8c"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisible? #(= 0 (mod n %))\n  \t\tdivisors (filter divisible? (range 1 (inc (/ n 2))))\n        sum (reduce + divisors)]\n    (= sum n)))","user":"5483d59fe4b0e286459a1194"},{"problem":80,"code":"(fn [num]\n  (loop [div 2, sum 1]\n    (cond \n     (> div (/ num 2)) (if (= sum num)\n                         true\n                         false)\n     (zero? (mod num div)) (recur (inc div) (+ sum div))\n     :else (recur (inc div) sum))))","user":"54ab1b5ae4b09f271ff37cc2"},{"code":"(fn [n] (== n (reduce + (filter #(== 0 (mod n %)) (range 1 n)))))","problem":80,"user":"5078d366e4b08327cd804a5b"},{"problem":80,"code":";(fn [n]\n;  (loop [k 1 sol []]\n;    (if (>= k n)\n;      (= n (apply + sol))\n;      (recur (inc k) (into sol (if (= 0 (rem n k)) [k] []))))))\n\n(fn [n]\n  (= n (apply + (filter #(= (rem n %) 0) (range 1 n)))))","user":"59156f0be4b0163c97b36f3d"},{"code":"(fn [n]\n  (let [divisors (filter #(zero? (mod n %)) (range 1 n))]\n    (if (= (apply + divisors) n)\n        true\n        false)))","problem":80,"user":"4e944706535dbda64a6f6b11"},{"problem":80,"code":"(fn [n]\n  (= n\n    (reduce\n      +\n      (filter\n        #(= 0 (mod n %))\n        (range 1 (inc (/ n 2)))))))","user":"559279b7e4b0604b3f94d58c"},{"code":"(fn\n  [x]\n  (let [divs (filter #(= 0 (mod x %)) (range 1 x))]\n    (= x (reduce + divs))\n   ))","problem":80,"user":"4e333091535deb9a81d77f25"},{"code":"(fn [n] (= n (reduce #(if (zero? (mod n %2)) (+ % %2) %) (drop 1 (range n)))))","problem":80,"user":"503b6995e4b07a1917cc34dd"},{"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (rem n %))\n                         (range 1 (inc (quot n 2)))))))","problem":80,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn [n]\n  (letfn [(divisors [n]\n            (filter #(= 0 (mod n %)) (range 1 n)))\n          (sum [ns]\n            (reduce + ns))]\n    (let [ds (divisors n)]\n      (= (sum ds) n))))","problem":80,"user":"504e13fce4b078edc5f593bc"},{"problem":80,"code":"(fn a [n]\n  (= (reduce + (filter #(= 0 (mod n %)) (range 1 n))) n)\n  )","user":"5fe09d1fe4b05ac5b16ea15b"},{"code":"(fn [n]\n  (= n (apply + (for [x (range 1 n) :when (= 0 (mod n x))] x))))","problem":80,"user":"4f26d6d9e4b0d6649770a007"},{"problem":80,"code":"(fn [x] (= (reduce + (filter #(= (rem x %) 0) (range 1 x))) x))","user":"5d7158f3e4b04d129b00f2e1"},{"code":"(fn [n]\n(= (apply + (filter #(zero? (mod n %)) \n                (range 1 n))) n))","problem":80,"user":"4e80d71b535db62dc21a62b7"},{"code":"(fn [x] (= (reduce + (filter #(zero? (rem x %)) (range 1 x))) x))","problem":80,"user":"4ea365e2535d7eef308072c5"},{"code":"(fn [n]\n  (=\n   n\n   (reduce\n    +\n    (filter #(zero? (mod n %))\n    (range 1 n)))))","problem":80,"user":"51b86a0fe4b09e0e347b2e78"},{"problem":80,"code":"(fn [v] (= v (->> (range 1 v) (filter #(= 0 (rem v %))) (reduce +)\n              )))","user":"55adf4d7e4b03311e7b732af"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(zero? (mod n %)) (range 1 (inc (/ n 2))))]\n  (= n (reduce + divisors))\n  ))","user":"545801f6e4b01be26fd74615"},{"code":"(fn b [n]\n  (= (reduce + (filter #(= 0 (mod n %)) (range 1 n))) n))","problem":80,"user":"4fe97adde4b0547ebccb245e"},{"code":"(fn perfect? [n]\n  (= n (reduce + (filter #(= (mod n %) 0) (range 1 (inc (quot n 2)))))))","problem":80,"user":"52ba43d0e4b07a9af57922cd"},{"code":"(fn perfect? [n]\n  (let [divisors\n        (for [x (range 1 n)\n              :when (= 0 (rem n x))]\n          x)]\n        (= n (reduce + divisors))))","problem":80,"user":"51baff1be4b0fe3ecfb46443"},{"code":"(fn [i] (= i (reduce + (filter #(= 0 (mod i %)) (range 1 i)))))","problem":80,"user":"4f0e4ebd535d0136e6c22322"},{"problem":80,"code":"(fn [n]\n  (->>\n    (for [x (map\n              second\n              (iterate \n                (fn [[a b]] [(inc a) (+ (inc a) b)]) \n                [1 1]))\n          :while (<= x n)]\n      x)\n    (last)\n    (= n)))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":80,"code":"(fn [n]\n   (let [div-n (filter (comp zero? (partial mod n)) (range 1 n))]\n     (= (apply + div-n) n)))","user":"55895eade4b059ccff29b202"},{"problem":80,"code":"(fn [x]\n(= x (reduce + (filter (fn [y] (if (= 0 (mod x y)) true false))(rest (range x)\n  ))))\n\n)","user":"59228b00e4b026ae38521281"},{"problem":80,"code":"(fn [x] \n  (let [divisors (->> \n                   (range 1 x)\n                   (filter #(= 0 (mod x %))) )]\n    (= x (reduce + divisors)) ))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn [x]\n  (= x\n     (reduce +\n       (filter #(= 0 (mod x %)) (range 1 x)))))","problem":80,"user":"507ef25ce4b0f753b6f9788e"},{"code":"(fn p [n]\n  (= n (reduce + (filter #(= (mod n %) 0) (range 1 n)))))","problem":80,"user":"4e778d36535d324fb2983d71"},{"problem":80,"code":"(fn [x]\n  (loop [sum 1, iteration 1]\n    (if (= sum x)\n      true\n      (if (> sum x)\n        false\n        (recur (+ sum iteration 1) (inc iteration))\n      )\n    )\n  )\n)","user":"55bbb28be4b01b9910ae29ea"},{"code":"#(->> (range 1 (inc (/ % 2)))\n      (filter (partial (comp zero? rem) %))\n      (apply +)\n      (= %))","problem":80,"user":"5003ee7de4b0678c553fc446"},{"code":"(fn  [x]\n  (boolean (= (apply + (filter #(= (mod x %) 0) (range 1 (dec x)))) x)))","problem":80,"user":"53300924e4b019098a6f8b55"},{"code":"#(not= nil (#{6 496 8128} %))","problem":80,"user":"5088082ae4b0198722bd9854"},{"problem":80,"code":"(fn [x]\n  (loop [n 0\n         r 0]\n    (if (> r 10000)\n      false\n      (if (= r x)\n        true\n        (recur (inc n) (+ r (inc n)))\n        ))))","user":"517e12e3e4b0fcc7c5d37d3c"},{"code":"(fn perfect [n]\n  (->> (range 1 n)\n       (filter #(zero? (mod n %)))\n       (reduce +)\n       (= n)))","problem":80,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":80,"code":"(fn [n]\n  (= n\n     (apply +\n       (reduce\n         (fn [acc x]\n           (let [pair (/ n x)]\n             (if (== pair (int pair))\n               (conj acc x pair)\n               acc)))\n         [1]\n         (range 2 (Math/sqrt (inc n)))))))","user":"554bd33ce4b0a04f7929959a"},{"code":"(fn [n] (= n (reduce +\n            (filter #(zero? (mod n %))\n                    (range 1 (inc (/ n 2)))))))","problem":80,"user":"4fc0853ae4b081705acca327"},{"problem":80,"code":"(fn perf [n]\n  (let [divisors (filter #(= 0 (mod n %)) (range 1 (inc (/ n 2))))]\n    (= (apply + divisors) n)\n    ))","user":"55934bebe4b0c79f6e1db93b"},{"problem":80,"code":"(fn [n]\n    (letfn [(divisors [n]\n              (loop [i 2 divisors [1]]\n                (if (> i (Math/sqrt n)) divisors\n                    (if (< 0 (mod n i))\n                      (recur (inc i) divisors)\n                      (if (= (/ n i) i)\n                        (recur (inc i) (conj divisors i))\n                        (recur (inc i) (conj divisors i (/ n i))))))))]\n      (= n (reduce + (divisors n)))))","user":"595bbab7e4b066ee0a44afe0"},{"code":"(letfn [(divides? [n d] (= (mod n d) 0))\n        (possible-divisors [n] (range 1 n))\n        (divisors [n] (filter (partial divides? n) (possible-divisors n)))]\n  (fn perfect? [n]\n    (= n (reduce + (divisors n)))))","problem":80,"user":"4e9a1512535dbda64a6f6b6e"},{"code":"#(= (reduce + (loop [r [] i 1]\n     (if (< i %)\n       (if (= 0 (mod % i))\n         (recur (conj r i) (inc i))\n         (recur r (inc i)))\n       r))) %)","problem":80,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"(fn perfect? [n]\n  (= n (reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4f7e29dde4b06e829148e1ca"},{"problem":80,"code":"(fn [m]\n  (= (* m 2) (apply +\n  (filter\n   #(zero? (mod m %))\n   (range 1 (inc m))))))","user":"4f037faf535dcb61093f6af8"},{"code":"#(= % (apply + (for [i (range 1 %) :when (zero? (mod % i))] i)))","problem":80,"user":"510db6cde4b078ea71921145"},{"code":"(fn [x]\n  (= \n    (apply + (filter #(integer? (/ x %)) (range 1 x)))\n  x ))","problem":80,"user":"4de18de7535d08e6dec9fde8"},{"code":"(fn [n] (= n (apply + (filter (fn [i] (= 0 (rem n i))) (range 1 n)))))","problem":80,"user":"4f83665ee4b033992c121c1c"},{"problem":80,"code":"(fn [y](if (= y (apply + (filter (fn[x](= 0 (mod y x))) (range 1 y)))) true false))","user":"53f75957e4b0de5c4184855d"},{"code":"(fn [n] \n  (= n \n    (apply + \n            (filter #(zero? (mod n %)) \n                    (range 1 n)))))","problem":80,"user":"4e68b46c535d8ccf87e9fe87"},{"code":"(fn[x](= (apply + (filter #(zero? (mod x %)) (range 1 x)))x))","problem":80,"user":"4e7eff9e535db966e863cc38"},{"code":"#(= % (apply + (filter (fn [n] (zero? (mod % n))) (range 1 (inc (/ % 2))))))","problem":80,"user":"4fb99483e4b081705acca2da"},{"code":"(fn [n] (= n (apply + (set (filter #(= 0 (mod n %)) (range 1 n))))))","problem":80,"user":"500854c4e4b028e089d3518c"},{"code":"(fn [x] (= x (reduce + (filter #(= (mod x %) 0) (map + (range 1 x))))))","problem":80,"user":"514cfa27e4b019235f6c057d"},{"problem":80,"code":"(fn perfect-number?\n  ([n] (perfect-number? n 1 0))\n  ([n start end]\n    (cond\n      (= end n) true\n      (< end n) (recur n (inc start) (+ start end))\n      :else false)))","user":"550d9452e4b06e50f9beb15d"},{"code":"(fn [n] (= n (apply + (filter #(= 0 (rem n %)) (range 1 (inc (quot n 2)))))))","problem":80,"user":"4ebef65e535dfed6da9c6d9b"},{"code":"(fn perfect? [number]\n  (let [divisors (fn [n]\n                 (filter #(zero? (mod n %)) (range 1 n)))]\n    (== number (reduce + (divisors number)))))","problem":80,"user":"4eda7cc3535d10e5ff6f530e"},{"code":"#(loop [x 2 y 1] (if (> y %) false\n                  (if (= y %) true\n                    (recur (inc x) (apply + (range 1 x)))\n                    )\n                   )\n   )","problem":80,"user":"5105ed16e4b01150e115ebe2"},{"code":"(fn pn?\n  [x]\n  (letfn [(divisors [x] (filter #(zero? (mod x %)) (range 1 x)))]\n    (= x (apply + (divisors x)))))","problem":80,"user":"4f8bbb27e4b02e764a0a5182"},{"code":"#(= %\n   (apply +\n     (for [i (map inc (range (quot % 2))) :when (zero? (mod % i))]\n       i)))","problem":80,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(fn [n]\n    (let [divisors (filter #(= 0 (mod n %)) (range 1 n))]\n      (= n (apply + divisors))))","problem":80,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn [n]\n  (let [l (filter #(= 0 (mod n %)) (range 1 n))]\n    (= n (apply + l))))","problem":80,"user":"52a5a8ebe4b0c58976d9abed"},{"code":"(fn [x]\n  (= x (reduce + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"5164867fe4b003cf19fdde3e"},{"problem":80,"code":"(fn perfect-number?\n  [n]\n  (let [divisor?\n        (fn\n          [n x]\n          (= 0 (mod n x)))\n\n        divisors\n        (fn\n          [n]\n          (filter #(divisor? n %) (range 1 n) ))]\n\n    (= n (apply + (divisors n)))))","user":"5614fa1de4b05f002753dfbe"},{"problem":80,"code":"(fn [n]\n   (= n (reduce + (- n)\n                (for [m (range 1 (Math/sqrt n))\n                      :when (#(= 0 (rem n %)) m)]\n                  (+ m (quot n m))))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":80,"code":"(fn [n]\n(= n (apply + (filter #(integer? (/ n %)) (rest (range (inc (/ n 2))))))))","user":"589b98fae4b00487982d533c"},{"problem":80,"code":"(fn __\n  [num]\n  (= num\n     (letfn [(divisible? [x] (zero? (rem num x)))]\n       (->> (range 1 num) (filter divisible?) (reduce +)))))","user":"55a62092e4b0acc240e31554"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [nx]\n          (for [x (range 1 nx) :while (< x nx) :when (= 0 (mod nx x))] x))]\n    (= n (reduce + (divisors n)))))","user":"5a9dbb32e4b0d174b936c7f3"},{"code":"(fn [n]\n  (= n (apply + (filter #(zero? (mod n %)) \n                        (range 1 n)))))","problem":80,"user":"4e599577535d8a8b8723a29f"},{"problem":80,"code":"(fn [x] (= x (apply + (filter #(= 0 (rem x %)) (range 1 x) ) )))","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn perfect-number? [n]\n  (->>\n    (range 1 (+ (/ n 2) 1))\n    (filter #(= 0 (mod n %)))\n    (reduce +)\n    (= n)))","problem":80,"user":"4f1bee08535d64f60314647e"},{"problem":80,"code":"(fn [n]\n  (->> (range (/ n 2))\n       (map inc)\n       (filter #(zero? (mod n %)))\n       (reduce +)\n       (= n)))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"(fn [n] \n  (let [\n    divisors (filter #(zero? (rem n %)) (range 1 (dec n)))\n    ]\n    (= (reduce + divisors) n)))","problem":80,"user":"4e25176e535d04ed9115e829"},{"code":"#(= % (apply + (for [x (range 1 %)] ({0 x} (rem % x) 0))))","problem":80,"user":"4e823ed7535db62dc21a62c7"},{"code":"(fn is-perfect? [n]\n  (letfn [(divisors [n] (filter #(zero? (rem n %)) (range 1 n)))]\n    (= (apply + (divisors n)) n)))","problem":80,"user":"523b82efe4b07becd5be21f0"},{"code":"(fn perfect-num? [n]\n  (let [devisors (fn [n]\n                   (filter #(= (rem n %) 0) (range 1 n)))]\n    (= (reduce + (devisors n))\n       n)))","problem":80,"user":"4dd0e8f7535da60f04a96e57"},{"problem":80,"code":"(fn [n]\n  (loop [i 1, s 0]\n    (if (= i n)\n        (= n s)\n        (if (= 0 (rem n i))\n          (recur (inc i) (+ s i))\n          (recur (inc i) s)))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"code":"(fn perfect? [n]\n  (= n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"53244c9de4b09d4e7a9b54db"},{"problem":80,"code":"(fn perfect? [x]\n  (= x (apply + ;sum is x\n         (filter #(= 0 (rem x %));find divisor\n                 (range 1 x)))));from 1 inclusive to x exclusive","user":"556c70dae4b09a3098a524fd"},{"problem":80,"code":"(fn perfect? [x]\n  (let [factors (fn factors [n]\n                  (filter #(zero? (rem n %)) (range 1 (inc (/ n 2)))))]\n    (if (= x (reduce + (factors x)))\n      true\n      false)))","user":"55d9743ae4b0e31453f64aca"},{"problem":80,"code":"(fn [x] (->> (range 1 x)\n             (filter #(= 0 (mod x %)))\n             (apply +)\n             (= x)))","user":"60ae0ac5e4b00e9e6653c495"},{"code":"(fn is-perfect [num]\n  (= num (apply + (filter #(zero? (mod num %)) (range 1 num)))))","problem":80,"user":"4fc8769be4b0ee37620e1833"},{"problem":80,"code":"(fn [x]\n  (letfn\n    [(f \n      ([x ds i]\n        (if (>= i x)\n          ds\n          (if (zero? (mod x i))\n            (recur x (conj ds i) (inc i))\n            (recur x ds (inc i)))))\n      ([x] (f x [] 1)))]\n    (= x (apply + (f x)))))","user":"5799ff45e4b05b1deef9add1"},{"problem":80,"code":"(fn [x] (let [divisors (fn [z] (filter #(not (nil? %1))\n                                       (reduce #(cons (when (= 0 (mod z %2)) %2) %1) [] (range 1 z))))]\n          (= x (reduce + (divisors x)))))","user":"5ccb3792e4b0ccb061962882"},{"problem":80,"code":"(fn __ [n]\n  (= (reduce + (filter #(integer? (/ n %)) (range 1 n))) n))","user":"526759b3e4b03e8d9a4a715b"},{"code":"#(.contains [6 496 8128]%)","problem":80,"user":"4df1e213535d08e6dec9fe20"},{"code":"(fn [n]\n  \n  (= (reduce + (filter #(= (mod n %)\n                           0)\n                       (range 1 n)))\n     n))","problem":80,"user":"4daea889edd6309eace4d15b"},{"problem":80,"code":"(fn [n]\n  (= n (reduce +\n            (filter #(zero? (mod n %)) (range 1 n)))))","user":"5cf895efe4b0b71b1d808a85"},{"problem":80,"code":"(fn [n]\n  (->>\n     (/ n 2)\n     int\n     inc\n     (range 1)\n     (filter #(zero? (mod n %)))\n     (apply +)\n     (= n)\n   ))","user":"536ecd9fe4b0fc7073fd6e76"},{"code":"(fn [i] (= i \n  (reduce + (filter #(= 0 (mod i %)) (map inc (range (/ i 2)))))))","problem":80,"user":"4eabb245535d7eef30807319"},{"problem":80,"code":"(fn perf\n  [x]\n  (->>\n    (loop [divs ()\n           n 1]\n      (if (= n x)\n        divs\n        (recur (if (zero? (rem x n))\n                 (conj divs n)\n                 divs)\n               (inc n))))\n    (reduce +)\n    (= x)))","user":"4e8a170c535d3e98b802328f"},{"code":"(fn __ [n]\n  (let [cand-divisors (range 1 n)]\n  (= n\n    (reduce + (filter #(= 0 (mod n %)) cand-divisors)))))","problem":80,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn [n]\n    (let [divs (filter #(zero? (mod n %)) (range 1 n))]\n      (= (apply + divs) n)))","problem":80,"user":"501d34f6e4b066e56b9d0b1e"},{"problem":80,"code":"(fn [num]\n  (let [divs (->> (/ num 2)\n                  range\n                  (map inc)\n                  (filter #(zero? (mod num %))))]\n    (= num (reduce + divs))))","user":"53908e6be4b0b51d73faae9a"},{"problem":80,"code":"(fn[x]\n  (= x (reduce + (filter #(= 0 (rem x %)) (range 1 x)))))","user":"54f86b8ce4b01ecee9d88828"},{"code":"(fn [x]\n  (= x (reduce + (filter #(zero? (rem x %)) (range 1 x)))))","problem":80,"user":"4e4ad154535dc968683fc4d1"},{"problem":80,"code":"(fn [n]\n  (->>\n    (for [i (range 1 n)\n          :when (zero? (mod n i))]\n      i)\n    (reduce +)\n    (= n)))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn [n]\r\n  (->> (range 1 n)\r\n  (filter #(= 0 (rem n %)))\r\n  (apply +)\r\n  (= n)))","problem":80,"user":"4def301c535d08e6dec9fe12"},{"code":"#(contains? #{6 28 496 8128} %)","problem":80,"user":"4fbf2818e4b081705acca317"},{"code":"(fn [x]\r\n    (letfn [(factors [x]\r\n              (loop [xs [] i 1]\r\n                (if (> (* i i) x)\r\n                  (vec (sort (distinct xs)))\r\n                  (if (zero? (rem x i))\r\n                    (recur (conj xs i (/ x i)) (inc i))\r\n                    (recur xs (inc i))))))]\r\n      (= x (reduce + (pop (factors x))))))","problem":80,"user":"50436470e4b034ff00315d23"},{"code":"(fn [x]\n  (= x (apply + (filter #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"4ebaf790535dfed6da9c6d6e"},{"problem":80,"code":"(fn [n] (= n (reduce + (for [x (range 1 n)\n                               :when (zero? (rem n x))]\n                           x))))","user":"5fab003de4b08cb800c85ad1"},{"problem":80,"code":"(fn perfect-number? [n]\n  (letfn [(get-divisors [n]\n                        (concat [1] (flatten (for [x (range 2, (+ (int (Math/sqrt n)) 1))\n                                                   :when (= (mod n x) 0)]\n                                               [x (/ n x)]))))]\n    (printf \"%s\" (seq (get-divisors n)))\n    (= n (reduce + (get-divisors n)))))","user":"53791ab7e4b06839e8705e4d"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + (filter #(= 0 (rem n %)) (range 1 (/ (+ n 1) 2))))))","user":"5e246f92e4b05b4b01516150"},{"code":"(fn [n]\n  (= (reduce + (filter #(= (* % (int (/ n %))) n) (range 1 n))) n))","problem":80,"user":"512f06c5e4b0762be4c7aad7"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 (inc (int (/ n 2))))\n       (filter #(zero? (rem n %)))\n       (reduce +)\n       (= n)))","user":"5eb1c786e4b00a66d4a95201"},{"code":"(fn [x](if (= x 1) false ( = x (reduce + 1 (for [y (range 2 (Math/sqrt x)) :when (= (mod x y) 0 )] ( + y (quot x y)))))))","problem":80,"user":"505a0a15e4b03d2efce48c5a"},{"problem":80,"code":"(fn\n  [num]\n  (loop [iterator 1 divisors []]\n    (if (< iterator (+ (/ num 2) 1))\n      (if (= (rem num iterator) 0)\n       (recur (inc iterator) (conj divisors iterator))\n       (recur (inc iterator) divisors)\n       )\n      (if (= (apply + divisors) num)\n        true\n        false)\n      )\n    )\n  )","user":"5772ddb0e4b0979f896515d4"},{"problem":80,"code":"(fn perfect-number? \n  [n]\n  (let [divisors (for [divisor (range 1 n)\n                       :when (= 0 (mod n divisor))]\n                   divisor)]\n    (= n (reduce + divisors))))","user":"5fe5a64de4b05ac5b16ea187"},{"code":"(fn [n] (= n (reduce #(if (= 0 (mod n %2)) (+ %1 %2) %1) 0 (range 1 n))))","problem":80,"user":"52dc2bc8e4b09f7907dd13ca"},{"code":"(fn [x] (= x (reduce + (filter #(= 0 (rem x %1)) (range 1 (inc (/ x 2)))))))","problem":80,"user":"4f32a7f1e4b0d6649770a095"},{"problem":80,"code":"(fn [shit]\n    (letfn [(divisors [shit]\n              (filter #(zero? (rem shit %)) (range 1 (inc (/ shit 2)))))]\n      (= shit (apply + (divisors shit)))))","user":"561814bae4b06b1bb2182a1a"},{"problem":80,"code":"(fn [n]\n  (letfn [(divs [n] (filter #(= 0 (mod n %)) (range 1 n)))]\n    (= n (apply + (divs n)))))","user":"553e0b70e4b0a04f792994e8"},{"code":"(fn [x] (= x (apply + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"510c123be4b078ea7192110e"},{"code":"(fn [n] (= (reduce + (remove #(< 0 (mod n %)) (range 1 n))) n))","problem":80,"user":"4e8f1ac6535d65386fec2146"},{"problem":80,"code":"#(= % (reduce +\n              (map (fn [n] (if (= 0 (rem % (inc n))) (inc n) 0))\n                   (range (/ % 2)))))","user":"54b2ec84e4b09f271ff37d33"},{"code":"(fn [x]\n  (=\n   x\n   (reduce + (filter #(= (mod x %) 0) (range 1 x)))\n   )\n  )","problem":80,"user":"52586d24e4b0cb4875a45cb0"},{"code":"(fn [x] (= x (reduce + (filter\r\n  #(zero? (rem x %)) (range 1 x)))))","problem":80,"user":"4db1bfe21254ad5b4805fa71"},{"problem":80,"code":"(fn [n]\n  (= n (reduce +\n          (map #(if\n                  (= (rem n %) 0)\n                  %\n                  0)\n               (range 1 n)))))","user":"54c271b9e4b045293a27f602"},{"problem":80,"code":"#(= (apply + (reduce (fn [t v] (if (= (rem % v) 0) (conj t v) t)) [] (range 1 %))) %)","user":"54e24a05e4b024c67c0cf7ce"},{"code":"#(let [divisors (filter (fn [x] (zero? (mod % x))) (range 1 %))] \n    (= % (apply + divisors)))","problem":80,"user":"4e9660ec535dbda64a6f6b44"},{"code":"(fn is-perfect [n]\n    (= n\n        (apply + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"5132c6f0e4b021281ec7b6d3"},{"code":"(fn [n]\n(let [d (fn [m]\n             (set\n              (filter #(= 0 (mod m %1))\n                      (range 1  m))))\n      sd (reduce + (d n))]\n    (= sd n)))","problem":80,"user":"4dcc5aff535d5973398f9293"},{"code":"(fn perfect? [n]\n    (= n\n        (apply + (filter #(zero? (rem n %)) (range 1 (inc (quot n 2)))))))","problem":80,"user":"4f128865535d64f603146428"},{"problem":80,"code":"(fn\n  [x]\n  (= x (reduce + (filter #(= 0 (rem x %)) (range 1 x)))))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"#(= % (apply + (filter (fn [x] (zero? (rem % x))) (range 1 %))))","problem":80,"user":"53460d02e4b084c2834f4a39"},{"problem":80,"code":"(fn [x] (= (apply + (rest (reverse (filter #(not (nil? %)) (map #(if (= (mod x %) 0) % nil) (range 1 (+ x 1))))))) x))","user":"5ac04101e4b073f177442737"},{"code":"(fn perfect? [x]\n   (= x (apply + (filter #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"4e89f46c535d3e98b8023288"},{"problem":80,"code":"(fn [n]\n    (let [divisors (filter #(zero? (rem n %)) (range 1 n))]\n      (= (apply + divisors) n)))","user":"54cad2d5e4b057c6fda3a26c"},{"code":"#(letfn [ (all-divs [n] \n  (loop [[f & r] (rest (range (/ (+ n 4) 2))) all-divs []]   \n    (if (empty? r) all-divs\n          (if (=  (mod n f) 0)\n            (recur r (conj all-divs f))\n            (recur r all-divs)\n            ))))] (if (= % (apply + (all-divs %))) true false))","problem":80,"user":"4fa9da14e4b081705acca1e7"},{"problem":80,"code":"(fn [n] ( = n (reduce + (filter #(zero? (mod n %)) (range 1 (/ (inc n) 2)) ))))","user":"549375e4e4b0b312c081ff4e"},{"problem":80,"code":"(fn perfect-number?\n  [n]\n  (letfn [(divisors [n]\n            (filter #(= 0 (rem n %)) (range 1 n)))]\n    (= n (reduce + (divisors n)))))","user":"5c222b7de4b07e362c230588"},{"problem":80,"code":"#(= % (reduce + (filter (fn [y] (zero? (rem % y))) (range 1 %))))","user":"53e19461e4b0d874e779ae59"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(zero? (mod n %)) (range 1 (inc (/ n 2))))]\n    (== n (reduce + divisors))))","user":"51684318e4b03f62cda68cd6"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter (fn [x] (= (mod n x) 0)) (range 1 n))\n        answer (= n (reduce + divisors))]\n    answer))","user":"5414b7c4e4b01498b1a719ed"},{"problem":80,"code":"(fn [n]\n  (if (< n 2)\n    false\n    (->> n\n       (range 1)\n       (filter #(zero? (mod n %)))\n       (apply +)\n       (= n))))","user":"5564cad5e4b0c656e3ff180f"},{"code":"#(= % (apply + (filter (fn [a] (zero? (rem % a))) (range 1 %))))","problem":80,"user":"4e8e8c24535d65386fec2143"},{"code":"(fn [x]\n  (= x\n     (apply + (for [y (range 1 x)\n                    :when (zero? (mod x y))]\n                y))))","problem":80,"user":"507b7dbee4b09034bfeeb71e"},{"code":"(fn [n]\r\n  (= n\r\n    (apply +\r\n      (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"509c03f3e4b085ae113522a8"},{"code":"(fn [n] \n  (= n (reduce + \n    (filter\n      #(zero? (rem n %))\n      (range 1 n)))))","problem":80,"user":"511f88eee4b085952a83535f"},{"code":"(fn [x]  (= x (apply + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"530bf87ee4b02e82168697d5"},{"problem":80,"code":"(fn [n]\n(= n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","user":"5f58db95e4b0a0bc16850a9a"},{"code":"(fn [n]\n  (=\n    n\n    (apply\n      +\n      (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4f9597e0e4b0dcca54ed6cd4"},{"problem":80,"code":"(fn [n]\n  (let [divs (for [div (range 1 (+ (/ n 2) 1))\n                   :when (= (mod n div) 0)]\n               div)]\n    (= (apply + divs) n)))","user":"542c026ae4b0dad94371f29a"},{"problem":80,"code":"(fn [n]\n    (letfn [(divisors [n]\n                      (filter #(zero? (mod n %)) (range 1 n)))]\n           (= n (reduce + (divisors n)))))","user":"4f867b25e4b033992c121c51"},{"code":"(fn [x]\n  (= x (reduce +\n          (map #(second %)\n               (filter #(zero? (first %))\n                       (map #(vector % %2)\n                            (map #(mod x %) (range 1 x))\n                            (range 1 x)))))))","problem":80,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":80,"code":"(fn is-perfect [x]\n  (let [get-divisors (fn get-divisors [y]\n    (filter #(zero? (rem y %)) (range 1 y))\n  )]\n    (= x (apply + (get-divisors x)))\n  )\n)","user":"56393681e4b0bfe05bf117f2"},{"problem":80,"code":"(fn [n]\n    (= (apply + (reduce #(if (zero? (mod n %2))\n                     (conj % %2) \n                     %) \n                  [] (range 1 (inc (/ n 2))))) \n       n))","user":"53572176e4b04ce2eb3ed276"},{"code":"(fn [x]\n  (= x (apply + (filter #(= 0 (mod x %)) (range 1 x))) x))","problem":80,"user":"4e7f32ee535db966e863cc3a"},{"problem":80,"code":"(fn [x] (= x(apply +(filter #(=(mod x %)0)(range 1 x)))))","user":"5951190be4b066ee0a44aea4"},{"problem":80,"code":"(letfn [(divisors [x]\n            (->> (range 1 (inc (quot x 2)))\n                 (filter #(= 0 (rem x %)))))]\n    (fn perfect? [x]\n      (= x (reduce + (divisors x)))))","user":"4dfe5a93535d04ed9115e786"},{"code":"(let [divisors (fn [n] (filter #(integer? (/ n %)) (range 1 n)))]\n  (fn [n] (= (apply + (divisors n)) n)))","problem":80,"user":"52a1acb2e4b04e0c58e87bdb"},{"code":"(fn [n]\n(= n (apply + (filter #(= (mod n %) 0)\n                      (range 1 n)))))","problem":80,"user":"50361b6be4b0fbe0a74d26be"},{"code":"(fn [x]\n  (= x (apply + (filter #(zero? (rem x %)) (range 1 x)))))","problem":80,"user":"4f9970b3e4b0dcca54ed6cfd"},{"problem":80,"code":"{6 true\n 7 false\n 496 true\n 500 false\n 8128 true} ; ^_^","user":"57aa4775e4b0b8559636fc6b"},{"problem":80,"code":"(fn [n]\n  (let [div-sum (fn [n]\n          (loop [i 2 acc 1]\n            (if (== i n)\n              acc\n              (if (integer? (/ n i))\n                (recur (inc i) (+ acc i))\n                (recur (inc i) acc)))))]\n    (== (div-sum n) n)))","user":"538e864ee4b0b51d73faae87"},{"code":"(fn [n]\r\n  (= n (reduce + (reduce #(if (zero? (rem n %2)) (conj %1 %2) %1) (sorted-set) (range 1 n)))))","problem":80,"user":"4f29cdc8e4b0d6649770a033"},{"code":"(fn p [n]\n  (loop [i (int (Math/sqrt n))\n         s 0]\n    (cond (zero? i) (= (* 2 n) s)\n          (zero? (mod n i)) (recur (dec i) (+ s i (int (/ n i))))\n          :else (recur (dec i) s))))","problem":80,"user":"4facd2fae4b081705acca22f"},{"code":"(fn [x]\n  (= x (apply + (filter #(zero? (mod x %)) (range 1 x))))\n)","problem":80,"user":"5094057fe4b097f48cc38593"},{"code":"(fn [x] \n  (= x (reduce + (filter #(= 0 (mod x %)) (range 1 x)))))","problem":80,"user":"5300aa1de4b0d8b024fd3710"},{"problem":80,"code":"(fn perfect-number?\n  [x]\n  (= x (apply +\n              (filter (comp zero? (partial rem x))\n                      (range 1 x)))))","user":"4fcf1755e4b03432b189f40c"},{"problem":80,"code":"(fn [n] \n  (if (= (reduce + (filter #(zero? (rem n %)) (range 1 n))) n)\n    true false))","user":"53d977f1e4b0e771c302547a"},{"problem":80,"code":"(fn [x]\n  (letfn [(divisors [n]\n            (set (flatten (for [d (range 1 (inc n))\n                                :while (<= (* d d) n)\n                                :when (zero? (rem n d))]\n                            [d (/ n d)]))))\n          (sum-of-proper-divisors [n]\n            (reduce + (disj (divisors n) n)))]\n    (= x (sum-of-proper-divisors x))))","user":"55c4e48be4b0e31453f649a7"},{"code":"(fn [x]\n  (= x (apply + (filter #(= 0 (mod x %))\n                        (range 1 x)))))","problem":80,"user":"50acbd15e4b071b89ef26234"},{"code":"(fn [x] (= (reduce + (filter #(= (mod x %) 0) (range 1 x))) x))","problem":80,"user":"4feada56e4b0140c20fb9c11"},{"problem":80,"code":"(fn perfect-num\n  [n]\n  (->> n\n       (range 1)\n       (filter #(= 0 (mod n %)))\n       (reduce +)\n       (= n)))","user":"5ff454a1e4b05ac5b16ea20d"},{"code":"(fn [x]\r\n  (let [divisors-limit (if (even? x) (/ x 2) (int (/ x 3)))\r\n        test-nums (range 1 (inc divisors-limit))\r\n        divisors (filter #(zero? (rem x %)) test-nums)]\r\n    (= x (apply + divisors))))","problem":80,"user":"4fabbb97e4b081705acca21d"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter #(zero? (rem n %)) (range 1 n))))\n)","user":"53ae16e2e4b047364c044472"},{"problem":80,"code":"(fn [n]  (= n (reduce + (filter #(= (rem n %) 0) (range 1 (inc(/ n 2)))))))","user":"54377355e4b032a45b869305"},{"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (mod n %)) (range 1 (+ 1 (/ n 2)))))))","problem":80,"user":"50e87252e4b0ebbe794eb7e7"},{"problem":80,"code":"#(= %   (apply + (filter  (fn [m] (zero? (mod % m))) (range 1 %) ))  )","user":"5c0e3f86e4b01240ff56713d"},{"problem":80,"code":"(fn [x]\n  (let [factors (filter #(zero? (mod x %)) (range 1 x))]\n    (= x (apply + factors))))\n\n\n;; or  \n;; (fn [n] \n;;     (->> \n;;      (range 1 n)\n;;      (filter #(zero? (mod n %)))\n;;      (reduce +)\n;;      (= n)\n;;     )\n;; )","user":"5412646de4b01498b1a719d4"},{"problem":80,"code":"(fn [num]\n  (= (apply + (filter #(= 0 (mod num %)) (drop 1 (range num)))) num))","user":"5f79bff2e4b02876ed9fd0ca"},{"code":"(fn perf [n]\n    (letfn [(divisors [n]\n        (filter #(zero? (mod n %)) (range 1 n)))]\n        (= n (reduce + 0 (divisors n)))))","problem":80,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":80,"code":"(fn perf? [n]\n  (let [ds (filter #(= 0 (rem n %)) (range 1 n))]\n    (= n (apply + ds))))","user":"512e31e9e4b0b740abc59823"},{"code":"(fn n80 [n] (= n (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"52b43468e4b0c58976d9ad1b"},{"code":"(fn [n]\n  (= (apply + (filter #(= 0 (mod n %)) (range 1 (/ (inc n) 2)))) n)\n)","problem":80,"user":"51ba8f82e4b0fe3ecfb46434"},{"code":"(fn [n]\r\n    (->>\r\n     (for [i (range 1 (inc (Math/sqrt n)))\r\n           :let [d (quot n i)]\r\n           :when (zero? (mod n i))] [d i])\r\n     (apply concat)\r\n     rest\r\n     distinct\r\n     (reduce +)\r\n     (= n)))","problem":80,"user":"4f047177535dcb61093f6bc6"},{"code":"(fn __ [target] (= target (reduce + (filter #(= (int (/ target  %)) (/ target  %)) (range 1 (inc (/ target 2)))))))","problem":80,"user":"52485723e4b05ef8e38e63d2"},{"code":"(fn perfect? [n]\n  (->> n\n       (range 1)\n       (filter\n         #(zero? (mod n %)))\n       (apply +)\n       (= n)))","problem":80,"user":"521e8227e4b0dd19981ad082"},{"code":"(fn [n]\n    (letfn [(divisors [x]\n              (filter #(zero? (rem x %))\n                      (range 1 x)))]\n      \n      (= (reduce + (divisors n)) n)))","problem":80,"user":"4dad938fc9a9d6ed1b99dc57"},{"problem":80,"code":"(fn is-perfect? [n]\n  (letfn [(divisors [n] (filter #(zero? (rem n %)) (range 1 n)))]\n    (= n (apply + (divisors n)))))","user":"53710c09e4b0fc7073fd6ea5"},{"problem":80,"code":"(fn [n]\n  (let [divs (filter #(= (mod n %) 0) (range 1 n))]\n    (= (reduce + divs) n)))","user":"52173464e4b082aa80a88c75"},{"problem":80,"code":"(fn [n] (= n \n           (reduce (fn [acc x] (if (zero? (mod n x)) (+ acc x) acc))\n                   (range 1 n))))","user":"5d97b602e4b0d3f9b434ad3a"},{"code":"(fn\n  [n]\n  (let [divides? (fn [n d] (= 0 (mod n d)))\n        divisors (filter (partial divides? n) (range 1 (inc (quot n 2))))]\n    (= n (apply + divisors))))","problem":80,"user":"52dfc89be4b09f7907dd1405"},{"problem":80,"code":"(fn perfect? \n  [n]\n  (->>\n  \t(range 1 n)\n   \t(filter #(zero? (mod n %)))\n   \t(reduce +)\n    (= n)   \n   )\n  )","user":"59cc4d5ee4b0a024fb6ae5d0"},{"problem":80,"code":"(fn perfect-number? [x]\n   (= x (reduce + (->> (range 1 x)\n                       (filter #(zero? (mod x %)))))))","user":"5d4b2155e4b0776584bd6f28"},{"problem":80,"code":"(fn [n] (= n (let [\n                   divisors (rest (range (+ 1 (Math/floor (/ n 2)))))  ;;all the divisors of 496\n                   ]\n               (apply + (filter #(= 0 (mod n %)) divisors))\n               )\n           )\n  )","user":"5baaae06e4b0a20761a23464"},{"problem":80,"code":"(fn [ x ] \n    (= x (apply + (filter #(= 0 (rem x %)) (range 1 (+ 1 (/ x 2)))))))","user":"5398305fe4b0b51d73faaef6"},{"problem":80,"code":"#(->>\n  (range 1 %)\n  (filter (comp zero? (partial mod %)))\n  (reduce +)\n  (= %))","user":"57717915e4b0979f896515b3"},{"code":"(fn [n] (= (apply + (filter #(= (rem n %) 0) (range 1 n))) n))","problem":80,"user":"4f569a3ce4b0a7574ea71828"},{"code":"(fn mydivis [x] (if (= x (reduce + 0 (filter #(= (mod x %) 0) \r\n                          ( range 1 (+(long (/ x 2))1)))))true false))","problem":80,"user":"50646c01e4b007509339a58b"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","user":"5514a60fe4b055c2f668d4d7"},{"code":"(fn [num] (= (reduce + \n             ((fn [n] (filter #(= 0 (rem n %)) (range 1 (inc (/ n 2)))))\n             num)) num))","problem":80,"user":"51533ecde4b0252ac4b16619"},{"problem":80,"code":"(fn [n]\n  (->> (for [i (range 1 n)\n             :when (= (rem n i) 0)]\n         i)\n       (reduce +)\n       (= n)))","user":"536673a8e4b0243289761e76"},{"problem":80,"code":";slow somehow; possibly `for` not being `lazy`\n;(fn perfect-num? [n]\n; (let [divisors (fn [n] (for [x (range 1 (inc n)) :when (zero? (rem n x))] x))]\n;  (= (* 2 n) (apply + (divisors n)))))\n\n(fn perfect-num? [n]\n (let [divisors #(->> (range 1 (inc %)) \n                      (filter (fn [x] (zero? (rem % x)))))]\n  (= (* 2 n) (apply + (divisors n)))))","user":"5bea3177e4b0f319e2d7ec81"},{"code":"(fn [n] (= n (reduce + (filter #(= (rem n %) 0) (range 1 (dec n))))))","problem":80,"user":"510931ede4b0c71f76895663"},{"code":"#(let \n  [get-divisors \n    (fn [number] \n    (loop [c (dec number) divisors []]\n      (cond\n        (= c 0) divisors\n        (= (mod number c) 0) \n          (recur (dec c) (concat divisors [c]))\n        true \n          (recur (dec c) divisors)\n       ))\n     )]\n  (= % (apply + (get-divisors %))))","problem":80,"user":"4fe588b6e4b0e8f79898fec5"},{"problem":80,"code":"(fn perfect-number? [n]\n  (letfn [(sum-divisors [n]\n            (reduce #(if (zero? (mod n %2))\n                       (+ %1 %2)\n                       %1)\n                    (range 1 (inc (/ n 2)))))]\n    (= n (sum-divisors n))))","user":"5d272077e4b092dab7f59c64"},{"code":"(fn [x] (= x (reduce + 0 (filter #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"4e79ff2a535db169f9c796a9"},{"problem":80,"code":"(fn perfect [number]\n  (letfn [(is-factor? [divident divisor] (zero? (mod divident divisor)))\n          (factors [number]\n            (distinct\n             (mapcat #(when (is-factor? number %)\n                       [(/ number %) %])\n                     (range 1 (inc (Math/sqrt number)) 1))))\n          (perfect? [number]\n              (= (reduce + (factors number)) (* 2 number)))]\n     (perfect? number)))","user":"55c66ffee4b0e31453f649c2"},{"code":"#(= % (apply + (for[d (range 1 %) :when (= 0 (mod % d))] d)))","problem":80,"user":"4db92654535d1e037afb21a0"},{"code":"(fn [n]\n  (= n (->> (range 1 n)\n         (filter #(zero? (mod n %)))\n         (apply +))))","problem":80,"user":"4f21838fe4b0d66497709fd2"},{"problem":80,"code":"(fn [n] (->> n\n             (range 1)\n             (group-by (partial mod n))\n             (#(get % 0))\n             (reduce +)\n             (= n)))","user":"56561119e4b0f9d632dd849d"},{"code":"(fn [n]\n  (= n\n  (reduce + 0 (filter #(integer? (/ n %)) (range 1 n)))))","problem":80,"user":"51aa2b4fe4b04e3dc0c27b21"},{"code":"(fn [n]\n  (= n (apply + (for [x (range 1 n) :when (= (mod n x) 0)] x))))","problem":80,"user":"5100d7dbe4b04f1d96d946df"},{"problem":80,"code":"#(loop [n % m 1]\n  (if (= 0 (mod n 2))\n    (recur (/ n 2) (* m 2))\n    (= (inc n) (* m 2))))","user":"522eb5cce4b01cdb292c5f0c"},{"problem":80,"code":"(fn f80 [n]\n (let  [newn (->>\n    (range 1 n)\n    (filter #(zero? (rem n %)))\n    (reduce +'))]\n   (if (= n newn)\n     true\n     false)))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":80,"code":"(fn perfect-number? [n] (= n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","user":"56f188e9e4b04a395b9a0494"},{"problem":80,"code":"(fn [n]\n  (let [divisors (fn [m] (for [x (range 1 m)\n                               :when (zero? (rem m x))]\n                           x))]\n    (= n (apply + (divisors n)))))","user":"5596a324e4b04c1e5c31d757"},{"problem":80,"code":"#(= % (apply + (for [i (range 1 %)\n       :when (= (mod % i) 0)]\n  \t       i)))","user":"56e7ebb4e4b02e7e935eb6e1"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divs (filter #(zero? (rem n %)) (range 1 n))]\n    (= (apply + divs) n)))","user":"5a527beee4b05d388ecb6bfe"},{"code":"(fn [x] (= (apply + (filter #(= (rem x %) 0) (map inc (range (/ x 2))))) x))","problem":80,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter #(= 0 (rem n %)) (take (dec n) (iterate inc 1))))))","user":"5b88f0c0e4b047b03b203816"},{"code":"(fn perfect? [n]\n  (let [divides? (fn [div numb] (= (mod numb div) 0))\n        divisors (filter #(divides? % n) (range 1 n))]\n    (= n (reduce + divisors))))","problem":80,"user":"4fa17b00e4b0dcca54ed6d5f"},{"problem":80,"code":"(fn [x]\n    (letfn [(divisors [n] (filter #(integer? (rationalize (/ n %))) (range 1 n)))]\n\t   (= x (apply + (divisors x))))\n)","user":"55f09e7be4b06e875b46ce28"},{"problem":80,"code":"(fn perfect-2\n  [num]\n  (if (= (reduce #(+ % %2) 0 (reduce #(if (= (rem num %2) 0) (conj % %2) %) [] (range 1 num))) num)\n    true\n    false)\n)","user":"556be3dce4b09a3098a524f7"},{"problem":80,"code":"(fn perfect [number] (= number (apply + (reduce #(if (= 0 (mod number %2)) (conj %1 %2) %1) [] (range 1 number)))))","user":"5d45bd1de4b07c84aa5ae6a4"},{"problem":80,"code":"(fn [n]\n    (if (= n (apply + (filter identity\n                              (for [i (range 2 (inc n))]\n                                (if (zero? (mod n i))\n                                  (/ n i))))))\n      true\n      false))","user":"5a9d64c8e4b0d174b936c7eb"},{"code":"(fn ff[n] \n  (= n \n    (reduce + \n      (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4f1fd734535d64f6031464a5"},{"code":"(fn[x] (= x (reduce + (filter #(zero? (rem x %)) (range 1 x)))))","problem":80,"user":"5301157ae4b0d8b024fd3717"},{"problem":80,"code":"(fn [i] (= i (apply + (filter #(= 0 (rem i %)) (range 1 i)))))","user":"54cbe00ee4b057c6fda3a285"},{"problem":80,"code":"(fn [x]\n   (= x (apply + (filter #(= 0 (mod x %)) (range 1 x)))))","user":"5405885ee4b0addc1aec6668"},{"problem":80,"code":"(fn [n] \n  (== n (reduce + (filter #(zero? (rem n %)) (range 1 n)))))","user":"54e606c3e4b024c67c0cf803"},{"code":"(fn [x]\r\n  (#(and (= (count %) 2) (= (- (first %) 1) (second %)))\r\n  (map count (partition-by #(= % \\1) (Integer/toBinaryString x))))\r\n  )","problem":80,"user":"4e5bdc2b535d8a8b8723a2bb"},{"problem":80,"code":"(fn [n] ( = n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"587c59d1e4b01531a375eb17"},{"problem":80,"code":"(fn [x]\n  (= x (apply +\n              (filter #(zero? (mod x %)) (range 1 x)))))","user":"525cc912e4b0cb4875a45d48"},{"problem":80,"code":"(fn [x]\n    (loop [acc 6 p 3]\n       (if (>= acc x)\n           (if ( = acc x) true false)\n          (\n            recur ( * (reduce * (repeat (dec p) 2))  (dec (reduce * (repeat p 2))))\n                  (inc p) \n          )\n    ))\n  )","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn [n]\n  (->> [n 1 2] (iterate (fn [[n _ i]] (if (zero? (rem n i))\n                                       [(quot n i) i i]\n                                       [n nil (inc i)])))\n       (take-while (fn [[n d _]] (or (> n 1) (not (nil? d)))))\n       (keep second)\n       (iterate next)\n       (take-while seq)\n       (map first)\n       (reduce (fn [v x] (into v (for [i v] (* i x)))) #{1})\n       (filter #(< % n))\n       (apply +)\n       (= n)))","problem":80,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":80,"code":"(fn [v] (= v (apply + \n                    (filter #(= 0 (rem v %)) \n                            (range 1 (inc (/ v 2))) ))))","user":"575ddfd1e4b02ea11479938d"},{"code":"(fn p [n]\n  (= n\n    (->>\n      (/ n 2)\n      inc\n      (range 1)\n      (filter #(zero? (mod n %)))\n      (apply +))))","problem":80,"user":"513b43ede4b067e25a345ed3"},{"code":"(fn [x]\n  (= x\n    (reduce +\n      (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"4dd9d299535d2dad7130b5dd"},{"problem":80,"code":"(fn perfect-number? [n]\n  (->> (range 1 n)\n       (filter #(zero? (rem n %)))\n       (apply +)\n       (= n)))","user":"5ea6fe98e4b00a66d4a951b2"},{"problem":80,"code":"(fn [n]\n  (let [coll (filter #(= 0 (mod n %)) (range 1 n))]\n    (= n (reduce + coll))))","user":"5dfa1c67e4b0a607a9a45cc5"},{"problem":80,"code":"(fn f [x] \n  (->> (range 1 x)\n       (filter (fn [y] (zero? (rem x y))))\n       (apply +)\n       (= x)))","user":"5a14228fe4b0ff51aa4b3193"},{"code":"(fn [n] (= n (apply + (filter #(= (rem n %) 0) (range 1 n)))))","problem":80,"user":"4ef6e689535dced4c769f24f"},{"code":"(fn[n]\n  (let\n    [g (last\n         (for [ x (range n)\n                :let [y (reduce + (range x))]\n                :while (<= y n)] y))]\n    (= g n)))","problem":80,"user":"52f818a6e4b047fd55836fcc"},{"problem":80,"code":"#(= % \n    (reduce +  \n            (filter \n              (comp zero? (partial mod %)) \n              (range 1 %))))","user":"5710140fe4b09c608db7042e"},{"code":"(fn perfect?[x]\n  (let [divisor? #(zero? (mod x %))]\n    (= x (reduce + (filter divisor? (range 1 (inc (/ x 2))))))))","problem":80,"user":"4e6a60cd535d8ccf87e9fed7"},{"code":"(fn perfect-num? [n]\n  (cond (= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))) true\n        true false))","problem":80,"user":"4ef6f5ea535dced4c769f250"},{"problem":80,"code":"(fn [n]\n  (== n (reduce + (filter #(= (rem n %) 0) (range 1 (inc (/ n 2)))))))","user":"540a4f20e4b0addc1aec66ef"},{"problem":80,"code":"(fn [x]\n  (= x (apply +\n    (filter #(= 0 (mod x %)) (range 1 (inc (/ x 2)))))))","user":"5522cd9ae4b0882d96d091ab"},{"code":"(fn perf-num [num]\n  \"4clojure.com/problem/80\"\n  (if (= num (apply + (map #(if (= (mod num %) 0) % 0)\n       (range 1 num)))) true false))","problem":80,"user":"4db58ccb535d87e67b28fe10"},{"problem":80,"code":"#(= % (reduce +  (for [x (range 1 %) :when (zero? (mod % x))] x )))","user":"56f2611fe4b04a395b9a04a2"},{"problem":80,"code":"(fn perfect-number?\n  [n]\n  (->>\n   (range 1 n)\n   (filter #(= 0 (rem n %)))\n   ((comp (partial = n) (partial reduce +)))))","user":"55a9e0fee4b0988bba2ad945"},{"code":"(fn [x]\n  (let [candidates (range 1 (inc (/ x 2)))]\n    (= x (reduce + (filter #(zero? (mod x %)) candidates)))))","problem":80,"user":"51d08d67e4b067c365486351"},{"code":"(fn [n]\n  (= n\n     (reduce\n       (fn [result div]\n         (if (integer? (/ n div))\n           (+ result div)\n           result))\n       0 (range 1 n))))","problem":80,"user":"53070615e4b02e821686979e"},{"code":"(fn [n] (->> (quot n 2) inc (range 1) (filter #(zero? (rem n %))) (reduce +) (= n)))","problem":80,"user":"524be8e0e4b09eba1c0223f1"},{"problem":80,"code":"#(= %1 (reduce +(filter (fn[x](= 0(mod %1 x)))  (range 1 %1))))","user":"5b044436e4b0cc2b61a3bd71"},{"problem":80,"code":"(fn [n]\n  (let [divisors (fn [n]\n                   (cons 1 (filter #(zero? (rem n %))\n                                   (range 2 (inc (quot n 2))))))]\n    (= n (reduce + (divisors n)))))","user":"53576356e4b04ce2eb3ed27a"},{"code":"(fn p [n] (= n (apply + (for [x (map inc (range (/ n 2))) :when (= (mod n x) 0)] x))))","problem":80,"user":"4eb2eae5535d7eef30807351"},{"code":"(fn [n]\n  (let [probs (range 1 n)\n        probf #(= 0 (mod n %))\n        divs (filter probf probs)]\n    (= n (apply + divs))))","problem":80,"user":"5092fe10e4b097f48cc3857e"},{"code":"(fn perfect-num? [n] \n  (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"51aab611e4b04e3dc0c27b2d"},{"problem":80,"code":"(fn divs\n  [n]\n  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"59368efbe4b02506e01a297d"},{"code":"(fn [n]\n    (= n \n       (->> ((fn divs [n v]\n                     (lazy-seq\n                       (if (< v n)\n                         (if (zero? (mod n v))\n                           (cons v (divs n (inc v)))\n                           (divs n (inc v)))))) n 1)\n         (reduce +))))","problem":80,"user":"4dbad895535d1e037afb21ae"},{"problem":80,"code":"(fn func [x]\n  (= x (apply + (filter #(= 0 (rem x %)) (range 1 x)))))","user":"5e805895e4b085ba37836e44"},{"code":"(fn [number]\n  (let [divisors (loop [divisors #{1} current 2]\n                   (if (> (* current current) number)\n                       divisors\n                       (recur (if (= 0 (rem number current))\n                                  (conj divisors current (quot number current))\n                                  divisors)\n                              (inc current))))]\n    (= number (reduce + divisors))))","problem":80,"user":"4e7c8fd1535db169f9c796be"},{"problem":80,"code":"(fn perfect?\n  [n]\n  (->> (range 1 n)\n       (filter #(and (<= (* % 2) n)\n                     (= 0 (rem n %))))\n       (reduce +)\n       (= n)))","user":"52d95491e4b09f7907dd13a4"},{"code":"(fn  [x]\n  (= x (apply + \n              (filter #(=  0 ( mod x %))  (range 1 x))))\n  )","problem":80,"user":"4ec4d723535dcc7ae8597d65"},{"problem":80,"code":"(fn solve [n]\n  (= (apply + (filter (comp zero? (partial rem n)) (range 1 n)))\n     n))","user":"60537cd1e4b04c8f2157d152"},{"problem":80,"code":"(fn [number] (->> (range 1 number)\n                   (filter #(= 0 (mod number %)))\n                   (reduce +)\n                   (= number)))","user":"54db3d82e4b024c67c0cf75f"},{"code":"(fn [num]\n  (->> (range 1 num)\n       (filter #(= 0 (mod num %)))\n       (reduce +)\n       (= num)))","problem":80,"user":"53527551e4b084c2834f4af0"},{"problem":80,"code":"(fn [n]\n  (loop [t 1 nn ()]\n    (if (= t n)\n      (if (= n (reduce + nn))\n        true\n        false)\n      (recur (inc t) (conj nn (if (= 0 (mod n t)) t 0))))))","user":"52979551e4b02ebb4ef75043"},{"code":"(fn [n]\n  (= n\n     (apply +\n            (filter #(= 0 (mod n %))\n                    (range 1 n)))))","problem":80,"user":"4ec53f8c535d6d7199dd368b"},{"problem":80,"code":"(fn [n]\n  (= n (reduce +\n               (for [i (range 1 n) :when (= 0 (mod n i))] \n                 i))))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":80,"code":"#(= % (apply + (map (fn [a] (if (zero? (rem % a)) a 0)) (range 1 %))))","user":"541096bde4b01498b1a719b2"},{"problem":80,"code":"(fn [x] (\n          = x (reduce  + (filter #(= 0 (mod x %)) (range 1 x)))\n          ))","user":"546280d8e4b01be26fd746b0"},{"problem":80,"code":"(fn [n] (= n (apply + (filter #(= 0 (mod n %)) (rest (range n))))))","user":"57c94c54e4b05aa3c4741d2c"},{"problem":80,"code":"#(->> (range 1 %)\n       (filter (fn [v] (zero? (mod % v))))\n       (apply +)\n       (= %)\n       )","user":"5ed8a12fe4b0c7845d86b0d7"},{"code":"#(letfn [(gcd [x y]\r\n  \t\t(loop [a (min x y), b (max x y)]\r\n\t\t\t\t(if (zero? a) \r\n\t\t\t\t\tb\r\n\t\t\t\t\t(recur (min a (- b a)) (max a (- b a)))\r\n\t\t\t\t)))]\r\n\r\n(= % (reduce + (keys (group-by (fn [x] (int x)) (map (partial gcd %) (range 1 %)))))))","problem":80,"user":"4dadca03c9a9d6ed4199dc57"},{"problem":80,"code":"(fn [n]\n  (loop [curr 1\n         result 0]\n    (cond\n      (> result n) false\n      (= curr n result) true\n      (zero? (rem n curr)) (recur (inc curr) (+ result curr))\n      :else (recur (inc curr) result))))","user":"5ab16992e4b073f1774425c4"},{"problem":80,"code":"(fn is-perf-num [n]\n  (= n\n     (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","user":"516d227fe4b06f078fab252d"},{"problem":80,"code":"(fn [x]\n  (= x (apply + (filter #(= 0 (rem x %))\n                        (range 1 (+ (/ x 2) 1))))))","user":"574e84e0e4b02ea114799243"},{"code":"(fn perfect [x]\r\n    (let [divisors (for [n (range 1 x) :when (= (rem x n) 0)] n)]\r\n         (= (reduce + divisors) x)))","problem":80,"user":"4fea08a9e4b0547ebccb2484"},{"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (rem n %)) (range 1 (inc (quot n 2)))))))","problem":80,"user":"4e6a2f51535d8ccf87e9fea9"},{"code":"(fn [number]\n  (= number (->> number (range 1) (filter #(= 0 (mod number %))) (apply +) )))","problem":80,"user":"4f294c48e4b0d6649770a023"},{"problem":80,"code":"(fn [n]\n\t(->> (range 1 n)\n\t\t (filter #(zero? (rem n %)))\n\t\t (reduce +)\n\t\t (= n)))","user":"5954eef0e4b066ee0a44af17"},{"code":"(fn [e] (loop [lookup-table (map #(reduce + (range %)) (iterate inc 1))]\n\t\t    (cond (< e (first lookup-table))\n\t\t\t  false\n\t\t\t  (= e (first lookup-table))\n\t\t\t  true\n\t\t\t  :else\n\t\t\t  (recur (drop 1 lookup-table)))))","problem":80,"user":"516c4c08e4b06f078fab251d"},{"problem":80,"code":"(fn [x]\n  (let [n(reduce #(if (zero? (rem x %2)) (+ %1 %2) %1) 0 (range 1 x)) ]\n    (if (= x n) true false)))","user":"55f9b2b6e4b03cbcff9738c8"},{"problem":80,"code":"(fn perfect? [x]\n  (let [divisors (filter #(= 0 (mod x %)) (range 1 x))]\n    (= (apply + divisors) x)))","user":"5532a04ee4b09218d5f44f82"},{"problem":80,"code":"(fn [i]\n  (= i (apply + (filter #(= 0 (mod i %)) (range 1 ( - i 1))))))","user":"53e241a6e4b036ad0777e3f0"},{"problem":80,"code":"(fn find-divisors [n]\n   (= n (->> (range 1 n)\n        (filter #(= 0 (mod n %)))\n        (reduce + ))))","user":"608ec5e4e4b03bd49d9f36c0"},{"code":"(fn perfect?\n  [x]\n  (if (= x (apply + (filter #(= 0 (mod x %)) (range 1 x)))) true false))","problem":80,"user":"5300b750e4b0d8b024fd3711"},{"problem":80,"code":"#(= (reduce + (for [x (range 1 %) :when (= (rem % x) 0)] x)) %)","user":"580d7de3e4b0849f6811b73d"},{"code":"(fn perfect?\n  [n]\n  (->>\n   (range 1 n)\n   (filter #(= 0 (rem n %)))\n   (apply +)\n   (= n)))","problem":80,"user":"511d6a01e4b022853b0e07a5"},{"code":"(fn [x] (= x (reduce + (filter #(= (mod x %) 0) (range 1 x)))))","problem":80,"user":"4fd8544be4b0dab7d829f390"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + 0 \n               (filter #(= (rem n %) 0)\n                       (range 1 n)))))","user":"54ca93abe4b057c6fda3a264"},{"problem":80,"code":"(fn\n  [n]\n  (->> (range 1 n)\n       (filter #(= 0 (mod n %)))\n       (reduce +)\n       (= n)))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter #(= (mod n %) 0) (range 1 (+ (/ n 2) 1))))))","user":"540c54a7e4b0addc1aec6700"},{"code":"(fn [n]\n  (= n\n    (apply + (filter \n      #(zero? (mod n %))\n      (range 1 n)))))","problem":80,"user":"4fc50bcbe4b081705acca375"},{"code":"(fn  perfect [n] (= (apply +(filter #(zero? (rem n %))  (range 1 n)  )) n))","problem":80,"user":"4e78c208535db95036265722"},{"problem":80,"code":"(fn perfect? [n]\n  (let [div? (fn [n d] (= 0 (rem n d)))\n        ds   (filter #(div? n %) (range 1 n))]\n    (= n (reduce + ds))))","user":"54f2fe9fe4b050824f58f5b8"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce\n      #(if (zero? (mod n %2)) (+ % %2) %)\n      (range n))))","user":"552a793ee4b0ffed3738f955"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter #(= 0 (rem n %)) (drop 1 (range n))))))","user":"5581a6dae4b05c286339e0fe"},{"problem":80,"code":"(fn [n]\n    (let [es-divisor? (fn [candidato] (zero? (mod n candidato)))\n          divisores (filter #(es-divisor? %) (range 1 n))]\n          (= (apply + divisores) n)))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":80,"code":"(fn perfect? [n]\n  (= n (loop [i 1\n              acc 0]\n         (if (= i n)\n           acc\n           (if (= 0 (mod n i))\n             (recur (inc i) (+ acc i))\n             (recur (inc i) acc))))))","user":"569f99cce4b0542e1f8d1497"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter #(= 0 (mod n %)) (take (dec n) (iterate inc 1))))))","user":"5632e850e4b0bfe05bf117ac"},{"code":"(fn [a]\n  (= a (reduce + (filter #(zero? (mod a %)) (range 1 a)))))","problem":80,"user":"514d7e29e4b019235f6c0587"},{"problem":80,"code":"(fn perfect [num]\n  (= (+ num num) (apply + ((fn perfect-help [x lower upper coll]\n  (if (> lower upper)\n    coll\n    (if (zero? (mod x lower))\n      (perfect-help x (inc lower) (/ x (inc lower)) (conj (conj coll lower) (/ x lower)))\n      (perfect-help x (inc lower) (/ x (inc lower)) coll)\n    ))) num 1 num []))))","user":"5510aa92e4b06e50f9beb188"},{"code":"(fn [n]\n  (= n (reduce + (filter #(= (rem n %) 0) (range 1 n))))\n  )","problem":80,"user":"52d42021e4b09f7907dd132a"},{"problem":80,"code":"(fn [x]\n    (= x (reduce + (filter #(= 0 (mod x %)) (range 1 x)))))","user":"513e8141e4b02b2a3d8235c1"},{"problem":80,"code":"(fn [X]\n    (= X (apply + (filter #(zero? (rem X %)) (range 1 X) )))\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":80,"code":"(fn [n] (if (= n (apply + (filter #(zero? (rem n %)) (range 1 n)))) true false))","user":"5f03ab5be4b0cf489e8d7f37"},{"problem":80,"code":"(fn  [n]\n  (let [divisors \n(fn [n]\n  (filter #(not (nil? %)) (for [i (range 1 n)]\n    (if (= (mod n i) 0)\n      i\n      nil))))]\n  (= n (reduce + (divisors n)))))","user":"53664e3be4b0243289761e74"},{"problem":80,"code":"(fn [num]\n  (let [n (int (Math/sqrt num))]\n    (loop [i 2 sum 1]\n      (if (> i n)\n        (= sum num)\n        (if (= (rem num i) 0)\n          (let [a (quot num i)]\n            (recur (+ i 1) (+ sum i (if (not= a i) a 0)))\n          )\n          (recur (+ i 1) sum)\n        )\n      )\n    )\n  )\n)","user":"5a9e3698e4b0d174b936c7fc"},{"problem":80,"code":"(fn [x]\n  (let [dividers (filter #(= 0 (mod x %)) (range 1 (inc (/ x 2))))]\n    (= x (reduce + dividers))))","user":"57f52d3be4b0903ccab3dce7"},{"code":"(fn div\n  ([a] (= (reduce + (div a (dec a) [])) a))\n  ([a count res]\n    (if (= 0 count)\n       res\n       (if (= 0 (mod a count))\n           (div a (dec count) (conj res count))\n           (recur a (dec count) res)))))","problem":80,"user":"4e7ada51535db169f9c796ae"},{"code":"#(= % \n  (reduce + \n   (filter (fn[x](= 0 (mod % x)))\n   (range 1 %))))","problem":80,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"(fn [n]\n  (= n\n    (apply +\n      (filter #(= 0 (mod n %))\n              (range 1 n)))))","problem":80,"user":"4e7dd982535db169f9c796ee"},{"code":"(fn [x]\n  (letfn [(divisors [a]\n            (filter #(= 0 (mod a %)) (range 1 (inc (/ a 2)))))]\n    (= x (reduce + (divisors x)))))","problem":80,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn perfect-number[n] \n  (= n (reduce #(if (= 0 (mod n %2)) (+ % %2) %) 1 (range 2 n))))","problem":80,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn perf[n]\n  (= n (reduce #(if (zero? (rem n %2)) (+ %1 %2) %1)\n        (range 1 (/ (inc n) 2)))))","problem":80,"user":"5065bd94e4b0148eb3925aed"},{"code":"(fn [n] (= n (reduce + (filter #(= 0 (mod n %)) (range 1 (dec n))))))","problem":80,"user":"536046a9e4b063bf7a5f8fe1"},{"problem":80,"code":"(fn perfect-number?\n  [n]\n  (= n (apply + (for [x (range 1 n) :when (zero? (rem n x))] x)))\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"(fn [x] (= x (reduce #(if (= 0 (mod x %2)) (+ % %2) %) 0 (range 1 x))))","problem":80,"user":"508ee17ae4b0706b2ed3ef8d"},{"code":"(fn new-perf [n]\n  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4f04d312535dcb61093f6be7"},{"code":"(fn perfect-number? [n]\n  (let [find-candidates (fn [n]\n                          (let [n2 (if (even? n) n (inc n))\n                                half (/ n2 2)]\n                            (take half (iterate inc 1))))\n        candidates (find-candidates n)\n        find-divisors (fn [n candidates]\n                   (filter #(zero? (rem n %)) candidates))\n        divisors (find-divisors n candidates)\n        perf-num? (fn [n divisors]\n                    (= (reduce + divisors) n))\n        \n        ]\n    (perf-num? n divisors)))","problem":80,"user":"52cf084ce4b07d0d72b27399"},{"problem":80,"code":"(fn [n]\n    (letfn\n      [\n        (factors [n]\n          (filter\n            (fn [i]\n              (=\n                0\n                (mod n i)\n              )\n            )\n            (range\n              1\n              (inc (quot n 2))\n            )\n          )\n        )\n        (sum-factors [n]\n          (apply + (factors n))\n        )\n      ]\n      (= n (sum-factors n))\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn [n]\n    (let [subs (filter #(zero? (rem n %)) (range 1 n))\n          sum (apply + subs)]\n      (= sum n)))","problem":80,"user":"4ee26f01535d10e5ff6f5368"},{"code":"(fn [n] \n  (->> n\n       (range 1)\n       (filter #(= 0 (rem n %)))\n       (apply +)\n       (= n)))","problem":80,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":80,"code":"(fn perfect? [x]\n   (loop [n 1\n          m x]\n     (cond\n       (neg? (- m n)) false\n       (zero? (- m n)) true\n       (pos? (- m n)) (recur (inc n) (- m n)))))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":80,"code":"(fn pn [x]\n  (= x\n     (reduce +\n             (filter  #(integer? (/ x %))\n                      (range 1 (int x))))))","user":"4f82ed48e4b033992c121c0e"},{"code":"(fn[n](= n(reduce +(filter #(= 0 (mod n %))(range 1 n)))))","problem":80,"user":"4ec6cd4f535d6d7199dd36d7"},{"code":"(fn perfect? [n]\n  (= (reduce + (filter #(zero? (rem n %1)) (range 1 n))) n))","problem":80,"user":"513d121fe4b0e544971636a2"},{"code":"(fn[x](= x(reduce +(filter #(= 0(mod x %))(range 1 x)))))","problem":80,"user":"4ee00219535d10e5ff6f534a"},{"code":"(fn [n] (= 0 (- n 1 (apply + (filter #(= 0 (mod n %)) (range 2 (inc (quot n 2))))))))","problem":80,"user":"526a3412e4b03e8d9a4a721e"},{"problem":80,"code":"(fn [n]\n  (let [ds (filter #(= 0 (rem n %)) (range 1 n))\n        ]\n    (= n (apply + ds))\n    )\n  )","user":"53ef7f77e4b0742d9025b0ce"},{"problem":80,"code":"(fn [n] (= n (apply + (filter #(zero? (mod n %)) (drop 1 (range n))))))","user":"5794fd7be4b0e215f87e8476"},{"code":"(fn [n] (= n (reduce + (for [x (range 1 n)] (if (= (mod n x) 0) x 0)))))","problem":80,"user":"50bce014e4b0594b91591c63"},{"problem":80,"code":"(fn [number]\n  ((fn inner [result pre-divisor end]\n    (if (true? end)\n      (= number (apply + (set result)))\n      (loop [x pre-divisor]\n        (if (>= x number)\n          (inner result 0 true)\n          (if (zero? (rem number x))\n            (inner (conj result x)\n                   (inc x)\n                   false)\n            (recur (+ x 1)))))))\n   '(1) 2 false))","user":"58637f03e4b0f14aab7c881e"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (mod n %)) (rest (range n))))))","user":"5ce077e9e4b0a17bb84e2b0c"},{"problem":80,"code":"(fn [x]\n  (let [divisors (filter (comp zero? (partial rem x)) (range 1 x))\n        divisor-sum (reduce + divisors)]\n    (= divisor-sum x)))","user":"575683aee4b02ea1147992dc"},{"problem":80,"code":"(fn perfect? [n] (= n (reduce + ((fn divisorsX [n] (filter #(zero? (mod n %)) (range 1 (+ (/ n 2) 1)))) n))))","user":"568820e8e4b0dcc4269f4067"},{"problem":80,"code":"(fn [n]\n\t(= n\n\t  (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"55b8c339e4b01b9910ae29b9"},{"code":"(fn [n] (= (apply + (filter #(= (mod n %1) 0) (range 1 n))) n))","problem":80,"user":"4fcfa6cae4b03432b189f41d"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(= 0 (rem n %)))\n       (reduce +)\n       (= n)))","user":"58fc52cee4b0438e51c2cf95"},{"problem":80,"code":"(fn [n]\n  (= n \n     (apply +\n            (filter #(= 0 (mod n %)) (range 1 n))\n      )\n))","user":"561047eae4b05f002753df6d"},{"problem":80,"code":"(fn [x]\n         (let [divs (filter #(= (rem x %) 0) (range 1 (inc (/ x 2))))]\n           (= x (reduce + divs))\n           )\n         )","user":"533c2605e4b0e30313ee6cd7"},{"problem":80,"code":"(fn perfect [n]\n  (let [divisors (fn [n] (filter #(= 0 (rem n %)) (range 1 n)))]\n    (= (reduce + (divisors n)) n)\n    )\n  )","user":"5245e320e4b09dbe66b56177"},{"problem":80,"code":"(fn [x] (= (reduce + (filter #(= (rem x %1) 0) (range 1 x))) x))","user":"574a546ee4b02ea1147991f6"},{"code":"(fn [n]\r\n    (= n (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4f58d92fe4b0a7574ea71858"},{"problem":80,"code":"#(= % (apply + (filter (fn [x] (= (int (/ % x)) (/ % x))) (range 1 %))))","user":"57ec3d29e4b0bfb2137f5b77"},{"problem":80,"code":"(fn [n]\n    (loop [divisors-sum 1\n           i 2]\n      (if (< i n)\n        (if (= (mod n i) 0)\n          (recur (+ divisors-sum i) (inc i))\n          (recur divisors-sum (inc i)))\n        (= divisors-sum n))))","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn a [n] (= n (reduce + (for [i (range 1 n) :when (zero? (mod n i))] i))))","problem":80,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":80,"code":"(fn perfect? [n]\n  (->> (range 1 n)\n       (filter #(= 0 (mod n %)))\n       (reduce +)\n       (= n)))","user":"56069006e4b08b23635d3174"},{"code":"(fn factors [n]\n (let [\n       f (fn [x] (if (= 0 (rem n x))\n                   x\n                   0\n                   )\n       )\n       ]\n(= n (apply + (map f (range 1 n))))\n  )\n  )","problem":80,"user":"4f2004a1535d64f6031464a7"},{"problem":80,"code":"#(->> (range 1 %)\n      (filter (fn [n] (zero? (rem % n))))\n      (apply +)\n      (= %))","user":"596a66cde4b069c0a1a19803"},{"problem":80,"code":"(fn [n]\n  (let [factors (filter #(= 0 (rem n %)) (range 1 n))]\n    (= (apply + factors) n)\n  )\n)","user":"5943abb6e4b060784b3b792b"},{"code":"(fn [n]\n  (= n\n    (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4fc8c8d8e4b0ee37620e183b"},{"problem":80,"code":"(fn z [n]\n  (let [f (fn [x] (filter #(zero? (mod x %)) (range 1 x)))]\n    (= n (reduce + 0 (f n)))))","user":"583667c7e4b089d5ab817cfb"},{"problem":80,"code":"(fn [number]\n  (= number\n     (apply + (filter #(= 0 (rem number %))\n             ((fn [num] (range 1 (+ 1 (quot number 2)))) number )))))","user":"57b19fa1e4b0fbc9809a2754"},{"problem":80,"code":"(fn [x]\n  (= (apply + (filter #(= (rem x %) 0) (range 1 x))) x))","user":"58b989dbe4b0888cdc949ccd"},{"code":"#(= % (apply + (let [s (-> % (/ 2) Math/ceil int)]\n                 (loop [i 1 divs []]\n                   (if (> i s)\n                     divs\n                     (recur (inc i) (if (zero? (mod % i))\n                                      (conj divs i)\n                                      divs)))))))","problem":80,"user":"4ef9c8f9535dced4c769f26b"},{"code":"(fn per [x]\n  (= x (reduce + (filter #(= (mod x %) 0) (range 1 (- x 1))))))","problem":80,"user":"4ec07699535dfed6da9c6da2"},{"problem":80,"code":"(fn perfect? [x]\n  (let [divides? (fn [x y] (if (zero? (mod x y)) true false))\n        divisors-of (fn [x] (filter (partial divides? x) (range 1 x)))]\n    (= x (reduce + (divisors-of x)))))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":80,"code":";#(case % (7 500) false true) ; Easy Breezy Cheese\n(fn [n] (= n (apply + (filter #(= 0 (rem n %)) (range 1 n)))))","user":"5aa998c6e4b0d174b936c8e5"},{"problem":80,"code":"(fn is-perfect-number\n  [n]\n  (= (apply + (filter #(= (mod n %) 0) (range 1 n))) n))","user":"506f0968e4b09350ab4199f5"},{"code":"(fn perfect-number? [x]\n  (= x (reduce + (filter #(zero?( mod x %)) (drop 1 (range x))))))","problem":80,"user":"5273562ae4b03e8d9a4a7479"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [n]\n            (filter (partial not= n)\n                    (apply concat\n                           (take-while (complement nil?)\n                                       (iterate (fn [[l u]]\n                                                  (first\n                                                   (for [d     (range (inc l) u)\n                                                         :let  [d2 (quot n d)]\n                                                         :when (== 0 (rem n d))]\n                                                     [d d2])))\n                                                [1 n])))))]\n    (= (apply + (divisors n)) n)))","user":"5880e38fe4b0f1effa3b7625"},{"problem":80,"code":"(fn [n]\n  (let [ds (filter #(= 0 (rem n %)) (range 1 n))]\n    (= n (reduce + ds))))","user":"55995fa7e4b031d6649c9ba9"},{"problem":80,"code":"(fn [n]\n    (let [r (range 1 (inc (quot n 2)))\n          v (filter #(= 0 (mod n %)) r)]\n      (= n (reduce + v))))","user":"559a9a3de4b066d22e731f45"},{"problem":80,"code":"(fn [x]\n (letfn\n   [(divisors [n]\n      (filter\n        #(let [q (/ n %)]\n           (== q (int q)))\n        (-> n (/ 2) int\n            inc range rest)))]\n  (== x \n      (apply + (divisors x)))))","user":"55d2dd27e4b0e31453f64a5b"},{"code":"(fn [n]\r\n       (letfn [(divisor? [n d] (zero? (rem n d)))\r\n               (divisors [n] (reduce #(if (divisor? n %2) (conj %1 %2) %1) [] (range 1 n)))]\r\n         (= n (reduce + (divisors n)))))","problem":80,"user":"4deb529a535d08e6dec9fe04"},{"problem":80,"code":"(fn [n]\n  (->>\n   (for [i (range 1 n) :when (zero? (rem n i))] i)\n   (reduce +)\n   (= n)))","user":"54d7e277e4b0a52adc2e2031"},{"problem":80,"code":"(fn perf?\n  [num]\n  (let [divisors (filter #(= (mod num % ) 0) (range 1 (- num 1)))\n        s (apply + divisors)]\n    (= s num)\n    ))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":80,"code":"#(boolean (#{6 28 496 8128} %))","user":"5b64370ae4b0c6492753e73c"},{"code":"(fn perfect? [x]\n  (let [all-perfects (reductions + (range))\n        closest-perfect (drop-while #(< % x) all-perfects)]\n    (= x (first closest-perfect))))","problem":80,"user":"53834ed3e4b06839e8705edb"},{"code":"(fn [n]\r\n  (let [t (/ n 2)]\r\n  (loop[x 1, sum 0]\r\n    (if (<= x t)\r\n      (if (= (mod n x) 0)\r\n          (recur (inc x) (+ sum x))\r\n          (recur (inc x) sum))\r\n      (= sum n)))))","problem":80,"user":"4e44358f535dc968683fc4a8"},{"problem":80,"code":"(fn perfect [n]\n  (= n\n  \t(reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","user":"52860baae4b0239c8a67ae09"},{"problem":80,"code":"(fn [x]\n  (== x \n      (reduce + \n              (remove #(ratio? (/ x %)) \n                      (range 1 ;x\n                             (inc (Math/floor (/ x 2))))))))\n\n; golf:\n; reduce -> apply\n; == -> =\n; (remove #(ratio? (/ x %))) ->\n; (filter #(= 0 (rem x %)))\n\n;(fn [x] (= x (apply + (filter #(= 0 (rem x %)) (range 1 x)))))","user":"54d341f7e4b0e8a36923e603"},{"code":"(let [divisors (fn [n] (filter #(= (mod n %) 0)\n                                 (range 1 (inc (int (/ n 2))))))]\n    (fn [n] (= (apply + (divisors n)) n)))","problem":80,"user":"5370ef22e4b0fc7073fd6ea0"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [n] (filter #(zero? (rem n %)) (range 1 (inc (quot n 2)))))]\n    (= n (apply + (divisors n)))))","user":"5896a0e6e4b00487982d52a8"},{"problem":80,"code":"(fn [x]\n   (= x (apply + (filter (comp zero? (partial rem x)) (range 1 x)))))","user":"52c672e2e4b0c2d177d6210e"},{"code":"#(nil? (#{7 500} %))","problem":80,"user":"4dad8fe9c9a9d6ed1899dc57"},{"code":"#(= %\r\n  (apply +\r\n    (map (fn [a] (if (= 0 (mod % a)) a 0))\r\n      (range 1 %))))","problem":80,"user":"4ddbfb8a535d02782fcbea00"},{"code":"(fn [n] (= n (reduce + 1\n  (set (mapcat #(if (zero? (rem n %)) [(quot n %) %])\n    (range 2 (-> n Math/sqrt int inc inc)))))))","problem":80,"user":"4effb663535dcb61093f6a2e"},{"code":"(fn [n] (= n\n           (reduce +\n                   (filter #(zero? (mod (/ n %) 1))\n                           (range 1 n)))))","problem":80,"user":"51a91ac2e4b08d8ec191b822"},{"problem":80,"code":"(fn [n]\n  (= n\n     (->> (range 1 n)\n          (filter #(zero? (rem n %)))\n          (apply +))))","user":"505aa653e4b021387fb89857"},{"problem":80,"code":"(fn [x]\n    (letfn [(divisors [n] (filter #(integer? (/ n %)) (range 1 n)))\n            (perfect? [n] (= n (apply + (divisors n))))]\n      (perfect? x)))","user":"5777cffae4b0979f89651651"},{"code":"(fn [n]\n  (= n (apply + \n        (map inc \n          (filter #(= 0 (mod n (inc %)))\n                  (take (dec n) (range)))))))","problem":80,"user":"4e42f930535dc968683fc49f"},{"problem":80,"code":"(fn [x]\n  (->> (range 1 x)\n       (filter #(zero? (mod x %)))\n       (apply +)\n       (= x)))","user":"583e27e2e4b089d5ab817daa"},{"code":"(fn [n] (= n (reduce + (for [a (range 1 n) :when (zero? (mod n a))] a))))","problem":80,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":80,"code":"(fn [a] (= a (reduce + (remove false? (map #(if (= 0 (mod a %)) % false) (range 1 (inc (int (/ a 2)))))))))","user":"5676af21e4b05957ce8c6158"},{"problem":80,"code":"(fn perfect? [x]\n  (= (reduce + (filter #(zero? (rem x %)) (range 1 x))) x))","user":"541f5b37e4b01498b1a71a97"},{"code":"(fn [x]\n  ((fn [s i](if (< x s)\n      false\n    (if (= x s)\n        true\n      (recur (+ i s) (inc i)))))0 0))","problem":80,"user":"507fbd77e4b089ade05efbd3"},{"problem":80,"code":"(fn [x] (= (apply + (filter  (fn [a] (= 0 (mod x a))) (range 1 x))) x))","user":"540479e7e4b0addc1aec665a"},{"problem":80,"code":"(fn [n]\n  (let [\n    divisors (filter #(zero? (mod n %)) (range 1 (inc (/ n 2))))]\n    (= n (apply + divisors))))","user":"55d5e80ee4b0e31453f64a91"},{"problem":80,"code":"#(->> (range 2 (-> % Math/sqrt Math/ceil int))\n      (filter (fn [x] (zero? (rem % x))))\n      (mapcat (fn [x] (vector x (/ % x))))\n      (reduce +)\n      inc\n      (= %))","user":"5f3abcc4e4b004f08c61c52b"},{"code":"#(->> % (range 1) (filter (fn [c] (zero? (rem % c)))) (apply +) (= %))","problem":80,"user":"52c6a0abe4b0c2d177d62111"},{"problem":80,"code":"(fn is-perfect [x]\n  (letfn [(factorize [x]\n            (loop [n x divisors (range 2 (-> x Math/sqrt int inc)) acc []]\n              (cond\n                (empty? divisors) (conj acc n)\n                (< n (first divisors)) acc\n                :else\n                (let [divisor (first divisors)\n                      m (mod n divisor)]\n                  (if (= m 0)\n                    (recur (/ n divisor) divisors (conj acc divisor))\n                    (recur n (rest divisors) acc))))))\n          (power-set [a-set]\n            (if (empty? a-set)\n              #{#{}}\n              (let [x (set (vector (first a-set)))\n                    y (power-set (clojure.set/difference a-set x))]\n                (clojure.set/union y (set (map #(clojure.set/union x %) y))))))]\n    (let [m (reduce #(assoc %1 (gensym) %2) {} (factorize x))\n          k (set (keys m))\n          u (power-set k)\n          v (clojure.set/difference u #{k})]\n      (= x (reduce + 0 (set (map (fn [e] (reduce #(* %1 (get m %2)) 1 e)) v)))))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":80,"code":"(fn perfect [x]\n  (->> x\n       (range 1 )\n       (filter #(= 0 (mod x %)))\n       (reduce +)\n       (= x)))","user":"5a257747e4b07f18be40aa1f"},{"problem":80,"code":"(fn [x]\n  (->> (concat\n        (->> (range 1 (inc (Math/sqrt x)))\n             (filter #(zero? (rem x %))))\n        (->> (range 1 (inc (Math/sqrt x)))\n             (map #(list % (/ x %)))\n             (filter #(apply not= %))\n             (map second)\n             (filter integer?)))\n       distinct\n       sort\n       butlast\n       (reduce +)\n       (= x)))","user":"51456858e4b0e88796073408"},{"problem":80,"code":"(fn [n] (boolean (= n (apply + (for [x (range 1 n) :when (zero? (rem n x))] x)))))","user":"56ef077ae4b04a395b9a0459"},{"code":"(fn [x]\n(= x (reduce + 0 (filter #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"4e6cf521535de274dd8d818b"},{"code":"(fn [n]\n  (let [factors \n          (fn [n] (filter (fn [x] (= 0 (mod n x))) (range 1 (/ (inc n) 2))))]\n    (= n (apply + (factors n)))))","problem":80,"user":"525372ade4b0541d1855b8f3"},{"code":"(fn [n] \n  (= n (apply + (for [x (range 1 n) :when (= 0 (mod n x))] x))))","problem":80,"user":"51933b41e4b0c663c5d86ca2"},{"problem":80,"code":"#(= (apply + (%1 %2)) %2)\n(fn f\n  ([x] (f [1] 2 x))\n  ([init n x]\n    (if (= x n)\n        init\n        (if (zero? (rem x n))\n            (recur `[~@init ~n] (inc n) x)\n            (recur init (inc n) x)))))","user":"548b7db8e4b0e286459a11fd"},{"problem":80,"code":"(fn [x]\n  (let [divisors\n        (filter\n          (fn [y]\n            (= (rem x y) 0))\n          (range 1 x))]\n    (= (apply + divisors) x)))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":80,"code":"(fn [x] (= x (apply +(filter #(zero? (rem x %)) (range 1 (inc(quot x 2)))))))","user":"5785c1d4e4b0ebec4cfb74e1"},{"code":"(fn [x]\n  (loop [a (dec x) res []]\n    (if (= 0 a)\n      (= x (reduce + res))\n      (recur (dec a) (if (zero? (rem x a)) \n                          (conj res a) \n                          res)\n))))","problem":80,"user":"4f040bbf535dcb61093f6b95"},{"problem":80,"code":"(fn [x] (let [divisors ((fn [x] (filter #(zero? (mod % 1)) (map #(/ x %) (range 2 (inc x))))) x), sum (apply + divisors)] (= x sum)))","user":"516f06dce4b06aac486e5b39"},{"problem":80,"code":"(fn [x] (= x (reduce + (filter\n                        (fn [n] (= 0 (rem x n)))\n                        (range 1 x)))))","user":"5492164ee4b0b312c081ff3e"},{"problem":80,"code":"#(loop [d 1 s 0]\n  (if (< (/ % 2) d) (= s %)\n    (recur (inc d) (+ s \n                      (if (= 0 (mod % d)) d 0)))))","user":"5686b7c7e4b0dcc4269f4057"},{"problem":80,"code":"(fn perfect-number?\n  [n]\n  (= (reduce (fn [acc v]\n               (if (zero? (rem n v))\n                 (+ acc v)\n                 acc))\n             0\n             (range 1 (inc (/ n 2))))\n     n))","user":"5d53a59ae4b0776584bd6f72"},{"problem":80,"code":"(fn [n]\n    (->> (range 10)\n         (map #(* (Math/pow 2 (- % 1)) (- (Math/pow 2 %) 1)))\n         (filter #(== % n))\n         empty?\n         false?))","user":"55627de1e4b0c656e3ff17d9"},{"problem":80,"code":"(fn [x]\n  (= x (reduce (fn [acc y] (if (zero? (mod x y)) (+ acc y) acc) ) 0 (range 1 x))) )","user":"58bc6a88e4b0888cdc949d16"},{"problem":80,"code":"(fn [n] (= n (apply + (filter (fn [x] (= 0 (mod n x))) (range 1 n)))))","user":"53d5e45ae4b0e771c302544e"},{"code":"(fn [n] (= n (reduce + (keep #(when (= 0 (rem n %)) %) (range 1 (- n 1))))))","problem":80,"user":"4eb1dd39535d7eef30807345"},{"problem":80,"code":"(fn\n   [n]\n   (= n (apply + (filter #(= (mod n %) 0) (range 1 n)))))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":80,"code":"#(loop [i 0\n        s 0]\n  (case (compare s %)\n    0 true\n    1 false\n    (recur (inc i) (+ s i))))","user":"5382704be4b06839e8705ed4"},{"code":"(fn [n]\n  (= n\n    (reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4f043ed1535dcb61093f6bb4"},{"problem":80,"code":"(fn [n]\n  (let [divisors (fn[m] (filter (fn[k] (zero? (mod  m k)))(range 1 m))   )\n        sigma (fn [m] (reduce + (divisors m)))\t]\n    \t(= n (sigma n))\n   )\n )","user":"5649615be4b0284900eef641"},{"code":"(fn [x]\n  (= x (apply + (filter #(zero? (mod x %)) (range 1 (+ 1 (/ x 2))))))\n  )","problem":80,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":80,"code":"(fn perfect-number? [n]\n  (= n (reduce + \n              (reduce #(if (zero? (mod n %2))\n                           (concat %1 [%2])\n                            %1)\n                      []\n                      (range 1 (inc (/ n 2)))))))","user":"4f6ba7bce4b07046d9f4efb0"},{"problem":80,"code":"(fn perfect-number? [a]\n  (->> (range 1 (inc (quot a 2)))\n       (filter #(zero? (mod a %)));get divisors\n       (apply +)\n       (= a)))","user":"5f82609ae4b0c071e6c840f9"},{"problem":80,"code":"(fn [x] \n  (->> (range 1 x)\n       (filter #(zero? (mod x %)))\n       (apply +)\n       (= x)))","user":"55cdc576e4b0e31453f64a1f"},{"code":"(fn [n]\n  (= n\n     (reduce +\n             (filter #(= (rem n %) 0) (range 1 (inc (/ n 2)))))))","problem":80,"user":"5125745ae4b05d10e3e395f9"},{"code":"(fn pn [n]\n  (letfn [(gen-div [e]\n                   (loop [k (int (/ e 2)), ds '()]\n                     (if (<= k 0)\n                       ds\n                       (if (= 0 (mod e k))\n                         (recur (dec k) (cons k ds))\n                         (recur (dec k) ds)))))]\n    (if (= n (apply + (gen-div n))) true false)))","problem":80,"user":"4e1b2cd9535d04ed9115e7fd"},{"problem":80,"code":"(fn \n  [n]\n  (let [divisors (filter #(= 0 (mod n %)) (range 1 (dec n)))]\n    (= n (reduce + 0 divisors))))","user":"4fee04a0e4b0678c553fc308"},{"code":"(fn [n]\n  (let [divisors (filter #(zero? (rem n %)) (range 1 (inc (/ n 2))))]\n    (= (reduce + divisors) n)))","problem":80,"user":"4e39fb68535deb9a81d77f47"},{"code":"(fn [x]\n  (= x (reduce + 0 (filter #(= (rem x %) 0) (range 1 x)))))","problem":80,"user":"4e7f5a0b535db966e863cc41"},{"problem":80,"code":"(fn [x]\n        (= x (reduce + (filter #(zero? (rem x %)) (range 1 x)))))","user":"537e104ce4b06839e8705e9a"},{"code":"(fn [x] (letfn \n  [(divisors [n]\n    (filter #(zero? (mod x %)) (range 1 n)))]\n  (= (reduce + (divisors x)) x)))","problem":80,"user":"4ea0c284535d7eef308072ad"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisor? (fn [n d] (= 0 (mod n d)))\n        divisors (filter (partial divisor? n) (range 1 n))]\n    (= n (reduce + divisors))))","user":"55170dd9e4b06a49daca83bd"},{"problem":80,"code":"(fn [n]\n  (letfn [\n          (divisors [x]\n                    (loop [i 2 v [1]]\n                      (if (= x i) v\n                        (recur (inc i) (if (= 0 (mod x i)) (conj v i) v)))))]\n    (= n (reduce + (divisors n)))))","user":"4eb97234535dfed6da9c6d53"},{"problem":80,"code":"(fn [n]\n  (= n\n     (apply +\n            (filter\n              #(zero? (rem n %))\n              (range 1 n)))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":80,"code":"(fn [x] true? (= x (reduce + (filter #(= 0 (mod x %)) (range 1 x)))))","user":"566734c4e4b04acd4f672dcc"},{"code":"(fn [x]\n (= x  (reduce + \n    (for [ n (range 1 (inc (/ x 2)) ) ] \n        (if (= 0 (rem x n)) n 0 )))))","problem":80,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn [n]\n  (let\n    [divisors (filter #(zero? (mod n %)) (range 1 n))]\n    (= (apply + divisors) n)))","problem":80,"user":"4f03641a535dcb61093f6a9b"},{"code":"#((fn [n d a]\n    (cond\n      (= d n) (= n a)\n      (< n a) false\n      :else (recur n (inc d) (if (= 0 (mod n d)) (+ a d) a))))\n  % 1 0)","problem":80,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":80,"code":"(fn [n] (->> \n         (range 1 n)\n         (filter #(zero? (mod n %))) \n         (reduce +)\n         (= n)))","user":"5368fedee4b0243289761e93"},{"problem":80,"code":"(fn [x]\n  (->> (/ (inc x) 2)\n       (range 1)\n       (filter #(zero? (mod x %)))\n       (reduce +)\n       (= x)))","user":"5393185ae4b0b51d73faaeb7"},{"code":"(fn [n]\n          (= n (apply + \n                      (filter #(zero? (rem n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"4f03f197535dcb61093f6b84"},{"problem":80,"code":"(fn perfect [n] (= n (reduce + (clojure.set/difference (reduce #(if(= 0 (mod n %2)) (conj %1 %2 (/ n %2)) %1) #{} (rest (range (inc (Math/sqrt n))))) #{n}))))","user":"542c1f73e4b0dad94371f29d"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter #(= 0 (rem n %)) (range 1 (inc (/ n 2)))))))","user":"51bfc1f0e4b0e49ef9037dd4"},{"code":"#(= %\n    (apply +\n           (for [x (range 1 %) :when (= 0 (rem % x))] x)))","problem":80,"user":"522b922ee4b0d34ee08e71c3"},{"problem":80,"code":"(fn[x] (let [d (filter #(= 0 (mod x %))(range 1 x))]\n         (= x (apply + d))))","user":"566a3a26e4b0a866af689699"},{"problem":80,"code":"(fn is-perfect [n]\n  (= n\n    (reduce +\n      (loop [lower-factors\n               ; lower-half of factors (from 1 to sqrt(n) + 1)\n               (filter #(= 0 (rem n %)) (range 1 (+ 1 (Math/sqrt n))))\n             ; holds all factors\n             factors (set lower-factors)]\n        ; populate higher-half of factors list\n        (if (empty? lower-factors)\n          (butlast (sort factors))\n          (recur\n            (rest lower-factors)\n            ; factors are paired, so we can use the lower factor\n            ; to find the higher one\n            (conj factors (quot n (first lower-factors)))))))))","user":"5e692be9e4b04a83ad7cd269"},{"problem":80,"code":"(fn [x]\n   (letfn [\n           (sm [a]\n             (reduce #(if (= 0 (mod a %2)) (+ %1 %2) %1) 0 (range 1 a)))]\n     (= x (sm x))))","user":"5910a43de4b0163c97b36ebf"},{"problem":80,"code":"(fn [nr] (= nr (apply + (filter (fn [i] (= 0 (rem nr i))) (range 1 nr)))))","user":"5a0ef454e4b04bbd27e6d9fa"},{"code":"(fn [x]\n  (let [divisiblex? (fn [y]\n  \t     (if (= 0 (mod x y))\n\t\t       true false))]\n    (if (= x (reduce + (filter divisiblex? (range 1 x))))\n      true false)))","problem":80,"user":"4eb0afed535d7eef3080733e"},{"code":"(fn perfect? [n]\n  (= n (apply + (for [i (range 1 (inc (/ n 2))) :when (= 0 (mod n i))] i))))","problem":80,"user":"51740b65e4b0d277d717bc67"},{"problem":80,"code":"#(= % (apply + (filter (fn [x] (zero? (mod % x)))(range 1 %))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"code":"(fn [x]\r\n  (= x\r\n    (reduce + (filter #(= 0 (mod x %)) (range 1 x)))))","problem":80,"user":"4df407c3535d08e6dec9fe2e"},{"problem":80,"code":"(fn [n] (= n (apply + (filter #(== (mod n %) 0) (range 1 n)))))","user":"5457e5f1e4b01be26fd74613"},{"problem":80,"code":"(fn\n  [n]\n  (= n (apply +\n              (filter\n                #(= 0 (mod n %))\n                (range 1 n)))))","user":"56bb652ae4b0f26550335953"},{"problem":80,"code":"(fn [n]\n\t(= (dec n)\n\t\t(reduce + (filter #(= 0 (mod n %)) (range 2 n)))\n\t)\n)","user":"5d2201b8e4b02ea6f0fb69ed"},{"problem":80,"code":"(fn [x]\n  (let [divisors (filter #(zero? (mod x %)) (range 1 x))]\n    (= x (reduce + divisors))))","user":"53da19fde4b0e771c3025484"},{"code":"(fn p80\n  [n]\n  (let [divisors-less-sqrt (filter #(instance? java.lang.Long (/ n %))\n                                   (range 2 (inc (Math/sqrt n))))\n        all-divisors (set (concat divisors-less-sqrt\n                                  (map #(/ n %) divisors-less-sqrt)))]\n    (= (inc (reduce + all-divisors)) n)))","problem":80,"user":"50bca033e4b0594b91591c5d"},{"problem":80,"code":"(fn divisors\n  [n]\n  (= n (reduce + (filter #(= 0 (rem n %))(range 1 n)))))","user":"5ed6030de4b016b56eae05db"},{"problem":80,"code":"(fn [n]\n  (let [root (Math/sqrt n)]\n    (= (+ n n)\n       (->> (range 1 (inc (int root)))\n            (filter #(zero? (mod n %)))\n            (map #(if (= % root)\n                    %\n                    (+ % (quot n %))))\n            (reduce +)))))","user":"573d58c8e4b05c31a32c0811"},{"code":"(fn [x]\n  (= x\n     (apply + (filter #(zero? (rem x %)) (rest (range x))));rest --- divided by zero\n  )\n)","problem":80,"user":"53153466e4b08068f379ed23"},{"problem":80,"code":"(fn [x]\n    (let [factors\n          (for [n (range 1 (/ (inc x) 2)) :when (= 0 (mod x n))] n)]\n      (= x (reduce + factors))))","user":"57fc0719e4b0d3187e900987"},{"problem":80,"code":"(fn is-perfect? [n]\n  (= n (reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","user":"56f4cedce4b046a417f92063"},{"code":"(fn [n]\n  (= (apply + (filter #(zero? (mod n %)) (range 1 n))) n))","problem":80,"user":"51a97f7ae4b08d8ec191b827"},{"problem":80,"code":"(fn [x] (= x (reduce + (filter #(zero? (mod x %)) (range 1 (inc (int (/ x 2))))))))","user":"54857e3be4b0e286459a11ad"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + (filter #(= (rem n %) 0) (range 1 n)))))","user":"5c62979fe4b0fca0c162264c"},{"code":"(fn [x]\n  (letfn [(divisors [x]\n            (filter #(= 0 (mod x %)) (range 1 x)))]\n    (= x (reduce + (divisors x)))))","problem":80,"user":"512d3304e4b040332b905b2d"},{"problem":80,"code":"(partial\n (fn [i n]\n   (if (pos? n)\n     (recur (inc i) (- n i))\n     (zero? n)))\n 1)","user":"54c5cc17e4b045293a27f624"},{"problem":80,"code":"(fn [x]\n  (= x \n     (apply + (filter #(zero? (mod x %)) (range 1 x)))))","user":"54dce62be4b024c67c0cf78b"},{"code":"(fn [n]\n  (->> (range 1 (inc (quot n 2)))\n       (filter #(= 0 (rem n %)))\n       (apply +)\n       (= n)))","problem":80,"user":"5126dbabe4b083bb8f88cf0e"},{"code":"#(= % (reduce (fn [s k] ({0 (+ s k)} (rem % k) s)) (range %)))","problem":80,"user":"4ef49c2c535dced4c769f238"},{"problem":80,"code":"(fn [no] (= no (apply + (filter #(zero? (mod no %)) (range 1 (inc (/ no 2)))))))","user":"5ef5ee81e4b07c55ae4a054a"},{"problem":80,"code":"(fn pf [n]\n  (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"57487084e4b009280f9f2b8c"},{"code":"(fn [n]\n  (let [c (range 2 n)\n        d (filter #(zero? (mod n %)) c)]\n    (= n (reduce + 1 d))))","problem":80,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n) \n       (filter #(zero? (mod n %)))\n       (reduce +)\n       (= n)))","user":"537f4652e4b06839e8705eb1"},{"problem":80,"code":"(fn perfect-nums\n  [n]\n  (let [divisors (filter #(= 0 (rem n %)) (range 1 n))]\n    (= n (reduce + divisors))))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"code":"(fn x [n]\n  (= n\n  (apply +\n  (filter (fn [x]\n            (let [xrem (quot n x) nb (* xrem x)]\n              (if (= nb n)\n                true\n                false\n                )\n              )          \n           ) (range 1 n)))))","problem":80,"user":"51696bcde4b03f62cda68ce7"},{"code":"(fn [a] (= (reduce +(loop [x 1\n       a a\n       res '()]\n  (if (= x a) \n    res\n    (if (= 0(mod a x))\n      (recur (inc x) a (conj res x))\n      (recur (inc x) a res))\n)\n)) a) )","problem":80,"user":"520cb8c4e4b0b022ef140c9a"},{"code":"(fn [n] \n  (= n \n    (last\n      (take-while \n        #(<= % n) \n          (map \n            (fn [nn] \n              (let [a (apply * (repeat nn 2))] (* a (dec (* 2 a)))))\n            (range))))))","problem":80,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":80,"code":"(fn perfect-numbers? [number]\n\t(loop [n 1, pn (* (bit-shift-left 1 n) (dec (bit-shift-left 2 n)))]\n\t\t(cond\n\t\t\t(= number pn) true\n\t\t\t(< number pn) false\n\t\t\t:else (recur (inc n) (* (bit-shift-left 2 n) (dec (bit-shift-left 4 n)))))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":80,"code":"(fn perfect? [n]\n    (= n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn perfect? [num]\n  (= num (apply + (filter #(= 0 (mod num %)) (range 1 num)))))","problem":80,"user":"4ee82223535d93acb0a66877"},{"problem":80,"code":"(fn [n] (=\n          (reduce + (filter (fn [k] (= (mod n k) 0)) (range 1 n))) n))","user":"5bc9e3e9e4b07a9b28b100e2"},{"problem":80,"code":"(fn foo\n  ([number]\n   (foo number #{1} 1))\n  ([number factors counter]\n   (if (>= counter (+ 1 (quot number 2)))\n     (= number (apply + (filter #(not= number %) factors)))\n     (if (= 0 (rem number counter))\n       (let [new-factors (clojure.set/union factors #{counter (quot number counter)})]\n         (recur number new-factors (inc counter))\n         )\n       (recur number factors (inc counter))\n       ))\n    )\n  )","user":"5b1ec003e4b03cfeda66ed13"},{"problem":80,"code":"(fn [n]\n  (let [firstFewPrimes [2, 3, 5, 7, 13, 17]]\n    (boolean (some #(= n (* (bit-shift-left 1 (dec %)) (dec (bit-shift-left 1 %)))) firstFewPrimes))))","user":"523b4e91e4b07becd5be21ef"},{"problem":80,"code":"#(let [divisors (filter\n                 (fn [x]\n                   (zero? (mod % x)))\n                 (range 1 %))]\n   (= (apply + divisors) %))","user":"510528a0e4b0730a5f55ad85"},{"code":"(fn [n]\n  (= n\n    (apply +\n      (filter\n        #(zero? (rem n %))\n        (range 1 (max 2 (inc (quot n 2))))))))","problem":80,"user":"504c8165e4b09724c857af31"},{"problem":80,"code":"(fn [num] (->>\n           num\n           (range 1)\n           (filter #(= (mod num %) 0))\n           (apply +)\n           (= num)\n))","user":"5d6d2172e4b04d129b00f2b9"},{"code":"#(boolean (some #{%} (for [p [2 3 5 7 13 17 19 31]] (* (bit-shift-left 1 (dec p)) (dec (bit-shift-left 1 p))))))","problem":80,"user":"52b453b0e4b0c58976d9ad21"},{"problem":80,"code":"(fn [x]\n  (= x (apply + (filter #(= (rem x %) 0) (range 1 x)))))","user":"53e4fa2ce4b036ad0777e454"},{"code":"(fn [x]                                                                                                             \n   (= x (reduce + (filter #(= (rem x %) 0) (range 1 x)))))","problem":80,"user":"52140b53e4b0961f15ac4d7e"},{"problem":80,"code":"(fn [n]\n(let [coll (range 1 (inc (/ n 2)))\n      divisors (filter (fn [x] (zero? (rem n x))) coll)]\n(= (apply + divisors) n)))","user":"51316a63e4b0431ba07e7feb"},{"problem":80,"code":"(fn [n]\n  (loop [i 1 number 0]\n    (if (> i (/ n 2))\n      (= number n)\n      (if (= (rem n i) 0)\n        (recur (inc i) (+ number i))\n        (recur (inc i) number)))))","user":"59368ccae4b02506e01a2979"},{"code":"(fn [n]\n  (= n (apply + (filter #(= (mod n %) 0) (range 1 n)))))","problem":80,"user":"4e8612f8535db62dc21a62f2"},{"problem":80,"code":"(fn [number]\n  (let [divisors (filter #(= 0 (mod number %)) (range 1 (+ 1 (/ number 2))))]\n    (= number (reduce + divisors))))","user":"56424f5de4b08d4f616f5f17"},{"code":"(fn [n] (= n (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4db8f6c4535d1e037afb219e"},{"code":"(fn [n]\t(= n (apply + (filter #(= (mod n %) 0) (range 1 n)))))","problem":80,"user":"534f13b2e4b084c2834f4ac4"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(= (rem n %) 0) (range 1 n))]\n    (= (reduce + divisors) n)))","user":"546c4c5fe4b00cfc9eacc178"},{"problem":80,"code":"(fn [n]\n  (->> (* n 0.5)\n       inc\n       (range 2)\n       (filter #(zero? (rem n %)))\n       (cons 1)\n       (apply +)\n       (= n)))","user":"5346f409e4b084c2834f4a46"},{"problem":80,"code":"(fn perfect?\n  [n]\n  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"56449e4de4b0284900eef5f9"},{"code":"(fn perfect? [n]\n  (let [divisors (fn [x] (filter #(zero? (mod x %)) (range 1 (inc (int (/ x 2))))))]\n    (if (= n (reduce + (divisors n))) true false)))","problem":80,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"(fn perfect [n]\n  (if (= n (apply +  (filter  #(= (rem n % ) 0)  (range 1 (dec n)) ))) true false))","problem":80,"user":"5101192ae4b0bef64c30e266"},{"code":"(fn [n] \n  (= n (reduce +\n    (filter \n      #(zero? (mod n %)) \n      (range 1 n)))))","problem":80,"user":"5032b066e4b00c0952a257ea"},{"problem":80,"code":"(fn [n]\n    (= n (reduce + (loop [i 1, divs #{}]\n                     (if (or (= i n) (divs i))\n                       (disj divs n)\n                       (recur (inc i)\n                              (if (zero? (mod n i))\n                                (conj divs i (quot n i))\n                                divs)))))))\n\n;; The following solution by user \"1067\", while being much much more readable and elegant,\n;; is unfortunately about 4 orders of magnitude slower for large values\n;; (tested with 1,000,000,000 on my machine) than my admittedly ugly implementation.\n#_(fn [n]\n    (->> (range 1 n)\n         (filter #(zero? (mod n %)))\n         (apply +)\n         (= n)))","user":"59a080e3e4b0871e7608b837"},{"problem":80,"code":"(fn [n]\n   (->> (/ n 2)\n        inc\n        (range 1)\n        (filter #(= 0 (rem n %)))\n        (reduce +)\n        (= n)\n        ))","user":"5619a388e4b053970a773afc"},{"problem":80,"code":"(fn [x]\n    (cond\n      (#{6 496 8128} x) true\n      (#{7 500} x) false))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":80,"code":"(fn\n    [n]\n    (let [divisors (fn [n] (filter #(integer? (/ n %)) (range 1 n)))]\n      (= n (reduce + (divisors n)))))","user":"56b306c6e4b0982f16b37e0e"},{"code":"(fn [x]\n (= x (reduce + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"#(->> (range 1 %) \n      (filter (comp zero? (partial mod %)))\n      (apply +) \n      (= %))","problem":80,"user":"51105c7fe4b04c71fce993ef"},{"code":"(fn[n](= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"5093ca51e4b097f48cc38585"},{"problem":80,"code":"#(not (nil? (#{6 496 8128} %)))","user":"5370d152e4b0fc7073fd6e9d"},{"code":"(fn [n]\n           (= n (apply + (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"4f34eb87e4b0e243712b1eba"},{"problem":80,"code":"(fn [num]\n  (->> (map inc (range (/ num 2)))\n       (filter #(= 0 (mod num %)))\n       (apply +)\n       (= num)))","user":"55d28b38e4b0e31453f64a58"},{"code":"(fn perfect?--reduce\n  [n] {:pre [(integer? n)]}\n  (let [divisor? (fn [d] (= 0 (mod n d)))]\n    (= n (reduce (fn [acc x] (+ acc (if (divisor? x) x 0)))\n                 0\n                 (range 1 n)))))","problem":80,"user":"4fc6305de4b0ee37620e180b"},{"problem":80,"code":"(fn perfect?\n  [x]\n  (= x \n     (reduce +\n               (filter\n                #(zero? (mod x %))\n                (rest (range x))))))","user":"57235dc4e4b0c5bde472c0e2"},{"code":"(fn [x]\n  (let [sum (reduce + (for [d (range 1 x) :when (= 0 (mod x d))] d))]\n    (= sum x)))","problem":80,"user":"4ef20daa535dced4c769f21a"},{"code":"(fn [n]\r\n  (= (reduce + (filter #(= (mod n %) 0) (range 1 n))) n))","problem":80,"user":"500d1db4e4b05f7c30cfa69f"},{"problem":80,"code":"(fn magico [x]\n  (->> (range  1 (inc (quot x 2)))\n       (filter #(= (rem x % ) 0))\n       (reduce +)\n       (= x)))","user":"4e6a5728535d8ccf87e9fecf"},{"code":"(fn [n]\n  (let [divisors (filter (fn [n'] (zero? (mod n n'))) (range 1 n))]\n    (= (apply + divisors) n)))","problem":80,"user":"51195e77e4b055cfb310d499"},{"code":"#(or (= 6 (rem % 10)) (= 8 (rem % 10)))","problem":80,"user":"4f84a4a4e4b033992c121c39"},{"code":"(fn [x]\n  (= x\n     (apply + (filter #(= 0 (rem x %))\n                      (range 1 (inc (quot x 2)))))))","problem":80,"user":"50b668dde4b08fb537db98f2"},{"problem":80,"code":"(fn [n]\n  (if (= n \n         (loop [x (dec n)\n                y 0]\n           (if (= x 1)\n             (inc y)\n             (recur (dec x) (+ y (if (ratio? (/ n x)) 0 x)))))\n         )\n    true\n    false))","user":"557c6ca6e4b05c286339e0c4"},{"problem":80,"code":"(fn [n]\n  (= n (reduce +\n(filter #(zero? (rem n %)) (range 1 n)))))","user":"575d16f8e4b02ea114799377"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (rem n %)) (range 1 (dec n))))))","user":"5590e55de4b0277789237676"},{"code":"(fn [n] (= n\n\t     (apply + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"52bf6946e4b07a9af5792334"},{"code":"(fn [x] (let [\n    divides (fn [a b] (zero? (mod b a))),\n    divisors (fn [y] (let [q (Math/sqrt y)]\n      (loop [n 2, d[1]]\n        (if (> n q)\n        d\n        (if (divides n y)\n          (recur (inc n) (conj d n (quot y n)))\n          (recur (inc n) d))))))]\n  (= x (reduce + (divisors x)))))","problem":80,"user":"4e3ac1b2535deb9a81d77f4c"},{"problem":80,"code":"(fn [n]\n  (= (apply + (filter #(zero? (rem n %)) (range 1 n))) n))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":80,"code":"(fn perfect\n     [x]\n     (let [s (apply + (filter #(= 0 (rem x %)) (range 1 x)))]\n       (= x s)\n       )\n     )","user":"58a44a14e4b01a0c0b2328f2"},{"code":"(fn is-perfect-number? [n]\n  (= (reduce + (filter #(= (rem n %) 0) (range 1 n))) n))","problem":80,"user":"4ff355a1e4b0678c553fc34d"},{"problem":80,"code":"(fn perfect-number?\n  [num]\n  (= num\n     (reduce + (filter #(= 0 (mod num %)) (range 1 num))))\n  )","user":"5f29837ee4b033932238a64f"},{"code":"(fn perfect-number?\r\n  ([x] \r\n    (perfect-number? x 1 []))\r\n  ([x y z]\r\n    (if (= x y)\r\n      (if (= x (apply + z))\r\n      true\r\n      false)\r\n    (if (= 0 (rem x y))\r\n      (recur x (inc y) (conj z y))\r\n      (recur x (inc y) z)))))","problem":80,"user":"4e16bdef535d04ed9115e7e9"},{"code":"(fn [n]\n   (= n\n  (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4e6e3a1e535d5021c1a89602"},{"code":"(fn perfect? [n]\n  (= n\n     (->> (range 1 n)\n          (filter #(zero? (rem n %)))\n          (apply +))))","problem":80,"user":"50586354e4b06522596eba78"},{"code":"#(= % (reduce + (filter (fn [n] (zero? (rem % n))) (range 1 %))))","problem":80,"user":"4fd81472e4b0dab7d829f38e"},{"code":"(fn [n]\n  (== n\n      (apply + (filter #(zero? (mod n %)) (range 1 (+ 1 (/ n 2)))))))","problem":80,"user":"51929214e4b08962174cf74c"},{"problem":80,"code":"(fn [n]\n  (let [r (range 2 (+ 1 (int (Math/sqrt n))))\n        s (set (mapcat #(if (zero? (rem n %)) [(quot n %) %]) r))\n        t (reduce + 1 s)]\n    (= n t)))","user":"5125d963e4b05d10e3e395fe"},{"problem":80,"code":"(fn [n]\n    (let [divisors (filter #(= (rem n %1) 0) (range 1 (- n 1)))]\n      (= (reduce + divisors) n)\n    ))","user":"55aa5f73e4b0988bba2ad94b"},{"code":"(fn [x]\n    (->> (range 1 x)\n         (filter #(zero? (rem x %)))\n         (apply +)\n         (= x)))","problem":80,"user":"4e50ad74535dc968683fc4ec"},{"code":"(fn [x]\n  (= x (reduce + (filter (complement nil?)\n          (map #(if (zero? (rem x %)) %) (range 1 x))))))","problem":80,"user":"52d2f457e4b099d49816f0ba"},{"problem":80,"code":"(fn [n]\n  (= (reduce + (filter #(= (rem n %) 0) (take (/ n 2) (iterate inc 1)))) n))","user":"55c0afa5e4b01b9910ae2a27"},{"problem":80,"code":"(fn [n]\n  \"Find all the divisors of n\"\n  (let [candidates (range 2 (inc (int (Math/sqrt n))))\n        add-if (fn [acc v] (if (zero? (rem n v)) (conj acc v (/ n v)) acc))\n        divisors (reduce add-if [1] candidates)]\n    (= (reduce + divisors) n)))","user":"51b920bfe4b0e871ca4958f9"},{"code":"(fn [n] (= n (reduce + (filter #(= 0 (mod n %)) (drop 1 (range n))))))","problem":80,"user":"4eb44d78535d7eef30807360"},{"problem":80,"code":"(fn [n]\n  (let [divs (for [i (range 1 n) :when (zero? (rem n i))] i)]\n    (= (reduce + divs) n)))","user":"54d127b7e4b0e8a36923e5de"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(zero? (mod n %)) (range 1 (inc (/ n 2))))]\n    (= n (apply + divisors))))","user":"538e36c7e4b0b51d73faae81"},{"code":"(fn perfect [x]\n  (= x\n    (reduce + \n      (filter #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"502a5fa4e4b09e8f859a9fbd"},{"code":"(fn [a] (= a (apply + (filter #(= 0 (rem a %)) (range 1 a)))))","problem":80,"user":"50ae0d24e4b0a40c9cfb08ce"},{"code":"(fn myPerfectNumbers\n  [num]\n  (= num (reduce + (filter #(zero? (mod num %)) (range 1 num)))))","problem":80,"user":"509a25b7e4b0efbae1fbc0a8"},{"problem":80,"code":"(fn perf? [n] (if (= n   (reduce +\n                                     (filter #(zero? (mod n %)) (range 1 (+ 1 (/ n 2))))))\n                 true\n                 false))","user":"53e2ac1ae4b036ad0777e3f3"},{"code":"(fn [x]\n  (= x (reduce + (filter #(zero? (rem x %))(range 1 x)))))","problem":80,"user":"4db2cc55535df7e46ed9b6c5"},{"code":"(fn [n]\n  (let [get-divisors\n    (fn [x] (remove #(= x %) (reduce\n  \t#(if (= 0 (mod x %2)) (conj %1 %2 (/ x %2)) %1)\n\t\t#{}\n\t\t(range 1 (inc (java.lang.Math/sqrt x))))))]\n    (= n (apply + (get-divisors n)))))","problem":80,"user":"4dad76588e77d6ed63f12a44"},{"problem":80,"code":"(fn perfect? [n]\n  (letfn [(divisors [n]\n                    (filter #(zero? (mod n %)) (range 1 n)))]\n    (= (apply + (divisors n)) n)))","user":"5dcc152ae4b02b31cc3da3c3"},{"code":"(fn perfect? [checkval]\n  (let [divisors (fn [value] (filter #(zero? (rem value %)) (range 1 value)))]\n    (= (apply + (divisors checkval)) checkval)))","problem":80,"user":"515737f0e4b0b0b4b87062d0"},{"problem":80,"code":"(fn j[x]\n  (= x (reduce +\n               ((fn div[x]\n                  (filter #(= 0 (mod x %)) (range 1 (inc(/ x 2))))) x\n                )\n               )\n     )\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"problem":80,"code":"(fn [x]\n          (= x \n             (reduce #(if (=(rem x %2) 0) (+ %2 %1) %1) 0 (range 1 (inc (quot x 2))))))","user":"5d0cf1c8e4b0cc9c91588246"},{"problem":80,"code":"(fn perfect [n]\n   (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"530b8580e4b02e82168697cc"},{"code":"(fn [n] \r\n  (let [divisors (filter #(= 0 (mod n %)) (rest (range n)))]\r\n    (= n (apply + divisors))))","problem":80,"user":"4e14108c535d04ed9115e7dd"},{"problem":80,"code":"(fn [n]\n  (->> (filter (comp zero? (partial rem n)) (range 1 (/ (+ 1 n) 2)))\n       (apply +)\n       (= n)))","user":"53720c5ce4b0493c815db704"},{"code":"(fn[n] (= n (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"52e68e61e4b09f7907dd1479"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter #(= (mod n %) 0)\n                        (range 1 n)))))","user":"559d33b3e4b0ec2b359424d9"},{"code":"(fn [num]   \n  (loop [n num d 1 s 0]\n    (if (<= d (quot n 2))\n      (if (zero? (mod n d))\n        (recur n (inc d) (+ s d))\n        (recur n (inc d) s)\n      )\n      (= s num)\n     )\n    )\n  )","problem":80,"user":"4f148418535d64f60314643a"},{"problem":80,"code":"(fn [n]\n  (let [divs (filter #(= 0 (rem n %)) (range 1 (inc (/ n 2))))\n        sum\t(apply + divs)]\n    (= n sum)))","user":"579c8ad1e4b05b1deef9ae0c"},{"problem":80,"code":"(fn [n] (= n\n           (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"53e3f7a8e4b036ad0777e408"},{"code":"(fn [n]\n       (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn [n] (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4f036d9b535dcb61093f6ac1"},{"code":"(fn [x]\n  (= x (reduce + (filter #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"52774dd2e4b03e8d9a4a74ff"},{"code":"#(= % \n  (reduce + (filter (fn [n] (zero? (mod % n))) (range 1 %))))","problem":80,"user":"5034b0e1e4b062bc5d7ae167"},{"code":"#(->> %\n      Long/toBinaryString\n      (partition-by identity)\n      (map count)\n      ((juxt count (partial apply -)))\n      (= [2 1])\n      )","problem":80,"user":"5281a445e4b0757a1b17143a"},{"code":"(fn [n]\n   (= n (/ (apply + (flatten(loop [cur 1 r1 '() r2 '()]\n\t\t(if (or (some #(= cur %) r2) (> cur n)) [r1 r2]\n          (if (= 0 (mod n cur))\n          (recur (inc cur) (conj r1 cur) (conj r2 (quot n cur)))\n          (recur (inc cur) r1 r2)\n          )\n         )\n       )\n     )) 2))\n  )","problem":80,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [x]\n            (filter #(zero? (mod x %))\n                    (range 1 x)))]\n    (= n (apply + (divisors n)))))","user":"55702081e4b09a3098a52529"},{"problem":80,"code":"(fn [n]\n  (loop [d [1] x 2]\n\t(cond (= (apply + d) n) true\n          (> x n) false\n          (= 0 (mod n x)) (recur (conj d x) (inc x))\n          :else (recur d (inc x)))))","user":"51ab70c3e4b04e3dc0c27b33"},{"code":"(fn perfect [n] (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4f8c5f4fe4b02e764a0a5198"},{"code":"(fn [n]\n  (= n (reduce + (filter #(let [x (/ n %)] (= (Math/ceil x) (double x))) (range 1 n)))))","problem":80,"user":"5102489de4b00c483ae176f6"},{"code":"(fn perfect-number? [n]\n  (= n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":80,"code":"(fn perfect? [n]\n  (= n (reduce + (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter #(not (ratio? (/ n %))) (range 1 n)))))","user":"5405ae2be4b0addc1aec6671"},{"problem":80,"code":"(fn perf[x] (= x (reduce + (filter #(= 0 (mod x %)) (range 1 (inc (/ x 2)))))))","user":"596f6683e4b069c0a1a19877"},{"problem":80,"code":"(fn [x]\n  (= x\n     (apply +\n            (->> (range x)\n                 (drop 1)\n                 (filter #(zero? (mod x %)))))))","user":"537158e2e4b0fc7073fd6eb0"},{"problem":80,"code":"(letfn [(is-divisor [x y] \n          (zero? (mod x y)))]\n  (fn [x] \n    (= (apply + (filter (partial is-divisor x) (range 1 x))) x)))","user":"5884e807e4b0f1effa3b76a6"},{"code":"(fn [n]\n    (letfn [(divisors [n]\n              (let [max-divisor-check (int (Math/sqrt n))\n                    low-divisors (filter #(zero? (unchecked-remainder n %)) (take max-divisor-check (iterate inc 1)))]\n                (set (concat low-divisors (map #(unchecked-divide n %) low-divisors)))))]\n      (== (apply + (drop 1 (reverse (sort (seq (divisors n)))))) n)))","problem":80,"user":"4e89e939535d3e98b8023287"},{"problem":80,"code":"(fn [n] \n  (= n (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","user":"56102f50e4b05f002753df6b"},{"code":"#(= \n  (reduce + \n    (filter \n      (fn [x] (zero? (mod % x)))\n      (range 1 %)))\n  %)","problem":80,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":80,"code":"(fn [n] (= n (apply + (filter #(zero? (mod n %)) (range 1 (+ 1 (/ n 2)))))))","user":"5169b23fe4b03f62cda68cee"},{"problem":80,"code":"(fn [x]\n (->> (range 1 (inc (/ x 2)))\n  (filter #(= 0 (mod x %)))\n  (reduce +)\n  (= x)))","user":"5b61aa6ae4b0c6492753e712"},{"problem":80,"code":"(fn [n] (= (reduce + (filter #(= (mod n %) 0) (range 1 n))) n))","user":"54995298e4b0b312c081ff8b"},{"problem":80,"code":"(fn perfect? [n]\n  (= n (reduce + \n               (filter #(= 0 (rem n %)) (range 1 n))\n     ))\n  )","user":"6004c750e4b074f607df6645"},{"code":"(fn [n]\n   (= (apply\n        +\n        (filter\n          (fn [x]\n            (= (rem n x) 0))\n          (range 1 n)))\n     n))","problem":80,"user":"5379ed48e4b06839e8705e5a"},{"code":"(fn [x]\n  (= x\n     (reduce +\n            (filter\n             #(zero? (mod x %))\n             (range 1\n                    (inc (quot x 2)))))))","problem":80,"user":"50fbf811e4b0d10d794c19f1"},{"problem":80,"code":"(fn [x]\n\t(let [y (filter #(= (mod x %) 0) (take (int (Math/sqrt x)) (iterate inc 1)))]\n\t\t(->> (reduce #(conj % (quot x %2)) y y)\n\t\t\t (filter #(not= x %))\n\t\t\t (apply +)\n           \t (= x))))","user":"562d869be4b0a45d2ff8301f"},{"code":"(fn [n] (let [evenDiv? (fn [a b] (== (quot a b) (/ a b)))\n              divisors\n              (fn [v]\n                (loop [curr 2 most (int (Math/sqrt v)) root (Math/sqrt v) result [1]]\n                  (if (> curr most)\n                    result\n                    (if (and (= curr most) (== root most))\n                      (if (evenDiv? v curr) \n                        (conj result curr)\n                        result\n                      )\n                      (if (evenDiv? v curr)\n                        (recur (inc curr) most root (conj result curr (quot v curr)))\n                        (recur (inc curr) most root result)\n                      )\n                    )\n                  )\n                )\n              )\n             ]\n          (= (apply + (divisors n)) n)\n        )\n)","problem":80,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":80,"code":"(fn [n] \n  (= n (reduce + (filter #(zero? (rem n %)) (range 1 n)))))","user":"594bc16be4b07ddc2dafae39"},{"problem":80,"code":"(fn perfect?\n  [n]\n  (let [divisors (->> (range (long (/ n 2)))\n                      (map inc)\n                      (filter #(zero? (rem n %)))\n                      (vec))]\n    (= n (apply + divisors))))","user":"5d609ddde4b0c9e5857d5008"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [x]\n            (cons 1 (->> (range 2 x)\n                         (filter (comp zero?\n                                       (partial rem x))))))]\n    (= n (apply + (divisors n)))))","user":"561ca2eae4b064ca9f4b169b"},{"problem":80,"code":"(fn\n  [number]\n  (= number(apply + (filter #(zero?(rem number %))\n                      (range 1 (+ 1 (/ (if (odd? number)\n                                         (- number 1)\n                                         number) 2)))))))","user":"56dc483fe4b0ea9b8538f81b"},{"code":"(fn [x] (= x (apply +\n    (filter #(zero? (mod x %)) (range 1 (inc (/ x 2)))))))","problem":80,"user":"4f956072e4b0dcca54ed6ccf"},{"problem":80,"code":"(fn perfect-numbers\n  [x]\n  (= x (apply + (filter #(= 0 (mod x %)) (range 1 x)))))","user":"59b9e669e4b0a024fb6ae3db"},{"problem":80,"code":"#(= (apply + (filter (fn [x] (zero? (mod % x))) (range 1 %))) %)","user":"5dd47f7ce4b0948ae9d9ad6d"},{"code":"#(= % (apply + (for [i (range 1 %) :when (= 0 (mod % i))] i)))","problem":80,"user":"4db858d1535d1e037afb218c"},{"problem":80,"code":"(fn perfect-numbers\n    [n]\n    (->> (range 1 n)\n         (filter (comp zero? (partial rem n)))\n         (reduce +)\n         (= n)))","user":"5974d2ede4b01722bebd4cb6"},{"problem":80,"code":"(fn [n]\n    (= n (reduce +\n     (filter (fn [d] (zero? (mod n d))) (range 1 (+ (quot n 2) 1))))))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":80,"code":"(fn [n]\n  (let [d (->> (range 1 n) (filter #(zero? (mod n %))))]\n    (= n (apply + d))))","user":"5e6ca949e4b04a83ad7cd289"},{"problem":80,"code":";;(fn is-perfect?[n] \n;;\t(if \n;;    \t(= \n;;      \t(\n;;        \t\t(fn sum-div[liczba suma dziel] \n;;           \t\t\t(if (= dziel (dec liczba))\n;;               \t\t\tsuma \n;;               \t\t\t(if (= (mod n dziel) 0) \n;;                  \t\t\t(sum-div liczba (+ suma dziel) (inc dziel)) \n;;                  \t\t\t(sum-div liczba suma (inc dziel))\n;;                \t\t)\n;;         \t\t\t) \n;;      \t\t\t)\n;;       \t\t\tn 0 1\n;;    \t\t    ) \n;; \t\t        n\n;;   \t  ) \n;;\t  true \n;;\t  false\n;;    )\n;;)\n\n(fn perfect?[x]\n  (let [dividers (filter #(= (mod x %) 0) (range 1 x))]\n    (= x (reduce + dividers))))","user":"55429859e4b0a04f7929951f"},{"code":"(fn p [n]\n  (= n (apply + (filter #(= (mod n %) 0) (range 1 n)))))","problem":80,"user":"532b43c3e4b09d4e7a9b5531"},{"problem":80,"code":"#(= % (apply + (filter (fn [x] (= (mod % x) 0)) (range 1 %))))","user":"56372c3ce4b0bfe05bf117d1"},{"code":"(fn p [n]\n  (= n \n     (reduce #(if (= (mod n %2) 0) (+ %1 %2) %1) 0 (range 1 (inc (/ n 2))))))","problem":80,"user":"4ff4c9dae4b0678c553fc360"},{"code":"(fn [n]\n  (= n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"4f8345c6e4b033992c121c1b"},{"problem":80,"code":"(fn\n  [num]\n  (= num\n     (apply +\n            (reduce\n              #(if (= 0 (mod num %2))\n                 (conj % %2)\n                 %)\n              []\n              (range 1 num)))))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":80,"code":"(fn [n]\n  (let [divisors (reduce\n                  (fn [s i]\n                    (if (= 0 (mod n i))\n                      (conj s i (/ n i))\n                      s))\n                  #{}\n                  (range 1 (inc (Math/sqrt n))))]\n    (= n (apply + (disj divisors n)))))","user":"5cf6522be4b0b71b1d808a58"},{"problem":80,"code":"(fn [x]\n  (let [divisors (filter\n                  #(= (mod x %) 0)\n                  (range 1 (inc (int (/ x 2)))))]\n    (= x (apply + divisors))))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":80,"code":"(fn perfect [n]\n  (= n (apply + (filter #(=(mod n %) 0) (range 1 n)))))","user":"5a9482b7e4b0d174b936c737"},{"code":"(fn perfect-number? [x]\n  (let [divisors (fn [x]\n                   (loop [i 2\n                          ds [1]]\n                     (let [limit (/ x i)]\n                       (if (>= i limit)\n                         ds\n                         (recur (inc i)\n                                (if (zero? (rem x i))\n                                  (concat ds [i limit])\n                                  ds))))))]\n    (= (apply + (divisors x)) x)))","problem":80,"user":"5310e7aee4b08068f379ecdc"},{"code":"(fn [n] (->> \r\n          (range 1 (/ (inc n) 2)) \r\n          (keep #(if (zero? (mod n %)) %)) \r\n          (reduce +)\r\n          (= n)\r\n          ))","problem":80,"user":"50336c6be4b0c6c1199c710f"},{"problem":80,"code":"(fn perfect-num?\n  [number]\n  (let [num-range (if (even? number) \n                    (range 1 number) \n                    (range 2 number 2))\n        add-divisor? (fn [divisor] (if (= (mod number divisor) 0) \n                                      divisor\n                                      0))]\n    (= (apply + (mapv add-divisor? num-range)) number)))","user":"5a3c06fce4b001c08efc0cdd"},{"code":"(fn [n] \n  (= n \n    (apply + \n      (filter #(= 0 (mod n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"4f038567535dcb61093f6b0c"},{"problem":80,"code":"(fn [x]\n   (= x\n      (->> (range 2 (Math/ceil (Math/sqrt x)))\n           (filter #(= 0 (mod x %1)))\n           (mapcat #(list %1 (/ x %1)))\n           (reduce +)\n           (+ 1))))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn [n]\n  (letfn [(divisor? [x y] (= (mod y x) 0))\n          (sum [c] (reduce + c))\n          (divisors [x] (filter #(divisor? % x) (range 1 x)))]\n    (= n (sum (divisors n)))))","problem":80,"user":"506d5e4ce4b0a302964c5493"},{"code":"(fn [x]\n   (= x (apply + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":80,"code":"#(loop [n 1 v %]\n   (cond (< v 0) false\n         (= v 0) true\n         :else (recur (inc n) (- v n))))","user":"55933c7ae4b0c79f6e1db938"},{"code":"(fn [x]\n  (= x\n     (apply + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"5220bc0fe4b0e6a83c8925a7"},{"problem":80,"code":"#(= % (apply + (for [x (range 1 %) :when (zero? (mod % x))] x)))","user":"5cebafbbe4b0a17bb84e2be6"},{"code":"(fn [n]\r\n  ((fn [rs i]\r\n    (if (= rs n) true\r\n  \t\t(if (> rs n) false\r\n  \t\t\t(recur (+ rs i) (inc i)))))\r\n  0 0))","problem":80,"user":"4f3242bae4b0d6649770a08f"},{"problem":80,"code":"(fn isPerf [n] (= (reduce + (filter #(zero? (rem n %)) (range 1 n))) n) )","user":"58622733e4b0f14aab7c8803"},{"problem":80,"code":"(fn is-perfect-number [num]\n  (= num\n     (reduce + (remove nil? (map-indexed (fn [idx itm] (let [d (mod num itm)] (if (= d 0) (inc idx)))) (drop 1 (range num)))))))","user":"5e48ec09e4b043cd24807a45"},{"problem":80,"code":"(fn [n]\n  (let [factors (filter #(zero? (rem n %)) (range 1 n))]\n    (= n (reduce + factors))))","user":"55ede35ce4b0121d4835fde1"},{"code":"#(contains? #{6 496 8128} %)","problem":80,"user":"4e5411e8535d8a8b8723a279"},{"code":"(fn perfect? [n]\n  (letfn [(divisors [n] (filter (fn [e] (= 0 (mod n e))) (range 1 n)))]\n    (= n (apply + (divisors n)))))","problem":80,"user":"52f8f4d1e4b047fd55836fde"},{"code":"(fn [n]\n  (if (odd? n)\n    false\n    (= n (reduce + (filter #(zero? (rem n %)) (range 1 n))))))","problem":80,"user":"4e720985535d5021c1a89655"},{"code":"(fn [n]\n\t(if (= n\n\t\t(reduce #(+ % %2)\n\t\t\t(for [i (next (range n))]\n\t\t\t\t(if (zero? (rem n i)) i 0))))\n\t\ttrue\n\t\tfalse))","problem":80,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn [n] (= n (reduce + (filter #(= 0 (mod n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"504e1abee4b0f6ff3350c45d"},{"code":"(fn [x]\n  (let [divisors (filter #(zero? (mod x %)) (range 1 x))]\n    (= x (apply + divisors))))","problem":80,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"code":"(fn [n] (== n (apply + (filter #(== 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(zero? (mod n %)) (range 1 n))]\n     (= n (apply + divisors))))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(zero? (rem n %)))\n       (apply +)\n       (= n)\n       ))","user":"549a176ce4b0f3d1d8e70f69"},{"code":"(fn [x]\n  (->> (range 2 (inc (quot x 2)))\n    (filter #(= 0 (rem x %)))\n    (reduce + 1)\n    (= x)))","problem":80,"user":"50479524e4b0371827a27bc4"},{"problem":80,"code":"(fn pf [n] (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"56aed78fe4b03c432f187363"},{"problem":80,"code":"(fn [k]\n  (let [aaa (range 2 (-> k Math/sqrt int inc))\n        divs (reduce #(if (zero? (rem k %2)) (conj %1 (/ k %2) %2) %1) [] aaa)]\n    (-> (reduce + divs) inc (= k))))","user":"5292feb4e4b0239c8a67af39"},{"problem":80,"code":"(fn perfect? [n]\n  (let [nontrivial-divisors (filter #(zero? (mod n %)) (range 2 (inc (/ n 2))))]\n    (= n (reduce + 1 nontrivial-divisors))))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":80,"code":"(fn [x] \n  (= x (reduce +\n    (filter \n      #(zero? (mod x %)) \n      (range 1 x)))))","user":"5ff709e4e4b06df49cee149b"},{"problem":80,"code":"(fn [n]\n  (->>\n   (range 1 n)\n   (filter #(= 0 (mod n %)))\n   (apply +)\n   (= n)))","user":"5fa74b82e4b0fa27300f3dda"},{"code":"(fn [n]\n  (= n\n     (apply + (filter #(= (rem n %) 0) (range 1 n)))))","problem":80,"user":"514721c6e4b0d520409ed392"},{"problem":80,"code":"(fn perf [numb]\n  (let [divisors (filter\n                  #(zero? (rem numb %))\n                  (range 1 numb))]\n    (= numb (apply + divisors))))","user":"5d3ae729e4b01671435dbd5d"},{"code":"(fn [n]\n  (= n (reduce + (filter #(= (mod n %) 0) (range 1 n)))))","problem":80,"user":"50aab057e4b056ee0193586b"},{"problem":80,"code":"#(->>\n  %\n  (dec)\n  (range 1)\n  (filter (fn [n] (zero? (mod % n))))\n  (reduce +)\n          (= %))","user":"598ab445e4b02b9968b84ce0"},{"problem":80,"code":"(fn [a] (if (= a \n  (apply + ((fn factor [x] (filter #(zero? (rem x %)) (range 1 x))) a)))\ntrue\nfalse))","user":"5643ba10e4b0018b46ad8bff"},{"problem":80,"code":"(fn dd[x](= x (reduce +(filter #(= 0 (mod x %)) (range 1 x)))))","user":"5dadf73ee4b0f8c104ccfc86"},{"code":"(fn [n] (= n (reduce + (filter #(= 0 (mod n %)) (next (range n))))))","problem":80,"user":"4eb02674535d7eef30807338"},{"code":"(fn perfect-numbers [n]\r\n    (letfn [(divisors [a]\r\n              (map #(inc (first %)) (filter (fn [x] (zero? (second x))) (map-indexed #(list %1 (rem a %2)) (range 1 a)))))]\r\n      (= (reduce + (divisors n)) n)))","problem":80,"user":"4f039524535dcb61093f6b2c"},{"code":"(fn [n]\n  (= n\n     (apply + (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"51780f88e4b03d69594194c9"},{"problem":80,"code":"(fn p80\n  [n]\n  (->>\n       (range 1 n)\n       (filter #(zero? (rem n %)))\n       (apply +)\n       (= n)))","user":"57e139f6e4b0bfb2137f5a6c"},{"problem":80,"code":"(fn [n] (= (reduce + (loop [i 1 l []] (if (> i (/ n 2)) l (recur (inc i) (if (= (rem n i) 0) (conj l i) l))))) n))","user":"59468de7e4b07ddc2dafad88"},{"problem":80,"code":"#(= % (loop [c 1 a 0]\n         (if (not= c %)\n           (recur (inc c) (if (= 0 (rem % c)) (+ a c) a))\n           a)))","user":"53d5a63be4b0e771c3025449"},{"code":"(fn [n]\r\n    (= n (reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4dd61f98535d2dad7130b5c6"},{"problem":80,"code":"(fn [x]\n\t(= x (reduce + (filter #(zero? (mod x %)) (range 1 x)))))","user":"57e6997ee4b0bfb2137f5af0"},{"code":"(fn [n]\n  (loop [i 1 divs []]\n    (if (> i (dec n))\n      (= n (reduce + divs))\n      (recur (inc i) (if (= (mod n i) 0)\n                       (conj divs i)\n                       divs)))))","problem":80,"user":"51e0198ee4b01188f0627539"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + 0 (filter #(zero? (mod n %)) (range 1 n)))))","user":"5338387de4b0e30313ee6c91"},{"code":"(fn [n]\n  (loop [i 1 s []]\n    (if (< i n)\n      (if (= (rem n i) 0)\n        (recur (inc i) (conj s i))\n        (recur (inc i) s))\n      (= n (reduce + s)))))","problem":80,"user":"5029fccee4b023940c84aa47"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter (comp zero? #(rem n %)) (range 1 n))]\n    (= n (apply + divisors))))","user":"58ee84e5e4b056aecfd47dab"},{"problem":80,"code":"(fn perfect? [n]\n  (let [half-n (int (/ n 2))\n        divisors (filter #(zero? (mod n %)) (range 1 (inc half-n)))]\n    (= (apply + divisors) n)))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"problem":80,"code":"(fn perfect? [n] (= n (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","user":"55c10409e4b01b9910ae2a2c"},{"code":"(fn [x] \n  (= x (apply + (filter #(= 0 (mod x %)) (range 1 x)))))","problem":80,"user":"4f048f67535dcb61093f6bd3"},{"problem":80,"code":"#(let [sd (fn [x i a] (if (> i 0) (recur x (dec i) (if (= 0 (mod x i)) (+ i a) a)) a))]\n        (= % (sd % (quot % 2) 0)))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":80,"code":"(fn [x]\n\t(= x (inc\n\t\t(apply +\n\t\t\t(filter #(= 0 (mod x %))\n\t\t\t\t(range 2 (inc (/ x 2))))))))","user":"57ccedaae4b0c746388ab88e"},{"code":"(fn [n] (= n (apply + (filter #(= (mod n %) 0) (range 1 n)))))","problem":80,"user":"4eaede1f535d7eef30807329"},{"code":"(fn [x]\n  (letfn [(divides? [numerator denominator]\n            (= 0 (mod numerator denominator)))\n          (devisors [n]\n            (filter #(divides? x %1) (range 1 n)))]\n    (= x (reduce + (devisors x)))))","problem":80,"user":"50bd6033e4b0594b91591c66"},{"code":"(fn [x]\n  (->> (range 1 x)\n       (filter #(zero? (mod x %)))\n       (reduce +)\n       (= x)))","problem":80,"user":"5312cdaae4b08068f379ed03"},{"code":"(fn [n]\n  (= n\n     (reduce + (filter #(integer? (/ n %)) (range 1 n)))))","problem":80,"user":"504e14c2e4b078edc5f593bf"},{"problem":80,"code":"#(or (some (partial = %) [6 28 496 8128]) false)","user":"5d5e0259e4b0c9e5857d4fef"},{"code":"(complement {7 true 500 true})","problem":80,"user":"4dcd818e535d5973398f929d"},{"code":"(fn [n]\n    (= n (reduce + (remove #(= % n) (set (map #(reduce * %) (reduce (fn [a b] (mapcat #(identity [% (conj % b)]) a)) [[]] ((fn divs [x i col] (if (= 1 x) col (if (= 0 (rem x i)) (divs (/ x i) i (conj col i)) (divs x (inc i) col)))) n 2 [1])))))))\n\n    )","problem":80,"user":"52c1bd29e4b07a9af579236a"},{"problem":80,"code":"(fn [n]\n  (= n (reduce +\n    (filter\n      #(zero? (mod n %))\n      (range 1 n)))))","user":"5bbdd136e4b07a9b28b0ffab"},{"problem":80,"code":"(fn perfect? [n]\n  (= n (apply + (filter #(zero? (mod n %)) (range 1 (+ 1 (/ n 2)))))))","user":"53b39d82e4b047364c0444a6"},{"problem":80,"code":"(fn [n]\n  (= n\n     (apply +\n            (filter #(= (mod n %) 0) (range 1 n)))))","user":"559b55d6e4b066d22e731f54"},{"problem":80,"code":"(fn [n]\n    (let [divisors (fn [n] (filter (comp zero? (partial rem n)) (range 1 n)))]\n      (= n (apply + (divisors n)))))","user":"515ebde3e4b01e5d11ccd0a8"},{"problem":80,"code":"(fn [n]\n  (let [divisors\n        (filter #(integer? (/ n %))\n                (range 1 n))]\n    (= n (apply + divisors))))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":80,"code":"(fn [x]\n  (let [divisor-of? #(= 0 (mod x %))\n        divisors (filter divisor-of? (range 1 x))]\n          (= (reduce + divisors) x)))","user":"54d000c7e4b018d918be98d7"},{"problem":80,"code":"(fn __ [n]\n  (->>\n   (range 1 n)\n   (filter #(zero? (rem n %)))\n   (apply +)\n   (== n)))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"(fn perfect [n]\n  (let [divisors (filter #(zero? (mod n %))\n                         (range 1 (inc (/ n 2))))]\n    (= (reduce + divisors) n)))","problem":80,"user":"4dada426c9a9d6ed2a99dc57"},{"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(= (mod n %) 0))\n       (reduce +) (= n)))","problem":80,"user":"4fb1fa51e4b081705acca283"},{"code":"(fn [x]\n (= x (apply + (filter #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"50de11b2e4b061dbdced7217"},{"code":"(fn [n]\n  (= n (reduce +\n    (filter #(= (mod n %) 0) (range 1 n)))))","problem":80,"user":"4de165f3535d08e6dec9fde6"},{"code":"(letfn \n  [(divisors [n]\n             (for [x (range 1 (inc (/ n 2)))\n                   :when (zero? (mod n x))]\n               x))\n   \n   (perfect? [n] \n            (= n (reduce + (divisors n))))]\n  \n  #(perfect? %))","problem":80,"user":"52d2ca1ce4b099d49816f0b4"},{"code":"#(let [ntz (Integer/numberOfTrailingZeros %1)]\n  (= (bit-shift-right %1 ntz) (dec (bit-shift-left 1 (inc ntz)))))","problem":80,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":80,"code":"(fn[x](= x (reduce + (filter (fn[x](= x (int x))) (map (fn[y](/ x y)) (range 2 (inc x)))))))","user":"574a9132e4b02ea1147991fd"},{"code":"(fn is-perf-num [n]\r\n  (= n \r\n     (apply + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4f7d25b4e4b06e829148e1ba"},{"problem":80,"code":"(fn isperfect? [n] (letfn [\n\t(divisors [x] (filter #(zero? (mod x %)) (range 1 (dec x))))]\n    \t(= n (apply + (divisors n)))))","user":"55536a8ae4b0deb715856e03"},{"problem":80,"code":"(fn [x]\n  (= x\n     (reduce +\n             (filter (fn [d]\n                       (= 0 (mod x d)))\n                     (range 1 x)))))","user":"5461dc79e4b01be26fd746a8"},{"problem":80,"code":"(fn [n]\n  (= n\n     (apply + \n       (filter #(= 0 (mod n %)) \n         (drop 1 (range n))))))","user":"51e5a627e4b0efabf93c02db"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + (for [i (range 1 n)\n                       :let [r (rem n i)]\n                       :when (= r 0)]\n                   i))))","user":"5866b999e4b0f14aab7c886b"},{"problem":80,"code":"(fn [n]\n  (case n\n        6 true\n        7 false\n        496 true\n        500 false\n        8128 true))","user":"564d7434e4b0284900eef680"},{"code":"(fn [n]\n  (let [x-fn (fn [x y] (= 0 (mod x y)))]\n    (loop [point 1\n           p-sum 0]\n      (if (and (< point n)\n               (< p-sum n))\n        (recur (inc point) (if (x-fn n point) (+ p-sum point) p-sum))\n        (= n p-sum)))))","problem":80,"user":"5036eba7e4b0af0658af77a5"},{"problem":80,"code":"(fn\n  [x]\n  (let [g #(zero? (rem x %))\n        a (filter g (range 1 x))]\n    (= x (apply + a))))","user":"55bf6dbce4b01b9910ae2a12"},{"problem":80,"code":"(fn [n]\n  (let [ub (-> n Math/sqrt int inc)\n        rs (range 2 (inc ub))\n        f (fn [a x] (if (= 0 (mod n x)) (-> a (conj x) (conj (quot n x))) a))\n        ds (reduce f #{1} (range 2 (inc ub)))]\n    (= n (apply + ds))))","user":"606a70a5e4b069485764ddf2"},{"problem":80,"code":"(fn is-perfect?\n   [n]\n   (loop [divisors #{}\n          d 2]\n     (cond\n       (> d (Math/sqrt n))\n       (= (apply + 1 divisors) n)\n\n       (= 0 (rem n d))\n       (recur (conj divisors d (quot n d)) (inc d))\n\n       :else\n       (recur divisors (inc d)))))","user":"58b51e05e4b0ebc645576d4c"},{"code":"(fn [x]\n  (= x (apply +\n        (->> x\n             (range 1)\n             (filter #(let [n (/ x %)] (= (int n) n)))\n             ))))","problem":80,"user":"51b9d1f0e4b0e871ca49590b"},{"code":"(fn [n]\r\n  (= n\r\n     (loop [d 2\r\n            s 1]\r\n       (if (>= d n)\r\n         s\r\n         (if (= (mod n d) 0)\r\n           (recur (+ d 1) (+ s d))\r\n           (recur (+ d 1) s))))))","problem":80,"user":"4de2f44f535d08e6dec9fdec"},{"code":"(fn [n] \n  (= n \n    (apply + \n      (filter #(= (rem n %) 0) (range 1 (inc (/ n 2)))))))","problem":80,"user":"4ef4c1ff535dced4c769f23e"},{"code":"(fn p[x] (= x (apply + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"4e842ebb535db62dc21a62df"},{"code":"(fn [i]\r\n  (= (apply + (filter #(zero? (mod i %)) (rest (range i))))\r\n     i))","problem":80,"user":"4fabb3e1e4b081705acca21c"},{"code":"#(->>  %\n      (range 1 )\n      (filter (comp (partial == 0)\n                    (partial mod %)) ,)\n      (apply + ,)\n      (== % ,))","problem":80,"user":"4e593dac535d8a8b8723a29c"},{"problem":80,"code":"#(= %1 (reduce + (filter (fn [k] (= 0 (rem %1 k))) (range 1 %1))))","user":"544e9022e4b0e3978000698b"},{"code":"(fn perfect-number? [n]\n  (letfn [(divides? [a b] (zero? (mod b a)))\n          (factors [n] (filter #(divides? % n) (range 1 n)))\n          (factor-sum [n] (reduce + (factors n)))]\n    (= (factor-sum n) n)))","problem":80,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn [n]\n  (= (reduce + (filter #(= (rem n %) 0) (range 1 n))) n))","problem":80,"user":"512474ede4b02c3f2a072cce"},{"problem":80,"code":"(fn[x] (loop [i 2 acc '(1)]\n         (if (= i x)\n           (= (apply + acc) x)\n           (recur (inc i) \n                  (if (zero? (rem x i))\n                    (cons i acc)\n                    acc)))))","user":"57dafe97e4b0bd073c20241c"},{"code":"(fn [n]\n  (letfn [(divisors [n]\n            (filter #(zero? (rem n %)) (rest (range (inc (quot n 2))))))]\n    (= (apply + (divisors n)) n)))","problem":80,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"(fn perfect\n  [n]\n  (let [xs (range 1 (/ (inc n) 2))\n        divisors (filter #(zero? (rem n %)) xs)]\n    (= n (apply + divisors))))","problem":80,"user":"524f4256e4b0541d1855b808"},{"problem":80,"code":"(fn perfect? [n]\n  (->> \n    (range 1 n)\n    (filter #(= 0 (rem n %)))\n    (apply +)\n    (= n)))","user":"559454f2e4b0c79f6e1db952"},{"problem":80,"code":"(fn [n]\n   (= n\n      (reduce +\n              (filter #(= 0 (mod n %))\n                      (range 1 n)))))","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn pn\r\n  [n]\r\n  (= n (reduce + 0 (filter #(= 0 (mod n %)) (range 1 (+ 1 (/ n 2)))))))","problem":80,"user":"4f17ab99535d64f603146457"},{"code":"(fn [x] (= x (reduce + (filter (fn [y] (= 0 (rem x y)))\n(range 1 (inc (quot x 2))) ) ) ))","problem":80,"user":"4e3000c8535deb9a81d77f13"},{"problem":80,"code":"(fn [n]\n   (= n(reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"5d824225e4b0915913b1d37f"},{"code":"(fn [x] (= x (apply + (filter #(zero? (rem x %)) (range 1 x)))))","problem":80,"user":"4ea41fc2535d7eef308072cb"},{"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(zero? (rem n %)))\n       (apply +)\n       (= n)))","problem":80,"user":"524b0645e4b09eba1c0223bf"},{"problem":80,"code":"(fn prfkt?\n  [x]\n  (let [nums (range 1 x)\n        dvsr? (fn [z] (= 0 (mod x z)))\n        dvsrs (filter dvsr? nums)]\n    (= x (apply + dvsrs))))","user":"5545477fe4b0a04f79299531"},{"problem":80,"code":"#(= % (reduce + (filter (complement nil?) (reduce into [1] (for [x (range 2 (Math/sqrt %))] (if (= 0 (rem % x)) (list x (/ % x))))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"(fn [n]\n  (let [divisors (filter #(= (mod n %) 0) (rest (range n)))]\n       (= n (reduce + 0 divisors))))","problem":80,"user":"4f13047d535d64f60314642c"},{"problem":80,"code":"(fn [x]\n   (let [\n         r (range 1 (inc (/ x 2)))\n         last (dec (count r))\n         ]\n     (loop [i 0 divisors []]\n       (let [\n              t (nth r i)\n              remainder (rem x t)\n              next-divisors (if (= 0 remainder) (conj divisors t) divisors)\n             ]\n         (if (= i last)\n           (= x (reduce + next-divisors))\n           (recur (inc i) next-divisors)\n           ))\n       )\n     )\n   )","user":"58a9e872e4b01a0c0b232973"},{"code":"(fn [n] (= n (apply + (filter #(= 0 (mod n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"52951156e4b02ebb4ef7501b"},{"problem":80,"code":"(fn perfect-num? [n]\n  (letfn [(next-divisor [t n]\n            (when (<= t (quot n 2))\n              (if (zero? (mod n t))\n                t\n                (recur (inc t) n))))\n          (divisor-seq\n            ([n]\n             (divisor-seq 1 n))\n            ([prev n]\n             (cons prev\n                   (lazy-seq (if-let [next (next-divisor (inc prev) n)]\n                               (divisor-seq next n))))))]\n    (= n (reduce + (divisor-seq n)))))","user":"55586905e4b0deb715856e2b"},{"code":"(fn [n] (let [coll \n               (for [i (range 1 n)] \n                 (if (= 0 (rem n i)) i 0))] \n           (if (= n (apply + coll)) true false)))","problem":80,"user":"513ca934e4b0b86ece9f3228"},{"problem":80,"code":"(fn perfect? [n]\n    (letfn [(factors [n]\n              (filter #(zero? (rem n %)) (range 1 n)))]\n      (= n (reduce + (factors n)))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":80,"code":"(fn [x]\n  (= x\n     (reduce + (filter #(integer? (/ x %)) (range 1 (inc (int (/ x 2))))))))","user":"4fe92721e4b0547ebccb2447"},{"code":"(fn [n]\n  (= n \n    (reduce + \n      (filter \n         #(= (rem n %) 0) ;; if the rest is null, then then number is a divisor \n         (range 1 (inc (/ n 2))))))) ;; all divisors are in the range 1..n/2","problem":80,"user":"533ab9abe4b0e30313ee6cbf"},{"code":"(fn [x]\n  (let [divisor? (fn [y] (zero? (clojure.core/rem x y)))\n        divisors (filter divisor? (range 1 (inc (/ x 2))))]\n    (= x (reduce + divisors))))","problem":80,"user":"4f2e0369e4b0d6649770a064"},{"problem":80,"code":"(fn [n]\n  (->> n\n       ((partial range 1))\n      (filter (fn [x] (zero? (mod n x))))\n      (reduce +)\n      (= n)))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn [n]\n  (= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4e49badd535dc968683fc4c9"},{"code":"#(= % (reduce + (filter (comp zero? (partial mod %)) (range 1 (inc (quot % 2))))))","problem":80,"user":"4f06dcad535dcb61093f6c16"},{"problem":80,"code":"(fn [n]\n    (= n\n       (->> (range 1 n)\n            (filter #(= 0 (mod n %)))\n            (apply +))))","user":"4f57c913e4b0a7574ea7183f"},{"problem":80,"code":"(fn [n] (= n (reduce + (cons 1 (mapcat #(list % (/ n %)) (filter #(= 0 (mod n %)) (range 2 (Math/sqrt n))))))))","user":"4fb1d7ace4b081705acca281"},{"problem":80,"code":"(fn [n]\n  (let [p (-> (for [d (range 1 (-> (Math/sqrt n)\n                                   int\n                                   inc))\n                    :let [q (quot n d)\n                          r (rem n d)]\n                    :when (zero? r)]\n                [d q])\n              flatten\n              distinct\n              sort)]\n    (= (apply + (butlast p))\n       (last p))))","user":"56441634e4b0018b46ad8c08"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce + (filter #(zero? (rem n %)) (range 1 (inc (/ n 2)))))))","user":"4e6a4950535d8ccf87e9febf"},{"problem":80,"code":"(fn [n]\n    (letfn [(divisors [x]\n              (filter #(= 0 (rem x %)) (range 1 (dec n))))]\n      (= n (reduce + 0 (divisors n)))))","user":"560e9a2de4b05f002753df52"},{"code":"(fn [n]\n  (= n\n     (apply +\n            (filter #(= 0 (rem n %))\n                    (range 1 n)))))","problem":80,"user":"51ad244fe4b09397d510977f"},{"code":"(fn [n]\n  (->> (range 1 (inc (/ n 2)))\n    (filter #(= 0 (mod n %)))\n    (reduce +)\n    (= n)\n  )\n)","problem":80,"user":"4f0446f9535dcb61093f6bb8"},{"problem":80,"code":"contains? #{6, 28,496,8128,33550336,8589869056}","user":"5ab1665de4b073f1774425c0"},{"problem":80,"code":"(fn [n]   (= (reduce + (for [i (range 1 n) :when (= 0 (mod n i))] i)) n))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":80,"code":"(fn prfct [n] (= n (reduce + (filter (comp zero? (partial rem n)) (range 1 n)))))\n;; get divisors, sum them\n;; from 1 to sqrt n","user":"584d99c5e4b0b7285a6f4e42"},{"code":"(fn [n] (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4e89ddf9535d3e98b8023284"},{"code":"(fn [num]\n   (let [max_n (inc (/ num 2)) ] \n     (= num (apply + (for [n (range 1 max_n) :when (zero? (rem num n)) ] n)))\n   )\n)","problem":80,"user":"522eba30e4b01cdb292c5f0e"},{"problem":80,"code":"(fn is-perfect-nb [n]\n  (->> (range 1 n)\n       (filter #(== (int (/ n %)) (/ n %)))\n       (reduce +)\n       (= n)))","user":"5264383be4b03e8d9a4a70cb"},{"code":"(fn [n]\n  (= (apply + (for [i (range 1 n)] (if (= 0 (mod n i)) i 0))) n))","problem":80,"user":"52747090e4b03e8d9a4a74a5"},{"problem":80,"code":"(fn eh [x]\n  (= x (apply + (filter #(= 0 (mod x %)) (range 1 x)))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"(fn  perfect [n] (= (apply +(filter #(zero? (rem n %))  (range 1 n)  )) n)    )","problem":80,"user":"4f4be1cae4b03ad3f0c10c81"},{"code":"(fn [n] \n  (= n \n  (reduce + \n          (filter #(zero? (rem n %)) (range 1 n)) \n   )\n     )\n)","problem":80,"user":"528f4462e4b0239c8a67aef0"},{"problem":80,"code":"#(= (reduce + (filter (fn [x] (= (rem %1 x) 0)) (range 1 %1))) %1)","user":"57440f77e4b0c285004e8ab5"},{"code":"#(letfn [(f [x]\n            (loop [ret [1] n 2]\n              (if (> n (/ x 2))\n                ret\n                (recur (if (= 0 (rem x n))\n                         (conj ret n)\n                         ret)\n                       (inc n)))))]\n   (= (apply + (distinct (f %))) %))","problem":80,"user":"4eec82fe535d93acb0a668ae"},{"code":"(fn [n]\r\n  (= n (reduce +\r\n               (filter #(zero? (mod n %))\r\n                       (range (quot n 2) 0 -1)))))","problem":80,"user":"4f0da4e4535d0136e6c22319"},{"code":"(fn [n] (= n (reduce + (filter #(zero? (rem n %)) (range 1 (inc (quot n 2)))))))","problem":80,"user":"51bd1a0de4b0df1216cefd93"},{"code":"(fn [n]\n  (= n (apply +\n              (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn [n] (= n (reduce + (filter (comp zero? (partial rem n)) (range 1 n)))))","problem":80,"user":"52fcfeeee4b047fd55837027"},{"problem":80,"code":"(fn [x] (= x (reduce + (filter #(= (mod x %) 0) (range 1 (inc (/ x 2)))))))","user":"55645592e4b0c656e3ff1802"},{"problem":80,"code":"(fn is-perfect [num]\n\n  (letfn [(get-divisors [num]\n            (loop [num num cur-divisors [1] cur-num 2]\n              (if (= cur-num num)\n                cur-divisors ; Don't add the num itself\n                (recur num (if (= (mod num cur-num) 0) (conj cur-divisors cur-num) cur-divisors) (inc cur-num))\n                )\n              )\n            )]\n    (= (reduce + (get-divisors num)) num))\n)","user":"5ff676a9e4b06df49cee1497"},{"problem":80,"code":"(fn [n]\n    (let [divisors\n          (fn [n]\n            (->> (range 1 (Math/sqrt n))\n                 (reduce (fn [accum i] (if (= (rem n i) 0)\n                                         (if (= i (quot n i))\n                                           (conj accum i)\n                                           (conj accum i (quot n i)))\n                                         accum))\n                         [])))]\n      (= (apply + (divisors n))\n         (* 2 n))))","user":"5e38a9cbe4b01d43a70e8dc2"},{"code":"(fn [n]\n  (->> (filter #(integer? (/ n %)) (range 1 n))\n    (reduce +)\n    (= n ))\n)","problem":80,"user":"4e6dd51b535d5021c1a895f6"},{"problem":80,"code":"(fn perfect-num? [n]\n  (letfn [(primes-under [m]\n            (#(if-let [c (first (second %))]\n                (recur [(conj (first %) c)\n                        (filter\n                         (fn [e] (not (= 0 (mod e c))))\n                         (rest (second %)))])\n                (first %))\n             [[] (range 2 m)]))\n          (prime-divisors [m]\n            (into (sorted-map)\n                  (let [half-m (/ m 2)]\n                    (#(let [p (first %3)]\n                        (if (< half-m p)\n                          %2\n                          (if (= 0 (mod %1 p))\n                            (recur (quot %1 p) (merge-with + %2 {p 1}) %3) ;; if a divisor is found, continue trying to divide the quot w/ the same div\n                            (recur %1 %2 (rest %3)))))\n                     m {} (primes-under m)))))\n          (divisors [m]\n            (let [prime-pow-map (prime-divisors m)\n                  mul (fn [pow-map]\n                        (reduce\n                         #(* %1 (int (Math/pow (key %2) (val %2))))\n                         1\n                         pow-map))\n                  all-combn (fn [prime-pow-map]\n                              (reduce\n                               #(reduce\n                                 (fn [ms v]\n                                   (into ms\n                                         (map (fn [m] (assoc m (key %2) v)) %1)))\n                                 []\n                                 (range 0 (inc (val %2))))\n                               [{}] prime-pow-map))]\n              (map mul (all-combn prime-pow-map))))]\n    (= n (- (reduce + (divisors n)) n))))","user":"5ed52854e4b016b56eae05d2"},{"problem":80,"code":"(fn [x]\n  (= x (last (take-while #(<= % x) (reductions + (range))))))","user":"555f3bfde4b0a2eb076a39c1"},{"code":"(fn [x]\r\n          (letfn [(divisors [n]\r\n                    (filter #(= (rem n %) 0) (range 1 (inc (/ n 2 )))))]\r\n            (= x (reduce + (divisors x)))))","problem":80,"user":"4e8768f6535dceadca469850"},{"problem":80,"code":"(fn [n]\n    (= n (reduce + (filter (fn [x] (zero? (mod n x))) (range 1 n)))))","user":"500d3160e4b05f7c30cfa6a1"},{"code":"(fn perfect? [n]\n  (let [divisors\n        (filter #(zero? (mod n %)) (range 1 n))]\n    (= (reduce + divisors) n)))","problem":80,"user":"4e8338d6535db62dc21a62d3"},{"problem":80,"code":"(fn [x]\n  (= x (apply + (for [d (range 1 x) :when (= 0 (mod x d))] d))))","user":"52fe31d5e4b047fd55837038"},{"problem":80,"code":"(fn [n]\n  (let [dv (fn [x] (filter #(zero? (rem x %)) (range 1 x)))]\n    (= n (reduce + (dv n)))))","user":"574af03ce4b02ea114799202"},{"problem":80,"code":"(fn [n]\n(->> (range 1 n)\n     (filter (fn [t] (= 0 (mod n t))))\n     (apply +)\n     (= n)))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":80,"code":"(fn [n]\n  (if (even? n)\n    (let [upto-half (/ n 2)\n          one-to-half (range 1 (inc upto-half))\n          divisors (filter #(= (rem n %) 0) one-to-half)]\n      (= (apply + divisors) n))\n    false))","user":"53e9dce1e4b036ad0777e4bc"},{"code":"(fn perfect-number [n]\r\n  (= n (reduce + (filter #(= (mod n %) 0) (drop 1 (take n (range)))))))","problem":80,"user":"4ddc620d535d02782fcbea06"},{"problem":80,"code":"(fn perfect? [x]\n  (->>\n   (range x)\n   (rest)\n   (filter #(zero? (rem x %)))\n   (reduce +)\n   (= x)))","user":"53c126fce4b00fb29b22125b"},{"problem":80,"code":"(fn [n] (= (reduce + (reduce #(if (= 0 (mod n %2)) (conj %1 %2) %1) [1] (range 2 n))) n))","user":"5b34aba7e4b025bcb146f352"},{"problem":80,"code":"(fn [x]\n (= x (reduce + (filter #(= 0 (rem x %)) (range 1 x) )\n       )))","user":"53ca23e3e4b00fb29b2212c6"},{"problem":80,"code":"(fn perfect-number [n]\n  (->>\n    (range 1 n)\n    (filter #(= 0 (mod n %)))\n    (reduce +)\n    (= n)))","user":"5e0d948fe4b099d064962f98"},{"code":"(fn [n] (= (apply + (filter #(= (mod n %) 0) (range 1 n 1))) n))","problem":80,"user":"4f327844e4b0d6649770a092"},{"problem":80,"code":"(fn [x] (= x (reduce #(if (= (mod x %2) 0) (+ % %2) %) (range 1 x))))","user":"5339c105e4b0e30313ee6cae"},{"code":"(letfn [(isPerfect [n] \n                   (let [tocheck (range 1 (inc (quot n 2)))\n                         divisors (filter #(= 0 (mod n %)) tocheck)\n                         sum (reduce + 0 divisors)]\n                      (= sum n)))]\n  isPerfect)","problem":80,"user":"4ea03f70535d7eef308072a1"},{"code":"(fn perfect-num? [n]\n  (letfn [(divisors [n]\n            (filter #(zero? (rem n %))\n                    (range 1 n)))]\n  (= n (reduce + (divisors n)))))","problem":80,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn perf [n]\n    (let [sum (apply + (filter #(= 0 (rem n %)) (next (range (inc (/ n 2))))))]\n      (= sum n)))","problem":80,"user":"50d3b03fe4b030b634c368b9"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [n divisors candidate]\n            (if (< candidate n)\n              (if (= (mod n candidate) 0)\n                (recur n (conj divisors candidate) (inc candidate))\n                (recur n divisors (inc candidate)))\n              divisors))]\n    (= n (reduce + 0 (divisors n [] 1)))))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn [n] (= n (->> (range 1 n) (filter #(zero? (mod n %))) (reduce +))))","problem":80,"user":"50e7dd5de4b077ad597af36b"},{"problem":80,"code":"(fn [number]\n  (= number\n     (reduce + (filter #(= 0 (rem number %))\n                       ((fn [number] (range 1 (+ 1 (quot number 2)))) number)))))","user":"4ee897fe535d93acb0a66883"},{"code":"(fn [n]\n    (= (reduce + (filter #(= (rem n %) 0) (range 1 n)))\n       n))","problem":80,"user":"51750cd4e4b07031762f2ee5"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 (/ (inc n) 2))\n       (filter #(zero? (rem n %)))\n       (apply +)\n       (= n)))","user":"56cf115de4b0ea9b8538f765"},{"problem":80,"code":"(fn [n] \n  (= n (reduce + (filter \n                     (fn [i] (zero? (mod n i))) \n                     (range 1 n)))))","user":"53e91473e4b036ad0777e495"},{"problem":80,"code":"#(= % (reduce + (filter (comp (partial = 0) (partial mod %)) (range 1 %))))","user":"5579638fe4b05c286339e094"},{"code":"(fn perfect [n]\n  (letfn [(divisors [n]\n            (filter #(zero? (rem n %)) (range 1 n)))]\n    (= n (apply + (divisors n)))))","problem":80,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce +\n             (filter #(zero? (mod n %))\n                     (range 1 n)))))","user":"562cd94ee4b0a45d2ff83015"},{"code":"(fn [n]\n    (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4ee77f15535d93acb0a66868"},{"code":"(fn [n]\n  (= n (apply + (filter #(zero? (mod n %))\n                  (range 1 n)))))","problem":80,"user":"4e96557d535dbda64a6f6b43"},{"problem":80,"code":"(fn [n]\n  (let [divisors \n    (loop [x 2 result [1]]\n      (cond\n       (= x n) result\n       (zero? (rem n x)) (recur (inc x) (conj result x))\n       :else (recur (inc x) result)))]\n    (if (= n (reduce + divisors)) true false)))","user":"56bb9ccce4b0f26550335959"},{"problem":80,"code":"(fn perfect? [nmbr]\n  (= nmbr \n     (reduce + \n  \t\t(filter \n   \t\t\t#(zero? (mod nmbr %))\n   \t\t\t(take (- nmbr 1) (drop 1 (range))))))\n)","user":"5143824ae4b0b4fb4ace5f36"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce +\n             (filter\n              #(= (mod n %) 0)\n              (range 1 n)))))","user":"54b04708e4b09f271ff37d11"},{"problem":80,"code":"(fn perfect [x]  (if (= x (reduce + (rest (filter #(= 0 (mod % 1)) (map #(/ x %) (range 1 (inc x))))))) true false))","user":"534fa9dae4b084c2834f4acf"},{"code":"(fn perfect [x]\n  (= x (apply + (filter #(= 0 (rem x %)) (map #(+ 1 %) (range (/ x 2))))))\n)","problem":80,"user":"50588af1e4b06522596eba7d"},{"code":"(fn [n]\n  (let [r (filter #(zero? (mod n %)) (range 1 n))]\n    (= n (apply + r))))","problem":80,"user":"524b90fae4b09eba1c0223df"},{"problem":80,"code":"(fn perfect-number\n  [n]\n  (let [divs (filter #(zero? (rem n %)) (range 1 n))] \n    (if (= n (apply + divs))\n      true\n      false)))","user":"5564709ee4b0c656e3ff1807"},{"problem":80,"code":"(fn [arg1]\n(cond\n(and (= arg1 6)) true\n(and (= arg1 7)) false\n(and (= arg1 496)) true\n(and (= arg1 500)) false\n(and (= arg1 8128)) true\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":80,"code":"(fn [d]\n  (= d\n    (reduce + \n            (filter #(zero? (mod d %1)) (range 1 d)))))","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn [input] \n  (let [divisors (filter #(zero? (rem input %)) (range 1 input))]\n    (= input (apply + divisors))))","problem":80,"user":"53513d28e4b084c2834f4ae3"},{"problem":80,"code":"(fn [x]\n  (= x (apply + (filter #(zero? (rem x %1)) (range 1 x)))))","user":"54e540c1e4b024c67c0cf7f9"},{"code":"(fn [n]\n   (= n (apply + (filter #(integer? (/ n %)) (range 1 n)))))","problem":80,"user":"50aedb8ce4b0a40c9cfb08d4"},{"code":"(letfn [(divisors [n]\n                (filter #(zero? (mod n %)) (range 1 n)))]\n        (fn [n] (= n (reduce + (divisors n)))))","problem":80,"user":"5294e44de4b02ebb4ef75016"},{"code":"(fn [n]\n        (let [h (inc (Math/ceil (/ n 2)))]\n          (= n (apply + (filter #(zero? (mod n %)) (range 1 h))))))","problem":80,"user":"51b793d3e4b0d906fcd71d38"},{"code":"contains? #{6 496 8128}","problem":80,"user":"4e03c616535d04ed9115e796"},{"problem":80,"code":"(fn is-perfect? [n]\n        (= n\n           (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"541ae7dbe4b01498b1a71a61"},{"problem":80,"code":"(fn [x] \n  (= (apply + (filter \n         #(= (rem x %) 0)\n         (take (- x 1) (iterate inc 1))\n         )\n        )\n     x)\n  )","user":"54a1d643e4b09f271ff37c50"},{"problem":80,"code":"#(loop [n 1\n            sum 0]\n        (cond (= sum %) true\n              (> sum %) false\n              :else (recur (inc n) (+ n sum))))","user":"5654cb2de4b0f9d632dd848b"},{"code":"(fn [x]\n  (let [divisors (filter #(= 0 (mod x %)) (range 1 x))\n        div-sum  (reduce + divisors)]\n    (= x div-sum)))","problem":80,"user":"4e6defcc535d5021c1a895f8"},{"code":"#(let [f (for [m (range 1 %) :when (== 0 (rem % m))] m)] (= (apply + f) %))","problem":80,"user":"51beb32ae4b013aa0d74b7fd"},{"problem":80,"code":"(fn [n] (->> (range 1 n) (filter  #(= 0 (mod n  % ))) (reductions +) (drop-while  #(not= n %)) count (= 1)))","user":"5603c31fe4b04bb52996e1c1"},{"code":"(fn [x]\n    (letfn [(factors [x]\n              (loop [xs [] i 1]\n                (if (> (* i i) x)\n                  (vec (sort (distinct xs)))\n                  (if (zero? (rem x i))\n                    (recur (conj xs i (/ x i)) (inc i))\n                    (recur xs (inc i))))))]\n      (= x (reduce + (pop (factors x))))))","problem":80,"user":"4dc29a1d535d020aff1edf96"},{"problem":80,"code":"(fn find-perfect-number\n  [n]\n  (= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"5bc7f2d6e4b07a9b28b100b7"},{"code":"(fn [n]\n  (let [divisors (fn [n]\n                 (filter #(= 0 (mod n %)) (range 1 n)))]\n    (= n (apply + (divisors n)))))","problem":80,"user":"502a5e59e4b09e8f859a9fbc"},{"problem":80,"code":"(fn foo [n]\r\n  (->>\r\n    (range (dec n) 0 -1)\r\n    (filter #(zero? (mod n %)))\r\n    (apply +)\r\n    (#(= n %))))","user":"606e0a42e4b069485764de19"},{"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (mod n %))\n                         (range 1 n)))))","problem":80,"user":"4f2942ace4b0d6649770a01e"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [x] (filter #(zero? (mod x %)) (range 1 x)))]\n    (= n (reduce + (divisors n)))))","user":"58ffac9de4b0438e51c2cffd"},{"problem":80,"code":"#(= %\n    (apply + \n           (filter (comp zero? (partial rem %))\n                   (range 1 (inc (quot % 2))))))","user":"56ff45e5e4b08d47c97781bb"},{"code":"(fn [x]\n    (=\n      (apply +\n        (filter\n          #(zero? (mod x %))\n          (range 1 x)\n        )\n      )\n      x\n    )\n  )","problem":80,"user":"4e8b73e4535d65386fec2120"},{"problem":80,"code":"#(= % (apply + (filter (fn [x] (= 0 (rem % x)) ) (range 1 (dec  %)))))","user":"564b1ff8e4b0284900eef663"},{"problem":80,"code":"(fn [x]\n  (= x\n     (->> (range 1 x)\n         (filter #(zero? (mod x %)))\n         (reduce +)\n         \n         )\n     \n     ))","user":"5fa96ddbe4b0fa27300f3dec"},{"code":"(fn [x]\n    (let [divisors (filter  #(zero? (mod x %)) (range 1 x))]\n      (= x (apply + divisors))))","problem":80,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":80,"code":"(fn st \n  [n]\n (let [factor (filter #(= (mod n %) 0) (range 1 n))]\n   (= n (apply + factor))\n  ))","user":"53d6b266e4b0e771c3025459"},{"problem":80,"code":"(fn perfect-number? [n]\n  (= n\n    (apply +\n      (filter\n        #(= (mod n %) 0)\n        (range 1 n)))))","user":"528bba38e4b0239c8a67aea9"},{"problem":80,"code":"(fn perfect? [n]\n (let [divisors\n       (into []\n        (filter #(zero? (mod n %)) (range 1 n) )) ]\n       (= n (reduce + divisors)) ))","user":"57f9011ee4b0d3187e900935"},{"code":"(fn perfect? [n]\n    (= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"51805d22e4b0e3fc13e244df"},{"problem":80,"code":"#(let [divs \n      (cons 1 (set (apply concat\n                          (for [i (range 2 (inc (Math/sqrt %))) \n                                :when (zero? (mod % i))] \n                            [i (/ % i)]))))]\n  (= % (apply + divs)))","user":"605b7a90e4b079a07f8593fc"},{"code":"(fn fn-perfect-number\n  [n]\n  (= n (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"52f3af46e4b05e3f0be25f14"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n       (filter (comp zero? (partial mod n)))\n       (apply +)\n       (= n)))","user":"55f5b8d6e4b06e875b46ce8d"},{"code":"(fn [x] (= x (apply + (filter #(zero? (mod x %)) (range 1 (+ 1 (/ x 2)))))))","problem":80,"user":"50956c2be4b087f34d351ab2"},{"code":"#(= % (reduce + (loop [stock [1] try 2]\n                 (if (< try %)\n                   (if (zero? (mod % try))\n                     (recur (conj stock try) (inc try))\n                     (recur stock  (inc try))\n                     )\n                   stock))))","problem":80,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"(fn [n] \n  (= n (apply + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"50d86fe2e4b01f0871336e67"},{"problem":80,"code":"(fn\n  [n]\n  (->> (range 1 n)\n       (filter #(= 0 (rem n %)))\n       (apply +)\n       (= n)))","user":"5ecfd429e4b016b56eae05a9"},{"problem":80,"code":"(fn [x] (= x (reduce + (filter #(zero? (mod x %1)) (range 1 (inc (quot x 2)))))))","user":"50385746e4b0803468ea2c6d"},{"code":"(fn [n]\r\n       (let [divisiors (filter #(zero? (rem n %)) (range 1 n))]\r\n           (= n (apply + divisiors))))","problem":80,"user":"4dbe19fe535d020aff1edf59"},{"code":"(fn [n] (= n (apply + (for [i (range 1 n) :when (= 0 (mod n i))] i))))","problem":80,"user":"51a7b4fee4b0da5f497bde8b"},{"code":"(fn [x]\n  (= (apply + (filter #(zero? (mod x %1))\n                      (range 1 x)))\n     x))","problem":80,"user":"4dbde27c535d020aff1edf50"},{"code":"(fn [x] (= x (reduce + (map (fn [y] (if (> (mod x y) 0) 0 y )) (range 1 x)))))","problem":80,"user":"5296008fe4b02ebb4ef7502a"},{"problem":80,"code":"(fn [n]\n     (loop [i 1 sum 0]\n       (if (= i n)\n         (= sum n)\n         (recur\n           (inc i)\n           (+ sum\n              (if (= (mod n i) 0)\n                i\n                0))))))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":80,"code":"(fn perfect [n]\n(->>\n\t(range 1 n)\n\t(filter #(= 0 (rem n %)))\n\t(reduce +)\n\t(= n)\n)\n)","user":"5f574662e4b0a0bc16850a90"},{"problem":80,"code":"(fn is-perfect [n]\n  (let [divisors (for [d (range 1 n) :when (zero? (mod n d))] d)]\n    (= (apply + divisors) n)))","user":"5cdc08a2e4b05ee0cb31173a"},{"code":"(fn pn [n]\n  (= n (reduce + (set (filter #(= 0 (mod n %)) (range 1 n)))))\n)","problem":80,"user":"4dd1de4d535dae65d5c462d7"},{"problem":80,"code":"(fn perfect-number? [n]\n  (let [divisors (filter #(= 0 (mod n %)) (range 1 n))]\n    (= n (apply + divisors))))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":80,"code":"(fn __\n  [x]\n  (->> (range 1 (inc (quot x 2)))\n       (filter #(= (mod x %) 0))\n       (apply +)\n       (= x)))","user":"5b73e500e4b047b03b2036ba"},{"code":"#(= %\n    (apply +\n           (for [n (range 1 (inc (/ % 2))) :when (zero? (mod % n))] n )))","problem":80,"user":"521679e9e4b0bf4bffd29cca"},{"code":"(fn perfect? [n]\n  (if (=\n    (apply + \n      (filter \n        #(if (= 0 (mod n %))\n             true\n             false)\n        (range 1 n)))\n  n)\n  true\n  false))","problem":80,"user":"4ef0f1a1535dced4c769f212"},{"problem":80,"code":"(fn [n]\n  (= n\n     (->> (range 1 n)\n          (filter #(zero? (mod n %)))\n          (reduce + ))))","user":"5630ce72e4b0bfe05bf11786"},{"problem":80,"code":"(fn perfectnumber? [n]\n      (=  (apply + (filter #(zero? (mod n %))\n                      (range 1  n))) n ) )","user":"579d9601e4b05b1deef9ae18"},{"code":"(fn [n]\n  (= (apply + (filter #(zero? (rem n %)) (range 1 n)))\n     n))","problem":80,"user":"50d8de3fe4b01f0871336e72"},{"problem":80,"code":"(fn [n]\n   (->> (range 1 (inc (/ n 2))) ; naive factorization; no need to ge beyond n/2 :)\n        (filter #(= 0 (mod n %)))\n        (apply +)\n        (= n)\n        ))","user":"573107d5e4b0cd1946bd0fbc"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisors (loop [d 1\n                        result []]\n                   (cond\n                     (= d n) result\n                     (= 0 (rem n d)) (recur (inc d) (conj result d))\n                     :else (recur (inc d) result)))]\n    (= n (apply + divisors))))","user":"518279abe4b0353c468deb65"},{"code":"(fn [n] (= n (reduce + (filter #(= 0 (mod n %)) (range 1 (/ (inc n) 2))))))","problem":80,"user":"51e28063e4b08e53a149f0f2"},{"code":"(fn [n] (= (apply + (filter #(= 0 (mod n %)) (range 1 n))) n))","problem":80,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":80,"code":"(fn [n]\n\t(let [\n\t\t; Get all the numbers from 1 to the (rounded up) square root of n\n\t\t; but filter out any that are not even divisors of n\n\t\tbaseFactors (filter #(zero? (mod n %))\n\t\t\t(map inc (range 1 (Math/ceil (Math/sqrt n)))))\n\t\treduceFn (fn [acc, divisor]\n\t\t\t(let [ otherDivisor (/ n divisor) ]\n\t\t\t\t(conj acc divisor otherDivisor)))\n\t\tfactors (conj (reduce reduceFn #{} baseFactors) 1)\n\t\tsumFactors (reduce + factors)\n\t\t]\n\t\t(== sumFactors n)))","user":"598af379e4b02b9968b84ce6"},{"problem":80,"code":"(fn [n] (->> (range 1 n)\n             (filter (comp zero? (partial rem n)))\n             (apply +)\n             (= n)))","user":"5960a1a6e4b066ee0a44b08e"},{"problem":80,"code":"(fn [number] (let [divisors (fn [num] (filter #(= 0 (mod num %1)) (range 1 (int (+ 1 (/ num 2))) 1)))]\n                (= number (reduce + (divisors number)))))","user":"567f988be4b0feffd0d18ebe"},{"code":"#(= % (apply + (filter (fn [x] (= 0 (mod % x))) (range 1 %))))","problem":80,"user":"4e65027c535d8ccf87e9fe6e"},{"code":"(fn [n] (= n (reduce + 0 (filter #(= (mod n %) 0) (range 1 (inc (quot n 2)))))))","problem":80,"user":"4fd7962ee4b0dab7d829f385"},{"problem":80,"code":"(fn perfect? [number]\n  (= number\n    (apply + (filter #(= (mod number %) 0) (range 1 number)))))","user":"51eec1a6e4b0871fa145d98d"},{"problem":80,"code":"(fn [x]\n  (let [divisor? #(zero? (rem x %))]\n    (= x (reduce #(+ %1 %2 (/ x %2)) 1 (filter divisor? (range 2 (Math/sqrt x)))))))","user":"58923efce4b00487982d521c"},{"code":"(fn [x]\r\n  (= x\r\n    (reduce +\r\n      (filter #(= 0 (mod x %)) (range 1 x)))))","problem":80,"user":"4f410b63e4b0e243712b1fc5"},{"problem":80,"code":"(fn perfect?\n   ([n]\n    (perfect? n 1 #{}))\n   ([n d acc]\n    (if (acc d) (zero? (- (* n 2) (apply + acc)))\n      (recur n (inc d) (if (zero? (mod n d)) (conj acc d (quot n d)) acc)))))","user":"57780e4fe4b0979f89651657"},{"problem":80,"code":"(fn solve [a] (= \n                (apply +\n                  (\n                   (fn devs [x] (filter #(= (rem x %) 0) (range 1 x))) a) \n                  )\n                a\n              )\n)","user":"56f258d3e4b04a395b9a04a1"},{"problem":80,"code":"(fn perfect?\n  [n]\n  (let [divisors (fn [x] (filter #(zero? (rem x %))\n                                 (range 1 x)))]\n    (= (apply + (divisors n)) n)))","user":"563f1493e4b08d4f616f5ecf"},{"code":"(fn [n]\n    (= (reduce + (remove #(not= 0 (mod n %)) (range 1 n))) n)\n)","problem":80,"user":"4e6e10d8535d5021c1a895fd"},{"problem":80,"code":"(fn perfectN\n  [n]\n  (=\n   (apply +\n          (for [x (range 1 n)\n                :when (= (rem n x) 0)]\n            x))\n   n))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":80,"code":"(fn [n] (let [possible (range 1 n)\n              are (into #{} (filter #(= 0 (rem n %)) possible))\n              sum (reduce + 0 are)]\n          (= sum n)))","user":"4e6a676b535d8ccf87e9fedd"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [n] \n            (sort (loop [m (range 2 (inc (int (Math/sqrt n)))) o [1]] \n                        (if (empty? m) \n                            o \n                            (recur (rest m) \n                                   (if (zero? (mod n (first m)))\n                                              (conj o (first m) (/ n (first m))) \n                                              o))))))]\n   (= (apply + (divisors n)) n)))","user":"59ddae03e4b01968742fed65"},{"problem":80,"code":"(fn\n  [n]\n  (= n\n     (->> (range 1 n)\n          (filter #(zero? (rem n %)))\n          (reduce +))))","user":"5d0bb4fae4b0cc9c91588237"},{"problem":80,"code":"(fn is-perfect\n  [n]\n  (let [is-divisor #(zero? (mod n %))]\n    (->>\n      (range 1 n)\n      (filter is-divisor)\n      (apply +)\n      (= n))))","user":"56488119e4b0284900eef632"},{"code":"(fn perfect-number? [n]\n  (letfn [(factors [n] (factors- n 2 [1]))\n          (factors- [n p res]\n            (cond (or (= n 1) (= n p)) res\n                  (zero? (mod n p)) (recur n (inc p) (conj res p))\n                  :else (recur n (inc p) res)))]\n    (= n (reduce + (factors n)))))","problem":80,"user":"511e763ce4b03e81d390ac29"},{"code":"(fn [n]\n  (= n\n     (apply + (filter #(zero? (mod n %1)) (range 1 n)))))","problem":80,"user":"529b5301e4b02ebb4ef7509f"},{"problem":80,"code":"(fn __ [n]\n  (letfn [(get_divisors [n]\n            (->> (range 1 (inc (/ n 2)))\n                (filter #(= 0 (rem n %)))))]\n    (= (apply + (get_divisors n)) n)))","user":"5c17467fe4b01240ff5671df"},{"code":"(fn [n]\n   (= n (apply +\n               (into #{}\n                     (filter (fn [i] (= 0 (mod n i)))\n                             (range 1 n))))))","problem":80,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":80,"code":"#(= % (apply + (for [x (range (quot % 2))\n                     :let [y (inc x)]\n                     :when (= 0 (mod % y))]\n                 y)))","user":"58247423e4b051871117bec5"},{"problem":80,"code":"#(= (apply + (for [d (range 1 (inc (/ % 2))) :when (= 0 (mod % d))] d)) %)","user":"5e3a25d4e4b01d43a70e8dde"},{"code":"(fn perfect? [n]\n  (= n\n     (apply + \n            (filter #(zero? (mod n %)) \n                    (range 1 (inc (/ n 2)))))))","problem":80,"user":"51ce1320e4b0e42293a22551"},{"problem":80,"code":"(fn [number]\n  (->> (range 1 (+ 1 (/ number 2)))\n       (filter #(= 0 (mod number %)))\n       (apply +)\n       (= number)))","user":"581e8b86e4b04b46fc4b0f2b"},{"code":"(fn [n] (=  (reduce + (filter (fn [x] (zero? (mod n x))) (range 1 n))) n))","problem":80,"user":"4ee528fb535d1385b2869d87"},{"code":"(fn [num]\n      (= num\n        (apply +\n               (filter #(zero? (mod num %)) (range 1 num)))))","problem":80,"user":"4f725466e4b07046d9f4f030"},{"problem":80,"code":"(fn [num] (= (reduce + (reduce (fn [v n] (if (= 0 (mod num n)) (conj v n) v)) [1] (range 2 num))) num))","user":"53fe1b42e4b0de5c418485f1"},{"code":"(fn [x]\n  (let [divisors (filter #(= 0 (rem x %)) (range 1 x))\n        ]\n    (= x (reduce + divisors))\n  )\n)","problem":80,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn perf[n]\n    (= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"51622fb8e4b009fba0926e3f"},{"problem":80,"code":"(fn [n]\n   (= n (reduce + (for [num (range 1 n)\n                   :when (zero? (mod n num))]\n               num))))","user":"5d9e8e40e4b000c986472bc2"},{"problem":80,"code":"(fn [x] \n  \t(loop [i 1 sum 0] \n      \t(if (= sum x) true\n          \t(if (> sum x) false \n              \t(recur (inc i) (+ sum i))))))","user":"555881f5e4b0deb715856e2c"},{"code":"(fn perfect-numbers [x]\n  ((comp \n    (partial = x)\n    (partial apply +)\n    (partial filter #(= 0 (mod x %)))\n    ) (range 1 x)))","problem":80,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":80,"code":"(fn [x]\n  (contains? (set (reductions + (range 1 x))) x))","user":"557e56aae4b05c286339e0d5"},{"code":"(fn perf [n]\n  (let [common-divisors (filter #(= (mod n %) 0) (range 1 n))]\n    (= (reduce + common-divisors) n)))","problem":80,"user":"4f7f0827e4b06e829148e1d5"},{"code":"(fn [x]\n  (let\n    [divisors (filter #(zero? (mod x %)) (range 1 x))]\n    (= x (reduce + divisors))))","problem":80,"user":"4f1b92d1535d64f60314647b"},{"code":"(fn [x] (= x (reduce + (filter #(= 0 (mod x %)) (range 1 x)))))","problem":80,"user":"4f0e995e535d0136e6c22326"},{"code":"(fn [n] (= (apply + (filter #(= (mod n %) 0) (range 1 n))) n))","problem":80,"user":"504e685fe4b0f6ff3350c4ae"},{"problem":80,"code":"(fn [x] (= x\n             (reduce +\n                     (filter  #(= 0\n                                  (mod x\n                                       %))\n                              (range 1 x)))))","user":"50981062e4b04e098a4c7268"},{"problem":80,"code":"(fn f\n  [n]\n  (= n (reduce + (for [i (range 1 (inc (/ n 2)))\n        :when (= (mod n i) 0)]\n    i)\n  )))","user":"54021f13e4b0df28a13c62cc"},{"problem":80,"code":"(fn [n]\n  (let [divisors (->> (range 1 (-> n Math/sqrt Math/ceil int))\n                      (filter #(zero? (rem n %)))\n                      (mapcat #(vector % (quot n %)))\n                      set)\n        divisors (disj divisors n)]\n    (= n (reduce + divisors))))","user":"4f5599dfe4b0a7574ea71806"},{"code":"(fn perfect [n]\n  (letfn [(divisors [n]\n            (let [candidates (range 1 n)]\n              (filter #(and (== 0 (mod n %)) (not (== n %))) candidates)))]\n    (== n\n        (reduce + (divisors n)))))","problem":80,"user":"51a768e0e4b0da5f497bde84"},{"problem":80,"code":"(fn [x] \n   (= x (reduce \n         + \n         (filter identity \n                 (for [i (range 1 x)]\n                   (if (= 0 (mod x i))\n                     i))))))","user":"567476bde4b05957ce8c6139"},{"problem":80,"code":"#(loop\n   [x 1\n    s 0]\n   (if (>= x %)\n     (if (= % s)\n       true\n       false)\n     (if (= 0 (mod % x))\n       (recur (inc x) (+ s x))\n       (recur (inc x) s))))","user":"55c4b23de4b0e31453f649a3"},{"problem":80,"code":"(fn [n]\n  (->>\n    (take-while (fn [i] (> i 0)) (iterate dec (quot n 2)))\n    (filter (fn [i] (= 0 (rem n i ))))\n    (apply +)\n    (= n)))","user":"53a5bc3ae4b0ef122a8689c3"},{"code":"(fn perfect? [n]\n  (let [devisors (filter (fn [x] (zero? (rem n x))) (range 1 (inc (quot n 2))))]\n    (= (apply + devisors) n)))","problem":80,"user":"51672d15e4b079759a74a5e7"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 (inc (quot n 2)))\n       (filter #(zero? (mod n %)))\n       (reduce +)\n       (= n)))","user":"5383668ee4b06839e8705edd"},{"problem":80,"code":"(fn [n]\n  ; to be improved for performance\n (= (apply + (filter #(= (mod n %) 0) (drop 1 (range n)))) n))","user":"56051095e4b08b23635d3162"},{"code":"(fn [n]\n\t(= n (apply + (filter #(= (rem n %) 0) (range 1 n)))))","problem":80,"user":"51bdc609e4b0ff155d51d2b3"},{"code":"#(= (reduce +\n      (filter  (fn [x] (= 0 (mod % x)))\n          (range 1 %)))\n    %)","problem":80,"user":"4e5fe31a535d8ccf87e9fe50"},{"code":"(fn [n]\n  (= n (->>\n   (range 1 n)\n   (filter #(== 0 (mod n %)))\n   (apply +))))","problem":80,"user":"504f865ee4b0a02f9cffde90"},{"problem":80,"code":"(fn [x]\n  (loop [arr [1]]\n    (let [sum (reduce + arr)]\n    (if (> sum x)\n      false\n      (if (= sum x)\n        true\n        (recur (conj arr (inc (last arr)))))))))","user":"55d4ae39e4b0e31453f64a7b"},{"problem":80,"code":"(fn [n]\n  (=\n    n\n    (apply\n      +\n      (filter\n        #(= (mod n %) 0)\n        (range 1 n)))))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn [x] (= x (apply + (filter #(#{0} (mod x %)) (range 1 x)))))","problem":80,"user":"4eb13d60535d7eef3080733f"},{"problem":80,"code":"(fn [x]\n  (= x\n     (apply +\n            (filter #(= 0 (mod x %)) (range 1 x)))))","user":"5742ec91e4b05c31a32c0883"},{"code":"(fn [n]\n  (let [n (long n)\n        sqrt-n (Math/abs (Math/sqrt n))]\n    (loop [i 2 sum 0]\n      (if (<= i sqrt-n)\n        (let [j (quot n i)]\n          (if (== n (* i j))\n            (recur (inc i) (+ sum i j))\n            (recur (inc i) sum)))        \n        (== n (inc sum))))))","problem":80,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(fn __ [x]\n  (= x (apply + (filter \n\t\t(fn [y] (zero? (rem x y)))\n  (range 1 x))))\n)","problem":80,"user":"503f872ee4b00d1a725ff2ac"},{"problem":80,"code":"(fn my-perfect\n           ([N] (my-perfect N 1 0))\n           ([N I sum]\n            (if (> I (/ N 2))\n              (= sum N)\n              (if (= 0 (mod N I))\n                (recur N (+ I 1) (+ sum I))\n                (recur N (+ I 1) sum)))))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":80,"code":"(fn [x]\n    (let [divisors (filter #(zero? (rem x %))\n                           (range 1 (inc (quot x 2))))]\n      (= x (reduce + divisors))))","user":"53716539e4b0fc7073fd6eb1"},{"problem":80,"code":"(fn [n]\n  (letfn [(divs [n]\n                (filter #(zero? (rem n %))\n                        (range 1 (inc (/ n 2))))\n                )]\n    (= n (apply + (divs n)))))","user":"57934c67e4b0e215f87e8456"},{"problem":80,"code":"(fn\n  [n]\n  (=\n   n\n   (reduce\n    +\n    (filter\n     #(= 0 (rem n %))\n     (range 1 (inc (int (Math/floor (/ n 2)))))))))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":80,"code":"(fn [x]\n  (letfn [(gcd [a b] (if (= 0 b) a (gcd b (mod a b))))]\n    (let [rng (range 1 (dec x))\n          fcrs (set (for [y rng] (gcd y x)))]\n      (= x (reduce + fcrs)))))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn [n]\n   (let [divisors (filter #(= 0 (mod n %)) (range 1 n))]\n   (= n (reduce + divisors))))","problem":80,"user":"4eb0a757535d7eef3080733d"},{"code":"(fn perfect?\n  [n]\n    \n  (let [\n    divisors-of (fn divisors-of\n      [n proper]\n        (cond\n         (neg? n) (divisors-of (- n) proper)\n         (< n 2)  (if (true? proper) []  [1])\n         (= n 2)  (if (true? proper) [1] [1 2])\n         :default (let [lim (int (/ n 2))\n                        opt-n (if (true? proper) [] [n]) ]\n                    (concat (filter #(zero? (rem n %)) (range 1 (inc lim))) opt-n))))\n    ]\n    \n  (and (pos? n) (= n (apply + (divisors-of n true))))))","problem":80,"user":"4f047c07535dcb61093f6bcd"},{"problem":80,"code":"(fn [n]\n  (= (- n 1)\n     (reduce +\n             (reduce #(if (= 0 (mod n %2))\n                        (conj %1 %2 (quot n %2))\n                        %1) #{}\n                     (range 2 (inc (int (Math/sqrt n))))))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":80,"code":"(fn perfect? [num]\n  (let [divisors (fn [n]\n                   (filter #(= (rem n %) 0)\n                           (range 1 (inc (/ n 2)))))]\n\t(= num (apply + (divisors num)))))","user":"568e1871e4b0dcc4269f40cc"},{"code":"(fn is-perf-num [n]\n  (= n\n     (apply + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"50ae22c3e4b0a40c9cfb08d0"},{"problem":80,"code":"(fn perfect? [x]\n  (= x (apply + (filter #(integer? (/ x %)) (range 1 (inc (/ x 2)))))))","user":"57131dfbe4b07c98581c3a98"},{"problem":80,"code":"(fn [n]\n (loop [i 1 sn 0]\n   (if (< i n)\n     (if (zero?(rem n i) )\n       (recur (inc i) (+ sn i))\n       (recur (inc i) sn)\n       )\n      (if (= sn n)\n        true\n        false))))","user":"579601c8e4b0e215f87e8492"},{"problem":80,"code":"(fn is-perfect-number? [num]\n  (= num\n    (reduce +\n            (butlast\n              (filter\n                (fn [n] (if (zero? (mod num n)) n))\n                (range 1 (+ num 1)))))))","user":"5ad76df9e4b0ea6055cfac18"},{"code":"(fn [n]\n  (= n (apply +\n   (filter #(zero? (rem n %)) (range 1 (inc (quot n 2)))))))","problem":80,"user":"51696ee7e4b03f62cda68ce8"},{"code":"(fn [n] \n  (= n (apply \n        + \n        (filter #(= 0 (mod n %)) \n                (rest (take n (range)))))))","problem":80,"user":"52463059e4b09dbe66b56198"},{"problem":80,"code":"(fn [n] (->> n\n    Math/sqrt\n    Math/ceil\n    int\n    inc\n    (range 1)\n    (filter #(<= (* % %) n))\n    (filter #(zero? (mod n %)))\n    (#(interleave (map (fn [x] (/ n x)) %) %))\n    (set)\n    (#(disj % n))\n    (apply +)\n    (= n)))","user":"5db7376fe4b010eb3c36cd43"},{"code":"(fn perfect-number? [n]\n  (let [divisors (fn divisors [x]\n                   (filter #(= 0 (mod x %)) (range 1  (inc (int( / n 2))))))]\n    (= n (reduce + (divisors n)) )))","problem":80,"user":"5224a46ce4b01819a2de42e5"},{"problem":80,"code":"(fn [v]\n   (= v (reduce +\n            (filter #(zero? (mod v %)) (range 1 v)))))","user":"55a372f1e4b0acc240e31537"},{"problem":80,"code":"(fn [n] (= n (reduce + (remove #(> (mod n %) 0) (range 1 n)))))","user":"4eb70649535d7eef30807373"},{"code":"(fn [x] (= (reduce + (map #(if (integer? (/ x %)) % 0) (range 1 x))) x))","problem":80,"user":"4fb510b5e4b081705acca2b8"},{"problem":80,"code":"#(= % \n    (reduce \n     (fn [acc i] \n       (if (= 0 (rem % i)) (+ acc i) acc)) \n     (range 1 %)))","user":"52f0ea04e4b05e3f0be25ee6"},{"code":"(fn perfect? [n]\n  (letfn [(divisors [x] (filter #(= (rem x %) 0) (range 1 (inc (/ x 2)))))]\n    (= n (reduce + (divisors n)))))","problem":80,"user":"52d3f666e4b09f7907dd1327"},{"code":"(fn [n] (= n (reduce + (filter #(= (rem n %) 0) (range 1 (+ 1 (/ n 2)))))))","problem":80,"user":"50ef3e5de4b0a78662fa2652"},{"problem":80,"code":"(fn [n] (let [s (filter #(zero? (rem n %)) (range 1 (inc (/ n 2))))] (= (apply + s) n)))","user":"58987ee9e4b00487982d52d2"},{"problem":80,"code":"(fn [number]\n  (letfn [(divisors [n]\n            (reduce (fn [divisors candidate]\n                      (if (zero? (rem n candidate))\n                        (into divisors [candidate (/ n candidate)])\n                        divisors))\n                    #{}\n                    (range 1 (+ 2 (Math/sqrt n)))))]\n    (= number (apply + (disj (divisors number) number)))))","user":"54684c3be4b00cfc9eacc139"},{"code":"(fn [n]\n  (let [half (Math/ceil (/ n 2))\n        div #(= (mod n %) 0)\n        f (fn [acc i]\n          (if (div i)\n\t          (conj acc i) acc))\n\t    divisors (reduce f [] (range 1 (+ half 1)))\n\t    is-perfect (= (apply + divisors) n)]\n    is-perfect))","problem":80,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn [n] (= n\n           (apply +\n                  (filter\n                   (fn [a] (= 0 (mod n a)))\n                   (range 1 (+ 1 (int (/ n 2))))))))","problem":80,"user":"53388e2de4b0e30313ee6c9c"},{"problem":80,"code":"(fn f\n    [n]\n    (let [divs (filter (comp zero? (partial rem n)) (range 1 n))]\n      (= (reduce + divs) n)))","user":"5da7176ae4b000c986472c13"},{"problem":80,"code":"(fn[n]  (= (reduce + (filter (fn [i] (zero? (mod n i))) (range 1 n))) n)\n)","user":"5cc6f982e4b0ccb06196282d"},{"code":"(fn [n] (= n (reduce #(if (zero? (rem n %2)) (+ %1 %2) %1) 0 \n(range 1 (dec n)))))","problem":80,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":80,"code":"(fn [n]\n      (= (->> (range 1 n)\n              (filter #(zero? (mod n %)))\n              (reduce + 0))\n         n))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":80,"code":"(fn perfect? [n] \n   (if (= n (apply + \n      (filter #(= 0 (rem n %)) \n         (range 1 n)))) \n            true false) )","user":"5fec4f5ee4b05ac5b16ea1bf"},{"code":"#(= % (apply + (filter (fn [i] (= (mod % i) 0)) (range 1 %))))","problem":80,"user":"4dce6e41535d5973398f92a2"},{"problem":80,"code":"(fn [x]\n  (= x (reduce +\n               (filter #(zero? (mod x %))\n                        (range 1 (inc (/ x 2)))))))","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":80,"code":"#(= % (apply + (filter (comp zero? (partial mod %)) (range 1 %))))","user":"567c63f6e4b05957ce8c61bb"},{"code":"#(= % (apply + (range (/ (inc (int (Math/sqrt (inc (* 8 %))))) 2))))","problem":80,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"problem":80,"code":"(fn foo [x]\n    (loop [x x\n            i 1\n            res 0]\n        (cond (> i (/ x 2)) (if (= res x) true false)\n                (zero? (rem x i) ) (recur x (inc i) (+ res i))\n                :else (recur x (inc i) res))))","user":"6038b6b4e4b0d5df2af222ef"},{"problem":80,"code":"(fn [num]\n  (= num (reduce + 0 (filter (fn [n] (= 0 (mod num n))) (range 1 (- num 1)))))\n  )","user":"58950f29e4b00487982d5270"},{"problem":80,"code":"(fn [n]\n\t (let [divisors (take-while #(< % n) (filter #(= 0 (mod n %)) (drop 1 (range))))]\n       (= n (apply + divisors))))","user":"5958cef6e4b066ee0a44af94"},{"problem":80,"code":"(fn [n]\n    (= n (->> n\n              (range 1)\n              (filter (comp (partial = 0) (partial mod n)))\n              (apply +))))","user":"5920c191e4b09b4ee5954c61"},{"code":"(fn [n]\n  (let [divisors (filter (fn [d] (zero? (mod n d))) (range 1 (inc (/ n 2))))]\n    (= (apply + divisors) n)))","problem":80,"user":"51df825de4b01188f062752b"},{"problem":80,"code":"#(= (reduce + ((fn divisors[nmb]\n                 (for [n  (range 1 (dec nmb)) :when (= (mod nmb n) 0)]\n                   n\n                 )\n              ) %)) %)","user":"545537c1e4b0e397800069dd"},{"problem":80,"code":"(fn[n](\n  =\n  (reduce + (map (fn[k](if(= (/ n k) (int(/ n k))) k 0 )) (range 1 n)))\n  n\n))","user":"56039843e4b04bb52996e1be"},{"problem":80,"code":"(fn [x]\n (let\n  [n (/ (+ -1\n        (Math/sqrt (+ 1\n                   (* 8 x))))\n     2)]\n  (= n (Math/floor n))\n )\n)","user":"549a999be4b0f3d1d8e70f6f"},{"problem":80,"code":"(fn perfect? [x]\n  (->>\n   x\n   (#(Math/round (Math/sqrt %)))\n   (inc)\n   (range 1)\n   (filter #(= 0 (mod x %)))\n   ((fn [small-divisors]\n       (into small-divisors (map #(/ x %) small-divisors))))\n   (set)\n   (#(disj % x))  \n   (#(= x (reduce + %)))))","user":"53350264e4b0656e627bfd73"},{"code":"(fn perf-square[x](= (reduce + ((fn factors [x] (loop [xf [1] i 2] (if (> (* i i) x) (vec (sort (distinct xf))) (if (zero? (rem x i)) (recur (conj xf i (/ x i)) (inc i)) (recur xf (inc i)))))) x)) x))","problem":80,"user":"5138d08be4b0a5db03d727db"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divides? (comp zero? mod)]\n    (->> (range n)\n         rest\n         (filter (partial divides? n))\n         (apply +)\n         (= n))))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"#(= % (reduce + (filter (comp zero? (partial rem %)) (range 1 %))))","problem":80,"user":"514457fbe4b0b4fb4ace5f43"},{"code":"(fn [n] (= n (reduce + (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"4ea09fa4535d7eef308072aa"},{"code":"#(->>\n    (for [i (range 1 %)] (if (= 0 (mod % i)) i 0))\n    (reduce +)\n    (= %))","problem":80,"user":"530cb5b8e4b02e82168697e0"},{"code":"(fn [x]\n    (letfn [(divisors [x]\n              (filter #(= 0 (mod x %)) (range 1 x)))]\n      (= x (apply + (divisors x)))))","problem":80,"user":"5141abf1e4b02fd87f5064c3"},{"problem":80,"code":"(fn perfect? [n] \n  (let [perfect-nums (fn perfect-nums\n                       ([] (perfect-nums 2))\n                       ([n] (cons \n                              (int (* (java.lang.Math/pow 2 (dec n)) (dec (java.lang.Math/pow 2 n))))\n                              (lazy-seq (perfect-nums (inc n))))))\n        perfects (take-while #(<= % n) (perfect-nums))] \n    (= n (last perfects))))","user":"50be9b4ae4b00fb48fed2ef6"},{"code":"(fn perfect? [n]\n  (->> (range 1 (inc (/ n 2)))\n       (filter (comp zero? (partial mod n)))\n       (apply +) (= n)))","problem":80,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":80,"code":"(fn [a] (let [adaad (filter #(= 0 (mod a %)) (range 1 a))]\n(= a (apply + adaad))))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn [n] \n  (= n (apply + (filter #(= 0 (mod n %)) (range 1 n))))\n)","problem":80,"user":"4fcad14ce4b0ee37620e1856"},{"code":"(fn [x]\n  (= (reduce + (filter #(zero? (mod x %)) (range 1 x)))\n     x))","problem":80,"user":"4eae5fe4535d7eef30807325"},{"problem":80,"code":"(fn [x]\n (= x \n  (reduce +\n      (filter #(= 0 (mod x %)) (range 1 x)))))","user":"54b54d1be4b05787c3b1639c"},{"problem":80,"code":"(fn [n]\n    (= n (apply + (filter (comp zero? #(mod n %)) (range 1 n)))))","user":"5bd0ea60e4b0e9689409ee45"},{"problem":80,"code":"(fn [x] (= (apply + (filter #(zero? (rem x %)) (range 1 x))) x))","user":"57458b82e4b009280f9f2b4e"},{"code":"#(= % (apply + (for [v (range 1 (inc (int (/ % 2.0)))) :when (= (mod % v) 0)] v)))","problem":80,"user":"4eccb190535d23f0362276fe"},{"code":"(fn perfect [x]\n  (= x\n     (apply +\n         (for [y (range 1 x)\n \t      :when (= x (* (quot x y) y))] y\n  \t )\n     )\n  ))","problem":80,"user":"531c0619e4b08068f379ed98"},{"problem":80,"code":"(fn [n]\n  (let [divs (for [x (range 1 (inc (/ n 2))) :when (zero? (mod n x))] x)]\n    (= (apply + divs) n)))","user":"4f7207d3e4b07046d9f4f019"},{"problem":80,"code":"(fn [x]\n  (->> (range 1 x)\n       (filter #(= 0 (rem x %)), )\n       (apply +, )\n       (= x, )))","user":"545ddac3e4b01be26fd74676"},{"problem":80,"code":"(fn a [n] (= n (apply + (filter #(= (rem n %) 0) (range 1 (inc (quot (inc n) 2)))))))","user":"5587d8b3e4b059ccff29b1e8"},{"problem":80,"code":"(fn [num]\n    (letfn [(divisors\n              [n]\n              (loop [i 1\n                     divs []]\n                (if (> (* i 2) n)\n                  divs\n                  (if (= 0 (mod n i))\n                    (recur (+ i 1) (conj divs i))\n                    (recur (+ i 1) divs)))))]\n      (= (reduce + (divisors num)) num)))","user":"56eaad95e4b04a395b9a040f"},{"problem":80,"code":"(fn is-perfect? [n]\n  (let [perf-nums (fn perf-nums\n                    ([x] (perf-nums x 1))\n                    ([x n] (cond\n                             (= 0 (mod x n))\n                             (cons n (lazy-seq (perf-nums x (inc n))))\n                             :else\n                             (perf-nums x (inc n)))))]\n    (->> (take-while\n           #(< % (+ 1 (/ n 2)))\n           (perf-nums n))\n         (reduce +)\n         (= n))))","user":"5984e7dee4b021a7a535fe43"},{"problem":80,"code":"(fn [n]\n  (let [divs\n        (fn [n]\n          (filter\n           #(zero? (mod n %)) (range 1 (inc (/ n 2)))))\n        sum #(apply + %)\n        perfect? #(= % (sum (divs %)))]\n    (perfect? n)))","user":"592334c7e4b0a390037439ee"},{"problem":80,"code":"(fn perfect-numbers [n]\n  (= n (reduce + (filter #(zero? (mod n %)) (range 1 (inc (quot n 2)))))))","user":"5501a1e1e4b07d26eda61d75"},{"code":"(fn [n]\n    (= n (reduce + (filter  #(integer? (/ n %)) (range 1 n)))))","problem":80,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":80,"code":"(fn [n]\n  (letfn [(gd [cislo]\n                         (loop [d 1 res []]\n                           (cond (= d cislo) res\n                                 (= (rem cislo d) 0) (recur (inc d) (conj res d))\n                                 :else (recur (inc d) res))))]\n    (= n (apply + (gd n)))))","user":"60264d89e4b0d5df2af2222d"},{"problem":80,"code":"(fn [n] (= n (reduce #(if (= 0 (mod n %2)) (+ %1 %2) %1) (range 1 n))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":80,"code":"(fn [n]\n  (loop [coll (range 1 (+ (/ n 2) 1)) acc []]\n    (if (empty? coll)\n      (= n (apply + acc))\n      (recur (rest coll) (if (zero? (rem n (first coll)))\n                           (conj acc (first coll))\n                           acc)))))","user":"54fdbe3fe4b07d26eda61d3b"},{"problem":80,"code":"(fn [x]\n   (let [divisors (fn [n] (filter #(zero? (rem n %)) (range 1 n)))]\n     (->>\n       x\n       divisors\n       (reduce +)\n       (= x))))","user":"5d1a1082e4b0902706380e0e"},{"code":"(fn [n]\r\n  (letfn [(divisors [k]\r\n            (for [i (range 1 k)\r\n                  :when (zero? (mod k i))]\r\n              i))]\r\n    (= n (reduce + 0 (divisors n)))))","problem":80,"user":"4ee40938535d10e5ff6f5375"},{"problem":80,"code":"(fn [x]\n  (loop [c1 []\n        p (inc 0)]\n    (if (= p x)\n      (if (= x (reduce + c1)) true false) \n      (recur (conj c1 (if (= 0 (mod x p)) p 0))\n             (inc p)))))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":80,"code":"(fn[n]\n        (let [factors \n              (fn[n]\n                (for [i (range 1 n) :when (zero? (mod n i))] i))]\n          (= n (reduce + (factors n)))))","user":"57e6f90de4b0bfb2137f5af6"},{"code":"(fn p [n]\n  (= n\n     (reduce +\n        (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"5191ac45e4b0d428d29dc1b6"},{"code":"(fn is-perfect [x]\n  (= (reduce + \n          (filter #(= (rem x %) 0)\n                  (range 1 x)))\n     x))","problem":80,"user":"538c3424e4b0b51d73faae58"},{"code":"(fn [n]\n  (letfn [(d [n]\n            (filter #(zero? (mod n %))\n                    (range 1 (inc (/ n 2)))))]\n    (= n (reduce + (d n)))))","problem":80,"user":"500d8c49e4b07ccb9a7ddb00"},{"problem":80,"code":"(fn [x](->>\n        x\n        (range 1)\n        (filter #(= (rem x %) 0))\n        (apply +)\n        (= x)\n       )\n )","user":"57011eb3e4b08d47c97781d1"},{"problem":80,"code":"(fn is-perfect? [n]\n  (let [divisors (->> (range 1 n)\n                      (filter #(= 0 (mod n %))))]\n    (= n (reduce + divisors))))","user":"5b602a66e4b0c6492753e6fc"},{"problem":80,"code":"#(not (nil? (some #{6,496,8128} (vector %))))","user":"53e76bb2e4b036ad0777e47d"},{"problem":80,"code":"(fn [n]\n  (let [divisors\n        (fn [m]\n         (filter\n          #(= 0 (mod m %))\n          (drop 1 (range m))))]\n   (=\n    n\n    (reduce\n     +\n     0\n     (divisors n)))))","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn [x]\n  (let [factors (filter #(zero? (mod x %)) (range 1 x))]\n    (= x (apply + factors))))","problem":80,"user":"4fa340b4e4b081705acca18c"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(= 0 (mod n %)) (range 1 n))]\n    (= n (reduce + divisors))))","user":"5344fe13e4b084c2834f4a32"},{"code":"(fn [n] (= n (reduce + (filter #(= 0 (rem n %))(range 1 n)))))","problem":80,"user":"4eb5750a535d7eef30807366"},{"code":"(fn perfect? [n]\n   (let\n     [devisors \n      (filter \n        #(zero? (rem n %)) \n        (range 1 n))]\n     (= n (apply + devisors))\n     )\n  )","problem":80,"user":"4ecfa05c535d44c135fd68b9"},{"problem":80,"code":"(fn perfect? [x]\n\t(= x (reduce + ((fn divisors [x]\n  (for [i (range 1 x)\n  \t:when (zero? (mod x i))]\n  \ti)) x))))","user":"563d12f9e4b0bfe05bf11845"},{"code":"(fn [n]\n  (letfn [(d [x] \n            (filter #(zero? (rem x %)) (range 1 x)))]\n  (->> n \n       d\n       (apply +)\n       (= n))))","problem":80,"user":"4e50e2a0535dc968683fc4ef"},{"problem":80,"code":"(fn [n]\n    (->> (range 1 n)\n         (filter #(zero? (mod n %)))\n         (apply +)\n         (= n)))","user":"4f42c80ae4b0d7d3c9f3fd0f"},{"code":"(fn f [n]\n  (= n (apply \n        + \n        (filter \n         #(zero? (rem n %))\n         (range 1 n)))))","problem":80,"user":"51944aaae4b0142f60b4aedc"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter #(= 0 (mod n %)) (range 1 (/ (+ 1 n) 2))))))","user":"5553b924e4b0deb715856e06"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter (fn [x] (= 0 (rem n x))) (range 1 n)))))","user":"55625903e4b0c656e3ff17d7"},{"code":"(fn [n]\n  (= n (reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4e5c801e535d8a8b8723a2c1"},{"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (mod n %))\n                         (range 1 (inc (/ n 2)))))))","problem":80,"user":"515a6151e4b0394f658fe241"},{"code":"(fn [x]\n  (= x (apply + (filter (comp zero? (partial mod x)) (range 1 x))))\n)","problem":80,"user":"536f5900e4b0fc7073fd6e7b"},{"problem":80,"code":"(fn [n]\n  (let [d (for [i (range 1 (inc (/ n 2))) :when (zero? (rem n i))] i)]\n    (= (reduce + d) n)))","user":"586615e6e4b0f14aab7c8858"},{"problem":80,"code":"(fn isPerfectNumber [x] (= x (apply +' (filter #(zero? (rem x %)) (range 1 x)))))","user":"55896a0ce4b059ccff29b204"},{"problem":80,"code":"(fn perfNum [x] (= x (reduce + (filter #(= 0 (rem x %)) (range 1 x)))))","user":"56427910e4b08d4f616f5f19"},{"code":"(letfn [(divisors [n] (loop [divs [1] k 2]\n                        (cond \n                          (= k n) divs\n                          (= (rem n k) 0) (recur (conj divs k) (inc k))\n                          :else (recur divs (inc k)))))]\n  #(= (reduce + (divisors %)) %))","problem":80,"user":"50310b8be4b05b7df5a0b84d"},{"problem":80,"code":"#(letfn [(divisors [n]\n            (set (apply concat (for [i (range 2 (Math/sqrt n)) :when (zero? (mod n i))] [i (quot n i)]))))]\n    (= % (inc (reduce + (divisors %)))))","user":"586bc870e4b01531a375e964"},{"code":"(fn is-perfect [x]\n    (->>\n        (range 1 x) \n        (filter #(= 0 (mod x %1))) \n        (reduce +)\n        (= x)))","problem":80,"user":"5268eb68e4b03e8d9a4a71c6"},{"code":"#(= % (apply + (for [n (range 1 %) :when (zero? (mod % n))] n)))","problem":80,"user":"4ec5aa1f535d6d7199dd36b0"},{"code":"(fn [x] \n  (let [divides-x? #(zero? (mod x %))\n        divisors-x (fn [s] (filter divides-x? s))\n        range-1-to-half-n (range 1 (inc (/ x 2)))]\n    (= x (reduce + (divisors-x (range 1 x))))))","problem":80,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":80,"code":"(fn perfect-number? [n]\n  (->> (range 1 n)\n       (filter #(= 0 (mod n %)))\n       (reduce +)\n       (= n)\n       )\n  )","user":"5aada061e4b073f17744257a"},{"code":"(fn [n]\n  (let [divisors (fn [x] (filter #(zero? (rem x %)) (range 1 x)))]\n        (= n (apply + (divisors n)))))","problem":80,"user":"4fe15ffee4b0dd6cd5ce3634"},{"code":"(fn [n]\n  (= n (reduce + \n    (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"4f969214e4b0dcca54ed6cdd"},{"code":"(fn [n]\n  (= n\n     (apply +\n       (filter (fn divisor? [k]\n                 (= 0 (rem n k)))\n         \t   (range 1 (- n 1))))))","problem":80,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":80,"code":"(fn __ [x] \n  (let [divs\n        (fn [x]\n          (loop [divs []\n                 i 1]\n            (if (= i x)\n              divs\n              (recur (if (= 0 (mod x i)) (conj divs i) divs) (inc i)))))]\n    (= (apply + (divs x)) x)))","user":"531bad96e4b08068f379ed93"},{"problem":80,"code":"(fn [n] (= n (reduce + (for [i (range 1 n) :when (zero? (mod n i))] i))))","user":"5b924123e4b0c0b3ffbd4a34"},{"code":"(fn [n]\n  (= n (apply + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn [x]\n  (= x (reduce #(+ %1 (if (zero? (mod x %2)) %2 0)) 0 (range 1 x))))","problem":80,"user":"4f29eb2ae4b0d6649770a037"},{"code":"(fn [n]\n  (let [dv (fn[x] (filter #(zero? (rem x %)) (range 1 x) ))]\n       (= n (reduce + (dv n)))))","problem":80,"user":"4f05ea25535dcb61093f6c02"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(zero? (rem n %)) (range 1 n))]\n    (= n (reduce + divisors))))","user":"54cc26c1e4b057c6fda3a28a"},{"problem":80,"code":"(fn [x]\n  (let [sum (reduce + (loop [i 2 factors [1]] (if (= i x) factors (recur (inc i) (if (= 0 (mod x i)) (conj factors i) factors)))))]\n    (= sum x)))","user":"5918db70e4b09b4ee5954bbb"},{"code":"(fn perfect? [n]\n  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn perfect-num\n  [n]\n  (let [divisors (fn [x]\n                   (filter #(and (< % x) (= 0 (rem x %))) (range 1 x)))\n        sum (reduce + (divisors n))]\n    (= sum n)))","problem":80,"user":"52dd6cc8e4b09f7907dd13e2"},{"code":"(fn [x]\n  (let [sm (reduce + (filter #(= 0 (rem x %)) (drop 1 (range x))))]\n  (= sm x)))","problem":80,"user":"5084c43be4b0fb8f40674bfa"},{"code":"(fn [x] (->> x (range 1) (filter #(zero? (mod x %))) (apply +) (= x)))","problem":80,"user":"52c1f404e4b07a9af5792370"},{"code":"(fn perfect [n]\n  (= n (apply + (filter #(zero? (rem n %)) (range 1 n))))\n  )","problem":80,"user":"52ffb7f2e4b0d8b024fd370b"},{"code":"(fn [n]\n (= n (reduce + (filter (fn[x] (= (/ n x) (int (/ n x))))\n                                 (range 1 n)))\n ))","problem":80,"user":"4fbd12a5e4b081705acca2fd"},{"problem":80,"code":"(fn checkIfPerfectNumber [x] \n  (= x (apply + (filter #(zero? (mod x %)) (range 1 x)))))","user":"5630a51de4b0bfe05bf11781"},{"problem":80,"code":"(fn ss [n]\n      (if (= n\n             (apply + \n                    (filter #(not (nil? %)) \n                            (map #(when (= % 0) %2) \n                                 (map #(mod n %) (take (quot n 2) (iterate inc 1))) \n                                 (take (quot n 2) (iterate inc 1))))))\n        true\n        false))","user":"55aaa36fe4b0988bba2ad94f"},{"code":"(fn [n] (let [pft-lst (reductions + (iterate inc 1))]\n   (boolean (some #(= n %) (take (int (/ n 2)) pft-lst)))))","problem":80,"user":"50435689e4b034ff00315d21"},{"code":"#(cond (= % %3) true\n       (> % %3) false\n       :else (recur (if (= 0 (rem %3 %2)) (+ % %2) %)\n                    (inc %2)\n                    %3)) 0 1","problem":80,"user":"4efb2fd7535dced4c769f274"},{"code":"(fn [n]\n  (let [f (fn f [d t]\n            (cons d (lazy-seq (if (zero? (mod n t))\n                                (f t (+ 1 t))\n                                (f 0 (+ 1 t))))))\n        s (take (- n 1) (f 1 2))]\n    (= (reduce + s) n)))","problem":80,"user":"50464831e4b011c5dfee771f"},{"problem":80,"code":"(fn perfect-number? [num]\n\t(= (apply + (filter #(zero? (mod num %)) (range 1 (inc (/ num 2))))) num)\n)","user":"5559b443e4b0deb715856e3c"},{"problem":80,"code":"(fn perfectnum\n  [x]\n  (letfn [(jumdiv [n]\n            (->> (range 1 n) (filter #(zero? (mod n %))) (reduce +)))]\n    (= (jumdiv x) x)))","user":"5b02a170e4b0cc2b61a3bd52"},{"code":"(comp boolean #{6 496 8128})","problem":80,"user":"511b233ae4b07ab9ec456180"},{"problem":80,"code":"(fn [x] \n  (= x (reduce + (filter #(zero? (mod x %)) (range 1 x)))))","user":"58eed4c5e4b056aecfd47db7"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisors (set (filter #(zero? (mod n %)) (range 1 n)))]\n    (= n (reduce + 0 divisors))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":80,"code":"(fn [x] (= x (apply + (filter #(zero? (mod x %)) (range 1 (inc (/ x 2)))))))","user":"54df2609e4b024c67c0cf7a9"},{"code":"(fn perfect [n]\r\n  (let [l (range 1 (/ (+ 1 n) 2))]\r\n  (= n (reduce  +  (map (fn[x] (if (= 0 (mod n x)) x 0)) l)))\r\n))","problem":80,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":80,"code":"(fn [n]\n           (= n (apply + (filter #(zero? (rem n %))\n                                 (range 1 (inc (/ n 2)))))))","user":"53f592b7e4b0db01ade6f9d0"},{"problem":80,"code":"(fn [x] (= x (first (drop-while #(< % x) (map #(apply + (take % (iterate inc 1))) (iterate inc 1))))))","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":80,"code":"(fn perfect? [n]\n  (->> (range 1 n)\n       (filter #(= (mod n %) 0))\n       (apply +)\n       (= n)\n   )\n  )","user":"57cf03c0e4b00451144b04f9"},{"problem":80,"code":"(fn [n]\n  (= n (reduce #(if (zero? (rem n %2)) (+ % %2) %) 0 (range 1 n))))","user":"51dd5d6fe4b0c33a4e1da406"},{"code":"(fn [n]\n  (= n\n     (loop [i 1 factor_sum 0]\n       (cond\n        (= i n)\n        factor_sum\n        \n        (zero? (rem n i))\n        (recur (inc i) (+ factor_sum i))\n        \n        :else\n        (recur (inc i) factor_sum)))))","problem":80,"user":"52b405e1e4b0c58976d9ad15"},{"problem":80,"code":"(fn x [x]\n  (->> (range 1 x)\n       (filter #(zero? (mod x %)))\n       (reduce +)\n       (= x)        \n   \n   )\n  \n  \n  )","user":"56db90d4e4b0ea9b8538f80d"},{"code":"#(< (mod % 12) 7)","problem":80,"user":"5336a339e4b0e30313ee6c7d"},{"code":"(fn [n] (= n (apply + (filter #(= (rem n %) 0)(range 1 n)))))","problem":80,"user":"50fbdacfe4b0d10d794c19f0"},{"code":"#(= % (reduce + (filter (fn [n] (= 0 (mod % n)))\n                        (range 1 %))))","problem":80,"user":"4fa6d532e4b081705acca1be"},{"problem":80,"code":"(fn perfect? [n]\n  (letfn\n      [(divisors [n]\n         (filter #(zero? (mod n %)) (range 1 (int (inc (/ n 2))))))]\n    (= (apply + (divisors n)) n)))","user":"5b7f2d75e4b047b03b203768"},{"problem":80,"code":"(fn\n  [n]\n  (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"59f44189e4b0966464fe6aab"},{"code":"(fn [n]\n  (= n\n    (apply +\n      (filter #(= 0 (rem n %))\n        (range 1 n)))))","problem":80,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":80,"code":"(fn perfect-number? [x]\n  (= (apply + (filter #(= 0 (mod x %)) (range 1 x))) x))","user":"546c1f73e4b00cfc9eacc175"},{"problem":80,"code":"(fn pia [n]\n  (= n (reduce +\n         (filter\n           #(zero? (mod n %))\n           (range 1 n)))))","user":"569ce6fee4b0542e1f8d146c"},{"code":"(fn [n] (letfn [(div [x] (flatten (keep #(when (= 0 (mod x %)) [% (quot x %)]) (range 1 (inc (Math/sqrt x))))))]\r\n        (let [d (disj (set (div n)) n)]\r\n          (= n (apply + d)))))","problem":80,"user":"4fe900a6e4b0547ebccb243a"},{"problem":80,"code":"#(= %\n    (apply +\n      (for [i (range 1 %) :when (= 0 (mod % i))]\n        i)))","user":"550f1c99e4b06e50f9beb171"},{"problem":80,"code":";; http://www.4clojure.com/problem/80\n(fn perfect-number? [n]\n  (= n\n     (apply +\n            (filter #(zero? (mod n %)) (range 1 n)))))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn [n]\n        (if (= n\n              (apply + \n                (filter #(= 0 (mod n %)) (range 1 n))))\n          true false))","problem":80,"user":"52872245e4b0239c8a67ae30"},{"problem":80,"code":"(fn isperfect[n] (= n (reduce + (filter (fn [x] (= 0 (rem n x)))(range 1 n)))))","user":"571aad45e4b07c98581c3b59"},{"code":"(fn [x]\n  (= x\n     (reduce + (filter\n                 #(= 0 (rem x %))\n                 (range 1 (inc (/ x 2))))\n               )\n  )\n)","problem":80,"user":"52b5137de4b0c58976d9ad36"},{"problem":80,"code":"#(= % (reduce (fn [m v]\n           (if (= 0 (mod % v))\n             (+ m v) m)) (range 1 %)))","user":"588fbb39e4b00487982d51bd"},{"code":"#(boolean (#{6 496 8128} %))","problem":80,"user":"50a83315e4b054305ba5a830"},{"problem":80,"code":"(fn perfect? [x] (letfn[(divisors [n]\n                 (filter #(zero? (mod n %)) (range 1 (inc (Math/ceil (/ n 2))))))]\n          (println (divisors x))\n         (= (apply + (divisors x)) x)))","user":"5657fed1e4b0f9d632dd84ae"},{"code":"#(=\n  % \n  (reduce\n   +\n   (loop [res '(1) n 2 m (/ % 2)]\n     (if (< n m)\n       (if (ratio? m)\n         (recur res (inc n) (/ % (inc n)))\n         (recur (conj res n m) (inc n) (/ % (inc n))))\n       (if (= n m)\n         (conj res n)\n         res)))))","problem":80,"user":"5349ac2be4b084c2834f4a67"},{"problem":80,"code":"(fn [n]\n  (->> n\n       (range 1)\n       (filter #(zero? (mod n %)))\n       (reduce + 0)\n       (= n)))","user":"565b941ce4b068f2fe63dc07"},{"problem":80,"code":"(fn perfect? [n]\n  (== n\n     (apply +\n            (filter #(zero? (mod n %))\n                    (range 1 n)))))","user":"53286f84e4b09d4e7a9b5505"},{"problem":80,"code":"#(= % (reduce + (filter (fn [v] (= 0 (rem % v))) (range 1 %))))","user":"56b6e354e4b0982f16b37e41"},{"problem":80,"code":"#(->> (range 1 (inc (int (/ % 2)))) (filter (comp zero? (partial mod %))) (reduce +) (= %))","user":"56f974c0e4b07572ad1a88b1"},{"problem":80,"code":"(fn [x]\n  (->> (range 1 x 1)\n       (filter #((comp zero? mod) x %))\n       (reduce +)\n       (= x)))","user":"5cee521ce4b0aaa82f1129dd"},{"problem":80,"code":"(fn [n]\n  (= n\n     (->> (range 1 n)\n          (filter #(zero? (mod n %)))\n          (reduce +))))","user":"54722c55e4b094393f72dd74"},{"code":"(fn [n]\n  (->>\n    (range 1 n)\n    (filter #(= 0 (rem n %)))\n    (reduce +)\n    (= n)))","problem":80,"user":"4fb1d907e4b081705acca282"},{"problem":80,"code":"(fn [n]\n    (->> (range 1 n)\n         (filter #(= 0 (rem n %)))\n         (reduce +)\n         (= n)))","user":"550c55d0e4b06e50f9beb14d"},{"code":"(fn [n]\n  (->>\n   (range 1 n)\n   (filter #(zero? (mod n %)))\n   (apply +)\n   (= n)))","problem":80,"user":"51efd397e4b0249c592fbdeb"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(zero? (mod n %1)) (range 1 n))]\n    (= n (reduce + divisors))\n    ))","user":"53dadf1de4b0e771c30254ad"},{"problem":80,"code":"#(.contains (reductions + (range 1 %)) %)","user":"54a11042e4b09f271ff37c49"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter #(zero? (mod n %1)) (range 1 n)))))","user":"55d95be7e4b0e31453f64ac9"},{"problem":80,"code":"(fn [n]\n    (= n  (reduce + \n                  (reduce (fn [a x] (if (= 0 (mod n x))\n                                      (conj a x)\n                                      a ) )\n                          []\n                          (range 1 n))))\n    \n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn [x]\n  (let [a (filter #(zero? (mod x %)) (range 2 (Math/sqrt x)))\n        b (map #(/ x %) a)]\n    (= x (apply + 1 (concat a b)))))","problem":80,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":80,"code":"(fn [n]\n   (->> (range 1 n)\n        (filter #(= 0 (rem n %)))\n        (apply +)\n        (= n)))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":80,"code":"(fn f [x]\n  (->> (range 1 x)\n       (filter #(= 0 (mod x %)))\n       (apply +)\n       (= x)))","user":"5493d908e4b0b312c081ff52"},{"problem":80,"code":"(fn is-perfect? [x]\n  (->> (range 1 x)\n       (filter #(= (rem x %) 0))\n       (reduce +)\n       (= x)))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":80,"code":"(fn [n]\n    (= n (apply + (filter #(= (rem n %) 0) (range 1 n)))))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":80,"code":"(fn perfect-number [x]\n  (->>\n    (range 1 (inc (quot x 2)))\n    (filter #(= 0 (mod x %)))\n    (apply +)\n    (= x))\n  )","user":"525d44bfe4b0cb4875a45d6d"},{"problem":80,"code":"(fn [n]\n  (loop [sum 0, oper 1]\n    (if (= sum n)\n      true\n      (if (> sum n)\n        false\n        (recur (+ sum oper) (inc oper))))))","user":"56c55fbce4b05cc29241eea5"},{"problem":80,"code":"(fn [n] (= n (apply + (filter (fn [d] (zero? (mod n d))) (range 1 n)))))","user":"5547cd6ee4b0a04f79299553"},{"problem":80,"code":"(fn [n]\n  (= n (reduce    #(if (= (mod n %2) 0) (+ % %2) %)    1 (range 2 (inc (/ n 2))) ))\n  \n  \n  )","user":"5735ac67e4b0cd1946bd102b"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter (fn [i] (= (rem n i) 0)) (range 1 n)))))","user":"564a5a09e4b0284900eef656"},{"code":"(fn [x]\n  (= x \n     (apply +\n       (filter #(= 0 (rem x %))\n         (range 1\n                (inc (quot x 2)))))))","problem":80,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":80,"code":"(fn [x]                          \n  (->> \n    (range x)               \n    (drop 1)                 \n    (filter #(= 0 (mod x %)))\n    (reduce +)               \n    (= x)))","user":"50573ed8e4b0012181721987"},{"code":"(fn perfect?- [n]\n  \"80. Write a function which returns true for perfect numbers and false otherwise.\"\n  (let [divisors- (fn [x] (filter #(= 0 (rem x %)) (range 1 x)))]\n    (= (apply + (divisors- n)) n)))","problem":80,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn perfect [num]\r\n  (or (= num 8128) (= num (reduce +\r\n    (for [x (range 1 num):when (= 0 (rem num x))] x)\r\n          )\r\n  ))\r\n)","problem":80,"user":"50bf3015e4b0a6abc6550e5b"},{"problem":80,"code":"(fn perfect\n  [n]\n  (letfn [(factors [n] (filter #(zero? (rem n %)) (range 1 n)))]\n    (= n (reduce + (factors n)))))","user":"5401aefbe4b0df28a13c62c7"},{"code":"(fn [n]\r\n  (letfn [(sieve [[p & xs]]\r\n            (remove #(= (rem % p) 0) xs))\r\n           (primes []\r\n             (map first (iterate sieve (iterate inc 2))))\r\n           (factorization\r\n             ([n]\r\n               (factorization n (primes)))\r\n             ([n [p & xs :as s]]\r\n               (cond\r\n                 (== n 1) nil\r\n                 (== (rem n p) 0) (lazy-seq\r\n                                    (cons p (factorization (/ n p) s)))\r\n                 :else (factorization n xs))))\r\n           (divsum [n] (let [divisors (frequencies (factorization n))\r\n                             sum      (reduce *\r\n                                        (map\r\n                                          (fn [[p cnt]]\r\n                                            (reduce (fn [i x] (+ i (Math/pow p x)))\r\n                                              0 (range (inc cnt))))\r\n                                          divisors))]\r\n                         (- sum n)))]\r\n    (== n (divsum n))))","problem":80,"user":"4df669d4535d08e6dec9fe35"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + ((fn [n]\n  (loop [a [1]\n         x 2 ]\n    (if (> x (/ n 2))\n      a\n      (if (zero? (mod n x))\n        (recur (conj a x) (inc x) )\n        (recur a (inc x) ))))) n))))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn perfect? [n]\n  (let [divisors (filter #(= 0 (rem n %)) (range 1 n))]\n    (= n (reduce + divisors))))","problem":80,"user":"52606318e4b03e8d9a4a7036"},{"problem":80,"code":"(fn [n] (let [divisors (filter #(= 0 (rem n %)) (range 1 n))] \n           (if (= (reduce + divisors) n)\n             true\n             false)))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn perfect? [n]\n  (let [proper-divisors (filter #(zero? (mod n %)) (range 1 n))]\n    (= n (apply + proper-divisors))))","problem":80,"user":"5186134ce4b0da5a5be3bac7"},{"code":"(fn perfect? [n]\n        (if (odd? n)\n            false\n          ((complement empty?) (filter #(= n (*' (reduce *' (repeat (dec %) 2))\n                                   (dec (reduce *' (repeat % 2)))))\n                          (range 1 n)))))","problem":80,"user":"52d340ebe4b099d49816f0c1"},{"code":"(fn[number]\n  (letfn [(divisor? [number factor] (= (mod number factor) 0))\n          (divisors [number] (filter (partial divisor? number) (range 1 number)))]\n         (= (reduce + (divisors number)) number)))","problem":80,"user":"4eef3afe535d305ff5cb7f1d"},{"problem":80,"code":"(fn [n]\n      (let [divisors (filter #(= 0 (mod n %)) (range 1 n))]\n        (= n (apply + divisors))))","user":"53f891eee4b0de5c4184856d"},{"problem":80,"code":"#(= (reduce +\n     (for [x (range 1 (+ (/ % 2) 1))\n            :when  (= (mod % x) 0)] \n          x))\n    %)","user":"59cd13d5e4b0ef0a1e9b5b32"},{"problem":80,"code":"(fn [n]\n  (let [potential (range 1 (inc (/ n 2)))\n        divisors (filter #(= (mod n %) 0) potential)]\n    (= (apply + divisors) n)))","user":"530e75d5e4b08068f379ecba"},{"problem":80,"code":"(fn perfect? [n]\n   (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"56fbf83de4b07572ad1a88da"},{"code":"(fn [n]\n(=\n  (apply +  \n    (filter\n      (fn [q] (= (rem n q) 0))\n      (range 1 n)\n    )\n  )\n  n\n))","problem":80,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"(fn perfect-number? [n]\n  (letfn [(divisors [accu candidates]\n            (cond (empty? candidates) accu\n                  (zero? (mod n (first candidates))) (recur (cons (first candidates) accu)  (rest candidates))\n                  :else (recur accu (rest candidates))))]\n    (= (reduce + 0 (divisors '() (range 1 (inc (quot n 2))))) n)))","problem":80,"user":"4e82c062535db62dc21a62cc"},{"code":"(fn [num]\n  (=\n    num \n    (reduce +\n      (filter\n        #(zero? (mod num %))\n        (range 1 num)))))","problem":80,"user":"4e68c434535d8ccf87e9fe89"},{"code":"(fn [x] (= x (reduce + (filter #(integer? (/ x %)) (range 1 x)))))","problem":80,"user":"502904e0e4b0feaf66e22fad"},{"problem":80,"code":"(fn sol [n] (= n (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","user":"54857657e4b0e286459a11ac"},{"code":"(fn perfect? [n]\n  (= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"51460e4ce4b04ef915e37314"},{"code":"(fn [n]\n  (let [divisors (for [x (range 1 n) :when (zero? (mod n x))] x)]\n    (= (reduce + divisors) n)))","problem":80,"user":"5201ff99e4b0b2e020a18f26"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter #(zero? (rem n %)) (range 1 (inc (/ n 2)))))))","user":"5259451ce4b0cb4875a45cd7"},{"problem":80,"code":"(fn [n]\n  (loop [sum 0, r (->> (range) (drop 1) (filter #(= 0 (rem n %1))))]\n    (cond\n     (= sum n) true\n     (> sum n) false\n     :else (recur (+ sum (first r)) (rest r)))))","user":"59225498e4b09b4ee5954c8c"},{"code":"#(not(or (= 7 %) (= 500 %)))","problem":80,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":80,"code":"(fn is-perfect-number [n]\n  (= n (reduce + (filter #(= (mod n %) 0) (range 1 n))))\n  )","user":"5c3ac091e4b0d62ef62d9f95"},{"code":"(fn [n]\n  (= n\n    (apply + \n       (filter\n       #(= 0 (mod n %)) \n       (range 1 n)))))","problem":80,"user":"4f9c4080e4b0dcca54ed6d1a"},{"code":"(fn [n]\n   (= n (apply + (filter  #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"52c25645e4b07a9af579237d"},{"code":"(fn [n]\n  (= n\n     (reduce + (for [x (range 1 n) :when (= 0 (mod n x))] x))))","problem":80,"user":"50b1d166e4b03ea880433554"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(and (not= % n) (zero? (mod n %))))\n       (reduce +)\n       (= n)))","user":"52f3568fe4b05e3f0be25f0e"},{"problem":80,"code":"(fn is-perfect [n]\n  (loop [sum 0, x 0]\n    (cond\n      (= sum n) true\n      (> sum n) false\n      :else (recur (+ sum x) (inc x))\n    )\n  )\n)","user":"53ca41dae4b00fb29b2212c8"},{"code":"#(= % (apply + (filter (fn [x] (zero? (mod % x))) (range 1 %))))","problem":80,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"(fn [n]\n  (= n\n     (reduce\n      #(if (zero? (mod n %2)) (+ %1 %2) %1)\n      0\n      (range 1 n))))","problem":80,"user":"519136e9e4b0f8ef0be96c01"},{"problem":80,"code":"(fn [n] (=\n         (reduce + (filter #(= 0 (mod n %)) (range 1 n)))\n         n))","user":"552456e3e4b0882d96d091c2"},{"code":"(fn [x]\r\n  (= x (reduce + (filter #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"#(even? (Integer/parseInt (str (first (str %)))))","problem":80,"user":"4e707db6535d5021c1a8963a"},{"problem":80,"code":"(fn [x]  (= (reduce + (filter #(= (mod x %) 0)(range 1 x))) x))","user":"557954aae4b05c286339e092"},{"code":"(fn [n]\n  (= \n    (reduce +\n    (filter \n      (fn [x] (= (mod n x) 0)) \n      (rest (range (- n 1))))) n))","problem":80,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":80,"code":"(fn perfect-num? [n]\n  (= n\n     (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"53b7aa6ce4b047364c0444d1"},{"problem":80,"code":"(fn [x]\n  (let [divisors (filter #(= 0 (rem x %)) (range 1 x) )]\n    (= x (apply + divisors))))","user":"54d6f22de4b0a52adc2e2023"},{"problem":80,"code":"(fn perfect-num [n] (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"542edb4ae4b0dad94371f2c8"},{"code":"(letfn [(D [n]\n          (filter #(zero? (rem n %)) (range 1 n)))]\n  (fn [n]\n    (= n (reduce + (D n)))))","problem":80,"user":"51a4416ae4b0def3c5c5868c"},{"code":"(fn \n  [num]\n  (->> (for [i (range 2 (+ (Math/sqrt num) 0.01))\n             :when (= 0 (mod num i))]\n         (+ i (/ num i)))\n       (apply +)\n       inc\n       (= num)))","problem":80,"user":"51852961e4b0da5a5be3babb"},{"problem":80,"code":"(fn perfect-number\n  [n]\n  (= (apply + (filter #(= (mod n %) 0) (range 1 n))) n))","user":"52561295e4b0541d1855ba03"},{"code":"(fn [n]\n    (->>\n      (for [d (range 1 n) :when (= 0 (mod n d))] d)\n      (reduce +)\n      (= n)))","problem":80,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":80,"code":"(fn isperfect? [x] (->>  x range rest (filter #(= 0 (rem x %))) (apply +) (= x)))","user":"56fa2905e4b07572ad1a88be"},{"code":"#(= %\n  (reduce + \n    (filter (fn [d] (zero? (mod % d)))\n            (range 1 %))))","problem":80,"user":"4db3393e535df7e46ed9b6cc"},{"code":"(fn [n]\n  (= n (inc (reduce + (filter #(zero? (mod n %)) (range 2 n))))))","problem":80,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"(fn test80 [x]\n  (let [y (filter #(= 0 (mod x %)) (range 1 x))]\n    (= x (apply + y))))","problem":80,"user":"50b0cffae4b009df37c708c5"},{"problem":80,"code":"(fn[n](= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"4e8849c5535d8b9bb0147ca4"},{"code":"(fn [x]\r\n  (letfn [(divisors [n]\r\n            (filter #(zero? (rem n %)) (range 1 n)))]\r\n    (= x (apply + (divisors x)))))","problem":80,"user":"4dac39a28cc9d6edb8beb0b3"},{"problem":80,"code":"(fn [x]\n   (= (reduce + \n         (filter #(zero? (mod x %)) \n                 (range 1 x))) x))","user":"56ede653e4b04a395b9a0449"},{"code":"(fn  [number]\n(let [is-factor?  (fn [divident divisor]\n\t(zero? (mod divident divisor))) \n\txx (fn  [number]\n\t(distinct (mapcat #(when (is-factor? number % ) \n\t\t[(/ number %) %]) (range 1 (+ (Math/sqrt number) 1))   )))]\n\t(= (reduce + (xx number)) (* 2 number))))","problem":80,"user":"518644bce4b0da5a5be3baca"},{"code":"(fn perfect? [n]\n  (let [int-divisors (filter #(integer? (/ n %)) (take (/ n 2) (iterate inc 1)))]\n    (= n (apply + int-divisors))))","problem":80,"user":"4e3bccb1535deb9a81d77f55"},{"problem":80,"code":"(fn perf?\n  [n]\n  (let [divisors (fn [n] (filter #(= (mod n %) 0) (next (range n))))]\n       (= n (apply + (divisors n)))))","user":"55acd080e4b03311e7b73298"},{"code":"(fn [n]\r\n  (= n\r\n    (reduce + \r\n      (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4dc986d0535d5973398f9285"},{"problem":80,"code":"(fn ff [n]\n  (let [sqrt (Math/sqrt n)\n        divs (filter #(= (mod n %) 0)\n                     (range 1 (Math/ceil sqrt)))\n        divs (concat divs\n                     (when (= (Math/floor sqrt) sqrt)\n                       [sqrt])\n                     (map #(/ n %) (rest divs)))]\n    (= (reduce + divs) n)\n    ))","user":"5012da69e4b0c8732600222d"},{"problem":80,"code":"(fn pn [n]\n  (= n (reduce + (filter #(zero? (rem n %)) (range 1 n)))))","user":"53f053ebe4b0742d9025b0d3"},{"problem":80,"code":"(fn perfect-numbers\n  [n]\n  (if \n    (some #{n} (reductions + (range n)))\n    true\n    false))","user":"5586f418e4b059ccff29b1de"},{"code":"(let [is-divisor?\n         (fn isdiv [a b] \"Is a divisior of b?\" \n           (zero? (mod b a)))]\n(fn perfect-num \n  ([x] (if (= x (perfect-num x (- x 1))) true false)) \n  ([x y] \n   \n    (if (= 1 y) \n      1\n      (if (is-divisor? y x)\n        (+ y (perfect-num x (dec y)))\n        (recur x (dec y)))))))","problem":80,"user":"52e17e66e4b09f7907dd1423"},{"problem":80,"code":"(letfn [(divisors [n]\n                  (loop [r [] c 1]\n                    (if (< c n)\n                      (recur (if (zero? (rem n c))\n                               (conj r c)\n                               r)\n                             (inc c))\n                      r)))]\n  (fn [n]\n    (= n (reduce + (divisors n)))))","user":"51dafedee4b09f6bc204eee2"},{"problem":80,"code":"(fn [n] \n    (=\n        n\n        (apply + \n            (filter #(zero? (mod n %)) \n                (range 1 n)))))","user":"54fdaeace4b07d26eda61d39"},{"problem":80,"code":"(fn [n] (= (reduce + (filter #(= (rem n %) 0) (range 1 n))) n))","user":"57002b81e4b08d47c97781c7"},{"problem":80,"code":"(fn [x] (->> (range 1 x) (filter #(= 0 (mod x %))) (apply +) (= x)))","user":"551afdf8e4b07993ea3788cb"},{"problem":80,"code":"(fn [number]\n  (let [factors (filter #(zero? (rem number %)) (range 1 number))]\n    (= number (apply + factors))))","user":"60948c3ae4b00e9e6653c3e7"},{"problem":80,"code":"(fn [n]\n  (let [is-divisor? #(= (rem n %) 0)\n        all-divisors (filter is-divisor? (range 1 n))\n        sum-divisors (apply + all-divisors)]\n    (= n sum-divisors)))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":80,"code":"#(\n  let [d (filter \n  (fn [i] (= (mod % i) 0))\n   (range 1 %))]\n    (= % (reduce + d))\n  )","user":"57a5bdc4e4b0a966079561fd"},{"code":"(fn [num]\n  (let [divisors (fn [num]\n                   (for [x (range 1 (inc (/ num 2)))\n                         :when (= (mod num x) 0)]\n                     x))\n        divisor-sum (fn [num]\n                      (reduce + (divisors num)))]\n    (= (divisor-sum num) num)))","problem":80,"user":"5233ad08e4b07e3ee2be83ac"},{"problem":80,"code":"(fn [n]\n  (=\n   (apply + (filter #(zero? (rem n %)) (range 1 n)))\n   n))","user":"574dfcb8e4b02ea11479923a"},{"problem":80,"code":"(fn perfect [n]\n (let [divisors (fn [n] (loop [d 2 r '(1)]\n                                               (cond \n                                                (> d n) r  \n                                                (zero? (mod n d)) (recur (inc d) (cons d r))\n                                                :else (recur (inc d) r))))]\n   (= (apply + (rest (divisors n))) n)))","user":"525b142fe4b0cb4875a45d05"},{"problem":80,"code":"(fn[x]\n  (= x (apply + (filter #(= 0 (rem x %))\n                        (range 1 (+ 1 (/ x 2)))))))","user":"5a067f26e4b01bb0ae8afdcc"},{"code":"#(if (= % (reduce + (map (fn[x](/ % x))(filter (fn[z](not (zero? z)))(filter integer? (map (fn[x](if (not= x 0)(/ % x) 0))(range %))))))) true false )","problem":80,"user":"4ed2dd98535d44c135fd68e2"},{"code":"(fn perfect-number [n]\n  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4ec75077535d6d7199dd36e0"},{"code":"(fn [n]\n  (let [base (range 1 n) div  (map #(if (= (mod n %1) 0)  %1 0 ) base)]\n\t     (= n (reduce + div))))","problem":80,"user":"4e739e13535dff18050a9c76"},{"problem":80,"code":"(fn [n]\n  (loop [i 1\n         result []]\n    (if (>= i n)\n      (= (reduce + 0 result) n)\n      (recur (inc i)\n             (do\n               (if (zero? (mod n i))\n                 (conj result i)\n                 result))))))","user":"5c558070e4b0fb8c5ffd9a1e"},{"code":"(fn [x]\r\n  (= \r\n  (apply + (filter #(zero? (mod x %)) (range 1 x)))\r\n   x))","problem":80,"user":"4db03279838c48654951d9bc"},{"problem":80,"code":"(fn \n  [n]\n  (letfn [(divisors [n] (filter #(zero? (mod n %)) (range 1 n)))]\n    (= n (reduce + (divisors n)))))","user":"563a30d7e4b0bfe05bf117f9"},{"code":"(fn perfect? [n]\n  (let [divisors (for [d (range 1 n)\n                       :when (= (mod n d) 0)]\n                   d)]\n    (= (reduce + divisors) n)))","problem":80,"user":"526ee63de4b03e8d9a4a733f"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter #(zero? (mod n %))\n                        (range 1 (inc (quot n 2)))))))","user":"58e58ae9e4b056aecfd47c9a"},{"problem":80,"code":"(fn [n]\n\n  (->> (dec n)\n\n       (range)\n\n       (map inc)\n\n       (filter #(= (mod n %) 0))\n\n       (apply +)\n\n       (= n)))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":80,"code":"(fn perfect [n]\n  (= n\n     (reduce +\n        (filter #(zero? (mod n %)) (range 1 n))\n      )\n  ))","user":"548f5086e4b0e286459a1239"},{"code":"(fn [x]\n  (->> (range 1 (dec x))\n       (filter #(zero? (mod x %)))\n       (apply +)\n       (= x)\n       )\n  )","problem":80,"user":"50ebd63ce4b04edc3377703c"},{"problem":80,"code":"#(= (apply + (for [i (range 1 %) :when (= 0 (mod % i))] i)) %)","user":"5464a536e4b01be26fd746cf"},{"problem":80,"code":"(fn [n]\n     (->>\n       (reduce #(if (= (mod n %2) 0) (conj %1 %2) %1) [] (range 1 n))\n       (apply +)\n       (= n)\n       ))","user":"59e0f38ae4b08badc2a0c500"},{"problem":80,"code":"(letfn [(divisor?\n         [x y]\n         (== 0 (mod x y)))\n        (divisors\n         [n]\n         (take-while (partial > n)\n                     (filter (partial divisor? n)\n                             (iterate inc 1))))]\n  #(= (reduce + (divisors %)) %))","user":"5829d9f8e4b051871117bf4d"},{"problem":80,"code":"(fn [x]\n  (= x \n  (reduce + (filter #(= 0 (mod x %)) (range 1 x)))))","user":"5272645de4b03e8d9a4a742c"},{"problem":80,"code":"(fn [n]\n  (let [sub (fn [x] (filter #(zero? (mod x %)) (range 1 x)))]\n    (= n (apply + (sub n)))))","user":"56669819e4b0e91d5f5c5674"},{"code":"(fn [x]\n  (->> (range 1 x)\n    (filter #(zero? (mod x %)))\n    (apply +)\n    (= x)))","problem":80,"user":"51e58e02e4b0efabf93c02d0"},{"code":"(fn [num]\n  (= num\n     (reduce + (filter #(zero? (mod num %)) (range 1 num)))))","problem":80,"user":"4f03818e535dcb61093f6b00"},{"code":"(fn [n] (not (nil? (some #{n} [6 496 8128]))))","problem":80,"user":"4dfe65a1535d04ed9115e787"},{"problem":80,"code":"#(= (dec %) (apply + ((fn [n d acc] \n   (cond\n    (= n d) acc\n    (= 0 (rem n d)) (recur n (inc d) (conj acc d)) \n    :else (recur n (inc d) acc))) % 2 [])))","user":"4faf97d8e4b081705acca258"},{"problem":80,"code":"(fn is-perfect [number] (= number (apply + (filter #(= 0 (rem number %)) (rest (range number))))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":80,"code":"(fn test [x]\n  (letfn [(divisor? [y]\n                    (= (mod x y) 0))]\n    (= x (reduce + (filter divisor? (range 1 (dec x)))))))","user":"579332c2e4b0e215f87e8452"},{"problem":80,"code":"(fn \n  [x] \n  (= (apply + (filter #(zero? (rem x %)) (range 1 x))) x))","user":"56d1afd9e4b0ea9b8538f791"},{"problem":80,"code":"(fn perfect-number? [num]\n  (= num (reduce #(if (= 0 (rem num %2))\n                    (+ %1 %2)\n                    %1)\n                 0\n                 (range 1 (+ 1 (/ num 2))))))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":80,"code":"(fn [x]\n  (or \n   (= x 6)\n   (= x 496)\n   (= x 8128)\n))","user":"5ce867fce4b0a17bb84e2baf"},{"code":"(fn [x] (= x (reduce + \n  (map #(if (= (rem x %) 0) % 0) (range 1 x)))))","problem":80,"user":"4ea9b80c535d7eef30807306"},{"code":"#(= % (apply + (for [x (rest (range %)) :when (= (rem % x) 0)] x)))","problem":80,"user":"53973e7be4b0b51d73faaee6"},{"problem":80,"code":"#(= (apply + (filter (fn [y] (= (rem % y) 0)) (range 1 %))) %)","user":"54b13a40e4b09f271ff37d1b"},{"code":"#(= % (reduce\r\n        +\r\n        (into\r\n         #{}\r\n         (flatten\r\n          (map\r\n           (fn [x d]\r\n             (loop [x x y [1] d d]\r\n               (let [x (/ x d)]\r\n                 (if (instance? Long x) (recur x (conj y x) d) y))))\r\n           (cycle [%]) (range 2 %))))))","problem":80,"user":"4e57d1e2535d8a8b8723a289"},{"problem":80,"code":"(fn [n]\n  (->> n\n       (range 1)\n       (filter #(= (rem n %) 0))\n       (reduce +)\n       (= n)))","user":"5cb41c40e4b026601754b911"},{"problem":80,"code":"(fn numm? [n] (if\n                 (= n (reduce + (filter (comp zero? (partial rem n)) (range 1 n))))\n                 true false))","user":"557e8326e4b05c286339e0d7"},{"problem":80,"code":"(fn [n] (= n (apply + (butlast (filter #(= 0 (mod n %)) (range 1 10000))))))","user":"5f8e2a08e4b0715f5002d767"},{"problem":80,"code":"(fn perfect? [x]\n    (letfn [(divisors [n]\n              (->> (range 1 n)\n                   (filter #(zero? (mod n %)))))]\n      (= x (apply + (divisors x)))))","user":"5470b3d0e4b00cfc9eacc1bb"},{"problem":80,"code":"(fn [n]\n  (letfn [(prime? [n]\n            (if (< n 2)\n              false\n              (let [sqrt (Math/sqrt n)]\n                (loop [d 2]\n                  (cond\n                    (> d sqrt) true\n                    (zero? (mod n d)) false\n                    :else (recur (inc d)))))))\n          (next-prime [p]\n            (if (prime? p) p (recur (inc p))))\n          (perfect-number [p]\n            (int\n              (* (Math/pow 2 (dec p))\n                 (dec (Math/pow 2 p)))))]\n    (loop [p 2]\n      (let [pn (perfect-number p)]\n        (cond\n          (= n pn) true\n          (> pn n) false\n          :else (recur (next-prime (inc p))))))))","user":"5777c3d6e4b0979f8965164f"},{"code":"(fn [n]\r\n    (= n (reduce +\r\n\t\t(filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4e821ca5535db62dc21a62c2"},{"code":"(fn [n]\n    (= n (apply + (filter #(= (mod n %1) 0) (range 1 n)))))","problem":80,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn [n]\n  (let [quots (filter\n              #(zero? (mod n %)) \n              (range 1 (inc (quot n 2))))]\n    (= (apply + quots) n)))","problem":80,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn [n]\n  (let [factors (for [n' (range 1 n) :when (zero? (mod n n'))] n')]\n    (= n (reduce + factors))))","problem":80,"user":"5213d7aae4b0961f15ac4d72"},{"code":"(fn [x]\n  (=\n   (apply + (filter #(= (mod x %) 0) (range 1 x)))\n   x))","problem":80,"user":"534941d1e4b084c2834f4a60"},{"code":"(fn [x]\n  (= x \n    (apply +\n      (filter\n        #(= 0 (mod x %1)) \n        (range 1 x)  \n      )\n    )\n  ) \n)","problem":80,"user":"5176afd2e4b085adf681d889"},{"problem":80,"code":"(fn perfect? [n]\n  (let [ds (loop [d 2, acc [1]]\n             (cond (> d (/ n 2)) acc\n                   (= 0 (mod n d))     (recur (inc d) (conj acc d))\n                   :else               (recur (inc d) acc)))]\n    (= (apply + ds) n)))","user":"563772a9e4b0bfe05bf117d7"},{"problem":80,"code":"(fn [n]\n  (->> (filter #(zero? (mod n %)) (range 1 (inc (quot n 2))))\n       (apply + )\n       (= n)))","user":"52761edae4b03e8d9a4a74d4"},{"code":"(fn perfect [n]\n  (letfn[\n    (divisor [a b] \n      (== 0 (rem b a)))]\n  (== \n    n\n    (reduce + 0 \n      (filter \n        #(divisor % n) \n        (range 1 n))))))","problem":80,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn [x] (= x (reduce + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"4e8d5911535d65386fec2133"},{"problem":80,"code":"(fn is-perfect\n  [x]\n  (let [divisors ((fn get-divisors\n                    ([num] (get-divisors num (dec num) []))\n                    ([num current divisors]\n                     (cond (= 0 current) divisors\n                           (= 0 (rem num current)) (get-divisors num\n                                                                 (dec current)\n                                                                 (cons current divisors))\n                           :else (get-divisors num\n                                               (dec current)\n                                               divisors)))) x)]\n    (= (reduce + divisors) x)))","user":"4e9ff8d0535d7eef3080729c"},{"code":"(fn [x]\n  (= x (apply + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"504e04a4e4b078edc5f59397"},{"problem":80,"code":"#(->> %\n      (range 1)\n      (filter (comp zero? (partial mod %)))\n      (reduce +)\n      (= %))","user":"4fceda40e4b03432b189f407"},{"code":"(let [div (fn [n]\n            (filter #(= 0 (rem n %))\n                 (range 1 (inc (quot n 2)))))]\n  (fn [n] (= n (apply + (div n)))))","problem":80,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":80,"code":"(fn\n  [n]\n  (let [devs       \n         (loop [n n, div 2, rez #{1}]\n           (if (>= div (/ n 2))\n             rez\n             (if (zero? (mod n div))\n               (recur n (inc div) (conj rez div (/ n div)))\n               (recur n (inc div) rez))))]\n        (= n (reduce + devs))))","user":"56b2630be4b0982f16b37e03"},{"problem":80,"code":"(fn perfect [n]\n  (= n\n     (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"593910eae4b02506e01a29f4"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisors \n        (into #{1} \n              (mapcat #(if (zero? (rem n %)) \n                         (list % (/ n %)) \n                         '()) \n                      (range 2 (inc (int (Math/sqrt n))))))]\n    (= n (apply + divisors))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"#(loop [x 1 sum 0] (cond (= sum %) true (> sum %) false :else (recur (inc x) (+ sum x))))","problem":80,"user":"4e79a143535db169f9c796a2"},{"code":"(fn [j] (= j \n  (apply + \n    ( filter #(zero? (rem j %)) (range 1 (inc (/ j 2) )) )) ))","problem":80,"user":"4fc43a8ee4b081705acca346"},{"problem":80,"code":"(fn [n]\n    (let [divisors (filter #(= (mod n %) 0) (range 1 n))]\n      (= (apply + divisors) n)))","user":"5f06caa7e4b0cf489e8d7f52"},{"code":"(fn [n]\n  (letfn [(divisors [n]\n            (filter #(zero? (rem n %)) (range 1 n)))]\n    (= n (reduce + (divisors n)))))","problem":80,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter #(zero? (mod n %)) (range 1 (inc (int (/ n 2))))))))","user":"57d9bca1e4b0bd073c202405"},{"problem":80,"code":"(fn [n]\n   (= n (apply + (filter #(= 0 (rem n %)) (range 1 (inc (/ n 2)))))) )","user":"576b4e6be4b0a07e8fc1812b"},{"code":"(fn [x] (->> x (range 1) (filter #(= 0 (mod x %))) (#(apply + %)) (#(= x %))))","problem":80,"user":"4dbe8729535d020aff1edf62"},{"problem":80,"code":"(fn perfect-num? [x]\n   (->> (range 1 (inc (/ x 2)))\n        (filter #(zero? (mod x %)))\n        (reduce +)\n        (= x)))","user":"535eaa73e4b04ce2eb3ed2d4"},{"code":"(fn d[x] \n    (= x (apply + (reduce #(if (= (rem x %2) 0) (conj % %2) %) [] (range 1 x)))))","problem":80,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn [num] \n\t(= \n\t\t(some #{num} (for [x [2 3 5 7]] (int (* (Math/pow 2 (dec x)) (dec (Math/pow 2 x))))))\n \t\tnum))\n\n;[2 3 5 7] is the list of prime numbers. Should be replaced by (primes num) for a fully\n; working perfect numbers function\n; See chouser solution for a more concise algo","problem":80,"user":"51c09719e4b0c9c82288293c"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisors (fn [x] (filter #(= (rem x %) 0) (range 1 (/ (+ n 1) 2))))]\n    (= n (reduce + (divisors n)))))","user":"5edfb1e5e4b0c7845d86b107"},{"problem":80,"code":"(fn [n]\n  (= n                                 ;4) If sum = n, it's a perfect number\n     (apply +                          ;3) Add all the factors\n            (filter #(zero? (rem n %)) ;2) Filter out all that aren't factors of n\n                    (range 1 n)))))    ;1) Take numbers [1..n)","user":"4f80db02e4b033992c121bf9"},{"code":"(fn testme [num] \n  (= \n    (reduce + (filter #(= (mod num %) 0) (range 1 (+ (/ num 2) 1)))) \n    num))","problem":80,"user":"4f2f6678e4b0d6649770a06e"},{"code":"#(=\n  %\n  (apply + (for [x (range 1 %) :when (= 0 (mod % x))] x))\n)","problem":80,"user":"4e6df3c9535d5021c1a895fa"},{"problem":80,"code":"(letfn [(divisors [n]\n          (filter #(zero? (rem n %))\n                  (range 1 (inc (quot n 2)))))]\n  #(= % (apply +' (divisors %))))","user":"59eb63e3e4b0249b7282077c"},{"code":"(fn [x]\n    (let [prime? (fn [n]\n\t   (cond\n\t     (< n 2) false\n\t     (or (= 2 n) (= 3 n)) true\n\t     (= 0 (mod n 2)) false\n\t     :else\n\t     (let [m (int (java.lang.Math/sqrt n))]\n\t\t  (loop [i 3]\n\t\t     (cond\n\t\t       (= 0 (mod n i)) false\n\t\t       (> i m) true\n\t\t       :else\n\t\t       (recur (+ 2 i)))))))\n\t       prime-number (fn [n] (last (take n (filter prime? (range)))))\n\t       perfect-number (fn [n]\n\t\t\t(* (java.lang.Math/pow 2 (dec n)) (dec (java.lang.Math/pow 2 n))))]\n\t     (if\n\t       (not (= 0 (mod x 2))) false\n\t       (loop [y 1 p (perfect-number (prime-number y))]\n\t\t  (cond\n\t\t    (= p x) true\n\t\t    (> p x) false\n\t\t    :else\n\t\t    (recur (inc y) (perfect-number (prime-number (inc y)))))))))","problem":80,"user":"4f066916535dcb61093f6c10"},{"code":"#(= % (reduce + (for [x (range 1 %) :when (= 0 (mod % x))] x)))","problem":80,"user":"4ef48422535dced4c769f236"},{"problem":80,"code":"(fn foo [n]\n  (= (* 2 n) (reduce + (into\n    #{} (mapcat #(vector % (/ n %)) (filter\n                                      #(zero? (rem n %))\n                                (range 1 (inc (Math/sqrt n)))))))))","user":"56a01895e4b0542e1f8d149f"},{"problem":80,"code":"(letfn [(prime-numbers []\n          (reductions\n           (fn [a _]\n             (loop [x (inc a)]\n               (if (some (comp zero? (partial rem x))\n                         (->> x Math/sqrt Math/floor inc (range 2) (filter odd?) (cons 2)))\n                 (recur (inc x))\n                 x)))\n           2\n           (range)))]\n  (fn perfect-number? [x]\n    (loop [[p :as xs] (prime-numbers)]\n      (let [n (int (* (Math/pow 2 (dec p)) (- (Math/pow 2 p) 1)))]\n        (cond\n          (= x n) true\n          (< x n) false\n          :else (recur (rest xs)))))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"code":"(fn [n]\n  (= n (apply + (filter #(zero? (rem n %))\n                        (range 1 (inc (int (/ n 2))))))))","problem":80,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":80,"code":"(fn [n] (= (apply +(filter #(zero? (mod n %)) (range 1 n))) n))","user":"53f3a4ace4b0742d9025b0f7"},{"code":"(fn [n] (if  (= n (reduce + (filter #(if (ratio? (/ n %)) false true) (rest (range n))))) true false))","problem":80,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":80,"code":"(fn [num] (= num (reduce + (filter #(zero? (mod num %)) (map inc (range (/ num 2)))))))","user":"56018dd4e4b04bb52996e18f"},{"problem":80,"code":"(fn prob80\n  [num]\n  (letfn [(divisors [n]\n            (filter #(zero? (mod n %)) (range 1 (+ 1 (/ n 2))))\n            )]\n    (= (reduce + (divisors num)) num)))","user":"4ebbff41535dfed6da9c6d78"},{"problem":80,"code":"(fn [n] \n  (let [divisors  (->> (range 1 (inc (quot n 2)))       \n                       (filter #(zero? (rem n %))))]\n   (= (apply + divisors) n)))","user":"4fc4eb1ee4b081705acca354"},{"problem":80,"code":"(fn perfect-number?\n  [num]\n  (->> (range 1 (inc (/ num 2)))\n       (filter #(zero? (mod num %)))\n       (reduce +)\n       (= num)))","user":"536e5055e4b0fc7073fd6e6b"},{"code":"(fn [n]\n  (let [[ones zeros other]\n    (map count\n      (partition-by\n        identity (Integer/toString n 2)))]\n  (if\n    (and\n      (.isProbablePrime\n        (BigInteger/valueOf ones) 20)\n      (= zeros (- ones 1))\n      (= other nil))\n    true\n    false)))","problem":80,"user":"4ec56b5b535d6d7199dd369f"},{"code":"(fn [a]\r\n  (letfn [\r\n    (divisors [n]\r\n      (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))]\r\n    (= a (reduce + (divisors a)))))","problem":80,"user":"4dd52e29535dae65d5c462e5"},{"code":"(fn perfect? [n]\r\n  (letfn [(sum-divs [n]\r\n            (loop [an []  ns (range 1 (inc (quot n 2)))]\r\n              (if (empty? ns)\r\n                (reduce + an)\r\n                (if (zero? (rem n (first ns)))\r\n                  (recur (conj an (first ns)) (rest ns))\r\n                  (recur an (rest ns))))))]\r\n    (= n (sum-divs n))))","problem":80,"user":"4dd62278535d2dad7130b5c7"},{"problem":80,"code":"(fn [n] \n   (= n\n      (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","user":"5cdfe2aee4b0a17bb84e2b04"},{"code":"(fn perfect? [n]                                   ;; (perfect? 137438691328) a dozen of them per second\n  (let [ds (filter #(= 0 (mod n %)) \n                   (range 1 (inc (Math/sqrt n))))]\n    (->> (into #{1} (mapcat #(vector (/ n %) %) \n                    (rest ds)))\n         (apply +)\n         (= n))))","problem":80,"user":"50c781bbe4b00bb60fe0c535"},{"problem":80,"code":"(fn [n] \n   (= n (apply +  (filter #(zero? (rem n %1)) (range 1 n)))))","user":"538db083e4b0b51d73faae74"},{"problem":80,"code":"(fn [v] (=\n       (apply + \n        (filter #(= 0 (mod v %)) (range 1 v))) v))","user":"54908cc1e4b0b312c081ff32"},{"problem":80,"code":"(fn [n] (= (apply + (filter #(= 0 (rem n %)) (range 1 n))) n))","user":"543366dde4b0b6b47310fcdf"},{"code":"#(= %1 (reduce + (for [i (range 1 %1) :when (= 0 (mod %1 i))] i)))","problem":80,"user":"4f88ae35e4b033992c121c6d"},{"code":"(fn[a] (= a (apply + (filter #(= (mod a %) 0) (range 1  (inc (/ a 2)))))))","problem":80,"user":"50463347e4b011c5dfee771e"},{"code":"(fn perfect? [n]\n  (->> (range 1 n) (filter #(zero? (mod n %))) (reduce +) (= n)))","problem":80,"user":"4f6160a7e4b0defedf855fbe"},{"problem":80,"code":"(fn [x] (= x (reduce + (filter #(= 0 (mod x %)) (range 1 (dec x))))))","user":"5b465b8be4b02d533a91bc65"},{"code":"(fn [a] (= a (reduce + (filter #(zero? (mod a %)) (range 1 a)))))","problem":80,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":80,"code":"(fn [nr]\n  (->> nr\n       (range 1)\n       (filter #(= 0 (mod nr %)))\n       (apply +)\n       (= nr)))","user":"500e6c4ee4b04a05d36fcc05"},{"problem":80,"code":"(fn [num]\n  (let [sq (int (Math/sqrt num))]\n    (->>\n      (loop [n num\n             divs {1 1}\n             div 2]\n        (if (> div sq)\n          divs\n          (if (zero? (rem n div))\n            (let [q (quot n div)\n                  divs (assoc divs div (inc (get divs div 0))\n                                   q (inc (get divs q 0)))]\n              (recur q divs div))\n            (recur n divs (inc div)))))\n      (map (fn [[div k]] (reduce (fn [pows _] (conj pows (* div (last pows))))\n                                 [div]\n                                 (range 1 k))))\n      flatten\n      set\n      (reduce +)\n      (= num))))","user":"5169d422e4b051e2a73aba53"},{"code":"(fn [val]\n  (letfn [(sqrt-int [val]\n            (Math/round (Math/sqrt val)))\n(divisor-groups [n]\n  (filter\n   #(integer? (last %))\n   (map\n    #(list % (/ n %))\n    (range 1\n           (inc (sqrt-int n))))))\n  \n(divisors [n]\n  (distinct\n   (sort\n    (flatten\n     (divisor-groups n)))))]\n(= val\n  (reduce +\n    (butlast (divisors val))))))","problem":80,"user":"5014754de4b094324338f8e5"},{"code":"(fn [n]\n (= n (apply +  \n             (filter #(= (rem n %) 0) (range 1 (inc (/ n 2 )))) )))","problem":80,"user":"4e5fb634535d8ccf87e9fe4a"},{"problem":80,"code":"(fn perfect-num? [n]\n  (letfn [(divisor-n? [t] (zero? (mod n t)))]\n    (->> (range 1 n)\n         (filter divisor-n?)\n         (apply +)\n         (= n))))\n  \n;(fn [n] (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"567e418fe4b0feffd0d18eb1"},{"problem":80,"code":"(fn\n  [n]\n  (letfn [(divisors \n           [x]\n           (filter \n            (fn [k] (and (< k x) (= 0 (mod x k)))) \n            (range 1 x)))]\n    (= n (reduce + (divisors n)))))","user":"53cbe808e4b00fb29b2212d4"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divs (filter #(zero? (mod n %)) (range 1 (dec n)))]\n    (= n (apply + divs))))","user":"5a621702e4b0512ff01cd983"},{"code":"(fn [n] \r\n  (let [divisors (fn [n] (filter #(= 0 (rem n %)) (range 1 n)))]\r\n    (= n (apply + (divisors n)))))","problem":80,"user":"4e0e0529535d04ed9115e7b9"},{"problem":80,"code":"(fn perfect[n]\n  (->> (range (/ n 2))\n       (map inc)\n       (filter #(= 0 (mod n %)))\n       (apply +)\n       (= n)\n              \n              \n        ))","user":"54af6fb0e4b09f271ff37d08"},{"code":"(fn [n]\n  (= n\n    (apply +\n      (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"(fn [n] (= n (reduce + (filter #(zero? (rem n %1)) (range 1 n)))))","problem":80,"user":"50a5f72fe4b0aa96157e2611"},{"code":"(fn perfect? [n]\n  (= n (apply + (filter #(zero? (rem n %)) (range 1 (+ 1 (/ n 2)))))))","problem":80,"user":"510cd1dde4b078ea71921124"},{"problem":80,"code":"(fn is-perfect? [n]\n  (= n (reduce + (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))))","user":"571d063ee4b0145328a76272"},{"code":"(fn perfect?\n  [x]\n  (= (apply + (filter #(zero? (mod x %)) (range 1 (inc (/ x 2))))) x))","problem":80,"user":"52084f75e4b01ce6bbf31dde"},{"problem":80,"code":"(fn [x] (= x (reduce + (filter #(zero? (mod x %)) (range 1 x) ) ) ))","user":"54e51c7be4b024c67c0cf7f7"},{"problem":80,"code":"(fn [n]\n\t(= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"535f0cbde4b04ce2eb3ed2d9"},{"code":"(fn [n] (= n (apply + \n  (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"50563ae2e4b0ce54f56f0405"},{"problem":80,"code":"(fn perfect-number? [n]\n  (->> (rest (range n))\n       (filter #(= 0 (mod n %)))\n       (reduce +)\n       (= n)))","user":"5bab31f1e4b0a20761a23471"},{"code":"#(= % (apply + (filter (fn[y](= 0 (mod % y))) (range 1 %))))","problem":80,"user":"51b41150e4b0f094dd986fac"},{"problem":80,"code":"(fn [n]\n  (->> (quot n 2)\n       (inc)\n       (range 1)\n       (filter #(= (rem n %) 0))\n       (reduce + 0)\n       (= n)))","user":"60aecd73e4b00e9e6653c49a"},{"problem":80,"code":"(fn [number] (= number (apply + (map #(if (= (rem number %) 0) % 0) (rest (range number))))))","user":"54e4edcae4b024c67c0cf7f3"},{"problem":80,"code":"(fn is-perfect[n] (= n (apply + (filter #(= (rem n %) 0) (range 1 n)))))","user":"59a0262ee4b0871e7608b82d"},{"problem":80,"code":"(fn [x] (->> (range 1 x) (filter #(zero? (rem x %))) (apply +) (= x) ))","user":"512b07f7e4b078b06821febb"},{"problem":80,"code":"(fn [x]\n  (= (reduce + (filter #(= 0 (rem x %)) (range 1 x ))) x))","user":"581a5fdbe4b0e114eb51a002"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(= 0 (mod n %)))\n       (reduce +)\n       (= n)))","user":"5666500ee4b0e91d5f5c566d"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [n] (filter #(zero? (rem n %)) (range 1 n)))]\n    (= n (apply + (divisors n)))))","user":"53b71b94e4b047364c0444cd"},{"code":"(fn [n]\n  (= n\n    (apply + \n      (reduce #(if (= 0 (mod n %2))\n                  (conj (conj % %2) (/ n %2))\n                  %)\n        [1] (range 2 (inc (int (java.lang.Math/sqrt n))))))))","problem":80,"user":"5063fe48e4b075d771da6f9e"},{"code":"#(= (apply + (for [x (range 1 %) :when (= (mod % x) 0)] x)) %)","problem":80,"user":"4f047542535dcb61093f6bc7"},{"code":"(fn [x]\n  (= x (apply + (filter #(= 0 (rem x %)) (range 1 (inc (/ x 2)))))))","problem":80,"user":"4ee4f4a9535d1385b2869d85"},{"code":"(fn [n]\n  (= n (reduce +\n    (filter #(zero? (mod n %))\n      (range 1 n)))))","problem":80,"user":"4f3e5e87e4b0e243712b1f83"},{"problem":80,"code":"(fn [x]\n  (letfn [(divisors [n]\n            (filter #(= 0 (mod n %))\n                    (range 1  n)))]\n    (= (reduce + (divisors x))\n       x)))","user":"580bd81ee4b0849f6811b711"},{"problem":80,"code":"(fn find-perfect [n] \n  (= n (reduce +\n               (filter\n                #(zero? (mod n %))\n                (range 1 n)))))","user":"553478dce4b09218d5f44f9d"},{"problem":80,"code":"(fn perfect-numbers [x] \n  (->> \n    (range 1 x)\n    (filter #(zero? (mod x %)))\n    (reduce +)\n    (= x)))","user":"52616198e4b03e8d9a4a705e"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce +\n             (for [x (range 1 n)\n                   :when (= 0 (mod n x))]\n               x))))","user":"59c94a69e4b0a024fb6ae576"},{"code":"(fn [x] (= x (reduce #(if (zero? (mod x %2)) (+ %1 %2) %1) 1 (range 2 (inc (quot x 2))))))","problem":80,"user":"4e5ecd65535d8a8b8723a2d6"},{"problem":80,"code":"(fn perfect? [n]\n  (letfn [(divisors [n]\n                    (filter #(= (mod n %) 0) (range 1 (inc n))))]\n    (= (+ n n)\n       (apply + (divisors n)))))","user":"567b39b6e4b05957ce8c61a3"},{"problem":80,"code":"(fn [n]\n  (let [possible-divsors (range 1 (/ (inc n) 2))\n        divsors (filter #(zero? (rem n %)) possible-divsors)]\n    (= n (apply + divsors))))","user":"5aefdc7fe4b0cc2b61a3bc3f"},{"problem":80,"code":"(fn p80 [n]\n  (let [n-ints (map #(/ n %) (range 2 (+ 1 n)))]\n    (->> n-ints\n     (filter integer? )\n     (reduce + )\n     (= n)\n     )\n    )\n\n  )","user":"5400e918e4b0de5c41848619"},{"code":"(fn [x] (= x (apply + (filter #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"4e6ebd4a535d5021c1a89610"},{"problem":80,"code":"(fn [n]\n   (letfn [(divisors [num curr acc]\n     (if (= num curr)\n       acc\n         (divisors num (inc curr)\n           (if (= 0 (mod num curr))\n             (conj acc curr)\n             acc))))]\n     (= n (apply + (divisors n 1 [])))))","user":"53214efbe4b09d4e7a9b54b2"},{"code":"(letfn\n  [(divisors [n] (filter #(let [d (/ n %)] (= d (int d))) (range 1 (inc (/ n 2)))))]\n  (fn [n] (= n (reduce + 0 (divisors n)))))","problem":80,"user":"5002b6e5e4b0678c553fc42c"},{"problem":80,"code":"(fn [n] (->> (range 1 n)\n               (filter #(zero? (rem n %)))\n               (reduce +)\n               (= n)))","user":"5f5b624de4b05ea7b9adc42f"},{"problem":80,"code":"(fn [n]\n  (let [sum-divs (fn [nn]\n                   (->>(quot nn 2)\n                       (inc )\n                       (range 1)\n                       (filter #(= (rem nn %) 0))\n                       (reduce + )))]\n    (= n (sum-divs n))))","user":"58f64f71e4b0438e51c2cef0"},{"problem":80,"code":"(fn [num] \n  (= num (apply + (filter #(integer? (/ num %)) (next (range num))))))","user":"541f89a5e4b01498b1a71a99"},{"problem":80,"code":"(fn [x] (= x (apply + (filter #(= 0 (mod x %)) (rest (range x))))))","user":"53fc8424e4b0de5c418485b3"},{"problem":80,"code":"#(->> (range 1 (inc (quot % 2)))\n               (filter (fn [x] (= 0 (mod % x))))\n               (reduce +)\n               (= %))","user":"5d29c06be4b01671435dbc6b"},{"code":"(fn [num]\n   (loop [result [] index 1]\n     (if (= index num)\n       (if (= (reduce + result) num)\n         true\n         false\n         )\n       (if (= 0 (mod num index))\n         (recur (conj result index) (inc index))\n         (recur result (inc index))\n         )       \n       )\n     )   \n   )","problem":80,"user":"5106dc1be4b01150e115ebf0"},{"problem":80,"code":"(fn perfect? [n]\n  (let [factors (filter #(zero? (mod n %)) (range 1 (inc (/ n 2))))]\n    (= n (apply + factors))))","user":"601aaa93e4b0bf4ca6b10926"},{"code":"(fn [n]\n  (let [d (filter #(zero? (mod n %)) (range 1 n))]\n    (= (apply + d) n)))","problem":80,"user":"4edd038c535d10e5ff6f5327"},{"code":"(fn [n]\n  (= n\n     (apply + \n         (filter #(zero? (mod n %)) (range 1 (inc (quot n 2))))\n      )\n  )\n)","problem":80,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":80,"code":"(fn perfect-num? [n]\n   (= n (reduce + (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))))","user":"59f043d0e4b0966464fe6a3d"},{"problem":80,"code":"(fn __\n  [x]\n  (= x (apply + (filter #(= 0 (mod x %)) (range 1 x)))))","user":"5ac91d90e4b0e27600da77bd"},{"problem":80,"code":"(fn [n]\n  (= n \n     (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"5cb71f35e4b026601754b961"},{"code":"(fn [x] \n  (= \n    x\n    (reduce + (filter #(= 0 (mod x %)) (range 1 x)))))","problem":80,"user":"5061cc17e4b0a30dc9a35d34"},{"code":"(fn\n    [num]\n    (loop [cur-num (- num 1) sum-vals [] sum-tot 0]\n        (if (> num 1)\n            (if (> cur-num 0)\n                (if (= (mod num cur-num) 0)\n                    (recur (- cur-num 1) (conj sum-vals cur-num) (+ sum-tot cur-num))\n                    (recur (- cur-num 1) sum-vals sum-tot))\n                (if (= sum-tot num)\n                    true\n                    false)))))","problem":80,"user":"4e14b925535d04ed9115e7df"},{"code":"(letfn [(divisors [x]\n          (filter #(zero? (rem x %)) (range 1 (dec x))))]\n  (fn [x] \n    (= x (apply + (divisors x)))))","problem":80,"user":"51eadb98e4b0f1f103a0d153"},{"code":"#(= % (apply + (filter (fn [n] (= (mod % n) 0)) (range 1 %))))","problem":80,"user":"4e52d815535d302ef430da77"},{"problem":80,"code":"(fn [n]\n  (->> (range)\n       (map #(apply + (range %)))\n       (drop-while #(< % n))\n       (first)\n       (= n)))","user":"4ed45563535d10e5ff6f52c9"},{"problem":80,"code":"(fn perfectNumber [n]\n         (= n\n            (reduce + (filter #(= 0 (mod n %))\n                              (range 1 (inc (int (Math/floor (/ n 2)))))))))","user":"58c4492be4b021aa9917ed27"},{"problem":80,"code":"(fn perfect-number [n]\n  (let [divisors (for [i (range 1 n)\n                       :when (zero? (mod n i))]\n                   i)]\n    (= n (apply + divisors))))","user":"5f838122e4b01aacbe7a2715"},{"problem":80,"code":"(fn [x]\n  (= x (apply + (filter #(zero? (mod x %))\n                        (range 1 x)))))","user":"58d2af83e4b03c36ff7e5907"},{"code":"(fn [num]\n  (letfn [(divides? [num divisor]\n            (= 0 (mod num divisor)))\n          (divisors [num]\n            (filter (partial divides? num)\n                    (range 1 num)\n                    ))]\n    (= num (reduce + (divisors num)))\n    ))","problem":80,"user":"4ee9ba21535d93acb0a66891"},{"problem":80,"code":"(fn divisor\n  [n]\n  ((fn [acc x]\n     (if (= x 1)\n       (if (= acc (dec n)) true false) \n       (recur (if (zero? (mod n x)) (+ acc x) acc) (dec x)))) 0 (int (/ n 2))))","user":"5594e0e3e4b0c79f6e1db95b"},{"code":"(fn eighty\n  [n]\n  (= n(apply + (take-while #(< % n) (filter #(= 0 (rem n %)) (iterate inc 1))))))","problem":80,"user":"510591dde4b06d28cacc92eb"},{"code":"(fn [n] (= n (reduce + (filter #(= (rem n %) 0) (range 1 (inc (/ n 2 )))))))","problem":80,"user":"4ed55b5d535d10e5ff6f52d8"},{"problem":80,"code":"(fn [n]\n    (let [divisor? #(not (ratio? (/ %1 %2)))\n          get-divisors (fn [n] (filter #(divisor? n %) (range 1 n)))]\n      (= (apply + (get-divisors n)) n)))","user":"58bbcbc8e4b0888cdc949d00"},{"code":"(fn perfect [x]\n  (let[sumofdivisors (apply + (filter\n                               #(= 0 (mod (/ x %) 1))\n                               (range 1 x)))]\n    (= x sumofdivisors)))","problem":80,"user":"50e4f4e9e4b049a987753896"},{"problem":80,"code":"#(->> (range 1 (- % 1))  \n  (filter (fn [x] (= 0 (mod % x))))\n  (reduce +)\n  (= %)\n)","user":"4fc8f671e4b0ee37620e1840"},{"problem":80,"code":"(fn [n]\n  (= n \n     (reduce + \n             (filter \n              \t#(= 0 (rem n %)) \n              \t(range 1 (inc (/ n 2)))))))","user":"5e12327ee4b099d064962fe5"},{"code":"(fn [x]\n  (letfn\n      [(divisors[x] (filter #(zero? (rem x %) ) (range 1 (inc (quot x 2)))))]\n    (= x (reduce + (divisors x)))))","problem":80,"user":"50fa01bce4b07934dda8b0ba"},{"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(= 0 (mod n %)))\n       (apply +)\n       (#(= n %))))","problem":80,"user":"51a3b135e4b0e77c4ca60bf6"},{"problem":80,"code":"(fn [n]\n  (->> n\n      (range 1)\n      (filter (comp zero? #(mod n %)))\n      (reduce +)\n      (= n)))","user":"54236ce1e4b01498b1a71ad1"},{"code":"(fn perf [num]\r\n   (= (apply + (filter #(zero? (mod num %))\r\n                    (range 1 num)))\r\n      num)\r\n   )","problem":80,"user":"4e0d8c27535d04ed9115e7b7"},{"problem":80,"code":"(fn perfect-no\n  [n]\n  (= n (apply + (map (fn [n1] (if (zero? (rem n n1)) n1 0)) (range 1 n)))))","user":"557e9d17e4b05c286339e0d8"},{"code":"(fn [x] (= x (apply + (filter #(zero? ( mod x  %)) (range 1 (inc (quot x 2)))))))","problem":80,"user":"4febb4dae4b0681fd128dc98"},{"code":"(fn [n] (= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn perfect? [n]\r\n  (letfn [(divisors [n] (filter #(zero? (mod n %)) (range 1 n)))]\r\n    (= n (reduce + (divisors n)))))","problem":80,"user":"4dfd4ba8535d04ed9115e781"},{"problem":80,"code":"(fn [num] (= num (reduce + (filter #(= 0 (mod num %)) (map inc (take (- num 1) (range num)))))))","user":"53fc4abae4b0de5c4184859b"},{"problem":80,"code":"#(= % (apply + (filter (fn [n] (zero? (rem % n))) (range 1 %))))","user":"57f9e0bce4b0d3187e900956"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce + (filter #(zero? (rem n %))(range 1 (inc (/ n 2)))))))","user":"554b8572e4b0a04f79299589"},{"code":"(fn [n]\n  (= n (apply + (filter #(= 0 (rem n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"4f77b68de4b0fbe0118ec581"},{"problem":80,"code":"(fn [n] (->> (range 1 n)\n             (filter #(= 0 (rem n %)))\n             (reduce +)\n             (= n)))","user":"553698fae4b09218d5f44fc0"},{"code":"(fn [n] (= n (reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4e6e6630535d5021c1a89609"},{"problem":80,"code":"(fn perfect-number? [x]\n  (= x (reduce + (for [i (range 1 x) :when (= 0 (mod x i))] i))))","user":"52ee0de4e4b05e3f0be25ec1"},{"code":"(fn [x]\n  (= x (reduce + 0\n    (filter #(zero? (mod x %))\n      (range 1 x)))))","problem":80,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"(fn [n] (= n (reduce + (for [i (range 1 n) :when (= 0 (mod n i))] i))))","problem":80,"user":"4db5082e535d87e67b28fe03"},{"problem":80,"code":"(fn perfect-numbers\n  [num]\n  (= num (apply + (reduce (fn [my-list item]\n                            (if (= (mod num item) 0)\n                              (cons item my-list)\n                              my-list)) [] (range 1 num)))))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn perfect [n]\r\n  (let [divisors (filter #(= (rem n %) 0) (range 1 (inc (quot n 2))))]\r\n    (= (reduce (fn [x y] (+ x y)) 0 divisors) n)))","problem":80,"user":"4dd023dd535d5973398f92ad"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors \n           [n]\n           (filter #(zero? (mod n %)) (range 1  n)))]\n    (= (reduce + (divisors n)) n)))","user":"571c2babe4b07c98581c3b73"},{"problem":80,"code":"(fn [n]\n   (let [divisors\n         (filter (complement nil?)\n                 (for [i (range 1 n)]\n                   (when (zero? (mod n i))\n                     i)))]\n     (= (reduce + divisors) n)))","user":"5d28b684e4b092dab7f59c83"},{"problem":80,"code":"(fn [x]\n  (->> (range 1 x)\n       (filter #(zero? (mod x %)))\n       (reduce + 0)\n       (= x)))","user":"5515b138e4b055c2f668d4ed"},{"problem":80,"code":"(fn perfekt? [n]\n  (->> (range 1 n)\n       (reduce #(if (= (mod n %2) 0) \n                  (conj %1 %2) \n                  %1)\n               [])\n       (reduce + 0)\n       (= n)\n       ))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":80,"code":"(fn pnum? [n] \n      (let [range (take-while #(< % n) (iterate inc 1))\n            divs  (reduce (fn [acc v] (if (= 0 (mod n v)) (conj acc v) acc)) '() range)]\n           (= n (apply + divs))\n           )\n      )","user":"5592bf9fe4b0c79f6e1db933"},{"problem":80,"code":"(fn [x] (= x (apply + (filter #(= 0 (mod x %)) (range 1 (inc (quot x 2)))))))","user":"57642916e4b0994c1922fbee"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(= (mod n %) 0) (range 1 n))]\n    (= n (reduce + divisors))))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":80,"code":"(fn [n]\n  (= n (reduce #(if (= (rem n %2) 0)\n                  (+ %1 %2)\n                  %1)\n               0\n               (range 1 n)\n               ))\n\n  )","user":"5dd1fb19e4b0948ae9d9ad51"},{"code":"(fn [x]\n  (= (apply + (filter (fn [y] (= (mod x y) 0)) (range 1 x))) x))","problem":80,"user":"4ee9d697535d93acb0a66895"},{"code":"(fn perfect? [n]\n  (= n\n     (reduce +\n       (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":80,"code":"(fn perfect-numbers [n]\n  (= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"5693a53ee4b0dcc4269f4106"},{"problem":80,"code":"(fn[n] (let [divs (filter #(= 0 (mod n %)) (range 1 n) )] (= n (reduce + divs))  )   )","user":"56a6051fe4b0542e1f8d14e5"},{"problem":80,"code":"(fn [a]\n  (= a (apply + (filter #(= (mod a %) 0) (range 1 (/ (inc a) 2))))))","user":"5416b4a2e4b01498b1a71a01"},{"code":"(fn perfect? [x]\r\n  (let [\r\n  divides? (fn [x y]\r\n    (== 0 (mod y x)))\r\n  divisors (fn [x]\r\n    (->> (range 1 x)\r\n         (filter #(divides? % x))))\r\n  sum (fn [xs]\r\n    (reduce + 0 xs))\r\n  ]\r\n  (== x (sum (divisors x)))))","problem":80,"user":"4e691c79535d8ccf87e9fe97"},{"code":"#(= % (reduce + (for [n (range 1 %) :when (= 0 (rem % n))] n)))","problem":80,"user":"4fad33e8e4b081705acca236"},{"code":"(fn [n]\n  (== n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"5028cd0fe4b01614d1633ffc"},{"code":"#(= (reduce + (for [x (range 1 %) :when (= (mod % x) 0)] x) ) % )","problem":80,"user":"4ee7d177535d93acb0a6686f"},{"code":"(fn [n] (and (pos? n) (= n (reduce + (filter #(= 0 (rem n %)) (range 1 n))))))","problem":80,"user":"5095f761e4b0ba05ca7aebfd"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(= 0 (mod n %)))\n       (apply +)\n       (= n)))","user":"5a95c639e4b0d174b936c75e"},{"code":"(fn [n] (let [divisors (fn [n] (filter #(= 0 (mod n %)) (range 1 (inc (int (/ n 2))))))]\r\n                  (= n (apply + ( divisors n)))))","problem":80,"user":"503d129fe4b06c4e0e1fa254"},{"code":"(fn [n]\n  (= n\n     (reduce +\n       (filter\n         #(zero? (mod n %))\n         (range 1 n)))))","problem":80,"user":"4f7f9665e4b033992c121bea"},{"code":"#(= % (reduce + \n  (filter (comp (partial = 0) (partial mod %)) \n  (range 1 %))))","problem":80,"user":"4fe83efbe4b07c9f6fd12c3b"},{"code":"(fn p080 [n]\n  (letfn [(facts\n           ([n] (facts [1] n 2 n))\n           ([ls n b e] (if (>= b e) ls\n                         (if (= 0 (mod n b))\n                           (facts (list* b (/ n b) ls) n (inc b) (/ n b))\n                           (facts ls n (inc b) e)))))]\n    (let [fs (filter #(not (= % n)) (facts n)) s (apply + fs)] (= s n))))","problem":80,"user":"5272669de4b03e8d9a4a742e"},{"problem":80,"code":"#(= (reduce + (for [x (range 1 (inc (/ % 2))) :when (zero? (mod % x))] x)) %)","user":"57e33f6fe4b0bfb2137f5a96"},{"problem":80,"code":"(fn perfect? [n]\n  (= n\n     (reduce +\n             (filter\n               #(= (mod n %) 0)\n               (range 1 (inc (int (/ n 2))))))))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn [n]\n  (= n\n    (apply +\n      (filter #(zero? (rem n %))\n      (range 1 n)))))","problem":80,"user":"4fd2e5d8e4b04c3a95aa0427"},{"code":"(fn perfect? [n] (= n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"539a2901e4b0b51d73faaf0f"},{"code":"(fn [n]\r\n  (loop [i 2 sum 1]\r\n    (if (< (quot n 2) i)\r\n      (= n sum)\r\n      (if (= (mod n i) 0)\r\n        (recur (inc i) (+ sum i))\r\n        (recur (inc i) sum)))))","problem":80,"user":"4df3df8a535d08e6dec9fe2d"},{"code":"(fn [i] (= i (apply + (filter #(= 0 (mod i %)) (range 1 i)))))","problem":80,"user":"4e43b0d9535dc968683fc4a3"},{"problem":80,"code":"(fn [x]\n  (= x (reduce (fn [sum n]\n                 (if (= 0 (mod x n))\n                   (+ sum n)\n                   sum))\n               1\n               (range 2 x))))","user":"5cbb0436e4b026601754b9cc"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [n]\n                    (filter #(= 0 (rem n %)) (range 1 n)))]\n    (= n (apply + (divisors n)))))","user":"54b817eee4b0ed20f4ff6e93"},{"problem":80,"code":"(fn p80 [num]\n   (= num (reduce + (filter\n                     #(zero? (mod num %))\n                     (range 1 num)))))","user":"5d669613e4b0db5d338d15ea"},{"problem":80,"code":"(fn [n]\n  (let [factors (filter #(zero? (mod n %)) (range 1 n))]\n    (= n (apply + factors))\n    )\n  )","user":"564a560ae4b0284900eef654"},{"problem":80,"code":"(fn perfect? [n]\n  (= n\n     (reduce + (filter #(= 0 (mod n %))\n                       (range 1 (inc (quot n 2)))))))","user":"5ab564f8e4b073f177442639"},{"code":"(fn [n]\n    (= n (reduce + (set (for [i (range 1 n) :when (zero? (mod n i))] i)))))","problem":80,"user":"4ed292ac535d44c135fd68d9"},{"code":"(fn [x]\n  (= x (apply +\n        (disj\n          (into #{} (mapcat (fn [y] [y (/ x y)])\n                    (filter #(= 0 (rem x %)) (range 1 (Math/sqrt (+ 0.5 x))))))\n          x))))","problem":80,"user":"50657775e4b0deb876850599"},{"code":"(fn [x] (= (apply + (filter #(zero? (mod x %)) (range 1 x))) x))","problem":80,"user":"52570aeae4b0541d1855ba42"},{"problem":80,"code":"(fn [n] (->> (range 1 (inc (/ n 2)))\n             (filter #(= 0 (mod n %)))\n             (apply +)\n             (= n)\n          ))","user":"5e566668e4b027a2e10ac0f9"},{"problem":80,"code":"#(= % (reduce (fn [res x] (if (zero? (rem % x)) (+ res x) res)) 1 (range 2 %)))","user":"55ccdc6be4b0e31453f64a18"},{"problem":80,"code":"(fn perfect? [x]\n  (letfn [(factorize [x]\n            (for [tst (range 1 x) :when (== 0 (mod x tst))]\n              tst))\n          ]\n    (== x (apply + (factorize x))))\n    )","user":"562add6de4b00e49c7cb4834"},{"problem":80,"code":"(fn [x]\n  (= (* x 2) (apply + (reduce #(if (=( mod x %2) 0) (conj % %2) %) #{} (range 1 (inc x))))))","user":"566d71b1e4b0a866af6896ca"},{"code":"(fn [x]\r\n  (letfn [(worker [cur s]\r\n            (if (> cur (quot x 2))\r\n              s\r\n              (recur (inc cur) (if (zero? (rem x cur))\r\n                                 (+ cur s) s))))]\r\n    (= (worker 1 0) x)))","problem":80,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn [n]\n  (= (apply +(filter #(zero? (rem n %)) (range 1 n))) n))","problem":80,"user":"52a32876e4b04e0c58e87bfb"},{"problem":80,"code":"(fn [n] \n  (= n \n     (apply + \n            (filter #(= 0 (mod n %)) \n                    (range 1 n)))))","user":"50a4f36be4b0344e360f3bc9"},{"problem":80,"code":"(fn [n] (= (apply + (remove #(< 0 (mod n %)) (range 1 n))) n))","user":"51a058dae4b0b292b01ee3f3"},{"problem":80,"code":"(fn [x] (->>\n  (range 1 x)\n  (filter #(= 0 (rem x %)))\n  (reduce +)\n  (= x)))","user":"5901158de4b0438e51c2d039"},{"code":"(fn [n]\n    (= n\n     (->> (range n)\n       (map inc)\n       (filter #(zero? (rem n %)))\n       butlast\n       (reduce +)\n       )))","problem":80,"user":"4f1bb9d8535d64f60314647d"},{"code":"(fn [n] (->> (range 1 n) (filter #(zero? (rem n %))) (apply +) (= n)))","problem":80,"user":"525f51bde4b0cb4875a45dc8"},{"problem":80,"code":"(fn [x] \n  (= (reduce + \n          (filter #(= 0 (mod x %))\n                  (range 1 x)))\n     x))","user":"57dd47f4e4b0bd073c20243e"},{"code":"#(= %\n   (apply +\n     (for [i (range 1 %)\n          :when (= 0 (mod % i))]\n       i)))","problem":80,"user":"4ed69ea4535d10e5ff6f52e3"},{"code":"(fn [n] \n  (= n \n     (apply + \n            (filter #(= 0 (rem n %)) \n                    (range 1 (inc (/ n 2)))))))","problem":80,"user":"4ed286d4535d44c135fd68d7"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divs (filter #(= 0 (mod n %)) (range 1 n))]\n    (= n (apply + divs))\n    )\n  )","user":"5488872ee4b0e286459a11d3"},{"problem":80,"code":"#(letfn [(divisors [n]\n                   (filter (fn [x] (zero? (rem n x)))\n                           (range 1 n)))]\n   (= % (reduce + (divisors %))))","user":"551ed214e4b08d5046aa8a4d"},{"problem":80,"code":"(fn [n] (= n (reduce + (for [x (range 1 n)\n              :when (= 0 (rem n x))]\n           x))))","user":"5f3567d6e4b0574c87022c44"},{"problem":80,"code":"(fn [x]\n   (->> (range 1 (inc (/ x 2)))\n        (filter #(= 0 (mod x %)))\n        (reduce +)\n        (= x)))","user":"57fc5e42e4b0d3187e900997"},{"problem":80,"code":"(fn [n]\n  (= (apply + (filter #(= 0 (mod n %))\n                      (range 1 n)))\n     n))","user":"51db0d99e4b06aa4d4669a9d"},{"problem":80,"code":"(fn perfect-numbers' [x]\n  (->> x\n       (range 1)\n       (filter (comp integer? (partial / x)))\n       (reduce +)\n       (= x)))","user":"563fc1f2e4b08d4f616f5ed7"},{"code":"(fn [n]\n  (= n (apply +\n    (filter\n      #(zero? (mod n %))\n      (rest (range n)) ))))","problem":80,"user":"4e9dafe1535dbda64a6f6b89"},{"code":"(fn [n]\n  (= n \n     (apply + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"5142e808e4b0c172af7558c9"},{"code":"(fn [n]\n  (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"50996a38e4b0cae2931060b3"},{"problem":80,"code":"(fn [num]\n  (= (apply + (filter #(zero? (mod num %)) (range 1 (inc (int (/ num 2))))))\n     num)\n  )","user":"56f7ecdfe4b08e7d20b96834"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 (inc (/ n 2)))\n       (filter #(zero? (rem n %)))\n       (apply +)\n       (= n)))","user":"5b77d3c8e4b047b03b2036f1"},{"problem":80,"code":"(fn [n]\n  (let [divisor? (fn [n d] (zero? (mod n d)))\n        divisors? (range 1 n)\n        divisors-sum (->> divisors?\n                          (filter (partial divisor? n))\n                          (apply +))]\n    (= n divisors-sum))\t\n  )","user":"551bdefde4b07993ea3788d7"},{"problem":80,"code":"(fn perfect? [n]\n    (= n (reduce + (for [x (range 1 n) :when (zero? (mod n x))] x))))","user":"54f09599e4b024c67c0cf89d"},{"problem":80,"code":"(fn [n]\n   (= n (reduce + (filter #(= (mod n %) 0 ) (range 1 n)))))","user":"54094824e4b0addc1aec66da"},{"code":"(fn perfNr [n]\n  (let [isDiv? (fn [d x] (= 0 (mod x d)))\n        divisors (fn [x] (reduce #(if (isDiv? %2 x) (conj %1 %2) %1) [] (range 1 x)) )]\n    (= n (apply + (divisors n)))\n    ))","problem":80,"user":"4f2965ffe4b0d6649770a029"},{"code":"(fn [x] (= \n          x \n          (reduce #(if (= 0 (mod x %2)) (+ %1 %2) %1) 0 (range 1 x))))","problem":80,"user":"531490bde4b08068f379ed17"},{"code":"(fn [x] (= x\n    (reduce + \n      (filter #(zero? (rem x %))\n        (range 1 x)))))","problem":80,"user":"4f40ccd9e4b0e243712b1fc0"},{"code":"(fn  isperfect?[number]\n  (letfn [(is-factor? [divisor] \n           (zero? (mod number divisor)))]   \t  \n    (= (reduce + (filter is-factor? (range 1  number))) number)))","problem":80,"user":"512eb723e4b0b740abc5982b"},{"problem":80,"code":"(fn perfect-number? [n]\n  (letfn [(divisible? [num div] (zero? (mod num div)))]\n    (->>\n     (range 1 (/ (inc n) 2))\n     (filter #(divisible? n %))\n     (reduce +)\n     (= n))))","user":"60849bd6e4b0736b099e42f2"},{"problem":80,"code":"(fn perfect? [num]\n  (->>\n    (range 1 num)\n    (filter #(= 0 (mod num %)))\n    (reduce +)\n    (= num)))","user":"5b13ba71e4b0cc2b61a3be53"},{"problem":80,"code":"(fn __ [x]\n  (= x (reduce +\n               ((fn get-divisors\n                    ([n] (get-divisors n 2 [1]))\n                    ([n t acc]\n                     (cond\n                       (> t (/ n 2))\n                       acc\n\n                       (= 0 (mod n t))\n                       (recur n (inc t) (conj acc t) )\n\n                       :else\n                       (recur n (inc t) acc)))) x))))","user":"55916764e4b0604b3f94d57b"},{"problem":80,"code":"#(= %\n    (->>\n     (range 1 %)\n     (filter (fn [n] (= 0 (rem % n))))\n     (apply +)))","user":"5ec6de19e4b08d0ec38692da"},{"code":"#(= % (reduce + (filter (comp zero? (partial mod %)) (range 1 %))))","problem":80,"user":"4f4f0287e4b03ad3f0c10cd7"},{"code":"(fn [n] (= n (apply + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4e80e0f2535db62dc21a62b8"},{"problem":80,"code":"#(= % (apply + (for [i (range 1 %)] (if (integer? (/ % i)) i 0))))","user":"5d7d17ece4b02e6b30c93558"},{"code":"(fn [n]\r\n  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4e994541535dbda64a6f6b64"},{"problem":80,"code":"#(= (reduce (fn [sum n]\n              (+ sum (if (zero? (rem % n))\n                       n\n                       0)))\n            (range 1 %))\n    %)","user":"60096aabe4b074f607df667f"},{"problem":80,"code":"(fn [num]\n  (let [divisors (filter \n                   #(= 0 (mod num %))\n                   (range 1  num))]\n  (= num (reduce + divisors))))","user":"53c38b8ce4b00fb29b22127b"},{"problem":80,"code":"(fn [x] (= x (reduce + 0 (filter #(= 0 (mod x %)) (range 1 x)))))","user":"567e6d24e4b0feffd0d18eb4"},{"code":"#(= %\n  ( apply +\n    (filter (fn [x] (if (zero? (mod % x)) \n                      true false))\n            (range 1 %))))","problem":80,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":80,"code":"(fn [m]\n  (letfn [(divisors [n] (reduce (fn [divs candidate] (if (= 0 (mod n candidate)) (conj divs candidate) divs)) [] (range 1 n)))]\n    (= m (apply + (divisors m)))))","user":"592ac17ae4b072a2710fcf26"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divides? (fn [n k] (zero? (mod n k)))]\n  (= n (reduce +\n               (filter #(divides? n %) (range 1 n))))))","user":"53703287e4b0fc7073fd6e8f"},{"problem":80,"code":"(fn[num]\n   (= num (apply + (filter #(zero? (mod num %)) (range 1 num))))  \n)","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn [n]\n  (let [divisors (fn [n]\n    (loop [d 2 r [1]]\n        (cond\n         \t(> d (/ n 2)) r\n\t    \t  (= 0 (mod n d)) (recur (inc d) (conj r d))\n          :else (recur (inc d) r))))]\n    (= n (reduce + (divisors n)))))","problem":80,"user":"4e6a4954535d8ccf87e9fec0"},{"code":"#(= % \n    (apply + (for [i (range 1 (inc (/ % 2))) \n                   :when (= 0 (mod % i))] \n               i)))","problem":80,"user":"52b02329e4b0c58976d9acc5"},{"code":"(fn [n] (= n (apply + (filter (fn [x] (= (mod n x) 0)) (range 1 n)))))","problem":80,"user":"52be0263e4b07a9af579230e"},{"problem":80,"code":"(fn [n]\n    (->> (take-while #(> n (apply + (range %)))\n                     (range))\n         (apply +)\n         (= n)))","user":"532f8569e4b019098a6f8b4f"},{"code":"(fn [n]\n  (= n\n    (apply +\n      (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"50843a4ae4b0c98812d0788b"},{"code":"(fn [n]\n  (= n (+ 1 (apply + \n    (filter #(= 0 (mod n %)) (range 2 n)))))\n  )","problem":80,"user":"50ae5659e4b0a40c9cfb08d2"},{"code":"(fn [n]\n  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4e513758535dc968683fc4f3"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + (filter #(= 0 (mod n %)) (map inc (range (dec n)))))))","user":"5472cba1e4b094393f72dd7a"},{"problem":80,"code":"(fn [n]\n   (= n  (reduce + (filter #(zero? (rem n %)) (range 1 n )))))","user":"5339cb07e4b0e30313ee6caf"},{"code":"(fn my-perfect [n]\n  (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":80,"code":"(fn [n]\n    (let [nums_up_to_sqrt_n ((fn [y] (take-while (fn [x] (<= (* x x) y)) (range 1 (+ y 1)))) n)\n          divisor? (fn [x] (if (= 0 (rem n x))\n                               (set (list x (quot n x)))\n                               (set nil)))\n          divisors (apply clojure.set/union (map divisor? nums_up_to_sqrt_n))]\n          (= (* 2 n) (apply + divisors))))","user":"5a34f342e4b0ddc586f153d1"},{"problem":80,"code":"(fn perfect? [n]\n  (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"540e8d13e4b0addc1aec671e"},{"problem":80,"code":"(fn [x]\n        (= x (apply +\n                    (filter #(= 0 (rem x %))\n                            (range 1 (+ 1 (quot x 2)))))))","user":"544e6b7fe4b0e39780006986"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (mod n %))\n                         (range 1 (inc (quot n 2)))))))","user":"55dcb06ee4b050e68259b3b9"},{"code":"(fn [n]\n  (= n\n     (apply +\n            (filter\n              #(zero? (mod n %))\n              (range 1 n))))\n  )","problem":80,"user":"4fbbcf0ce4b081705acca2ee"},{"problem":80,"code":"(fn perfect? [n]\n  (letfn [(perfect-test [factors n]\n            (= (apply + factors) (* 2 n)))\n          (compute-factor [factors a-idx]\n            (apply * (map (partial get factors) a-idx)))\n          (build-power-set [a-seq]\n            (loop [[start & more] (vec a-seq) power-set [[]]]\n              (if start\n                (recur more (into power-set (map (partial cons start) power-set)))\n                power-set)))\n          (fermat-prime-factors [n]\n            (cond\n              (= 2 n) [2]\n              (zero? (rem n 2)) (apply conj [2] (fermat-prime-factors (/ n 2)))\n              :else (let [start  (int (Math/ceil (Math/sqrt n)))\n                          [c d] (some #(fermat-test % n) (range start (inc n)))]\n                      (if (= 1 c)\n                        [d]\n                        (into (fermat-prime-factors c)\n                              (fermat-prime-factors d))))))\n          (fermat-test [a n]\n            (let [bb (Math/sqrt (- (* a a) n))\n                  b (int bb)]\n              (when (== b bb)\n                [(- a b) (+ a b)])))]\n    (let [factors        (conj (fermat-prime-factors n) 1)\n          idx-combs      (build-power-set (set (range (count factors))))\n          proper-factors (distinct\n                          (map (partial compute-factor factors) idx-combs))]\n      (perfect-test proper-factors n))))","user":"580d2788e4b0849f6811b730"},{"code":"(fn [num]\n    (=\n     num\n     (apply\n      +\n      ((fn get-factors [try factors]\n         (if (or (= try num)\n                 (contains? factors try))\n           factors\n           (recur (inc try)\n                  (if (= 0 (mod num try))\n                    (conj factors try (/ num try))\n                    factors))\n           )\n         )\n       2 #{1}\n       )\n      )\n     )\n    )","problem":80,"user":"52213426e4b0e6a83c8925c4"},{"problem":80,"code":"(fn [x]\n   (= x (apply + (filter integer? (map #(/ x %) (range 2 (inc x)))))))","user":"54bcab07e4b0ed20f4ff6ed5"},{"problem":80,"code":"(fn is-perfect [num]\n\t(=\n\t\tnum\n\t\t(apply + (filter\n\t\t\t#(= 0 (mod num %)) ; is_divisor\n\t\t\t(rest (range num))\n\t\t))\n\t)\n)","user":"5d73530ce4b02e6b30c93514"},{"code":"(fn [num]\n          (letfn [(sum-of-divisors [n]\n                                 (apply + (filter #(zero? (rem n %)) (range 1 n))))]\n            (= num (sum-of-divisors num))))","problem":80,"user":"4f3cd535e4b0e243712b1f56"},{"code":"(fn [x]\n  (= x (->>\n        (range 1 (inc (quot x 2)))\n        (filter #(= 0 (rem x %)))\n        (reduce +))))","problem":80,"user":"5117c31ee4b0e0897831a60c"},{"code":"#(= % \n    (reduce + \n              (filter (fn [n] (zero? (mod % n))) \n                      (range 1 %))))","problem":80,"user":"4ee7ef87535d93acb0a66872"},{"code":"(fn [v] (= v (apply + (filter #(= 0 (rem v %)) (range 1 v)))))","problem":80,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce\n      +\n      (filter\n       #(= 0 (mod (/ n %) 1))\n       (range 1 (inc (quot n 2)))))))","user":"5e64ae6ce4b0fd0acd1586ac"},{"code":"(fn [x] (= x \n            (reduce #(if (zero? (mod x %2)) (+ % %2) %)\n                     (range 1 (inc (/ x 2))))))","problem":80,"user":"53307da1e4b019098a6f8b5e"},{"problem":80,"code":"(fn [x]\n   (= x (loop [x x num 2 res 1]\n          (if (<= x num)\n            res\n            (if (= (rem x num) 0)\n              (recur x (inc num) (+ res num))\n              (recur x (inc num) res))))))","user":"5508102ee4b021ccfedb96b0"},{"code":"(letfn [(divisors [n] (filter #(= (mod n %) 0) (range 1 n)))]\n  (fn perfect? [n] (= n (reduce + (divisors n)))))","problem":80,"user":"532347dde4b09d4e7a9b54cc"},{"problem":80,"code":"(fn perfect? [x]\n  (let [divisors (filter #(= 0 (mod x %)) (rest (range (+ 1 (/ x 2)))))]\n    (= x (apply + divisors))))","user":"53504fe6e4b084c2834f4ada"},{"problem":80,"code":"(fn [n] (= n (reduce (fn [x y] (if (zero? (mod n y)) (+ x y) x)) (range n))))","user":"55dab5c8e4b0e31453f64ada"},{"code":"(fn [n]\n  (=\n    (reduce +\n      (filter #(zero? (mod n %)) (range 1 n))) n))","problem":80,"user":"4eddcbbf535d10e5ff6f532d"},{"code":"(fn [n] \n  (= n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"51e38568e4b0c611d6113e43"},{"problem":80,"code":"(fn [num] (= (apply + (filter #(= (mod num %) 0) (range 1 num))) num))","user":"55236ad6e4b0882d96d091b1"},{"code":"(fn perfect? [input]\n  (let [divisors (filter #(zero? (rem input %))\n                    (range 1 (inc (/ input 2))))]\n    (= (apply + divisors)\n       input)))","problem":80,"user":"51f9527fe4b09be9c177e549"},{"code":"(fn [n]\n  (= n \n     (apply +\n            (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"5098f5d6e4b0cae2931060a4"},{"code":"(fn [n]\n  (let [f (fn [n] (for [i (range 1 n) :when (= 0 (rem n i))] i))]\n    (= n (reduce + (f n)))))","problem":80,"user":"4e7d1c22535db169f9c796c5"},{"problem":80,"code":"(fn [n] (= n (apply + (filter #(zero? (mod n %)) (rest (range n))))))","user":"5d1b2b7de4b02ea6f0fb697a"},{"problem":80,"code":"(fn perfect-nums [number]\n  (= number (reduce + (filter (fn [n] (= (mod number n) 0))\n                              (range 1 (inc (/ number 2)))))))","user":"5634995fe4b0bfe05bf117be"},{"problem":80,"code":";; a perfect number is a number that is half the sum\n;; of all of its positive divisors including itself\n;; reference: https://stackoverflow.com/questions/20248029/divisor-function-in-clojure\n\n(fn equal-divisors? \n  [n]\n  (= n (reduce + (filter (comp zero? (partial rem n)) (range 1 n)))))\n\n;; 1067's solution uses idiomatic `zero?`:\n;; (fn [n]\n;;    (->> (range 1 n)\n;;         (filter #(zero? (mod n %)))\n;;         (apply +)\n;;         (= n)))\n\n;;113213's solution uses a mathematical optimization `(inc (/ x 2))`:\n;; (fn [x]\n;;  (->> (range 1 (inc (/ x 2)))\n;;   (filter #(= 0 (mod x %)))\n;;   (reduce +)\n;;   (= x)))","user":"5fb68f09e4b08cb800c85b58"},{"code":"#(and (even? %) (even? (int (/ % 500))))","problem":80,"user":"4df1ce44535d08e6dec9fe1f"},{"code":"(fn [x]\n  (letfn [\n          (divs\n            [x y]\n            (if (= 0 y)\n              []\n              (if (= 0 (mod x y))\n                (cons y (divs x (dec y)))\n                (recur x (dec y)))))]\n    (= x (reduce + (divs x (quot x 2))))))","problem":80,"user":"504e12ade4b078edc5f593b7"},{"problem":80,"code":"(fn perfect?\n  [n]\n  (->> (range 1 n)\n       (filter #(zero? (rem n %)))\n       (reduce +)\n       (= n)))","user":"4fc524aae4b081705acca37e"},{"problem":80,"code":"(fn [n] (= (* 2 n) (reduce + (map #(+ % (quot n %)) (filter #(zero? (mod n %)) (take-while #(<= (* % %) n) (drop 1 (range))))))))","user":"5e1cc888e4b0dc959400853d"},{"code":"(fn [n]\n  (= n (reduce + (filter #(= 0 (rem n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"4ec5cdb0535d6d7199dd36b8"},{"code":"(fn perfect? [n]\n\t(if (= n 1)\n\t\ttrue\n\t\t(let [\n\t\t\tprimes [2 3 5 7 11 13 17 19 23 29 31]\n\t\t\tptest (fn [p] (long (* (Math/pow 2 (dec p)) (- (Math/pow 2 p) 1))))\n\t\t]\n\t\t\t(loop [[p & pr] primes]\n\t\t\t\t(cond\n\t\t\t\t\t(nil? p)\n\t\t\t\t\tfalse\n\n\t\t\t\t\t(= n (ptest p))\n\t\t\t\t\ttrue\n\n\t\t\t\t\t:else\n\t\t\t\t\t(recur pr)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)","problem":80,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn perfect? [x]\n  (letfn [(divisors [x]\n             (filter #(zero? (rem x %)) (range 1 x)))]\n    (== x (reduce + (divisors x)))))","problem":80,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"(fn perfect? [n]\n  (let [divisors (filter #(zero? (rem (/ n %) 1)) (range 1 n))]\n    (= n (apply + divisors))))","problem":80,"user":"50763574e4b0a894bb95bf3d"},{"problem":80,"code":"(fn [x] \n  (= x\n  \t(apply + \n           (filter #(zero? (mod x %)) \n                   (range 1 x)))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"problem":80,"code":"(fn [num]\n    (let [divisors (filter #(= 0 (mod num %)) (range 1 num))]\n      (= num (reduce + divisors))))","user":"554a75c9e4b0a04f79299575"},{"problem":80,"code":"(fn[n]\n  (= n (reduce + \n               (filter (fn[i]\n                         (zero? (rem n i)))\n                       (range 1 n)))))","user":"55101237e4b06e50f9beb181"},{"code":"(fn [n]\r\n    (let [max-prime (inc (/ n 2))\r\n    \r\n          divisors  (for [num (range 1 max-prime)\r\n                          :when (zero? (mod n num))]\r\n                      num)] \r\n    \r\n        (= (apply + divisors) n)))","problem":80,"user":"4e2f9e71535deb9a81d77f11"},{"problem":80,"code":"(fn [n]\n   (->> n (* 0.5) (inc) (range 1) (filter #(zero? (mod n %))) (reduce +) (= n)))","user":"57d8a1dee4b0bd073c2023ee"},{"code":"(fn [x] (let [divides-x #(= (rem x %) 0)\n               divisors (filter divides-x (range 1 x))]\n          (= x (apply + divisors))))","problem":80,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn [in] \n  (if (= in \n    (reduce + (filter #(= 0 (mod in %1)) (map inc (range (dec in))))))\n    true false))","problem":80,"user":"4faec810e4b081705acca24e"},{"problem":80,"code":"(fn my-perfect-no\n  [n]\n  (= n (apply + (filter #(= 0 (mod n %)) (range 1 (inc (/ n 2)))))))","user":"56c3aca0e4b05cc29241ee90"},{"code":"(fn [n]\n  (= n (apply + (filter #(zero? (mod n %)) (range 1 n))))\n)","problem":80,"user":"5323a414e4b09d4e7a9b54d1"},{"problem":80,"code":"(letfn [(divisors [n]\n\t(for [i (range 1 n) :when (= 0 (rem n i))] i))]\n\t#(= % (apply + (divisors %))))","user":"5370b386e4b0fc7073fd6e9b"},{"problem":80,"code":"(fn [x]\n  (let [divisors (for [i (range 1 x) :when (zero? (rem x i))] i)]\n    (= x (apply + divisors))))","user":"57609d91e4b08062f99a4e9b"},{"problem":80,"code":"(fn [n]\n  (let [divisors\n        (fn [n]\n          (reduce (fn [acc x]\n                    (if (zero? (rem n x))\n                      (conj acc x)\n                      acc))\n                  []\n                  (rest (range n))))]\n    (= n (apply + (divisors n)))))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":80,"code":"(fn is-perfect [x]\n  (loop [sum 1\n        curr 2]\n    (if (> curr (/ x 2))\n      (= sum x)\n      (if (= (mod x curr) 0)\n        (recur (+ curr sum) (inc curr))\n        (recur sum (inc curr)))\n      ))\n  )","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":80,"code":"(fn divisors [n]\n  (let [divisor? #(zero? (mod n %))]\n    (->> (filter divisor? (range 1 (inc (/ n 2))))\n         (reduce + 0)\n         (= n))))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn [x]\n  (->>\n    (range 1 x)\n    (filter #(= (mod x %) 0))\n    (apply +)\n    (= x)))","problem":80,"user":"51b3f109e4b0f094dd986fa9"},{"code":"(fn [n]  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"50e82c31e4b0ebbe794eb7da"},{"problem":80,"code":"(fn __ [n]\n  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"58f44c07e4b0438e51c2ceb7"},{"code":"(fn [n]\n  (= (->> (range 1 n)\n          (filter #(zero? (mod n %)))\n          (apply +))\n     n))","problem":80,"user":"5012ec0ae4b0c87326002230"},{"code":"(fn[n]\n  (= n (reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4fb86dc9e4b081705acca2d8"},{"code":"(fn [n]\n  (= n (apply + (filter #(zero? (rem n %)) \n                        (range 1 (inc (quot n 2)))))))","problem":80,"user":"50052d38e4b0678c553fc45c"},{"code":"(fn [n]\n  (letfn [(divisors [m] (filter #(= 0 (mod m %)) (range 1 (+ 1 (/ m 2)))))]\n    (= n (apply + (divisors n)))))","problem":80,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":80,"code":"(fn\n    [n]\n    (let [divs (filter #(zero? (mod n %)) (range 1 n))]\n      (= (apply + divs) n)\n      ))","user":"559067ace4b0277789237670"},{"problem":80,"code":"(fn perfect?\n  [n]\n  (letfn [(divisor? [x] (zero? (mod n x)))]\n    (= n (apply + (filter divisor? (range 1 n))))))","user":"6098263be4b00e9e6653c3f9"},{"code":"(fn [n] (= n (reduce + (filter #(= (rem n %) 0) (range 1 n)))))","problem":80,"user":"4e6fa38b535d5021c1a89622"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(= (mod n %) 0))\n       (reduce +)\n       (= n)))","user":"55f73078e4b06e875b46cea4"},{"problem":80,"code":"(fn [x]\n  (->> x\n       (range 2)\n       (take-while #(< (* %1 %1) x))\n       (filter #(zero? (mod x %1)))\n       (mapcat #(list %1 (quot x %1)))\n       (reduce + 1)\n       (= x)))","user":"539e717fe4b0ca733b974488"},{"problem":80,"code":"(fn [x]\n  (= (reduce + 0 (filter #(zero? (mod x %)) (range 1 x))) x))","user":"5a7ae674e4b03baeef9276d5"},{"code":"(fn [n]\n  (cond\n    (= n 6) true,\n    (odd? n) false,\n    (not= 1 (mod n 9)) false,\n    :else true)) ; close enough","problem":80,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn perfect? [n]\n  (let [up-to (range 1 (+ 1 (quot n 2)))\n        divisors (for [i up-to :when (zero? (mod n i))] i)]\n    (= n (apply + divisors))))","problem":80,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":80,"code":"(fn [num]\n  (let [div-by-num? (fn[div]\n               (if (= 0 (rem num div))\n                 true false))\n        fac (fn [num] (range 1 num))]\n    (if (= num\n           (reduce + (filter #(div-by-num? %) (fac num))))\n      true\n      false)))","user":"505d1b01e4b0e6aca564be04"},{"problem":80,"code":"(fn [n]\n(->> (range 1 n)\n(filter #(zero?(mod n %)))\n(apply +)\n(#(= n %))\n))","user":"533a2f7be4b0e30313ee6cb8"},{"problem":80,"code":"(fn [x]\n  (->> (range 1 x)\n       (filter #(= 0 (mod x %)))\n       (apply +)\n       (= x)))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":80,"code":"(fn perfect? [n]\n\t(letfn [(divisors [n]\n            (filter #(zero? (mod n %)) (range 1 n)))]\n    (= n (reduce + (divisors n)))))","user":"52e657e4e4b09f7907dd1472"},{"code":"(fn [n]\n  (let [divisors (take (- n 1) (iterate inc 1))\n  \t\t\tdiv-by (map #(rem n %) divisors)\n\t\t\t\tzm (zipmap divisors div-by)\n\t\t\t\tseld (select-keys zm (for [[k v] zm :when (zero? v)] k))]\n\t\t(= n (reduce + (keys seld)))))","problem":80,"user":"4db045b5838c48654951d9be"},{"code":"(fn [n]\n  (let [divisors (filter #(zero? (rem n %)) (range 1 (inc (quot n 2))))]\n    (= n (apply + divisors))))","problem":80,"user":"51d19c24e4b0cfcf579466c3"},{"problem":80,"code":"(fn [n] (= n (apply + (filter #(zero? (rem n %)) (range 1 (max 2 (inc (quot \nn 2))))))))","user":"59358f74e4b04f87174def52"},{"problem":80,"code":"(fn [x]\n  (letfn [(divisors [n] (filter #(zero? (mod n %)) (range 1 n)))]\n    (= (apply + (divisors x)) x)))","user":"5478e57de4b0c51c1f4d72c1"},{"code":"(fn[n] (= n (apply + (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"5201572be4b0d7096e99ddbb"},{"problem":80,"code":"(fn [n] \n  (= n (apply +\n         (->> (range 1 n) (filter #(zero? (mod n %))))\n   ))\n  )","user":"575ef4b6e4b08062f99a4e78"},{"problem":80,"code":"(fn perfect-number? [n]\n  (letfn [(factors [n]\n            (let [sqrt (int (Math/ceil (Math/sqrt n)))]\n              (->> (range 1 (inc sqrt))\n                   (keep #(when (integer? (/ n %)) %))\n                   (map (fn [f] [f (/ n f)]))\n                   (flatten)\n                   (set))))]\n    (= n (reduce + (disj (factors n) n)))))","user":"50e3e108e4b01912b3285c48"},{"problem":80,"code":"(fn [n]\n    (= (apply + (filter #(= (mod n %) 0) (range 1 n))) n))","user":"5ac6ef9be4b0e27600da7779"},{"problem":80,"code":"(fn [n]\n  (== n (apply + (filter #(zero? (mod n %)) (range 1 (+ 1 (/ n 2)))))))","user":"532c9dc9e4b019098a6f8b30"},{"code":"(fn [x] (contains? #{6 496 8128} x))","problem":80,"user":"4dd579b5535dae65d5c462ea"},{"code":"(fn [n]\n  (loop [p 1]\n    (let [p2 (fn [p] (apply * (repeat p 2)))\n          r (* (p2 p) (dec (p2 (inc p))))]\n      (cond\n        (< r n) (recur (inc p))\n        (= n r) true\n        :else false))))","problem":80,"user":"5348cab4e4b084c2834f4a5e"},{"problem":80,"code":"(fn [n]\n   (= n\n      (apply + (filter #(= 0 (rem n %)) (take (dec n) (iterate inc 1 )) ))))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (distinct (filter #(= 0 (mod n %)) (range 1 n))))))","user":"5609d328e4b05f002753deee"},{"code":"(fn [n]\n  (->> \n    (range 1 n) \n    (filter #(zero? (mod n %))) \n    (apply +) \n    (= n)))","problem":80,"user":"5236cd89e4b0e010857b4e45"},{"code":"(fn [n] (= n \n  (->> (range 1 n)\n    (filter #(zero? (mod n %)))\n    (apply +)       ) ))","problem":80,"user":"503917a0e4b088a6a14ca763"},{"code":"(fn [n]\n     (let [divisors (fn [n] (filter #(= 0 (rem n %)) (range 1 (+ 1(/ n 2)))))\n           sumOfDs  (fn [n] (reduce + (divisors n)))]\n       (= n (sumOfDs n))))","problem":80,"user":"4e8b98fc535d65386fec2124"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n    (filter #(= 0 (mod n %)))\n    (apply +)\n    (= n)))","user":"56d63729e4b0ea9b8538f7ca"},{"problem":80,"code":"(fn [x] (= x (apply + (filter #(= (mod x %) 0) (range 1 x)))))","user":"567798afe4b05957ce8c6169"},{"problem":80,"code":"#(= % (apply + (filter (fn[n] (= 0 (mod % n))) (range 1 %))))","user":"56824e1be4b0945ebc182a91"},{"problem":80,"code":"(fn [num] (= num (apply + (filter #(zero? (mod num %)) (range 1 (inc (/ num 2)))))))","user":"5cf72682e4b0b71b1d808a68"},{"code":"(fn [n]\n  (= n\n     (apply + \n       (filter (fn [d] (zero? (mod n d))) (range 1 n)))))","problem":80,"user":"4f58fe71e4b0a7574ea7185f"},{"code":"(fn [n]\n  (let [divs (filter #(= 0 (mod n %)) (range 1 n))]\n    (= n (reduce + divs))))","problem":80,"user":"50435852e4b034ff00315d22"},{"problem":80,"code":"(fn [x]\n  (= x\n     (apply + (->> x (range 1) (filter #(zero? (mod x %)))))))","user":"55a74d46e4b09e57187da2a3"},{"code":"(fn [n]\n  (= n\n     (apply + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"520612a7e4b0bf4f1882c81c"},{"code":"(fn [x] \n  (->> (for [n (range 2 (Math/sqrt x)) :when (zero? (mod x n))] [n (/ x n)]) (apply concat) set (apply +) (= (dec x))))","problem":80,"user":"528e64b7e4b0239c8a67aedd"},{"problem":80,"code":"(fn [n]\n    (let [divisors (->> (range 1 n) (filter #(zero? (mod n %))))]\n      (= n (apply + divisors))))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"(fn [x]\n    (letfn [(divisors [n]\n              (filter #(= 0 (mod n %)) (range 1 (inc (/ n 2)))))]\n      (= (apply + (divisors x)) x)))","problem":80,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":80,"code":"(fn [x]\n  (= x (reduce (fn [init div]\n                 (if-not (= 0 (mod x div))\n                   init\n                   (+ init (/ x div) div)))\n               1\n               (range 2 (inc (int (Math/sqrt x)))))))","user":"591072e0e4b0163c97b36ebc"},{"code":"(fn [n] (let [divisors (filter #(= 0 (rem n %)) (range 1 n))] (= (apply + divisors) n)))","problem":80,"user":"5175616ae4b0dea9bbfba576"},{"problem":80,"code":"(fn perfect-number [n]\n  (let [d (loop [a [1] b 2]\n            (if (> (* b b) n)\n              a\n              (recur (if (= (mod n b) 0) (conj a b (quot n b)) a) (inc b))))]\n    (= (apply + d) n)))","user":"5843b95de4b089d5ab817e3f"},{"problem":80,"code":"(fn perfect? [n]\n  (= n\n     (reduce +\n             (filter #(= (rem n %) 0)\n                     (range 1 (inc (Math/floor (/ n 2))))))))","user":"59971e2de4b07157cc8daacc"},{"problem":80,"code":"(fn [i]\n  (= i (apply + (filter #(= 0 (rem i %)) (range 1 i)))))","user":"53ea5851e4b036ad0777e4e4"},{"code":"(fn [n] \n           (let [div?    #(= 0 (rem n %))\n                 nums    (filter div? (range 1 (inc (/ n 2))))]\n             (= (reduce + nums) n)))","problem":80,"user":"50aa60bee4b056ee01935865"},{"problem":80,"code":"(fn [nbr] (= nbr (apply + (filter #(zero? (mod nbr %)) (range 1 nbr)))))","user":"57625c18e4b0994c1922fba4"},{"code":"#(= % (apply + (for [x (range 1 %) :when (= 0 (rem % x))] x)))","problem":80,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"(fn [n] (= n (apply + (reduce #(if (= (mod n %2) 0) (cons %2 %1) %1) () (range 1 n)))))","problem":80,"user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn [z] (let [dividers (fn [x] (filter (fn [y] (= 0 (mod x y))) (range 2 x)))]\n          (= (apply + (dividers z)) (dec z))))","problem":80,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"code":"(fn [n]                                                                                              \n    (= (reduce + (reduce (fn [agg i]                                                                  \n                         (if (= 0 (mod n i))                                                         \n                           (cons i agg)                                                              \n                           agg)) [] (rest (range n))                                                 \n                           )) n))","problem":80,"user":"4f1d1299535d64f603146487"},{"problem":80,"code":"#(loop [di [] n 1] \n   (if (> n (/ % 2)) (= % (reduce + di))\n     (if (= 0 (rem % n)) (recur (conj di n) (inc n))\n       (recur di (inc n)))))","user":"5a95e50be4b0d174b936c760"},{"code":"#(= (rem (Math/sqrt (+ (* 8 %) 1)) 1) 0.0)","problem":80,"user":"52ba2af3e4b07a9af57922cc"},{"code":"(fn is-perfect[a-num]\n  (letfn [(divisors [n]\n\t\t\t(filter #(zero? (rem n %)) (range 1 (inc (/ n 2)) ) )\n\t\t)]\n\t(= a-num (reduce + (divisors a-num)))\n  )\n)","problem":80,"user":"52763696e4b03e8d9a4a74d7"},{"problem":80,"code":"#(->> (range 1 %)\n      (filter (fn [x] (= 0 (rem % x))))\n      (reduce +)\n      (= %))","user":"5cfee28de4b0cc9c91588185"},{"problem":80,"code":"(fn [x]\r\n  (let [divisor? #(integer? (/ x %))\r\n        filter-divisors (fn [cands] (filter #(divisor? %) cands))\r\n        sum-divisors (apply + (filter-divisors (range 1 x)))]\r\n    (= sum-divisors x)))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"problem":80,"code":"(fn perf [a]\n      (loop [d [1] check 2]\n        (if (= a check) (if (= (apply + d) a) true false)\n          (if (= 0 (mod a check)) (recur (conj d check) (inc check))\n            (recur d (inc check))))))","user":"558378dce4b05c286339e115"},{"code":"(fn [num]\n    (letfn [(divisors [n]\n              (filter #(= 0 (mod n %)) (range 1 n)))]\n      (= num (reduce + (divisors num)))))","problem":80,"user":"53487737e4b084c2834f4a59"},{"problem":80,"code":"(fn [n]\n  (let [divisors\n        (filter #(= 0 (rem n %)) (range 1 n))]\n    (= n (reduce + divisors))))","user":"53bd7080e4b0d9a98559a6d1"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisors (filter #(= 0 (mod n %)) (range 1 (inc (/ n 2))))]\n    (= n (apply + divisors))))","user":"60794173e4b0a637ed78035d"},{"problem":80,"code":";(vec(\n(fn [n]\n  (let [divisors (fn [x]\n                   (filter #(= 0 (mod x %)) (range 1 (inc (quot x 2))))\n                   )]\n    (= n (apply + (divisors n)))\n    ;(divisors n)\n    ))\n;6))","user":"573632b7e4b0cd1946bd102f"},{"code":"(fn [n]\n  (= n (reduce + 0 \n          (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"#(= % (reduce + (filter (fn [i] (= 0 (mod % i))) (range 1 (+ (/ % 2) 1)))))","problem":80,"user":"4e773be8535d324fb2983d6e"},{"problem":80,"code":"(fn[x]\n(->> x(range 1)\n(filter #(= 0 (mod x %)))\n(apply +)\n(= x)))","user":"53ed2fafe4b0d648e757f4c1"},{"problem":80,"code":"(fn [n]\n (let [rs (range 1 (- n 1))]\n  (->> (filter #(zero? (mod n %)) rs)\n   (reduce +)\n   (= n))))","user":"57eaf869e4b0bfb2137f5b56"},{"problem":80,"code":"(fn perfect? [x]\n  (letfn [(divisors [n]\n  (for [i (range 1 n)\n        :when (zero? (mod n i))]\n    i))]\n  (= x (reduce + (divisors x)))))","user":"56504dc2e4b0284900eef6bc"},{"code":"(fn [n]\n  (let [divisors (loop [ne (dec n), acc []]\n                  (cond\n                    (zero? ne) acc\n                    (zero? (rem n ne)) (recur (dec ne) (conj acc ne))\n                    true (recur (dec ne) acc)))]\n    (= n (reduce + divisors))))","problem":80,"user":"4f418eaee4b0d7d3c9f3fce9"},{"problem":80,"code":"(fn [n]\n  (= n\n     (apply + (filter #(zero? (rem n %)) (range 1 (/ (inc n) 2))))))","user":"53322cece4b019098a6f8b73"},{"problem":80,"code":"(fn [n]\n    (->> (range 1 n)\n         (filter #(= 0 (mod n %)))\n         (apply +)\n         (= n)))","user":"559c13c5e4b066d22e731f61"},{"problem":80,"code":"(fn perfect? [num]\n  (loop [curr (dec num)\n         sum 0]\n    (if (< curr 1)\n      (= num sum)\n      (recur (dec curr) (if (= 0 (rem num curr))\n                          (+ sum curr)\n                          sum)))))","user":"5f9567cce4b0715f5002d7c7"},{"problem":80,"code":"(fn perfect-no?\n  [num]\n  (->> (range 1 num)\n       (filter #(zero? (rem num %)))\n       (reduce +)\n       (= num)))","user":"590b3aeae4b047aa04b199d0"},{"code":"(fn [x]\n  (let [divs \n    (filter #(zero? (mod x %)) \n(map inc (range (- x 2))))]\n(= (apply + divs) x)))","problem":80,"user":"4fca2a13e4b0ee37620e184d"},{"code":"(fn [n]\n   (= n\n      (reduce\n       #(if (zero? (rem n %2)) (+ % %2) %)\n       (range 1 n))))","problem":80,"user":"4e8510e7535db62dc21a62e7"},{"code":"(fn [x]\n  (let [a\n    (loop [ind (int (Math/floor (/ x 2))) result []]\n      (if (< ind 1)\n        result\n        (if (= (mod x ind) 0)\n          (recur (dec ind) (cons ind result))\n          (recur (dec ind) result)\n        )\n      )\n    )]\n    (if (= x (reduce + a))\n      true\n      false\n    )\n  )\n)","problem":80,"user":"52016690e4b0b2e020a18f0f"},{"problem":80,"code":"(let [divisors (fn [n] (for [d (range 1 n) :when (zero? (mod n d))] d))]\n  (fn perfect? [n] (= n (apply + (divisors n)))))","user":"5412ef7ee4b01498b1a719da"},{"problem":80,"code":"(fn [num]\n  (let [divs (for [x (range 1 num)]\n               (if (and (> num x)(zero? (mod num x)))\n                 x 0))]\n    (= num (reduce + divs))))","user":"5cbd5b42e4b026601754b9f6"},{"problem":80,"code":"#(= %1 (apply + (filter (fn [x] (= 0 (mod %1 x))) (range 1 %1))))","user":"57015a1de4b08d47c97781d4"},{"code":"(fn [n]\n  (let [fs (filter #(= 0 (mod n %)) (range 1 (Math/sqrt n)))\n        divs (concat fs (map #(/ n %) (rest fs)))]\n    (= n (reduce + divs))))","problem":80,"user":"51424cc8e4b0b50abeb46b34"},{"problem":80,"code":"#(= % (apply + (for [d (range 1 %) :when (zero? (mod % d))] d)))","user":"54dd76c8e4b024c67c0cf794"},{"code":"(fn [x]\n   (= x (reduce +\n        (filter #(zero? (mod x %))\n                (range 1 x)))))","problem":80,"user":"4f9d8083e4b0dcca54ed6d23"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter #(zero? (rem n %)) \n                 (range 1 n)))))","user":"5835cb06e4b089d5ab817cea"},{"code":"(fn perfect? [n]\n  (loop [sum 0\n         k 1]\n    (if (= sum n)\n      true\n      (if (< sum n)\n        (recur (+ sum k) (inc k))\n        false))))","problem":80,"user":"527a69cee4b03e8d9a4a755d"},{"code":"#(= % (reduce (fn [sum n] (if (= (rem % n) 0) (+ sum n) sum)) 0 (rest (range (inc (quot % 2))))))","problem":80,"user":"50dfb660e4b061dbdced7228"},{"code":"(fn [n]\n  (let [dv (fn[x] (filter #(zero? (rem x %)) (range 1 x) ))]\n    (= n (reduce + (dv n)))))","problem":80,"user":"50705072e4b07bd6ad9b9f27"},{"code":"(fn [n]\n  (= n (reduce + (for [i (range 1 n) :when (= 0 (mod n i))] i))))","problem":80,"user":"51857e64e4b0da5a5be3babe"},{"problem":80,"code":"(fn [n]\n\t(= n\n\t\t(reduce + \n\t\t\t(filter #(zero? (rem n %)) (range 1 n)))))","user":"536e5b68e4b0fc7073fd6e6d"},{"problem":80,"code":"(fn perfect? [num]\n  (let [divisors (reduce #(if (= 0 (mod num %2)) (conj %1 %2) %1) [] (range 1 num))]\n    (= num (apply + divisors))))","user":"55f8fd70e4b03cbcff9738bc"},{"problem":80,"code":"(fn [x]\n  (->> (range 1 x)\n       (filter #(= (mod x %) 0))\n       (apply +)\n              (= x)))","user":"59ab2b86e4b08cbb53654d91"},{"code":"(fn perfect-number? [x]\n      (letfn [(dividers [a]\n                (filter #(= (mod a %) 0) (take (- a 1) (iterate inc 1)))\n                )\n              ]\n        (= x (reduce + (dividers x)))\n        )\n      )","problem":80,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":80,"code":"#(= (reduce + (filter (fn [d] (and (not= % d) (= 0 (rem % d)))) (range 1 %))) %)","user":"594d4c57e4b07ddc2dafae87"},{"problem":80,"code":"(fn is-perfect-number [n]\n  (let [sum-of-divisors (reduce + (filter #(zero? (mod n %)) (range 1 n)))]\n    (= n sum-of-divisors)))","user":"57ea4569e4b0bfb2137f5b46"},{"problem":80,"code":"(fn [x]\n  (let [divisors (filter #(zero? (mod x %)) (range 1 x))\n        divisors-sum (apply + divisors)]\n    (= x divisors-sum)))","user":"51ca5378e4b08b1cbd0d9480"},{"code":"(fn [n]\n  (= n \n     (apply + \n            (filter #(= 0 (mod n %)) \n                    (range 1 n)))))","problem":80,"user":"527ccaf4e4b0757a1b17136d"},{"code":"(fn perfect-number?\n  [n]\n  (letfn [(divisors [n]\n            (filter #(zero? (rem n %)) (range 1 (inc (/ n 2)))))]\n    (= n\n       (reduce + (divisors n)))))","problem":80,"user":"4db8d37d535d1e037afb219c"},{"code":"(fn [n]\n  (= n\n    (reduce +'\n      (filter #(= 0 (mod n %)) (range 1 n))\n    )\n  )\n)","problem":80,"user":"4fcf5292e4b03432b189f40e"},{"code":"(fn [x]\n  (let [ve ((fn cal [num ite vect]\n    (loop [n num i ite v vect]\n     (if (>= i n)\n      v\n      (if (= (rem n i) 0)\n        (recur n (inc i) (cons i v))\n        (recur n (inc i) v)\n        )\n      ))\n   ) x 1 [])]\n    (if (< (count ve) 2)\n      (= (reduce + (cons x ve)) x)\n      (= (reduce + ve) x)\n    )\n    )\n  )","problem":80,"user":"51bec919e4b013aa0d74b800"},{"problem":80,"code":"(fn perfect? [x]\n  (let [sm (range 1 x)\n        divisors (filter #(= 0 (mod x %)) sm)\n        ]\n      (= x (apply + divisors))\n  ))","user":"57ed8315e4b0bfb2137f5b9a"},{"problem":80,"code":"(fn [a]\n(= a (reduce + (filter #(zero? (mod a %)) (range 1 a)))))","user":"5790f9d7e4b0ebec4cfb75b4"},{"code":"(fn [x]\n  (= x (->> (range 1 x) (filter #(zero? (rem x %))) (reduce +))))","problem":80,"user":"508157b2e4b0946d0443855c"},{"code":"(fn [x]\n  (= x (apply + (filter #(= 0 (mod x %)) (range 1 x)))))","problem":80,"user":"4eb51942535d7eef30807365"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce +\n             (filter #(zero? (mod n %))\n                     (range 1 (inc (/ n 2)))))))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":80,"code":"(fn perfect-number [n]\n  (letfn [(divisors [n]\n            (filter #(zero? (rem n %)) (range 1 n)))]\n    (= (reduce + (divisors n)) n)))","user":"52b9e920e4b07a9af57922c9"},{"problem":80,"code":"#(= % (apply + (for [x (range 1 (inc (quot % 2))) :when (zero? (mod % x))] x)))","user":"50ef4e2be4b0a78662fa2653"},{"code":"(fn [n]\n   (if (= (reduce + \n                  (filter #(zero? (rem n %)) \n                          (range 1 n)))\n          n)\n     true\n     false))","problem":80,"user":"51cacda3e4b068dadb8f2227"},{"problem":80,"code":"(fn [n]\n  (= (reduce + \n             (filter #(= 0 (rem n %)) (range 1 n))) \n     n))","user":"541ef7e2e4b01498b1a71a92"},{"problem":80,"code":"(fn perfect-num? [n]\n  (and (not (odd? n))\n       (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n))))))","user":"55dcb1bbe4b050e68259b3ba"},{"problem":80,"code":"(fn perfect-number [n]\n        (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":80,"code":"(fn [n]\n   (= n\n      (apply #'+ (filter #(zero? (mod n %)) (range 1 n)))))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn perfect-number \n  [n]\n  (loop [s 0\n         c 1]\n    (if (= c n)\n      (= s n)\n      (if (zero? (rem n c))\n        (recur (+ s c) (inc c))\n        (recur s (inc c))))))","problem":80,"user":"4fdf566fe4b05e33b9224f99"},{"problem":80,"code":"(fn perfect [n]\n  (->> n\n       (range 1)\n       (filter #(zero? (rem n %)))\n       (apply +)\n       (= n)))","user":"58fed70de4b0438e51c2cfdd"},{"code":"(fn t7 [x] (= x (apply + (filter #(zero? (rem x %)) (range 1 x)))))","problem":80,"user":"5046f909e4b03b02161376b5"},{"code":"(fn perfect? [n]\n  (= n \n     (apply +\n      (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"50c8697ce4b00bb60fe0c53f"},{"code":"(fn perfect [n]\n  (= n \n    (reduce + \n      (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4f036fb3535dcb61093f6ac8"},{"code":"#(= % (loop[sum 0 cnt (dec %)](if (= cnt 0) sum (recur (if(=(rem % cnt )0 )(+ sum cnt) sum)(dec cnt )))))","problem":80,"user":"52bbd09ee4b07a9af57922ee"},{"problem":80,"code":"(fn perfect? [n]\n  (= n \n     (apply + (filter \n                #(= 0 (mod n %))\n                (range 1 (+ 2 ( int (/ n 2))))))))","user":"541ddadbe4b01498b1a71a84"},{"code":"(fn perfect? [n]\n        (= (->> (range 1 n)\n                (filter #(zero? (rem n %)))\n                (apply +))\n           n))","problem":80,"user":"4f465096e4b0d56e7bb92b9a"},{"code":"(fn isperfect? [n]\n  (let [sumifdivis (fn [a b]\n                     (if (== (mod n b) 0)\n                       (+ a b)\n                       a))]\n  (= n (reduce sumifdivis (range 1 n)))))","problem":80,"user":"532727bae4b09d4e7a9b54fa"},{"problem":80,"code":"(fn perfect? [x]\r\n  (= x (reduce + (filter \r\n                   #(= 0 (mod x %))\r\n                   (range 1 (inc (/ x 2)))))))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":80,"code":"(fn [x]\n  (= x (reduce + \n    (filter #(zero? (mod x %1)) (range 1 x)))))","user":"51897709e4b0288ada3dbdaa"},{"code":"(fn [i] (= (apply + (filter #(zero? (mod i %)) (range 1 i))) i))","problem":80,"user":"4e589bdc535d8a8b8723a295"},{"code":"(fn [n]\n  (= n (reduce + (filter (comp zero? (partial rem n)) (range 1 n)))))","problem":80,"user":"506a1985e4b01dc6af13f83e"},{"code":"(fn [x]\n  (->>\n   (range 1 x)\n   (filter #(zero? (mod x %)))\n   (reduce +)\n   (= x)))","problem":80,"user":"534f25f9e4b084c2834f4ac6"},{"code":"(letfn [(sum-of-divisors [n]\r\n  (apply + \r\n    (for [i (range 1 (inc (quot n 2))) \r\n          :when (zero? (rem n i))] i)))]\r\n #(= % (sum-of-divisors %))\r\n)","problem":80,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce + (filter #(= (mod n %) 0) (range 1 (-> (/ n 2) int inc))))))","user":"542c22bde4b0dad94371f29e"},{"code":"(fn f [n]\n  (let [sum\n    ((fn f [sum x y]\n       (let [sum2 (+ sum x y)\n             x2 (first (filter #(zero? (rem n %)) (range (inc x) (dec y))))]\n         (if x2\n           (f sum2 x2 (quot n x2))\n           sum2))) 0 1 n) ]\n    (= n (- sum n))))","problem":80,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"(fn pn [x]\r\n  (let [divisors (filter #(= 0 (mod x %)) (range 1 x))]\r\n    (= x (apply + divisors))))","problem":80,"user":"502a9fdee4b095a7adb898b4"},{"problem":80,"code":"(fn perfect [sq i n] \n  (cond\n   (= i n) (= n (reduce + sq))\n   (= 0 (mod n i)) (perfect (conj sq i) (inc i) n)\n   :else (perfect sq (inc i) n)\n)) '() 1","user":"5280a1ece4b0757a1b171407"},{"problem":80,"code":"(fn [n] \n(= n\n   (apply +\n          (filter\n           #(zero? (mod n  %))\n           (range 1 n)))))","user":"55249f64e4b0882d96d091c6"},{"problem":80,"code":"(fn [x]\n  (= x\n    (reduce +\n      (filter #(zero? (mod x %))\n              (range 1 (inc (/ x 2)))))))","user":"572de985e4b0cd1946bd0f7c"},{"code":"(fn [n]\n  (let [possibleDivs (range 1 (inc (quot n 2)))\n        divs (filter #(= 0 (rem n %)) possibleDivs)]\n    (= (reduce + divs) n)))","problem":80,"user":"4f28c979e4b0d6649770a01a"},{"problem":80,"code":"(fn [x]\n  (= x (apply + (for [candidate (range 1 (inc (quot x 2))) :when (zero? (mod x candidate))] candidate))))","user":"5773f3a9e4b0979f896515f2"},{"code":"(fn [x] (= x (apply + (map #(if (= (mod x %) 0) % 0) (range 1 (inc (/ x 2)))))))","problem":80,"user":"5046b003e4b011c5dfee7727"},{"problem":80,"code":"#(->> (range 1 %)\n      (filter (fn [n] (integer? (/ % n))))\n      (apply +)\n      (= %))","user":"5b59d176e4b02d533a91bd86"},{"problem":80,"code":"(fn[x](= x (apply + (map #(if (zero? (mod x %)) % 0) (range 1 x)))))","user":"5b99a0a3e4b0c0b3ffbd4ad7"},{"code":"(fn perfect? [number]\n  (let [int-divide (fn [dividend divisor]\n                    (int (/ dividend divisor)))\n        factor? (fn [dividend divisor]\n                  (when (= (mod dividend divisor) 0)\n                    (int-divide dividend divisor)))\n        factor-pair (fn [dividend divisor]\n                      (when-let [factor (factor? dividend divisor)]\n                        [divisor factor]))\n        min-factor (fn [other-factor dividend divisor]\n                      (or (factor? dividend divisor) other-factor))\n        factor-pairs (fn factor-pairs\n                      ([number] (filter identity (factor-pairs number 1 number)))\n                      ([number index highest-factor]\n                        (when (< index highest-factor)\n                          (lazy-seq\n                              (cons\n                                (factor-pair number index)\n                                (factor-pairs number (inc index) (min-factor highest-factor number index)))))))\n        factors-desc (fn [number]\n                       (let [factor-pairs (factor-pairs number)]\n                          (concat (map second factor-pairs) (reverse (map first factor-pairs)))))\n        factors (rest (factors-desc number))]\n    (= (reduce + factors) number)))","problem":80,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":80,"code":"(fn [x] (->> (range 1 x) (filter #(zero? (mod x %))) (reduce +) (= x)))","user":"54055aa9e4b0addc1aec6665"},{"problem":80,"code":"(fn perfect? [n]\n    (= n (reduce + (mapv first (filter #(true? (second %)) (map #(vector % (zero? (rem n %))) (range 1 n)))))))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":80,"code":"(fn perfect? [n]\n  (letfn [(factors [n]\n            (let [limit (int (Math/sqrt n))]\n              (letfn \n                  [(iter [i complements]\n                     (if (> i limit) \n                       complements\n                       (if (= 0 (mod n i)) \n                         (cons i (lazy-seq \n                                  (iter (inc i) \n                                        (cons (/ n i) complements))))\n                         (recur (inc i) complements))))]\n                (iter 1 '()))))]\n    (= (* 2 n) (apply + (factors n)))))","user":"543d89dfe4b032a45b869350"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisor? #(= (mod n %) 0)\n        r (next (range (/ (inc n) 2))) ;; Test only values up to or equal to half of n\n        divisors (filter divisor? r)]\n    (= n (apply + divisors))))","user":"573f3ccfe4b05c31a32c083f"},{"problem":80,"code":"(fn [x]\n  (letfn [(div [y]\n            (filter #(zero? (rem x %)) (range 1 y)))]\n    (= x (apply + (div x)))))","user":"5455c2f3e4b080a794c2c87d"},{"problem":80,"code":"(fn [x]\n   (let [divisors (reduce (fn [r y]\n                            (if (zero? (rem x y))\n                              (conj r y)\n                              r))\n                          [] (range 1 (inc (/ x 2))))]\n     (= x (apply + divisors))))","user":"56dc3bdfe4b0ea9b8538f819"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter #(zero? (mod n %)) (range 1 (dec n))))))","user":"51780bfce4b0f89a8f53839c"},{"problem":80,"code":"(fn [n]\n  (= n\n     (apply + (filter #(zero? (rem n %)) (range 1 n)))))","user":"58a2b57fe4b02bd94d917ede"},{"problem":80,"code":"(fn [n]\n  (= (apply +\n            (filter #(zero? (rem n %))\n                    (range 1 n)))\n     n))","user":"57533bc1e4b02ea1147992a6"},{"code":"(fn p? [n]\n  (letfn [(divs [x] (filter #(zero? (mod n %)) (range 1 (dec n))))] \n    (= n (apply + (divs n)))))","problem":80,"user":"506617c3e4b03d366d7cb2ab"},{"problem":80,"code":"(fn p\n   [n]\n   (if\n     (= (reduce + (into [] (filter (comp zero? (partial rem n)) (range 1 n)))) n)\n     true\n     false)\n)","user":"4eeb8f68535d93acb0a668a9"},{"code":"(fn [x]\n  (let [\n   devisor (filter #(= 0 (rem x %)) (range 1 x))\n   ]\n  (= x  (apply + devisor))\n  )\n  )","problem":80,"user":"518c5236e4b087e178201de0"},{"problem":80,"code":"(fn [n] \n  (if (= (apply + (for [x (range 1 n) \n               :when (= 0 (rem n x))] x)) n)\n    true\n    false))","user":"53dfe311e4b0d874e779ae47"},{"problem":80,"code":"(fn [n]\n    (->> (/ n 2)\n         (inc)\n         (range 1)\n         (filter #(zero? (rem n %)))\n         (apply +)\n         (= n)))","user":"5c165d3ee4b01240ff5671d1"},{"problem":80,"code":"(fn [a] (= (reduce #(if (= 0 (mod a %2)) (+ %1 %2) %1) 0 (range 1 a)) a))","user":"58ad4349e4b0ebc645576c9d"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisors (filter #(zero? (mod n %)) (range 1 (/ (inc n) 2)))]\n    (= n (apply + divisors))))","user":"5703eda3e4b08d47c9778200"},{"code":"#(true? (some (partial = %) (reductions + (range 1 %))))","problem":80,"user":"5300158ae4b0d8b024fd370f"},{"code":"(fn [a]\n  (= \n    a \n    (apply + (filter #(= 0 (mod a %)) (range 1 a)))))","problem":80,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":80,"code":"(fn perfect? [n]\n    (let [divisor? (fn [a]\n                     (= (mod n a)\n                        0))\n          divisors (filter divisor?\n                           (drop 1\n                                 (range n)))\n          sum      (apply +\n                          divisors)]\n      (= sum n)))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":80,"code":"(fn [x]\n   (let [divs (filter #(= 0 (rem x %)) (range 1 x))]\n     (= x (apply + divs)))\n)","user":"53ed6976e4b0d648e757f4c4"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + (for [d (range 1 n) :when (zero? (rem n d))] d))))","user":"57a4fa50e4b0a966079561f1"},{"problem":80,"code":"(fn [x]\n  (= x \n    (apply +\n      (filter #(zero? (mod x %)) (range 1 x)))))","user":"58e7229fe4b056aecfd47cc4"},{"code":"(fn [n]\n  (= n (apply + (filter #(zero? (rem n %)) (range 1 (quot (+ n 2) 2))))))","problem":80,"user":"51e595a6e4b0efabf93c02d8"},{"problem":80,"code":"(fn [x]\n  (let [limit (Math/sqrt x)]\n    (loop [start 2 sum 1]\n      (cond\n        (> start limit) (= sum x)\n        (zero? (mod x start)) (recur (inc start) \n                                     (+ sum start \n                                        (let [y (/ x start)]\n                                          (if (= y start) \n                                            0\n                                            y))))\n        :else (recur (inc start) sum)))))","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"(fn [n] (= n (apply + (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"511b810ce4b07ab9ec456182"},{"code":"(fn [a] (= a (apply + (filter #(= 0 (mod a %)) (range 1 a)))))","problem":80,"user":"4f9920a3e4b0dcca54ed6cfc"},{"code":"(fn [n]\n  (= n (apply + ((fn [n] (reduce #(if (= 0 (mod n %2)) (cons %2 %1) %1) [] (range 1 (- n 1)))) n))))","problem":80,"user":"518ccf6be4b05e6c8537e386"},{"problem":80,"code":"(fn f [n]\n  (let [factor? #(zero? (rem n %))\n        divisors (filter factor? (range 1 n))]\n    (= n (apply + divisors))))","user":"57adbe7ee4b0b8559636fca0"},{"problem":80,"code":"(fn [n]\n  (let [rs (filter integer?\n                   (for [x (range 2 (inc n))]\n                     (/ n x)))]\n    (if (= n (apply + rs)) true\n      false)))","user":"574abbfbe4b02ea114799200"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter (fn [x] (= 0 (mod n x))) (range 1 (+ (/ n 2) 1))))))","user":"573c813be4b0cd1946bd10c5"},{"code":"#( if (or (= % 6) (= % 496) (= % 8128) ) true false)","problem":80,"user":"4e6279e3535d8ccf87e9fe60"},{"problem":80,"code":"(fn perfect? [num] (letfn [\n    (divisible-by? [div num] (zero? (mod num div)))\n    (divisors-of [num] \n        (loop [i 1 acc #{}] \n            (if (= i num) acc\n                (if (divisible-by? i num) \n                    (recur (inc i) (conj acc i))\n                    (recur (inc i) acc)))))]\n    (= num (reduce + (divisors-of num)))))","user":"5da05bcce4b000c986472bd0"},{"problem":80,"code":"(fn [n]\n           (= n (apply + (filter #(= 0 (mod n %)) (range 1 (inc (int (/ n 2))))))))","user":"51b76227e4b0d906fcd71d35"},{"problem":80,"code":"#(loop [ i 1 ds [] ]\n   ( if (>= i %)\n     (= % (apply + ds))\n     (if (= 0 (rem % i))\n       (recur (inc i) (conj ds i))\n       (recur (inc i) ds)\n       )\n     )\n   )","user":"5b3aa98be4b02d533a91bbca"},{"problem":80,"code":"(fn [n]\n  (->>\n   (for [i (range 1 n)\n          :when (zero? (mod n i))]\n      i)\n   (apply +)\n   (= n)))","user":"54d4bd2be4b0a52adc2e2005"},{"code":"#(= %\n  (reduce +\n    (for [d (range 1 %)\n          :when (zero? (mod % d))] d)))","problem":80,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":80,"code":"(fn __ [x] (letfn [(divides? [x n] (zero? (mod x n)))\n                   (factors [x] (filter #(divides? x %) (range 1 x)))]\n               (= (reduce + (factors x )) x)))","user":"5e078ba7e4b0978307768fb6"},{"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (rem n %)) (rest (range n))))))","problem":80,"user":"50127fbfe4b030d97e4db70f"},{"code":"(fn [x]\n           (= x (apply + (filter  #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"4f0664bd535dcb61093f6c0f"},{"problem":80,"code":"(fn [n]\n  (let [divisors (loop [acc '() i (int (/ n 2))]\n                   (if (= i 1) (conj acc 1)\n                     (if (= 0 (mod n i)) (recur (conj acc i) (dec i))\n                       (recur acc (dec i)))))]\n    (= n (reduce + divisors))))","user":"5ce56455e4b0a17bb84e2b71"},{"code":"(fn [n]\r\n  (= n (reduce +\r\n         (filter #(= 0 (mod n %))\r\n           (range 1 (+ 1 (/ n 2)))))))","problem":80,"user":"4db599e6535d87e67b28fe11"},{"problem":80,"code":"(fn [n] (->> n (range 1) (filter #(zero? (mod n %))) (reduce +) (= n)))","user":"54ddb556e4b024c67c0cf798"},{"code":"(fn[x]\r\n   (let [d (filter #(= 0 (mod x %1)) (rest (range x)))\r\n         s (reduce + d)]\r\n     (= s x)))","problem":80,"user":"4ff07688e4b0678c553fc324"},{"problem":80,"code":"(fn [num]\n  (let [divisors (filter #(zero? (mod num %)) (range 1 num))]\n    (= (reduce + divisors) num)\n    )\n  )","user":"589037b4e4b00487982d51d0"},{"problem":80,"code":"(fn [n]\n    (let [d (filter #(zero? (mod n %)) (range 1 (inc (/ n 2))))]\n      (= (apply + d) n)))","user":"538ca203e4b0b51d73faae5f"},{"code":"(fn [n]\n  (= n\n     (apply + (filter #(zero? (rem n %)) (range 1 (inc (quot n 2)))))))","problem":80,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":80,"code":"(fn [n]\n  (let [d #(= 0 (- (/ %1 %2) (quot %1 %2)))\n        pd (filter #(d n %) (range 1 n))]\n    (= (apply + pd) n)))","user":"56f51879e4b046a417f92069"},{"problem":80,"code":"(fn [n] \n  (loop [d (int (/ n 2))\n         s 0]\n    (if (= 0 d)\n      (= n s)\n      (recur (dec d) \n             (if ( = 0 (mod n d))\n               (+ s d)\n               s)))))","user":"5018ed15e4b011a2e0bf6412"},{"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(zero? (rem n %)))\n       (reduce +)\n       (= n)))","problem":80,"user":"5392b849e4b0b51d73faaeb1"},{"code":"(fn perfect? [n]\n  (=\n    n\n    (apply +\n      (filter (fn [x] (zero? (mod n x))) (range 1 n)))))","problem":80,"user":"5201ada5e4b0b2e020a18f14"},{"problem":80,"code":"(fn solution [num]\n  (let [divisors (range 1 num)]\n    (and (= num (reduce #(if (= (mod num %2) 0)\n                           (+ %2 %1)\n                           %1) 0 divisors)))))","user":"5e2ef900e4b05b4b015161fc"},{"problem":80,"code":"#(= (apply + (filter (fn [n] (= (Math/floor (/ % n)) (Math/ceil (/ % n))))\n                     (range 1 %))) %)","user":"532ecd44e4b019098a6f8b49"},{"code":"(fn perfect-number? [n]\n  (let [divs (filter #(= 0 (mod n %))\n                     (range 1 (inc (/ n 2))))]\n    (= n (reduce + divs))))","problem":80,"user":"4ee82ce9535d93acb0a6687a"},{"code":"(fn [n]\n  (= n\n     (apply + (filter #(= 0 (mod n %))\n                   (range 1 (+ 1 (/ n 2)))))))","problem":80,"user":"4f62b29ce4b0defedf855fd9"},{"code":"(fn [x] \n  (letfn [(d [n] (filter #(= 0 (mod (/ n %) 1)) (range 1 (inc (/ n 2)))))]\n    (= x (apply + (d x)))\n    )\n  )","problem":80,"user":"52593207e4b0cb4875a45cd3"},{"problem":80,"code":"(fn pf [n]\n  (= n \n    (reduce + (->> (range 1 n)\n                   (filter #(zero? (rem n %)))))))","user":"53d78b64e4b0e771c3025466"},{"code":"(fn [n]\n\t  (= n (apply + (filter #(= (rem n %) 0 ) (range 1 (inc (/ n 2)))))))","problem":80,"user":"5016ac54e4b052339a490e7b"},{"problem":80,"code":"(fn isperf [n]\n  (= n\n     (reduce +\n      ((fn p-factors [x]\n         (filter\n          #(= 0 (mod x %))\n          (range 1 x)\n          )\n         )\n       n\n       )\n      )\n     )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":80,"code":"(fn [n]\n  (let [divides-n #(= 0 (mod n %))\n        divisors (filter divides-n (range 1 n))]\n    (= n (reduce + 0 divisors))))","user":"4ff24a1ae4b0678c553fc337"},{"problem":80,"code":"(fn [n] (= n (apply + (filter #(= 0 (rem n %)) (range 1 (inc (/ n 2)))))))","user":"5e2549c8e4b05b4b0151615f"},{"problem":80,"code":"(fn divisorSum [n]\n(if\n(= \n(->>  (for [x (range 1 (Math/sqrt n))]\n      (if (= 0 (mod n x)) \n        (if (= x (/ n x))\n          (list x)\n          (list x (/ n x))) \n        `()))\n        (flatten)\n        (remove #(= n %))\n        (reduce +))\nn)\ntrue\nfalse))","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn [n]\n  (= n\n     (->>\n       (range 1 n)\n       (filter #(zero? (mod n %)))\n       (apply +))))","problem":80,"user":"4ff5744ae4b0678c553fc36a"},{"problem":80,"code":"(fn [n]\n  (= n (apply +\n              (filter #(= 0 (mod n %))\n                      (map inc (range (/ n 2)))))))","user":"52fc34cee4b047fd55837015"},{"problem":80,"code":"(fn[x] \n   (if \n     (= \n        (reduce \n                + \n                (filter \n                     #(= (mod x % ) 0) \n                      (rest (range x))\n                )\n         )\n         x\n      )\n      true\n      false\n    )\n  )","user":"56e6e1e6e4b02e7e935eb6cf"},{"code":"(fn [n]\n  (= n (reduce + (filter #(= (rem n %) 0) (range 1 (inc (/ n 2 )))))))","problem":80,"user":"50052fd0e4b0678c553fc45d"},{"code":"(fn perf[n] \n  (not (nil? (#{6 496 8128} n))))","problem":80,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"(fn [i]\n      (letfn [(find-divisors [i]\n                (filter #(zero? (rem i %))\n                        (range 1 (inc (int (/ i 2))))))\n              (perfect? [i]\n                (= (apply + (find-divisors i)) i))]\n        (perfect? i)))","problem":80,"user":"509e62a8e4b08df8156e9e2e"},{"code":"#(= %\r\n    (apply + (for [i (iterate inc 1)\r\n                   :while (< i %)\r\n                   :when (zero? (rem % i))] i)))","problem":80,"user":"4dd7d040535d2dad7130b5d6"},{"code":"(fn [n]\n  (= n\n    (apply +\n      (filter\n        #(zero? (mod n %))\n        (range 1 (inc (int (/ n 2))))))))","problem":80,"user":"4fb2101ce4b081705acca284"},{"code":"#(= % (apply + (filter (fn [x] (= 0 (rem % x))) (range 1 %))))","problem":80,"user":"528a3e14e4b0239c8a67ae72"},{"problem":80,"code":"(fn [x]\n\t(if (= ((fn [x d s]\n\t\t(if (= d 0)\n\t\ts\n\t\t(if (= (mod x d) 0)\n\t\t\t(recur x (- d 1) (+ s d))\n\t\t\t(recur x (- d 1) s)))) x (int (Math/floor (/ x 2))) 0) x)\n\t\ttrue\n\t\tfalse))","user":"5de7377ee4b0986d99407f75"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce +\n             (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))))\n\n;(fn [n]\n;  (as-> n x\n;        (/ x 2)\n;        (inc x)\n;        (range 1 x)\n;        (filter #(zero? (mod n %)) x)\n;        (reduce + x)\n;        (= n x)))","user":"56481722e4b0284900eef628"},{"code":"(fn [x]\n  (= x\n     (->> (range 1 (inc (/ x 2)))\n          (filter #(zero? (mod x %)))\n          (reduce +))))","problem":80,"user":"50fc299ee4b0d10d794c19f2"},{"code":"(fn [n] (= n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":80,"code":"#(->> (range 1 %)\n      (filter (comp zero? (partial rem %)))\n      (reduce +)\n      (= %))","user":"4fe9de74e4b0547ebccb2475"},{"problem":80,"code":"(fn [i]\n  (->> i range (drop 1) (filter #(= 0 (rem i %))) (reduce +) (= i)) )","user":"53c1ce3ee4b00fb29b221268"},{"problem":80,"code":"(fn f [n]\n  (->> (range 1 n)\n       (filter #(zero? (mod n %)))\n       (apply +)\n       (= n)))","user":"56795deae4b05957ce8c6187"},{"problem":80,"code":"(fn [n] (->> (range 1 n)\n             (filter #(zero? (mod n %)))\n             (reduce +)\n             (= n)))","user":"5bafd5c8e4b0a20761a234dd"},{"problem":80,"code":"#(or (= 6 %) (= 496 %) (= 8128 %))","user":"6076adb2e4b069485764de60"},{"code":"#(loop [n %\n        d 1\n        s 0]\n   (if (= d n)\n     (= s n)\n     (if (= 0 (mod n d))\n       (recur n (inc d) (+ s d))\n       (recur n (inc d) s))))","problem":80,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn perfect? [x] (= x (apply + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":80,"code":"#(= % (apply +\n             (filter (fn [x] (= (mod % x) 0)) \n                     (range 1 %))))","user":"5c1aadcde4b01240ff567209"},{"code":"(fn [n]\n  (= n (apply +\n        (filter #(= 0 (mod n %))\n                (range 1 n)))))","problem":80,"user":"502873a8e4b01614d1633ff8"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter #(= (mod n %) 0) (take (dec n) (rest (iterate dec n)))))))","user":"54246fcce4b01498b1a71aed"},{"problem":80,"code":"(fn perfect-number [n]\n  (= n (reduce + (for [x (range 1 (inc (int (/ n 2))))\n                  :when\n                  (zero? (mod n x))]\n              x))))","user":"563b9acbe4b0bfe05bf11827"},{"code":"(fn [n]\n  (letfn [(divisors [n]\n                    (loop [candidate 2\n                           result #{1}]\n                      (if (> candidate (inc (Math/sqrt n)))\n                        result\n                        (recur (inc candidate)\n                               (if (zero? (rem n candidate))\n                                 (conj result candidate (quot n candidate))\n                                 result)))))]\n    (= n (reduce + (divisors n)))))","problem":80,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":80,"code":"(fn perfect-number? [n]\n  (let [divisors (filter #(zero? (mod n %)) (range 1 n))]\n    (= n (reduce + divisors))))","user":"5879d577e4b01531a375ead8"},{"problem":80,"code":"(fn [x]\n  (letfn [(divisors [n] (filter #(zero? (mod n %)) (range 1 n)))]\n    (= x (reduce + (divisors x)))))","user":"567695c2e4b05957ce8c6157"},{"problem":80,"code":"(fn [n]\n  (let [divide-ls (fn [n] (filter #(zero? (mod n %)) (range 1 n)))]\n      (= n (reduce + (divide-ls n)))))","user":"55c77070e4b0e31453f649d0"},{"code":"(fn [n]\n  (let [divs (filter #(= 0(rem n %)) (range 1 n))]\n\t\t(= n (reduce + divs))))","problem":80,"user":"508e13abe4b0f17d83ea26c7"},{"problem":80,"code":"(fn [x]\n  (let [divs (filter #(= 0 (mod x %)) (range 1 (dec x)))]\n    (= (reduce + divs) x)))","user":"5c950334e4b048ec896c5a44"},{"problem":80,"code":"(fn [n]\n  (= n\n     (loop [i 1 s 0]\n       (if (= i n)\n         s\n         (recur (inc i) (+ s (if (= 0 (mod n i)) i 0)))))))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":80,"code":"(fn [n]\n\t(= n (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"code":"(fn perfect?\n  [n]\n  (= n (reduce + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"4e50b67b535dc968683fc4ed"},{"problem":80,"code":"(fn [n]\n  (let [sieve (fn sieve [s]\n                (cons (first s)\n                      (lazy-seq (sieve (filter #(not= 0 (mod % (first s)))\n                                               (rest s))))))\n        nb-primes (+ (int (Math/sqrt n)) 1)\n        primes (take nb-primes (sieve (iterate inc 2)))\n        decomp (loop [n n primes primes r []]\n                 (let [p (first primes)]\n                   (if (> (* p p) n)\n                     (conj r n)\n                     (if (= (mod n p) 0)\n                       (let [[new-n ps] (loop [n n ps []] \n                                          (if (= (mod n p) 0) \n                                            (recur (/ n p) (conj ps p)) \n                                            [n ps]))]\n                         (recur new-n (rest primes) (apply conj r ps)))\n                       (recur n (rest primes) r)))))\n        cart (fn cart [colls]\n               (if (empty? colls)\n                 '(())\n                 (for [x (first colls)\n                       more (cart (rest colls))]\n                   (cons x more))))\n        pdivisors (map (fn [ps] (reductions * ps)) (partition-by identity decomp))\n        divisors (apply conj \n                        (into [1] (mapcat identity pdivisors)) \n             \t\t\t(map #(reduce * %) (cart pdivisors)))]        \n          (= n (/ (reduce + divisors) 2))))","user":"541d3c0fe4b01498b1a71a7e"},{"code":"(fn [n]\n  (= n (reduce +\n   (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"4e5a2403535d8a8b8723a2a7"},{"problem":80,"code":"(fn [n]\n  (= n\n     (->> (range 1 n)\n          (filter #(= 0 (rem n %)))\n          (apply +))))","user":"50ec409ce4b04edc33777045"},{"problem":80,"code":"(fn perfect [n] \n  (let [divs (filter #(= 0 (mod n %)) (range 1 (inc (int (/ n 2)))))]\n    (if (= n (apply + divs)) true false)))","user":"5243e37ae4b076204b44fae3"},{"problem":80,"code":"(fn perfect-number? [n] \n  (let [divides? (fn [a b] (zero? (mod a b)))]\n    (= n (reduce + (filter #(divides? n %) (range 1 (inc (Math/floor (/ n 2)) )))))\n    ))","user":"5972fcf6e4b01722bebd4c92"},{"problem":80,"code":"(fn [n] (->> (filter #(zero? (rem n %)) (range 1 n)) (apply +) (= n)))","user":"54a677a9e4b09f271ff37c88"},{"problem":80,"code":"(fn [m]\n    (let [divisors-of-m (filter #(zero? (mod m %)) (range 1 m))]\n      (= m (reduce + divisors-of-m))))","user":"56791447e4b05957ce8c6183"},{"problem":80,"code":"(fn perfect-number?\n  [n]\n  (= n (reduce \n        + \n        (filter \n         (fn [divisor]\n           (= 0 (mod n divisor)))\n         (range 1 n)))))","user":"53b952eee4b047364c0444e6"},{"code":"(fn [n]\n  (= n (apply + (filter (fn [x] (= (mod n x) 0)) (range 1 n)))))","problem":80,"user":"526f9715e4b03e8d9a4a7372"},{"problem":80,"code":"(fn sk-is-perfect-num? [number]\n  (let [all-perfects (filter #(zero? (mod number %)) (range 1 number))]\n    (= number (reduce + all-perfects)))\n  )","user":"5884f377e4b0f1effa3b76a8"},{"code":"(fn [p] (= (reduce +\n                  (filter #(zero? (mod p %))\n                          (range 1 p)))\n         p))","problem":80,"user":"500900dee4b0144d4f561e42"},{"code":"#(= (reduce + (for [i (range 1 (int %)) :when (= (mod % i) 0)] i)) %)","problem":80,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn [i-num]\r\n    (let [divisible #(and (zero? (rem i-num %)) (not= % i-num))\r\n        divisors (filter\r\n            divisible\r\n            (map inc (range i-num)))]\r\n        (= (apply + divisors) i-num)))","problem":80,"user":"4dddf817535d08e6dec9fdd3"},{"problem":80,"code":"(fn perfect-number\n  [n]\n  (= n  (apply + (filter #(= 0 (rem n %)) (range 1 (inc (/ n 2)))))))","user":"5b759ca8e4b047b03b2036d0"},{"problem":80,"code":"(fn [n] (= n (apply + (for [i (range 1 n) :when (zero? (mod n i))] i))))","user":"56897739e4b0dcc4269f407d"},{"problem":80,"code":"#(= (apply + (reduce (fn [res i]\n                (if (zero? (mod % i))\n                  (conj res i)\n                  res)\n                ) [] (range 1 %))) \n    %)","user":"5e348945e4b0650de70e2b1d"},{"problem":80,"code":"(fn is-perf-num [n]\n  (= n\n     (apply + (filter #(zero? (mod n %)) (range 1 (/ (inc n) 2))))))","user":"54bfc203e4b0ed20f4ff6f08"},{"problem":80,"code":"(fn[x] (= x (apply + (filter #(zero? (mod x %) ) (range 1 x)))))","user":"56979bb7e4b0e0b3d3318cac"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce #(if (= 0 (mod n %2))\n                (+ %1 %2)\n                %1)\n             0 (range 1 (inc (/ n 2))))))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":80,"code":"(fn isPerfect? [n]\n  (->>\n    (cons 2\n          (filter\n            (fn [x]\n              (every? #(> (mod x %) 0) (range 2 (+ (Math/sqrt x) 1)))\n              )\n            (iterate #(+ 2 %) 3)\n            )\n          )\n    (map #(int (* (Math/pow 2 (- %1 1)) (- (Math/pow 2 %1) 1))))\n    (drop-while #(< %1 n))\n    first\n    (= n)\n  )\n)","user":"525b4e8de4b0cb4875a45d0f"},{"code":"(fn perfectn [x] (= x (apply + (filter #(= (rem x %) 0) (take (- x 1) (filter (fn prime? [t]\r\n                        (fn pri [x] (if (some zero? (map #(rem x %)\r\n                                  (range 2 x))) \r\n                                      false true)))(iterate inc 1)))))))","problem":80,"user":"506717e2e4b03d366d7cb2ba"},{"code":"(fn [n]\n  (= n (apply + \n     (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4dcfbc44535d5973398f92a7"},{"code":"#(= % (reduce + (for [i (range 1 (inc (/ % 2))) :when (= 0 (rem % i))] i)))","problem":80,"user":"4e8f4f64535d65386fec2149"},{"problem":80,"code":"(fn [x]\n    (= (apply + (reduce #(if (= 0 (rem x %2))\n                           (conj %1 %2)\n                           %1) [1] (range 2 x)))\n       x))","user":"586b6753e4b01531a375e956"},{"problem":80,"code":"(fn [n]\n   (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"(fn [x]\n  (= x\n     (apply +\n            (filter\n              #(zero? (mod x %))\n              (range 1 (dec x))))))","problem":80,"user":"4fa5406fe4b081705acca1ac"},{"problem":80,"code":"(fn [n]\n    (->> (range 1 n) (filter #(zero? (mod n %))) (reduce +) (== n)))","user":"5409a12fe4b0addc1aec66df"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 (inc (/ n 2)))\n       (filter #(zero? (mod n %)))\n       (apply +)\n       (= n)))","user":"511688d5e4b0b3e208dba05a"},{"code":"(fn [n] (= n (reduce #(+ %1 (if (= 0 (rem n %2)) %2 0)) 0 (range 1 (- n 1)))))","problem":80,"user":"51aefceee4b09397d5109797"},{"problem":80,"code":"(fn divisor [n]\n    (->> (filter #(= 0 (rem n %)) (range 2 (inc (/ n 2))))\n         (apply +)\n         inc\n         (= n)\n         ))","user":"5921a080e4b09b4ee5954c77"},{"code":"(fn [s] \n  (= s (->> \n\t\t(range 1 s)\n\t\t(filter #(= 0 (rem s %)))\n\t\t(apply +))))","problem":80,"user":"4ec16c21535dfed6da9c6dac"},{"problem":80,"code":"(fn perfect? [n]\n  (= (->> (range 1 n)\n      (filter #(zero? (mod n %)))\n      (apply +))\n     n))","user":"59b1c2eae4b0e1f4e384c8ec"},{"problem":80,"code":"(fn [n] (letfn [(divisor? [d] (zero? (mod n d)))]\n            (->> (filter divisor? (range 1 (inc (/ n 2))))\n                 (reduce +)\n                 (= n))))","user":"5935b010e4b04f87174def55"},{"problem":80,"code":"(fn[num]\n   (= num\n          (reduce\n           (fn[ans curr-num]\n             (if (= 0 (rem num curr-num))\n               (+ ans curr-num)\n               ans\n              ))\n            0\n          (range 1 num))))","user":"5d8c8175e4b0915913b1d3e1"},{"problem":80,"code":"(fn is-perfect\n\t([x] (is-perfect x 1 0))\n\t([x n s]\n\t\t(cond\n\t\t\t(< s x) (if (= 0 (mod x n)) (recur x (inc n) (+ s n)) (recur x (inc n) s))\n\t\t\t(= s x) true\n\t\t\t:else false)))","user":"58fb7d7ae4b0438e51c2cf7a"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(zero? (mod n %)))\n       (apply +)\n       (= n)))","user":"54ca130ce4b057c6fda3a250"},{"code":"(fn [n] (= n (apply + (filter #(= 0 (mod n %)) (range 1 (/ (inc n) 2))))))","problem":80,"user":"4efd8b67535de96065cf5085"},{"code":"(fn [x]\n  (let [factors (fn [n] (filter #(zero? (rem n %)) (range 1 n)))]\n    (= x (apply + (factors x)))))","problem":80,"user":"50cb4cf6e4b0f78a8e1645b4"},{"problem":80,"code":"(fn perfect-num? [x]\n        (= (->> (range x)\n                rest\n                (filter #(= 0 (rem x %)))\n                (apply +))\n           x))","user":"58949f8de4b00487982d525e"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 (inc (/ n 2)))\n       (filter #(zero? (mod n %)))\n       (reduce +)\n       (= n)))","user":"58ca8a1de4b03c36ff7e5835"},{"problem":80,"code":"(fn pn [n] (= n (reduce + (filter #(integer? (/ n %)) (range 1 (inc (/ n 2)))))))","user":"5888b75fe4b0f1effa3b771b"},{"code":"(fn pn [n] (if (= n (/  (reduce + (mapcat #(if (= 0 (mod n %)) (conj [] % (/ n %))) (range 1 (. Math\n                                                                 sqrt\n                                                                 n))))\n                  2)) true false))","problem":80,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":80,"code":"(fn [n]\n  (loop [nums (range 3 (+ 2 (/ n 2)))\n         current 2\n         result [1]]\n    (if-not nums\n      (= n (apply + result))\n      (if (= (mod n current) 0)\n        (recur (next nums) (first nums) (conj result current))\n        (recur (next nums) (first nums) result)))))","user":"54580586e4b01be26fd74616"},{"problem":80,"code":"(fn [i]\n(->> i\n    (range 1)\n    (filter #(= 0 (mod i %)))\n    (reduce +)\n    (= i)))","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":80,"code":"(fn [number] (= (apply + (filter #(zero? (mod number %)) (range 1 (inc (quot number 2)))))\n                number)\n  )","user":"55fe7e15e4b00f4cabc57651"},{"problem":80,"code":"(fn [n]\n  (letfn [(f [m]\n             (filter #(= 0 (rem m %)) (range 1 m)))]\n    (= n (reduce + (f n)))))","user":"53e9a15be4b036ad0777e4ae"},{"problem":80,"code":"(fn perfect-number? [x]\n  (letfn [(divisors [x]\n            (->> (range 1 (dec x))\n                 (filter #(zero? (mod x %)))))]\n    (->> (divisors x)\n         (reduce +)\n         (= x))))","user":"53dc94c8e4b094d41abdfefc"},{"problem":80,"code":"(fn perfact_num [n]\n  (= n (apply + (filter #(zero? (mod n %1)) (range 1 n)))))","user":"5ab490f4e4b073f17744261d"},{"problem":80,"code":"(fn [x]\n  (let [divisors (filter (fn [v] (= 0 (mod x v))) (take (dec x) (iterate inc 1)))]\n    (= (reduce + 0 divisors) x)))","user":"5b0bea6de4b0cc2b61a3bdda"},{"code":"(fn perfect-numbers\n  [n]\n  (->> (filter #(= (mod n %) 0) (range 1 n)) (reduce + 0) (= n)))","problem":80,"user":"52016fd3e4b0b2e020a18f10"},{"problem":80,"code":"#(->> (range 1 %)\n      (filter (fn [x] (= (mod % x) 0)))\n      (apply +)\n      (= %))","user":"5d02fe44e4b0cc9c915881c0"},{"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4eb2e6ca535d7eef3080734f"},{"problem":80,"code":"(fn [x]  (= 0.0 (mod (Math/sqrt (+ 1 (* 8 x))) 1)))","user":"54c6ad6ae4b045293a27f62f"},{"code":"(fn perfect? [n]\n  (let [divisors (filter #(zero? (mod n %)) (range 1 n))]\n    (= n (apply + divisors))))","problem":80,"user":"4f9d53f3e4b0dcca54ed6d21"},{"code":"#(let [\n\t\tdivisors (filter (fn [d] (zero? (rem % d))) (range 1 %))\n\t\tsum-of-divisors (apply + divisors)]\n\t(= % sum-of-divisors))","problem":80,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":80,"code":"(fn perfect-number? [n]\n  (letfn [(divisors [n]\n            (filter\n              #(zero? (mod n %))\n              (rest (range (inc (quot n 2))))))]\n    (== n (reduce + (divisors n)))))","user":"5f300f28e4b033932238a682"},{"code":"#(= %\n    (reduce +\n          (filter (fn [x] (zero? (mod % x))) (range 1 %))))","problem":80,"user":"4f1abbfb535d64f60314646e"},{"problem":80,"code":"(fn [number]\n  (= number (reduce + (filter (fn [x] (= 0 (mod number x))) (range 1 number)))))","user":"52474133e4b05ef8e38e635e"},{"code":"(fn[n]\n  (= (dec n) (reduce + (filter #(= 0 (rem n %))\n                        (range 2 (dec n))))))","problem":80,"user":"4e58bcd4535d8a8b8723a296"},{"code":"(fn perfect? [x]\r\n  (= x (apply + (filter #(zero? (rem x %)) (range 1 x)))))","problem":80,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":80,"code":"(fn [n]\n    (->> (range 1 n)\n         (filter #(zero? (rem n %)))\n         (apply +)\n         (= n)))\n  \n;; (fn [n]\n;;   (->> (range 1 n)\n;;        (filter (comp zero? (partial mod n)))\n;;        (reduce +)\n;;        (= n)))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn [n]\n  (=\n    n\n    (apply\n      +\n      (filter\n        #(zero? (rem n %))\n        (range 1 n)))))","problem":80,"user":"4f253a49e4b0d66497709ff3"},{"problem":80,"code":"(fn [n]\n  (let [divisors (fn [n] (filter (fn [i] (zero? (mod n i))) (range 1 n)))]\n    (let [perfect? (fn [n] (= n (apply + (divisors n))))]\n \t  (perfect? n))))","user":"5385e633e4b06839e8705f08"},{"problem":80,"code":"(fn [n]\n  (= n (reduce +\n               (filter #(= 0 (mod n %)) (range 1 n)))))","user":"583e02fce4b089d5ab817da5"},{"problem":80,"code":"(fn [n]\n  (let [mersenne-primes [2 3 5 7 13 17]\n        perf-nums       (map #(biginteger (* (Math/pow 2 (- % 1))\n                                             (- (Math/pow 2 %) 1))) mersenne-primes)]\n    (boolean (some #(= n %) perf-nums))\n    )\n  )","user":"54e5bdf2e4b024c67c0cf7fe"},{"problem":80,"code":"(fn [x]\n  (=\n   \t (apply + (filter #(= 0 (mod x %)) (range 1 (inc (quot x 2)))))\n     x\n  )       \n)","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":80,"code":"(fn [n] (->> (reduce + (filter #(zero? (rem n %)) (range 1 (inc (int (/ n 2))))))\n             (= n )))","user":"57d0e185e4b0bd073c202360"},{"problem":80,"code":"#(case % 6 true 496 true 8128 true false)","user":"5507cfd3e4b021ccfedb96ad"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(= 0 (rem n %)))\n       (apply +)\n       (= n)))","user":"548fa2dfe4b0e286459a1240"},{"problem":80,"code":"(fn [x]\n      (= x (apply + (filter #(= 0 (rem x %)) (range 1 x)))))","user":"55e732c5e4b050e68259b492"},{"problem":80,"code":"(fn perfect? [x]\n\t(= x (apply + \n                1 \n                (for [i (range 2 (inc (quot x 2))) \n                      :when (= 0 (mod x i))] \n                  i))))","user":"564d02cde4b0284900eef679"},{"problem":80,"code":"(fn is-perfect? [x]\n  (let [divisors #(for [i (range 1 (inc (/ % 2))) :when (zero? (mod % i))]\n                   i)]\n    (= (apply + (divisors x)) x)))","user":"569dd6e8e4b0542e1f8d1480"},{"code":"(fn[n] (= n(apply + \r\n  (filter #(<(mod n %)1)(range 1 n)))))","problem":80,"user":"4dd66da7535d2dad7130b5c8"},{"code":"(fn [n]\n  (letfn [(divisors [x]\n            (filter #(zero? (mod x %)) (range 1 x)))]\n    (= n (reduce + (divisors n)))))","problem":80,"user":"4ea1b9e4535d7eef308072b8"},{"problem":80,"code":"(fn [n] (= n (reduce + (for [i (filter #(= 0 (rem n %)) (range 1 n))] i))))","user":"5746061ae4b009280f9f2b5b"},{"code":"#(= % (reduce + (filter (fn [x] (zero? (mod % x))) (range 1 %))))","problem":80,"user":"53034738e4b0d8b024fd373e"},{"problem":80,"code":"(fn [num] (= (apply + (filter #(= (rem num %) 0) (range 1 num))) num))","user":"568f2059e4b0dcc4269f40df"},{"code":"(fn [x]\n  (= x\n     (apply + (filter #(= 0 (rem x %)) (range 1 x)))))","problem":80,"user":"52c4af71e4b0c2d177d620e1"},{"problem":80,"code":"(fn [x]\n  (->> (range 1 x)\n       (filter #(= 0 (mod x %)))\n       (reduce +)\n       (= x)))","user":"55630cc1e4b0c656e3ff17e0"},{"problem":80,"code":"(fn perfect-number? [n]\n  (let [divs (filter (fn [x]\n                       (== 0 (rem n x))) \n                     (range 1 (dec n)))]\n  (= n (reduce + divs))))","user":"5be33a16e4b0ed4b8aab4cd6"},{"code":"(fn perf? [n]\n  (let [divs\n        (filter #(= 0 (mod n %)) (range 1 (inc (quot n 2))))]\n  (= n (apply + divs))))","problem":80,"user":"529ce629e4b04e0c58e87b6e"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce +\n             (filter #(zero? (rem n %))\n                     (range 1 (/ (inc n) 2))))))","user":"5b0e6795e4b0cc2b61a3be03"},{"problem":80,"code":"(fn perfect?\n  [n]\n  (loop [c    (dec n)\n         acc  0]\n    (if (= c 1)\n      (= (inc acc) n)\n      (if (= 0 (mod n c))\n        (recur (dec c) (+ acc c))\n        (recur (dec c) acc)))))","user":"56a94562e4b07966d5a8a074"},{"problem":80,"code":"(fn [n]\r\n(= n (reduce + (filter #(= (mod n %) 0) (range 1 n)))))","user":"5f2c02d1e4b033932238a65f"},{"problem":80,"code":"(fn perfectnum [n]\n  (= n \n     (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","user":"5cb4e764e4b026601754b929"},{"problem":80,"code":"(fn perfect?\n  ([n] (perfect? n 0 1))\n  ([n s c]\n   (cond\n     (> s n) false\n     (= s n) true\n     :else (recur n (+ s (if (= 0 (mod n c)) c 0)) (inc c)))))","user":"561ca6ebe4b064ca9f4b169c"},{"code":"(fn [n] (= n\n  (apply +\n    (filter\n      #(= 0 (rem n %)) \n      (range 1 n)))))","problem":80,"user":"4f01c938535dcb61093f6a39"},{"problem":80,"code":"(fn [x]\n\n(let [divsum (reduce + (filter #(= 0 (mod x %)) (range 1 x)))]\n  (= divsum x)))","user":"6045582fe4b02d28681c77b6"},{"code":"(fn [n]\r\n  (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"4fb37882e4b081705acca2a0"},{"code":"#(->> (range 1 %)\n      (filter (fn[v] (= 0 (mod % v))))\n      (apply +)\n      (= %))","problem":80,"user":"52479487e4b05ef8e38e6373"},{"problem":80,"code":"(fn perfect-number? [n]\n    (= n (reduce + (for [x (range 1\n                                  (inc\n                                    (quot n 2)))\n                         :when (= (rem n x) 0)]\n                     x))))","user":"5e7b1ef4e4b085ba37836e10"},{"problem":80,"code":"(fn [x]\n   (= x (apply + (filter\n                  #(zero? (mod x %))\n                  (range 1 x)))))","user":"55b1e9e7e4b0da326a65cf74"},{"problem":80,"code":"(fn [n]\n    (->>\n     (filter #(zero? (rem n %)) (range 1 n))\n     (reduce +)\n     (= n)))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 (inc (/ n 2)))\n       (filter #(= (/ n %) (int (/ n %))))\n       (apply +)\n       (= n)))","user":"54074fc5e4b0addc1aec66b6"},{"problem":80,"code":"(fn f [x]\n  (= x\n     (apply + (filter #(zero? (mod x %)) (range 1 x)))\n  )\n)","user":"55280930e4b0ffed3738f93b"},{"problem":80,"code":"(fn [n]\n  (= n \n     (apply + \n            (filter #(zero? (mod n %))\n                    (range 1 \n                           (inc (/ n 2)))))))","user":"4dd6d7ee535d2dad7130b5cb"},{"code":"#(= % (apply + \n      (filter (fn [n] (= 0 (rem %  n)))\n          (range 1 %))))","problem":80,"user":"517945dce4b0684c1c981a43"},{"problem":80,"code":"(letfn [(small-p [x]\n          (->> (range 2 (inc x))\n               (filter #(zero? (mod x %)))\n               first))\n        (get-pk [x p]\n          (loop [x x result 1]\n            (if (zero? (mod x p))\n              (recur (/ x p) (* result p))\n              result)))\n        (div-sum [x]\n          (loop [x x result 1] \n            (if (= x 1)\n              result\n              (let [p (small-p x)\n                    pk (get-pk x p)]\n                (recur (/ x pk)\n                       (* result (/ (dec (* pk p))\n                                    (dec p))))))))\n        (perfect? [x]\n          (= (+ x x) (div-sum x)))]\n  perfect?)","user":"55db7e15e4b0e31453f64ae8"},{"problem":80,"code":"(fn perfect [n]\n  (let [divisors ( fn [n]\n                  (filter (comp zero? (partial rem n)) (range 1 n)))]\n    (= n (reduce + (divisors n)))\n  ))","user":"559f06bae4b0acc240e314e6"},{"problem":80,"code":"(fn [num]\n    (= num\n    (reduce + (filter #(= 0 (mod num %)) (range 1 (- num 1)))))\n  )","user":"593f95d8e4b069cdc2982be3"},{"problem":80,"code":"(fn sum-divs [n]\n  (loop [i 2\n         acc 1]\n    (if (< i n)\n      (recur (inc i) (if (zero? (mod n i))\n                       (+ acc i)\n                       acc))\n      (= acc n))))","user":"580a0783e4b0a837a8b30d2c"},{"problem":80,"code":"(fn [n]\n  (let [mult? (fn [n d] (zero? (mod n d)))\n        divs  (filter #(mult? n %) (range 1 n))]\n    (= n (reduce + divs))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":80,"code":"(fn [n]\n    (->> (range 1 n)\n         (filter #(= (mod n %) 0))\n         (apply +)\n         (= n)))","user":"5782018de4b0d36ec5835e8e"},{"code":"(fn [d] (= d ((fn [x] (reduce + (filter #(= (mod x %) 0) (range 1 x)))) d)))","problem":80,"user":"5032b398e4b00c0952a257eb"},{"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (rem n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"52efd3d9e4b05e3f0be25ed4"},{"problem":80,"code":"(fn [x]\n  (let [s (filter #(= 0 (mod x %)) (range 1 x))]\n    (= x (apply + s))))","user":"53b7c21ae4b047364c0444d4"},{"problem":80,"code":"(fn perfectn [n]\n   (let [minn 1\n         maxn (int (/ n 2))]\n     (= n\n      (loop [x minn\n             t 0]\n        (if (> x maxn)\n          t\n          (recur\n            (+ 1 x)\n            (if (= 0 (mod n x))\n              (+ t x)\n              t)))))))","user":"5162757ee4b03cfa3774b3fe"},{"code":"(fn [n]                                                                                         \n  (letfn [(pdivs [n]                                                                                           \n                 (loop [s 2                                                                                    \n               n n                                                                                             \n               ds []]                                                                                          \n          (if (= 1 n)                                                                                          \n            ds                                                                                                 \n            (if (zero? (mod n s))                                                                              \n              (recur s (/ n s) (conj ds s))                                                                    \n              (recur (inc s) n ds)))))                                                                         \n         (subvecs [v]                                                                                          \n                  (loop [v v                                                                                   \n                         ss [[]]]                                                                              \n                        (if (empty? v)                                                                         \n                            ss                                                                                 \n                          (recur (rest v) (into ss (map #(conj % (first v)) ss))))))]                          \n         (= n (reduce + 0 (filter #(< % n) (map #(reduce * 1 %) (distinct (subvecs (pdivs n)))))))))","problem":80,"user":"52753740e4b03e8d9a4a74c1"},{"code":"(fn [n] (let\n          [divisors (filter #(= 0 (rem n %)) (range 1 n))]\n          (= n (reduce + divisors))))","problem":80,"user":"51307b84e4b08c712d3fae39"},{"code":"(fn perfekt [n]\n  (zero?\n    (reduce - n\n      (filter #(zero? (rem n %))\n        (range 1 n)))))","problem":80,"user":"50901b2ee4b0ea685a20f774"},{"code":"(fn [x]\n  (= x (reduce + (filter #(= 0 (mod x %)) (range 1 x)))))","problem":80,"user":"4f08b15b535dcb61093f6c40"},{"problem":80,"code":"(fn perf-nums [a]\n       (loop [nums (range 1 a)  divisors []]\n         (if (empty? nums)\n           (= (reduce + divisors) a)\n           (recur\n             (rest nums)\n             (if (not= (type (/ a (first nums))) clojure.lang.Ratio)\n               (conj divisors (first nums))\n               divisors)))))","user":"5e380e72e4b01d43a70e8db0"},{"problem":80,"code":"(letfn [(all-divisors [n]\n          (let [root (Math/sqrt n)]\n            (->> (range 1 (inc root))\n                 (filter #(= 0 (mod n %)))\n                 (mapcat #(vector % (/ n %)))\n                 (into #{})\n                 (remove #{n}))))]\n  (fn perfect? [n]\n    (= n (reduce + (all-divisors n)))))","user":"51f01925e4b0249c592fbdfc"},{"problem":80,"code":"(fn perfect-square [number]\n  (= \n    (reduce + (filter #(zero? (rem number %)) (range 1 number))) \n    number))","user":"5b337ff4e4b025bcb146f339"},{"code":"(fn perfect [n]\n  (= n (reduce + (filter #(= 0 (rem n %)) (range 1 (+ (/ n 2) 1))))))","problem":80,"user":"51d96ad0e4b02ceefd94774f"},{"code":"(fn [n]\n  (let [divs (for [x (range 1 n) :when (zero? (rem n x))] x)]\n       (= n (apply + divs))))","problem":80,"user":"4ec21058535dfed6da9c6dba"},{"problem":80,"code":"(fn [x] (= x (reduce + (set (filter #(zero? (mod x %)) (range 1 x))))))","user":"573ce277e4b05c31a32c080b"},{"problem":80,"code":"(fn [q]\n      (let [d ((fn [n] (loop [x 1, r[]] (if (> x (/ n 2)) r (recur (inc x) (if (= (Math/ceil (/ n x)) (Math/floor (/ n x))) (conj r x) r))))) q)]\n           (= q (reduce + d))\n           )\n      )","user":"53bcdd41e4b0d9a98559a6c0"},{"code":"(fn perfect? [n]\n  (->> (range 1 n)\n       (filter #(zero? (mod n %)))\n       (apply +)\n       (= n)))","problem":80,"user":"530578ede4b0d8b024fd3760"},{"problem":80,"code":"(fn [n]\n  (let [divisors (for [i     (range 1 (inc (/ n 2)))\n                       :when (zero? (rem n i))]\n                   i)]\n    (= n (reduce + divisors))))","user":"59fa241ee4b0ca45a743a358"},{"problem":80,"code":"(fn [n] (->> (range 1 n)\n             (filter #(zero? (mod n %)))\n             (reduce + )\n             (= n)))","user":"56b86e64e4b0f26550335924"},{"code":"(fn [n]\n  (->> (range 1 (inc (/ n 2)))\n       (filter #(= 0 (mod n %)))\n       (apply +)\n       (= n)))","problem":80,"user":"525ed5f4e4b0cb4875a45db8"},{"code":"(fn [x]\n  (= x (reduce + (for [d (range 1 (inc (/ x 2)))\n              \t\t\t:when (zero? (rem x d))]\n             \t\td ))))","problem":80,"user":"4e6e3aac535d5021c1a89603"},{"code":"(fn [n]  \n  (let [divisors (fn [n] (filter #(zero? (mod n %)) (range 1 n)))] \n    (= n (reduce + (divisors n)))))","problem":80,"user":"51cdd3f0e4b0e42293a2254b"},{"code":"(fn [x] (= x (reduce + (remove #(< 0 (rem x %)) (range 1 x)))))","problem":80,"user":"4ef77edb535dced4c769f254"},{"problem":80,"code":"(fn [n]\n  (= (reduce + (filter #(zero? (mod n %)) (range 1 n))) n))","user":"5dd60c58e4b0948ae9d9ad7c"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + ((fn divisors [n]\n                    (filter #(zero? (mod n %)) (range 1 n))) n))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisors (filter #(zero? (rem n %)) (range 1 n))]\n    (= n (apply + divisors))))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":80,"code":"(fn [x] (= x (apply + (filter #(= (mod x %) 0) (range 1 (inc (/ x 2)))))))","user":"584dadebe4b0b7285a6f4e44"},{"code":"(fn perf [n] \n   (let [start (/ n 2)] \n      (= n (reduce + (for [x (range 1 (inc start))\n            :when (= (mod n x) 0)] x)))\n   )   \n)","problem":80,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":80,"code":"#(\n  if (= %1 (\n            reduce\n            (fn [el, acc]\n              (+ el acc\n                 ))\n            0\n            ((fn divisors\n               [n]\n               (filter (comp zero? (partial rem n)) (range 1 n))) %1)\n            ))\n  true\n  false\n  )","user":"5bdc4a76e4b0ed4b8aab4c30"},{"problem":80,"code":"(fn [n]\n  (let [divisor? (fn [x y] (and (not (= x y)) (= 0 (rem x y))))]\n    (loop [x n divSum 0]\n      (if (= x 0)\n          (= n divSum)\n          (recur (dec x) (if (divisor? n x) (+ divSum x) divSum))))))","user":"59203996e4b09b4ee5954c5b"},{"code":"(fn [x] (= x (reduce + \n  (filter #(zero? (rem x %)) \n    (range 1 (inc (quot x 2)))))))","problem":80,"user":"4e6b6294535d8ccf87e9ff11"},{"code":"(fn per? [n]\n  (let [divisors (filter #(zero? (rem n %)) (range 1 n))]\n    (= n (reduce + divisors))))","problem":80,"user":"5003deb9e4b0678c553fc445"},{"problem":80,"code":"(fn [n]\n  (= n \n     (reduce + \n             (filter \n              #(zero? (rem n %))\n              (range 1 n) ))))","user":"524025bce4b0ad64fa01030f"},{"problem":80,"code":"#(= % \n    (apply + \n           (filter \n            (fn [x] (= 0 (mod % x)))\n            (range 1 %) \n            )\n           ))","user":"543d5c61e4b032a45b86934d"},{"code":"#(= %1 (reduce + (filter (fn [a] ((fn [i j] (zero? (mod i j)) ) %1 a) ) (range 1 %1)) ) )","problem":80,"user":"4e2164ff535d04ed9115e815"},{"code":"#(=\n  %\n  (reduce\n  +\n  (filter (fn [x] (= 0 (mod % x))) (range 1 %))\n  )\n)","problem":80,"user":"4f8ea1f7e4b0d4e659cdde69"},{"problem":80,"code":"(fn [x] \n  (->>\n    (+ (/ x 2) 1)\n    (range 1)    \n    (filter #(= 0 (mod x %)) )\n    (apply +)\n    (= x)\n  )\n)","user":"5da20e73e4b000c986472be1"},{"problem":80,"code":"(fn perfect [n]\n  (let [divs (for [x (range 1 (+ (quot n 2) 1))\n                   :when (= (rem n x) 0)]\n               x)\n        dsum (reduce + 0 divs)]\n    (= dsum n)))","user":"5f8b06afe4b0715f5002d74a"},{"problem":80,"code":"(fn [n]\n    (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"55c5b55fe4b0e31453f649b5"},{"code":"(fn [x]\n  (= x (reduce +\n    (filter #(zero? (mod x %))\n      (range 1 x)))))","problem":80,"user":"4fcf642ee4b03432b189f410"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisors [num]\n            (filter #(= 0 (mod num %))\n                    (range 1 num)))]\n    (= n (apply + (divisors n)))))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":80,"code":"(fn f80\n   [n]\n   (= n (apply + (for [i (range 1 n)\n                   :when (zero? (rem n i))]\n               i))))","user":"59390a35e4b02506e01a29f3"},{"problem":80,"code":"(fn [x]\n  (letfn [(divisors [x]\n           (loop [acc [1] k 2 upto (inc (int (Math/sqrt x)))]\n             (cond\n              (>= k upto)        acc\n              (zero? (mod x k))  (recur (conj (conj acc (/ x k)) k) (inc k) upto)\n              :else              (recur acc (inc k) upto))))]\n    (= x (reduce + 0 (divisors x)))))","user":"5576f299e4b05c286339e077"},{"problem":80,"code":"(fn perfect-number [n]\n  (let \n    [divisors (fn [d] (filter (comp zero? #(mod d %)) (range 1 d)))]\n    (= (apply + (divisors n)) n)))","user":"54d468d0e4b0a52adc2e2000"},{"problem":80,"code":"(fn [n]\n    (->> (inc (int (/ n 2)))\n         (range 1)\n         (filter #(zero? (mod n %)))\n         (reduce +)\n         (= n)))","user":"5df70ee8e4b0a607a9a45c8a"},{"code":"(fn [n]\n  (let [lst (filter #(= 0 (rem n %)) (range 1 n))]\n   (= n (reduce + lst))\n   )\n  \n  \n  \n  )","problem":80,"user":"516eb196e4b06aac486e5b2e"},{"code":"(fn f80 [n]\n  \"perfect number?\"\n  (let [list-divisors\n        (fn [n]\n          (loop [test 2 result [1]]\n            (if (> test (int (/ n 2)))\n              result\n              (if (zero? (rem n test))\n                (recur (inc test) (conj result test))\n                (recur (inc test) result)))))\n        sum (reduce + (list-divisors n))]\n    (= sum n)))","problem":80,"user":"4e88feef535d8b9bb0147ca8"},{"problem":80,"code":"(fn [x] (= x (apply + (filter #(integer? (/ x %)) (range 1 x)))))","user":"5933b736e4b072a2710fd05d"},{"code":"(fn [x] (== x  (apply +  (filter #(== (rem x %) 0 ) (range 1 x) ) ) ) )","problem":80,"user":"4e8d5edd535d65386fec2134"},{"problem":80,"code":"(fn [x]\n   (if (= (reduce + (drop-last (filter #(zero? (rem x %)) (range 1 (inc x))))) (last (filter #(zero? (rem x %)) (range 1 (inc x)))))\n     true\n     false))","user":"52ba2639e4b07a9af57922cb"},{"problem":80,"code":"(fn[xx]\n  (= xx (reduce + (filter #(= 0 (rem xx %)) (range 1 xx)))))","user":"52f426fce4b05e3f0be25f1e"},{"problem":80,"code":"(fn is-perf? [n]\n  (let [nums (range 1 (+ 1 (/ n 2)))\n        divs (filter #(zero? (mod n %)) nums)\n        divs-sum (apply + divs)]\n    (= n divs-sum)))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":80,"code":"(fn [t]\n  (let [get-divs (fn [t]\n                   (loop [x 1 r []]\n                     (if (>= x t) r\n                      (recur (inc x) (if (= 0 (mod t x)) (conj r x) r)))))]\n    (= t (apply + (get-divs t)))))","user":"55d74e71e4b0e31453f64aa4"},{"code":"(fn[n] (= n (reduce + 0 (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4ddbd934535d02782fcbe9fc"},{"code":"(fn [n] (= n (reduce + (filter #(= (mod n %) 0) (range 1 n)))))","problem":80,"user":"505dcfc8e4b0e6aca564be0d"},{"code":"(fn [n] (= n (reduce + (filter (fn [x] (= 0 (rem n x))) (range 1 n)))))","problem":80,"user":"525c575be4b0cb4875a45d38"},{"code":"(fn [n]\n  \n  (let [divisors-sum (->> (range 1 n) (filter #(= 0 (mod n %))) (reduce +)  )]\n       (= divisors-sum n) )\n   \n \n )","problem":80,"user":"51729002e4b044b2ef48a850"},{"problem":80,"code":"#(= % (reduce (fn [l i] (if (zero? (mod % i)) (+ l i) l)) (range 1 %)))","user":"55d62a68e4b0e31453f64a96"},{"problem":80,"code":"(fn [x] (= (apply + (filter #(= 0 (rem x %)) (range 1 x))) x)\n  )","user":"55e1d34ae4b050e68259b421"},{"problem":80,"code":"(fn perfect? [x]\n  (let [divisors (filter #(= 0 (mod x %)) (range 1 (inc (/ x 2))))]\n    (= x (apply + divisors))))","user":"53bf0913e4b0c98a41f5cc99"},{"code":"(fn [num] (= num\n        (apply + \n            (for [\n               n (reverse (range 1 (inc (quot num 2))))\n               :when (= 0(mod num n))] n))))","problem":80,"user":"4db2f208535df7e46ed9b6c9"},{"code":"#(= % (reduce (fn[a b](if (= 0 (rem % b)) (+ a b) a )) 0 (range 1 %)))","problem":80,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":80,"code":"(fn is-perfect? [n]\n  (let [divisors (reduce #(if (= (mod n %2) 0) (conj %1 %2) %1)\n                         []\n                         (drop 1 (range (+ (int (/ n 2)) 1))))]\n    (= (reduce + 0 divisors) n)))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"(fn[n]\n            (= (reduce + (filter #(= (rem n %) 0) (range 1 (inc (/ n 2 ))))) n)\n           )","problem":80,"user":"4ea85846535d7eef308072f9"},{"problem":80,"code":"(fn perfect [n]\n  (let [factors\n        (fn [n] (filter #(->> % (rem n) zero?) (range 1 n)))]\n    (= n (apply + (factors n)))))","user":"5da8fa72e4b000c986472c2d"},{"code":"(fn perfect? [n]\n  (= (reduce + (filter #(= 0 (mod n %)) (range 1 n)))\n     n))","problem":80,"user":"4ff304f4e4b0678c553fc343"},{"problem":80,"code":"(fn perfect [n]\n  (->> (/ n 2)\n       (inc)\n       (range 1)\n       (filter #(= 0 (rem n %)))\n       (reduce +)\n       (= n)))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":80,"code":"(fn [N]\n  (= N (reduce + 0 (filter #(zero? (mod N %)) (range 1 N)))))","user":"504e108ce4b078edc5f593b3"},{"problem":80,"code":"(fn [n] \n  (let [factors (filter #(zero? (mod n %))(range 1 n))]\n  (= n (reduce + factors))))","user":"55ecb2c0e4b0121d4835fdce"},{"code":"(fn [n] (= n (reduce #(if (zero? (rem n %2)) (+ % %2) %) 0 (range 1 n))))","problem":80,"user":"52265e41e4b04e78ff2e1981"},{"problem":80,"code":"(fn [n]\n\t(= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"5b4ff637e4b02d533a91bce0"},{"code":"(fn [n]\n   (->> (range 1 n)\n        (filter #(zero? (mod n %)))\n        (apply +)\n        (= n)))","problem":80,"user":"5175533fe4b0dea9bbfba575"},{"problem":80,"code":"(fn [n]\n   (->> (rest (range n))\n        (filter #(= 0 (mod n %)))\n        (apply +)\n        (= n)))","user":"57f80350e4b0d3187e90090c"},{"problem":80,"code":"(fn [x]\n   (let [d (fn d [i]\n                 (set (let [x i] (filter #(= 0 (mod x %)) (range 1 x)))))]\n  (= x (reduce + (d x)))))","user":"544e8369e4b0e39780006987"},{"problem":80,"code":"(fn [p]\n   (= p (reduce + (filter #(= 0 (mod p %)) (range 1 p)))))","user":"55f8b32ae4b03cbcff9738ba"},{"problem":80,"code":"(fn solution80\n  [n]\n  (= n (reduce + (filter (fn [x] (= 0 (rem n x))) (range 1 n)))))","user":"595bc925e4b066ee0a44afe2"},{"problem":80,"code":"#(= % (reduce (fn [a n] (if (= 0 (rem % n)) (+ a n) a)) (range 1 %)))","user":"502940a9e4b061fd216be4b8"},{"code":"(fn perfect? [number]\n\t(let [h (+ 1 (/ number 2))]\n\t\t(= number (reduce + (filter #(zero? (rem number %)) (range 1 h))))\n\t)\n)","problem":80,"user":"511cca27e4b00c2a1fa7ff7d"},{"code":"(fn [n]\n  (= (reduce + (filter #(zero? (mod n %)) (rest (range n)))) n))","problem":80,"user":"4edab806535d10e5ff6f5311"},{"problem":80,"code":"#(= (reduce +\n            (distinct\n             (reduce (fn [c v]\n                       (if (zero? (rem % v))\n                         (conj (conj c v) (quot % v))\n                         c))\n                     () (range 1 (inc (Math/floor (Math/sqrt %)))))))\n    (* 2 %))","user":"506ef8c3e4b09350ab4199f4"},{"problem":80,"code":"(fn [x] (= x (reduce +(filter #(= (rem x %) 0) (range 1 x)))))","user":"586b6a0ae4b01531a375e957"},{"problem":80,"code":"(fn [n]\n  (let [x (* 2 n)\n        y (int (Math/sqrt (double x)))]\n    (and (= 0 (rem x y)) (= (inc y) (quot x y)))\n    ))","user":"5628cb07e4b00e49c7cb47ef"},{"problem":80,"code":"(fn perfect? [n]\n  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 (inc (/ n 2)))))))","user":"597a4277e4b02382a38ad1e2"},{"problem":80,"code":"(fn [n]\n  (->> (for [x (range 1 (inc (/ n 2)))\n             :when (= 0 (rem n x))]\n         x)\n       (apply +)\n       (= n)))","user":"54848141e4b0e286459a119e"},{"code":"(fn [n] (= n (reduce + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"4db091b7838c48654951d9c2"},{"code":"(fn [n] (= n (reduce + \n  (filter #(zero? (rem n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"4e1c2e16535d04ed9115e804"},{"problem":80,"code":"(fn [num]\n    (= num \n       (reduce + (filter #(zero? (mod num %)) (range 1 num)))))","user":"537bde5de4b06839e8705e73"},{"problem":80,"code":"(fn [x]\n  (= \n   (reduce + (filter #(= (rem x %) 0) (range 1 x)))\n   x))","user":"5047782ce4b0371827a27bc2"},{"code":"(fn [n]\n   (= n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"50f48298e4b004d364930527"},{"problem":80,"code":"(fn perf [n]\n  (letfn [(divs [n]\n            (loop [i 1\n                   result []]\n              (cond (>= i n) result\n                    (zero? (rem n i))\n                    (recur (inc i)\n                           (conj result\n                                 i))\n                    :else (recur (inc i) result))))]\n    (= (reduce + (divs n)) n)))","user":"5895477fe4b00487982d527c"},{"code":"(fn [n]\n  (let [divs (filter #(zero? (mod n %)) (range 1 n))]\n    (= (reduce + divs) n)))","problem":80,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"problem":80,"code":"(fn [x]\n  (let [divnums (for [i (range 1 (inc (int (/ x 2))))\n                      :when (= 0 (rem x i))]\n                  i)]\n    (= x (reduce + divnums))))","user":"5705e404e4b0b0fb43fd0676"},{"code":"(fn [n] (= n  (reduce + (filter #(= (rem  n %) 0) (range 1 n)))))","problem":80,"user":"4ecf1f51535d1f5ad70dba3a"},{"code":"(fn \n    [n]\n    (= n (apply + (filter #(= 0 (rem n %)) (range 1 (inc (quot n 2)))))))","problem":80,"user":"50b35486e4b03ea88043356a"},{"problem":80,"code":"(fn [n](letfn [(dvd [x d] (if (= x (* d (int (/ x d)))) true false))\n               (mysqrt [k y] \n                       (if (> (* k k) y) (dec k) (recur (inc k) y) ))\n               (fakts [res t m] (let [q (mysqrt 1 m)]\n                      (if (> t q) res\n                         (if (dvd m t) \n                            (recur (conj (conj res t) (/ m t)) (inc t) m )\n                            (recur res (inc t) m)\n                          )\n                       )\n                       )) ]\n         (if (= n (reduce + (vec (fakts #{1} 2 n )))) true false)\n)      )","user":"59ff9424e4b01bb0ae8afd24"},{"problem":80,"code":"(fn perfect? [n] (contains?\n                   #{6,28,496,8128,33550336,8589869056,137438691328,\n                     2305843008139952128,\n                     2658455991569831744654692615953842176,\n                     19156194260823610729479337808430363813099732154816\\\n                     9216}\n                   n))","user":"587ee260e4b052da650a6353"},{"code":"(fn pn? [n]\n  (= n (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","problem":80,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":80,"code":"(fn [n]\n  (= (apply + (filter #(= (mod n %) 0) (range 1 n))) n))","user":"55316b8ae4b076ab5578f825"},{"problem":80,"code":"(fn [n] (if (= n\n\t\t  (reduce + \n                (filter #(if (= (mod n %) 0) true false)\n         \t\t\t\t(range 1 (inc (quot n 2)))))) true false ))","user":"567d18c9e4b05957ce8c61c4"},{"problem":80,"code":"(fn [x]\n  (letfn [(factors [i] (filter #(zero? (rem i %)) (range 1 i)))\n          (sum [i] (reduce + i))]\n    (= x (sum (factors x)))))","user":"5573ffb5e4b0aa18f790f3fd"},{"problem":80,"code":"(fn [x]\n (->> (inc (/ x 2))\n  (range 1)\n  (filter #(zero? (mod x %)))\n  (reduce +)\n  (= x)))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn [n]\n  (letfn [(divisors [n]\n            (filter #(zero? (mod n %)) (range 1 n)))]\n    (= (reduce + (divisors n)) n)))","problem":80,"user":"4e80aa10535db62dc21a62b1"},{"code":"(fn [n]\n  (= (reduce #(if (= (rem n %2) 0) (+ %1 %2) %1) (range 1 n)) n))","problem":80,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":80,"code":"(fn [x]\n  (= x (->> (range 1 x)\n           (filter #(zero? (mod x %)))\n            (apply +))))","user":"55b107fee4b002ce9d5cbc2a"},{"problem":80,"code":"#(let [divisor? (fn [a b] (= (rem a b) 0))\ndivisors (fn [x] (filter (fn [y] (divisor? x y)) (range 1 x)))]\n(= (reduce + (divisors %)) %))\n;cf.problem 67 Prime Numbers","user":"5e13a6b7e4b099d064963001"},{"code":"(fn perfect? [n]\n  (let [dividends (filter #(= 0 (rem n %)) (range 1 n))]\n    (= n (apply + dividends))))","problem":80,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + (take-while #(> n %) (filter #(= 0 (mod n %)) (rest (range)))))))","user":"53e745a1e4b036ad0777e479"},{"problem":80,"code":"(fn is-perfect? [n] (= n (apply + (filter #(= 0 (mod n %)) (range 1 (inc (/ n 2)))))))","user":"558b50d5e4b027778923762b"},{"code":"(fn [x]\n  (let [factors (filter #(= 0 (mod x %)) (range 1 x))]\n    (= x (reduce + factors))))","problem":80,"user":"4ee6400c535d93acb0a6685b"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (for [x (range 1 (inc (quot n 1.999)))\n                        :when (zero? (mod n x))] x))))","user":"6011b89ee4b074f607df66bc"},{"problem":80,"code":"(fn [n] \n    (= n (reduce + \n           (filter \n             #(zero? (rem n %)) \n             (range 1 n)))))","user":"5535e822e4b09218d5f44fb2"},{"problem":80,"code":"#(= (apply + (filter (comp zero? (partial rem %)) (range 1 %))) %)","user":"56ab7578e4b03c432f18733d"},{"problem":80,"code":";; Academic algo from http://www.programming-algorithms.net/article/40015/Perfect-number\n;;(fn [n] (let [max (Math/sqrt n)\n;;              l (reduce (fn [a v] (conj a v (quot n v))) [1] (filter #(= 0 (rem n %)) (range 2 (Math/ceil max)))) \n;;              l (if (= n (* max max)) (conj l (- max)) l)] \n;;          (= n (reduce + l))))\n;; Simplified algo\n(fn [n] (= n (reduce + (filter #(= 0 (rem n %)) (range 1 n)))))","user":"5a5894d9e4b05d388ecb6c81"},{"problem":80,"code":"(fn [x]\n  (->> (range 1 x)\n       (filter #(zero? (rem x %)))\n       (apply +)\n       (= x)))","user":"5be0306be4b0ed4b8aab4c7d"},{"code":"(fn [n]\n  (= n\n     (apply + (filter #(= (mod n %) 0) (range 1 n)))))","problem":80,"user":"4f3d83b5e4b0e243712b1f69"},{"problem":80,"code":"(fn [num] \n  (let [divisors (reduce (fn [a v] \n                           (if (= 0 (mod num v)) \n                             (conj a v)\n                             a\n                             )\n                           ) [] (range 1 num))]\n    (= (apply + divisors) num)))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":80,"code":"(fn perfect?\n  [n]\n  (let [divisors\n        (filter #(zero? (mod n %)) (rest (range n)))]\n    (= (apply + divisors) n)))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":80,"code":"(fn[x](= x(apply +(filter #(= 0 (rem x % )) (range 1 (inc (quot x 2)))))) )","user":"552800d7e4b0ffed3738f93a"},{"problem":80,"code":"(fn [n]\n    (let [sqrt-num (Math/sqrt n)]\n      (loop [i 2\n             coll-divs [1]]\n        (cond (> i sqrt-num) (= (apply + coll-divs) n)\n              :else\n              (recur (inc i) (if (= (rem n i) 0)\n                              (conj coll-divs i (quot n i))\n                              coll-divs))))))","user":"5e724492e4b085ba37836dc7"},{"problem":80,"code":"(fn [n]\n        (->> (range 1 n)\n             (filter #(zero? (mod n %)))\n             (apply +)\n             (= n)))","user":"51b24defe4b02f8f128bb963"},{"problem":80,"code":"(fn [n]\n    (= n (apply + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"507e68abe4b085af06e3afd2"},{"code":"(fn [n]\n  (= n \n     (apply + (filter #(zero? (mod n %)) (range 1 (inc (/ n 2))))\n            )\n     ))","problem":80,"user":"51da7e49e4b02ceefd947768"},{"problem":80,"code":"(fn perfect-number?\n  [n]\n  (let [sqrt (Math/sqrt n)]\n    (loop [ds [1]\n           d 2]\n      (if (> d sqrt)\n        (= n (reduce + ds))\n        (recur (if (zero? (mod n d))\n                 (conj ds d (long (/ n d)))\n                 ds)\n               (inc d))))))","user":"4e586949535d8a8b8723a292"},{"code":"(fn [x]\n  (let [dvs (filter #(zero? (mod x %)) (range 1 x))]\n    (= x (apply + dvs))))","problem":80,"user":"51e00020e4b01188f0627534"},{"problem":80,"code":"(fn perfectNumber [ n ] \n (= n (apply + (filter #(zero? (mod n %)) (range (dec n) 0 -1)))))","user":"57887de2e4b0ebec4cfb751c"},{"problem":80,"code":"(fn myf2 [n]\n  (->> (filter #(zero? (rem n %)) (range 1 n))\n      (apply +)\n      (= n)))","user":"577c3da9e4b0c8d87281f6b9"},{"code":"(fn [n] (= n (apply + (filter #(zero? (mod n %1)) (range 1 n)))))","problem":80,"user":"4e71705e535d5021c1a89649"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter (fn [d] (zero? (mod n d))) (range 1 n)))))","user":"60460824e4b02d28681c77bc"},{"problem":80,"code":"(fn [n]\n  (let [s (filter #(= 0 (rem n %)) (range 1 (inc (/ n (if (odd? n) 3 2)))))]\n    (= n (reduce + s))\n))","user":"54524afbe4b0e397800069bc"},{"problem":80,"code":"(fn [n]\n          (= n (reduce + (filter #(= 0 (mod n %)) (map inc (range (/ n 2)))))))","user":"531c6e72e4b08068f379eda0"},{"problem":80,"code":"(fn [n] \n  (= (apply + \n            (filter #(zero? (mod n %)) (range 1 n))) n))","user":"56efb3a3e4b04a395b9a0463"},{"problem":80,"code":"(fn [n]\n  (let [dividers (filter #(zero? (mod n %)) (range 1 n))]\n    (= n (apply + dividers))))","user":"5617a540e4b06b1bb2182a12"},{"code":"(fn [x]\n    (= x\n    (reduce + \n        (filter #(= (mod x %) 0)(range 1 x))\n    ))\n)","problem":80,"user":"4e78dc98535db95036265724"},{"problem":80,"code":"(fn [n] (= n (apply + (for [i (range 1 n) :when (#{0} (mod n i))] i))))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn [n]\n  (let [divisors (fn [n] (filter #(== (mod n %) 0) (range 1 n)))]\n    (== (reduce + (divisors n)) n)))","problem":80,"user":"4dbdce65535d020aff1edf4d"},{"code":"(fn p80 [n]\n  (let [\n       divs (filter #(= 0 (mod n %)) (range 1 n))\n         ]\n    (= (reduce + divs) n)\n))","problem":80,"user":"51750fc5e4b07031762f2ee6"},{"problem":80,"code":"#(= % (apply + (loop [divisors [], this-divisor (quot % 2)]\n    (if (= this-divisor 0) divisors\n      (recur\n       (if (= 0 (rem % this-divisor))\n         (cons this-divisor divisors)\n         divisors)\n       (dec this-divisor))))))","user":"5f548678e4b0a0bc16850a7e"},{"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))))","problem":80,"user":"4e356d2b535deb9a81d77f2d"},{"code":"(fn [n]\n  (= n (reduce + 1 \n               (filter #(zero? (mod n %)) \n                       (range 2 n)))))","problem":80,"user":"4fa9e9c6e4b081705acca1e9"},{"code":"#(= % (apply + (for [i (range 1 (+ 1 (quot % 2)))\n                     :when (= 0 (rem % i))]\n                    i)))","problem":80,"user":"51057b2be4b06d28cacc92e8"},{"code":"(fn f [n]\r\n  (= (reduce #(if (zero? (mod n %2)) (+ %1 %2) %1) 0 (range 1 n)) n))","problem":80,"user":"505dd5c4e4b0e6aca564be0e"},{"code":"(fn [n]\n  (= n (reduce + (filter #(zero? (rem n %)) (range 1 n)))))","problem":80,"user":"4dc1bd76535d020aff1edf8d"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n) (filter #(zero? (rem n %))) (reduce +) (= n)))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":80,"code":"(fn perfect? [number]\n   (let [divides? (fn divides? [num divisor] (zero? (mod num divisor)))\n         get-factors (fn get-factors [num]\n                       (let [ceiling (Math/ceil (/ num 2))]\n                         (loop\n                          [n 1\n                           res []]\n                           (if (> n ceiling)\n                             (-> res distinct sort butlast)\n                             (if (divides? num n)\n                               (recur (inc n) (conj (conj res n) (quot num n)))\n                               (recur (inc n) res))))))] (= number (apply + (get-factors number)))))","user":"5658d775e4b00d3155796114"},{"problem":80,"code":"#(= % (loop [result []\n             remain (range 1 %)]\n        (if (empty? remain)\n          (reduce + result)\n          (recur (if (ratio? (/ % (first remain))) result\n                   (conj result (first remain)))\n                 (rest remain)))))","user":"590b8607e4b047aa04b199db"},{"code":"(fn [x]\n  (let [div (filter #(= 0 (rem x %)) (range 1 x))]\n    (= x (reduce + div))\n  )\n)","problem":80,"user":"4f84400de4b033992c121c2e"},{"code":"(fn [x] \n  (= \n   x \n   (apply + \n    (filter \n     #(== (int (/ x %)) (/ x %)) \n     (map inc (range (dec x)))\n    )\n   )\n  )\n)","problem":80,"user":"513b77f3e4b00f740c76c403"},{"problem":80,"code":"(fn [n]\n    (== n (apply + (filter #(zero? (rem n %)) (range 1 n)))))","user":"55597b84e4b0deb715856e36"},{"code":"(fn [x]\n  (let [divisors (filter #(zero? (mod x %)) (range 1 x))\n        sum-of-divisors (apply + divisors)]\n    (= x sum-of-divisors)))","problem":80,"user":"4daf36c2edd6309eace4d175"},{"problem":80,"code":"(fn pn [num]\n    (= num (reduce + (filter #(= 0 (mod num %)) (range 1 num)))))","user":"57db2369e4b0bd073c20241f"},{"problem":80,"code":"(fn perfect? [n] ( = n (reduce + (filter #(zero? (rem n %)) (range 1 (inc (/ n 2)))))))","user":"56050f06e4b08b23635d3161"},{"problem":80,"code":"(fn [n]\n  (let [sqrt (Math/sqrt n)\n        ints (take-while #(<= % sqrt) (iterate inc 2))\n        lower-divs (filter #(= 0 (rem n %)) ints)\n        divs (concat [1] lower-divs (map #(/ n %) lower-divs))]\n    (= n (reduce + divs))))","user":"5317d78ee4b08068f379ed63"},{"code":"(fn perfect? [n]\n  (letfn [(get-divisors [n remainder known test]\n    (if (>= test remainder) known\n\t\t  (if (zero? (rem remainder test))\n\t\t    (let [new-remainder (/ remainder test)]\n\t\t      (recur n new-remainder (into known [new-remainder (/ n new-remainder)]) test))\n\t\t    (recur n remainder known (inc test)))))]\n\t  (let [divisors (get-divisors n n #{1} 2)]\n\t    (prn divisors)\n\t    (= n (reduce + divisors)))))","problem":80,"user":"4e5fdd68535d8ccf87e9fe4f"},{"problem":80,"code":"(fn perfect [n]\n  (= (apply + (filter #(zero? (rem n %)) (range 1 (inc (/ n 2)))))\n     n))","user":"4e41a04e535dc968683fc49e"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + ((fn [p] (filter #(integer? (/ p %)) (range 1 p))) n))))","user":"5ed65b59e4b016b56eae05df"},{"problem":80,"code":"(fn perfect [x]\n  (loop [start 2 end (+ 1 (int (/ x 2))) sum 1]\n    (if (>= start end)\n      (if (= sum x ) true false)\n      (recur (inc start) end (if (= (mod x start)0) (+ sum start) sum)))\n    )\n  )","user":"5e9d99f9e4b0157ca9664806"},{"code":"(fn [num] (= num (apply + (filter #(= 0 (rem num %)) (range 1 num)))))","problem":80,"user":"4e7f4147535db966e863cc3d"},{"code":"(fn my-perfect [n]\n  (letfn [(divers [n] (filter #(integer? (/ n %)) (range 2 n)))]\n    (= n (inc (reduce + (divers n))))))","problem":80,"user":"4f251302e4b0d66497709ff0"},{"problem":80,"code":"(fn [n]\n  (letfn [(factor [n] (filter #(zero? (mod n %)) (range 1 (inc (/ n 2)))))]\n    (= n (apply + (factor n)))))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter #(= 0 (rem n %)) (range 1 n) ) ) )\n  )","user":"5776558ee4b0979f89651633"},{"problem":80,"code":"(fn [x]\n   (->> (range)\n        (map #(reduce + (range %)))\n        (take-while #(<= % x))\n        (some #(= % x))\n        not not))","user":"531bfb69e4b08068f379ed97"},{"code":"contains? (set (map (comp #(* % (/ (dec %) 2)) #(bit-shift-left 2r1 %)) '(2 3 5 7 13 17 19 31 61 89 107)))","problem":80,"user":"5246e945e4b0644eb7b0783b"},{"problem":80,"code":"#(= %\n    (apply +\n           (for [y (range 1 (inc (/ % 2)))\n                 :when (zero? (mod % y))]\n             y)))","user":"56baa68ce4b0f26550335947"},{"problem":80,"code":"(fn [n]  \n  (= n (reduce + (filter #(zero? (mod n %)) (range 1 n)))))","user":"54e1197fe4b024c67c0cf7c0"},{"code":"(fn [n]\n  (= n \n    (apply + (filter #(zero? (mod n %)) \n                     (range 1 (+ 1 (/ n 2)))))))","problem":80,"user":"4fdb02aae4b05e33b9224f56"},{"problem":80,"code":"(fn is-perfect? [d]\n\t(letfn [(sum-digits [coll] (reduce + coll))\n\t\t\t(is-divisable? [n m] (zero? (rem m n)))\n\t\t\t(get-divisors [n]\n\t\t\t\t(loop [i 1 max-d (int (/ n 2)) result []]\n\t\t\t\t\t(if (> i max-d)\n\t\t\t\t\t\t(if (is-divisable? i n)\n\t\t\t\t\t\t\t(conj result i)\n\t\t\t\t\t\t\tresult)\n\t\t\t\t\t\t(recur (inc i) max-d (if (is-divisable? i n) (conj result i) result)))))]\n\t\t(= d (sum-digits (get-divisors d)))))","user":"57c0917be4b05aa3c4741c95"},{"problem":80,"code":"(fn [n] \n   (= n (apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"51bd255ce4b0df1216cefd94"},{"code":"(fn [n]\n    (letfn [(divisors [n]\n              (filter #(zero? (mod n %)) (range 1 n)))]\n      (= n (apply + (divisors n)))))","problem":80,"user":"51c3c6a6e4b0851ac09658f8"},{"problem":80,"code":"(fn [x] \n  (= x (reduce + (filter #(= 0 (rem x %)) (range 1 x)))))","user":"574a71b7e4b02ea1147991fb"},{"code":"(fn perfect? [n]\n  (= n (apply + (filter #(integer? (/ n %)) (range 1 n)))))","problem":80,"user":"4ea7999e535d7eef308072ee"},{"code":"(fn [n]\n          (= (dec n)\n             (apply\n              + (set (apply concat (for [m (range 2 n)\n                                         :while (<= (* m m) n)\n                                         :when (zero? (mod n m))] [(/ n m) m]))))))","problem":80,"user":"4fbfe9a4e4b081705acca31f"},{"code":"(fn [n]\n  (let [ds (filter #(= 0 (mod n %)) (range 1 n))]\n    (= n (apply + ds))))","problem":80,"user":"500933a6e4b046cdb195e074"},{"problem":80,"code":"(fn perfect? [n]\n  (letfn\n    [(factors [x]\n       (distinct\n         (mapcat #(vector % (/ x %))\n           (filter #(= 0 (mod x %)) (range 1 (inc (Math/sqrt x)))))))]\n    (=\n      (reduce + (factors n))\n      (* 2 n))))","user":"566ff0a1e4b0a866af6896ec"},{"problem":80,"code":"(letfn [(get-divisors [x] (filter #(zero? (rem x %)) (range 1 x)))\n        (get-divisors-sum [x] (apply + (get-divisors x)))]\n  (fn is-perfect-number? [x]\n    (= x (get-divisors-sum x))))","user":"56ac81ace4b03c432f187347"},{"code":"(fn [x]\n (let [number (/ x 2)]\n  (loop [i 1\n         arr []]\n    (if-not (> i number)\n      (if (= 0 (rem x i))\n        (recur (inc i) (conj arr i))\n        (recur (inc i) arr))\n\t(= (reduce + arr) x)))))","problem":80,"user":"52fa4f48e4b047fd55836ff7"},{"code":"(fn perfect? [n]\n  (let [divisors (filter #(and (not= % 0) (= (mod n %) 0)) (range n))]\n    (= (apply + divisors) n)))","problem":80,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":80,"code":"(fn divisors [x]\n  (->> (range 1 x)\n       (filter #(= (mod x %) 0) )\n       (reduce +)\n       (= x)\n       ))","user":"5bf5ddfde4b0bdcf453d159e"},{"problem":80,"code":"(fn perfect-num\n  [n]\n  (= n (reduce + (filter #(zero? (rem n %)) (range 1 (inc (quot n 2)))))))","user":"565654dae4b0f9d632dd849f"},{"problem":80,"code":"(fn [x] (= x (reduce + (filter #(= 0 (rem x %)) (range 1 x)))))","user":"56304db8e4b073c1cf7a9be5"},{"problem":80,"code":"(fn [x]\n  (->>\n  (range 1 x)\n  (filter #(zero? (mod x %)))\n  (reduce +)\n  (= x)))","user":"54e345a1e4b024c67c0cf7db"},{"code":"(fn [x] (= x (reduce + (filter #(zero? (rem x %)) (range 1 x)))))","problem":80,"user":"514d8084e4b019235f6c0588"},{"code":"(fn[x] \n  (= x \n   (reduce + \n    (filter #(zero? (mod x %)) \n      (range 1 (inc (/ x 2)))))))","problem":80,"user":"506406c8e4b075d771da6f9f"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter #(zero? (mod n %))  (range 1 n)))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"problem":80,"code":"#(= % (reduce + (remove nil? (for [i (range 1 %)] (if (= 0 (mod % i)) i)))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":80,"code":"(fn [n]\n  (= n\n    (->> (map (fn [%] (if (= 0 (mod n %)) %)) (range 1 n))\n         (keep identity)\n         (apply +))))","user":"58983e3fe4b00487982d52ce"},{"problem":80,"code":"(fn [x] (let [divisors (filter #(= 0 (mod x %)) (range 1 x))] (= x (apply + divisors))))","user":"5ecc0831e4b016b56eae058c"},{"problem":80,"code":"(fn perfect? [n]\n  (letfn [(divides? [n d] (= 0 (rem n d)))]\n  (let [divisors (filter (partial divides? n) (range 1 n))]\n    (= (apply + divisors) n))))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn[n]\r\n  (= n\r\n    (apply + (filter #(= 0 (rem n %)) (range 1 n)))))","problem":80,"user":"4deff9f9535d08e6dec9fe15"},{"code":"(fn [x] (->> (filter #(zero? (rem x %)) (range 1 x))\n             (apply +)\n             (= x)))","problem":80,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn perfect? [n]\n  (= n (->> (range 1 n)\n              (filter #(zero? (rem n %)))\n              (reduce +))))","problem":80,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":80,"code":"(fn perfect? [n]\n  (let [ds (\n \n(fn divs [n]\n   (loop \n [d (Math/floor (/ n 2)) \n  res []]\n     (if (zero? d)\n       res\n       (if (zero? (mod n d))\n         (recur (dec d) \n                (conj res d))\n         (recur (dec d) res)\n       )\n     )\n   )\n)\n                    \n n) ]\n  ; (println ds)\n  ; (println (reduce + ds))\n   (= n (int (reduce + ds)))\n))","user":"574e7be7e4b02ea114799242"},{"problem":80,"code":"#(= %\n    (apply +\n           (for [n (range 1 %)\n                 :when (zero? (mod % n))]\n             n)))","user":"5f37263de4b0574c87022c4e"},{"problem":80,"code":"(fn [n]\n    (if (= n (reduce + (filter #(= (mod n %) 0) (range 1 n)))) true false))","user":"5f02f365e4b0cf489e8d7f2c"},{"code":"(fn [n]\n  (letfn [(dividers [n]\n                    (filter #(zero? (rem n %)) (range 1 n)))]\n    (= (reduce + (dividers n)) n)))","problem":80,"user":"524cdd51e4b0752c4cb68ccc"},{"problem":80,"code":"#(if (= % \n       (reduce +\n               (remove nil? \n                       (map (fn [y] (if (= 0 (mod % y)) y nil))\n                            (range 1 %)))))\n  true\n  false)","user":"607d6bc1e4b03d835a6eaecc"},{"code":"(fn t [n] (= n (reduce + (filter (fn [x] (= 0 (mod n x))) (range 1 n)))))","problem":80,"user":"52aa16d1e4b0c58976d9ac5a"},{"problem":80,"code":"(fn [n]\n  (let [dividors (for [x (range 1 n) :when (zero? (mod n x))] x)]\n    (= n (apply + dividors))))","user":"59a72effe4b066c664927d94"},{"problem":80,"code":"(fn [n]\n  (->>\n    (loop [r [1]\n          i 2] \n     (if (> i (/ n 2)) \n       r \n       (recur (if (= (mod n i) 0) \n                (conj r i) \n                r) \n              (inc i))))\n    (apply +)\n    (= n)))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn [n]\n  (= (apply + (filter #(= 0 (mod n %)) (range 1 n))) n))","problem":80,"user":"4ee75ec2535d93acb0a66867"},{"code":"(fn [v]\n  (= v (apply + (for [x (range 1 v) :when (zero? (mod v x))] x))))","problem":80,"user":"513fab65e4b00f13ea1bd891"},{"problem":80,"code":"#(let\n    [divisors (fn divisors\n                [n]\n                (filter (comp zero? (partial rem n)) (range 1 n)))]\n    (println (divisors %))\n    (= % (reduce + (divisors %))))","user":"55e6c3f5e4b050e68259b48c"},{"problem":80,"code":"(fn [n]\n  (== n\n      (reduce + (filter #(== 0 (mod n %)) (range 1 n)))))","user":"565a3e25e4b068f2fe63dbfb"},{"problem":80,"code":";(fn [x]\n ; (loop [l (range 1 (inc (quot x 2)))\n  ;      final []]\n   ; (if (seq l)\n    ;  (if (= (rem x (first l)) 0)\n     ;   (recur (next l) (conj final (first l)))\n      ;  (recur (next l) final))\n     ;(= x (reduce + final)))))\n     \n(fn [x]\n  (->> x\n       (range 1)\n       (filter #(zero? (rem x %)))\n       (apply +)\n       (= x)))","user":"593744abe4b02506e01a299b"},{"problem":80,"code":"(fn is-perfect\n  [num]\n  (= num ((fn [num]\n            (reduce + (filter number?((fn [num]\n                                        (for [divisor (range 1 num)]\n                                          (if (= 0 (mod num divisor))\n                                            divisor)))\n                                       num))))\n           num)))","user":"5cd4e1b2e4b0ccb061962927"},{"problem":80,"code":"(fn perfect-number? [n]\n  (letfn [(divisors [n]\n            (filter #(= 0 (mod n %)) (range 1 n)))]\n    (= n (apply + (divisors n)))))","user":"53fd66a4e4b0de5c418485e3"},{"code":"(fn perfect? [n]\r\n  (== n (apply + (filter #(== 0 (mod n %)) (range 1 n)))))","problem":80,"user":"4fcc6cb3e4b0ee37620e1861"},{"code":"(fn perfect-number? [n]\n\t  (->> (range 1 n)\n\t       (filter #(zero? (mod n %)))\n\t       (reduce +)\n\t       (= n)))","problem":80,"user":"52381b2ae4b0fae3832e99ef"},{"problem":80,"code":"(fn [x]\n  (loop [s 1 i 2]\n    (cond\n     (= i x) (= s x)\n     (= 0 (mod x i)) (recur (+ s i) (inc i))\n     :else (recur s (inc i)))))","user":"57d9f603e4b0bd073c20240a"},{"problem":80,"code":"(fn pn[n]\n  (= n\n     (reduce + \n             (for [x (range 1 n)\n                   :when (= 0 (mod n x))]\n               x  ))))","user":"5980f91ae4b021a7a535fddd"},{"problem":80,"code":";(fn [x] (= x (apply + (drop-last(into (sorted-set) (filter #(zero?(rem x %))(range 1 (inc x))))))))\n(fn is-perf-num [n](= n(apply + (filter #(zero? (mod n %)) (range 1 n)))))","user":"580d7e53e4b0849f6811b73e"},{"code":"(fn [x]\n  (let [divs (filter #(= 0 (rem x %)) (range 1 x))]\n    (= (apply + divs) x)))","problem":80,"user":"4edecdae535d10e5ff6f533c"},{"code":"#(= % (apply + (for [x (range 1 %) :when (= 0 (mod % x))] x)))","problem":80,"user":"4fb3b865e4b081705acca2a2"},{"problem":80,"code":"(fn perfect-number [n]\n  (let [ld (filter #(= (mod n %) 0) (range 1 n))] ;;divisors\n    (= n (apply + ld))))","user":"574f1c24e4b02ea114799255"},{"problem":80,"code":"(fn [n]\n  (loop [ans 0 tmp 1]\n    (if (= tmp n)\n      (if (= n ans)\n        true \n        false)\n      (if (= 0 (mod n tmp))\n        (recur (+ ans tmp) (inc tmp))\n        (recur ans (inc tmp))))))","user":"59368ccae4b02506e01a297a"},{"problem":80,"code":"#(= % (apply + (remove nil? (for [i (range 1 (inc (/ % 2)))]\n  (if (zero? (mod % i)) i)))))","user":"52bc6cb2e4b07a9af57922f5"},{"code":"(fn [v]\n   (let [possibledv (take (dec v) (map inc (range v))) ]\n       (= v (reduce + (filter #(= (mod v %1)  0) possibledv)))\n     )\n   )","problem":80,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":80,"code":"(fn [n] (= (reduce + (filter (fn [d] (zero? (rem n d))) (range 1 n))) n))","user":"5abe2fc2e4b073f17744271e"},{"code":"(fn [num]\n      (loop [sum 0 cnt 1]\n            (if\t(> cnt (quot num 2))\n                (if (= num sum) true false)\n\t\t(do\n\t\t        (if(= 0 (mod num cnt))\n\t\t            (recur (+ sum cnt) (inc cnt))\n                            (recur sum (inc cnt))\n                            )\n\t\t))))","problem":80,"user":"52c3a0f4e4b0c2d177d620c6"},{"problem":80,"code":"(fn [x]\n   (= x\n     (reduce +\n       (filter\n         #(= 0 (mod x %))\n         (range 1 x)))))","user":"59e8bb43e4b0249b72820735"},{"code":"(fn f [x]\n  (= x\n   (apply + (filter #(= 0 (rem x %)) (range 1 x) ))))","problem":80,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":80,"code":"(fn [n]\n  (= n\n     (reduce +\n          (filter #(= 0 (mod n %)) (range 1 n)))))","user":"582c526ae4b051871117bf88"},{"problem":80,"code":"#(= (apply + (filter (fn [x] (= 0 (mod % x))) (range 1 %))) %)","user":"57986b76e4b039eba2ecb116"},{"code":"#(= % (apply + (filter (fn [i] (= 0 (rem % i))) (range 1 %))))","problem":80,"user":"5027b41ee4b01614d1633fee"},{"code":"(fn [n]\r\n  (= (apply + (filter #(= (int (/ n %)) (/ n %)) (range 1 n))) n))","problem":80,"user":"4ddc1c89535d02782fcbea01"},{"code":"(fn [n]\n  (letfn [(divisors [x] (filter #(= 0 (mod x %)) (range 1 x)))]\n    (= n (reduce + (divisors n)))))","problem":80,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":80,"code":"(fn [n]\n  (let [factors (filter #(= 0 (mod n %)) (range 1 n))]\n    (= (apply + factors) n)))","user":"545e7ab0e4b01be26fd7467c"},{"code":"(fn perfect? [x]\n   (= x (apply +\n         ((fn divisors [n]\n            (for [divisor (range 1 (inc (int (/ n 2))))\n                  :when (zero? (mod n divisor))]\n              divisor\n              )\n            ) x)))\n   )","problem":80,"user":"4ea31da2535d7eef308072c1"},{"problem":80,"code":"(fn [x] (= x(reduce +(filter #(=(mod x %)0) (range 1 x)))))","user":"570377c1e4b08d47c97781f1"},{"problem":80,"code":"(fn [x] ( = x (reduce + (filter #(= 0 (mod x %1)) (take-while #( > %1 0 ) (iterate dec (- x 1)))))))","user":"53d63e6ce4b0e771c3025454"},{"problem":80,"code":"#(= (apply + \n           (filter (comp zero? (partial mod %)) \n                   (range 1 %)))\n    %)","user":"4e38f245535deb9a81d77f3e"},{"code":"(fn [x]\n  (let [divisors (filter #(= (mod x %) 0) (range 1 x))]\n    (= (apply + divisors) x)))","problem":80,"user":"4e89ff3d535d3e98b802328a"},{"problem":80,"code":"(fn perfect [num]\n    (let [x (for [i (range 1 num)\n                :when (= 0 (rem num i))]\n                i)]\n        (= num (apply + x))))","user":"57644395e4b0994c1922fbf2"},{"problem":80,"code":"(fn fac [num] \n  (= num(reduce \n         (fn [tot cur] (if (zero? (mod num cur)) (+ tot cur) tot))\n          0 (range 1 num))))","user":"4f4aa932e4b0d56e7bb92c14"},{"code":"(fn perfect [num]\n      (letfn [\n              (divisors [num]\n                (filter #(= 0 (mod num %)) (range 1 num) ))\n              ]\n        (= (reduce + (divisors num)) num)\n        )\n      )","problem":80,"user":"51f81925e4b09be9c177e526"},{"problem":80,"code":"(fn perfect-num? [num]\n   (= num (apply +\n               ((fn divisors [x]\n                  (cons 1\n                        (set\n                          (reduce #(conj %1 %2 (/ x %2)) []\n                                  (filter\n                                    #(= 0 (mod x %))\n                                    (range 2 (inc (#(Math/sqrt %) x))))))))num))))","user":"5a91988ae4b002d099cae6f9"},{"code":"(fn\r\n  [n]\r\n  (= n\r\n    (apply +\r\n  (disj\r\n   (set\r\n    (apply concat\r\n           (for [i (range 1 (inc (java.lang.Math/sqrt n)))]\r\n             (if (= (rem n i) 0)\r\n               [i (/ n i)]))))\r\n   n))))","problem":80,"user":"50427899e4b0add3005c0fc2"},{"code":"(fn[n]\n  (= n (apply +\n          (filter\n           #(zero? (mod n %))\n           (range 1 n)))))","problem":80,"user":"50e90813e4b033b0e80d11e7"},{"code":"(fn [z] (= z \n  (reduce #(if (= 0 (mod z %2)) (+ %2 %) %) \n     0 (range 1 z))))","problem":80,"user":"4daa374930acd6ed13482a68"},{"problem":80,"code":"(fn perfect-number? [number]\n  (letfn [(prime-factor [n] (if (= (rem n 2) 0) (recur (/ n 2)) n))]\n    (= number (reduce + (range (+ 1 (prime-factor number)))))))","user":"58327a08e4b089d5ab817c7c"},{"problem":80,"code":"(fn [n]\n  (= n\n     (apply + \n            (filter #(zero? (mod n %)) \n                  (range 1 n)))))","user":"4ee67d74535d93acb0a66861"},{"problem":80,"code":"(fn [x] \n  (if (= x (reduce + (filter #(zero? (mod x %)) (range 1 x))))\n    true\n    false\n  ))","user":"5a75da49e4b0512ff01cdacf"},{"code":"(fn perfect [n]\n  (= n (reduce +\n               (filter #(zero? (mod n %))\n                       (range 1 n)))))","problem":80,"user":"531d34cfe4b08068f379edac"},{"problem":80,"code":"(fn perfnum [n]\n  (= (apply + (filter #(= (mod n %) 0) (range 1 n))) n))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"(fn perf [x]\r\n  (= (reduce +\r\n             (filter #(= (rem x %) 0)\r\n                     (range 1 x))) x))","problem":80,"user":"4e123905535d04ed9115e7ce"},{"code":"(fn perfect[n]\n  (= (apply + (filter #(= 0 (mod n %)) (rest (range n)))) n)\n)","problem":80,"user":"4e9de526535dbda64a6f6b8e"},{"problem":80,"code":"(fn [n] (= n (apply + 1 (filter integer? (map #(/ n %) (range 2 n))))))","user":"551c66dae4b07993ea3788de"},{"problem":80,"code":"(fn [n] (->>\n                (range 1 n)\n                (filter #(= 0 (mod n %)))\n                (apply +)\n                (= n))\n    )","user":"5a66fddee4b0512ff01cd9d7"},{"problem":80,"code":"(fn [n]\n  (->> (range 1 n)\n       (filter #(zero? (mod n %)))\n       (reduce +)\n       (= n)))","user":"54485749e4b032a45b8693c7"},{"code":"(fn [x]\r\n    (letfn [(divisible? [n k] (zero? (mod n k)))]\r\n      (= x (reduce + (filter #(divisible? x %) (range 1 x))))))","problem":80,"user":"4e26e8b4535deb9a81d77ef6"},{"problem":80,"code":"(fn [x] (= x (reduce + (map #(/ x %) (filter #(= % (int %)) (map #(/ x %) (range 1 x)))))))","user":"52faec2ee4b047fd55837004"},{"problem":80,"code":"(fn [x]\n  (let [half (inc (/ x 2))\n        sum (reduce + (for [v (range 1 half) :when (= 0 (mod x v))] v))]\n    (= sum x)))","user":"5405fdcce4b0addc1aec6683"},{"problem":80,"code":"(fn perfect [n]\n\t(= (reduce + \n\t   (filter #(= (mod n %) 0) \n\t   (range 1 n))) n))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn [n]\n  (let [divs (filter #(zero? (mod n %)) (range 1 n))]\n    (= n (reduce + divs))))","problem":80,"user":"50e4b066e4b0cb9ec68fbca6"},{"problem":80,"code":"(fn [n]\n\t(= (reduce + (filter #(zero? (mod n %)) (range 1 n))) n)\n)","user":"5472d919e4b094393f72dd7b"},{"problem":80,"code":"(fn [n] (= n (reduce + (filter (fn [d] (= 0 (mod n d))) (range 1 n)))))","user":"55f6fe09e4b06e875b46cea2"},{"code":"(fn [n]\n  (= n\n     (apply +\n            (filter #(zero? (mod n %))\n                    (range 1 n)))))","problem":80,"user":"514c2d05e4b02b8cbb2a9278"},{"code":"(fn perfect[x]\n  (= x (reduce + (filter #(zero? (mod x %)) (range 1 x)))))","problem":80,"user":"4e7db3b4535db169f9c796e1"},{"problem":80,"code":"(fn [n]\n  (let [some? #(not= % nil)\n        potential-divisors (range 1 n)\n        divs-nulls (for [i potential-divisors]\n               (if (= 0 (mod n i)) i nil))\n        divs (filter some? divs-nulls)\n        sum (reduce + divs)]\n    (= sum n)))","user":"57a0f256e4b0c3d858beb8dd"},{"problem":80,"code":"#(= % (apply + (filter (comp zero? (partial rem %)) (range 1 %))))","user":"4e68c465535d8ccf87e9fe8a"},{"problem":80,"code":"(fn [x] (let \n          [is-divisor (fn [candidate] (= 0 (mod x candidate)))]\n          (= x (reduce + (filter is-divisor (range 1 x))))\n         )    \n )","user":"597780c7e4b01722bebd4cf1"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divs (fn divisors [n]\n  \t(->> (range 2 (inc (int (Math/sqrt n))))\n    \t (mapcat #(if (zero? (mod n %)) [% (quot n %)] []))))]\n    (= n (reduce + 1 (divs n)))))","user":"5cab33e7e4b048ec896c5c48"},{"code":"(fn perfect [x]\n  (= x\n    (apply + (filter\n               #(zero? (rem x %))\n               (range 1 x)))))","problem":80,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":80,"code":"(fn\n  [num]\n  (let [divisors\n        (filter\n         #(= 0 (mod num %))\n         (range 1 (inc (/ num 2)))) ]\n    (= (reduce + divisors)\n       num)))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":80,"code":"(fn complete? [n]\n  (letfn [(divisors [n]\n                    (filter #(= 0 (mod n %)) (range 1 (+ 1 (/ n 2))))) ]\n    (= n (reduce +' (divisors n)))))","user":"5654e024e4b0f9d632dd848d"},{"problem":80,"code":"(fn sol [n]\n  (let [divisors (fn [i] (filter #(zero? (mod i %)) (range 1 i)))]\n    (= n (apply + (divisors n)))))","user":"578b140be4b0ebec4cfb7545"},{"code":"(fn perfect [n]\n  (let [factors (filter #(zero? (mod n %)) (range 1 (inc (/ n 2))))\n        aliquotSum (reduce + factors)]\n    (cond\n      (= aliquotSum n) true  ;:perfect\n      (< aliquotSum n) false ;:deficient\n      (> aliquotSum n) false ;:abundant\n     )))","problem":80,"user":"4f849f76e4b033992c121c36"},{"problem":80,"code":"(fn [number]\n   (loop [i 1\n          sum 0]\n     (if (= i number)\n       (and (= sum number))\n       (recur (inc i) (if (= (mod number i) 0) (+ i sum) sum)))))","user":"56c60b36e4b05cc29241eead"},{"code":"(fn perfect? [n]\n  (letfn [(divisors[n]\n                   (filter #(= 0 (rem n %)) (range 1 (inc (/ n 2)))))]\n    (= n (reduce + (divisors n)))))","problem":80,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":80,"code":"(fn [n]\n  (= n (apply + ((fn fact [cur result]\n     (cond (> (* 2 cur) n) result\n           (= 0 (rem n cur)) (fact (inc cur) (conj result cur))\n           :else (fact (inc cur) result))) 2 [1]))))","user":"58f98231e4b0438e51c2cf4c"},{"problem":80,"code":"(fn perfect-number [n]\n     (= n\n        (reduce + (filter #(= 0 (mod n %)) (range 1 n)))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"code":"(fn [x]\n  (letfn [(divs [v] (filter #(zero? (mod v %)) (range 1 x)))]\n    (= x (reduce + (divs x)))))","problem":80,"user":"52d809bde4b09f7907dd1384"},{"code":"(fn [n]\n  (== n\n    (reduce +\n      (for \n        [i (range 1 (inc (/ n 2))) \n         :when (= 0 (rem n i))] \n        i))))","problem":80,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn [n] \n  (= \n   \tn \n   \t(reduce\n      \t+ \n      \t(filter \n       \t\t#(= 0 (mod n %)) \n       \t\t(range 1 (inc (/ n 2)))))))","problem":80,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (filter #(zero? (mod n %))\n               (range 1 n)))))","user":"4f35e662e4b0e243712b1ec6"},{"code":"(fn [x] (->> (filter #(zero? (mod x %)) (range 1 x)) (apply +) (= x)))","problem":80,"user":"50645e12e4b007509339a58a"},{"problem":80,"code":"(fn perfectNumber\n  ([number] (perfectNumber number []))\n  ([number vector]\n   (if (= number (reduce + (reduce #(if (= (rem number %2) 0) (conj %1 %2) %1) vector (range 1 (+ (/ number 2) 1))))) true false)))","user":"556c94afe4b09a3098a524fe"},{"problem":80,"code":"(fn perfect? [n]\n  (let [divisors (filter #(= 0 (mod n %))\n                         (range 1 (/ (inc n) 2)))]\n    (println divisors)\n    (= n (reduce + divisors))))","user":"5b47874be4b02d533a91bc70"},{"problem":80,"code":"(fn [n]\n  (letfn [(divisor? [d] (zero? (mod n d)))]\n    (->> n\n      range\n      rest\n      (filter divisor?)\n      (apply +)\n      (= n))))","user":"50310713e4b05b7df5a0b84c"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + 1 (filter #(zero? (rem n %)) (range 2 n)))))","user":"4f3ca5a6e4b0e243712b1f53"},{"problem":80,"code":"(fn [n]\n  (= n (apply + (for [x (range 1 n)]\n                  (if (= 0 (mod n x))\n                    x\n                    0)))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":80,"code":"(fn [n]\n    (let [factors (filter #(zero? (rem n %)) (range 1 n))]\n      (= n (reduce + factors))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":80,"code":"(fn [n]\n   (->> (filter #(zero? (mod n %)) (range 1 n))\n        (reduce +)\n        (= n)))","user":"59419bdfe4b060784b3b78f7"},{"problem":80,"code":"(fn [x]\n  (let [a (Math/round (/ x 2.0))\n        v (filter #(= (rem x %) 0) (range 1 (inc a)))]\n    (= (reduce + v) x)))","user":"564d3169e4b0284900eef67c"},{"code":"(fn [n]\n  (= n \n     (->> \n      (range 1 (inc (/ n 2)))\n      (filter #(= (mod n %) 0))\n      (reduce +))))","problem":80,"user":"506ba58be4b0eda3100c090b"},{"code":"#(or (= 6 %)\n     (= 496 %)\n     (= 8128 %))","problem":80,"user":"4ec74de3535d6d7199dd36df"},{"code":"(fn [n]\n  (loop [i,1 reslst,[]]\n    (cond\n     (= i n) (= n (apply + reslst))\n     (zero? (mod n i)) (recur (inc i) (conj reslst i))\n     :else (recur (inc i) reslst)\n     )))","problem":80,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":80,"code":"(fn [n]\n  (= n \n     (reduce +\n             (filter (fn [x]\n                       (zero? (rem n x)))\n                     (range 1 (/ (inc n) 2))))))","user":"53940789e4b0b51d73faaec3"},{"problem":80,"code":"(fn [x]\n  (if (= 1 x)\n    false\n    (->> (filter #(= (mod x %) 0)\n                 (range 2 (Math/sqrt x)))\n         (reduce #(conj %1 %2 (quot x %2)) [])\n         (apply +)\n         (= (dec x)))))","user":"5823d3e6e4b051871117beb8"},{"problem":80,"code":"(fn [n]\n  (let [divisors (filter #(= 0 (rem n %)) (range 1 n))]\n    (== n (reduce + divisors))))","user":"4f856adfe4b033992c121c44"},{"code":"(fn [n]\n  (=\n    n\n    (apply\n      +\n      (filter #(zero? (mod n %)) (range 1 n)))))","problem":80,"user":"506ab9bae4b05d3b7762c74c"},{"problem":80,"code":"(fn [n] (= (apply + (filter (fn [v] (= (rem n v) 0)) (range 1 n))) n))","user":"5a250b86e4b07f18be40aa19"},{"problem":80,"code":"(fn perfect-number [n]\n  (let [divisors (filter (fn [x] (zero? (mod n x)))\n                         (range 1 n))]\n    (= n (reduce + 0 divisors))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":80,"code":"(fn perf-n [n]\n\t(= (apply +' (filter #(= (mod n %) 0) (range 1 n))) n))","user":"56540485e4b0f9d632dd847a"},{"problem":80,"code":"(fn [x]\n  (= x (apply + (reduce #(if (integer? (/ x %2)) (conj %1 %2) %1) [] (range 1 x)))))","user":"5b72b36ce4b047b03b2036a9"},{"code":"(fn perfect [x]\n  (let \n    [\n     prime?\n     (fn [x]\n      (cond \n       (= 2 x) true\n       (= 1 x) true\n       (= 0 x) false\n       :else (every? \n        #(< 0 (rem x %)) \n        (range 2 (+ 1 (Math/sqrt x))))\n      )\n     )\n     divisors\n     (fn [x](filter \n       #(= 0 (rem x %))\n         \n       \n   \n       (range 2 x)\n      )\n     )\n     \n     ]\n    \n    \n  (= x (inc (apply + (divisors x))))\n  \n  )\n)","problem":80,"user":"4fb03cf4e4b081705acca262"},{"code":"(fn[n] (= n (reduce + (filter #(= 0 (rem n %)) (range 1 (inc (quot n 2)))))))","problem":80,"user":"5017eface4b02f523d7cc5e7"},{"code":"(fn [n] (\n        loop [i  (quot n 2) \n              dvsors []\n              ]\n         (if (zero? i)\n           (= (apply + dvsors) n)\n           (if (zero? (mod n i))\n                      (recur (dec i) (cons i dvsors))\n                      (recur (dec i) dvsors))\n           )\n         )\n )","problem":80,"user":"5124619ae4b02c3f2a072ccd"},{"problem":80,"code":"(fn [x]\n  (letfn [(ds [n] (filter #(zero? (rem n %)) (range 1 n)))]\n    (= (apply + (ds x)) x)))","user":"4db1fe241254ad5b4805fa77"},{"code":"(fn perfect? [n]\n  (= n (reduce + (for [i (range 1 n)]\n                   (if (= 0 (rem n i)) i 0)))))","problem":80,"user":"4e7f51eb535db966e863cc3f"},{"problem":80,"code":"(fn [x]  (let [ divs  (filter #(= 0 (mod x %)) (range 1 x)) ]\n           (= (apply + divs) x)))","user":"564127a9e4b08d4f616f5ef3"},{"problem":80,"code":"(fn [n] \n  (= n \n     (reduce \n      + \n      (filter \n       #(zero? (mod n %)) \n       (map inc (take (dec n) (range)))))))","user":"5dd90651e4b0948ae9d9ad97"},{"problem":80,"code":"(fn perfect? [n] (let [divisors (fn [n] (loop [cnt (dec n)\n\t\t\t\t\t\t\t\t\t\t\t\t                          xs []]\n\t\t\t\t\t\t\t\t\t\t\t\t                     (if (= 0 cnt)\n\t\t\t\t\t\t\t\t\t\t\t\t                       xs\n\t\t\t\t\t\t\t\t\t\t\t\t                       (if(zero? (mod n cnt))\n\t\t\t\t\t\t\t\t\t\t\t\t                         (recur (dec cnt) (conj xs cnt))\n\t\t\t\t\t\t\t\t\t\t\t\t                         (recur (dec cnt) xs)))))\n                         s (reduce + 0 (divisors n))]\n                     (= n s)))","user":"5df0c6ffe4b093ff717275c2"},{"problem":80,"code":"(fn [n]\n  (= n (reduce + (for [x (drop 1 (range n))\n        :when (= 0 (rem n x))] x))))","user":"59503c5de4b066ee0a44ae8e"},{"code":";#(= (apply + (filter (fn [k] (= 0 (mod % k))) (range 1 %))) %)\n#(odd? (mod % 5))","problem":80,"user":"4e307313535deb9a81d77f14"},{"problem":80,"code":"(fn [num] (= num (reduce + (filter #(= 0 (rem num %)) (range 1 num)))))","user":"5659679ae4b068f2fe63dbeb"}]