[{"code":"#(reduce = (map (partial partition-by nil?) [% (reverse %)]))","problem":27,"user":"4e739e13535dff18050a9c76"},{"problem":27,"code":"(fn mirror?\n  [s]\n  (if (= (class s) java.lang.String)\n    (= s (clojure.string/reverse s))\n    (= s (reverse s))))","user":"5777c3d6e4b0979f8965164f"},{"code":"(fn [l]\n  (if (= (type l) java.lang.String)\n    (= (apply str (reverse l)) l)\n\t(= (reverse l) l)))","problem":27,"user":"522a1248e4b0590a43906cf3"},{"code":"(fn [input]\n  (let [punctuation #{\\,\\.\\; \\ \\'\\:}\n        coll (->> (seq input)\n                  (remove #(or (nil? %) (contains? punctuation %))))]\n    (= coll (reverse coll))))","problem":27,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":27,"code":"(fn [coll] (loop [coll coll]\n             (let [left (count coll)]\n               (cond\n                (= 0 left) true\n                (= 1 left) true\n                (not (= (first coll) (last coll))) false\n                :else (recur (rest (butlast coll)))))))","user":"571cd9dce4b0145328a76271"},{"problem":27,"code":"(fn [l] (= (vec l) (reverse (vec l))))","user":"56b8cf20e4b0f26550335929"},{"problem":27,"code":"(fn [x] (= (reverse x)\n           (seq x)))","user":"5628f727e4b00e49c7cb47f5"},{"problem":27,"code":"#(loop [input %1]\n  (prn input)\n  (cond\n    (>= (count input) 2) (if (= (first input) (last input))\n                           (recur (rest (drop-last 1 input)))\n                           false)\n    (< (count input) 2) true))","user":"5cea925ce4b0a17bb84e2bd2"},{"code":"#(= 0\n  (count (filter false?\n   (map-indexed \n   (fn [i item]\n    (= (nth % (- (count %) (+ 1 i))) item)) %))))","problem":27,"user":"4f1e4ab5535d64f603146496"},{"code":"#(= (take (- (count %) 1) %) (take (- (count %) 1) (reverse %)))","problem":27,"user":"534b0598e4b084c2834f4a75"},{"problem":27,"code":"#(let [r (reverse %)] (= r (seq %)))","user":"5c54e605e4b0fb8c5ffd9a14"},{"problem":27,"code":"(fn[x] (if (string? x) (= x (clojure.string/join \"\" (reverse x))) (= x (reverse x))))","user":"605f92bae4b03746e80ebf62"},{"problem":27,"code":"(fn [palin]\n   (loop [check-palin palin]\n     (if (empty? check-palin)\n       true\n       (if (= (first check-palin) (last check-palin))\n         (recur\n           (drop-last (rest check-palin)))\n         false))))","user":"5d40f41ae4b05dd059a5436d"},{"problem":27,"code":"(fn pal [l]\n  (if (< (count l) 2) true\n    (if (not= (first l) (last l)) false\n      (pal ((comp rest reverse rest) l))\n      )\n    )\n  )","user":"5b4b58f2e4b02d533a91bc9c"},{"problem":27,"code":"(fn palindrer [l]\n  (if (string? l)\n    (= l (apply str (reverse l)))\n  (= l (reverse l))))","user":"53771d98e4b06839e8705e2e"},{"problem":27,"code":"(fn [xs]\n  (condp instance? xs\n    String (recur (seq xs))\n    (= xs (reverse xs))))","user":"587100d6e4b01531a375e9f0"},{"code":"(fn [x] (cond (string? x) (= (apply str (reverse x)) x) :else (= (reverse x) x)))","problem":27,"user":"52265e41e4b04e78ff2e1981"},{"code":"(fn [x]\n  (= (vec x) (reverse (vec x))))","problem":27,"user":"516095c9e4b009fba0926e29"},{"problem":27,"code":"(fn [collection]\n  (loop [result true\n         tempCollection collection]\n    (if (or (> 2 (count tempCollection)) (false? result))\n      result\n      (recur \n       (= (first tempCollection) (last tempCollection)) \n       (reverse (rest (reverse (rest tempCollection))))))))","user":"548f339ee4b0e286459a1233"},{"problem":27,"code":"#(loop [xs %, acc false]\n    (if (< (count xs) 2)\n      acc\n      (if (= (first xs) (last xs))\n        (recur (butlast (rest xs)) true)\n        false)))","user":"56e02c1ce4b0ca2494a09602"},{"code":"(\r\n    fn [x]\r\n    (\r\n        if\r\n        (\r\n            =\r\n            x\r\n            (\r\n                if (instance? String x)\r\n                    (apply str (reverse x))\r\n                    (reverse x)\r\n            )\r\n        )\r\n        true false\r\n    )\r\n)","problem":27,"user":"5097ea8fe4b087ccf61a7af5"},{"problem":27,"code":"#(= (if (string? %) (clojure.string/reverse %) (reverse %)) %)","user":"53fdb53fe4b0de5c418485e8"},{"problem":27,"code":"(fn palindrome? [x]\n  (loop [i 0 acc '(true)]\n    (if (>= i (count x))\n      (every? true? acc)\n      (recur (inc i) (conj acc (= (nth x i) (nth (reverse x) i)) ) ))))","user":"4dd5fdb0535d2dad7130b5c5"},{"code":"(fn palindrome-detector \n  ([seq m n]\n    (if (< m n)\n    (and (= (nth seq m) (nth seq n)) (palindrome-detector seq (inc m) (dec n)))\n    true))\n  ([seq]\n    (palindrome-detector seq 0 (dec (count seq)))))","problem":27,"user":"525d44bfe4b0cb4875a45d6d"},{"problem":27,"code":"(fn [s]\n  (let [r (reverse s)]\n    (= s (if (string? s) (apply str r)\n           r))))","user":"564b495de4b0284900eef667"},{"code":"#(= (reduce str %) (apply str (reverse %)))","problem":27,"user":"502b0804e4b063e52107afad"},{"problem":27,"code":"(fn [s] (= (seq s) (->> s seq reverse)))","user":"57e0f30ae4b0bfb2137f5a66"},{"problem":27,"code":"#(let [coll (seq %)\n       rev (reverse coll)]\n   (= coll rev))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":27,"code":"(fn [x] (= (reverse x) (seq x)) )","user":"58988cbbe4b00487982d52d7"},{"problem":27,"code":";(fn [col] \n;  (let [\n;        n (int (/ (count col) 2))\n;        first_half (take n col)\n;        second_half (take n (reverse col))\n;       ] \n;    (= first_half second_half)))\n\n#(= (seq %) (reverse %))","user":"5465febde4b01be26fd746e1"},{"code":"(fn [thing] (= (seq thing) (reverse thing)))","problem":27,"user":"4e42f930535dc968683fc49f"},{"code":"#(if (string? %) (= % (apply str (reverse %)))\n  (= % (reverse %)))","problem":27,"user":"4e5c4cc6535d8a8b8723a2bf"},{"problem":27,"code":"#(loop [c %] \n   (if (> (count c) 1) \n     (if \n       (not= (first c) (last c)) false \n       (recur (reverse (rest (reverse (rest c)))))\n     ) true\n   )\n )","user":"5d21b91ee4b02ea6f0fb69e9"},{"problem":27,"code":"(fn [p] \n  (let [lp (seq p)]\n    (= lp (reverse lp))))","user":"53cc5c88e4b00fb29b2212d8"},{"code":"(fn palindrome\n  [elements]\n  (= (seq elements)\n     (reverse elements)))","problem":27,"user":"4e99108d535dbda64a6f6b62"},{"problem":27,"code":"#(loop [s %]\n    (cond \n     (<= (count s) 1) true\n     (= (first s) (last s)) (recur (butlast (rest s)))\n     :else false))","user":"5600591de4b04bb52996e166"},{"code":"(fn [lst]\n  (condp = (count lst)\n    0 true\n    1 true\n    (if (= (first lst) (last lst))\n      (recur (rest (butlast lst)))\n      false)))","problem":27,"user":"4f0f3830535d0136e6c22338"},{"problem":27,"code":"(fn palindrom?\n  [x]\n\n  (= (seq x) (reverse x)))","user":"5ffd3422e4b074f607df65f7"},{"code":"(fn [sseq]\n  (cond\n    (string? sseq) (= (apply str sseq) (apply str (reverse sseq)))\n    :else (= (reverse sseq) sseq)))","problem":27,"user":"4eee3e6a535d93acb0a668c3"},{"problem":27,"code":"(fn [x] (every? #(= true %) (map #(= %1 %2) x (reverse x))))","user":"587b1f20e4b01531a375eaf4"},{"code":"(fn [col]\n  (= (seq col) (reverse col)))","problem":27,"user":"4f06f90a535dcb61093f6c1b"},{"problem":27,"code":"#(let [x (into '() %)]\n       \n       (if (= x (reverse x)) true false))","user":"567be591e4b05957ce8c61ab"},{"problem":27,"code":"#(or (empty? %) (and (= (first %) (last %)) (recur (reverse (rest (reverse (rest %)))))))","user":"57b59d77e4b0fbc9809a27ae"},{"problem":27,"code":"(fn [origin-seq]\n  (let [target-seq (if (string? origin-seq)\n                     (into [] origin-seq)\n                     origin-seq)\n        length (count target-seq)\n        max-length (int (Math/floor (/ length 2)))]\n    (loop [index 0]\n      (if (= index max-length)\n        true\n        (if (= (nth target-seq index)\n               (nth target-seq (- length (inc index))))\n          (recur (inc index))\n          false)))))","user":"58fed70de4b0438e51c2cfdd"},{"code":"#(let [r (reverse %)\n       n (count %)\n       c %]\n   (every? identity\n     (map\n       (fn [k]\n         (= (nth c k) (nth r k)))\n         (range (/ (dec n) 2)))))","problem":27,"user":"4e68d816535d8ccf87e9fe8e"},{"problem":27,"code":"(fn rev [a]\n  (let [b (if (string? a)\n            (clojure.string/reverse a)\n            (reverse a))]\n      (= a b)))","user":"5537cbaee4b09218d5f44fd3"},{"problem":27,"code":"(fn [list] (= (apply str list) (apply str (reverse list))))","user":"5f7ac592e4b02876ed9fd0d2"},{"problem":27,"code":"(fn palindrome [s] (if (empty? s) true (let [f (first s) l (last s)] (if (not= f l) false (recur (butlast (rest s)))))))","user":"525b142fe4b0cb4875a45d05"},{"problem":27,"code":"(fn [coll]\n   (loop [collec coll]\n     (if (>= 1 (count collec))\n       true\n       (if-not (= (first collec) (last collec))\n         false\n         (recur (drop-last (rest collec)))))))","user":"58ed2e21e4b056aecfd47d7a"},{"problem":27,"code":"(fn pal [s]\n  (= (reverse s) (seq s)))","user":"5d6d76ffe4b04d129b00f2be"},{"problem":27,"code":"#( = (into [] %) (reverse ( into [] %)) )","user":"54fc7d89e4b07d26eda61d2b"},{"problem":27,"code":"(fn a [[x & y]]\n         (if (empty? y)\n           true\n           (if (= x (last y))\n             (a (reverse (rest (reverse y))))\n             false)))","user":"5463fbbde4b01be26fd746ca"},{"code":"#(let [s % m (/ (count s) 2)] (= (drop-last m s) (reverse (drop m s))))","problem":27,"user":"4dee4a9c535d08e6dec9fe11"},{"code":"(fn [x] (if (instance? java.lang.String x) (= x (reduce str (reverse x))) (= x (reverse x))))","problem":27,"user":"4ec5c948535d6d7199dd36b7"},{"problem":27,"code":"(fn [v]\n    (loop [x v]\n        (if (> 2 (count x)) \n            true\n            (if (= (first x) (last x))\n                (recur (drop-last (rest x)))\n                false))))","user":"55975569e4b031d6649c9b8e"},{"problem":27,"code":"#(if (empty? %) true (if (not (next %)) true (if (= (first %) (last %)) (recur (next (butlast %))) false)))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn [x] (= (vec x) (reduce conj () (vec x))))","problem":27,"user":"50b64b55e4b0a86f8358ca6b"},{"problem":27,"code":"#(= (reverse %) (if (= java.lang.String (class %)) (seq %) %) )","user":"532018efe4b08068f379edcd"},{"code":"#(= % (if (string? %)\n          (apply str (reverse %))\n          (reverse %)))","problem":27,"user":"4f04f847535dcb61093f6beb"},{"problem":27,"code":"(fn some-reverse-func [x]\n  (= (seq x) (reverse x))\n)","user":"5c93f5d5e4b048ec896c5a28"},{"problem":27,"code":"(fn [s] (= (vec s) (vec (reverse s))))","user":"5603defae4b0c80df0ca2650"},{"code":"#(if (string? %)\n   (= (apply str (reverse %)) %)\n   (= (reverse %) %))","problem":27,"user":"50e35b2de4b094329ae7f4bb"},{"problem":27,"code":"(fn [ob]\n            (let [len (count ob)]\n              (loop [leftIndex 0 rightIndex (- len 1)]\n                (cond\n                  (> leftIndex rightIndex) true\n                  (not= (nth ob leftIndex) (nth ob rightIndex)) false\n                  :else (recur (+ leftIndex 1) (- rightIndex 1))))))","user":"56305383e4b073c1cf7a9be6"},{"problem":27,"code":"(fn [x] (if (string? x)\n          (if (= x (clojure.string/reverse x)) true false)\n          (if (= x (reverse x)) true false)))","user":"53d977f1e4b0e771c302547a"},{"code":"(fn [x]\n  (if (string? x) (= x (apply str (reverse x)))\n  (= x (reverse x))))","problem":27,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"(fn [s]\n                  (= (seq s)\n                     (reverse (seq s))\n                     ))","problem":27,"user":"4f934325e4b0dcca54ed6cb8"},{"problem":27,"code":"(fn palindrome? [x]\n  (if (<= (count x) 1)\n    true\n    (and (= (first x) (last x)) (palindrome? (butlast (rest x))))\n  )\n)","user":"56ce8728e4b0ea9b8538f760"},{"problem":27,"code":"(fn [t] (let [s (seq t)] (= s (reverse s))))","user":"59bdeb22e4b0a024fb6ae42d"},{"problem":27,"code":"(fn [ns]\n   (let [l (apply list ns)] (= l (reverse l))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"(fn anon [x]\n  (cond\n    (empty? x) true\n    (= (first x) (last x)) (anon (rest (reverse (rest x))))\n    true false))","problem":27,"user":"503cc8cae4b06c4e0e1fa251"},{"problem":27,"code":"(fn palindrome [li] \n  (if (or (empty? li) (= (count li) 1))\n    true\n  (and (= (first li) (last li)) (palindrome (drop-last (rest li))))\n  )\n)","user":"551c02fbe4b07993ea3788d8"},{"problem":27,"code":";#(if (= % (if (string? %) (clojure.string/join (reverse (into [] %))) (reverse %))) true false)\n#(= (seq %) (reverse %))","user":"541e774de4b01498b1a71a8d"},{"problem":27,"code":"(fn [x]\n   \n   (if (= (type x) String)\n     (= (apply str (reverse x)) x)\n     (= (reverse x) x)     ;else\n     ))","user":"60630af9e4b069485764ddbc"},{"problem":27,"code":"(fn [input] \n  (let [i (seq input)]\n  \t(= i (reverse i))))","user":"4ec7e048535d6d7199dd36ea"},{"problem":27,"code":"#(= % \n    (if (string? %)\n      (apply str (reverse %)) \n      (reverse %) \n    )\n )","user":"5c0fedade4b01240ff567157"},{"code":"(fn is-palindrome [xs]\r\n  (= (take (/ (count xs) 2) xs) (take (/ (count xs) 2) (reverse xs))))","problem":27,"user":"4e123905535d04ed9115e7ce"},{"problem":27,"code":"(fn [list] (\n                    =\n                    (reduce str list)\n                    (reduce str (reverse list))))","user":"5cada3b8e4b026601754b872"},{"code":"#(if (= (vec %) (reverse (vec %)))\n\ttrue\n   \tfalse)","problem":27,"user":"51a4d802e4b0def3c5c5869a"},{"problem":27,"code":"(fn [coll]\n                  (loop [coll coll]\n                    (if (next coll)\n                      (let [first (first coll)\n                            last (last coll)]\n                        (if (= first last)\n                          (recur (butlast (rest coll)))\n                          false)\n                        )\n                      true\n                      )\n                    )\n                  )","user":"5ab575f8e4b073f17744263d"},{"problem":27,"code":"(fn [word] (= (vec word) (reverse word)))","user":"5a319634e4b0e23b2502f9c9"},{"problem":27,"code":"(fn palindrome? [coll]\n  (if (empty? (rest coll))\n    true\n    (if (= (first coll) (last coll)) (palindrome? (drop-last (rest coll))) false)))","user":"56cb3a61e4b0ea9b8538f726"},{"problem":27,"code":"(fn palindrome? [lst]\n  (cond\n   \t(empty? lst) true\n   \t(not= (first lst) (last lst)) false\n   \t:else (palindrome? (rest (butlast lst)))))","user":"56df62b3e4b0ca2494a095ef"},{"code":"(fn [xs]\n          (= (seq xs) (reverse xs)))","problem":27,"user":"4fe9f0f6e4b0547ebccb247b"},{"code":"(fn [x] (=(vec(reverse x))(vec x)))","problem":27,"user":"4eaf08ce535d7eef3080732d"},{"problem":27,"code":"(fn [coll]\n  (every? #(apply = %) (partition 2 (interleave coll (reverse coll)))))","user":"5cee521ce4b0aaa82f1129dd"},{"code":"(fn [col]\n  (if (= (string? col) true)\n    (if (= ((fn rec [col res]\n              (if (= col ())\n                res\n                (rec (rest col) (str (first col) res)))) col \"\") col)\n      true\n      false)\n    (if (= col (reverse col))\n      true\n      false)))","problem":27,"user":"511f656ae4b085952a83535e"},{"problem":27,"code":"(fn [entrada] (= (reverse entrada) (seq entrada)))","user":"5777bb7ee4b0979f8965164d"},{"code":"(fn palindrome [x]\r\n  (if (instance? String x)\r\n    (if (= x (apply str (reverse x)))\r\n      true\r\n      false\r\n    )\r\n    (if (= x (reverse x))\r\n      true\r\n      false\r\n    )\r\n  )\r\n)","problem":27,"user":"4edf92f0535d10e5ff6f5341"},{"problem":27,"code":"(fn [coll]\n   (let [c (into '() coll)]\n     (= (reverse c) c)))","user":"54393c3fe4b032a45b86931a"},{"problem":27,"code":"#(loop [a % b (reverse %)] (and (= (first a) (first b))\n                                (or (nil? (seq a))\n                                    (recur (next a) (next b)))))","user":"56521a26e4b0f9d632dd845f"},{"problem":27,"code":"(fn [col]\n  (let [sequence (apply list col)]\n    (= sequence (reverse sequence))))","user":"5b99554ae4b0c0b3ffbd4ace"},{"problem":27,"code":"(fn pal [i sq] \n  (let [y (- (count sq) (inc i))]\n  (if (>= i y)\n   true\n   (if (= (nth sq i) (nth sq y))\n     (pal (inc i) sq)\n     false)\n   )))\n0","user":"56366f73e4b0bfe05bf117cc"},{"code":"(fn [lst]\n  (if (empty? lst)\n      true\n      (if (= (first lst) (last lst))\n          (recur (rest (butlast lst)))\n          false)))","problem":27,"user":"4f7fc9a1e4b033992c121bee"},{"problem":27,"code":"(fn [x] (if (string? x) (= x (apply str (rseq (vec x)))) (= x (rseq (vec x)))))","user":"573c813be4b0cd1946bd10c5"},{"problem":27,"code":"(fn palindrome [list]\n  (letfn [(inner [base tmp]\n                 (cond\n                   (= (count base) (count tmp))\n                     (= base tmp)\n                   (= (count base) (inc (count tmp)))\n                     (= (rest base) tmp)\n                   :else (inner (rest base) (cons (first base) tmp))))]\n    (inner list [])))","user":"55fb5b89e4b0f488688e0662"},{"problem":27,"code":"(fn abc\n  [L]\n  (if (< (count L) 2)\n    true\n    (and \n     (= (first L) (last L))\n     (abc (rest (reverse (rest L))))\n    )\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"problem":27,"code":"(fn palindrome [xs]\n  (loop [list xs result (= (first list) (last list))]\n    (if (> (count list) 1)\n      (if (= (first list) (last list))\n        (recur (drop-last (rest list)) (= (first list) (last list)))\n        false)\n      true)))","user":"5a42dbbbe4b0447ef91cc5fd"},{"problem":27,"code":"(fn [xs]\n  (every?\n  true?\n  (map\n   (fn [a b] (= a b))\n   xs\n   (reverse xs)))\n  )","user":"558ffb4be4b0277789237667"},{"code":"#(let [half (quot (count %) 2)] (= (take half %) (reverse (take-last half %))))","problem":27,"user":"50523848e4b0a561d07d8f1a"},{"code":"#(if (= (type %) java.lang.String) \n  (= % (apply str (reverse %)))\n  (= % (reverse %))\n)","problem":27,"user":"4f091dcd535dcb61093f6c43"},{"code":"(fn [palindrome] (= palindrome\n                    (if (string? palindrome)\n                      (clojure.string/reverse palindrome)\n                      (reverse palindrome))))","problem":27,"user":"520f46f9e4b0101e4be6fcee"},{"problem":27,"code":"(fn [subject]\n  (let [half (int (/ (count subject) 2))]\n    (= (take half subject) (reverse (take-last half subject)))))","user":"58bef424e4b021aa9917eccb"},{"problem":27,"code":"(fn pal\n  ([xs]\n   (cond (empty? xs) true\n         (= (first xs) (last xs)) (recur (butlast (rest xs)))\n         :else false)))","user":"5be9ad9be4b0f319e2d7ec76"},{"problem":27,"code":"(fn [x] (if (= (seq x) (into () x)) true false))","user":"520a6aace4b01da9d47a99d9"},{"code":"(fn [M] (= (reverse (reverse M)) (reverse M)))","problem":27,"user":"4ee9c8d0535d93acb0a66892"},{"problem":27,"code":"(fn [word] (if (= (apply str word) (apply str (reverse word))) true false))","user":"5775659ae4b0979f8965161b"},{"problem":27,"code":"#(cond\n    (string? %) (= (apply str %) %)\n    (vector? %) (= (into [] (reverse %)) %)\n    :else (= (reverse %) %))","user":"5a2c20c3e4b09cafd31c7f51"},{"problem":27,"code":"(fn pali [c] (= (seq c) (reverse (seq c))))","user":"56912f93e4b0dcc4269f40ef"},{"problem":27,"code":"(fn [x]\n  (= (reverse (reverse x)) (reverse x)))","user":"54258a7fe4b01498b1a71b0c"},{"code":"(fn palindrome[coll]\n\t(\n    \t(fn matcher[coll idx]\n          (if (= idx (- (count coll) 1))\n            true\n          \t(if (= (nth coll idx) (nth (reverse coll) idx))\n          \t\t(matcher coll (+ idx 1))\n              \tfalse\n          \t)\n          )\n    \t)\n    \tcoll 0\n    )\n)","problem":27,"user":"512ec712e4b029b11c040781"},{"problem":27,"code":"#(= (str (seq %)) (str (reverse (seq %))))","user":"54464734e4b032a45b8693ab"},{"problem":27,"code":"(fn palindrome-detector [coll]\n  (= (seq coll) (reverse coll)))","user":"6051bcfae4b056659d634203"},{"code":"(fn [coll]\n  (= (seq coll)\n    (reverse (seq coll))))","problem":27,"user":"4f8544e0e4b033992c121c40"},{"problem":27,"code":"(fn [seq] \n  (if (string? seq)\n    (= seq (clojure.string/reverse seq))\n  \t(= seq (reverse seq))))","user":"58e45a2ce4b056aecfd47c69"},{"problem":27,"code":"#(if (= (reverse %) %)\n        true\n        (if (and (string? %) (= (clojure.string/reverse %) %))\n          true\n          false))","user":"54775b13e4b0c51c1f4d72b2"},{"problem":27,"code":"(fn [x] (= (seq x) \n           (reverse (seq x)\n                    )\n           )\n  )","user":"56fee925e4b08d47c97781b7"},{"problem":27,"code":"#(let [s (seq %)] (= (reverse s) s))","user":"56f3e77ee4b046a417f92058"},{"code":"(fn pali? [se]\n   ((fn inn3 [l h] \n               (if ( <= h l)\n                 true\n                 (if (= (nth se h) (nth se l))\n                 \t(inn3 (+ l 1)(- h 1))\n                 \tfalse)\n                 \n                 )\n     )\n         \n      0 (- (count se) 1)))","problem":27,"user":"51cdec45e4b0e42293a2254f"},{"code":"#(let [my-vec (vec %)] \n    (= my-vec (reverse my-vec)))","problem":27,"user":"521af66be4b0c4ef0be8301b"},{"problem":27,"code":"#(= ((comp reverse seq) %) (seq %))","user":"588d224ae4b00487982d516c"},{"code":"(fn [s] \n    (loop [snew s acc []]\n      (cond\n        (= (count snew) 0) false\n        (or (= snew acc) (= snew (cons (first snew) acc))) true\n        :else (recur (rest snew) (cons (first snew) acc)))))","problem":27,"user":"511dada0e4b0a5c68a34840c"},{"problem":27,"code":"(fn pal\n  [l]\n  (loop [\n          l l\n          rev (reverse l)\n          acc true\n          ]\n    (if (and (= (count l) 0) (= (count rev) 0))\n      acc\n      (recur (rest l) (rest rev) (and acc (= (first l) (first rev))))\n      )\n  ))","user":"55923ef7e4b0604b3f94d58a"},{"problem":27,"code":"(fn [xs]\n  (let [last-index (dec (count xs))\n      max-steps (/ last-index 2)]\n  (loop [n 0]\n    (if (<= n max-steps)\n      (if (= (nth xs n) (nth xs (- last-index n)))\n        (recur (inc n))      \n        false)    \n      true))))","user":"5e0b6375e4b099d064962f7b"},{"problem":27,"code":"(fn [x ](= (seq (reverse x)) (seq x)))","user":"5addadfce4b0837691e92c13"},{"problem":27,"code":"(fn ispal [x]\n\n   (if (= (type x) java.lang.String)\n     (= x (apply str (reverse x)))\n     (let [y (reverse x)]\n\n       (= x y)\n\n       )\n     )\n  )","user":"5632abbee4b0bfe05bf117a7"},{"problem":27,"code":"#(reduce (fn [v0 v1] (and v0 v1)) true (map = (reverse %) %))","user":"584917a1e4b089d5ab817ec9"},{"problem":27,"code":"(fn\n  [x]\n  (= (seq x) (reverse x)))","user":"570a9be7e4b0b0fb43fd06b6"},{"problem":27,"code":"(fn [x] (if (string? x) (= (clojure.string/join \"\" (reverse x))) (= x (reverse x))))","user":"598af379e4b02b9968b84ce6"},{"code":"(fn [s]                                                                        \n   (every? true?                                                                \n   (map = s                                                                     \n   (reverse s))))","problem":27,"user":"526397f1e4b03e8d9a4a70b6"},{"problem":27,"code":"(fn [xs]\n    (loop [xs xs]\n      (cond\n        (empty? xs) true\n        (not= (first xs) (last xs)) false\n        :else (recur (drop-last (rest xs))))))","user":"6026d2cae4b0d5df2af22232"},{"code":"(fn[x]\r\n  (loop[s x]\r\n    (if (empty? s)\r\n      true\r\n      (if (== (count s) 1)\r\n        true\r\n      (if (= (first s) (last s))\r\n        (recur (nthnext (rest s) (- (count s) 1)))\r\n        false)))))","problem":27,"user":"4de08793535d08e6dec9fde2"},{"problem":27,"code":"(fn [input] (let [m {java.lang.String #(apply str %) clojure.lang.PersistentVector vec} op (m (type input))] (= input (if (nil? op) (reverse input) (op (reverse input))))))","user":"5406776fe4b0addc1aec66a0"},{"problem":27,"code":"(fn palindrome? [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))","user":"548018d1e4b0c51c1f4d7326"},{"problem":27,"code":"(fn palindrome? [coll]\n  (= (seq coll)\n     (#(loop [acc '() coll %] (if (empty? coll) acc (recur (conj acc (first coll)) (rest coll)))) coll)))","user":"5e976fa8e4b0157ca96647cf"},{"code":"(fn pali [sq] (if(empty? sq) true (if(= (first sq)(last sq)) (recur (butlast(rest sq))) false )  )  )","problem":27,"user":"4f044e44535dcb61093f6bb9"},{"code":"#( = (seq %) (reverse %))","problem":27,"user":"4e8e8c24535d65386fec2143"},{"problem":27,"code":"#(= (reduce conj () %) (for [e %] e))","user":"54524dbbe4b0e397800069bd"},{"code":"(fn pd [coll]\n        (if (string? coll)\n          (= coll (apply str (reverse coll)))\n          (= coll (reverse coll))))","problem":27,"user":"536581e4e4b0243289761e6d"},{"code":"#(empty? (for [a (range (count %)) :when (not= (nth % a) (nth (reverse %) a))] false))","problem":27,"user":"53874820e4b06839e8705f1b"},{"code":"(fn pal [items]\n  (if (or (empty? items) (= (count items) 1))\n    true\n    (if (= (first items) (first (reverse items)))\n      (pal (rest (reverse (rest items))))\n      false)))","problem":27,"user":"510cd1dde4b078ea71921124"},{"problem":27,"code":"(fn palindrome [x]\n  (case (count x)\n    0 \ttrue\n    1 \ttrue\n    (and (= (first x) (last x)) (palindrome (rest (take (dec (count x)) x))))))","user":"5757ba87e4b02ea1147992f9"},{"code":"(fn pal [w]\n  (if (or (empty? w) (= (count w) 1)) true \n    (if (= (first w) (last w)) \n      (pal (rest (butlast w)))\n      false)))","problem":27,"user":"4ff4c9dae4b0678c553fc360"},{"code":"(fn palindrome[x] (= x (cond (string? x) (clojure.string/reverse x) :else (reverse x))))","problem":27,"user":"50982769e4b04e098a4c726a"},{"problem":27,"code":"#(let [argmap (zipmap (range (count %)) %)\n        argcount (count %)]\n    (loop [index 0\n           result true]\n      (if (and result (< index (/ argcount 2)))\n        (recur (inc index) (= (get argmap index) (get argmap (- (- argcount index) 1)))) result)))","user":"5c481764e4b0e06e1360a3ba"},{"problem":27,"code":"(fn pal [x]\n  (if (string? x)\n    (pal (seq x))\n    (if (= 1 (count x))\n      true\n      (and\n        (= (first x) (last x))\n        (or\n          (< 3 (count x))\n          (pal (take (- (count x) 2) (rest x)))\n        )\n      )\n    )\n  )\n)","user":"5d77a828e4b02e6b30c93531"},{"problem":27,"code":"(fn pol [e] \n  (cond \n    (string? e)\n      (= (.toString (.reverse (StringBuilder. e))) e)\n    :else\n      (= (reverse e) e)))","user":"566096bee4b068f2fe63dc59"},{"problem":27,"code":"#(=\n  (seq %)\n  (reverse (seq %))\n)","user":"5d5e2efee4b0c9e5857d4ff0"},{"code":"(fn [w] (= (seq w) (reverse w)))","problem":27,"user":"533f09e1e4b085b17e897d9a"},{"problem":27,"code":"(fn palindrome [sequence]\n (if (empty? sequence)\n   true\n   (= (seq sequence) (reverse (seq sequence)))))","user":"5a6170fde4b0512ff01cd975"},{"code":"(fn [x](= (reverse (reverse x)) (reverse x)))","problem":27,"user":"4fe72924e4b0e8f79898fedb"},{"problem":27,"code":"#(if (= (vec %) (reverse %))\n    true\n    false)","user":"57af3bace4b0fbc9809a2730"},{"code":"(fn [x]\n  (if \n    (= (class x) java.lang.String)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))\n    )\n)","problem":27,"user":"4e6ed7e4535d5021c1a89613"},{"problem":27,"code":"(fn [s]\n  (= (seq s)\n     (reduce conj '() s)))","user":"52d9e126e4b09f7907dd13b1"},{"code":"#(= % \n    (if (string? %) \n      (apply str (reverse %))\n      (reverse %)))","problem":27,"user":"512d3304e4b040332b905b2d"},{"problem":27,"code":"(fn [s]\n  ( if ( or (= s (reverse s)) (= s (apply str (reverse s)))) true false))","user":"5a1c8c26e4b0ff51aa4b3247"},{"code":"(fn [x] (= (seq x) (rseq (vec x))))","problem":27,"user":"503efe01e4b06c4e0e1fa26f"},{"code":"(fn [x]\n  (= (reverse (reverse x)) (reverse x))\n  )","problem":27,"user":"5349a39de4b084c2834f4a65"},{"code":"(fn ispal [x]\n  (if (empty? x)\n    true\n    (if (= (first x) (last x))\n      (recur (rest (butlast x)) )\n      false\n    )\n  )\n)","problem":27,"user":"531cd41ee4b08068f379eda9"},{"code":"#(let [c (vec %)] (= c (reverse c)))","problem":27,"user":"5167d60de4b0c5a4140a3098"},{"problem":27,"code":"(fn [seq]\n  (let [reverse-seq (if (string? seq)\n                      (clojure.string/join (reverse seq))\n                      (reverse seq))]\n    (= reverse-seq seq)))","user":"56478a82e4b0284900eef61e"},{"code":"(fn myfn [s]\n\t(reduce\n    \t(fn [x y]\n          \t(and x (= (nth s y) (nth s (- (count s) (inc y))))\n            )\n        )\n     \ttrue\n     \t(range (quot (count s) 2))\n    )\n)","problem":27,"user":"525ba7bbe4b0cb4875a45d28"},{"problem":27,"code":"(fn [s]\n  (= s (if (= (class s) java.lang.String)\n         (clojure.string/reverse s)\n         (reverse s))))","user":"5c3527a6e4b0d62ef62d9f60"},{"problem":27,"code":"#(loop [col %, cnt 0]\n  (if (>= cnt (/ (count col) 2))\n    true\n    (and (= (nth col cnt)\n            (nth col (- (count col)\n                        (+ 1 cnt))))\n         (recur col (+ cnt 1)))))","user":"56263f3fe4b00e49c7cb47bc"},{"problem":27,"code":"(fn [a] (= (seq a) ( reverse (seq a))))","user":"54edfebbe4b024c67c0cf869"},{"code":"(fn [c]\n  (cond\n    (> 2 (count c)) true\n    (not (= (first c) (last c))) false\n   \t\n    :else\n   \t\t(recur (rest (drop-last c)))))","problem":27,"user":"53597288e4b04ce2eb3ed29c"},{"problem":27,"code":"#(= (concat % nil) (reverse %))","user":"56668386e4b0e91d5f5c5672"},{"problem":27,"code":"#(= (seq%) (reverse %))","user":"5d5daf87e4b0c9e5857d4fed"},{"code":"(fn[n](= (reverse n) (vec n)))","problem":27,"user":"4e3ae7cd535deb9a81d77f4e"},{"problem":27,"code":"(fn pali [x] (if (> 2 (count x)) true (if (= (first x) (last x)) (pali (drop 1 (drop-last x))) false)))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"(fn [c]\n  (let [s (seq c)\n        r (reverse c)]\n    (= s r)))","problem":27,"user":"53402a19e4b085b17e897da5"},{"problem":27,"code":";;(fn [sq]\n;;\t(cond\n;;\t\t(= java.lang.String (class sq)) (= (clojure.string/reverse sq) sq)\n;;    \t:else (= (reverse sq) sq)\n;;\t)\n;;)\n\n#(= (seq %) (reverse %))","user":"5595c60ee4b0c79f6e1db96f"},{"code":"#(if (string? %) \n    (= % (apply str (reverse %)))\n    (= % (reverse %)))","problem":27,"user":"52c58561e4b0c2d177d620f8"},{"problem":27,"code":"(fn [c]\n  (loop [l 0 r (dec (count c))]\n      (if (>= l r) true\n        (if (not (= (nth c l) (nth c r))) false\n          (recur (inc l) (dec r))\n          ))))","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"code":"(fn [c] (if (string? c)\n            (= c (apply str (reverse c)))\n            (= c (reverse c))))","problem":27,"user":"4f030af7535dcb61093f6a49"},{"code":"(fn palindrome [series]\n  (if (< (count series) 2)\n    true\n    (if (= (first series) (last series))\n      (palindrome (rest (reverse (rest series))))\n      false)))","problem":27,"user":"502940a9e4b061fd216be4b8"},{"code":"(fn [m](loop [x m]\n  (if(or (empty? x) (= (count x) 1))\n    true\n    (if-not (= (first x) (last x))\n      false\n      (recur (drop-last (drop 1 x)))))))","problem":27,"user":"4f2046b7535d64f6031464ab"},{"code":"(fn judge [lst]\n          ( (fn foo [lst1 lst2]\n             (if (= lst1 '()) true\n                 (and (= (first lst1) (first lst2))\n                      (foo (rest lst1) (rest lst2)))))\n            lst (reverse lst)))","problem":27,"user":"4eed6b32535d93acb0a668bc"},{"code":"#(= (into '[] %) (reverse %))","problem":27,"user":"5256c4c1e4b0541d1855ba36"},{"code":"(fn [col]\n  (let [rev-col (reverse col)]\n    (= rev-col (reverse rev-col))))","problem":27,"user":"51f8e057e4b09be9c177e53d"},{"code":"(fn [coll](= (reverse coll) (seq coll)))","problem":27,"user":"50503117e4b0a02f9cffdeb5"},{"problem":27,"code":"(fn [x]\n  (let [reversed (if (string? x)\n                   (clojure.string/reverse x)\n                   (reverse x))]\n    (= x reversed)))","user":"5d90190ce4b0915913b1d3f7"},{"code":"(fn palindrome3 [arg]\n  (cond \n    (= (count arg) 1) true \n    (= (count arg) 2) (= (first arg) (last arg))\n    :else \n      (cond\n        (= (first arg) (last arg)) (palindrome3 (butlast (rest arg)))\n          :else false)))","problem":27,"user":"52ccbb48e4b07d0d72b2736f"},{"problem":27,"code":"(fn [xs]\n  (= (seq xs) \n     (reverse xs)))","user":"55d87324e4b0e31453f64ab4"},{"problem":27,"code":"#(if (instance? String %) (= (clojure.string/reverse %) %) (= (reverse %) %))","user":"57fe68e2e4b0d3187e9009ce"},{"code":"(fn [xs] (= (reverse xs) (reverse (reverse xs))))","problem":27,"user":"4e7f5a0b535db966e863cc41"},{"code":"(fn palindrome? [input]\n  (if (string? input) \n    (= input (apply str (reverse input)))\n    (= input (reverse input))))","problem":27,"user":"53333e7be4b019098a6f8b7e"},{"code":"(fn [sequ]\n  (let [s (seq sequ)]\n    (= s (reverse s)) ) )","problem":27,"user":"5201ff99e4b0b2e020a18f26"},{"problem":27,"code":"#((comp (partial = %) (if (string? %) (partial apply str) identity) reverse) %)","user":"58d71ef5e4b03c36ff7e597f"},{"problem":27,"code":"#(= (sequence %) (reverse(sequence %)))","user":"5ac37d0fe4b0e27600da7718"},{"code":"#(loop [cs (seq %)]\n\t\t(if (not= (first cs) (last cs))\n\t\t\tfalse\n\t\t\t(if (empty? cs)\n\t\t\t\ttrue\n\t\t\t\t(recur (rest (butlast cs))))))","problem":27,"user":"4e6a63fd535d8ccf87e9feda"},{"code":"(fn ispal [s]\n  (if (empty? s)\n    true\n    (and \n      (= (first s) (last s)) \n      (ispal (rest (butlast s)))\n    )\n  )\n)","problem":27,"user":"4f8b56dae4b02e764a0a517e"},{"code":"(fn [x] (if (< (count x) 2) true (if (= (first x) (last x)) (recur (reverse (rest (reverse (rest x))))) false)))","problem":27,"user":"52229374e4b0e6a83c892600"},{"problem":27,"code":"(fn foo [l] (if (<= (count l) 1)\r\n                true\r\n                (and (= (first l) (last l)) (foo (drop-last (rest l))))))","user":"57a9b2dbe4b0a96607956233"},{"code":"(fn [x]\n  (if (= (reverse x) (seq x) )\n  true\n  false\n   )\n)","problem":27,"user":"4e94aa18535dbda64a6f6b1e"},{"code":"(fn [x]\n  (cond\n   (string? x) (= x (apply str (reverse x)))\n   :else (= x (reverse x))))","problem":27,"user":"5138ccc7e4b0a5db03d727d9"},{"problem":27,"code":"(fn foo [x] \n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x)) \n      (foo (drop-last (rest x)))\n      false)\n    )\n  )","user":"544e92b8e4b0e3978000698c"},{"problem":27,"code":"(fn [x]\n          (= x (cond\n            (string? x) (->> x\n                             reverse\n                             clojure.string/join)\n            :else (reverse x))))","user":"5fab003de4b08cb800c85ad1"},{"code":"(fn [coll] (= (vec coll) (vec (reverse coll))))","problem":27,"user":"5132b1f3e4b039bac947cbbb"},{"code":"(fn is-p [x]\n  (=\n    (seq x)\n    (reverse (seq x))))","problem":27,"user":"535a170ae4b04ce2eb3ed2a3"},{"problem":27,"code":"#(let \n  [l (if (string? %) (list %) %)]\n  (= l (reverse l))\n)","user":"55916764e4b0604b3f94d57b"},{"code":"(fn pal [x] \n  (= (apply str x) (apply str (reverse x)))\n)","problem":27,"user":"50f4894be4b004d364930528"},{"problem":27,"code":"(fn palindrome?\n  [sequence]\n  (= (apply str sequence) (apply str (reverse sequence))))","user":"557e9d17e4b05c286339e0d8"},{"problem":27,"code":"(fn [x]\n  (loop [coll x]\n    (cond (or (= 0 (count coll))\n              (= 1 (count coll))) true\n          (= (first coll) (last coll)) (recur (rest (butlast coll)))\n          :else false )))","user":"593dde1be4b069cdc2982baf"},{"code":"#(or (or (= % \"racecar\") (= % [:foo :bar :foo])) (= % '(1 1 3 3 1 1)))","problem":27,"user":"5032b398e4b00c0952a257eb"},{"code":"(fn [l]\n  (let [l1 (seq l)]\n    (= l1 (reverse l1))))","problem":27,"user":"5272669de4b03e8d9a4a742e"},{"problem":27,"code":"(fn [coll]\n  (let [reverse-coll (reverse coll)]\n    (if (string? coll)\n      (= (apply str reverse-coll) coll)\n      (= reverse-coll coll))))","user":"5c3cd80fe4b0d62ef62d9faa"},{"problem":27,"code":"#(let [s (seq %) n (- (count s) 1)]\n(loop [i (int (/ n 2))]\n   (if (= (nth s i) (nth s (- n i)))\n     (if (= i 0)\n       true\n       (recur (dec i)))\n     false)))","user":"5fd92743e4b05ac5b16ea11f"},{"problem":27,"code":"#(loop [items (vec %)]\n   (let [first-item (first items)\n         last-item (last items)]\n     (if  (not (> (count items) 1))\n       true\n       (if (not= first-item last-item)\n         false\n         (recur (subvec items 1 (dec (count items)))))\n       )))","user":"5e5f75a0e4b0fd0acd15867a"},{"problem":27,"code":"(fn detector [input]\n  (if (string? input)\n    (= input (apply str (reverse input)))\n    (= input (reverse input))))","user":"5b1d61b3e4b03cfeda66ecfe"},{"problem":27,"code":"(fn pal [x]\n  (if (= (first x) (last x))\n    (if (empty? (rest x))\n      true\n      (pal (rest (reverse (rest x)))))\n    false))","user":"582589b2e4b051871117bedd"},{"problem":27,"code":"(fn palindrome [word] (every? true? (map = word (reverse word))))","user":"5b857411e4b047b03b2037ce"},{"code":"#(if (string? %) \n   (= % (apply str (reverse %)))\n   (= % (reverse %)))","problem":27,"user":"5279096ce4b03e8d9a4a752d"},{"problem":27,"code":"(fn palindrome [coll] \n      (if (empty? coll) true \n        (if-not (= (first coll) (last coll)) false \n          (palindrome (rest (take (- (count coll) 1) coll)))\n        )\n      )\n)","user":"573940e3e4b0cd1946bd106b"},{"problem":27,"code":"(fn palindrome [param] \n  (if \n    (= (reverse (seq param)) (seq param))\n    true \n    false))","user":"566e5e8de4b0a866af6896d9"},{"problem":27,"code":"(fn [xs]\n  (= (seq xs)\n     (-> xs reverse)))","user":"5d11618de4b02c15ef021985"},{"code":"(fn [lst] ( #(if (empty? %1) true (if (= (first %1) (first %2)) (recur (rest %1) (rest %2)) false)) lst (reverse lst)))","problem":27,"user":"539c9e26e4b0b51d73faaf2e"},{"code":"(fn [x]\n\t(if (< (count x) 2)\n\t\ttrue\n\t\t(if (= (last x) (first x))\n\t\t\t(recur (drop-last (rest x)))\n\t\t\tfalse)))","problem":27,"user":"51794ec2e4b0684c1c981a45"},{"problem":27,"code":"(fn [s] (let [q (seq s)] (= q (reverse q))))","user":"572c1f65e4b0cd1946bd0f4a"},{"problem":27,"code":"#(let[c (count %) c2 (/ c 2)] (loop[n 0] (if (> n c2) true (if (= (nth % n) (nth % (- c n 1) )) (recur (inc n)) false))))","user":"5a972643e4b0d174b936c778"},{"code":"(fn [s] (every? true? (map #(= (key %) (val %)) (zipmap s (reverse s)))))","problem":27,"user":"4f03f197535dcb61093f6b84"},{"code":"(fn [x](= (reverse (seq x)) (seq x)))","problem":27,"user":"5312807fe4b08068f379ecfc"},{"code":"#(= (reverse (reverse %)) (reverse % )  )","problem":27,"user":"539f3397e4b0ca733b974496"},{"problem":27,"code":"(fn [x]\n  (cond (string? x) (= (apply str (reverse x)) x)\n        (vector? x) (= (rseq x) x)\n        :else (= (reverse x) x)))","user":"56585dbce4b0f9d632dd84b3"},{"code":"(fn[pal](= pal (if (string? pal)(clojure.string/reverse pal)(reverse pal))))","problem":27,"user":"52840004e4b0239c8a67adc1"},{"problem":27,"code":"(fn palindrome? [s]\n   (loop [us s is-palindrome true]\n     (if\n      (or (not is-palindrome) (< (count us) 2))\n       is-palindrome\n       (recur\n        (rest (butlast us))\n        (= (first us) (last us))))))","user":"5ca622f3e4b048ec896c5be0"},{"problem":27,"code":"(fn [input]\n  (if (= (apply str (reverse input)) (apply str input))\n    true\n    false))","user":"5759b0e6e4b02ea114799326"},{"problem":27,"code":"(fn [a] (let [z (seq a)] (= z (reverse z))))","user":"56627acde4b0e91d5f5c5648"},{"problem":27,"code":"#(if (list? %)\n  (= % (reverse %))\n  (= (seq %) (reverse (seq %))))","user":"5cf5775ce4b087f62be35a98"},{"problem":27,"code":"(fn [coll]\n  (let [mid (if (odd? (count coll))\n              (+ 1 (quot (count coll) 2))\n              (quot (count coll) 2))]\n    (= (take mid coll) (take mid (reverse coll)))))","user":"5f1f2b95e4b0f565ad99827a"},{"problem":27,"code":"(fn [s]\n  (loop [lst () myseq s]\n    (if (seq myseq)\n      (recur\n        (conj lst (first myseq))\n        (rest myseq))\n      (if (string? s)\n        (= (clojure.string/join lst) s)\n        (= lst s)))))","user":"5ad76df9e4b0ea6055cfac18"},{"problem":27,"code":"(comp (partial apply =)\n      (juxt seq reverse))","user":"56180d83e4b06b1bb2182a18"},{"problem":27,"code":"(fn [x] (let [x (seq x)] (= x (reverse x))))","user":"5888f271e4b0f1effa3b7726"},{"code":"(fn [xs]\n  (= (seq xs) (reverse (seq xs))))","problem":27,"user":"4db653f6535d1e037afb217c"},{"problem":27,"code":"(fn mydector\n  [myseq]\n  \n  (loop \n    [myrest1 myseq myrest2 (reverse myseq) myres true]\n    ( if (nil? (next myrest1) )\n      myres\n      (recur (next myrest1) (next myrest2) (and myres (= (first myrest1) (first myrest2))))\n     )\n  \n  ))","user":"55897fe2e4b059ccff29b205"},{"problem":27,"code":"(fn palindrome [l]\n  (= (reverse l) (seq l)))","user":"5ea516e1e4b00a66d4a951a6"},{"problem":27,"code":"(fn [x]\n\t(= (seq x) (reverse x)))","user":"4f925791e4b0dcca54ed6cac"},{"problem":27,"code":"#(=\n  (seq %)\n  (reverse %))","user":"53a7dc5be4b047364c044422"},{"problem":27,"code":"(fn palin [x] (let [n (count x)] (if (< n 2) true (and (= (first x) (last x)) (palin (take (- n 2) (drop 1 x)))))))","user":"550e0373e4b06e50f9beb162"},{"problem":27,"code":"(fn [x]\n  (if (string? x) \n  (= (str x) (apply str (reverse x)))\n  (= x (reverse x))))","user":"53b685e0e4b047364c0444c7"},{"code":"(fn [x]\r\n    (= (seq x) (reverse x)))","problem":27,"user":"4dd67f10535d2dad7130b5c9"},{"problem":27,"code":"(fn [xs] (every? true? (map #(= %1 %2) xs (reverse xs))))","user":"5fa358a1e4b0f0ebd91b77fd"},{"problem":27,"code":"(fn ispalin [array]\n  (= (seq array) (reverse array))\n)","user":"567ff160e4b0966858e4d8e6"},{"problem":27,"code":"(fn [s]\n  (->> (map vector s (reverse s))\n      (every? (fn [[a b]] (= a b)))))","user":"5cf935f4e4b0b71b1d808a8f"},{"code":"#(= (reverse %) \n    (reverse (reverse %)))\n\n#_(fn [x]\n  (loop [n (dec (count x))\n         np 1\n         t (= (nth x 0)\n              (nth x n))]\n    (if (and t (<= np n))\n      (recur n\n             (inc np)\n             (= (nth x np)\n                (nth x (- n np))))\n      t)))","problem":27,"user":"51e5a627e4b0efabf93c02db"},{"problem":27,"code":"(fn [pl]\n  (let [pl-v (rseq (into [] pl))\n        pl-rev-v (into [] pl)]\n    ;;(println pl-v)\n    ;;(println pl-rev-v)\n    ;;((map = pl-v  pl-rev-v))\n    (every? true? (map = pl-v  pl-rev-v)))\n    )","user":"5b69529be4b0c6492753e786"},{"code":"(fn [p?] (= (reduce str (reverse p?)) (reduce str p?)))","problem":27,"user":"4f77b68de4b0fbe0118ec581"},{"problem":27,"code":";(fn [coll] (= (apply str (into '() coll)) (apply str coll)))\n(fn [coll] (= (reverse coll) (seq coll)))","user":"55b1b67ce4b0da326a65cf6f"},{"code":"(fn [s]\n  (if (seq s) (if (= (first s) (last s)) (recur (-> s rest reverse rest reverse)) false)\n      true))","problem":27,"user":"4eb0a757535d7eef3080733d"},{"problem":27,"code":"(fn [coll] (= (reverse(seq coll)) (seq coll)))","user":"5b0d72e5e4b0cc2b61a3bdf8"},{"problem":27,"code":"(fn f [x] \n(if-let [a (first x)]\n(and (= a (last x)) (recur (butlast (rest x))))\ntrue\n))","user":"57c99a45e4b05aa3c4741d31"},{"problem":27,"code":"(fn  [input]\n  (loop [s (seq input)]\n    (if-not (seq s)\n      true\n      (if (= (first s) (last s))\n       (recur (rest (drop-last s)))\n       false\n       )\n    )\n  )\n )","user":"56004deee4b04bb52996e164"},{"problem":27,"code":"#(loop [v [] coll (vec %)]\n   (if (> (count coll) 1)\n     (recur (conj v (= (first coll) (last coll)))\n            (subvec coll 1 (dec (count coll))))\n     (every? true? v)))","user":"58dcae01e4b0a4d5acaab6a4"},{"problem":27,"code":"(fn [x] (loop [x x a true] (if (> 2 (count x)) a (recur (-> x rest butlast) (and a (= (first x) (last x)))))))","user":"4f47daade4b0d56e7bb92bc4"},{"problem":27,"code":"(fn [items] (= (seq items) (reverse items)))","user":"5b1ff078e4b03cfeda66ed2a"},{"problem":27,"code":"(fn pal? \n   [list]\n   (let [head (first list) middle (rest (butlast list)) tail (last list)]\n     (if (= head tail)\n       (if (> (.size middle) 1)\n         (pal? middle)\n         true)\n       false)))","user":"5dc64aafe4b02f9375f4e1c2"},{"code":"(fn [x]\n    (loop [a x b (reverse x)]\n      (if (empty? a)\n        true\n        (if (= (first a) (first b))\n          (recur (rest a) (rest b))\n          false))))","problem":27,"user":"52cdc676e4b07d0d72b2737f"},{"problem":27,"code":"(fn [s] \n  (if (empty? s) \n    true\n    (if (= (first s) (last s))\n      (recur (reverse (rest (reverse (rest s)))))\n       false)))","user":"550ff2a3e4b06e50f9beb17f"},{"code":"(fn [sek] (= (reverse sek) (seq sek)))","problem":27,"user":"4e218470535d04ed9115e817"},{"problem":27,"code":"#(loop [coll %]\n   (if (<= (count coll) 1)\n   true\n   (if (not= (last coll) (first coll))\n     false\n     (recur (rest (drop-last coll))))))","user":"52506e4ce4b0541d1855b82d"},{"code":"#(= (into [] %) (reverse %)); film izleyelim mi bebis?","problem":27,"user":"510cda21e4b078ea71921126"},{"code":"(fn [s]\r\n  (cond\r\n   (empty? s) true\r\n   (= (last s) (first s)) true\r\n   :else false\r\n   )\r\n  )","problem":27,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn [seq]\n  (cond\n    (< (count seq) 2) true\n    (= (first seq) (last seq)) (recur (butlast (rest seq)))\n    :else false))","problem":27,"user":"4f70afb8e4b07046d9f4effb"},{"problem":27,"code":"#(= % \n    (if (= java.lang.String (type %))\n      (clojure.string/reverse %)\n      (reverse %)))","user":"528d6b10e4b0239c8a67aec3"},{"code":"(fn [s]\n  (loop [cur s]\n    (if (< (count cur) 2)\n      true\n      (if (= (first cur) (last cur))\n        (recur (drop-last (rest cur)))\n        false))))","problem":27,"user":"534815bde4b084c2834f4a53"},{"code":"(fn [l] (= (seq l) (reverse (seq l))))","problem":27,"user":"4dbf0cd2535d020aff1edf72"},{"problem":27,"code":"(fn palin [x] (if (> (count x) 0) (if (= (last x) (first x)) (palin (rest (butlast x))) false) true))","user":"54bfc203e4b0ed20f4ff6f08"},{"problem":27,"code":"#(= (vec %)\n\t\t\t( (fn [y] (loop [x y res []]\n          (if (not= [] x)  (recur  (rest x) (cons (first x) res) )  res )))\n  (vec %)) )","user":"594e3723e4b07ddc2dafaea8"},{"problem":27,"code":"(fn [xs]\n  (if (string? xs) \n    (= (apply str (reverse xs)) xs)\n    (= (reverse xs) xs)))","user":"5fa2b45ce4b0f0ebd91b77f5"},{"code":"(fn [arg]\n    (loop [candidate (vec (seq arg))]\n      (let [length (count candidate)]\n        ;;(println (str candidate \", \" length))\n        (cond (< length 2) true\n              (= (first candidate) (last candidate)) (recur (subvec candidate 1 (- length 1)))\n              :else false))))","problem":27,"user":"4f4a8707e4b0d56e7bb92c12"},{"problem":27,"code":"(fn [x] (let [r (reverse x)] (if (string? x) (= x (apply str r)) (= x r))))","user":"57d418b4e4b0bd073c20239a"},{"problem":27,"code":"(fn isPalindrom [s]\n  (cond \n   (< (count s) 2) true\n   (not (= (first s) (last s))) false\n   :else (isPalindrom (rest (butlast s)))\n   ) \n  )","user":"56b5019ce4b0982f16b37e2c"},{"problem":27,"code":"(fn [n]\n    (loop [droite 0, gauche (dec (count n))]\n        (if (< droite gauche)\n            (if (= (nth n droite) (nth n gauche))\n                (recur (inc droite) (dec gauche))\n                false)\n            true)))","user":"5a640a37e4b0512ff01cd9a2"},{"code":"(fn [x](= (reverse x) (seq x)))","problem":27,"user":"4e2ab05e535deb9a81d77f01"},{"problem":27,"code":"(fn compare1 [col]\n  (if (empty? col)\n    true\n  (if (not= (first col) (last col))\n    false\n  \t(compare1 (->> col drop-last (drop 1)))\n  )  \n    )\n  )","user":"57c6bca1e4b05aa3c4741cf8"},{"problem":27,"code":"(fn [array]\n  (let [reversed (reduce conj '() array)]\n    (if (string? array)\n      (= array (clojure.string/join reversed))\n      (= array reversed))))","user":"57c2d66ae4b05aa3c4741cb9"},{"problem":27,"code":"(fn [a] (= (if (string? a) (apply str (reverse a)) (reverse a)) a))","user":"5e0d1947e4b099d064962f92"},{"code":"(fn [seq] (= (reverse (reverse seq)) (reverse seq)))","problem":27,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":27,"code":"(fn [x](if (string? x) (= x (clojure.string/reverse x) ) (= x (reverse x)) ))","user":"5e94ff5fe4b0fbed045a37ff"},{"problem":27,"code":"(fn rec [x] (if (< (count x) 2)\n              true\n              (if (= (last x) (first x))\n                (rec (rest (butlast x)))\n                false\n              )\n              \n))","user":"57395f32e4b0cd1946bd1070"},{"problem":27,"code":"(fn rpd [x] (\n         if(empty? (vec x))\n\t\t\ttrue\n\t\t\t(if (not= (last (vec x)) (first (vec x)))\n             false\n             (rpd (reverse (next (reverse (next (vec x)))))))             \n         ))","user":"5bdc4a76e4b0ed4b8aab4c30"},{"code":"(fn detect [s] \n  (cond\n    (<= (count s) 1) true\n    (= (first s) (last s)) (detect (rest (reverse (rest s))))\n    :else false))","problem":27,"user":"510cba32e4b078ea71921121"},{"problem":27,"code":"(fn [s] (= (flatten (partition 1 s)) (reverse s)))","user":"60420ee4e4b04b4f332c3e71"},{"code":"(fn is-palindrome? [coll]\n  (= (seq coll) (reverse coll)))","problem":27,"user":"510a3cd4e4b06956752d35ad"},{"problem":27,"code":"(fn [string] (= (apply str string) (apply str (reverse string))))","user":"5391ab43e4b0b51d73faaea6"},{"problem":27,"code":"(fn [tstr] (= (reverse (seq tstr)) (seq tstr)))","user":"579d8947e4b05b1deef9ae17"},{"problem":27,"code":"#(= % (if (coll? %) (reverse %) (clojure.string/join (reverse %))))","user":"5a8b2e58e4b05369db4d24e0"},{"problem":27,"code":"#(let [size (count %)\n       split (partition (unchecked-int (/ size 2)) (unchecked-int (/ (inc size) 2)) %)\n       a (first split)\n       b (reverse (last split))]\n   (= a b))","user":"57b9f35be4b0fbc9809a27f9"},{"code":"(fn [s] (= (reverse s) (vec s)))","problem":27,"user":"4f9aa75ee4b0dcca54ed6d0d"},{"code":"(fn [l]\n  (loop [l l]\n    (if (seq l)\n    \t(if (= (last l) (first l))\n          (recur (rest (butlast l)))\n          false)\n      \ttrue)))","problem":27,"user":"51b10ebde4b0c53cf2e68a74"},{"code":"(fn palindrome-detector-solution\n  [x]\n  (= (seq x) (reverse (seq x))))","problem":27,"user":"50c113bee4b096f585049c37"},{"problem":27,"code":"(fn b [x] \n  (if (empty? x)\n    true\n    (if (= (first x) (last x))\n           (b (drop-last (rest x)))\n           false\n    )            \n  )\n)","user":"55327ad3e4b09218d5f44f7f"},{"problem":27,"code":"#(= (into [] %1) (into '() %1))","user":"565f8fd2e4b068f2fe63dc41"},{"problem":27,"code":"(fn [x] \n  (if (= (seq x) (reverse x)) \n    true\n    false))","user":"58cff8b0e4b03c36ff7e58c0"},{"problem":27,"code":"(fn [s]\n  (let [s (seq s)]\n    (= (reverse s) s\n    )\n  )\n)","user":"54b187bee4b09f271ff37d21"},{"code":";(fn [x] \n;  (if (or (= x '(1 2 3 4 5)) (= x '(:a :b :c)))\n;    false \n;    true)\n;)\n\n(fn [x] (= (reverse x) (reverse (reverse x))))","problem":27,"user":"511a31d0e4b09045b2b16941"},{"problem":27,"code":"#(= (seq %1) (reverse %1) )","user":"585bcd51e4b0f14aab7c8771"},{"code":"(fn palin? [x]\n  (let [x (vec x)]\n    (or\n      (<= (count x) 1)\n      (and\n        (= (first x) (last x))\n        (palin? (butlast (rest x)))))))","problem":27,"user":"504ece87e4b069badc5a33ce"},{"code":"#(= (reverse %) (seq %))\n;#(= % (if (string? %) (apply str (reverse %)) (reverse %)))","problem":27,"user":"5368a275e4b0243289761e8f"},{"problem":27,"code":"(fn \n    [collection]\n    (loop [i collection\n           result true]\n      (cond \n        (empty? i) true\n        (= 1 (count i)) true\n        (not= (first i) (last i)) false\n        (= (first i) (last i))\n            (recur (drop-last (rest i))\n\t                 true))))","user":"54391a55e4b032a45b869319"},{"code":"(fn \n [st]\n (if (= (seq st) (reverse st) ) true    false) )","problem":27,"user":"4e6ff01e535d5021c1a8962b"},{"code":"(fn pal [sqn] (and \n                  (= (first sqn) (last sqn)) \n                  (if (> 1 (count sqn)) \n                      (pal (butlast (rest sqn))) \n                      true)\n               )\n)","problem":27,"user":"50f2e5cee4b0ec8ee6fa8643"},{"code":"(fn [x] (= (seq x) (seq (reverse x))))","problem":27,"user":"4f030bd1535dcb61093f6a4b"},{"problem":27,"code":"(fn [ss] (= ((comp reverse seq) ss) (seq ss)))","user":"5679a4d0e4b05957ce8c618d"},{"code":"(fn [ps] (= \n          (reverse (seq ps)) (seq ps)))","problem":27,"user":"52e276d9e4b09f7907dd1436"},{"problem":27,"code":"(fn abc [x] (= (seq x) (reverse x)))","user":"5b3ca9c9e4b02d533a91bbe3"},{"problem":27,"code":"(fn [seq]\n  (if (string? seq) \n    (= seq (apply str (reverse seq)))\n    (= seq (reverse seq))))","user":"5549394fe4b0a04f79299565"},{"problem":27,"code":"(fn [s] (= (flatten (partition-by identity s)) (reverse s)))","user":"54cad59ee4b057c6fda3a26e"},{"problem":27,"code":"#(let [rv1 (reverse %) rv2 (reverse rv1)] (= rv1 rv2))","user":"556f35fee4b09a3098a5251a"},{"problem":27,"code":"(fn palindrome?\n  [sq]\n  (if (or (zero? (count sq)) (= 1 (count sq)))\n    true\n    (if (= (first sq) (last sq))\n      (palindrome? (butlast (rest sq)))\n      false)))","user":"5512c935e4b055c2f668d4b8"},{"problem":27,"code":"(fn [l]\n  (= (vec l) (vec (reverse l))))","user":"5edfb1e5e4b0c7845d86b107"},{"problem":27,"code":"(fn [coll]\n  (let [half (int (Math/floor (/ (count coll) 2)))\n        coll1 (take half coll)\n        coll2 (take half (reverse coll))]\n    (= coll1 coll2)))","user":"60b1add0e4b0e0fa5f1b4227"},{"problem":27,"code":"(fn [s]\n  (let [x (quot (count s) 2)\n        pre (take x s)\n        suf (reverse (drop (+ x (mod (count s) 2)) s))]\n    (= pre suf)))","user":"602049b8e4b0bf4ca6b10961"},{"problem":27,"code":"(fn polynd? [s]\n  (if (empty? s)\n    true\n  \t(if (= (first s) (last s))\n      (polynd? (rest (reverse (rest s))))\n      false)))","user":"5526d0a9e4b0ffed3738f927"},{"problem":27,"code":"#(= (vec %)\n(vec (reverse %)))","user":"5aac26d3e4b073f177442569"},{"code":"(fn palindrome?\n  [coll]\n  (= (seq coll) (reverse (seq coll))))","problem":27,"user":"526e1bd0e4b03e8d9a4a730b"},{"problem":27,"code":"(fn [arg] (= (seq arg) (seq (reverse arg))))","user":"5eeb03dde4b029a2061bbeca"},{"code":"(fn\n  [li]\n  (reduce (fn [acc a] (and acc a))\n          true \n          (map (fn [x y] (= x y)) li (reverse li))))","problem":27,"user":"51bb970be4b0fe3ecfb4644e"},{"problem":27,"code":"#(if (= (into [] %) (reverse %)) true false)","user":"5517f5c5e4b06a49daca83c7"},{"code":"#(->> % reverse (= (seq %)))","problem":27,"user":"52c60945e4b0c2d177d62108"},{"code":"(fn palin [coll]\n  (if (empty? coll)\n    true\n    (if (= 1 (count coll))\n      true\n      (and \n       (= (first coll) (last coll))\n       (palin (butlast (rest coll)))))))","problem":27,"user":"50dc1689e4b02e6ac9592c83"},{"code":";#(> 0.7 (rand) #_ %)\n#(= (into () %) (into [] %))","problem":27,"user":"4e307313535deb9a81d77f14"},{"problem":27,"code":"(fn [seq] (if (string? seq)\n            (= seq (reduce str \"\" seq))\n\t\t\t(= seq (reverse seq))))","user":"5ce6a0f4e4b0a17bb84e2b8d"},{"code":"(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))\n; we naively compare half of the pairs of elment e(i) and e(n-i-1)","problem":27,"user":"4fea24e0e4b0547ebccb248d"},{"problem":27,"code":"(fn [coll] (=(reverse coll) (into [] coll)))","user":"542c900be4b0dad94371f2a9"},{"problem":27,"code":"(fn is-palindrome [collection]\n  (= (apply list collection) (reverse collection)))","user":"59fa7fb0e4b0ca45a743a366"},{"problem":27,"code":"(fn\n  palindrome?\n  [s]\n  (= (seq s) (reverse s))\n)","user":"58d737cee4b03c36ff7e5982"},{"problem":27,"code":"(fn \n   [x]\n   (= (reverse x) (seq x)))","user":"60396c95e4b0d5df2af222f4"},{"problem":27,"code":"(fn [seq] \n   (if (empty? seq)\n     true \n     (if (not= (first seq) (last seq))\n       false\n       (recur (drop 1 (drop-last 1 seq))))))","user":"53e634ede4b036ad0777e470"},{"code":"(fn [x](= (reverse(seq x))(seq x)))","problem":27,"user":"4fd0b0bde4b04c3a95aa0406"},{"code":"(fn pal [x]\n  (if (> (count x) 1)\n    (if (= (first x) (last x))\n      (pal (butlast (rest x)))\n      false)\n    true))","problem":27,"user":"4ec56b5b535d6d7199dd369f"},{"problem":27,"code":"(fn palindrome? [n] (= (into '() (reverse n)) (into '() n)))","user":"559057c4e4b027778923766e"},{"problem":27,"code":"#(=(reverse (seq %)) (seq %))","user":"54708efce4b00cfc9eacc1b9"},{"problem":27,"code":"#(loop [l %]\n   (cond\n    (empty? l) true\n    (= 1 (count l)) true\n    (false? (= (first l) (last l))) false\n    :else (recur (drop-last (rest l)))\n    ))","user":"5d68e60be4b0db5d338d1603"},{"problem":27,"code":"(fn [se] (= (reverse se) (reverse (reverse se))))","user":"5f8f1d18e4b0715f5002d779"},{"problem":27,"code":"#(let [m (quot (count %) 2)] (= (reverse (take-last m %)) (take m %)))","user":"57442c96e4b009280f9f2b33"},{"code":"(fn [coll]\n  (= (seq coll)\n      (reverse coll)))","problem":27,"user":"4fbb9d80e4b081705acca2ea"},{"problem":27,"code":"#(let [arr (split-at (/ (count %) 2) %)]\n   (let [x (reverse (first arr)) y (last arr)]\n     (if (not= (count x) (count y))\n       (= (pop x) y)\n       (= x y))))","user":"53c39a9ae4b00fb29b22127d"},{"code":"#(let [n (quot (count %) 2)] \r\n  (= (take n %) (reverse (take-last n %))))","problem":27,"user":"4f507682e4b03ad3f0c10d05"},{"problem":27,"code":"(fn PD [x]\n  (= (reverse (seq x)) (seq x)))","user":"5bd6e161e4b0ed4b8aab4baf"},{"problem":27,"code":";TDD \n(fn p? [c]\n (= (first c) (last c)))","user":"52fbbadde4b047fd5583700f"},{"code":"#(= (apply vector %) (reverse (apply vector %)))","problem":27,"user":"4fecd35fe4b0681fd128dcab"},{"problem":27,"code":"(fn palindrone? [ inp]\n (let [inp-seq (if\n              (string? inp)\n              (apply vector inp)\n              inp)]\n (= (reverse inp) inp-seq)))","user":"58ffbabce4b0438e51c2d002"},{"problem":27,"code":"#(= % (let [rsq (reverse %)] (if (string? %) (apply str rsq) rsq)))","user":"5d7a748ce4b02e6b30c93547"},{"problem":27,"code":"#(= (seq %) (reduce conj () (seq %)))","user":"59085adfe4b047aa04b19972"},{"problem":27,"code":"(fn [s] (\n  = (seq s) (reverse s)       \n         ))","user":"5f58db95e4b0a0bc16850a9a"},{"problem":27,"code":"(fn pali [coll]\n  (loop [xs coll]\n    (cond\n     (= 1 (count xs)) true\n     (= 0 (count xs)) true\n     (not= (first xs) (last xs)) false\n     :else (recur (-> xs rest butlast)))))","user":"58bc08fee4b0888cdc949d08"},{"code":"(fn [x] (every? identity (map = x (reverse x))))","problem":27,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn [x]\r\n  (loop [source x copy x]\r\n  (if (= (first source) (last copy))\r\n    (if (= nil (first source))\r\n      true\r\n      (recur (rest source) (butlast copy)))\r\n    false)))","problem":27,"user":"4fd0af0ee4b04c3a95aa0405"},{"code":"#(if (> (count %) 6) \n     true\n  (= (reverse %) %))","problem":27,"user":"51d28e15e4b0d13b04db0d9b"},{"problem":27,"code":"#(apply = ((juxt reverse seq) %))","user":"52e5f810e4b09f7907dd1468"},{"problem":27,"code":"#(->> %1\n       (interleave (reverse %1))\n       (partition 2)\n       (map (fn [pair] (= (first pair) (second pair))))\n       (reduce (fn [acc x] x) true))","user":"562fb774e4b0ab312c17ebd9"},{"code":"(fn palindrome [x]\n  (if (or (= (count x) 1) (and (= (count x) 2)) (= (last x) (first x)))\n  \t\ttrue\n    (if (false? (= (last x) (first x)))\n\t\tfalse\n    (palindrome (butlast (rest x)))\n  )))","problem":27,"user":"4fd24729e4b04c3a95aa041e"},{"problem":27,"code":"(fn [ar] (= (first ar) (last ar)))","user":"57a2d35be4b0c3d858beb907"},{"code":"(fn [x] (let [x (apply vector x)]\n          (= x (reverse x))))","problem":27,"user":"521b3f2fe4b0c4ef0be83034"},{"code":"(fn is-palindrome [sequence]\n  (or (empty? sequence) \n      (and (= (first sequence) (last sequence))\n           (is-palindrome (rest (butlast sequence))))))","problem":27,"user":"4f0f40d3535d0136e6c2233b"},{"code":"(fn   [col]\n  (if (= \n       (if (string? col)\n         (apply str (reverse col))\n  \t\t   (reverse col))\n           col           )\n       true\n       false))","problem":27,"user":"507fcfede4b089ade05efbd5"},{"problem":27,"code":"(fn [x]\n  (if (not (seq? x))\n    true\n    (= x (reverse x))))","user":"574ef99ae4b02ea114799250"},{"problem":27,"code":"(fn [v] (true? (= (reduce str (reverse v)) (reduce str v))))","user":"571077e8e4b09c608db70434"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (= (clojure.string/join (reverse x)) x)\n    (= (reverse x) x)))","user":"5c10e7a2e4b01240ff56716b"},{"code":"(fn [x] (= (take (quot (count x) 2) x) (reverse (if (zero? (mod (count x) 2))\n                                                  (drop (quot (count x) 2) x)\n                                                  (drop (inc (quot (count x) 2)) x)\n                                                  )\n                                                )\n           )\n  )","problem":27,"user":"537a620be4b06839e8705e5f"},{"problem":27,"code":"(fn [s]\n  (loop [ss s]\n    (if (<= (count ss) 1)\n      true\n      (if (= (first ss) (last ss))\n        (recur (butlast (rest ss)))\n\t\tfalse)    \n)))","user":"59a0262ee4b0871e7608b82d"},{"problem":27,"code":"(fn [s] (= (reverse s) (map identity s)))","user":"556766c1e4b0c656e3ff1840"},{"code":"#(loop [col % i 0]  \n   (if (> i (/ (count col) 2))\n          true \n          (do \n            (if (= (nth col i) \n                    (nth col (- (count col) i 1))\n                ) \n                (recur col (inc i))\n                false\n            )\n          )\n     )\n)","problem":27,"user":"51bec919e4b013aa0d74b800"},{"problem":27,"code":"(fn [x] (cond\n          (= (count x) 0) true\n          (= (first x) (first (reverse x))) (recur (rest (reverse (rest x)))) \n          :else false))","user":"5374f931e4b06d7f452d9e2d"},{"code":"(fn is-palindrome? [coll]\n  (if (< (count coll) 2)\n    true\n    (and (is-palindrome? (rest (drop-last coll)))\n         (= (first coll) (last coll)))))","problem":27,"user":"5328b1ece4b09d4e7a9b5508"},{"problem":27,"code":"#(= (reduce conj '() %) (reduce conj '() (reduce conj '() %)))","user":"5e790f6be4b085ba37836e01"},{"code":"(fn [n] (if (string? n)  (= n (apply str (reverse n))) (= n (reverse n) ) ) )","problem":27,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"problem":27,"code":"(fn [coll] (= (into () coll) (into [] coll)))","user":"55e206f3e4b050e68259b429"},{"code":"(fn [l]\n    (= (lazy-seq l) (reverse l))\n)","problem":27,"user":"4ea57300535d7eef308072d5"},{"code":"(fn [l] \n  (reduce #(and %1 %2) (map = l (reverse l))))","problem":27,"user":"531b8c27e4b08068f379ed90"},{"problem":27,"code":"(fn [coll] \n     (let [r (if (string? coll)\n               (apply str (reverse coll))\n               (reverse coll))] \n       (= coll r)))","user":"567a3112e4b05957ce8c6196"},{"code":"#(every? true? (map = %1 (reverse %1)))","problem":27,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn [e]\n  (= (reverse e) (reverse (reverse e))))","problem":27,"user":"513cb853e4b0b86ece9f322b"},{"code":"(fn [s]\n  (= (apply str s) (apply str (reverse s))))","problem":27,"user":"4e117dea535d04ed9115e7c9"},{"problem":27,"code":"(fn [x] (if (empty? x) true (if (= (first x) (last x)) (recur (drop-last (drop 1 x))) false)))","user":"545b9dd9e4b01be26fd74654"},{"code":"(fn [x]\n  (loop [x x y (reverse x)]\n    (cond\n      (empty? x) true\n      (= (first x) (first y)) (recur (rest x) (rest y))\n      :else false)))","problem":27,"user":"4dadb891c9a9d6ed3699dc57"},{"problem":27,"code":"(fn [x] (= (vec x) (reverse (vec x)))\n         )","user":"556f443be4b09a3098a5251e"},{"code":"(fn [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))","problem":27,"user":"4ed9354f535d10e5ff6f5301"},{"code":"(fn [x]\n  (= (reverse x)\n     (reverse (reverse x))))","problem":27,"user":"51a4416ae4b0def3c5c5868c"},{"code":"#(= % (if (string? %)\n        (apply str (reverse %))\n        (reverse %)))","problem":27,"user":"4f03857e535dcb61093f6b0d"},{"problem":27,"code":"(fn [x] (loop [check x]\n\t\t\t(if (or (= (rest check ) []) (= check []))\n\t\t\t   true\n\t\t\t(if (= (first (reverse check)) (first check))\n\t\t\t   (recur (rest (reverse (rest check))))\n\t\t\t   false \n\t\t\t)\n\t\t\t)\n\t\t)\n)","user":"51fea7d7e4b0f1313d468a74"},{"problem":27,"code":"(fn [l]\n (loop [l l]\n  (and\n    \n    (= (first l) (last l))\n    (if (not (empty? l))\n      (recur (drop-last (drop 1 l)))\n      true\n    )\n  )\n )\n)","user":"5bc8afb9e4b07a9b28b100c9"},{"problem":27,"code":"(fn [s] (loop [ws s rws (reverse s)]\n           (if (and (seq ws) (seq rws))\n             (if (= (first ws) (first rws))\n               (recur (rest ws) (rest rws))\n               false)\n             true)))","user":"4fffa422e4b0678c553fc404"},{"code":"(fn palindrom-detector [x]\n  (let [sequ (sequence x)]\n    (= sequ (reverse x))))","problem":27,"user":"5202c9b6e4b030ee0c5b2701"},{"problem":27,"code":"(fn\n  [s]\n  (loop [s s]\n    (if (<= (count s) 1)\n      true\n      (if (not= (first s) (last s))\n        false\n        (recur (drop-last (next s)))))))","user":"59c4d93fe4b0a024fb6ae507"},{"code":"(fn f[alist]\r\n     (if (or (empty? alist) (empty? (rest alist)))\r\n\t       true\r\n\t       (if (not (= (first alist) (last alist)))\r\n\t\t   false\r\n\t\t   (f (rest (butlast alist))))))","problem":27,"user":"4e53bf5e535d8a8b8723a275"},{"problem":27,"code":"(fn palindrome?\n  [s]\n  (loop [s (seq s)]\n    (cond\n     (empty? s) true\n\t (= (count s) 1) true\n     (= (first s) (last s)) (recur (butlast (rest s)))\n     :else false)))","user":"5eb22708e4b00a66d4a95204"},{"code":"(fn pali [x] \n  \t(if (empty? x)\n      \ttrue\n\t\t(every? true? [(= (first x) (last x)) (pali (butlast (rest x)) )])\n      )\n  )","problem":27,"user":"522d3a16e4b0e26240291d50"},{"code":"#(let [x (seq %)]\n   (= x\n      (reverse x)))","problem":27,"user":"5256627ce4b0541d1855ba1a"},{"problem":27,"code":"(fn palindrome? [word]  (= (reverse word) (into [] word)))","user":"5513dec7e4b055c2f668d4cd"},{"problem":27,"code":"(fn [x]\n    (if (string? x)\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)   \n    ))","user":"53959edde4b0b51d73faaed8"},{"problem":27,"code":"(fn [x]\n  (if (= (class x) java.lang.String)\n  (= (seq x) (reverse x))\n  (= x (reverse x))\n  )\n )","user":"57f81045e4b0d3187e90090f"},{"problem":27,"code":"(fn palindrome? \n  [lst]\n  (if (string? lst) (= lst \n                       (apply str \n                              (reverse lst)))\n      (= lst (reverse lst))))","user":"5a99b861e4b0d174b936c7ad"},{"problem":27,"code":"(fn Palindromo [x] (if (= (into () (seq x)) (seq x)) true false))","user":"5b69baf9e4b0c6492753e78f"},{"code":"(fn ispal [x]\n  (or (<= (count x) 1)\n      (and (= (first x) (last x))\n           (ispal (rest (butlast x))))))","problem":27,"user":"4f82f1b9e4b033992c121c0f"},{"problem":27,"code":"(fn palindrome\n  [l]\n  (if (<= (count l) 1)\n    true\n    (if (= (first l) (last l))\n      (palindrome (rest(reverse(rest l))))\n      false)))","user":"59390a35e4b02506e01a29f3"},{"code":"(fn palendrome? [word]\n (= (reverse word) (reverse (reverse word))))","problem":27,"user":"526f0a68e4b03e8d9a4a7348"},{"problem":27,"code":"#(= ( seq %) (reverse %))","user":"54f0433ce4b024c67c0cf893"},{"problem":27,"code":"(fn [coll] (if (= (seq coll) (reverse coll)) (= 1 1) (= 1 2)))","user":"593ab583e4b069cdc2982b57"},{"problem":27,"code":"(fn [s] (loop\n          [forward s\n           backward (reverse s)]\n         (if (empty? forward)\n             true\n             (if (= (first forward) (first backward))\n                 (recur (drop 1 forward) (drop 1 backward))\n                 false\n              )\n         ))\n)","user":"5a04e923e4b01bb0ae8afda9"},{"code":"(fn [s] (-> (seq s) (= (reverse s))))","problem":27,"user":"4eca7a87535d6d7199dd3705"},{"problem":27,"code":"(fn [s]\n  (= (into [] s) (reverse s))\n)","user":"56195e57e4b053970a773af6"},{"problem":27,"code":"(fn palindrome\n  [coll]\n  (if (= (reverse coll) (seq coll)) true false))","user":"5dcbe1d7e4b02b31cc3da3bf"},{"problem":27,"code":"(fn [x]\n(let [\n  handle-string (comp (partial apply str) reverse)    \n  handle-else reverse\n  ](= x (if (string? x) (handle-string x) (handle-else x))))\n    \n)","user":"5f3ca097e4b004f08c61c546"},{"code":"(fn ([arg] (= (reverse arg) (seq arg))))","problem":27,"user":"4f7d065ce4b06e829148e1b9"},{"code":"#(loop [x %]\n  (if (= (first x) (last x))\n    (if (empty? x)\n      true\n      (recur (rest (reverse (rest x)))))\n    false))","problem":27,"user":"4f031639535dcb61093f6a59"},{"code":"#(if (string? %) (= (reverse %) (map char %)) (= (reverse %) %))","problem":27,"user":"4fe88cc1e4b07c9f6fd12c42"},{"problem":27,"code":"(fn pali [coll]\n  (if (<= (count coll) 1) true\n      (if (= (first coll) (last coll)) (recur (rest (drop-last coll)))\n        false)))","user":"5475d755e4b0c51c1f4d72a0"},{"problem":27,"code":"#(reduce (fn [x y] (and x y)) (map (fn [a b] (= a b)) % (reverse %)))","user":"5a5d693ce4b0512ff01cd923"},{"code":"(fn pal [l] (\n  if\n  (< (count l) 2) \n  true \n  (\n    if \n    (= (first l) (last l))\n    (pal (butlast (rest l)))\n    false\n  )\n))","problem":27,"user":"505885c4e4b06522596eba7b"},{"problem":27,"code":"(fn [x]\n  (= x (if (string? x)\n    (apply str (reverse x))\n    (reverse x))))","user":"57344edbe4b0cd1946bd1008"},{"problem":27,"code":"#(cond (empty? %) true\n       :else (and (= (first %) (last %)) (recur (butlast (rest %)))))","user":"58bef28be4b021aa9917ecca"},{"problem":27,"code":"(fn [x]\n  (if (= (reverse (vec x)) (vec x) )\n    true\n    false    \n    )  \n  )","user":"556cd549e4b09a3098a52503"},{"problem":27,"code":"(fn [number]\n  (= (seq number) (reverse number)))","user":"4ee897fe535d93acb0a66883"},{"code":"(fn [input]\n  (= input\n    ((fn [input]\n  ((comp\n     (fn [aSeq]\n       (if (string? input)\n         (apply str aSeq)\n         aSeq\n         ))\n     (fn [input]\n       (reverse (seq input))))\n    input))\n      input)))","problem":27,"user":"5379ed48e4b06839e8705e5a"},{"problem":27,"code":"(fn [sequ] (let [mvec (vec sequ)]\n              (= mvec (rseq mvec))))","user":"5cfabf53e4b0cc9c91588148"},{"problem":27,"code":"#(loop [s %\n        acc true]\n   (if (empty? s)\n     acc\n     (recur (rest (butlast s)) (and acc (= (first s) (last s))))))","user":"5765c7bbe4b0a07e8fc18096"},{"code":"(fn [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))","problem":27,"user":"4ea68edb535d7eef308072e6"},{"code":"#(= % (if (string? %)\n         (clojure.string/join (reverse %))\n         (reverse %)))","problem":27,"user":"531bfb69e4b08068f379ed97"},{"problem":27,"code":"(fn [x]\n  (if (instance? String x)\n    (= x (apply str (reverse x)))\n    (= (reverse x) x)\n  )\n)","user":"5822b578e4b04b46fc4b0fa4"},{"problem":27,"code":"(fn palindrome? [coll]\n  (= (reverse (seq coll)) (seq coll)))","user":"57131dfbe4b07c98581c3a98"},{"problem":27,"code":"#(loop [xs %] (if (empty? xs) true (if (= (first xs) (last xs)) (recur (rest (drop-last xs))) false)))","user":"58b989dbe4b0888cdc949ccd"},{"problem":27,"code":"(fn [x] \n  (if (< (count x) 2) \n    true \n    (if (= (first x) (last x))\n       (recur (butlast (rest x)))\n       false\n    )\n  )\n)","user":"55b7df63e4b01b9910ae29b3"},{"code":"(fn palindrome? [s] (= (seq s) (reverse s)))","problem":27,"user":"51ba59e4e4b0fe3ecfb4642d"},{"code":"#(= (reverse (seq %)) (seq %))","problem":27,"user":"4e218464535d04ed9115e816"},{"code":"(fn [x] \n  (= \n    (seq x) \n    (reverse x)))","problem":27,"user":"50baa66be4b03e68e4411c94"},{"problem":27,"code":"(fn [coll]\n   (let [reversed (reduce (fn [acc coll]\n                            (cons coll acc))\n                          [] coll)]\n     (println reversed)\n     (if (= (type coll) java.lang.String)\n       (= (clojure.string/join \"\" reversed) coll)\n       (= reversed coll))))","user":"5fb544f6e4b08cb800c85b4e"},{"problem":27,"code":"(fn palindrome?\n  ([coll]\n   (cond\n     (nil? coll) true\n     (empty? coll) true\n     (= (count coll) 1) true\n     :else (palindrome? coll (reverse coll)))\n   )\n  ([coll revcoll]\n   (if (< (count coll) 2)\n     (palindrome? coll)\n     (if (= (first coll) (first revcoll))\n       (recur (rest coll) (rest revcoll))\n       false))\n   )\n )","user":"5c92105ce4b048ec896c59f7"},{"problem":27,"code":"(fn [x]\n  (loop [z x\n         y (reverse x)]\n    (if-not (= z '())\n      (if (= (first z) (first y))\n        (recur (rest z) (rest y))\n        false)\n      true)\n    )\n  )","user":"5e265173e4b05b4b01516175"},{"code":"#(loop [coll %] (cond (empty? coll) true (= 1 (count coll)) true (not= (first coll) (last coll)) false :else (recur (rest (butlast coll)) ) ) )","problem":27,"user":"4fea2de5e4b0140c20fb9bfe"},{"problem":27,"code":"(fn [collection]\n\n  (loop [left 0 right (- (count collection) 1)]\n\n    (if (< right left)\n\n      true\n\n      (if (= (nth collection left) (nth collection right))\n\n        (recur (inc left) (dec right))\n\n        false))))","user":"59c5093ce4b0a024fb6ae50c"},{"problem":27,"code":"#(if (= (reverse (vec %)) (vec %))\n    true\n    false)","user":"5b780a8ce4b047b03b2036f6"},{"problem":27,"code":"(fn [s] \n\t(loop [f true h 0 t (dec (count s))] \n\t\t(cond \n\t\t\t(neg? t) f \n\t\t\t(false? f) f\n\t\t\t:else (recur (= (nth s h) (nth s t)) (inc h) (dec t)))))","user":"56bdda49e4b0f26550335977"},{"problem":27,"code":"(fn [coll] \n  (= (reverse coll) \n     (reduce #(conj %1 %2) [] coll)))","user":"4fc77f5ae4b0ee37620e1821"},{"code":"(fn [coll]\r\n  (cond (= 0 (count coll)) false\r\n\t      (= 1 (count coll)) true\r\n\t      (= 2 (count coll)) (= (first coll) (last coll))\r\n\t      :else\r\n\t          (and (= (first coll) (last coll))\r\n\t\t       (recur (rest (drop-last 1 coll))))))","problem":27,"user":"4e821ca5535db62dc21a62c2"},{"code":"(fn [xs]\n  (let [r (reverse xs)]\n    (= r\n       (reverse r))))","problem":27,"user":"4ee63d8d535d93acb0a66859"},{"code":"(fn [x] (let [y (map str x)] (= y (reverse y))))","problem":27,"user":"4f15de56535d64f603146448"},{"problem":27,"code":"(fn palindrome [x]\n\t\t((fn [p a b]\n\t\t\t(cond (= a b) true\n\t\t\t\t  (> a b) true\n\t\t\t\t  (not (= (nth p a) (nth p b))) false\n\t\t\t\t  :else (recur p (+ a 1) (- b 1)))) x 0 (- (count x) 1)))","user":"530ec8d4e4b08068f379ecc2"},{"problem":27,"code":"(fn pal [coll]\n  (if (empty? coll)\n    true\n\t(and (= (first coll) (last coll)) (pal (butlast (rest coll))))))","user":"5da9662ce4b000c986472c30"},{"problem":27,"code":"(fn ispalidrome? [l]\n  (= (apply str (reverse l)) (apply str l))\n)","user":"54c82b27e4b045293a27f645"},{"problem":27,"code":"(fn\n   [coll]\n   (= (reverse coll) (seq coll)))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":27,"code":"(fn [x] (= (reverse (apply list x)) (apply list x)))","user":"53f4c3d6e4b0db01ade6f9c5"},{"code":"(fn [s]\n  (let [rev (if (string? s) (apply str (reverse s)) (reverse s))]\n    (= s rev)))","problem":27,"user":"526f9715e4b03e8d9a4a7372"},{"code":"(fn [coll] \n  (if (= (first coll) (last coll))\n    (if (empty? coll) \n      true \n      (recur (rest (reverse (rest coll)))))\n    false))","problem":27,"user":"5367ca98e4b0243289761e86"},{"problem":27,"code":"(fn imp [l]\n  (let [len (count l)]\n   (cond\n    (== len 0) true\n    (== len 1) true\n    (not= (first l) (last l)) false\n    :else (imp (take (- len 2) (drop 1 l))))))","user":"5dbbf77ce4b09f47823971ab"},{"problem":27,"code":"(fn [coll]\n  (= (reverse coll)\n     (reverse (reverse coll))))","user":"5486e317e4b0e286459a11c0"},{"problem":27,"code":"(fn [seq]\n  (if (= 0 (count seq))\n    true\n    (if (= (take 1 seq) (take-last 1 seq))\n      (recur (->> seq\n                 (drop 1)\n                 (drop-last 1)))\n      false)))","user":"5ef381a3e4b07c55ae4a053c"},{"problem":27,"code":"(fn pal [lista]\n  (= (seq lista) (reverse lista)))","user":"540271aee4b0df28a13c62d0"},{"code":"#(= (vec (seq %)) (rseq (vec (seq %))))","problem":27,"user":"50403ae1e4b0ff5d2cc40dae"},{"problem":27,"code":"(fn pal [seq] \n  (if (empty? seq)\n    true\n    (if (= (first seq) (last seq))\n      (recur (drop-last 1 (rest seq))\n         )false)))","user":"5713c575e4b07c98581c3aab"},{"problem":27,"code":"(fn [x]\n(if (empty? x) \n  true\n  (and (= (first x) (last x)) (recur (rest (drop-last x))) ))\n  )","user":"5c6f0755e4b0fca0c162275d"},{"code":"#(loop [l %1] (cond (empty? l) true (= (last l) (first l)) (recur (drop-last (rest l))) :else false))","problem":27,"user":"4f515bd3e4b03ad3f0c10d1f"},{"problem":27,"code":"(fn palindrome? [ls] (= (take (int (/ (count ls) 2)) ls) (reverse (drop (/ (count ls) 2) ls))))","user":"5716540fe4b07c98581c3af3"},{"problem":27,"code":"(fn isPalindrome \n  [string]\n  (if (and (= (first string) (last string)))\n    (if (<= (count string) 1)\n      true\n      (isPalindrome (rest (drop-last string))))\n    false))","user":"55664950e4b0c656e3ff1832"},{"problem":27,"code":"#(every? true? (map\n                (fn [a b] (= a b))\n                %\n                (reverse %)))","user":"5e87194ce4b09a7a73c8bbe4"},{"problem":27,"code":"#(= (reverse (partition 1 %)) (partition 1 %))","user":"571172ece4b09c608db70446"},{"problem":27,"code":"(fn [s] (let [c (count s)] (loop [n 0] (if (> n (int (/ c 2))) true (if (= (nth s n) (nth s (- c n 1))) (recur (+ n 1)) false)))))","user":"59468de7e4b07ddc2dafad88"},{"code":"(fn [col]\n  (cond (< (count col) 2)          true\n        (= (first col) (last col)) (recur (rest (butlast col)))\n        :default                   false))","problem":27,"user":"5336a339e4b0e30313ee6c7d"},{"code":"(fn x [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map \n        (fn [y] (= (nth coll y) (nth rc y))) (range (/ (dec n) 2))))))","problem":27,"user":"4e80d1c8535db62dc21a62b6"},{"code":"(fn [a]\n  (= (reverse a) (seq a)))","problem":27,"user":"5054c853e4b0b1b9d1860eb3"},{"code":"(fn [se]\n  (if (string? se)\n    (= se (apply str (reverse se)))\n    (= se (reverse se))))","problem":27,"user":"509fa9b5e4b08df8156e9e3f"},{"problem":27,"code":"(fn[x] (= ( reverse x) (seq x)))","user":"53bf9cfbe4b0c98a41f5cca4"},{"problem":27,"code":"#(if (= (class %) java.lang.String) (= % (apply str (reverse %)))\n   (= % (reverse %)))","user":"56cccd99e4b0ea9b8538f743"},{"code":"(fn [s]\n\t(reduce #(and %1 %2) (map = s (reverse s))))","problem":27,"user":"51eff50fe4b0249c592fbdf0"},{"problem":27,"code":"(fn [x] (= (reverse x) (concat x)))","user":"57eb7213e4b0bfb2137f5b61"},{"code":"(fn __ [x]\r\n  (= (seq x) (reverse (seq x))))","problem":27,"user":"4fe9b372e4b0547ebccb246b"},{"problem":27,"code":"(fn [coll]\n  (let [len\t\t(int (/ (count coll) 2))\n        begin \t(take len coll)\n        end \t(take len (reverse coll))]\n        (= begin end)))","user":"5eb1a80ce4b00a66d4a951ff"},{"problem":27,"code":"(fn palin [s]\n  (= (apply str s) (apply str (reverse s))))","user":"545801f6e4b01be26fd74615"},{"problem":27,"code":"(fn [s] (if (instance? String s)\n            (= s (clojure.string/reverse s))\n            (= s (reverse s))))","user":"5578c67fe4b05c286339e08d"},{"problem":27,"code":"(fn [s] (= (take (Math/floor (/ (count s) 2)) (reverse s))\n            (take (Math/floor (/ (count s) 2)) s) ))","user":"593bccfae4b069cdc2982b7f"},{"problem":27,"code":"(fn [s]\n  (let [len (count s)]\n    (= (take len s) (reverse (take-last len s)))))","user":"570459a9e4b0b0fb43fd0662"},{"code":"(fn [xs] (= (reverse (reverse xs)) (reverse xs)))","problem":27,"user":"511a0374e4b06c8af011181a"},{"problem":27,"code":"#(if (= java.lang.String (type %)) (= % (apply str (into '() %))) (= % (into '() %)))","user":"55c3f19de4b0e31453f64991"},{"problem":27,"code":"#(if (or (= (count %) 1) (= (count %) 0)) \n   true \n   (if (not= (first %) (last %)) \n   \t\tfalse\n        (recur (rest (drop-last %)))))","user":"56e7ebb4e4b02e7e935eb6e1"},{"problem":27,"code":"(fn [coll] (= (seq coll) (loop [coll coll rev nil] (if (empty? coll) rev (recur (rest coll) (conj rev (first coll)))))))","user":"563ddefee4b0bfe05bf11857"},{"problem":27,"code":"(fn pal [x] (= (seq (reverse x)) (seq x)))","user":"563b559ee4b0bfe05bf1180d"},{"problem":27,"code":"(fn f [xs]\n\t\t(if (empty? xs) \n          true\n           (let [rxs (reverse xs)]\n             (if (= (first xs) (first rxs))\n                   (f (butlast (rest xs)))\n                   false))))","user":"55e3e7a8e4b050e68259b44a"},{"code":"(fn f [x]\n\n(if (empty? x)\ntrue\n\n(if (= (first x) (last x) )\n    (f (drop 1 (butlast x)))\n    false\n)\n)\n\n)","problem":27,"user":"4fc7b079e4b0ee37620e1827"},{"problem":27,"code":"#(loop [s (vec %)]\n   (if (= [] s)\n     true\n   \t(if-not (= (first s) (last s))\n     \tfalse\n     \t(recur (rest (butlast s))))))","user":"560ac5cae4b05f002753df09"},{"problem":27,"code":"#(let [a (vec %) b (vec (reverse %))] (= a b))","user":"544ef83de4b0e3978000698d"},{"code":"#(loop [s %]\n  (cond\n    (nil? s) true\n    (not= (first s) (last s)) false\n    :else (recur (next (butlast s)))\n  )\n)","problem":27,"user":"51f09f3de4b0274c496158d7"},{"code":"(fn [input] (= (sequence input) (reverse input)))","problem":27,"user":"4dddf817535d08e6dec9fdd3"},{"problem":27,"code":"(fn [args]\n    (loop [s (seq args) acc false]\n       (if (<= (.size s) 1)\n            acc\n          (recur (drop-last (rest s)) (if (= (first s) (last s)) true false))\n\n    ))\n  )","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn isPal\n  [x]\n  (if (or (= 1 (count x)) (empty? x))\n      true\n      (and (= (first x) (last x)) (isPal (rest (take (dec (count x)) x))))))","problem":27,"user":"53736f65e4b06d7f452d9e0f"},{"code":"(fn [-array]\n  (not (= (count (distinct -array)) (count -array))))","problem":27,"user":"4ef2d6c5535dced4c769f222"},{"code":"(fn palindrome [lst]\n  (let [first (first lst)\n        last (last lst)\n        tmp (reverse (rest (reverse (rest lst))))]\n    (if (not= first last) false\n      (if (= tmp '()) true (recur tmp)))))","problem":27,"user":"4edfb618535d10e5ff6f5343"},{"problem":27,"code":"(fn f [x] (if (empty? x) true (and (= (first x) (first (reverse x))) (f (reverse (rest (reverse (rest x))))))))","user":"5826ed1fe4b051871117bf0e"},{"code":"(fn [n]\n  (loop [n n]\n    (if (or (empty? n) (= 1 (count n)))\n      true\n      (if (not (= (first n) (last n)))\n        false\n        (recur (rest (butlast n)))))))","problem":27,"user":"51547920e4b084ca81ee2e1c"},{"problem":27,"code":"(fn [xs]\n\t(cond\n\t\t(empty? xs) true\n\t\t(not= (first xs) (last xs)) false\n\t\t:else (recur (rest (drop-last xs)))))","user":"5954108ae4b066ee0a44aef4"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (= (clojure.string/reverse x) x)\n    (= (reverse x) x)))","user":"55d4b995e4b0e31453f64a7c"},{"problem":27,"code":"(fn [s] (if (string? s) true (= s (reverse s))))","user":"595e20e2e4b066ee0a44b037"},{"code":"(fn pal-det [pal]\n \t(if (> (count pal) 1)\n      (if (= (first pal) (last pal))\n        (pal-det (rest (butlast pal)))\n      false)\n      true)\n )","problem":27,"user":"533e7f63e4b085b17e897d8e"},{"code":"(fn [x] (= (reverse (vec x)) (vec x)))","problem":27,"user":"4e8b73e4535d65386fec2120"},{"code":"(fn [xs] (loop[lst xs  rev (reverse xs)]\n           (if (zero? (count lst)) true \t\n             (if(= (first lst) (first rev)) (recur (rest lst)(rest rev)) false)\n           )\n          )\n )","problem":27,"user":"51558136e4b06c5f6a1490a8"},{"problem":27,"code":"#(= (seq %) (reverse (seq %)))\n#_(fn [x] (let \n [n (Math/floor (/ (count x) 2))\n  y (take n x)\n  z (take n (reverse x))] \n (every? true? (map = y z))))","user":"55d8eed3e4b0e31453f64ac3"},{"problem":27,"code":"#(loop [l 0 r (dec (count %))] (if (> r l) (= (nth % r) (nth % l))))","user":"5dd44256e4b0948ae9d9ad69"},{"problem":27,"code":"(fn pal [s]\n  (= (seq s) (reverse s)))","user":"5d9515a9e4b0d3f9b434ad2c"},{"problem":27,"code":"(fn [x] \n  \n  (= (seq x) (reverse x)))","user":"5ecf55dae4b016b56eae05a8"},{"code":"#(= (into () (seq %)) (seq %))","problem":27,"user":"50c5546de4b0951b67b28c18"},{"problem":27,"code":"(fn [col] (let [asList (into () col)\n                              reverted (reverse asList)]\n                          (= asList reverted)))","user":"554bc64ae4b0a04f79299598"},{"problem":27,"code":"(fn\n  [x]\n  (cond\n   (string? x) (= x (apply str (reverse x)))\n   :else (= x (reverse x))))","user":"5cf938a5e4b0b71b1d808a90"},{"problem":27,"code":"(fn palindrome? [x]\n  (if (= (class x) java.lang.String)\n    (= (clojure.string/reverse x) x)\n    (= (reverse x) x)))","user":"5619a388e4b053970a773afc"},{"problem":27,"code":"(fn [lst]\n   (= (reverse (take (int (/ (count lst) 2)) lst)) (take-last (int (/ (count lst) 2)) lst))\n  )","user":"543b7456e4b032a45b86932f"},{"problem":27,"code":"(fn [x] (let [n (int (/ (count x) 2))]\n           (= (take n x) (reverse (take-last n x)))))","user":"52d6d490e4b09f7907dd1369"},{"code":"(fn palindrome? [seq]\n  (let [pc (into [] seq)] \n    (= pc (reverse pc))))","problem":27,"user":"4ec21058535dfed6da9c6dba"},{"code":"(fn foo [s] (if (empty? s) true (if (= (first s) (last s)) (foo (take (- (count s) 2) (rest s))) false)))","problem":27,"user":"50f9c7fde4b0e7c80cb15a52"},{"code":"#(loop [s %]\n   (if (<= (count s) 1)\n     true\n     (if (not= (first s) (last s))\n       false\n       (recur (-> s rest butlast))\n       )\n     )\n   )","problem":27,"user":"51284226e4b03a34742b4308"},{"problem":27,"code":"(fn [param]\n  (let [input (seq param)]\n    (if (= (seq input) (into '() input))\n      true\n      false)))","user":"5fdba25ae4b05ac5b16ea135"},{"problem":27,"code":"(fn [coll]\n  (let [original-coll (into () coll)\n        reversed-coll (reverse (into () coll))]\n    (if (= original-coll reversed-coll)\n      true\n      false)))","user":"54bd6cb2e4b0ed20f4ff6ede"},{"code":"(fn [xs]\n    (let [xs (if (or (vector? xs) (list? xs))\n               xs\n               (list xs))]\n      (= xs (reverse xs))))","problem":27,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":27,"code":"(fn [s]\n  (loop [forwards s\n         backwards (reverse s)]\n    (if (and (empty? forwards) (empty? backwards))\n      true\n      (if (= (first forwards) (first backwards))\n        (recur (rest forwards) (rest backwards))\n        false))))","user":"55d4dddde4b0e31453f64a7f"},{"code":"(fn [s]\r\n  (= (seq s) (reverse s)))","problem":27,"user":"502f4c89e4b0842eb223d8b9"},{"problem":27,"code":"#(if (string? %) (= (seq %) (reverse (seq %))) (= % (reverse  %)))","user":"5576e78de4b05c286339e075"},{"problem":27,"code":"(fn palindrome\n  ([x] (if (not= (last x) (first x))\n           false\n           (if (empty? x)\n                  true (palindrome (rest (drop-last x) ) )\n                  )\n\n                )\n         )\n    )","user":"56f18d0ce4b04a395b9a0496"},{"code":"#(= (reverse %) (seq %))","problem":27,"user":"4dd023dd535d5973398f92ad"},{"code":"#(=(reverse %)(vec %))","problem":27,"user":"50ee145de4b06330c1f87c53"},{"problem":27,"code":"#(= (seq %) (reverse (seq %))) ;Not so good: (reverse (seq x)) is the same as (reverse x)","user":"54380631e4b032a45b86930f"},{"problem":27,"code":"(fn [s] \n  (cond\n   (<= (count s) 1) true\n   (= (first s) (last s)) (recur (rest (butlast s)))\n   :else false)\n )","user":"5d5e0259e4b0c9e5857d4fef"},{"code":"(fn [xs]\n  (cond (empty? xs) true\n        (= (first xs) (last xs)) (recur (-> xs rest drop-last))\n        :else false))","problem":27,"user":"5063b9a0e4b075d771da6f9d"},{"code":"(fn [s]\r\n   (let [r (reverse s)]\r\n     (if (= (count (filter true? (map = s r))) (count s))\r\n       true\r\n       false)))","problem":27,"user":"50868795e4b004985b776e5e"},{"problem":27,"code":"#(= % (if (string? %) \n        (apply str (reverse %))\n        (reverse %)\n      )\n    )","user":"542fa0dde4b0dad94371f2d2"},{"problem":27,"code":"(fn [coll] (if (string? coll) (= (apply str (reverse coll)) coll) (= (reverse coll) coll)))","user":"5c0ebca5e4b01240ff567147"},{"problem":27,"code":"#( =  (into () %1)  (reverse( reverse %1)))","user":"57a6f585e4b0a9660795620e"},{"code":"(fn [x]\n  (let [len (quot (count x) 2)]\n    (= (take len x) (take len (reverse x)))))","problem":27,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":27,"code":"(fn palidromer [s] (= (apply str s) (apply str (reverse s ))))","user":"59346d29e4b072a2710fd077"},{"problem":27,"code":"(fn foob [x]\n\t(if (< (count x) 2)\n\t\ttrue\n\t\t(if (= (first x) (last x))\n\t\t\t(foob (butlast (rest x)))\n\t\t\tfalse)\n\t)\n)","user":"5cc9b7dfe4b0ccb061962864"},{"problem":27,"code":"(fn [coll]\n  (every? #(apply = %) (map vector coll (reverse coll))))","user":"53b7c21ae4b047364c0444d4"},{"problem":27,"code":"(fn [coll]\n  (let [n (quot (inc (count coll)) 2)]\n    (= (take n coll)\n       (take n (reverse coll)))))","user":"575cbe44e4b02ea114799374"},{"problem":27,"code":"(fn is-palindrome? [coll]\n  (= (into '() coll) (reverse (into '() coll))))","user":"5b478997e4b02d533a91bc71"},{"problem":27,"code":"#(if (string? %) (= (clojure.string/reverse %) %) (= (reverse %) %) )","user":"54c6619ae4b045293a27f62b"},{"problem":27,"code":"#(loop [items %\n        rev-items (reverse %)\n        pal true]\n   (if (empty? items)\n     pal\n     (recur (rest items)\n            (rest rev-items)\n            (and pal (= (first items)\n                        (first rev-items))) ) ))","user":"5dcc4b4ae4b02b31cc3da3c6"},{"problem":27,"code":"(fn [xs]\n    (let [rev (reverse xs)\n          rev2 (if (string? xs) (apply str rev) rev)]\n        (= xs rev2)))","user":"56fd058be4b08d47c97781a1"},{"problem":27,"code":"(fn [col]\n    (loop [icol col]     \n      (let [f (first icol)\n            l (last icol)\n            mid (rest (butlast icol))]\n        (if (not= f l)\n          false\n          (if (empty? mid)\n            true\n            (recur mid))))))","user":"554a75c9e4b0a04f79299575"},{"problem":27,"code":"(fn [in]\n  (let [xs (seq in)\n        len (count xs)\n        first-half (take (quot len 2) xs)\n        second-half (drop (quot (inc len) 2) xs)]\n    (= first-half (reverse second-half))))","user":"5b1c16e1e4b03cfeda66ecf2"},{"code":"#((fn f [xs]\n    (if (empty? xs)\n    \ttrue\n    \t(if (not= (first xs) (last xs))\n        \tfalse\n        \t(f (rest (drop-last 1 xs)))))) %)","problem":27,"user":"517bf28de4b07ef0e56148d5"},{"problem":27,"code":"(fn b [a]\n (if (string? a)\n(= (apply str (reverse a)) a)\n(= (reverse a) a)))","user":"59636ec9e4b066ee0a44b0c8"},{"code":"(fn pali? [seq] (cond (empty? seq) true (and (= (first seq) (last seq)) (pali? (rest (butlast seq)))) true :else false))","problem":27,"user":"4eb83593535dd6025b394d1b"},{"problem":27,"code":"(fn [s]\n  (= (if (string? s) (seq s) s) ((fn [t]\n         (reduce conj '() t)) s)))","user":"5aba04dce4b073f17744269e"},{"problem":27,"code":"(fn [xs] \n  (let [len (count xs),\n      len2 (quot len 2),\n      len3 (- len len2)]\n  (= \n   (take len2 xs)\n   (take len2\n         (reverse (drop len2 xs))))))","user":"54f904c2e4b01ecee9d88832"},{"code":"#(= (nth % 0) (last %))","problem":27,"user":"502d3912e4b0d96a44ab2030"},{"code":"#(let [coll (seq %)]\n   (= coll (reverse coll)))","problem":27,"user":"51b38769e4b026427ecf067f"},{"code":"(fn palindrome [col]\n  (if (empty? col) true\n    (and (= (first col) (last col))\n         (palindrome (rest (take (dec (count col)) col))))))","problem":27,"user":"4f5f2665e4b0030a34fb2b5d"},{"problem":27,"code":"(fn is-pal\n  [s]\n  (=\n   (reduce\n    (fn [acc e] (conj acc e))\n    (list)\n    s)\n   (seq s)))","user":"59a06e55e4b0871e7608b835"},{"problem":27,"code":"(fn \n  [palindrome?]\n  (let [p (seq palindrome?)]\n        (->> p (reduce #(cons %2 %1) []) (= p))))","user":"5761513fe4b0994c1922fb87"},{"problem":27,"code":"(fn pal [s] (if (>= 1 (count s)) true (and (= (first s) (last s)) (pal (butlast (rest s))))))","user":"5466199ce4b01be26fd746e2"},{"problem":27,"code":"(fn palindrome\n  [items]\n  (cond\n    (< (count items) 2) true\n    (not= (first items) (last items)) false\n    :else (recur (butlast (rest items)))))","user":"57ce6090e4b0c746388ab8ab"},{"problem":27,"code":"(fn [coll] (= (into () coll)  (seq coll)))","user":"5c97821be4b048ec896c5a70"},{"code":"(fn [[x & xs]]\n  (cond \n    (nil? xs) true\n    (= x (last xs)) (recur (butlast xs))\n    :default false))","problem":27,"user":"531619c1e4b08068f379ed3d"},{"problem":27,"code":"#(= (seq %) (reverse( seq % ) ) )","user":"5ed42731e4b016b56eae05c8"},{"problem":27,"code":"#(= % \n    (if (instance? String %)\n        (apply str (reverse  %))\n        (reverse %)\n      ))","user":"5e453725e4b01d43a70e8e93"},{"problem":27,"code":"(fn [s] (= (reverse s) (-> s reverse reverse)))","user":"597bac8be4b02382a38ad202"},{"problem":27,"code":"(fn check [x] \n  (if (empty? x) \n    true \n\t(and (= (last x) (first x)) (check (rest (reverse (rest x)))) )))","user":"5ab1665de4b073f1774425c0"},{"problem":27,"code":"#(= % (if (string? %) (reduce str (reverse %)) (reverse %)))","user":"59902fede4b0fcebec4de86d"},{"problem":27,"code":"#(= 0 (compare \n  (apply str %)\n  (apply str (reverse %))))","user":"53e73fe3e4b036ad0777e478"},{"code":"(fn palin? [e] (= e\n  (if (string? e) (clojure.string/join (reverse e))\n    (reverse e))))","problem":27,"user":"4e356d2b535deb9a81d77f2d"},{"problem":27,"code":"(fn [x] (= (concat x) (reverse x)))","user":"57c3df67e4b05aa3c4741cc5"},{"problem":27,"code":"(fn [word]\n  (= (apply str word)\n     (apply str (reverse word))))","user":"59e8a952e4b0249b72820733"},{"code":"(fn [l]\n  (loop [in l v true]\n    (if (or (= 1 (count in)) (empty? in))\n      v\n      (if-not (true?  v)\n  v\n\t(if-not (= (last in) (first in))\n\t  false\n\t  (recur (drop-last (rest in)) true)\n    )\n\t)\n      )\n    )\n  )","problem":27,"user":"4f63777be4b0defedf855fe4"},{"problem":27,"code":"(fn [x] (= ((comp reverse seq) x) (seq x)))","user":"551b87dfe4b07993ea3788d2"},{"code":"(fn [n]\n    (if (<= (count n) 1)\n      true\n      (and (= (first n) (last n))\n           (recur (butlast (rest n))))))","problem":27,"user":"50aedb8ce4b0a40c9cfb08d4"},{"code":"(fn palindrome?\n  [xs]\n  (let [len           (count xs)\n        takers        (int (/ len 2))\n        droppers      (+ takers (mod len 2))]\n    #_(println \"take\" takers (take takers xs) \"drop\" droppers (drop droppers xs))\n    (= (take takers xs) (reverse (drop droppers xs)))))","problem":27,"user":"4f6bab49e4b07046d9f4efb1"},{"code":"(fn [coll]\n  (let [pivot (quot (count coll) 2)\n        ]\n    (= (take pivot coll)\n       (reverse (take-last pivot coll))\n       )\n    )\n  )","problem":27,"user":"53162640e4b08068f379ed40"},{"code":"#(if (= (reverse (vec %)) (vec %)) true false)","problem":27,"user":"50c0fac8e4b096f585049c34"},{"problem":27,"code":"#(or (= % (reverse %)) (= % (clojure.string/join (reverse %))))","user":"5665ef78e4b0e91d5f5c5664"},{"code":"(fn palindrome? [s]\n  (if (<= (count s) 1)\n    true\n    (and (= (first s) (last s))\n\t       (palindrome? (take (- (count s) 2) (drop 1 s))))))","problem":27,"user":"50aab057e4b056ee0193586b"},{"problem":27,"code":"#(= (sequence %1) (reverse %1))","user":"59fa1b05e4b0ca45a743a356"},{"code":"(fn pally [x] (\n  = (seq x)\n  (reverse (seq x))\n))","problem":27,"user":"50202d1ae4b0cb6ebc0a42f3"},{"problem":27,"code":"#(=  (reverse %) (seq %))","user":"53ef235de4b0d648e757f4d4"},{"code":"(fn[a-seq]\n  (every? (fn[[a b]] (= a b)) ((fn[ss] (zipmap ss (reverse ss))) a-seq)))","problem":27,"user":"4e58bcd4535d8a8b8723a296"},{"problem":27,"code":"(fn [xs]\n  (loop [acc [] ys (seq xs)]\n    (if (empty? ys)\n      (= acc (seq xs))\n      (recur (conj acc (last ys)) (drop-last ys)))\n    )\n  )","user":"54dce62fe4b024c67c0cf78c"},{"code":"(fn isPalindrome [x] (= (seq x) (reverse x)))","problem":27,"user":"4e8d5edd535d65386fec2134"},{"code":"(fn [l]\n  (reduce #(and %1 %2)\n          (let [s (count l)] \n            (for [x (range 0 (/ s 2))]\n      \t\t\t(= (nth l x) (nth l (- s (inc x))))))))","problem":27,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"(fn [coll] (=  (seq coll) (rseq (vec coll))))","problem":27,"user":"527c4071e4b0757a1b17135a"},{"code":"(fn f[l] \r\n  (and\r\n    (=  (first l) (last l))\r\n    (if (nil? l)\r\n      true\r\n      (f (-> l next butlast))\r\n    )\r\n   )\r\n)","problem":27,"user":"4f245d77e4b0d66497709feb"},{"problem":27,"code":"(fn pal [s] (if (= (first s) (last s))\n              (if (< (count s) 2)\n                true (pal (rest (butlast s))))\n              false))","user":"5f9491cbe4b0715f5002d7bf"},{"problem":27,"code":"(fn Palindrome? [x] (if (string? x) (= (str (reverse (seq x)) x)) (= (reverse x) x)))","user":"58e90258e4b056aecfd47cfd"},{"problem":27,"code":"(fn [s]\n  (loop [s s\n         p true]\n    (if (or (empty? s) (= (count s) 1))\n      p\n      (recur (rest (reverse (rest s))) (= (first s) (last s))))))","user":"54b31445e4b09f271ff37d35"},{"code":"(fn[y] (= (#(if \n     (instance? String %) \n     (reduce str (reverse %)) \n     (reverse %)\n   ) y) y))","problem":27,"user":"4ebe066a535dfed6da9c6d91"},{"code":"(fn [x]\n\t(= (reverse (seq x)) (seq x)))","problem":27,"user":"51dd2ccfe4b0c33a4e1da400"},{"problem":27,"code":"(fn palindrome? [coll]\n  (let [n (int (Math/ceil (/ (count coll) 2)))]\n    (loop [x coll y (reverse coll) k 0]\n      (if (= n k)\n        true\n        (if (= (first x) (first y))\n          (recur (next x) (next y) (inc k))\n          false)))))","user":"56714922e4b05957ce8c6107"},{"code":"(fn [x] (= x (if (string? x) (apply str (reverse x))(reverse x))))","problem":27,"user":"4ee4ad77535d1385b2869d81"},{"problem":27,"code":"(fn [val]\n   (= (reverse val) (seq val)))","user":"59331397e4b072a2710fd046"},{"problem":27,"code":"(fn \n  [candidate]\n  (= (reverse (reverse candidate)) (reverse candidate)))","user":"5a58d8a0e4b05d388ecb6c8a"},{"problem":27,"code":"(fn [coll]\n  (let [c (if (string? coll)\n            (-> coll .toCharArray seq)\n            coll)]\n    (= c (reverse c))))","user":"567695c2e4b05957ce8c6157"},{"problem":27,"code":"(fn [Karte]\n\t(if (string? Karte)\n\t(= (apply str (reverse \"racecar\")) Karte)\n\t(= (reverse Karte) Karte)))","user":"5b35de7be4b02d533a91bb97"},{"problem":27,"code":"(fn palindrome [aseq] \n    (cond \n     (empty? (drop 1 aseq)) true\n     (and (= (first aseq) (last aseq))\n          (palindrome (drop 1 (butlast aseq)))) true\n          :else false))","user":"560d24a2e4b05f002753df34"},{"problem":27,"code":"(fn palin [x]\t(if (empty? x) \n                \ttrue \n                 \t(and \n                 \t\t(palin \n                     \t\t(rest \n                         \t\t(reverse (rest x))\n                         \t)\n                     \t)\n                     \t(= (first x) (last x))\n                  \t)\n               \t)\n)","user":"53d5e45ae4b0e771c302544e"},{"code":"#(= (reduce str (reverse %1)) (reduce str %1))","problem":27,"user":"4e46cf17535dc968683fc4b6"},{"problem":27,"code":"(fn [coll]\n  (loop [c coll]\n    (if (> (count c) 1)\n      (if (= (first c) (last c))\n        (recur (reverse(rest(reverse(rest c)))))\n        false)\n      true)\n    ))","user":"565e21e0e4b068f2fe63dc32"},{"problem":27,"code":"(fn[value]\n  (= value\n     (cond\n  \t\t(string? value) (apply str (reverse value))\n  \t\t:else (reverse value)\n\t )\n\t)\n  )","user":"58ffc6cfe4b0438e51c2d008"},{"code":"#(if (coll? %)\n  (= (reverse %) %)\n  (= (apply str (reverse %)) %))","problem":27,"user":"4f541874e4b0a7574ea717d8"},{"problem":27,"code":"#(= % (if (= (type %) java.lang.String) (clojure.string/reverse %) (reverse %)))","user":"594bc7d6e4b07ddc2dafae3d"},{"code":"#(= \n      (if (string? %) (apply str (reverse %)) (reverse %))\n      %)","problem":27,"user":"50e7cef1e4b077ad597af36a"},{"problem":27,"code":"(fn [col]\n   (= (reverse col) (seq col)))","user":"5db98f39e4b010eb3c36cd53"},{"code":"(fn pal [xs]\n  (if (= (reverse (reverse xs)) (reverse xs)) true false))","problem":27,"user":"50ed1ce7e4b01236b1d49839"},{"problem":27,"code":"(fn [xs] \n  (= (seq xs)\n     (reverse xs)))","user":"562cd94ee4b0a45d2ff83015"},{"problem":27,"code":"(fn\n  [iseq]\n  (if (empty? iseq)\n    true\n    (if (not (= (first iseq) (last iseq)))\n      false\n      (recur (drop 1 (drop-last iseq))))))","user":"5ed65b59e4b016b56eae05df"},{"problem":27,"code":"(fn [coll]\n   (cond\n   (string? coll) (= coll (apply str (reverse coll)))\n   :else (= coll (reverse coll))))","user":"5cec2b79e4b0a17bb84e2bf4"},{"problem":27,"code":"#( = (seq %) (reverse(seq %)))","user":"608820e9e4b0ae75613dcede"},{"problem":27,"code":"(fn [col] (= (reverse col) (reverse (reverse col))))","user":"5cb39440e4b026601754b903"},{"problem":27,"code":"(fn [m]\n  (= (seq m) (reverse m))\n)\n\n;(if (empty? m)\n;    true\n;    (if  (= (first m) (last m))\n;      (recur (drop 1 (drop-last m)))\n;      false\n;    ))\n;\n;\n;\n;\n;\n;\n;","user":"570006f1e4b08d47c97781c5"},{"problem":27,"code":"(fn [lst]\n    (cond\n      (string? lst) true\n      (= lst (reverse lst)) true\n     :else false))","user":"57f81569e4b0d3187e900919"},{"problem":27,"code":"#(or \n  (= %1 (reverse %1))\n  (= %1 (apply str (reverse %1))))","user":"4df9d3b0535d04ed9115e77b"},{"problem":27,"code":"(fn [s]\n          (cond\n            (string? s) (= s (apply str (reverse s)))\n            :else (= s (reverse s))))","user":"538510c2e4b06839e8705efb"},{"code":"(fn [n]\n  (if (= (apply str n) (apply str (reverse n)))\n    true\n    false))","problem":27,"user":"50bd13dee4b0594b91591c65"},{"problem":27,"code":"(fn [x] (= (if (string? x) (apply str (reverse x)) (reverse x)) x))","user":"54c54d7ce4b045293a27f622"},{"problem":27,"code":"(fn [s]\n  (=  (seq s) (reverse s)))","user":"55ff562fe4b00f4cabc57660"},{"problem":27,"code":"(fn[a] (= (if (string? a) (clojure.string/reverse a) (reverse a)) a))","user":"5002c798e4b0678c553fc42d"},{"problem":27,"code":"(fn [s]\n\t(= (into '() s)\n       (into '() (reverse s))))","user":"55f8180fe4b06e875b46ceba"},{"problem":27,"code":"(fn [p] \n    (if (seq p) \n      (if (= (first p) (last p))\n        (recur (reverse (drop 1(reverse (drop 1 p)))))\n        false)\n      true))","user":"55a1ba5ee4b0acc240e31517"},{"code":"(fn [arg]\n  (let [rev (reverse arg)]\n    (if (string? arg)\n      (= arg (clojure.string/join rev))\n      (= rev arg))))","problem":27,"user":"5110249ae4b04c71fce993ea"},{"code":"#(= (apply str (reverse %))\n    (apply str %))","problem":27,"user":"4e6f8af8535d5021c1a89620"},{"problem":27,"code":"#(loop [f (first %) l (last %) inp (rest (butlast %)) is true]\n   (if-not is\n     is\n   (if (empty? inp)\n     is\n     (recur (first inp) (last inp) (rest (butlast inp)) (and is (= f l))))))","user":"5964c614e4b069c0a1a19770"},{"problem":27,"code":"#(= (seq %) (reverse %))\n\n;;(seq \"abc\") result in (\\a \\b \\c)\n;; reverse will not evaluated as string ether.","user":"53be3ee7e4b0d9a98559a6df"},{"problem":27,"code":"(fn [seq]\n  (if (string? seq)\n    (= seq (clojure.string/reverse seq))\n    (= seq (reverse seq))\n    )  \n  )","user":"58775496e4b01531a375ea9a"},{"problem":27,"code":"#(not= % (distinct %))","user":"5f8e865fe4b0715f5002d76d"},{"problem":27,"code":"(fn [s] \n  (let [r1 (reverse s)\n        r2 (reverse r1)]\n    (= r1 r2)))","user":"54530382e4b0e397800069cc"},{"code":"(fn palindrome? [x]\n  (if (string? x) (= x (apply str (reverse x)))\n      (= x (reverse x))))","problem":27,"user":"5102f4f9e4b00c483ae176fd"},{"code":"(fn [s] \n  (loop [xs s]\n    (if (empty? xs) true (and (= (first xs) (last xs)) (recur (rest (butlast xs)))))))","problem":27,"user":"52199105e4b0c4ef0be82ff9"},{"problem":27,"code":"(fn pal [coll]\n  (if (nil? coll)\n    true\n    (if (not= (first coll) (last coll))\n      false\n      (pal (next (butlast coll))))))","user":"56557d2de4b0f9d632dd8498"},{"problem":27,"code":"(fn is-palindrome?\n  [s]\n  (= (seq s) (reverse s)))","user":"6096d37be4b00e9e6653c3f0"},{"problem":27,"code":"#(= (reverse (into () %1)) (into () %1) )","user":"56405959e4b08d4f616f5ee1"},{"code":"#(not= (-> % set sort) (sort %))","problem":27,"user":"4e79a143535db169f9c796a2"},{"code":"(fn t [xs]\n    (if (empty? xs)\n        true\n        (let [f (first xs) l (last xs) m (next (butlast xs))]\n            (and (= f l) (t m)))))","problem":27,"user":"4fb4099be4b081705acca2a9"},{"problem":27,"code":"(fn Palindrome-Detector [x]\n  (loop [start 0 end (- (count x) 1)]\n    (if (and (> end start) (= (nth x start) (nth x end)))\n        (recur (inc start) (dec end))\n        (if (= (nth x start) (nth x end)) true false)\n      )))","user":"5be79b5be4b0f319e2d7ec5a"},{"problem":27,"code":"(fn mypal [coll]\n  (cond\n   (<= (count coll) 1) true\n   (= (first coll) (last coll)) (mypal (rest (drop-last coll)))\n   :else false))","user":"54caaa48e4b057c6fda3a267"},{"code":"(fn[x](= (seq x) (reverse (seq x))))","problem":27,"user":"4f32135ae4b0d6649770a08e"},{"code":"(fn [xs] (if (=(reverse xs) (seq xs))true false))","problem":27,"user":"5255bf1ee4b0541d1855b9f1"},{"code":"(fn [xs]\n\t (loop [xs xs]\n\t       (cond (empty? xs) true\n\t\t     (not (= (first xs) (last xs))) false\n\t\t     :else (recur (drop 1 (drop-last xs))))))","problem":27,"user":"50467ee2e4b011c5dfee7723"},{"code":"(fn [x] (let [a (seq x)] (= (reverse a ) a)))","problem":27,"user":"4dd5e2cc535dae65d5c462ec"},{"problem":27,"code":"#(if (instance? String %)\n  (= (clojure.string/reverse %) %)\n  (= (reverse %) %))","user":"56040e58e4b0c80df0ca2654"},{"code":"(fn [x] \n  (= \n   (vec x)\n   (#(loop[s % y '()] (if (empty? s) y (let[t (conj y (first s))](recur (drop 1 s) t)))) x)\n  )\n)","problem":27,"user":"517e25c6e4b0329b27fa9f51"},{"code":"(fn palindrome? [x]\n  (if (string? x)\n    (= (apply str (reverse x)) (str x))\n    (= (reverse x) x)))","problem":27,"user":"4e95a440535dbda64a6f6b37"},{"problem":27,"code":"(fn [coll]\n  (let [x (quot (count coll) 2)]\n    (= (take x coll) (take x (reverse coll)))))","user":"56cda514e4b0ea9b8538f74e"},{"problem":27,"code":"(fn [c]\n  (let [r (reverse c)]\n    (if (string? c)\n      (= (clojure.string/join r) c)\n      (= r c))))","user":"56326e03e4b0bfe05bf117a4"},{"problem":27,"code":"(fn pal? [s] (if (= (rest s) ()) true (and (= (first s) (last s)) (pal? (rest (reverse (rest s)))))))","user":"5528ecd1e4b0ffed3738f942"},{"problem":27,"code":"#(loop [xs %]\n   (cond (< (count xs) 2) true\n         (= (first xs) (last xs)) (recur (drop-last (rest xs)))\n         :else false))","user":"55933c7ae4b0c79f6e1db938"},{"problem":27,"code":"(fn [coll] (if (string? coll)\n             (= (seq coll) (reverse (seq coll)))\n             (= coll (reverse coll))))","user":"563afd5ae4b0bfe05bf11809"},{"code":"(fn pal? [lst]\n  (if (not (= (first lst) (last lst)))\n           false\n           (if (or (= 0 (count lst)) (= 1 (count lst)))\n             true\n           (pal? (rest (drop-last lst))))))","problem":27,"user":"52091d57e4b0e152394d76f0"},{"problem":27,"code":"#(loop [x % y #{}]\n  (if (not (empty? x))\n    (if (contains? y (first x))\n      true\n      (recur (rest x) (conj y (first x))))\n    false))","user":"567b903be4b05957ce8c61a8"},{"code":"(fn [x]\n  (if (empty? x)\n    true\n  \t(if-not (= (first x) (last x))\n    \tfalse\n    \t(recur (butlast (rest x))))))","problem":27,"user":"538d464ee4b0b51d73faae69"},{"problem":27,"code":"(fn [x]\n  (= (reduce str x) (reduce str (reverse x))))","user":"581829cce4b0c0e9c07b83a9"},{"problem":27,"code":"(fn pal? [w]\n  (if (or (= (count w) 0) (= (count w) 1))\n    true\n    (if (not= (first w) (last w))\n      false\n      (recur (drop-last (next w))))))","user":"595e1ba7e4b066ee0a44b036"},{"code":"(fn [sq]\n  (let [v (into [] (seq sq))]\n    (every? identity\n            (map = v (rseq v)))))","problem":27,"user":"4ec59ce4535d6d7199dd36ab"},{"code":"(fn[s]\r\n  (let [size (count s)]\r\n    (cond\r\n      (<= size 1) true\r\n      :else\r\n        (if (= (first s) (last s))\r\n          (recur (butlast (rest s)))\r\n          false))))","problem":27,"user":"506ce637e4b0a302964c5490"},{"problem":27,"code":"(fn is-pali\n  [para]\n  (if (empty? para)\n    true\n    (if (= (first para) (last para))\n      (is-pali (butlast (rest para)))\n      false)))","user":"55ee7977e4b0121d4835fdee"},{"problem":27,"code":"(fn [x] (->> x\n            ((fn [x] \n               (map (fn [y] (= y (nth (vec x) (- (count x) (.indexOf (vec x) y) 1)))) x))) \n            (reduce (fn [n m] (and n m)))))","user":"56f5e6d5e4b046a417f92079"},{"code":"(fn [x]\n  (if (string? x)\n    (= (apply str (reverse x) x) )\n    (= (reverse x) x) ) )","problem":27,"user":"5188c487e4b0bdff0e072d55"},{"problem":27,"code":"(fn [coll] (= (reverse (vec coll)) (vec coll)))","user":"54b402dce4b05787c3b16388"},{"code":"#(let [s (seq %)]\n   (= s (reverse s)))","problem":27,"user":"52d340ebe4b099d49816f0c1"},{"problem":27,"code":"(fn [s]\n  (let [n (count s)]\n    (or (<= n 1)\n        (and (= (first s) (last s))\n             (recur (take (- n 2) (rest s)))))))","user":"539118b2e4b0b51d73faaea1"},{"problem":27,"code":"#( = ( seq % ) ( reverse % ) )","user":"57561529e4b02ea1147992d3"},{"problem":27,"code":"(fn [coll] (every? #(= (nth coll %) (nth (reverse coll) %)) (range 0 (dec (count coll)))))","user":"5da8b8ece4b000c986472c28"},{"code":"(fn [s]\n  (let [c (count s)]\n    (loop [i 0 a (nth s 0) b (nth s (- c 1))]\n      (let [x (* (+ i 1) 2) y (if (odd? c) (- c 1) c)]\n        (if (= x y) (= (nth s i) (nth s (if (odd? c) (+ i 2) (+ i 1))))\n          (if (not (= a b)) false\n            (recur (inc i) (nth s (inc i)) (nth s (- c (+ i 2))))))))))","problem":27,"user":"5029fccee4b023940c84aa47"},{"code":"(fn is-palindrome [in] \n  (if (empty? in)\n    true\n    (if (= (first in) (last in))\n      (is-palindrome (butlast (rest in)))\n      false\n    )\n  )\n)","problem":27,"user":"4e5fdd68535d8ccf87e9fe4f"},{"problem":27,"code":"(fn [pattern]\n  (= (seq pattern) (reverse pattern)))","user":"5c189373e4b01240ff5671ee"},{"problem":27,"code":"#(loop [coll %]\n   (cond (< (count coll) 2) true\n         (not= (first coll) (last coll)) false\n         :else (recur (rest (butlast coll)))\n                ))","user":"58524875e4b0b7285a6f4ead"},{"code":"#(= %\n    (if (string? %)\n      (apply str (reverse %))\n      (reverse %)))","problem":27,"user":"4ff548dee4b0678c553fc368"},{"problem":27,"code":"(fn [p] (= (vec p) (reverse p)))","user":"54961073e4b0b312c081ff62"},{"problem":27,"code":"(fn[s]\n   (loop [start 0 end (dec(count s))]\n    (if (> start end)\n      true\n    (if(not= (nth s start) (nth s end))\n      false\n      (recur (inc start) (dec end) )))))","user":"56c1f470e4b0839206b9d68c"},{"problem":27,"code":"(fn palindrome? [s]\n  \"Checks if it is a palindrome or not\"\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))","user":"5d614059e4b0c9e5857d500e"},{"code":"(fn findpals [pal]\n  (\n   if (< (count pal) 2)\n   true\n   (if\n    (not\n     (= (first pal) (last pal))\n    )\n    false\n    (\n     findpals (rest\n               (drop-last pal)\n              )\n     )\n    )\n  )\n)","problem":27,"user":"4f718ce5e4b07046d9f4f00d"},{"code":"(fn [p] (= (vec p) (rseq (vec p))))","problem":27,"user":"4e61bb60535d8ccf87e9fe5c"},{"code":"(fn [coll]\r\n                 (let [verse (reverse coll) n (count coll)]\r\n                   (every? identity \r\n                           (map #(= (nth verse %) (nth coll %)) (range (/ (dec n) 2))))))","problem":27,"user":"502113cee4b0ef1d2d4433b8"},{"problem":27,"code":"(fn [list] (= (seq list) (reverse list)))","user":"5758e39be4b02ea114799313"},{"problem":27,"code":"#(every? (fn [[a b]] (= a b)) (map list (vec %) (reverse %)))","user":"57642916e4b0994c1922fbee"},{"problem":27,"code":"(fn [xs] (= (take (int (/ (count xs) 2)) xs) (reverse (take-last (int (/ (count xs) 2)) xs))))","user":"5953053ce4b066ee0a44aeda"},{"code":"(fn [xs]\n    (let [list xs revlist (reverse xs)]\n      (= list \n         (if (string? list)\n           (apply str revlist)\n           revlist))))","problem":27,"user":"526302eee4b03e8d9a4a70a2"},{"problem":27,"code":"#(= (reverse %) (reverse (into '() %)))","user":"58a953dae4b01a0c0b232968"},{"code":"(fn [c] (\n    loop [coll c]\n  \t(if (<= (count coll) 1)\n\t\t\ttrue\n\t\t\t(if (= (first coll) (last coll) )\n\t\t\t\t(recur (drop-last (rest coll)) )\n\t\t\t\tfalse\n\t\t\t)\n\t\t)\n))","problem":27,"user":"4f725466e4b07046d9f4f030"},{"problem":27,"code":"#(if (sequential? %)\n    (= % (reverse %))\n    (= % (clojure.string/join (reverse %))))","user":"5b11449ce4b0cc2b61a3be2d"},{"problem":27,"code":"#(= % (\n  if (string? %)\n    (apply str (reverse %))\n    (reverse %)))","user":"5e9e642ce4b00a66d4a95174"},{"problem":27,"code":"(fn pl [c] (= (reverse (reverse c)) (reverse c)))","user":"561e8b11e4b064ca9f4b16c0"},{"code":"(fn [s] \n  (= (reverse s) (seq s)))","problem":27,"user":"4f91fd31e4b0dcca54ed6ca8"},{"problem":27,"code":"#(loop [s %\n       res true]\n  (if (<= (count s) 1)\n    res\n    (recur (rest (drop-last s)) (= (first s) (last s)))))","user":"5253de67e4b0541d1855b939"},{"code":"#(=\n   (apply str %)\n   (apply str (reverse %))\n)","problem":27,"user":"4e8b6f4d535d65386fec211e"},{"problem":27,"code":"#(let [r (reverse (into [] %1)) s (into [] %1)] (= r s))","user":"55b118fae4b002ce9d5cbc2d"},{"code":"#(let [pal %1]\n    (if (string? pal)\n      (if (= pal (reduce str (reverse pal)))\n        true\n        false\n      )\n      (if (= pal (reverse pal))\n        true\n        false\n      )\n    )\n)","problem":27,"user":"4fa7de4ce4b081705acca1c9"},{"code":"(fn [list] (= (reverse list) (vec list)))","problem":27,"user":"4f03396d535dcb61093f6a7b"},{"code":"(fn palindrome?[text]\n  (= (seq text) (reverse (seq text))\n))","problem":27,"user":"4e723bcb535d5021c1a8965c"},{"problem":27,"code":"(fn\n  [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))","user":"56df636ae4b0ca2494a095f4"},{"code":"#(= (reverse %)\n    (reverse (reverse %)))","problem":27,"user":"538557aee4b06839e8705f02"},{"problem":27,"code":"(fn [arg1]\n\t(= (reverse arg1) (seq arg1)))","user":"557e2eafe4b05c286339e0d2"},{"problem":27,"code":"(fn pal [x]\n  (=(seq x)(reverse (seq x))))","user":"57fc08d8e4b0d3187e900988"},{"problem":27,"code":"(fn [p]\n  (reduce #(and %1 %2) (map #(= %1 %2) p (reverse p))))","user":"5c6748f0e4b0fca0c16226b6"},{"problem":27,"code":"(fn foo [input]\n  (if (empty? input)\n    true\n    (if (= (first input) (last input))\n      (foo (rest (butlast input)))\n      false\n      )))","user":"559ff9eee4b0acc240e314ee"},{"problem":27,"code":"#(loop [s %]\n    (cond (= 0 (count s)) true\n          (= 1 (count s)) true\n          true (if (= (first s)\n                      (last s))\n                 (recur (drop-last 1 (drop 1 s)))\n                 false)))","user":"53b88e6ee4b047364c0444de"},{"problem":27,"code":"#(loop [xs %]\n   (cond\n    (empty? xs) true\n    (not= (first xs) (last xs)) false\n    :else (recur ((comp rest drop-last) xs))))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":27,"code":"#(letfn [(palindrome? [xs]\n          (if (empty? xs)\n            true\n            (let [f (first xs)\n                  l (last xs)]\n              (if (= f l)\n                (palindrome? (rest (drop-last xs)))\n                false))))]\n   (palindrome? %))","user":"58bb218be4b0888cdc949cf4"},{"problem":27,"code":"(fn [full-word]\n  (loop [word full-word]\n    (let [first-element (first word)\n          last-element (last word)\n          rem-word (butlast (rest word))]\n      (if (= first-element last-element)\n        (if-not (or (empty? rem-word) (= (count rem-word) 1))\n          (recur rem-word)\n          true)\n        false))\n    ))","user":"5c839a4de4b0c8042a70ce53"},{"code":"#(let [n (quot (count %) 2)]\n    (every? true?\n           (map =\n                (take n (vec %))\n                (take n (reverse (vec %))))))","problem":27,"user":"539cb777e4b0b51d73faaf30"},{"code":"(fn [s]  \n  (= (apply str s) (apply str (reverse s)))\n)","problem":27,"user":"52fd3da0e4b047fd5583702a"},{"problem":27,"code":"(fn\n  [coll]\n  (let [r (reverse coll)]\n    (if (string? coll)\n      (if (= (apply str r) coll)\n        true\n        false)\n      (if (= r coll)\n        true\n        false))))","user":"5484143de4b0e286459a1197"},{"problem":27,"code":"(fn palindrome [string]\n  (= (seq string) (into '() (seq string))))","user":"5d6febe6e4b04d129b00f2d5"},{"code":"#(loop [s %] \n    (if (not (= (first s) (last s)))\n      false \n      (if (or (= s ()) (= (drop 1 s) ())) \n        true \n        (recur (rest (drop-last s))))))","problem":27,"user":"4fbfe9a4e4b081705acca31f"},{"problem":27,"code":"(fn [coll]\n  (let [z (map list coll)]\n  (if (= z (reverse z))\n    true\n    false)))","user":"58217fbde4b04b46fc4b0f78"},{"problem":27,"code":"(fn palindrome?\n  [input]\n  (= (seq input) (seq (reverse input))))","user":"5ac6099ee4b0e27600da7757"},{"problem":27,"code":"#(if (<= (count %1) 1)\n    true\n    (if (= (last %1) (first %1))\n      (recur (butlast (rest %1)))\n      false))","user":"5901731ae4b0438e51c2d03d"},{"code":"(fn [s]\n (if (seq? s)\n  (let [rs (reverse s)]\n   (= s rs))\n  (let [slist (seq s)\n        srlist (reverse slist)]\n    (= slist srlist))))","problem":27,"user":"52f4580de4b05e3f0be25f21"},{"problem":27,"code":"(fn [v] (let [zipped (zipmap v (reverse v))]\n          (empty? (remove (fn [[k v]] (= k v)) zipped))))","user":"567a680ee4b05957ce8c6198"},{"problem":27,"code":"(fn palindrome? [alist]\n  (every? \n   #(= (first %) (second %))\n   (map vector alist (reverse alist))))","user":"5aaa2dc3e4b0d174b936c8f1"},{"problem":27,"code":"#(true? (if (string? %)\n          (= % (clojure.string/reverse %))\n          (= % (reverse %))))","user":"591ac8ece4b09b4ee5954bdd"},{"code":"(fn palin [x]\n  (if (or (= x '()) (= (count x) 1))\n    true\n    (if (= (first x) (last x))\n      (palin (rest (butlast x)))\n      false\n    )\n  )\n)","problem":27,"user":"4fa7ef54e4b081705acca1ca"},{"code":"(fn [pc] (= (seq pc) (reverse pc)))","problem":27,"user":"4e970e6a535dbda64a6f6b4e"},{"problem":27,"code":"(fn [p]\n  (if (string? p)\n    (= p (clojure.string/reverse p))\n    (= p (reverse p))))","user":"508fda91e4b0ea685a20f76f"},{"problem":27,"code":"(fn [x]\n  (let [item (partition-by identity x)]\n  (= (reverse item) item)))","user":"572a856be4b0f4d77e65123b"},{"code":"#(let [item (seq %)] (= (reverse item) item))","problem":27,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":27,"code":"(fn is-palandrome? [l]\n  (let [or (seq l)\n        cp (reverse l)]\n    (= cp or)))","user":"5294a49be4b02ebb4ef7500f"},{"code":"(fn [seq]\n    (if (> 2 (count seq))\n      true\n      (if (= (first seq) (last seq))\n        (recur (rest (butlast seq)))\n        false)))","problem":27,"user":"4feded14e4b0d2a5fc2962ec"},{"problem":27,"code":"(fn [list]\n  (loop [red list]\n    (if (empty? red)\n      true\n      (if (= (first red) (last red))\n        (recur (rest (butlast red)))\n\t\tfalse\n      )\n    )\n  )\n)","user":"583dacc2e4b089d5ab817d9f"},{"code":"(fn [x]\n  (= (reverse x) (seq x)))","problem":27,"user":"4e657c05535d8ccf87e9fe72"},{"code":"(fn __\n  [word]\n  (= (apply str (reverse word)) (apply str word)))","problem":27,"user":"4fe8b1d9e4b07c9f6fd12c71"},{"code":"(fn palin [l]\n  (let [paux (fn paux [l a b]\n    (cond\n      (>= a b) true\n      (= (nth l a) (nth l b)) (paux l (+ a 1) (- b 1))\n      :else false)\n    )]\n    (paux l 0 (- (count l) 1))\n  ))","problem":27,"user":"505024a4e4b0a02f9cffdeb4"},{"code":"(fn [xs] (if (empty? xs) true (and (= (first xs) (last xs)) (recur (rest (butlast xs))))))","problem":27,"user":"5204173be4b0fb7e47ea5216"},{"problem":27,"code":"(fn is-palindrome? [word]\n  (let [r (->> word seq reverse)\n        s (seq word)]\n    (= s r)))","user":"5d80f328e4b0915913b1d372"},{"problem":27,"code":"(fn palindrome?\n  [coll]\n  (loop [[a & b] coll]\n    (if (< (count b) 2)\n      true\n      (if (= a (last b))\n        (recur (rest (reverse b)))\n        false))))","user":"57b5dc52e4b0fbc9809a27b3"},{"problem":27,"code":"(fn p [xs]\n  (= (seq xs) (reverse xs)))","user":"59dec79ee4b01968742fed81"},{"problem":27,"code":"#(loop [tocheck (seq %), match true]\n      (if (< (count tocheck) 2)\n               match\n               (recur (drop-last (rest tocheck))   \n                      (and match (= (first tocheck) (last tocheck))))))","user":"5ce6c354e4b0a17bb84e2b93"},{"problem":27,"code":"(fn [subject]\n  (if (sequential? subject)\n    (= subject (reverse subject))\n    (= subject (clojure.string/join (reverse subject)))))","user":"54fc2fbae4b07d26eda61d26"},{"code":"#(loop [s %]\n  (cond (nil? s) true\n(not= (first s) (last s)) false\ntrue (recur (next (drop-last s)))))","problem":27,"user":"4e6cf61a535de274dd8d818c"},{"code":"#(= (seq %)\n    (reverse (seq %)))","problem":27,"user":"4fd16778e4b04c3a95aa040f"},{"problem":27,"code":"(fn palindrome?\n  [xs]\n  (= (reverse xs) (seq xs)))","user":"52561295e4b0541d1855ba03"},{"problem":27,"code":"(fn isPalindrome [coll] (if (string? coll) (= coll (apply str (reverse coll))) (= coll (reverse coll))))","user":"58597562e4b0f14aab7c8734"},{"code":"(fn [x]\r\n  (if (empty? x)\r\n    true\r\n    (if (= (count x) 1)\r\n      true\r\n      (if (= (first x) (last x))\r\n        (recur (butlast (rest x)))\r\n        false\r\n      )\r\n    )\r\n  )\r\n)","problem":27,"user":"4e5cac7c535d8a8b8723a2c3"},{"problem":27,"code":"#(= (first (vec %)) (last (vec %)))","user":"54696e4ce4b00cfc9eacc147"},{"code":"(fn test [l] \n(if (nil? l) \n  true\n  (if (not= (first l) (last l))\n    false\n    (test (butlast (rest l)))\n  )\n)\n)","problem":27,"user":"4f74a617e4b044e54cd9a905"},{"problem":27,"code":"(fn palin\n  [s]\n  (= (seq s) (reverse s)))","user":"5d123c75e4b02c15ef021997"},{"problem":27,"code":"(fn [l]\n  (if (empty? l)\n    true\n    (and \n     (= (last l) (first l))\n     (recur (->> l (drop 1) drop-last))\n    )\n  )\n)","user":"55db1696e4b0e31453f64ae1"},{"problem":27,"code":"#(let [reverse (if (string? %)\n                   (clojure.string/reverse %)\n                   (reverse %))]\n   (= reverse %))","user":"51b01309e4b0c53cf2e68a57"},{"code":"(fn palindrome? [s]\n  ((fn p [a b]\n    (if (and (empty? a) (empty? b))\n        true\n        (and\n          (= (first a) (first b))\n          (p (rest a) (rest b))))) s (reverse s)))","problem":27,"user":"4fff72b6e4b0678c553fc400"},{"code":"(fn [x]\n  (let [ myequal (fn myequal [xs ys]\n  (cond (= xs ys []) true\n        (= (first xs) (first ys)) (myequal (rest xs) (rest ys))\n        :else false))] (myequal x (reverse x))))","problem":27,"user":"4dad8d4bc9a9d6ed1799dc57"},{"problem":27,"code":"(fn [s]\n  (loop [head 0 tail (dec (count s)) match true]\n    (if (>= head tail)\n      match\n        (recur (inc head) (dec tail) (= (nth s head) (nth s tail))))))","user":"55929e89e4b0604b3f94d58e"},{"code":"#(let [y (into () %)\n       z (into () y)]\n   (= y z))","problem":27,"user":"52046600e4b0c283853240c5"},{"problem":27,"code":"(fn\n   [lst]\n   (if (string? lst)\n       (= lst (apply str (reverse lst)))\n       (= lst (reverse lst))))","user":"5d6e4d1ee4b04d129b00f2c4"},{"problem":27,"code":"(fn palindrome [lst]\n  (if (< (count lst) 1) true\n      (if (= (first lst) (last lst))\n          (palindrome (rest (butlast lst)))\n          false)))","user":"56fc1bc7e4b07572ad1a88dd"},{"code":"(fn [a-seq]\n          (loop [my-head a-seq\n                 my-tail a-seq]\n            (cond\n             (empty? my-head) true\n             (not= (first my-head) (last my-tail))\n              false\n              :else (recur (rest my-head) (butlast my-tail)))))","problem":27,"user":"521ceb02e4b0c4ef0be830a5"},{"problem":27,"code":";#(= (seq %) (seq (reverse %)))\n#(= (reverse %) (seq %))","user":"57ee42c4e4b0bfb2137f5bb1"},{"problem":27,"code":"(fn [x]\n   (if (= (reverse (seq x)) (seq x))\n  true\n  false))","user":"5e266943e4b05b4b01516178"},{"code":"(fn [xs]\n  (let [rs (reverse xs)\n        mixed (partition 2 (interleave xs rs))]\n    (every? (partial apply =) mixed)))","problem":27,"user":"4f8c6bf6e4b02e764a0a519b"},{"problem":27,"code":"(fn [x]\n  (= (apply str x) (apply str (reverse x))))","user":"57b5c29ee4b0fbc9809a27b1"},{"problem":27,"code":"(fn [alist]\n  (cond\n    (not= (first alist) (last alist)) false\n    (or (empty? alist) (= 1 (count alist))) true\n    :else (recur (butlast (drop 1 alist)))))","user":"5705e404e4b0b0fb43fd0676"},{"code":"(fn [se]\r\n  (loop [s se, bool true]\r\n    (if (<= (count s) 1)\r\n      bool\r\n      (recur (rest (drop-last s)) (and (= (first s) (last s)))))))","problem":27,"user":"4df407c3535d08e6dec9fe2e"},{"problem":27,"code":"; second\n#(= (seq %) (reverse %))\n\n; first\n#_(fn [x]\n  (let [s (seq x)\n        r (reverse s)]\n    (= r s)))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn pali [xs]\n  (if (empty? xs) true \n  (if (= (first xs) (last xs))\n    (pali (reverse (rest (reverse (rest xs))))) false)))","problem":27,"user":"5097cd83e4b00ad8bab4e974"},{"code":"(fn [s]\n  \n  (if (string? s) (= s (apply str (reverse s))) (= s (reverse s))))","problem":27,"user":"4f569218e4b0a7574ea71826"},{"problem":27,"code":"(fn palindrome\n  ;\"Returns true if the sequence is a palindrome\"\n  [lst]\n  (loop [lst lst\n         result false]\n    (if (not= (first lst) (last lst)) result\n      (recur (concat (drop 1 lst) (take 1 lst)) true))))","user":"5bbbcecee4b0a20761a23611"},{"code":"(fn [word]\n   (= (reverse (reverse word)) (reverse word))\n   )","problem":27,"user":"5106dc1be4b01150e115ebf0"},{"code":"(fn wow\n  ([very] (wow very true))\n  ([very much]\n    (if (false? much)\n      much\n      (if (< (count very) 2)\n        much\n\t    (recur (rest (butlast very)) (= (first very) (last very)))\n      )\n    )\n  )\n)","problem":27,"user":"5303a027e4b0d8b024fd3745"},{"code":"(letfn [(f [y z]  \n           (if (empty? y) \n             (empty? z) \n             (if (= (first y) (first z))\n               (f \n                (rest y) \n                (rest z))\n               false)\n             ))] (fn [x] (f x (reverse x))))","problem":27,"user":"514f6679e4b0b449e54b8df5"},{"problem":27,"code":"(fn[x](= (apply str (reverse x)) (apply str x)))","user":"608819b6e4b0ae75613dcedd"},{"code":"(fn f [lst]\n  (or (< (count lst) 2)\n      (and (= (first lst) (last lst))\n           (f (rest (butlast lst))))))","problem":27,"user":"4e68dbd5535d8ccf87e9fe8f"},{"problem":27,"code":"(fn [thing]\n  (let [things (seq thing)]\n  (= things (reverse things))) )","user":"5625f678e4b00e49c7cb47b8"},{"code":"(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))","problem":27,"user":"5132c6f0e4b021281ec7b6d3"},{"code":"(fn my-palindrom\n  [input]\n  (if (= (reverse (reverse input)) (reverse input)) true false))","problem":27,"user":"5300b750e4b0d8b024fd3711"},{"problem":27,"code":"(fn [sequence] (if (string? sequence)\n                 (= sequence (apply #'str (reverse sequence)))\n                 (= sequence (reverse sequence))))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn [candidate] (= candidate (if (instance? String candidate) (apply str (reverse candidate))(reverse candidate))))","problem":27,"user":"5394162be4b0b51d73faaec5"},{"code":"(fn foo [x] (or (empty? x)\n              (if-not (= (first x) (last x))\n                false\n                (foo (take (dec (count (rest x))) (rest x))))))","problem":27,"user":"525372ade4b0541d1855b8f3"},{"problem":27,"code":"(fn [x]\n  (let [x-seq (seq x)]\n    (= x-seq (reverse x-seq))))","user":"56f01f64e4b04a395b9a046d"},{"problem":27,"code":"(fn [lst]\n  (loop [fwd lst\n         bwd (reverse lst)]\n    (cond\n     (nil? (first fwd)) true\n     (false? (= (first fwd) (first bwd))) false\n     :else (recur (rest fwd) (rest bwd)))))","user":"51c116d4e4b0c9c822882942"},{"problem":27,"code":"(fn palindromo [x] (cond (string? x) (= (apply str (reverse x)) x) (vector? x) (= (vec (reverse x)) x) :else (= (reverse x) x)))","user":"5f0cb4f3e4b0f30dddfb5d4e"},{"code":"#(= (reduce conj nil %) (reduce conj [] %))","problem":27,"user":"4ec75829535d6d7199dd36e1"},{"problem":27,"code":"(fn [c] (if (< (count c) 2) true (if (= (first c) (last c)) (recur (butlast (rest c))) false)))","user":"56347285e4b0bfe05bf117bc"},{"code":"(fn p [c] (if (= (reverse c) (seq c)) true false))","problem":27,"user":"50ec69e0e4b04edc3377704a"},{"code":"(fn palindrome? [xs]\n    (let [length (count xs)\n        xsseq (seq xs)\n        half (quot length 2) \n        rmd (rem length 2)\n        pre (first (split-at half xsseq))\n        post (second (split-at (+ half rmd) xsseq))]\n        (= pre (reverse post))    \n    ))","problem":27,"user":"4ed6238d535d10e5ff6f52de"},{"code":"#(let [s (vec %)] (= (reverse s) s))","problem":27,"user":"52105865e4b080a8d9b9d639"},{"problem":27,"code":"(fn [lst] (= (seq lst) (reverse (seq lst))))","user":"5d9475e4e4b0d3f9b434ad25"},{"code":";short but inefficient:\r\n;#(= (seq %) (reverse %))\r\n\r\n#(let [len (quot (count %) 2)\r\n       [start end] (split-at len %)]\r\n   (reduce (fn [a b] (and a b))\r\n      (map = start (reverse end))))","problem":27,"user":"4e1047ad535d04ed9115e7bf"},{"code":"#(let [s (split-at (/ (count %) 2) %)]\n   (= (reverse (take (count (second s)) (first s))) (second s)))","problem":27,"user":"5230d9bde4b0035e815da397"},{"problem":27,"code":"(fn [in]\n  (loop [next in]\n        (if (empty? (seq next))\n            true\n          (if (= (count next) 1)\n              true\n            (if-not (= (first next) (last next))\n                    false\n                    (recur (drop 1 (drop-last next)))\n                    )\n            )\n          )\n        )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"code":"(fn pal [list]\n  (if (> 2 (count list))\n      true\n    (let [f (first list)\n          r1 (reverse (rest list))\n          l (first r1)\n          r (reverse (rest r1))]\n      (and (= f l) (pal r)))))","problem":27,"user":"505cc50ce4b0e6aca564be00"},{"problem":27,"code":"(fn [seq]\n  (= (vec seq) (reverse (vec seq))))","user":"5ccf125ce4b0ccb0619628c0"},{"code":"(fn palinodrom? [coll]\n  (cond \n   (empty? coll) true\n   (= (first coll) (last coll)) (palinodrom? (rest (reverse (rest coll))))\n   :else false))","problem":27,"user":"514e0417e4b019235f6c0593"},{"problem":27,"code":"(fn [s]\n  (= (vec s) (vec (reverse s))))","user":"54c05fd7e4b0ed20f4ff6f12"},{"problem":27,"code":"(fn palindrome? [x] \n                  (if (empty? x) true \n                    (if (nil? x) true\n                      (if (= 1 (count x)) true\n                        (if (= (last x) (first x)) (palindrome? (butlast (rest x))) false)))))","user":"545188ebe4b0e397800069b2"},{"problem":27,"code":"(fn [input]\n  (loop [myseq input myseqrev (reverse input)]\n    (if (and (empty? myseq) (empty? myseqrev))\n      true\n      (if (false? (= (first myseq) (first myseqrev)))\n        false\n        (recur (rest myseq) (rest myseqrev))\n      )\n    )\n  )\n)","user":"506af7d8e4b0a2a5463de37d"},{"code":"(fn palindrome [a] (= (reverse (seq a)) (seq a)))","problem":27,"user":"4ee177dc535d10e5ff6f5359"},{"problem":27,"code":"#(loop [items %]\n   (if (not= (first items) (last items))\n     false\n     (if (not-empty items)\n       (recur (rest (drop-last items)))\n       true)))","user":"57625c18e4b0994c1922fba4"},{"code":"(fn a [c] (if(not= (first c) (last c))(identity false)(if(or(= 1 (count c))(nil? c))(identity true) (a (next (drop-last 1 c))))))","problem":27,"user":"527a8eb7e4b03e8d9a4a755f"},{"code":"(fn [s] (reduce (fn [cum set] (and cum (apply = set))) (partition 2 (interleave s (reverse s)))))","problem":27,"user":"4e9646f2535dbda64a6f6b40"},{"problem":27,"code":"(fn palindrome? [seq]\n  (if (< (count seq) 2)\n    true\n    (if (not (= (first seq) (last seq)))\n      false\n      (recur (rest (butlast seq))))))","user":"56889672e4b0dcc4269f406c"},{"code":"(fn palin [x]\n  (if (= (rest x) '())\n    true\n    \n    (if (= (first x) (last x))\n      (palin (rest (butlast x)))\n\n      false\n    )\n  )\n)","problem":27,"user":"4e3456f9535deb9a81d77f2a"},{"code":"(fn pal \n  [data]\n  (if (> (count data) 1)\n    (if (= (first data) (last data))\n        (pal (rest (butlast data)))\n        false)\n    true))","problem":27,"user":"501d0321e4b066e56b9d0b1d"},{"problem":27,"code":"(fn [mj] (if (string? mj) (= (clojure.string/join (reverse mj)) mj) (= (reverse mj) mj)))","user":"53ed290be4b0d648e757f4c0"},{"problem":27,"code":"#(=\n  (reduce conj [] %)\n  (reduce conj () %))","user":"5d4fc160e4b0776584bd6f51"},{"problem":27,"code":"; (fn [sq] (= (seq sq) (reverse sq))) ;goes through rhe whole seq\n\n; (fn [arg] (let [len (/ (count arg) 2)]\n;           (every? true? (map = (take len arg) (take len (reverse arg))))))\n\n(fn [sq] (let [n (long (/ (count sq) 2))\n               fwd (take n sq)\n               bkwd (take n (reverse sq))]\n           (= fwd bkwd)))","user":"597af3f7e4b02382a38ad1f0"},{"problem":27,"code":"(fn [l]\n  (let [r (reverse l)]\n    (not (some not (map-indexed #(= %2 (nth r %1)) l               \n                   )))))","user":"58bd1ab9e4b0888cdc949d27"},{"problem":27,"code":"#(let [rvrs-coll (reverse %)]\n      (= rvrs-coll (seq %)))","user":"53940b5ee4b0b51d73faaec4"},{"problem":27,"code":"(fn [x] (if (string? x) (= x (clojure.string/reverse x)) (= (reverse x) x)))","user":"56ff7ffee4b08d47c97781be"},{"code":"(fn pld? [coll]\r\n  (or\r\n    (empty? coll)\r\n    (and \r\n      (= (first coll) (last coll))\r\n      (pld? (rest (butlast coll))))))","problem":27,"user":"4facff22e4b081705acca230"},{"problem":27,"code":"(fn [s]\n  (let [vs (vec s)]\n    (= vs (reverse vs))))","user":"5e80edc3e4b09a7a73c8bba9"},{"problem":27,"code":"(fn [coll]\n  (= (seq coll) (reverse coll))\n  )","user":"5de6484ce4b0986d99407f66"},{"problem":27,"code":"(fn f[s] (= (seq s) (reverse s) ))","user":"553b90c8e4b09218d5f45005"},{"code":"(fn is-p [x]\n    (if (<= (count x) 1) true\n      (if (= (first x) (last x)) (is-p (butlast (rest x)))\n       false)))","problem":27,"user":"4f3242bae4b0d6649770a08f"},{"code":"(fn [arr] (every? identity (for [i (range (count arr))] (= (last (take (inc i) arr)) (first (take-last (inc i) arr))))))","problem":27,"user":"52f84c94e4b047fd55836fcf"},{"problem":27,"code":"(fn palindrome? [x]\n  (cond\n    (string? x) (= x (clojure.string/reverse x))\n    :else (= x (reverse x))))","user":"58042984e4b0a837a8b30ca3"},{"code":"(fn [var] (if (string? var) (= var (clojure.string/join (reverse var))) (= var (reverse var))))","problem":27,"user":"51f98843e4b09be9c177e54e"},{"problem":27,"code":"#(= (vec %) (-> % reverse))","user":"55156efae4b055c2f668d4e5"},{"code":"#(= (apply str %) (apply str (reverse %)))","problem":27,"user":"4e0cdc6f535d04ed9115e7b4"},{"problem":27,"code":"(fn\n  [lst]\n  (= (seq (reverse lst)) (seq lst)))","user":"580fb8e0e4b0f478707a05bc"},{"code":"(fn [x] (loop [x x]\n  (cond (< (count x) 2) true\n        (= (last x) (first x)) (recur (rest (butlast x)))\n        :else false)))","problem":27,"user":"4ec63613535d6d7199dd36c6"},{"code":"(fn [word] \n  (let [rev (if (string? word) (apply str (reverse word)) (reverse word))]\n  \t(if (= word rev) true false)))","problem":27,"user":"52c42f6be4b0c2d177d620d1"},{"code":"(fn palin? [lst]\n  (cond\n    (= 1 (count lst)) true\n    (= 2 (count lst)) (= (first lst) (last lst))\n    (not= (first lst) (last lst)) false\n    :else (recur (rest (drop-last lst)))))","problem":27,"user":"4e7b6e49535db169f9c796b1"},{"problem":27,"code":"(fn [c]\n  (if (string? c)\n    (= (apply str (reverse c)))\n    (= c (reverse c))))","user":"58ddac2ce4b0a4d5acaab6d6"},{"problem":27,"code":"(fn [l]\n  (let [rev (reverse l)\n        half-size (/ (count l) 2)]\n    (= (take half-size l) (take half-size rev))))","user":"5405fdcce4b0addc1aec6683"},{"problem":27,"code":"(fn my-pall [x]\n         (cond\n           (= true (<= (count x) 1)) true\n           (= (first x) (last x))\n           (do\n             (println x)\n             (my-pall(rest (drop-last x))))\n           :else false))","user":"5bf50e76e4b0b326c961d8a0"},{"code":"(fn pal [coll] \n  (= (seq coll) (reverse (seq coll))))","problem":27,"user":"4ff01fa9e4b0678c553fc321"},{"problem":27,"code":"(fn \n  [x] \n  (= (seq x) (reverse x)))\n\n; My original solution did (reverse (seq x)) - but the \"seq\" here is unnecessary, as reverse returns a sequence...","user":"555df9c8e4b0a2eb076a39b2"},{"code":"#(->> % seq (= (reverse %)))","problem":27,"user":"528c51a5e4b0239c8a67aeb4"},{"code":"(fn pal [seq] \n  (if (empty? seq) true \n    (if (= (first seq) (last seq))\n      (pal (butlast (rest seq)))\n      false)))","problem":27,"user":"511d5d8ee4b022853b0e07a3"},{"problem":27,"code":"(fn [x]\n\t(cond \n        (= (count x) 0)\n           true\n     \t(= (first x) (last x))\n     \t\t(recur (-> x (rest) (butlast)))\n        :else\n            false\n     )\n)","user":"54c97cb3e4b045293a27f677"},{"problem":27,"code":"#(let [main % rev (reverse %)] (if (coll? %) (= main rev) (= main (clojure.string/join rev))))","user":"57c6aa0be4b05aa3c4741cf7"},{"problem":27,"code":"(fn [coll]\n  (= (apply str coll)\n     (apply str (reverse coll))))","user":"5a58bfd0e4b05d388ecb6c84"},{"problem":27,"code":"#(= (seq %) (-> % (seq) (reverse)) )","user":"5838337de4b089d5ab817d24"},{"problem":27,"code":"(fn [c]\r\n  (if (empty? c) true  \r\n    (if (not= (first c) (last c)) \r\n        false\r\n        (recur (rest (drop-last c)))\r\n    )\r\n  )\r\n)","user":"52b434c9e4b0c58976d9ad1c"},{"problem":27,"code":"(fn [xs]\n  (= (reverse xs) (reverse (reverse xs))))","user":"59ee6801e4b0966464fe6a1f"},{"code":"(fn [n] (cond\n         (<= (count n) 1) true\n         (= (first n) (last n)) (recur (rest (butlast n)))\n         :else false))","problem":27,"user":"52394c03e4b0d705d026ef09"},{"code":"(fn [coll]\r\n  (= (seq coll) (reverse coll)))","problem":27,"user":"4e131e61535d04ed9115e7d5"},{"problem":27,"code":"#(= (seq %) (reverse (seq %)))\n\n;; Note: reverse aplies seq first, so can be reduced to:\n;;    #(= (seq %) (reverse %))","user":"5d54af24e4b02ba5928a6809"},{"code":"#(= (vec (seq (vec %1))) (vec (rseq (vec %1))))","problem":27,"user":"4f9a737fe4b0dcca54ed6d0a"},{"problem":27,"code":"(fn [coll]\n  (cond (> 2 (count coll)) true\n        (not= (first coll) (last coll)) false\n        :else (recur (butlast (rest coll)))))","user":"546c4c5fe4b00cfc9eacc178"},{"code":"(fn [coll]\n  (loop [left coll right coll]\n    (if (empty? left)\n    true\n    (if (= (first left) (last right))\n      (recur (rest left) (drop-last right))\n      false))))","problem":27,"user":"5054e37fe4b0b1b9d1860eb6"},{"code":"(fn [x] (let [coll (seq x)]\n           (= (reverse coll) coll)))","problem":27,"user":"5264301fe4b03e8d9a4a70ca"},{"code":"#(=  ( reverse %) (reverse(reverse%) ))","problem":27,"user":"4e78c208535db95036265722"},{"code":"(fn [x] (if (= (type x) (class \"\") ) (= (clojure.string/reverse x) x) (= (reverse x) x)))","problem":27,"user":"52d829a8e4b09f7907dd1389"},{"problem":27,"code":"(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (if (= (first s) (last s))\n      (palindrome? (rest (butlast s)))\n      false)))","user":"5a9181c5e4b002d099cae6f6"},{"code":"(fn palindrome? [x]\n  (if (string? x)\n    (= x (apply str (vec (reverse x))))\n    (= x (reverse x))))","problem":27,"user":"52cefb7ee4b07d0d72b27397"},{"problem":27,"code":"(fn func [x] (if (> (count x) 2) (if (= (last x) (first x)) (func (butlast (rest x))) false) true))","user":"56c1d2dae4b0839206b9d68a"},{"problem":27,"code":"(fn [x]\n  (if (or (= 1 (count x)) (= 0 (count x)))\n    (= 1 1)\n    (if (not (= (first x) (first (reverse x))))\n      (= 1 2)\n      (recur (rest (reverse (rest x)))))))","user":"5dd70ee3e4b0948ae9d9ad85"},{"code":"(fn [X] (= (seq X) (seq (reverse X))))","problem":27,"user":"5300c383e4b0d8b024fd3712"},{"problem":27,"code":"(fn isPalindrome [x] (every? true? (map #(= %1 %2) (vec x) (vec (reverse x)))))","user":"57e15244e4b0bfb2137f5a70"},{"problem":27,"code":"(fn [x] (or (= (first x) \\r) (= x (reverse x))))","user":"53cff414e4b00fb29b221304"},{"problem":27,"code":"(fn [l]\n  (= (reverse l) (seq l)))","user":"5d4a6511e4b0776584bd6f21"},{"problem":27,"code":"#(if (string? %)                                                           \n  (= (clojure.string/reverse %) %)                                        \n  (= (reverse %) %))","user":"60460876e4b02d28681c77bd"},{"code":"#(= (into () %1) (reverse (into () %1)) )","problem":27,"user":"51eab308e4b0f1f103a0d150"},{"problem":27,"code":"(fn [input] (= (seq input) (reverse input)))","user":"5e8c0c5be4b0cb0169546320"},{"code":"(fn f [l] (case l [] true (and (= (first l) (last l)) (f (reverse (rest (reverse (rest l))))))))","problem":27,"user":"51cbc435e4b08d8387cbeddd"},{"code":"(fn [lst]\n  (if (coll? lst) (= (reverse lst) lst)\n    (= (clojure.string/reverse lst) lst)))","problem":27,"user":"52864dbce4b0239c8a67ae12"},{"problem":27,"code":"(fn [x]\n  (let [y (seq x)]\n    (= y (reverse y))))","user":"5ed3f2b9e4b016b56eae05c6"},{"problem":27,"code":"(fn pal [xs]\n  (if (<= (count xs) 1)\n    true\n    (and (= (first xs) (last xs))\n         (pal (drop 1 (drop-last xs))))))","user":"56b97792e4b0f26550335932"},{"problem":27,"code":"(fn  [xs]\n        (= (vec xs) (vec (reverse xs))))","user":"557c647ce4b05c286339e0c3"},{"problem":27,"code":"#(loop [s (seq %)]\n  (cond\n    (empty? s) true\n    (= (first s) (last s)) (recur (->> s (drop 1) (drop-last 1)))\n    :else false))","user":"58ee84e5e4b056aecfd47dab"},{"problem":27,"code":"(fn palindrome?[x](cond (empty? (rest x)) true (not= (first x) (last x)) false :else (palindrome? (rest (butlast x)))))","user":"57109477e4b09c608db70435"},{"code":"(fn [x] \n      (= (vec(reverse x)) (vec x))\n)","problem":27,"user":"4e8b73f1535d65386fec2121"},{"problem":27,"code":"(fn [s]\n  (if (string? s)\n    (= s (clojure.string/reverse s))\n    (= s (reverse s))))","user":"560c2e7ce4b05f002753df2b"},{"problem":27,"code":"(fn [ls]\n    (if (= (last ls) (first ls))\n      (if (< (count ls) 3)\n        true\n        (recur (rest (butlast ls))))\n      false))","user":"5ebc9feae4b00a66d4a95268"},{"code":"(fn [w]\n  (= (if (string? w) (apply str (reverse w)) (reverse w)) w))","problem":27,"user":"4f525fdce4b03ad3f0c10d37"},{"code":"#( let [x (seq %)] (= x (reverse x)))","problem":27,"user":"52808897e4b0757a1b171404"},{"problem":27,"code":"(fn palindrome [c]\n  (if (< (count c) 2) \n    true\n    (if-not (= (first c) (last c))\n\tfalse\n\t(palindrome (drop-last (rest c))  )\n    )\n  )\n)","user":"571aae1fe4b07c98581c3b5a"},{"problem":27,"code":"(fn my-pal [s]\n    (loop [se s]\n      (if (> 1 (count se))\n        true\n        (if (not= (first se) (last se))\n          false\n          (recur (rest (drop-last se)))\n          )\n        )\n      )\n    )","user":"57985f98e4b039eba2ecb114"},{"problem":27,"code":"#(= 0 (compare (vec (reverse %)) (vec %)))","user":"5e29cb4ce4b05b4b015161ae"},{"problem":27,"code":"(fn [x]\n  (loop [x x]\n    (let [r (drop-last (rest x))]\n      (if\n        (not= (first x) (last x)) \n          false\n          (if (not-empty r)\n            (recur r)\n            true)))))","user":"530e75d5e4b08068f379ecba"},{"code":"(fn pal [s] (= (reverse (reverse s)) (reverse s)))","problem":27,"user":"4e28ddd1535deb9a81d77efd"},{"problem":27,"code":"(fn[s] (or (empty? s) (and (= (first s) (last s)) (recur (rest (drop-last s))))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":27,"code":"(fn palin [xs]\n  (or \n    (<= (count xs) 1 )\n    (and\n      (= (first xs) (last xs))\n      (palin (rest (drop-last xs)))\n      )\n    )\n  )","user":"53bd7080e4b0d9a98559a6d1"},{"code":"(fn pal? [coll]\n  (cond\n   (empty? coll) \n   \ttrue\n   (= (first coll) (last coll))\n   \t(pal? (butlast (rest coll)))\n   true\n   \tfalse))","problem":27,"user":"51efd397e4b0249c592fbdeb"},{"problem":27,"code":"(fn [p] (= (reverse p) (seq p)))","user":"54b331dbe4b09f271ff37d37"},{"problem":27,"code":"(fn [s]\n  (cond\n   (<= (count s) 1) true\n   (not (= (first s) (last s))) false\n   :else (recur (drop-last (rest s)))\n   ))","user":"5c284f14e4b07e362c2305d6"},{"problem":27,"code":"(fn [x]\n  (= (nth x 0) (nth x (- (count x) 1))))","user":"5a7ff79ce4b00b71e582a046"},{"code":"(fn [x] (= (clojure.string/join (reverse x)) (clojure.string/join x)))","problem":27,"user":"509ac9cae4b050a581d3d579"},{"problem":27,"code":"(fn[x] (reduce #(and (= (first %2) (second %2)) %1) true (zipmap x (reverse x))))","user":"57168a0de4b07c98581c3afb"},{"problem":27,"code":"#(cond\n  (string? %) (= % (apply str (reverse %)))\n  :else (= % (reverse %)))","user":"5a984616e4b0d174b936c789"},{"problem":27,"code":"(fn [coll] \n  (if (<= (count coll) 1) true\n    (and (= (first coll) (last coll)) (recur (butlast (rest coll))))))","user":"5e84b48ee4b09a7a73c8bbc8"},{"code":"(fn ! [x]\n  (if (= 1 (count x))\n    true\n  (do (\n      if (= (first x) (last x))\n        (do (\n          if (= 2 (count x))\n            true\n            (! (next (butlast x)))\n        ))\n        false\n      )\n    )\n  ) \n)","problem":27,"user":"501c1492e4b086d93747d180"},{"problem":27,"code":"(fn aaa [x]\n  (if (= x ())\n    true\n    (if (= (first x) (last x))\n      (aaa (->> x (drop 1) (drop-last 1)))\n      false)))","user":"595bc925e4b066ee0a44afe2"},{"code":"#(= (seq %)\n   (reverse %))","problem":27,"user":"51c1d159e4b0d204dbe2ca18"},{"problem":27,"code":"(fn[xs](= (if (string? xs)(seq xs)xs) (reduce (fn[r x](conj r x)) '() xs)))","user":"5ce62d8ee4b0a17bb84e2b83"},{"code":"(fn [seq]\n  (if (string? seq)\n    (= (apply str (reverse seq) seq))\n    (= (reverse seq) seq)))","problem":27,"user":"4f8490fae4b033992c121c34"},{"problem":27,"code":"#(loop [s (seq %) r (reverse (seq %))]\n   (cond (empty? s) true\n         (not= (first s) (first r)) false\n         :else (recur (next s) (next r))))","user":"5310e968e4b08068f379ecdd"},{"code":"(fn palindrome? [s]\n   (do \n     (println s)\n     (cond\n       (empty? s) true\n       (= (count s) 1) true\n       (not= (first s) (last s)) false\n       :else (palindrome? (rest (butlast s)))\n       )\n     )\n   )","problem":27,"user":"52a7634ae4b0c58976d9ac16"},{"problem":27,"code":"#(= (reverse (seq % ) ) (seq %) )","user":"55e9842ae4b0121d4835fda1"},{"problem":27,"code":"(fn [l]\n  (if (= (vec (reverse l)) (vec l))\n    true\n    false))","user":"54f53d3ce4b0f2f3c5226e90"},{"problem":27,"code":"(fn [coll]\n  (if (string? coll)\n    (= coll (clojure.string/reverse coll))\n    (= coll (reverse coll))))","user":"5a3a3824e4b001c08efc0cc2"},{"code":"(fn [x]\n  (if (= (rest x) '())\n    true\n    (if (= (first x) (first (reverse x)))\n      (recur (rest (reverse (rest x))))\n      false)))","problem":27,"user":"4f57b523e4b0a7574ea7183c"},{"problem":27,"code":"(fn palindrome? [s]\n  (or\n   (empty? s)\n   (empty? (rest s))\n   (and   \n    (= (first s) (last s))    \n    (recur ((comp rest butlast) s))\n    )\n  )\n  )","user":"56586acae4b0f9d632dd84b4"},{"code":"(fn [xs]\n  (if (< (count xs) 2)\n    true\n    (and (= (first xs) (last xs))\n         (recur (-> xs rest drop-last)))))","problem":27,"user":"52b65f26e4b0c58976d9ad43"},{"problem":27,"code":"#(loop [arr %] (if (empty? arr) true (if (= (first arr) (last arr)) (recur (drop-last (drop 1 arr))) false)))","user":"5c8319c3e4b0c8042a70ce45"},{"code":"(fn [xs]\n  (=\n    (reduce #(cons %2 (if (seq? %1) %1 [%1])) xs)\n    (seq xs)))","problem":27,"user":"508ee17ae4b0706b2ed3ef8d"},{"code":"(fn palin\r\n  [s]\r\n  (if (= (str (apply str (reduce conj () s))) (str (apply str s)))\r\n  true\r\n  false))","problem":27,"user":"501668b4e4b052339a490e77"},{"problem":27,"code":"(fn [arg]\n  (= (reverse arg) (seq arg)))","user":"5dc4719ae4b02f9375f4e1b5"},{"code":"(fn [x] (every? true? (map = ( reverse x) x)))","problem":27,"user":"53350264e4b0656e627bfd73"},{"code":"(fn [x] (if (instance? java.lang.String x)\n          (= x (clojure.string/reverse x))\n          (= x (reverse x))))","problem":27,"user":"505193b7e4b0a561d07d8f08"},{"code":"(fn [xs]\n  (let [head (first xs)\n        tail (last xs)]\n    (if (or (nil? head) (nil? tail))\n      true\n      (if (not (= head tail))\n        false\n        (recur (butlast (rest xs)))))))","problem":27,"user":"514a6199e4b0829bd132edb9"},{"code":"(fn [col] (= (vec col) (reverse col)))","problem":27,"user":"5225fa79e4b0f4c7e20d29c7"},{"code":"(fn [a]\n    (every? identity\n      (let [_a (reverse a)\n            n (count a)]\n        (map #(= (nth a %) (nth _a %)) (range (/ (dec n) 2)))\n      )\n    )\n  )","problem":27,"user":"527513d8e4b03e8d9a4a74bd"},{"problem":27,"code":"#(=\n   (map (fn [c] c) %)\n   (reverse %))","user":"5629e651e4b00e49c7cb4814"},{"code":"(fn ! [s]\n  (if (seq s)\n    (if (= (first s) (last s))\n      (! (rest (butlast s)))\n      false)\n    true))","problem":27,"user":"523361d8e4b0f0b72fabf405"},{"problem":27,"code":"(fn [l] (every?  #(true? %) (for [i (range (dec (count l)))] (= (nth l i) (nth (reverse l) i)))))","user":"53f5f740e4b0db01ade6f9d8"},{"problem":27,"code":"(fn [x]\n          (= (reverse (reverse x)) (reverse x)))","user":"5df94f73e4b0a607a9a45cb6"},{"code":"(fn pali [x]\n  (let [y (reverse x)]\n    (let [z (for [i x] i)]\n    (= z y)\n  ))\n)","problem":27,"user":"52132f8de4b0d32679a50651"},{"problem":27,"code":"(fn [data]\n  (let [rdata (reverse data)]\n    (= data (cond \n              (string? data) (apply str rdata)\n              (vector? data) (vec rdata)\n              :else rdata))))","user":"58803ed9e4b0f1effa3b760f"},{"problem":27,"code":"#(loop [lst %]\n         (if (empty? lst)\n             true\n             (if (= (first lst) (last lst))\n                 (recur (butlast (drop 1 lst)))\n                 false))\n         )","user":"6074e278e4b069485764de51"},{"problem":27,"code":"#(if (= (into '() %) (reverse (into '() %)))\n   true\n   false)","user":"54b5ce67e4b05787c3b163ac"},{"code":"#(let [x (vec %)\n      half (int (/ (count x) 2.))\n      second_half (- (count x) half)\n     ]\n  (= (subvec x 0 half) (reverse (subvec x second_half)))\n)","problem":27,"user":"5142154ce4b0b50abeb46b2b"},{"problem":27,"code":"(fn [collection]\n  (= (seq collection) (reverse collection)))","user":"5712418fe4b09c608db70455"},{"code":"#(if (string? %)\n    (= (apply str (reverse %)) %)\n    (= (reverse %) %))","problem":27,"user":"50f07f6ae4b0bdaecbb47dc4"},{"code":"#(not= (count %) (count (set %)))","problem":27,"user":"4fa9c945e4b081705acca1e5"},{"code":"(fn [q] (= (seq q) (reverse q)))","problem":27,"user":"532e0b20e4b019098a6f8b45"},{"problem":27,"code":"(fn [s] (if (= true (string? s)) (= (clojure.string/reverse s) s) (= (reverse s) s)))","user":"59096794e4b047aa04b1999e"},{"problem":27,"code":"(fn [word]\n  (= \n   (seq word)\n   (reverse\n    (seq word))))","user":"53ac2d45e4b047364c04445b"},{"problem":27,"code":"(fn\n  [vals]\n  (loop [remain vals]\n    (if (<= (count remain) 1)\n      true\n      (if (= (first remain) (last remain))\n        (recur (rest (reverse (rest remain))))\n        false))))","user":"54d21e6de4b0e8a36923e5ee"},{"code":"(fn [sqnc]\n  (loop [lista (seq sqnc)]\n    (if (not (not-empty lista)) true\n\t(if (= (first lista) (last lista))\n          (recur (rest (drop-last lista)))\n          false))))","problem":27,"user":"5213348ae4b0d32679a50652"},{"code":"(fn [col]\n  (= (reverse col) (vec col)))","problem":27,"user":"518ccf6be4b05e6c8537e386"},{"problem":27,"code":"(fn [p] (empty? ((group-by identity (map = p (reverse p))) false)))","user":"5492164ee4b0b312c081ff3e"},{"problem":27,"code":"(fn [s] \n  (= s\n    (if (string? s)\n      (apply str (reverse s))\n      (reverse s))))","user":"59a0286be4b0871e7608b82f"},{"problem":27,"code":"(fn [palindrom] (let  [reverse_palindrom (into '() palindrom)]\n                    (= reverse_palindrom (into '() reverse_palindrom))))","user":"5ff99e57e4b06df49cee14b0"},{"problem":27,"code":"(fn a [b]  \n  (if (string? b) (= b (clojure.string/reverse b)) (= b (reverse b)))\n)","user":"5710e574e4b09c608db7043b"},{"code":"(fn [coll]\n  (let [c (seq coll)]\n    (= c (apply conj '() c))))","problem":27,"user":"500933a6e4b046cdb195e074"},{"problem":27,"code":"#(= (seq %) (reverse (seq %)) )","user":"56306e6ce4b073c1cf7a9be7"},{"problem":27,"code":"(fn f [c] (if (empty? (rest c)) true (if (= (first c) (last c)) (f (reverse (rest (reverse (rest c))))) false)))","user":"57b5ed94e4b0fbc9809a27b4"},{"problem":27,"code":"#(if (= [] %)\n   true\n   (let [fst (first %)\n         lst (last %)\n         others (rest (butlast %))]\n     (if (= fst lst)\n       (recur others)\n       false)))","user":"5999fe10e4b07157cc8dab02"},{"code":"#(if (string? %)\n     (= % (apply str (reverse %)))\n     (= % (reverse %)))","problem":27,"user":"4f9a7dc0e4b0dcca54ed6d0b"},{"problem":27,"code":"(fn [x] (if (string? x) (= (apply concat (reverse x) x))(= (reverse x) x)))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":27,"code":"#(let [source (interpose \"\" %)] (= source (reverse source)))","user":"53a69398e4b0ef122a8689ca"},{"code":"(fn [seq]\n  (not-any? false?\n    (for [i (range (/ (count seq) 2))]\n      (= (nth seq i) (nth seq (- (count seq) (inc i)))))))","problem":27,"user":"4fdb881ee4b05e33b9224f5e"},{"problem":27,"code":"(fn [lst] (= (cons (first lst) (rest lst)) (reverse (cons (first lst) (rest lst)))))","user":"57e404a3e4b0bfb2137f5ab1"},{"problem":27,"code":"(fn pal [s]\n  (if (empty? s)\n\ttrue\n    (and (= (last s) (first s))\n         (recur (rest (butlast s))))))","user":"5acd1a43e4b0e27600da7823"},{"problem":27,"code":"(fn [s] (= (lazy-seq s) (reverse s)))","user":"5a95c639e4b0d174b936c75e"},{"problem":27,"code":"(fn palindrome [x]\n  (if (or (= (count x) 0) (= (count x) 1))\n    true\n    (if (= (first x) (last x))\n      (palindrome (rest (butlast x)))\n      false)))","user":"55630cc1e4b0c656e3ff17e0"},{"problem":27,"code":"(fn   [x]\n  (loop [value x]\n    (if (nil? (first value))\n      true\n      (if (= (first value) (last value))\n        (recur (rest (reverse (rest value))))\n        false\n        )\n      )\n    )\n  \n  )","user":"5f693778e4b02876ed9fd03f"},{"problem":27,"code":"(fn isp [v] (or (= 0 (count v)) (and (= (first v) (last v)) (isp (rest (reverse (rest (reverse v))))))))","user":"5593619ae4b0c79f6e1db93c"},{"problem":27,"code":"#(= (reverse %) (seq %))\n; #(= (reverse %) (reverse (reverse %)))","user":"57fa6f2ee4b0d3187e900962"},{"problem":27,"code":"(fn [s] \n  (reduce (fn [b1 b2] (= b1 b2 true))\n    (map \n     (fn [i] (= (nth s i) (nth s (- (count s) i 1)))) \n     (range (quot (count s) 2))\n    )\n  )\n)","user":"5ff88607e4b06df49cee14a6"},{"code":"#(= (if (string? %) (apply str (reverse %)) (reverse %)) %)","problem":27,"user":"4dadaa5cc9a9d6ed2f99dc57"},{"code":"(fn palindrome? [lst] (= (seq lst) (reverse lst)))","problem":27,"user":"4fac031be4b081705acca221"},{"problem":27,"code":"(fn pal [coll]\n  (cond\n   (nil? coll) true\n   (= (first coll) (last coll)) (recur (butlast (drop 1 coll)))\n   :else false))","user":"5cf863c4e4b0b71b1d808a80"},{"problem":27,"code":"(fn [xs]\n    (= (apply str xs) ((comp (partial apply str) reverse) xs)))","user":"55c9ff22e4b0e31453f649f3"},{"problem":27,"code":"(fn palin? [n]\n   (= (seq n) (reverse n)))","user":"5634995fe4b0bfe05bf117be"},{"problem":27,"code":"#(loop [xs % reversed (reverse %)]\n   (cond\n    (and (empty? xs) (empty? reversed)) true\n    (not (= (first xs) (first reversed))) false\n    :else (recur (rest xs) (rest reversed))))","user":"54c8d4a8e4b045293a27f654"},{"code":"#(= (vec(reverse %)) (vec %))","problem":27,"user":"4e982877535dbda64a6f6b5b"},{"code":"(fn [aseq]\n  (reduce (fn [a b] (and a b)) (map = aseq (reverse aseq))))","problem":27,"user":"5315d4bfe4b08068f379ed37"},{"problem":27,"code":"(fn palin-check[ls]\n  (if (= (type ls) java.lang.String)\n    (= ls (apply str (reverse ls)))\n    (= ls (reverse ls))))","user":"53d87449e4b0e771c302546d"},{"problem":27,"code":"(fn [x]\n  (loop [y x]\n    (if (= y [])\n      true\n      (if (= (first y) (first (reverse y)))\n        (recur (reverse (rest (reverse (rest y)))))\n        false))\n    ))","user":"56d325ace4b0ea9b8538f7a9"},{"problem":27,"code":"(fn [v] (#(let [x (into '() %)] (= x (reverse x))) v))","user":"57733764e4b0979f896515e0"},{"problem":27,"code":"#(let [r (into [] %)] (= (reverse r) r))","user":"5880d686e4b0f1effa3b7623"},{"problem":27,"code":"#(loop [s % i 0 j (dec (count %))] (if (> i j) true (if (not= (nth s i) (nth s j)) false (recur s (inc i) (dec j)))))","user":"58f25609e4b08e1cf3471cff"},{"code":"(fn [coll]\n  (or (= (reverse coll) coll) \n      (= (apply str (reverse (flatten (partition 1 coll)))) coll)))","problem":27,"user":"532cb870e4b019098a6f8b34"},{"code":"(fn [lst]\n  (reduce #(and % %2) (map #(apply = %) (map vector lst (reverse lst)))))","problem":27,"user":"516f06dce4b06aac486e5b39"},{"code":"(fn [s] (loop [n1 0 n2 (- (count s) 1) p true]\n    (if (= p false)\n      p\n      (if (= n1 (int (/ (count s) 2))) \n        p\n        (recur (inc n1) (dec n2) (= (nth (vec s) n1) (nth (vec s) n2)) )))))","problem":27,"user":"53069e16e4b02e8216869798"},{"code":"(fn [l]\n  (cond (empty? l) true\n        (= (first l) (last l)) (recur (rest (butlast l)))\n        :else false))","problem":27,"user":"4e2d84bf535deb9a81d77f09"},{"code":"(fn paly? [pal-seq]\n  (= (reverse pal-seq) (reverse (reverse pal-seq))))","problem":27,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":27,"code":"(fn [arg] (loop [cs arg]                                                        \n                   (cond (<= (count cs) 1)                                             \n                        true                                                           \n                       (= (first cs) (last cs))                                        \n                       (recur (drop-last (rest cs)))                                   \n                       :else false)))","user":"5804b491e4b0a837a8b30cac"},{"problem":27,"code":"(fn [smth]\n  (let [len (count smth) mid (/ len 2)]\n    (loop [is-pal true current 0]\n      (if (or (false? is-pal) (> current mid))\n        is-pal\n      (recur (= (nth smth current) (nth smth (- len current 1))) (inc current))))))","user":"5adcc688e4b0837691e92c05"},{"code":"#(let [f (if (= (. (type %) getName) \"java.lang.String\") \n             clojure.string/reverse \n             reverse)]\n   (= % (f %)))","problem":27,"user":"52fa8f71e4b047fd55836ffb"},{"problem":27,"code":"#(= (into () %) (into () (into() %)))","user":"530e9bd6e4b08068f379ecbe"},{"code":"(fn palindrome [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))","problem":27,"user":"4e6093c9535d8ccf87e9fe54"},{"problem":27,"code":"#(= (into '() %) (into '() (into '() %)))","user":"58db7ae7e4b0a4d5acaab67f"},{"code":"#(= (seq %) (-> % reverse seq))","problem":27,"user":"4ff07229e4b0678c553fc323"},{"code":"; This attempt fails at the mentioned hint.\n; (fn [seq]\n;  (= seq (reverse seq)))\n\n; My attempt.  Convert to sequence to handle\n; the string case.\n(fn palindrome-mike[s]\n  (= (seq s) (seq (reverse s))))\n\n; Web found solution.\n; Check for the string case and handle\n; differently then other sequences.\n;(fn palindrome-web[s]\n;  (if (string? s) \n;    (= s (apply str (reverse s))) \n;    (= s (reverse s))))","problem":27,"user":"4f831fd3e4b033992c121c17"},{"problem":27,"code":"(fn [x]\n  (let [s (into [] x)]\n    (= s (rseq s))\n  )\n)","user":"53bd6ad0e4b0d9a98559a6cf"},{"code":"#(let [y (reverse %), c (quot (count %) 2)] (= (take c %) (take c y)))","problem":27,"user":"5098bcfee4b0cae2931060a1"},{"problem":27,"code":"(fn [l] (loop [a l b (reverse l)] (if (empty? a) true (if (= (first a) (first b)) (recur (rest a) (rest b)) false))))","user":"569a60c7e4b0542e1f8d1445"},{"problem":27,"code":"#( = (reverse ( seq %)) (seq %))","user":"55ec879ae4b0121d4835fdc8"},{"problem":27,"code":"#(let [reversed (reverse %)]\n   (= %\n      (if (string? %)\n        (clojure.string/join \"\" reversed)\n        reversed)))","user":"5ef8e9e0e4b09b61f08553cb"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (= (str x) (apply str (reverse x)))\n    (= x (reverse x))\n    ))","user":"5689bd04e4b0dcc4269f4082"},{"problem":27,"code":"(fn pal [li] (if (empty? li)\n           true \n           (if (= (first li) (last li)) (-> (drop-last li) rest pal ) false) \n         )\n  )","user":"59f85d78e4b0ca45a743a31a"},{"problem":27,"code":"(fn [coll]\n  (reduce #(and %1 %2)\n       (map #(= %1 %2) coll (reverse coll))))","user":"566ca8d6e4b0a866af6896bf"},{"problem":27,"code":"(fn\n   [sequence]\n   (loop \n     [workSequence (seq sequence)]\n     (if (<= (count workSequence) 1)\n       true\n       (if (not= (first workSequence) (last workSequence))\n         false\n         (recur (rest (butlast workSequence)))))))","user":"55f9b634e4b03cbcff9738c9"},{"problem":27,"code":"(fn [inpu] (= (seq inpu) (reverse inpu)))","user":"5df0c6ffe4b093ff717275c2"},{"code":"(fn palindrome? [s]\n  (if (or (empty? s) (= (count s) 1))\n      true\n      (and (= (first s) (last s))\n           (palindrome? (rest (drop-last s))))))","problem":27,"user":"504db141e4b021508a333965"},{"problem":27,"code":"(fn [sequence] (reduce #(and %1 %2) (map #(= (% 0) (% 1)) (zipmap sequence (reverse sequence)))))","user":"56449e4de4b0284900eef5f9"},{"problem":27,"code":"(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))","user":"55be33f0e4b01b9910ae2a05"},{"code":"(fn ([seq1] (reduce #(and % %2) (map #(= (first %) (last %)) (map vector seq1 (reverse seq1))))))","problem":27,"user":"5102ac9de4b00c483ae176fa"},{"code":"#(=(seq %)(reduce conj()%))","problem":27,"user":"50ed4626e4b01236b1d4983c"},{"problem":27,"code":"(fn [s]\n  (=\n   (take (. Math floor (/ (count s) 2)) s)\n   (reverse (take-last (. Math floor (/ (count s) 2)) s))))","user":"55d1f231e4b0e31453f64a4e"},{"code":"#(= (seq %)(reverse (seq %)))","problem":27,"user":"4ec6688d535d6d7199dd36cc"},{"problem":27,"code":"(fn palindrome? [collection]\n  (= (seq collection)\n     (reverse collection)))","user":"5515c8b1e4b055c2f668d4f2"},{"code":"(fn [s]\n  (let [m (-> s count dec (/ 2))\n        r (take-last m s)]\n    (loop [l s r (reverse r)]\n      (cond (empty? r) true\n        \t:else (and (= (first l) (first r)) \n        \t\t\t(recur (rest l) (rest r)))))))\n;; 1000000  300ms\n;; #(= (seq %) (reverse %)) ;; 50ms","problem":27,"user":"5370d152e4b0fc7073fd6e9d"},{"code":"#(= (vec %1) (reverse(vec %1)))","problem":27,"user":"5296008fe4b02ebb4ef7502a"},{"problem":27,"code":"(fn [ls] \n  (= (reverse (seq ls)) (seq ls)))","user":"546d41bde4b00cfc9eacc18c"},{"problem":27,"code":"#(not (some false?\n             (map = \n                  % \n                  (reduce conj '() %))))","user":"53b42b9ce4b047364c0444b3"},{"problem":27,"code":"#(= (reverse %) (if (string? %) (into () %) %))","user":"5bb5cd43e4b0a20761a23575"},{"problem":27,"code":";;(fn palindrome? [col]\n;;  (let [n (count col)\n;;        start (take (quot n 2) col)\n;;        end (take-last (quot n 2) col)]\n;;    (= start (reverse end))))\n\n\n;;(fn palindrome2? [x]\n;;  (let [n (loop [coll x i 0]\n;;            (if (and (= (first coll) (last coll))\n;;                     (> (count coll) 1))\n;;             (recur (drop 1 (drop-last 1 coll)) (inc i))\n;;             i))]\n;;    (= n (quot (count x) 2))))\n\n(fn palindrome?3 [x]\n  (= (vec x) (reverse x)))","user":"6092c0a9e4b00e9e6653c3dc"},{"code":"(fn palin* [x]\n  (if (instance? String x)\n     (= (apply str (reverse x)) x)\n     (= x (reverse x))))","problem":27,"user":"4f04a06d535dcb61093f6bd9"},{"problem":27,"code":"#(-> % reverse (= (seq %)))","user":"5499e23de4b03163384f4706"},{"code":"#(loop [l %]\n   (if (empty? l)\n     true\n     (if (= (first l) (last l))\n       (recur ((comp rest butlast) l))\n       false)))","problem":27,"user":"530caf86e4b02e82168697df"},{"problem":27,"code":"(fn is-palindrome? [string]\n  (let [_ (pr string)])\n\n  (let [string (vec string)]\n    (cond\n      (= (count string) 0) true\n      (= (count string) 1) true\n      (not (= (get string 0) (get string (- (count string) 1)))) false\n      :else (is-palindrome?\n              (subvec (vec string) 1 (- (count string) 1)))\n      )\n    )\n  )","user":"56530a1ce4b0f9d632dd846c"},{"code":"#(= (apply str (reverse %1)) (apply str %1))","problem":27,"user":"52bda384e4b07a9af5792305"},{"code":"(fn[x] (= ((comp concat reverse) x)(concat x)))","problem":27,"user":"53566247e4b04ce2eb3ed266"},{"code":"#(loop [sequence %]\n    (if (empty? sequence)\n      true\n      (if (= (first sequence) (last sequence))\n        (recur (rest (butlast sequence)))\n        false)))","problem":27,"user":"523288fee4b035af41902a88"},{"problem":27,"code":"(fn[x] (= (reverse (reverse x)) (reverse x)))","user":"5627d09ce4b00e49c7cb47db"},{"problem":27,"code":"(fn [in-x] (let [x-in (seq in-x)] (= x-in (reverse x-in))))","user":"5d520cabe4b0776584bd6f66"},{"problem":27,"code":"(fn [text]\n\t(= (seq text) (reverse text)))","user":"57382719e4b0cd1946bd1055"},{"code":"(fn [coll] (= (seq coll) (reverse coll) ))","problem":27,"user":"539cacbde4b0b51d73faaf2f"},{"problem":27,"code":"(fn [x]\n  (cond\n   (empty? x) true\n   (= (first x) (last x)) (recur (-> x (rest) (butlast)))\n   :else false))","user":"5e36ca7de4b0650de70e2b3c"},{"problem":27,"code":"(fn[a-s]\n\t(let [a-seq (vec a-s)\n          s (.size a-seq)\n\t\t  step (quot s 2)]\n\t  (loop [i 0\n\t  \t     r false]\n\t  \t(if (= i step)\n\t  \t\tr\n\t  \t\t(recur (inc i)\n\t  \t\t\t   (= (nth a-seq i) (nth a-seq (- s i 1))))))))","user":"573eb8f2e4b05c31a32c082f"},{"problem":27,"code":"(fn [x] (= (clojure.string/join  x) (clojure.string/join  (reverse x))))","user":"5e70c16de4b085ba37836dae"},{"problem":27,"code":"(fn [a] (-> a vec reverse (= (vec a))))","user":"538e29d1e4b0b51d73faae80"},{"problem":27,"code":"#(= (reverse %) (flatten (partition 1 %)))","user":"556086a2e4b0c656e3ff17c1"},{"problem":27,"code":"#(if\n     (= (type %) String)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))","user":"53a12b57e4b0ca733b9744ba"},{"problem":27,"code":"#(let [s (vec %)]\n   (= s (reverse s)))","user":"594a1475e4b07ddc2dafadf2"},{"problem":27,"code":"(fn [input]\n  (loop [seq-to-check input\n         is-palindrome 'true]\n    (if (empty? seq-to-check)\n      is-palindrome\n      (let [first-elem (first seq-to-check)\n            last-elem (last seq-to-check)\n            remaining-elems (drop-last (drop 1 seq-to-check))]\n        (if (= first-elem last-elem)\n          (recur remaining-elems 'true)\n          'false)))))","user":"54513516e4b0e397800069af"},{"code":"(fn [x]\n  (let [y (into [] (reverse x))]\n    (let [z (into [] (reverse y))]\n      (if (= y z)\n        true\n        false\n        )\n      )\n    )\n  )","problem":27,"user":"52420e2fe4b076e5d3121f48"},{"problem":27,"code":"(fn pal\n  [lst]\n  (if (empty? lst)\n    true\n    (if (= (first lst) (last lst))\n      (pal (butlast (rest lst)))\n      false)))","user":"59e18b9be4b08badc2a0c50f"},{"problem":27,"code":"#(=  (reverse (reverse %)) (reverse %))","user":"5f3f6570e4b004f08c61c563"},{"code":"#(let [x (seq %)] (= x (reverse x)))","problem":27,"user":"4f5d0f25e4b0030a34fb2b33"},{"problem":27,"code":"(fn palindrome? [l]\n  (if (string? l)\n    (= l (apply str (reverse l)))\n    (= l (reverse l))))","user":"52b9e920e4b07a9af57922c9"},{"problem":27,"code":"(fn [x]  (= x (if (= (type x) java.lang.String)\n                  (clojure.string/reverse x)\n                  (reverse x)\n\n                 )\n              ))","user":"60c7c23be4b0e0fa5f1b42eb"},{"problem":27,"code":"#(if (= (seq %) (reverse %))\n         true\n         false)","user":"5646bb8fe4b0284900eef614"},{"code":"(fn [l] (let [l (seq l)] (= l (reverse l))))","problem":27,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":27,"code":"(fn\n  [coll]\n  (every? #(= (nth coll %) (nth (reverse coll) %)) (range (count coll))))","user":"51071f2ee4b05b2b4eee748e"},{"code":"(fn [s]\n  (let [v (if (string? s)\n          (clojure.string/join (reverse s))\n          (reverse s))]\n    (= s v)\n  ))","problem":27,"user":"51e7abeae4b0a3e081b8cbee"},{"code":"(fn [x]\n  (every? #(true? %) (map #(= %1 %2) x (reverse x))))","problem":27,"user":"4defdf31535d08e6dec9fe14"},{"problem":27,"code":"#(= % ((fn [sq] (let [rsq (reverse sq)] (if (string? sq) (reduce str rsq) rsq))) %))","user":"5818b1a6e4b0c0e9c07b83c3"},{"problem":27,"code":"(fn [col] (\n    loop [col col]\n\t(if (empty? col)\n\t\ttrue\n\t\t(if (= (first col) (last col))\n\t\t\t(recur (->> col (drop-last) (drop 1)))\n\t\t\tfalse))))","user":"5367bc60e4b0243289761e81"},{"problem":27,"code":"(fn [in] \n  (let [v  (seq in), rv (reverse v)]\n    (=  v  rv)\n    )\n  \n  )","user":"5735ac67e4b0cd1946bd102b"},{"problem":27,"code":"(fn [lst] (loop [start 0\n                            end (- (count lst) 1)]\n                       (cond (or (and (= (- end start) 1) (= (nth lst start) (nth lst end)))\n                                 (= end start)) true\n                             (not (= (nth lst start) (nth lst end))) false\n                             :else (recur (inc start) (dec end)))))","user":"5bab31f1e4b0a20761a23471"},{"problem":27,"code":"(fn [opt-palindrome]\n          (let [palin-seq (seq opt-palindrome)\n                rever-seq (reverse palin-seq)]\n            (= palin-seq rever-seq)) )","user":"58a413b5e4b02bd94d917f07"},{"problem":27,"code":"(fn [aseq]\n  (if (string? aseq)\n    (= aseq (clojure.string/reverse aseq))\n  \t(= aseq (reverse aseq))))","user":"54ba8076e4b0ed20f4ff6eb5"},{"problem":27,"code":"(fn [lst]\n  (loop [fin '()\n         f (first (seq lst))\n         r (rest (seq lst))]\n    (if (= r '())\n      (= (conj fin f) (seq lst))\n      (recur (conj fin f) (first r) (rest r)))))","user":"57f8627ee4b0d3187e900926"},{"code":"(fn [c]\n  (if (string? c)\n    (= c (apply str (reverse c)))\n  \t(= c (reverse c))))","problem":27,"user":"50e41747e4b0463d32072489"},{"problem":27,"code":"(fn f [l] (if (not l) true (if (= (first l) (last l)) (-> l butlast next f) false)))","user":"59638af5e4b066ee0a44b0cc"},{"problem":27,"code":"(fn [coll]\n    (let [rev-coll (reverse coll)]\n      (= (seq coll) rev-coll)))","user":"540f3b4ee4b0addc1aec6729"},{"problem":27,"code":"(fn\n  [xseq]\n  (= (apply list xseq) (reverse xseq)))","user":"5795acb5e4b0e215f87e8486"},{"code":"(fn [x] \n  (= (sequence x) (reverse x)))","problem":27,"user":"4eb2c45e535d7eef3080734d"},{"problem":27,"code":"(fn temp [seqs]\n        (if (= (reverse(reverse seqs)) (reverse seqs))\n          true\n          false)\n  \n  )","user":"6038b6b4e4b0d5df2af222ef"},{"code":"(fn [lst] (= (reverse lst) (seq lst)))","problem":27,"user":"50720885e4b0e3170b5a8689"},{"problem":27,"code":"(fn [x] \n\t(= x (if (string? x) \n\t\t\t (apply str (reduce conj () x)) \n\t\t\t (reduce conj () x))))","user":"55bf785ee4b01b9910ae2a14"},{"code":"(fn [s]\n  (if (string? s)\n    (= (seq s) (reverse s))\n    (= s (reverse s))))","problem":27,"user":"4e7f32ee535db966e863cc3a"},{"problem":27,"code":"(fn [l] (= (seq l) (reduce conj '() (seq l))))","user":"550b5a53e4b06e50f9beb142"},{"problem":27,"code":"(fn f [l]\n  (if (second l)\n    (if (= (first l) (last l))\n      (f (drop 1 (drop-last l)))\n      false)\n    true))","user":"55cfa46ce4b0e31453f64a31"},{"code":"(fn [l]\n  ((fn palindrome? [l, start, end]\n    (cond\n     (= start end) true\n     (= (+ start 1) end) true\n     (not (= (nth l start) (nth l (- end 1)))) false\n     :else\n     (palindrome?\n      l\n      (+ start 1)\n      (- end 1))))\n  l 0 (count l)))","problem":27,"user":"50d2fa5ce4b049d4ed5650cf"},{"problem":27,"code":"(fn func [x] (= (seq x) (reverse x)))","user":"5e805895e4b085ba37836e44"},{"problem":27,"code":"(fn [x] (= (into () x)  (into [] x)))","user":"59f15e20e4b0966464fe6a5a"},{"code":"(fn f [x]\n  (cond\n   (or (= (count x) 0) (= (count x) 1)) true\n   (= (count x) 2) (= (first x) (last x))\n   (= (first x) (last x)) (f (butlast (rest x)))\n   true false))","problem":27,"user":"52d7b0ade4b09f7907dd137c"},{"problem":27,"code":"(fn [x]\n  (loop [i 0, j (dec (count x))]\n   (cond (>= i j) true\n         (= (nth x i)(nth x j)) (recur (inc i) (dec j))          \n         :else false\n   )\n  )\n)","user":"57f28b22e4b0511f1d294def"},{"problem":27,"code":"(fn [x] \n   (= (reverse x) (reverse (reverse x))))","user":"582625d3e4b051871117bef2"},{"code":"(fn [x]\n  (loop [l x]\n    (if (empty? l)\n      true\n      (if (= (first l) (last l))\n      \t(recur (butlast (rest l)))\n       \tfalse))))","problem":27,"user":"536123d6e4b0243289761e3f"},{"code":"(fn test-pali [x]\n  (cond\n    (empty? x) true\n    (= (first x) (last x)) (test-pali (rest (butlast x)))\n    true false))","problem":27,"user":"4ee259a1535d10e5ff6f5366"},{"code":"(fn[l] \n  (= \n    (reverse (take (quot (count l) 2) l))\n    (take-last (quot (count l) 2) l)))","problem":27,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":27,"code":"(fn palin?\n    [ls] \n    (if (empty? ls)\n        true\n        (let [f (first ls) l (last ls)]\n             (if (not (= l f)) \n                 false\n                 (palin? (rest (butlast ls)))))))","user":"5d48884ee4b07c84aa5ae6bb"},{"code":"(fn [xs] (= (vec xs) (reverse xs)))","problem":27,"user":"52bbe6e1e4b07a9af57922ef"},{"code":"#(= (take (int (/ (count %) 2)) %) (reverse (take-last (int (/ (count %) 2)) %)))","problem":27,"user":"4e5867d1535d8a8b8723a291"},{"problem":27,"code":"(fn [col]\n  (let [f (fn [acc a b]\n            (and (= a b)\n                 acc))\n        get-even-half-size (fn [col]\n    \t\t\t\t\t\t\t\t\t\t\t\t (let [n (count col)]\n      \t\t\t\t\t\t\t\t\t\t\t\t\t(if (odd? n) \n      \t\t\t\t\t\t\t\t\t\t\t\t\t\t(/ (dec n) 2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(/ n 2))))\n\t\t\tn (get-even-half-size col)]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                \n(loop [a (take n col)\n       b (take n (reverse col))]\n    (println a b)\n   (if (empty? a)\n        true\n        (if (= (first a) (first b))\n           (recur (rest a) (rest b))\n           false)))))","user":"51b1f2d4e4b02f8f128bb95f"},{"problem":27,"code":"(fn pal [x]\n  (if (empty? x)\n    true\n    (and (= (first x) (last x)) (pal (reverse (drop 1 (reverse (rest x))))))))","user":"59708e38e4b01722bebd4c65"},{"problem":27,"code":"(fn \n  [seqn]\n  (= (apply list seqn) (reverse seqn)))","user":"5854580ce4b07779d46863f9"},{"problem":27,"code":"(fn [col](if (< (count col) 2) true (if (= (first col)(last col)) (recur(rest(butlast col))) false)))","user":"545537c1e4b0e397800069dd"},{"code":"#(let [x (partition 1 %)] (= x (reverse x)))","problem":27,"user":"537393b2e4b06d7f452d9e14"},{"code":"(fn palindrome? [col]\n  (cond \n      (empty? col) true \n      (empty? (rest col)) true\n      (= (first col) (last col)) (palindrome? (drop-last (rest col)))\n      :else false\n))","problem":27,"user":"4eeaf88f535d93acb0a668a3"},{"code":"(fn [s]\n  (=\n   (reverse s)\n   (reverse (reverse s))))","problem":27,"user":"51b86a0fe4b09e0e347b2e78"},{"problem":27,"code":"(fn [a-seq]\n  (= (seq a-seq) (reverse a-seq))\n  \n  \n)","user":"5be33a16e4b0ed4b8aab4cd6"},{"code":"(fn [a]\n  (let [r (reverse a) rr (reverse (reverse a))]\n    (if (= rr r) true false)))","problem":27,"user":"503279b1e4b0e78df07b0930"},{"code":"(fn pal? [coll] (= (reverse coll) ((comp reverse reverse) coll)))","problem":27,"user":"50007353e4b0678c553fc40a"},{"problem":27,"code":"#(loop [rem % forward [] rev '()]\n   (if\n     (empty? rem) (= forward rev)\n     (recur (rest rem) (conj forward (first rem)) (conj rev (first rem)))\n     )\n   )","user":"559fefb4e4b0acc240e314ec"},{"problem":27,"code":"(fn [x]\n   (reduce #(and %1 %2)\n           (map #(= %1 %2)\n                (map (fn [n] n) x) (reverse (map (fn [n] n) x))))\n   )","user":"5dd90651e4b0948ae9d9ad97"},{"problem":27,"code":"(fn palin\n  [thing]\n  (or\n    (or (= (count thing) 0) (= (count thing) 1))\n    (and\n      (= (first thing) (last thing))\n      (palin (drop-last (rest thing))))))","user":"5df53ab7e4b03c219ef1a38e"},{"problem":27,"code":"#(every? true? \n         (loop [result [] x (reverse %) y (seq %)]\n           (if (and (empty? x) (empty? y))\n             result\n             (recur (conj result (= x y)) (rest x) (rest y)))))","user":"564b1ff8e4b0284900eef663"},{"problem":27,"code":"(fn [arg] (every? true? (map = arg (reverse arg))))","user":"577829f9e4b0979f8965165a"},{"problem":27,"code":"(fn pal? \n  [p] (if (or (empty? p) (= (count p) 1)) true (if (= (first p) (last p)) (pal? (butlast (rest p))) false)))","user":"549ea7e0e4b0f3d1d8e70fa3"},{"problem":27,"code":"(fn rev? [coll]\n  (->> \n    (map vector coll (reverse coll))\n    (map #(apply = %))\n    (every? identity )))","user":"5bb7c9e3e4b0a20761a235b0"},{"problem":27,"code":"#(= (reverse %) (map (fn [x] x) %))","user":"55f6fe09e4b06e875b46cea2"},{"problem":27,"code":"(fn [x] (if (= (reduce str (reverse x)) (reduce str x)) true false))","user":"56cef5e8e4b0ea9b8538f762"},{"code":"(fn [n] (let [x (seq n)]\r\n          (= (reverse x) x)))","problem":27,"user":"4f2893d0e4b0d6649770a019"},{"problem":27,"code":"(fn [x] \n  (= (apply str x) (apply str (reverse x))))","user":"57552f39e4b02ea1147992c1"},{"code":"(fn [s]\n  (cond \n   (<= (count s) 1) true\n   (= (first s) (last s)) (recur (-> s rest butlast))\n   :else false))","problem":27,"user":"4e50ad74535dc968683fc4ec"},{"problem":27,"code":"(fn [coll]\n   (= (seq coll) (reverse coll)))","user":"6014ccd3e4b074f607df66cd"},{"problem":27,"code":"(fn [string]\n  (if (string? string) (= string (apply str (reverse string)))\n    (= string (reverse string))))","user":"53dfb864e4b0d874e779ae43"},{"problem":27,"code":"(fn is-palindrome\n  [s]\n  (if (<= (count s) 1)\n    true\n    (if-not (= (first s) (last s))\n      false\n      (recur (rest (butlast s))))))","user":"572db6d5e4b0cd1946bd0f78"},{"code":"(fn palindrome [s] (= (seq s) (reverse s)))","problem":27,"user":"504e24e2e4b0f6ff3350c46d"},{"problem":27,"code":"(fn [x] \n  (= (first x) (last x)))","user":"5a29ee57e4b09cafd31c7f2b"},{"problem":27,"code":"(fn palindrome?\n    [coll]\n    (loop [i 0 j (dec (count coll))]\n      (if (> i j)\n        true\n        (and (= (nth coll i) (nth coll j))  \n             (recur (inc i) (dec j)))\n        )\n      )\n    )","user":"59fa5fe0e4b0ca45a743a35f"},{"code":"#(let [n (quot (count %) 2)] \n  (= (take n %) (reverse (take-last n %))))","problem":27,"user":"51197750e4b057cba170bc99"},{"problem":27,"code":"(fn [xs] \n  (= (seq xs) (reverse xs)))","user":"54f73502e4b01ecee9d88817"},{"code":"(fn palindrome [x]\n   (= (reverse x) (reverse (reverse x)))\n   )","problem":27,"user":"52af7a5ce4b0c58976d9acbd"},{"code":"(fn balindrome [xn] (if(string? xn)\n                      (= (reverse (reverse xn)) (reverse xn))\n                      (= xn (reverse xn))\n                         ))","problem":27,"user":"50edcc53e4b06330c1f87c49"},{"code":"(fn [coll]\r\n  (let [c (seq coll)\r\n        revd-c (reverse c)]\r\n   (= c revd-c)))","problem":27,"user":"4e18ed7a535d04ed9115e7f6"},{"problem":27,"code":"(fn [st]\n  (if (string? st) \n    (= st (apply str (reverse st)))\n    (= st (reverse st))))","user":"5f388489e4b0574c87022c69"},{"problem":27,"code":"(fn pali [someList]\n  (loop [remainingItems someList]\n    (if (or (= (count remainingItems) 1) (empty? remainingItems))\n      true\n      (if (= (first remainingItems) (last remainingItems) )\n        (recur (drop-last (rest remainingItems)))\n        false\n      )\n    )\n  )\n)","user":"5972198ee4b01722bebd4c7d"},{"code":"(fn [x]\n  (= (reverse x) (reverse (reverse x))))","problem":27,"user":"4df1e213535d08e6dec9fe20"},{"problem":27,"code":"(fn [x] \n  (if (= \"racecar\" x)\n    true\n  \t(= (reverse x) x)))","user":"60beb061e4b0e0fa5f1b428d"},{"problem":27,"code":"(fn palindrome?\n  ([x]\n   (or\n    (<= (count x) 1)\n    (palindrome? (first x) (butlast (rest x)) (last x))\n   )\n  )\n  ([fir mid las]\n   (and\n    (= fir las)\n    (palindrome? mid)\n   )\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"problem":27,"code":"(fn [s]\n  (let [half-len (quot (count s) 2)]\n    (= (take half-len s)\n       (reverse (drop ((if (odd? (count s)) inc identity) half-len) s)))))","user":"54058af3e4b0addc1aec6669"},{"problem":27,"code":"#(let [x (str %), r (apply str (reverse x))]\n   (or (= % (reverse %)) (= x r)))","user":"4ed3b4a7535d44c135fd68f5"},{"code":"(fn [x]\n  ((fn pal? [coll i]\n    (and\n      (= (nth coll i) (nth coll (- (count coll) (+ i 1))))\n      (if (= i (int (/ (count coll) 2)))\n        true\n        (pal? coll (inc i))))) x 0))","problem":27,"user":"4e50fb2c535dc968683fc4f1"},{"code":"(fn [a]\n  (loop [x 0]\n    (if (< x (- (count a) x))\n      (if (= (nth a x) (nth a (- (count a) (inc x))))\n        (recur (inc x))\n        false)\n      true)))","problem":27,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":27,"code":"(fn [xs]\n  (let [v (vec xs)]\n    (= v (rseq v))))","user":"56c21eafe4b05cc29241ee7e"},{"problem":27,"code":"#(let [s (into () %)] (= s (reverse s)))","user":"54f0c18ee4b024c67c0cf8a4"},{"code":"(fn palindrom? [x] \n  (= (seq x) (reverse x)))","problem":27,"user":"4f81fcbfe4b033992c121c03"},{"problem":27,"code":"(fn [coll] \n  (= (seq coll) \n     (reverse \n      (seq coll))))","user":"550309b9e4b086ebe8a79c65"},{"code":"#(let [s (seq %)]\r\n  (= s (reverse s)))","problem":27,"user":"4e07eac0535d04ed9115e7a9"},{"problem":27,"code":"(fn [inp]\n        (let [r (reverse inp)]\n              (if (string? inp)\n                (= (apply str r) inp)\n                (= r inp))))","user":"5489dd4de4b0e286459a11ef"},{"code":"#(if (string? %1) (= %1 (reduce str (reverse %1)))\n    (= (reverse %1) %1))","problem":27,"user":"51cbaf14e4b08d8387cbedda"},{"problem":27,"code":"(fn detect-pal [l]\n  (if (empty? l)\n    true\n    (if (not= (first l) (last l))\n      false\n      (detect-pal (rest (butlast l))))))","user":"53e92821e4b036ad0777e499"},{"code":"(fn [xs]\n  (every? identity (map #(= %1 %2) xs (reverse xs))))","problem":27,"user":"4f2a35ace4b0d6649770a03a"},{"code":"; original:\n;(fn racecar? [xs] \n;  (if (< (count xs) 2)\n;    true\n;    (and (= (first xs) (last xs))\n;         (racecar? ((comp rest butlast) xs)))))\n\n; derp:\n#(= (seq %) (reverse %))","problem":27,"user":"50d4c626e4b09cc622d65a70"},{"problem":27,"code":"#(let\n   [s (/ (count %) 2)\n    l (take s %)\n    r (take s (reverse %))]\n   (= l r))","user":"5647dc44e4b0284900eef624"},{"code":"(fn palindrome[str]\n  ( if (not-empty str) \n    ( if (not= (first str) (last str)) \n      false\n      (palindrome (drop-last (rest str))))\n    true))","problem":27,"user":"4f065217535dcb61093f6c0c"},{"code":"(fn [xs]\n\t(let [revfn (if (string? xs)\n              clojure.string/reverse\n              reverse)]\n      (= xs (revfn xs))))","problem":27,"user":"5344fe13e4b084c2834f4a32"},{"problem":27,"code":"(fn [ell]\n  (let [i (if (odd? (count ell)) (+ 1 (int (/ (count ell) 2))) (int (/ (count ell) 2)))]\n    (= (take i ell) (take i (reverse ell)))))","user":"57b99d48e4b0fbc9809a27f2"},{"problem":27,"code":"(fn palindrome\n  [s]\n  (if (empty? s)\n    true\n    (if (= (first s) (last s))\n      (palindrome (butlast (rest s)))\n      false)\n  )\n)","user":"5f6b8222e4b02876ed9fd052"},{"code":"(fn [x] (cond \n         (= (rest x) ())\n         true\n         (= (first x) (last x))\n         (recur (rest (drop-last x)))\n         :else false))","problem":27,"user":"539c9d7ee4b0b51d73faaf2d"},{"problem":27,"code":"(fn palindrom [coll] (if (= (seq coll) (reverse (seq coll))) true false))","user":"57f3b841e4b0511f1d294e0f"},{"code":"(fn [coll]\n  (let [fwd (vec coll)\n        bck (vec (reverse coll))]\n    ((complement contains?) (set (map = fwd bck)) false)))","problem":27,"user":"50b63c5ee4b0a86f8358ca69"},{"code":"(fn [s]  (= (str(first s)) (str (last s))))","problem":27,"user":"51367626e4b04ac1f358dd53"},{"problem":27,"code":"(fn [sq] (let [n (long (/ (count sq) 2))\n               fwd (take n sq)\n               bkwd (take n (reverse sq))]\n           (= fwd bkwd)))","user":"5839efeae4b089d5ab817d47"},{"problem":27,"code":"(fn pal\n\t[[x & more]]\n\t(if (not= x (last more)) \n\t\tfalse \n\t\t(if (< (count more) 3) \n\t\t\ttrue \n\t\t\t(pal (drop-last more)))))","user":"5436e0a8e4b032a45b8692fd"},{"code":"(fn [coll] (= (into () coll) (seq coll)))","problem":27,"user":"4e7d5eb8535db169f9c796d6"},{"problem":27,"code":"#(if (= (apply str %) (apply str(reverse  %))) true false)","user":"5885a608e4b0f1effa3b76bc"},{"code":"(fn [s] (= (vec s) (reverse (vec s)))\n  )","problem":27,"user":"52d8e23ae4b09f7907dd139b"},{"code":"#(every? (fn [x](true? x)) (map (fn [a b] (= a b)) %1 (reverse %1)))","problem":27,"user":"4ee8092f535d93acb0a66875"},{"problem":27,"code":"(fn isPali\n  [params]\n  (if (empty? params)\n    true\n  (if (= (first params) (last params))\n    (isPali (butlast (rest params)))\n    false\n    )\n  )\n)","user":"5688873ae4b0dcc4269f406b"},{"code":"(fn [s]\n  (if (empty? (rest s))\n    true\n    (if (not= (first s) (last s))\n      false\n      (recur (->> s (drop 1) (drop (count s)))))))","problem":27,"user":"53098be4e4b02e82168697b7"},{"problem":27,"code":"(fn [x]\n  ((fn helper [idx]\n    (if (> idx (quot (count x) 2))\n      true\n      (if (= (nth x idx) (nth x (- (dec (count x)) idx)))\n        (helper (inc idx))\n        false))) 0))","user":"5456e4e7e4b080a794c2c883"},{"problem":27,"code":"(fn [s]\n          (= (seq s)\n             (reverse s\n             )\n          )\n )","user":"5e30533ee4b05b4b0151620f"},{"problem":27,"code":"(fn palindrome? [_xs]\n  (loop [xs _xs]\n    (if (or (= [] xs) (= [] (rest xs)))\n      true\n      (if (not (= (first xs) (last xs)))\n        false\n        (recur (rest (butlast xs)))))))","user":"57006957e4b08d47c97781c8"},{"problem":27,"code":"(fn palindrome\n  [n] \n  (every? true? (map = n (reverse n))))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":27,"code":"(fn palin [x] \n    (cond \n\n      (nil? (first x)) true\n      (not= (first x) (last x)) false\n      :else (palin (\n        rest (reverse (rest x))))\n    )\n  )","user":"5e1d01b5e4b0dc9594008542"},{"code":"#(\n  = \n  %\n  (\n  (fn [x] (if \n            (string? x) \n            (clojure.string/reverse x) \n            (reverse x)\n          )\n  )\n  %)\n)","problem":27,"user":"4ec9d95b535d6d7199dd3701"},{"problem":27,"code":"#(loop [[h & r] %]\n  (let [t (last r), middle (butlast r)]\n    (cond\n      (nil? h) true\n      (nil? r) true\n      (not= h t) false\n      :else (recur middle))))","user":"5c219c0fe4b07e362c230581"},{"problem":27,"code":"#(= (-> % reverse) (seq %))","user":"533a2e02e4b0e30313ee6cb7"},{"problem":27,"code":"(fn palindrome [s]\n  (= (apply str s) (apply str (reverse s))))","user":"5f24671fe4b0f565ad998291"},{"code":"#( = (first %) (last %))","problem":27,"user":"4ecd0d84535d23f036227701"},{"code":"(fn [coll]\n        (loop [subcoll coll]\n                (if (= (count subcoll) 0)\n                        true\n                        (if (= (first subcoll) (last subcoll))\n                                (recur (butlast (rest subcoll)))\n                                false\n                        )\n                )\n        )\n)","problem":27,"user":"4eeb2b3c535d93acb0a668a7"},{"code":"(fn [col]\n  (loop [col col]\n    (if (empty? col)\n      true\n      (if (= (first col) (last col))\n        (recur (drop-last (rest col)))\n        false))))","problem":27,"user":"5166b716e4b060c690c1f4bf"},{"problem":27,"code":"(fn [string-or-seq]\n  (let [s (seq string-or-seq) rs (reverse s)]\n    (= s rs)))","user":"5993b28ee4b0b211ea3aaaba"},{"problem":27,"code":"(fn pal\n  [s]\n  (if (= (seq s) (reverse s))\n    true\n    false))","user":"597a7418e4b02382a38ad1e9"},{"problem":27,"code":"(fn [coll] (let [my-seq (seq coll) rev (reverse my-seq )] (= my-seq rev)))","user":"5d89427ae4b0915913b1d3b5"},{"code":"(fn [s]\n  (loop [ss s\n         c  (count s)]\n    (cond\n      (not= (first ss) (last ss))\n      false\n      (<= c 1)\n      true\n      :else\n      (recur (drop 1 (take (dec c) ss)) (- c 2)))))","problem":27,"user":"50afdf00e4b0c3f5ed5c29a5"},{"problem":27,"code":"(fn [sequence]\n  (let [strseq (map #(str %) sequence)]\n    (loop [in strseq]\n      (let [head (first in) tail (last in)]\n        (cond\n          (empty? in) true\n          (not= head tail) false\n          :default (recur (drop-last (drop 1 in)))\n        )\n      )\n    )  \n  )\n)","user":"5d97b033e4b0d3f9b434ad39"},{"problem":27,"code":"(fn [p] (= (seq p) (reverse p)))","user":"53aeb3ebe4b047364c044477"},{"code":"(fn [x] \n  (let [y (reverse x)]\n  (loop [u x, v y]\n    (cond (= u ()) true\n          (not (= (first u) (first v))) false\n          :else (recur (rest u) (rest v))))))","problem":27,"user":"4e49a7bb535dc968683fc4c6"},{"problem":27,"code":"(fn pali? [sq]\n  (= (seq sq) (reverse sq)))","user":"577154ffe4b0979f896515b1"},{"code":";; if length == 1, true\n;; else return\n;;   first == last\n;;   and subsequence missing first and last is palindrome\n\n\n(fn pal [x]\n  (if (>= 1 (count x)) true\n    (and (= (last x) (first x))\n         (pal (butlast (rest x))))))","problem":27,"user":"517f5db1e4b09104ecebe7ef"},{"code":"#(do\n    (let [ v (vec %),\n           c (count v),\n            l (/ c 2.0)]\n        (loop [i 0]\n          (if (< i l)\n            (if (= (nth v i) (nth v (- c i 1)) ) (recur (inc i)) false )\n            true)\n          ) )\n  )","problem":27,"user":"51eca2ace4b069f463c22cd0"},{"problem":27,"code":"(fn pal [l]\n  (if (<= (count l) 1)\n    true\n    (if (not= (first l) (last l))\n      false\n      (pal (butlast (rest l))))))","user":"56039a9de4b04bb52996e1bf"},{"code":"(fn palindrome? [subject] \n    (cond\n      (empty? subject) true\n      (not (= (first subject) (last subject))) false\n      :else (palindrome? (butlast (rest subject)))))","problem":27,"user":"4fd8544be4b0dab7d829f390"},{"code":"#(let [sequ (seq %)] (= sequ (reverse sequ)))","problem":27,"user":"4e93600b535dbda64a6f6b0e"},{"problem":27,"code":"(fn checkPallindrome [seqn]\n  (if (string? seqn)\n    (= seqn (apply str (reverse seqn)))\n    (= seqn (reverse seqn))))","user":"584574a1e4b089d5ab817e69"},{"problem":27,"code":"(fn [x]\n    (loop [front 0 \n           back  (count x)]\n          (or (>= front\n                  back)\n              (let [back (dec back)]\n                   (and (= (nth x front)\n                           (nth x back))\n                   (recur (inc front) back))))))","user":"5ec66326e4b08d0ec38692d5"},{"code":"(fn [x]\r\n  (loop [xs x]\r\n    (if (empty? xs) \r\n      true\r\n      (if (not= (first xs) (last xs))\r\n        false\r\n        (recur (drop-last (rest xs)))))))","problem":27,"user":"4fd9f5dbe4b05e33b9224f41"},{"code":"(fn [elements]\n  (= (seq elements) (reverse elements)))","problem":27,"user":"50a407fee4b08bbd0eb4ed32"},{"code":"#(if (= (first %) (last %)) true false)","problem":27,"user":"4e75d6b6535d7a570dd295c6"},{"problem":27,"code":"(fn pal\n\n  [the-sequence]\n  (let [the-seq (seq the-sequence)\n        reversed-seq (reverse the-sequence)]\n    (if (= the-seq reversed-seq)\n      true\n      false)))","user":"568aa458e4b0dcc4269f4092"},{"code":";(fn pali [x]\r\n;  (if (< (count x) 2)\r\n;    :true\r\n;    (if (= (first x) (last x))\r\n;     (pali (rest (butlast x)))\r\n;     :false)))\r\n\r\n(fn palindrome?\r\n  [x]\r\n  (every? (fn [[a b]] (= a b))\r\n          (partition 2 (interleave x (reverse x)))))","problem":27,"user":"5012aefce4b0c8732600222a"},{"problem":27,"code":"#(= (into () %)(into [] %))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":27,"code":"(fn [arr]\n  (let [n (/ (count arr) 2)]\n\t  (= (take n arr)\n    \t (reverse (take-last n arr))\n         )))","user":"605b319de4b079a07f8593f7"},{"problem":27,"code":"#(= (seq % ) (reverse %))","user":"560c37b5e4b05f002753df2e"},{"code":"; without reverse\n(fn [xs]\n  (if (> (count xs) 1)\n  (if (= (first xs) (last xs))\n      (recur (rest (butlast xs)))\n  \t   false)\n  \ttrue)\n  )","problem":27,"user":"501d52a8e4b066e56b9d0b20"},{"code":"#(= (reduce conj '() %) (seq %))","problem":27,"user":"52dc3bc8e4b09f7907dd13cb"},{"code":"(fn palindrome? [s]\r\n  (or (<= (count s) 1)\r\n    (and (= (first s) (last s))\r\n      (palindrome? (rest (butlast s))))))","problem":27,"user":"4f3d83b5e4b0e243712b1f69"},{"problem":27,"code":"(fn [coll] \n  (not= (count coll) \n     (count (set coll))))","user":"5971a017e4b01722bebd4c75"},{"code":"(fn isPal[list]\n  (cond\n   (< (count list) 2)\n     true\n   (= (first list) (last list))\n     (isPal (rest (butlast list)))\n   :else\n     false))","problem":27,"user":"525d490ae4b0cb4875a45d70"},{"problem":27,"code":"(fn palindrome? [elms]\n  \"returns true of given sequence is palindrome\"\n  (if (or (empty? elms) (= 1 (count elms))) true\n    (and (= (first elms)(last elms)) \n      (palindrome? (subvec (vec elms) 1 (- (count elms ) 1))\n    )) \n  )\n)","user":"5d828b7ee4b0915913b1d382"},{"problem":27,"code":"(fn [s] (apply = (map (partial apply str) [(reverse s) s])))","user":"54a6645be4b09f271ff37c87"},{"code":"(fn pd [x]\n    (if (< (count x) 2)\n      true\n      (if (= (first x) (last (rest x)))\n        (pd (rest (butlast x)))\n        false\n        )\n      )\n    )","problem":27,"user":"51b5a6e0e4b0f094dd986fce"},{"problem":27,"code":"(fn [in] \n  (= (reverse in) (reverse (reverse in))))","user":"56391b7ce4b0bfe05bf117ef"},{"problem":27,"code":"(fn pal[input]\n  (let [inseq (seq input)]\n    (if (<=\n         (count inseq)\n         1)\n      true\n      (and (= (first inseq) (last inseq))\n           (pal (-> inseq rest butlast))))))","user":"54b10d08e4b09f271ff37d18"},{"code":"(fn[l] (#(= % (reverse %)) (reduce conj [] l)))","problem":27,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn [a] (let [a (seq a)] (= a (reverse a))))","problem":27,"user":"50d93c53e4b0fd36a4b89223"},{"problem":27,"code":"#(loop [idx 0\n       racecar %] \n  (if (> idx (/ (count racecar) 2))\n    true\n    (if (= (last racecar) (first racecar))\n      (recur (inc idx) (drop-last (rest racecar)))\n      false)))","user":"592db566e4b072a2710fcf7c"},{"problem":27,"code":"(fn [thing]\n                    (loop [thing thing] \n                      (if (empty? thing)\n                        true\n                        (if (= (first thing) (last thing))\n                          (recur (rest (butlast thing)))\n                          false))))","user":"540f57f6e4b0addc1aec672b"},{"problem":27,"code":"(fn [l]\n  (let [rev (reverse l)]\n  \t(loop [one l\n           two rev]\n      (cond \n       (empty? one) true\n       (= (first one) (first two)) (recur (rest one) (rest two))\n       :else false))))","user":"56156feee4b05f002753dfc5"},{"problem":27,"code":"(fn [coll] \n (loop [y coll] \n  (if \n   (= (first y) (last y)) \n   (if \n     (<= (count y) 1) \n     true \n     (recur (butlast (rest y)))\n   )\n   false\n  )\n )\n)","user":"5df08767e4b093ff717275bf"},{"problem":27,"code":"(fn [coll]\n  (if (= 0 (mod (count coll) 2))\n    (loop [l (- (/ (count coll) 2) 1) r (/ (count coll) 2)]\n        (if (and (>= l 0) (< r (count coll)))\n          (if (= (nth coll l) (nth coll r))\n            (recur (- l 1) (+ r 1))\n            false)\n        true))\n    (let [m (- (/ (+ 1 (count coll)) 2) 1)]\n      (loop [l (- m 1) r (+ m 1)]\n        (if (and (>= l 0) (< r (count coll)))\n          (if (= (nth coll l) (nth coll r))\n            (recur (- l 1) (+ r 1))\n            false)\n        true)))))","user":"54e2a5f7e4b024c67c0cf7d1"},{"problem":27,"code":"(fn\n  [coll]\n  (= (apply str coll) (apply str (reverse coll))))","user":"4fe54675e4b0e8f79898fec1"},{"problem":27,"code":"(fn [x]\n  (= (rseq (vec x)) (vec x))\n  \n)","user":"59ac559ee4b00adcf69795d2"},{"code":"(fn [x] (= ((comp reverse reverse) x) ((comp reverse) x)))","problem":27,"user":"4f3e05a8e4b0e243712b1f79"},{"problem":27,"code":"(fn [c] (= (reverse  c) (seq c)))","user":"5426200ae4b01498b1a71b16"},{"problem":27,"code":"#(loop [xs %]\n    (cond (empty? xs) true\n          (not= (first xs) (last xs)) false\n          :else (recur (rest (butlast xs)))))","user":"5a9f2c53e4b0d174b936c812"},{"problem":27,"code":"(fn [xs]\n  (= (seq xs) (reverse xs) )\n  )","user":"5c896f46e4b048ec896c5940"},{"code":"#(= (list* %) (reverse %))","problem":27,"user":"4deff9f9535d08e6dec9fe15"},{"problem":27,"code":"(fn [list]\n  (loop\n    [l list]\n    (if (or (empty? l) (= 1 (count l)))\n      true\n      (if (= (first l) (last l))\n        (recur (butlast (rest l)))\n        false)\n      )\n    )\n  )","user":"54857657e4b0e286459a11ac"},{"problem":27,"code":"#(let [s (list* %)] (= (reverse s) s))","user":"51c1b644e4b0d204dbe2ca12"},{"problem":27,"code":"(fn [coll]\n  (let [n (quot (count coll) 2)]\n    (= (reverse (drop n coll))\n       (take (if (odd? (count coll)) (inc n) n) coll))))","user":"552356fae4b0882d96d091af"},{"problem":27,"code":"(fn palindrom-detector [s]\n(if (<= (count s) 1)\n  true\n  (and (= (first s) (last s))\n       (palindrom-detector (drop-last (drop 1 s))))))","user":"5af865a9e4b0cc2b61a3bcd1"},{"problem":27,"code":"#(loop [s %\n        rs (reverse %)]\n   (if (seq s) (if (= (first s) (first rs)) (recur (rest s) (rest rs)) false) true))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"#(= % (if (string? %) (apply str (reverse %))\n                      (reverse %)))","problem":27,"user":"4fa6d532e4b081705acca1be"},{"code":"#(= (apply str (reverse %)) (apply str %) )","problem":27,"user":"5213caeee4b0a98dd8fc4bd5"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (= x (clojure.string/join (reverse x)))\n    (= x (reverse x))))","user":"55151417e4b055c2f668d4da"},{"code":"(fn [coll] (reduce #(and %1 %2) (map (partial apply =) (map list coll (reverse coll)))))","problem":27,"user":"51da565ae4b02ceefd947765"},{"code":"(fn [coll] \n  (loop [[a & more] coll [b & rmore] (reverse coll) n (quot (count coll) 2)]\n(if (pos? n)\n(if (= a b) (recur more rmore (dec n)) false) true)))","problem":27,"user":"4ebf45c3535dfed6da9c6d9d"},{"problem":27,"code":"#(= (seq %)\n  (reverse %))","user":"557b3f29e4b05c286339e0ac"},{"problem":27,"code":"(fn\n  [x]\n  (if (= (reverse x) (seq x)) true false))","user":"56620138e4b068f2fe63dc71"},{"problem":27,"code":"#(let [cnt (count %) mid (quot (+ 1 (count %)) 2)] \n   \t (if (= 0 mid) \n       true\n       (loop [idx 0]\n       \t(if (= (nth % idx) (nth % (- cnt idx 1)))\n          (if (= mid (+ idx 1)) true (recur (inc idx)))\n   \t\t  false\n        )\n       )\n     )\n    )","user":"56815e2fe4b0945ebc182a84"},{"code":"(fn palindrome? [x]\n  (let [lst (seq x)]\n    (if (or (= 1 (count lst)) (= (first lst) (last lst)))\n        true\n        (if (= (first lst) (last lst))\n          (recur (rest (take (- (count lst) 1) lst)))\n          false))))","problem":27,"user":"4f11caf6535d64f603146424"},{"problem":27,"code":"(fn [x]\n\t(= (seq x) (reverse (seq x))\n\t)\n)","user":"58fb5a03e4b0438e51c2cf77"},{"code":"#(\n  \n = ( seq % ) ( reverse % ) \n)","problem":27,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"(fn pal [x] (if (> 2 (count x)) true (if (= (first x) (last x)) (pal (rest (drop-last x))) false)))","problem":27,"user":"52379c46e4b0fae3832e99db"},{"problem":27,"code":"(fn [tester]\n  (let [is-even (-> tester count even?)\n        length (count tester)]\n    (if is-even\n      (let [[a b] (split-at (/ length 2) tester)]\n        (= a (reverse b)))\n      (let [[a b] (split-at (dec (/ length 2)) tester)]\n        (= a (reverse (rest b)))))))","user":"55cde24ae4b0e31453f64a23"},{"code":"#(let [col % num \r\n  (if(odd?(count col))(/(-(count col)1)2)(/(count col)2))\r\ndropNum (if(odd? (count col)) (+ num 1) num)]\r\n(= (take num col)(reverse(drop dropNum col))))","problem":27,"user":"4e244ed5535d04ed9115e826"},{"code":"(fn [s]\n  (loop [start 0 end (- (count s) 1)]\n    (if (>= start end)\n      true\n      (if-not (= (nth s start) (nth s end))\n        false\n        (recur (inc start) (dec end))))))","problem":27,"user":"4e7e3504535db169f9c79709"},{"problem":27,"code":"(fn [x] (= x (if (string? x) (clojure.string/reverse x) (reverse x))))","user":"52cf1e25e4b07d0d72b2739c"},{"problem":27,"code":"(fn palindrome? [x] \n  (let [rev (reverse x)\n        sq (seq x)]\n    (= sq rev)))","user":"57d1d6c8e4b0bd073c202370"},{"code":"(fn [s] (= (vec s) (reverse (vec s))))","problem":27,"user":"4eff81ca535dcb61093f6a2d"},{"code":"(fn [coll] (let [s (seq coll)]\n             (= (reverse s) s)))","problem":27,"user":"51a54fb4e4b0def3c5c586a3"},{"problem":27,"code":";; palindrome\n(fn pal [xs]\n  (if (> (count xs) 1) ;; if we haven't reached the mid point\n    (if (= (first xs) (last xs)) ;; if the two ends are equal\n      (pal (rest (butlast xs))) ;; test the rest of the input\n      false) ;; else return false\n    true)) ;; else return true","user":"5705f569e4b0b0fb43fd0677"},{"problem":27,"code":"(fn isPalindrome [alist] (if (>= 1 (count alist)) true (if (= (first alist) (first (reverse alist))) (isPalindrome (rest (reverse (rest alist)))) false)))","user":"58950f29e4b00487982d5270"},{"problem":27,"code":"(fn[x](=(concat x) (reverse x)))","user":"55757e81e4b05c286339e063"},{"problem":27,"code":"#(loop [x %]\n   (cond\n    (= (first x ) (last x))\n    \t(if (> (count x) 1)\n          (recur (drop 1 (butlast x)))\n          true)\n\t:else false))","user":"5e6cfc25e4b04a83ad7cd28e"},{"code":"(fn fun [p] (if (> 1 (count p))\n\t         true\n             (if (= (first p) (last p))\n                (fun (rest (reverse (rest p))))\n                false)))","problem":27,"user":"52bdd135e4b07a9af579230a"},{"problem":27,"code":"(fn palindrome [sequence]\n  (cond\n    (string? sequence) (= (apply str (reverse sequence)) sequence)\n    :else              (= (reverse sequence) sequence)\n  )\n)","user":"5d58983fe4b02ba5928a6823"},{"problem":27,"code":"(fn [palin]\n  (loop [sec palin]\n    (if (empty? sec) true\n      (if (not (= (first palin) (last palin)))\n        false\n        (recur (butlast (rest sec)))\n        ))\n  ))","user":"545b0275e4b01be26fd74648"},{"code":"#(= % (if (string? %)\n                    (apply str(reverse %))\n                    (reverse %)\n                    ))","problem":27,"user":"4e3bcca9535deb9a81d77f54"},{"problem":27,"code":"(fn [coll] \n  (or \n   (empty? coll)\n   (and \n    \t(= (first coll) (last coll))\n    \t(-> coll (rest) (reverse) (rest) (recur)))))","user":"5637e73fe4b0bfe05bf117e0"},{"code":"(fn pal [items]\n  (if (< (count items) 2)\n    true\n    (if (false? (= (first items) (last items)))\n      false\n      (pal (butlast (rest items))))))","problem":27,"user":"4fd9d162e4b05e33b9224f3c"},{"code":"(fn [coll]\r\n  (loop [s coll]\r\n    (if (= (first s) (last s))\r\n      (if (or (= (count s) 1) (= (count s) 0))\r\n        true\r\n        (recur (rest (take (- (count s) 1) s))))\r\n      false)))","problem":27,"user":"4ddee37c535d08e6dec9fddc"},{"problem":27,"code":"(fn\n  [lst]\n  (let [\n         len (count lst) \n         mid (if (odd? len) (/ (- len 1) 2) (/ len 2) )]\n    (loop [x 0]\n      (if (<= x mid)\n        (if (= \n              (nth lst x)\n              (nth lst (- len x 1))\n          )\n          (recur (+ x 1))\n          false\n        )\n        true\n      )\n    )\n  )\n)\n;换了个新格式","user":"55ed1dc5e4b0121d4835fdd4"},{"code":"#(= (seq %) (reverse % ) )","problem":27,"user":"4f83ee95e4b033992c121c26"},{"problem":27,"code":"(fn [xs] (let [l (sequence xs)] \n           (= l (reverse l))\n         ))","user":"5996b419e4b07157cc8daab5"},{"code":"#(= % ((fn rev [str] (cond (= (type str) java.lang.String) (clojure.string/reverse str) :else (reverse str))) %))","problem":27,"user":"52f8b2a2e4b047fd55836fda"},{"problem":27,"code":"(fn isPal [coll] \n   (if (>= 1 (count coll))\n     true\n     (and \n      (= (first coll) (last coll)) \n      (isPal (butlast (rest coll))))))","user":"57a8eba2e4b0a96607956225"},{"code":"#(loop [str %]\n   (if (= 0 (count str))\n     true\n     (if (not (= (first str) (last str)))\n       false\n       (recur (rest(reverse(rest str)))))))","problem":27,"user":"50997a2be4b0cae2931060b6"},{"code":"#( = (vec %) (rseq (vec %)))","problem":27,"user":"51950793e4b09df09a77a3e4"},{"problem":27,"code":"(fn [sq] (if (string? sq)\n           (= sq (apply str (reverse sq)))\n           (= sq (reverse sq))))","user":"5f875a0ae4b020286baa5e94"},{"code":"(fn [x]\n        (loop [s (seq x)]\n              (if (empty? s) true\n                (if (not= (first s) (last s)) false\n                  (recur (rest (butlast s)))))))","problem":27,"user":"52a32b52e4b04e0c58e87bfc"},{"code":"(fn [x] \n         (= \n           (take (/ 2 (count x)) x) \n           (take (/ 2 (count x)) (reverse x))))","problem":27,"user":"4e62294c535d8ccf87e9fe5f"},{"code":"(fn[x]\n  (= (reverse x) (seq x)))","problem":27,"user":"4eef3afe535d305ff5cb7f1d"},{"problem":27,"code":"(fn [a-coln] \n  (= (reverse a-coln) (vec a-coln)))","user":"534cf749e4b084c2834f4a97"},{"problem":27,"code":"(fn [coll]\n  (= (vec coll) (reverse (vec coll))))","user":"5e155173e4b0a047bd49f6fd"},{"code":"(fn [coll]\n  (let* [x (vec coll)\n         l (count x)\n         m (quot l 2)\n         h (subvec x 0 m)\n         t (subvec x (if (= 1 (rem l 2)) (inc m) m))]\n    (= h (reverse t))))","problem":27,"user":"4eec82fe535d93acb0a668ae"},{"code":"(fn [x] ( = (seq x) (reverse x)) )","problem":27,"user":"507a9b29e4b08327cd804a6e"},{"problem":27,"code":"(fn f\n  [lst]\n  (if (= (reverse (reverse lst)) (reverse lst))\n    true\n    false))","user":"59e778aae4b0249b72820716"},{"code":"#(= (into () %) (reverse (into () %)))","problem":27,"user":"52be23dbe4b07a9af5792316"},{"code":"(fn [s]\n   (let [half (/ (count s) 2)]\n      (let [halves (split-at half s)]\n         (let [top (reverse (first halves))]\n            (let [bottom (second halves)]\n               (let [new-top (if (odd? (count s))\n                  (rest top)\n                  top\n               )]\n                  (= new-top bottom)\n               )\n            )\n         )\n      )\n   )\n)","problem":27,"user":"4e6ac49d535d8ccf87e9ff01"},{"code":"(fn f27 [a] (if (= (vec a) (reverse (vec a))) true false))","problem":27,"user":"52c08c59e4b07a9af5792351"},{"code":"(comp\n #(= % (reverse %))\n seq)","problem":27,"user":"5315ec83e4b08068f379ed39"},{"code":";; ugly\n; (fn foo [x]\n;   (if (empty? x)\n;     true\n;     (let [f (first x)\n;           l (last x)]\n;       (if (= f l)\n;         (foo (rest (take (dec (count x)) x)))\n;         false))))\n\n;; not so ugly?\n(fn [coll]\n  (reduce #(and %1 %2)\n          (map #(= %1 %2) (seq coll) (reverse coll))))","problem":27,"user":"53322cece4b019098a6f8b73"},{"problem":27,"code":"(fn [inputColl]\n   (loop [ leftPos 0\n          rightPos (- (count inputColl) 1) ]\n     (if (>= leftPos rightPos)\n       true\n       (if (= (nth inputColl leftPos) (nth inputColl rightPos))\n         (recur (+ leftPos 1) (- rightPos 1))\n         false\n       )\n     )\n   )\n)","user":"5cf7215ce4b0b71b1d808a67"},{"problem":27,"code":"#(= (vec%) (rseq (vec %)))","user":"5b29c33ee4b063e2438bcc64"},{"problem":27,"code":"(fn [seq-list] (= (seq seq-list) (reverse (seq seq-list))))","user":"5af19233e4b0cc2b61a3bc5f"},{"problem":27,"code":"(fn ispali [s]\n  (if\n    (< (count s) 2)\n    true\n    (and\n     (ispali (rest (reverse (rest (reverse s)))))\n     (= (first s) (first (reverse s)))\n    )\n  )\n)","user":"563758e3e4b0bfe05bf117d5"},{"problem":27,"code":"(fn [vectorIn] \n  ((fn [mapOut] (= (:plus mapOut) (:minus mapOut)))\n  ((fn [vecIn] \n   (reduce \n    (fn [mOut vIn] \n      {:plus (conj (:plus mOut) vIn) :minus (conj (:minus mOut) vIn)}) \n    {:plus [] :minus '()} \n    vecIn)) \n  vectorIn)))","user":"5e1b0140e4b0dc959400851c"},{"problem":27,"code":"#(if (string? %) (= % (apply \n                       str (reverse %)))  (= % (reverse %)))","user":"542edb4ae4b0dad94371f2c8"},{"problem":27,"code":"#(loop [s %]\n   (cond\n    (empty? s) true\n    (not= (first s) (last s)) false\n    :else (recur (rest (butlast s)))))","user":"56d63729e4b0ea9b8538f7ca"},{"problem":27,"code":"(fn [item] (= (seq item) (reverse item) ))","user":"5d1d4ec6e4b02ea6f0fb699f"},{"problem":27,"code":"(fn [s] (or (empty? s) (and (= (last s) (first s)) (recur (drop 1 (butlast s))))))","user":"54b7520de4b0ed20f4ff6e83"},{"code":"#(loop [inp %1, rinp (reverse %1)] (cond (empty? inp) true\n                                   \t     (not (= (first inp) (first rinp))) false\n                                          :else (recur (rest inp) (rest rinp))))","problem":27,"user":"52f5eefbe4b09b582c12c9cb"},{"code":"(fn [aSeq] (= (seq aSeq) (reverse aSeq)))","problem":27,"user":"4f1c2336535d64f60314647f"},{"problem":27,"code":"(fn [lst]\n  (loop [lst lst]\n    (cond\n     (empty? lst) true\n     (= (first lst)(last lst)) (recur (butlast (rest lst)))\n     :default false)))","user":"59dd387ae4b0a0ac046f2501"},{"problem":27,"code":"(letfn [(f [L] \n  (if (< (count L) 2)\n    true\n    (if (= (first L) (last L))\n      (f (rest (reverse (rest (reverse L)))))\n      false\n     )\n   )\n)] f)","user":"570005efe4b08d47c97781c4"},{"code":"#(= (-> % reverse) (-> % reverse reverse))","problem":27,"user":"50976c84e4b00ad8bab4e961"},{"code":"(fn toto [x] (if (< (count x) 2) true (if (= (first x) (last x)) (toto (rest (butlast x))) false)))","problem":27,"user":"511ba290e4b00c2a1fa7ff70"},{"problem":27,"code":"#(loop [c (first %) tail %]\n    (if (empty? tail)\n      true\n      (and (= c (last tail)) (recur (second tail) (-> tail rest reverse rest)))))","user":"5731e5a1e4b0cd1946bd0fca"},{"code":"(fn foo [x] \n  (every? \n    (fn [[a b]] (= a b)) \n(partition 2 \n  (interleave x \n    (reverse x)))))","problem":27,"user":"4ec3072a535dcc7ae8597d50"},{"problem":27,"code":"(fn [xs] (let [rxs (reverse xs)] (= (reverse rxs) rxs)))","user":"54565558e4b080a794c2c87f"},{"code":"#(and(not=(last%1):c)(not=(last%1)5))","problem":27,"user":"4e3b6bff535deb9a81d77f52"},{"problem":27,"code":"(fn p [s]\n  (= (seq s) (reverse s)))","user":"597a4277e4b02382a38ad1e2"},{"problem":27,"code":"(fn palin\n  [x]\n  (if (string? x)\n    (= (clojure.string/join (reverse x)) x)\n \t(= (reverse x) x)))","user":"60b7ef35e4b0e0fa5f1b4254"},{"problem":27,"code":"(fn [s] (let [sq (seq s)] (= sq (reverse sq))))","user":"57aa053fe4b0b8559636fc61"},{"problem":27,"code":"(fn [s]\n  (let [sa (seq s)]\n    (= sa (reverse sa))))","user":"51cf815de4b0e42293a22575"},{"code":"(fn [num] (= (seq num) (reverse num)))","problem":27,"user":"524a7060e4b05ef8e38e64a6"},{"problem":27,"code":"#(= (partition 1 %) (reverse (partition 1 %)))\n;#(= % (reverse %))","user":"5e13a6b7e4b099d064963001"},{"code":"(fn\n    [x]\n\t  (every? (fn [[a b]] (= a b))\n\t          (partition 2 (interleave x (reverse x)))))","problem":27,"user":"4fa03445e4b0dcca54ed6d45"},{"problem":27,"code":"(fn [coll] \n    (\n        loop [coll coll flag false] \n        (\n            if coll \n            (\n                if (= (first coll) (last coll))\n                (recur (next (drop-last coll)) true)\n                (recur nil false)\n            )\n            flag\n        )\n    )\n)","user":"5d40493ae4b05dd059a54364"},{"problem":27,"code":"(fn [x] (= (reverse (map str (seq  x))) (map str (seq x) )))","user":"54eca495e4b024c67c0cf855"},{"problem":27,"code":"(fn [s] (= (reduce conj '() (vec s)) (vec s)))","user":"60b8f098e4b0e0fa5f1b425f"},{"problem":27,"code":"(fn palindrome [x]\n\t(= (seq x) (reverse x))\n)","user":"5f22dabbe4b0f565ad99828a"},{"problem":27,"code":"(fn palindrome [s] \n  (loop [ss s]\n    (if (empty? ss)\n      true\n      (if (= (first ss) (last ss))\n        (recur (rest (butlast ss)))\n   \t\t  false))))","user":"569aca1ee4b0542e1f8d144d"},{"code":"(fn [thing]\n  (= (reverse thing)\n     (reverse (reverse thing))\n  )\n)","problem":27,"user":"4ede0511535d10e5ff6f5330"},{"code":"(fn palirecur? [s]\n  (loop [temp s val (= (first s) (last s))]\n    (if (zero? (count temp))\n      val\n      (recur (rest (butlast temp)) val)\n      )\n    )\n  )","problem":27,"user":"5195b8cce4b04c0af7ff3c08"},{"problem":27,"code":"#(= (reverse (seq %) ) (seq %))","user":"540217e1e4b0df28a13c62cb"},{"code":"(fn [s] (= (into [] s) (reverse (into [] s))))","problem":27,"user":"5127aca5e4b08a1940e725b8"},{"problem":27,"code":"#(let [x (into [] %)] (= x (reverse x)))","user":"5606ea56e4b08b23635d317b"},{"problem":27,"code":"(fn [s]\n  (if (= (seq s) (reverse s))\n    true\n    false))","user":"5d13c5d2e4b0902706380dbf"},{"code":"#(let [d %] (= (vec d) (vec (reverse d))))","problem":27,"user":"51a2a376e4b00957e520db7f"},{"problem":27,"code":"#(let [t (seq %)] (= t (reverse t)))","user":"55b6a63ae4b01b9910ae299b"},{"code":"(fn\n  [%]\n  (every? (fn [[a b]] (= a b))\n          (partition 2 (interleave % (reverse %)))))","problem":27,"user":"528ba1d9e4b0239c8a67aea2"},{"problem":27,"code":"#(loop [o %\n       i (reverse %)\n       r true]\n  (if (empty? o)\n    r\n    (recur (rest o) (rest i) (and r (= (first o) (first i))))))","user":"572ad0fde4b0f4d77e651244"},{"problem":27,"code":"(fn [x] (every? true? (map #(==(compare %1 %2)0) (flatten(partition 1 x)) (reverse x))))","user":"57752a2de4b0979f89651613"},{"problem":27,"code":"(fn [my_seq]\n  (if (string? my_seq)\n    (let [rev_my_seq (clojure.string/reverse my_seq)]\n      (= my_seq rev_my_seq))\n  (= my_seq (reverse my_seq))))","user":"54bfc88ae4b0ed20f4ff6f09"},{"problem":27,"code":"#(= (->> %1 reverse reverse) (reverse %1) )","user":"5bbbd484e4b0a20761a23617"},{"code":"(fn [s] (if (= (apply str s) (apply str (reverse s))) true false))","problem":27,"user":"536673a8e4b0243289761e76"},{"problem":27,"code":"#(= (into '() %) (into '() (reverse %)))","user":"55dd0aebe4b050e68259b3bf"},{"problem":27,"code":";; note: I recalled that reverse converts things to sequences...\n#(= (seq %) (reverse %))","user":"60917abde4b00e9e6653c3d5"},{"problem":27,"code":"(fn palindrome? [A]\n  (cond (<= (count A) 1)\n        true\n   :else\n        (and \n          (= (first A) (last A))\n          (palindrome? (subvec (vec A) 1 (- (count A) 1)))\n        )\n  )\n)","user":"550cbb3be4b06e50f9beb155"},{"problem":27,"code":"(fn [x]\n  (every? identity (map = x (reverse x))))","user":"53c6e25ee4b00fb29b2212a4"},{"problem":27,"code":"#(loop [i 0\n       j (- (count %) 1)]\n    (if (>= i j)\n      true\n      (if (= (nth % i) (nth % j))\n        (recur (inc i) (dec j))\n        false)))","user":"543c5200e4b032a45b86933e"},{"problem":27,"code":"(fn [s]\n  (=\n    (reverse s)\n    (reverse (reverse s))\n  )\n)","user":"56c23ca6e4b05cc29241ee7f"},{"problem":27,"code":"(fn [s]\n  (loop [s s]\n   (cond (< (count s) 2)\n         true\n         (= (first s) (last s))\n         (recur (drop-last (rest s)))\n         :else\n         false)))","user":"5b14475be4b0cc2b61a3be5a"},{"problem":27,"code":"(fn fac [sq]\n  (loop [i 0]\n    (if (> (* 2 i)  (count sq))\n      true\n      (if (= (nth sq i) (nth sq (- (count sq) (inc i))))\n        (recur (inc i))\n        false))))","user":"5fe09d1fe4b05ac5b16ea15b"},{"problem":27,"code":"(fn palindrome? [coll]\n  (cond\n   (empty? coll) true\n   (= (first coll) (last coll)) (palindrome? (butlast (rest coll)))\n   :else false))","user":"57c0393be4b05aa3c4741c90"},{"problem":27,"code":"(fn [li] \n  (if (< (count li) 2)\n    true\n    (if (= (first li) (last li))\n      (recur (drop-last (rest li)))\n      false\n    )))","user":"59005094e4b0438e51c2d01e"},{"problem":27,"code":"(fn [x]\n                             (= x (if (= (class x) java.lang.String)\n                                                (apply str (reverse x))\n                                                (reverse x))))","user":"5bf5ddfde4b0bdcf453d159e"},{"problem":27,"code":"(fn [seq]\n  (cond (empty? seq) true\n        (= (first seq) (last seq))\n        \t(recur (rest (butlast seq)))\n        :else false))","user":"554dff83e4b00713264bd98d"},{"problem":27,"code":"#(= (clojure.string/join \"\" %1) (clojure.string/join \"\" (reverse %1)))","user":"54635083e4b01be26fd746bd"},{"problem":27,"code":"(fn f [s]\n  (let [ss (seq s)]\n  (= ss (reverse ss))))","user":"58ac1135e4b0005cfeb1a73f"},{"code":"(fn palindrome? [x] (= (seq x) (reverse x)))","problem":27,"user":"4e6fee9e535d5021c1a8962a"},{"code":"(fn palindrome? [s]\n  (if (<= (count s) 1) true\n    (and (= (first s) (last s))\n         (palindrome? (butlast (rest s))))))","problem":27,"user":"5119f3d5e4b06c8af0111818"},{"problem":27,"code":"#(= (vec (reverse %)) (seq %))","user":"56af5f74e4b061e3ca319acf"},{"problem":27,"code":";#(= % (reverse %))\n(fn [x] \n  (if (string? x)\n    (=  x (apply str (reverse x)))\n    (= x (reverse x))))","user":"5a022949e4b01bb0ae8afd60"},{"problem":27,"code":"#(=  (reverse (vec %1)) (vec %1))","user":"5da98129e4b000c986472c33"},{"problem":27,"code":"(fn palindrome?\n  [coll]\n  (if (#{0 1} (count coll))\n    true\n    (let [c (vec (seq coll))\n          s (first c)\n          e (peek c)]\n      (if (not (= s e))\n        false\n        (palindrome? (pop (vec (next c))))))))","user":"5493ccbbe4b0b312c081ff50"},{"problem":27,"code":"(fn palindrome?\n  ([sequ] (palindrome? '() sequ))\n  ([front back]\n   (if (empty? back)\n     false\n     (letfn [(test [a b]\n               (if (string? b)\n                 (= b (apply str a))\n                 (= b a)))]\n       (or (test front back)\n           (test front (rest back))\n           (palindrome? (conj front (first back))\n                        (rest back)))))))","user":"589c6914e4b00487982d535d"},{"problem":27,"code":"#(every? (fn [v] (apply = v)) (map vector % (reverse %)))","user":"4ff8487be4b0678c553fc397"},{"problem":27,"code":"(fn [x]\n\t(if (string? x)\n   \t\t(= x (apply str (reverse (map #(str %) x))))\n  \t\t(= x (reverse x))))","user":"56c3afdde4b05cc29241ee91"},{"code":"(fn [c] \n\t(loop [acc c]\n \t\t(if (not= (first acc) (last acc)) \n      \t\tfalse \n      \t\t(if (= (first acc) (last acc)) \n              true \n              (recur (-> acc rest drop-last) ))\n  )))","problem":27,"user":"52fc9b94e4b047fd5583701d"},{"problem":27,"code":"#(loop [coll %]\n    (if (empty? coll)\n      true\n    (if (not= (first coll) (last coll))\n      false\n      (recur (butlast (rest coll))))))","user":"5d9e8e40e4b000c986472bc2"},{"problem":27,"code":"(fn [coll] (reduce #(and %1 %2) true (map = coll (reverse coll))))","user":"5c534431e4b0fb8c5ffd99f2"},{"code":"(fn [x]\n    (if (or (vector? x) (list? x)) \n     (= x (reverse x))\n     (= (str x) (apply str (clojure.string/reverse (str x))))\n     )\n    )","problem":27,"user":"528ce039e4b0239c8a67aebc"},{"code":"(fn[c]\r\n   (if (= (seq c) (reverse c)) true false)\r\n)","problem":27,"user":"4ff07688e4b0678c553fc324"},{"problem":27,"code":"(fn palindrome? [xs]\n  (let [s (vec xs)]\n    (cond\n     (or (empty? xs) (= 1 (count xs))) true\n     (= (first s) (last s)) (palindrome? (subvec s 1 (dec(count s))))\n     :else false)))","user":"560ae540e4b05f002753df0d"},{"code":"(fn palindrome? [x]\n  (= x ((if (coll? x) reverse clojure.string/reverse) x)))","problem":27,"user":"4f48f587e4b0d56e7bb92be2"},{"code":"#(=(vec%)(reverse%))","problem":27,"user":"4dd66da7535d2dad7130b5c8"},{"problem":27,"code":"(fn reverse? [t]\n  (if (string? t)\n    (= t  (clojure.string/reverse t))\n    (= t (reverse t))))","user":"56cf80f9e4b0ea9b8538f76a"},{"problem":27,"code":"(fn [coll] \n   (if (string? coll)\n     (let [new-string (apply str (reverse coll))]\n       (if (= coll new-string)\n         true\n         false))\n     (= coll (reverse coll))))","user":"53b05a36e4b047364c044481"},{"code":"(fn [x] \n  (= (reverse x) (seq x))\n)","problem":27,"user":"4e749e84535d7a570dd295b9"},{"code":"(fn [s]\n  (= (reverse s) (reverse (reverse s))))","problem":27,"user":"4f8c50f9e4b02e764a0a5195"},{"code":"(fn pax [x] (if(= (seq x) (reverse (seq x))) true false))","problem":27,"user":"4eeb8f68535d93acb0a668a9"},{"problem":27,"code":"#(if (string? %)\n  (= (reduce str (reverse %)) %)\n  (= (reverse %) %)\n)","user":"56d09e8ee4b0ea9b8538f782"},{"problem":27,"code":"#(loop [seq %] (if (<= (count seq) 1)\n  true\n  (if (= (first seq) (last seq))\n    (recur (-> seq (rest) (drop-last)))\n    false)))","user":"5b6002c2e4b0c6492753e6fb"},{"code":"#(= (take (/ (count %) 2) %) (take (/ (count %) 2) (reverse %)))","problem":27,"user":"500e6c4ee4b04a05d36fcc05"},{"problem":27,"code":"(fn [input]\n  (if (coll? input)\n    (= input (reverse input))\n    (= input (clojure.string/join \"\" (reverse input)))))","user":"5b71ee18e4b047b03b20369b"},{"code":"#(= (reverse %) (reverse (reverse %)) )","problem":27,"user":"52b5b2d1e4b0c58976d9ad3b"},{"problem":27,"code":"(fn [coll] (every? true? (map (fn [[x y]] (= x y)) (map vector coll (reverse coll)))))","user":"540904a7e4b0addc1aec66d2"},{"problem":27,"code":"(fn [elem]\n  (if (= java.lang.String (class elem))\n    (= elem (clojure.string/reverse elem))\n    (= elem (reverse elem))))","user":"55265376e4b0ffed3738f91b"},{"problem":27,"code":"#(if (> (count %) 1)\n    (if (= (first %) (last %))\n      (recur (rest (reverse (rest %))))\n      false)\n    true)","user":"5d14daa6e4b0902706380dcb"},{"problem":27,"code":"(fn [coll]\n  (loop [data (vec coll)\n         rev () ]\n    (if (empty? data)\n\t\t(= rev (vec coll))\n    \t(recur (rest data) (conj rev (first data)))\n    )\n   )\n)","user":"57cc14aae4b05aa3c4741d4a"},{"problem":27,"code":"(fn [arr] \n  \t\t\t\t(if (= (seq arr) (reverse arr))\n                       \n            true\n            false)\n  )","user":"59636b43e4b066ee0a44b0c4"},{"code":"(fn [xs] (let [ys (seq xs)] (= ys (reverse ys))))","problem":27,"user":"4fa6a491e4b081705acca1bc"},{"code":"#(every? (fn [[a b]] (= a b)) (zipmap (reverse %) %))","problem":27,"user":"5097b556e4b00ad8bab4e970"},{"problem":27,"code":"(fn [asdf] (= (seq asdf) (reverse asdf)))","user":"55c7c4dfe4b0e31453f649d7"},{"code":"(fn [coll]\r\n  (loop [coll (vec coll) posL 0 posR (dec (count coll))]\r\n    (cond\r\n       (< posR posL) true\r\n       (not= (get coll posL) (get coll posR)) false\r\n       :else (recur coll (inc posL) (dec posR)))))","problem":27,"user":"4e88feef535d8b9bb0147ca8"},{"problem":27,"code":"(fn [xs] (= (seq xs) (-> xs reverse seq)))","user":"5bc833a5e4b07a9b28b100bb"},{"code":"(fn [l] (= (reverse l) (seq l)) )","problem":27,"user":"51ee669ce4b09915f9b23c03"},{"code":"(fn p [x] \n    (let [ h (first x) t (rest x) m (butlast t) ] \n        (condp = (count x) \n            0 true \n            1 true \n            2 (= h (first t))\n            (and (= h (last t)) (p m)))))","problem":27,"user":"5398305fe4b0b51d73faaef6"},{"problem":27,"code":"(fn pal \n  [my-seq]\n  (loop [iter 0]\n        (if (= iter (count my-seq))\n            true\n            (do \n              (if (= (nth my-seq iter) (nth my-seq (- (count my-seq) (inc iter))))\n                  (recur (inc iter))\n                  false\n              )\n            )\n        )\n  )\n)","user":"55acd080e4b03311e7b73298"},{"problem":27,"code":"(fn palindrome? [x] \n  (if (instance? java.lang.String x)\n    (= x (clojure.string/reverse x))\n    (= x (clojure.core/reverse   x))))","user":"55fb58b2e4b0f488688e0661"},{"problem":27,"code":"(fn [word]\n  (if (instance? String word)\n    (= word (apply str (reverse word)))\n    (= word (reverse word))))","user":"5d64013ce4b0c9e5857d502d"},{"problem":27,"code":"(fn palindrom [pln]\n   (let [x (vec pln) y (vec (reverse pln))\n         z (for [i (range (count x))\n                 :let [z (= (get x i) (get y i))]\n                 :while (false? z)\n                 ]\n             z\n             )\n         ]\n     (empty? z)\n     )\n   )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"problem":27,"code":"(fn isPalindrome [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n       (isPalindrome (butlast (rest s)))))\n  )","user":"552d487ee4b076ab5578f7e4"},{"problem":27,"code":"#(let [x (seq %)]\n   (= x (reverse x)))","user":"4f9e830ae4b0dcca54ed6d2c"},{"problem":27,"code":"#(= (reverse (subvec (into [] %)  (int (Math/ceil (/ (count %) 2))) (count %)))  (subvec (into [] %) 0 (int (Math/floor (/ (count %) 2))  )))","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":27,"code":"(fn [s] (reduce #(and %1 %2) true (mapcat #(vector (= %1 %2)) s (reverse s))))","user":"5d728116e4b02e6b30c9350f"},{"code":"#(= (map str %) (map str (reverse %)))","problem":27,"user":"51a3cc45e4b0e77c4ca60bfb"},{"code":"(fn [l]\n  (loop [s l]\n    (if (<= (count s) 1) \n      true\n      (if (not (= (first s) (last s)))\n        false\n        (recur (rest (reverse (rest (reverse s)))))))))","problem":27,"user":"51a4b5dee4b0def3c5c58697"},{"problem":27,"code":"#(loop [coll % rev (reverse %)] (if (empty? coll) true (if (= (first coll) (first rev)) (recur (rest coll) (rest rev)) false)))","user":"60225c2ae4b0d5df2af22201"},{"problem":27,"code":"(fn p[x] (= (partition-by identity x) (reverse (partition-by identity x))))","user":"55f04940e4b06e875b46ce21"},{"problem":27,"code":"(fn [lst]\n   (if (string? lst)\n      (if (= (seq lst) (seq (reverse lst)))\n         true\n         false)\n      (if (= lst (reverse lst))\n         true\n         false)))","user":"5a653f80e4b0512ff01cd9b2"},{"problem":27,"code":"(fn f [q]\n  (empty? (for [ [a b](map vector q (reverse q)) :when (not= a b) ] a )))","user":"54b45938e4b05787c3b1638f"},{"problem":27,"code":"#(= (reverse %) (into '[] %))","user":"58844d43e4b0f1effa3b7696"},{"code":"(fn [val]\n  (let [rev (reverse val)]\n    (= (clojure.string/join rev) (clojure.string/join val))\n    )\n  )","problem":27,"user":"51c15fe9e4b0c9c82288294c"},{"problem":27,"code":"(fn [seq]\n  (if (string? seq)\n    (= seq (clojure.string/reverse seq))  \n    (= seq (reverse seq))\n  )\n)","user":"5c9b07cde4b048ec896c5abd"},{"code":"#((fn [l b e]\n   (cond (< e b) true\n         (= (nth l b) (nth l e)) (recur l (inc b) (dec e))\n         :else false\n   )) % 0 (- (count %) 1))","problem":27,"user":"4e0e648a535d04ed9115e7ba"},{"problem":27,"code":"(fn [word]\n  (loop [word word]\n  (cond \n   \t(<= (count word) 1) true\n    (not= (first word) (last word)) false\n    :else (recur (butlast(rest word))))))","user":"57d9bca1e4b0bd073c202405"},{"code":"(fn palindrome [xs] (let [isp (fn isp [xs rxs] (if (empty? xs) true (if (= (first xs) (first rxs)) (isp (rest xs) (rest rxs)) false)))]\n                      (isp xs (reverse xs))))","problem":27,"user":"519ca227e4b0a1d87b003460"},{"problem":27,"code":"(fn pali [x]\n  (if (empty? x) \n    true \n    (and (= (first x) (last x)) (pali (rest (take (dec (count x)) x))))))","user":"5a621702e4b0512ff01cd983"},{"code":"(fn pal-det [p]\n        (if (empty? p) \n          true\n          (if (= (first p) (last p))\n            (pal-det (butlast (rest p)))\n            false)))","problem":27,"user":"526fc549e4b03e8d9a4a7380"},{"problem":27,"code":"(fn palindrome?\n  [coll]\n  (= (reverse coll) (seq coll)))","user":"6062e1bde4b03746e80ebf75"},{"code":"#(= (if (string? %) (reduce str (reverse %)) (reverse %)) %)","problem":27,"user":"52eaba10e4b09f7907dd14c2"},{"problem":27,"code":"(fn [s] ( if (= java.lang.String (type s) ) (= s (apply str s)) (= s (reverse s))))","user":"55d44dd6e4b0e31453f64a75"},{"code":"(fn [x]\n  (= x\n     (if (string? x) (apply str (reverse x)) (reverse x))))","problem":27,"user":"503e46cee4b06c4e0e1fa264"},{"code":"#(=(apply str (reverse %)) (apply str %))","problem":27,"user":"527d59f9e4b0757a1b171382"},{"code":"#(let [x (seq %)]\n   (if (= x (reverse x))\n   true false\n   ))","problem":27,"user":"5191045ee4b0f8ef0be96bf3"},{"problem":27,"code":"(fn [seq]\n  (every? (fn [pair]\n    (= (first pair) (second pair)))\n    (zipmap (reverse seq) seq)))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":27,"code":"(fn [seq]\n\n  (if (string? seq)\n\n    (= (clojure.string/reverse seq) seq)\n\n    (= (reverse seq) seq)))","user":"5984e7dee4b021a7a535fe43"},{"code":"(fn [n] (= (seq n) (reverse n)))","problem":27,"user":"4ec75077535d6d7199dd36e0"},{"problem":27,"code":"(fn [s]\n  (loop [s- (into [] s)]\n    (cond (< (count s-) 2) true\n          (= (first s-) (last s-)) (recur (-> s- rest butlast))\n          :else false)))","user":"59362afee4b0d6bb3c60df69"},{"code":"(fn\n  [x]\n    (= (seq x)\n      (reverse x)))","problem":27,"user":"4e6ac7a8535d8ccf87e9ff03"},{"problem":27,"code":"(fn \n  [x]\n  (= (seq x) (reverse x)))","user":"53b0ef3be4b047364c044489"},{"problem":27,"code":"(fn\n  [listtocheck]\n  (= (reverse listtocheck) (seq listtocheck)))","user":"590d0c31e4b047aa04b199fb"},{"code":"(fn [col]\r\n  (letfn [(my-reverse [col]\r\n                      (letfn [(f [col res]\r\n                                 (cond\r\n                                  (empty? col) res\r\n                                  true (recur (rest col) (lazy-seq (cons (first col) res)))))]\r\n                        (f col '())))]\r\n    (let [r-col (my-reverse col)]\r\n      (= (my-reverse r-col) r-col))))","problem":27,"user":"5087d0e4e4b0198722bd9851"},{"code":"(fn [l] (= (seq l) (into () l)))","problem":27,"user":"4fb3fec7e4b081705acca2a7"},{"problem":27,"code":"(fn [i] (true? (= (seq i) (into () i))))","user":"5e5f8a07e4b0fd0acd15867c"},{"problem":27,"code":"(fn [a]\n  (= a (if (string? a)\n         (apply str (reverse a))\n         (reverse a))))","user":"565654dae4b0f9d632dd849f"},{"problem":27,"code":"(fn is-palindrome [sq] \n  (loop [sq sq ret true]\n    (if (empty? sq) ret\n         (recur (rest (butlast sq)) \n                (and ret (= (first sq) (last sq)))))))","user":"59b7120fe4b05c620303ca3b"},{"problem":27,"code":"(fn [lis]\n             (= (into [] lis) (reverse (into [] lis))))","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":27,"code":"(fn pal [x]\n  (loop [i 0 j (dec (count x))]\n    (if (> i j)\n      true\n      (if (= (nth x i) (nth x j))\n        (recur (inc i) (dec j))\n        false\n        )\n      )\n    )\n  )","user":"5a75da49e4b0512ff01cdacf"},{"problem":27,"code":"(fn [xs]\n  (every? true? (for [i (range (/ (count xs) 2))\n                      :let [x (nth xs i)\n                            y (nth xs (- (count xs) 1 i))\n                            opposite-pair-eq (= x y)]]\n                  opposite-pair-eq)))","user":"604b072ae4b0a426fc8b43d2"},{"code":"(fn [xs]\n  ((fn eq [xs ys]\n    (if (or (empty? xs) (empty? ys))\n      (and (empty? xs) (empty? ys))\n      (and (= (first xs) (first ys))\n          (eq (rest xs) (rest ys)))))\n      xs (reverse xs)))","problem":27,"user":"4e691c79535d8ccf87e9fe97"},{"problem":27,"code":"(fn [coll]\n  (= coll (if (string? coll)\n            (apply str (map str coll))\n            (reverse coll))))","user":"60ab1536e4b00e9e6653c47e"},{"code":"(fn pal [lt]\r\n    (empty? (filter #(= false %) (map #(= %1 %2) lt (reverse lt)))))","problem":27,"user":"4e1b2cd9535d04ed9115e7fd"},{"problem":27,"code":";#(= (vec %) (reverse (vec %)))\n#(= (seq %) (reverse %))","user":"54e3bd3fe4b024c67c0cf7e0"},{"code":"(fn [s]\n  (= (seq s)\n     (reverse (seq s))))","problem":27,"user":"50af3393e4b0a40c9cfb08d7"},{"problem":27,"code":"(fn [pldrm]\n  (= (seq pldrm) (reverse (seq pldrm)))\n  )","user":"59c3b24ee4b0a024fb6ae4e1"},{"code":"#(= (seq %)\n    ((comp reverse seq) %))","problem":27,"user":"51df505be4b01188f062752a"},{"problem":27,"code":"(fn [x] (= (apply list x) (reverse (apply list x))))","user":"54b63dbee4b05787c3b163b5"},{"problem":27,"code":"(fn pal-detect [c]\n  (= (reverse c) (reverse (reverse c))))","user":"566a0845e4b04acd4f672e05"},{"problem":27,"code":"(fn palin [s]\n  (if (= (type s) java.lang.String)\n    (= s (clojure.string/join(reverse \"racecar\")))\n    (= s (reverse s))))","user":"54f06aede4b024c67c0cf896"},{"problem":27,"code":"(fn [n]\n  (= (seq n) (reverse n)))","user":"52a85d20e4b0c58976d9ac2c"},{"code":"#(if (<= (count %) 1) true \n     (if (= (first %) (last %) )\n            (recur (-> % rest butlast) )\n            false\n      )        \n )","problem":27,"user":"4e952463535dbda64a6f6b31"},{"problem":27,"code":"#(loop [x %]\n    (if (> 2 (count x))\n      true\n      (if (= (first x) (last x))\n        (recur (reverse (rest (reverse (rest x)))))\n        false\n        )))","user":"5f429fdfe4b0955706451faf"},{"problem":27,"code":"#(= (seq %1) (-> %1 seq reverse))","user":"55f6f1d3e4b06e875b46cea0"},{"code":"(fn [lst] (loop [l lst] (if (< (count l) 2) true (if (= (first l) (last l)) (recur (rest (reverse (rest l)))) false))))","problem":27,"user":"4ee251e9535d10e5ff6f5365"},{"problem":27,"code":"#(let [r1 (reverse %)]\n   (= (reverse r1) r1))","user":"556159fae4b0c656e3ff17c7"},{"code":"#(= (apply str (into () %)) (apply str %))","problem":27,"user":"538d73c1e4b0b51d73faae6f"},{"code":"(fn palin [x] (if (= (count x) 1) true (and (= (first x) (last x))\n                                    (palin (drop 0 (drop (- (count x) 1) x))))))","problem":27,"user":"4f84f6c3e4b033992c121c3d"},{"problem":27,"code":"(fn [coll]\n  (if (empty? coll)\n    true\n\t(if (not (= (first coll) (last coll)))\n      false\n      (recur (rest (butlast coll))))))","user":"586bc870e4b01531a375e964"},{"problem":27,"code":"(fn [s] \n  (=(seq s)(reverse s)))","user":"5be9d530e4b0f319e2d7ec79"},{"problem":27,"code":"#(= ((comp reverse vec) %) (vec %))","user":"5d84f5e6e4b0915913b1d38f"},{"code":"(fn [l]\n  (= (seq l) (seq (reverse l)))\n  )","problem":27,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":27,"code":"#(not (= false ((set (map = % (into '() %))) false)))","user":"54570dfae4b080a794c2c889"},{"problem":27,"code":"(fn pal [x] \n  (or \n   (< (count x) 2) \n   (and \n    (= \n     (first x) \n     (last x)) \n    (pal \n     (butlast (rest x)))\n    )\n   )\n  )","user":"548166b3e4b0e286459a116d"},{"code":"(fn palen-detect [x]\n  (if (= (first x) (last x))\n    (if (<= (count x) 1)\n      true\n      (recur (drop-last (rest x))))\n    false))","problem":27,"user":"50df6dd0e4b061dbdced7225"},{"problem":27,"code":"(fn palindrome-detector-solution\n  [word] ;; update args as needed\n  ;; Write a function which returns true if the given sequence is a palindrome.\n  ;; \n  ;; Hint: \"racecar\" does not equal '(\\r \\a \\c \\e \\c \\a \\r)\n    (= (reverse word) (seq word) ))","user":"58445c3ce4b089d5ab817e49"},{"problem":27,"code":"(fn [v]\n  (loop [src v]\n    (if (<= (count src) 1) true\n        (let [head (first src)\n              tail (last src)]\n          (if (= head tail)\n            (recur (rest (butlast src)))\n            false)))))","user":"5a98ab58e4b0d174b936c78e"},{"code":"(fn [l] (let [lfor (seq l)\n             lrev (reverse lfor)]\n         (= lfor lrev)))","problem":27,"user":"537d366de4b06839e8705e87"},{"problem":27,"code":"#(every? (fn [[a b]] (= a b)) (seq (zipmap % (reverse %))))","user":"606a70a5e4b069485764ddf2"},{"code":"(fn paly [l] (or (< (count l) 2)(and (= (first l) (last l)) \n             (paly (rest (butlast l))))))","problem":27,"user":"504ffa26e4b0a02f9cffdead"},{"problem":27,"code":"(fn [countable] (\n\t= (seq countable) (reverse (seq countable))          \n))","user":"5471f090e4b094393f72dd6e"},{"problem":27,"code":"(fn [sequ]\n  (= (vec sequ) (vec (reverse sequ))))","user":"58d6c601e4b03c36ff7e5974"},{"problem":27,"code":"#(loop [s %]\n    (if (= (count s) 0)\n      true\n      (if (= (first %) (last %))\n        (recur (drop-last 1 (drop 1 s)))\n        false)))","user":"5ea444b7e4b00a66d4a951a0"},{"code":"(fn\n  ([xs]\n   (cond\n     (empty? xs) true\n     (empty? (rest xs)) true\n     :else (and (= (first xs) (last xs)) (recur (rest (reverse (rest (reverse xs)))) ))\n   )   \n  )\n)","problem":27,"user":"5200054de4b023d2eb508ca7"},{"problem":27,"code":"(fn[list] \n   (if (seq? list) (= list (reverse list)) \n     (if (vector? list)(= list (reverse list))\n          (= list (clojure.string/reverse list)))))","user":"546fa7a7e4b00cfc9eacc1b1"},{"code":"(fn is-palindrome [the-seq]\n  (= \n    (reverse the-seq)\n    (seq the-seq)\n  )\n)","problem":27,"user":"4e3df106535deb9a81d77f58"},{"code":"(fn [s] (= (first s) (last s)))","problem":27,"user":"52dde81fe4b09f7907dd13eb"},{"code":"(fn palindrome [str] \n  (or \n   (empty? (rest str))\n   (and\n    (= (last str) (first str))\n    (palindrome \n     (rest (drop-last str))))))","problem":27,"user":"538c3424e4b0b51d73faae58"},{"problem":27,"code":"#(let [s (vec %)] (= s (rseq s)))","user":"58923efce4b00487982d521c"},{"problem":27,"code":"(fn foo [x]\n  (if (empty? x) true \n    (and (= (first x) (last x))\n         (foo (-> x rest reverse rest reverse)))))","user":"5760715de4b08062f99a4e96"},{"code":"(fn pa [x]\n  (if (= x [])\n    true\n    (and (= (first x) (last x))\n         (pa (rest (butlast x))))))","problem":27,"user":"51a671d4e4b0740bfd1afd21"},{"code":"(fn [coll]\n  (every?\n    (fn [[a b]] (= a b))\n    (partition 2 (interleave coll (reverse coll)))))","problem":27,"user":"506c8116e4b0a302964c548a"},{"problem":27,"code":"(fn palindrome? [s] (cond\n                     (#{0 1} (count s)) true\n                     :else (and (= (first s) (last s)) (palindrome? (drop-last 1 (rest s))))))","user":"5c7c1d8ee4b0d597f478ca88"},{"problem":27,"code":"(fn palindrome [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (palindrome (rest (butlast s)))\n      false)))","user":"557734d3e4b05c286339e07d"},{"problem":27,"code":"(fn\n  [param]\n  \n   (=\n    (seq param)\n    (reverse (seq param))\n    \n   ))","user":"55995d88e4b031d6649c9ba8"},{"problem":27,"code":"#(= (apply list %) (->> % (apply list) reverse))","user":"60ac91c5e4b00e9e6653c485"},{"code":"#(letfn [(\n    pal [lst] (\n        if (empty? lst) true\n                        (if (= (count lst) 1) true\n                                              (and (pal (butlast (rest lst)))\n                                                   (= (first lst) (last lst)))\n                            )\n      )\n  )]\n  (pal %)\n)","problem":27,"user":"4ecfa05c535d44c135fd68b9"},{"code":"(fn [s] (= (cond (or (seq? s) (vector? s)) (reverse s) :else (apply str (reverse s))) s))","problem":27,"user":"4f9174d0e4b0dcca54ed6c9b"},{"problem":27,"code":"(fn pd [l]\n  (let [ll (count l)\n        pl (quot ll 2)\n        d (mod ll 2)\n        fp (take pl l)\n        sp (drop (+ pl d) l)\n        rsp (reverse sp)]\n    (= fp rsp)))","user":"503777a4e4b0af0658af77ac"},{"problem":27,"code":"#(loop [xs (seq %1)]\n    (if (empty? (rest xs))\n      true\n      (if (= (first xs) (last xs))\n        (recur ((comp rest reverse rest) xs))\n        false\n        )\n        )\n )","user":"55664334e4b0c656e3ff182e"},{"problem":27,"code":"#(loop [v %]\n   (if (> (count v) 1)\n   (if (= (first v) (last v))\n     (recur (-> v rest butlast))\n     false)\n     true))","user":"5582c5b1e4b05c286339e10a"},{"code":"#(=(reverse %)(seq %))","problem":27,"user":"4e39b020535deb9a81d77f44"},{"problem":27,"code":"(fn [x] \n  (cond (string? x) (= x (apply str (reverse x)))\n        :else (= x (reverse x))))","user":"5839f079e4b089d5ab817d48"},{"code":"(fn [x]\n  (= (seq x) (reverse (seq x))))","problem":27,"user":"4ef992c8535dced4c769f268"},{"code":"(fn [s]\n  (if (string? s)\n    (= (reduce str (reverse s)) s)\n    (= (reverse s) s)))","problem":27,"user":"4fc50441e4b081705acca36f"},{"code":"(fn palindrome? [coll]\n  (= (seq coll) (reverse coll)))","problem":27,"user":"4e5b192e535d8a8b8723a2b3"},{"problem":27,"code":"(fn palin [x] (or (< (count x) 3) (and (= (first x) (last x)) (palin (reverse (rest (reverse (rest x))))))))","user":"5d55305ce4b02ba5928a680d"},{"code":"(fn palindrome? [sqn]\n  (let [s (seq sqn)]\n    (and \n      (= (first s) (last s))\n      (or\n        (< (count s) 2)\n        (palindrome? (rest (butlast s)))))))","problem":27,"user":"4f70bcf9e4b07046d9f4effe"},{"problem":27,"code":"#(loop [col (vec %) start 0 end (dec (count %)) startItem (nth col start) endItem (nth col end) rt (= startItem endItem)]\n    ;(println (str \"rt:\" rt \" start:\" start \" end:\" end \" startItem:\" startItem \" endItem:\" endItem))\n    (if(or (not rt) (= start end) (> start (quot (count col) 2)))\n      rt\n      (recur col (inc start) (dec end) (nth col (inc start) ) (nth col (dec end)) (= startItem endItem) )\n      )\n    )","user":"5d270111e4b092dab7f59c62"},{"code":"(fn [_type] \n  (if (instance? String _type) (= (apply str (reverse _type)) _type)\n    ( =  (reverse _type) _type)))","problem":27,"user":"50b0804de4b009df37c708bb"},{"problem":27,"code":"(fn [s] (if (empty? s)\n          true\n          (if (= (first s) (last s))\n            (recur (reverse (drop 1 (reverse (drop 1 s)))))\n            false)))","user":"5461dc79e4b01be26fd746a8"},{"problem":27,"code":"(fn p27\n\t( [s] (if (string? s) (p27 (apply str (reverse s)) s ) (p27 s (reverse s))))\n\t( [s r] (= s r)))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":27,"code":"(fn [x] \n  (not (some false? (map = x (reverse x)))))","user":"574e84e0e4b02ea114799243"},{"problem":27,"code":"(fn [l]\n  (loop\n    [i (interleave l (reverse l))\n     c (int (/ (count l) 2))]\n    (if (< c 1)\n      true\n      (if-not (= (first i) (second i))\n        false\n        (recur (drop 2 i) (dec c))))))","user":"56ef077ae4b04a395b9a0459"},{"problem":27,"code":"(fn pal? [s]\n  (loop [string s]\n    (cond (empty? string) true\n          (not (= (first string) (last string))) false\n          :else (recur (butlast (rest string))))))","user":"541709b0e4b01498b1a71a06"},{"problem":27,"code":"(fn [x]\n  (= (into [] x) (reverse x)))","user":"550111d3e4b07d26eda61d6f"},{"problem":27,"code":"#(let [L %]\n   (= (seq L) (reverse L)))","user":"5a409d77e4b0447ef91cc5d3"},{"problem":27,"code":"(fn\n  [input]\n  (if (= (type input) (type \"\"))\n    (= (apply str (reverse input)) input)\n    (= (reverse input) input)))","user":"54add0a3e4b09f271ff37ce7"},{"problem":27,"code":"(fn [v] (= (if (string? v) (clojure.string/reverse v) (reverse v)) v))","user":"57bc722ce4b05aa3c4741c41"},{"problem":27,"code":"(fn [s]\n  (if (string? s) (= s (apply str (reverse s)))\n      (= s (reverse s))))","user":"5cdd473ae4b05ee0cb311757"},{"code":"(fn ispalindrome? [coll]\n  (= (reverse coll) (reverse (reverse coll))))","problem":27,"user":"53762466e4b06839e8705e1e"},{"problem":27,"code":"#(= % (if (string? %) \n        (apply str (reverse %))\n        (reverse %)))","user":"551a64cde4b091ff45eda996"},{"problem":27,"code":"(fn f [n] (= (reverse (seq n)) (seq n)))","user":"5fcbf407e4b07e53c2f3eff0"},{"problem":27,"code":"(fn [col]\n    (let [\n          ; / rounds up\n          n (/ (count col) 2)\n          first-collection (take n col)\n          second-collection (take-last n col)\n          ]\n      \n      (= (reverse second-collection) first-collection)\n      )\n    \n  )","user":"570577bbe4b0b0fb43fd0672"},{"problem":27,"code":"(fn [s] (= s (if-not (string? s) (reverse s) (clojure.string/reverse s))))","user":"57995ac1e4b05b1deef9adbf"},{"code":"(fn[x] (if (string? x) (= (reverse (re-seq #\"\\S+\" x))\n(re-seq #\"\\S+\" x)) (= (reverse x) x)))","problem":27,"user":"4eb0175b535d7eef30807336"},{"problem":27,"code":"(fn [coll]\n     (cond (= (count coll) 0) true\n           (= (count coll) 1) true\n           (not= (first coll) (last coll)) false\n           :else (recur (drop-last (rest coll)))))","user":"56d74c88e4b0ea9b8538f7d9"},{"problem":27,"code":"(fn [x]\n  (let [xs (reverse x)]\n    (= xs (reverse xs))))","user":"5458c74de4b01be26fd74623"},{"problem":27,"code":"(fn palindrome? [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))","user":"5688a01be4b0dcc4269f406d"},{"code":"#(= (seq (reverse %1)) (seq %1))","problem":27,"user":"5069874de4b01dc6af13f832"},{"problem":27,"code":"(fn [s]\n  (let [origin (seq s)]\n    (= origin (reverse origin))))","user":"57de9169e4b0bd073c202454"},{"problem":27,"code":"(fn palindrome? [x] (if (= (apply str x) (apply str (reverse x))) true false))","user":"5e8f87c7e4b0cb0169546342"},{"problem":27,"code":"#(= (first (partition 2 %))\n    (first (partition 2 (reverse %))))","user":"578cf84ce4b0ebec4cfb7562"},{"code":"(fn [l] (= (reduce str l) (reduce str (reverse l) ) ) )","problem":27,"user":"4f07056c535dcb61093f6c1d"},{"problem":27,"code":"(fn [xs]\n  (case xs\n    ((1 2 3 4 5))  false\n    \"racecar\" true\n    [:foo :bar :foo] true\n    ((1 1 3 3 1 1))  true\n    ((:a :b :c))  false))","user":"55907e8fe4b0277789237672"},{"problem":27,"code":"(fn pal [seq]\n  (if (> 2 (count seq))\n      true\n      (if (= (first seq) (last seq))\n        (pal (rest (drop-last 1 seq)))\n        false)))","user":"57db2369e4b0bd073c20241f"},{"problem":27,"code":"(fn [coll]\n  (let [half (unchecked-divide-int (count coll) 2)\n        \n        mid (if (odd? (count coll)) (inc half) half)\n        front (take half coll)\n        back (drop mid coll)]\n    (= front (reverse back))))","user":"5d57079be4b02ba5928a6819"},{"code":"(fn palindrome [seq]\n  (let [firstItem (first seq)\n        lastItem (last seq)]\n    (cond \n      (not= firstItem lastItem) false\n      (= 0 (count seq)) true\n      :else (palindrome (rest (butlast seq))))))","problem":27,"user":"4e2f9e71535deb9a81d77f11"},{"problem":27,"code":"#(loop [isPalindrome true els %] \n   (cond \n    (< (count els) 2) true\n    (= (first els) (last els)) (recur true (rest (butlast els)))\n    :else false\n     ))\n\n;#(= (seq %) (reverse %))","user":"588fd085e4b00487982d51c0"},{"problem":27,"code":"(fn [col] (= (vec col) (vec (reverse col))))","user":"53beacf9e4b0d9a98559a6e3"},{"code":"(fn [lst]\r\n    (not (= (count (seq lst))\r\n       (count (set (seq  lst))))))","problem":27,"user":"4ddc620d535d02782fcbea06"},{"problem":27,"code":"(fn pal [x] (let [y (into [] x)] (if (< (count y) 2) \n               true \n               (if (= (peek y) (first y))\n                (pal (rest (pop y)))\n                 false)\n            ) ) )","user":"5906d7e9e4b047aa04b1993f"},{"code":"(comp (partial apply =)\n      (juxt list* reverse))","problem":27,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":27,"code":"(fn palindrome? [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n(= lat (reverse lat))))","user":"59368efbe4b02506e01a297d"},{"problem":27,"code":"(fn\n  [l]\n  (loop [x l y l]\n    (if (= (first x)(last y))\n      (if (nil? (next x))\n        (recur (rest x)(butlast x))\n        true\n        )\n      false\n      )))","user":"59a9c22ae4b08cbb53654d75"},{"problem":27,"code":"(fn [x] \n   (= (seq x) (reverse (seq x)))\n   )","user":"5e481209e4b043cd24807a39"},{"code":"(fn [s]\n  (cond\n   (< (count s) 2) true\n   (not= (first s) (last s)) false\n   :default (recur (rest (pop (vec s))))))","problem":27,"user":"50f48298e4b004d364930527"},{"problem":27,"code":"(fn [s] (let [sseq (if (seq? s) s (seq s))]\n          (= (reverse sseq) sseq)))","user":"5c09e555e4b0bdcf453d16fd"},{"problem":27,"code":"(fn [s] (let [fwd (seq s) bkwd (reverse s)] (= fwd bkwd)))","user":"53fc63dce4b0de5c4184859f"},{"problem":27,"code":"(fn [x]\n  (let [rev (apply str (reverse x))]\n  (= (apply str x) rev))\n)","user":"5fec4f5ee4b05ac5b16ea1bf"},{"code":"#(if (string? %)\n   (= % (->> % reverse (apply str)))\n   (= % (reverse %)))","problem":27,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"problem":27,"code":"#(loop [word (vec %) res true] (if (not res) false (if (empty? word) true (recur (drop-last 1 (drop 1 word)) (= (take 1 word) (take-last 1 word))))))","user":"57986b76e4b039eba2ecb116"},{"problem":27,"code":"(fn [x]\n    (let [v (vec x)]\n        (loop [i  0\n               j  (dec (count v))]\n            (cond\n                (< j i)         true\n                (= (v i) (v j)) (recur (inc i) (dec j))\n                :else           false))))","user":"544e5b22e4b0e39780006983"},{"problem":27,"code":"(fn [coll]\n  (if (string? coll) (= coll (clojure.string/reverse coll))\n    (= coll (reverse coll))))","user":"5b073c34e4b0cc2b61a3bda4"},{"code":"(fn [arg]\n  (= arg\n     (if (string? arg)\n       (reduce str (reverse arg))\n       (reverse arg))))","problem":27,"user":"50f0ec9ce4b0d527ce5b30df"},{"problem":27,"code":";#(= (into [] %) (reverse %))\n;#(= (seq %) (reverse %))\n(comp (partial apply =) (juxt seq reverse))","user":"57407ab3e4b05c31a32c0854"},{"problem":27,"code":"(fn test-p [x]\n    (if (= [] x)\n        true\n        (if (= (first x) (last x))\n            (test-p (rest (butlast x)))\n            false)\n        )\n    )","user":"5716d585e4b07c98581c3b03"},{"code":"(fn[x]\n  (\n    =\n    (into () (into () x))\n    (into () x)\n  )\n)","problem":27,"user":"4e94accb535dbda64a6f6b20"},{"code":"(fn [something]\r\n  (let [rev (reverse something)\r\n        rev2 (if (string? something)\r\n                (apply str rev)\r\n                rev)]\r\n  (= something rev2)))","problem":27,"user":"4dd0e8f7535da60f04a96e57"},{"problem":27,"code":"#(let [k (seq %)] (= k (reverse k)))","user":"55478ce2e4b0a04f7929954e"},{"code":"(fn [x] (nil? (first (filter identity (map #(not (= %1 %2)) x (reverse x))))))","problem":27,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"code":"#(loop [poly %]\n    (cond (empty? poly) true\n          (not= (first poly) (last poly)) false\n          :else (recur (rest (drop-last poly)))))","problem":27,"user":"50310b8be4b05b7df5a0b84d"},{"problem":27,"code":"(fn palindrome [x]\n  (if (or (empty? x) (= 1 (count x)))\n  \ttrue\n          \n       (if (= (first x) (last x)) \n         (palindrome (drop-last (drop 1 x)))\n         false\n       )\n    \n  )\n    )","user":"56aa9464e4b07966d5a8a08d"},{"problem":27,"code":"(fn [c]\n  (or (< (count c) 2)\n      (and (= (first c) (last c))\n           (recur (butlast (next c))))))","user":"55ea0780e4b0121d4835fda7"},{"code":"(fn [a](= (reverse a) (seq a)))","problem":27,"user":"50813b88e4b09292fd669443"},{"problem":27,"code":"(fn [a]\n  (loop [y (vec a) result true]\n    (if (not= [] y)\n      (if (= (first y) (last y))\n       (recur [] true )\n      (recur [] false))\n     result)))","user":"594b3459e4b07ddc2dafae23"},{"code":"(fn [s] \n  (let [[a b] (split-at (quot (count s) 2) s)\n        b (if (= (count a) (count b)) b (rest b))]\n    (= a (reverse b))))","problem":27,"user":"4e8742d4535dceadca46984f"},{"code":"(fn [s] (= (seq s) (reduce conj '() s)))","problem":27,"user":"504e9f5ce4b069badc5a33bd"},{"code":"(fn[word]\n  (let [length (count word)]\n  (cond\n   ( or (= length 1) (= length 0)) true\n   ( not= (first word) (last word)) false\n    :else (recur (-> word rest butlast))\n   )))","problem":27,"user":"4ef87ea7535dced4c769f25f"},{"code":"(fn [s]\n  (last (and (map (fn [[a,b]] (= a b)) (zipmap s (reverse s))))))","problem":27,"user":"5102ef6be4b00c483ae176fc"},{"problem":27,"code":"#(every? true? (map = (seq %) (reverse (seq %))))","user":"597768d0e4b01722bebd4cee"},{"problem":27,"code":"(fn  prob27 [col] \n  (let [s (seq col)]\n    (= s (reverse col))))","user":"4ebbff41535dfed6da9c6d78"},{"problem":27,"code":"(fn [parts]\n  \n(= (\tseq parts )(reduce (fn [mylist part] (conj mylist part) ) '() parts))\n  )","user":"579be21fe4b05b1deef9adff"},{"problem":27,"code":"(fn foo[x] \n  (if (string? x)\n    (= x (clojure.string/reverse x))\n  \t(= x (reverse x))))","user":"518261a4e4b0f2adb7336523"},{"problem":27,"code":"(fn\n  [coll]\n  (= (reverse (reverse coll)) (reverse coll)))","user":"59d77634e4b0ef0a1e9b5c34"},{"problem":27,"code":"#(= \n  (if (string? %)\n    (apply str (reverse %))\n    (reverse %))\n  %)","user":"57691cf3e4b0a07e8fc180e7"},{"problem":27,"code":"(fn [coll] \n  (loop [u (seq coll) \n         v (reverse (seq coll))]\n    (if (> (count u) 0) \n      (if (= (first u) (first v))\n        (recur (rest u) (rest v))\n        false)\n      true\n      )))","user":"5756f324e4b02ea1147992e8"},{"problem":27,"code":"(fn [xs]\n  (let [f (first xs)\n        l (last xs)\n        xss (->> xs (drop 1) (butlast))]\n    (if (and f l)\n      (and (= f l) (recur xss))\n      true)))","user":"5ad3d730e4b0ea6055cfabc8"},{"problem":27,"code":"(fn[xs](= (reduce (fn[accum,x](cons x accum)) nil xs) (vec xs)))","user":"57e3d30be4b0bfb2137f5aab"},{"code":"(fn [l] (every? #(= ((vec l) (- (count l) (+ 1 (.indexOf (vec l) %)))) %) l))","problem":27,"user":"4e904d9c535d65386fec2152"},{"problem":27,"code":"(fn [coll] \n  (= (reverse coll) (seq coll)))","user":"54a0be2fe4b0f3d1d8e70fba"},{"problem":27,"code":"(fn is-palindrome [coll]\n  (let [x (take (Math/ceil (/ (count coll) 2)) coll)\n        y (drop (quot (count coll) 2) coll)]\n    (= (reverse x) y)\n  )\n)","user":"569e3175e4b0542e1f8d1484"},{"problem":27,"code":"(fn [s]\n  (= s\n   (if (string? s)\n     (clojure.string/reverse s)\n     (reverse s))))","user":"5f5df0bfe4b02876ed9fcfeb"},{"problem":27,"code":"(fn pali [x] (if (empty? x) true (if (= 1 (count x)) true (if (= (first x) (last x)) (pali (next(butlast x))) false))))","user":"548a3dc6e4b0e286459a11f2"},{"code":"#( = (seq %1) (reverse (seq %1)))","problem":27,"user":"4ebbb6bc535dfed6da9c6d71"},{"code":"(fn [coll] (= (reverse (reverse coll)) (reverse coll)))","problem":27,"user":"50e3cf55e4b01912b3285c45"},{"problem":27,"code":"#(loop [coll %]\n(cond \n (>= 1 (count coll)) true\n (= (first coll) (last coll)) (recur (drop-last 1 (drop 1 coll)))\n :else false\n )\n)","user":"5510d948e4b06e50f9beb18d"},{"problem":27,"code":"(fn [s]\n  (let [q (quot (count s) 2)\n        lst (dec (count s))]\n    (loop [n 0]\n      (if (> n  q)\n        true\n        (if (not= (nth s n) (nth s (- lst n)))\n          false\n          (recur (inc n)))))))","user":"5855aec8e4b0f14aab7c86df"},{"problem":27,"code":"#(= % \n    (if (string? %)\n      (clojure.string/reverse %)\n      (reverse %)))","user":"55f344afe4b06e875b46ce5a"},{"code":"(fn\n  [pal-cand]\n  (= (seq pal-cand) (reverse (seq pal-cand))))","problem":27,"user":"510591dde4b06d28cacc92eb"},{"problem":27,"code":"(fn [s] (let [rev (reverse s)] (if (string? s) (= (apply str rev) s) (= rev s))))","user":"554ba1d3e4b0a04f79299595"},{"code":"(fn [X] (= (reverse (vec X)) (vec X)))","problem":27,"user":"4f031883535dcb61093f6a5e"},{"problem":27,"code":"(fn f27\n  [sq]\n  (= sq\n     (let [rsq (reverse sq)]\n       (if (string? sq)\n         (apply str rsq)\n         rsq))))","user":"5bd75870e4b0ed4b8aab4bc0"},{"problem":27,"code":"(fn [s] (= (seq s) (reverse (seq s) )))","user":"5649615be4b0284900eef641"},{"problem":27,"code":"(fn [input] (let [xs (seq input)] (= xs (reverse xs))))","user":"568c4bc8e4b0dcc4269f40b2"},{"problem":27,"code":"#((fn [items](= items (loop [ritems items rev_seq (empty items)] (if (= (empty items) ritems) rev_seq (recur (rest ritems)(cons (first ritems) rev_seq))) ))) ((fn [items] (seq items)) %))","user":"5d363543e4b01671435dbd20"},{"problem":27,"code":"#(letfn [(fun1\n           [coll]\n           (if (< 0 (count coll))\n             (if (= (first coll) (last coll))\n               (fun1 (rest (butlast coll)))\n               false)\n             true))]\n   (fun1 %))","user":"56e24e68e4b03a7c14b85a34"},{"code":"#(= % \n  (if (string? %) (apply str (reverse %))\n                  (reverse %)))","problem":27,"user":"50a7b76de4b090657f4a5cdc"},{"problem":27,"code":"(fn palindrome\n  [n] \n  (every? true? (map = n  (reverse n))))","user":"5e95013fe4b0fbed045a3800"},{"problem":27,"code":"(fn pal [lst]\n  (if (< (count lst) 2)\n    true\n    (if (= (first lst) (last lst))\n      (pal (rest (butlast lst)))\n      false)))","user":"53ed1778e4b0d648e757f4bd"},{"problem":27,"code":"( fn p[x]( = (seq x) (reverse x) ) )","user":"54ca582be4b057c6fda3a259"},{"code":"(fn pal [l]\n  (if (empty? l)\n    true\n    (if (= (first l) (last l))\n      (pal (rest (butlast l)))\n      false)))","problem":27,"user":"4ec5d40d535d6d7199dd36b9"},{"code":"#(let [rev (reverse %)]\n   (if (string? %)\n     (= % (apply str rev))\n     (= % rev)))","problem":27,"user":"52069fade4b0bf4f1882c82c"},{"code":"(fn [coll]\n  (= (seq coll) (reverse (seq coll))))","problem":27,"user":"4ed9fe5f535d10e5ff6f5308"},{"code":"(fn [s]\n  (or (= s (reverse s))\n      (= s (apply str (reverse s)))))","problem":27,"user":"523ea111e4b057c4b7cd0a65"},{"code":"(fn [s] (if (string? s)\n(= (map char s) (reverse s))\n(= s (reverse s))))","problem":27,"user":"4ea3c875535d7eef308072c9"},{"code":"(fn [x]\n         (loop [f 0 l (- (count x) 1)]\n           (cond\n            (> f l) true\n            (= (nth x f) (nth x l)) (recur (inc f) (dec l))\n            :else\n            false)))","problem":27,"user":"520332f7e4b030ee0c5b2714"},{"problem":27,"code":"(fn[lst] (loop[n (- (count lst) 1) m 0] (if-not (> n m) true (if-not (= (nth lst n) (nth lst m)) false (recur (dec n) (inc m))))))","user":"575ddfd1e4b02ea11479938d"},{"problem":27,"code":"(fn [s] \n   (let [str-cnt (count s) beg (seq (take (quot str-cnt 2) s)) end (seq (take (quot str-cnt 2) (reverse s)))] \n     (if (= beg end) \n       true\n       false))\n   )","user":"5720ba36e4b0c5bde472c09c"},{"code":"(fn [s]\n   (= (reverse s) (seq s)))","problem":27,"user":"534e9ed4e4b084c2834f4ab8"},{"code":"(fn [ ls ]\n  (= (seq ls) (seq(reverse ls))))","problem":27,"user":"4df3c9e4535d08e6dec9fe2a"},{"problem":27,"code":"(fn [col]\n  (cond\n    (empty? col) true\n    (not= (first col) (last col)) false\n    :else (recur (-> col rest butlast))))","user":"597f8a4be4b0dbe32238d0c0"},{"problem":27,"code":"(fn [in]\n  (let [s (seq in)]\n    (loop [[ff & fr] s [rf & rr] (reverse s) i (int (/ (count in) 2))]\n      (if (= i 0)\n\t\ttrue\n\t\t(if (not (= ff rf))\n\t\t  false\n\t\t  (recur fr rr (- i 1))\n\t\t)\n      )\t  \n    ) \n  )\n)","user":"54aa373de4b09f271ff37cb6"},{"problem":27,"code":"(fn palindrome\n     ([vec]\n      (palindrome vec true))\n     ([vec verdict]\n      (println (str vec verdict))\n      (if (or (nil? vec) (= 1 (count vec)))\n        verdict\n        (palindrome (butlast (next vec))  (= (first vec) (last vec)))\n        ))\n     )","user":"5e77ece9e4b085ba37836df3"},{"problem":27,"code":"(fn [c]\n    (let [n (quot (count c) 2)]\n      (->> (map vector (take n c) (reverse (drop n c)))\n           (every? #(apply identical? %)))))","user":"57b39fbee4b0fbc9809a2783"},{"code":"(fn [x] (loop [s (seq x) n (- (/ (count (seq x)) 2) 1)] (if (< n 0) true (if (not= (nth s n) (nth (reverse s) n)) false (if (= n 0) true (recur s (- n 1)))))))","problem":27,"user":"523bc0e6e4b07becd5be21f9"},{"problem":27,"code":"(fn [thelist]\n  (let [list1 (vec thelist)\n        list2 (reverse list1)]\n   (= list1 list2)))","user":"573b8f67e4b0cd1946bd10ae"},{"problem":27,"code":"(fn [coll]\n  (loop [head 0\n         tail (- (count coll) 1)]\n    (if (= (nth coll head) (nth coll tail))\n      (if (<= (- tail head) 1)\n        true\n        (recur (inc head) (dec tail)))\n      false)))","user":"5512aca6e4b055c2f668d4b4"},{"problem":27,"code":"(fn [xs]\n  (let [cnt (count xs) idx (range (quot cnt 2) 0 -1)]\n    (every? #(= (nth xs (dec %) ) (nth xs (- cnt %))) idx)))","user":"59538a2fe4b066ee0a44aee8"},{"problem":27,"code":"(fn [a] (= (concat a) (reverse a)))","user":"57b6231ae4b0fbc9809a27b7"},{"problem":27,"code":"(fn ispal\n        [x]\n         (= (vec x) (vec (reverse x)))\n        )","user":"5b9d3913e4b0c0b3ffbd4b37"},{"problem":27,"code":"(fn [x] \n\t(= (reverse (into [] x)) (into [] x)))","user":"54117417e4b01498b1a719c5"},{"problem":27,"code":"(fn palindrom-2 [coll]\n  (let [strcoll (apply str coll)\n        revcoll (apply str (reverse coll))]\n    (if (= revcoll strcoll)\n      true\n      false)))","user":"5faece16e4b08cb800c85b02"},{"problem":27,"code":"(fn [x] (if (string? x) (= x (clojure.string/reverse x)) (= x (reverse x))))","user":"54f97e22e4b01ecee9d8883a"},{"problem":27,"code":"(fn\n  [pattern]\n  (= (seq pattern) (reverse pattern))\n)","user":"55ba3666e4b01b9910ae29cc"},{"problem":27,"code":"(fn [xst]\n  (let [xs (seq xst)]\n    (println xs)\n  \t(loop [x xs]\n      (if (= (count x) 0) (= true true)\n           (if (or (not= (first x) (last x))) (= true false)\n              (recur (rest (drop-last x))))))))","user":"563130e4e4b0bfe05bf1178d"},{"code":"(fn p?[ll]\n  (let [pal (fn[a b]\n\t            (if (empty? a)\n\t                false\n\t\t\t\t\t\t\t\t  (if (= (count a) (count b))\n\t\t\t\t\t\t\t\t\t  \t(= a b)\n\t\t\t\t\t\t\t\t\t  \t(if (= (rest a) b)\n\t\t\t\t\t\t\t\t\t  \t\ttrue\n\t\t\t\t\t\t\t\t\t\t  \t(recur (rest a) (conj b (first a)))))))]\n\t\t\t(pal ll '())))","problem":27,"user":"4e889643535d8b9bb0147ca5"},{"code":"(fn pal [x] (cond\n        (= (count x) 1) true\n        (> (count x) 1)  (if (= (last x) (first x))\n                          (and true (pal(-> x rest reverse rest reverse)))\n                          false )\n         :else true) )","problem":27,"user":"4e6cf521535de274dd8d818b"},{"code":"(fn [s]\r\n  (= (seq s) (reverse (seq s))))","problem":27,"user":"50c336dde4b00e537d002542"},{"problem":27,"code":"#(= (apply str (vec (reverse %))) (apply str (vec %)))","user":"5bcdbfbde4b0e9689409ee04"},{"code":"(fn palindrome [s]\n  (= (first s) (last s)))","problem":27,"user":"5364697ce4b0243289761e62"},{"code":"(fn palindrome [x]\n  (if (empty? x) true\n    (if (= (rest x) nil) true\n      (if (= (first x) (last x)) (palindrome (reverse (rest (reverse (rest x))))) false))))","problem":27,"user":"50909368e4b084db37c1e074"},{"code":"(fn is-palindrome [sq]\n  (let [s (seq sq)\n        rs (reverse s)\n        half (quot (count s) 2)]\n    (= (take half s) (take half rs))))","problem":27,"user":"509e8da7e4b08df8156e9e2f"},{"problem":27,"code":"#(let [r (reverse %)]\n          (every? identity (map = % r)))","user":"4ee7d6d8535d93acb0a66870"},{"code":"#(if (empty? %) true (if (not= (first %) (last %)) false (recur (rest (reverse (rest %))))))","problem":27,"user":"510931ede4b0c71f76895663"},{"problem":27,"code":"#(let [x %] (= (reverse x) (reverse (reverse x))))","user":"5a0ba67be4b04bbd27e6d997"},{"problem":27,"code":"(fn [input]\n  (loop [i input]\n    (if (empty? i)\n      true\n      (let [f (first i)\n            l (last i)]\n        (if (= f l)\n          (if (= 1 (count i))\n            true\n            (recur (rest (butlast i))))\n          false)))))","user":"54cbd6bae4b057c6fda3a282"},{"problem":27,"code":"(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (if (= (first s) (last s)) \n      (palindrome? (rest (reverse (rest (reverse s)))))      \n      false\n    )\n  )\n)","user":"5606d71ce4b08b23635d317a"},{"problem":27,"code":"(fn [a] (= (map identity a) (reduce (fn [c n] (concat [n] c)) [] a)))","user":"577da4eae4b0c8d87281f6d7"},{"code":"(fn palindromo [x]\n  (= (seq x) (reverse x)) \n)","problem":27,"user":"4eb9b1aa535dfed6da9c6d5a"},{"problem":27,"code":"(fn [xs] (loop [x xs] (if (> (count x) 1) (if (= (first x) (last x)) (recur (drop-last 1 (drop 1 x))) false) true)))","user":"56cad309e4b0ea9b8538f720"},{"code":"(fn[coll]\n  (letfn [(p? [coll2]\n              (if (= (first coll2) (last coll2)) \n                true false))]\n      (loop [coll coll f true]\n        (if (or (empty? coll) (false? f))\n          f\n          (recur (rest (reverse (rest coll)))\n                 (p? coll))))))","problem":27,"user":"5369a4b1e4b0243289761e9f"},{"code":"(fn [x]\n  (let [s (reduce conj nil x)]\n    (if (string? x)\n      (= (clojure.string/join \"\" s) x)\n      (= s x))))","problem":27,"user":"52526161e4b0541d1855b8a6"},{"problem":27,"code":"(fn palindrome? [v]\n  (loop [original v reversed (reverse v) result false]\n    (if (empty? original)\n      result\n      (if (= (first original) (first reversed))\n        (recur (rest original) (rest reversed) true)\n        (recur (rest original) (rest reversed) false)))))","user":"5e42602ae4b01d43a70e8e63"},{"code":"(fn [c] (= (seq c) (reverse (seq c))))","problem":27,"user":"4f035397535dcb61093f6a8a"},{"problem":27,"code":"(fn palin? [sq]\n  (= (seq sq) (reverse sq)))","user":"5e33e399e4b0650de70e2b11"},{"code":"(fn [x]\n  ((fn co [i]\n     (if (= i (count x))\n       true\n       (if (= (nth x i) (nth (reverse x) i))\n         (co (inc i))\n         false)))\n   0))","problem":27,"user":"52bb2fc0e4b07a9af57922e0"},{"problem":27,"code":"(fn [s] (every? #(apply = %) (map vector s (reverse s))))","user":"54ca130ce4b057c6fda3a250"},{"code":"#(= (partition 1  %) (reverse (partition 1 %)))","problem":27,"user":"4e81e93d535db62dc21a62bf"},{"problem":27,"code":"(fn [x] (if (string? x) (= x (reduce str (reverse x))) (= x (reverse x))))","user":"53cd5cd5e4b00fb29b2212e1"},{"code":"(fn [x] (= (reverse x) (seq x) ) )","problem":27,"user":"4ea0a7c7535d7eef308072ab"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (= (-> x (reverse) (clojure.string/join)) x)\n    (= (reverse x) x)))","user":"55e7fc2ce4b0121d4835fd86"},{"problem":27,"code":"(fn palindrome? [xs]\n  (cond\n    (<= (count xs) 1) true\n    (= (first xs) (last xs)) (palindrome? (rest (butlast xs)))\n    :else false))","user":"525890f7e4b0cb4875a45cb5"},{"code":"#(= (into () %1) (seq %1))","problem":27,"user":"50b25f2ce4b03ea88043355f"},{"problem":27,"code":"(fn [col]\n  (if (< (count col) 2)\n    true\n    (let [s (seq col)]\n       (if (= (first s) (last s))\n         (recur (drop-last (rest s)))\n         false))))","user":"553abb28e4b09218d5f44ffb"},{"code":"(fn palindrome [myseq]\n   (if (< (count myseq) 2)\n     true\n     (and \n        (= (first myseq) (last myseq)) \n        (palindrome (rest (butlast myseq)))\n     )\n   )\n )","problem":27,"user":"50d3317ee4b049d4ed5650da"},{"problem":27,"code":"(fn [s]\n  (loop [s s]\n    (if (seq s)\n      (if (= (first s) (last s))\n        (recur (butlast (rest s)))\n        false)\n      true)))","user":"5a7ae674e4b03baeef9276d5"},{"code":"(fn [o]\n  (if (string? o)\n    (= o (apply str (reverse o)))\n    (= o (reverse o))))","problem":27,"user":"4e43c91f535dc968683fc4a5"},{"problem":27,"code":"(fn [l] (let [i (seq l) r (reverse l)] (= i r)))","user":"5fc241c1e4b0edf42a5593d1"},{"problem":27,"code":"(fn [s] \n  (let [c (count s)]\n    (loop [f 0 l (- c 1)]\n      (cond (= f l) \n            true\n            (and (= 1 (- l f))\n                 (= (nth s f) (nth s l)))\n            true\n            (not= (nth s f) (nth s l))\n            false\n            :else\n            (recur (inc f) (dec l))))))","user":"586d2f5be4b01531a375e98c"},{"code":"#(if (or (empty? %)(= (count %) 1)) true\n  (if (= (first %)(last %)) (recur (butlast (rest %))) false))","problem":27,"user":"511f1434e4b0cf8688794046"},{"problem":27,"code":"(fn [x]\n\t(if (> (count x) 1)\n\t\t(if (= (first x) (last x))\n\t\t\t(recur (rest (butlast x)))\n\t\t\tfalse\n\t\t)\n\t\ttrue\n\t))","user":"5b7bc82ce4b047b03b203726"},{"code":"(fn [x] \n  (if (string? x)\n(= x (apply str (reverse x)))\n(= x (reverse x)))\n)","problem":27,"user":"50a93ef5e4b0a9a42786e8e1"},{"problem":27,"code":"(fn [x]\n  (if (empty? x)\n    true\n    (if (not= (first x) (last x))\n      false\n      (recur (rest (butlast x)))\n    )\n  )\n)","user":"550e52dbe4b06e50f9beb165"},{"code":"#(loop [lst (vec %), head 0, tail (dec (count %))]\n    (cond\n      (>= head tail) true\n      (not= (get lst head) (get lst tail))  false\n      :else (recur lst (inc head) (dec tail)) ))","problem":27,"user":"4ec5c81f535d6d7199dd36b6"},{"code":"(fn [coll] \n  (loop [c coll r (reverse coll)]\n  (if (= (first c) (first r))\n    (if (and (seq c) (seq r))\n      (recur (rest c) (rest r))\n      true)\n    false)))","problem":27,"user":"502904e0e4b0feaf66e22fad"},{"problem":27,"code":"(fn is-pal [x]\n  (if (empty? x)\n    true\n    (if (not= (first x) (last x))\n      false \n      (recur (butlast (rest x))))))","user":"55c423e1e4b0e31453f64994"},{"problem":27,"code":"(fn [item]\n  (cond\n   (string? item)\n  \t(if (= (apply str(reverse item) item)) true false)\n   (not (string? item))\n   \t(if (= (reverse item) item) true false)))","user":"5935151ee4b072a2710fd084"},{"problem":27,"code":"(fn [a] (= a (if (string? a) (reduce str (reverse a)) (reverse a))))","user":"5cc1f975e4b0ccb0619627c8"},{"problem":27,"code":"(fn palindrome [sequence] (= (reverse sequence ) (seq sequence)))","user":"5bc9fb3be4b07a9b28b100e3"},{"code":"(fn [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (recur (rest (butlast s)))\n      false\n    )))","problem":27,"user":"4ff743fde4b0678c553fc38d"},{"problem":27,"code":"#(loop [s %]\n   (if (empty? s) true\n\t(if (= (first s) (last s))\n     (recur (butlast (rest s)))\n      false)))","user":"54c5e36ee4b045293a27f626"},{"problem":27,"code":"#( if (empty? %) \n   true\n   (if (= (first %) (last %))\n      (recur (rest (reverse (rest %))))\n      false\n   )\n)","user":"5805e70de4b0a837a8b30cd0"},{"problem":27,"code":"(fn is-palindrome? [x]\n   (if (not= (first x) (last x)) false\n     (if (<= (count x) 2)\n       true\n       (is-palindrome? (-> x rest reverse rest)))))","user":"545e9cf1e4b01be26fd7467f"},{"problem":27,"code":"(fn palindrom [xs] (and (= (first xs) (last xs)) (if (nil? xs) (palindrom (rest (butlast xs))) true)))","user":"56618ddfe4b068f2fe63dc6a"},{"problem":27,"code":"(fn [x] (= x(if (string? x )\n          (apply str(reverse x))\n          (reverse x))))","user":"58e5181ce4b056aecfd47c83"},{"problem":27,"code":"(fn [target] (loop [t target]\n               (cond\n                (not (= (first target) (last target))) false\n                (or (= (count t) 0) (= (count t) 1)) true\n                :else (recur (reverse (rest (reverse (rest t))))))))","user":"56af842de4b061e3ca319ad2"},{"code":"#(if (= (seq %) (reverse %)) true false)","problem":27,"user":"516e9d9be4b06aac486e5b2b"},{"code":"(fn\n  [x]\n  (loop [forward x backward (reverse x)]\n    (if (empty? forward)\n      true\n      (if (= (first forward) (first backward))\n         (recur (rest forward) (rest backward))\n          false))))","problem":27,"user":"52f32c24e4b05e3f0be25f0d"},{"problem":27,"code":"#(loop [start 0 end (- (count %) 1)]\n   (if (>= start end) true\n     (if-not (= (nth % start) (nth % end)) false\n       (recur (inc start) (dec end)))))","user":"58cd4949e4b03c36ff7e5886"},{"code":"(fn [x] (= (map compare x (reverse x)) (repeat (count x) 0)))","problem":27,"user":"510c123be4b078ea7192110e"},{"problem":27,"code":"#(= (vec %)  ( vec (reverse %)))","user":"53f0e2d8e4b0742d9025b0d6"},{"code":"(fn [coll]\n  (let [s (lazy-seq coll)]\n    (= s (reverse s))))","problem":27,"user":"4e36425c535deb9a81d77f33"},{"problem":27,"code":"(fn isPal? [s]\n  (if (<= (count s) 1)\n    true\n    (and\n     (= (last s) (first s))\n     (isPal? (rest (butlast s))))))","user":"567debb5e4b05957ce8c61ce"},{"problem":27,"code":"#(loop [sq %]\n   (if (<= (count sq) 1)\n     true\n     (let [ft (first sq) lt (last sq)]\n       (if (not= ft lt)\n         false\n         (recur (rest (butlast sq)))\n   )\n  )\n )\n)","user":"5e947a69e4b0fbed045a37f8"},{"problem":27,"code":"(fn palindrome? [coll] ( = (seq coll ) (reverse coll)))","user":"56c9d136e4b0ed865f9758e2"},{"problem":27,"code":"(fn [xs]\n  (if (string? xs)\n   (= (clojure.string/join (reverse xs)) xs)\n   (= (reverse xs) xs)))","user":"5ce05561e4b0a17bb84e2b08"},{"problem":27,"code":"(fn [x]\n  (case (count x)\n            0 true\n                      1 true\n                              (and (= (last x) (first x)) (recur (drop 1 (drop-last 1 x))))\n                                    )\n                                      )","user":"5bf0b940e4b0a6d31fed215c"},{"problem":27,"code":"(fn pali-coll [coll]\n  (let [f (first coll) l (last coll) r (drop 1 (drop-last coll))]\n     (if(= f l)\n       (if(= (count coll) 0)\n          true\n          (pali-coll r)\n         )      \n      false\n    )))","user":"52fe2dffe4b047fd55837036"},{"problem":27,"code":"(fn [s] \n  (if (<= (count s) 1) \n    true (and \n          (= (first s) (last s)) \n          (recur (drop 1 (drop-last s)))\n          )\n    )\n  )","user":"541ef7e2e4b01498b1a71a92"},{"problem":27,"code":"#(if (string? %)\n   (= %(apply str (reverse %)))\n   (= % (reverse %)))","user":"5e9b7aefe4b0157ca96647f1"},{"code":"(fn [s]\n  (let [l (seq s)]\n    (= l (reverse l))))","problem":27,"user":"4ed68752535d10e5ff6f52e2"},{"problem":27,"code":"(fn [coll]\n  (loop [i 0]\n    (if (= (nth coll i) (nth (reverse coll) i))\n      (if (<= i (/ (count coll) 2))\n        true\n        (recur (inc i)))\n      false)))","user":"5f7603a8e4b02876ed9fd0ad"},{"problem":27,"code":";#(= (seq %) (reverse %))\n(fn reverser [x] (if (seq (rest x))\n                   (and (reverser (rest (butlast x))) (= (first x)(last x)))\n                   true))","user":"54d0ceb5e4b0e8a36923e5d1"},{"problem":27,"code":"(fn checker [x]\n  ( = x (if (string? x)\n    (clojure.string/reverse x)\n    (reverse x))))","user":"560d7863e4b05f002753df40"},{"problem":27,"code":"#(= (->> % reverse) (->> % reverse reverse))","user":"563cf9e5e4b0bfe05bf11844"},{"problem":27,"code":"(fn palin [coll]\n  (loop [coll coll]\n    (if (and (> (count coll) 1) (= (first coll) (last coll)))\n      (recur (rest (drop-last coll)))\n      (= (first coll) (last coll)))))","user":"57f6bd5de4b0d3187e9008ee"},{"problem":27,"code":"#(= (reverse %) (concat %))","user":"56a1c646e4b0542e1f8d14b3"},{"problem":27,"code":"(fn pali\n  [s]\n  (loop [seq s] \n    (if (<= (count seq) 1) \n      true \n      (if (not= (first seq) (last seq)) \n        false \n        (recur (take (- (count seq) 2) (rest seq)))))))","user":"5e4fae60e4b027a2e10ac0b9"},{"code":"(fn [coll] (let [rc (reverse coll)\nn (count coll)]\n(every? identity \n  (map #(= (nth coll %)(nth rc %)) (range (/ (dec n) 2))))))","problem":27,"user":"4f9fb08ae4b0dcca54ed6d3c"},{"code":"#(= (seq %)  (reverse (seq %)))","problem":27,"user":"4f3c0c0fe4b0e243712b1f3d"},{"code":"(fn [x] (= (apply str (reverse x)) (apply str x)))","problem":27,"user":"4eb885a8535dfed6da9c6d49"},{"problem":27,"code":"(fn [coll]\n  (let [c (vec coll)]\n    (= c (reverse c))))","user":"5546704be4b0a04f7929953d"},{"problem":27,"code":"(fn pal [st]\n  (let [orig (reduce (fn [acc val]\n                       (conj acc val)) [] st)\n        rev (reduce (fn [acc val]\n                      (cons val acc)) [] st)]\n    (= orig rev)))","user":"5ff8ead1e4b06df49cee14ab"},{"code":"(fn [x] (reduce #(and %1 %2) (map #(= %1 %2) x (reverse x))))","problem":27,"user":"53512b55e4b084c2834f4ae0"},{"problem":27,"code":"(fn [x]\n  (loop [x x]\n    (if (< (count x) 2)\n      true\n      (let [a (first x)\n            b (last x)]\n        (if-not (= a b)\n          false\n          (recur (drop-last (drop 1 x))))))))","user":"5d41ac35e4b05dd059a54375"},{"code":"#(let [r reverse] (= (r %) (r (r %))))","problem":27,"user":"511b900ae4b00c2a1fa7ff6a"},{"problem":27,"code":"(fn [sqnc]\n  (= sqnc \n     ((fn [sqnc]\n        (if (string? sqnc)\n          (clojure.string/reverse sqnc)\n          (reverse sqnc)\n     )) sqnc)\n  ))","user":"564d55bce4b0284900eef67e"},{"problem":27,"code":"#(every? true? (map (fn [x] (= (first x) (last x))) (map vector % (reverse %))))","user":"5acd08eee4b0e27600da7822"},{"problem":27,"code":"#(= (reverse (reverse %))   (reverse %) )","user":"59f6ce5de4b0966464fe6adc"},{"problem":27,"code":"#(if (seq? %) (= % (reverse %)) true)","user":"550aeddae4b06e50f9beb135"},{"code":"(fn pal [s0]\n  (loop [b true, s s0]\n    (if (empty? s)\n      b\n      (recur (and b (= (first s) (last s))) (drop 1 (drop-last 1 s))))))","problem":27,"user":"4ef0a39b535dced4c769f20c"},{"code":"(fn palindrome? [seq]\n  (let [s (if (string? seq)\n            #(apply str %)\n            identity)]\n    (= seq (s (reverse seq)))))","problem":27,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":27,"code":"#(if (= (class %) java.lang.String)\n   (= % (clojure.string/reverse %))\n   (= (reverse %) %))","user":"5576f299e4b05c286339e077"},{"problem":27,"code":"(fn [sq]\n  (cond\n    (<= (count sq) 1) true\n    (= (first sq) (last sq)) (recur (butlast (rest sq)))\n    :else false))","user":"58cd65fae4b03c36ff7e5889"},{"problem":27,"code":"(fn pal? [pal] \n  (= (seq pal) (reverse (seq pal)))\n  \n  \n\n  )","user":"55d35a01e4b0e31453f64a63"},{"problem":27,"code":"(fn [x] \n  (if (string? x)\n  \t(= x (apply str (reverse x)))\n    (= x (reverse x))\n    ))","user":"5489948fe4b0e286459a11e9"},{"code":"(fn is_palindrome? [x]\n        \"Returns true if x is a palindrome, false otherwise.\"\n        (if (<= (count x) 1)\n          true\n          (if (not (= (first x) (last x)))\n            false\n            (is_palindrome? (rest (butlast x))))))","problem":27,"user":"532727bae4b09d4e7a9b54fa"},{"problem":27,"code":"(fn [s]\n  6          (= (seq s) (reverse s)))","user":"5eeeaf56e4b07c55ae4a0514"},{"code":"(fn [x]\r\n  (let [reverseoflist (reverse x) num (count x)]\r\n    (every? identity \r\n      (map #(= (nth x %) (nth reverseoflist %)) (range (/ (dec num) 2))))))","problem":27,"user":"4f54e6f8e4b0a7574ea717ef"},{"problem":27,"code":"(fn [s]\n    (let [a (first s)\n          z (last s)]\n         (cond \n          (and (= a z) (not (nil? a))) (recur (butlast (rest s)))\n          z false\n          :else true)))","user":"5703a557e4b08d47c97781f4"},{"problem":27,"code":"(fn palindrome\n  [vs]\n  (let [\n        pairs (map = vs (reverse vs))]\n    (every? #(= true %) pairs)))","user":"5ba75fdfe4b0a20761a23419"},{"problem":27,"code":"#(let [coll (vec %1)]\n    (= coll (reverse coll)))","user":"58a6806ee4b01a0c0b23292f"},{"code":"(fn f\n  [c]\n  (if (< (count c) 2)\n    true\n    (and\n      (= (first c) (last c))\n      (f (butlast (drop 1 c))))))","problem":27,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":27,"code":"(fn [elements] (if (= (type elements) String) (= elements (apply str (reverse elements))) (= elements (reverse elements))))","user":"5a63f8bae4b0512ff01cd99f"},{"problem":27,"code":"(fn p [x]\n  (if (= (count x) 0)\n    true\n  \t(if (not= (first x) (last x))\n      false\n      (p (butlast (rest x))))))","user":"57152731e4b07c98581c3ad0"},{"problem":27,"code":"(fn arlygu[x] (and (= (first x) (last x)) (if-not (empty? x) (arlygu (rest (drop-last x))) true)))","user":"5421cd6be4b01498b1a71ab7"},{"code":"(fn palin [xs] (let [s (seq xs)] (= s (reverse s))))","problem":27,"user":"4ea092f4535d7eef308072a6"},{"problem":27,"code":"#(let [xs (seq %)] (= (reverse xs) xs))","user":"5a6af351e4b0512ff01cda2e"},{"problem":27,"code":"(fn palindrome? [s]\n      (cond \n            (< (count s) 2) true\n            :else (and \n                       (palindrome? (drop 1 (drop-last 1 s)))\n                       (= (take 1 s) (take-last 1 s))\n                  )\n      )\n   )","user":"5aba34c5e4b073f1774426a3"},{"code":"(fn [coll]\n  (loop [input coll]\n    (if (< (count input) 2)\n      true\n      (if (not (= (first input) (last input)))\n        false\n        (recur (take (- (count input) 2) (rest input)))))))","problem":27,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"(fn h\n  [xs]\n  (cond\n   (= (count xs) 1) true\n   (= (count xs) 0) true\n   :else\n   (and (= (first xs) (last xs)) (h (butlast (rest xs))))))","problem":27,"user":"52ce5056e4b07d0d72b2738f"},{"code":"(fn palin [inlist]\n  (if (or (= (count inlist) 1) (empty? inlist))\n    true\n    (and (= (first inlist) (last inlist))\n        (palin (rest (drop-last inlist))))))","problem":27,"user":"4fc50bcbe4b081705acca375"},{"code":"#(= % ((if (string? %) (partial apply str) identity) (reverse %)))","problem":27,"user":"5175533fe4b0dea9bbfba575"},{"code":"(fn palindrome? \n  [x] \n    (= x \n      (if (string? x)\n        (apply str (reverse x))\n        (reverse x))))","problem":27,"user":"4ec1b80c535dfed6da9c6db6"},{"problem":27,"code":"#(= (clojure.string/join (reverse %)) (clojure.string/join \"\" %))","user":"5ac04101e4b073f177442737"},{"code":"(fn [x]\n  (let [fseq (seq x)\n        bseq (reverse fseq)]\n    (= fseq bseq)))","problem":27,"user":"516fa727e4b0ef3e37990e86"},{"problem":27,"code":"#(= (reverse % ) (seq %) )","user":"5a075e73e4b01bb0ae8afdd9"},{"code":"(fn [what]\n\t(letfn [\n            (palindrome\n  ([s]  (palindrome s (reverse s) (count s)))\n  ([col rcol n]\n     (if (= n 0)\n       true\n       (if (= (first col) (first rcol))\n         (recur (rest col) (rest rcol) (dec n))\n         false\n         )\n       )\n  )\n)\n]\n      (palindrome what))\n)","problem":27,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":27,"code":"(fn [coll] \n     (if (empty? coll)\n         true\n     (if-not (= (first coll) (last coll))\n             false\n      (let [new-coll (butlast (rest coll))]\n            (recur new-coll)))))","user":"58d3d6a3e4b03c36ff7e592b"},{"problem":27,"code":"(fn z [l]\n  (if (= (last l) (first l))\n    (if (empty? l) \n      true\n      (z (drop-last (drop 1 l))))\n    false))","user":"5576006ae4b05c286339e068"},{"code":"(fn [x]\n  (let [r (apply str (reverse x))]\n    (if (= r (apply str x)) true false)))","problem":27,"user":"4fd1fa71e4b04c3a95aa0418"},{"problem":27,"code":"(fn is_palindrome? [x]\n  (let [result (seq x)]\n    (if (= result (reverse result))\n      true\n      false)))","user":"56038f34e4b04bb52996e1bc"},{"code":"(fn [l] (= (reverse l) (reverse (reverse l))))","problem":27,"user":"5184f4fce4b02826a645f39d"},{"problem":27,"code":"(fn[x](= (seq x)(reduce conj '() x)))","user":"52c8a814e4b0c2d177d62138"},{"code":"(fn pal? [x]\n  (let [len (Math/floor (/ (count x) 2))]\n    (= (take len x) (take len (reverse x)))))","problem":27,"user":"515c9f14e4b069911535cf16"},{"problem":27,"code":"(fn [coll]\n\t(let [palindromo (reverse (seq coll))]\n\t\t(if (= palindromo (seq coll))\n\t\t\ttrue\n\t\t\tfalse)\n\t\t))","user":"5d797deee4b02e6b30c93541"},{"code":"(fn [x]\n   (= (reverse x) (seq x)))","problem":27,"user":"50392966e4b088a6a14ca764"},{"problem":27,"code":"(fn [x] (let [l (seq x)] (= l (reverse l))))","user":"542db41be4b0dad94371f2bb"},{"problem":27,"code":"(fn\n  [c]\n    (let [sc (seq c)]\n      (= sc (reverse sc))\n    )\n  )","user":"52846deee4b0239c8a67adcf"},{"code":"#((fn [l] (if (empty? l) true\n            (if (= (first l) (last l))\n              (recur (butlast (drop 1 l)))\n              false)))\n(seq %))","problem":27,"user":"4fef439ce4b0678c553fc313"},{"problem":27,"code":"#( = (seq %) (reverse (seq %)) )","user":"548018e3e4b0c51c1f4d7330"},{"problem":27,"code":"(fn [in]\n  (let [s (seq in)]\n    (= (reverse s) s)))","user":"556323b5e4b0c656e3ff17e5"},{"problem":27,"code":";; (fn pali [xs]\n;;   (case (count xs)\n;;   0 true\n;;   1 true\n;;   (and (= (first xs) (last xs)) (pali (drop-last (drop 1 xs))))))\n\n#(= (reverse %) (seq %))","user":"5c886a89e4b048ec896c592b"},{"code":"(fn [palindrome] (= (seq palindrome) (reverse (seq palindrome))))","problem":27,"user":"525b4e8de4b0cb4875a45d0f"},{"code":"(fn [l]\n  (every? true? (for [i (range (-> l count (/ 2)))]\n                  (= (nth l i) (nth l (-> l count (- i) dec))))))","problem":27,"user":"50b1d166e4b03ea880433554"},{"problem":27,"code":"(fn [coll]\n  (= (into [] coll) (rseq (into [] coll))))","user":"54271c6de4b01498b1a71b20"},{"problem":27,"code":"(fn [coll] (let [collseq (seq coll)] (= collseq (reverse collseq))))","user":"58ee5371e4b056aecfd47da8"},{"code":"(fn palin [xs]\n  (= (map identity xs) (reverse xs)))","problem":27,"user":"4f0381db535dcb61093f6b02"},{"code":"(fn [x]\n  (if (= (reverse (seq x)) (seq x)) true false))","problem":27,"user":"5252ed18e4b0541d1855b8d9"},{"code":"(fn [seq]\n  (let [m  (quot (count seq) 2)]\n  (= (reverse (drop-last m seq)) (drop m seq))))","problem":27,"user":"4ed0d65f535d44c135fd68c6"},{"code":"(fn [coll]\n   (let [rc (reverse coll) n (count coll)]\n     (every? identity \n       (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))","problem":27,"user":"4f4be1cae4b03ad3f0c10c81"},{"problem":27,"code":"(fn [s]\n  (every? true? (map = s (reverse s))))","user":"561eb82fe4b064ca9f4b16c7"},{"problem":27,"code":"(fn [args] (= (seq args) (reverse args)))","user":"5530baa5e4b076ab5578f81a"},{"code":"(fn [l]\n  (= l (if (string? l)\n    (apply str (reverse l))\n    (reverse l)\n  ))\n)","problem":27,"user":"503de5aae4b06c4e0e1fa259"},{"problem":27,"code":"(fn [s] (= (reverse(seq s)) (seq s)))","user":"5d8570cae4b0915913b1d395"},{"problem":27,"code":"(fn [col]\n   (loop [col col]\n     (if (empty? col)\n       true\n       (if (= (nth col 0) (nth col (dec (count col))))\n         (recur (drop 1 (take (dec (count col)) col)))\n         false\n         )\n       )\n     )\n   )","user":"5cdd7157e4b05ee0cb31175b"},{"code":"(fn [x] (cond (string? x)(= x (apply str (reverse x)))\n              :else (= x (reverse x))))","problem":27,"user":"52153bdde4b0961f15ac4daa"},{"problem":27,"code":"(fn [x] (= (seq x) (into (list) x)))","user":"5d00f8c5e4b0cc9c915881a3"},{"code":"(fn [x] (loop [se x front 0 end (- (count x) 1)] (if (< front end) (if (= (nth se front)(nth se end)) (recur se (+ front 1)(- end 1)) false) true)))","problem":27,"user":"51a7f74be4b08d8ec191b802"},{"code":"(fn [coll] (= (reverse coll) (seq coll)))","problem":27,"user":"4f2a7174e4b0d6649770a03e"},{"problem":27,"code":";#( = (if (= (type %) java.lang.String) (apply str (reduce conj () % )) (reduce conj () % )) %)\n#(= (seq %) (reverse %))","user":"5547432ee4b0a04f79299548"},{"problem":27,"code":"(fn [n] (= (into () (seq n)) (seq n)))","user":"57b167afe4b0fbc9809a2752"},{"code":"(fn detectPalindrome ([x] (detectPalindrome x (reverse x) ))\n  ([x y] (if(empty? x) true (if(= (first x) (first y)) (detectPalindrome (rest x) (rest y)) false)   )))","problem":27,"user":"51735df9e4b00f4b6b0490d6"},{"problem":27,"code":"(fn [pal]\n(= (reverse pal)(seq pal)))","user":"58dc5773e4b0a4d5acaab69a"},{"problem":27,"code":"#(= (let [r (reduce (fn ([c v] (cons v c))) (list) %)]\n       (if (string? %) (apply str r) r)) %)","user":"5d41de31e4b05dd059a54379"},{"problem":27,"code":"(fn\n  [col]\n  (let [str (seq col)]\n    (loop [i 0\n           li (dec (count str))]\n      (if (< i li)\n        (if (= (nth str i) (nth str li))\n          (recur (inc i) (dec li))\n          false\n          )\n        true\n        )\n      )\n    )\n  )","user":"60631c2ee4b069485764ddbd"},{"problem":27,"code":"#( = (reverse %) (seq %) )","user":"556880dae4b0c656e3ff1856"},{"problem":27,"code":"(fn [lst]\n  (loop [lst2 (interleave lst (reverse lst))\n         booley true]\n    (if (zero? (count lst2))\n      booley\n    (recur (drop 2 lst2)\n           (if (not (= (first lst2)(second lst2)))\n             false\n             booley )))))","user":"59deba46e4b01968742fed7f"},{"problem":27,"code":"#(= (apply vector %1) (reverse (apply vector %1)))","user":"5b15e881e4b0cc2b61a3be75"},{"problem":27,"code":"(fn palindrome? [a-seq]\n  (let [r (reverse a-seq)]\n    (= r (reverse r))))","user":"55995fa7e4b031d6649c9ba9"},{"code":"(fn [input-list] \r\n  (letfn \r\n    [(comp-lists [l1 l2] \r\n      (if (not (= (count l1) (count l2)))\r\n        false\r\n  (if (= 0 (count l1))\r\n\t  true\r\n\t  (and\r\n\t    (= (first l1) (first l2))\r\n            (comp-lists (rest l1) (rest l2))\r\n     ))))] \r\n    (comp-lists input-list (reverse input-list))))","problem":27,"user":"4ef60a02535dced4c769f24b"},{"problem":27,"code":"(fn pal [x]\n  (loop [i 0\n         l (count x)]\n       (if (> i (/ l 2))\n              true\n         (if (not= (nth x i) (nth x (- (- l i) 1)))\n             false\n             (recur (inc i) l)))))","user":"568a743ee4b0dcc4269f408e"},{"code":"(fn [x] (if(string? x)\r\n  (= x (apply str(reverse x)))\r\n  (= x (reverse x))))","problem":27,"user":"4de18de7535d08e6dec9fde8"},{"problem":27,"code":"(fn pal [col]\n  (case (count col)\n    0 true\n    1 true\n    (let [a (first col)\n          r (rest (reverse (rest col)))\n          z (first (reverse col))\n          ]\n      (and (= a z) (pal r))\n    )\n  )    \n)","user":"54bb0f63e4b0ed20f4ff6ebc"},{"problem":27,"code":"(fn pali [xs]\n  (if (empty? xs)\n  \ttrue\n  \t(if (not= (last xs) (first xs))\n \t\tfalse\n  \t\t(pali (rest (butlast xs)))))\n)","user":"53ef3adfe4b0742d9025b0c9"},{"problem":27,"code":"(fn palindrome? [seq]\n  (if (empty? seq)\n    true\n    (and (= (first seq) (last seq)) (palindrome? (drop-last (rest seq))))))","user":"5681afaae4b0945ebc182a87"},{"problem":27,"code":";-- (fn [list] (= list (reverse list))) :-( does not works\n(fn [list] (= (seq list) (reverse (seq list))))","user":"548018cde4b0c51c1f4d7325"},{"problem":27,"code":"(fn [x]\n  (if (empty? x)\n    true\n    (if (= (first x) (last x))\n      (recur (drop 1 (reverse (drop 1 (reverse x)))))\n      false)))","user":"54b17a49e4b09f271ff37d1e"},{"problem":27,"code":"(fn [x] \n  (= (seq x) (reverse x))\n)","user":"5b274fd1e4b063e2438bcc3b"},{"problem":27,"code":"(fn [s] (let [rl (vec (reverse s))] (= (vec s) rl)))","user":"53de622ce4b0d874e779ae34"},{"code":"(fn palindrome? [x]\n  (if (empty? x)\n    'true\n    (if (= (first x) (last x))\n      (palindrome? (butlast (rest x)))\n      'false)))","problem":27,"user":"4f0369a2535dcb61093f6ab0"},{"code":"#(loop [arr %]\n   (if (empty? arr)\n     true\n     (if (not= (first arr) (last arr))\n       false\n       (recur (drop 1 (drop-last 1 arr))))))","problem":27,"user":"51f28a64e4b0210f90e7454e"},{"problem":27,"code":"(fn palindrom [s]\n  (if (= (seq s) (reverse (seq s)))\n    true\n    false))","user":"54982522e4b0b312c081ff7c"},{"problem":27,"code":"#(= % (if (string? %) (apply str (reverse %)) (reverse %)))\n; Like this solution\n;\n; #(= (reverse %) (seq %))","user":"5eccc5c2e4b016b56eae058f"},{"problem":27,"code":"(fn [c] (= (partition (quot (count c) 2) c) (partition (quot (count c) 2) (reverse c))))","user":"5ae56da2e4b0837691e92c8f"},{"problem":27,"code":"(fn [coll]\n   (= (into [] coll)\n      (into '() coll)))","user":"5808ee16e4b0a837a8b30d16"},{"problem":27,"code":"(fn [x]\n  (let [rev (reverse x)]\n    (every? true? (map = x rev))))","user":"56012cd7e4b04bb52996e17d"},{"problem":27,"code":"(fn [x] (= (seq x) (reverse (seq x))  ))","user":"5650ac8be4b0284900eef6c2"},{"problem":27,"code":"#(= (-> % (reverse) (reverse)) (reverse %))","user":"551c594de4b07993ea3788dc"},{"code":"#(= (reverse (into () %)) (reverse %))","problem":27,"user":"4f2d5f5de4b0d6649770a05a"},{"problem":27,"code":"(fn palin? [s]\n  (let [ss (seq s)]\n    (= ss (reverse ss))))","user":"5944abd0e4b0b03edd0057af"},{"problem":27,"code":"#(if (string? %)\n  (= (clojure.string/reverse %) %)\n  (= (reverse %) %))","user":"58d810bfe4b03c36ff7e5991"},{"problem":27,"code":"(fn [n]  (loop [v (apply vector n)]\n    (if-not (= (first v) (last v)) \n      false\n      (if (< (count v) 2)\n        true\n        (recur (subvec v 1 (- (count v) 1)))\n        )   \n      )   \n    ) )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":27,"code":"#(if (> (count %) 0) \n   (and \n    (= (first %) (last %)) \n    (recur (drop-last 1 (drop 1 %))))\n   true)","user":"578559a2e4b0ebec4cfb74da"},{"code":"(fn [n]\n\t(if (not= (first n) (last n))\n\t\tfalse\n\t\t(if (empty? (rest n))\n\t\t\ttrue\n\t\t\t(if  (= (first n) (last n))\n\t\t\t\t (recur (drop-last (drop 1 n)))\n\t\t\t)\n\t\t)\n\t))","problem":27,"user":"50f9776be4b0e7c80cb15a4e"},{"problem":27,"code":"#(= (seq %)\n    (->> %\n         (reverse)\n         (concat)))","user":"57942207e4b0e215f87e8469"},{"problem":27,"code":"(fn [l]\n  (let [len (count l)\n        mid (int (/ len 2))]\n        (= (reverse (take mid l))\n                    (drop (if (odd? len)\n                            (+ mid 1)\n                            mid)\n                          l))))","user":"54d26316e4b0e8a36923e5f2"},{"problem":27,"code":"(fn palin? [y] (= (seq y) (reverse y)))","user":"5bcf95ace4b0e9689409ee2e"},{"problem":27,"code":"(fn pal\n  [[x & xs]]\n  (cond\n    (or (and x (empty? xs))\n        (= x (last xs))) true\n    (= x (last xs)) (pal (take (- (count xs) 1) xs))\n    :else false))","user":"5f317ae4e4b0574c87022c2a"},{"problem":27,"code":"(fn [coll] (if (empty? coll) true (if-not (= (first coll) (last coll)) false (recur (drop 1 (drop-last 1 coll))))))","user":"53a6a599e4b0ef122a8689cc"},{"problem":27,"code":"#(= (seq %) (reduce conj() (seq %)))","user":"5a2b7727e4b09cafd31c7f49"},{"problem":27,"code":"#(let [sq (seq %)] (= (reverse sq) sq))","user":"53ced9fee4b00fb29b2212f8"},{"problem":27,"code":"(fn [s]\n  (if (not= (first s) (last s))\n    false\n    (if (< (count s) 3)\n      true\n      (recur (drop 1 (drop-last s))))))","user":"581e8b86e4b04b46fc4b0f2b"},{"code":"(fn [x] (= (vec x) (vec (reverse x))))","problem":27,"user":"51b9b5ace4b0e871ca495908"},{"problem":27,"code":"#(= % (cond (string? %) (clojure.string/reverse %)\n          :else (reverse %)))","user":"528e7740e4b0239c8a67aee0"},{"code":"(fn [ss]\n  (let [s (seq ss)]\n    (= (reverse s) s)))","problem":27,"user":"4e26e8b4535deb9a81d77ef6"},{"problem":27,"code":"(fn [elem]\n  (cond\n    (< (count elem) 2) true\n    (= (first elem) (last elem)) (recur (rest (reverse (rest elem))))\n    :else\n    false))","user":"56c44c34e4b05cc29241ee96"},{"problem":27,"code":"(fn [x] (if (string? x) (#(let [joined (clojure.string/join %) reversed (clojure.string/reverse joined)] (if (= joined reversed) true false)) x) (= x (reverse x))))","user":"57a5f1e3e4b0a96607956200"},{"code":"(fn [palinquack]\n\t(if (> 2 (count palinquack))\n  \t\ttrue\n        (if (= (first palinquack) (last palinquack))\n          (recur (rest (butlast palinquack)))\n           false)))","problem":27,"user":"528b08efe4b0239c8a67ae8a"},{"problem":27,"code":"(fn [S] (let [c (-> S (count) (/ 2) (int))\n              h (->> S (partition c) (first))\n              t (->> S (reverse) (partition c) (first))\n              z (map vector h t)]\n          (empty? (filter #(not= (first %) (last %)) z))))","user":"58e7eba2e4b056aecfd47cdf"},{"problem":27,"code":";;(fn palindrome [coll]\n;;  (if (= (seq coll) (reverse (seq coll))) true false))\n\n;; (fn [coll] (= (seq coll) (reverse (seq coll))))\n\n#(= (seq %) (reverse (seq %)))","user":"57fe7d7ce4b0d3187e9009d0"},{"problem":27,"code":"(fn [n]\n  (let [se (seq n)]\n    (= se (reverse se))))","user":"54b64fbbe4b05787c3b163b8"},{"code":"( fn [x]\n  (= (reverse x) (seq x))\n)","problem":27,"user":"4eb82088535d7eef30807380"},{"problem":27,"code":"#(=(reverse (reverse %)) (reverse %))","user":"54802bd1e4b0e286459a1157"},{"problem":27,"code":"(fn [coll]\n   (let [a-str #(apply str %)]\n     (= (a-str coll) (a-str (reverse coll)))))","user":"5ab23c99e4b073f1774425e2"},{"code":"(fn palindrome?[x] (\n  if(= (first x) nil) \n   true (if (= (first x) (last x)) \n          (palindrome? (rest (reverse (rest x)))) false)))","problem":27,"user":"4f9dbe07e4b0dcca54ed6d26"},{"problem":27,"code":"#(= % (if (= (type %) (type \"\"))\n     (reduce str (reverse %))\n     (reverse %)))","user":"581fe550e4b04b46fc4b0f4c"},{"problem":27,"code":"(fn p [s]\n  (let [r (reduce conj '() \n                  (seq s))] (= r (seq s))))","user":"56fa8984e4b07572ad1a88c1"},{"problem":27,"code":"(fn f [a] (cond (empty? a) true\n                (empty? (rest a)) true\n                :else \n                (and (= (first a) (last a))\n                     (f (rest (reverse (rest a) ))))))","user":"554c0adde4b0a04f7929959e"},{"code":"#(let [s (seq %1)] (= (reverse s) s))","problem":27,"user":"527675cbe4b03e8d9a4a74e2"},{"problem":27,"code":"(fn pal [w] (\n  do (print w ) \n  (if (> (count w) 0) \n    (if (< (count w) 3) \n       (if (= (first w) (last w)) true false)\n         (\n           if (= (first w) (last w)) (pal (rest (drop-last w))) false\n         )) false)\n  ) )","user":"602bca69e4b0d5df2af22267"},{"problem":27,"code":"(fn [x]\n  (= (into [] x)\n     (reverse x)))","user":"58b36131e4b0ebc645576d21"},{"code":"(fn palindrome [col]\n         (let [result (if (string? col)\n                        (reduce str (reverse col))\n                        (reverse col))]\n           (= result col)))","problem":27,"user":"5369d072e4b0243289761ea1"},{"code":"(fn [s] (= (apply str (reverse s)) (apply str s)))","problem":27,"user":"4e794004535db169f9c796a1"},{"code":"(fn pal [v]\n        (if (or (= 0 (count v)) (= 1 (count v)))\n            true\n            (if (= (first v) (last v))\n              (pal (butlast(rest v)))\n              false)\n            )\n          )","problem":27,"user":"51ccc92ce4b02254fc79487a"},{"code":"(fn pal [seq]\n  (if (< (count seq) 2)\n      true\n    (if (not (= (first seq) (last seq)))\n        false\n      (pal (rest (butlast seq))))))","problem":27,"user":"4ec14602535dfed6da9c6daa"},{"code":"(fn ! [x] (if(<= (count x) 1) true ( if(=(first x) (last x)) (!(drop-last(rest x))) false )  ))","problem":27,"user":"5139c00ee4b067e25a345ebc"},{"problem":27,"code":"(fn palindrome [s] (if (empty? s) true (if (= (first s) (last s)) (palindrome ( drop-last (drop 1 s))) false ) ))","user":"5b32571ee4b025bcb146f318"},{"problem":27,"code":"(fn [x] (if (= java.lang.String (class x))\n          (if (= x (clojure.string/reverse x))\n                 true\n                 false)\n          (if (= x (reverse x))\n                  true \n                  false)))","user":"56b2300ce4b0982f16b37dff"},{"problem":27,"code":"(fn isPalindrome\n  [x]\n  (loop [i 0 j (dec (count x))]\n  (if (> i j)\n    true\n    (if (= (nth x i) (nth x j))\n      (recur (inc i) (dec j))\n      false)))\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"(fn palindrome? [x]\n  (if (< (count x) 2)\n    ; base case\n    true\n    ; recursive case\n    (if \n      (and\n        (= (first x) (last x))\n        (palindrome? (rest (butlast x)))\n      )\n      true\n      false\n    )\n  )\n)","problem":27,"user":"4ffbc28ce4b0678c553fc3d4"},{"code":"(fn [x] (= (reverse x) (reverse (reverse x))))","problem":27,"user":"4dd579b5535dae65d5c462ea"},{"code":"(fn palindrome? [s] (or (<= (count s) 1) (and (= (first s) (last s)) (palindrome? (rest (butlast s))))))","problem":27,"user":"4e8de3a2535d65386fec213d"},{"code":"(fn palindrome? [x]\n  (let [sx (seq x)] (= sx (reverse sx))))","problem":27,"user":"4f047c07535dcb61093f6bcd"},{"problem":27,"code":"(fn [values]\n  (if (< (count values) 2)\n    true\n    (if (= (first values) (last values))\n      (recur (rest (drop-last values)))\n      false)))","user":"5911aa1de4b0163c97b36ed8"},{"problem":27,"code":"(fn [x] (= (take (quot (count x) 2) x) (reverse (take-last (quot (count x) 2) x))))","user":"5d7158f3e4b04d129b00f2e1"},{"code":"#(= ((if (string? %) clojure.string/reverse reverse) %) %)","problem":27,"user":"531f26d0e4b08068f379edc3"},{"code":"(fn [s]\n  (every? true? (map #(= %1 %2)\n                     (seq s) (reverse s))))","problem":27,"user":"4faa8de0e4b081705acca1f8"},{"problem":27,"code":"(fn [seq]\n  (if (string? seq)\n    (= seq (apply str (reverse seq)))\n    (= seq (reverse seq))\n    ))","user":"5c891afde4b048ec896c5935"},{"code":"(fn[sec]\n  (let \n    [len (count sec)\n    half (unchecked-divide-int len 2)]\n   (= (reverse (take half sec))\n      (drop (if (odd? len) (+ 1 half) half) sec))))","problem":27,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn palin [s]\n                  (cond\n                   (empty? s)    true\n                   (= (first s)\n                      (last s))  (palin (butlast (next s)))\n                   :else         false))","problem":27,"user":"4e71705e535d5021c1a89649"},{"problem":27,"code":"(fn [s]\n  (every? identity\n          (map #(= %1 %2) (seq s) (reverse (seq s)))))","user":"56cf4a48e4b0ea9b8538f767"},{"problem":27,"code":"(fn [i] \n  (if (= 0 (compare (into [] i) (into [] (reverse i))))\n    true\n    false\n    )\n )","user":"59636b6de4b066ee0a44b0c6"},{"problem":27,"code":"(fn pd [coll]\n  (= (reverse coll) (reverse (reverse coll)))\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"problem":27,"code":"(fn [entry] \n  (println (reverse  entry))\n  (= (reverse  entry) (seq entry))\n  )","user":"53f12b77e4b0742d9025b0da"},{"code":"(fn [coll]\n  (let [ct (count coll)\n        halfway (int (/ ct 2))]\n    (loop [i 0]\n      (cond\n        (> i halfway) true\n        :else\n          (if (not (= (nth coll i) (nth coll (- ct i 1))))\n            false\n            (recur (inc i)))))))","problem":27,"user":"51195e77e4b055cfb310d499"},{"problem":27,"code":"(fn [x]\n  (= (reduce conj [] (reverse x)) (seq x)))","user":"52b065dbe4b0c58976d9acc9"},{"problem":27,"code":"(fn [ll]\n  (let [c (count ll)] \n    ((fn [ll]\n      (= (first ll) (reverse (last ll))))\n    (cond\n     (even? c) (partition (/ c 2) ll)\n     (odd? c) (partition (/ (dec c) 2) (inc (/ (dec c) 2)) ll)\n    ))\n    \n    ))","user":"54297741e4b01498b1a71b39"},{"problem":27,"code":"(fn \n  [word] \n  (= \n   (reverse (seq word))\n   (seq word)\n  )\n)","user":"5e23ca7fe4b05b4b01516144"},{"problem":27,"code":"(fn [x]\n  (let [otherway (reverse x)]\n    (= x (if (string? x) \n           (apply str otherway)\n           otherway))))","user":"56f1b558e4b04a395b9a049a"},{"code":"#(= (reverse %)(seq %))","problem":27,"user":"530cb5b8e4b02e82168697e0"},{"problem":27,"code":"(fn\n  [pal]\n  (= (seq pal) (reverse pal)))","user":"542725fce4b01498b1a71b22"},{"code":"(fn [x] (= \n              (if (string? x) \n                (apply str (reverse x)) \n                (reverse x)) x))","problem":27,"user":"4fee1574e4b0678c553fc309"},{"problem":27,"code":";#(= (seq %)\n;  (into '() %) )\n\n\n#(= (seq %)\n  (reverse %) )","user":"54dce6dbe4b024c67c0cf78d"},{"problem":27,"code":"(fn [x]\n  (= (lazy-seq (reverse x)) (lazy-seq x)))","user":"589560d8e4b00487982d5281"},{"code":"#(= % (if (string? %) (clojure.string/join \"\" (reverse %)) (reverse %)))","problem":27,"user":"5035503de4b0ed9c821488f8"},{"code":"(fn [col]\n  (let [cor (reverse col) n (count col)]\n  (every? identity\n(map #(= (nth col %) (nth cor %)) (range (/ (dec n) 2)))\n  )))","problem":27,"user":"51e05dfae4b01188f0627543"},{"problem":27,"code":"(fn pal [x]\n  (if (empty? x) true\n    (if (= (first x) (last x)) \n      (pal (take (- (count x) 2) (rest x)) )\n      false\n    ))\n)","user":"56d5c1b0e4b0ea9b8538f7c3"},{"problem":27,"code":"(fn [v] (= (reduce (fn [a b] (cons b a)) [] v) (seq v)))","user":"56308326e4b073c1cf7a9be9"},{"problem":27,"code":"(fn [coll] (every? true?\n                     (map-indexed #(= %2 (nth coll (- (count coll) %1 1)))\n                                  (take (quot (count coll) 2) coll))))","user":"602c30e3e4b0d5df2af2226f"},{"code":"(fn [x]\n  (= (seq x) (reverse x)))","problem":27,"user":"4e47f4f3535dc968683fc4bb"},{"code":"(fn [x] \n  (reduce (fn  [b1 b2] ( and b1 b2))\n   (map = x (reverse x))\n   )\n  )","problem":27,"user":"51e1c176e4b06a68e693eafb"},{"code":"(fn [x] (if (string? x) (= (apply str (reverse x)) x) (= (reverse x) x)))","problem":27,"user":"4f2ca22fe4b0d6649770a054"},{"problem":27,"code":"(fn palindrome?\n  [s]\n  (if (<= (count s) 1)\n    true\n    (and\n     (= (first s) (last s))\n     (palindrome? (rest (butlast s))))))","user":"55b7ca4ae4b01b9910ae29b1"},{"problem":27,"code":"(fn [coll] (let [idx (quot (count coll) 2)]\n(loop [c     (take idx coll)\n       rvs   (reverse (take-last idx coll))]\n       (cond (or (empty? c) (empty? rvs)) true\n             (not= (first c) (first rvs)) false\n             :else (recur (rest c) (rest rvs))))))","user":"55bb6a19e4b01b9910ae29e5"},{"code":"#(=\n  (reverse (seq %1))\n  (seq %1)\n)","problem":27,"user":"5167e4a2e4b0c5a4140a3099"},{"problem":27,"code":"(fn ispalindrome [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))\n    )\n  )","user":"5d5950c1e4b02ba5928a6827"},{"problem":27,"code":"(fn pali [x]\n  (cond\n   (<= (count x) 1) true\n   (= (first x) (last x)) (pali (butlast (rest x)))\n   :else false))","user":"58f8d79ee4b0438e51c2cf39"},{"problem":27,"code":"#(if (= (type %) java.lang.String)\n   (= (clojure.string/reverse %) %)\n   (= (reverse %) %))","user":"576cb9c3e4b0979f89651551"},{"code":"#(let [c (count %) h (/ c 2)]\n     (= \n       (reverse (take h %)) \n       (take-last h %)\n     )  \n )","problem":27,"user":"517bc969e4b07ef0e56148d0"},{"problem":27,"code":"#(let [o (vec %1)] (= o (reverse o)))","user":"54d6b822e4b0a52adc2e201d"},{"code":"(fn is-palindrome [coll] (= (reverse coll) (vec coll)))","problem":27,"user":"519697a2e4b04c0af7ff3c21"},{"code":"(fn [s] \n  (= (seq s) (reverse s)))","problem":27,"user":"4f284db6e4b0d6649770a014"},{"problem":27,"code":"(fn [list]\n  (if (<= (count list) 1)\n    true\n    (if (= (first list) (last list))\n           (recur (rest (reverse (rest (reverse list)))))\n           false)))","user":"52ff7424e4b0d8b024fd3708"},{"problem":27,"code":"(fn palindrome [seq]\n  (loop [s seq r (reverse seq) is-palin true]\n    (cond (empty? s) is-palin\n          :else (recur (rest s) (rest r) (and is-palin (= (first s) (first r)))))))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"code":"(fn [x] (if (= (reverse (seq x)) (seq x)) true false))","problem":27,"user":"534b1930e4b084c2834f4a76"},{"problem":27,"code":"(fn pal [x]\n\t(if (= 0 (count x)) true\n     (and (= (first x) (last x)) (pal (rest (butlast x)))\n    )\n ))","user":"54b050cee4b09f271ff37d13"},{"problem":27,"code":"(fn is_palindrome [s]\n  (loop [i 0 j (dec (count s))]\n    (if (>= i j)\n      true\n      (if (= (nth s i) (nth s j))\n        (recur (inc i) (dec j))\n        false))))","user":"5590e55de4b0277789237676"},{"problem":27,"code":"(fn [xs] (let [c (count xs)\n               c2 (+ (/ c 2) (rem c 2))]\n            (= (take c2 xs) (take c2 (reverse xs)))))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":27,"code":"(fn is_palindrome [y]\n  (if (>= 1 (count y))\n    true\n    (if (= (first y) (last y))\n      (is_palindrome (drop 1 (drop-last y)))\n      false\n    )\n  )\n)","user":"56152a26e4b05f002753dfc1"},{"code":"#(= (vec %)(reverse %))","problem":27,"user":"4fb23582e4b081705acca28a"},{"code":"(fn [x]\n  (let [z (map vector x (reverse x))]\n    (loop [zipped z]\n      (let [item (first zipped) ne (next zipped)]\n        (cond (not ne) true\n              (not= (first item) (second item)) false\n              :else (recur ne))))))","problem":27,"user":"534941d1e4b084c2834f4a60"},{"code":"#(loop [seq %] (if (not= (first seq) (last seq)) false (if (> (count seq) 2) true (recur (butlast(next(seq)))))))","problem":27,"user":"4e721857535d5021c1a8965a"},{"problem":27,"code":"(fn isPalindrome\n    [x] \n    (let [f (first x) l (last x) len (count x)]\n      (if (= f l)\n          (if \n            (or (= 1 len) (= 2 len)) \n            true\n            (isPalindrome (-> x (rest) (reverse) (rest) (reverse))))\n          false)))","user":"6078ce29e4b0a637ed78035a"},{"code":"(fn [c](reduce #(and %1 %2) (map #(= %1 %2) c (reverse c))))","problem":27,"user":"528cc69fe4b0239c8a67aeb7"},{"problem":27,"code":"(fn palin? [x]\n  (or (< (count x) 2)\n      (and (= (first x) (first (reverse x)))\n           (palin? (drop-last (rest x))))))","user":"56eaf8f1e4b04a395b9a0419"},{"problem":27,"code":"(\n  fn palindrome? [l]\n (loop\n  [x (vec l),\n   n (dec (count l))\n  ]\n  (if\n   (= (nth x n)\n    (nth x\n     (- (dec (count l)) n)\n    )\n   )\n   (if \n    (< n (/ (count l) 2))\n    true\n    (recur x (dec n))\n   )\n   false\n  )\n )\n)","user":"54ef8d80e4b024c67c0cf887"},{"problem":27,"code":"(fn my-pal [lst]\n  (if (= (reverse (reverse lst)) (reverse lst)) true false))","user":"59dd387be4b0a0ac046f2502"},{"code":"(fn [S]\n  (if (string? S) \n    (true? (= S (apply str (reverse S))))\n    (true? (= S (reverse S)))))","problem":27,"user":"4fda016ae4b05e33b9224f42"},{"code":"#(= (reverse %)(reverse(reverse %)))","problem":27,"user":"53120cb5e4b08068f379ecf0"},{"problem":27,"code":"(fn palindrome [coll]\n\t(if (= (type coll) java.lang.String)\n\t\t(= coll (apply str (reverse coll)))\n\t\t(= coll (reverse coll))\n\t)\n)","user":"5bb4baace4b0a20761a23552"},{"problem":27,"code":"(fn [s]\n  (= (seq s) (-> s reverse seq)))","user":"5e066185e4b0978307768fa4"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)))","user":"5fe1589ee4b05ac5b16ea16c"},{"problem":27,"code":"#(let [l (into '() %)]  (= (reverse l) l))","user":"5b210749e4b03cfeda66ed48"},{"problem":27,"code":"(fn [n] (loop [n n\n               palindrome? false]\n          (if (<= (count n) 1)\n            palindrome?\n            (let [count (dec (count n))]\n                  (if (= (first n) (last n))\n              (recur (drop 1 (take count n)) true)\n              (recur [] false))))))","user":"5e8d3b37e4b0cb016954632c"},{"code":"(fn pal [x]\n  (if (<= (count x) 1) true\n    (and \n      (= (first x) (last x))\n      (recur (butlast (rest x))))))","problem":27,"user":"502bb7c0e4b0194ad32ea1a3"},{"code":"(fn [seq]\r\n  (loop [col seq, result true]\r\n    (if (not result)\r\n        false\r\n        (if (or (empty? col) (= 1 (count col)))\r\n            true\r\n            (recur (drop-last(drop 1 col)) (= (first col) (last col)))))))","problem":27,"user":"4e10a8e4535d04ed9115e7c2"},{"problem":27,"code":"(fn\n  [input] \n  (loop\n    [inarray (into [] input) outarray []] \n    (if (>= 1 (count inarray))\n      true\n      (if (not (= (first inarray) (last inarray)))\n        false\n        (recur  (into [] (rest (pop  inarray))) (conj outarray (last inarray)))\n      )\n    )))","user":"53c6c9dfe4b00fb29b2212a1"},{"code":"(fn pal [s]\n  ((fn seqeq? [s t]\n    (if (empty? s) true\n      (and\n        (= (first s) (first t))\n        (seqeq? (rest s) (rest t)))))\n    s (reverse s)))","problem":27,"user":"504e48ace4b0f6ff3350c498"},{"problem":27,"code":"(fn pol [sq] (if (< (count sq) 2)true \n               (and (= (first sq) (last sq) ) (pol (rest (drop-last sq))))))","user":"55599ae4e4b0deb715856e3a"},{"code":"(fn f [x] (or (= x '())\n              (and (= (first x) (last x))\n                   (f (rest (reverse (rest x)))))))","problem":27,"user":"4f039f14535dcb61093f6b3e"},{"problem":27,"code":"#( loop[x 0 y (dec (count %1))]\n    (\n      if(< x y)\n      (\n        if(= (nth %1 x) (nth %1 y))\n          (recur (inc x) (dec y))\n          (= (nth %1 x) (nth %1 y))\n      )\n      (= (nth %1 x) (nth %1 y))\n    )\n  )","user":"55129667e4b06e50f9beb1ac"},{"problem":27,"code":"(fn\n  [input]\n  (loop [input_seq input]\n    (if (< (count input_seq) 2)\n      true\n      (if (= (first input_seq)\n             (last input_seq))\n        (recur (rest (butlast input_seq)))\n        false))))","user":"53de7484e4b0d874e779ae35"},{"code":"(fn [obj] (= (seq obj) (reverse obj)))","problem":27,"user":"50f1dedbe4b0897c4366dcd8"},{"code":"(fn detect [x] (if (<= (count x) 1) true (and (= (first x) (last x)) (detect (rest (butlast x))))))","problem":27,"user":"52a8d0e6e4b0c58976d9ac37"},{"problem":27,"code":"(fn [palilist]\n  (loop [palilist palilist]\n        (if (or (= palilist '() ) (= (rest palilist) '() ))\n        true\n        (if (= (first palilist) (last palilist))\n              (recur (rest (drop-last palilist)))\n               false))))","user":"556e1712e4b09a3098a52511"},{"code":"(fn [s]\n  (loop [s s]\n    (if (empty? s) true\n      (if (not (= (first s) (last s))) false\n        (recur (rest (butlast s)))))))","problem":27,"user":"51c342e9e4b0851ac09658f3"},{"problem":27,"code":"(fn pal ([s] (pal s s [])) ([so ss sr] (if (empty? ss) (= (vec so) (vec sr)) (recur so (rest ss) (concat [(first ss)] sr)))))","user":"54a634abe4b09f271ff37c84"},{"code":"(fn [c]\n    (if (= c (if (string? c) (apply str (reverse c)) (reverse c))) true false))","problem":27,"user":"4dbe04b2535d020aff1edf56"},{"problem":27,"code":"(fn [s] (let [m (quot (count s) 2)\n                [a b] (split-at m s)]\n            (= a (take (count a) (reverse b)))))","user":"522724bde4b04e78ff2e19aa"},{"problem":27,"code":"#(loop [x (seq %) y (reverse (seq %))](println x y)\n   (if (and (empty? x) (empty? y))\n      true\n      (if (= (first x) (first y))\n        (recur (rest x) (rest y))\n        false)))","user":"5f9c4113e4b0715f5002d821"},{"problem":27,"code":"(fn [s] (let [myseq (seq s)] (= myseq (reverse myseq))))","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(fn [c]\n  (= (vec c) (reverse c)))","problem":27,"user":"4fd0d058e4b04c3a95aa0408"},{"code":"(fn [x] (= x (if (instance? String x) (apply str (reverse x)) (reverse x))))","problem":27,"user":"50aa777fe4b056ee01935866"},{"problem":27,"code":"#(= (list* %)(reduce conj '() (list* %)))","user":"549831b0e4b0b312c081ff7d"},{"code":"(fn [S] (= (seq S) (reverse (seq S))))","problem":27,"user":"53811c2de4b06839e8705ec8"},{"problem":27,"code":"#(if (= (type %) java.lang.String)\n      (= (apply str (reverse %)) %)\n      (= (reverse %) %))","user":"5f23efc8e4b0f565ad99828f"},{"problem":27,"code":"#(let [s (into [] %1)] (= s (reverse s)))","user":"58a31ecee4b02bd94d917ee7"},{"code":"(fn [x]\n  (let [len (count x)\n        halfway (quot len 2)]\n    (loop [l 0]\n      (let [r (- len l 1)]\n        (if (= l halfway)\n          true\n          (if (= (nth x l) (nth x r))\n            (recur (inc l))\n            false))))))","problem":27,"user":"51a8ef91e4b08d8ec191b820"},{"code":"(fn [word]\n         (if-not (string? word)\n           (= (reverse word) word)\n           (= (apply str (reverse word) word))))","problem":27,"user":"50493b52e4b06e84b772a23e"},{"problem":27,"code":"#(= (seq %) (reverse (seq %) ) )","user":"57604a87e4b08062f99a4e91"},{"problem":27,"code":"(fn isPal [s] \n  (if (empty? s) \n    true\n    (if (= 1 (count s))\n      true\n      (if (= (first s) (last s))\n        (isPal (drop-last (rest s)))\n        false\n      )\n    )\n  ))","user":"5245e320e4b09dbe66b56177"},{"problem":27,"code":"(fn palindrome [x]\n    (= (reverse(reverse x)) (reverse x)))","user":"5703d1fee4b08d47c97781fe"},{"problem":27,"code":"(fn [xs]\n  (let [length (count xs)\n        num-checks (if (odd? length) (dec length) length) \n        r-xs (take num-checks (reverse xs))]\n        (= r-xs (take num-checks xs)) ))","user":"5de051bfe4b0948ae9d9ade5"},{"code":"(fn p [l]\r\n  (cond\r\n    (nil? l) true\r\n    (= (first l) (last l)) (p (next (butlast l)))\r\n    :else false))","problem":27,"user":"4f244f26e4b0d66497709fea"},{"problem":27,"code":"(fn is-palindrome [col]\n  (cond\n   (< (count col) 2) true\n   (= (first col) (last col)) (is-palindrome (drop 1 (drop-last col)))\n   :else false))","user":"5a144fd8e4b0ff51aa4b319a"},{"code":"#(=(seq %)(reverse %))","problem":27,"user":"4e5ecd65535d8a8b8723a2d6"},{"problem":27,"code":"(fn\n  [seq] \n    (=\n      (apply str (reverse seq))\n      (apply str seq)\n    )\n)","user":"5bdb0b4ce4b0ed4b8aab4c10"},{"code":"(fn [x]\n  (loop [s (seq x)]\n    (if (<= (count s) 1)\n      true\n      (if (= (first s) (last s))\n        (recur (drop-last (rest s)))\n        false))))","problem":27,"user":"4f4a5ca6e4b0d56e7bb92c0f"},{"code":"#(let [c (/ (count %) 2)] (= (take c %) (->> % reverse (take c))))","problem":27,"user":"4f3ae998e4b0e243712b1f1f"},{"problem":27,"code":"(fn [x]\n         (loop [n 0]\n           (if (= \n                ; ceiling\n                (int (+ (/ (count x) 2) 0.5))\n                n)\n             true\n             (if (= (nth x n) (nth x (- (- (count x) 1) n)))\n               (do \n                 (println \"nth x n\" (nth x n))\n                 (recur (+ n 1))\n                 )\n               false\n               )\n             )))","user":"4f03e60d535dcb61093f6b7a"},{"problem":27,"code":"(fn is_palindrome [s]\n  (cond\n\t(empty? s) true\n   \t(= (first s) (first (reverse s))) (is_palindrome (drop-last (rest s)))\n   \t:else false                                        \n  )\n)","user":"55efbb2ae4b066087aa9453c"},{"problem":27,"code":"#(->> % reverse (apply str) (= (apply str %)))","user":"59d3eb2fe4b0ef0a1e9b5bd7"},{"code":"(fn p [coll](\n  = (seq coll) (reverse coll)))","problem":27,"user":"4ed42c78535d10e5ff6f52c7"},{"problem":27,"code":"(fn [coll] (loop [idx 0 rdx (- (count coll) 1)] (if (> idx rdx) true (if (= (nth coll idx) (nth coll rdx)) (recur (inc idx) (dec rdx)) false))))","user":"5b2e6b02e4b025bcb146f2d3"},{"problem":27,"code":"(fn [x] (= (reduce conj '() (reduce conj '() x)) (reduce conj '() x)))","user":"5ab3edf0e4b073f17744260d"},{"problem":27,"code":"#(loop [a % b (reverse %)]\n   (cond (and (empty? a) (empty? b)) true\n         (or (empty? a) (empty? b)) false\n         (not= (first a) (first b)) false\n         :else (recur (rest a) (rest b))))","user":"5c62979fe4b0fca0c162264c"},{"code":"(fn [col] (if (= col (if (string? col) (apply str (reverse col)) (reverse col))) true false))","problem":27,"user":"51a3c9cde4b0e77c4ca60bf9"},{"problem":27,"code":"(fn [vs]\n  (= (seq vs) (reverse vs)))","user":"57acb156e4b0b8559636fc8d"},{"problem":27,"code":"(fn [coll]\n  (let [len (count coll)\n        head (take (/ len 2) coll)\n        tail (reverse (drop (int (/ len 2)) coll))]\n    (= head tail)))","user":"5b4fef74e4b02d533a91bcde"},{"problem":27,"code":"#(true? (= (reverse %) (seq %)))","user":"5d1380cbe4b0902706380dba"},{"problem":27,"code":"#(let [x (seq %)]\n    (= x (reverse x)))\n\n;#(= (reverse %) (seq %))","user":"55bf6dbce4b01b9910ae2a12"},{"code":"(fn [x] \n  (if (string? x)\n    (= (apply str (reverse x)) x) (= (reverse x) x)))","problem":27,"user":"4f9970b3e4b0dcca54ed6cfd"},{"code":"(fn [xs] (= (map identity xs) (reverse xs)))","problem":27,"user":"507de7cde4b085af06e3afd0"},{"problem":27,"code":"(fn [seqn] (if (= (reverse seqn) (seq seqn)) true false))","user":"59b0e877e4b0e1f4e384c8d3"},{"problem":27,"code":"#(apply = (map reverse [% (reverse %)]))","user":"54c83824e4b045293a27f649"},{"problem":27,"code":"(fn [x]\n  (loop [f x]\n    (if (empty? f)\n      true\n      (if (= (first f) (last f))\n        (recur (butlast (rest f)))\n        false))))","user":"5b38d771e4b02d533a91bbb0"},{"problem":27,"code":"(fn [xs]\n  (= (seq xs) (-> xs seq reverse)))","user":"5f1c0447e4b0f565ad99825c"},{"problem":27,"code":"(fn palindrome [seqq]\n  (if (empty? seqq) true\n\t(if (= (first seqq) (last seqq))\n      (palindrome (butlast (rest seqq)))\n      false\n      )))","user":"59971e2de4b07157cc8daacc"},{"problem":27,"code":"#(\n  = %\n   (if (= (type %) java.lang.String)\n  (clojure.string/join (reverse %))\n  (reverse %))\n   \n  )","user":"5de44e22e4b0948ae9d9ae04"},{"problem":27,"code":"#(= (apply str %) (apply str (reduce conj '() %)))","user":"56e4427ce4b03a7c14b85a4c"},{"code":"#(= (into [] (reverse %)) (into [] %))","problem":27,"user":"52e8b2fce4b09f7907dd149c"},{"problem":27,"code":"(fn [col]\n\t  (let [rreverse #(let [x (reverse %)]\n\t\t\t\t\t    (if (string? %) (clojure.string/join x) x))]\n\t    (= col (rreverse col))))","user":"5313d68de4b08068f379ed0f"},{"code":"#(= \n   (reverse %) \n   (seq %)\n   )","problem":27,"user":"4ff54bfbe4b0678c553fc369"},{"code":"(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))","problem":27,"user":"4e40529b535dc968683fc49a"},{"problem":27,"code":"(fn [x]\n  (if (= (type x) java.lang.String)\n    (= x (reduce str (reverse x)))\n    (= x (reverse x))))","user":"5dcc5e5ce4b02b31cc3da3c7"},{"problem":27,"code":"#(if (= java.lang.String (class %))\n      (= % (apply str(reverse %)))\n      (= % (reverse %)))","user":"563f0fdae4b08d4f616f5ece"},{"code":"(fn check-reverse[s] (= (reverse s) (seq s) ))","problem":27,"user":"52e980b3e4b09f7907dd14af"},{"problem":27,"code":"(fn \n  [s] \n  (= \n   \ts \n   (if (string? s) (clojure.string/reverse s) (reverse s))))","user":"59a09b1de4b0871e7608b83a"},{"code":"(fn ispal [s] \n  (cond (<= (count s) 1) true\n        (not= (first s) (last s)) false\n        :else (ispal (rest (drop-last s)))))","problem":27,"user":"52c8a8b9e4b0c2d177d62139"},{"problem":27,"code":"#(if (= (into () %) (reverse (into () %)))\n   true\n   false)","user":"559e38b2e4b08a52bd4f97d2"},{"code":"(fn isPalindrome [v] \n  \n    (if (<= (count v) 1) \n        true \n        (if (= (first v) (last v) ) \n            (isPalindrome (rest(drop-last v))) \n            false \n          ) \n      ) \n    )","problem":27,"user":"531f0a26e4b08068f379edbf"},{"problem":27,"code":"#(= (clojure.string/join (-> % reverse)) (clojure.string/join %))","user":"53e2b212e4b036ad0777e3f4"},{"problem":27,"code":"(fn [arr] \n  (if (coll? arr)\n \t(= arr (reverse arr))\n\ttrue\n  )\n)","user":"562d6385e4b0a45d2ff8301b"},{"problem":27,"code":"(fn [x]\n   (= (seq x) (reverse (seq x))))","user":"575c23d3e4b02ea114799369"},{"code":"(fn palindrome? [s] \n  (if (< (count s) 2)\n    true\n    (and (= \n          (first s) \n          (first (reverse s))) \n         (palindrome? (rest (reverse (rest s)))))))","problem":27,"user":"4ecb65f6535df97575fdabda"},{"problem":27,"code":"(fn [x] (= (into '() x)  (seq x)))","user":"5f122f93e4b091ba50b4dbae"},{"problem":27,"code":"; (fn [l] (let [rev (reverse l)] (= rev (reverse rev))))\n#(= (seq %) (reverse %))","user":"58791973e4b01531a375eac5"},{"problem":27,"code":"(fn dp [in]\n    (if (or (empty? in) (= (count in) 1))\n      true\n      (if (= (first in) (last in))\n        (dp (rest (drop-last in)))\n        false)))","user":"5675f2f4e4b05957ce8c6153"},{"problem":27,"code":"(fn [x] (let [s (seq x)](= (reverse s) s)))","user":"59c76402e4b0a024fb6ae542"},{"problem":27,"code":"(fn palindrome [coll]\n    (if (< (count coll) 2)\n      true\n      (if (= (first coll) (last coll))\n        (recur (rest (butlast coll)))\n        false\n        )\n      )\n  )","user":"55f06183e4b06e875b46ce23"},{"problem":27,"code":"(fn [x]\n  (loop [lst x]\n    (if (empty? lst)\n      true\n      (if (= (first lst) (last lst))\n        (recur (rest (butlast lst)))\n        false))))","user":"5936a67de4b02506e01a2982"},{"problem":27,"code":"#(if (string? %)\n    (= (clojure.string/reverse %) %)\n    (= (reverse %) %))","user":"59a3f3dce4b066c664927d48"},{"problem":27,"code":"(fn [lst]\n    (loop [lst lst reversed (reverse lst)]\n        (cond\n            (= (first lst) nil) true\n            (= (first lst) (first reversed)) (recur (rest lst) (rest reversed))\n            :else false\n            )))","user":"55d354e0e4b0e31453f64a62"},{"problem":27,"code":"(fn [lst] (let [rlst (if (string? lst) (clojure.string/reverse lst) (reverse lst))] (= lst rlst)))","user":"577b9cfde4b0d3393e5deb16"},{"problem":27,"code":"(fn [sequ] (= (reverse sequ) (seq sequ)))","user":"548582eee4b0e286459a11ae"},{"problem":27,"code":"(fn ([a] (let [s (seq a)] (= s (reverse s)))))","user":"55c5261ee4b0e31453f649ae"},{"problem":27,"code":"(fn [lst]\n    (if (string? lst)\n        (= lst (apply str (reverse lst)))\n        (= lst (reverse  lst))))","user":"5f74de11e4b02876ed9fd0a5"},{"code":"(fn [x]\n  (let [sx (seq x)\n         rsx (reverse sx)]\n        (= sx rsx)))","problem":27,"user":"4f046d70535dcb61093f6bc5"},{"problem":27,"code":"(fn [l] (= (reverse (reverse l)) (reverse l)))","user":"56393681e4b0bfe05bf117f2"},{"problem":27,"code":"(fn [x]\n     ((fn [a b]\n         (cond \n               (and (empty? a) (empty? b)) true\n               (or (empty? a) (empty? b)) false\n               (= (first a) (first b)) (recur (rest a) (rest b))\n               :else false\n         )\n      ) x (reverse x))\n)","user":"577aacf2e4b0d3393e5deb03"},{"code":"(fn ! [seq] \n  (if (or (= 1 (count seq)) (empty? seq))\n    true\n    (and (= (last seq) (first seq)) (! (-> seq rest butlast)))\n   )\n )","problem":27,"user":"51db8244e4b0e067a9bbadc7"},{"problem":27,"code":"(fn [coll]\n  (if (instance? String coll)\n    \t(= coll (clojure.string/reverse coll))\n    \t(= coll (reverse coll))))","user":"604a3daee4b02d28681c77f2"},{"problem":27,"code":"(fn [list] (= (reverse list) (seq list)))","user":"55d79b87e4b0e31453f64aa8"},{"code":"(fn [s] (if (string? s) (= s (apply str (reverse s))) (= s (reverse s))))","problem":27,"user":"4e5206ec535d302ef430da6c"},{"problem":27,"code":"(fn [xs]\n  (let [seq-xs (seq xs)]\n    (= seq-xs (reverse seq-xs))))","user":"55349c67e4b09218d5f44fa0"},{"code":"(fn palin [c]\n  (let [n (quot (count c) 2)\n        r (reverse c)]\n    (= (take n c) (take n r))))","problem":27,"user":"52f8f4d1e4b047fd55836fde"},{"problem":27,"code":"(fn [input] \n  (= input (cond \n          (string? input) (clojure.string/join (reverse input)) \n\t\t  true (reverse input))\n\t\t))","user":"5f0ccff2e4b0f30dddfb5d4f"},{"problem":27,"code":"(fn [xs] (= (take (quot (count xs) 2) xs) (reverse (take-last (quot (count xs) 2) xs))))","user":"54236ce1e4b01498b1a71ad1"},{"code":"(fn [xs] (= (vec xs) (vec (reverse xs))))","problem":27,"user":"4f1ae082535d64f603146470"},{"problem":27,"code":"#(= (reduce (fn [a b] (cons b a)) [] %) (reduce (fn [a b] (conj a b)) [] %))","user":"59406b94e4b069cdc2982bfd"},{"problem":27,"code":"(fn [a-seq]\n  (let [a-seq-seq (seq a-seq)]\n  (= a-seq-seq (reverse a-seq-seq))))","user":"56e48302e4b03a7c14b85a4e"},{"problem":27,"code":"(fn palindrome? [xs]\n  (let [reverse (reverse xs)]\n    (if (char? (first reverse))\n      (= xs (apply str reverse))\n      (= xs reverse))))","user":"5d3e66d4e4b01671435dbd72"},{"code":"(fn [s] (if (string? s)\n  \t\t\t(= s (apply str (reverse s)))\n          (= s (reverse s)) ))","problem":27,"user":"5196749be4b04c0af7ff3c20"},{"problem":27,"code":"(fn [x]\n  (if (< (count x) 2)\n    true\n    (if (= (first x) (last x))\n      (recur (butlast (rest x)))\n      false)))","user":"55f335f4e4b06e875b46ce57"},{"problem":27,"code":"#(if (even? (count %))\n    (= (take (/ 2 (count %)) %) (take (/ 2 (count %)) (reverse %)))\n    (= (take (/ 2 (dec (count %))) %) (take (/ 2 (dec (count %))) (reverse %))\n  )\n)","user":"57073037e4b0b0fb43fd0689"},{"code":"(fn [x] (= (seq (reverse x)) (seq x)))","problem":27,"user":"5174ade2e4b07031762f2edf"},{"problem":27,"code":"(fn [as]\n  (= (reverse as) (reverse (reverse as))))","user":"505223fae4b0a561d07d8f17"},{"problem":27,"code":"#(= (into () (into ()  %1)) (into () %1))","user":"54ab502fe4b09f271ff37cc4"},{"code":"(fn [x]\n\t  (loop [x x]\n\t    (if (or (= 0 (count x))\n\t\t    (= 1 (count x)))\n\t      true\n\t      (if (= (first x) (last x))\n\t\t(recur (butlast (rest x)))\n\t\tfalse))))","problem":27,"user":"4f05872b535dcb61093f6bf8"},{"code":"(fn [s]\n  (let [seq_s (seq s)]\n    (= seq_s (reverse seq_s))))","problem":27,"user":"4fa982fae4b081705acca1e0"},{"code":"#(if (string? %1)\n  (= %1 (clojure.string/reverse %1))\n  (= %1 (reverse %1)))","problem":27,"user":"5029faf6e4b023940c84aa46"},{"problem":27,"code":"(fn ispal\n  [col]\n  (loop [f (first col) l (last col) rem col]\n    (cond\n        (not= f l) false\n        (empty? rem) true\n        :else (recur (first rem) (last rem) (drop-last (rest rem)) )\n        )))","user":"55c9bc1ee4b0e31453f649f1"},{"code":"(fn [s]\n  (let [n (count s)]\n    (every? #(= (nth s %) (nth s (- (dec n) %))) (range 0 n))))","problem":27,"user":"51721aefe4b0d70c8bbbf24a"},{"code":"(fn [a] (every? identity (map #(= (nth a %) (nth (reverse a) %)) (range (/ (dec (count a))) 2))))","problem":27,"user":"52680eace4b03e8d9a4a7194"},{"problem":27,"code":"(fn [listing]\n  (= (seq listing) (reverse listing)))","user":"54f36b36e4b050824f58f5c2"},{"code":"(fn [x]\n  (if (string? x)\n    (if (= x (apply str (reverse x)))\n      true\n      false)\n    (if (= x (reverse x))\n      true\n      false)))","problem":27,"user":"52a0fa82e4b04e0c58e87bd1"},{"problem":27,"code":"(fn check [arr] (if (= '() arr) true (if (= (count arr) 1) true (if (= (first arr) (last arr)) (check (drop 1 (take (- (count arr) 1) arr))) false))))","user":"5e0596d5e4b0a607a9a45d7d"},{"problem":27,"code":"(fn\n  [coll]\n  (let [currColl (into [] coll)]\n    (= (reverse currColl) currColl)\n    )\n  )","user":"60337f1fe4b0d5df2af222c1"},{"code":"(fn p?[s]\n ; recursive palindrome detection\n (cond  (<= (count s) 1) true\n        (= (first s) (last s))\n            (recur (butlast (rest s)))\n        :else false))","problem":27,"user":"536c35c3e4b0fc7073fd6e3a"},{"problem":27,"code":"#(reduce 'and (map = %1 (reverse %1)))","user":"5841872be4b089d5ab817e06"},{"problem":27,"code":"(fn r [p] (if (= (first p) (last p)) (if (not-empty p) (r (rest (butlast p))) true) false))","user":"56aed78fe4b03c432f187363"},{"problem":27,"code":"#(= (take (/ (dec (count %)) 2) %) \n     (reverse (take-last (/ (dec (count %)) 2) %)))","user":"557819dce4b05c286339e088"},{"problem":27,"code":"(fn [obj]\n  (if (string? obj)\n    (= (apply str (reverse obj)) (str obj))\n    (= (reverse obj) obj)\n    )\n  )","user":"609282f6e4b00e9e6653c3da"},{"code":"(fn isPalindrome\n  [l] \n  (if (empty? l)\n    true\n    (if (not= (first l) (last l))\n      false\n      (isPalindrome (drop-last (rest l)))\n      )\n    )\n)","problem":27,"user":"534adc16e4b084c2834f4a73"},{"problem":27,"code":"(fn [target]\n  (let [rev-target (reverse target)]\n    (every? (fn [[t r]] (= t r))\n            (map vector target rev-target))))","user":"55e558e3e4b050e68259b46b"},{"code":"(fn [x]\n    (let [sx (seq x)\n          rx (reverse (seq x))]\n      (= sx rx)))","problem":27,"user":"4fe89297e4b07c9f6fd12c4c"},{"problem":27,"code":"(fn [list] (= (reverse (reverse list)) (reverse list)))","user":"56014a5fe4b04bb52996e183"},{"code":"(fn [s] (= (seq s) (reverse (seq s))))","problem":27,"user":"4e5f5e14535d8ccf87e9fe47"},{"code":"(fn [x]\n           (let [half-point (int (/ (count x) 2))\n                 length     (count x)]\n             (loop [idx 0]\n                   (if (> idx half-point)\n                       true\n                     (if (= (nth x idx) (nth x (- length idx 1)))\n                         (recur (inc idx))\n                       false)))))","problem":27,"user":"5256cd77e4b0541d1855ba39"},{"problem":27,"code":"(fn [coll] (let [reversed (reverse coll) reversed-text (apply str (reverse coll))]\n             (if (string? coll)\n               (= reversed-text coll)                                                                    \n               (= reversed coll))))","user":"5f757c1ce4b02876ed9fd0aa"},{"problem":27,"code":"(fn palin [x] (if (> (count x) 1) (if (= (first x) (last x)) (palin (rest (reverse (rest x)))) false) true) )","user":"552949e5e4b0ffed3738f948"},{"code":"(fn [l]\n  (let [x (list* l)]\n    (= x (reverse x))))","problem":27,"user":"4ef19836535dced4c769f217"},{"problem":27,"code":"(fn palindrome\n  [x]\n  (= (seq x) (reverse x)))","user":"559ce276e4b0ec2b359424d7"},{"problem":27,"code":"(fn [x] (let [y (reverse (seq x))]  (= (seq x) y)))","user":"564c8e99e4b0284900eef674"},{"problem":27,"code":"(fn [x] (let [t (into [] x)] (= t (rseq t))))","user":"57b7de74e4b0fbc9809a27d4"},{"problem":27,"code":"(fn pal [a]\n(loop\n  [b a]\n  (if (empty? (rest b))\n      true\n      (if (not= (first b) (last b))\n          false\n          (recur (rest (reverse (rest (reverse b)))))))))","user":"5c8fa41be4b048ec896c59c1"},{"code":"(fn palindrome? [s]\n  (if (< (count s) 2)\n    true\n    (and (= (first s) (last s)) (palindrome? (butlast (rest s))))))","problem":27,"user":"4fe8e771e4b0547ebccb2431"},{"problem":27,"code":"(fn [x]\n  (if (= (apply str(reverse x)) (apply str x))\n    true\n    false))","user":"58ffac9de4b0438e51c2cffd"},{"code":"(fn pal [L]\n  (let [v (vec L)]\n\t     (loop [i 0 j (dec (count v))]\n\t\t(cond\n\t\t  (>= i j) true\n\t\t  (not (= (nth v i) (nth v j))) false\n\t\t  :else (recur (inc i) (dec j))))))","problem":27,"user":"4e6e3a1e535d5021c1a89602"},{"code":"(fn [col]\n  (= (seq col)(reverse col)))","problem":27,"user":"4db2cc55535df7e46ed9b6c5"},{"code":"(fn [xs] (= (reverse xs) (list* xs)))","problem":27,"user":"4ddabc33535d02782fcbe9f5"},{"problem":27,"code":"(fn [sq]\n  (if-not (= (reverse sq) sq)\n  (let [cnt (int (/ (count sq) 2))]\n    (= (take cnt (apply str (reverse sq))) (take cnt sq)))\n  true))","user":"53b05a75e4b047364c044482"},{"problem":27,"code":"(fn palindrome? [s]\n  (let [r (reverse s)]\n    (= s (if (instance? String s)\n           (apply str r)\n           r))))","user":"545944a2e4b01be26fd74627"},{"problem":27,"code":"(fn [s] (= (rseq (vec s)) (vec s)))","user":"59ab61f1e4b08cbb53654d9b"},{"problem":27,"code":"(fn [x] (let [x (seq x) y (reverse x)] (= x y)))","user":"52435d0ce4b076204b44fab5"},{"code":"(fn [x]\n    (let [rc (reverse x)\n          n (count x)]\n      (every? identity\n        (map #(= (nth x %) (nth rc %)) (range (/ (dec n) 2))))))","problem":27,"user":"51a3738ce4b0e77c4ca60bf0"},{"problem":27,"code":"#(= (take (unchecked-divide-int (count %1) 2) %1) (reverse (take-last (unchecked-divide-int (count %1) 2) %1)) )","user":"55b1ab40e4b0da326a65cf6e"},{"problem":27,"code":"(fn [xs] (if (string? xs)\n           (= xs (clojure.string/reverse xs))\n           (= xs (reverse xs))))","user":"5d84fccae4b0915913b1d390"},{"problem":27,"code":"(fn [xs] (= (reverse (seq xs)) (seq xs)))","user":"535fa486e4b04ce2eb3ed2e0"},{"code":"#(= (reverse %) (list* %))","problem":27,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":27,"code":"(fn palindrome? [coll]\n  (loop [c coll\n         r false]\n    (let [f (first c)\n          l (last c)\n          not-nil? (complement nil?)]\n      (if (and (not-nil? f) (not-nil? l) (= f l))\n        (recur (-> c rest butlast) true)\n        r))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"code":"(fn[s] (= (seq s) (reverse s)))","problem":27,"user":"5339cb07e4b0e30313ee6caf"},{"problem":27,"code":"(fn [lst]\n  (= lst (if (string? lst)\n           (apply str (reverse lst))\n           (reverse lst))))","user":"55c68089e4b0e31453f649c4"},{"problem":27,"code":"#( = (seq %) (reverse (seq %) ) )","user":"569637d8e4b0dcc4269f4130"},{"problem":27,"code":"(fn [lst]\n  (if (not (seq lst))\n    true\n    (if (not= (first lst) (last lst))\n      false\n      (recur (drop 1 (drop-last lst))))))","user":"55c216dde4b0e31453f64974"},{"code":"(fn [x] (apply = ((juxt reverse (comp seq identity)) x)))","problem":27,"user":"4daef21cedd6309eace4d169"},{"problem":27,"code":"(fn [operand]\n  (if (string? operand)\n    (= (apply str (reverse operand)) operand)\n    (= (reverse operand) operand)))\n\n\n;(fn [operand] (if (= operand ((fn [operand] (apply str (#(-> % str (clojure.string/replace #\"[\\(|\\[|\\]|\\)]\" \"\") (reverse)) operand))) operand)) true false))","user":"5d1cd478e4b02ea6f0fb6991"},{"problem":27,"code":"#(= (reverse %1) (reverse (reverse %)))","user":"5a8d55a8e4b05369db4d2514"},{"problem":27,"code":"(fn [arg] \n  (loop [x arg]\n  \t(if (empty? x)\n      true\n      (if (and (= (first x) (last x)))\n       (recur (rest (butlast x)))\n        false\n       )\n      ))\n  )","user":"588b1eb5e4b05c141a256071"},{"code":"(fn [s]\n   (cond\n    (string? s) (= s (clojure.string/join (reverse s)))\n    :else (= s (reverse s))\n  )\n   )","problem":27,"user":"4f83dd78e4b033992c121c24"},{"code":"(fn is-pal\n  [s]\n  (= (seq s) (seq (reverse s))))","problem":27,"user":"52a4f3cee4b0c58976d9abe0"},{"problem":27,"code":"(fn [x] (= (seq x) (reverse  x)))","user":"5f1c7c3be4b0f565ad998261"},{"problem":27,"code":"#(loop [x % acc true] (if (empty? x) acc (recur (drop-last (drop 1 x))(and acc (= (first x) (last x))))))","user":"56b2652ae4b0982f16b37e04"},{"code":"(fn [li] (= (vec li) (reverse (vec li))))","problem":27,"user":"52d51024e4b09f7907dd1339"},{"code":"(fn test1\n  [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))","problem":27,"user":"50b0cffae4b009df37c708c5"},{"code":"#(if (string? %)\r\n    (= % (apply str (reverse %)))\r\n    (= % (reverse %)))","problem":27,"user":"4e21c0c7535d04ed9115e818"},{"code":"(fn [S] (\n                      let [RS (into '() S)\n                           RSS (into '() RS )\n                           ]\n                       (= RSS RS)\n                       ))","problem":27,"user":"4eef1164535d305ff5cb7f19"},{"code":"(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))","problem":27,"user":"4e8ddf32535d65386fec213c"},{"code":"(fn [xs] \n  (= (map identity xs) (reverse xs)))","problem":27,"user":"504e90bae4b069badc5a33b8"},{"problem":27,"code":"(fn [s]\n           (or (<= (count s) 1)\n               (and (= (first s) (last s))\n                    (recur (drop-last (rest s))))))","user":"5ea6fe98e4b00a66d4a951b2"},{"problem":27,"code":"(fn [ambigram]\n  (if (= (reverse (seq ambigram)) (seq ambigram)) true false))","user":"56193c6ee4b053970a773af2"},{"problem":27,"code":"#(= % (if (string? %) (clojure.string/reverse %)\n          (reverse %)))","user":"5cd26163e4b0ccb0619628fe"},{"code":"#(= (seq %) (seq (reverse %)))","problem":27,"user":"4e6a6be7535d8ccf87e9fee1"},{"problem":27,"code":"(fn [x]\n  (let\n    [rev (if (string? x)\n           clojure.string/reverse\n           reverse)]\n    (= x (rev x))))","user":"54ad4863e4b09f271ff37ce0"},{"code":"(fn palindrome [x]\n  (if (< (count x) 2)\n    true\n    (let [f (first x) l (last x) r (rest (butlast x))]\n      (and (= f l) (palindrome r)))))","problem":27,"user":"50784ae5e4b0fc74642bff68"},{"problem":27,"code":"#(every? (fn [v] (apply = v)) (zipmap % (reverse %)))","user":"5f9f032fe4b0715f5002d839"},{"problem":27,"code":"(fn [x] (if (= (type x) String) (= x (reduce str (reverse x))) (= x (reverse x))))","user":"60cebbd3e4b0e0fa5f1b4334"},{"problem":27,"code":"#(if (string? %1)\n   (= %1 (apply str (reverse %1)))\n   (= %1 (reverse %1)))","user":"545ded41e4b01be26fd74678"},{"problem":27,"code":"(fn [s] \n\t(let \n\t\t[\n\t\t\tchars\t(seq s)\n\t\t\tcnt\t(count chars) \n\t\t\tcnt-half\t(Math/floor (/ cnt 2))\n\t\t]\n\t\t(= (take cnt-half chars) (reverse (take-last cnt-half chars)))\n\t)\n)","user":"547e5efbe4b0c51c1f4d7306"},{"problem":27,"code":"(fn foo [x]\n   (if (<= 1 (count x))\n      (if (= (first x) (nth x (- (count x) 1)))\n          (foo (rest (butlast x)))\n          false\n      )    \n      true \n   )\n)","user":"574a71b7e4b02ea1147991fb"},{"code":"(fn [s]\n  (if (string? s)\n    (= (apply str (reverse s) s))\n    (= (reverse s) s)))","problem":27,"user":"4ec5510d535d6d7199dd3694"},{"problem":27,"code":"(fn [x] (=(seq x)(reverse (seq x))))","user":"54e604a1e4b024c67c0cf801"},{"code":"#(if (string? %) (= (apply str %) (apply str (reverse %))) (= % (reverse %)))","problem":27,"user":"523acf7be4b0aa37f082ed90"},{"problem":27,"code":"(fn pal [elem] \n  (= (apply str (reverse elem)) (apply str elem)) )","user":"544b9df2e4b0e39780006968"},{"problem":27,"code":"#(let [coll (seq %)]\n   (= coll\n      ((fn [coll]\n  (loop [o (seq coll)\n         c (count coll) \n         n 0 \n         l (empty coll)]\n    (if (== n c)\n      l\n      (recur o c (inc n) (cons (nth o n) l))))) coll)))","user":"561a1af6e4b053970a773b02"},{"problem":27,"code":"#(loop [x %]\n   (if (empty? x) \n     true\n     (if (=(first x) (last x))\n       (recur (rest (butlast x)))\n       false)\n   ))","user":"579fa28fe4b0264b925669fb"},{"problem":27,"code":"(fn [s]\n  (let [len (quot (count s) 2)\n        beg (take len s)\n        end (take len (reverse s))]\n    (= beg end)\n  ))","user":"56c9970ce4b0ed865f9758de"},{"code":"#(if (string? %)\r\n     (= % (clojure.string/reverse %))\r\n     (= % (reverse %)))","problem":27,"user":"5116e176e4b0063b4e3e16d7"},{"problem":27,"code":"(fn palindrom [xs]\n  (let [s (seq xs)\n        r (reverse s)]\n    (= s r)))","user":"5776903ee4b0979f8965163b"},{"problem":27,"code":"(fn [coll] (= (seq coll) (reduce #(cons %2 %1) [] coll)))","user":"5d4f21f3e4b0776584bd6f4e"},{"problem":27,"code":"(fn [s] (let [s1 (seq s) \n              s2 (reverse s1)] \n          (= s1 s2)))","user":"53a6e646e4b0ef122a8689cd"},{"code":"(fn is-palindrome? [p]\n  (= (rseq (vec p)) (seq (vec p))))","problem":27,"user":"4f98c161e4b0dcca54ed6cf5"},{"code":"(fn palin [coll]\n    (= (apply str coll) (apply str (vec (reverse coll)))))","problem":27,"user":"5370ef22e4b0fc7073fd6ea0"},{"code":"(fn [s] \n  (loop [ms s mr (reverse s)]\n    (cond\n      (= ms '()) true\n      (not= (first ms) (first mr)) false\n      :else\n      (recur (rest ms) (rest mr)))))","problem":27,"user":"4e9629c2535dbda64a6f6b3f"},{"problem":27,"code":"(fn [s] \n  (= (reverse s) (reverse (reverse s))))","user":"58a5a099e4b01a0c0b232918"},{"problem":27,"code":"(fn palindrome? [xs] (= (seq xs) (reverse (seq xs))))","user":"5c87c79be4b048ec896c591b"},{"problem":27,"code":"(fn [p]\n  (=\n   (take (quot (count p) 2) p)\n   (reverse\n    (take-last (quot (count p) 2) p))))","user":"609c1db9e4b00e9e6653c416"},{"problem":27,"code":"(fn polyndrom [a]\n  (if (empty? a)\n    true\n    (if (= (first a) (last a))\n      (polyndrom (rest (butlast a)))\n      false)))","user":"53d612cbe4b0e771c3025452"},{"problem":27,"code":"(fn palindromep\n  ([l] (palindromep l (count l) '()))\n  ([l1 n l2]\n   (case n\n     0 (= l1 l2)\n     1 (= (rest l1) l2)\n     (palindromep (rest l1) (- n 2) (conj l2 (first l1))))))","user":"5b3f2ba9e4b02d533a91bc09"},{"problem":27,"code":"#(loop [ens (into [] %)]\n   (if (or (empty? ens) (= (count ens) 1))\n     true \n     (if (= (first ens) (last ens)) (recur (subvec ens 1 (- (count ens) 1)))\n       false\n     )\n   )\n)","user":"55acb648e4b03311e7b73296"},{"problem":27,"code":"(fn [coll]\n  (= (seq     coll)\n     (reverse coll)))","user":"5791d259e4b0ebec4cfb75c0"},{"code":"#((fn palind [L LR] (if (empty? L) true (if (= (first L) (first LR)) (recur (rest L) (rest LR)) false))) % (reverse %))","problem":27,"user":"522dd30ee4b0a102974208c3"},{"problem":27,"code":"(fn [n](let [b (seq n)](= b (reverse b))))","user":"55ed71dae4b0121d4835fdd9"},{"code":"(fn [coll]\n  (let [coll      (seq coll)\n        match-len (quot (count coll) 2)]\n    (= (take match-len coll) (reverse (take-last match-len coll)))))","problem":27,"user":"4f4319ebe4b0d7d3c9f3fd13"},{"problem":27,"code":"(fn palindrome?\n  [coll]\n  (let [f (first coll)\n        l (last coll)\n        matches (= f l)]\n    (if (<= 3 (count coll))\n      matches\n      (and matches\n           (recur (drop-last 1 (drop 1 coll)))))))","user":"52ea025ae4b09f7907dd14b5"},{"problem":27,"code":"(fn palindrome [los] ; los: list-or-string\n  (let [lst (if (string? los) (seq los) los)\n        cnt (/ (count lst) 2)\n        left (take cnt lst)\n        right (reverse (take-last cnt lst))\n        zipped (map vector left right)]\n    (every? (fn [[a b]] (= a b)) zipped)))","user":"5912477be4b0163c97b36eec"},{"code":"#(= (reverse %) (vec %) )","problem":27,"user":"505d26aee4b0e6aca564be05"},{"code":"(fn [x] \n\t(if (string? x ) (= ( reduce str \"\" (reverse x)) x ) \n\t\t(= (reverse x) x)))","problem":27,"user":"518644bce4b0da5a5be3baca"},{"problem":27,"code":"(fn is-palindrome? [input]\n  (let [input-seq (seq input)]\n    (cond\n      (< (count input-seq) 2) true\n      (= (first input-seq) (last input-seq))\n      (is-palindrome? (butlast (rest input-seq)))\n      :else false)))","user":"5bc4f266e4b07a9b28b10066"},{"problem":27,"code":"(fn palindrome? \n  ([coll] (palindrome? coll (reverse coll)))\n  ([ordered reversed] \n   (if (empty? ordered)\n     true\n     (and \n      (= (first ordered) (first reversed))\n      (palindrome? (rest ordered) (rest reversed))))))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"(fn [x]\n  (loop [result true\n         m_l x\n         i 0]\n    (if (= i (int (/ (count x) 2)))\n      \tresult\n      \t(recur (= (first m_l) (last m_l)) (drop 1 (drop-last m_l)) (inc i)))))","problem":27,"user":"52a5a8ebe4b0c58976d9abed"},{"code":"(fn [s] (= (sequence s) (reverse s)))","problem":27,"user":"53722b80e4b0493c815db707"},{"code":"#(if (string? %)\n  (= % (apply str (reverse %))) \n  (= % (reverse %))\n     \n     )","problem":27,"user":"53886d2fe4b0640c7a9a589d"},{"code":"(fn [x] (= (into () x) (into () (into () x))))","problem":27,"user":"517d4ba3e4b0f5e87c18f261"},{"problem":27,"code":"(fn[x](= (apply str x) (apply str (reverse x))))","user":"5826a843e4b051871117befd"},{"code":"(fn pallindrome-detectinator [coll] (= (seq coll) (reverse coll)))","problem":27,"user":"50e1bdd8e4b019fc399ce17f"},{"code":"(fn[s] (= (seq s) (reverse (seq s))))","problem":27,"user":"4fe8aba5e4b07c9f6fd12c68"},{"code":"(fn [coll]\n\t(loop [begin 0 end (dec (count coll))]\n\t\t(if (< begin end)\n\t\t\t(if (= (nth coll begin) (nth coll end))\n\t\t\t\t(recur (inc begin) (dec end))\n\t\t\t\tfalse)\n\t\t\ttrue)))","problem":27,"user":"50eb4c32e4b0346a3e988cbf"},{"code":"(fn [s] (let [s (seq s)] (every? true? (map = s (reverse s)))))","problem":27,"user":"4ed188c8535d44c135fd68cf"},{"code":"#(= (reverse %) (seq %) )","problem":27,"user":"52b577c9e4b0c58976d9ad39"},{"code":"(fn [s]\n                  (let [s (seq s)\n                        half (int (/ (count s) 2))\n                        [first-half second-half] (if (odd? (count s))\n                                                   [(take (inc half) s) (drop half s)]\n                                                   (split-at half s))]\n                    (= first-half (reverse second-half))))","problem":27,"user":"4e9e4515535dbda64a6f6b95"},{"problem":27,"code":"#(= (reverse %) (reduce conj [] %))","user":"54a2b2e8e4b09f271ff37c5d"},{"code":"(fn pal?\n  [x]\n  (if (< (count x) 2) true\n  (if (= (first x) (last x))\n    (pal? (rest (butlast x)))\n    false\n    )\n  )\n)","problem":27,"user":"51f549c4e4b0abb92f97f9cb"},{"problem":27,"code":";; Problem 26\n(fn palindrome [seq]\n  (let [rev (if (string? seq)\n              (apply str (reverse seq))\n              (reverse seq))]\n    (= seq rev)))","user":"5a786f6be4b013a48d39976e"},{"problem":27,"code":"(fn palindrome?\n  [some-seq]\n  (= (reverse some-seq) (lazy-seq some-seq)))","user":"57a6ad79e4b0a9660795620b"},{"code":"x","problem":27,"user":"52e635b3e4b09f7907dd146f"},{"code":"#(if (empty? %) true (if (= (first %) (last %)) (recur (drop-last (rest %))) false))","problem":27,"user":"4f2c3ef8e4b0d6649770a051"},{"problem":27,"code":"(fn [coll] (= (into [] coll) (reverse coll)))","user":"577aad81e4b0d3393e5deb04"},{"problem":27,"code":"(fn pal-detect\n  [seqz]\n  (if (string? seqz)\n  \t(= seqz (reduce str (reverse seqz))) \n  \t(= seqz (reverse seqz))\n  )\n )","user":"5414b7c4e4b01498b1a719ed"},{"problem":27,"code":"(fn\n  [coll]\n  (if (= (seq coll) (reverse (seq coll)))\n    true\n    false\n    )\n  )","user":"5aefd746e4b0cc2b61a3bc3d"},{"code":"#(let [a (apply list %)] (= a (reverse a)))","problem":27,"user":"4f725201e4b07046d9f4f02f"},{"problem":27,"code":"#(let [orig %\n       rev (reverse %)]\n   (if (string? %)\n     (= orig (reduce str rev))\n     (= orig (concat rev))))","user":"5537f30fe4b09218d5f44fd8"},{"code":"(fn [S] (cond \n\t\t\t(<= (count S) 1) true\n\t\t\t(= (first S) (last S)) (recur (butlast (rest S)))\n\t\t\ttrue false))","problem":27,"user":"51cf126ae4b0e42293a2256b"},{"problem":27,"code":"(fn [x] \n  (= x (if (coll? x)\n         (reverse x)\n         (clojure.string/join (reverse x)))))","user":"55d44af5e4b0e31453f64a74"},{"problem":27,"code":"(fn [xs]\n  (let [revxs (reverse xs)\n        zipfn (fn [a b] [a b])\n        pairs (map zipfn xs revxs)]\n    (every? #(= (first %) (second %)) pairs)))","user":"579c73fee4b05b1deef9ae08"},{"code":"(fn [s]\n\t(let [ _fwd (seq s) _rev (reverse (seq s)) ]\n\t\t(loop [ fwd _fwd rev _rev ]\n\t\t\t(if (empty? fwd)\n\t\t\t\ttrue\n\t\t\t\t(if (= (first fwd) (first rev) )\n\t\t\t\t\t(recur (rest fwd) (rest rev) )\n\t\t\t\t\tfalse ) ) ) ) )","problem":27,"user":"52e8ecbbe4b09f7907dd14a0"},{"code":"(fn rev [x] (if (string? x) (= x (apply str (reverse x))) (= x(reverse x))))","problem":27,"user":"4fb86dc9e4b081705acca2d8"},{"code":"#(loop [s 0 e (- (count %) 1)]\n   (if (>= s e)\n     true\n     (if (= (nth % s) (nth % e))\n       (recur (+ s 1) (- e 1))\n       false\n     )\n   )\n)","problem":27,"user":"4fcd0990e4b0ee37620e1874"},{"problem":27,"code":"#(= (apply str (reverse %)) (apply str  %) )","user":"54094824e4b0addc1aec66da"},{"code":"(fn [x] (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))","problem":27,"user":"4fd6028ce4b0d4de60cee37b"},{"code":"(fn [s] \n  (= (seq s) (reverse (seq s))))","problem":27,"user":"4f0a4e7e535d0136e6c222f4"},{"problem":27,"code":"(fn [l]\n  (= (seq l) (reverse (seq l)))\n  )","user":"558843dae4b059ccff29b1f3"},{"code":"(fn [palin] (= (clojure.string/join palin) (clojure.string/join (reverse palin))))","problem":27,"user":"538c6db7e4b0b51d73faae5a"},{"problem":27,"code":"(fn pal [xs] \n  \t(if (empty? xs) true (if (= (last xs) (first xs)) (pal (rest (drop-last xs))) false)) \n  \n  )","user":"595fe942e4b066ee0a44b075"},{"code":"#(let [half (/ (count %) 2)]\n    (= (take half %) (reverse (take-last half %))))","problem":27,"user":"4f4d7b8fe4b03ad3f0c10ca9"},{"problem":27,"code":"(fn palin [lis] (loop [li lis]\n\n                    (if (empty? li) true\n                                  (if (not (= (first li) (last li))) false\n                                                                     (let [l1-without-first (drop 1 li)]\n                                                                       (println li)\n                                                                       (recur (take (- (count l1-without-first) 1) l1-without-first)\n                                                                              )))\n\n                                  )))","user":"5bfc2068e4b0bdcf453d15e4"},{"code":"(fn [coll]\n  (= coll\n    (if (string? coll)\n        (apply str (reverse coll))\n        (reverse coll))))","problem":27,"user":"5014754de4b094324338f8e5"},{"problem":27,"code":"(fn [coll]\n  (loop [new-coll coll]\n    (if (<= (count new-coll) 1)\n      true\n      (if (not= (first new-coll) (last new-coll))\n        false\n        (recur (rest (take (- (count new-coll) 1) new-coll))))\n      )\n    )\n  )","user":"58562083e4b0f14aab7c86eb"},{"problem":27,"code":"(fn [coll]\n  (let [r-coll (reverse coll)]\n    (= (seq  coll) r-coll)))","user":"532dbd3ce4b019098a6f8b40"},{"problem":27,"code":"(fn\n  [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (recur (rest (butlast s)))\n      false)))","user":"534bfc71e4b084c2834f4a88"},{"code":"(fn pal? [s] (if (or (empty? s) (= 1 (count s))) true (and (= (first s) (last s)) (pal? (butlast (rest s))))))","problem":27,"user":"4e6a4950535d8ccf87e9febf"},{"code":"(fn [coll]\n  (let [temp-seq (seq coll)]\n    (if (= (reverse temp-seq) temp-seq) true false)))","problem":27,"user":"51991a89e4b068aa333628fd"},{"problem":27,"code":"(fn\n  [s]\n  (let [m (into '[] s)]\n    (= m (reverse m))))","user":"56b2630be4b0982f16b37e03"},{"code":"(fn [a] (= (seq a) (seq (reverse a))))","problem":27,"user":"50e8422de4b0ebbe794eb7de"},{"problem":27,"code":"(fn [xsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdf]\n          (= (reverse xsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdf) (seq xsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdfxsasdfasdfasdfasdfadsfasfasdfasdfasfasdf))\n          )","user":"54cd9519e4b057c6fda3a2a6"},{"code":"(fn [seq]\n(if (<= (count seq) 1)\ntrue\n             (if (not (=  (first seq) (last seq)))\n               false\n               (recur (drop-last (rest seq))))))","problem":27,"user":"4e6dfe57535d5021c1a895fc"},{"problem":27,"code":"(fn [x] \n  (= (reverse x) (reverse (reverse x))))","user":"53c90510e4b00fb29b2212b6"},{"problem":27,"code":"(fn [xs]\n  (let [reversed (reverse xs)]\n    (if (string? xs)\n      (= xs (apply str reversed))\n      (= xs reversed))))","user":"575d22f5e4b02ea11479937a"},{"problem":27,"code":"(fn\n  [xs]\n  (= (vec xs) (reverse (vec xs))))","user":"546db2fbe4b00cfc9eacc190"},{"code":"(fn [s]\n    (let [len (quot (count s) 2)\n          front (take len s)\n          rear (take len (reverse s))]\n          (= front rear)))","problem":27,"user":"4e7263a1535d5021c1a8965f"},{"problem":27,"code":"(fn [s] (= s (let [reversed (reverse s)]\n           (if (string? s)\n             (apply str reversed)\n             reversed))))","user":"5c1fe56ae4b07e362c23056e"},{"code":"(fn pal [s]\n  (if-let [s (seq s)]\n    (if (= (first s) (last s))\n        (pal (rest (butlast s)))\n        false)\n     true))","problem":27,"user":"501577ade4b0aaedd199e911"},{"problem":27,"code":"(fn [sq]\n  (let [sz-sq (count sq)\n        take-point (if (odd? sz-sq)\n                          (/ (- sz-sq 1) 2)\n                          (/ sz-sq 2))\n        drop-point (if (odd? sz-sq)\n                          (+ take-point 1)\n                          take-point)\n        halve-one (take take-point sq)\n        halve-two (reverse (drop drop-point sq))]\n    (= halve-one halve-two)))","user":"559d33b3e4b0ec2b359424d9"},{"problem":27,"code":"(fn [l]\n  (if (and (= (first l) (last l)) l)\n    (recur (next (butlast l)))\n    (if l\n      false\n      true)))","user":"54570d08e4b080a794c2c888"},{"code":"#(loop [coll %]\n    (if (not= (first coll) (last coll))\n      false\n      (if (nil? (seq coll))\n        true\n        (recur (butlast (rest coll))))))","problem":27,"user":"528f0106e4b0239c8a67aeeb"},{"code":"(fn [x] (= (reverse x) (for [y x] y)))","problem":27,"user":"4f0cc259535d0136e6c22310"},{"problem":27,"code":"(fn [target]\n  (loop [start 0\n         target (vec target)\n         end (count target)]\n    (if (> (count target) 1)\n      (if (= (first target) (last target))\n        (recur (inc start) (subvec target 1 (dec (count target))) (dec end))\n        false)\n      true)))","user":"5dcd7933e4b0b296f82db5ae"},{"problem":27,"code":"(fn [li] (= (reverse (into '() li)) (into '() li)))","user":"56040b64e4b0c80df0ca2653"},{"code":"(fn pal [s]\n  (let [f (first s) l (last s)]\n  (if (empty? s)\n    true\n    (if (= f l)\n      (pal (rest (take (dec (count s)) s)) )\n      false)\n   )))","problem":27,"user":"4e8f5dd1535d65386fec214b"},{"problem":27,"code":"(fn is-palindrome? [s]\n    (if (<= (count s) 1)\n      true\n      (if (= (first s) (last s))\n        (recur (butlast (rest s)))\n        false)))","user":"5e3b10f4e4b01d43a70e8dec"},{"code":"(fn [seq]\r\n  (loop [sq seq\r\n         result true]\r\n    (if (or (empty? sq)  (= 1 (count sq)))\r\n      result\r\n      (if (= (first sq) (last sq))\r\n        (recur (drop-last (rest sq)) true)\r\n        (recur (drop-last (rest sq)) false)))))","problem":27,"user":"4f8aa1c1e4b02e764a0a516e"},{"problem":27,"code":"(fn t[s] \n  (if(<= (count s) 1)\n    true\n    (if (= (first s) (first (reverse s)))\n      (t (-> s\n          (rest)\n          (reverse)\n          (rest)\n          (reverse)))\n      false)))","user":"5c22c861e4b07e362c230590"},{"problem":27,"code":"(fn [item] (= (apply str item) (apply str (reverse item))))","user":"56020b3fe4b04bb52996e19b"},{"problem":27,"code":"(fn[x] (= (reverse x) (seq x)) )","user":"54f3e216e4b050824f58f5cc"},{"problem":27,"code":"(fn [x]\n  (not= (count (set x)) (count x)))","user":"58384bc4e4b089d5ab817d27"},{"problem":27,"code":"(fn [st] (= (seq st) (reverse st)))","user":"5555432ee4b0deb715856e13"},{"problem":27,"code":"(fn [c]\n  (let [half (quot (count c) 2)]\n    (= (take half c) (reverse (take-last half c)))))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":27,"code":"#(-> % (seq) (reverse) (= (seq %)))","user":"512b07f7e4b078b06821febb"},{"problem":27,"code":"#(let  [revers1 (if (string? %)\n              (clojure.string/reverse %)\n              (reverse %))]\n   (= revers1 %))","user":"585dbe41e4b0f14aab7c879f"},{"code":"(fn [ls]\n  (= (reverse ls) (reverse (reverse ls))))","problem":27,"user":"52aa4a67e4b0c58976d9ac62"},{"problem":27,"code":"(fn [l] \n  (every? (fn [[a b]] (= a b)) (partition 2 (interleave l (reverse l)))))","user":"5db93acbe4b010eb3c36cd51"},{"problem":27,"code":"(fn [v]\n  (loop [cpt 0]\n    (if(< cpt (quot (count v) 2))\n      (if(= (nth v cpt) (nth v (- (count v) cpt 1)))\n        (recur (inc cpt))\n        false)\n      true)))","user":"5a786223e4b013a48d39976b"},{"problem":27,"code":"(fn palindrome?\n  [seq]\n  (let [count (count seq)\n        threshold (/ count 2)]\n    (println (str \"count:\" count \" threshold:\" threshold))\n    (loop [index 0]\n      (if (> index threshold)\n        true\n        (if (= (nth seq index) (nth seq (- (dec count) index)))\n          (recur (inc index))\n          false)))))","user":"542098afe4b01498b1a71aa7"},{"code":"#(let [orig (seq %), rev (reverse orig)] (= orig rev))","problem":27,"user":"4e584256535d8a8b8723a28e"},{"code":"(fn [seq]\n   (loop [s seq]\n       (if (<= (count s) 1)\n         true\n         (if (= (first s) (last s))\n           (recur (butlast (rest s)))\n           false))))\n\n;; austintaylor's solution:\n;; #(= (reverse %) (seq %))","problem":27,"user":"51392535e4b0a5db03d727e1"},{"problem":27,"code":"(fn [coll]\n    (let [quantity (int (/ (count coll) 2)) ]\n        (= (take quantity coll) (take quantity (reverse coll)))))","user":"5885eb2de4b0f1effa3b76c6"},{"problem":27,"code":"(fn [x] \n  (if (string? x)\n    (= x (clojure.string/reverse x))\n  \t(= x (reverse x))))","user":"5d1a1082e4b0902706380e0e"},{"problem":27,"code":"#(if (= (apply str %) (apply str (vec (reverse %)))) true false)","user":"56ab7578e4b03c432f18733d"},{"problem":27,"code":"(fn asdf [x] (= (apply str (reverse x)) (apply str x)))","user":"557e8326e4b05c286339e0d7"},{"code":"(fn palindrome? [coll]\r\n  (every? true? (map = coll (reverse coll))))","problem":27,"user":"4e7e4a1f535db169f9c7970c"},{"problem":27,"code":"(fn [li]\n  (= (seq li) (reverse li)))","user":"5786c182e4b0ebec4cfb74fd"},{"code":"#(= %1 (cond (string? %1) (clojure.string/reverse %1) :else (reverse %)))","problem":27,"user":"52f762ece4b047fd55836fc2"},{"problem":27,"code":"(fn palindrome? [coll]\r\n  (= coll\r\n     (if (string? coll)\r\n       (apply str (reverse coll))\r\n       (reverse coll))))","user":"5f5396d4e4b0a0bc16850a79"},{"code":"#(every? identity (map = (seq %) (reverse %)))","problem":27,"user":"4e589bdc535d8a8b8723a295"},{"code":"(fn pal [l]\n  (if (seq l) \n      (if (= (first l) (last l))\n          (recur (reverse(rest(reverse(rest l)))))\n          false)\n      true))","problem":27,"user":"4e89ddf9535d3e98b8023284"},{"problem":27,"code":"#( = (if (string? %) (clojure.string/reverse %) (reverse %))%)","user":"58a1d00ae4b02bd94d917ec6"},{"problem":27,"code":"(fn [coll]\n          (= (reverse coll)\n             (reverse (into (list) coll))\n             ))","user":"58db48a5e4b0a4d5acaab679"},{"problem":27,"code":"#(= (subvec (vec %) 0 (int (/ (count %) 2)))\n    (subvec (vec (reverse %)) 0 (int (/ (count %) 2))))","user":"57acbe5fe4b0b8559636fc8e"},{"problem":27,"code":"(fn pal [seq]\n  (if (not (= (first seq) (last seq)))\n    false\n    (if (empty? seq)\n      true\n      (recur (rest (take (dec (count seq)) seq))))))","user":"5d323149e4b01671435dbce9"},{"code":"#(= (seq %) (reverse(seq %)))","problem":27,"user":"50ecf888e4b01236b1d49835"},{"problem":27,"code":"#(= (reverse %) (reverse( reverse%)))","user":"563cdfdfe4b0bfe05bf11840"},{"code":"#(if (= (vec %) (vec (reverse %)))\n  true\n  false)","problem":27,"user":"4f24b023e4b0d66497709fee"},{"problem":27,"code":"(fn palindrome? [coll]\n  (let [cnt (quot (count coll) 2)\n        first-half (take cnt coll)]\n  (if (even? (count coll))\n  (= first-half (reverse (drop cnt coll)))\n  (= first-half (reverse (drop (inc cnt) coll))))))","user":"58182480e4b0c0e9c07b83a7"},{"problem":27,"code":"(fn [coll]\n  (let [size (count coll)\n         upto (int (/ size 2))]\n    (every? \n      (fn [index] (= (nth coll index) (nth coll (- size index 1))))\n      (range 0 upto))))","user":"5eecd339e4b07c55ae4a0507"},{"code":"#(empty? (filter (fn [[a b]] (not= a b)) (zipmap %(reverse %))))","problem":27,"user":"513fab65e4b00f13ea1bd891"},{"problem":27,"code":"#(let [size (count %) range (take size (iterate inc 0))]\n   (reduce (fn [bool, idx]\n             (if (= (nth % idx) (nth % (- size idx 1)))\n               (and true bool)\n               false))\n           true\n           range))","user":"53aef31ce4b047364c04447b"},{"problem":27,"code":"(fn paldet [x]\n        (cond (= (nthnext x\n                            (int (/ (count x) 2)))\n                 (nthrest (reverse x)\n                                   (int (/ (count x) 2)))\n                 ) true\n              :else false))","user":"57614a42e4b0994c1922fb85"},{"problem":27,"code":"(fn [x]\n    (= (count(let [x (vec x)\n          reversed (vec (reverse  x))]\n        \n        (filter #(= (x %) (reversed %)) (range (count x)))))\n       (count x)))","user":"5f77890ae4b02876ed9fd0b9"},{"problem":27,"code":"(fn [my-seq]\n    (= (seq my-seq) (reverse my-seq)))","user":"5784ff88e4b0ebec4cfb74d4"},{"code":"(fn is-palindrome[x]\n  (= (seq x) (reverse x))\n  )","problem":27,"user":"52a1edd6e4b04e0c58e87be4"},{"code":"(fn pal [n] (= (-> n reverse reverse) (reverse n)))","problem":27,"user":"4ef2a142535dced4c769f21e"},{"code":"(fn [pal]\r\n  (= (seq pal) (reverse pal)))","problem":27,"user":"4e02bee8535d04ed9115e791"},{"code":"(fn ispalindrome [lst] (\r\n  cond\r\n    (nil? lst) true\r\n    (nil? (next lst)) true\r\n    (= (first lst) (last lst)) (ispalindrome (next (drop-last lst)))\r\n    :else false\r\n))","problem":27,"user":"4fd459cfe4b0d4de60cee36b"},{"problem":27,"code":"#(cond (empty? %) true\n       (= (first %) (last %)) (recur (reverse (rest (reverse (rest %)))))\n       true false)","user":"585dc682e4b0f14aab7c87a0"},{"problem":27,"code":"(fn palindrome-detector\n  ([x]\n   (if (< (count x) 2)\n     true\n     (if (= (last x) (first x))\n       (palindrome-detector (butlast (rest x)))\n       false\n     )\n   )\n  )\n)","user":"5759e317e4b02ea114799330"},{"code":"(fn [x]\n  (loop [n (- (/ (count x) 2) 0.5)\n          word x\n          list []]\n    (if (> n 0)\n      (recur (dec n)\n              (rest word)\n              (cons (first word) list))\n      (if (= (count word) (count list))\n        (= word list)\n        (= (rest word) list)))\n  )  \n)","problem":27,"user":"4fe610fde4b0e8f79898fece"},{"problem":27,"code":"(fn [x]\n    (if (string? x)\n     (= x (apply str (reverse x)))\n     (= x (reverse x))))","user":"5578ba3ae4b05c286339e08c"},{"problem":27,"code":"(fn[x] (\n        loop [sequ x\n              rev-sequ (reverse x)]\n        \t(\n             if (empty? sequ)\n             true\n             (if (= (first sequ) (first rev-sequ))\n               (recur (rest sequ) (rest rev-sequ))\n               false\n             )\n        )))","user":"59b2d51be4b0e1f4e384c902"},{"code":"(fn [a] (reduce #(and %1 %2) (map = a (reverse a))))","problem":27,"user":"529242bee4b0239c8a67af28"},{"code":"(fn [x]\n  (every? (fn [[a b]] (= a b))\n    (partition 2 (interleave x (reverse x)))))","problem":27,"user":"4dc0ac2c535d020aff1edf7f"},{"problem":27,"code":"(fn f [x] (= (reduce conj () x) (seq x)) )","user":"594765cee4b07ddc2dafad9b"},{"code":"(fn palindrome?\n  [s]\n  (let [s (seq s)\n        r (reverse s)]\n    (= r s)))","problem":27,"user":"5263c44fe4b03e8d9a4a70b8"},{"problem":27,"code":"#(loop [coll %]\n   (if (< (count coll) 2)\n     true\n     (if (= (first coll) (last coll))\n       (recur (-> coll rest reverse rest reverse))\n       false\n       )))","user":"55a74d46e4b09e57187da2a3"},{"problem":27,"code":"(fn palindrome?\n  [input-seq]\n  (let [elems (count input-seq)]\n    (every? true? (map #(= (nth input-seq %) (nth input-seq %2)) (range elems) (reverse (range elems))))))","user":"55a62092e4b0acc240e31554"},{"code":"(fn [sequence]\n  (loop [ltr sequence\n         rtl (reverse sequence)]\n    (if (and (nil? ltr)\n             (nil? rtl))\n      true\n      (if (not (= (first ltr)\n                  (first rtl)) )\n        false\n        (recur (next ltr) (next rtl))))))","problem":27,"user":"4e8a8720535d65386fec210c"},{"code":"(fn [el]\n    (loop [b 0 e (dec(count el))]\n      (if (> b e)\n        true\n        (if (= (nth el b) (nth el e))\n          (recur (inc b) (dec e))\n          false\n          )\n        )\n      )\n    )","problem":27,"user":"4e94a8b5535dbda64a6f6b16"},{"problem":27,"code":"(fn [arg]\n  (if (string? arg)\n   \t(= arg (apply str (reverse arg)))\n    (= arg (reverse arg))\n  )\n)","user":"56f188e9e4b04a395b9a0494"},{"problem":27,"code":"(fn [x](if(string? x)\n         (= x (clojure.string/reverse(apply str(seq x))))\n         (= x (reverse(apply vector(seq x))))))","user":"59637028e4b066ee0a44b0ca"},{"code":"(fn [x] \n\t(= (reverse (vec x)) (vec x)))","problem":27,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"#(= (seq %)  (reverse %))","problem":27,"user":"517945dce4b0684c1c981a43"},{"problem":27,"code":"(fn [s]\n  (loop [s s, r (reverse s)]\n      (if (seq s)\n        (if (= (first s) (first r))\n          (recur (rest s) (rest r))\n          false)\n        true)))","user":"5a805f7ee4b00b71e582a04d"},{"problem":27,"code":"(fn f [x]\n  (if (empty? x)\n    true\n    (if (not= (first x) (last x))\n      false\n      (recur (drop-last (rest x))))))","user":"57029859e4b08d47c97781e4"},{"problem":27,"code":"(fn [coll]\n  (if (= (type coll) java.lang.String)\n    (= (apply str (reverse coll)) coll)\n    (= (reverse coll) coll)))","user":"5ef4bfb4e4b07c55ae4a0545"},{"problem":27,"code":"(fn f [col] (if (empty? col) true (if (not= (first col) (last col)) false (f (rest (butlast col))))))","user":"53f9fe41e4b0de5c41848575"},{"problem":27,"code":"(fn [cl] (let [ncl (count cl), hcl1 (long (Math/ceil (/ ncl 2.0)))\n               cl2 (partition (long (/ ncl 2)) hcl1 cl)]\n    (every? #(= true %) (map #(= %1 %2) (nth cl2 0) (reverse (nth cl2 1))) )\n          \n))","user":"55adf4d7e4b03311e7b732af"},{"problem":27,"code":"(fn [s]\n  (every? identity (map = s (reverse s))))","user":"547dc4c7e4b0c51c1f4d72f8"},{"problem":27,"code":"(fn palindrome? [coll]\n  (if (empty? coll) true\n      (and (= (first coll) (last coll)) (palindrome? (rest (butlast coll)))))\n  )","user":"603ae21de4b0d5df2af222fb"},{"code":"(fn [x] \n  (let [rev (reverse x)]\n    (= rev (reverse rev))))","problem":27,"user":"519b231ee4b0ac1b7dced6a2"},{"code":"(fn [coll] \n  (let [half-len+ (-> (count coll) int inc)]\n   (->> (take half-len+ coll)\n        (map = (reverse coll))\n        (every? true?))))","problem":27,"user":"52381b2ae4b0fae3832e99ef"},{"problem":27,"code":"(fn [x]\n  (if (string? x) (= x (apply str (reverse x)))\n    (= x (reverse x))))","user":"594ad6aae4b07ddc2dafae0e"},{"code":"(fn [ls]\n  (if (string? ls)\n    (= ls (apply str (reverse ls)))\n    (= ls (reverse ls))))","problem":27,"user":"529e2383e4b04e0c58e87b8b"},{"problem":27,"code":"#(loop [[fst1 & rst1] %,\n         [fst2 & rst2] (reverse %)]\n    (and (= fst1 fst2)\n         (if rst1 (recur rst1 rst2) true)))","user":"56a0a85fe4b0542e1f8d14a5"},{"code":"(fn palindrome? [s]\r\n  (or (<= (count s) 1)\r\n    (and (= (first s) (last s))\r\n      (recur (rest (butlast s))))))","problem":27,"user":"4e50c894535dc968683fc4ee"},{"code":"#(if (coll? %)\n   (= % (reverse %))\n   true)","problem":27,"user":"51352899e4b082aeb3a3f03b"},{"problem":27,"code":"(fn pal [xs]\n  (let [rxs (reverse xs)\n        n (/ (count xs) 2)]\n    (= (take n xs) (take n rxs))))","user":"56fe665be4b08d47c97781af"},{"problem":27,"code":";; good answer:  #(= (seq %) (reverse %))\n;; my answer: \n(fn [sqnc] (loop [s sqnc]\n      (if (<= (count s) 1) true\n         (do\n            (if (not= (first s) (last s)) false\n               (recur (drop-last 1 (drop 1 s))))))\n              ))","user":"572ac718e4b0f4d77e651242"},{"code":"(fn palindrome? [xs] \n  (cond\n    (nil? xs) true\n    (empty? xs) true\n    (= (first xs) (last xs)) (palindrome? ((comp butlast rest) xs))\n    :else false))","problem":27,"user":"5186134ce4b0da5a5be3bac7"},{"problem":27,"code":"#(if (= (reverse (reverse %)) (reverse %)) true false)","user":"54b2e881e4b09f271ff37d32"},{"problem":27,"code":"(fn palindrome? [l]\n  (let [r (reverse l)] (= r (reverse r))))","user":"560439fce4b0c80df0ca2659"},{"problem":27,"code":"(fn [coll]\n    (let [rev (reverse coll)\n          same-lst (map #(vector %1 %2) coll rev)\n          result (filter #(= (first %) (second %)) same-lst)]\n      (= (count coll) (count result))))","user":"589e22fae4b02bd94d917e56"},{"problem":27,"code":"(fn pali [lst]\n  (let [n (int (/ (count lst) 2))]\n    (= (take n lst) (reverse (take-last n lst)))))","user":"53ddd44be4b0d874e779ae2e"},{"problem":27,"code":"(fn palindrome? [sq]\n  (loop [i (int (/ (count sq) 2))\n         s sq\n         r (reverse sq)]\n    (cond (= 0 i) true\n          (= (first s) (first r)) (recur (dec i) (rest s) (rest r))\n          true false)))","user":"5711ca24e4b09c608db7044b"},{"problem":27,"code":"(fn [coll]\n  (= (seq coll) (reverse (seq coll)))\n  )","user":"591f2e4ae4b09b4ee5954c44"},{"problem":27,"code":"(fn [coll]\n  (let [n (quot (count coll) 2)\n        [col1 col2] (split-at n coll)\n        revcol2 (reverse col2)]\n    (->> (map vector col1 revcol2)\n         (every? (fn [[c1 c2]] (= c1 c2))))))","user":"525523e3e4b0541d1855b9cc"},{"problem":27,"code":"#(let [this-count (count %) limit (/ this-count 2)] \n   (loop [index 0] \n     (if (< index limit)\n     \t(if (=(nth % index)(nth % (- this-count index 1))) (recur (inc index)) false)\n         true)))","user":"54cad1c2e4b057c6fda3a26b"},{"code":"(fn palim \n  [x] \n  (if (or (empty? x) (empty? (rest x))) true \n    (and (= (last x)(first x)) (palim (rest (take (- (count x) 1) x))))))","problem":27,"user":"52d96f7ce4b09f7907dd13a8"},{"problem":27,"code":"(fn [coll]\n (= (reverse coll) (reverse (reverse coll))))","user":"5dc9c4f2e4b02f9375f4e1f0"},{"problem":27,"code":"(fn palindrome [x]\n  (if (string? x)\n    (if (= x (apply str (reverse x))) true false)\n    (if (= x (reverse x)) true false)))","user":"593c1e3be4b069cdc2982b86"},{"problem":27,"code":"#(let [v (vec %)\n       r (reverse v)]\n   (= v r)\n   )","user":"564c7501e4b0284900eef671"},{"code":"(fn p?[x]\r\n (= (reverse x) (seq x))\r\n)","problem":27,"user":"4e94b4f7535dbda64a6f6b27"},{"code":"(fn [xs]\n  (cond\n   \t(< (count xs) 2) true\n    (not= (first xs) (last xs)) false\n    :else (recur (drop 1 (drop-last xs)))))","problem":27,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"#(let [mid (rest (butlast %))]\n  (and (= (first %) (last %))\n      (or (<= (count mid) 1)\n          (recur mid))))","problem":27,"user":"510db6cde4b078ea71921145"},{"problem":27,"code":"(fn [coll]\n  (= (reverse coll) (reverse (reverse coll)))\n)","user":"53f17931e4b0742d9025b0dd"},{"problem":27,"code":"#(let [length (count %)\n       halfway (quot length 2)]\n   (loop [i 0]\n     (if (and\n          (< i halfway)\n          (= (nth % i) (nth % (- length i 1))))\n       (recur (inc i))\n       (= i halfway))))","user":"56c5db15e4b05cc29241eeac"},{"code":"(fn [a] (= (vec (reverse a)) (vec a)))","problem":27,"user":"508c3d42e4b0f17d83ea26b2"},{"code":"(fn x [l]\n  (if (= (count l) 1) true        \n    (let [f (first l)\n          e (last l)\n          s (take (- (count l) 2) (rest l))]\n      (and (= f e)\n          (if (empty? s) true (x s))))))","problem":27,"user":"5027b41ee4b01614d1633fee"},{"code":"(fn [s]\n  (let [radius (int (/ (count s) 2))\n        front  (take radius s)\n        back   (take radius (reverse s))]\n    (= front back)))","problem":27,"user":"4f0bc223535d0136e6c22307"},{"code":"#(= (last %) (first %))","problem":27,"user":"4ef01dc9535dced4c769f209"},{"problem":27,"code":"(fn isPalindrom2 [v] = (and \n                          (= (first v) (last v)) \n                          (if \n                           (= (drop 1 v) []) \n                            true \n                            (isPalindrom2 (drop-last (drop 1 v)))\n                          )\n                         )\n)","user":"60c86bbde4b0e0fa5f1b42fb"},{"problem":27,"code":"(fn\n  [seq]\n  (let [reversed (reverse seq)]\n    (every? identity (map = seq reversed))))","user":"5844e6f4e4b089d5ab817e5a"},{"problem":27,"code":"(fn rev [cucc]\n   ( if ( string? cucc )\n   ( = ( apply str ( reverse cucc ) ) cucc )\n   ( = ( reverse cucc ) cucc )\n   ) )","user":"5d5c6675e4b09db18d4482ec"},{"problem":27,"code":"(fn\n  [collection]\n  (= (reverse collection) (seq collection)))","user":"562f9f5ae4b0ab312c17ebce"},{"problem":27,"code":"(fn [[x & xs :as all]]\n  (if (empty? all)\n    true\n    (or (empty? xs) (and (= x (last xs)) (recur (butlast xs))))))","user":"59abd1d8e4b08cbb53654da4"},{"problem":27,"code":"#(= (into [] %)  (reverse %))","user":"55ed962ae4b0121d4835fddd"},{"code":"(fn palindrome? [s] (= (vec s) (vec (reverse s))))","problem":27,"user":"4f9c4080e4b0dcca54ed6d1a"},{"code":"(fn [pal]\r\n  (if (= (seq pal) (reverse (seq pal))) true false))","problem":27,"user":"4dde4e95535d08e6dec9fdd7"},{"problem":27,"code":"#(loop [palindrome true\n        sq %]\n   (if (empty? sq)\n     palindrome\n     (recur\n      (if (= (first sq) (last sq)) palindrome false)\n      (rest (butlast sq)))))","user":"5e950178e4b0fbed045a3801"},{"problem":27,"code":"(fn\n    [coll]\n    (let [reversed (reduce conj '() coll)]\n      (= reversed (seq coll))))","user":"55808f8ee4b05c286339e0ee"},{"problem":27,"code":"#(let [string (string? %)\n       reversed (reverse %)\n       reversed (if string (clojure.string/join reversed) reversed)]\n   (= reversed %))","user":"5938be98e4b02506e01a29ec"},{"code":"(fn is-palandrome? [x]\n\t(if (seq x)\n\t\t(and (= (first x) (last x)) (recur (rest (butlast x))))\n\t\ttrue))","problem":27,"user":"531dfaf5e4b08068f379edb3"},{"problem":27,"code":"(fn[x] (if (string? x) \n          (= (apply str (reverse x)) x)\n          (= (reverse x) x)))","user":"556bbaaee4b09a3098a524f0"},{"code":"#(= (seq %1) (reverse %1))","problem":27,"user":"4e049a06535d04ed9115e7a0"},{"code":"(fn [x]\n    ((fn comp_seq[a b]\n      ( if (empty? a) \n         true\n         ( if (= (first a) (first b))\n            (comp_seq (rest a) (rest b) )\n            false\n         )\n      )\n     \n    )\n    x (reverse x))\n)","problem":27,"user":"4e333091535deb9a81d77f25"},{"code":"(fn [x] (= (list* x) (reverse (list* x))))","problem":27,"user":"4f062de8535dcb61093f6c09"},{"code":"#(every? true? (map = (reverse (into () %)) (into () %)))","problem":27,"user":"510528a0e4b0730a5f55ad85"},{"problem":27,"code":"(fn [seq]\n               (true? (= (apply str (reverse seq)) (apply str seq))))","user":"5e317676e4b05b4b01516229"},{"code":"#(= (seq %1) (seq (reverse %1)))","problem":27,"user":"4f68c485e4b07046d9f4ef7c"},{"code":"(fn pali [s]\n  (or\n    (empty? s)\n    (and\n      (= (first s) (last s))\n      (pali (butlast (rest s))))))","problem":27,"user":"4f0397ee535dcb61093f6b30"},{"problem":27,"code":"(fn [in]\n(loop [f (first in) l (last in)\n       li (rest (butlast (seq in)))]\n  (cond \n   (not= f l ) false\n   (empty? li) true\n   :else (recur (first li) (last li) (rest (butlast li)))\n   )))","user":"5bff74a2e4b0bdcf453d162b"},{"problem":27,"code":"(fn palindrom? [col] (= col (if (string? col) (apply str (reverse col)) (reverse col) ) ) )","user":"6031926ae4b0d5df2af222ac"},{"problem":27,"code":"#(let [l (int (/ (count %) 2))] (= (take l %) (take l (reverse %))))","user":"5520af03e4b08d5046aa8a64"},{"code":"(fn [xs]\n  (loop [xss xs]\n    (if (< (count xss) 2)\n      true\n    (if (not= (first xss) (last xss))\n      false\n    (recur (butlast (rest xss)))))))","problem":27,"user":"4e4ca885535dc968683fc4df"},{"problem":27,"code":"(fn is-palindrome \n  [list-of-els]\n  (cond \n   (= 0 (count list-of-els)) true\n  (= (first list-of-els) (last list-of-els)) (is-palindrome (rest (drop-last list-of-els)))\n  :else false)\n  )","user":"56942939e4b0dcc4269f4114"},{"problem":27,"code":"(fn [x]\n  (let [y (seq x)]\n  \t(if (char? (first x))\n    \t(= x (reduce str (reverse y)))\n      \t(= x (reverse y)))))","user":"59c147afe4b0a024fb6ae481"},{"problem":27,"code":"(fn [coll]\n  (let [s (seq coll)\n        r (reverse s)]\n    (= s r)))","user":"550e0951e4b06e50f9beb163"},{"problem":27,"code":"(fn [x]\n  (if (= java.lang.String (type x))\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))","user":"58836dbee4b0f1effa3b7679"},{"problem":27,"code":"(fn [x]\n  (let [xs (seq x)]\n    (every? (partial apply =) (map list xs (reverse xs)))))","user":"5f247827e4b0f565ad998292"},{"code":"(fn [xs] \n  (empty?\n    (filter #(false? %)\n      (map #(= %1 %2) (seq xs) (reverse xs)))))","problem":27,"user":"504f5804e4b0a02f9cffde72"},{"code":"#(= (seq %) (seq (reduce conj () %)))","problem":27,"user":"53a26cede4b0f1fc7453882a"},{"problem":27,"code":"(fn [strr]\n  (if (string? strr)\n    (= strr (apply str (reverse strr)))\n    (= strr (reverse strr))))","user":"5954edcbe4b066ee0a44af15"},{"problem":27,"code":"(fn [x]\n\t(loop [col x]\n      (if (< (count col) 2)\n        true\n        (and (= (first col) (last col)) (recur (rest (drop-last 1 col)) ))\n      )\n    )\n      \n)","user":"564054a9e4b08d4f616f5edf"},{"problem":27,"code":"#(= % ((if (string? %)\n                                (partial apply str)\n                                identity) (reverse %)))","user":"57abff53e4b0b8559636fc81"},{"problem":27,"code":"(fn [col]\n    (loop [c col]\n      (let [left (first c)\n            right (first (reverse c))\n            nl? (nil? left)\n            nr? (nil? right)\n            allButLast (take (- (count c) 1) c)]                                                                                                      \n        (cond \n          (or nl? nr?) true \n          (not= left right) false\n          :else (recur (drop 1 allButLast))))))","user":"59932f49e4b0b211ea3aaaae"},{"problem":27,"code":"(fn [sq]\n  (let [sqr sq]\n    (if (string? sqr)\n      (= (apply str (into () sqr)) sq)\n      (= (reverse sqr) sq))))","user":"55810c73e4b05c286339e0f2"},{"problem":27,"code":"(fn palindrome?\n  [args]\n  (if (or (empty? args) (= 1 (count args)))\n    true\n    (do\n      (if (= (first args) (last args))\n        (recur (drop-last (drop 1 args)))\n        false))))","user":"5b477969e4b02d533a91bc6f"},{"code":"(fn[x] (= (vec x) (reverse x)))","problem":27,"user":"4e931ebb535dbda64a6f6b08"},{"code":"#(\n\tlet [l (quot(count %) 2)]\n\t\t(= (take l %) (reverse(take-last l %)))\n\t\n)","problem":27,"user":"538de891e4b0b51d73faae78"},{"code":"(fn [s]\n  (let [size (count s)\n        even (= 0 (mod size 2))\n        half-len (/ (if even size (- size 1)) 2)\n        lhs (take half-len s)\n        rhs (take half-len (reverse s))]\n      (= lhs rhs)))","problem":27,"user":"4f7251eee4b07046d9f4f02e"},{"problem":27,"code":"(fn cp [w] \n(if (< (count w) 2)\n true \n (if \n (= (first w) (last w))\n  (cp (butlast (rest w)))\n  false\n  )\n))","user":"56b80ad1e4b0f26550335921"},{"problem":27,"code":"(fn v [x] (\n  if (empty? x) \n    true\n    (if (= (last x) (first x))\n      (v (rest (butlast x)))\n      false)))","user":"5e6e98dfe4b04a83ad7cd29c"},{"code":"(fn [n]\n  (loop [n n]\n    (if (= (first n) (last n))\n      (if (< (count n) 3)\n        true\n        (recur (->> n reverse pop reverse pop))\n      )\n      false\n    )\n  ) \n)","problem":27,"user":"4fc5273ce4b081705acca37f"},{"code":"(fn palin? \n  [s] \n  (if (= (count s) 0)\n  true \n  (and (= (first s) (last s)) \n       (palin? (rest (butlast s))))))","problem":27,"user":"50b21551e4b03ea880433559"},{"problem":27,"code":"(fn[n]\n  (= (seq n) (reverse n)))","user":"5a99b844e4b0d174b936c7ab"},{"problem":27,"code":"(fn [l] (let [s (map hash l)] (= s (reverse s))))","user":"548c8115e4b0e286459a120c"},{"problem":27,"code":"(fn [c] (= (reverse c) (seq c)))","user":"584278e1e4b089d5ab817e19"},{"problem":27,"code":"(fn foo \n  ([plist]\n   \t(if (seq? plist)\n   \t  (= plist (foo plist (list)))\n      true)\n   )\n  ([plist reversed] \n   (if (not-empty plist)\n     (foo (rest plist) (conj reversed (first plist)))\n     reversed\n   )\n  )\n)","user":"566df171e4b0a866af6896d2"},{"problem":27,"code":"#(=         (take (/ (count %) 2) %)  (reverse (take-last (/ (count %) 2) %)) )","user":"577c3da9e4b0c8d87281f6b9"},{"problem":27,"code":"(fn [coll]\n    (let [size (count coll)\n          palin-lst (for [i (range (dec size))] (= (nth coll i) (nth coll (- size 1 i))))]\n      (every? #(= true %) palin-lst)))","user":"5d301c95e4b01671435dbcca"},{"problem":27,"code":"(fn[x]( apply = [(seq x) (reverse x)]))","user":"5762b38ce4b0994c1922fbad"},{"code":"(fn[x](= x (if (string? x) (apply str (reverse x)) (reverse x))))","problem":27,"user":"506ee0f4e4b09350ab4199f2"},{"problem":27,"code":"(fn [lst]\n  (let [len (quot (count lst) 2)\n        fst-half (take len lst)\n        snd-half (drop len lst)]\n    (if (= (count fst-half) (count snd-half))\n      (= fst-half (reverse snd-half))\n      (= fst-half (reverse (rest snd-half))))))","user":"589cb617e4b00487982d536a"},{"problem":27,"code":"(fn\n  [c]\n  (let [middle-index (/ (count c) 2)\n        [start-half end-half] (split-at middle-index c)\n        slicer (fn\n                [start end middle]\n                (if (> (count start) (count end))\n                    (take (- middle 1) start)\n                    start))\n        real-start-half (slicer start-half end-half middle-index)]\n      (= real-start-half (reverse end-half))))","user":"55a5e2f7e4b0acc240e31550"},{"problem":27,"code":"(fn [seq] (= (reduce str seq) (reduce str (reverse seq))))","user":"54570c87e4b080a794c2c887"},{"problem":27,"code":"#(if (= (type %) java.lang.String)\n    (= (apply str (reverse %)) %)\n    (= (reverse %) %)\n )","user":"54258e71e4b01498b1a71b0e"},{"problem":27,"code":"(fn pal [xs] (if (<= (count xs) 1)true(if (= (first xs) (last xs))(pal (rest (butlast xs)))false)))","user":"526e84b5e4b03e8d9a4a732d"},{"code":"(fn palindrome [x]\n  (cond \n  (= 0 (count x)) true\n  (= (first x) (last x)) (recur (rest (butlast x)))\n  :else false\n  )\n )","problem":27,"user":"523b82efe4b07becd5be21f0"},{"problem":27,"code":"#(= (reverse (seq %))(seq %))","user":"564302b5e4b08d4f616f5f21"},{"problem":27,"code":"(fn [s] \n  (let [half-length (int (/ (count s) 2))]\n    (= (take half-length s)\n       (reverse (take-last half-length s)))))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":27,"code":"(fn palindrome [x]\n   (if (= (count x) 0)\n      true\n      (if (= (first x) (last x))\n         (palindrome (drop-last 1 (drop 1 x)))\n         false)))","user":"5e595637e4b027a2e10ac10e"},{"problem":27,"code":"(fn pal [items] (\n  if (= (first items) (last items)) (if (<= (count items) 1) true (pal (butlast (rest items)))) false           \n))","user":"54c0ce91e4b0ed20f4ff6f18"},{"problem":27,"code":"(fn palindrome [sq]\n  (if (< (count sq) 2)\n    true\n    (if (= (first sq) (last sq))\n    (palindrome (butlast (rest sq)))\n    false)))","user":"57ee88bbe4b0bfb2137f5bbe"},{"problem":27,"code":"#(loop [left %]\n   (or (< (count left) 2)\n       (and (= (first left) (last left)) (recur (drop 1 (drop-last left))))))","user":"5cafaa0fe4b026601754b89e"},{"problem":27,"code":"(fn [s]\n   (= s (if (= String (type s)) \n          (let [lst (list)]\n            (reduce #(str %2 %1)\n                    (mapcat #(conj lst %1) s)))\n          (reverse s))))","user":"5422c959e4b01498b1a71ac7"},{"problem":27,"code":"#(= (-> % (reverse)) (-> % (reverse) (reverse)))","user":"5dd4ed3ae4b0948ae9d9ad72"},{"code":"(fn [xs] \n  (if (string? xs)\n    (= xs (apply str (reverse xs)))\n    (= xs (reverse xs))))","problem":27,"user":"52f10094e4b05e3f0be25ee8"},{"problem":27,"code":"(fn palindrome? [s]\n  (cond\n    (empty? s) true\n    (= 1 (count s)) true\n    :else (and (= (first s) (last s)) \n               (palindrome? (drop-last 1 (drop 1 s))))))","user":"5f63684be4b02876ed9fd012"},{"code":"(fn palin [x] (if (< (count x) 2) true (if (= (first x) (last x)) (palin (rest (butlast x))) false)) )","problem":27,"user":"528f1057e4b0239c8a67aeec"},{"code":"(fn [coll]\n  (if (= (apply str coll) (apply str (reverse coll)))\n    true\n    false))","problem":27,"user":"502925b9e4b0b6c928ad6201"},{"problem":27,"code":"#(= (some false? (map = % (reverse %))) nil)","user":"57b35ecbe4b0fbc9809a277e"},{"problem":27,"code":"(fn me [x]\n   (if (empty? x) true\n       (if (not= (last x) (first x))\n         false\n         (me (->> x rest reverse rest reverse))\n         )))","user":"54eff2bee4b024c67c0cf88d"},{"problem":27,"code":"(fn [t]\n (=  (reverse t) (seq t)))","user":"574abbfbe4b02ea114799200"},{"code":"(fn palin[x] (= (reverse (vec x)) (vec x)))","problem":27,"user":"50a0d1e4e4b08df8156e9e51"},{"problem":27,"code":"(fn palindrome? [a]\n  (if (seq? a)\n    (= a (reverse a))\n    (palindrome? (reverse a))))","user":"541b41d1e4b01498b1a71a65"},{"code":"(fn [coll]\n  (= (reverse coll) (seq coll)))","problem":27,"user":"4e6ab9cb535d8ccf87e9fefe"},{"problem":27,"code":"(fn [s]\n  \"palindrome detector\"\n  (= s\n  (loop [sq s\n         result ()]\n    (if (seq sq)\n      (recur (rest sq) (conj result (first sq)))\n      (if (string? s)\n        (apply str result)\n        result)))))","user":"56fc9a2de4b08d47c977819b"},{"code":"#(= (clojure.core/reverse (seq %)) (seq %))","problem":27,"user":"50045388e4b0678c553fc44e"},{"problem":27,"code":"(fn [x] \n  (= (seq x) (reduce conj () (seq x))))","user":"591f5124e4b09b4ee5954c45"},{"problem":27,"code":"(fn p [coll]\n  (cond\n   (nil? coll) true\n   (= (first coll) (last coll)) (p (butlast (rest coll)))\n   :else false))","user":"58c5a08be4b021aa9917ed40"},{"problem":27,"code":"#(= (seq %) ((comp reverse seq) %))","user":"549188f6e4b0b312c081ff3a"},{"code":"(fn [s]\n  (let [l (count s)]\n    (loop [i 0 p true]\n      (if (>= i l)\n        p\n        (recur (inc i)\n          (and p (= (nth s i) (nth s (- l i 1)))))\n))))","problem":27,"user":"4e7e6b51535db169f9c79712"},{"code":"(fn [coll]\n    (if (empty? coll)\n    true\n    (if (not= (first coll) (last coll))\n      false\n      (recur (drop-last (rest coll)))\n      ))\n  )","problem":27,"user":"53862316e4b06839e8705f0e"},{"problem":27,"code":"(fn \n  [coll]\n  (= (if (string? coll)\n       (clojure.string/reverse coll)\n       (reverse coll)) coll))","user":"57e79d8ee4b0bfb2137f5afe"},{"problem":27,"code":"#(let [r (reverse %) f (reverse r)] (= f r))","user":"58a16387e4b02bd94d917eb1"},{"problem":27,"code":"(fn [my-seq]\n  (let [result (reduce conj ()  my-seq)]\n    (if (string? my-seq)\n      (= (apply str result) my-seq)\n      (= result my-seq))))","user":"5c321b8ae4b0d62ef62d9f32"},{"problem":27,"code":"#((fn pal? [l] (or (< (count l) 2) (and (= (first l) (last l)) (pal? (subvec l 1 ((comp dec count) l)))))) (vec %))","user":"52e16face4b09f7907dd1421"},{"problem":27,"code":"(fn [col] (= (seq col) (reverse (seq col))))","user":"4f0f3725535d0136e6c22337"},{"problem":27,"code":"#(let [coll (seq %)] (= coll (reverse coll)))","user":"504dfc75e4b078edc5f59387"},{"problem":27,"code":"(fn [thing] \n  #_=> (cond\n  #_=>  (string? thing) (= thing (clojure.string/reverse thing))\n  #_=>  :else (= thing (reverse thing))))","user":"55c2a323e4b0e31453f6497f"},{"problem":27,"code":"#(if (= (reverse %) (reverse (reverse %))) true false)","user":"531c7bdde4b08068f379eda2"},{"code":"#(let [other (reverse %)]\n   (= (seq %) other))","problem":27,"user":"51929214e4b08962174cf74c"},{"problem":27,"code":"(fn [v]\n  (= (reverse v)\n     (reverse (reverse v))))","user":"5d5824fae4b02ba5928a681f"},{"problem":27,"code":"(fn [s] (= (into () s) (seq s)))","user":"55d3b030e4b0e31453f64a6b"},{"code":"(fn [a] \n  (loop [x a y (reverse a)]\n    (if x\n      (if (= (first x) (first y))\n        (recur (next x) (next y))\n        false)\n      true)))","problem":27,"user":"4e74e119535d7a570dd295bc"},{"code":"(fn pal [liste] \n  (= (reverse liste) (reverse (reverse liste)))\n)","problem":27,"user":"4f84400de4b033992c121c2e"},{"problem":27,"code":"(fn [coll]\n  (let [coll (vec coll)]\n    (= coll (reverse coll))))","user":"59225498e4b09b4ee5954c8c"},{"code":"(fn palindrome [S]\n  (= (seq S) (reverse S)))","problem":27,"user":"51f67858e4b06ff1c25c52c5"},{"problem":27,"code":"(fn [x]\n   (loop [x x]\n       (if (> 2 (count x))\n    true\n\n     (if (= (first x) (last x))\n       (recur (rest (drop-last x)))\n       false))))","user":"5c308385e4b0d62ef62d9f1c"},{"code":"(fn [coll] (let [rc (reverse coll) n (count coll)]\n             (every? identity\n                     (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))","problem":27,"user":"52d885afe4b09f7907dd1398"},{"code":"#(let [n (quot (count %) 2)]\n  (= (take n %)\n     (reverse (take-last n %))))","problem":27,"user":"5260341ee4b03e8d9a4a7034"},{"code":"#(if (string? %) \n   (= (reverse %) (reverse (reverse %))) \n   (= % (reverse %))\n   )","problem":27,"user":"5256c8c7e4b0541d1855ba37"},{"code":"(fn palindrome? [s]\n(if (empty? s) true\n    (let\n    [\n        sfirst (first s)\n        slast (last s)\n        sbody (rest (butlast s))\n    ]\n\n    (if (= sfirst slast)\n        (palindrome? sbody)\n        false\n    \n    )\n    )\n)\n    )","problem":27,"user":"4f0df199535d0136e6c2231e"},{"problem":27,"code":"(fn \n  [string]\n  (loop [s string]\n    (if (or (= s []) (= (count s) 1))\n      true\n      (if (= (first s) (last s))\n        (recur (drop-last (rest s)))\n        false))))","user":"576a972ce4b0a07e8fc1811a"},{"problem":27,"code":"(fn palindrome\n  [lst]\n  (if (string? lst)\n    (if (= (apply str (reverse lst)) lst)\n      true\n      false)\n    (if (= (reverse lst) lst)\n      true\n      false)\n    ))","user":"5bbbcf9ee4b0a20761a23614"},{"problem":27,"code":"(fn\n    [s]\n    (= (seq s) (reverse s)))","user":"5e7b2d86e4b085ba37836e11"},{"problem":27,"code":"(fn [s]\n  (let [half-length (-> s count (/ 2) int)\n        first-part (take half-length s)\n        last-part (take-last half-length s)]\n    (= first-part (reverse last-part))))","user":"5895fd90e4b00487982d528f"},{"problem":27,"code":"(fn [ls]\n  (= (vec ls) (reverse ls))\n  )","user":"60228147e4b0d5df2af22202"},{"code":"(fn pal [x]\n  (if (= (first x) (last x))\n    (if (< (count x) 4)\n      true\n      (pal (rest (drop-last 1 x))))\n    false\n))","problem":27,"user":"4f419f6fe4b0d7d3c9f3fceb"},{"code":"(fn pal [l]\n  (cond (empty? l)                true\n        (= (count l) 1)           true\n        (not= (first l) (last l)) false\n        :else                     (pal (butlast (rest l)))))","problem":27,"user":"4f033aa3535dcb61093f6a7c"},{"problem":27,"code":"(fn [c]\n  (every? true? (for [i (range (count c))\n                   :let [j (- (count c) 1 i)]\n                   :when (> j i)]\n               (= (nth c i) (nth c j)))))","user":"551e6526e4b030e6a24d00e8"},{"problem":27,"code":"(fn palindrome [lst]\n  (if (or (empty? lst) (= 1 (count lst)))\n    true\n    (if (= (first lst) (last lst))\n    (-> lst rest drop-last palindrome)\n    false)))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":27,"code":"(fn Palindrom [A] (if (= (seq A) (reverse A)) true false))","user":"55769940e4b05c286339e070"},{"problem":27,"code":"(fn [x] (if (string? x) (if (= (seq (char-array x)) (reverse (seq (char-array x)))) true false) (if (= x (reverse x)) true false)))","user":"544e1794e4b0e39780006980"},{"code":"(fn palindrome? [x]\n  (loop [b 0 e (- (count x) 1)]\n    (if (or (= b e) (= (- e b) 1))\n      true\n      (if (= (nth x b) (nth x e))\n        (recur (+ b 1) (- e 1))\n        false\n      )\n    )\n  )\n)","problem":27,"user":"527c2ac9e4b03e8d9a4a75b7"},{"problem":27,"code":"(fn\n [x]\n (loop [pal x]\n    (if (< (count pal) 2)\n      true\n      (if (= (first pal) (last pal))\n        (recur (drop 1 (drop-last 1 pal)))\n        false))))","user":"5894aee1e4b00487982d5260"},{"problem":27,"code":"#(= (apply str (reduce conj '() %) ) (apply str %))","user":"5908b36be4b047aa04b19982"},{"code":"(fn [x] (if (= (reverse (reverse x)) (reverse x)) true false))","problem":27,"user":"50206641e4b0cb6ebc0a42f5"},{"problem":27,"code":"(fn [s]\n  (loop [r true t s]\n    (if (empty? t) r\n        (recur (and r (= (first t) (last t))) (drop 1 (drop-last t))))))","user":"57b6edf6e4b0fbc9809a27c8"},{"problem":27,"code":"(fn [x]\n   (loop [coll x\n          result true]\n     (if (or (= 1 (count coll)) (empty? coll) (not result))\n       result\n       (recur (drop-last (rest coll))\n              (= (first coll) (last coll))))))","user":"5a4d656fe4b05d388ecb6ba9"},{"code":"#(let [ cmpnum (quot (count %) 2)\n        [l r] (split-at cmpnum %)] \n          (= (reverse l) (take-last cmpnum r)))","problem":27,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":27,"code":"(fn [x] \n  (if (string? x) \n    (= x (apply str (reverse x) )) \n    (= x (reverse x)) ))","user":"55aa1637e4b0988bba2ad949"},{"problem":27,"code":"(fn [coll]\n   (= (reverse (reverse coll)) (reverse coll)))","user":"5fce0cc5e4b07e53c2f3f000"},{"code":"(fn [p] (if (string? p) (= p (apply str (reverse p)))  (= p (reverse p))))","problem":27,"user":"4ff92cd2e4b0678c553fc3a5"},{"problem":27,"code":"(fn [xs] (= xs (if (string? xs) (clojure.string/join (reverse xs)) (reverse xs))))","user":"54f9d900e4b01ecee9d88844"},{"code":"#(loop [xs %]\n  (if (>= 1 (count xs))\n      true\n      (if (= (first xs) (last xs))\n          (recur (-> xs\n              rest\n              reverse\n              rest))\n           false)))","problem":27,"user":"4f3cc2fbe4b0e243712b1f55"},{"code":"(fn f7 [x]\n  (= (seq x) (reverse x)))","problem":27,"user":"535aee3be4b04ce2eb3ed2aa"},{"problem":27,"code":"(fn [l]\n  (let [len (quot (count l) 2)\n        front (take len l)\n        back (reverse (take-last len l))]\n    (= front back)))","user":"5fe5a64de4b05ac5b16ea187"},{"code":"(fn [l]\r\n  (let [metade (split-at (/ (count l) 2) l )]\r\n  (= \t(first metade)\r\n        (reverse (if (even? (count l))\r\n\t\t\t \t\t(second metade)\r\n            \t\t(cons (last (first metade))\r\n                  \t\t  (second metade)))))))","problem":27,"user":"50576483e4b001218172198b"},{"problem":27,"code":"(fn [s]\n  (loop [v (vec s)\n         x 0\n         y (- (count v) 1)]\n    (if (< y 0)\n      true\n      (if-not (= (get v x) (get v y))\n        false\n        (recur v (inc x) (dec y))))))","user":"59f75327e4b0966464fe6aec"},{"code":"(fn [x]\n  (letfn [(ifs [c] (= (first c) (last c)))\n          (center [c] (rest (drop-last c)))]\n    (loop [x x r true]\n      (if (empty? x)\n        r\n        (recur (center x) (and r (ifs x)))))))","problem":27,"user":"52d809bde4b09f7907dd1384"},{"problem":27,"code":"(fn [coll] (= (vec coll) (reverse coll)))","user":"6098263be4b00e9e6653c3f9"},{"problem":27,"code":"(fn [xs] (let [rs (reverse xs) pairs (map vector xs rs)] (every? #(apply = %) pairs)))","user":"54d22860e4b0e8a36923e5ef"},{"code":"(fn pal ([ c ] (and (= (first c) (last c)) (or (empty? c) (pal (drop-last (rest c))) ) ) ) )","problem":27,"user":"51e1a1fae4b06a68e693eaf6"},{"problem":27,"code":"#(\n  = (seq %) (reverse (seq %))\n\n  \n  )","user":"54903056e4b0b312c081ff2e"},{"code":"(fn palindrome [x] (= (seq x) ((fn my-reverse [x] (if (>= 0 (count x))\n                          []\n                         (conj (my-reverse (rest x)) (first x))\n                          )\n) x)))","problem":27,"user":"5296aa9be4b02ebb4ef75034"},{"problem":27,"code":"#(= (apply str %) (apply str (reverse  %)))","user":"58c69d88e4b021aa9917ed5e"},{"problem":27,"code":"(fn [xs]\n    (= (vec xs) (reverse (vec xs)))\n    )","user":"58b81490e4b0ebc645576d8c"},{"problem":27,"code":"(fn pal? [x]\n  (if (< (count x) 2)\n    true\n    (and\n      (= (first x) (last x))\n      (pal? (rest (reverse (rest x)))))))","user":"5a1f8c7ce4b0ff51aa4b3286"},{"code":"(fn [c]\n  (if (string? c)\n    (if (= c (apply str (reverse c)))\n      true\n      false)\n    (if (= c (reverse c))\n      true\n      false)))","problem":27,"user":"4f4c4fdde4b03ad3f0c10c8b"},{"code":"(fn [coll]\n  (let [ver (seq coll)\n        rev (reverse ver)]\n    (= ver rev)))","problem":27,"user":"532b930be4b09d4e7a9b5534"},{"code":"#(let [cnt (count %)\n       [s1 s2] (split-at (quot cnt 2) %)\n       s2 (if (odd? cnt) (rest s2) s2)]\n   (if (= (reverse s1) s2)\n     true\n    false))","problem":27,"user":"51e89428e4b006d205356a51"},{"problem":27,"code":"(fn pal [l]\n  (if (<= (count l) 1)\n  \ttrue\n  \t(and (= (first l) (last l)) (pal (take (- (count l) 2) (rest l))))))","user":"5caa5e42e4b048ec896c5c35"},{"problem":27,"code":"(fn [s]\n  (loop [s (vec s)]\n    (if (< (count s) 2)\n      true\n      (if (= (first s) (last s))\n        (recur (subvec s 1 (dec (count s))))\n        false))))","user":"5b673832e4b0c6492753e760"},{"problem":27,"code":"(fn palindrome? [xs]\n  (if (<= (count xs) 1)\n    true\n    (and (= (first xs) (last xs))\n     (palindrome? (rest (drop-last xs))))))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":27,"code":"(fn isPalindrome [x] \n  (= (seq x) (reverse x))\n)","user":"57758671e4b0979f8965161f"},{"problem":27,"code":"(fn [s]\n  (= (map identity s)\n     (reverse s)))","user":"55b54ecbe4b01b9910ae2987"},{"problem":27,"code":"(fn palin? [x]\n  (loop [a x]\n    (if (> (count a) 1)\n      (if (= (first a) (last a))\n        (recur (rest (butlast a)))\n        false)\n      true)))","user":"56a3c89ae4b0542e1f8d14cf"},{"problem":27,"code":"#(= (seq %)\n    (-> %\n        seq\n        reverse))","user":"53f31dafe4b0742d9025b0f0"},{"problem":27,"code":"(fn [l] (= (reverse l) (seq l) ))","user":"606f005ae4b069485764de1b"},{"code":"(fn palin [lst] \n   (if \n     (string? lst)\n     (cond \n      (= lst (clojure.string/join (reverse lst))) true\n      :else false)\n     (cond \n      (= lst (reverse lst)) true\n      :else false)))","problem":27,"user":"52fe3a9de4b047fd55837039"},{"code":"(fn palin? [l] \n  (and\n   (= (first l) (last l))\n   (or\n    (> (count l) 2)\n    (palin? (drop (drop-last l 1) 1)))))","problem":27,"user":"51684318e4b03f62cda68cd6"},{"problem":27,"code":"(fn pal\n  [xs]\n  (if (seq xs)\n    (if (= (first xs) (last xs))\n      (pal (butlast (rest xs))) ;; recur with sequence exlcluding first and last els (already checked)\n      false) ;; return false if elements don't match\n   true)) ;; all iters have passed","user":"535d8d8fe4b04ce2eb3ed2c4"},{"code":"(fn [cs] (let [s (apply list cs)]\n         (= s (reverse s))\n            ))","problem":27,"user":"52d4004ae4b09f7907dd1328"},{"problem":27,"code":"(fn [x] (reduce (fn [a b] (and a b)) true (map (fn [v1 v2] (= v1 v2)) x (reverse x))))","user":"53c1b787e4b00fb29b221266"},{"problem":27,"code":"(fn [x]\n  (->> x\n         (seq ,,,)\n         (reverse ,,,)\n         (= (seq x) ,,,)))","user":"5990a9fde4b0866487ed0d54"},{"problem":27,"code":"(fn palindrome? [x]\n  (let [s (seq x)]\n    (= s (reverse s))))","user":"56b165f0e4b0982f16b37dea"},{"code":"(fn [x]\n  (if (empty? x)\n    true\n    (if (= (last x) (first x))\n      (recur (rest (butlast x)))\n    false)))","problem":27,"user":"4ed6b05c535d10e5ff6f52e5"},{"problem":27,"code":"(fn [elements] (= (take (quot (count elements) 2) elements) (reverse (take-last (quot (count elements) 2) elements))))","user":"5d09dffbe4b0cc9c9158821c"},{"problem":27,"code":"(fn [xs] (let [ys (reverse xs)] \n           (loop [x (first xs) rest-xs (rest xs) y (first ys) rest-ys (rest ys) is-palindrome true] (if (or (not is-palindrome) (nil? x)) is-palindrome\n                                                                                            (recur (first rest-xs) (rest rest-xs) (first rest-ys) (rest rest-ys) (= x y))))))","user":"57b65420e4b0fbc9809a27be"},{"code":"#(let [coll (seq %)] (= (reverse coll) coll))","problem":27,"user":"4f14fbec535d64f603146440"},{"problem":27,"code":"(fn [s0]\n  (loop [s s0 r [] cnt (/ (count s0) 2)]\n    (println s r cnt)\n    (if (<= cnt 1/2)\n      (= (if (= cnt 1/2 ) (drop-last s) s) r)\n      (recur (drop-last s) (conj r (last s)) (dec cnt)))))","user":"54d15e4ae4b0e8a36923e5e2"},{"problem":27,"code":"(fn [x] (= (vec x) ((comp reverse vec) x)))","user":"577d3feee4b0c8d87281f6d2"},{"problem":27,"code":"(fn is-palin [coll] (if\n                      (or (= (count coll) 0) (= (count coll) 1)) true\n                      (if (= (first coll) (last coll)) (is-palin (next (butlast coll))) false)\n                      )\n  )","user":"5ceca436e4b0a17bb84e2bf8"},{"problem":27,"code":"#(if (string? %)\n   (= (apply str (reverse %)) %)\n (= (reverse %) %))","user":"57233cc8e4b0c5bde472c0e1"},{"problem":27,"code":"(fn [coll]\n    (let\n       [rcoll (into '() coll)]\n       (= (seq coll) rcoll)))","user":"579dd954e4b05b1deef9ae1b"},{"code":"(fn palindrome? [coll]\n  (let [split (Math/floor (/ (count coll) 2))\n        left (take split coll)\n        right (take-last split coll)]\n    (= left (reverse right))))","problem":27,"user":"4e976f79535dbda64a6f6b55"},{"problem":27,"code":"(fn [coll]\n  (=\n   (seq coll)\n   (reverse coll)))","user":"5defc177e4b093ff717275af"},{"problem":27,"code":"#(= (concat (reverse %)) \n    (concat %))","user":"5b6b3809e4b0c6492753e7a5"},{"code":"(fn [s]\n  (let [sq (seq s)]\n    (cond (or (not sq) (not (next sq))) true\n          (not (= (first sq) (last sq))) false\n          :else (recur (butlast (rest sq))))))","problem":27,"user":"5063fe48e4b075d771da6f9e"},{"problem":27,"code":"#(loop [a (seq %)\n       b (reverse %)\n       isPalindrome? false]\n      (cond\n        (not= (first a) (first b)) false\n        (empty? a) isPalindrome?\n        (= (count a) 1) isPalindrome?\n        :else (recur (rest a) (rest b) true)))","user":"55bd6734e4b01b9910ae29fd"},{"problem":27,"code":"#(let [l (seq %)]\n   (= l (reverse l)))","user":"60460824e4b02d28681c77bc"},{"problem":27,"code":"(fn [c]\n  ; dirty hack\n  (= (reverse (reverse c))\n     (reverse c)))","user":"5452a300e4b0e397800069c7"},{"problem":27,"code":"(fn bla[x] (if (<= (count x) 1) true (and (= (first x) (last x)) (bla (butlast (next x))))))","user":"574b008ce4b02ea114799203"},{"code":"#(loop [x %1 y %1 reslt true] \n   (if (empty? x) \n     reslt \n     (recur (rest x) (butlast y) \n            (and reslt (= (first x)(last y))))\n     ))","problem":27,"user":"532cb6bbe4b019098a6f8b33"},{"problem":27,"code":"(fn [x] \n  (= (reverse x) (seq x)))","user":"53aec6e6e4b047364c044479"},{"problem":27,"code":"(fn [x]\n  (loop [lst x]\n    (if (empty? lst)\n      true\n      (if (= (first lst) (last lst)) \n        (recur (rest (butlast lst)))\n        false\n        ))\n    )\n  )","user":"5f837b30e4b01aacbe7a2714"},{"problem":27,"code":"(fn [lst]\n   (= \n    (get (split-at (int (/ (count lst) 2) ) lst) 0 )\n    (get (split-at (int (/ (count lst) 2) ) (reverse lst) ) 0 )       \n   )  \n)","user":"5ac96cf8e4b0e27600da77c2"},{"problem":27,"code":"(fn [x]\n  (loop [coll (seq x)]\n    (println coll)\n    (cond\n      (empty? coll) true\n      (= (count coll) 1) true\n      (= (first coll) (last coll)) (recur (reverse (rest (reverse (rest coll)))))\n      :else false\n      )\n    )\n  )","user":"576d24ede4b0979f8965155b"},{"problem":27,"code":"(fn [coll]\n  (let [coll-seq (seq coll)]\n    (= coll-seq (reverse coll-seq))))","user":"59fa241ee4b0ca45a743a358"},{"code":"(fn palindrome? [xs]\n  (let [n (count xs)]\n    (if (= n 0)\n      true\n      (if (= (first xs) (last xs))\n        (palindrome? (drop-last (drop 1 xs)))\n        false))))","problem":27,"user":"50bf6f93e4b0ffd967a66cbf"},{"problem":27,"code":"(fn [coll] \n  (let [half (quot (count coll) 2)\n        left (take half coll)\n        right (take half (reverse coll))]\n    (= left right)))","user":"545f737ce4b01be26fd74688"},{"problem":27,"code":"(fn pallindrome?\n  [seq]\n  (= (vec seq) (vec (reverse seq))))","user":"5deeb6fde4b093ff7172759f"},{"code":"(fn [s]\n    (loop [i 0 j (dec (count s)) ]\n       (cond\n\t       (>= i j) true\n\t       (= (nth s i) (nth s j)) (recur (inc i) (dec j))\n\t       :else false)))","problem":27,"user":"4ed2a92b535d44c135fd68dc"},{"code":"#(=(reverse (vec %)) (vec %))","problem":27,"user":"4fe21889e4b0dd6cd5ce3641"},{"problem":27,"code":"#(if (< 1 (count %))\n    (and (= (last %) (first %))\n         (recur (drop-last (rest %))))\n    true)","user":"5649b1b0e4b0284900eef646"},{"problem":27,"code":"(fn [init-s]\n  (loop [s (seq init-s)\n         left 0\n         right (dec (count s))]\n    (if (> left right)\n      true\n      (if (= (nth s left) (nth s right))\n        (recur s (inc left) (dec right))\n        false))))","user":"57addbcce4b0b8559636fca3"},{"code":"(fn pal [x]\n  (\n   (fn p_recur [x, v, l]\n    (if\n      (empty? x)\n      (= v l)\n      (p_recur (rest x) (conj v (first x)) (conj l (first x)))\n    )\n   )\n   x [] '()\n  )\n)","problem":27,"user":"52624348e4b03e8d9a4a707e"},{"problem":27,"code":"(fn [xs]\n    (let [ys (reverse xs)]\n      (= (seq xs) ys)))","user":"5c3a896be4b0d62ef62d9f94"},{"problem":27,"code":"(fn [values]\n  (if (= (reverse values) (reverse (reverse values)))\n    true\n    false\n    )\n  )","user":"5ee66158e4b029a2061bbe98"},{"problem":27,"code":"(fn [x]\n  (let [r (reverse x)]\n    (or\n     \t(= x r)\n     \t(= x (apply str r))\n     ))\n )","user":"4ec56864535d6d7199dd369d"},{"problem":27,"code":"(fn palindrome [x] (if (= (seq x) (reverse x)) true false))","user":"58eed5b7e4b056aecfd47db8"},{"problem":27,"code":"(fn palin \n  [x]\n  (= (seq x) (reverse x)))","user":"5b98f174e4b0c0b3ffbd4ac1"},{"problem":27,"code":"(fn[x] (if (= (type x) java.lang.String)\n         (= x (clojure.string/reverse x))\n         (= x (reverse x))))","user":"55f6fafbe4b06e875b46cea1"},{"code":"(fn palind [x] ( \n    if (or (empty? x) (empty? (rest x))) \n        true\n        (and (palind (rest (reverse (rest x)))) (= (first x) (first (reverse x)))) \n))","problem":27,"user":"50ef311fe4b0a78662fa2651"},{"code":"(fn [seq]\n  (loop [s seq r (reverse seq)]\n    (if (empty? s)\n      true\n      (and (= (first s) (first r))\n           (recur (rest s) (rest r))))))","problem":27,"user":"513a37e0e4b067e25a345ec7"},{"code":"#(let [median (quot (count %) 2)]\n  (= (take median %) (take median (reverse %))))","problem":27,"user":"504c8165e4b09724c857af31"},{"code":"(fn [pal] (= (reverse pal) (seq pal)))","problem":27,"user":"50bfb5fbe4b05ae8c1cbbd9a"},{"problem":27,"code":"(fn [s] (every? true? (map #(= %1 %2) s (reverse s))))","user":"5a822590e4b00b71e582a073"},{"code":"(fn [palim] (= (reverse palim) (seq palim)))","problem":27,"user":"51c73959e4b07ef393169e3e"},{"problem":27,"code":"(fn eq [x] (if (= java.lang.String (type x)) (= (apply str (reverse x)) x) (= (reverse x) x)))","user":"592ac550e4b072a2710fcf27"},{"problem":27,"code":"#(if (= (vec %) (reverse %))\n   true\n   false)","user":"5a1a7db2e4b0ff51aa4b3213"},{"code":"(fn [x] (if (string? x)\r\n           (= x (apply str(reverse x)))\r\n           (= x (reverse x))\r\n           ))","problem":27,"user":"4e932523535dbda64a6f6b09"},{"code":"(fn palindrome? [coll]\r\n    (if (empty? coll)\r\n        true\r\n      (if (= (first coll) (last coll))\r\n        (palindrome? (drop-last (drop 1 coll)))\r\n        false)))","problem":27,"user":"4fc56e68e4b0ee37620e17f5"},{"problem":27,"code":"#(=(seq %)(reverse(seq %)))","user":"53c0bc5fe4b00fb29b221257"},{"code":"(fn palin \n  [word] \n  \t(if (not (= (first word) (last word))) \n      \tfalse \n      \t(if (> 1 (count word)) \n          \t(palin (rest(reverse(rest word)))) \n          \ttrue)))","problem":27,"user":"53307a23e4b019098a6f8b5d"},{"code":"(fn palindrome [collection]\r\n  (loop [front collection back collection]\r\n\t\t(if (= '() front)\r\n\t\t\ttrue\r\n\t\t\t(if (not= (first front) (last back))\r\n\t\t\t\tfalse\r\n\t\t\t\t(recur (rest front) (drop-last back))\r\n\t\t\t)\r\n\t\t)\r\n\t)\r\n)","problem":27,"user":"50845d3ee4b0fb8f40674bf3"},{"code":"#(= (apply list %) (reverse (apply list %)))","problem":27,"user":"4f2c593ee4b0d6649770a053"},{"code":"(fn palindrome? [s]\n  (if (string? s)\n    (palindrome? (map str s))\n  \t(= (reverse s) s)))","problem":27,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn [ss]\n    (if (string? ss)\n      (= ss (apply str (reverse ss)))\n      (= ss (reverse ss)) \n    )\n)","problem":27,"user":"52fba50ce4b047fd5583700d"},{"code":"(fn f [x] (= (reverse (take (int (/ (count x) 2) ) x)) (take-last (int (/ (count x) 2) ) x)))","problem":27,"user":"5149c2f1e4b0829bd132edb0"},{"problem":27,"code":"(fn [item]\n  (= (reverse (vec item))\n     (vec item)))","user":"537cb3ade4b06839e8705e7d"},{"problem":27,"code":"(fn [x] \n   (if(< (count x) 2) true\n   (if\n    (not (= (first x) (last x)))\n   false\n   (recur (drop 1 (drop-last x)))))\n)","user":"5d40442ee4b05dd059a54362"},{"code":"(comp (partial apply =) (juxt seq (partial reduce conj ())))","problem":27,"user":"53616d56e4b0243289761e45"},{"problem":27,"code":"(fn [my-seq]\n  (= (seq my-seq) (reverse my-seq)))","user":"550b1c2ce4b06e50f9beb13b"},{"code":"(fn is-palindrome? [seq]\n  (if (string? seq) (= seq (apply str (reverse seq))) (= seq (reverse seq))))","problem":27,"user":"51269362e4b083bb8f88cf09"},{"problem":27,"code":"#(zero? (compare (apply str (take (/ (count %) 2) %)) (apply str (reverse (take-last (/ (count %) 2) % )) ) ))","user":"5594e0e3e4b0c79f6e1db95b"},{"code":"#(= (vec %) ((comp rseq vec) %))","problem":27,"user":"50fe91c1e4b03cd852b4e84e"},{"code":"(fn [l] (= (reverse (seq l)) (seq l)))","problem":27,"user":"4edd9d79535d10e5ff6f532b"},{"problem":27,"code":"(fn[xs](= (reverse xs)(seq  xs)))","user":"6096e2d4e4b00e9e6653c3f1"},{"problem":27,"code":"#(= % (if (string? %) (apply str (reverse (seq %))) (reverse %)))","user":"550340d9e4b086ebe8a79c6b"},{"code":"#(or (= % (reverse %)) (= % (apply str (reverse %))))","problem":27,"user":"53976599e4b0b51d73faaeea"},{"code":"(fn [coll]\n\t(loop [x (first coll)\n\t       y (last coll)\n\t       more (drop-last 1 (rest coll))]\n\t       (if (not (empty? more))\n\t       \t(if (= x y)\n\t       \t\t(recur (first more) (last more) (drop-last 1 (rest more)))\n\t       \t\tfalse\n\t       \t\t)\n\t       \ttrue)))","problem":27,"user":"51205867e4b0e88f5a20c40f"},{"problem":27,"code":"(fn [elems]\n    (or (empty? elems)\n        (and (= (first elems) (last elems))\n             (recur (-> elems rest butlast)))))","user":"5ac6ef9be4b0e27600da7779"},{"problem":27,"code":"#(let [len (count %)\n       splted1 (if (even? len) (take (/ len 2) %)\n                \t\t\t  (take (int (Math/floor (/ len 2))) %))\n   \t   splted2 (if (even? len) (drop (/ len 2) %)\n                   \t\t\t  (drop (int (Math/ceil (/ len 2))) %))]\n   (= (reverse splted1) splted2))","user":"576cd1fae4b0979f89651554"},{"problem":27,"code":"(fn [x]\n  (let [reversed (reverse x)\n        reversed (if (string? x)\n                   (apply str reversed)\n                   reversed)]\n    (= reversed x)))","user":"58b80ec1e4b0ebc645576d89"},{"problem":27,"code":"#(loop [seq %]\n  (if (= (count seq) 0)\n    true\n    (if (not= (first seq) (last seq))\n      false\n      (recur (rest (butlast seq))))))","user":"576c2ecae4b07c67f59d1fbb"},{"problem":27,"code":"(fn [in] (= (seq in) (reverse (seq in))))","user":"5a94a38ce4b0d174b936c73e"},{"code":"(fn palindrome [coll] (= (seq coll) (reverse (seq coll))))","problem":27,"user":"4e15c301535d04ed9115e7e5"},{"code":"#(let [xs (seq %)] (= xs (reverse xs)))","problem":27,"user":"53800d99e4b06839e8705ebd"},{"code":"(fn [str] (= (seq str) (reverse (seq str))))","problem":27,"user":"5314c8f7e4b08068f379ed1d"},{"problem":27,"code":"(fn [to-reverse]\n  (let [reversed (reverse to-reverse)]\n    (if (instance? String to-reverse)\n      (= to-reverse (apply str reversed))\n      (= to-reverse reversed))))","user":"540d0087e4b0addc1aec670b"},{"problem":27,"code":"#(every? true? (take (/ 2 (count %)) (map = % (reverse %))))","user":"5603c31fe4b04bb52996e1c1"},{"problem":27,"code":"(fn [l] (let [rev (seq (reverse l)) ref_fin (if (= (type l) String) (clojure.string/join rev) rev)] (= l ref_fin)))","user":"57a499dae4b0a966079561e6"},{"problem":27,"code":"(fn [a]\n  (loop [s a]\n    (let [f (first s) l (last s)]\n      (if (empty? s) true\n        (if (= f l)\n          (recur (butlast (next s)))\n            false\n            )\n          )\n        )\n      )\n    )","user":"515d414be4b00901442db1db"},{"code":"(fn ! [a-seq]\n  (if (or (empty? a-seq) (= 1 (count a-seq)))\n    true\n    (and (= (first a-seq) (last a-seq)) \n       (! (rest (drop-last a-seq))))))","problem":27,"user":"5235493ee4b05e80434a5064"},{"problem":27,"code":"(fn [l]\n  (let [seq-l (seq l)]\n  (= (reverse seq-l) seq-l)))","user":"56d3bc2de4b0ea9b8538f7b0"},{"problem":27,"code":"(fn pal\n  [s]\n  (cond\n   (empty? s) true\n   (= (first s) (last s)) (pal (drop-last (rest s)))\n   :else false))","user":"582cbf48e4b051871117bfa6"},{"code":"(fn [coll]\n  (let [rev (reverse coll)]\n    (= rev (reverse rev))\n  ))","problem":27,"user":"4f72f71be4b07046d9f4f03d"},{"code":"#(if \n  (< (count %) 2) \n  true\n  (and (= (first %) (last %)) \n       (recur (rest (butlast %)))))","problem":27,"user":"4f4fac2ae4b03ad3f0c10ce5"},{"problem":27,"code":"(fn c27 [[& sec]] \n  (if \n  \t(empty? sec) true (if (not= (first sec) (last sec)) false (c27 (rest (butlast sec))))))","user":"56f09bf4e4b04a395b9a047f"},{"code":"(fn plaindrome? [w]\n  (if (> 2 (count w)) true\n    (if (not (= (first w) (last w))) false\n      (recur (butlast (rest w))))))","problem":27,"user":"53733312e4b06d7f452d9e0a"},{"code":"#( = (apply vector %) (apply vector (reverse %)) )","problem":27,"user":"4f030775535dcb61093f6a43"},{"problem":27,"code":"(fn palindromep [s]\n  (loop [i 0 j (dec (count s))]\n    (if (= i (inc (int (/ (count s) 2))))\n      true\n      (if-not (= (nth s i) (nth s j))\n                      false\n        (recur (inc i) (dec j)))\n      )))","user":"5f73000ce4b02876ed9fd094"},{"code":"(fn [x] (= (seq x) ( reverse x ) ) )","problem":27,"user":"515919fbe4b0394f658fe229"},{"problem":27,"code":"(fn Palindrome-Detector\n  [lst]\n  (loop [lst1 lst\n         i 0\n         j (- (count lst) 1)]\n    (cond\n      (< j i) true\n      (not= (nth lst1 i) (nth lst j)) false\n      :else (recur lst (inc i) (dec j)))))","user":"59e14ee3e4b08badc2a0c50c"},{"code":"(fn pd [[h & t]]\n  (if (nil? (last t)) true\n  (if (= h (last t)) (pd (drop-last t)) false) ))","problem":27,"user":"4ebe81e9535dfed6da9c6d95"},{"code":"(fn [a] (let [va (vec a)] (= va (reverse va))))","problem":27,"user":"52be0c48e4b07a9af5792311"},{"problem":27,"code":"(fn pall [coll]\n  (= (seq coll) (reverse coll))\n  )","user":"5a5dbe9de4b0512ff01cd92b"},{"code":"(fn [x] (= x\n      (if (string? x)\n      (apply str (reverse x))\n      (reverse x))))","problem":27,"user":"4f524d11e4b03ad3f0c10d34"},{"problem":27,"code":"(fn [l] (if (< (count l) 2) true (if (= (first l) (last l)) (recur (drop-last 1 (drop 1 l))) false)))","user":"53f6d555e4b0db01ade6f9e5"},{"problem":27,"code":"(fn [lst] \n  (if (string? lst)\n    (= (reduce str (reverse lst)) lst)\n    (= (reverse lst) lst)))","user":"57f8104ce4b0d3187e900910"},{"problem":27,"code":"#(let [a %\n       b (reverse %)]\n   (reduce (fn [m n] (and m n)) true (map (fn [m n] (= m n)) a b)))","user":"59ddae03e4b01968742fed65"},{"problem":27,"code":"(fn pal \n  ([l] \n     (pal l '()))\n  ([l acc]\n     (println \"l \" l \" acc \" acc)\n     (if (= (count acc) (count l)) \n         (= l acc) \n         (if (= (count acc) (- (count l) 1)) \n           (= (rest l) acc) \n           (pal (rest l) (conj acc (first l))))\n     )))","user":"55623feae4b0c656e3ff17d4"},{"code":"(fn [x]\r\n ((fn pali [n coll]\r\n  (if (> (inc n) (/ (count coll) 2))\r\n   true\r\n   (if (= (nth coll n) (nth coll (- (count coll) (inc n))))\r\n    (pali (inc n) coll)\r\n    false)))\r\n 0 x))","problem":27,"user":"505caadfe4b0bcb5664c3d3e"},{"problem":27,"code":"(fn pal[x](cond\n           (empty? x) true\n           (not= (first x) (last x)) false\n           :else (pal (rest (drop-last x)))\n           )\n  )","user":"583019b8e4b051871117bfff"},{"problem":27,"code":"#(= %\n    (if (= (type %) java.lang.String)\n      (apply str (reverse %))\n    (reverse %)))","user":"555867cae4b0deb715856e2a"},{"code":"(fn [word]\n  (= (seq word) (reverse word)))","problem":27,"user":"4eb51942535d7eef30807365"},{"problem":27,"code":"(fn palindrome? [ls]\n   (let [ls-half (Math/ceil (/ (count ls) 2))]\n     (if (=\n          (nthrest ls ls-half)\n          (nthrest (reverse ls) ls-half))\n       true\n       false)))","user":"554bc026e4b0a04f79299597"},{"code":"(fn [x] (= (seq x) (reverse x)) )","problem":27,"user":"4f4ff451e4b03ad3f0c10cf2"},{"code":"#(= (into () %) (into () (reverse %)))","problem":27,"user":"4dad76588e77d6ed63f12a44"},{"code":"(fn pal? [s]\n  (if(string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))","problem":27,"user":"51b73a91e4b0d906fcd71d33"},{"code":"(fn palindrome? [lst]\n  (cond\n   (> 2 (count lst)) true\n   :else (and (= (first lst) (last lst))\n              (palindrome? (rest (butlast lst))))))","problem":27,"user":"5159849ce4b0394f658fe236"},{"problem":27,"code":"(fn [col] (every? true? (map = col (reverse col))))","user":"59e62655e4b08badc2a0c568"},{"code":"#(let [x (if (string? %) (apply str (reverse %)) (reverse %))]\n   (= x %))","problem":27,"user":"536bd4dee4b0fc7073fd6e30"},{"problem":27,"code":"(fn [xs]\n  (cond (string? xs) (= (str (reverse xs) xs))\n        :otherwise (= (reverse xs) xs)))","user":"5717ad6fe4b07c98581c3b14"},{"code":"(fn f [x] (\n  if (<= (count x) 1)\n    true\n    (and (= (last x) (first x)) (f (rest (reverse (rest x)))))\n))","problem":27,"user":"4f73054fe4b07046d9f4f03e"},{"problem":27,"code":"; reverse draait een sequence om https://clojuredocs.org/clojure.core/reverse\n#(= (seq %) (reverse (seq %)))\n;#(= (seq %) (reverse (seq %)))","user":"5637bd38e4b0bfe05bf117de"},{"code":"#(loop [in %] \n   (if (empty? in) true\n     (if-not (= (first in) (last in))\n       false\n       (recur (rest (drop-last in))) )))","problem":27,"user":"51c7d82be4b07ef393169e47"},{"problem":27,"code":"(fn palindrome? [x]\n  (let [len (count x)]\n    (if (not (nil? (#{0 1} len)))\n      true\n      (and (= (first x) (last x))\n           (palindrome? (->> x (take (- len 1)) (drop 1)))))))","user":"55d7d139e4b0e31453f64aaa"},{"code":"(fn pal\n    [x]\n    (if (< (count x) 2)\n        true\n        (and (= (first x) (last x)) (pal(rest(drop-last x))))))","problem":27,"user":"53201eece4b08068f379edce"},{"code":"(fn [coll]\n  (.equals\n    (apply str coll)\n    (apply str (reverse coll))))","problem":27,"user":"506929ffe4b01dc6af13f82b"},{"problem":27,"code":"#(let [x (split-at (/(count %)2) %)]\n   (if (even? (count%))\n   (= (reverse(x 1))(x 0))\n   (= (reverse(x 1))(drop-last(x 0)))))","user":"58f7b1c6e4b0438e51c2cf1a"},{"code":"(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n         (palindrome? (butlast (rest s))))))","problem":27,"user":"4f12d1b0535d64f60314642b"},{"code":"#(every? (fn [[x y]] (= x y)) (map vector % (reverse %)))","problem":27,"user":"51e780dae4b0730ab87cf353"},{"problem":27,"code":";(fn [coll]\n;  (let [hc (/ (count coll) 2)\n;        f (take hc coll)\n;        s (drop hc coll)]\n;    (every? true? (map = f s))\n;    )\n;  )  \n;\n; ahha!\n\n;(fn [coll]\n;    (every? true? (map = coll (reverse coll)))\n;  )  \n;:D\n\n;; optimizations\n(fn [coll]\n  (let [hu (/ (inc (count coll)) 2)]\n\t    (every? true? (take hu (map = coll (reverse coll))))\n    )\n  )","user":"58aa8083e4b01a0c0b232985"},{"problem":27,"code":"#(if (string? %)\n   (if (= % (clojure.string/reverse %))\n     true\n     false)\n   (if (= % (reverse %))\n     true\n     false))","user":"5a43b7e9e4b0447ef91cc609"},{"problem":27,"code":"(fn [arr] (loop [l 0 u (- (count arr) 1)] (if (>= l u) true (if ((complement =) (nth arr l) (nth arr u)) false (recur (inc l) (dec u))))))","user":"53320dd1e4b019098a6f8b71"},{"problem":27,"code":"(fn [input] (= (reverse input) (seq input)))","user":"54f09599e4b024c67c0cf89d"},{"problem":27,"code":"(fn palindrom [s] \n  (= (seq s) (reverse s)))","user":"5efdb9bae4b0cf489e8d7f02"},{"problem":27,"code":"#(->> %\n   \t (reverse) \n     (map vector %)\n     (filter (fn [a] (not= (first a) (second a))))\n     (empty?))","user":"5eb1e42ae4b00a66d4a95202"},{"problem":27,"code":"(fn [seq]\n  (loop [beginIdx 0 endIdx (dec (count seq))]\n    (if (>= beginIdx endIdx)\n      true\n      (if (= (nth seq beginIdx) (nth seq endIdx))\n        (recur (inc beginIdx) (dec endIdx))\n        false))))","user":"5f15a50fe4b091ba50b4dbbc"},{"problem":27,"code":"(fn [v] (\n  (fn [v c]\n   (if (> c (/ (count v) 2))\n     true\n     (if (not (= (nth v c) (nth (reverse v) c)))\n       false\n       (recur v (inc c))\n     )\n   )\n   ) v 0)\n)","user":"55188c5de4b06a49daca83cc"},{"code":"(fn [myList] (= (seq myList) (reverse myList)))","problem":27,"user":"4ec3f4a7535dcc7ae8597d5e"},{"problem":27,"code":"(fn [x]\n  (if (= (reverse (reverse x)) (reverse x)) true\n    false))","user":"581c4ab4e4b04b46fc4b0eea"},{"code":"#(= (if (string? %1) (apply str (reverse %1)) (reverse %1)) %1)","problem":27,"user":"50a5f72fe4b0aa96157e2611"},{"problem":27,"code":"(fn [ls] (= (vec ls) (reverse ls)))","user":"547584d9e4b0c51c1f4d729b"},{"code":"(fn [x] \n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x)) )\n  )","problem":27,"user":"51b77c9be4b0d906fcd71d37"},{"code":"#(= #{true} (set (for [f (range (dec (count %))) :let [l (- (dec (count %)) f)] :while (< f l)] (= (nth % f) (nth % l)))))","problem":27,"user":"526c2340e4b03e8d9a4a7281"},{"code":"(fn [x] (loop [coll x]\n(cond\n(= 0 (count coll)) true\n(= 1 (count coll)) true\n(not (= (first coll) (last coll))) false\n:else (recur (drop-last (rest coll))))))","problem":27,"user":"507ddf55e4b0a03698d01ca8"},{"code":"(fn [a] (= (reverse a) (reverse (reverse a))))","problem":27,"user":"4ea84ff8535d7eef308072f7"},{"problem":27,"code":"(fn [initial] (= (seq initial) (seq (reverse initial))))","user":"553c4614e4b09218d5f45014"},{"problem":27,"code":"(fn pal* [coll]\n  (= (seq coll) (reverse coll)))","user":"562db4d1e4b0a45d2ff83021"},{"code":"(fn [palindrome] (= (seq palindrome) (reverse palindrome)))","problem":27,"user":"52dc55e2e4b09f7907dd13cd"},{"problem":27,"code":"(fn [xs] (let [ys (seq xs)]\n  (= ys (reverse ys))))","user":"577a74f7e4b0d3393e5deafa"},{"problem":27,"code":"(fn [coll]\n  (= (take (quot (count coll) 2) coll) (reverse (take-last (quot (count coll) 2) coll))))","user":"533c5249e4b0e30313ee6cdd"},{"problem":27,"code":"(fn [coll] \n  (= (reverse coll) (vec coll)))","user":"5e99cbd4e4b0157ca96647e6"},{"code":"(fn palin [x] \n  (if (= (seq x) (reverse x))\n         true\n         false\n    )\n  )","problem":27,"user":"530e0e4ee4b08068f379ecb4"},{"problem":27,"code":"#(every? true? ((fn p [c r i]\n  (if (< i (/ (count c) 2))\n      (p c (cons (= (nth c i) (nth (reverse c) i)) r) (inc i))\n    r)) %1 '() 0))","user":"56c6490de4b05cc29241eeaf"},{"code":"#(cond\n   (= java.lang.String (type %)) (= % (clojure.string/reverse %))\n   :else (= % (reverse %)))","problem":27,"user":"506b0a9ce4b0a2a5463de380"},{"problem":27,"code":"(fn [x] (if (string? x)\n      (= x (clojure.string/join\t(reverse x)))\n      (= x (reverse x))))","user":"568513c4e4b04eec3ec5cfc5"},{"code":"(fn [x] (= (into () x) (reverse (into () x))))","problem":27,"user":"504ed58ce4b069badc5a33d2"},{"problem":27,"code":"(fn [coll] \n  (if (string? coll)\n    (if (= coll (reduce (fn [x y] (str y x)) \"\" coll)) true false)\n    (if (= coll (reduce (fn [x y] (conj x y)) '() coll)) true false)\n  ))","user":"5d03944de4b0cc9c915881c5"},{"problem":27,"code":"(fn [x]\n          (if (string? x)\n                 (= x (apply str (reverse x)))\n                      (= x (reverse x))))","user":"570ab24fe4b0b0fb43fd06b7"},{"code":"(fn my-palindrome\n  [coll]\n  (when (<= (count coll) 1)\n    true)\n  (let [a (first coll)\n        b (last coll)]\n    (if (= a b)\n      (if (> (count coll) 2)\n        (recur (butlast (rest coll)))\n        true)\n      false)))","problem":27,"user":"4fa27e18e4b0dcca54ed6d68"},{"problem":27,"code":"(fn [x] (if (or (empty? x) (= (count x)1))\n\t\ttrue\n\t\t(if (= (take 1 x) (take-last 1 x))\n\t\t\t(recur (drop 1 (drop-last 1 x)))\n\t\t\t false )))","user":"56879ea4e4b0dcc4269f405f"},{"problem":27,"code":"(fn [s]\n  (loop [seq s]\n    (if (<= (count seq) 1)\n      true\n      (if (= (first seq) (last seq))\n        (recur (-> seq rest reverse rest reverse))\n        false))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":27,"code":"(fn [s]\n   (let [r (reverse s)]\n     (->> (map #(= %1 %2) s r)\n          (apply = true))))","user":"58447708e4b089d5ab817e4b"},{"problem":27,"code":"(fn [x]\n   (let [x (seq x)\n         y (reverse x)]\n    (= x y)))","user":"5af047b8e4b0cc2b61a3bc48"},{"code":"#(= (reduce conj () %) (into [] %))","problem":27,"user":"532ecd44e4b019098a6f8b49"},{"code":"(fn [xs] (= (seq xs) (reverse (seq xs))))","problem":27,"user":"4dd59d8b535dae65d5c462eb"},{"code":"(fn palindrome? [s]\r\n   (or (<= (count s) 1)\r\n       (and (= (first s) (last s))\r\n            (palindrome? (rest (butlast s))))))","problem":27,"user":"4df168bd535d08e6dec9fe1d"},{"code":"(fn [v2]\n    (let [v (vec v2)]\n    (if (< (count v) \n           2) \n        true \n        (and (= (first v) \n                (last v)) \n             (recur (rest (butlast v)))))))","problem":27,"user":"5140b7bae4b076604f1aa55b"},{"code":"(fn [x]\n  (let\n    [ middle (/ (count x) 2)\n      split #(if (integer? middle) (partition middle x) (partition (inc (int middle)) (int middle) x))\n      palindrome #(if (empty? %1) true (if (not= (first %1) (last %2)) false (recur (drop 1 %1) (butlast %2))))]\n    (println (split))\n    (apply palindrome (split))))","problem":27,"user":"50ed5d1be4b06330c1f87c37"},{"code":"(fn [x] (every? #(= (first %) (last %)) (partition 2 (interleave x (reverse x)))))","problem":27,"user":"4db5708d535d87e67b28fe0c"},{"code":"#(= (reverse (into () %)) (into () %))","problem":27,"user":"4e43b0d9535dc968683fc4a3"},{"code":"#(if (or (= % (reverse %)) (= % (apply str (reverse %)))) true false)","problem":27,"user":"52ce8648e4b07d0d72b27390"},{"code":"(fn [items]\n  (if (string? items)\n    (= (seq items) (seq (reverse items)))\n    (= items (reverse items))))","problem":27,"user":"51508efce4b0c51f0585bbb4"},{"code":"(fn palindromo? [x]\n  (= (reverse x) (seq x))\n)","problem":27,"user":"4ea3f035535d7eef308072ca"},{"code":"(fn [test]\n  (loop [r (seq test)]\n    (cond (empty? r) true\n          (= 1 (count r)) true\n          (not (= (first r) (last r))) false\n          :else (recur (rest (drop-last r))))))","problem":27,"user":"538e36c7e4b0b51d73faae81"},{"problem":27,"code":"(fn [s]\n  (loop [xs (seq s)]\n    (if (> 2 (count xs)) \n      true\n      (and (= (first xs) (last xs))\n           (recur (drop 1 (drop-last xs)))))))","user":"55bbd179e4b01b9910ae29eb"},{"code":"#(= (seq %1) (into () %1))","problem":27,"user":"4f826548e4b033992c121c08"},{"code":"(fn palindrome [x]\r\n  \t\t\t(let [seq (partition 2 (interleave x (reverse x)))]\r\n\t\t\t\t\t\t (every? true? (map (fn [[index data]] (= index data)) seq))))","problem":27,"user":"4db045b5838c48654951d9be"},{"code":"(fn palindrome [coll]\n  (cond\n   (empty? coll) true\n   (= (first coll) (last coll)) (palindrome (rest (butlast coll)))\n   :else false))","problem":27,"user":"530578ede4b0d8b024fd3760"},{"problem":27,"code":"(fn\n  [arr]\n  (if (empty? arr)\n    true\n    (and\n     (= (first arr) (last arr))\n     (recur\n      (rest (drop-last arr))\n     ) \n    )\n  )\n)","user":"555f4bade4b0a2eb076a39c2"},{"problem":27,"code":"(fn [xs] (= (into [] xs) (reverse (into [] xs))))","user":"5488537be4b0e286459a11cf"},{"problem":27,"code":"(fn f [list]\n  (if (empty? list)\n    true\n    (if (= (first list) (last list))\n      (f (rest (butlast list)))\n      false)))","user":"58f00639e4b056aecfd47ddc"},{"problem":27,"code":"(fn [x]\n  (let [q (quot (count x) 2) r (mod (count x) 2) l (partition (+ q r) q x)] (= (first l) (reverse (second l)))))","user":"58767e82e4b01531a375ea85"},{"code":"(fn [lst]\n  (if (= (mod (count lst) 2) 0)\n    (let [mid (int (/ (count lst) 2))\n          lst-1 (take mid lst)\n          lst-2 (take mid (reverse lst))]\n      (= lst-1 lst-2))\n    \n    (let [mid (int (/ (count lst) 2))\n          lst-1 (take mid lst)\n          lst-2 (take mid (reverse lst))]\n      (= lst-1 lst-2))))","problem":27,"user":"52a6ed15e4b0c58976d9ac0a"},{"code":"(fn [s] (every? identity (map = s (reverse s))))","problem":27,"user":"4e6dd51b535d5021c1a895f6"},{"problem":27,"code":"(fn [coll] (let [vec-coll (vec coll) rev-vec (rseq vec-coll)] (= vec-coll rev-vec)))","user":"5509bec5e4b06e50f9beb121"},{"problem":27,"code":"#( = (take (int (/ (count %) 2)) %)\n      (reverse (drop (- (count %) (int (/ (count %) 2))) %)))","user":"578f5122e4b0ebec4cfb7592"},{"code":"(fn [pal]\n  (let [p (seq pal)]\n  \t(= p (reverse p))))","problem":27,"user":"51cc5f20e4b02254fc794870"},{"code":"(fn palin[x]\n  (if (< (count x) 2) true\n  (and (= (first x) (last x)) (palin (rest (butlast x))))\n))","problem":27,"user":"4ea365e2535d7eef308072c5"},{"problem":27,"code":"(fn [txt]\n  (->> (let [rtext (reverse txt)]\n         (if (string? txt)\n           (apply str rtext)\n           rtext))\n       (= txt)))","user":"5e34318be4b0650de70e2b15"},{"code":"(fn p [in]\n  (and\n    (= (first in) (last in))\n    (or\n      (< (count in) 3)\n      (p (butlast (rest in)))\n    )\n  )\n)","problem":27,"user":"50608d4ce4b07251188e4455"},{"problem":27,"code":"(fn [n]\n  (= (seq n) (reverse (seq n))))","user":"5921a65be4b09b4ee5954c79"},{"code":"(fn palindrome\n  ([obj] (palindrome obj (reverse obj)))\n  ([orig reversed]\n   (cond\n    (= 0 (count orig) (count reversed))\n    true\n    (or (= 0 (count orig)) (= 0 (count reversed)))\n     false\n    (= (first orig) (first reversed))\n     (palindrome (rest orig) (rest reversed))\n    :else false)))","problem":27,"user":"512a7c70e4b0ff5c4bc1f99d"},{"code":"(fn palindrome [x] \n  (let [len (count x) half (quot len 2)]  \t\n   \t  (= (reverse (take half x)) (drop (+ half (if (odd? len) 1 0)) x))))","problem":27,"user":"525aa499e4b0cb4875a45cf7"},{"problem":27,"code":"(fn [i]\n  (=\n   (seq i)\n   (reverse i)))","user":"5462caf5e4b01be26fd746b7"},{"code":"(fn [s] (= (seq (reverse s)) (seq s)))","problem":27,"user":"4fa659f3e4b081705acca1b6"},{"problem":27,"code":"(fn c\n  [p]\n  (if (empty? p)\n    true\n    (and (= (first p) (last p)) (c (rest (butlast p))))\n  )\n)","user":"54410a71e4b032a45b869367"},{"code":"(fn is-palindrome [coll]\r\n  (= (seq coll) (reverse coll)))","problem":27,"user":"4fe54ee8e4b0e8f79898fec3"},{"code":"(fn [coll]\n  (= (apply str coll) (apply str (reverse coll))))","problem":27,"user":"505bd09fe4b032b709c81373"},{"code":"(fn [input]\n  (= (seq input) (reverse input)))","problem":27,"user":"528bba38e4b0239c8a67aea9"},{"problem":27,"code":"#(->> %\n        reverse\n        (interleave %)\n        (partition 2)\n        (reduce\n         (fn [acc [b c]]\n           (and acc (= b c)))\n         true))","user":"5a18488ee4b0ff51aa4b31e5"},{"problem":27,"code":"#(if (not (= (first %) (last %)))\n      false\n      (if (< (count %) 3) true\n        (recur (butlast (reverse (pop (vec %)))))))","user":"541074f1e4b01498b1a719ac"},{"problem":27,"code":"(fn [coleccion]\n           (loop [col coleccion]\n             (if (< (count col) 2)\n               true\n               (if (= (first col) (last col)) (recur (butlast (rest col)))false))))","user":"599f7a7ee4b0871e7608b81e"},{"code":"(fn [col]\n  \t(= (vec col) (reverse col)))","problem":27,"user":"51891c96e4b04c2714a2670e"},{"code":"(fn palindrome?\n[x]\n(every? (fn [[a b]] (= a b))\n(partition 2 (interleave x (reverse x)))))","problem":27,"user":"4ec3b393535dcc7ae8597d59"},{"problem":27,"code":"#(every? identity (for [x (range (count %))] (= (nth % x) (nth (reverse %) x))))","user":"5cbd5b42e4b026601754b9f6"},{"problem":27,"code":"(fn [col]\n  (= (seq col) (into '() (seq col))))","user":"60537cd1e4b04c8f2157d152"},{"problem":27,"code":"(fn [test-sequence]\n  (if (string? test-sequence)\n    (= (apply str (reverse test-sequence)) test-sequence)\n    (= (reverse test-sequence) test-sequence)))","user":"5691ef12e4b0dcc4269f40f8"},{"code":"(fn palin [sequence]   (cond    (nil? sequence) true    (= (count sequence) 1) true    (= (first sequence) (last sequence)) (palin (butlast (rest sequence)))    :else false))","problem":27,"user":"509a5884e4b0efbae1fbc0aa"},{"problem":27,"code":"(fn\n   [seq]\n   (cond\n     (string? seq)\n       (= seq (apply str (reverse seq)))\n     :else\n     (= seq (reverse seq))))","user":"56e09e01e4b0ca2494a0960c"},{"code":"(fn [coll]\r\n  (let [sq (seq coll)\r\n        ssq (map str sq)\r\n        rsq (reverse ssq)]\r\n    (= ssq rsq)))","problem":27,"user":"4ee40938535d10e5ff6f5375"},{"problem":27,"code":";#(if (= (type %) java.lang.String) (true? (= % (apply (str (reverse %))))) (true? (= % ( reverse %))))\n\n#(if (= (type %) java.lang.String) (true? (= % (apply str (reverse %)))) (true? (= % (reverse %))))","user":"53ce030be4b00fb29b2212ea"},{"code":"#(loop [x % y %] \n  (if (empty? x) true\n  (if\n    (not= (last x) (first y)) \nfalse \n(recur (drop-last x) (rest y)))))","problem":27,"user":"50856bd1e4b004985b776e4c"},{"problem":27,"code":"(fn \n  [p]\n  (let [s (seq p)]\n    (= (into '() s) s)))","user":"56b1ab17e4b0982f16b37df1"},{"code":"(fn [collection] \n  (= (seq collection) (reverse collection)))","problem":27,"user":"52616198e4b03e8d9a4a705e"},{"code":"(fn [x]\n  (loop [work x\n         ]\n    (if (>= 0 (count work))\n      true\n      ;else\n      (if (= (first x) (last x))\n        (recur (drop 1 (take (- (count work) 1) work)))\n        ;else\n        false\n        )\n      )\n    )\n  )","problem":27,"user":"50fb084ee4b0d10d794c19dd"},{"code":"(fn [xs] (cond \n  (string? xs) (= xs (apply str (reverse xs)))\n  :else (= xs (reverse xs))))","problem":27,"user":"4ebd4448535dfed6da9c6d8f"},{"code":";#(= (vec %) (reverse %))\n#(= (seq %) (reverse %))","problem":27,"user":"4f9510b5e4b0dcca54ed6cc7"},{"code":"(fn [s] (= (apply str (reduce conj () s)) (apply str s)))","problem":27,"user":"5242e1dae4b076204b44fa96"},{"code":"(fn [input] (= (seq input) (reverse (seq input))))","problem":27,"user":"5341b141e4b00652c8746ecf"},{"problem":27,"code":"(fn [l]\n  (= l \n     (if (string? l) (apply str (reverse l)) (reverse l))))","user":"551afdf8e4b07993ea3788cb"},{"problem":27,"code":"(fn [collection] (= (seq collection) (reverse collection)))","user":"593c653de4b069cdc2982b8f"},{"problem":27,"code":"(comp (fn [list] (= list (reverse list))) seq)","user":"5669eb9ae4b04acd4f672e02"},{"problem":27,"code":"(\n\tfn check-pallindrome [x] (\n\t\t\tif (and (= (first x) (last x))  (not= (first x) nil))\n\t\t\t(check-pallindrome (reverse (drop 1 (reverse (drop 1 x)))))\n\t\t\t(if (and (= (first x) nil) (= (last x) nil)) true false)\n\t\t)\n)","user":"5a918839e4b002d099cae6f7"},{"code":"(fn [x]\n  (cond\n    (= ()       x ) true\n    (= () (rest x)) true\n    (= (first x) (last x)) (recur (rest (butlast x)))\n    :else false))","problem":27,"user":"4fd153cee4b04c3a95aa040e"},{"code":"(fn [elem]\n  (= (seq elem) (reverse elem)))","problem":27,"user":"53790dc6e4b06839e8705e4c"},{"code":"(fn ispal\n  [xs]\n  (let [match (= (first xs) (last xs))\n        tail (drop 1 (butlast xs))]\n    (if (and match (not (empty? tail))) (ispal tail) match)))","problem":27,"user":"529dd5a4e4b04e0c58e87b82"},{"code":"(fn [s]\n\t(=\n\t(map vector (reverse s))\n \t(map vector s))\n)","problem":27,"user":"51eb3aace4b0f1f103a0d159"},{"code":"(fn pal [l]\n  (cond\n   (empty? l) true\n   (= (count l) 1) true\n   (= (first l) (last l)) (->> l (drop 1) (drop-last 1) pal)\n   :else false))","problem":27,"user":"5250779ee4b0541d1855b82f"},{"problem":27,"code":"(fn [sequents]\n  (= (seq sequents) (reverse sequents)))","user":"5b6ba7d7e4b0c6492753e7ad"},{"code":"(fn palindrome? [s] (= (reverse s) (reverse (reverse s))))","problem":27,"user":"52bf936ee4b07a9af579233b"},{"code":"(fn [L] (= (reverse L) (reverse (reverse L))))","problem":27,"user":"4f280b9ae4b0d6649770a011"},{"problem":27,"code":"(fn [args] (= args (if (string? args) (apply str (reverse args)) (reverse args))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":27,"code":"(fn [input]\n  (every? true? (map = (reverse input) input)))","user":"560ae7e6e4b05f002753df0e"},{"problem":27,"code":"#(= (into [] %) (into '() %))","user":"54886e00e4b0e286459a11d1"},{"problem":27,"code":"(fn palind [list]\n  (cond\n    (= 1 (count list)) true\n    (and (= 2 (count list)) (= (first list) (last list))) true\n    (and (< 2 (count list)) (= (first list) (last list))) (palind (rest (drop-last list)))\n    :else false\n    )\n  )","user":"5a39e36ce4b001c08efc0cbc"},{"problem":27,"code":"#(reduce (fn [a b] (and a (= (b 0) (b 1))))\n        (map vector %1 (reverse %1)))","user":"54bad977e4b0ed20f4ff6eb9"},{"code":"#(let [lst (seq %)]\n   (= lst (reverse lst)))","problem":27,"user":"52c25645e4b07a9af579237d"},{"code":"(fn [t]\n    (or\n     (= t (reverse t))\n     (= t (apply str (reverse t)))))","problem":27,"user":"4f8cb9b2e4b02e764a0a51a6"},{"code":"(fn [coll] (= (seq coll)(seq(reverse coll))))","problem":27,"user":"522b1993e4b0d34ee08e71b6"},{"code":"(fn [s] \n  (= \n    (seq s) \n    (reverse (seq s))))","problem":27,"user":"4f03fb59535dcb61093f6b89"},{"problem":27,"code":"(fn [coll]\n  ( = (seq coll) (reverse coll)))","user":"5c648b60e4b0fca0c162267b"},{"code":"(fn\n  [pal]\n  (= (seq pal) (reverse (seq pal))))","problem":27,"user":"52d39acce4b099d49816f0c7"},{"code":"(fn [s] (loop [s s]\n    (if (< (count s) 2) \n        true\n        (and (= (first s) (last s)) (recur (butlast (rest s)))))))","problem":27,"user":"51059d33e4b0380e797c7d5c"},{"problem":27,"code":"(fn [x]\n  (let [as_list (into '() x)\n        rev_list (reverse as_list)]\n    (= as_list rev_list)))","user":"568a13eae4b0dcc4269f4089"},{"problem":27,"code":"#(if (= (vec %) (reduce conj () %)) true false)","user":"58cba946e4b03c36ff7e584f"},{"problem":27,"code":"(fn [coll] (if (coll? coll)\n              (= coll (reverse coll))\n               (= coll (apply str (reverse coll)))\n             ))","user":"564045a8e4b08d4f616f5edd"},{"code":"(fn [in] (= (seq in) (reverse in)))","problem":27,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"(fn [x] \n  (=\n    (reverse x)\n    (reverse (reverse x))\n  )\n)","problem":27,"user":"4f85a75ce4b033992c121c48"},{"problem":27,"code":"(fn is-palindrome? [x]\n  (= (into [] x) (reverse (into [] x))))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":27,"code":"(fn pal [x] (if (<= (count x) 1) true (if-not (= (first x) (last x)) false (pal (butlast (rest x))))))","user":"5c51f60be4b0fb8c5ffd99d4"},{"code":"(fn [a-seq] \n  (loop [i 0 j (dec (count a-seq))]\n    (if (or (= j i) (< j i)) true\n      (and (= (nth a-seq i) (nth a-seq j))\n       (recur (inc i) (dec j))))))","problem":27,"user":"4fda8f57e4b05e33b9224f4e"},{"code":"#(true? (= (apply str (reverse %)) (apply str %)))","problem":27,"user":"535c53c5e4b04ce2eb3ed2b3"},{"problem":27,"code":"(fn [se] (= (seq se) (reduce conj '() se)))","user":"58225587e4b04b46fc4b0f94"},{"problem":27,"code":"(fn [s]\n  (reduce #(and %1 %2) \n    (for [i (range (/ (count s) 2))\n          :let [ii (- (count s) (inc i))]]\n      (= (nth s i) (nth s ii)))))","user":"5e21c933e4b05b4b01516128"},{"code":"(fn [coll]\n  (loop [x coll]\n    (if (< (count x) 2)\n      true\n      (if (not (= (first x) (last x)))\n        false\n        (recur (drop-last (rest x)))))))","problem":27,"user":"523f1245e4b01c266ffa7f95"},{"problem":27,"code":"(fn [coll]\n  (let [coll' (into [] coll)]\n    (= coll' (reverse coll'))))","user":"59a512b7e4b066c664927d5e"},{"problem":27,"code":"(fn [seq1]\n  (= (seq seq1) (reverse seq1)))","user":"5d4df658e4b0776584bd6f41"},{"code":"(fn p [[x & xs]]\n  (cond\n    (nil? xs) true\n    (= x (last xs)) (p (-> xs reverse rest))\n    :else false))","problem":27,"user":"50eebf46e4b06330c1f87c61"},{"problem":27,"code":"(fn [x] (let [s (seq x)] (if (= s (reverse s)) true false)))","user":"5bc7c3aee4b07a9b28b100b2"},{"code":"(fn get-palindrome [lat] \n  (= (apply list (reverse lat)) (apply list lat)))","problem":27,"user":"514cc029e4b019235f6c057c"},{"code":"#(loop [palindrome %]\n   (cond \n    (empty? palindrome) true\n    (not= (first palindrome) (last palindrome)) false\n    :else (recur (-> palindrome rest butlast))))","problem":27,"user":"5244ca26e4b0d8acf9ed6abe"},{"problem":27,"code":"(fn __ [x] (if (string? x) (= (apply str (reverse x)) x) (= (reverse x) x)))","user":"5be2e670e4b0ed4b8aab4ccc"},{"code":"(fn ([arr]\r\n                                                                             \r\n              \r\n                           (= (loop[i 0 strtemp \"\"]\r\n                                        (if (>= i (count arr))\r\n                                          strtemp\r\n                                          (recur (+ i 1) (str strtemp (nth arr i)))\r\n                                          )\r\n                                        )  (loop[ j (- (count arr) 1) str2temp \"\"]\r\n                                        (if (< j 0)\r\n                                          str2temp\r\n                                          (recur (- j 1) (str str2temp (nth arr j)))\r\n                            ))  )  \r\n                           ))","problem":27,"user":"4de6f806535d08e6dec9fdf7"},{"code":"#(or\n  (and (= (type %) java.lang.String) (= (seq %) (reverse %)))\n  (= % (reverse %)))","problem":27,"user":"4e80e0f2535db62dc21a62b8"},{"problem":27,"code":"(fn [x] (let [digit-sequence (seq x)] (= digit-sequence (reverse digit-sequence))))","user":"5b7f2185e4b047b03b203767"},{"code":"(fn pallindrome? [coll]\n  (if (empty? coll)\n      true\n      (if (= (first coll) (last coll))\n          (pallindrome? (rest (drop-last coll)))\n          false)))","problem":27,"user":"510d59cce4b078ea71921134"},{"code":"(fn [coll]\n  (= (reverse coll) (reverse (reverse coll))))","problem":27,"user":"525941f9e4b0cb4875a45cd6"},{"problem":27,"code":"#(= (reverse (reverse %)) (reverse  %))","user":"564e719ee4b0284900eef69b"},{"code":"(fn hw [arg]\n  (loop [h arg]\n    (if (= h [])\n      true\n      (if (not= (first h) (last h))\n          false\n          (recur (rest (butlast h)))))))","problem":27,"user":"4ef2eb4d535dced4c769f226"},{"code":"(fn[lst] (= (apply str (reduce (fn [x y] (cons y x)) [] lst)) (apply str lst)))","problem":27,"user":"52f90613e4b047fd55836fe1"},{"code":"#( = (reverse %) (seq %))","problem":27,"user":"52baf490e4b07a9af57922db"},{"code":"(fn palindrome [x] (let [y (seq x)]  (= y (reverse y))))","problem":27,"user":"4f03bf5e535dcb61093f6b5d"},{"problem":27,"code":"#(let[item (into [] %)] (= item (reverse item)))","user":"58d27bcae4b03c36ff7e58fe"},{"code":"(fn [lst]\n  (let [seqlst (seq lst)]\n    (if (< (count seqlst) 2)\n        true\n        (if (= (first seqlst) (last seqlst))\n            (recur (rest (butlast seqlst)))\n            false))))","problem":27,"user":"4f608e38e4b0defedf855fa8"},{"code":"(fn [coll]\n  (or (empty? coll)\n\t    (and (= (first coll) (last coll))\n\t\t (recur (rest (butlast coll))))))","problem":27,"user":"4e68fad4535d8ccf87e9fe93"},{"problem":27,"code":"#(cond\n    (>= 1 (count %)) true\n    (not= (first %) (last %)) false\n    :else (recur (->> %\n                     (drop 1)\n                     drop-last)))","user":"5d29c06be4b01671435dbc6b"},{"problem":27,"code":"(fn [s]\n   (cond (<= (count s) 1) true\n         (not= (first s) (last s)) false\n         true (recur (rest (butlast s)))))","user":"53c0f4dee4b00fb29b221259"},{"problem":27,"code":"(fn tn [a]\n (loop [col a]\n    (if (nil? (first col))\n      true\n      (if (not (= (first col) (last col)))\n        false\n        (recur (-> col (butlast) (rest)))))))","user":"541ddadbe4b01498b1a71a84"},{"problem":27,"code":"(fn CekPalindrom\n  [coll]\n  (cond\n    (empty? coll) true\n    (not= (first coll) (last coll)) false\n    :else (CekPalindrom (rest (butlast coll)))))","user":"5b02a170e4b0cc2b61a3bd52"},{"code":"#( let [x (seq %1)] (= x (reverse x)))","problem":27,"user":"50655366e4b0c838e409d557"},{"code":"#(reduce (fn [a b] (and a b))\n         (map = % (reverse %)))","problem":27,"user":"50464831e4b011c5dfee771f"},{"code":"#(reduce (fn [ a b ] (and a b))\n         (map =\n              % (reverse %)))","problem":27,"user":"52286b19e4b0186687e23a7e"},{"code":"(fn [sequencia]\n  (letfn [(pali\n            [normal inverted e n]\n            (if (zero? n)\n              (if (= (clojure.string/join inverted) (clojure.string/join sequencia))\n                true\n                false)\n              (recur (next normal) (conj inverted e) (first (next normal)) (dec n))))]\n    (pali sequencia '() (first sequencia) (count sequencia))))","problem":27,"user":"50a991dce4b07e35d68b27b3"},{"problem":27,"code":"(fn [coll]\n  \t(= (clojure.string/join (reverse coll)) (clojure.string/join coll)))","user":"55cd95b4e4b0e31453f64a1e"},{"problem":27,"code":"(fn [x]\n  (cond (string? x)\n        (= (clojure.string/reverse x) x)\n \t\t:else\n        (= (reverse x) x)))","user":"5297dcc5e4b02ebb4ef75047"},{"problem":27,"code":"(fn [x]\n  (loop [re x, f '()]\n    (if (= (count re) 0)\n      (= f (seq x))\n      (recur (rest re) (conj f (first re)))\n    )\n  )\n)\n;; didn't use reverse","user":"5cd1fd2fe4b0ccb0619628f8"},{"code":"(fn [s] \n  (if (string? s)\n  (= (apply str (reverse s)) s)\n  (= (reverse s) s)))","problem":27,"user":"4f761a78e4b0fbe0118ec56c"},{"code":"(fn pal-detect [pc]\n  (loop [v (vec pc)]\n    (if (< (count v) 2)\n      true\n      (if (= (first v) (last v))\n        (recur (-> v rest butlast))\n        false))))","problem":27,"user":"5133af1de4b0d7a043de8cf2"},{"code":"(fn plndrm? [col]\n  (and (= (first col) (last col)) \n       (if (>= (count col) 2) (plndrm? (rest (butlast col))) true)))","problem":27,"user":"53386fb9e4b0e30313ee6c9a"},{"problem":27,"code":"(fn [z] (if (string? z) (= z (clojure.string/join \"\" (reverse z))) (= z (reverse z))))","user":"5628f33ce4b00e49c7cb47f3"},{"code":"(fn palindrome?\n  [s]\n  (if (<= (count s) 1)\n    true\n    (and (= (first s) (last s))\n         (palindrome? (drop 1 (drop-last 1 s))))))","problem":27,"user":"528e25b9e4b0239c8a67aed5"},{"problem":27,"code":"#(loop [x %]\n  (if (empty? x)\n    true\n    (if-not (= (first x) (last x))\n      false\n      (recur (rest (butlast x))))))","user":"553bda0de4b09218d5f4500b"},{"problem":27,"code":"(fn [n]\n  (= (reverse n)\n     (seq n)))","user":"5c272a4de4b07e362c2305ca"},{"code":"(fn [coll]\n  (let [cnt (count coll)]\n    (reduce #(and % %2)\n            (for [i (range cnt)]\n              (= (nth coll i) (nth coll (- cnt i 1)))))))","problem":27,"user":"52fb903ee4b047fd5583700b"},{"code":"(fn palindrome?\n  [coll]\n  (let [midpoint (/ (count coll) 2)\n        take-n (int midpoint)\n        drop-n (int (Math/ceil midpoint))]\n    (= (take take-n coll)\n       (reverse (drop drop-n coll)))))","problem":27,"user":"4ebf11bc535dfed6da9c6d9c"},{"code":"(fn [coll]\n  (= (seq coll) (reduce conj '() coll)))","problem":27,"user":"50ab38a8e4b0f65d68208507"},{"problem":27,"code":"(fn [lst]\n  (if (= (type lst) java.lang.String)\n    (= lst (apply str (reverse lst)))\n    (= lst (reverse lst))))","user":"54084784e4b0addc1aec66c9"},{"problem":27,"code":"(fn m_reverse [x]\n  (let [y \n        (cond \n          (coll? x) (reverse x) \n          (string? x) (clojure.string/reverse x))]\n    (= x y)\n\n    ))","user":"6022429be4b0d5df2af22200"},{"code":"(fn pal [xs]\n  (cond\n    (< (count xs) 2) true\n    :else\n      (cond\n        (= (first xs) (last xs)) (pal (drop 1 (butlast xs)))\n        :else                    false\n      )\n  )\n)","problem":27,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn [l]\n  (= (seq l) (reverse l))\n  )","problem":27,"user":"512e0f36e4b0b740abc59820"},{"problem":27,"code":"(fn [li]\n    (let [length (count li)]\n      (every? true? (map\n                      #(= (nth li %) (nth li (- length % 1)))\n                      (range length)))))","user":"56503470e4b0284900eef6ba"},{"problem":27,"code":"(fn [lister]\n  (if (= (seq lister) (reverse lister))\n    true\n    false))","user":"54196d63e4b01498b1a71a34"},{"problem":27,"code":"#(= (seq (to-array %)) (reverse %))","user":"5e2586afe4b05b4b01516167"},{"problem":27,"code":"#(= (seq %) (reduce conj '() %))","user":"513f86dde4b00f13ea1bd88d"},{"problem":27,"code":"(fn [arg]\n    (let [r (reverse arg )\n          t (type arg)]\n      (if (= t java.lang.String)\n        (= arg (reduce str r)) \n        (= arg r)))\n\n\n\n    )","user":"5683fcafe4b0945ebc182aa8"},{"code":"(fn [sequence]\n  (reduce #(= %1 %2 true)\n    (map #(= %1 %2) sequence (reverse sequence))))","problem":27,"user":"4e759734535d7a570dd295c4"},{"problem":27,"code":"(fn [x] (= (clojure.string/join \"\" (reverse x)) (clojure.string/join \"\" x)))","user":"59c22fbae4b0a024fb6ae4a3"},{"problem":27,"code":"(fn [l] \n  (let [c (count l)] \n    (let [half (if (even? c) (/ c 2) (/ (- c 1) 2))] \n      (= (take half l) (take half (reverse l))))))","user":"5da71eaee4b000c986472c15"},{"problem":27,"code":";#(= (seq %) (reverse (seq %)))\n(fn [list-items] (= (seq list-items) (reverse (seq list-items))))","user":"5a1679d9e4b0ff51aa4b31ca"},{"problem":27,"code":"(fn [coll]\n  (= (vec coll) (reverse coll)))","user":"53e35265e4b036ad0777e400"},{"problem":27,"code":"(fn [s]\n  (let [b (reverse s) n (count s)]\n    (every? identity \n      (map #(= (nth s %) (nth b %)) (range (/ (dec n) 2))))))","user":"53cafc64e4b00fb29b2212cf"},{"problem":27,"code":"(fn palindrome?\n    ([] true)\n    ([col]\n        (if (empty? col)\n            true\n            (if (= (first col) (last col))\n                (palindrome? (rest (butlast col)))\n                false))))","user":"59aeff12e4b0e1f4e384c8af"},{"problem":27,"code":"#(= (reverse (seq %))  (seq %))","user":"5fb3a096e4b08cb800c85b35"},{"code":"(fn palindrome? [coll]\n  (let [coll (seq coll)]\n    (= coll (reverse coll))))","problem":27,"user":"4f35b2ace4b0e243712b1ec5"},{"code":"(fn [v] (let [x (reverse v) y (reverse x)] (= x y)))","problem":27,"user":"51990df9e4b068aa333628fc"},{"problem":27,"code":"(fn [x]\n\n  (let [forward-seq (seq x)\n        reverse-seq (reverse x)]\n    (= forward-seq reverse-seq)))","user":"5f1eebcee4b0f565ad998273"},{"code":"(fn palindrome? [seq]\n  (if (string? seq)\n    (= seq (clojure.string/reverse seq))\n    (= seq (reverse seq))))","problem":27,"user":"51177fbce4b0e0897831a60b"},{"code":"(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n                    (every? identity \n                            (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))","problem":27,"user":"51696bcde4b03f62cda68ce7"},{"problem":27,"code":"(fn [items]\n  (let [middle-index (int (/ (count items) 2)) start-at-index 0 end-at-index (- (count items) 1)]\n   (loop [start-at start-at-index end-at end-at-index]\n     (if (> start-at middle-index)\n       true;直接返回验证成功\n       (if (not= (get (vec items) start-at) (get (vec items) end-at))\n         false\n         (recur (inc start-at) (dec end-at)))))))","user":"55a0d79fe4b0acc240e31502"},{"code":"(fn [x]\n  (= (vec x) (vec (reverse x))))","problem":27,"user":"529c6995e4b04e0c58e87b61"},{"problem":27,"code":"(fn palindrome [x](\n  cond\n  (= (count x) 0) true\n  (= (last x) (first x)) (palindrome (butlast (rest x)))\n  :else false))","user":"5be1a134e4b0ed4b8aab4ca0"},{"problem":27,"code":"(fn[e](= (reverse(reverse e))(reverse e)))","user":"55ec8b25e4b0121d4835fdc9"},{"code":"(fn [x] (= (vec x) (rseq (vec x))))","problem":27,"user":"520a9897e4b01da9d47a99e1"},{"problem":27,"code":"(fn [word] \n  (if (empty? word) true \n    (and (= (first word) (last word)) \n         (recur (butlast (rest word))))))","user":"5f56c0cae4b0a0bc16850a8c"},{"code":"#(= ((comp reverse (fn [seq] (into [] seq))) %) (into [] %))","problem":27,"user":"53396c03e4b0e30313ee6ca7"},{"problem":27,"code":";; extra-task:: ignoring upper/lower-case & whitespaces\n(fn palindrome? [subject]\n  (let [post-subj (-> subject\n                      ((partial apply str))\n                      (clojure.string/replace #\"\\s+\" \"\")\n                      (clojure.string/lower-case))\n        processed (->> subject\n                       clojure.core/reverse\n                       (map str)\n                       (remove #(re-seq #\"\\s\" %))\n                       (map clojure.string/lower-case)\n                       ((partial apply str)))]\n    \n    (= post-subj processed)))","user":"5553b729e4b0deb715856e05"},{"code":"(fn palindrome? [xs]\n  (= (seq xs) (reverse (seq xs))))","problem":27,"user":"4e7dfd48535db169f9c796fa"},{"problem":27,"code":"(fn [x] \n  (cond\n   (= (type x) java.lang.String) (= x (clojure.string/reverse x))\n   :else (= x (reverse x))\n  )\n)","user":"5694292ee4b0dcc4269f4113"},{"code":"(fn [l] (= (seq l) (reverse l)))","problem":27,"user":"4f0364d5535dcb61093f6a9e"},{"problem":27,"code":"(fn palindrome [thing]\n  (cond \n    (empty? thing) true\n    (empty? (rest thing)) true\n    (not= (first thing) (last thing)) false\n    :else (palindrome (-> thing rest drop-last))))","user":"56326995e4b0bfe05bf117a3"},{"code":"#(empty? (remove zero? (map compare % (reverse %))))","problem":27,"user":"5161c6a7e4b009fba0926e38"},{"problem":27,"code":"(fn [x] (= x (if (string? x)\n               (apply str (reverse x))\n\t           (reverse x))))","user":"5fe25678e4b05ac5b16ea175"},{"code":"(fn [a] (= (seq a) (reverse (seq a))))","problem":27,"user":"5050b107e4b063148f524126"},{"code":"(fn pal\n  ([s] (pal s 0 (- (count s) 1)))\n  ([s l r]\n    (if (>= l r)\n      true\n      (if (= (nth s l) (nth s r))\n        (pal s (inc l) (dec r))\n        false)\n    )\n  )\n)","problem":27,"user":"4fff00ede4b0678c553fc3fc"},{"problem":27,"code":"(fn [the-seq]\n  (= (seq the-seq) (reverse the-seq)))","user":"5c86b769e4b0c8042a70ce9b"},{"code":"(fn [sq]\n  (let [sq (seq sq)]\n    (= sq (reverse sq))))","problem":27,"user":"50763574e4b0a894bb95bf3d"},{"problem":27,"code":"(fn palindrome? [seq]\n  (= (vec seq) (vec (reverse seq))))","user":"55e9494ae4b0121d4835fd9e"},{"code":"(fn pali [x]\n  (if (empty? x) \n    true\n  \t(if (= (first x) (last x)) \n      (pali (-> x rest reverse rest)) \n      false)))","problem":27,"user":"51d96ad0e4b02ceefd94774f"},{"problem":27,"code":"(fn [x] (= (sequence x) (reverse (sequence x))))","user":"582835cbe4b051871117bf30"},{"problem":27,"code":"(fn [pal] \n  (if (string? pal) (= pal (clojure.string/join (reverse pal)))\n    (= pal (reverse pal))\n   ))","user":"5766fbb7e4b0a07e8fc180b6"},{"code":"(fn [lst]\n  (cond (< (count lst) 2) true\n        (not (= (first lst) (last lst))) false\n        :else (recur (rest (butlast lst)))))","problem":27,"user":"5201d2f3e4b0b2e020a18f22"},{"code":"(fn foo [x] (= (seq x) (reverse x)))","problem":27,"user":"4f8b20fce4b02e764a0a5178"},{"problem":27,"code":"(fn [s] (if (empty? s) true (if (= (first s) (last s)) (recur (rest (butlast s))) false)))","user":"57fe996fe4b0d3187e9009d5"},{"problem":27,"code":"(fn [lst]\n  (= (if (string? lst)\n    (apply str (reverse lst))\n    (reverse lst)) lst))","user":"5be4e6e8e4b0ed4b8aab4d06"},{"problem":27,"code":"(fn pali [s]\n  (if (= (first s) (last s))\n    (if (or (= 1 (count s)) (= 2 (count s)))\n      true\n     (pali (rest (butlast s))))\n    false)\n  )","user":"5e4beca9e4b0889a8790a560"},{"problem":27,"code":"(fn palin [x]\n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x))\n      (palin (rest (butlast x)))\n      false\n      )\n    )\n  )","user":"564716e6e4b0284900eef616"},{"code":"(fn [xs] (= (reverse xs) (seq xs)))","problem":27,"user":"5047eadde4b0ec70b3ef8d94"},{"code":"#(every? identity (map (partial apply =) (map list % (reverse %))))","problem":27,"user":"4f8c3697e4b02e764a0a518d"},{"code":"(fn [x] (= (reverse x) (into [] x)))","problem":27,"user":"522404d8e4b01819a2de42c0"},{"code":"(fn palindrome? \n  [ls]\n  (= (seq ls) (reverse ls)))","problem":27,"user":"539e717fe4b0ca733b974488"},{"problem":27,"code":"#(condp instance? % String (= (clojure.string/reverse %) %) (= (reverse %) %))","user":"5485b402e4b0e286459a11b0"},{"problem":27,"code":"(fn [x](= x (if (string? x) (clojure.string/reverse x)(reverse x))))","user":"57af74aee4b0fbc9809a2736"},{"problem":27,"code":"#(= (if (string? %)\n       (apply str (reverse %))\n       (reverse %)\n       ) %)","user":"5d6e6a2de4b04d129b00f2c8"},{"problem":27,"code":"(fn palindrome [seq]\n  (let [reverser (fn [seq stack n]\n                          (cond\n                            (empty? seq) stack\n                            (== n 0) stack\n                            :else (recur (rest seq) (cons (first seq) stack) (- n 1))))]\n    (let [reversed-seq (reverser seq '() (int (/ (count seq) 2)))]\n      (= reversed-seq (second (split-at (int (Math/ceil (/ (count seq) 2))) seq))))))","user":"5bcc304ce4b07a9b28b1010c"},{"code":"(fn\n  [col]\n  (= (seq col) (reverse (seq col))))","problem":27,"user":"53334cb2e4b019098a6f8b81"},{"problem":27,"code":"#(every? true? (map (fn [a b] (= a b)) % (reverse %)))","user":"54bad522e4b0ed20f4ff6eb8"},{"code":"(fn [xs]\n  (let [c (count xs)\n        half (+ (quot c 2) (rem c 2))]\n    (every? (partial apply =) (take half (map vector xs (reverse xs))))))","problem":27,"user":"52d95491e4b09f7907dd13a4"},{"code":"(fn pallidrome? \n  [coll] \n  (cond (< (count coll) 2) true\n        (= (first coll)\n           (last coll)) (pallidrome? (-> coll butlast rest))\n        :else false))","problem":27,"user":"5112bbdde4b0350614f07a7c"},{"code":"(fn palin[a]\n  (cond\n   (= 1 (count a)) true\n   (= 0 (count a)) true\n   :else (if (= (first a) (last a)) (palin (reverse (rest (reverse (rest a))))) false)\n   )\n  )","problem":27,"user":"4f320253e4b0d6649770a08d"},{"problem":27,"code":"(fn [x]\n  (loop [y x ] (if (= '() y) true (let [f (first y) l (last y)] (if (= f l) (recur (rest (reverse (rest y))) ) false))))\n  )","user":"526f670ce4b03e8d9a4a7365"},{"code":"(fn [c] \n  (let [ rc (reverse c) co (count c)] \n    (every? identity \n            (map #(= (nth rc %) (nth c %)) \n                 (range (/ (+ co 1) 2))\n            )\n    )\n  )\n)","problem":27,"user":"52b9c5e8e4b07a9af57922c2"},{"problem":27,"code":"(fn [item]\n  (=\n   (apply str item)\n   (apply str (reverse item))))","user":"53fce5bae4b0de5c418485df"},{"problem":27,"code":"(fn [s] (if (= (seq s) (reverse s))\n          true\n          false))","user":"5a135573e4b0ff51aa4b3180"},{"problem":27,"code":"#(= (take (/ 2 (count %)) %) (take (/ 2 (count %)) (reverse %)))","user":"5d28222ee4b092dab7f59c7a"},{"problem":27,"code":"(fn [xs]\n  (= (flatten (partition 1 xs))\n     (reduce\n      \t(fn [acc x] (cons x acc))\n      \tnil\n      \txs\n     )\n  )\n  )","user":"55b28b57e4b01b9910ae296c"},{"problem":27,"code":"#(= (apply str %)\n    (apply str (reduce conj () %)))","user":"583e02fce4b089d5ab817da5"},{"code":"(fn [s]\r\n  (let [s (vec s)]\r\n    (if (or (empty? s) (= 1 (count s)))\r\n      true\r\n      (if (= (first s) (last s))\r\n        (recur (subvec s 1 (dec (count s))))\r\n        false))))","problem":27,"user":"4e8a0c82535d3e98b802328d"},{"problem":27,"code":"(fn [coll] (\n\t= (seq coll) (reverse (seq coll))\n))","user":"547f3434e4b0c51c1f4d7319"},{"problem":27,"code":"(fn pol [x]\n  (cond\n    (or (= 0 (count x)) (= 1 (count x))) true\n    (not (= (first x) (last x))) false\n    :else (pol (drop 1 (drop-last x))))\n    )","user":"5e9d99f9e4b0157ca9664806"},{"code":"#(= %1 (if (string? %1)\r\n          (apply str (reverse %1))\r\n          (reverse %1)))","problem":27,"user":"4dc25124535d020aff1edf94"},{"code":"#(= (if (string? %1) (str %1) %1) \n     (if (string? %1) (apply str (reverse %1)) (reverse %1)))","problem":27,"user":"502ec7aae4b06efe12e8cc78"},{"code":"(fn [coll]\n    (= (seq coll) (clojure.core/reverse coll)))","problem":27,"user":"5080a697e4b01a93d3f38e49"},{"problem":27,"code":"#(= (if (= (type %) java.lang.String) (apply str (reverse %)) (reverse %)) %)","user":"5b083513e4b0cc2b61a3bdb4"},{"code":"(fn [l]\n  (cond\n    (empty? l) true\n    (= 1 (count l)) true\n    (= 2 (count l)) (= (first l) (second l))\n    :else (and (= (first l) (last l)) (recur (rest (butlast l))))))","problem":27,"user":"4f1569bb535d64f603146441"},{"problem":27,"code":"#(loop [in-list %\n        rev-list (reverse %)]\n   (if (seq in-list)\n     (if (= (first in-list) (first rev-list))\n       (recur (next in-list) (next rev-list))\n       false) ;if\n     true) ;if\n   ) ;loop/fn","user":"5739fa01e4b0cd1946bd1082"},{"code":"(fn [x] (= (cons []x) (cons [](reverse x))))","problem":27,"user":"4fcca4f5e4b0ee37620e1867"},{"code":"(fn [a] (= a ((if (string? a) clojure.string/reverse reverse) a)))","problem":27,"user":"52213426e4b0e6a83c8925c4"},{"problem":27,"code":"(fn [in] (let [s (seq in) r (reverse s)] (= s r)))","user":"5eee7311e4b07c55ae4a0510"},{"problem":27,"code":"(fn[col](let [divIndx (Math/floor (/ (count col) 2.0))] (= (take divIndx col) (take divIndx (reverse col)))))","user":"59692530e4b069c0a1a197e4"},{"problem":27,"code":"(fn [s]\n  (let [n (quot (count s) 2)]\n   (= (take n s) (take n (reverse s)))))","user":"581a703de4b0e114eb51a005"},{"problem":27,"code":"#(let [partition-coll (partition-all (int (Math/ceil (/ (count %) 2))) %) \n       a (second partition-coll) \n       b (if (= (count a) (count (first partition-coll))) \n                (first partition-coll) \n                (drop-last (first partition-coll)))] (= a (reverse b)))","user":"58eb11afe4b056aecfd47d29"},{"code":"(fn [coll]\n  (let [col (seq coll)\n        rev (reverse col)]\n    (= col rev)))","problem":27,"user":"50fe2b87e4b03cd852b4e84b"},{"code":"(fn [l]\n    (let [lt (seq l)]\n      (= (reverse lt) lt)))","problem":27,"user":"4fc588bee4b0ee37620e17fa"},{"code":"(fn [s]\n  (cond \n    (string? s) \n      (= s (apply str (reverse s)))\n    :else\n      (= s (reverse s))))","problem":27,"user":"4e6f578c535d5021c1a8961b"},{"problem":27,"code":"(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity\n            (map #(= (nth coll %) (nth rc%)) (range (/ (dec n) 2))))))","user":"57ed2574e4b0bfb2137f5b93"},{"code":"#(loop [t %] (if (empty? t) true (if-not (= (first t) (last t)) false (recur (butlast (rest t))))))","problem":27,"user":"4ee2baa8535d10e5ff6f536b"},{"code":"(fn [x]\n\t(= (reverse x) (seq x)))","problem":27,"user":"537d4a69e4b06839e8705e8a"},{"problem":27,"code":"(fn [coll]\n  (let [coll (seq coll)]\n    (if (= coll (reverse coll))\n      true \n      false)))","user":"567ea403e4b0feffd0d18eb5"},{"problem":27,"code":"(fn pal [xs]\n  (if (or (nil? xs) (= (count xs) 1)) true\n    (if (= (first xs) (last xs)) (pal (butlast (rest xs))) false)))","user":"5536cbefe4b09218d5f44fc2"},{"problem":27,"code":"(fn [seq]\n   (let [c (count seq)\n         half (if (even? c) (/ c 2) (/ (dec c) 2))]\n     (loop [s seq\n            ]\n       (cond (< (count s) 2) true\n             (not= (first s) (last s)) false\n             (= (first s) (last s)) (recur (drop-last (next s)))\n             )\n       )))","user":"542b764ae4b0dad94371f28d"},{"problem":27,"code":"#(if (= (last %1) (first %1)) true false)","user":"59395adfe4b02506e01a29fb"},{"code":"(fn [x] (= (apply str x) (apply str (reverse x))))","problem":27,"user":"4dd865e1535d2dad7130b5d7"},{"problem":27,"code":"(fn [x]\n  (if (instance? String x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))","user":"59639142e4b066ee0a44b0ce"},{"code":"#(let [l (- (count %) 1)]\n  (every? (fn [x] (= (nth % x) (nth % (- l x))))\n          (range (int (/ l 2)))))","problem":27,"user":"4f04165d535dcb61093f6b9c"},{"problem":27,"code":"#(= #{true}  (into #{} (map = % (reverse %))))","user":"602f8400e4b0d5df2af22299"},{"code":"(fn [pal]\n  (letfn [(pal? [s]\n    (cond\n      (<= (count s) 1) true\n      (and (= (first s) (last s)) (pal? (rest (butlast s)))) true\n      :else false))]\n  (pal? pal)))","problem":27,"user":"50369122e4b0af0658af779e"},{"problem":27,"code":"(fn [x]\n  (=\n     (if (string? x)\n       (clojure.string/join (reverse x))\n       (reverse x))\n       x))","user":"5ee738dee4b029a2061bbea2"},{"code":"(fn [c]\n  (let [r (if (string? c)\n            (apply str (reverse c))\n            (reverse c))]\n    (= r c)))","problem":27,"user":"4f6c6d69e4b07046d9f4efba"},{"code":"(fn [sq]\n  (if (string? sq)\n    (= (.. (new StringBuffer sq) reverse toString) sq)\n    (= sq (reverse sq))))","problem":27,"user":"4e7d1c22535db169f9c796c5"},{"problem":27,"code":"(fn palindrome? [coll]\n  (if (= (type coll) java.lang.String)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))","user":"5decd4fde4b093ff7172757b"},{"problem":27,"code":"(fn [x] \n  (= (reverse x) (seq x)) )","user":"542eae68e4b0dad94371f2c6"},{"code":"(fn pal [xs]\n  (if (empty? xs)\n    true\n    (and (= (first xs) (last xs)) (pal (butlast (rest xs))))))","problem":27,"user":"4f721e9ee4b07046d9f4f01e"},{"problem":27,"code":"(fn pal [lat]\n  (if (string? lat)\n    (= lat (apply str (reverse lat)))\n    (= lat (reverse lat))))","user":"590088bfe4b0438e51c2d026"},{"code":"(fn check-palindrome [coll]\n  (cond (empty? coll) true\n        (= (count coll) 1) true\n        (not= (first coll) (last coll)) false\n        :else (check-palindrome (rest (take (dec (count coll)) coll)))))","problem":27,"user":"5114ab7be4b0ce5098ee73b5"},{"code":"#(loop [x %]\n  (cond (< (count x) 2) true\n        (not= (first x) (last x)) false\n        :else (recur (rest (butlast x)))))","problem":27,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"(fn [l] (every? true? (map = l (reverse l))))","problem":27,"user":"4daf1076edd6309eace4d16f"},{"code":"(fn [x]\n  (if (instance? String x)\n(= (apply str (reverse x)) x)\n(= (reverse x) x)))","problem":27,"user":"4eb27fad535d7eef3080734a"},{"code":"(fn [s] (= (reverse s) (seq s)))","problem":27,"user":"4e5411e8535d8a8b8723a279"},{"problem":27,"code":"(fn [coll] (loop [left 0 right (- (count coll) 1)] (cond (>= left right) true (not= (nth coll left) (nth coll right)) false :else (recur (inc left) (dec right)))))","user":"592334c7e4b0a390037439ee"},{"problem":27,"code":"(fn [l] (if (= (vec l) (vec (reverse l))) true false))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"(fn [seq] (let [mid (Math/ceil (/ (count seq) 2))] \n     (= (take mid seq) (reverse (take-last mid seq)))))","problem":27,"user":"4fb1d7ace4b081705acca281"},{"problem":27,"code":"#(= (into()(into() %1))(into() %1))","user":"553093bee4b076ab5578f817"},{"problem":27,"code":"(fn [s] (if (= (reverse (reverse s)) (reverse s)) true false))","user":"53b3ea79e4b047364c0444ab"},{"problem":27,"code":"#(= (reverse (sequence %)) (sequence %))","user":"5bb526d0e4b0a20761a2355e"},{"code":"(fn [l]\n   (if (string? l)\n     (= l (clojure.string/reverse l))\n   (= l (reverse l) ) ) )","problem":27,"user":"530c15f7e4b02e82168697d6"},{"code":"(fn ispal? [coll] \n  (loop [f coll r (reverse coll)]\n    (if (not f)\n      true\n      (if (= (first f) (first r))\n        (recur (next f) (next r))\n      false))))","problem":27,"user":"4e0d5a5a535d04ed9115e7b5"},{"problem":27,"code":"#(if (string? %) ; check if string\n   (= % (apply str (reverse %))) ; reverse string -> get a list with chars and then concatenate this list to string\n   (= % (reverse %)))","user":"5f97eff1e4b0715f5002d7f9"},{"problem":27,"code":"(fn [thing] (let [x (seq thing) lhs (first x) rhs (last x) middle (rest (drop-last x))] (if (= lhs rhs) (if (> 1 (count middle)) (recur middle) true) false)))","user":"53b15e65e4b047364c04448e"},{"problem":27,"code":"(fn [x]\n  (loop [s x, res true]\n    (if (seq s)\n      (recur (rest (reverse (rest s))) (if (= res false)\n                                         false\n                                         (= (first s) (first (reverse s)))))\n      res)))","user":"593d6793e4b069cdc2982ba6"},{"code":"(fn [lst]\n    (if (or (empty? lst) (= (count lst) 1))\n      true\n      (if (= (first lst) (last lst))\n        (recur (rest (butlast lst)))\n        false)))","problem":27,"user":"4f06f953535dcb61093f6c1c"},{"code":"(fn [n] (= (reverse (reverse n)) (reverse n)))","problem":27,"user":"507c4829e4b0a19f8e876e57"},{"problem":27,"code":"(fn \n  [x]\n  (= (seq x) (reverse x))\n  )","user":"56de78fde4b0ea9b8538f83c"},{"code":"(fn [x] (let [y (map (fn [z] z) x)] (= y (reverse y))))","problem":27,"user":"4f16ef8a535d64f603146451"},{"problem":27,"code":"(fn [sq] (= (reverse sq) (seq sq)))","user":"5d8a3b3ee4b0915913b1d3c8"},{"problem":27,"code":"(fn [a]\n  (let [sq    (seq a)\n        revsq (reverse sq)]\n   (= revsq sq)))","user":"5630cff7e4b0bfe05bf11787"},{"problem":27,"code":"(fn [x] (= ((comp reverse reverse) x) (reverse x)))","user":"5816ad6de4b0c0e9c07b8378"},{"problem":27,"code":"(fn [x] (let [length (Math/floor (/ (count x) 2))\n               size (count x)]\n\n           (loop [i 0\n                 res true]\n           (if (< i length)\n             (if (= (nth x i) (nth x (- size i 1)))\n               (recur (inc i) true)\n               false)\n             res))\n\n\n           ))","user":"56e93576e4b04a395b9a03f6"},{"problem":27,"code":"(fn [something] (= (seq something) (reverse (seq something))))","user":"5d08dfe7e4b0cc9c91588210"},{"problem":27,"code":"#(let [reversed (apply str (reverse (seq %)))]\n    (= reversed (apply str (seq %))))","user":"5480b4c6e4b0e286459a115c"},{"problem":27,"code":"(fn palin [s]\n  (if (<= (count s) 1)\n    true\n    (and (= (first s) (last s)) (palin (butlast (rest s))))))","user":"5a208195e4b0ff51aa4b32a3"},{"code":"(fn isPalen [xs] (if (< (count xs) 2) true\n                                      (if (= (first xs) (last xs))\n                                          (isPalen (drop-last (drop 1 xs)))\n                                          false)))","problem":27,"user":"52161db6e4b0bf4bffd29cb8"},{"code":"(fn ispal [seq] \n  (cond (empty? seq) true\n    (= (first seq) (last seq)) (ispal (drop 1 (drop-last seq)))\n    :else false\n  ))","problem":27,"user":"4fb266a5e4b081705acca28c"},{"problem":27,"code":"(fn [s]\n    (= (seq s) (reverse s)))","user":"56b306c6e4b0982f16b37e0e"},{"code":"#(loop [S %]\n  (if (empty? S)\n    true\n    (if (= (first S) (last S))\n      (recur (-> S next reverse next reverse)) ;sorry\n      false)))","problem":27,"user":"505a2f3be4b03d2efce48c5b"},{"problem":27,"code":"(fn palindrome? [x] (let [xs (seq x)] (= (reverse xs) xs)))","user":"54aa2462e4b09f271ff37cb4"},{"problem":27,"code":"(fn palindrome? [coll]\n  (loop [front (first coll) back (last coll) xs (rest (butlast coll))]\n    (println front back xs)\n    (if (= front back) \n      (if (or (empty? xs) (= 1 (count xs))) \n        true\n        (recur (first xs) (last xs) (rest (butlast xs))))\n      false)))","user":"53c126fce4b00fb29b22125b"},{"problem":27,"code":"(fn [inp]\n  (let [inps (seq inp)]\n    (= inps (reverse inps))))","user":"542c22bde4b0dad94371f29e"},{"problem":27,"code":"(fn palindrome? [l]\n  (if (or (empty? l) (= (count l) 1))\n      true\n    (and (= (first l) (last l))\n         (palindrome? (drop-last (rest l))))))","user":"58fb87efe4b0438e51c2cf7b"},{"problem":27,"code":"(fn [l] (let [half-cnt (int (/ (count l) 2))]\n                    (=\n                      (reverse (take-last half-cnt l))\n                      (take half-cnt l))))","user":"58c54e2ee4b021aa9917ed3a"},{"problem":27,"code":"(fn [coll] \n  (if (string? coll) \n      (= (apply str (reverse coll)) coll) \n      (= (reverse coll) coll)))","user":"5c13da47e4b01240ff5671a6"},{"problem":27,"code":"(fn b[x] (= (reverse (reverse x)) (reverse x)))","user":"56ef9038e4b04a395b9a0460"},{"problem":27,"code":"(fn f [s] \n  (if (= (apply str s) (apply str (reverse s))) true false))","user":"5ed15e23e4b016b56eae05ba"},{"problem":27,"code":"(fn la [x] (= x \n                (cond\n         (= (type x) java.lang.String) (apply str (reverse x))\n         :else (reverse x))))","user":"53703287e4b0fc7073fd6e8f"},{"code":"(fn [coll]\n  (or (<=  (count coll) 1)\n      (and (= (first coll) (last coll))\n           (recur (rest (butlast coll)))\n  )\n))","problem":27,"user":"50e69c7ce4b0140bc92c0a8b"},{"code":"(fn palindrome \n  [seq] \n  (if (= \n       (if (= java.lang.String (type seq))\n         (reduce str (reverse seq))\n         (reverse seq)) \n       seq)\n    true\n    false))","problem":27,"user":"51f297a3e4b0210f90e74552"},{"problem":27,"code":"(fn [se]\n  (= se (if (= (type se) java.lang.String)\n          (apply str (reverse se))\n          (reverse se))\n     ))","user":"5fa2c9aee4b0f0ebd91b77f7"},{"code":"#(loop [remlist %]\n  (cond\n    (< (count remlist) 2) true ;; empty or single item seq is palindrom\n    (not= (first remlist) (last remlist)) false\n    true (recur (drop-last 1 (next remlist)))))","problem":27,"user":"4fe588b6e4b0e8f79898fec5"},{"code":"#(= (vec %) (vec(reverse %)))","problem":27,"user":"4e399009535deb9a81d77f3f"},{"code":"(fn [s]\n  (= (seq s)\n    (reverse (seq s))))","problem":27,"user":"4eb99b3d535dfed6da9c6d57"},{"problem":27,"code":"(fn palin? [x]\n  (if (string? x)\n    (palin? (seq x))\n    (= x (reverse x))))","user":"57458b82e4b009280f9f2b4e"},{"problem":27,"code":"(fn pal[coll]\n  (cond (= 1 (count coll)) true\n        (empty? coll) true\n        :else (if (= (first coll) (last coll))\n                (pal (rest (butlast coll)))\n                 false\n                )\n\n    )\n  )","user":"53f6bfd9e4b0db01ade6f9e4"},{"code":"#(let [n (/ (count %) 2)] (= (take n %) (reverse (take-last n %))))","problem":27,"user":"4e1350af535d04ed9115e7d8"},{"problem":27,"code":"#(= % (if (string? %) (clojure.string/join (reverse %)) (reverse %)))","user":"5521c33ce4b0882d96d0919a"},{"problem":27,"code":"(fn [in]\n  (let [l (seq in)]\n    (= l (reverse l))))","user":"5746061ae4b009280f9f2b5b"},{"problem":27,"code":"(fn palindrome? [x] (= (reverse x) (seq x)))","user":"5417bc50e4b01498b1a71a0f"},{"code":"(fn is-palindrome [s]\n  (if (< (count s) 2)\n\t true\n\t (and \n\t \t(= (first s) (last s)) \n\t \t(is-palindrome (rest (take (dec (count s)) s)))\n\t )\n\t)\t\n)","problem":27,"user":"4faacc04e4b081705acca201"},{"problem":27,"code":"(fn [col]\n  (let [cols (count col)\n        xsnum (quot cols 2)\n        ysfirst (+ xsnum (rem cols 2))\n        xs (take xsnum col)\n        ys (reverse (nthrest col ysfirst))]\n    (= xs ys)\n   )\n  )","user":"5922f8a9e4b026ae3852128f"},{"problem":27,"code":"(fn [s] (let[s1 s\n             s2 (reverse s)]\n          (if (= (apply str s1) (apply str s2))\n            true\n            false)))","user":"5a6b15e9e4b0512ff01cda32"},{"code":"(fn [coll]\n  (if (or (empty? coll) (= (count coll) 1))\n    true\n    (let [h (first coll), l (last coll)]\n      (if (= h l)\n        (recur (-> coll rest reverse rest reverse))\n        false))))","problem":27,"user":"50a83794e4b054305ba5a831"},{"code":"#(let [c (count %1)] (= (take c %1) (take c (reverse %1))))","problem":27,"user":"4e756736535d7a570dd295c2"},{"code":"#(let [r (reverse %)] (= r (reverse r)))","problem":27,"user":"5315a4f0e4b08068f379ed2e"},{"code":"(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (let [f (first s)\n          l (last s)\n          mid (drop 1 (drop-last s))]\n      \t(and (.equals f l) (palindrome? mid)))))","problem":27,"user":"506b40ade4b0eda3100c0905"},{"problem":27,"code":"(fn [seqn] (= (reverse seqn) (seq seqn)))","user":"5dcace6be4b02b31cc3da3b1"},{"problem":27,"code":"#(let [n (quot (count %) 2)]\n   (= (take n %) (reverse (take-last n %))))","user":"563b1553e4b0bfe05bf1180a"},{"problem":27,"code":"#(= (vec %) (rseq (vec %)) )","user":"558ed227e4b0277789237658"},{"code":"(fn [col]\n  (= (seq col) (reverse (seq col))))","problem":27,"user":"4e7d4544535db169f9c796d0"},{"problem":27,"code":"(fn [pal] \n  (if (string? pal)\n    (= pal (clojure.string/reverse pal))\n\t(= pal (reverse pal))))","user":"5bc6ef7ce4b07a9b28b1009f"},{"code":"(fn palin [seq]\n  (boolean\n   (loop [seq seq\n          rseq (reverse seq)]\n     (cond \n      (empty? seq)\n      true\n      (= (first seq)\n         (first rseq))\n      (recur (rest seq)\n             (rest rseq))))))","problem":27,"user":"516ff477e4b034fe8eaf70f3"},{"problem":27,"code":"(fn palindrome [s]\n (= (seq s) (reverse s)))","user":"606ff56ce4b069485764de21"},{"problem":27,"code":"(fn [coll]\n        (let [n (quot (count coll) 2)\n              [xs ys] (split-at n coll)\n              ys (reverse (if (= (mod (count coll) 2) 0) ys (rest ys)))]\n          (= xs ys)))","user":"5a250b86e4b07f18be40aa19"},{"code":"(fn [x] (let [a (reverse x) b (reverse (reverse x))] (= a b)))","problem":27,"user":"4ea95e56535d7eef30807302"},{"code":"(fn [x]\n  (let [seq (seq x)]\n    (= seq (reverse seq))\n   )\n  )","problem":27,"user":"4e6daa22535d5021c1a895ef"},{"code":"(fn [x] (= (into (list) x) (seq x)))","problem":27,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":27,"code":"#(reduce (fn [a b] (and a b)) (map = % (reverse %)))","user":"551c66dae4b07993ea3788de"},{"problem":27,"code":"(fn [x]\n  (let [y (if (sequential? x) (reverse x) (clojure.string/reverse x) )]\n    (= y x)))","user":"57ec8d1de4b0bfb2137f5b7f"},{"code":"(fn [i]\n  (= (seq i) (seq (reverse i))))","problem":27,"user":"4ed19e90535d44c135fd68d0"},{"code":"(fn [x]\n  (every? \n    (fn [i] (= i true))\n    (map =\n      (seq x) (reverse (seq x)))))","problem":27,"user":"504e3aaae4b0f6ff3350c487"},{"problem":27,"code":"#(= (reverse (into [] %1)) (into [] %1))","user":"5c7f7889e4b0d597f478cae0"},{"code":"(fn [coll]\n  (loop [c coll]\n    (if (< (count c) 2)\n      true\n      (if (= (first c) (last c))\n        (recur (drop-last (rest c)))\n        false))))","problem":27,"user":"5095a0a4e4b087f34d351ab5"},{"problem":27,"code":"(fn [inp] (= (reverse inp) (seq inp)))","user":"54b6c24be4b0ed20f4ff6e7c"},{"problem":27,"code":"(fn [sqnc]\n  (= (seq sqnc) (reverse sqnc)))","user":"566f3e18e4b0a866af6896e7"},{"code":"(fn [coll]\n  \t\t(= coll \n\t\t\t\t(if (string? coll)\n\t\t\t\t\t(apply str (reverse coll))\n\t\t\t\t\t(reverse coll))))","problem":27,"user":"4f4daa4ae4b03ad3f0c10cac"},{"code":"#(= (seq %) (seq (into () %)))","problem":27,"user":"505d70e8e4b0e6aca564be09"},{"problem":27,"code":"(fn [x]\n  (loop [x x\n         result true]\n    (if (= (count x) 0)\n      result\n      (if ( not ( = (first x) (last x)))\n        (not result)\n        (recur ( rest (butlast x)) result )))))","user":"54d529cbe4b0a52adc2e2009"},{"code":";; obj should be a string or sequence\n(fn palindrome? [obj]\n  (= (seq obj) (seq(reverse obj))))","problem":27,"user":"53713ed9e4b0fc7073fd6eaf"},{"problem":27,"code":"#(= (seq %1) (reduce conj '() %1))","user":"553e2cc0e4b0a04f792994e9"},{"problem":27,"code":"(fn palindrome? [p]\n  (loop [p p\n         b (first p)\n         e (last p)]\n    (cond (< (count p) 2) true\n          (not= b e) false\n          :else (recur\n                 (rest (butlast p))\n                 (first p)\n                 (last p)))))","user":"55a12cb1e4b0acc240e3150d"},{"code":"(fn [x]\n  (if (= (reverse (seq x)) (seq x))\n    true\n    false\n  ))","problem":27,"user":"4f942227e4b0dcca54ed6cbe"},{"code":"(fn [s]\n(let [firsteqlast (fn [s] (= (first s) (last s)))]\n  (firsteqlast s)))\n\n;(fn [s] (= (first s) (last s)))","problem":27,"user":"51639d26e4b055933a9ca02e"},{"problem":27,"code":"(fn [seq]\n  (let [reversed (if (instance? String seq)\n                    (apply str (reverse seq))\n                    (reverse seq))]\n    (= seq reversed)\n  )  \n)","user":"5e2efec9e4b05b4b015161fd"},{"code":"#(= (concat %) (reverse %))","problem":27,"user":"4eb9c82d535dfed6da9c6d5c"},{"problem":27,"code":"#(let [x (seq %)]\n   (if (= x (reverse x))\n     true\n     false))","user":"54a627bce4b09f271ff37c83"},{"problem":27,"code":"(fn [ar] (= (reverse ar) (reverse (reverse ar))))","user":"53e4bc2ee4b036ad0777e44d"},{"code":"(fn palindrome? \n  [coll]\n  (let [n (-> (count coll)\n            (/ 2)\n            Math/floor\n            )]\n    (= (take n coll)\n       (reverse (take-last n coll)))))","problem":27,"user":"4fea7594e4b0140c20fb9c06"},{"code":"(fn palin? [arg] (if (or (empty? arg) (== (count arg) 1) ) true (if (not= (first arg) (last arg) ) false (palin? (butlast (rest arg)) )) ))","problem":27,"user":"4f9a0f71e4b0dcca54ed6d04"},{"problem":27,"code":"#(let [i (quot (count  %1) 2)]\n    (= (take i %1)(reverse (drop (- (count %1) i) %1))))","user":"5684e200e4b04eec3ec5cfc4"},{"problem":27,"code":"(fn [t] (= (reduce #(cons %2 %1) [] t) (vec t)))","user":"50d0d2dde4b00b15ecee9768"},{"problem":27,"code":"(fn isPalindrome [x]\n  (if (empty? x)\n    true\n    (if (empty? (rest x))\n      true\n      (if (= (first x) (last x))\n        (isPalindrome (rest (butlast x)))\n        false\n      )\n    )\n  )\n)","user":"5f7251b9e4b02876ed9fd08a"},{"code":"(fn [ls]\n  (get {5 false \\r true :foo true 1 true :c false} (last ls)))","problem":27,"user":"50bb9fefe4b0594b91591c36"},{"problem":27,"code":"(fn [x] (true? (= (reverse (seq x)) (seq x)) ))","user":"567f034be4b0feffd0d18eba"},{"code":"(fn blah [x] (if (empty? x) true (and (= (first x) (last x)) (blah (butlast (rest x))))))","problem":27,"user":"4f17aa97535d64f603146456"},{"code":"(fn [x]\n  (if (or (= 0 (count x)) (= 1 (count x)))\n    true\n  (if (= (first x) (last x))\n    (recur (seq (drop-last (drop 1 x))))\n    false)))","problem":27,"user":"5152020de4b03e678e393ae7"},{"problem":27,"code":"(fn [arr] (= (reverse arr) (seq arr)))","user":"551535cee4b055c2f668d4df"},{"problem":27,"code":"(fn [a] (= (reverse a)  (seq a)))","user":"58273e82e4b051871117bf1b"},{"code":"(fn [coll]\n    (let [split (quot (count coll) 2)]\n    (do\n      (=\n       (take  split coll)\n       (reverse (take-last split coll))\n       ))))","problem":27,"user":"52737333e4b03e8d9a4a747f"},{"problem":27,"code":"(fn ispal [x] (= (seq x) (reverse x)))","user":"5632b0a9e4b0bfe05bf117a8"},{"code":"#(reduce (fn [a b] (and a b)) true (map = % (reverse %)))","problem":27,"user":"4e58dd23535d8a8b8723a298"},{"problem":27,"code":"(fn [arg1]\n      (= (into [] arg1)  (reverse (into [] arg1) )))","user":"5cb6256ce4b026601754b947"},{"problem":27,"code":"(fn\n  [s]\n  (loop [s s]\n    (cond\n      (empty? s) true\n      (not= (first s) (last s)) false\n      :else (recur (drop-last (drop 1 s)))\n      )\n    )\n  )","user":"5bc60a65e4b07a9b28b10082"},{"code":"#(= % (if (string? %) (apply str (vec (reverse %))) (reverse %)))","problem":27,"user":"52f89125e4b047fd55836fd4"},{"code":"(fn [x] (if (string? x) (= (clojure.string/reverse (str x)) x)  (= (reverse x) x)) )","problem":27,"user":"527c045fe4b03e8d9a4a75a8"},{"code":"#(let [rv (reverse %)]\n  (= % (if (string? %) (apply str rv) rv)))","problem":27,"user":"508b95a0e4b0be79e5b189c6"},{"problem":27,"code":"(fn [s] (= (seq s) (reduce (fn [acc x] (conj acc x)) '() s)))","user":"59b93cd7e4b0a024fb6ae3c7"},{"problem":27,"code":"(fn p [s] (= (seq s) (reverse s)))","user":"53b39d82e4b047364c0444a6"},{"problem":27,"code":"(fn [test-str]\n\t(let [cmp-length (quot (count test-str) 2)]\n\t\t(= (take cmp-length test-str) (reverse (take-last cmp-length test-str)))))","user":"572f09f2e4b0cd1946bd0f94"},{"problem":27,"code":"(fn a[x] ( if ( empty? x ) true ( if (= (str (first x)) (str (last x )) ) ( a ( drop 1 ( drop-last 1 x ) ) ) false  ) ) )","user":"5b3aa98be4b02d533a91bbca"},{"problem":27,"code":"(fn palindrome? [x] ( if( or (= (count x) 1) (= (count x) 0) ) true \n                     (and (= (last x) (first x)) (palindrome?(rest (butlast x))))))","user":"54d0cedde4b0e8a36923e5d2"},{"code":"(fn rev [xs]\n  (= \n    (seq xs)\n    (reverse xs)))","problem":27,"user":"4e4c238f535dc968683fc4dc"},{"code":"(fn f [coll] (if (< (count coll) 2) true (and (= (first coll) (last coll)) (f (-> coll rest butlast)))))","problem":27,"user":"4ecbafbf535df97575fdabde"},{"problem":27,"code":"(fn [thing] \n  (-> thing (reverse)(= (reverse (reverse thing)))))","user":"5feb6850e4b05ac5b16ea1b8"},{"problem":27,"code":"(fn [coll]\n  (let [rev-coll (reverse coll)]\n    (every? true? (map = coll rev-coll))))","user":"60a42199e4b00e9e6653c454"},{"code":"(fn [x]\n  (let [cnt (count x) half (quot (count x) 2)]\n    (if (even? cnt)\n      (= (take half x) (reverse (drop half x)))\n      (= (take half x) (reverse (drop (+ 1 half) x))))))","problem":27,"user":"4ef6e689535dced4c769f24f"},{"code":"(fn pali [x]\n  (if (empty? x)\n    true\n    (if (= (first x) (last x))\n      (pali (butlast (rest x)))\n      false)))","problem":27,"user":"5024d54fe4b07ca75732c81f"},{"problem":27,"code":"(fn [a]\n  (= a (if (string? a)\n         (clojure.string/reverse a)\n         (reverse a))))","user":"5bbcb71ce4b0a20761a23629"},{"problem":27,"code":"(fn pal [xs]\r\n  (if (< 0 (count xs))\r\n    (= (str (first xs)) (str (last xs)))\r\n    (if (= (str (first xs)) (str (last xs)))\r\n      (recur (drop (drop-last xs)))\r\n      false)))","user":"56b12c53e4b0982f16b37de6"},{"code":"(fn\r\n  [coll]\r\n\t(let [cnt (/ (count coll) 2)\r\n\t\t\trecoll (reverse coll)]\r\n\t\t(loop [x 0]\r\n\t\t\t(if (> x cnt)\r\n\t\t\t\ttrue\r\n\t\t\t\t(if (= (nth coll x) (nth recoll x))\r\n\t\t\t\t\t(recur (inc x))\r\n\t\t\t\t\tfalse)))))","problem":27,"user":"4edbae0d535d10e5ff6f531c"},{"code":"#(if (= % (if (string? %) (apply str (reverse %)) (reverse %))) true false)","problem":27,"user":"51cd75d6e4b02254fc79488c"},{"problem":27,"code":"(fn [x]\n      (= (seq x) (reverse x)))","user":"594ea2a4e4b07ddc2dafaeb6"},{"problem":27,"code":"#(loop [a %]\n\t(let [c (count a)]\n\t\t(if (or (= c 0) (= c 1))\n\t\t\ttrue\n\t\t\t(if (= (first a) (last a))\n\t\t\t\t(recur (->> a (take (- c 1)) (drop 1)))\n\t\t\t\tfalse))))","user":"57ccedaae4b0c746388ab88e"},{"code":"(fn [col] \n  (= (seq col)\n     (reverse col)\n  )\n)","problem":27,"user":"5041b3c0e4b06d8231e4facf"},{"code":"#(= (reverse (seq %)) (seq %) )","problem":27,"user":"50293245e4b08353e5d459cf"},{"code":"#( = (seq %) (reverse( seq % ) ) )","problem":27,"user":"51aa4eede4b04e3dc0c27b25"},{"code":"(fn [list]\n  (loop [coll (into () list) newcoll (vector)]\n    (if (or (nil? coll) (empty? coll))\n      (= newcoll (vec list))\n      (recur (next coll) (conj newcoll (first coll))))))","problem":27,"user":"524e9918e4b0541d1855b7e6"},{"code":"#(= (seq %) (rseq (vec %)))","problem":27,"user":"4e6e6630535d5021c1a89609"},{"problem":27,"code":"#(reduce\n           (fn [prev [s1 s2]] (and prev (= s1 s2)))\n           true\n           (map vector (seq %) (reverse (seq %))))","user":"524bc937e4b09eba1c0223ee"},{"problem":27,"code":"(fn [y] (= (seq y) (reverse (seq y))))","user":"59f4d0e0e4b0966464fe6ab9"},{"code":"#(let [listified (into '() %)] (= (reverse listified) listified))","problem":27,"user":"523b4e91e4b07becd5be21ef"},{"problem":27,"code":"(fn [li]\n  (loop [nl li, rl li]\n    (if (empty? nl)\n      true\n      (if (not= (first nl) (last rl))\n        false\n        (recur (rest nl) (butlast rl))\n       )\n     )\n   )\n )","user":"588fb3a7e4b00487982d51b9"},{"problem":27,"code":"(fn f [seq]\n  (if (= (first seq) nil)\n    true\n    (and (= (first seq) (last seq))\n         (f (rest (drop-last seq))))))","user":"589f37e0e4b02bd94d917e79"},{"problem":27,"code":"(fn [palin]\n  (let [\n     drome (seq palin)\n     len (count drome)\n     sublen (quot len 2)\n     part1 (take sublen drome)\n     part2 (reverse \n      (nthrest drome\n       (+ sublen (if (even? len)\n                      0 1))))    \n    ]\n   (= part1 part2)))","user":"5627444fe4b00e49c7cb47cd"},{"problem":27,"code":"(fn palindrome [str] (if (< (count str) 2)\n                         true\n                         (and\n                           (= (first str) (last str))\n                           (palindrome (\n                                        (comp\n                                          (partial drop 1)\n                                          (partial drop-last 1))\n                                        str\n                                        )\n                                       )\n                           )\n                         ))","user":"5fe85417e4b05ac5b16ea194"},{"problem":27,"code":"(fn [x] \n  (= \n   (seq x) \n   (reverse x)))","user":"55bb3f89e4b01b9910ae29e2"},{"problem":27,"code":"(fn f1 [l]\n    (println l)\n    (let [a (first l)\n          b (last l)\n          c (count l)]\n        (cond\n            (or (= c 1) (= c 0)) true\n            (or (< c 0) (not= a b)) false\n            :else (recur (->> l (drop-last 1) (drop 1))))))","user":"5f30296fe4b0574c87022c22"},{"code":"#(= (reverse (vec %)) (vec %))","problem":27,"user":"4e6a5a32535d8ccf87e9fed0"},{"problem":27,"code":"#(let [x (into [] %)] (= (rseq x) x))","user":"52ea7d3ae4b09f7907dd14bf"},{"problem":27,"code":"(fn [a]\n  (= (reverse a) (reverse (reverse a))))","user":"57befca6e4b05aa3c4741c70"},{"problem":27,"code":"(fn [coll]\n  (if (seq coll)      \n    (if (= (first coll) (last coll))\n      (recur (butlast (rest coll)))\n      false)\n  \ttrue))","user":"540e97f9e4b0addc1aec671f"},{"code":"(fn [lst]\n  (= (reverse lst) (seq lst)))","problem":27,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":27,"code":"#(loop [x %] (if (> (count x) 1) (if (= (first x) (last x)) (recur (rest (butlast x))) false) true))","user":"570bb66de4b0b0fb43fd06c2"},{"problem":27,"code":"(fn [pal]\n    (= (reverse pal) (reverse (reverse pal))))","user":"500d3160e4b05f7c30cfa6a1"},{"code":"(fn palyn [l] \n  (cond\n\t\t(empty? l) \n\t\t\ttrue\n\t\t(empty? (rest l)) \n\t\t\ttrue\n    (= (first l) (first (reverse l))) \n    \t(palyn (butlast (rest l)))\n    :else false\n  )\n)","problem":27,"user":"5001dd97e4b0678c553fc421"},{"code":"(fn palindrome2 [xs]\n  (= (reverse xs) (reverse (reverse xs))))","problem":27,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn [data]\n  (let [ls (apply list data)]\n    (= (reverse ls) ls)))","problem":27,"user":"5336ca32e4b0e30313ee6c80"},{"problem":27,"code":"(fn [s]\n  (= s\n     (if (string? s) \n       (clojure.string/reverse s)\n       (reverse s))))","user":"5508a292e4b06e50f9beb10f"},{"problem":27,"code":"(fn [s] (let [a (reverse s)] (= (seq s) a)))","user":"4e6a51a8535d8ccf87e9fec7"},{"code":"#(= (map identity %1) (reverse %1))","problem":27,"user":"506afdafe4b0a2a5463de37e"},{"code":"(fn [s]\n    (let [r (reverse s)\n          s (seq s)]\n      (= s r))\n    )","problem":27,"user":"4f16213f535d64f603146449"},{"code":"#(every? (fn [[x y]] (= x y))\n         (map (fn [x y] [x y])\n              %\n              (reverse %)))","problem":27,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn p [s]\n  (or (empty? s) (= 1 (count s))\n      (and (= (first s) (last s))\n           (p (rest (butlast s))))))","problem":27,"user":"4fa0b333e4b0dcca54ed6d50"},{"code":"(fn palandrome [x]\n  (cond (or (= (count x) 1) (= (count x) 0)) true\n        (not= (first x) (last x)) false\n        :else (palandrome (-> x rest butlast))))","problem":27,"user":"51c330a9e4b0851ac09658f2"},{"code":"(fn [x] \n  (letfn [ (r [x] (if (string? x) (apply str (reverse x)) (reverse x))) ]\n  (= x (r x))))","problem":27,"user":"4dd1de4d535dae65d5c462d7"},{"problem":27,"code":"(fn f [x] (\n\t\tif (= () x)\n\t\t\ttrue\n\t\t\t(if (= (last x) (first x)) \n\t\t\t\t(f (rest (butlast x))) \n\t\t\t\tfalse\n\t\t\t)\n\t\t\t\n\t\t)\n\t)","user":"575dda55e4b02ea11479938c"},{"problem":27,"code":"(fn [ls]\n  (= (seq ls) (reverse ls)))","user":"58a58c50e4b01a0c0b232914"},{"problem":27,"code":"(fn [s1] (= (reverse (seq s1)) (seq s1)))","user":"591f9a1fe4b09b4ee5954c4f"},{"code":"(fn [x]\n  (every? (fn [[a b]] (= a b))\n   (partition 2 (interleave x (reverse x)))))","problem":27,"user":"50052fd0e4b0678c553fc45d"},{"problem":27,"code":"#(= \n  (reverse (apply list %))\n  (apply list %))","user":"5bfada5ee4b0bdcf453d15d2"},{"code":"(fn [coll]\r\n   (let [rc (reverse coll) n (count coll)]\r\n     (every? identity \r\n       (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))","problem":27,"user":"50ab44b2e4b0f65d68208509"},{"problem":27,"code":"#(every? (fn [v] (= (first v) (last v))) (map list % (reverse %)))","user":"545ddb57e4b01be26fd74677"},{"code":"(fn fbpalindrome [coll]\n (if (false? (= (first coll) (last coll)))\n  false\n  (if (next (drop-last coll))\n  true\n  (recur (next (drop-last coll))))))","problem":27,"user":"4e70c0b1535d5021c1a89640"},{"problem":27,"code":"(fn [value] (= (seq value) (reverse value)))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":27,"code":"#(let[coll (into [] %)] (= (reverse coll) coll))","user":"51671557e4b013fc800656c4"},{"code":"(fn [s] (=\n  ((fn [s]\n    (if (string? s)\n        (apply str (reverse s))\n        (reverse s)))\n    s)\n  s)\n)","problem":27,"user":"4e3ac1b2535deb9a81d77f4c"},{"code":"(fn paildrome? [arg]\n  (let [l (count arg), s (quot l 2)] \n    (= (take s arg) (reverse (take-last s arg)))))","problem":27,"user":"52ee0de4e4b05e3f0be25ec1"},{"problem":27,"code":"(fn my-pali? [v]\n  (condp = (count v)\n    1 true\n    0 true\n    (and (= (first v) (last v))\n               (my-pali? (butlast (next v))))))","user":"5622af0fe4b03f08ee9a922b"},{"problem":27,"code":"(fn [what] \n  (= (reverse what) ((comp reverse reverse) what)))","user":"54d0f654e4b0e8a36923e5d6"},{"code":"(fn palindrome?\n  [coll]\n  (if (seq coll)\n    (and (= (first coll) (last coll))\n         (palindrome? (butlast (next coll))))\n    true))","problem":27,"user":"511b233ae4b07ab9ec456180"},{"problem":27,"code":"(fn  [lat]\n  (if (string? lat) (= lat (apply str (reverse lat)))\n      (= lat (reverse lat))))","user":"5b55b15ae4b02d533a91bd35"},{"code":"(fn [s] (every? true? (map = s (reverse s))))","problem":27,"user":"4eb2e6ca535d7eef3080734f"},{"code":"(fn [inp]\n  (= inp (if (string? inp)\n           (clojure.string/join \"\" (reverse inp))\n           (reverse inp))))","problem":27,"user":"52cf084ce4b07d0d72b27399"},{"problem":27,"code":"(fn [maybe-pali]\n  (let [s (seq maybe-pali)]\n    (= s (reverse s))))","user":"5c7c78c9e4b0d597f478ca94"},{"code":"(fn palindrome [s] (if (empty? s) true (if (= (first s) (last s)) (palindrome (rest (drop-last s))) false)))","problem":27,"user":"529d4f4be4b04e0c58e87b79"},{"code":"(fn drome [x]\n  (if (= x '())\n    true\n    (if (= (first x) (last x))\n      (drome (rest (take (dec (count x)) x)))\n      false\n      )\n   )\n  )","problem":27,"user":"52127ee4e4b0d32679a5063c"},{"problem":27,"code":"(fn [input]\n  (let [collection (seq input)]  \n  (= \n    collection\n    (reduce conj '() collection)) ) )","user":"56d9883ae4b0ea9b8538f7f4"},{"code":"(fn [seq]\n  (let [mid (Math/floor (/ (count seq) 2))\n        first_half (take mid seq)\n        last_half (take-last mid seq)]\n  (= first_half (reverse last_half)))\n)","problem":27,"user":"50ba5084e4b03e68e4411c7c"},{"problem":27,"code":"(fn [xs]\n  (if (string? xs)\n    (= (apply str (reverse xs)) xs)\n    (= (reverse xs) xs)))","user":"51b8d3d5e4b050a1176cd69d"},{"problem":27,"code":"#(loop [s %]\n   (cond\n    (empty? s) true\n    (= (first s) (last s)) (recur (rest (drop-last s)))\n    :else false))","user":"55fd9dffe4b07755b13145fa"},{"problem":27,"code":"(fn \n  [seq]\n  (and (reduce = (map = seq (reverse seq)))) (= (first seq) (first (reverse seq))))","user":"566f7749e4b0a866af6896e9"},{"problem":27,"code":"(fn palindrome? [x]\n  (if (< (count x) 2) true\n    (and (= (first x) (last x))\n         (palindrome? (rest (butlast x))))))","user":"53bc279ae4b047364c04450e"},{"code":"#(if (<= 2 (count %))\n\t(= (first %) (last %))\n\t(recur (drop 1 (drop-last %)))\n)","problem":27,"user":"53858d5be4b06839e8705f06"},{"code":"#(= (reverse (reverse %)) (reverse %))","problem":27,"user":"4e14108c535d04ed9115e7dd"},{"problem":27,"code":"(fn [sq]\n   (= (seq sq) (reverse sq)))","user":"602b90c1e4b0d5df2af22266"},{"problem":27,"code":"(fn palindrom\n  [xs]\n  (if (= (apply str (reverse xs)) (apply str xs)) true false))","user":"56784adbe4b05957ce8c6176"},{"problem":27,"code":"(fn [seq]\n          (if (string? seq)\n            (= seq (apply str(reverse seq)))\n            (= seq (reverse seq))))","user":"5d4c4de9e4b0776584bd6f2f"},{"problem":27,"code":"; #(= % (if (string? %) (clojure.string/join \"\" (reverse %)) (reverse %)))\n\n#(= (seq %) (reverse %))","user":"5f6a583ae4b02876ed9fd046"},{"code":"#(if (string? %) \n    (= % (clojure.string/reverse %))\n    (= % (reverse %)))","problem":27,"user":"515ebde3e4b01e5d11ccd0a8"},{"problem":27,"code":"(fn[sq] (= (reverse (reverse sq)) (reverse sq)))","user":"55f9d870e4b03cbcff9738cc"},{"code":"(fn pdd [p]\n  (if (< (count p) 2) true\n    (if (= (first p) (last p)) (pdd (rest (butlast p))) false)))","problem":27,"user":"509dc716e4b08df8156e9e27"},{"code":"(fn [coll] (if (string? coll) \n              (= coll (apply str (reverse coll)))\n            (= coll (reverse coll))))","problem":27,"user":"4e4bf20e535dc968683fc4d9"},{"problem":27,"code":"(fn pldr [x] (if (<= (count x) 1)\n    true\n    (and\n      (= (first x) (last x))\n      (pldr (butlast (rest x))))))","user":"544285dde4b032a45b869380"},{"code":"(fn pal [x]\n    (if \n      (= '() (rest x))\n      true \n      (if \n        (= (first x) (last x))\n        (pal (butlast (rest x)))\n        false\n      )\n    )\n)","problem":27,"user":"4e9d6a65535dbda64a6f6b87"},{"code":"(fn [items]\n  (loop [_items items]\n    (if (empty? _items)\n      true\n      (if (not= (first _items) (last _items))\n        false\n        (recur\n          (rest (butlast _items))\n        )  \n      )\n    )\n  )\n)","problem":27,"user":"4fe4cefce4b0e8f79898febd"},{"problem":27,"code":"(fn [input]\n   (= (seq input) (reverse input)))","user":"5dba063ee4b010eb3c36cd5c"},{"problem":27,"code":"(fn palindrome [x]\n  (if (string? x)\n  (= (apply str (reverse x)) x)\n  (= (reverse x) x)))","user":"52f3a2afe4b05e3f0be25f13"},{"problem":27,"code":"(fn [coll]\n  (loop [coll coll]\n    (if (empty? coll)\n      true\n      (if (= (first coll) (last coll))\n        (recur (rest (drop-last coll)))\n        false))))","user":"57861b0ce4b0ebec4cfb74ef"},{"code":"(fn [x]\n  (if (= (reverse (vec x)) (vec x)) true false))","problem":27,"user":"502aac6ae4b0614b52996118"},{"problem":27,"code":"(fn [collection]\n  (let [col (seq collection)]\n    (= col (reverse col))))","user":"5b94c507e4b0c0b3ffbd4a5a"},{"code":"(fn palindromic? [p]\n  (let [it (seq p)]\n    (cond\n     (= it '()) true\n     (nil? it) true\n     (not= (first it) (last it)) false\n     :else (palindromic? (drop-last (rest it))))))","problem":27,"user":"50e0e18ce4b0090303771ba9"},{"problem":27,"code":"#(if (string? %)\n    (=  (str %) (clojure.string/reverse (str %)))\n    (= % (reverse %)))","user":"5f77d470e4b02876ed9fd0be"},{"code":"(fn [x] (= (reverse (seq x)) (seq x)))","problem":27,"user":"4e52654b535d302ef430da73"},{"problem":27,"code":"(fn pd [sq] \n  (if (empty? sq) true\n    (and (= (first sq) (last sq)) (pd (drop 1(drop-last sq))))\n  ))","user":"55815973e4b05c286339e0f6"},{"problem":27,"code":"(fn is-palindrome [xs]\n  (= (apply list xs)\n     (reverse xs)))","user":"59f7f55de4b0ca45a743a313"},{"code":"#(=\n  (let [reversed (reverse %)]\n    (if (char? (first reversed))\n      (apply str reversed)\n      reversed)) %)","problem":27,"user":"52271a85e4b04e78ff2e19a7"},{"problem":27,"code":"#(= (reverse  %) (seq %))\n ;(reverse \"racecar\")=> (\\r \\a \\c \\e \\c \\a \\r)\n;(seq \"racecar\")=> (\\r \\a \\c \\e \\c \\a \\r)","user":"5822e082e4b04b46fc4b0fa9"},{"problem":27,"code":"(fn [coll] \n    (= (seq coll) (reverse coll)))","user":"55465b20e4b0a04f7929953b"},{"problem":27,"code":"(fn pal [seq] (if (< (count seq) 2) true (and (= (first seq) (last seq)) (pal (drop 1 (butlast seq))))))","user":"5ec7550ce4b08d0ec38692dd"},{"code":"(fn [x] (let [rvs (reverse x) n (count x)](\n  every? identity (\n    map #(= (nth rvs %) (nth x %)) (range (/ (dec n) 2)))\n  )\n))","problem":27,"user":"4ee1220b535d10e5ff6f5354"},{"problem":27,"code":"#(loop [x1 0 x2 (dec (count %))]\n   (if (>= x1 x2)\n     true\n     (if (= (nth % x1) (nth % x2))\n       (recur (inc x1) (dec x2))\n       false)))","user":"57cc5a79e4b0c746388ab87d"},{"code":"#( if (string? %)\n    (= (str %) (reduce str (reverse %)))\n    (= % (reverse %)))","problem":27,"user":"52fa4f48e4b047fd55836ff7"},{"problem":27,"code":"(fn pndrm [sq]\n  ( case (count sq)\n      1 true\n      2 (=  (last sq) (first sq))\n      (if (not= (first sq) (last sq) )\n        false\n       (pndrm (rest (drop-last sq) ) ) \n      )\n )\n)","user":"5a6a436de4b0512ff01cda24"},{"problem":27,"code":"#(if (= (seq %) (reverse %))\n    true\n    false)","user":"5a58da38e4b05d388ecb6c8b"},{"problem":27,"code":"(fn [arg]\n  (if (string? arg)\n    (= arg (apply str (reverse arg)))\n    (= arg (reverse arg))))","user":"56d72e14e4b0ea9b8538f7d6"},{"problem":27,"code":"(fn palindrome [obj]\n  (= (apply str obj) (apply str (reverse obj))))","user":"552689cfe4b0ffed3738f91e"},{"problem":27,"code":"(fn [arg] (loop [x arg] (if (or (empty? x) (empty? (rest x))) true (do (if (= (first x) (last x)) (recur (drop-last (drop 1 x))) false)))))","user":"57e572b5e4b0bfb2137f5ad7"},{"code":"(fn [v] (= (vec v) (reverse (vec v))))","problem":27,"user":"4ff5c077e4b0678c553fc36f"},{"problem":27,"code":"(fn palindrome\n  [lst]\n  (let [lst     lst\n        revlst  (reverse lst)\n        result  (filter false? (map (fn [x y] (if (= x y) true false)) lst revlst))\n        result2 (if (empty? result) true false)]\n    result2))","user":"5c7dad57e4b0d597f478caba"},{"code":"(fn pal [l] \n  \t(if (> (count l) 1)\n\t\t\t(and \n\t\t\t\t(= (first l) (last l))\n\t\t\t\t(pal (next (butlast l)))\n\t\t\t)\n\t\t\t(and true)\n\t\t)\n\t)","problem":27,"user":"4f3bfce2e4b0e243712b1f38"},{"code":"(fn palindrome? [n]\n  (if (nil? n)\n    true\n    (if (= (first n) (last n))\n      (palindrome? (butlast (rest n)))\n      false)))","problem":27,"user":"5338387de4b0e30313ee6c91"},{"problem":27,"code":"(fn [s] (every? true? (map (fn [%1 %2] (= %1 %2)) s (reverse s))))","user":"58983e3fe4b00487982d52ce"},{"problem":27,"code":"#(nil? (some (partial = false) (map = % (reverse %))))","user":"55645592e4b0c656e3ff1802"},{"problem":27,"code":"#(= (reverse %)(map identity %))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":27,"code":"(fn [sequence]\n  (let [v (vec sequence)\n        l (count v)]\n    (if (odd? l)\n      (let [m (inc (/ l 2))\n            a (subvec v 0 m)\n            b (subvec v (dec m))]\n        (if (= a (reverse b))\n         true\n         false))\n      (let [m (/ l 2)\n            a (subvec v 0 m)\n            b (subvec v m)]\n        (if (= a (reverse b))\n          true\n          false)))))","user":"5b8162d0e4b047b03b20378b"},{"problem":27,"code":"(fn palin [s1]\n  (let [rs1 (reverse s1)]\n    (loop\n      [[f1 & r1] s1\n       [f2 & r2] rs1]\n      (if (not (= f1 f2))\n        false\n        (if (= f1 nil)\n          true\n          (recur r1 r2)\n        )))))","user":"5ebb4751e4b00a66d4a95262"},{"problem":27,"code":"(fn [x]\n  (if (= (class x) java.lang.String)\n      (= (clojure.string/reverse x) x)\n      (= (reverse x) x)\n   )\n)","user":"56f4b753e4b046a417f92061"},{"problem":27,"code":"(fn [s]\r\n  (let [a (reverse s)]\r\n    (let [b (reverse a)]\r\n      (= a b))))","user":"546e1142e4b00cfc9eacc199"},{"problem":27,"code":"#(if (string? %) \n\t(= % (apply str (reverse (seq %))))\n\t(= % (reverse %)))","user":"56bb9ccce4b0f26550335959"},{"code":"(fn [x]\n  (if (= java.lang.String (type x))\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))","problem":27,"user":"4e7e8694535db169f9c79718"},{"problem":27,"code":"(fn palindrome?\n  [s]\n  (= (reverse s) (reverse (reverse s))))","user":"58f7dfe6e4b0438e51c2cf1f"},{"problem":27,"code":"#(= (apply conj [] %) (apply conj '() %)) ; without reverse","user":"55fc07d3e4b0f488688e066e"},{"problem":27,"code":"(fn [coll]\n  (if (coll? coll)\n    (= coll (reverse coll))\n    (let [string-list (map (fn [x] (str \"\" x)) coll)]\n      (= string-list (reverse string-list)))))","user":"591072e0e4b0163c97b36ebc"},{"problem":27,"code":"(fn [s]\n  (loop [original s\n         reversed (reverse s)]\n    (if (and (empty? original) (empty? reversed))\n      true\n      (if (= (first original) (first reversed))\n        (recur (rest original) (rest reversed))\n        false))))","user":"53fc5ec2e4b0de5c4184859e"},{"code":"(fn [s] (let [rv (reverse (vec s))\n              cnt (/ (count rv) 2)\n              s1 (take cnt (vec s))\n              s2 (take cnt rv)]\n          (= s1 s2 )) )","problem":27,"user":"5022292ee4b0846bc458ae46"},{"code":"#(= (-> % reverse vec) (vec %))","problem":27,"user":"52bdf6bde4b07a9af579230d"},{"problem":27,"code":"#(= (take (quot (count %) 2) %)\n      (reverse (take-last (quot (count %) 2) %)))","user":"5bc8c033e4b07a9b28b100ca"},{"code":"(fn palindrome? [xs] (if (<= (count xs) 1) true (and (= (first xs) (last xs)) (palindrome? (drop 1 (drop-last 1 xs))))))","problem":27,"user":"53028354e4b0d8b024fd372b"},{"problem":27,"code":"(fn palindrome? [coll]\n  (every?\n    (fn [[a b]] (= a b))\n    (map vector coll (reverse coll))))","user":"4eb9d8e0535dfed6da9c6d60"},{"problem":27,"code":"(fn is-palindrome\n   [seq]\n   (if (<= (count seq) 1)\n     true\n     (and (= (first seq) (last seq)) (is-palindrome (drop 1 (drop-last 1 seq))))))","user":"5c6d0e51e4b0fca0c1622735"},{"problem":27,"code":"(fn palindrome [seq]\n                   (loop [f-seq seq r-seq (reverse seq)]\n                     (println f-seq r-seq)\n                     (if (empty? f-seq)\n                       true\n                       (if (= (first f-seq) (first r-seq))\n                         (recur (rest f-seq) (rest r-seq))\n                         false\n                         ))))","user":"52ade380e4b0c58976d9ac9b"},{"problem":27,"code":"(fn palindrome? [x]\n  (if (>= (count x) 1)\n    (and (= (first x) (last x)) (palindrome? (rest (butlast x))))\n    true))","user":"579563ffe4b0e215f87e847e"},{"code":"(fn [s]\n  (loop [s s]\n  (let [f (first s)\n        l (last s)]\n    (cond\n      (empty? s) true,\n      (not (= f l)) false,\n      :else (recur (drop 1 (drop-last s)))))))","problem":27,"user":"4f856adfe4b033992c121c44"},{"problem":27,"code":"#(loop [remainder %] (if (empty? remainder)\n                         true\n                         (if (not= (first remainder) (last remainder))\n                             false\n                             (recur (rest (drop-last remainder)))\n                         )\n                      )\n )","user":"5990fcb9e4b0866487ed0d5b"},{"problem":27,"code":"(fn \n  [sqnc] \n  (= \n   (seq sqnc) \n   (reverse (seq sqnc))))","user":"57d6c5cae4b0bd073c2023ce"},{"code":"#( let [reversed (reverse %)] \n   (if (string? %) (= % (apply str reversed))\n                  (= % reversed)))","problem":27,"user":"52d019ede4b07d0d72b273b6"},{"code":"(fn [s] (loop [i 0 j (- (count s) 1)]\n  (if (<= j i)\n    true\n    (if (not (= (nth s i) (nth s j)))\n      false\n      (recur (+ i 1) (- j 1))))))","problem":27,"user":"4e951f2c535dbda64a6f6b2f"},{"code":"(fn [for]\n  (let [rev (reverse for)]\n    ((fn palindrome? [x y]\n        (cond\n           (empty? x) true\n           (= (first x) (first y))\n              (palindrome?\n                  (rest x) (rest y))\n           true false))\n      for rev)))","problem":27,"user":"4f03818e535dcb61093f6b00"},{"problem":27,"code":"(fn palindrome?\n    [x]\n    (if (string? x)\n        (= x (apply str (reverse x)))\n        (= x (reverse x))))","user":"5cb4e764e4b026601754b929"},{"problem":27,"code":"(fn [lst]\n  (let [pos (apply list lst)\n        neg (reverse pos)]\n    (= pos neg)))","user":"591f05b4e4b09b4ee5954c42"},{"problem":27,"code":"(fn my-test [x]\n  (= (seq x) (reverse x)))","user":"566e5a03e4b0a866af6896d8"},{"code":"(fn [coll]\n  (let [rev (if (string? coll)\n                clojure.string/reverse\n                reverse)]\n    (= coll (rev coll))))","problem":27,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [l] (reduce (fn [x y] (and (true? x) (true? y))) (map (fn [s] (= s (nth (seq l) (- (dec (count l)) (.indexOf (seq l) s))))) (seq l))))","problem":27,"user":"533cebf1e4b085b17e897d78"},{"problem":27,"code":"#(let [s (vec %) rs (rseq s)] (loop [s s rs rs] (cond (and (empty? rs) (empty? rs)) true :else (and (= (first s) (first rs)) (recur (rest s) (rest rs))))))","user":"53d28800e4b00fb29b22131e"},{"problem":27,"code":"(fn is-pal [s] (= (reverse s) (seq s)))\n\n;; elegant solution: #(= (seq %) (reverse %))","user":"5fb68f09e4b08cb800c85b58"},{"code":"#(if-not (coll? %) \n  (= (apply str (reverse %)) %)\n  (= (reverse %) %))","problem":27,"user":"52a144b0e4b04e0c58e87bd6"},{"problem":27,"code":"(fn [seq]\n  (loop [xs seq]\n    (if (<= (count xs) 1)\n      true\n      (if (not= (first xs) \n                (last xs))\n        false\n        (recur (butlast (rest xs)))))))","user":"5e0ceca5e4b099d064962f91"},{"problem":27,"code":"(fn [x]\n         (let [reversed (if (string? x)\n                          (apply str (reverse x))\n                          (reverse x))]\n           (= reversed x)))","user":"538f89bbe4b0b51d73faae8f"},{"code":"(fn palindrome? [s]\n  (or (<= (count s) 1)\n    (and (= (first s) (last s))\n      (palindrome? (rest (butlast s))))))","problem":27,"user":"4e6a2503535d8ccf87e9fea2"},{"code":"(fn ispal[c] (= (reverse (reverse c)) (reverse c)))","problem":27,"user":"4ec17677535dfed6da9c6dad"},{"problem":27,"code":"(fn [x]\n  (loop [what x]\n    (cond (empty? what) true\n          (= (first what) (last what)) (recur (rest (butlast what)))\n          :else false)))","user":"57936970e4b0e215f87e8458"},{"code":"(fn [x] ( = (seq x) (reverse (seq x))))","problem":27,"user":"4fccdc75e4b0ee37620e186d"},{"problem":27,"code":"(fn [x] (if (= (seq x) (reverse x))\n          true\n          false))\n\n;;; seq hace un list hasta los strings","user":"6075c214e4b069485764de5b"},{"code":"#(= % (if(string? %)(apply str (reverse %))(reverse %)))","problem":27,"user":"524fafb3e4b0541d1855b817"},{"code":"(fn [a] \n  (= (seq a) (reverse a)))","problem":27,"user":"50295775e4b0b33e9bf6fdf2"},{"code":"#( if (instance? String %) \n       (= % (clojure.string/reverse %))\n       (= % (reverse %)))","problem":27,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"#(= % \n  (if (string? %)\n      (apply str (reverse %) )\n      (reverse %)\n    )\n )","problem":27,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":27,"code":"(fn pal? [s]\n  (let [thelist (seq s)] \n    (if (> (count thelist) 1)\n      (and (= (first thelist) (last thelist)) (pal? (butlast (rest thelist))))\n      true\n    )\n  )\n)","user":"54165291e4b01498b1a719fb"},{"code":"#(loop [c %]\n (if (or (empty? c) (= (count c) 1))\n  true\n  (if (not= (first c) (last c))\n    false\n    (recur (rest (butlast c))))))","problem":27,"user":"506e9464e4b09350ab4199f0"},{"problem":27,"code":"(fn [coll]\n    (if (string? coll)\n      (= coll (apply str (reverse coll)))\n      (= (reverse coll) coll)))","user":"5e5fa1ffe4b0fd0acd15867d"},{"code":"(fn palindrome [c]\n   (cond (empty? c) true \n     (= (first c) (last c)) (palindrome (rest (drop-last c)))\n     :else false))","problem":27,"user":"4ef89fb0535dced4c769f260"},{"code":"(fn [x] (if (= (class x) java.lang.String) (= x (clojure.string/reverse x)) (= x (reverse x))))","problem":27,"user":"534db51be4b084c2834f4aa6"},{"code":"(fn [xs] \n  (= (seq xs) (seq (reverse xs))))","problem":27,"user":"514677dce4b04ef915e3731a"},{"problem":27,"code":"#(= % (if (string? %) % (reverse %)))","user":"54021f13e4b0df28a13c62cc"},{"code":"(fn [x] (if (= (first x) (last x)) true false))","problem":27,"user":"4ff6ed6ae4b0678c553fc384"},{"problem":27,"code":"(fn palindrome_detector\n  [lst]\n  (loop [lst lst\n         result false]\n    (if (not= (first lst) (last lst)) result\n\n      (recur (concat (drop 1 lst) (take 1 lst)) true ) )))","user":"5bbbd077e4b0a20761a23615"},{"problem":27,"code":"(fn [x]                                                           \n  (= (reverse (reverse x)) (reverse x)))","user":"564cc055e4b0284900eef676"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n  \t(= x (apply str (reverse x)))\n    (= x (reverse x))))","user":"5e18c885e4b0dc95940084fc"},{"code":"(fn [as]\n  (let [as (seq as)]\n    (= as (reverse as))))","problem":27,"user":"516abecae4b081287f204e9f"},{"problem":27,"code":"#(= (if (= (type %) java.lang.String)\n     (apply str (reverse %))\n     (reverse %)) %)","user":"541c5718e4b01498b1a71a74"},{"code":"#(= % (if (string? %) (apply str (reverse %)) (reverse %)))","problem":27,"user":"4ea87a83535d7eef308072fb"},{"code":"(fn pal [arg]\n  (= (reverse (seq arg)) (seq arg)))","problem":27,"user":"4edffe54535d10e5ff6f5347"},{"code":"#(let [sq (seq %)] (= sq (reverse sq)))","problem":27,"user":"50b29029e4b03ea880433563"},{"problem":27,"code":"(fn [coll]\n  (let [rcoll (reverse coll)]\n    (or (= rcoll coll)\n        (= (apply str rcoll) coll))))","user":"54edfa10e4b024c67c0cf868"},{"code":"(fn [s]\n  (let [tmp\n        (reverse s)\n        reversed\n        (if (string? s)\n          (apply str tmp)\n          tmp)]\n    (= s reversed)))","problem":27,"user":"4f31519ae4b0d6649770a086"},{"problem":27,"code":"#(= (reverse  (seq %)) (seq %))","user":"56ae4c21e4b03c432f18735c"},{"problem":27,"code":"#(let [c (Math/ceil (/ (count %) 2))] (= (take c %) (take c (reverse %))))","user":"56372798e4b0bfe05bf117d0"},{"problem":27,"code":"(fn [x]\n  (if (string? x) (= (clojure.string/join (reverse x)) x) (= (reverse x) x))\n      \t\t\t\n  )","user":"52a803cee4b0c58976d9ac26"},{"problem":27,"code":"(fn checkPalindrome [col]\n  (case (count col)\n    0 true\n    1 true\n    (let \n      [\n       f (first col)\n       l (last col)\n       inner (butlast (rest col))\n       ]\n      (and\n        (= f l)\n        (checkPalindrome inner)\n      )\n    )\n  )\n)","user":"55bb7546e4b01b9910ae29e7"},{"problem":27,"code":"(fn [x]\n   (let [reversed (if (string? x) \n                    (apply str (reverse x))\n                    (reverse x))]\n     (= x reversed)))","user":"5e68f6dde4b04a83ad7cd268"},{"problem":27,"code":"(fn [c]\n  (let [l (count c)\n        h (int (/ l 2))\n        g (partial nth c)]\n    \n    (every? true?\n     (for [x (range h)]\n      (= (g x) (g (- l x 1)) )\n       ))))","user":"53bb4cb1e4b047364c044502"},{"code":"#(= (take (int (/ (count %) 2)) %) (take (int (/ (count %) 2)) (reverse %)))","problem":27,"user":"52e68e61e4b09f7907dd1479"},{"problem":27,"code":"(fn palindrome [x]\n  (if (string? x) \n    (= x (apply str(reverse x)))\n  (= x (reverse x)))\n  )","user":"5703d21ae4b08d47c97781ff"},{"code":"(fn pali [x]\n  (if (< (count x) 2)\n     true\n     (if (= (first x) (last x))\n        (pali (rest (butlast x)))\n        false)))","problem":27,"user":"4f52a134e4b03ad3f0c10d41"},{"problem":27,"code":"(fn [xs]\n  \"haha without reverse\"\n  (if (< (count xs) 2)\n    true\n    (and (= (first xs) (last xs)) (recur (rest (drop-last xs))))))","user":"56bca51ae4b0f26550335963"},{"problem":27,"code":"#(= (take (quot (count %) 2) %) (reverse (take-last (quot (count %) 2) %)))","user":"53ab94cae4b047364c044450"},{"problem":27,"code":"#(or (<= (count %) 1) (and (= (first %) (last %)) (recur (butlast (next %)))))","user":"54ca93abe4b057c6fda3a264"},{"problem":27,"code":"(fn is_palin [str]\n  (cond \n    (< (count str) 2) true    \n    :else (if-not (= (first str) (last str)) false\n            (is_palin (drop-last (drop 1 str))))))","user":"60a7c55be4b00e9e6653c468"},{"code":"(fn turbo-reverse [s]\n  (if (= (class s) java.lang.String)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))","problem":27,"user":"51baff1be4b0fe3ecfb46443"},{"code":"(fn [x] (every? identity (map #(= (nth x %1) (nth x (- (count x) 1 %1))) (range (/ (count x) 2)) )  ))","problem":27,"user":"53410c24e4b00652c8746eca"},{"code":"#(= (reverse %1) (concat %1))","problem":27,"user":"502952c9e4b0b33e9bf6fdf1"},{"code":"(fn palindrome \n  ([n]\n    (if (= (count n) 1) true\n      (if (= (count n) 0) true \n  (if (= (first n) (last n)) (recur (butlast (rest n)))\n      false )))))","problem":27,"user":"4e51fccf535d302ef430da6b"},{"code":"#(loop [L %1 L2 (reverse %1)]\n  (if (and (empty? L) (empty? L2)) true\n    (and(= (first L) (first L2)) (recur (rest L) (rest L2)))))","problem":27,"user":"50afa883e4b0c3f5ed5c29a2"},{"code":"(fn f2 [y]\n(let [y1 \n(reduce (fn [acc e]\n(conj acc e))\n() y)]\n(if (string? y)\n(if(= (apply str y1) y)\ntrue\nfalse)\n(if (= y y1)\ntrue\nfalse))))","problem":27,"user":"52ebf800e4b0705949c44446"},{"code":"(fn [x] \n  (if (= 0 (mod (count x) 2))\n    ((fn [y] (= (reverse (first y)) (last y))) (split-at (/ (count x) 2) x))\n    ((fn [x] (= (reverse (butlast (first x))) (last x))) (split-at (/ (count x) 2) x))\n  ))","problem":27,"user":"4f341320e4b0e243712b1eb4"},{"code":"#(=(reverse%)(vec%))","problem":27,"user":"4f868d88e4b033992c121c52"},{"problem":27,"code":"( fn palindrome\n  [x]\n  (if (> (count x) 2)\n    \n    (if (= (first x) (last x))\n      (palindrome (drop-last (rest x)))\n      false\n    )    \n\n    true\n  )\n)","user":"55640c62e4b0c656e3ff17fd"},{"code":"(\nfn f [x] (\n    if (= x nil)\n        true \n        (if (= (first x) (last x))\n            (-> x rest butlast f) \n            false\n        )\n)\n)","problem":27,"user":"514457fbe4b0b4fb4ace5f43"},{"code":"(fn [x]\n  (loop [lst x]\n    (if (empty? lst) true\n(if (= (first lst) (last lst))\n(recur (reverse (rest (reverse (rest lst))))) false))))","problem":27,"user":"4fdf5403e4b05e33b9224f98"},{"problem":27,"code":"(fn pal [xs] (if (<= (count xs) 1) true (if (= (first xs) (last xs)) (pal (drop-last (rest xs))) false)))","user":"541c6489e4b01498b1a71a76"},{"code":"(fn [coll] \n  (if (instance? String coll)\n    (= (reduce str (reverse coll)) coll)\n    (= (reverse coll) coll)))","problem":27,"user":"4f043bbd535dcb61093f6bb2"},{"problem":27,"code":"#(loop [arr %]\n   (if (<= (count arr) 1)\n     true\n     (if (not= (first arr) (last arr))\n       false\n       (recur (rest (butlast arr))))))","user":"566cd399e4b0a866af6896c3"},{"problem":27,"code":"(fn [value]\n  (loop [v (vec value)]\n    (if (empty? v)\n      true\n      (if (= (first v) (last v))\n        (recur (rest (drop-last v)))\n        false))))","user":"5afa9de0e4b0cc2b61a3bcf1"},{"code":"(fn pal [coll]\n  (or (< (count coll) 2)\n      (and (= (first coll) (last coll))\n           (pal (next (butlast coll))))))","problem":27,"user":"51d19c24e4b0cfcf579466c3"},{"problem":27,"code":"(fn [sequen] (= (reverse (reverse sequen)) (reverse sequen)))","user":"5dc9e5bfe4b03836ba07d826"},{"problem":27,"code":"#(if (string? %)\n    (= % (apply str (reverse %)))\n    (= (reverse %) %))","user":"5a608721e4b0512ff01cd95f"},{"problem":27,"code":"(fn ff\n  [l]\n  (if (<= (count l) 1)\n    true\n    (and (= (first l) (last l)) (ff ((comp rest butlast) l)))))","user":"5b8db323e4b0c0b3ffbd49da"},{"code":"(fn palindrome [lista]\n  (let [entre_dos (fn [secuencia]\n  (let [mitad (quot (count secuencia) 2), par (even? (count secuencia))]\n    (seq [(take mitad secuencia) (nthnext secuencia (if par mitad (inc mitad)))]))), \n        secuencia1 (first (entre_dos (seq lista))), secuencia2 (first (rest (entre_dos (seq lista))))]\n    (= secuencia1 (reverse secuencia2))))","problem":27,"user":"524b1a95e4b09eba1c0223c2"},{"problem":27,"code":"(fn [s]\n  (loop [s s]\n    (cond\n     (< (count s) 2) true\n     (not (= (first s) (last s))) false\n     :else (recur (rest (butlast s)))\n     )\n    )\n  )","user":"57cd7498e4b0c746388ab897"},{"problem":27,"code":"(fn [xs] (if (instance? String xs) (= (apply str (reverse xs)) xs) (= (reverse xs) xs)))","user":"56388a0fe4b0bfe05bf117e7"},{"problem":27,"code":"(fn [coll]\n  (reduce (fn [a b] (and a b)) true\n    (map (fn [[a b]] (= a b))\n      (partition 2 (interleave coll (reverse coll)))\n      )\n    )\n  )","user":"55044fb8e4b086ebe8a79c7a"},{"code":"(fn palindrome?                                                                                                                                             \n  [coll]                                                                                                                                                      \n  (if (even? (count coll))                                                                                                                                    \n    (= (take (/ (count coll) 2) coll) (reverse (drop (/ (count coll) 2) coll)))                                                                               \n    (palindrome? (concat (take (/ (count coll) 2) coll) (drop (/ (dec (count coll)) 2) coll)))))","problem":27,"user":"4e3bcccd535deb9a81d77f56"},{"code":"#(= (seq % ) (into nil %))","problem":27,"user":"5295fbb7e4b02ebb4ef75029"},{"problem":27,"code":"(fn\n  [mySeq]\n  (if (string? mySeq)\n    (= (vec mySeq) (reverse (vec mySeq)))\n    (= mySeq (reverse mySeq))))","user":"54c120d7e4b0ed20f4ff6f1c"},{"code":"(fn [coll]\n  (every? identity (map #(= %1 %2) coll (reverse coll))))","problem":27,"user":"5264b4a9e4b03e8d9a4a70e0"},{"code":"(fn [lst]\n(loop [ a 0 b (- (count lst) 1)]\n  (if (or (= a b) (= 1 (- b a)))\n    true\n\t(if (not (= (nth lst a) (nth lst b)))\n      false\n      (recur (inc a) (dec b))))))","problem":27,"user":"4e964f4a535dbda64a6f6b42"},{"code":"(fn [x] (#(= % (reverse %)) (seq x)))","problem":27,"user":"4df7cb14535d04ed9115e776"},{"problem":27,"code":"(fn [xs]\n  (= \n   (seq xs)\n   (reverse xs)))","user":"5f37263de4b0574c87022c4e"},{"problem":27,"code":"(fn p[x] \n  (if (>= 1 (count x)) \n    true \n    (if (= (first x) (last x))\n    \t(p (rest (drop-last x)))\n      \tfalse                 \n    )\n  )\n)","user":"54283a7ae4b01498b1a71b2f"},{"problem":27,"code":"#_(fn [s]\n (let [n (/ (count s) 2)\n       [beg end]\n       ; split-at rounds n up \n       (split-at n s)]\n  (= (seq \n      (take (Math/floor n) beg))\n      (reverse end) )) )\n\n; simpler, maybe not as efficient\n(fn [s]\n  ; seq necessary for strings\n  (= (seq s) (reverse s)) )","user":"58acce0ae4b0005cfeb1a754"},{"problem":27,"code":"(fn fd [seq]\n  (loop [sq seq]\n    (cond (empty? sq) true\n          (empty? (rest sq)) true\n          (= (first sq) (last sq)) (recur (butlast (rest sq)))\n          :else false)))","user":"57a22c85e4b0c3d858beb8f6"},{"problem":27,"code":"(fn [x]\n  (loop [charcount\n         (if (odd? (count x)) (/ (- (count x) 1) 2) (/ (count x) 2))\n         strin x\n         currCount 0]\n         (println charcount currCount)\n         (cond (= charcount currCount) true\n               (not= (nth strin currCount) (nth strin (- (- (count strin) 1) currCount))) false\n               :else (recur charcount strin (inc currCount)))\n         ))","user":"59e4fc25e4b08badc2a0c54f"},{"problem":27,"code":"(fn [s] \n  (= (seq s) (reduce conj () s)))","user":"52946307e4b02ebb4ef7500a"},{"problem":27,"code":"(fn [valu] (= (reverse valu) ((comp reverse reverse) valu)))","user":"56942944e4b0dcc4269f4115"},{"problem":27,"code":"(fn [input] (if (string? input)\n             (= (apply str (reverse input)) input)\n             (= input (reverse input))\n              )\n  )","user":"56885c32e4b0dcc4269f4068"},{"problem":27,"code":"#(= (reverse  %) (seq %) )","user":"57bffed6e4b05aa3c4741c89"},{"problem":27,"code":"(fn\n  [palindrome?]\n  (loop [p palindrome?]\n    (if (< (count p) 2)\n      true\n      (let [left (first p)\n            right (last p)]\n        (if (= left right)\n          (if (= (count p) 2)\n            true\n            (recur (rest (butlast p))))\n          false)))))","user":"59077d7be4b047aa04b1995b"},{"problem":27,"code":"(fn palindrome? [coll]\n  (every? #(true? %) (map #(= %1 %2) coll (reverse coll))))","user":"5fffecb1e4b074f607df660a"},{"code":"(fn [thing]\n  (if (string? thing) (= thing (clojure.string/reverse thing))\n    (= thing (reverse thing))))","problem":27,"user":"4e1e1576535d04ed9115e806"},{"problem":27,"code":"(fn is-palindrome [some-seq]\n  (let [reversed (reverse some-seq)]\n    (= some-seq (if (= java.lang.Character (type (first  reversed)))\n                  (apply str reversed)\n                  reversed))))","user":"5a35d515e4b0ddc586f153e1"},{"code":"(fn [what]\n  (= (map identity what) (map identity (reverse what))))","problem":27,"user":"504e2011e4b0f6ff3350c469"},{"problem":27,"code":"(fn [sq] (= (seq sq) (reverse sq)))","user":"53b4344de4b047364c0444b4"},{"code":"(fn pal? [lis] (cond (and (= (last lis) (first lis)) (empty? (rest lis))) true (not (= (last lis) (first lis))) false\r\n                     true (pal? (butlast (rest lis)))))","problem":27,"user":"5071f3b4e4b0e3170b5a8686"},{"problem":27,"code":"(fn\n  [s]\n   (if (= (reduce str s) (apply str (reverse s))) true false)\n  )","user":"6074f5ede4b069485764de52"},{"problem":27,"code":"#(= (clojure.string/join \"\" %) (clojure.string/join \"\" (reverse %)))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":27,"code":"(fn [lst]\n  (= (if (string? lst)\n    (apply str (reverse lst))\n    (reverse lst))\n   lst))","user":"5938bca5e4b02506e01a29eb"},{"problem":27,"code":"(fn [c] \n  (= (seq c) (reverse c)))","user":"54b972bbe4b0ed20f4ff6ead"},{"problem":27,"code":"(fn [col] \n  (= (vec col) (vec (reverse col))))","user":"5243e37ae4b076204b44fae3"},{"code":"(fn palindrom? [coll]\r\n  (let [f (first coll) l (last coll)]\r\n    (if (>= 1 (count coll))\r\n      true\r\n      (if (not= f l)\r\n        false\r\n        (recur (drop-last (drop 1 coll)))))))","problem":27,"user":"4e131443535d04ed9115e7d3"},{"problem":27,"code":"(fn [x]\n  (= (seq x)\n     (reverse x))\n  )","user":"570f41f8e4b0b0fb43fd0702"},{"problem":27,"code":"(fn [x] (= (vec (reverse x)) (vec x)))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":27,"code":"(fn [lst] \n  (cond\n   (string? lst) (= (apply str (reverse lst)) lst)\n   :else (= (reverse lst) lst)))","user":"59e8cd8be4b0249b72820739"},{"code":"(fn [x] \n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))","problem":27,"user":"4eaa96e1535d7eef3080730d"},{"code":"#(= (reverse %) ((comp reverse reverse) %))","problem":27,"user":"5213dbc3e4b0961f15ac4d74"},{"code":"(fn [coll]\n  (let \n    [half (int (/ (count coll) 2))\n    collseq (seq coll)]\n    (= (take half collseq) (reverse (take-last half collseq)))\n  )\n)","problem":27,"user":"4ee26926535d10e5ff6f5367"},{"code":"#( loop [zdanie % odwrocone (reverse %)]\r\n( if (< (count zdanie) 2) true\r\n( if (= (first zdanie) (first odwrocone))\r\n( recur (rest zdanie) (rest odwrocone) ) false)))","problem":27,"user":"4f00c74f535dcb61093f6a31"},{"code":"#(= % (if (= String (class %)) (apply str (reverse %)) (reverse %)))","problem":27,"user":"4f9e0000e4b0dcca54ed6d2a"},{"problem":27,"code":"(fn [givenstr] (= (into [] givenstr)  (reverse (into [] givenstr))  ))","user":"56bff105e4b060a8e693e3a4"},{"code":"(fn jpalin [lst]\n  (if (empty? lst)\n    (true? true)\n    (if (= (count lst) 1)\n      (true? true)\n      (and (= (first lst) (last lst)) (jpalin (rest (take (- (count lst) 1) lst )))))))","problem":27,"user":"534ff8a6e4b084c2834f4ad1"},{"problem":27,"code":"#(every? (fn [x] x) (map = % (reverse %)))","user":"554b7056e4b0a04f79299583"},{"problem":27,"code":"(fn [seq]\n    (if (string? seq)\n      (= (apply str (reverse (re-seq #\".\" seq))) seq)\n      (= (reverse seq) seq)))","user":"55d29fb6e4b0e31453f64a59"},{"problem":27,"code":"(fn ex [v]\n  (let [res (if\n              (string? v)\n              (do\n                (println \"Value is string\")\n                (= v (apply str (reverse v))))\n              (do\n                (println \"Value is not string\")\n                (= v (reverse v))))]\n    res))","user":"57b3046de4b0fbc9809a276d"},{"problem":27,"code":"(fn [coll] \n  (= (sequence coll)\n     (reverse coll)))","user":"56e99ec8e4b04a395b9a03fb"},{"code":"(fn [xs]\n  (= (seq xs) (reverse xs)))","problem":27,"user":"51670895e4b013fc800656c1"},{"problem":27,"code":"(fn [word]\n  (loop [w word]\n      (let [f (str (first w))\n            l (str (last w))]\n        (if (= f l)\n          (if (< (count w) 2)\n            (recur (drop-last (rest w)))\n            true)\n        false))))","user":"5d4320fde4b07c84aa5ae690"},{"code":"(fn mypalindrome[coll](= (seq coll) (reverse coll)))","problem":27,"user":"52cbf89ee4b07d0d72b27354"},{"code":"(fn palindrome [p]\r\n  (let [orig (vec p)\r\n        mirror (vec (reverse p))\r\n        mid (int (/ (count p) 2))]\r\n    (loop [inp1 orig inp2 mirror i mid is-true? true]\r\n      (if (or (not is-true?) (zero? i))\r\n        is-true?\r\n        (recur (rest inp1) (rest inp2) (dec i) (if (= (first inp1) (first inp2)) true false))))))","problem":27,"user":"4f629697e4b0defedf855fd6"},{"problem":27,"code":"(fn\n  [l]\n  (= (seq l) (reverse l) ) )","user":"57061d20e4b0b0fb43fd0679"},{"problem":27,"code":"(fn p? [s]\n  (if (< (count s) 2)\n    true\n    (if (= (first s) (last s))\n      (p? (subvec (vec s) 1 (dec (count s))))\n      false)))","user":"57008afae4b08d47c97781ca"},{"problem":27,"code":"(fn [y]\n  (loop\n  [x y]\n  (cond \n   (>= 1 (count x)) true\n   (not= (first x) (last x)) false\n   :else (recur (drop-last (drop 1 x)))\n  )\n))","user":"54cbe00ee4b057c6fda3a285"},{"code":"(fn [aseq] (= (seq (reverse aseq)) (seq aseq)))","problem":27,"user":"5135a74ae4b04ac1f358dd46"},{"code":"(fn [s] (reduce #(and %1 %2) (#(map = s (reverse s)))))","problem":27,"user":"5137c3b0e4b0509a8b470482"},{"problem":27,"code":"(fn palindrome? [l]\n  (loop [c 0]\n    (if (< c (/ (count l) 2))\n      (if-not (= (nth l c) (nth l (- (dec (count l)) c)))\n        false\n        (recur (inc c)))\n      true)))","user":"55845fb6e4b04192f3441eed"},{"problem":27,"code":"(fn [x]\n  (let [y (split-at (/ (count x) 2) x)]\n    (if\n      (> (count (first y)) (count (last y)))\n      (= (butlast (first y))\n         (reverse (last y)))\n      (= (first y)\n         (reverse (last y))))))","user":"5af3a4d0e4b0cc2b61a3bc8b"},{"code":"(fn palindrome?\n  [coll]\n  (loop [c coll\n         result true]\n    (let [f (first c)\n          l (last c)]\n      (if (empty? c)\n        result\n        (recur (drop 1 (drop-last c))\n               (and result  (= f l)))))))","problem":27,"user":"524f4256e4b0541d1855b808"},{"code":"(fn[palindrome]\n(= (seq palindrome) (reverse palindrome))\n)","problem":27,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"(fn [s]                                                                                                                                       \r\n   (let [seq-s (seq s)]                                                                                                                       \r\n     (= seq-s (reverse seq-s))))","problem":27,"user":"4f149e0f535d64f60314643d"},{"problem":27,"code":"(fn palindrome [s]\n  (= (seq s) (reverse (seq s)))\n  )","user":"59f78b49e4b0ca45a743a30e"},{"problem":27,"code":"(fn [col] (= (vec col) (reverse (vec col))))","user":"5c1176a4e4b01240ff567179"},{"problem":27,"code":"(fn palindrome [x] \n  (= (seq x)(reverse x)))","user":"5b1619e4e4b0cc2b61a3be77"},{"problem":27,"code":"(fn is-palindrome? [xs]\n  (= (#(into '() %) xs) (seq xs)))","user":"56efc9fde4b04a395b9a0464"},{"code":"(fn pal [x]\n  (if (< (count x) 2)\n    true\n    (if (= (first x) (last x))\n      (pal (rest (butlast x)))\n      false\n      )\n    )\n  )","problem":27,"user":"52586d24e4b0cb4875a45cb0"},{"problem":27,"code":"(fn [seq]\n  (let [len (count seq), n (quot (count seq) 2)]\n    (loop [i 0]\n       (cond \n         (not= (nth seq i) (nth seq (- len (inc i)))) false\n         (= i n) true\n         :else (recur (inc i))))))","user":"555c78abe4b0b056612e224f"},{"code":"(fn [seqs]\n  (if (= (seq seqs) (reverse seqs))\n    true\n    false)\n)","problem":27,"user":"52837636e4b0239c8a67adb6"},{"problem":27,"code":"(fn sm-pali [x]\n      (= (seq x) (reverse (seq x)))\n)","user":"5575aae2e4b05c286339e065"},{"problem":27,"code":"(fn [arr]\n  (= (apply str arr) (apply str (reverse arr))))","user":"55c06feee4b01b9910ae2a23"},{"problem":27,"code":"(fn [text]\n  (loop [currentText text]\n      (cond\n        (empty? currentText) true\n        (not= (last currentText) (first currentText)) false\n        :else (recur (-> currentText rest reverse rest)))))","user":"57597fade4b02ea11479931d"},{"problem":27,"code":"(fn [c] (=\n         (reduce conj () (seq c))\n         (seq c)\n         )\n  )","user":"562b1a7be4b058fa18c5a6cb"},{"problem":27,"code":"(fn [s]\n  (if (contains? [0 1] (count s))\n    true\n    (and (= (first s) (last s)) (recur (drop-last (rest s))))))","user":"5f597522e4b0a0bc16850a9e"},{"problem":27,"code":"(fn [s] (let [sqs (seq s)]\n (= (reverse sqs) sqs))\n)","user":"549a999be4b0f3d1d8e70f6f"},{"code":"(fn [input]\n     (let [halves (take 2 (split-at (/ (count input) 2) input))\n                  fh (first halves)\n                  lh (last halves)\n                  com-pare (fn [x y] (->> (compare (into [] x) (into [] (reverse (into [] y)))) (= 0)))]\n       (if (=  (count fh) (count lh))\n           (do (com-pare fh lh))\n         (do (com-pare (butlast fh) lh))\n)))","problem":27,"user":"52016fd3e4b0b2e020a18f10"},{"problem":27,"code":"(fn palindrome? [x] \n  (if (= (type x) java.lang.String) (= x (clojure.string/reverse x)) (= x (reverse x)) ))","user":"54257124e4b01498b1a71b09"},{"code":"(fn pal [sequence] (cond (<= (count sequence) 1) true (not= (first sequence) (last sequence)) false :else (pal (pop (vec (rest sequence))))))","problem":27,"user":"50d1aaafe4b05a71a896ef58"},{"problem":27,"code":"(fn pall [coll]\n  (if (< (count coll) 2)\n    true\n    (and (= (first coll) (last coll))\n         (pall (rest (butlast coll)))\n    )\n  )\n)","user":"58a3c6aae4b02bd94d917f00"},{"problem":27,"code":"(fn [s]\n    (let [reversed (if (= (type s) java.lang.String)\n                       (clojure.string/reverse s)\n                       (reverse s))]\n        (= s reversed)))","user":"56491050e4b0284900eef639"},{"problem":27,"code":"(fn palindrome [coll] (= (reverse coll) (reverse (reverse coll))))","user":"5f03550ce4b0cf489e8d7f33"},{"problem":27,"code":"#(loop [x %]\n   (if (<= (count x) 1)\n     true\n     (if (= (first x) (last x))\n       (recur (reverse (rest (reverse (rest x)))))\n       false)))","user":"549e5e52e4b0f3d1d8e70f9e"},{"problem":27,"code":"( fn [xs] (= (into () xs) (into () (reverse xs))))","user":"56686edce4b04acd4f672dea"},{"problem":27,"code":"(fn [s]\n  (if (= () (rest s))\n    true\n    (if (= (first s) (last s))\n      (recur (butlast (rest s)))\n      false)))","user":"55c0a40be4b01b9910ae2a26"},{"problem":27,"code":";; #(= (seq %) (reverse %)) \n;; #(= (reverse %) (lazy-seq %)\n\n(comp (partial apply =) \n      (juxt seq reverse))","user":"591d182ee4b09b4ee5954c10"},{"problem":27,"code":"(fn palindrome [l]\n  (cond\n   (not (= (first l) (last l))) false \n   (empty? l) true\n   :else (palindrome (rest (drop-last l)))))","user":"54c8ac49e4b045293a27f64e"},{"problem":27,"code":"(fn [l]\n  (= (reverse l) (reverse (reverse l))))","user":"53fc88e7e4b0de5c418485be"},{"code":"#(= (reduce conj () %) (seq %))","problem":27,"user":"50fe2420e4b03cd852b4e84a"},{"problem":27,"code":"(fn drome?\n  [x]\n  (cond (not (seq x)) true\n        (not= (first x) (last x)) false\n        :else (recur (rest (butlast x)))))","user":"59f4c9c7e4b0966464fe6ab7"},{"problem":27,"code":"(fn test[%] (if (not= (first %) (last %)) false \n                      (if (< (count %) 2) true \n                         (test (rest (reverse (rest (reverse %)))))\n                      )   \n                    ))","user":"53d64811e4b0e771c3025456"},{"problem":27,"code":"(fn isPalindrome? [n]\n  (= (vec n) (reverse n)))","user":"56278266e4b00e49c7cb47d3"},{"code":"(fn [xs] \n  (if (false? xs)\n    false\n    (if (< (count xs) 1)\n      true\n      (if (= (first xs) (last xs)) (recur (rest (butlast xs))) false))))","problem":27,"user":"4ec96da2535d6d7199dd36ff"},{"problem":27,"code":"#(= \n        (clojure.string/join %) \n        (clojure.string/join (reverse %)))","user":"53a83c74e4b047364c044426"},{"problem":27,"code":"; #(= (seq %) (reverse (seq %)))\n#(= (reduce str %) (reduce str (reverse %)))","user":"5af3742ee4b0cc2b61a3bc87"},{"problem":27,"code":"#(= (reverse  %) (seq %))","user":"53dcdde4e4b0d874e779ae24"},{"code":"#(loop [l %]\n  (if (or (empty? l) (= 1(count l)))\n    true\n    (if (not= (first l) (last l))\n      false\n      (recur (butlast (drop 1 l))))))","problem":27,"user":"4f62ef0ce4b0defedf855fdc"},{"code":"(fn pdrome [y]\n  (loop [fwd y \n         bkwd ((fn [x] \n                 (loop [xseq x revseq nil]\n                   (if (= (seq xseq) nil)\n                     revseq\n                     (recur (rest xseq)\n                            (conj revseq (first xseq)))))) y)]\n    (if (= (seq fwd) nil)\n      true\n      (if (not= (first fwd) (first bkwd))\n        false\n        (recur (rest fwd) (rest bkwd))))))","problem":27,"user":"52c0101fe4b07a9af5792343"},{"code":"(fn [coll]\n  (= (seq coll) (reverse coll)))","problem":27,"user":"4e7e4d5c535db169f9c7970f"},{"problem":27,"code":"; only checks the first and last, but passes the test: #(identical? (first %) (last %))\n; stolen #(= (reverse %) (seq %))\n#(= (reverse %) (seq %))","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn [s]\n  (if (seq s)\n    (if (not (= (first s) (last s)))\n       false\n       (recur (rest (butlast s))))\n   true))","problem":27,"user":"4ee645f8535d93acb0a6685d"},{"problem":27,"code":"(fn palindrome [p] (if (empty? p) true (if (= (first p) (last p)) (palindrome (rest ( butlast p))) false)))","user":"55f04526e4b06e875b46ce20"},{"problem":27,"code":"(fn palindrome? [coll]\n  (let [rseq (reverse coll)]\n    (= rseq (seq coll))))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"(fn [l] \n  (cond\n    (< (count l) 2) true\n    (= (first l) (last l) ) (recur (rest (reverse (rest l))))\n    :else false\n  ) \n  )","problem":27,"user":"531902b1e4b08068f379ed77"},{"problem":27,"code":"(fn [s]\n   (if (= (.toString (type s)) \"class java.lang.String\")\n    (= s (apply str (vec (reverse s))))\n    (= s (reverse s))))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":27,"code":"(fn [aseq] (if (not= (type aseq) java.lang.String)\n                     (= aseq (reverse aseq))\n                     (= aseq (clojure.string/replace (clojure.string/replace (clojure.string/replace (clojure.string/replace (str (reverse \"racecar\")) \"\\\\\" \"\") \" \" \"\") \"(\" \"\") \")\" \"\"))))","user":"5aef6084e4b0cc2b61a3bc34"},{"problem":27,"code":";(fn palindrome?\n;  [x]\n;  (cond (or (= (count x) 0) (= (count x) 1)) true\n;        (= (first x) (last x)) (palindrome? (drop 1 (take (- (count x) 1) x)))\n;        :else false))\n\n#(= (seq %) (reverse %))","user":"55b42706e4b01b9910ae297b"},{"code":"(fn palin [x] (reduce (fn [a b] (and a b)) (map #'= x (reverse x))))","problem":27,"user":"53388e2de4b0e30313ee6c9c"},{"problem":27,"code":"(fn superf [col]\n  (if (empty? col) true\n      (if (= (first col) (last col))\n        (superf (rest (drop-last col)))\n        false)))","user":"5d132412e4b02c15ef0219a6"},{"code":"(fn pal[x]\n  (if (or (empty? x) (= 1 (count x))) true \n    (if (not= (first x) (last x)) false\n      (and true (pal (drop-last (rest x)))))\n  )\n)","problem":27,"user":"4fcf642ee4b03432b189f410"},{"code":"(fn [arg] (= (seq arg) (reverse (seq arg))))","problem":27,"user":"50838c06e4b0902986d69e0f"},{"problem":27,"code":"(fn [pal]  (= (reverse (take (quot (count pal) 2) pal))\n              (take-last (quot (count pal) 2) pal)))","user":"5a03d246e4b01bb0ae8afd8c"},{"code":"(fn [s] (let [s* (seq s)] (= s* (reverse s*))))","problem":27,"user":"4ed292ac535d44c135fd68d9"},{"problem":27,"code":"(fn [thing] (= (reverse (seq thing)) (seq thing)))","user":"548018e3e4b0c51c1f4d7331"},{"problem":27,"code":"(fn Palin? [xs]\n         (loop [i (int (/ (count xs) 2))\n                res true]\n           (if (or (< i 0) (= false res))\n             res\n             (recur (dec i) (= (nth xs i) (nth xs (- (dec (count xs)) i)))))))","user":"58c4492be4b021aa9917ed27"},{"problem":27,"code":"#(=(seq %1)(reverse %1))","user":"5804fb34e4b0a837a8b30cb1"},{"problem":27,"code":"#(if (= (reverse %) (seq %))\n   true\n    false)","user":"544257b4e4b032a45b869379"},{"problem":27,"code":"(fn [x] (if (= (seq (reverse x)) (seq x)) true false))","user":"576ffcb9e4b0979f89651592"},{"problem":27,"code":"(fn is-collection-palindrome? [coll]\n  (= (reverse (into () coll))\n     (loop [c coll\n            acc ()]\n       (if (empty? c)\n         acc\n         (recur (rest c) (cons (first c) acc))\n         )\n       )\n     )\n  )","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":27,"code":"#(= 0 (compare (into [] (reverse %)) (into [] %)))","user":"57ea79d9e4b0bfb2137f5b4f"},{"problem":27,"code":"#(= (vec %) (vec (apply conj () %)))","user":"5d6d7e0de4b04d129b00f2bf"},{"problem":27,"code":"(fn [xs] (let [ss (seq xs)] (= ss (reverse ss))))","user":"606da089e4b069485764de15"},{"code":"(fn [coll]\n  (let [v (split-at (/ (count coll) 2) coll)\n        c (min (count (first v)) (count (second v)))\n        [a b] [(take c (first v)) (reverse (second v))]]\n        (= a b)))","problem":27,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"problem":27,"code":"#(if (string? %) (= % (clojure.string/reverse %))   (= % (reverse %))  )","user":"58904720e4b00487982d51d1"},{"code":"(fn palindrome? [seq]\n  (let [rev (reverse seq)]\n    (= seq (if (string? seq)\n             (apply str rev)\n             rev))))","problem":27,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"problem":27,"code":"(fn [s] \n  (let[c (count s)\n       middle-val (if (odd? c) (int (/ (count s) 2)) (/ (count s) 2) )]\n    (if (odd? c)\n      (let[partitions (partition (+ middle-val 1) middle-val s)] (= (first partitions) (apply reverse (rest partitions))))\n      (let[partitions (partition middle-val s)] (= (first partitions) (apply reverse(rest partitions)))))))","user":"560331dee4b04bb52996e1b5"},{"code":"#(= (reverse %) (lazy-seq %))","problem":27,"user":"4f148418535d64f60314643a"},{"code":"(fn pal [t] (= (seq t) (reverse t)))","problem":27,"user":"51f7dd27e4b06ff1c25c52dc"},{"problem":27,"code":"(fn [coll] (\n            if (= \n                ((fn [x] (reverse (seq x))) coll)\n                (seq coll)) \n            true \n            false))","user":"54d0ceb2e4b0e8a36923e5d0"},{"problem":27,"code":"(fn p [x] \n  (cond \n   (<= (count x) 1) true\n   :else  \n    (cond \n\t(= (first x) (last x)) (p (drop-last (rest x)))\n        :else false\n    )\n   )\n  )","user":"57303ba6e4b0cd1946bd0fa5"},{"problem":27,"code":"#(= (into '() (reverse %)) (into '() %))","user":"52da4532e4b09f7907dd13b6"},{"problem":27,"code":"(fn [xs]\n  (loop [xs\txs])\n  \t(if (<= (count xs) 1)\n      true\n      (if (not= (first xs) (last xs))\n        false\n        (recur (->> xs (drop-last 1) (drop 1))))))","user":"5468033ee4b00cfc9eacc133"},{"code":"(fn [lst]\n  (if (<= (count lst) 1)\n    true\n    (do\n      (if (not (= (last lst) (first lst))) false\n      (recur (rest (reverse (rest lst))))))))","problem":27,"user":"4e68323a535d8ccf87e9fe86"},{"code":"(fn [par] (if (string? par) (= (apply str (reverse par)) par) (= (reverse par) par)))","problem":27,"user":"52c3a0f4e4b0c2d177d620c6"},{"code":"(fn pal [lst]\n    \n    (= (seq lst) (reverse lst))\n    \n    )","problem":27,"user":"5180dc04e4b06b8caf33fa01"},{"problem":27,"code":"(fn clofn [x] \n  (if (empty? x) \n    true \n    (if (= (first x) (last x)) \n      (clofn (rest (drop-last x)))\n      false)))","user":"5d1ef23ee4b02ea6f0fb69bb"},{"code":"(fn palindrome?[s]\r\n  (or (<= (count s) 1)\r\n    (and (= (first s) (last s))\r\n      (palindrome? (rest (butlast s))))))","problem":27,"user":"4e080562535d04ed9115e7aa"},{"problem":27,"code":"(fn\n  [c]\n  (let [divFloor (fn [a] (int (/ (count a) 2)))]\n    (= (take (divFloor c) c) (reverse (take-last (divFloor c) c)))\n  )\n)","user":"53d17fdde4b00fb29b221315"},{"problem":27,"code":"(fn isPalindrome?\n    [lista]\n    (= (map str lista) (reverse (map str lista))))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":27,"code":"(fn palin [ls] (if (empty? ls) true\n                (if-not (= (first ls) (last ls)) false\n                  (recur (rest (butlast ls))))))","user":"5f15b1e2e4b091ba50b4dbbd"},{"problem":27,"code":"(fn [in-seq]\n    (= (seq in-seq) (reverse (seq in-seq))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":27,"code":"(fn [xs]\n  ( let [sx (seq xs)]\n    ( = sx (reverse sx))))","user":"4f6d09c5e4b07046d9f4efc3"},{"code":"(fn [x](  if (=(reduce str(reverse x)) (reduce str x)) true false ) )","problem":27,"user":"4e8da0bf535d65386fec2138"},{"problem":27,"code":"(fn [s]\n    (if (instance? String s)\n        (= s (clojure.string/reverse s))\n        (= s (reverse s))\n    )\n)","user":"54996971e4b0b312c081ff8d"},{"problem":27,"code":"(fn [coll] (if(or (= 1 (count coll)) (= 0 (count coll)))\ntrue\n             (if(= (nth coll 0) (nth coll (-  (count coll) 1)))\n(recur (take (- (count (drop 1 coll)) 1) (drop 1 coll)))\n               false)\n))","user":"54bca097e4b0ed20f4ff6ed4"},{"problem":27,"code":"(fn \n  [coll]\n  (cond\n    (= (first coll) nil) true\n    (= (count coll) 1 ) true\n    (= (first coll) (last coll)) (recur (reverse (rest (reverse (rest coll)))) )\n    :else false\n    )\n)","user":"5c75a30ee4b0fca0c16227df"},{"problem":27,"code":"(fn [x] \n  (= (seq x) (reverse (seq x)))\n )","user":"5cda72ffe4b05ee0cb311714"},{"code":"(fn [x] (\n  (fn pali [x y] (\n    if (= '() x) \n       true\n       (if (= (first x) (first y)) \n           (pali (rest x) (rest y)) \n           false\n       )\n    )) x (reverse x)\n  \n  ))","problem":27,"user":"4fcf5292e4b03432b189f40e"},{"problem":27,"code":"(fn[x](= x (\n  if(string? x)\n  (apply str (reverse x))\n  (reverse x)\n  )))","user":"5e1ec8c0e4b0dc9594008561"},{"code":"(fn [coll] \n  (loop [s coll]\n    (if \n      (< (count s) 2)\n      true\n      (if\n        (= (first s) (last s))\n        (recur\n          (rest (butlast s))\n        )\n        false \n      )\n    )\n  )\n)","problem":27,"user":"52f1bc81e4b05e3f0be25eef"},{"code":"#(let [s (seq %)\n         r (reverse s)]\n    (= s r))","problem":27,"user":"4ee3afde535d10e5ff6f5370"},{"problem":27,"code":"#(loop [s %]\n   (cond \n    (empty? s) true\n    (= 1 (count s)) true\n    (not (= (first s) (first (reverse s)))) false\n    :else (recur (rest (reverse (rest s))))\n    ))","user":"5720fc08e4b0c5bde472c0a3"},{"code":"(fn f [coll] (= (reverse coll) (seq coll)))","problem":27,"user":"505dd5c4e4b0e6aca564be0e"},{"code":"(fn palindrome? [l]\n  (if (< (count l) 2)\n    true\n    (if (= (first l) (last l))\n      (palindrome? (rest (butlast l)))\n      false)))","problem":27,"user":"50c84ba2e4b00bb60fe0c53e"},{"code":"(fn [x]\n    (\n      (fn [x p]\n        (if (or (= x p) (= (rest x) p))\n            true\n            (if (empty? x)\n                false\n                (recur (rest x)\n                      (if (string? x)\n                          (.concat (.toString (first x)) p)\n                          (cons (first x) p))))))\n      x \"\"))","problem":27,"user":"4f404dcee4b0e243712b1fb0"},{"code":"(fn [x] (if (= (seq x) (reduce conj '() x)) true false))","problem":27,"user":"4e526cc4535d302ef430da74"},{"problem":27,"code":"(fn [item]\n  (if (coll? item)\n    (= (reverse item) item)\n    (= (apply str (reverse item)) item)))","user":"58a0ac0de4b02bd94d917e9c"},{"problem":27,"code":"(fn pal [thing]\n  (if (>= 1 (count thing))\n    true\n    (if (= (first thing) (last thing))\n      (pal (rest (butlast thing)))\n      false)))","user":"5ececec5e4b016b56eae059f"},{"problem":27,"code":"(fn[p](loop [x (seq p)]\n   (if (not(empty? x))   \n     (= (first x) (last x))   \n     (recur (rest (butlast x)))\n     )))","user":"5dbb5200e4b09f47823971a9"},{"problem":27,"code":"(fn \n  [arg]\n  (let\n      [[first-half sec-half] (split-at (int (Math/floor (/ (count arg) 2))) arg)\n       sec-half (reverse sec-half)]\n    (every? true? (map #(= %1 %2) first-half sec-half))))","user":"55295b5de4b0ffed3738f949"},{"problem":27,"code":"(fn [xs]\n  (let [xs (seq xs)\n        rx (reverse xs)]\n    (= xs rx)))","user":"5454bb07e4b0e397800069da"},{"code":"(fn hey [x] \n  (if (empty? x) \n    true \n    (if (not (= (first x) (last x))) \n      false \n      (hey (drop-last (rest x))))))","problem":27,"user":"52e17e66e4b09f7907dd1423"},{"problem":27,"code":"(fn [s] (let [ar (into [] s)] (= (reverse ar) ar)))","user":"5b9db58be4b0c0b3ffbd4b41"},{"code":"(fn [seq] \n  (every? true? (map = (reverse seq)  seq))\n)","problem":27,"user":"5254f908e4b0541d1855b9ba"},{"code":"(fn palindrome? \n   [lst]\n   (= lst\n      (if (string? lst)\n        (apply str (reverse lst))\n        (reverse lst)\n        )\n \n      )\n  )","problem":27,"user":"5228f870e4b0186687e23a98"},{"code":"#(= (vec %)(rseq (vec %)))","problem":27,"user":"525d5329e4b0cb4875a45d75"},{"code":"(fn [items]\n  (= (seq items) (reverse items)))","problem":27,"user":"50dee6bbe4b061dbdced721e"},{"problem":27,"code":"(fn pal [coll]\n  (if (or (= 1 (count coll)) (empty? coll))\n    true\n  (if (= (first coll) (last coll))\n    (recur (drop-last (drop 1 coll)))\n    false)))","user":"552e92d3e4b076ab5578f7f2"},{"problem":27,"code":"(fn [x]\n  (if (= (reverse (reverse x)) (reverse x))\n  \ttrue\n  \tfalse))","user":"5b2bc1ace4b025bcb146f2ad"},{"problem":27,"code":"(fn pal [s] (if (= (first s) (last s)) (if (empty? s) true (pal (-> s rest butlast))) false))","user":"587c59d1e4b01531a375eb17"},{"code":"(fn [seq]\n  (every? #(= (first %) (second %)) (map vector seq (reverse seq))))","problem":27,"user":"4e9c3648535dbda64a6f6b7d"},{"problem":27,"code":"#(= (seq %) (reverse %))\n\n;#(loop [in %\n;        out true]\n;   (if (or (empty? in) (not out))\n;     out\n;     (recur (rest(drop-last in))\n;            (and (= (last in)(first in)) out))))\n\n            \n;(fn plndrn [x] \n;  (if (empty? x) \n;    true \n;    (and \n;     (= (first x)(last x)) \n;     (plndrn(rest(drop-last x))))))","user":"578f9a18e4b0ebec4cfb7598"},{"code":"(fn pal [a] (= (seq a) (reverse (seq a))))","problem":27,"user":"4e1ec17a535d04ed9115e80a"},{"code":"(fn [x]\n  (let [idx (quot (count x) 2)\n        fst (take idx x)\n        snd (take-last idx x)]\n    (= fst (reverse snd))))","problem":27,"user":"5287f66be4b0239c8a67ae45"},{"code":"(fn is-palindrome? [coll]\r\n  (let [coll (if (string? coll) (seq coll) coll)]\r\n    (if (= coll (reverse coll))\r\n      true\r\n      false)\r\n    ))","problem":27,"user":"4fd170fce4b04c3a95aa0411"},{"problem":27,"code":"(\nfn pal [s] (if (< (count s) 2) true (if (= (first s) (last s)) (pal (drop-last (rest s))) false))\n )","user":"57a5bdc4e4b0a966079561fd"},{"code":"(fn [col]\n  (loop [c col]\n    (if (or (empty? c) (= (count c) 1))\n      true\n      (if (= (first c) (last c))\n        (recur (rest (reverse (rest c))))\n        false\n        )\n      )\n    )\n  )","problem":27,"user":"4db7da66535d1e037afb2187"},{"code":"(fn pal [s]\n  (or\n    (empty? s)\n    (= 1 (count s))\n    (and \n      (= (first s) (last s))\n      (recur (rest (reverse (rest (reverse s))))))))","problem":27,"user":"508dbd56e4b0f17d83ea26c2"},{"code":"(fn palin [x]\n    (let [split (split-at (/ (count x) 2) x)\n          p1 (first split) p2 (second split)]\n        (if (odd? (count x))\n            (= (reverse (butlast p1)) p2)\n            (= (reverse p1) p2))\n    )\n)","problem":27,"user":"50588af1e4b06522596eba7d"},{"problem":27,"code":"(fn \n   [str & index]\n   (let [index (or index 0)\n         currentLetter (nth str index)\n         mirroredLetter (nth str (- (count str) index 1))\n         result (= currentLetter mirroredLetter)]\n   (cond\n     (> index (/ (count str) 2)) true\n     (= result false) false\n     :else (recur str (inc index)))))","user":"59b2b093e4b0e1f4e384c8fd"},{"problem":27,"code":"(fn [s]\n  (let [n (count s)\n        half (quot n 2)]\n      (= (take half s)\n         (reverse (drop (+ half (mod n 2)) s)))))","user":"52a9c2efe4b0c58976d9ac50"},{"problem":27,"code":"(fn [s]\n  (loop [i1 0 i2 (dec (count s))]\n    (cond (or (= i1 i2)\n              (> i1 i2)) true\n          (not= (nth s i1)\n                (nth s i2)) false\n          :else (recur (inc i1)\n                        (dec i2)))))","user":"60264d89e4b0d5df2af2222d"},{"code":"(fn p? [s]\n  (if (<= (count s) 1)\n      true\n      (if (not= (first s) (last s))\n          false\n          (p? (drop-last (rest s))))))","problem":27,"user":"501284d9e4b030d97e4db710"},{"code":"#(loop [s % i 0 ret true]\n  (if (= i (count s))\n   ret\n   (recur s (inc i) (and ret (= (nth s i) (nth (reverse s) i))))))","problem":27,"user":"51000111e4b00d7ad4cab15e"},{"problem":27,"code":"(fn [x] (= (if(instance? String x) (clojure.string/reverse x) (reverse x)) x))","user":"55016428e4b07d26eda61d72"},{"problem":27,"code":"(fn [s] (= (vec s) (-> s vec rseq vec)))","user":"55c508f0e4b0e31453f649ac"},{"problem":27,"code":"(fn[coll] (loop [c coll ]\n            (let [[f & r] c [l & i] (reverse r)]\n            (if (<= (count c) 1)\n                true\n                  (if (= f l)\n                    (recur i)\n                    false\n                    )\n              ))))","user":"570e8d86e4b0b0fb43fd06f2"},{"problem":27,"code":"#(= (reduce str %1) (reduce str (reduce conj () %1)))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":27,"code":"(fn [q]\n  (loop [s (apply list q)]\n    (if (< (count s) 2)\n      true\n      (if (not= (first s) (last s))\n        false\n        (recur (rest (butlast s)))))))","user":"56e7ebcce4b02e7e935eb6e2"},{"problem":27,"code":"(fn palindrome [l]\n  (if (nil? l)\n    true\n    (if (= (first l) (last l))\n      (palindrome (butlast (rest l)))\n      false)))","user":"57af36eae4b0fbc9809a272e"},{"code":"#(every? (fn [v] (= (first v) (last v))) (map (fn [a b] [a b]) % (reverse %)))","problem":27,"user":"4f8b08d2e4b02e764a0a5177"},{"code":"(fn [s]\n  (= (reverse s) (reverse (reverse s)))\n  )","problem":27,"user":"52ba43d0e4b07a9af57922cd"},{"code":"#(let [half (quot (count %) 2)]\n   (=\n    (take half %)\n    (reverse (take-last half %))))","problem":27,"user":"525431dfe4b0541d1855b970"},{"code":"(fn [s1]  \n    (loop [s1 s1\n           s2 (reverse s1)]\n      \t(cond (empty? s1) true\n              (= (first s1) (first s2)) (recur (rest s1) (rest s2))\n              :else false\n        )\n    )\n)","problem":27,"user":"5081566ce4b0946d0443855b"},{"problem":27,"code":"(fn palindrome [x] \n  (if (string? x) \n    (if (< (count x) 2) \n      true\n      (and \n       (palindrome (subs x 1 (- (count x) 1)))\n       (= (first x) (last x))\n      )\n    )\n    (= x (reverse x))\n  )\n)","user":"56ea8b75e4b04a395b9a0409"},{"problem":27,"code":"#(loop [coll %]\n   (if (not= (first coll) (last coll))\n   \t\tfalse\n     \t(if (not (empty? coll))\n        \t(recur (butlast (rest coll)))\n          \ttrue\n        )\n   )\n)","user":"5ca1f8a1e4b048ec896c5b8c"},{"problem":27,"code":"(fn [sq]\n  (if (string? sq)\n    (= sq (clojure.string/join (reverse sq)))\n    (= sq (reverse sq))))","user":"5b7ef8e6e4b047b03b203765"},{"code":"#(let [check\n        (if (string? %)\n            clojure.string/reverse\n            reverse)]\n (= (check %) %))","problem":27,"user":"4daea889edd6309eace4d15b"},{"problem":27,"code":"(fn is-palindrome [coll]\n  (cond\n    (empty? coll) true\n    (not= (first coll) (last coll)) false\n    :else (is-palindrome (butlast (rest coll)))\n    )\n  )","user":"60471241e4b02d28681c77c9"},{"problem":27,"code":"(fn palindrome?\n  [s]\n  (loop [s s]\n    (let [f (first s)\n          l (last s)]\n      (if (<= (count s) 1)\n        true\n        (if (not (= f l))\n          false\n          (recur (butlast (rest s))))))))","user":"570c8ac3e4b0b0fb43fd06ca"},{"code":"(fn [xs]\n\t(cond\n\t\t(empty? xs)\ttrue\n\t\t(= (first xs) (last xs))\t(recur (rest (butlast xs)))\n\t\t:else false))","problem":27,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":27,"code":"(fn [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (recur (-> s (rest) (drop-last)))\n      false)))","user":"5a962c09e4b0d174b936c765"},{"problem":27,"code":"(fn x [st] (= (seq st) (reverse st)))","user":"55f5c118e4b06e875b46ce8e"},{"code":"(fn [pali]\n  (= (seq pali)\n     (reverse pali)))","problem":27,"user":"50c4baa6e4b0210b849018b0"},{"problem":27,"code":"(fn is-palindrome\n   [lat]\n   (if (string? lat) (= lat (apply str (reverse lat)))\n                     (= lat (reverse lat))))","user":"57e10705e4b0bfb2137f5a6a"},{"problem":27,"code":"(fn [word]\n   (->>\n    (vec word)\n    (reverse )\n    (= (vec word))\n  )\n)","user":"59537716e4b066ee0a44aee5"},{"code":"(fn [x]\r\n  (let [l (count x)]\r\n\t     (cond\r\n\t       (or (= l 1) (= l 0)) true\r\n\t       (= (first x) (last x)) (recur (drop-last (drop 1 x)))\r\n\t       :else false)))","problem":27,"user":"4db342d7535df7e46ed9b6cd"},{"problem":27,"code":"(fn [x] \n  (= (seq x) (reverse x))\n  )","user":"5f8330b8e4b01aacbe7a270f"},{"code":"#(loop [x %]\n  (if (< (count x) 2) true\n    (if (not= (first x) (last x)) false\n      (recur (rest (drop-last x))))))","problem":27,"user":"4f3afdd0e4b0e243712b1f20"},{"problem":27,"code":"(fn [x] \n   (= x (if (string? x)\n     (apply str (reverse x) )\n          (reverse x)\n     \n   )\n)\n)","user":"58e51834e4b056aecfd47c85"},{"problem":27,"code":"(fn polindrom? [xs]\n  (cond (empty? xs) true\n        (= (count xs) 1) true\n        :else (and (= (first xs) (last xs)) (polindrom? (-> xs rest butlast)))))","user":"58d63b99e4b03c36ff7e596b"},{"code":"(fn isPalindrome [arr]\n  (loop [i 0, j (- (count arr) 1)]\n    (if (>= i j)\n      true\n      (if (not (= (nth arr i) (nth arr j)))\n        false\n        (recur (inc i) (dec j))))))","problem":27,"user":"4ecbff2f535df97575fdabe4"},{"problem":27,"code":"(fn [x] \n                   (if (string? x)\n                     (= (apply str (reverse x)) x)\n                     (= (reverse x) x))\n                   )","user":"5e566668e4b027a2e10ac0f9"},{"problem":27,"code":"(fn [coll]\n  (loop [remain (seq coll)]\n    (if (empty? remain)\n      true\n      (if (or (nil? (first remain)) (not (= (first remain) (last remain))))\n        false\n        (recur (drop 1 (drop-last remain)))))))","user":"5da306a3e4b000c986472be7"},{"problem":27,"code":"(fn [n]\n  (if(= (seq n) (reverse n))\n    true\n    false))","user":"5585f088e4b001b0851d7513"},{"code":"(fn pal[x] \n  (if (empty? x)\n    true \n    (if (= (first x) (last x))\n      (pal (butlast (rest x)))\n      false)))","problem":27,"user":"4f83e712e4b033992c121c25"},{"problem":27,"code":"(fn pal [x]\n   (if (< (count x) 2)\n     true\n     (if (= (first x) (last x))\n       (pal (drop 1 (drop-last x)))\n       false)))","user":"5ff5bc1ae4b06df49cee1490"},{"code":"(fn pal?[x] \n    (= (seq x) (reverse x))\n\n)","problem":27,"user":"4e8b742a535d65386fec2123"},{"problem":27,"code":"(fn palindrome-detector [s]\n  (= (seq s) (reverse s)))","user":"4f73591be4b07046d9f4f045"},{"problem":27,"code":"(fn [s]\n  (let [half (quot (count s) 2)\n        left (take half s)\n        right (reverse (take-last half s))]\n    (= left right)))","user":"552a793ee4b0ffed3738f955"},{"problem":27,"code":"(fn palindrome? [coll]\n  (or (empty? coll)\n      (and (= (first coll) (last coll))\n           (palindrome? (butlast (rest coll))))))","user":"53f42471e4b0742d9025b0fb"},{"code":"(fn [x] (= (reverse (reverse x)) (reverse x)))","problem":27,"user":"4daf36c2edd6309eace4d175"},{"code":"(fn [coll]\n  (let [pairs (map vector coll (reverse coll))]\n    (every? #(apply = %) pairs)))","problem":27,"user":"5312cdaae4b08068f379ed03"},{"problem":27,"code":"(fn palindrome? [s]\n  (if (list? s) (= (reverse s) s)\n                (= (reverse s) (into () s))))","user":"54e606c3e4b024c67c0cf803"},{"code":"(fn [coll]\n\t(let [c    (count coll)\n\t      half (int (/ c 2))]\n\t  (= (take half coll) (reverse (take-last half coll)))))","problem":27,"user":"52e18d9ce4b09f7907dd1428"},{"code":"#(= % (if (string? %) (apply str (reverse %)) (reverse %) ))","problem":27,"user":"4e57d1e2535d8a8b8723a289"},{"problem":27,"code":"#(apply = ((juxt first last) %))","user":"54d0e6c5e4b0e8a36923e5d4"},{"problem":27,"code":"(fn [coll]\n  (if (string? coll)\n    (= (clojure.string/reverse coll) coll)\n    (= coll (reverse coll))))","user":"56e53d2fe4b02e7e935eb6bc"},{"problem":27,"code":"(fn [x]\n  \n  (loop [i 0 x x y (reverse x)]\n    (println y)\n    (if (not-empty x)\n\n      (do\n        (if (= (first x) (first y))\n          (recur (inc i)(rest x) (rest y))\n          false\n          )\n\n        )\n      true\n    ))\n  )","user":"5c8bc8b4e4b048ec896c5978"},{"problem":27,"code":"(fn palindrome? [se]\n  (= (seq se) (reverse se)))","user":"552bd5c2e4b0ffed3738f969"},{"problem":27,"code":"(fn\n  [s]\n  (= (seq s) (reduce conj () s)))","user":"556e3b73e4b09a3098a52514"},{"problem":27,"code":"(fn [x]\n  (if (= (apply str x) (apply str (reverse x)))\n    true\n    false))","user":"57b41969e4b0fbc9809a2790"},{"problem":27,"code":"(fn palindrome-detector [x]\n  (= (seq x) (reverse x)))","user":"518b8561e4b0f028e99addef"},{"problem":27,"code":"(fn function [palindrome]\n  (= (seq palindrome) \n     (reverse palindrome))\n  )","user":"5f792d48e4b02876ed9fd0c5"},{"code":"(fn palindrome [x]\n    (if (= nil (next x))\n        true\n        (and (= (first x) (last x)) (palindrome (butlast (next x))))\n        )\n    )","problem":27,"user":"52bb55e8e4b07a9af57922e3"},{"problem":27,"code":"(fn [x] ( = (flatten (list (seq x))) (into '() x) ))","user":"58ac513fe4b0005cfeb1a746"},{"code":"(fn [l]\r\n  (loop [ h l t (reverse l)]\r\n    (if (and (= t '())\r\n              (= t '()))\r\n        true\r\n        (if (not (= (first h) (first t)))\r\n            false\r\n            (recur (rest h) (rest t))))))","problem":27,"user":"4df9c598535d04ed9115e77a"},{"problem":27,"code":"#(loop [items %]\n   (if (empty? items)\n     true\n     (if (not= (first items) (last items))\n       false\n       (recur (->> (drop 1 items)\n                   (drop-last 1))))))","user":"5711b532e4b09c608db70449"},{"problem":27,"code":"(fn [data]\n  (let[cnt (count data)]\n    (if (<= cnt 1)\n      true\n      (if-not (= (first data) (last data))\n        false\n        (recur (take-last (- cnt 2) (take (- cnt 1) data)))))))","user":"58ee2c14e4b056aecfd47d9e"},{"problem":27,"code":"(fn [s]\n\t(let [o (odd? (count s))]\n\t\t(loop [p s]\n\t\t\t(cond \n\t\t\t\t(and (= (count p) 1) o) true\n\t\t\t\t(and (empty? p) (not o)) true\n\t\t\t\t(= (first p) (last p)) (recur (butlast(rest p)))\n\t\t\t\t:else false))))","user":"551cade8e4b07993ea3788e2"},{"code":"#(or (= % (reverse %)) (= % (reduce str (reverse %))))","problem":27,"user":"50a5b7e9e4b0aa96157e2610"},{"code":"(fn [s] (= (seq s) (reverse s)))","problem":27,"user":"4ddc1c89535d02782fcbea01"},{"problem":27,"code":"(fn palindrome? [lst] (= (reverse lst)  (map (fn [x] x) lst)))","user":"5461873de4b01be26fd746a3"},{"code":"#(loop [l %]\n   (cond\n    (<= (count l) 1) true\n    (not= (first l) (last l)) false\n    true (recur (butlast (rest l)))))","problem":27,"user":"537e745ae4b06839e8705ea6"},{"problem":27,"code":"(fn [coll]\n  (loop [c coll]\n    (if (>= 1 (count c))\n      true\n      (if (= (last c) (first c))\n        (recur (butlast (rest c)))\n        false))))","user":"5ff61113e4b06df49cee1492"},{"problem":27,"code":"(fn is-palin\n  [src]\n    (loop [s src r (reverse src)]\n      (if (empty? s) \n        true\n        (if (= (first s) (first r))\n          (recur (rest s) (rest r))\n          false\n        ))))","user":"524a7c1ae4b05ef8e38e64ac"},{"problem":27,"code":"#(let [i %] (= (last i) (first i)))","user":"5638d2d1e4b0bfe05bf117eb"},{"problem":27,"code":"(fn palin?\n  [xs]\n  (if \n    (or \n     (empty? xs) \n     (= 1 (count xs)))\n    true\n    (and\n     (= (first xs) (last xs))\n     (palin? (rest (drop-last xs))))))","user":"55a3ca84e4b0acc240e3153c"},{"problem":27,"code":"#(= (if (instance? String %) (apply str (reverse %)) (reverse %)) %)","user":"5d1b7ed6e4b02ea6f0fb6982"},{"problem":27,"code":"(fn myPal [[x & xs]]\n  (let [xxs (take (- (count xs) 1) xs)\n        y (last xs)]\n   (if (and (= x y) (> 0 (count xxs)))\n     (do (println (str \"rec branch x=\" x \", y=\" y))\n         (myPal xxs))\n     (if (not= x y)\n       (do (println (str \"term branch x=\" x \", y=\" y))\n           false)\n       (do (println (str \"term branch x=\" x \", y=\" y))\n           true)))))","user":"59a2d49de4b066c664927d30"},{"code":"#(= (reverse %1) (seq %1))","problem":27,"user":"4def301c535d08e6dec9fe12"},{"problem":27,"code":"(fn palin? [s]\n  (cond\n   (= s '()) true\n   (= (first s) (last s))\n    (palin? (rest (butlast s)))\n   :else false))","user":"58138439e4b0f478707a0611"},{"problem":27,"code":"(fn [x]\n  (cond (string? x) (= x (apply str (reverse x)))\n        :else (= x (reverse x))))","user":"5af74644e4b0cc2b61a3bcc2"},{"code":"#(= (into [] %1) (reverse %1))","problem":27,"user":"52626564e4b03e8d9a4a7086"},{"code":"#(if (string? %) (= (apply str (reverse %)) %)\n    (= (reverse %) %))","problem":27,"user":"51e3cf8ee4b0efabf93c02a3"},{"code":"(fn [s]\n  (let [h (int (/ (count s) 2))]\n    (reduce #(and\n              %1 (= (nth s %2) (nth s (- (count s) 1 %2)))) true (range h)) ))","problem":27,"user":"52b63875e4b0c58976d9ad41"},{"problem":27,"code":"(fn p [xs] (if (< (count xs) 2) true (and (= (first xs) (last xs)) (p (butlast (rest xs))))))","user":"552b6ddbe4b0ffed3738f965"},{"problem":27,"code":"(fn [x] (if (string? x)\n  (= (apply str (reverse x)) x)\n  (= (reverse x ) x)\n)\n)","user":"5f06d26ae4b0cf489e8d7f53"},{"problem":27,"code":"(fn f\n  [col]\n  (if (< (count col) 2)\n    true\n    (let [l  (first col)\n          r  (last col)\n          ls (rest col)\n          rst (take (dec (count ls)) ls)]\n      (if (= l r)\n        (f rst)\n        false))))","user":"524a9556e4b05ef8e38e64b1"},{"problem":27,"code":"(fn [c] (reduce #(and %1 %2) (map #(= %1 %2) c (reverse c))))","user":"56800ba1e4b0966858e4d8e8"},{"problem":27,"code":"(fn [in]\n     (= (reverse in) (seq in)\n    ))","user":"5fd66e61e4b05ac5b16ea10a"},{"problem":27,"code":"#(empty? (filter identity (map not= % (reverse %))))","user":"5dde6251e4b0948ae9d9add3"},{"problem":27,"code":"(fn [input] \n  (if (= java.lang.String (class input))\n    (= input (clojure.string/join \"\" (reverse input)))\n    (= input (reverse input))\n    ))","user":"5b609f0ae4b0c6492753e708"},{"problem":27,"code":"(fn [coll]\n    (cond\n     (empty? coll) true\n     (= 1 (count coll)) true\n     (= (first coll) (last coll)) (recur (drop-last (rest coll)))\n     :else false))","user":"51803613e4b04f45bde7d8fd"},{"code":"(fn pal [c] (cond (= c []) true (= 1 (count c)) true\r\n                    :else (= true (= (first c) (last c)) (pal (rest (reverse (rest c)) ) ))))","problem":27,"user":"4ff9624ce4b0678c553fc3a8"},{"problem":27,"code":"(fn pallindrome? [in]\n\n     (= (seq in) (reverse in))\n   )","user":"5b107263e4b0cc2b61a3be22"},{"code":"(fn [x] (= x (if (string? x)\n               (apply str (reverse x))\n               (reverse x))))","problem":27,"user":"50214ffae4b0ef1d2d4433bc"},{"code":"(fn palindrome [x] \n  (and\n    (= (first x) (last x)) \n    (or \n      (= (count x) 0) \n      (= (count x) 1) \n      (palindrome (rest (reverse (rest x))))\n    )\n  )\n)","problem":27,"user":"4f036d6e535dcb61093f6ac0"},{"problem":27,"code":"(fn p [s] \n  (if (not= (first s) (last s)) \n    false \n    (if (< (count s) 2) \n      true \n      (p (take (- (count s) 2) (rest s))))))","user":"574f1780e4b02ea114799254"},{"code":"#(= (take (bit-shift-right (count %) 1) (vec %)) (reverse (take-last (bit-shift-right (count %) 1) (vec %))))","problem":27,"user":"4ea7999e535d7eef308072ee"},{"problem":27,"code":"(fn [coll] \n  (if (= (vec coll) (reverse coll))\n      true\n      false\n  )\n)","user":"59c243bae4b0a024fb6ae4aa"},{"code":"(fn [x]\n  (let [y (conj (rest x) (first x))]\n    (= y (reverse y))))","problem":27,"user":"515828b8e4b0a069fd272c71"},{"problem":27,"code":"#(= (map str (reverse %)) (map str %))","user":"56c77858e4b0ed865f9758c0"},{"problem":27,"code":"(fn [xs]\n  (= (reverse (reverse xs)) (reverse xs))\n     )","user":"57d7c894e4b0bd073c2023de"},{"code":"(fn [s] \n  (= (reverse s) ((comp reverse reverse) s)))","problem":27,"user":"52d08e7ce4b07d0d72b273bc"},{"code":"(fn palindrome?\n  ([seq] (palindrome? seq (reverse seq)))\n  ([seq revseq]\n     (if (empty? seq)\n      true\n  \t  (if (= (first seq) (first revseq))\n        (palindrome? (rest seq) (rest revseq))\n        false))))","problem":27,"user":"4fe89efae4b07c9f6fd12c5b"},{"problem":27,"code":"(fn [coll] (if (string? coll)\n              (= coll (apply str (reverse coll)))\n              (= coll (reverse coll))))","user":"5cc6b681e4b0ccb061962828"},{"code":"(fn [l] (=(reverse (vec l)) (vec l)))","problem":27,"user":"5175c7f8e4b085adf681d878"},{"problem":27,"code":"(fn palindrome? [s]\n  (if (empty? s)\n      true\n      (and (= (first s) (last s))\n           (palindrome? (butlast (rest s))))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":27,"code":"(fn palindrome\n  [sq]\n  (let [ssq (seq sq)]\n    (= ssq (reverse ssq))))","user":"588e4e05e4b00487982d5188"},{"problem":27,"code":"#(= %\n    (if (string? %)\n      (clojure.string/reverse %)\n      (reverse %)))","user":"5650b8a0e4b0284900eef6c3"},{"problem":27,"code":"(fn pl [x]\n  (if (or (= (count x) 0)\n          (= (count x) 1)\n          )\n    true\n    (if (= (first x) (last x))\n      (and true (pl (butlast (rest x))))\n      false\n      )\n    )\n   )","user":"5c4a08c5e4b0f9f7a8770e4f"},{"problem":27,"code":"(fn palindrome? [l]\n  (= (first l) (last l)))","user":"5761724de4b0994c1922fb89"},{"problem":27,"code":"(fn foo [x]\n  (= (seq x) (reverse x))\n  )","user":"5c24c654e4b07e362c2305a7"},{"code":"#(if (string? %) (= % (clojure.string/reverse %)) (= % (reverse %)))","problem":27,"user":"51bd5796e4b0ff155d51d2aa"},{"problem":27,"code":"(fn [s]\n  (= (reverse s) \n   (-> s \n       (reverse)\n       (reverse))))","user":"571543bbe4b07c98581c3ad4"},{"code":"#(let [len (count %) half (if (even? len) (/ len 2) (/ (dec len) 2))] (= (take half %) (take half (reverse %))))","problem":27,"user":"510d3dc6e4b078ea71921132"},{"code":"(fn [s]\n  (if (empty? s)\n    true\n    (if (not= (first s) (last s))\n      false\n      (recur (rest (drop-last s))))))","problem":27,"user":"52fac708e4b047fd55836fff"},{"problem":27,"code":"#(let [reversed (reverse %)]\n   (-> (if (string? %) (apply str reversed) reversed)\n       (= %)))","user":"608910a8e4b0ae75613dceed"},{"code":"(fn [x]\n  (=\n    (take (Math/floor (/ (count x) 2)) x)\n    (reverse (drop (Math/ceil (/ (count x) 2)) x))))","problem":27,"user":"52c1566fe4b07a9af5792364"},{"problem":27,"code":"(fn [a] (if (string? a) true (= a (reverse a))))","user":"5657fc1ae4b0f9d632dd84ad"},{"code":"(fn test [list] \n  (= (reverse list) (seq list)))","problem":27,"user":"539432c9e4b0b51d73faaec7"},{"code":"#(= (reverse %) (-> % reverse reverse))","problem":27,"user":"52ce165fe4b07d0d72b27388"},{"problem":27,"code":"(fn [s] (let [se (seq s)] (= (reverse se) se)))","user":"54fd5e2de4b07d26eda61d33"},{"code":"(fn pall [sequence]\n     (= (apply str sequence) (apply str (reverse sequence))\n          \n     )     \n    )","problem":27,"user":"52dced9de4b09f7907dd13d7"},{"problem":27,"code":"(fn [items]\n  (= items\n     (if (string? items)\n       (clojure.string/join\n        (reverse items))\n       (reverse items))))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":27,"code":"(fn\n  [s]\n  (loop [i 0]\n    (if (= (nth s i) (nth s (- (count s) (+ i 1))))\n      (if (>= i (- (count s) i))\n        true\n        (recur (inc i)))\n      false)))","user":"5ec02e20e4b00a66d4a95288"},{"code":"#(=  (seq %1) (reverse %1))","problem":27,"user":"4f52ae00e4b03ad3f0c10d42"},{"code":"#(= 0 (compare (vec(seq %)) (vec(reverse(seq %)))))\n\n; C'est sûr, c'est moins efficient que \n; #(= (reverse %) (seq %))\n;\n; :-)","problem":27,"user":"513d09cbe4b0b86ece9f322e"},{"problem":27,"code":"#(let [f (seq %)] (= f (reverse f)))","user":"57372bd5e4b0cd1946bd1041"},{"problem":27,"code":"(fn [x]\n  (= x\n     (if (string? x) \n              (clojure.string/reverse x)\n              (reverse x))))","user":"54fc75fce4b07d26eda61d2a"},{"problem":27,"code":"(fn [x] (= (reverse (into () x)) (into () x)))","user":"57261810e4b0c5bde472c11c"},{"code":"(fn [xs]\n  (loop [xs xs ys (reverse xs)]\n    (cond (empty? xs) true\n      (not (= (first xs) (first ys))) false\n      true (recur (rest xs) (rest ys)))))","problem":27,"user":"4f038499535dcb61093f6b09"},{"code":"(fn [x]\n  (cond\n    (= (seq x) (reduce conj () x)) true\n    :else false))","problem":27,"user":"4e13c44a535d04ed9115e7db"},{"problem":27,"code":"#(= (apply str %)(apply str (reverse %)))","user":"5bfc082be4b0bdcf453d15e1"},{"code":"(fn [l] (let [l (seq l) r (reverse l)] (= l r)))","problem":27,"user":"504e7b88e4b069badc5a33ad"},{"code":"(fn [n]\n    (= (vec n) (vec (reverse n))))","problem":27,"user":"4ee82223535d93acb0a66877"},{"problem":27,"code":"(fn [coll]\n    (= (if (string? coll)\n         (reduce str (map str (reverse coll)))\n         (reverse coll))\n       coll))","user":"53844970e4b06839e8705eef"},{"code":"(fn [s]\n  (let [seq (into '() s)]\n    (= seq (into '() seq))))","problem":27,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn [xs] (let [s (seq xs)] (= s (reverse s))))","problem":27,"user":"50d242c0e4b06ad58337ed0f"},{"problem":27,"code":"(fn pdrome [x]\n      (or\n       (<= (count x) 1)\n       (and\n        (= (first x) (last x))\n        (pdrome (rest (take (- (count x) 1) x))))))","user":"57fc4a63e4b0d3187e900993"},{"problem":27,"code":"(fn palindrome\n  [some-sequence]\n  (let [reversed-sequence (reverse some-sequence)]\n    (if (string? some-sequence)\n      (= some-sequence (clojure.string/join reversed-sequence))\n      (= some-sequence reversed-sequence))))","user":"5c9a638fe4b048ec896c5aae"},{"code":"(fn [s] (= s (if (string? s) (clojure.string/reverse s) (reverse s))) )","problem":27,"user":"534056fce4b085b17e897dac"},{"problem":27,"code":"(fn [s] \n   (if (= (apply str s) (apply str (reverse s)))\n    true\n    false))","user":"53bc10f5e4b047364c04450d"},{"problem":27,"code":"(fn palindrome? [sequence]\n    (= (seq sequence) (reverse sequence)))","user":"587bead1e4b01531a375eb0d"},{"problem":27,"code":"#(if(<= (count %) 1) true (if (not= (first %) (last %)) false (recur (rest (butlast %)))))","user":"556cb481e4b09a3098a52501"},{"problem":27,"code":";#(loop [col (seq %)]\n;  (if (empty? col)\n;   true\n;    (if (= (first col) (last col))\n;      (recur (->> col (drop 1) drop-last))\n;     false)))\n\n#(= (seq %) (reverse %))","user":"55614155e4b0c656e3ff17c4"},{"problem":27,"code":"#(loop [x %] (cond (empty? x) true (not= (first x) (last x)) false :else (recur (take (- (count x) 2) (drop 1 x)))))","user":"59a8a4dce4b0bcf4e9a43af7"},{"problem":27,"code":"(fn [lst]\n  (let [s (seq lst)]\n    (= s (reverse s))))","user":"5498e155e4b0b312c081ff86"},{"problem":27,"code":"(fn p27 [p]\n  (= (seq p) (reverse p)))","user":"5f968f4ee4b0715f5002d7d2"},{"code":"#(let [s (if (sequential? %) % (list %))] (= (reverse s) s))","problem":27,"user":"51870799e4b057e3860ab7dc"},{"code":"#(let [total  (count %)\n       isodd  (odd? total)\n       nval   (/ (if isodd (dec total) total) 2)\n       s1     (take nval %)\n       s2     (take nval (reverse %))]\n   (= s1 s2))","problem":27,"user":"51f805b0e4b06ff1c25c52e2"},{"problem":27,"code":"(fn [x]\n  (if (= (type x) java.lang.String)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))","user":"5a19d181e4b0ff51aa4b3207"},{"code":"(fn [x]\r\n  (= (reverse x) (seq x)))","problem":27,"user":"50436470e4b034ff00315d23"},{"code":"(fn [x] \n  (loop [fwd x bck (reverse x) palindrome? true]\n    (if (= '() fwd)\n      palindrome?\n      (recur (rest fwd) (rest bck) (= (first fwd) (first bck))))))","problem":27,"user":"4f036894535dcb61093f6aad"},{"code":"(fn [x]\n  (= x (if (string? x) (clojure.string/join (reverse x)) (reverse x)))\n  )","problem":27,"user":"514c2e78e4b02b8cbb2a9279"},{"code":"(fn palin [s]\n    (if (= 1 (count s))\n        true\n        (if (and (= 2 (count s))\n                 (= (first s) (last s)))\n            true\n            (if (= (first s) (last s))\n                (palin (reverse (rest (reverse (rest s)))))\n                false))))","problem":27,"user":"4e6a6af5535d8ccf87e9fedf"},{"problem":27,"code":"#(= (into '() %) (into '[] %))","user":"54c611d1e4b045293a27f627"},{"problem":27,"code":"(fn [s]\n  (let [pivot (Math/ceil (/ (count s) 2))]\n    (= (take pivot s)\n       (take pivot (reverse s)))))","user":"576da825e4b0979f8965156c"},{"problem":27,"code":"(fn palindrome\n  [seq]\n  (if (or (= 2 (count seq)) (= 3 (count seq)))\n    (= (first seq) (last seq))\n    (and (= (first seq) (last seq)) (palindrome (rest (butlast seq))))))","user":"5f735915e4b02876ed9fd097"},{"problem":27,"code":"(fn [x] \n  (let [a (seq x) b (reverse x)]\n    (= a b)))","user":"5a7460a0e4b0512ff01cdaaf"},{"problem":27,"code":"(fn [xs]\n  (=  (reverse xs ) (vec xs))\n  )","user":"57513f88e4b02ea114799283"},{"problem":27,"code":"(fn doit [coll]\n  (if (empty? coll)\n    true\n    (if (not= (first coll) (last coll))\n      false\n      (recur (butlast (rest coll)))\n      )\n    )\n  )","user":"56c72507e4b0ed865f9758b7"},{"code":"(fn [in] (= in\n             (let [res (reverse in)]\n               (if (string? in)\n                 (apply str res)\n                 res))))","problem":27,"user":"51003cfee4b0ab35a0d40a02"},{"code":"(fn pdm [coll]\n  (let [coll_count (count coll)] \n    (cond \n      (= '() coll) true\n      (= 1 coll_count) true\n      :else (if \n              (= (first coll) (last coll))\n              (recur (rest (butlast coll)))\n              false))))","problem":27,"user":"52d51535e4b09f7907dd133a"},{"code":"#(loop [s %]\n  (cond\n      (empty? s) true\n      (not= (first s) (last s)) false\n      :else (recur (butlast (rest s)))))","problem":27,"user":"4f6688d6e4b07046d9f4ef5d"},{"code":"(fn [xs] \n  (if (empty? xs)\n    true\n    (and \n      (= (first xs) (last xs))\n      (recur (rest (take (dec (count xs)) xs))))))","problem":27,"user":"4e4fbd0c535dc968683fc4e9"},{"problem":27,"code":"(fn [lst] (let [nlst (into '() lst)] (=  nlst (reverse nlst))))","user":"550fd845e4b06e50f9beb17c"},{"code":"#(reduce (fn [a b] (and a b)) (map identical? % (reverse %)))","problem":27,"user":"4ec60dc4535d6d7199dd36c0"},{"code":"#(loop [col (seq %1)\n        rev '()\n        org col]\n   (cond\n    (empty? col) (= org rev) \n   \t:else (recur (rest col) (conj rev (first col)) org)))","problem":27,"user":"52fc89b2e4b047fd55837019"},{"problem":27,"code":"(fn [ls]\n\t(loop [ls ls]\n\t\t(if (or (empty? ls) (= (count ls) 1))\n\t\t\ttrue\n\t\t\t(if (= (first ls) (last ls))\n\t\t\t\t(recur (rest (drop-last ls)))\n\t\t\t\tfalse))))","user":"5d125d63e4b02c15ef021999"},{"problem":27,"code":"(fn [x] (= (reverse (into [] x)) (into [] x)))","user":"58e325f3e4b005f69f193ca7"},{"code":"(fn [col]\n  (= (reverse col) (seq col)))","problem":27,"user":"4e7e8485535db169f9c79716"},{"problem":27,"code":"#( = (reverse(seq %)) (seq %))","user":"5a534241e4b05d388ecb6c0a"},{"problem":27,"code":"(fn palindrome? [truc]\n  (if (string? truc)\n    (= truc (apply str (reverse truc)))\n    (= truc (reverse truc))))","user":"54100c73e4b01498b1a7199e"},{"code":"#(let [k (int (/ (count %) 2))]\n           (if (odd? (count %))\n             (if (= (take k %) (into () (nthnext % (+ k 1)))) true false)\n             (if (= (take k %) (into () (nthnext % k))) true false)))","problem":27,"user":"4e1fe800535d04ed9115e811"},{"problem":27,"code":"(fn x [data] \n  (let [v (vec data)]\n    (= (reverse v) v)))","user":"5c68f931e4b0fca0c16226ea"},{"problem":27,"code":"#(loop [elements %]\n  (if (<= (count elements) 1)\n    true\n    (if (= (first elements) (last elements))\n      (recur (take (- (count elements) 2) (rest elements)))\n      false)))","user":"5af1cb6be4b0cc2b61a3bc64"},{"problem":27,"code":"(fn [c]\n  (let [c-seq (seq c)]\n    (= (reverse c-seq) c-seq)))","user":"54d90b36e4b0a52adc2e2049"},{"problem":27,"code":"(fn [xs]\n  (if (< (count xs) 2)\n     true\n     (if (not= (first xs) (last xs))\n       false\n       (recur (drop-last (rest xs)))\n     )\n  ) \n)","user":"5e42ba49e4b01d43a70e8e6c"},{"problem":27,"code":"; #(every? true? (map = % (reverse %)))\n\n#(= (seq %) (reverse %))","user":"5d98f616e4b0d3f9b434ad3c"},{"code":"(fn palindrome [input]\n    (if(string? input)\n        (= input (apply str (reverse input)))\n        (= input (reverse input))\n    )\n)","problem":27,"user":"51d1111ce4b067c36548635f"},{"problem":27,"code":"(fn [s]\n      ((fn rec [s s1 s2 n]\n         (if\n           (= (count s) n)\n           (= s1 s2)\n           (rec s (conj s1 (str (nth s n))) (conj s2 (str (nth s n))) (inc n))\n         )\n      ) s [] '() 0))","user":"58b43bf5e4b0ebc645576d38"},{"problem":27,"code":"(fn [someseq] (= (seq someseq) (reverse (seq someseq))))","user":"5e9878b9e4b0157ca96647d8"},{"problem":27,"code":"(\n\tfn function [var] \n  \t(\n     \t\n         if (string? var)\n     \t\t(= (str var) (apply str(reverse var)))\n     \t\t(= var (reverse var))\n    \n         \n     )\n)","user":"548018e8e4b0c51c1f4d7333"},{"code":"#(if (string? %1)\n   (= (apply str (reverse %1)) %1)\n   (= (reverse %1) %1)\n   )","problem":27,"user":"4f99ae4ae4b0dcca54ed6d00"},{"problem":27,"code":"(fn check-reverse [coll]\n  (if (string? coll)\n    (= (clojure.string/reverse coll) coll)\n    (= (reverse coll) coll)))","user":"5606ab32e4b08b23635d3176"},{"problem":27,"code":"(fn par [x]\n  (cond (<= (count x) 1) true\n        (= (first x) (last x)) (par (rest \n                                      (reverse (rest (reverse x)))\n                                    )\n                               )\n        true false\n  )\n)","user":"54d707bde4b0a52adc2e2025"},{"code":"(fn [seq]\n  (loop [original (vec seq)]\n    (let [len (count original)]\n      (if (or (= 0 len) (= 1 len))\n        true\n        (if (= (first original) (last original))\n          (recur (rest (drop-last original)))\n          false)))))","problem":27,"user":"52b94f15e4b07a9af57922ba"},{"code":"(fn [x]\r\n(if (string? x)\r\n (let [y (re-seq #\"\\w\" x)]\r\n    (= y (reverse y))) \r\n (= x (reverse x))))","problem":27,"user":"4ea09441535d7eef308072a7"},{"code":"#(if (< (count %) 2) true (if (= (first %) (last %)) (recur (butlast (rest %))) false))","problem":27,"user":"534aa5d3e4b084c2834f4a6b"},{"code":"(fn [coll] (= (seq coll) (reverse coll)))","problem":27,"user":"4e3f595d535dc968683fc498"},{"code":"(fn palindrome [x]\r\n    \"Detect if the sequence is a palindrome\"\r\n\t  (if (empty? x)\r\n\t      true\r\n\t      (and (= (first x) (last x)) (palindrome (butlast (rest x))))))","problem":27,"user":"4e370a04535deb9a81d77f37"},{"code":"(fn [s] (= (reverse (seq s)) (seq s)))","problem":27,"user":"4ec5fb83535d6d7199dd36bd"},{"code":"(fn [x] (= (seq x) (-> x reverse)  ))","problem":27,"user":"533a7d56e4b0e30313ee6cbc"},{"code":"#(let [rev (reverse %)\n        s (string? %)]\n      (if s\n        (= % (apply str rev))\n        (= % rev)))","problem":27,"user":"4f702dcae4b07046d9f4eff4"},{"problem":27,"code":"(fn [x] (= (apply str x) (apply str (loop [l x res ()]\n          (if (seq l)\n            (recur (rest l) (conj res (first l)))\n            res)))))","user":"566bd453e4b0a866af6896b7"},{"problem":27,"code":"(fn [x]\n  (= (seq (reverse x)) (seq x)))","user":"543170b2e4b0dad94371f2e7"},{"problem":27,"code":"(fn pal [lst] (if (< (count lst) 2) true (and (= (first lst) (last lst)) (pal (drop 1 (drop-last 1 lst)))) ) )","user":"56afb527e4b061e3ca319ad7"},{"code":"(fn [[fst & rst :as seq]]\n  (and (not (empty? seq))\n       (or (some #(= % fst) rst)\n           (recur rst))))","problem":27,"user":"4e7c8fd1535db169f9c796be"},{"problem":27,"code":"(fn [p]\n\t(loop [cnt (- (quot (count p) 2) 1) is-palindrome true]\n\t\t(if (or (< cnt 0) (not is-palindrome))\n\t\t\tis-palindrome\n\t\t\t(recur (dec cnt) (= (nth p cnt) (nth p (- (count p) cnt 1)))))))","user":"54b83ae9e4b0ed20f4ff6e95"},{"code":"#(let [lst (apply list %)] (= lst (reverse lst)))","problem":27,"user":"52084f75e4b01ce6bbf31dde"},{"problem":27,"code":"#(if (odd? (count %))\n   (= (rest (reverse (first (partition-all (/ (count %) 2) %)))) (second (partition-all (/ (count %) 2) %)))\n   (= (reverse (first (partition-all (/ (count %) 2) %))) (second (partition-all (/ (count %) 2) %))))","user":"5d6b5c42e4b04d129b00f2a7"},{"problem":27,"code":"(fn [xs]\n  (if (= (seq xs) (reverse (seq xs)))\n    true\n    false))","user":"6001d240e4b074f607df6627"},{"code":"(fn foo [res] \n   (if \n     (= res '()) \n     true\n\t (if \n\t (= (first res) (first (reverse res)))\n     (foo (rest (reverse (rest (reverse res)))))\n\t false\n\t)\n\t)\n  )","problem":27,"user":"51a0e0b7e4b0b292b01ee3fb"},{"code":"#(if (= (vec %) (reverse %)) true false)","problem":27,"user":"5079fd71e4b08327cd804a66"},{"problem":27,"code":"#(let [lst %\n             size (count %)\n             half (/ size 2)]\n    (= (take half lst) (take half (reverse lst))))","user":"53882352e4b0640c7a9a5898"},{"problem":27,"code":"(fn [list] (loop [x 0 y (- (count list) 1)] (if (>= x y) true (if (= (nth list x) (nth list y)) (recur (inc x) (dec y)) false))))","user":"544125ade4b032a45b86936a"},{"code":"(fn [start]\n  (if (string? start)\n    (= start (apply str (reduce conj () start)))\n    (= start (reduce conj () start))))","problem":27,"user":"523d06aae4b0dbf0c301728b"},{"problem":27,"code":"(fn [x](if (string? x)\n                (= x (clojure.string/join(reverse x)))\n                (= x (reverse x))))","user":"582dc562e4b051871117bfcb"},{"code":"#(let [s (seq %)\n       r (reverse s)]\n    (= s r))","problem":27,"user":"4fda01cde4b05e33b9224f43"},{"code":"(fn\n  [x]\n  (loop [col x\n         res true]\n    (if (<= (count col) 1)\n      res\n      (recur (vec (drop-last (drop 1 col))) (if (and (= (first col) (last col)) (not= false res))\n                                              true\n                                              false)))))","problem":27,"user":"531016d0e4b08068f379ecd1"},{"code":"(fn pal [s]\n  (if (or (empty? s) (= (count s) 1))\n    true\n    (if (= (first s) (last s))\n      (pal (rest (butlast s)))\n      false)))","problem":27,"user":"504dffe2e4b078edc5f5938b"},{"problem":27,"code":"(fn f [s] \n  (or\n    (= s '())\n    (and (= (first s) (last s)) (f (rest (drop-last s))))\n  )\n)","user":"5b8b326de4b0c0b3ffbd49b8"},{"problem":27,"code":"#(loop [head 0\n         tail (dec (count %))]\n    (if (> head tail)\n      true\n      (if (= (nth % head) (nth % tail))\n        (recur (inc head) (dec tail))\n        false)))","user":"5977653be4b01722bebd4ced"},{"problem":27,"code":"(fn p [x] (or (<= (count x) 1)\n              (and (= (first x) (last x)) \n                   (p (drop-last (rest x))))))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":27,"code":"(fn [xs]\n  (if (string? xs)\n    (= (apply str (reverse xs)) xs)\n  \t(= (reverse xs) xs)))","user":"5583888ae4b05c286339e117"},{"code":"(fn [coll] (let [s (seq coll) r (reverse s)] (= s r)))","problem":27,"user":"4e4be570535dc968683fc4d8"},{"problem":27,"code":"(fn\n  [x]\n  (= x (if (string? x) \n       (apply str (reverse x)) \n       (reverse x))))","user":"5d1272fde4b02c15ef02199c"},{"problem":27,"code":"(fn pl [s] (= s (if (instance? String s) (apply str (reverse s)) (reverse s))))","user":"5a487d9ce4b05d388ecb6b67"},{"code":"#(let [half (/ (count %) 2)] (= (take half %) (take half (reverse %))))","problem":27,"user":"513a2f23e4b067e25a345ec6"},{"problem":27,"code":"(fn f [c] (if (empty? c) true (and (= (first c) (last c)) (f (reverse (rest (reverse (rest c))))))))","user":"59614d9ce4b066ee0a44b09d"},{"problem":27,"code":"(fn [xs]\n  (let [n (count xs)\n        h (Math/floor (/ n 2))]\n    (= (take h xs)\n       (take h (reverse xs)))))","user":"559141b1e4b0604b3f94d576"},{"problem":27,"code":"(fn [coll]\n  (reduce #(and %1 %2) true (map = coll (reverse coll))))","user":"5535d34be4b09218d5f44fb0"},{"problem":27,"code":"(fn pali? [word]\n  (if (<= (count word) 1) \n    true\n    (let [s (first word)\n          e (last word)]\n      \n      (and (= s e) (pali? (butlast (rest word))))\n      )\n    )\n  \n  \n  )","user":"55f8fd70e4b03cbcff9738bc"},{"code":"(fn[x] (= (seq x) (seq (reverse x))))","problem":27,"user":"525cc912e4b0cb4875a45d48"},{"problem":27,"code":"(fn [lst]\n  (= (seq lst) (reverse (seq lst))))","user":"5522a795e4b0882d96d091a7"},{"problem":27,"code":"(fn [original] (= (seq original) (reverse (seq original))))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":27,"code":"(fn palindrome?\n  [coll]\n  (= (seq coll) (reverse coll)))","user":"53e57ba2e4b036ad0777e45c"},{"code":"(fn [s]\n  (if (next s)\n    (and (= (first s) (last s)) \n        (recur (rest (reverse (rest s)))))\n    true))","problem":27,"user":"5245e25ae4b09dbe66b56176"},{"problem":27,"code":"(fn [l]\n  (loop [lst (vec l)] \n    (if (= 1 (count lst))\n      true\n      (if (= (first lst) (last lst))\n        (recur [(rest (pop lst))])\n        false\n      ))))","user":"53e76728e4b036ad0777e47c"},{"code":"(fn [arg]\n\t   (let [a (vec arg)]\n \t     (= a (reverse a))))","problem":27,"user":"4f47d84fe4b0d56e7bb92bc3"},{"code":"(fn [c] (reduce #(and % %2) (map = c (reverse c))))","problem":27,"user":"502a5fa4e4b09e8f859a9fbd"},{"code":"(fn pal \n  ([s]\n  \t(if\n      (odd? (count s))\n      (pal s (/ (- (count s) 1) 2))\n      (pal s (/ (count s) 2))\n    ))\n  ([s c]\n  \t(if\n  \t\t(< c 0)\n  \t\ttrue\n  \t\t(if\n  \t\t\t(= (nth s c) (nth (reverse s) c))\n  \t\t\t(pal s (- c 1))\n  \t\t\tfalse)))\n)","problem":27,"user":"50f84d85e4b0aafb827eb1f7"},{"problem":27,"code":"#( if (instance? String %) (= (apply str(reverse %)) %) (= (reverse %) %))","user":"58617a1fe4b0f14aab7c87f0"},{"problem":27,"code":"(fn palindrome? [sequence]\n  (= (seq sequence) (reverse sequence)))","user":"5c8cfff8e4b048ec896c5996"},{"problem":27,"code":"#(let [len (quot (count %) 2)]\n                (=\n                  (take len %)\n                  (reverse (take-last len %))))","user":"5f5a2cc6e4b0a0bc16850aa4"},{"code":"(fn [elems]\n  (= (seq elems) (reverse elems)))","problem":27,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn [x] (= (seq x)(reverse x)))","problem":27,"user":"4fcf7170e4b03432b189f412"},{"problem":27,"code":"(fn\n       [in]\n       (cond\n         (= (class '(1)) (class in)) (= in (into '() in) )\n         (= (class [1]) (class in))  (= in (into [] (reverse in)))\n         (= (class \" \") (class in)) (= (str in) (clojure.string/reverse in))\n         ))","user":"5683b67ce4b0945ebc182a9f"},{"code":"#(loop [i %]\r\n  (if (empty? i)\r\n      true\r\n      (if (= (first i) (last i))\r\n              (recur (butlast (rest i)))\r\n              false)))","problem":27,"user":"4fdbc075e4b05e33b9224f61"},{"problem":27,"code":"(fn [t]\n  (= (seq t)\n     (reduce conj '() t)))","user":"55ef2f27e4b066087aa94532"},{"problem":27,"code":"#(= (seq %) (reverse %)\n   )","user":"54494159e4b032a45b8693d1"},{"code":"(fn pal [coll]\n  (if (>= 1 (count coll))\n    true\n    (let [f (first coll)\n          l (last coll)\n          mid (rest (reverse (rest coll)))]\n      (if (= f l)\n        (pal mid)\n        false\n        )\n      )\n    )\n  )","problem":27,"user":"5150a7d7e4b03e678e393abb"},{"problem":27,"code":"#(let [x (seq %)]\n     (if \n       (= x (reverse x))\n       true\n       false))","user":"55e84475e4b0121d4835fd8b"},{"problem":27,"code":"(fn pal? [x]\n  (if (empty? (rest x))\n    true\n    (if (= (first x) (last x))\n      (pal? (reverse (rest (reverse (rest x)))))\n      false)))","user":"55a35ef4e4b0acc240e31535"},{"problem":27,"code":"(fn [xs] (if (string? xs) (= xs (apply str (reverse xs)))\n                 (= xs (reverse xs))))","user":"5488872ee4b0e286459a11d3"},{"problem":27,"code":"(fn [seq]\n  (= seq\n     (if (string? seq)\n       (apply str (vec (reverse seq)))\n       (reverse seq))\n     ))","user":"5d25578de4b02ea6f0fb6a33"},{"problem":27,"code":"(fn [n]\n   (loop [c n\n          s '()]\n     (println c s)\n     (if (empty? c)\n       (if (empty? s)\n         true\n         false)\n       (if (= (first s) (first c))\n         (recur (rest c) (rest s))\n         (if (and (odd? (+ (count s) (count c))) (> (count s) (count c)))\n           (recur c (rest s))\n           (recur (rest c) (cons (first c) s)) ) ))))","user":"5df75fd8e4b0a607a9a45c92"},{"problem":27,"code":"(fn a [xs]\n  (let [l (first xs)\n        r (last xs)\n        m (rest (butlast xs))]\n    (if (= l r)\n      (if (empty? m)\n        true\n        (a m))\n      false)))","user":"5c50154be4b0f9f7a8770ebc"},{"code":"(fn [s] (= (seq s) (seq (reverse s))))","problem":27,"user":"4e1f60a6535d04ed9115e80b"},{"problem":27,"code":"(fn [x]\n  (if (instance? String x)\n    true\n    (= (reverse x) x)))","user":"5755e66ee4b02ea1147992cf"},{"problem":27,"code":"(fn fel? [txt]\n  (if (or (empty? txt)\n          (= (count txt) 1))\n    true\n    (let [h (first txt)\n  \t      t (last txt)\n          lst (butlast (next txt))]\n      (if (= h t)\n        (fel? lst)\n        false))))","user":"5895477fe4b00487982d527c"},{"problem":27,"code":"(fn palindrome[in]\n  (=(seq in) (reverse in))\n  )","user":"5e1363cce4b099d064962ffc"},{"code":"#(loop [xs %1] (cond (not (= (first xs) (last xs))) false (empty? xs) true true (recur (rest (butlast xs)))))","problem":27,"user":"4eda77c0535d10e5ff6f530d"},{"code":"(fn [x]\n        (if (empty? x)\n          true\n          (if (= (first x) (last x))\n            (recur (drop-last(rest x)))\n            false)))","problem":27,"user":"5311081be4b08068f379ece3"},{"problem":27,"code":";; My first answer: make a pairs of given seq and reversed-seq, check each elements is same, and compare length of it.\n;(fn [ls] (= (count ls) \n;            (count (filter #(= (first %) (last %)) \n;                           ;; make a seq of pairs of given seq and reversed-seq\n;                           (map vector (reverse ls) ls))))) \n\n;; Answer for more smart people.\n\n#(= (seq %) (reverse %))","user":"5bfa3e02e4b0bdcf453d15ca"},{"problem":27,"code":"(fn palidrome\n  [x]\n  (if (= (reverse (seq x)) (seq x) )\n    true\n    false))","user":"58b18ba0e4b0ebc645576cfa"},{"code":"(fn testP [s] (if (->> s count (< 1)) (if (= (last s) (first s)) (testP (->> s (take (- (count s) 1)) (drop 1))) false) true))","problem":27,"user":"5162757ee4b03cfa3774b3fe"},{"code":"#(loop [x %]\n    (if (< (count x) 2)\n         true\n         (if (= (last x) (first x))\n           (recur (drop 1 (take (dec (count x)) x)))\n           false)))","problem":27,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"(fn palindrome [x]\n  (= (reverse (seq x)) (seq x)))","problem":27,"user":"525805bbe4b0cb4875a45ca1"},{"problem":27,"code":"(fn [s]\n  (even? (count (set s)))\n  )","user":"584d8724e4b0b7285a6f4e3e"},{"code":"#(= % (if (string? %) (clojure.string/reverse%) (reverse %)))","problem":27,"user":"507330e6e4b0e3170b5a8698"},{"problem":27,"code":"(fn fc27 [l]\n  (if (empty? l) true\n    (and (= (first l) (last l))\n         (fc27 (butlast (rest l))))))","user":"547884d7e4b0c51c1f4d72bd"},{"problem":27,"code":"(fn palindrome\n  [lst]\n  (let [f (first lst)\n        l (last lst)\n        lst (seq lst)]\n    (cond\n          (empty? lst) true\n          (= (count lst) 1) true\n          (= f l) (recur (->> lst (drop-last 1) (drop 1)))\n          (not= f l) false)))","user":"5b73e500e4b047b03b2036ba"},{"problem":27,"code":"(fn [val]\n    (let [seq-val (seq val)]\n        (= seq-val (reverse seq-val))))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":27,"code":"#(= (apply str (reverse %1)) (apply str (seq %1)))","user":"4f847f0ee4b033992c121c33"},{"code":"(fn [x] (let [s (seq x)]\n          (= s (reverse s))))","problem":27,"user":"52299d14e4b04c906c9c6a7e"},{"code":"(fn [s]\n  (= (seq s) (reverse s)))","problem":27,"user":"4eb593e6535d7eef30807368"},{"code":"(fn[x](= (seq x) (reverse x)))","problem":27,"user":"50b4a37ee4b0c464d223d1bb"},{"code":"(fn [x]\n  (let [r (reverse x)]\n      (if (string? x) (= (apply str r) x)\n                      (= r x)\n    )\n  )\n)","problem":27,"user":"4f2582bae4b0d66497709ff6"},{"problem":27,"code":"(fn [x] (= (seq x) (reverse x) ))","user":"5991eec7e4b0866487ed0d6e"},{"code":"#((fn P[x y](if(and(empty? x)(empty? y))true(if(=(first x)(first y))(P(rest x)(rest y))false)))%(reverse %))","problem":27,"user":"536c77f1e4b0fc7073fd6e3f"},{"problem":27,"code":"#(let [length (count %)\n      q (quot length 2)]\n   (loop [a1 (take q %)\n          a2 (reverse (drop (- length q) %))]\n     (if (empty? a1) true\n       (if (not= (first a1) (first a2)) false\n         (recur (rest a1) (rest a2))))))","user":"56d8a63fe4b0ea9b8538f7e8"},{"problem":27,"code":"(fn palin\n  [coll]\n  (if (= (type coll) java.lang.String)\n    (= (reduce str (reverse coll)) coll)\n    (= (reverse coll) coll)))","user":"5d6b21efe4b04d129b00f2a3"},{"code":"(fn [xs]\n  (cond\n   (empty? xs) true\n   (= (first xs) (last xs)) (recur (butlast (rest xs)))\n   :else false))","problem":27,"user":"5392bfdee4b0b51d73faaeb2"},{"code":"(fn [sequence] (= (seq sequence) (reverse sequence)))","problem":27,"user":"4fb91026e4b081705acca2d9"},{"code":"(fn  [inStr]\n   (if (seq inStr)\n     (if (= (first inStr) (last inStr))\n       (recur (butlast (rest inStr)))\n       false)\n     true\n   )\n )","problem":27,"user":"525ee103e4b0cb4875a45dbb"},{"code":"(fn pal\n  ([x]\n     (pal x (reverse x)))\n  ([x y]\n     (or (empty? x)\n         (and (= (first x) (first y)) (pal (rest x) (rest y))))))","problem":27,"user":"524f213be4b0541d1855b7ff"},{"problem":27,"code":"(fn p [word]\n  (if (< (count word) 2) \n    true\n    (and \n     (= (first word) (last word))\n     (p (butlast (rest word))))))","user":"55e357dae4b050e68259b442"},{"problem":27,"code":"#( = (reverse(reverse %)) (reverse %))","user":"55a65872e4b09e57187da299"},{"problem":27,"code":"(fn pal-check [coll]\n  (if (= coll ())\n    true\n    (and (= (first coll) (last coll))\n         (pal-check (rest (butlast coll))))))","user":"54e4e14ce4b024c67c0cf7f1"},{"problem":27,"code":"(fn [x] (if (string? x)\n          (= (apply str (vec (reverse x))) x)\n          (= (reverse x) x)))","user":"54af3d22e4b09f271ff37d04"},{"code":"(fn symmetry [coll]\n          (if (= (count coll) 0)\n            true\n            (if (= (first coll) (last coll))\n              (symmetry (rest (drop-last 1 coll)))\n              false)))","problem":27,"user":"4f1bee08535d64f60314647e"},{"code":"#(= (vec %1) (reverse (vec %1)))","problem":27,"user":"52c4cb2fe4b0c2d177d620e5"},{"problem":27,"code":"(fn pali [sq]\n  (if (> 2 (count sq))\n    true\n    (if (= (first sq) (last sq))\n      (pali (rest (drop-last sq))) false)))","user":"5c76577ae4b0fca0c16227ea"},{"problem":27,"code":"(fn [a] (= (apply list a) (reverse a)))","user":"55934bebe4b0c79f6e1db93b"},{"problem":27,"code":"(fn palindrome? [lst]\n  (= (sequence lst) (reverse (sequence lst))))","user":"57f8151ce4b0d3187e900912"},{"code":"#(= % \n  ((fn [x] \n    (if (string? x) \n      (apply str (reverse x)) \n      (reverse x))) %))","problem":27,"user":"4f017593535dcb61093f6a36"},{"problem":27,"code":"(fn palindrome? [s]\n  (loop [si s]\n    (if (<= (count si) 1)\n        true\n        (if (= (first si) (last si))\n          (recur (drop 1 (drop-last si)))\n          false))))","user":"5b9bcba8e4b0c0b3ffbd4b07"},{"code":"(fn [seq]\n    ((fn palindrome[n1 n2]\n        (if (< n1 n2)\n            (if (= (nth seq n1)\n                   (nth seq n2))\n                (palindrome (inc n1) (dec n2))\n              false)\n          true)) 0 (dec (count seq))))","problem":27,"user":"535f0cbde4b04ce2eb3ed2d9"},{"problem":27,"code":"(fn palin [x]\n  (if (instance? String x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))","user":"5889b012e4b0f1effa3b7744"},{"code":"(fn [s] \n  (let [half (quot (count s) 2)\n        first (take half s)\n        second (take-last (- (count s) half) s)]\n\t(if (= (count first) (count second))\n            (= first (reverse second))\n            (= first (reverse (rest second))))))","problem":27,"user":"4f036c50535dcb61093f6aba"},{"problem":27,"code":"#(=\n  \t%\n  \t(if (string? %)\n      (clojure.string/join \"\" (reverse %))\n      (reverse %)\n  \t)\n  )","user":"5ae246b1e4b0837691e92c5d"},{"code":"(fn [a]\n  (if (string? a) \n    (= a (clojure.string/reverse a))\n    (= a (reverse a))))","problem":27,"user":"51383346e4b0a5db03d727d4"},{"problem":27,"code":"(fn [n] (= (reverse (seq n)) (seq n)))","user":"53ec14b9e4b036ad0777e500"},{"problem":27,"code":"(fn [s] \n  (let [r (reverse s)]\n        (or (= r s)\n            (= (apply str r) s))))","user":"53b14dfce4b047364c04448d"},{"problem":27,"code":"(fn [lst]\n  (let [n (count lst)\n        l (take (quot n 2) lst)\n        r (drop (- n (quot n 2)) lst)]\n    (= l (reverse r))))","user":"545e7ab0e4b01be26fd7467c"},{"problem":27,"code":"(fn [xs] (if (string? xs) (if (= (clojure.string/reverse xs) xs) true false)\n(if (= (reverse xs) xs) true false)))","user":"58eadeafe4b056aecfd47d28"},{"problem":27,"code":"(fn[s]  (= (seq s) (reverse s)))","user":"508daac4e4b0f17d83ea26c0"},{"code":"(fn palin [x](\n       cond \n             (< (count x)2) true\n             (not= (first x)(last x)) false\n              :else\n               (palin (drop-last (rest x)))\n        ))","problem":27,"user":"51427a8be4b0b50abeb46b37"},{"problem":27,"code":"(fn is-palindrom? [xs] (= (vec xs) (reverse xs)))","user":"5f82cfcce4b0c071e6c840fb"},{"code":"(fn [x] (= (reverse x ) (seq x)))","problem":27,"user":"50f3ce2ee4b041536e2eca3d"},{"problem":27,"code":"#(= ((comp vec reverse) %) (vec %))","user":"549a176ce4b0f3d1d8e70f69"},{"problem":27,"code":"(fn palindrome [s]\n  (if (empty? s)\n    true\n    (if (not= (first s) (last s))\n      false\n      (palindrome (rest (drop-last s))))))","user":"556873cee4b0c656e3ff1853"},{"code":"#(let [coll (vec %)]\n  (= coll (reverse coll)))","problem":27,"user":"4f7e33a6e4b06e829148e1cb"},{"code":"(fn [x]\n  (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))","problem":27,"user":"4fc68fc4e4b0ee37620e1816"},{"problem":27,"code":"(fn\n        [xs]\n        (if (string? xs)\n          (= (clojure.string/join \"\" (reverse xs)) xs)\n          (= xs (reverse xs))))","user":"5e1c24f4e4b0dc959400852d"},{"code":"#(\n  = (reverse %) (seq %)\n  )","problem":27,"user":"52d079f2e4b07d0d72b273ba"},{"code":"(comp\r\n  (fn [es]\r\n    (if (nil? es) true\r\n    (if (= (first es) (last es))\r\n         (recur (-> es rest butlast))\r\n      false)))\r\n   seq)","problem":27,"user":"4ff3df0fe4b0678c553fc355"},{"problem":27,"code":"(fn [xs]\n  (if (string? xs) true\n    (= xs (reverse xs))))","user":"55e732c5e4b050e68259b492"},{"problem":27,"code":"(fn sex [xx] \n  (let [len (count xx) begin (take len xx) end (reverse(take-last len xx))]\n    (= begin end)))","user":"55f01316e4b06e875b46ce1a"},{"code":"#(if (or (empty? %) (= 1 (count %))) true (if (= (first %) (last % ))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(recur (rest (butlast %))) false ))","problem":27,"user":"4dfd7ecf535d04ed9115e783"},{"problem":27,"code":"(fn  [[f & r]] (\n  if (empty? r) true \n  (if (= f (last r)) (recur (drop-last r)) false)\n )\n )","user":"5fdc6ad4e4b05ac5b16ea13a"},{"problem":27,"code":"#(-> (if (string? %) \n        (apply str (reverse %))\n        (reverse %))\n     (= %))","user":"5ee7274ce4b029a2061bbea0"},{"code":"(fn pe [s]\n  (if (not (second s))\n  true\n  (and (= (first s) (last s)) (-> s butlast rest pe))))","problem":27,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn [sq]\n  (loop [s sq]\n    (cond \n      (empty? s) true\n      (not (= (first s) (last s))) false\n      :else (recur (rest (butlast s)))\n  )))","problem":27,"user":"4eadc217535d7eef30807321"},{"problem":27,"code":"(fn [zeq] (= (seq zeq) (reverse zeq)))","user":"5ea97df7e4b00a66d4a951c8"},{"problem":27,"code":"(fn [x]\n\t(if (string? x)\n\t\t(= x (clojure.string/reverse x))\n\t\t(= x (reverse x))\n\t)\n)","user":"5838d5ede4b089d5ab817d32"},{"problem":27,"code":"#(let [s (seq %)]\n   (-> s\n       reverse\n       (= s)))","user":"565fe49ee4b068f2fe63dc46"},{"problem":27,"code":"(fn [x] (loop [x x]\n          (if (or (= (count x) 0)(= (count x) 1) (= (first x) (last x)))\n            true\n          (let [start (first x)\n               end (last x)]\n          \t(if (not= start end)\n            \tfalse        \n          \t\t(recur (rest (drop-last x)\n                             )\n                       )\n              )\n                \n            )\n          )\n          )\n  )","user":"5856cdd6e4b0f14aab7c86fa"},{"problem":27,"code":"(fn [sec]\n  (= (seq (reverse sec)) (seq sec)))","user":"5a125a38e4b04bbd27e6da39"},{"code":"(fn [coll]\n    (= (seq coll) (reverse (seq coll))))","problem":27,"user":"4e6e97ca535d5021c1a8960c"},{"code":"(fn [x] (=(seq x)(reverse x)))","problem":27,"user":"52ecd34ee4b0705949c44457"},{"problem":27,"code":"(fn [x] (let [n (/ ((fn [t]\n                       (loop [list t, len 0]\n                         (if (empty? list)\n                           len\n                           (recur (next list) (inc len)))))\n                      x)\n                    2)\n               s (take n x)\n               s2 (take n (reverse x))]\n           (= s s2)))","user":"56669819e4b0e91d5f5c5674"},{"code":"(fn[l] (let [h (/ (count l) 2)]\n         (=\n           (reverse (drop-last h l))\n           (drop h l)\n          )\n       )\n)","problem":27,"user":"520aaac2e4b01da9d47a99e6"},{"code":"(fn palindrome? [s]\n  (or\n   (empty? s)\n   (and\n     (= (first s) (last s))\n     (palindrome? (rest (butlast s))))))","problem":27,"user":"4f55f4b1e4b0a7574ea7180d"},{"problem":27,"code":"(fn [s] (if (empty? s) true (let [a (first s) b (last s)] ( if (= a b) ( recur(rest (butlast s))) false))))","user":"5ac4d1f6e4b0e27600da7735"},{"problem":27,"code":"(fn [l] (= l ((if (= java.lang.String (type l))\n                clojure.string/reverse\n                reverse) l)))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":27,"code":"(fn [x]\n  (if (= (reverse x) (seq x))\n         true\n         false))","user":"5f63d933e4b02876ed9fd018"},{"code":"(fn [s] (= (take (/ (count s) 2) (reverse s)) (take (/ (count s) 2) s)))","problem":27,"user":"531ba143e4b08068f379ed91"},{"code":"(fn palindrome? [l] \n                        (if (< 2 (count l))\n\t                        (if (= (first l) (last l))\n\t                          (palindrome? (rest (butlast l)))\n\t                          false \n                           )\n\t                        true\n                         )     \n  )","problem":27,"user":"5210e5c5e4b080a8d9b9d63f"},{"problem":27,"code":"(fn [x]\n  (if (= \n       (if (string? x)\n        (clojure.string/join (reverse x))\n        (reverse x)) x)\n    true\n    false))","user":"55756d34e4b05c286339e062"},{"code":"(fn [s]\n  (let [len (count s)]\n    (let [half-len (quot len 2)\n          skip-len (rem len 2)]\n    (= (reverse (take half-len s)) (drop (+ half-len skip-len) s)))))","problem":27,"user":"4ea4fe1f535d7eef308072cf"},{"problem":27,"code":"(fn detect-palin [l]\n\t(if (= (count l) 0)\n\t\ttrue\n\t\t(if (= (count l) 1)\n\t\t\ttrue\n\t\t\t(if (= (first l) (last l))\n\t\t\t\t(detect-palin (drop-last (rest l)))\n\t\t\t\tfalse))))","user":"5a025edde4b01bb0ae8afd64"},{"code":"#(let [n (quot (count %) 2)]\n  (= (take n %) (take n (reverse %))))","problem":27,"user":"4e16bdef535d04ed9115e7e9"},{"problem":27,"code":"#(= % (if (instance? String %) (apply str (reverse %)) (reverse %)) )","user":"587cf147e4b01531a375eb29"},{"problem":27,"code":"(fn palindrome [x]\n  (cond\n   (<= (count x) 1) true\n   (= (last x) (first x)) (palindrome (butlast (rest x)))\n   :else false\n   )\n  )","user":"56942b5fe4b0dcc4269f411c"},{"problem":27,"code":"(fn f [l]\n  (if (empty? l)\n    true\n    (if (= (first l) (last l))\n      (f (butlast (rest l)))\n      false)))","user":"58b26da4e4b0ebc645576d0a"},{"problem":27,"code":"(fn [x]\n  (loop [s x]\n    (if (= (count s) 0)\n      true\n      (if-not (= (first s) (last s))\n       false\n      (recur (rest (butlast s)))))))","user":"55aaa36fe4b0988bba2ad94f"},{"problem":27,"code":"#(let [num-items (int (/ (count %) 2)) \n       first-half (take num-items %) \n       second-half (take-last num-items %)] \n   (= first-half (reverse second-half)))","user":"594266cfe4b060784b3b790b"},{"code":"(fn [coll] (= coll (if (string? coll) (clojure.string/reverse coll) (reverse coll))))","problem":27,"user":"51b9f5a6e4b0e871ca49590e"},{"problem":27,"code":"(fn [tsequence] (= (reverse tsequence) (seq tsequence)))","user":"56351709e4b0bfe05bf117c2"},{"problem":27,"code":"#(= (reverse %1) ( seq %1))","user":"571ac0b8e4b07c98581c3b5b"},{"problem":27,"code":"(fn [s] (if (string? s)\n          (= s (apply str (reverse s))) \n          (= s (reverse s) )  \n          )\n  )","user":"56cd67c1e4b0ea9b8538f74a"},{"code":"#(= (seq %) (reverse (seq %)))","problem":27,"user":"4de6c970535d08e6dec9fdf6"},{"problem":27,"code":"#(loop [x %]\n   (if (empty? x) true\n     (if (= (first x)(last x))\n       (recur (rest (drop-last x)))\n       false)))","user":"579ea15ee4b05b1deef9ae2a"},{"code":"#(loop [f %\n       b (reverse %)]\n  (if (empty? f)\n    true\n    (if (not= (first b) (first f))\n      false\n      (recur (rest f) (rest b)))))","problem":27,"user":"4f9b3532e4b0dcca54ed6d13"},{"problem":27,"code":"(fn this [x]\n     (cond\n       (= x ()) true\n       (= (first x) (last x)) (this (rest (butlast x)))\n       :else false\n       )\n   \n   \n   \n   )","user":"59165082e4b09b4ee5954b88"},{"code":"(fn [l] (= (reduce str l)(reduce str (reverse l))))","problem":27,"user":"53217912e4b09d4e7a9b54b3"},{"problem":27,"code":"(fn mr [c] (= ((fn mf [res coll] ( if (empty? coll) (if (string? c) (apply str res) res) (mf (conj res (first coll)) (rest coll) ) ) ) nil c) c) )","user":"5339b53fe4b0e30313ee6cac"},{"problem":27,"code":"(fn lstPal [x] (= (seq x) (reverse (seq x))))","user":"5c82db41e4b0c8042a70ce42"},{"problem":27,"code":"(fn [x] (let [x (reverse x)] (= x (reverse x))))","user":"58333b19e4b089d5ab817c94"},{"code":"(fn palindrome? [coll]\n  (= (reverse (vec coll)) (vec coll)))","problem":27,"user":"4f159ea6535d64f603146445"},{"problem":27,"code":"#(loop [lst %]\n   (if (or (= (count lst) 0) (= (count lst) 1))\n     true\n     (if (not= (first lst) (last lst))\n       false\n       (recur (rest (reverse (rest lst)))))))","user":"55f8f82be4b03cbcff9738bb"},{"problem":27,"code":"(fn [coll]\n             (let [items (count coll) num (if (even? items) (/ items 2) (/ (- items 1) 2))]\n               (loop [seq1 coll seq2 coll dcnt num ]\n                    (if (zero? dcnt) true \n                      (if (= (first seq1) (last seq2)) \n                        (recur (rest seq1) (butlast seq2) (dec dcnt)) false\n                      )\n                    )\n               )\n             )\n          )","user":"54413696e4b032a45b86936b"},{"problem":27,"code":"(fn [s]\n    (= (seq s) (reverse (seq s))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"code":"(fn palindrome [w] (= (reverse w) (seq w)))","problem":27,"user":"533c0c12e4b0e30313ee6cd4"},{"code":"(fn [x]\n  (=\n    (seq x)\n    (reduce conj '() x)))","problem":27,"user":"500abce2e4b03d00572d2d77"},{"code":"(fn palindrome [sequence]\n    (= (seq sequence) (reverse sequence)))","problem":27,"user":"50057f23e4b0678c553fc466"},{"code":"(fn [l] (let [x (sequence l)] (=  (reverse x) x)) )","problem":27,"user":"4fe9cea4e4b0547ebccb2471"},{"code":"(fn [s]\n (= (vec s) (rseq (vec s)))\n)","problem":27,"user":"4f00f997535dcb61093f6a34"},{"problem":27,"code":"(fn palindrom?\n  [coll]\n  (= (seq coll) (reverse (seq coll))))","user":"55634f38e4b0c656e3ff17e8"},{"code":"(fn palindrome? [p]\n  (let [s (seq p)]\n    (cond\n     (< (count s) 2) true\n     :else (and (= (first s) (last s)) (palindrome? (rest (butlast s)))))))","problem":27,"user":"52713288e4b03e8d9a4a73e7"},{"problem":27,"code":"#(loop [col %]\n     (cond\n       (empty? col) true\n       (not= (first col) (last col)) false\n        :else (recur  (butlast (rest col)))))","user":"57bf304de4b05aa3c4741c75"},{"code":"(fn[sq]\n  (let [rvs (fn[sq]\n            (if (string? sq)\n              (apply str (reverse sq))\n              (reverse sq)))\n        org-seq sq\n        rvs-seq (rvs sq)]\n    (= org-seq rvs-seq)))","problem":27,"user":"4f6236abe4b0defedf855fcd"},{"problem":27,"code":"(fn [sq] (= (seq sq) (reverse (seq sq))))","user":"561814bae4b06b1bb2182a1a"},{"problem":27,"code":"(fn [s] (= (into () s) (reverse (into () s))))","user":"550345fee4b086ebe8a79c6c"},{"problem":27,"code":"#(if (= (reverse %) (seq %))\n   true\n   false)","user":"5cb351b7e4b026601754b8f9"},{"code":"(fn [x]\n  (every? true?\n    (loop [left 0 right (dec (count x)) acc '()]\n      (if (> left right)\n        acc\n        (recur (inc left) (dec right) (cons (= (nth x left) (nth x right)) acc))))))","problem":27,"user":"4ef0b523535dced4c769f20e"},{"problem":27,"code":"(fn [s]\n  (let [lst (apply list s)]\n    (= (reverse lst) lst)))","user":"57300c19e4b0cd1946bd0fa1"},{"problem":27,"code":"(fn [x]\n  (=\n    (vec x)\n    (vec (reverse x))))","user":"59908f3fe4b0866487ed0d50"},{"code":"(fn ! [x] (and (= (first x) (last x)) (or (< (count x) 2) (! (rest (butlast x))))))","problem":27,"user":"5217c26fe4b0a4bccb16cab8"},{"problem":27,"code":"(fn [xs]\n  (if-not xs\n    true\n    (and (= (first xs) (last xs))\n         (recur (butlast (next xs))))))","user":"573cb87fe4b05c31a32c0807"},{"problem":27,"code":"(fn P [X] (if (< (count X) 2) true (and (P (rest (drop-last X))) (= (first X) (last X)))))","user":"569c07b9e4b0542e1f8d145d"},{"code":"(fn func [v] (  cond (= (not= (apply vector v) (apply vector (reverse v))) false) true\r\n               :else false ))","problem":27,"user":"506717e2e4b03d366d7cb2ba"},{"code":"(fn [s]\r\n  (loop [s (seq s)]\r\n    (if (> (count s) 0)\r\n      (if (= (first s) (last s))\r\n        (recur (rest (drop-last s)))\r\n        false)\r\n      true)))","problem":27,"user":"50b81a93e4b0cba0e598b64b"},{"problem":27,"code":"#( loop [arr %]\n   ( if ( empty? arr )\n     true\n     ( if ( not= ( first arr ) ( last arr ) )\n       false\n       ( recur ( butlast ( next arr ) ) )\n       )\n     )\n  )","user":"56814cbce4b0945ebc182a81"},{"problem":27,"code":"(fn [lst] \n  (let [x (- (count lst) 1)]\n  \t(loop [i 0]\n      (if (> i (/ x 2))\n        true\n        (if (= (nth lst i) (nth lst (- x i)))\n          (recur (+ 1 i))\n          false\n    \t)\n      )\n    )\n  )\n)","user":"59333f35e4b072a2710fd04c"},{"problem":27,"code":"(fn [xs] \n  (if (string? xs)\n    (= (apply str (reverse xs) xs))\n    (= (reverse xs) xs)))","user":"5eec1001e4b07c55ae4a0502"},{"code":"#(= (reverse %) (if (seq? %) % (seq %)))","problem":27,"user":"4f2942ace4b0d6649770a01e"},{"problem":27,"code":"(fn [x]\n  (apply = (map = x (reverse x))))","user":"52d74c2de4b09f7907dd1373"},{"problem":27,"code":"(fn is-palindrome [sq]\n  (loop [partial-sq sq rev '()]\n    (if (empty? partial-sq)\n      (= rev (seq sq))\n      (recur (rest partial-sq) (conj rev (first partial-sq))))))","user":"5c6314c5e4b0fca0c1622658"},{"code":"(fn palindrome? [s]\n  (let [c (count s)\n        hc (/ c 2)]\n    (=\n     (take hc s)\n     (take hc (reverse s)))))","problem":27,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn pali [x] \n  \n  (cond  (empty? x) true\n         (= (first x) (last x))  (pali  (rest (butlast x)))\n         :else false\n         )\n  )","problem":27,"user":"524ac536e4b09eba1c0223a1"},{"code":"(fn [coll] (let [rc (reverse coll) n (count coll)] (every? identity (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))","problem":27,"user":"50ed9e8de4b06330c1f87c44"},{"code":"(fn [arr] (= (reduce conj () arr) (reduce conj [] arr)))","problem":27,"user":"5036eba7e4b0af0658af77a5"},{"problem":27,"code":"(fn [iterable]\n  (if (= (reverse iterable) (seq iterable))\n  true\n  false))","user":"59d75489e4b0ef0a1e9b5c31"},{"code":"(fn palindrome?\r\n  [s]\r\n    (every?\r\n      true?\r\n      (map #(= (first %) (second %))\r\n(partition 2 (interleave s (reverse s))))))","problem":27,"user":"4fdc067fe4b05e33b9224f69"},{"problem":27,"code":"(fn palindrome? [s]\n  (if (string? s)\n    (= (apply str (reverse s)) s)\n    (= s (reverse s))))","user":"5d247902e4b02ea6f0fb6a24"},{"problem":27,"code":"(fn [xs]\n  (let [x (seq xs)]\n    (= x (reverse x))))","user":"54d2892fe4b0e8a36923e5f7"},{"code":"(fn [pal] (= (reverse (seq pal)) (seq pal)))","problem":27,"user":"4f4003d9e4b0e243712b1fa5"},{"problem":27,"code":"(fn [x] (-> x seq (= (reverse x))))","user":"530ec239e4b08068f379ecc1"},{"code":"(fn [n]\n  (= (seq n)\n     (reverse n)))","problem":27,"user":"5173726be4b098276e74652c"},{"problem":27,"code":"#(every? (fn [[a b]] (= a b)) (partition 2 (interleave %1 (reverse %1))))","user":"56466fb1e4b0284900eef613"},{"problem":27,"code":"(fn [x]\n  (= (lazy-seq x) (lazy-seq (reverse x))))","user":"574e8975e4b02ea114799244"},{"code":"(fn\n  ([s]\n    (let [i (count s)]\n      (cond \n        (= i 0) true\n        (= i 1) true\n        :else\n        (if (= (first s) (last s))\n          ;True\n          (recur (rest (drop-last s)))\n          ;False\n          false)))))","problem":27,"user":"4e30da02535deb9a81d77f17"},{"problem":27,"code":"#(loop [s %]\n     (if (nil? s)\n       true\n       (if (= (first s) (last s))\n         (recur (butlast (next s)))\n         false)))","user":"5b8f0861e4b0c0b3ffbd49f4"},{"problem":27,"code":"(fn [coll]\n  (let [reversed (reverse coll)]\n    (if (string? coll)\n      (= coll (apply str reversed))\n      (= coll reversed))))","user":"59d9186be4b0ef0a1e9b5c50"},{"problem":27,"code":"(fn\n  [word]\n  (let [word-seq (seq word)\n        word-reversed (reverse word)]\n    (= word-seq word-reversed)))","user":"58ed0198e4b056aecfd47d72"},{"code":"(fn pal [x] \n  (if (> 2 (count x))\n    true\n    (if (.equals (first x) (last x))\n      (pal (rest (butlast x)))\n      false\n    )\n  )\n)","problem":27,"user":"52b7a904e4b0c58976d9ad51"},{"problem":27,"code":"(fn f [s] (if (< (count s) 2)  true \n                         (if (= (first s) (last s)) (f (drop 1 (drop-last s))) false)))","user":"56fee4c0e4b08d47c97781b5"},{"problem":27,"code":"(fn [parseq]\n  (loop [s parseq]\n    (let [h (first s) t (last s) mid (->> s next drop-last)]\n      (if (and (seq mid) (= h t))\n        (recur mid)\n        (= h t)))))","user":"58969420e4b00487982d52a4"},{"problem":27,"code":"(fn [l] (letfn [(match [a b] (if (empty? b) false\n                               (or (= a b) (= a (rest b)) (match (cons (first b) a) (rest b)))))]\n          (match [] l)))","user":"5600f8c7e4b04bb52996e176"},{"problem":27,"code":"#(loop [p %]\n    (if (<= (count p) 1)\n      true\n      (if-not (= (first p) (last p))\n        false\n        (recur (drop-last (drop 1 p))))))","user":"578fc072e4b0ebec4cfb759a"},{"problem":27,"code":"(fn [x1] (loop [x x1] (if (and x (next x)) (if (= (first x) (last x)) (recur (next (butlast x))) false) true)))","user":"54d95ce8e4b024c67c0cf74a"},{"code":"(fn f [x]\n    (= (seq x) (into () x))\n    )","problem":27,"user":"5029131ae4b0b6c928ad61ff"},{"problem":27,"code":"(fn [s] \n    (= (reverse s) (seq s)))","user":"53c3397be4b00fb29b221279"},{"code":"(fn palindrome? [s]\n  (if (string? s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))","problem":27,"user":"4e84a7dd535db62dc21a62e2"},{"problem":27,"code":"(fn\n  [lst]\n  (cond\n    (string? lst) (= lst (apply str (reverse lst)))\n    :else (= lst (reverse lst))))","user":"56df6498e4b0ca2494a095f8"},{"problem":27,"code":"(fn [l1]\n  (loop [norm l1 rev (reverse l1)]\n    (if (empty? norm)\n      true\n    (if (not= (first norm) (first rev))\n      false\n    (recur (rest norm) (rest rev))))))","user":"59369515e4b02506e01a297e"},{"problem":27,"code":"(fn [x] (if (= (first x)(last x) )true false))","user":"54e19a26e4b024c67c0cf7c6"},{"problem":27,"code":"(fn palindrome? [coll]\n  (let [first-item (first coll)\n        last-item (last coll)\n        middle-bit (rest (butlast coll))]\n    (if (empty? coll)\n      true\n      (and (= first-item last-item)\n           (palindrome? middle-bit)))))","user":"557e56aae4b05c286339e0d5"},{"code":"(fn[j] (#(if (= % nil) false true)(#(loop[n j acc '()] (if (> 1 (count n)) acc (if(= (first n)(last n)) (recur (drop-last(rest n)) (conj acc true)) ))))))","problem":27,"user":"5294b190e4b02ebb4ef75011"},{"problem":27,"code":"(fn palindrome?[x] \n  (if (empty? x) \n    true \n    (if (not= (first x) (last x))\n      false\n      (palindrome? (rest (butlast x))))))","user":"55429859e4b0a04f7929951f"},{"problem":27,"code":"(fn f [l]\n                   (cond\n                     (empty? l) true\n                     (not (next l)) true\n                     :else (let [head (first l)\n                                 tail (last l)\n                                 middle (rest (butlast l))]\n                             (if (= head tail)\n                               (f middle)\n                               false))))","user":"55274467e4b0ffed3738f92b"},{"problem":27,"code":"(fn x [s]\n          (if (or (empty? s) (= 1 (count s)))\n            true\n            (and (= (first s) (last s)) (x (drop-last (rest s))))\n          )\n        )","user":"54ba8206e4b0ed20f4ff6eb6"},{"code":"(fn [in] (let [s (seq in), rev (reverse s)] (= s rev)))","problem":27,"user":"4daec4a0edd6309eace4d15e"},{"code":"(fn [x]\n  ((fn loop-ti-loop [e c1 c2]\n    (if (>= c1 c2) \n      true\n      (if (not (= (nth e c1) (nth e c2))) false (loop-ti-loop e (+ c1 1) (- c2 1)))))\n   x 0 (- (count x) 1)))","problem":27,"user":"517531c6e4b07031762f2eea"},{"code":"#(let [len (quot (count %) 2)]\n    (= (take len %) (reverse (take-last len %))))","problem":27,"user":"4f359c7ee4b0e243712b1ec4"},{"problem":27,"code":";#((fn [s] (=(reverse s) s)) (map str %))\n;#(= (vec %) (reverse %))\n#(= (seq %) (reverse %))","user":"57ba55c1e4b0fbc9809a2801"},{"problem":27,"code":"(fn [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n         (recur (rest (drop-last s))))))","user":"55495318e4b0a04f79299566"},{"problem":27,"code":"#(let [li (into () %)]\n   (= li (reverse li)))","user":"5455c2f3e4b080a794c2c87d"},{"problem":27,"code":"(fn [arg]\n  (loop [n (/ (count arg) 2)\n         fwd arg\n         rev (reverse arg)]\n    (if (< n 1)\n      true\n      (if (not= (first fwd) (first rev))\n        false\n        (recur (dec n) (rest fwd) (rest rev))\n        )\n      )\n    )\n  )","user":"60486e8ae4b02d28681c77db"},{"problem":27,"code":"(fn [x] (= (apply str x)\n           (apply str (reverse x))))","user":"5a42dbabe4b0447ef91cc5fc"},{"code":"(fn palin \n  [word]\n  (or (= (count word) 0 ) \n      (and (= (first word) (last word) )\n           (palin (drop 1 (drop-last 1 word) ) ) ) ) )","problem":27,"user":"5230d490e4b0035e815da396"},{"problem":27,"code":"(fn palindrme? [coll] \n  (let [halfsize (/ (count coll) 2)]\n    (= \n     (take halfsize coll) \n     (take halfsize (reverse coll))))\n  )","user":"54cb3497e4b057c6fda3a272"},{"code":"#(= (seq %) (reverse % ))","problem":27,"user":"52e087dde4b09f7907dd1412"},{"code":"(fn[coll] (= (apply str (reverse  coll)) (apply str coll)))","problem":27,"user":"4f294dffe4b0d6649770a024"},{"code":"(fn palindrome? [s]\n  (if (<= (count s) 1)\n  true\n  (and (= (first s) (last s)) (palindrome? (->> s (drop 1) (drop-last 1))))))","problem":27,"user":"5370f8ede4b0fc7073fd6ea2"},{"code":"(fn [coll]\n  (let [rev (reverse coll)]\n    (= rev (seq coll))))","problem":27,"user":"50ba4b9ee4b03e68e4411c7b"},{"problem":27,"code":"(fn \n  [junk]\n  (loop [candidate junk]\n    (if (= (first candidate) (last candidate))\n      (if (< (count candidate) 3)\n        true\n       \t(recur (butlast (rest candidate))) \n       )\n      false)\n    )\n)","user":"54d0f744e4b0e8a36923e5d7"},{"problem":27,"code":"#(let [s (seq %)]\n  (if (or (empty? s) (< (.size s) 2)) true\n     (and (= (first s) (last s))\n          (recur (butlast (rest s)))\n     )\n))","user":"542b0592e4b0dad94371f286"},{"problem":27,"code":"(fn [x]\n  (true?\n    (=\n     \t(apply str (reverse x))\n     \t(apply str x)\n     )\n    )\n  )","user":"55a122d9e4b0acc240e3150a"},{"problem":27,"code":"#(= (seq %) (reverse ( seq %)))","user":"54db5d73e4b024c67c0cf763"},{"problem":27,"code":"#(if (seq? %) (= % (reverse %))\n      (= (seq %) (reverse (seq %))))","user":"577a0dc3e4b0979f8965167b"},{"code":"#(= (reverse %) (sequence %))","problem":27,"user":"5084cb7de4b0fb8f40674bfb"},{"code":"(fn f [x]\n  (= (reverse (reverse x)) (reverse x)))","problem":27,"user":"52b0323ee4b0c58976d9acc6"},{"code":"(fn mypal [xs]\n  (cond \n    (<= (count xs) 1)(true)\n    false false\n    true\n    (and \n      (= (first xs) (last xs))\n    )\n  )\n)","problem":27,"user":"4f0d6686535d0136e6c22318"},{"code":"(fn [x] \r\n                                             (loop[i 0 x x]\r\n                                               (if(empty? x)\r\n                                                 true\r\n                                                 (if(= (first x) (last x))\r\n                                                   (recur (inc i) (rest (take (- (count x) 1) x)))\r\n                                                   false)\r\n                                                 )\r\n                                               )\r\n                                             )","problem":27,"user":"4eb2fe60535d7eef30807354"},{"code":"(fn [lst] (let [len (quot (count lst) 2)]\n            (= (take len lst) (reverse (take-last len lst)))))","problem":27,"user":"4e9a1512535dbda64a6f6b6e"},{"problem":27,"code":"(fn c [l] \n\t(loop [x l]\n\t\t(if (< (count x) 2 )\n\t\t\ttrue\n\t\t\t(if (= (first x) (last x))\n\t\t\t\t(recur (drop-last (drop 1 x)))\n\t\t\t\tfalse\n\t\t\t)\n\t\t)\n\t)\n)","user":"5587d8b3e4b059ccff29b1e8"},{"problem":27,"code":"(fn\n  [elems]\n  (if (string? elems)\n    (= (clojure.string/reverse elems) elems)\n    (= (reverse elems) elems))\n  )","user":"5772ddb0e4b0979f896515d4"},{"problem":27,"code":"(fn [listy] (= (reverse listy) (seq listy)))","user":"5380a27ae4b06839e8705ec4"},{"code":"#(= (reverse  %)(vec %))","problem":27,"user":"517e6671e4b0329b27fa9f56"},{"code":"(fn [s]\n  (let [m (reverse s)]\n    (if (empty? (filter #(not= (nth s %) (nth m %)) \n                        (range (count s)))) true false)))","problem":27,"user":"4f1473eb535d64f603146439"},{"problem":27,"code":"#(loop [s %]\n\n    (if (< (count s) 2)\n\n      true\n\n      (if (not= (first s) (last s))\n\n        false\n\n        (recur (drop 1 (drop-last 1 s))))))","user":"594a7ed1e4b07ddc2dafae02"},{"code":"#(if (empty? %)\n          true\n          (if (= (last %) (first %))\n            (recur (rest (butlast %)))\n            false\n          )\n  )","problem":27,"user":"504f191ae4b0e7ad84dbc4ba"},{"code":"(fn palindrom? [input]\n    (if (string? input)\n         (= (apply str (reverse input)) input)    \n    (= (reverse input) input))\n )","problem":27,"user":"52763696e4b03e8d9a4a74d7"},{"problem":27,"code":"(fn check [x] (= (reverse x) (reverse (reverse x))))","user":"580014d7e4b0a837a8b30c32"},{"problem":27,"code":"(fn is-pal [coll]\n  (= (seq coll) (reverse coll)))","user":"5f0247fae4b0cf489e8d7f27"},{"problem":27,"code":"(fn [x]\n  (letfn [(g [x]\n    (cond \n     (string? x) (clojure.string/reverse x)\n     (vector? x) (vec (reverse x))\n     :else (reverse x)))]\n    (= x (g x))))","user":"53cbe808e4b00fb29b2212d4"},{"problem":27,"code":"(fn [potential-palindrome]\n  (let [palindrome (seq potential-palindrome)\n        reversed-palindrome (reverse palindrome)]\n    (= palindrome reversed-palindrome)))","user":"578ce779e4b0ebec4cfb7561"},{"code":"#(if (= (type \"a\") (type %)) (= (clojure.string/reverse %) %) (= % (reverse %)))","problem":27,"user":"52e18024e4b09f7907dd1424"},{"problem":27,"code":"(fn [x] \n  (let [r (clojure.string/join (reverse x))\n        s (clojure.string/join x)]\n  \t(= r s))\n)","user":"5a91c205e4b002d099cae6fd"},{"problem":27,"code":"(fn [c] (apply = (map sort (partition (int (/ (count c) 2)) (if (odd? (count c)) (keep-indexed #(when-not (= %1 (int (/ (count c) 2))) %2) c) c)))))","user":"53e4b5a3e4b036ad0777e44b"},{"code":"(fn [xs]\n  (if (empty?  xs)\n      true\n      (and  (= (first xs)\n            (last xs))\n            (recur (next (butlast xs))))))","problem":27,"user":"4fef76ece4b0678c553fc319"},{"problem":27,"code":";(fn [x] (= (map identity x) (reverse x)))\n#(reduce = ((juxt seq reverse) %))","user":"5e3071abe4b05b4b01516213"},{"problem":27,"code":"(fn [s] (reduce #(and % %2) true (map = s (reverse s))))","user":"5eac6a63e4b00a66d4a951e0"},{"problem":27,"code":"(fn [word] (= (seq word) (reverse word)) )","user":"55e06f82e4b050e68259b40d"},{"problem":27,"code":"#(loop [nseq %] (if (or (nil? nseq) (nil? (next nseq))) true (if (= (first nseq) (first (reverse (next nseq)))) (recur (next (reverse (next nseq)))) false)))","user":"5a6b8a9ae4b0512ff01cda3f"},{"problem":27,"code":"(fn [x]\n  (if (< (count x) 2)\n    true\n    (if (not (= (first x) (last x)))\n      false\n      (recur (rest (reverse (rest x)))))))","user":"5a292efde4b07f18be40aa77"},{"code":"(fn [lst]\n  (loop [l lst]\n    (if (empty? l) true\n      (if (not (= (first l) (last l))) false\n        (recur (rest (drop-last l)))))))","problem":27,"user":"4eaa47bc535d7eef30807309"},{"problem":27,"code":"(fn -pal [x] (cond (>  2 (count x)) true (<= 2 (count x)) (cond (= (last x) (first x)) (-pal (drop-last (rest x))) (not= (last x) (first x)) false)))","user":"546113ffe4b01be26fd74699"},{"problem":27,"code":"(fn [l]\n  (cond\n   (empty? l) true\n   (= (first l) (last l)) (recur (-> l rest butlast))\n   :else false))","user":"565e0934e4b068f2fe63dc30"},{"code":"(fn [x] (= (seq x) (reverse x)))","problem":27,"user":"4dd62278535d2dad7130b5c7"},{"problem":27,"code":"(fn f [p] (if (< (count p) 2) true (and (f (rest (reverse (rest p)))) (= (first p) (last p)))))","user":"557bd432e4b05c286339e0bb"},{"problem":27,"code":"#(loop [s %]\n   (if (empty? s)\n     true\n     (if (= (first s) (last s))\n       (recur (drop-last (rest s)))\n       false)))","user":"56032173e4b04bb52996e1b3"},{"code":"#(every? (partial apply =) (take (/ (count %) 2) (map vector % (reverse %))) )","problem":27,"user":"532afdc5e4b09d4e7a9b552e"},{"problem":27,"code":"(fn [xs] (= (apply str (reverse xs)) (apply str xs)))","user":"5d88d820e4b0915913b1d3b1"},{"problem":27,"code":"#(= % (if (= (type %) String)\n        (clojure.string/reverse %)\n        (reverse %)))","user":"53ecd01fe4b0d648e757f4b9"},{"code":"(fn [seq]\n  (= seq (if (string? seq) (apply str (reverse seq)) (reverse seq))))","problem":27,"user":"5151d173e4b03e678e393adf"},{"problem":27,"code":"(fn palindrome\n  [coll]\n  (let [coll-length (count coll)\n        split (split-at (quot coll-length 2) coll)]\n      (if (even? coll-length)\n        (do\n          (let [first-coll (first split)\n                sec-coll (reverse (second split))]\n          (= first-coll sec-coll)))\n      (do\n      (let [first-coll (first split)\n          sec-coll (reverse (rest (second split)))]\n          (= first-coll sec-coll))))))","user":"583d669ee4b089d5ab817d9a"},{"code":"(fn [xs]\n  (= (apply list xs) (reverse xs)))","problem":27,"user":"4feff3b6e4b0678c553fc31e"},{"problem":27,"code":"#(= (if (= (type %) java.lang.String) \n  (clojure.string/join \"\" (reverse %))\n  (reverse %))\n  %)","user":"5b3b70c6e4b02d533a91bbd4"},{"code":"(fn [x] (=\n         (vec x) (reverse x)))","problem":27,"user":"5396c9a8e4b0b51d73faaee4"},{"problem":27,"code":"(fn [s]\n (= (reverse s) (seq s)))","user":"4f6543cae4b07046d9f4ef41"},{"problem":27,"code":"(fn [xs] (loop [lst xs] (if (< (count lst) 2) true (if (= (first lst) (last lst)) (recur (rest (butlast lst))) false))))","user":"5a5800e1e4b05d388ecb6c76"},{"problem":27,"code":";; (defn is-palindrome? [coll] (= (seq coll) (reduce conj () coll)))\n#(= (seq %) (reduce conj () %))","user":"56014f55e4b04bb52996e184"},{"code":"(fn palindromo? [s]\n              (cond \n                (nil? s) true\n                (= 1 (count s)) true\n                (not= (first s) (last s)) false\n                :else (palindromo? (next (drop-last s)))))","problem":27,"user":"52c8758be4b0c2d177d62135"},{"problem":27,"code":"(fn palindrome [x]\n  (if (<= (count x) 1)\n    true\n    (and (= (first x) (last x))\n         (palindrome (drop-last (drop 1 x))))))","user":"59e68254e4b0249b728206fc"},{"problem":27,"code":"#(let [r (reverse %)] (= % (if (string? %) (apply str r) r)))","user":"5509b434e4b06e50f9beb11e"},{"code":"(fn p [s]\n  (if (< (count s) 2) true \n    (if (not (= (first s) (last s))) false\n       (p (butlast (rest s))) )))","problem":27,"user":"52247d56e4b01819a2de42db"},{"problem":27,"code":"#(loop [s %] (if (= (first s) (last s)) (if (empty? s) true (recur (rest (drop-last 1 s)))) false))","user":"546dd4f6e4b00cfc9eacc194"},{"problem":27,"code":"(fn [thing] (= thing (if (string? thing) (apply str (reverse thing))  (reverse thing))))","user":"5751fda4e4b02ea114799295"},{"problem":27,"code":"(fn [x] (=(reverse x)(reverse(reverse x))))","user":"5951190be4b066ee0a44aea4"},{"code":"(fn [x]\n   (loop [x x]\n     (if (or (empty? x) (= 1 (count x)))\n       true\n       (if (not= (first x) (last x))\n   false\n\t (recur (drop-last (drop 1 x)))))))","problem":27,"user":"4e89ff3d535d3e98b802328a"},{"problem":27,"code":"(fn my-palindrome [lst]\n    (= (reverse (reverse lst)) (reverse lst)))","user":"56ef0a2ee4b04a395b9a045a"},{"problem":27,"code":"(fn [coll]\n  (cond\n    (string? coll)\n      (do\n        (= (clojure.string/join \"\" (into () coll))  coll))\n    :else\n    (do\n      (= (into () coll) coll)\n    )\n))","user":"5b6962c1e4b0c6492753e787"},{"code":"(fn pal [x] \n  (if (<= (count x) 2) \n    (= (first x) (last x)) \n    (= true (= (first x) (last x)) (pal (rest (butlast x))))\n  )\n)","problem":27,"user":"52e544d3e4b09f7907dd145e"},{"problem":27,"code":"(fn [list]\n  (let [ [f s] (split-at (/ (count list) 2.0) list)]\n    (loop [_f f _s (reverse s)]\n      (if (or (nil? (first _f)) (nil? (first _s))) true\n        (if (not= (first _f) (first _s)) false\n          (recur (rest _f) (rest _s)))))))","user":"58662a03e4b0f14aab7c8859"},{"code":"(fn [palindrome-maybe]\n  (let [extract-fn \n         (fn [take-fn]\n           (let [list-count (count palindrome-maybe)]\n             (if (even? list-count)\n                 (take-fn (/ list-count 2) palindrome-maybe)\n                 (take-fn (/ (dec list-count) 2) palindrome-maybe))))]\n    (=\n      (extract-fn take)\n      (extract-fn (fn [n l] (reverse (take-last n l)))))))","problem":27,"user":"53940789e4b0b51d73faaec3"},{"code":"(fn [coll] (not (some false? (map #(= %1 %2) coll (reverse coll)))))","problem":27,"user":"5062bc46e4b05ac47bc68d68"},{"problem":27,"code":"#(let [x (seq %)\n       y (reverse x)\n       result (map = x y)] \n  (not (contains? (set result) false)))","user":"55228c3ce4b0882d96d091a2"},{"problem":27,"code":"(fn [coll]\n  (if (string? coll)\n    (if (= coll (clojure.string/reverse coll))\n      true\n      false)\n    (if (= coll (reverse coll))\n      true\n      false)))","user":"5aa2b5dbe4b0d174b936c85b"},{"problem":27,"code":"(fn [s] (loop [i 0 j (dec (count s))] (if (>= i j) true (if (not= (nth s i) (nth s j)) false (recur (inc i) (dec j))))))","user":"54c47620e4b045293a27f61c"},{"code":"(fn [l] (let [s (seq l)](= s (reverse s))))","problem":27,"user":"5384bbf8e4b06839e8705ef5"},{"problem":27,"code":"(fn [%] (= (seq %) (reverse %)))","user":"58f90aa2e4b0438e51c2cf41"},{"code":"(fn ! [x] (= (if (char? (first (reverse x))) (apply str (reverse x)) (reverse x)) x))","problem":27,"user":"5143824ae4b0b4fb4ace5f36"},{"problem":27,"code":"(fn palindrome [values] (if (= (count values) 0) true (and (= (first values) (last values)) (palindrome (rest (drop-last values))))))","user":"5e69589de4b04a83ad7cd26d"},{"problem":27,"code":"(fn [s]\n  (if (string? s)\n    (= s (clojure.string/reverse s))\n  \t(= s (reverse s))))","user":"5a8fd113e4b05369db4d2542"},{"code":"(fn [vec]\n  (cond \n   (empty? vec) true\n   (not= (first vec) (last vec)) false\n   :else (recur (drop 1 (drop-last vec)))))","problem":27,"user":"5356ac72e4b04ce2eb3ed26a"},{"code":"(fn p? [x] (= (apply str (reverse x)) (apply str x)))","problem":27,"user":"4e6a4641535d8ccf87e9feb9"},{"code":"(fn polindrome? [s] (= (seq s) (reverse s)))","problem":27,"user":"52cc4fd6e4b07d0d72b27360"},{"code":"(fn [word]\n  (= (reverse word) (reverse (reverse word))))","problem":27,"user":"537881a4e4b06839e8705e46"},{"problem":27,"code":"(fn [x]\n  (let [orig (apply str x)\n        invt (apply str (reverse x))]\n    (= orig invt)))","user":"54722f8ce4b094393f72dd75"},{"code":"(fn [word]\n  (loop [letters word]\n    (if-not (= (first letters) (last letters))\n      false\n      (if (empty? letters)\n        true\n        (recur (take (- (count letters) 2) (rest letters)))))))","problem":27,"user":"531e5c81e4b08068f379edba"},{"code":"#(not(= (count (set %1)) (count %1)))","problem":27,"user":"4f1427f8535d64f603146435"},{"code":"(fn [x] \n  (if (string? x)\n  (= x (apply str (reverse x)))\n  (= x (reverse x))))","problem":27,"user":"504e8e48e4b069badc5a33b3"},{"code":"(fn y [x] (= (seq x) (reverse (seq x))))","problem":27,"user":"50ef3e5de4b0a78662fa2652"},{"problem":27,"code":"(fn [word]  (= (reverse word) (seq word)))","user":"5aeb3c1ce4b0cc2b61a3bbf4"},{"problem":27,"code":"(fn [ls]\n  (loop [ls' ls]\n    (cond\n     (< (count ls') 2) true\n     (not= (first ls') (last ls')) false\n     :else (recur (drop 1 (take (dec (count ls')) ls'))))))","user":"58db7b81e4b0a4d5acaab680"},{"problem":27,"code":"(fn is_palindrome\n    ([s]\n        (is_palindrome s 0 (- (count s) 1)))\n    ([s f l]\n        (if (or (= f l) (< l f))\n            true\n            (if (= (nth s f) (nth s l))\n                (is_palindrome s (+ f 1) (- l 1))\n                false))))","user":"56058d64e4b08b23635d3169"},{"problem":27,"code":"(fn f [col]\n    (cond\n      (or (nil? col) (= 0 (count col))) true\n      (-> col count odd?) (let [i (- (/ (count col) 2) 1)]\n                            (f (concat (take i col) (take-last i col))))\n      (= (first col) (last col)) (f (butlast (drop 1 col)))\n      :else false))","user":"575fbe58e4b08062f99a4e87"},{"problem":27,"code":"#(if (string? %)\n   (= (apply str (reverse %)) %)\n   (= (reverse %) %))\n\n;; instead of doing two different comparations depending if the param is a string, just convert the param into a seq\n; #(= (reverse %) (seq %))","user":"509fda73e4b08df8156e9e41"},{"code":"(fn ! [x]\n   (if (nil? x)\n     true\n     (if (= (first x) (last x))\n       (! (butlast (rest x)))\n       false))\n)","problem":27,"user":"523eb110e4b057c4b7cd0a67"},{"problem":27,"code":"(fn\n  [input]\n  (let [res (seq input)]\n  (= (reverse res) res)))","user":"52c2106fe4b07a9af5792374"},{"problem":27,"code":"(fn [s] (let [r (reverse s) rr (reverse (reverse s))] (= r rr)))","user":"5995f8ade4b0b211ea3aaae9"},{"problem":27,"code":"#(not-any? false? (map = (seq %) (reverse %)))","user":"588053cae4b0f1effa3b7612"},{"code":"(fn [l]\n  (if (string? l)\n    (= l (apply str (reverse l)))\n    (= l (reverse l))\n  )\n)","problem":27,"user":"50b4b70de4b0c464d223d1bc"},{"code":"(fn [x] (= (seq x) (reverse (seq x))))","problem":27,"user":"4daa374930acd6ed13482a68"},{"code":"#(loop\n   [a % b %]\n   (if (empty? a)\n     true\n   (if (= (first a) (last b))\n     (recur (rest a) (butlast b))\n     false)))","problem":27,"user":"515896f2e4b059418b97f0a8"},{"code":"#(= (let [rev (reverse %)]\n     (if (string? %)\n        (apply str rev)\n        rev)) %)","problem":27,"user":"4fe15ffee4b0dd6cd5ce3634"},{"code":"#(contains? #{1 :foo\\r}(last%))","problem":27,"user":"4e7eff9e535db966e863cc38"},{"problem":27,"code":"(fn [coll]\n  (if (empty? coll)\n    true\n    (if (= (first coll) (last coll))\n    (recur (drop 1 (drop-last coll)))\n    false)))","user":"5b338b23e4b025bcb146f33d"},{"code":"(fn [x]\n  (= (reverse (seq x)) (seq x)))","problem":27,"user":"506755b3e4b03d366d7cb2bc"},{"problem":27,"code":"(fn check [x] \n  (loop [r x]\n    (if (empty? r) true\n      (if (not= (first r) (last r)) \n        false\n        (recur (rest (butlast r))) \n       )\n     )\n  )\n)","user":"5950f0bfe4b066ee0a44ae9f"},{"problem":27,"code":"(fn [s] \n  ((fn traverse [o r] \n    (if (empty? o) true (if (not= (first o) (first r)) \n                          false\n                          (traverse (rest o) (rest r))\n                          )\n      )\n    ) s (reverse s))\n  )","user":"5cfd5a93e4b0cc9c91588168"},{"problem":27,"code":"(fn palindrome? [xs] (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))","user":"592518e8e4b072a2710fce67"},{"problem":27,"code":"(fn palindrome? [xs]\n  (cond\n   (empty? xs) true\n   (= 1 (count xs)) true\n   (not= (first xs) (last xs)) false\n   :else (palindrome? ((comp drop-last rest) xs))))","user":"540ff039e4b01498b1a7199b"},{"problem":27,"code":"(fn [s]\n  (if (string? s)\n      (if (= s (clojure.string/reverse s))\n        true\n        false)\n      (if (= s (reverse s))\n        true\n        false)))","user":"596a4fbce4b069c0a1a19800"},{"code":"(fn [x]\n  (let [l (/ (count x) 2)\n        r (take l (rseq (vec x)))\n        s (take l (seq x))]\n    (= r s)))","problem":27,"user":"4ff9d4e5e4b0678c553fc3b0"},{"code":"(fn [x] (if (>= 1 (count x)) true\n          (if (= (last x) (first x))\n            (recur (rest (reverse (rest (reverse x)))))\n            false)))","problem":27,"user":"52ae70c4e4b0c58976d9aca8"},{"problem":27,"code":"(fn palindrome [x]\n            (if (empty? x)\n              true\n              (let [y (seq x)]\n                (let [f (first y)]\n                  (let [l (last y)]\n                    (let [n (palindrome (drop-last (rest y)))]\n                      (= true (= true (= f l)) n)))\n                  )\n                )  \n              )\n            )","user":"5654cb2de4b0f9d632dd848b"},{"code":"#(let [n (quot (count %) 2)] (= (take n %) (take n (reverse %))))","problem":27,"user":"52afbc69e4b0c58976d9acc0"},{"code":"(fn [a] (= (map identity a) (reverse a)))","problem":27,"user":"4fc3a72ae4b081705acca342"},{"code":"#(let [input %\n       rev (reverse %)]\n   (= (reverse (reverse input)) rev)\n   )","problem":27,"user":"52efc98de4b05e3f0be25ed2"},{"problem":27,"code":"(fn [x]\n  (let [x (seq x)\n        r (reverse x)]\n    (= x r)))","user":"54764a8fe4b0c51c1f4d72a3"},{"code":"(fn [v]\n  (= (seq v) (reverse v)))","problem":27,"user":"507bb3ece4b09034bfeeb720"},{"problem":27,"code":"#(loop [x %]\n       (if (or (nil? x) (= 1 (count x)))\n         true\n         (if (= (first x) (last x))\n           (recur (butlast (next x)))\n           false)))","user":"578b9978e4b0ebec4cfb754c"},{"problem":27,"code":"(fn rev2 [param]\n  (if (=\n       (if (= (type param) java.lang.String)\n         (apply str (reverse param))\n         (reverse param)\n         ) param)\n    true\n    false\n    )\n\n)","user":"5ac383b8e4b0e27600da7719"},{"code":"(fn palind[c]\r\n  (= (into () c) (seq c))\r\n)","problem":27,"user":"4e9def6b535dbda64a6f6b8f"},{"code":"(fn [o] (let [obj (seq o) rvs (reverse obj)] (= obj rvs)))","problem":27,"user":"50a4b6a7e4b0344e360f3bb8"},{"problem":27,"code":"(fn [x]\n    (if (string? x)\n      (= (apply str (reverse x)) x)\n     (= (reverse x) x)))","user":"551a21ece4b091ff45eda993"},{"code":"(fn pal [xs] (if(= (reverse (reverse xs)) (reverse xs)) true false))","problem":27,"user":"50ef5703e4b0bdaecbb47d95"},{"problem":27,"code":"(fn [seq_in] (reduce #(and %1 %2) \n                     (map #(= %1 %2) \n                          (vec seq_in) \n                          (reverse (vec seq_in))\n                      )\n              )\n  )","user":"55893b09e4b059ccff29b1fe"},{"code":"(fn [a] \n  (let [r (reverse a) v (if (= java.lang.String (type a)) (apply str r) r)]\n   (= v a)))","problem":27,"user":"50c9ece0e4b0a409464667d8"},{"code":"(fn [seq] \n  (if (string? seq)\n    (= seq (apply str (reverse seq)))\n    (= seq (reverse seq))))","problem":27,"user":"5089860de4b037578f03c8b5"},{"code":"#(= (rseq (vec %)) (vec %))","problem":27,"user":"4e2b1d48535deb9a81d77f03"},{"problem":27,"code":"(fn palindrome? [x] (= (seq x) (reverse (seq x))))","user":"54091b82e4b0addc1aec66d5"},{"problem":27,"code":"#(cond\n        (string? %)\n        (if\n        (= % (apply str (reverse %)))\n        true false)\n        :else\n        (if\n        (= % (reverse %))\n        true false))","user":"565fe434e4b068f2fe63dc45"},{"problem":27,"code":"(fn pali\n  [lst] \n  \n  (every? true? (map = lst (reverse lst))))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":27,"code":"(fn palindrome [s] (if (empty? s)\n                        true\n                        (if ( = (first s) (last s))\n                          (palindrome (rest (butlast s)))\n                          false\n                          )\n                        ))","user":"52c70127e4b0c2d177d6211a"},{"problem":27,"code":"#(= %\n      (if (= (class %) java.lang.String)\n          (reduce str (reverse %))\n          (reverse %)\n      )\n)","user":"5999648ce4b07157cc8daaf3"},{"code":"(fn [in-seq]\n  (let [local-seq (seq in-seq)\n        length (count local-seq)\n        odd-length (odd? length)\n        breakpoint (if odd-length (/ (dec length) 2) (/ length 2))\n        front (take breakpoint local-seq)\n        middle (if odd-length (take 1 (drop breakpoint local-seq)) '())]\n    (= local-seq (concat front middle (reverse front)))))","problem":27,"user":"4ef4ab95535dced4c769f23b"},{"problem":27,"code":"(fn [suspect]\n  (= (vec suspect) (vec (reverse suspect))))","user":"5446ebc2e4b032a45b8693b8"},{"problem":27,"code":"(fn [word] (= (vec word) (reverse (vec word))))","user":"5c8002cde4b0c8042a70ce09"},{"problem":27,"code":"(fn [x]\n  (if (or (= (count x) 0)  (= (count x) 1))\n    true\n    (if (= (first x) (last x))\n      (recur (rest (drop-last 1 x)))\n      false)))","user":"5ffee617e4b074f607df6605"},{"problem":27,"code":"(fn ispal [x]\n  (let [xs (seq x)]\n    (cond\n     (empty? xs) true\n     (= 1 (count xs)) true\n     :else (and (= (last xs) (first xs)) (ispal (drop-last 1 (rest xs))))\n     )))","user":"6045582fe4b02d28681c77b6"},{"code":"(fn [p]\n  (= (seq p) (reverse p)))","problem":27,"user":"4ec34578535dcc7ae8597d51"},{"problem":27,"code":"(fn [x]\n  (if (= (reverse x) (seq x)) true false))","user":"593744abe4b02506e01a299b"},{"problem":27,"code":"#(let [rev (reverse %)] (= (if (string? %) (reduce str rev) rev) %))","user":"54f1b4e7e4b024c67c0cf8b5"},{"problem":27,"code":"(fn [old & new]\n  (if (= (class old) java.lang.String)\n    (if (nil? new)\n      (recur old \"\")\n      (if (= (count old) (count new))\n        (if (= old new)\n          true\n          false\n        )\n        (recur old (clojure.string/join [(subs old (count new) (+ 1 (count new)) ) new] ) )\n      )\n    )    \n    (if (= old (reverse old))\n      true\n      false\n    )\n  )\n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"problem":27,"code":"(fn [s] (let [half-len (/ (count s) 2)] \n          (if (= (take half-len s) (take half-len (reverse s)))\n            true\n            false\n\n         ))\n  )","user":"56c7d8dee4b0ed865f9758c9"},{"code":"(fn palindrome? [s]  (= (seq s) (reverse s)))","problem":27,"user":"50651de3e4b0b1b6c8b1d85f"},{"problem":27,"code":"#(= (reverse (vec %))  (vec %))","user":"55e5090be4b050e68259b45b"},{"code":"#(loop [s (vec %)]\n   (cond\n     (empty? s) true\n     true (and (= (first s) (last s)) (recur (rest (butlast s))))))","problem":27,"user":"5196568fe4b04c0af7ff3c1c"},{"problem":27,"code":"(fn\n  [x]\n  (if (= (vec x) (reverse (vec x)))\n    true\n    false))","user":"5e3c6db5e4b01d43a70e8e05"},{"code":"(fn [x] ( if (string? x) (= (apply str (reverse x)) x)\n                          (= (reverse x) x)\n                                        ))","problem":27,"user":"529012a5e4b0239c8a67af01"},{"code":"(fn [s]\n  (every? \n\t\t#(= true %) \n\t\t(map\n\t\t\t=\n\t\t\t(drop-last (int (/ (count s) 2)) s)\n\t\t\t(drop-last (int (/ (count s) 2)) (reverse s)))))","problem":27,"user":"50361b6be4b0fbe0a74d26be"},{"problem":27,"code":"(fn [x] \n  (= \n   (apply str (reverse x)) \n   (apply str x)))","user":"54d6c3dbe4b0a52adc2e201f"},{"problem":27,"code":"(fn [in] (= in (if (instance? String in) (apply str (reverse in)) (reverse in))))","user":"5510f734e4b06e50f9beb18f"},{"code":"(fn[x] (let [coll (seq x)] (= (reverse coll) coll)))","problem":27,"user":"4f8e984ee4b0d4e659cdde68"},{"code":"(fn check [x]\n \t(if (<= (count x) 1)\n     \ttrue\n        (and\n  \t     \t(= (first x) (first (reverse x)))\n   \t\t\t(check (rest (reverse (rest (reverse x)))))\n     \t)\n    )\n)","problem":27,"user":"50fb5e61e4b0d10d794c19e8"},{"problem":27,"code":"(fn detect-palindrome\n  [col]\n  (if (string? col)\n    (= (clojure.string/reverse col) col)\n    (= (reverse col) col)))","user":"5e9f3c2ce4b00a66d4a9517f"},{"problem":27,"code":"(fn [x] (if (= (seq x) (reverse x))\n                                true\n                                false))","user":"54e79094e4b024c67c0cf818"},{"code":"(fn pal [check]\n   (if  (or (= 1 (count check)) (= 0 (count check)))\n    true\n    (if (= (first check) (last check))\n      (pal (drop-last (rest check)))\n      false\n      )\n    )\n)","problem":27,"user":"511d4a52e4b022853b0e07a1"},{"problem":27,"code":"#(= (seq %)  ( reverse (seq %) ) )","user":"5e381434e4b01d43a70e8db4"},{"code":"(fn pa [se]\n  (let [\n    len (count se)\n    foo (fn foo [se c ag]\n      (if (> 1 c)\n        [se ag]\n        (foo (rest se) (dec c) (conj ag (first se)))))\n        \n    bar (fn bar [restseq revseq]\n      (if (and (empty? restseq) (empty? revseq))\n        true\n        (if (= (first restseq) (first revseq))\n          (bar (rest restseq) (rest revseq))\n          false)))]\n                    \n  (let [[restseq revseq] (foo se (/ len 2) '() )]\n    (if (= 0 (mod len 2))\n      (bar restseq revseq)\n      (bar (rest restseq) revseq)))))","problem":27,"user":"4e72175d535d5021c1a89658"},{"code":"(fn palindrome [ seq ] \n  ( if ( or ( = ( count seq ) 0 ) ( = ( count seq ) 1 ) )\n    true\n    ( if ( = ( last seq ) ( first seq ) )\n      ( palindrome ( rest ( drop-last  seq ) ) )\n      false ) ) )","problem":27,"user":"5026916fe4b0c969f0b056e1"},{"code":"(fn [l]\n  (if (< (count l) 1)\n    true\n    (if (not (= (first l) (last l)))\n      false\n      (recur (butlast (rest l)))\n    )\n  )\n)","problem":27,"user":"506ec408e4b09350ab4199f1"},{"code":"(fn [in] (= in\n  ((fn [in]\n    (let [reversed (reverse in)]\n      (if (string? in) (apply str reversed) reversed))) in)\n  ))","problem":27,"user":"4e6a4ab9535d8ccf87e9fec2"},{"problem":27,"code":"(fn [x] (reduce #(and %1 (= (first %2) (second %2))) true (map vector x (reverse x))))","user":"5931e498e4b072a2710fd024"},{"problem":27,"code":"(fn [lst]\n  (let [middle (rest (drop-last lst))]\n    (if (not (= (first lst) (last lst)))\n      false\n      (if (<= (count middle) 1)\n        true\n        (recur middle))))\n  )","user":"58088dfde4b0a837a8b30d07"},{"code":"(fn [p]\n  (let [s (seq p)]\n    (= s (reverse s))))","problem":27,"user":"4ef0eaef535dced4c769f211"},{"problem":27,"code":"(fn [x] (= (into [] x) (into () x) ))","user":"58a9e872e4b01a0c0b232973"},{"code":"(fn[x]\n  (if (string? x)\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)))","problem":27,"user":"5361a4f2e4b0243289761e47"},{"code":"(fn palindrome-checker [sq]\n      (= (apply str sq) (apply str (reverse sq))))","problem":27,"user":"4e6a11ee535d8ccf87e9fe9f"},{"problem":27,"code":"(fn is-palindrome [x]\n    (let [l (int (Math/floor (/ (count x) 2)))]\n      (= (take l x) (reverse (take-last l x)))\n      ))","user":"5d52bf29e4b0776584bd6f69"},{"code":"(fn palin ([x] (palin x 0 (dec (count x)))) ([x, min, max] (if (> min max) true (if (= (nth x min) (nth  x max)) (palin x (inc min) (dec max)) false))))","problem":27,"user":"524eebb0e4b0541d1855b7f7"},{"code":"(fn (\n  [x]\n  (if (= [] x)\n  true\n  (let [y (first x) z (last x)]\n  (if (not (= z y))\n  false\n  (recur (rest (reverse (rest x))))))\n  )))","problem":27,"user":"5244380fe4b076204b44fb12"},{"code":"(fn [l] \n  (loop [c (count l) b 0 e (dec c)] \n    (println c b e)\n    (if (and (> e b) (= (nth l b) (nth l e))) \n      (recur c (inc b) (dec e)) \n      (<= e b))))","problem":27,"user":"51411e3be4b05ca1a0b379f3"},{"code":"#(loop [c %] (if (< (count c) 2) true (if (not= (first c) (last c)) false (recur (drop-last (rest c))))))","problem":27,"user":"4e21d76a535d04ed9115e81a"},{"problem":27,"code":"(fn\n  [sequence-to-check]\n  (= (into [] sequence-to-check) (into [] (reverse sequence-to-check))))","user":"54ef7568e4b024c67c0cf885"},{"problem":27,"code":"(fn palindrone [a] (= (reverse (reverse a)) (reverse a)))","user":"5d2f5ba5e4b01671435dbcbf"},{"code":"(fn [x] (letfn [(palindrome? [s]\r\n  (or (<= (count s) 1)\r\n    (and (= (first s) (last s))\r\n      (palindrome? (rest (butlast s))))))]\r\n   (palindrome? x)))","problem":27,"user":"4f60ed88e4b0defedf855fb2"},{"code":"(fn [x]\n  (let [y (reverse x)]\n    (every? identity \n      (map #(= (nth x %) (nth y %))\n        (range (count y))))))","problem":27,"user":"4e2ef93d535deb9a81d77f0f"},{"code":"#(if(string? %)\n   (= % (apply str (reverse %)))\n  (= % (reverse %)))","problem":27,"user":"5273562ae4b03e8d9a4a7479"},{"problem":27,"code":"(fn [coll] (= (reverse coll)(seq coll)))","user":"55f274b2e4b06e875b46ce44"},{"problem":27,"code":"(fn palindrome\n    ([v]\n     (if (= (count v) 1) true\n     (let [rest (drop 1 (take (dec (count v)) v)) a (first v) b (last v)]\n         (cond \n             (or (not a) (not b)) true\n             (= a b) (palindrome rest)             \n             :else false\n             )\n         )\n    )))","user":"561a4c60e4b053970a773b06"},{"code":"#(= \n            (reverse (seq %))\n            (seq %)\n           )","problem":27,"user":"50e008d1e4b061dbdced722a"},{"code":"#(=\n  ((if (string? %) clojure.string/reverse reverse) %)\n  %)","problem":27,"user":"4fe8b6afe4b07c9f6fd12c76"},{"code":"(fn pal [s] \n  (or (empty? s) \n      (= 1 (count s))\n      (= (first s) (last s))))","problem":27,"user":"4fd73610e4b0dab7d829f37e"},{"problem":27,"code":"(fn pal [coll](cond\n                  (string? coll) (= coll (apply str(reverse coll)))\n                  :else(= coll (reverse coll))))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":27,"code":"(fn [s]\n  (= (vec (reverse s))\n     (vec s)))","user":"580bd81ee4b0849f6811b711"},{"problem":27,"code":"(fn [x] \n  (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))","user":"57eb10b1e4b0bfb2137f5b5b"},{"problem":27,"code":"(fn [s] (= (into () s) (into () (reverse s))))","user":"56f4cedce4b046a417f92063"},{"problem":27,"code":"(fn [xs]\n  (let [rev (reverse xs)]\n    (if (string? xs)\n      (= xs (apply str rev))\n      (= xs rev))))","user":"4eb92051535dfed6da9c6d4c"},{"code":"#(if (= (reverse %)(seq %)) true false)","problem":27,"user":"506f5d68e4b082ae7d1032c7"},{"problem":27,"code":"(fn pal [coll]\n          (\n           if (empty? coll)\n            true\n            (if (= (first coll)\n                   (last coll))\n              (pal (drop 1 (drop-last 1 coll)))\n              false\n              )\n            )\n          )","user":"5d6d3182e4b04d129b00f2bb"},{"problem":27,"code":"#(-> (= (seq %) (reduce conj () %)))","user":"53df4292e4b0d874e779ae40"},{"code":"(fn [x]\n  (= (seq x) (reverse (seq x)))\n)","problem":27,"user":"4e283bae535deb9a81d77efb"},{"problem":27,"code":"(fn [x]\n  (let [s (seq x)]\n    (= s (reverse s))))","user":"5740f821e4b05c31a32c085e"},{"problem":27,"code":"#( if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))","user":"5644611be4b0284900eef5f1"},{"problem":27,"code":"(fn  [x] (or \n        (< (count x) 2) \n        (and\n          (= (first x) (last x)) \n          (recur(rest(reverse(rest x))))\n              )))","user":"548d1d82e4b0e286459a1215"},{"code":"(fn is-palindrome [xs]\n  (= (reverse xs) (seq xs))\n)","problem":27,"user":"4fb710f4e4b081705acca2cd"},{"code":"(fn [str]\n  (= (map identity str), (reverse str))\n)","problem":27,"user":"50e496e8e4b0cb9ec68fbca0"},{"code":";#(=  (apply str (reverse %)) (apply str %))\n#(= (reverse %) (seq %))","problem":27,"user":"534ab3f5e4b084c2834f4a6e"},{"code":"(fn [s]\n  (every? (fn [[a b]] (= a b))\n          (map vector s (reverse s))))","problem":27,"user":"5013193ae4b0f26a0e3320ab"},{"code":"(fn [input]\n(let [x (split-at (quot (count input) 2) input)\n  y (first x)\n  z (reverse ( second x))\n  t (map vector y z)\n      \n      \n  an (every? #(= (first %) (second %)) t) ]\n  an)\n)","problem":27,"user":"4edf95a8535d10e5ff6f5342"},{"code":"(fn palindrom [mySequence]\n  \t(let [size  (count mySequence)\n          half  (int (/ size 2)) \n          other (if (= (mod size 2) 1) (+ half 1) half)]\n\t\t(= (take half mySequence) (reverse (drop other mySequence)))\n    )\n)","problem":27,"user":"52c10ad2e4b07a9af579235c"},{"problem":27,"code":"(fn pal [x] (or (empty? x) (empty? (rest x)) (and (= (first x) (last x)) (pal (drop-last (rest x))))))","user":"535f9a5ce4b04ce2eb3ed2de"},{"problem":27,"code":"(fn palindrome? [l] (cond (<= (count l) 1) true \n                          (= (first l) (last l)) (palindrome? (-> l rest butlast))\n                          :else false))","user":"5dd35dcbe4b0948ae9d9ad5f"},{"problem":27,"code":"(fn [x] \n  (= (seq x) (seq (reverse x))))","user":"536e56dbe4b0fc7073fd6e6c"},{"code":"(fn palindrome? [xs] (let [xseq (seq xs)] (= xseq (reverse xseq))))","problem":27,"user":"512c0000e4b03a42b6300231"},{"code":"#(= (into () %1) (reverse (into () %1)))","problem":27,"user":"4f3c772de4b0e243712b1f4c"},{"problem":27,"code":"(fn [x]\n  (loop [[firstR & restR] (reverse x) [first & rest] x]\n    (if (not= firstR first)\n      false\n      (do (if (empty? rest)\n            true\n            (recur restR rest))))))","user":"5b5462b5e4b02d533a91bd20"},{"problem":27,"code":"#(let [x (if (string? %) (clojure.string/reverse %) (reverse %))] (= x %))","user":"5c478ba2e4b0e06e1360a3b2"},{"code":"#(= (take (/ (count %1) 2) %1) (reverse (take-last (/ (count %1) 2) %1)))","problem":27,"user":"5034b623e4b062bc5d7ae168"},{"code":"(fn [x] (if (= x \"racecar\") true (= (reverse x) x)))","problem":27,"user":"511937eee4b055cfb310d495"},{"problem":27,"code":"(fn [sec]\n  (if (string? sec) ( = (apply str (reverse sec)) sec)\n  (if (= sec (reverse sec)) true false)))","user":"607f3336e4b05857a65e7747"},{"problem":27,"code":"(fn [coll]\n    (loop [c coll]\n      (if (<= (count c) 1)\n        true\n        (if (= (first c) (last c))\n          (recur (butlast (rest c)))\n          false))))","user":"56eaad95e4b04a395b9a040f"},{"problem":27,"code":"(fn is-palindrome\n  [thing]\n  (= (seq thing) (reverse thing)))","user":"5c3440fee4b0d62ef62d9f50"},{"code":"(fn foo27 [coll]\n  (or\n   (empty? coll)\n   (empty? (rest coll))\n   (and (= (first coll) (last coll))\n        (foo27 (drop-last (rest coll))))))","problem":27,"user":"512e8f5ce4b0b740abc59829"},{"problem":27,"code":"(fn paly? [xs]\n    (let [a (into [] xs)]\n     (= a (reverse a))))","user":"5f6580e7e4b02876ed9fd023"},{"problem":27,"code":"(fn palindrome? [x]\n    (if (< (count x) 2)\n        true\n        (if (= (first x) (last x))\n            (palindrome? (drop-last (drop 1 x)))\n            false\n        )\n    ))","user":"5bef02ede4b0a6d31fed2138"},{"problem":27,"code":"(fn palindrome [s] (cond (or (empty? s) (= (count s) 1)) true (not (= (first s) (last s))) false :else (palindrome (take (- (count s) 2) (rest s))) ) )","user":"57a9db97e4b0b8559636fc5b"},{"problem":27,"code":"#(loop[coll %]\n\n(if(< (count coll) 2)\n    true\n    (if  (= (first coll) (last coll))\n      (recur (butlast (rest coll)) )\n      false ))\n  \n  )","user":"598085e6e4b021a7a535fdd3"},{"problem":27,"code":"(fn pal [li] (cond\n              (< (count li) 2) true\n              (= (first li) (last li)) (pal (rest (butlast li)))\n              true false\n               ))","user":"5b20134de4b03cfeda66ed2d"},{"problem":27,"code":"(fn [s]\n        (= (seq s) (reverse s)))","user":"546c4377e4b00cfc9eacc177"},{"problem":27,"code":"(fn palindrome? [coll]\n  (if (or (empty? coll) (= (count coll) 1))\n    true\n    (if (= (first coll) (last coll))\n      (palindrome? (butlast (rest coll)))\n      false)))","user":"5b82eec6e4b047b03b2037a4"},{"code":"#(= (vec %) (reverse %))","problem":27,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn [string]\n  (= (reverse string) (-> string reverse reverse)))","problem":27,"user":"50da19bae4b0277ab115b3cd"},{"problem":27,"code":"(fn [coll]\n  (= (seq coll) (seq (reverse coll))))","user":"542c026ae4b0dad94371f29a"},{"code":"(fn [s] (if (= (seq s) (reverse s))\n            true\n            false))","problem":27,"user":"508d8ab2e4b0f17d83ea26be"},{"problem":27,"code":";(fn [stuff]\n;  (if (< (count stuff) 2)\n;    true\n;    (if (= (first stuff) (last stuff))\n;      (recur (reverse (rest (reverse (rest stuff)))))\n;      false)))\n\n#(= (seq %) (reverse %))","user":"53838b9ee4b06839e8705ee1"},{"problem":27,"code":"#(if (string? %) (= (clojure.string/join (reverse %)) %) (= (reverse %) %))","user":"55cae949e4b0e31453f649fe"},{"code":"(fn [s]\n  (= (apply str s) \n     (apply str (reverse s))))","problem":27,"user":"51ce1320e4b0e42293a22551"},{"code":"(fn pal [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (pal (butlast (rest s)))\n      false\n      )\n    )\n  )","problem":27,"user":"51b6f4f9e4b04fc00976d479"},{"problem":27,"code":"(fn palindrome?\n  [x]\n  (= (seq x) (reverse x)))","user":"58e53760e4b056aecfd47c8f"},{"code":"(fn [s]\n  (if (string? s)\n    (= (apply str s (reverse s))) \n    (= s (reverse s))))","problem":27,"user":"4f2f6678e4b0d6649770a06e"},{"problem":27,"code":"(fn [coll]\n  (let [f (seq coll)\n        r (reverse f)]\n    (= f r)))","user":"56a76f36e4b07966d5a8a05b"},{"code":"(fn [coll]\n  (let [s-coll (seq coll)]\n    (= s-coll (reverse s-coll))))","problem":27,"user":"52479487e4b05ef8e38e6373"},{"code":"(fn pali-check [seq]\n  (if (= (class seq) java.lang.String)\n    (= seq (apply str (reverse seq)))\n    (= seq (reverse seq))))","problem":27,"user":"53415755e4b00652c8746ecd"},{"problem":27,"code":"(fn[x] \n  (if (string? x) (= x (apply str (reverse x)))\n      (= x (reverse x))))","user":"567952b3e4b05957ce8c6185"},{"problem":27,"code":"(fn [v]\n  \n  (= (seq v) (reverse v))\n  \n  )","user":"56f2611fe4b04a395b9a04a2"},{"problem":27,"code":"(fn f [s] \n  (or (empty? s) \n      (and (= (first s) (last s)) \n           (f (rest (butlast s))))))","user":"57462a4de4b009280f9f2b5d"},{"code":"(fn [lst]\n  (loop [l (seq lst)]\n    (cond\n      (= (last l) (first l))\n        (if (< 1 (count l))\n          (recur (drop 1 (butlast l)))\n          true)\n      :else false)))","problem":27,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":27,"code":"#(= (into ()  %) (into [] %))","user":"5eee9352e4b07c55ae4a0512"},{"code":"(fn [x] (loop [curr x\n               remaining (butlast (rest x))]\n          (let [match (= (first curr) (last curr))]\n            (if (false? match)\n              false\n              (if (< (count remaining) 2)\n                true\n                (recur remaining (butlast (rest remaining))))))))","problem":27,"user":"507a33dee4b08327cd804a68"},{"code":"#(= (vec (reverse %)) (vec %))","problem":27,"user":"4f98da04e4b0dcca54ed6cf7"},{"problem":27,"code":"(fn palindrome? [s] \n  (if (empty? s) \n    true \n    (and \n     (= (first s) (last s)) \n     (palindrome? (drop 1 (drop-last 1 s))))))","user":"6079e5aee4b0a637ed780367"},{"problem":27,"code":"(fn [x]\n   (letfn [(ends-same? [coll] (= (first coll) (last coll)))\n           (get-middle [coll] (-> coll (rest) (reverse) (rest)))]\n   (loop [tmp-x x]\n     (if (not (ends-same? tmp-x))\n       false\n       (if (<= (count tmp-x) 1)\n         true\n         (recur (get-middle tmp-x)))))))","user":"552281cae4b0882d96d0919f"},{"problem":27,"code":"(fn [val] (= (seq val) (reverse val) ))","user":"5d80789ee4b0915913b1d36a"},{"problem":27,"code":"(fn [x] (= (into (list) (seq x)) (seq x)))","user":"5be8bc2de4b0f319e2d7ec66"},{"problem":27,"code":"#(let [n (quot (count %) 2)] (= (take n %) (reverse (take-last n %))))","user":"58ed8f4ce4b056aecfd47d86"},{"problem":27,"code":"(fn detector [coll] (= (seq coll) (seq(reverse coll))))","user":"5f003099e4b0cf489e8d7f17"},{"problem":27,"code":"#(loop [s %]\n   (cond (< (count s) 2) true\n         (not= (first s) (last s)) false\n         :else (recur (drop 1 (drop-last 1 s)))))","user":"5f2c04dde4b033932238a660"},{"code":"(fn [thelist]\n  (loop [restoflist thelist]\n    (if (empty? restoflist)\n      true\n      (if (= (first restoflist) (last restoflist))\n        (recur ((comp rest drop-last) restoflist))\n        false\n        )\n      )\n    )\n  )","problem":27,"user":"52cc7c40e4b07d0d72b27364"},{"problem":27,"code":"#(cond (or (<= (count %) 1)) true\n       (not= (first %) (last %)) false\n       :else (recur (butlast (rest %))))","user":"520fca70e4b080a8d9b9d631"},{"code":"(fn [x] (= x (if (string? x) (apply str (reverse x)) (reverse x))))","problem":27,"user":"4f0376a5535dcb61093f6add"},{"code":"#(reduce (fn [x y] (and x y)) (map (fn [a b] (= a b)) %1 (reverse %1)))","problem":27,"user":"517bbbfce4b07ef0e56148cf"},{"problem":27,"code":"#(let [input (apply list %)]\n   (= input (reverse input)))","user":"54cb378be4b057c6fda3a273"},{"problem":27,"code":"(fn [coll]\n  (= (vec coll)\n     (reverse coll)))","user":"5a065388e4b01bb0ae8afdcb"},{"problem":27,"code":"(fn [object]\n  (let [reversed (reverse object)]\n    (if(string? object)\n      (= object (apply str reversed))\n      (= object reversed))))","user":"53f50c03e4b0db01ade6f9ca"},{"problem":27,"code":"(fn [col] (= (reverse col) (sequence col)))","user":"54f5aa4ce4b0f2f3c5226e94"},{"problem":27,"code":"(fn [x] (if (coll? x) (= x (reverse x))\n          (= x (reduce str (reverse x)))))","user":"59a58bf0e4b066c664927d64"},{"problem":27,"code":"(fn [given-sequence]\n  (let [seq-palindrome (seq given-sequence)\n        palindrome? (reverse seq-palindrome)]\n    (if (= seq-palindrome palindrome?)\n      true\n      false)))","user":"60b68974e4b0e0fa5f1b424b"},{"code":"#(or (<= (count %) 1)\n    (and (= (first %) (last %))\n      (recur (rest (butlast %)))))","problem":27,"user":"4e72a717535d5021c1a89665"},{"problem":27,"code":"#(loop [coll %]\n    (if (= (first coll) (last coll))\n      (if (<= (count coll) 3)\n        true\n        (recur (take (- (count (rest coll)) 1) (rest coll))))\n      false))","user":"5dcb1e73e4b02b31cc3da3b6"},{"code":"(fn [xs]\n  (= (reverse xs) (seq xs)))","problem":27,"user":"50cd0fd5e4b0f7a459302aad"},{"code":"(fn [lst] \n  (= (reverse lst) (seq lst)))","problem":27,"user":"52718620e4b03e8d9a4a73f5"},{"code":"(fn [w]\n  (let [s (seq w)\n        r (reverse s)]\n    (if (= r s) true false)))","problem":27,"user":"4e568873535d8a8b8723a283"},{"code":"(fn [x] (= (reverse x) (seq x) ))","problem":27,"user":"50a3b55be4b0ceace084d494"},{"code":"(fn [sq] (= (reverse sq) (reverse (reverse sq))))","problem":27,"user":"50fbdacfe4b0d10d794c19f0"},{"code":"(fn [x]\n  (= (vec x) (rseq (vec x))))","problem":27,"user":"4eaa5c51535d7eef3080730a"},{"problem":27,"code":"(fn [coll]\n  (= (seq coll) (into '() (seq coll))))","user":"540cde77e4b0addc1aec6709"},{"code":"(fn [x] (loop [a (vec x)]                                                                                                                               \n                (cond                                                                                                                                         \n                 (empty? a) true                                                                                                                              \n                 (= 1 (count a)) true                                                                                                                         \n                 (not= (first a) (last a)) false                                                                                                              \n                 :e (recur (vec (rest (pop a))))                                                                                                              \n                 )                                                                                                                                            \n                ))","problem":27,"user":"4eea1a41535d93acb0a66899"},{"code":"(fn [s]\n  (if (seq s)\n      (loop [front () back (seq s) n (quot (count s) 2) r (rem (count s) 2)]\n        (if (= n 0)\n            (if (= r 0) (= front back) (= front (rest back)))\n          (recur (cons (first back) front)\n                 (rest back)\n                 (dec n)\n                 r)))))","problem":27,"user":"4f7774a6e4b0fbe0118ec57f"},{"code":"(fn palindrome? [s] (if (string? s) (= s (apply str (reverse s))) (= s (reverse s))))","problem":27,"user":"50b8de6ce4b0cba0e598b652"},{"code":"(fn [lst] (= (first lst) (last lst)))","problem":27,"user":"4ec6c878535d6d7199dd36d5"},{"problem":27,"code":"(fn pal [x]\n  (let [f (first x)\n        l (last x)\n        sub-x (rest (butlast x))]\n    (if (not (= f l))\n      false\n      (if (or (= 1 (count sub-x))\n              (= 0 (count sub-x)))\n        true\n        (recur sub-x)))))","user":"4f1c7021535d64f603146482"},{"problem":27,"code":"(fn [xs]\n  (= (reverse (take (quot (count xs) 2) xs))\n     (drop (/ (count xs) 2) xs)))","user":"54fd93bbe4b07d26eda61d36"},{"code":"(fn [x]\n  ((fn check-match [data n] \n\t\t(if (< n (/ (count data) 2)) \n\t\t(if (= (nth data n)(nth data (- (count data) (+ n 1))))\n\t\t\t(check-match data (+ n 1))\n\t\t\tfalse)\n\t\ttrue))\n\tx 0))","problem":27,"user":"50b63309e4b0a86f8358ca68"},{"problem":27,"code":"(fn [lst]\n  (let [aseq (seq lst)\n        len (count lst)\n        front (take (/ len 2) aseq)\n        back-len (if (odd? len) (- (/ len 2) 1) (/ len 2))\n        back (drop back-len aseq)]\n\n    (= front (reverse back))))","user":"54bebeb9e4b0ed20f4ff6ef4"},{"code":"(fn palindrome? [x]\n  (if (string? x) (= x (apply str (reverse x)))\n(= x (reverse x))))","problem":27,"user":"4ea9b80c535d7eef30807306"},{"problem":27,"code":"(fn [s] (let [mycomp \n              (fn mycomp [r t] (if (and (seq r) (seq t))\n                          (and \n                           (= (first r) (first t))\n                           (mycomp (rest r) (rest t))\n\t\t\t\t\t\t   )\n                          (= (seq r) (seq t))\n                          )\n                )\n              ] \n          (mycomp s (reverse s)))\n)","user":"592018d2e4b09b4ee5954c55"},{"code":"(fn [col]\n  (let [c (seq col)]\n    (= c (reverse c))))","problem":27,"user":"50c7431ae4b00bb60fe0c531"},{"problem":27,"code":"(fn [x] ( =(reverse x)(seq x)))","user":"590d0b3fe4b047aa04b199f9"},{"code":"(fn [mylist]\n  (every? \n    (fn [[x y]] (= x y))\n    (map vector mylist (reverse mylist))\n  )\n)","problem":27,"user":"501b212ee4b0b12d9c5f4d83"},{"problem":27,"code":"(fn [s]\n  (= (seq s) (reverse s))\n  )","user":"57c3c7e6e4b05aa3c4741cc4"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (= (clojure.string/reverse x) x)\n  (loop [s x rev []]\n    (if (empty? s) (= rev x)\n         (recur (butlast s) (into rev (list (last s))))))))","user":"5e4d2506e4b0889a8790a570"},{"problem":27,"code":"(fn aa [x] (if ( > 2 (count x)) true ( and (= (first x) (last x)) (aa (rest (drop-last x))))))","user":"528b3f5ae4b0239c8a67ae93"},{"code":"(fn [s]\n  (= (take (Math/floor (/ (count s) 2)) s)\n     (reverse (take-last (Math/floor (/ (count s) 2)) s))\n  ))","problem":27,"user":"4f282da7e4b0d6649770a013"},{"problem":27,"code":"(fn [ys] (= ys ((fn [xs] (if (string? xs) (apply str (reverse xs)) (reverse xs))) ys)))","user":"557ed664e4b05c286339e0d9"},{"problem":27,"code":"#(= (apply str(into () %)) (apply str %))","user":"53b22df6e4b047364c044497"},{"code":"#(letfn [(match? [x]\n                 (cond (< (count x) 2) true\n                       (= (first x) (last x)) (match? (rest (drop-last x)))\n                       :else false))]\n   (match? %))","problem":27,"user":"52530b4be4b0541d1855b8e4"},{"code":"(fn [seq]\n    (if (string? seq)\n      (= (clojure.string/reverse seq) seq)\n      (= (reverse seq) seq)))","problem":27,"user":"511e763ce4b03e81d390ac29"},{"problem":27,"code":"#( = ( reverse %) (seq %))","user":"5ac92dc3e4b0e27600da77bf"},{"code":"(fn [%]\n    (if (< (count %) 2)\n        true\n        (and (= (last %) (first %)) (recur (rest (drop-last %))))\n    )\n)","problem":27,"user":"51422945e4b0b50abeb46b2e"},{"problem":27,"code":"(fn [x] \n  (= (map #(list %) x) \n     (reverse (map #(list %) x))))","user":"5642b939e4b08d4f616f5f1b"},{"problem":27,"code":"(fn [s] \n  (loop [[f & rt] s \n         seed true]\n    (if rt\n      (recur (drop-last rt) (= f (last rt)))\n      seed)\n    )\n  )","user":"559e7848e4b08a52bd4f97d4"},{"problem":27,"code":"(fn palindrom? [input] \n  (if (string? input) \n    (= input (apply str (vec (reverse input))))\n    (= input (reverse input))))","user":"5a3b9092e4b001c08efc0cd7"},{"problem":27,"code":"(fn [pal]\n      (loop [pal pal]\n        (if (= pal ())\n          true\n          (if (= (first pal) (last pal))\n            (recur (drop 1 (reverse (drop 1 (reverse pal)))))\n            false\n            ))))","user":"56cc34aee4b0ea9b8538f73c"},{"problem":27,"code":"#(if (= (reverse %1) (reverse (reverse %1))) true false)","user":"4ddf597a535d08e6dec9fddf"},{"code":"(fn [arg] \n    (loop [my-list arg]\n        (if (= my-list '()) \n            true\n            (if (not= (first my-list) (last my-list))\n                false\n                (recur (rest (butlast my-list)))) )) )","problem":27,"user":"4f2965ffe4b0d6649770a029"},{"code":"(fn palendrome? [lst]\n  (let [reverse (fn [lst] (reduce #(cons %2 %1) nil lst))]\n    (= (seq lst) (reverse lst))))","problem":27,"user":"4e951f44535dbda64a6f6b30"},{"code":"#(= % (if (string? %)\n    (clojure.string/reverse %)\n    (reverse %)))","problem":27,"user":"52b9cfb9e4b07a9af57922c5"},{"problem":27,"code":"(fn palindrome?\n  [x]\n  (condp = (count x)\n    1 true\n    2 (= (first x) (last x))\n    (and (= (first x) (last x)) (palindrome? (rest (butlast x))))))","user":"5e95c88de4b0fbed045a380e"},{"problem":27,"code":"(fn [col]\n  (let [rcol (reverse (seq col))]\n    (= (seq col) rcol)))","user":"546805d6e4b00cfc9eacc134"},{"code":"(fn [seq]\n  (if (string? seq)\n    (= (apply str (reverse seq)) seq)\n    (= (reverse seq) seq)))","problem":27,"user":"4faafccde4b081705acca209"},{"code":"(fn pal [xs] (= (seq xs) (reverse (seq xs))))","problem":27,"user":"4ec07699535dfed6da9c6da2"},{"code":"(fn\n  [colls]\n  (= (into [] colls) (reverse (into [] colls)))\n  )","problem":27,"user":"513dfe2ce4b0825f97f7f966"},{"problem":27,"code":"(fn [item]\n  (= (seq item) (reverse item)))","user":"53573d70e4b04ce2eb3ed278"},{"problem":27,"code":"(fn pal [l]\n  (if (< (count l) 2) \n    true\n    (if (= (first l) (last l))\n    \t(pal (rest (drop-last l)))\n      \tfalse\n      )\n    )\n  )","user":"5626447fe4b00e49c7cb47bd"},{"problem":27,"code":"(fn [sequ]\n   (println sequ)\n   (if (and (> (count sequ) 1) (= (first sequ) (last sequ)))\n     (recur (rest (drop-last sequ)))\n     (= (first sequ) (last sequ))))","user":"5e7fb908e4b085ba37836e3f"},{"code":"#(loop [s %\n        k (/ (dec (count %)) 2)]\n    (= (take k s) (take k (reverse s))))","problem":27,"user":"4ee7fe83535d93acb0a66874"},{"code":"(fn [x] (if (= (first x) (last x)) (if (next x) (recur (butlast (rest x))) true) false))","problem":27,"user":"535920b2e4b04ce2eb3ed294"},{"code":"#(= (seq %)(-> % reverse))","problem":27,"user":"50618c62e4b0a30dc9a35d33"},{"code":"(fn [x]\n  (= (seq x)\n     (reverse x)))","problem":27,"user":"4f107e0e535d64f60314641c"},{"code":"(fn pal [s] (if (= (count s) 2) (= (first s) (last s)) (if (= (count s) 1) true (if (= (first s) (last s)) (pal (rest (reverse (rest (reverse s))))) false))))","problem":27,"user":"50e86794e4b0ebbe794eb7e4"},{"problem":27,"code":"(fn palindrome? \n  [arr]\n  (loop [p arr]                                                                  \n    (cond                                                                        \n      (empty? p) true                                                            \n      (not= (first p) (last p)) false                                            \n    :else (recur (drop 1 (take (dec (count p)) p))))))","user":"599389d8e4b0b211ea3aaab6"},{"problem":27,"code":"(fn [xs] (= (list* xs) (reverse xs)))","user":"5a08f951e4b01bb0ae8afdfd"},{"code":"(fn my-palindrome? [xs]\n  (= (seq xs) (reverse xs)))","problem":27,"user":"533ce38ce4b085b17e897d77"},{"problem":27,"code":"(fn [s]\n  (if (string? s)\n    (= (clojure.string/reverse s) s)\n    (= (reverse s) s)))","user":"54df838de4b024c67c0cf7ae"},{"problem":27,"code":"(fn [coll]\n  (= (reverse coll) (seq coll))\n  )","user":"60752ef6e4b069485764de55"},{"problem":27,"code":"(fn palindrome\n  [x]\n  (let [p (into [](seq x)) len (count p)]\n    (loop [i 0]\n      (if(= (nth p i) (nth p (- len (+ 1 i))))\n        (if (= (mod len 2) i)\n          true\n          (recur (inc i)))\n        false))))","user":"5bd9eac4e4b0ed4b8aab4bfc"},{"code":"(fn ispal? [aseq] (if (string? aseq) (= aseq (apply str (reverse aseq))) (= aseq (reverse aseq))))","problem":27,"user":"51bf4560e4b013aa0d74b817"},{"code":"(fn palindrome [tstr]\n  (= tstr\n  \t(cond\n   \t\t(string? tstr) (.toString (.reverse (StringBuilder. tstr)))\n   \t\t:else (reverse tstr))))","problem":27,"user":"515f2a85e4b0595cf3d1da44"},{"problem":27,"code":"(fn [s] (= (seq s) (into '() s)))","user":"56e43943e4b03a7c14b85a4b"},{"problem":27,"code":"(fn [x]\n  (let [y (into () x)\n        z (reverse (reverse x))]\n    (= y z)))","user":"57dda21be4b0bd073c202445"},{"problem":27,"code":"(fn is-palin [x] (if (string? x) (= (apply str (reverse x)) x) (= x (reverse x))))","user":"5fdb8657e4b05ac5b16ea133"},{"code":"(fn [x] \n  (if (string? x)\n    (let [s (seq x)]\n    (= (reverse s) s))\n    (= (reverse x) x)))","problem":27,"user":"53791ab7e4b06839e8705e4d"},{"problem":27,"code":"#(loop [pred false\n        col %]\n   (if (next col)\n     (if (= (first col) (last col))\n       (recur true (rest (butlast col)))\n       (recur false (rest (butlast col))))\n     pred))","user":"4ec549e1535d6d7199dd3691"},{"code":"#(loop [coll %1]\n     (if-not (= (first coll) (last coll))\n       false\n       (let [coll (drop-last 1 (drop 1 coll))]\n         (if (seq coll)\n           (recur coll)\n           true)))) ;#(= (seq %) (reverse %)) would have been way less overengineered! =)","problem":27,"user":"4ebb20c0535dfed6da9c6d6f"},{"code":"(fn [x]\n  (loop [forward x backward (reverse x)]\n    (if (not (seq forward))\n      true\n      (if (not (= (first forward) (first backward)))\n        false\n        (recur (rest forward) (rest backward))))))","problem":27,"user":"51857e64e4b0da5a5be3babe"},{"code":"(fn [a] (= (apply str (reverse a)) (apply str a)))","problem":27,"user":"53194ba3e4b08068f379ed7a"},{"problem":27,"code":"(fn isPalidrome\n  [x]\n  (if (string? x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))","user":"57c731ede4b05aa3c4741d00"},{"problem":27,"code":"#(= (seq %) (seq(reverse %)))","user":"5d267c11e4b02ea6f0fb6a41"},{"problem":27,"code":"#(= (reverse %) (seq %))\n; This was crazy:\n;#(= \n;  (reverse (first (partition (quot (count %1) 2) %1))) \n;  (take-last (quot (count %1) 2) %1))","user":"56092852e4b0053d1b86c7d9"},{"problem":27,"code":"(fn f [s]\n  (cond\n    (<= (count s) 1) true\n    (not= (first s) (last s)) false\n    :else (f (rest (drop-last s)))))","user":"601004d6e4b074f607df66b2"},{"problem":27,"code":"(fn  [x]\n  (= (reverse x) (seq x)))","user":"52bc0dade4b07a9af57922f1"},{"code":"#(loop [xs %]\n   (let [s (seq xs)]\n   (if (empty? xs)\n     true\n     (if (not= (first xs) (last xs))\n       false\n       (recur (butlast (rest xs)))))))","problem":27,"user":"50772e6ae4b0fc74642bff5d"},{"code":"(fn [xs]\n  (let [mid (Math/floor (/ (count xs) 2))]\n    (= (take mid xs) (take mid (reverse xs)))))","problem":27,"user":"51aab611e4b04e3dc0c27b2d"},{"problem":27,"code":"#(if (= (reverse (seq %)) (seq %)) true false)","user":"5bcd9a86e4b0e9689409edfe"},{"code":"(fn [word] (= (vec word) (vec ( rseq (vec word)))))","problem":27,"user":"5291ede5e4b0239c8a67af1e"},{"problem":27,"code":"(fn [arg]\n  (= (reverse arg) (reverse (reverse arg))))","user":"5ac9c737e4b0e27600da77d2"},{"code":"(fn [lst] (= (seq lst) (reverse lst)))","problem":27,"user":"4f00e9c7535dcb61093f6a33"},{"code":"(fn pal-detect \n  [coll]\n  (if (= (seq  coll) (reverse  (seq coll))) true false))","problem":27,"user":"51aa7298e4b04e3dc0c27b28"},{"problem":27,"code":"(fn [x] (let [seq-x (seq x)] \n          (= seq-x (reverse seq-x))))","user":"549a1234e4b0f3d1d8e70f68"},{"problem":27,"code":"#(= (seq (to-array %)) (seq (to-array (reverse %))))","user":"561052ace4b05f002753df6e"},{"problem":27,"code":"(fn [xs]\n   (cond\n     (empty? xs) true\n     (= (count xs) 1) true\n     (= (first xs) (last xs)) (recur (rest (drop-last xs)))\n     :else false))","user":"5a8bc2a1e4b05369db4d24ef"},{"problem":27,"code":"#(= % (if (string? %) \n        \t(clojure.string/reverse (str %))\n        \t(reverse %)))","user":"56547b51e4b0f9d632dd8481"},{"problem":27,"code":"(fn anon [palindrome]\n  (if (<= (count palindrome) 1)\n      true\n      (and (= (first palindrome) (last palindrome)) (anon (drop-last 1 (drop 1 palindrome))))))","user":"597f8c93e4b0dbe32238d0c1"},{"code":"(fn [w] (every? true? (map #(= (nth w %) (first (take-last (inc %) w))) (range (/ (count w) 2)))))","problem":27,"user":"500854c4e4b028e089d3518c"},{"code":"(fn [lst]\n  (letfn [(pal? [first last]\n    (cond (> first last) true\n          (= (nth lst first) (nth lst last)) (pal? (+ 1 first) (- last 1))\n          :else false))]\n    (pal? 0 (- (count lst) 1))))","problem":27,"user":"4f07ad89535dcb61093f6c2a"},{"problem":27,"code":"#(= % (let [coll (reverse %)]\n        (if (string? %) (apply str coll) coll)))","user":"57ef7f0ee4b0bfb2137f5bd9"},{"problem":27,"code":"(fn \n  [data]\n  (if (string? data)\n    (= data (apply str (reverse data)))\n    (= data (reverse data))))","user":"55ad2379e4b03311e7b732a1"},{"problem":27,"code":"(fn[x](= (seq x)(into () x)))","user":"5939b9f9e4b069cdc2982b3d"},{"problem":27,"code":"(fn [s]\n  (let [rev (reverse s)\n        item (reverse rev)]\n    (= rev item)))","user":"536aba0be4b0243289761eb2"},{"code":"#(every? true?\n    (map = % (reverse %)))","problem":27,"user":"4ff4f5c4e4b0678c553fc362"},{"code":"(fn [ls] \n  (cond (empty? (rest ls)) true\n        (not= (first ls) (last ls)) false\n        :else \n        (recur \n          (rest (reverse (rest ls))))))","problem":27,"user":"502a9fdee4b095a7adb898b4"},{"problem":27,"code":"(fn [n]\n  (= (clojure.string/join n) (clojure.string/join (reverse n))))","user":"5d96edeae4b0d3f9b434ad35"},{"problem":27,"code":"(fn palin\n\t([lst]\n\t(if (empty? lst)\n\t\ttrue\n\t\t(and (= (first lst) (last lst)) (palin (rest (reverse (rest lst))))))))","user":"5954eef0e4b066ee0a44af17"},{"problem":27,"code":"(fn [check] (if (string? check) (= check (apply str (reverse check))) (= check (reverse check))))","user":"576186a5e4b0994c1922fb8e"},{"problem":27,"code":"(fn [coll]\n   (loop [acc '() rem coll]\n     (if (= (count acc) (count rem)) (= acc rem)\n         (if (= (inc (count acc)) (count rem)) (= (seq acc) (rest rem))\n             (recur (cons (first rem) acc) (rest rem))))))","user":"5d126728e4b02c15ef02199a"},{"code":"#(loop [col %]\n   (cond (< (count col) 2) true\n     (not= (first col) (last col)) false\n     true (recur (next (butlast col)))\n   )\n)","problem":27,"user":"4f7683dae4b0fbe0118ec56f"},{"code":"(fn palin [x]\n  (every? identity (map #(= %1 %2) x (reverse x))))","problem":27,"user":"53287dace4b09d4e7a9b5507"},{"problem":27,"code":"#(let [adder (atom 0)\n       palindrome (atom true)]\n   (while (< @adder (- (/ (count %) 2) 1))\n     (let [begin (nth % @adder)\n           end (nth % (- (- (count %) 1) @adder))]\n       (reset! adder (+ 1 @adder))\n       (if (not (= begin end))\n         (reset! palindrome false))))\n   @palindrome)","user":"5baa5f53e4b0a20761a23459"},{"problem":27,"code":"(fn [x] \n  (= \n    (apply str x)\n    (apply str (reverse x))))","user":"578682bbe4b0ebec4cfb74f9"},{"code":"(fn [x]\n  (let [reverse-val (if (string? x)\n                      (apply str (reverse x))\n                      (reverse x))]\n    (= reverse-val x)))","problem":27,"user":"51f82769e4b09be9c177e527"},{"code":"(fn pal [s] (if ( empty? s) true (if (= (first s) (last s) ) (pal (drop 1 (drop-last s)) ) false) ))","problem":27,"user":"5098bce3e4b0cae2931060a0"},{"code":"(fn [xs]\n  (if (= (first xs) (last xs))\n    true\n    false))","problem":27,"user":"521392bce4b0d32679a5065e"},{"code":"(fn palin [seq]\n  (if (< (count seq) 2)\n    true\n    (if (= (first seq) (last seq))\n      (palin (butlast (rest seq)))\n      false\n    )\n  )\n)","problem":27,"user":"4fc4fe59e4b081705acca36a"},{"problem":27,"code":"#(if (string? %) (= (str %) (apply str (reverse (str %)))) (= % (reverse %)))","user":"5e121a89e4b099d064962fe4"},{"problem":27,"code":"(fn [col]\n  (if (seq? col)\n  \t(= col (reverse col))\n    (recur (sequence col))))","user":"56f9c7c6e4b07572ad1a88ba"},{"code":"(fn paln? [s] (= (apply str s) (apply str (reverse s))))","problem":27,"user":"4f0ef874535d0136e6c22328"},{"code":"(fn palindrome? [l] (reduce #(and %1 %2) (map = (reverse l) l)))","problem":27,"user":"539e5d76e4b0ca733b974486"},{"code":"(fn [x]\n(loop [toreverse x reversed []]\n\t(if (empty? toreverse) (= reversed (seq x))\n\t(recur (rest toreverse) (cons (first toreverse) reversed)))))","problem":27,"user":"521368ece4b0d32679a50659"},{"problem":27,"code":"(fn [x]\n  (let [seqx (seq x)]\n    (println \"Test:\" seqx \" count:\" (count seqx))\n    (if (<= (count seqx) 1) true\n      (if (false? (= (first seqx) (last seqx))) false\n        (recur (drop-last (rest seqx)))))))","user":"55486ee6e4b0a04f7929955a"},{"problem":27,"code":"(fn [xs] (= (seq (reverse xs)) (seq xs)))","user":"60b5fa96e4b0e0fa5f1b4242"},{"problem":27,"code":"(fn pal [ls]\n(= (map (fn [l] l) ls) (reverse ls)))","user":"580b79e4e4b0a837a8b30d4a"},{"problem":27,"code":"(fn rr [i](cond (= false i) false\n        (empty? i) true\n        :else (rr (if (= (first i)\n                         (last i))\n                    (->> (drop 1 i)\n                         (take (- (count i) 2)))\n                    false))))","user":"5dab11cde4b000c986472c45"},{"problem":27,"code":"#(not (= (count %) (count (set %))))","user":"56cefadee4b0ea9b8538f763"},{"problem":27,"code":"(fn palindrome [seq]\n\n  (loop [fIdx 0, bIdx (dec (count seq))]\n    (if (< fIdx bIdx)\n      (if (= (nth seq fIdx) (nth seq bIdx))\n        (recur (inc fIdx) (dec bIdx))\n        false\n        )\n      true\n      )\n\n    ))","user":"5aa11b37e4b0d174b936c840"},{"code":"(fn palindrome? [col]\n  (let [half (quot (count col) 2)]\n    (= (take half col) (take half (reverse col)))))","problem":27,"user":"4fe2501ae4b0dd6cd5ce3644"},{"problem":27,"code":"(fn  [seqs] (= (seq seqs) (reverse (seq seqs))))","user":"56a257e7e4b0542e1f8d14bb"},{"problem":27,"code":"#(= (flatten (partition 1 %)) (reverse %))","user":"50a025a9e4b08df8156e9e49"},{"code":"#(let [coll (if (string? %) (rest (clojure.string/split % #\"\")) %)]\r\n    (= coll (reverse coll)))","problem":27,"user":"5006e494e4b0678c553fc492"},{"problem":27,"code":"#(let [half-len (quot (count %) 2)\n              first (take half-len %)\n              second (reverse (take-last half-len %))]\n             (= first second))","user":"572af688e4b0f4d77e651249"},{"problem":27,"code":"(fn [input] (= (vec input) (reverse input)))","user":"5c59b1d3e4b01df32ab73261"},{"code":"(fn [x]\r\n  (if (= (seq x)(reverse x))\r\n    true\r\n    false))","problem":27,"user":"4f9aa97ae4b0dcca54ed6d0e"},{"problem":27,"code":"#(let [rev (reverse %1)]\n  (= rev (reverse rev))\n  )","user":"5ed30cb6e4b016b56eae05c2"},{"problem":27,"code":"(fn palindrome [x]\n  (if (= (type x) java.lang.String)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))","user":"5a9482b7e4b0d174b936c737"},{"code":"(fn [l] (= (vec l) (reverse l)))","problem":27,"user":"4ef5e06d535dced4c769f24a"},{"code":"#(loop [j %] \r\n       (if (and (> (count j) 1) (= (first j) (last j))) \r\n             (recur (rest (butlast j))) \r\n             (< (count j) 2)     \r\n       ) \r\n   )","problem":27,"user":"4f28d266e4b0d6649770a01c"},{"problem":27,"code":"#(if (string? %)\n   (= (clojure.string/join (reverse %)) %)\n   (= (reverse %) %))","user":"5d7b90ede4b02e6b30c93552"},{"problem":27,"code":"#( if (string? %) (= (apply str (reverse %)) %)(= (reverse %) %))","user":"60845eb8e4b0736b099e42ef"},{"problem":27,"code":"(fn [s] (= (seq s)  (reverse (seq s))))","user":"4f033c99535dcb61093f6a7e"},{"problem":27,"code":"#(= (reverse (into '() %)) (into '() %))","user":"57122b20e4b09c608db70451"},{"code":"(fn [xs] \n  (= (seq xs) (reverse (seq xs)))\n  )","problem":27,"user":"51004dabe4b0e0dde55c17f0"},{"code":"(fn [x]\n  (let [half (/ (count x) 2)]\n    (= (take half x)\n       (reverse (take-last half x)))))","problem":27,"user":"5099198ce4b0cae2931060ac"},{"problem":27,"code":";(fn [l] (= (seq l) (reverse l)))\n(fn [l] (if (empty? l) true (if (= (first l) (last l)) (recur (rest (drop-last l))) false)))","user":"53e8c684e4b036ad0777e48b"},{"code":"#(= (seq (reverse %)) (seq %))","problem":27,"user":"4ec1923f535dfed6da9c6db2"},{"code":"(fn [L] (= (seq L) ((fn rev \n  ([L] (rev L '()))\n  ([L result]\n    (if (= L ()) result \n      (rev (rest L) (conj result (first L) ))))) L )  ) )","problem":27,"user":"533e45a7e4b085b17e897d8c"},{"code":"(fn [seeq]\r\n  (loop [curr-seeq (seq seeq)]\r\n    (cond (empty? curr-seeq) true\r\n          (= (first curr-seeq) (last curr-seeq))\r\n            (recur (next (butlast curr-seeq)))\r\n          :else false)))","problem":27,"user":"4e0febe6535d04ed9115e7be"},{"problem":27,"code":"(fn palin [xs]\n  (if (string? xs)\n    (= xs (apply str (reverse xs)))\n    (= xs (reverse xs))))","user":"5952d75ce4b066ee0a44aed4"},{"problem":27,"code":"#(let [p (int (-> % count (/ 2)))\n       [l r] ((juxt (partial take p) (partial take-last p)) (seq %))]\n   (= l (reverse r)))","user":"58a3279fe4b02bd94d917ee9"},{"problem":27,"code":"(fn [string] (= (seq string) (reverse string)))","user":"548d6b75e4b0e286459a1216"},{"problem":27,"code":"(fn palindrome? [col]\n \t(let [half (quot (count col) 2)]\n\t\t(= (take half col) (reverse (take-last half col)))))","user":"56eff7c1e4b04a395b9a0468"},{"problem":27,"code":"(fn [x]\n  (if (= java.lang.String (type x))\n    (= (apply str (reverse x)) x)\n  \t(= (reverse x) x)))","user":"5e78e8d3e4b085ba37836dfd"},{"problem":27,"code":"(fn pal [lst]\n  (loop [ll lst\n        rl (reverse ll)]\n                    (if (empty? ll)\n                      true\n                      (if (not (= (first ll) (first rl)))\n                        false\n                        (recur (rest ll) (rest rl))\n                        )\n                      )\n    \n    )\n  )","user":"5a7f77fae4b00b71e582a041"},{"code":"(fn [lis]\n  (let [s (seq lis)\n        rs (reverse s)]\n    (= s rs)\n    )\n  )","problem":27,"user":"4f2004a1535d64f6031464a7"},{"code":"#(= (seq %) (reverse %))\n\n;#(loop [coll %]\n;   (let [count (count coll)]\n;     (cond (= 0 count) true\n;           (= 1 count) true\n;           :default (let [first (first coll)\n;                          last (nth coll (dec count))]\n;                      (if (not (= first last))\n;                        false\n;                        (recur (take (- count 2) (rest coll))))))))","problem":27,"user":"4fed24a5e4b0681fd128dcaf"},{"code":"#(= (reverse %) (vec %))","problem":27,"user":"4e36038f535deb9a81d77f31"},{"code":"(fn [s] (= (reverse s) (reverse (reverse s))))","problem":27,"user":"52bc6f5ee4b07a9af57922f6"},{"problem":27,"code":"(fn [coll] (loop [x (seq coll) reversed (empty (seq coll))] (if (empty? x) (=  (seq coll) reversed) (recur (rest x) (cons (first x) reversed)))))","user":"5f6cb2a5e4b02876ed9fd057"},{"problem":27,"code":"(fn palindrome? [xs]\n  (= (seq xs) (reverse xs)))","user":"55d204abe4b0e31453f64a4f"},{"code":"(fn [coll] \n  (let [reversed (if (string? coll)\n                      (apply str (reverse coll))\n                      (reverse coll))]\n      (= coll reversed)))","problem":27,"user":"4fb73af2e4b081705acca2d0"},{"problem":27,"code":"(fn pali [l]\n  (letfn [(remove-last [l]\n                        (if (= 1 (count l))\n                          '()\n                          (cons (first l) (remove-last (rest l)))))]\n    (if (or (= (count l) 0) (= (count l) 1))\n      true\n      (if (= (first l) (last l))\n        (pali (remove-last (rest l)))\n        false))))","user":"551c6bcee4b07993ea3788df"},{"code":"(fn [x] \n  (if (string? x)\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)))","problem":27,"user":"4fe9badfe4b0547ebccb246e"},{"problem":27,"code":";(fn [input] (= (seq input) (reduce conj () input) ))\n(fn [x]\n  (= (reverse x) (seq x)))","user":"53bdae7fe4b0d9a98559a6d9"},{"problem":27,"code":"(fn [my-seq]\n  (= (vec my-seq) (reverse my-seq)))","user":"546ff701e4b00cfc9eacc1b3"},{"problem":27,"code":"(fn isPalindrome \n  [sourceString]\n  (if \n    (string? sourceString)\n  \t(= (clojure.string/join \"\" (reverse sourceString)) sourceString)\n  \t(= (reverse sourceString) sourceString)\n  )\n )","user":"5aa811f7e4b0d174b936c8c2"},{"code":"(fn [s]\n  (let [v (vec s)\n        rv (rseq v)]\n    (= v rv)))","problem":27,"user":"50a7ef7fe4b090657f4a5ce0"},{"code":"(fn [x]\n  (let [a (reverse x)\n        b (reverse a)] (= a b)))","problem":27,"user":"4e4b911f535dc968683fc4d6"},{"problem":27,"code":"#(= % (if (string? %) \n                   (clojure.string/join (reverse %))\n                   (reverse %)))","user":"55dfada4e4b050e68259b3fd"},{"problem":27,"code":"#(loop [stream %]\n    (if (empty? stream)\n      true\n      (if (= (last stream) (first stream))\n        (recur ((comp rest drop-last) stream))\n        false)))","user":"5eb41273e4b00a66d4a9521b"},{"problem":27,"code":"(fn [sq]\n  (cond\n    (or (empty? sq) (== (count sq) 1)) true\n    (not= (first sq) (last sq)) false\n    :else (recur (drop-last (drop 1 sq)))\n    )\n  )","user":"5831846ae4b051871117c02c"},{"problem":27,"code":"(fn palindrome? [coll] \n  (= (seq coll) (reverse coll)))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":27,"code":"(fn pal [x]\n  (let [xl (seq x)\n        r (rest xl)]\n    (if (empty? r)\n      true\n      (if (= (first xl) (last xl))\n        (pal (take (- (count r) 1) r))\n        false))))","user":"5674607ae4b05957ce8c6137"},{"code":"(fn [seq]\n  (let [c (count seq)]\n    (cond (or (= c 0) (= c 1)) true\n        (not (= (first seq) (last seq))) false\n        :else (recur (subvec (vec seq) 1 (- c 1))))))","problem":27,"user":"4e9c4e02535dbda64a6f6b7e"},{"problem":27,"code":"#(= (clojure.string/join %) (clojure.string/join (reduce conj '() %)))","user":"55c10409e4b01b9910ae2a2c"},{"problem":27,"code":"(fn[n]\n  (loop [given (#(into () n)) keep-up-count 0 keep-down-count (- (count n) 1)]\n    (if (or (= keep-up-count keep-down-count) (= keep-up-count (- keep-down-count 1)))\n      true\n      (if (not= (nth given keep-up-count) (nth given keep-down-count))\n        false\n        (recur given (+ keep-up-count 1) (- keep-down-count 1))))))","user":"5668aad0e4b04acd4f672df5"},{"problem":27,"code":"#(let [half (/ (count %) 2)] (= (take half %) (reverse (take-last half %))))","user":"5a64ce4ee4b0512ff01cd9a6"},{"code":"(fn [x] (= (-> x reverse reverse) (reverse x)))","problem":27,"user":"51377c10e4b04059df19f305"},{"problem":27,"code":"(fn a [x]\n  (if (> (count x) 1)\n  \t(if (= (first x) (last x))\n\t  \t(a (rest (butlast x)))\n      \tfalse\n    ) true\n  )\n)","user":"58fe40afe4b0438e51c2cfca"},{"problem":27,"code":"(fn pal\n  ([x y]\n   (println (str (first x) (last x) (count x)))\n   (cond (empty? x) y\n         (= (count x) 1) y\n        (not (= (first x) (last x))) false\n        :else (recur (take (- (count (rest x)) 1) (rest x)) true)))\n  ([x]\n   (pal x false)))","user":"58a3ba31e4b02bd94d917eff"},{"problem":27,"code":"#(= \n  (seq %) \n  (reverse %))","user":"56899934e4b0dcc4269f4080"},{"problem":27,"code":"(fn [a] (when-let [s (seq a)] (= s (reverse s))))","user":"53bd85fae4b0d9a98559a6d4"},{"code":"(fn [s] (= (list* s) (reverse s)))","problem":27,"user":"5123f099e4b02c3f2a072cca"},{"code":"#(= (clojure.string/join (reverse %)) (clojure.string/join %))","problem":27,"user":"50de11b2e4b061dbdced7217"},{"problem":27,"code":"(fn [sq]\n     \n    (let [l (count sq) help (fn help [sq s e]\n       (let [sc (nth sq s) \n             ec (nth sq e)]\n         (cond (= s e) \n               true\n               (= (- e 1) s) \n               (= sc ec)\n               (not= sc ec) \n               false \n               :else \n               (recur sq (+ s 1) (- e 1)))))]\n      (help sq 0 (- l 1))))","user":"56e0f485e4b03a7c14b85a1c"},{"problem":27,"code":"(fn [x]\n  (let [psize (int (/ (count (seq x)) 2))\n        [m n] (partition psize (+ 1 psize) (seq x))]\n   ((fn [a b]\n     (if (or (= b '()) (= a '()))\n       true\n       (if (= (first a) (first b))\n         (recur (rest a) (rest b))\n         false)))\n    m (reverse n))))","user":"53aaaf7ae4b047364c044444"},{"problem":27,"code":"#(= (-> % reverse clojure.string/join) (clojure.string/join %))","user":"4f9dd376e4b0dcca54ed6d27"},{"problem":27,"code":"(fn [item] (= (apply str (reduce conj '() item)) (apply str item)))","user":"5a99b83fe4b0d174b936c7aa"},{"problem":27,"code":"#(= (first %) (first (reverse %)))","user":"564a985be4b0284900eef65c"},{"problem":27,"code":"#(loop [cur true arg %1]\n    (if (<= (count arg) 1)\n      (and true cur)\n      (recur (= (first arg) (last arg)) (rest (drop-last arg)))))","user":"5c784248e4b0fca0c162281f"},{"code":"#(let\n  [obj (reverse %)] \n  (= (if (string? %) (apply str obj) obj) %))","problem":27,"user":"4ec6f4ee535d6d7199dd36dc"},{"code":"#(every? (fn [[a b]] (= a b))\n                (partition 2 (interleave % (reverse %))))","problem":27,"user":"4ed90014535d10e5ff6f52fe"},{"code":"#(= (map identity %) (reverse %))","problem":27,"user":"4ec12577535dfed6da9c6da8"},{"problem":27,"code":"(fn [x]\n(= (take (quot (count x) 2) x) (reverse (take-last (quot (count x) 2) x))))","user":"57a2328ae4b0c3d858beb8f8"},{"problem":27,"code":"(fn palindrome? [coll]\n  (if (string? coll)\n    (= (reverse coll) (reverse (reverse coll)))\n    (= (reverse coll) coll)))","user":"5e2ef900e4b05b4b015161fc"},{"code":"#(let [reversed (reverse %)]\n   (= reversed (reverse reversed)))","problem":27,"user":"511f88eee4b085952a83535f"},{"problem":27,"code":"(fn[totest](\n  = (reverse (reverse totest)) (reverse totest)))","user":"53d10553e4b00fb29b22130f"},{"code":"(fn [coll] \n  (= (reverse coll) (reverse (reverse coll))))","problem":27,"user":"517a995de4b01aacecbecbef"},{"problem":27,"code":"(fn [s]\n  (loop [rest-of-s s\n         maybe false]\n    (let [first-s (first rest-of-s)\n          last-s (last rest-of-s)\n          rest-of-s (rest (butlast rest-of-s))]\n      (if (not (seq rest-of-s))\n        maybe\n        (recur rest-of-s (= first-s last-s))))))","user":"5382b433e4b06839e8705ed7"},{"code":"(fn [aseq] (= (reverse(reverse aseq)) (reverse aseq)))","problem":27,"user":"4f048f67535dcb61093f6bd3"},{"code":"#(= 0 (count (filter false? (map identical? (seq %) (reverse %)))))","problem":27,"user":"5208495ce4b0c1501ba9e6da"},{"problem":27,"code":"(fn [coll] (= (apply str coll)  (apply str (reverse coll))))","user":"5b9bfe0be4b0c0b3ffbd4b10"},{"code":"(fn [s] \n  (let [n (/(count s) 2)\n        head (take n s)\n        tail (take n (reverse s))]\n   (= head tail)))","problem":27,"user":"5093bc30e4b097f48cc38584"},{"code":"(fn [s]\n  (every? #(= (first %) (second %)) (map vector s (reverse s))))","problem":27,"user":"52ce4cafe4b07d0d72b2738e"},{"code":"(fn palindrome? [l]\n  (cond\n    (not (vector? l)) (palindrome? (vec l))\n    (or empty? l (= 1 (count l) true))\n    (= (first l) (last l)) (palindrome? (rest (pop l)))\n    false))","problem":27,"user":"4eca2cea535d6d7199dd3702"},{"problem":27,"code":"(fn pal-det [x]\n  (loop [l (vec x)]\n    (if-not (< (count l) 2)\n      (let [f (first l)\n            ls (last l)\n            middle (subvec l 1 (dec (count l)))]\n        (if-not (= ls f)\n          false\n          (recur middle) ))\n      true)))","user":"57040195e4b08d47c9778202"},{"code":"(fn  [coll] (= (seq coll) (reverse (seq coll))) )","problem":27,"user":"52cb94e5e4b07d0d72b2734e"},{"code":"(fn [list] (reduce #(and %1 %2) true (map = (reverse list) list)))","problem":27,"user":"4fa39b3ee4b081705acca191"},{"code":"(fn [str]\n  (loop [s str]\n    (cond (<= (count s) 1) true\n          (= (first s) (last s)) (recur (rest (butlast s)))\n          :else false)))","problem":27,"user":"4f98ead0e4b0dcca54ed6cf8"},{"problem":27,"code":"(fn [seq]\n  (if (= (first seq) (last seq))\n    (let [rest-seq (butlast (rest seq))]\n      (if (empty? rest-seq)\n        true\n        (recur rest-seq)))\n    false))","user":"53b0765ae4b047364c044484"},{"code":"(fn [x] \n  (let [y (if (string? x) (apply str (reverse x)) (reverse x))]\n    (= x y)))","problem":27,"user":"4dd9d299535d2dad7130b5dd"},{"problem":27,"code":"(fn [x] \n  (= x ((if (string? x) clojure.string/reverse reverse) x)))","user":"56946d43e4b0dcc4269f411e"},{"problem":27,"code":"(fn [s] (if (= (reverse (seq s)) (seq s)) true false) )","user":"546a6fd8e4b00cfc9eacc158"},{"problem":27,"code":"#(if (= (type %) java.lang.String) (= (apply str (reverse %)) %) (= (reverse %) %))","user":"540479e7e4b0addc1aec665a"},{"code":"(fn palindrome[x]\r\n  (if (string? x)\r\n    (= x (apply str (reverse x)))\r\n  (= x (reverse x))\r\n  )\r\n)","problem":27,"user":"4eb7ff08535d7eef30807379"},{"problem":27,"code":"#(cond\n  (string? %) (= % (clojure.string/reverse %))\n  (list? %)   (= % (reverse %))\n  (vector? %) (= % (into [] (reverse %))))","user":"556a3243e4b09a3098a524de"},{"code":"(fn [s] \n   (loop [l (count s)\n          i 1]\n     (cond \n      (> i (/ l 2)) true\n      (= (nth s (- i 1)) (nth s (- l i))) (recur l (inc i))\n      :else false)))","problem":27,"user":"4f038b62535dcb61093f6b1c"},{"code":"(fn [x]\n  (= (apply str (reverse x)) (apply str x)))","problem":27,"user":"500b61b1e4b03d00572d2d81"},{"problem":27,"code":"#(let [a (seq %)\n       b (reverse a)]\n   (= a b)\n )","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":27,"code":"(fn [n]\n  (loop [mylist n]\n    (if (= (first mylist) (last mylist))\n      (let [ newlist (-> mylist rest reverse rest) ]\n      \t(if (= newlist ())\n          true\n          (recur newlist)\n        )\n      )\n      false\n    )\n  )\n)","user":"57e396cde4b0bfb2137f5a9e"},{"problem":27,"code":"(fn [in]\n  (loop [xs in]\n    (if (> 1 (count xs))\n      true\n      (if (= (first xs) (last xs))\n        (recur (drop 1 (drop-last 1 xs)))\n        false))))","user":"578606d2e4b0ebec4cfb74ec"},{"problem":27,"code":"(fn [seqOrString]\n      (if (string? seqOrString)\n        (= seqOrString (clojure.string/reverse seqOrString))\n        (= seqOrString (rseq (into [] seqOrString)))\n      )\n  )","user":"5b98e5a7e4b0c0b3ffbd4abf"},{"problem":27,"code":"(fn [col]\n\t(every? true? (map = col (reverse col))) \n)","user":"58670d13e4b0f14aab7c8871"},{"code":"(fn [set]\r\n  (if (empty? set)\r\n    true\r\n    (if (= (first set) (last set))\r\n      (recur (rest (butlast set)))\r\n      false\r\n    )\r\n  )\r\n)","problem":27,"user":"4dd6fa3a535d2dad7130b5ce"},{"problem":27,"code":"(fn pal?[n]\n  (= (seq n) (reverse n)))","user":"5845c8f6e4b089d5ab817e77"},{"code":"#(\n    = (take (Math/floor (/ (count %) 2)) %) \n       (reverse (drop (Math/ceil (/ (count %) 2)) %))\n       )","problem":27,"user":"52f28593e4b05e3f0be25ef9"},{"problem":27,"code":"(fn palindrome [s]\n  (cond \n   (empty? s) true\n   (= (list* s) (reverse s)) true\n   :else false))","user":"563b236ce4b0bfe05bf1180b"},{"code":"#(= (into [] %) (reverse (into [] %)))","problem":27,"user":"4eb01df4535d7eef30807337"},{"problem":27,"code":"(fn [col]\n\t(let [half (quot (count col) 2)]\n\t      (= (take half col) (reverse (take-last half col)))))","user":"57ca338de4b05aa3c4741d37"},{"code":"#(= (vec (reverse (vec %)))  (vec %))","problem":27,"user":"50646c01e4b007509339a58b"},{"problem":27,"code":"(fn [arr] (= (reverse (reverse arr )) (reverse arr )))","user":"573b664ce4b0cd1946bd10a7"},{"problem":27,"code":"(fn [col] (let [re-col (into [] (reverse col)) vecCol (into [] col)]\n            (loop [x 0]\n              (when (< x (count vecCol))\n                (cond \n                  (not= (get vecCol x) (get re-col x)) false\n                  (= x (- (count vecCol) 1)) true\n                   :else  (recur (+ x 1)))))))","user":"5c9da580e4b048ec896c5b12"},{"code":"(fn [s]\n  (loop [v (vec s) start 0 end (- (count s) 1)]\n    (if (not(= (v start) (v end)))\n      false\n      (if (or (= start end) (> start end))\n        true\n        (recur v (inc start) (dec end))))))","problem":27,"user":"4f61be97e4b0defedf855fc5"},{"code":"(fn koko [x] (= (reverse (seq x )) (seq x)))","problem":27,"user":"4f85d497e4b033992c121c4b"},{"problem":27,"code":"#(= (seq %1) (into '() (seq %1)))","user":"5e16006be4b0a047bd49f711"},{"problem":27,"code":"(fn [original-list] \n\t(= (clojure.string/join \"\" original-list) (clojure.string/join \"\" (map #(str %) (reverse original-list))))\n)","user":"5b3de9a7e4b02d533a91bbf4"},{"problem":27,"code":"(fn palindrome [x]\n        (let [y (reverse x)]\n          (if (= (seq y) (seq x))\n            true\n            false)))","user":"59301509e4b072a2710fcfd6"},{"code":"(fn panendrome? [xs]\n    (if (or (empty? xs) (= (count xs) 1))\n        true\n        (if (= (first xs) (last xs))\n            (recur (rest (butlast xs)))\n            false)))","problem":27,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":27,"code":";(fn [s] \n;  (if (string? s) \n;   (do\n;    (let [backward (apply str(reverse s))]\n;      (= backward s)\n;    )\n;   )\n;   (do \n;    (let [backward (reverse s)]\n;      (= backward s)\n;    )\n;   )\n;  )\n;)\n\n#(= (seq %) (reverse (seq %)))","user":"5be589f9e4b0ed4b8aab4d13"},{"code":"#(= % (if (= java.lang.String (type %)) (apply str (reverse %)) (reverse %)))","problem":27,"user":"4e7e6cef535db169f9c79714"},{"code":"(fn palindrome? [s]\n  (= (seq s) (reverse s)))","problem":27,"user":"521b9f92e4b0c4ef0be8304c"},{"code":"(fn [poss_palin] \n    (= (seq poss_palin) \n        (reverse poss_palin)))","problem":27,"user":"4f617f66e4b0defedf855fc0"},{"code":"#(= (into () %) (list* %))","problem":27,"user":"537d6d44e4b06839e8705e8c"},{"code":"(fn [s]\n  (if (or (= 1 (count s)) (= 0 (count s)))\n    true\n    (if (not (= (first s) (last s)))\n      false\n      (recur (rest (butlast s))))))","problem":27,"user":"4ec92a04535d6d7199dd36fa"},{"problem":27,"code":"(fn [lst] (if (<=  (count lst) 1)\n            true\n            (if (not= (last lst) (first lst))\n              false\n              (recur (rest (reverse (rest (reverse lst))))))))","user":"5f558a76e4b0a0bc16850a84"},{"code":"(fn f [xs]\r\n  (if (string? xs)\r\n    (= xs (clojure.string/join (reverse xs)))\r\n    (= xs (reverse xs))))","problem":27,"user":"4e8dd6cb535d65386fec213b"},{"code":"(fn [orig]\n  (loop [l orig]\n    (if (empty? l)\n      true\n      (if (= (first l) (last l))\n        (recur (->> l (drop 1) (drop-last)))\n        false\n        ))))","problem":27,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn [list] (let [c (count list) t (quot c 2) d (quot (+ 1 c) 2)] (= (take t list) (reverse (drop d list)))))","problem":27,"user":"4f4afb1fe4b0d56e7bb92c21"},{"code":"#(let [coll (seq %)\n        rev (reverse coll)]\n    (= rev coll))","problem":27,"user":"51852961e4b0da5a5be3babb"},{"problem":27,"code":"(fn [coil]\n  (cond (= 1 (count coil)) true\n        (= 0 (count coil)) true\n        (not (= (first coil) (last coil))) false\n        :else (recur (rest (reverse (rest coil))))))","user":"56c55fbce4b05cc29241eea5"},{"problem":27,"code":"(fn [x]\n  ( = (vec x) (reverse (vec x))))","user":"56874171e4b0dcc4269f405c"},{"code":"(fn palindrome? [xs]\r\n  (if (empty? xs)\r\n    true\r\n    (and (= (first xs) (last xs))\r\n         (palindrome? (drop-last (drop 1 xs))))))","problem":27,"user":"4eeae8f0535d93acb0a668a2"},{"problem":27,"code":"(letfn [(palindrome [xs ys]\n                    (cond\n                     (empty? xs) true\n         \t\t\t (= (first xs) (first ys)) (palindrome (rest xs) (rest ys))\n         \t\t\t :else false))]\n  (fn [xs]\n    (palindrome (seq xs) (reverse xs))))","user":"551ee974e4b08d5046aa8a50"},{"code":"(fn [x] (reduce (fn [a b] (and a b)) (map = x (reverse x))))","problem":27,"user":"52f89ac8e4b047fd55836fd7"},{"problem":27,"code":"(fn [x] (let [n (/ 2 (count x))] (= (take n x) (reverse (take-last n x)))))","user":"59234753e4b0a390037439ef"},{"code":"(fn palendrome [v] (and (= (first v) (last v)) (if (empty? v) true (palendrome (rest (drop-last v))))   ) )","problem":27,"user":"53978ea3e4b0b51d73faaeeb"},{"problem":27,"code":"(fn palindrome? [x] (cond\n             (= () (rest x)) true\n             (= (first x) (last x)) (palindrome? (reverse (rest (reverse (rest x)))))\n             :else false\n        )\n)","user":"58f92297e4b0438e51c2cf43"},{"code":"(fn [x]\n  (let [a (first x) z (last x)]\n    (if (empty? x) true\n      (if (= a z)\n        (recur (rest (drop-last x)))\n        false))))","problem":27,"user":"51b66b31e4b02e5820733406"},{"problem":27,"code":"(fn [x]\n    (= (vec x) (reverse (vec x))))","user":"53275758e4b09d4e7a9b54fc"},{"problem":27,"code":"(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (clojure.string/reverse coll)))\n  (= coll (reverse coll))))","user":"55d3780ee4b0e31453f64a66"},{"problem":27,"code":"#(= (if(= (type %) java.lang.String)\n     (clojure.string/reverse %)\n      (reverse %)) %)","user":"57e8d443e4b0bfb2137f5b1a"},{"code":"(fn palin? [coll] (let [c (vec coll)](= c (reverse c))))","problem":27,"user":"50b8e9a4e4b0cba0e598b656"},{"problem":27,"code":"(fn f\n   ([x]\n    (if (empty? x)\n      true\n      \n    (if (= (first x) (last x))\n      (recur (take (- (count x) 2) (next x)))\n      false\n      ))))","user":"58de94e2e4b0a4d5acaab6f4"},{"code":"#(=(seq %) (reverse %))","problem":27,"user":"536c1119e4b0fc7073fd6e34"},{"problem":27,"code":"#(let [forwards (vec %)\n        backwards (vec (reverse %))]\n    (= forwards backwards))","user":"543b12cce4b032a45b86932a"},{"problem":27,"code":"(fn [n]\n  (loop [front (first n)\n        back (last n)\n        iter 1]\n  (if(= front back)\n    (do \n      (if (not(nil? front))\n        (recur (get n iter) (get n (- (count n) iter 1)) (inc iter))\n        true\n        )\n      )\n  false\n    )\n  )\n)","user":"5ce44ee2e4b0a17bb84e2b57"},{"code":"#(= (reverse %)\n    (seq %))","problem":27,"user":"4dad938fc9a9d6ed1b99dc57"},{"code":"(fn [s] (= s\n           (if (string? s)\n            (apply str (reverse s))\n            (reverse s))))","problem":27,"user":"4ff769bce4b0678c553fc38f"},{"problem":27,"code":"#(loop [i 0 n (count %) pal true]\n  (if (= i n) pal\n  (recur (inc i) n (and pal (= (nth % i) (nth % (- n (inc i)))))))\n  )","user":"5d88a22de4b0915913b1d3ab"},{"problem":27,"code":"#(loop [f %]\n    (if (empty? f)\n      true\n      (if (not= (first f) (first (reverse f)))\n        false\n        (recur (reverse (next (reverse (next f)))))\n       )\n     )\n)","user":"558b494ce4b0277789237629"},{"problem":27,"code":"; #(= (seq %) (into '() %))\n(fn [x] (= (seq x) (into '() x)))","user":"5d9a49c4e4b0d3f9b434ad45"},{"problem":27,"code":"(fn [x]\n  (let [y (if (string? x)\n            (apply str (reverse x))\n            (reverse x))]\n    (= x y)))","user":"5d5ef0bce4b0c9e5857d4ffb"},{"problem":27,"code":"(fn palindrome?\n  [x]\n  (loop [x x]\n    (if (empty? x)\n      true\n      (if (= (last x)\n            (first x))\n        (recur (drop 1 (drop-last x)))\n        false))))","user":"5f4eb036e4b0102c75033969"},{"problem":27,"code":"#(= (reverse %) (reverse (reverse  %)))","user":"54d4b3a7e4b0a52adc2e2003"},{"problem":27,"code":"(fn [sequ]\n  (loop [newsequ sequ ispal true]\n    (if (or (empty? newsequ) (empty? (rest newsequ)) (not ispal))\n      ispal\n      (recur (rest (butlast newsequ)) (= (first newsequ) (last newsequ)))\n      )\n    )\n  )","user":"57a13745e4b0c3d858beb8e3"},{"problem":27,"code":"#(loop [c %]\n   (if (> (count c) 1)\n     (if (not= (first c) (last c))\n       false\n       (recur (-> c\n                  rest\n                  reverse\n                  rest\n                  reverse)))\n     true))","user":"5dcc0ee9e4b02b31cc3da3c2"},{"code":"#(= (vec %) (reverse (vec %)))","problem":27,"user":"4ef4e5fa535dced4c769f242"},{"code":"#(let [p (map str %)] (= p (reverse p)))","problem":27,"user":"5348276de4b084c2834f4a55"},{"code":"(fn [ l ] \n  (let [ s (apply list l) ] (= s (reverse s)) ))","problem":27,"user":"4fc43a8ee4b081705acca346"},{"problem":27,"code":"(fn [in] (= (reverse (seq in)) (seq in)))","user":"589b98fae4b00487982d533c"},{"code":"(fn [x]\n  (first (distinct (map = (seq x) (reverse x)))))","problem":27,"user":"51ce3cd0e4b0e42293a22553"},{"problem":27,"code":"(fn [coll] \n  (= (apply str coll) (apply str (reverse coll))))","user":"5da9d89ae4b000c986472c3b"},{"problem":27,"code":"#(if (string? %) (=  (list %) (reverse (list %)))\n   (= % (reverse %)))","user":"554a270fe4b0a04f79299570"},{"code":"(fn pal?\n  [x]\n  (cond\n   (string? x) (= x (apply str (reverse x)))\n   :else (= x (reverse x))))","problem":27,"user":"518c0f4ee4b0f028e99addf7"},{"code":"(fn foo [coll]\n  (cond\n    (= (count coll) 1) true\n    (= (count coll) 0) true\n    (= (first coll) (last coll))\n      (foo (-> coll next reverse next reverse))\n    :else false\n  )\n)","problem":27,"user":"50959df3e4b087f34d351ab4"},{"code":"(comp #(= % (rseq %)) vec)","problem":27,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":27,"code":"(fn palindrome-checker\n  [xs] (if-let [remaining (not-empty xs)] \n         (if\n           (= (first xs) (last xs))\n           (recur (drop 1 (butlast xs)))\n           false)\n         true))","user":"59c3a7e9e4b0a024fb6ae4df"},{"problem":27,"code":"(fn [xs] (\n          = (first xs) (last xs)))","user":"570466e6e4b0b0fb43fd0663"},{"problem":27,"code":"(fn [[x & xs]]\n  (if (empty? xs)\n    true\n    (if (= x (last xs)) (recur (drop-last xs)) false)))","user":"590e588ce4b047aa04b19a23"},{"code":"(fn palindrome? [seq]\n  (if (<= (count seq) 1)\n    true\n    (if (= (first seq) (last seq))\n      (palindrome? (rest (butlast seq)))\n      false)))","problem":27,"user":"504e0136e4b078edc5f5938e"},{"code":"#(= (lazy-seq %) (reverse %))","problem":27,"user":"519c4111e4b0a1d87b003458"},{"problem":27,"code":"(fn palindrome-detecor\n  [param]\n  (if (= (seq param) (reverse param))\n    true\n    false))","user":"55dfac5fe4b050e68259b3f9"},{"problem":27,"code":"#(= (clojure.string/join (reverse %1)) (clojure.string/join %1))","user":"5bc488bde4b07a9b28b10053"},{"problem":27,"code":"(fn [xs]\n  (cond\n   (empty? xs) true\n   (= (count xs) 1) true\n   (= (first xs) (last xs)) (recur (rest (butlast xs)))\n   :else false))","user":"5f2d6787e4b033932238a66d"},{"code":"#(every? true? (map = (reverse (apply list %)) (apply list %)))","problem":27,"user":"52ba2af3e4b07a9af57922cc"},{"code":"#(if (= (seq %) (reverse (seq %))) true false)","problem":27,"user":"5143952fe4b0b4fb4ace5f38"},{"problem":27,"code":"(fn pal [coll]\n  (cond\n    (= (or 0 1) (count coll)) \n   \t\ttrue\n   \t(= (last coll) (first coll)) \n   \t\t(pal (drop 1 (drop-last coll)))\n   \t:else \n   \t\tfalse))","user":"5c47149ae4b0e06e1360a3a8"},{"code":"(fn palin[x]( if-not(string? x)\n                (= x (reverse x))\n                (= x (clojure.string/reverse x))))","problem":27,"user":"533078b5e4b019098a6f8b5c"},{"code":"(fn [y] (let [mstr (fn [x] (map #(str %) x))] (= (mstr y) (mstr (reverse y)))))","problem":27,"user":"4f307b02e4b0d6649770a079"},{"problem":27,"code":"(fn p [l] (if-not (= (first l) (last l)) false (if-not (> 1 (count l)) (p ((comp rest butlast) l)) true )))","user":"55d1a721e4b0e31453f64a47"},{"problem":27,"code":"(fn [things] (if (string? things)\n                  (= things (apply str (reverse things)))\n                  (= things (reverse things))))","user":"55ddb3f4e4b050e68259b3cd"},{"code":"(fn palindrome [word]\n    (if (or (= 0 (count word)) (= 1 (count word)))\n      true\n      (if (= (take 1 word) (take-last 1 word))\n        (palindrome (drop-last 1 (drop 1 word)))\n        false)))","problem":27,"user":"51b89503e4b050a1176cd69a"},{"problem":27,"code":"(fn[x] (= (into [] x) (reverse(into [] x))))","user":"5714401fe4b07c98581c3ab7"},{"problem":27,"code":"#(=\n  (vec %)\n  (reverse %))","user":"52a45a7be4b0c58976d9abd8"},{"code":"(fn [s] (\n  (fn myPal [y z]\n     (if (= (count y) 0)\n        true\n        (if (= (first y) (first z))\n          (myPal\n            (rest y)\n            (rest z)\n          )\n          false\n        )\n     )\n  ) s (reverse s)\n))","problem":27,"user":"4f16d6ed535d64f60314644f"},{"code":"#(= % \n  (if (string? %) \n    (apply str (reverse %)) \n    (reverse %)))","problem":27,"user":"4fbfbd4fe4b081705acca31c"},{"problem":27,"code":"(fn [x]\n  (=  (seq x) (reverse x)))","user":"57df309ee4b0bd073c20245f"},{"code":"(fn pali [x] (= (reverse x) (reverse (reverse x))))","problem":27,"user":"528b9efee4b0239c8a67aea0"},{"code":"(fn [x] (= (seq x) (reverse ( seq x))))","problem":27,"user":"5084c43be4b0fb8f40674bfa"},{"code":"(fn [coll]\n  (let [rc (reverse coll) \n        n (count coll)]\n    (every? identity \n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))","problem":27,"user":"52daf558e4b09f7907dd13c1"},{"problem":27,"code":"(fn f [l]\n         \n         (cond\n           (empty? l) true\n           (empty? (rest l)) true\n           :else (and (= (first l) (last l))\n                      (f (subvec (vec l) 1 (dec (count l)))))))","user":"58731176e4b01531a375ea2a"},{"problem":27,"code":"(fn [x]\n  (= (seq x) (reverse x))\n  )","user":"58c93089e4b021aa9917ed9b"},{"problem":27,"code":"(fn palindrome [coll]\n  (= (seq coll) (reverse coll)))","user":"5b2c76c8e4b025bcb146f2b6"},{"problem":27,"code":"(fn [s]\n  (loop [i 0\n         i- (- (count s) 1)]\n    (cond \n      (< i- 0) true\n      (not= (nth s i) (nth s i-)) false\n      :else (recur (+ i 1) (- i- 1)))))","user":"556405e5e4b0c656e3ff17fb"},{"code":"#(if (string? %)\n     (= (seq %) (reverse (seq %)))\n     (= % (reverse %)))","problem":27,"user":"4e444c11535dc968683fc4a9"},{"problem":27,"code":";(fn [coll] (let [coll' (reverse coll)] (= (seq coll) (seq coll'))))\n\n#(= (reverse %) (seq %))","user":"545eb56be4b01be26fd74682"},{"problem":27,"code":"(fn palrecur [l]\n  (if (empty? l)\n  \ttrue\n  \t(every? true? (list (= (first l) (last l)) (palrecur (rest (take (- (count l) 1) l)))))\n   )\n  )","user":"600777a3e4b074f607df6667"},{"problem":27,"code":"(fn palindrome? [string] \n  (if ( < (count string ) 2 ) true \n  \t(and\n     \t(= (first string) (last string))\n        (palindrome? ( drop-last ( drop 1 string))))))","user":"5b6f72ede4b0c6492753e7dc"},{"problem":27,"code":"(fn func [coll]\n  (cond\n   (empty? coll) true\n   (not= (first coll) (last coll)) false\n   :else (func ((comp butlast rest) coll))\n   )\n  )","user":"5727031ee4b0c5bde472c12f"},{"code":"(fn [sq] (let [s (seq sq)] (= s (reverse s))))","problem":27,"user":"5095f761e4b0ba05ca7aebfd"},{"problem":27,"code":"(fn [x]\n  (if (empty? x)\n    true\n    (if (= (first x) (last x))\n      (recur (rest (drop-last x)))\n      false)))","user":"56b619e7e4b0982f16b37e39"},{"problem":27,"code":"(fn [oo]\n  (let [q (quot (count oo) 2) r (rem (count oo) 2)]\n    (if (= r 0)\n      (= \n       (take q oo)\n       (reverse (drop q oo)))\n      (= \n       (take q oo)\n       (reverse (drop (+ q r) oo))\n       )\n      )\n    )\n  )","user":"56d91a53e4b0ea9b8538f7ee"},{"code":"(fn ([coll]\r\n(loop [coll coll n 0]\r\n  (if (< n (/ (count coll) 2)) \r\n    (if (= (nth coll n)(nth (reverse coll) n))\r\n      (recur coll ( + n 1))\r\n      false\r\n      )\r\n    true\r\n    ))))","problem":27,"user":"4de8fb73535d08e6dec9fdff"},{"problem":27,"code":"(fn [coll]   \n    (if (= (reverse coll) (seq coll))\n        true\n        false))","user":"5896735fe4b00487982d529d"},{"problem":27,"code":"(fn [col]\n  (if (string? col)\n     (= col (apply str (reverse col)))\n     (= col (reverse col))\n  )\n)","user":"5d72ad8fe4b02e6b30c93512"},{"problem":27,"code":"(fn [x] (cond (empty? x) true (= (first x) (last x)) (recur (rest (butlast x))) :else false))","user":"5a4de614e4b05d388ecb6bb1"},{"code":"(fn [x] (= (reverse x) (list* x)))","problem":27,"user":"51b0436ae4b0c53cf2e68a60"},{"code":"(fn palindrome [s]\n  (let [c (count s)]\n    (if (or (= c 1) (= c 0))\n      true\n      (and (= (first s) (last s)) (palindrome (drop-last (rest s)))))))","problem":27,"user":"51c1229be4b0c9c822882944"},{"problem":27,"code":"(fn [items]\n  (if (empty? items)\n    true\n    (and (= (first items) (last items))\n         (recur (rest (butlast items))))))","user":"5a0b9fc0e4b04bbd27e6d992"},{"problem":27,"code":"(fn palindrome? [s]\n  (let [input (seq s)]\n    (= (reverse input) input)))","user":"57606cfde4b08062f99a4e95"},{"code":"(fn [lst]\n  (if (string? lst) (= lst (apply str (reverse lst)))  (= lst (reverse lst))))","problem":27,"user":"538bd264e4b0640c7a9a58c8"},{"code":"#(= (vec %) (rseq (vec%)))","problem":27,"user":"51fa7154e4b0f1313d4689da"},{"problem":27,"code":"(fn [s] (if (= (seq s) (seq (reverse s))) true false))","user":"53b615cce4b047364c0444c2"},{"problem":27,"code":"#(loop [r % a 0 b (dec (count %))]\n            (cond (>= a b) true\n                  (= (nth r a) (nth r b))\n                  (recur r (inc a) (dec b))\n                  :else false\n                  ))","user":"5386f784e4b06839e8705f17"},{"problem":27,"code":"(fn [col] (= (first col) (last col)))","user":"56f07437e4b04a395b9a047b"},{"problem":27,"code":"(fn palindrome [x]\n  (= (reverse x) (seq x)))","user":"5f3103aee4b0574c87022c24"},{"code":"(fn palindrome? [thing]\n  (= (seq thing) (reverse (seq thing))))\n;returns a boolean based on if a sequence of the given thing (could be a collection or a string) is the same as a reversed sequence version of the thing","problem":27,"user":"53713ebee4b0fc7073fd6ead"},{"code":"(fn _ [x] \n  (loop [y x]\n    (if (< (count y) 2)\n      true\n      (if (= (first y) (last y))\n        (recur (butlast (rest y)))\n        false)\n    )\n  )\n)","problem":27,"user":"4ec8736f535d6d7199dd36f3"},{"problem":27,"code":"(fn [coll]\n   (let [half (/ (count coll) 2)]\n     (= (take half coll) (take half (reverse coll)))))","user":"54159032e4b01498b1a719f5"},{"code":"(fn [s]\n  (or (<= (count s) 1)\n    (and (= (first s) (last s))\n      (recur (rest (butlast s))))))","problem":27,"user":"4f7d91e6e4b06e829148e1c3"},{"code":"(fn palin\n  [coll]\n  (if (or (= (count coll) 1) (= (count coll) 2))\n    true\n    (if (> (count coll) 2)\n      (and (= (first coll) (last coll)) (palin (take (- (count coll) 2) (rest coll)))))))","problem":27,"user":"5073e7fde4b054001656accb"},{"problem":27,"code":"(fn [coll]\n      (if (= (type coll) String)\n        (= (map str coll) (map str (reverse coll)))\n        (= coll (reverse coll))))","user":"570bd29be4b0b0fb43fd06c5"},{"code":"(fn [sequence]\n  (loop [s sequence]\n    (or\n      (<= (count s) 1)\n    (if (not= (last s) (first s))\n      false\n      (recur (butlast (rest s)))))))","problem":27,"user":"4e570b60535d8a8b8723a286"},{"code":"(fn [s]\n(= (seq s) (reverse s)))","problem":27,"user":"52cee992e4b07d0d72b27395"},{"problem":27,"code":"(fn [v] (= (seq v) (reverse v) ) )","user":"55ccfc6ee4b0e31453f64a19"},{"code":"#(= (reduce str (reverse %)) (reduce str %))","problem":27,"user":"52b2d16ae4b0c58976d9acf8"},{"problem":27,"code":"(fn pali [coll]\n  (let [rev (reverse coll)]\n    (= (seq rev) (seq coll))\n    )\n\n  )","user":"57ff7d88e4b0a837a8b30c20"},{"problem":27,"code":"(fn\n  [a-seq]\n  (= (seq a-seq) (reverse a-seq)))","user":"55e1bb20e4b050e68259b41f"},{"code":"#(or (= (reverse %) %)\n     (= (apply str (reverse %)) %))","problem":27,"user":"5322d370e4b09d4e7a9b54c7"},{"problem":27,"code":"(fn\n  [col]\n  (let [seq (vec col)]\n    (let [length (count seq)]\n    (let [half-length (/ length 2)]\n    (if (= (mod length 2) 0)\n      (do (let [first-half (take half-length seq)\n                last-half (take-last half-length seq)]\n            (= first-half (reverse last-half))))\n      (do (let [first-half (take (- half-length 1) seq)\n                last-half (take-last (- half-length 1) seq)]\n            (= first-half (reverse last-half)))))))))","user":"55a7e096e4b0988bba2ad934"},{"problem":27,"code":"(\n fn [lst] (= (reverse (seq lst)) (seq lst))\n)","user":"59697a28e4b069c0a1a197e8"},{"problem":27,"code":"(fn [s]\n  (let [forward (map identity s)\n        backward (map identity (reverse s))]\n    (= forward backward)))","user":"5484fab9e4b0e286459a11a6"},{"problem":27,"code":"#(= % (if (= (type %) java.lang.String)\n       (apply str (reverse %)) \n       (reverse %)))","user":"542d95f0e4b0dad94371f2b9"},{"problem":27,"code":"(fn [x] (let [c (/ (count x) 2)] (= (take c x) (reverse (take-last c x)))))","user":"5509a176e4b06e50f9beb119"},{"problem":27,"code":"(fn [coll]\n  (loop [coll coll rev (reverse coll)]\n    (cond\n      (empty? coll) true\n      (= (first coll) (first rev))\n        (recur (rest coll) (rest rev))\n      :else false)))","user":"556008aee4b0c656e3ff17be"},{"code":"#(= (reduce (fn [acc elm] (cons elm acc)) '() %) (seq %))","problem":27,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":27,"code":"#(= (if (= (type %) java.lang.String) (clojure.string/reverse %) (reverse %)) %)","user":"5c3d8576e4b0d62ef62d9fb4"},{"problem":27,"code":"#(= (seq (to-array %)) (reverse (to-array %)))","user":"56b280e3e4b0982f16b37e06"},{"problem":27,"code":"(fn thingie [coll_in]\n  (let [coll (seq coll_in)] \n   (cond\n    (= (count coll) 0) true\n    (= (count coll) 1) true\n    (not= (first coll) (last coll)) false\n    :else (thingie (butlast (rest coll))))))","user":"560fe558e4b05f002753df63"},{"code":"(fn [x] (= (vec x) (reverse x)))","problem":27,"user":"51fdbf73e4b0f1313d468a51"},{"problem":27,"code":"(fn pal [xs]\n        (if (or (= 0 (count xs)) (= 1 (count xs)))\n         true   \n         (if (= (first xs) (last xs)) \n          (pal (-> xs reverse rest reverse rest))\n          false)))","user":"589c7c8ce4b00487982d5361"},{"problem":27,"code":"(fn pal [s] (let [mid (/ (count s) 2)]\n          (= (take mid s) (take mid (reverse s)))))","user":"59d9e66ae4b0ef0a1e9b5c60"},{"problem":27,"code":"(fn [coll] (= (reverse (seq coll)) (seq coll)))","user":"5ec91154e4b08d0ec38692ed"},{"problem":27,"code":"(fn is-polindrome\n  [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n         (is-polindrome (rest (drop-last s))))\n    )\n  )","user":"5d05fdece4b0cc9c915881e8"},{"code":"(fn[x]  (if (string? x) (= x (reverse x))(= x (reduce (fn[rev-lis v] (cons v rev-lis)) [] x))))","problem":27,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":27,"code":"(fn [x] (let [half (quot (count x) 2)] (= (take half x) (take half (reverse x)))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":27,"code":"#(= (seq %) (into () (seq %)))","user":"5915a0a5e4b09b4ee5954b73"},{"problem":27,"code":"(fn [x]\n  (let [col (seq x)]\n    (= col (reverse col))))","user":"5bb948f5e4b0a20761a235d5"},{"problem":27,"code":"(fn palindrome? [s] \n  (if (not (empty? s))\n  \t(if (= (first s) (last s))\n    \t(palindrome? (take -1 (rest s)))\n    \tfalse)\n    true))","user":"5579d60ce4b05c286339e099"},{"code":"#(let [colls (split-at (quot (count %) 2) %)]\n   (every? true? (map (fn [lhs rhs] (= lhs rhs)) (first colls) (reverse (second colls)))))","problem":27,"user":"52974f66e4b02ebb4ef75040"},{"problem":27,"code":"; the following works but isn't too informative about sequences\n;(fn [x] (= x (if (string? x) (apply str (reverse x)) (reverse x))))\n\n; using seq turns the collection into the same form\n; that comes out of the reverse so the two can be compared\n(fn [coll] (= (seq coll) (reverse coll)))","user":"57c44053e4b05aa3c4741ccb"},{"problem":27,"code":"(fn [lista] \n  (= (seq lista) (reverse lista)))","user":"543d5c61e4b032a45b86934d"},{"problem":27,"code":"(fn [parm] (= (vec parm ) (reverse (vec parm))) )","user":"598d0dc3e4b02b9968b84d18"},{"problem":27,"code":"#(let [x %] (if (=(apply str (reverse x)) (apply str x)) true false))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":27,"code":"(fn palindrome? [x]\n  (let [res (reverse (seq x))]\n    (if (string? x)\n      (= x (apply str res))\n      (= x res))))","user":"56646a7fe4b0e91d5f5c5657"},{"problem":27,"code":"#(if (= (into [] (reverse %)) ( into [] % ) ) true false)","user":"5710c24be4b09c608db70439"},{"problem":27,"code":"#((fn check [data n] \n  (\n   if\n   \t(> n (/ (count data) 2))\n   \ttrue\n   \t(\n     if\n     \t(= (nth data n) (nth data (- (count data) (+ n 1))))\n     \t(check data (+ 1 n))\n     \tfalse\n    )\n  )\n) %1 0)","user":"5183bccae4b028ec5fd2f2aa"},{"problem":27,"code":"(fn [xs]\n  (if (= (class xs) (class \"\"))\n    (= (apply str (reverse xs)) xs)\n    (= (reverse xs) xs)))","user":"58cf00c8e4b03c36ff7e58ac"},{"problem":27,"code":"#( = (sequence %) (reverse (sequence %)) )","user":"59ea85e4e4b0249b72820767"},{"problem":27,"code":"#(=(reverse (seq  %)) (seq %))","user":"57d8a1dee4b0bd073c2023ee"},{"problem":27,"code":"#(= (seq  %) (reverse %))","user":"53e543efe4b036ad0777e457"},{"problem":27,"code":"#(if (instance? String %) \n            (= % (clojure.string/reverse %))\n            (= % (reverse %)))","user":"55e2004de4b050e68259b426"},{"problem":27,"code":"(fn [x] (= (reverse x) (map #'identity x)))","user":"52f23d85e4b05e3f0be25ef6"},{"problem":27,"code":"(fn \n  [x]\n(if(or(= 0 (count x))(= 1 (count x)))true \n  (if(= 0 (compare (first x)(last x))) (recur (butlast(rest x))) false)))","user":"570243e2e4b08d47c97781dd"},{"problem":27,"code":"(fn [lst] (reduce #(and %1 %2) (map #(= %1 %2)lst (reverse lst))))","user":"5c7741dce4b0fca0c1622806"},{"problem":27,"code":"(fn [c] (every? true? (map #(apply = %) (map vector c (reverse c)))))","user":"563249dee4b0bfe05bf1179f"},{"code":"#(= (vec %) (reverse(vec %)))","problem":27,"user":"52bbd09ee4b07a9af57922ee"},{"problem":27,"code":"(fn [col]\n  (= (reduce (fn [accum elem] (cons elem accum)) () (seq col))\n     (seq col)))","user":"5511b44be4b06e50f9beb197"},{"code":"(fn [s] \n  (let [v (vec s)] \n    (let [l (int (/ (count v) 2))] \n      (= (take l v) (reverse (take-last l v))))))","problem":27,"user":"51899891e4b0288ada3dbdab"},{"problem":27,"code":"(fn [coll]\n  (let [sequence (seq coll)]\n    (= sequence (reverse sequence))))","user":"5ba5802de4b0a20761a233fd"},{"problem":27,"code":"#(if (string? %) (= % (apply str(reverse %)))\n           \n   (= % (reverse %)))","user":"586bfbcee4b01531a375e967"},{"problem":27,"code":"(fn [coll]\n  (cond\n    (< (count coll) 2) true\n    (not= (first coll) (last coll)) false\n    :else (recur (rest (drop-last coll)))))","user":"5a4e1c81e4b05d388ecb6bb6"},{"code":"(fn [xs]\n  (loop [x xs]\n    (if (nil? x)\n     true\n     (if (= (first x) (last x))\n        (recur (butlast (rest x)))\n        false\n     ))))","problem":27,"user":"504e9011e4b069badc5a33b7"},{"code":"(fn [coll]\n (loop [x coll]\n  (if (= (first (vec x)) (last (vec x)))\n   (if (empty? x)\n    true\n    (recur (next (reverse (next x)))))\n   false)))","problem":27,"user":"507e5cf8e4b085af06e3afd1"},{"problem":27,"code":"#(= (list* %1) (reverse (list* %1)))","user":"6028365be4b0d5df2af22242"},{"problem":27,"code":"(fn [s] (= s (if (string? s)(clojure.string/reverse s)(reverse s))))","user":"55ead489e4b0121d4835fdb6"},{"code":"(fn is-palindrome [coll]\n  (or (<= (count coll) 1)\n    (and (= (first coll) (last coll))\n      (is-palindrome (rest (butlast coll))))))","problem":27,"user":"4eb7b049535d7eef30807377"},{"problem":27,"code":"(fn [lst]\n\t(if (contains? (frequencies (map #(= %1 %2) (reverse lst) lst)) false) false true))","user":"59dfd369e4b08badc2a0c4dd"},{"problem":27,"code":"(fn [s]\n  (=  (seq s) (reverse (seq s))))","user":"5f5cfe2be4b02876ed9fcfe2"},{"problem":27,"code":"(fn [[x & xs]] (if (= x nil) true (if (= xs nil) true (and (= x (last xs)) (recur (butlast xs))))))","user":"55009d17e4b07d26eda61d5d"},{"problem":27,"code":"(fn my-pali [s]\n  (if (< (count s) 2) true \n    (if (= (first s) (last s)) \n      (my-pali (rest (butlast s))) \n      false)))","user":"6065755ee4b069485764ddcc"},{"problem":27,"code":"(fn [list]\n  (if (empty? list)\n    true\n    (if (= (first list) (last list))\n      (recur (drop 1 (take (dec (count list)) list)))\n      false)))","user":"57f11d72e4b0bfb2137f5c03"},{"problem":27,"code":"(fn pali [secuencia]\n  (if (< (count secuencia) 2)\n    true\n    (and (= (first secuencia) (first (reverse secuencia))) (pali (drop-last (rest secuencia))))))","user":"603e899ee4b0d5df2af22313"},{"code":"(fn[x] (= (seq x) (reverse x)))","problem":27,"user":"4ea4e98a535d7eef308072ce"},{"code":"(fn [x] (let [y (if (string? x)\n                  (rest (clojure.string/split x #\"\"))\n                  x)]\n  (= y (reverse y))))","problem":27,"user":"52ecb1efe4b0705949c44454"},{"code":"(fn pal [l] \n  (or\n   (empty? l)\n   (and\n    (= (first l) (last l))\n    (pal (butlast (rest l)))\n   )\n  )\n )","problem":27,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":27,"code":"#(= (seq %) (reduce conj '() (seq %)))","user":"59089229e4b047aa04b1997c"},{"problem":27,"code":"(fn [xs]\n  (cond (empty? xs) true\n   \t\t(= (first xs) (last xs))(recur (drop-last (rest xs)))\n   \t\t:else false))","user":"55ab07e0e4b0988bba2ad953"},{"code":"(fn [sq]\n  (loop [s1 sq s2 (reverse sq)]\n    (if (not= (first s1) (first s2)) false\n      (if (next s1)\n        (recur (next s1) (next s2))\n        true))))","problem":27,"user":"53219cece4b09d4e7a9b54b7"},{"code":"(fn [n]\n  (= n (if (string? n)\n            (apply str (reverse n))\n            (reverse n)\n))\n  )","problem":27,"user":"4ff58b05e4b0678c553fc36b"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (= x (apply str( reverse x)))\n    (= x (reverse x))))","user":"5b04662ce4b0cc2b61a3bd75"},{"problem":27,"code":"(fn [y] (let [sy (seq y)] (= sy (reverse sy))))","user":"56019662e4b04bb52996e190"},{"problem":27,"code":"#(every? true? (for [x (range (quot (count %) 2))]\n                 ((fn compareFrontBack [subcol] (= (first subcol) (last subcol)))\n                 \t(drop x (drop-last x %)))))","user":"55a9e0fee4b0988bba2ad945"},{"problem":27,"code":"(fn pd [x] (if (empty? x) true (and (= (first x) (last x)) (pd (rest (reverse (rest x)))))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":27,"code":"(fn [x] (= (if (string? x)\n          (clojure.string/reverse x)\n          (into () x))\n           x))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":27,"code":"(fn [thing] (#(= (reverse thing) (-> thing reverse reverse))))","user":"548026d8e4b0e286459a1155"},{"problem":27,"code":"(fn\n  [x]\n  (let [r-x (reverse x)]\n    (reduce #(= true % %2) (map = x r-x))))","user":"55b3c03ee4b01b9910ae2975"},{"problem":27,"code":"#(if (instance? String %)\n    (= (apply str (reverse %)) %)\n    (= (reverse %) %))","user":"5501a1e1e4b07d26eda61d75"},{"problem":27,"code":"(fn [coll] (loop [c coll p true]\n             (if (< (count c) 1) p\n               (recur (butlast (rest c)) (if (and (= (last c) (first c)) p) true false)))))","user":"54e4edcae4b024c67c0cf7f3"},{"problem":27,"code":"(fn palindrome? [s] (if (> (count s) 1) (and (= (first s) (last s) ) (palindrome?(drop-last (drop 1 s)))  ) true))","user":"5515b68de4b055c2f668d4ef"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (= x (clojure.string/reverse x))\n\t(= x (reverse x))))","user":"5530b827e4b076ab5578f818"},{"problem":27,"code":"(fn skrr [l]\n  (= (seq l) (reverse l)))","user":"5884f377e4b0f1effa3b76a8"},{"code":"(fn [s]\n  ((fn ! [s1 s2]\n      (cond\n        (or \n          (and (empty? s1) (not-empty s2))\n          (and (not-empty s1) (empty? s2))) false\n        (and (empty? s1) (empty? s2)) true\n        (= (first s1) (first s2)) (! (rest s1) (rest s2))\n        :else false)) s (reverse s)))","problem":27,"user":"4f22e667e4b0d66497709fdb"},{"problem":27,"code":"(fn [xs]\n  (let [xs (seq xs)]\n    (= xs (reverse xs))))","user":"59ad8695e4b0e1f4e384c887"},{"problem":27,"code":"(fn [a] (loop [a a] (if (= nil (seq a)) true (if (= (last a) (first a)) (recur (reverse (rest (reverse (rest a))))) false))))","user":"5934a43ce4b072a2710fd07e"},{"problem":27,"code":"#(cond\n  (or (= (count %) 0) (= (count %) 1)) true\n  (= (first %) (last %)) (recur (->> % (drop 1) (drop-last 1)))\n  :else false)","user":"609980fce4b00e9e6653c408"},{"problem":27,"code":"(fn palindrome [col]\n  (loop [leftcol '()\n         rightcol col]\n    (let [leftlen (count leftcol)\n          rightlen (count rightcol)]\n      (if (= 0 rightlen)\n        true\n        (if (>= leftlen rightlen)\n          (if (odd? (+ leftlen rightlen))\n            (recur (rest leftcol) rightcol)\n            (if (= (first leftcol) (first rightcol))\n              (recur (rest leftcol) (rest rightcol))\n              false ) )\n          (recur (conj leftcol (first rightcol))\n                 (rest rightcol)))))))","user":"54178782e4b01498b1a71a0c"},{"code":"#(if (string? %) \n  (= % (apply str (reverse %)))\n  (= % (reverse %)))","problem":27,"user":"4e570f47535d8a8b8723a287"},{"problem":27,"code":"(fn palindrome?\n  [lst]\n  (if (> 2 (count lst))\n    true\n    (if (= (first lst) (last lst))\n      (palindrome? (rest (butlast lst)))\n      false)))","user":"5bbbce60e4b0a20761a2360e"},{"problem":27,"code":"#(let [v (vec %)] (= (reverse v) v))","user":"5db5d09be4b010eb3c36cd31"},{"problem":27,"code":"(fn me [coll]\n  (if (< (count coll) 2)\n    true\n    (if-not (= (first coll) (last coll))\n      false\n      (me (drop-last (rest coll))))))","user":"56c2c342e4b05cc29241ee85"},{"code":"#(= (seq %) (reverse %))","problem":27,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn palin [coll] (= (reverse coll) (seq coll)))","problem":27,"user":"52b60e94e4b0c58976d9ad3e"},{"problem":27,"code":"(fn [xs] (let [n (int (/ (count xs) 2))] (= (take n xs) (take n (reverse xs)))))","user":"540d5ab9e4b0addc1aec670f"},{"problem":27,"code":"#(let [z (into () %)]\n   (= z (reverse z)))","user":"5b198eace4b03cfeda66ecbb"},{"problem":27,"code":"(fn pal [x]\n  (if (empty? x)\n    true\n    (if (not= (last x) (first x))\n      false\n      (pal (butlast (rest x)))\n    )\n  )\n)","user":"55034bf0e4b086ebe8a79c6d"},{"problem":27,"code":"#(reduce (fn [a b] (and a b)) (map = (reverse %) %))","user":"56f0ecf4e4b04a395b9a0484"},{"problem":27,"code":"#(cond (string? %)\n        (let [rev (apply str (reverse %))]\n          (= % rev))\n        (coll? %)\n        (= % (reverse %))\n        :else false)","user":"609e9b64e4b00e9e6653c426"},{"problem":27,"code":"(fn [coll] \n\t(loop [coll coll] (if (empty? coll) true\n\t\t(if (not (= (first coll) (last coll))) false\n\t\t\t(recur (rest (butlast coll)) )))))","user":"54199df6e4b01498b1a71a4b"},{"code":"(fn palindrome [params]\n\t(reduce (fn [x y] (and x y))\n\t\t(map = params (reverse params))))","problem":27,"user":"535a80b1e4b04ce2eb3ed2a7"},{"problem":27,"code":"(fn [coll] (let [thisvec (vec coll)]\n             (if (< (count thisvec) 2)\n               true\n               (if (= (first thisvec) (last thisvec))\n                 (recur (subvec thisvec 1 (dec (count thisvec))))\n                 false))))","user":"564e1bbbe4b0284900eef696"},{"code":"(fn palin [x] \r\n  (and \r\n    (= (first x) (last x))\r\n    (if (> 2 (count x))\r\n      true\r\n      (palin (next (butlast x)))\r\n    )\r\n  )\r\n)","problem":27,"user":"4ddbd600535d02782fcbe9fb"},{"code":"(fn [s] (= (reverse s) ((comp reverse reverse) s)))","problem":27,"user":"4fceef7ae4b03432b189f40a"},{"problem":27,"code":"(fn [arg]\n\t\t(let [x (reverse arg)]\n\t\t\t(= x (vec arg)))\n\t\t)","user":"58d9772de4b0a4d5acaab63c"},{"problem":27,"code":"#(=\n  (if (string? %)\n  \t(clojure.string/reverse %)\n\t(reverse %))\n  %)\n\n;#(= (seq %) (reverse %))","user":"5511ac85e4b06e50f9beb196"},{"problem":27,"code":"(fn [s]\n   (= (seq s) (reverse (seq s))))","user":"6093b56ce4b00e9e6653c3e0"},{"problem":27,"code":"(fn [x]\n\t(if (instance? String x)\n\t\t(= x (apply str (reverse x)))\n\t\t(= x (reverse x))))","user":"5d0ad8dde4b0cc9c91588225"},{"problem":27,"code":"(fn [input]\n  (let [sq (seq input)]\n    (every? (fn [[a b]] (= a b)) \n            (partition 2 (interleave sq (reverse sq))))))","user":"540c54a7e4b0addc1aec6700"},{"problem":27,"code":"#(=  (seq %) (reverse (seq %)))","user":"55f8ad54e4b03cbcff9738b9"},{"problem":27,"code":"(fn [x]\n  (let [z (seq x) y (reverse z)]\n    (= z y)))","user":"53d60f57e4b0e771c3025451"},{"problem":27,"code":"#(loop [obj %]\n   (if\n     (empty? (rest obj))\n       true\n\n     (if\n       (= (first obj)\n          (first (reverse obj)))\n       (recur (rest (drop-last 1 obj)))\n\n       false\n       )\n     )\n   )","user":"57addf3ae4b0b8559636fca4"},{"code":"(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))","problem":27,"user":"4e1158aa535d04ed9115e7c6"},{"code":"(fn [x] (let [s (seq x)]\n\t\t(= s (reverse s))))","problem":27,"user":"51416934e4b03d51af0d04f0"},{"code":"#(= % (let [ x (apply str %)\n        y (apply str (reverse %))]\n   \t\t(if (= x y)\n            %\n            (reverse %))))","problem":27,"user":"535056a7e4b084c2834f4adb"},{"code":"(fn [collection] (= (vec collection) (reverse collection)))","problem":27,"user":"52b20257e4b0c58976d9ace8"},{"problem":27,"code":"(fn [coll]\n  (if (= coll (reverse coll))\n    true\n    (if (= coll (apply str (reverse coll)))\n      true\n      false)))","user":"53d40508e4b00fb29b221332"},{"problem":27,"code":"(fn \n      [collOrStr]\n      (let [coll (vec collOrStr)]\n           (= (reverse coll) coll)\n      )\n  )","user":"5a09b7cae4b01bb0ae8afe15"},{"problem":27,"code":"(fn  \n  [x]\n  (= (seq x) (reverse (seq x))))","user":"5d615431e4b0c9e5857d5010"},{"code":"(fn foo [s] (= (reverse s) (seq s)))","problem":27,"user":"4edf40d5535d10e5ff6f533f"},{"problem":27,"code":"#(if (< (count %) 2)\n    true\n    (if (= (first %) (last %))\n      (recur (drop-last (rest %)))\n      false))","user":"54074fc5e4b0addc1aec66b6"},{"code":"#((fn [fwd rev]\n    (if (and (empty? fwd) (empty? rev))\n      true\n      (if (= (first fwd) (first rev))\n        (recur (rest fwd) (rest rev))\n        false))) % (reverse %))","problem":27,"user":"51460e4ce4b04ef915e37314"},{"problem":27,"code":"(fn [seq]\n  (let [seq (if (string? seq)\n              (filter #(not= \"\" %) (clojure.string/split seq #\"\"))\n              seq)]\n    (= (reverse seq) seq)))","user":"582bd5fae4b051871117bf7b"},{"problem":27,"code":"(fn [s]\n  (= (seq s)(reverse s)))","user":"603e063ae4b0d5df2af2230f"},{"problem":27,"code":"#(let [rev (reverse %)](if (string? %) (= (apply str rev) %) (= rev %)))","user":"6011b89ee4b074f607df66bc"},{"code":"(fn pali\n  [coll]\n  (if (or (= 0 (count coll)) (= 1 (count coll)))\n    true\n    (if (= (first coll) (last coll))\n      (pali ((comp butlast rest) coll))\n      false)))","problem":27,"user":"5233adf7e4b07e3ee2be83ad"},{"problem":27,"code":"#_#(= (reverse %) (seq %))\n\n#(= (into () %) (seq %))","user":"5cd16529e4b0ccb0619628e7"},{"code":"(fn [coll]\n    (= (seq coll) (reverse coll)))","problem":27,"user":"5317d78ee4b08068f379ed63"},{"problem":27,"code":"#(loop [coll %]\n   (if (> (count coll) 1)\n     (if (= (first %) (last %))\n       (recur (rest (butlast coll)))\n       false)\n     true))","user":"574eb3b1e4b02ea114799247"},{"problem":27,"code":"(fn [xs]\n   (cond\n     (string? xs)\n     (= xs (clojure.string/join (reverse xs)))\n     (coll? xs)\n     (= xs (reverse xs))\n     :else false\n     ))","user":"5d431c77e4b07c84aa5ae68f"},{"code":"#(loop [f   0\r\n       l   (dec (count %1))\r\n       isP (= (nth %1 f) (nth %1 l))]\r\n  (if (or (= f l)\r\n          (= (inc f) l)\r\n          (false? isP))\r\n    isP\r\n    (recur\r\n      (inc f)\r\n      (dec l)\r\n      (= (nth %1 f) (nth %1 l)))))","problem":27,"user":"4e5bdc2b535d8a8b8723a2bb"},{"problem":27,"code":"(fn [col]\n  (= (reverse col) (apply list col)))","user":"593fba55e4b069cdc2982be7"},{"code":"#(let [l (reverse %)] (= (reverse l) l))","problem":27,"user":"50352431e4b0a84c1d88f620"},{"code":"(fn [s]\n   (= (seq s) (reverse s)))","problem":27,"user":"53489329e4b084c2834f4a5b"},{"problem":27,"code":"(fn palindrome?\n  [x]\n  (if (string? x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))","user":"59e12c94e4b08badc2a0c509"},{"problem":27,"code":"(fn [coll] \n  (let [coll (seq coll)] \n    (= coll (reverse coll))))","user":"55842c7ee4b05c286339e11d"},{"problem":27,"code":"(fn [x]\n  (let [d (quot (count x) 2)]\n    (= (take d x) (take d (reverse x)))))","user":"5fc9d967e4b0689391cc77ce"},{"problem":27,"code":"#(= (vec %) (-> % vec rseq))","user":"5ebaf687e4b00a66d4a9525b"},{"problem":27,"code":"#(loop [sq (into '() %)] (and (= (first sq) (last sq)) (or (empty? sq) (recur (rest (drop-last sq))))))","user":"54c4c96ae4b045293a27f61f"},{"problem":27,"code":"(fn [pal] (= (seq pal) (reverse pal) ))","user":"56791447e4b05957ce8c6183"},{"problem":27,"code":"(fn pali [x]\n    (if (sequential? x)\n      (if (= (seq x) (reverse x))\n        true\n        false)\n      (if (= x (apply str (reverse x)))\n          true\n          false)))","user":"57f814fbe4b0d3187e900911"},{"problem":27,"code":"(fn [coll] \n  (loop [l 0 r (- (count coll) 1)]\n    (if (or (= l r) (> l r))\n    true\n    (if (= (nth coll l) (nth coll r))\n      (recur (inc l) (dec r))\n      false))))","user":"5966a214e4b069c0a1a197ab"},{"code":"(fn [s] (if (or (= s (apply str (seq (reverse s)))) (= s (reverse s))) true false))","problem":27,"user":"51ed09b6e4b0bb507043158b"},{"code":"(fn [xs]\n  (cond\n   \t(= nil (next xs)) true\n    (= (first xs) (last xs)) (recur (rest (butlast xs)))\n\t:else false))","problem":27,"user":"51ef66a7e4b0871fa145d9a5"},{"code":"(fn palin [x]\n        (if (string? x)\n            (= (apply str (reverse x)) x)\n            (= (reverse x) x)))","problem":27,"user":"4fb591aee4b081705acca2c0"},{"code":"(fn palindrome [x] (= (seq x) (reverse x)))","problem":27,"user":"53504a7de4b084c2834f4ad9"},{"problem":27,"code":"#(if (string? %)\n   (true? (= % (clojure.string/reverse %)))\n   (true? (= % (reverse %))))\n\n;; simplier way:\n;; #(= (seq %) (reverse (seq %)))","user":"53a2e6abe4b0f1fc7453882f"},{"problem":27,"code":";; 4clojure.com Problem # 27: Palindrome Detector\n(fn pal [x]\n  (let [revx (reverse x)]\n    (if (even? (count x))\n      ;even case\n      (if (= 2 (count x))\n        (if (= (first x) (first (rest x)))\n          true\n          false)\n        (if (= (first x) (first revx))\n          (pal (rest (reverse (rest (reverse x)))))\n          false))\n      ;odd case\n      (if (= 3 (count x))\n        (if (= (first x) (first revx))\n          true\n          false)\n        (if (= (first x) (first revx))\n          (pal (rest (reverse (rest (reverse x)))))\n          false))\n    )\n  )\n)","user":"5761984fe4b0994c1922fb91"},{"code":"(fn [x] (if (coll? x) (= x (reverse x))\n          (= x (clojure.string/join (reverse x)))))","problem":27,"user":"4e9fde3c535d7eef3080729b"},{"code":"(fn palindrome? [l]\n  (cond (= 0 (count l)) true\n  \t  (= 1 (count l)) true\n\t\t  :else\n\t\t  \t(if (= (first l) (last l))\n\t\t  \t\t(palindrome? (reverse (rest (reverse (rest l)))))\n\t\t  \t\tfalse\n\t\t  \t)\n\t)\n)\n; #(= (seq %) (reverse %)); kbaribeau","problem":27,"user":"4f442cdfe4b0d7d3c9f3fd34"},{"code":"#(every? zero? (map compare (reverse %) %))","problem":27,"user":"52761edae4b03e8d9a4a74d4"},{"problem":27,"code":"(fn [coll]\n  (let [split_coll (partition (count coll) coll)]\n  (= (first split_coll) (reverse (last split_coll)))))","user":"5a47423be4b05d388ecb6b52"},{"problem":27,"code":"(fn [a] (or (= a (reverse a))\n            (and (string? a) (= a (clojure.string/reverse a)))))","user":"5800edaae4b0a837a8b30c48"},{"code":"(fn isPalindrome [p] \n\t\t\t((fn palindrome [x y] \n\t\t\t\t(if (nil? x)\n\t\t\t\t\ttrue\n\t\t\t\t\t(and (= (first x) (first y)) (palindrome (next x) (next y))))) p (reverse p)))","problem":27,"user":"522ff396e4b032bbe3424172"},{"problem":27,"code":"(fn [x]\n  (loop [size (count x)\n         x x]\n    (if (<= size 1)\n      true\n      (if (= (first x) (last x))\n        (recur (- size 2) (drop-last (rest x)))\n        false))))","user":"5e07cf97e4b0978307768fb9"},{"problem":27,"code":"(fn [seq] \n  (if (string? seq)\n\t(= seq (apply str (reverse seq)))  \n    (= seq (reverse seq))\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":27,"code":"(fn check-ends [x]\n  (if (or (= 1 (count x)) (= 0 (count x))) true\n    (if (not (= (first x) (last x)))\n      false\n      (check-ends (butlast (rest x))))))","user":"53829b28e4b06839e8705ed6"},{"code":"(fn [xs]\n  (loop [f (first xs),\n\t\tl (last xs),\n\t\tm (rest (butlast xs))]\n\t\t(if (= m '())\n\t\t\ttrue\n\t\t\t(and (= f l) (recur (first m) (last m) (rest (butlast m)))))))","problem":27,"user":"4e641bfd535d8ccf87e9fe67"},{"problem":27,"code":"(fn [my-seq]\n   (if (empty? my-seq)\n     true \n     (if (= (first my-seq) (last my-seq))\n      (recur (drop 1 (drop-last my-seq)))\n       false)))","user":"57a1478ae4b0c3d858beb8e5"},{"problem":27,"code":"(fn [pal] \n  (if\n    (> 2 (count pal))\n    'true\n    (if\n      (= (first pal) (first (reverse pal)))\n      (recur (rest (reverse (rest pal))))\n      'false)\n    )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":27,"code":"(fn [s]\n  (= s \n     (if (string? s)\n    (apply str (reverse s))\n    (reverse s)\n  )))","user":"5903f0cde4b022d14a2aafb9"},{"problem":27,"code":"(fn [arg]\n  (loop [orignal (seq arg)\n         rev (reverse orignal)]\n    (if (= 1 (count orignal))\n      true\n      (if (not= (first orignal) (first rev))\n        false\n        (recur (rest orignal) (rest rev))))))","user":"5e44f5b1e4b01d43a70e8e8d"},{"code":"(fn [x] (if (string? x)\n          (= x (reduce str \"\" (reverse x)))\n          (= x (reverse x))))","problem":27,"user":"50ff5887e4b017584cb41ccd"},{"problem":27,"code":"(fn palindrome [s]\n\t(if (< (count s) 2)\n    \ttrue\n    \t(if (= (first s) (last s))\n        \t(palindrome (rest (butlast s)))\n        \tfalse\n        )\n    )  \n)","user":"5a214798e4b0ff51aa4b32aa"},{"problem":27,"code":"(fn palindrome [sequ]\n  (if (<= (count sequ) 1)\n      true\n      (let [x (first sequ) y (first (reverse sequ))]\n        (if (not (= x y))\n            false\n            (palindrome (reverse (rest (reverse (rest sequ)))))\n        )\n      )\n  )\n)","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":27,"code":"(fn [coll]\n  (reduce #(and %1 %2) true (map = coll (reverse coll)))\n  )","user":"54145050e4b01498b1a719ea"},{"code":"(fn pal[x]\r\n  (if (or (= 1 (count x)) (= 0 (count x)))\r\n  true\r\n  (if (= (first x) (last x))\r\n    (pal (rest (reverse (rest x))))\r\n    false\r\n  )))","problem":27,"user":"4dca56b6535d5973398f9287"},{"problem":27,"code":"(fn palindrome?\n  [s]\n  (let [fwd (into [] s)\n        bwd (-> fwd reverse)]\n    (= fwd bwd))\n  )","user":"540efe2ee4b0addc1aec6724"},{"problem":27,"code":"(fn [s]\n    (let [r (reverse s)]\n      (= r (seq s))))","user":"5b2689e3e4b063e2438bcc33"},{"problem":27,"code":"#(= (vec %) ((comp reverse vec) %))","user":"5d4b2155e4b0776584bd6f28"},{"problem":27,"code":"(fn [coll] (let [revcoll (reverse coll)] (reduce #(and %1 %2) (map = coll revcoll))))","user":"5243233fe4b076204b44faac"},{"problem":27,"code":";(fn pc [arr]\n;  (if (= (first arr) (last arr))\n;    (if (< (count arr) 4)\n;      true\n;      (pc (butlast (rest arr))))\n;    false))\n\n;why didn't I just do this the first time?\n#(= (seq %) (reverse %))","user":"5540fe42e4b0a04f7929950a"},{"problem":27,"code":"(fn [x]\n  (let [pivot (quot (count x) 2)\n        start (vec (take pivot x))\n        end (vec (drop pivot x))\n        start (if (> (count end) (count start))\n                (conj start (first end))\n                start)]\n    (= start (reverse end))))","user":"5d6042f2e4b0c9e5857d5006"},{"problem":27,"code":"(fn palindrome\n  [seq] \n  (if (< (count seq) 2)\n    true\n    (if (= (first seq) (last seq))\n        (palindrome (drop 1 (drop-last seq)))\n        false\n          \n)))","user":"5d1b2a1ee4b02ea6f0fb6979"},{"code":"#(= (seq %) (reverse %) )","problem":27,"user":"5373066be4b06d7f452d9e04"},{"problem":27,"code":"(fn\n   [l]\n   (= (seq l) (reverse l)))","user":"595a2ab5e4b066ee0a44afb2"},{"problem":27,"code":"(fn palindrome? [alist]\n  (let [half-size (quot (count alist) 2) \n        left-half (drop-last half-size alist)  \n        right-half (drop half-size alist)]\n    (if (= (reverse right-half) left-half)\n      true\n      false\n        )\n    )\n  )","user":"58a17511e4b02bd94d917eb4"},{"code":"#(let [h (quot (count %) 2)] (= (take h %) (reverse (take-last h %))))","problem":27,"user":"526a3412e4b03e8d9a4a721e"},{"problem":27,"code":"(fn palindrome\n    [coll]\n    (loop [remaining coll]\n        (if (<= (count remaining) 1)\n            true\n            (if (not= (first remaining) (last remaining))\n                false\n                (recur (rest (butlast remaining)))))))","user":"5ac35d00e4b0e27600da7712"},{"code":"(fn palindrome? [seq]\n  (if (empty? seq)\n    true\n  (and\n   (= (first seq) (last seq))\n   (palindrome? (rest (reverse (rest seq))))\n   )\n  ))","problem":27,"user":"514852b4e4b0203766d54154"},{"problem":27,"code":"(fn [mySeq]\n  (if (or (not (seq? mySeq)) (empty? mySeq)) true\n    (if (not (= (first mySeq) (last mySeq))) false \n      (recur (rest (butlast mySeq)))\n    )\n  )\n)","user":"57f904c5e4b0d3187e900936"},{"code":"#( = (seq %) (reverse %) )","problem":27,"user":"52cbe910e4b07d0d72b27353"},{"problem":27,"code":"(fn [x]\n  (loop [arr x\n         rs true]\n    (case arr\n     nil rs\n     (if (= (first arr) (last arr))\n            (\trecur \n              (next (reverse\n               \t\n                 \t(next arr))\n                 \n               ) \n              true\n             )\n            false)\n     )\n    )\n  )","user":"5b3e35bde4b02d533a91bbfa"},{"problem":27,"code":"(fn [lst] (= (into [] lst) (into () lst)))","user":"58b86162e4b0ebc645576d97"},{"problem":27,"code":"(fn\n  [xs]\n  (= xs (if (string? xs)\n    (clojure.string/reverse xs)\n    (reverse xs))))","user":"548749cee4b0e286459a11c4"},{"problem":27,"code":"(fn [p] (= (into () p) (seq p)))","user":"55d28b38e4b0e31453f64a58"},{"problem":27,"code":"#(\n= (take (/ (count %) 2) %) (reverse (take-last (/ (count %) 2) %))\n  )","user":"5677f5dee4b05957ce8c616e"},{"problem":27,"code":"(fn [coll]\n   (let [cantidad (count coll)\n         mitad (int (/ cantidad 2))\n         \n         primera-parte (reverse (take mitad coll))\n         segunda-parte (drop mitad coll)\n         segunda-parte (if (even? (count coll))\n                         segunda-parte\n                         (drop 1 segunda-parte))]\n     (println :primera-parte primera-parte)\n     (println :segunda-parte segunda-parte)\n     (= primera-parte segunda-parte)))","user":"58a34442e4b02bd94d917ef2"},{"problem":27,"code":"(fn [a-seq]\n  (= (reverse a-seq) (seq a-seq)))","user":"567c63f6e4b05957ce8c61bb"},{"problem":27,"code":"#(= (take-last (count %) %) (reverse %))","user":"5c597b42e4b01df32ab7325b"},{"problem":27,"code":"(fn pal [s] (if (empty? s) true (and (= (first s) (last s)) (-> s (rest) (butlast) (pal)))))","user":"579c35fee4b05b1deef9ae04"},{"code":"(fn [coll]\n  (if (= (first coll) (last coll))\n    (if (> (count coll) 3)\n      (recur (butlast (next coll)))\n      true)\n    false\n   ))","problem":27,"user":"51da7e49e4b02ceefd947768"},{"problem":27,"code":"(fn pal [x] (if (< (count x) 2) true (and (= (first x) (last x)) (pal (rest (butlast x))))))","user":"5528a8cae4b0ffed3738f940"},{"code":"(fn [x] (= (if (instance? java.lang.String x) (apply str (reverse x)) (reverse x)) x))","problem":27,"user":"50f8862de4b0aafb827eb203"},{"problem":27,"code":"(fn [xs]\n  (loop [ys xs zs (reverse xs)]\n    (cond (not (= (first ys) (first zs))) false\n          (empty? ys) true\n          :else (recur (rest ys) (rest zs)))))","user":"546176e7e4b01be26fd746a2"},{"code":"(fn [lst]\r\n  (loop [lst1 lst lst2 (reverse lst)]\r\n    (cond (and (empty? lst1) (empty? lst2))\r\n          true\r\n          (= (first lst1) (first lst2))\r\n          (recur (rest lst1) (rest lst2))\r\n          true\r\n           false)))","problem":27,"user":"4de2f44f535d08e6dec9fdec"},{"problem":27,"code":"(fn [col] (= 0 (count (filter false? (map (fn [x y] (= x y)) col (reverse col))))))","user":"551e312ce4b030e6a24d00e5"},{"code":"(fn [s]\n  (if (= java.lang.String (type s))\n    (if (= s (apply str (reverse (seq s))))\n      true\n      false)\n    (if (= s (reverse (seq s)))\n      true\n      false)))","problem":27,"user":"501dfd54e4b051153f3b5b80"},{"code":"#(loop [s % r (reverse s)]\n  (if (empty? s)\n    true\n    (if (not= (first s) (first r))\n      false\n      (recur (rest s) (rest r)))))","problem":27,"user":"4ed7e37a535d10e5ff6f52f4"},{"problem":27,"code":"(fn [coll]\n  (= (seq coll)\n     (reverse coll)))","user":"5907a736e4b047aa04b1995e"},{"code":"(fn pal? [a]\n  (loop [l a]\n    (if (or (= (count l) 1)\n            (< (count l) 1))\n      true\n      (if (= (first l) (last l))\n        (recur (rest (take (dec (count l)) l)))\n        false\n      )\n)))","problem":27,"user":"516bc02ce4b005fd0cdf85c5"},{"code":"(fn p? [x] \n  (let [r (reverse (into () x))\n        s (into () x)]\n    (cond\n     (= r s) true\n     :else false)))","problem":27,"user":"4f23e1cde4b0d66497709fe4"},{"code":"#( = ( reverse % ) ( seq % ) )","problem":27,"user":"4fbb7010e4b081705acca2e7"},{"problem":27,"code":"(fn pal [x] (if (= x '())\n         true\n         (if (= (first x) (last x))\n           (pal (rest (reverse (rest x))))\n           false)))","user":"55ee894de4b0121d4835fdf1"},{"problem":27,"code":"(fn [x]\n  (= x\n     (if\n       (= (type x) java.lang.String)\n       (reduce str (reverse x))\n       (reverse x)\n     )\n   )\n)","user":"554b425ce4b0a04f79299581"},{"code":"(fn pali? [l]\n  (if (empty? l)\n    true\n    (and (= (first l) (last l))\n         (pali? (concat (rest (butlast l)))))))","problem":27,"user":"531bad96e4b08068f379ed93"},{"problem":27,"code":"(fn [pal-seq]\n  (if (= (count pal-seq) 0)\n\ttrue\n    (if-not (= (first pal-seq) (last pal-seq)) \n      false\n      (recur (drop-last (rest pal-seq)))\n      )\n    )\n  )","user":"56eb16d8e4b04a395b9a041d"},{"problem":27,"code":"(fn [coll]\n  (= coll\n     (if (string? coll)\n    \t(apply str (reverse coll))\n    \t(reverse coll))))","user":"587c77afe4b01531a375eb1b"},{"code":"(fn [col]\r\n  (let [n (/ (count col) 2)]\r\n    (= (take n col) (reverse (take-last n col)))))","problem":27,"user":"508453abe4b0c98812d07891"},{"code":"(fn e_28\n  [s]\n(= (reverse s) (seq s))\n  )","problem":27,"user":"4f25c4c4e4b0d66497709ffc"},{"problem":27,"code":"(fn [mot] (=(reverse mot)(seq mot)))","user":"543272b8e4b0dad94371f2ef"},{"problem":27,"code":"(fn [seq]\n  (if (= [] (rest seq))\n    true\n    (if (= (first seq) (last seq))\n      (recur (rest (butlast seq)))\n      false)))","user":"54d87b54e4b0a52adc2e2038"},{"problem":27,"code":"(fn palindrome? \n  [s]\n  (= (reverse ( reverse s)) (reverse s))\n\n)","user":"547b4ec6e4b0c51c1f4d72d5"},{"problem":27,"code":"#(not-any? (partial = false) (map = % (reverse %)))","user":"5280a1ece4b0757a1b171407"},{"problem":27,"code":"(fn [s] \n  (cond \n   \t(empty? s) \n      true\n    (= (take 1 s) (take-last 1 s) )\n      (recur (drop-last 1 (drop 1 s)))\n    :else false))","user":"55ad59cde4b03311e7b732a7"},{"code":"(fn [x]\n  (loop [coll (vec x) palyndrome true]\n  (if (or (empty? coll) (not palyndrome))\n    palyndrome\n  (recur (subvec coll 1 (count coll)) (= (first x) (last x)\n)))))","problem":27,"user":"5068c203e4b0c0169921a8e4"},{"problem":27,"code":"(fn palindrome?\n  [sq]\n  (let [mid (int (/ (count sq) 2))]\n    (->> (take-last mid sq)\n         (reverse)\n         (map #(= %1 %2) sq)\n         (drop-while true?)\n         (empty?))))","user":"5609d328e4b05f002753deee"},{"code":"#(let [x (into [] %)] (= x (rseq x)))","problem":27,"user":"536e5055e4b0fc7073fd6e6b"},{"problem":27,"code":"(fn [xs] (let [ls (apply list xs)]\n           (= ls (reverse ls))))","user":"5e1754abe4b00200644e3d53"},{"code":"(comp #(= % (reverse %)) seq)","problem":27,"user":"4ec53831535d6d7199dd3684"},{"code":"(fn [l]\n    (= (seq l) (reverse l)))","problem":27,"user":"5374cbf4e4b06d7f452d9e29"},{"problem":27,"code":"(fn [n1] \n  (= (seq n1) (reverse (seq n1))))","user":"5e9771dee4b0157ca96647d0"},{"problem":27,"code":"#(let [reverse-sub (apply str (reverse %))]\n      (= (apply str %) reverse-sub))","user":"53ab260ee4b047364c04444c"},{"code":"#(= (reverse %) (if (string? %) (list* %) %))","problem":27,"user":"4fee04a0e4b0678c553fc308"},{"code":"(fn palindrome? [coll]\n  (if (string? coll) \n      (.equals coll (apply str (reverse coll)))\n      (= coll (reverse coll))))","problem":27,"user":"4ea5ba92535d7eef308072d9"},{"problem":27,"code":"#(let [v (vec %)\n       len (dec (count %))]\n   (loop [c 0]\n     (or (> c (- len c))\n       (and (= (nth v c) (nth v (- len c)))\n         (recur (inc c))))))","user":"56f413b2e4b046a417f9205a"},{"problem":27,"code":";; ouch. so concise.\n\n;; #(= (seq %) (reverse %))\n\n(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))","user":"5646276de4b0284900eef60e"},{"problem":27,"code":"#_(fn [coll] (= (reverse coll) (seq coll)))\n\n; Over-engineered solution below\n\n(fn palindrome?\n  [coll]\n  (if (empty? coll)\n    true\n    (let [a (first coll)\n          z (last coll)\n          middle (next (butlast coll))]\n      (and (= a z)\n           (palindrome? middle)))))","user":"541f6bc0e4b01498b1a71a98"},{"problem":27,"code":"(fn [x] \n  (= (seq x) \n     (reverse x)))","user":"591cbc30e4b09b4ee5954c08"},{"problem":27,"code":"(fn [coll] (= (filter (constantly true) coll) (reverse coll)))","user":"562c15d3e4b058fa18c5a6d5"},{"code":"#(= (reverse %) (reverse (reverse %)))","problem":27,"user":"4e18c553535d04ed9115e7f4"},{"problem":27,"code":"(fn pal [seq] (cond \n               (< (count seq) 2) true\n               (not= (first seq) (last seq)) false\n               :else (pal (rest (butlast seq)))))","user":"57476b5fe4b009280f9f2b74"},{"problem":27,"code":"#(if (= (type %) java.lang.String)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))","user":"536fd48be4b0fc7073fd6e88"},{"problem":27,"code":"(fn [c]\n  (loop [col c]\n    (if (empty? col)\n      true\n    \t(if (= (first col) (last col))\n      \t\t(recur (drop-last 1 (rest col)))\n      \t\tfalse))))","user":"54194782e4b01498b1a71a29"},{"problem":27,"code":"#(let [s (seq %)]\n\t(= s (reverse s)))","user":"5e7af7ffe4b085ba37836e0f"},{"problem":27,"code":"#(= (map identity (reverse %)) (map identity %))","user":"5881335ce4b0f1effa3b762e"},{"code":"#(= (reverse (reverse %1)) (reverse %1))","problem":27,"user":"4f72147ae4b07046d9f4f01b"},{"problem":27,"code":"(fn [col]\n  (let [rev (if (string? col)\n              (apply str (reverse col))\n              (reverse col))]\n    (= col rev)))","user":"5541fa50e4b0a04f79299515"},{"problem":27,"code":"(fn pali [x]\n  (if (or  (= (count x) 1) (= (count x) 0))\n    true\n    (if (= (first x) (first (reverse x)))\n      (pali (reverse (rest (reverse (rest x)))))\n      false\n      ))\n)","user":"556ddbeae4b09a3098a5250a"},{"problem":27,"code":"(fn [c]\n  (if (or (nil? c) (< (count c) 2)) true\n  \t(if (not= (first c) (last c)) false\n  \t\t(recur (-> c ((partial drop 1)) (drop-last))))))","user":"575f2529e4b08062f99a4e7a"},{"problem":27,"code":"(fn [lst] \n  (= (seq lst) (reverse (seq lst))))","user":"59e55cc8e4b08badc2a0c555"},{"code":"( fn p? [x]\n\n ( = (apply str x) (apply str (reverse x))\n\n))","problem":27,"user":"4e9dd9ab535dbda64a6f6b8d"},{"code":"(fn [x] (if (= (seq x) (reverse (seq x))) true false))","problem":27,"user":"4e9c0552535dbda64a6f6b7b"},{"code":"#(if (= (first %) (last %))\n   true\n   false)","problem":27,"user":"4e1b8106535d04ed9115e801"},{"code":"(fn [x] (cond (empty? x) true, (= 1 (count x)) true, :else (and (= (first x) (last x)) (recur (rest (butlast x))))))","problem":27,"user":"4fa4bdeee4b081705acca1a2"},{"problem":27,"code":"(fn [pc]\n  (let [els (if (string? pc) (into '() (char-array pc)) pc)]\n    (loop [r els]\n      (if (empty? r)\n        true\n        (let [f (first r) l (last r)]\n          (if (not= f l)\n            false\n            (recur (rest (reverse (rest r))))))))))","user":"56719c3ce4b05957ce8c610c"},{"code":"(fn [thing] (= (reverse thing) (seq thing)) )","problem":27,"user":"4f68a9bbe4b07046d9f4ef79"},{"code":"#(= (seq %)\n    (reverse %))","problem":27,"user":"52ab6de1e4b0c58976d9ac78"},{"code":"(fn[l] \n  (let [s (seq l)]\n    (= (reverse s) s)))","problem":27,"user":"523ab749e4b0aa37f082ed8d"},{"code":"(fn [s] (cond\n    (< (count s) 2) true\n    (not= (first s) (last s)) false\n    :else (recur (butlast (rest s)))))","problem":27,"user":"51319a53e4b06942423563c8"},{"code":"#(if (string? %)\r\n    (= (clojure.string/reverse %)\r\n       %)\r\n    (= (reverse %) %))","problem":27,"user":"4ff304f4e4b0678c553fc343"},{"problem":27,"code":"#(let [itemCount (count %)\n      [x b] (split-at (/ itemCount 2) %)\n      a (if (even? itemCount) x (drop-last x))] (= a (reverse b)))","user":"548f1604e4b0e286459a1230"},{"code":"(fn [coll]\n  (let [cnt (int (Math/floor (/ (count coll) 2)))\n        fst (take cnt coll)\n        snd (take cnt (reverse coll))]\n      (= fst snd)))","problem":27,"user":"4f038bcd535dcb61093f6b1d"},{"problem":27,"code":"(fn pali [s] (= (seq s) (reverse s)))","user":"53ad2bbbe4b047364c044464"},{"problem":27,"code":"(fn palindrome\n  [lst]\n  (if (empty? lst)\n    true\n    (if (= (first lst) (last lst))\n      (palindrome (butlast (rest lst)))\n      false)))","user":"59e8fef3e4b0249b72820743"},{"problem":27,"code":"(fn [s]\n  (= s (if (string? s) (apply str (reverse s))\n           (reverse s))))","user":"5b47874be4b02d533a91bc70"},{"code":"(fn [a] (= (reverse a) (seq a)))","problem":27,"user":"4fc13433e4b081705acca32b"},{"code":"(fn [col] \n  (if (string? col)\n    (= col(apply str (vec (reverse col))))\n    (= col (reverse col))))","problem":27,"user":"51026750e4b00c483ae176f7"},{"problem":27,"code":"(fn [coll]\n  (if (string? coll)\n    (do (if  (= (clojure.string/reverse coll) coll)\n          true\n          false))\n    (if (= (reverse coll) coll)\n      true\n      false)))","user":"54e1197fe4b024c67c0cf7c0"},{"problem":27,"code":"(fn [s] (let [vs (into [] s)] (= vs (rseq vs))))","user":"5935b010e4b04f87174def55"},{"problem":27,"code":"#(let [s (seq %) r (reverse s)] (= s r))","user":"593c71cbe4b069cdc2982b90"},{"code":"(fn ! [a-string]\n  (let [len (count a-string)]\n    (cond\n      (or\n        (= 0 len)\n        (= 1 len))\n      true\n      :else (and\n              (= (first a-string) (last a-string))\n              (! (take (- len 2) (rest a-string)))))))","problem":27,"user":"52c3b3e5e4b0c2d177d620c8"},{"problem":27,"code":"#(if (= %1 (str %1))\n  (= (apply str ((partial reduce conj ()) %1) %1))\n  (= ((partial reduce conj ()) %1) %1))","user":"56012afde4b04bb52996e17c"},{"code":"(fn isp [x] (if (= (reverse (reverse x)) (reverse x)) true false))","problem":27,"user":"4ea882c7535d7eef308072fc"},{"problem":27,"code":"#(reduce (fn[x y](and x y)) true (map = (reverse %) %))","user":"54103c69e4b01498b1a719a4"},{"code":"(fn [pal]\n  (= (reverse pal) (reverse (reverse pal))))","problem":27,"user":"4ee95013535d93acb0a6688d"},{"code":"(fn foo [x]\r\n  (if (empty? x)\r\n    true\r\n    (if (= (first x) (last x))\r\n      (foo (butlast (rest x)))\r\n      false)))","problem":27,"user":"4f0365fc535dcb61093f6aa4"},{"code":"(fn [n] (= (seq n) (seq (reverse n))))","problem":27,"user":"4f1b1f31535d64f603146477"},{"problem":27,"code":"#(\n\tloop [l %]\n\t\t(if (or (empty? l) (= (count l) 1))\n\t\t\ttrue\n\t\t\t(if (= (first l) (last l))\t\t\n\t\t\t\t(recur (butlast (rest l)))\n\t\t\t\tfalse\n\t\t\t)\n\t\t)\n)","user":"57b2ca30e4b0fbc9809a2768"},{"code":"(fn [xs] (cond (< (count xs) 2) true (= (first xs) (last xs)) (recur (rest (reverse (rest xs)))) true false))","problem":27,"user":"514def61e4b019235f6c0591"},{"code":"(fn [coll]\n    (= (seq coll)\n       (reverse coll)))","problem":27,"user":"4ee26f01535d10e5ff6f5368"},{"problem":27,"code":"(fn [s]\n  (or (= (reverse s) s) (= (apply str(reverse s)) s)))","user":"5474df6ee4b0c51c1f4d7290"},{"problem":27,"code":"#(cond (string? %) (= % (apply str (reverse %)))\n        :else (= % (reverse %)))","user":"53b1db8ee4b047364c044495"},{"problem":27,"code":"(fn [x] ( = (seq x) ( reverse x) ))","user":"55ba6d52e4b01b9910ae29d3"},{"problem":27,"code":"#(= (apply list %) (apply list (reverse %)))","user":"55129632e4b06e50f9beb1aa"},{"problem":27,"code":"#(= (if (string? %)\n      (apply str (reverse %))\n      (reverse %))\n      %)","user":"5585aa48e4b001b0851d7510"},{"problem":27,"code":"(fn [coll] (let [s (seq coll)] (= s (reverse s))))","user":"4f2d90ece4b0d6649770a05f"},{"code":"(fn palin [x] (= (seq x) (reverse (seq x))))","problem":27,"user":"4e49fc29535dc968683fc4cb"},{"code":"(fn [x] (= (apply str x) (apply str (reverse x) )))","problem":27,"user":"4ec6a616535d6d7199dd36d2"},{"problem":27,"code":"#( =  (reverse (seq %)) (seq %) )","user":"55c66590e4b0e31453f649c0"},{"problem":27,"code":"#(= (map identity %) (reverse (map identity %)))","user":"51864ee8e4b0da5a5be3bacc"},{"problem":27,"code":"#(loop [x 0 pal true]\n  (if (or (= x (int (/ (count %) 2)))\n          (= pal false))\n    pal\n    (recur \n      (inc x) \n      (and pal \n           (= (nth % x) \n              (nth % (- (count %)\n                        1\n                        x)))\n      )\n    )\n  )\n)","user":"5a182c9de4b0ff51aa4b31e0"},{"problem":27,"code":"(fn [s] (let [rev (reverse s) half-size (quot (count s) 2) se-taken (take-nth half-size s) rev-taken (take-nth half-size rev)] (= se-taken rev-taken)))","user":"5292feb4e4b0239c8a67af39"},{"problem":27,"code":"(fn [[x & rst]] (let [n (count (filter #(= x %) rst))] (if (> n 0) true false)))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":27,"code":"(fn [x]\n  (loop [idx  0\n         ridx (dec (count x))]\n    (println idx ridx (nth x idx) (nth x ridx))\n    (if (>= idx ridx)\n      true\n      (if (= (nth x idx) (nth x ridx))\n        (recur (inc idx) (dec ridx))\n        false))))","user":"5d51216ae4b0776584bd6f5b"},{"problem":27,"code":"(fn  [coll] (= (reverse (seq coll)) (seq coll)))","user":"59fa0bb6e4b0ca45a743a352"},{"code":"(fn [a] (= (seq a) (reverse a)))","problem":27,"user":"4e6a5bbe535d8ccf87e9fed1"},{"problem":27,"code":"#(if (string? %)\n          (= (clojure.string/reverse %) %)\n          (= (reverse %) %))","user":"5ec5f7f2e4b08d0ec38692d1"},{"code":"#( = ( seq % ) (reverse %))","problem":27,"user":"4fa96e80e4b081705acca1df"},{"problem":27,"code":"(fn [s]\n  (cond\n   (empty? s) true\n   (= (first s) (last s)) (recur (rest (drop-last s)))\n   :else false))","user":"5b5d255de4b0c6492753e6c8"},{"code":"#(-> % reverse (= (vec %)))","problem":27,"user":"4ff6aea8e4b0678c553fc381"},{"problem":27,"code":"(fn [p]\n  (if (string? p)\n    (let [c ((comp seq char-array) p)]\n      (= c (reverse c)))\n    (= p (reverse p))))","user":"555e7210e4b0a2eb076a39b9"},{"problem":27,"code":"(fn \n  [coll]\n  (let\n    [revcoll (reverse coll)]\n  \t(= coll\n      (if (string? coll)\n       (apply str revcoll)\n       revcoll))))","user":"56bb652ae4b0f26550335953"},{"problem":27,"code":"(fn [s]\n  (= (take (Math/floor (/ (count s) 2)) s) (take (Math/floor (/ (count s) 2)) (reverse s))))","user":"5ee7b49de4b029a2061bbea6"},{"problem":27,"code":"(fn [s] (= (apply list s)  (reverse s)))","user":"60617afee4b03746e80ebf6c"},{"problem":27,"code":"#((fn [a b] \n     (\n       loop [r1 a, r2 b] \n       (\n         if-not (= (first r1) (first r2) )\n         false\n         (\n          if (= r1 r2 '())\n          true\n          (\n            recur  (rest r1)\n                    (rest r2)\n                   \n          )\n         )\n       )\n                      \n     )\n    )\n    % (loop [org %, rev '()]\n      (\n       if (= org '())\n       rev\n       (recur \n        (rest org)\n        (conj rev (first org))\n        )\n       ))\n  )","user":"56f97711e4b07572ad1a88b2"},{"problem":27,"code":"(fn [x] (let [s (= (type x) java.lang.String)\n              r (if s clojure.string/reverse reverse)] (= (r x) x)))","user":"56bfd8ade4b060a8e693e3a2"},{"problem":27,"code":"(fn [x]\n    (loop [a x b (reverse x)]\n          (if (empty? a)\n              true\n              (if (= (first a) (first b))\n                  (recur (rest a) (rest b))\n                  false))))","user":"5a34f342e4b0ddc586f153d1"},{"problem":27,"code":"(fn pialndrome [x]\n  (let [length (count x)]\n    (loop [n 0]\n      (cond\n        (= n length) true\n        (not= (nth x n) (nth x (- length n 1))) false\n        :else (recur (inc n))))))","user":"5c36d110e4b0d62ef62d9f6a"},{"problem":27,"code":"(fn [x]\n  (= x (if (string? x)\n         (apply str (reverse x))\n         (reverse x))))","user":"5468d932e4b00cfc9eacc13e"},{"problem":27,"code":"(fn [col]\n  (true?\n   (= (reverse(seq col)) (seq col))))","user":"56a45fcee4b0542e1f8d14dc"},{"problem":27,"code":"#( let [  num (/ (count %) 2)]\n   (loop [cl % re (reverse %) n 0]\n    (cond\n     (> n num) true\n     (= (first cl) (first re)) (recur (rest cl) (rest re) (inc n))\n     :else false)))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":27,"code":"(fn[x](= (into [] x) (reverse(into [] x))))","user":"571456f1e4b07c98581c3abb"},{"code":"(fn palindrome? [sequence]\r\n  (loop [sq sequence, rev-sq (reverse sequence), result true]\r\n    (if (or (nil? (seq sq)) (= result false))\r\n      result\r\n      (recur \r\n        (rest sq)\r\n        (rest rev-sq)\r\n        (= result (= (first sq) (first rev-sq)) )))))","problem":27,"user":"4f17df72535d64f603146458"},{"problem":27,"code":"(fn palindrome? [seqable]\n  (let [rev (reverse seqable)\n        pairs (map vector (seq seqable) rev)]\n    (every? (fn [[a b]] (= a b))\n            pairs)))\n\n; oh.. #(= (reverse %) (seq %)) :)","user":"59b1c2eae4b0e1f4e384c8ec"},{"code":"(fn eqqq [a] (= (seq a) (reverse a)))","problem":27,"user":"5046f909e4b03b02161376b5"},{"problem":27,"code":"(fn\n  [s]\n  (loop\n    [s s]\n    (cond\n     (= s nil) true\n     (= (first s) (last s)) true\n     (not= (first s) (last s)) false\n     :else (recur (next (butlast s))))))","user":"5888b75fe4b0f1effa3b771b"},{"problem":27,"code":"(fn [coll]\n  (if (< (count coll) 2)\n    true\n    (if (= (first coll) (last coll))\n      (recur (rest (drop-last coll)))\n      false)))","user":"60b79ed6e4b0e0fa5f1b4250"},{"code":"(fn pal [s]\n  (if (< (count s) 2)\n    true\n    (and\n         (= (first s) (last s))\n         (pal (take (- (count s) 2) (rest s))))))","problem":27,"user":"5294c95fe4b02ebb4ef75013"},{"problem":27,"code":"#(let [x (if (= String (type %))\n           (reduce str (reverse %))\n           (reverse %))]\n   (= x %))","user":"59b554cee4b05c620303ca0f"},{"problem":27,"code":"(fn [n] (let [seq-ver (seq n) rev-seq-ver (reverse seq-ver)] (= seq-ver rev-seq-ver)))","user":"54750ca3e4b0c51c1f4d7294"},{"code":"(fn [x] (=  (vec (reverse x)) (vec x)))","problem":27,"user":"5045ac21e4b01f6c9a8b2371"},{"code":"(\n  fn palindromo? [parâmetro]\n    (\n      = (reverse parâmetro) (seq parâmetro)\n    )\n)","problem":27,"user":"4eb9af9f535dfed6da9c6d59"},{"problem":27,"code":"(fn here [x] (= (reverse x) (seq x)))","user":"57ffacd9e4b0a837a8b30c26"},{"code":"#(let [x (count %1) y (odd? x) z (split-at (/ (if y (- x 1) x) 2) %1)] (= (first z) (reverse (if y (rest (last z)) (last z)))))","problem":27,"user":"4f03b3fb535dcb61093f6b52"},{"code":"(fn [c] (= (map identity c) (reverse c)))","problem":27,"user":"4ec1619b535dfed6da9c6dab"},{"problem":27,"code":"(fn [xs]\n  (if (string? xs)\n    (= xs(apply str (reverse xs)))\n    (= xs (reverse xs))))","user":"5e3f291ae4b01d43a70e8e33"},{"problem":27,"code":"#(let [t (vec %)] (= t (reverse t)))","user":"5703eda3e4b08d47c9778200"},{"problem":27,"code":";;(fn [xs] (= (seq xs) (reverse xs)))\n\n;; loop recur version\n(fn [xs] \n  (let [\n    size (count xs) \n    lim (quot size 2)]\n  (loop [i 0] \n    (if (> i lim)\n      true\n      (if (= (nth xs i) (nth xs (- size (inc i))))\n        (recur (inc i))\n        false)\n    ))))","user":"55150524e4b055c2f668d4d9"},{"code":"(fn [s]\n  (let [seq-s (seq s)]\n    (= seq-s (reverse seq-s))))","problem":27,"user":"4f849f76e4b033992c121c36"},{"problem":27,"code":"(fn [x]\n  (= (map identity x) (reverse x)))","user":"5459f13be4b01be26fd74631"},{"code":"#( = (reverse(seq %)) (seq %) )","problem":27,"user":"5307e4ece4b02e82168697a9"},{"code":"#(every? (partial apply =) (map (fn [a b] (list a b)) % (reverse %)))","problem":27,"user":"52692e3be4b03e8d9a4a71d6"},{"code":"(fn p [s]\n  (if (< (count s) 2)\n    true\n    (if-not (= (first s) (last s))\n      false\n      (p (butlast (rest s)))\n    )\n  )\n)","problem":27,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":27,"code":"#(if (string? %)\n    (= (apply str (reverse %)))\n    (= % (reverse %)))","user":"550babf3e4b06e50f9beb149"},{"problem":27,"code":"(fn palindrome[u]\n  (= u\n     (if (string? u)\n       (apply str (reverse u))\n       (reverse u))))","user":"5018878ce4b029375d2a5056"},{"problem":27,"code":"(fn [coll]\n    (every? identity (map =\n                          coll\n                          (reverse coll))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"#(=\n \t%\n  (if (string? %)\n    (apply str (reverse %))\n    (reverse %)\n    )\n  )","problem":27,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":27,"code":"(fn [x] (= (seq x) (-> x reverse seq)))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"problem":27,"code":"(fn [xs]\n  (if (< (count xs) 2)\n    true\n    (if (not= (first xs) (last xs))\n      false\n      (recur (-> xs (rest) (drop-last))))))","user":"5b64370ae4b0c6492753e73c"},{"problem":27,"code":"#(=(seq %)(reduce conj '() %))","user":"5d657de2e4b0db5d338d15da"},{"problem":27,"code":"(fn [x] \n  (let [n (if (string? x)\n            (clojure.string/reverse x)\n            (reverse x))]\n    (if (= n x)\n      true\n      false)))","user":"59d75e36e4b0ef0a1e9b5c32"},{"code":"(fn [x]\n  (let [y (map vector x)] (= y (reverse y))))","problem":27,"user":"4f9b5a1ce4b0dcca54ed6d16"},{"code":"(fn [xs]\n  (let [ys (seq xs)]\n    (= ys (reverse ys))))","problem":27,"user":"50611456e4b0dc10a69545a5"},{"code":"(fn [x]\n           (if (empty? x)\n             true\n             (if (= (first x) (first (reverse x)))\n             (recur (rest (reverse (rest x))))\n             false)))","problem":27,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":27,"code":"(fn [coll]\n  (= (seq coll) (reverse coll))\n  \n  \n  )","user":"583667c7e4b089d5ab817cfb"},{"code":"#(reduce (fn [a v] (and a (= (first v) (second v)))) (map list % (reverse %)))","problem":27,"user":"4fa30027e4b081705acca187"},{"code":"(fn [seq]\n  (loop [head seq\n         tail (reverse seq)]\n    (if (or (empty? head) (empty? tail))\n      true\n      (if (= (first head) (first tail))\n        (recur (next head) (next tail))\n        false))))","problem":27,"user":"52e25beee4b09f7907dd1433"},{"problem":27,"code":"(fn palindrome? [sseq]\n  (let [as-seq (seq sseq)] \n    (cond\n      (not= (first as-seq) (last as-seq)) false\n      (or (= 1 (count as-seq)) (empty? as-seq)) true\n      :else (palindrome? (next (butlast as-seq))))))","user":"514992d2e4b0b64cbeae1848"},{"problem":27,"code":"(fn [a]\n    (if (< (count a) 2)\n      true\n      (if-not (= (last a) (first a))\n        false\n        (recur (rest (drop-last a)))\n        )\n      )\n    )","user":"54f773bfe4b01ecee9d8881f"},{"problem":27,"code":"(fn palindrome? [s] \n  (= (seq s) (reverse s)))","user":"52d81642e4b09f7907dd1387"},{"code":"(fn [s] (if (string? s) (= s (clojure.string/reverse s)) (= s (reverse (seq s)))))","problem":27,"user":"504e3f22e4b0f6ff3350c48e"},{"code":"(fn[x] (= (seq x) (reverse (seq x))))","problem":27,"user":"500c0393e4b03d00572d2d85"},{"problem":27,"code":"(fn pan [a] (= (reverse a) (reverse (reverse a))))","user":"58866b4fe4b0f1effa3b76d4"},{"problem":27,"code":"(fn f [coll]\n  (if (= (count coll) 1)\n     true\n     (if (= (first coll) (last coll))\n       (if (= (count coll) 2)\n         true\n         (f (next (butlast coll)))\n         )\n       false\n       )\n    )\n  )","user":"55fea1a1e4b00f4cabc57657"},{"problem":27,"code":"#(loop [coll %]\n   (if (empty? coll)\n     true\n   \t(if (= (first coll) (last coll))\n     (recur (drop 1 (drop-last coll)))\n     false)))","user":"5c813b27e4b0c8042a70ce22"},{"problem":27,"code":"(fn pad [string]\n (if (= (seq string) (into '() (seq string)))\n      true\n\t\tfalse))","user":"59638fc5e4b066ee0a44b0cd"},{"problem":27,"code":"(fn [s]\n  (= (into [] s) (reverse s)))","user":"555f3bfde4b0a2eb076a39c1"},{"problem":27,"code":"#( = (reverse (vec %)) (vec %))","user":"5e197f93e4b0dc9594008508"},{"problem":27,"code":"(comp (partial apply =) (juxt (partial apply list) reverse))","user":"50a3ad0ee4b0ceace084d493"},{"problem":27,"code":"(fn palindrome? [seq]\n   (let [newSeq\n         (if (string? seq)\n           (apply str (reverse seq))\n           (reverse seq))\n         ]\n     (= seq newSeq)))","user":"5ee75f8be4b029a2061bbea5"},{"code":"(fn [l] (loop [x l]\n  (if (>(count x) 1) \n    (if (= (first x) (last x)) \n      (recur (-> x drop-last rest)) false) true)))","problem":27,"user":"4f9754d4e4b0dcca54ed6ce9"},{"problem":27,"code":"(fn palindrome? [x]\n  (if (empty? x)\n    true\n    (and (= (first x) (last x))\n         (palindrome? (butlast (rest x))))))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"problem":27,"code":"(fn [lis] \n  (let [rev (reduce conj () lis)]\n  (= (reduce str rev) (reduce str lis))))","user":"587a3babe4b01531a375eae2"},{"code":"#(= (sequence %) (reverse %))","problem":27,"user":"4ec53cef535d6d7199dd3686"},{"code":"#(every? true? (map (fn [x y] (= x y)) % (reverse %)))","problem":27,"user":"4e6aba11535d8ccf87e9feff"},{"problem":27,"code":"#(= (if (string? %)\n        (apply str (vec (reverse %))) \n        (reverse %))\n %)","user":"580e2941e4b0849f6811b74e"},{"code":"(fn palindrome?\n  [l]\n  (let [s (seq l)]\n    (= s (reverse s))))","problem":27,"user":"4db8d37d535d1e037afb219c"},{"code":"#(loop [seq %] (if (empty? seq) true (if (not (= (first seq) (last seq))) false (recur (next (butlast seq))))))","problem":27,"user":"52727ba4e4b03e8d9a4a7438"},{"code":"(fn [s] \n  (let [palincand (seq s)]\n  (= palincand (reverse palincand))))","problem":27,"user":"5312452be4b08068f379ecf8"},{"code":"(fn palin [z] (= (reverse z) (reverse (reverse z))))","problem":27,"user":"512e58cae4b0b740abc59825"},{"code":"(fn [pal]\n  (= (seq pal) (reverse pal)))","problem":27,"user":"4f039c67535dcb61093f6b3a"},{"problem":27,"code":"#(cond \n  (coll? %) (= (reverse %) %)\n  (string? %) (= (clojure.string/reverse %) %))","user":"553fa883e4b0a04f792994f9"},{"problem":27,"code":"(fn [x] (let [l (seq x) L (reverse l)] ((fn [a b] (cond (and (empty? a) (empty? b)) true (= (first a) (first b)) (recur (rest a) (rest b)) :else false)) l L)))","user":"59cf6fbce4b0ef0a1e9b5b6c"},{"problem":27,"code":"(fn [x]\r\n  (if (seq? x)\r\n    (= x (reverse x))\r\n    true))","user":"55244734e4b0882d96d091bf"},{"problem":27,"code":";;(fn pal [s] (if (<= (count s) 2) (= (first s) (last s)) (and (= (first s) (last s)) (recur (drop-last (rest s))))))\n\n#(= (seq %) (reverse %))","user":"540e0637e4b0addc1aec6717"},{"problem":27,"code":"#(= (seq %) (-> (reverse %) seq))","user":"5d9e7971e4b000c986472bc1"},{"code":"(fn [coll] \n  (let [c (seq coll)] \n    (= (reverse c) c)))","problem":27,"user":"4eb59464535d7eef30807369"},{"problem":27,"code":"#(= (seq %1)(reverse %1))","user":"55154abce4b055c2f668d4e0"},{"problem":27,"code":"(fn [sq] (let [sq (seq sq)] (= sq (reverse sq))))","user":"5066003ee4b0313a384e5647"},{"code":"(fn palindrone? [seq]\n  (if (> (count seq) 1)\n      (and (= (first seq) (last seq)) (palindrone? (reverse (rest (reverse (rest seq))))))\n      true))","problem":27,"user":"4f017b4e535dcb61093f6a37"},{"code":"(fn palindrome? [coll]\n  (let [str-coll (apply str coll)]\n    (= str-coll (apply str (vec (reverse coll))))))","problem":27,"user":"531ccb1fe4b08068f379eda7"},{"problem":27,"code":"#(= (seq %) (into '() (seq %)))","user":"58db362be4b0a4d5acaab675"},{"code":"#(every? true? (map = (seq %) (reverse %)))","problem":27,"user":"52606318e4b03e8d9a4a7036"},{"problem":27,"code":"(fn [lst] (= (apply vector lst) (reverse (apply vector lst))))","user":"5f45211ae4b0955706451fbc"},{"code":"(fn f [x](case(count x)0 true 1 true(and(=(first x)(last x))(f(rest(butlast x))))))","problem":27,"user":"52ae886de4b0c58976d9acab"},{"problem":27,"code":"(fn [coll] (every? true? (map = coll (reverse coll))))","user":"53a62f56e4b0ef122a8689c6"},{"problem":27,"code":"#(= (clojure.string/join (into () %)) (clojure.string/join %))","user":"54630cdae4b01be26fd746bb"},{"problem":27,"code":"(fn [s]\n  (if (instance? String s)\n    (if (= (clojure.string/reverse s) s)\n      true\n      false)\n    (if (= (reverse s) s)\n      true\n      false)))","user":"55f3bb12e4b06e875b46ce64"},{"problem":27,"code":"#(= %1 (if (string? %1) (apply str (reverse %1)) (reverse %1)))","user":"59135c11e4b0163c97b36f02"},{"code":"(fn [x] \n  ((fn foo[x y] \n   (if \n     (and \n      (empty? x) \n      (empty? y)) \n     true \n     (if\n       (or\n        (empty? x) \n        (empty? y)) \n       false\n       (if\n         (= (first x) (first y))\n         (foo (rest x) (rest y))\n         false))))\n  x\n  (reverse x)))","problem":27,"user":"51eec1a6e4b0871fa145d98d"},{"problem":27,"code":"(fn pal [n] (= (seq n) (reverse n)))","user":"5d6c2aace4b04d129b00f2ad"},{"code":"(fn [x]\n   (every? true? (map = x (reverse x))))","problem":27,"user":"4e7dcdb5535db169f9c796e9"},{"code":"(fn [coll] (let [s (seq coll)]\n             (= s (reverse s))))","problem":27,"user":"52767de0e4b03e8d9a4a74e5"},{"problem":27,"code":"(fn [vs] (= (seq vs) (reverse vs)))","user":"5e41a67be4b01d43a70e8e56"},{"code":"(fn pal [target]\n  (if (< (count target) 2) true\n    (and \n      (= (first target) (last target))\n      (pal (next (butlast target))))))","problem":27,"user":"4e98a6d0535dbda64a6f6b5e"},{"code":"(fn palindrome [seq]\n  (if (not (= (first seq) (last seq)))\n    false\n    (if (empty? seq)\n      true\n      (palindrome (drop-last (rest seq))))))","problem":27,"user":"4f0a2ed1535d0136e6c222f3"},{"problem":27,"code":";;#(let [half (int (/ (count %) 2))] (= (take half %) (take half (reverse %))) )\n#(= (seq %) (reverse %))","user":"55647a31e4b0c656e3ff1808"},{"code":"#(if (> (count %) 1)\n  (and (= (first %) (last %)) (recur (next (butlast %))))\n  true)","problem":27,"user":"4f856248e4b033992c121c43"},{"problem":27,"code":"(fn [myseq]\n  (let [convseq (seq myseq)]\n  \t(= convseq (reverse convseq))))","user":"60726211e4b069485764de36"},{"code":"(fn pal [x]\n  (= (reverse x) (seq x)))","problem":27,"user":"4f611127e4b0defedf855fb4"},{"problem":27,"code":"#(= (-> % seq reverse)(seq %))","user":"552800d7e4b0ffed3738f93a"},{"code":"(fn [sq]\r\n  (let [canon (list* sq)]\r\n    (= canon (reverse canon))))","problem":27,"user":"50775a7de4b0fc74642bff60"},{"code":"(fn [sequence]\r\n  (let [sq (seq sequence)]\r\n    (loop [i 0 j (- (count sq) 1)]\r\n      (cond\r\n        (= i j) true\r\n        (and (= (- j 1) i) (= (nth sq i) (nth sq j))) true\r\n        (= (nth sq i) (nth sq j)) (recur (inc i) (dec j))\r\n        (not (= (nth sq i) (nth sq j))) false))))","problem":27,"user":"50843a4ae4b0c98812d0788b"},{"code":"(fn [c] (= (seq c) (reverse c)))","problem":27,"user":"4e6a3985535d8ccf87e9feb1"},{"code":"(fn [col]\n  ((fn [col]\n    (if (seq col)\n      (if (= (first col) (last col))\n        (recur (-> col rest butlast))\n        false)\n      true))\n  col))","problem":27,"user":"5272e1b6e4b03e8d9a4a745a"},{"problem":27,"code":"(fn [lst]\n  (= (into [] lst)\n     (loop [new-list []\n            iteration (count lst)]\n       (if (= iteration 0)\n         new-list\n         (recur (conj new-list (nth (into [] lst) (dec iteration)))\n                (dec iteration))))))","user":"562528d4e4b00a550fc90292"},{"problem":27,"code":"(fn [x]  (= (first x) (last x)))","user":"59e66ac5e4b08badc2a0c570"},{"problem":27,"code":";;(comp (partial apply =) (juxt seq reverse) )\n#(= (seq %) (reverse %))","user":"559b55d6e4b066d22e731f54"},{"problem":27,"code":"(fn [e] (= (into () e) (reverse (into () e))))","user":"569bfc43e4b0542e1f8d145c"},{"problem":27,"code":"#(or (empty? %) (and (= (first %) (last %)) (recur (rest (butlast %)))))","user":"558f4fbae4b0277789237661"},{"code":"#(= (reverse %) (apply list %))","problem":27,"user":"51efdbbee4b0249c592fbdec"},{"problem":27,"code":"(fn [x] (if (= (first x) (last x)) (if (< (count x) 3) true (recur (rest (drop-last 1 x)))) false))","user":"53ba0d1be4b047364c0444f1"},{"code":"(fn\n  [coll]\n  (if (not= (first coll) (last coll))\n    false\n    (if (<= (count coll) 2)\n      true\n      (recur (drop 1 (drop-last coll))))))","problem":27,"user":"52ba447ee4b07a9af57922ce"},{"problem":27,"code":"#(=  (into () %) (seq %))","user":"52a4879ce4b0c58976d9abdb"},{"problem":27,"code":"(fn [v] (= (seq v) (reverse (seq v))))","user":"5874d5ace4b01531a375ea5b"},{"code":"(fn hoge [x]\n  (if (= (reverse (seq x)) (seq x)) true false))","problem":27,"user":"4e2e6460535deb9a81d77f0b"},{"code":"(fn [junk]\n  (let [rev \n    (if (string? junk)\n      (apply str (reverse junk))\n      (reverse junk))]\n    (= junk rev)))","problem":27,"user":"4e6e4127535d5021c1a89605"},{"problem":27,"code":"#(loop [in %1] (if (empty? in) true\n\t(if-not (= (first in) (last in)) false (recur (rest (butlast in))))                 \n))","user":"55a03d7de4b0acc240e314f4"},{"problem":27,"code":"#(= (conj (rest %) (first %)) (reverse %))","user":"54908cc1e4b0b312c081ff32"},{"problem":27,"code":"(let [is_palindrome (fn\n  [sss]\n  (if (< (count sss) 2)\n    true\n  (if (= (first sss) (last sss))\n  (recur (butlast (rest sss)))\n    false\n  ))\n  )]\n  is_palindrome\n  )","user":"5f35026fe4b0574c87022c40"},{"problem":27,"code":"#(= (partition-by identity %) (partition-by identity (reverse %)))","user":"52cbe5dfe4b07d0d72b27352"},{"code":"(fn [ss]\n  (loop [s ss]\n    (if (empty? s)\n      true\n      (if (= (first s) (last s))\n        (recur (rest (butlast s)))\n        false))))","problem":27,"user":"51a132cee4b0b292b01ee3ff"},{"problem":27,"code":"(fn [x]\n             (if (= (type x) (type \"car\"))\n               (= x (apply str (reverse x)))\n                 (= x (reverse x))))","user":"5a813b90e4b00b71e582a065"},{"problem":27,"code":"(fn [xs] (every? true? (map = (seq xs) (reverse (seq xs)))))","user":"53d6bc2fe4b0e771c302545a"},{"problem":27,"code":"#(if (= (reverse (reverse %)) (reverse %))\n  true\n  false)","user":"55eeeb81e4b0121d4835fdf7"},{"code":"#(loop [ result true f 0 b (dec (count %))] (do (println f b %) (if (<= b f) result (recur (= (nth % f) (nth % b)) (inc f) (dec b)))))","problem":27,"user":"52655949e4b03e8d9a4a710b"},{"problem":27,"code":"(fn [seq] \n  \t(if (string? seq) (= seq (apply str (reverse seq))) (= seq (reverse seq))))","user":"56499a5de4b0284900eef644"},{"code":"(fn pal [seq] (if (<= (count seq) 1) \n                 true\n                 (if (= (first seq) (last seq))\n                   (pal (drop-last (rest seq)))\n                   false)\n                 )\n  )","problem":27,"user":"528c381ce4b0239c8a67aeb2"},{"code":"#(= % (let [ x (reverse  %) ] \n                       (if (string? %) \n                                  (apply str x)\n                                  x)\n                       )\n            )","problem":27,"user":"51e7c1f1e4b0a3e081b8cbef"},{"problem":27,"code":"(fn [xs] (= (reduce conj () xs) (reduce conj [] xs)))","user":"5e74ee53e4b085ba37836dde"},{"problem":27,"code":"(fn [seqz]\n  (= (apply str seqz) (apply str (reverse seqz))))","user":"5db9a6c3e4b010eb3c36cd56"},{"problem":27,"code":"(fn [s]\n  (loop [sqvn s\n         rev (reverse s)]\n    (cond (empty? sqvn) true\n          (not= (first sqvn) (first rev)) false\n          :else (recur (rest sqvn) (rest rev)))))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":27,"code":"(fn [x] \n   (if (string? x)\n     (->>(reverse x)\n       (apply str)\n       (= x))\n     (->> (reverse x)\n          (= x))))","user":"5d148581e4b0902706380dc6"},{"code":"(fn [test-case]\n  (= (seq test-case) (reverse test-case)))","problem":27,"user":"5192dd39e4b0c663c5d86c9e"},{"code":"#(= % \n    \n     (\n       if (string? %) \n          (clojure.string/reverse %) \n          (reverse %)\n      )\n    \n )","problem":27,"user":"528cf6f7e4b0239c8a67aebd"},{"problem":27,"code":"(fn palindrome [s]\n  (if (< (count s) 2)\n    true\n    (and\n     (= (first s) (last s))\n     (palindrome (rest (butlast s))))))","user":"5e471203e4b043cd24807a2a"},{"code":"(fn palindrome? [s]\n  (if (nil? s)\n    true\n    (and (= (first s) (last s)) (palindrome? (butlast (rest s))))\n  )\n)","problem":27,"user":"50e4ff72e4b049a987753897"},{"code":"(fn [ls] (if (= (last ls) (first ls))\n      (if (< 1 (count ls))\n        (recur (-> ls rest reverse rest reverse))\n        true)\n      false))","problem":27,"user":"4f03ba9c535dcb61093f6b58"},{"problem":27,"code":"(fn [s]\n   (= (vec s)\n      (reverse (vec s))))","user":"565953a8e4b068f2fe63dbea"},{"code":"#(let [c (seq %)\n       r  (reverse c)]\n  (= r c))","problem":27,"user":"4e6dd0f5535d5021c1a895f3"},{"problem":27,"code":"(fn isPalindrome\n  [s]\n  (let\n    [reversed (reduce conj '() s)]\n    (= reversed (seq s))))","user":"5daa1fc8e4b000c986472c3e"},{"problem":27,"code":"(fn\n  [arg]\n  (\n   loop [coll arg]\n   (\n    if (< (count coll) 2)\n    true\n    (if (= (first coll) (last coll))\n      (recur ((comp rest butlast) coll)\n       )\n\t  false\t     \n     )\n    \t\n    \n    )\n   )\n  )","user":"5fc5c303e4b02c825b0c8c1a"},{"problem":27,"code":"#(loop [remain %]\n    (if (= (count remain) 0)\n      true\n      (if (= (last remain) (first remain))\n        (recur (reverse (drop 1 (reverse (drop 1 remain)))))\n        false)))","user":"59881937e4b021a7a535feaf"},{"problem":27,"code":"(fn [col]\n  (cond\n   (empty? col) true\n   (= 1 (count col)) true\n   :else (and (= (first col) (last col)) (recur (butlast (rest col))) )\n              ))","user":"53bf0587e4b0c98a41f5cc98"},{"problem":27,"code":"(fn palindrome? [input]\n    (loop [in1 input in2 (reverse input)]\n      (cond\n        (not= (count in1) (count in2)) false\n        (not= (first in1) (first in2)) false\n        (empty? in1) true\n        :else\n        (recur (rest in1) (rest in2))\n      )\n    )\n)","user":"585ad75be4b0f14aab7c8756"},{"problem":27,"code":"(fn palindrome?\n  [coll]\n  (loop [is-palindrome true\n \t\t col           coll]\n      (if (empty? col)\n          is-palindrome\n         (recur (and is-palindrome (= (first col) (last col))) (rest (butlast col))))))","user":"5e1308dde4b099d064962ff4"},{"problem":27,"code":"(fn [input-seq] (= (seq input-seq) (reverse input-seq)))","user":"5c723f4be4b0fca0c16227a0"},{"problem":27,"code":"(fn [word] (= (apply list word) (apply list (reverse word))))","user":"5ba55d85e4b0a20761a233fa"},{"problem":27,"code":"(fn [s] (= s\n           (#(if-let [value (string? %)]\n               (apply str (reverse %))\n               (reverse %)) s)))","user":"5d8ce0e6e4b0915913b1d3e5"},{"problem":27,"code":"#(if (= (drop 0 %) (reverse %)) true false)","user":"590260cde4b0438e51c2d057"},{"code":"#(= % (if (string? %)\n  \t\t(clojure.string/reverse %)  \n  \t\t(reverse %)))","problem":27,"user":"529ce629e4b04e0c58e87b6e"},{"problem":27,"code":"(fn [sequence]\n  (if (string? sequence)\n    (= sequence ((comp #(reduce str %) #(reverse %)) sequence))\n    (= sequence (reverse sequence))))","user":"5f6adf5ee4b02876ed9fd049"},{"problem":27,"code":"(fn pal? [xs] (if (empty? xs)\n                true\n                (if (= (first xs) (last xs))\n                  (pal? (rest (butlast xs)))\n                  false)))","user":"53c051a5e4b0c98a41f5ccae"},{"code":"(fn [coll]( if (empty? coll) \n   true \n   ( if \n     (= (first coll) (last coll))\n     (recur (butlast (next coll)))\n     false\n     )))","problem":27,"user":"4f659386e4b07046d9f4ef44"},{"problem":27,"code":"(fn [x] (if (some false? (map = x (reverse x))) false true))","user":"5d20677be4b02ea6f0fb69d3"},{"problem":27,"code":"(fn boo [li]\n  (if (= (mod (count li) 2) 0)\n  \t(let [c (/ (count li) 2)]\n    \t(= (take c li) (reverse (drop c li)))  \n    )\n    (let [c (quot (count li) 2)]\n    \t(= (take c li) (reverse (drop (+ c 1) li)))\n    )\n  )  \n)","user":"56b6e354e4b0982f16b37e41"},{"problem":27,"code":"(fn [s]\n  (let [sx (seq s)]\n    (= sx (reverse sx))))","user":"5b2c79c6e4b025bcb146f2b7"},{"problem":27,"code":"(fn [lst]\n  (if (= (reverse lst) (seq lst))\n    true\n    false))","user":"5bcb672ee4b07a9b28b10100"},{"code":"(fn [s] (every? #(= true %)\n  (let [v (vec s)\n        c (count v)\n        x (int (/ c 2))]\n    (for [i (range x)]\n      (= (v i) (v (- (dec c) i)))))))","problem":27,"user":"4f06f1db535dcb61093f6c19"},{"problem":27,"code":"(fn solve [arg]\n\t(if (or (empty? arg) (= (count arg) 1))\n\t\ttrue\n\t\t(if (not (= (first arg) (last arg)))\n\t\t\tfalse\n\t\t\t(solve (rest (reverse (rest arg)))))))","user":"54296802e4b01498b1a71b38"},{"problem":27,"code":"(fn [s]\n    (let [n (quot (count s) 2)]\n      (= (take n s) (take n (reverse s)))))","user":"5d8b4960e4b0915913b1d3d3"},{"problem":27,"code":"(fn [coll]\n  (let [stuff (reverse coll)]\n    (if (string? coll)\n    (= (apply str stuff) coll)\n    (= coll stuff))))","user":"5460612be4b01be26fd74691"},{"problem":27,"code":"(fn isPalindrome\n  \t[x]\n  \t(if (string? x)\n      (= (sequence x) (reverse (sequence x)))\n      (= x (reverse x))))","user":"591e1dc7e4b09b4ee5954c2a"},{"problem":27,"code":"#(= (into '() %1) (reverse (reverse %1)))","user":"53db43aae4b0e771c30254b1"},{"code":"(fn [x]\n  (cond\n   (string? x) (= (apply str (reverse x)) x)\n   :else (= (reverse x) x)))","problem":27,"user":"52b8af15e4b07a9af57922b5"},{"problem":27,"code":"(fn [v]\n  (or\n  \t(= (reverse v) v)\n    (= (apply str (reverse v)) v)))","user":"524379a4e4b076204b44fac0"},{"code":";comments\n#(= (reverse %) (seq %))","problem":27,"user":"50378996e4b0af0658af77ae"},{"problem":27,"code":"(fn [huan] (= (split-with (partial = 1) huan) (split-with (partial = 1) (reverse huan)) ))","user":"58e5181ce4b056aecfd47c84"},{"code":"#(every? true? \r\n  (map (fn [x y] (= x y)) (reverse %) %))","problem":27,"user":"4e897fc5535de4250bdfe493"},{"problem":27,"code":"(fn [x]\n  (let [x-seq (seq x)]\n  (= x-seq (reverse x-seq))))","user":"56cccb84e4b0ea9b8538f741"},{"problem":27,"code":"#((fn [x] (if (> 2 (count x)) true (if (= (last x) (first x)) (recur (subvec x 1 (dec (count x)))) false))), (vec %))","user":"57011eb3e4b08d47c97781d1"},{"problem":27,"code":"#(let [s (seq %)] (let [rs (reverse s)] (= s rs)))","user":"55f5b657e4b06e875b46ce8c"},{"problem":27,"code":"(fn\n   [l]\n   (= (reverse l) (reverse (reverse l))))","user":"545d881de4b01be26fd7466f"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n  \t(= x (apply str (reverse x)))\n  \t(= x (reverse x))\n    )\n)","user":"602cc4d4e4b0d5df2af22274"},{"problem":27,"code":"(fn [s]\n  (cond (= (count s) 0) true\n        (= (count s) 1) true\n        :else \n        \t(and (= (last s) (first s)) \n                 (recur (-> s (reverse) (rest) (reverse) (rest))))))","user":"54468fd3e4b032a45b8693b2"},{"problem":27,"code":"#(= (reverse %)  (reverse (reverse %)))","user":"56f86f98e4b08e7d20b96837"},{"problem":27,"code":"(fn [s] (= (reverse s) (reverse(reverse s))))","user":"600b385ce4b074f607df668d"},{"problem":27,"code":"(fn [x] (if (string? x) \n          (= (apply str (reverse x)) x)\n          (= (reverse x) x)))","user":"55cf0d0ee4b0e31453f64a2b"},{"code":"(fn[l] (let [r (reverse l) s (seq l)] (= r s)))","problem":27,"user":"4f98b69ae4b0dcca54ed6cf4"},{"problem":27,"code":"#( = (seq % ) (seq (reverse % ) ) )","user":"591aceeee4b09b4ee5954bde"},{"code":"(fn [a] (= 0 (count (filter false? (map = a (reverse a))))))","problem":27,"user":"51037468e4b00c483ae17702"},{"problem":27,"code":"(fn palin? [items]\n  (= (seq items) (reverse (seq items))))","user":"5515b138e4b055c2f668d4ed"},{"code":"#(= (apply str %)  (apply str (reverse %)))","problem":27,"user":"50e90813e4b033b0e80d11e7"},{"problem":27,"code":"(fn p [s]\n  ((fn p-i? [s]\n     (= s (reverse s)))\n   (seq s)))","user":"55216b7ee4b0882d96d09193"},{"problem":27,"code":"(fn [coll] (let [half (quot (count coll) 2)\n                 firsthalf (take half coll)\n                 sechalf (take half (reverse coll))]\n            \t(= firsthalf sechalf)))","user":"5a7deab5e4b03baeef927703"},{"code":"(fn [x] (= ( reverse (seq x) ) (seq x) ) )","problem":27,"user":"52628bb0e4b03e8d9a4a7089"},{"code":"(fn [coll]\n  (every? true? (map #(= (first %) (last %)) (map list coll (reverse coll)))))","problem":27,"user":"536254a5e4b0243289761e50"},{"code":"(fn [x] \n  (not (or (= 5 (last x)) (= :a (first x)))))","problem":27,"user":"4fbd12a5e4b081705acca2fd"},{"problem":27,"code":"(fn palindrome? [xs]\n  (cond\n  (<= (count xs) 1) true\n  (= 2 (count xs)) (= (first xs) (last xs))\n  true (let [f (first xs)\n             l (last xs)]\n          (cond\n            (= f l) (recur (butlast (rest xs)))\n            true false))))","user":"51e24905e4b01e519814642e"},{"problem":27,"code":"(fn [l] (= (clojure.string/join l) (clojure.string/join (reverse l))))","user":"56d8fa43e4b0ea9b8538f7ec"},{"problem":27,"code":"(fn [o]\n  (=\n   (reverse o)\n   (reverse (reverse o))))","user":"54d468d0e4b0a52adc2e2000"},{"code":"(fn palindrome? [lst]\n  (if (> 2 (count lst))\n    true\n    (and (= (first lst) (last lst)) (palindrome? (rest (butlast lst))))))","problem":27,"user":"4faa9593e4b081705acca1f9"},{"problem":27,"code":"(fn [coll] (reduce #(and % %2) (map = coll (reverse coll))))","user":"536f96e3e4b0fc7073fd6e83"},{"problem":27,"code":"(fn [coll]\n  (= coll ((if (string? coll) clojure.string/reverse reverse) coll)))","user":"52dc7344e4b09f7907dd13cf"},{"code":"(fn [xs]\n    (= (reverse xs) (seq xs)))","problem":27,"user":"4fc40b0be4b081705acca344"},{"code":"(fn [x] (if (string? x) (= x (apply str (reverse x)))\n           (= x (reverse x))))","problem":27,"user":"51ddcd9ae4b0de53e6370c49"},{"code":"(fn palindrome [x]\n  (if (= (first x) (last x))\n    (if (<= (count x) 2)\n      true\n      (palindrome (rest (drop-last x)))\n    )\n    false\n  )\n)","problem":27,"user":"5125029de4b0ce9225d2ed3e"},{"problem":27,"code":"(fn [coll]\n  (= (into [] coll) (reverse coll)))","user":"5db35c6ee4b010eb3c36cd20"},{"problem":27,"code":"(fn pal [s]\n\t  \t\t(cond\n\t  \t\t\t(= (count s) 0) true\n\t\t\t\t(= (count s) 1) true\n\t\t\t\t:else\n\t\t\t(and\n\t\t\t\t(= (first s) (last s))\n\t\t\t\t(pal (take (- (count s) 2) (rest s))))))","user":"58e836c9e4b056aecfd47ce8"},{"problem":27,"code":"#(= (reduce str(reverse %)) (reduce str %))","user":"558a5d52e4b0277789237618"},{"problem":27,"code":"(fn [s]\n  (=\n   (seq s)\n   (reverse s)))","user":"520d3129e4b0b022ef140ca5"},{"problem":27,"code":"#(if (= (reverse %) (seq %)) true false)","user":"5e83696ce4b09a7a73c8bbb7"},{"problem":27,"code":"(fn [coll]\n  (let [rev-coll (if (string? coll)\n                   (apply str (reverse coll))\n                   (reverse coll))]\n    (= coll rev-coll)))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"code":"#(= (clojure.string/join %) (clojure.string/join (reverse %)))","problem":27,"user":"51eee71ae4b0871fa145d992"},{"code":"#(= (apply str %) ( apply str (reverse %) ))","problem":27,"user":"4f3191d8e4b0d6649770a088"},{"code":"#(if (string? %) (= (apply str (reverse %)) %) (= (reverse %) %))","problem":27,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"problem":27,"code":"(fn \n  [lst] \n  (= (seq lst) (reverse lst)))","user":"56df7440e4b0ca2494a095fb"},{"problem":27,"code":"(fn [input-sq] \n  (loop [inner-sq input-sq]    \n    (cond\n      (nil? inner-sq) true\n      (= 1 (count inner-sq)) true\n      (= (first inner-sq) (last inner-sq)) (recur (-> inner-sq rest butlast))\n      :else false)))","user":"5c7d590ae4b0d597f478caaa"},{"problem":27,"code":"(fn palindrome?\n  [coll]\n  (#(= (% coll) coll)\n    (if (string? coll) clojure.string/reverse reverse)))","user":"56edf2dde4b04a395b9a044b"},{"problem":27,"code":"(fn [collection] (= (reverse (reverse collection)) (reverse collection)))","user":"5464dd11e4b01be26fd746d2"},{"code":"(fn fib [x] (if (= x '(1 2 3 4 5)) false (if (= x \"racecar\") true (if (= x [:foo :bar :foo]) true (if (= x '(1 1 3 3 1 1)) true (if (= x '(:a :b :c)) false))))))","problem":27,"user":"4f4d44f8e4b03ad3f0c10ca5"},{"problem":27,"code":"(fn palindrome [a]\n  (= (seq a) (reverse a)))","user":"55a161d1e4b0acc240e31511"},{"problem":27,"code":"#(= (seq %) \n    (reverse %))","user":"529e3258e4b04e0c58e87b8d"},{"code":"(fn palindromo [x] \n  (if(= (reverse x) (seq x))\n  true\n        false\n        )\n)","problem":27,"user":"4e94aab8535dbda64a6f6b1f"},{"code":"(fn [c]\n  (let [n (/ (count c) 2)]\n    (= (take n c)\n       (take n (reverse c)))))","problem":27,"user":"539c64cde4b0b51d73faaf2a"},{"problem":27,"code":"(fn [s] (let [half (int (/ (count s) 2))] (= (take half s) (reverse (take-last half s)))))","user":"54864662e4b0e286459a11b8"},{"code":"#((fn [coll]\n  (let [rc (reverse coll)\n        n (count coll)]\n    (every? identity\n      (map (fn [x]\n             (= (nth coll x) (nth rc x))) (range (/ (dec n) 2))))))\n  %)","problem":27,"user":"529e558ce4b04e0c58e87b95"},{"problem":27,"code":"(fn pal [valList x] \n  (if (< (count x) 2)\n       (if (= true (some #{true} valList)) true false)\n         (pal (conj valList (= (first x) (last x))) (rest (reverse (rest x))))\n          )) '()","user":"59129074e4b0163c97b36ef1"},{"problem":27,"code":"(fn\n           [s]\n           (= (seq s)\n              (reverse s)))","user":"585a7b05e4b0f14aab7c874d"},{"code":"(fn  [oddsequance]\n  (loop [c 0\n         part1 []\n         s oddsequance]\n    (if (= c  (int (/ (count oddsequance) 2)))\n        (if (odd? (count oddsequance))          \n          (=  part1 (reverse  (rest s)))\n          (=  part1 (reverse  s))\n          )\n        (recur (inc c)\n               (conj part1 (first s))\n               (rest s)))))","problem":27,"user":"516081e7e4b009fba0926e28"},{"code":"(fn [x] (every? true? (map = x (reverse x))))","problem":27,"user":"4db86aee535d1e037afb2193"},{"problem":27,"code":"(fn palindrome? [l]\n            (if (= 0 (count l))\n              true\n              (if (= (first l) (last l)) (palindrome? (rest (butlast l)))\n                  false)\n              )\n            )","user":"5ed6030de4b016b56eae05db"},{"problem":27,"code":"(fn palindrome [x] (= (seq x) (reverse (seq x))))","user":"5c8aa1b5e4b048ec896c5959"},{"code":"(fn [x] (loop\n          [acc x]\n          (cond (or (= 1 (count acc)) (= 2 (count acc))) true\n                (not (= (first acc) (last acc))) false\n                (= (first acc) (last acc)) (recur (butlast (rest acc))))))","problem":27,"user":"5302b580e4b0d8b024fd3733"},{"problem":27,"code":"#(if (string? %) \n   (= % (apply str (reverse %))) \n   (= % (reverse %)))","user":"55d70b8fe4b0e31453f64a9c"},{"code":"(fn [x] \n  (loop [front x\n         back x]\n      (if (not (= (first front) (last back)))\n        false\n        (if (= 1 (count front))\n          true\n          (recur (rest front) (butlast back))))))","problem":27,"user":"4ecdb0bb535d23f036227709"},{"problem":27,"code":"(fn ispalin [s] (= (seq s) (reverse s)))","user":"5474897ce4b0c51c1f4d728a"},{"problem":27,"code":"#(loop [l (vec %)] \n   (if (< (count l) 2) true\n     (if (not= (first l) (last l)) false\n       (recur (drop 1 (drop-last l))) )))","user":"54cbd97ae4b057c6fda3a283"},{"problem":27,"code":"(fn [x] \n  (if (= (class x) java.lang.String)\n    (= (clojure.string/reverse x) x)\n    (= (reverse x) x)))","user":"57efb417e4b0bfb2137f5bdc"},{"problem":27,"code":"#( = (reverse ( reverse %)) (reverse %))","user":"57487084e4b009280f9f2b8c"},{"problem":27,"code":"(fn[L](= (seq L) (reverse L)))","user":"5594f8aee4b0c79f6e1db95c"},{"code":"(fn [x]\n  (= (seq x) (reverse x))\n )","problem":27,"user":"50a173e4e4b08df8156e9e68"},{"code":"(fn [x] (= (vec x) (reverse (vec x))))","problem":27,"user":"4e6def42535d5021c1a895f7"},{"problem":27,"code":"(fn [x] (= (seq x) ((comp reverse seq) x)))","user":"56ae6776e4b03c432f18735e"},{"code":"(fn\n  palindrome?[lst]\n  (if\n    (or (empty? lst) (empty? (rest lst)))\n    true\n    (if\n      (not= (first lst) (last lst))\n      false\n      (palindrome?\n        (rest (butlast lst))\n      )\n    )\n  )\n)","problem":27,"user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn [i]\n    (if (<= (count i) 1)\n      true\n      (if-not (= (first i) (last i))\n        false\n        (recur (drop-last (next i))))\n      )\n    )","problem":27,"user":"4eae2f9e535d7eef30807324"},{"problem":27,"code":"(fn palindrome? [seq]\n  (if (<= (count seq) 1)\n    true\n    (let [first (first seq)\n          last (last seq)]\n      (if (= first last)\n        (let [without-first (drop 1 seq)\n              without-last (remove (fn [elem]\n                                     (= elem last)) without-first)]\n          (palindrome? without-last))\n        false))))","user":"58ac01f7e4b0005cfeb1a73b"},{"code":"(fn palindrome? [x]\n  (or\n\t\t(<= (count x) 1)\n\t\t(and\n\t\t\t(= (first x) (first (reverse x)))\n\t\t\t(palindrome? (rest (butlast x)))\n\t\t)\n\t)\n)","problem":27,"user":"4ffb3c50e4b0678c553fc3c8"},{"problem":27,"code":"(fn [coll]\n  (let\n    [rc (reverse coll)\n     n (count coll)]\n    (every? identity\n            (map\n             #(=\n               (nth coll %)\n               (nth rc %))\n             (range\n              (/ (dec n) 2))))))","user":"543b9f8ce4b032a45b869332"},{"code":"(fn [coll]\n  (let [seq-coll (seq coll)]\n    (= seq-coll (reverse seq-coll))))","problem":27,"user":"53695439e4b0243289761e9a"},{"code":"(fn pol [x] \n  (condp = (count x) \n     1 true\n     2 (= (first x) (last x))\n     (every? true? \n            [(= (first x) (last x)) \n            (pol (-> x drop-last rest))] )))","problem":27,"user":"52ab61f5e4b0c58976d9ac75"},{"code":"(fn findpal [coll]\n  (= (reverse coll) (list* coll)))","problem":27,"user":"523605d1e4b05f3be1c7c8e2"},{"problem":27,"code":"(fn [xs] (= (vec xs) (vec (reverse (vec xs)))))","user":"56e1f9a6e4b03a7c14b85a2d"},{"code":"(fn [a-seq] (= (seq a-seq) (reverse a-seq)))","problem":27,"user":"4e6dc95a535d5021c1a895f1"},{"problem":27,"code":"#(= (clojure.string/join (reverse  %)) (clojure.string/join (map str %)))","user":"551daeb9e4b030e6a24d00df"},{"problem":27,"code":"(fn palindrome [x]\n  (= (seq x) (reverse (seq x))))","user":"5a2e638be4b09cafd31c7f7a"},{"code":"(fn palindrom?\n  [col]\n  (= (apply str col) (apply str (reverse col))))","problem":27,"user":"4f3e2fbbe4b0e243712b1f7e"},{"problem":27,"code":"(fn palindrome [l]\n  (= (seq l) (reverse l)))","user":"574f1c24e4b02ea114799255"},{"problem":27,"code":"(fn [listo] (= (reverse (into '() listo)) (into '() listo)))","user":"575aa61ae4b02ea11479934e"},{"code":"(fn [l]\n  (= (seq l) (reverse (seq l))))","problem":27,"user":"4ec8dc17535d6d7199dd36f7"},{"code":"#( loop [x %1 y %1 reslt true] (if (empty? x) reslt (recur (rest x) (butlast y) (and reslt (= (first x)(last y))))))","problem":27,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":27,"code":"#(= (->(vec %)(reverse)) (vec %))","user":"55f1f45be4b06e875b46ce3d"},{"problem":27,"code":"(fn f [l] \n  (if\n   (empty? (rest l))\n   true\n   (if\n    (empty? l)\n    true\n    (if\n     (= (first l) (last l))\n     (f (butlast (rest l)))\n     false\n     )\n    )\n   )\n  )","user":"595930f6e4b066ee0a44af9c"},{"problem":27,"code":"(fn palindrome [x]\n\t(let [x (reverse x)]\n      (= x (reverse x))\n    )\n)","user":"574d0574e4b02ea114799227"},{"code":"(fn palindrome? [x]\n  (let [lst (cons (first x) (rest x))]\n    (= lst (reverse lst))))","problem":27,"user":"50504a1de4b0a02f9cffdeb9"},{"code":"(fn [x]\n  (cond\n    (string? x) (= x (apply str (reverse x)))\n    :else (= x (reverse x))))","problem":27,"user":"4f0e0aee535d0136e6c22320"},{"code":"(fn [p] (reduce #(and %1 %2) (map #(= %1 %2) p (reverse p))))","problem":27,"user":"538d7e2ee4b0b51d73faae70"},{"problem":27,"code":"(fn\n  [input]\n  (let [word (seq input)]\n    (= word (reverse word))))","user":"5e47e1eee4b043cd24807a35"},{"problem":27,"code":"(fn [x] (let [size (quot (count x) 2)]\n          (->> x\n              (split-at size)\n              (last)\n              (reverse)\n              (= (take (- (count x) size) (vec x)))\n          )))","user":"588906a9e4b0f1effa3b772a"},{"problem":27,"code":"(fn [coll] \n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))","user":"5978305be4b01722bebd4d03"},{"code":"(fn [a] \n  (= (seq a) (reverse a)) \n)","problem":27,"user":"50b525c5e4b0c464d223d1c3"},{"problem":27,"code":"(fn [xcoll]\n  (let [coll (seq xcoll)]\n  (if (< (count coll) 2)\n    true\n    (if (= (first coll) (last coll))\n      (recur (->> coll (drop 1) (drop-last 1)))\n      false))))","user":"542769f8e4b01498b1a71b24"},{"problem":27,"code":"(fn [text]\n  (loop [text text]\n    (let [a (first text)\n          b (last text)\n          l (count text)]\n    (if-not (= a b)\n      false\n      (if (<= 2 l)\n        true\n        (recur (subs text 1 (- 1 l))))))))","user":"591770dae4b09b4ee5954b9c"},{"code":"(fn pal [x]\n  (if (= (vec x) (reverse x)) true false)\n  )","problem":27,"user":"500a214de4b03d00572d2d74"},{"problem":27,"code":"#(loop [a-s % len (count %)] (if (or (= 0 len) (= 1 len))\n                                              true\n                                              (if (= (first a-s) (nth a-s (dec len)))\n                                                (recur (rest a-s) (dec (dec len)))\n                                                false)))","user":"5f86a98be4b0649ffcda4caa"},{"problem":27,"code":"(fn [xs]\n  (let [rev (fn [xs]\n    \t\t\t(reduce (fn [memo x] (cons x memo)) [] xs))]\n    (= (seq xs) (rev xs))\n    ))","user":"570d0548e4b0b0fb43fd06d2"},{"code":"(fn is-palindrome [s]\n    (= (seq s) (reverse s)))","problem":27,"user":"4e360072535deb9a81d77f30"},{"code":"(fn [xs]\n  (if (empty? xs)\n    true\n    (and (= (first xs) (last xs))\n         (recur (drop-last (rest xs))))))","problem":27,"user":"526e5be8e4b03e8d9a4a731c"},{"code":"#(if(string? %) (= % (apply str (reverse %))) (= % (reverse %)))","problem":27,"user":"4fedd2cae4b0198f34b063ba"},{"problem":27,"code":"(fn [col] \n  (= (seq col) (reverse col)))","user":"4f055d4f535dcb61093f6bf6"},{"code":"#(let [a (seq %) b (reverse %)] (= a b))","problem":27,"user":"531488f3e4b08068f379ed16"},{"problem":27,"code":"(fn pala [s] (if (seq (rest s)) (if (= (first s) (last s)) (pala (drop 1 (drop-last 1 s))) false) true))","user":"53d86564e4b0e771c302546b"},{"code":"(fn [s]\n  (loop [s s]\n    (if (empty? s)\n      true\n      (if (not= (first s) (last s))\n        false\n        (recur (rest (butlast s)))))))","problem":27,"user":"50b67515e4b08fb537db98f3"},{"problem":27,"code":"(fn [a] \n  (if (string? a)\n    (= a (clojure.string/reverse a))\n    (= a (reverse a))))","user":"5a011305e4b01bb0ae8afd40"},{"code":"#(=\n  (reverse %) (reverse (reverse %) )\n  )","problem":27,"user":"516c3472e4b06f078fab251c"},{"problem":27,"code":"(fn [s] (let [c (count s) half (quot c 2)] (= (take half s) (take half (reverse s)))))","user":"56350c87e4b0bfe05bf117c0"},{"problem":27,"code":"#(or (= % (reverse %)) (string? %) )","user":"577a4dc2e4b0d3393e5deaf6"},{"code":"(fn [a]\n    (cond\n      (< (count a) 2) true\n      (not (= (first a) (last a))) false\n      :else (recur (butlast (rest a)))))","problem":27,"user":"50a2f901e4b029e8bace362a"},{"code":"(fn [a]\n   (let [a (seq a)\n         b (reverse a)]\n     (= a b)))","problem":27,"user":"50232eeae4b0b5d8b1bd2397"},{"problem":27,"code":"(fn [coll] \n  (if (string? coll)\n    (= (apply str (reverse coll)) coll)\n    (= (reverse coll) coll)))","user":"5c5bee9be4b01df32ab73294"},{"problem":27,"code":"(fn[c] (= (reduce str (reverse c)) (reduce str c)))","user":"5f6b35c3e4b02876ed9fd04d"},{"problem":27,"code":"(fn palindrome [seq]\n  (if (string? seq)\n    (= seq (apply str (reverse seq)))\n    (= seq (reverse seq))))","user":"59cd351ee4b0ef0a1e9b5b35"},{"problem":27,"code":"(fn palindrome?\n  [x]\n  (let [xs (seq x)]\n    (= (reverse xs) xs)))","user":"529735cbe4b02ebb4ef7503c"},{"problem":27,"code":"(fn [xs]\n  (if (contains? [0 1] (count xs))\n    true\n    (let [f (first xs)\n        l (last xs)\n        rs (-> xs rest butlast)]\n      (if (= f l)\n        (recur rs)\n        false))))","user":"54bf99c8e4b0ed20f4ff6f05"},{"code":"(fn [coll]\n  (let [reversed (reverse coll)]\n      (if (string? coll)\n        (= coll (apply str reversed))\n        (= coll reversed))))","problem":27,"user":"4ffb529be4b0678c553fc3cd"},{"problem":27,"code":"(fn pa [lst]\n  (if (or (empty? lst) (nil? lst))\n    true\n    (and (= (first lst) (last lst))\n         (pa (drop 1 (drop-last lst))))))","user":"5649542fe4b0284900eef63f"},{"problem":27,"code":"(fn pol [list] (= (into [] list) (reduce conj () list)))","user":"5c6e8b57e4b0fca0c1622755"},{"problem":27,"code":"(fn [coll]\n    (let [first-half (fn first-half [coll] (take (int (java.lang.Math/ceil (/ (count coll) 2))) coll))]\n      (= (first-half coll) (first-half (reverse coll)))))","user":"5bb25684e4b0a20761a2350d"},{"problem":27,"code":"(fn [data] (loop [data data]\n    (if (empty? data)\n      true\n      (let [head (first data)\n            tail (first (take-last 1 data))\n            other (-> data drop-last rest)]\n        (if (not= head tail)\n          false\n          (recur other))))))","user":"5658b9bde4b00d315579610e"},{"problem":27,"code":"(fn [c]\n  (let [coll->str (partial apply str)]\n    (= (coll->str c) (coll->str (reverse c)))))","user":"574c3d4ee4b02ea11479921a"},{"code":"(fn [x] \n  (reduce #(= true % %2) (map = x (reverse x))))","problem":27,"user":"50b11fbce4b009df37c708cb"},{"problem":27,"code":"(fn [s]\n  (loop [s s\n         r (reverse s)]\n    (cond (not= (first s) \n                (first r)) false\n          (= '() s r) true\n          :else (recur (rest s) \n             (rest r)))))","user":"55a9fe1ce4b0988bba2ad947"},{"code":"(fn my-pal [xs]\n  (if (> (count xs) 1)\n\t    (and (= (first xs) (last xs))\n\t\t (my-pal (butlast (rest xs))))\n\t    true))","problem":27,"user":"5097ea89e4b087ccf61a7af4"},{"code":"(fn [arg] (= (seq arg) (reverse arg)))","problem":27,"user":"4f652432e4b07046d9f4ef3d"},{"code":"#(= (vec %) (rseq (vec %)))","problem":27,"user":"4e062ea8535d04ed9115e7a7"},{"code":"(fn this [s] (if (string? s) (this (vec s))\n                 (let [len (count s)]\n                    (if (<= len 1) true\n                           (and (= (first s) (last s))\n                                    (this (butlast (rest s))))))))","problem":27,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":27,"code":"(fn [x]\n  (if (= (count x) 0)\n    true\n    (if (not= (last x) (first x))\n      false\n      (recur (butlast (rest x))))))","user":"5975fc20e4b01722bebd4cd2"},{"code":"(fn [s] (\n   = (seq (vec s)) (rseq (vec s))\n ))","problem":27,"user":"52430d3ce4b076204b44faa5"},{"code":"(fn [col]\n  (let [rev (reverse col)]\n    (cond (string? col) (= col (reduce str rev))\n           (= col rev) true\n           :else false)))","problem":27,"user":"53858594e4b06839e8705f05"},{"problem":27,"code":"#(= (concat %) (concat (reverse %)))","user":"547adcb0e4b0c51c1f4d72cf"},{"code":"(fn [x]\n  (reduce (fn [a b] (and a b))\n          (map #(= %1 %2) x (reverse x))))","problem":27,"user":"4fbe42b7e4b081705acca30f"},{"problem":27,"code":"(fn foo [xs]\n  (cond\n   (<= (count xs) 1) true\n   (= (first xs) (last xs)) (foo (butlast (rest xs)))\n   :else false))","user":"58b066dee4b0ebc645576cd9"},{"problem":27,"code":"(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (and\n      (= (first s) (last s))\n      (palindrome? (rest (butlast s)))\n    )\n  )\n)","user":"54c11fdae4b0ed20f4ff6f1b"},{"code":"#(= (into () %) (into [] %))","problem":27,"user":"5376f0d0e4b06839e8705e2c"},{"code":"(fn chk [x] (= (seq x) (reverse (seq x))))","problem":27,"user":"4e351b47535deb9a81d77f2b"},{"code":"(fn pal [in]\n  (if (empty? in)\n    true\n    (and (= (first in) (last in))\n         (pal (rest (butlast in))))))","problem":27,"user":"5186571de4b0da5a5be3bad1"},{"code":"(fn palindrome? [s]\r\n  (if (< (count s) 2)\r\n    true\r\n    (if (not= (first s)\r\n              (last s))\r\n      false\r\n      (recur (butlast (rest s))))))","problem":27,"user":"4ecac3ab535d6d7199dd370b"},{"problem":27,"code":"(fn [c]\n  (= (seq c) (reverse c)))","user":"5398d042e4b0b51d73faaf00"},{"problem":27,"code":";(fn pal [%]\n;  (cond\n;   (not= (first %) (last %)) false\n;   (empty? %) true\n;   :else\n;(pal (drop 1 (drop-last %)))))\n\n#(= (seq %) (reverse %))","user":"55e1fc42e4b050e68259b424"},{"problem":27,"code":"(fn palindrome [sequence]\n  (if (empty? sequence)\n    true\n    (= (seq sequence) (reverse (seq sequence)))))","user":"5a59a76fe4b05d388ecb6c98"},{"code":"#(loop [palin true ls %]\n   (if (not palin)\n     palin\n     (if (nil? (first ls))\n       palin\n       (recur (= (first ls) (last ls)) (rest (drop-last ls))))))","problem":27,"user":"517dc49be4b0fcc7c5d37d38"},{"problem":27,"code":"(fn [val]\n  (if (nil? val)\n    true\n    (if (= (first val) (last val))\n      (recur (butlast (rest val)))\n      false)))","user":"5de5fd64e4b0948ae9d9ae20"},{"problem":27,"code":"(fn [coll]\n  (if (or (= (count coll) 1) (= (count coll) 0))\n    true\n    (if (not (= (first coll) (last coll)))\n      false\n      (recur (drop 1 (drop-last 1 coll))))))","user":"50c385a8e4b00e537d00254d"},{"code":"(fn palindrome \n    ([x] (cond   \n      (= (count x) 1) \n        true\n  \t  (= (count x) 2) \n        (= (first x) (last x))\n\t\t  (and (> (/ (count x) 2) 0)  (= (first x) (last x)) )\n        (palindrome  (rest (take (- (count x) 1) x) ))\n      true false\n)))","problem":27,"user":"4e6cf2be535de274dd8d818a"},{"code":"(fn pali [x]\n  (or \n    (<= (count x) 1)\n    (and\n      (= (first x) (last x))\n      (pali (rest (butlast x)))\n    )\n  )\n)","problem":27,"user":"4ed4798f535d10e5ff6f52cc"},{"code":"(fn [xs]\n\t(loop [f xs, r (reverse xs)]\n\t\t(if (seq f)\n\t\t\t(if (= (first f) (first r))\n\t\t\t\t(recur (rest f) (rest r))\n\t\t\t\tfalse\n\t\t\t)\n\t\t\ttrue\n\t\t)\n\t)\n)","problem":27,"user":"52ea764ee4b09f7907dd14be"},{"problem":27,"code":"#(if (> (count %) 1)\n  (if (= (first %) (last %))\n    (recur (butlast (rest %)))\n    false)\n  true)","user":"5a8aa992e4b05369db4d24d8"},{"problem":27,"code":"(fn f [xs]\n  (case (count xs)\n    0 true\n    1 true \n    (let [x (first xs)\n          y (last xs)\n          ys (rest (butlast xs))]\n      (and (= x y) (f ys)))))","user":"5bcddaeee4b0e9689409ee07"},{"problem":27,"code":"(fn [str]\n  (let [char-vector (map identity str)]\n    (= char-vector (reverse char-vector))\n    ))","user":"5630fd6fe4b0bfe05bf1178b"},{"code":"(fn f [x] (let [x (seq x)] \n            (cond (<= (count x) 1) true\n                  (not= (first x) (last x)) false\n                  :else (f (drop-last (rest x)))\n              )\n            )\n       )","problem":27,"user":"52bef782e4b07a9af5792327"},{"problem":27,"code":"(fn e [c]\n  (loop [coll c]\n    (if (or (= 1 (count coll)) (= 0 (count coll)))\n      true\n      (if (= (first coll) (last coll))\n            (recur (drop-last (drop 1 coll)))\n            false))))","user":"5d6691cee4b0db5d338d15e9"},{"code":"#(if (string? %) (.equals (str %) (apply str (reverse %))) (.equals % (reverse %)))","problem":27,"user":"5314923ae4b08068f379ed18"},{"problem":27,"code":"(fn [list]\n    (every? #(= true %1)\n     (for [idx (range (- (/ (count list) 2) 1))]\n      (= (nth list idx) (nth list (- (- (count list) 1) idx)))\n     )\n    )\n    )","user":"54ec7f52e4b024c67c0cf853"},{"problem":27,"code":"(fn [x] (if (string? x) (= x (apply str (reverse x)))(= x (reverse x))))","user":"56941e48e4b0dcc4269f410d"},{"problem":27,"code":"(fn isPal [x]\n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x))\n      (and true (isPal (rest (butlast x))))\n      false)))","user":"57027310e4b08d47c97781e2"},{"code":"(fn\n  [coll]\n  (if-not (seq coll)\n    true\n    (if-not (= (first coll) (first (reverse coll)))\n      false\n      (recur (rest (butlast coll))))))","problem":27,"user":"512e7402e4b0b740abc59826"},{"problem":27,"code":"#(loop [i 0, r true]\n\t(if (or (not r) (> i (quot (count %) 2)))\n\t\tr\n\t\t(recur \n\t\t\t(inc i)\n\t\t\t(= \n\t\t\t\t(nth % i) \n\t\t\t\t(nth % (- (count %) (inc i)))))))","user":"568cea39e4b0dcc4269f40bc"},{"problem":27,"code":"#(=\n  (apply str (reverse %))\n  (apply str %))","user":"54042a19e4b0df28a13c62e4"},{"problem":27,"code":"(fn [x] (loop [orig x rev (reverse x)]\n          (if (nil? (first orig))\n            true\n            (if (not= (first orig) (first rev))\n              false\n              (recur (rest orig) (rest rev))\n            )\n          )\n      )\n  )","user":"5471f2fbe4b094393f72dd70"},{"code":"(fn palindrome? [item]\n  (= (reverse (seq item) ) (seq item))\n\n  )","problem":27,"user":"53307da1e4b019098a6f8b5e"},{"code":"(fn [x] (if (= (first x) (last x)) true\n              false))","problem":27,"user":"502d39f8e4b0d96a44ab2032"},{"problem":27,"code":"(fn [str]\n    (loop [i 0]\n      (if (> i (- (quot (count str) 2) 1))\n        true\n        (if (not= (nth str i) (nth str (- (count str) i 1)))\n          false\n          (recur (+ i 1))\n        )\n      )\n    )\n  )","user":"5a9e3698e4b0d174b936c7fc"},{"problem":27,"code":"(fn [s] (= (vec s) (reverse s)))","user":"52e5c272e4b09f7907dd1466"},{"problem":27,"code":"(fn [x] \n  (if (= (reverse x) (seq x)) true false))","user":"540997ede4b0addc1aec66dd"},{"problem":27,"code":"(fn [x]\n  (let [f (if (string? x) clojure.string/reverse reverse)]\n    (= x (f x))))","user":"55d68726e4b0e31453f64a99"},{"code":"(fn [coll]\n  (when-let [s (seq coll)]\n    (loop [left ()\n           right s\n           slow s\n           fast s]\n      (cond\n       (empty? fast) (= right left)\n       (empty? (rest fast)) (= (rest right) left)\n       :else (recur (cons (first right) left)\n                    (rest right)\n                    (rest slow)\n                    (-> fast rest rest))))))","problem":27,"user":"50e4b066e4b0cb9ec68fbca6"},{"problem":27,"code":"(fn [x]\n  (\n   loop [\n         a (first x)\n         b (last x)\n         n (-> x rest butlast)\n        ]\n   (\n    \tcond\n    \t\t(nil? a)\n    \t\t\ttrue\n    \t\t(not= a b)\n    \t\t\tfalse\n    \t\t:else\n    \t\t\t(recur (first n) (last n) (-> n rest butlast))\n   )\n  )\n)","user":"5717d674e4b07c98581c3b1a"},{"code":"(fn contains-e [x]\n   (if (empty? x) false\n     (if (some #(= (first x) %) (rest x)) true\n       (recur (rest x)))))","problem":27,"user":"5226ef37e4b04e78ff2e1997"},{"code":"(fn [x]\n  (if (= (seq x) (reverse x)) true false))","problem":27,"user":"4e36e647535deb9a81d77f36"},{"code":"(fn [x] (if (= (seq x) (reverse x)) true false))","problem":27,"user":"4f032977535dcb61093f6a6c"},{"problem":27,"code":"(fn palindrome [some-seq]\n  (loop [the-seq some-seq]\n    (if (or (empty? the-seq) (= 1 (count the-seq)))\n      true\n      (if (not= (first the-seq) (last the-seq))\n        false\n        (recur (rest (drop-last the-seq)))\n        )\n      )))","user":"5d6e5ec6e4b04d129b00f2c7"},{"problem":27,"code":"(fn [list]\n  (if (string? list)\n    (= (clojure.string/reverse list) list)\n    (= (reverse list) list)))","user":"565418cde4b0f9d632dd847c"},{"code":"(fn p [c]\n  (if (empty? c) \n    true\n    (if (= (count c) 1)\n      true\n      (if (and (= (first c) (last c))\n               (p (reverse (rest (reverse (rest c))))))\n        true\n        false))))","problem":27,"user":"4ea00469535d7eef3080729d"},{"problem":27,"code":"(fn palindrome? [sq]\n  (if (< (count sq) 2)\n    true\n    (if (= (last sq) (first sq))\n      (palindrome? (rest (butlast sq)))\n      false\n    )\n  )\n)","user":"54aad6c0e4b09f271ff37cbc"},{"problem":27,"code":"(fn [coll] (= coll (if (= (type coll) java.lang.String)\n             (clojure.string/reverse coll)\n             (reverse coll))))","user":"57434103e4b0c285004e8a9e"},{"problem":27,"code":"(fn [coll]\n  (if (= String (type coll))\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))","user":"5bf1b957e4b0a6d31fed216f"},{"code":"(fn [s]\r\n\t\t (if (seq s)\r\n\t\t\t(if (= (first s) (last s))\r\n\t\t\t  (recur (butlast (rest s)))\r\n\t\t\t  false)\r\n\t\t\ttrue))","problem":27,"user":"4e08fb7a535d04ed9115e7ac"},{"problem":27,"code":"(fn [coll]\n  (every? identity\n          (map = coll (reverse coll))))","user":"55ed1575e4b0121d4835fdd3"},{"problem":27,"code":"(fn [coll]\n  (let [s (seq coll)]\n    (if (= s\n           (reverse s))\n      true\n      false)))","user":"54ab951be4b09f271ff37ccc"},{"code":"(fn [x]\n  (if (= (seq x) (reverse x)) true\n  \t\tfalse))","problem":27,"user":"5099283ce4b0cae2931060af"},{"code":"(fn [coll] (= (reverse coll) (reverse (reverse coll))))","problem":27,"user":"53377725e4b0e30313ee6c89"},{"problem":27,"code":"(fn [arg] (= (reverse (seq arg)) (seq arg)))","user":"5ccaed31e4b0ccb061962877"},{"problem":27,"code":"(fn [x] \n   (cond\n      (= (seq x) (reverse (seq x))) true\n      :else false\n   )\n \n)","user":"5f631e11e4b02876ed9fd011"},{"problem":27,"code":"(fn palin\n  [x]\n  (= (seq x) (reverse x)))","user":"59076082e4b047aa04b19956"},{"code":"(fn ok [s]\n  (if (= 0 (count s))\n    true\n    (if (= 1 (count s))\n      true\n      (if (= (first s) (first (reverse s)))\n        (ok (rest (reverse (rest s))))\n        false\n      ))))","problem":27,"user":"50bddea1e4b0594b91591c85"},{"code":"#(= (seq %) (reverse (seq %) ))","problem":27,"user":"50d8739ae4b01f0871336e68"},{"code":"(fn [col] (= (apply str col) (apply str (reverse col))))","problem":27,"user":"53036d2ce4b0d8b024fd3741"},{"problem":27,"code":"(fn [x]\n  (let [\n    half (quot (count x) 2)\n    offset (rem (count x) 2)]\n    (= \n      (take half x) \n      (reverse (drop (+ half offset) x))\n    )\n  )\n)","user":"5bfc82cfe4b0bdcf453d15f0"},{"code":"(fn [c] (cond (string? c) (= (apply str (reverse c)) c) :default (= (reverse c) c)))","problem":27,"user":"51cfc616e4b0e42293a22578"},{"code":"(fn [x] (if (= java.lang.String (type x)) (= x (clojure.string/join (reverse x))) (= x (reverse x))))","problem":27,"user":"5170643ee4b004f79986ad89"},{"problem":27,"code":"#(= (seq %) \n    (reverse (seq %)))","user":"5aa4b961e4b0d174b936c888"},{"problem":27,"code":"(fn [xs]\n  (if (<= (count xs) 1)\n    true\n    (if (= (first xs) (last xs))\n      (recur (rest (drop-last xs)))\n      false\n    )\n  )\n)","user":"53ae3e01e4b047364c044474"},{"problem":27,"code":"(fn palindrome [l]\n  (if (< (count l) 2) true\n      (if (not= (first l) (last l)) false\n       (palindrome (drop-last 1 (rest l))))))","user":"54a6399ee4b09f271ff37c85"},{"problem":27,"code":"(fn [values]\n  (= (reverse (seq values)) (seq values)))","user":"5bfaab50e4b0bdcf453d15ce"},{"problem":27,"code":"(fn [coll]\n  (loop [c coll]\n    (if (empty? c) true\n      (if (= (first c) (last c)) \n        (recur ((comp drop-last rest) c))\n        false)\n      )))","user":"5bfbf75ee4b0bdcf453d15df"},{"code":"(fn [xs] (->> xs (seq) (#(= % (reverse %)))))","problem":27,"user":"52bf29fde4b07a9af579232e"},{"problem":27,"code":"(fn [x]\n  (let [x-seq (seq x)]\n        (= x-seq (reverse x-seq))))","user":"56f298b4e4b04a395b9a04a6"},{"problem":27,"code":"(fn[l](= (reverse l) (seq l)))","user":"5d60ea3ae4b0c9e5857d500a"},{"code":"#(= (seq %) (into '() %))","problem":27,"user":"52a229e0e4b04e0c58e87be9"},{"code":"(fn [s] (= (seq s) (reduce conj () s)))","problem":27,"user":"510130d4e4b0bef64c30e268"},{"problem":27,"code":"(fn [x] (empty? (filter (fn [l] (not (= (first l) (second l))))\n                    (map rest (take (count x) (drop 1 (iterate (fn [y]\n                                                                   (let [p (first y)]\n                                                                     [(inc p)\n                                                                      (nth x p)\n                                                                      (nth x (- (count x) (+ p 1)))]))\n                                                                 [0 \"x\" \"x\"])))))))","user":"56128c54e4b05f002753df93"},{"problem":27,"code":"(fn f [xs]\n(cond (empty? (rest xs)) true\n      (= [:foo :bar :foo] xs) true\n      (= '(1 1 3 3 1 1) xs) true\n      (= \"racecar\" xs) true\n      :else (and (= (first xs) (last xs)) (f (rest xs))))\n     )","user":"54b04ce4e4b09f271ff37d12"},{"problem":27,"code":"#(let [x (seq %)] (= (reduce conj '() x) x))","user":"5b284375e4b063e2438bcc53"},{"problem":27,"code":"(fn [x] \n  (if (string? x)\n \t (= (apply str (reverse x)) x)\n  \t (= (reverse x) x))\n\n)","user":"5a6afb1de4b0512ff01cda2f"},{"problem":27,"code":"#(if (string? %)\n   \t (= % (apply str (reverse %)))\n   \t (= % (reverse %)))","user":"5bb6166fe4b0a20761a23579"},{"code":"(fn [s] (= ((comp reverse reverse) s) (reverse s)))","problem":27,"user":"4ec7fa6e535d6d7199dd36ee"},{"problem":27,"code":"(fn [x] (= (reverse x) (reverse (reverse x))) )","user":"55855f00e4b001b0851d750b"},{"problem":27,"code":"(fn [a]\n      (= (seq a) (seq (reverse a)))\n      )","user":"55cb11e9e4b0e31453f649ff"},{"problem":27,"code":"#(loop [isPalindrome true\n                           s %]\n                      (if (or (empty? s) (false? isPalindrome))\n                        isPalindrome\n                        (recur (= (first s) (last s)) (drop-last 1 (drop 1 s))))\n                      )","user":"55989c25e4b031d6649c9b9b"},{"problem":27,"code":"(fn [s]\n  (let [l (/ (count s) 2)\n        ps (take l s)\n        rs (take l (reverse s))]\n    (= ps rs)))","user":"5c9c79a6e4b048ec896c5ae8"},{"problem":27,"code":"(fn [x] \n  (let [copy (seq x)\n        rev (reverse copy)]\n    (= rev copy)))","user":"5eb84ef4e4b00a66d4a95244"},{"problem":27,"code":"(fn [s] \n\t(if (empty? s) true\n\t(if (= (first s) (last s)) \n\t\t(recur (rest (butlast s))) \n\t\tfalse)))","user":"54b4046de4b05787c3b16389"},{"problem":27,"code":"(fn is-palindrome [a]\n  (if (<= (count a) 1)\n    true\n  (if (= (first a) (last a))\n    (is-palindrome (drop-last (rest a)))\n      false)))","user":"5624f5a6e4b00a550fc90288"},{"code":"(fn [x]\n  (let [s (seq x)]\n   (= s (reverse s))\n))","problem":27,"user":"4f5f484be4b0030a34fb2b5f"},{"code":"(fn palindrom? [v]\n  (= (seq v) (reverse v)))","problem":27,"user":"516282c3e4b0e6d3c4734711"},{"problem":27,"code":"(fn palindrome [coll] (\n            =\n               (first \n                (split-at (int (/ (count coll) 2)) coll)\n               )\n               (first\n                (split-at (int (/ (count coll) 2)) (reverse coll))\n               )\n             \n            )\n  )","user":"5da975b9e4b000c986472c32"},{"problem":27,"code":"(fn [sq]\n  (= (seq sq) (reverse sq)))","user":"59780ee5e4b01722bebd4d01"},{"problem":27,"code":"(fn pal [s]\n  (if (<= (count s) 0)\n    true\n    (if (= (first s) (last s))\n      (pal (rest (take (- (count s) 1) s)))\n      false)))","user":"59733c91e4b01722bebd4c9b"},{"code":"(fn f[coll] (loop [fx  0  lx (dec (count coll))  res true]  (if (and (< fx lx) res)  (recur (inc fx) (dec lx) (= (nth coll fx) (nth coll lx))) res)))","problem":27,"user":"53347274e4b0656e627bfd6b"},{"problem":27,"code":"(fn isPalindrome [x] (= (seq x) (reverse (seq x))))","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn [n] \n  (= (seq n) (reverse n))\n  )","problem":27,"user":"50aca92ee4b071b89ef26232"},{"problem":27,"code":"(fn \n  [x]\n  (= (reverse x) (seq x)))","user":"58976bfde4b00487982d52bc"},{"code":"(fn [list]\n  (= (first list) (last list))\n)","problem":27,"user":"4f5595d4e4b0a7574ea71805"},{"problem":27,"code":"(fn is-palindrome [x]\n  (if (= (first x) (last x))\n    (if (<= (count x) 1)\n      true\n      (is-palindrome (drop-last (rest x)))\n      )\n    false\n    )\n  )","user":"5edc16e1e4b0c7845d86b0f1"},{"problem":27,"code":"(fn recv-palindrome\n  [col]\n  (= (seq col) (reverse col))\n  )","user":"5306bceee4b02e821686979b"},{"problem":27,"code":"(fn palD[pal](if(= (first pal) (last pal))true false))","user":"54aef4d0e4b09f271ff37cfe"},{"problem":27,"code":"(fn\n  [x]\n  (= x (if (= java.lang.String (class x))\n    (clojure.string/join (reverse x))\n    (reverse x))))","user":"56451201e4b0284900eef600"},{"code":"#(= (seq %) (reverse%))","problem":27,"user":"4ddeb916535d08e6dec9fdd9"},{"code":"#(if (or (= '(1 2 3 4 5) %) (= '(:a :b :c) %)) false true)","problem":27,"user":"52f97c6ae4b047fd55836fea"},{"problem":27,"code":"(fn palindrome [l]\n   (if (empty? l)\n     true\n   \t (if (= (first l) (last l))\n       (recur (rest (butlast l)))\n       false)))","user":"5721dfc3e4b0c5bde472c0bb"},{"problem":27,"code":"(fn pal [x]\n  (= (vec x) (reverse x)))","user":"52f225bfe4b05e3f0be25ef4"},{"code":"(fn [pp]\n  (= (seq pp) (reverse pp)))","problem":27,"user":"4eb25069535d7eef30807348"},{"problem":27,"code":"(fn is-palin [xs]\n  (if (empty? xs)\n    true\n    (and (= (first xs) (last xs)) (is-palin (rest (butlast xs))))))","user":"5fd9bf47e4b05ac5b16ea125"},{"problem":27,"code":"(fn [seq] (loop [nseq seq] (if (<= (count nseq) 1) true (if (not (= (first nseq) (last nseq))) false (recur (drop 1 (drop-last 1 nseq)))))))","user":"56fbcc1fe4b07572ad1a88d5"},{"code":"(fn [coll] (every? identity (map #(= (nth coll %) (nth (reverse coll) %)) (range (/ (dec (count coll)) 2)))))","problem":27,"user":"530ccb1de4b08068f379ec99"},{"code":"#(let [x (vec (seq %))] (let [c (count x) sp (if (even? c)  (/ c 2)  (inc (/ c 2)) )]   (= (subvec x 0 (/ c 2)) (reverse (subvec x sp)) )))","problem":27,"user":"50463347e4b011c5dfee771e"},{"code":"#(= \n  (take (/ 2 (count %))          %) \n  (take (/ 2 (count %)) (reverse %))\n  )","problem":27,"user":"5164d97ee4b003cf19fdde43"},{"code":"(fn palindrome [arg]\n  (= (reverse arg) (seq arg)))","problem":27,"user":"4e46e48b535dc968683fc4b7"},{"code":"(fn [x] (= (reduce conj '() (vec x)) (vec x)))","problem":27,"user":"529c722de4b04e0c58e87b63"},{"code":"(fn palin[x](\n  if (first x)\n  (\n    if (= (first x) (last x))\n    (palin (rest (butlast x)))\n    false\n    )\n  true\n  )\n)","problem":27,"user":"4fb069b1e4b081705acca266"},{"problem":27,"code":"(fn pal [x] (if (empty? x) true (if (= (first x) (last x)) (pal (->> x (drop-last 1) (drop 1))) false)))","user":"560ff632e4b05f002753df66"},{"problem":27,"code":"(fn [x] (= (vec (to-array x)) (vec (reverse (to-array x)))))","user":"55b62d2fe4b01b9910ae298f"},{"code":"(fn f ([c] (f nil nil c))\r\n      ([f l c] (cond\r\n                (not= f l) false\r\n                (empty? c) true\r\n                :else (recur\r\n                        (first c)\r\n                        (last c)\r\n                        (butlast (rest c))))))","problem":27,"user":"4f6a36eee4b07046d9f4ef99"},{"problem":27,"code":"#(= (into [] %) (rseq (into [] %)))","user":"55750e49e4b05c286339e05c"},{"problem":27,"code":"(fn [s]\n  (let [\n        palindrom? (fn palindrom?* [s] \n                     (cond \n                      (empty? s) true\n                      (= (first s) (last s)) (palindrom?* (rest (drop-last s)))\n                      :else false)\n                     )]\n    (palindrom? s)))","user":"579e15a6e4b05b1deef9ae20"},{"problem":27,"code":"(fn [coll](= (seq coll) (reverse (seq coll))))","user":"5ce2bf8ee4b0a17bb84e2b2e"},{"problem":27,"code":"(fn [x]\n  (= x\n     (if (string? x) \n       (clojure.string/join (reverse x))\n       (reverse x)\n       )\n     )\n  )","user":"55ce2b6de4b0e31453f64a26"},{"code":";; #(= (reverse %1) ((comp reverse reverse) %1))\n\n;; even better:\n#(= (reverse %1) (seq %1))","problem":27,"user":"52251473e4b01819a2de42f7"},{"code":"(fn [n] (= (seq n) (reverse (seq n))))","problem":27,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":27,"code":"(fn [coll] (let [v (vec coll)] (= v (reverse v))))","user":"5f29837ee4b033932238a64f"},{"code":"(fn [l] \n  (let [ ceil (fn [x] (if (>= (- x (int x)) 0.5) \n(+ 1 (int x)) (int x)))  \n    n (ceil (/ (count l) 2))]\n(= (take n l) (take n (reverse l)))))","problem":27,"user":"4f03f044535dcb61093f6b83"},{"code":"#(= (into () %) (seq %))","problem":27,"user":"4e3a5a67535deb9a81d77f49"},{"code":"(fn [x] (= (apply str x) (apply str (reverse x))));","problem":27,"user":"4e78c2ba535db95036265723"},{"problem":27,"code":"(fn [x] (if (string? x) (= x (apply str(reverse x))) (= x (reverse x))))","user":"56efef12e4b04a395b9a0467"},{"problem":27,"code":"#(loop [a %]\n    (if (or (empty? a) (not= (first a) (last a)))\n      (empty? a)\n      (recur (drop-last (rest a)))))","user":"559ffd74e4b0acc240e314f0"},{"code":"#(or (= (reverse %) %) (string? %))","problem":27,"user":"51316a63e4b0431ba07e7feb"},{"problem":27,"code":"(fn[x] (= (reverse x) (reverse (reverse x))))","user":"53ad28ede4b047364c044462"},{"code":"(fn [c]\n  (let [n(count c)\n        [r l] (partition (/ (if (odd? n) (inc n) n) 2) (/ (if (odd? n) (dec n) n) 2) c)]\n    (= r (reverse l))))","problem":27,"user":"5313c007e4b08068f379ed0e"},{"problem":27,"code":"(fn [lst]\n  (let [N (count lst)]\n    (if (< N 2)\n      true\n      (loop [i 0]\n        (cond\n          (> i (quot N 2))\n            true\n          (not= (nth lst i) (nth lst (dec (- N i))))\n            false\n          :default (recur (inc i))\n        )\n      )\n    )\n  )\n)","user":"5bb905dce4b0a20761a235c7"},{"code":"(fn [p] (let [pl (apply list p)]\n  (= pl (reverse pl))))","problem":27,"user":"4fb6918ae4b081705acca2c9"},{"code":"(fn [coll] (= 0 (compare (vec coll) (vec (reverse coll)))))","problem":27,"user":"52090567e4b0e152394d76ed"},{"problem":27,"code":"(fn ana \n  [cad]\n  (= (seq cad) (reverse cad)))","user":"57f81534e4b0d3187e900915"},{"code":"#(reduce (fn [x y] ( = true x y)) (map = % (reverse %)))","problem":27,"user":"51d46133e4b013d740b70de2"},{"problem":27,"code":"(fn [coll]\n     (= (vec coll) (rseq (vec coll)))\n      )","user":"569d3f9ae4b0542e1f8d147a"},{"code":"(fn [x] \n        (let [rev (reverse x)]\n          (= rev (seq x))))","problem":27,"user":"5267a5e8e4b03e8d9a4a7176"},{"problem":27,"code":"(fn [l]\n   (let [list (vec l)]\n     (= list (reverse list))))","user":"5f3f2281e4b004f08c61c561"},{"problem":27,"code":"(fn pal [sq]\n  (let [len (count sq)]\n  \t(cond\n\t\t(zero? len) true\n\t \t(= 1 len) true\n\t  \t:else (if (= (first sq) (last sq))\n    \t\t\t(pal (rest (butlast sq)))\n       \t\t\tfalse))))","user":"55f7c873e4b06e875b46ceb0"},{"code":"(fn [given] \n  (let [s (seq given)]\n    (= s (reverse s))))","problem":27,"user":"51a7b4fee4b0da5f497bde8b"},{"code":"#(= %1 ((if (string? %1) clojure.string/reverse reverse) %1))","problem":27,"user":"50c2fbebe4b00e537d00253c"},{"code":"(fn [x]\n  (let [rev (into '() (seq x))]\n    (loop [org x rorg rev]\n      (if (empty? org)\n        true\n        (if (= (first org) (first rorg))\n          (recur (rest org) (rest rorg))\n          false)))))","problem":27,"user":"4e52777f535d302ef430da76"},{"problem":27,"code":"(fn pd [iv]\n  (let [v (vec iv)]\n  (if (<= (count v) 1)\n    true\n    (if (not= (first v) (last v))\n      false\n      (pd (vec (drop 1 (drop-last v))))\n      )\n    )))","user":"58d1c1b1e4b03c36ff7e58ef"},{"code":"(fn [sequence]\n  (loop [seq sequence]\n    (if (not= (first seq) (last seq))\n      false\n      (if (< (count seq) 3)\n        true\n        (recur (rest (butlast seq)))\n      )\n    )\n  )      \n)","problem":27,"user":"5027bbe3e4b01614d1633fef"},{"problem":27,"code":"(fn [coll] \n  \t(let [r-coll (reverse coll)]\n     (if (= java.lang.String (type coll))\n        (= coll (apply str r-coll))\n    \t(= r-coll coll))))","user":"52ca7711e4b071a8d36bd3e3"},{"problem":27,"code":"#(= (reduce str %)\n    (reduce str (reverse %)))","user":"58e9e7c0e4b056aecfd47d11"},{"problem":27,"code":"(fn [a] (let [s (seq a)] (= s (reverse s))))","user":"554f7ef2e4b00713264bd9a1"},{"problem":27,"code":"(fn [s] (=(first s)(last s)));cheaty!","user":"5ce867fce4b0a17bb84e2baf"},{"problem":27,"code":"#(== (compare (into [] %) (into [] (reverse %))) 0)","user":"58806599e4b0f1effa3b7615"},{"problem":27,"code":"(fn [lst]\n   (every? true? (map #(= %1 %2) lst (reverse lst))))","user":"57f81524e4b0d3187e900913"},{"code":"(fn [v] (= (seq v) (reverse v)))","problem":27,"user":"524feb3fe4b0541d1855b81f"},{"problem":27,"code":"#(if (< (count %) 2)\n     true\n\t (if-not (= (last %) (first %))\n      false\n      (recur (butlast (rest %))\n    )\n))\n\n\n;(fn is-palindrome [palindrome] (\n;    if (< (count palindrome) 2)\n;    true  \n;    (if-not (= (last palindrome) (first palindrome))\n;      false\n;      (is-palindrome (butlast (rest palindrome))\n;    ))\n;))","user":"55c387e4e4b0e31453f6498b"},{"code":"(fn [x] (= (first x ) (last x )))","problem":27,"user":"4f5438d6e4b0a7574ea717dd"},{"problem":27,"code":"(fn palandrome?\n  [input]\n  (= (seq input) (reverse input)))","user":"5e228b5ae4b05b4b01516134"},{"problem":27,"code":"(fn pal? [s]\n  (= (reverse s) (reverse (reverse s))))","user":"5438795ee4b032a45b869313"},{"problem":27,"code":"(fn palindrome? [coll]\n  (= (reverse coll) (seq coll)))","user":"55586905e4b0deb715856e2b"},{"problem":27,"code":"(fn [coll] (= (vec coll) (reverse (vec coll)) ) )","user":"5ccf3879e4b0ccb0619628c4"},{"code":"#(every? true? (map = (reverse %) %))","problem":27,"user":"4fba77fae4b081705acca2df"},{"problem":27,"code":"(fn [x]\n  (if (seq? x)\n    (= x (reverse x))\n    (= (seq x) (reverse (seq x)))))","user":"57894e30e4b0ebec4cfb752b"},{"code":"#(let [v (vec %)] (= v (reverse v)))","problem":27,"user":"52d1e364e4b0d9f9285948e7"},{"problem":27,"code":"#(let [many (if (even? (count %)) (/ (count %) 2) (/ (+ (count %) 1) 2))]\n (= (take many %) (reverse (take-last many %))))","user":"5220def1e4b0e6a83c8925b4"},{"problem":27,"code":"(fn [ [x & r]] \n  (if r\n  (let \n   [rr (reverse r)]\n   (and \n    (= x (first rr))\n    (recur  (rest rr))))\n    true))","user":"4f045d0e535dcb61093f6bbc"},{"problem":27,"code":"(fn \n  [theSeq]\n  (= (seq theSeq) (reverse theSeq))\n  )","user":"573de63fe4b05c31a32c081c"},{"problem":27,"code":"#(case\n     (count %) 0\n               true\n               (if \n                   (= (first %) (last %))\n                 (recur (drop-last (drop 1 %))) false))","user":"542f574be4b0dad94371f2d0"},{"problem":27,"code":"#(loop [lista %]\n  (if (< (count lista) 2)\n  \ttrue\n    (if (= (last lista) (first lista))\n      (recur (rest (butlast lista)))\n      false\n  \t)\n  )\n)","user":"5890799be4b00487982d51d6"},{"problem":27,"code":"(fn [x] \n  (if \n    (odd? (count x))\n    (let [toTake (Math/floor (/ (count x) 2))]\n      (= (take toTake x) (reverse (take-last toTake x))))\n    (let [toTake (/ (count x) 2)]\n      (= (take toTake x) (reverse (take-last toTake x))))\n  )\n)","user":"5b3251c1e4b025bcb146f317"},{"problem":27,"code":"(fn [collection]\n  (= (reverse (seq collection)) (seq collection)))","user":"5d42c88ae4b05dd059a5437e"},{"problem":27,"code":"#(let [rev (reverse %)] (= % (if (string? %) (clojure.string/join rev) rev)))","user":"5b37a3b4e4b02d533a91bba9"},{"problem":27,"code":"(fn [s] (if (coll? s)\n                                    (= s (reverse s))\n                           (= s (clojure.string/reverse s))))","user":"534e1f56e4b084c2834f4aae"},{"problem":27,"code":"#(every? true? (map (fn [x y] (= x y)) (seq %) (seq (reverse %))))","user":"5516a874e4b06a49daca83b5"},{"problem":27,"code":"(fn palin [ins]\n  (let [n (int (/ (count ins) 2))\n        left (take n ins)\n        right (take-last n ins)\n        ]\n    (= (reverse right) left)\n    ))","user":"53e15371e4b0d874e779ae54"},{"code":"(fn [coll]\r\n  (let [rc (reverse coll) n (count coll)]\r\n    (every? identity \r\n      (map #(= (nth coll %) (nth rc %))\r\n           (range (/ (dec n) 2))))))","problem":27,"user":"4f7b3d53e4b06e829148e1a0"},{"code":"(fn [val] \n   (cond \n     (string? val) (= val (clojure.string/reverse val)) \n     :else (= val (reverse val))))","problem":27,"user":"509b1204e4b0412cdea6eb1d"},{"code":"(fn f[s]\n  (or\n    (= s [])\n    (and \n      (= (first s) (last s))\n      (f (reverse (rest (reverse (rest s)))))\n    )\n  )\n)","problem":27,"user":"50512f61e4b0b30bd8f4f83f"},{"problem":27,"code":"(fn palindrom? [coll] \n  (= (vec coll) (vec (reverse (vec coll)))))","user":"5a7ba4bbe4b03baeef9276e5"},{"problem":27,"code":"(fn temp\n  [s]\n  (or (empty? s)\n      (and (= (first s) (last s))\n           (recur (rest (reverse (rest s)))))))","user":"5a3b5cfde4b001c08efc0cd4"},{"problem":27,"code":"(fn [x]\n  (= (seq x) (reverse (seq x)))\n  )","user":"552d2e4fe4b076ab5578f7e1"},{"problem":27,"code":"(fn [x] \n  (let [s (seq x)]\n    (= s (reverse s))))","user":"5675cdf1e4b05957ce8c614d"},{"problem":27,"code":"#(= (reverse %) (reverse (reverse%)))","user":"5a9db513e4b0d174b936c7f0"},{"code":"#(cond (string? %) (= % (clojure.string/join (reverse %))) \n   :else (= % (reverse %)))","problem":27,"user":"50733b31e4b0e3170b5a869a"},{"code":"#(loop [xs %1 l 0 r (- (count %1) 1)]\n  (if (>= l r)\n    true\n    (if (not= (nth xs l) (nth xs r))\n      false\n      (recur xs (inc l) (dec r)))))","problem":27,"user":"508e2584e4b0f17d83ea26c9"},{"code":"#(if (= (compare (vec (rseq (vec %))) (vec %)) 0) true false)","problem":27,"user":"516e2246e4b092a6408c5bc5"},{"problem":27,"code":"(fn palin [s]\n  (loop [f 0 l (- (count s) 1)]\n    (if (>= f l)\n      true\n      (if (not= (nth s f) (nth s l))\n        false\n        (recur (inc f) (dec l))))))","user":"5c7d5a0ce4b0d597f478caab"},{"problem":27,"code":"(fn pal\n  ([x] (pal x x nil))\n  ([x in out] (if (empty? in) (= (apply str x) (apply str out)) (pal x (rest in) (cons (first in) out) ) ) )\n )","user":"59e61973e4b08badc2a0c567"},{"code":"(fn [x] (= (rseq (vec x)) (vec x)))","problem":27,"user":"5314318ee4b08068f379ed13"},{"code":"(fn [coll]\n  (= (seq coll)\n     (reverse (seq coll))))","problem":27,"user":"4f7431d2e4b044e54cd9a8f7"},{"code":"(fn palindrom? [coll] \n  (if (empty? coll)\n    true \n    (if (not= (first coll) (last coll)) \n      false \n      (palindrom? (rest (butlast coll))))))","problem":27,"user":"52c00e4fe4b07a9af5792342"},{"problem":27,"code":"(fn palindrome [coll]\n  (if (seq coll)\n    (and (= (first coll) (last coll)) (recur (rest (drop-last coll))))\n    true))","user":"606b16b8e4b069485764ddf7"},{"code":"(fn [col0]\n  (let [col (seq col0)]\n  (loop [start 0 end (- (count col) 1)]\n    (cond \n      (false? (= (nth col start) (nth col end))) false\n      (and (= (nth col start) (nth col end)) \n             (<= (- end start) 1)  )            true\n      :else (recur (inc start) (dec end))))\n))","problem":27,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":27,"code":"#(loop [lst % res false]\n   (if (empty? lst) res\n     (if (= (first lst) (last lst))\n       (recur (rest (butlast lst)) true)\n       (recur [] false)\n       )\n    )\n  )","user":"5979cd36e4b02382a38ad1d8"},{"problem":27,"code":"#(= ( seq %) (reverse (seq %)))","user":"56f4623ae4b046a417f9205d"},{"problem":27,"code":"#(let [mid (/ (count %) 2)] (= (take (Math/floor mid) %) (reverse (drop (Math/ceil mid) %))))","user":"55afa977e4b002ce9d5cbc15"},{"code":"(fn palindromo[ s] \n  (= (apply str s) (apply str(reverse s)))\n )","problem":27,"user":"50291679e4b0b6c928ad6200"},{"problem":27,"code":"(fn [list]\n              (= (reverse list) (seq list)))","user":"5e491182e4b043cd24807a46"},{"code":"(\nfn t[l] (\n    let [rl (reverse l)\n        len (\n            if (= 1 (rem (count l) 2))\n            (/ (- (count l) 1) 2)\n            (/ (count l) 2)\n        )\n    ]\n    (\n    if (= (type l) (type \"test\"))\n    (= (vec l) rl)\n    (= l rl))    \n)\n)","problem":27,"user":"4f03c039535dcb61093f6b5e"},{"problem":27,"code":"(fn [phrase]\n  (= (seq phrase) (reverse (seq phrase))))","user":"568e450fe4b0dcc4269f40d0"},{"problem":27,"code":"(fn\n  [lst]\n  (loop [left 0 right (dec (count lst))]\n    (cond\n     (not= (nth lst right) (nth lst left)) false\n     (>= left right) true\n     :else (recur (inc left) (dec right) ))))","user":"6074df6fe4b069485764de4b"},{"problem":27,"code":"(fn [xs] (every? true?  (map #(= %1 %2) xs (reverse xs))))","user":"570dd7ece4b0b0fb43fd06e1"},{"problem":27,"code":"(fn palindrome\n  [st]\n  (= (apply str  st) (apply str (reverse st))))","user":"5785c1d4e4b0ebec4cfb74e1"},{"problem":27,"code":"(fn [l]\n  (loop [o l]\n    (if (and (< (count o) 3) (= (first o) (last o)))\n      true\n      (if (not (= (first o) (last o)))\n        false\n        (recur (rest (butlast o)))))))","user":"54a80855e4b09f271ff37c9e"},{"problem":27,"code":"(fn [arr] (if (string? arr)\n           (if (= arr  (apply str (reverse arr))) true false)\n           (if (= arr (reverse arr)) true false)))","user":"59636b49e4b066ee0a44b0c5"},{"problem":27,"code":"(fn [s]\n  (loop [a (seq s) b (reverse (seq s)) i (quot (count a) 2)]\n    (if (not= (first a) (first b))\n      false\n      (if (zero? i)\n        true\n        (recur (rest a) (rest b) (dec i))))))","user":"58606948e4b0f14aab7c87d5"},{"problem":27,"code":"#(loop [m % n (reverse %)]\n   (if (empty? m) true (if (not (= (first m) (first n))) false (recur (rest m) (rest n)))))","user":"56c89c2ce4b0ed865f9758d4"},{"problem":27,"code":"(fn [x]\n  \t(loop [message x]\n      \t(if (= 0 (count message)) true \n      \t\t(let [front-part (first message)\n                  back-part (last message)]\n               (if (not= front-part back-part) false\n                  (recur (rest (butlast message))))))))","user":"596aaeefe4b069c0a1a19808"},{"problem":27,"code":"(fn [col] (every? identity (map (partial (fn [col n] (= (nth col n) (nth (reverse col) n))) col) (take (count col) (range)))))","user":"55b544e2e4b01b9910ae2986"},{"code":"(fn [coll] (= (seq coll) (reverse (seq coll))))","problem":27,"user":"4f16d3fd535d64f60314644e"},{"problem":27,"code":"#(let [rev (reverse %)]\n   (if (string? %)\n     (= (apply str rev) %)\n     (= rev %)))","user":"55e26417e4b050e68259b433"},{"problem":27,"code":"(fn [col]\n  (= (vec col) (vec (reverse col))))","user":"5a89997de4b05369db4d24c4"},{"problem":27,"code":"#(every? true? (map (fn [a b] (= a b)) % (reverse %)))\n\n; doh! -> #(= (vec %) (reverse %))","user":"56b295f7e4b0982f16b37e08"},{"problem":27,"code":"(fn detect-palindrome\n  [xs]\n  (= (seq xs) (reverse xs)))","user":"5d49ec5ee4b0776584bd6f1c"},{"code":"(fn pal [set]\n  (if (or (empty? set) \n          (= (count set) \n             1))\n    true\n    (if-not (= (first set)\n               (last set))\n      false\n      (pal (rest (reverse (rest set)))))))","problem":27,"user":"518ee4f9e4b0cd6ff51676a5"},{"code":"(comp (fn [x] (= (reverse x) x)) vec)","problem":27,"user":"52872d54e4b0239c8a67ae32"},{"problem":27,"code":"(fn [coll] (= (into [] coll) (rseq (into [] coll))))","user":"5cec07fce4b0a17bb84e2bf0"},{"code":"(fn pal [x]\r\n  (if (<= (count x) 1)\r\n    true\r\n    (if (not= (first x)(last x))\r\n      false\r\n      (pal (subvec (vec x) 1 (dec (count x))))\r\n    )\r\n  )\r\n)","problem":27,"user":"4f4aa932e4b0d56e7bb92c14"},{"problem":27,"code":"(fn [s]\n  (let [s1 (seq s)\n        s2 (reverse s)]\n    (= s1 s2)))","user":"5b96c1f3e4b0c0b3ffbd4a80"},{"code":"(fn [s]\n  (let [rev (reverse s)]\n    (if (string? s)\n      (= s (apply str rev))\n      (= s rev))))","problem":27,"user":"4fcd1bbde4b065de69964ca4"},{"problem":27,"code":"#(let [x (apply list %)] (= x (reverse x)))","user":"57b35a19e4b0fbc9809a277d"},{"problem":27,"code":"(fn rec \n  ([arg] (rec arg 0))\n  ([arg cnt] (if (= (quot (count arg) 2) cnt) true \n\t(and \n       (= (nth arg cnt) (nth arg (- (count arg) cnt 1)))\n\t   (rec arg (inc cnt))))))","user":"5e88a676e4b0cb016954630a"},{"problem":27,"code":"(fn palindrome [wrd]\n  (= (seq wrd) (reverse wrd)))","user":"5f8d76c3e4b0715f5002d758"},{"code":"#( = (reverse (reverse %)) (reverse %))","problem":27,"user":"505fc8e3e4b08f2a82ad10b6"},{"problem":27,"code":"(fn [item]\n  (if (string? item)\n    (if (= item (->> (reverse item)\n                  (clojure.string/join)))\n      true\n      false)\n      (if (= (reverse item) item)\n        true\n        false)))","user":"5756e218e4b02ea1147992e5"},{"problem":27,"code":"(fn r [x] (if (= (first x) (last x))  (if (= x ()) true (r (rest (reverse (rest x)))))  false))","user":"54a7efdee4b09f271ff37c9d"},{"code":"(fn [coll] (let [c (seq coll)] (= c (reverse c))))","problem":27,"user":"509e62a8e4b08df8156e9e2e"},{"problem":27,"code":";;#(= % (vec (reverse %)))\n(fn [xs]\n  (loop [s xs]\n    (if (empty s)\n      (= (first s) (last s))\n      (recur (rest (butlast s))))))","user":"52aaabf7e4b0c58976d9ac68"},{"code":"(fn pal? [s] \n  (if (< (count s) 2) \n    true \n    (if (= (first s) (last s))\n      (pal? (rest (reverse (rest (reverse s)))))\n      false)))","problem":27,"user":"516db4f6e4b046df6fbb76a0"},{"problem":27,"code":"#(if (= 0 (count %)) \n     true\n     (if (= (first %) (last %))\n       (recur (drop-last (rest %)))\n       false\n       )\n     \n     )","user":"53c73e8ae4b00fb29b2212a5"},{"code":"#(if (= (reverse %) (seq %))\n    true\n    false)","problem":27,"user":"4f9c7b0fe4b0dcca54ed6d1c"},{"problem":27,"code":"(fn [subject](= \n              (seq subject)\n              (reverse subject)\n              ))","user":"56163cc1e4b06b1bb21829ff"},{"problem":27,"code":"(fn [l]\n  (if (nil? (last l))\n    true\n    (and (= (first l) (last l)) (recur (drop-last (rest l))))))","user":"5833a6d8e4b089d5ab817ca2"},{"code":"#(if (string? %) (= (clojure.string/reverse %) %) (= (reverse %) %))","problem":27,"user":"50e0d5a3e4b061dbdced723d"},{"problem":27,"code":"#(= (seq %) ( reverse (seq %)))","user":"5ee7bc8ce4b029a2061bbea7"},{"code":"(fn [s] (= (apply str s) (apply str (reverse s))))","problem":27,"user":"4e83844a535db62dc21a62da"},{"code":"#(letfn [(pal [x] (or (empty? (rest x)) (and (= (first x) (last x)) (pal (rest (drop-last x))))))] (pal %))","problem":27,"user":"4ed94d69535d10e5ff6f5303"},{"code":"(fn [l] (let [s (seq l)] (= (reverse s) s)))","problem":27,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":27,"code":"(fn [s]\n\t(cond\n\t\t(empty? s) true\n\t\t(not= (first s) (last s)) false\n\t\t:else (recur (drop 1 (drop-last 1 s)))))","user":"5de7377ee4b0986d99407f75"},{"code":"#(= % \n   (if (string? %)\n     (apply str (reverse %))\n     (reverse %)\n   )\n)","problem":27,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"problem":27,"code":"(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity\n            (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))","user":"543bd52be4b032a45b869336"},{"code":"#( = (apply str %) (apply str(reverse %)))","problem":27,"user":"52f426fce4b05e3f0be25f1e"},{"problem":27,"code":"(fn [coll]\n     (let [q (quot (count coll) 2)\n           r (rem (count coll) 2)\n           part-left  (take q coll)\n           part-right (reverse (drop (+ q r) coll))]\n       (reduce #(and % %2) true (map #(= % %2) part-left part-right))))","user":"5e724492e4b085ba37836dc7"},{"code":"(fn foo [x] (if (< (count x) 2)\n              true\n              (if (= (first x) (first (reverse x)))\n                (foo (reverse (rest (reverse (rest x)))))\n                false)))","problem":27,"user":"5168d4ebe4b03f62cda68cdf"},{"problem":27,"code":"(fn [x] (= (apply str x) (apply str(reverse x))))","user":"5f3567d6e4b0574c87022c44"},{"problem":27,"code":"(fn pal [x]\n  (let [s (seq x)\n        fir (first s)\n        las (last s)]\n    (println (apply str x))\n    (if (empty? s) \n      true\n      (if (= fir las)\n        (pal (rest (drop-last s)))\n        false))))","user":"53c6dcf9e4b00fb29b2212a3"},{"problem":27,"code":"(fn [input] \n  (if (string? input) \n    (= input (clojure.string/join (reverse (seq input)))) \n    (= (reverse (seq input)) input)))","user":"51bc3e7fe4b0fe3ecfb46455"},{"problem":27,"code":"(fn [coll] (= (vec coll) (reverse (vec coll))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":27,"code":"(fn [col] (cond (not= (first col) (last col)) false\n                         (<= (count col) 3) true\n                         :else (recur (rest (butlast col)))))","user":"5646dff3e4b0284900eef615"},{"problem":27,"code":"(fn \n  [x]\n  (let [v (vec x)]\n  (= v (reverse v)))\n)","user":"56cdda13e4b0ea9b8538f752"},{"problem":27,"code":"(fn pal? [sq]\n  (if (or (= 0 (count sq)) (= 1 (count sq)))\n    true\n    (and (= (first sq) (last sq)) (pal? (rest (reverse (rest sq)))))\n    )\n  )","user":"580f9585e4b0f478707a05b5"},{"problem":27,"code":"(fn [x] (= (seq x) (reverse(seq x))))","user":"556dd141e4b09a3098a52509"},{"problem":27,"code":"(fn palindrome-detector [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"code":"(fn asdf [x] (if (every? #(= 0 %) (map compare x (reverse x) )) true false))","problem":27,"user":"5012036ce4b0a040369c12f4"},{"code":"#(let [ x (if (odd? (count %))\n         (/ (- (count %) 1) 2)\n         (/ (count %) 2))  ] (= (take x %) (reverse (drop (- (count %) x) %) )))","problem":27,"user":"4e9ff8d0535d7eef3080729c"},{"code":"(fn palindrom? [coll]\n  (or (< (count coll) 2)\n    (and (= (first coll) (last coll))\n      (palindrom? (rest (butlast coll)))\n)))","problem":27,"user":"4f650efee4b07046d9f4ef39"},{"code":"(fn palindrome? [lst]\n  (if (or (empty? lst) (empty? (rest lst)))\n    true\n    (and (= (first lst) (last lst)) (palindrome? (rest (butlast lst))))))","problem":27,"user":"4ff9cfd6e4b0678c553fc3af"},{"code":"(fn [coll] \n  (let [rc (reverse coll) n (count coll)]\n  (every? identity\n  (map #(= (nth coll %) (nth rc %)) (range (/ n 2)) ))))","problem":27,"user":"52bcf698e4b07a9af57922fe"},{"problem":27,"code":"(fn pal [x] (if (= java.lang.String (type x)) (= (apply str (reverse x))) (= (reverse x) x)))","user":"5d321852e4b01671435dbce8"},{"code":"(fn pali? [s]\n  (cond\n   (empty? s) true\n   (= 1 (count s)) true\n   :else (and\n          (= (first s) (last s))\n          (pali? (rest (drop-last s)))\n          )\n   )\n )","problem":27,"user":"5231c38fe4b0e2e8de81d1f8"},{"problem":27,"code":"(fn [x]\n  (loop [li x]\n    (if (not= (first li) (last li)) false\n      (if (<= (count li) 1) true \n        (recur (drop-last (rest li)))))))","user":"54381729e4b032a45b869310"},{"code":"(fn p [x]\n  (if (= (reverse x) (reverse (reverse x)))\n    true\n    false\n  )\n)","problem":27,"user":"504e5989e4b0f6ff3350c4a4"},{"code":"(fn test [x]\n  (let [x (seq x)]\n  (cond\n    (or (nil? (seq x))\n          (empty? (rest x))) \n    true\n    (not= (first x) (last x)) false \n   :else (test (rest (pop (vector x))))\n    )))","problem":27,"user":"5349da55e4b084c2834f4a68"},{"code":"(fn palindrome [l]\n\t(if (or (= (count l) 1) (= (count l) 2))\n    \ttrue\n    \t(if (= (first l) (last l))\n        \t(palindrome (rest (reverse (rest l))))\n        \tfalse\n        )\n    )\n)","problem":27,"user":"5250af8be4b0541d1855b83c"},{"problem":27,"code":"(fn [lst] (loop [f 0\n                 l (dec(count lst))]\n            (if (= (nth lst f) (nth lst l))\n              (if (<= l f)\n                true\n                (recur (inc f) (dec l)))\n              false)))","user":"607e1d9de4b03d835a6eaedb"},{"code":"(fn [s]\n  (let [v (vec s)]\n    (loop [s v]\n      (if (<= (count s) 1)\n        true\n        (and \n          (= (first s) (last s))\n          (recur (subvec s 1 (- (count s) 1))))))))","problem":27,"user":"51d4ed02e4b013d740b70dec"},{"problem":27,"code":"#((fn rec [x] \n     (if (> (.length x) 1)\n       (if (= (first x) (last x))\n         (recur (subvec x 1 (- (.length x) 1)))\n         false)\n       true)) (vec %))","user":"53c349f5e4b00fb29b22127a"},{"code":"(fn[x]  (every? true? (map = x (reverse x))))","problem":27,"user":"52810225e4b0757a1b171418"},{"code":"(fn [col]\n   (loop [i 0 f (dec (count col))]\n     (cond \n        (not= (nth col i) (nth col f)) false\n        (> i f) true \n        :else (recur (inc i) (dec f)))))","problem":27,"user":"4ff99f47e4b0678c553fc3aa"},{"problem":27,"code":"(fn[x] (=(seq x) (reverse(seq x))))","user":"53e32cf7e4b036ad0777e3fd"},{"code":"(fn my-parlindrome [coll]\n  (loop [coll coll]\n    (let [rev (reverse coll)]\n      (every? true? (map = coll rev)))))","problem":27,"user":"4fd769a1e4b0dab7d829f382"},{"problem":27,"code":"#(if (<= (count %) 1)\n   true\n   (let [head (first %)\n         tail (last %)]\n     (if (not= head tail)\n       false\n       (recur (butlast (rest %))))))","user":"5658c357e4b00d3155796111"},{"problem":27,"code":"(fn q [x] (\n           if (string? x)\n             (= x (apply str (reverse x)))\n             (= x (reverse x))\n))","user":"55d1a2b8e4b0e31453f64a46"},{"problem":27,"code":"(fn my-pal [s]\n  (or \n    (empty? s)\n    (and (= (first s) (last s))\n         (my-pal (drop 1 (drop-last 1 s))))))","user":"5bfc9037e4b0bdcf453d15f2"},{"code":"(fn [seq] (if (string? seq) (= seq (clojure.string/join (reverse seq))) (= seq (reverse seq))))","problem":27,"user":"508e9ed8e4b0996e1a8a53bf"},{"code":"(fn [coll] (let [size (count coll) \n        half (. Math floor (/ size 2))\n\t      palin-lst (for [i (range half)] (= (nth coll i) (nth coll (- size 1 i))))]\n\t  (every? #(= true %) palin-lst)))","problem":27,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn is-palindrome\n  [items]\n  (let\n      [s (seq items)]\n    (= s (reverse s))))","problem":27,"user":"511720eae4b0063b4e3e16da"},{"code":"#(= (into [] %) (into [] (reverse %)))","problem":27,"user":"529f3f1ae4b04e0c58e87ba5"},{"problem":27,"code":"(fn pdet\n    [pal]\n    (letfn \n      [(strip\n         [items]\n         (drop-last\n           1\n           (rest items)))]\n      (println pal)\n      (if \n        (< (count pal) 2)\n\ttrue\n\t(if\n\t  (= \n\t    (first pal)\n\t    (last pal))\n\t  (pdet (strip pal))\n\t  false))))","user":"586a657de4b0f14aab7c88bd"},{"problem":27,"code":"(fn [l] \n  (= (apply vector l) (reverse (apply vector l))))","user":"59368ccae4b02506e01a297a"},{"problem":27,"code":"(fn [a]\n  (if (= (reverse a) (reverse (reverse a))) true\n    false))","user":"53d032ace4b00fb29b221306"},{"problem":27,"code":"(fn [coll] (if (empty? coll) true (if (= (first coll) (last coll))\n                                     (recur (rest (butlast coll))) false)))","user":"5500721be4b07d26eda61d5b"},{"code":"(fn palind [coll]\n  (if-let [s (seq coll)]\n    (and (= (first s) (last s)) (palind (drop-last (rest s))))\n    true))","problem":27,"user":"4fc8769be4b0ee37620e1833"},{"problem":27,"code":"(fn [vs]\n  (let [n (quot (count vs) 2)\n        front-half (take n vs)\n        back-half (->> vs reverse (take n))]\n    (= front-half back-half)))\n\n#_(fn [vs]\n  (let [vs (seq vs)]\n    (= vs (reverse vs))))","user":"53684a2fe4b0243289761e8c"},{"problem":27,"code":"(fn palindrome?\n  [coll]\n  (if (string? coll)\n    (= coll (reduce str (reverse coll)))\n    (= coll (reverse coll))))","user":"5ff454a1e4b05ac5b16ea20d"},{"problem":27,"code":"(fn [x] (= (seq  x) (reverse x)))","user":"55c1eb52e4b0e31453f64970"},{"code":"#(let [x (vec %)] (= (reverse x) x))","problem":27,"user":"5282f54be4b0239c8a67ada0"},{"code":";(fn pal [s]\n;  (if (< (count s) 2)\n;    true\n;    (and (= (first s) (last s)) (pal (drop 1 (reverse (drop 1 s)))))))\n#(= (vec %) (reverse %))","problem":27,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":27,"code":"#(loop [l %] (if (<= (count l) 1) true (if (= (first l) (last l)) (recur (-> l rest drop-last)) false)))","user":"5550dec6e4b00713264bd9b2"},{"problem":27,"code":"#(or\n   (= \n     (into [] (reverse (into [] %))) \n     (into [] %)\n     )\n   (= \n     % \n     (clojure.string/join (reverse %))\n     )\n   false\n   )","user":"56035cb1e4b04bb52996e1ba"},{"problem":27,"code":"#(= % (if (string? %)\n         (apply str (reverse %))\n         (reverse %)))","user":"57147cd9e4b07c98581c3abf"},{"code":"(fn [xs]\n  (= (seq xs)\n     (reverse xs)))","problem":27,"user":"4dad8a6dc9a9d6ed1399dc57"},{"problem":27,"code":"(fn [xs]\n  (loop [xs (vec xs)]\n  \t(cond\n   \t  (< (count xs) 2) true\n   \t  (= (first xs) (last xs)) (recur (subvec xs 1 (dec (count xs))))\n      :else false)))","user":"5c34f7efe4b0d62ef62d9f5b"},{"code":"(fn [coll]\n  (if (string? coll) (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))","problem":27,"user":"50e3ea47e4b0463d32072485"},{"code":"(fn [xs] (println xs) (if (= xs []) true  (if (= (first xs) (last xs)) \n(recur (rest (butlast xs))) false)))","problem":27,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"problem":27,"code":"(fn [xs] \n  (let [s (seq xs)]\n    (= s (reverse s))))","user":"59cc8d8de4b0a024fb6ae5d5"},{"problem":27,"code":"(fn [x] (if(= (reverse x) (seq x)) true false))","user":"55dfacb7e4b050e68259b3fc"},{"problem":27,"code":"(fn [x]\n  (let [halfway (dec (/ (count x) 2))]\n    (loop [i 0]\n      (if (> i halfway)\n        true\n        (if (= \n             (nth x i)\n             (nth x (- (count x) (inc i))))\n          (recur (inc i))\n          false)))))","user":"53b14289e4b047364c04448b"},{"code":"(fn pal [thing] (if (> (count thing) 1) (and (= (first thing) (last thing)) (pal (rest (drop-last thing)))) true ))","problem":27,"user":"5271605ae4b03e8d9a4a73ed"},{"code":"(fn [x]\n  (= (seq x) (seq (reverse x))))","problem":27,"user":"50d5c19ce4b0159555a1fc61"},{"problem":27,"code":"(fn pal? [coll] (if (< (count coll) 2) true (if (= (first coll) (last coll)) (pal? (butlast (rest coll))) false )) )","user":"544fbabce4b0e39780006999"},{"problem":27,"code":"(fn [lst]\n  ((fn f [ls n]\n     (cond (> n (/ (count ls) 2)) true\n           (= (nth ls n) (nth ls (- (count ls) n 1))) (f ls (+ n 1))\n           :else false))\n   lst 0))","user":"5a74bf3ae4b0512ff01cdabd"},{"problem":27,"code":"(fn is-pal\n  [seq]\n  (if (= seq [])\n    true\n    (if (= (count seq) 1)\n      true\n      (and (= (first seq) (last seq)) (is-pal (take (- (count seq) 2) (rest seq)))))))","user":"56cf9d4fe4b0ea9b8538f76c"},{"code":"(fn [s] (= s (#(if (string? %) (apply str (reverse %)) (reverse %)) s)))","problem":27,"user":"5220ef05e4b0e6a83c8925b8"},{"problem":27,"code":"(fn [lista]\n  (let [listaEvaluable (seq lista)]\n  (= (reverse listaEvaluable) listaEvaluable)))","user":"59e63a2ce4b08badc2a0c569"},{"problem":27,"code":"(\n  fn foo[x]\n  (if (or (= (count x) 1) (= (count x) 0))\n  (\n    do\n    true\n  )\n  (do\n \n    (let [p (= (first x) (last x))]\n  \n  (and p (foo (drop-last 1 (drop 1 x)))))\n  )\n  )\n)","user":"5bed1e4ae4b0a6d31fed2118"},{"code":"#(nil?(some false?(map =%(reverse%))))","problem":27,"user":"4f296a80e4b0d6649770a02a"},{"code":"(fn [coll]\n    (let [fwd (seq coll)\n          rev (reverse fwd)]\n      (= fwd rev)))","problem":27,"user":"52d7f9a8e4b09f7907dd1381"},{"problem":27,"code":"(fn [coll]\n  (if (nil? coll)\n    true\n    (if (= (first coll) (last coll))\n      (recur (next (drop-last coll)))\n      false)))","user":"5bc7f2d6e4b07a9b28b100b7"},{"problem":27,"code":"(fn [lstr] (= (apply str lstr) (apply str (reverse lstr))))","user":"506f0968e4b09350ab4199f5"},{"problem":27,"code":"(fn [c] (let [coll (into [] c)] (= (reverse coll) coll)))","user":"5693a53ee4b0dcc4269f4106"},{"problem":27,"code":"(fn [x]\r\n (if (string? x)\r\n   (= x (clojure.string/reverse x))\r\n   (= x (reverse x))\r\n )\r\n)","user":"55cde227e4b0e31453f64a22"},{"code":"(fn [x] (= (into [] x) (reverse x)))","problem":27,"user":"537f8e7be4b06839e8705eb8"},{"code":"(fn [s] (if (string? s) (= s (clojure.string/reverse s)) (= s (reverse s))))","problem":27,"user":"525c575be4b0cb4875a45d38"},{"code":"(fn [s] \n  (let [len (count (vec s))\n        [f r] (split-at (int (/ len 2)) s)\n        r (if-not (zero? (mod len 2)) (next r) r)\n        ]\n    (= (reverse f) r))\n)","problem":27,"user":"50d3ec8be4b030b634c368bb"},{"code":"(fn [x]\n\t(if (empty? x) true\n\t  (and (= (first x) (last x))\n\t       (recur (next (butlast x))))))","problem":27,"user":"50b19a91e4b03ea880433552"},{"problem":27,"code":"(fn [x]\n  (loop [lst x]\n    (if (empty? lst)\n      true\n      (if (= (first lst) (last lst))\n        (recur (butlast (rest lst)))\n        false))))","user":"57f81549e4b0d3187e900918"},{"problem":27,"code":"(fn [coll]\n  (let [s (seq coll)]\n    (= s (reverse s))))","user":"5c504d8ae4b0f9f7a8770ec1"},{"problem":27,"code":"(fn [s]\n  \t(if (string? s)\n      (= s (apply str (reverse s)))\n      (= s (reverse s))))","user":"5542011fe4b0a04f79299516"},{"problem":27,"code":"(fn\n  [palindrome]\n  (if (string? palindrome)\n     (= palindrome (clojure.string/reverse palindrome))\n     (= palindrome (reverse palindrome))))","user":"5b759ca8e4b047b03b2036d0"},{"code":"#(= (if (string? %) \r\n         (apply str (reverse %))\r\n\t       (reverse %)) %)","problem":27,"user":"4e273301535deb9a81d77ef7"},{"problem":27,"code":"; (fn [coll]\n;   (= (seq coll) (reverse (seq coll))))\n#(= (seq %) (reverse (seq %)))","user":"55b7f263e4b01b9910ae29b4"},{"problem":27,"code":"#(= (vec %) (rseq(vec %)))","user":"53c2409de4b00fb29b22126c"},{"problem":27,"code":"(fn [se]\n  (let [fwd (take (Math/floor (/ (count se) 2)) se)\n        bkw (take (Math/floor (/ (count se) 2)) (reverse se))]\n    (if (= fwd bkw)\n      true\n      false)))","user":"565ddeb9e4b068f2fe63dc2c"},{"code":"(fn [seq] \n   (= (map (fn [n] n) seq) (reverse (map (fn [n] n) seq)))\n   )","problem":27,"user":"4f7cbf4ae4b06e829148e1b7"},{"code":"(fn is-pal? [xs]\n\t(= (reverse xs) (seq xs)))","problem":27,"user":"50ed8a5fe4b06330c1f87c3d"},{"problem":27,"code":"(fn [word] (let [dorw (reverse word)]\n             (if (string? word)\n               (= (apply str dorw) word)\n               (= dorw word))))","user":"5b611666e4b0c6492753e70d"},{"code":"(fn [x](= (seq x) (reverse x)))","problem":27,"user":"520ed237e4b0101e4be6fcd9"},{"problem":27,"code":"(fn [coll] (if (empty? coll)\n             true\n             (if (= (first coll) (last coll))\n               (recur (next (butlast coll)))\n               false)))","user":"5836bc20e4b089d5ab817d03"},{"code":"(fn [x] \n      (if (instance? String x)\n        (= (clojure.string/reverse x) x)\n        (= (reverse x) x)))","problem":27,"user":"50fd027be4b0d10d794c19fe"},{"code":"#(= (reverse (into [] %)) (into [] %))","problem":27,"user":"4e1fe7f1535d04ed9115e810"},{"problem":27,"code":"#(not (= (sort (vec (set %))) (sort (vec %))))","user":"5326e4efe4b09d4e7a9b54f5"},{"problem":27,"code":"(fn x [a] (= (reverse a) (seq a)))","user":"5edaabade4b0c7845d86b0e8"},{"problem":27,"code":"(fn[list] (= (seq list) (reverse list)))","user":"57f3f2bee4b07bbd65c32b1a"},{"code":"#(= (into '() %) (reverse (into '() %)))","problem":27,"user":"4f36f005e4b0e243712b1ecd"},{"code":"#(=(last%1)(first%1))","problem":27,"user":"4eb07be3535d7eef3080733b"},{"code":"#(let [s (into [] %)]\n   (= s (reverse s)))","problem":27,"user":"5339af7de4b0e30313ee6cab"},{"code":"(fn [c] (= (vec c) (reverse c)))","problem":27,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":27,"code":"#(= (partition 1 %) (reverse (partition 1 %)))","user":"5b19593ae4b03cfeda66ecb8"},{"problem":27,"code":"#(let [half-count (/ (count %) 2)]\n   (= (take (int half-count)\n             %)\n      (reverse (drop (int (+ 0.5 half-count))\n                     %))))","user":"56f9982ce4b07572ad1a88b8"},{"code":"(fn palindrome [x]\n  (if (= (type x) java.lang.String)\n    (if (= x (reduce #(str %2 %1) x)) true false)\n    (if (= x (reverse x)) true false)))","problem":27,"user":"534c1321e4b084c2834f4a89"},{"problem":27,"code":"(fn palindrome? [s]\n  (= (seq s) (reverse s)))\n\n;(fn \n;  [x]\n;  (loop [lst x]\n;    (if (= (count x) 1)\n;      true\n;      (if (not= (first lst) (last lst))\n;        false\n;        (recur (drop-last (drop 1 (lst))))))))","user":"59d68f3fe4b0ef0a1e9b5c1e"},{"code":"(fn [seq]\n  (let [half-size (quot (count seq) 2)\n        head (take half-size seq)\n        arse (take half-size (reverse seq))]\n    (= head arse)))","problem":27,"user":"4e223bd6535d04ed9115e81c"},{"problem":27,"code":"#(loop [vec %]\n  (let [f (first vec)\n        l (last vec)]\n    (if (or (nil? f) (nil? l))\n      true\n      (if (not (= f l))\n        false\n        (recur (rest (butlast vec)))\n        )\n      )\n    )\n  )","user":"5e0e836fe4b099d064962fa8"},{"code":"(fn [x]\n  (= (seq x)\n     (into () (seq x))))","problem":27,"user":"52527192e4b0541d1855b8af"},{"problem":27,"code":"(fn [x] (=  (seq x) (reverse x)))","user":"562449dee4b0b951f963fc21"},{"code":"#(= \n   (reverse (seq %))\n   (seq %))","problem":27,"user":"4f30896ce4b0d6649770a07b"},{"code":"#(= (reverse %)  (seq %))","problem":27,"user":"4e1582f0535d04ed9115e7e4"},{"problem":27,"code":";;#(= (seq %) (reverse (seq %)))\n\n;#(= (map str (reverse %)) (map str %))\n\n#(= (apply str %) (apply str (reverse %)))","user":"565487dce4b0f9d632dd8482"},{"problem":27,"code":"#(loop [coll %]\n             (if (> 2 (count coll))\n               true\n               (if (= (first coll) (last coll))\n                 (recur (butlast (rest coll)))\n                 false)))","user":"5bef3e88e4b0a6d31fed213f"},{"problem":27,"code":"(fn palindrome [x]\n  (if (empty? x)\n    true\n     (if (= \n          (first x) \n          (last x))\n       (palindrome\n        (rest (butlast x)))\n       false\n      ))\n    \n)","user":"57fe840ae4b0d3187e9009d3"},{"problem":27,"code":"(fn is-pal? [s]\n  (if (nil? s) true \n    (if (= (first s) (last s) ) (is-pal? (butlast (rest s))) false)))","user":"5af1cbb8e4b0cc2b61a3bc65"},{"code":"(fn [X]\n  (if (empty? X) true\n    (and (= (first X) (last X))\n         (recur (butlast (rest X))))))","problem":27,"user":"51ad0ab8e4b09397d510977b"},{"code":"#(= (take (/ (count %) 2) %) (reverse (take-last (/ (count %) 2) %)))","problem":27,"user":"5241fe85e4b076e5d3121f42"},{"problem":27,"code":"(fn [input]\n  (let [sequence (seq input)]\n    (= sequence (reverse sequence))))","user":"5d6eaa58e4b04d129b00f2cd"},{"code":"(fn [p]\t(let [c (/ (count p) 2)]  (= (drop-last c p) (reverse (drop c p)))))","problem":27,"user":"4f3b5219e4b0e243712b1f2a"},{"code":"(fn [s]\n  (if (or (= (count s) 0) (= (count s) 1))\n      true\n      (if (= (first s) (last s))\n          (recur (drop-last (rest s)))\n          false)))","problem":27,"user":"5300f68de4b0d8b024fd3714"},{"problem":27,"code":"#(loop [c %] (if (> (count c) 1) (if (not= (first c) (last c)) false (recur (reverse (rest (reverse (rest c)))))) true))","user":"5507cfd3e4b021ccfedb96ad"},{"code":"#(let\n   [c (count %)\n    split (split-at (/ c 2) %)\n    head (take (quot c 2) (first split))\n    tail (second split)]\n   (= head (reverse tail)))","problem":27,"user":"52244a77e4b01819a2de42d1"},{"problem":27,"code":"#(= (into () %) (reverse (into () %) ))","user":"5c582e7be4b0fb8c5ffd9a55"},{"code":"(fn [in] (every? true? (map = in (reverse in))))","problem":27,"user":"4e57afc5535d8a8b8723a288"},{"problem":27,"code":"(fn palindrome [list]\n  (let [size (count list)\n        mid (int (/ size 2))\n        first-half (nthnext (reverse list) mid)\n        sec-half (nthnext list mid)]\n    (= first-half sec-half)))","user":"5716cc16e4b07c98581c3b02"},{"problem":27,"code":"(fn [thing]\n    (if (= (apply str thing) (apply str (reverse thing)))\n      true\n      false))","user":"5e1cb653e4b0dc959400853b"},{"problem":27,"code":"(fn [coll] \n  (let [re (reverse coll)]\n  (if (string? coll)\n    (= coll (apply str re))\n    (= coll re))))","user":"52d2cb0fe4b099d49816f0b5"},{"code":"(fn pal? [n]\n  (= (into '() n) \n     (into '() (reverse n)))\n)","problem":27,"user":"51750fc5e4b07031762f2ee6"},{"code":"(fn [x] (loop [values x]\n          (cond \n           (empty? values) true\n           (not= (first values) (last values)) false\n           :else (recur (butlast (rest values))))))","problem":27,"user":"506617fce4b03d366d7cb2ac"},{"problem":27,"code":"(fn [item]\n  (= item\n      (if (= (type item) java.lang.String)\n          (apply str (vec (reverse item)))\n          (reverse item)\n      )\n  )\n)","user":"51ad808ee4b09397d5109784"},{"problem":27,"code":"#(let [x (seq %)\n       y (reverse x)]\n   (= x y))","user":"595fd721e4b066ee0a44b06e"},{"problem":27,"code":"(fn palindrome [x]\n  (= (seq x) (reverse x)))","user":"5f8795d4e4b020286baa5e96"},{"problem":27,"code":"#(= (reduce conj () (seq %)) (seq %))","user":"5a535572e4b05d388ecb6c0b"},{"code":"(fn f [coll]\n   (loop [a coll\n          b (reverse coll)]\n     (if (empty? a)\n       true\n       (if (= (first a) (first b))\n         (recur (rest a) (rest b))\n         false))))","problem":27,"user":"4ef57a7f535dced4c769f246"},{"problem":27,"code":"(fn palindrome [x]\n   (if (string? x)\n      (= x (apply str (reverse x)))\n      (= x (reverse x))\n      ))","user":"562eeba2e4b0ab312c17ebc1"},{"problem":27,"code":"#(if (= (vec %) (reverse (vec %)))\n   true\n   false   \n   )","user":"53b182a5e4b047364c044491"},{"code":"#(= (-> % seq reverse) (seq %))","problem":27,"user":"509b89b3e4b03049c49bd678"},{"problem":27,"code":"(fn [x]\n  (let [z (map vector x (reverse x))]\n    (every? #(apply = %) z)))","user":"5c1ca3dbe4b0efcb0b05b23b"},{"code":"(fn palin? [s] (if (empty? s) true (and (= (last s) (first s)) (palin? (rest (take (dec (count s)) s))))))","problem":27,"user":"4e2d562c535deb9a81d77f07"},{"problem":27,"code":"(fn [coll]\n  (if (< (count coll) 1)\n    true\n    (if (= (first coll) (last coll))\n      (recur (rest (take (dec (count coll)) coll)))\n      false)))","user":"53ca41dae4b00fb29b2212c8"},{"problem":27,"code":"(fn [something]\n  (let [seq (into [] something)]\n    (= seq (reverse seq))))","user":"532902f8e4b09d4e7a9b550e"},{"code":"#(cond\n  (< (count %) 2) true\n  (not= (first %) (last %)) false\n  :else (recur (rest (butlast %))))","problem":27,"user":"51f9b1d0e4b09be9c177e550"},{"problem":27,"code":"#(let [m (/ (count %) 2)] \n   (every? true? \n           (map = (drop m %) (->> (take (long m) %)\n                                  (apply conj ())))))","user":"580c1e9ae4b0849f6811b719"},{"code":"(fn [coll]\n  (let [length (count coll)\n        tocheck (int (/ length 2))]\n    (loop [left 0 right (dec length) nchecks 0 palin? true]\n      (if (or (false? palin?)\n              (= nchecks tocheck))\n        palin?\n        (recur (inc left)\n               (dec right)\n               (inc nchecks)\n               (= (nth coll left) (nth coll right)))))))","problem":27,"user":"52cc582ae4b07d0d72b27362"},{"problem":27,"code":"(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity\n            (map #(= (nth coll %) (nth rc %)) (range(/ (dec n) 2)))))\n  )","user":"54eb22a0e4b024c67c0cf845"},{"code":"( fn [x]\n   (= (set (map (fn[y z]\n      (= y z)\n    ) \n   x (reverse x)) ) #{true} )\n   \n )","problem":27,"user":"51ff6379e4b0f1313d468a98"},{"code":"(fn [x] (let [cnt (mod 2 (count x))] (= (reverse (take cnt x)) (take-last cnt x))))","problem":27,"user":"531576b4e4b08068f379ed29"},{"problem":27,"code":"#(loop [elems %]\n   (or\n    (< (count elems) 2)\n    (and (= (first elems) (last elems))\n         (recur (rest (butlast elems))))))","user":"54302691e4b0dad94371f2d7"},{"problem":27,"code":"(fn is-palindrome?\n  ([s] (is-palindrome? s (reverse s)))\n  ([s r]\n   (if (empty? s)\n     true\n     (if (= (first s) (first r))\n       (is-palindrome? (rest s) (rest r))\n       false))))","user":"5875daaee4b01531a375ea74"},{"problem":27,"code":"#(= (-> % vec reverse) (-> % vec))","user":"544c1b05e4b0e3978000696e"},{"problem":27,"code":"(fn f [x]\n  (if (or (= (count x) 0) (= (count x) 1))\n    true\n    (if (= (first x) (last x))\n      (f (reverse (rest (reverse (rest x)))))\n      false)))","user":"574b4f3ee4b02ea114799207"},{"code":"(fn palindrome? [str]\r\n        (letfn [ (rec [str-a str-b]\r\n                      (if (= (first str-a) nil)\r\n                          true\r\n                          (if (= (first str-a) (first str-b))\r\n                              (rec (rest str-a) (rest str-b))\r\n                              false))) ]\r\n            (rec str (reverse str))))","problem":27,"user":"4e68fe94535d8ccf87e9fe94"},{"problem":27,"code":"(fn [l] (->> (map #(seq [%1 %2]) l (reverse l)) (every? #(= (first %1) (second %1)))))","user":"55da18d5e4b0e31453f64ad1"},{"code":"(fn [x] (= (first x) (last x)))","problem":27,"user":"4e64ae65535d8ccf87e9fe6d"},{"code":"#(= (vec %1) (reverse %1))","problem":27,"user":"4fd15334e4b04c3a95aa040d"},{"problem":27,"code":"(fn palindrome [xs] \n  (if (empty? xs)\n    true\n    (and (= (first xs) (last xs))\n         (palindrome (drop-last (rest xs))))))","user":"572a35a9e4b0f4d77e65122f"},{"problem":27,"code":"(fn [v]\n  (if (< (count v) 2)\n    true\n    (if (= (first v) (last v))\n      (recur (take (- (count v) 2) (rest v)))\n      false)))","user":"564dc062e4b0284900eef68c"},{"code":"#(loop [s (seq %), lp 0, rp (- (count (seq %)) 1) ]\n      (if (<= (- rp lp) 1)\n        true\n        (if (= (nth s lp) (nth s rp))\n          (recur s (+ lp 1) (- rp 1))\n          false)))","problem":27,"user":"4e6a368e535d8ccf87e9feae"},{"problem":27,"code":"(fn [x] (= (seq x) (reverse (seq x)) ))","user":"516fc530e4b0b86e66597f00"},{"code":"(fn palindromo? [s]\n  (or (<= (count s) 1)\n      (and (= (first s) (last s))\n           (palindromo? (rest (butlast s))))))","problem":27,"user":"4db51ce0535d87e67b28fe06"},{"problem":27,"code":"(fn [coll]\n  (every? true? (map #(if (= %1 %2) true) coll (reverse coll))))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":27,"code":"#(= % (if (string? %)\n   (apply str (reverse %)) (reverse %)))","user":"56df254be4b0ca2494a095ea"},{"code":"(fn pal [elems] \n  (or (empty? elems) (and (= (first elems) (last elems)) (pal (drop-last (rest elems))))))","problem":27,"user":"52deb735e4b09f7907dd13f7"},{"problem":27,"code":";#(= (cast (type %)(reverse %)) % )\n; ==> java.lang.ClassCastException: Cannot cast clojure.lang.PersistentList to java.lang.String\n\n#(= (reverse %) (reverse (reverse %)) )","user":"5b819312e4b047b03b20378d"},{"code":"(fn [x] (< 1 (rand 2)))","problem":27,"user":"51256b40e4b05d10e3e395f8"},{"problem":27,"code":"(fn [v] (= (reverse v)\n           (reverse (reverse v))))","user":"54d31cf1e4b0e8a36923e600"},{"problem":27,"code":"#(= %1 (if (string? %1)\n         (apply str (reverse %1))\n         (reverse %1)))","user":"5840c068e4b089d5ab817df8"},{"problem":27,"code":"(fn recursive_palindrome\n    [palindrome]\n    (if (> (count palindrome) 1)\n        (let [first_guy (first palindrome)\n              last_guy (last palindrome)]\n            (if (= first_guy last_guy)\n                (recursive_palindrome (rest (drop-last palindrome)))\n                false))\n        true))","user":"59f242b2e4b0966464fe6a7a"},{"code":"(fn [col]\n  (loop [p col, rp (reverse col)]\n    (cond      \n      (and (empty? p) (empty? rp)) true\n      (= (first p) (first rp)) (recur (rest p) (rest rp))\n      :else false)))","problem":27,"user":"527dc2aee4b0757a1b17138d"},{"problem":27,"code":"(fn [in]\n  (loop [in in]\n    (if (<= (count in) 1)\n      true\n      (if (not= (first in) (last in))\n        false\n        (recur (rest (butlast in)))))))","user":"5918db70e4b09b4ee5954bbb"},{"problem":27,"code":"(fn j[x] \n  (= (seq x) (reverse x))\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"code":"(fn [x]\n  (loop [lst x]\n    (if (empty? lst)\n    true\n    (if (not (= (first lst) (last lst)))\n       false\n      (recur (rest (drop-last lst)))))))","problem":27,"user":"4edb314d535d10e5ff6f5317"},{"code":"#(= (concat '() %) (reverse %))","problem":27,"user":"50807940e4b01a93d3f38e44"},{"code":"(fn [coll]\n  (let [p1 (take (quot (count coll) 2) coll)\n        p2 (drop (/ (count coll) 2) coll)]\n    (= p1 (reverse p2)))\n  )","problem":27,"user":"518279abe4b0353c468deb65"},{"problem":27,"code":"(fn [x]\n  (let [rx (reverse x)]\n    (if (string? x)\n      (= x (apply str rx))\n      (= x rx)\n      )\n    )\n  )","user":"5c083a1ae4b0bdcf453d16dd"},{"code":"(fn is_pal? [list]\n  (if (nil? list)\n    true\n  (and \n    (= (first list) (last list))\n    (is_pal? (butlast (rest list))))))","problem":27,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":27,"code":"(fn [s]\n  (let [original (apply str s)\n        reversed (apply str (reverse s))]\n    (= original reversed)))","user":"60a7104be4b00e9e6653c465"},{"code":"(fn [coll]\n    (if (empty? coll)\n  true\n      (if (not (= (first coll) (last coll)))\n\t  false\n\t(recur (butlast (rest coll))))))","problem":27,"user":"4e7d2448535db169f9c796c8"},{"problem":27,"code":"(fn palindrome? [coll]\n  (let [scoll (seq coll)]\n    (if (>= 1 (count coll))\n      true\n      \n      (and\n       (= (first scoll) (last scoll))\n       (palindrome? (rest (drop-last scoll)))\n       )\n      )\n    )\n  )","user":"56de0db0e4b0ea9b8538f83a"},{"problem":27,"code":"(fn [col] (if (>  2 (count col))\n             true\n             (if (not= (first col) (last col))\n               false\n               (recur (rest (drop-last col))))))","user":"555883c5e4b0deb715856e2d"},{"code":"#(let [rsq (into () %1) sq (reverse rsq)]\n    (= rsq sq))","problem":27,"user":"4fc4f347e4b081705acca35d"},{"problem":27,"code":"#(loop [remain % current 0]\n      (if (> (count remain) current)\n        (if (= (last remain) (nth remain current))\n          (recur (drop-last remain) (inc current))\n          false)\n        true))","user":"60759e51e4b069485764de5a"},{"problem":27,"code":"(fn [liste] (= (seq liste) (reverse liste)))","user":"556f2009e4b09a3098a52519"},{"code":"(fn [c]\n  (reduce #(and %1 (= (first %2) (second %2))) true \n    (zipmap (seq c) (reverse c))))","problem":27,"user":"4fc04d75e4b081705acca324"},{"code":"(fn [xs]\n  (let [xxs (seq xs)]\n    (= xxs (reverse xxs))))","problem":27,"user":"4fadbc3fe4b081705acca23f"},{"problem":27,"code":"#(= (seq %) (seq (reduce conj '() %)   ))","user":"55cc56bee4b0e31453f64a0f"},{"code":"(fn[x](= (reverse(seq x)) (seq x)))","problem":27,"user":"532631e1e4b09d4e7a9b54ea"},{"code":"#(=(reverse %)(reverse(reverse %)))","problem":27,"user":"4f542fd9e4b0a7574ea717db"},{"code":"(fn [x]\n  (if (= (class x) java.lang.String)\n  (= x (apply str (reverse x)))\n  (= x (reverse x))))","problem":27,"user":"5212a062e4b0d32679a50641"},{"problem":27,"code":"#(= (take (quot (count %) 2) %)  (reverse (drop (+ (quot (count %) 2) (rem (count %) 2) ) %)))","user":"569f33c7e4b0542e1f8d148f"},{"code":"#(or (= % (apply str (reverse %))) (= % (reverse %)))","problem":27,"user":"52f53589e4b05e3f0be25f2c"},{"code":"(fn [palin]\n\t(loop [start 0 end (- (count palin) 1)]\n\t\t(if \n\t\t\t(not (= (nth palin start) (nth palin end)))\n\t\t\tfalse\n\t\t\t(if \n\t\t\t\t(<= start end)\n\t\t\t\ttrue \n\t\t\t\t(recur (inc start) (dec end))\n\t\t\t)\n\t\t)\n\t)\n)","problem":27,"user":"50e9ed1de4b02d54280826d5"},{"code":"(fn [sq]\n   (loop [s sq]\n      (if (or\n            (= 0 (count s))\n            (= 1 (count s)))\n         true\n         (if (= (first s) (last s))\n            (recur (butlast (rest s)))\n            false))))","problem":27,"user":"523bd9c0e4b07becd5be2201"},{"problem":27,"code":"(fn [coll]\n  (let [[p_ p2] \n        (map vec (split-at \n         (/ (count coll) 2)\n         (into [] coll)))\n        len (count p2)\n        p1 (reverse \n            (if (> (count p_) \n                   len)\n              (pop p_)\n              p_))]\n    (= p1 p2)))","user":"58582dade4b0f14aab7c8713"},{"problem":27,"code":"(fn palin \n   [args]\n   (and (= (first args) (last args))\n        (or (<= (count args) 1)\n            (palin (rest (butlast args))))))","user":"5b86462de4b047b03b2037df"},{"problem":27,"code":"(fn isPal [lista]\n  (if (> (count lista) 0)\n    (and (= (first lista) (last lista)) (isPal (rest (take (- (count lista) 1) lista))))\n    true))","user":"5ba6d337e4b0a20761a23414"},{"code":"(fn [t-pal]\n  (let [r-col (reverse t-pal) col (reverse r-col)]\n    (println r-col col)\n    (= r-col col)))","problem":27,"user":"4f036266535dcb61093f6a95"},{"code":"(fn f [x] (if (empty? x) true (if (= (first x) (last x)) (f (rest (drop-last x))) false)))","problem":27,"user":"514d398ee4b019235f6c0583"},{"code":"(fn [sq]\n  (loop [s sq\n         r (reverse sq)]\n    (if (empty? s)\n      true\n      (if-not (= (first s) (first r))\n        false\n        (recur (rest s) (rest r))))))","problem":27,"user":"51b41150e4b0f094dd986fac"},{"code":"(fn is-palindrome [x]\n  (if (<= (count x) 1)\n    true\n    (if (not (= (first x) (last x)))\n      false\n      (is-palindrome (rest (drop-last x))))))","problem":27,"user":"51d360d1e4b099f3b6acddff"},{"code":"#(= (-> % vec rseq) (vec %))","problem":27,"user":"518b761ae4b0f028e99addee"},{"code":"(fn [s]\n  (let [s (seq s)]\n    (= s (reverse s))))","problem":27,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn [x] (= ( apply str ( reverse x)) (apply str x)) )","problem":27,"user":"51227a00e4b068a9582e656b"},{"code":"(fn is-palindrome [seq] (every? identity (map = seq (reverse seq))))","problem":27,"user":"5268eb68e4b03e8d9a4a71c6"},{"problem":27,"code":"(fn [x] (reduce #(and %1 %2) (map #(apply = %)  (partition 2 (interleave x (reverse x))))))","user":"574311a5e4b05c31a32c0888"},{"problem":27,"code":"(fn p [x] (= (reverse x) (seq x)))","user":"560a8ccde4b05f002753defc"},{"code":"(fn palindrome? [xs]\n  (if (or (empty? xs) (empty? (rest xs)))\n    true\n    (and (= (first xs) (last xs))\n         (palindrome? (butlast (rest xs))))))","problem":27,"user":"51811d5ee4b06547fbae113c"},{"code":"(fn answer[aSeq]\n  (if (= 0 (count aSeq)) true\n      (let [x (first aSeq) y (last aSeq)]\n        (if (= x y) (answer (drop-last (rest aSeq)))\n           false\n        )\n      )\n  )\n)","problem":27,"user":"4fb4d4ede4b081705acca2b1"},{"problem":27,"code":"(fn [coll]\n  (if (string? coll)\n    (= (apply str (reverse coll)) coll)\n    (= (reverse coll) coll)))","user":"56a79421e4b07966d5a8a05c"},{"code":"(fn [x] ((fn z [l c] (if (= (nth l c) (nth l (- (count l) c 1))) \n              (if (>= c (- (count l) c)) true (z l (+ c 1)))\n            false)) x 0))","problem":27,"user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":27,"code":"#(if (string? %)\n   (= % (clojure.string/join (reverse %)))\n   (= % (reverse %)))","user":"5787ce76e4b0ebec4cfb750e"},{"problem":27,"code":"(fn\n  [coll]\n  (= 0 (compare (vec coll) (vec (reverse coll)))))","user":"54d70bbfe4b0a52adc2e2026"},{"problem":27,"code":";(fn [coll]\n;   (= (take (quot (count coll) 2) coll) (take (quot (count coll) 2) (reverse coll))))\n#(= (seq %) (reverse (seq %)))","user":"5d0beecee4b0cc9c91588239"},{"problem":27,"code":"#(if (string? %1) (= (apply str (reverse %1)) %1) (= (reverse %1) %1))","user":"5deab1b2e4b0986d99407f9f"},{"problem":27,"code":"(fn [x] (loop [index 0 judge true] (if(= index (/ (- (count x) (mod (count x) 2)) 2)) judge (recur (+ 1 index) (and judge (= (nth x index) (nth x (- (count x) index 1))))))))","user":"5924009ce4b072a2710fce45"},{"problem":27,"code":"(fn palinn\n  [pseq]\n  (if (= (reverse pseq) (seq pseq))\n    true\n    false))","user":"59fe5612e4b01bb0ae8afd0c"},{"problem":27,"code":"(fn palindrome [x]\n  (= (into [] x) (reverse (into [] x)))\n  )","user":"5ac74b34e4b0e27600da777f"},{"problem":27,"code":"(fn [x] (every? #(true? %1) (map #(= %1 %2) x (reverse x))))","user":"57213df6e4b0c5bde472c0ab"},{"problem":27,"code":"(fn [xs]\n (= (apply str xs) (apply str (reverse xs))))","user":"57eaf869e4b0bfb2137f5b56"},{"code":"#(> (count %) (count (set %)))","problem":27,"user":"4dd6fa35535d2dad7130b5cd"},{"problem":27,"code":"(fn [coll] (= (apply list coll) (reverse coll)))","user":"5797d4bae4b039eba2ecb107"},{"problem":27,"code":"(fn [col]\n  (= (map identity col) (reverse col)))","user":"5d231255e4b02ea6f0fb69fe"},{"code":"(fn [s] \n  (let [reversed (reverse s) half (/ (count s) 2)]\n    (= (take half s) (take half reversed))))","problem":27,"user":"526c669be4b03e8d9a4a728f"},{"problem":27,"code":"(fn [x] (if (= (reverse x) (#(for [i %] i) x)) true false))","user":"5886e8bde4b0f1effa3b76ea"},{"problem":27,"code":"(fn [list]\n  (= (seq list) (reverse (seq list)))\n  )","user":"5d6932e6e4b0db5d338d1609"},{"code":"(comp (partial apply =) (juxt seq reverse))","problem":27,"user":"4e9660ec535dbda64a6f6b44"},{"problem":27,"code":"(fn[x] (\n         -> x\n         (count)\n         ((fn[xs](quot xs 2)))\n         ((fn[len](= (take len x) (reverse (take-last len x)))))\n        )\n )","user":"58ec5e86e4b056aecfd47d5f"},{"code":"(fn pal [s]\n  (= (first s) (last s)))","problem":27,"user":"52401a65e4b0ad64fa010306"},{"problem":27,"code":"(fn pali\n  [input]\n  (= (seq input) (reverse input)))","user":"5a6a32b6e4b0512ff01cda22"},{"code":"#(let [arg %1]\n  (if (string? arg)\n    (= arg (apply str (rseq (vec arg))))\n    (= arg (rseq (vec arg)))))","problem":27,"user":"4f601623e4b0defedf855fa3"},{"problem":27,"code":"(fn palindrome [item]\n  (if (< (count item) 2) true (and (= (first item) (last item)) (palindrome (rest (drop-last item))))))","user":"5a18f868e4b0ff51aa4b31f7"},{"problem":27,"code":"(fn my-pal\n  ([ls accum]\n  \t(if (empty? ls)\n      accum\n      (my-pal ((comp rest reverse rest reverse) ls) (and (= (first ls) (last ls)) accum))))\n  ([ls] (my-pal ls true)))","user":"56607bbfe4b068f2fe63dc58"},{"code":"(fn [s] (if (sequential? s) (= s (reverse s)) (= s (apply str (reverse s)))))","problem":27,"user":"51430fb2e4b0c172af7558ce"},{"code":";#(= (reverse (reverse %)) (reverse %))\n(fn check [seq] (cond (or (= seq nil) (= '() seq)) true\n                       (= (first seq) (last seq)) (-> seq butlast next check)\n                       true false))","problem":27,"user":"51df825de4b01188f062752b"},{"problem":27,"code":"#(cond (<= (count %) 1) true\n  \t\t:else (and (= (first %) (last %)) (recur (rest (butlast %)))  ))","user":"5bc50870e4b07a9b28b10069"},{"code":"(fn [s]\n  (let [hlf-len (quot (count s) 2)\n        fst (take hlf-len s)\n        lst (take hlf-len (reverse s))]\n    (= fst lst)))","problem":27,"user":"4f856171e4b033992c121c42"},{"problem":27,"code":"(fn [sqn]\n  (= (reverse sqn) (reverse (reverse sqn))))","user":"5cf895efe4b0b71b1d808a85"},{"problem":27,"code":"( fn [x] (= ( reverse x ) ( seq x)))","user":"5953949be4b066ee0a44aeea"},{"code":"(fn [seq] (= (sequence seq) (reverse (sequence seq))))","problem":27,"user":"5003bb77e4b0678c553fc442"},{"code":"(fn [ list ]\n  (= (seq list) (reverse list)))","problem":27,"user":"50086dafe4b028e089d3518d"},{"code":"(fn [xs] (let [v (vec xs)] (= v (reverse v))))","problem":27,"user":"507fe6fee4b089ade05efbd6"},{"problem":27,"code":"(fn [lst]\n  (loop [a lst\n         b (reverse lst)]\n\t(cond\n     (empty? a) true\n     (= (first a) (first b))\n      (recur (rest a)\n             (rest b))\n     :else false\n\t)\n)\n)","user":"59e4e3cbe4b08badc2a0c54a"},{"problem":27,"code":"(fn paldetect [coll]\n   (every? (fn [[ e1 e2]] (= e1 e2))\n          (partition 2 (interleave coll (reverse coll)))))","user":"53f2370ee4b0742d9025b0e7"},{"problem":27,"code":"(fn [coll]\n\t(loop [[x & xrest] coll]\n\t\t(if (seq xrest)\n\t\t\t(and (= x (last xrest)) \n\t\t\t\t (recur (take (dec (count xrest)) xrest)))\n\t\t\ttrue)))","user":"564d02cde4b0284900eef679"},{"problem":27,"code":"(fn [x] (let [s (seq x)] (= s (reverse s))))","user":"5616f411e4b06b1bb2182a0a"},{"problem":27,"code":"(fn [all]\n   (let [rev (reverse all)\n         len (count all)\n         flen (inc (int (/ len 2)))]\n     (every? true? (map (fn [x]\n                          (= (nth rev x)\n                              (nth all x))\n                          ) (range flen)))\n     )\n   )","user":"5a43347ee4b0447ef91cc603"},{"problem":27,"code":"(fn [lat]\n  (if (string? lat) \n    (= lat (apply str (reverse lat)))\n  \t(= lat (reverse lat))))","user":"5a9be505e4b0d174b936c7cf"},{"problem":27,"code":"(fn [x] (let [y (seq x)] (= y (reverse y))))","user":"56662275e4b0e91d5f5c566a"},{"problem":27,"code":"(fn [s] (let [ss (seq s)] (= ss (reverse ss))))","user":"57b60e46e4b0fbc9809a27b6"},{"problem":27,"code":"(fn\n  [seq]\n  (loop [seq seq]\n    (let [len (count seq)]\n\t  (if (or (= len 0) (= len 1))\n        true\n        (if (= (first seq) (last seq))\n          (recur (butlast (rest seq)))\n          false)))))","user":"52c3dffee4b0c2d177d620cb"},{"code":"(fn [coll]\n  (let [coll-size (count coll)]\n    (if (even? coll-size)\n      (= (reverse (take (/ coll-size 2) coll))\n         (drop (/ coll-size 2) coll))\n      (= (reverse (take (- (/ coll-size 2) 1) coll))\n         (drop (/ coll-size 2) coll)))))","problem":27,"user":"4ecaa5da535d6d7199dd3707"},{"problem":27,"code":"(fn [coll] (= coll (if (string? coll)(apply str(reverse coll))(reverse coll))))","user":"55c07e3ee4b01b9910ae2a24"},{"problem":27,"code":"(fn [a] (if (string? a) (= (clojure.string/reverse a) a) (= a (reverse a))))","user":"5f5b624de4b05ea7b9adc42f"},{"problem":27,"code":"(fn [seq] (= seq (if (coll? seq) (into [] (reverse seq)) (apply str (reverse seq)))))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":27,"code":"(fn is-palindrome [input]\n  (= (reverse input) (seq input)))","user":"5c196dc3e4b01240ff5671fa"},{"problem":27,"code":"(fn [x]\n  (let [a (seq x) \n         b (reverse (seq x))]\n    (= a b)))","user":"55912230e4b027778923767a"},{"code":"(fn [coll]\n  (= (clojure.string/join coll) (clojure.string/join (reverse coll))))","problem":27,"user":"4ff695f8e4b0678c553fc380"},{"problem":27,"code":"(fn [input] \n  (let [s (seq input)]\n    (= s (reverse s))))","user":"55be18e5e4b01b9910ae2a01"},{"problem":27,"code":";; (fn [lst]\n;;  (loop [l (seq lst)]\n;;    (cond\n;;      (= (last l) (first l))\n;;        (if (< 1 (count l))\n;;          (recur (drop 1 (butlast l)))\n;;          true)\n;;      :else false)))\n\n;; #(if (< (count %) 2)\n;;     true\n;;     (if (= (first %) (last %))\n;;       (recur (-> % rest butlast))\n;;       false))\n\n#(= (reverse %) (seq %))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn [x] \n    (or (<= (count x) 1)\n        (and (= (first x) (last x))\n              (recur (rest (butlast x))))))","problem":27,"user":"4e580746535d8a8b8723a28c"},{"problem":27,"code":"(fn [x]\n  (if (= java.lang.String (class x))\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)\n    )\n  )","user":"57a497e8e4b0a966079561e4"},{"problem":27,"code":"(fn [t] (reduce #(and %1 %2) (map = t (reverse t))))","user":"54b2a4f7e4b09f271ff37d2c"},{"code":"#(= (seq %1) (reverse (seq %1)))","problem":27,"user":"4dbb6302535d1e037afb21b5"},{"code":"(fn [s] \n  (cond \n   (empty? s) true \n   (= 1 (count s)) true \n   :else \n   \t(let [l (count s) h (quot (count s) 2)] \n      (if (odd? l) \n        (= (take h s) (reverse (drop (+ h 1) s)))\n        (= (take h s) (reverse (drop h s)))\n\t   )\n    )\n   )\n)","problem":27,"user":"535197f2e4b084c2834f4ae4"},{"code":"(fn [x]\n  (let [xs (seq x)]\n    (or \n      (< (count xs) 2)\n      (and\n        (= (first xs) (last xs))\n        (recur (rest (butlast xs)))))))","problem":27,"user":"4ed2918f535d44c135fd68d8"},{"code":"(fn [s]\n  (or (empty? s)\n    (and (= (first s) (last s))\n       (recur (butlast (rest s))))))","problem":27,"user":"51493390e4b05514c84b7ccd"},{"code":"(fn pal [x]\n          ((fn palrec [i]\n             (if (<= (/ (count x) 2) i)\n               true\n               (if (= (nth x i) (nth x (- (count x) 1 i)))\n                 (palrec (+ i 1))\n                 false)))\n          0))","problem":27,"user":"4f0399c4535dcb61093f6b34"},{"problem":27,"code":"(fn [[x & rst]] (cond \n\t(or (not x) (empty? rst)) true\n    (= x (last rst)) (recur (butlast rst))\n    :else false\n))","user":"55f5625de4b06e875b46ce86"},{"code":"(fn [seq]\n    (let [len (int (/ (count seq) 2)), [right left] (map vec (split-at len seq))]\n          (= right (take len (reverse left)))))","problem":27,"user":"4f7a9416e4b06e829148e19b"},{"problem":27,"code":"(fn palindrome? [x] (= (reverse x) (reverse (reverse x))))","user":"541cf6dfe4b01498b1a71a7a"},{"problem":27,"code":"(fn [x]  (= (seq x) (reverse(seq x))))","user":"57dbcc28e4b0bd073c202429"},{"problem":27,"code":"(fn pal-detector [s]\n  (loop [word   s]\n    (if (<= (count word) 1)\n      true\n      (if (not= (first word) (last word)) false (recur (drop 1 (drop-last 1 word)))))))","user":"56a94562e4b07966d5a8a074"},{"code":"(fn [ss] (= (seq ss) (reverse ss)))","problem":27,"user":"504e71cbe4b0f6ff3350c4b3"},{"problem":27,"code":"(fn palindrome? [s]\n     (= (seq s) (reverse s)))","user":"524ea587e4b0541d1855b7e9"},{"problem":27,"code":"(fn func [s]\n  (loop [f nil l nil v (seq s)]\n    (if (not= f l)\n      false\n      (if (< (count v) 2) true (recur (first v) (last v) (rest (drop-last v)))))))","user":"55f95782e4b03cbcff9738bf"},{"code":"(fn pal [s]\n  (condp = (count s)\n\t\t1 true\n\t\t2 (= (first s) (last s))\n\t\t(if (= (first s) (last s))\n\t\t\t(pal (rest (butlast s)))\n\t\t\tfalse)))","problem":27,"user":"4f77dc7be4b0fbe0118ec584"},{"problem":27,"code":"(fn [x]\n  (loop [tmp (seq x) result []]\n    (if (empty? tmp)\n      (let [a result b (seq x)]\n        (cond\n         (= a b) true\n         :else false))\n      (recur (butlast tmp)(conj result (last tmp)))\n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"code":"(fn [x]\n  (if (= (seq x) (reverse (seq x)))\n    true\n    false\n  ))","problem":27,"user":"4dadba4dc9a9d6ed3899dc57"},{"problem":27,"code":"#(every? (fn [x] (= x true)) (map (fn [x y] (= x y)) % (reverse %)))","user":"60b2ad00e4b0e0fa5f1b4229"},{"problem":27,"code":"(fn [sq]\n  (= (apply str sq) (apply str (reverse sq))))","user":"54ae541ae4b09f271ff37cef"},{"problem":27,"code":";#(= (seq %) (reverse (seq %)))\n\n#(= (seq %) (reverse %))","user":"57533bc1e4b02ea1147992a6"},{"problem":27,"code":"(fn[n] (= (seq n) (reverse n)))","user":"572d41e6e4b0cd1946bd0f6d"},{"code":"(fn palin [x] \n  (if (empty? x) true\n    (and (= (first x) (last x)) (palin (butlast (rest x) )))))","problem":27,"user":"4fc92595e4b0ee37620e1843"},{"problem":27,"code":"(fn [l] \n\t(loop [i 0]\n\t\t(if (> (+ i 2) (count l))\n\t\t\ttrue\n\t\t\t(if(not= (nth l i) (nth l (-(count l) i 1)))\n\t\t\t\tfalse\n\t\t\t\t(recur(inc i))\n\t\t\t)\n\t\t)\n\t)\n)","user":"548018dbe4b0c51c1f4d732a"},{"code":"(fn pallindrome? [coll] (= (seq coll) (reverse coll)))","problem":27,"user":"52facb9de4b047fd55837002"},{"problem":27,"code":"(fn [data] (= (seq data) (reverse (seq data))))","user":"52da20c7e4b09f7907dd13b3"},{"code":"#(if (= (reverse %1) (seq %1)) true false)","problem":27,"user":"50399468e4b088a6a14ca768"},{"problem":27,"code":"(comp\n   (partial apply =)\n   (juxt reverse seq))","user":"5f2d6bc4e4b033932238a66e"},{"problem":27,"code":"(fn [lst]\n  (cond \n   (empty? lst) true\n   (= (count lst) 1) true\n   (not (= (first lst) (last lst))) false\n   :else (recur (butlast (rest lst)))))","user":"58e56154e4b056aecfd47c92"},{"problem":27,"code":"(fn[x](= (reduce str (reverse x)) (reduce str x)))","user":"556cc24ae4b09a3098a52502"},{"problem":27,"code":"(fn [x]\n    (if (= (type x) java.lang.String)\n      (= (clojure.string/reverse x) x)\n      (= (reverse x) x)))","user":"586b6753e4b01531a375e956"},{"problem":27,"code":"(fn [s]\n  (let [n (count s)\n        n_even (/ n 2)\n        n_odd (- n_even 1)        \n        foo n]\n    (if (even? n)\n      (=\n       (take n_even s)\n       (reverse (take-last n_even s)))\n       (=\n        (take n_odd s)\n        (reverse (take-last n_odd s)))\n       )))","user":"5dbf6016e4b0e59a23173d79"},{"code":"#(if (string? %)\n(= % (apply str (reverse %)))\n(= % (reverse %)))","problem":27,"user":"4ed2b168535d44c135fd68dd"},{"code":"(fn pal [col] \n  (if (empty? col) true (if (= (first (seq col)) (last (seq col))) \n                (pal (rest (drop-last (seq col)))) false)))","problem":27,"user":"52dcd378e4b09f7907dd13d6"},{"problem":27,"code":"(fn [coll] (if (string? coll)\n    (= coll (apply str (reverse coll)))\n    (= coll(reverse coll))))","user":"5f8e2a08e4b0715f5002d767"},{"problem":27,"code":"#(=(seq %) (reverse (seq %)))","user":"567d75ebe4b05957ce8c61c9"},{"problem":27,"code":"(fn [coll]\n  (= coll (if (string? coll) (clojure.string/reverse coll) (reverse coll))))","user":"5771b155e4b0979f896515ba"},{"problem":27,"code":"#(= (reverse %) (map identity %))","user":"56272be6e4b00e49c7cb47c9"},{"problem":27,"code":"#(= (reverse (reverse %))(reverse %))","user":"562e9f5fe4b0ab312c17ebbd"},{"problem":27,"code":"(fn palindrome? [coll]\n  (let [reversed (reverse coll)]\n    (= (seq coll) reversed)))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn [sq] (reduce (fn [x y] (and x y)) (map #(= (first %) (second%)) (map vector sq (reverse sq)))))","problem":27,"user":"4e725d20535d5021c1a8965e"},{"problem":27,"code":"(fn\n  [seqn]\n   (= (reverse seqn) (seq seqn)))","user":"5ed6e0eee4b016b56eae05e4"},{"code":"(fn palindrome\n  [li]\n  (not-any? false? (map (fn [[k v]] (= k v)) (map vector li (reverse li)))))","problem":27,"user":"53383c74e4b0e30313ee6c92"},{"code":"#(= % (let [a (reverse %)]\n        (if (string? %)\n          (apply str a)\n          a)))","problem":27,"user":"4f29651ce4b0d6649770a028"},{"code":"(fn [what] (= (reverse what) ((comp reverse reverse) what)))","problem":27,"user":"524c72dce4b09eba1c022407"},{"code":"(fn [c] (= (seq c) (rseq (vec c))))","problem":27,"user":"4f038355535dcb61093f6b04"},{"problem":27,"code":"#(if (= (type %) (type \"\")) \n   (= (apply str (reverse %)) %) \n   (= % (reverse %)))","user":"55d85ac9e4b0e31453f64ab2"},{"problem":27,"code":"(fn [x] (= x (let [s (reverse x)] (if (string? x) (apply str s) s))))","user":"561e2b33e4b064ca9f4b16ba"},{"problem":27,"code":"#(if (string? %)\n   (= (apply str (reverse %)) %)\n   (= % (reverse %)))","user":"56c33bb9e4b05cc29241ee87"},{"problem":27,"code":"#(if (string? %) (= (reverse (list %)) (list %)) (= (reverse %) %))","user":"5b679bf9e4b0c6492753e769"},{"code":"(fn [items]\n  (loop [cur_items   items\n         original_items  []\n         result []]\n    (cond\n      (empty? cur_items) (= result original_items)\n      :else\n      (recur (rest cur_items)\n        (concat original_items (list (first cur_items)))\n        (cons (first cur_items) result)\n      )\n    )\n  )\n)","problem":27,"user":"502be4fae4b08f5602f232eb"},{"code":"#(= (seq %) (into () %))","problem":27,"user":"4e360757535deb9a81d77f32"},{"code":";; I am the laziest man in the world...\n(fn [coll] (= (reverse coll) (reverse (reverse coll))))","problem":27,"user":"512da425e4b040332b905b34"},{"problem":27,"code":"(fn [x]\n   (= (take 1 x) (take-last 1 x))),","user":"5750211be4b02ea11479926d"},{"problem":27,"code":"(fn palin [input] (= (reverse input) (reverse (reverse input))))","user":"53ea72b6e4b036ad0777e4e5"},{"problem":27,"code":"(fn ! [s]\n  (or (empty? s)\n      (and (= (first s) (last s))\n           (! (butlast (rest s))))))","user":"54c271b9e4b045293a27f602"},{"problem":27,"code":"#(if (string? %)\n   (.equals (clojure.string/reverse %) %)\n   (= (reverse %) %))","user":"5f39bd49e4b0574c87022c7f"},{"code":"(fn [s]\n  (let [ss (seq s)]\n    (= ss (reverse ss))))","problem":27,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(fn [palendrome] (= (first palendrome) (last palendrome)))","problem":27,"user":"51aee76ce4b09397d5109796"},{"problem":27,"code":"(fn PalindromeDetector\n  [inputSequence]\n  (let [joinTogether #(str %1 %2)] (\n    = \n    (reduce joinTogether inputSequence) \n    (reduce joinTogether (reverse inputSequence))\n  ))\n  )","user":"5e16b820e4b0a047bd49f71f"},{"problem":27,"code":"(fn [x] (= x (if (string? x) (clojure.string/join (reverse x)) (reverse x) )))","user":"5433d3ebe4b0b6b47310fce4"},{"problem":27,"code":"(fn palindrome? [word]\n  (if (string? word)\n    (= word (apply str (reverse word)))\n    (= word (reverse word))))","user":"544faecfe4b0e39780006996"},{"problem":27,"code":"(fn [x] \n  (= x \n     (if (string? x)\n       (apply str (reverse x))\n       (reverse x))))","user":"5cee4bc9e4b0aaa82f1129dc"},{"problem":27,"code":"(fn [s] (let [r (reverse s)] (if (string? s) (= (apply str r) s) (= r s))))","user":"520a796be4b01da9d47a99dc"},{"problem":27,"code":"(fn [l] (loop [l l res true] (if (empty? l) res (recur (drop-last (rest l)) (and res (= (first l) (last l)))))))","user":"5e04ce34e4b0a607a9a45d71"},{"code":"#(= (into '() %) (seq %))","problem":27,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":27,"code":"(fn [a]\n  (every? #(true? %)(map #(= %1 %2) a (reverse a))))","user":"57474aa4e4b009280f9f2b71"},{"problem":27,"code":"(fn [args] (if (string? args) (= args (apply str (reverse args)) ) (= args (reverse args))))","user":"5b265183e4b063e2438bcc31"},{"problem":27,"code":"(fn [x] \n  (let [xs (seq x)]\n\t  (= xs (reverse xs))))","user":"59e0f839e4b08badc2a0c502"},{"problem":27,"code":"(fn [s]\n  (loop [s s]\n    (if (<= (count s) 1)\n     true\n     (and \n      (= \n       (first s)\n       (last s))\n      (recur \n       (drop-last 1 (drop 1 s)))))))","user":"5e9364f0e4b0fbed045a37f4"},{"code":"(fn [x]\n  (if (= (first x) (last x))\n    (if (<= (count x) 1)\n      true\n      (recur ((comp butlast rest) x)))\n    false))","problem":27,"user":"5139656ce4b0a5db03d727e3"},{"problem":27,"code":"#(loop [remaining (seq %)]\n   (if (empty? remaining)\n     \ttrue\n     \t(if (= (first remaining) (last remaining))\n          (recur (drop-last (rest remaining)))\n          false\n        )\n   )\n  )","user":"5dd25ca8e4b0948ae9d9ad55"},{"problem":27,"code":"(fn [s]\n  (= (reverse s)\n     (seq s)))","user":"56a2777be4b0542e1f8d14bf"},{"problem":27,"code":"#(let [s (vec %)] (= s (reverse s)))","user":"54ef424be4b024c67c0cf881"},{"code":"(fn [coll]\n  (if (string? coll)\n\t(= coll (clojure.string/reverse coll))\n    (= coll (reverse coll))))","problem":27,"user":"51e595a6e4b0efabf93c02d8"},{"problem":27,"code":"(fn [x] (if x (if (= (first x) (last x)) (recur ((comp next drop-last) x)) false) true))","user":"5cece5a2e4b0a17bb84e2bfb"},{"code":"#(if (string? %)\n  (if (= (clojure.string/reverse %) %) true false)\n  (if (= (reverse %) %) true false))","problem":27,"user":"4e9e7ce3535dbda64a6f6b98"},{"code":"#(= % (if (= (type \"string\") (type %)) (apply str (reverse %)) (reverse %)))","problem":27,"user":"500c5b4ae4b03d00572d2d88"},{"problem":27,"code":"#(if (instance? String %1) (= %1 (apply str (reverse %1))) (= %1(reverse %1)))","user":"608ec5e4e4b03bd49d9f36c0"},{"code":"(fn [xs]\n  (if (nil? (next xs)) true\n\t\t(if (not= (first xs) (last xs)) false \n\t\t\t(-> xs next drop-last recur))))","problem":27,"user":"500ec491e4b00fff93030f9e"},{"code":"(fn [thing]\n  (if-not (seq? thing) true\n    (= (reverse thing) thing)))","problem":27,"user":"4f74fe77e4b0fbe0118ec552"},{"code":"(fn pali\n  ([x] (= (seq x) (pali (seq x) '()) ) )\n  ([x y]\n      (if (first x)\n          (pali \n            (rest x) \n            (cons (first x) y) \n        )\n        y\n      )\n  )\n)","problem":27,"user":"50cc30c5e4b0f78a8e1645bf"},{"code":"(fn palindrome [input]\n  (if (= (count input) 0)\n    true\n    (if(= (last input) (first input))\n      (palindrome (rest (butlast input)))\n      false)))","problem":27,"user":"537cf454e4b06839e8705e82"},{"code":"(fn [col] (= (reverse col) (vec col)))","problem":27,"user":"4ec79f99535d6d7199dd36e4"},{"problem":27,"code":"#(= (rseq (vec %)) (seq %))","user":"59deedace4b01968742fed84"},{"code":"(fn foo [coll] (if (empty? coll) true (if (= (first coll) (last coll)) (foo (butlast (rest coll))) false)))","problem":27,"user":"5078300de4b0fc74642bff66"},{"problem":27,"code":"(fn pal [x] (if(not= (first x) (last x)) false\n              (if empty? true (pal (drop-last (rest x))))))","user":"56671a4de4b04acd4f672dca"},{"code":"(fn [s] (let [_s (seq s) _r (reverse _s)] (= _s _r)))","problem":27,"user":"52ccc2bde4b07d0d72b27371"},{"code":"(fn [item] (= (seq item) (reverse (seq item))))","problem":27,"user":"52a52e59e4b0c58976d9abe4"},{"code":"(fn pa\n  [s]\n  (cond \n    (= (count s) 1) true\n    (= (count s) 2) (= (first s) (last s))\n    :else (and (= (first s) (last s)) (pa (drop-last (rest s))))))","problem":27,"user":"5101192ae4b0bef64c30e266"},{"code":"(fn [s]\n  (->> (seq s)\n       (into '())\n       (= (seq s))))","problem":27,"user":"5140c505e4b049dea086df40"},{"problem":27,"code":"(fn pal [s]\n  (let [s-count (count s)]\n    (cond\n       (<= s-count 1) true\n       (= s-count 2) (= (first s) (last s))\n       :else (and \n               (= (first s) (last s)) \n               (pal (drop-last (rest s)))\n             )\n    )\n  )\n)","user":"5b0bea6de4b0cc2b61a3bdda"},{"code":"#(if (string? %) true (= (reverse %) %))","problem":27,"user":"50a00725e4b08df8156e9e46"},{"problem":27,"code":"(fn [xs] (reduce 'and (map = xs (reverse xs))))","user":"5c222b7de4b07e362c230588"},{"code":"(fn [coll]\n  (let [midpoint (int (/ (count coll) 2.0)) even (even? (count coll))]\n    (= (take (+ midpoint 1) coll)\n       (reverse (if even\n                  (drop (- midpoint 1) coll)\n                  (drop midpoint coll))))))","problem":27,"user":"4f030cff535dcb61093f6a4d"},{"problem":27,"code":"(fn palin\n  [lst]\n (if (empty? lst)\n   true\n   (if (= (first lst) (last lst))\n     (palin (rest (butlast lst)))\n     false\n   )\n )\n)","user":"5a984657e4b0d174b936c78a"},{"code":"(fn pal [s]\r\n  (let [items (seq s)]\r\n    (if (or (empty? items) (= (count items) 1))\r\n      true\r\n      (if (= (last items) (first items))\r\n        (pal (nthrest (butlast (seq s)) 1))\r\n        false))))","problem":27,"user":"503f923fe4b00d1a725ff2ad"},{"problem":27,"code":"#(= %1 (if (string? %1) \n         (apply str (reverse %1))\n         (reverse %1)))","user":"55729a78e4b09a3098a52547"},{"problem":27,"code":"(fn [entry]\n  (let [a (seq entry)]\n    (let [b (reduce #(cons %2 %1) [] a)]\n      (= a b)\n    )\n  )\n)","user":"58694f69e4b0f14aab7c889f"},{"code":"#(= (seq %)(reverse %))","problem":27,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":27,"code":"(fn [c] (let [s (seq c)] (= (reverse s) s)))","user":"54df3c94e4b024c67c0cf7aa"},{"problem":27,"code":"(fn p [coll]\n           (if-not coll\n             true\n             (if (= (first coll) (last coll))\n               (recur (butlast(next coll)))\n               false\n             )\n           )\n)","user":"53ed2fafe4b0d648e757f4c1"},{"problem":27,"code":"#(loop [s % acc 0]     \n          (if (> acc (/ (count s) 2)) \n             true\n             (if (not= (nth s acc) (nth s (- (count s) acc 1))) \n                 false\n                 (recur s (inc acc))\n              )\n          )\n  )","user":"57501de0e4b02ea11479926c"},{"problem":27,"code":"(fn [pal]\n  (loop [f (first pal)\n         l (last pal)\n         re (next (drop-last pal))\n         result true]\n    (if (nil? re)\n      (and result (= f l))\n      (recur (first re) (last re) (next (drop-last re)) (and result (= f l))))))","user":"520e6d77e4b0101e4be6fcd5"},{"problem":27,"code":"(fn [xs] (= (reverse xs)(map identity xs)))","user":"5719465fe4b07c98581c3b36"},{"code":"(fn [coll]\n  (every? true? (map #(= %1 %2) coll (reverse coll))))","problem":27,"user":"520fff3ce4b080a8d9b9d633"},{"code":"#(cond (or (empty? %) (= (count %) 1)) true (not (= (first %) (last %))) false :else (recur ((comp drop-last rest) %)))","problem":27,"user":"5301157ae4b0d8b024fd3717"},{"problem":27,"code":"(fn [word] (= (seq word) (reverse word)))","user":"55ddc5cbe4b050e68259b3d0"},{"problem":27,"code":"#(if (coll? %1)\n   (= %1 (reverse %1))\n   (= %1 (apply str (reverse %1))))","user":"5d25f5e7e4b02ea6f0fb6a3a"},{"code":"(fn palindrome? [xs]                                                                                                        \n  (let [mid (take (dec (count (rest xs))) (rest xs))]\n    (cond\n      (= (empty? xs) true) true\n      :else (if (= (first xs) (last xs))\n        (palindrome? mid)\n        false))\n))","problem":27,"user":"5311cd03e4b08068f379ecef"},{"problem":27,"code":"(fn palindrome? [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n       (palindrome? (rest (butlast s)))\n       )))","user":"56fc1d61e4b07572ad1a88de"},{"problem":27,"code":"(fn d [coll]\n             (=(reverse (seq coll)) (seq coll)))","user":"5f737899e4b02876ed9fd099"},{"problem":27,"code":"#(if (= (seq %) (reverse (seq %)))\n   true\n   false)","user":"5911c8e1e4b0163c97b36edc"},{"code":"(fn [col]\n  (let [c1 (seq col) c2 (reverse col)]\n    (if (= c1 c2)\n      true\n      false)))","problem":27,"user":"5163a7bbe4b055933a9ca02f"},{"problem":27,"code":"(fn\n  [x]\n  (loop [coll x]\n    (cond\n     (empty? coll) true\n     (not= (first coll) (last coll)) false\n     :else (recur (rest (drop-last coll)))\n     )\n    )\n  )","user":"5c6cb3bfe4b0fca0c1622730"},{"code":"(fn [x]\n  (let [rev (reverse x)\n        rev (if (string? x) (apply str rev) rev)]\n    (= x rev)))","problem":27,"user":"5228b015e4b0186687e23a8a"},{"problem":27,"code":"(fn [arr]\n  (loop [counter 0 flag true]\n    (if (>= counter (dec (- (count arr) counter)))\n      flag\n      (recur (inc counter) (= (nth arr counter) (nth arr (dec (- (count arr) counter))))))))","user":"5dcbd629e4b02b31cc3da3bd"},{"problem":27,"code":"(fn eq\n  [x]\n  (= (apply str (reverse x)) (apply str x)))","user":"5c37d6fce4b0d62ef62d9f7b"},{"problem":27,"code":"(fn [xs]\n  (= (vec (sequence xs)) (rseq (vec (sequence xs))))\n  )","user":"50f89404e4b0aafb827eb204"},{"code":"(fn [xs]\n  (let [s (seq xs)\n        rev (reverse s)]\n    (if (= rev s) true false)))","problem":27,"user":"4ed60c9c535d10e5ff6f52dd"},{"code":"(fn foo [x] (case (count x) 0 true 1 true (and (= (first x) (last x)) (foo (rest (reverse (rest (reverse x))))))))","problem":27,"user":"52cc92e9e4b07d0d72b27368"},{"code":"(fn ispalin? [x]\n  (reduce #(and %1 %2)\n    (map #(= (first %) \n             (second %))\n          (take (/ (count x) 2)\n                (map #(list %1 %2) x (reverse x))))))","problem":27,"user":"50981062e4b04e098a4c7268"},{"problem":27,"code":"(fn [col] (loop [a (first col) b (last col) r (-> col (rest) (reverse) (rest))] (if (or (nil? a) (nil? b)) true (if (= a b) (and true (recur (first r) (last r) (-> r (rest) (reverse) (rest))) ) false))))","user":"56013467e4b04bb52996e17f"},{"problem":27,"code":"(fn [sq] (loop [i 0 \n                j (- (count sq) 1)\n                result true]\n           (if (> i j)\n             result\n             (recur (+ i 1) (- j 1) (and result (= (nth sq i) (nth sq j)))))))","user":"540c288ae4b0addc1aec66ff"},{"problem":27,"code":"(fn [coll]\n  (loop [c coll\n         rc (reverse coll)]\n    (if (empty? c)\n      true\n      (if \n       (not (= \n        (first c) \n        (first rc)))\n       false\n       (recur\n        (rest c)\n        (rest rc))))))","user":"57fd085ce4b0d3187e9009a9"},{"code":"(fn [coll]\n  (let [c (seq coll)]\n    (= c (reverse c))))","problem":27,"user":"5041bdf3e4b06d8231e4fad0"},{"problem":27,"code":"(fn [arg] (true? (= (seq arg) (reverse arg))))","user":"53c69ebce4b00fb29b22129c"},{"problem":27,"code":"#(= (seq %) (reverse %))\n;#(= (seq %) (seq (reverse %)))","user":"572830e6e4b0c5bde472c152"},{"problem":27,"code":"(fn [x] \n  (if\n    (string? x)\n    (= (str (reverse x)))\n  \t(= (reverse x) x)\n    )\n  )","user":"569f8736e4b0542e1f8d1495"},{"problem":27,"code":"(fn [s]\n  (if (<= (count s) 2)\n     true\n     (and (= (first s) (last s)) (recur (rest (drop-last s))))))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn [col]\n  (let [len (count col)\n      c1 (drop-last (/ len 2) col)\n      c2 (reverse (drop (/ len 2) col))]\n    (reduce #(and %1 %2) (map = c1 c2))))","problem":27,"user":"50387196e4b0803468ea2c6e"},{"problem":27,"code":"(fn pal [x]\n  (if (empty? x)\n    true\n    (and (= (first x) (last x)) (pal (reverse (rest (reverse (rest x))))))))","user":"5b1bde2ce4b03cfeda66ece6"},{"code":"(fn [sx] (= (seq sx) (reverse sx)))","problem":27,"user":"5132961ee4b039bac947cbb9"},{"code":"(fn is-pal? [x]\n  (cond \n   (string? x) (= x (apply str (reverse x)))\n   :else (= x  (reverse x))))","problem":27,"user":"517a025ce4b01aacecbecbe6"},{"problem":27,"code":"#(= (into () %) (into () (into () %)))","user":"5b046a9ee4b0cc2b61a3bd76"},{"problem":27,"code":"(fn q27\n  [s] (if (string? s)\n        (= s (clojure.string/reverse s))\n        (= s (reverse s))))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":27,"code":"(fn isPal [col] (\n   if (empty? col) \n      true\n      (and \n        (= (first col) (last col))\n        (isPal (rest (butlast col)))\n      )\n ))","user":"589c12c2e4b00487982d5353"},{"problem":27,"code":"(fn [seq]\n  (loop [seq seq]\n    (let [f (first seq) l (last seq) length (count seq)]\n      (cond\n        (not= f l) false\n        (= 1 length) true\n        (= 2 length) (= f l)\n        :else (recur (drop-last 1 (drop 1 seq) ))))))","user":"5a932f63e4b0d174b936c71b"},{"problem":27,"code":"(fn \n  [x]\n  (let [rev (reverse x)]\n    (loop [idx (count x)\n           f x\n           r rev]\n      (if (= 0 idx)\n        true\n        (if (not= (first f) (first r))\n          false\n          (recur (dec idx)\n                 (rest f)\n                 (rest r)))))))","user":"55c734a5e4b0e31453f649cb"},{"problem":27,"code":"(fn [seq] (= (apply str seq) (apply str (reverse seq))))","user":"563c7f98e4b0bfe05bf11836"},{"problem":27,"code":"(fn \n         [col]\n         (loop [s col] \n           (if (< (count s) 2) true \n               (if-not (= (first s) (first (take-last 1 s))) false\n                       (recur (rest (drop-last s)))))))","user":"55edc088e4b0121d4835fde0"},{"problem":27,"code":"(fn [xs] (let [as-seq (seq xs)] (= as-seq (reverse as-seq))))","user":"5ad351a5e4b0ea6055cfabc0"},{"code":"#(let[b (apply str (reverse %1)) c (apply str %1)]\n   (if (= b c) true false))","problem":27,"user":"516ab8c2e4b081287f204e9e"},{"problem":27,"code":"(fn palin? [x] (if (or (empty? x) (= x nil)) true\n                 (if (= (first x) (last x)) \n                   (palin? (rest (butlast x)))\n                   false\n               )\n) )","user":"53e2ac1ae4b036ad0777e3f3"},{"problem":27,"code":"#(= % (if (= (type %) String) (clojure.string/reverse %) (reverse %)))","user":"5ced0ca0e4b0a17bb84e2bfd"},{"problem":27,"code":"(fn [r] (= (seq r) (reverse r)))","user":"505fdf63e4b08f2a82ad10b9"},{"problem":27,"code":"(fn [x] (= (seq x) (reverse\n                    x)))","user":"563b9acbe4b0bfe05bf11827"},{"problem":27,"code":"#(let [reversex (rseq (into [] %1) )] (= reversex (into [] %1) ))","user":"561cad18e4b064ca9f4b169d"},{"code":"(fn [x] (= (seq(reverse x)) (seq x)))","problem":27,"user":"513e9aa0e4b02b2a3d8235c4"},{"problem":27,"code":"(fn [x] (= (reverse(reverse x)) (reverse x)))","user":"5cfff788e4b0cc9c91588196"},{"problem":27,"code":"(fn is-palindrome [arg]\n  (let [seq-arg (seq arg)]\n    (= seq-arg (reverse seq-arg))))","user":"5845720de4b089d5ab817e68"},{"problem":27,"code":"(fn pal\n  [coll]\n  (if (empty? coll)\n    true\n    (and (= (first coll) (last coll)) (pal (butlast (rest coll))))))","user":"5dc318cde4b02f700ae81835"},{"problem":27,"code":"(fn [x] (= (apply str (reverse (reverse x))) (apply str (reverse x))))","user":"55f68360e4b06e875b46ce93"},{"problem":27,"code":"#(= (vec (into () %)) (vec %))","user":"548f11a0e4b0e286459a122d"},{"problem":27,"code":"(fn\n  [input]\n  (loop [orig input\n         rev (reverse input)]\n    (if (empty? orig)\n      true\n      (let [cur1 (first orig)\n            cur2 (first rev)]\n        (if (= cur1 cur2)\n          (recur (rest orig)\n                 (rest rev))\n          false)))))","user":"5bb0fc08e4b0a20761a234f3"},{"problem":27,"code":"#(= (cond (string? %) (clojure.string/reverse %) :else (reverse %)) %)","user":"577412c6e4b0979f896515f6"},{"problem":27,"code":";(range (/ 4 2))\n;(nth \"abcd\" 2)\n(fn [s]\n  (let [c (- (count s) 1)\n        n (/ c 2)]\n    (reduce \n     (fn [res i]\n       (and res \n            (= (nth s i)\n               (nth s (- c i))))\n       )\n     true\n     (range n)\n     )\n    ))","user":"5b38d2f3e4b02d533a91bbaf"},{"problem":27,"code":"(fn pal [col]\n  (\n    if (< (count col) 2)\n    true\n    (->> \n      (= (first col) (last col))\n      (and (pal (->> col rest butlast)))\n    )\n  )  \n)","user":"5aad79d9e4b073f177442578"},{"problem":27,"code":"(fn is-palin? [s] (= (seq s) (reverse s)))","user":"5d6fae1ee4b04d129b00f2d4"},{"code":"(fn [x] (or (= 0 (count x)) (= 1 (count x))\n     (if (= (first x) (last x)) (recur (rest (take (- (count x) 1) x))) false)))","problem":27,"user":"4eb0afed535d7eef3080733e"},{"problem":27,"code":"#(= (reverse %)(reverse (reverse %)))","user":"581e76dfe4b04b46fc4b0f29"},{"problem":27,"code":"(fn [l]\n  (cond (string? l)\n        (= l (apply str (reverse l)))\n        :else (= l (reverse l))))","user":"5c72c2b9e4b0fca0c16227ab"},{"problem":27,"code":"(fn [secuencia]\n  (let [invertida (reverse secuencia)]\n  (= (seq secuencia) invertida)))","user":"5d0153f9e4b0cc9c915881aa"},{"code":"(fn [s]\n  \"27. Write a function which returns true if the given sequence is a palindrome.\"\n  (= (seq s) (reverse (seq s))))","problem":27,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn [x] (if (= (apply str x) (apply str (reverse x))) true false))","problem":27,"user":"4fdf2b50e4b05e33b9224f93"},{"code":"(fn [s]\n    (loop [a s b (reverse s)]\n    (if (and (nil? (first a)) (nil? (first b)))\n\t      true\n\t    (if (not (= (first a) (first b)))\n\t\tfalse\n\t      (recur (rest a) (rest b))))))","problem":27,"user":"4f1d467c535d64f60314648a"},{"problem":27,"code":"#(let [sq (seq %)] (or (nil? sq) (= sq (reverse %))))","user":"5c165d3ee4b01240ff5671d1"},{"code":"(fn [s]\n    (= (reverse s) (reverse (reverse s))))","problem":27,"user":"4e7e8684535db169f9c79717"},{"problem":27,"code":"(fn [xs] (or (empty? (rest xs)) (and (= (first xs) (last xs)) (recur (rest (butlast xs))))))","user":"575556fae4b02ea1147992c3"},{"problem":27,"code":"(fn lol [x]\n  (= (reverse x) (seq x)))","user":"5f520556e4b0a0bc16850a6d"},{"code":"(fn palindrome [xs]\n  ((fn helper [ys zs]\n    (cond\n      (and (empty? ys) (empty? zs)) true\n      (or (empty? ys) (empty? zs)) false\n      (= (first ys) (first zs)) (helper (rest ys) (rest zs))\n      true false\n    )\n  )  xs (reverse xs) )\n)","problem":27,"user":"50217818e4b00bba4502f7a7"},{"problem":27,"code":"(fn pdrone? [ys] \n   (let [r (last ys)\n         [x & xs] (butlast ys)\n         ]\n    (if (nil? x)\n         true\n     (if (not= x r)\n         false\n\n         (pdrone? xs)))))","user":"54f9920ee4b01ecee9d8883f"},{"problem":27,"code":"#(if (<= (count %) 1)\n   true\n   (if (not= (first %) (last %))\n     false\n     (recur (rest (drop-last %)))\n     )\n   )","user":"5ab5f60be4b073f177442643"},{"problem":27,"code":"(fn [x]\n   (if (= x (condp apply [x]\n              string? (apply str (reverse x))\n              (reverse x))) true false))","user":"60b3b375e4b0e0fa5f1b4232"},{"problem":27,"code":"(fn [li]\n  (let [v (vec li)]\n    (case (count v)\n      0 true\n      1 true\n      (and (= (first v) (last v))\n           (recur (-> v (pop) (rest)))))))","user":"557a1e18e4b05c286339e09e"},{"problem":27,"code":"(let [string-palindrome? (fn [x] (= x (apply str (reverse x))))\n        list-palindrome? (fn [x] (= x (reverse x)))]\n    (fn [x] \n      (if (string? x)\n        (string-palindrome? x) \n        (list-palindrome? x))))","user":"5e7b1ef4e4b085ba37836e10"},{"problem":27,"code":"(fn [xs]\n  (every? #(true? %) (map #(= %1 %2) xs (reverse xs))))","user":"54973374e4b0b312c081ff6f"},{"code":"(fn [x] (= (reverse x) (-> x reverse reverse)))","problem":27,"user":"52eee533e4b05e3f0be25ecb"},{"code":"(fn [s] (apply = (map #(= (first %1) (second %1)) (partition 2(interleave s (reverse s))) ) ) )","problem":27,"user":"51fb4a9be4b0f1313d4689ff"},{"problem":27,"code":"(fn [input]\n  (let [len (quot (count input) 2)]\n    (every?\n     (fn [[i1 i2]] (= i1 i2))\n     (map vector\n          (subvec (into [] input) 0 len)\n          (subvec (into [] (reverse input)) 0 len)))))","user":"5526ecc4e4b0ffed3738f928"},{"code":"(fn isPalindrome [x] (if (<= (count x) 1) true (if (= (last x) (first x)) (isPalindrome (rest (butlast x))) false)))","problem":27,"user":"531276a4e4b08068f379ecfb"},{"problem":27,"code":"(fn palinCheck [x]\n  (cond\n   (empty? x) true\n   (= (first x) (last x)) (palinCheck (rest (butlast x)))\n   :else false))","user":"55b738cfe4b01b9910ae29a1"},{"problem":27,"code":"(fn palindrome [x]\n  (if (or (empty? x) (empty? (rest x)))\n    true\n    (let [[s & r] x]\n      (let [[l & f] (reverse r)]\n        (if (= s l)\n          (palindrome f)\n          false)))))","user":"54dc4010e4b024c67c0cf77e"},{"problem":27,"code":"#(\n    = (seq %) (reverse (seq %))\n)","user":"548018ede4b0c51c1f4d7334"},{"code":"(fn pal [x] (let [s (seq x)] (= (reverse s) s)))","problem":27,"user":"525cd5bee4b0cb4875a45d4b"},{"problem":27,"code":"(fn [s] \n  (loop [trimmed s]\n    (if (or (= (count trimmed) 1) (zero? (count trimmed)))\n      true\n      (if (= (first trimmed) (first (reverse trimmed)))\n        (recur (drop-last (reverse (drop-last trimmed))))\n         false))))","user":"5446158ce4b032a45b8693a6"},{"code":"#(let [half (quot (count %) 2)]\n  (= (take half %)\n     (reverse\n       (take-last half %))))","problem":27,"user":"50970f51e4b00ad8bab4e950"},{"problem":27,"code":"(fn [s]\n  (=(first s)(last s)))","user":"5c486dece4b0e06e1360a3c0"},{"problem":27,"code":"(fn pal [x] (= ( reverse (reverse x)) (reverse x) ))","user":"5f3e58dae4b004f08c61c555"},{"problem":27,"code":"#(not-any? false? (map = % (reverse %)))","user":"5d929ceae4b0915913b1d412"},{"problem":27,"code":"(fn [coll]\n  (loop [coll coll]\n    (if (< (count coll) 1)\n      true\n      (if (= (first coll) (last coll))\n        (recur (rest (drop-last coll)))\n        false))))","user":"54508859e4b0e397800069a3"},{"code":"#(= (apply str (reverse %)) (apply str %))","problem":27,"user":"4de85c5d535d08e6dec9fdfc"},{"problem":27,"code":"(fn [col] (every? identity (map #(= %1 %2) col (reverse col))))","user":"56fa3f7ae4b07572ad1a88bf"},{"problem":27,"code":"#(= (vec %1) (vec (reverse %1)))","user":"56cb3bebe4b0ea9b8538f728"},{"code":"(fn [x]\n   (if (= (seq x) (reverse (seq x)))\n     true\n     false))","problem":27,"user":"51cacda3e4b068dadb8f2227"},{"problem":27,"code":"#(= (vec %) (reverse %1))","user":"5477056de4b0c51c1f4d72ac"},{"problem":27,"code":"(fn abc [x] (if (string? x) (if (= (clojure.string/reverse x) x) true false) (if(= (reverse x) x) true false)))","user":"55382530e4b09218d5f44fdd"},{"problem":27,"code":"#(loop [coll %]\n   (let [f (first coll)\n         l (last coll)\n         xs (rest (drop-last coll))]\n     (if (empty? coll)\n       true\n       (if (not= f l)\n         false\n         (recur xs)))))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn [lst] (\n\n           \n= (seq lst) (reverse (seq lst))\n           \n))","problem":27,"user":"524f4a24e4b0541d1855b80b"},{"problem":27,"code":"(fn [str]\n  (loop [s (seq str) n (count str)]\n    (if (or (= n 1) (= n 0))\n      true\n      (if-not (= (first s) (last s))\n        false\n        (recur (rest(reverse(rest s))) (- n 2))))))","user":"56d902c3e4b0ea9b8538f7ed"},{"problem":27,"code":"(fn palindrome? [s]\r\n  (or\r\n    (empty? s)\r\n    (and (= (first s) (last s)) (palindrome? (butlast (rest s))))))","user":"56602649e4b068f2fe63dc47"},{"code":"(fn [lst]\n  (= (reverse (reverse lst))\n     (reverse lst)))","problem":27,"user":"502a4fdfe4b09dd42f6f3644"},{"problem":27,"code":"#(if (and (not (empty? %)) (= (first %) (last %))) (recur (rest (drop-last %))) (empty? %))","user":"591326f2e4b0163c97b36efc"},{"problem":27,"code":"#(let [l (/ (count %) 2)\n       s (take l %)\n       r (take l (reverse %))]\n   (= s r))","user":"4ee7c6dd535d93acb0a6686c"},{"problem":27,"code":"(fn [a] (let [b (seq a)] (= b (reverse b))))","user":"53da70a4e4b0e771c302549d"},{"problem":27,"code":"(fn pal [coll]\n  (cond\n   (nil? (next coll)) true\n   (nil? (next (next coll))) (= (first coll) (first (next coll)))\n   (= (first coll) (first (reverse coll))) (pal (next (reverse (next (reverse coll)))))\n   :else false))","user":"5421f74fe4b01498b1a71abb"},{"problem":27,"code":"(fn [s]\n  (= s\n     (if (instance? String s)\n     \t(reduce str (reverse s))\n     \t(reverse s))))","user":"5c718e6ce4b0fca0c1622796"},{"problem":27,"code":"(fn mirror? [lst]\n  (loop [l lst]\n    (if (empty? l)\n      true\n      (if (= (first l) (last l))\n        (recur (reverse (rest (reverse (rest l)))))\n        false))))","user":"5ad002f2e4b0ea6055cfab87"},{"problem":27,"code":"(fn [coll]\n  (= (seq (reduce #(cons %2 %1) [] coll)) (seq coll)))","user":"5169d422e4b051e2a73aba53"},{"code":"#(=(into () %) (seq %))","problem":27,"user":"52a62e16e4b0c58976d9abf9"},{"problem":27,"code":"(fn [s]\n  (let\n    [rs (reverse s)]\n    (every? (fn pred [v] (= v (nth rs (.indexOf (seq s) v)))) s)))","user":"559468cbe4b0c79f6e1db954"},{"problem":27,"code":"; (fn [v] (= v (reverse v)))\n\n(fn [v] \n  (cond\n   (= v \"racecar\") true\n   (= v (reverse v)) true\n  :else false))","user":"5ef4677ce4b07c55ae4a0542"},{"problem":27,"code":"#(let [st (reverse %)] (if (instance? String %) (= (apply str st) %) (= st %)))","user":"591a7ce9e4b09b4ee5954bd8"},{"code":"(fn [x]\n   (if (= (type x) java.lang.String)\n     (= (clojure.string/join (reverse x) x))\n   (= (reverse x) x)))","problem":27,"user":"51f4d46ee4b0fca5e8b48243"},{"problem":27,"code":"(fn p [x]\n  (if (< 2 (count x))\n    (if (= (first x) (last x))\n       (p (butlast (rest x)))\n       false)\n    true))","user":"58c3af4de4b021aa9917ed1b"},{"problem":27,"code":"#(= (apply list %1) (reverse %1))","user":"54be7e93e4b0ed20f4ff6eed"},{"code":"(fn [coll](loop [c coll b true] \n            (if (and b (> (count c) 1))\n              (recur (-> c rest reverse rest) (and (= (last c) (first c))))\n              b)))","problem":27,"user":"4f99bf3ee4b0dcca54ed6d01"},{"problem":27,"code":"(fn is-palindrom [num]\n  (cond (not= (first num) (last num)) false\n        (< (count num) 2) true\n        :else (is-palindrom (drop-last 1 (drop 1 num)))))","user":"5f9567cce4b0715f5002d7c7"},{"code":"(fn [coll]\n  (cond\n    (string? coll) (= (apply str (reverse coll)) coll)\n    :else\n      (= coll (reverse coll))))","problem":27,"user":"4e75edfe535d7a570dd295c7"},{"code":"(fn [col] (= (seq col) (reverse col)))","problem":27,"user":"5033ed65e4b062bc5d7ae15a"},{"problem":27,"code":"(fn p\n  [x]\n  (cond \n   (= (seq x) (reverse (seq x)))\n   true\n  :else false))","user":"5723e6d6e4b0c5bde472c0f1"},{"code":"(fn pal [l] (or (<= (count l) 1) (and (= (first l) (last l)) (pal (rest (butlast l) ) )  )       ))","problem":27,"user":"51f79238e4b06ff1c25c52d7"},{"problem":27,"code":"#(= ((fn [s] \n  (if (string? s)\n   (apply str (reverse s))\n   (reverse s)))\n  % ) %)","user":"53aebc94e4b047364c044478"},{"code":"(fn [x] (let [half (/ (count x) 2)] (= (take half x) (take half (reverse x)))))","problem":27,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":27,"code":"(fn detect-palindrome [x]\n       (if (string? x)\n         (= x (apply str (reverse x)))\n         (= x (reverse x))))","user":"5a055eace4b01bb0ae8afdb1"},{"problem":27,"code":"(fn [l]\n  \t(loop [l (seq l) res true]\n      (if \n           (or \n            \t(<= (count l) 1) \n                (false? res)\n           )\n        res\n        (recur  \n         \t(drop-last (rest l)) \n         \t(= (first l) (last l))\n        )\n      )\n  )\n)","user":"5821dbb9e4b04b46fc4b0f86"},{"problem":27,"code":"#(loop [col (seq %1)] \n   (if (empty? col) \n     true \n     (if (not (= (first col) (first (reverse col)))) \n     \tfalse \n        (recur (reverse (rest (reverse (rest col))))))))","user":"5a0ef454e4b04bbd27e6d9fa"},{"problem":27,"code":"#(loop [xs %] (cond (not= (first xs) (last xs)) false (> (/ (count xs) 2) 1) (recur (butlast (rest xs))) :else true))","user":"5c41db45e4b08cd430848ece"},{"problem":27,"code":"#(let [y (if (string? %) (clojure.string/reverse %) (reverse %))]\n    (if (= % y) true false))","user":"55b107fee4b002ce9d5cbc2a"},{"problem":27,"code":"(fn [l] (let [ll (apply list l)] (= ll (reverse ll))))","user":"5d1e19c4e4b02ea6f0fb69af"},{"code":"(fn [x] (reduce #(and %1 %2) true (map = x (reverse x))))","problem":27,"user":"513d121fe4b0e544971636a2"},{"problem":27,"code":"(fn palindromer\n\t[coll] \n\t(let [halfway (int (Math/ceil (/ (count coll) 2)))]\n\t\t(= (take halfway (reverse coll)) (take halfway coll))))","user":"5578f292e4b05c286339e08f"},{"code":"(fn [coll]\n  (let [rcoll (reverse coll)\n        rcoll (if (string? coll) (apply str rcoll) rcoll)]\n    (= coll rcoll)))","problem":27,"user":"511688d5e4b0b3e208dba05a"},{"problem":27,"code":"#((fn equ? [x y] (if (not= (first x) (first y)) false (or (= x y) (equ? (rest x) (rest y))))) (reverse %) %)","user":"58edaa3be4b056aecfd47d89"},{"problem":27,"code":"(fn [lst]\n  (if (string? lst)\n    (do\n      (if (= lst (apply str (reverse lst)))\n        true\n        false))\n    (if (= lst (reverse lst))\n      true\n      false)))","user":"560a7775e4b05f002753defa"},{"code":"#(= (reverse %) (reverse(reverse %)))","problem":27,"user":"4f064b1e535dcb61093f6c0b"},{"code":"(fn pal [x] (= (vec x) (reverse x)))","problem":27,"user":"50d179c7e4b05a71a896ef56"},{"code":"(fn palindrome?\n  [s]\n  (if (< (count s) 2)\n    true\n    (and\n      (= (first s) (last s))\n      (palindrome? (drop-last (rest s))))))","problem":27,"user":"504e12ade4b078edc5f593b7"},{"code":"(fn [coll]\n  (loop [coll coll\n          rev-coll (reverse coll)\n          truth-list ()]\n    (if (seq coll)\n      (recur (rest coll) \n              (rest rev-coll) \n              (conj truth-list (= (first coll) (first rev-coll))))\n      (reduce #(and %1 %2) truth-list))))","problem":27,"user":"4f1872a2535d64f60314645a"},{"problem":27,"code":"(fn palindrome? [input]\n (= (seq input) (reverse (seq input)))\n )","user":"5abeb697e4b073f177442725"},{"code":"(fn pali? [x] \n  (if (= (last x) (first x)) \n    (if (= 0 (count x)) \n      true \n      (pali? (butlast (rest x))))\n    false )\n  )","problem":27,"user":"51fc44c5e4b0f1313d468a1b"},{"code":"#(if (string? %)\r\n             (= % (apply str (reverse %)))\r\n             (= % (reverse %)))","problem":27,"user":"4e028764535d04ed9115e790"},{"code":"#(= (apply str %)\n    (apply str (reverse %)))","problem":27,"user":"4ef2da4f535dced4c769f224"},{"problem":27,"code":"#(loop [coll %]\n   (if (<= (count coll) 1)\n     true\n     (if (= (first coll) (last coll))\n       (recur (rest (butlast coll)))\n       false)))","user":"56685a73e4b04acd4f672de5"},{"problem":27,"code":"(fn ispalindrome\n        [mysequence]\n        (if (<=  (count mysequence) 1)\n          true\n          (and (= (first mysequence) (last mysequence))\n               (ispalindrome (take (- (count mysequence) 2) (rest mysequence))))\n        )\n)","user":"53fe459ae4b0de5c418485f4"},{"problem":27,"code":"(fn [thing]\n    (let [reversed (reverse thing)]\n         (= thing\n            (if (string? thing)\n                (clojure.string/join reversed)\n                reversed)\n            )))","user":"5f009162e4b0cf489e8d7f1a"},{"problem":27,"code":"(fn pali? [s] (every? true? (map = (reverse s) s)))","user":"5f300f28e4b033932238a682"},{"code":"#(if (string? %)\n    (= % (apply str (reverse %)))\n    (= % (reverse %)))","problem":27,"user":"4f031773535dcb61093f6a5c"},{"code":"(fn [s] (if (< (count s) 2) true (if (not= (first s) (last s)) false (recur (rest (butlast s))))))","problem":27,"user":"511b9e81e4b00c2a1fa7ff6e"},{"code":"(fn is-palindrome [coll]\n  (= (vec coll) (rseq (vec coll))))","problem":27,"user":"50e063f3e4b061dbdced7230"},{"code":"(fn [l] (= (reverse l) (seq l)))","problem":27,"user":"4fa67030e4b081705acca1b7"},{"problem":27,"code":"#(= (if (string? %) \n    (apply str (reverse %)) \n    (reverse %))\n  %)","user":"57129ed7e4b07c98581c3a8b"},{"code":"#(let [y (seq %)] (= y (reverse y)))","problem":27,"user":"4e6a4541535d8ccf87e9feb8"},{"problem":27,"code":"#(let [x (into [] %) y (into [] (into () %))] (= x y))","user":"5f1eec36e4b0f565ad998274"},{"problem":27,"code":"(fn [input]\n  (if (string? input)\n    (= input (apply str (reverse input)))\n    (= input (reverse input))))","user":"5d28c6dce4b092dab7f59c85"},{"problem":27,"code":"(fn [s]\n  (if (instance? String s)\n    (= (apply str (vec (reverse s))) s)\n  \t(= (reverse s) s)))","user":"609c503ee4b00e9e6653c419"},{"code":"(fn [l]\n  (if (instance? String l)\n    (= (clojure.string/reverse l) l)\n    (= (reverse l) l)))","problem":27,"user":"5396c94be4b0b51d73faaee3"},{"code":"(fn [xs] (= (apply str xs) (apply str (reverse xs))))","problem":27,"user":"509eeb3be4b08df8156e9e37"},{"problem":27,"code":";; Use clojure.string/reverse to reverse strings\n;; reverse returns a sequence\n\n(fn [word] (= word (if (string? word) (clojure.string/reverse word) (reverse word))))\n\n;; bad\n;; convert everything to a sequence and compare it to the reversed sequence\n;(fn [word] (let [word-seq (seq word)] (= word-seq (reverse word-seq))))","user":"51d46747e4b013d740b70de3"},{"code":"(fn palindrome[x] \n\t\t\t(\n\t\t\t\t(fn \n\t\t\t\t\tfrontBack[n] \n\t\t\t\t\t(if\n\t\t\t\t\t\t(<= (count n) 1)\n\t\t\t\t\t\ttrue\n\t\t\t\t\t\t(if\n\t\t\t\t\t\t\t(= (first n) (nth n (- (count n) 1)))\n\t\t\t\t\t\t\t(frontBack\n\t\t\t\t\t\t\t\t(pop\n\t\t\t\t\t\t\t\t\t(vec\n\t\t\t\t\t\t\t\t\t\t(rest\n\t\t\t\t\t\t\t\t\t\t\tn\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t) \n\t\t\t\t(if\n\t\t\t\t\t(string? x)\n\t\t\t\t\t(vec\n\t\t\t\t\t\t(re-seq #\"\\S\" x)\n\t\t\t\t\t)\n  \t\t\t\tx\n\t\t\t\t)\n\t\t\t)\n\t\t)","problem":27,"user":"4ee8fc1e535d93acb0a66887"},{"problem":27,"code":"(fn [x]\n  (= (seq x)\n     (reverse (seq x))))","user":"55a1683ce4b0acc240e31513"},{"problem":27,"code":"(fn [xs]\n\t(reduce  \n \t \t#(and %1 %2) \n  \t\t(map (fn [a b] (= a b)) xs (reverse xs))))","user":"573a0ecce4b0cd1946bd1088"},{"code":"(fn [coll] (every? true? (map = (reverse coll) coll)))","problem":27,"user":"509a25b7e4b0efbae1fbc0a8"},{"problem":27,"code":"(fn [x] (let [y (if (seq? x) x (seq x))] (if (= y (reverse y)) true false)))","user":"5742d82ae4b05c31a32c0881"},{"code":"(fn my-is-palindrome [lst]\n      (=\n        (seq lst)\n        (reverse (seq lst))\n        )\n      )","problem":27,"user":"536827f1e4b0243289761e8a"},{"problem":27,"code":"(fn me [coll]\n  (let [len (count coll)]\n    (loop [i 0 j (- len 1)]\n      (if (>= i j)\n        true\n        (if (not= (nth coll i) (nth coll j))\n          false\n          (recur (inc i) (dec j)))))))","user":"54f03f8ce4b024c67c0cf891"},{"problem":27,"code":"(fn [x] (if (= (first x) (last x)) (if (<= 1 (count x)) true (recur (subvec x 1 (dec (count x))))) false))","user":"5a634ff0e4b0512ff01cd995"},{"code":"#(reduce (fn [r, [x, i]] (and r (= x (nth % (- (count %) i 1))))) true (map-indexed (fn [i, x] [x, i]) %))","problem":27,"user":"51b3a2c8e4b0f094dd986fa6"},{"code":"(fn [word] (= (seq word) (-> word seq reverse)))","problem":27,"user":"52a5d1f3e4b0c58976d9abf1"},{"code":"#((fn [x seq2] \n  (or (empty? seq2)\n      (and (= x (last seq2))\n           (recur (first seq2) (butlast (rest seq2))))))\n(first %) (seq (rest %)))","problem":27,"user":"502ade49e4b0614b52996120"},{"problem":27,"code":"(fn [coll] (every? identity \n                   (map #(= %1 %2) \n                        coll \n                        (reverse coll))))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":27,"code":"#(= (apply str %) (apply str (reverse (seq %))))","user":"56936547e4b0dcc4269f4101"},{"code":"(fn palindrome? [s]\n  (= (reverse s) (seq s))\n)","problem":27,"user":"4f047542535dcb61093f6bc7"},{"problem":27,"code":"(fn palindrom? [s] (if (>= 1 (count s)) true (if (= (last s) (first s)) (palindrom? (rest (butlast s))) false )))","user":"5d81c244e4b0915913b1d37a"},{"code":"#(= (seq %) (reduce conj () %))","problem":27,"user":"4e707714535d5021c1a89638"},{"problem":27,"code":"(fn ispal\n  [xs]\n  (every?\n    identity\n    (map\n      #(= %1 %2)\n      xs\n      (reverse xs))))","user":"584cc92be4b0b7285a6f4e2b"},{"code":"#(= (clojure.string/join (reverse %)) (clojure.string/join (map str %)))","problem":27,"user":"4e0359e8535d04ed9115e792"},{"problem":27,"code":"#(loop [ls %]\n   (cond\n      (= (count ls) 0) true\n      (= (first ls) (last ls)) (recur (drop-last 1 (drop 1 ls)))\n      :else false))","user":"59566d1de4b066ee0a44af54"},{"code":"#(->> \n    (map list % (reverse %)) \n    (reduce \n      (fn [x y] true\n        (and x (= (last y) (first y))))))","problem":27,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":27,"code":"(fn pal [s] (= s\n  (if (string? s)\n    (apply str (reverse s))\n    (reverse s))))","user":"54c9e00be4b045293a27f683"},{"problem":27,"code":"(fn [li] (= (reverse li) (seq li)))","user":"59156f0be4b0163c97b36f3d"},{"problem":27,"code":"#(if (string? %) true (= % (reverse %)))","user":"5422e975e4b01498b1a71ac9"},{"problem":27,"code":"(fn palindrome?\n  [s]\n  (let [[x & xs] s]\n    (if (empty? xs)\n      true\n      (if (= x (first (reverse xs)))\n        (palindrome? (reverse (rest (reverse xs))))\n        false))))","user":"56ebfb93e4b04a395b9a042e"},{"problem":27,"code":"#( = (reverse (seq %)) (seq %))","user":"54de7948e4b024c67c0cf7a4"},{"problem":27,"code":"(fn [x]\n  \n   ( = (compare ( into [] (reverse (into [] x) ) )  (into [] x) ) 0)    \n  \n  );END: fn","user":"56a358d0e4b0542e1f8d14c9"},{"problem":27,"code":"(fn[x]\n  (if (= (seq x) (concat (reverse x))) true false))","user":"558fb14ee4b0277789237664"},{"problem":27,"code":"#(=\n    (seq %)\n    (reverse (seq %)))","user":"593bdd84e4b069cdc2982b81"},{"code":"; reversing twice turns \"abcd\" into \\a \\b \\c \\d; hooray\n#(= (reverse (reverse %)) (reverse %))","problem":27,"user":"4f5155a3e4b03ad3f0c10d1b"},{"problem":27,"code":"(fn [sent]\n  (if (string? sent)\n    (= sent (clojure.string/reverse sent))\n    (= sent (reverse sent))))","user":"5f238a59e4b0f565ad99828d"},{"code":"#(let [length (+ (quot (count %) 2) 1)\n        p1 (take length %)\n      \tp2 (take length (reverse %))]\n                                  (= p1 p2))","problem":27,"user":"5251b11be4b0541d1855b87b"},{"problem":27,"code":"(fn [pal]\n  (= (apply list pal) (reverse pal)))","user":"57b55290e4b0fbc9809a27a9"},{"problem":27,"code":"(fn [s]\n    (loop [f (first s)\n           l (last s)\n           r (drop-last (rest s))]\n      (if (empty? r)\n        (= f l)\n        (and (= f l) (recur (first r) (last r) (drop-last (rest r)))))))","user":"58fff18be4b0438e51c2d00c"},{"problem":27,"code":"(fn palindrom? [s]\n  (let [half-size (quot (count s) 2)\n        first-half (take half-size s)\n        second-half (take half-size (reverse s))]\n    (= first-half second-half)\n    )\n  )","user":"564ecc9ee4b0284900eef6a1"},{"problem":27,"code":"(fn pal [l]\n  (if (< (count l) 2)\n    true\n    (if (= (first l) (last l))\n      (pal (rest (reverse (rest l))))\n      false)))","user":"5c7ef3f3e4b0d597f478cad7"},{"code":"(fn [c]\n  (let [c1 c c2 (reverse (seq c))]\n    (reduce (fn [prev pair] (and prev (= (first pair) (first (rest pair)))))\n            true\n            (map (fn [x y] [x y]) c1 c2))))","problem":27,"user":"53077c67e4b02e82168697a4"},{"code":"(fn [xs]\n  (if (= (class xs) java.lang.String)\n    (= xs (apply str (reverse xs)))\n    (= xs (reverse xs))))","problem":27,"user":"52a503e4e4b0c58976d9abe1"},{"problem":27,"code":"(fn [pali] (= (seq pali) (reverse pali)))","user":"520e37cfe4b066f3ea161c96"},{"problem":27,"code":"#(loop [i 0 j (dec (count %))]\n  (if (or (= i j) (> i j))\n    true\n    (if (not (= (nth % i) (nth % j)))\n      false\n      (recur (inc i) (dec j)))))","user":"564f84f4e4b0284900eef6b0"},{"problem":27,"code":"(fn [xs]\n  (if (string? xs)\n  \t(= (apply str (reverse xs)) xs)\n    (= (reverse xs) xs)))","user":"5d81b40ce4b0915913b1d379"},{"problem":27,"code":"#(=  (reverse %) (reverse  (reverse %)))","user":"5bb9375fe4b0a20761a235d0"},{"problem":27,"code":"#(= % (if (string? %)\n                (apply str (reverse %))\n                (reverse %)))","user":"52281e1ee4b0186687e23a69"},{"problem":27,"code":"(fn detects [s] (if (or (= (count s) 0) (= (count s) 1) ) true (if (= (first s) (first (reverse s))) (detects (rest (butlast s)) ) false) ) )","user":"58622733e4b0f14aab7c8803"},{"problem":27,"code":"#(= % ((if (string? %) clojure.string/reverse\n                       reverse) %))","user":"553638bae4b09218d5f44fba"},{"code":"(fn [x]\n          (= (seq x)\n             (reverse x)))","problem":27,"user":"51bd255ce4b0df1216cefd94"},{"problem":27,"code":"#(loop [s %]\n   (cond\n    (< (count s) 2) true \n    (not= (first s) (last s)) false\n    :else (recur (rest (butlast s))) ))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":27,"code":"(fn [sq] (loop [rsq (reverse sq) sq_ sq] (if (= (count rsq) 0) true (if (= (first rsq) (first sq_)) (recur (rest rsq) (rest sq_)) false))))","user":"5a527c16e4b05d388ecb6bff"},{"problem":27,"code":"#(= (into [] %) \n    (reverse %))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":27,"code":"(fn [pdt]\n    (if (instance? String pdt)\n      (= pdt (clojure.string/reverse pdt))\n      (= pdt (reverse pdt))))","user":"5d5c2730e4b09db18d4482ea"},{"code":"(fn [s] (if (instance? String s) (let [ca (apply vector (.toCharArray s))] (= ca (reverse ca))) (= s (reverse s))))","problem":27,"user":"536f2faee4b0fc7073fd6e79"},{"code":"(fn palindrome? [aseq]\n  (= (seq aseq) (reverse (seq aseq))))","problem":27,"user":"52812b9fe4b0757a1b171423"},{"code":"(fn [x] (let [y (seq x)](= y (reverse y))))","problem":27,"user":"52614bc1e4b03e8d9a4a705c"},{"code":"(fn [x] (let [s (into [] x)]\n  (= s (reverse s))))","problem":27,"user":"4fc8f1fee4b0ee37620e183f"},{"problem":27,"code":"(fn [l] (let [s (seq l)] (= s (reverse s))))","user":"58fdd7b7e4b0438e51c2cfc0"},{"problem":27,"code":"(fn [s]\n  (= (seq s)\n     (reverse s)))","user":"55f9c245e4b03cbcff9738ca"},{"code":"#(true? (= (take (quot (count %) 2) %)\n                        (take (quot (count %) 2)(reverse %))\n                     )\n                     )","problem":27,"user":"51155b55e4b0ce5098ee73bc"},{"code":"#(= (apply list %) (reverse %))","problem":27,"user":"4e7f4147535db966e863cc3d"},{"code":"#(if (instance? String %)\n    (= % (clojure.string/reverse %))\n    (= % (reverse %)))","problem":27,"user":"50b8914ce4b0cba0e598b64d"},{"code":"(fn\n[in]\n  (= (seq in) (reverse in))\n)","problem":27,"user":"530c462ae4b02e82168697d9"},{"code":"(fn pal-detect [s] (if (empty? s) \n                        true\n                        (if (identical? (first s) (last s))\n                          (pal-detect (drop 1 (butlast s)))\n                          false)))","problem":27,"user":"524469dee4b0d8acf9ed6a9d"},{"problem":27,"code":"#(let [f (seq %)\n       r (reverse %)]\n        (= f r))","user":"523578efe4b0a643f2dcb74c"},{"problem":27,"code":"(fn [lst] (= (seq lst) (seq (reverse lst))))","user":"551d5cb9e4b07993ea3788e9"},{"code":"(fn [lst]\n    (= (seq lst) (reverse (seq lst))))","problem":27,"user":"51f5539fe4b0abb92f97f9cd"},{"code":"(fn foo [l] (let [sl (seq l)] (= sl (reverse sl))))","problem":27,"user":"51789599e4b03d69594194d6"},{"code":"(fn palindrome [string]\n  (println string)\n  (if (empty? string)\n    true\n    (and (= (first string)(last string))(palindrome (rest(drop-last 1 string))))\n    )\n  )","problem":27,"user":"4f299ad8e4b0d6649770a02c"},{"problem":27,"code":"(fn [sq]\n  (if (= (apply str sq) (apply str (reverse sq)))\n    true\n    false))","user":"581a5fdbe4b0e114eb51a002"},{"problem":27,"code":"(fn palin[x]\n  (loop [par x]\n    (if (seq par)\n      (if( = 0 ( compare (first par) (last par)))\n        (recur (rest (butlast par)))\n        false)true)))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"#(= (if (string? %) (clojure.string/join (reverse %)) (reverse %)) %)","problem":27,"user":"52335d7ce4b0f0b72fabf404"},{"code":"#(= (seq %) (reverse %)\n\n  )","problem":27,"user":"4df11fb2535d08e6dec9fe1a"},{"code":"(fn [coll]\n  (if (nil? coll)\n    true\n    (if (= (first coll) (last coll))\n      (recur (butlast (rest coll)))\n      false\n      )\n  ))","problem":27,"user":"51b8e0dce4b050a1176cd69f"},{"problem":27,"code":"(fn [s]\n  (let [rev-s (if (string? s) (clojure.string/reverse s) (reverse s))]\n    (= s rev-s)))","user":"59a5b3f4e4b066c664927d69"},{"problem":27,"code":"#(let [x (into [] %)]\n   (= x (reverse x)))","user":"55f47f54e4b06e875b46ce78"},{"problem":27,"code":"(fn f [col] \n  (if (empty? col) true\n    (and (= (first col) (last col)) (f (rest (drop-last col))))))","user":"54ce3790e4b057c6fda3a2ab"},{"problem":27,"code":"(fn is-palindrome? [num] \n  (if (string? num)\n  (let [digit-sequence (seq (str num))]\n    (= digit-sequence (reverse digit-sequence)))\n    \t(let [digit-sequence (seq num)]\n    (= digit-sequence (reverse digit-sequence)))))","user":"56942955e4b0dcc4269f4116"},{"code":"(fn p [c]\n\t(if (> 2 (count c)) \n\t\ttrue\n\t\t(if (= (first c) (last c))\n\t\t\t(p (rest (drop-last c)))\n\t\t\tfalse)))","problem":27,"user":"524e79c1e4b0541d1855b7e0"},{"problem":27,"code":"(fn [[first' & xs]]\n  (let [last' (last xs)\n        xs' (butlast xs)]\n    (cond \n     (empty? xs) true\n     (= first' last') (recur xs')\n     :else false)))","user":"567bf820e4b05957ce8c61ad"},{"problem":27,"code":"(fn [coll] (= (clojure.string/join coll) (clojure.string/join (reverse coll))))","user":"56bf78dae4b0f26550335989"},{"code":"(fn [x]\n  (if (empty? (rest x)) true\n    (if (not= (first x) (last x)) false\n      (recur (rest (butlast x))))))","problem":27,"user":"5306e4b4e4b02e821686979d"},{"problem":27,"code":"(fn [s]\n  (and\n    (=\n      (first s)\n      (last s))\n  (cond \n    (= 1 (count s)) true\n    (= 0 (count s)) true\n    :else (recur (drop-last (rest s))))))","user":"5a9c7174e4b0d174b936c7d8"},{"code":"(fn palindrome? [e] (= e (if (string? e) (clojure.string/join (reverse e)) (reverse e))))","problem":27,"user":"4f4e6d21e4b03ad3f0c10cc5"},{"code":"(fn [arg]\n  (cond\n    (= (class arg) java.lang.String) (= (apply str (reverse arg)) arg)\n    :else (= (reverse arg) arg)))","problem":27,"user":"4f51b9f3e4b03ad3f0c10d2b"},{"code":"#(letfn[(palindrome [coll rever]\r\n  \t(if (empty? coll)\r\n\t\t    true\r\n\t\t    (if(= (first coll)(first rever))\r\n\t\t\t(recur(rest coll)(rest rever))\r\n\t\t\tfalse)))]\r\n\t(palindrome % (reverse %)))","problem":27,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"code":"(fn [x] \n  (condp = (count x) \n    0 true\n    1 true\n    (if (not (= (first x) (last x))) false (recur (rest (butlast x))) )))","problem":27,"user":"51a61484e4b0740bfd1afd1e"},{"problem":27,"code":"(fn [s]\n  (if (string? s) \n    (= s (apply str (reverse s)))\n      (= s (reverse s))))","user":"5ada1f12e4b0ea6055cfac43"},{"problem":27,"code":"(fn [s]\n   (or (empty? s)\n      (and (= (first s)\n              (last s))\n           (recur (rest (butlast s))))))","user":"5549ff9ae4b0a04f7929956e"},{"problem":27,"code":"(fn palindrome [s]\n  (= (seq s) (reverse s)))","user":"555ee545e4b0a2eb076a39bd"},{"code":"(fn [coll]\n  (= coll (let [rev (reverse coll)]\n    (if (string? coll) (apply str rev) rev))))","problem":27,"user":"4f0348b4535dcb61093f6a84"},{"problem":27,"code":"(fn myfn [a] \n\t(every? true? (map \n\t\t(fn [i] (= (nth a i) (nth a (- (count a) (inc i)))))\n\t\t(range (count a)))))","user":"5744723ae4b009280f9f2b3a"},{"problem":27,"code":"(fn pal [s]\n  (if (empty? s)\n    true\n    (if (not= (first s) (first (reverse s)))\n      false\n      (pal (rest (reverse (rest s)))))))","user":"59b21070e4b0e1f4e384c8f2"},{"problem":27,"code":"(fn [c]\n  (loop [c' c]\n    (if (empty? c')\n      true\n      (if (= (first c') (last c'))\n        (recur (rest (butlast c')))\n        false))))","user":"57ae3345e4b0fbc9809a271e"},{"problem":27,"code":"(fn [a]\n  (let [c (count a)\n        q (quot c 2)\n        i (mod c 2)]\n    (= (reverse (take q a))\n       (drop (+ i q) a))))","user":"5e64ae6ce4b0fd0acd1586ac"},{"code":"(fn palindrome? [coll]\n  (let [cs (seq coll)]\n    (= (reverse cs) cs)))","problem":27,"user":"527aba40e4b03e8d9a4a7565"},{"problem":27,"code":"#(\n  = (seq %) (reverse (seq %))\n  )","user":"58dd21a9e4b0a4d5acaab6b3"},{"problem":27,"code":"#(let [x (seq %)\n      r (reverse x) \n      ]\n   (= r x) )","user":"52fa250ee4b047fd55836ff3"},{"problem":27,"code":"#(if (string? %) (not (reversible? %)) (= (reverse %) %))","user":"58173722e4b0c0e9c07b838a"},{"problem":27,"code":"(fn[collection] ( = (seq ( reduce (fn[coll n ] (conj coll n) ) () collection)) (seq collection) ))","user":"5cf53196e4b087f62be35a94"},{"problem":27,"code":"(fn \n  [init]\n  (loop [remain init]\n     (if (or (empty? remain) (= (count remain) 1))\n        true\n        (if (= (first remain) (nth remain (dec (count remain))))\n          (recur (rest (pop (vec remain))))\n          false))))","user":"53d6b266e4b0e771c3025459"},{"problem":27,"code":"(fn palindrome? [l] (= (seq l) (reverse l)))","user":"5dbac8ebe4b010eb3c36cd62"},{"code":"#(or (= (reverse %) %) (= (apply str (reverse %)) %))","problem":27,"user":"50ad7888e4b0a40c9cfb08c7"},{"problem":27,"code":"(fn [x]\n  (if (string? x) \n    (= x (apply str (reverse x)))\n    (= x (reverse x))))","user":"59f6495ee4b0966464fe6acf"},{"code":"(fn palindrome [s]\n  (if (empty? s)\n    true\n    (and (= (first s) (last s))\n         (palindrome (rest (butlast s))))))","problem":27,"user":"5356e04fe4b04ce2eb3ed271"},{"code":"(fn [x]\n  (let [t (class x)\n        rev-func (if (= t String) clojure.string/reverse reverse)]\n     (= x (rev-func x))\n  )\n)","problem":27,"user":"52c23344e4b07a9af5792379"},{"problem":27,"code":"(fn [x] ( = (seq x) (reverse x)))","user":"573946b6e4b0cd1946bd106d"},{"problem":27,"code":"(fn [s] (if-not (string? s) (= (reverse s) s) (= (apply str (reverse s))s)))","user":"5daec18ae4b0f8c104ccfc8c"},{"code":"(fn aa [o]\n  (if (= (count (distinct (seque o))) (count o)) false true))","problem":27,"user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":27,"code":"#(= \n   (seq %)\n   (reverse (seq %)))","user":"5fa52497e4b0fa27300f3dbf"},{"code":"(fn [n] (if (= (apply vector n) (reverse (apply vector n))) true false))","problem":27,"user":"4f9336ece4b0dcca54ed6cb7"},{"code":"(fn [s] \n  (= (apply str s) (apply str (reverse s))))","problem":27,"user":"52745629e4b03e8d9a4a74a0"},{"code":"(fn [in]\n  (= (apply str (reverse in)) (apply str in)))","problem":27,"user":"525cb4c4e4b0cb4875a45d44"},{"code":"(fn [x] (= (reverse x) (apply vector x)))","problem":27,"user":"515a46d3e4b0394f658fe23f"},{"code":"#(let [templist %] (= (seq templist) (reverse templist)))","problem":27,"user":"526698c9e4b03e8d9a4a7144"},{"code":";(fn isPalindrome? [x]\n;  (if \n;    (= (seq x) (reverse x)) true\n;    false))\n\n#(if (= (seq %) (reverse %)) true false)","problem":27,"user":"4f45c72be4b0d56e7bb92b8a"},{"problem":27,"code":"#(if (coll? %)\n    (= % (reverse %))\n    (= % (apply str (reverse %))))","user":"56b18445e4b0982f16b37dee"},{"problem":27,"code":"(fn [m](if (= (into '() (seq m)) (seq m)) true false))","user":"5f1aade6e4b091ba50b4dbe4"},{"code":"#( = (seq %) (reverse (seq %)))","problem":27,"user":"51bc2f6ae4b0fe3ecfb46452"},{"code":"(fn palin? [xs]\n  (= (seq xs) (reverse xs)))","problem":27,"user":"4f4e91a9e4b03ad3f0c10cca"},{"problem":27,"code":"(fn [s]\n    (loop [v (vec s)\n           begin 0\n           end (dec (count v))]\n      (cond\n        (>= begin end) true\n        (not (= (nth v begin) (nth v end))) false\n        :else (recur v (inc begin) (dec end)))))","user":"5cc82af4e4b0ccb061962843"},{"code":"#( = (reverse %) (reverse (reverse %)))","problem":27,"user":"505e3b57e4b011187b721f39"},{"problem":27,"code":"(fn palin [s]\n  (=\n    (if (string? s)\n      (apply str (reverse s))\n      (reverse s)\n      )\n    s)\n  )","user":"55c3149de4b0e31453f64987"},{"code":"(fn pal [x]\n   (if (and \n        (= (first x) (last x) )\n        (if (> (count x ) 1)\n          (pal (subvec (vec x) 1 (- (count x) 1) )) true )\n        )\n        true false )\n )","problem":27,"user":"521f0106e4b0e6c71e0c0bc4"},{"problem":27,"code":"(fn [coll]\n  (= (apply str coll) (apply str (reverse coll)))\n )","user":"5e09fd26e4b099d064962f60"},{"code":"(fn [x] (= (apply str x) (apply str (rseq (vec x)))))","problem":27,"user":"539b4268e4b0b51d73faaf1c"},{"code":"(fn [lst] (= (reverse (reverse lst)) (reverse lst)))","problem":27,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":27,"code":"(fn [s] (every? true? (map = (seq s) (reverse s))))","user":"53a07aa7e4b0ca733b9744b0"},{"code":"(fn pal [lst]\n\t (cond (empty? lst) true\n\t       (= (first lst) (last lst)) (pal (rest (butlast lst)))\n\t       :else false))","problem":27,"user":"52709149e4b03e8d9a4a73b1"},{"problem":27,"code":"(fn [seqx]\n  (cond\n   (empty? seqx) true\n   (not= (first seqx) (last seqx)) false\n   :else (recur (->> seqx (rest) (reverse) (rest)))))","user":"60cc2d58e4b0e0fa5f1b4323"},{"code":"(fn  rr [ v] (let [coll (vec v)]\n(= coll (rseq coll))))","problem":27,"user":"4ec51590535d6d7199dd3683"},{"code":"#((let [c (reverse %)]\r\n    (fn []\r\n      (= (-> % reverse reverse) c))))","problem":27,"user":"4fc524aae4b081705acca37e"},{"problem":27,"code":"(fn [x] (if (=(apply str (reverse x)) (apply str x)) true false))","user":"590cb27de4b047aa04b199ee"},{"code":"(fn palindrome-detector [mylist]\r\n    (if (= (if (string? mylist) (apply str (reverse mylist)) (reverse mylist))\r\n            mylist)\r\n        true\r\n        false))","problem":27,"user":"4e9a3a03535dbda64a6f6b70"},{"problem":27,"code":"#(cond (empty? %) true\n       (not (= (first %) (last %))) false \n       :else (recur (rest (drop-last %))))","user":"52857128e4b0239c8a67adf2"},{"code":"(fn [x]\n  (loop [y x]\n    (if (or (empty? y) (= 1 (count y)))\n      true\n      (if-not (= (first y) (last y))\n        false\n      (recur (pop (vector (rest y))))))))","problem":27,"user":"50517ebfe4b0a561d07d8f06"},{"code":"(fn [str] (= (reverse str) (reverse (reverse str))))","problem":27,"user":"522d0360e4b0806774ddfef7"},{"problem":27,"code":"(fn palindrome [value]\n  (if (empty? value)\n      true\n      (if (= (first value) (last value))\n          (palindrome (rest (butlast value)))\n          false\n      )\n  )\n)","user":"53ff602fe4b0de5c418485ff"},{"problem":27,"code":"#(= (apply str (reverse  %)) (apply str %))","user":"53da8fede4b0e771c30254a3"},{"problem":27,"code":"#(if (string? %)\n   (= (clojure.string/reverse %) %) \n   (= (reverse %) %))","user":"5410499de4b01498b1a719a6"},{"problem":27,"code":"(fn [x] (= (reverse (reverse x) ) (reverse x) ) )","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn [xs]\n  (if (<= (count xs) 1)\n  true\n   (if-not (= (first xs) (last xs))\n     false\n     (recur (rest (butlast xs))))))","problem":27,"user":"530e74c9e4b08068f379ecb9"},{"code":"(fn f [l]\r\n    (letfn [(nthfromend [l n]\r\n              (nth l (- (- (count l) 1) n)))\r\n            (foo [l n]\r\n                  (if (= n -1)\r\n                      true\r\n                      (and (= (nth l n) (nthfromend l n))\r\n                            (foo l (- n 1)))))]\r\n            (foo l (- (count l) 1))))","problem":27,"user":"4df1ce44535d08e6dec9fe1f"},{"code":"(fn [x]\n  (if (even? (count x))\n    (=\n     (take (/ (count x) 2) x)\n     (reverse (drop (/ (count x) 2) x)))\n    (=\n     (take (/ (dec (count x)) 2) x)\n     (reverse (drop (/ (inc (count x)) 2) x)))\n    ))","problem":27,"user":"51c2fc7de4b0d204dbe2ca2e"},{"problem":27,"code":"(fn palindrome?\n  [x]\n  (if(string? x) (= x (clojure.string/reverse x))\n                 (= x (reverse x)))\n  )","user":"5a4cbba1e4b05d388ecb6b98"},{"problem":27,"code":"(fn [coll]\n  (= coll (if (string? coll)\n            (apply str (reverse coll))\n            (reverse coll))))","user":"554bd33ce4b0a04f7929959a"},{"problem":27,"code":"#(or (= % (reverse %)) (= (reverse (reverse %)) (reverse %)))","user":"5790e62ae4b0ebec4cfb75b0"},{"problem":27,"code":"(fn [vs] (= (reverse vs) (seq vs)))","user":"54ef4a1ee4b024c67c0cf883"},{"code":"(fn [coll] (let [coll' (seq coll)] (= coll' (reverse coll'))))","problem":27,"user":"4dda44f2535d02782fcbe9f1"},{"problem":27,"code":"(fn palindrome [col]\n  (if (< (count col) 2)\n    true\n    (if (= (first col) (last col))\n      (palindrome (rest (butlast col)))\n      false)))","user":"5dc9d4ede4b03836ba07d823"},{"problem":27,"code":"(fn [¥]\n  (if (string? ¥)\n      (= (apply str (reverse ¥)) ¥)\n      (= (reverse ¥) ¥)))","user":"58136dcfe4b0f478707a0610"},{"code":"#(loop [coll %]\n  (cond\n    (empty? coll) true\n    (not= (first coll) (last coll)) false\n    :else (recur ((comp rest butlast) coll))))","problem":27,"user":"4ec5a5f9535d6d7199dd36ad"},{"code":"(fn [s] \n  (let [seq-s (seq s)]\n        (= seq-s (reverse seq-s))))","problem":27,"user":"5395a79be4b0b51d73faaed9"},{"code":"(fn pali [x]\r\n  (let [s (seq x)]\r\n\t(if (identical? (first s) (last s))\r\n      (if (<= (.size s) 2)\r\n        true\r\n        (pali (next (drop-last s))))\r\n      false\r\n     )\r\n  )\r\n)","problem":27,"user":"510a6bece4b06956752d35af"},{"code":"(fn pal [coll] (or (nil? (seq coll)) (and (= (first coll) (last coll)) (pal (next (butlast coll))))))","problem":27,"user":"5346db4be4b084c2834f4a45"},{"problem":27,"code":"(fn [x]\n  (= x (if (string? x)\n         (clojure.string/reverse x)\n         (reverse x))))","user":"5447e08ce4b032a45b8693c3"},{"problem":27,"code":"#(true? (= (seq %1) (reverse (seq %1))))","user":"5bc352abe4b07a9b28b10041"},{"code":"#(= (into [] %) (reverse (into []%)))","problem":27,"user":"5065bd94e4b0148eb3925aed"},{"code":"#(let [a (seq %) b (reverse a)]\n  (= a b))","problem":27,"user":"4e521cef535d302ef430da6d"},{"code":"(fn [inputColl]\n\t(let [n (quot (count inputColl) 2)]\n\t      (= (take n inputColl) (take n (reverse inputColl)))))","problem":27,"user":"5227eacee4b0186687e23a5e"},{"problem":27,"code":"(fn [x]( = (reverse (reverse x)) (reverse x)))","user":"55b24240e4b0da326a65cf7b"},{"code":"#(= \n     (vec (seq %))\n     (vec (reverse (seq %))))","problem":27,"user":"4f3e6244e4b0e243712b1f85"},{"code":"(fn palindrome [val] \n  (let [seq-val (seq val)\n        r-val (reverse seq-val)]\n    (= seq-val r-val)))","problem":27,"user":"50621cbde4b0341461c88951"},{"problem":27,"code":"(fn [a] (if (string? a) (= (apply str (reverse a)) a) (= (reverse a) a)))","user":"5c925cb3e4b048ec896c5a05"},{"problem":27,"code":"(fn [coll]\n  (if (= (seq coll) (reverse (seq coll)))\n    true\n    false))","user":"549674cde4b0b312c081ff66"},{"problem":27,"code":"(fn palindrome [l]\n  (if (<= (count l) 1)\n    true\n    (and (= (first l) (last l))\n         (palindrome (rest (drop-last l))))))","user":"547e3846e4b0c51c1f4d7302"},{"problem":27,"code":"#(if (string? %1) (= %1 (apply str (reverse %1))) (= %1 (reverse %1))  )","user":"587cf1b1e4b01531a375eb2b"},{"problem":27,"code":"#(loop [x %]\n   (if (or (= x []) (= (count x) 1))\n     true\n     (if (= (first x) (last x))\n       (recur (rest (reverse (rest x))))\n       false)))","user":"53c74cfce4b00fb29b2212a7"},{"problem":27,"code":"(\n fn [p] (\n         if (= (first p) (last p))\n            (if (= (count p) 0)\n              true\n              (recur \n               (rest (drop-last p))\n               )\n              )\n            false\n  )\n)","user":"58186016e4b0c0e9c07b83ad"},{"problem":27,"code":"(fn palindrome? [num]  (= (seq num) (reverse num)))","user":"54b2859ce4b09f271ff37d2a"},{"problem":27,"code":"(fn [arg]\n  (if (=  (seq arg) (reverse arg))\n      true\n      false )\n   )","user":"59636b37e4b066ee0a44b0c3"},{"code":"(let [palindrome\n      (fn [coll k]\n        (if (> (* 2 k) (count coll))\n          true\n          (if (not= (coll k) (coll (- (count coll) k 1)))\n            false\n            (recur coll (inc k))\n          )\n        )\n      )]\n  (fn [coll] (palindrome (vec coll) 0))\n)","problem":27,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn [coll] \n  (let [x (into [] (reverse coll)) y (into [] coll)]\n    (= 0 (compare y x))))","problem":27,"user":"52ec4322e4b0705949c44451"},{"code":"(fn pal [s]\n  (let [c     (count s)\n        inner (reverse (rest (reverse (rest s))))]\n    (cond\n      (= c 0) true\n      (= c 1) true\n      :else   (and\n                (= (first s) (last s))\n                (pal inner)))))","problem":27,"user":"4f03edd7535dcb61093f6b80"},{"code":"(fn [s] (= (if (string? s) (apply str (reverse s)) (reverse s)) s))","problem":27,"user":"51db1abae4b094966a2cd685"},{"code":"(fn palindrome? [coll]\n  (or (empty? coll)\n      (let [[start & more] coll\n            end (last coll)]\n        (and (= start end)\n             (palindrome? (butlast more))))))","problem":27,"user":"4efa3d4b535dced4c769f270"},{"code":"(fn [coll] (= (clojure.string/join (reverse coll)) (clojure.string/join coll)))","problem":27,"user":"4fc4f668e4b081705acca362"},{"problem":27,"code":"(fn [thing]\n  (= (seq thing)\n     (reverse thing)))","user":"587fb546e4b0f1effa3b75f9"},{"code":"(fn [l]\r\n    (= (reverse (seq l)) (seq l)))","problem":27,"user":"4f039524535dcb61093f6b2c"},{"code":"(fn [x] (if (= (class x) java.lang.String) (= x (apply str (reverse x))) (= x (reverse x))))","problem":27,"user":"4e75500f535d7a570dd295c1"},{"problem":27,"code":"(fn [s]\n  (=\n    (apply list s)  \n    (reverse s)))","user":"5c4fd807e4b0f9f7a8770eb5"},{"problem":27,"code":"(fn \n[pos-seq]\n  (let [a-seq (seq pos-seq)]\n    (= a-seq (reverse a-seq))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":27,"code":"(fn  [x]\n  (let [seq-x (seq x)]\n    (= seq-x (reverse seq-x)))\n  )","user":"5e300655e4b05b4b01516209"},{"problem":27,"code":"(fn [x] \n  (if (string? x)\n\t  (= x (apply str (reverse x)))\n  \t  (= x (reverse x))\n  )\n )","user":"59884b32e4b021a7a535feb2"},{"problem":27,"code":"(fn [a-seq]\n  (= (seq a-seq) (reverse a-seq)))","user":"5550c6e0e4b00713264bd9af"},{"problem":27,"code":"(fn [vals]\n  (=\n    (vec vals)\n    (reverse (vec vals))\n  )\n)","user":"5726adf8e4b0c5bde472c12b"},{"problem":27,"code":"(fn palindrome?\n  [coll]\n  (let [left (into '() coll)]\n  (= left (reverse left))))","user":"53de4bdae4b0d874e779ae32"},{"code":"(fn [coll]\n  (if coll\n    (if (= (first coll) (last coll))\n      (recur (next (drop-last coll)))\n      false)\n    true))","problem":27,"user":"4eae5fe4535d7eef30807325"},{"problem":27,"code":"(fn [xs] (= (into [] xs)  (into [] (reverse xs))))","user":"57015a1de4b08d47c97781d4"},{"code":"#(if (<= (count %) 1)\n  true\n  (if (= (first %) (last %))\n    (recur (rest (butlast %)))\n    false))","problem":27,"user":"4f387c2ee4b0e243712b1edd"},{"problem":27,"code":"(fn palindrome\n  [my-seq]\n  (loop [i 0 j (- (count my-seq) 1)]\n      (cond \n      (>= i j) true  \n      (not= (nth my-seq i) (nth my-seq j)) false\n      :else (recur (inc i) (dec j)))))","user":"5c5e7049e4b0fca0c1622607"},{"problem":27,"code":"#(let [li (into [] %)] (= li (reverse li)))","user":"566812f0e4b04acd4f672de1"},{"problem":27,"code":"(fn [coll]\n  (= (seq coll) (loop [c coll r (empty coll)]\n    (if (empty? c)\n     r\n     (recur (rest c) (conj r (first c)))\n    )\n   )\n  )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn [x]\n  (= (apply str x) \n     (apply str (reverse x))))","problem":27,"user":"4fea8741e4b0140c20fb9c09"},{"code":"(fn pal? [seq]\r\n  (if (or (empty? seq) (empty? (rest seq)))\r\n    true\r\n    (and (.equals (first seq) (last seq))\r\n      (pal? (rest (butlast seq))))))","problem":27,"user":"4e234588535d04ed9115e821"},{"problem":27,"code":"(fn [s]\n  (= s (if (string? s)\n           (apply str (reverse s))\n           (reverse s))))","user":"5d0e9931e4b0cc9c91588258"},{"code":"#(loop [i 0 seq1 nil seq2 nil]\n                      (if (= i (quot (count %1) 2))\n                        (= seq1 seq2)\n                      (recur (inc i) (conj seq1 (nth %1 i)) (conj seq2 (nth %1 (- (count %1) i 1))))\n                      ))","problem":27,"user":"4ea31da2535d7eef308072c1"},{"code":"(fn [s]\n  (= (reverse s) (vec s)))","problem":27,"user":"4fb4f42ae4b081705acca2b4"},{"problem":27,"code":"#(every? true? (map (comp (partial apply =) vector) % (reverse %)))","user":"5dce0151e4b0b296f82db5b5"},{"problem":27,"code":"(fn [x]\n  (if (= (first x) (last x))\n    (if (seq (rest x))\n      (recur (drop-last (rest x)))\n      true)\n    false))","user":"594bc912e4b07ddc2dafae3e"},{"problem":27,"code":"#(= (if (instance? String %) (clojure.string/reverse %) (reverse %)) %)","user":"59595f85e4b066ee0a44afa1"},{"problem":27,"code":"(fn [s]\n  (cond (string? s) (= s (apply str (reverse s)))\n        :else (= s (reverse s))))","user":"56ee0691e4b04a395b9a044c"},{"problem":27,"code":"(fn [obj]\n  (= obj\n     (if (string? obj)\n       (clojure.string/reverse obj)\n       (reverse obj))))","user":"571107b3e4b09c608db7043f"},{"problem":27,"code":"(fn [input-string] (= (seq input-string) (reverse input-string)))","user":"5a5b9e3ce4b0512ff01cd90b"},{"problem":27,"code":"(fn [s] (= (list* s) (reverse ( list* s))))","user":"56671996e4b04acd4f672dc9"},{"code":"(fn palindrome? [list]\n  (let [rev    (reverse list)\n        zipped (map vector list rev)]\n    (every? (fn [pair] (= (first pair) (second pair))) (take (+ 1 (/ (count zipped) 2)) zipped))))","problem":27,"user":"5277da8ee4b03e8d9a4a7514"},{"problem":27,"code":"(fn [x]\n  (let [halfway (/ (count x) 2)\n        the-front (if (string? x)\n                    (vec (subs x 0 (Math/ceil halfway)))\n                    (subvec (vec x) 0 (Math/ceil halfway)))\n        the-back (reverse (if (string? x)\n                            (vec (subs x (Math/floor halfway)))\n                            (subvec (vec x) (Math/floor halfway))))]\n    (= the-front the-back)))","user":"577feed1e4b0d36ec5835e71"},{"problem":27,"code":"(comp #(= (reduce conj '() %) %) vec)","user":"56b3146ae4b0982f16b37e0f"},{"problem":27,"code":"(fn  palindrome \n    ([coll]\n        (palindrome 0 (seq coll)))\n    ([index coll]\n    (let [last-index (- (count coll) 1 index)\n            s2 (nth coll last-index)\n            s3 (nth coll index)]\n            (println index s3 last-index s2)\n        (if (>= index last-index)\n            true\n            (if (= s3 s2)\n                (palindrome (inc index) coll)\n                false )))))","user":"6033f8e9e4b0d5df2af222c6"},{"problem":27,"code":"(fn palindrome? [ls]\n  (if (empty? ls)\n    true\n    (and \n      (= (first ls) (last ls)) \n      (palindrome? (rest (drop-last ls))))))","user":"573c57ace4b0cd1946bd10c0"},{"problem":27,"code":"(fn [seq] (= (reverse seq) (vec seq)))","user":"54d352f6e4b0e8a36923e604"},{"code":"(fn [string]\n  (=\n    (seq string)\n    (reverse string)))","problem":27,"user":"4fefbfe7e4b0678c553fc31a"},{"code":"(fn [sq] (= (vec sq) (reverse (vec sq))))","problem":27,"user":"4ef7a483535dced4c769f258"},{"problem":27,"code":"(fn pal [lst]\n  (= (seq lst) (reverse lst)))","user":"5e978fe5e4b0157ca96647d1"},{"problem":27,"code":";; Argh.  I _know_ this is too complicated\n(fn [s]\n  (loop [start (first s)\n         end (last s)\n         s (butlast (rest s))]\n    (cond\n     (empty? s) true\n     (not (= start end)) false\n     :else\n     (recur (first s) (last s) (butlast (rest s)))\n     )\n    )\n  )","user":"59932dc1e4b0b211ea3aaaad"},{"problem":27,"code":"(fn is-palindrome [some-seq] (= (seq some-seq) (reverse (seq some-seq))))","user":"56c0756de4b060a8e693e3a9"},{"problem":27,"code":"(fn [x] (let [f (if (string? x) clojure.string/reverse reverse)] (= (f x) x)))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n  (= x (reverse x))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"(fn [elems] (if (= elems \"racecar\") true (= elems (reverse elems))))","problem":27,"user":"4e03b010535d04ed9115e794"},{"code":"(fn [l0]\n  (loop [fl l0   rl (reverse l0)]\n    (cond \n      (empty? fl) true\n      (not= (first fl) (first rl)) false\n      true (recur (rest fl) (rest rl)))))","problem":27,"user":"4f90e238e4b0dcca54ed6c94"},{"code":"(fn [l] \n  (= (seq l) (reverse (seq l))))","problem":27,"user":"533ee560e4b085b17e897d98"},{"code":"#(if (string? %)\n  (= % (apply str (reverse %)))\n  (= % (reverse %)) )","problem":27,"user":"4eac5bc1535d7eef3080731b"},{"problem":27,"code":"(fn [l] \n  (let [s (seq l)]\n    (= s (reverse s))))","user":"557ca912e4b05c286339e0c8"},{"problem":27,"code":"(fn palindrome? [coll]\n  (let [reversed (reverse coll)]\n    (if (isa? (type coll) String)\n      (= coll (clojure.string/join reversed))\n      (= coll reversed)\n      )\n    )\n  )","user":"5aada061e4b073f17744257a"},{"code":"#(let [cnt (count %) is-minus (odd? cnt) col-size (if is-minus (dec (/ cnt 2)) (/ cnt 2)) x (take col-size %) y (take col-size (reverse %))](= x y))","problem":27,"user":"51a05bede4b0b292b01ee3f4"},{"code":"(fn [ s ] \n    (let  [ rev    (reverse s)  \n            sss  (reverse rev) ]  \n    (= rev sss)\n   ; (identity sss)\n    )\n)","problem":27,"user":"4fdf750be4b05e33b9224f9c"},{"problem":27,"code":"#(-> % seq (= (seq(reverse %))))","user":"58e5e585e4b056aecfd47ca2"},{"code":"#(loop [x %] (if (< (count x) 2) true (if (not (= (first x) (last x))) false (recur (next (reverse (next x)))))))","problem":27,"user":"5186448fe4b0da5a5be3bac9"},{"code":"(fn [coll]\n  (let [scol (seq coll)\n        c (count scol)]\n    (cond (= c 1) true\n          (= c 2) (= (first scol) (second scol))\n          :else (and (= (first scol) (last scol))\n                     (recur (drop 1 (take (dec c) scol)))))))","problem":27,"user":"4f343e60e4b0e243712b1eb5"},{"problem":27,"code":"(fn [x] (= (seq x) (reverse (seq x))) )","user":"5b6c6328e4b0c6492753e7b7"},{"problem":27,"code":"(fn palindrome-checker\n  [sequ]\n  (let [seqlen (count sequ)]\n    (let [halfw (if (even? seqlen) (/ seqlen 2) (/ (- seqlen 1) 2))]\n      (loop [i 0]\n        (if (< i halfw)\n          (if (= (nth sequ i) (nth sequ (- seqlen 1 i)))\n            (recur (inc i))\n            false\n          )\n          true\n        )\n      )\n    )\n  )\n)","user":"5c8b6c64e4b048ec896c596f"},{"problem":27,"code":"#(loop \n  [input  %]\n  (if (<= (count input) 1)\n    true\n    (if (= (last input) (first input))\n      (recur (drop 1 (drop-last input)))\n      false \n    )\n  )\n )","user":"5e79fcb9e4b085ba37836e08"},{"code":"(fn [x] \n  (= (reverse (into '() x)) \n     (into '() x)))","problem":27,"user":"5262efade4b03e8d9a4a709f"},{"code":";#(= (reverse (reverse %)) (reverse %))\n\n#(= (seq %) (reverse %))","problem":27,"user":"52d469c8e4b09f7907dd1330"},{"problem":27,"code":"(fn [x] (every? true? (map #(= %1 %2) (seq x) (reverse (seq x)))))","user":"56b2573ce4b0982f16b37e02"},{"problem":27,"code":"(fn [s] \n  (= (if (string? s) (apply str (reverse s)) (reverse s)) s) \n  )","user":"560c404fe4b05f002753df30"},{"problem":27,"code":"(fn [coll]  (= (apply str coll)    (apply str (reverse coll)) ))","user":"5ddbd202e4b0948ae9d9adb4"},{"code":"#(= (-> % reverse seq) (seq %))","problem":27,"user":"5194675fe4b0142f60b4aedf"},{"problem":27,"code":"(fn [sequen]\n  (loop [remainder sequen]\n    (if (> 2 (count remainder))\n      true\n      (if-not (= (first remainder) (last remainder))\n        false\n        (recur (rest (reverse (rest remainder))))))))","user":"5613a96ae4b05f002753dfa4"},{"code":"(fn [inp] (let [s (seq inp)] (= s (reverse s))))","problem":27,"user":"51fe9d7ce4b0f1313d468a70"},{"code":"(fn [s]\n  (loop [s' s\n         pal true]\n    (if (or (= (count s') 0) (= (count s') 1))\n      pal\n      (recur (butlast (rest s')) (and pal (= (first s') (last s')))))))","problem":27,"user":"4f8e155ae4b0d4e659cdde63"},{"code":"(fn [x] (if (string? x) (if (= (apply str (reverse x)) x) true false) (if (= (reverse x) x) true false)))","problem":27,"user":"51bf0ccee4b013aa0d74b811"},{"problem":27,"code":"(fn [x] (let [end (count x) mid (int (/ end 2))] (= (take mid x) (take mid (reverse x)))))","user":"540f2b31e4b0addc1aec6726"},{"problem":27,"code":"(fn [x] (= x ((if (string? x) clojure.string/reverse reverse) x)))","user":"562bb236e4b058fa18c5a6ce"},{"code":"#(= (reverse %) (into [] %))","problem":27,"user":"515a6151e4b0394f658fe241"},{"problem":27,"code":"(fn [xs] \n  (= (filter #(= % 0)\n(let [l\n(#(let [c (count %) m (if (= (mod c 2) 1) 1 0)]\n      (+\n  (int (/ c 2))\n      m))\n xs)] \n  (map (fn [x r] (if (= x r) 1 0))\n   (take l xs) (take l (reverse xs)))\n  )\n             ) [])\n)","user":"5af0c1ede4b0cc2b61a3bc57"},{"problem":27,"code":"(fn [s]\n  (loop [r (reverse s) s s]\n    (if (empty? s)\n      true\n      (if (= (first s) (first r))\n        (recur (rest r) (rest s))\n        false))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":27,"code":"(fn [a] (= (take (/ (count a) 2) a) (reverse (take-last (/ (count a) 2) a))))","user":"544ff52fe4b0e3978000699b"},{"problem":27,"code":"#(if (string? %) \n   (= (apply str (reverse %)) %) \n   (= (reverse %) %))","user":"5f67c2f8e4b02876ed9fd039"},{"problem":27,"code":"(fn [s]\n  (let [len (- (count s) 1) lim (int (/ len 2)) v (vec s)]\n    (loop [pointer 0]\n      (cond (> pointer lim) true\n            (not= (get v pointer) (get v (- len pointer))) false\n            :else (recur (+ pointer 1))))))","user":"57035ccfe4b08d47c97781ef"},{"problem":27,"code":"(fn [string]\n  (let [forward (seq string)\n        rev (reverse forward)]\n    (= forward rev)))","user":"545bd22fe4b01be26fd7465a"},{"problem":27,"code":"(fn [coll]\n         (let [reversed (reverse coll)]\n           (empty? (filter false? (map = coll reversed)))))","user":"5a861aafe4b05369db4d2496"},{"code":"(fn palindrome? \n   ([xs] (let [n (/ (count xs) 2)]\n      \t(palindrome? (take n xs) (take n (reverse xs)))))\n\n   ([[x & xs] [y & ys]]\n    (if (and (nil? xs) (nil? ys) (= x y)) true\n    \t(if (not= x y) false (palindrome? xs ys)))))","problem":27,"user":"4fe8d862e4b0547ebccb2428"},{"code":"(fn foo [lst]\n  (if (empty? lst)\n    true\n    (let [s (first (reverse lst))]\n      (if (= s (first lst))\n        (foo (reverse (rest (reverse (rest lst)))))\n        false))))","problem":27,"user":"5220a770e4b0e6a83c8925a3"},{"code":"(fn [coll]\n              (let [rcoll (apply str (reverse coll)) ocoll (apply str coll)]\n                (= rcoll ocoll)))","problem":27,"user":"537f6df1e4b06839e8705eb5"},{"problem":27,"code":"(fn [sq] (= (vec sq) (reverse sq)))","user":"54b66089e4b05787c3b163ba"},{"problem":27,"code":"#(or (empty? %) (and (= (first %) (last %)) (recur (rest (drop-last %)))))","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":27,"code":"(fn [v]\n  (let [r (reverse v)]\n    (loop [n v\n           r r]\n      (cond\n        (empty? n) true\n        (= (first n) (first r)) (recur (rest n) (rest r))\n        :else false))))","user":"55fbc657e4b0f488688e0666"},{"problem":27,"code":"(fn \n  [w]\n  (let [reversed (reverse w)]\n    (loop [w1 w\n           w2 reversed]\n      (if (= (first w1) (first w2)) \n        (if (nil? (first w1))\n                  true\n                  (recur (rest w1) (rest w2)))\n        false\n        )\n      )\n    )\n  )","user":"571b900ae4b07c98581c3b69"},{"problem":27,"code":"#(if (= (type %) String) (= % (clojure.string/reverse %)) (= % (reverse %)))","user":"56483f45e4b0284900eef62b"},{"problem":27,"code":"#(= (reverse (reverse %1))  (reverse %1))","user":"5c38422ae4b0d62ef62d9f7f"},{"code":"#(= (reverse(reverse %)) (reverse %))","problem":27,"user":"4ebe8d65535dfed6da9c6d96"},{"code":"(fn palindrome? [s] (or (<= (count s) 1)\n    (and (= (first s) (last s))\n      (palindrome? (rest (butlast s))))))","problem":27,"user":"4f622cafe4b0defedf855fcc"},{"code":"(fn [aseq]\n  (if (seq? aseq) \n    (= (seq aseq) (reverse (seq aseq)))\n    (= (seq aseq) (reverse (seq aseq)) )))","problem":27,"user":"52b66d98e4b0c58976d9ad46"},{"problem":27,"code":"(fn [s] \n  (loop [n 0] \n    (if-not (< n (- (count s) 1)) true\n      (if-not (= (nth s n) (nth s (- (count s) n 1))) false \n                 (recur (+ n 1)) ) ) ) )","user":"514504c2e4b021a5ff8301fc"},{"problem":27,"code":"(fn [k] (= (apply str k) (apply str (reverse k))))","user":"56ecf2e6e4b04a395b9a0440"},{"problem":27,"code":"(fn [s] (if (>= 1 (count s))\n          true\n          (if (= (first s) (last s))\n            (recur (rest (butlast s)))\n            false)))","user":"59311da6e4b072a2710fd007"},{"code":"(fn [n] (= (reverse n) (seq n)))","problem":27,"user":"500e9d2fe4b00fff93030f9a"},{"problem":27,"code":"(fn [x] (let [fwd (seq x) rev (reverse x)] (= fwd rev)))","user":"5747e22ce4b009280f9f2b7c"},{"code":"(fn [s]\n  (cond\n    (string? s) (= (apply str (reverse s)) s)\n    :e (= (reverse s) s)))","problem":27,"user":"4f726dd2e4b07046d9f4f034"},{"code":"(fn is-palindrome [sqn]\r\n  (let [n (unchecked-divide (count sqn) 2)]\r\n    (=\r\n      (take n sqn)\r\n      (reverse (take-last n sqn)))))","problem":27,"user":"4f20c040e4b0d66497709fcb"},{"code":"#(or (= % (reverse %)) (string? %))","problem":27,"user":"4e6a5168535d8ccf87e9fec6"},{"problem":27,"code":"(fn is-palindrome\n  [coll]\n  (if (empty? coll)\n    true\n  (if (= (first coll) (last coll))\n    (is-palindrome (rest (butlast coll)))\n    false\n    )))","user":"5e00752fe4b0a607a9a45d24"},{"problem":27,"code":"(fn [s] (let [x (seq s)] (= (reverse x) x)))","user":"56d439d4e4b0ea9b8538f7b6"},{"code":"#(=  (vec %) (reverse (vec %)))","problem":27,"user":"4e6e7018535d5021c1a8960b"},{"code":"#( = (seq %) (reverse (seq % ) ) )","problem":27,"user":"51ccc179e4b02254fc794879"},{"problem":27,"code":"(fn [c]\n  (let [len (count c)]\n    (if (< len 2)\n      true\n      (and (= (first c) (last c)) (recur (rest (butlast c)))))\n  ))","user":"5537c1c4e4b09218d5f44fd0"},{"problem":27,"code":"(fn palindrome [s]\n  (= (vec s) (reverse s)))","user":"5958a0c8e4b066ee0a44af8c"},{"problem":27,"code":"(fn palindrome? [s]\n  (= (seq s) (reverse s))\n)","user":"60335b35e4b0d5df2af222bf"},{"code":"#(= (seq %) (reverse %\n                 ))","problem":27,"user":"5150600de4b098b221effc29"},{"code":"(fn [s]\n  (let [half (partial take (/ (count s) 2))]\n    (= (half s) (half (reverse s)))\n    )\n  )","problem":27,"user":"512339fce4b03b44edbed434"},{"problem":27,"code":"(fn [se]\n  (let [middle (quot (count se) 2)]\n    (= (sort (take-last middle se))  (sort (take middle se)))\n  ))","user":"54377355e4b032a45b869305"},{"code":"(fn [pd]\n  (let [to-str      #(apply str %)\n        to-rev-str  #(apply str (reverse %))] (= (to-str pd) (to-rev-str pd))))","problem":27,"user":"516a9dbee4b081287f204e9c"},{"code":"(fn [slike]\n  (let [s (seq slike)]\n    (= s (reverse s))))","problem":27,"user":"4f0374a0535dcb61093f6ad9"},{"problem":27,"code":"(fn [lst]\n  (= (seq lst) (reverse lst))\n  )","user":"5f84f110e4b0375e81f54e79"},{"code":"(fn [p]\n  (let [rp (reverse p), n (count p)]\n    (reduce #(and %1 %2) true (map #(= (nth rp %) (nth p %)) (range (/ n 2))))))","problem":27,"user":"50d18d00e4b05a71a896ef57"},{"problem":27,"code":"(fn [coll]\n  (loop [i 0 j (- (count coll) 1)]\n    (or (>= i j)\n        (and (= (nth coll i) (nth coll j))\n             (recur (+ i 1) (- j 1))))))","user":"57f80350e4b0d3187e90090c"},{"code":"(fn palindrome? [lst]\n  (if (empty? lst)\n    true\n    (if (not (= (first lst) (last lst)))\n      false\n      (palindrome? (butlast (rest lst))))))","problem":27,"user":"4fc52278e4b081705acca37c"},{"problem":27,"code":"(fn foo [args]\n  (if (<= (count args) 1)\n    true\n    (if (= (first args) (last args))\n      (foo (rest (butlast args)))\n      false)))","user":"5c92b9e6e4b048ec896c5a0d"},{"problem":27,"code":"(fn [xs]\n  (if (= (type xs) java.lang.String)\n    (= (clojure.string/join (reverse xs)) xs)\n    (= (reverse xs) xs)))","user":"56be350ce4b0f26550335981"},{"problem":27,"code":";(fn [coll]\n;  (= (reduce conj [] coll)\n;     (reverse coll)))\n\n#(= (seq %) (reverse %))","user":"560dfa8de4b05f002753df46"},{"problem":27,"code":"(fn palindrome [coll] \n   (if (= (count coll) 1) true \n     (if (= (count coll) 2) \n       (if (= (first coll) (last coll)) true false)\n       (if (not= (first coll) (last coll)) false\n         (palindrome (rest (butlast coll)))))))","user":"53f75957e4b0de5c4184855d"},{"problem":27,"code":"#((fn pal? [xs] (if (< (count xs) 2) true (if (= (first xs) (last xs)) (pal? (drop-last (rest xs))) false ))) %)","user":"5b72b36ce4b047b03b2036a9"},{"code":"(fn [xs]\n  (loop [x xs]\n\t(if (and (seq x) (> (count x) 1))\n      (if (= (first x) (last x))\n        (recur (butlast (rest x)))\n        false)\n      true)))","problem":27,"user":"51ef31dfe4b0871fa145d9a0"},{"problem":27,"code":"(fn x [c]\n  (if c\n    (let [a (first c)\n          b (last c)]\n      (if (= a b)\n        (-> c rest butlast x)\n        false))\n    true))","user":"5878fb4ee4b01531a375eac1"},{"problem":27,"code":"(fn [ls]\n  (= (reduce str ls) (reduce str (reverse ls))))","user":"54ea5e91e4b024c67c0cf840"},{"problem":27,"code":"(fn palindrome?\n  [pal]\n  (or\n   (<= (count pal) 1)\n   (and\n    (= (first pal) (last pal))\n    (palindrome? (rest (butlast pal))))))","user":"540b2dcbe4b0addc1aec66f4"},{"problem":27,"code":"#(= (seq % )(reverse %))","user":"5b3dddf5e4b02d533a91bbf1"},{"problem":27,"code":"(fn [val] (= (reverse (reverse val)) (reverse val)))","user":"59d72207e4b0ef0a1e9b5c2c"},{"problem":27,"code":"(fn pal? [q] (if (empty? q) true (and (= (first q) (last q))\n                (pal? (rest (reverse (rest (reverse q)))))\n                )))","user":"56b36283e4b0982f16b37e18"},{"code":"(fn pcheck [x] (\n  = (reduce conj [] x) (reduce conj '() x)))","problem":27,"user":"4f0d1cf3535d0136e6c22314"},{"problem":27,"code":"#(if (empty? %) true\n   (if (= (first %) (last %)) (recur (butlast (rest %))) false))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":27,"code":"(fn [x] \n  (if (empty? x)\n    true\n    (if (not= (first x) (last x))\n      false\n      (recur (rest (drop-last x))))))","user":"56db8fbde4b0ea9b8538f80c"},{"problem":27,"code":"(fn [c]\n  (loop [nc c\n         f (first nc) \n         l (last nc)]\n    (if (not= f l)\n      false\n      (if (<= (count nc) 1)\n        true\n        (recur (rest (drop-last nc)) (first nc) (last nc))))))","user":"55e6809ee4b050e68259b48a"},{"problem":27,"code":"(fn [ls]\n  (if (not (coll? ls))\n    true\n    (let [length (count ls)]\n      (if (even? length) \n        (= (take (/ length 2) ls) (reverse (drop (/ length 2) ls)))\n        (= (take (/ (dec length) 2) ls) (drop (/ (inc length) 2) ls))))))","user":"53eaa804e4b036ad0777e4ea"},{"problem":27,"code":"#(if (coll? %) (= % (reverse %)) true)","user":"5989ee61e4b021a7a535fed7"},{"problem":27,"code":"(fn [input-seq]\n  (loop [[first & rest] input-seq\n         rev []]\n    (println rev)\n    (if (nil? first)\n      (= (into () input-seq) rev)\n      (recur rest (conj rev first)))))","user":"5c195cb2e4b01240ff5671f7"},{"code":"#(= (apply str %) (apply str (vec (reverse %))))","problem":27,"user":"514cfa27e4b019235f6c057d"},{"problem":27,"code":"#(every? (fn [[a b]] (= a b)) \n         (map vector % (reverse %)))","user":"5566d812e4b0c656e3ff1837"},{"problem":27,"code":"(fn [x] (= (take (/ (count x) 2) x) (take (/ (count x) 2) (reverse x))))","user":"54461393e4b032a45b8693a5"},{"problem":27,"code":"(fn [x] (let [res (reverse x)] (if (string? x) (= x (apply str res)) (= res x))))","user":"6076adb2e4b069485764de60"},{"problem":27,"code":"(fn [s] (if (= (seq s) (reverse s)) true false))","user":"5c852e3ae4b0c8042a70ce78"},{"code":"(fn [coll] \n  (= (seq coll) (reverse coll)))","problem":27,"user":"539ad6b7e4b0b51d73faaf18"},{"problem":27,"code":"(fn pali [x]\n  (if (<= (count x) 1)\n    true\n    (if-not (= (first x) (last x))\n      false\n      (pali (reverse (rest (reverse (rest x)))))\n  \t)\n  )\n)","user":"595ed97fe4b066ee0a44b051"},{"problem":27,"code":"(fn [s] (= (reverse (reverse s))  (reverse s)))","user":"55d74e71e4b0e31453f64aa4"},{"problem":27,"code":"(fn [sequ] \n   (every?\n    #(apply = %)  \n    (map \n     vector \n     (reverse sequ) \n     sequ)))","user":"567476bde4b05957ce8c6139"},{"problem":27,"code":"(fn palindrome\n  [arr]\n  (if (> 2 (count arr))\n    true\n    (if (= (first arr) (last arr))\n      (palindrome (rest (butlast arr)))\n      false)))","user":"5e9636fee4b0fbed045a3816"},{"code":"(fn [seqs]  \n   (let [reverse-seq (reverse seqs)]\n         \n     (= (seq seqs) (seq reverse-seq) )\n     )\n  )","problem":27,"user":"53075d82e4b02e82168697a1"},{"code":"(fn [a] (if (< (count a) 2) \n            true\n            (if (= (first a) (last a)) \n              (recur (rest (drop-last a)))\n              false)\n          )\n)","problem":27,"user":"4f1595da535d64f603146444"},{"code":"(fn myfunc [x]\r\n  (if (string? x)\r\n    (= x (apply str (reverse x)))\r\n  (= x (reverse x))))","problem":27,"user":"50a85af1e4b054305ba5a833"},{"problem":27,"code":"(fn pal [x]\n  (=\n   (clojure.string/join \"\" x)\n   (clojure.string/join \"\" (reverse x))\n  )\n)","user":"5600bed5e4b04bb52996e170"},{"problem":27,"code":"(fn [%] \n  (= (seq %) (reverse (seq %)))\n)","user":"5aa62482e4b0d174b936c8a5"},{"code":"(fn ! [x]\n  (if (= x '())\n    true\n    (if (= (first x) (last x))\n      (! (rest (reverse (rest x))))\n      false)))","problem":27,"user":"4fc9cba3e4b0ee37620e1849"},{"problem":27,"code":"(fn\n  [item]\n  (= (reverse item) (apply list item)))\n\n; #(= (reverse %) (seq %))","user":"59e48db0e4b08badc2a0c53e"},{"code":"(fn [vs] \n  (let [half (mod (count vs) 2)] \n    (= (take half vs) (take half (reverse vs)))))","problem":27,"user":"4f0f36a7535d0136e6c22336"},{"code":"(fn[x]\n  (if (string? x)\n      (= (reverse x)\n         (reverse (reverse x)))\n      (= x (reverse x))))","problem":27,"user":"4ecd2735535d23f036227703"},{"code":"(fn [s] (loop [t s] (if (= 0 (count t)) true (if (not (= (first t) (last t))) false (recur (take (dec (dec (count t))) (drop 1 t)))))))","problem":27,"user":"5166b491e4b060c690c1f4be"},{"problem":27,"code":"(fn [lst]\n  (if (even? (count lst))\n    (= (take (/ (count lst) 2) lst)\n       (reverse (take-last (/ (count lst) 2) lst)))\n    (= (take (quot (count lst) 2) lst)\n       (reverse (take-last (quot (count lst) 2) lst)))))","user":"561a9380e4b053970a773b07"},{"code":"(fn isPdrome? [seq]\n  (let [c (count seq)\n        half (quot c 2)\n        split (split-at half seq)\n        frst (first split)\n        scnd (if (odd? c)\n               (rest (second split))\n               (second split))]\n    (every? #(= (first %) (last %)) (map vector frst (reverse scnd)))))","problem":27,"user":"529f739fe4b04e0c58e87bad"},{"problem":27,"code":"(fn [str]\n         (if (= [] (rest str))\n           true\n           (and\n             (= (first str) (first (reverse str)))\n             (recur (rest (drop-last str)))\n             )\n           )\n         )","user":"53dbc8bee4b094d41abdfef5"},{"problem":27,"code":"(fn rev [lst]  \n  (if (empty? lst) \n    true\n    (let [x (first lst), y (last lst)]\n      (if (= x y) (rev (rest (butlast lst))) false))))","user":"5624b34be4b00a550fc90286"},{"problem":27,"code":"(fn [some-string]\n    (if (string? some-string)\n      (= some-string (apply str (reverse some-string)))\n      (= some-string (reverse some-string))\n      )\n    )","user":"5bd71aefe4b0ed4b8aab4bb5"},{"problem":27,"code":"(fn palindrome? [s]\n    (or (= (count s) 0)\n        (= (count s) 1)\n        (and (= (first s) \n             \t(last s)) \n         \t (palindrome? (rest (butlast s))))))","user":"57c45e64e4b05aa3c4741ccf"},{"problem":27,"code":"(fn [s]\n  (= (reverse s)\n     (apply list s)))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":27,"code":"#(if (string? %) (= (char-name-string %) (char-name-string (reverse %))) (= % (reverse %)))","user":"5ef82119e4b09b61f08553c6"},{"problem":27,"code":"(fn palindrome [input]\n  (if (<= (count input) 1 )\n    true\n    (if (= (first input) (last input))\n      (palindrome (drop-last (drop 1 input)))\n      false)))","user":"5d68f5e6e4b0db5d338d1605"},{"code":"(fn is-palindrome? [x]\n  (= x (if (string? x) (apply str (reverse x)) (reverse x))))","problem":27,"user":"52b71bd2e4b0c58976d9ad4d"},{"code":"(fn [l](= (reverse (reverse l)) (reverse l)))","problem":27,"user":"4eeccfc0535d93acb0a668b5"},{"code":"#(loop [seq %\n        req (reverse seq)]\n   (cond (empty? seq) true\n         (= (first seq) (first req)) (recur (rest seq) (rest req))\n         :else false))","problem":27,"user":"4f1ef703535d64f60314649c"},{"code":"(fn [x] (if\n (= java.lang.String (type x))\n   (= x (#(apply str (reverse %)) x))\n   (= x (#(reverse %) x))) \n  )","problem":27,"user":"52fe869be4b047fd5583703f"},{"problem":27,"code":"(fn [col] (every? #(true? %) (map #(= %1 %2) col (reverse col))))","user":"56252effe4b00a550fc90294"},{"code":"(fn [x]\r\n  (if (string? x)\r\n(= x (apply str (reverse x)))\r\n  (= x (reverse x))))","problem":27,"user":"4df30f76535d08e6dec9fe28"},{"problem":27,"code":"(fn [x]\n  (cond (or (empty? x) (= 1 (count x))) true\n        (not= (first x) (last x)) false\n        :else (recur (rest (butlast x)))))","user":"53cb30f0e4b00fb29b2212d0"},{"problem":27,"code":"#(= (reverse(reverse %)) (reverse %1))","user":"59f67819e4b0966464fe6ad3"},{"problem":27,"code":"(fn f [s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (f (butlast (rest s)))\n      false)))","user":"59ee2b59e4b0966464fe6a10"},{"problem":27,"code":"(fn [xs] ((fn [sequence] \n      (= (reverse sequence) sequence)\n  )(into '() xs)) \n)","user":"5c3de434e4b0d62ef62d9fb8"},{"problem":27,"code":"(fn [coll]\n  (cond\n   (<= (count coll) 1) true\n   (not= (first coll) (last coll)) false\n   :else (recur (-> coll next butlast))))","user":"562cb7cfe4b0a45d2ff83009"},{"code":"(fn [s]\n  (loop [a s \n         b (reverse s)]\n    (if (empty? a)\n      true\n      (if (= (first a) (first b))\n        (recur (rest a) (rest b))\n        false))))","problem":27,"user":"50d4909ce4b09cc622d65a6c"},{"problem":27,"code":"(fn [s]\n  (letfn [(check [i j]\n            (if (>= i j)\n              true\n              (if (= (nth s i) (nth s j))\n                (recur (inc i) (dec j))\n                false)))]\n    (check 0 (dec (count s)))))","user":"52e6aea1e4b09f7907dd147c"},{"problem":27,"code":"(fn [w] (= (vec w) (reverse (vec w))))","user":"55b66ebce4b01b9910ae2996"},{"code":"(fn [n] (let [f #(apply str %)]\n  (= (f (reverse n)) (f n))))","problem":27,"user":"4f0333f6535dcb61093f6a77"},{"problem":27,"code":"(fn palindrome?\n  [coll]\n  (cond\n   (empty? coll) true\n   (empty? (rest coll)) true\n   (= (first coll) (last coll)) (palindrome? (rest (butlast coll)))\n   :else false))","user":"565d8dcfe4b068f2fe63dc26"},{"code":"#(every? (fn [[a b]] (= a b)) (map list % (reverse %)))","problem":27,"user":"4fe1a734e4b0dd6cd5ce3637"},{"code":"(fn pal [s]\n  (if (empty? s)\n    true\n  \t(if (= (first s) (last s))\n      (pal (rest (butlast s)))\n      false)))","problem":27,"user":"52aa524fe4b0c58976d9ac64"},{"code":"(fn my-palindrome? [xs]\n  (if (empty? xs) true\n  (and \n   (= (first xs) (last xs))\n   (my-palindrome? (drop-last (rest xs)))\n  ))\n)","problem":27,"user":"5273b883e4b03e8d9a4a748f"},{"problem":27,"code":"(fn pal?[x] (cond (empty? x) true (not= (first x) (last x)) false :else (pal? (nthrest (butlast x) 1))))","user":"58d96bdce4b0a4d5acaab638"},{"code":"#( if (string? %) \n     (= % (apply str (reverse %))) \n     (= % (reverse %))\n     )","problem":27,"user":"5259a16ee4b0cb4875a45ce1"},{"problem":27,"code":"#(= (seq %1) (seq(reverse %1)))","user":"5640fb97e4b08d4f616f5eef"},{"code":"(fn f2 [y]\n  (let [y1 \n        (reduce (fn [acc e]\n                  (conj acc e))\n                () y)]\n    (if (string? y)\n      (if(= (apply str y1) y)\n        true\n        false)\n      (if (= y y1)\n        true\n        false))))","problem":27,"user":"52d6664be4b09f7907dd1359"},{"code":"(fn [input]\n  (let [seq (seq input)]\n    (if (even? (count seq))\n\t    (= seq (reverse seq))\n\t    (let [half (take (/ (- (count seq) 1) 2) seq) middle (nth seq (count half))]\n\t      (= seq (flatten (conj [] half middle (reverse half))))\n\t    )\n\t  )\n  )\n)","problem":27,"user":"4e7e05a6535db169f9c796fe"},{"problem":27,"code":"(fn [something]\n  (= (seq something) (reverse something)))","user":"56acfee5e4b03c432f18734f"},{"problem":27,"code":"; Write a function. Got it.\n(fn [s] \n  \n  ; Work with sequences...\n  \n  (loop [l-s s]\n    \n    ; If it's empty or one, then return true\n    (if (or (= (count l-s) 1)  (empty? l-s)) ; conditional end\n      \n      true\n      \n      ; If the first equals the first of the reversed, recur, else false\n      (if (= (first l-s) (first (reverse l-s))) ; conditional end\n        \n        ; recur without the ends\n        \n        ; Wow\n        (recur (reverse (rest (reverse (rest l-s) )) ) )\n        \n        false\n        \n        ) ; if end\n      \n      ) ; if end\n    \n    \n    ) ; loop end\n        \n  \n  \n  \n  \n  ) ; fn end","user":"5ff676a9e4b06df49cee1497"},{"problem":27,"code":"(fn palindrome [seq] \n  (= (apply str seq) (apply str ((fn rev [seq] \n  (if (= (first seq) nil) nil (conj (rev (take (dec (count seq)) seq)) (last seq)))) seq))))","user":"56ffeafee4b08d47c97781c2"},{"code":"(fn [l]\n  (= (seq l) (reverse l)))","problem":27,"user":"53134005e4b08068f379ed07"},{"problem":27,"code":"(fn [pal] \n  (let [reversepal (if (string? pal) (apply str (reverse pal)) (reverse pal))] (= pal reversepal)))","user":"60b616e1e4b0e0fa5f1b4243"},{"problem":27,"code":"(fn palindrome[l]\n  (every?\n    true?\n    (map #(= (first %1) (second %1))\n      (map vector\n        (take (/ (count l) 2) l)\n        (take (/ (count l) 2) (reverse l))))))","user":"56069006e4b08b23635d3174"},{"code":"(fn [xs]\n  (loop [ys xs]\n    (if (empty? ys)\n      true\n      (if (not (= (first ys) (last ys)))\n        false\n        (recur (rest (butlast ys)))))))","problem":27,"user":"51b920bfe4b0e871ca4958f9"},{"problem":27,"code":"(fn palindrome?\n  ([l] (if (< (count l) 2) true (if (= (last l) (first l)) (palindrome? (rest (butlast l))) false)))\n)","user":"5d5b06a9e4b02ba5928a683a"},{"code":"#(= (apply str %)\r\n    (apply str (reverse %)))","problem":27,"user":"4dbde951535d020aff1edf53"},{"problem":27,"code":"(fn [x] (if (string? x) \n          (= x (apply str (vec (reverse x)))) \n          (= x (reverse x))))","user":"58a5c5c2e4b01a0c0b23291b"},{"problem":27,"code":"#(-> % (reverse) (= (seq %)))","user":"5501de12e4b07d26eda61d7b"},{"problem":27,"code":"(fn [x](= (seq x) (reverse (seq x))))","user":"59728d5fe4b01722bebd4c89"},{"code":"(fn pCheck [x]\n\t(if (= 0 (count x))\n\t\ttrue\n\t\t(if (= (first x) (last x))\n\t\t\t(pCheck (rest (butlast x)))\n\t\t\tfalse\n\t\t)\n\t)\n)","problem":27,"user":"524ed632e4b0541d1855b7f2"},{"code":"(fn [w]\r\n    (cond\r\n      (string? w) (= w (apply str (reverse w)))\r\n      :else (= w (reverse w))\r\n    )\r\n  )","problem":27,"user":"501819efe4b02f523d7cc5eb"},{"problem":27,"code":"(fn parindlome-checker [x]\n    (= (reverse (reverse x)) (reverse x)))","user":"546c1f73e4b00cfc9eacc175"},{"code":"#(loop [l %1 a (first %1) b (last %1)]\n       (if (empty? l)\n         true\n         (if (not= a b)\n             false\n         (recur (butlast (rest l)) (second l) (last (butlast l))))))","problem":27,"user":"4ffe8193e4b0678c553fc3f4"},{"code":"#(= (list* %1)(-> %1 list* reverse))","problem":27,"user":"500b6685e4b03d00572d2d82"},{"code":"(fn\n  [coll]\n  (let [re-coll (seq (reverse coll)) old-coll (seq coll)]\n    (if (= old-coll re-coll)\n      true\n      false)))","problem":27,"user":"5289bba9e4b0239c8a67ae69"},{"problem":27,"code":"(fn palindrome\n  [xs]\n  (loop [remn xs]\n    (cond (not= (first remn) (last remn)) false\n          (<= (count remn) 1) true\n          :else (recur (rest (take (dec (count remn)) remn))))))","user":"5a16da30e4b0ff51aa4b31cc"},{"code":"(fn palindrome?\n  [s]\n  (if (= (reverse s) (seq s))\n    true\n    false))","problem":27,"user":"521b339fe4b0c4ef0be83031"},{"problem":27,"code":"(fn ! [x] (or (empty? x) (empty? (rest x))\n                       (let\n                         [a (first x)\n                          b (last x)\n                          mid (butlast (rest x))]\n                         (and (= a b) (! mid))\n                         )))","user":"548f7bf1e4b0e286459a123b"},{"problem":27,"code":"(fn [s] (loop [x s rx (reverse s)]\n          (cond\n           (and (empty? x) (empty? rx)) true\n           (or (empty? x) (empty? rx)) false\n           (= (first x) (first rx)) (recur (rest x) (rest rx))\n           :else false)))","user":"5dee144ae4b093ff71727591"},{"problem":27,"code":"(fn [string]\n  (= \n   (seq string)\n   (into '() (seq string))\n  )\n)","user":"59313dc1e4b072a2710fd00a"},{"code":"(fn palindrom\n  [s]\n  (= (seq s) (reverse s)))","problem":27,"user":"51d1ef6ee4b0d13b04db0d92"},{"code":"(fn [x]\n  (let [\n        n (count x)\n        all (fn [l] (reduce (fn [a b] (and a b)) true l))\n        symm (fn [i] (= (nth x i) (nth x (- n (+ 1 i)))))\n        idxs (range n)\n        ]\n    (all (map symm idxs))\n    )\n  )","problem":27,"user":"50d8f4b6e4b01f0871336e74"},{"problem":27,"code":"#(= (->> (-> % (reverse) (vec)) (apply str)) (->> % (apply str)))","user":"5e85d0bde4b09a7a73c8bbd6"},{"code":"(fn pal [x]\n  (cond (seq? x) (if (= x (reverse x)) true false)\n        :else (if (=(reduce conj '() x) (reverse x)) true false)))","problem":27,"user":"5325cf91e4b09d4e7a9b54e8"},{"problem":27,"code":"(fn [a] (let [rev (reverse a)] (= a (if (string? a) (clojure.string/join rev) rev))))","user":"57efb389e4b0bfb2137f5bdb"},{"problem":27,"code":"(fn [coll]\n  (cond (empty? coll)\n        true\n        (= (count coll) 1)\n        true\n        :else\n        (if (= (last coll) (first coll))\n          (recur (drop 1 (drop-last coll)))\n          false)))","user":"5dc02058e4b0e59a23173d7c"},{"code":"(fn [s]\n  (let [t (into [] s)]\n    (= t (reverse t))))","problem":27,"user":"50799992e4b08327cd804a62"},{"code":"#(= (seq  %) (seq (reverse %)))","problem":27,"user":"518a8c4be4b0df82f5685903"},{"code":"(fn [xs] (= (reverse xs) (into [] xs)))","problem":27,"user":"52618ea3e4b03e8d9a4a7064"},{"code":"#(let [reversed (if (instance? String %1) (reduce str (reverse %1)) (reverse %1))]\n   (= reversed %1))","problem":27,"user":"50fe9d60e4b03cd852b4e84f"},{"problem":27,"code":"(fn [xs] (let [pairs (map vector xs (reverse xs))] \n  (every? #(= (first %) (nth % 1)) pairs)))","user":"5509a23ee4b06e50f9beb11a"},{"code":"#(if \n  (= % (if (string? %) (apply str (reverse %)) (reverse %))) \n  true \n  false)","problem":27,"user":"4ef0a39b535dced4c769f20d"},{"problem":27,"code":"(fn f[n] (every? #(true? %) (map #(= %1 %2) n (reverse n))))","user":"582089fbe4b04b46fc4b0f57"},{"problem":27,"code":"(fn [coll]\n  (let [num (int (/ (count coll) 2))\n        left (take num coll)\n        right (take-last num coll)]\n    (= left (reverse right))))","user":"52c0b2b9e4b07a9af5792353"},{"code":"(fn palindrome? [input] \n  (let [sequence (seq input)]\n    (condp = (count sequence)\n    0 true\n    1 true\n    (and (= (first sequence) (last sequence)) \n         (palindrome? (-> sequence rest butlast))))))","problem":27,"user":"525dd767e4b0cb4875a45d88"},{"problem":27,"code":"(fn ispal\n  [l]\n  (cond\n   (empty? (rest l)) true\n   (not (= (first l)\n           (last l))) false\n   :else\n   (ispal (drop-last (rest l)))))","user":"56e8ef93e4b04a395b9a03f4"},{"problem":27,"code":"(fn [x] (reduce #(and %1 %2)  (map = (into () x) (seq x))) )","user":"55818b0ee4b05c286339e0fb"},{"code":"(fn [s]\n  (if (instance? String s)\n    (= s (apply str (reverse s)))\n    (= s (reverse s))))","problem":27,"user":"510fd798e4b04c71fce993dc"},{"problem":27,"code":"#(loop [col %1]\n  (if (< (count col) 2)\n    true\n    (if-not (= (first col) (last col))\n      false\n      (recur (drop-last (rest col)))\n    )\n  )\n)","user":"595131bee4b066ee0a44aea9"},{"code":"(fn [x]\n  (if (string? x)\n      (= (clojure.string/join (reverse x)) x)\n      (= (reverse x) x)))","problem":27,"user":"4f036fad535dcb61093f6ac7"},{"code":"(fn pal [thing]\n  (if (seq thing)\n    (and (= (first thing) (last thing)) (pal (butlast (rest thing))))\n    true))","problem":27,"user":"52a1acb2e4b04e0c58e87bdb"},{"code":"(fn [p]\n  (let [l (/ (count p) 2)\n        a (take l p)\n        b (take l (reverse p))]\n    (= a b)\n    ))","problem":27,"user":"5243f93be4b076204b44faf6"},{"problem":27,"code":"(fn [coll] (every? identity (map = coll (reverse coll))))","user":"593db05ae4b069cdc2982bab"},{"code":"#(loop [ result true a % b (reverse %)]\n   ( if (empty? a)\n     result\n     (recur (and result (= (first a) (first b))) (rest a) (rest b))\n    )\n  )\n\n;#(= (reverse %) (seq %))","problem":27,"user":"528f4462e4b0239c8a67aef0"},{"code":"#(let [x (into '() %)] (= x (reverse x)))","problem":27,"user":"500ec210e4b00fff93030f9d"},{"code":"#(let \n\t\t [var %\n\t\t  len (quot (count var) 2)] \n   (= (take len var) (take len (reverse var))))","problem":27,"user":"503539dee4b0ed9c821488f6"},{"code":"(fn [c] (let [c (into () c)] (= c (reverse c))))","problem":27,"user":"4ff3e771e4b0678c553fc356"},{"problem":27,"code":"(fn [x] \n  (= ((fn [sec]\n        (let [count (count sec)\n              is-string (string? sec)\n              half (int (Math/floor (/ count 2)))\n              half-sec  (drop-last half sec)\n              palindrome (concat half-sec (if (even? count)\n                                           (reverse half-sec)\n                                           (rest (reverse half-sec))))]\n          (if is-string\n            (clojure.string/join palindrome)\n            palindrome)))\n      x)\n     x))","user":"5715b929e4b07c98581c3ae2"},{"code":"(fn [arg] (let [s (seq arg) r (reverse s)] (= s r)))","problem":27,"user":"4f072644535dcb61093f6c20"},{"problem":27,"code":"(fn pal? [s]\n  (if-not (= (first s) (last s))\n    false\n    (if (<= (count s) 2)\n      true\n      (pal? (drop-last (rest s))))))","user":"5af3aa42e4b0cc2b61a3bc8c"},{"code":"(fn [s]\n  (letfn [(pal [seq acc cnt]\n            (cond\n              (> acc (/ cnt 2)) true\n              (= (nth seq acc) (nth seq (- cnt acc 1))) (pal seq (inc acc) cnt)\n              true false))]\n    (pal (seq s) 0 (count (seq s)))))","problem":27,"user":"4eb404ba535d7eef3080735a"},{"problem":27,"code":"(fn [col] (= (seq  col) (reverse col)))","user":"5a912080e4b002d099cae6ea"},{"problem":27,"code":"(fn [c]\n   (not-any? false?\n             (for [v (map (fn [a b] [a b])\n                          (take (count c) (range))\n                          (reverse (take (count c) (range))))]\n               (= (nth c (first v))\n                  (nth c (last v))))))","user":"589ec900e4b02bd94d917e65"},{"code":"#(= (map (fn [y] y) %) (reverse %))","problem":27,"user":"5194ea33e4b05be8c43d2383"},{"problem":27,"code":"#(= (sequence %)\n   (reverse (sequence %)))","user":"5c995fa4e4b048ec896c5a96"},{"problem":27,"code":"#(every? identity (map (fn [a b] (= a b)) % (reverse %)))","user":"5df70ee8e4b0a607a9a45c8a"},{"problem":27,"code":"(fn pd [s]\n    (cond\n      (= 1 (count s)) true\n      (= 0 (count s)) true\n      (= (first s) (last s)) (pd (rest (butlast s)))\n      :else false\n      ))","user":"569425b6e4b0dcc4269f410e"},{"problem":27,"code":"#(let [len (count %)\n       index (quot len 2)]\n   (= (take index %)\n      (reverse (drop (- len index) %))))","user":"6032f7f9e4b0d5df2af222b9"},{"problem":27,"code":"(fn [x] (let [s (seq x)\n              size (+ (quot (count s) 2) (rem (count s) 2))\n              front-half (take size s)\n              back-half (take size (reverse s))] \n          (= front-half back-half)))\n;; why didn't I think of (= (seq s) (reverse s))...","user":"54c15722e4b0ed20f4ff6f22"},{"problem":27,"code":"(fn [x] \n(if (string? x)(= x (apply str(reverse x)))(= x (reverse x))))","user":"566a3a26e4b0a866af689699"},{"code":"(fn palin [x]\n  (println x)\n  (if (not (empty? x)) \n    (and \n      (= (first x) (last x)) \n      (palin (vec (drop-last 1 (rest x)))))\n    true))","problem":27,"user":"5231d8fae4b0e2e8de81d1fb"},{"code":"(fn[x]\n  (if (= x \"racecar\") true (if(= x (reverse x)) true false)))","problem":27,"user":"51d10b1fe4b067c36548635e"},{"problem":27,"code":"(fn [x] (= (seq x) (reduce conj () x)))","user":"595b7c12e4b066ee0a44afda"},{"problem":27,"code":"(fn [coll]\n  (let [reversed-coll (if (string? coll)\n                        (clojure.string/reverse coll)\n                        (reverse coll))]\n    (= coll reversed-coll)))","user":"58b12635e4b0ebc645576cf4"},{"problem":27,"code":"(fn [sequence] (= (reverse (seq sequence)) (seq sequence)))","user":"5a47ce68e4b05d388ecb6b5d"},{"problem":27,"code":"(fn [coll] (loop [first 0\n                  last (- (count coll) 1)]\n             (if (< first last)\n               (if-not (= first last)\n                 (if (= (get (vec coll) first) (get (vec coll) last)) (recur (inc first) (dec last)) false)\n                 true)\n               true\n               )\n             ))","user":"5c2692d2e4b07e362c2305c2"},{"problem":27,"code":"(fn [x]\n\t(= (seq x) (reverse (seq x))))","user":"59b62f8de4b05c620303ca1f"},{"problem":27,"code":"#(let [length (count %)]\n   (if (<= length 1)\n     true\n     (let [\n           f (first %)\n           l (last %)]\n       (and (= f l ) (recur (drop 1 (drop-last 1 %))))\n       )))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":27,"code":"(fn [lst] (let [l (count lst) a (int (Math/floor (/ l 2))) b (int (Math/ceil (/ l 2)))] (= (take a lst) (reverse (drop b lst)))) )","user":"5b507222e4b02d533a91bce7"},{"problem":27,"code":"(fn palindrome? [pali]\n  (= pali\n  (if (string? pali) (apply str (reverse pali)) (reverse pali))))","user":"5f6a266ae4b02876ed9fd042"},{"problem":27,"code":"(fn [li] (= (seq li) (reverse (seq li))))","user":"5fa7c574e4b0fa27300f3ddf"},{"problem":27,"code":"(comp (partial reduce =) (partial drop 1) (partial take 3) (partial iterate reverse))","user":"5535e9b8e4b09218d5f44fb3"},{"code":"#(let [s (seq %)] (= s (reverse s)))","problem":27,"user":"4ec363e7535dcc7ae8597d55"},{"problem":27,"code":"(fn palindrome? [iseq]\n  (let [n (count iseq)]\n    (= (take (int (/ n 2)) iseq) (reverse (drop (/ n 2) iseq)))))","user":"589c2e3fe4b00487982d5357"},{"code":"(fn pal_chk [coll]\n  (if (= 1 (count coll))\n    'true\n    (if (or (= 2 (count coll))\n            (= 3 (count coll))\n            )\n      (if (= (first coll) (last coll))\n        'true\n        'false\n        )\n      (if (and (= (first coll) (last coll)) \n               (pal_chk (butlast (rest coll)))\n               )\n        'true\n        'false\n        )\n      )\n    )\n  )","problem":27,"user":"516cbba6e4b06f078fab2525"},{"code":"(fn [s]\n  (let [\n      half (/ (count s) 2)\n      firsthalf (take half s)\n      secondhalf (take-last half s)\n      ] (= firsthalf (reverse secondhalf))))","problem":27,"user":"4fad20cfe4b081705acca235"},{"problem":27,"code":"(fn find-palindrome [v]\n  (= (map (fn [i]\n            i) v) (reduce (fn [a b]\n                 (conj a b)) '() v)))","user":"5cab0766e4b048ec896c5c45"},{"code":"(fn palindrome [xs] (let [ys (seq xs)] (= ys (reverse ys))))","problem":27,"user":"4ff2430ae4b0678c553fc336"},{"problem":27,"code":"(fn  [coll]\n  (let [mod (/ (count coll) 2)]\n    (= (take mod coll) (reverse (take-last mod coll))))\n   )","user":"56349008e4b0bfe05bf117bd"},{"code":"(fn pal [s] (cond (empty? s) true \n                  (= (first s) (last s)) (recur (rest (butlast s)))\n                  :else false))","problem":27,"user":"504e108ce4b078edc5f593b3"},{"problem":27,"code":"(fn [sx] (= (apply str sx) (apply str (reverse sx))))","user":"568bd448e4b0dcc4269f40a9"},{"problem":27,"code":"(fn [n] \n  (loop [n n\n         len (quot (count n) 2)\n         acc true]\n    (cond\n     (not acc) acc\n     (= len 1) (= (first n) (last n))\n     :else (recur (rest (drop-last n)) (dec len) (= (first n) (last n)))\n     )\n   \n   \n   ))","user":"5c0e3f86e4b01240ff56713d"},{"problem":27,"code":"(fn [input]\n  (let [sq (seq input) rev-sq (reverse sq)]\n    (= sq rev-sq)))","user":"55e70e8de4b050e68259b490"},{"problem":27,"code":"(fn [sequ]\n  (if (= (seq sequ) (reverse sequ))\n    true\n    false))","user":"5b102ab8e4b0cc2b61a3be19"},{"problem":27,"code":"(fn palDetect [arr] \n (if (< (count arr) 2)\n  true\n  (and\n   (= (first arr) (last arr))\n   (palDetect \n    (rest (butlast arr))\n   )\n  )\n )\n)","user":"57cc7d96e4b0c746388ab882"},{"problem":27,"code":"(fn [v]\n  (loop [xs v ys (reverse v)]\n      (if (empty? xs)\n        true\n        (let [[x & rxs] xs\n              [y & rys] ys]\n          (if (= x y)\n            (recur rxs rys)\n            false)))))","user":"54a31fdae4b09f271ff37c64"},{"problem":27,"code":"(fn pali? [l]\n\n  (= (seq l) (reverse l)\n  ))","user":"5afc115de4b0cc2b61a3bcff"},{"problem":27,"code":"(fn palindrome? [tokens]\n  (if (<= (count tokens) 1)\n    true\n    (and (= (first tokens) (last tokens))\n         (palindrome? (butlast (rest tokens))))))","user":"548c6673e4b0e286459a1209"},{"problem":27,"code":"(fn [sq]\n\t(= (seq sq) (reverse (seq sq)))  \n  )\n\n; sq == reverse(sq)\n;","user":"553f70cae4b0a04f792994f8"},{"problem":27,"code":"(fn prob27\n  [y]\n  (letfn [(rev [x]\n            (if (string? x)\n              (apply str (reverse x))\n              (reverse x)))]\n    (= y (rev y))))","user":"5d2e5065e4b01671435dbcae"},{"problem":27,"code":"#(loop [l %]\n   (if (< (count l) 2)\n     true\n     (if (= (first l) (last l))\n     (recur (butlast (rest l)))\n     false)))","user":"5662a5eee4b0e91d5f5c564b"},{"problem":27,"code":"(fn same [x]\n  (let [normalized (into [] x)\n       reversed (reverse normalized)]\n  (= normalized reversed)))","user":"5e6834e0e4b04793f195eaf9"},{"problem":27,"code":"(fn [x]\n  (= (seq x)\n     (-> x (seq) (reverse))))","user":"51bb08a4e4b0fe3ecfb46446"},{"code":"(fn [x] \n  (loop [l x]\n    (cond\n      (< (count l) 2) true\n      (= (first l) (last l)) (recur (drop-last(rest l)))\n      :else false)))","problem":27,"user":"4e920f44535dbda64a6f6afd"},{"problem":27,"code":"(fn [data]\n  (loop [a 0\n        b (- (count data) 1)]\n   (if (not= (nth data a) (nth data b))\n      false\n      (if (< b a)\n        true\n        (recur (inc a) (dec b))))))","user":"55ae7adae4b03311e7b732bd"},{"problem":27,"code":"(fn [s] (if (= (seq s) (reverse s))\n           true\n           false)\n   )","user":"55469eede4b0a04f79299542"},{"code":"(fn [s]\n  (= (vec s) (reverse s)))","problem":27,"user":"50053d6ce4b0678c553fc45e"},{"code":"(fn [in]\n   (= (seq in) (reverse in)))","problem":27,"user":"537bde5de4b06839e8705e73"},{"problem":27,"code":"(fn[s]\n  (= (sequence s) (reverse s)))","user":"5813e208e4b0f478707a061b"},{"problem":27,"code":"(fn p [l] \n  (letfn [(c [l] \n      (int (Math/ceil \n            (/ (count l) 2.0)\n            \n           )\n      )\n       )]\n       (= (take (c l) l)\n          (take (c l)\n                (reverse l))\n       )\n  )\n)","user":"56a75810e4b0542e1f8d14fc"},{"problem":27,"code":"(fn [x] (= (seq x) (into () (seq x))))","user":"564d936ee4b0284900eef681"},{"problem":27,"code":"(fn [s] \n  (let [x (int (/ (count s) 2))]\n    (= (take x s) (reverse (take-last x s)))))","user":"59f38703e4b0966464fe6a9e"},{"problem":27,"code":"(fn [lst]\n (every? true? (map #(= %1 %2) lst (reverse lst)))\n  )","user":"56e9a56ae4b04a395b9a03fc"},{"problem":27,"code":"(fn f [s]\n  (if (<= (count s) 1) true\n    (and (= (first s) (last s))\n         (f (rest (into '() (rest s))) ))\n    )\n  )","user":"55bfc39ee4b01b9910ae2a1a"},{"problem":27,"code":"(fn [initem]\n\n    (if (=\n         (seq initem)\n         (reverse (seq initem))\n         )\n      true\n      false))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":27,"code":"#((fn[x] (= (reverse x) (reverse (reverse x)))) %)","user":"55fda077e4b07755b13145fb"},{"code":"(fn is-palindrome? [sq]\n  (loop [x (seq sq) ]\n    (if (empty? x)\n    true\n    (if (not (= (first x) (last x)))\n      false\n      (recur (rest(reverse (rest x))))))) )","problem":27,"user":"4f2aff4de4b0d6649770a044"},{"code":"(fn p? ([x] (p? x x))\n       ([x x]\n         (= (seq x) (reverse (seq x)))))","problem":27,"user":"51eadb98e4b0f1f103a0d153"},{"problem":27,"code":"#(let [a (into [] %)] (= (reverse a) a))","user":"549cd548e4b0f3d1d8e70f91"},{"code":"(fn palindrome? [seq]\n  (or\n    (empty? seq)\n    (and\n      (= (first seq) (last seq))\n      (palindrome? (rest (drop-last seq))))))","problem":27,"user":"52ec1dfbe4b0705949c4444b"},{"problem":27,"code":"(fn pal? [c] \n  (if (string? c)\n    (if (= (apply str (reverse c)) c)\n      true\n      false\n      )\n  (if (= (reverse c) c)\n    true\n    false\n    )\n  ))","user":"578151ade4b0d36ec5835e83"},{"problem":27,"code":"(fn [x] (= (reverse (apply vector x)) (apply vector x)))","user":"5e12b21be4b099d064962feb"},{"problem":27,"code":"#(if (not= java.lang.String (type %))\n    (= % (reverse %))\n    (= % (.toString (.reverse (StringBuilder. %)))))","user":"5fb2eac0e4b08cb800c85b2f"},{"problem":27,"code":"(fn [coll]\n  (if (= String (class coll))\n    (= coll (apply str (reverse coll)))\n    (= coll (reverse coll))))","user":"55b5fc18e4b01b9910ae298d"},{"problem":27,"code":"(fn [coll]\n  (loop [c coll]\n    (cond (< (count c) 2) true\n          (not= (first c) (last c)) false\n          :else (recur (rest (drop-last c))))))","user":"5592ba8be4b0c79f6e1db931"},{"problem":27,"code":"(fn [xs] \n  (every? identity\n          (map = (reverse xs) xs)))","user":"549dd591e4b0f3d1d8e70f98"},{"problem":27,"code":"#(loop [c %]\n               (if (<= (count c) 1)\n                 true\n               (if (= (last c) (first c))\n                 (recur (drop-last (rest c)))\n                 false)))","user":"554be50de4b0a04f7929959c"},{"problem":27,"code":"(fn [s] (= (apply vector (reverse s)) (apply vector s)))","user":"5e0a6cf0e4b099d064962f66"},{"problem":27,"code":"(fn [arg] (= (reverse arg) (seq arg)))","user":"52c634b1e4b0c2d177d6210a"},{"code":"(fn [l]\n  (let [l (seq l)]\n    (= (reverse l) l)))","problem":27,"user":"50435852e4b034ff00315d22"},{"problem":27,"code":"#(loop [[h1 & t1] (seq %)\n        [h2 & t2] (reverse %)]\n    (cond\n      (not= h1 h2) false\n      h1 (recur t1 t2)\n      true true))","user":"55aa7c5ce4b0988bba2ad94d"},{"code":"(fn [s] (let [\n              lst (list* s)\n              revlst (reduce (fn [acc, x] (cons x acc)) '() lst)\n              ] (reduce \n                 (fn [acc, pair] \n                          (cond \n                           \t(false? acc) acc\n                            (= (first pair) (second pair)) acc\n                            :default false\n                           )\n                   )\n                 true\n                 (list* (zipmap lst revlst))\n                 )\n          )\n  )","problem":27,"user":"4fb03cf4e4b081705acca262"},{"problem":27,"code":"(fn [l]\n  (if (nil? (next l)) true\n    (if (= (first l) (last l)) (recur  (drop-last (drop 1 l))) false)))","user":"56051095e4b08b23635d3162"},{"code":"(fn [coll]\n  (if (= (reverse (seq coll)) (seq coll)) true false))","problem":27,"user":"511060fae4b04c71fce993f1"},{"code":"(fn [col] (= (reverse (vec col)) (vec col)))","problem":27,"user":"5272ccf1e4b03e8d9a4a7450"},{"problem":27,"code":"(fn [arg]\n  (= (seq arg) (reverse arg)))","user":"57485efee4b009280f9f2b8a"},{"problem":27,"code":"(fn pal [coll] (cond (empty? coll) true\n                     (= (count coll ) 1) true\n                     :else (and (= (first coll) (last coll)) \n                         (recur (drop-last (rest coll))))))","user":"5f4303cfe4b0955706451fb3"},{"code":"(fn [x]\n(= \n (loop [cnt (count x) acc (list* x) new '()]\n  (if (zero? cnt)\n      new\n        (recur (dec cnt) (rest acc) (conj new (first acc)))\n    \n    )\n  )\n   \n  (list* x)))","problem":27,"user":"519218ebe4b08962174cf737"},{"problem":27,"code":"(fn [lst]\n\t(let [list lst\n          rev-list (reverse lst)]\n    \t(reduce #(and %1 %2) (map #(= %1 %2) list rev-list))\n      ))","user":"56804d03e4b0966858e4d8ec"},{"problem":27,"code":"(fn [s]\n  (let [orig (seq s)\n        rev (reverse (seq s))]\n    (= orig rev)))","user":"585aeddbe4b0f14aab7c875b"},{"problem":27,"code":"#(= (vec (reverse %1)) (vec %1))","user":"569f7bc2e4b0542e1f8d1494"},{"code":"(fn pd [x]\n  (= (apply str x) (apply str (reverse x))))","problem":27,"user":"4f6e7073e4b07046d9f4efd8"},{"code":"(fn this\n  ([s] (this (sequence s) '()))\n  ([s r] (cond\n    (> (count r) (count s)) false\n    (= s r) true\n    (= (rest s) r) true\n    true (recur (rest s) (conj r (first s))))))","problem":27,"user":"4f038017535dcb61093f6afa"},{"problem":27,"code":"(fn [sq] \n  ((fn [sq lo hi]\n    (if (<= hi lo) \n        true \n        (if (= (nth sq lo) (nth sq hi))\n     \t    (recur sq (+ lo 1) (- hi 1))\n            false)))\n   sq 0 (- (count sq) 1)))","user":"54e4ef4de4b024c67c0cf7f4"},{"problem":27,"code":"(fn [sequen]\n  (if (string? sequen) (= sequen (apply str (reverse sequen)))\n                       (= sequen (reverse sequen)))\n  )","user":"60a52517e4b00e9e6653c459"},{"problem":27,"code":"(comp \n       #(= (rseq %) %)\n vec)","user":"5c408a61e4b08cd430848eb2"},{"problem":27,"code":"#(let \n    [ss (seq %1)] \n    (= ss (reverse ss)))","user":"4f6de600e4b07046d9f4efd1"},{"problem":27,"code":"#(= (compare (vec %) (vec (reverse %))) 0)","user":"56532ff4e4b0f9d632dd846e"},{"code":"#((fn doit [a b] (if (empty? a) true (if (= (first a) (first b)) (doit (rest a) (rest b)) false))) % (reverse %))","problem":27,"user":"518b5e2fe4b05711021000b2"},{"problem":27,"code":"(fn [data] \n     (if (= (reverse data) (reverse (reverse data))) true false))","user":"56ef11efe4b04a395b9a045b"},{"code":"#(loop [x % y #{}]\n\t(if (empty? x) false\n\t\t(if (contains? y (first x)) true\n\t\t\t(recur (rest x) (conj y (first x))))))","problem":27,"user":"52b79d8ee4b0c58976d9ad50"},{"problem":27,"code":"(fn palindromic? [x] (= (seq x) (seq (reverse x))))","user":"560434cfe4b0c80df0ca2658"},{"code":"(fn [xs] (= (seq xs) (reverse xs)))","problem":27,"user":"4dfd4ba8535d04ed9115e781"},{"problem":27,"code":"(fn [l] (= (take (/ (count l) 2) l) (take (/ (count l) 2) (reverse l))))","user":"53da059be4b0e771c302547e"},{"code":"(fn [n] (= (vec n) (reverse (vec n))))","problem":27,"user":"51485d25e4b0203766d54155"},{"problem":27,"code":"(fn pal [mySequence]\n  (= (seq mySequence) (reverse mySequence)))","user":"5e663073e4b0fd0acd1586bc"},{"code":"(fn [s]\n    (let [s1 s\n        s2 (reverse s)\n        len (min (count s1) (count s2))\n        s1* (take len s1)\n        s2* (take len s2)]\n    (= s1* s2*)))","problem":27,"user":"500e6ddee4b04a05d36fcc06"},{"code":"; #(= (seq %) (into () (seq %)))\n#(= (seq %) (reverse %))","problem":27,"user":"4e5f08c7535d8a8b8723a2da"},{"problem":27,"code":"(fn [x] \n  (let [rev (reverse x) max (count x)] \n    (loop [i 0 is-pal true] \n      (if (= i max) \n        (true? is-pal) \n        (recur (inc i) (and is-pal (= (nth rev i) (nth x i))))))))","user":"54055aa9e4b0addc1aec6665"},{"code":"(fn\n  [elements]\n  (every?\n   (fn [[a b]] (= a b))\n    (partition 2 (interleave elements (reverse elements)))))","problem":27,"user":"50a01937e4b08df8156e9e47"},{"problem":27,"code":"(comp #(= (reverse %) %) seq)","user":"5379946be4b06839e8705e56"},{"code":"(fn [coll]\n          (loop [col coll] \n            (if (< (count col) 2)\n               true\n            ;; else\n            (if-not (#(= (first %) (last %)) col)\n               false\n            (recur ( #(rest (butlast %) ) col))))))","problem":27,"user":"4de27757535d08e6dec9fdea"},{"code":"(fn [lst]\n  (if-not (empty? lst)\n    (let [frst-el (first lst)\n          lst-el (last lst)\n          rst (rest (butlast lst))]\n      (if (= frst-el lst-el)\n        (recur rst)\n        false))\n    true))","problem":27,"user":"52fb68bfe4b047fd5583700a"},{"problem":27,"code":"(fn [coll]\n  (loop [c coll]\n    (cond (or (empty? c) (= (count c) 1)) true\n          (not= (first c) (last c)) false\n          :else (recur (take (- (count c) 2)\n                             (next c))))\n      \n  )\n)","user":"5d07989ee4b0cc9c915881fb"},{"problem":27,"code":"(fn [coll]\n  (let [v (vec coll)]\n    (= v (reverse v))))","user":"53c9d29ae4b00fb29b2212c2"},{"problem":27,"code":"(fn ololo [x]\n  (if (string? x)\n    (= x (apply str (reverse x)))\n    (= x (reverse x))\n  )\n)","user":"5b113f20e4b0cc2b61a3be2c"},{"problem":27,"code":"(fn [s] \n  (= (vec s) \n     (vec (reverse s))))","user":"60b98974e4b0e0fa5f1b4271"},{"code":"(fn pal [sana]\n  (= (seq sana) (reverse sana)))","problem":27,"user":"50b32252e4b03ea880433568"},{"code":"(fn [c] (= (reverse (seq c)) (seq c)))","problem":27,"user":"4ee7d177535d93acb0a6686f"},{"problem":27,"code":"(fn [col] (= (seq col) (seq (reverse col))))","user":"58e15bfde4b005f69f193c7a"},{"problem":27,"code":"#(= (if (string? %)\n      (apply str (reverse %))\n      (reverse %))\n    %)","user":"53b6b6c8e4b047364c0444ca"},{"problem":27,"code":"#(\n  if(< (count %1)3)\n  \ttrue\n  \t(if(=(first %1)(last %1))\n         (recur (-> %1 rest butlast))\n         false)\n  )","user":"53c38b8ce4b00fb29b22127b"},{"problem":27,"code":"(fn [s]\n(let [as-seq (vec s)]\n  (= as-seq (reverse as-seq))))","user":"5d5eb086e4b0c9e5857d4ff7"},{"problem":27,"code":"#(loop [s %]\n   (if (empty? s)\n     true\n     (if (= (first s) (last s))\n       (recur (rest (reverse (rest s))))\n       false)))","user":"56baab13e4b0f26550335948"},{"code":"#(= (if (string? %) (apply str (reverse %)) (reverse %))  %)","problem":27,"user":"4e059278535d04ed9115e7a5"},{"problem":27,"code":"(fn algo \n  [lst]\n  (loop [\n         lst lst\n         ]\n    (if (empty? lst)\n      true\n      (if (= (first  lst) (last lst))\n        (recur (rest (drop-last lst)))\n        false\n        )\n      )\n    \n    )\n  \n  )","user":"59e56c75e4b08badc2a0c556"},{"code":"(fn palindrome? [x]\n  (= (seq x) (reverse x)))","problem":27,"user":"4fa17b00e4b0dcca54ed6d5f"},{"code":"(fn\n  [p]\n    (loop [x 0 len (- (count p) 1)]\n      ; Did we make it to the middle of the seq?\n      ; If so return true, it is a palindrome!\n      (if (or (= x len) (> x len)); handle even/odd size collections\n        true\n        ; Check head/tail, if they are equal continue, otherwise\n        ; it is not a palindrome\n        (if (= (nth p x) (nth p len))\n          (recur (inc x) (dec len))\n          false))))","problem":27,"user":"4eddc5f4535d10e5ff6f532c"},{"problem":27,"code":"(fn [x]\n  (let [a (seq x)\n        b (reverse x)]\n    (= a b)))","user":"58171a9ae4b0c0e9c07b8387"},{"problem":27,"code":"(fn [v]\n   (let [n (quot (count (seq v)) 2)]\n     (= (take n v) (take n (reverse v)))))","user":"5a64dcabe4b0512ff01cd9a9"},{"code":"(fn palindrome [coll]\r\n  (if (not (= (first coll) (last coll))) false\r\n    (if (empty? coll) true\r\n      (recur (drop-last (drop 1 coll))))))","problem":27,"user":"523aa92ae4b081681ca7adcd"},{"problem":27,"code":"#(if (= (apply str %) (apply str (reverse %))) true false)","user":"5e9b6471e4b0157ca96647f0"},{"code":"(fn palindrome? [coll]\r\n     (= (reverse coll) (seq coll)))","problem":27,"user":"4dddff47535d08e6dec9fdd4"},{"code":"(fn [x]\n  (let [r (reverse x)]\n    (reduce (fn [a b] (and a b))  (map =  x r))))","problem":27,"user":"504e127fe4b078edc5f593b6"},{"code":"(fn pal [coll]\n  (every? #(= (first %) (second %))\n    (map #(vector %1 %2) coll (reverse coll))\n))","problem":27,"user":"504d0116e4b022602c20b089"},{"code":"(comp (partial apply\n                #(if (<= (- %3 %2) 1)\n                   true\n                   (if (= (get %1 %2)\n                          (get %1 %3))\n                     (recur %1 (inc %2) (dec %3))\n                     false)))\n       #(list (vec %) 0 (dec (count %))))","problem":27,"user":"51105c7fe4b04c71fce993ef"},{"code":"#(let [n  (quot (count %) 2) c1 (take n %) c2 (reverse(take-last n %))] (= c1 c2))","problem":27,"user":"522eba30e4b01cdb292c5f0e"},{"problem":27,"code":"(fn pal [coll]\n  (if (< (count coll) 2)\n    true\n    (and (= (first coll) (last coll))\n         (-> coll rest butlast pal))))","user":"5a099c98e4b01bb0ae8afe11"},{"problem":27,"code":"(fn [coll]\n  (= (reverse (reverse coll)) (reverse coll)))","user":"5c06f6e3e4b0bdcf453d16bb"},{"code":"(fn [s]\n  (= s (if (string? s) (apply str (reverse s)) (reverse s))))","problem":27,"user":"5225666be4b01819a2de4300"},{"problem":27,"code":"#(= (vec %1) (rseq (vec %1)))","user":"563ce002e4b0bfe05bf11841"},{"code":"(fn [s]\n  (if (instance? String s)\n    (= s  (apply str (reverse s)))\n    (= s (reverse s))))","problem":27,"user":"4ef9b021535dced4c769f269"},{"code":"(fn palindrome [x]\r\n  (if (= (type x) java.lang.String)\r\n    (= x (apply str (vec (reverse x))))\r\n    (= x (reverse x))))","problem":27,"user":"4fa313bbe4b081705acca188"},{"code":"(fn [s] (let [sq (seq s)]  (= sq (reverse sq))))","problem":27,"user":"4f97d8f3e4b0dcca54ed6ced"},{"problem":27,"code":"(fn palindrome [xs] \n  (if (< (count xs) 2) \n    true \n    (and \n     (= (first xs) (last xs))\n     (palindrome ((comp rest drop-last) xs)))))","user":"5ec0de29e4b00a66d4a9528e"},{"code":"(fn [coll]\n  (if (or (empty? coll) (= (count coll) 1))\n    true \n    (let [f (first coll) l (last coll)]\n      (if (= f l) (recur (-> coll butlast rest)) false))))","problem":27,"user":"509a5ca8e4b0efbae1fbc0ab"},{"code":"(fn ispal[x] (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))","problem":27,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn [sq]\n  (cond \n    (nil? sq) true\n    (= (first sq) (last sq)) (recur (-> sq rest butlast))\n    :else false))","problem":27,"user":"51f984ece4b09be9c177e54d"},{"code":"(fn [word] (= (-> word reverse reverse) (reverse word)))","problem":27,"user":"5332f9e1e4b019098a6f8b79"},{"problem":27,"code":"#(let [r (reverse %)] (= (seq %) r))","user":"5a66f358e4b0512ff01cd9d5"},{"problem":27,"code":"(fn pal [x] (if (< (count x) 2) true (let [a (first x) b (last x)](if (= a b) (pal (drop-last (rest x))) false))))","user":"57c0f515e4b05aa3c4741c98"},{"problem":27,"code":"#(let [lst (seq %) rlst (reverse lst)]\n   (reduce (fn [r i] (and r i)) true (map (fn [a b] (= a b)) lst rlst)))","user":"535ca812e4b04ce2eb3ed2b7"},{"problem":27,"code":"(fn rec [l]\n  \t(if (<= (count l) 1)\n      true\n      (let [hd (first l)\n            lt (last l)\n            l (-> l rest drop-last)]\n        (if (= hd lt)\n          (rec l)\n          false))))","user":"55e246c2e4b050e68259b431"},{"problem":27,"code":"(fn[lst] (= (seq lst) (reverse lst)))","user":"5f727d2fe4b02876ed9fd08f"},{"problem":27,"code":"(fn pal? \n  ([coll] (pal? coll 0 (dec (count coll))))\n  ([coll s e]\n   (if (< s e)\n     (and (= (nth coll s) (nth coll e))\n          (pal? coll (inc s) (dec e)))\n     true)))","user":"5a346d73e4b0ddc586f153c8"},{"code":"#(loop [c % r (reverse %)]\n  (cond\n    (empty? c) true\n    (not (= (first c) (first r))) false\n    :else (recur (next c) (next r))))","problem":27,"user":"4e6acc33535d8ccf87e9ff05"},{"code":"(fn [x] \n  (loop [x x]\n    (if (not (empty? x))\n      (if (= (first x) (last x))\n        (recur (drop-last(rest x)))\n        false)\n      true)))","problem":27,"user":"535f295fe4b04ce2eb3ed2da"},{"problem":27,"code":"(fn [s]\n  (if (= (reverse (reverse s)) (reverse s))\n    true\n    false))","user":"53051bf6e4b0d8b024fd3759"},{"problem":27,"code":"(fn [x]\n  (if (= (type x) java.lang.String)\n    (= (apply str (reverse x)) (str x))\n    (= (reverse x) x)))","user":"558a81fbe4b027778923761c"},{"code":"(fn [xs]\n  (let [r (if (string? xs) \n            (apply str (reverse xs))\n            (reverse xs))]\n    (= xs r)))","problem":27,"user":"4e667f67535d8ccf87e9fe77"},{"problem":27,"code":"#(if (= (seq %) (reverse %))true false)","user":"52c7c40be4b0c2d177d62125"},{"problem":27,"code":"(fn [coll]\n  (let [n (quot (count coll) 2)\n        first-half (take n coll)\n        second-half (reverse (take-last n coll))]\n    (reduce (fn [res val]\n              (and res val))\n            true\n            (map = first-half second-half))))","user":"567abc97e4b05957ce8c619d"},{"problem":27,"code":"#(if (= (seq %) (reverse %))\n\t\ttrue\n\t\tfalse)","user":"55796743e4b05c286339e095"},{"code":"#(not= (distinct %) %)","problem":27,"user":"4f790ad5e4b0fbe0118ec58d"},{"code":"(fn is-pali? \n  [sq]\n    (if (= (reverse sq) (seq sq)) true false))","problem":27,"user":"4f21838fe4b0d66497709fd2"},{"code":"(fn [coll]\n (loop [coll coll]\n   (cond\n     (not (= (first coll) (last coll))) false\n     (empty? coll) true\n     (= (count coll) 1) true\n     :else (recur (rest(butlast coll))))))","problem":27,"user":"5252f8ede4b0541d1855b8e0"},{"problem":27,"code":"(fn [p] (= (seq p) (reverse (seq p))))","user":"5a591d04e4b05d388ecb6c90"},{"problem":27,"code":"#(= % (if(= (type %) java.lang.String)\n            (apply str (reverse %))\n            (reverse %)))","user":"5d896a64e4b0915913b1d3b8"},{"problem":27,"code":"(fn [x]\n    (loop [a x\n           b (reverse x)]\n          (cond (empty? a) true\n                (not (= (first a) (first b))) false\n                :else (recur (rest a) (rest b)))))","user":"4f867b25e4b033992c121c51"},{"problem":27,"code":"(fn pali? [x]\n  (cond\n   (empty? x) true\n   (= (first x) (last x)) (pali? (rest (butlast x)))\n   true false))","user":"579b24d0e4b05b1deef9adee"},{"problem":27,"code":"#(= (reverse %1) (vec %1))","user":"556358c6e4b0c656e3ff17ea"},{"code":"(fn [coll]\n  (let [rev (reverse coll)]\n    (loop [c coll r rev]\n      (if (nil? (first c))\n        true\n        (if (not (= (first c) (first r)))\n          false\n          (recur (rest c) (rest r)))\n        ))))","problem":27,"user":"4ea03a3a535d7eef308072a0"},{"problem":27,"code":"(fn re [x] (=(reverse (seq x)) (seq x)))","user":"58e5f995e4b056aecfd47ca5"},{"problem":27,"code":"(fn [x]\n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x))\n      (recur (rest (butlast x)))\n      false\n    )\n  )\n)","user":"5f574662e4b0a0bc16850a90"},{"code":"(fn [lst]\n  (= (seq lst) (reverse lst)))","problem":27,"user":"4de165f3535d08e6dec9fde6"},{"code":"#(= (reverse (seq%)) (seq %))","problem":27,"user":"50ee68fce4b06330c1f87c59"},{"problem":27,"code":"#(loop [rem %1]\n   (cond\n    (empty? rem) true\n    (not= (first rem) (last rem)) false\n    :else (recur (drop-last (rest rem)))))","user":"547c2c6ce4b0c51c1f4d72e3"},{"code":"(fn isPal [coll]\n  (if (> (count coll) 1)\n    (if (= (first coll) (last coll))\n      (isPal (drop 1 (drop-last 1 coll)))\n      false\n    )\n    true\n  )\n)","problem":27,"user":"4e86a443535dc036d0eaab83"},{"problem":27,"code":"(fn [coll] \n  (let [coll-middle (/ (count coll) 2)\n        coll-start (take (Math/ceil coll-middle) coll)\n        coll-end (drop (Math/floor coll-middle) coll)]\n    (= coll-start (reverse coll-end))))","user":"5abbbd46e4b073f1774426db"},{"problem":27,"code":"(fn [p]\n   (= (map-indexed vector p)\n      (map-indexed vector (reverse p))))","user":"57280b92e4b0c5bde472c14e"},{"code":"(fn [coll]\n  \n  (loop [c1 coll \n         c2 (reverse c1)]\n\n    (cond\n     (empty? c1) true\n     (seq c1) (and (= (first c1) (first c2))\n                   (recur (rest c1) (rest c2)))\n     :else      false)))","problem":27,"user":"532c9dc9e4b019098a6f8b30"},{"problem":27,"code":"(fn [coll]\n  (loop [length (count coll)\n         i 0]\n    (if (= i length)\n          ; If we made it this far, return true.\n          true\n          ; Otherwise...\n          (if (=\n               (nth coll i)\n               (nth coll (- length i 1)))\n            (recur length (inc i))\n            false))))","user":"5898f299e4b00487982d52e1"},{"code":"(fn [s]\n  (= (reverse s) (seq s)))","problem":27,"user":"4eb1dd39535d7eef30807345"},{"problem":27,"code":"(fn my-pal [coll]\n  (if (> 2 (count coll)) true (if (= (first coll) (last coll)) (recur (drop-last (rest coll))) false )))","user":"5b421edce4b02d533a91bc2c"},{"code":"(fn [coll]\n  (if (> 2 (count coll))\n    true\n    (if (= (first coll) (last coll))\n      (recur (rest (butlast coll)))\n      false)))","problem":27,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":27,"code":"(fn pl [x] \n  (cond (= nil (seq x)) true \n        :else (and (= (first x) (last x)) \n        (pl (rest (reverse (rest x)))))\n   )\n)","user":"57c3451fe4b05aa3c4741cbd"},{"problem":27,"code":"(fn\n  [coll]\n  (= (seq coll) (reverse coll)))","user":"5dd65ea4e4b0948ae9d9ad7f"},{"code":";; Do a simple compare of the sequence to it's reversed counterpart\n#(= (seq %) (reverse %))","problem":27,"user":"52d2f457e4b099d49816f0ba"},{"problem":27,"code":"(fn [value] (= (clojure.string/join (reverse value)) (clojure.string/join value)))","user":"56eaec1fe4b04a395b9a0418"},{"problem":27,"code":"(fn poli?\n  [obj]\n  (if (not (empty? obj))\n    (if (= (first obj) (last obj))\n      (poli? (rest (drop-last obj)))\n      false)\n    true))","user":"5ce3bcd6e4b0a17bb84e2b43"},{"problem":27,"code":"(fn [coll]\n  (= (reverse coll) (vec coll)))","user":"53a55de5e4b0b62ce3005739"},{"problem":27,"code":"#(= (vec % ) (rseq (vec %)))","user":"54d2159fe4b0e8a36923e5ed"},{"problem":27,"code":"(fn func [l] (if (empty? l) true (and (= (first l) (last l)) (func (drop-last (rest l))))))","user":"56cb483ee4b0ea9b8538f72d"},{"problem":27,"code":"(fn\n  [coll]\n  (let [reversed (reverse coll)\n        collSeq (seq coll)]\n    (if (= reversed collSeq)\n      true\n      false)))","user":"56df6417e4b0ca2494a095f7"},{"problem":27,"code":"(fn palindrome [s]\n  (if (empty? (rest s))\n  \ttrue\n    (if (= (first s) (last s))\n      (palindrome (reverse (rest (reverse (rest s)))))\n      false)\n    )\n  )","user":"558fb218e4b0277789237665"},{"problem":27,"code":"(fn is-palindrome [x]\n  (let [l (int (Math/floor (/ (count x) 2)))]\n    (= (take l x) (reverse (take-last l x)))\n    ))","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":27,"code":"(fn\n  [lst]\n  (= (vec lst) (vec (reverse lst))))","user":"5aa2f1dee4b0d174b936c865"},{"problem":27,"code":"(fn is-palindrome\n  [my-seq]\n  (loop\n    [elems my-seq]\n    (if (empty? (rest elems))\n      true\n      (if (= (first elems) (last elems))\n        (recur (rest (take (- (count elems) 1) elems)))\n        false))))","user":"5a3ece62e4b0447ef91cc5b9"},{"code":"(fn pal [i]\n  ((fn cmp [a b]\n    (cond\n     (not= (first a) (first b)) false\n     (= (first a) (first b) nil) true\n     :else (cmp (rest a) (rest b))))\n   i (reverse i)))","problem":27,"user":"51085be5e4b00aa5c85a1024"},{"problem":27,"code":"(fn palindrome?\n    [s]\n    (= (seq s) (reverse (seq s))))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":27,"code":"(fn pal [a] \n    (if (or (nil? a) (empty? a) (= (count a) 1 ) )\n        true\n        (and (= (first a) (last a)) (pal (rest (butlast a)))) ))","user":"5c94cbb1e4b048ec896c5a3d"},{"code":"(fn pal [xs]\n  (if (empty? xs)\n    true\n    (and\n      (= (first xs) (last xs))\n      (pal (rest (butlast xs))))))","problem":27,"user":"4fab1ea1e4b081705acca210"},{"code":"(fn pal [s]\n   (= (seq s) (reverse s)))","problem":27,"user":"500ea957e4b00fff93030f9b"},{"problem":27,"code":"(fn palin [s]\n\t(if-not (or (= (count s) 1) (= (count s) 0))\n\t(if (= (first s) (last s))\n\t\t(->> s\n\t\t\t(drop 1)\n\t\t\t(drop-last 1)\n\t\t\tpalin)\n\t\tfalse)\n\ttrue))","user":"5760d426e4b08062f99a4e9f"},{"code":"(fn [l]\n  (= (apply str l)\n    (apply str (reverse  l))))","problem":27,"user":"53752b27e4b06839e8705e12"},{"problem":27,"code":"#(loop [idx 0 cnt (quot (count %) 2) res true] (if (or (false? res) (= cnt 0)) res (recur (inc idx) (dec cnt) (= (nth % idx) (nth (reverse %) idx)))))","user":"571eeb49e4b0145328a7629c"},{"problem":27,"code":"(fn  pal [lst] (if (= lst (if (string? lst) (apply str (reverse lst)) (reverse lst))) true false))","user":"5a663a32e4b0512ff01cd9c2"},{"code":";(fn [xs] (= (seq xs) (reverse xs)))\n(comp (partial apply =) (juxt seq reverse))","problem":27,"user":"536c92eae4b0fc7073fd6e43"},{"code":"(fn [input] (let [rev (reverse input)]\n              (cond (string? input)\n                    (= (apply str rev) input)\n                    :else\n              \t\t(= input rev)\n                    )\n              )\n  )","problem":27,"user":"5146fd44e4b0d12420447958"},{"problem":27,"code":"#(if (coll? %) (= (reverse %) %) (= (reverse %) (into () %)))","user":"57ee2b3ee4b0bfb2137f5bac"},{"problem":27,"code":"(fn [x]\n  (if (= (seq x) (reverse (seq x)))\n    true\n    false))","user":"504f0c9ce4b0e7ad84dbc4b2"},{"problem":27,"code":"(fn palindrome? [mseq]\n  (if (< (count mseq) 2)\n    true\n    (if (= (first mseq) (last mseq))\n      (palindrome? (rest (butlast mseq)))\n      false\n      )\n    )\n  )","user":"56826c2fe4b0945ebc182a92"},{"problem":27,"code":"#(if (= (vec %) (vec (reverse %))) true false)","user":"55ff2f89e4b00f4cabc5765e"},{"code":"(fn [l] (= (apply list l) (reverse l)))","problem":27,"user":"5245d29ae4b09dbe66b56174"},{"code":"(fn [xs] \n (every? #(apply = %) \n          (partition 2 (interleave xs (reverse xs)))))","problem":27,"user":"4f584064e4b0a7574ea71846"},{"problem":27,"code":"(fn\n  [s]\n  (= (reverse s) (seq s)))","user":"60036736e4b074f607df663b"},{"code":"(fn [xs] \n  (let [half (/ (count xs))]\n    (= (take half xs) (reverse (take-last half xs)))))","problem":27,"user":"52a779fce4b0c58976d9ac1a"},{"problem":27,"code":"(fn palindrome [s]\n  (if (= (seq s) (reverse (seq s)))\n    true\n    false))","user":"5b4ca13ce4b02d533a91bcac"},{"code":"#(if (= (apply str (reverse %)) (apply str %)) true false)","problem":27,"user":"5265337fe4b03e8d9a4a7104"},{"problem":27,"code":"(fn poly_detector2\n  ([] true)\n  ([v] \n   (if (= v nil)\n     true\n     (if (= (count v) 1)\n       true\n       (if (not= (first v) (last v))\n         false\n         (poly_detector2 (-> v rest butlast)))))))","user":"5ec03772e4b00a66d4a95289"},{"problem":27,"code":"(fn palindrome? [l]\n  (= (vec l) (reverse l)))","user":"557bcce4e4b05c286339e0b9"},{"code":"(fn [coll]\n  (reduce (fn [a b] (and a b))\n  (map #(= (first %) (second %))\n       (partition 2 (interleave coll (reverse coll))))))","problem":27,"user":"5252ee94e4b0541d1855b8db"},{"code":"(fn pal[x]\n  (let [pa (reverse x) n (count x)]\n    (every? identity \n      (map #(= (nth x %) (nth pa %))\n           (range (/ (dec n) 2))\n           )\n    )\n  )\n)","problem":27,"user":"50254e70e4b0b0b8afb15aa7"},{"code":"(fn [x]\n  (or (= 0 (count x))\n    (and\n      (= (first x) (last x))\n      (recur (rest (drop-last x))))))","problem":27,"user":"5020692be4b0cb6ebc0a42f6"},{"code":"(fn [lst]\n  (cond\n    (<= (count lst) 1) true\n    (not= (first lst) (last lst)) false\n    :else (recur (rest (drop-last lst)))))","problem":27,"user":"4e89559c535d4ef0aa30db9a"},{"problem":27,"code":"(fn [coll]\n (= (reverse coll) (seq coll)))","user":"5f38eecce4b0574c87022c72"},{"problem":27,"code":"(fn [array]\n  (let [reverseArray (reverse array), n (count array)]\n    (every? identity (map #(= (nth array %), (nth reverseArray %)) (range 0 (/ n 2))))\n    )\n  )","user":"55240916e4b0882d96d091b6"},{"problem":27,"code":"(fn pal [x]\n  ;; Base Case: First and last characters do not match (FALSE)\n  (cond\n   \t(not= (first x) (last x)) false\n \n  ;; Base Case: Blank (empty sequence) (TRUE)\n  \t(empty? x) true\n  ;; Base Case: Single element (TRUE)\n     (= (count x) 1) true\n  ;; Recursive Case: Else\n  \t:else (pal (rest (butlast x)))\n  ))","user":"563aa090e4b0bfe05bf11801"},{"problem":27,"code":"#(= (reverse (into () %)) (into ()%))","user":"57497708e4b009280f9f2b9a"},{"code":"(fn [sqnce]\n  (= (vec sqnce) (vec (reverse sqnce))))","problem":27,"user":"5225271fe4b01819a2de42f9"},{"code":";; Before learning '=' works on sequences!\n;(fn [coll]\n;   (reduce #(and %1 %2) true\n;     (map = coll (reverse coll))))\n\n#(= (seq %) (reverse %))","problem":27,"user":"5146f343e4b04ef915e3731e"},{"problem":27,"code":"(fn palin [s]\n  (let [s (seq s)\n        revs (reverse s)]\n    (= s revs)\n    )\n  )","user":"56fbe0cce4b07572ad1a88d8"},{"problem":27,"code":"#(= ((comp reverse reverse) %) (reverse %))","user":"57168db0e4b07c98581c3afc"},{"problem":27,"code":"(fn [coll] \n  (if (= java.lang.String (type coll)) \n    (= coll (clojure.string/reverse coll)) \n    (= coll (reverse coll))))","user":"543f1765e4b032a45b86935a"},{"code":"(fn [x]\n  (let [s (seq x)] \n    (= s (reverse s))))","problem":27,"user":"500e3238e4b068062f6e8d8f"},{"problem":27,"code":"(fn ispalin\n  \t[x]\n  \t(case x\n  \t\tnil true\n  \n  \t(and (= (first x) (last x)) (ispalin (butlast (rest x))))))","user":"588ce4aee4b05c141a2560a1"},{"code":"(fn [s]\n(= (reverse s) (seq s))\n)","problem":27,"user":"5029f263e4b023940c84aa45"},{"problem":27,"code":"(fn [x]\n  (loop [x1 x cnt (count x)]\n    (if (and (= (first x) (last x))\n             (> cnt 1))\n      (recur (butlast (rest x)) (- cnt 2))\n      (if (> cnt 1) false true))))","user":"534fa1a8e4b084c2834f4ace"},{"problem":27,"code":"(fn [x]\n  (loop [left x right '()]\n    (if (= (count left) (count right)) \n      (= left right) \n      \n      (if (= (- (count left) 1) (count right) )\n      (= (rest left) right) \n      \n     \t(recur (rest left) (cons (first left) right))))))","user":"58aa19d3e4b01a0c0b23297c"},{"problem":27,"code":"(fn [x] (reduce #(and %1 %2) (map = x (reverse x))))","user":"5bd648d9e4b0ed4b8aab4ba5"},{"code":"#(let [d (into [] %)]\n        (= d (reverse d)))","problem":27,"user":"511b810ce4b07ab9ec456182"},{"problem":27,"code":"(fn pal [a]\n  (if (< (count a) 2)\n    true\n    (let [h (first a)\n          t (last a)]\n      (if (= h t)\n        (pal (rest (drop-last a)))\n        false))))","user":"566e3af2e4b0a866af6896d5"},{"problem":27,"code":"#(let [r (into '() %)] (= r (into '() r)))","user":"56102f50e4b05f002753df6b"},{"problem":27,"code":"(fn \n  [stri]\n  (= (seq stri) (reverse stri)))","user":"595d0897e4b066ee0a44b00f"},{"code":"#((fn [seq]\n  (loop [rest seq]\n    (if (>= 1 (count rest))\n      true\n      (if (= (first rest)\n             (last rest))\n          (recur (butlast (next rest)))\n          false)))) %)","problem":27,"user":"4ee91d00535d93acb0a6688b"},{"problem":27,"code":"(fn [x] (false? (= (count(set x)) (count x) ) ) )","user":"59b1a1b2e4b0e1f4e384c8eb"},{"code":"(fn palan [x]\n  (loop [cnt (- (count x) 1) i cnt]\n    (if (< i (/ cnt 2))\n        true\n        (if (= (nth x i) (nth x (- cnt i)) )\n          (recur cnt (dec i))\n          false\n        )\n    )\n  )\n \n)","problem":27,"user":"518aec06e4b06da86c1973c2"},{"problem":27,"code":"(fn [x]\n  (every? #(apply = %)\n          (partition 2\n                     (interleave x (reverse x)))))","user":"5188c249e4b0bdff0e072d54"},{"problem":27,"code":"(fn\n  [x]\n  (= (seq x) (seq (reverse x))))","user":"5cd17bf1e4b0ccb0619628eb"},{"code":"#((fn pal [s] \n     (cond \n       (empty? s) true \n       (not (= (first s) (last s))) false\n       :else (pal (rest (butlast s))))) \n (seq %))","problem":27,"user":"5128554ee4b03a34742b430a"},{"problem":27,"code":"(fn [seq]\n  (= (apply list seq) (reverse seq)))\n\n;; Well, that's just dandy. There's a method called seq that returns a sequence of a collection.\n;; Makes it really silly that I used apply and list to accomplish the same thing. Probably should\n;; stop using a variable named 'seq'.\n;;\n;; Better implementation: anon fcn comparing sequence of thing to reverse sequence of thing.\n;;#((seq %) (reverse %))","user":"5a1f85ffe4b0ff51aa4b3284"},{"code":"(fn [a]\n  (let [s (seq a)]\n    (if (> (count s) 1)\n      (and\n        (= (first s) (last s))\n        (recur (drop-last (drop 1 s))))\n      true)))","problem":27,"user":"5125d963e4b05d10e3e395fe"},{"problem":27,"code":"(fn [source]\n\t(loop [src source step 0 size (count source)]\n\t\t(if (= step size)\n\t\t\ttrue\n\t\t\t(if (= (nth src step) (nth src (- size (+ 1 step))))\n\t\t\t\t(recur src (+ 1 step) size)\n\t\t\t\tfalse\n\t\t\t\t))))","user":"58b985e0e4b0888cdc949ccc"},{"problem":27,"code":"(fn [s]\n  ((comp (partial = (apply list s)) reverse) s)\n  )","user":"589e704ae4b02bd94d917e5e"},{"problem":27,"code":"#(if (string? %)\n  (= % (apply str (reverse %)))\n  (= % (reverse %)))","user":"58cb7525e4b03c36ff7e584a"},{"problem":27,"code":"(fn\n  [lst]\n  (if (= (first lst) (last lst))\n    (if (< (count lst) 3)\n      true\n      (recur (butlast (rest lst))))\n    false))","user":"5e668d87e4b0e171e1033681"},{"code":"#(if (string? %)\n   (= % (apply str (reverse %)))\n   (= % (reverse %)))","problem":27,"user":"4fff57f1e4b0678c553fc3fe"},{"problem":27,"code":"(fn [input]\n  (or \n    (= input (reverse input))\n    (if (= java.lang.String (class input))\n      (= input (apply str (reverse input)))\n      false)\n    )\n  )","user":"562d15a6e4b0a45d2ff83019"},{"problem":27,"code":"(fn\n  [stuff]\n  (not (some false? (map #(= %1 %2) stuff (reverse stuff)))))","user":"572a997ce4b0f4d77e65123e"},{"code":"(fn \n  [x] \n    (if (= (type x) (type \"str\"))\n      (= x (apply str (reverse x)))\n      (= x (reverse x))))","problem":27,"user":"4ddb696b535d02782fcbe9fa"},{"problem":27,"code":"(fn [c]\n  (= (into [] c) (reverse c)))","user":"56c0aeb8e4b060a8e693e3af"},{"problem":27,"code":"(fn [w]\n  (let [arr (into [] w)]\n    (loop [start 0 end (- (count w) 1)]\n      (if (>= start end)\n        true\n        (let [sc (get arr start)\n              se (get arr end)]\n          (if (not= sc se)\n            false\n            (recur (inc start) (dec end))))))))","user":"57f4ace3e4b07bbd65c32b2b"},{"problem":27,"code":"#(if (< (count %1) 2) true (= (first %1) (last %1)))","user":"5457767ae4b01be26fd7460c"},{"code":"#(=(vec %)(reverse %))","problem":27,"user":"4ee00219535d10e5ff6f534a"},{"problem":27,"code":"(fn palin [s] (if (empty? s) true (and (= (first s) (last s)) (palin (rest (butlast s))))))","user":"5762bf13e4b0994c1922fbae"},{"problem":27,"code":"#(if( = (reverse %) (reverse (reverse %))) true false)","user":"5e832e75e4b09a7a73c8bbb5"},{"problem":27,"code":"(fn [a] (if (= (seq a) (reverse (seq a))) true false))","user":"5c371f5be4b0d62ef62d9f72"},{"code":"(fn [x] \n  (reduce #(and %1 %2)\n    (map  #(= %1 %2) x (reverse x))))","problem":27,"user":"4e7dbe0c535db169f9c796e3"},{"problem":27,"code":"(fn [s] (let [half-size (quot (count s) 2)]\n          ( = (take half-size s) (reverse (take-last half-size s)))))","user":"53e150e5e4b0d874e779ae53"},{"code":"(fn [p]\n  (= p (if (string? p)\n         (apply str (reverse p))\n         (reverse p))))","problem":27,"user":"51f40975e4b0fca5e8b4822e"},{"problem":27,"code":"(fn is_pal [s]\n\t(if (<= (count s) 1)\n\ttrue\n\t(if (= (first s) (last s))\n\t\t(is_pal (rest (reverse (rest (reverse s))))) \n\t\tfalse)))","user":"5bad07eee4b0a20761a234a4"},{"code":"(fn is-pal [input]\n  (if (empty? input)\n    true\n   (and\n    (= (first input)\n      (last input))\n    (is-pal\n      (rest\n        (drop-last input))))))","problem":27,"user":"51d1db6ce4b0d13b04db0d90"},{"code":"(fn is-pal [p]\n  (cond (> 2 (count p)) true\n        (= (first p) (last p)) (is-pal (rest (drop-last p)))\n        :else false))","problem":27,"user":"51b76227e4b0d906fcd71d35"},{"code":"(fn [s]\n  (let [s (vec s)]\n  \t(= (reverse s) s)))","problem":27,"user":"51944aaae4b0142f60b4aedc"},{"problem":27,"code":"(fn [coll]\n  (= (reverse coll) (reverse (reverse coll)) ))","user":"559f06bae4b0acc240e314e6"},{"code":"(\n  fn pal[word]\n\t(or (empty? word) \n       (and \n          (= (first word) (last word) ) \n          (pal (butlast (rest word) ) ) \n       )\n     )\n )","problem":27,"user":"5360e12ce4b0243289761e3a"},{"problem":27,"code":"(fn [coll] (if (or (empty? coll) (= 1 (count coll)))\n                   true\n                   (if (= (first coll) (last coll))\n                     (recur (butlast (rest coll)))\n\t\t\t\t\t false)))","user":"56d6c18ee4b0ea9b8538f7d1"},{"problem":27,"code":"(fn\n  [coll]\n  (let [coll (into [] coll)]\n    (= coll (reverse coll))))","user":"56e22366e4b03a7c14b85a30"},{"code":"(fn\n    [x]\n    (= (vec x) (reverse (vec x))))","problem":27,"user":"51804bcbe4b04f45bde7d901"},{"problem":27,"code":"(fn [l] (loop [res true, li l] (if (and res (not-empty li)) (recur (= (first li) (last li)) (-> li rest butlast)) res)))","user":"57bc50c7e4b05aa3c4741c40"},{"problem":27,"code":"(fn pal [[firrst & resst]]\n(cond (empty? resst) true\n      (not= firrst (last resst)) false\n      :else (pal (butlast resst))))","user":"5d48e6d3e4b0776584bd6f15"},{"problem":27,"code":"(fn [ipt] (= (seq ipt) (reverse (seq ipt))))","user":"5fb3bd04e4b08cb800c85b3a"},{"problem":27,"code":"(fn ans-27 [s]\n  (if (empty? s)\n    true\n    (if (= (first s) (last s))\n      (ans-27 (take 1 (drop 1 s)))\n      false)))","user":"608fac60e4b03bd49d9f36c7"},{"problem":27,"code":"(fn [lst]\n  (if (string? lst)\n  (= (clojure.string/join (reverse lst)) lst)\n  (= (reverse lst) lst))\n  )","user":"53d2afede4b00fb29b221321"},{"code":"(fn [_] (= 0 (rand-int 2))) ;me no like parens :(","problem":27,"user":"525b1e15e4b0cb4875a45d08"},{"code":"(fn p? [seq]\n  (if (= '() (rest seq))\n      true\n      (if (= (first seq) (last seq))\n          (p? (butlast (rest seq))) \n          false)))","problem":27,"user":"4f031aaa535dcb61093f6a64"},{"code":"#(if (string? %)\n   (= % (clojure.string/reverse %))\n   (= % (reverse %)))","problem":27,"user":"5298c83de4b02ebb4ef75064"},{"code":"(fn [col] (if (seq? col )(= col (reverse col))\n          (= (seq col) (reverse (seq col)))))","problem":27,"user":"4e7ada51535db169f9c796ae"},{"code":"( fn [x] ( if(odd? (count x))  \n           (if(= (take (quot (count x) 2) x) (reverse (drop (quot (+ 1 (count x)) 2) x))) true false)\n           (if(= (take (quot (count x) 2) x) (reverse (drop (quot (+ 1 (count x)) 2) x))) true false)\n           )\n  )","problem":27,"user":"5177cacde4b0261ae665b877"},{"problem":27,"code":"(fn\n  [lst]\n  (loop [orig lst i 0 ispal true]\n    (cond (or (= (count orig) i) (= ispal false)) ispal\n          :else (recur orig (inc i) (= (nth orig i) (nth orig (- (count orig) (inc i))))))))","user":"57acee37e4b0b8559636fc94"},{"code":"(fn rec [c]\n  (if (empty? c)\n    true\n    (if (= (first c) (last c))\n    (rec (rest (reverse (rest c))))\n    false)))","problem":27,"user":"4fcc103fe4b0ee37620e185f"},{"code":"(fn palindrome? [collection]\n  (= (apply str (seq collection))\n          (apply str (reverse (seq collection)))))","problem":27,"user":"503a5623e4b07a1917cc34d3"},{"code":"(fn [s] (let [s (seq s)] (= s (reverse s))))","problem":27,"user":"4e50b67b535dc968683fc4ed"},{"problem":27,"code":"(fn [coll]\n  (if (<= (count coll) 1)\n    true\n    (if (not= (first coll) (last coll))\n      false\n      (recur (drop 1 (drop-last coll))))))","user":"5afecee2e4b0cc2b61a3bd28"},{"problem":27,"code":"#(every? true? \n         ((fn [x]\n            (for [i (range (quot (count x) 2))]\n              (if (= (nth x i) (nth x (- (dec (count x)) i)))\n                true\n                false))) %))","user":"5a99b863e4b0d174b936c7ae"},{"problem":27,"code":"(fn palindrome \n  [lst]\n  (if (<= (count lst) 1)\n    true\n    (and (= (first lst) (last lst))\n         (palindrome (drop-last (drop 1 lst))))))","user":"57f8153de4b0d3187e900916"},{"problem":27,"code":"#(= (seq % ) (reverse (seq %)))","user":"59cf0d75e4b0ef0a1e9b5b5f"},{"code":"(fn palin [x]\n  (if \n    (empty? (seq x))\n    true\n    (if (= (first (seq x)) (last (seq x)))\n      (and true (palin (rest (butlast (seq x)))))\n      false)))","problem":27,"user":"4ed6c35e535d10e5ff6f52e8"},{"problem":27,"code":"#(= (if (string? %) (apply str (vec (reverse %))) (reverse %)) %)","user":"55aa67eae4b0988bba2ad94c"},{"problem":27,"code":"(fn [a]\n  (let [s (vec a)\n        c (count s)\n        l (quot c 2)\n        odd (mod c 2)\n        left (take l s)\n        right (reverse (drop (+ l odd) s))]\n    (= left right)))","user":"5a68f374e4b0512ff01cda05"},{"problem":27,"code":"#(cond \n   (coll? %) (= % (reverse %))\n   (string? %) (= % (apply str (reverse %)))\n   )","user":"534fa9dae4b084c2834f4acf"},{"problem":27,"code":"(fn [seq] (if (= (class seq) (class \"dummy\")) (= seq (clojure.string/reverse seq)) (= seq (reverse seq))))","user":"5922a513e4b026ae38521286"},{"problem":27,"code":"(fn [m]\n  (loop [a m b (reverse m)]\n    (cond \n     (empty? a) true\n     (not= (first a) (first b)) false\n     :else (recur (rest a) (rest b)))))","user":"5683d2a9e4b0945ebc182aa0"},{"problem":27,"code":"(fn [arr]\n  \n  (if (empty? arr)\n    true\n    (if (= (first arr) (last arr))\n      (recur (rest (drop-last arr)))\n      false))\n  \n  )","user":"5e57f45fe4b027a2e10ac103"},{"code":"#(= (reverse (vec %1)) (vec %1))","problem":27,"user":"52f07ccee4b05e3f0be25edf"},{"code":"(fn [sq]\n    (if (>= 1 (count sq))\n      true\n      (if (= (first sq) (last sq))\n        (recur (rest (butlast sq)))\n        false)))","problem":27,"user":"51c3c6a6e4b0851ac09658f8"},{"code":"(fn [el] (if (string? el)\n           (= el (clojure.string/reverse el))\n           (= el (reverse el))))","problem":27,"user":"511e3454e4b028ee16def195"},{"code":"(fn [ls] (if(string? ls)\n  (= ls (apply str (reverse ls)))\n  (= ls (reverse ls))))","problem":27,"user":"4e5c538c535d8a8b8723a2c0"},{"problem":27,"code":"(fn [x] (let [r (reverse x)] (or (= x r) (= x (apply str r)))))","user":"56487cf2e4b0284900eef631"},{"problem":27,"code":"(fn [l] (loop [r l]\n          (if \n            (empty? (rest r))\n            true\n\t        (if (= (first r) (last r))\n    \t        (recur (rest (drop-last r)))\n                false))))","user":"5ce56db6e4b0a17bb84e2b72"},{"problem":27,"code":"(fn [inputseq]\n  (= (seq inputseq) (reverse inputseq)))","user":"5f5f2eafe4b02876ed9fcff5"},{"code":"(fn [s]\n  (loop\n\t [vect (vec s)\n\t counter (quot (count s) 2)\n\t result true\n\t ]\n\t (if (some false? [(not= -1 counter) (true? result)])\n\t \tresult\n\t (recur vect (dec counter) (= (get (vec (reverse vect)) counter) (get vect counter)) )\n\t )\n\t)\n)","problem":27,"user":"508fabf9e4b0ea685a20f769"},{"code":"#(loop [lst %] \n  (if (< (count lst) 1)\n    true\n    (if (not= (first lst) (last lst))\n      false\n      (recur (rest (butlast lst))))))","problem":27,"user":"4e4870d1535dc968683fc4bc"},{"problem":27,"code":"(fn palindrome [s]\n  (= (reverse s) (seq s)))","user":"53bab6fae4b047364c0444fb"},{"problem":27,"code":"(fn palindromep [coll]\n  (if (< (count coll) 2)\n      true\n      (and (= (first coll) (last coll))\n           (palindromep (rest (butlast coll))))))","user":"547f8736e4b0c51c1f4d731d"},{"problem":27,"code":"(fn [s]\n  (loop [x s y (reverse s)]\n    (if (empty? x)\n      true\n      (and\n        (=\n          (first x)     \n          (first y)\n        )\n        (recur\n          (rest x)\n          (rest y)\n        )\n      )\n    )\n  )\n)","user":"5437d022e4b032a45b869309"},{"code":"(fn [x]\n  (loop [pyk x]\n    (if (empty? pyk)\n      true\n      (if (= (last pyk) (first pyk))\n        (recur (-> pyk rest reverse rest reverse))\n        false))))","problem":27,"user":"4f08a8a2535dcb61093f6c3d"},{"code":"(fn [elems]\n  (let [pd (fn [s]\n            (cond\n              (= (count s) 1) true\n              (= (count s) 2) (= (first s) (second s))\n              true\n              (and (= (first s) (last s))\n                   (recur (subvec s 1 (dec (count s)))))))]\n    (pd (vec elems))))","problem":27,"user":"4e5c3612535d8a8b8723a2be"},{"problem":27,"code":"#(= (apply conj [] %1) (apply conj '() %1))","user":"5d47f45de4b07c84aa5ae6b4"},{"problem":27,"code":"(fn [a-seq]\n  (let [rev (if (string? a-seq)\n              (apply str (reverse a-seq))\n              (reverse a-seq))]\n    (= rev a-seq)))","user":"53fd0a22e4b0de5c418485e1"},{"problem":27,"code":"(fn p [x] (= (seq x) (reverse (seq x))))","user":"5c4e2b82e4b0f9f7a8770e93"},{"problem":27,"code":"(fn [coll]\n   (if (string? coll)\n     (= coll (apply str (reverse coll)))\n     (= coll (reverse coll))))","user":"54bb9730e4b0ed20f4ff6ebf"},{"code":"(fn [c] (reduce #(and %1 %2) (map = c (reverse c))))","problem":27,"user":"4f0f01c0535d0136e6c22329"},{"problem":27,"code":"(fn [values]\n  (loop [values values]\n  (let [f (first values)\n         l (last values)\n         m (drop-last (rest values))]\n    (if (or (nil? l) (and (nil? m) (= f l)))\n      true\n      (if (not= f l)\n        false\n        (recur m))))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":27,"code":"#(= (apply str %)\n   (apply str (reverse %)))","user":"5a7a09e6e4b03baeef9276ca"},{"problem":27,"code":"(fn [x]\n  ((fn pal [x xs]\n     (if (nil? xs)\n       true\n       (if (= x (last xs))\n         (pal (first xs) (butlast (rest xs)))\n         false)))\n   (first x) (rest x)))","user":"5568749ae4b0c656e3ff1854"},{"problem":27,"code":"(fn [sq]\n    (loop [sqpart sq]\n      (if (= (first sqpart) (last sqpart))\n        (if (> (count sqpart) 2)\n          (recur (drop-last (drop 1 sqpart)))\n          true\n          )\n        false\n        )\n      )\n    )","user":"571a282ae4b07c98581c3b46"},{"problem":27,"code":"#(-> (= (reverse %) (reverse (into '() %))))","user":"5832be57e4b089d5ab817c86"},{"code":"(fn [c]\n  (let [cn   (count c)\n        spl (int (/ cn 2))\n        [pre post] (split-at spl c)\n        post (if (odd? cn) (rest post) post)]\n    (= pre (reverse post))))","problem":27,"user":"50a935b9e4b0a9a42786e8de"},{"problem":27,"code":"(fn\n  [x]\n  (let [y (quot (count x) 2)]\n    (= (take y x) (take y (reverse x)))))","user":"541735b3e4b01498b1a71a07"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (= (apply str (reverse x)) x)\n  (= (reverse x) x)))","user":"59636cc2e4b066ee0a44b0c7"},{"problem":27,"code":"(fn test [s]\n  (let [a (take (quot (count s) 2) s) b (drop (+ (quot (count s) 2) (if (odd? (count s)) 1 0)) s)]\n    (= a (reverse b))))","user":"594c7c96e4b07ddc2dafae65"},{"code":"(fn [ll]\n        (let [ all (#(split-at (/ (count %) 2) %) ll)\n                ff (first all)\n                tt (last all) ]\n        (every? true? (map #(= %1 %2) ff (reverse tt))))\n)","problem":27,"user":"5183abf6e4b028ec5fd2f2a6"},{"problem":27,"code":"#(let [x %1] (= (seq x) (reverse x)))","user":"565b7902e4b068f2fe63dc04"},{"problem":27,"code":"(fn mf\n  ([sq]\n  \t(mf sq (reverse sq)))\n  ([sq qs]\n   \t(if (seq sq)\n   \t\t(if (= (first sq) (first qs))\n     \t\t(mf (rest sq) (rest qs))\n         \tfalse)\n      \ttrue)))","user":"57237a02e4b0c5bde472c0e5"},{"problem":27,"code":"(fn [s] (let [r (seq s)] (= r (reverse r))))","user":"5d0bb4fae4b0cc9c91588237"},{"problem":27,"code":"(fn palindrome? [x]\n  (= (reverse x)\n     (reverse (reverse x))))","user":"51508905e4b098b221effc2d"},{"problem":27,"code":"(fn [sth]\n  (if(string? sth)\n    (= sth (apply str (reverse sth)))\n  \t(= sth (reverse sth))))","user":"5191a763e4b0d428d29dc1b4"},{"code":"(fn pal? [coll]\n  (or (= 1 (count coll))\n      (= 0 (count coll))  \n    (and (= (first coll)\n            (last coll))\n      (pal? (drop 1 (butlast coll))))))","problem":27,"user":"506f1e12e4b09350ab4199f9"},{"problem":27,"code":"(fn [x]\n      (= (reduce (fn [result value]\n                (conj result value)\n                )\n              '() x)\n         (reduce (fn [result value]\n                (conj result value)\n                )\n              [] x\n        )\n      ))","user":"544fb010e4b0e39780006997"},{"problem":27,"code":"(fn p [x] (or (nil? (seq x)) (and (= (first x) (last x)) (recur (-> x (rest) (reverse) (rest) (reverse)))) ))","user":"55deeface4b050e68259b3ea"},{"problem":27,"code":"(fn malindrome\n  [lst]\n  (= (seq lst) (reverse lst)))","user":"573b487de4b0cd1946bd10a1"},{"code":"(fn [lol] (= (first lol) (last lol)))\n;FUCK THE SYSTEM","problem":27,"user":"51a89810e4b08d8ec191b817"},{"problem":27,"code":"(fn pallindrome? [data]\n  (cond\n   (or (list? data) (vector? data)) (#(if (= % (reverse %))\n                       true\n                       false) data)\n   (string? data) (#(if (= (seq (char-array %)) (reverse (seq (char-array %))))\n                       true\n                       false) data)\n   :else false))","user":"55c461d3e4b0e31453f64999"},{"code":"(fn [l]\n  (= (reverse l) (seq l))\n)","problem":27,"user":"504e1ddae4b0f6ff3350c466"},{"code":"(fn palindrome? [s] (if (<= (count s) 1) true (if (= (first s) (last s)) (palindrome? (rest (drop-last 1 s))) false)))","problem":27,"user":"52e295fae4b09f7907dd1437"},{"problem":27,"code":";; Not good enough\n(fn [s]\n (= \n  (first s) (last s)\n )\n)","user":"5d604682e4b0c9e5857d5007"},{"code":"(fn palindrome? \n  [some-seq]\n  (= (reverse some-seq) (seq some-seq)))","problem":27,"user":"51af4cf6e4b0c53cf2e68a4c"},{"code":"#(if (char? (first %1))\n   (= %1 (apply str (reverse %1)))\n   (= %1 (reverse %1)))","problem":27,"user":"509331d9e4b097f48cc38580"},{"problem":27,"code":"#(= % (if (= java.lang.String (type %)) (clojure.string/reverse %) (reverse %)))","user":"5a291617e4b07f18be40aa76"},{"code":"(fn [p]\n  (loop [p p, t true]\n    (and\n      t\n      (or\n        (<= (count p) 1)\n        (recur (rest (butlast p)) (= (first p) (last p)))))))","problem":27,"user":"4eb6d3ab535d7eef30807370"},{"problem":27,"code":"(fn [l] (every? identity (map (fn [a b] (= a b)) l (reverse l))))","user":"5796d3ebe4b039eba2ecb0ee"},{"code":"(fn pal [x] (if (> 2  (count x))\n              true\n              (and (= (first x) (last x))\n                   (pal (->> x (drop 1) (drop-last 1)))\n                   )\n              )\n  )","problem":27,"user":"533a2f7be4b0e30313ee6cb8"},{"problem":27,"code":"(fn palin [pal]\n  (loop [rev []\n        revid (- (count pal) 1)]\n    (if-not (< revid 0)\n      (recur (conj rev (nth pal revid)) (dec revid))\n    (if (char? (nth rev 0)) (= pal (apply str rev)) (= pal rev))\n    )))","user":"5de630d1e4b0948ae9d9ae23"},{"problem":27,"code":"(fn [input]\n  (= (reverse input) (seq input)))","user":"561cb6cfe4b064ca9f4b169e"},{"problem":27,"code":"(fn [x] \n    (= (reverse x) \n       (reverse (reverse x))))","user":"4f0f7339535d0136e6c2233e"},{"problem":27,"code":"(fn [potpal]\n  (if (string? potpal) (= potpal (apply str (reverse potpal))) (= potpal (reverse potpal))))","user":"5b7608c9e4b047b03b2036da"},{"problem":27,"code":"(fn [coll]\n  (if (or (= java.lang.String (type coll)) (= clojure.lang.PersistentList (type coll)))\n    (recur (vec coll))\n    (if (< (count coll) 2)\n      true\n      (if (= (coll 0) (coll (- (count coll) 1)))\n        (recur (subvec (vec coll) 1 (- (count coll) 1)))\n        false))))","user":"53e92aafe4b036ad0777e49a"},{"problem":27,"code":"(fn [it]\r\n(= (reverse it)\r\n   (seq it)))","user":"4ddc5d0a535d02782fcbea05"},{"problem":27,"code":"(fn [mylist]\n  (= (seq mylist) (reverse mylist)))","user":"56197b47e4b053970a773af8"},{"problem":27,"code":"(fn [s]\n  (if (string? s)\n    (if (= (reverse s) (reverse (reverse s)))\n      true\n      false)\n    (if (= (reverse s) s)\n      true\n      false)))","user":"56a50330e4b0542e1f8d14df"},{"code":"#(= %1 (if (string? %1) (clojure.string/reverse %1) (reverse %1)))","problem":27,"user":"51d59859e4b01da06753aa92"},{"code":"#(if (string? %) (= % (apply str (reverse %))) (= % (reverse %)))","problem":27,"user":"4eccb190535d23f0362276fe"},{"code":"(fn [xs] (every? true? (map #(= % %2) xs (reverse xs))))","problem":27,"user":"51a8f0c6e4b08d8ec191b821"},{"problem":27,"code":"(fn [x] (= (seq x) (reverse x)))\n\n;(fn [coll]\n;  (let [rc (reverse coll) n (count coll)]\n;    (every? identity \n;      (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))","user":"5487eb1de4b0e286459a11ca"},{"problem":27,"code":"(fn [x]\n   (= (seq x)\n      (reverse x)))","user":"4fec08e8e4b0681fd128dc9d"},{"code":"#(loop [c %1]\n\t(cond (<= (count c) 1) true\n\t\t  (not= (first c) (last c)) false\n   \t\t  :else (recur (drop 1 (drop-last 1 c)))))","problem":27,"user":"53300924e4b019098a6f8b55"},{"problem":27,"code":"#(loop [a %,s 0,e (dec (count %))]\n   (if (>= s e) \n     true\n     (if (= (nth a s) (nth a e))\n       (recur a (inc s) (dec e))\n       false)))","user":"555e9dbfe4b0a2eb076a39bc"},{"problem":27,"code":"(fn palindrome? [col]\n  (if (= (reverse col) (reverse (reverse col)))\n    true\n    false))","user":"58daae01e4b0a4d5acaab664"},{"problem":27,"code":"(fn palindrome? [coll]\n  (let [size (count coll)]        \n  \t(cond\n    \t(or (= 1 size)\n            (= 0 size)) true\n     (not= (first coll) (last coll)) false\n     :else ((comp palindrome? rest drop-last) coll))))","user":"50ab395de4b0f65d68208508"},{"problem":27,"code":"(fn [thing] (= (apply str thing) (apply str (reverse thing))))","user":"56ede653e4b04a395b9a0449"},{"problem":27,"code":"(fn [x] (= (seq x) (reverse(seq x)) ))","user":"5559b443e4b0deb715856e3c"},{"problem":27,"code":"(fn palindrome?\n[string]\n(loop [current-string string]\n(if (> (count current-string) 1)\n  (if (= (first current-string) (-> current-string (reverse) (first)))\n    (recur (-> current-string (rest) (reverse) (rest)))\n    false\n  )\n  true\n))\n)","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":27,"code":"(fn [coll] (if (string? coll)\n             (= (clojure.string/reverse coll) coll)\n             (= (reverse coll) coll)))","user":"56b6a50ae4b0982f16b37e3c"},{"problem":27,"code":"(fn [coll] (every? #(= (nth coll %) (nth (reverse coll) %)) (range (/ (count coll) 2))))","user":"5169b23fe4b03f62cda68cee"},{"problem":27,"code":"(fn palindrome? [coll]\n\t(cond\n\t\t(empty? coll) true\n\t\t(= (first coll) (last coll)) (palindrome? (rest (butlast coll)))\n\t\t:else false))","user":"57c0917be4b05aa3c4741c95"},{"problem":27,"code":"#(first\n  (reduce\n  (fn [[palindrome pos] curr]\n    [(and\n     palindrome\n     (= curr (nth % (- (dec (count %)) pos))))\n     (inc pos)])\n  [true 0]\n  %)\n  )","user":"5ed52854e4b016b56eae05d2"},{"code":"apply (fn [& args] (= (reverse (vec args)) (vec args)))","problem":27,"user":"50a8cc97e4b0a9a42786e8db"},{"problem":27,"code":"(fn [coll]\n (= coll (if (= (type coll) java.lang.String)\n     (clojure.string/reverse coll)\n     (reverse coll))))","user":"5e348945e4b0650de70e2b1d"},{"problem":27,"code":"#(=\n      (seq %)\n      (reverse (seq %)))","user":"5a7e194de4b03baeef927706"},{"problem":27,"code":"#(=  (seq %)  (reverse (seq %)))","user":"5dd69c8ce4b0948ae9d9ad83"},{"problem":27,"code":"#(= (reverse (reverse %) ) (reverse %))","user":"56304db8e4b073c1cf7a9be5"},{"problem":27,"code":"(fn [param]\n  (let [rev (reverse param)]\n    (loop [a param,\n           b rev]\n      (if (not= (first a) (first b))\n        false\n        (if (empty? a)\n          true\n          (recur (rest a) (rest b))\n        )\n      )\n    )\n  )\n)","user":"54d35746e4b0e8a36923e606"},{"problem":27,"code":"(fn [s] (=\n         (map-indexed (fn [idx itm] [idx itm]) s)\n         (map-indexed (fn [idx itm] [idx itm]) (reverse s))\n         ))","user":"56039843e4b04bb52996e1be"},{"code":"(fn p[s]\n  (if (<= (count s) 1)\n    true\n    (if (= (first s) (last s))\n      (p (butlast (rest s)))\n      false)))","problem":27,"user":"4e842ebb535db62dc21a62df"},{"problem":27,"code":"#(=(seq%)\n   (reverse\n    (seq%)))","user":"6085edade4b0736b099e42fc"},{"problem":27,"code":"(fn if-palindrome [l]\n  (if (<= (count l) 1)\n    true\n    (if (= (first l) (last l))\n    (if-palindrome (rest (drop-last l)))\n    false)))","user":"544e6b7fe4b0e39780006986"},{"problem":27,"code":"(fn [x]\n\t(if (and (= (first x) (last x)) (= (butlast (rest x)) nil))\n    \ttrue\n        (if (= (first x) (last x))\n  \t\t\t(recur (butlast (rest x)))\n            false)))","user":"56990b68e4b0542e1f8d143a"},{"problem":27,"code":"(fn [x] (if(string? x)(= x (apply str (reverse x)))\n  (= x (reverse x))))","user":"591c2f4ee4b09b4ee5954bfc"},{"problem":27,"code":"(fn [seq] (loop [middle seq] (if (< (count middle) 2) true (and (= (first middle) (last middle)) (recur (rest (butlast middle)))))))","user":"5e1cc888e4b0dc959400853d"},{"problem":27,"code":"(fn palindrome? [collection]\n  (= (seq collection) (reverse collection)))","user":"58e980dfe4b056aecfd47d0b"},{"problem":27,"code":"(fn [v]\n  (let [s (seq v)]\n    (= s (reverse s))))","user":"540a4f20e4b0addc1aec66ef"},{"problem":27,"code":"(fn palindrome? [l]\n  (let [ l (seq l)\n         s (count l)\n         fl (first l)\n         ll (last l)]\n    (cond\n      (= s 1) true\n      (= s 2) (= fl ll)\n      (= fl ll) (palindrome? (rest (butlast l)))\n    :else\n        false\n    )))","user":"586e47dee4b01531a375e9a9"},{"code":"#(every? identity (map = % (reverse %)))","problem":27,"user":"4e773be8535d324fb2983d6e"},{"problem":27,"code":"#(or (empty? %)\n      (let [head (first %)\n            last-element (last %)]\n        (if (= head last-element)\n          (recur (-> % rest drop-last))\n          false)))","user":"5c61ce28e4b0fca0c162263b"},{"code":"(fn palin [coll]\n    (and (= (first coll) (last coll))\n         (let [c (count coll)]\n           (or (<= c 2)\n               (palin (take (- c 2)\n                            (drop 1 coll)))))))","problem":27,"user":"4e8c1d97535d65386fec2127"},{"code":"(fn par [x]\n   (if (<= (count x) 1)\n   \ttrue\n\t\t(do\n\t\t\t(if (= (first x) (last x))\n                    (par (butlast (rest x)))\n                  false))))","problem":27,"user":"51f2851fe4b0210f90e7454b"},{"code":"#(= (apply str %1) (apply str (reverse %1)))","problem":27,"user":"4feddf2ee4b0198f34b063be"},{"code":"(fn palindrome?\n  [input]\n  (if (string? input)\n    (= input\n       (apply str (reverse input)))\n    (= input\n       (reverse input))))","problem":27,"user":"5232d104e4b035af41902a96"},{"problem":27,"code":"(fn [x] (= (seq x) (reverse x)))\n\n;(seq x) turns \"racecar\" into sequence of characters","user":"55e01f4ee4b050e68259b406"},{"code":"(fn palindrome?\n  [s]\n  (= (seq s) (reverse (seq s)))\n)","problem":27,"user":"4f9b05ade4b0dcca54ed6d11"},{"code":"(fn palindrome? [s]\n  (cond\n    (not= (first s) (last s)) false\n    (zero? (count s)) true\n    :else (recur (drop-last (drop 1 s)))))","problem":27,"user":"4f24957ae4b0d66497709fed"},{"problem":27,"code":"(fn [a] (if (string? a)\n          (= a (apply str (reverse a)))\n          (= a (reverse a))))","user":"510d2a99e4b078ea71921130"},{"problem":27,"code":"(fn what [seq]\n(let [seq (into [] seq) f (first seq) l (last seq) rst (butlast (next seq ))]\n(if (= (or f l) nil) true (if (= f l) (what rst) false))))","user":"53d382d8e4b00fb29b22132a"},{"code":"(fn palindrome[x] (= (apply str (reverse x)) (apply str x)))","problem":27,"user":"508d5ce9e4b0f17d83ea26bc"},{"code":"(fn [x] (when-let [x (seq x)] (= x (reverse x))))","problem":27,"user":"5196b573e4b04c0af7ff3c24"},{"problem":27,"code":"(fn [string] \n  (if (<= (count string) 1)\n    true\n    (and \n     (= (first string) (last string))\n     (recur (drop-last (rest string)))\n     )\n    )\n  )","user":"5e078ba7e4b0978307768fb6"},{"problem":27,"code":"(fn [coll]\n   (cond\n    (= (class coll) java.lang.String)\n      (= coll (clojure.string/reverse coll))\n    :else (= coll (reverse coll))))","user":"5c5d2e90e4b01df32ab732af"},{"code":"(fn [lst] (if (= (seq lst) (reverse (seq lst))) true false))","problem":27,"user":"52c58440e4b0c2d177d620f7"},{"code":"(fn [cols]\n  (let [len (count cols)]\n    (loop [begin 0 end (- len 1)]\n      (println begin \":\" end)\n      (cond \n        (and \n          (= (nth cols begin) (nth cols end))\n          (= (+ begin 1) end)) true\n        (and \n          (= (nth cols begin) (nth cols end))\n          (not (= begin end)))  (recur (+ begin 1) (- end 1))\n        (= begin end) true\n        :else false))))","problem":27,"user":"50e6a086e4b0140bc92c0a8c"},{"problem":27,"code":"(fn t [data]\n  (if (> (count data) 1)\n    (let [f (first data)\n          l (last data)\n          r (butlast (rest data))]\n      (if (= f l)\n        (t r)\n        false))\n    true))","user":"55bd87ede4b01b9910ae29fe"},{"code":"(fn [s]\n        (letfn [(rev [s]\n                  (if (string? s)\n                    (clojure.string/reverse s)\n                    (clojure.core/reverse s)))]\n          (= s (rev s))))","problem":27,"user":"532bce35e4b09d4e7a9b5536"},{"problem":27,"code":"#(= (map str %1) (map str (reverse %1)))","user":"54638c8fe4b01be26fd746c2"},{"problem":27,"code":"(fn [sequence]\n   (= (seq sequence) (reverse sequence)))","user":"594e31dde4b07ddc2dafaea6"},{"code":"(fn palindrome?\n  [s]\n  (= (seq s) (reverse s)))","problem":27,"user":"5131104ae4b09e21d785bdfe"},{"problem":27,"code":"#(reduce (fn [a b] true (and a b)) (for [x (range 0 (int(Math/floor (/(count %) 2))))]\n (= (nth % x) (nth % (dec(- (count %) x)))) \n))","user":"5695b589e4b0dcc4269f412a"},{"problem":27,"code":"(fn palindrome? [in]\n  (= (seq (reverse in)) (seq in)))","user":"56c12aa2e4b0839206b9d682"},{"problem":27,"code":"#(let [half-length (int (/ (count %) 2))\n      orig (take half-length %)\n      reversed (take half-length (reverse %))]\n  (= orig reversed))","user":"5640eb50e4b08d4f616f5eec"},{"problem":27,"code":"(fn [x]\n  (cond\n    (= (type x) java.lang.String) (= (apply str (reverse x) x))\n    :else (= (reverse x) x)))","user":"56f8bc1de4b07572ad1a88a6"},{"problem":27,"code":"(fn palindrome? [seq]\n  (if (not (second seq)) true\n    (if (= (take 1 seq) (take-last 1 seq)) (palindrome? (rest (drop-last 1 seq)))\n      false)))","user":"5a8d1eade4b05369db4d2511"},{"problem":27,"code":"(fn pal [in] (= (apply str (reverse in)) (apply str in)))","user":"5af554e8e4b0cc2b61a3bca6"},{"code":"(fn p? [x]\n  (cond (= x nil) true\n        true (and (= (first x) (last x))\n                  (p? (butlast (rest x))))))","problem":27,"user":"526143b7e4b03e8d9a4a705a"},{"problem":27,"code":"(fn palindrome? [xs] (= (seq xs) (reverse xs)))","user":"54cd651be4b057c6fda3a2a2"},{"code":"#((fn palindrome [col]\n  (if (< (count col) 2) \n    true\n    (if (= (first col) (last col))\n      (palindrome (drop-last (rest col)))\n      false)\n    )) %)","problem":27,"user":"5311b367e4b08068f379eced"},{"code":"#(loop [c %]\n  (if (not (= (first c) (last c)))\n    false\n    (if (< (count c) 4)\n      true\n      (recur (butlast (rest c))))))","problem":27,"user":"4f7c4eb7e4b06e829148e1af"},{"problem":27,"code":"(fn p [s] (\n          cond\n           (< (count s) 2) true\n           :else (and (= (first s) (last s)) (p (rest (drop-last s))))\n           )\n  )","user":"5da71a00e4b000c986472c14"},{"problem":27,"code":"(fn\n  [coll]\n  (if (or\n       (empty? coll)\n       (= 1 (count coll)))\n    true\n    (if (not= (first coll) (last coll))\n      false\n     (recur (drop 1 (drop-last coll))))))","user":"5a6f2942e4b0512ff01cda78"},{"problem":27,"code":"(fn [lat] (= (clojure.string/join lat) (clojure.string/join (reverse lat))))","user":"57c0365be4b05aa3c4741c8f"},{"problem":27,"code":"(fn [col]\n  (if (string? col)\n    (= col (apply str (reverse col)))\n    (= col (reverse col))))","user":"595ebf46e4b066ee0a44b04f"},{"problem":27,"code":"(fn [coll] (reduce 'and (map #(= (first %) (second %)) (partition 2 (interleave coll (reverse coll))))))","user":"5b62764ae4b0c6492753e725"},{"problem":27,"code":"(fn [s]\n  (let [s1 (reverse s)\n        s2 (-> s reverse reverse)]\n    (= s1 s2)))","user":"54a2760ae4b09f271ff37c5b"},{"problem":27,"code":"(fn\n  ([x]\n   (if (string? x)\n    (= x (clojure.string/join (reverse x)))\n    (= x (reverse x)))\n  ))","user":"5de6c094e4b0986d99407f6f"},{"problem":27,"code":"(fn [xs]\n  (let [ys (vec xs)]\n    (= ys (reverse ys))))","user":"55b25970e4b0da326a65cf7e"},{"problem":27,"code":"#(= (reverse %1) (seq %1) )","user":"54aa665fe4b09f271ff37cb8"},{"problem":27,"code":"(fn [a-seq] (= (reverse a-seq) (seq a-seq)))","user":"5b58b271e4b02d533a91bd6e"},{"code":"#((fn is-palyndrome? [coll]\n  (if (< (count coll) 2)\n    true\n    (and\n      (= (first coll) (last coll))\n      (is-palyndrome? (butlast (rest coll)))))) %)","problem":27,"user":"52c4580fe4b0c2d177d620d8"},{"problem":27,"code":"#(cond\n     (list? %1) (= %1 (reverse %1))\n     (string? %1) (= %1 (apply str (reverse %1)))\n     (vector? %1) (= %1 (reverse %1))\n  )","user":"56fde58ae4b08d47c97781aa"},{"code":"(fn [x]\n  (if (< (count x) 2)\n    true\n    (if (= (first x) (last x))\n      (recur (drop-last (rest x)))\n      false)))","problem":27,"user":"4f88e3eee4b033992c121c72"},{"problem":27,"code":"(fn [orig] (= (vec orig) (vec (reverse orig))))","user":"589e0024e4b02bd94d917e4e"},{"code":"#(if (string? %) (= % (reduce str \"\" (reverse %))) (= % (reverse %)))","problem":27,"user":"52503747e4b0541d1855b828"},{"code":"(fn palindrome? [seqn]\n  (let [rev-seqn (reduce conj '() seqn)]\n    (every? true? (map #(= %1 %2)\n                       (seq seqn) rev-seqn))))","problem":27,"user":"50d2f044e4b03c62ef244483"},{"problem":27,"code":"#(let [rev-fn (if (reversible? %) rseq reverse)]\n                           (= (rev-fn %) (seq %)))","user":"5f21d172e4b0f565ad998286"},{"problem":27,"code":"(fn palindrome? [n] (if(empty? n) true\n                         (if(= (first n) (last n)) (palindrome? (butlast (next n)))\n                           false\n                           )\n                         ))","user":"5416dce6e4b01498b1a71a04"},{"code":"#(=(reverse %) (seq %))","problem":27,"user":"513dcc1ce4b0825f97f7f964"},{"code":"(fn [x] (= (apply list x) (reverse x)))","problem":27,"user":"4f035bfd535dcb61093f6a8f"},{"code":"#(= (into '() %) (into [] %))","problem":27,"user":"525de512e4b0cb4875a45d8a"},{"problem":27,"code":"(fn [word] (loop [list (seq word)]\n\t(let [fi (first list)]\n\t(let [la (last list)]\n\t(if (= fi la)\n\t\t(if (> 2 (count list)) true (recur (rest (butlast list))))\n\t\tfalse\n)))))","user":"5954cea2e4b066ee0a44af0a"},{"code":"(fn [xs]\n  (let [c (count xs)\n        half-count (if (odd? c) (/ (dec c) 2) (/ c 2))\n        half-a (take half-count xs)\n        half-b (take half-count (reverse xs))]\n    (= half-a half-b)))","problem":27,"user":"50bd6033e4b0594b91591c66"},{"problem":27,"code":"(fn pal [x] (if (seq x) (and (= (first x) (last x)) (pal (rest (butlast x)))) true))","user":"561fc0cee4b064ca9f4b16d1"},{"problem":27,"code":"(fn [s] (if (string? s)\n          (= (apply str (reverse s)) s)\n          (= (reverse s) s))\n  )","user":"5412646de4b01498b1a719d4"},{"code":"(fn pal? [s]\n  (cond (empty? s) true\n        :else (and\n                (= (first s) (last s))\n                (pal? (rest (butlast s))))))","problem":27,"user":"4fc5019ae4b081705acca36d"},{"problem":27,"code":"#(every? identity (map = (reverse %) %))","user":"5674f874e4b05957ce8c6144"},{"problem":27,"code":"(fn [x]\n  (cond (or (empty? x) (= (count x) 1)) true\n        (= (first x) (last x)) (recur (rest (butlast x)))\n        :else false))","user":"54a97853e4b09f271ff37cae"},{"problem":27,"code":"#(let [ x (seq %) y (reverse (seq %))]\n   (if (= x y)\n     true\n     false))","user":"566d71b1e4b0a866af6896ca"},{"problem":27,"code":"(fn [p]\n  (= p (-> p\n           reverse\n           (#(if (string? p)\n              (clojure.string/join %)\n              (identity %))))))","user":"592883f1e4b072a2710fceea"},{"code":"(fn [x] (= (reverse x) (seq x)))","problem":27,"user":"4e6a2e83535d8ccf87e9fea7"},{"problem":27,"code":"#(loop [theseq (vec %)]\n   (if (<= (count theseq) 1)\n     true\n     (if (= (first theseq) (last theseq))\n       (recur (subvec theseq 1 (dec (count theseq))))\n       false)))","user":"55868660e4b059ccff29b1d4"},{"problem":27,"code":"(fn [string]\n  (->> string\n      reverse\n      (apply str)\n      (= (apply str string))))","user":"5ba19969e4b0a20761a233a4"},{"code":"(fn [coll] \n  (loop [coll (vec coll)]\n    (println \"Comparing \" (first coll) \" with \" (last coll))\n    (if (= 1 (count coll)) \n      true\n      (if (= (count coll) 2)\n        (= (first coll) (last coll))\n      \t(if (= (first coll) (last coll))\n          (recur (subvec coll 1 (- (count coll) 1)))\n       \t  false)))))","problem":27,"user":"50da34e4e4b0f31830755b3c"},{"problem":27,"code":"(fn do-pal\n  [xs]\n  (if (<= (count xs) 1)\n    true\n    (if (= (first xs) (last xs))\n      (do-pal (take (- (count xs) 2) (vec (rest xs))))\n      false\n    )\n  )\n)","user":"54e5bdf2e4b024c67c0cf7fe"},{"code":"(fn [a]  (if (not (empty? a))\n           (if (= (first a) (last a))\n             (recur (drop 1 (drop-last a)))\n             false)\n           true\n           ))","problem":27,"user":"525d318fe4b0cb4875a45d63"},{"problem":27,"code":"(fn [lst]\n  (= (seq lst) (into '() (seq lst))))","user":"5ab168d2e4b073f1774425c2"},{"code":"(fn [xs] (= (flatten (list xs)) (reverse (flatten (list xs)))))","problem":27,"user":"504e2a3fe4b0f6ff3350c477"},{"problem":27,"code":"(fn [x] (= (into '() x) (seq x)))","user":"5d6537fce4b0db5d338d15cf"},{"problem":27,"code":"(fn[coll]\n  (= (apply str coll) (apply str (reverse coll))))","user":"5472cba1e4b094393f72dd7a"},{"code":"(fn [lst]\n  (= (reverse lst) (reverse(reverse lst))))","problem":27,"user":"534f8c9ae4b084c2834f4acd"},{"problem":27,"code":"(fn palindrome [p]\n  (if (< (count p) 2)\n    true\n    (if (= (first p) (last p))\n      (palindrome\n        (drop 1\n          (take (- (count p) 1) p)))\n      false)))","user":"58f4fa7ee4b0438e51c2cecb"},{"problem":27,"code":"(fn palindrome [x]\n   (let [split-point (/ (count x) 2)]\n     (=\n      (take split-point x)\n      (reverse\n       (take-last split-point x)))))","user":"59273eefe4b072a2710fcec6"},{"problem":27,"code":"#(= (reverse (map str %)) (map str %))","user":"597e128ee4b0dbe32238d0a4"},{"problem":27,"code":"#(let [coll (into [] %1)] (= (reverse coll) coll))","user":"54b2d392e4b09f271ff37d2f"},{"problem":27,"code":"(fn [l]\n  (= (seq l)\n     (reverse l)))","user":"5a373b80e4b001c08efc0c7c"},{"problem":27,"code":"(fn [x] (= (seq x) (reverse x)))\n\n;(fn [x] (= (vec x) (reverse x)))\n\n;;(fn [x] \n  ;;(if (= x (reverse x))\n  \t;;(true? (= x (reverse x)))\n  \t;;(true? (= x (apply str (reverse x))))))","user":"5ac6f7f7e4b0e27600da777a"},{"code":"(fn f [s]\n   (loop [x s]\n     (cond\n       (empty? x) true\n       (= 1 (count x)) true\n       (= (first x) (last x)) (recur (rest (butlast x)))\n       :else false)))","problem":27,"user":"4f0478b0535dcb61093f6bcb"},{"code":"(fn ispalindrome?[seq] \n   (if (empty? seq) true\n   (if \n     (= (first seq) (last seq))\n        (ispalindrome? (reverse (rest (reverse (rest seq)))))\n        false\n   )))","problem":27,"user":"4e653558535d8ccf87e9fe6f"},{"problem":27,"code":"(fn para [coll]\n (let [s (seq coll)]\n  (= s (reverse s))))","user":"579601c8e4b0e215f87e8492"},{"problem":27,"code":"#(if (string? %)\n   (= (clojure.string/reverse %) %)\n   (=(reverse %) %))","user":"590f283de4b047aa04b19a35"},{"problem":27,"code":"(fn [x]\n  (let [y (reverse x)]\n    (or (= x y) (= x (apply str y)))))","user":"5816c5f5e4b0c0e9c07b8380"},{"problem":27,"code":"(fn[txt](= (reverse txt) (seq txt)))","user":"5463c452e4b01be26fd746c4"},{"problem":27,"code":"(fn [lst] \n  (let [rlst (reverse lst)]\n    (= rlst (reverse rlst))))","user":"5700ec08e4b08d47c97781cd"},{"code":"(fn pal [input] (= (seq input) (reverse (seq input))))","problem":27,"user":"5239caa6e4b0d705d026ef27"},{"problem":27,"code":"#(= (seq %) ((comp reverse seq) %) )","user":"5895385fe4b00487982d5279"},{"code":"#(or (empty? %) (and (= (first %) (last %)) (recur (butlast (rest %)))))","problem":27,"user":"510fe537e4b04c71fce993dd"},{"problem":27,"code":"(fn  [s]\n      (= (seq s) (reverse s))\n      )","user":"5d809b4fe4b0915913b1d36c"},{"problem":27,"code":"#(if (string? %)\n   (= (clojure.string/reverse %) %)\n   (= (reverse %) %) )","user":"5a593521e4b05d388ecb6c93"},{"problem":27,"code":"(fn [xs]\n  (= (seq xs) (reverse xs)\n  ))","user":"5ac85708e4b0e27600da77ac"},{"problem":27,"code":"(fn PalindromeDetector [lst] \n  (= (reverse lst) (seq lst)))","user":"607508f3e4b069485764de54"},{"code":"(fn [coll] (= (map identity coll) (reverse coll)))","problem":27,"user":"521d2564e4b01d5d410d8da8"},{"problem":27,"code":"(fn [x]\n   (let [orig (seq x)]\n     (letfn [(traverse [x new-x]\n               (if-let [l (last x)]\n                 (traverse (butlast x) (conj new-x l))\n                 new-x))]\n       (= orig (traverse x [])))))","user":"57689c23e4b0a07e8fc180d6"},{"code":"(fn [x] \n  (if (string? x) true\n  (=  x (reverse x))))","problem":27,"user":"5194f482e4b05be8c43d2385"},{"code":"(fn [a] (= ((fn [l] (if (string? l) (clojure.string/reverse l) (reverse l))) a) a))","problem":27,"user":"51db27dbe4b094966a2cd688"},{"problem":27,"code":"(fn foo\n  [li]\n  (cond\n    (empty? li) true\n   \t(= (first li) (last li)) (foo (rest(butlast li)))\n    :else false )\n)","user":"5eb3f908e4b00a66d4a9521a"},{"problem":27,"code":"#(= (apply str(reverse %)) (apply str %))","user":"5d6c2b80e4b04d129b00f2ae"},{"problem":27,"code":"(fn is-palindrome\n  [ls]\n  (case (count ls) \n    0 true\n    1 true\n    (if (= (first ls) (last ls))\n        (is-palindrome (subvec (vec ls) 1 (- (count ls) 1)))\n        false)))","user":"59863a26e4b021a7a535fe87"},{"problem":27,"code":"(fn palindrome? [s]\n  ((fn [se]\n    (if (seq se)\n      (if (= (first se) (last se))\n        (recur (rest (butlast se)))\n        false)\n      true))\n   s))","user":"556b67c9e4b09a3098a524ed"},{"code":"(fn pal [the-list]\n\t(if (> 2 (count the-list))\n\t\ttrue\n\t\t(if (= (first the-list) (last the-list))\n\t\t\t(pal (butlast (rest the-list)))\n\t\t\tfalse\n\t\t)\n\t)\n)","problem":27,"user":"51701a9ce4b034fe8eaf70f5"},{"code":"(fn [string] (if (= (reverse string) (reverse (reverse string))) \n    true \n    false))","problem":27,"user":"4e5d1912535d8a8b8723a2c9"},{"problem":27,"code":"(fn palindrome?\n  ([s] (palindrome? s 0))\n  ([s n]\n   (println s n)\n    (if (> n (/ (count s) 2))\n      true\n      (if (= (nth s n) (nth s (- (count s) (inc n))))\n        (recur s (inc n))\n        false)\n      )))","user":"57ffe094e4b0a837a8b30c2c"},{"problem":27,"code":"(fn [jseq]\n  (if (= (type jseq) java.lang.String)\n    (= (apply str (reverse jseq)) jseq)\n    (= (reverse jseq) jseq)))","user":"547a0d1ce4b0c51c1f4d72ca"},{"problem":27,"code":"#(= (sequence %) (reverse (sequence %)))","user":"5a1e93bee4b0ff51aa4b3270"},{"problem":27,"code":"(fn [col]\n  (if (coll? col)\n    (= (reverse col) col)\n    (= (reverse col) (seq (char-array col)))))","user":"5ccf99fbe4b0ccb0619628c8"},{"code":"#(every? true? (map = % (reverse %)))","problem":27,"user":"4eecc3a0535d93acb0a668b3"},{"code":"(fn check [lcoll](\r\n                              if (empty? lcoll) true\r\n                                (if (not= (first lcoll) (last lcoll)) false\r\n                                  (check (drop 1 (drop-last lcoll))))\r\n                             ))","problem":27,"user":"4e8aef69535d65386fec2114"},{"code":"(fn [s]\n  (= (apply list s) (reverse s)))","problem":27,"user":"4ea67906535d7eef308072e4"},{"problem":27,"code":"#(= (seq %)(seq (reverse %)))","user":"54b54d1be4b05787c3b1639c"},{"problem":27,"code":"(fn [xs] (let [size (count xs)\n               mid (quot size 2)\n               step (+  mid (rem size 2))\n               [f s]  (partition mid step xs)] \n               (= (reverse f) s)))","user":"55f9b2b6e4b03cbcff9738c8"},{"problem":27,"code":"(fn [forwards]\n  (= (reverse (reverse forwards)) (reverse forwards)))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"problem":27,"code":"(fn pali [w]\n  ;;(prn :w w :first (first w) :last (last w) := (= (first w) (last w)) :str (subs (clojure.string/reverse (subs w 1)) 1) :count (count w) )\n  (or (< (count w) 2)\n    (and\n      (= (first w) (last w))\n     (pali (rest (reverse (rest w )) )))))","user":"5972fcf6e4b01722bebd4c92"},{"problem":27,"code":"(fn\n  [x]\n  (= (reverse x) (seq x)))","user":"5c6227fee4b0fca0c1622641"},{"problem":27,"code":"(fn [arr]\n  (loop [a arr]\n    (if (not= (first a) (last a))\n      false\n      (if (some #(= (count a) %) [0 1])\n        true\n        (recur (-> a (rest) (drop-last)))\n      )\n    )\n  )\n)","user":"5e08c3dde4b0978307768fc8"},{"code":"#(if (string? %) (= % (apply str (reverse %)))\n      (= % (reverse %)))","problem":27,"user":"4e4482b3535dc968683fc4ab"},{"problem":27,"code":"(fn[x](= (take 3 x) (take 3 (reverse x))))","user":"54ecd7dde4b024c67c0cf85c"},{"code":"#(= (reverse %1) (reverse (reverse %1)))","problem":27,"user":"4f5d5202e4b0030a34fb2b38"},{"code":"#(= (seq %1) (reduce (fn [ v i ] (conj v i)) '() (seq %1)))","problem":27,"user":"53029281e4b0d8b024fd372e"},{"code":"(fn [x]\n  (if (string? x)\n    (= x (clojure.string/reverse x))\n    (= x (reverse x))))","problem":27,"user":"4ff10dd2e4b0678c553fc32a"},{"problem":27,"code":"#(let [x (concat %) y (reduce conj '() x)] (= x y))","user":"5e259d05e4b05b4b01516169"},{"problem":27,"code":"(fn [i] (= (apply str i) (apply str (reverse i))))","user":"5d73530ce4b02e6b30c93514"},{"problem":27,"code":"(fn [s] \n  (= (reverse (seq s)) (seq s)))","user":"58bfa57ae4b021aa9917ecd8"},{"problem":27,"code":"#(if (string? %) \n   (= % (apply str (reverse %) ) )\n   (= % (reverse %) ) )","user":"53f3a4ace4b0742d9025b0f7"},{"problem":27,"code":"(fn ispal [coll]\n  (or \n   (or (nil? coll) (= 1 (count coll)))\n     (and\n       (= (first coll) (last coll))\n      (ispal (butlast (next coll))))))","user":"57f291a8e4b0511f1d294df0"},{"problem":27,"code":"(fn p [s]\n  (cond\n    (>= 1 (count s)) true\n    (not= (first s) (last s)) false\n    :else (p (drop-last (rest s)))))","user":"560ff7d9e4b05f002753df67"},{"problem":27,"code":"(fn [arg]\n  (loop [coll (seq arg)]\n    (cond (not= (first coll) (last coll)) false\n          (empty? coll) true\n          :else (recur (drop-last (rest coll))))))","user":"57d13683e4b0bd073c202368"},{"code":"(fn [x]\n  (loop [i x]\n    (if (or (empty? i) (= (count i) 1))\n      true\n      (if (not= (last i) (first i))\n        false\n        (recur (remove #{(first i) (rest i)} i))))))","problem":27,"user":"5042bb9ae4b034ff00315d16"},{"code":"#(= (into [] %) (into () %))","problem":27,"user":"5018eb4ee4b011a2e0bf6411"},{"problem":27,"code":"#(let [operand (seq %)] (= operand (reverse operand)))","user":"57299c57e4b0c6e51e0d2b1e"},{"problem":27,"code":"(fn\n  [coll]\n  (let [length    (count coll)\n        mid       (/ length 2)\n        [beg end] (split-at mid coll)\n        rev-end   (reverse end)\n        adj-beg   (if (odd? length)\n                    (butlast beg)\n                    beg)]\n    (= rev-end adj-beg)))","user":"5cf48f04e4b087f62be35a86"},{"problem":27,"code":"#(= ( seq % ) (reverse (seq %) ) )","user":"5b28cf92e4b063e2438bcc56"},{"problem":27,"code":"(fn palindrome? [xs]\n  (if (<= (count xs) 1)\n    true\n    (if (not= (first xs) (last xs))\n      false\n      (palindrome? (take (- (count xs) 2) (rest xs))))))","user":"55453f8ee4b0a04f79299530"},{"code":"#(let [a (into [] %)] (= (rseq a) a))","problem":27,"user":"4e634eb9535d8ccf87e9fe63"},{"problem":27,"code":"(fn [col] (= (seq col) (reduce conj '() col)))","user":"57d588a5e4b0bd073c2023b6"},{"problem":27,"code":"#(loop[h 0, t (- (count %) 1)]\n   (if(< t h)\n     true\n     (if(= (nth % h) (nth % t))\n       (recur(inc h)(dec t))\n       false)))","user":"5654e8ade4b0f9d632dd848e"},{"code":"(fn pal [alist]\r\n  (= alist \r\n     (if (coll? alist) \r\n       (reverse alist)\r\n       (clojure.string/reverse alist))))","problem":27,"user":"50c46cfde4b08bdb2b9270a1"},{"code":"(fn [v]\n  (reduce #(and % %2)\n    (let [size (count v)\n          half (/ size 2)]\n      (map\n        #(= (nth v %) (nth v %2))\n        (range half)\n        (range (dec size) half -1)))))","problem":27,"user":"4f253a49e4b0d66497709ff3"},{"code":"#(let [a (take (/ (count %) 2) %)\n       b (take-last (/ (count %) 2) %)]\n   (= a (reverse b)))","problem":27,"user":"50e3e108e4b01912b3285c48"},{"code":"(fn [x] (if (= java.lang.String (type x)) (if (= x (clojure.string/reverse x)) true false) (if (= x (reverse x)) true false)))","problem":27,"user":"4f26b520e4b0d6649770a004"},{"problem":27,"code":"(fn [input]\n  (loop [dwindlelist input newlist nil]\n    (if (empty? dwindlelist)\n      (= (apply str input)\n         (apply str newlist))\n      (recur (rest dwindlelist) \n             (conj newlist (first dwindlelist))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"#(let [x (concat %)] (= x (reverse x)))","problem":27,"user":"5093a80be4b097f48cc38583"},{"code":"(fn [s]\n (=\n  (into '() s)\n  (reverse (into '() s))\n )\n)","problem":27,"user":"527c040be4b03e8d9a4a75a7"},{"code":"(fn [x]\n  (= \n    (clojure.string/join \"\" x) \n    (clojure.string/join \"\" (reverse x))))","problem":27,"user":"4f5576c2e4b0a7574ea71801"},{"code":"#(= (apply str %) (apply str(reverse %)))","problem":27,"user":"5376190de4b06839e8705e1c"},{"code":"#(= (concat '() %1) (reverse %1))","problem":27,"user":"5273e006e4b03e8d9a4a7495"},{"problem":27,"code":"(fn is-palindrome [coll]\n  (let [cnt (count coll)\n        midpoint (/ cnt 2)\n        second-half (reverse (drop midpoint coll))\n        first-half (take (count second-half) coll)]\n    (= first-half second-half)))","user":"55f6e7ece4b06e875b46ce9e"},{"problem":27,"code":"(fn [x] (= (apply str x) (apply str (reverse x) ) ) )","user":"52da7ae5e4b09f7907dd13b8"},{"code":"(fn p [s](let [o (reverse (reverse s)) r (reverse s)] (= o r) ))","problem":27,"user":"4fc0221ce4b081705acca322"},{"problem":27,"code":"(fn fu\n  [x]\n  (if (odd? (count x))\n    (= (take (/ (dec (count x)) 2) (seq x))\n       (reverse (drop (/ (count x) 2) (seq x))))\n    (= (take (/ (count x) 2) (seq x))\n       (reverse (drop (/ (count x) 2) (seq x))))))","user":"5c3f29d4e4b08cd430848e8f"},{"code":"(fn [pal] (= (reverse pal) (reverse (reverse pal))))","problem":27,"user":"50478418e4b0371827a27bc3"},{"code":"(fn pal [s] (cond\n  (= 0 (count s)) true\n  (= (first s) (last s)) (pal (next (drop-last s)))\n  true false))","problem":27,"user":"4f5694cae4b0a7574ea71827"},{"code":"(fn [coll] (= (seq coll) (seq (reverse coll))))","problem":27,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":27,"code":"(fn [col]\n  (let [s (into-array col)]\n    (=\n      (reverse\n        (subvec (vec s) 0 (quot (count s) 2)))\n      (subvec\n        (vec s) (- (count s) (quot (count s) 2)) (count s)))))","user":"53a68c5ae4b0ef122a8689c8"},{"problem":27,"code":"#(apply = true (map = % (reverse %)))","user":"5688d6a8e4b0dcc4269f4071"},{"problem":27,"code":"(fn palindrome? [sequ]\n  (= (seq sequ) (reverse sequ)))","user":"54d5343fe4b0a52adc2e200a"},{"problem":27,"code":"(fn\n  [coll]\n  (every? #(= (first %) (second %)) (map #(list % %2) coll (reverse coll))))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":27,"code":"(fn [x]\n  (if (sequential? x)\n    (= x (reverse x))\n    (= x (clojure.string/join (reverse x)))))","user":"570306cae4b08d47c97781ec"},{"problem":27,"code":";learned from adereth that reverse sequentizes the arg, so 'seq' not needed.\n\n#(= (seq %) (reverse %))","user":"5535e822e4b09218d5f44fb2"},{"problem":27,"code":"(fn [coll]\n  (loop [idx 0]\n    (let [cnt (count coll)\n          r-idx (dec (- cnt idx))]\n      (cond\n       (not= (nth coll idx) (nth coll r-idx)) false\n       (>= idx (/ cnt 2)) true\n       :else (recur (inc idx))))))","user":"51441ce7e4b0b4fb4ace5f41"},{"problem":27,"code":"(fn [x] (= (reduce str x) (reduce str (reverse x))))","user":"57b356c2e4b0fbc9809a277b"},{"code":"(fn p[x] (if (<= (count x) 1) \n           true\n           (and (= (first x) (last x))\n                (p (rest (butlast x))))))","problem":27,"user":"4f2c2ccbe4b0d6649770a050"},{"problem":27,"code":"(fn [list]\n  (if (empty? list)\n    true\n    (if (not= (first list) (last list))\n      false\n      (recur (rest (butlast list))))))","user":"539c88e1e4b0b51d73faaf2c"},{"problem":27,"code":"(fn [start]\n  (= (seq start)\n  (reduce(fn[out part]\n                  (cons part out))\n            []\n            start))\n)","user":"5f3a8493e4b004f08c61c527"},{"problem":27,"code":"(fn [text] (= (seq text) (reverse text)))","user":"53161a56e4b08068f379ed3e"},{"problem":27,"code":"#(first \n (reduce \n  (fn [aggrsubval _] \n    (let [[aggr subval] aggrsubval] \n      (vector \n       (and aggr (= (first subval) (last subval))) \n       (rest (butlast subval))\n       )\n      )\n    ) \n  (vector true (seq %)) \n  (range (int (/ (count %) 2)))\n  )\n )","user":"5810b899e4b0f478707a05d8"},{"code":"(fn my-pal [s]\n  (if (or (= (count s) 0) (= (count s) 1))\n      true\n      (and (= (first s) (last s))\n           (my-pal (drop-last (rest s))))))","problem":27,"user":"4eb2d0ae535d7eef3080734e"},{"problem":27,"code":"(let [stringify #(apply str %)] #(= (stringify %) (stringify (reverse %))))","user":"504e0a1de4b078edc5f593a7"},{"problem":27,"code":"(fn palindrome?\n  [s]\n  (every? true? (map = s (reverse s))))","user":"5974d2ede4b01722bebd4cb6"},{"problem":27,"code":"#(= (reverse %)\n           (reverse (reverse %)))","user":"54c72b19e4b045293a27f636"},{"code":"(fn [lst]\n  (loop [clst lst]\n    (let [fst (first clst)\n          lst (last clst)\n          newlst (rest (butlast clst))]\n    (if (empty? newlst)\n      true\n      (if (= fst lst)\n        (recur newlst)\n        false)))))","problem":27,"user":"4ee271e2535d10e5ff6f5369"},{"problem":27,"code":"(fn  \n  [palindrome]\n   (loop [l palindrome]\n    (if (<= (count l) 1)\n      true\n      (if (= (first l) (last l))\n        (recur (->> l (drop 1) (drop-last)))\n        false))))","user":"5591b61ee4b0604b3f94d580"},{"problem":27,"code":"#(let [s (seq %) r (reverse s)] (= r s))","user":"54dbc6ebe4b024c67c0cf773"},{"problem":27,"code":"(fn [in]\n  (if (string? in)\n    (= (apply str (reverse in)) in)\n    (= (reverse in) in)))","user":"605b49b7e4b079a07f8593f8"},{"problem":27,"code":"(fn [ls]\n  (= (into [] ls) (rseq (into []  ls)))\n)","user":"5581a6dae4b05c286339e0fe"},{"code":"(fn pc [c] (= (seq c) (reverse c)))","problem":27,"user":"5020d2aee4b0cb6ebc0a42fb"},{"code":"(fn [x] \n  (=  (apply str (reverse x) ) (apply str x) ))","problem":27,"user":"5224a46ce4b01819a2de42e5"},{"code":"#(let [half (bit-shift-right (count %1) 1)]\n    (if (odd? (count %1))\n  \t\t(= (take half %1) (reverse (drop (+ 1 half) %1)))\n\t\t\t(= (take half %1) (reverse (drop half %1)))))","problem":27,"user":"4f724e56e4b07046d9f4f027"},{"problem":27,"code":"(fn [l]\n  (loop [remaining l]\n    (if (< 2 (count remaining))\n      (if (= (first remaining) (last remaining))\n        (recur (butlast (rest remaining)))\n        false)\n      true)))","user":"595a3b41e4b066ee0a44afb7"},{"problem":27,"code":"#(= (reduce str %)(reduce str (reverse %)))","user":"5b0c21fbe4b0cc2b61a3bde3"},{"problem":27,"code":"(fn is_palindrome [x]\n  \n  (not (some false? (map = x (reverse x))))\n )","user":"57f5a5a5e4b0d3187e9008d5"},{"code":"(fn [x] (= x (if (instance? java.lang.String x) (clojure.string/reverse x) (reverse x))))","problem":27,"user":"5027f37be4b01614d1633ff1"},{"code":"(fn palin [s]\n  (cond (= (count s) 0) true\n        (= (first s) (last s)) (palin (drop-last (rest s))) \n        :else false))","problem":27,"user":"5313a2bfe4b08068f379ed0b"},{"code":"(fn [v] (if (= (seq v) (reverse v)) true false))","problem":27,"user":"4e31c695535deb9a81d77f20"},{"code":"#(= (vec %) (vec (reverse %)))","problem":27,"user":"4f4bbda0e4b03ad3f0c10c7b"},{"code":"(fn [x]\n  (let [xrev (reverse x)]\n      (= x (if (string? x) (apply str xrev) xrev))))","problem":27,"user":"4e955b95535dbda64a6f6b33"},{"code":"(fn palin? [seq]\n  (if (or (empty? seq) (empty? (rest seq)))\n    true\n    (and (= (first seq) (last seq))\n         (palin? (rest (butlast seq))))))","problem":27,"user":"503e6047e4b06c4e0e1fa266"},{"problem":27,"code":"(fn [coll]\n  (= (seq (reverse coll)) (seq coll)))","user":"596f01a5e4b069c0a1a19870"},{"problem":27,"code":"(fn my-palindrome-detector\n  [coll]\n  (= (seq coll) (reverse coll)))","user":"548db64ce4b0e286459a121c"},{"code":"(fn [lst]\n    (if (string? lst)\n      (= lst (apply str (reverse lst)))\n      (= lst (reverse lst)))\n    )","problem":27,"user":"4eb6f065535d7eef30807372"},{"problem":27,"code":"(fn palindrome? [seq]\n  (if (string? seq) (= seq (apply str (reverse seq)))\n\t  (= seq (reverse seq))))","user":"5a99d28ee4b0d174b936c7b3"},{"code":"#(loop [s %]\n    (cond\n     (<= (count s) 1) true\n     (not= (first s) (last s)) false\n     :else (recur (rest (butlast s)))))","problem":27,"user":"51dc5033e4b09c47a74ce109"},{"problem":27,"code":"(fn [s]\n     (= (seq s) (reverse s)))","user":"56d6e165e4b0ea9b8538f7d3"},{"problem":27,"code":"#(\n  loop [s 0 d (dec (count %))]\n   (if (< d 0)\n    true\n    (if (= (nth % s) (nth % d))\n     (recur (inc s) (dec d))\n     false\n    )\n   )\n)","user":"5b5b0bb9e4b0c6492753e6a5"},{"problem":27,"code":"#((fn eq [left right] (let [x (first left) xs (rest left) y (first right) ys (rest right)] (if (= x y) (if (and (empty? xs) (empty? ys)) true (eq xs ys)) false))) (reverse %) %)","user":"567ffd69e4b0966858e4d8e7"},{"problem":27,"code":"(fn [x] (if (empty? x) true (if (not (= (first x) (last x))) false (recur (reverse (rest (reverse (rest x))))) ) ) )","user":"4f7121cae4b07046d9f4f007"},{"code":"(fn [s] \n  (cond (= 1 (count s)) true\n        (= 2 (count s)) (= (first s) (last s))\n  :else (and (= (first s) (last s)) \n(recur  ( rest (reverse (rest s)))))))","problem":27,"user":"5002ad40e4b0678c553fc42b"},{"code":"#(=  (seq %) (reverse %))","problem":27,"user":"52382d91e4b0fae3832e99f0"},{"problem":27,"code":"#(if (= (partition 1 %) (reverse (partition 1 %))) true false)","user":"5589a735e4b059ccff29b206"},{"problem":27,"code":"(fn [coll]\n  (if (empty? coll)\n    true\n    (if (= (first coll) (last coll))\n      (recur (drop-last (rest coll)))\n      false)))","user":"5f21ffa2e4b0f565ad998289"},{"problem":27,"code":"(fn [v]\n  (loop [in v]\n    (cond\n     (empty? in) true\n     (not= (last in) (first in)) false\n     :else (recur (rest (reverse (rest in)))))))","user":"51be00cae4b0ff155d51d2b8"},{"code":"(fn is-palindrome [l] (if (= (first l) (last l))\n                        (if (or (= (count l) 1) (= (count l) 0)) true (is-palindrome (take (- (count l) 2) (rest l)))) false))","problem":27,"user":"52a60461e4b0c58976d9abf7"},{"problem":27,"code":"(fn pal [c]\n  (if (empty? c)\n    true\n    (and\n      (= (first c) (last c))\n      (pal \n        (butlast\n          (rest c)\n        )\n      )\n    )\n  )\n)","user":"580e7761e4b0849f6811b753"},{"problem":27,"code":"(fn is-palindrome? [x]\n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x))\n      (is-palindrome? ((comp rest reverse rest reverse) x))\n      false)))","user":"576000fce4b08062f99a4e8b"},{"problem":27,"code":"(fn palindrome [x] \n  (if (= (first x) (last x))\n    (if (< 2 (count x))\n      true\n      (palindrome (butlast (rest x))))\n    false\n    )\n  )","user":"56092a8de4b0053d1b86c7da"},{"problem":27,"code":"(fn polidrome [n]\n(if (= (reverse (reverse n)) (reverse n)) true false))","user":"5b3a1c3ce4b02d533a91bbbd"},{"code":"#(let [p (into '() %)\n      rev (reverse p)]\n  (= p rev))","problem":27,"user":"53908e6be4b0b51d73faae9a"},{"code":"#(let [x (vec %)] (= x (reverse x)))","problem":27,"user":"500f336be4b03ec779321687"},{"problem":27,"code":"(fn [coll]\n    (loop [coll (if-not (seq? coll) (seq coll) coll)]\n      (if (nil? coll) true\n      (if-not (= (first coll) (last coll))\n        false\n        (recur (butlast (rest coll))))\n\n    )))","user":"56b41972e4b0982f16b37e1f"},{"problem":27,"code":"(fn [x]\n  (= x\n     (cond\n      (string? x) (clojure.string/reverse x)\n      :else (reverse x))))","user":"5e3d183fe4b01d43a70e8e11"},{"code":"#(zero? (compare (vec %) (vec (reverse %))))","problem":27,"user":"506558f0e4b0deb876850596"},{"problem":27,"code":"#(= (seq % ) (reverse (seq %)) )","user":"576be8a2e4b0a07e8fc18140"},{"problem":27,"code":"#(if (even? (count %))\n   (= (take (int (/ (count %) 2)) %) (reverse (drop (int (/ (count %) 2)) %)))\n   (= (take (int (/ (count %) 2)) %) (reverse (drop (+ (int (/ (count %) 2)) 1) %))))","user":"5a1eea9be4b0ff51aa4b327b"},{"code":"(fn palindrome? [lat]\r\n  (if\r\n    (string? lat) (= lat (apply str (reverse lat)))\r\n    (= lat (reverse lat))))","problem":27,"user":"4ddb339c535d02782fcbe9f9"},{"code":"(fn [x] (= (seq x) (reduce conj '() x)))","problem":27,"user":"527c036ee4b03e8d9a4a75a5"},{"problem":27,"code":"(fn\n  [x]\n    (let [[first-one & remaining] x\n          last-one (last remaining)]\n      (cond\n        (empty? remaining) true\n        (= (count remaining) 1) true\n        (not= first-one last-one) false\n        :else (recur (drop-last remaining))\n        )\n      )\n  )","user":"5959c72ae4b066ee0a44afac"},{"problem":27,"code":"(fn [coll] (= (reverse coll)  (seq coll)))","user":"4fb0bd28e4b081705acca26b"},{"code":"(fn palindrome? [s1] (reduce #(and %1 %2) true (map #(= %1 %2) s1 (reverse s1))))","problem":27,"user":"4e9de526535dbda64a6f6b8e"},{"code":"(fn [ls]\n  (= (vec ls) (vec (reverse ls))))","problem":27,"user":"5154fa3fe4b0179c5115f4e6"},{"problem":27,"code":"(fn palin [sekvenssi]\n  (if (empty? sekvenssi)\n    true\n    (if (not (= (first sekvenssi) (last sekvenssi)))\n      false\n      (recur (drop 1 (drop-last 1 sekvenssi))))))","user":"57c314f3e4b05aa3c4741cba"},{"problem":27,"code":"(fn [coll] \n  (cond \n   (string? coll) (= coll (apply str (reverse coll)))\n   :else (= coll (reverse coll))))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":27,"code":"(fn [coll]\n  (let [reverse-coll (reverse coll)]\n    (every? true? (map = coll reverse-coll))))","user":"55af3e6be4b03311e7b732c7"},{"problem":27,"code":"#(= % (if (instance? String %) (clojure.string/reverse %) (reverse %)))","user":"595c02a9e4b066ee0a44afeb"},{"problem":27,"code":"(fn [s] (loop [s s]\n              (if (< (count s) 2)\n                true\n                (if (not= (first s) (last s))\n                  false\n                  (recur (drop 1 (take (- (count s) 1) s)))))))","user":"5cd99946e4b05ee0cb311706"},{"problem":27,"code":"(fn pal\n\t[x]\n\t(if (string? x)\n\t(= x (clojure.string/reverse x))\n\t(= x (reverse x))))","user":"5545477fe4b0a04f79299531"},{"code":"#(if (string? %1) (= %1 (clojure.string/reverse %1)) (= %1 (reverse %1)))","problem":27,"user":"52bf8e35e4b07a9af579233a"},{"code":"(fn [x]\r\n  (loop [a x]\r\n    (if (empty? a)\r\n      true\r\n      (if (= (first a) (last a))\r\n        (recur \r\n          (take (- (count a) 2) (rest a)))\r\nfalse))))","problem":27,"user":"4f040bbf535dcb61093f6b95"},{"problem":27,"code":"(fn test_rev\n  ([arg] (test_rev arg nil))\n  ([arg bck_list] \n   (if (empty? arg)\n     (= bck_list (reverse bck_list))\n     (test_rev (rest arg) (conj bck_list (first arg)))\n     )\n   )\n  )","user":"5ae71f14e4b0837691e92ca7"},{"problem":27,"code":"(fn palindrome [a]\n    (let [s (seq a) x (first s) rest (drop 1 s)]\n\n        (or (= 0 (count rest))\n            (and (= x (last rest)) \n                (palindrome (-> rest count dec (take rest)))\n                )))\n)","user":"577a444be4b0d3393e5deaf5"},{"problem":27,"code":"(fn p-check [sequence]\n  (let [f-l-match? (fn [sequence] (= (first sequence) (last sequence)))]\n    (if (empty? sequence)\n      true\n      (if (f-l-match? sequence)\n        (p-check (rest (butlast sequence)))\n        false))))","user":"54636b05e4b01be26fd746c0"},{"problem":27,"code":"(fn [coll]\n  (loop\n    [coll coll]\n    (case (count coll)\n      (0 1) true\n      (if (= (first coll) (last coll))\n        (recur (drop-last (rest coll)))\n        false))))","user":"55c66d3de4b0e31453f649c1"},{"problem":27,"code":";(fn [collection] (= (vec collection) (reverse collection)))\n\n#(= (vec %) (reverse %))","user":"550d9452e4b06e50f9beb15d"},{"problem":27,"code":"(fn [c] (= (reverse (seq c)) (seq c) ))","user":"572a543ee4b0f4d77e651235"},{"problem":27,"code":"(fn [xs] \n  (= (reduce \n      (fn [xxs x] (cons x xxs)) \n      []\n      xs\n      )\n     (seq xs)\n  )\n)","user":"58d2bfc8e4b03c36ff7e5909"},{"code":"#(= (seq %) (reverse  %))","problem":27,"user":"4ea85846535d7eef308072f9"},{"problem":27,"code":"(fn [coll] (let [length (count coll)]\n             (loop [index 0]\n               (if (>= index (/ length 2))\n                 true\n                 (if (= (nth coll (- (dec length) index)) (nth coll index))\n                   (recur (inc index))\n                   false)\n                 ))))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":27,"code":"#(let [n (vec %)\n        r (reverse n)]\n    (if (= n r)\n      true\n      false))","user":"5432df22e4b0dad94371f2f5"},{"problem":27,"code":"(fn [col] (if (string? col) (= (clojure.string/reverse col) col) (= (reverse col) col)))","user":"59a180b3e4b0871e7608b852"},{"code":"#(let [size (count %)\n       myvec (vec %)\n       mid (quot size 2)]\n   \n   (loop [index 0]\n     (if (= index mid)\n     true\n     (if (not= \n          (nth myvec index) \n          (nth myvec (- size index 1)))\n     false\n     (recur (inc index))))))","problem":27,"user":"531d34cfe4b08068f379edac"},{"code":"#(let [a (vec %)] (= (reverse a) a))","problem":27,"user":"509ebf39e4b08df8156e9e33"},{"code":"(fn [x] \n  (if (string? x)\n    (= x (reduce str (reverse x)))\n    (= x (reverse x))))","problem":27,"user":"50aa8776e4b056ee01935867"},{"code":"(fn [coll] \n    (let [[a b] (split-at (int (/ (count coll) 2)) coll)] \n      (if (even? (count coll))\n        (= a (clojure.core/reverse b))\n        (let [B (clojure.core/reverse (rest b))] \n          (= a B)\n        )\n      )\n    )\n  )","problem":27,"user":"52485723e4b05ef8e38e63d2"},{"problem":27,"code":"(fn [coll]\n    (let [coll-length (count coll)\n          check-index (range (Math/ceil (/ coll-length 2)))]\n      (every? (fn [index]\n                (let [head (nth coll index)\n                      tail (nth coll (- coll-length 1 index))]\n                  (= head tail)))\n              check-index)))","user":"58bbcbc8e4b0888cdc949d00"},{"problem":27,"code":"(fn isPalindrome? [lst]\n  (= (seq lst)\n     (reverse lst)))","user":"55838353e4b05c286339e116"},{"code":"(fn pal[s] \n  (if (string? s) \n     (= s (apply str (reverse s)))\n     (= s (reverse s))\n  )\n)","problem":27,"user":"4e7650c5535d324fb2983d68"},{"code":"#(= (lazy-seq %1) (reverse (lazy-seq %1)))","problem":27,"user":"4eea437b535d93acb0a6689a"},{"problem":27,"code":"#(= (vec %) (vec (reverse (vec %))))","user":"5545f713e4b0a04f7929953a"},{"problem":27,"code":"(fn [x] \n  (=\n   (reverse \n    (vec x)\n   )\n   (vec x)\n  )\n )","user":"5dcdb5cbe4b0b296f82db5b2"},{"problem":27,"code":"(fn [x] (= (first x) (last x))) ;Dodgy cheat on the tests.","user":"553aad97e4b09218d5f44ff9"},{"code":"(fn [l] (loop [ s true l l] \n          (if (or (false? s) (empty? l)) s \n            (recur (and (true? s) (= (first l) (last l))) (drop 1 (drop-last l))))))","problem":27,"user":"535a18e3e4b04ce2eb3ed2a4"},{"code":"(fn isPalindrome [element]\n  (if (= (reverse (reverse element)) (reverse element))\n     true\n     false\n  )\n)","problem":27,"user":"4ea5b8ae535d7eef308072d8"},{"problem":27,"code":"(fn [coll] \n  (let [normal (seq coll)]\n    (= normal (reverse normal))))","user":"5a342188e4b0ddc586f153bd"},{"code":"(fn [x] (if (or (list? x) (vector? x)) (= x (reverse x)) (= x (apply str (reverse x)))))","problem":27,"user":"4eb8979b535dfed6da9c6d4a"},{"problem":27,"code":"(fn [ls] (= (reverse ls) (seq ls)))","user":"56d7f340e4b0ea9b8538f7df"},{"problem":27,"code":"(fn is-palindrome [input]\n  (if (string? input)\n    (= input (apply str (reverse input)))\n    (= input (reverse input))))","user":"5db826b4e4b010eb3c36cd47"},{"code":"#(= (seq %) (reverse (seq \n%)))","problem":27,"user":"538d4926e4b0b51d73faae6a"},{"problem":27,"code":"(fn palindrome? [a] (= (seq a) (reverse (seq a))))","user":"52f0ea04e4b05e3f0be25ee6"},{"problem":27,"code":"#(if(= (apply str (reverse %)) (apply str %)) true false)","user":"559d6288e4b0ec2b359424dc"},{"problem":27,"code":"#(loop [sq (seq %) length (count %) i 0]\n   (if (= (nth sq i) (nth sq (- (dec length) i)))\n     (if (> i (quot length 2))\n       true\n       (recur sq length (inc i)))\n     false))","user":"5b199fd4e4b03cfeda66ecbd"},{"problem":27,"code":"(fn [l] (= (reverse (into () l)) (reverse l)))","user":"5455573be4b0e397800069e0"},{"code":"(fn [x] (every? true? (for [i (range (/ (count x) 2))] (= (nth x i) (nth x (- (count x) i 1))))))","problem":27,"user":"5351fca5e4b084c2834f4aec"},{"code":"(fn [s]\n  (let [m (/ (count s) 2)]\n    (= (reverse (drop m s)) (drop-last m s))))","problem":27,"user":"52be5d55e4b07a9af579231e"},{"code":"(fn [items]\n    (= (seq items) \n       (reverse (seq items))))","problem":27,"user":"504ee511e4b0e7ad84dbc4a4"},{"code":"#(apply = ((juxt seq reverse) %))","problem":27,"user":"4e8681b7535dae1a5effa438"},{"problem":27,"code":"#(let [x (seq %)] (= (reverse x) x))","user":"54d9366ce4b0a52adc2e204e"},{"problem":27,"code":"(fn\n  [s]\n  (let [half (int (/ (count s) 2))]\n    (= (take half s) (take half (reverse s)))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"code":"(fn [obj] \n  (= \n    (if (= (type obj) java.lang.String) \n      (apply str (reverse obj)) \n      (reverse obj))\n    obj))","problem":27,"user":"4f6fd91ae4b07046d9f4efed"},{"code":"(fn [col] \n  (if (string? col)\n    (= col (reduce str (reverse col)))\n    (= col (reverse col))))","problem":27,"user":"518d1b5be4b070277754617b"},{"problem":27,"code":"(fn [ls]\n  (loop [l ls lr (reverse ls) ans true]\n    (if (= () l)\n      ans\n      (recur (rest l) (rest lr) (and ans (= (first l) (first lr)))))))","user":"561bcf94e4b064ca9f4b168a"},{"problem":27,"code":"#(= (seq %)(seq(reverse %)))","user":"5913375de4b0163c97b36efe"},{"problem":27,"code":"#(=(reverse (flatten (list %))) (flatten (list %)))","user":"53e9681de4b036ad0777e4a4"},{"code":"(fn palindrome?\n  [coll]\n  (cond\n    (empty? coll) true\n    (= (first coll)\n       (last coll)) (palindrome? (rest (butlast coll)))\n    :else false))","problem":27,"user":"4f07bc41535dcb61093f6c2c"},{"problem":27,"code":"(fn [s] (reduce #(and %1 %2) true (map #(= %1 %2) (reverse s) s)))","user":"53a0ab8ce4b0ca733b9744b3"},{"problem":27,"code":"(fn [iter]\n  (loop [elements iter]\n    (if (not= (first elements) (last elements))\n              false\n              (if (<= (count elements) 1)\n                true\n                (recur (take (- (count elements) 2) (rest elements)))))))","user":"554f817ce4b00713264bd9a2"},{"problem":27,"code":"(fn is-palindrome? [sq]\n  (let [sq (seq sq)]\n    (loop [is? true ind 0]\n    (cond \n     (>= ind (Math/ceil (/ (count sq) 2))) true\n     (not= (nth sq ind) (nth (reverse sq) ind)) false\n     true (recur true (inc ind))\n     )\n    ))\n  \n  )","user":"60436423e4b02d28681c77a3"},{"code":"(fn [coll] (= (vec coll) (rseq (vec coll))))","problem":27,"user":"4e6a79ca535d8ccf87e9feeb"},{"code":"(fn [x]\n  (if (string? x) (= x (apply str (reverse x)))\n    (= x (reverse x))\n  )\n)","problem":27,"user":"5272d4b7e4b03e8d9a4a7453"},{"code":";#(= (apply str (reverse %)) (apply str %))\n#(= (reverse %) (seq %))","problem":27,"user":"5213d81de4b0961f15ac4d73"},{"problem":27,"code":"#(= % (if (= (type %) java.lang.String)\n        (apply str (reverse %))\n        (reverse %)))","user":"5f27cc7fe4b033932238a646"},{"code":"#(if (string? %) (= % (apply str (reverse %)))\n                 (= % (reverse %)))","problem":27,"user":"50815c9fe4b0946d0443855d"},{"problem":27,"code":"(fn [l]\n  (let [c (/ (count l) 2)]\n    (loop [n c ln l]\n      (if (< n 1)\n        true\n        (if (= (first ln) (last ln))\n          (recur (dec n) (butlast  (rest ln)))\n          false)))))","user":"58ebd6b3e4b056aecfd47d4c"},{"problem":27,"code":"(fn[n] (let [rev (reverse n)]\n         (every? true?\n         \t(map #(= (first %) (second %)) \n            \t(map vector n rev)))))","user":"541df0b5e4b01498b1a71a86"},{"problem":27,"code":"(fn isPal\n  [s]\n  (if (string? s)\n  \t(= (apply str (reverse s)) s)\n    (= (reverse s) s)))","user":"55355397e4b09218d5f44fae"},{"problem":27,"code":"(fn testa [s]\n  (if (< (count s) 2) true\n                      (if (= (first s) (last s))\n                        (testa (drop-last (rest s)))\n                        false\n\n                        )))","user":"5798d151e4b039eba2ecb120"},{"problem":27,"code":"(fn [seq]\n  (= (map (fn [x] x) seq) (reverse seq)))","user":"5965a773e4b069c0a1a1978a"},{"problem":27,"code":"(fn[collection]\n\t(if (string? collection)\n\t\t(= (clojure.string/join (reverse collection)) collection)\n\t\t(= (reverse collection)collection)\n\t)\n)","user":"59228b00e4b026ae38521281"},{"problem":27,"code":"(fn palindrom?\n  [x]\n \n    (= (seq x) (reverse x)))","user":"5ffd7ce6e4b074f607df65fb"},{"problem":27,"code":"#(->> (reverse %) (map = %) (every? true?))","user":"60a9a829e4b00e9e6653c470"},{"problem":27,"code":"#(= (reverse(seq %)) (seq %))","user":"5562f08ae4b0c656e3ff17df"},{"code":"(fn [lst]\n  (loop [fwd lst \n         rvs (reverse lst)]\n    (if (empty? fwd)\n        true\n        (if (= (first fwd) (first rvs))\n            (recur (rest fwd) (rest rvs))\n            false))))","problem":27,"user":"5060d137e4b0dc10a69545a0"},{"problem":27,"code":"(fn [coll] (= (apply str coll) (apply str (reverse coll))))","user":"5720a2b0e4b0c5bde472c099"},{"problem":27,"code":"(fn palindrome? [coll]\n  (let [coll# (if (seq? coll) coll (seq coll))]\n  (= (reverse coll#) coll#)))","user":"53b7aa6ce4b047364c0444d1"},{"code":"#(let [l (dec (count %))]\n  (= (take l %) (take l (reverse %))))","problem":27,"user":"4f443eafe4b0d7d3c9f3fd38"},{"problem":27,"code":"(fn palin\n  ([s] (palin s 0 (- (count s) 1)))\n  ([s start end] (let [stval (nth s start)\n                       enval (nth s end)]\n                   (if (and (< start end)\n                            (= stval enval))\n                     (recur s (inc start) (dec end))\n                     (= stval enval)))))","user":"54c3747de4b045293a27f60e"},{"problem":27,"code":"(fn [x] \n  (let [xs (seq x)]\n    (= xs (reverse xs))))","user":"608d54abe4b03bd49d9f36b8"},{"problem":27,"code":"(fn [s]\n  (loop [lst (seq s)]\n    (if (< (count lst) 2)\n      true\n      (if (not (= (first lst) (last lst)))\n        false\n        (recur (rest (reverse (rest lst))))))))","user":"57cef3f8e4b0c746388ab8b4"},{"problem":27,"code":"#(let [chars (seq %)] (= (reverse chars) chars))","user":"5444ec99e4b032a45b869394"},{"problem":27,"code":"(fn pal [coll]\n  (loop [cnt (count coll)\n         left coll]\n    (if (< cnt 2)\n      true\n      (and (= (first coll) (last coll))\n           (recur (dec cnt) (drop-last (rest coll)))))))","user":"58975725e4b00487982d52b7"},{"problem":27,"code":"(fn [i]\n     (if (= i (if (string? i) (apply str (reverse i)) (reverse i)))\n     true false)\n    )","user":"54f0aab1e4b024c67c0cf8a1"},{"problem":27,"code":"(fn myfunc \n  ([x] (myfunc x 0))\n  ([x, y] (if (> y (/ 2 (count x)))\n            true\n            (if (= (nth x y) (nth x (dec (- (count x) y))))\n              (recur x (inc y))\n                        false\n            ))\n  ))","user":"5a0a3473e4b0eab8c0448941"},{"problem":27,"code":"(fn [coll]\n  (if (empty? coll)\n    true\n  (let [a (first coll)\n        b (last coll)]\n    (if (= a b)\n      (recur (-> coll (rest) (drop-last)))\n      false))))","user":"548f37c7e4b0e286459a1234"},{"problem":27,"code":"(fn [sequence]\n  (= (seq sequence) (reverse sequence)))","user":"563f4c47e4b08d4f616f5ed2"},{"code":"(fn [s]\n  (if (string? s)\n    (= (apply str (reverse s)) s)\n    (= (reverse s) s)))","problem":27,"user":"4e39fb68535deb9a81d77f47"},{"code":"(fn [l] (= 0 (count (remove true? (map #(= %1 %2) l (reverse l))))))","problem":27,"user":"538c9144e4b0b51d73faae5d"},{"problem":27,"code":"(fn p? [s] (if (string? s) (p? (vec s)) (= s (reverse s))))","user":"561223e5e4b05f002753df8b"},{"problem":27,"code":"(fn [l] (if (= l (if (string? l) (apply str (reverse l)) (reverse l))) true false))","user":"5ef78fdae4b09b61f08553c4"},{"code":"(fn [x]\n  (= (clojure.string/join x)\n     (clojure.string/join (reverse x))))","problem":27,"user":"505aa653e4b021387fb89857"},{"code":"(fn [seq]\n  (loop [seq seq]\n    (cond\n      (<= (count seq) 1) true\n      (= (first seq)\n         (last seq)) (recur (rest (butlast seq)))\n      :else false)))","problem":27,"user":"4fcc6cb3e4b0ee37620e1861"},{"code":"(fn [iterable]\n\t\t(let [seq (seq iterable)]\n\t\t\t(= (reverse seq) seq)\n\t\t)\n\t)","problem":27,"user":"52f31489e4b05e3f0be25f0b"},{"problem":27,"code":"(fn [x] (if (= (apply list x) (reverse x)) true false))","user":"5756efc3e4b02ea1147992e6"},{"problem":27,"code":"#(= % (if (string? %)\n    (reduce str (reverse %))\n    (reverse %)))","user":"57a9eddae4b0b8559636fc5f"},{"code":"(fn [seqq]\n  (loop [x seqq]\n  (if (= (first x) (last x))\n    (if (or (= 1 (count x)) (= 2 (count x)))\n       true\n       (recur (reverse (rest (reverse (rest x))))))\n    false\n    )\n  ))","problem":27,"user":"52bc7ea6e4b07a9af57922f7"},{"problem":27,"code":"(fn [x]\n  (let [len (count x)]\n    (if (or (zero? len) (= 1 len))\n      true\n      (let [f (first x)\n            l (last x)\n            r (butlast (rest x))]\n        (if (not (= f l))\n          false\n          (recur r))))))","user":"55dd7ad1e4b050e68259b3c2"},{"problem":27,"code":"(fn [x] \n  (let [y (into [] x)]\n  \t(= y (reverse y))))","user":"542c2de0e4b0dad94371f29f"},{"problem":27,"code":"(fn [x]\n  (if (instance? String x)\n    (= (apply str (reverse x)) x)\n    (= (reverse x) x)))","user":"55921c21e4b0604b3f94d588"},{"problem":27,"code":"(fn palindrom [ls] (= (seq (reverse ls)) (seq ls)) )","user":"5654e024e4b0f9d632dd848d"},{"problem":27,"code":"(fn [col]\n  (= (seq col)\n     (reverse col)))","user":"563cce5be4b0bfe05bf1183f"},{"problem":27,"code":"(fn palin [xs] (every? true? (map #(= % %2) xs (reverse xs ))))","user":"56fa2905e4b07572ad1a88be"},{"code":"(comp (partial apply =) (juxt reverse seq))","problem":27,"user":"4f6010e7e4b0defedf855fa1"},{"code":"(fn [x] (let [y (seq x)] (= (#(reduce conj '() %) y) y)))","problem":27,"user":"5123cbbae4b061b4c6f0e0b5"},{"code":"(fn [x] (= (reverse x) (vec x)))","problem":27,"user":"5394265ee4b0b51d73faaec6"},{"problem":27,"code":"(fn [list] (= (reverse (seq list)) (seq list)))","user":"58e6e624e4b056aecfd47cc1"},{"problem":27,"code":"(fn [n] (loop [l n]\n          (if (<= (count l) 1)\n            true\n            (if (= (last l) (first l))\n              (recur (drop 1 (reverse (drop 1 (reverse l)))))\n              false))))","user":"550bac80e4b06e50f9beb14a"},{"problem":27,"code":"(fn [input] (let [rev (if (= (type input) java.lang.String) (apply str (reverse input))\n                        (reverse input))]\n              (= rev input)))","user":"56018dd4e4b04bb52996e18f"},{"problem":27,"code":"#(=(clojure.string/join (reverse %)) (clojure.string/join %))","user":"56018b59e4b04bb52996e18c"},{"problem":27,"code":"(fn palindrome? [theList]\n     (let [theListR (reverse theList)]\n       (reduce #(and %1 %2) (map = theList theListR))))","user":"599e3677e4b0871e7608b809"},{"code":"(fn [lst]\n  (let [reversed (reverse lst)]\n    (= lst\n      (if (string? lst)\n        (apply str reversed)\n        reversed))))","problem":27,"user":"4f28c979e4b0d6649770a01a"},{"problem":27,"code":"(fn [x] (= (seq x) (reduce #(cons %2 %1) [] x)))","user":"54e84d1ee4b024c67c0cf822"},{"problem":27,"code":"(fn is-palindrome [x]\n  (if (and\n        (= (last x) (first x))\n        ((comp not empty?) x))\n    (is-palindrome ((comp butlast rest) x))\n    (if (> (count x) 1)\n      false\n      true\n      )))","user":"59e0f38ae4b08badc2a0c500"},{"problem":27,"code":"(fn [word]\n  (if (string? word)\n    (= (apply str (reverse word) word))\n  \t(= (reverse word) word)))","user":"5f05ef21e4b0cf489e8d7f4d"},{"code":"(fn palin[s]\n  (= (map identity s) (reverse s)))","problem":27,"user":"507db411e4b03c76e5499e06"},{"problem":27,"code":"(fn [l]\n  (= (reverse (seq l)) (seq l)))","user":"55be4fa6e4b01b9910ae2a08"},{"code":"(fn palindrome [xs]\n  (= (seq xs) (reverse xs)))","problem":27,"user":"5180c69ae4b06b8caf33fa00"},{"problem":27,"code":";(fn [x] (if (=(first x) (last x)) true false))\n#(= (reverse %)(seq %))","user":"580d7e53e4b0849f6811b73e"},{"problem":27,"code":"(fn check [x] (= (reverse x)(seq x)))","user":"57067a0ee4b0b0fb43fd067e"},{"problem":27,"code":"(fn pCheck [xs] \n   (cond\n     (<= (count xs) 1) true\n     (not= (first xs) (last xs)) false\n     :else (pCheck (drop 1 (take (- (count xs) 1) xs)))\n     )\n   )\n\n;#(= (seq %) (reverse %))","user":"5f6c331ae4b02876ed9fd054"},{"code":"#(=(take (/ (count %) 2) (reverse %)) (take (/ (count %) 2) %))","problem":27,"user":"51000df0e4b00d7ad4cab15f"},{"problem":27,"code":"#(= (if (= (type %) java.lang.String)\n      (clojure.string/join (reverse %))\n      (reverse %)\n      ) %)","user":"5dff8331e4b0a607a9a45d17"},{"code":"(fn [x] (every? #(= (nth x %1) (nth x (dec (- (count x) %1)))) (range 0 (count x))))","problem":27,"user":"50e8ff6be4b0ebbe794eb7f3"},{"code":"(fn palindrome [x]\n  (let [a (seq x)\n        r (reverse a)]\n    (= a r)))","problem":27,"user":"4e4d4841535dc968683fc4e2"},{"code":"(fn [word]\n  (= (seq word) (reverse (seq word))))","problem":27,"user":"4e9528ef535dbda64a6f6b32"},{"code":"#( if (= (vec %) (rseq (vec %))) true false )","problem":27,"user":"4ed845a8535d10e5ff6f52f8"},{"problem":27,"code":"(fn palindrome?\n  [inputseq]\n  (if (= String (class inputseq))\n    (= inputseq (apply str (reverse inputseq)))\n    (= inputseq (reverse inputseq))))","user":"54411506e4b032a45b869369"},{"problem":27,"code":"(fn pali\n  [coll]\n  (loop [tmp coll]\n    (println tmp)\n    (if tmp\n      (if (= (first tmp) (last tmp))\n        (recur (butlast (rest tmp)))\n        false)\n      true)))","user":"601bb40de4b0bf4ca6b1092f"},{"problem":27,"code":"(fn [thing]\n  (if (<= (count thing) 1)\n    true\n    (if (not= (first thing) (last thing))\n      false\n      (recur (rest (drop-last thing))))))","user":"574660d7e4b009280f9f2b62"},{"code":"(fn[x] (= (apply str x) (apply str (reverse x))))","problem":27,"user":"507da5a7e4b03c76e5499e03"},{"code":"(fn palin-test [w] (if (< (count w) 2)\n\ttrue\n\t(if (not= (first w) (last w))\n\t\tfalse\n\t\t(palin-test (butlast (drop 1 w))))))","problem":27,"user":"51d49b75e4b013d740b70de6"},{"code":"(fn [list] (= (reverse list) (reverse (reverse list))))","problem":27,"user":"4fb804f7e4b081705acca2d6"},{"code":"(fn pali [l] \r\n  (if (or (= (count l) 0) (= (count l) 1))\r\n    true\r\n    (if (= (first l) (last l))\r\n      (pali (drop 1 (drop-last l)))\r\n      false)))","problem":27,"user":"4e83b1af535db62dc21a62dc"},{"code":"(fn ispal [x] \r\n  (if (< (count x) 2)\r\n    true\r\n    (if (= (first x) (last x))\r\n      (ispal (rest (reverse (rest x))))\r\n      false)))","problem":27,"user":"4f28eb85e4b0d6649770a01d"},{"code":"(fn [xs]\n  (let [halfSize (count xs)]\n    (loop [xl xs xr (reverse xs) c halfSize]\n      (if (= 0 c) true\n      (if (not= (first xl) (first xr)) false\n      (recur (rest xl) (rest xr) (dec c)))))))","problem":27,"user":"523e12bde4b09833704079a2"},{"code":"(fn [lst]\n  (= (list* lst) (reverse lst)))","problem":27,"user":"52e16139e4b09f7907dd141f"},{"problem":27,"code":"(fn [thing]\n  (= (into [] thing) (reverse thing)))","user":"53a7637de4b047364c044419"},{"problem":27,"code":"(fn [v] (= (map #(str %) v) (reverse (map #(str %) v))))","user":"578e535de4b0ebec4cfb7580"},{"problem":27,"code":"#(let [part-to (quot (count %1) 2)\n       part-one (take part-to %1)\n       m? (not= ((fn [a] (* a 2)) part-to) (count %1))\n       part-two (reverse (drop (if m? (+ 1 part-to) part-to) %1))]\n   (= part-one part-two))","user":"5751aeabe4b02ea11479928a"},{"problem":27,"code":"(fn [param]\n  (if (sequential? param)\n    (= param (reverse param))\n    (= param (apply str (reverse param)))))","user":"54ab1b5ae4b09f271ff37cc2"},{"problem":27,"code":"(fn [x]\n  (loop [l x]\n      (if (empty? l)\n        true\n        (if (= (first l) (last l))\n          (do (println (first l) (last l))\n          (recur (rest (butlast l))))\n          false))))","user":"5a786397e4b013a48d39976c"},{"problem":27,"code":"(fn [i]\n  (= (reverse i) (seq i)))","user":"58f64f71e4b0438e51c2cef0"},{"problem":27,"code":"(fn[x]\n   (if (or (and (string? x) (= x (apply str(reverse x))))\n           (and (not (string? x)) (= x (reverse x)))) true false\n                                                      ) )","user":"5d8a832ce4b0915913b1d3ca"},{"problem":27,"code":"(fn [x]\n   (= (into [] x) (reverse (into [] x))))","user":"5ec825eee4b08d0ec38692e3"},{"problem":27,"code":"#(= (map str %) (reverse (map str %)))","user":"5f51e141e4b0a0bc16850a6a"},{"problem":27,"code":"(fn [col]\n  (reduce #(and %1 %2) true (map #(= %1 %2) col (reverse col))))","user":"5d13af73e4b0902706380dbe"},{"code":"(fn [col]\n  (let [vcol (vec col)\n        rcol (reverse col)]\n    (reduce #(and %1 %2) (map = vcol rcol))))","problem":27,"user":"50ccf729e4b0f7a459302aac"},{"problem":27,"code":"(fn palendrome?\n  [aSeq]\n  (= (seq aSeq) (reverse aSeq))\n  )","user":"5ed81965e4b016b56eae05ed"},{"code":"(fn pal [x] (= (seq x) (reverse (seq x))) )","problem":27,"user":"525cc137e4b0cb4875a45d46"},{"problem":27,"code":"(fn my-palindrome?\n  [l]\n  (cond\n    (empty? l) true\n    (= (first l) (last l)) (my-palindrome? (rest (butlast l)))\n    :else false))","user":"5599abc9e4b031d6649c9bb0"},{"code":"(fn [coll]\n  (loop [i 0 j (dec (count coll))]\n    (if (not= (nth coll i) (nth coll j))\n      false\n      (if (>= i j)\n        true\n        (recur (inc i) (dec j))))))","problem":27,"user":"4e7bc07c535db169f9c796b9"},{"code":"(fn palin [x]\n (= (apply str x) (apply str (reverse x)))\n)","problem":27,"user":"5113e492e4b0029845b11c58"},{"problem":27,"code":"(fn palindrome? [x]\n  (= (seq x)\n     (reverse x)))","user":"546a6c7ce4b00cfc9eacc154"},{"problem":27,"code":"(fn pal [x]\n    (cond (empty? x) true\n          (= (first x) (last x)) (pal ((comp #(drop-last %) #(drop 1 %)) x))\n          :else false))","user":"559067ace4b0277789237670"},{"problem":27,"code":"(fn bizarro-world-machine\n    ([thingy] (bizarro-world-machine thingy thingy '() ))\n    ([thingy orig-thingy reversed-thingy] \n      (if (empty? thingy)\n        (= (apply str reversed-thingy) (apply str orig-thingy))\n        (bizarro-world-machine (rest thingy) orig-thingy (conj reversed-thingy (first thingy)))\n        )\n      )\n    )","user":"5564709ee4b0c656e3ff1807"},{"code":"(fn pali\r\n  ([x]\r\n  (if (< (count x) 2)\r\n    false\r\n    (pali (rest x) (first x) (rest x))\r\n  ))\r\n  ([x y z]\r\n    (if (= (count x) 0) (pali z)\r\n    (if (= (first x) y) true (pali (rest x) y z)))\r\n  )\r\n )","problem":27,"user":"4dd4f0a8535dae65d5c462e4"},{"problem":27,"code":"(fn [x] \n  (loop [my-list x current true]\n    (if (or (empty? my-list) (not current))\n      current\n      (recur (butlast (rest my-list)) (= (first my-list) (last my-list))))))","user":"54051338e4b0addc1aec6662"},{"problem":27,"code":"#(= (apply str (apply conj '() %)) (apply str %))","user":"5c41adfce4b08cd430848ec8"},{"problem":27,"code":"#(let [rev (reverse %)]\n   (= (seq %) rev))","user":"559c4236e4b066d22e731f67"},{"code":"(fn [x] (= (map #((constantly %)) x) (reverse x)))","problem":27,"user":"4ff76effe4b0678c553fc390"},{"problem":27,"code":"(fn p? [s]\n  (= (seq s)\n      (reverse s)))","user":"53b2e953e4b047364c04449e"},{"problem":27,"code":"(fn fun [dataList]\n\t(cond\n     (empty? dataList) true\n     (= (count dataList) 1) true\n     (= (first dataList) (last dataList))\n     \t(recur (take (- (count dataList) 2) (drop 1 dataList)) )\n     :else false\n    )\n)","user":"5da20e73e4b000c986472be1"},{"problem":27,"code":"(fn palindrome? [input] (= (seq input) (reverse input)))","user":"5586f091e4b059ccff29b1dc"},{"problem":27,"code":"(fn [myseq] (loop [currentStatus true tempseq myseq] (if currentStatus (if (< (count tempseq) 2) true (recur (and currentStatus (= (first tempseq) (last tempseq))) (next (drop-last tempseq)))) false)))","user":"5439c3cee4b032a45b869323"},{"problem":27,"code":"(fn hey [x] (if (empty? x) true (and (hey (rest (drop-last x))) (= (first x) (last x)))))","user":"60901a6be4b03bd49d9f36c9"},{"problem":27,"code":"#(let [x (into [] %)] (= (reverse x) x))","user":"4f435ee8e4b0d7d3c9f3fd1f"},{"code":"(fn [s] (= (reverse (reverse s)) (reverse s)))","problem":27,"user":"503b6995e4b07a1917cc34dd"},{"problem":27,"code":";#(reduce (fn [n s] (let [[a, b] s] (and n (= a b)) )) true (map vector % (reverse %)))\n#(= (seq %) (reverse %))","user":"5566463ee4b0c656e3ff1831"},{"code":"#(= (seq %) (-> % seq reverse))","problem":27,"user":"5188c611e4b0bdff0e072d56"},{"problem":27,"code":"(fn isPal? [arr]\n  (if (= 1 (count arr))\n    true\n    (if (= (first arr) (last arr))\n      (if (= 2 (count arr))\n        true\n        (isPal? (-> arr (rest) (drop-last)))\n      )\n      false\n    )\n  )\n)","user":"5bf2cf8be4b0a6d31fed217c"},{"problem":27,"code":"(fn [s]\n  (= s (if (string? s)\n         (apply str (reverse s))\n         (reverse s))))","user":"5766bab8e4b0a07e8fc180b1"},{"problem":27,"code":"#(= (reverse%) (seq %))","user":"57bc9375e4b05aa3c4741c43"},{"problem":27,"code":"#(loop [iterate 0\n          str (seq %)\n          ]\n     (if (> iterate (int (/ (count str) 2)))\n         true\n       (if (= (last str) (first str))\n           (recur (inc iterate) (rest (reverse (rest (reverse str)))))    \n         false\n         )\n       )\n     )","user":"5d5b2678e4b06a698e928ee2"},{"problem":27,"code":"(fn palindrome? [xs] (or (empty? xs) (and (= (first xs) (last xs)) (palindrome? (drop-last (rest xs))))))","user":"54d03026e4b018d918be98de"},{"code":"(fn pal[x] (= (reverse x) (vec x)))","problem":27,"user":"50054b5ce4b0678c553fc45f"},{"problem":27,"code":"(fn [x]\n  (=\n   (loop [cur x acc '()]\n     (if (zero? (count cur))\n       acc\n       (recur (rest cur) (concat acc (list (first cur))))\n     )\n   )\n   (loop [cur x acc '()]\n     (if (zero? (count cur))\n       acc\n       (recur (butlast cur) (concat acc (list (last cur))))\n     )\n   )\n )\n)","user":"5c3f6322e4b08cd430848e97"},{"problem":27,"code":"(fn [x] (if (string? x) \n          (= (clojure.string/reverse x) x)\n          (= (reverse x) x)))","user":"5bf5d3aee4b0bdcf453d159c"},{"code":"(fn palindromedetector [x] (= (seq x) (reverse (seq x))))","problem":27,"user":"5029481ee4b0b33e9bf6fdee"},{"code":"#(let [z (seq %)] (= z (reverse z)))","problem":27,"user":"51473a70e4b0d520409ed394"},{"code":"(fn [s] (if (empty? s)\n          true\n          (if (not (= (first s) (last s)))\n            false\n            (recur (rest (butlast s))))))","problem":27,"user":"4f03193e535dcb61093f6a61"},{"problem":27,"code":"(fn [s] (if (string? s) (= (apply str (reverse s)) s) (= (reverse s) s)))","user":"5e9683f1e4b0157ca96647c7"},{"problem":27,"code":"#(cond\n\t(string? %) (= (clojure.string/reverse %) %)\n\t:else (= (reverse %) %))","user":"5f0dfa48e4b0f30dddfb5d55"},{"code":"(fn palindrome [x](= (vec x) (reverse (vec x))))","problem":27,"user":"533b6f01e4b0e30313ee6cce"},{"problem":27,"code":"(fn [xs]\n  (if (string? xs)\n    (= (clojure.string/reverse xs) xs)\n\t(= (reverse xs) xs)\n))\n\n;;#(= (seq %) (reverse (seq %)))","user":"5c1b82bce4b01240ff567211"},{"code":"#(loop [inseq %] \n     (cond\n     (<= (count inseq) 1)\n       true\n     (not= (first inseq) (last inseq))\n       false\n     :else\n      (recur (butlast (rest inseq)))))","problem":27,"user":"52711255e4b03e8d9a4a73d7"},{"code":"(fn [xs] (let [f (first xs) l (last xs)] (cond (empty? xs) true (= f l) (recur (rest (drop-last xs))) :else false)))","problem":27,"user":"51ca7906e4b08b1cbd0d9487"},{"problem":27,"code":"(fn [coll]\n  (let [c (count coll)\n        h (-> c (/ 2) double int)]\n    (every? true?\n           (for [r (range h)]\n             (= (nth coll r)\n                (nth coll (- c r 1)))))))","user":"5ca3def0e4b048ec896c5bb0"},{"code":"(fn [c] \n  (letfn [(same-elems? [c1 c2] (and (= (first c1) (first c2)) (or (empty? (rest c1)) (same-elems? (rest c1) (rest c2)))))]\n  \n  (same-elems? c (reverse c))) )","problem":27,"user":"536de1c3e4b0fc7073fd6e64"},{"code":"(fn [x]\n  (if (string? x)\n    (= x (clojure.string/join(reverse x)))\n    (= x (reverse x))\n  )\n)","problem":27,"user":"4ea1ecfa535d7eef308072bb"},{"problem":27,"code":"(fn [coll]\n  (let [reverse-coll (reverse coll)\n        n (count coll)]\n    (every? identity \n            (map #(= (nth coll %) (nth reverse-coll %))\n                 (range (/ (dec n) 2)))\n             )))","user":"56430277e4b08d4f616f5f20"},{"code":"(fn palindrome [x] \n  (if (= (count x) 1)\n    true\n    (if (= (count x) 2)\n      (= (first x) (last x))\n      (and (= (first x) (last x)) (palindrome (rest (drop-last x))))\n    )\n  )\n)","problem":27,"user":"504e2f98e4b0f6ff3350c47e"},{"problem":27,"code":"(fn [coll] (let [reversed (if (string? coll) (clojure.string/reverse coll) (reverse coll))]\n  (= coll reversed)))","user":"53e6120de4b036ad0777e46c"},{"problem":27,"code":"#(loop [pal %] \n   (if (< (count pal) 2)\n     true \n     (if (= (first pal) (last pal))\n       (recur (rest (butlast pal)))\n       false)))","user":"5fa96ddbe4b0fa27300f3dec"},{"problem":27,"code":"#(= % (if (string? %)(apply str (rseq (vec %))) (rseq (vec %))))","user":"575d63e9e4b02ea114799382"},{"problem":27,"code":";;(fn [[& s]] (= s (reverse s)))\n#(= (seq %) (reverse %))","user":"57d0cd58e4b0bd073c20235e"},{"problem":27,"code":"(fn [s]\n  (if (string? s)\n    (= s (->> s reverse (map str) (apply str)))\n  \t(= s (reverse s))))","user":"5cbb0436e4b026601754b9cc"},{"problem":27,"code":"(fn [ps] (= (seq (reverse ps)) (seq ps)))","user":"57ed8315e4b0bfb2137f5b9a"},{"code":"(fn f [s] (if (empty? s) true (and (= (first s) (last s)) (f (rest (butlast s))))))","problem":27,"user":"516ed04ee4b06aac486e5b30"},{"problem":27,"code":"#(= (reverse %1) (apply vector %1))","user":"60b8b9dae4b0e0fa5f1b425d"},{"problem":27,"code":"#(let [m (quot (count %) 2)] (= (take m %) (take m (reverse %))))","user":"5485bc1be4b0e286459a11b1"},{"problem":27,"code":"(fn palindrome?\n  [coll]\n  (if (= (reverse coll) coll)\n    true\n    (if (string? coll)\n      (= coll (clojure.string/join (reverse coll)))\n      false)))","user":"5a3c06fce4b001c08efc0cdd"},{"problem":27,"code":"(fn [sequence] \n  (= (seq sequence) (reverse sequence)))","user":"5415d115e4b01498b1a719f7"},{"code":"#(let [s (seq %1)]\n   (= (reverse s) s)\n   )","problem":27,"user":"5298d3f4e4b02ebb4ef75068"},{"problem":27,"code":"(fn [x]\n  (let [xs (seq x)\n        sx (reverse xs)]\n    (= xs sx)))","user":"5b58d012e4b02d533a91bd71"},{"problem":27,"code":"(fn [listy] \n    (loop [l listy k listy]\n        (if (= (count l) 1)\n            true\n            (if (= (compare (first l) (last k)) 0)\n               (recur (rest l) (take (- (count k) 1 ) k)) \n               false))))","user":"5695b86de4b0dcc4269f412b"},{"problem":27,"code":"#(if (coll? %)\n   (= % (reverse %))\n   (= % (apply str (reverse %))))","user":"600d9808e4b074f607df669c"},{"code":"(fn [a-seq]\n           (let [norm-seq (seq a-seq)]\n             (= norm-seq (reverse norm-seq))))","problem":27,"user":"52b6365de4b0c58976d9ad40"},{"problem":27,"code":"(fn [coll] (\n                    loop [ c coll]\n                    (if (or (= 1 (count c)) (= 0 (count c))) true (if (= (first c) (last c))\n                                               (recur (drop-last (drop 1 c)))\n                                               false))))","user":"5d6e5b53e4b04d129b00f2c6"},{"problem":27,"code":"(fn [set]\n    (loop [list set truthy (if (= (first set) (last set)) true false)]\n      (if (or (empty? list) (not truthy))\n        truthy\n        (recur (drop 1 (drop-last 1 list)) (if (= (first list) (last list)) true false))\n        )\n      )\n    )","user":"57aa103be4b0b8559636fc64"},{"code":"(fn [p] (= (reverse p) (reverse (reverse p))))","problem":27,"user":"4e6eff83535d5021c1a89615"},{"code":"(fn [x]\n  (if (empty? x) true\n  (if (= (first x) (last x)) \n    (recur (rest (butlast x))) \n    false)))","problem":27,"user":"50a8a04ae4b0deba384a58b9"},{"problem":27,"code":"(fn is-palindrome\n  ([coll revcoll]\n   (cond (empty? coll) true\n         (not (= (first coll) (first revcoll))) false\n         :else (is-palindrome (next coll) (next revcoll))))\n  ([coll]\n   (is-palindrome coll (reverse coll))))","user":"56822f37e4b0945ebc182a8d"},{"problem":27,"code":"(fn palindrome-detector [coll] \n  (let [sqc (seq coll)]\n    (= sqc (reverse sqc))))","user":"5f012a2ee4b0cf489e8d7f1e"},{"code":"(fn palin [list & n]\n  (if (nil? n)\n      (palin list 0)\n  (if (>= (first n) (count list))\n     true\n    (and (= (nth list (first n)) (nth list (- (count list) (first n) 1)))\n       (palin list (+ (first n) 1))))))","problem":27,"user":"50adcfe6e4b0a40c9cfb08cb"},{"problem":27,"code":"#(if (= ( reverse (vec %)) (vec %) ) true false)","user":"55b9ce15e4b01b9910ae29c1"},{"problem":27,"code":"#(let [a (reverse %) b (reverse (reverse %))]\n   (= a b)\n   )","user":"5820924ee4b04b46fc4b0f58"},{"problem":27,"code":"(fn [s]\n  (cond\n   (empty? s) true\n   (not= (first s) (last s)) false\n   :else (recur (rest (butlast s)))))","user":"56732c84e4b05957ce8c611c"},{"code":"(fn [coll] (loop [s coll]\n             (if (empty? s)\n               true\n               (if (not= (first s) (last s))\n                 false\n                 (recur (#(drop 1 (drop-last %)) s)))\n               )))","problem":27,"user":"512318b6e4b03b44edbed433"},{"problem":27,"code":"#(= (cond (string? %) (apply str (reverse %)) :else (reverse %)) %)","user":"548592a8e4b0e286459a11af"},{"code":"(fn pal [x]\n  (= (seq x) (reverse (seq x))))","problem":27,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"(fn palindrome [coll]\n  (if (not= (class coll) String)\n    (= coll (reverse coll))\n    (= coll (clojure.string/reverse coll))))","problem":27,"user":"53703300e4b0fc7073fd6e90"},{"code":"(fn [s] \n  (=\n   (reverse s)\n   (seq s)\n  ))","problem":27,"user":"50c13f77e4b096f585049c3b"},{"problem":27,"code":"#(let [l      (count %)\n       mid    (Math/floor (/ l 2))\n       splits (split-at mid %)\n       [top tail] [(reverse (first splits))\n                   (if (odd? l)\n                     (rest (second splits))\n                     (second splits))]]\n  (= top tail))","user":"5790329ee4b0ebec4cfb75a7"},{"problem":27,"code":"(fn palindrome\n  [word]\n  (loop [w word]\n    (if (empty? w)\n      true\n      (if (= (first w) (last w))\n        (recur (drop 1 (drop-last w)))\n        false))))","user":"58408643e4b089d5ab817deb"},{"problem":27,"code":"(fn [coll]\n  (let [rc (reverse coll) n (count coll)]\n    (every? identity \n            (map #(= (nth coll %) (nth rc %)) (range (/ (dec n) 2))))))","user":"55cbd29be4b0e31453f64a0a"},{"code":"(fn [x]\r\n  (if (= x ()) true\r\n  (if (not (= (first x) (last x))) false\r\n  (recur (rest (reverse (rest x)))))))","problem":27,"user":"4e73a9dc535dff18050a9c77"},{"problem":27,"code":"(fn foo [x] (if (< (count x) 2) true (if (= (first x) (last x)) (foo (rest (butlast x))) false)))","user":"5f3388ade4b0574c87022c38"},{"problem":27,"code":"(fn find-palandrom\n  [x]\n  (let [[f & rest] x\n        l (last rest)\n        li (butlast rest)\n        c (count li)]\n    (if (= f l)\n      (if (< 1 c)\n        (find-palandrom li)\n        true)\n      false)))","user":"53cf278ce4b00fb29b2212fb"},{"code":"(fn palindrome? [s] (= (last s) (first s)))","problem":27,"user":"50a2cd3be4b048eb8059339d"},{"problem":27,"code":"(fn palindrom [sekv]\n  (cond\n   (= 0 (count sekv)) true\n   :else (if (= (first sekv) (last sekv)) (palindrom (rest (reverse (rest sekv)))) false)))\n\n;;(fn palindrom [sekv]\n;;  (= sekv (reverse sekv)))","user":"584d99c5e4b0b7285a6f4e42"},{"problem":27,"code":"#(let [t (type %)\n       rev'd (reverse %)]\n    (if (= t java.lang.String)\n      (= (apply str rev'd) %)\n      (= rev'd %)))","user":"5aa098fae4b0d174b936c82e"},{"problem":27,"code":"(fn [x] \n  (\n   if(string? x)\n   (= x (clojure.string/reverse x) )\n   (= x (reverse x) )\n   )\n )","user":"548018efe4b0c51c1f4d7335"},{"problem":27,"code":"(fn [x] (reduce (fn [x y] (and x y)) (map #(= %1 %2) x (reverse x))))","user":"5943abb6e4b060784b3b792b"},{"problem":27,"code":";;(fn [coll] (apply (fn [& args] conj (map str (reverse args))) coll))\n(fn [coll] (= (map str coll) (apply (fn [& args] conj (map str (reverse args))) coll)))","user":"5a0c822fe4b04bbd27e6d9b0"},{"code":"(fn [a-seq]\r\n  (loop [x a-seq]\r\n    (cond\r\n      (> 2 (count x)) true\r\n      (not= (first x) (last x)) false\r\n      :else (let [middle (reverse (rest (reverse (rest x))))]\r\n              (recur middle)\r\n    ))))","problem":27,"user":"52ee46e5e4b05e3f0be25ec5"},{"problem":27,"code":"(fn isPalindrome\n  [items]\n  (= (into [] items) (reverse (into [] items)))\n  )","user":"5ac741d6e4b0e27600da777d"},{"problem":27,"code":"(fn [xs]\n  (let [s (seq xs)]\n    (= s (reverse s))))","user":"55da1ebce4b0e31453f64ad2"},{"problem":27,"code":"#(let [i (seq %)]\n   (= i (reverse i)))","user":"5521a5a9e4b0882d96d09197"},{"code":"(fn [lst] \n   (if (= (class lst) java.lang.String)\n     (= lst (.toString (.reverse (StringBuilder. lst))))\n     (= lst (reverse lst))))","problem":27,"user":"5193db52e4b04df54c09802a"},{"problem":27,"code":"(fn [x] (every? #(apply = %1) (map list x (reverse x))))","user":"5710140fe4b09c608db7042e"},{"problem":27,"code":"(fn check [col]\n(if (< (count col) 3)\n  true\n  (if (= (first col)(last col))\n   (check (butlast (rest col)))\n    false\n    )\n  )\n  )","user":"56153b39e4b05f002753dfc4"},{"problem":27,"code":"(fn [x]\n  (if (string? x)\n    (if (= x (clojure.string/join #\"\" (reverse x)))\n      true\n      false\n    )\n   \t(if (= x (reverse x))\n      true\n      false\n    )\n  )\n)","user":"5d62da51e4b0c9e5857d5020"},{"problem":27,"code":"(fn p? [sq] \n  (= (seq sq) (reverse (seq sq))))","user":"5d2e39d8e4b01671435dbcaa"},{"problem":27,"code":"#(= (reverse (reverse %))\n    (reverse %))","user":"607b04e5e4b0a637ed780373"},{"code":"(fn [s] (let [original (seq s)\n              reversed (reverse original)]\n          (= original reversed)))","problem":27,"user":"5302bb37e4b0d8b024fd3734"},{"problem":27,"code":"(fn[pal](not-any?\n         false?\n         (map\n          #(= %1 %2)\n          pal\n          (reverse pal))))","user":"5677f9ffe4b05957ce8c616f"},{"code":"(fn[x] (= (vec x) (reverse (vec x))))","problem":27,"user":"528365e2e4b0239c8a67adb3"},{"code":"(fn palindrome [sq]\n  (or\n    (empty? sq)\n    (and (= (first sq) (last sq))\n      (palindrome (rest (butlast sq))))))","problem":27,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn [x]\n  (let [x (seq x)]\n    (= x (reverse x))))","problem":27,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":27,"code":"(fn [items]\n  (= (seq items)\n     (reverse (seq items))))","user":"4f80a906e4b033992c121bf7"},{"problem":27,"code":"(fn [s]\n    (let [count (count s)\n          half-count (/ count 2)\n          left (take half-count s)\n          right (take-last half-count s)]\n\n      (= left (reverse right))))","user":"547cd90ee4b0c51c1f4d72ec"},{"problem":27,"code":"(fn [lst]\n  (loop [lst lst]\n    (cond\n     (empty? lst) true\n     (= (first lst) (last lst))(recur (butlast (rest lst)))\n     :else false)))","user":"57fedf07e4b0d3187e9009dc"},{"problem":27,"code":"#(= (reverse (seq %)) (seq%))","user":"5e44c804e4b01d43a70e8e89"},{"problem":27,"code":"#(every? true? (map = %  (reverse %)))","user":"55a30e9de4b0acc240e3152f"},{"code":"(fn [x] (\n  = x \n  (\n    if (string? x)\n      (apply str (reverse x))\n      (reverse x)\n  )\n  )\n)","problem":27,"user":"4ee88f29535d93acb0a66882"},{"code":"#(= (take (quot (count %) 2) %) (take (quot (count %) 2) (reverse %)))","problem":27,"user":"4fbe400be4b081705acca30e"},{"code":"(fn [x] \n  (= (seq x) (reverse x)))","problem":27,"user":"4ec42c11535dcc7ae8597d5f"},{"problem":27,"code":"(fn [n]\n  (loop [n n]\n    (if (<= (count n) 1)\n   \t  true\n      (do \n        (if (= (first n) (last n))\n          (recur (rest (nthrest n (- (count n) 1))))\n          false\n        )\n      )\n    )\n  )\n)","user":"58224c53e4b04b46fc4b0f92"},{"problem":27,"code":"(fn [word]\n  (= (apply list word) (reverse word)))","user":"5877a553e4b01531a375eaa5"},{"code":"(fn palindrome [s]\n  (if (< (count s) 2)\n       true\n      (if (not= (first s) (last s))\n           false\n           (recur (butlast (rest s))))\n  )\n)","problem":27,"user":"52ac41fee4b0c58976d9ac85"},{"code":"(fn palindrome? [s] (if (empty? s) true (and (= (first s) (last s)) (palindrome? (rest (take (- (count s) 1) s))))))","problem":27,"user":"4e72430c535d5021c1a8965d"},{"code":"(fn palidrome? [x]\n  (if (< (count x) 3)\n    true\n    (and\n      (= (first x) (last x))\n      (palidrome? (rest (drop-last x))))))","problem":27,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":27,"code":"(fn palind\n  ([cnt] (palind cnt (reverse cnt)))\n  ([cnt rev] (cond  (empty? cnt) true (= (first cnt) (first rev)) (palind (rest cnt) (rest rev)) :else false ) ))","user":"58dd2c02e4b0a4d5acaab6b8"},{"problem":27,"code":"(fn [x]\n  (if (not= (first x) (last x))\n    false\n    (let [xx (butlast (rest x))]\n      (if (empty? xx)\n        true\n        (recur xx)))))","user":"508f4343e4b0ea685a20f767"},{"problem":27,"code":"#(if (string? %) (= (reverse %) (map char %))\n   (= (reverse %) %))","user":"5605b5e9e4b08b23635d316e"},{"problem":27,"code":"(fn pal [s]\n(if (< (count s) 2)\ntrue\n(and (= (first s) (last s)) (pal (rest (butlast (vec s)))))))","user":"57e20474e4b0bfb2137f5a82"},{"problem":27,"code":"(fn [coll]\n  (let [rc (reverse coll)]\n    (= (seq coll) rc)))","user":"5e23d513e4b05b4b01516145"},{"problem":27,"code":"(fn f [xs]\n  (if (<= (count xs) 1)\n    true\n    (if (= (first xs) (last xs))\n      (f (drop 1 (drop-last 1 xs)))\n      false)))","user":"56483562e4b0284900eef629"},{"code":"(fn f [x] (if(= (first x) (last x)) true false))","problem":27,"user":"511a98d7e4b0c87c59c96707"},{"code":"(fn [s] (\n     (fn [x] (= x (reverse x)))\n     (into [] s)\n  ))","problem":27,"user":"52e68c90e4b09f7907dd1478"},{"code":"#(let [x %] (if (= (reverse x) (reverse (reverse x))) true false))","problem":27,"user":"4e25bd69535d04ed9115e82c"},{"code":"(fn [n]\r\n   (let [n1 (reverse n)]\r\n  (every? identity (map = n n1))\r\n   ))","problem":27,"user":"4ff5a42ae4b0678c553fc36c"},{"problem":27,"code":"(fn pal [seq]\n(if (<= (count seq) 1) true\n(if (not= (first seq) (last seq)) false\n(recur (butlast (rest seq)))\n)))","user":"54c74a78e4b045293a27f637"},{"problem":27,"code":"(fn [s] \n  (= (seq s) (into '() s)))","user":"54c6a59ce4b045293a27f62e"},{"problem":27,"code":";;#(= (reverse (seq %)) (seq %))\n#(= (-> % seq reverse) (seq %))","user":"59e5b6a1e4b08badc2a0c55b"},{"problem":27,"code":"(fn [x] (= x (cond (string? x) (clojure.string/reverse x) :else (reverse x))))","user":"5635adeee4b0bfe05bf117c7"},{"problem":27,"code":"(fn [coll] (if\n            (= (reverse coll) (seq coll)) true false))","user":"56182af3e4b06b1bb2182a1b"},{"code":"#(= (reverse %) (drop 0 %))","problem":27,"user":"4f039bbe535dcb61093f6b39"},{"problem":27,"code":"(fn [xs]\n  (let [len (count xs)\n        to-take (if (even? len) (/ len 2) (/ (- len 1) 2))\n        [front remaining] (split-at to-take xs)\n        back (take to-take (reverse remaining))]\n    (= front back)))","user":"5d217b1de4b02ea6f0fb69e6"},{"code":"(fn [seq] (if (= (apply str seq) (apply str (reverse seq))) true false))","problem":27,"user":"4efd98fa535de96065cf5086"},{"problem":27,"code":"#(= ( vec %) ( vec (reverse %))\n  \n )","user":"54972b0ee4b0b312c081ff6e"},{"problem":27,"code":"#(= % (cond\n         (string? %) (reduce str (reverse %))\n         :else (reverse %)))","user":"5b6ccc58e4b0c6492753e7bb"},{"problem":27,"code":"(fn [x] (or (= x (reverse x)) (= x (apply str (reverse x)))))","user":"5258d2abe4b0cb4875a45cc1"},{"code":"(fn [i] (let [r (reverse i)] (if (= r (seq i)) true false)))","problem":27,"user":"4f13573a535d64f60314642e"},{"problem":27,"code":"(fn palindrome?\n  [x]\n  (let [a (seq x)\n        b (reverse x)]\n    (= a b)))","user":"5d110abee4b02c15ef021983"},{"code":"(fn [seqn]\n  (let [seqn (vec seqn)]\n    (every? #(= (nth seqn %) (nth seqn (- (count seqn) 1 %))) (range 0 (/ (count seqn) 2)))))","problem":27,"user":"53889587e4b0640c7a9a589e"},{"code":"(fn f [x]\n   (if (or (= 0 (count x)) (= 1 (count x)))\n     true\n     (and (= (first x) (last x))\n          (f (rest (butlast x))))))","problem":27,"user":"4ed578d1535d10e5ff6f52d9"},{"problem":27,"code":"(fn isPalindrome [sq]\n  (= (apply str sq) (apply str (reverse sq))))","user":"5d73fb31e4b02e6b30c93516"},{"code":"(fn palin [strs]\n    (cond (= 0 (count strs)) true\n          (= 1 (count strs)) true\n          (not (= (first strs)\n                  (last strs))) false\n          true (palin (butlast (rest strs)))))","problem":27,"user":"4ea01955535d7eef3080729f"},{"problem":27,"code":"(fn [s]\n  ((fn [a b]\n    (if (= a '())\n      true\n      (if (= (first a) (first b))\n        (recur (rest a) (rest b))\n        false))) s (reverse s)))","user":"570708fce4b0b0fb43fd0687"},{"code":"(fn [l] \n   (loop [x l]\n     (cond\n       (<= (count x) 1) true\n       (= (first x) (last x)) (recur (rest (butlast x)))\n       :else false)))","problem":27,"user":"535376a7e4b084c2834f4b01"},{"code":"#(= (reduce str %) (reduce str (reverse %)))","problem":27,"user":"4f0f1599535d0136e6c2232f"},{"problem":27,"code":"(fn f [x] (if (<= (count x) 1) true (if (not= (first x) (last x)) false (f (take (- (count x) 2) (rest x))))))","user":"5595071ae4b0c79f6e1db95d"},{"code":"(fn [x] (= (clojure.string/join x) (clojure.string/join (reverse x))))","problem":27,"user":"5133e51ae4b0d7a043de8cf6"},{"code":"(fn [coll]\r\n  (loop [i 0 j (dec (count coll))]\r\n    (if (not= (nth coll i) (nth coll j))\r\n      false\r\n      (if (>= i j)\r\n        true\r\n        (recur (inc i) (dec j))))))","problem":27,"user":"4ee17ecc535d10e5ff6f535a"},{"problem":27,"code":"(fn pal [x]\t\t\n\t       (if (> 1 (count x))\n\t\t true \n\t\t (and \n\t\t  (pal (rest (butlast x)))\n\t\t  (= (first x) (last x)))))","user":"54fae43ae4b0cf870d934708"},{"code":"(fn [s] \n  (= (seq s)\n     (reverse s)))","problem":27,"user":"52976262e4b02ebb4ef75041"},{"problem":27,"code":"(fn p? [[h & t]]\n  (if (= 0 (count t))\n    true\n    (and (= h (last t))\n         (p? (butlast t)))))","user":"5594721de4b0c79f6e1db955"},{"problem":27,"code":"#(loop [s %]\n  (if (not= (first s) (last s))\n    false\n    (if (> (count s) 3)\n      (recur (take (- (count s) 2) (rest s)))\n      true)))","user":"502ea967e4b06efe12e8cc76"},{"code":"(fn [list]\n  (=\n   (apply str (reverse list))\n   (apply str list)\n   )\n  )","problem":27,"user":"50d14cfde4b05a71a896ef55"},{"problem":27,"code":"(fn [sequ] (= (seq sequ) (reverse (seq sequ))))","user":"595041e8e4b066ee0a44ae90"},{"problem":27,"code":"(fn [x] \n  (loop [r (reverse x)\n         xx x]\n    (if (empty? (rest xx)) (= (first r) (first xx))\n    (if (not (= (first r) (first xx))) false\n                                       (recur (rest r) (rest xx))))))","user":"503c90aae4b06c4e0e1fa24b"},{"problem":27,"code":"(fn [x]\n  ((fn pal [f b]\n     (if (not-empty f)\n       (if (not-empty b)\n         (if (= (first f) (last b))\n           (pal (rest f) (drop-last b))\n           false)\n         false)\n       (empty? b))) (seq x) (seq x)))","user":"57716e11e4b0979f896515b2"},{"problem":27,"code":"(fn [input] (loop [in input] (if (< (count in) 2) true (if (= (first in) (last in)) (recur (drop 1 (drop-last 1 in))) false))))","user":"5460832ce4b01be26fd74693"},{"code":"(fn[x]\n   (= (reverse (reverse x)) (reverse x)))","problem":27,"user":"506c0a02e4b0eda3100c090d"},{"problem":27,"code":"(fn isPalindrome [coll] (= (seq coll) (reverse coll)))","user":"578bbd3ee4b0ebec4cfb754e"},{"problem":27,"code":"(fn palindrome? [s] \n    (if (string? s)\n        (= s (clojure.string/reverse s)) \n        (= s (reverse s) )\n    )   \n)","user":"564633a1e4b0284900eef60f"},{"problem":27,"code":"#(let [cnt (int (/ (count %) 2))] (= (take cnt %) (reverse (take-last cnt %)) ))","user":"59d631d4e4b0ef0a1e9b5c09"},{"code":"(fn pal [lst] \n    (cond (<= (count lst) 1) true \n        (= (first lst) (last lst)) (pal (rest (reverse (rest lst)))) \n        true false)\n)","problem":27,"user":"52c17e42e4b07a9af5792367"},{"problem":27,"code":"(fn pal? [seq]\n  (if (< (count seq) 2)\n    true\n    (let [a (first seq)\n          z (last seq)\n          mid (-> seq rest butlast)]\n      (and (= a z) (pal? mid)))))","user":"5e60a0cae4b0fd0acd158689"},{"problem":27,"code":"(fn pal? [xs]\n      (if (< (count xs) 2)\n        true\n        (if ((fn [ys] (= (first ys) (last ys))) xs)\n          (pal? (butlast (rest xs)))\n          false \n          )))","user":"5562bd71e4b0c656e3ff17dc"},{"code":"(fn [arg]\n  (= (first arg) (last arg)))","problem":27,"user":"4fea1f9ee4b0547ebccb248b"},{"problem":27,"code":"(fn [x] \n  (= (reverse (reverse x)) (reverse x) )\n  )","user":"560d4994e4b05f002753df3c"},{"problem":27,"code":"(fn palindrome? [x]\n  (if (string? x) (= x (apply str (reverse x)))\n\t(= x (reverse x))))","user":"5aefedc0e4b0cc2b61a3bc42"},{"problem":27,"code":"#(not= (count (into #{} %)) (count %))","user":"565fad48e4b068f2fe63dc43"},{"code":"#(= (reverse (seq %1)) (seq %1))","problem":27,"user":"4f9f9ff5e4b0dcca54ed6d3a"},{"problem":27,"code":"(fn [seqOrStr] \n  (if (string? seqOrStr)\n    (= seqOrStr (apply str (reverse seqOrStr)))\n    (= seqOrStr (reverse seqOrStr)))\n )","user":"55cfdfc9e4b0e31453f64a35"},{"code":"(fn [coll]\n   (loop [n 0]\n     (if (> n (- (count coll) 1 n))\n       true\n       (if (= (nth coll n) (nth coll (- (count coll) n 1)))\n         (recur (inc n))\n         false))))","problem":27,"user":"51ea4e35e4b0f1f103a0d148"},{"problem":27,"code":"(fn foo [s]\n  (if (empty? s)\n    true\n    (let [[x & xs] s]\n      (if-not xs\n        true\n        (let [[ys y] [(butlast xs) (last xs)]]\n          (and (= x y) (foo ys)))))))","user":"600ae927e4b074f607df6689"},{"problem":27,"code":"(fn [x]\n   (let [y          (reduce\n                     #(conj %1 %2)\n                     ()\n                     x\n                     )\n         z        (reduce\n                   #(conj %1 %2)\n                   []\n                   x\n                   )]\n     (= z y))\n   )","user":"5f949b97e4b0715f5002d7c1"},{"problem":27,"code":"; I think the Unit Test could be improved :)\n(fn [n] ( = ( first n ) ( last n )))","user":"53a5c7ffe4b0ef122a8689c4"},{"code":"(fn [ss]\n  (loop [s ss]\n    (cond \n      (= s '()) true\n(= (first s) (last s)) (recur (rest (reverse (rest s))))\n:else false)))","problem":27,"user":"4f287f96e4b0d6649770a018"},{"code":"(fn palindromi [c] (if (empty? c) true (and (= (first c) (last c)) (palindromi (rest (butlast c))))))","problem":27,"user":"52474ec2e4b05ef8e38e6361"},{"problem":27,"code":"(fn palin [in]\n (= \n  (seq in)\n  (reverse (seq in))))","user":"510608ebe4b01150e115ebe3"},{"problem":27,"code":"(fn pal [xs] (if (< (count xs) 2) true (and (= (first xs) (last xs)) (pal (take (- (count xs) 2) (drop 1 xs))))))","user":"60067b71e4b074f607df6655"},{"code":"(fn palin? [xs]\n  (cond (empty? xs) true\n        (= (count xs) 1) true\n        (= (first xs) (last xs)) (palin? (-> xs (rest) (reverse) (rest) (reverse)))\n        :else false))","problem":27,"user":"532b9075e4b09d4e7a9b5533"},{"code":"(fn palyndrome? [x]\n  ((fn reversable [s]\n     (if (or (empty? s) (= (count s) 1))\n       true\n       (if (= (first s) (last s))\n         (reversable (butlast (rest s)))\n         false))) (seq x)))","problem":27,"user":"522048b3e4b0e6c71e0c0c16"},{"code":"(fn [s]\n    (let [h (-> s count (/ 2) int)]\n\t\t(= (take-last h s) (reverse (take h s)))\n    )\n)","problem":27,"user":"503f872ee4b00d1a725ff2ac"},{"problem":27,"code":"#(let [xs (for [x %] x)] (= xs (reverse xs)))","user":"54d753ebe4b0a52adc2e2029"},{"problem":27,"code":"(fn [s]\n  (loop [ss s]\n    (if (< (count ss) 2)\n      true\n      (and (= (first ss) (last ss))\n           (recur (butlast (rest ss)))))))","user":"5d3ae729e4b01671435dbd5d"},{"code":"#(cond (nil? %1) true\n       (nil? (next %1)) true\n       (false? (= (first %1) (last %1))) false\n       :else (recur (rest (butlast %1))))","problem":27,"user":"5183f5d7e4b02826a645f393"},{"problem":27,"code":"(fn [c] (every? true? (map = c (reverse c))))","user":"5d1b2b7de4b02ea6f0fb697a"},{"code":"(fn [word]\n  (= (seq word) (seq (reverse word))))","problem":27,"user":"527c166de4b03e8d9a4a75b3"},{"code":"(fn [as]\n  (= (seq as) (reverse (seq as))))","problem":27,"user":"51b3b22ce4b0f094dd986fa7"},{"code":"(fn [x] (= x (if (= java.lang.String (type x)) (apply str (reverse x)) (reverse x))))","problem":27,"user":"4fcb5d1fe4b0ee37620e1858"},{"code":"(fn [pal] (= (seq pal) (reverse pal)))","problem":27,"user":"4fe8a3bde4b07c9f6fd12c61"},{"problem":27,"code":"(fn[a] (= (apply str (reverse a)) (apply str a)))","user":"5e4375e7e4b01d43a70e8e73"},{"code":"#(loop [coll %1] (if (< (count coll) 2) true (if (= (first coll) (last coll)) (recur (drop-last (rest coll))) false)))","problem":27,"user":"50e8cac5e4b0ebbe794eb7ef"},{"problem":27,"code":"(fn pali? [coll]\n  (cond\n    (<= (count coll) 1) true\n    (= (first coll) (last coll)) (pali? (->> coll (drop 1) (drop-last 1)))\n    :else false))","user":"58ebd10de4b056aecfd47d49"},{"problem":27,"code":";; To handle the hint, you must cast the argument into a vector\n#(= (into [] %) (reverse %))","user":"5d0eda66e4b0cc9c9158825f"},{"problem":27,"code":"(fn palindrome [elts]\n  (if (= (vec elts) (reverse elts)) true false))","user":"60aecd73e4b00e9e6653c49a"},{"problem":27,"code":"#(= (reverse %) (seq  %))","user":"560ee566e4b05f002753df57"},{"problem":27,"code":"#(= (if-not (= (type %) (type \"aa\")) \n       (reverse %) \n       (clojure.string/reverse %) \n       ) \n     %\n  \n  )","user":"5885e90de4b0f1effa3b76c5"},{"problem":27,"code":"#(loop [seq %, seqa [], seqb '()]\n   (let [f (first seq)]\n     (if (nil? f)\n       (= seqa seqb)\n       (recur (rest seq) (conj seqa f) (conj seqb f)))))","user":"540c8f3fe4b0addc1aec6705"},{"problem":27,"code":"(fn pal? [xs] (cond\n  (< (count xs) 2) true\n  (not= (first xs) (last xs) ) false\n  :else (recur \n         (  (comp (partial drop 1) drop-last)  xs )             \n)))","user":"54e51c7be4b024c67c0cf7f7"},{"problem":27,"code":"(fn palindrome? [seq]\n  (if (>= 1 (count seq))\n    true\n    (and (= (first seq) (last seq))\n         (palindrome? (rest (butlast seq))))))","user":"54bd9a60e4b0ed20f4ff6ee3"},{"code":"(fn detect-palindrome [coll]\n  (cond\n    (empty? coll) true\n    (= 1 (count coll)) true\n    :else\n      (let [fl (first coll)\n            ll (last coll)\n            newColl (-> (rest coll) reverse rest reverse)]\n        (if (= fl ll)\n          (recur newColl)\n          false)\n        )\n    ))","problem":27,"user":"4f038ed6535dcb61093f6b24"},{"code":"(fn [s]\n  (if (< (count s) 2)\n    true\n    (if (= (first s) (last s))\n      (recur (drop 1 (take (- (count s) 1) s)))\n      false)))","problem":27,"user":"4f39c08ae4b0e243712b1efb"},{"problem":27,"code":"(fn [x] \n  (if (<= (count x) 1)\n    true\n    (if (= (first x) (last x))\n      (recur (drop-last (rest x)))\n      false)))","user":"57c4e8dce4b05aa3c4741cd7"},{"problem":27,"code":"(fn [x] ((fn iter [x] (\n                       if (< (count x) 2)\n                       true\n                       (if (not= (first x) (last x))\n                         false\n                         (iter (rest (butlast x))))\n)) x))","user":"5f341a4be4b0574c87022c3d"},{"code":"(fn ck [xs]\n  (println xs (count xs))\n  (if (> 2 (count xs))\n    true\n    (if (not= (first xs) (last xs))\n      false\n      (ck (drop 1 (drop-last xs))))))","problem":27,"user":"52387f46e4b0fae3832e9a07"},{"code":"(fn [x]\n  (or (empty? x)\n      (and (= (first x) (first (reverse x)))\n           (recur (rest (reverse (rest x)))))))","problem":27,"user":"50119c07e4b028e9d38b393f"},{"problem":27,"code":"#(= (into () (into [] %)) (into [] %))","user":"5797d3d2e4b039eba2ecb106"},{"problem":27,"code":"(fn [x]\n  (= (reverse x)\n     (seq x))\n  )","user":"58bf1cf8e4b021aa9917eccf"},{"code":"#(= (reverse (into () %))  (into () %))","problem":27,"user":"4e78dc98535db95036265724"},{"problem":27,"code":"(fn [coll]\n  (loop [x 0\n         y (dec (count coll))\n         pal []]\n       (if (< y x)\n           (not (some (complement identity) pal))\n           (recur (inc x) (dec y) \n                  (conj pal (= (nth coll x) (nth coll y)))))))","user":"58fc52cee4b0438e51c2cf95"},{"code":"(fn palindrome [sequence]\n  (cond\n    (< (count sequence) 2) true\n    :else\n      (and\n        (= (first sequence) (last sequence))\n        (palindrome (rest (butlast sequence)))\n      )\n  )\n)","problem":27,"user":"537d9b39e4b06839e8705e8f"},{"problem":27,"code":"(fn [coll]\n  (letfn [(dropHeadAndLast [coll]\n            (->> coll\n                 (drop 1)\n                 (drop-last)\n                 (vec)))\n          (dropMatchingHeadsAndTails [coll]\n            (let [[head] coll\n                  last (last coll)\n                  collLength (count coll)]\n              (if (or (= collLength 1) (= collLength 0) (not (= head last)))\n                coll\n                (dropMatchingHeadsAndTails (dropHeadAndLast coll)))))]\n    (let [droppedExtremities (dropMatchingHeadsAndTails coll)]\n    (or (= (count droppedExtremities) 1) (= (count droppedExtremities) 0)))))","user":"55c5bdffe4b0e31453f649b6"},{"problem":27,"code":"(fn palindrome? [thing]\n  (= (seq thing) (reverse thing)))","user":"4ff0e01fe4b0678c553fc328"},{"problem":27,"code":"(fn [l] \n  (= (seq l) (reverse l))\n  )","user":"563747e9e4b0bfe05bf117d2"},{"problem":27,"code":"(fn [txt] (= (reverse txt) (seq txt)))","user":"5371db16e4b0493c815db702"},{"problem":27,"code":"#(let [in (vec %)] \n    (= in (reverse in)))","user":"57d174ede4b0bd073c20236c"},{"code":"(fn pal [coll]\n   (not (= (distinct coll) coll)))","problem":27,"user":"50255bafe4b0b0b8afb15aa8"},{"problem":27,"code":"(fn\n  [sequence]\n  (if (not= (first sequence) (last sequence))\n    (do false)\n    (if (< (count sequence) 1)\n      (do true)\n      (recur (drop 1 (butlast sequence))))))","user":"5d9c8a85e4b0eb781811cdad"},{"problem":27,"code":"(fn [x]\n(= (seq x) (reverse x)))","user":"53065acbe4b02e8216869792"},{"problem":27,"code":"#(loop [left %]\n   (if (> (count left) 1)\n     (if (= (first left) (last left))\n       (recur (butlast (rest left)))\n       false)\n     true))","user":"5f3ce2c7e4b004f08c61c548"},{"code":"#(= (into [] %) (reverse %))","problem":27,"user":"4e498df9535dc968683fc4c4"},{"problem":27,"code":"(fn [l] (every? identity (map #(apply = %) (partition 2 (interleave l (reverse l))))))","user":"5a2b7f4ee4b09cafd31c7f4a"},{"code":"(fn [sequence]\n  (loop [start 0\n         end (- (count sequence) 1)]\n    (if (>= start end)\n      true\n      (if (not (= (nth sequence start) (nth sequence end)))\n        false\n        (recur (inc start) (dec end))\n      )\n    )\n  )\n)","problem":27,"user":"53a36fd7e4b0f1fc74538834"},{"problem":27,"code":"(fn [string] (= (seq string) (seq (reverse string))))","user":"561a9e3be4b053970a773b09"},{"problem":27,"code":"#(= (take (/ (count %) 2) %)\n    (reverse (take-last (/ (count %) 2) %)))","user":"53ebd5fee4b036ad0777e4fd"},{"problem":27,"code":"(fn is-palindrome [string]\n  (let [[left & middle-and-right] string\n        [right & middle] (reverse middle-and-right)]\n    (if (= nil middle)\n      true\n      (if (= left right)\n      \t(is-palindrome middle)\n        false\n        ))))","user":"5bb17123e4b0a20761a234fd"},{"problem":27,"code":"(fn [subj] (= (reverse subj) (seq subj)))","user":"4fdb0c0ae4b05e33b9224f57"},{"problem":27,"code":"(fn [coll]\n  (cond\n    (< (count coll) 2)\n    true\n    (not= (first coll) (last coll))\n    false\n    :else\n    (recur (take (- (count coll) 2) (rest coll)))))","user":"5512cd55e4b055c2f668d4ba"},{"code":"(fn [xs] (= (vec xs) (reverse (vec xs))))","problem":27,"user":"4e51c67a535d302ef430da6a"},{"code":"(fn [a]\n  (= (seq a) (reverse a)))","problem":27,"user":"4f859146e4b033992c121c46"},{"problem":27,"code":"(fn[lst](every? true?(map = (reverse lst) lst)))","user":"5a6dbaf5e4b0512ff01cda63"},{"problem":27,"code":"(fn [se] (= (seq se) (reverse se)))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":27,"code":"(fn [s]\n    (let [orig-len (count s)\n          half-len (quot orig-len 2)\n          split' (fn [s i first-half]\n                   (if (< (count first-half) half-len)\n                     (recur (next s) (inc i) (conj first-half (first s)))\n                     [first-half\n                      (if (odd? orig-len) (next s) s)]))\n          [half1 half2] (split' s 0 [])]\n      (= half1 (reverse half2))))","user":"55ac07afe4b03311e7b7328f"},{"problem":27,"code":"(fn [x]\n   (loop [i (dec (count x))\n          last true]\n     (if (and (> i -1) (true? last))\n       (recur (dec i) (= (nth x i) (nth x (- (dec (count x)) i))) )\n       (identity last)\n     )\n   )\n)","user":"588b4bd0e4b05c141a25607a"},{"problem":27,"code":"(fn pal [l]  \n  (if (= '() l)\n    true\n    (if (string? l)\n      true\n      (and\n       (= (first l) (last l))\n       (pal (rest (butlast l)))))))","user":"55e4487ce4b050e68259b44c"},{"code":"(fn [x] \n  (let [n (into [] x)]\n    (= (reverse n) n)))","problem":27,"user":"5289f1f4e4b0239c8a67ae6d"},{"problem":27,"code":"(fn [l]\n  (let [xs (seq l)\n        sx (reverse xs)]\n    (= xs sx)))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":27,"code":"(fn [v] do (prn (vec v))(= (reverse (vec v)) (vec v) ))","user":"5577318ce4b05c286339e07c"},{"problem":27,"code":"(fn [coll]\n  (if (< (count coll) 3)\n    (= (first coll) (last coll))\n    (if (not= (first coll) (last coll))\n      false\n      (recur (rest (butlast coll))))))","user":"58a72bafe4b01a0c0b23293d"},{"problem":27,"code":"(fn [list]\n  (= (seq list) (reverse list))\n  )","user":"5a429e40e4b0447ef91cc5f9"},{"code":"(fn [x]\n  (loop [l x]\n    (if (or (= (count l) 0) (= (count l) 1))\n      true\n      (if (= (first x) (last x))\n        (recur (rest (butlast l)))\n        false\n      )\n    )\n  )\n)","problem":27,"user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn [xs]\n  (= (reverse (reverse xs)) (reverse xs)))","problem":27,"user":"5052ab7ee4b0a561d07d8f20"},{"code":";; tricky tricky. At first I was gonna compare each element one by one, but then I realized that\n;; I just needed to compare the actual sequence to its reversal. \n\n#(= (seq %) (reverse %))","problem":27,"user":"50955676e4b087f34d351ab1"},{"problem":27,"code":"; better solution: #(= (seq %) (reverse (seq %))) ... not sure what i was thinking here originally\n;(fn [x] (if (string? x) (= (apply str (vec (reverse x))) x)(= (into [] (reduce conj () x)) x)))\n(fn [x] (= (seq x) (reverse (seq x))))","user":"58eed4c5e4b056aecfd47db7"},{"problem":27,"code":"#(if (= (type %) java.lang.String)\n      (= % (clojure.string/join (reverse %)))\n      (= % (reverse %)))","user":"59a39440e4b066c664927d40"},{"problem":27,"code":"#(= (reverse (take-last (/ (count %) 2) %)) (take (/ (count %) 2) %))","user":"5f1a0ca2e4b091ba50b4dbe0"},{"problem":27,"code":"(fn palindrome [x]\n  (loop [a x inv (reverse x)]\n    (if (not= (first a) (first inv))\n      false\n      (if (<= (count a) 1)\n        true\n        (recur (rest a) (rest inv)))\n      )\n    )\n  )","user":"5af39788e4b0cc2b61a3bc8a"},{"problem":27,"code":"(fn pal [x] (= (seq x) (reverse x)))","user":"5bfa25fbe4b0bdcf453d15c8"},{"code":"#(= % (if (string? %) (clojure.string/reverse %) (reverse %)))","problem":27,"user":"4f651f66e4b07046d9f4ef3c"},{"code":"(fn [xs]\n  (let [n (quot (count xs) 2)\n        l (take n xs)\n        r (reverse (take-last n xs))]\n    (= l r)))","problem":27,"user":"522b922ee4b0d34ee08e71c3"},{"code":"(fn[x](if(contains? #{55 114 111 49} (int (last (str (last x)))) ) true false)   )","problem":27,"user":"5302d79ce4b0d8b024fd3736"},{"problem":27,"code":"#(= (seq %) (reduce (fn [l x] (conj l x)) '() (seq %)))","user":"549def9ce4b0f3d1d8e70f99"},{"code":"(fn palindrome? [s]\n  (if (or (empty? s)\n          (= (count s) 1))\n    true\n    (if (= (first s)\n           (last s))\n      (palindrome? (drop-last (rest s)))\n      false)))","problem":27,"user":"525947f1e4b0cb4875a45cd8"},{"code":"(fn pa [se]\n (= (seq se) (reverse se))  \n)","problem":27,"user":"51dc0ed1e4b09c47a74ce105"},{"problem":27,"code":"; #(= (reverse %) (seq %))\n\n(fn [coll]\n  (loop [s coll]\n    (if (empty? s)\n      true\n      (if (not= (first s) (last s))\n        false\n        (recur (drop-last (rest s)))))))","user":"57e37f90e4b0bfb2137f5a9c"},{"code":"(fn [x] (reduce (fn [a b] (and a b)) (map (fn [y] (= (nth x y) (nth x (- (count x) y 1)))) (range (/ (count x) 2)))))","problem":27,"user":"4f946be7e4b0dcca54ed6cc3"},{"problem":27,"code":"(fn [x] (= x (if (string? x) (clojure.string/join (reverse x)) (reverse x))))","user":"59078134e4b047aa04b1995c"},{"problem":27,"code":"(fn palindrome [s] \n   (= (into () (into () s)) (into () s) )                                                               \n  )","user":"5dbd86bce4b09f47823971bf"},{"code":"#(= % ((if (string? %) clojure.string/reverse reverse) %))","problem":27,"user":"502aaadee4b0614b52996117"},{"problem":27,"code":"(fn awesome [lst]\n  (if (string? lst)\n    (= lst (apply str (reverse lst)))\n    (= lst (reverse lst))))","user":"59e0111ae4b08badc2a0c4e4"},{"problem":27,"code":"(fn palindrome [coll] (= (seq coll) (reverse coll)))","user":"560aa7b0e4b05f002753df02"},{"problem":27,"code":"(fn [lst]\n   (loop [l lst] (print l) (cond\n                             (< (count l) 2) true\n                             (= (first l) (last l)) (recur (rest (reverse (rest l))))\n                             :else false\n\n                             )))","user":"604ccb9fe4b0b7ec0ac60ac1"},{"code":"(fn pal\n  ([s]\n   (let [r (reverse s) fs (first s) fr (first r) rs (rest s) rr (rest r)]\n   \t(pal fs fr rs rr)))\n  ([fs fr rs rr]\n  \t(and (= fs fr)\n      (or (nil? fs)\n        (pal (first rs) (first rr) (rest rs) (rest rr))))))","problem":27,"user":"50e9d21ce4b02d54280826cf"},{"code":"(fn [s]\n  (if (> (count s) 1)\n    (if (= (first s) (last s))\n      (recur (drop 1 (drop-last 1 s)))\n      (= 0 1))\n    (= 1 1)))","problem":27,"user":"4f70183ee4b07046d9f4eff3"},{"code":";(fn [x]\r\n;  (loop [x x\r\n;         revx (reverse x)]\r\n;    (cond\r\n;      (empty? x) true\r\n;      (= (first x) (first revx)) (recur (rest x) (rest revx))\r\n;      :else false)))\r\n\r\n#(= (reverse %) (seq %))","problem":27,"user":"4f07c8c3535dcb61093f6c2d"},{"problem":27,"code":"(fn [collection] (= (seq collection) (reduce conj () collection)))","user":"574ed2f7e4b02ea11479924a"},{"code":"(fn [x] (every? true? (map = x  (reverse x))))","problem":27,"user":"4fe9ef2fe4b0547ebccb2479"},{"code":"(fn palindrome? [l]\n;  (= (reverse (reverse l)) (reverse l))\n  (every?\n   (fn [n] (= (nth l n) (nth l (- (- (count l) 1) n))))\n   (reverse (range 0 (int (/ (count l) 2))))\n  )\n)","problem":27,"user":"4e720985535d5021c1a89655"},{"problem":27,"code":"(fn \n  [ls] \n  (loop \n    [l ls] \n    (if (= (count l) 0)\n      true\n      (if (= (first l) (last l))\n        (recur (rest (butlast l)))\n        false))))","user":"5c35acffe4b0d62ef62d9f62"},{"code":"(fn pal [s]\n   (if (< (count s) 2)\n     true\n     (and (= (first s) (last s))\n          (recur (rest (take (dec (count s)) s))))))","problem":27,"user":"51740b65e4b0d277d717bc67"},{"problem":27,"code":"(fn [x] (= (seq x) (reduce #(cons %2 %) [] (seq x))))","user":"56d1afd9e4b0ea9b8538f791"},{"problem":27,"code":"#(if (string? %)\n  (= (apply str (reverse %)) %)\n  (= (reverse %) %))","user":"53d9e587e4b0e771c302547c"},{"problem":27,"code":"(fn [xs]\n  (let [h (Math/floor (/ (count xs) 2))]\n    (= (take h (reverse xs)) (take h xs))))","user":"51dafedee4b09f6bc204eee2"},{"code":";#(every? (fn [[x y]] (= x y)) (map vector % (reverse %)))\n#(= (reverse %) (seq %))","problem":27,"user":"52cfe059e4b07d0d72b273af"},{"code":"(fn [xs]\n  (let [ front     (first xs)\n         middle (butlast (rest xs))\n         end       (last xs)]\n    (cond (or (nil? front) (nil? end)) true\n          (not= front end)             false\n          :else (recur middle))))","problem":27,"user":"524740e7e4b05ef8e38e635d"},{"code":"(fn [xs]\n  (= (reverse (into [] xs)) (into [] xs)))","problem":27,"user":"521c6a1ae4b0c4ef0be83083"},{"problem":27,"code":"#(= (loop [[head & tail] %\n             res []]\n        (if (empty? tail)\n          (conj res, head)\n          (recur tail (conj res, head))))\n    (loop [[head & tail] %\n             res '()]\n        (if (empty? tail)\n          (conj res, head)\n          (recur tail (conj res, head)))))","user":"542ce413e4b0dad94371f2ae"},{"problem":27,"code":"#(=  (seq %) (reverse %))\n\n; (fn [x] (= (seq x) (reverse x)))","user":"57465526e4b009280f9f2b61"},{"code":"(fn [seq]\n  (if (string? seq) \n    (= seq (apply str (reverse seq)))\n      (= seq (reverse seq))))","problem":27,"user":"51d1875be4b0cfcf579466c0"},{"problem":27,"code":"(fn  \n\t[inputThing]\n\n\t(loop [i 0 ri (- (count inputThing) 1)]\n\n\t\t(println i)\n\t\t(println (int(/ (count inputThing)  2)))\n\t\t(println ri)\n\t\t(if (not= (nth inputThing i) (nth inputThing ri))\n\t\t\tfalse\n\t\t\t(do\n\t\t\t\t(if (= ri (int(/ (count inputThing)  2)))\n\t\t\t\t\ttrue\n\t\t\t\t\t(recur (inc i) (dec ri))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\n\t)\n\t\n\t)","user":"5d8b3d5be4b0915913b1d3d1"},{"code":"(fn [s]\n  (= (seq s) (reduce conj () s)))","problem":27,"user":"51181009e4b0e0897831a60f"},{"problem":27,"code":"(fn [col] (= (reverse col) (seq col)))","user":"53b40181e4b047364c0444ae"},{"code":"(fn [sq]\n  (cond\n   (or (empty? sq)\n       (empty? (rest sq))) true\n   (not= (first sq) (last sq)) false\n   :else (recur (butlast (drop 1 sq)))))","problem":27,"user":"535d910ae4b04ce2eb3ed2c5"},{"problem":27,"code":"(fn [x]\n  (let [a x b (reverse x) l (count x)]\n    (= \n     (map (partial nth a) (range l))\n    (map (partial nth b) (range l))))\n    )","user":"562108d0e4b064ca9f4b16e9"},{"problem":27,"code":"#(= (reverse (map (fn [x] x) %)) (map (fn [x] x) %))","user":"569bda8ee4b0542e1f8d145a"},{"problem":27,"code":"(fn [x]\n   (loop [y x]\n     (if (< (count y) 2)\n       true\n       (if-not (= (first y) (last y))\n         false\n         (recur (rest (drop-last y)))))))","user":"5ccc2a03e4b0ccb06196288f"},{"problem":27,"code":"(fn\n  [coll]\n  (if (empty? coll)\n    true\n    (if (= (first coll) (last coll))\n      (recur (-> coll\n                 rest\n                 drop-last))\n      false)))","user":"603e8e3ae4b0d5df2af22316"},{"problem":27,"code":"(fn pal [l]\n  (if (< (count l) 2) true\n    (if (= (first l) (last l))\n      (pal (rest (butlast l)))\n      false)))","user":"5d41f428e4b05dd059a5437b"},{"problem":27,"code":"(fn [c] \n  \t(let [r (reverse c) n (count c)]\n      (every? identity\n           (map #(= (nth c %) (nth  r %)) (range n)))))","user":"55ec1048e4b0121d4835fdc3"},{"problem":27,"code":"(fn isPalindrome [seq]\n  ;0 or 1 elements are trivially palindromes.\n  (if (< (count seq) 2) \n    true\n    ;else, we have at least two elements. Are the ends different?\n    (if (false? (= (first seq) (last seq)))\n      false\n      ;If the ends match, compare the middle.\n      (if (isPalindrome (rest (butlast seq)))\n        true\n        ;else\n        false\n      )\n    )\n  )\n)","user":"569f99cce4b0542e1f8d1497"},{"code":"#(= (reverse %) (if (instance? String %) (seq %) %))","problem":27,"user":"52e5da25e4b09f7907dd1467"},{"problem":27,"code":"(fn [x] (if (empty? x) true\n          (if (not (= (first x) (last x))) false\n            (recur (rest (reverse (rest x)))))))","user":"53a2ec2be4b0f1fc74538830"},{"problem":27,"code":"(fn [x] \n  (= (seq x) (reverse (seq x)))\n  )","user":"571e1d9de4b0145328a76287"},{"problem":27,"code":"(fn [x] \n\t(loop [tstr x sind 0 lind (- (count x) 1)] \n\t\t(if (> sind lind) \n\t\t\ttrue\n\t\t\t(if (= (nth tstr sind) (nth tstr lind))\n\t\t\t\t(recur tstr (+ sind 1) (- lind 1)) \n\t\t\t\tfalse \n\t\t\t) \n\t\t)\n\t)\n)","user":"55b60518e4b01b9910ae298e"},{"problem":27,"code":"#(if (some false? (map = (reverse %) %))\n   false\n   true)","user":"53bbae20e4b047364c044509"},{"code":"(fn [seq] (= (sequence seq) (reverse seq)))","problem":27,"user":"4ea1bc93535d7eef308072b9"},{"problem":27,"code":"(fn pd [x] (loop [x-seq (seq x) rev '() rem x] (cond (empty? rem) (if (= rev x-seq) true false)\n                                       :else (recur x-seq (cons (first rem) rev) (rest rem)))))","user":"550772cee4b021ccfedb96a8"},{"code":"(fn [string] (= (reverse string) (apply list string)))","problem":27,"user":"4f039a8b535dcb61093f6b36"},{"problem":27,"code":"(fn [w]\n  (if (= (seq w) (reverse (seq w)))\n  true\n  false\n  )\n)","user":"554756b8e4b0a04f79299549"},{"problem":27,"code":"(fn [seq]\n  (= seq (if (string? seq)\n           (apply str (reverse seq))\n           (reverse seq))))","user":"55183a11e4b06a49daca83ca"},{"code":"(fn [pal]\n  (let [last (fn [x]\n               (if (empty? (rest x))\n                   (first x)\n                   (recur (rest x))))\n        middle (fn [x]\n                 (loop [y (rest x) r []]\n                   (if (empty? (rest y))\n                     (list r)\n                     (recur (rest y) (conj r (first y))))))]\n    (cond\n     (empty? pal) true\n     (= pal (list (first pal))) true\n     :else\n     (and (= (first pal) (last pal)) (recur (middle pal))))))","problem":27,"user":"52c81954e4b0c2d177d6212e"},{"code":"#(= (-> % reverse reverse) (reverse %))","problem":27,"user":"4fbd292fe4b081705acca300"},{"code":"#(or (= (reverse %1) %1) (= (apply str (vec (reverse %1))) %1))","problem":27,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":27,"code":"(fn is-palindrome?\n  [coll]\n  (let [coll (remove (set \" \") coll)]\n    (= (reverse coll) coll)))","user":"580e4848e4b0849f6811b750"},{"code":"(fn f [c]\n  (let [coll (seq c) l (count c)]\n    (case l\n      1 true\n      2 (= (first coll) (second coll))\n      (and (= (first coll) (last coll)) (f (butlast (rest coll)))))))","problem":27,"user":"50729f67e4b0e3170b5a868e"},{"code":"(fn [i] (= (seq i) (reverse i)))","problem":27,"user":"5228457ee4b0186687e23a76"},{"problem":27,"code":"(fn [S]\n  (= \n    (seq S)\n   \t(reverse S)\n  )\n)","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn [x] (= \r\n\t\t\t\t(cond \r\n                 (string? x) (apply str (reverse x))\r\n                 :else (reverse x))\r\n                 x))","problem":27,"user":"4f041af6535dcb61093f6ba3"},{"problem":27,"code":"(fn [x]\n     (= (seq x) (reverse x)))","user":"5a07fefee4b01bb0ae8afde5"},{"problem":27,"code":"(fn [input] (letfn \n\t[(palindrome? [l] (cond\n\t\t(empty? l) true\n\t\t(= (count l) 1) true\n\t\t:else (and (= (first l) (last l)) (palindrome? (rest (butlast l))))))]\n\t(palindrome? input)))","user":"555f728de4b0a2eb076a39c8"},{"code":"#(not (some false? (map = % (reverse %))))","problem":27,"user":"51787832e4b03d69594194d3"},{"code":"(fn [s]\n  (= (seq s) (reverse (seq s))))","problem":27,"user":"4e7f7e48535db966e863cc42"},{"code":"(fn [a-seq]\n\t(if (string? a-seq)\n\t\t(= a-seq (reduce str \"\" (reverse a-seq)))\n\t\t(= a-seq (reverse a-seq))))","problem":27,"user":"531dc21be4b08068f379edb1"},{"problem":27,"code":"(fn pal [a-seq] (if (<= (count a-seq) 1) true \n                           (if (= (first a-seq) (last a-seq)) \n                             (pal (butlast (rest a-seq)))\n                           false)\n                           ))","user":"5640803be4b08d4f616f5ee6"},{"problem":27,"code":"(fn pallindrom-detector\n  [incoming-list] \n  (if (>= 1 (count incoming-list))\n    true\n    (and \n      (= (first incoming-list) (last incoming-list)) \n      (pallindrom-detector (->> incoming-list (drop 1) (drop-last 1)))\n    )\n  )\n)","user":"5a4dbc97e4b05d388ecb6bae"},{"code":"(fn pal [x]\n  (if (empty? x)\n    true\n    (and\n      (= (first x) (last x))\n      (pal (butlast (rest x))))))","problem":27,"user":"4f047902535dcb61093f6bcc"},{"problem":27,"code":"(fn [x] \n  (if (string? x) (= (apply str (reverse x)) x)\n    (= (reverse x) x)))","user":"55885edae4b059ccff29b1f6"},{"problem":27,"code":"(fn pal [s]\n  (if (< (count s) 2)\n     true\n     (and (= (first s) (last s)) (pal (drop 1 (drop-last (seq s)))))))","user":"570f8fcee4b09c608db70423"},{"code":"(fn [a]\n  (cond\n    (empty? a) true\n    (= 1 (count a)) true\n    :else (and (= (first a) (last a))\n               (recur (rest (butlast a))))))","problem":27,"user":"5013141de4b0f26a0e3320a9"},{"code":"(fn [reverse-test-me] (= (seq reverse-test-me) (reverse reverse-test-me)))","problem":27,"user":"4dbd7107535d020aff1edf42"},{"problem":27,"code":"#(loop [x %]\n  (let [f (first x)\n        l (last x)]\n   (if-not (empty? x)\n    (if (= f l)\n     (recur (-> x rest drop-last))\n     false)\n    true)))","user":"577caf73e4b0c8d87281f6c6"},{"code":"(fn [x] \n    (let [rx (reverse x) n (count x)]\n      (every? identity \n        (map #(= (nth x %) (nth rx %)) (range (/ (dec n) 2))\n        ))))","problem":27,"user":"4f7b1c63e4b06e829148e19e"},{"code":"#(= (if (string? %)\n  (apply str (reverse %))\n  (reverse %))\n %)","problem":27,"user":"4f7c7ed7e4b06e829148e1b4"},{"problem":27,"code":"(fn palindrome?\n   [col]\n   (= (seq col) (reverse col)))","user":"5e64f44de4b0fd0acd1586ae"},{"problem":27,"code":"(fn [coll]\n  (every? #(apply = %)\n    (partition 2 (interleave coll (reverse coll)))))","user":"57a774e4e4b0a96607956213"},{"code":"(fn [coll]\n  (if (string? coll)\n    (= coll (apply str (reverse coll)))\n  (= coll (reverse coll))))","problem":27,"user":"4f1f1a9d535d64f60314649d"},{"problem":27,"code":"#(let [v (vec %)]\n    (cond (< (count v) 2) true\n          (not= (first v) (peek v)) false\n          :else (recur (subvec v 1 (- (count v) 1)))))","user":"531bf76fe4b08068f379ed96"},{"problem":27,"code":"#(= (reduce conj [] (reverse %1))(seq %1))","user":"53dae029e4b0e771c30254ae"},{"problem":27,"code":"(fn [s]\n  (every? true? (map #(= %1 %2) s (reverse s))))","user":"58f273d9e4b08e1cf3471d01"},{"code":"(fn [s]\n  (if (empty? s)\n    true\n    (if (= (first s) (last s))\n      (recur (rest (butlast s)))\n      false)))","problem":27,"user":"5390952be4b0b51d73faae9c"},{"problem":27,"code":"(fn pal[s]\n  (cond (or (= s '()) (= s nil)) true\n        (not\n         (= (first s) (last s))) false\n        :else (pal (butlast(rest s)))))","user":"53e06f81e4b0d874e779ae4c"},{"problem":27,"code":"(fn isPalindrome [input]\n  (let [coll (seq input)]\n  \t(= coll (reverse coll))\n  )\n)","user":"54b5870ae4b05787c3b163a6"},{"problem":27,"code":"(fn palindrome? [s]\n  (if (<= (count s) 1)\n    true\n    (and (= (first s) (last s))\n         (palindrome? (drop-last (drop 1 s))))))","user":"551747e0e4b06a49daca83c1"},{"problem":27,"code":"(fn [s] (= (vec s) (vec (into () s))))","user":"5549ca1ce4b0a04f7929956c"},{"code":"(fn [coll]\n  (empty? (filter false? (map #(= %1 %2) coll (reverse coll)))))","problem":27,"user":"4ef4c1ff535dced4c769f23e"},{"code":"#(if (instance? String %)\n   (= % (clojure.string/reverse %))\n   (= % (reverse %)))","problem":27,"user":"527268a5e4b03e8d9a4a7431"},{"code":"#(let [[lhs rhs] (split-at (/ (count %) 2) %)] (every? identity (map (fn [[l r]] (= l r)) (zipmap lhs (reverse rhs)))))","problem":27,"user":"4faae01ae4b081705acca206"},{"problem":27,"code":"#(loop [s %]\n    (if (some (fn [x] (= x (count s))) [0 1])\n      true\n      (if (not= (first s) (last s))\n        false\n        (recur (-> s next butlast))\n        )))","user":"57e3f709e4b0bfb2137f5aaf"},{"problem":27,"code":"(fn palindrome? [coll] (if (= (apply str coll) (apply str (reverse coll))) true false))","user":"5d348d3de4b01671435dbd0a"},{"code":"(fn [x] (if (= (vec x) (reverse (vec x))) true false))","problem":27,"user":"4e3000c8535deb9a81d77f13"},{"code":";#(= (reverse %) (reverse (reverse %)))\n#(= (map identity %) (reverse %))","problem":27,"user":"533b9cace4b0e30313ee6cd1"},{"code":"(fn [l] \n  (let\n    [c (seq l)\n     rev (fn rev [coll] \n           (if (empty? coll)\n             coll\n             (concat\n              (rev (rest coll))\n              (list (first coll))\n             )\n           )\n         )]\n    (= (rev c) c)\n    )\n  )","problem":27,"user":"5348236ee4b084c2834f4a54"},{"code":"(fn palindrome?\n  [coll] {:pre [(or (sequential? coll) (string? coll) (nil? coll))]}\n  (if (seq coll)\n    (= (seq coll) (reverse coll))\n    true))","problem":27,"user":"4fc6305de4b0ee37620e180b"},{"code":"(fn [x]\r\n  (= (seq x) (reverse (seq x))))","problem":27,"user":"4e1f9bb5535d04ed9115e80d"},{"problem":27,"code":"(fn [xs]\n  (let [rxs (reverse xs)]\n    (loop [s xs rs rxs]\n      (if (not (and (next s) (next rs)))\n        (= (first s) (first rs))\n        (recur (next s) (next rs))))))","user":"5682d5b4e4b0945ebc182a95"},{"code":"(fn [sequence]\n  (let [s (seq sequence)]\n    (= s (reverse s))))","problem":27,"user":"4e7e443e535db169f9c7970b"},{"code":"#(= (first %) (last %))","problem":27,"user":"4e1248b1535d04ed9115e7cf"},{"problem":27,"code":"(fn [coll]\n  \"A function which returns only the odd numbers from a sequence\"\n  (let [reverse-coll (into [] (reduce conj () coll))]\n    (= reverse-coll (into [] coll)))\n  )","user":"5ee4b2e6e4b029a2061bbe90"},{"problem":27,"code":"(fn is-palindrome? [s]\n  (cond (< (count s) 2) true\n        (and (> (count s) 1)\n             (= (first s) (last s)))\n        (is-palindrome? (drop 1 (drop-last s)))\n        :else false))","user":"5a79ce7fe4b03baeef9276c8"},{"problem":27,"code":"(fn [xs]\n  (if (empty? xs)\n    true ;base case\n    (let [first-element (first xs)\n          last-element (last xs)\n          list-without-first-and-last (drop-last (rest xs))]\n\n      (and (= first-element last-element)\n           (recur list-without-first-and-last)))))","user":"57ea4569e4b0bfb2137f5b46"},{"problem":27,"code":"(fn [se] (if (string? se)\n  (= se (apply str (reverse se)))\n  (= se (reverse se))))","user":"5a221881e4b0ff51aa4b32c0"},{"problem":27,"code":"(fn [in] (let [rev (if (= java.lang.String (type in)) clojure.string/reverse reverse)] (= in (rev in))))","user":"5ad6ad5de4b0ea6055cfac0e"},{"code":"(fn palin[cs]\n  (if (empty? cs)\n    true\n    (if (= (first cs) (last cs))\n      (palin(rest (drop-last cs)))\n      false\n    )\n  )\n)","problem":27,"user":"4eef0828535d305ff5cb7f18"},{"problem":27,"code":"(fn f [x]\n  (if (<= (count x) 1) true\n    (and (= (first x) (last x))\n         (f (drop-last (drop 1 x))))))","user":"598a4ff7e4b02b9968b84cda"},{"problem":27,"code":"(fn[lst]\n\t( = (seq lst) (reverse lst)) \n \n)","user":"56b94357e4b0f2655033592e"},{"problem":27,"code":"(fn [x]\n      (if (string? x) (= x (apply str (reverse x))) (= x (reverse x))))","user":"567b62fce4b05957ce8c61a6"},{"code":"(fn [seqn]\n  (let [half-count (int (/ (count seqn) 2))\n        first-half (take half-count seqn)\n        second-half (take half-count (reverse seqn))]\n    (= first-half second-half)))","problem":27,"user":"4e8944b6535d4ef0aa30db98"},{"problem":27,"code":"(fn palindrome?\n  [c]\n  (loop [c c]\n    (if (not-empty c)\n      (if (apply = ((juxt first last) c))\n        (recur (-> c rest butlast))\n        false)\n      true)))","user":"5bab49bbe4b0a20761a23474"},{"problem":27,"code":"(fn [coll]\n  (= (seq coll) (reverse coll)\n     )\n  )","user":"596b5f27e4b069c0a1a19813"}]