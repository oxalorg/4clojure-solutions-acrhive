[{"code":"(fn []\n  (let [x '(list 'fn []\n                (list 'let ['x (list 'quote x)]\n                      (list 'str x)))]\n    (str (list 'fn []\n               (list 'let ['x (list 'quote x)]\n                     (list 'str x))))))","problem":125,"user":"511b233ae4b07ab9ec456180"},{"problem":125,"code":"(let [d '(#(str (list 'let ['d (list 'quote d)] (last d))))]\n          #(str (list 'let ['d (list 'quote d)] (last d))))","user":"559c13c5e4b066d22e731f61"},{"code":"(fn [] (str ((fn [x] (str (list 'fn [] (list 'str (list x (list 'quote x))))))\n                    '(fn [x] (str (list 'fn [] (list 'str (list x (list 'quote x)))))))))","problem":125,"user":"5294e44de4b02ebb4ef75016"},{"problem":125,"code":"(fn [] \n  (let [s (str (quote (fn [] \n                        (let [s (str (quote %s))] \n                          (format s s)))))] \n    (format s s)))","user":"4dc0ff08535d020aff1edf84"},{"problem":125,"code":"(fn [] (let [q (char 34) s (char 32) l [\n\"(fn [] (let [q (char 34) s (char 32) l [\"\n\"]] (str (first l) q (first l) q s q (last l) q (last l))))\"\n]] (str (first l) q (first l) q s q (last l) q (last l))))","user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn []\n  (let [x \"(str \\\"(fn [] (let [x \\\" (pr-str x) \\\"] \\\" x)))\"]\n    (str \"(fn [] (let [x \" (pr-str x) \"] \" x)))","problem":125,"user":"4e691c79535d8ccf87e9fe97"},{"problem":125,"code":"(fn [] (apply str \n  ((fn [x] (concat (take 90 x) [(char 34)] x [(char 34)] \n    (nthnext x 90))) \n\"(fn [] (apply str ((fn [x] (concat (take 90 x) [(char 34)] x [(char 34)] (nthnext x 90))) )))\"\n)))","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":125,"code":"(fn [] (let [a (str '(fn [] (let [a (str '())] (clojure.string/replace-first a \"()\" a))))] (clojure.string/replace-first a \"()\" a)))","user":"5db0172be4b0f8c104ccfc96"},{"problem":125,"code":"(fn []\n  (let [f \"(fn [] (let [f %s] (format f (pr-str f))))\"]\n    (format f\n            (pr-str f))))","user":"54246fcce4b01498b1a71aed"},{"code":"(fn [] (let [a (char 34) b (char 93) f (char 101) w (char 32) s \"(fn [] (let [a (char 34) b (char 93) f (char 101) w (char 32) s \" e \" (str s a s a w f w a e a b e)))\"] (str s a s a w f w a e a b e )))","problem":125,"user":"4f1d1299535d64f603146487"},{"code":"(fn [] (let [s [\"(fn [] (let [s \" \"] (str (first s) (str s) (last s))))\"]] (str (first s) (str s) (last s))))","problem":125,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"(fn [] (let [spc (char 32) b (char 34)\ns [\"(fn [] (let [spc (char 32) b (char 34) s [\"\n\"]] (str (first s) b (first s) b spc b (second s) b (second s))))\"]] (str\n(first s) b (first s) b spc b (second s) b (second s))))","problem":125,"user":"52a88c4de4b0c58976d9ac30"},{"problem":125,"code":"(fn [] (let [s [\"(fn [] \" \"(let [s \" \" (str (s 0) (s 1) s (s 3) (s 2))))\" \"]\"]] (str (s 0) (s 1) s (s 3) (s 2))))","user":"5649615be4b0284900eef641"},{"code":"(fn [] (let [f \"(fn [] (let [f %s] (format f (pr-str f))))\"] (format f (pr-str f))))","problem":125,"user":"5097b556e4b00ad8bab4e970"},{"code":"(fn []\n  (letfn [(w [s] (concat \" \" (name s) \" \"))]\n\t\t(let\n\t\t\t[bs [\\\\] qs [\\\"] sp [\\space] rb [\\]] a \"(fn [] (letfn [(w [s] (concat \" b \" (name s) \" c \"))] (let [bs [\" d \"] qs [\" e \"] sp [\" f \"space] rb [\" g \"]] a \" h \"] (apply str (concat a qs sp qs b qs sp qs c bs bs d bs qs e bs f bs g qs a qs (w (quote b)) qs b qs (w (quote c)) qs c qs (w (quote d)) qs d qs (w (quote e)) qs e qs (w (quote f)) qs f qs (w (quote g)) qs g qs (w (quote h)) qs h qs h)))))\"]\n\t\t\t(apply str (concat a qs sp qs b qs sp qs c bs bs d bs qs e bs f bs g qs a qs (w 'b) qs b qs (w 'c) qs c qs (w 'd) qs d qs (w 'e) qs e qs (w 'f) qs f qs (w 'g) qs g qs (w 'h) qs h qs h))\n\t\t)\n\t)\n)","problem":125,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":125,"code":"(fn [] (let [q (char 34) w (char 32) s [\"(fn [] (let [q (char 34) w (char 32) s [\" \"]] (str (first s) q (first s) q w q (second s) q (second s))))\"]] (str (first s) q (first s) q w q (second s) q (second s))))","user":"573d58c8e4b05c31a32c0811"},{"problem":125,"code":"(fn [] (let [f (str (quote (fn [] (let [f (str (quote 1))] (clojure.string/join f (re-seq #\"[^\\d]+\" f))))))] (clojure.string/join f (re-seq #\"[^\\d]+\" f))))","user":"513e8141e4b02b2a3d8235c1"},{"code":"(fn [] (let [t \"(fn [] (let [t %s] (format t (pr-str t))))\"] (format t (pr-str t))))","problem":125,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":125,"code":"(fn [] (let [a \"(fn [] (let [a \\\\\\\"] (str (subs a 0 15) (subs a 16 17) (subs a 0 15) (subs a 15 16) (subs a 15 16) (subs a 15) (subs a 16) (subs a 134)))\"] (str (subs a 0 15) (subs a 16 17) (subs a 0 15) (subs a 15 16) (subs a 15 16) (subs a 15) (subs a 16) (subs a 134))))","user":"50f10f7be4b06d9538fe211a"},{"problem":125,"code":"(fn []\n  (let [c (char 34) d [ \n      \"(fn [] (let [c (char 34) d [\"\n      \"]]\"\n      \" (apply str (nth d 0) (apply str (butlast (apply str (map (fn [l] (str c l c (char 32))) d)))) (rest d))))\"]]\n  (apply str\n         (nth d 0)\n         (apply str (butlast (apply str (map (fn [l] (str c l c (char 32))) d))))\n         (rest d))))","user":"52bacfa8e4b07a9af57922d6"},{"code":"(fn []\n  (let [a [\"(fn [] (let [a \"\n           \"] (apply str (a 0) a (a 1))))\"]] (apply str (a 0) a (a 1))))","problem":125,"user":"4e7f51eb535db966e863cc3f"},{"problem":125,"code":"(fn [] \n  (let [x [\"(fn [] (let [x \"\n           \"] (str (x 0) x (x 1))))\"]]\n    (str (x 0) x (x 1))))","user":"5799ff45e4b05b1deef9add1"},{"problem":125,"code":"(fn quine [] (let [data [\"(fn quine [] (let [data \" \"] (str (first data) (str data) (second data))))\"] ] (str (first data) (str data) (second data))))","user":"5db7376fe4b010eb3c36cd43"},{"problem":125,"code":"(fn [] (let [c \"(fn [] (let [c \"\n      cod \"] (str c (pr-str c) (get sym 0) (pr-str cod) (get sym 1) (pr-str sym) cod)))\"\n      sym [\" cod \" \" sym \" \"]\"]]\n          (str c (pr-str c) (get sym 0) (pr-str cod) (get sym 1) (pr-str sym) cod)))","user":"5a75da49e4b0512ff01cdacf"},{"problem":125,"code":"(fn [] (let [\r\n  s \"(fn [] (let [s %s%s%s q (char 34)] (format s q s q)))\"\r\n  q (char 34)]\r\n  (format s q s q)))","user":"555bd27ae4b0b056612e2244"},{"problem":125,"code":"; Ok, I gave up and learned this one from k4rtk\n; I almost had this but didn't think of pr-str to get around the quotes problem\n(fn [] (let [s \"(fn [] (let [s %s] (format s (pr-str s))))\"] (format s (pr-str s))))","user":"54f26266e4b024c67c0cf8c5"},{"code":"(fn [] (let [a [\"(fn [] (let [a \" \"] (apply str (a 0) a (a 1))))\"]] (apply str (a 0) a (a 1))))","problem":125,"user":"4e89e939535d3e98b8023287"},{"problem":125,"code":"(fn [] (let [c (char 34) s \"(fn [] (let [c (char 34) s %c%s%c] (format s c s c)))\"] (format s c s c)))","user":"5416b4a2e4b01498b1a71a01"},{"problem":125,"code":"(fn [x] (str x x)) '(fn [x] (str x x))\n; SegFaultAX","user":"5e13a6b7e4b099d064963001"},{"code":"(fn[] (let [c (char 34) s \"(fn [] (let [c (char 34) s ] (str (subs s 0 27) c s c (subs s 27))))\"] (str (subs s 0 27) c s c (subs s 27))))","problem":125,"user":"4e6a2f51535d8ccf87e9fea9"},{"code":"(fn [] ((fn [x] (str \"(fn [] \" (list x (list (quote quote) x)) \")\" )) (quote (fn [x] (str \"(fn [] \" (list x (list (quote quote) x)) \")\" )))))","problem":125,"user":"4fca1cd6e4b0ee37620e184c"},{"code":"(fn [] (let [a \"(fn [] (let [a %c%s%c] (format a (char 34) a (char 34))))\"] (format a (char 34) a (char 34))))","problem":125,"user":"4fb1d907e4b081705acca282"},{"code":"#(let [f \"(fn* [] (let [f %s] (format f (pr-str f))))\"] (format f (pr-str f)))","problem":125,"user":"4ff67852e4b0678c553fc37e"},{"code":"(fn [] (let [v [\"(fn [] (let [v \" \"] (str (v 0) v (v 1))))\"]] (str (v 0) v (v 1))))","problem":125,"user":"523a9fc9e4b081681ca7adca"},{"problem":125,"code":"(fn [] (let [code \"(fn [] (let [code \\\"$\\\"] (-> code (clojure.string/replace (str (char 36)) code) (clojure.string/replace (str (char 34) (char 36) (char 34)) (str (char 92) (char 34) (char 36) (char 92) (char 34))))))\"] (-> code (clojure.string/replace (str (char 36)) code) (clojure.string/replace (str (char 34) (char 36) (char 34)) (str (char 92) (char 34) (char 36) (char 92) (char 34))))))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":125,"code":"(fn f [] (let [s (str (quote (fn f [] (let [s (str (quote))] (str (subs s 0 28) \" \" s (subs s 28))))))] (str (subs s 0 28) \" \" s (subs s 28))))","user":"54d4bd2be4b0a52adc2e2005"},{"code":"(fn [] (let [x [\"(fn [] (let [x \" \"] (apply str (x 0) x (x 1))))\"]] (apply str (x 0) x (x 1))))","problem":125,"user":"52586d24e4b0cb4875a45cb0"},{"problem":125,"code":"(fn []\n  ((fn [pref suf]\n     (let [qc \\\"\n           qs (char-escape-string qc)\n           space \" \"]\n       (str (format pref qs qc)\n            qc\n            pref\n            qc\n            space\n            qc\n            suf\n            qc\n            suf)))\n   \"(fn [] ((fn [pref suf] (let [qc %1$s qs (char-escape-string qc) space %2$c %2$c] (str (format pref qs qc) qc pref qc space qc suf qc suf))) \"\n   \"))\"))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn [] (let [c (char 34) blank (char 32) rec [\"(fn []\" \" (let [c (char 34) blank (char 32)\" \" rec [\" \"]\" \" len (count rec)]\" \" (apply str\" \" (concat\" \" (for [s (range 3)]\" \" (str (rec s)))\" \" (for [s (range (dec len))]\" \" (str c (rec s) c blank))\" \" (str c (last rec) c)\" \" (for [s (range 3 (dec len))]\" \" (str (rec s)))\" \" (last rec)))))\"] len (count rec)] (apply str (concat (for [s (range 3)] (str (rec s))) (for [s (range (dec len))] (str c (rec s) c blank)) (str c (last rec) c) (for [s (range 3 (dec len))] (str (rec s))) (last rec)))))","problem":125,"user":"520242bae4b030ee0c5b26e3"},{"code":"; a single function would be nicer, but so what\n(fn [a] (str a a)) '(fn [a] (str a a))","problem":125,"user":"4ede8789535d10e5ff6f5337"},{"code":";thanks to http://www.nyx.net/~gthompso/quine.htm\n\n      ((fn [x] (fn[] (str (list x (list (quote quote) x))))) \n(quote \n       (fn [x] (fn[] (str (list x (list (quote quote) x)))))))","problem":125,"user":"4e739e13535dff18050a9c76"},{"code":"(fn []\n  (let [q [\"(fn [] (let [q \"\n           \"] (apply str (first q) q (second q))))\"]] (apply str (first q) q (second q))))","problem":125,"user":"50c8697ce4b00bb60fe0c53f"},{"code":"(fn []\n  (str\n   ((fn [x] (seq (conj (into [] (drop-last x)) (concat (drop-last (last x)) (list (seq (conj (into [] (last (last x))) (list (quote quote) x))))))))\n    (quote (fn []\n             (str\n              ((fn [x] (seq (conj (into [] (drop-last x)) (concat (drop-last (last x)) (list (seq (conj (into [] (last (last x))) (list (quote quote) x)))))))))))))))","problem":125,"user":"52c776a9e4b0c2d177d62123"},{"code":"(fn [] \n  (let [dq (char 34)\n        sp (char 32)\n        [a b] [\"(fn [] (let [dq (char 34) sp (char 32) [a b] [\" \"]] (str a (str dq a dq sp dq b dq) b)))\"]]\n    (str a (str dq a dq sp dq b dq) b)))","problem":125,"user":"51944aaae4b0142f60b4aedc"},{"problem":125,"code":"(fn [] (let [s (char 32) \n             q (char 34) \n             f [\"(fn [] (let [s (char 32) q (char 34) f [\"\n                \"]] (str (f 0) q (f 0) q s q (f 1) q (f 1))))\"]]\n         (str (f 0) q (f 0) q s q (f 1) q (f 1))))","user":"52d00832e4b07d0d72b273b4"},{"code":"(fn [] (let [x [\"(fn [] (let [x \" \"] (str (x 0) (str x) (x 1))))\"]] (str (x 0) (str x) (x 1))))","problem":125,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"(fn\n  []\n  (let [s \"(fn [] (let [s #] (.replaceFirst s (str (char 35)) (str (doto (StringBuilder.) (.append (char 34)) (.append s) (.append (char 34)))))))\"]\n    (.replaceFirst s (str (char 35))\n                   (str (doto (StringBuilder.)\n                     (.append (char 34))\n                     (.append s)\n                     (.append (char 34)))))))","problem":125,"user":"4db53f87535d87e67b28fe08"},{"code":"(fn []\n  (let [a [\"(fn [] \"\n          \"(let [a [\"\n          \"(apply str\"\n          \"(concat\"\n          \"(take 2 a)\"\n          \"(interpose (char 32) (map (fn [x] (str (char 34) x (char 34))) a))\"\n          \"(last a)\"\n          \"(interpose (char 32) (drop 2 (butlast a)))))))\"\n          \"]] \"]]\n    (apply str \n           (concat\n             (take 2 a)\n             (interpose (char 32) (map (fn [x] (str (char 34) x (char 34))) a))\n             (last a)\n             (interpose (char 32) (drop 2 (butlast a)))))))","problem":125,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn* [] (let [a \"(fn* [] (let [a %c%s%c] (format a (char 34) a (char 34))))\"] (format a (char 34) a (char 34))))","problem":125,"user":"51b213c2e4b02f8f128bb962"},{"code":"; translation of the python version at http://fr.wikipedia.org/wiki/Quine_%28informatique%29#Python\n(fn [] (let [a \"(fn [] (let [a %s] (format a (pr-str a))))\"] (format a (pr-str a))))","problem":125,"user":"500900dee4b0144d4f561e42"},{"problem":125,"code":"(fn [] (let [quine \"(fn [] (let [quine %s] (format quine (pr-str quine))))\"] (format quine (pr-str quine))))","user":"5125029de4b0ce9225d2ed3e"},{"problem":125,"code":"(fn [n] (str n n)) '(fn [n] (str n n))","user":"54b7f217e4b0ed20f4ff6e8f"},{"problem":125,"code":"(fn [] ((fn [x] (str (list (quote fn) [] (list x (list (quote quote) x))))) (quote (fn [x]  (str (list (quote fn) [] (list x (list (quote quote) x))))))))","user":"571c2babe4b07c98581c3b73"},{"problem":125,"code":"(fn [] (let [q (char 34) s (char 32) code [\"(fn [] (let [q (char 34) s (char 32) code [\" \"]] (str (code 0) q (code 0) q s q (code 1) q (code 1))))\"]] (str (code 0) q (code 0) q s q (code 1) q (code 1))))","user":"58ec1e63e4b056aecfd47d54"},{"code":"(fn [] ((fn [x] (str (list (quote fn) [] (list x (list (quote quote) x))))) (quote (fn [x] (str (list (quote fn) [] (list x (list (quote quote) x))))))))","problem":125,"user":"4f08b15b535dcb61093f6c40"},{"code":"(fn [](let [ns (apply str (drop-last 5(str (quote(fn))))) source [\"(fn [] \" \n                                                                  \"(let [ns (apply str (drop-last 5 (str (quote \" \n                                                                  \"(fn))))) source [\" \n                                                                  \"]] (str ns (first source) ns (second source) ns (get source 2) (apply str (drop-last (rest (str (seq source))))) (peek source))))\"]] (str ns (first source) ns (second source) ns (get source 2) (apply str (drop-last (rest (str (seq source))))) (peek source))))","problem":125,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":125,"code":"(fn q [] (let [s \"(str \\\"(fn q [] (let [s \\\" \\\\\\\" (.replace (.replace s \\\"\\\\\\\\\\\" \\\"\\\\\\\\\\\\\\\\\\\") \\\"\\\\\\\"\\\" \\\"\\\\\\\\\\\\\\\"\\\") \\\\\\\" \\\"] \\\" s \\\"))\\\")\"] (str \"(fn q [] (let [s \" \\\" (.replace (.replace s \"\\\\\" \"\\\\\\\\\") \"\\\"\" \"\\\\\\\"\") \\\" \"] \" s \"))\")))","user":"55205564e4b08d5046aa8a60"},{"code":"(fn []\n  (let\n    [ s (char 32)\n      q (char 34)\n      [a b]\n        [ \"(fn [] (let [s (char 32) q (char 34) [a b] [\"\n          \"]] (str a q a q s q b q b)))\"]]\n    (str a q a q s q b q b)))","problem":125,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":125,"code":"(fn quine[] (let [q (char 34) p (char 116) c (char 32) s \"(fn quine [] (let [q (char 34) p (char 116) c (char 32) s \" t \"] (str s q s q c p c q t q t)))\" ] (str s q s q c p c q t q t)))","user":"568820e8e4b0dcc4269f4067"},{"problem":125,"code":"(fn [] (let [t [\"(fn [] (let [t \" \"] (str (t 0) t (t 1))))\"] ] (str (t 0) t (t 1))))","user":"52593207e4b0cb4875a45cd3"},{"code":"(fn [] (let [s \"(fn [] (let [s %2$s%1$s%2$s] (format s s %3$s%2$s %3$s%3$s)))\"] (format s s \\\" \\\\)))","problem":125,"user":"4f465096e4b0d56e7bb92b9a"},{"code":"(fn [] (let [s [\"(fn [] (let [s \"\"] (apply str (first s) s (last s))))\"]] (apply str (first s) s (last s))))","problem":125,"user":"51c09719e4b0c9c82288293c"},{"code":"(fn [] (let [s \"(fn [] (let [s %s] (format s (pr-str s))))\"] (format s (pr-str s))))","problem":125,"user":"4dae4da5c9a9d6ed4e99dc57"},{"code":"(fn [] (let [q (char 34) s (char 32) h \"(fn [] (let [q (char 34) s (char 32) h \" b \"(str h q h q s (quote b) s q b q (char 93) s b)))\"] (str h q h q s (quote b) s q b q (char 93) s b)))","problem":125,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":125,"code":"(fn [] (let [s \"(fn [] (let [s \" q \"\\\"\" slash \"\\\\\" space \" \" lp \"(\" rp \")\" rb \"]\" t \"(str s q s q space (quote q) space q slash q q space (quote slash) space q slash slash q space (quote space) space q space q space (quote lp) space q lp q space (quote rp) space q rp q space (quote rb) space q rb q space (quote t) space q t q rb space t rp rp)\"] (str s q s q space (quote q) space q slash q q space (quote slash) space q slash slash q space (quote space) space q space q space (quote lp) space q lp q space (quote rp) space q rp q space (quote rb) space q rb q space (quote t) space q t q rb space t rp rp)))","user":"52faec2ee4b047fd55837004"},{"problem":125,"code":"(fn []\n               (let [q (char 34)\n                     s (char 32)\n                     l [\"(fn []\"\n                        \"(let [q (char 34)\"\n                        \"s (char 32)\"\n                        \"l [\"\n                        \"]]\"\n                        \"(str (clojure.string/join s (take 4 l))\"\n                        \"(clojure.string/join s (map (fn [x] (str q x q)) l))\"\n                        \"(clojure.string/join s (drop 4 l)))))\"]]\n                 (str (clojure.string/join s (take 4 l))\n                      (clojure.string/join s (map (fn [x] (str q x q)) l))\n                      (clojure.string/join s (drop 4 l)))))","user":"5344fe13e4b084c2834f4a32"},{"problem":125,"code":"(fn [x] (str \"(fn [x]\" x \")\" x)) \" (str \\\"(fn [x]\\\" x \\\")\\\" x)\"","user":"52cc09c1e4b07d0d72b27356"},{"problem":125,"code":"(fn [] (let [s \"(fn [] (let [s %1$c%2$s%1$c] (format s (char 34) s)))\"] (format s (char 34) s)))","user":"5b64370ae4b0c6492753e73c"},{"problem":125,"code":"(fn [x] (str x x))\r\n\"(fn [x] (str x x))\"","user":"55d0e76ae4b0e31453f64a40"},{"code":"(fn [] (let [l [\n\t       \"(fn [] (let [l \"\n\t       \"] (str (first l) l (second l))))\"\n\t       ]]\n           (str (first l) l (second l))))","problem":125,"user":"5272669de4b03e8d9a4a742e"},{"problem":125,"code":"(fn q [] (let [q-str \"(fn q [] (let [q-str tk] (str (clojure.string/replace-first q-str (str (quote tk)) (str (char 34) q-str (char 34))) (char 41)))\"] (str (clojure.string/replace-first q-str (str (quote tk)) (str (char 34) q-str (char 34))) (char 41))))","user":"5ff676a9e4b06df49cee1497"},{"problem":125,"code":"(fn\n  []\n  (let [s [\"(fn [] (let [s \"\n           \"] (str (first s) s (last s))))\"]]\n    (str (first s) s (last s))))","user":"509a25b7e4b0efbae1fbc0a8"},{"problem":125,"code":"(fn []\n         (let [s (quote (fn [] (let [s (quote :x)]\n                                 (str (clojure.walk/postwalk-replace {(keyword \"x\") s} s)))))]\n           (str (clojure.walk/postwalk-replace {(keyword \"x\") s} s))))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn [P] (str `(~@P)`(~@P)))'(fn [P] (str `(~@P)`(~@P)))","problem":125,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn [x] (str x x)) '(fn [x] (str x x))","problem":125,"user":"4e994541535dbda64a6f6b64"},{"problem":125,"code":"(fn x [] (let [[s1 s2] [\"(fn x [] (let [[s1 s2] [\" \"]] (str s1 (char 34) s1 (char 34) (char 32) (char 34) s2 (char 34) s2)))\"]] (str s1 (char 34) s1 (char 34) (char 32) (char 34) s2 (char 34) s2)))","user":"590b055ae4b047aa04b199c9"},{"code":"(fn [] (let [s \"(fn [] (let [s ] (str (subs s 0 15) (char 34) s (char 34) (subs s 15 75))))\"] (str (subs s 0 15) (char 34) s (char 34) (subs s 15 75))))","problem":125,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn []\n  (str\n    ((fn [x] (list (quote fn) [] (list (quote str) (list x (list 'quote x)))))\n    '(fn [x] (list (quote fn) [] (list (quote str) (list x (list 'quote x))))))))","problem":125,"user":"504f57c7e4b0a02f9cffde71"},{"problem":125,"code":"(letfn [(f [i s] (if (zero? i) (str (char 41) (char 41)) (str (when (odd? i) (char 34)) s (when (odd? i) (char 34)) (f (dec i) s))))] (partial f 2 \"(letfn [(f [i s] (if (zero? i) (str (char 41) (char 41)) (str (when (odd? i) (char 34)) s (when (odd? i) (char 34)) (f (dec i) s))))] (partial f 2 \"))","user":"554680cbe4b0a04f7929953e"},{"problem":125,"code":"(let [esc (fn [text] (clojure.string/replace text #\"[\\\"\\\\]\" \"\\\\\\\\$0\")) twice (fn [pre post] (list pre \\\" (esc pre) \"\\\" \\\"\" (esc post) \\\" post))] (fn [] (apply str (twice \"(let [esc (fn [text] (clojure.string/replace text #\\\"[\\\\\\\"\\\\\\\\]\\\" \\\"\\\\\\\\\\\\\\\\$0\\\")) twice (fn [pre post] (list pre \\\\\\\" (esc pre) \\\"\\\\\\\" \\\\\\\"\\\" (esc post) \\\\\\\" post))] (fn [] (apply str (twice \" \"))))\"))))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":125,"code":"(fn [] ((fn [a] (str (a 0) a (a 1))) [\"(fn [] ((fn [a] (str (a 0) a (a 1))) \" \"))\"]))","user":"596f6683e4b069c0a1a19877"},{"code":"(fn [] (let [src [\"(fn [] (let [src \" \"] (str (src 0) (str src) (src 1))))\"]] (str (src 0) (str src) (src 1))))","problem":125,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"(fn quine [] (let [q (char 34) s (char 32) code [\"(fn quine [] (let [q (char 34) s (char 32) code [\"\"]] (clojure.string/join [(nth code 0) (str q (nth code 0) q) s (str q (nth code 1) q) (nth code 1)])))\"]] (clojure.string/join [(nth code 0) (str q (nth code 0) q) s (str q (nth code 1) q) (nth code 1)])))","problem":125,"user":"52763696e4b03e8d9a4a74d7"},{"problem":125,"code":"(fn [] (let [s \"(fn [] (let [s %s] (format s (pr-str s))))\"]\n                  (format s (pr-str s))))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn []\n  (let [c (char 34) b (char 32) s [\"(fn [] (let [c (char 34) b (char 32) s [\" \"]] (str (s 0) c (s 0) c b c (s 1) c (s 1))))\"]]\n    (str (s 0) c (s 0) c b c (s 1) c (s 1))))","problem":125,"user":"4db85282535d1e037afb218a"},{"problem":125,"code":"(fn [] (let [a (fn [x] (str \"(fn [] (let [a (fn [x] (str \"x\"))] (str (a (str (char 34) (a (str (char 34) (char 32) (quote x) (char 32) (char 34))) (char 34))))))\"))]\n         (str (a (str (char 34) (a (str (char 34) (char 32) (quote x) (char 32) (char 34))) (char 34))))))","user":"567d132ee4b05957ce8c61c3"},{"problem":125,"code":"(fn [] (let [b (char 32) d (char 34) s [\"(fn [] (let [b (char 32) d (char 34) s [\" \"]] (str (get s 0) d (get s 0) d b d (get s 1) d (get s 1))))\"]] (str (get s 0) d (get s 0) d b d (get s 1) d (get s 1))))","user":"4f5cc3b8e4b0030a34fb2b2b"},{"code":"(fn []\n    (let [\n          q (char 34) \n          space (char 32)  \n          s [\n             \"(fn []\"\n             \"(let [q (char 34)\"\n             \"space (char 32)\"\n             \"s [\"\n             \"]]\"\n             \"(apply str (concat (interpose space (take 4 s)) (interpose space (map (fn [x] (str q x q)) s)) (interpose space (drop 4 s))))))\"\n             ]\n         ]\n         (apply str (concat (interpose space (take 4 s)) (interpose space (map (fn [x] (str q x q)) s)) (interpose space (drop 4 s))))))","problem":125,"user":"4fbbcf0ce4b081705acca2ee"},{"problem":125,"code":"(fn qqq [] (let [s [\"(fn qqq [] (let [s \" \"] (str (first s) s (second s))))\"]] (str (first s) s (second s))))","user":"56069006e4b08b23635d3174"},{"problem":125,"code":"; Evil hack\n(fn [& _]\n  (reify nil\n    clojure.lang.IPersistentCollection\n    (seq [_])\n    (cons [_ _])\n    (empty [_])\n    (equiv [_ _] true)))","user":"51e58e02e4b0efabf93c02d0"},{"code":"(fn f [] (let [v [\n                   \"(fn f [] (let [v [\" \n                   \"2\" \n                   \"]] (apply str (concat [(v 0)] [(char 34)] (interpose (str (char 34) (char 32) (char 34)) v) [(char 34)] [(v 2)]))))\" \n                   ]] (apply str (concat [(v 0)] [(char 34)] (interpose (str (char 34) (char 32) (char 34)) v) [(char 34)] [(v 2)]))))","problem":125,"user":"503917a0e4b088a6a14ca763"},{"problem":125,"code":"(fn quine2 [] (let [s \"(fn quine2 [] (let [s %c%s%c] (format s (char 34) s (char 34))))\"] (format s (char 34) s (char 34))))","user":"574f1c24e4b02ea114799255"},{"problem":125,"code":"(fn outer []\n  ((fn inner [input]\n     (clojure.string/join (concat (first input) [input] (last input))))\n    [\"(fn outer [] ((fn inner [input] (clojure.string/join (concat (first input) [input] (last input)))) \" \"))\"]))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn [x] (str x x))\r\n'(fn [x] (str x x))","problem":125,"user":"4dce6e41535d5973398f92a2"},{"problem":125,"code":"(fn [] (let [s \"(fn [] (let [s \\\"%s\\\"] (format s (clojure.string/replace s #\\\"\\\\\\\\|\\\\\\\"\\\" \\\"\\\\\\\\\\\\\\\\$0\\\"))))\"] (format s (clojure.string/replace s #\"\\\\|\\\"\" \"\\\\\\\\$0\"))))","user":"508157b2e4b0946d0443855c"},{"code":"(fn [] (let [x [\"(fn [] (let [x \" \"] (str (first x) x (last x))))\"]] (str (first x) x (last x))))","problem":125,"user":"52463059e4b09dbe66b56198"},{"problem":125,"code":"(fn [] (let [< \"(fn [] (let [< \" > \"_ (char 32) * (char 34) ! (char 62)] (format (apply str (apply concat (repeat 12 (quote (%s))))) < * < * _ ! _ * > * _ >)))\" _ (char 32) * (char 34) ! (char 62)] (format (apply str (apply concat (repeat 12 (quote (%s))))) < * < * _ ! _ * > * _ >)))","user":"5ad63a34e4b0ea6055cfac01"},{"code":"(fn []\n (let [\tq (char 34)\n        x \"(fn [] (let [q (char 34) x (1)] (clojure.string/replace-first x (str (quote (1))) (str q x q))))\"]\n       (clojure.string/replace-first x (str (quote (1))) (str q x q))))","problem":125,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn [] (let [s \"(fn [] (let [s %c%s%c] (format s (char 34) s (char 34))))\"] (format s (char 34) s (char 34))))","problem":125,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn [] (let [code \"(fn [] (let [code ] (str (subs code 0 18) (char 34) code (char 34) (subs code 18))))\"] (str (subs code 0 18) (char 34) code (char 34) (subs code 18))))","problem":125,"user":"4e89f46c535d3e98b8023288"},{"code":"(fn []\n  (let [q (char 34)\n        s (char 32)\n        c [\"(fn [] (let [q (char 34) s (char 32) c [\"\n           \"]] (str (c 0) (str q (c 0) q) s (str q (c 1) q) (c 1))))\"]]\n    (str (c 0) (str q (c 0) q) s (str q (c 1) q) (c 1))))","problem":125,"user":"4e52d815535d302ef430da77"},{"problem":125,"code":"(fn []\n    (let [s \"(fn [] (let [s %s] (format s (pr-str s))))\"]\n      (format s (pr-str s))))","user":"55c5b55fe4b0e31453f649b5"},{"code":"(fn [] (let [s [\"(fn [] (let [s [\" \"]] (apply str (interpose (char 34) [(first s) (first s) (char 32) (second s) (second s)]))))\"]] (apply str (interpose (char 34) [(first s) (first s) (char 32) (second s) (second s)]))))","problem":125,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":125,"code":"(fn []\n     (let [s [\"(fn [] (let [s [\" \"]] (str (s 0) (char 34) (s 0) (char 34) (char 32) (char 34) (s 1) (char 34) (s 1))))\"]]\n       (str (s 0) (char 34) (s 0) (char 34) (char 32) (char 34) (s 1) (char 34) (s 1))))","user":"60460824e4b02d28681c77bc"},{"problem":125,"code":"(fn []\n   (let [c (char 34)\n         s \"(fn [] (let [c (char 34) s %c%s%c] (format s c s c)))\"]\n     (format s c s c)))","user":"566d71b1e4b0a866af6896ca"},{"problem":125,"code":"(fn [] (let [e \\\\ q \\\" s \"(fn [] (let [e %c%c q %c%c s %c%s%c] (format s e e e q q s q)))\"] (format s e e e q q s q)))","user":"4ee26f01535d10e5ff6f5368"},{"code":"(fn [] (let [p \"(fn [] (let [p  i 15] (apply str (concat (take i p) [(char 34) p (char 34)] (drop i p)))))\" i 15] (apply str (concat (take i p) [(char 34) p (char 34)] (drop i p)))))","problem":125,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn [x] (str x x))'(fn [x] (str x x))","problem":125,"user":"4daa374930acd6ed13482a68"},{"code":"(fn [] ((fn [x] (str \"(fn [] (\" x \" (quote \" x \")))\")) (quote (fn [x] (str \"(fn [] (\" x \" (quote \" x \")))\")))))","problem":125,"user":"51729002e4b044b2ef48a850"},{"code":"; Copied from https://gist.github.com/anonymous/1255743, because quines suck.\n(fn []\n  (let [a [\"(fn [] (let [a \"\n           \"] (apply str (a 0) a (a 1))))\"]] (apply str (a 0) a (a 1))))","problem":125,"user":"52f10094e4b05e3f0be25ee8"},{"code":"(fn [] (let [a \"(fn [] (let [a %s] (format a (pr-str a))))\"] (format a (pr-str a))))","problem":125,"user":"4f34eb87e4b0e243712b1eba"},{"problem":125,"code":"(fn [] (let\n   [s \"(fn [] (let [s ] (str (subs s 0 15) (char 34) s (char 34) (subs s 15))))\"]\n   (str (subs s 0 15) (char 34) s (char 34) (subs s 15))))","user":"5e3a25d4e4b01d43a70e8dde"},{"code":"(fn [] ((fn [x] (str (list 'fn [] (list x (list 'quote x))))) '(fn [x] (str (list 'fn [] (list x (list 'quote x)))))))","problem":125,"user":"4e7c8fd1535db169f9c796be"},{"problem":125,"code":"(fn* [] (let [s (quote (fn* [] (let [s (quote %s)] (format (str s) s))))] (format (str s) s)))","user":"501d34f6e4b066e56b9d0b1e"},{"code":"(fn [x] (str x x))(quote (fn [x] (str x x)))","problem":125,"user":"4e7f5a0b535db966e863cc41"},{"problem":125,"code":"(fn [] (let [gen (fn [from] (apply str (concat (take 105 from) from (drop 107 from))))] (gen (str '(fn [] (let [gen (fn [from] (apply str (concat (take 105 from) from (drop 107 from))))] (gen (str '()))))))))","user":"53c38b8ce4b00fb29b22127b"},{"problem":125,"code":"(fn [] (let [s (quote(fn [] (let [s (quote) [x y] (split-at 21 (str s))] (apply str (apply str x) (char 32) s y)))) [x y] (split-at 21 (str s))] (apply str (apply str x) (char 32) s y) ))","user":"548b7db8e4b0e286459a11fd"},{"problem":125,"code":"(fn [x] (str x x)) \n(quote (fn [x] (str x x)))","user":"53e76bb2e4b036ad0777e47d"},{"code":"(fn [] \n  (let [lines [\n      \"(fn [] \"\n      \"(let [lines [\"\n      \"]] \"\n      \"(apply str (concat \"\n      \"(subvec lines 0 2) \"\n      \"(rest (mapcat (fn [line] (list (char 32) (char 34) line (char 34))) (subvec lines 0 7))) \"\n      \"(subvec lines 2 7)))))\"]]\n    (apply str (concat\n      (subvec lines 0 2)\n      (rest (mapcat (fn [line] (list (char 32) (char 34) line (char 34))) (subvec lines 0 7)))\n      (subvec lines 2 7)))))","problem":125,"user":"4ec07699535dfed6da9c6da2"},{"problem":125,"code":"(fn [x]\n   (str x x))\n '(fn [x]\n    (str x x))","user":"5dc88a38e4b02f9375f4e1db"},{"problem":125,"code":"(fn [] (let [s \n[\"(fn [] (let [s \"  \t\n \"] (apply str (get s 0) s (get s 1))))\"\n ]] (apply str (get s 0) s (get s 1))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":125,"code":"(fn []\n  (let [x \"(fn [] (let [x %s] (format x (pr-str x))))\"]\n    (format x (pr-str x))))","user":"591072e0e4b0163c97b36ebc"},{"problem":125,"code":";; why not?\n;;((fn [x] (list x (list 'quote x))) '(fn [x] (list x (list 'quote x))))\n\n;; indenting seems to break this answer... why?\n;;(fn [] (let [e \\\\ q \\\" s \"(fn [] (let [e %c%c q %c%c s %c%s%c] (format s e e e q q s q)))\"] (format s e e e q q s q)))\n\n;; 113213's solution:\n(fn [x] (str x x)) '(fn [x] (str x x))","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn gus-uinundrum [] (let [s [\"(fn gus-uinundrum [] \" \"(let [s [\" \"(str (apply str (map (fn [x] (get s x)) (range 0 2)))\" \"(apply str (map (fn [x] (str (char 34) (get s x) (char 34) (char 32))) (range (- (count s) 1))))\" \"(apply str (map (fn [x] (str (char 34) (get s x) (char 34))) (list (- (count s) 1))))\" \"(char 93) (char 93) (char 32)\" \"(apply str (map (fn [x] (str (get s x) (char 32))) (range 2 7)))\" \"(apply str (map (fn [x] (get s x)) (range 7 8))))))\"]] (str (apply str (map (fn [x] (get s x)) (range 0 2))) (apply str (map (fn [x] (str (char 34) (get s x) (char 34) (char 32))) (range (- (count s) 1)))) (apply str (map (fn [x] (str (char 34) (get s x) (char 34))) (list (- (count s) 1)))) (char 93) (char 93) (char 32) (apply str (map (fn [x] (str (get s x) (char 32))) (range 2 7))) (apply str (map (fn [x] (get s x)) (range 7 8))))))","problem":125,"user":"5273562ae4b03e8d9a4a7479"},{"problem":125,"code":"(fn []\n  (let [s [\"(fn [] (let [s \" \"] (str (s 0) s (s 1))))\"]]\n    (str (s 0) s (s 1))))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn [] (let [code [\"(fn [] (let [code \" \"] (str (nth code 0) (str code) (nth code 1))))\"]] \n         (str (nth code 0) (str code) (nth code 1))))","problem":125,"user":"513d121fe4b0e544971636a2"},{"problem":125,"code":"(fn []\n  ((fn [input] (str (input 0) input (input 1)))\n   [\"(fn [] ((fn [input] (str (input 0) input (input 1))) \" \"))\"]))","user":"529dfc6de4b04e0c58e87b8a"},{"code":"(fn [] (let [p \"(fn [] (let [p %c%s%c] (format p (short 34) p (short 34))))\"] (format p (short 34) p (short 34))))","problem":125,"user":"4ed188c8535d44c135fd68cf"},{"problem":125,"code":"(fn quine [] (let [s [\"(fn quine [] (let [s \"\n                        \"] (clojure.string/join \\\"\\\" (vector (first s) s (last s)))))\"]]\n                 (clojure.string/join \"\" (vector (first s) s (last s)))))","user":"589037b4e4b00487982d51d0"},{"problem":125,"code":"(fn [] (let [a \"(fn [] (let [a %s] (format a (str (char 34) a (char 34)))))\"] (format a (str (char 34) a (char 34)))))","user":"59a0262ee4b0871e7608b82d"},{"code":"(fn [] (let [x [\"(fn [] (let [x \" \"] (str (first x) x (second x))))\"]] (str (first x) x (second x))))","problem":125,"user":"4fa340b4e4b081705acca18c"},{"code":"(fn []\n  (let [dfn \"(fn [] (let [%s] %s))\"\n        q \\\"\n        b \\\\\n        lbnd \"dfn %s%s%s q %s%s b %s%s lbnd %s%s%s lbdy %s%s%s\"\n        lbdy \"(format dfn (format lbnd q dfn q b q b b q lbnd q q lbdy q) lbdy)\"]\n    (format dfn\n            (format lbnd\n                    q dfn q\n                    b q\n                    b b\n                    q lbnd q\n                    q lbdy q)\n            lbdy)))","problem":125,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn [] (let [f \"(fn [] (let [f \\\"#\\\" c (str ((vec f) 16)) r clojure.string/replace] (r f c (-> f (r \\\"\\\\\\\\\\\" \\\"\\\\\\\\\\\\\\\\\\\") (r \\\"\\\\\\\"\\\" \\\"\\\\\\\\\\\\\\\"\\\")))))\" c (str ((vec f) 16)) r clojure.string/replace] (r f c (-> f (r \"\\\\\" \"\\\\\\\\\") (r \"\\\"\" \"\\\\\\\"\")))))","problem":125,"user":"4fe8b6afe4b07c9f6fd12c76"},{"code":"(fn [] (let [q (char 34) _ (char 32) s [\"(fn [] (let [q (char 34) _ (char 32) s [\" \"]] (str (s 0) q (s 0) q _ q (s 1) q (s 1))))\"]] (str (s 0) q (s 0) q _ q (s 1) q (s 1))))","problem":125,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn [] (str ((fn [x] (list (quote fn) [] (list (quote str) (list x (list (quote quote) x))))) (quote (fn [x] (list (quote fn) [] (list (quote str) (list x (list (quote quote) x)))))))))","problem":125,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"(fn [] (let [q (char 34) b (char 93) c \"(fn [] (let [q (char 34) b (char 93) c  (str (subs c 0 39) q c q b (subs c 39))))\"] (str (subs c 0 39) q c q b (subs c 39))))","problem":125,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":125,"code":"(fn [] (let [x\n            [\"(fn [] (let [x \"\n             \"] (apply str (concat (first x) [x] (last x)))))\"]]\n        (apply str (concat (first x) [x] (last x)))))","user":"53bf0913e4b0c98a41f5cc99"},{"code":"(fn [] (let [q (char 34) x \"(fn [] (let [q (char 34) x ] (str (subs x 0 27) q x q (subs x 27))))\"] (str (subs x 0 27) q x q (subs x 27))))","problem":125,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"(fn quine [] (let [f \"(fn quine [] (let [f %s] (format f (pr-str f))))\"] (format f (pr-str f))))","problem":125,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn [x] (str x x))\n\t'(fn [x] (str x x))","problem":125,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn [] (let [a [\"(fn [] (let [a \" \"] (str (first a) (pr-str a) (second a))))\"]] (str (first a) (pr-str a) (second a))))","problem":125,"user":"521b9f92e4b0c4ef0be8304c"},{"code":"(fn [s] (format \"%s%s\" s s)) \"(fn [s] (format \\\"%s%s\\\" s s))\"","problem":125,"user":"5003ee7de4b0678c553fc446"},{"problem":125,"code":"(fn [] (let [f \"(fn [] (let [f %2$c%1$s%2$c] (format f f (char 34))))\"] (format f f (char 34))))","user":"56d68cbae4b0ea9b8538f7cd"},{"code":"(fn [] (let [s \"(fn [] (let [s %s] (format s (str (char 34) s (char 34)))))\"] (format s (str (char 34) s (char 34)))))","problem":125,"user":"5046b003e4b011c5dfee7727"},{"problem":125,"code":"(fn [] ((fn [x] (str x (char 41) (char 41) (char 32) (char 34) x (char 34) (char 41) (char 41))) \"(fn [] ((fn [x] (str x (char 41) (char 41) (char 32) (char 34) x (char 34) (char 41) (char 41)\"))","user":"52ce1abfe4b07d0d72b27389"},{"problem":125,"code":"(fn [] \r\n  (apply str\r\n    ((fn [a] \r\n        (concat \r\n          (conj (subvec a 0 138) (get a 6))\r\n          (subvec a 145)\r\n          (repeat 7 (last a))))\r\n      (vec (apply str (repeat 2 \r\n            (quote \r\n              (fn [] (apply str \r\n                  ((fn [a] \r\n                      (concat\r\n                        (conj (subvec a 0 138) (get a 6))\r\n                        (subvec a 145)\r\n                        (repeat 7 (last a))))\r\n                    (vec (apply str (repeat 2 (quote))))))))))))))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":125,"code":"(fn [] (let [s \"(fn [] (let [s %s] (format s (pr-str s))))\"] (format s (pr-str s))))\n\n;; OMG amalloy's solution is as pure as you can get","user":"4fc4eb1ee4b081705acca354"},{"code":"(fn [] (let [prog-str [\"(fn [] \" \"(let [prog-str \" \"] \" \"(apply str \" \"[(apply str (take 2 prog-str)) \" \"prog-str \" \"(apply str (drop 2 prog-str))])))\"]] (apply str [(apply str (take 2 prog-str)) prog-str (apply str (drop 2 prog-str))])))","problem":125,"user":"50bca033e4b0594b91591c5d"},{"problem":125,"code":"(fn [p] (str p p)) '(fn [p] (str p p))","user":"53664e3be4b0243289761e74"},{"problem":125,"code":"(fn quine [] (let [q (char 34) [f s] [\"(fn quine [] (let [q (char 34) [f s] [\" \"]] (str f (print-str (str q f q) (str q s q)) s)))\"]] (str f (print-str (str q f q) (str q s q)) s)))","user":"5f300f28e4b033932238a682"},{"code":"(fn []\n   (let [code (quote (fn []\n                       (let [code]\n                         (let [l (fn [s p f]\n                                   (let [v (vec s)]\n                                     (seq (assoc v p (f (get v p))))))]\n                           (str (l code 2 (fn [a] (l a 1  (fn [b] (conj b (cons (quote quote) (list code))))))))))))]\n     (let [l (fn [s p f]\n               (let [v (vec s)]\n                (seq (assoc v p (f (get v p))))))]\n       (str (l code 2 (fn [a] (l a 1 (fn [b] (conj b (cons (quote quote) (list code)))))))))))","problem":125,"user":"50c9e5e3e4b0a409464667d7"},{"code":"(fn [] (let [q (char 34)\n\t         s (char 32)\n             a [\"(fn [] (let [q (char 34) s (char 32) a [\"\n                \"]] (str (a 0) q (a 0) q s q (a 1) q (a 1))))\"]]\n         (str (a 0) q (a 0) q s q (a 1) q (a 1))))","problem":125,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(fn [] ((fn [a] (str (apply str (drop-last 2 (str a))) \" (quote \" a \")))\")) \n'(fn [] ((fn [a] (str (apply str (drop-last 2 (str a))) \" (quote \" a \")))\"))))))","problem":125,"user":"4eaede1f535d7eef30807329"},{"problem":125,"code":"(fn []\n  (let [q (char 34) s (char 32)\n        lines [\"(fn [] \"\n               \"(let [q (char 34) s (char 32) lines [\"\n               \"]] \"\n               \"(apply str (concat (take 2 lines) \"\n               \"(interpose (str s) (map (fn [l] (str q l q)) lines)) \"\n               \"(drop 2 lines)))))\"]]\n    (apply str (concat (take 2 lines)\n                       (interpose (str s) (map (fn [l] (str q l q)) lines))\n                       (drop 2 lines)))))","user":"55586905e4b0deb715856e2b"},{"problem":125,"code":"(fn Quines []\n   (let [q  (char 34)\n         lf (char 32)\n         st [\n             \"(fn Quines []\"\n             \"(let [q (char 34)\"\n             \"lf (char 32)\"\n             \"st [\"\n             \"]]\"\n             \"(str\"\n             \"(clojure.string/trim (apply str (for [s (range 4)] (str (st s) lf))))\"\n             \"(clojure.string/trim (apply str (for [s st] (str q s q lf))))\"\n             \"(clojure.string/trim (apply str (for [s (range 4 (count st))] (str (st s) lf)))))))\"\n             ]]\n     (str\n       (clojure.string/trim (apply str (for [s (range 4)] (str (st s) lf))))\n       (clojure.string/trim (apply str (for [s st] (str q s q lf))))\n       (clojure.string/trim (apply str (for [s (range 4 (count st))] (str (st s) lf)))))))","user":"55a372f1e4b0acc240e31537"},{"code":"(fn [x] (str x x))\"(fn [x] (str x x))\"","problem":125,"user":"4f296a80e4b0d6649770a02a"},{"code":"(fn [] (let [s\n                       \"(fn [] (let [s (str nil)] (str (subs s 0 15) (char 34) s (char 34) (subs s 24))))\"\n                       ]\n                   (str (subs s 0 15) (char 34) s (char 34) (subs s 24))))","problem":125,"user":"50563ae2e4b0ce54f56f0405"},{"code":"(fn [] (let [q (char 34) sp (char 32) s [\"(fn [] (let [q (char 34) sp (char 32) s [\" \"]]\" \"(str (nth s 0) q (clojure.string/join (str q sp q) s) q (nth s 1) sp (last s))))\"]] (str (nth s 0) q (clojure.string/join (str q sp q) s) q (nth s 1) sp (last s))))","problem":125,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":125,"code":"(fn quine []\n  (let [strings\n        [\"\\\\\\\"\"\n         \"[\\\"\"\n         \"\\\" \\\"\"\n         \"\\\"] \" \n         \"(fn quine [] (let [strings \" \n         \"slash (first (get strings 0)) \"\n         \"quotes (second (get strings 0)) \" \n         \"escape \"\n         \"(fn [s] (clojure.string/escape s {slash (str slash slash), \"\n         \"quotes (str slash quotes)}))] \" \n         \"(str (get strings 4) \"\n         \"(get strings 1) \"\n         \"(clojure.string/join (get strings 2) (map escape strings)) \"\n         \"(get strings 3) \"\n         \"(apply str (drop 5 strings)))))\"],\n        slash (first (get strings 0)),\n        quotes (second (get strings 0)),\n        escape\n        (fn [s] (clojure.string/escape s {slash (str slash slash),\n                                          quotes (str slash quotes)}))]\n    (str (get strings 4)\n         (get strings 1)\n         (clojure.string/join (get strings 2) (map escape strings))\n         (get strings 3)\n         (apply str (drop 5 strings)))))","user":"4fc6305de4b0ee37620e180b"},{"code":"(fn [] (let [s (str (quote (fn [] (let [s (str (quote %s))] (format s s)))))] (format s s)))","problem":125,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":125,"code":"(fn [] (let [q (char 34)\n             p (char 41)\n             c (vec \"(fn [] (let [q (char 34) p (char 41) c (vec )] (apply str (concat (subvec c 0 44) [q (apply str c) q p] (subvec c 45)))))\")]\n         (apply str (concat (subvec c 0 44) [q (apply str c) q p] (subvec c 45)))))","user":"5c506951e4b0f9f7a8770ec5"},{"code":"(fn [] \n  (let [a [\"(fn [] (let [a \" \"] (str (a 0) a (a 1))))\"]]\n    (str (a 0) a (a 1))))","problem":125,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"code":"(fn quine []\r\n(let [q (char 34)\r\ns (char 32)\r\nl [\"(fn quine []\"\r\n\"(let [q (char 34)\"\r\n\"s (char 32)\"\r\n\"l [\"\r\n\"]]\"\r\n\"(str\"\r\n\"(apply str (interpose s (take 4 l)))\"\r\n\"(apply str (interpose s (for [i (range (count l))] (str q (get l i) q))))\"\r\n\"(apply str (interpose s (drop 4 l))))))\"\r\n]]\r\n(str \r\n(apply str (interpose s (take 4 l)))\r\n(apply str (interpose s (for [i (range (count l))] (str q (get l i) q))))\r\n(apply str (interpose s (drop 4 l))))))","problem":125,"user":"4f036fb3535dcb61093f6ac8"},{"code":"((fn [x] (fn [] (str (list x (list (quote quote) x))))) (quote (fn [x] (fn [] (str (list x (list (quote quote) x)))))))","problem":125,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn* []\n  ((fn [a]\n    (str `(fn* [] (~a '~a))))\n  '(fn [a]\n    (str `(fn* [] (~a '~a))))))","problem":125,"user":"4e49badd535dc968683fc4c9"},{"code":"(fn [] (let [s \"(format f 34 s 34 34 f 34 s)\" f \"(fn [] (let [s %c%s%c f %c%s%c] %s))\"] (format f 34 s 34 34 f 34 s)))","problem":125,"user":"4f3543eee4b0e243712b1ebd"},{"code":"(fn [] (let [form (str '(fn [] (let [form (str '%s)] (format form form))))] (format form form)))","problem":125,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":125,"code":"(fn [] (let [p [\"(fn [] (let [p \" \"] (str (first p) p (second p))))\"]] (str (first p) p (second p))))","user":"4e8768f6535dceadca469850"},{"code":"(fn [] (let [q [\"(fn [] (let [q \" \"] (str (first q) q (last q))))\"]] (str (first q) q (last q))))","problem":125,"user":"4ea1b9e4535d7eef308072b8"},{"problem":125,"code":"(fn [] (let [s [\"(fn [] (let [s [\" \"]] (str (nth s 0) (char 34) (nth s 0) (char 34) (char 32) (char 34) (nth s 1) (char 34) (nth s 1))))\"]] (str (nth s 0) (char 34) (nth s 0) (char 34) (char 32) (char 34) (nth s 1) (char 34) (nth s 1))))","user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn [] (str ((fn [x] (list 'fn [] (list 'str (list x (list 'quote x)))))\n             '(fn [x] (list 'fn [] (list 'str (list x (list 'quote x))))))))","problem":125,"user":"4e8612f8535db62dc21a62f2"},{"problem":125,"code":"(fn [] (let [a [\"(fn [] (let [a \" \"] (str (first a) a (second a))))\"]] (str (first a) a (second a))))","user":"530bf87ee4b02e82168697d5"},{"code":"(fn [] (let [v [\\\\ \" \" \\\" \"(fn [] (let [v [\" \"]]\" \"(apply str (map v [3 0 0 1 2 1 2 1 0 2 1 2 3 2 1 2 4 2 1 2 5 2 4 1 5]))))\"]] (apply str (map v [3 0 0 1 2 1 2 1 0 2 1 2 3 2 1 2 4 2 1 2 5 2 4 1 5]))))","problem":125,"user":"528e64b7e4b0239c8a67aedd"},{"code":"(fn []                                                                                                                         \n  (let [s (str '(fn []                                                                                                         \n             (let [s (str '%s)]                                                                                               \n               (format s s))))]                                                                                               \n    (format s s)))","problem":125,"user":"4daea889edd6309eace4d15b"},{"code":"(let [a \"(let [a %c%s%c] (fn [] (format a 34 a 34)))\"] (fn [] (format a 34 a 34)))","problem":125,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":125,"code":"(fn []\n  (let [s \"(fn [] (let [s %c%s%c] (format s (char 34) s (char 34))))\"]\n    (format s (char 34) s (char 34))))","user":"56ae214ce4b03c432f18735a"},{"problem":125,"code":"#(reify clojure.lang.IPersistentCollection\n   (equiv [[] []] true))","user":"50479524e4b0371827a27bc4"},{"code":"(fn gus [] (let [a \"(fn gus [] (let [a \" b \" quote (char 34) space (char 32) lb (char 98)] (str a quote a quote space lb space quote b quote b)))\" quote (char 34) space (char 32) lb (char 98)] (str a quote a quote space lb space quote b quote b)))","problem":125,"user":"4f725466e4b07046d9f4f030"},{"code":"(fn [] (let [a \"(fn [] (let [a \"\n                      b \" c (char 34) d (char 32)] (str a c a c d (quote b) d c b c b)))\"\n                      c (char 34)\n                      d (char 32)]\n                  (str a c a c d (quote b) d c b c b)))","problem":125,"user":"4facd2fae4b081705acca22f"},{"problem":125,"code":"(fn [] (format \"(fn [] (format %1$s (str (char 34) %1$s (char 34))))\" (str (char 34) \"(fn [] (format %1$s (str (char 34) %1$s (char 34))))\" (char 34))))","user":"5281a445e4b0757a1b17143a"},{"problem":125,"code":"(fn quine [] \n  (let [s (str '(fn quine [] \n                  (let [s (str '%s)] \n                    (format s s))))] \n    (format s s)))","user":"58ed713de4b056aecfd47d84"},{"problem":125,"code":"(fn [] (let [q (char 34) f \"(fn [] (let [q (char 34) f f1 (.substring f 0 27) f2 (.substring f 26)] (str f1 q f q f2)))\" f1 (.substring f 0 27) f2 (.substring f 26)] (str f1 q f q f2)))","user":"5d0bb4fae4b0cc9c91588237"},{"problem":125,"code":"(fn [] (let [s [\"(fn [] (let [s [\" \"]] (str (s 0) (char 34) (s 0) (char 34) (char 32) (char 34) (s 1) (char 34) (s 1))))\"]] (str (s 0) (char 34) (s 0) (char 34) (char 32) (char 34) (s 1) (char 34) (s 1))))","user":"53513d28e4b084c2834f4ae3"},{"code":"(fn [] (let [f \"(fn [] (let [f Q%sQ] (format (. f replace (str (char 81)) (str (char 34))) f)))\"] (format (. f replace (str (char 81)) (str (char 34))) f)))","problem":125,"user":"4ee82539535d93acb0a66878"},{"code":"(fn [] (let [[q s B E] (map char [34 32 93 101]) b \"(fn [] (let [[q s B E] (map char [34 32 93 101]) b \" e \"(str b q b q s E s q e q B s e)))\"] (str b q b q s E s q e q B s e)))","problem":125,"user":"4f32a7f1e4b0d6649770a095"},{"code":"(fn []\n  (let [s (quote\n            (fn []\n              (let [s (quote)]\n                (str (subs (str s) 0 21)\n                     \" \" s\n                     (subs (str s) 21)))))]\n  (str (subs (str s) 0 21)\n       \" \" s\n       (subs (str s) 21))))","problem":125,"user":"4f8345c6e4b033992c121c1b"},{"problem":125,"code":"(fn []\n  (let [q (first (Character/toChars 34))\n        f-c (first (Character/toChars 102))\n        c (first (Character/toChars 93))\n        s (first (Character/toChars 32))\n        i \"(fn [] (let [q (first (Character/toChars 34)) f-c (first (Character/toChars 102)) c (first (Character/toChars 93)) s (first (Character/toChars 32)) i \"\n        f \"(str i q i q s f-c s q f q c s f)))\"]\n    (str i q i q s f-c s q f q c s f)))","user":"52c8758be4b0c2d177d62135"},{"problem":125,"code":"(fn mysrc ([] (mysrc \"(fn mysrc ([] (mysrc \" \"space\" \\space \\\\ \\\" \")) ([a ss s b q c] (str a q a q s q ss q s b ss s b b s b q s q c q c)))\")) ([a ss s b q c] (str a q a q s q ss q s b ss s b b s b q s q c q c)))","user":"53f7820be4b0de5c41848560"},{"problem":125,"code":"(fn [] (let [q (str (quote (fn [] (let [q (str (quote %s))] (format q q)))))] (format q q)))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"( fn[s] ( str s s)) ' ( fn[s] ( str s s))","problem":125,"user":"5225b16de4b0d2f5d1e2c0ed"},{"problem":125,"code":"(fn [] (let [dq (char 34) sp (char 32)\n             ss [\"(fn [] (let [dq (char 34) sp (char 32) ss [\"\n                 \"] (str (ss 0) dq (ss 0) dq sp dq (ss 1) dq (char 93) (ss 1))))\"]]\n         (str (ss 0) dq (ss 0) dq sp dq (ss 1) dq (char 93) (ss 1))))","user":"583e27e2e4b089d5ab817daa"},{"problem":125,"code":"(fn [] (let [q (char 34) s (char 32) c [\"(fn [] (let [q (char 34) s (char 32) c [\" \"]] (str (c 0) q (c 0) q s q (c 1) q (c 1))))\"]] (str (c 0) q (c 0) q s q (c 1) q (c 1))))","user":"55ccdc6be4b0e31453f64a18"},{"problem":125,"code":"(fn [] (let [q (char 34) x (char 41) f (fn [s] (str s q s q x x x))] (f \"(fn [] (let [q (char 34) x (char 41) f (fn [s] (str s q s q x x x))] (f \")))","user":"553e0b70e4b0a04f792994e8"},{"code":"(fn [x] (str x x))\n'(fn [x] (str x x))","problem":125,"user":"4db8ec47535d1e037afb219d"},{"problem":125,"code":"(fn [] (let [q (char 34) sp (char 32) [pre post] [\n         \"(fn [] (let [q (char 34) sp (char 32) [pre post] [\"\n         \"]] (str pre q pre q sp q post q post)))\"\n         ]] (str pre q pre q sp q post q post)))","user":"530b8580e4b02e82168697cc"},{"problem":125,"code":"(fn [] (let [q \"(fn [] (let [q %c%s%c] (format q (char 34) q (char 34))))\"] (format q (char 34) q (char 34))))","user":"58f98231e4b0438e51c2cf4c"},{"code":"(fn [] (let [s \"(fn [] (let [s ] (str (subs s 0 15) (char 34) s (char 34) (subs s 15))))\"] (str (subs s 0 15) (char 34) s (char 34) (subs s 15))))","problem":125,"user":"50bce014e4b0594b91591c63"},{"problem":125,"code":"(fn [] (let [s [\"(fn [] (let [s \", \"] (str (first s) s (last s))))\"]] (str (first s) s (last s))))","user":"53f6d555e4b0db01ade6f9e5"},{"problem":125,"code":"(fn []\n    ((fn [input]\n       (clojure.string/join (concat (first input) [input] (last input))))\n     [\"(fn [] ((fn [input] (clojure.string/join (concat (first input) [input] (last input)))) \" \"))\"]))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":125,"code":"(fn [] (letfn [(repr [s] (str \\\" (reduce (fn [acc ch] (str acc (case ch \\\\ \"\\\\\\\\\" \\newline \"\\\\n\" \\\" \"\\\\\\\"\" ch))) s) \\\"))] (let [firstbit \"(fn [] (letfn [(repr [s] (str \\\\\\\" (reduce (fn [acc ch] (str acc (case ch \\\\\\\\ \\\"\\\\\\\\\\\\\\\\\\\" \\\\newline \\\"\\\\\\\\n\\\" \\\\\\\" \\\"\\\\\\\\\\\\\\\"\\\" ch))) s) \\\\\\\"))] (let [\" beg \" beg (str firstbit \\\"firstbit \\\" (repr firstbit) \\\" beg \\\" (repr beg) beg \\\"] beg)))\\\")\" beg (str firstbit \"firstbit \" (repr firstbit) \" beg \" (repr beg) beg \"] beg)))\")] beg)))","user":"51b76227e4b0d906fcd71d35"},{"code":"(fn Quine []\n  (let [sauce [\"(fn Quine [] (let [sauce [\" \n               \"]] (str (sauce 0) (pr-str (sauce 0) (sauce 1)) (sauce 1))))\"]] \n   (str (sauce 0) (pr-str (sauce 0) (sauce 1)) (sauce 1))))","problem":125,"user":"50e1bdd8e4b019fc399ce17f"},{"code":"; Stole it from Tom (scarytom)\n(fn [] (let [x \"(fn [] (let [x %s] (format x (pr-str x))))\"] (format x (pr-str x))))","problem":125,"user":"5003deb9e4b0678c553fc445"},{"problem":125,"code":"; there's probably a way easier way to do this but\n; this is my default method of quining in other languages\n(fn []\n  (let [encoded \"KGZuIFtdIChsZXQgW2VuY29kZWQgIm1hZ2ljLTIiIG1hZ2ljLTEgKFN0cmluZy4gKGphdmF4LnhtbC5iaW5kLkRhdGF0eXBlQ29udmVydGVyL3BhcnNlQmFzZTY0QmluYXJ5IGVuY29kZWQpKV0gKGNsb2p1cmUuc3RyaW5nL3JlcGxhY2UtZmlyc3QgbWFnaWMtMSAjIm1hZ2ljLTIiIGVuY29kZWQpKSk=\"\n        magic-1 (String. (javax.xml.bind.DatatypeConverter/parseBase64Binary encoded))]\n    (clojure.string/replace-first magic-1 #\"magic-2\" encoded)\n  )\n)","user":"5aa998c6e4b0d174b936c8e5"},{"problem":125,"code":"(fn [s] (str s s)) \"(fn [s] (str s s))\"","user":"53ce4cd4e4b00fb29b2212ef"},{"code":"(fn []\n  (let [self (quote (fn []\n                      (let [self :self\n                            lets (second (first (drop 2 self)))]\n                        (str (list (first self) (second self)\n                                   (list (quote let)\n                                         (replace {:self (list 'quote self)} lets)\n                                         (first (drop 2 (first (drop 2 self))))))))))\n        lets (second (first (drop 2 self)))]\n    (str (list (first self) (second self)\n               (list (quote let)\n                     (replace {:self (list 'quote self)} lets)\n                     (first (drop 2 (first (drop 2 self)))))))))","problem":125,"user":"4ff355a1e4b0678c553fc34d"},{"problem":125,"code":"(fn gus []\n(let [q (char 34)\nl [\n\"(fn gus []\"\n\" (let [q (char 34)\"\n\" l [\"\n\" \"\n\"]]\"\n\" (apply str\"\n\" (flatten (concat\"\n\" (take 3 l)\"\n\" (str q (first l) q)\"\n\" (map (fn [x] (str (first (drop 3 l)) q x q)) (rest l))\"\n\" (drop 4 l))))))\"\n]]\n(apply str\n(flatten (concat\n(take 3 l)\n(str q (first l) q)\n(map (fn [x] (str (first (drop 3 l)) q x q)) (rest l))\n(drop 4 l))))))","user":"540e8d13e4b0addc1aec671e"},{"problem":125,"code":"(fn quine []\n  (let [space (char 32)\n        d-quote (char 34)\n        strs\n        [\n         \"(fn quine []\"\n         \"(let [space (char 32)\"\n         \"d-quote (char 34)\"\n         \"strs\"\n         \"[\"\n         \"]]\"\n         \"(->> strs\"\n         \"(map (fn [line] (str d-quote line d-quote)))\"\n         \"((fn [*] (concat [(clojure.string/join (str space) (take 5 strs))]\"\n         \"[(clojure.string/join (str space) *)]\"\n         \"[(clojure.string/join (str space) (drop 5 strs))])))\"\n         \"clojure.string/join)))\"\n         ]]\n    (->> strs\n         (map (fn [line] (str d-quote line d-quote)))\n         ((fn [*] (concat [(clojure.string/join (str space) (take 5 strs))]\n                          [(clojure.string/join (str space) *)]\n                          [(clojure.string/join (str space) (drop 5 strs))])))\n         clojure.string/join)))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":125,"code":"(fn quine []\n  (let [body \"(fn quine [] (let [body %s] (format body (pr-str body))))\"]\n    (format body (pr-str body))))","user":"540a4f20e4b0addc1aec66ef"},{"problem":125,"code":"(fn [] (let [escape (fn [x] (clojure.string/replace (clojure.string/replace x \"\\\\\" \"\\\\\\\\\") \"\\\"\" \"\\\\\\\"\")) start \"(fn [] (let [escape (fn [x] (clojure.string/replace (clojure.string/replace x \\\"\\\\\\\\\\\" \\\"\\\\\\\\\\\\\\\\\\\") \\\"\\\\\\\"\\\" \\\"\\\\\\\\\\\\\\\"\\\")) start \" end \"] (str start \\\\\\\" (escape start) \\\\\\\" \\\" end \\\" \\\\\\\" (escape end) \\\\\\\" end)))\"] (str start \\\" (escape start) \\\" \" end \" \\\" (escape end) \\\" end)))","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn [x] (str x x)) (quote (fn [x] (str x x)))","problem":125,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":125,"code":"(fn f\n  ([] (str (f (quote (list (quote fn) (quote f) (list [] (list (quote str) (list (quote f) (list (quote quote) x)))) (list [(quote x)] x))))))\n  ([x] (list (quote fn) (quote f) (list [] (list (quote str) (list (quote f) (list (quote quote) x)))) (list [(quote x)] x))))","user":"56795deae4b05957ce8c6187"},{"code":"(fn q []\n  (let [s (str '(fn q [] (let [s (str (quote ))] (str (.substring s 0 28) (str \\space) s (.substring s 28)))))]\n    (str (.substring s 0 28) (str \\space) s (.substring s 28))\n  )\n)","problem":125,"user":"50588af1e4b06522596eba7d"},{"code":"(fn [] (let [s (char 32) q (char 34) ls [\"(fn [] (let [s (char 32) q (char 34) ls [\" \"]] (apply str (concat (take 1 ls) [q (first ls) q s q (second ls) q] (drop 1 ls)))))\"]] (apply str (concat (take 1 ls) [q (first ls) q s q (second ls) q] (drop 1 ls)))))","problem":125,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn []\n  (let [s (char 32) \n        q (char 34)\n        a \"(fn [] (let [s (char 32) q (char 34) a \"\n        b \"] (str a q a q s (quote b) s q b q b)))\"]\n    (str a q a q s 'b s q b q b)))","problem":125,"user":"4ef49c2c535dced4c769f238"},{"code":"(fn []\n  (let [prog [\n        \"(fn [] (let [prog [\"\n        \"]] (str (first prog) (apply str (drop-last (rest (str prog)))) (last prog))))\"\n        ]]\n    (str\n     (first prog)\n     (apply str (drop-last (rest (str prog))))\n     (last prog))))","problem":125,"user":"51780f88e4b03d69594194c9"},{"code":"(fn [x] (str x x)) \"(fn [x] (str x x))\"","problem":125,"user":"4f6fbb68e4b07046d9f4efeb"},{"code":"(fn [] \n  ((fn [x] (format \"(fn [] %s)\" (list x (list (quote quote) x))))\n   (quote (fn [x] (format \"(fn [] %s)\" (list x (list (quote quote) x)))))))","problem":125,"user":"4db1b3951254ad5b4805fa6f"},{"problem":125,"code":"(fn []\n  (let [p [\"(fn [] (let [p \"\n           \"] (str (first p) p (last p))))\"]]\n  (str (first p) p (last p))))","user":"55625903e4b0c656e3ff17d7"},{"problem":125,"code":"(fn [s] (str s s)) (quote (fn [s] (str s s)))","user":"4ebbff41535dfed6da9c6d78"},{"problem":125,"code":"(fn __ [] (let [lines [\n               \"(fn __ [] (let [lines [\"\n               \"] res (str (first lines) (clojure.string/join (char 32) (map (fn [a] (str (char 34) a (char 34))) lines)) (last lines))] res))\"\n              ] res (str (first lines) (clojure.string/join (char 32) (map (fn [a] (str (char 34) a (char 34))) lines)) (last lines))] res))","user":"58bc6a88e4b0888cdc949d16"},{"code":"(fn []\n  (let [x \"(fn [] (let [x 0] (reduce str (map (fn [i] (if (= (int i) 48) (str (char 34) x (char 34)) i)) x))))\"]\n    (reduce str (map (fn [i] (if (= (int i) 48) (str (char 34) x (char 34)) i)) x))))","problem":125,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn [] \n  ((fn [x] (str x (char 34) x (char 34) (char 41) (char 41))) \n      \"(fn [] ((fn [x] (str x (char 34) x (char 34) (char 41) (char 41))) \"))","problem":125,"user":"509c03f3e4b085ae113522a8"},{"code":"(fn* [] (let [s \"(fn* [] (let [s %1$c%2$s%1$c] (format s (char 34) s)))\"] (format s (char 34) s)))","problem":125,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":125,"code":"(fn [] (let [q (char 34) s \"(fn [] (let [q (char 34) s (str (subs s 0 27) q s q (char 93) (subs s 26))))\"] (str (subs s 0 27) q s q (char 93) (subs s 26))))","user":"4f05ea25535dcb61093f6c02"},{"problem":125,"code":"(fn* [] (let [s \"(fn* [] (let [s %s] (format s (pr-str s))))\"] (format s (pr-str s))))","user":"4faf97d8e4b081705acca258"},{"problem":125,"code":"(fn [] ((fn [s] (str \"(fn [] ((fn [s] \" s \") (quote \" s \")))\")) (quote (str \"(fn [] ((fn [s] \" s \") (quote \" s \")))\"))))","user":"54dd76c8e4b024c67c0cf794"},{"code":"(fn [] (let [q (char 34) sp (char 32) s [\"(fn [] (let [q (char 34) sp (char 32) s [\" \"]] (str (s 0) q (s 0) q sp q (s 1) q (s 1))))\"]] (str (s 0) q (s 0) q sp q (s 1) q (s 1))))","problem":125,"user":"4ddbfb8a535d02782fcbea00"},{"problem":125,"code":"(fn []\n  (let [a \"(fn [] (let \" b \" (str a [(quote a) a (quote b) b] b)))\"]\n    (str a [(quote a) a (quote b) b] b)))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn [] (let [f \"(fn [] (let [f %s%s%s q (char 34)] (format f q f q)))\" q (char 34)] (format f q f q)))","problem":125,"user":"53300924e4b019098a6f8b55"},{"code":"(fn [] (let [q (char 34) s \"(fn [] (let [q (char 34) s ] (str (subs s 0 27) q s q (subs s 27))))\"] (str (subs s 0 27) q s q (subs s 27))))","problem":125,"user":"52015698e4b0d7096e99ddba"},{"problem":125,"code":"(fn []\n                (let [parts [\"(fn [] \"\n                             \"(let [parts \"\n                             \"]\"\n                             \" (apply str (concat (take 2 parts) [parts] (drop 2 parts)))))\"]]\n                  (apply str (concat (take 2 parts) [parts] (drop 2 parts)))))","user":"55d28b38e4b0e31453f64a58"},{"problem":125,"code":"(fn []\n     (let [f \"(fn [] (let [f %c%s%1$c] (format f %3$c%1$c f %3$c%3$c)))\"]\n       (format f \\\" f \\\\) \n     )   \n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":125,"code":"(fn []\n  (let [q (char 34)\n        s (char 32)\n        c [\"(fn [] (let [q (char 34) s (char 32) c [\"\n           \"]] (apply str (concat (c 0) [q (c 0) q s q (c 1) q] (c 1)))))\"]]\n    (apply str (concat (c 0) [q (c 0) q s q (c 1) q] (c 1)))))","user":"5666500ee4b0e91d5f5c566d"},{"code":"(fn [a] (apply str (take 2 (repeat a))))'(fn [a] (apply str (take 2 (repeat a))))","problem":125,"user":"4dcfbc44535d5973398f92a7"},{"problem":125,"code":"(fn [] (let [q (char 34) sp (char 32) ce (char 101) s1 \"(fn [] (let [q (char 34) sp (char 32) ce (char 101) s1 \" e \"] (str s1 q s1 q sp ce sp q e q e)))\"] (str s1 q s1 q sp ce sp q e q e)))","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn [] \n  ((fn [x] (str (list (quote fn) (vector) (list x (list (quote quote) x))))) \n   (quote (fn [x] (str (list (quote fn) (vector) (list x (list (quote quote) x))))))))","problem":125,"user":"519ef784e4b087743fad2198"},{"code":"(fn [s] (str s s)) '(fn [s] (str s s))","problem":125,"user":"4f01c938535dcb61093f6a39"},{"problem":125,"code":"(fn [] (let [b (str (quote (clojure.string/replace-first (clojure.string/replace-first (clojure.string/replace a #\"y\" b) #\"x\" a) #\"k\" b))) a (str (quote (fn [] (let [b (str (quote k)) a (str (quote x))] y))))] (clojure.string/replace-first (clojure.string/replace-first (clojure.string/replace a #\"y\" b) #\"x\" a) #\"k\" b)))","user":"57717915e4b0979f896515b3"},{"code":"(fn []\n  (let [s [\"(fn [] \"\n           \"(let [s \"\n           \"]\"\n           \" (apply str (concat (take 2 s) [s] (drop 2 s)))))\"]]\n    (apply str (concat (take 2 s) [s] (drop 2 s)))))","problem":125,"user":"514d7e29e4b019235f6c0587"},{"problem":125,"code":"(fn [] ((fn [a] (str a (char 32) (char 34) a (char 34) (char 41) (char 41))) \"(fn [] ((fn [a] (str a (char 32) (char 34) a (char 34) (char 41) (char 41)))\"))","user":"56018dd4e4b04bb52996e18f"},{"problem":125,"code":"(fn []\n    (let [code (str\n                (quote (fn []\n                         (let [code (str\n                                     (quote ()\n                                            ))]\n                           (->> (concat (take 30 code)\n                                        (take 30 code)\n                                        (take 139 (drop 30 code))\n                                        (take 5 (drop 31 code))\n                                        (take 140 (drop 36 code)))\n                                (apply str))))\n                       ))]\n      (->> (concat (take 30 code)\n                   (take 30 code)\n                   (take 139 (drop 30 code))\n                   (take 5 (drop 31 code))\n                   (take 140 (drop 36 code))\n                   )\n           (apply str))))","user":"5d81b40ce4b0915913b1d379"},{"code":";; pcavs's solution to Gus' Quinundrum\n;; https://4clojure.com/problem/125\n\n(fn []\n  (let [a [\"(fn [] (let [a \"\n           \"] (apply str (a 0) a (a 1))))\"]] (apply str (a 0) a (a 1))))","problem":125,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn quine [] (let [q (char 34) s (char 32) l [                                                               \n\"(fn quine [] (let [q (char 34) s (char 32) l [\"                                                                   \n\"]] (str (first l) q (first l) q s q (last l) q (last l))))\"                                                       \n]] (str (first l) q (first l) q s q (last l) q (last l))))","problem":125,"user":"51899891e4b0288ada3dbdab"},{"code":"(fn [] (let [x [\"(fn [] (let [x [\" \"]] (str (x 0) (pr-str (x 0) (x 1)) (x 1))))\"]] (str (x 0) (pr-str (x 0) (x 1)) (x 1))))","problem":125,"user":"4f0d093b535d0136e6c22313"},{"code":"(fn [] \r\n  (let [nn (str 'nth 'next)]\r\n    (letfn [\r\n      (f [i s]\r\n        (if (== i 0) s\r\n          (f (dec i) (.replace s nn (str (quote \r\n;; repeat begin\r\n(fn [] \r\n  (let [nn (str 'nth 'next)]\r\n    (letfn [\r\n      (f [i s]\r\n        (if (== i 0) s\r\n          (f (dec i) (.replace s nn (str (quote \r\n;; repeat begin\r\n  nthnext\r\n;; repeat end\r\n       ))))))]\r\n    (f 2 nn))))\r\n;; repeat end\r\n       ))))))]\r\n    (f 2 nn))))","problem":125,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn []\n  (let [q (char 34)\n        s (list \"(fn [] (let [q (char 34) s (list \"\n                \")] (apply str (first s) q (clojure.string/join (str q (char 32) q) s) q (rest s))))\")]\n    (apply str (first s) q (clojure.string/join (str q (char 32) q) s) q (rest s))))","problem":125,"user":"50bfe95ce4b080409b860f27"},{"problem":125,"code":"(fn [] ((let [c (fn [x] (.replace x (char 44) (char 34))) d (fn [x] (.replace x (char 59) (char 34)))] (fn [x] (str \"(fn [] (\" (c x) (d \" ;\") x (d \";))\")))) \"(let [c (fn [x] (.replace x (char 44) (char 34))) d (fn [x] (.replace x (char 59) (char 34)))] (fn [x] (str ,(fn [] (, (c x) (d , ;,) x (d ,;)),))))\"))","user":"547d8e93e4b0c51c1f4d72f4"},{"code":"(fn [] (let [p \"(fn [] (let [p %c%s%c] (format p 34 p 34)))\"] (format p 34 p 34)))","problem":125,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn [] (let [s (quote (fn [] (let [s %s] (format (str s) (str (char 40) (quote quote) (char 32) s (char 41))))))] (format (str s) (str (char 40) (quote quote) (char 32) s (char 41)))))","problem":125,"user":"4e68c434535d8ccf87e9fe89"},{"problem":125,"code":"(fn []\n  (let [x [\"(fn [] (let [x \" \n           \"] (str (x 0) x (x 1))))\"]]\n    (str (x 0) x (x 1))))","user":"56c4f43ce4b05cc29241ee9c"},{"code":"(fn []\n  (let [q (char 34)\n        s (char 32)\n        v [\"(fn [] (let [q (char 34) s (char 32) v [\"\n           \"]] (str (v 0) q (v 0) q s q (v 1) q (v 1))))\"]]\n    (str (v 0) q (v 0) q s q (v 1) q (v 1))))","problem":125,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn [] (let [q (char 34) a [\"(fn [] (let [q (char 34) a [\" \"]] (str (a 0) q (a 0) q (char 32) q (a 1) q (a 1))))\"]] (str (a 0) q (a 0) q (char 32) q (a 1) q (a 1))))","problem":125,"user":"4f1d1d95535d64f603146488"},{"problem":125,"code":"(fn [] (let [c (str (char 34)) s (str (char 32)) [a b] [\"(fn [] (let [c (str (char 34)) s (str (char 32)) [a b] [\" \"]] (str a c a c s c b c b)))\"]] (str a c a c s c b c b)))","user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"(fn [a] (str a a)) '(fn [a] (str a a))","problem":125,"user":"4ebaf790535dfed6da9c6d6e"},{"code":"(fn [] (let [me [\"(fn [] (let [me \" \"] (apply str (me 0) me (me 1))))\"]] (apply str (me 0) me (me 1))))","problem":125,"user":"4f04b66b535dcb61093f6bdd"},{"problem":125,"code":"(fn [] (let [ret (str \"(fn [] (let [ret (str %c%s%c)] (format ret (char 34) ret (char 34))))\")] (format ret (char 34) ret (char 34))))","user":"5b13ba71e4b0cc2b61a3be53"},{"code":"(fn [] (let [s (str (quote \n\n(fn [] (let [s (str (quote \n\nnil\n\n))] (.replaceFirst s \"nil\" s)))\n\n))] (.replaceFirst s \"nil\" s)))","problem":125,"user":"50901b2ee4b0ea685a20f774"},{"code":"(fn []\n    (let [s \"(fn [] (let [s +] (.replace s (str (char 43)) (str (char 34) s (char 34)))))\"]\n      (.replace s (str (char 43)) (str (char 34) s (char 34)))))","problem":125,"user":"514c2d05e4b02b8cbb2a9278"},{"code":"(fn [] ((fn [x] (str (list (quote fn) (quote []) (list x (list (quote quote) x)))))\n          (quote (fn [x] (str (list (quote fn) (quote []) (list x (list (quote quote) x))))))))","problem":125,"user":"52b43468e4b0c58976d9ad1b"},{"code":"(fn [] (let [[a b :as c] [\"(fn [] (let [[a b :as c] \" \"] (str a c b)))\"]] (str a c b)))","problem":125,"user":"4f031eac535dcb61093f6a67"},{"problem":125,"code":"(fn gus []\n  (let [c [\"(fn gus [] \" \"(let [c \" :string \"] \" \"(apply str (assoc c 2 (str c)))))\"]]\n    (apply str (assoc c 2 (str c)))))","user":"55a9e0fee4b0988bba2ad945"},{"problem":125,"code":"(fn f [] (let [s \"(fn f [] (let [s \" e \"] (str s (char 34) s (char 34) (char 32) (char 101) (char 32) (char 34) e (char 34) e)))\"] (str s (char 34) s (char 34) (char 32) (char 101) (char 32) (char 34) e (char 34) e)))","user":"54c271b9e4b045293a27f602"},{"problem":125,"code":"(fn [] (let [q \"\\\"\" bs \"\\\\\" com \",\" make (fn [x] (let [[a b c d e f] (vec (.split x \",\"))] (str a q bs q q b q bs bs q c q com q d q com q e q x q f)))] (make \"(fn [] (let [q , bs , com , make (fn [x] (let [[a b c d e f] (vec (.split x ,))] (str a q bs q q b q bs bs q c q com q d q com q e q x q f)))] (make ,)))\")))","user":"5b465b8be4b02d533a91bc65"},{"code":"(fn [] \r\n  (let [[q s h f] [(char 34) (char 32)\r\n      \"(fn [] (let [[q s h f] [(char 34) (char 32) \"\r\n      \"]] (str h q h q s q f q f)))\"]] \r\n    (str h q h q s q f q f)))","problem":125,"user":"50336c6be4b0c6c1199c710f"},{"code":"(fn [] (let [[s1 s2] (map (partial apply str) (split-at 59 \"(fn [] (let [[s1 s2] (map (partial apply str) (split-at 59 ))] (str s1 (char 34) s1 s2 (char 34) s2)))\"))] (str s1 (char 34) s1 s2 (char 34) s2)))","problem":125,"user":"5002b6e5e4b0678c553fc42c"},{"problem":125,"code":"(fn quine [] (let [s \"(fn quine [] (let [s ] (str (subs s 0 21) (char 34) s (char 34) (subs s 21))))\"] (str (subs s 0 21) (char 34) s (char 34) (subs s 21))))","user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn [] ((fn [s] (let [q (char 34) p (char 41)] (str s q s q p p))) \"(fn [] ((fn [s] (let [q (char 34) p (char 41)] (str s q s q p p))) \"))","problem":125,"user":"4effb663535dcb61093f6a2e"},{"problem":125,"code":"(fn t [] (let [q (char 34) s (char 32) [h t] [\"(fn t [] (let [q (char 34) s (char 32) [h t] [\" \"]] (str h (str q h q s q t q) t)))\"]] (str h (str q h q s q t q) t)))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":125,"code":"(fn []\n  (let [lst [\"(fn [] (let [lst \"\n             \"] (str (first lst) lst (last lst))))\"]]\n    (str (first lst)\n         lst\n         (last lst))))","user":"4eec82fe535d93acb0a668ae"},{"code":"(fn [] (let [c (char 34) s \"(fn [] (let [c (char 34) s :T] (.replaceFirst s (str :T) (str c s c))))\"] (.replaceFirst s (str :T) (str c s c))))","problem":125,"user":"507fbd77e4b089ade05efbd3"},{"problem":125,"code":"(fn [] ((fn [sin] (clojure.string/join (concat (first sin) [sin] (last sin)))) [\"(fn [] ((fn [sin] (clojure.string/join (concat (first sin) [sin] (last sin)))) \" \"))\"]))","user":"59ff9424e4b01bb0ae8afd24"},{"code":"(fn []\r\n  (let [a [\"(fn [] (let [a \"\r\n           \"] (apply str (a 0) a (a 1))))\"]] (apply str (a 0) a (a 1))))","problem":125,"user":"4f13047d535d64f60314642c"},{"problem":125,"code":"(fn [] (let [x '(fn [] (let [x '()]  (str \n (seq\n  (map \n   (fn [a] \n     (if\n       (list? a)\n       (map\n        (fn [b] \n          (if \n           (and \n            (vector? b) \n            (= 2 (count b))\n            ) \n           ['x (list 'quote x)] \n           b)\n          )\n        a)\n       a)\n     ) \n   x)))))] \n      (str \n (seq\n  (map \n   (fn [a] \n     (if\n       (list? a)\n       (map\n        (fn [b] \n          (if \n           (and \n            (vector? b) \n            (= 2 (count b))\n            ) \n           ['x (list 'quote x)] \n           b)\n          )\n        a)\n       a)\n     ) \n   x))))\n  )","user":"5094057fe4b097f48cc38593"},{"code":"#(let [x \"(fn* [] (let [x %s] (format x (pr-str x))))\"] (format x (pr-str x)))","problem":125,"user":"52d2ca1ce4b099d49816f0b4"},{"code":"(fn [] (let [l [\"(fn [] (let [l \" \"] (str (l 0) l (l 1))))\"]] (str (l 0) l (l 1))))","problem":125,"user":"522b922ee4b0d34ee08e71c3"},{"code":"(fn x [] (let [s (str (quote (fn x [] (let [s (str (quote))] (apply str (concat (take 28 s) [(char 32)] s (drop 28 s)))))))] (apply str (concat (take 28 s) [(char 32)] s (drop 28 s)))))","problem":125,"user":"503354c3e4b0c6c1199c710c"},{"problem":125,"code":"(fn [x] (str x x))\n '(fn [x] (str x x))","user":"56f7ecdfe4b08e7d20b96834"},{"code":"(fn []\n  (let [prog '(fn []\n                (let [prog nil]\n                  (str\n                    (cons 'fn\n                      (cons '[]\n                        (list\n                          (list* 'let ['prog (list 'quote prog)] (list (-> prog (nth 2) (nth 2))))))))))]\n    (str\n      (cons 'fn\n        (cons '[]\n          (list\n            (list* 'let ['prog (list 'quote prog)] (list (-> prog (nth 2) (nth 2))))))))))","problem":125,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn [] \n  ((fn [x] (str \"(fn [] (\" x \" (quote \" x \")))\")) \n   (quote (fn [x] (str \"(fn [] (\" x \" (quote \" x \")))\")))))","problem":125,"user":"5201572be4b0d7096e99ddbb"},{"code":"(fn [] (let [q (char 34) \n            [b e] [\"(fn [] (let [q (char 34) [b e] [\"\n                   \"]] (apply str b q b q (char 32) q e q e)))\"]]\n        (apply str  b q b q (char 32) q e q e)))","problem":125,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":125,"code":"(fn [] (let [x \"(fn [] (let [x y] (clojure.string/replace-first x (char 121) (str (char 34) x (char 34)))))\"] (clojure.string/replace-first x (char 121) (str (char 34) x (char 34)))))","user":"55c4e48be4b0e31453f649a7"},{"problem":125,"code":"(fn []\n(let [c (char 34)\ns [\n\"(fn [] \"\n\"(let [c (char 34) \"\n\"s [\"\n\"]] \"\n\"(str (apply str (take 3 s)) \"\n\"(apply str (apply pr-str s)) \"\n\"(apply str (drop 3 s)))))\"\n]]\n(str (apply str (take 3 s))\n(apply str (apply pr-str s))\n(apply str (drop 3 s)))))","user":"53e19461e4b0d874e779ae59"},{"code":"(fn quine []\n  (let [q [\"(fn quine [] (let [q \"\n           \"] (str (first q) q (second q))))\"]]\n    (str (first q) q (second q))))","problem":125,"user":"532ab0bde4b09d4e7a9b5527"},{"code":"(fn [] (let [x \"(fn [] (let [x ] (str (subs x 0 15) (char 34) x (char 34) (subs x 15))))\"] (str (subs x 0 15) (char 34) x (char 34) (subs x 15))))","problem":125,"user":"4feada56e4b0140c20fb9c11"},{"code":"(fn [] (let [q (char 34) a \"(fn [] (let [q (char 34) a %s] (format a (str q a q))))\"] (format a (str q a q))))","problem":125,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn [] (let [q (char 34) s (char 32) c (char 99) open \"(fn [] (let [q (char 34) s (char 32) c (char 99) open \" cc \"] (str open q open q s c c s q cc q cc)))\"] (str open q open q s c c s q cc q cc)))","problem":125,"user":"4f1b92d1535d64f60314647b"},{"code":"(fn []\n            ((fn [[x a y :as z]]\n               (str (list x a (list y (list 'quote z)))))\n             '(fn []\n                (fn [[x a y :as z]]\n                  (str (list x a (list y (list 'quote z))))))))","problem":125,"user":"4e823ed7535db62dc21a62c7"},{"code":"(fn [] (let [a \"(fn [] (let [a %c%s%c] (str (format a (char 34) a (char 34)))))\"] (str (format a (char 34) a (char 34)))))","problem":125,"user":"4faa5735e4b081705acca1ee"},{"problem":125,"code":"(fn [] (let [q (char 34) a \"(fn [] (let [q (char 34) a \"] ((fn [x y] (str a q a q x q x q (char 32) q y q y)) \"] ((fn [x y] (str a q a q x q x q (char 32) q y q y)) \" \")))\")))","user":"4f9920a3e4b0dcca54ed6cfc"},{"code":"(fn [] (letfn [(quine [t] (let [st (symbol t)] (str (clojure.core/seq (clojure.core/concat (clojure.core/list st) (clojure.core/list t))) \"))\")))] (quine \"fn [] (letfn [(quine [t] (let [st (symbol t)] (str (clojure.core/seq (clojure.core/concat (clojure.core/list st) (clojure.core/list t))) \\\"))\\\")))] (quine\")))","problem":125,"user":"526f9715e4b03e8d9a4a7372"},{"code":"(fn [] (let [dna [0 1 0 1 3 1 2 1 1 3 1 2 2 1 3 1 3 1 3 1 4 1 4] prt [\"(fn [] (let [dna [0 1 0 1 3 1 2 1 1 3 1 2 2 1 3 1 3 1 3 1 4 1 4] prt [\" \"\\\"\" \"\\\\\" \" \" \"]] (clojure.string/join (map (fn [x] (prt x)) dna))))\"]] (clojure.string/join (map (fn [x] (prt x)) dna))))","problem":125,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":125,"code":"(fn [] (let [q (char 34) s (char 32) w (char 101) a \"(fn [] (let [q (char 34) s (char 32) w (char 101) a \" e \"] (str a q a q s w s q e q e)))\"] (str a q a q s w s q e q e)))","user":"583048d9e4b051871117c007"},{"code":"(fn [] (let [x (print-str (quote (fn [] (let [x (print-str (quote _))]\n                                             (clojure.string/replace-first x #\"_\" x)))))] \n                 (clojure.string/replace-first x #\"_\" x)))","problem":125,"user":"4dbdab4e535d020aff1edf49"},{"problem":125,"code":"(fn []\n;          ascii chard for everything starting from (-> \n  (let [c [0x28 0x2d 0x3e 0x20 0x22 0x28 0x66 0x6e 0x20 0x5b 0x5d 0x20 0x28 0x6c 0x65 0x74  \n           0x20 0x5b 0x63 0x20 0x5b 0x22 0x20 0x28 0x73 0x74 0x72 0x20 0x28 0x63 0x6c 0x6f  \n           0x6a 0x75 0x72 0x65 0x2e 0x73 0x74 0x72 0x69 0x6e 0x67 0x2f 0x6a 0x6f 0x69 0x6e  \n           0x20 0x22 0x20 0x22 0x20 0x63 0x29 0x29 0x20 0x28 0x73 0x74 0x72 0x20 0x22 0x5d  \n           0x5d 0x20 0x22 0x29 0x20 0x28 0x73 0x74 0x72 0x20 0x28 0x61 0x70 0x70 0x6c 0x79  \n           0x20 0x73 0x74 0x72 0x20 0x28 0x6d 0x61 0x70 0x20 0x63 0x68 0x61 0x72 0x20 0x63  \n           0x29 0x29 0x29 0x29 0x29 0x29 ]]\n    (-> \"(fn [] (let [c [\" \n        (str (clojure.string/join \" \" c))   ;print the table (c's as numbers)\n        (str \"]] \") \n        (str (apply str (map char c))) )))  ;print the code  (c's as chars)","user":"55cdc576e4b0e31453f64a1f"},{"problem":125,"code":"(fn quine [] (let [string \"(fn quine [] (let [string %s] (format string (pr-str string))))\"] (format string (pr-str string))))","user":"54f09599e4b024c67c0cf89d"},{"problem":125,"code":"(fn []\n  ((fn [x]\n     (str (list (quote fn) []\n                (list x (list (quote quote) x)))))\n   (quote (fn [x]\n            (str (list (quote fn) []\n                       (list x (list (quote quote) x))))))))","user":"53acaf1fe4b047364c04445f"},{"problem":125,"code":"(fn [] (let [s \"(fn [] (let [s %c%s%1$c] (format s (char 34) s)))\"] (format s (char 34) s)))","user":"53500869e4b084c2834f4ad3"},{"problem":125,"code":"(fn print-itself []\n   (let [code (quote (fn print-itself [] (let [code (quote %s)] (format (str code) (str code)))))] \n     (format (str code) (str code))))","user":"52e657e4e4b09f7907dd1472"},{"problem":125,"code":"(fn quine [] (let [d (quote (fn quine [] (let [d (quote %s)] (format (str d) d))))] (format (str d) d)))","user":"5f548678e4b0a0bc16850a7e"},{"code":"(fn [] (let [t (quote (\"(fn [] (let [t (quote (\" \"))] (apply str (concat (first t) (str (char 34)) (first t) (str (char 34) (char 32)) (str (char 34)) (second t) (str (char 34)) (second t)))))\"))] (apply str (concat (first t) (str (char 34)) (first t) (str (char 34) (char 32)) (str (char 34)) (second t) (str (char 34)) (second t)))))","problem":125,"user":"4e14108c535d04ed9115e7dd"},{"code":"(let [f (fn [x] (str \"(let [f \" x \" q (quote \" x \")] (fn [] (f q)))\"))\n      q (quote (fn [x] (str \"(let [f \" x \" q (quote \" x \")] (fn [] (f q)))\")))]\n  (fn [] (f q)))","problem":125,"user":"52357ca6e4b0a643f2dcb74d"},{"problem":125,"code":"(fn []\n   (let [c [\"(fn [] \"\n            \"(let [c \"\n            \"] (apply str (concat (take 2 c) [c] (drop 2 c)))))\"]]\n     (apply str (concat (take 2 c) [c] (drop 2 c)))))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":125,"code":";; Couldn't work this one out myself :(\n;; My attempt was going nowhere: \n;; (fn []\n;;   ((fn [i] (str \"(fn [] ((fn [i] (str \\\"\" i \")\\\")) \\\" i \\\"\" i \")))\"))\n;;    \"(fn [] ((fn [i] (str \\\\\\\"\\\" i \\\"\\\\\\\")\"))\n(fn [] (let [s \"(fn [] (let [s %s] (format s (pr-str s))))\"] (format s (pr-str s))))","user":"51672d15e4b079759a74a5e7"},{"problem":125,"code":"(fn [s] (str s s))\n'(fn [s] (str s s))","user":"575ef4b6e4b08062f99a4e78"},{"code":"(fn [] (let [x \"(fn [] (let [x %c%s%c q (char 34)] (format x q x q)))\" q (char 34)] (format x q x q)))","problem":125,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":125,"code":"(fn [] (let [x \"(fn [] (let [x \" y \"(str x (pr-str x) \\\" y \\\" (pr-str y) \\\"] \\\" y)))\"] (str x (pr-str x) \" y \" (pr-str y) \"] \" y)))","user":"57d418b4e4b0bd073c20239a"},{"problem":125,"code":"(fn [] (let [x \"(fn [] (let [x \" y \" (str x \\\\\\\" x \\\"\\\\\\\" y \\\\\\\"\\\" (-> y (clojure.string/replace #\\\"\\\\\\\\\\\" \\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\") (clojure.string/replace #\\\"\\\\\\\"\\\" \\\"\\\\\\\\\\\\\\\\\\\\\\\"\\\")) \\\"\\\\\\\"]\\\" y)))\"] (str x \\\" x \"\\\" y \\\"\" (-> y (clojure.string/replace #\"\\\\\" \"\\\\\\\\\\\\\\\\\") (clojure.string/replace #\"\\\"\" \"\\\\\\\\\\\"\")) \"\\\"]\" y)))","user":"53fe1b42e4b0de5c418485f1"},{"code":"(fn []\n  (let [q \"(fn [] (let [q 1] (.replaceFirst q (str 1) (str (char 34) q (char 34)))))\"]\n    (.replaceFirst q (str 1) (str (char 34) q (char 34)))))","problem":125,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":125,"code":"(fn[]((fn[x](str \"(fn [] \" (list x (list (quote quote) x )) \")\" )) (quote (fn[x](str \"(fn [] \" (list x (list (quote quote) x )) \")\" )) )))","user":"52bbd09ee4b07a9af57922ee"},{"code":"(fn [] (let [[x y] [\"(fn [] (let [[x y] \" \"] (str x [x y] y)))\"]] (str x [x y] y)))","problem":125,"user":"4f58d92fe4b0a7574ea71858"},{"problem":125,"code":"(fn [] ((fn [a] (str \"(fn [] (\" a \" \" (pr-str a) \"))\")) \"(fn [a] (str \\\"(fn [] (\\\" a \\\" \\\" (pr-str a) \\\"))\\\"))\"))","user":"4f5eda39e4b0030a34fb2b56"},{"problem":125,"code":"(fn [] (let [s (char 32)\n             q (char 34)\n             c [\"(fn [] (let [s (char 32) q (char 34) c [\" \"]] (str (first c) q (first c) q s q (last c) q (last c))))\"]]\n         (str (first c) q (first c) q s q (last c) q (last c))))","user":"5db92996e4b010eb3c36cd50"},{"code":"(fn [] (let [x [\"(fn [] (let [x \" \"] (apply str (first x) x (last x))))\"]] (apply str (first x) x (last x))))","problem":125,"user":"512d3304e4b040332b905b2d"},{"code":"(fn [] (let [a \"(fn [] (let [a [] (str (subs a 0 15) (char 34) a (char 34) (subs a 16))))\"] (str (subs a 0 15) (char 34) a (char 34) (subs a 16))))","problem":125,"user":"5028cd0fe4b01614d1633ffc"},{"problem":125,"code":"(fn [] ((fn [x] (apply str \"(fn [] (\" x \" \" (pr-str x) \"))\")) \"(fn [x] (apply str \\\"(fn [] (\\\" x \\\" \\\" (pr-str x) \\\"))\\\"))\"))","user":"54ca93abe4b057c6fda3a264"},{"code":"(fn [] (let [x \"(fn [] (let [x %s] (format x (pr-str x))))\"] (format x (pr-str x))))","problem":125,"user":"4dc1ee85535d020aff1edf91"},{"code":"(fn []\n          ((fn[x](str x (char 34) x (char 34) (char 41) (char 41)))\n           \"(fn [] ((fn [x] (str x (char 34) x (char 34) (char 41) (char 41))) \"))","problem":125,"user":"4e7db3b4535db169f9c796e1"},{"problem":125,"code":"(fn [] (let [a \"(fn [] (let [a \" b \"] (str a (char 34) a (char 34) (char 32) (char 98) (char 32) (char 34) b (char 34) b)))\"]\n  (str a (char 34) a (char 34) (char 32) (char 98) (char 32) (char 34) b (char 34) b)))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn []\n  (let [s [\"(fn [] (let [s \" \"] (str (first s) s (second s))))\"]]\n    (str (first s) s (second s))))","problem":125,"user":"526ee63de4b03e8d9a4a733f"},{"code":"(fn [] (let [x subs q (char 34) s \"(fn [] (let [x subs q (char 34) s ] (str (x s 0 34) q s q (x s 34))))\"] (str (x s 0 34) q s q (x s 34))))","problem":125,"user":"536e0930e4b0fc7073fd6e66"},{"code":"(fn [] (let [x '(fn [] (let [x _]\n                         (str (clojure.walk/postwalk-replace {(symbol (str (char 95))) `(quote ~x)} x))))]\n          (str (clojure.walk/postwalk-replace {(symbol (str (char 95))) `(quote ~x)} x))))","problem":125,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":125,"code":"(fn []\n (let [q [(char 34)]\n       s [(char 32)]\n       t \"(fn [] (let [q [(char 34)] s [(char 32)] t] (apply str (reduce concat [(take 42 t) s q t q (drop 42 t)]))))\"]\n   (apply str (reduce concat [(take 42 t) s q t q (drop 42 t)]))))","user":"4daeabf6edd6309eace4d15c"},{"code":"(let [q (char 34)\n      x \"(let [q (char 34) x %c%s%c] (fn [] (format x q x q)))\"]\n  (fn [] (format x q x q)))","problem":125,"user":"4f6160a7e4b0defedf855fbe"},{"code":"(fn []\n  (let [X (quote \n            (fn [] (let [X (quote :X)] \n              (str\n                (clojure.walk/postwalk\n                  (fn [e] (if (and (list? e) (= (second e) :X)) (list (first e) X) e))\n                  X)))))]\n    (str\n      (clojure.walk/postwalk\n        (fn [e] (if (and (list? e) (= (second e) :X)) (list (first e) X) e))\n        X))))","problem":125,"user":"4e5411e8535d8a8b8723a279"},{"code":"(fn [] (let [s (char 32) q (char 34) [a b] [\"(fn [] (let [s (char 32) q (char 34) [a b] [\" \"]] (str a q a q s q b q b)))\"]] (str a q a q s q b q b)))","problem":125,"user":"52b453b0e4b0c58976d9ad21"},{"code":"(fn [] (let [s \"(fn [] (let [s %c%s%c] (format s 34 s 34)))\"] (format s 34 s 34)))","problem":125,"user":"4f62b29ce4b0defedf855fd9"},{"problem":125,"code":"(fn [] (let [q (char 34) s (char 32) src [\"(fn [] (let [q (char 34) s (char 32) src [\" \"]] (str (src 0) q (src 0) q s q (src 1) q (src 1))))\"]] (str (src 0) q (src 0) q s q (src 1) q (src 1))))","user":"5339c105e4b0e30313ee6cae"},{"problem":125,"code":";initialy i was trying to do this with clojure.string/replace but there were issues with escape backslashes\n;and no idea about pr-str function which lets you do multiple escaping in your string\n(fn []\n  (let [code \"(fn [] (let [code %s] (format code (pr-str code))))\"]\n    (format code (pr-str code))\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn f [] (let [q (char 34) s (char 32) d (char 121) x \"(fn f [] (let [q (char 34) s (char 32) d (char 121) x \" y \"] (str x q x q s d s q y q y)))\"] (str x q x q s d s q y q y)))","problem":125,"user":"51f66e0ee4b06ff1c25c52c3"},{"code":"(fn* [] (let [q (str (char 34)) code \"(fn* [] (let [q (str (char 34)) code \\\"x\\\"] (clojure.string/replace-first code \\\"x\\\" (clojure.string/replace code q (str (char 92) (char 92) (char 92) q)))))\"] (clojure.string/replace-first code \"x\" (clojure.string/replace code q (str (char 92) (char 92) (char 92) q)))))","problem":125,"user":"5034b0e1e4b062bc5d7ae167"},{"code":"(let [x '(fn [] (str (list 'let ['x (list 'quote x)] x)))]\r\n  (fn [] (str (list 'let ['x (list 'quote x)] x))))","problem":125,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn [] ((fn [ss] (str ss (char 32) (char 34) ss (char 34) (char 41) (char 41))) \"(fn [] ((fn [ss] (str ss (char 32) (char 34) ss (char 34) (char 41) (char 41)))\"))","problem":125,"user":"521e8227e4b0dd19981ad082"},{"code":"(fn []\n  (let [s \"(fn [] (let [s ] (apply str (apply concat (interpose (str (char 34) s (char 34)) (split-at 15 s))))))\"]\n    (apply str (apply concat (interpose (str (char 34) s (char 34)) (split-at 15 s))))))","problem":125,"user":"4fd96694e4b05e33b9224f37"},{"problem":125,"code":"(fn q [] (let [s (str (quote (fn q [] (let [s (str (quote %s))] (format s s)))))] (format s s)))","user":"59f043d0e4b0966464fe6a3d"},{"code":"(fn prob-0125 []\n  (let [sp (str (char 32))\n        qt (str (char 34))\n        lines [\"(fn prob-0125 [] (let [sp (str (char 32)) qt (str (char 34)) lines [\"\n               \"]] (str (lines 0) qt (lines 0) qt sp qt (lines 1) qt (lines 1))))\"]]\n    (str \n     (lines 0)\n     qt (lines 0) qt\n     sp\n     qt (lines 1) qt\n     (lines 1)\n     )))","problem":125,"user":"4f047c07535dcb61093f6bcd"},{"problem":125,"code":"(fn [] (let [q (char 34) s \"(fn [] (let [q (char 34) s %c%s%c] (format s q s q)))\"] (format s q s q)))","user":"52dfc89be4b09f7907dd1405"},{"problem":125,"code":"(fn [] (let [s \"(fn [] (let [s ] (apply str (concat (vec (take 15 s)) [(char 34)] s [(char 34)] (vec (drop 15 s))))))\"] (apply str (concat  (vec (take 15 s)) [(char 34)] s [(char 34)] (vec (drop 15 s))))))","user":"5921a080e4b09b4ee5954c77"},{"problem":125,"code":"(fn []\n  (let [m {\\\" \"\\\\\\\"\", \\\\ \"\\\\\\\\\"}\n        a (fn [x]\n            (str \"(fn [] (let [m {\\\\\\\" \\\"\\\\\\\\\\\\\\\"\\\", \\\\\\\\ \\\"\\\\\\\\\\\\\\\\\\\"} a \"\n                 x\n                 \"] (a (str \\\"\"\n                 (clojure.string/escape x m)\n                 \"\\\"))))\"))]\n    (a (str \"(fn [x] (str \\\"(fn [] (let [m {\\\\\\\\\\\\\\\" \\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\", \\\\\\\\\\\\\\\\ \\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"} a \\\" x \\\"] (a (str \\\\\\\"\\\" (clojure.string/escape x m) \\\"\\\\\\\"))))\\\"))\"))))","user":"5078d366e4b08327cd804a5b"},{"code":"(fn []\n  ((fn [input]\n     (clojure.string/join (concat (first input) [input] (last input))))\n   [\"(fn [] ((fn [input] (clojure.string/join (concat (first input) [input] (last input)))) \" \"))\"]))","problem":125,"user":"528bba38e4b0239c8a67aea9"},{"problem":125,"code":"(fn [] (let [s \"(fn [] (let [s \\\"%s\\\"] (format s (apply str (next (butlast (pr-str s)))))))\"] (format s (apply str (next (butlast (pr-str s)))))))","user":"50ed4626e4b01236b1d4983c"},{"code":"(fn* [] (let [code [32 40 115 116 114 32 34 40 102 110 42 32 91 93 32 40 108 101 116 32 91 99 111 100 101 32 91 34 32 40 114 101 100 117 99 101 32 115 116 114 32 40 105 110 116 101 114 112 111 115 101 32 34 32 34 32 99 111 100 101 41 41 32 34 93 93 34 32 40 97 112 112 108 121 32 115 116 114 32 40 102 111 114 32 91 105 32 99 111 100 101 93 32 40 99 104 97 114 32 105 41 41 41 41 41 41]] (str \"(fn* [] (let [code [\" (reduce str (interpose \" \" code)) \"]]\" (apply str (for [i code] (char i))))))","problem":125,"user":"504c8165e4b09724c857af31"},{"problem":125,"code":"(fn [] (letfn [(recorder [x] (str (clojure.string/replace x #\"\\)\\)$\" \"\") \" (recorder (quote \" x \"))))\"))] (recorder (quote (fn [] (letfn [(recorder [x] (str (clojure.string/replace x #\"\\)\\)$\" \"\") \" (recorder (quote \" x \"))))\"))]))))))","user":"53c649d3e4b00fb29b221297"},{"code":"(fn que [](let [q (char 34) sp (char 32) l [\"(fn que []\" \"(let [q (char 34) sp (char 32)\" \"l [\" \"]]\" \"(apply str (concat (interpose sp (take 3 l)) (interpose sp (map (fn [s] (str q s q)) l)) (interpose sp (take 2 (drop 3 l))) [(last l)]))\" \"))\"]] (apply str (concat (interpose sp (take 3 l)) (interpose sp (map (fn [s] (str q s q)) l)) (interpose sp (take 2 (drop 3 l))) [(last l)]))))","problem":125,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":125,"code":"(fn hello-world [& hello-world] \"Hello, World!\"\n (let [c (fn [d] (str \"(fn hello-world [& hello-world] \\\"Hello, World!\\\" (let \" d \" (c (quote \" d \"))))\"))]\n  (c '[c (fn [d] (str \"(fn hello-world [& hello-world] \\\"Hello, World!\\\" (let \" d \" (c (quote \" d \"))))\"))])))","user":"53973e7be4b0b51d73faaee6"},{"code":"(fn [] (let [x '(str (list 'fn [] (list 'let ['x (list 'quote x)] x)))]\n                   (str (list 'fn [] (list 'let ['x (list 'quote x)] x)))\n                   ))","problem":125,"user":"51753d6ce4b0dea9bbfba573"},{"problem":125,"code":"(fn [] (let [body \"(-> \\\"(fn [] (let [body \\\" (str (char 34)) (str (clojure.string/join (str (char 92) (char 34)) (.split body (str (char 34))))) (str (char 34)) (str \\\"] \\\") (str body) (str \\\")))\\\")\"]\n          (->\n           \"(fn [] (let [body \"\n           (str (char 34))\n           (str (clojure.string/join (str (char 92) (char 34)) (.split body (str (char 34)))))\n           (str (char 34))\n           (str \"] \")\n           (str body)\n           (str \")))\"))))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"(fn []                                                                                                                         \n  (let [s (str '(fn []                                                                                                         \n             (let [s (str '%s)]                                                                                                \n               (format s s))))]                                                                                                \n    (format s s)))","problem":125,"user":"4dc537fd535d8a4b2fd74282"},{"problem":125,"code":"(fn i ([] (i \"(fn i ([] (i \"   \")) ([a b c d e f g h] (str a c a c e c b c e d c e d d e d \" \\\" \\\\ \\space \"space\" \"f e c f c g)))\" \"f e c f c e c g c e c h c b h)))\"))\n       ([a b c d e f g h] (str a c a c e c b c e d c e d d e d f e c f c e c g c e c h c b h)))","user":"56b86e64e4b0f26550335924"},{"problem":125,"code":"(fn [] \n(let [q (char 34) sp (char 32)\n s [\n\"(fn []\"\n\" (let [q (char 34) sp (char 32)\"\n\" s [\"\n\" (loop [rm [0 1 2 10 11 12 13 14 15 16 17 18 8 3 4 5 6 7] acc []]\"\n\" (let [f (first rm)]\"\n\" (cond (empty? rm) (apply str acc)\"\n\" (>= f 10) (recur (rest rm) (conj acc (str q (nth s (- f 10)) q (when (< f 18) sp))))\"\n\" :else (recur (rest rm) (conj acc (nth s f))))))))\"\n\"]]\"\n]]\n(loop [rm [0 1 2 10 11 12 13 14 15 16 17 18 8 3 4 5 6 7] acc []]\n(let [f (first rm)]\n(cond (empty? rm) (apply str acc)\n(>= f 10) (recur (rest rm) (conj acc (str q (nth s (- f 10)) q (when (< f 18) sp))))\n:else (recur (rest rm) (conj acc (nth s f))))))))","user":"538e36c7e4b0b51d73faae81"},{"problem":125,"code":"(fn [] (str ((fn [q] (str (list 'fn [] (list 'str (list q (list 'quote q))))))\n                    '(fn [q] (str (list 'fn [] (list 'str (list q (list 'quote q)))))))))","user":"579d9601e4b05b1deef9ae18"},{"code":"(fn []\n  (let [f [\"(fn [] (let [f \"\n           \"] (str (first f) f (last f))))\"]]\n  (str (first f) f (last f))))","problem":125,"user":"52e59ca5e4b09f7907dd1464"},{"code":"(fn [] (let [p [\"(fn [] (let [p \" \"] (str (first p) p (last p))))\"]] (str (first p) p (last p))))","problem":125,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":125,"code":";; The most common quine\n(fn [x] (str x x)) '(fn [x] (str x x))","user":"5bbdd136e4b07a9b28b0ffab"},{"problem":125,"code":"(fn [] \n  (let [prog \"(fn [] (let [prog \\\"\\\\\\\"] (str (subs prog 0 19) (subs prog 0 18) (subs prog 19 20) (subs prog 18 19) (subs prog 19 20) (subs prog 19 20) (subs prog 19 20) (subs prog 20) (subs prog 18 19) (subs prog 21))))\"] \n    (str (subs prog 0 19) \n         (subs prog 0 18) \n         (subs prog 19 20) \n         (subs prog 18 19) \n         (subs prog 19 20) \n         (subs prog 19 20) \n         (subs prog 19 20) \n         (subs prog 20) \n         (subs prog 18 19) \n         (subs prog 21))))","user":"541ef7e2e4b01498b1a71a92"},{"code":"(fn quine []\n  (let [q (str (char 34))\n        s (str (char 32))\n        f [\n            \"(fn quine [] (let [q (str (char 34)) s (str (char 32)) f [\"\n            \"]] (str (f 0) q (f 0) q s q (f 1) q (f 1))))\"\n            ]] \n    (str (f 0) q (f 0) q s q (f 1) q (f 1))))","problem":125,"user":"50e4f4e9e4b049a987753896"},{"code":"(let [s \"(let [s %s] (fn [] (format s (pr-str s))))\"] (fn [](format s (pr-str s))))","problem":125,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn []\n(let [a [\"(fn [] (let [a \"\n\"] (apply str (a 0) a (a 1))))\"]] (apply str (a 0) a (a 1))))","problem":125,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":125,"code":"(fn [] ((fn [s] (format \"(fn [] (%s (quote %s)))\" s s)) (quote (fn [s] (format \"(fn [] (%s (quote %s)))\" s s)))))","user":"5a8ef409e4b05369db4d2530"},{"code":"(fn [] (let [self \"(fn [] (let [self %c%s%c] (format self (char 34) self (char 34))))\"] (format self (char 34) self (char 34))))","problem":125,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn [] \n  (let [b (char 92)\n        q (char 34)\n        l (char 32) \n        c [\"(fn [] (let [b (char 92) q (char 34) l (char 32) c [\"\n        \"]] (str (c 0) q (c 0) q l q (c 1) q (c 1))))\"]]\n    (str (c 0) q (c 0) q l q (c 1) q (c 1))))","problem":125,"user":"513b77f3e4b00f740c76c403"},{"problem":125,"code":"(fn [] (let [ic (char 34) s \"(fn [] (let [ic (char 34) s %s] (str (read-string (format s (str ic s ic))))))\"] (str (read-string (format s (str ic s ic))))))","user":"5310e968e4b08068f379ecdd"},{"problem":125,"code":"(fn [] (let [f \"(fn [] (let [f \" g \"] (str f (pr-str f) \\\" g \\\" (pr-str g) g)))\"] (str f (pr-str f) \" g \" (pr-str g) g)))","user":"55f5c4a9e4b06e875b46ce8f"},{"problem":125,"code":"(fn [] (let [c char sp (c 32) q (c 34) s \"(fn [] (let [c char sp (c 32) q (c 34) s \" t \"] (str s q s q sp (c 116) sp q t q t)))\"] (str s q s q sp (c 116) sp q t q t)))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"(fn [] \n    (let [\n        z (char 34)\n        y (str z (char 32) z)\n        b \"]] (apply str (concat (vec (interpose z a)) [z] (interpose y a) [z] [b]))))\"\n        a [\"(fn [] (let [z (char 34) y (str z (char 32) z) b \" \"]] (apply str (concat (vec (interpose z a)) [z] (interpose y a) [z] [b]))))\" \" a [\"]]\n        (apply str (concat (vec (interpose z a)) [z] (interpose y a) [z] [b]))))","problem":125,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn [] (let [s (str '(fn [] (let [s (str '%s)] (format s s))))] (format s s)))","problem":125,"user":"4fa30027e4b081705acca187"},{"code":"(fn [] ((fn [a] (format \"(fn [] (%s (quote %s)))\" a a)) '(fn [a] (format \"(fn [] (%s (quote %s)))\" a a))))","problem":125,"user":"4f03ac2d535dcb61093f6b4a"}]