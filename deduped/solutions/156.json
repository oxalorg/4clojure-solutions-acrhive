[{"problem":156,"code":"(fn [default s] (reduce #(assoc %1 %2 default) {} s))","user":"5d629ed9e4b0c9e5857d501d"},{"code":"#(apply  hash-map (interleave %2 (repeat %)))","problem":156,"user":"53862316e4b06839e8705f0e"},{"code":"(fn [v ks] (reduce (fn [acc item] (assoc acc item v)) {} ks))","problem":156,"user":"529e2383e4b04e0c58e87b8b"},{"code":"(fn [dv s]\n  (loop [sq s hs {}]\n    (if (seq sq)\n      (recur (rest sq) (assoc hs (first sq) dv))\n      hs\n    )\n  )\n)","problem":156,"user":"51c9a705e4b09ce160bef5ab"},{"problem":156,"code":"(fn [value mykeys] (zipmap (seq mykeys) (repeat value)))","user":"55897fe2e4b059ccff29b205"},{"problem":156,"code":"(fn [k c] (apply hash-map (interleave c (map #(do %1 k) c))))","user":"5ff4e28ae4b06df49cee1486"},{"problem":156,"code":"(fn [v ks]\n  (reduce into {} (map #(hash-map % v) ks)))","user":"5cb703e8e4b026601754b95b"},{"problem":156,"code":"(fn [k values] \n    (zipmap values (repeat k)))","user":"5caa5e42e4b048ec896c5c35"},{"problem":156,"code":"(fn [mdef coll]\n   (into {} (map #(vector % mdef) coll)))","user":"5b34aba7e4b025bcb146f352"},{"problem":156,"code":"(fn [c0 lst] (reduce #(conj %1 (hash-map %2 c0)) {} lst))","user":"544285dde4b032a45b869380"},{"code":"(fn [default v] (zipmap v (repeat default)))","problem":156,"user":"52c3c689e4b0c2d177d620c9"},{"code":"(fn [a c] (loop [v a k c r {}]\n          (if (= k [])\n            r\n            (recur v (rest k) (assoc r (first k) a)))))","problem":156,"user":"529d79b7e4b04e0c58e87b7b"},{"problem":156,"code":"(fn\n  [v m]\n  (into {} (map #(vector % v) m)))","user":"5ff61113e4b06df49cee1492"},{"problem":156,"code":"(fn rec [def-val keys-list]\n  (if (empty? keys-list)\n    {}\n    (conj {(first keys-list) def-val} (rec def-val (rest keys-list)))))","user":"5a1e93bee4b0ff51aa4b3270"},{"code":"(fn [v k]\n  (loop [a {}\n         b k]\n    (if (empty? b) a (recur (assoc a (first b) v) (rest b)))))","problem":156,"user":"5000a543e4b0678c553fc40f"},{"problem":156,"code":"(fn [v k]\n  (into {} (map #(vector % v) k)))","user":"53a511aae4b0b62ce3005735"},{"code":"(fn [d v] (->> d repeat (interleave v) (apply hash-map)))","problem":156,"user":"4ee26f01535d10e5ff6f5368"},{"problem":156,"code":"(fn[t x](reduce #(assoc %1 %2 t){} x))","user":"50d0d2dde4b00b15ecee9768"},{"problem":156,"code":"(fn [default coll]\n  (reduce (fn [out x] (conj out {x default})) {} coll))","user":"548f37c7e4b0e286459a1234"},{"problem":156,"code":"#(loop [m {}\n         y %2]\n    (if (empty? y)\n      m\n      (recur (assoc m (first y) %)\n             (rest y))))","user":"5afdca89e4b0cc2b61a3bd20"},{"code":"(fn [v keys] (reduce #(assoc %1 %2 v) {} keys))","problem":156,"user":"50705072e4b07bd6ad9b9f27"},{"code":"(fn [x y] (zipmap y (take (count y) (repeat x))))","problem":156,"user":"4fcf7170e4b03432b189f412"},{"problem":156,"code":"(fn [default-val keys]\n    (apply hash-map (interleave keys (repeat default-val))))","user":"55df1985e4b050e68259b3eb"},{"problem":156,"code":"#( loop [ default %1 stuff %2 output {} ] (if (empty? stuff) output (recur default (rest stuff) (conj output {(first stuff) default}))))","user":"5886ac91e4b0f1effa3b76e5"},{"code":"#(into {}\n  (for [x %2] {x %1}))","problem":156,"user":"51cd75d6e4b02254fc79488c"},{"code":"#(zipmap %2(for [_ (range (count %2))] %))","problem":156,"user":"52865f41e4b0239c8a67ae15"},{"problem":156,"code":"(fn\n  [v k] (reduce \n         #(assoc %1 %2 v)\n         {} k\n         )\n  )","user":"55e1ddf7e4b050e68259b422"},{"problem":156,"code":"( fn [v s] (zipmap s (repeat v)))","user":"55d3b030e4b0e31453f64a6b"},{"problem":156,"code":"#(apply hash-map (interleave %2 (map (fn [_] %1) (range (inc (count %2))))))","user":"56f53962e4b046a417f9206c"},{"problem":156,"code":"(fn [val col] (zipmap col (repeat (count col) val)))","user":"563431c1e4b0bfe05bf117bb"},{"problem":156,"code":"(fn [d s]\n  (apply hash-map\n    (reduce (fn [r k] (conj r k d)) [] s)))","user":"533ea7e8e4b085b17e897d94"},{"code":"(fn [a b] (into {} (map #(hash-map % a) b)))","problem":156,"user":"50a00725e4b08df8156e9e46"},{"problem":156,"code":"#(reduce (fn[m k](assoc m k %1)) {} %2)","user":"5978b4c9e4b01722bebd4d13"},{"code":"(fn [d keys] (reduce conj (\n                     for [k keys]\n                     {k d})))","problem":156,"user":"533a2e02e4b0e30313ee6cb7"},{"problem":156,"code":"(fn [default mapkeys] (zipmap mapkeys (repeat default)))","user":"5951250fe4b066ee0a44aea6"},{"problem":156,"code":"(fn [x xs] (reduce (fn [as a] (conj as {a x})) {} xs))","user":"5e1754abe4b00200644e3d53"},{"problem":156,"code":"(fn \n  [default keys] \n  (into {} \n     (map #(hash-map % default) keys)))","user":"58e13b49e4b005f69f193c77"},{"problem":156,"code":"(fn [default col]\n  (loop [d default c col m {}]\n    (if (empty? c)\n      m\n     (recur d (rest c) (assoc m (first c) d)))))","user":"562eeba2e4b0ab312c17ebc1"},{"code":"(fn [v kl]\n   (zipmap kl (replicate (count kl) v)))","problem":156,"user":"5084cb7de4b0fb8f40674bfb"},{"code":"(fn construct [res args ks]\n   (let [[x & xs] ks]\n     (if (empty? ks)\n       (apply hash-map res)\n       (construct (conj res x args) args xs)))) []","problem":156,"user":"5225a0f5e4b01819a2de430e"},{"problem":156,"code":"(fn [value keys] (reduce (fn [dict key] (assoc dict key value)) {} keys))","user":"5fb4092de4b08cb800c85b3c"},{"problem":156,"code":"#(into (hash-map) (map vector %2 (repeat %1)))","user":"5f419985e4b0955706451fab"},{"problem":156,"code":"(fn [default v] \n  (reduce conj (map (fn [a] (hash-map a default)) v)))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":156,"code":"#(into {} (for [y %2] (conj {y %1} nil)))","user":"5f1eec36e4b0f565ad998274"},{"problem":156,"code":"(fn [val coll]\n  (zipmap coll (take (count coll) (repeat val))))","user":"591a6c9fe4b09b4ee5954bd6"},{"code":"(fn [val keys] (into {} (for [k keys] {k val})))","problem":156,"user":"50e09f60e4b061dbdced7237"},{"problem":156,"code":"(fn [default k] (apply hash-map (mapcat vector k (repeat default))))","user":"57fc0719e4b0d3187e900987"},{"code":"(fn [a b] \n  (into {} \n    (map (fn [c] [c a]) b)\n  )\n)","problem":156,"user":"525ee103e4b0cb4875a45dbb"},{"problem":156,"code":"(fn build-hash [default-val vector-of-keys]\n   (let [expanded-default-val (repeat (count vector-of-keys) default-val)]\n     (zipmap vector-of-keys expanded-default-val)))","user":"4fb85651e4b081705acca2d7"},{"code":"(fn duke [v k] (reduce (fn [m kee] (assoc m kee v) ) {} k))","problem":156,"user":"51d381b5e4b099f3b6acde01"},{"problem":156,"code":"(fn [d l]\n    (loop [x l m {}]\n          (if (empty? x)\n              m\n              (recur (rest x) (assoc m (first x) d)))))","user":"5a34f342e4b0ddc586f153d1"},{"problem":156,"code":"(fn\n  [x coll]\n  (zipmap coll (repeat (count coll) x)))","user":"5484143de4b0e286459a1197"},{"problem":156,"code":"(fn [d k] \n  (reduce \n   #(conj % {%2 d}) {} k)\n)","user":"5367f0a7e4b0243289761e88"},{"code":"(fn [value coll]\n\t(reduce #(assoc %1 %2 value) {} coll))","problem":156,"user":"523f1245e4b01c266ffa7f95"},{"problem":156,"code":"(fn [v keys]\n  (into {} (for [k keys] [k v])))","user":"54f2b1b5e4b050824f58f5b3"},{"problem":156,"code":"(fn default-map [v keys]\n    (into {} \n         (map (fn [k] [k v]) keys)))","user":"55380eeae4b09218d5f44fd9"},{"code":"(fn [dv s] (apply hash-map (mapcat (fn [x] (list x dv)) s)))","problem":156,"user":"51bc2f6ae4b0fe3ecfb46452"},{"problem":156,"code":"(fn [d s] (into {} (map (fn [k] [k d]) s)))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":156,"code":"(fn my-default-map [d, s]\n     (apply hash-map (reduce #(conj %1 d %2) (list) s))\n    )","user":"5443cb97e4b032a45b86938a"},{"code":"(fn d [value coll]\n  (apply hash-map\n         (reduce (fn [acc x]\n                   (concat acc [x] [value]))\n                 []\n                 coll)))","problem":156,"user":"5175616ae4b0dea9bbfba576"},{"problem":156,"code":"#(loop [l %2 o '()]\n        (if (not (empty? l))\n            (recur\n                (butlast l)\n                (cons (last l) (cons %1 o)))\n            (apply hash-map o)))","user":"5b083513e4b0cc2b61a3bdb4"},{"code":"(fn [d k] (apply assoc {} (interleave k (repeat d))))","problem":156,"user":"4e84a7dd535db62dc21a62e2"},{"problem":156,"code":"(fn [x y]\n      (into {} (map #(hash-map % x) y)))","user":"5536452ae4b09218d5f44fbb"},{"code":"(fn f[value vecto]\n  (if (empty? vecto) {} (into (f value (next vecto)) {(first vecto) value})))","problem":156,"user":"52196842e4b0890f2f822bfa"},{"problem":156,"code":"#(reduce (fn [v i] (assoc v i %1)) {} %2)","user":"58462eb0e4b089d5ab817e86"},{"code":"(fn [x y ] (into {} (map (juxt identity (constantly x)) y)))","problem":156,"user":"504eff22e4b0e7ad84dbc4a9"},{"problem":156,"code":"(fn [val keys]\n (reduce\n (fn [new-map element]\n  (assoc new-map element val) )\n {}\n keys))","user":"5ec91154e4b08d0ec38692ed"},{"code":"(fn [d k] (zipmap k (repeatedly (fn[] d))))","problem":156,"user":"504e90bae4b069badc5a33b8"},{"code":"(fn [a b] (apply hash-map (apply concat (map #(list % a) b))))","problem":156,"user":"53422c98e4b00652c8746ed6"},{"code":"(fn self [e l] (if (empty? l) {} (conj {(first l) e} (self e (rest l)))))","problem":156,"user":"52ba447ee4b07a9af57922ce"},{"code":"#(reduce (fn [a k] (assoc a k %1)) {} %2)","problem":156,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn [v keys] (into {} (map (fn [x] [x v]) keys)))","problem":156,"user":"5294e44de4b02ebb4ef75016"},{"code":"(fn [v k] (zipmap k (repeat (count k) v)))","problem":156,"user":"4f8bef41e4b02e764a0a5186"},{"code":"(fn\n  [default key_list] \n  (apply assoc {} (interleave key_list (repeat default))))","problem":156,"user":"4ef7a483535dced4c769f258"},{"code":"(fn a [default ks]\n          (reduce conj (map #(hash-map %1 default) ks)))","problem":156,"user":"50b09833e4b009df37c708bd"},{"code":"(fn [d m]\n  (loop [result {}\n         m m]\n    (if (empty? m)\n      result\n      (recur (conj result [(first m) d]) (rest m)))))","problem":156,"user":"512474ede4b02c3f2a072cce"},{"code":"(fn [x l] (zipmap l (repeat x)))","problem":156,"user":"4dfd4ba8535d04ed9115e781"},{"problem":156,"code":"(fn [v, ks] (reduce (fn [m,k] (assoc m k v) ) {} (reverse ks) ) )","user":"55dd91c9e4b050e68259b3ca"},{"problem":156,"code":"(fn [v l]\n (loop [m {} cl l]\n  (if (empty? cl)\n   m\n   (recur \n    (assoc m (first cl) v) \n    (rest cl)))))","user":"4e80d1c8535db62dc21a62b6"},{"code":"(fn [a b] (reduce (fn [acc i] (conj acc {i a})) {} b))","problem":156,"user":"5272d4b7e4b03e8d9a4a7453"},{"code":"(fn [ x ks ] (reduce #(assoc %1 %2 x) {} ks))","problem":156,"user":"4e7ada51535db169f9c796ae"},{"code":"(fn [d v] (reduce #(conj %1 {%2 d}) {} v))","problem":156,"user":"535bd464e4b04ce2eb3ed2ad"},{"code":"(fn [x s]\n  (reduce (fn [acc el] (assoc acc el x)) {} s))","problem":156,"user":"4fb03cf4e4b081705acca262"},{"problem":156,"code":"(fn test [x y] (zipmap y (repeat  x)))","user":"5b985983e4b0c0b3ffbd4aaf"},{"problem":156,"code":"#(let [ defaults (repeat (count %2) %1) ]\n   (zipmap %2 defaults))","user":"54684c3be4b00cfc9eacc139"},{"code":"(fn [v, l] (into {} (map #(hash-map % v) l)))","problem":156,"user":"52f7ac81e4b047fd55836fc6"},{"problem":156,"code":"(fn [default v] (reduce (fn [acc, i] (assoc acc i default)) {} v))","user":"5c527129e4b0fb8c5ffd99de"},{"code":"(fn [default coll] (apply merge (map #(hash-map % default) coll)))","problem":156,"user":"4fefbfe7e4b0678c553fc31a"},{"problem":156,"code":"(fn [default keys-collection]\n  (reduce #(assoc %1 %2 default) {} keys-collection))","user":"5851b51be4b0b7285a6f4e99"},{"problem":156,"code":"(fn [v x] ( zipmap x (repeat (count x) v)))","user":"6076adb2e4b069485764de60"},{"problem":156,"code":"(fn [v m]\n  (reduce (fn [a k]\n    (merge {k v} a)\n  ) {} m)\n)","user":"577aacf2e4b0d3393e5deb03"},{"problem":156,"code":"(fn [default lst]\n  (let [n (count lst)]\n    (zipmap lst (repeat n default))))","user":"5813e208e4b0f478707a061b"},{"problem":156,"code":"(fn [k coll]\n  (zipmap coll (vec (repeat (count coll) k))))","user":"51ca5378e4b08b1cbd0d9480"},{"code":"#(zipmap %2 (cycle (list %1)))","problem":156,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":156,"code":"(fn [v ks]\n  (reduce #(into %1 {%2 v}) {} ks))","user":"4fd4bddce4b0d4de60cee36e"},{"code":"(fn [default seq] (into {} (map #(vector % default) seq)))","problem":156,"user":"4f98ead0e4b0dcca54ed6cf8"},{"code":"(fn [x y] (into {} (for [i y] [i x])))","problem":156,"user":"52f9ce6de4b047fd55836ff0"},{"problem":156,"code":"#_(fn [d coll] (apply hash-map (interleave coll (repeat d))))\n(fn [d coll] (zipmap coll (repeat d)))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":156,"code":"(fn map-defaults\n  [val keys]\n  (let [m {}]\n    (reduce merge (map #(assoc m % val) keys)\n     )))","user":"579d1567e4b05b1deef9ae12"},{"problem":156,"code":"(fn [default xs]\n   (reduce #(assoc %1 %2 default) {} xs))","user":"5c896f46e4b048ec896c5940"},{"code":"(fn [default my-keys]\n  (reduce #(conj %1 [%2 default]) {} my-keys))","problem":156,"user":"525d490ae4b0cb4875a45d70"},{"problem":156,"code":"(fn [v klist] (reduce (fn [mp key] (assoc mp key v)) {} klist))","user":"5da94ccfe4b000c986472c2f"},{"problem":156,"code":"(fn [default-value keys-to-populate]\n  (loop [[current-key & remaining-keys] keys-to-populate\n         result {}]\n    (let [result (assoc result current-key default-value)]\n    (if (empty? remaining-keys)\n      result\n      (recur remaining-keys result)))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":156,"code":"(fn [v m] (into {}(map #(vector % v) m)))","user":"53623eaee4b0243289761e4f"},{"problem":156,"code":"(fn construct-map [dv ks]\n  (loop [res {}\n         kys ks]\n    (if (empty? kys)\n      res\n      (recur (assoc res (first kys) dv) (rest kys)))))","user":"5294a49be4b02ebb4ef7500f"},{"code":"(fn [x xs] (zipmap xs (map (fn [y] x) xs)))","problem":156,"user":"511a0374e4b06c8af011181a"},{"problem":156,"code":"#(into {} (map (fn[k](vector k %1)) %2))","user":"5fc241c1e4b0edf42a5593d1"},{"code":"(fn [d ks] (reduce (fn [a k] (assoc a k d)) {} ks))","problem":156,"user":"50a768e6e4b090657f4a5cd9"},{"problem":156,"code":"(fn [k v]\n  (into {}\n    (map #(vector % k) v)))","user":"564dc062e4b0284900eef68c"},{"problem":156,"code":"#(reduce (fn [a e]\n           (assoc a e %1)) {} %2)","user":"58a953dae4b01a0c0b232968"},{"problem":156,"code":"(fn [a l] (reduce #(assoc %1 %2 a) {} l))","user":"54b2c888e4b09f271ff37d2e"},{"code":"(fn [d & v]\n  (into {}\n        (map #(vector % d) (flatten v))))","problem":156,"user":"524ad140e4b09eba1c0223a9"},{"code":"#(zipmap %2 (for [x %2] %1))","problem":156,"user":"4fc4dca8e4b081705acca350"},{"problem":156,"code":"(fn [d ks] (into {} (map (fn [x] [x d]) ks)))","user":"5f648ef1e4b02876ed9fd01b"},{"code":"#(loop [k %2 m {}](if (empty? k) m (recur (rest k) (conj m [(first k) %1]))))","problem":156,"user":"532df9c5e4b019098a6f8b42"},{"code":"(fn mapdef2\n        ([x v] (mapdef2 x v {}))\n        ([x v m] (if (empty? v)\n                   m\n                   (mapdef2 x (rest v) (into m {(first v) x})))))","problem":156,"user":"52c58561e4b0c2d177d620f8"},{"code":"(fn [def-val s] (reduce (fn [m k] (assoc m k def-val)) {} s))","problem":156,"user":"534dd600e4b084c2834f4aaa"},{"code":"(fn [val seq] (reduce #(assoc %1 %2 val) {} seq))","problem":156,"user":"51df825de4b01188f062752b"},{"problem":156,"code":"(fn default-assoc\n  [d s]\n  (loop [se s\n         f {}]\n    (if (seq se)\n      (recur (rest se) (assoc f (first se) d))\n      f)))","user":"5ec943fde4b08d0ec38692f1"},{"problem":156,"code":"#(zipmap %2 (vec (take (count %2) (repeat %1))))","user":"553bda0de4b09218d5f4500b"},{"code":"(fn [k m] (apply assoc {} (interleave m (take (count m) (repeat k)))))","problem":156,"user":"4fe79ebce4b07c9f6fd12c37"},{"code":"(fn [x l]\r\n  (reduce conj {}\r\n    (for [i l] \r\n      [i x])))","problem":156,"user":"5051ea64e4b0a561d07d8f0d"},{"problem":156,"code":"(fn [v keys] (reduce (fn [acc k] (assoc acc k v)) {} keys))","user":"54f26266e4b024c67c0cf8c5"},{"problem":156,"code":"(fn [deflt ks]\n  (apply hash-map (interleave ks (repeat deflt))))","user":"54c169ade4b0ed20f4ff6f24"},{"problem":156,"code":"#(apply conj {} (map \n                 \t(fn [k] [k %])\n                     %2))","user":"547d66a1e4b0c51c1f4d72f2"},{"problem":156,"code":"(fn [v list](reduce #(assoc %1 %2 v) {} list))","user":"5669eb9ae4b04acd4f672e02"},{"problem":156,"code":"(fn [v ks] (into {} (map hash-map ks (repeat v))))","user":"5515b138e4b055c2f668d4ed"},{"problem":156,"code":"(fn [df ks] (reduce (fn [m k] (assoc m k df)) {} ks))","user":"57a178ade4b0c3d858beb8ec"},{"problem":156,"code":"(fn [def-val key-seq]\n\t(zipmap key-seq (repeat def-val)))","user":"59c3d1e7e4b0a024fb6ae4e5"},{"code":"(fn [d k] (apply hash-map (concat (interpose d k) [d])))","problem":156,"user":"4feada56e4b0140c20fb9c11"},{"problem":156,"code":"(fn [default k]\n  (apply hash-map (interleave  k (repeat default))))","user":"542d27a0e4b0dad94371f2b3"},{"problem":156,"code":"(fn [d v] (reduce (fn [m e] (assoc m e d)) {} v))","user":"5fada7cce4b08cb800c85af5"},{"problem":156,"code":"(fn [d ks] (into {} (for [x ks] [x d])))","user":"5342f075e4b084c2834f4a14"},{"code":"(fn [default ks] (apply hash-map (interleave ks (cycle [default]))))","problem":156,"user":"52774928e4b03e8d9a4a74fe"},{"code":"(fn [val keys]\n    (reduce #(assoc %1 %2 val) {} keys))","problem":156,"user":"4ed6238d535d10e5ff6f52de"},{"problem":156,"code":"(fn [default-value keys]\n  (into {}\n        (map #(vector %1 default-value) keys)))","user":"53b0765ae4b047364c044484"},{"problem":156,"code":"(fn [value _keys] (apply merge (map (fn [_key] {_key value}) _keys)))","user":"5773f3a9e4b0979f896515f2"},{"problem":156,"code":"(fn [default mapkeys]\n  (loop [result {} ks mapkeys]\n    (if (empty? ks)\n      result\n      (recur (assoc result (first ks) default) (rest ks)))))","user":"540c288ae4b0addc1aec66ff"},{"problem":156,"code":"(fn fill-map [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))","user":"5619a388e4b053970a773afc"},{"code":"(fn [x ls] (reduce (fn [y z] (assoc y z x)) {} ls))","problem":156,"user":"521e1174e4b0dd19981ad06d"},{"problem":156,"code":"(fn [k coll] (let [c (count coll)\n                     kcoll (repeat c k)]\n               (zipmap coll kcoll)))","user":"4e526cc4535d302ef430da74"},{"code":"(fn [default lijst1]\n  (loop [lijst lijst1 d {}]\n     (if (empty? lijst)\n       d\n       (recur (rest lijst) (assoc d (first lijst) default)))))","problem":156,"user":"534eb269e4b084c2834f4aba"},{"code":"(fn [v cols]\n  (reduce merge (map #(hash-map % v) cols)))","problem":156,"user":"52b9cd85e4b07a9af57922c4"},{"problem":156,"code":"(fn [v m]\n\t(into {}\n\t (map\n\t  #(hash-map % v) m)))","user":"57a88e24e4b0a9660795621f"},{"problem":156,"code":"(fn asghar[v s]\n  (reduce (fn[x [k v]](assoc x k v)) {} (partition 2 (interleave s (repeat v)))))","user":"57bd960fe4b05aa3c4741c52"},{"problem":156,"code":"(fn [val coll]\n   (reduce #(assoc %1 %2 val) {} coll))","user":"5a8e9a7ae4b05369db4d2528"},{"problem":156,"code":"(fn\n  [newValue coll]\n  (into {}\n    (for [k  coll] [k newValue])))","user":"5697fda8e4b0542e1f8d142c"},{"problem":156,"code":"(fn [defVal vect] (into {} (map #(vector % defVal) vect)))","user":"5d79165ae4b02e6b30c9353e"},{"problem":156,"code":"(fn [d ks]\n  (reduce (fn [acc k] (conj acc {k d})) {} ks)\n  )","user":"55b28b57e4b01b9910ae296c"},{"problem":156,"code":"(fn [default keys]\n  (into {} (mapv (fn [x] [x default]) keys)))","user":"50b42cbbe4b001349b2f4abe"},{"problem":156,"code":"(fn [def-val key-coll]\n  (loop [[current-key & remaining-keys] key-coll result-map {}]\n    (if (nil? current-key)\n      result-map\n      (recur remaining-keys (conj result-map {current-key def-val}))\n      )\n    )\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"problem":156,"code":"(fn comb [a b] (zipmap b (cycle [a])))","user":"56f3d21ae4b046a417f92055"},{"problem":156,"code":"(fn [n init-keys]\n  (loop [acc {}\n         keys init-keys]\n    (if (empty? keys)\n      acc\n      (recur (assoc acc (first keys) n)\n             (rest keys)))))","user":"55d0391de4b0e31453f64a37"},{"code":"(fn [d v] (reduce #(conj %1 [%2 d]) {} v))","problem":156,"user":"52474de3e4b05ef8e38e6360"},{"problem":156,"code":"( fn [d, ks] \n  ( reduce \n    ( fn [m k] \n      ( conj m {k d} )) \n    {} \n    ks ))","user":"5963cd4de4b066ee0a44b0d4"},{"code":"(fn [default coll]\n  (apply hash-map (interleave coll (repeat default))) \n  )","problem":156,"user":"538c17cae4b0b51d73faae54"},{"code":"(fn [value xs] (reduce #(assoc % %2 value) {} xs))","problem":156,"user":"524740e7e4b05ef8e38e635d"},{"problem":156,"code":"(fn t [v ks] (into {} (map #(vector % v) ks)))","user":"5900d5cde4b0438e51c2d02e"},{"code":"(fn mapdefau [defkey s]\n  (if (empty? s)\n    {}\n    (conj {(first s) defkey} (mapdefau defkey (rest s)))))","problem":156,"user":"525947f1e4b0cb4875a45cd8"},{"problem":156,"code":"(fn [default arr] (reduce (fn [a b] (conj a [b default])) {} arr))","user":"5eb4927fe4b00a66d4a95221"},{"problem":156,"code":"#(loop [x %1 y %2 z {}]\n(if (empty? y) \nz\n(recur\n x \n (rest y)\n (conj z (hash-map (first y) x))\n) \n)\n)","user":"583f23dce4b089d5ab817dc9"},{"problem":156,"code":"(fn [default dict_keys] (zipmap dict_keys (repeat (count dict_keys) default)))","user":"55893b09e4b059ccff29b1fe"},{"problem":156,"code":"(fn [d ks] (into {} (map vector ks (repeat d) )))","user":"5aa998c6e4b0d174b936c8e5"},{"problem":156,"code":"(fn def-map [v k]\n  ((fn [dv ks m]\n     (if (empty? ks)\n       m\n       (recur dv (rest ks) (assoc m (first ks) dv)))\n    ) v k {}))","user":"5c6748f0e4b0fca0c16226b6"},{"problem":156,"code":"(fn [x y]\n  (loop [tgt {}\n         k y]\n    (if (empty? k)\n      tgt\n      (recur (assoc tgt (first k) x) (rest k)))))","user":"574a71b7e4b02ea1147991fb"},{"problem":156,"code":"(fn [n arr] (reduce (fn[acc x] (conj acc {x n})) {} arr))","user":"58ec5e86e4b056aecfd47d5f"},{"problem":156,"code":"(fn [value coll]\n  (loop [v value, c coll, acc {}]\n    (if (empty? c) acc\n        (recur v (rest c) (into acc {(first c) v})))))","user":"55916764e4b0604b3f94d57b"},{"problem":156,"code":"(fn default-value [v ks]\n  (into {} (map (fn [k] [k v]) ks)))","user":"51d42f44e4b013d740b70ddb"},{"problem":156,"code":"(fn [value maps] (loop [res {} in maps] (if (empty? in) res (recur (into res {(first in) value}) (rest in)))))","user":"52457931e4b08ba239308107"},{"problem":156,"code":"(fn [default values]\n  (into {} (for [i values] [i default ])))","user":"5f003099e4b0cf489e8d7f17"},{"problem":156,"code":"(fn [d ks]\n  (reduce (fn [r, k] (assoc r k d)) {} ks))","user":"5c50048ae4b0f9f7a8770eb9"},{"problem":156,"code":"(fn [val coil] (into {} (map #(array-map % val) coil)))","user":"56c55fbce4b05cc29241eea5"},{"problem":156,"code":"(fn [val vect]\n  (reduce\n    (fn [a b]\n      (assoc\n        a b val)\n    )\n    {}\n    vect\n  )\n)","user":"5a9e3698e4b0d174b936c7fc"},{"problem":156,"code":"(fn\n  [default init-keys]\n  (loop [res {} init init-keys]\n    (if (empty? init)\n      res\n      (recur\n       (assoc res (first init) default)\n       (rest init))\n      )))","user":"547a714ae4b0c51c1f4d72cc"},{"code":"(fn [d v]\n  (reduce #(assoc % %2 d) {} v))","problem":156,"user":"500388dde4b0678c553fc43d"},{"problem":156,"code":"(fn [d s] \n\t(reduce #(conj %1 [%2 d]) {} s)\n)","user":"54f773bfe4b01ecee9d8881f"},{"problem":156,"code":"(fn [default keys]\n  (into {} (for [d [default] k keys]\n    [k d])))","user":"5903f0cde4b022d14a2aafb9"},{"code":"(fn [d k]\n  (loop [d d k (reverse k) m {}]\n    (cond (empty? k) m\n          :else (recur d (rest k) (assoc m (first k) d)))))","problem":156,"user":"51e2ee61e4b0c611d6113e3a"},{"code":"(fn [v l]\n  (reduce #(assoc %1 %2 v) {} l))","problem":156,"user":"527ba695e4b03e8d9a4a7596"},{"code":"#(zipmap %2 (for [i (range (count %2))] %1))","problem":156,"user":"4f038567535dcb61093f6b0c"},{"problem":156,"code":"(fn cc [x key-vec]\n  (if (empty? key-vec)\n    {}\n    (assoc (cc x (rest key-vec)) (first key-vec) x))\n)","user":"567e6d24e4b0feffd0d18eb4"},{"problem":156,"code":"#(zipmap  %2 (cycle [%]))","user":"4e44358f535dc968683fc4a8"},{"code":"(fn [s x] (zipmap x (repeat (count x) s)))","problem":156,"user":"4fb4ca71e4b081705acca2b0"},{"problem":156,"code":"(fn [v, k] (reduce #(assoc %1 %2 v) {} k))","user":"56a38a4ce4b0542e1f8d14cc"},{"code":"(fn\n  [default s]\n  (zipmap s (repeat default)))","problem":156,"user":"511b233ae4b07ab9ec456180"},{"problem":156,"code":"(fn [default-value arr]\n  (reduce #(assoc %1 %2 default-value) {} arr))","user":"5889dc13e4b0f1effa3b774a"},{"code":"(fn [defa keys0] (into {} (vec (map #(conj [%] defa) keys0))))","problem":156,"user":"52f90613e4b047fd55836fe1"},{"problem":156,"code":"(fn [df keyz] (reduce #(conj %1 {%2 df}) {} keyz) )","user":"5afc115de4b0cc2b61a3bcff"},{"code":"(fn [default keys] (reduce #(assoc %1 %2 default) {} keys))","problem":156,"user":"4fa30027e4b081705acca187"},{"code":"(fn [d m] (apply merge (map #(hash-map % d) m)))","problem":156,"user":"4e6e1756535d5021c1a895fe"},{"code":"(fn [default s]\n  (loop [s s hmap (hash-map)]\n    (if (empty? s)\n      hmap\n      (recur (next s) (assoc hmap (first s) default)))))","problem":156,"user":"53098be4e4b02e82168697b7"},{"code":"(fn [v ks] (reduce merge (map (fn [k] (hash-map k v)) ks)))","problem":156,"user":"52e949a8e4b09f7907dd14aa"},{"problem":156,"code":"(fn f [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))","user":"53da059be4b0e771c302547e"},{"code":"(fn [f-val list-k]\n  (loop [v f-val\n      lk list-k\n      res {}]\n      (if (empty? lk)\n          res\n          (recur v (rest lk) (conj res {(first lk) v}))\n      ) \n  )\n)","problem":156,"user":"51d59859e4b01da06753aa92"},{"problem":156,"code":"(fn [val coll] (reduce #(conj %1 [%2 val]) {} coll))","user":"542db41be4b0dad94371f2bb"},{"code":"(fn [default-value keys]\n  (loop [k (first keys)\n         ks (rest keys)\n         m {}]\n    (if-not (nil? k)\n      (recur (first ks) (rest ks) (assoc m k default-value))\n      m)))","problem":156,"user":"51ad54cee4b09397d5109781"},{"problem":156,"code":"(let [defmap (atom {})] \n  (fn [val keys]\n    (last\n      (for [key keys]\n        (swap! defmap assoc key val)))))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":156,"code":"(fn [val keys]\n  (zipmap keys (repeat val)))","user":"51fdbf73e4b0f1313d468a51"},{"problem":156,"code":"(fn defmap [v kc]\n  (apply (partial assoc {}) (apply concat (for [k kc] [k v]))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":156,"code":"(fn [d, ks]\n  (\n   apply hash-map (apply concat (for [k ks] (list k d)))\n  )\n)","user":"54c9f165e4b045293a27f687"},{"problem":156,"code":";(apply conj (map #(hash-map % 10) [1 2 3 4]))\n\n(fn [v coll] \n  (apply conj  (map (fn [x] (hash-map x v)) coll)))","user":"5785de43e4b0ebec4cfb74e5"},{"problem":156,"code":"(fn [k v]\n  (into {}\n        (map #(assoc {} % k) v)))","user":"56853a7ce4b04eec3ec5cfc9"},{"code":"(fn stdmap [default accessors] \n  (reduce conj (map #(hash-map % default) accessors))\n  )","problem":156,"user":"5368fedee4b0243289761e93"},{"problem":156,"code":"(fn [dk m]\n\t(zipmap m (into [] (repeat (count m) dk)))\n)","user":"55ba4563e4b01b9910ae29ce"},{"problem":156,"code":";; https://clojuredocs.org/clojure.core/zipmap\n;; https://clojuredocs.org/clojure.core/repeat <-- repeats map length\n(fn [v m] (zipmap m (repeat v)))","user":"548018e3e4b0c51c1f4d7331"},{"problem":156,"code":"(fn [a b] (apply merge (map #(hash-map % a) b)))","user":"5d2ca236e4b01671435dbc94"},{"problem":156,"code":"(fn [val coll]\n  (into {} \n    (map (fn [x] {x val}) coll)))","user":"575683aee4b02ea1147992dc"},{"problem":156,"code":"(fn map-defaults [default my-keys]\n      (loop [m {} mk my-keys] \n             (if (empty? mk)\n               m\n               (recur \n               \t(assoc m (first mk)       default) (rest mk)))))","user":"5bc7c3aee4b07a9b28b100b2"},{"problem":156,"code":"(fn [v ks] (reduce #(into {%2 v} %1) {} ks))","user":"53db43aae4b0e771c30254b1"},{"code":"(fn[d,m](zipmap m(repeat d)))","problem":156,"user":"4df1e213535d08e6dec9fe20"},{"code":"(fn [dv ks]\n  (apply hash-map (interleave ks (repeat dv))))","problem":156,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":156,"code":"(fn [df seq] (reduce #(assoc %1 %2 df) {} seq))","user":"57b7de74e4b0fbc9809a27d4"},{"problem":156,"code":"(fn [sw vs] (zipmap vs (repeat (count vs) sw)))","user":"53a899e0e4b047364c04442b"},{"code":"(fn [default seq]\n  (reduce #(conj %1 (hash-map %2 default)) {} seq))","problem":156,"user":"4ec6297b535d6d7199dd36c4"},{"code":"(fn [v kseq] (apply hash-map (interleave kseq (repeat v))))","problem":156,"user":"5201ff99e4b0b2e020a18f26"},{"problem":156,"code":"(fn [default keys] (reduce (fn [xs x] (conj xs {x default})) {} keys))","user":"567d132ee4b05957ce8c61c3"},{"problem":156,"code":"(fn [valu vectr] (reduce (fn [accumulator k] (assoc accumulator k valu)) {} vectr))","user":"54dda2b1e4b024c67c0cf796"},{"problem":156,"code":"(fn [default keys]\n  (zipmap keys (map (constantly default) keys)))","user":"524d91eae4b0a16e35cf6dee"},{"code":"#(into {} (map (fn [x] [x %]) %2))","problem":156,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":156,"code":";#(apply hash-map (interleave %2 (repeat %1)))\n#(zipmap %2(repeat %1))","user":"580d7de3e4b0849f6811b73d"},{"code":"(fn [val keys]\n  (into {}\n        (for [k keys]\n          [k val])))","problem":156,"user":"4e7e032b535db169f9c796fc"},{"code":"(fn[d keys] (apply assoc {} (interleave keys (repeat d))))","problem":156,"user":"4ec64981535d6d7199dd36c7"},{"problem":156,"code":"#(into {} (for [x [%1] y %2] [y x]))","user":"54ce541de4b057c6fda3a2ac"},{"code":"#(reduce (fn [memo, val] (assoc memo val %1)) {} %2)","problem":156,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":156,"code":"(fn [value coll] (apply merge (map #(hash-map % value)coll)))","user":"559bdf16e4b066d22e731f5a"},{"problem":156,"code":"(fn [default values](reduce (fn [m k] (assoc m k default)) {} values))","user":"5048806be4b0ec70b3ef8d9e"},{"code":"(fn[x col](apply hash-map(reverse\n  (cons x(interpose x col)))))","problem":156,"user":"4e6cf521535de274dd8d818b"},{"problem":156,"code":"(fn [e v] (zipmap v (repeat e)))","user":"573a0ecce4b0cd1946bd1088"},{"code":"(fn [x y] (into {} (map vector y (repeat (count y) x))))","problem":156,"user":"510c123be4b078ea7192110e"},{"problem":156,"code":"(fn [default coll]\n   (loop [nc {}\n          remc coll]\n     (if-not (first remc) \n       nc\n       (recur (assoc nc (first remc) default) (rest remc))  \n     ))\n   )","user":"5da07698e4b000c986472bd3"},{"code":"#(apply hash-map (\n  interleave %2 (repeat (count %2) %)))","problem":156,"user":"502a9fdee4b095a7adb898b4"},{"problem":156,"code":"(fn [v c]\n  (reduce #(assoc %1 %2 v) {} c))","user":"5b88f0c0e4b047b03b203816"},{"problem":156,"code":"(fn defaultmap\n  [default keywords]\n    (assoc (if (empty? (rest keywords))\n             {}\n             (defaultmap default\n               (rest keywords)))\n      (first keywords) default))","user":"5263c44fe4b03e8d9a4a70b8"},{"code":"(fn [d coll]\n  (reduce #(assoc % %2 d) {} coll))","problem":156,"user":"4ed2a31c535d44c135fd68db"},{"problem":156,"code":"(fn [v keys]\n  (reduce (fn [m k]\n            (assoc m k v))\n          (hash-map)\n          keys))","user":"54657ecde4b01be26fd746dd"},{"code":"#(zipmap %2 (repeat (count %2) %1) )","problem":156,"user":"4e952463535dbda64a6f6b31"},{"code":"(fn [x y] (apply sorted-map (conj (into [] (interpose x y)) x)))","problem":156,"user":"506b437de4b0eda3100c0906"},{"problem":156,"code":";(fn [v ks] (into {} (for [k ks] {k v})))\n(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))","user":"4f7207d3e4b07046d9f4f019"},{"problem":156,"code":"(fn[val ks] (into {} (for [x (map (comp vec list) ks)] (conj x val))))","user":"59692530e4b069c0a1a197e4"},{"code":"(fn [default v] (into {} (map (fn[x] {x default}) v)))","problem":156,"user":"53752b27e4b06839e8705e12"},{"code":"(fn [value key] (into {} (map (fn [x] {x value}) key)))","problem":156,"user":"4e61bb60535d8ccf87e9fe5c"},{"problem":156,"code":"(fn [value keys]\n  (loop [keys keys result {}]\n    (if (= (count keys) 1)\n      (assoc result (first keys) value)\n      (recur (rest keys) (assoc result (first keys) value)))))","user":"56b6e354e4b0982f16b37e41"},{"problem":156,"code":"(fn [x y]\n    (loop [m {} r y]\n    (if (seq r) \n         (recur (assoc m (first r) x) (rest r))\n        m\n        )))","user":"55975569e4b031d6649c9b8e"},{"code":"(fn[x y] (zipmap y (replicate (count y) x)) )","problem":156,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":156,"code":"(fn [default list] (apply hash-map (mapcat (fn [k] [k default]) list)))","user":"546dd4f6e4b00cfc9eacc194"},{"problem":156,"code":"(fn [x col] (reduce #(assoc %1 %2 x) {} col))","user":"5356d00ee4b04ce2eb3ed26f"},{"problem":156,"code":"#(loop [acc {} keys %2]\n   (if (empty? keys) acc\n     (recur (assoc acc (first keys) %)\n            (rest keys))))","user":"54cbb0fde4b057c6fda3a27b"},{"problem":156,"code":"(fn [dval mkeys]\n  (reduce #(assoc %1 %2 dval) {} mkeys))","user":"589ac5a2e4b00487982d5318"},{"code":"(fn [default b] (reduce #(assoc %1 %2 default) {} b))","problem":156,"user":"500e6c4ee4b04a05d36fcc05"},{"problem":156,"code":"(fn [default xs] \n  (into {} (map (fn [keyval] [keyval default]) xs)))","user":"585c61d4e4b0f14aab7c8787"},{"problem":156,"code":"(fn [n v]\n        (zipmap v (repeat (count v) n))\n        )","user":"56df6351e4b0ca2494a095f3"},{"problem":156,"code":"(fn [d m]\n  (into {}\n    (for [k m]\n     [k d])))","user":"5640eb50e4b08d4f616f5eec"},{"problem":156,"code":"(fn [dv hashes] \n  (into {} (for [k hashes] [k dv]))\n)","user":"560d4994e4b05f002753df3c"},{"code":"(fn [v ks] (into {} (map #(vector % v) ks)))","problem":156,"user":"52c5c1c8e4b0c2d177d620fc"},{"code":"(fn [v ks] (zipmap ks (repeat (count ks) v)))\n;(zipmap [:a :b :c :d :e] [1 2 3 4 5]) {:e 5, :d 4, :c 3, :b 2, :a 1}","problem":156,"user":"520c5b9ee4b0b022ef140c94"},{"problem":156,"code":"(fn [v keys] (apply hash-map (vec (mapcat (fn [x] [x v]) keys))))","user":"53720c5ce4b0493c815db704"},{"problem":156,"code":"(fn [default keys]\n    (zipmap keys (for [k keys] default)))","user":"54a8fdcee4b09f271ff37ca9"},{"problem":156,"code":"(fn [default arr] (into {} (map #(hash-map % default) arr)))","user":"55dd7f72e4b050e68259b3c4"},{"problem":156,"code":"(fn default-mapper [d-val collection]\n  (reduce #(assoc %1 %2 d-val) {} collection))","user":"5cd8d4a1e4b05ee0cb3116f3"},{"problem":156,"code":"(fn [arg lst]\n  (zipmap lst (repeat (count lst) arg)))","user":"57f814fbe4b0d3187e900911"},{"problem":156,"code":"(fn [default-val keys] (zipmap keys (repeat (count keys) default-val)))","user":"59225498e4b09b4ee5954c8c"},{"problem":156,"code":"(fn [d k]\n    (apply hash-map\n           (interleave \n             k\n             (repeat (count k) d)\n             )\n           )\n    )","user":"55c3149de4b0e31453f64987"},{"problem":156,"code":"(fn \n  [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))","user":"562fb774e4b0ab312c17ebd9"},{"problem":156,"code":"(fn [x coll] (into {} (zipmap coll (repeat x))))","user":"55088bb3e4b06e50f9beb10c"},{"problem":156,"code":"#(zipmap %2 (for [x (range (count %2) )] %1 ))","user":"5710c24be4b09c608db70439"},{"problem":156,"code":"(fn [default keys-vec] (reduce #(into %1 {%2 default}) {} keys-vec))","user":"56e0fa6fe4b03a7c14b85a1d"},{"problem":156,"code":"(fn zip-with-key [k coll]\n    (if-let [[ x & xs] coll]\n      (assoc (zip-with-key k xs) x k)))","user":"5433a07be4b0b6b47310fce0"},{"problem":156,"code":"(fn [k s] (reduce merge (map #(hash-map % k) s)))","user":"543bce4fe4b032a45b869335"},{"problem":156,"code":"(fn [x y] (reduce conj {} (map #(hash-map % x) y)))","user":"5406c958e4b0addc1aec66ab"},{"problem":156,"code":"(fn [v qeys] (reduce #( assoc %1 %2 v ) {} qeys) )","user":"5d9e7971e4b000c986472bc1"},{"problem":156,"code":"(fn [default vars]\n  (reduce merge (map (fn [x] {x default}) vars))\n)","user":"4f74fed2e4b0fbe0118ec553"},{"problem":156,"code":"(fn [val coll] (reduce (fn [m k] (assoc m k val)) {} (reverse coll)))","user":"558b2821e4b0277789237626"},{"problem":156,"code":"(fn [x n] (loop [m {}\n                 n n]\n            (if (empty? n)\n              m\n              (let [k (first n)]\n                (recur (assoc m k x) (rest n))))\n              )) ;(reduce (fn [m k] (assoc m k x)) {} n))","user":"5bb3c9a8e4b0a20761a2352f"},{"code":"(fn [d l] (reduce (fn [m e] (assoc m e d)) {} l))","problem":156,"user":"51f2ab8be4b0210f90e74554"},{"code":"(fn map-default [d m]\n  (zipmap m (repeat d)))","problem":156,"user":"52b71bd2e4b0c58976d9ad4d"},{"problem":156,"code":"(fn [v k] (reduce merge (map #(hash-map % v) k)))","user":"513e39f9e4b02b2a3d8235bd"},{"code":"(fn ins [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))","problem":156,"user":"51502056e4b098b221effc25"},{"problem":156,"code":"(fn joker [val keys] (reduce #(assoc %1 %2 val) {} keys))","user":"57db2369e4b0bd073c20241f"},{"problem":156,"code":"(fn [default xs] (into {} (map (fn [x] {x default}) xs)))","user":"4f213e2ee4b0d66497709fcf"},{"code":"(fn [x, y] (into {} (map #(vector % x) y)))","problem":156,"user":"50054b5ce4b0678c553fc45f"},{"problem":156,"code":"(fn [value map-keys]\n  (apply hash-map (interleave\n                   map-keys\n                   (repeat\n                    (count map-keys)\n                    value))))","user":"5d48e6d3e4b0776584bd6f15"},{"problem":156,"code":"#(reduce (fn [m k]\n                            (assoc m k %1 ))\n                          {}\n                         %2\n                  )","user":"55079e55e4b021ccfedb96aa"},{"problem":156,"code":"#(zipmap %2 (vector % % %))","user":"582290b5e4b04b46fc4b0fa0"},{"problem":156,"code":"(fn [defv kys] (into {} (map #(vector %1 defv) kys)))","user":"5b7ec039e4b047b03b20375d"},{"problem":156,"code":"(fn [default sleutels]\n  (reduce #(conj %1 {%2 default}) {} sleutels))","user":"56785234e4b05957ce8c6177"},{"code":"(fn [v ks] (reduce #(conj %1 {%2 v}) {} ks))","problem":156,"user":"52593207e4b0cb4875a45cd3"},{"problem":156,"code":"(fn [in1 vec1] (apply merge (for [ea vec1] {ea in1})))","user":"56d4b1aee4b0ea9b8538f7ba"},{"problem":156,"code":"(fn [v ks] (zipmap ks (iterate identity v)))","user":"59f15e20e4b0966464fe6a5a"},{"problem":156,"code":"(fn [default-val xs]\n  (zipmap xs (repeat default-val)))","user":"605b49b7e4b079a07f8593f8"},{"code":"(fn [a b]\n  (reduce\n    (fn [x y] (assoc x y a))\n    {} b))","problem":156,"user":"50df6dd0e4b061dbdced7225"},{"problem":156,"code":"(fn [default list] (apply merge(map (fn [n] (hash-map n default)) list)))","user":"54665910e4b01be26fd746e5"},{"code":"(fn [value keys]\n  (reduce #(conj %1 [%2 value]) {} keys))","problem":156,"user":"4e7f5a0b535db966e863cc41"},{"code":"(fn [d ks] (reduce conj {} (for [k ks] [k d])))","problem":156,"user":"539b5fcee4b0b51d73faaf1e"},{"problem":156,"code":"#(into {} (map (fn[x]{x %}) %2))","user":"56c08696e4b060a8e693e3aa"},{"problem":156,"code":"(fn [default ks] (into {} (map (fn [a] {a default}) ks)))","user":"570eeca5e4b0b0fb43fd06fb"},{"problem":156,"code":"(fn [default xs] (reduce (fn [v x] (into v [[x default]])) {} xs))","user":"5ee2a401e4b029a2061bbe80"},{"problem":156,"code":"(fn [val keys]\n  (reduce (fn [result input]\n            (assoc result input val))\n          {} keys))","user":"555521a5e4b0deb715856e12"},{"problem":156,"code":"(fn [def-val a-seq]\n  (reduce (fn [map key]\n            (assoc map key def-val))\n          {}\n          a-seq))","user":"5ce36e02e4b0a17bb84e2b3e"},{"code":"(fn [default keys]\n  (zipmap keys (take (count keys) (repeat default))))","problem":156,"user":"4f83ae07e4b033992c121c21"},{"code":"(fn [default seq] (zipmap seq (repeat default)))","problem":156,"user":"508e9ed8e4b0996e1a8a53bf"},{"problem":156,"code":"(fn [vall keeys]\n  (reduce conj (map #(hash-map % vall) keeys)))","user":"5d0beecee4b0cc9c91588239"},{"problem":156,"code":"(fn mdef [d coll] (into {} (map #(vec (list % d)) coll)))","user":"5b421edce4b02d533a91bc2c"},{"problem":156,"code":"(fn defaulter [default coll] (apply hash-map (interleave coll (cycle [default]))))","user":"58ffbabce4b0438e51c2d002"},{"problem":156,"code":"(fn def-map [def-arg args]\n  (reduce #(assoc %1 %2 def-arg) {} args)\n  )","user":"53fcba1fe4b0de5c418485d5"},{"problem":156,"code":"(fn [x y] \n  (into {} (for [mp y] {mp x}))\n)","user":"5bd5ede3e4b0ed4b8aab4ba3"},{"problem":156,"code":"(fn [default keys]\n    (into {} (map (fn [key]\n                      [key default])\n                  keys)))","user":"53a9793ae4b047364c044436"},{"problem":156,"code":"(fn [val coll] (zipmap coll (repeat (count coll) val)))","user":"56499a5de4b0284900eef644"},{"code":"(fn [default-val key-list]\n  (loop [k key-list \n         acc {}]\n    (if (empty? k) acc\n      (recur (rest k) (assoc acc (first k) default-val)))))","problem":156,"user":"5269c150e4b03e8d9a4a71f8"},{"problem":156,"code":"(fn [a b]\n  (into {}\n        (map #(vector % a) b)))","user":"59733c91e4b01722bebd4c9b"},{"code":"(fn [val maplist]\n (apply merge (map #(hash-map % val)(seq maplist))))","problem":156,"user":"50621cbde4b0341461c88951"},{"code":"#(zipmap %2 (repeat  %1))","problem":156,"user":"4f753535e4b0fbe0118ec558"},{"problem":156,"code":"(fn [default-value keys] (reduce #(conj %1 {%2 default-value}) {} keys))","user":"56438342e4b0018b46ad8bf4"},{"problem":156,"code":"(fn [default collection]\n  (into {} \n        (for [key collection]\n          [key default])))","user":"5d4df658e4b0776584bd6f41"},{"code":"(fn [k v]\n  (loop [ls (into '() v)\n         result {}]\n    (if (empty? ls)\n      result\n      (recur (rest ls) (assoc result (first ls) k)))))","problem":156,"user":"530b9714e4b02e82168697cf"},{"problem":156,"code":"(fn [def-val keeeys]\n  (apply hash-map\n         (concat (interpose def-val keeeys) (list def-val))))","user":"57b5c29ee4b0fbc9809a27b1"},{"problem":156,"code":"(fn [d v]\n  (apply hash-map (apply concat (map #(list % d) v))))","user":"4e2d84bf535deb9a81d77f09"},{"problem":156,"code":"(fn [value, keyz]\n  (reduce #(assoc %1 %2 value) {} keyz))","user":"5dc9d4ede4b03836ba07d823"},{"problem":156,"code":"#(reduce merge (map (fn [x] (hash-map x %1)) %2))","user":"528d6b10e4b0239c8a67aec3"},{"problem":156,"code":"(fn [arg1 arg2]\n  (loop [b arg2 result {}] \n    (if (empty? b) result\n      (recur (rest b) (conj result (set {(first b) arg1}))))))","user":"594a7ed1e4b07ddc2dafae02"},{"problem":156,"code":"(fn [v k] (zipmap k (take (count k) (repeatedly (constantly v)))))","user":"5744d088e4b009280f9f2b41"},{"problem":156,"code":"#(apply merge (for [x %2] (hash-map x %1)))","user":"5ed70b97e4b016b56eae05e6"},{"code":"(fn [default v]\n     (into {} (for [k v]\n                [k default])))","problem":156,"user":"4fa3c137e4b081705acca193"},{"problem":156,"code":"#(loop [s %2, m {}]\n  (if-not (empty? s)\n    (recur (rest s) (conj m {(first s) %1}))\n    m\n  )\n)","user":"543a68d3e4b032a45b869326"},{"code":"(fn [default my-keys] \n  (loop [current-keys my-keys\n         result {}]\n      (let [[head & tail] current-keys]\n        (if (empty? current-keys)\n           result\n      \t  (recur tail (assoc result head default))))))","problem":156,"user":"4e57afc5535d8a8b8723a288"},{"problem":156,"code":"(fn [DefaultVal, Keys] (apply hash-map (apply concat (map #(vector % DefaultVal) Keys))))","user":"55b2b09ee4b01b9910ae296f"},{"problem":156,"code":"(fn [val coll] (reduce (fn [m v](merge m (hash-map v val))) {} coll ) )","user":"537bca8be4b06839e8705e71"},{"code":"#(apply hash-map\n(interleave %2 (repeat %1))\n          )","problem":156,"user":"4f2004a1535d64f6031464a7"},{"problem":156,"code":"(fn default-keys\n  ([v ks] (default-keys v ks {}))\n  ([v ks m]\n   (if (empty? ks)\n     m\n     (recur v (rest ks) (assoc m (first ks) v)))))","user":"5d217b1de4b02ea6f0fb69e6"},{"code":"(fn f [d s]\n  (if (= s [])\n    {}\n    (assoc \n      (f d (rest s))\n      (first s) d )))","problem":156,"user":"531b8c27e4b08068f379ed90"},{"problem":156,"code":"(fn [x s]  (apply assoc {} (interleave s (repeat x))))","user":"5423dc6ae4b01498b1a71ad5"},{"problem":156,"code":"(fn buildMap [d col]\n   (reduce #(assoc %1 %2 d) {} col)  \n)","user":"5e42ba49e4b01d43a70e8e6c"},{"code":"(fn map-defaults\n  [dflt keys]\n  (apply merge (map #(hash-map % dflt) keys)))","problem":156,"user":"4f6bab49e4b07046d9f4efb1"},{"problem":156,"code":"(fn [x y] (reduce #(conj % {%2 x}) {} (reverse y)))","user":"5971763fe4b01722bebd4c72"},{"problem":156,"code":"(fn[x y](apply merge (map #(hash-map % x) y)))","user":"5f3a8493e4b004f08c61c527"},{"code":"(fn [d v] (zipmap v (take (count v) (repeat d))))","problem":156,"user":"50b63c5ee4b0a86f8358ca69"},{"problem":156,"code":"(fn zip\n  [v coll]\n  (zipmap coll (repeat v)))","user":"53ea3a63e4b036ad0777e4dc"},{"code":"(fn [x keys] (reduce #(conj %1 [%2 x]) {} keys))","problem":156,"user":"527fd663e4b0757a1b1713de"},{"problem":156,"code":"#(loop [v %1 coll %2 result {}] (if (not-empty coll) (recur v (rest coll) (conj result {(first coll) v})) result))","user":"56a69451e4b0542e1f8d14ec"},{"code":"#(zipmap %2 (replicate (count %2) %1))","problem":156,"user":"5057f59ce4b06522596eba73"},{"code":"(fn mapmaker [v coll]\n  (reduce conj {}\n          (map vector coll (cycle (list v)))))","problem":156,"user":"53213810e4b09d4e7a9b54b0"},{"code":"#(apply assoc {} (interleave %2 (repeat %1)))","problem":156,"user":"4fd11a93e4b04c3a95aa040a"},{"problem":156,"code":";;f\\s - first\\second data input for reduce funtion\n;;empty {} for starting hash-map\n;;(conj f {s value}) also working\n(fn [value key-coll]\n  (reduce (fn [f s] (assoc f s value)) {} key-coll ))","user":"5ca09d40e4b048ec896c5b6c"},{"code":"(fn [default keylist]\n  (reduce conj {} (for [k keylist] {k default})))","problem":156,"user":"5133af1de4b0d7a043de8cf2"},{"problem":156,"code":"(fn [k col] (apply merge (map #(hash-map % k) col)))","user":"5766fbb7e4b0a07e8fc180b6"},{"problem":156,"code":"(fn [v keys]\n  (into {} (apply vector (map (fn [x y] [x y]) keys (repeat v)))))","user":"5637557ce4b0bfe05bf117d4"},{"problem":156,"code":"(fn [v coll]\n  (->> coll\n      (map #(vector % v))\n      (into {})))","user":"4f6543cae4b07046d9f4ef41"},{"problem":156,"code":"(fn [dv, ks]\n  (apply hash-map\n  \t(interleave ks (repeat dv))\n  ))","user":"59c3b24ee4b0a024fb6ae4e1"},{"problem":156,"code":"(comp #(apply hash-map %) (fn [x y] (interleave y (map (fn [z] x) y))))","user":"54ac8df8e4b09f271ff37cd7"},{"code":"(fn [Key Map] (zipmap Map (repeat Key)))","problem":156,"user":"52a28e1ce4b04e0c58e87bf0"},{"code":"#(zipmap  %2 (repeat %))","problem":156,"user":"4dad86e0c9a9d6ed0f99dc57"},{"code":"(fn [v ks] \n  (apply merge (for [x (reverse ks)] {x v} )))","problem":156,"user":"52295917e4b04c906c9c6a6f"},{"problem":156,"code":"(fn [defval s] (reduce #(assoc %1 %2 defval) {} s))","user":"5e246f92e4b05b4b01516150"},{"problem":156,"code":"(fn [d kv] (into {} (for [k kv] [k d])))","user":"5d3ae729e4b01671435dbd5d"},{"problem":156,"code":";#(zipmap %2 (repeat %1))\n#(loop [i 0\n         m (hash-map)]\n    (let [m (assoc m (.get %2 i) %1)\n          imax (- (count %2) 1)]\n      (if (< i imax)\n        (recur (inc i) m)\n        m)))","user":"57ee42c4e4b0bfb2137f5bb1"},{"problem":156,"code":"(fn [default keys] (reduce (fn [map key] (into map {key default})) {} keys))","user":"5db92996e4b010eb3c36cd50"},{"code":"#(reduce (fn [coll x] (assoc coll x %))\n         {} %2)","problem":156,"user":"50b35486e4b03ea88043356a"},{"code":"(fn [d, xs]\n  ((fn impl [d, xs, m]\n    (if (empty? xs)\n      m\n      (impl d (rest xs) (assoc m (first xs) d))))\n   d xs {}))","problem":156,"user":"521392bce4b0d32679a5065e"},{"code":"(fn [d c] (reduce #(conj % [%2 d]) {} c))","problem":156,"user":"525efc76e4b0cb4875a45dbd"},{"code":"(fn [default-value coll]\n  (into {} (map (fn [e] [e default-value]) coll)))","problem":156,"user":"50c9cdfde4b0bed41a12299d"},{"code":";#(zipmap %2 (repeat (count %2) %1))\n\n#(zipmap %2 (repeat %1))","problem":156,"user":"52d469c8e4b09f7907dd1330"},{"problem":156,"code":"(fn start-map [s keyterms]\n\t(loop [acc {} keyterms keyterms]\n\t\t(if (empty? keyterms)\n\t\t\tacc\n\t\t\t(recur (assoc acc (first keyterms) s) (rest keyterms)))))","user":"53703287e4b0fc7073fd6e8f"},{"problem":156,"code":"(fn [v seq] (into {} (for [x seq] {x v})))","user":"54d352f6e4b0e8a36923e604"},{"problem":156,"code":"#(zipmap %2 (take (count %2) (repeat %1)) )","user":"5ed6c4ede4b016b56eae05e3"},{"code":"(fn construct [default aseq]\n  (let [alist (reduce (fn [acc e] (cons [e default] acc)) '() aseq)\n        alist (reverse alist)]\n    (into {} alist)))","problem":156,"user":"50414e3ce4b06d8231e4facd"},{"problem":156,"code":"(fn [val keys] (loop [map {} ks (seq keys)]  (if (and ks val) (recur (assoc map (first ks) val) (next ks)) map)))","user":"5644611be4b0284900eef5f1"},{"problem":156,"code":"(fn default-map\n  [val seq]\n  (if (empty? seq)\n      nil\n      (conj {(first seq) val} (default-map val (rest seq)))))","user":"568bd448e4b0dcc4269f40a9"},{"code":"(fn [value collection]\n  (zipmap collection (take (count collection) (repeat value))))","problem":156,"user":"4daeff24edd6309eace4d16e"},{"problem":156,"code":"(fn [v ks]\n  (reduce\n    (fn [m k]\n      (assoc m k v))\n    {}\n    ks))","user":"561d506ee4b064ca9f4b16aa"},{"problem":156,"code":"#(reduce (fn [st el] (assoc st el %1)) {} %2)","user":"57440f77e4b0c285004e8ab5"},{"problem":156,"code":"(fn [v coll] (into {} (for [x coll] {x v})))","user":"54b402dce4b05787c3b16388"},{"code":"(fn [d S]\n  (loop [m {},S S]\n    (if (not= S '())\n      (recur (assoc m (first S) d) (rest S))\n      m)))","problem":156,"user":"4fda016ae4b05e33b9224f42"},{"problem":156,"code":"(fn [z w]\n  (loop [result {}\n         map' w\n         val' z]\n    (if (empty? map')\n      result\n      (recur (assoc result (first map') val') (rest map') val')\n      )\n    )\n  )","user":"57d0e185e4b0bd073c202360"},{"problem":156,"code":"(fn [vals keys]\n    (loop [map {}\n           ks (seq keys)\n           vs vals]\n      (if ks\n        (recur (assoc map (first ks) vs)\n               (next ks)\n               vs)\n        map)))","user":"5703cbbee4b08d47c97781fb"},{"problem":156,"code":"(fn f [d v] (if (= v []) nil (conj {(first v) d} (f d (vec (rest v))))))","user":"60c86bbde4b0e0fa5f1b42fb"},{"code":"#(loop [n (count %2) ret {} fs (first %2) rs (rest %2)]\n  (if (zero? n)\n    ret\n    (recur (dec n) (merge ret {fs %1}) (first rs) (rest rs))\n    )\n  )","problem":156,"user":"503354c3e4b0c6c1199c710c"},{"problem":156,"code":"(fn [x c] (apply hash-map (apply concat (map (fn [e] [e x]) c))))","user":"5aba04dce4b073f17744269e"},{"code":"(fn [n x] (zipmap x (repeat (count x) n)))","problem":156,"user":"53512b55e4b084c2834f4ae0"},{"code":"(fn x [o l]\n  (if (empty? l)\n    {}\n    (assoc (x o (rest l)) (first l) o)))","problem":156,"user":"4f559d2ce4b0a7574ea71808"},{"problem":156,"code":"(fn [a b]\n  (zipmap b (vec (replicate (count b)a))))","user":"581a1068e4b0e114eb519ff3"},{"code":"#(reduce (fn [s i] (conj s (hash-map i %1))) {} %2)","problem":156,"user":"4f0e995e535d0136e6c22326"},{"code":"(fn [d k] (reduce (fn [dict x] (conj dict [x d])) {} k))","problem":156,"user":"529d4f4be4b04e0c58e87b79"},{"problem":156,"code":"(fn [default a_list]\n  (reduce (fn [hmap item] (assoc hmap item default)) {} a_list)\n)","user":"58fc4963e4b0438e51c2cf91"},{"code":"(fn [d ks]\n  (reduce (fn[acc k] \n            (assoc acc k d)) {} ks))","problem":156,"user":"4edeac6b535d10e5ff6f533a"},{"problem":156,"code":"(fn\n  [defaultValue keyList]\n  (loop [i 0 sum {}]\n    (if (< i (count keyList))\n      (recur (inc i)  (into sum {(nth keyList i) defaultValue}) )\n      sum)))","user":"5d8b3d5be4b0915913b1d3d1"},{"problem":156,"code":"(fn [d c] (reduce #(conj %1 [%2 d]) {} c))","user":"5d29c06be4b01671435dbc6b"},{"problem":156,"code":"#(into {} (map (fn[k] [k %]) %2))","user":"5a8aa992e4b05369db4d24d8"},{"code":"(fn map-default [default xs]\n  (reduce #(assoc %1 %2 default) {} xs))","problem":156,"user":"4fb710f4e4b081705acca2cd"},{"code":"(fn [dval ks] (reduce #(assoc %1 %2 dval) {} ks))","problem":156,"user":"4f0412f8535dcb61093f6b99"},{"problem":156,"code":"(fn myfunc [d k] \n  (reduce \n    (fn [acc i] (conj acc [i d])) \n    {} \n    k))","user":"546692aee4b01be26fd746e7"},{"problem":156,"code":"(fn [d coll] (apply array-map (mapcat (fn [x] [x d]) coll)))","user":"5d9c9446e4b0eb781811cdae"},{"code":"(fn default-key [default [& keys]]\n  (apply merge (for [key keys]\n    (hash-map key default))))","problem":156,"user":"52bafc88e4b07a9af57922dc"},{"code":"(fn [d ks]\n    (reduce #(assoc %1 %2 d)\n            {} ks))","problem":156,"user":"4ff3df0fe4b0678c553fc355"},{"problem":156,"code":"(fn [d coll] (into (sorted-map) (map #(vec [% d]) coll)))","user":"52ca6520e4b071a8d36bd3e0"},{"code":"(fn [dval coll]\n                   (reduce\n                    #(assoc % %2 dval)\n                    {}\n                    coll)\n                   )","problem":156,"user":"4e726575535d5021c1a89660"},{"problem":156,"code":"(fn [d c] (reduce #(conj %1 {%2 d}) {} c))","user":"53c6db22e4b00fb29b2212a2"},{"code":"(fn [v s] (into {} (map #(vector % v) s)))","problem":156,"user":"4e6a2f51535d8ccf87e9fea9"},{"code":"(fn [d coll] (reduce #(assoc %1 %2 d) {} coll))","problem":156,"user":"4ffb38e8e4b0678c553fc3c6"},{"problem":156,"code":"(fn [x lst] (into {} (map #(vector % x) lst)))","user":"54194782e4b01498b1a71a29"},{"problem":156,"code":"(fn [default init-keys]\n    (loop [ret {}\n           keys init-keys]\n         (if (empty? keys)\n             ret\n             (recur (assoc ret (first keys) default) (rest keys)))))","user":"5a904de3e4b05369db4d254c"},{"problem":156,"code":"(fn [initVal arr] (reduce (fn [r x] (conj r [x initVal])) {} arr))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":156,"code":"(fn [d ks]\n  (into {} (for [k ks] [k d])))","user":"512e31e9e4b0b740abc59823"},{"problem":156,"code":"(fn [x y] (reduce (fn [col s] (assoc col s x)) {} y))","user":"57908d94e4b0ebec4cfb75ac"},{"problem":156,"code":";;(fn [my-default my-keys]\n;; (apply hash-map (interleave my-keys (repeat my-default))))\n\n#(apply hash-map (interleave %2 (repeat %1)))","user":"5edb07dde4b0c7845d86b0ed"},{"problem":156,"code":"(fn [v m]\n    (zipmap m (repeat (count m) v))\n)","user":"53765e1ae4b06839e8705e23"},{"problem":156,"code":"(fn [d coll] (into {} (map (fn [x] [x d]) coll)))","user":"5addadfce4b0837691e92c13"},{"problem":156,"code":"#(into {} (for [e %2] {e %1}))","user":"55e05f46e4b050e68259b40b"},{"problem":156,"code":";; (= ((fn [dv ks] (into {} (for [k ks :let [kv {k dv}]] kv))) 0 [:a :b :c]) {:a 0 :b 0 :c 0})\n(fn [dv ks] (into {} (for [k ks :let [kv {k dv}]] kv)))","user":"55150524e4b055c2f668d4d9"},{"code":"(fn [default keys]  \n  (reduce (fn [a x] (conj {x default}  a)) {} keys))","problem":156,"user":"504f3f13e4b0a02f9cffde60"},{"code":"#(reduce (fn [M K]\r\n  (assoc M K %1))\r\n\t{}\r\n\t%2)","problem":156,"user":"4dadca03c9a9d6ed4199dc57"},{"code":"(fn [dv sk] (apply hash-map (interleave sk (repeat dv))))","problem":156,"user":"536f2faee4b0fc7073fd6e79"},{"code":"(fn [default keycoll]\n  (let [dcoll (repeat default)]\n   (apply hash-map(interleave keycoll dcoll))))","problem":156,"user":"5047eadde4b0ec70b3ef8d94"},{"code":"#(into{} (map vector  %2 (repeat (count %2) %1)))","problem":156,"user":"534d639ae4b084c2834f4a9e"},{"problem":156,"code":"(fn [default keys]\n  (loop [d {}\n         k keys]\n    (if (seq k)\n      (recur \n       (conj d [(first k) default])\n       (rest k))\n      d)))","user":"58d48df8e4b03c36ff7e5941"},{"code":"(fn [default ks]\n  (reduce\n   (fn [memo x] (conj memo {x default}))\n   {}\n   ks))","problem":156,"user":"51d34334e4b099f3b6acddfe"},{"problem":156,"code":"(fn map-generator [default keys] (zipmap keys (repeat default)))","user":"57e15244e4b0bfb2137f5a70"},{"code":"(fn [val keys]\n  (reduce\n    (fn [m [key val]] (assoc m key val))\n    {}\n    (map list keys (cycle [val]))))","problem":156,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn [pl coll]\n  (apply hash-map \n    (interleave coll (iterate identity pl))))","problem":156,"user":"4ee7d6d8535d93acb0a66870"},{"problem":156,"code":"(fn map2 [x y]\n  (apply merge\n   (map \n     (fn [z] {z x}) y))\n  )","user":"554b8b78e4b0a04f7929958d"},{"problem":156,"code":"(fn [d l]\n  (reduce\n   (fn [m e]\n     (assoc m e d))\n   {}\n   l))","user":"5881d1c2e4b0f1effa3b7644"},{"problem":156,"code":"(fn [x col]\n  (->> col \n       ;(map #(assoc {} % x)) (apply merge)\n       ;(map #(conj {} [% x])) (apply merge)\n       ;(reduce #(assoc %1 %2 x) {})\n       (reduce #(conj %1 [%2 x]) {})\n   )\n  )","user":"56d5c1b0e4b0ea9b8538f7c3"},{"code":"(fn [def-val keys]\n  (into {} (for [key keys] {key def-val})))","problem":156,"user":"4ed98b40535d10e5ff6f5307"},{"code":"(fn [v ks]\n  (reduce #(conj %1 {%2 v}) {} ks)\n  )","problem":156,"user":"51eca2ace4b069f463c22cd0"},{"problem":156,"code":"#(reduce (fn [result k] (assoc result k %1)) {} %2)","user":"60919828e4b00e9e6653c3d8"},{"code":"#(reduce (fn [i v] (assoc i v %1)) {} %2)","problem":156,"user":"4f3e6244e4b0e243712b1f85"},{"code":"(fn [default ks]\n   (reduce #(assoc % %2 default) {} ks))","problem":156,"user":"527188cee4b03e8d9a4a73f6"},{"problem":156,"code":"(fn [v ks] (zipmap ks (cycle (list v))))","user":"58a58c50e4b01a0c0b232914"},{"code":"(fn [default list] (reduce (fn [map item] (conj map [item default])) {} list))","problem":156,"user":"4f2f6678e4b0d6649770a06e"},{"problem":156,"code":"(fn [arg1 arg2] \n  (zipmap arg2 (repeat arg1)))","user":"597af3f7e4b02382a38ad1f0"},{"code":"(fn build [default ks]\n  (if (> (count ks) 1)\n      (merge\n       \t(hash-map (first ks) default)\n       \t(build default (rest ks))\n      )\n      (hash-map (first ks) default)\n    )\n  )","problem":156,"user":"4feb546ae4b0681fd128dc8d"},{"problem":156,"code":"(fn [default coll]\n  (reduce \n   \t(fn [acc x]\n      (assoc acc x default))\n   \t{}\n   coll\n   ))","user":"53b0750fe4b047364c044483"},{"code":"(fn default-map [default coll] \n  (apply hash-map (interleave coll (repeat default))))","problem":156,"user":"52facb9de4b047fd55837002"},{"code":"(fn [v sq]\n  (zipmap sq \n    (into [] \n      (repeat (count sq) v)\n    )\n  )\n)","problem":156,"user":"53749685e4b06d7f452d9e23"},{"problem":156,"code":"(fn [default, desiredKeys] \n  (loop [keysLeft desiredKeys\n         output {}]\n    (if (= keysLeft [])\n      output\n      (recur (rest keysLeft) (assoc output (first keysLeft) default)))))","user":"54336443e4b0b6b47310fcde"},{"problem":156,"code":"(fn [default m] (reduce (fn [r v] (assoc r v default)) {} m))","user":"53403f42e4b085b17e897da8"},{"problem":156,"code":"(fn [d lst] (reduce #(conj %1 [%2 d]) {} lst))","user":"5d0aab50e4b0cc9c91588220"},{"code":"(fn [v s]\n  (reduce\n   (fn [a b]\n     (assoc a b v))\n   {}\n   s))","problem":156,"user":"515e38ace4b049add99a0538"},{"code":"#(zipmap %2 (vector %1 %1 %1))","problem":156,"user":"5296008fe4b02ebb4ef7502a"},{"problem":156,"code":"(fn [df ks] (apply hash-map (reduce                             \n                             (fn [acc v] (conj acc v df))\n                             []\n                             ks)))","user":"55e558e3e4b050e68259b46b"},{"problem":156,"code":"(fn [v kv] (reduce #(into %1 (hash-map %2 v)) {} kv))","user":"5835bc73e4b089d5ab817ce9"},{"problem":156,"code":"(fn [d col] (apply assoc {} (interleave col (repeat d))))","user":"59a0262ee4b0871e7608b82d"},{"problem":156,"code":"(fn [v ks] (into {} (map (fn [k] {k v}) ks)))","user":"4f0f01c0535d0136e6c22329"},{"problem":156,"code":"(fn [default seq] (reduce #(assoc % %2 default) {} seq))","user":"57002b81e4b08d47c97781c7"},{"code":"(fn map-defaults [def0 keys]\n  (reduce #(conj %1 {%2 def0})\n          {}\n          keys)\n)","problem":156,"user":"511589aae4b0ce5098ee73bf"},{"problem":156,"code":"(fn [v coll]\n  (apply conj (map #(assoc {} % v) coll)))","user":"53c9d29ae4b00fb29b2212c2"},{"problem":156,"code":"(fn [DefValue Keys]\n    (loop\n      [Index 0 Ret {}]\n      (if (>= Index (count Keys)) \n        Ret\n        (recur (inc Index) (conj Ret { (get Keys Index) DefValue} ) )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":156,"code":"(fn [val keys]  (zipmap keys ( repeat (count keys) val)) )","user":"58db362be4b0a4d5acaab675"},{"code":"(fn rec-map [r v [ & xs] ]\n        (if (empty? xs) r (recur (assoc r (first xs) v) v (rest xs)))) {}","problem":156,"user":"51f59607e4b0abb92f97f9d5"},{"code":"#(into {} (for [k %2 v [%]] [k v]))","problem":156,"user":"50a8cc97e4b0a9a42786e8db"},{"code":"(fn [d k] \n  (zipmap \n   k\n   (repeat \n    (count k) \n    d)))","problem":156,"user":"4e920f44535dbda64a6f6afd"},{"code":"(fn [val coll] (reduce #(into %1 {%2 val}) {} coll))","problem":156,"user":"4ea11921535d7eef308072af"},{"problem":156,"code":"#(apply array-map (reverse (cons %1 (reverse (interpose %1 %2)))))","user":"52c08c59e4b07a9af5792351"},{"problem":156,"code":"(fn [default xs] (apply hash-map (interleave xs (repeat default))))","user":"53c3397be4b00fb29b221279"},{"code":"(fn [default-val, ks]\n  (zipmap ks (repeat default-val)))","problem":156,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn[val col]\n  \n  (reduce #(assoc %1 %2 val) \n\n      {}  col) \n  \n)","problem":156,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn [default xs]\n((\n  fn [default xs hash]\n (    \n    if (seq xs)\n    ( recur  default (next xs) ( conj hash [ (first xs) default ])   )\n    hash\n)\n)  default xs {})\n)","problem":156,"user":"4f8da0e2e4b02e764a0a51b1"},{"code":"(fn [defaultVal ks]\n  (into {}\n        (for [k ks]\n          [k defaultVal])))","problem":156,"user":"4fc4f347e4b081705acca35d"},{"problem":156,"code":"(fn [x xs]\n  (into {} (map #(hash-map % x) xs)))","user":"59445ff2e4b0b03edd0057a8"},{"code":"(fn f [v ks]\n  (if (not (empty? ks))\n    (conj {(first ks) v} (f v (rest ks))) ) )","problem":156,"user":"4df20dda535d08e6dec9fe23"},{"problem":156,"code":"(fn [default sq]\n  (let [m {}]\n    (reduce merge {}\n            (map #(assoc m % default) sq))))","user":"60a52517e4b00e9e6653c459"},{"problem":156,"code":"(fn [d v] (reduce (fn [m v] (assoc m v d)) {} v) )","user":"5510aa92e4b06e50f9beb188"},{"code":"(fn [d k]  (loop [result {} elements k]\n              (if (empty? elements)\n                result\n                (recur (into result {(first elements) d}) (rest elements)))\n   ))","problem":156,"user":"5106dc1be4b01150e115ebf0"},{"code":"(fn [default, keys] (zipmap keys (repeat (count keys) default)))","problem":156,"user":"50a15b50e4b08df8156e9e5e"},{"code":"(fn [default keylist]\n  (zipmap keylist (repeat default)))","problem":156,"user":"51ac80bbe4b09397d5109770"},{"problem":156,"code":"(fn [default coll] \n   (reduce #(assoc % %2 default) {} coll))","user":"53e15371e4b0d874e779ae54"},{"problem":156,"code":"(fn [dv kv]\n  (reduce #(assoc %1 %2 dv) {} kv\n   ))","user":"51e8ee6be4b07cae92c04bfd"},{"code":"(fn [d xs]\n  (zipmap xs (repeat d)))","problem":156,"user":"4eb59464535d7eef30807369"},{"problem":156,"code":"(fn [d x] \n  (apply hash-map (interleave x (repeat d))))","user":"59385840e4b02506e01a29c9"},{"problem":156,"code":"(fn [v k]\n  (loop [m {},\n         k k]\n    (if (empty? k)\n      m\n      (recur (conj m [(first k) v]) (rest k)))))","user":"551ed214e4b08d5046aa8a4d"},{"code":"(fn [default sequence](zipmap sequence (take (count sequence) (repeat default))))","problem":156,"user":"531081fee4b08068f379ecd4"},{"problem":156,"code":"(fn [v ks]\n  (loop [v v\n         ks ks\n         result {}]\n  (if-not (empty? ks)\n    (recur v (rest ks) (assoc result (first ks) v))\n    result)))","user":"5992dc6ae4b0866487ed0d7d"},{"problem":156,"code":"(fn map-defaults\n  [x & xs]\n  (loop [default-value x\n         keys (first xs)\n         result {}]\n    (if (empty? keys)\n      result\n      (recur default-value (rest keys) (conj result {(first keys) default-value})))))","user":"52561295e4b0541d1855ba03"},{"problem":156,"code":"(fn m [defval vec] (reduce (fn [mp y] (assoc mp y defval )) {} vec))","user":"5cc77807e4b0ccb061962838"},{"code":"(fn [defval coll] (zipmap coll (repeat defval)))","problem":156,"user":"536c7f32e4b0fc7073fd6e40"},{"problem":156,"code":"(fn [default aseq] (into {} (map #(hash-map % default) aseq)))","user":"573e4be9e4b05c31a32c0829"},{"problem":156,"code":"(fn [x lst]\n  (loop [in lst\n         out {}]\n    (if (empty? in)\n      out \n      (recur (rest in) (assoc out (first in) x)))))","user":"594bd637e4b07ddc2dafae41"},{"code":"#(apply hash-map \n  (conj \n    (vec (interpose % %2))\n    %))","problem":156,"user":"4f8db862e4b02e764a0a51b2"},{"problem":156,"code":"(fn [d m] (last (let [result (atom {})] (for [k m] (swap! result assoc k d)))))","user":"5d974b1de4b0d3f9b434ad36"},{"problem":156,"code":"(fn\n  [d-val coll]\n  (reduce (fn\n            [new-map k]\n            (assoc new-map k d-val))\n          {}\n          coll))","user":"578bbd3ee4b0ebec4cfb754e"},{"problem":156,"code":"#(reduce (fn [accum x] (assoc accum x %1)) {} %2)","user":"5764cc01e4b0994c1922fc05"},{"problem":156,"code":"(fn [a b] (reduce #(conj %1 [%2 a]) {} b))","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":156,"code":"(fn [v ks]\n  (->> ks\n       (map (fn [k] [k v]))\n       (into (hash-map))))","user":"5a95c639e4b0d174b936c75e"},{"problem":156,"code":"(fn [value vect]\n  (zipmap vect (repeat value))\n  )","user":"53ecaf1ce4b0d648e757f4b4"},{"problem":156,"code":"(fn [default sequance]\n  (loop [[f & rest] sequance\n         result_map {}]\n    (if rest\n      (recur rest (conj result_map [f default]))\n      (conj result_map [f default]))))","user":"561fc0d0e4b064ca9f4b16d2"},{"problem":156,"code":"(fn [default keys] (into {} (for [x keys] [x default])))\n\n; previous:\n; (fn [default keys] (into {} (map #(vector % default) keys)))","user":"54de6820e4b024c67c0cf79f"},{"code":"; #(zipmap %2 (repeat %1))\n#(into {} (map (fn [x] [x %1]) %2))","problem":156,"user":"500933a6e4b046cdb195e074"},{"code":"(fn [default col] (reduce #(assoc %1 %2 default) {} col))","problem":156,"user":"52b9b86ee4b07a9af57922c1"},{"problem":156,"code":"(fn [value keys] (loop [acc [] counter 0]\n                   (if (< counter (count keys)) (recur (conj acc (nth keys counter) value) (inc counter)) (apply hash-map acc))\n                   ))","user":"55cfdfc9e4b0e31453f64a35"},{"problem":156,"code":"(fn\n  [value keys]\n  (into {} (map #(vector % value) keys)))","user":"557c647ce4b05c286339e0c3"},{"code":"(fn [elt c]\n  (zipmap c (repeat elt))\n)","problem":156,"user":"4f84400de4b033992c121c2e"},{"problem":156,"code":"(fn map-defaul\n  [val xs]\n  (zipmap xs (repeat val)))","user":"57b4779de4b0fbc9809a279a"},{"problem":156,"code":"(fn setDefault [d xs]\n  (if (empty? xs)\n    {}\n    (assoc (setDefault d (rest xs)) (first xs) d)))","user":"58cf00c8e4b03c36ff7e58ac"},{"code":"(fn [default keys] (apply hash-map (interleave keys (repeat default))))","problem":156,"user":"4db6d993535d1e037afb2180"},{"code":"(fn oletus [d c] (if (empty? c) {} (assoc (oletus d (rest c)) (first c) d)))","problem":156,"user":"52474ec2e4b05ef8e38e6361"},{"problem":156,"code":"(fn ass\n  [default da-keys]\n  (reduce #(assoc %1 %2 default) {} da-keys))","user":"53b6b6c8e4b047364c0444ca"},{"code":"(fn [e l]\n  (reduce #(merge % {%2 e}) {} l)\n)","problem":156,"user":"4ef48422535dced4c769f236"},{"problem":156,"code":"(fn [x v]\n  (zipmap v (repeat (count v) x)))","user":"531a3d5fe4b08068f379ed89"},{"code":"(fn [default ks] (reduce #(conj {%2 default} %1) {} ks))","problem":156,"user":"4ffa2009e4b0678c553fc3b6"},{"problem":156,"code":"(fn [default mapkeys]\n  (zipmap (vec mapkeys) (vec (repeat (count mapkeys) default))))","user":"57ca338de4b05aa3c4741d37"},{"code":"(fn [v ks]\r\n        (into {} (map #(zipmap [%] [v]) ks)))","problem":156,"user":"4e028764535d04ed9115e790"},{"problem":156,"code":"(fn\n  [default keys]\n  (reduce (fn [finmap key] (assoc finmap key default)) {} keys))","user":"5a9567bae4b0d174b936c752"},{"code":"(fn map-defaults [n s]\n  (reduce #(assoc % %2 n) {} s))","problem":156,"user":"51852961e4b0da5a5be3babb"},{"problem":156,"code":"(fn [v ks] (apply hash-map (mapcat #(vector % v) ks)))","user":"54c641f8e4b045293a27f628"},{"code":"(fn [x y] (zipmap y (repeat x)))","problem":156,"user":"4f826548e4b033992c121c08"},{"code":"(fn [a b] (zipmap b (repeat a)))","problem":156,"user":"4e6eff83535d5021c1a89615"},{"problem":156,"code":"#(apply assoc {}\n       (interleave  %2 (repeat %1)))","user":"5bc64843e4b07a9b28b10091"},{"problem":156,"code":"#(zipmap %2 (for [k %2] %))","user":"52a0f9c4e4b04e0c58e87bd0"},{"problem":156,"code":"(fn [a b] (into {} (map #(vector % a) b)))\n\n ;; (fn [default keys]\n  ;;  (into {} (map #(vector % default) keys)))","user":"5d406babe4b05dd059a54367"},{"code":"(fn [default-value map-keys]\n  (reduce #(assoc %1 %2 default-value) {} map-keys))","problem":156,"user":"53527551e4b084c2834f4af0"},{"problem":156,"code":";; #(into {} (for [x %2] [x %1]))\n#(zipmap %2 (repeat %1))","user":"57407ab3e4b05c31a32c0854"},{"code":"(fn [v ks]\n  (into {} (map #(vector % v) ks)))","problem":156,"user":"506fd0afe4b07bd6ad9b9f23"},{"problem":156,"code":"(fn [default ks]\n   (->> ks\n        (map #(hash-map % default))\n        (into {})))","user":"5d4b2155e4b0776584bd6f28"},{"problem":156,"code":"(fn myfunc [defValue keys] \n  (when (first keys) \n    (conj {(first keys) defValue} (myfunc defValue (rest keys)))\n   )\n )","user":"577e9c9fe4b0c8d87281f6ed"},{"code":"#(reduce (fn [sofar k] (assoc sofar k %1)) {} %2)","problem":156,"user":"4ec1923f535dfed6da9c6db2"},{"code":"(fn [v s]\n  (reduce #(assoc %1 %2 v) {} s))","problem":156,"user":"4ef0a39b535dced4c769f20d"},{"problem":156,"code":"#(into (hash-map) (for [k %2 :let [r {k, %1}]] r))","user":"55a03d7de4b0acc240e314f4"},{"code":"(fn [default my-vec]\n  (loop [m {} v my-vec]\n    (if (empty? v)\n      m\n      (recur (assoc m (first v) default) (rest v)))))","problem":156,"user":"51991a89e4b068aa333628fd"},{"problem":156,"code":"(fn\n  [default coll]\n  (reduce (fn [new-map coll-key] (assoc new-map coll-key default))\n          {}\n          coll))","user":"570bd29be4b0b0fb43fd06c5"},{"problem":156,"code":"(fn [default keys]\n (zipmap keys (repeat default)))","user":"5d078e2de4b0cc9c915881fa"},{"code":"#(apply sorted-map (interleave %2 (repeat (count %2) %)))","problem":156,"user":"51a91ac2e4b08d8ec191b822"},{"problem":156,"code":"(fn [d k]  (reduce #(conj %1 [%2 d]) {} k ))","user":"57e22420e4b0bfb2137f5a85"},{"code":"(fn [mp col] (zipmap col (repeat mp)))","problem":156,"user":"51cb073ce4b068dadb8f2233"},{"problem":156,"code":"(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key)))))","user":"590aaa78e4b047aa04b199c0"},{"problem":156,"code":"(fn [default kys] (zipmap kys (repeat default)))","user":"53cd5cd5e4b00fb29b2212e1"},{"code":"(fn make [aval aseq] (if (empty? aseq) {}\n                  (conj {(first aseq) aval} (make aval (rest aseq)))))","problem":156,"user":"51bf4560e4b013aa0d74b817"},{"problem":156,"code":"(fn [v ks]\n  (apply conj (for [k ks]\n                {k v})))","user":"540961e9e4b0addc1aec66db"},{"code":"(fn [ defult lst ] (apply hash-map (apply concat (map (fn [ x ] (list x defult)) lst))))","problem":156,"user":"52286b19e4b0186687e23a7e"},{"problem":156,"code":"(fn [default v] (zipmap v (repeat (count v) default)))","user":"536fd48be4b0fc7073fd6e88"},{"problem":156,"code":"(fn my-fn [default keys]                                                       \n  (zipmap keys (repeat default)))","user":"58ebd10de4b056aecfd47d49"},{"problem":156,"code":"(fn [iv col] (zipmap col (repeat (count col) iv)))","user":"54fd5e2de4b07d26eda61d33"},{"code":"(fn [a & [o]]\n  (zipmap o (repeat a)))","problem":156,"user":"5167e4a2e4b0c5a4140a3099"},{"problem":156,"code":"(fn [k m] (into {} (map #(hash-map % k) m)))","user":"5d84fccae4b0915913b1d390"},{"problem":156,"code":"(fn dummy_map \n  [default_value keys_]\n  (zipmap keys_ (repeat default_value))\n)","user":"561eb82fe4b064ca9f4b16c7"},{"code":"(fn [val keys]\n  (reduce (fn [map key]\n            (conj map [key val]))\n          {}\n          keys))","problem":156,"user":"4ee3b586535d10e5ff6f5371"},{"problem":156,"code":"#(apply hash-map (mapcat (partial conj (list %)) %2))","user":"5479c58de4b0c51c1f4d72c7"},{"problem":156,"code":"(fn [def-val lst]\n  (loop [m {}, l lst]\n    (if (empty? l)\n        m\n        (recur\n          (conj m {(first l) def-val})\n          (rest l)))))","user":"567695c2e4b05957ce8c6157"},{"code":"#(apply hash-map (interleave %2 (repeat %1)))","problem":156,"user":"4f32a7f1e4b0d6649770a095"},{"code":"(fn [d k] (into {} (for [i k] [i d])))","problem":156,"user":"52f09d3ce4b05e3f0be25ee3"},{"problem":156,"code":"(fn [dv kc]\n  (loop [am {}, ks kc]\n    (if (seq ks)\n    (recur (assoc am (first ks) dv) (rest ks))\n    am\n      )\n    )\n  )","user":"537e4432e4b06839e8705e9f"},{"problem":156,"code":"(fn [default allkeys] (reduce #(assoc %1 %2 default) {} allkeys))","user":"5c092334e4b0bdcf453d16ea"},{"problem":156,"code":"(fn [dv coll] (#(zipmap %2 (repeat %)) dv coll))","user":"55264e02e4b0ffed3738f919"},{"code":"(fn [x keys] (reduce #(assoc %1 %2 x) {} keys))","problem":156,"user":"4e79ff2a535db169f9c796a9"},{"code":"(fn [default keys] (into {} (map #(hash-map % default) keys)))","problem":156,"user":"4f2d5f5de4b0d6649770a05a"},{"code":"(fn [defval coll]\n  (reduce merge (map #(assoc {} % defval) coll)))","problem":156,"user":"4ff10dd2e4b0678c553fc32a"},{"problem":156,"code":"(fn [d c] (reduce (fn [m k] (assoc m k d)) {} c))","user":"57f7c74ee4b0d3187e900902"},{"problem":156,"code":"(fn [default m] (reduce (fn [acc x] (conj acc {x default})) {} m))","user":"55ae5e66e4b03311e7b732bb"},{"problem":156,"code":"(fn [y x] (into {}(for [z x :let [w [z y]]] w)))","user":"5480cce5e4b0e286459a115f"},{"code":"(fn [key items] (reduce #(assoc %1 %2 key) nil items))","problem":156,"user":"522635c0e4b06a1ecd0c4e7e"},{"problem":156,"code":"(fn [default seq]\n  (reduce #(conj % [%2 default]) {} seq)\n  )","user":"555c0ea0e4b0b056612e2245"},{"problem":156,"code":"#(loop [x %2 y %1 res {}]\n   (if  (not= [] x) (recur (rest x) y (conj res {(first x) y})) res ))","user":"594e3723e4b07ddc2dafaea8"},{"problem":156,"code":"(fn [x data] (reduce (fn [y z] (conj (hash-map z x) y)) {} data))","user":"56339e23e4b0bfe05bf117b1"},{"problem":156,"code":"(fn [default col]\n  (loop [m {}\n         col col]\n    (if (empty? col)\n      m\n      (recur (assoc \n               m \n               (first col) \n               default) \n             (rest col)))))","user":"5ceb221ce4b0a17bb84e2bde"},{"problem":156,"code":"(fn [default keys]   \n  (apply hash-map (interleave keys (repeat default))))","user":"5f82609ae4b0c071e6c840f9"},{"code":"(fn [k v] (zipmap v (repeat k)))","problem":156,"user":"52373f36e4b0477af6280328"},{"problem":156,"code":"(fn [deft lst]\n  (apply conj (map (fn [l] {l deft}) lst)))","user":"56dc0628e4b0ea9b8538f814"},{"code":"(fn [x coll] (reduce #(assoc %1 %2 x)  {} coll))","problem":156,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn [de ma] (apply assoc {} (interleave ma (take (count ma) (repeat de)))))","problem":156,"user":"52bf0116e4b07a9af5792328"},{"problem":156,"code":"(fn [d ks] (reduce (fn [coll k] (assoc coll k d)) {} ks))","user":"53ab1ef6e4b047364c04444b"},{"code":"#(apply sorted-map (interleave %2 (repeat %1)))","problem":156,"user":"5291ede5e4b0239c8a67af1e"},{"code":"(fn [default keys]\n  (reduce (fn [m k] (conj m (hash-map k default))) {} keys))","problem":156,"user":"52c2ff59e4b07a9af5792389"},{"problem":156,"code":"(fn\n  [x y]\n  (into {} (map (fn [val] (hash-map val x))\n       y)))","user":"5ec7d7f2e4b08d0ec38692e1"},{"problem":156,"code":"(fn[default vals] (into {} (map #(hash-map % default) vals)))","user":"5380a27ae4b06839e8705ec4"},{"code":"(fn [d m] (apply hash-map (interleave m (repeat d))))","problem":156,"user":"524ae8e6e4b09eba1c0223b5"},{"code":"(fn [x list] (zipmap list (repeat (count list) x)))","problem":156,"user":"53838742e4b06839e8705ee0"},{"code":"(fn [default m] (zipmap m (repeat (count m) default)))","problem":156,"user":"4f981f31e4b0dcca54ed6cef"},{"problem":156,"code":"(fn [default sequenc] \n  (loop [d default m {} s sequenc] \n    (if (empty? s) m\n    \t(recur d (assoc m (first s) d) (rest s) ))))","user":"5675f2f4e4b05957ce8c6153"},{"code":"(fn [v kxs] (zipmap kxs (repeat (count kxs) v)))","problem":156,"user":"52ea764ee4b09f7907dd14be"},{"code":"(fn [value keys]\n  (zipmap keys (repeat (count keys) value)))","problem":156,"user":"517e9f92e4b09104ecebe7e4"},{"problem":156,"code":"(fn [value keysT](reduce #(assoc %1 %2 value){} keysT))","user":"5f724f55e4b02876ed9fd089"},{"problem":156,"code":"(fn [n coll] (zipmap coll (take (count coll) (cycle (list n)))))","user":"5514a60fe4b055c2f668d4d7"},{"code":"(fn mkddict [v ks] (when (not (empty? ks)) (conj {(first ks) v} (mkddict v (rest ks))))\n  )","problem":156,"user":"51448607e4b0d29bc9e5e336"},{"problem":156,"code":"(fn [k l]\n  (reduce #(assoc %1 %2 k) {} l))","user":"60228147e4b0d5df2af22202"},{"problem":156,"code":"(fn [default ks]\n    (into {} (map #(vector % default) ks)))","user":"53bf0913e4b0c98a41f5cc99"},{"code":"(fn [default keys_]\n  (zipmap keys_ (repeat default)))","problem":156,"user":"512f4ed7e4b0762be4c7aad9"},{"problem":156,"code":"(fn [m v] (zipmap v (repeat m)))","user":"5804b491e4b0a837a8b30cac"},{"problem":156,"code":"(fn [default m] (zipmap m (repeat default)))","user":"5d22c0f9e4b02ea6f0fb69f8"},{"problem":156,"code":"(fn [val keys] (apply hash-map (conj (apply vector (interpose val keys)) val)))","user":"5790e62ae4b0ebec4cfb75b0"},{"problem":156,"code":"(fn \n  [default map-keys]\n  (into {} (map #(assoc {} % default) map-keys))\n)","user":"5a4ec4f0e4b05d388ecb6bc2"},{"code":"(fn [v k] (loop [m {} f (first k) r (rest k)] (let [n (conj m [f v])] (if (empty? r) n (recur n (first r) (rest r))))))","problem":156,"user":"52244a77e4b01819a2de42d1"},{"code":"(fn [val coll] \n  (reduce #(assoc % %2 val) {} coll))","problem":156,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":156,"code":"#(reduce (fn [ x y ] ( assoc x y %1 )) {} %2)","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"code":"(fn [val keys]  (apply hash-map  \n  (interleave keys (repeat val))))","problem":156,"user":"4e5fb634535d8ccf87e9fe4a"},{"problem":156,"code":"(fn [v l] (reduce (fn [a b] (into a {b v})) {} l))","user":"5ec7550ce4b08d0ec38692dd"},{"problem":156,"code":"(fn [default keyz] (reduce (fn [m k] (assoc m k default)) {} keyz) )","user":"572ac718e4b0f4d77e651242"},{"code":"(fn [v k] (zipmap k (repeatedly #(identity v))))","problem":156,"user":"4f592f83e4b0030a34fb2ad2"},{"problem":156,"code":"(fn f \n  ([v s] (f v s {}))\n  ([v s m] (if (empty? s) m (recur v (rest s) (conj m [(first s) v])))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"#(apply conj {} (for [k %2] [k %]))","problem":156,"user":"522a01ade4b0590a43906ced"},{"problem":156,"code":"(fn duff [defaultVal aList] \n  (reduce #(assoc %1 %2 defaultVal) {} aList ))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":156,"code":"(fn [defs keys]\n               (reduce conj (for [key keys]\n                               {key defs})))","user":"54c3747de4b045293a27f60e"},{"problem":156,"code":"(fn [d l] (reduce #(assoc %1 %2 d) (cons {} l)))","user":"53b2a7f8e4b047364c04449c"},{"problem":156,"code":"(fn [v keys] (apply merge (map #(hash-map % v) keys)))","user":"53b615cce4b047364c0444c2"},{"problem":156,"code":"(fn [value col] (into {} (map #(hash-map % value) col)))","user":"577b9cfde4b0d3393e5deb16"},{"code":"#(into {} (map vector %2 (repeat (count %2) %1)))","problem":156,"user":"4fbdcb87e4b081705acca30a"},{"problem":156,"code":"(fn f [x xs]\n  (if (empty? xs) {}\n    (assoc (f x (rest xs)) (first xs) x)))","user":"55e3e7a8e4b050e68259b44a"},{"code":"(fn [default keys] (zipmap keys (repeat (count keys) default)))","problem":156,"user":"50a9504de4b07e35d68b27ae"},{"problem":156,"code":"(fn [x y] \n  (zipmap y (repeat (count y) x)))","user":"560ff632e4b05f002753df66"},{"problem":156,"code":"(fn [default collection]\n  (loop [dmap {} ldefault default lcollection collection]\n    (if (empty? lcollection)\n      dmap\n      (recur (assoc dmap (peek lcollection) default) ldefault (pop lcollection)))))","user":"5414dccbe4b01498b1a719f1"},{"problem":156,"code":"(fn [ a col ]\n  (apply hash-map (mapcat #(list %1 a) col)))","user":"55a21f1ce4b0acc240e3151f"},{"code":"(fn [dflt sqnc ] \n (apply hash-map (interleave sqnc (repeat (count sqnc) dflt))))","problem":156,"user":"504e108ce4b078edc5f593b3"},{"problem":156,"code":"(fn titi [v ks] (into {} ((fn [_value _keys] (for [_key _keys] {_key _value})) v ks)))","user":"53b890e1e4b047364c0444df"},{"problem":156,"code":"#(apply hash-map (reduce (fn [a b] (conj a (first b) (last b))) (map (fn [k] [k %1]) %2)))","user":"53acaf1fe4b047364c04445f"},{"problem":156,"code":"(fn [val vec] (reduce (fn [m v] (assoc m v val)) {} (reverse vec)))","user":"507f69eee4b089ade05efbcf"},{"code":"(fn [d k] (into {} (for [x k] [x d])))","problem":156,"user":"51256b40e4b05d10e3e395f8"},{"problem":156,"code":"(fn map-default \n  [v ks]\n  (into {} (map #(vector %1 v) ks)))","user":"539e717fe4b0ca733b974488"},{"code":"(fn [x y] (reduce #(assoc %1 %2 x) {} y))","problem":156,"user":"4dcc5aff535d5973398f9293"},{"problem":156,"code":"(fn [default the-keys]\n   (reduce #(assoc %1 %2 default)\n           {} the-keys))","user":"58a34442e4b02bd94d917ef2"},{"code":"(fn [mv mk] (zipmap mk (repeat (count mk) mv)))","problem":156,"user":"5162757ee4b03cfa3774b3fe"},{"problem":156,"code":"(fn [v ks] (reduce merge (for [k ks] {k v} )))","user":"5c852e3ae4b0c8042a70ce78"},{"problem":156,"code":"(fn [x coll]\n  (into {}\n        (for [v coll] {v x})))","user":"555b43dfe4b0deb715856e4d"},{"problem":156,"code":"(fn [v c] (reduce into (map #(if (nil? (get [%] %)) {% v}) c)))","user":"54696e4ce4b00cfc9eacc147"},{"code":"(fn [v ks]\n  (apply hash-map\n    (mapcat\n      #(vector % v)\n      ks)))","problem":156,"user":"50427899e4b0add3005c0fc2"},{"problem":156,"code":"(fn\n  [d l]\n  (zipmap l (repeat d))\n  )","user":"53bd6fcfe4b0d9a98559a6d0"},{"problem":156,"code":"(fn [value, keys] (zipmap keys (repeat value)))","user":"57d0679ee4b0bd073c202359"},{"problem":156,"code":"(fn map-defaults [defaults kys]\n    (reduce #(assoc %1 %2 defaults) {} kys))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn [df ks]\n  (loop [k ks ma {}]\n    (if (empty? k)\n        ma\n        (recur (rest k) (conj ma {(first k) df}))\n    )\n  )\n)","problem":156,"user":"4fcf5292e4b03432b189f40e"},{"code":"(fn [elt coll] (reduce #(assoc %1 %2 elt) {} coll)) \n\n;; assoc takes a collection (the hashmap being buit by reduce), a key (the next element of the given collection), \n;; and a value (the default value element.\n;; reduce needs to start off with an empty hashmap so it's passed as the starting value","problem":156,"user":"50fac9e3e4b07934dda8b0d1"},{"code":"(fn [d k]\n  ((fn make-defaults [d k m]\n    (if \n      (empty? k) m\n      (make-defaults d (rest k) (assoc m (first k) d)))) d (reverse k) {}))","problem":156,"user":"4f8c50f9e4b02e764a0a5195"},{"problem":156,"code":"#(reduce (fn [coll x] \n           (assoc coll x %1))\n         {} %2)","user":"5f0c8b0de4b0f30dddfb5d4c"},{"problem":156,"code":"(fn [v  keys] (zipmap keys (repeat v)))","user":"55809cb9e4b05c286339e0ef"},{"code":"(fn [default keys] (zipmap keys (repeat default)))","problem":156,"user":"4f92884de4b0dcca54ed6caf"},{"code":"(fn [default s] \n  (reduce into {} \n          (map #(into {} {% default}) s)))","problem":156,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn [d l] (into {} (map #(vector % d) l)))","problem":156,"user":"4e46e48b535dc968683fc4b7"},{"problem":156,"code":"(fn create-defaults [default keys]\n  (into {} (for [key keys] [key default])))","user":"5776e21de4b0979f89651642"},{"code":"(fn [default keys]\n  (reduce #(conj % {%2 default}) {} keys))","problem":156,"user":"506755b3e4b03d366d7cb2bc"},{"problem":156,"code":"#(apply hash-map \n        (interleave %2 \n                    (repeat %1)\n        )\n )","user":"56a75810e4b0542e1f8d14fc"},{"code":"(fn [k v]\n  (zipmap v (repeat k)))","problem":156,"user":"517c1a3be4b07ef0e56148d6"},{"problem":156,"code":"(fn[defo suite] (into {} (for [x suite] {x defo} ) ))","user":"55757e81e4b05c286339e063"},{"problem":156,"code":"(fn[val keys](into {} (map #(hash-map % val) keys)))","user":"57c6bca1e4b05aa3c4741cf8"},{"code":"#(into {} (map (fn [k] [k %]) %2))","problem":156,"user":"4dada913c9a9d6ed2d99dc57"},{"problem":156,"code":"(fn [default collection]\n  (zipmap collection (repeat (count collection) default)))","user":"5dba063ee4b010eb3c36cd5c"},{"code":"(fn [v m]\n  (loop [cur m ret {}]\n    (if (empty? cur)\n      ret\n      (recur (rest cur) (assoc ret (first cur) v)))))","problem":156,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":156,"code":"(fn [vs ks] (zipmap ks (repeat  vs)))","user":"56ede653e4b04a395b9a0449"},{"problem":156,"code":"(fn [dv s] (zipmap s (repeat (count s) dv)))","user":"56019662e4b04bb52996e190"},{"problem":156,"code":"(fn [d k] (reduce #(conj % [%2 d]) {} k))","user":"561223e5e4b05f002753df8b"},{"problem":156,"code":"#(into {} (for [k %2]\n   {k %1}))","user":"5d68e60be4b0db5d338d1603"},{"code":"(fn [default keys] (reduce #(assoc % %2 default) {} keys))","problem":156,"user":"4f6fd91ae4b07046d9f4efed"},{"code":"(fn [x v] (reduce #( conj %1 [%2 x] ) (hash-map) v))","problem":156,"user":"505fc8e3e4b08f2a82ad10b6"},{"problem":156,"code":"(fn\n  [default keys]\n  (apply merge (map #(hash-map % default) keys)))","user":"554b425ce4b0a04f79299581"},{"code":"(fn [x y] (apply hash-map (interleave y (repeat x)) ))","problem":156,"user":"51e28063e4b08e53a149f0f2"},{"problem":156,"code":"(fn [v ks]\n  (reduce #(conj %1 [%2 v]) \n          {} \n          ks))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":156,"code":"(fn [value, keyList] (into {} (map #(hash-map % value) keyList)))","user":"5d531d33e4b0776584bd6f6d"},{"code":"(fn [k s]\n  (zipmap s (map (fn [x] k) s)))","problem":156,"user":"506a1985e4b01dc6af13f83e"},{"problem":156,"code":"(fn [value vect] (into {} (map (fn [k] [k value]) vect)))","user":"5d88d820e4b0915913b1d3b1"},{"problem":156,"code":"(fn\n  [i s]\n  (into {} (map #(vector % i) s)))","user":"5af907e6e4b0cc2b61a3bcda"},{"code":"(fn [x y] (zipmap y (repeat (count y) x)) )","problem":156,"user":"51227a00e4b068a9582e656b"},{"code":"#(zipmap\n  %2 \n  (apply list (repeat (count %2) %)))","problem":156,"user":"507ef25ce4b0f753b6f9788e"},{"problem":156,"code":"(fn [default-value vec-arg]\n  (zipmap vec-arg (repeat default-value)))","user":"60460824e4b02d28681c77bc"},{"problem":156,"code":"(fn [dv map-keys] (zipmap map-keys (iterate (fn [x] dv) dv)))","user":"54e84d1ee4b024c67c0cf822"},{"code":"(fn [va, vss] \r\n  (into {} \r\n      (map #(vector % va) vss)))","problem":156,"user":"4fdf566fe4b05e33b9224f99"},{"problem":156,"code":"(fn [defv coll ] (apply merge (map #(hash-map % defv) coll)))","user":"54413696e4b032a45b86936b"},{"code":"(fn [default lst]\n  (apply hash-map (interleave lst (repeat (count lst) default) ) ))","problem":156,"user":"51e7c1f1e4b0a3e081b8cbef"},{"code":"(fn create-map [k v] (into {} (for [x v :let[ret-map {x k}]] ret-map)))","problem":156,"user":"52c00e4fe4b07a9af5792342"},{"problem":156,"code":"(fn [df k]\n  (zipmap k (repeat (count k) df)))","user":"577e42dee4b0c8d87281f6e4"},{"problem":156,"code":"(fn [default coll] (into {} (map #(identity [%1 default]) coll)))","user":"5fc51d88e4b0ad564c76812a"},{"code":"(fn [x ks]\n  (reduce into (map hash-map ks (repeat x))))","problem":156,"user":"50464831e4b011c5dfee771f"},{"problem":156,"code":"(fn [default my-keys] (->> my-keys (interpose default) (vec) (#(conj % default)) (apply sorted-map)))","user":"55c5bdffe4b0e31453f649b6"},{"problem":156,"code":"(fn [x col] (apply merge (map #(hash-map % x) col)))","user":"5443bbe9e4b032a45b869389"},{"problem":156,"code":"(fn [x ks] (into {} (map #(hash-map % x) ks)))","user":"570e190fe4b0b0fb43fd06e8"},{"problem":156,"code":"(fn [d m] (into {} (map #(vector % d) m)))","user":"4ec66e84535d6d7199dd36cd"},{"problem":156,"code":"(fn [v k] (into {} (map (fn [x] { x v }) k)))","user":"54610355e4b01be26fd74696"},{"code":"(fn [d s] (reduce #(assoc % %2 d) {} s))","problem":156,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":156,"code":";;(fn [vla col]\n;;  (zipmap col (repeat vla)))\n#(zipmap %2 (repeat %1))","user":"580d7bdae4b0849f6811b73c"},{"problem":156,"code":"(fn [val x] (reduce #(assoc % %2 val) {} x))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":156,"code":"(fn [val keys] (zipmap keys (take (count keys) (cycle (if (seq? val) val (list val))))))","user":"6074df6fe4b069485764de4b"},{"problem":156,"code":";(into (sorted-map) (map #(vector % 0) [:a :b :c]))\n#(into (sorted-map) (map (fn [x] (vector x %1)) %2))","user":"6040f595e4b0d5df2af2232f"},{"code":"(fn [v ks] \n  (reduce #(assoc %1 %2 v) nil ks))","problem":156,"user":"50901b2ee4b0ea685a20f774"},{"problem":156,"code":"(fn kala [x y] \n    (zipmap y (repeat x)))","user":"5f520556e4b0a0bc16850a6d"},{"code":"(fn map-with-def [def-val keys] \n  (apply hash-map \n         (reduce #(conj %1 %2 def-val) [] keys)\n         )\n)","problem":156,"user":"52763696e4b03e8d9a4a74d7"},{"code":"#(apply assoc {} (interleave %2 (repeat (count %2) %1 )) )","problem":156,"user":"51a865dfe4b08d8ec191b80f"},{"code":"(fn [default coll] (loop [d default ks coll ret {}] (if (empty? ks) ret (recur d (rest ks) (assoc ret (first ks) d)))))","problem":156,"user":"4ec1619b535dfed6da9c6dab"},{"problem":156,"code":"(fn [default ks]\n  (zipmap ks (repeat (count ks) default) )\n   )","user":"5f3ee0d9e4b004f08c61c55c"},{"problem":156,"code":"; My original solution\n;(fn join-em [a b] \n;  (into {} \n;        (map #(hash-map %1 %2) b (repeat a))))\n\n; My 2nd solution\n; #(into {} (for [x %2 y [%1]] [x y]))\n \n\n;; (= (#(into {} (for [key %2] [key %1])) 0 [:a :b :c])\n;;   {:a 0 :b 0 :c 0})\n;; => true\n\n\n;; (#(for [key %2] [key %1]) 0 [:a :b :c])\n;; => ([:a 0] [:b 0] [:c 0])\n\n;; Norman's oroginal solution \n;; #(into {} (for [key %2] [key %1]))\n\n;; Norman's solution with var name changed from key to the-var\n;; #(into {} (for [the-var %2] [the-var %1]))\n\n;; Norman's updated solution based on what he's learned over last 2 years\n;; #(zipmap %2 (repeat %1))\n\n\n#(zipmap %2 (repeat %1))","user":"4f1c7021535d64f603146482"},{"problem":156,"code":"(fn [default ks] (reduce (fn [h k] (assoc h k default)) {} ks))","user":"53a739b0e4b0ef122a8689d0"},{"problem":156,"code":"#(reduce (fn [x y] (assoc x y %1)) {} %2\n  \n  )","user":"5885e90de4b0f1effa3b76c5"},{"code":"(fn [d args] (reduce #(conj % [%2 d]) {} args))","problem":156,"user":"52039e12e4b0fb7e47ea51ff"},{"code":"(fn [df ks]\n  (reduce #(assoc %1 %2 df) {} ks))","problem":156,"user":"53300924e4b019098a6f8b55"},{"code":"(fn [v keys]\n  (zipmap keys (repeat v)))","problem":156,"user":"517a025ce4b01aacecbecbe6"},{"problem":156,"code":"(fn [dv sk] (apply merge (map #(hash-map % dv) sk) ))","user":"56791447e4b05957ce8c6183"},{"code":"(fn [val keys] (into {}(map (fn[key] {key val}) keys)))","problem":156,"user":"5049fb24e4b044486d8af28d"},{"problem":156,"code":"(fn [ x y ]\n  (loop [ e y res {} ]\n    (if (empty? (rest e))\n      (assoc res (first e) x)\n      (recur (rest e) (assoc res (first e) x)))))","user":"57e572b5e4b0bfb2137f5ad7"},{"problem":156,"code":"(fn [default col]\n  (reduce #(conj %1 {%2 default}) {} col))","user":"5ececec5e4b016b56eae059f"},{"problem":156,"code":"(fn d[default ks]\n   \t(reduce \n     \t#(assoc %1 %2 default)\n     \t{}\n     \tks))","user":"5ba75fdfe4b0a20761a23419"},{"problem":156,"code":"(fn [default pointers]\n  (loop [pointers pointers\n         result {}]\n    (if (= 0 (count pointers))\n      result\n      (recur (rest pointers) (assoc result (first pointers) default)))))","user":"53c69ebce4b00fb29b22129c"},{"problem":156,"code":"(fn [x y]\n  (into {} (for [y-value y] [y-value x])))","user":"555df9c8e4b0a2eb076a39b2"},{"problem":156,"code":"(fn [default keys]\n  (reduce (fn [map key] (assoc map key default)) {} keys))","user":"55d29fb6e4b0e31453f64a59"},{"problem":156,"code":"(fn ab [a b]\n  (if (= (count b) 1)\n    {(first b) a}\n    (into {(first b) a} (ab a (rest b)))\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"problem":156,"code":"(fn [default-val kys] (zipmap kys (repeat default-val)) )\n\n; _pcl's solution is nice as usual: \n; #(apply hash-map (interleave %2 (repeat %1)))\n; Because I don't understand how 'apply' works, I thought _pcl's solution would've generated a sequence filled with hash-map objects.","user":"5535e822e4b09218d5f44fb2"},{"code":"(fn [n c]\n   (into {} (map (fn[k] [k n] ) c)))","problem":156,"user":"504f44cfe4b0a02f9cffde65"},{"code":"(fn [d v] (zipmap v (repeat (count v) d)))","problem":156,"user":"500854c4e4b028e089d3518c"},{"problem":156,"code":"(fn sk-mapdefault [default-value keys]\n  (into {} (map (fn [key value] {key value}) keys (iterate identity default-value))))","user":"5884f377e4b0f1effa3b76a8"},{"problem":156,"code":"(fn [k coll]\n  (apply hash-map (interleave coll (repeat (count coll) k))))","user":"5fa358a1e4b0f0ebd91b77fd"},{"problem":156,"code":"#(reduce (fn [s x] (assoc s x %1)) {} %2)","user":"575556fae4b02ea1147992c3"},{"problem":156,"code":"#(into {} (map vec (partition 2 (interleave %2 (repeat (count %2) %1)))))","user":"55caabd1e4b0e31453f649fb"},{"code":"(fn [dft mp] (into {} (for [k mp] [k dft])))","problem":156,"user":"52f3b288e4b05e3f0be25f16"},{"problem":156,"code":"(fn [defv llist]\n  (loop [result {} llist llist]\n    (if (empty? llist)\n      result\n      (recur (assoc result (first llist) defv) (rest llist)))))","user":"590d0bc8e4b047aa04b199fa"},{"problem":156,"code":"(fn [v xs]\n  \t(loop [m {}\n           xs xs]\n      (if (empty? xs)\n        m\n        (recur (assoc m (first xs) v) (rest xs)))))","user":"4f4e78fee4b03ad3f0c10cc8"},{"problem":156,"code":"(fn\n  [i s]\n  (into {} (map #(hash-map %1 i) s)))","user":"5d8570cae4b0915913b1d395"},{"problem":156,"code":"(fn [default my-keys]\n  (zipmap my-keys (repeat default)))","user":"54dfbacae4b024c67c0cf7b1"},{"code":"(fn [v kk]\n  (reduce #(assoc %1 %2 v) {} kk))","problem":156,"user":"532418f3e4b09d4e7a9b54d8"},{"code":"(fn [d xs] (reduce (fn [a e] (assoc a e d)) {} xs))","problem":156,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":156,"code":"(fn map-shtuff [value collection]\n(zipmap collection (into [] (take (count collection) (repeat value))))\n)","user":"5dcc651de4b02b31cc3da3c8"},{"problem":156,"code":"#(apply assoc (cons {} (interleave %2 (for [_ (range (count %2))] %1))))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":156,"code":"(fn [v keys] \n  (apply hash-map (interleave keys (repeat v))))","user":"56bb652ae4b0f26550335953"},{"problem":156,"code":"(fn x [default-value my-sequence]\n  (reduce (fn [acc element]\n            (assoc acc element default-value)) {} my-sequence))","user":"546ff701e4b00cfc9eacc1b3"},{"code":"#(reduce (fn [m v] (assoc m v %)) {} %2)","problem":156,"user":"5250779ee4b0541d1855b82f"},{"problem":156,"code":"(fn [x seq] (zipmap seq (repeat x)))","user":"5aa2dc5ae4b0d174b936c861"},{"problem":156,"code":"(fn [v k]\n  (into {}\n        (for [e k]\n          [e v])))","user":"58f98231e4b0438e51c2cf4c"},{"problem":156,"code":"(fn [d xs] \n  (reduce (fn [m k] (assoc m k d)) {} xs))","user":"57a5da5ee4b0a966079561fe"},{"problem":156,"code":"#(into {} (map (fn [x](vector x %)) %2))","user":"54187e84e4b01498b1a71a1b"},{"problem":156,"code":"(fn [x y] \n  (into {}\n        (apply map vector [y (vec (repeat (count y) x))])))","user":"570306cae4b08d47c97781ec"},{"problem":156,"code":"#(loop [m {} l %2] \n   (if (empty? l) \n     m \n     (recur (assoc m (first l) %1) (rest l))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"code":"(fn [d k]\n  (into {} (map #(vector % d) k)))","problem":156,"user":"4ff9d4e5e4b0678c553fc3b0"},{"code":"#(apply array-map (interleave %2 (repeat (count %2) %1)))","problem":156,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":156,"code":"(fn [defaultValue keySeq] (\n                            reduce #(assoc %1 %2 defaultValue) {} keySeq\n                                   )\n  )","user":"60057cd4e4b074f607df664a"},{"problem":156,"code":"(fn [value key]\n  (into {}\n        (map vector key\n             (repeat value))))","user":"5527be83e4b0ffed3738f936"},{"problem":156,"code":"(fn [value map] (reduce-kv (fn [m k v] (assoc m v value)) {} map))","user":"5818908be4b0c0e9c07b83bb"},{"code":"(fn [x coll] (zipmap coll (repeat (count coll) x)) )","problem":156,"user":"52721a11e4b03e8d9a4a7413"},{"code":"(fn [value m-keys]\n\t(into {} (map #(vector %1 value) m-keys)))","problem":156,"user":"52e657e4e4b09f7907dd1472"},{"code":"(fn [d keys] (reduce (fn [m k] (assoc m k d)) {} keys))","problem":156,"user":"522afe78e4b0d34ee08e71b3"},{"code":"(fn [value kys] (reduce #(assoc % %2 value) {} kys))","problem":156,"user":"5275a47ae4b03e8d9a4a74c7"},{"code":"#(reduce (fn [d e] (assoc d e %1)) {} %2)","problem":156,"user":"4e6a5158535d8ccf87e9fec5"},{"code":"(fn [d s]\n  (loop [m {} s s]\n    (if (empty? s)\n    m\n    (recur (conj m [(first s) d]) (rest s)))))","problem":156,"user":"4fb79872e4b081705acca2d2"},{"problem":156,"code":"(fn mem\n  [a coll]\n  (reduce #(assoc %1 %2 a) {} coll))","user":"56b1ab17e4b0982f16b37df1"},{"problem":156,"code":"#(zipmap %2 [%1 %1 %1 %1])","user":"56c749d8e4b0ed865f9758ba"},{"code":"(fn [a b] (zipmap b (repeat (count b) a)))","problem":156,"user":"504e2333e4b0f6ff3350c46c"},{"code":"(fn [val keys]\n  (apply conj {} (map #(hash-map % val) keys)))","problem":156,"user":"526aac71e4b03e8d9a4a7235"},{"code":"(fn [v kk] (reduce (fn [m k] (assoc m k v)) {} kk ))","problem":156,"user":"50fa01bce4b07934dda8b0ba"},{"code":"(fn [val seq]\n    (reduce (fn [map key]\n              (assoc map key val))\n            {} seq))","problem":156,"user":"511e763ce4b03e81d390ac29"},{"problem":156,"code":"(fn [d m] (reduce #(conj %1 {%2 d}) {} m))","user":"57ddb63fe4b0bd073c20244a"},{"problem":156,"code":"(fn[v k] \n  (\n    reduce #(conj %1 [%2 v]) {} k\n  ))","user":"54f4a457e4b0f2f3c5226e83"},{"problem":156,"code":"(fn [default keys] ((fn [default keys map] (if (empty? keys) map (recur default (rest keys) (conj map [(first keys) default])))) default keys {}))","user":"5cb47a0fe4b026601754b91b"},{"problem":156,"code":"(fn [d col] (reduce #(assoc %1 %2 d) {} col))","user":"5ffe889ce4b074f607df6603"},{"code":";;\n(\n  fn sol [ a coll ](\n\t\tzipmap coll ( repeat a )\n\t)\n)","problem":156,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"(fn [a b]\r\n  (zipmap b (for [i (range 0 (count b))]\r\n    a)))","problem":156,"user":"4fc52986e4b081705acca383"},{"code":"(fn [x y] (apply hash-map (reduce into (for [z y] [z x]))))","problem":156,"user":"5186448fe4b0da5a5be3bac9"},{"problem":156,"code":"(fn [v ks] \n  (zipmap ks (repeat v)))","user":"548c6673e4b0e286459a1209"},{"code":"(fn [d v] (reduce #(into %1 {%2 d}) {} v))","problem":156,"user":"528e64b7e4b0239c8a67aedd"},{"problem":156,"code":"#(reduce conj (for [k %2] {k %1}))","user":"53dadf1de4b0e771c30254ad"},{"problem":156,"code":"#(loop [res {}\n         in %2]\n    (if (empty? in)\n      res\n      (recur (assoc res (first in) %1)\n             (rest in))))","user":"5a14959de4b0ff51aa4b31a0"},{"code":"(fn [a b] (into {} (for [e b] [e a])))","problem":156,"user":"50335235e4b0c6c1199c710b"},{"problem":156,"code":"(fn map-defaults [default keys]\n  (reduce #(assoc %1 %2 default) {} keys))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn [default s] \n  (zipmap s (repeat (count s) default)))","problem":156,"user":"51a7b4fee4b0da5f497bde8b"},{"code":"#(apply hash-map \n   (interleave \n    %2 \n    (take (count %2) (repeat %1))\n    )\n   )","problem":156,"user":"52fe869be4b047fd5583703f"},{"problem":156,"code":"(fn [x y] \n  ;x = 0\n  ;y = [:a :b :c]\n  (apply hash-map (interleave y (repeat (count y) x))))","user":"554b8b65e4b0a04f7929958a"},{"problem":156,"code":"(fn [v x] (loop [m '{} k x] (if (empty? k) m (recur (assoc m (first k) v) (rest k)))))","user":"52ea7d3ae4b09f7907dd14bf"},{"problem":156,"code":"#(apply assoc {}\n         (interleave %2 (repeat (count %2) %1)))","user":"5574c172e4b05c286339e059"},{"code":"(fn m [v ks]\n  (into {}\n        (map #((juxt identity (constantly v)) %) ks)))","problem":156,"user":"50377d53e4b0af0658af77ad"},{"code":"(fn md [d m]\n  (into {} (map vec (partition 2 2 (interleave m (repeat d))))))","problem":156,"user":"532b43c3e4b09d4e7a9b5531"},{"code":"(fn [d ks] (zipmap ks (map (fn [k] d) ks)))","problem":156,"user":"51307b84e4b08c712d3fae39"},{"problem":156,"code":"(fn me [value coll]\n  (loop [coll coll result {}]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (assoc result (first coll) value)))))","user":"54f03f8ce4b024c67c0cf891"},{"problem":156,"code":"(fn [x y] (reduce #(conj %1 {%2 x}) {} y))","user":"5367bc60e4b0243289761e81"},{"problem":156,"code":"(fn\n  [value coll]\n  (reduce #(assoc % %2 value) {} coll)\n  )","user":"53b182a5e4b047364c044491"},{"code":"(fn [d c] (reduce (fn [a b] (assoc a b d)) {} c))","problem":156,"user":"4eadc217535d7eef30807321"},{"code":"(fn [def-val keys]\n  (apply merge (map #(hash-map % def-val) keys)))","problem":156,"user":"4fda8f57e4b05e33b9224f4e"},{"problem":156,"code":"#(into {} (map (fn [e] (hash-map e %)) %2))","user":"567b2f20e4b05957ce8c61a2"},{"problem":156,"code":"(fn [def-val col]\n  (reduce #(assoc %1 %2 def-val) {} col))","user":"576d24ede4b0979f8965155b"},{"code":"#(apply hash-map (concat (interpose %1 %2) [%1]) )","problem":156,"user":"528f4462e4b0239c8a67aef0"},{"problem":156,"code":"(fn [def-val ks]\n  (reduce #(assoc %1 %2 def-val) {} ks))","user":"54a1f494e4b09f271ff37c52"},{"problem":156,"code":"(fn\n [val coll-key]\n (into {}\n  (for\n   [k coll-key]\n   {k val})))","user":"54dbe183e4b024c67c0cf778"},{"problem":156,"code":"(fn f [x xs] (reduce #(conj %1 [%2 x]) {} xs))","user":"55645592e4b0c656e3ff1802"},{"problem":156,"code":"(fn[d items] (zipmap items (repeat d)))","user":"588e64ebe4b00487982d518a"},{"code":"(fn [val keys] (into {} (for [k keys] [k val])))","problem":156,"user":"51761580e4b085adf681d880"},{"problem":156,"code":"(fn [val keys] \n  (reduce into {} (map #(hash-map % val) keys)))","user":"56a80867e4b07966d5a8a069"},{"problem":156,"code":"(fn [g q] (loop[y q z {}] (if (= (empty? y) false) (recur (drop 1 y)(assoc z (first y) g)) z)))","user":"561be724e4b064ca9f4b168c"},{"code":"(fn blah  [v keyz] \n\t(if (empty? keyz) \n      (hash-map) \n      (assoc (blah v (rest keyz)) (first keyz) v)))","problem":156,"user":"50dc2cd7e4b02e6ac9592c86"},{"code":"(fn [default ks] \n  (reduce merge \n   (map \n         (fn [k] {k default}) ks)))","problem":156,"user":"538c3424e4b0b51d73faae58"},{"problem":156,"code":"(fn [def_value coll]\n  (reduce\n    (fn [dict keyword]\n      (into dict {keyword def_value}))\n    {} coll))","user":"5890799be4b00487982d51d6"},{"code":"#(zipmap %2 [% % %])","problem":156,"user":"4fbacdbae4b081705acca2e5"},{"problem":156,"code":"(fn [x y]\n  (apply\n   hash-map\n   (interleave y (repeat x))))","user":"5c7741dce4b0fca0c1622806"},{"problem":156,"code":"(fn [value coll] (zipmap coll (repeat (count coll) value)))","user":"54497569e4b032a45b8693d2"},{"problem":156,"code":"(fn [d coll]\n  (apply assoc {}\n    (interleave coll (repeat d))\n  ))","user":"50c6052ce4b0c9dc10d15c56"},{"code":"#(apply array-map\n  (interleave %2 (repeat %1)))","problem":156,"user":"4e65f9d4535d8ccf87e9fe73"},{"problem":156,"code":"(fn [d s] (reduce merge (map #(assoc {} % d) s)))","user":"5c8fa41be4b048ec896c59c1"},{"problem":156,"code":"(fn [d, keys] (into {} (map #(vector %1 %2) keys (repeat (count keys) d))))","user":"55507a1ae4b00713264bd9a7"},{"code":"#(into {} (for [x %2] [x %]))","problem":156,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn [v s] (apply hash-map (conj (vec (interpose v s)) v)))","problem":156,"user":"51662183e4b05e5ef6a5e807"},{"problem":156,"code":"#(into {} (map hash-map %2 (repeat (count %2) %1)))","user":"53d9e587e4b0e771c302547c"},{"problem":156,"code":"(fn build-default-map [x xs]\n  (zipmap xs (repeat x)))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"code":"(fn [d-val key-vec] (into {} (map #(hash-map % d-val) key-vec)))","problem":156,"user":"4f18677d535d64f603146459"},{"code":"(fn [value keys]\n \t(reduce (fn [su key] (assoc su key value)) {} keys))","problem":156,"user":"51f5539fe4b0abb92f97f9cd"},{"code":"(fn solution [init-val keys-list]\n    (zipmap keys-list (repeat (count keys-list) init-val))\n  )","problem":156,"user":"5226f8e9e4b04e78ff2e199a"},{"problem":156,"code":"(fn [default keys]\n  (into (hash-map) (for [key keys] [key default])))","user":"6023a3abe4b0d5df2af22212"},{"problem":156,"code":"(fn [def-val col-key] (reduce #(into %1 {%2 def-val}) {} col-key))","user":"556189a6e4b0c656e3ff17c9"},{"problem":156,"code":"(fn sample [defaultVal keySequence]\n  (zipmap keySequence (for [key keySequence]\n                        defaultVal))\n  )","user":"591f2e4ae4b09b4ee5954c44"},{"problem":156,"code":"(fn [k col] (reduce #(assoc %1 %2 k) {} col))","user":"55996253e4b031d6649c9baa"},{"problem":156,"code":"(fn defmap\n  [x ks]\n  (reduce (fn [accum k] (into accum {k x})) {} ks))","user":"5c222b7de4b07e362c230588"},{"problem":156,"code":"(fn mapWithDefaults [d keyList]\n  ;; d is the default value\n  ;; keyList is a seq of key values\n  ;; returns a map of the keys using the default values\n  \n  (into {}\n    (map #(hash-map % d) keyList)\n    ;(for [k keyList]\n    ;  [k d]\n    ;)\n  )\n)","user":"571aae1fe4b07c98581c3b5a"},{"problem":156,"code":"(fn [d v] \n  (loop [m {}\n         arr v\n         default d]\n    (if-not (empty? arr)\n      (recur (assoc m (first arr) d) (rest arr) default)\n      m)))","user":"53cd421ce4b00fb29b2212dd"},{"code":"(fn [value the-keys]\n  (reduce #(assoc %1 %2 value) {} the-keys))","problem":156,"user":"53070615e4b02e821686979e"},{"problem":156,"code":"(fn [default v]\n  (loop [newmap {}\n         key-list v]\n    (if (empty? key-list)\n      newmap\n      (recur (assoc newmap (first key-list) default)\n             (rest key-list)))))","user":"53c6dcf9e4b00fb29b2212a3"},{"code":"(fn [x coll]\n  (into {} (map (fn [collVal] {collVal x}) coll)))","problem":156,"user":"50b32252e4b03ea880433568"},{"problem":156,"code":"(fn [default keylist] (apply assoc {} (interleave keylist (repeat default))))","user":"5609d328e4b05f002753deee"},{"problem":156,"code":"(fn [va sq] (zipmap sq (repeat va)))","user":"60cc2d58e4b0e0fa5f1b4323"},{"problem":156,"code":"(fn map-defaults\n  [n xs]\n  (zipmap xs (into [] (repeat (count xs) n))))","user":"57c500f9e4b05aa3c4741cda"},{"problem":156,"code":"(fn [default-value key-list] (\n    reduce (\n    \tfn [all key-name] (assoc all key-name default-value)\n  \t) {} key-list                      \n  )\n)","user":"5471f090e4b094393f72dd6e"},{"problem":156,"code":"(fn map-default\n  [default-value keys]\n  (if (seq keys)\n    (conj (map-default default-value (rest keys)) [(first keys) default-value])\n    {})\n  )","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":156,"code":"(fn [d ks] (loop [result {}, remaining ks, default d] \n  (if (not (empty? remaining))\n    (recur (conj result {(first remaining) default})\n           (rest remaining)\n           d)\n    result)))","user":"5522a795e4b0882d96d091a7"},{"problem":156,"code":"(fn [d ks]\n  (loop [res {} k ks]\n    (if (empty? k)\n      res\n      (recur (conj res [(first k) d]) (next k)))))","user":"553b87abe4b09218d5f45003"},{"code":"(fn [df v] (reduce conj {} (map #(vector % df) v)))","problem":156,"user":"516db4f6e4b046df6fbb76a0"},{"code":"#(\n  zipmap %2 (repeat %1)\n  )","problem":156,"user":"5094057fe4b097f48cc38593"},{"code":"(fn [v ks] (reduce #(assoc % %2 v) {} ks))","problem":156,"user":"4ff66816e4b0678c553fc37a"},{"code":"(fn [dflt lst] \n  (loop [a lst ret {}]\n    (if a\n      (recur (next a) (assoc ret (first a) dflt))\n      ret)))","problem":156,"user":"4e74e119535d7a570dd295bc"},{"problem":156,"code":"(fn [default keys] (reduce (fn [acc k] (assoc acc k default)) {} keys))","user":"54eee3a3e4b024c67c0cf879"},{"code":"(fn [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))","problem":156,"user":"4fce5474e4b0d4b2a7a9d451"},{"code":"(fn [x klist]\n  (reduce (fn [acc i] (merge acc i)) {} (map (fn [y] {y x}) klist))\n   )","problem":156,"user":"5141a8f2e4b02fd87f5064c1"},{"problem":156,"code":"(fn mapdef [val keys] \n   (loop [a {} k keys]\n     (if (empty? k)\n        a\n        (recur (assoc a (first k) val) (rest k)))))","user":"569aca1ee4b0542e1f8d144d"},{"problem":156,"code":"#(reduce (fn [r s] (assoc r s %1) ) {} %2)","user":"556086a2e4b0c656e3ff17c1"},{"problem":156,"code":"(fn [default hm]\n    (loop [newhm {}\n           hm hm]\n        (if (empty? hm)\n            newhm\n            (recur (assoc newhm (first hm) default) (rest hm)))))","user":"5f77d470e4b02876ed9fd0be"},{"code":"(fn [defa list] (zipmap list (repeat defa)))","problem":156,"user":"5226f9b8e4b04e78ff2e199b"},{"problem":156,"code":"(fn [val keys]\n    (into {}\n      (for [k keys]\n        {k val})))","user":"532f7e12e4b019098a6f8b4e"},{"problem":156,"code":"(fn hash-factory [default-value keys-list]\n  (if (empty? keys-list) {}\n    (conj\n     (hash-factory default-value (rest keys-list))\n     [(first keys-list) default-value])))","user":"5f2aa09ce4b033932238a655"},{"problem":156,"code":"(fn [k m] (zipmap m (repeat (count (keys m)) k)))","user":"607e1d9de4b03d835a6eaedb"},{"code":"(fn [value sequence] \n  (reduce (fn [fi se] (assoc fi se value) ) {} sequence))","problem":156,"user":"50b525c5e4b0c464d223d1c3"},{"problem":156,"code":"(fn hash-makers [val keys] \n  (reduce (fn [hash-results curr]\n            (conj hash-results {curr val})) {} keys))","user":"56e53d2fe4b02e7e935eb6bc"},{"code":"(fn [v ks] (zipmap  ks (repeat (count ks) v)) )","problem":156,"user":"4f0d45de535d0136e6c22315"},{"problem":156,"code":"(fn [d m] (into {} (for [x m] {x d})))","user":"54b95f3de4b0ed20f4ff6eab"},{"problem":156,"code":"(fn [val seq] (loop [seq seq acc {}] (if-not (empty? seq) (recur (rest seq) (concat {(first seq) val} acc)) (apply hash-map (mapcat identity acc)))))","user":"5385e633e4b06839e8705f08"},{"problem":156,"code":"(fn [v s]\n  (reduce (fn [acc k] \n            (assoc acc k v))\n          {} \n          s))","user":"5af1e1b1e4b0cc2b61a3bc67"},{"code":"(fn blah\n  [d xs] (cond\n    (empty? xs) {}\n    :else (conj (blah d (rest xs)) [(first xs) d])))","problem":156,"user":"4fd6f4d8e4b0dab7d829f37b"},{"problem":156,"code":"(fn [d lst]\n  (into {} (map #(conj [%] d) lst)))","user":"55ede35ce4b0121d4835fde1"},{"problem":156,"code":"(fn [d k]\n  (reduce conj {} (vec (map vec (partition 2 (interleave k (repeat d)))))))\n  \n  \n  ;;Nicer\n  ;;(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))","user":"52aaabf7e4b0c58976d9ac68"},{"problem":156,"code":"(fn [val keys]\n   (loop [keys keys\n          result {}]\n     (cond (empty? keys)\n           result\n           :else\n           (let [key (first keys)]\n             (recur (rest keys) (assoc result key val)))\n           )\n\n     ))","user":"573107d5e4b0cd1946bd0fbc"},{"problem":156,"code":"(fn [default coll] (into {} (map (fn [x] [x default]) coll)))","user":"59804b60e4b021a7a535fdcf"},{"problem":156,"code":"(fn [d,k] (apply assoc {} (interleave k (repeat (count k) d))))","user":"55c10409e4b01b9910ae2a2c"},{"problem":156,"code":"(fn [default s]\n(zipmap s (repeat default)))","user":"58900f69e4b00487982d51c8"},{"problem":156,"code":"(fn [v k] (zipmap k (repeat (count k) v) ) )","user":"53b4bddae4b047364c0444b9"},{"code":"(fn default-map [value keys] (if (empty? keys) {} (merge (hash-map (first keys) value) (default-map value (rest keys)))))","problem":156,"user":"511d5d8ee4b022853b0e07a3"},{"problem":156,"code":"(fn [def-value keys]\n  (reduce #(assoc %1 %2 def-value) {} keys))","user":"50738138e4b054001656acc9"},{"code":"(fn [d,v] (reduce #(conj %1 {%2 d}) {} v))","problem":156,"user":"5142e808e4b0c172af7558c9"},{"problem":156,"code":"(fn [default keys]\n  (reduce\n   (fn [acc cur] (assoc acc cur default))\n   {}\n   keys))","user":"5bc8e91ee4b07a9b28b100ce"},{"code":"(fn [dv kv] (zipmap kv (repeat dv)))","problem":156,"user":"4fee1574e4b0678c553fc309"},{"problem":156,"code":"(fn [v c]    (reduce into  (map #(sorted-map %1 %2) c (repeat v))) )","user":"56c7d8dee4b0ed865f9758c9"},{"code":"(fn [v ks]\n  (loop [k ks m {}]\n    (if (empty? k) m\n        (recur (rest k) (assoc m (first k) v)))))","problem":156,"user":"4fae258de4b081705acca246"},{"problem":156,"code":"(fn add [x y] (loop [i 0 acc (empty y)]\n                  (if (< (count y) (+ i 1))\n                    (apply hash-map  acc)\n                    (recur (inc i) (conj (conj acc (get y i)) x)))))","user":"598d22b1e4b02b9968b84d1a"},{"code":"(fn [ret v col] \n  (if (= '() col)\n    ret\n    (recur (conj ret [(first col) v]) v (rest col))))\n{}","problem":156,"user":"50bfe725e4b080409b860f26"},{"code":"#(reduce (fn [m, y] (assoc m y %1)) {} %2 )","problem":156,"user":"52ca720fe4b071a8d36bd3e2"},{"code":"(fn [default seq] (zipmap (reverse seq) (repeat (count seq) default)))","problem":156,"user":"52117ea7e4b07aea8afc4f70"},{"code":"(fn [default lst] (reduce (fn [acc val] (assoc acc val default)) {} lst))","problem":156,"user":"506929ffe4b01dc6af13f82b"},{"problem":156,"code":"(fn [v ks]\n  (into {} \n        (map vector ks (repeat (count ks) v))))","user":"54ab951be4b09f271ff37ccc"},{"problem":156,"code":"(fn [default key-seq]\n  (zipmap key-seq (repeat default)))","user":"57c70189e4b05aa3c4741cfb"},{"code":"(fn [default sequ]\n  (loop [default default\n         sequ sequ\n         newmap {}\n         iterator (count sequ)]\n    (if (= iterator 0)\n      newmap\n      (recur default (rest sequ) (conj newmap {(first sequ) default}) (dec iterator)))))","problem":156,"user":"50bd13dee4b0594b91591c65"},{"problem":156,"code":"(fn [default keys]\n  (loop [map {} [f & rest] keys]\n    (if f\n      (recur (assoc map f default) rest)\n      map)))","user":"56175cf9e4b06b1bb2182a0f"},{"problem":156,"code":"(fn [value keys]\n  (reduce #(assoc %1 %2 value) {} keys))","user":"537cb3ade4b06839e8705e7d"},{"problem":156,"code":"(fn [v m] (into {} (map #(hash-map % v) m)))","user":"56d9f312e4b0ea9b8538f7fa"},{"code":"(fn [dv ks]\n  (loop [kys ks\n         result {}]\n    (if (empty? kys)\n      result\n      (recur (rest kys) (assoc result (first kys) dv)))))","problem":156,"user":"504dffe2e4b078edc5f5938b"},{"problem":156,"code":"(fn map-def [defVal seq]\n     (when (not (= (first seq) nil))\n          (conj {(first seq) defVal} (map-def defVal (rest seq)))))","user":"56ffeafee4b08d47c97781c2"},{"problem":156,"code":"(fn [default v] (into {} (for [k v] [k default])))","user":"5fa74b82e4b0fa27300f3dda"},{"code":"(fn my-map [d k] (zipmap k (repeat (count k) d)))","problem":156,"user":"53388e2de4b0e30313ee6c9c"},{"problem":156,"code":"(fn map-with-defaults [default-value keys]\n  (loop [result {} remaining-keys keys]\n    (if (empty? remaining-keys)\n      result\n      (recur (assoc result (first remaining-keys) default-value) (rest remaining-keys)))))","user":"59fa7fb0e4b0ca45a743a366"},{"problem":156,"code":"#(->> (repeat %1) (interleave %2) (apply hash-map))","user":"5da8fa72e4b000c986472c2d"},{"code":"(fn [df kys]\n  (reduce (fn [mp val] (conj mp [val df])) {} kys))","problem":156,"user":"50763574e4b0a894bb95bf3d"},{"problem":156,"code":"(fn [x m] (zipmap m (take (count m) (cycle [x]))))","user":"5169b23fe4b03f62cda68cee"},{"code":"(fn map-default [default vect]\n  (if\n    (empty? vect)\n    {}\n    (conj  {(first vect) default}\n          (map-default default (rest vect)))))","problem":156,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn [d coll]\n    (reduce #(assoc %1 %2 d) {} coll))","problem":156,"user":"4f1bee08535d64f60314647e"},{"code":"(fn [v ks] \n  (let [vals (repeat (count ks) v)\n        recs (interleave ks vals)]\n        (apply hash-map recs)\n    ))","problem":156,"user":"52430d3ce4b076204b44faa5"},{"problem":156,"code":"(fn[v k] (apply hash-map (mapcat #(list %1 v) k)))","user":"57b9fc74e4b0fbc9809a27fb"},{"problem":156,"code":"(fn [v ks]\n  (apply conj (map #(hash-map % v) ks)))","user":"545f737ce4b01be26fd74688"},{"code":"#(reduce (fn [m v]\r\n            (assoc m v %1))\r\n        {} %2)","problem":156,"user":"500d1db4e4b05f7c30cfa69f"},{"code":"(fn [default someSeq]\n  (zipmap someSeq (repeat (count someSeq) default)))","problem":156,"user":"4dcc2435535d5973398f9290"},{"code":"(fn [a b]\n  (apply assoc {} (interleave b [a a a])))","problem":156,"user":"50b79c5fe4b0cf3e51c3046c"},{"problem":156,"code":"(fn [v keys] (zipmap keys (map (constantly v) keys)))","user":"54a96a15e4b09f271ff37cad"},{"problem":156,"code":"(fn [defaultValue coll]\n  (reduce #(assoc %1 %2 defaultValue) {} coll))","user":"59a1fd6be4b066c664927d1b"},{"code":"#(into {} (for [e %2] [e %1]))","problem":156,"user":"52ee0de4e4b05e3f0be25ec1"},{"problem":156,"code":"(fn [defvalue keys]\n  (into {} (map #(hash-map % defvalue) keys)))","user":"5819a092e4b0e114eb519fdb"},{"code":"#(apply assoc {} (interleave %2 (repeat (count %2) %1) ))","problem":156,"user":"4ebfdfda535dfed6da9c6d9e"},{"code":"(fn [d keys]\n  (reduce\n    (fn [entry map]\n      (conj map entry))\n    (map\n      (fn [key]\n        {key d})\n      keys)))","problem":156,"user":"4f5c0549e4b0030a34fb2b1a"},{"problem":156,"code":"(fn [init sq]\n  (reduce #(assoc %1 %2 init) {} sq))","user":"5c165d3ee4b01240ff5671d1"},{"problem":156,"code":"(fn [value coll]\n  (apply assoc {} (interleave coll (repeat (count coll) value))))","user":"59fb1ca3e4b0ca45a743a376"},{"code":"(fn map-default [v xs]\n  (zipmap  xs (vec(repeat (count xs) v))))","problem":156,"user":"507bb3ece4b09034bfeeb720"},{"code":"#(zipmap %2 (repeat %))\n\n;; #(apply assoc {} (interleave %2 (repeat %1)))\n;; #(apply hash-map (interleave %2 (repeat %1)))\n\n;; (fn [default keys]\n;;   (->>  (for [key keys] {key default})\n;;         (apply conj)))\n\n\n;; (fn [val keys] \n;;   (->>\n;;    (interleave keys (repeat val))\n;;    (partition 2)\n;;    (map vec)\n;;    (into {})))\n\n;; #(into {} (map vector %2 (repeat %)))\n\n;; (fn [x s] (reduce #(assoc %1 %2 x) {} s))","problem":156,"user":"503f4759e4b00d1a725ff2a9"},{"problem":156,"code":"#(reduce (fn [acc x] (assoc acc x %1)) {} %2)","user":"529599dce4b02ebb4ef75027"},{"problem":156,"code":"(fn [default a-seq]\n  (zipmap a-seq (repeat (count a-seq) default)))","user":"53fd0a22e4b0de5c418485e1"},{"problem":156,"code":"(fn [x coll] (zipmap coll (repeat (count coll) x)))","user":"5a61bf79e4b0512ff01cd97b"},{"problem":156,"code":"(fn [x coll]\n  (reduce #(conj %1 [%2 x]) {} coll))","user":"5576961be4b05c286339e06f"},{"code":"(fn map-with-defaults [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))","problem":156,"user":"5119f3d5e4b06c8af0111818"},{"problem":156,"code":";(fn [default input]\n ; (loop [in input out {}]\n  ;  (if (empty? in)\n   ;   out\n    ;  (recur\n     ;   (rest in)\n      ;  (conj out [(first in) default])))))\n\n; Solution 2\n (fn [d coll]\n   (into {} (for [i coll]\n              (sorted-map i d))))","user":"567a3112e4b05957ce8c6196"},{"problem":156,"code":"(fn f156 [x coll]\n   (zipmap coll (repeat (count coll) x)))","user":"55634f38e4b0c656e3ff17e8"},{"problem":156,"code":"(fn [d k] (reduce (fn [acc _] (assoc acc _ d)) {} k))","user":"59f043d0e4b0966464fe6a3d"},{"problem":156,"code":"(fn [v k]\n  (loop [x k\n         m (hash-map)]\n    (if-not (empty? x)\n      (recur (rest x) (conj m [(first x) v]))\n      m)))","user":"5f41f28ae4b0955706451fad"},{"problem":156,"code":"(fn f\n  ([v keys] (f {} v keys))\n  ([m v keys]\n  (if (empty? keys)\n    m\n    (let [[k & ks] keys]\n      (recur (assoc m k v) v ks)))))","user":"524a9556e4b05ef8e38e64b1"},{"problem":156,"code":"(fn [default keys]\n  (loop [result {}\n         remkeys keys]\n    (if (empty? remkeys)\n            result\n            (recur (assoc result (first remkeys) default) (rest remkeys)))))","user":"55ecac8ee4b0121d4835fdcc"},{"problem":156,"code":"(fn [default coll-keys]\n    (loop [result {} default default coll-keys coll-keys]\n        (if (empty? coll-keys)\n            result\n            (recur (assoc result (first coll-keys) default) default (rest coll-keys)))))","user":"5896735fe4b00487982d529d"},{"code":"(fn [d ks] (apply hash-map (apply concat (map #(list % d) ks))))","problem":156,"user":"50dfb660e4b061dbdced7228"},{"problem":156,"code":"(fn [default coll]\n  (into {} (map vector coll (repeat (count coll) default))))","user":"58ffac9de4b0438e51c2cffd"},{"problem":156,"code":";(fn \n;  [val vec]\n;  (loop [remaining vec final {}]\n;    (if (empty? remaining)\n;      final\n;      (let [[thing & remmy] remaining]\n;        (recur remmy\n;               (into final \n;                     (hash-map thing val)))))))\n\n  \n\n;(fn \n;  [val vec]\n;  (reduce \n;   (fn [final thing2]\n;     (into final (hash-map thing2 val)))\n;   {} vec))\n\n(fn [x v]\n  (reduce\n   #(into %1 (hash-map %2 x)) {} v))","user":"564ba493e4b0284900eef669"},{"problem":156,"code":"(fn [val keys]\n  (loop [[ x & xs] keys mp {}]\n    (if (empty? xs)\n      (into mp {x val})\n      (recur xs (into mp {x val})))))","user":"5883a9bae4b0f1effa3b7681"},{"code":"(fn [default-val keys] (reduce #(assoc %1 %2 default-val) {} keys))","problem":156,"user":"525fea5ae4b03e8d9a4a7026"},{"problem":156,"code":"(fn[x y](zipmap y (repeat x)))","user":"5826a843e4b051871117befd"},{"code":"(\n    fn [x l]\n    (\n      loop [myMap {}\n            myKeys (seq l)]\n      (\n        if (and true myKeys)\n        (\n          recur (assoc myMap (first myKeys) x) \n                (next myKeys)     \n        )\n        myMap\n      )\n    )\n  )","problem":156,"user":"50644f3ee4b007509339a589"},{"problem":156,"code":"(fn [default ks]\n  (reduce #(conj %1 [%2 default]) {} ks))","user":"56f514cee4b046a417f92068"},{"problem":156,"code":"#(let [v %1\n       add-key (fn [map key] (assoc map key v))]\n  \t(reduce add-key {} %2))","user":"55253217e4b0882d96d091ce"},{"problem":156,"code":"(fn [d s] (zipmap s (repeat (count s) d)))","user":"5466199ce4b01be26fd746e2"},{"code":"(fn [default keys]\n  (into {} (for [key keys] [key default])))","problem":156,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"(fn [x lst] (apply hash-map (interleave lst (repeat x))))","problem":156,"user":"50435689e4b034ff00315d21"},{"problem":156,"code":"(fn [a b] (into {} (map #(vector % a) b)))","user":"533f1584e4b085b17e897d9b"},{"problem":156,"code":"(fn\n  omision\n  [valor llaves]\n  (if\n    (= 0 (count llaves))\n    {}\n    (conj (omision valor (rest llaves)) [(first llaves) valor])))","user":"603e899ee4b0d5df2af22313"},{"code":"#(loop [D %1 K %2 M {}]\n  (if (empty? K)\n    M\n  (recur D (rest K) (conj M {(first K) D}) )))","problem":156,"user":"505a2f3be4b03d2efce48c5b"},{"problem":156,"code":"(fn [default keyVector]\n         (reduce #(assoc %1 %2 default) {} keyVector)\n     )","user":"56195e57e4b053970a773af6"},{"problem":156,"code":"(fn [default-value map-keys]\n  (zipmap map-keys (repeat (count map-keys) default-value))\n)\n\n;#(zipmap %2 (repeat %1))","user":"53ac1992e4b047364c04445a"},{"problem":156,"code":"(fn [d c] (reduce #(assoc %1 %2 d) {} c))","user":"5602ab92e4b04bb52996e1a3"},{"code":"(fn mapper [thing coll]\n  (apply merge (for [x (list thing) y coll] {y x})))","problem":156,"user":"52cefb7ee4b07d0d72b27397"},{"problem":156,"code":"(fn __ [d l]\n  (loop [s (seq l)\n         m {}]\n    (if-not s\n      m\n      (recur (next s) (assoc m (first s) d)))))","user":"5b13ba71e4b0cc2b61a3be53"},{"code":"(fn mapdef [d v]\n  (zipmap v (repeat (count v) d)))","problem":156,"user":"51d96ad0e4b02ceefd94774f"},{"problem":156,"code":"(fn [default l]\n  (reduce (fn [acc item] (assoc acc item default)) {} l)\n  )","user":"5a932f63e4b0d174b936c71b"},{"problem":156,"code":"(fn [d ks] \n  (loop [m {}\n         k ks]\n    (if (first k)\n      (recur (assoc m (first k) d) (rest k))\n      m)))","user":"542c0708e4b0dad94371f29b"},{"problem":156,"code":"(fn cosa\n  \t[x [ a b c]]\n    (conj  {a x} {b x} \n         (if (not= nil c)\n           {c x}\n           {})))","user":"56f09bf4e4b04a395b9a047f"},{"problem":156,"code":"(fn [default-value keys]\n  (into {}\n        (map (fn [key]\n               [key default-value])\n             keys)))","user":"53e57ba2e4b036ad0777e45c"},{"problem":156,"code":"(fn map-defaults [x y]\n    (apply hash-map (interleave y (repeat x))))","user":"5ac74b34e4b0e27600da777f"},{"code":"(fn [x mp] (into {} (for [y mp] {y x})))","problem":156,"user":"534c1c64e4b084c2834f4a8a"},{"code":"(fn [v ks] (reduce (fn [h k](assoc h k v)) {} ks))","problem":156,"user":"52550d90e4b0541d1855b9c1"},{"code":"(fn d [default list]\n  (loop [res {} l list]\n    (if (empty? l)\n      res\n      (recur (conj res {(first l) default}) (rest l))\n      )\n    )\n  )","problem":156,"user":"516bc02ce4b005fd0cdf85c5"},{"problem":156,"code":"(fn [dv k]\n  (loop [n k\n         r {}]\n    (if (empty? n)\n      r\n      (recur (rest n) (conj r {(first n) dv})))))","user":"4f6a90f4e4b07046d9f4ef9d"},{"problem":156,"code":"(fn  [value xs]\n  \n  (reduce\n   (fn [new-map k]\n     (assoc new-map k value)\n     )\n   {}\n   xs))","user":"5fa6db67e4b0fa27300f3dd2"},{"problem":156,"code":"(fn\n  [x ks]\n  (apply hash-map (interleave ks (repeat (count ks) x))))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"problem":156,"code":"(fn mkmap\n  ([v keys]\n     (mkmap v keys {}))\n  ([v keys m]\n     (if (not (empty? keys))\n       (mkmap v (butlast keys) (assoc m (last keys) v))\n       m)))","user":"53cd66dee4b00fb29b2212e2"},{"code":"(fn [arg mp] (into {} (map #(vector % arg) mp)))","problem":156,"user":"4fab574de4b081705acca218"},{"code":"#(into {} (for [v %2] [v %]))","problem":156,"user":"5165e7eee4b04cc958b892be"},{"code":"#(apply merge (map (fn [k] {k %1}) %2))","problem":156,"user":"4f0ef874535d0136e6c22328"},{"problem":156,"code":"(fn [default sq]\n  (into {} (map vector sq (repeat default))))","user":"4ddbfb8a535d02782fcbea00"},{"problem":156,"code":"(fn [default coll] (into {} (for [x coll] (vector x default))))","user":"59f75327e4b0966464fe6aec"},{"problem":156,"code":"(fn [default keyVec]\n  (zipmap keyVec (repeat (count keyVec) default))\n  )","user":"5d2ccc98e4b01671435dbc97"},{"code":"(let [f\n      (fn [value ks result]\n        (if (nil? ks)\n          result\n          (recur value (next ks) (assoc result (first ks) value))\n        )\n      )]\n  (fn [v k] (f v k {}))\n)","problem":156,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"#(reduce (fn [m v] (assoc m v %1)) {} %2)","problem":156,"user":"4fe9eb5fe4b0547ebccb2477"},{"problem":156,"code":"(fn [default collection]\n  (reduce conj (for [x collection] {x default})))","user":"54b2d392e4b09f271ff37d2f"},{"problem":156,"code":"(fn [x m] (apply conj (map #(hash-map %1 x) m)))","user":"5379b723e4b06839e8705e57"},{"code":"(fn [d col] (into {} (for [e col] [e d])))","problem":156,"user":"4fd7962ee4b0dab7d829f385"},{"code":"(fn fun [x coll]\n  (into {}\n        (map vector coll (repeat x)))\n)","problem":156,"user":"5349da55e4b084c2834f4a68"},{"code":"(fn [x y] (apply hash-map (mapcat (fn[z] (cons z [x])) y)))","problem":156,"user":"4fbd12a5e4b081705acca2fd"},{"problem":156,"code":"#(reduce \n  (fn [m k]\n    (conj m {k %})\n    )\n  {} %2)","user":"50ec409ce4b04edc33777045"},{"code":"(fn [x xs] (into {} (map #(vector% x) xs)))","problem":156,"user":"50ef5703e4b0bdaecbb47d95"},{"problem":156,"code":"(fn [y z] (into {} (vec (map (fn [x] (vec (list x y))) z))))","user":"53d5d24de4b0e771c302544a"},{"problem":156,"code":"(fn map-defaults\n  [a b]\n  (into {} (map #(hash-map % a) b)))","user":"59b9e669e4b0a024fb6ae3db"},{"problem":156,"code":"(fn [value keys]\n  (zipmap (reverse keys)  (repeat (count keys) value)))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn [default col](loop [ret {} bits (reverse col)](if (empty? bits) ret (recur (merge ret {(first bits) default}) (rest bits)))))","problem":156,"user":"523acf7be4b0aa37f082ed90"},{"problem":156,"code":"(fn defal [d m]\n  (reduce #(assoc %1 %2 d) {} m))","user":"5689fd03e4b0dcc4269f4088"},{"code":"(fn [x y] (loop [y y z {}] (if (= (count y) 0) z (recur (rest y) (conj z {(first y) x})))))","problem":156,"user":"53012382e4b0d8b024fd3718"},{"problem":156,"code":"(fn [x y] (reduce merge (map #(hash-map % x) y)) )","user":"54f6f00fe4b01ecee9d88814"},{"problem":156,"code":"(fn [d k] (apply merge {} (map #(hash-map % d) k)))","user":"5bba703fe4b0a20761a235eb"},{"code":"(fn defmap [val, keys]\n  (apply hash-map\n         (#(mapcat\n            (fn [x] (if (sequential? x) x [x])) %)\n           (map (fn [key] [key val]) keys))))","problem":156,"user":"522d0360e4b0806774ddfef7"},{"code":"(fn map-default\r\n  [x ks]\r\n  (let [f (first ks)]\r\n    (if \r\n    (empty? (rest ks))\r\n    (assoc {} (first ks) x)\r\n    (conj (map-default x (rest ks)) [f x]))))","problem":156,"user":"4fee04a0e4b0678c553fc308"},{"code":"(fn [default keez] \n(loop [x {}\n       k keez]\n  (if (empty? k)\n    x\n    (recur (assoc x (first k) default) (rest k)\n           )\n    )\n  )\n)","problem":156,"user":"536e56dbe4b0fc7073fd6e6c"},{"problem":156,"code":"(fn [a b] (into {} (mapcat (fn [x] {x a}) b)))","user":"53e91473e4b036ad0777e495"},{"code":"(fn [v m] (into {} (for [k m] [k v])))","problem":156,"user":"4f856adfe4b033992c121c44"},{"code":"(fn [default col] (into {} (map #(vector % default) col)))","problem":156,"user":"52bf0de2e4b07a9af579232a"},{"problem":156,"code":"(fn [default keys]\n  (loop [keys keys m (hash-map)]\n    (if (empty? keys)\n      m\n      (recur\n        (rest keys)\n        (conj m [(first keys) default])\n        ))))","user":"5433eecae4b0b6b47310fce6"},{"code":"(fn [v k] (apply assoc {} (interleave k (repeat v))))","problem":156,"user":"4ef2da4f535dced4c769f224"},{"problem":156,"code":"(fn doit [v s]\n  (into {} (map (fn [current] [current v]) s)))","user":"59be62d5e4b0a024fb6ae435"},{"code":"(fn [x y]\n    (reduce merge (map  #(hash-map % x) y))\n)","problem":156,"user":"501c1492e4b086d93747d180"},{"code":"(fn [default col]\n        (apply hash-map\n          (interleave\n            col\n            (for [x (range (count col))]\n              default\n              )\n            )\n          )\n        )","problem":156,"user":"536827f1e4b0243289761e8a"},{"problem":156,"code":"#(letfn [(buildmap [d xs m]\n                   (if \n                     (empty? xs) m\n    \t\t\t\t (conj {(first xs) d} (buildmap d (rest xs) m))))]\n    (buildmap %1 %2 {}))\n\n;This is MUCH better... #(zipmap %2 (repeat %))","user":"56b295f7e4b0982f16b37e08"},{"problem":156,"code":"(fn [x y] (reduce conj (map (fn [a] (hash-map a x)) y)))","user":"53af41dce4b047364c04447d"},{"problem":156,"code":"(fn [v keylist] (apply merge (map (fn [k] (assoc {} k v)) keylist)))","user":"560d24a2e4b05f002753df34"},{"problem":156,"code":"(fn [var l]\n  \t(zipmap l (for [x l] var)))","user":"5996b419e4b07157cc8daab5"},{"problem":156,"code":"(fn [init-val keys] (reduce #(assoc %1 %2 init-val) {} keys))","user":"55afa977e4b002ce9d5cbc15"},{"problem":156,"code":"(fn [def-val keys] (loop [val def-val [first-key & rest-keys] keys run-map {}] (if first-key (recur val rest-keys (assoc run-map first-key val)) run-map)))","user":"571d9669e4b0145328a7627f"},{"problem":156,"code":"(fn [default coll] (reduce conj (map #(hash-map %1 default) coll)))","user":"5bc488bde4b07a9b28b10053"},{"problem":156,"code":"(fn [default coll]\n  (apply merge (map #(hash-map % default) coll)))","user":"5ec3cdf7e4b08d0ec38692bc"},{"code":"(fn [default lst]\n  (zipmap lst (repeat (count lst) default)))","problem":156,"user":"50369122e4b0af0658af779e"},{"problem":156,"code":"#(->> %2 (map (fn [x] {x %1})) (reduce conj {}))","user":"53ea5851e4b036ad0777e4e4"},{"code":"(fn [default keyz]\n  (apply hash-map (interleave keyz (repeatedly (constantly default)))))","problem":156,"user":"51168f9fe4b0b3e208dba05c"},{"code":"(fn [v ks] (apply hash-map (interleave ks (take (count ks) (cycle (list v))))))","problem":156,"user":"51cf126ae4b0e42293a2256b"},{"problem":156,"code":"(fn [x y] (into {} (map #(vector %1 x) y) ))","user":"567f034be4b0feffd0d18eba"},{"code":"#(let [Y %2 X %1] (reduce conj  (for [x Y] (hash-map x X))))","problem":156,"user":"5229211be4b04c906c9c6a63"},{"code":"(fn [v ks]\n  (reduce (fn [m k]\n            (assoc m k v))\n          {}\n          ks))","problem":156,"user":"51804bcbe4b04f45bde7d901"},{"problem":156,"code":"(fn [v1 v2] (zipmap v2 (repeat v1)))","user":"5a40bd29e4b0447ef91cc5d6"},{"problem":156,"code":"(fn [d l] (zipmap l (repeat d)))","user":"53f5f740e4b0db01ade6f9d8"},{"code":"(fn map-init-with-default [default seq]\n  (apply assoc {} \n         (interleave seq \n                     (apply vector (take (count seq) (repeat default))))))","problem":156,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":156,"code":"(fn [default coll] (into {} (for [i coll] [i default])))","user":"593870e6e4b02506e01a29d6"},{"problem":156,"code":"(fn [d ks] (loop [values ks finMap {}] (if (empty? values) finMap (recur (pop values) (assoc finMap (peek values) d)))))","user":"54e7425ee4b024c67c0cf810"},{"problem":156,"code":"(fn [v m]\n  (loop [acc {}\n         m m]\n    (cond\n     (empty? m) acc\n     :else (recur (conj acc {(first m) v}) (rest m)))))","user":"51c116d4e4b0c9c822882942"},{"problem":156,"code":"(fn [a b] (into {} (map (fn [l] [l a]) b)))","user":"538e29d1e4b0b51d73faae80"},{"code":"#(zipmap%2[%%%])","problem":156,"user":"4fba83e7e4b081705acca2e1"},{"problem":156,"code":"#(reduce (fn [m key] (conj m [key %1])) {} %2)","user":"561d23e3e4b064ca9f4b16a5"},{"code":"(fn [default_value sequ]\n  (into {}\n  (for [x sequ]\n    [x default_value])))","problem":156,"user":"52bc7ea6e4b07a9af57922f7"},{"problem":156,"code":"(fn map-constr\n  [v input-seq]\n  (into {} (map #(vector % v) input-seq))\n  )","user":"5a4cbba1e4b05d388ecb6b98"},{"problem":156,"code":"(fn [d ks] \n  (apply hash-map \n         (mapcat #(list % d) ks)))","user":"5a5a6347e4b05d388ecb6ca9"},{"problem":156,"code":"(fn [v l] (reduce (fn [m k] (conj m {k v})) {} l))","user":"57763002e4b0979f89651631"},{"problem":156,"code":"(fn [defaultValue mapSequence] (zipmap mapSequence (take (count mapSequence) (repeat defaultValue))) )","user":"5e996e76e4b0157ca96647e4"},{"code":"(fn def-map [default keys]\n  (if (empty? keys)\n    {}\n    (assoc (def-map default (rest keys)) (first keys) default)))","problem":156,"user":"52aa4a67e4b0c58976d9ac62"},{"problem":156,"code":"(fn [value keyList]\n  (loop [nl {} keyList keyList]\n    (if-not (seq keyList)\n      nl\n      (recur (assoc nl (peek keyList) value) (pop keyList))\n      )\n    )\n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":156,"code":"(fn [dv s]\n  (loop [[k & sqc] s\n         result {}]\n    (if (not (nil? k))\n      (do \n        (recur sqc (conj result {k dv})))\n      result)))","user":"52f8db41e4b047fd55836fdc"},{"code":"(fn [default keys]\n (reduce #(assoc %1 %2 default) {} keys))","problem":156,"user":"5073de20e4b054001656acca"},{"code":"(fn [deflt coll]\n  (reduce (fn [aset akey] (assoc aset akey deflt ) ) {} (reverse coll) )\n  )","problem":156,"user":"5135a74ae4b04ac1f358dd46"},{"problem":156,"code":"(fn [x, keys] (reduce #(conj %1 {%2 x}) {} keys))","user":"57597fade4b02ea11479931d"},{"code":"(fn [d c]\n  (zipmap c (repeat d)))","problem":156,"user":"5006b7d2e4b0678c553fc48c"},{"problem":156,"code":"(fn [v coll] (reduce (fn [m k] (assoc m k v)) {} coll))","user":"5da975b9e4b000c986472c32"},{"code":"(fn map-def [x keysv]\n  (apply hash-map (interleave keysv (repeat x))))","problem":156,"user":"526ee63de4b03e8d9a4a733f"},{"problem":156,"code":"(fn [d-key key-list] \n  (loop [d d-key k key-list res{}]\n    (if (empty? k)\n      res\n      (recur d (rest k) (conj res [(first k) d])))))","user":"58354124e4b089d5ab817cd6"},{"problem":156,"code":"(fn [d dict] (into {} (for [x dict] {x d})))\n;;#(zipmap %2 (repeat %1))","user":"55ad1221e4b03311e7b7329d"},{"code":"(fn [v ks] (into {} (for [k ks] [k v])))","problem":156,"user":"4dade9e9c9a9d6ed4799dc57"},{"code":"(fn [x coll] (apply merge (for [elem coll] { elem x })))","problem":156,"user":"5302b580e4b0d8b024fd3733"},{"problem":156,"code":"(fn [new-map original coll]\n  (if (empty? coll)\n    new-map\n    (recur (assoc new-map (first coll) original) original (rest coll)))) {}","user":"573d8658e4b05c31a32c0814"},{"problem":156,"code":"(fn [default-v ks]\n  (reduce (fn [result k]\n            (assoc result k default-v))\n          {}\n          ks))","user":"5cf938a5e4b0b71b1d808a90"},{"problem":156,"code":"(fn default-map [d v]\n  (loop [v-loop v coll {}]\n    (if (empty? v-loop)\n      coll\n      (recur (rest v-loop) (assoc coll (first v-loop) d)))))","user":"5b2c76c8e4b025bcb146f2b6"},{"problem":156,"code":"(fn [default coll] \n  (into {} \n        (map #(vec (list % default)) coll)))","user":"5e4471e1e4b01d43a70e8e85"},{"problem":156,"code":"(fn [default keys]\n  (apply hash-map (apply concat (for [key keys]\n                                  (list key default)))))","user":"5461c402e4b01be26fd746a6"},{"problem":156,"code":"(fn \n  [defVal in] \n  (into \n   {} \n   (map \n    (fn \n      [keyVal]\n      (hash-map keyVal defVal)\n    )\n    (seq in)\n    )\n  )\n)","user":"5e1b0140e4b0dc959400851c"},{"code":"(fn [val names]\n  (reduce #(conj %1 {%2 val}) {} names))","problem":156,"user":"5029fccee4b023940c84aa47"},{"code":"(fn [df coll] (reduce #(assoc %1  %2 df) {} coll))","problem":156,"user":"4fea2de5e4b0140c20fb9bfe"},{"problem":156,"code":"(fn[v ks] (reduce #(assoc %1 %2 v) {} ks))","user":"56acfee5e4b03c432f18734f"},{"problem":156,"code":"(fn default-map [v xs]\n  (into {} (map #(vector % v) xs)))","user":"55a2d5c2e4b0acc240e3152c"},{"code":"#(into {} (for [x %2]\n           {x %}))","problem":156,"user":"4fea9154e4b0140c20fb9c0a"},{"problem":156,"code":"(fn [default-value seq-keys] (loop [in seq-keys out {}](if (empty? in)out(recur (rest in)(conj out{(first in) default-value})))))","user":"52420e2fe4b076e5d3121f48"},{"code":"#(into {} (for [x %2] (assoc {} x %)))","problem":156,"user":"527d59f9e4b0757a1b171382"},{"code":"(fn [x c] (into {} (map #(vector % x) c)))","problem":156,"user":"5308dd20e4b02e82168697b3"},{"problem":156,"code":"(fn [def-val keys-vec] \n    (->> \n       keys-vec \n       (map #(vector % def-val))\n       (apply conj {})\n     )\n)","user":"5493d908e4b0b312c081ff52"},{"code":";#(reduce (fn [xs x] (conj {x %} xs)) {} %2)\n#(zipmap %2 (repeat %))","problem":156,"user":"5323a414e4b09d4e7a9b54d1"},{"problem":156,"code":"(fn [d keys]\n   (into {} (map #(vector % d) keys)))","user":"5db35f85e4b010eb3c36cd22"},{"problem":156,"code":"(fn dmap [default inds]\n  (zipmap inds (repeat  default)))","user":"52ed7458e4b0a18b0f5dd9ed"},{"problem":156,"code":"(fn [x, col] (reduce (fn [acc, cur] (conj acc {cur x})) {} col))","user":"555883c5e4b0deb715856e2d"},{"code":"(fn[x y] (reduce #(assoc %1 %2 x) {} y))","problem":156,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn default-map\n  [val keys]\n  (reduce (fn [acc e]\n            (assoc acc e val))\n          {}\n          keys))","problem":156,"user":"50fc48dde4b0d10d794c19f6"},{"problem":156,"code":"(fn [default seq_](\n                    loop [x {} map_thing seq_]\n                    (if(<= (count map_thing) 0)\n                      x\n                      (recur (assoc x (first map_thing) default) (rest map_thing)\n                             ))))","user":"5bd9eac4e4b0ed4b8aab4bfc"},{"problem":156,"code":"(fn [v ks]\n   (loop [ks ks\n          result {}]\n     (if (empty? ks)\n       result\n       (recur (rest ks) (conj result [(first ks) v])))))","user":"586b1482e4b0f14aab7c88cf"},{"problem":156,"code":"(fn [df k] (reduce #(assoc % %2 df) {} k))","user":"5450d992e4b0e397800069a5"},{"code":"#(->> %1\n     (repeat (count %2))\n     (zipmap %2))","problem":156,"user":"50747a55e4b054001656acd2"},{"problem":156,"code":"#(apply hash-map (interleave %2 (cycle[%1])))","user":"5286a2a9e4b0239c8a67ae1e"},{"code":"#(loop [v %\n        k %2\n        m {}]\n   (if-not (empty? k)\n     (recur v (rest k) (conj m [(first k) v]))\n     m))","problem":156,"user":"4e975839535dbda64a6f6b52"},{"code":"(fn [dflt ks] (reduce #(assoc %1 %2 dflt) {} ks))","problem":156,"user":"515828b8e4b0a069fd272c71"},{"problem":156,"code":"(fn [d v] (into {} (map #(assoc {} % d) v)))","user":"53ea72b6e4b036ad0777e4e5"},{"code":"(fn [val ks]\n  (reduce #(assoc %1 %2 val) {} ks))","problem":156,"user":"4eae5fe4535d7eef30807325"},{"code":"(fn [n coll]\n  (reduce #(conj % {%2 n}) {} coll))","problem":156,"user":"527dc2aee4b0757a1b17138d"},{"problem":156,"code":";#(reduce (fn [m k]  (assoc m k %1)) {} %2)\n#(zipmap %2 (repeat %1))","user":"53e9dce1e4b036ad0777e4bc"},{"code":"#(zipmap %2 (iterate force %1))","problem":156,"user":"52fbbadde4b047fd5583700f"},{"code":"(fn [default col] (reduce  merge (map #(assoc {} %1 default) col )))","problem":156,"user":"4fa7de4ce4b081705acca1c9"},{"problem":156,"code":"(fn foo [default keysSeq]\n  (loop [result\t{}\n         default default\n         keysSeq keysSeq]\n    (if (nil? keysSeq)\n      result\n      (recur (assoc result (first keysSeq) default) default (next keysSeq)))))","user":"599e3677e4b0871e7608b809"},{"problem":156,"code":"(fn demap [de s]\n  (if (empty? s)\n    {}\n    (merge {(first s) de} (demap de (rest s)))))","user":"545801f6e4b01be26fd74615"},{"code":"#(reduce (fn [x y] (assoc x y %1)) {} %2)","problem":156,"user":"52e5da25e4b09f7907dd1467"},{"code":"(fn [default _seq] (zipmap _seq (repeat default)))","problem":156,"user":"4f551054e4b0a7574ea717f5"},{"problem":156,"code":"(fn [first second] (zipmap second (repeat first)))","user":"5db9fb8ae4b010eb3c36cd5a"},{"code":"(fn foo [v k]\n  (if (empty? k)\n    {}\n    (conj {(first k) v} (foo v (rest k)))))","problem":156,"user":"53322cece4b019098a6f8b73"},{"code":"(fn [d s]\n  (reduce #(assoc % %2 d) {} s))","problem":156,"user":"52015698e4b0d7096e99ddba"},{"code":"(fn [default v]\n  (apply hash-map (mapcat (fn [x] [x default]) v)))","problem":156,"user":"4e9ff8d0535d7eef3080729c"},{"code":"(fn [def_value mapped_keys] (zipmap mapped_keys (repeat def_value)))","problem":156,"user":"5188b2e6e4b0bdff0e072d52"},{"problem":156,"code":"(fn [x,y] (reduce merge (map (fn[a] {a x}) y)))","user":"54283a7ae4b01498b1a71b2f"},{"problem":156,"code":"(fn default-map [default keys]\n  (reduce  (fn [latest-result next-element]\n             (assoc latest-result next-element default)) {} keys))","user":"56d74c88e4b0ea9b8538f7d9"},{"code":"(fn [val keys] (apply hash-map (reduce (fn [acc el] (conj acc val el)) nil keys)))","problem":156,"user":"4faf97d8e4b081705acca258"},{"code":"(fn map-default [value ks]\n(apply hash-map\n   (into [] \n          (interleave ks (cycle [value]))))\n  )","problem":156,"user":"500a214de4b03d00572d2d74"},{"problem":156,"code":"(fn [x sq]\n  (zipmap sq (repeat (count sq) x)))","user":"581a5fdbe4b0e114eb51a002"},{"problem":156,"code":"(fn [dfval ks]\n  (loop [ks ks tgt {}]\n    (if (empty? ks)\n      tgt\n      (recur (rest ks) (assoc tgt (first ks) dfval)))))","user":"5a512929e4b05d388ecb6be2"},{"code":"(fn [d s]\n  (apply hash-map (interleave s (repeat d))))","problem":156,"user":"50b4383fe4b001349b2f4abf"},{"code":"(fn [d c] (zipmap c (repeat d)))","problem":156,"user":"50cf94bde4b0abc485cb9bb2"},{"code":"(fn f156 [x y]\n  (reduce #(assoc %1 %2 x) {} y))","problem":156,"user":"535aee3be4b04ce2eb3ed2aa"},{"problem":156,"code":"#(->> (repeat %1)\n      (interleave %2)\n      (apply hash-map))","user":"56ab80f1e4b03c432f18733e"},{"problem":156,"code":"(fn [val, coll] (reduce #(assoc %1 %2 val) {} coll))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn init-map [default s]\n  (reduce #(assoc %1 %2 default)  \n          {} \n          s))","problem":156,"user":"4f91fd31e4b0dcca54ed6ca8"},{"problem":156,"code":"(fn [default seq] (reduce conj {} (map (fn [x] {x default}) seq)))","user":"563c7f98e4b0bfe05bf11836"},{"problem":156,"code":"(fn [d keys]\n    (into {} (map #(vector % d) keys)))","user":"5f56c0cae4b0a0bc16850a8c"},{"problem":156,"code":"(fn\n  [x y]\n  (apply merge (for [a y]\n                 {a x})))","user":"59a9c22ae4b08cbb53654d75"},{"problem":156,"code":"(fn [d kys] (apply hash-map (mapcat list kys (repeat d))))","user":"5d8a3f3ee4b0915913b1d3c9"},{"problem":156,"code":"(fn [v s] (reduce #(assoc % %2 v) {} s))","user":"572ec4dde4b0cd1946bd0f8d"},{"code":"#(loop [itms %2\n         final-map {}]\n    (if (empty? itms)\n      final-map\n      (recur (rest itms) (assoc final-map (first itms) %1 ))))","problem":156,"user":"523288fee4b035af41902a88"},{"problem":156,"code":"(fn [defaultValue items] (reduce (fn [result item] (assoc result item defaultValue) ) {} items) )","user":"5c839a4de4b0c8042a70ce53"},{"code":"(fn defaults [v s]\n  \t(apply hash-map \n\t\t\t(reverse\n\t\t\t\t(conj (interpose v s) v))))","problem":156,"user":"4fa67030e4b081705acca1b7"},{"problem":156,"code":"(fn [default map-keys]\n  (apply hash-map (mapcat (fn [x] [x default]) map-keys)))","user":"57eb38dbe4b0bfb2137f5b5e"},{"code":"#(reduce conj {} (for [k %2] {k %}))","problem":156,"user":"4dce6e41535d5973398f92a2"},{"problem":156,"code":"(fn [v k]\n  (->> k\n       (map (fn [x] [x v]))\n       (into (sorted-map))))","user":"5cebdfd4e4b0a17bb84e2be9"},{"code":"(fn [defval mydata] (zipmap mydata (repeat (count mydata) defval)))","problem":156,"user":"52ecd34ee4b0705949c44457"},{"problem":156,"code":"(fn [val keys] (into {} (for [key keys] {key val})))","user":"54856d54e4b0e286459a11aa"},{"problem":156,"code":"(fn [d ks]\n  (loop [m {} k ks]\n    (if (empty? k) m (recur (into m {(first k) d}) (next k)))))","user":"55d1ec3ee4b0e31453f64a4c"},{"code":"#(into {} (for [k %2]\n            [k %1]))","problem":156,"user":"50b1d166e4b03ea880433554"},{"problem":156,"code":"#(reduce (fn [acc x] (conj acc {x %1})) {} %2)","user":"560843dee4b046a4fc0ac00e"},{"problem":156,"code":"(fn \n  [v, xs] (reduce #(conj %1 {%2 v}) {} xs))","user":"4f598c87e4b0030a34fb2ada"},{"code":"(fn [v s] (into {} (map vector s (take (count s) (iterate #(identity %) v)))))","problem":156,"user":"4f8490fae4b033992c121c34"},{"problem":156,"code":"(fn md [d k] (reduce (fn [m k] (assoc m k d)) {} k))","user":"56771b31e4b05957ce8c6163"},{"code":"(fn mp [val keys] (zipmap keys (vec (repeat (count keys) val))))","problem":156,"user":"52727d52e4b03e8d9a4a7439"},{"problem":156,"code":"(fn[x,l] (reduce #(merge %1 %2) {} (map #(hash-map %1 x) l)))","user":"54651ef5e4b01be26fd746d5"},{"code":"(fn [a b] (apply conj (map (fn [x] {x a}) b)))","problem":156,"user":"50b8e9a4e4b0cba0e598b656"},{"code":"(fn [df ks]\n  (into {}\n    (for [k ks] [k df])))","problem":156,"user":"4ec56b5b535d6d7199dd369f"},{"problem":156,"code":"#(apply sorted-map (apply concat (for [x %2 y [%1]] [x y])))","user":"54c8ac49e4b045293a27f64e"},{"code":"(fn [default k]\n  (zipmap k (repeat default)))","problem":156,"user":"539378fbe4b0b51d73faaebd"},{"code":"(fn [d s] \n  (loop [m {} lst s]\n    (if (empty? lst) m\n      (recur (assoc m (first lst) d) (rest lst)))))","problem":156,"user":"4f038b62535dcb61093f6b1c"},{"code":"(fn [v ks]\n  (zipmap\n    ks\n    (repeat (count ks) v)))","problem":156,"user":"504e48ace4b0f6ff3350c498"},{"code":"(fn f [i x]\n  (zipmap x (take (.length x) (repeat i)))\n)","problem":156,"user":"4e8a0d5d535d3e98b802328e"},{"code":"(fn [x v] (reduce #(assoc %1 %2 x) {} v))","problem":156,"user":"4dbdab4e535d020aff1edf49"},{"problem":156,"code":"(fn my-thing\n  [value coll]\n  (into {} (map (fn [x] [x value]) coll))\n)","user":"5c3440fee4b0d62ef62d9f50"},{"code":"(fn[x k] (reduce #(conj %1 [%2 x]) {} k))","problem":156,"user":"4f542fd9e4b0a7574ea717db"},{"problem":156,"code":"(fn [default key-seq] (into {} (map #(hash-map % default) key-seq)))","user":"54d100abe4b0e8a36923e5d8"},{"problem":156,"code":"(fn kek [d v] (into {} (map #(-> {% d}) v)))","user":"5911aa1de4b0163c97b36ed8"},{"code":"(fn [x coll]\n  (into {} (map #(vector % x) coll)))","problem":156,"user":"4f49e869e4b0d56e7bb92c02"},{"problem":156,"code":"(fn [value key-list] (reduce #(assoc %1 %2 value) {} key-list))","user":"5243233fe4b076204b44faac"},{"problem":156,"code":"(fn [v ks]\n  (let [kvs (apply concat (for [x ks] [x v]))]\n    (apply hash-map kvs)\n\n\n    ))","user":"5b8db323e4b0c0b3ffbd49da"},{"problem":156,"code":"(fn [Standard \n     Karte] \n\t(loop [Liste Karte\n\t\t  Result nil]\n\t\t(if (empty? Liste)\n\t\t\tResult\n\t\t\t(recur (rest Liste) (assoc Result (first Liste) Standard))))\n\t\t\t\t)","user":"5b35de7be4b02d533a91bb97"},{"code":"(fn [default coll]\n  (reduce \n    #(assoc %1 %2 default)\n    {} \n    coll))","problem":156,"user":"5014754de4b094324338f8e5"},{"problem":156,"code":"(fn [x, y] (reduce #(assoc %1 %2 x) {} y))","user":"581cb1b8e4b04b46fc4b0efc"},{"problem":156,"code":"(fn [x y] (apply array-map (interleave  y (repeat (count y) x))))","user":"4e7e241a535db169f9c79705"},{"code":"(fn [default my-vec]\n  (loop [m {} v my-vec]\n    (if (not (seq v))\n      m\n      (recur (assoc m (first v) default) (rest v)))))","problem":156,"user":"51857e64e4b0da5a5be3babe"},{"code":"(fn [default s] (zipmap s (repeat default)))","problem":156,"user":"525b12b1e4b0cb4875a45d04"},{"problem":156,"code":"(fn [value s] (into {} (vec (map (fn [x] (vector x value)) s))))","user":"573c813be4b0cd1946bd10c5"},{"code":"(fn mapconstructor [x y]\n        (apply hash-map (conj (vec (interpose x y)) x)))","problem":156,"user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn f [dv ks]\n  (zipmap ks (repeat (count ks) dv)))","problem":156,"user":"51944aaae4b0142f60b4aedc"},{"problem":156,"code":"(fn [default-value key-vector] (reduce #(assoc %1 %2 default-value) {} key-vector))","user":"52229374e4b0e6a83c892600"},{"code":"#(reduce (fn [r x]\n   (assoc r x %1)) {} %2)","problem":156,"user":"5092f940e4b097f48cc3857b"},{"code":"(fn [default keys]\n  (into {} (map hash-map keys (repeat default))))","problem":156,"user":"5256cd77e4b0541d1855ba39"},{"problem":156,"code":"(fn[val keys] (zipmap keys (repeat val)))","user":"534db51be4b084c2834f4aa6"},{"code":"(fn [v k]\n  (apply hash-map (mapcat #(list % v) k)))","problem":156,"user":"52277ab9e4b0186687e23a4f"},{"problem":156,"code":"(fn solution4\n  [default values]\n  (reduce (fn [new-map key]\n            (assoc new-map key default))\n          {}\n          values))","user":"5ec03772e4b00a66d4a95289"},{"problem":156,"code":"(fn [df ks] (apply merge (map #(hash-map % df) ks)))","user":"556b83fbe4b09a3098a524ee"},{"code":"(fn [d v] (into {} (map #(vector % d) v)))","problem":156,"user":"503255d0e4b0e78df07b092b"},{"problem":156,"code":"(fn [value coll] (reduce conj (for [x coll] {x value})))","user":"543170b2e4b0dad94371f2e7"},{"code":"(fn [default values] \n  (zipmap values (repeat (count values) default)  \n   )\n  )","problem":156,"user":"535943b3e4b04ce2eb3ed295"},{"problem":156,"code":"(fn [d l]\n  (reduce (fn [x y] (assoc x y d)) {} l))","user":"5a1ef970e4b0ff51aa4b327d"},{"problem":156,"code":"(fn [default coll]\n  (loop [def-map {}\n         c coll]\n    (let [s (seq c)]\n      (if s (recur (assoc def-map (first c) default) (rest c)) def-map))))","user":"5bb25684e4b0a20761a2350d"},{"problem":156,"code":"(fn [param-a param-b] (zipmap param-b (repeat param-a)))","user":"5b7ed20fe4b047b03b203760"},{"code":"(fn [defalt keeys]\n    (apply hash-map (interleave keeys (repeat defalt))))","problem":156,"user":"51789dfae4b03d69594194d7"},{"code":"#(zipmap %2 (iterate identity %1))","problem":156,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"code":"#(into {} (map (fn [p] (into [] p)) (partition 2 (interleave %2 (repeat (count %2) %1 )))))","problem":156,"user":"534eecaee4b084c2834f4abf"},{"problem":156,"code":"(fn [v xs]\n    (reduce #(assoc %1 %2 v) {} xs))","user":"55c9ff22e4b0e31453f649f3"},{"problem":156,"code":"(fn map-defaults-solution\n  [dval keythings] ;; update args as needed\n  ;; When retrieving values from a map, you can specify default values in case the key is not found:\n  ;; \n  ;; (= 2 (:foo {:bar 0, :baz 1} 2))\n  ;; \n  ;; However, what if you want the map itself to contain the default values? Write a function which takes a default value and a sequence of keys and constructs a map.\n  (zipmap keythings (repeat dval))\n  )","user":"536829c8e4b0243289761e8b"},{"problem":156,"code":"(fn [x y] (into {} (for [x1 y] [x1 x])))","user":"55f27d95e4b06e875b46ce47"},{"problem":156,"code":"(fn [v m]\n   (zipmap m (repeat v)))","user":"53a94512e4b047364c044433"},{"code":"(fn [default ks]\n  (apply hash-map (interleave ks (repeat default))))","problem":156,"user":"50cf66ffe4b0e61f11ddcd92"},{"code":"(fn map-default\n  [default ks]\n  (reduce conj {} (for [k ks]\n    [k default])))","problem":156,"user":"52dc3bc8e4b09f7907dd13cb"},{"code":"(fn stuff [v l]\n  (if (> (count l) 0)\n    (conj (stuff v (rest l)) [(first l) v])\n    {}\n    )\n  )","problem":156,"user":"52d92f13e4b09f7907dd13a2"},{"code":"(fn [n coll]\n  (zipmap coll (repeat n)))","problem":156,"user":"505bd09fe4b032b709c81373"},{"problem":156,"code":"(fn mh [value the-keys]\n  (apply hash-map\n    (apply concat\n      (for [x the-keys]\n        (list x value)\n      )       \n    )       \n  )\n)","user":"54468ebfe4b032a45b8693b1"},{"problem":156,"code":"(fn[v s] (reduce #(assoc %1 %2 v) {} s))","user":"5e887c61e4b0cb0169546309"},{"code":"(fn [v coll] (zipmap coll (take (count coll) (repeat v))))","problem":156,"user":"524dd1c3e4b0f245900d275c"},{"problem":156,"code":"(fn [value vec] (reduce #(conj %1 {%2 value} ) {} vec ))","user":"5e0e836fe4b099d064962fa8"},{"problem":156,"code":"(fn [v k] (into {} (map #(hash-map %1 v) k)))","user":"5cd16529e4b0ccb0619628e7"},{"code":"(fn [d s]\n  (into {} (vec (map #(vector % d) s))))","problem":156,"user":"50481b70e4b0ec70b3ef8d98"},{"problem":156,"code":"(fn [d m] \n  (reduce \n   #(conj % {%2 d})\n   {} m)\n  )","user":"5d6c2aace4b04d129b00f2ad"},{"problem":156,"code":"(fn [dfk s] (reduce (fn [a b] (conj a {b dfk})) {} s))","user":"581b4d3be4b04b46fc4b0ec6"},{"problem":156,"code":"(fn [default keys-list] (reduce #(assoc %1 %2 default) {} keys-list))","user":"581dad0ae4b04b46fc4b0f17"},{"code":"(fn [d ks] (apply hash-map (reduce #(cons %2 (cons d %1)) [] ks)))","problem":156,"user":"52dfc89be4b09f7907dd1405"},{"code":"(fn [v col]\n  (into {} (map #(vector % v) col)))","problem":156,"user":"535944d6e4b04ce2eb3ed296"},{"problem":156,"code":"(fn [v ks]\n      (zipmap ks (repeat v)))","user":"53336ab8e4b019098a6f8b84"},{"code":"(fn [d xs]\n  (reduce #(assoc %1 %2 d) {} xs)\n  )","problem":156,"user":"52ce5056e4b07d0d72b2738f"},{"code":"(fn [val keys] \n  (reduce (fn [s e] (assoc s e val)) {} keys))","problem":156,"user":"4fcfa1a4e4b03432b189f41a"},{"code":"#(into {} (map (fn [x] {x %}) %2))","problem":156,"user":"536e0930e4b0fc7073fd6e66"},{"code":"(fn [x keys] \n  (into {} (map (fn [key] [key x]) keys)))","problem":156,"user":"4fb1d7ace4b081705acca281"},{"problem":156,"code":"( fn [ dflt k-vctr ]\n  (->> k-vctr\n      (map #( hash-map % dflt ) )\n      (reduce conj)))","user":"556880dae4b0c656e3ff1856"},{"code":";(fn [n col] (zipmap col (repeat n)))\n(fn [n col] (apply hash-map (mapcat #(vector %1 %2) col (repeat n))))","problem":156,"user":"4f9510b5e4b0dcca54ed6cc7"},{"problem":156,"code":"(fn [n s] (zipmap s (repeat (count s) n)))","user":"572c1f65e4b0cd1946bd0f4a"},{"problem":156,"code":"(fn [i col] (reduce (fn [p k] (assoc p k i)) {} col))","user":"57aa290de4b0b8559636fc65"},{"code":"(fn makeAMap [v keysa] (zipmap keysa (repeat (count keysa) v)))","problem":156,"user":"50eaf688e4b0346a3e988cba"},{"problem":156,"code":"(fn [df k]\n  (reduce #(assoc %1 %2 df) {} k))","user":"5630ce72e4b0bfe05bf11786"},{"code":"(fn mapdef\n  ([val keys] (mapdef val keys {}))\n  ([val keys mp]\n     (if (empty? keys)\n       mp\n      (recur val (rest keys) (assoc mp (first keys) val)))))","problem":156,"user":"51026750e4b00c483ae176f7"},{"problem":156,"code":"(fn [value_default Map] \n  (zipmap Map (repeat value_default)))","user":"560d7863e4b05f002753df40"},{"code":"(fn [dv keys]\n  (loop [m {}\n         ks (seq keys)]\n    (if (and ks dv)\n      (recur(assoc m (first ks) dv) (next ks))\n      m)))","problem":156,"user":"53219cece4b09d4e7a9b54b7"},{"code":"(fn [d v]\n  (loop [m v\n         r {}]\n    (if (empty? m)\n      r\n      (recur (rest m) (assoc r (first m) d)))))","problem":156,"user":"4dd29ede535dae65d5c462da"},{"code":"#(loop [new-map {}\n         keys %2]\n    (if (= (count keys) 0)\n      new-map\n      (recur (assoc new-map (first keys) %1)\n             (rest keys))))","problem":156,"user":"4fecd35fe4b0681fd128dcab"},{"problem":156,"code":"(fn [d ls] (reduce #(assoc %1 %2 d) {} ls))","user":"55f43228e4b06e875b46ce67"},{"code":"(fn\n  [k xs]\n  (into {} (for [item xs]\n      [item k])))","problem":156,"user":"50294c28e4b0b33e9bf6fdef"},{"problem":156,"code":"(fn map-default [value [first & rest]]\n  (if (not= first nil)\n    (assoc (map-default value rest) first value)\n    {}))","user":"561bb8dbe4b064ca9f4b1686"},{"code":"(fn [default-value keys]\n   (reduce #(assoc %1 %2 default-value) {} keys))","problem":156,"user":"51ae350fe4b09397d5109790"},{"code":"(fn [df keys]\n  (into {} (for [k keys] {k df})))","problem":156,"user":"4fc7db47e4b0ee37620e182a"},{"code":"(fn\n  [val keys]\n  (reduce (fn [m k] (assoc m k val)) {} keys))","problem":156,"user":"4fe9f0f6e4b0547ebccb247b"},{"code":"(fn [v m] \n  (zipmap m (repeat v))\n)","problem":156,"user":"51c5c9c9e4b03a28d42333ba"},{"problem":156,"code":"(fn [a, l] (reduce #(assoc %1 %2 a) {} l))","user":"4df9d3b0535d04ed9115e77b"},{"code":"(fn[d, l] (into {} (map (fn[x] [x, d]) l)))","problem":156,"user":"50e496e8e4b0cb9ec68fbca0"},{"code":"#(into {} (map (fn [a] [a %]) %2))","problem":156,"user":"4fc863a9e4b0ee37620e1831"},{"problem":156,"code":"(fn [value keys]\n  (reduce (fn [acc cur]\n            (assoc acc cur value))\n          {}\n          keys))","user":"58e45a2ce4b056aecfd47c69"},{"problem":156,"code":"(fn [inter coll]\n  (zipmap coll (repeat inter)))","user":"57204301e4b0c5bde472c093"},{"problem":156,"code":"(fn [v ks] (loop [m {}\n                  ks ks]\n             (if (empty? ks) m (recur (conj m [(first ks) v]) (rest ks)))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":156,"code":"(fn [default lst] (\n                   zipmap lst (cycle [default]))\n  )","user":"543b7456e4b032a45b86932f"},{"problem":156,"code":"(fn [x y] (into {} (map #(conj [%] x) y)))","user":"4ed3c9d3535d44c135fd68f7"},{"problem":156,"code":"(fn [default vect]\n  (zipmap (reverse vect) (repeat default)))","user":"5689bd04e4b0dcc4269f4082"},{"code":"(fn [t,col]\n    (loop [x t,y col,ret {}]\n     (if(empty? y)\n       ret\n       (recur x (next y) (assoc ret (first y) x))\n     )))","problem":156,"user":"538d73c1e4b0b51d73faae6f"},{"code":"(fn [x v]\r\n   (loop [res {}\r\n          a x\r\n          b v]\r\n     (cond (empty? b) res\r\n           :else\r\n           (recur (assoc res (last b) a) a (butlast b)))))","problem":156,"user":"50868795e4b004985b776e5e"},{"problem":156,"code":"(fn [value key-coll]\n  (reduce (fn [result key-to-insert]\n            (assoc result key-to-insert value))\n          {}\n\tkey-coll))","user":"5eff2b32e4b0cf489e8d7f0b"},{"problem":156,"code":"(fn [d s] (reduce (fn [acc t] (assoc acc t d)) {} s))","user":"57f2bf56e4b0511f1d294df8"},{"code":"(fn [value keys] (zipmap keys (repeat value)))","problem":156,"user":"4fc588bee4b0ee37620e17fa"},{"code":"(fn default-map [val keys] (zipmap keys (repeat (count keys) val)))","problem":156,"user":"4f0f03ce535d0136e6c2232a"},{"problem":156,"code":"(fn [default ks] (zipmap ks (repeat (count ks) default)))","user":"54c6619ae4b045293a27f62b"},{"problem":156,"code":"#(apply hash-map (interleave %2 (take (count %2)(repeat %1))))","user":"5c74b043e4b0fca0c16227ce"},{"problem":156,"code":"(fn [ v k ] (zipmap k (repeat (count k) v)))","user":"582835cbe4b051871117bf30"},{"code":"#(reduce (fn [m k] (assoc m k %1)) {} %2)","problem":156,"user":"4f06dcad535dcb61093f6c16"},{"code":"(fn [d l]\n  (reduce #(assoc % %2 d) {} l)\n  )","problem":156,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn [val coll] (reduce #(assoc % %2 val ) {} coll))","problem":156,"user":"50ab8ae3e4b01d6eb43ce9a0"},{"problem":156,"code":"(fn [v ks] \n  (reduce #(assoc %1 %2 v) {} ks))","user":"540dbc11e4b0addc1aec6715"},{"code":"#(apply hash-map(interleave %2 (repeat %1)))","problem":156,"user":"51155b55e4b0ce5098ee73bc"},{"problem":156,"code":"(fn [default keylist] (into {} (map #(hash-map % default) keylist)))","user":"5546704be4b0a04f7929953d"},{"problem":156,"code":"(fn [default ks] \n  (apply hash-map \n         (apply concat (zipmap ks (repeat default)))))","user":"503f923fe4b00d1a725ff2ad"},{"problem":156,"code":"(fn [dv kys] \n  (reduce (fn [m k] (assoc m k dv)) {} kys))","user":"55d4b995e4b0e31453f64a7c"},{"problem":156,"code":"(fn [a b]\n\t(zipmap b (repeat (count b) a)))","user":"5eea5ce7e4b029a2061bbec0"},{"problem":156,"code":"(fn [default keys] \n  (reduce \n   #(assoc %1 %2 default) {} keys))","user":"56d5bc66e4b0ea9b8538f7c2"},{"problem":156,"code":"(fn [default-val key-names]\n  (reduce #(assoc %1 %2 default-val)\n          {}\n          key-names))","user":"608910a8e4b0ae75613dceed"},{"code":"(fn [val keys] (apply conj (for [x keys] {x val})))","problem":156,"user":"52173464e4b082aa80a88c75"},{"code":"#(into {} (for [i %2][i %1]))","problem":156,"user":"51af872ae4b0c53cf2e68a4e"},{"code":"(fn [d s] (->> s (map (fn [i] {i d})) (reduce merge)))","problem":156,"user":"53050c04e4b0d8b024fd3757"},{"problem":156,"code":"(fn [x list] (zipmap list (repeat x)))","user":"54236ce1e4b01498b1a71ad1"},{"problem":156,"code":"(fn [x v]\n  (->> v\n            (map #(vector % x))\n            (into {})))","user":"58949f8de4b00487982d525e"},{"problem":156,"code":"(fn [x s] (reduce #(conj %1 [%2 x]) {} s))","user":"598229d6e4b021a7a535fdfb"},{"code":"#(zipmap  %2 (repeat (count %2) %1))","problem":156,"user":"5007c7c7e4b0b17c647f5226"},{"problem":156,"code":"(fn [v k] (reduce (fn [m k] (assoc m k v)) {} k))","user":"4e72a717535d5021c1a89665"},{"problem":156,"code":"(fn [val keys]\n  (loop [ks keys m {}]\n    (if (empty? ks)\n      m\n      (recur (rest ks) (assoc m (first ks) val)\n       )\n      )\n   )\n  )","user":"539c88e1e4b0b51d73faaf2c"},{"problem":156,"code":"(fn [default keys]\n   (into {}\n         (for [key keys]\n           [key default])))","user":"561a9380e4b053970a773b07"},{"code":"(fn [d m]\n  (into {} (zipmap m (repeat d))))","problem":156,"user":"4dca8b6d535d5973398f9288"},{"problem":156,"code":"(fn [v col] (into {} (map #(assoc {} % v) col )))","user":"587b8bdee4b01531a375eaff"},{"code":"(fn [v m] (apply hash-map (interleave m (repeat v))))","problem":156,"user":"4fd1fa71e4b04c3a95aa0418"},{"problem":156,"code":"#(zipmap %2 (repeat %1)\n         )","user":"585c5b21e4b0f14aab7c8786"},{"problem":156,"code":"(fn [a coll]\n  (into {} (for [x coll] {x a})))","user":"53a19dece4b0ca733b9744c0"},{"problem":156,"code":"(fn [i c] (zipmap c (repeat i)))","user":"53e745a1e4b036ad0777e479"},{"code":"(fn construct-map\n  [defval coll]\n  (reduce (fn [x y] (conj x {y defval})) {} coll))","problem":156,"user":"526e1bd0e4b03e8d9a4a730b"},{"problem":156,"code":"; zipmap\n#(zipmap %2 (repeat %))\n\n; first try\n#_(fn [default keys]\n  (reduce #(assoc % %2 default) {} keys))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn [default ks] (zipmap ks (repeat default)))","problem":156,"user":"4dd0e8f7535da60f04a96e57"},{"problem":156,"code":"(fn [default sequ]\n\t(reduce #(assoc %1 %2 default) {} sequ))","user":"53e30fcae4b036ad0777e3fc"},{"problem":156,"code":"(fn my-map [e col]\n  (into {} (reduce (fn [col2 e2] (concat col2 (hash-map e2 e))) {} col))\n)","user":"6065755ee4b069485764ddcc"},{"code":"(fn [vred s]\n           (reduce #(assoc %1 %2 vred) {} s))","problem":156,"user":"5106c803e4b01150e115ebee"},{"problem":156,"code":"(fn [default ks]\n  (apply conj {} (map vector ks (repeat default))))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn [default keys]\n  (loop [ks keys mp {}]\n    (if-not (empty? ks)\n      (recur (rest ks) (assoc mp (first ks) default))\n      mp)))","problem":156,"user":"52d660eae4b09f7907dd1356"},{"code":"(fn [default k]\n  (loop [ [c & args] k\n          final {} ]\n    (if c\n      (recur args (assoc final c default))\n      final)))","problem":156,"user":"51dd6a7ce4b0c33a4e1da409"},{"problem":156,"code":"(fn [x y]\n  (loop [a x\n         b y\n         result {}]\n    (if (= (count b) 0)\n      result\n      (recur a\n             (rest b)\n             (assoc result (first b) a)))))","user":"59df2b8ee4b01968742fed87"},{"problem":156,"code":"(fn\n  [deflt seq]\n  (reduce\n    (fn\n      [ acc item]\n      (assoc acc item deflt))\n      {}\n      seq\n      ))","user":"5e16006be4b0a047bd49f711"},{"problem":156,"code":"(fn [default keys] (into {} (map vector keys (repeat default))))","user":"53ed6befe4b0d648e757f4c5"},{"code":"#(zipmap %2 (repeat (count %2) %))","problem":156,"user":"4ee9ddb8535d93acb0a66896"},{"code":"(fn [default, keys]\n  (into {} (map #(vector % default) keys)))","problem":156,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn [elem listik]\n(apply hash-map\n  (reduce #(conj (conj % (last %2)) (first %2)) []\n          ((fn [x xs] (map (fn [e] [x e]) xs)) elem listik))))","problem":156,"user":"509eeb3be4b08df8156e9e37"},{"problem":156,"code":"(fn zipper [default keys] (zipmap keys (repeat default)))","user":"5af865a9e4b0cc2b61a3bcd1"},{"problem":156,"code":"(fn [defval kol] \n    (apply merge (map\n      (fn [x] {x defval}) kol)))","user":"55536a8ae4b0deb715856e03"},{"problem":156,"code":"(fn [default-value keys] \n  (reduce (fn [a row] (assoc a row default-value)) {} keys)\n  )","user":"53c6c9dfe4b00fb29b2212a1"},{"problem":156,"code":"(fn [k coll] (zipmap coll (repeat k)))","user":"55a6bca4e4b09e57187da29e"},{"problem":156,"code":"(fn [val keys]\n  (loop [remaining-keys keys result {}]\n    (if (empty? remaining-keys)\n      result\n      (recur (rest remaining-keys) (assoc result (first remaining-keys) val))\n      )\n    )\n  )","user":"5614ebc5e4b05f002753dfbc"},{"problem":156,"code":"(fn [d xs]\n  (apply merge (map #(assoc {} % d) xs)))","user":"560ae540e4b05f002753df0d"},{"problem":156,"code":"(fn [default coll] (reduce (fn [a k] (assoc a k default)) {} coll))","user":"4fae5401e4b081705acca249"},{"problem":156,"code":"(fn [val arr] (reduce conj {} (map #(hash-map % val) arr)))","user":"56fbcc1fe4b07572ad1a88d5"},{"code":"(fn [v s] (into {} (for [x s] [x v])))","problem":156,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":156,"code":"(fn [v ks] (let [m (count ks)] (zipmap ks (repeat m v))))","user":"57644395e4b0994c1922fbf2"},{"problem":156,"code":"(fn [d l]\n  (reduce (fn [acc x] (assoc acc x d)) {} l))","user":"5d4a6511e4b0776584bd6f21"},{"problem":156,"code":"(fn foo [d ks] (apply conj {} (for [k ks] [k d])))","user":"605cbc57e4b0fb8c998d2c7b"},{"problem":156,"code":"(fn [n xs] (zipmap xs (repeat n)))","user":"538d7e2ee4b0b51d73faae70"},{"code":"(fn [x vec] (zipmap vec (repeat x)))","problem":156,"user":"506f9423e4b082ae7d1032ca"},{"problem":156,"code":"(fn [d l] \n  (loop [dval d inlist l rmap {}]\n    (if (empty? inlist)\n      rmap\n      (recur dval \n             (rest inlist) \n             (conj rmap {(first inlist) dval})\n             )\n      )\n    )\n  )","user":"55ce2b6de4b0e31453f64a26"},{"problem":156,"code":"(fn [default keys]\n  (loop [m {}\n         k keys]\n    (if (empty? k)\n      m\n      (recur (conj m [(first k) default]) (rest k)))))","user":"58ff5898e4b0438e51c2cfec"},{"problem":156,"code":"(fn [value keyseq]\n\t(into {} (for [k keyseq] {k value})))","user":"55a016fde4b0acc240e314f1"},{"problem":156,"code":"(fn [default s]\n  (apply merge \n         (map #(hash-map % default) s)\n         )\n  )","user":"53d11f7fe4b00fb29b221310"},{"problem":156,"code":"#(zipmap %2 (iterate (constantly %)  %))","user":"5dbb5200e4b09f47823971a9"},{"problem":156,"code":"(fn [v keys] (loop [result {} ks keys] (if (empty? ks) result (recur (conj result {(first ks) v}) (rest ks)))))","user":"5995f8ade4b0b211ea3aaae9"},{"problem":156,"code":"(fn [def-val keys] \n  (loop [res {}, init-keys keys]\n  \t(if (empty? init-keys)\n      res\n      (recur (assoc res (first init-keys) def-val) (rest init-keys))\n)))","user":"557f7c8be4b05c286339e0e0"},{"problem":156,"code":"#(loop [zz %2  maap {}]\n     (if (= ()  zz) \n       maap\n       (recur (rest zz) (merge  maap  { (first zz) %1} ))\n     )\n   )","user":"59dac4fbe4b0ef0a1e9b5c6d"},{"problem":156,"code":"(fn [default key-coll]\n  (apply hash-map (interleave key-coll (repeat default))))","user":"5dc02058e4b0e59a23173d7c"},{"problem":156,"code":"(fn [value keys]\n  (apply merge (map #(hash-map % value) keys)))","user":"546c4c5fe4b00cfc9eacc178"},{"problem":156,"code":"(fn [d xs] (apply assoc {} (for [x xs\n                                 y [x d]]\n                             y)))","user":"4ea03f70535d7eef308072a1"},{"code":"(fn [a b]\n  (zipmap b\n    (repeat a)))","problem":156,"user":"4e5a2403535d8a8b8723a2a7"},{"problem":156,"code":"(fn [default coll] (into {} (map #(hash-map % default) coll)))","user":"5a781494e4b013a48d399766"},{"problem":156,"code":"#(into {} (map (fn [v] [v %]) %2))","user":"59638af5e4b066ee0a44b0cc"},{"code":"(fn [d s]\n  (zipmap s (repeat (count s) d)))","problem":156,"user":"50573ed8e4b0012181721987"},{"code":"(fn rec [d c] (if (empty? c) {} (conj (rec d (rest c)) {(first c) d})))","problem":156,"user":"4fcc103fe4b0ee37620e185f"},{"problem":156,"code":"(fn [val keys] (reduce #(conj %1 [%2 val]) {} keys))","user":"58ad4349e4b0ebc645576c9d"},{"problem":156,"code":"(fn [value keys] (reduce #(assoc % %2 value) {} keys))","user":"58172161e4b0c0e9c07b8389"},{"problem":156,"code":"(fn roz [d c]\n  (apply merge (map #(hash-map %1 d) c)))","user":"57da7593e4b0bd073c202410"},{"problem":156,"code":"#(into {} (zipmap %2 (repeat %1)))","user":"5377a23ce4b06839e8705e39"},{"problem":156,"code":"(fn\n  [val list]\n  (loop [result {}\n         remain list]\n    (if (empty? remain)\n      result\n      (recur (assoc result (first remain) val) (rest remain))\n      )\n    )\n)","user":"557c6ca6e4b05c286339e0c4"},{"problem":156,"code":"(fn map-default [value keys]\n  (zipmap keys (take (count keys) (repeat value))))","user":"60323240e4b0d5df2af222b3"},{"problem":156,"code":"(fn [default, keys] (let [result {}] (reduce (fn [p x] (conj p [x default])) result keys)))","user":"54eb53cfe4b024c67c0cf84a"},{"code":"(fn[x y] \n    (apply \n     merge\n     (map #(hash-map % x) y)))","problem":156,"user":"4daea587edd6309eace4d15a"},{"code":"#(into{}(for[k %2][k %]))","problem":156,"user":"4db92654535d1e037afb21a0"},{"code":"(fn [v kks]\n  (loop [coll kks, result {}]\n    (if (empty? coll)\n      result\n      (let [k (first coll)]\n        (recur (rest coll) (assoc result k v))))))","problem":156,"user":"52cf084ce4b07d0d72b27399"},{"problem":156,"code":"(fn [val keys]\n  (apply hash-map (apply concat (map #(vector % val) keys))))","user":"582bd5fae4b051871117bf7b"},{"code":"(fn [val list] \n   (zipmap list (repeat val)))","problem":156,"user":"530b8580e4b02e82168697cc"},{"problem":156,"code":"(fn [v ks]\n   (into {}\n     (for [k ks]\n       [k v])))","user":"5f4eb036e4b0102c75033969"},{"code":"(fn [c coll]  (apply hash-map (apply concat (for [x coll] [x c]  )) ))","problem":156,"user":"4f038ed6535dcb61093f6b24"},{"problem":156,"code":"(fn [x ks]\n  (zipmap ks (repeat x)))","user":"571d063ee4b0145328a76272"},{"problem":156,"code":"(fn [v c] (apply hash-map (apply concat (map #(do [% v]) c))))","user":"57addbcce4b0b8559636fca3"},{"problem":156,"code":"(fn [keys values]\n  (zipmap values\n      (repeat keys)\n  )\n)","user":"5c493046e4b0e06e1360a3cb"},{"problem":156,"code":"(fn \n  [default \n   keylist]\n  (reduce (fn [out in] (conj out [in default])) {} keylist))","user":"5ec819b4e4b08d0ec38692e2"},{"problem":156,"code":"#(apply hash-map (apply concat (map (fn [k] [k %1]) %2)))","user":"5aba34c5e4b073f1774426a3"},{"problem":156,"code":"(fn [n col] (reduce #(assoc %1 %2 n) {} col))","user":"55f1d5dfe4b06e875b46ce38"},{"problem":156,"code":"(fn default-values [v col] (reduce #(conj %1 [%2 v]) {} col))","user":"602abb59e4b0d5df2af2225e"},{"code":"(fn [default coll]\n  (persistent! \n   (reduce \n    #(assoc! %1 %2 default)\n    (transient {}) \n    coll)))","problem":156,"user":"51181009e4b0e0897831a60f"},{"problem":156,"code":"(fn f [d keys]\n  (if (empty? keys)\n     {}\n     (assoc (f d (rest keys))\n       (first keys) d)))","user":"60486e8ae4b02d28681c77db"},{"problem":156,"code":"(fn [v [k & ks] & m]\n    (if (nil? k)\n      m\n      (recur v ks (assoc m k v))))","user":"554c296ae4b0a04f792995a1"},{"problem":156,"code":"#(let [f (fn fr [x l m] (if (empty? l) m (fr x (rest l) (conj m [(first l) x]))))]\n   (f % %2 {})\n   )","user":"5c54e605e4b0fb8c5ffd9a14"},{"problem":156,"code":"(fn [x c] (zipmap c (repeat x)))","user":"5369d072e4b0243289761ea1"},{"problem":156,"code":"(fn [dflt vector] \n  (loop [map {} v vector] \n    (if (empty? v) \n      map \n    (recur (assoc map (first v) dflt) (rest v))\n      )\n    )\n  )","user":"556cc24ae4b09a3098a52502"},{"problem":156,"code":"#(zipmap %2 (repeat %))\n;#(into {} (for [v %2] [v %]))\n;(fn [i m] (reduce #(conj % [%2 i]) (sorted-map) m))","user":"57ba55c1e4b0fbc9809a2801"},{"problem":156,"code":"(fn prob156\n  [num keys]\n  (loop [[first & rest] keys\n         final {}]\n    (if (empty? rest)\n      (conj final {first num})\n      (recur rest (conj final {first num})))))","user":"4ebbff41535dfed6da9c6d78"},{"code":"(fn [x y] (apply array-map (interleave y (repeat x))))","problem":156,"user":"50b25edae4b03ea88043355e"},{"code":"(fn [v ks] (reduce (fn [m k] (assoc m k v)) {} ks))","problem":156,"user":"4f9907f8e4b0dcca54ed6cfa"},{"problem":156,"code":"(fn [d ks]\n  (->> ks\n       (map (fn [k] [k d]))\n       (into {})))","user":"55afe57ae4b002ce9d5cbc1c"},{"problem":156,"code":"(fn [aValue aList]\n  (reduce #(assoc %1 %2 aValue)\n          {}\n          aList))","user":"597f8984e4b0dbe32238d0bf"},{"code":"(fn  [x y] (reduce conj (map hash-map y (repeat x))))","problem":156,"user":"529012a5e4b0239c8a67af01"},{"problem":156,"code":"(fn [sv sm]\n  (reduce conj {} (map (fn [k] [k sv]) sm)))","user":"55d42d63e4b0e31453f64a72"},{"code":"(fn [v k] (apply array-map (interleave k (repeat (count k) v))))","problem":156,"user":"51b7b521e4b0d906fcd71d3a"},{"code":"(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))","problem":156,"user":"4e47f4f3535dc968683fc4bb"},{"code":"#(apply hash-map (reverse (conj (interpose %1 %2) %1)))","problem":156,"user":"4f9754d4e4b0dcca54ed6ce9"},{"code":"(fn t [n l] ( if (empty? l) nil (assoc (t n (rest l)) (first l) n) ))","problem":156,"user":"4f03c039535dcb61093f6b5e"},{"problem":156,"code":"(fn func [default keys-]\n  (apply hash-map (interleave keys- (repeat default))))","user":"4ed9fe5f535d10e5ff6f5308"},{"problem":156,"code":"(fn [d ky]\n  (reduce #(assoc %1 %2 d) {} ky))","user":"559c13c5e4b066d22e731f61"},{"problem":156,"code":"(fn map-default [val lkeys]\n  (reduce #(assoc %1 %2 val) {} lkeys))","user":"574f1c24e4b02ea114799255"},{"problem":156,"code":"(fn \n  [x s]\n  (reduce (fn [acc ele] (assoc acc ele x)) {}  s))","user":"56cdda13e4b0ea9b8538f752"},{"code":"(fn [def-val keys]\n  (reduce #(assoc %1 %2 def-val) {} keys))","problem":156,"user":"4f843d3ce4b033992c121c2d"},{"code":"(fn [d l] (into {} (map #(vec [% d]) l)))","problem":156,"user":"513dcc1ce4b0825f97f7f964"},{"problem":156,"code":"(fn [x y]\n  \n  (reduce #(assoc %1 %2 x) {} y))","user":"54b331dbe4b09f271ff37d37"},{"problem":156,"code":"(fn [default keys] (reduce (fn [x y] (assoc x y default)) {} keys))","user":"5d03944de4b0cc9c915881c5"},{"problem":156,"code":"(fn [v m]\n  (into {} (map #(hash-map % v) m)))","user":"534bfc71e4b084c2834f4a88"},{"code":"(fn [v k] (into {} (map (fn [x] {x v}) k)))","problem":156,"user":"5125029de4b0ce9225d2ed3e"},{"problem":156,"code":"(fn [n key-vec] (reduce (fn [m k] (assoc m k n)) {} key-vec))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":156,"code":"(fn [arg list] \n  (loop [[head & tail] list result {}]\n    (if head (recur tail (assoc result head arg)) result)\n    ))","user":"55da18d5e4b0e31453f64ad1"},{"code":"(fn [d vs] (apply hash-map (apply concat (map #(list %1 d) vs))))","problem":156,"user":"4e7f4147535db966e863cc3d"},{"code":"(fn [x ys] (zipmap ys (repeat (count ys) x)))","problem":156,"user":"4f748b54e4b044e54cd9a8fa"},{"code":"#(zipmap %2 (iterate identity %))","problem":156,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":156,"code":"(fn [value lst] (loop [i 0 result {}]\n  (if (get lst i)\n    (recur (inc i) (assoc result (get lst i) value))\n    result)))","user":"5f45211ae4b0955706451fbc"},{"problem":156,"code":"(fn [x coll]\n  (zipmap coll (repeat (count coll) x)))","user":"562c15d3e4b058fa18c5a6d5"},{"code":"(fn [v k]\n  (let [n (count k)]\n    (apply hash-map (interleave k (repeat n v)))))","problem":156,"user":"5220a770e4b0e6a83c8925a3"},{"problem":156,"code":"(fn [default xs] (zipmap (reverse xs) (repeat (count xs) default)))","user":"52b89d55e4b07a9af57922b3"},{"problem":156,"code":"(fn [k xs]\n  (apply conj (map (fn [x] {x k}) xs))\n  )","user":"57d7c894e4b0bd073c2023de"},{"problem":156,"code":"(fn [de se]\n  (->> se\n       (map (fn [a] [a de]))\n       (apply concat)\n       (apply hash-map)))","user":"5d6febe6e4b04d129b00f2d5"},{"problem":156,"code":"(fn [default syms] \n  (into {} \n        (vec (map (fn [sym] {sym default}) syms))))","user":"55096255e4b06e50f9beb116"},{"problem":156,"code":"(fn [x y]\n  (zipmap y (repeat x))\n  )","user":"5372c830e4b06d7f452d9dff"},{"code":"(fn [default liste]\n  (zipmap liste (map (fn [x] default) liste))\n)","problem":156,"user":"506ec408e4b09350ab4199f1"},{"code":"(fn [x m] (zipmap m (repeat x)))","problem":156,"user":"4fa6a491e4b081705acca1bc"},{"problem":156,"code":"(fn [value seq]\n  (reduce\n   (fn [mymap mykey]\n     (conj mymap {mykey value}))\n   {}\n   seq))","user":"5d25578de4b02ea6f0fb6a33"},{"problem":156,"code":"(fn [default keys]\n  (->> (mapcat\n        #(cons % [default])\n        keys)\n      (apply hash-map)))","user":"504f9ae1e4b0a02f9cffde9c"},{"code":"(fn [init ks]\n  (into {} (for [k ks] [k init])))","problem":156,"user":"52ab6de1e4b0c58976d9ac78"},{"problem":156,"code":"(fn [x ylst] (->> (for [y ylst] {y x}) (apply merge)))","user":"55aa1637e4b0988bba2ad949"},{"problem":156,"code":"(fn [val vec] (into {} (map (fn [x] [x val]) vec)))","user":"5c1c0ba7e4b01240ff56721a"},{"problem":156,"code":"(fn [v ks] \n  (reduce #(assoc % %2 v) {} ks))","user":"5c3e313fe4b0a522eaa3f9a2"},{"problem":156,"code":"(fn [default-val key-seq]\n  (zipmap key-seq (repeat default-val)))","user":"55dbc7cde4b050e68259b3a4"},{"problem":156,"code":"(fn [a b] (reduce #(conj % {%2 a}) {} b) )","user":"5785c1d4e4b0ebec4cfb74e1"},{"code":"(fn dmap [default collection]\n    (apply merge (map #(assoc {} % default)  collection)))","problem":156,"user":"4ff01fa9e4b0678c553fc321"},{"code":"(fn mm [d s] (loop [n {} nes s]  (if (empty? nes) n (recur (into n { (first nes) d} )  (rest nes) )    ) ))","problem":156,"user":"4ff2ff7ce4b0678c553fc342"},{"problem":156,"code":"(fn [d s] (into (hash-map) (map #(vector % d) s)))","user":"5ab16992e4b073f1774425c4"},{"problem":156,"code":"(fn [init ks] (into {} (map (fn [k] [k init]) ks)))","user":"5c58736be4b01df32ab73247"},{"problem":156,"code":"(fn [default, keys]\n  (zipmap keys (repeat default)))","user":"59ef6cfae4b0966464fe6a32"},{"problem":156,"code":"(fn [val s]\n  (loop [v val seq s map {}]\n    (if (empty? seq)\n      map\n      (recur v (rest seq) (assoc map (first seq) val)))))","user":"5a962c09e4b0d174b936c765"},{"problem":156,"code":"(fn [default-val keys-seq]\n  (letfn [(append-default [default-val coll k]\n                        (if (contains? coll k) coll \n                          (assoc coll k default-val)))]\n  (reduce (partial append-default default-val) {} keys-seq)))","user":"53cbe808e4b00fb29b2212d4"},{"code":"#(apply hash-map (interleave %2 (repeat (count %2) %1)))","problem":156,"user":"4e5f08c7535d8a8b8723a2da"},{"problem":156,"code":"#(apply merge (for [mkey %2] {mkey %1}))","user":"558466fce4b04192f3441eee"},{"code":"(fn [defval ks]\n  (reduce #(conj %1 {%2 defval}) {} ks))","problem":156,"user":"5159849ce4b0394f658fe236"},{"code":"(fn [default more] \n  (loop [l more map {}]\n    (if (empty? l) \n      map\n    \t(recur (rest l) (assoc map (first l) default)))))","problem":156,"user":"522f988be4b032bbe3424168"},{"code":"(fn def-map\n  [v l]\n  (apply assoc {}\n    (interleave\n      l\n      (repeat (count l) v)\n      )))","problem":156,"user":"52084f75e4b01ce6bbf31dde"},{"problem":156,"code":"(fn [dvalue m]\n  (loop [result {} klist m]\n    (if (empty? klist)\n      result\n      (recur (assoc result (first klist) dvalue) (rest klist))\n    )\n  )\n)","user":"57e396cde4b0bfb2137f5a9e"},{"problem":156,"code":"(fn[default custom_ip]\n  (reduce (fn[key_val custom_ip]\n          (assoc key_val custom_ip default))\n          {}\n          custom_ip)\n  )","user":"5d8c8175e4b0915913b1d3e1"},{"problem":156,"code":"(fn [v ks] (apply merge (map #(assoc {} % v) ks)))","user":"5a0c822fe4b04bbd27e6d9b0"},{"code":"(fn foo [val c] (into {} (map #(hash-map % val) (seq c))))","problem":156,"user":"50ec69e0e4b04edc3377704a"},{"code":"(fn [value keys] (apply hash-map (mapcat #(vector % value) keys)))","problem":156,"user":"50a635bbe4b0aa96157e2621"},{"problem":156,"code":"(fn [value lst] \n  (reduce conj {} (map hash-map lst (repeat value))))","user":"58681bf0e4b0f14aab7c888a"},{"code":"(fn default-map [value keys]\n  (zipmap keys (repeat (count keys) value)))","problem":156,"user":"521b339fe4b0c4ef0be83031"},{"problem":156,"code":"(let [create-map (fn [default ks acc]\n                   (if (empty? ks)\n                     acc\n                     (recur default (rest ks) (assoc acc (first ks) default))))]\n  (fn [default keys] (create-map default keys {})))","user":"587100d6e4b01531a375e9f0"},{"code":"(fn [df keys]\n  (reduce #(assoc %1 %2 df) {} keys))","problem":156,"user":"53489329e4b084c2834f4a5b"},{"problem":156,"code":"(fn [v col] (apply hash-map (interleave col (repeat 100 v))))","user":"5d1a1082e4b0902706380e0e"},{"problem":156,"code":"(fn [v l] (reduce #(conj %1 {%2 v}) {} l))","user":"5c308385e4b0d62ef62d9f1c"},{"code":"(fn [val keys] (into {} (for [key keys] [key val])))","problem":156,"user":"4fd1971ae4b04c3a95aa0412"},{"problem":156,"code":"(fn [default kys ]  (apply hash-map (interleave kys (repeat (count kys) default)))      )","user":"558ee1c9e4b0277789237659"},{"problem":156,"code":"#(zipmap %2(repeat (count %2) %1))","user":"53f3a4ace4b0742d9025b0f7"},{"problem":156,"code":"(fn [d ks] \n  (->> ks\n       (map #(assoc {} % d))\n       (reduce merge)))","user":"58d2b7b3e4b03c36ff7e5908"},{"problem":156,"code":"(fn [d c] (reduce (fn [c k] (assoc c k d)) {} c))","user":"551ebcd7e4b08d5046aa8a4a"},{"problem":156,"code":"(fn [n coll] (reduce #(assoc %1 %2 n) {} coll))","user":"56f4cedce4b046a417f92063"},{"problem":156,"code":"(fn [v s]\n  (apply hash-map (interleave s (take (count s) (iterate identity v)))))","user":"57af41bce4b0fbc9809a2731"},{"code":"(fn [default keys]\r\n    (zipmap keys (repeat (count keys) default)))","problem":156,"user":"4f039bbe535dcb61093f6b39"},{"problem":156,"code":"(fn [de l]\n  (reduce\n   (fn [m el]\n     (assoc m el de))\n   {}\n   l))","user":"552d2e4fe4b076ab5578f7e1"},{"code":"(fn [dv keys]\n  (apply hash-map (interleave keys (repeat (count keys) dv))))","problem":156,"user":"4fe9ea87e4b0547ebccb2476"},{"code":"(fn [d xs] (into {} (for [x xs] (vector x d))))","problem":156,"user":"511aa2a4e4b0c87c59c9670a"},{"code":"(fn [d coll] (reduce (fn [acc k] (conj (hash-map k d) acc)) {} coll))","problem":156,"user":"51cfc616e4b0e42293a22578"},{"code":"#(into {} (for [x %2] {x %1}))","problem":156,"user":"4faa8479e4b081705acca1f7"},{"code":"#(apply hash-map (apply concat (map (fn [x] [x %1]) %2)))","problem":156,"user":"513f400ae4b051389b345b3f"},{"problem":156,"code":"(fn [default ks]\n  (reduce\n   #(conj %1 [%2 default])\n   {}\n   ks))","user":"59a06e55e4b0871e7608b835"},{"code":"(fn mapdef [x xs] (into {} (map #(vector % x) xs)))","problem":156,"user":"50ed1ce7e4b01236b1d49839"},{"problem":156,"code":"(fn mapdef156\n    [v k]\n    (if (= (count k) 0)\n      {}\n      (conj (mapdef156 v (rest k)) [(first k) v])))","user":"4f9e0000e4b0dcca54ed6d2a"},{"problem":156,"code":"(fn [default map-keys] (apply array-map (conj (vec (interpose default map-keys)) default)))","user":"53dfd77fe4b0d874e779ae45"},{"problem":156,"code":"(fn mapper [x vec1] \n  (zipmap vec1 (repeat x)))","user":"5d6d2e11e4b04d129b00f2ba"},{"code":"(fn default-map [defval keys]\n  (reduce #(conj % {%2 defval}) {} keys))","problem":156,"user":"509e8da7e4b08df8156e9e2f"},{"code":"(fn [v, ks]\n  (reduce (fn [acc, x] (assoc acc x v)) {} ks)\n)","problem":156,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn [d l] \n  (apply hash-map \n   (concat \n    (interpose d l) \n    [d])))","problem":156,"user":"4fc43a8ee4b081705acca346"},{"problem":156,"code":"(fn [_val _list] (reduce #(assoc %1 %2 _val) {} _list))","user":"56e93576e4b04a395b9a03f6"},{"code":"(fn [x y] \n  (zipmap y (repeat x)))","problem":156,"user":"5032e6c8e4b0e4096af89718"},{"code":"(fn [init keys] (reduce #(conj %1 [%2 init]) {} keys))","problem":156,"user":"5341b141e4b00652c8746ecf"},{"code":"(fn a [x,l] (into {} (map vector l (take (count l) (repeat x)))))","problem":156,"user":"52b7a904e4b0c58976d9ad51"},{"problem":156,"code":"(fn [a b]\n  (apply hash-map (apply concat (mapcat (fn [c] {c a}) b))))","user":"59a2c7d5e4b066c664927d2e"},{"problem":156,"code":"(fn [dv v] (apply merge (map (fn [data] {data dv}) v)))","user":"5a135573e4b0ff51aa4b3180"},{"code":"(fn\n  [deff col]\n  (reduce #(merge %1 {%2 deff}) {} col))","problem":156,"user":"507a08e4e4b08327cd804a67"},{"problem":156,"code":"(fn [value, array] \n  (reduce #(assoc % %2 value) \n          {}\n          array))","user":"57c2d66ae4b05aa3c4741cb9"},{"problem":156,"code":"(fn [d ks] (reduce conj (for [k ks] {k d})))","user":"561e2b33e4b064ca9f4b16ba"},{"code":"(fn mapdef\n    ([value keys] (mapdef value keys {}))\n    ([value keys acc]\n     (if (empty? keys) acc\n       (recur value (next keys) (conj acc [(first keys) value])))))","problem":156,"user":"508157b2e4b0946d0443855c"},{"code":"(fn [default xs]\n  (zipmap xs (repeat default)))","problem":156,"user":"539f45dce4b0ca733b974497"},{"problem":156,"code":"(fn [a b] (reduce #(merge % [%2 a]) {} b))","user":"54344721e4b0b6b47310fcea"},{"code":"(fn [x y] (apply hash-map  (interleave y (repeat (count y) x))))","problem":156,"user":"51beb32ae4b013aa0d74b7fd"},{"code":"(fn foo [x m]\n  (if (empty? m)\n    {}\n    (assoc (foo x (rest m)) (first m) x)))","problem":156,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":"(fn [s xs] (zipmap (reverse xs) (repeat (count xs) s)))","problem":156,"user":"52baea85e4b07a9af57922d9"},{"problem":156,"code":"#(reduce-kv (fn [res idx itm] (assoc res itm %2)) %1 %3) {}","user":"599389d8e4b0b211ea3aaab6"},{"problem":156,"code":"(fn [x y] (reduce #(conj % [%2 x]) {} y))","user":"55437b0de4b0a04f79299524"},{"problem":156,"code":"(fn [v a] (reduce conj (map #(hash-map % v) a)))","user":"56ff7ffee4b08d47c97781be"},{"problem":156,"code":"(fn [default keys]\n   (loop [keys keys\n          result {}]\n     (if (empty? keys)\n       result\n       (recur (drop 1 keys)\n              (assoc result (first keys) default))))\n   )","user":"5430a16de4b0dad94371f2da"},{"code":"(fn [default-value keys]\n  (apply hash-map (interleave keys\n                              (repeat default-value))))","problem":156,"user":"528e7433e4b0239c8a67aedf"},{"code":"(fn [default keys] \n  (reduce \n    (fn [map key] (assoc map key default)) {} keys))","problem":156,"user":"4df6646e535d08e6dec9fe34"},{"problem":156,"code":"(fn v-map [v keys]\n  (cond\n    (= keys []) {}\n    :else (assoc (v-map v (rest keys)) (first keys) v)))","user":"52b36925e4b0c58976d9ad0b"},{"code":"(fn [value a] (reduce #(assoc %1 %2 value) {} a) )","problem":156,"user":"4f320253e4b0d6649770a08d"},{"code":"(fn [x ys] (reduce (fn [a b] (conj {b x} a)) {} ys))","problem":156,"user":"4eb2eae5535d7eef30807351"},{"problem":156,"code":"(fn [default coll]\n  (apply hash-map \n         (mapcat vector coll (repeat default))))","user":"553a35bfe4b09218d5f44ff0"},{"problem":156,"code":"(fn [defval col] (into {} (map #(vector % defval) col)))","user":"58467633e4b089d5ab817e90"},{"problem":156,"code":"(fn[default keys](zipmap keys (repeat default)))","user":"5e7bb000e4b085ba37836e1d"},{"code":"(fn loopo [x y] (if (empty? y) {} (conj (loopo x (rest y)) {(first y) x})))","problem":156,"user":"50c6fad1e4b00bb60fe0c52d"},{"code":"(fn [default coll]\n  (zipmap coll (repeat (count coll) default))\n  )","problem":156,"user":"4eb6f065535d7eef30807372"},{"problem":156,"code":"(fn [default sequence]\n  (zipmap sequence (repeat default)))","user":"5f9f744fe4b0715f5002d841"},{"code":"(fn [x y]\n  (into {}\n    (for [e y]\n      {e x})))","problem":156,"user":"5029faf6e4b023940c84aa46"},{"problem":156,"code":"#(reduce (fn [acc, x] (conj acc {x %1})) {} %2)","user":"5e486cb0e4b043cd24807a3e"},{"code":"(fn [ad se]\n  (apply assoc {}\n (interleave (reverse se) (repeat ad))))","problem":156,"user":"51cacda3e4b068dadb8f2227"},{"code":"#(zipmap %2 (replicate (count %2) %))","problem":156,"user":"51c9c6cde4b09ce160bef5b1"},{"code":"#(loop [out {} cur 0] (if (= (count %2) (count out)) out (recur (assoc out (nth %2 cur) %1) (inc cur)) ))","problem":156,"user":"51c9fe91e4b09ce160bef5b6"},{"code":"(fn [v coll] (apply hash-map (interleave coll (repeat v))))","problem":156,"user":"4dda44f2535d02782fcbe9f1"},{"problem":156,"code":"(fn\n  [val keys]\n  (loop [keys keys map {}]\n    (if (not= nil (first keys))\n      (recur (rest keys) (assoc map (first keys) val))\n      map\n      )\n    )\n  )","user":"5772ddb0e4b0979f896515d4"},{"problem":156,"code":"(fn [dv, ks]\n  (loop [m {} \n         _ks ks]\n    (if (= [] _ks)\n      m\n      (recur (assoc m (first _ks) dv) (rest _ks)))))","user":"57006957e4b08d47c97781c8"},{"problem":156,"code":"#(if (= 3 (count %2))\n   (into {}[ [(%2 0) %] [(%2 1) %] [(%2 2) %]])\n   (into (sorted-map)[ [(%2 0) %] [(%2 1) %]])\n   )","user":"5b94c2aee4b0c0b3ffbd4a59"},{"problem":156,"code":"(fn [default keys] (apply hash-map \n                     (mapcat #(vector % default) keys)))","user":"5b236e55e4b08b1df1c36759"},{"code":"(fn [v kk] (reduce (fn [m k] (assoc m k v)) {} kk))","problem":156,"user":"504e71cbe4b0f6ff3350c4b3"},{"problem":156,"code":"(fn [dval kseq]\n  (into {} (map (fn [k] [k dval]) kseq)))","user":"53a9db09e4b047364c04443b"},{"code":"(fn create-map [default-val ks]\n  (->>\n         (for [k ks]\n           [k default-val])\n  (reduce (partial apply conj))\n    (apply hash-map)))","problem":156,"user":"4fae4c11e4b081705acca248"},{"problem":156,"code":"#(loop [res {} items %2]\n   (if (empty? items)\n     res\n   \t(recur (assoc res (first items) %1) (rest items))))","user":"5c26c9b3e4b07e362c2305c5"},{"code":"(fn [default myseq]\n  (into {} (for [i myseq] [i default])))","problem":156,"user":"5238ca2de4b0d705d026eef6"},{"code":"(fn [default ks]\n  (zipmap ks (repeat default)))","problem":156,"user":"4f942227e4b0dcca54ed6cbe"},{"code":"(fn [default numbs] (zipmap numbs (repeat default)))","problem":156,"user":"4f05c087535dcb61093f6c00"},{"problem":156,"code":"(fn [value list] (reduce (fn [x y] (assoc x y value)) {} list))","user":"55092319e4b06e50f9beb113"},{"problem":156,"code":"(fn [value keys] (apply assoc {} (interleave keys (repeat value))))","user":"4dce9252535d5973398f92a3"},{"problem":156,"code":"(fn [v k]\n     (reduce (fn\n               [el acc]\n               (conj acc el))\n             ()\n             (map\n               #(assoc nil %1 v)\n               (into #{} k)\n               )\n\n             ))","user":"5bdc4a76e4b0ed4b8aab4c30"},{"problem":156,"code":"(fn [v ks] (into {} (map #(identity [% v]) ks)))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"problem":156,"code":"(fn \n  [x y]\n  (reduce #(assoc %1 %2 x) {} y))","user":"57500d13e4b02ea114799268"},{"problem":156,"code":"(fn [d a] (into {} (for [i a] [i d])))","user":"55016428e4b07d26eda61d72"},{"code":"(fn [default col]\n  (reduce #(assoc %1 %2 default) {} col)\n)","problem":156,"user":"5322d370e4b09d4e7a9b54c7"},{"problem":156,"code":"(fn [default keys]\n  (into {} (map (fn [k] [k default]) keys)))","user":"504e2d18e4b0f6ff3350c47a"},{"problem":156,"code":"(fn [default keys]\n  (reduce (fn [m key] (conj m [key default])) {} keys))","user":"53e3e353e4b036ad0777e406"},{"problem":156,"code":"(fn [default values] \n  (reduce \n   (fn [x y] ( if(contains? x y) (x) (conj x [y default])))\n  {}\n  values\n  )\n)","user":"54f97e22e4b01ecee9d8883a"},{"problem":156,"code":"(fn [d l] (apply hash-map (interleave l (#(map (constantly %1) %2) d l))))","user":"5866b999e4b0f14aab7c886b"},{"problem":156,"code":"(fn [d a] (into {} (map (fn [x] {x d}) a)))","user":"60109997e4b074f607df66b3"},{"problem":156,"code":"(fn [default mapKeys] (reduce (fn [newMap newKey] (assoc newMap newKey default)) {} mapKeys))","user":"588fd085e4b00487982d51c0"},{"code":"(fn [default keys]\n  (zipmap keys (repeat (count keys) default)))","problem":156,"user":"4e42f930535dc968683fc49f"},{"problem":156,"code":"#(loop [col %2\n        agg {}]\n   (if (empty? col) \n     agg\n     (recur (rest col) (assoc agg (first col) %1))))","user":"59061cc8e4b047aa04b1992b"},{"problem":156,"code":"(fn [v, ks] (reduce conj (map #(hash-map % %2) ks (repeat v))))","user":"57eb7a97e4b0bfb2137f5b62"},{"problem":156,"code":"(fn [default_val keys_seq]\n  (zipmap keys_seq (repeat default_val)))","user":"56c12aa2e4b0839206b9d682"},{"code":"(fn [dv sq] (loop [r {} s sq] (if-not (empty? s) (recur (assoc r (first s) dv) (rest s)) r)))","problem":156,"user":"5082ccb3e4b06a522e8c7af3"},{"problem":156,"code":"(fn [no x]\n  (into {} (for [i x]\n             [i no])))","user":"59636b37e4b066ee0a44b0c3"},{"code":"(fn\n  [v ks]\n  (zipmap ks (cycle [v]))\n  )","problem":156,"user":"510591dde4b06d28cacc92eb"},{"problem":156,"code":"(fn map-default [default coll]\n  (assoc {} (first coll) default)\n  (loop [l {} r coll]\n    (if (empty? r)\n      l\n      (recur \n       (assoc l (first r) default) \n       (rest r)))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"code":"(fn [default key-vector]\n  (into {} (for [k key-vector] (assoc {} k default)))\n  )","problem":156,"user":"5250b7a5e4b0541d1855b83e"},{"problem":156,"code":"(fn [x, m]\n  (loop [acc 0 lst m result {}]\n    (if (>= acc (count m))\n      result\n      (recur (inc acc) (rest lst) (assoc result (first lst) x)))))","user":"57a7f7d8e4b0a96607956218"},{"problem":156,"code":"(fn [x coll]\n    (reduce (fn [l r] (into l [[r x]])) {} coll ))","user":"5d887d27e4b0915913b1d3a8"},{"problem":156,"code":"(fn make-map-default [default-value some-keys] (into {}  (into []  (for [k some-keys] [k default-value]))))","user":"56c0756de4b060a8e693e3a9"},{"code":"(fn answerfun([defval col] (answerfun defval col {})) ([defval col retval] (if (empty? col) retval (recur defval (rest col) (assoc retval (first col) defval)))))","problem":156,"user":"4e539f7e535d8a8b8723a272"},{"problem":156,"code":"(fn [c coll] (into {} (for [e coll] [e c])))","user":"5474666ae4b0c51c1f4d7288"},{"problem":156,"code":"(fn [v kxs]\n  (zipmap kxs (repeat v)))","user":"60836285e4b0736b099e42e4"},{"problem":156,"code":"(fn [v kys]\n  (reduce #(assoc %1 %2 v) {} kys))","user":"56041883e4b0c80df0ca2655"},{"problem":156,"code":"(fn [def_val keys] (into {} (for [x keys] {x def_val})))","user":"546a6fd8e4b00cfc9eacc158"},{"code":"#(apply merge (for [k %2] {k %1}))","problem":156,"user":"5141b763e4b02fd87f5064c4"},{"code":"(fn [default input]\n  (loop [sqns input, result {}]\n    (if (seq sqns)\n       (recur (rest sqns) (conj result [(first sqns) default]))\n       result)))","problem":156,"user":"528bba38e4b0239c8a67aea9"},{"problem":156,"code":"(fn [defx valsx] (reduce #(into %1 {%2 defx}) {} valsx))","user":"609980fce4b00e9e6653c408"},{"problem":156,"code":"(fn [default-value, map-keys] \n  (loop [source map-keys result-map {}]\n    (if (empty? source)\n      result-map\n      (recur (next source) (assoc result-map (first source) default-value)))))","user":"56798d83e4b05957ce8c618b"},{"problem":156,"code":"(fn [default, keys]\n  (apply hash-map (interleave keys (repeat default))))","user":"559057c4e4b027778923766e"},{"code":"(fn [value keys] (apply hash-map (interleave keys (repeat (count keys) value))))","problem":156,"user":"507330e6e4b0e3170b5a8698"},{"code":"(fn [v keys]\r\n  (loop [[k & keys] keys m {}]\r\n    (if k (recur keys (assoc m k v)) m)))","problem":156,"user":"500159b3e4b0678c553fc419"},{"code":"#((fn [val sq mp] (if (= 1 (count sq)) (assoc mp (first sq) val) (recur val (next sq) (assoc mp (first sq) val)))) %1 %2 {})","problem":156,"user":"52e25beee4b09f7907dd1433"},{"problem":156,"code":"(fn map-default [default key-seq]\n  (apply hash-map (mapcat vector key-seq (repeat default))))","user":"557e56aae4b05c286339e0d5"},{"code":"(fn\n  [val seq-keys]\n  (let [res {}]\n    (reduce #(assoc %1 %2 val) res seq-keys)))","problem":156,"user":"5289bba9e4b0239c8a67ae69"},{"problem":156,"code":"(fn [def-val keys]\n  (->> keys\n       (map #(vector % def-val))\n       (into {})))","user":"5dc88a38e4b02f9375f4e1db"},{"problem":156,"code":"(fn [dfx mykeys] (zipmap mykeys (repeat (count mykeys) dfx)))","user":"5dd70ee3e4b0948ae9d9ad85"},{"problem":156,"code":"(fn [default ks] (reduce (fn [acc k] (assoc acc k default)) {} ks))","user":"560a7b46e4b05f002753defb"},{"problem":156,"code":"(fn [k l]\n  (into {} (map #(hash-map % k) l)))","user":"5db1e852e4b010eb3c36cd0a"},{"code":"(fn [default keys]\n  (into {} (for [key keys]\n             [key default])))","problem":156,"user":"50cfcad6e4b00b15ecee9752"},{"code":"(fn [k l]\n  (loop [em {}, li (reverse l)]\n    (if (= li [])\n       em\n      (recur\n       (conj em {(first li) k})\n       (rest li)))))","problem":156,"user":"50a69e8ce4b0aa96157e2626"},{"code":"#(->> (cycle [%])\n      (interleave %2)\n      (apply hash-map))","problem":156,"user":"512f06c5e4b0762be4c7aad7"},{"problem":156,"code":"(fn [x y] (apply array-map (concat (interpose x y) (vector x)) ) )","user":"557e8326e4b05c286339e0d7"},{"problem":156,"code":"(fn [x y] (into {} (map #(vector % x) y)))","user":"54ab46fee4b09f271ff37cc3"},{"code":"(fn [d l] (reduce #(assoc % %2 d) {} l))","problem":156,"user":"50352431e4b0a84c1d88f620"},{"code":"(fn [d m]\n  (apply hash-map (concat (interpose d m) (list d))))","problem":156,"user":"4fcd155de4b065de69964ca3"},{"code":"(fn my-default-map [dv coll]\n  (into {}\n    (map hash-map coll (repeat (count coll) dv))))","problem":156,"user":"4fd769a1e4b0dab7d829f382"},{"problem":156,"code":"(fn [v x]\n (loop [col x m {}]\n  (if-not (seq col)\n   m\n   (recur (rest col) (assoc m (first col) v)))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn [x m]\n  (apply hash-map (interleave m (repeat x))))","problem":156,"user":"4ef992c8535dced4c769f268"},{"code":"#(apply merge (map (fn [x] (assoc {} x %1)) %2))","problem":156,"user":"5339edfbe4b0e30313ee6cb3"},{"problem":156,"code":"(fn [val clé]\n((fn crhash [res valeur listeclé]\n  (if (empty? listeclé)\n    (do res)\n    (do \n        (recur (assoc res (first listeclé) valeur) valeur (rest listeclé))\n      )\n   )\n    ) {} val clé))","user":"556f2009e4b09a3098a52519"},{"problem":156,"code":"(fn [v m]\n  (apply hash-map (interleave m (repeat v))))","user":"5705e404e4b0b0fb43fd0676"},{"code":"(fn [v k] (zipmap k(repeat (count k)v)))","problem":156,"user":"538dc2d1e4b0b51d73faae75"},{"code":"(fn[d,x](apply merge ( map #(hash-map %  d) x)))","problem":156,"user":"52d66ca0e4b09f7907dd135c"},{"problem":156,"code":"(fn [d l]\n  (->> (repeat (count l) d)\n   (zipmap l)\n  )\n)","user":"59d02bfbe4b0ef0a1e9b5b7b"},{"code":"(fn [default x] (reduce #(assoc %1 %2 default) {} x) )","problem":156,"user":"513facf5e4b00f13ea1bd892"},{"problem":156,"code":"(fn [value map1] \n (reduce (fn [map2 k](assoc map2 k value)) {} map1))","user":"5e4ba8e8e4b0889a8790a55a"},{"problem":156,"code":"(fn [val sequence]\n  (reduce #(conj %1 {%2 val})\n              {} sequence\n              ))","user":"54be7c0de4b0ed20f4ff6eec"},{"code":"(fn build [v, ks]\n  (loop [ks ks r {}]\n    (if (empty? ks)\n      r\n      (recur (rest ks) (conj r {(first ks) v})))))","problem":156,"user":"5151a6bee4b03e678e393ad3"},{"code":"(fn [v seq]\n  (loop [rem-seq seq\n         mapp {}]\n    (if (empty? rem-seq) mapp\n      (recur (rest rem-seq) (assoc mapp (first rem-seq) v)))))","problem":156,"user":"53733312e4b06d7f452d9e0a"},{"problem":156,"code":"(fn [s col] \n  (reduce (fn [acc val] (assoc acc val s)) {} col)\n  )","user":"58bc6a88e4b0888cdc949d16"},{"code":"(fn [num vtable] (reduce (fn [acc k] (conj acc [k num])) (hash-map) vtable))","problem":156,"user":"52c25645e4b07a9af579237d"},{"problem":156,"code":"(fn [default v]\n  (zipmap v (repeat default)))","user":"5424c523e4b01498b1a71b03"},{"problem":156,"code":"#(reduce (fn [acc item]\n           (assoc acc item %))\n         {}\n         %2)","user":"5829d588e4b051871117bf4a"},{"code":"(fn [o1, o2]\n  (loop [n o1, s o2, f {}]\n    (if (empty? s) f (recur n (rest s) (assoc f (first s) n)))))","problem":156,"user":"50d4c940e4b09cc622d65a71"},{"problem":156,"code":"(fn [arb lst] (into (sorted-map) (map #(vector % arb) lst)))","user":"5c5e3af7e4b01df32ab732c6"},{"problem":156,"code":"(fn[d ks] (apply merge (map (fn[k]{k d}) ks)))","user":"561d7246e4b064ca9f4b16b1"},{"problem":156,"code":"(fn [default v]\n  (reduce (fn [acc e] (assoc acc e default)) {} v))","user":"5e76274ce4b085ba37836deb"},{"problem":156,"code":"(fn func3\n  [deflt kys]\n  (reduce (fn [hsh, ky]\n            (conj hsh [ky deflt])) (hash-map) kys))","user":"540efe2ee4b0addc1aec6724"},{"code":"#(reduce into (for [k %2] {k %}))","problem":156,"user":"4f9597e0e4b0dcca54ed6cd4"},{"problem":156,"code":"(fn [exp ve]\n   (reduce #(assoc %1 %2 exp) {} ve)\n   )","user":"589e22fae4b02bd94d917e56"},{"code":"(fn [v s]\n  (zipmap s (repeat (count s) v)))","problem":156,"user":"519136e9e4b0f8ef0be96c01"},{"code":"(fn[d c](into{}(map #(or[% d])c)))","problem":156,"user":"4e707db6535d5021c1a8963a"},{"code":"(fn [d m]\r\n   (loop [result {}\r\n      m m]\r\n         (if (empty? m)\r\n            result\r\n            (recur (conj result [(first m) d]) (rest m)))))","problem":156,"user":"50ab44b2e4b0f65d68208509"},{"problem":156,"code":"(fn mapd\n  ([x items]\n  (mapd x items nil))\n  ([x items a]\n   (if (empty? items)\n     a\n     (recur x (rest items) (merge a (hash-map (first items) x))))))","user":"5ac741d6e4b0e27600da777d"},{"problem":156,"code":"(fn[default args] (zipmap args (repeat (count args) default)))","user":"5537b2c7e4b09218d5f44fce"},{"code":"#(into {} (map (fn [k v] (vector k v)) %2 (repeat %)))","problem":156,"user":"52a9154ee4b0c58976d9ac3b"},{"problem":156,"code":"(fn [val colls] (apply array-map(mapcat #(list % val) colls)))","user":"4fdb0c0ae4b05e33b9224f57"},{"problem":156,"code":"(fn deffy [default more]\n  (into {} (map vector more (take (count more) (repeat default)))))","user":"5414b7c4e4b01498b1a719ed"},{"code":"(fn [d c]\n  (apply hash-map\n         (interleave c (repeat (count c) d))))","problem":156,"user":"531a3914e4b08068f379ed88"},{"problem":156,"code":"(fn [default l] (reduce #(assoc %1 %2 default) {} l))","user":"5520af03e4b08d5046aa8a64"},{"code":"(fn [default coll]\n  (into {} (for [key coll] [key default])))","problem":156,"user":"4e22b78b535d04ed9115e81e"},{"problem":156,"code":"(fn [val lst] (into {} (map (fn[el] [el val]) lst)))","user":"599acb39e4b07157cc8dab14"},{"code":"(fn [dfs kys] (reduce conj (for [x kys] {x dfs})))","problem":156,"user":"515fe402e4b0e2be8aa20bd7"},{"problem":156,"code":"(fn [default-value keys] (zipmap keys (repeat default-value)))","user":"541b1f25e4b01498b1a71a63"},{"problem":156,"code":"(fn [default l]  (apply array-map (interleave l (repeat (count l) default))))","user":"4f9a0f71e4b0dcca54ed6d04"},{"problem":156,"code":"#(reduce (fn [acc el] (assoc acc el %1)) {} %2)","user":"5957cc41e4b066ee0a44af76"},{"problem":156,"code":"(fn [default coll]\n  (apply merge (map (fn [x] {x default}) coll)))","user":"5d49ec5ee4b0776584bd6f1c"},{"problem":156,"code":"(fn make-default-map [v k]\n  (apply merge (map (fn [x] {x v}) k)))","user":"576000fce4b08062f99a4e8b"},{"problem":156,"code":"(fn __ [value keys]\n  (apply hash-map (apply concat (map (fn [x] [x value]) keys))))","user":"564ecc9ee4b0284900eef6a1"},{"problem":156,"code":"(fn [v k]\n  (loop [v v, k k, r {}]\n    (if (not-empty k) (recur v (rest k) (assoc r (first k) v))\n      r)))","user":"5457e502e4b01be26fd74612"},{"problem":156,"code":"(fn [v ks] (apply conj {} (map (fn [k] [k v]) ks)))","user":"5d272077e4b092dab7f59c64"},{"code":"(fn [k v]  (reduce conj (reverse (map (fn [b] {b k}) v))))","problem":156,"user":"52e73b36e4b09f7907dd1483"},{"problem":156,"code":"(fn [x xs] (into {} (for [i xs] [i x])))","user":"57c5ee11e4b05aa3c4741ceb"},{"problem":156,"code":"(fn [x lister]\n  (into {} (map (fn [el] [el x]) lister)))","user":"54196d63e4b01498b1a71a34"},{"problem":156,"code":"(fn [default ks]\n  (reduce (fn [acc k] (assoc acc k default)) {} ks))","user":"59f4c42ce4b0966464fe6ab6"},{"code":"(fn [d ks]\n  (into {} (map #(vector % d) ks)))","problem":156,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":156,"code":"(fn [df xs]\n  (reduce #(conj %1 [%2 df]) {} xs))","user":"51e89428e4b006d205356a51"},{"code":"#(into {} (map (fn [e] (hash-map e %1)) %2))","problem":156,"user":"52cb94e5e4b07d0d72b2734e"},{"problem":156,"code":"(fn map-defaults [default keys]\n  (zipmap keys (repeat default)))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":156,"code":"(fn create-set [value key-list]\n  (->> key-list\n       (map #(list %1 value))\n       (apply concat)\n       (apply hash-map)))","user":"556238bce4b0c656e3ff17d3"},{"problem":156,"code":"(fn [value, theKeys] ( zipmap theKeys (repeat value)))","user":"548026d8e4b0e286459a1155"},{"code":"(fn map-default [default keys]\n  (reduce #(assoc % %2 default) {} keys))","problem":156,"user":"52dd6cc8e4b09f7907dd13e2"},{"code":"(fn\n  [default items]\n  (zipmap items (repeat (count items) default)))","problem":156,"user":"4eddc5f4535d10e5ff6f532c"},{"problem":156,"code":"(fn [v coll]\n  (into {} (for [x coll] [x v])))","user":"5e22e4c5e4b05b4b01516137"},{"problem":156,"code":"(fn [param1 param2]\n  (let [m (map #(hash-map % param1) param2)]\n    (apply merge m)))","user":"604a3daee4b02d28681c77f2"},{"code":"(fn [k v] (reduce #(assoc %1 %2 k) {} v))","problem":156,"user":"525c575be4b0cb4875a45d38"},{"problem":156,"code":"(fn [def-val coll] (into {} (map (fn [v] [v def-val]) coll)))","user":"56739bdce4b05957ce8c6122"},{"code":"(fn consmap [default keyz] (let [makenew (fn [coll, k] (conj coll [k default]))] (reduce makenew {} keyz)))","problem":156,"user":"52b60e94e4b0c58976d9ad3e"},{"code":"#(reduce \n   (fn [coll x] (assoc coll x %)) (hash-map) %2 \n  )","problem":156,"user":"50217818e4b00bba4502f7a7"},{"code":"(fn [d,s]\n  (into {}\n        (map #(vec [% d]) s)\n        )\n  )","problem":156,"user":"51ab7a68e4b04e3dc0c27b35"},{"code":"(fn defaultvals [x y]                                                                              (let [vals (repeat (count y) x)]                                                                        (zipmap y vals)\n       )                                                                                             )","problem":156,"user":"5195b8cce4b04c0af7ff3c08"},{"problem":156,"code":"(fn [default keys]\n  (into {}\n        (map (fn [key] [key default])\n             keys)))","user":"5189bf9ee4b0288ada3dbdaf"},{"code":"(fn [x ks]\n  (into {} (map #(vector % x) ks)))","problem":156,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"(fn [default all-keys]\n  (reduce #(conj %1 {%2 default}) {} all-keys))","problem":156,"user":"52af7a5ce4b0c58976d9acbd"},{"code":"#(zipmap %2 (iterate #{%1} %1))","problem":156,"user":"50c11f5ae4b096f585049c39"},{"problem":156,"code":"(fn [x y]\n  (zipmap\n    y\n    (repeat (count y) x)))","user":"57fc5e42e4b0d3187e900997"},{"problem":156,"code":"(fn f [x y] \n  (if (> (count y) 0) \n    (conj {(first y) x} (f x (rest y))) \n    {}\n  )\n)","user":"5a78cd9ee4b013a48d399777"},{"problem":156,"code":"(fn [d c]\n (loop [ls c results {}]\n  (if (empty? ls)\n   results\n   (recur (rest ls) (conj results [(first ls) d]))\n  )\n )\n)","user":"57213df6e4b0c5bde472c0ab"},{"problem":156,"code":"#(loop [v %1 s %2 res {}]\n   (if (empty? s) \n     res\n     (recur v (rest s) (assoc res (first s) v))))","user":"5600591de4b04bb52996e166"},{"problem":156,"code":"(fn [x m]\n  (reduce #(conj %1 [%2 x]) {} m)\n  )","user":"55f33f0ce4b06e875b46ce59"},{"code":"(fn [v ks] (apply assoc {} (interleave ks (repeat v))))","problem":156,"user":"4e6e97ca535d5021c1a8960c"},{"problem":156,"code":"(fn [default-value coll-of-keys]\n  (reduce #(conj %1 [%2 default-value]) {} coll-of-keys))","user":"5764457ae4b0994c1922fbf3"},{"code":"(fn [val keys]\n    (apply hash-map (interleave keys (repeat val))))","problem":156,"user":"4ff76222e4b0678c553fc38e"},{"code":"(fn [d c] (reduce #(assoc % %2 d) {} c))","problem":156,"user":"504e9f5ce4b069badc5a33bd"},{"problem":156,"code":"(fn [dft xs] (apply merge (map #(hash-map % dft) xs)))","user":"54bc575ce4b0ed20f4ff6ecb"},{"problem":156,"code":"(fn doit [d ks] \n  \t(\n   \t\treduce #(\n    \t\tassoc %1 %2 d\n  \t\t)\n   \t\t{}\n   \t\tks\n\t)\n)","user":"516ee939e4b06aac486e5b34"},{"code":"#(apply merge (map (fn [x] {x %1}) %2))","problem":156,"user":"531792d9e4b08068f379ed5e"},{"code":"(fn[default coll] (reduce #(assoc % %2 default) {} coll))","problem":156,"user":"51a768e0e4b0da5f497bde84"},{"code":"(fn [d stuff]\n  (reduce\n   (fn [m key] (conj m {key d}) )\n   {}\n   stuff))","problem":156,"user":"4e6cf2be535de274dd8d818a"},{"problem":156,"code":"(fn [default ks]\n  (reduce #(assoc % %2 default) {} ks))","user":"54d251aee4b0e8a36923e5f1"},{"code":"(fn foo [d l]\n  (apply hash-map (interleave l (repeat d))))","problem":156,"user":"51baff1be4b0fe3ecfb46443"},{"problem":156,"code":"(fn [default, lst] (zipmap lst (repeat default)))","user":"55048182e4b086ebe8a79c7c"},{"problem":156,"code":"#(apply hash-map(interleave %2( repeat %1)))","user":"56a7c7c8e4b07966d5a8a061"},{"code":"(fn with-default [v keys]\n  (zipmap keys (repeat v)))","problem":156,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":156,"code":"(fn\n    [v keys]\n\n    (apply hash-map\n      (mapcat\n        (fn [k]\n          [k v]\n        )\n        keys\n      )\n    )\n)","user":"5784e177e4b0ebec4cfb74cf"},{"problem":156,"code":"#(apply merge (for [item %2] (hash-map item %1)))","user":"533d2ea5e4b085b17e897d7a"},{"problem":156,"code":"(fn [default keys]\n      (reduce (fn [res cur]\n                (conj res {cur default}))\n              {}\n              keys)\n      )","user":"5658b9bde4b00d315579610e"},{"problem":156,"code":"(fn [v coll]\n  (zipmap coll\n          (vec (repeat (count coll) v))))","user":"54b64fbbe4b05787c3b163b8"},{"problem":156,"code":"(fn [default-val ks]\n  (into {} (map (fn [k] [k default-val]) ks)))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":156,"code":"(fn [v kys] (apply hash-map (mapcat #(list % v) kys)))","user":"57300c19e4b0cd1946bd0fa1"},{"code":"(fn [value key] (zipmap key (repeat (count key) value)))","problem":156,"user":"50a025a9e4b08df8156e9e49"},{"problem":156,"code":"(fn [a s] (apply conj (for [x s] {x a})))","user":"4e5e9f6b535d8a8b8723a2d2"},{"code":"(fn [default s]\n  (apply array-map (interleave s (repeat (count s) default))))","problem":156,"user":"4ee9d697535d93acb0a66895"},{"code":"(fn [default keys] (reduce merge (map #(hash-map % default) keys)))","problem":156,"user":"52c3a453e4b0c2d177d620c7"},{"problem":156,"code":";(fn [d coll]  \n;  (reduce \n;   (fn [acc x] (assoc acc x d)) {} coll))\n\n(fn [d coll] (zipmap coll (repeat d)))","user":"5e18bd30e4b0dc95940084fa"},{"problem":156,"code":"(fn [value mymap] (zipmap mymap (repeat value )))","user":"5ab4fd4ae4b073f17744262b"},{"problem":156,"code":"(fn work [item coll]\n  (if (empty? coll) {}\n    (assoc (work item (rest coll)) (first coll) item)))","user":"5e84b48ee4b09a7a73c8bbc8"},{"problem":156,"code":"(fn map-default [dflt v]\n  (zipmap v (repeat (count v) dflt)))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn [d y]\n   (reduce #(conj % %2) {} (for [x y]\n                 [x d])))","problem":156,"user":"52b48f04e4b0c58976d9ad29"},{"problem":156,"code":"(fn [default keyList]\n  (reduce #(assoc %1 %2 default) (into [{}] keyList)\n  )\n)","user":"53a36fd7e4b0f1fc74538834"},{"problem":156,"code":"(fn [d m] (into {} (mapcat #(assoc {} %1 d) m)))","user":"55d85ac9e4b0e31453f64ab2"},{"problem":156,"code":"(fn [a-val a-seq]\n      (apply hash-map (reduce #(conj % %2 a-val) [] a-seq)))","user":"5f2d3c0ee4b033932238a66a"},{"problem":156,"code":"(fn f[v s]\n  (loop [v v s s m {}]\n    (if (empty? s)\n      m\n      (recur v (rest s) (assoc m (first s) v)))))","user":"56df632ce4b0ca2494a095f2"},{"problem":156,"code":"(fn [dval sq]\n  (loop [ret-map (hash-map)\n         sq-it sq]\n    (if (empty? sq-it)\n      ret-map\n      (recur (assoc ret-map (first sq-it) dval)\n             (rest sq-it)))))","user":"559d33b3e4b0ec2b359424d9"},{"code":"(fn [d m]\n  (reduce conj (for [key m] {key d})))","problem":156,"user":"510a8124e4b02ed671928d9b"},{"code":"(fn [d sq] (reduce #(assoc %1 %2 d) {} sq))","problem":156,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":156,"code":"(fn [v  ks]  (reduce #(into %1 {%2 v}) {} ks) )","user":"58e37946e4b005f69f193cae"},{"code":"(fn [val sq]\n  (reduce #(assoc %1 %2 val) {} sq))","problem":156,"user":"5097ea89e4b087ccf61a7af4"},{"problem":156,"code":"(fn foo\n    ([defval keyz]\n    (zipmap keyz (repeat (count keyz) defval))))","user":"6028365be4b0d5df2af22242"},{"problem":156,"code":"(fn map-default [default key-seq]\n  (zipmap key-seq (repeat default)))","user":"58ed713de4b056aecfd47d84"},{"problem":156,"code":"(fn [default k]\n  (into {} (map #(hash-map % default) k)))","user":"55a3d7c7e4b0acc240e3153d"},{"code":"(fn default-map [vals keys]\r\n  (zipmap keys (repeat (count keys) vals)))","problem":156,"user":"4f20c040e4b0d66497709fcb"},{"problem":156,"code":"(fn [value keys] (apply assoc {} (interleave keys (take (count keys) (repeat value)))))","user":"5839f079e4b089d5ab817d48"},{"problem":156,"code":"(fn map-defaults\n  [value the-seq]\n  (zipmap the-seq (take (count the-seq) (iterate identity value))))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":156,"code":"(fn [x lst] (zipmap lst (repeat x)))","user":"54e540c1e4b024c67c0cf7f9"},{"code":"(fn [x y] (into {}\n                (map #(hash-map % x) y)))","problem":156,"user":"52ce8648e4b07d0d72b27390"},{"problem":156,"code":"(fn [value keys]\n  (into {} (map vector keys (repeat value))))","user":"5483d59fe4b0e286459a1194"},{"code":"#(apply assoc {} `[~@(interpose % %2) ~%])","problem":156,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":156,"code":"#(reduce (fn [new-map ele] (assoc new-map ele %1)) {} %2)","user":"5d67d80be4b0db5d338d15fa"},{"problem":156,"code":"(fn [v coll] \n   (into {}  \n         (map \n           (fn [x y] [x y] ) \n           coll \n           (repeat (count coll) v))))","user":"5e9ff8fbe4b00a66d4a95185"},{"problem":156,"code":"(fn def-assoc [dflt xs] (#(reduce (fn [mp k] (assoc mp k dflt)) {} xs)))","user":"5ef18431e4b07c55ae4a0529"},{"problem":156,"code":"(fn [d k] (reduce conj (map (fn [x] (hash-map x d)) k)))","user":"5e9b6471e4b0157ca96647f0"},{"problem":156,"code":"#(apply conj (conj (for [x %2] [x %1]) {}))","user":"53c38b8ce4b00fb29b22127b"},{"problem":156,"code":"(fn [dv sq] (reduce (fn [m p] (merge m {p dv}) ) {} sq))","user":"60847b29e4b0736b099e42f0"},{"problem":156,"code":"#(apply hash-map (interleave  %2 (vec (repeat (count %2) %1))))","user":"56e6e1e6e4b02e7e935eb6cf"},{"code":"(fn [default keys]\n  (apply hash-map (interleave keys (repeat default))))","problem":156,"user":"4f2cdd42e4b0d6649770a055"},{"problem":156,"code":"(fn [default m] (apply hash-map (interleave m (repeat default))))","user":"56313ff1e4b0bfe05bf1178f"},{"problem":156,"code":"(fn [v keys]\n  (into {}\n        (map #(vector %1 %2)\n             keys\n             (repeat v))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn [v k]\n  (zipmap k (map (fn[x] v) k)))","problem":156,"user":"51899891e4b0288ada3dbdab"},{"code":"(fn [x y] (apply merge (map #(hash-map % x) y)))","problem":156,"user":"4db4714f535dc0f10411755a"},{"code":"(fn [d k]\n  (zipmap k (map (constantly d) k)))","problem":156,"user":"5020692be4b0cb6ebc0a42f6"},{"problem":156,"code":"(fn [default keys]\n   (reduce (fn [new-map key]\n             (assoc new-map key default))\n           {}\n           keys)\n   )","user":"58775496e4b01531a375ea9a"},{"code":"(fn [default-value key-seq] (reduce (fn [m k] (assoc m k default-value)) {} key-seq))","problem":156,"user":"52211978e4b0e6a83c8925bf"},{"problem":156,"code":"(fn [a m] (into {} \n                (for [x m] {x a})\n                )\n  \n)","user":"5cd438c8e4b0ccb061962917"},{"problem":156,"code":"(fn [val keys] (apply (partial assoc {}) (interleave keys (repeat val))))","user":"5e3e23d9e4b01d43a70e8e20"},{"code":"(fn [default allKeys] (apply merge (map #(hash-map %1 default) allKeys)))","problem":156,"user":"529862dfe4b02ebb4ef75055"},{"problem":156,"code":"#(reduce (fn [a v] (assoc a v %1)) {} %2)","user":"5a4de614e4b05d388ecb6bb1"},{"problem":156,"code":"(fn [v, kys ] (zipmap kys (repeat v)))","user":"547c84b5e4b0c51c1f4d72e8"},{"problem":156,"code":"#(->> (map vector %2 (repeat %1)) (into {}))","user":"560e9a2de4b05f002753df52"},{"problem":156,"code":"#(apply assoc {} (mapcat vector %2 (repeat (count %2) %1)))","user":"576a987be4b0a07e8fc1811b"},{"problem":156,"code":"(fn [df k] (zipmap k (repeat (count k) df)))","user":"54b6c24be4b0ed20f4ff6e7c"},{"problem":156,"code":"(fn [value kis]\n  (loop [m {}\n         rem-keys kis]\n    (let [[k & ks] rem-keys]\n      (cond\n        (nil? rem-keys) m\n        :else (recur (assoc m k value) ks)))))","user":"54e79094e4b024c67c0cf818"},{"code":"(fn [a b]\n  (into {}\n    (for [one b]\n      [one a])))","problem":156,"user":"4e7d4544535db169f9c796d0"},{"problem":156,"code":"(fn\n  [val keys]\n  (zipmap keys (into [] (rest (conj (take (count keys) (repeat val)) 6)))))","user":"53d6b266e4b0e771c3025459"},{"problem":156,"code":"#(loop\n    [default %1 key-seq %2 mymap {}]\n    (if (empty? key-seq) mymap \n      (recur default (butlast key-seq) (assoc mymap (last key-seq) default))))","user":"552bc0f5e4b0ffed3738f968"},{"code":"(fn [value li] (reduce #(conj %1 [%2 value]) {} li))","problem":156,"user":"524f4162e4b0541d1855b806"},{"problem":156,"code":"(fn [k li] (apply hash-map (interleave li (repeat k))))","user":"5ec0db8be4b00a66d4a9528d"},{"problem":156,"code":"#(zipmap %2 (repeat %1))\n\n; (fn [v ks] (reduce #(assoc %1 %2 v) {} ks))\n\n; (fn [df ls]\n;  (zipmap ls (repeat df)))","user":"5578f292e4b05c286339e08f"},{"code":"(fn [def-val elems] (reduce #(conj %1 [%2 def-val]) {} elems))","problem":156,"user":"530394b4e4b0d8b024fd3743"},{"problem":156,"code":"(fn [default keys] (reduce (fn [acc e] (assoc acc e default)) {} keys))","user":"55c508f0e4b0e31453f649ac"},{"problem":156,"code":"#(loop [tempkeys %2\n       newkeys {}]\n  (if (empty? (seq tempkeys))\n    (do \n      (println \"Ending\")\n      newkeys)\n    (do\n      (println \"Number is \" tempkeys)\n      (recur (rest tempkeys)(assoc newkeys \n                              (first tempkeys) %1))\n    ))\n  )","user":"55592deae4b0deb715856e32"},{"problem":156,"code":"(fn create-map [v ks]\n  (apply hash-map (mapcat identity (for [x ks] [x v]))))","user":"5649b1b0e4b0284900eef646"},{"code":"(fn [default_arg m] (apply assoc {} (interleave m (repeat default_arg))))","problem":156,"user":"4ea00469535d7eef3080729d"},{"code":"#(reduce (fn [m v]\n            (assoc m v %1))\n        {} %2)","problem":156,"user":"4ff44da6e4b0678c553fc35b"},{"code":"(fn [v key_list] (reduce #(assoc %1 %2 v) {} key_list))","problem":156,"user":"5318594ee4b08068f379ed6d"},{"code":"(fn [d ks] (into {} (for [k ks] [k d])))","problem":156,"user":"50fbf811e4b0d10d794c19f1"},{"code":"(fn map_create [x,y] \n  (reduce merge (map #(hash-map % x) y)))","problem":156,"user":"4fb0c8dde4b081705acca26d"},{"problem":156,"code":"#(reduce (fn [acc key] (conj acc [key %1])) {} %2)","user":"52d38c51e4b099d49816f0c5"},{"code":"(fn [def-val ks] (into {} (map #(vector % def-val) ks)))","problem":156,"user":"516014fde4b0e2be8aa20be1"},{"code":"(fn [default list]\n  (zipmap list (repeat (count list) default)))","problem":156,"user":"520e6d77e4b0101e4be6fcd5"},{"problem":156,"code":"(fn [myval myseq] (reduce #(assoc %1 %2 myval) {} myseq))","user":"5f1aade6e4b091ba50b4dbe4"},{"code":"(fn [val aseq]\n  (loop [s aseq res {}]\n    (if s\n      (recur (next s) (conj res {(first s) val}))\n      res)))","problem":156,"user":"51b3b22ce4b0f094dd986fa7"},{"problem":156,"code":"#(zipmap   %2 (repeat %))","user":"52eaba10e4b09f7907dd14c2"},{"code":"#(loop [result {} value %1 coll %2]\n   (if (empty? coll)\n     result\n     (recur (assoc result (first coll) value) value (rest coll))))\n\n;;#(into {} (map vector %2 (repeat %)))","problem":156,"user":"518ccf6be4b05e6c8537e386"},{"problem":156,"code":"(fn [default-val items]\n\t(reduce (fn [res, item] (conj res {item default-val})) {} items))","user":"57dfab73e4b0bd073c202468"},{"problem":156,"code":"(fn [x l]  (reduce merge (map #(hash-map %  x ) l)))","user":"5e94ff5fe4b0fbed045a37ff"},{"problem":156,"code":"#(loop [defVal %1 col %2 rt {}]\n   (if(empty? col)\n     rt\n     (recur defVal (rest col) (assoc rt (first col) defVal))\n     )\n   )","user":"5d270111e4b092dab7f59c62"},{"code":"(fn [v ks]\n  (reduce conj {} (map (fn [k] {k v}) ks)))","problem":156,"user":"511442d0e4b0e9c109bb74d5"},{"problem":156,"code":"(fn [df kys]\n  (zipmap kys (repeat (count kys) df)))","user":"5670ef43e4b0a866af6896fc"},{"code":"(fn [defVal keys] \n  (apply hash-map (interleave keys (repeat defVal)))\n)","problem":156,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":156,"code":"(fn [default_value keys]\n\t(reduce (fn [result key] (assoc result key default_value)) {} keys))","user":"554a75c9e4b0a04f79299575"},{"problem":156,"code":"(fn [dflt xs] (reduce #(assoc %1 %2 dflt) {} xs))","user":"4eb92051535dfed6da9c6d4c"},{"problem":156,"code":"(fn [value values] (reduce #(into %1 {%2 value}) {} values))","user":"56e4991fe4b03a7c14b85a4f"},{"problem":156,"code":"(fn [n s] ( zipmap s (repeat (count s) n)  ))","user":"56039843e4b04bb52996e1be"},{"code":"(fn [d ks] (zipmap ks (iterate identity d)))","problem":156,"user":"51057b2be4b06d28cacc92e8"},{"code":"(fn initmap [default items]\n  (cond\n    (empty? items) nil\n    :else\n    (merge {(first items) default}\n           (initmap default (rest items))) \n   )\n )","problem":156,"user":"502be4fae4b08f5602f232eb"},{"problem":156,"code":"#(into {} (map (fn [item] {item %1}) %2))","user":"576584c1e4b0994c1922fc0e"},{"problem":156,"code":"(fn [val keys]\n  (into {} (for [x keys] {x val})))","user":"5c6e7cc1e4b0fca0c1622752"},{"problem":156,"code":"(fn addKey [default ve] \n  (into {} (for [x ve] (conj {} [x default])))\n)","user":"56405959e4b08d4f616f5ee1"},{"problem":156,"code":"(fn [e s] \n   (zipmap s (take (.size s) (repeat e)))\n  )","user":"55d7312ee4b0e31453f64a9f"},{"problem":156,"code":"(fn\n  [def-val ks]\n  (reduce #(into %1 {%2 def-val}) {} ks))","user":"56dc5f89e4b0ea9b8538f81e"},{"code":"(fn [default keys] (apply hash-map (interleave keys (repeatedly (constantly default)))))","problem":156,"user":"524be8e0e4b09eba1c0223f1"},{"code":"(fn [default ikeys] (into {} (for [k ikeys] [k default])))","problem":156,"user":"5271605ae4b03e8d9a4a73ed"},{"problem":156,"code":";(reduce f coll)(reduce f val coll)\n(fn [dv s]\n  (reduce #(assoc %1 %2 dv) {} s))","user":"4fc34787e4b081705acca33e"},{"problem":156,"code":"(fn [default, m] (reduce conj {} (map #(assoc nil % default) m)))","user":"54258e71e4b01498b1a71b0e"},{"code":"(fn [v ks]\n  (zipmap ks (repeat v)))","problem":156,"user":"4e7d1c22535db169f9c796c5"},{"problem":156,"code":"(fn [v s]\n  (reduce \n   #(assoc %1 %2 v)\n   {}\n   s))","user":"58ca8a1de4b03c36ff7e5835"},{"problem":156,"code":"(fn\n  [default ks]\n  (apply merge (map #(do {% default}) ks)))","user":"5b7e79f0e4b047b03b203759"},{"problem":156,"code":"(fn [default xs]\n  (reduce (fn [m k] (conj m [k default])) {} xs ))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":156,"code":"(fn[v m]\n(into {} (map\n           (fn [e]\n             {e v})\n           m))  \n  \n )","user":"58f4a3dfe4b0438e51c2cec3"},{"code":"(fn [default keys]\n  (into {}\n    (for [k keys]\n      [k default])))","problem":156,"user":"4f88e3eee4b033992c121c72"},{"code":"(fn defmap\n  [default keyseq]\n  (apply merge\n    (map\n      (fn [k] (hash-map k default))\n      keyseq)\n    )   \n  )","problem":156,"user":"5228f870e4b0186687e23a98"},{"problem":156,"code":"(fn [x y]\n      (loop [accum {} ost y]\n         (if (seq ost)\n         \n         (recur (assoc accum (first ost) x) (rest ost))\n          accum )))","user":"589c8fa6e4b00487982d5365"},{"problem":156,"code":"(fn [v ks] (into {} (map (fn [x] [x v]) ks)))","user":"58791973e4b01531a375eac5"},{"problem":156,"code":"(fn [x,y] (reduce (fn [d, e] (conj d {e x} )) {} y))","user":"54a1d643e4b09f271ff37c50"},{"code":"(fn [val keys] (apply merge (for [k keys] (conj {k val} {}))))","problem":156,"user":"51771cb1e4b085adf681d895"},{"code":"(fn [default ks] (into {} (for [k ks] [k default])))","problem":156,"user":"4e0e0529535d04ed9115e7b9"},{"code":"(fn [d m]\n  (into {}\n   \t(map (fn [k] {k d}) m)))","problem":156,"user":"4f189b42535d64f60314645d"},{"code":"#(reduce (fn [m val] (assoc m val %1)) {} %2)","problem":156,"user":"4ed6c35e535d10e5ff6f52e8"},{"code":"(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))","problem":156,"user":"4ef2eb4d535dced4c769f226"},{"problem":156,"code":"(fn [k v]\n   (zipmap v (into [] (take (count v) (repeat k))) ) \n   )","user":"60845eb8e4b0736b099e42ef"},{"code":"#(zipmap %2 (vec (repeat (count %2) %1)) )","problem":156,"user":"51f81925e4b09be9c177e526"},{"code":"(fn [v k] \n  (reduce merge (map #(assoc {} % v) k)))","problem":156,"user":"50ebf8b6e4b04edc3377703f"},{"code":"(fn [v ks]\n   (reduce #(assoc %1 %2 v) {} ks))","problem":156,"user":"5215661be4b02f6d8ea676c7"},{"problem":156,"code":"(fn [v keys] (into {} (map #(vector % v) keys)))","user":"563f1493e4b08d4f616f5ecf"},{"code":"(fn [default list]\n  (zipmap list (repeat default)))","problem":156,"user":"50d3b03fe4b030b634c368b9"},{"problem":156,"code":"(fn make-map [default values] (if (empty? values) {} (conj {(first values) default} (make-map default (rest values)))))","user":"5509a23ee4b06e50f9beb11a"},{"code":"(fn [default keys] (reduce (fn [map key] (assoc map key default)) {} keys))","problem":156,"user":"52614bc1e4b03e8d9a4a705c"},{"problem":156,"code":"(fn build-map [default keys]\n  (loop [[head & tail] keys\n         res {}]\n    (if (empty? tail)\n      (assoc res head default)\n      (recur tail (assoc res head default))\n      )\n    )\n  )","user":"5dd67c22e4b0948ae9d9ad80"},{"code":"(fn make-map [default-var key-seq]\n  (if (nil? (first key-seq)) nil\n   (conj {(first key-seq) default-var} (make-map default-var (rest key-seq)))))","problem":156,"user":"51cbaf14e4b08d8387cbedda"},{"problem":156,"code":"(fn [value arr] (reduce #(assoc %1 %2 value) {} arr))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":156,"code":"(fn [value v]\n  (zipmap v (repeat value)))","user":"577caf73e4b0c8d87281f6c6"},{"problem":156,"code":"(fn [default keys] (reduce (fn [m key] (conj m [key default])) {} keys))","user":"56d2a103e4b0ea9b8538f7a3"},{"problem":156,"code":"#(loop [x %2  y {}]\n     (if (= ()  x) \n       y\n       (recur (rest x) (merge  y  { (first x) %1} ))\n     )\n   )","user":"55b76000e4b01b9910ae29a2"},{"code":"(fn [v ks]\n  (reduce (fn [acc k] (assoc acc k v)) {} ks))","problem":156,"user":"4f77b68de4b0fbe0118ec581"},{"problem":156,"code":"(fn [v ks] \n  (into {} \n        (map (fn [k] [k v]) ks)))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"code":"#(zipmap (reverse %2) (repeat %))","problem":156,"user":"531d36ace4b08068f379edad"},{"code":"(fn f [v ks] (if-not (empty? ks) (conj {(first ks) v} (f v (rest ks)))))","problem":156,"user":"5035503de4b0ed9c821488f8"},{"problem":156,"code":"(fn [d xs] (into {} (map vector xs (repeat d))))","user":"54d03026e4b018d918be98de"},{"problem":156,"code":"(fn [default items] (into {} (map #(hash-map % default) items)))","user":"57e2e1bde4b0bfb2137f5a8f"},{"code":"(fn[v m] (into {} (map #(vector % v) m)))","problem":156,"user":"53347274e4b0656e627bfd6b"},{"code":"(fn [elem coll]\n        (reduce #(assoc %1 %2 elem ) {} (reverse coll)))","problem":156,"user":"4f9f9ff5e4b0dcca54ed6d3a"},{"problem":156,"code":"(fn [d c]\n  (->> d (repeat 3) (interleave c) (apply hash-map)))","user":"5676af21e4b05957ce8c6158"},{"problem":156,"code":"(fn [default sequenc]\n  (apply hash-map\n         (reduce (fn [x y]\n                   (conj x default y)) '() sequenc)))","user":"5595ffabe4b0c79f6e1db972"},{"problem":156,"code":"#(apply hash-map (apply concat (map (fn [x] (list x %1)) %2)))","user":"53e2b212e4b036ad0777e3f4"},{"code":"(fn [d seq]\n  (reduce #(merge %1 (hash-map %2 d)) {} seq))","problem":156,"user":"50254dace4b0b0b8afb15aa6"},{"code":"(fn [v coll]\n  (reduce conj\n    (map (fn [k] {k v}) coll)))","problem":156,"user":"4f3242bae4b0d6649770a08f"},{"code":"(fn [df, keys] (zipmap keys (repeat (count keys) df)))","problem":156,"user":"51aab611e4b04e3dc0c27b2d"},{"code":"(fn [o t] (into {} (for [e t] [e o])))","problem":156,"user":"539c9e26e4b0b51d73faaf2e"},{"problem":156,"code":"(fn [k  llist]\n      (zipmap llist (repeat (count llist) k) )\n      )","user":"5d6d3182e4b04d129b00f2bb"},{"problem":156,"code":"(fn\t[default keyz]\n\t(apply merge (vec (map #(hash-map % default) keyz))))","user":"5afb3426e4b0cc2b61a3bcf5"},{"problem":156,"code":"(fn [v ks]\n  (apply assoc {} (interleave ks (repeat v))))","user":"5a6af090e4b0512ff01cda2d"},{"code":"(fn me [d l]\n(if (empty? l)\n{}\n(assoc (me d (rest l)) (first l) d)\n)\n)","problem":156,"user":"4fc7b079e4b0ee37620e1827"},{"code":"(fn [x y] (reduce merge (map #(hash-map % x) y)))","problem":156,"user":"4ea09d5c535d7eef308072a9"},{"code":"(fn defmap\n  ([default k] (defmap default k {}))\n  ([default k acc] \n    (if (empty? k)\n      acc\n      (defmap default (rest k) (assoc acc (first k) default)))))","problem":156,"user":"53110f32e4b08068f379ece4"},{"code":"(fn [v xs] \n         (into {} (map (fn [a b]\n                [a b])\n              xs\n              (repeat v))))","problem":156,"user":"4db58ccb535d87e67b28fe10"},{"code":"(fn [default items] (into {} (map #(hash-map %2 %) (repeat default) items)))","problem":156,"user":"52efc98de4b05e3f0be25ed2"},{"problem":156,"code":"(fn [valx keyx]\n  (loop [result {}\n         keyz keyx]\n    (if (empty? keyz)\n      result\n      (recur\n       (assoc result (first keyz) valx)\n       (rest keyz))\n      )\n    )\n  )","user":"5db9a6c3e4b010eb3c36cd56"},{"problem":156,"code":";(fn [a b] {:a 0 :b 0 :c 0})\n(fn tes [a b] \n  (apply assoc {} \n  (interleave b (repeat a))\n  ) \n  )","user":"541ddadbe4b01498b1a71a84"},{"problem":156,"code":"#(apply hash-map (apply concat (map vector %2 (repeat %1))))","user":"56679f30e4b04acd4f672dda"},{"code":"(fn [d y] (apply hash-map(apply concat(map #(list % d)y))))","problem":156,"user":"533b1611e4b0e30313ee6cc6"},{"code":"(fn [ default-value  seq-of-keys ] \n    (zipmap  seq-of-keys  ( repeat  (count seq-of-keys)  default-value ))\n)","problem":156,"user":"4fdf750be4b05e33b9224f9c"},{"problem":156,"code":"(fn defm [defval mkeys] \n  (if (= mkeys ()) \n    {}\n    (let [rmkeys (rest mkeys) fmkey (first mkeys)]\n      (assoc (defm defval rmkeys) fmkey defval))))","user":"5d81c244e4b0915913b1d37a"},{"code":"(fn [v s]\n  (into {} (map (fn [k] [k v]) s)))","problem":156,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":156,"code":"(fn my-default [d1 s1] (if (not (nil? (first s1))) (conj {(first s1) d1} (my-default d1 (rest s1)))))","user":"5795dbe0e4b0e215f87e848c"},{"problem":156,"code":"(fn\n   [default keyset]\n   (into {} (map #(into {} {% default}) keyset)))","user":"548efcb6e4b0e286459a122a"},{"problem":156,"code":"(fn [d xs]\n  (let [dv (vec (repeat (count xs) d))]\n    (zipmap xs dv)))","user":"55e7fc2ce4b0121d4835fd86"},{"problem":156,"code":"(fn [d m] (reduce #(assoc %1 %2 d) {}  m))","user":"583048d9e4b051871117c007"},{"code":"(fn [x coll] (zipmap coll (repeat x)))","problem":156,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":156,"code":"(fn md [d m] (into {} (map #(vector % d) m)))","user":"53bd476ae4b0d9a98559a6ca"},{"problem":156,"code":"(fn [def_val key_list] (into {} (map #(vector % def_val) key_list)))","user":"5c03e927e4b0bdcf453d167b"},{"code":"(fn map-defaults- [v keys]\r\n  (apply hash-map (interleave keys (repeat v))))","problem":156,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":156,"code":"(fn constMap [d, m]\n  (reduce #(merge %1 {%2 d}) {} m))","user":"56eff7c1e4b04a395b9a0468"},{"problem":156,"code":"(fn map-def [v ks]\n  (apply hash-map (interleave ks (repeat v))))","user":"575b3e9be4b02ea11479935b"},{"problem":156,"code":"(fn[v s](apply hash-map (interleave s (repeat v))))","user":"54641bdbe4b01be26fd746cb"},{"problem":156,"code":"(fn [d l] (->> l (map #(vec (list % d))) (into {})))","user":"4f033c99535dcb61093f6a7e"},{"problem":156,"code":"(fn [v lst] (reduce (fn [acc curr] (assoc acc curr v)) {} lst))","user":"5938bca5e4b02506e01a29eb"},{"code":"(fn [default seq]\n  (apply merge (map (fn [x] (hash-map x default)) seq)))","problem":156,"user":"53415755e4b00652c8746ecd"},{"problem":156,"code":"( fn map-merge\n  ( [lmap ks v]\n    (if (first ks)\n      (assoc (map-merge lmap (rest ks) v) (first ks) v)\n      lmap))\n  ( [v ks] (map-merge {} ks v)))","user":"56dc3dbbe4b0ea9b8538f81a"},{"problem":156,"code":"#(reduce conj (map (fn [x] {x %}) %2))","user":"54cd9519e4b057c6fda3a2a6"},{"problem":156,"code":"#(reduce (fn [new-map k] (assoc new-map k %1)) {} %2)","user":"57515f94e4b02ea114799287"},{"code":"#(apply hash-map (interleave %2 (repeat (count %2) %)))","problem":156,"user":"4fb5033ce4b081705acca2b5"},{"problem":156,"code":"(fn [d lst] (into {} (for [item lst] [item d])))","user":"5666c2dbe4b04acd4f672dc3"},{"code":"(fn foo [v coll]\n  (reduce merge (map #(hash-map % v) coll)))","problem":156,"user":"521bf7cfe4b0c4ef0be83066"},{"problem":156,"code":"(fn [v s] (apply hash-map (interleave s (repeat v))))","user":"56baab13e4b0f26550335948"},{"code":"(fn \n   ([d coll]\n     (reduce #(assoc %1 %2 d) {} coll)\n   )\n)","problem":156,"user":"51d28e15e4b0d13b04db0d9b"},{"problem":156,"code":"(fn [x c] (reduce #(conj %1 [%2 x]) {} c))","user":"55e1d34ae4b050e68259b421"},{"code":"(fn [d x] (zipmap x (repeat (count x) d)))","problem":156,"user":"50e8ff6be4b0ebbe794eb7f3"},{"problem":156,"code":"(fn maxi\n   ([value key]\n    (maxi value key {}))\n   ([value key dic]\n    (if (empty? key)\n      dic\n      (maxi value (rest key) (assoc dic (first key) value)))\n    )\n   )","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":156,"code":"(fn [v keys] \n  (into {} (map #(assoc {} %1 v) keys)))","user":"608ec5e4e4b03bd49d9f36c0"},{"code":"(fn mkmap\n  ([default keys] (mkmap default keys {}))\n  ([default keys result]\n     (if (empty? keys)\n      result\n      (mkmap default (rest keys) (assoc result (first keys) default)))))","problem":156,"user":"4fe89efae4b07c9f6fd12c5b"},{"problem":156,"code":"(fn [k v] \n  (reduce merge (map #(hash-map % k) v))\n)","user":"55a59ebae4b0acc240e3154d"},{"code":"(fn [default s] (into {} (for [k s] {k default})))","problem":156,"user":"4ded56bb535d08e6dec9fe0b"},{"problem":156,"code":"(fn [default-value keys]\n  (into {} (map #(vector % default-value) keys)))","user":"599b3844e4b07157cc8dab1d"},{"code":"(fn [default keysvec]\n   (apply hash-map\n          (reduce concat\n           (map\n            (fn [k] [k default])\n            keysvec)\n           )\n          )\n   )","problem":156,"user":"51a0dae0e4b0b292b01ee3fa"},{"problem":156,"code":"(fn [e ks] (into {} (map (fn [k] [k e]) ks)))","user":"57c94c54e4b05aa3c4741d2c"},{"problem":156,"code":"(fn [x,m] (apply hash-map (interleave m (repeat x))))","user":"51e8736ae4b006d205356a4f"},{"problem":156,"code":"#(let [m (atom {})]\n  (doseq [x %2]\n           (swap! m conj {x %1}))\n  @m)","user":"5b780a8ce4b047b03b2036f6"},{"code":"#(into {} (map (fn [k] {k %}) %2))","problem":156,"user":"52b5edd1e4b0c58976d9ad3c"},{"code":"(fn [ke arr]\n  (apply array-map \n    (loop [k ke a arr ret '()]\n      (if (= (count a) 0)\n        (reverse ret)\n        (recur \n          k\n          (rest a)\n          (conj (conj ret (first a)) k)\n        )\n      )\n    )\n  )\n)","problem":156,"user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn [k col] (apply merge (map #(identity {% k}) col)))","problem":156,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn [dv col] (reduce #(assoc %1 %2 dv) {} col))","problem":156,"user":"4fd29d7ce4b04c3a95aa0424"},{"problem":156,"code":"(fn [defVal arr] (reduce (fn [acc v] (conj acc {v defVal})) {} arr))","user":"5ec82b11e4b08d0ec38692e6"},{"code":"(fn [default indices] (into {} (map #(vector % default) indices)))","problem":156,"user":"519273c3e4b08962174cf744"},{"problem":156,"code":"(fn default-map [d ks]\n  (apply assoc {} (interleave ks (repeat d))))","user":"602d5eade4b0d5df2af22279"},{"problem":156,"code":"(fn [default xs] (apply conj (map (fn [x] (hash-map x default)) xs)))","user":"5f6c331ae4b02876ed9fd054"},{"code":"#(loop [m {} seq %2]\n  (if (= seq '())\n    m\n    (recur (conj m (vector (first seq) %1))\n            (rest seq))))","problem":156,"user":"4faec810e4b081705acca24e"},{"code":"(fn [x y] (apply hash-map (mapcat (fn [k1] [k1 x]) y)))","problem":156,"user":"5123cbbae4b061b4c6f0e0b5"},{"problem":156,"code":"(fn [default ks]\n  (reduce conj (map (fn [x] {x default}) ks)))","user":"4dad6fcb8e77d6ed59f12a44"},{"code":"#(into {} (map vector %2 (repeat %1)))","problem":156,"user":"4fa6d532e4b081705acca1be"},{"problem":156,"code":"(fn buildMap [single_val map_keys] ((fn innerBuild [map list]  (if (> (count list) 0)  (innerBuild (assoc map (first list) (second list) ) (drop 2 list) ) map)   ){} (interleave map_keys (repeat (count map_keys) single_val)) ) )","user":"58622733e4b0f14aab7c8803"},{"problem":156,"code":"(fn [a b] \n  (reduce #(assoc %1 %2 a) {} b)\n  )","user":"5e284f94e4b05b4b01516196"},{"problem":156,"code":"(fn [v k]\n  (zipmap k (into [] (repeat (count k) v))))","user":"587f8393e4b0f1effa3b75f2"},{"code":"(fn [d v]\n  (zipmap v (repeat (count v) d)))","problem":156,"user":"4f9d87fce4b0dcca54ed6d24"},{"problem":156,"code":"(fn [val col] (reduce #(assoc %1 %2 val) {} col))","user":"5cec2b79e4b0a17bb84e2bf4"},{"problem":156,"code":"(fn [x y]\n  (loop [tmp y result {}]\n    (if (empty? tmp)\n      result\n      (recur (rest tmp)(into result (array-map (first tmp) x)))\n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"code":"#(apply hash-map (interleave %2 (repeat %1 ) ))","problem":156,"user":"524025bce4b0ad64fa01030f"},{"problem":156,"code":"(fn [d c] (reduce #(into % {%2 d}) {} c))","user":"5339b53fe4b0e30313ee6cac"},{"problem":156,"code":"(fn\n  [default-val key-list]\n  ; for all in key-list, associate default val\n  (into {} (map vector key-list (repeat default-val))))","user":"59234753e4b0a390037439ef"},{"code":"(fn [d v]\n  (reduce #(assoc %1 %2 d) {} v))","problem":156,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":156,"code":"#(into {} (for [i %2 ] [i %1]))","user":"5f0c3da4e4b0f30dddfb5d49"},{"problem":156,"code":"(fn [v kv] (into (sorted-map) (map (fn [v2] [v2 v]) kv)))","user":"54dc2c3ae4b024c67c0cf77d"},{"code":"(fn [v xs]\r\n  (reduce #(into %1 (hash-map %2 v)) {} xs))","problem":156,"user":"4dd59d8b535dae65d5c462eb"},{"problem":156,"code":"(fn [default keys] (into {} (map (fn [k] [k default]) keys)))","user":"5d4f21f3e4b0776584bd6f4e"},{"problem":156,"code":"(fn [def-val ks] (reduce #(assoc %1 %2 def-val) {} ks))","user":"5c87d2cbe4b048ec896c591c"},{"problem":156,"code":"(fn [default mymap] (zipmap mymap (repeat default)))","user":"504f0c9ce4b0e7ad84dbc4b2"},{"code":"(fn [v k] (into {} (map #(vector % v) k)))","problem":156,"user":"4e3f480c535dc968683fc497"},{"problem":156,"code":"(fn [d xs] (into {} (map (fn [x] [x d]) xs)))","user":"559b55d6e4b066d22e731f54"},{"problem":156,"code":"(fn [defvalue keys-list]\n  (reduce (fn [hm k] (assoc hm k defvalue)) {} keys-list)\n  \n  )","user":"5e6b9955e4b04a83ad7cd27b"},{"code":"(fn [default-value keys] \n   (apply merge (map #(hash-map % default-value) keys)))","problem":156,"user":"4ffee245e4b0678c553fc3f8"},{"code":"(fn [val keys] (zipmap  keys (repeat (count keys) val)))","problem":156,"user":"503e52aae4b06c4e0e1fa265"},{"problem":156,"code":"(fn [d keys] (zipmap keys (vec( repeat (count keys) d ) ) ))","user":"55c2367ee4b0e31453f64978"},{"problem":156,"code":"(fn [d m1]\n  (reduce \n   (fn [m2 e]\n     (conj (hash-map e d) m2))\n   {}\n   m1))","user":"53fe1b42e4b0de5c418485f1"},{"code":"(fn [x y]\n  (apply hash-map (interleave y (iterate (fn [x] x) x))))","problem":156,"user":"52b0323ee4b0c58976d9acc6"},{"code":"(fn [d vs] (into  {} (for [v vs] (vector v d))))","problem":156,"user":"5050b107e4b063148f524126"},{"problem":156,"code":"(fn [val keycoll] (into {} (for [x keycoll] {x val})))","user":"5e257a33e4b05b4b01516166"},{"problem":156,"code":"(fn [x v] (reduce #(assoc % %2 x) {} v))","user":"584ad64ce4b089d5ab817eef"},{"problem":156,"code":"#(into {} (map (fn [x] (vector x %)) %2))","user":"544fbabce4b0e39780006999"},{"problem":156,"code":"(fn [default m] (reduce (fn [n k] (assoc n k default)) {} m))","user":"554dff83e4b00713264bd98d"},{"problem":156,"code":"(fn [default myMap]\n  (->> (vec (map #(vec [%1 default]) myMap)) (into {}) )\n)","user":"55efc44ee4b066087aa9453e"},{"code":"#(into {} (for [v %2] [v %1]))","problem":156,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn [d s] (into {} (for [x s] [x d])))","problem":156,"user":"5166b491e4b060c690c1f4be"},{"problem":156,"code":"(fn [default keyseq]\n  (zipmap keyseq (map (fn [x] default) keyseq)))","user":"53fc88e7e4b0de5c418485be"},{"problem":156,"code":"#(into {} (for [a %2] [a %]))","user":"53e8e42ce4b036ad0777e48e"},{"code":"(fn [default values]\n  (apply hash-map (interleave values (repeat default))))","problem":156,"user":"4ffb43b9e4b0678c553fc3ca"},{"code":"(fn [d k]\n  (reduce merge (for [x k] {x d})))","problem":156,"user":"5255b719e4b0541d1855b9ef"},{"code":"(fn [defval lst] (apply (partial assoc {}) (interleave lst (repeat defval))))","problem":156,"user":"51c214bce4b0d204dbe2ca1c"},{"problem":156,"code":"#(zipmap %2 (repeat %1))\n;(fn [default ks] (reduce #(conj %1 [%2 default]) {} ks))","user":"5cfee28de4b0cc9c91588185"},{"problem":156,"code":"#(loop [in %2\n        out {}]\n   (if (empty? in)\n     out\n     (recur (rest in)\n     \t(conj out {(first in) %1}))))","user":"5895385fe4b00487982d5279"},{"code":"(fn [d s] (apply conj (for [k s] {k d})))","problem":156,"user":"506b18c8e4b0a2a5463de383"},{"problem":156,"code":"(fn [v ks] \n  (reduce merge \n         (flatten (map #(hash-map % v) ks))))","user":"5360578ee4b0243289761e35"},{"problem":156,"code":"(fn [default keys]\n (apply \n  merge (map (fn [key] {key default}) keys)))","user":"54580586e4b01be26fd74616"},{"code":"(fn [v ks]\n  (reduce (fn [ret this] (assoc ret this v)) {} ks))","problem":156,"user":"513cb853e4b0b86ece9f322b"},{"problem":156,"code":"(fn map-def [def-val seq-of-keys]\n\n(reduce #(assoc %1 %2 def-val) {} seq-of-keys)\n\n)","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn [d k]\n  (reduce #(assoc %1 %2 d) {} k))","problem":156,"user":"500900dee4b0144d4f561e42"},{"problem":156,"code":"(fn [val list]\n  (into {} (for [x list] {x val})))","user":"560d2bf5e4b05f002753df39"},{"code":"(fn x [default keys]\n  (if (empty? keys)\n    {}\n    (assoc (x default (rest keys)) (first keys) default)))","problem":156,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":156,"code":"(fn  rr [default values]\n  (apply hash-map (interleave values (repeat default)))\n)","user":"55b3e8aee4b01b9910ae2977"},{"problem":156,"code":"(fn [v k] (reduce #(conj %1 [%2 v]) {} k))","user":"4f5eda39e4b0030a34fb2b56"},{"problem":156,"code":"#(into {} (for [x %2] [x, %1]))","user":"54202a4fe4b01498b1a71a9f"},{"problem":156,"code":"(fn [val, keys] (zipmap keys (repeat val)))","user":"550da0c7e4b06e50f9beb15e"},{"problem":156,"code":"(fn mat-default [v ks]\n  (reduce (fn [m k]\n            (assoc m k v))\n          {}\n          ks))","user":"5895477fe4b00487982d527c"},{"problem":156,"code":"(fn [n coll]\n  (apply assoc {} (mapcat #(vector % n) coll)))","user":"55aa8276e4b0988bba2ad94e"},{"problem":156,"code":"(fn a[d k] ( if (first k) ( conj (a d (rest k)) (hash-map (first k) d) ) {} ) )","user":"5b3aa98be4b02d533a91bbca"},{"code":"#(zipmap %2(repeat %))","problem":156,"user":"4e1fe7f1535d04ed9115e810"},{"problem":156,"code":"(fn [def-val key-vals] (reduce merge (for [key key-vals] (apply #(conj %1 %2) {} {key def-val}))))","user":"52b9e920e4b07a9af57922c9"},{"problem":156,"code":"(fn maps\n  [x lst]\n  (into '{} (map (fn [y] (hash-map y x))lst)))","user":"5c7dad57e4b0d597f478caba"},{"code":"(fn [y x] (zipmap x (repeat y)))","problem":156,"user":"528f1057e4b0239c8a67aeec"},{"code":"(fn [df ks]\n  (zipmap ks (repeat df)))","problem":156,"user":"4f2e0369e4b0d6649770a064"},{"problem":156,"code":"(fn [x, v] (zipmap v (replicate (count v) x)))","user":"53e1e1f1e4b0d874e779ae5e"},{"code":"#(apply hash-map (mapcat (fn [k] [k %1]) %2))","problem":156,"user":"531619c1e4b08068f379ed3d"},{"problem":156,"code":"(fn [val key-seq]\n  (apply assoc {} \n         (interleave key-seq (repeat (count key-seq) val))))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn [de col] (zipmap col (repeat (count col) de)))","problem":156,"user":"5318f85ae4b08068f379ed76"},{"problem":156,"code":"#(reduce conj {} (for [v [%1] k %2] [k v]) )","user":"59c76402e4b0a024fb6ae542"},{"problem":156,"code":"(fn [x,y] (into {} (map #(vector % x) y)))","user":"52bf78cde4b07a9af5792339"},{"code":"(fn [def-val coll] (apply hash-map (interleave coll (repeat (count coll) def-val))))","problem":156,"user":"5264301fe4b03e8d9a4a70ca"},{"code":"(fn [x y] (apply array-map (interleave y (take (count y) (repeat x)))))","problem":156,"user":"52016690e4b0b2e020a18f0f"},{"problem":156,"code":"(fn default [values keys] (zipmap keys (repeat values)))","user":"5f081f6de4b0cf489e8d7f5a"},{"problem":156,"code":"(fn [default coll] (reduce (fn [x y] (assoc x y default)) {} coll))","user":"577a444be4b0d3393e5deaf5"},{"problem":156,"code":"(fn addval [v ks]\n  (if (seq ks)\n    (assoc (addval v (rest ks)) (first ks) v)\n  )        \n)","user":"546ce5f1e4b00cfc9eacc187"},{"problem":156,"code":"#(apply assoc {} (mapcat list %2 (repeat %1)))","user":"59449aa2e4b0b03edd0057ad"},{"problem":156,"code":"(fn [v col]\n  (into {} (for [x col] {x v})))","user":"57df309ee4b0bd073c20245f"},{"problem":156,"code":"(fn [d ks ] (zipmap ks (repeat (count ks) d)))","user":"55d44dd6e4b0e31453f64a75"},{"problem":156,"code":"(fn [x coll]\n   (reduce (fn [acc it]\n             (assoc acc it x))\n           nil\n           coll))","user":"5808ee16e4b0a837a8b30d16"},{"code":"(fn [d km]\n  (into {}\n  (map #(vector % d) km)))","problem":156,"user":"51b793d3e4b0d906fcd71d38"},{"problem":156,"code":"(fn [v coll]\n  ( let [mymap {}]\n    ( ->> coll\n      (map (fn[x]( assoc mymap x v )) )\n      (into {})\n     )\n    )  \n  )","user":"5d8aad1ce4b0915913b1d3cd"},{"code":"(fn \n  [v ks]\n    (reduce #(assoc %1 %2 v) {} ks))","problem":156,"user":"500cc693e4b05f7c30cfa69a"},{"code":"(fn [d s] (zipmap s (take (count s) (repeat d))))","problem":156,"user":"52939bd1e4b0239c8a67af41"},{"problem":156,"code":"(fn [x col] (reduce conj (map #(assoc {} % x) col)))","user":"579aff09e4b05b1deef9ade7"},{"code":"(fn ss [default arr]\n  (let [xx (fn xx [hmap arr]\n    (if (empty? arr) hmap\n          (xx (assoc hmap (first arr) default) (rest arr))))]\n    (xx (hash-map) arr)))","problem":156,"user":"4f0478b0535dcb61093f6bcb"},{"code":"(fn\n  [d seq]\n  (let [c (count seq)\n        r (repeat c d)\n        i (interleave seq r)]\n    (apply assoc {} i)\n    ))","problem":156,"user":"51f805b0e4b06ff1c25c52e2"},{"problem":156,"code":"(fn [default coll] (reduce #(conj %1 {%2 default}) {} coll))","user":"5da8b8ece4b000c986472c28"},{"problem":156,"code":"(fn [x coll] (into {} (for [y coll] [y x])))","user":"542dc7c7e4b0dad94371f2bd"},{"code":"(fn [default ks] \n  (apply merge \n   (map #(hash-map %1 default) ks)\n   ))","problem":156,"user":"50facb80e4b07934dda8b0d2"},{"problem":156,"code":"(fn [def-val vect]\n  (reduce \n    #(assoc %1 %2 def-val)\n    nil\n    vect))","user":"55f73078e4b06e875b46cea4"},{"code":"(fn [x v] (into {} (for [elt v] (vector elt x))))","problem":156,"user":"4f92de49e4b0dcca54ed6cb2"},{"code":"(fn new-map [default keys] (zipmap keys (map (fn [x] default) (range (count keys)))))","problem":156,"user":"4fd8544be4b0dab7d829f390"},{"code":"(fn [d xs] (zipmap xs (iterate identity d)))","problem":156,"user":"4dd61f98535d2dad7130b5c6"},{"problem":156,"code":"#(zipmap (reverse %2) [%1 %1 %1])","user":"54db8d27e4b024c67c0cf765"},{"code":"(fn [v ks]\n  (into {} (map (fn [k] [k v]) ks)))","problem":156,"user":"511c91ace4b00c2a1fa7ff7a"},{"problem":156,"code":"(fn mapify [x y]\n  (if (empty? y)\n    ()\n    ; not empty\n    (conj {(first y) x} (mapify x (rest y)))\n    )\n)","user":"5e38b324e4b01d43a70e8dc3"},{"code":"(fn [v s] (zipmap s (repeat (count s) v)))","problem":156,"user":"50b29029e4b03ea880433563"},{"code":"(fn [default keys]\n  (reduce (fn [acc, key] (conj acc [key default])) \n    {}\n    keys))","problem":156,"user":"50a93b6de4b0a9a42786e8e0"},{"problem":156,"code":"(fn [default xs]\n(loop [default default\n       values xs\n       map-thing {}]\n     (if (seq values)\n         (recur default (rest values) (assoc map-thing (first values) default))\n         map-thing)))","user":"5953053ce4b066ee0a44aeda"},{"code":"(fn [x xs] (reduce #(conj % [%2 x]) {} xs))","problem":156,"user":"51846567e4b02826a645f399"},{"code":"#(apply merge (map hash-map %2 (repeat %)))","problem":156,"user":"52e75667e4b09f7907dd1485"},{"code":"(fn [dv keys]\n  (into {}\n    (for [k keys] [k dv])))","problem":156,"user":"527cd633e4b0757a1b17136f"},{"problem":156,"code":"(fn [default keys]\n  (reduce #(assoc %1 %2 default)\n          {}\n          keys))","user":"50eb4c32e4b0346a3e988cbf"},{"problem":156,"code":"(fn [x y] (apply hash-map (interleave y (-> (count y) (repeat x)))))","user":"54e1939ce4b024c67c0cf7c5"},{"code":"(fn [default values] (zipmap values (repeat default)))","problem":156,"user":"4ddbd934535d02782fcbe9fc"},{"problem":156,"code":"(fn [val arr]\n  (reduce #(conj %1 {%2 val}) {} arr))","user":"5e2586afe4b05b4b01516167"},{"problem":156,"code":"(fn [value keys]\n  (loop [keys keys res {}]\n    (if (empty? keys)\n      \tres\n      \t(recur (rest keys) (assoc res (first keys) value))\n      )\n \t)\n)","user":"5e09fd26e4b099d064962f60"},{"problem":156,"code":"(fn[d v] (zipmap v ( repeat d )))","user":"5a455ddde4b05d388ecb6b3b"},{"problem":156,"code":"(fn [default origin] \n  (into {} (map #(vector\n         % default) origin)))","user":"5e7fb908e4b085ba37836e3f"},{"problem":156,"code":"(fn [v ks] (zipmap ks (repeat 3 v)))","user":"57e070fde4b0bd073c202478"},{"problem":156,"code":"(fn [default keys] (into {} (for [key keys] [key default])))","user":"58aae714e4b01a0c0b23298e"},{"code":"(fn [default vec]\n  (apply assoc\n         {}\n         (interleave vec\n                     (repeat default))))","problem":156,"user":"52b65f26e4b0c58976d9ad43"},{"problem":156,"code":"(fn [dftVal mapKeys] \n   (apply hash-map (reduce concat (map #(list % dftVal) mapKeys)))\n)","user":"5a424954e4b0447ef91cc5f0"},{"problem":156,"code":"(fn construct [v m]\n  (reduce merge (map #(hash-map % v) m)))","user":"5c0ebca5e4b01240ff567147"},{"problem":156,"code":"(fn f156\n  [dv kys]\n  (loop [ks kys\n         mp {}]\n    (if (empty? ks)\n      mp\n      (recur (rest ks) (assoc mp (first ks) dv)))))","user":"5bd75870e4b0ed4b8aab4bc0"},{"problem":156,"code":"#(apply merge (for [x %2] (assoc nil x %1)))","user":"5688a01be4b0dcc4269f406d"},{"code":"(fn [a col]\n  (zipmap col (repeat a)))","problem":156,"user":"534e4a29e4b084c2834f4ab0"},{"problem":156,"code":"(fn [default _keys] (into (hash-map) (map #(vec [%1 default]) _keys)))","user":"563536f8e4b0bfe05bf117c5"},{"problem":156,"code":"(fn [x xs]\n  (reduce #(assoc % %2 x) {} xs)\n)","user":"563cdfdfe4b0bfe05bf11840"},{"problem":156,"code":"(fn [default keyseq]\n  (reduce #(assoc % %2 default) {} keyseq))","user":"55a62092e4b0acc240e31554"},{"code":"(fn [var s] (reduce #(assoc % %2 var) {} s ))","problem":156,"user":"536046a9e4b063bf7a5f8fe1"},{"problem":156,"code":"#(reduce (fn[acc k](assoc acc k %)) {} %2)","user":"5b6473eee4b0c6492753e73f"},{"problem":156,"code":"(fn [d k] (apply conj {} (map (fn [x] {x d}) k)))","user":"5f2c02d1e4b033932238a65f"},{"problem":156,"code":"(fn map-defaults [default keys]\n  (into {} (map (fn [key] [key default]) keys)))","user":"5c3ac091e4b0d62ef62d9f95"},{"code":"#(into{}(map(fn[x][x%1])%2))","problem":156,"user":"4f296a80e4b0d6649770a02a"},{"problem":156,"code":"(fn [x y] (zipmap y  (vec (replicate (count y) x))))","user":"585481e0e4b07779d46863fe"},{"problem":156,"code":"(fn [defVal coll] (zipmap coll (repeat (count coll) defVal)))","user":"598af379e4b02b9968b84ce6"},{"code":"(fn [d ks]\n  (apply hash-map (mapcat #(do [% d]) ks)))","problem":156,"user":"510b0480e4b078ea719210fa"},{"problem":156,"code":"(fn [value keys]\n  (into {}\n        (map vector \n             keys\n             (repeat (count keys) value))))","user":"54b5ce67e4b05787c3b163ac"},{"code":"(fn [defValue coll] \n  (reduce conj\n   (map \n     (fn [x] {x defValue})\n     coll)))","problem":156,"user":"50c13f77e4b096f585049c3b"},{"problem":156,"code":"(fn sf\n  ([a coll] (sf a coll {}))\n  ([a coll my-map]\n   (if (zero? (count coll))\n     my-map\n     (sf a (rest coll) (assoc my-map (first coll) a)))))","user":"6033f8e9e4b0d5df2af222c6"},{"problem":156,"code":"(fn [v vs] (reduce #(conj %1 [%2 v]) {} vs))","user":"5cee521ce4b0aaa82f1129dd"},{"problem":156,"code":"(fn [value keys] (into {} (for [i keys] [i value])))","user":"546a70bae4b00cfc9eacc159"},{"problem":156,"code":"(fn [v ks] (into {} (map #(do [% v]) ks)))","user":"55b6a63ae4b01b9910ae299b"},{"code":"(fn [value collection] \n  (zipmap collection (repeat value)))","problem":156,"user":"52616198e4b03e8d9a4a705e"},{"code":"(fn [key vals] (into {} (map #(hash-map % key) vals)))","problem":156,"user":"52655949e4b03e8d9a4a710b"},{"problem":156,"code":"(fn [defaultVal keys] \n    (loop [result {} keysToInsert keys] \n        (if (= (count keysToInsert) 0)\n            result\n            (recur (assoc-in result [(first keysToInsert)] defaultVal) (rest keysToInsert))\n        )\n    )\n)","user":"57dd2c99e4b0bd073c20243c"},{"code":"(fn [default coll]\n  \t(loop [result {} \n       \t   [x & xs] coll]\n    \t(if (not (nil? x))\n          (recur (conj {x default} result) xs)\n      \t  result)))","problem":156,"user":"4ea85ecf535d7eef308072fa"},{"code":"(fn [default coll]\n  (into {} (map #(vector % default) coll)))","problem":156,"user":"500ff421e4b0ae202717946f"},{"problem":156,"code":"(fn assoc-defaults [default-value keys-sequence]\n  (reduce #(assoc %1 %2 default-value) {} keys-sequence))","user":"56742817e4b05957ce8c612d"},{"code":"(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))\n\n;; or\n\n;#(zipmap %2 (repeat %1))","problem":156,"user":"51d11f5de4b067c365486360"},{"problem":156,"code":"(fn [x, y] (zipmap y (repeat x)))","user":"5a67030ce4b0512ff01cd9d8"},{"problem":156,"code":"(fn [default keys]\n\t(reduce #(assoc %1 %2 default) {} keys))","user":"5416b4a2e4b01498b1a71a01"},{"code":"(fn [x y]\n(reduce #(assoc %1 %2 x) '{} y))","problem":156,"user":"4f1c2336535d64f60314647f"},{"problem":156,"code":"(fn [def_val keys]\n\t\t(loop [x keys y (repeat (count keys) def_val) m {}]\n\t\t\t(if (not (nil? (first x)))\n\t\t\t(recur (rest x)(rest y) (assoc m (first x) (first y)) )\n\t\t\tm)\n\t\t\t))","user":"560331dee4b04bb52996e1b5"},{"problem":156,"code":"(fn test [a1 a2] (loop [a3 a2 acc {}] (if (empty? a3) acc (recur (rest a3) (assoc acc (first a3) a1)))))","user":"5720ba36e4b0c5bde472c09c"},{"code":"(fn [dft mp] (apply merge (for [item mp] (hash-map item dft))))","problem":156,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":156,"code":"(fn [def-value def-keys]\n  (reduce (fn [def-map def-key] (assoc def-map def-key def-value)) {} def-keys))","user":"5da9662ce4b000c986472c30"},{"problem":156,"code":"(fn [d v]\n  (into (hash-map) (map #(assoc {} % d) v)))","user":"56ebfb93e4b04a395b9a042e"},{"problem":156,"code":"(fn [v km]\n  (let [vs (vector v)]\n    (apply merge (for [x vs\n                       y km]\n                   {y x}))))","user":"5a1149ace4b04bbd27e6da26"},{"code":"(fn r [d m] \n   (if (empty? m)\n     {}\n     (merge {(first m) d} (r d (rest m)))))","problem":156,"user":"525cc137e4b0cb4875a45d46"},{"code":"#(apply hash-map (apply concat ((fn [e c] (for [x c] [x e])) %1 %2)))","problem":156,"user":"5370b386e4b0fc7073fd6e9b"},{"problem":156,"code":"(fn [default seq] (reduce conj (let [newlist {}] (map (fn [key] (assoc newlist key default)) (reverse seq))) ))","user":"54570c87e4b080a794c2c887"},{"code":"(fn [default col]\n  (apply hash-map (interleave col (repeat default)))\n  )","problem":156,"user":"5204f2b1e4b0bf4f1882c7f5"},{"problem":156,"code":"(fn default-map [d keys]\n  (loop [m {}, ks keys]\n    (if (empty? ks)\n      m\n      (recur (conj m (vector (first ks) d)) (next ks)))))","user":"5b975c6ee4b0c0b3ffbd4a91"},{"problem":156,"code":"(fn [x y] (into {} (map vector y (loop [i (count y) result []] (if (> i 0) (recur (- i 1) (conj result x)) result)))))","user":"5d4256bae4b05dd059a5437d"},{"problem":156,"code":"#( into {} (map vector %2 (repeat %1) ))","user":"5ddbd202e4b0948ae9d9adb4"},{"problem":156,"code":"(fn [default xs] (zipmap xs (repeat default)))","user":"53bd6ad0e4b0d9a98559a6cf"},{"problem":156,"code":"(fn f [v lst]\n  (if (empty? lst)\n    {}\n    (conj (f v (rest lst)) {(first lst) v})))","user":"5c62979fe4b0fca0c162264c"},{"code":"(fn [value keys]\n  (reduce (fn [accu key] (assoc accu key value)) {} keys))","problem":156,"user":"4e82c062535db62dc21a62cc"},{"problem":156,"code":"(fn default_map [value keys]\n  (if (> (count keys) 0)\n      (assoc (default_map value (rest keys)) (first keys) value )\n      {}))","user":"51a0370ae4b0b292b01ee3ef"},{"code":"(fn [x m]\n  (reduce #(conj % {%2 x}) {} m))","problem":156,"user":"4e68ed35535d8ccf87e9fe92"},{"code":"(fn [dflt s] (zipmap s (repeat dflt)))","problem":156,"user":"4f951375e4b0dcca54ed6cc8"},{"code":"(fn [value data] (loop [d data\n                        v value\n                        m {}]\n                     (if (empty? d)\n                       m\n                       (recur (rest d) v (conj m {(first d) v})))))","problem":156,"user":"50214ffae4b0ef1d2d4433bc"},{"problem":156,"code":"(fn [val kseq] \n  (reduce (fn [m k] (into m {k val})) \n          '{} \n          kseq))","user":"53576356e4b04ce2eb3ed27a"},{"problem":156,"code":"(fn [value v]\n  (reduce (fn [acc x] (assoc acc x value)) \n           {}\n          v))","user":"5b9db58be4b0c0b3ffbd4b41"},{"code":"(fn [i c]\n  (into {}\n        (map #(assoc {} % i) c)))","problem":156,"user":"5042bb9ae4b034ff00315d16"},{"code":"(fn [d s]\n  (into {} (map #(vector %1 d) s)))","problem":156,"user":"4fcf642ee4b03432b189f410"},{"problem":156,"code":"(fn [default-v ks] (reduce (fn [m k] (assoc m k default-v)) {} ks))","user":"4f0f3725535d0136e6c22337"},{"problem":156,"code":"(fn [default ks]\n  #_(into {} (map #(vector % default) ks))\n  (into {} (for [k ks] [k default])))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":156,"code":"(fn helper-func \n  ([default-val coll] (helper-func default-val coll {}))\n  ([default-val coll the-map] (if (empty? coll) \n                                 the-map \n                                 (helper-func default-val (rest coll) (assoc the-map (first coll) default-val)\n                                              )\n                                 )\n   )\n  )","user":"5564709ee4b0c656e3ff1807"},{"problem":156,"code":"(fn [v l] \n  (loop [cl l\n         m  {}]\n    (if (nil? cl)\n      m\n      (recur (next cl) (into m {(first cl) v})))))","user":"56051095e4b08b23635d3162"},{"code":"(fn [v xs]\n  (reduce #(assoc %1 %2 v) {} xs))","problem":156,"user":"4e71a12c535d5021c1a8964f"},{"problem":156,"code":"(fn [x m] (apply merge (map #(hash-map % x) m)))","user":"54f3d6c7e4b050824f58f5cb"},{"problem":156,"code":"(fn [default keys]\n  (reduce #(apply (partial assoc %1) %2)\n          {}\n          (map (fn [k] [k default]) keys)))","user":"53e76363e4b036ad0777e47b"},{"problem":156,"code":"(fn [x s] (reduce #(assoc % %2 x) {} s))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"#(apply hash-map (mapcat (partial conj (list %1)) %2))","problem":156,"user":"5040edf4e4b0ff5d2cc40db5"},{"problem":156,"code":"(fn map-defualt [default coll]\n  (into {} (for [c coll] {c default})))","user":"541096bde4b01498b1a719b2"},{"problem":156,"code":"(fn [a b] (merge (into {} (map #(assoc {} %1 %2) b (repeat a)))))","user":"572010a4e4b0c5bde472c08c"},{"problem":156,"code":"#(apply hash-map (mapcat vector %2 (repeat %1)))","user":"5f2c94b4e4b033932238a669"},{"code":"(fn [v ks] (into {} (for [k ks] {k v})))","problem":156,"user":"4eecc9ad535d93acb0a668b4"},{"code":"(fn [v coll]\n  (into {} (for [x coll] {x v})))","problem":156,"user":"51377188e4b04059df19f303"},{"problem":156,"code":"(fn [default seq] (reduce (fn[acc i] (conj acc [i default])) {} seq))","user":"5895fd90e4b00487982d528f"},{"code":"(fn [defval keys]\n  (reduce (fn [m k] (assoc m k defval))\n          {}\n          keys))","problem":156,"user":"52b94e26e4b07a9af57922b9"},{"problem":156,"code":"(fn [value kss]\n  (loop [[k & ks] kss\n         res {}]\n    (if (nil? k)\n      res\n      (recur ks (assoc res k value)))\n  )\n)","user":"5d07989ee4b0cc9c915881fb"},{"code":"(fn [val, keys] (apply merge (map (fn [key] {key val}) keys)))","problem":156,"user":"50ed3c6be4b01236b1d4983b"},{"code":"(fn [v xs] (reduce #(assoc % %2 v) {} xs))","problem":156,"user":"51b2e850e4b026427ecf067b"},{"code":"(fn [v ks] (reduce #(conj %1 [%2 v]) {} ks))","problem":156,"user":"4ee85476535d93acb0a6687c"},{"problem":156,"code":"(fn default-vals [d ks] (zipmap ks (repeat (count ks) d)))","user":"56481722e4b0284900eef628"},{"code":"(fn [x y]\n  (zipmap y (repeat x)))","problem":156,"user":"52474133e4b05ef8e38e635e"},{"problem":156,"code":"(fn[d coll] (reduce #(into %1 {%2 d}) {} coll))","user":"5e29cb4ce4b05b4b015161ae"},{"problem":156,"code":"(fn w [v ks2]\n  (loop [m {} ks ks2]\n    (if-not (empty? ks)\n      (recur (assoc m (first ks) v) (rest ks))\n      m)))","user":"5cc74e44e4b0ccb061962833"},{"problem":156,"code":"(fn [dval ks] (reduce (fn [m k] (assoc m k dval)) {} ks))","user":"6037e468e4b0d5df2af222e8"},{"problem":156,"code":"(fn [e lis]\n  (apply merge (map #(hash-map % e) lis))\n  \n  )","user":"58384bc4e4b089d5ab817d27"},{"code":"(fn foo [val keys]\n  ((fn bar [val keys map]\n    (if (empty? keys)\n        map\n        (bar val (rest keys) (assoc map (first keys) val))))\n  val keys {}))","problem":156,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"code":"(fn [d m] (into {} (map (fn [k] [k d]) m)))","problem":156,"user":"5207d70ae4b03bd50ef54675"},{"problem":156,"code":"(fn [d xs]\n  (reduce (fn [m k] (assoc m k d)) {} xs))","user":"4ff24a1ae4b0678c553fc337"},{"problem":156,"code":"(fn mappy-default [default seq]\n  (into {} (map (fn [x] {x default}) seq)))","user":"6036b21ce4b0d5df2af222de"},{"code":"(fn [x, y] (zipmap y (iterate (fn [x] x) x\n                              )))","problem":156,"user":"5396c9a8e4b0b51d73faaee4"},{"problem":156,"code":"(fn [default keycoll]\n  (into {} (map #(vector % default) keycoll)))","user":"55f03fb5e4b06e875b46ce1f"},{"code":"(fn [default key-map] (apply merge (map #(hash-map % default) key-map)))","problem":156,"user":"52d885afe4b09f7907dd1398"},{"code":"(fn [defval someseq]\n  (zipmap (reverse someseq) (repeat (count someseq) defval)))","problem":156,"user":"4eee3e6a535d93acb0a668c3"},{"problem":156,"code":"(fn [def-val coll] (reduce #(conj %1 [%2 def-val]) {} coll))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn [default ks] (reduce #(assoc % %2 default) {} ks))","problem":156,"user":"4e7e8485535db169f9c79716"},{"code":"(fn [d xs] \n  (loop [m {}\n         xs xs]\n    (if (empty? xs)\n      \tm\n   \t  \t(recur (assoc m (first xs) d) (rest xs)))))","problem":156,"user":"51febd40e4b0f1313d468a76"},{"problem":156,"code":"(fn [default-value coll]\n  (apply hash-map (interleave coll (repeat default-value))))","user":"54b817eee4b0ed20f4ff6e93"},{"code":"(fn [d m] (zipmap m (map (fn [x] d) m)))","problem":156,"user":"5360b327e4b0243289761e38"},{"code":"(fn n156\n  [default ks]\n  (into {} (map #(vector % default) ks)))","problem":156,"user":"4e7f32ee535db966e863cc3a"},{"problem":156,"code":"(fn [d ke] (zipmap ke (repeat d)))","user":"578f5122e4b0ebec4cfb7592"},{"code":"(fn [x xs]\n  (let [pairs (for [a xs]\n                [a x])]\n    (apply hash-map (reduce concat pairs))))","problem":156,"user":"50bf6f93e4b0ffd967a66cbf"},{"code":"(fn [elt coll]\n  (apply hash-map (interleave coll (repeat (count coll) elt)))\n  )","problem":156,"user":"526698c9e4b03e8d9a4a7144"},{"code":"(fn [k m]\n  (zipmap m (repeat k)))","problem":156,"user":"4f4544e1e4b0d56e7bb92b7a"},{"code":"(fn [default sq]\n   (reduce\n     #(assoc % %2 default)\n     {}\n     sq))","problem":156,"user":"50f1dedbe4b0897c4366dcd8"},{"problem":156,"code":"(fn [d coll]\n  (reduce #(assoc %1 %2 d) {} coll))","user":"5863eda2e4b0f14aab7c8836"},{"problem":156,"code":"(fn [dflt sqnc] (zipmap sqnc (into [] (replicate (count sqnc) dflt))))","user":"55929e89e4b0604b3f94d58e"},{"problem":156,"code":"(fn[n coll] (->> coll\n      (map #(hash-map % n))\n      (into {})))","user":"5da76a58e4b000c986472c1b"},{"code":"(fn [d ks]\n  (reduce (fn [m e] (merge m e)) {} (map (fn [k] [k d]) ks)))","problem":156,"user":"5003deb9e4b0678c553fc445"},{"problem":156,"code":"(fn [x coll]\n  (zipmap coll (repeat x)))","user":"500e6ddee4b04a05d36fcc06"},{"problem":156,"code":"(fn [def-val my-keys]\n  (zipmap my-keys (repeat (count my-keys) def-val)))","user":"591e0782e4b09b4ee5954c25"},{"code":"(fn [value to-vec]\n  (reduce conj (map #(do {% value}) to-vec)))","problem":156,"user":"50c4baa6e4b0210b849018b0"},{"problem":156,"code":"(fn [default ks]\n  (into {} (map #(assoc {} % default) ks)))","user":"510a3cd4e4b06956752d35ad"},{"code":"(fn [default keyArray]\n  (reduce #(assoc %1 %2 default) {} keyArray))","problem":156,"user":"4f329974e4b0d6649770a093"},{"problem":156,"code":"(fn [x y] \n  (zipmap y (take (count y) (repeat x))))","user":"4f3c772de4b0e243712b1f4c"},{"code":"(fn [d k] (zipmap k (repeat (count k)  d)))","problem":156,"user":"504e9011e4b069badc5a33b7"},{"code":"(fn defaults [v ks]\n  (zipmap ks (repeat v)))","problem":156,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":156,"code":"(fn default-map [d coll]\n     (apply hash-map (interleave (reverse coll) (repeat d))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":156,"code":"(fn [default values] (reduce (fn [p n] (assoc p n default)) {} values))","user":"57e10705e4b0bfb2137f5a6a"},{"problem":156,"code":"(fn [x z] (zipmap z (repeat (count z) x)))","user":"57b9bfdae4b0fbc9809a27f5"},{"code":"#(reduce merge (map (fn [k] {k %1}) %2))","problem":156,"user":"511b900ae4b00c2a1fa7ff6a"},{"code":"(fn setDefs [d keys]\n   (loop [remainingKeys keys,\n          finalMap {}]\n     (if (empty? remainingKeys)\n       finalMap\n       (recur (rest remainingKeys) (assoc finalMap (first remainingKeys) d)))))","problem":156,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":156,"code":"(fn [dv ks] (reduce(fn [acc v] (conj (hash-map v dv) acc)) {} ks))","user":"58ffaddee4b0438e51c2cffe"},{"code":"#(loop [a %1 b %2 c {}]\n  (if (empty? b)\n      c\n      (recur a (rest b) (conj c (hash-map (first b) a)))))","problem":156,"user":"4ffe8193e4b0678c553fc3f4"},{"problem":156,"code":"(fn [value keywords]\n  (->> keywords (map (fn [key] [key value])) (into (sorted-map))))","user":"5cf2863be4b0aaa82f112a21"},{"problem":156,"code":"#(loop [coll %2\n        map1 {}]\n  (if (empty? coll)\n    map1\n    (recur (rest coll) (conj map1 {(first coll) %1}))))","user":"55eeeb81e4b0121d4835fdf7"},{"problem":156,"code":"(fn [v ks] \n  (reduce (fn [m k] (assoc m k v)) {} ks))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn f [x coll]\n  (into {} \n        (map #(vector % %2) coll (repeat (count coll) x))))","problem":156,"user":"51750cd4e4b07031762f2ee5"},{"problem":156,"code":"(fn map-defaults\n  [init-value init-keys]\n  ;; 0 and [:a :b :c]\n  (loop [default-map {}\n         key-set init-keys]\n    (if (empty? key-set)\n      default-map\n      (recur \n        (assoc default-map (first key-set) init-value)\n        (rest key-set)))))","user":"5a3c06fce4b001c08efc0cdd"},{"problem":156,"code":"(fn ff [x [f & l]] (if-not l {f x} (conj (ff x l) {f x})))","user":"55deeface4b050e68259b3ea"},{"problem":156,"code":"#(apply array-map (loop [s %2, r []]\n\t\t\t\t\t(if (empty? s)\n\t\t\t\t\t\tr\n\t\t\t\t\t\t(recur (rest s) (conj r (first s) %1)))\n\t\t\t\t\t))","user":"568cea39e4b0dcc4269f40bc"},{"problem":156,"code":"(fn [x y] (apply merge (map #(assoc {} % x) y)))","user":"52ee9ac7e4b05e3f0be25ec9"},{"problem":156,"code":"#(reduce merge (map (fn [arg1 arg2] (assoc {} arg1 arg2)) %2 (repeat %1)))","user":"54b2ec84e4b09f271ff37d33"},{"problem":156,"code":"(fn [default ks] (loop [d default\n                        k ks\n                        m {}]\n                   (if (nil? (first k))\n                     m\n                     (recur d (rest k) (conj m [(first k) d])))))","user":"5753b6c6e4b02ea1147992af"},{"code":"#(apply hash-map \n  (interleave %2 (repeat (count %2) %1)))","problem":156,"user":"4fc9a977e4b0ee37620e1847"},{"problem":156,"code":"#(loop [oldT %2\n       tab {}]\n   (if (not (first oldT))\n     tab\n     (let [newTab (conj tab [(first oldT) %1])]\n     (recur (next oldT) newTab))))","user":"5a7f77fae4b00b71e582a041"},{"problem":156,"code":"(fn [default v]\n  (into {} (map vector v (repeat default))))","user":"53a55de5e4b0b62ce3005739"},{"code":"(fn [v k] (loop [v v k k m {}]\n  (if (zero? (count k))\n    m\n    (recur v (rest k) (assoc m (first k) v)))))","problem":156,"user":"50ba81bfe4b03e68e4411c8f"},{"problem":156,"code":"(fn map-def\n  [default-value key-seq] \n  (zipmap key-seq (take (count key-seq) (repeat default-value))))","user":"52f3a2afe4b05e3f0be25f13"},{"problem":156,"code":"(fn [value items]\n  (reduce #(assoc %1 %2 value) {} items))","user":"5bcf0b1be4b0e9689409ee24"},{"problem":156,"code":"(fn [val keys]\n\t(reduce conj {} \n            (zipmap keys \n                    (repeat (count keys) val))))","user":"55e856bae4b0121d4835fd8d"},{"problem":156,"code":"(fn map-defaults [v coll]\n  (reduce #(assoc % %2 v) {} coll))","user":"5693a53ee4b0dcc4269f4106"},{"problem":156,"code":"(fn [v kk] \n  (into {} (map #(vector % v) kk)))","user":"54af6fb0e4b09f271ff37d08"},{"problem":156,"code":"(fn([default ks] (apply hash-map (interleave ks (vec (repeat (count ks) default))))))","user":"5e8ce2fee4b0cb0169546328"},{"problem":156,"code":"(fn [dval keys] \n  (zipmap keys (repeat dval)))","user":"5786c182e4b0ebec4cfb74fd"},{"problem":156,"code":"(fn [v l] (reduce (fn [acc x] (assoc acc x v)) {}  l))","user":"4f066916535dcb61093f6c10"},{"problem":156,"code":"(fn [default keyz]\n  (apply hash-map (interleave keyz (repeat default)))\n  )","user":"53ed6976e4b0d648e757f4c4"},{"code":"(fn [default xs] \n  (apply\n    hash-map\n    (interleave xs (repeat default))))","problem":156,"user":"5089ebfee4b03217b26a539f"},{"problem":156,"code":";#(into (hash-map) (for [x %2] (hash-map x %1)))\n;#(apply merge (for [x %2] (hash-map x %1)))\n(fn [key vals] (reduce #(conj %1 {%2 key}) {} vals))","user":"5a257747e4b07f18be40aa1f"},{"code":"#(into {} (map vector %2 (repeat (count %2) % )))","problem":156,"user":"52f8b2a2e4b047fd55836fda"},{"code":"(fn [x l] (reduce #(assoc %1 %2 x) {} l))","problem":156,"user":"504e72cee4b0f6ff3350c4b4"},{"code":"(fn [a b]\n  (reduce #(assoc %1 %2 a) {} b))","problem":156,"user":"4f73f78de4b044e54cd9a8f3"},{"code":"( fn [v coll] (reduce #(assoc %1 %2 v) {} coll) )","problem":156,"user":"52628bb0e4b03e8d9a4a7089"},{"code":"(fn [x y] (into {} (for [v y] {v x})))","problem":156,"user":"4eb44d78535d7eef30807360"},{"code":"(fn [d xs] (reduce #(assoc %1 %2 d) {} xs))","problem":156,"user":"5161eb8fe4b009fba0926e3b"},{"problem":156,"code":"(fn [default keys] (apply hash-map (mapcat (fn [x] [x default]) keys)))","user":"50eafeaae4b0346a3e988cbb"},{"code":"(fn [default key-set]\n  (reduce conj {} (map #(hash-map % default) key-set)))","problem":156,"user":"50b19a91e4b03ea880433552"},{"code":"#(reduce (fn [m v] (assoc m v %1)) {} %2 )","problem":156,"user":"4f69f34fe4b07046d9f4ef90"},{"problem":156,"code":"(fn [d col] \n  (apply merge \n         (map #(hash-map % d) col)))","user":"5a999e5ae4b0d174b936c7a2"},{"problem":156,"code":"(fn [value coll] (apply merge (map #(hash-map % value) (seq coll))))","user":"59c180e4e4b0a024fb6ae489"},{"problem":156,"code":"(fn [value key-lst]\n  (zipmap key-lst\n          (repeat (count key-lst) value)))","user":"57f7fef6e4b0d3187e90090b"},{"code":"(fn[value keys](zipmap keys (repeat (count keys) value)))","problem":156,"user":"4fd0b0bde4b04c3a95aa0406"},{"code":"(fn [d l] (reduce #(conj %1 [%2 d]) {} l))","problem":156,"user":"4faae01ae4b081705acca206"},{"problem":156,"code":"(fn foo [val keys]\n  (loop [k keys map {}]\n    (if (empty? k)\n        map\n        (recur (rest k) (conj map [(first k) val])))))","user":"5fb8fe30e4b03f550f448223"},{"problem":156,"code":"#(zipmap %2 (for [x (range (count %2))] %))","user":"53d0d7a9e4b00fb29b22130c"},{"problem":156,"code":"(fn [default coll]\n  (reduce (fn [m k] (assoc m k default)) {} coll))","user":"5e357507e4b0650de70e2b2a"},{"problem":156,"code":"(fn [a b]\n  (loop [l b m {}]\n    (if (empty? l)\n      m\n      (recur (rest l) (assoc m (first l) a)))))","user":"57ff52c7e4b0d3187e9009ea"},{"code":"#(reduce (fn[acc,item] (assoc acc item %1)) {} %2)","problem":156,"user":"513f53c6e4b051389b345b40"},{"code":"(fn [v k] (apply merge (map #(hash-map % v) k)))","problem":156,"user":"50ae0d24e4b0a40c9cfb08ce"},{"problem":156,"code":"#(into {} (map (fn [i] [i %1]) %2))","user":"56d68cbae4b0ea9b8538f7cd"},{"code":"(fn [d ks] (zipmap ks (repeat d)))","problem":156,"user":"4f0da4e4535d0136e6c22319"},{"problem":156,"code":"(fn [v m] (reduce #(conj %1 [%2 v]) {} m))","user":"56795deae4b05957ce8c6187"},{"problem":156,"code":"(fn map-default-val [defaultval mapkeys]\n    (zipmap mapkeys (repeat defaultval)))","user":"587bead1e4b01531a375eb0d"},{"problem":156,"code":"(fn [df lst] (into {} (map #(vector % df) lst)))","user":"54dc9ba1e4b024c67c0cf785"},{"code":"(fn [default keylist]\n  (zipmap\n   keylist\n   (map (fn [_] default) keylist)))","problem":156,"user":"4f8d340be4b02e764a0a51a8"},{"problem":156,"code":"(fn [default kys]\n  (reduce conj\n    (map hash-map kys (cycle (conj [] default)))\n  )\n)","user":"5fe876ade4b05ac5b16ea195"},{"code":"(fn [x y] (loop [coll y res {}] (if (empty? coll) res (recur (rest coll) (assoc res (first coll) x)))))","problem":156,"user":"4f47d84fe4b0d56e7bb92bc3"},{"code":"(fn [val keys] (apply assoc {} (interleave keys (repeat val))))","problem":156,"user":"513d121fe4b0e544971636a2"},{"code":"(fn [k m] \n  (reduce (fn [tmp-map x] (assoc tmp-map x k)) {} m))","problem":156,"user":"5224a46ce4b01819a2de42e5"},{"problem":156,"code":"(fn [dflt col]\n  (reduce (fn [new-map key]\n              (assoc new-map key dflt) )\n            {}\n            col)\n            \n  )","user":"59b0e877e4b0e1f4e384c8d3"},{"problem":156,"code":"#(apply hash-map (mapcat list %2 (repeat %1)))","user":"570243c4e4b08d47c97781dc"},{"code":"(fn [a b]\n  (reduce conj (map #(assoc {} % a) b)))","problem":156,"user":"52112be7e4b07aea8afc4f68"},{"code":"(fn [defv keys]\n  (let [c (count keys)]\n    (zipmap keys (repeat c defv))))","problem":156,"user":"50e135f4e4b084616e11c667"},{"problem":156,"code":"#_  #(reduce (fn [m k] (assoc m k %)) {} %2)\n\n;; and other version:\n#(apply hash-map (interleave %2 (repeat (count %2) %)))\n\n;; and using mapcat and a more intention-revealing verbosity:\n#_ (fn default-map-vals \n    [default-val coll]\n    (apply hash-map (mapcat (fn [k v] [k v]) coll (repeat (count coll) default-val))))","user":"5553b729e4b0deb715856e05"},{"problem":156,"code":"(fn [default a-list]\n  (into {}\n        (map #(vector %1 %2) a-list (repeat (count a-list) default))))","user":"56b18445e4b0982f16b37dee"},{"problem":156,"code":"(fn [d k] (apply hash-map(interleave k (repeat d))))","user":"58eba5cce4b056aecfd47d41"},{"problem":156,"code":"(fn\n  [v ks]\n  (zipmap ks (cycle [v])))","user":"548749cee4b0e286459a11c4"},{"code":"(fn [x y] \n  (loop [map {} keys (reverse y)] \n\t(if (empty? keys)\n\t      map \n\t      (recur (conj map {(first keys) x}) (rest keys))\n\t      ) \n   )\n  )","problem":156,"user":"52cc7c40e4b07d0d72b27364"},{"code":"(fn [x y] (reduce (fn [a b] (assoc a b x)) {} y))","problem":156,"user":"526fce6fe4b03e8d9a4a7383"},{"problem":156,"code":"(fn [v keyz] (zipmap keyz (take (count keyz)(repeat v))))","user":"5510f734e4b06e50f9beb18f"},{"problem":156,"code":"#(reduce (fn [rez value] (conj rez [value %1])) {} %2)","user":"5795f1f1e4b0e215f87e8490"},{"code":"(fn [x col]\n  (reduce #(conj %1 {%2 x}) {} col))","problem":156,"user":"4db2cc55535df7e46ed9b6c5"},{"code":"(fn [d v] (into {} (map #(hash-map % d) v)))","problem":156,"user":"4db21d14535d37964ddf999c"},{"problem":156,"code":"(fn [default maps]\n  (zipmap maps (repeat default)))","user":"5ec88d1fe4b08d0ec38692ea"},{"code":"(fn [default keys] (apply merge (map hash-map keys (repeat default))))","problem":156,"user":"52579668e4b0cb4875a45c8c"},{"code":"(fn [d s] (into {} (map #(vector % d) s)))","problem":156,"user":"523b1988e4b02f719975bdbc"},{"code":"(fn [dval keys] (into {} (map #(vector % dval) keys )))","problem":156,"user":"4fa1aabee4b0dcca54ed6d61"},{"problem":156,"code":"#(zipmap %2 (vec (replicate (count %2) %1)))","user":"55fc07d3e4b0f488688e066e"},{"problem":156,"code":"(fn [defvalue coll]\n\t(into {} (vec (map vec (partition 2 (interleave coll (repeat (count coll) defvalue)))))))","user":"514799d8e4b0541f4bec05cf"},{"problem":156,"code":"(fn \n  [dv kys]\n  (reduce #(assoc %1 %2 dv) {} kys)\n  )","user":"53ce1daee4b00fb29b2212ec"},{"problem":156,"code":"(fn[a l](into (sorted-map) (map #(hash-map % a) l)))","user":"5e1ec8c0e4b0dc9594008561"},{"code":"(fn [v ks] (zipmap ks (vec (repeat (count ks) v))))","problem":156,"user":"5280539ce4b0757a1b1713f3"},{"problem":156,"code":"(fn [default, k_list] (\n    into {} (map #(vector ((constantly %)) ((constantly default))) k_list)\n  )\n)","user":"57064231e4b0b0fb43fd067a"},{"code":"(fn [x s] (reduce #(assoc %1 %2 x) {} s))","problem":156,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":156,"code":"(fn [a b] (into {} (map vector b (repeat a) ) ) )","user":"57b1a72fe4b0fbc9809a2755"},{"problem":156,"code":"(fn [x y]\n\t(into {} (mapv #(vector %1 %2) y (repeat x))))","user":"5251d3c1e4b0541d1855b87f"},{"code":"(fn [x l] (reduce #(conj %1 [%2 x]) {} l))","problem":156,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":156,"code":"(fn [default-value keys] (into {} (for [x keys] {x default-value})))","user":"5880d686e4b0f1effa3b7623"},{"problem":156,"code":"#(zipmap %2 (map (fn [& _] %) %2))","user":"5a3d7afae4b0447ef91cc5a6"},{"code":"(fn [default keyz]\n  (into {} (for [k keyz]\n        \t [k default])))","problem":156,"user":"52890634e4b0239c8a67ae5e"},{"problem":156,"code":"(fn[v coll] (zipmap coll (repeat (count coll) v)))","user":"555c6344e4b0b056612e224c"},{"code":"(fn\n  [value coll]\n  (reduce #(assoc % %2 value) {} coll)\n )","problem":156,"user":"51a4d802e4b0def3c5c5869a"},{"problem":156,"code":"(fn [x y] (apply merge (map (fn [b] (hash-map b x)) y)))","user":"57c447d9e4b05aa3c4741ccc"},{"problem":156,"code":"(fn [def-val coll] (apply merge (for [cur-el coll] {cur-el def-val})))","user":"57c7cef5e4b05aa3c4741d0d"},{"code":"(fn [default keyz]\n  (apply merge (map (fn [x] (hash-map x default) ) keyz) )\n)","problem":156,"user":"4f031e58535dcb61093f6a66"},{"code":"#(apply hash-map (conj (into [] (interpose %1 %2)) %1))","problem":156,"user":"521af66be4b0c4ef0be8301b"},{"problem":156,"code":"#(apply merge (map (fn [x] {x %}) %2) )","user":"55a31c66e4b0acc240e31530"},{"problem":156,"code":"(fn [a b]\n  (loop [y b result {}]\n    (if (not= [] y)\n      (recur (rest y) (conj result {(first y) a}) )\n      result)))","user":"594b3459e4b07ddc2dafae23"},{"problem":156,"code":"(fn make-default-map\n   [v -keys]\n   (reduce #(assoc %1 %2 v) {} -keys))","user":"545e9cf1e4b01be26fd7467f"},{"problem":156,"code":"(fn [d keys]\n  (into {} (map (fn [k] [k d]) keys)))","user":"60a39b80e4b00e9e6653c450"},{"problem":156,"code":"(fn [v ks]\n (apply merge\n   (map #(conj {} [%2 %1]) (repeat v) ks)) )","user":"5e62c405e4b0fd0acd15869b"},{"problem":156,"code":"(fn map-defaults\n  [n seq]\n  (apply hash-map (interleave seq (repeat n))))","user":"608c270ae4b03bd49d9f36b3"},{"code":"(fn [default coll]\n  (loop [result {}\n         c coll]\n    (if (empty? c)\n      result\n      (recur (assoc result (first c) default) (rest c)))))","problem":156,"user":"4f159ea6535d64f603146445"},{"code":"#(into{}(map vector %2(repeat %)))","problem":156,"user":"50ed4626e4b01236b1d4983c"},{"code":"(fn [x l] (reduce #(assoc % %2 x) {} l))","problem":156,"user":"52265e41e4b04e78ff2e1981"},{"problem":156,"code":"(fn [d m]\n  (reduce (fn [acc, val] (assoc acc val d)) {} m))","user":"5eeb03dde4b029a2061bbeca"},{"problem":156,"code":"#(into {} (map (juxt identity (constantly %1)) %2))","user":"51456858e4b0e88796073408"},{"problem":156,"code":"#(loop [res {} v %2]\n    (if (empty? v) \n      res\n      (recur (assoc res (first v) %1) (rest v))\n      ))","user":"5cbd5b42e4b026601754b9f6"},{"code":"(fn this [v ks]\n  (loop [KS ks\n         m (hash-map)\n         _ (println (if (empty? (rest KS)) \"return\" \"recur\"))]\n    (if (empty? KS) m \n      (recur (rest KS) (conj m (hash-map (first KS) v)) (println (if (empty? (rest KS)) \"return\" \"recur\"))))))\n\n\n#_(fn this [v ks & [m]]\n  (let [m (if (empty? m) \n            (hash-map (first ks) v) \n            (conj m (hash-map (first ks) v)))]\n    (if (empty? (rest ks)) m\n      (this v (rest ks) m))))","problem":156,"user":"51e5a627e4b0efabf93c02db"},{"problem":156,"code":"(fn no156\n  ([x keys] (no156 x keys []))\n  ([x keys ans] (if (empty? keys) (apply array-map ans)\n                  (no156 x (rest keys) (concat ans (concat [(first keys)] [x]))))))","user":"55630cc1e4b0c656e3ff17e0"},{"problem":156,"code":"(fn [init coll]\n  (zipmap coll (repeat init)))","user":"54ae541ae4b09f271ff37cef"},{"code":"(fn [default keylist]\n  (apply hash-map (interleave keylist\n               (take (count keylist) \n                     (cycle [default])))))","problem":156,"user":"5313a2bfe4b08068f379ed0b"},{"problem":156,"code":"(fn [d a]\n  (into {} (map #(vector % d) a))\n  )","user":"577a4dc2e4b0d3393e5deaf6"},{"code":"(fn [x liste] (apply assoc {} (interleave liste (take (count liste) (repeat x)))))","problem":156,"user":"51c09719e4b0c9c82288293c"},{"problem":156,"code":"#(apply hash-map (-> (interpose %1 %2) (conj %1) (reverse)))","user":"52e5f810e4b09f7907dd1468"},{"problem":156,"code":"(fn make-def-map\n[default vec]\n(reduce (fn [x y] (assoc x y default)) {} vec)\n)","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":156,"code":"(fn my-map-defaults [default vs]\n  (loop [[x & rxs :as xs] vs\n         m {}]\n    (if (empty? xs)\n      m\n       (recur rxs (assoc m x default)))))","user":"54a31fdae4b09f271ff37c64"},{"code":"(fn [default-value key-sequence]\n  (zipmap key-sequence (repeat default-value)))","problem":156,"user":"4db30879535df7e46ed9b6cb"},{"code":"(fn toto [d c]\n  (apply array-map (interleave c (repeat d))))","problem":156,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":156,"code":"(fn [d keys]\n  (reduce (fn [m k]\n            (assoc m k d))\n          {}\n          keys))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":156,"code":"(fn [def-val the-keys]\n  (letfn [(mapper [def-val the-keys]\n  (if (= 0 (count the-keys))\n    nil\n    (merge {(first the-keys) def-val} (mapper def-val (rest the-keys)))))] \n    (mapper def-val the-keys)\n  ))","user":"56eb16d8e4b04a395b9a041d"},{"problem":156,"code":"(fn [k v] (apply hash-map (mapcat #(vector %1 k) v)))","user":"550bf2bee4b06e50f9beb14b"},{"code":"(fn [m v k] (if (empty? k) m (recur (merge m (hash-map (first k) v)) v (rest k)))) (hash-map)","problem":156,"user":"503ff621e4b0c9bf6384b00f"},{"problem":156,"code":"(fn [default alist] (reduce (fn [r t] (assoc r t default)) {} alist))","user":"53571732e4b04ce2eb3ed275"},{"problem":156,"code":"(fn [a b ] (apply hash-map (interleave b (repeat a)) ))","user":"54edfebbe4b024c67c0cf869"},{"problem":156,"code":"(fn [d m]\n   (reduce (fn [m1 a] (conj m1 a)) {} (for [k m] [k d])))","user":"5918db70e4b09b4ee5954bbb"},{"code":"#(loop [ret {} default_value %1 k %2] (if (empty? k ) ret  (recur (conj ret [ (first k) default_value]) default_value (rest k))  ))","problem":156,"user":"50463347e4b011c5dfee771e"},{"code":"(fn foo [x ys] \n  (let [z {}]\n  \t(reduce merge (map #(assoc z % x) ys))\n    )\n  )","problem":156,"user":"51d07a8be4b0e42293a2257e"},{"code":"(fn [d ks]\n   (into {} (map #(vec [% d]) ks)))","problem":156,"user":"4f75469ee4b0fbe0118ec55a"},{"code":"#(zipmap %2(repeat %1))","problem":156,"user":"4dd4034a535dae65d5c462df"},{"code":"(fn [value ks]\n\t(apply assoc {} (interleave ks (repeat value))))","problem":156,"user":"4e7e1483535db169f9c79702"},{"problem":156,"code":"(fn [default col] \n  (zipmap col (repeat default)))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":156,"code":"(fn [a ks]\n  (apply hash-map (interleave ks (repeat (count ks) a))))","user":"5f6580e7e4b02876ed9fd023"},{"problem":156,"code":"(fn [n s] (apply hash-map (mapcat #(list % n) s)))","user":"5dd84170e4b0948ae9d9ad93"},{"problem":156,"code":"(fn make-map [value keyz]\n   (into {} (map #(vector % value) keyz)))","user":"5429986ce4b01498b1a71b3b"},{"code":"(fn [x n]\n    (apply hash-map\n           (#(interleave n (repeat x)))))","problem":156,"user":"50b53b6ae4b0c464d223d1c4"},{"problem":156,"code":"(fn [v ks]\n  (into {}\n        (for [k ks] {k v})))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":156,"code":"(fn [x ys]\n  (reduce (fn [acc cur]\n            (into acc {cur x})) {} ys))","user":"5da7176ae4b000c986472c13"},{"code":"(fn [def-val key-list]\n  (reduce #(conj %1 {%2 def-val}) {} key-list))","problem":156,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn [v ks] (apply conj (map #(hash-map % v) ks)))","problem":156,"user":"4dadaa5cc9a9d6ed2f99dc57"},{"code":"#(reduce (fn [k m] (assoc k m %1)) {} %2)","problem":156,"user":"52a88c4de4b0c58976d9ac30"},{"problem":156,"code":"(fn [default key-list]\n  (loop [keys-left key-list\n         result {}]\n    (if (empty? keys-left) result\n      (recur (rest keys-left) (conj result [(first keys-left) default])))))","user":"562c2fc2e4b058fa18c5a6d7"},{"code":"(fn [x ks]\n  (into {}\n    (for [k ks]\n      [k x])))","problem":156,"user":"4e7dec83535db169f9c796f3"},{"problem":156,"code":"(fn [dv lst] (zipmap lst (repeat dv)))","user":"56058d64e4b08b23635d3169"},{"problem":156,"code":"#(reduce (fn[a b] (assoc a b %1)) {} %2)","user":"55129667e4b06e50f9beb1ac"},{"code":"(fn [d s] \n  (reduce merge\n          (map \n           (fn [i] \n             (hash-map i d)) s)))","problem":156,"user":"50772e6ae4b0fc74642bff5d"},{"problem":156,"code":"(fn [v kseq] (zipmap kseq (repeat (count kseq) v)))","user":"556ff203e4b09a3098a52526"},{"code":"#(loop [m {} [f & r] %2] (if (empty? r) (assoc m f %) (recur (assoc m f %) r)))","problem":156,"user":"509a5ca8e4b0efbae1fbc0ab"},{"code":"#(into {} (map (fn [k] identity [k %]) %2))","problem":156,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":156,"code":"(fn [d s] (into {} (map #(hash-map % d) s)))","user":"5501ad6ee4b07d26eda61d76"},{"problem":156,"code":"(fn [v k] (apply hash-map(interleave\n         k(repeat (count k) v))))","user":"5dab11cde4b000c986472c45"},{"problem":156,"code":"(fn [default keyss] (->> keyss\n                        (map #(hash-map % default))\n                        (reduce conj)))","user":"5d045162e4b0cc9c915881d3"},{"code":"(fn [v ks] (reduce #(merge %1 {%2 v}) {} ks))","problem":156,"user":"50f2e5cee4b0ec8ee6fa8643"},{"code":"(fn [default-value keys] (apply assoc {} (mapcat #(vector % default-value) keys)))","problem":156,"user":"52f10094e4b05e3f0be25ee8"},{"code":"(fn [v s] (reduce #(assoc %1 %2 v) {} s))","problem":156,"user":"4e99f2e1535dbda64a6f6b6c"},{"code":"(fn [value arg]\n  (let [res {}]\n   (into {} (map (fn [x] (assoc res x value)) arg))))","problem":156,"user":"537881a4e4b06839e8705e46"},{"problem":156,"code":"(fn default-map [default-val keys]\n  (reduce (fn [new-map key] (assoc new-map key default-val))\n          {}\n          keys\n          ))","user":"5a55c713e4b05d388ecb6c43"},{"problem":156,"code":"(fn [d l] (apply conj (map #(hash-map % d) l) ))","user":"56979bb7e4b0e0b3d3318cac"},{"code":"(fn [v xs] (into {} (for [x xs] [x v])))","problem":156,"user":"50ef96a1e4b0bdaecbb47d9d"},{"problem":156,"code":"(fn my-zipmap2 [val keys]\n  (loop [my-map {}\n         my-keys keys]\n    (if (seq my-keys )\n      (recur (assoc my-map (first my-keys) val)\n             (rest my-keys))\n      my-map)))","user":"55f6d4fce4b06e875b46ce9b"},{"problem":156,"code":"(fn fname [default keylist]\n  (if (empty? keylist)\n    {}\n  (assoc \n    (fname default (rest keylist))\n    (first keylist)\n    default)))","user":"54178782e4b01498b1a71a0c"},{"code":"(fn [d k]\n  (zipmap k (repeat (count k) d))\n)","problem":156,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":156,"code":"(fn [v ks] (reduce (fn [acc k] (into {k v} acc)) {} ks))","user":"589714cbe4b00487982d52b1"},{"problem":156,"code":"(fn [df _keys] (reduce #(conj %1 {%2 df}) {} _keys))","user":"59cf6fbce4b0ef0a1e9b5b6c"},{"code":"#(loop [l %2 m {}] (if (empty? l) m (recur (rest l) (assoc m (first l) %1))))","problem":156,"user":"52c81954e4b0c2d177d6212e"},{"problem":156,"code":"(fn create-map ([default x] (create-map {} default x))\n  ([aux default x] (if (empty? x) aux\n                     (recur (conj aux (hash-map (first x) default)) default (rest x)))))","user":"53a2ec2be4b0f1fc74538830"},{"code":"(fn [x y] (into {} (map (fn [z] {z x}) y)))","problem":156,"user":"50c4a354e4b0210b849018af"},{"code":"(fn [dv ks]\n  (zipmap ks (repeat dv)))","problem":156,"user":"50eebf46e4b06330c1f87c61"},{"problem":156,"code":"(fn [a b]\n  (zipmap b(repeat a)))","user":"60462028e4b02d28681c77c2"},{"code":"(fn\n    [x xs]\n    (apply hash-map (reduce #(conj %1 x %2) () xs))\n)","problem":156,"user":"51422945e4b0b50abeb46b2e"},{"problem":156,"code":"(fn [default k] (reduce ( fn [m k] (assoc m k default) ) {} k ))","user":"5a071cb2e4b01bb0ae8afdd8"},{"code":"(fn mkdefmap [defval col]\n\t(if (empty? col)\n\t\t{}\n\t\t(conj (mkdefmap defval (rest col)) {(first col) defval})\n))","problem":156,"user":"53386fb9e4b0e30313ee6c9a"},{"code":"(fn mdef [x xn](if(empty? xn) \n                 {}\n                 (merge {(first xn) x} (mdef x (rest xn)))\n                 ))","problem":156,"user":"50edcc53e4b06330c1f87c49"},{"problem":156,"code":"(fn[valor llaves]( zipmap llaves (repeat valor)))","user":"592b7269e4b072a2710fcf3f"},{"code":"(fn [x xs] \n  (into {} (map #(identity [% x]) xs)))","problem":156,"user":"513b77f3e4b00f740c76c403"},{"problem":156,"code":"(fn [v xs](reduce #(assoc %1 %2 v) {} xs))","user":"5c4ab449e4b0f9f7a8770e57"},{"problem":156,"code":"(fn [default args] (reduce #(assoc %1 %2 default) {} args))","user":"54cec2a9e4b018d918be98c1"},{"problem":156,"code":"#(zipmap %2 (repeat(count %2) %1))","user":"53ed2fafe4b0d648e757f4c1"},{"problem":156,"code":"(fn foo [v ks]\n  (apply hash-map (mapcat #(list % v) ks)))","user":"4daeac1bedd6309eace4d15d"},{"problem":156,"code":"(fn [n sequence]\n   (->> sequence\n        (map (fn [item] [item n]))\n        (into {})))","user":"5d25abc9e4b02ea6f0fb6a37"},{"problem":156,"code":"(fn [default keys]\n  (loop [k keys m {}]\n        (if (empty? k)\n            m\n          (let [new-m (assoc m (first k) default)]\n            (recur (rest k) new-m)\n            )\n          )\n        )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"code":"(fn [d col]\n  (reduce #(assoc %1 %2 d)\n          {}\n          col))","problem":156,"user":"51105c7fe4b04c71fce993ef"},{"problem":156,"code":"(fn\n       [val keys]\n       (apply conj (map #(hash-map % val) keys)))","user":"53ac4719e4b047364c04445c"},{"code":"(fn [x,y] (apply hash-map (interleave y (repeat x))))","problem":156,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":156,"code":"(fn [i v]\n     (zipmap v (repeat (count v) i)))","user":"5656e039e4b0f9d632dd84a3"},{"problem":156,"code":"(fn [v cllt]\n  (zipmap cllt (repeat v)))","user":"5baa1b58e4b0a20761a2344e"},{"problem":156,"code":"(fn [v ks] (zipmap ks (repeat v) ) )","user":"58021b0be4b0a837a8b30c6a"},{"problem":156,"code":"(fn create [value ks]\n  (apply hash-map\n    (reduce concat\n      (map (fn [k] (list k value)) ks)\n    )\n  )\n)","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn [v s]\n  (#(if (empty? %2)\n    %3\n    (recur %1 (rest %2) (assoc %3 (first %2) %1))) v s {}))","problem":156,"user":"4e8f4f64535d65386fec2149"},{"problem":156,"code":"(fn [default mapKeys]\n  (into \n  {}\n  (map #(vec (conj `() default %1)) mapKeys)))","user":"5b3251c1e4b025bcb146f317"},{"problem":156,"code":"(fn [v ks]\n   (apply hash-map (-> (->> ks (interpose v) (vec)) (conj v))))","user":"6026737ee4b0d5df2af2222f"},{"problem":156,"code":"(fn [dv v]\n  (reduce\n    #(assoc %1 %2 dv)\n    {}\n    v))","user":"549a999be4b0f3d1d8e70f6f"},{"problem":156,"code":"(fn [default seq] (into {} (for [e seq] [e default])))","user":"5f02f365e4b0cf489e8d7f2c"},{"problem":156,"code":"(fn [default -keys] \n  (zipmap -keys (repeat default)))","user":"571543bbe4b07c98581c3ad4"},{"problem":156,"code":"(fn [a b]\n  (reduce conj {} (map (fn [x] {x a}) b)))","user":"587c48cce4b01531a375eb16"},{"code":"(fn [d ks0]\n  (loop\n    [ks ks0\n     m {}]\n    (if-not (empty? ks)\n      (recur (rest ks) (assoc m (first ks) d))\n      m)))","problem":156,"user":"51634e09e4b055933a9ca02c"},{"code":"(fn [default ks]\n  (into {} (map #(vector % default) ks)))","problem":156,"user":"529a73bde4b02ebb4ef75096"},{"code":"(fn create-map-with-defaults [default-value keys]\n\t\t\t   (loop [map {} keys keys]\n\t\t\t      (if (empty? keys)\n\t\t\t\t  map\n\t\t\t\t  (recur (assoc map (first keys) default-value) (rest keys)))))","problem":156,"user":"4e68fad4535d8ccf87e9fe93"},{"problem":156,"code":"(fn [d m] (reduce (fn [ret k] (assoc ret k d)) {} m))","user":"5f19ecbae4b091ba50b4dbdf"},{"code":"(fn [d ks]\n\t(into {} (map (fn [x] {x d} ) ks ) )\n  )","problem":156,"user":"52fba50ce4b047fd5583700d"},{"code":"#(reduce (fn [c k] (assoc c k %)) {} %2)","problem":156,"user":"5203bc27e4b0fb7e47ea5204"},{"problem":156,"code":"(fn [dv ks]\n  (into {} (for [k ks]\n             [k dv])))","user":"54c611d1e4b045293a27f627"},{"problem":156,"code":"(fn [d k]\n  (apply hash-map (interleave k (repeat d))))","user":"54ef51bde4b024c67c0cf884"},{"code":"#(apply hash-map (interleave %2 (cycle [%1])))","problem":156,"user":"52488545e4b05ef8e38e63df"},{"problem":156,"code":"(fn [default seq] \n  (zipmap seq (repeat default)))","user":"55a505dde4b0acc240e31549"},{"code":"(fn [k m] (reduce #(conj {%2 k} %1) {} m))","problem":156,"user":"502f6c56e4b0842eb223d8bb"},{"code":"(fn\n  [dv col]\n  (let [mapper (fn [t-map v] (conj t-map {v dv}))]\n    (reduce mapper {} col)))","problem":156,"user":"53334cb2e4b019098a6f8b81"},{"code":"(fn [n v]\n  (apply hash-map\n    (interleave v (repeat (count v) n))))","problem":156,"user":"4eec82fe535d93acb0a668ae"},{"problem":156,"code":"(fn [default  c] (reduce (fn [m a] (conj m [a default])) {} c))","user":"553d86cfe4b0a04f792994e2"},{"problem":156,"code":"(fn [default array]\n  (reduce merge (map #(assoc {} % default) array)))","user":"5ca04cc3e4b048ec896c5b69"},{"problem":156,"code":"(fn [default keys] (into {} (map #(vector % default) keys)))","user":"58447708e4b089d5ab817e4b"},{"code":"(fn [i c]\n  (zipmap c (repeat i)))","problem":156,"user":"50f69a3ce4b0035e89151844"},{"code":"(fn [x y] (into {} (for [index y]{index x})))","problem":156,"user":"529952a4e4b02ebb4ef75081"},{"code":"(fn xx [v coll]\n\t(into {} (map #(vector % v) coll)))","problem":156,"user":"51937eb3e4b04df54c098022"},{"code":"#(zipmap (seq %2)(repeat %1))","problem":156,"user":"53029281e4b0d8b024fd372e"},{"code":"(fn m [val keys] (if (empty? keys) {} (assoc (m val (rest keys)) (first keys) val)))","problem":156,"user":"4e9a1512535dbda64a6f6b6e"},{"code":";;#(zipmap %2 (repeat %))\n#(into {} (map vector %2 (repeat %)))","problem":156,"user":"52393e16e4b0d705d026ef06"},{"problem":156,"code":"(fn [v coll]\n  (reduce (fn [m k] (assoc m k v)) {} coll))","user":"54055aa9e4b0addc1aec6665"},{"problem":156,"code":"(fn [def-val key-seq]\n  (zipmap key-seq (repeat def-val)))","user":"5ec6de19e4b08d0ec38692da"},{"problem":156,"code":"(fn [f f1]\n  \n  (apply hash-map(interleave f1 (repeat f)))\n  \n  \n  )","user":"5f727be9e4b02876ed9fd08d"},{"problem":156,"code":"(fn [keyz col] (reduce merge (map #(hash-map %1 keyz) col)))","user":"56cb3bebe4b0ea9b8538f728"},{"problem":156,"code":"(fn [d keys] (apply merge (for [k keys] {k d})))","user":"54d7ed8de4b0a52adc2e2034"},{"problem":156,"code":"#(reduce\n  (fn [a b]\n    (assoc a b %1)) {} %2)","user":"55d1f231e4b0e31453f64a4e"},{"code":"(fn [val keys]\n  (apply hash-map \n    (reduce \n      (partial apply conj) \n        (for [x keys] [x val]))))","problem":156,"user":"4fd9f5dbe4b05e33b9224f41"},{"problem":156,"code":"(fn [x col] (reduce-kv (fn [m _ v] (assoc m v x)) {} col))","user":"5f274aeee4b0857314092c92"},{"problem":156,"code":"(fn f [v xs]\n  (->> xs (map (fn [a] {a v})) (reduce merge {})))","user":"5933b736e4b072a2710fd05d"},{"problem":156,"code":"(fn [default stuff]\n  (apply assoc {} \n    (interleave stuff\n                (repeat default))))","user":"53577049e4b04ce2eb3ed27b"},{"problem":156,"code":"(fn [d v]\n  (apply merge\n         (map #(hash-map % d) v)))","user":"558053b1e4b05c286339e0e9"},{"problem":156,"code":"(fn [v li]\n  (reduce conj {} (map (fn [x] [x v]) li)))","user":"59f2af64e4b0966464fe6a87"},{"problem":156,"code":"(fn [v coll] (reduce (fn [a b] (assoc a b v)) {} coll))","user":"53e241a6e4b036ad0777e3f0"},{"code":"(fn [d col] \n  (apply merge \n         (map #(sorted-map % d) \n              col)))","problem":156,"user":"4e77c1db535d324fb2983d72"},{"code":"(fn [dv col]\n  (reduce #(assoc %1 %2 dv) {} col))","problem":156,"user":"4f1427f8535d64f603146435"},{"problem":156,"code":";#(into (hash-map) (for [x %2] [x %1]))\n#(zipmap %2 (repeat %1))","user":"5ed03b7fe4b016b56eae05ae"},{"problem":156,"code":"(fn [default keys]\n\t(zipmap keys (take (count keys) (repeat default)) )  \n)","user":"5991d2fae4b0866487ed0d68"},{"problem":156,"code":"(fn [default keys]\n   (reduce #'conj {} (map #(hash-map % default) keys)))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn mapper [value keys]\n  (zipmap (reverse keys) [value value value]))","problem":156,"user":"526f0a68e4b03e8d9a4a7348"},{"problem":156,"code":"(fn [default keys-list]\n  (apply conj (map (fn [k] {k default}) keys-list)))","user":"54d492dbe4b0a52adc2e2001"},{"problem":156,"code":"(fn [default key-lst] (reduce #(into %1 {%2 default}) {}  key-lst))","user":"53f31dafe4b0742d9025b0f0"},{"problem":156,"code":"(fn [dv ks]\n        (zipmap ks (repeat dv)))","user":"546c4377e4b00cfc9eacc177"},{"code":"(fn [x xs] (->> xs (map #(vector % x)) (into {})))","problem":156,"user":"4fe98ddae4b0547ebccb2463"},{"problem":156,"code":"(fn [default key_seq]\n  (apply conj (map #(hash-map % default) key_seq)))","user":"55b2505be4b0da326a65cf7d"},{"code":"(fn [default keys]\r\n  (zipmap keys (map (fn [n] default) keys)))","problem":156,"user":"4ff304f4e4b0678c553fc343"},{"code":"#(into {} (for [a %2] [a %1]))","problem":156,"user":"4db1b5841254ad5b4805fa70"},{"code":"(fn [default-value keys]\n  (into {} (map (fn [key] [key default-value]) keys)))","problem":156,"user":"4f35b2ace4b0e243712b1ec5"},{"code":"(fn [d xs]\n  (reduce (fn [m x] (conj m {x d})) {} xs)\n  )","problem":156,"user":"51e24a04e4b01e5198146430"},{"code":"(fn [k coll]\n  (zipmap coll (iterate identity k)))","problem":156,"user":"526934d6e4b03e8d9a4a71dd"},{"problem":156,"code":"(fn [x kys] (into {} (map #(vector % x) kys)))","user":"5ade6bafe4b0837691e92c23"},{"problem":156,"code":"(fn [val keys]\n  (loop [result {} keys keys]\n    (if (empty? keys)\n      result\n      (recur (conj result [(first keys) val]) (rest keys)))))","user":"58ee2c14e4b056aecfd47d9e"},{"code":"(fn [v ks]\n  (loop [ks ks ret {}]\n    (if (empty? ks)\n      ret\n      (recur (rest ks) (assoc ret (first ks) v)))))","problem":156,"user":"4f849f76e4b033992c121c36"},{"problem":156,"code":"(fn [my-value my-keys] (apply merge (map (fn [my-key] {my-key my-value}) my-keys)))","user":"54ef7568e4b024c67c0cf885"},{"problem":156,"code":"(fn [default map-keys] \n  (apply assoc {} (interleave map-keys (take (count map-keys) (repeat default)))))","user":"56db8fbde4b0ea9b8538f80c"},{"code":"(fn [v sq] (reduce (fn [mp k] (assoc mp k v) ) {} sq))","problem":156,"user":"53266a93e4b09d4e7a9b54ee"},{"problem":156,"code":"(fn [dft ks] (zipmap ks (repeat (count ks) dft)))","user":"52860baae4b0239c8a67ae09"},{"problem":156,"code":"(fn [default ks]\n  (into (hash-map) (for [k ks] [k default])))","user":"59ad8695e4b0e1f4e384c887"},{"problem":156,"code":"(fn [p l] (zipmap l (vec (repeat 3 p))))","user":"5c35e557e4b0d62ef62d9f64"},{"code":"(fn [defl keys]\n  (reduce #(assoc % %2 defl) {} keys))","problem":156,"user":"4fe88f78e4b07c9f6fd12c45"},{"code":"(fn make-defaults\n  [default keys] (let [keys-seq (seq keys)]\n                      (if (= (count keys) 1)\n                          {(first keys) default}\n                          (conj (make-defaults default (rest keys)) {(first keys) default}))))","problem":156,"user":"503a5623e4b07a1917cc34d3"},{"problem":156,"code":"(fn [i v] (reduce #(assoc %1 %2 i) {} v))","user":"4f31ad57e4b0d6649770a089"},{"problem":156,"code":"(fn [k vs]\n  (reduce merge (concat (map (fn [v] {v k}) vs) {})))","user":"53b22df6e4b047364c044497"},{"problem":156,"code":"(fn [default values] (reduce (fn [res val] (assoc res val default)) {} values))","user":"5ee4545ee4b029a2061bbe8d"},{"problem":156,"code":"(fn [val, keys]\n  (reduce (fn[map, key]\n            (assoc map key val)) {} keys))","user":"55f85b93e4b03cbcff9738ae"},{"code":"(fn [a b] ( reduce merge (map #(hash-map % a) b)))","problem":156,"user":"50d4593ee4b09cc622d65a68"},{"problem":156,"code":"(fn \n  [d ks]\n  (reduce\n    #(assoc %1 %2 d)\n    nil\n    ks))","user":"5a8b6d42e4b05369db4d24e6"},{"problem":156,"code":"(fn [default keys] (into {} (map #(-> [% default]) keys)))","user":"555bd27ae4b0b056612e2244"},{"problem":156,"code":"(fn [default_value keys]\n  (reduce #(assoc %1 %2 default_value) {} keys))","user":"5463c824e4b01be26fd746c5"},{"problem":156,"code":"(fn [n coll]\n        (zipmap coll (repeat n)))","user":"5f737899e4b02876ed9fd099"},{"problem":156,"code":"#(reduce (fn [acc v] (assoc acc v %1)) {} %2)","user":"5a18488ee4b0ff51aa4b31e5"},{"code":"#(into {} (for [x %2] [x %1]))","problem":156,"user":"4db016af838c48654951d9b9"},{"problem":156,"code":"(fn [default seq] \n    (into {} (map (fn [x] [x default])\n  seq)))","user":"5645a7f9e4b0284900eef609"},{"problem":156,"code":"(fn [a b ] ( zipmap b (repeat a )))","user":"55c423e1e4b0e31453f64994"},{"problem":156,"code":"(fn [d s] (apply assoc {} (interleave s (repeat (count s) d))))","user":"545c2d07e4b01be26fd7465c"},{"code":"(fn map-default [v k] (zipmap k (repeat (count k) v)))","problem":156,"user":"51cbdee1e4b08d8387cbede1"},{"code":"(fn [d st]\n  (zipmap st\n\t\t(map (fn [n] d) st)))","problem":156,"user":"504e6165e4b0f6ff3350c4aa"},{"code":"(fn [v ks]\n  (into {}\n         (map (fn [k] [k v]) ks)))","problem":156,"user":"5008d149e4b0144d4f561e41"},{"code":"(fn [e m]\n    (zipmap m (repeat e))\n)","problem":156,"user":"51d1111ce4b067c36548635f"},{"problem":156,"code":"(fn [defaultValue list1]\n  (reduce #( assoc %1 %2 defaultValue ) {} list1)\n  \n  )","user":"5da20e73e4b000c986472be1"},{"code":"(fn [default keys]\n   (zipmap keys (repeat default)))","problem":156,"user":"4f616892e4b0defedf855fbf"},{"code":"(fn [dv ks] (apply assoc {} (interleave (reverse ks) (repeat dv))))","problem":156,"user":"4f83dd78e4b033992c121c24"},{"code":"(fn y [ww yy] \n  (if (empty? yy) \n      () \n      (conj { (first yy)  ww } \n      (y ww (rest yy))) ))","problem":156,"user":"4fbd292fe4b081705acca300"},{"code":"(fn [x xs]\n  (apply hash-map (mapcat #(vector % x) xs))\n  )","problem":156,"user":"531490bde4b08068f379ed17"},{"code":"(fn [df-val coll] (apply merge (for [the-key coll] {the-key df-val})))","problem":156,"user":"52fa8e32e4b047fd55836ffa"},{"code":"(fn [v ks]\n    (reduce (fn [memo k] (merge memo [k v])) {} ks))","problem":156,"user":"51195e77e4b055cfb310d499"},{"code":"(fn [val keys] (apply hash-map (interleave keys (repeat val))))","problem":156,"user":"4f13047d535d64f60314642c"},{"problem":156,"code":"(fn [default v] (reduce (fn [coll k] (assoc coll k default)) {} v))","user":"58562083e4b0f14aab7c86eb"},{"code":"(fn default-map\n  ([v s] (default-map v s {}))\n  ([v s m]\n    (if (empty? s)\n      m\n      (default-map v (rest s) (conj m [(first s) v]))\n    )\n  )\n)","problem":156,"user":"4fff00ede4b0678c553fc3fc"},{"code":"#(into {} (for [x %2 ] {x %1}))","problem":156,"user":"510e3640e4b07438aa32145a"},{"problem":156,"code":"(fn [value keys-seq]\n  (loop [in keys-seq out {}]\n    (if (= in [])\n      out\n      (recur (rest in) (conj {(first in) value} out)))))","user":"57fb9d83e4b0d3187e900975"},{"code":"(fn [default coll] (into {} (map #(hash-map %1 default) coll)))","problem":156,"user":"4faa6184e4b081705acca1f1"},{"problem":156,"code":"(fn [v sec]\n  (loop [m {} secq sec]\n    (if (= (count secq) 0) \n      m \n      (recur (assoc m (first secq) v) (rest secq))\n     )\n   )\n  )","user":"55a47176e4b0acc240e31544"},{"problem":156,"code":"(fn [v k]\n  (apply conj {}\n    (for [c k]\n      [c v])))","user":"5829d9f8e4b051871117bf4d"},{"problem":156,"code":"(fn [defValue keys]\n\t(reduce (fn [acc key] (assoc acc key defValue)) {} keys))","user":"56936547e4b0dcc4269f4101"},{"problem":156,"code":"(fn [a b] (reduce #(assoc %1 %2 a) nil b))","user":"5eb1a80ce4b00a66d4a951ff"},{"problem":156,"code":"( fn [d s] ( apply assoc {} ( interleave s (repeat d) ) ) )","user":"5551b492e4b0deb715856ded"},{"code":"(fn [defval array] (zipmap (reverse array) (vec (replicate (count array) defval))))","problem":156,"user":"53710c09e4b0fc7073fd6ea5"},{"problem":156,"code":"(fn [v col] (reduce #(assoc %1 %2 v) {} col))","user":"60b5fa96e4b0e0fa5f1b4242"},{"problem":156,"code":"(fn [v m] (reduce (fn [acc el] (assoc acc el v)) {} m))","user":"5dfbe0eae4b0a607a9a45ce2"},{"problem":156,"code":"(fn [d coll] (zipmap coll (repeat d)))","user":"53e9681de4b036ad0777e4a4"},{"problem":156,"code":"(fn setdef\n  [x kvec]\n  (loop [ivec kvec defa x i 0 out {}]\n    (cond (empty? ivec) out\n          :else (recur (rest ivec) defa (inc i) (assoc out (first ivec) defa)))))","user":"57acee37e4b0b8559636fc94"},{"code":";#(zipmap %2 (repeat (count %2) %1 ))\n#(zipmap %2 (repeat %1))","problem":156,"user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn [val vec]\n  (loop [vect vec\n         m {}]\n    (cond\n     (empty? vect) m\n     :else (recur (rest vect)\n                  (merge (hash-map (first vect) val) m)))))","problem":156,"user":"5154fa3fe4b0179c5115f4e6"},{"code":"(fn [v s] (zipmap s (repeat v)))","problem":156,"user":"4facd2fae4b081705acca22f"},{"problem":156,"code":"(fn [d x] (reduce #(assoc %1 %2 d) {} x))","user":"5457767ae4b01be26fd7460c"},{"problem":156,"code":"(fn [default-value key-seq] (into {} (map #(vector % default-value) key-seq)))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":156,"code":"(fn [value keys]\n  (reduce (fn [c key]\n            (assoc c key value))\n          {}\n          keys))","user":"57ad0950e4b0b8559636fc97"},{"problem":156,"code":"(fn [value mapa] (\n    (fn [acc value [firstEl & restEl]]\n      (if (nil? firstEl)\n        acc\n        (recur (assoc acc firstEl value) value restEl)\n      )\n    ) {} value mapa)\n   )","user":"593eaadde4b069cdc2982bc2"},{"problem":156,"code":"(fn [val keys] (zipmap keys (repeat (count keys) val)))","user":"54aec099e4b09f271ff37cf5"},{"problem":156,"code":"(fn [d ks]\n  (into {} (map (fn [k] [k d]) ks)))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":156,"code":"(fn [val keys]\n  (reduce\n    (fn [hash key] (conj hash {key val}))\n    {}\n    keys))","user":"57f11d72e4b0bfb2137f5c03"},{"code":"(fn [val keys]\n  (into {} (map #(vector % val) keys)))","problem":156,"user":"53658ce7e4b0243289761e6e"},{"problem":156,"code":"(fn \n  [default values] \n  (reduce \n   (fn \n     [prev item] \n     (conj\n      prev\n      [item default]\n      )\n     ) \n   {}\n   values)\n  )","user":"58950f29e4b00487982d5270"},{"problem":156,"code":"(fn [x y] (apply hash-map (interleave y (take (count y) (cycle [x])))))","user":"55205564e4b08d5046aa8a60"},{"problem":156,"code":"#(into {} (map vec (partition 2 (interleave %2 (repeat %1)))))","user":"590b3aeae4b047aa04b199d0"},{"problem":156,"code":"(fn iter [val keys]\n\t(cond (empty? keys) {}\n\t\ttrue (conj (iter val (rest keys)) {(first keys) val})))","user":"5583888ae4b05c286339e117"},{"problem":156,"code":"(fn [default coll]\n  (reduce\n   (fn [m el]\n     (assoc m el default))\n   {}\n   coll)\n)","user":"52d6d490e4b09f7907dd1369"},{"code":"(fn [default keys]\n       (apply merge (for [key keys] {key default})))","problem":156,"user":"4db2f208535df7e46ed9b6c9"},{"problem":156,"code":"(fn [default l]\n  (reduce (fn[x y] (assoc x y default)) '{} l))","user":"56eb3f9de4b04a395b9a0420"},{"problem":156,"code":"(fn [d ks] (into {} (map vector ks (repeat d))))","user":"4f107e0e535d64f60314641c"},{"problem":156,"code":"#(apply assoc {} (interleave %2 (take (count %2) (repeat %1))))\n;;(take 4 (repeat 0))","user":"5c48c971e4b0e06e1360a3c6"},{"code":"(fn [x, y] (zipmap y (repeat (count y) x)))","problem":156,"user":"514b66f4e4b0bd81940b86cb"},{"problem":156,"code":"(fn [default-value xs] (apply hash-map (interleave xs (repeat default-value))))","user":"59d4d126e4b0ef0a1e9b5be9"},{"problem":156,"code":"(fn [defs keys] (zipmap keys (repeat defs)))","user":"5bfc2068e4b0bdcf453d15e4"},{"problem":156,"code":"(fn defaults[default mapkeys]\n  (zipmap mapkeys (repeat default)))","user":"5632abbee4b0bfe05bf117a7"},{"code":"(fn [d ks]\n  (reduce #(assoc %1 %2 d) {} ks))","problem":156,"user":"523c6451e4b07becd5be2222"},{"problem":156,"code":"#(into {} (map (fn [el] [el %1]) %2))","user":"4fc524aae4b081705acca37e"},{"code":"(fn [d keys]\n          (apply merge (map (fn [k] {k d}) keys)))","problem":156,"user":"4e599577535d8a8b8723a29f"},{"problem":156,"code":"(fn\n  [value v]\n  (reduce (fn\n            [res k]\n            (merge res (hash-map k value))) (hash-map) (reverse v)))","user":"55a5e2f7e4b0acc240e31550"},{"problem":156,"code":"(fn [val keys]\n  (let [n (count keys)]\n    (loop [i 0 m {}]\n      (if (< i n)\n        (recur (inc i) (assoc m (nth keys i) val))\n        m))))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":156,"code":"(fn [default key-list]\n        (->> key-list\n             (map (fn [k] [k default]))\n             (into {})))","user":"5484c3b2e4b0e286459a11a2"},{"code":"(fn default [x y]\n  (zipmap y (map (fn [z] x) y)) \n)","problem":156,"user":"50588af1e4b06522596eba7d"},{"code":"(fn [val col]\n  (into {} (for [x col] {x val})))","problem":156,"user":"4ea8570f535d7eef308072f8"},{"code":"(fn [d ks] (zipmap ks (replicate (count ks) d)))","problem":156,"user":"4fec550de4b0681fd128dca6"},{"code":"(fn [x y] (reduce #(assoc % %2 x) {} (reverse y)))","problem":156,"user":"5047782ce4b0371827a27bc2"},{"code":"(fn [x l] \n  (reduce \n    conj \n    {} \n    (map \n      #(vector % x)\n      l\n      )))","problem":156,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"(fn [v lst]\n  (apply hash-map \n    (interleave lst (repeat v))))","problem":156,"user":"5027b41ee4b01614d1633fee"},{"problem":156,"code":"(fn [x l]\n  (let [arr (repeat (count l) x)]\n    (zipmap l arr)))","user":"4fab336be4b081705acca216"},{"problem":156,"code":"(fn [def-val coll] (into {} (map #(assoc {} % def-val) coll)))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"#(apply hash-map(for [x %2 y (range 2)] (if (= y 1) %1 x)))","problem":156,"user":"51e3cf8ee4b0efabf93c02a3"},{"code":"(fn [v ks]\n  (zipmap ks (repeat (count ks) v)))","problem":156,"user":"4f62b29ce4b0defedf855fd9"},{"problem":156,"code":"(fn [default keys]\n  (reduce (fn [m k] (assoc m k default)) {} keys))","user":"581a703de4b0e114eb51a005"},{"problem":156,"code":"(fn [d s] \n    (reduce \n        (fn [a k] \n            (merge \n                a \n                {k d})) \n        {} \n        s))","user":"58e039d3e4b0a4d5acaab734"},{"problem":156,"code":"#(apply hash-map (vec (interleave %2 (repeat (count %2) %))))","user":"56d91a53e4b0ea9b8538f7ee"},{"code":"#(reduce conj (map (fn[k] (hash-map k %1)) %2))","problem":156,"user":"517e25c6e4b0329b27fa9f51"},{"code":"(fn [default ys] (reduce (fn [xs y] (conj xs {y default})) {} ys))","problem":156,"user":"501ffbb1e4b0cb6ebc0a42f2"},{"code":"(fn [default_value arr]\n(into {} (map (fn [arr_element] {arr_element default_value}) arr))\n  \n  )","problem":156,"user":"52f0f3e5e4b05e3f0be25ee7"},{"code":"(fn [default key-coll] (reduce #(assoc %1 %2 default) {} key-coll))","problem":156,"user":"51ba8f82e4b0fe3ecfb46434"},{"problem":156,"code":"(fn [v m] \n    (zipmap m (repeat v)))","user":"55744472e4b0aa18f790f402"},{"problem":156,"code":"(fn [df ks] (into {} (map (fn [k] (hash-map k df)) ks)))","user":"577629abe4b0979f8965162e"},{"problem":156,"code":"(fn mwd [d xs]\n  (cond\n    (empty? xs) {}\n\t:else (merge {(first xs) d} (mwd d (rest xs)))\n  )\n)","user":"5d4c83b7e4b0776584bd6f34"},{"code":"(fn [value keyList] (zipmap keyList (repeat value)))","problem":156,"user":"51ee669ce4b09915f9b23c03"},{"problem":156,"code":"(fn [default ks]\n  (reduce (fn [acc k]\n            (assoc acc k default))\n          {} ks))","user":"501948b3e4b0b6630b101db5"},{"problem":156,"code":"(fn [default sequenc]\n  (apply hash-map (mapcat list sequenc (into [] (repeat (count sequenc) default))))\n)","user":"5391bc62e4b0b51d73faaea7"},{"problem":156,"code":"(fn[d k](apply merge(for [x k] (hash-map x d))))","user":"5d60ea3ae4b0c9e5857d500a"},{"code":"(fn [d s] (reduce #(merge %1 {%2 d}) {} s))","problem":156,"user":"506b016de4b0a2a5463de37f"},{"code":"(fn [d,s] (reduce #(conj %1 {%2 d}) {} s))","problem":156,"user":"531f1e63e4b08068f379edc2"},{"problem":156,"code":"(fn [el coll] (reduce #(assoc %1 %2 el) {} coll))","user":"595e6c76e4b066ee0a44b043"},{"problem":156,"code":"(fn [default_value key_array]\n  (reduce (fn [new-map key] (assoc new-map key default_value)) {} key_array))","user":"5e595637e4b027a2e10ac10e"},{"problem":156,"code":"(fn [value vect]\n  (reduce #(conj %1 [%2 value]) {} vect)\n  )","user":"549ffeade4b0f3d1d8e70fb2"},{"problem":156,"code":"(fn [default keys]\n  (apply merge (map (fn [k] {k default}) keys)))","user":"58fe47b0e4b0438e51c2cfcd"},{"problem":156,"code":"(fn [d ks]\n  (reduce (fn [ret k]\n            (assoc ret k d))\n          {} ks))","user":"555ee545e4b0a2eb076a39bd"},{"problem":156,"code":"(fn [d m]\n           (reduce\n             (fn [b n] (conj b {n d}))\n             {}\n             m\n             )\n           )","user":"55d42f78e4b0e31453f64a73"},{"problem":156,"code":"(fn [default coll] \n  (into (hash-map) (map #(identity [%1 default]) coll)))","user":"56b2300ce4b0982f16b37dff"},{"problem":156,"code":"(fn \n  [value collection]\n  (zipmap collection (repeat value) ) )","user":"5e381434e4b01d43a70e8db4"},{"problem":156,"code":"#(zipmap %2 (map (fn [k] %1) %2))","user":"58050034e4b0a837a8b30cb4"},{"code":"(fn [default keys]\n     (reduce #(conj % [%2 default]) {} keys))","problem":156,"user":"4e6a5694535d8ccf87e9fece"},{"problem":156,"code":"(fn [df lst]\n  (loop [d {} n (first lst) l (rest lst)] \n     (if \n       (empty? l) \n          (assoc d n df)\n          (recur (assoc d n df) (first l) (rest l)))))","user":"52503747e4b0541d1855b828"},{"problem":156,"code":"#(apply hash-map (mapcat (fn[x] [x %1]) %2))","user":"57ab41dde4b0b8559636fc79"},{"code":"#(loop [default %1 orig-list %2 list-with-defaults {}]\n    (if(empty? orig-list) \n      list-with-defaults\n      (recur \n        default \n        (next orig-list) \n        (assoc list-with-defaults (first orig-list) default))\n    )\n  )","problem":156,"user":"4fe588b6e4b0e8f79898fec5"},{"code":"(fn defaults [v keys]\n  (if (seq keys)\n    (assoc (->> keys rest (defaults v)) (first keys) v)\n    {}))","problem":156,"user":"4ff6aea8e4b0678c553fc381"},{"problem":156,"code":"(fn [d l] (reduce\n    (fn [nl el] (conj nl {el (get el l d)}))\n    {}\n    l\n  )\n)","user":"5625f678e4b00e49c7cb47b8"},{"problem":156,"code":"(fn [x coll] (apply merge (map #(hash-map % x) coll)))","user":"543f1765e4b032a45b86935a"},{"code":"(fn [val l] (apply hash-map (interleave l (repeat val))))","problem":156,"user":"534f13b2e4b084c2834f4ac4"},{"problem":156,"code":"(fn [v c] (into {} (map (fn [x] [x v]) c)))","user":"58eed4c5e4b056aecfd47db7"},{"problem":156,"code":"#(into {} (for [i %2] {i %1}))","user":"5372e7d9e4b06d7f452d9e02"},{"problem":156,"code":"#(zipmap %2 (take (.length %2) (repeat %1)))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":156,"code":"(fn load-map-with-default [value keys]\n  (loop [k keys\n         new-map {}]\n    (if (empty? k)\n      new-map\n      (recur (rest k) (assoc new-map (first k) value)))))","user":"58daae01e4b0a4d5acaab664"},{"code":"(fn [a l]\n  (apply merge (map (fn [li] {li a}) l)))","problem":156,"user":"50b668dde4b08fb537db98f2"},{"problem":156,"code":"(fn [value key-lst]\n  \t(zipmap key-lst\n            (repeat (count key-lst) value)))","user":"57f81532e4b0d3187e900914"},{"problem":156,"code":"(fn [n col] \n  (zipmap col \n          (repeat (count col) n)\n  )\n)","user":"55bb7546e4b01b9910ae29e7"},{"problem":156,"code":"(fn [default-val map-keys] (into {} (for [individual-key map-keys] {individual-key default-val}) ))","user":"5a285a38e4b07f18be40aa67"},{"code":"(fn [d s]\n  (reduce #(conj %1 {%2 d}) {} s))","problem":156,"user":"512eb723e4b0b740abc5982b"},{"code":"(fn [def-v ls]\n  (loop [acc {}\n         ls ls]\n    (if (empty? ls)\n      acc\n      (recur (assoc acc (first ls) def-v) (rest ls))\n      )\n    )\n  )","problem":156,"user":"515ef58be4b02c55805ea237"},{"problem":156,"code":"(fn [v k] (reduce (fn [m n] (assoc m n v)) {} (seq k)))","user":"5673881fe4b05957ce8c6120"},{"code":"#(into {} (map (fn [k] (conj [k] %)) %2))","problem":156,"user":"511d11d7e4b022853b0e079f"},{"code":"#(zipmap\n   %2 (repeat %1)  \n)","problem":156,"user":"4fb4d4ede4b081705acca2b1"},{"problem":156,"code":"(fn [dv mys] (->> mys (map #(hash-map % dv)) (reduce conj)))","user":"542fa0dde4b0dad94371f2d2"},{"code":"#(reduce (fn [a b] (into a (hash-map b %))) (hash-map (first %2) %) %2)","problem":156,"user":"52eb400ee4b0705949c4443b"},{"code":"(fn [d k]\n  (reduce #(into %1 [[%2, d]]) {} k))","problem":156,"user":"4df407c3535d08e6dec9fe2e"},{"problem":156,"code":"(fn [a b] (apply merge (map (fn [k] {k a}) b)))","user":"54b83ae9e4b0ed20f4ff6e95"},{"problem":156,"code":"(fn defualt-map[result-map default-value list-of-keys] \n  (if (empty? list-of-keys) \n    result-map \n    (defualt-map\n      (assoc result-map (first list-of-keys) default-value)\n      default-value\n      (rest list-of-keys)))) \n\n;hash-map to pierwszy argument funkcji, pusta mapa, \n;do której będziemy dodawać elementy i potem ją zwrócimy\n(hash-map)","user":"55429859e4b0a04f7929951f"},{"code":"(fn [def-value elements]\n  (reduce #(merge %1 (hash-map %2 def-value)) {} elements))","problem":156,"user":"50052fd0e4b0678c553fc45d"},{"problem":156,"code":"(fn [deval ks]\n  (apply hash-map\n         (interleave ks (repeat deval))))","user":"57ffd1a9e4b0a837a8b30c2a"},{"problem":156,"code":"(fn [defValue keysList] (zipmap keysList (repeat defValue )))","user":"5b32571ee4b025bcb146f318"},{"problem":156,"code":"(fn [v key-coll] (into {} (map #(hash-map % v) key-coll)))","user":"5d370811e4b01671435dbd2d"},{"problem":156,"code":"#(reduce into {} (for [key %2]\n                        (assoc {} key %1)))","user":"57fe68e2e4b0d3187e9009ce"},{"code":"#(zipmap %2 (repeat %1))\n\n;#(apply hash-map (interleave %2 (repeat %1)))\n;#(apply assoc {} (interleave %2 (repeat %1)))","problem":156,"user":"53a074a4e4b0ca733b9744af"},{"problem":156,"code":"(fn [value m] ( reduce #(assoc %1 %2 value) {} m) )","user":"567798afe4b05957ce8c6169"},{"problem":156,"code":"(fn [x coll]\n                      (zipmap coll (repeat x))\n                      )","user":"58d4d864e4b03c36ff7e594c"},{"problem":156,"code":"#(reduce merge (for [x %2] {x %1}))","user":"59089229e4b047aa04b1997c"},{"code":"(fn [x keys]\n  (into {} (map (fn [k] [k x]) keys)))","problem":156,"user":"4e8338d6535db62dc21a62d3"},{"problem":156,"code":"(fn [default-value ks]\n  (apply\n   hash-map\n   (interleave\n    ks\n    (repeat default-value))))","user":"56403765e4b08d4f616f5edc"},{"problem":156,"code":"(fn [d k] (into {} (map #(hash-map % d) k)))","user":"53baa9c0e4b047364c0444fa"},{"code":"(fn map-with-default [v ks] (apply hash-map (interleave ks (repeat v))))","problem":156,"user":"508f97c0e4b0ea685a20f768"},{"code":"(fn [value keys]\n  (apply hash-map \n    (interleave keys \n      (repeat (count keys) value)\n    )\n  )\n)","problem":156,"user":"4fdce986e4b05e33b9224f74"},{"code":"(fn[x y]\n  (if(= x 0) {:a 0 :b 0 :c 0}\n  (if(= x \"x\") {1 \"x\" 2 \"x\" 3 \"x\"}\n{:foo [:a :b] :bar [:a :b]})\n  \n))","problem":156,"user":"4fe1279fe4b0dd6cd5ce3630"},{"code":"(fn [a v] (zipmap v (repeat a)))","problem":156,"user":"535a18e3e4b04ce2eb3ed2a4"},{"problem":156,"code":"(fn fc156 [v ks]\n  (letfn [(fc156-helper [v ks]\n            (if (empty? ks) []\n              (conj (fc156-helper v (rest ks)) (vector (first ks) v))))]\n    (into (sorted-map) (fc156-helper v ks))))","user":"547884d7e4b0c51c1f4d72bd"},{"code":"(fn [x y] (reduce conj {} (for [key y] [key x])))","problem":156,"user":"4fb86dc9e4b081705acca2d8"},{"code":"(fn [value map-keys] \n  (zipmap map-keys (repeat value)))","problem":156,"user":"523e4e86e4b09833704079a9"},{"problem":156,"code":"(fn [value col]\n  (loop [c col m {}]\n     (if (empty? c)\n      m\n      (recur (butlast c) (assoc m (last c) value)))))","user":"568384b4e4b0945ebc182a9a"},{"problem":156,"code":"(fn\n  [d ks]\n  (into {} (for [x ks]\n    [x d])))","user":"5576fee3e4b05c286339e078"},{"code":"(fn [d k]\n    (reduce\n     (fn [r i] (conj r [i d]))\n     {}\n     k))","problem":156,"user":"5234f716e4b05e80434a505f"},{"problem":156,"code":"(fn [v indexes] (reduce (fn [ha i] (conj ha {i v})) {} indexes))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":156,"code":"(fn [default coll] \n  (into {} (map #(hash-map % default) coll)))","user":"5e5fd9f7e4b0fd0acd158681"},{"problem":156,"code":"(fn [val keys]\n                       (reduce (fn [map k] (assoc map k val))\n                               {}\n                               keys))","user":"5e89b832e4b0cb0169546315"},{"code":"(fn [default, keys] (reduce #(assoc %1 %2 default) {} keys))","problem":156,"user":"4f5595d4e4b0a7574ea71805"},{"code":"(fn [v s] (reduce (fn [r k] (conj r {k v})) {} s))","problem":156,"user":"4fca2a13e4b0ee37620e184d"},{"code":"(fn [value mapkeys]\n (zipmap mapkeys (take (count mapkeys) (repeat value))))","problem":156,"user":"50dcb2f4e4b02e6ac9592c91"},{"code":"(fn draw [default ks] \n  (if (empty? ks)\n    nil\n    (let [[x & xs] ks]\n      (conj {x default} (draw default xs)))))","problem":156,"user":"52deb735e4b09f7907dd13f7"},{"problem":156,"code":"(fn f [de ks]\n\t(if (= (count ks) 1)\n\t\t{(first ks) de}\n\t\t(conj {(first ks) de} (f de (rest ks)))))","user":"5a025edde4b01bb0ae8afd64"},{"problem":156,"code":"(fn [d li] (reduce conj (map #(hash-map %1 d) li)))","user":"5be58beae4b0ed4b8aab4d14"},{"code":"(fn [default coll]\n  (into {}\n    (map #(vector % default) coll)))","problem":156,"user":"4fe9d647e4b0547ebccb2472"},{"problem":156,"code":"(fn [v k] (into (sorted-map) (map (fn [k] (vector k v) ) k )))","user":"53053be9e4b0d8b024fd375b"},{"code":"(fn [default keys]\n  (let [m {}]\n    (into m\n      (for [k keys]\n        (assoc m k default)))))","problem":156,"user":"4eb99b3d535dfed6da9c6d57"},{"code":"#(into {} (for [z %2] [z %]))","problem":156,"user":"4ff520dee4b0678c553fc367"},{"code":"(fn [x lst]\n  (loop [m {} lst lst]\n    (if (empty? lst) m\n    (recur (assoc m (first lst) x) (rest lst)))))","problem":156,"user":"52718620e4b03e8d9a4a73f5"},{"problem":156,"code":"(fn [v ks] (reduce conj (map (fn [k] {k v}) ks)))","user":"53f6d555e4b0db01ade6f9e5"},{"problem":156,"code":"(fn [MyValues Mykeys] (into {} (map (fn [Mapping] (conj [Mapping] MyValues)) Mykeys)))","user":"556ff948e4b09a3098a52527"},{"problem":156,"code":"(fn [defaults keys] (reduce #(assoc %1 %2 defaults) {} keys))","user":"548f1604e4b0e286459a1230"},{"code":"(fn [default keys-seq]\n  (reduce #(assoc %1 %2 default) {} keys-seq))","problem":156,"user":"51c611c4e4b03a28d42333bf"},{"code":"(fn\n  [mval mkeys]\n  (reduce #(conj % [%2 mval]) {} mkeys))","problem":156,"user":"529dd5a4e4b04e0c58e87b82"},{"code":"(fn [v ids]\n  (zipmap ids (repeat v)))","problem":156,"user":"4dddff47535d08e6dec9fdd4"},{"code":"#(apply assoc {}\n   (interleave %2 (repeat %1))\n         )","problem":156,"user":"4f03ba9c535dcb61093f6b58"},{"problem":156,"code":"(fn [default lst] (reduce (fn [mp ky] (assoc mp ky default)) {} lst))","user":"589c6914e4b00487982d535d"},{"code":"#(zipmap %2 ( take (count %2) (repeat %1)) )","problem":156,"user":"531bfb69e4b08068f379ed97"},{"problem":156,"code":"(fn [v coll] (let [s (map #(hash-map % v) coll)] (apply merge s)))","user":"551e2cade4b030e6a24d00e4"},{"problem":156,"code":"(fn [default k] (reduce #(assoc % %2 default) {} k))","user":"5658acabe4b0f9d632dd84b7"},{"problem":156,"code":"#(into {} (let [pair [] newval %1] (for [oldvec %2] (conj pair oldvec newval))))","user":"5c41db45e4b08cd430848ece"},{"problem":156,"code":"(fn [v, k]\n  (let [m {}]\n  \t(apply merge (for [x k]\n    \t(assoc m x v)))))","user":"5590e55de4b0277789237676"},{"problem":156,"code":"(fn myfun\n  ([v ks] (myfun v ks {}))\n  ([v ks m] (if (empty? ks)\n             m\n             (myfun v (rest ks) (assoc m (first ks) v))\n            ))\n  )","user":"5d2f5ba5e4b01671435dbcbf"},{"problem":156,"code":"(fn [x l] (into {} (map #(hash-map % x) l)))","user":"5835a222e4b089d5ab817ce5"},{"code":"(fn[y IN](into {} ((fn[y IN](for[x IN] [x y])) y IN )))","problem":156,"user":"5302d79ce4b0d8b024fd3736"},{"problem":156,"code":"(fn [x col]\n  (apply conj (map #(hash-map % x) col)))","user":"5af4446de4b0cc2b61a3bc93"},{"problem":156,"code":"(fn  [d k] (apply hash-map (conj (into [] (interpose d k)) d )))","user":"5737edb0e4b0cd1946bd1050"},{"problem":156,"code":"(fn [n a] (zipmap a (repeat n)))","user":"575f6a80e4b08062f99a4e80"},{"problem":156,"code":"(fn [value m] (zipmap m (repeat (count m) value)))","user":"58f3c18ee4b0438e51c2cead"},{"problem":156,"code":"(fn[defval x]\n     (reduce conj (let [res {}]\n         (map #(assoc res % defval) x))))","user":"5f727d2fe4b02876ed9fd08f"},{"problem":156,"code":"(fn [v m] \n  (reduce #(assoc % %2 v)\n   {} m))","user":"5508a292e4b06e50f9beb10f"},{"code":"(fn [n vs]\n  (zipmap vs (repeat n)))","problem":156,"user":"4ee82223535d93acb0a66877"},{"code":"(fn [default list] (reduce \n(fn [acc key] (assoc acc key default))\n{} list))","problem":156,"user":"50e9ed1de4b02d54280826d5"},{"problem":156,"code":"(fn [a b]\n  (reduce #(assoc % %2 a) {} b))","user":"55a0d79fe4b0acc240e31502"},{"code":"(fn [d xs] (apply merge (map #(hash-map % d) xs)))","problem":156,"user":"4dbecb06535d020aff1edf6a"},{"problem":156,"code":"#(loop [value %1 keys %2 output {}]\n    (if (empty? keys)\n      output\n      (do\n        (prn \"first key -\" (first keys) \"value: \" value \"output -\" output)\n        (recur value (rest keys) (into output {(first keys) value})))))","user":"5cea925ce4b0a17bb84e2bd2"},{"problem":156,"code":"(fn generate-map [dv ks]\n    (let [joiner (fn [a b] (conj a [b dv]))]\n        (reduce joiner {} ks)))","user":"53b4344de4b047364c0444b4"},{"problem":156,"code":"#(reduce conj (map (fn [x] (hash-map x %1)) %2))","user":"53bcdd41e4b0d9a98559a6c0"},{"code":"#(into {} (for [k %2] [k %]))","problem":156,"user":"4f6160a7e4b0defedf855fbe"},{"problem":156,"code":"(fn [valu mapy]\n  (loop [tmpm mapy newm {}]\n    (if (empty? tmpm)\n      newm\n  (recur (rest tmpm) (assoc newm (first tmpm) valu)))))","user":"59369515e4b02506e01a297e"},{"problem":156,"code":"(fn [n col]\n  (reduce #(assoc %1 %2 n) {} col))","user":"5b4dfd5de4b02d533a91bcc3"},{"problem":156,"code":"(fn\n  [default options]\n  (reduce (fn [result key]\n            (assoc result key default))\n          {}\n          options))","user":"603e8e3ae4b0d5df2af22316"},{"problem":156,"code":"#(reduce into (map hash-map %2 (repeat (count %2) %)))","user":"53abf519e4b047364c044456"},{"code":"(fn [v ks] (reduce conj (map (fn [i] {i v}) ks)))","problem":156,"user":"510cda21e4b078ea71921126"},{"code":"(fn [defaults keyset]\n  (zipmap keyset (repeat (count keyset) defaults)))","problem":156,"user":"506b8242e4b0eda3100c090a"},{"code":"(fn aa [x y]\n   (apply hash-map (interleave (concat y) (concat (vec (repeat (count y) x))))))","problem":156,"user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":156,"code":"(fn [v ks] (reduce merge nil (for [k ks] {k v})))","user":"5dce0151e4b0b296f82db5b5"},{"problem":156,"code":"(fn [defv keys] (zipmap keys (repeat (count keys) defv)))","user":"539338e3e4b0b51d73faaeb9"},{"problem":156,"code":"(fn map-defaults-solution\n  [arg vector]\n  (zipmap vector (repeat arg))\n  )","user":"583d669ee4b089d5ab817d9a"},{"problem":156,"code":"(fn [d ks] (reduce (fn [m k] (assoc m k d)) {} ks))","user":"56416320e4b08d4f616f5efb"},{"problem":156,"code":"(fn [k items] (reduce conj (map (fn [item] {item k}) items)))","user":"5b465b8be4b02d533a91bc65"},{"problem":156,"code":"(fn x[v m] (if (empty? m) (hash-map) (assoc (x v (rest m)) (first m) v)))","user":"59e8bb43e4b0249b72820735"},{"problem":156,"code":"(fn [d thingy] (into {} (map #(vector % d) thingy)))","user":"533b6f01e4b0e30313ee6cce"},{"problem":156,"code":"(fn [default ks]\n  (into {} (map (fn [k] [k default]) ks)))","user":"58b0bbc5e4b0ebc645576ce6"},{"problem":156,"code":"(fn [n coll]\n (zipmap coll (repeat (count coll) n)))","user":"56020b3fe4b04bb52996e19b"},{"problem":156,"code":"(fn [val keys]\n  (reduce (fn [acc key]\n            (assoc acc key val)) {} keys))","user":"5b8162d0e4b047b03b20378b"},{"code":"(fn\n  [value keys]\n  (apply merge (map #(hash-map % value) keys))\n  )","problem":156,"user":"523d06aae4b0dbf0c301728b"},{"code":"(fn [d v] (reduce #(assoc %1 %2 d) {} v))","problem":156,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":156,"code":"(fn [default keys] (reduce #(assoc %1 %2 default) {} keys ))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":156,"code":"(fn [d k] \n\n  \n  (reduce (fn [m kk] (assoc m kk d)) {} k)\n  )","user":"5e5f83a2e4b0fd0acd15867b"},{"problem":156,"code":"(fn [d s] (reduce (fn [m k] (assoc m k d)) {} s))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":156,"code":"(fn [value keys_list] (reduce #(conj %1 [%2 value]) {} keys_list))","user":"560c404fe4b05f002753df30"},{"problem":156,"code":"(fn [d ks]\n  (reduce #(merge %1 {%2 d}) '{} ks))","user":"542b0592e4b0dad94371f286"},{"code":"(fn map-defaults [x colls]\n    (loop[result {}\n          colls colls]\n      (if(empty? colls)\n        result\n        (recur (assoc result (first colls) x) \n               (rest colls)))))","problem":156,"user":"5273562ae4b03e8d9a4a7479"},{"problem":156,"code":"(fn abc [d sq]\n  (zipmap sq (repeat (count sq) d)))","user":"5fe09d1fe4b05ac5b16ea15b"},{"problem":156,"code":"(fn om [seqs keks]\n        ;(loop [seqs seqs keks keks]\n          (if (empty? keks)\n            nil\n            (conj (hash-map (first keks) seqs) (om seqs (rest keks)))))","user":"6038b6b4e4b0d5df2af222ef"},{"problem":156,"code":"(fn [v ks]\n  (reduce (fn [acc k]\n            (assoc acc k v))\n          {}\n          ks))","user":"4f963487e4b0dcca54ed6cd9"},{"problem":156,"code":"(fn [x y] (into {}  (map #(vector % x ) y)))","user":"57124786e4b09c608db70457"},{"code":"(fn [x s]\n  (reduce #(assoc % %2 x) {} s))","problem":156,"user":"4fd2529ae4b04c3a95aa041f"},{"problem":156,"code":"(fn [v col] (into {} (for [x col] {x v})))","user":"54a700c3e4b09f271ff37c90"},{"problem":156,"code":"#(let [ks %2 v %1 m (count %2)] \n    (loop [result {} index 0]\n      (if(< index m)\n        (recur (conj result [(ks index) v]) (inc index))\n        result)\n       )\n    )","user":"54f9c4dfe4b01ecee9d88841"},{"problem":156,"code":"(fn q156 [default col]\n  (apply hash-map (apply concat (map (fn [v] (concat [v] [default])) col)))\n  )","user":"54f5aa4ce4b0f2f3c5226e94"},{"problem":156,"code":"(fn [d ks]\n  (reduce (fn [m k] (assoc m k d)) {} ks))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn m [e l] (apply merge (map #(hash-map % e) l)))","problem":156,"user":"52828298e4b0757a1b17145b"},{"code":"#(into {} (map hash-map %2 (repeat %)))","problem":156,"user":"52f5f8b4e4b09b582c12c9cc"},{"problem":156,"code":"(fn [x c] (into {} (map #(->[% x]) c)))","user":"4e6b8ac8535d8ccf87e9ff19"},{"code":"(fn [d keys]\n  (reduce #(assoc %1 %2 d) {} keys))","problem":156,"user":"4fefd624e4b0678c553fc31b"},{"problem":156,"code":"(fn [v k] (reduce merge (map (fn [x] {x v}) k)))","user":"586631a2e4b0f14aab7c885a"},{"code":"(fn [dflt lst] (reduce #(conj % {%2 dflt}) {} lst))","problem":156,"user":"51040eb2e4b0432126ba9bb4"},{"problem":156,"code":"(fn mymap \n  ([value seqq]\n   (reduce #(assoc % %2 value) {} seqq))\n  ([v s &j](zipmap s (repeat v)))\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"problem":156,"code":"(fn\n  [x y]\n  (reduce\n    #(assoc %1 %2 x)\n    {} y))","user":"5da8e170e4b000c986472c29"},{"problem":156,"code":"(fn [default colls]\n  (apply merge (map (fn [x] {x default}) colls)))","user":"55a12cb1e4b0acc240e3150d"},{"problem":156,"code":"(fn [d coll] (zipmap coll (repeat (count coll) d)))","user":"563a79e5e4b0bfe05bf117fe"},{"code":"(fn [d m]\r\n  (->> m\r\n    (map #(vec (list % d)))\r\n    (reduce conj {})))","problem":156,"user":"504e14c2e4b078edc5f593bf"},{"problem":156,"code":"(fn [default keys]\n  (reduce #(conj %1 [%2 default]) {} keys))","user":"5d231255e4b02ea6f0fb69fe"},{"problem":156,"code":"(fn [in coll]\n  (apply assoc {} (interleave coll (take (count coll) (iterate #(identity %1) in)))))","user":"54caaa48e4b057c6fda3a267"},{"code":"(fn[a b] (apply array-map (interleave b (repeat (count b) a))))","problem":156,"user":"527c4071e4b0757a1b17135a"},{"problem":156,"code":"(fn [defVal col] (reduce #(assoc %1 %2 defVal) {} col))","user":"4f577f25e4b0a7574ea71839"},{"problem":156,"code":"(fn [i v] (zipmap v (repeat i)))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn [default keys]\n  (apply hash-map (interleave keys (repeat (count keys) default))))","problem":156,"user":"4fc6d2c1e4b0ee37620e181b"},{"problem":156,"code":"(fn [key arr] (reduce (fn [result value] (assoc result value key)) {} arr))","user":"5dc85f8ae4b02f9375f4e1da"},{"code":"(fn [v k] (reduce (fn [m n] (assoc m n v)) {} (reverse k)))","problem":156,"user":"51da631be4b02ceefd947766"},{"code":"(fn [x coll] (apply hash-map (apply concat (map #(vector % x) coll))))","problem":156,"user":"4fa85ae4e4b081705acca1d3"},{"problem":156,"code":"(fn [d v] (reduce #(assoc % %2 d) {} v))","user":"57035ccfe4b08d47c97781ef"},{"code":"(fn [d, c] (reduce #(conj %1 (vector %2 d)) {} c))","problem":156,"user":"4ff31e13e4b0678c553fc346"},{"problem":156,"code":"(\n fn (\n     [default_value input_keys]\n     (\n      loop [collection input_keys result {}]\n       (\n        let [first_item (first collection)]\n         (\n          if (empty? collection) result\n           (\n            recur (rest collection) (assoc result first_item default_value)\n           )\n         )\n       )\n     )\n    )\n)","user":"55f7a03de4b06e875b46ceae"},{"problem":156,"code":"(fn [default keys]\n  (reduce (fn [a b] (conj a [b default])) {} keys))","user":"53df4292e4b0d874e779ae40"},{"problem":156,"code":"(fn [x xs] (into {} (map #(hash-map % x) xs)))","user":"5f0dfa48e4b0f30dddfb5d55"},{"code":"(fn [x y] (zipmap y (replicate (count y) x)))","problem":156,"user":"508c33ece4b0f17d83ea26b1"},{"code":"(fn [value key_list]\n  (into {} (map #(hash-map % value) key_list)))","problem":156,"user":"51eb3aace4b0f1f103a0d159"},{"problem":156,"code":"(fn [v coll]\n  (into {} (for [k coll] [k v])))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":156,"code":"(fn [v map-keys]\n  (reduce \n   (fn [acc-map k]\n     (assoc acc-map k v))\n   {}\n   map-keys))","user":"59b93cd7e4b0a024fb6ae3c7"},{"problem":156,"code":"#(reduce (fn [i1, i2] (assoc  i1 i2 %1)) nil %2)","user":"54a7efdee4b09f271ff37c9d"},{"code":"(fn [df ks]\n  (loop [map {} keys ks]\n    (cond (empty? keys) map\n      :else (recur (assoc map (first keys) df) (rest keys)))))","problem":156,"user":"4fbd1ebbe4b081705acca2fe"},{"code":"(fn f1 [dval keys] \n  (if (empty? keys) {}\n     (conj (f1 dval (rest keys)) (hash-map (first keys) dval))))","problem":156,"user":"4fab0b6be4b081705acca20c"},{"problem":156,"code":"#(zipmap (reverse %2) (vec (repeat (count %2) %)))","user":"553093bee4b076ab5578f817"},{"problem":156,"code":"; (fn [v xs] (into {} (for [x xs] [x v])))\n\n(fn [v xs] (zipmap xs (repeat v)))","user":"541e2ff8e4b01498b1a71a8a"},{"problem":156,"code":"(fn [d k]\n  (zipmap k (repeat d) )\n  )","user":"5ccc2a03e4b0ccb06196288f"},{"code":"(fn [v ks] (reduce (fn [a b] (assoc a b v)) {} ks))","problem":156,"user":"4e773be8535d324fb2983d6e"},{"problem":156,"code":"(fn [a b]\n  (zipmap b (repeat a))\n  )","user":"5bed1e4ae4b0a6d31fed2118"},{"code":"(fn [default ks]\r\n  (zipmap ks (repeat (count ks) default)))","problem":156,"user":"4dc97aec535d5973398f9284"},{"problem":156,"code":"(fn [d l]\n  (zipmap l (repeat d)))","user":"532ae82be4b09d4e7a9b552b"},{"code":"(fn [x y] (into {} (for [k y] [k x])))","problem":156,"user":"531488f3e4b08068f379ed16"},{"problem":156,"code":"(fn [defl lst]\n  (reduce #(assoc %1 %2 defl) {} lst))","user":"5adcc688e4b0837691e92c05"},{"problem":156,"code":"(fn [d, v] (zipmap v (repeat d)))","user":"5e735071e4b085ba37836dcf"},{"problem":156,"code":"(fn [d coll]\n  (reduce #(conj %1 [%2 d]) {} coll))","user":"5739fb92e4b0cd1946bd1083"},{"code":"(fn [default keys] (reduce (fn [c k] (conj c [k default])) {} keys))","problem":156,"user":"50d242c0e4b06ad58337ed0f"},{"code":"(fn def-map [defv keys]\n(apply hash-map (interleave keys (repeat defv))))","problem":156,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":156,"code":"(fn [default-val key-seq]\n  (reduce #(assoc %1 %2 default-val) {} key-seq))","user":"550b1c2ce4b06e50f9beb13b"},{"problem":156,"code":"#(reduce (fn [x y](assoc x y %1 )) {} %2)","user":"564e719ee4b0284900eef69b"},{"problem":156,"code":"(fn [v ks]\n  (into (hash-map)\n        (map vector ks (repeat v))))","user":"580bd81ee4b0849f6811b711"},{"problem":156,"code":"(fn  [x ymap]\n (reduce (fn [newmpa keyy] (assoc newmpa keyy x))\n          {} ymap))","user":"58e6a2c5e4b056aecfd47cba"},{"problem":156,"code":"(fn [v ks]\n  (apply hash-map\n         (apply concat\n                (map #(vector % v) ks))))","user":"57008afae4b08d47c97781ca"},{"problem":156,"code":"(fn [dv ks]\n  (into {} (map (fn [k] [k dv]) ks)))","user":"5afca248e4b0cc2b61a3bd12"},{"problem":156,"code":"(fn map-default [default key]\n  (zipmap key (repeat default)))","user":"5e8d3b37e4b0cb016954632c"},{"problem":156,"code":"(fn [v ks]\n  (loop [ks ks, acc {}]\n    (if (empty? ks)\n      acc\n      (recur (next ks) (assoc acc (first ks) v)))))","user":"56e02c1ce4b0ca2494a09602"},{"problem":156,"code":"(fn [defaultValue mySequence]\n  (zipmap (apply vector (reverse mySequence)) (repeat (count mySequence) defaultValue)))","user":"5425d00ee4b01498b1a71b12"},{"problem":156,"code":"(fn [dv stuff] (into {} (map #(hash-map % dv) stuff )))","user":"5ce67c36e4b0a17bb84e2b88"},{"code":"(fn [value keys] (zipmap keys (repeat (count keys) value)))","problem":156,"user":"4f3e05a8e4b0e243712b1f79"},{"code":"(fn [v m] (reduce #(assoc % %2 v) {} m))","problem":156,"user":"4f05ea25535dcb61093f6c02"},{"problem":156,"code":"(fn [defval keycoll] \n  (into {} (for [k keycoll] {k defval})))","user":"542c44f8e4b0dad94371f2a1"},{"problem":156,"code":"(fn [default col] (apply hash-map (interleave col (repeat default))))","user":"4fbe2cfbe4b081705acca30c"},{"code":"(fn [dv s] \n  (reduce #(conj %1 {%2 dv}) \n          {} \n          s))","problem":156,"user":"50336c6be4b0c6c1199c710f"},{"problem":156,"code":"(fn [k coll] (zipmap coll (repeat (count coll) k)))","user":"52485723e4b05ef8e38e63d2"},{"code":"(fn [default keys] (zipmap keys (repeatedly (fn [] default))))","problem":156,"user":"4f030a38535dcb61093f6a47"},{"code":"#(into {} (map (fn [key] [key %1]) %2))","problem":156,"user":"52d2e2a9e4b099d49816f0b8"},{"code":"(fn [v k]\n  (reduce #(conj % [%2 v]) {} k))","problem":156,"user":"52c7f036e4b0c2d177d62126"},{"problem":156,"code":"#(into {} (into [] (map (fn [x] (into [] (concat [x] [%1]))) %2)))","user":"5b044436e4b0cc2b61a3bd71"},{"problem":156,"code":"; (fn [default-v keys-col]\n;     (reduce (fn [acc item] (assoc acc item default-v))\n;             {}\n;             keys-col))\n\n; #(apply assoc {}\n;         (interleave %2 (repeat %1)))\n\n; #(apply hash-map (interleave %2 (repeat %1)))\n\n; #(into {} (for [x %2] [x %1]))\n\n#(zipmap %2 (repeat %))","user":"591ad160e4b09b4ee5954bdf"},{"code":"#(reduce (fn [acc val] (assoc acc val %1)) {} %2)","problem":156,"user":"4f0a5653535d0136e6c222f5"},{"code":"(fn [v ll]\n  (apply merge\n    (map #(hash-map % v) ll)))","problem":156,"user":"4ff5744ae4b0678c553fc36a"},{"problem":156,"code":"(fn add-default [value collec]\n\t(if (empty? collec)\n\t{}\n\t(assoc (add-default value (rest collec))\n\t       (first collec) \n\t       value)))","user":"57af36eae4b0fbc9809a272e"},{"problem":156,"code":"(fn [v ks]\n  ((fn iter [v ks acc]\n    (if (empty? ks)\n      acc\n      (iter v (rest ks) (conj acc {(first ks) v}))))\n   v ks {}))","user":"5edfb1e5e4b0c7845d86b107"},{"problem":156,"code":"(fn [v coll] (into {} (for [x coll] {x v}\n                       )))","user":"54bca097e4b0ed20f4ff6ed4"},{"problem":156,"code":"(fn\n  [default ks]\n  (into {} (map (fn [x] [x default]) ks)))","user":"59a90b2ae4b0bcf4e9a43aff"},{"problem":156,"code":"(fn [default arr](reduce (fn [m, k] (assoc m k default)) {} arr))","user":"54b8fea9e4b0ed20f4ff6e9c"},{"problem":156,"code":"(fn [default-value custom-seq]\n  (into {} (map (fn [x] {x default-value}) custom-seq)))","user":"53051bf6e4b0d8b024fd3759"},{"code":"#(reduce (fn [x y] (assoc x y %))\n           {} %2)","problem":156,"user":"5168d4ebe4b03f62cda68cdf"},{"problem":156,"code":"(fn [default keys] \n  (into (sorted-map) \n        (map \n         (fn [key] [key default]) \n         keys)))","user":"5c7c78c9e4b0d597f478ca94"},{"problem":156,"code":"(fn [v l] \n  (into {} (map #(hash-map %1 v) l)))","user":"586e47dee4b01531a375e9a9"},{"problem":156,"code":"(fn \n  ([v kk] \n    (let [inner (fn\n        ([v [h & t] m]\n          (if (empty? t)\n            (assoc m h v)\n            (recur v t (assoc m h v))\n          )\n        )\n      )]\n      (inner v kk {})\n    )\n  )\n)","user":"553e007ae4b0a04f792994e7"},{"problem":156,"code":"#(\n    loop [  res {} vc %2 ]\n    (if vc\n      \n    (recur (conj res [(first vc)  %] ) (next vc))\n       res\n    \n    )\n    \n    \n    \n     \n)","user":"5735ac67e4b0cd1946bd102b"},{"problem":156,"code":"(fn [x,y] (zipmap y (repeat x)))","user":"560acfc7e4b05f002753df0a"},{"code":"(fn [v s]\n  (loop [m {} k s]\n    (if (empty? k)\n      m\n      (recur (assoc m (first k) v) (rest k)))))","problem":156,"user":"526f9715e4b03e8d9a4a7372"},{"code":"(fn [k vs]\n  (into {} (for [v vs] [v k])))","problem":156,"user":"504c8165e4b09724c857af31"},{"problem":156,"code":"(fn [default key-seq]\n  (apply hash-map (interleave key-seq (repeat default))))","user":"55c3f0c6e4b0e31453f64990"},{"code":"(fn [x coll]\n    (loop [coll coll\n           acc {}]\n      (if (empty? coll)\n        acc\n        (recur (next coll) (merge acc {(first coll) x})))))","problem":156,"user":"4fa2fa5ee4b081705acca186"},{"problem":156,"code":"(fn[x data](zipmap data (take (count data) (repeat x))))","user":"53d10553e4b00fb29b22130f"},{"problem":156,"code":"(fn [val ks]\n  (->> ks\n       (map (fn [k] [k val]))\n       (into {})))","user":"5777c3d6e4b0979f8965164f"},{"problem":156,"code":"(fn [x s]\n  (zipmap s (repeat x)))","user":"5140771ae4b076604f1aa555"},{"code":"(fn [x items] (into {} (for [k items] [k x])))","problem":156,"user":"5244fa73e4b0d8acf9ed6acb"},{"code":"(fn [d ks]\n  (apply hash-map (apply concat (for [k ks] [k d]))))","problem":156,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":156,"code":"(fn mapdefault [v k]\n  (let [result {}]\n    (reduce conj (map (fn [ki] (conj result [ki v])) k))\n    )\n  )","user":"518665cde4b0da5a5be3bad2"},{"problem":156,"code":"(fn [v coll] (apply conj (map #(assoc {} %1 %2) coll (repeat v))))","user":"55af3e6be4b03311e7b732c7"},{"problem":156,"code":"(fn [default xk]\n  (zipmap xk (repeat (count xk) default)))","user":"5ac6bbe3e4b0e27600da7776"},{"problem":156,"code":"(fn [valor chaves]\n  (loop [ch chaves\n         v valor\n         mapa {}]\n    (if (seq ch)\n      (recur (rest ch) v (assoc mapa (first ch) v))\n      mapa)))","user":"58a0ac0de4b02bd94d917e9c"},{"problem":156,"code":"(fn [d ks]\n  (->> ks\n       (map #(vector % d))\n       (into {})))","user":"5bab5440e4b0a20761a23475"},{"problem":156,"code":"(fn [dv v]\n  (reduce (fn [m k] (assoc m k dv)) {} v))","user":"5169d422e4b051e2a73aba53"},{"problem":156,"code":"(fn [default-value ks]\n  (reduce #(assoc %1 %2 default-value) {} ks))","user":"5aa7e6eae4b0d174b936c8c0"},{"problem":156,"code":"#(apply hash-map (apply concat (map list %2 (repeat %1))))","user":"5326e4efe4b09d4e7a9b54f5"},{"problem":156,"code":"#(zipmap %2 (repeat %1));#(apply hash-map (interleave %2 (repeat %1)))","user":"57ee41a6e4b0bfb2137f5baf"},{"code":"(fn t [v m] (reduce merge (for [k m] {k v})))","problem":156,"user":"5315b53ee4b08068f379ed31"},{"problem":156,"code":"(fn [val lst]\n  (into {} (map #(hash-map % val) lst)))","user":"521ceb02e4b0c4ef0be830a5"},{"code":"#(apply merge (map (fn [k] {k %}) %2))","problem":156,"user":"51b41150e4b0f094dd986fac"},{"problem":156,"code":"(fn [val seq]\n  (into {}\n        (for [key seq]\n          (conj [key] val))))","user":"56f02c90e4b04a395b9a0472"},{"code":"(fn [k m] (loop [r {} x m] (if (empty? x) r (recur (assoc r (first x) k) \n (rest x)) )) )","problem":156,"user":"5384bbf8e4b06839e8705ef5"},{"code":"(fn mdef [d c] (zipmap c (repeat (count c) d)))","problem":156,"user":"4ff4c9dae4b0678c553fc360"},{"problem":156,"code":"#(zipmap (reverse %2) (take (count %2) (repeat %1)))","user":"56e4427ce4b03a7c14b85a4c"},{"problem":156,"code":";(#(doall (mapcat (fn[x](x)) (for [x (range (count %2))]\n;   {(get %2 x) %})))0 [:a :b :c])\n\n#(loop [x %2 res {}]\n   (if (empty? x)\n     res\n     (recur (rest x) (merge res {(first x) %}))))","user":"5964c614e4b069c0a1a19770"},{"problem":156,"code":"(fn [v coll]\n   (into {} (for [x coll] {x v})))","user":"5ad233d5e4b0ea6055cfabb0"},{"problem":156,"code":"(fn constant-map [v keys]\n    (zipmap keys (repeat v)))","user":"4fc6305de4b0ee37620e180b"},{"problem":156,"code":"#(apply merge\n        (for [x %2]\n          {x %}))","user":"538d49e1e4b0b51d73faae6b"},{"code":"(fn md [dflt vec] (if (empty? vec){ } (conj (md dflt (rest vec)) {(first vec) dflt})))","problem":156,"user":"524b1bf7e4b09eba1c0223c3"},{"problem":156,"code":"(fn [a b] (reduce (fn [coll x] (assoc coll x a)) {} b))","user":"5f6cb2a5e4b02876ed9fd057"},{"problem":156,"code":"(fn [k ks] (reduce #(assoc %1 %2 k) {} ks))","user":"52d81642e4b09f7907dd1387"},{"problem":156,"code":"(fn [v m] (apply merge (map #(hash-map % v) m)))","user":"56049986e4b0c80df0ca2662"},{"code":"(fn map_with_defaults\n  [default-val my-keys]\n  \n    (into {} (for [x my-keys] {x default-val}))\n    )","problem":156,"user":"528ba6a2e4b0239c8a67aea4"},{"problem":156,"code":"#(into {} (map (fn [k] (vector k %1)) %2))","user":"54588070e4b01be26fd74620"},{"code":"(fn [v k]\n  (reduce #(assoc % %2 v) {} k))","problem":156,"user":"4f410b63e4b0e243712b1fc5"},{"problem":156,"code":"(fn [v coll]\n  (zipmap coll (repeat v)))","user":"537f4652e4b06839e8705eb1"},{"problem":156,"code":"(fn\n  [val keylist]\n  (reduce (fn [x y] (assoc x y val)) {} keylist))","user":"592ac17ae4b072a2710fcf26"},{"problem":156,"code":"(fn [v ks] (reduce (fn [m k] (conj m [k v])) {} ks))","user":"53aeb3ebe4b047364c044477"},{"code":"(fn [n ks] (zipmap ks (repeat (count ks) n)))","problem":156,"user":"52cdb7efe4b07d0d72b2737c"},{"code":"(fn [value\n\t sequence]  \n  (loop [s sequence\n\t     m {}]\n\t(if (empty? s)\n\t  m\n\t  (recur\n\t    (next s)\n\t    (assoc m  (first s) value)))))","problem":156,"user":"514a13cee4b0829bd132edb4"},{"problem":156,"code":"(fn [value keys]\n  (apply hash-map\n      (interleave keys (repeat value))))","user":"5ba0dcfce4b0c0b3ffbd4b98"},{"code":"(fn [x xs] (apply hash-map(interleave xs (repeat x))))","problem":156,"user":"5255bf1ee4b0541d1855b9f1"},{"problem":156,"code":"(fn [x xs] (reduce (fn [acc item] (conj acc {item x})) {} xs))","user":"5a8e9fb5e4b05369db4d2529"},{"problem":156,"code":"(fn [default keyset] \n                      (reduce (fn [acc el] \n                                (conj acc {el default})) \n                                {} keyset))","user":"55ddb3f4e4b050e68259b3cd"},{"problem":156,"code":"(fn [default-value key-list]\n  (loop [keys key-list,\n         output-map {}]\n    (if (empty? keys)\n      output-map\n      (recur (rest keys) (assoc output-map (first keys) default-value)))))","user":"557775a3e4b05c286339e084"},{"problem":156,"code":"(fn foo [default pkeys]\n  (when (not-empty  pkeys)\n  \t  (merge {(first pkeys) default} (foo default (rest pkeys)))))","user":"566df171e4b0a866af6896d2"},{"code":"(fn [x ks] \n  (into {} (map #(hash-map % x) ks))\n)","problem":156,"user":"51897709e4b0288ada3dbdaa"},{"code":"(fn [d k] (apply hash-map (concat (interpose d k) (cons d '()))))","problem":156,"user":"4ff76effe4b0678c553fc390"},{"problem":156,"code":"(fn [default others]\n  (reduce #(conj %1 {%2 default}) {} others))","user":"5628f33ce4b00e49c7cb47f3"},{"problem":156,"code":"(fn [d coll]\n  (apply conj (map #(hash-map % d) coll))\n  )","user":"577c3da9e4b0c8d87281f6b9"},{"code":"(fn [d k]\n  (reduce #(assoc % %2 d) {} k))","problem":156,"user":"51a49b21e4b0def3c5c58694"},{"problem":156,"code":"(fn [default seq1] (apply array-map (mapcat identity (map #(seq [% default]) seq1))))","user":"57f52d3be4b0903ccab3dce7"},{"code":"(fn [defaults keys]\n  (let [f (fn [mapper key]\n            (assoc mapper key defaults))]\n    (reduce f\n            {}\n            keys)))","problem":156,"user":"4ef9b021535dced4c769f269"},{"code":"(fn [d v]\n(reduce merge (map\n#(merge {} {% d}) v \n)\n)\n)","problem":156,"user":"518aec06e4b06da86c1973c2"},{"code":"(fn[v s]\n  (reduce #(conj %1 [%2 v]) {} s))","problem":156,"user":"4dbd2aa3535d020aff1edf40"},{"code":"(fn [val keys]\n  (loop [k keys answer (hash-map)]\n    (if (empty? k) answer\n      (recur (rest k)\n       (assoc answer (first k) val)\n      )\n    )\n  )\n)","problem":156,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"(fn [v m]\n    (zipmap m (repeat v)))","problem":156,"user":"53528cd3e4b084c2834f4af2"},{"code":"(fn [a lst] \n  (zipmap lst (repeat (count lst) a)))","problem":156,"user":"5054c853e4b0b1b9d1860eb3"},{"code":"(fn [d seq]\n   (zipmap seq (repeat (count seq) d))\n  )","problem":156,"user":"4fc3b0d4e4b081705acca343"},{"code":"(fn create-map [default keys]\r\n     (zipmap keys (repeat default)))","problem":156,"user":"4f82e14be4b033992c121c0c"},{"problem":156,"code":"(fn [defval vect] (zipmap vect (repeat defval)))","user":"5a5894d9e4b05d388ecb6c81"},{"code":"(fn [d l] (into {} (map  #( assoc {} % d) l)))","problem":156,"user":"50ef3e5de4b0a78662fa2652"},{"code":"(fn [d k] (loop [k k d d acc {}] (if (empty? k) acc (recur (rest k) d (conj acc [(first k) d])))))","problem":156,"user":"504f865ee4b0a02f9cffde90"},{"problem":156,"code":"(fn [value mySeq] (apply hash-map (interleave mySeq (cycle [value]))))","user":"58669dd0e4b0f14aab7c8867"},{"problem":156,"code":"(fn [default list]\n              (->> list\n                   (map #(vector % default))\n                   (into {})\n                   )\n              )","user":"5e491182e4b043cd24807a46"},{"code":"(fn [d v] (into {} (map (fn [x] {x d}) v)))","problem":156,"user":"4ddbd600535d02782fcbe9fb"},{"problem":156,"code":"(fn [x s]\n\t(apply merge (map #(assoc {} %1 x) s)))","user":"4fd9cc7ee4b05e33b9224f3a"},{"problem":156,"code":"(fn [vs ks] (zipmap ks (repeat vs)))","user":"5923554ee4b0a390037439f2"},{"code":"(fn [x y] \n  (zipmap y (repeat x)  ))","problem":156,"user":"5149c2f1e4b0829bd132edb0"},{"problem":156,"code":"(fn [x s] (apply hash-map (reduce #(conj %1 %2 x) [] s)))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn [d ks]\n  (apply merge\n  (for [k ks] {k d})))","problem":156,"user":"4fac80d1e4b081705acca22a"},{"code":"(fn [dv, ks] (zipmap ks (repeat dv)))","problem":156,"user":"4dada426c9a9d6ed2a99dc57"},{"code":"(fn [a b] (apply hash-map (reduce into (for [x b y [a] :while true] [x y]))))","problem":156,"user":"53874820e4b06839e8705f1b"},{"problem":156,"code":"(fn default-map [value map_keys]\n  (if (not-empty map_keys)\n    (conj (default-map value (rest map_keys)) {(first map_keys) value})\n    {}))","user":"5f3bc8dae4b004f08c61c541"},{"code":"(fn [v ks]\n   (reduce (fn [rs k] (conj {k v} rs)) {} ks))","problem":156,"user":"52d17182e4b0d9f9285948dd"},{"code":"(fn [v m] (reduce #(assoc %1 %2 v) {} m))","problem":156,"user":"4dc42799c647a3c54c2ddc71"},{"problem":156,"code":"(fn [defaultValue coll]\n  (apply hash-map (mapcat #(list % defaultValue) coll))\n)","user":"506af7d8e4b0a2a5463de37d"},{"code":"(fn [v k] (zipmap k (for [x [:a :b :c]] v)))","problem":156,"user":"5151d173e4b03e678e393adf"},{"problem":156,"code":"#(reduce (fn [acc n] (assoc acc n %)) {} %2)","user":"56d69d28e4b0ea9b8538f7cf"},{"problem":156,"code":"(fn [d keys] (reduce #(conj %1 [%2 d]) {} keys))","user":"5812eb8fe4b0f478707a0602"},{"problem":156,"code":"(fn [v keys] (into {} (map vector keys (repeat v))))","user":"58cfb517e4b03c36ff7e58b9"},{"problem":156,"code":"#(loop [result {} x %1 coll %2]\n  \t(if (empty? coll)\n      result\n      (recur (into result {(first coll) x }) x (rest coll))))","user":"56b9d20ee4b0f2655033593b"},{"problem":156,"code":"(fn [x ks]\n  (reduce #(assoc %1 %2 x) {} ks))","user":"5655d811e4b0f9d632dd849a"},{"problem":156,"code":"(fn default-map [default-value map-keys] (zipmap map-keys (repeat default-value)))","user":"5c506951e4b0f9f7a8770ec5"},{"code":"(fn [d m] (zipmap m (repeat (count m) d)))","problem":156,"user":"4f98da04e4b0dcca54ed6cf7"},{"problem":156,"code":"(fn [v m]\n  (reduce (fn [mm n]\n            (conj mm {n v})\n            )  {} m))","user":"579601c8e4b0e215f87e8492"},{"problem":156,"code":"(fn build-map\n  ([default-val input-seq]\n   (build-map default-val input-seq []))\n  ([default-val input-seq build-pairs]\n   (if (empty? input-seq)\n       (into {} build-pairs)\n       (build-map default-val (rest input-seq) (conj build-pairs (vector (first input-seq) default-val))))))","user":"53b05a36e4b047364c044481"},{"problem":156,"code":"(fn [n, m] (zipmap m (repeat n)))","user":"5a011305e4b01bb0ae8afd40"},{"problem":156,"code":"(fn [default xs]\n  (into {}\n  \t(map #(identity [% default]) xs)))","user":"555b3919e4b0deb715856e4c"},{"code":"(fn\n  [x y]\n  (loop [vl x ky y z (hash-map)]\n  (if (empty? ky)\n    z\n    (recur vl (rest ky) (conj (hash-map (first ky) vl) z)))))","problem":156,"user":"51f13b80e4b06a20a2523f38"},{"code":"(fn build-map [value coll] (apply hash-map ((fn [c] (reduce #(conj %1 %2 value) [] c)) coll)))","problem":156,"user":"5046f909e4b03b02161376b5"},{"code":"(fn [z n] (reduce (fn [x y] (conj x [y z])) {} n))","problem":156,"user":"52d4acc8e4b09f7907dd1333"},{"problem":156,"code":"(fn [d k] (apply hash-map (interleave k (repeat d))))","user":"594bc16be4b07ddc2dafae39"},{"problem":156,"code":"(fn [default keys]\n  (reduce\n   (fn [map key] (assoc map key default))\n   {} keys))","user":"5561d2c2e4b0c656e3ff17cd"},{"problem":156,"code":"(fn [default xs]\n  (reduce #(assoc %1 %2 default) {} xs))","user":"5cc75ffce4b0ccb061962836"},{"problem":156,"code":"(fn [x xs]\n  (loop [m {} \n         ks xs]\n    (if (empty? ks)\n      m\n      (recur (assoc m (first ks) x) \n        \t (rest ks)))))","user":"58bfa57ae4b021aa9917ecd8"},{"problem":156,"code":"(fn map-default [v coll]\n  (zipmap coll (repeat (count coll) v)))","user":"565654dae4b0f9d632dd849f"},{"problem":156,"code":"(fn [n c]\n  (zipmap c (repeat (count c) n)))","user":"5954edcbe4b066ee0a44af15"},{"problem":156,"code":"(fn [x y] (reduce (fn [acc k] (assoc acc k x)) {} y))","user":"57c92bdbe4b05aa3c4741d27"},{"code":"(fn [x coll] (into {} (map #(vector % x) coll)))","problem":156,"user":"5174ade2e4b07031762f2edf"},{"code":"(fn  [default keys]\n  (apply merge (map (fn [key] {key default} ) keys ))\n  )","problem":156,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":156,"code":";; this took me hours\n(fn [defaultvalue, collection] \n  (zipmap collection (repeat defaultvalue)))","user":"570577bbe4b0b0fb43fd0672"},{"code":"(fn my-assoc\n  ([default-value map-keys] (my-assoc default-value map-keys {}))\n  ([default-value [a & more] res]\n    (if a (recur default-value more (assoc res a default-value))\n          res)))","problem":156,"user":"4f74a4fbe4b044e54cd9a901"},{"problem":156,"code":"(fn [dv xs] \n  (reduce conj \n    (map #(hash-map %1 dv) xs)))","user":"5b25fbb9e4b063e2438bcc2e"},{"problem":156,"code":"(fn [v ks]\n  (into {}\n        (for [k ks]\n          (conj [k] v))))","user":"5fe9169ce4b05ac5b16ea1a0"},{"problem":156,"code":"(fn fun1 [d k] (reduce (fn [acc i] (conj acc [i d])) {} k))","user":"55c0f842e4b01b9910ae2a2b"},{"code":"(fn [x v]\n  (reduce #(assoc %1 %2 x) {} v))","problem":156,"user":"4e99819a535dbda64a6f6b66"},{"problem":156,"code":"(fn [default coll]\n  (let [result (for [item coll]\n                 (conj [item] default))]\n    (into (hash-map) (vec result))))","user":"5b13763be4b0cc2b61a3be4f"},{"problem":156,"code":"(fn\n  [value mykeys]\n  (into {} \n        (map (fn [akey] [akey value]) mykeys)\n  )\n)","user":"520fca70e4b080a8d9b9d631"},{"code":"(fn [d v] (into {} (for [vv v] { vv d})))","problem":156,"user":"51fe9858e4b0f1313d468a6e"},{"code":"(fn [default s]\n  (loop [c (count s) results {}]\n     (if (> c 0)\n         (recur (dec c) (conj results {(nth s (- c 1)) default}))\n        results)))","problem":156,"user":"5057852ce4b0012181721992"},{"code":"#(zipmap %2 (map (constantly %1) %2))","problem":156,"user":"514afd1be4b0bd81940b86c6"},{"code":"(fn [x y]\n  (loop [data {} sec y]\n    (if (nil? (first sec))\n      data\n      (recur (assoc data (first sec) x) (rest sec)))))","problem":156,"user":"4f16d3fd535d64f60314644e"},{"code":"#(into{} (for [x %2] {x %}))","problem":156,"user":"5320bbcfe4b09d4e7a9b54a6"},{"problem":156,"code":"(fn [default keys]\n  (loop [m {} k keys]\n    (if (empty? k)\n      m\n      (recur (assoc m (first k) default) (rest k))\n    )\n  )\n)","user":"5643a11ee4b0018b46ad8bfb"},{"problem":156,"code":"(fn default-map [default-value the-vector]\n  (apply merge ; Flattens down the seq of maps\n   (map #(hash-map % default-value) the-vector)))","user":"5782ce69e4b0d36ec5835e9a"},{"code":"(fn [x y] (loop [v x se y res {}] (if (= () se) res (recur v (rest se) (conj res {(first se) v})))))","problem":156,"user":"51a7f74be4b08d8ec191b802"},{"problem":156,"code":"(fn [in-x in-y]\n      (zipmap in-y (map (fn [x] in-x) in-y)))","user":"5df94f73e4b0a607a9a45cb6"},{"problem":156,"code":"(fn defX [d x] (zipmap x (repeat (count x) d)))","user":"568820e8e4b0dcc4269f4067"},{"code":"(fn [value,keyset] (into {} (map #(hash-map % value) keyset)))","problem":156,"user":"4fc5273ce4b081705acca37f"},{"code":"(fn[i v] (into {} (let [m {}] (for [k v] (assoc m k i)))))","problem":156,"user":"4f148418535d64f60314643a"},{"problem":156,"code":"(fn [def-val keys]\n   (apply merge (map (fn [k] (hash-map k def-val)) keys)))","user":"5fb544f6e4b08cb800c85b4e"},{"problem":156,"code":"#(into (hash-map) (map (fn [x] [x %1]) %2))","user":"56684356e4b04acd4f672de4"},{"problem":156,"code":"(fn [dfl keylist] (zipmap keylist (repeat dfl)))","user":"55f04526e4b06e875b46ce20"},{"problem":156,"code":"(fn [default keez] (zipmap keez (repeat (count keez) default)))","user":"4f71ac00e4b07046d9f4f010"},{"problem":156,"code":"(fn [defVals seqOfKeys] (into {} (for [x seqOfKeys] {x defVals} )))","user":"5662ca50e4b0e91d5f5c564c"},{"problem":156,"code":"#(reduce (fn [colls c] (assoc colls c %1))\n         {} %2)","user":"55db7e15e4b0e31453f64ae8"},{"code":"(fn [x ys]\n  (reduce #(assoc %1 %2 x) {} ys))","problem":156,"user":"53800d99e4b06839e8705ebd"},{"problem":156,"code":"(fn map-with-defaults [default-value keys]\n  (into {} (map\n            (fn [key] [key default-value])\n            keys)))","user":"551bdefde4b07993ea3788d7"},{"code":"(fn [k l] (reduce (fn [m i] (assoc m i k)) {} l))","problem":156,"user":"504e5e8de4b0f6ff3350c4a8"},{"problem":156,"code":"(fn [value kys] (into {} (map #(vector % value) kys)))","user":"5bfe4ecfe4b0bdcf453d1608"},{"problem":156,"code":"#(reduce \n   (fn \n     [final-map curr-key] \n     (conj final-map  {curr-key %1})) \n   {} %2)","user":"5c20b6abe4b07e362c230576"},{"problem":156,"code":"(fn mapDef\n  [x col]\n  (reduce #(assoc %1 %2 x) {} col))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":156,"code":"(fn [d col] (apply hash-map (mapcat #(list % d) col)))","user":"58a822e4e4b01a0c0b232950"},{"problem":156,"code":"(fn [default coll] (apply assoc {} (interleave coll (cycle [default]))))","user":"577829f9e4b0979f8965165a"},{"problem":156,"code":"(fn [v ks] (apply hash-map (apply concat (map (fn [k] [k v]) ks))))","user":"55b7b7c1e4b01b9910ae29a9"},{"problem":156,"code":"(fn [dflt ks]\n  (loop [[k & kk] ks m {}]\n    (if (empty? kk) \n      (assoc m k dflt)\n      (recur kk (assoc m k dflt)))))","user":"57f85b36e4b0d3187e900924"},{"problem":156,"code":"(fn [val keys] (reduce (fn [m key] (assoc m key val)) {} keys))","user":"5679a4d0e4b05957ce8c618d"},{"code":"(fn [e c] (reduce #(assoc %1 %2 e) {} c))","problem":156,"user":"4ed3c783535d44c135fd68f6"},{"code":"(fn mapdefs [x v]\n    (reduce merge  (for [i v] (assoc {} i x)))\n  )","problem":156,"user":"4ec4d723535dcc7ae8597d65"},{"problem":156,"code":"(fn [v m]\n  (loop [result {}\n         keys m]\n    (if (empty? keys)\n      result\n      (recur (assoc result (first keys) v)\n             (rest keys)))))","user":"6051bcfae4b056659d634203"},{"code":"(fn [a b]\n  (zipmap b (repeat a)))","problem":156,"user":"4f859146e4b033992c121c46"},{"problem":156,"code":"(fn[key col] \n    (loop [res {}, col-ele col]\n      (if (empty? col-ele)\n        res\n        (recur\n          (assoc res (first col-ele) key)\n          (rest col-ele))\n      )))","user":"5799b260e4b05b1deef9adc8"},{"code":"(fn [dv sk] (reduce (fn [val it] (assoc val it dv)) {} sk))","problem":156,"user":"4fc52d79e4b081705acca386"},{"code":"#(apply hash-map (interleave %2 (repeat %)))","problem":156,"user":"4e16bdef535d04ed9115e7e9"},{"problem":156,"code":"(fn [v k] \n  (reduce #(conj %1 {%2 v}) {} k)\n)","user":"550345fee4b086ebe8a79c6c"},{"code":"(fn [a coll]\n  (reduce #(merge {%2 a} %1) {} coll))","problem":156,"user":"5031eb3be4b000fc67a99a84"},{"code":"(fn [default x]\n   (apply hash-map (mapcat (fn [n] [n default]) x)))","problem":156,"user":"525cc912e4b0cb4875a45d48"},{"problem":156,"code":"#(zipmap (seq %2) (repeat %1))","user":"54185dc3e4b01498b1a71a19"},{"problem":156,"code":"(fn [x ks]\n  (apply hash-map (apply concat (map #(list % x) ks))))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":156,"code":"(fn [d v]\n  (apply conj (map (fn [x] {x d}) v))\n  )","user":"569f8736e4b0542e1f8d1495"},{"code":"(fn [k vs]\n  (reduce #(assoc %1 %2 k) {} vs))","problem":156,"user":"4ea5ba92535d7eef308072d9"},{"code":"(fn [x coll] (reduce #(assoc %1 %2 x) {} coll))","problem":156,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":156,"code":"(fn [x col]\n  (reduce #(assoc %1 %2 x) {} col)\n)","user":"547b4ec6e4b0c51c1f4d72d5"},{"code":"(fn [v keys] (reduce #(conj %1 [%2 v]) {} keys))","problem":156,"user":"4e7f8f85535db966e863cc44"},{"code":"(fn [a b]\n    (loop [x a, lst b, mp {}]\n      (if (= '() lst) mp\n\t  (recur x (rest lst) (assoc mp (first lst) x)))))","problem":156,"user":"50d324dde4b049d4ed5650d7"},{"code":"(fn [x y] (if (= x 0) {:a 0 :b 0 :c 0}\n          (if (= x \"x\") {1 \"x\" 2 \"x\" 3 \"x\"}\n          {:foo [:a :b] :bar [:a :b]})))","problem":156,"user":"502d39f8e4b0d96a44ab2032"},{"problem":156,"code":"(fn [d ks]\n  \n  (into {} (map #(hash-map % d) ks))\n  )","user":"56f2611fe4b04a395b9a04a2"},{"code":"(fn [def-val sequen]\n   (if (= (count sequen) 3)\n     {(sequen 0) def-val (sequen 1) def-val (sequen 2) def-val}\n     {(sequen 0) def-val (sequen 1) def-val}))","problem":156,"user":"52151220e4b0961f15ac4da7"},{"code":"(fn [d keys] (reduce #(assoc %1 %2 d) {} keys))","problem":156,"user":"50813b88e4b09292fd669443"},{"problem":156,"code":"(fn [defaultval keylist]\n (loop [newmap {} newkeylist keylist] \n  (if (empty? newkeylist)\n    newmap\n  \t(recur (assoc newmap (first newkeylist) defaultval) (rest newkeylist))\n    )\n   )\n  )","user":"57a13745e4b0c3d858beb8e3"},{"problem":156,"code":"(fn [scalar vector] (reduce (fn [new-map elem] (assoc new-map elem scalar )) {} vector))","user":"58951903e4b00487982d5274"},{"code":"(fn [x y] (reduce (fn [x1 y1] (assoc x1 y1 x)) {} y))","problem":156,"user":"5136ca56e4b04ac1f358dd5a"},{"problem":156,"code":"(fn f [x l] (if (empty? l) {} (assoc (f x (rest l)) (first l) x)))","user":"565e0934e4b068f2fe63dc30"},{"problem":156,"code":"#(reduce (fn [o i] (merge o {i %1})) {} %2)","user":"5651de3ee4b0f9d632dd845b"},{"problem":156,"code":"(fn [d k](into {} (map (fn [k] [k d]) k)))","user":"55597b84e4b0deb715856e36"},{"problem":156,"code":"(fn [defa lis] (zipmap lis (repeat defa)))","user":"5713f693e4b07c98581c3ab0"},{"code":"(fn [v k] (zipmap k (iterate identity v)))","problem":156,"user":"52c1f404e4b07a9af5792370"},{"problem":156,"code":"(fn [default v] (into {} (map (fn [x] (vector x default)) v)))","user":"56d340fde4b0ea9b8538f7ab"},{"problem":156,"code":"(fn [k v] (apply merge (map #(hash-map %1 k) v)))","user":"5654e024e4b0f9d632dd848d"},{"problem":156,"code":"(fn [default seq-keys]\n  (reduce (fn [result-map seq-key] (into result-map (seq {seq-key default}))) \n          {} seq-keys))","user":"58d3d6a3e4b03c36ff7e592b"},{"code":"(fn [default-val m] (reduce #(assoc %1 %2 default-val) {} m))","problem":156,"user":"52a503e4e4b0c58976d9abe1"},{"problem":156,"code":"(fn [x s] (into {} (map (fn [y] [y x]) s)))","user":"589771f9e4b00487982d52bd"},{"problem":156,"code":"(fn func [x y] (reduce #(assoc %1 %2 x) {} y))","user":"56cef5e8e4b0ea9b8538f762"},{"problem":156,"code":"(fn [val keys]\n  (loop [k keys m {}]\n    (if (empty? k)\n      m\n    (recur (rest k) (assoc m (first k) val)))))","user":"55151417e4b055c2f668d4da"},{"code":"(fn [d ks](zipmap ks (repeat (count ks) d)))","problem":156,"user":"4fb069b1e4b081705acca266"},{"problem":156,"code":"#(zipmap  %2 (repeat %1))","user":"55249f64e4b0882d96d091c6"},{"problem":156,"code":"(fn [default list] (apply hash-map (apply concat (map (fn [x] [x default]) list))))","user":"5d84545ee4b0915913b1d38b"},{"problem":156,"code":"(fn [default c]\n  (zipmap c (repeat default)))","user":"5cc7342be4b0ccb061962830"},{"problem":156,"code":"(fn [val col]\n            (reduce (fn [result x]\n                      (conj result [x val]))\n                    {} col))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":156,"code":"(fn [x keys] (into {} (map #(assoc {} % x) keys)))","user":"53e4fa2ce4b036ad0777e454"},{"problem":156,"code":"(fn mapper [dk v] (if (empty? v) {}\n             (merge {(first v) dk} (mapper dk (rest v)))))","user":"53e2ac1ae4b036ad0777e3f3"},{"problem":156,"code":"#(reduce (fn [arr item] (conj arr {item %1})) {} %2)","user":"58ed2e21e4b056aecfd47d7a"},{"code":"(fn [v, ks] (reduce (fn [acc, x] (merge acc {x v})) {} ks))","problem":156,"user":"51f40a4ce4b0fca5e8b4822f"},{"problem":156,"code":"(fn [d col] (reduce (fn [m k] (assoc m k d)) {} col))","user":"5ab168d2e4b073f1774425c2"},{"problem":156,"code":"(fn [x coll] (apply hash-map (concat (interpose x coll) [x])))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"problem":156,"code":"#(apply merge (map (fn [key] {key %1}) %2))","user":"59f192e0e4b0966464fe6a5e"},{"code":"(fn [d col]\n  (apply assoc {} (interleave col (repeat (count col) d))))","problem":156,"user":"524d90c0e4b0a16e35cf6ded"},{"problem":156,"code":"(fn create-map [d ks]\n  (reduce (fn [m k] (assoc m k d)) {} ks))","user":"58bb218be4b0888cdc949cf4"},{"problem":156,"code":"(fn [d ks]\n  \t(reduce #(assoc % %2 d)\n            {}\n            ks))","user":"5703a557e4b08d47c97781f4"},{"problem":156,"code":"(fn map-defaults [v ks] (reduce #(assoc %1 %2 v) {} ks))","user":"542c1f73e4b0dad94371f29d"},{"problem":156,"code":"(fn[v s](apply hash-map(interleave s (repeat v))))","user":"54755abce4b0c51c1f4d7299"},{"problem":156,"code":"(fn [v k]\n  (zipmap k (map (constantly v) k))\n  )","user":"53edb628e4b0d648e757f4c8"},{"code":"(fn [value collection] (into {} (for [key collection] [key value])))","problem":156,"user":"5328b1ece4b09d4e7a9b5508"},{"code":"(fn [v ks] (apply hash-map (mapcat list ks (repeatedly (constantly v)))) )","problem":156,"user":"523b1a65e4b02f719975bdbd"},{"code":"#(zipmap%2(repeat %1))","problem":156,"user":"52496f0ae4b05ef8e38e6459"},{"problem":156,"code":"(fn\n  [v m]\n  (zipmap m (repeat v)))","user":"603e8a3be4b0d5df2af22314"},{"problem":156,"code":"(fn [v ks]\n  ((fn r [v ks m]\n     (if (empty? ks)\n       m\n       (r v (rest ks) (assoc m (first ks) v)))) v ks {}))","user":"60919461e4b00e9e6653c3d7"},{"problem":156,"code":"(fn [val map] (reduce #(assoc %1 %2 val) {} map))","user":"53607c32e4b0243289761e37"},{"problem":156,"code":"(fn [v coll]\n  (into {} (map (fn [k] [k v]) coll)))","user":"54d321b3e4b0e8a36923e602"},{"code":"(fn [num aseq]\n  (loop [amap {}\n         items aseq]\n    (if (seq items)\n      (recur (assoc amap (first items) num) (rest items))\n      amap)))","problem":156,"user":"52e6aea1e4b09f7907dd147c"},{"problem":156,"code":"(fn createMap [l ls] (reduce #(conj %1 {%2 l}) {} ls))","user":"566ff0a1e4b0a866af6896ec"},{"problem":156,"code":"(fn [v ks] (loop [m {} ks ks] (if (empty? ks) m (recur (assoc m (first ks) v) (rest ks)))))","user":"59ac757fe4b00adcf69795d3"},{"problem":156,"code":"(fn [default seq] (apply hash-map (concat (interpose default seq) (list default))))","user":"553024c3e4b076ab5578f80d"},{"code":"(fn [dv ks] (zipmap ks (repeat (count ks) dv)))","problem":156,"user":"503e7f06e4b06c4e0e1fa268"},{"problem":156,"code":"(fn [d v] (reduce (fn [coll v] (assoc coll v d)) {} v))","user":"55818b0ee4b05c286339e0fb"},{"problem":156,"code":"(fn [default xs]\n  (apply assoc {} (interleave xs (repeat default))))","user":"54cb378be4b057c6fda3a273"},{"code":"(fn [def-val  keys] (apply merge (map #(hash-map % def-val) keys)))","problem":156,"user":"5394162be4b0b51d73faaec5"},{"problem":156,"code":";#(zipmap %2 (repeat %1))\n\n(fn [v ks]\n  (into {}\n        (for [k ks]\n          [k v])))","user":"58299e03e4b051871117bf46"},{"code":"(fn [k v]\n  (apply hash-map\n         (apply concat\n                (for\n                  [V v]\n                  [V k]))))","problem":156,"user":"53806e5be4b06839e8705ec1"},{"problem":156,"code":"(fn [value, keys] (into {} (for [x keys] {x value})))","user":"569f7bc2e4b0542e1f8d1494"},{"code":"(fn[default, k] (into {} (for [x k] [x default])))","problem":156,"user":"4dbac43b535d1e037afb21ac"},{"problem":156,"code":"(fn [dv dkeys] \n  (zipmap \n   dkeys \n   (vec (replicate (count dkeys) dv))))","user":"56351709e4b0bfe05bf117c2"},{"problem":156,"code":"(fn tr_map [defVal list] (into {} (for [i list] [i defVal])))","user":"5bc352abe4b07a9b28b10041"},{"problem":156,"code":"(fn [default coll] (into {} (for [x coll] {x default})))","user":"5afd31b7e4b0cc2b61a3bd18"},{"problem":156,"code":"(fn set-default [default vector-obj] \n  (into {} (for [x vector-obj] {x default})))","user":"552689cfe4b0ffed3738f91e"},{"problem":156,"code":"(fn [df coll] \n  (apply hash-map (interleave coll (repeat df))))","user":"5509bd6ee4b06e50f9beb120"},{"problem":156,"code":"(fn [defaultvalue vk]\n         (reduce \n           #(assoc %1 %2 defaultvalue) \n           {}\n           vk))","user":"58455b05e4b089d5ab817e65"},{"code":"(fn [default-val keys]\r\n  (zipmap keys\r\n          (repeat default-val)))","problem":156,"user":"4fabbb97e4b081705acca21d"},{"code":"(fn createDefaultMap [defaultVal l]\n  (reduce \n    (fn [m v] (assoc m v defaultVal)) \n{} l))","problem":156,"user":"4f032cb1535dcb61093f6a70"},{"problem":156,"code":"(fn [d s]\n  (reduce \n   (fn [a b]\n     (merge {b d} a)) {} s))","user":"565233f2e4b0f9d632dd8461"},{"problem":156,"code":"(fn [default keys]\n  (apply merge (for [key keys] {key default})))","user":"544f732fe4b0e39780006994"},{"problem":156,"code":"(fn\n  [val coll]\n  (loop [ans {} curr-coll coll]\n    (if (empty? curr-coll)\n      ans\n      (recur (assoc ans (first curr-coll) val) (rest curr-coll))\n      )\n    )\n  )","user":"60337f1fe4b0d5df2af222c1"},{"problem":156,"code":"(fn [dv seqs]\n  (loop [s {} c (count seqs)]\n    (if (= c 0)\n      s\n      (recur (assoc s (nth seqs (- c 1)) dv) (dec c)))))","user":"561a1af6e4b053970a773b02"},{"problem":156,"code":"(fn r [v ks] (if (empty? ks) {} (assoc (r v (rest ks)) (first ks)  v)))","user":"5ab3edf0e4b073f17744260d"},{"problem":156,"code":"(fn [a b] (into {} (map (fn [c] {c a}) b)))","user":"58273e82e4b051871117bf1b"},{"code":"(fn [d xs]\n  (reduce\n    (fn [map key] (assoc map key d))\n    {}\n    xs))","problem":156,"user":"4fb1325de4b081705acca276"},{"problem":156,"code":"#(zipmap %2 (repeat %1))\n;#(apply assoc {} (interleave %2 (repeat %1)))","user":"53cacdb5e4b00fb29b2212cb"},{"problem":156,"code":"(fn [default arr]\n\t(->> arr\n        (map (fn [x] [x default]))\n        (reduce conj {})))","user":"541404c2e4b01498b1a719e7"},{"problem":156,"code":"(fn try-me [def-val seq_of_keys]\n  (loop [s_o_k seq_of_keys accumulator {}]\n    (if (empty? s_o_k)\n      accumulator\n    (recur (rest s_o_k) (assoc accumulator (first s_o_k) def-val)))))","user":"53ef235de4b0d648e757f4d4"},{"problem":156,"code":"(fn mapvd [d ks]\n  (apply conj\n    (map\n      #(identity {% d})\n      ks)))","user":"55b4fa46e4b01b9910ae2983"},{"code":"(fn [a n] (apply assoc{} (vec (interleave n (repeat a)))))","problem":156,"user":"534e1f56e4b084c2834f4aae"},{"problem":156,"code":"#(into {} (for [x %2 y [%1]] [x y]))","user":"57ecc16fe4b0bfb2137f5b83"},{"problem":156,"code":"(fn [def-val arr] (apply array-map (interleave arr (take (count arr) (repeat def-val)))))","user":"59f9c111e4b0ca45a743a349"},{"code":"#(\n  loop [coll %2 result {}]\n\t(\n\t\tif (= (count coll) 0)\n\t\t\tresult\n\t\t\t(\n\t\t\t\trecur (rest coll) (assoc result (first coll) %1)\n\t\t\t) \t\n\t)\n)","problem":156,"user":"4ff2f0a9e4b0678c553fc341"},{"code":"(fn [default ks]\n  (reduce (fn [map key] (merge map {key default})) {} ks))","problem":156,"user":"4f03641a535dcb61093f6a9b"},{"problem":156,"code":"(fn [initial vec] (into {} (map (fn [x] [x initial]) vec)))","user":"4fec0824e4b0681fd128dc9c"},{"problem":156,"code":"(fn padded-map [dflt, ks] (reduce (fn [acc k] (assoc acc k dflt)) {} ks ))","user":"561814bae4b06b1bb2182a1a"},{"problem":156,"code":"(fn [v coll]\n        (into {} (mapv #(vector %1 v) coll)))","user":"5c8005cee4b0c8042a70ce0a"},{"code":"(fn [d l] \r\n    (loop [ acc {} rem l ] \r\n  (if (empty? rem) \r\n            acc \r\n            (recur (assoc acc (first rem) d) (rest rem)\r\n            )\r\n        )\r\n    )\r\n)","problem":156,"user":"50956c2be4b087f34d351ab2"},{"problem":156,"code":"(fn [defaultvalue col]\n  (reduce #(assoc %1 %2 defaultvalue) {} col))","user":"5a58da38e4b05d388ecb6c8b"},{"problem":156,"code":"(fn [default key_coll]\n  (apply assoc {}\n         (interleave key_coll\n                      (repeat default))))","user":"5db5d09be4b010eb3c36cd31"},{"problem":156,"code":"(fn [v s] (into {} (map (fn [x] [x v]) s)))","user":"600ae927e4b074f607df6689"},{"problem":156,"code":"(fn default-map-maker \n  [defaultValue keyList]\n  (loop [remainingKeys keyList finalMap {}] \n    (if (empty? remainingKeys)\n      finalMap\n      (let [[currKey & restKeys] remainingKeys \n            finalMap (conj finalMap (hash-map currKey defaultValue))]\n        (recur restKeys finalMap)\n        \n        ))))","user":"55ef51f1e4b066087aa94534"},{"problem":156,"code":"#(reduce (fn [memo arg] (into memo {arg %1})) {} %2)","user":"51f38193e4b0fca5e8b48226"},{"problem":156,"code":"(fn [a b]\n  (apply merge (map #(assoc {} % a) b)))","user":"5935151ee4b072a2710fd084"},{"problem":156,"code":"(fn f\n    ([k xs]\n     (reduce #(assoc %1 %2 (get {} %2 k)) {} xs)\n      ))","user":"596d630ae4b069c0a1a19846"},{"problem":156,"code":"(fn [k vs] (zipmap vs (repeat k)))","user":"5585ff97e4b001b0851d7515"},{"code":"(fn X [v V] (if (first V) (merge (X v (rest V)) {(first V) v})))","problem":156,"user":"536c77f1e4b0fc7073fd6e3f"},{"problem":156,"code":"(fn [default key-seq]\n  (zipmap key-seq (replicate (count key-seq) default)))","user":"5aeca4c9e4b0cc2b61a3bc0a"},{"problem":156,"code":"(fn [x y] (zipmap y (repeat x)) )","user":"57126104e4b09c608db70458"},{"code":"(fn [x ls] (into {} (for [i ls] [i x])))","problem":156,"user":"4fb4303fe4b081705acca2ac"},{"code":"#(loop [result {} col %2]\n   (if (empty? col) result\n     (recur (assoc result (first col) %1) (rest col)))\n   )","problem":156,"user":"510d3dc6e4b078ea71921132"},{"code":"(fn [default keys]\n    (apply hash-map (mapcat #(list %1 %2) keys (repeat default)))\n    )","problem":156,"user":"4e89e939535d3e98b8023287"},{"code":"#(zipmap %2 (repeat (.length %2) %1))","problem":156,"user":"4ed2dd98535d44c135fd68e2"},{"problem":156,"code":"(fn [initial xs] (reduce #(assoc %1 %2 initial) {} xs))","user":"59c3a7e9e4b0a024fb6ae4df"},{"code":"(fn [v xs] (zipmap xs (repeat (count xs) v)))","problem":156,"user":"513fab65e4b00f13ea1bd891"},{"problem":156,"code":"(fn [v ks]\n  (loop [kz ks\n         result {}]\n    (if-not (empty? kz)\n      (recur (rest kz) (assoc result (first kz) v))\n      result)))","user":"5ad4c3d2e4b0ea6055cfabe1"},{"problem":156,"code":"(fn [d s] (into {} (map #(vec [% d]) s)))","user":"53cdf5dfe4b00fb29b2212e9"},{"code":"(fn cc [de v]\n  (let [d (take (count v) (repeat de))]\n    (zipmap v d)))","problem":156,"user":"516282c3e4b0e6d3c4734711"},{"problem":156,"code":"(fn [x v] (reduce (fn [accum z] (assoc accum z x)) {} v))","user":"5e66c144e4b0e171e1033683"},{"code":"(fn [x coll]\n  (apply merge (map #(hash-map % x) coll)))","problem":156,"user":"5361a4f2e4b0243289761e47"},{"code":"(fn[v ks]\n    (into {} (vec (map #(vec %) (partition 2 (interleave ks (repeat (count ks) v)))))))","problem":156,"user":"4e964f4a535dbda64a6f6b42"},{"problem":156,"code":"(fn [v m](zipmap m (repeat v)))","user":"546a6e9fe4b00cfc9eacc157"},{"problem":156,"code":"(fn [x keys] (zipmap keys (repeat x)))","user":"596a4fbce4b069c0a1a19800"},{"problem":156,"code":";(fn [value ks]\n;  (reduce (fn [acc v] (assoc acc v value)) {} ks))\n(fn [value ks]\n  (into {} (for [k ks] {k value})))","user":"54dce62be4b024c67c0cf78b"},{"problem":156,"code":"#(loop [a-set %2\n        result {}]\n   (if (empty? a-set)\n     result\n     (recur (rest a-set) (into result (hash-map (first a-set) %1)))))","user":"56c70cc2e4b0ed865f9758b5"},{"problem":156,"code":"(fn [default coll]\n   (reduce\n     (fn [a b] (assoc a b default)) {} coll))","user":"57e0f3cce4b0bfb2137f5a67"},{"code":"(fn [d k] (apply merge (map #(hash-map % d) k)))","problem":156,"user":"4e6defcc535d5021c1a895f8"},{"problem":156,"code":"(fn my-def\n     ([acc default [head & tail]]\n      (let [acc (into acc  [{head default}])]\n        (if (empty? tail)\n          acc\n          (recur acc default tail)\n          )))\n     ([default s] (my-def {} default s))\n     )","user":"5ecbf452e4b016b56eae058b"},{"problem":156,"code":"#(reduce (fn [new-list k] (assoc new-list k %)) {} %2)","user":"5e6834e0e4b04793f195eaf9"},{"code":"(fn [value keys]\n  (\n    reduce #(assoc %1 %2 value) {} keys\n   ))","problem":156,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":156,"code":"(comp (partial reduce into) #(map (fn [k] {k %1}) %2))","user":"56b97792e4b0f26550335932"},{"problem":156,"code":"(fn [x coll] (into {} (for [i coll] {i x})))","user":"53e92aafe4b036ad0777e49a"},{"problem":156,"code":"#(apply conj (for [x %2] {x %1}))","user":"5651654be4b0f9d632dd845a"},{"code":"(fn [x y] (zipmap y (vec (repeat (count y) x))))","problem":156,"user":"516dc88ae4b046df6fbb76a1"},{"code":"(fn [val key-names]\n  (loop [keys key-names\n         result (sorted-map)]\n    (if (empty? keys)\n      result\n      (recur (rest keys) (assoc result (first keys) val)))))","problem":156,"user":"4f629697e4b0defedf855fd6"},{"problem":156,"code":"(fn [a b] (into {} (for [x [a] y b] {y x})))","user":"54012b48e4b0de5c41848620"},{"code":"#(apply hash-map (mapcat list %2 (repeat 999 %1)))","problem":156,"user":"52bb27fee4b07a9af57922df"},{"problem":156,"code":"(fn [def-value vec-keys]\n  (loop [result {}\n         vec-keys vec-keys]\n    (let [head-key (first vec-keys)]\n      (if (= head-key nil)\n        result\n        (recur (conj result {head-key def-value}) (rest vec-keys))))))","user":"52fe31d5e4b047fd55837038"},{"code":"#(into {} (map (fn [key] {key %}) %2))","problem":156,"user":"4ff83003e4b0678c553fc396"},{"problem":156,"code":"(fn [k m]\n     (reduce merge (for [v m] (assoc {} v k)))\n    )","user":"558843dae4b059ccff29b1f3"},{"code":"(fn [x y] ({0 {:a 0 :b 0 :c 0} \"x\" {1 \"x\" 2 \"x\" 3 \"x\"} [:a :b] {:foo [:a :b] :bar [:a :b]}} x))","problem":156,"user":"52d45010e4b09f7907dd132d"},{"problem":156,"code":"(fn\n  [val ks]\n  (loop [rs {} ks ks]\n    (if (empty? ks)\n      rs\n      (recur (assoc rs (first ks) val) (next ks)))))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":156,"code":"(fn  [v ks]\n  (into {} (map #(vector % v) ks)))","user":"5804d5afe4b0a837a8b30cad"},{"problem":156,"code":"(fn [v k] (into {} (map (fn [kk] (conj {} (hash-map kk v)) ) k)))","user":"53f6566ee4b0db01ade6f9de"},{"problem":156,"code":"(fn [n ls]\n  (reduce #(assoc % %2 n) {} ls))","user":"541ef7e2e4b01498b1a71a92"},{"problem":156,"code":"#(reduce conj (map (fn [z] {z %}) %2))\n;(fn [x y] (reduce conj (map (fn [z] {z x}) y)))","user":"55c387e4e4b0e31453f6498b"},{"code":"(fn [el ls] (zipmap ls (repeat (count ls) el)))","problem":156,"user":"4ff769bce4b0678c553fc38f"},{"problem":156,"code":"(fn [value keyset] \n  (zipmap keyset (repeat value)))","user":"525b4e8de4b0cb4875a45d0f"},{"code":"(fn [v lst] (reduce conj (for [k lst] (assoc {} k v))))","problem":156,"user":"50838c06e4b0902986d69e0f"},{"problem":156,"code":"(fn [defv ks] \n  (reduce merge (map #(assoc {} % defv) ks)))","user":"558bb38fe4b0277789237631"},{"problem":156,"code":"(fn [default_value sequence_of_keys] (zipmap sequence_of_keys \n                                            (repeat default_value)))","user":"5bc9fb3be4b07a9b28b100e3"},{"code":"(fn [a x]\n(apply hash-map (interleave x (repeat (count x) a)))\n  )","problem":156,"user":"50f4894be4b004d364930528"},{"problem":156,"code":"#(apply array-map (interleave %2 (repeat (count %2) %)))","user":"5f3388ade4b0574c87022c38"},{"problem":156,"code":"(fn [default coll] (reduce (fn [mapres key] (assoc mapres key default)) {} coll))","user":"4f18f65d535d64f603146462"},{"problem":156,"code":"(fn [default keys]\n  (into {} (map (fn [x] [x default]) keys)))","user":"56444fb1e4b0018b46ad8c0c"},{"code":"(fn [x ks]\n  (zipmap ks (repeat (count ks) x)))","problem":156,"user":"4ff695f8e4b0678c553fc380"},{"code":"(fn [d v]\n (reduce #(assoc %1 %2 d) {} v))","problem":156,"user":"50bc4e73e4b0594b91591c3d"},{"problem":156,"code":"(fn map-defaults [dv keys]\n  (reduce #(assoc %1 %2 dv) {} keys)\n  )","user":"59d61a6ae4b0ef0a1e9b5c06"},{"code":"(fn [d l]\r\n  (loop [ lis l ma {} ]\r\n    (if (nil? (next lis))\r\n      (conj ma {(first lis) d})\r\n      (recur (rest lis) (conj ma {(first lis) d}) )\r\n    )\r\n  )\r\n)","problem":156,"user":"500c5b4ae4b03d00572d2d88"},{"code":"(fn [defaults s]\n  (apply hash-map (interleave s (repeat defaults))))","problem":156,"user":"4dcd327b535d5973398f929b"},{"problem":156,"code":"(fn [vl chaves] (into {} (for [item chaves, :let [lista {}]] (assoc lista item vl))))","user":"605f92bae4b03746e80ebf62"},{"code":"#(into {} (for [k %2] {k %1}))","problem":156,"user":"517e5a91e4b0329b27fa9f55"},{"problem":156,"code":"(fn [defval list] (reduce #(assoc %1 %2 defval) {} list))","user":"5abeb697e4b073f177442725"},{"problem":156,"code":"(fn [default, keys] (reduce merge (map #(hash-map % default) keys)))","user":"54b5b3cce4b05787c3b163ab"},{"code":"(fn [dv arr] (loop [rm {} keys arr] (if (empty? keys) rm (recur (assoc rm (first keys) dv) (rest keys)))))","problem":156,"user":"4f2942ace4b0d6649770a01e"},{"code":"(fn[v s] (zipmap s (repeat v)))","problem":156,"user":"4f67f674e4b07046d9f4ef6e"},{"problem":156,"code":"(fn\n  [val keys]\n    (loop [map {}\n           v val\n           ks (seq keys)]\n      (if (and ks v)\n        (recur (assoc map (first ks) v)\n                v\n               (next ks))\n        map)))","user":"54213a8fe4b01498b1a71aaf"},{"code":"(fn aux [d v]\n           (if (empty? v)\n             {}\n             (merge {(first v) d} (aux d (rest v)))\n             )\n           )","problem":156,"user":"51e6a2bce4b0ab43cc26c21d"},{"problem":156,"code":"(fn [y x] (into {} (map #(hash-map % y) x )))","user":"55dfada4e4b050e68259b3fd"},{"problem":156,"code":"#(into {} (for [key %2] [key %1]))","user":"5e2f73e5e4b05b4b01516204"},{"problem":156,"code":"(fn [n stuff]\n  (reduce #(assoc %1 %2 n) {} stuff))","user":"5600d1a5e4b04bb52996e172"},{"problem":156,"code":"(fn muka-ziva [x coll]\n  (loop [old coll new {}]\n   \t(if (empty? old)\n      new\n      (recur (rest old) (merge new {(first old) x})))))","user":"5a9482b7e4b0d174b936c737"},{"code":"(fn [val vec]\n  (apply assoc {}\n         (interleave vec (iterate identity val))))","problem":156,"user":"52271a85e4b04e78ff2e19a7"},{"code":"(fn [d v] \n  (apply hash-map \n   (interleave v \n               (repeat \n                (count v) d\n                )\n    )\n   ))","problem":156,"user":"5259a16ee4b0cb4875a45ce1"},{"problem":156,"code":"(fn t [sep coll]\n  (apply hash-map(mapcat #(vector % sep) coll)))","user":"59503c5de4b066ee0a44ae8e"},{"problem":156,"code":"#(reduce (fn [acc mapkey] (assoc acc mapkey %1)) {} %2)","user":"594d4c57e4b07ddc2dafae87"},{"problem":156,"code":"(fn [value keyss] (reduce #(conj %1 {%2 value}) {} keyss ))","user":"56ae4c21e4b03c432f18735c"},{"code":"#(apply conj (map (fn [a b] {a b}) %2 (repeat (count %2) %1)))","problem":156,"user":"50f9739ce4b0e7c80cb15a4d"},{"problem":156,"code":"(fn map-dup\n  [e xs]\n  (zipmap xs (repeat e)))","user":"518b8561e4b0f028e99addef"},{"code":"(fn [default keys]\n  (reduce #(assoc %1 %2 default) {} keys))","problem":156,"user":"5140c505e4b049dea086df40"},{"code":"#(reduce (fn foo [coll x] (conj coll {x %})) {} %2)","problem":156,"user":"4fe8939be4b07c9f6fd12c4d"},{"code":"(fn [default keys]\n      (loop [map {} v default ks keys]\n        (if (empty? ks)\n          map\n          (recur\n           (assoc map (first ks) v)\n           v\n           (rest ks)))))","problem":156,"user":"4dbba163535d3f4042261ecc"},{"code":"(fn [v kv] \n\t(loop [mm {} kk kv]\n  \t\t(if (= 1 (count kk) )\n  \t\t\t(assoc mm (first kk) v)\n   \t\t\t(recur (assoc mm (first kk) v) (next kk) )\n    \t)\n\t)\n)","problem":156,"user":"500c0393e4b03d00572d2d85"},{"code":"(fn [progress defval ks]\n\t  ;(println progress defval ks)\n\t  (if (not-empty ks)\n\t       (recur (assoc progress (first ks) defval) defval (rest ks) )\n\t       progress\n\t       \n\t   )\n\t) {}","problem":156,"user":"531cd41ee4b08068f379eda9"},{"problem":156,"code":"(fn [aa bb] (apply hash-map (interleave bb (repeat aa))))","user":"55074092e4b021ccfedb96a4"},{"problem":156,"code":"(fn\n [x a]\n (into {} (map #(vector % x) a)))","user":"542f574be4b0dad94371f2d0"},{"code":"(fn [n keys]\n  (into {} (for [i keys] [i n])))","problem":156,"user":"4eb7b049535d7eef30807377"},{"code":"(fn r [d l] (if (empty? l) '{} (assoc (r d (rest l)) (first l) d)))","problem":156,"user":"510931ede4b0c71f76895663"},{"code":"(fn [d s]\n  (zipmap\n    s\n    (repeat (count s) d)))","problem":156,"user":"51b3f109e4b0f094dd986fa9"},{"problem":156,"code":"(fn [v defaults]\n  (zipmap defaults (repeat v) ))","user":"55cde24ae4b0e31453f64a23"},{"code":"(fn [map-value map-keys]\n  (zipmap\n   map-keys\n   (repeat (count map-keys) map-value)))","problem":156,"user":"525a643be4b0cb4875a45cf1"},{"problem":156,"code":"#(apply hash-map (interleave  %2 (repeat %1)))","user":"54f9920ee4b01ecee9d8883f"},{"code":"(fn [default coll] (zipmap coll (repeat (count coll) default)))","problem":156,"user":"4fa09916e4b0dcca54ed6d4e"},{"problem":156,"code":"(fn [default l]\n  (apply hash-map (mapcat #(list %1 default) l)))","user":"601004d6e4b074f607df66b2"},{"problem":156,"code":"(fn [default keys] (reduce (fn [map key] (conj map {key default})) {} keys))","user":"55f014ebe4b06e875b46ce1b"},{"problem":156,"code":"(fn [v ks] \n  (reduce #(conj {%2 v} %1) {} ks))","user":"54133900e4b01498b1a719de"},{"problem":156,"code":"(fn [val keys]\n      (reduce\n       #(into %1 {%2 val})\n       {}\n       keys\n       )\n      )","user":"58db48a5e4b0a4d5acaab679"},{"problem":156,"code":"(fn [val keys] \n  (reduce #(assoc %1 %2 val) {} keys))","user":"5473efc3e4b0c51c1f4d7285"},{"problem":156,"code":"(fn [v coll]\n  (into {} \n        (for [x coll] {x v})))","user":"5858f0cce4b0f14aab7c8727"},{"code":"(fn [x v] (zipmap v (repeat (count v) x)))","problem":156,"user":"52662ca4e4b03e8d9a4a7124"},{"problem":156,"code":"(fn [d m]\n(apply merge (for [p m] (hash-map p d)))\n)","user":"5cda72ffe4b05ee0cb311714"},{"problem":156,"code":"(fn map-default\n  [default-val coll]\n  (zipmap coll (repeat default-val)))","user":"558ffb4be4b0277789237667"},{"problem":156,"code":"(fn [defval kws] (reduce merge (for [kw kws :let [dict {}]] (assoc dict kw defval))))","user":"58bc3202e4b0888cdc949d0b"},{"problem":156,"code":"(fn [val col]\n  (zipmap col (repeat val)))","user":"57ee2b3ee4b0bfb2137f5bac"},{"problem":156,"code":"(fn [default vs]\n  (into {} (map vector vs (repeat default))))","user":"536c4670e4b0fc7073fd6e3c"},{"code":"(fn [dv s] (reduce #(assoc % %2 dv) {} s))","problem":156,"user":"50c75d38e4b00bb60fe0c532"},{"code":"(fn p156 [d coll]\n  (reduce #(assoc %1 %2 d) {} coll)\n)","problem":156,"user":"51750fc5e4b07031762f2ee6"},{"problem":156,"code":"(fn construct-default-map\n  [default-value key-seq]\n  (into {}\n        (for [el key-seq]\n          {el default-value}\n          )))","user":"5d23bd56e4b02ea6f0fb6a0f"},{"problem":156,"code":"(fn [x keys] (->> keys (map (fn [k] [k x])) (into {})))","user":"5032748ae4b0e78df07b092f"},{"problem":156,"code":"#(reduce (fn [a b] (assoc a b %)) {} %2)","user":"5ed80d50e4b016b56eae05eb"},{"code":"(fn [elt coll]\n  (into {} (for [i coll] [i elt])))","problem":156,"user":"4dadc27ec9a9d6ed3c99dc57"},{"code":"#(apply hash-map (concat (interpose % %2) [%]))","problem":156,"user":"4db342d7535df7e46ed9b6cd"},{"problem":156,"code":"(fn [d m]\n  (apply hash-map\n    (mapcat #(identity [% d]) m)))","user":"60036736e4b074f607df663b"},{"problem":156,"code":"(fn [default the-seq]\n  (into {}\n        (for [x the-seq]\n          [x default])))","user":"55a5c3bee4b0acc240e3154e"},{"problem":156,"code":"(fn [d s] (reduce (fn [m k] (conj m {k d})) {} s))","user":"5901158de4b0438e51c2d039"},{"problem":156,"code":"(fn foo [x y]\n  (into {} (for [value y] [value x])))","user":"55c216dde4b0e31453f64974"},{"problem":156,"code":"(fn [value keys]\n  (apply hash-map (apply concat\n    (map #(list % value) keys)\n  )))","user":"562d15a6e4b0a45d2ff83019"},{"problem":156,"code":"(fn [default coll] \n  (into {} (map vector coll (repeat default))))","user":"54a6baaee4b09f271ff37c8a"},{"problem":156,"code":"(fn [default list]\n  (reduce #(assoc %1 %2 default) {} list))","user":"57d57f65e4b0bd073c2023b3"},{"code":"(fn [x y] \n  (apply merge\n    (for [key y] (assoc {} key x))))","problem":156,"user":"4f91c9b2e4b0dcca54ed6ca2"},{"problem":156,"code":"(fn [k s]\n  (reduce #(conj %1 {%2 k}) {} s))","user":"5c8bc8bde4b048ec896c5979"},{"problem":156,"code":"(fn [k s] (into {} (for [x (partition 2 (interleave s (repeat k)))] (vec x))))","user":"53a94b63e4b047364c044434"},{"problem":156,"code":"(fn [val key-coll]\n  (loop [ls key-coll acc {}]\n    (if (empty? ls)\n      acc\n      (recur (rest ls) (assoc acc (first ls) val)))))","user":"5f38eecce4b0574c87022c72"},{"code":"(fn [default coll]\n  (into {} (map #(hash-map % default) coll)))","problem":156,"user":"5180af54e4b0e3fc13e244e9"},{"code":"#(apply conj\n  (for [item %2]\n    (hash-map item %1)))","problem":156,"user":"51b965dde4b0e871ca495905"},{"problem":156,"code":"#(into {} (mapv vector %2 (repeat %1)))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":156,"code":"(fn[x,y] (zipmap y (repeat (count y) x)))","user":"571172ece4b09c608db70446"},{"code":"(fn [d k] \n  ((fn assoc-default-iter [m d k] \n    (if (= (count k) 0) \n      m\n      (assoc (assoc-default-iter m d (rest k)) (first k) d)))\n  {} d k))","problem":156,"user":"517531c6e4b07031762f2eea"},{"code":"(fn [d ks]\n  (zipmap ks (repeat d)))","problem":156,"user":"503a234de4b088a6a14ca76d"},{"problem":156,"code":"(fn [x xs]\n  (apply hash-map\n         (apply concat\n                (map (fn [a] [a x]) xs)\n         )\n  )\n)","user":"53f74528e4b0de5c4184855c"},{"problem":156,"code":"(fn [v k]\n    (into {} (map (fn [x] {x v}) k)))","user":"51b91b08e4b0e871ca4958f8"},{"problem":156,"code":"(fn [initial values]\n  (loop [result {}\n         vals values]\n    (if (seq vals) \n      (recur \n        (assoc result (first vals) initial)\n        (rest vals))\n      result\n      )))","user":"55ad2379e4b03311e7b732a1"},{"problem":156,"code":"(fn [a x] (into (sorted-map) (for [b x] [b a])))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":156,"code":"(fn [v k] (into (hash-map) (for [i k] [i v])))","user":"59c91fa4e4b0a024fb6ae573"},{"problem":156,"code":"#(apply merge (for [v [%] k %2] {k v}))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":156,"code":"#(into {} (for [a %2] {a %}))","user":"565fe49ee4b068f2fe63dc46"},{"code":"(fn [v s] (reduce (fn [m k] (assoc m k v)) {} s))","problem":156,"user":"52caeb25e4b071a8d36bd3e7"},{"problem":156,"code":"(fn [val keys]\n  (into {} (map #(vector %1 val) keys)))","user":"543f854fe4b032a45b86935b"},{"problem":156,"code":"(fn foo[x coll]\n  (if (= 0 (count coll))\n    nil \n    (merge (foo x (rest coll)) {(first coll) x})))","user":"585a7cb2e4b0f14aab7c874e"},{"code":"(fn [x s] (into {} (map #(vec [% x]) s)))","problem":156,"user":"5065faf9e4b0313a384e5645"},{"problem":156,"code":"#(zipmap %2 (take 5 (repeat %1)))","user":"551297dee4b06e50f9beb1b1"},{"problem":156,"code":"(fn [d k] (->> k (map #(vector  % d)) (into {}) ))","user":"5b81139fe4b047b03b203782"},{"code":"(fn [dflt kys]\n  (reduce #(assoc % %2 dflt) {} kys))","problem":156,"user":"4f569218e4b0a7574ea71826"},{"problem":156,"code":"(fn [d k]  \n  (into {}\n        (map          \n         (fn [a] [a d])         \n         k)))","user":"55625903e4b0c656e3ff17d7"},{"code":"(fn [default values]\n\t(loop [values values\n           result {}]\n      \t(if (empty? values)\n          \tresult\n          \t(recur (rest values) (assoc result (first values) default))\n      \t)\n    )\n)","problem":156,"user":"521b481de4b0c4ef0be83037"},{"code":"(fn [d k] (apply conj {} (map #(vector % d) (reverse k))))","problem":156,"user":"5360d41fe4b0243289761e39"},{"problem":156,"code":"(fn [d k] (reduce conj {} (map vector k (repeat d))))","user":"5762bf13e4b0994c1922fbae"},{"code":"(fn [v s]\n  (apply hash-map (interleave s (repeat (count s) v))))","problem":156,"user":"4db0114d838c48654951d9b8"},{"problem":156,"code":"(fn [v k] (zipmap (reverse k) (vector v v v)))","user":"566e55fce4b0a866af6896d7"},{"code":"(fn [v keys] (zipmap keys (repeat v)))","problem":156,"user":"4fb01e53e4b081705acca260"},{"problem":156,"code":"#(apply hash-map(interleave %2 (repeat %)))","user":"54cbc9ede4b057c6fda3a27f"},{"problem":156,"code":"(fn [a coll] (into {} (map #(vector % a) coll)))","user":"58d00661e4b03c36ff7e58c2"},{"code":"#(reduce (fn [m k] (conj m [k %1])) {} %2)","problem":156,"user":"52c8758be4b0c2d177d62135"},{"problem":156,"code":"#(loop [x %2,retmap {}]\n   (if (empty? x) retmap \n     (recur (rest x) \n            (into retmap {(first x) %1}))))","user":"575d63e9e4b02ea114799382"},{"problem":156,"code":"(fn fluxsom [defaults keyseq]\n  (into {} (map #(hash-map % defaults) keyseq)))","user":"4f9dd376e4b0dcca54ed6d27"},{"problem":156,"code":"(fn [x xs] (reduce #(assoc %1 %2 x) {} xs))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":156,"code":"(second [\n(fn [a b] (into {} (map #(do [% a]) b)))\n(fn [a b] (into {} (map vector b (repeat a))))\n\t\t])","user":"57b09d41e4b0fbc9809a2746"},{"problem":156,"code":"(fn [default inkeys](reduce #(conj % {%2 default}) {} inkeys))","user":"56168ae7e4b06b1bb2182a05"},{"problem":156,"code":"(fn create-map [value ks]\n  (if (empty? ks) {}\n      (assoc (create-map value (rest ks)) (first ks) value)))","user":"51b76227e4b0d906fcd71d35"},{"problem":156,"code":"; build a list of values the same length as the keyword vector\n; map the two together\n(fn [x coll] (into {} (map vector coll (repeat (count coll) x))))","user":"57c44053e4b05aa3c4741ccb"},{"problem":156,"code":"(fn [default ks] (into {} (for [k ks] [k default] )))\n;;(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))","user":"55647a31e4b0c656e3ff1808"},{"problem":156,"code":"(fn fillit\n  [value keys]\n  (zipmap keys (repeat value))\n  )","user":"602f56c5e4b0d5df2af22297"},{"problem":156,"code":"(fn [k vs]\n   (zipmap  vs (repeat (count vs) k))\n)","user":"5649615be4b0284900eef641"},{"code":"(fn [a b]\n  (loop [a a\n         b (seq b)\n         result {}]\n    (if-let [cur (first b)]\n      (recur a (next b) (conj result {cur a}))\n      result)))","problem":156,"user":"531e5c81e4b08068f379edba"},{"problem":156,"code":"(fn\n  [map-def map-keys]\n  (apply hash-map\n         (reduce #(conj %1 %2 map-def) [] map-keys)))","user":"55fe8190e4b00f4cabc57652"},{"code":"(fn [x l]\n  (apply merge (map #(hash-map % x) l)))","problem":156,"user":"51a4416ae4b0def3c5c5868c"},{"problem":156,"code":"(fn construct-map\n  [default-value keysequence]\n  (reduce conj {} \n          (map #(hash-map % default-value) keysequence)))","user":"548f05ace4b0e286459a122b"},{"code":"(fn [x y] (into {} (map #(hash-map % x) y)))","problem":156,"user":"513dc533e4b0825f97f7f961"},{"problem":156,"code":"(fn [default-val some-sequence]  (reduce #(assoc %1 %2  default-val) {} some-sequence))","user":"5a737561e4b0512ff01cdaaa"},{"problem":156,"code":"(fn [default-value keys-to-set]\n                     (reduce\n                      (fn [map-with-defaults current-key]\n                        (assoc map-with-defaults current-key default-value))\n                        {}\n                        keys-to-set))","user":"57759a45e4b0979f89651622"},{"code":"#(loop [firstKey (first %2)\n        restKeys (rest %2)\n        ret {}]\n   (if (= 0 (count restKeys))\n     (conj ret {firstKey %1})\n     (recur (first restKeys)\n            (rest restKeys)\n            (conj ret {firstKey %1}))))","problem":156,"user":"539f4e9ee4b0ca733b974498"},{"problem":156,"code":"(fn [default coll] (reduce (fn [val e] (assoc val e default)) {} coll))","user":"5c36d110e4b0d62ef62d9f6a"},{"code":"#(apply hash-map (mapcat (fn [x] [x %1]) %2 ))","problem":156,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":156,"code":"(fn [x set] (into (hash-map) (map #(vector %1 x) set)))","user":"5d931a58e4b0d3f9b434ad10"},{"problem":156,"code":"(fn [x l] (reduce #(assoc % %2 x) {} l) )","user":"550b5a53e4b06e50f9beb142"},{"problem":156,"code":"(fn [value coll] (reduce #(assoc %1 %2 value) {} coll ))","user":"5d590500e4b02ba5928a6824"},{"problem":156,"code":"(fn [val keys]\n  (into {}\n        (map (fn [key] [key val]) keys)))","user":"52af0fd3e4b0c58976d9acb5"},{"problem":156,"code":"(fn [d k] (reduce conj (map #(hash-map % d) k)))","user":"542a348be4b01498b1a71b3f"},{"problem":156,"code":"(fn [v keys] (reduce (fn [m k] (assoc m k v)) {} keys))","user":"5d8b4960e4b0915913b1d3d3"},{"problem":156,"code":"(fn [default set] \n  (zipmap set (repeat default)))","user":"591c2f4ee4b09b4ee5954bfc"},{"code":"#(into {} (for [key %2] (hash-map key %1)))","problem":156,"user":"4e7ec984535db169f9c7971c"},{"problem":156,"code":"(fn [default-value coll]\n  (zipmap coll (repeat default-value)))","user":"5885eb2de4b0f1effa3b76c6"},{"code":"(fn [defv coll] (reduce (fn [m k] (assoc m k defv)) {} coll))","problem":156,"user":"52319066e4b0e2e8de81d1e9"},{"problem":156,"code":"(fn m [v ks]\n  (into {} (map #(vector % v) ks)))","user":"53b39d82e4b047364c0444a6"},{"code":"(fn [df keys] (zipmap keys (repeat df)))","problem":156,"user":"534d1173e4b084c2834f4a98"},{"problem":156,"code":"(fn [default keys]\n  (loop [m {}\n         remaining-keys keys]\n    (if (empty? remaining-keys)\n      m\n      (recur\n       (assoc m (first remaining-keys) default)\n       (rest remaining-keys)))))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":156,"code":"(fn [x y]\n  (loop [ in y out {}]\n    (if (empty? in)\n    \tout\n    \t(recur (rest in) (assoc out (first in) x)))))","user":"566d71b1e4b0a866af6896ca"},{"problem":156,"code":"(fn [d ks]\n  (apply hash-map (mapcat (fn [k] [k d])\n                          ks)))","user":"55c4e48be4b0e31453f649a7"},{"problem":156,"code":"(fn [value sq] (reduce conj (map #(hash-map % value) sq)))","user":"56446954e4b0284900eef5f4"},{"code":"(fn hash-with-default [default keys]\n  (apply hash-map (interleave keys (repeat (count keys) default))))","problem":156,"user":"50bb9fefe4b0594b91591c36"},{"problem":156,"code":"(fn [default map-keys]\n  (zipmap map-keys (repeat default)))","user":"5c9419fae4b048ec896c5a2b"},{"problem":156,"code":"(fn [v coll](reduce #(assoc %1 %2 v){} coll))","user":"56188848e4b053970a773aea"},{"problem":156,"code":"(fn [v, ks]\n  (reduce #(assoc %1 %2 v) {} ks))","user":"5bb948f5e4b0a20761a235d5"},{"problem":156,"code":"#(loop [keys %2\n        m {}]\n   (if (empty? keys) \n     m\n     (recur (rest keys) (conj m {(first keys) %1 }))))","user":"56c89c2ce4b0ed865f9758d4"},{"problem":156,"code":"#(apply conj {} (for [i %2] [i %]))","user":"5e2549c8e4b05b4b0151615f"},{"code":"(fn [default ks]\n  (zipmap ks\n          (take (count ks) (repeat default))))","problem":156,"user":"5192dd39e4b0c663c5d86c9e"},{"code":"#(apply merge (for [i %2\n       :let [res (assoc {} i %)]       \n       ] \n   res))","problem":156,"user":"516081e7e4b009fba0926e28"},{"problem":156,"code":"(fn [x vx] (zipmap vx (vec (take (count vx) (repeat x)))))","user":"55e3924ae4b050e68259b445"},{"code":"(fn [d kv] (zipmap kv (repeat d)))","problem":156,"user":"503ea917e4b06c4e0e1fa26b"},{"problem":156,"code":"(fn[v ks] (into {} (map (fn[x] [x v]) ks)))","user":"5627d09ce4b00e49c7cb47db"},{"problem":156,"code":"(fn [a l] (reduce (fn [m x] (assoc m x a)) {} l))","user":"567b39b6e4b05957ce8c61a3"},{"problem":156,"code":"(fn [x y] (zipmap y (into [] (take (count y) (repeat x)))))","user":"562f45e6e4b0ab312c17ebc8"},{"problem":156,"code":"(fn [v c]\n  (reduce (fn [acc cur]\n            (assoc acc cur v))\n          {}\n          c))","user":"5c30da5ae4b0d62ef62d9f23"},{"problem":156,"code":"(fn [default-value map-keys] \n  (reduce \n    #(assoc %1 %2 default-value) \n    {} map-keys))","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":156,"code":"(fn [default keys_] (apply hash-map (interleave keys_ (repeat default))))","user":"585bcd51e4b0f14aab7c8771"},{"code":"(fn [y x] (apply assoc {} (interleave (rseq x) (take (count x) (repeat y) ))))","problem":156,"user":"51a89810e4b08d8ec191b817"},{"code":"#(apply conj \n    (map \n      (fn [z] \n        {z %1})\n      %2))","problem":156,"user":"4ea7999e535d7eef308072ee"},{"problem":156,"code":"(fn [x coll] (reduce #(conj %1 [%2 x]) {} coll))","user":"5c8319c3e4b0c8042a70ce45"},{"problem":156,"code":"(fn [default ks] (apply merge (let [m {}] (map #(assoc m % default) ks))))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn f [v ks] (zipmap ks (repeat (count ks) v)))","problem":156,"user":"5086ca15e4b004985b776e62"},{"code":"(fn [val keys]\n  (reduce clojure.set/union (map #(hash-map % val) keys)))","problem":156,"user":"4e49a7bb535dc968683fc4c6"},{"code":"(fn [x xs] (reduce #(apply assoc %1 %2) {} (map #(vector % x) xs)))","problem":156,"user":"5032b398e4b00c0952a257eb"},{"problem":156,"code":"(fn [default ks] (into (hash-map) (map #(vector % default) ks)))","user":"5956c6dae4b066ee0a44af61"},{"code":"(fn f [v s]\n  (reduce #(assoc %1 %2 v) {} s))","problem":156,"user":"501b1efee4b0b12d9c5f4d82"},{"problem":156,"code":"(fn [d ks]\n  (loop [ks ks a {}]\n    (if (empty? ks)\n      a\n      (recur (rest ks) (into a {(first ks) d})))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":156,"code":"(fn [v xs] (reduce #(conj % [%2 v]) {} xs) )","user":"5512967ee4b06e50f9beb1ae"},{"problem":156,"code":"(fn\n  [val s]\n  (reduce (fn [new-map key]\n            (into new-map {key val}))\n          {}\n          s))","user":"5ed875abe4b016b56eae05f2"},{"problem":156,"code":"(fn reassoc [v kcoll]\n (if (empty? kcoll)\n  {}\n  (assoc\n   (reassoc v (pop kcoll))\n   (peek kcoll)\n   v)))","user":"57fd085ce4b0d3187e9009a9"},{"problem":156,"code":"(fn [dV colls]\n  (reduce (fn [col k]\n            (conj col {k dV})\n            )\n          {}\n          colls\n          )\n\t)","user":"5ebb4751e4b00a66d4a95262"},{"problem":156,"code":"(fn [d ks]\n   (reduce #(assoc %1 %2 d) {} ks))","user":"57cd7498e4b0c746388ab897"},{"problem":156,"code":"(fn [def-val col] (into (hash-map) (map #(assoc {} % def-val) col)))","user":"59874ff6e4b021a7a535fea1"},{"problem":156,"code":"(fn [default coll] (apply hash-map (into [] (interleave coll (cycle [default])))))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"code":"(fn [x y]\n  (apply hash-map\n    (reduce into (map #(vector % x) y))))","problem":156,"user":"4fd2e5d8e4b04c3a95aa0427"},{"problem":156,"code":"(fn [default coll]\n  (into {}\n        (for [c (seq coll)\n              d (vector default)]\n          [c d])))","user":"54271c6de4b01498b1a71b20"},{"code":"(fn [default keys] (reduce conj {} (map (fn [x] [x default]) keys)))","problem":156,"user":"524a554de4b05ef8e38e64a2"},{"problem":156,"code":"(fn map-defaults\n\t[default my-vec]\n    (loop [m {} v my-vec]\n      (if (empty? v)\n        m\n        (recur (assoc m (first v) default) (rest v)))))","user":"54091b82e4b0addc1aec66d5"},{"code":"(fn init [v ks] \n  (loop [cks ks r '{}]\n    (if (empty? cks)\n      r\n      (recur (drop 1 cks) (merge (hash-map (first cks) v) r)))))","problem":156,"user":"523bc0e6e4b07becd5be21f9"},{"problem":156,"code":"(fn [v ks] (into {} (map #(into {} {% v}) ks)))","user":"591ac8ece4b09b4ee5954bdd"},{"problem":156,"code":"(fn map-defaults\n  [default names]\n  (zipmap names (repeat default)))","user":"5c1156a2e4b01240ff567176"},{"code":"(fn [d s]\n         (reduce #(assoc %1 %2 d) {} s))","problem":156,"user":"4e50c894535dc968683fc4ee"},{"code":"(fn [v ks] (reduce (fn [m [ek ev]] (assoc m ek ev)) {} (map (fn [k] [k v]) ks)))","problem":156,"user":"52090567e4b0e152394d76ed"},{"problem":156,"code":"(fn [default keys]\n  (into {} (for [k keys] [k default])))","user":"520d3129e4b0b022ef140ca5"},{"problem":156,"code":"(fn [e lst]\n  (into {} (map #(hash-map % e) lst)))","user":"5e978fe5e4b0157ca96647d1"},{"problem":156,"code":"(fn [d s] (apply hash-map (apply concat (map #(list %1 d) s))))","user":"554d48d3e4b00713264bd988"},{"problem":156,"code":"(fn [v k] (zipmap k (vec (replicate (count k) v))))","user":"581bdf83e4b04b46fc4b0ee0"},{"code":"(fn set-defaults [default keys]\n  (loop [keys keys key (first keys) map {}]\n(if (nil? key)\n  map\n  (recur (rest keys) (first (rest keys)) (assoc map key default)))))","problem":156,"user":"504f5804e4b0a02f9cffde72"},{"code":"(fn [value collection]\n   \n   (reduce (fn [m elm] (into m [[elm value]])) {} collection )\n   \n   )","problem":156,"user":"518d1b5be4b070277754617b"},{"problem":156,"code":"#(apply hash-map (mapcat (fn [a] [a %1]) %2))","user":"55b0f5bfe4b002ce9d5cbc28"},{"problem":156,"code":"(fn [default keys] (loop [new-map {} new-keys keys] (if (nil? (first new-keys)) new-map (recur (assoc new-map (first new-keys) default) (rest new-keys)))))","user":"59e8d2f7e4b0249b7282073a"},{"code":"(fn [x y]\n  (apply assoc {}\n    (interleave y (repeat x))))","problem":156,"user":"4dc7e7a5535d8a4b2fd74290"},{"problem":156,"code":"(fn [val lst]\n  (loop [lst lst\n         res {}]\n    (if (empty? lst)\n      res\n      (recur (rest lst) (assoc res (first lst) val)))))","user":"5c706232e4b0fca0c162277e"},{"problem":156,"code":"(fn myreduce [default seq]\n  (let [myreduce-int (fn [map default seq]\n                      (if (empty? seq)\n                        map\n                        (recur (assoc map (first seq) default) default (rest seq))))]\n    (myreduce-int {} default seq)))","user":"550ff2a3e4b06e50f9beb17f"},{"code":"(fn [v m]\n  (apply merge (map #(hash-map % v) m)))","problem":156,"user":"52a55adee4b0c58976d9abe7"},{"problem":156,"code":"(fn [x y]\n   (reduce\n     merge {} ((fn [a b]\n                  (map #(hash-map % a) b)) x y)))","user":"5b15a037e4b0cc2b61a3be70"},{"problem":156,"code":"(fn\n\t[valor coll]\n\t(reduce into {}\n\t\t\t\t\t(map (fn [key] (hash-map key valor)) coll)))","user":"5d797deee4b02e6b30c93541"},{"problem":156,"code":"(fn [v sq] (into {} (for [x sq] {x v})))","user":"57061d20e4b0b0fb43fd0679"},{"problem":156,"code":"#(reduce (fn[acc Key] (assoc acc Key %1)) {}  %2)\n\n;#(loop[acc {} KeyMap %2]\n;   (if(empty? KeyMap) acc\n;     (recur (assoc acc (first KeyMap) %1) (rest KeyMap))))\n\n;(fn [v m] (zipmap m (repeat v)))","user":"59c77511e4b0a024fb6ae545"},{"problem":156,"code":"(fn [default-val ks]\n  (reduce #(assoc %1 %2 default-val) {} ks))","user":"5592ba8be4b0c79f6e1db931"},{"code":"(fn [d ks] (reduce #(conj %1 [%2 d]) {} ks))","problem":156,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":156,"code":"(fn default-map\n  [val keys]\n  (reduce (fn [result key] (conj result [key val])) {} keys))","user":"52ea025ae4b09f7907dd14b5"},{"problem":156,"code":"(fn [y x] (apply hash-map (apply concat (for [z x] [z y]))))","user":"54e0a9c3e4b024c67c0cf7b5"},{"problem":156,"code":"(fn [default-value keys] (into (hash-map) (map (fn [x] {x default-value}) keys)))","user":"5d0859fbe4b0cc9c91588208"},{"problem":156,"code":"(fn [default lst] (zipmap lst (repeat default)))","user":"5482150ae4b0e286459a117b"},{"problem":156,"code":"(fn[x y]\n    (zipmap y (repeat x)))","user":"5f77890ae4b02876ed9fd0b9"},{"problem":156,"code":"(fn [v ks]\n  (into {}\n        (map #(vector % v) ks)))","user":"5a514e68e4b05d388ecb6be5"},{"code":"#(reduce (fn [x,y] (assoc x y %1)) {} %2)","problem":156,"user":"514cfa27e4b019235f6c057d"},{"problem":156,"code":"(fn [v ks]\n    (loop [ks ks m {}]\n      (if (not (empty? ks))\n        (recur (rest ks) (assoc m (first ks) v))\n      m)))","user":"5cc6f982e4b0ccb06196282d"},{"problem":156,"code":"(fn\n  ([initial ks]\n   (loop [next-key (first ks) remaining (rest ks) acc {}]\n     (if (empty? remaining)\n         (into acc [[next-key initial]])\n      (recur (first remaining) (rest remaining) (into acc [[next-key initial]]))))))","user":"580fb8e0e4b0f478707a05bc"},{"problem":156,"code":"(fn [d c]\n\t(reduce #(conj %1 {%2 d}) {} c))","user":"5e066185e4b0978307768fa4"},{"problem":156,"code":"(fn [v k] (->>\n  (map #(vector % v) k)\n  (map #(apply hash-map %))\n  (reduce conj)\n  ))","user":"56df6846e4b0ca2494a095fa"},{"problem":156,"code":"(fn [c L]\n  (zipmap L (repeat c)))","user":"52c35afce4b07a9af579238c"},{"problem":156,"code":"#(reduce (fn [x y] (conj x {y %1}) )  {} %2)","user":"5da98129e4b000c986472c33"},{"code":"#(zipmap %2 (repeat 3 %))","problem":156,"user":"5103807fe4b00c483ae17703"},{"code":"(fn [val v] (apply array-map (interleave\n                                       v\n                                       (take (count v) (repeatedly (fn [] val))))))","problem":156,"user":"503b6995e4b07a1917cc34dd"},{"code":"(fn mapDefaults [v ks] (if (empty? ks) {} (conj {(first ks) v} (mapDefaults v (rest ks)))))","problem":156,"user":"50ef311fe4b0a78662fa2651"},{"problem":156,"code":"(fn [n coll] (into {} (map #(assoc {} % n) coll)))","user":"57283dbce4b0c5bde472c154"},{"problem":156,"code":"(fn [x y]\n  (println x y)\n   (loop [value y  res {}]\n     (let [current (first value)]\n       (println current x y)\n       (if (nil? current)\n         res\n         (recur (rest value) (merge res {current x}))\n         )\n       )\n     )\n  )","user":"5f693778e4b02876ed9fd03f"},{"problem":156,"code":"#(loop [default-value %1 remaining-list %2 full-map {}]\n    (if (empty? remaining-list)\n      full-map\n      (let [[part & remaining] remaining-list]\n        (recur default-value\n               remaining\n               (conj full-map {part default-value})))))","user":"5a5ce474e4b0512ff01cd919"},{"code":"(fn [x v]\n  (loop [result {} sv v]\n    (if (empty? sv)\n      result\n      (recur (conj result {(first sv) x}) (rest sv)))))","problem":156,"user":"4e5cac7c535d8a8b8723a2c3"},{"problem":156,"code":"(fn [val coll]\n  (loop [val val\n         coll coll\n         res {}]\n    (if (empty? coll)\n      res\n      (recur val (rest coll) (assoc res (first coll) val)))))","user":"54b31445e4b09f271ff37d35"},{"code":"(fn constr [v k-coll]\n  (->> (for [k k-coll]\n \t[k v]) (into {}))\n)","problem":156,"user":"512a8ef7e4b0ff5c4bc1f99e"},{"problem":156,"code":"(fn [default l] (reduce (fn [mm k] (assoc mm k default)) {} l))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":156,"code":"(fn [n _keys]\n    (reduce (fn [acc head]\n            (assoc acc head n)) {} _keys))","user":"5954eef0e4b066ee0a44af17"},{"problem":156,"code":"(fn [v xs]\n  (zipmap xs (repeat v)))","user":"6026d2cae4b0d5df2af22232"},{"problem":156,"code":"(fn [v kmap]\n   (reduce (fn [acc item] (assoc acc item v)) {} kmap))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":156,"code":"(fn [d l] (reduce conj {} (map #(vector % d) l)))","user":"51bb08a4e4b0fe3ecfb46446"},{"problem":156,"code":"#(loop [n %1 in %2 out {}] (if (empty? in) out (recur n (rest in) (into out {(first in) n}))))","user":"57f9e0bce4b0d3187e900956"},{"problem":156,"code":";(fn [x y] (loop [n 0 result {}] (if (= n (count y)) result (recur (inc n) (merge result {(nth y n) x})))))\n#(zipmap %2 (repeat %))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":156,"code":"(fn [default-value key-list]\n  (reduce merge (map #(hash-map % default-value) key-list)))","user":"5c24671be4b07e362c2305a1"},{"problem":156,"code":"(fn  [default coll]\n  (zipmap coll (repeat default))\n)","user":"55a65872e4b09e57187da299"},{"code":"#(into {} (for [k %2]\n            [k %]))","problem":156,"user":"520a6aace4b01da9d47a99d9"},{"problem":156,"code":"(fn [v k] (zipmap k (repeat (count k) v )))","user":"55e8a85be4b0121d4835fd98"},{"problem":156,"code":"(fn [k s]\n   (apply assoc {}\n     (interleave s (repeat k) )))","user":"582625d3e4b051871117bef2"},{"code":"(fn [n s] (apply hash-map (apply concat (map vector s (take (count s) (repeat n))))))","problem":156,"user":"511dada0e4b0a5c68a34840c"},{"problem":156,"code":"(fn [x y] (zipmap y (repeat (count y) x) ))","user":"5bc2df19e4b07a9b28b10038"},{"code":"(fn a [d k] (into {} (map #(identity {% d}) k)))","problem":156,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":156,"code":"(fn [d s] (into {} (for [k s] [k d])))","user":"58942fd0e4b00487982d5254"},{"problem":156,"code":"(fn [x coll]\n  (apply hash-map (interleave coll (repeat (count coll) x)))\n  )","user":"5510d948e4b06e50f9beb18d"},{"problem":156,"code":"(fn [default keys] (reduce #(conj %1 [%2 default]) {} keys))","user":"54e2a779e4b024c67c0cf7d3"},{"code":"(fn make-map [default keys]\r\n  (reduce (fn [coll key]\r\n      (assoc coll key default))\r\n\t  {}\r\n\t  keys))","problem":156,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":156,"code":"(fn [v ks]\n  (->> ks\n      (map #(hash-map % v))\n      (apply merge)))","user":"549dd591e4b0f3d1d8e70f98"},{"problem":156,"code":"(fn [val keys]\n\t(->> (repeat (count keys) val) vec (zipmap keys)))","user":"57382719e4b0cd1946bd1055"},{"problem":156,"code":"(fn [defval seq0] (zipmap seq0 (repeat (count seq0) defval)))","user":"54524afbe4b0e397800069bc"},{"problem":156,"code":"(fn [n keys] (apply hash-map (reduce concat (for [k keys] [k n]))))","user":"4eb47bb1535d7eef30807362"},{"code":"#(reduce conj {} (map (fn [x] {x %}) %2))","problem":156,"user":"52292ce9e4b04c906c9c6a67"},{"problem":156,"code":"(fn dflt-map [dflt coll] \n  (apply hash-map \n         (apply concat \n          (for [k coll default (list dflt)]\n            (list k default)))))","user":"53c126fce4b00fb29b22125b"},{"problem":156,"code":"#(loop [vec %2 val %1 new-map {}]\n       (if (empty? vec)\n         new-map\n         (recur (rest vec) val (assoc new-map (first vec) val))))","user":"5dcb1e73e4b02b31cc3da3b6"},{"problem":156,"code":"(fn [default items]\n  (loop [items items result {}]\n    (if (empty? items) result\n      \t(let [next-item (first items)]\n          \t(recur (rest items) (assoc result next-item default))))))","user":"596aaeefe4b069c0a1a19808"},{"code":"(fn __ [x y]\r\n  (into {} (for [i y] [i x])))","problem":156,"user":"4fe9b372e4b0547ebccb246b"},{"problem":156,"code":"(fn defaults [default keys]\n  (zipmap keys (repeat default)))","user":"55170dd9e4b06a49daca83bd"},{"problem":156,"code":"(fn [default keys]\n     (zipmap keys (repeat default)))","user":"5462caf5e4b01be26fd746b7"},{"problem":156,"code":"(fn [x y]\n   (letfn [(xx [x1 x2]\n\t       (let [a x1 b x2]\n\t\t (map (fn [x] \n\t\t\t  (vector x a)) b)))]\n\t  (into {} (xx x y))))","user":"5489dd4de4b0e286459a11ef"},{"problem":156,"code":"(fn [def-val keys]\n  (reduce (fn [m k]\n            (assoc m k def-val))\n          {}\n          keys))","user":"4eaa5c51535d7eef3080730a"},{"problem":156,"code":"(fn [v arr]\n   (let [r (count arr)]\n      (into {} (map vector arr (repeat r v)))\n     ))","user":"556f443be4b09a3098a5251e"},{"problem":156,"code":"(fn [val keys] (reduce merge (map #(hash-map % val) keys)))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"code":"(fn [val v]\t(reduce #(conj %1 {%2 val}) {} v))","problem":156,"user":"504f8334e4b0a02f9cffde8e"},{"code":"(fn [default-value keys]\n    (reduce #(assoc %1 %2 default-value) {} keys))","problem":156,"user":"4dbe19fe535d020aff1edf59"},{"code":"(fn [default keylist]\n  (apply hash-map (interleave keylist (repeat default))))","problem":156,"user":"52cca65be4b07d0d72b2736b"},{"problem":156,"code":"( fn defmap \n   [ defval keyseq ]\n   ( if ( empty? keyseq ) {}\n\t   ( conj\n\t     ( defmap defval ( rest keyseq ) )\n\t     [ ( first keyseq ) defval ]\n\t   )\n   )\n )","user":"57561529e4b02ea1147992d3"},{"problem":156,"code":"(fn def-map\n  [def-val coll]\n  (reduce (fn [new-coll k]\n            (assoc new-coll k def-val))\n          {}\n          coll))","user":"5ed08785e4b016b56eae05b1"},{"problem":156,"code":"(fn [default ks] (apply hash-map (interleave ks (repeatedly (constantly default)))))","user":"53f67bcfe4b0db01ade6f9e1"},{"problem":156,"code":"(fn [default old-vec]\n  (reduce (fn [new-map k]\n            (assoc new-map k default))\n          {}\n          old-vec))","user":"5722543ee4b0c5bde472c0c6"},{"problem":156,"code":"(fn peu [x y] (if (empty? y) {} (conj (peu x (rest y)) {(first y) x})))","user":"53fc8424e4b0de5c418485b3"},{"code":"(fn [default keys] \n    (zipmap keys \n        (repeat (count keys) default)\n    )\n)","problem":156,"user":"5017eface4b02f523d7cc5e7"},{"problem":156,"code":"(fn\n   [myVal myVec]\n   (zipmap (into [] (reverse myVec)) (take (count myVec) (repeat myVal)))\n   )","user":"54ae58f2e4b09f271ff37cf0"},{"problem":156,"code":"#(into {}(map vector %2 (repeat %1)))","user":"558504aae4b04192f3441ef5"},{"problem":156,"code":"(fn [v ks]\n  (loop [res {} kss ks]\n    (if (empty? kss)\n      (identity res)\n      (recur (conj res [(first kss) v]) (rest kss)))))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn [val keys]\n   (reduce conj (for [key keys] {key val})))","problem":156,"user":"4f99cfc2e4b0dcca54ed6d02"},{"problem":156,"code":"(fn [a coll] (into {} (map #(vec [% a]) coll) ))","user":"532f8569e4b019098a6f8b4f"},{"code":"(fn [v s](into {} ( for[ x s ] [x v])))","problem":156,"user":"52f3124ee4b05e3f0be25f0a"},{"problem":156,"code":"(fn md [value keys]\n  (into {} (map (fn [x] {x value}) keys)))","user":"55f1f0d1e4b06e875b46ce3b"},{"problem":156,"code":"(fn [val coll] (apply merge (map #(hash-map % val) coll)))","user":"55a372f1e4b0acc240e31537"},{"problem":156,"code":"(fn [x m]\n  (loop [result {}, key m]\n    (if (empty? key)\n      result\n      (recur (assoc result (first key) x)\n             (rest key)))))","user":"5ccf99fbe4b0ccb0619628c8"},{"code":"#(zipmap %2  (repeat (count %2) %1))","problem":156,"user":"537b1083e4b06839e8705e64"},{"code":"(fn defmap [dval kys]\n  (zipmap kys (repeat dval)))","problem":156,"user":"510cd1dde4b078ea71921124"},{"code":"(fn [default kys] (apply hash-map (apply concat (map vector  kys (repeat default)))))","problem":156,"user":"4fafd067e4b081705acca259"},{"problem":156,"code":"(fn [x s] (reduce merge (map (fn [y] {y x}) s)))","user":"548a3dc6e4b0e286459a11f2"},{"problem":156,"code":"(fn [a b] (reduce #(into %1 {%2 a}) {} b))","user":"56fda2bae4b08d47c97781a6"},{"code":"(fn get_defs [d m] (apply conj (map #(hash-map %1 d) m)))","problem":156,"user":"524c7fcfe4b0752c4cb68cbd"},{"code":"(fn [v0 l0]\n      (zipmap l0\n          ((fn [v l] (for [x l] v)) v0 l0)\n      )\n   )","problem":156,"user":"5242e1dae4b076204b44fa96"},{"problem":156,"code":"(fn default-val [default-value keys]\n  (reduce #(assoc %1 %2 default-value) {} keys))","user":"5d68f5e6e4b0db5d338d1605"},{"code":"(fn [dflt ks] (reduce #(into %1 {%2 dflt}) {} ks))","problem":156,"user":"515cf9b5e4b00901442db1d4"},{"problem":156,"code":"(fn [v ks] (reduce (fn [acc k] (assoc acc k v)) {} ks))","user":"54431b6ee4b032a45b869385"},{"problem":156,"code":"(fn [default seq] (into {} (map #(reduce conj {% default}) seq)))","user":"5722d621e4b0c5bde472c0d9"},{"problem":156,"code":"(fn dmap [d items] \n    ((fn iter [remain acc] \n        (if (empty? remain) \n            acc \n            (iter (rest remain) (assoc acc (first remain) d)))) items (hash-map)))","user":"60b2aaebe4b0e0fa5f1b4228"},{"code":"(fn [default-value x] (zipmap x (repeat default-value)))","problem":156,"user":"504f65bae4b0a02f9cffde7e"},{"problem":156,"code":"(fn [x y] \n  (let [ct (count y)]\n\t(zipmap y (repeat ct x))))","user":"5a6a7cc5e4b0512ff01cda27"},{"code":"(fn [x col]\n  (into {}  (for [y col] [y x]))\n  )","problem":156,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":156,"code":"(fn [defval keyset]\n   (reduce #(assoc %1 %2 defval) {} keyset))","user":"571cd9dce4b0145328a76271"},{"problem":156,"code":"(fn [v vec] (apply hash-map (interleave vec (repeat (count vec) v))))","user":"55a2ef1ae4b0acc240e3152d"},{"problem":156,"code":"(fn [val sq]\n  (reduce (fn [acc item]\n            (into acc {item val})) {} sq))","user":"56fed170e4b08d47c97781b2"},{"problem":156,"code":"(fn [n l] (reduce #(assoc %1 %2 n) {} l))","user":"54be7e93e4b0ed20f4ff6eed"},{"problem":156,"code":"(fn default\n  [v ks]\n  (zipmap ks (repeat v)))","user":"588ce4aee4b05c141a2560a1"},{"code":"(fn [defaultvalue keyseq] (into {} (map #(hash-map % defaultvalue) keyseq)))","problem":156,"user":"524ab5f2e4b09eba1c02239d"},{"problem":156,"code":"(fn func [val coll]\n  (apply merge (map (fn [x] {x val}) coll)))","user":"5e805895e4b085ba37836e44"},{"code":"(fn mapping[x y]\n  (if (nil? (first y))\n    {}\n    (conj (hash-map (first y) x) (mapping x (rest y)))))","problem":156,"user":"504e8e48e4b069badc5a33b3"},{"problem":156,"code":"(fn [v l] (apply merge (map #(hash-map % v) l)))","user":"5ce56db6e4b0a17bb84e2b72"},{"problem":156,"code":"(fn [default vect]  (reduce (fn [map key] (conj map {key default})) \n                                      {}\n                                      vect))","user":"5c9b848fe4b048ec896c5acf"},{"problem":156,"code":"(fn defmap\n  [x keys]\n  (zipmap keys (repeat (count keys) x)))","user":"55e9494ae4b0121d4835fd9e"},{"problem":156,"code":"(fn [x l]\n  (reduce #(assoc %1 %2 x) {} l)\n  )","user":"563b9acbe4b0bfe05bf11827"},{"code":"(fn[dfl ks] (\n             (fn[m dfl ks]\n               (if (> (count ks) 0)\n                 (recur (assoc m (first ks) dfl) dfl (rest ks))\n                 m\n                 )\n               ) {} dfl ks\n             )\n  )","problem":156,"user":"5191e91de4b08962174cf733"},{"code":"(fn [default-value mapping-keys]\n       (letfn [(mapping-default\n               [innter-default-value inner-mapping-keys]\n               (if (not (= (count inner-mapping-keys) 0))\n                 (assoc\n                   (mapping-default innter-default-value (rest inner-mapping-keys))\n                   (first inner-mapping-keys)\n                   innter-default-value)))]\n         (mapping-default default-value mapping-keys)))","problem":156,"user":"514d7e29e4b019235f6c0587"},{"code":"(fn [x y] \n  (reduce #(assoc %1 %2 x) {} y))","problem":156,"user":"5236cd89e4b0e010857b4e45"},{"problem":156,"code":"(fn [v kseq] \n  (reduce (fn [finalMap k] \n    (assoc finalMap k v)) {} kseq))","user":"5d72ad8fe4b02e6b30c93512"},{"problem":156,"code":"(fn [v ks] (apply assoc {} (interleave ks (cycle [v]))))","user":"5c9adfebe4b048ec896c5ab9"},{"code":"(fn [x coll] \n  (zipmap coll (repeat x)))","problem":156,"user":"50a4cbbee4b0344e360f3bc2"},{"problem":156,"code":"(fn [defaultv ks] (reduce #(conj %1 {%2 defaultv}) {} ks))","user":"558bdcefe4b0277789237633"},{"code":"(fn [default keys]\n    (reduce #(assoc %1 %2 default) {} keys))","problem":156,"user":"506b0a9ce4b0a2a5463de380"},{"code":"(fn [value keys] (reduce #(assoc %1 %2 value) {} keys))","problem":156,"user":"4fe8b6afe4b07c9f6fd12c76"},{"problem":156,"code":"(fn [val keys] (apply merge (map #(hash-map % val) keys)))","user":"5c936583e4b048ec896c5a1c"},{"problem":156,"code":"#(zipmap %2 (take 3 (repeat %1)))","user":"586b6a0ae4b01531a375e957"},{"problem":156,"code":"(fn [ds ks] (reduce conj (for [k ks] {k ds})))","user":"5766bab8e4b0a07e8fc180b1"},{"problem":156,"code":"(fn [val seq]\n  (reduce #(assoc %1 %2 val) {} seq))","user":"55f2d4ede4b06e875b46ce4c"},{"problem":156,"code":"(fn [val key] (into {} (for [k key] [k val])))","user":"5751fda4e4b02ea114799295"},{"code":"(fn [numb vect](zipmap vect (repeat numb)))","problem":156,"user":"522b1993e4b0d34ee08e71b6"},{"code":"(fn meep [v s]\n  (if (empty? s)\n    {}\n    (assoc (meep v (rest s)) (first s) v)))","problem":156,"user":"504e1fdde4b0f6ff3350c468"},{"problem":156,"code":"; this ones a duzy\n\n#(zipmap %2 (repeat %1))","user":"53cdbad1e4b00fb29b2212e6"},{"code":"(fn [d s]\n  (into {} (map (fn [x] {x d}) s))\n  )","problem":156,"user":"512339fce4b03b44edbed434"},{"problem":156,"code":"#(zipmap %2 (for [x (range (count %2))] %1))","user":"552af5ebe4b0ffed3738f95b"},{"code":"(fn [d, k]\n  (zipmap k (repeat d)))","problem":156,"user":"52a32876e4b04e0c58e87bfb"},{"problem":156,"code":"(fn [v coll]\n  (into {} (map (fn [a] [a v]) coll)))","user":"5878fb4ee4b01531a375eac1"},{"problem":156,"code":"(fn [default values] (reduce #(assoc %1 %2 default) {} values ))","user":"5b6f72ede4b0c6492753e7dc"},{"code":"#(zipmap %2 (replicate 3 %1))","problem":156,"user":"51933b41e4b0c663c5d86ca2"},{"problem":156,"code":"(fn mapDefault\n  [x col]\n  (reduce #(assoc %1 %2 x) {} col)\n  )","user":"5e95013fe4b0fbed045a3800"},{"code":"#(apply hash-map (interleave %2 (map (constantly %1) %2)))","problem":156,"user":"510b574fe4b078ea719210fe"},{"problem":156,"code":"#(->> (for [k %2] {k %1})\n      (into {}))","user":"579ea15ee4b05b1deef9ae2a"},{"code":"(fn [defv ks] \n  (zipmap ks (repeat defv)))","problem":156,"user":"53034738e4b0d8b024fd373e"},{"problem":156,"code":"(fn [default arr] (zipmap arr (repeat default)))","user":"4ed94cd6535d10e5ff6f5302"},{"problem":156,"code":"(fn [char seq]\n  (loop [tmpSeq (map #(conj {} {% char}) seq)\n         newMap {}]\n    (if (empty? tmpSeq)\n      newMap\n      (recur (rest tmpSeq) (conj newMap (first tmpSeq))))))","user":"59b554cee4b05c620303ca0f"},{"problem":156,"code":"(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))\n\n;; or\n\t  \n;#(zipmap %2 (repeat %1))","user":"53be3ee7e4b0d9a98559a6df"},{"problem":156,"code":"#(loop [m {} ks %2]\n   (if (empty? ks)\n     m\n     (recur (conj m {(first ks) %1}) (rest ks))))","user":"55952410e4b0c79f6e1db962"},{"code":"(fn [default v]\n  (reduce (fn [m k] (assoc m k default)) {} v))","problem":156,"user":"504e0517e4b078edc5f5939a"},{"problem":156,"code":"(fn [default_value key_seq] (reduce (fn [acc element] (assoc acc element default_value)) {} key_seq))","user":"5c723f4be4b0fca0c16227a0"},{"code":"(fn [d l] \n   (apply hash-map \n          (mapcat #(list % d) l) ) )","problem":156,"user":"50321311e4b000fc67a99a86"},{"problem":156,"code":"(fn [default lst]\n  (loop [res {} lst lst]\n    (if (empty? lst)\n      res\n      (let [[x & remaining] lst]\n      (recur (assoc res x default) remaining)))))","user":"51b920bfe4b0e871ca4958f9"},{"problem":156,"code":"(fn [d,k] (apply merge (map #(hash-map % d) (vec k))))","user":"5512b15ae4b055c2f668d4b5"},{"problem":156,"code":"#(reduce (fn [map key] (assoc map key %1)) {} %2)","user":"53da3fcde4b0e771c3025497"},{"problem":156,"code":"(fn [d kk] (reduce conj (for [x kk] {x d})) )","user":"559af785e4b066d22e731f4c"},{"problem":156,"code":"(fn [default ks]\n  (into {} (map vector ks (repeat default))))","user":"5ce077e9e4b0a17bb84e2b0c"},{"code":"(fn[ v l] (reduce #(assoc %1 %2 v) {} l) )","problem":156,"user":"5018ed15e4b011a2e0bf6412"},{"problem":156,"code":"#(apply conj {} (for [x %2] [x %1]))","user":"5712854ce4b07c98581c3a89"},{"problem":156,"code":"#(->> %1\n      repeat\n      (interleave %2)\n      (apply hash-map))","user":"567e418fe4b0feffd0d18eb1"},{"code":"(fn [val coll]\n  (into {} (map #(vector % val) coll)))","problem":156,"user":"4e521cef535d302ef430da6d"},{"problem":156,"code":"(fn [n coll] (reduce merge (map #(hash-map %1 n) coll)))","user":"4e7d5eb8535db169f9c796d6"},{"problem":156,"code":"(fn [v, ks] \n   (apply merge (map #(hash-map % v) ks)) )","user":"5ee4b2e6e4b029a2061bbe90"},{"code":"(fn [default mapkeys]\n  (zipmap mapkeys (repeat (count mapkeys) default)))","problem":156,"user":"52a779fce4b0c58976d9ac1a"},{"problem":156,"code":"(fn [def-val map-keys] (into {} (for [k map-keys] [k def-val])) )","user":"599ed08fe4b0871e7608b812"},{"code":"(fn [x y]\n  (let [cnt (count y)]\n    (apply hash-map (interleave y (repeat cnt x)))))","problem":156,"user":"52029e5de4b030ee0c5b26fc"},{"problem":156,"code":"#(apply merge (map (fn [key] (hash-map key %1)) %2))","user":"5647ba2ae4b0284900eef622"},{"problem":156,"code":"(fn [val keys] (into {} (map #(hash-map % val) keys)))","user":"58b066dee4b0ebc645576cd9"},{"problem":156,"code":"(fn [v ks] (reduce #(assoc % %2 v) {} ks))\n\n; Best solution I've seen: #(zipmap %2 (repeat %))","user":"54889b50e4b0e286459a11d4"},{"problem":156,"code":"(fn\n  [defaultValue keys]\n  (reduce (fn [outMap inKey]\n            (assoc outMap inKey defaultValue))\n          {}\n          keys))","user":"5b69bf95e4b0c6492753e790"},{"code":"(fn [default  mapp]\n  (loop [tail mapp result {}]\n    (if (empty? tail)\n     result\n     (recur (rest tail) (conj result {(first tail) default})))))","problem":156,"user":"532db3e7e4b019098a6f8b3d"},{"problem":156,"code":"(fn [k coll] (into {} (map #(assoc {} % k) coll)))","user":"559ff9eee4b0acc240e314ee"},{"problem":156,"code":"(fn [x ks]\n  (apply hash-map (mapcat #(list % x) ks)))","user":"58c2df0ae4b021aa9917ed17"},{"code":"(fn [default keys]\n   (zipmap keys (map (fn [i] default) keys)))","problem":156,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":156,"code":"(fn [d v] (into (hash-map) (map #(assoc {} % d) v)))","user":"58524875e4b0b7285a6f4ead"},{"code":"(fn mk-map [v se]\n  (into {} (\n    map (fn [x] {x v}) se)))","problem":156,"user":"535a170ae4b04ce2eb3ed2a3"},{"problem":156,"code":"(fn [x ls]\n  (into (sorted-map) \n        (map #(hash-map % x) ls)))","user":"5d125d63e4b02c15ef021999"},{"code":"(fn [d xs] (zipmap xs (repeat (count xs) d)))","problem":156,"user":"4fe89c81e4b07c9f6fd12c57"},{"problem":156,"code":"(fn [dv sq]\n  (into {} (map #(vector % dv) sq)))","user":"5243e37ae4b076204b44fae3"},{"problem":156,"code":"(fn [default-value keys]\n  (reduce #(assoc %1 %2 default-value) {} keys))","user":"5e67ab18e4b0e171e103368a"},{"code":"(fn [v k] (into {} (map #(hash-map % v) k)))","problem":156,"user":"536be89ee4b0fc7073fd6e32"},{"problem":156,"code":"(fn [v coll]\n  \t(reduce #(assoc %1 %2 v) {} coll)\n  )","user":"5de6484ce4b0986d99407f66"},{"problem":156,"code":"(fn [default vals]\n    (reduce (fn [acc new] (conj acc [new default])) {} vals))","user":"58b81490e4b0ebc645576d8c"},{"problem":156,"code":"(fn [n v] (reduce (fn [a b] (merge a {b n})) {} v))","user":"5693cc39e4b0dcc4269f4108"},{"problem":156,"code":"(fn [d s]\n    (into {} (map #(vector % d) s)))","user":"522724bde4b04e78ff2e19aa"},{"problem":156,"code":"(fn [x v] (zipmap v (repeat 3 x)))","user":"55b1c62de4b0da326a65cf72"},{"problem":156,"code":"(fn [d k]\n   (reduce (fn [x y] (conj x [y d])) {} k))","user":"59248a78e4b072a2710fce59"},{"code":"(fn asdf [x y] (reduce conj (map #(hash-map % x) y)))","problem":156,"user":"5012036ce4b0a040369c12f4"},{"problem":156,"code":"(fn [x seq]\n  (zipmap seq (repeat x)))","user":"5c3796b3e4b0d62ef62d9f77"},{"code":"(fn [df sq]\n  (apply merge (for [x sq] (assoc {} x df) )))","problem":156,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"problem":156,"code":"(fn [dd mkeys] (into {} (map (fn [k] (vector k dd)) mkeys)))","user":"5b210749e4b03cfeda66ed48"},{"problem":156,"code":"(fn [x coll](reduce #(assoc %1 %2 x) {} coll))","user":"546280d8e4b01be26fd746b0"},{"problem":156,"code":"(fn mapd [v s]\n  (zipmap s (repeat (count s) v)))","user":"5848c842e4b089d5ab817ec6"},{"code":"(fn [key map] (zipmap map (repeat key)))","problem":156,"user":"5252f8ede4b0541d1855b8e0"},{"problem":156,"code":"(fn [val keys]\n  (into {}\n        (for [key keys]\n          (assoc {} key val))))","user":"5313d68de4b08068f379ed0f"},{"code":"(fn [x coll] (apply assoc {} (mapcat #(list % x) coll)))","problem":156,"user":"5202cfe7e4b030ee0c5b2702"},{"code":"#(into {} (map (fn [x] [x %1]) %2))","problem":156,"user":"4eb9c82d535dfed6da9c6d5c"},{"problem":156,"code":"(fn [value ks]\n  (reduce (fn [acc, k] (into acc {k value})) {} ks))","user":"4fe899a6e4b07c9f6fd12c54"},{"problem":156,"code":"(fn [thing collection] \n  (into {} (map (fn [col] {col thing}) collection))\n  )","user":"59537716e4b066ee0a44aee5"},{"code":"(fn cmap [d, ks] \n  (if (= [] ks)\n    {}\n    (assoc (cmap d (rest ks)) (first ks) d)))","problem":156,"user":"532b9075e4b09d4e7a9b5533"},{"code":"(fn [x y]\n  (into {}\n    (map #(conj [] % x) y)))","problem":156,"user":"507e5cf8e4b085af06e3afd1"},{"problem":156,"code":"(fn [x coll]\n  (into {}\n  \t(for [y coll]\n    \t[y x])))","user":"5db19599e4b010eb3c36cd05"},{"problem":156,"code":"#(loop [x 0\n        a {}]\n   \t   (if (= x (count %2)) a\n           (recur (inc x) (assoc a (nth %2 x) %1))\n       )\n)","user":"55f68360e4b06e875b46ce93"},{"code":"(fn my-map-thing [n s]\n  (let [def-seq (take (count s) (repeat n))]\n  (zipmap s def-seq)\n  )\n)","problem":156,"user":"4faacc04e4b081705acca201"},{"code":"#(apply hash-map (apply concat (for [x %2] [x %1])))","problem":156,"user":"5196568fe4b04c0af7ff3c1c"},{"problem":156,"code":"(fn [n tkeys] (reduce (fn [a b] (assoc a b n)) {} tkeys))","user":"5f012a2ee4b0cf489e8d7f1e"},{"problem":156,"code":"#(apply array-map (mapcat vector %2 (repeat %1)))","user":"563dfc02e4b0da801c4e4662"},{"problem":156,"code":"#(reduce (fn [r x] (conj r {x %1})) {} %2)","user":"55c1fa2be4b0e31453f64971"},{"problem":156,"code":"(fn consmap [x keys] (zipmap keys (repeat (count keys) x)))","user":"5a08f951e4b01bb0ae8afdfd"},{"problem":156,"code":"(fn [d ks] \n   (apply merge\n   (let [\n     m {}\n     m (map #(assoc m % d) ks)]\n     m\n     ))\n )","user":"5412646de4b01498b1a719d4"},{"code":"(fn [x v] (let [result {}] (into {} (for [e v] (into result {e x})))))","problem":156,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn [defVal keyArr] (reduce (fn [x y] (assoc x y defVal)) {} keyArr))","problem":156,"user":"50856bd1e4b004985b776e4c"},{"problem":156,"code":"(fn [value value-seq]\n  (zipmap value-seq [value value value]))","user":"57b19fa1e4b0fbc9809a2754"},{"problem":156,"code":"(fn[default col]\n  (reduce \n   \t\t(fn [m k] (println k m)(assoc m k default))  \n   {} col)\n  )","user":"5e64f44de4b0fd0acd1586ae"},{"code":"(fn mkmp [val coll]\n  (cond (empty? coll) {}\n        :else (into {(first coll) val} (mkmp val (rest coll)))))","problem":156,"user":"52153bdde4b0961f15ac4daa"},{"code":"(fn [default keys] (apply hash-map (interleave keys (repeat (count keys) default))))","problem":156,"user":"4fb248aae4b081705acca28b"},{"code":"(fn __ [val coll]\n  (apply hash-map (interleave coll (repeat (count coll) val))))","problem":156,"user":"52463059e4b09dbe66b56198"},{"problem":156,"code":"(fn bla\n   [default my-map]\n   (println my-map)\n   (if (< 0 (count (rest my-map)))\n     (merge (hash-map (first my-map) default) (bla default (rest my-map)) )\n     (hash-map (first my-map) default)\n     )\n   )","user":"54458995e4b032a45b86939e"},{"problem":156,"code":"(fn [default values]\n  (loop [new-map {},\n         values values]\n    (if (= (count values) 0)\n      new-map\n      (recur\n       (assoc new-map (first values) default)\n       (next values)\n      )\n    )\n  )\n)","user":"54bd91d7e4b0ed20f4ff6ee2"},{"problem":156,"code":"(fn [dflt lst] \n  (reduce #(assoc %1 %2 dflt) {} lst))","user":"56102f50e4b05f002753df6b"},{"problem":156,"code":"(fn\n  [def-value keys]\n  (reduce (fn [m k] (conj m {k def-value})) {} keys))\n\n;(conj coll x)","user":"5cb39440e4b026601754b903"},{"problem":156,"code":"(fn [v k]\n  (apply merge (map #(assoc {} % v) k )\n  ))","user":"5650ac8be4b0284900eef6c2"},{"code":"#(into {} (map vector %2 (cycle [%1])))","problem":156,"user":"4e513758535dc968683fc4f3"},{"code":"(fn [d k] (zipmap k (repeat d)))","problem":156,"user":"502b04bee4b063e52107afac"},{"problem":156,"code":"(fn [default-value keys]\n  (->> keys\n       (map #(vector % default-value))\n       (into {})))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":156,"code":";;(map (fn [v k] (vector k v)) 1 [:a :b :c] )\n\n(fn [v ks] (reduce conj {} (map vector ks (repeat v) ) ) )","user":"5d1cf523e4b02ea6f0fb6994"},{"problem":156,"code":"(fn [default llaves] \n  (loop [ks llaves mapa {}]\n    (if \n      (empty? ks) mapa\n      (recur (rest ks) (assoc mapa (first ks) default))\n      )\n    )\n  )","user":"5f8b7506e4b0715f5002d74c"},{"problem":156,"code":"(fn [d l] (into (hash-map) (map #(identity [%1 d]) l )))","user":"55f99742e4b03cbcff9738c5"},{"problem":156,"code":"#(apply hash-map(interleave %2(repeat %1)))","user":"57ef793de4b0bfb2137f5bd8"},{"problem":156,"code":"(fn [default col] \n  (reduce #(assoc %1 %2 default) {} col))","user":"5745bb9fe4b009280f9f2b54"},{"code":"(fn [v coll] (reduce #(assoc % %2 v) {} coll))","problem":156,"user":"539a2901e4b0b51d73faaf0f"},{"code":"(fn foo [v ks] (when (not (empty? ks)) (conj (hash-map (first ks) v) (foo v (rest ks)))))","problem":156,"user":"50f9c7fde4b0e7c80cb15a52"},{"problem":156,"code":"(fn [def-val seq] (into {} (map #(hash-map % def-val) seq)))","user":"5227eacee4b0186687e23a5e"},{"problem":156,"code":"(fn [val sq]\n (zipmap sq \n          (repeat (count sq) val))\n  )","user":"544f58e8e4b0e39780006991"},{"code":";#(loop [coll %2 result {}] (if (nil? (seq coll)) result (recur (next coll) (conj result {(first coll) %1}))))\n\n#(zipmap %2 (repeat %1))","problem":156,"user":"524f4256e4b0541d1855b808"},{"problem":156,"code":"(fn defaultMap [x,y] (zipmap y (repeat x)))","user":"55204412e4b08d5046aa8a5f"},{"problem":156,"code":"(fn maps [value keys-given]\n  (if (empty? keys-given)\n    {}\n    (assoc (maps value (rest keys-given)) (first keys-given) value)))","user":"5e18c885e4b0dc95940084fc"},{"problem":156,"code":"(fn [d c] \n  (apply hash-map\n      (mapcat #( vector %1 d ) c)))","user":"5bfc50ece4b0bdcf453d15ea"},{"problem":156,"code":"(fn [val keys]\n  (into {} (map #(identity [% val]) keys)))","user":"53263406e4b09d4e7a9b54eb"},{"code":"(fn\n  [d l]\n  (loop [li l\n         mp {}]\n  (if (empty? li) \n    mp\n    (recur (rest li) (assoc mp (first li) d))))\n  )","problem":156,"user":"53663e82e4b0243289761e73"},{"code":"(fn mapmaker [defkey inkeys]                                                                                                                     \n    (reduce #(assoc %1 %2 defkey) {} inkeys))","problem":156,"user":"50057f23e4b0678c553fc466"},{"code":"(fn [d keys]\n   (apply conj {}\n          (map #(vec [% d]) keys)))","problem":156,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":156,"code":";;one stragegy involves inserting the first arg after each member of the vector\n;;another might be recursively constructing the hash map\n\n;;map key val\n#(loop [def-val %1\n        my-seq %2\n        my-map {}]\n     (if (empty? my-seq)\n      my-map\n      (recur def-val (rest my-seq) (assoc my-map (first my-seq) def-val))\n   ))","user":"5de8648de4b0986d99407f7c"},{"problem":156,"code":"(fn [val keys]\n      \t\t(loop [ret {} key keys]\n      \t\t\t(if(empty? key)\n      \t\t\t\tret\n      \t\t\t\t(recur (assoc ret (first key) val) (rest key))\n      \t\t\t\t\t)))","user":"5996fd2be4b07157cc8daac5"},{"problem":156,"code":"#(apply conj {} (map vector %2 (repeat %1)))","user":"53e27bf1e4b036ad0777e3f2"},{"code":"(fn [value keys] (reduce #(conj %1 [%2 value]) {} keys))","problem":156,"user":"4fb2101ce4b081705acca284"},{"problem":156,"code":"(fn [d v] (reduce (fn [m k] (assoc m k d)) {} v))","user":"55e2f502e4b050e68259b43c"},{"problem":156,"code":"(fn [df kys] (reduce merge {} (for [k kys d [df]] {k d})))","user":"5ff88607e4b06df49cee14a6"},{"code":"(fn [v l]\n(apply hash-map (interleave l (repeat v))))","problem":156,"user":"52091d57e4b0e152394d76f0"},{"problem":156,"code":"(fn [x y] (into {} (map (fn [z] [z x]) y)))","user":"553bc237e4b09218d5f4500a"},{"problem":156,"code":"(fn [default-value coll]\n  (reduce merge\n          (map #(hash-map % default-value) coll)) )","user":"4ee897fe535d93acb0a66883"},{"problem":156,"code":"(fn [dft ks] (into (sorted-map) (map (fn [x] [x dft]) ks)))","user":"56fbf83de4b07572ad1a88da"},{"code":"(fn construct-map [value coll]\r\n  (loop [result {} coll coll]\r\n    (if(empty? coll)\r\n    result\r\n    (recur (assoc result (first coll) value) (rest coll)))))","problem":156,"user":"4fd170fce4b04c3a95aa0411"},{"problem":156,"code":"#(into {} (map vector %2 (repeat (count %2) %)))","user":"54a11042e4b09f271ff37c49"},{"problem":156,"code":"#(loop [res {}\n        ks %2]\n   (if (empty? ks)\n     res\n     (recur (conj res {(first ks) %1}) (rest ks))))","user":"57f253a3e4b0511f1d294dea"},{"code":"(fn [v ks] (into {} (map #(vector %1 %2) ks (repeat v))))","problem":156,"user":"4f327844e4b0d6649770a092"},{"problem":156,"code":"(fn [d ks] (into {} (map #(vec [% d]) ks)))","user":"54c779bee4b045293a27f63b"},{"problem":156,"code":"(fn [default key_seq] (into {} (for [k key_seq]\n                                    [k default])))","user":"55664950e4b0c656e3ff1832"},{"code":"#(into {} (for [i %2] [i %1]) )","problem":156,"user":"530262c8e4b0d8b024fd3728"},{"code":"(fn [v k] (zipmap k (repeat v)))","problem":156,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":156,"code":"(fn [d ks]\n    (apply hash-map (apply concat (map #(vector % d) ks)))\n    )","user":"58ec1e63e4b056aecfd47d54"},{"problem":156,"code":"#(reduce (fn [m elem] (assoc m elem %1)) {} %2)","user":"5c0a87e6e4b0bdcf453d1707"},{"code":"(fn [d ks]\n  (reduce #(assoc % %2 d) {} ks))","problem":156,"user":"50608ea0e4b07251188e4456"},{"problem":156,"code":"(fn [v k] (loop [dict {}\n                  kys k] \n               (if (empty? kys)\n                   dict\n                   (recur (assoc dict (first kys) v) (drop 1 kys)))))","user":"6074e278e4b069485764de51"},{"code":"(fn [val keys]\r\n  (loop [keys keys\r\n         res (hash-map)]\r\n    (if (empty? keys)\r\n      res\r\n      (recur (rest keys) (assoc res (first keys) val)))))","problem":156,"user":"4de2f44f535d08e6dec9fdec"},{"problem":156,"code":"(fn [x l]\n  (reduce #(into %1 [[%2 x]]) {} l))","user":"5626447fe4b00e49c7cb47bd"},{"problem":156,"code":"(fn make-def-map [default keys]\n  (into {} (map #(vector % default) keys)))","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn [v ks] (into {} (for [x ks] [x v])))","problem":156,"user":"51631aeee4b055933a9ca02a"},{"problem":156,"code":"#(loop [v %2 m {}]\n   (if (empty? v)\n     m\n     (recur (rest v) (assoc m (first v) %1))))","user":"56815e2fe4b0945ebc182a84"},{"problem":156,"code":"(fn [default in-keys]\n  (loop\n    [res {}\n     keylist in-keys]\n    (if (empty? keylist)\n      res\n      (recur (merge res {(first keylist) default}) (rest keylist)))))","user":"5658d775e4b00d3155796114"},{"problem":156,"code":"#( zipmap %2 ( repeat %1 ) )","user":"4fbb7010e4b081705acca2e7"},{"code":"(fn [default coll]\n  (let [defaults (repeat (count coll) default)]\n    (reduce merge (map #(assoc {} %2 %1) defaults coll))))","problem":156,"user":"51592b81e4b0394f658fe22c"},{"problem":156,"code":"(fn [v ks](into {} (map #(assoc {} % v) ks)))","user":"54d05a9de4b0e8a36923e5c7"},{"problem":156,"code":"(fn [default ks]\n  (into {} (map (fn [k]\n                  [k default])\n                ks)))","user":"5498e155e4b0b312c081ff86"},{"code":"(fn seq-map\n  [val keys]\n  (into {}\n        (map (fn [k] [k val]) keys)))","problem":156,"user":"4ead1bb3535d7eef3080731d"},{"code":"(fn [v keys]\n  (apply hash-map (interleave keys (repeat v))))","problem":156,"user":"4f60ed88e4b0defedf855fb2"},{"problem":156,"code":"(fn [default thekeys]\n  (loop [ks thekeys\n         result {}]\n    (if (empty? ks)\n      result\n      (recur (rest ks) (conj result [(first ks) default])))))","user":"54ba8076e4b0ed20f4ff6eb5"},{"code":"(fn [d, ks]\n  (reduce\n    merge\n    (map\n      #(hash-map % d)\n      ks)))","problem":156,"user":"5384e2cee4b06839e8705ef7"},{"problem":156,"code":"(fn [v c]\n  (reduce (fn [m p]\n            (assoc m p v)) {} c))","user":"57eb10b1e4b0bfb2137f5b5b"},{"code":"#(into {} (for [x %2] (vector x %1)))","problem":156,"user":"4fff7246e4b0678c553fc3ff"},{"code":"(fn [d ks]\n  (zipmap ks (repeat (count ks) d)\n  ))","problem":156,"user":"4fa719c0e4b081705acca1bf"},{"problem":156,"code":"(fn [v keyz]\n  (apply merge (map #(hash-map % v) keyz)))","user":"541475afe4b01498b1a719eb"},{"problem":156,"code":"(fn [d k](zipmap k (repeat d)))","user":"5d5f46a6e4b0c9e5857d5000"},{"problem":156,"code":"(fn [d xs] (into {} (map #(vector % d) xs)))","user":"542d2385e4b0dad94371f2b2"},{"problem":156,"code":"(fn [x y] (zipmap y (repeat x) ))","user":"53fdc4b8e4b0de5c418485ea"},{"problem":156,"code":"(fn [d k] (reduce #(into % {%2 d}) {} k))","user":"5d6f8b4de4b04d129b00f2d3"},{"problem":156,"code":"(fn [a xs]\n  (zipmap xs (repeat a)))","user":"5883920ee4b0f1effa3b767e"},{"problem":156,"code":"(fn [d xs]\n  (into {} (map #(vector % d) xs)))","user":"51dafedee4b09f6bc204eee2"},{"problem":156,"code":"(fn [default s]\n   (reduce #(assoc %1 %2 default) {} s)\n   )","user":"6024544be4b0d5df2af2221f"},{"problem":156,"code":"(fn [d ks]\n  (reduce conj (map #(assoc {} % d) ks)))","user":"55b42706e4b01b9910ae297b"},{"code":"(fn [x y] (reduce #(assoc % %2 x) {} y))","problem":156,"user":"4da3e51330acd6ed10482a68"},{"problem":156,"code":"(fn default-map [def-value ks]\n  (reduce #(assoc %1 %2 def-value) {} ks))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":156,"code":"(fn [default keys-coll]\n  (into {} (map #(vector %1 default) keys-coll)))","user":"55d6a2ebe4b0e31453f64a9a"},{"code":"#(reduce conj {} (for [k %2] {k %1}))","problem":156,"user":"50b45ee1e4b08fc3808f30ca"},{"code":"(fn [v m]\n   (reduce #(assoc % %2 v) {} m))","problem":156,"user":"51b86a0fe4b09e0e347b2e78"},{"code":"(fn[dval keyseq]\n\t(into {} (map #(hash-map % dval) keyseq)))","problem":156,"user":"51b73a91e4b0d906fcd71d33"},{"code":"(fn [default-val v-keys] (into {} (map #(conj [%1] default-val) v-keys)))","problem":156,"user":"502ade49e4b0614b52996120"},{"problem":156,"code":"(fn [default keyList] (reduce #(assoc %1 %2 default) {} keyList))","user":"54d2b411e4b0e8a36923e5f9"},{"problem":156,"code":"(fn [the-value initial-keys]\n  (loop [remaining-keys initial-keys\n         result-map {}]\n    (if (empty? remaining-keys)\n      result-map\n      (recur (rest remaining-keys) (conj result-map [(first remaining-keys) the-value])))))","user":"56e48302e4b03a7c14b85a4e"},{"problem":156,"code":"(fn map-defaults-better\n  [dv ks]\n  (zipmap ks (repeat (count ks) dv)))","user":"5f3103aee4b0574c87022c24"},{"problem":156,"code":"(fn [v l] (zipmap l (repeat v)))","user":"519f1eaee4b087743fad219c"},{"problem":156,"code":"(fn [default kcoll] (zipmap kcoll (repeat (count kcoll) default)))","user":"5a4cac86e4b05d388ecb6b95"},{"problem":156,"code":"(fn [d col] (reduce #(conj % [%2 d]) {} col))","user":"54d187b7e4b0e8a36923e5e4"},{"problem":156,"code":"(fn [d ks] (reduce #(assoc-in %1 [%2] d) {} ks))","user":"5b919d9de4b0c0b3ffbd4a24"},{"code":";(fn [val keys]\n;  (reduce #(assoc %1 %2 val) {} keys))\n\n(fn [val keys] (zipmap keys (repeat val)))","problem":156,"user":"5312cdaae4b08068f379ed03"},{"problem":156,"code":"(fn [e cll] (reduce conj {} (for [k cll] {k e})))","user":"54530382e4b0e397800069cc"},{"code":"(fn [v m] (zipmap m (repeat (count m) v)))","problem":156,"user":"4fead955e4b0140c20fb9c10"},{"code":"#(reduce (fn [m x] (assoc m x %)) {} %2)","problem":156,"user":"4fc4eadee4b081705acca353"},{"code":"(fn map-creator [default keys]\n  (if (next keys)\n    (conj \n      (map-creator default (next keys)) \n      (hash-map (first keys)default))\n    (hash-map (first keys) default)))","problem":156,"user":"50ab38a8e4b0f65d68208507"},{"problem":156,"code":"(fn [default key_values]\n  (zipmap key_values (repeat default))\n  )","user":"5f36dc06e4b0574c87022c4c"},{"code":"(fn mapdefault [default lst]\n  (cond (= (count lst) 1) {(first lst) default}\n    :else (conj {(first lst) default} (mapdefault default (rest lst)))))","problem":156,"user":"530cb5b8e4b02e82168697e0"},{"problem":156,"code":"(fn [v s]\n  (reduce\n   #(conj %1 {%2 v})\n   {}\n   s))","user":"5f597522e4b0a0bc16850a9e"},{"problem":156,"code":"(fn [value keeys]\n  (into {} (map #(hash-map % value) keeys)))","user":"58bdb36fe4b0888cdc949d35"},{"code":"(fn [val coll]\n  (apply conj (map (fn[key] {key val}) coll)\n  )\n)","problem":156,"user":"50959df3e4b087f34d351ab4"},{"code":"(fn [defval init-keys]\n  (loop [res {} key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))","problem":156,"user":"52b1ff48e4b0c58976d9ace7"},{"problem":156,"code":"#(into {} (for [item %2] {item %1}))","user":"5820cca0e4b04b46fc4b0f62"},{"problem":156,"code":"(fn [defv klist]\n  (reduce\n   \t(fn [kmap k]\n      (assoc kmap k defv)) {} klist))","user":"5833a6d8e4b089d5ab817ca2"},{"problem":156,"code":"(fn [v k]\n  (reduce #(assoc %1 %2 v) {} k))","user":"5a03652ae4b01bb0ae8afd83"},{"problem":156,"code":"(fn f [v k]\n  (reduce\n    #(assoc %1 %2 v)\n    {}\n    k))","user":"55df2752e4b050e68259b3ed"},{"code":"(fn [y xs] (reduce #(assoc %1 %2 y) {} xs))","problem":156,"user":"5145832be4b0e8879607340a"},{"problem":156,"code":"#(reduce (fn reducer [x y] (assoc x y %)) {} %2)","user":"5e0ad590e4b099d064962f6e"},{"code":"(fn[y, x] (zipmap x (repeat y)))","problem":156,"user":"53566247e4b04ce2eb3ed266"},{"problem":156,"code":"(fn [a b]\n    (loop [keyz b, res {}]\n        (if (empty? keyz)\n            res\n            (recur (rest keyz) (conj res {(first keyz) a})))))","user":"510d2a99e4b078ea71921130"},{"code":"(fn [val list]\n   ((fn walk-list [val list result]\n      (if (empty? list)\n        result\n        (walk-list val\n                   (rest list)\n                   (assoc result (first list) val))))\n    val list {}))","problem":156,"user":"4f03818e535dcb61093f6b00"},{"problem":156,"code":"(fn [x coll]\n  (reduce #(assoc %1 %2 x) {} coll))","user":"5245aea8e4b08ba239308123"},{"code":"(fn [d k] (loop [m {} kl k] (if (seq kl) (recur \n(conj m [(first kl) d]) (rest kl)) m)))","problem":156,"user":"50b24a2fe4b03ea88043355c"},{"problem":156,"code":"(fn [value keyseq] \n  (reduce conj\n   (for [k keyseq]\n     (assoc {} k value))))","user":"5a720177e4b0512ff01cda96"},{"problem":156,"code":"(fn [n xs] (apply hash-map (mapcat #(list %1 n) xs)))","user":"548cd813e4b0e286459a1211"},{"code":"(fn [v keys]  (apply merge (for [k keys]  {k v})))","problem":156,"user":"52d24f60e4b099d49816f0a8"},{"problem":156,"code":"(fn [v coll] (apply hash-map (conj (vec (interpose v coll)) v)))","user":"53b1db8ee4b047364c044495"},{"code":"(fn [a b] (into {} (map (fn [x] [x a]) b)))","problem":156,"user":"4f2a7174e4b0d6649770a03e"},{"code":"(fn [default coll]\n  (into {} (for [x coll] {x default})))","problem":156,"user":"5066fa7de4b03d366d7cb2b9"},{"code":"(fn [a lst] \n  (apply merge (for [x lst]\n    {x a})))","problem":156,"user":"50d5c19ce4b0159555a1fc61"},{"problem":156,"code":"(fn [key values]\n  (let [c (count values)\n        nvalues (replicate c key)]\n    (apply assoc {} (interleave values nvalues))))","user":"60aecd73e4b00e9e6653c49a"},{"code":"(fn makeMap [default sett] (if (= (count sett) 0) {} (assoc (makeMap default (drop 1 sett)) (first sett) default)))","problem":156,"user":"52ea19ace4b09f7907dd14b7"},{"code":"(fn [a b] (zipmap b (take (count b) (repeat a))))","problem":156,"user":"4f041af6535dcb61093f6ba3"},{"problem":156,"code":"(fn [x y] \n  (apply merge\n       (map (fn [z] {z x}) y)))","user":"5d7a748ce4b02e6b30c93547"},{"code":"(fn set-default-value [default-value, collection] \n  \t(into {} (map #(hash-map % default-value) collection)))","problem":156,"user":"51e6786ae4b0ab43cc26c216"},{"problem":156,"code":"(fn [v lst] \n  (zipmap lst (repeat (count lst) v)))","user":"560a7775e4b05f002753defa"},{"problem":156,"code":"(fn [default-val sq]\n  (reduce (fn [a b]\n            (conj a b))\n          {}\n          (map #(hash-map % default-val) sq)))","user":"579816abe4b039eba2ecb10d"},{"code":"(fn [default seq]                                                                          \n  (loop [result {}                                                                         \n         my-seq (reverse seq)]                                                             \n    (if (not-empty my-seq)                                                                 \n      (do                                                                                  \n        (prn (first my-seq))                                                               \n        (recur (assoc result (first my-seq) default)                                       \n               (rest my-seq)))                                                             \n      result)))","problem":156,"user":"5161c6a7e4b009fba0926e38"},{"problem":156,"code":"#(reduce (fn [accumulated item]\n           (conj accumulated [item %1]))\n         {}\n         %2)","user":"5793adf0e4b0e215f87e8462"},{"problem":156,"code":"(fn [val map] (into {} (for [x map] [x val])))","user":"546be022e4b00cfc9eacc171"},{"problem":156,"code":"(fn [default keyvalues] (zipmap keyvalues (repeat default)))","user":"54021f13e4b0df28a13c62cc"},{"problem":156,"code":"(fn [d col]\n  (apply hash-map (interleave col (repeat d))))","user":"54f14aa6e4b024c67c0cf8af"},{"problem":156,"code":"(fn [v, k] (apply hash-map (interleave k (take (count k) (repeat v)))))","user":"5ed4482be4b016b56eae05ca"},{"problem":156,"code":"(fn [def-val keys]\n  (zipmap keys (repeat def-val)))","user":"55bccbc6e4b01b9910ae29f5"},{"problem":156,"code":"(fn [v ks] (into (hash-map) \n                 (map (fn [k] [k v]) ks)\n                 ))","user":"58334d18e4b089d5ab817c97"},{"problem":156,"code":"(fn set-default [x col]\n  (reduce #(assoc %1 %2 x) {} col))","user":"56f57481e4b046a417f92072"},{"problem":156,"code":"(fn [my-value my-keys]\n  (apply merge (map (fn [x] {x my-value}) my-keys)))","user":"55fe7e15e4b00f4cabc57651"},{"code":"(fn [x y] (reduce #(conj % {%2 x}) {} y))","problem":156,"user":"5079fd71e4b08327cd804a66"},{"problem":156,"code":"(fn [x, c] (into {} (map #(vector % x) c)))","user":"58f44c07e4b0438e51c2ceb7"},{"code":"(fn map-defaults [a-val, some-keys] \n  (zipmap some-keys (repeat (count some-keys) a-val)))","problem":156,"user":"52812b9fe4b0757a1b171423"},{"code":"#(into {} (for[x %2] {x %}))","problem":156,"user":"52fd3da0e4b047fd5583702a"},{"problem":156,"code":"(fn foo [v k]\n  (if (empty? k) {} (assoc (foo v (rest k)) (first k) v)))","user":"5760715de4b08062f99a4e96"},{"code":"(fn [x y]\n    (apply merge\n           (for [key y] {key x})))","problem":156,"user":"506c0a02e4b0eda3100c090d"},{"code":"(fn [k v] (into {} (map #(vector % k) v)))","problem":156,"user":"4eda8d7c535d10e5ff6f530f"},{"problem":156,"code":"(fn [val keys]\n  (reduce (fn [memo k]\n            (assoc memo k val))\n          {}\n          keys))","user":"532902f8e4b09d4e7a9b550e"},{"code":"#(reduce (fn [xs x] (assoc xs x %)) {} %2)","problem":156,"user":"51780bfce4b0f89a8f53839c"},{"problem":156,"code":"(fn [d coll] (apply assoc {} (interleave coll (repeat (count coll) d))))","user":"5eb741e4e4b00a66d4a9523b"},{"problem":156,"code":"(fn [v ks]\n  (reduce\n   (fn [acc x] (assoc acc x v))\n   {}\n   ks))","user":"5791d259e4b0ebec4cfb75c0"},{"problem":156,"code":"(fn [default mykeys] (zipmap mykeys (into [] (replicate 10 default))))","user":"5643aed5e4b0018b46ad8bfd"},{"code":"(fn [d k] (reduce conj {} (map #(vector % d) k)))","problem":156,"user":"4fa7b013e4b081705acca1c8"},{"problem":156,"code":"#(apply conj (for [k %2] (hash-map k %1)))","user":"56fd058be4b08d47c97781a1"},{"code":"(fn [myDef myMap] (apply assoc {} (interleave (reverse myMap) (repeat myDef))))","problem":156,"user":"4ff30a84e4b0678c553fc344"},{"problem":156,"code":"(fn[val keys]\n  (reduce merge (map #(assoc {} % val) keys))\n  )","user":"55cb11e9e4b0e31453f649ff"},{"code":"#(reduce (fn [v s] (assoc v s %1)) {} %2)","problem":156,"user":"4fcf763de4b03432b189f413"},{"code":"(fn [d ks]\n  (apply assoc {} (interleave ks (vec (repeat (count ks) d)))))","problem":156,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":156,"code":"(fn map-defaults [v keys]\n  (reduce (fn [m k] (conj m {k v})) {} keys))","user":"4dd7d040535d2dad7130b5d6"},{"problem":156,"code":"(fn [value coll]\n  (loop [x 0\n         res {}]\n    (if (= (count coll) x)\n      res\n      (recur (inc x) (assoc res (get coll x) value)))))","user":"5f3ce2c7e4b004f08c61c548"},{"problem":156,"code":"(fn [x y] (into {} (map #(vector  % x) y)))","user":"562d7854e4b0a45d2ff8301d"},{"code":"(fn [initv seq] (zipmap (reverse seq) (take (count seq) (cycle [initv]))))","problem":156,"user":"5003bb77e4b0678c553fc442"},{"problem":156,"code":"(fn [val seq] (reduce #(conj %1 {%2 val}) {} seq))","user":"5d6d2172e4b04d129b00f2b9"},{"problem":156,"code":"(fn [a xs]\n  (apply hash-map (interleave xs (repeat a))))","user":"505223fae4b0a561d07d8f17"},{"code":"#_(zipmap (reverse %2) (reduce (fn [emptycoll _] (conj emptycoll %1)) [] %2))\n\n\n; Pfff ouais mais si t'utilises plein de trucs que je connais pas ... interleave ? repeat ? apply ?\n; (fn [v ks]\n;  (apply hash-map (interleave ks (repeat v))))\n\n#_(apply hash-map (interleave %2 (repeat (count %2) %1)))\n\n; Du nr 1 user\n\n#(into {} (map vector %2 (repeat %1)))","problem":156,"user":"513d09cbe4b0b86ece9f322e"},{"problem":156,"code":"(fn [v ks](reduce #(assoc %1 %2 v) {} ks))","user":"584f5133e4b0b7285a6f4e61"},{"problem":156,"code":"(fn [k l] (apply hash-map (interleave l (repeat k))))","user":"53e8c684e4b036ad0777e48b"},{"code":"(fn [x sq] (reduce (fn [s p] (assoc s p x)) {} sq))","problem":156,"user":"4f8aa2f9e4b02e764a0a516f"},{"problem":156,"code":"(fn magic[value coll]\n  (loop [a coll\n         res {}]\n    (if (empty? a)\n      res\n      (recur (rest a) (conj {(first a) value} res )))\n   \n   )\n  \n  )","user":"57cc14aae4b05aa3c4741d4a"},{"problem":156,"code":"(fn [x y] (apply merge (map #(hash-map %  x) y) ) )","user":"54de7948e4b024c67c0cf7a4"},{"problem":156,"code":"(fn [d k]\n  (zipmap k (repeat d))\n  )","user":"5e08c3dde4b0978307768fc8"},{"problem":156,"code":"(fn [value keys]\n  ((fn [remaining result] \n     (if (= remaining [])\n       result\n       (recur (rest remaining) (assoc result (first remaining) value) )  ) ) keys {} ))","user":"57b55290e4b0fbc9809a27a9"},{"problem":156,"code":"(fn f [default keys]\n  (if (not (empty? keys))\n    (merge {(first keys) default}\n           (f default (rest keys))) #{}))","user":"589f37e0e4b02bd94d917e79"},{"problem":156,"code":"(fn [x, v] (zipmap v (repeat x)))","user":"604f4be1e4b0b7ec0ac60ace"},{"problem":156,"code":"(fn [dv ks] (into {} \n                  (map (fn [x] [x dv]) ks)\n                       ))","user":"5e860bafe4b09a7a73c8bbdd"},{"problem":156,"code":"(fn [value map-keys] (zipmap map-keys (repeat value)))","user":"5ac35d00e4b0e27600da7712"},{"code":"(fn p156 [value coll]\n  (->>  (mapcat list coll (repeat value))\n        (apply assoc {})))","problem":156,"user":"4daec9dcedd6309eace4d15f"},{"code":"(fn [v keys] (apply hash-map (interleave keys (repeat v))) )","problem":156,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":156,"code":"(fn [v ks]\n  (reduce (fn [acc k] \n            (assoc acc k v)) \n          {} \n          ks))","user":"5bacef6fe4b0a20761a234a1"},{"code":"(fn mapeia [n m] (zipmap m (vec (repeat (count m) n))))","problem":156,"user":"4e8b73e4535d65386fec2120"},{"problem":156,"code":"(fn [d s]\n  (loop [m {} se s] \n    (if (empty? se) m (recur (assoc m (first se) d) (rest se)))))","user":"59096794e4b047aa04b1999e"},{"code":"(fn [x y] (apply hash-map (mapcat #(vector % x) y)))","problem":156,"user":"5046b003e4b011c5dfee7727"},{"problem":156,"code":"(fn [v sq]\n  (reduce #(assoc %1 %2 v) {} sq))","user":"542d5fa9e4b0dad94371f2b5"},{"problem":156,"code":"(fn [default k-seq] (zipmap k-seq (repeat (count k-seq) default)))","user":"57b34512e4b0fbc9809a2777"},{"problem":156,"code":"(fn [v coll] (reduce (fn [hm cur] (conj hm [cur v])) {} coll))","user":"5c05cae7e4b0bdcf453d16a3"},{"code":"(fn xxx [val keys]\n  (loop [k keys acc {}]\n    (if (= (last k) nil)\n      acc\n      (recur (rest k) (assoc acc (first k) val)))))","problem":156,"user":"5163a7bbe4b055933a9ca02f"},{"problem":156,"code":"(fn [default-val map-keys]\n  (reduce (fn [new-map map-key]\n            (assoc new-map map-key default-val))\n          {}\n          map-keys))","user":"5d0b210ee4b0cc9c9158822b"},{"code":"(fn [d s](reduce #(assoc %  %2 d) '{} s))","problem":156,"user":"4eb404ba535d7eef3080735a"},{"problem":156,"code":"(fn [default-value sequence]\n  (apply hash-map (apply concat (map #(list % default-value)\n                                     sequence))))","user":"58637f03e4b0f14aab7c881e"},{"code":"#(loop [d %1 l %2 r {}] (if (= l []) r (recur d (rest l) (assoc r (first l) d))) )","problem":156,"user":"52dbfe84e4b09f7907dd13c9"},{"problem":156,"code":"(fn [v c] (reduce (fn [a b] (conj a {b v})) {} c))","user":"56a6051fe4b0542e1f8d14e5"},{"code":"(fn [default x] \n  (reduce (fn [accum val]\n            (conj {val default} accum))\n          {}\n          x))","problem":156,"user":"522600cfe4b0f4c7e20d29c8"},{"code":"(fn [default coll] (into {} (map #(vector % default) coll)))","problem":156,"user":"500e91aae4b00fff93030f99"},{"code":"(fn [x coll] (apply hash-map (concat (interpose x coll) (list x))))","problem":156,"user":"5298cc88e4b02ebb4ef75065"},{"problem":156,"code":"#(apply assoc (hash-map) (interleave %2 (repeat %)))","user":"552a8bbae4b0ffed3738f956"},{"code":"(fn [x lst] (apply merge (map (fn [elm] {elm x}) lst)))","problem":156,"user":"520dd6f4e4b0b022ef140cb8"},{"problem":156,"code":"(fn [dv coll]\n(loop [c coll h {}]\n  (if (empty? c)\n    h\n    (recur (subvec c 1) (assoc h (first c) dv)))))","user":"509b1204e4b0412cdea6eb1d"},{"code":"(fn [v m]\n  (reduce (fn [my-map vecval] (conj my-map {vecval v})) {} m))","problem":156,"user":"4f5576c2e4b0a7574ea71801"},{"code":"(fn [n list] (apply merge (map #(hash-map % n) list)))","problem":156,"user":"534aa5d3e4b084c2834f4a6b"},{"problem":156,"code":"(fn [v k] (reduce #(into %1 {%2 v}) {} k))","user":"5ccb3792e4b0ccb061962882"},{"problem":156,"code":"(fn f [v l]\n  (into {}\n    (for [x l]\n      [x v])))","user":"57d9f603e4b0bd073c20240a"},{"code":"(fn [v k] (reduce #(assoc % %2 v) {} k))","problem":156,"user":"505f55d3e4b08f2a82ad10b0"},{"problem":156,"code":"(fn [value coll]\n  (into {} (for [c coll] {c value})))","user":"53bf9cfbe4b0c98a41f5cca4"},{"code":"(fn [v c] (reduce conj {} (map (fn [k] {k v}) c)))","problem":156,"user":"521b73f5e4b0c4ef0be83043"},{"code":"(fn [x arr] (into {} (map #(hash-map % x) arr)))","problem":156,"user":"4f03f197535dcb61093f6b84"},{"problem":156,"code":"(fn [mydefault myseq] \n  (zipmap myseq (repeat mydefault)))","user":"56bff105e4b060a8e693e3a4"},{"problem":156,"code":"(fn [v c] (reduce #(assoc %1 %2 v) {} c))","user":"57c7e7d9e4b05aa3c4741d0f"},{"code":"(fn mappel [x y] (if (= (count y) 0) {} (assoc (mappel x (rest y)) (first y) x)))","problem":156,"user":"52e253fce4b09f7907dd1432"},{"problem":156,"code":"(fn [default-value array] (zipmap array (repeat (count array) default-value)))","user":"58b54852e4b0ebc645576d52"},{"code":"(fn [d m] (into {} (map #(hash-map % d) m)))","problem":156,"user":"51319a53e4b06942423563c8"},{"problem":156,"code":"(fn [v ks]\n  (reduce (fn [newset newkey]\n              (assoc newset newkey v))\n          {}\n          ks))","user":"5d48884ee4b07c84aa5ae6bb"},{"problem":156,"code":"(fn [d ks]\n (into {} (map #(conj [%] d) ks))\n  )","user":"55edc088e4b0121d4835fde0"},{"problem":156,"code":"(fn map-default\n  [e xs]\n  (reduce (fn [m k] (assoc m k e)) {} xs))","user":"557e9d17e4b05c286339e0d8"},{"code":"(fn [n xs]\n  (reduce (fn [m k] (conj m [k n])) {} xs))","problem":156,"user":"4e8239d6535db62dc21a62c4"},{"code":"#(apply\n  hash-map\n  (interleave %2 (repeat %1)))","problem":156,"user":"4f253a49e4b0d66497709ff3"},{"problem":156,"code":"(fn [m v]\n  (let [r (map #(hash-map % m) v)]\n    (into (first r) (rest r))))","user":"55022275e4b07d26eda61d81"},{"code":"(fn [val keys]\n  (loop [keys keys res {}]\n    (if (nil? keys) \n      res \n      (recur \n       (next keys) \n       (conj res [(first keys) val])))))","problem":156,"user":"52990271e4b02ebb4ef7506d"},{"code":"(fn [x y] (apply array-map (interleave y (replicate (count y) x))))","problem":156,"user":"52faec2ee4b047fd55837004"},{"problem":156,"code":"#(apply hash-map (concat (interpose %1 %2) (list %1)))","user":"5a99b863e4b0d174b936c7ae"},{"code":"(fn [v ks]\n  (into {}\n        (map (fn [k] [k v]) \n             ks)))","problem":156,"user":"50e8422de4b0ebbe794eb7de"},{"problem":156,"code":"(fn [value keyset] (loop [ks keyset output {}] \n                     (if (empty? ks)\n                       output\n                       (recur (rest ks) (assoc output (first ks) value)))))","user":"56f5e6d5e4b046a417f92079"},{"code":"(fn map-defaults [default, keys]\n  (let [args (apply concat (for [k keys] [k default]))]\n    (apply hash-map args)))","problem":156,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":156,"code":"(fn [dft ls] (reduce #(assoc % %2 dft) {} ls))","user":"56cefadee4b0ea9b8538f763"},{"problem":156,"code":"(fn [default keys]\n                 (into {} (map vector keys (repeat default))))","user":"54cad2d5e4b057c6fda3a26c"},{"code":"(fn [k_ v_]\n  (apply hash-map\n   ((fn kv [k v]\n      (if (= v '())\n        '()\n        (concat [(first v) k] (kv k (rest v)))\n        )\n     ) k_ v_)\n   )\n  )","problem":156,"user":"52586d24e4b0cb4875a45cb0"},{"code":"(fn hoge\n  ([dv lst] (hoge {} dv lst))\n  ([m dv lst]\n   (if (empty? lst)\n     m\n     (hoge (conj m [(first lst) dv]) dv (next lst)))))","problem":156,"user":"5272669de4b03e8d9a4a742e"},{"problem":156,"code":"(fn [default sequence]\n  (into {} (map #(vec [% default]) sequence)))","user":"5a3a15e6e4b001c08efc0cc1"},{"code":"(fn [default coll] (apply assoc {} (interleave coll (take (count coll) (cycle (list default))))))","problem":156,"user":"50f0ec9ce4b0d527ce5b30df"},{"problem":156,"code":"#(reduce (fn [acc n]\n             (assoc acc n %1))\n           {}\n           %2)","user":"4e38f245535deb9a81d77f3e"},{"problem":156,"code":"(fn [value sequence]\n  (into {} (map #(hash-map % value) sequence)))","user":"579fa28fe4b0264b925669fb"},{"code":"(fn [default seq](reduce \n  #(assoc %1 %2 default) {} seq))","problem":156,"user":"4fc0221ce4b081705acca322"},{"problem":156,"code":"(fn default-map [v ks] (reduce #(assoc %1 %2 v) {} ks))","user":"53dc94c8e4b094d41abdfefc"},{"problem":156,"code":"(fn [v k]\n  (reduce (fn [a b] (assoc a b v)) {} k))","user":"544e9022e4b0e3978000698b"},{"problem":156,"code":"(fn [default myvector]\n   (into {}\n         (map (fn [x] conj {} [x default]) myvector\n              )\n         )\n   )","user":"53f3b216e4b0742d9025b0f8"},{"problem":156,"code":"(fn [default coll]\n  (apply hash-map (reverse (conj (interpose default coll) default))))","user":"56620138e4b068f2fe63dc71"},{"problem":156,"code":"(fn map-d [default coll]\n  (zipmap coll (repeat default)))","user":"5aa4f7dae4b0d174b936c88c"},{"problem":156,"code":"(fn [x l]\n  (apply hash-map (mapcat #(vector % x) l)))","user":"56451201e4b0284900eef600"},{"code":"(fn [d ks]\n  (reduce #(merge {%2 d} %1) {} ks))","problem":156,"user":"51460e4ce4b04ef915e37314"},{"problem":156,"code":"(fn [value coll]\n   (reduce merge \n\t   (map \n\t     (fn [elem] {elem value}) coll)))","user":"552281cae4b0882d96d0919f"},{"problem":156,"code":"(fn [v m] \n   (apply hash-map (interleave m (repeat (count m) v))))","user":"57a774e4e4b0a96607956213"},{"problem":156,"code":"#(loop [values %2  m {}] \n                                (println m)\n                            (if-not (empty? values)\n                              (let [[value & remaining] values]\n                                (recur remaining (into m {value %1} ) ) )\n                              m\n                            )\n                          )","user":"59c3b603e4b0a024fb6ae4e3"},{"code":"(fn [defVal sequ]  (into {} (map (fn [x] {x defVal}) sequ)))","problem":156,"user":"526bd542e4b03e8d9a4a7274"},{"problem":156,"code":"(fn [value ks]\n  (into {} (map #(assoc {} % value) ks)))","user":"53b9bb15e4b047364c0444ed"},{"problem":156,"code":"(fn [d ks]\n  (loop [k (first ks) ks (rest ks) ret {}]\n    (if k\n      (recur (first ks) (rest ks) (assoc ret k d))\n      ret)))","user":"54bec835e4b0ed20f4ff6ef7"},{"problem":156,"code":"#(into (sorted-map) (map vector %2 (vec (repeat (count %2) %1))))","user":"566caad9e4b0a866af6896c0"},{"problem":156,"code":"(fn [default-value keys]\n    (reduce\n      #(assoc %1 %2 default-value)\n      {}\n      keys))","user":"5f331015e4b0574c87022c37"},{"problem":156,"code":"(fn [a b] (apply hash-map (interleave b (repeat a))))","user":"55280930e4b0ffed3738f93b"},{"problem":156,"code":"#(loop [key (first %2) keys (rest %2) result {}]                                                                                                                                                                                                         \n                (if (nil? key)                                                                                                                                                                                                                                       \n                    result                                                                                                                                                                                                                                           \n                    (recur (first keys) (rest keys) (merge result {key %1}))                                                                                                                                                                                         \n                )                                                                                                                                                                                                                                                    \n            )","user":"56667178e4b0e91d5f5c5671"},{"problem":156,"code":"(fn create-map [default map-keys]\n  (reduce (fn [accumulator current-key]\n            (assoc accumulator current-key default)) {} map-keys))","user":"5464dd11e4b01be26fd746d2"},{"code":"(fn [default-value keys-vector]\n  (zipmap keys-vector (repeat (count keys-vector) default-value)))","problem":156,"user":"5152bc4ee4b001f44f99bfef"},{"problem":156,"code":"(fn [default m] (into {} (map #(hash-map % default) m)))","user":"54a2760ae4b09f271ff37c5b"},{"code":"#(zipmap (reverse %2) (repeat %1))","problem":156,"user":"4eae2f9e535d7eef30807324"},{"code":"(fn [d keys] (zipmap keys (repeat d)))","problem":156,"user":"4e68c465535d8ccf87e9fe8a"},{"problem":156,"code":"(fn [v l] (reduce #(assoc %1 %2 v) {} l))","user":"58731176e4b01531a375ea2a"},{"problem":156,"code":"(fn [d s] (into {} (map #(do [% d]) s)))","user":"571346c0e4b07c98581c3a9b"},{"problem":156,"code":"(fn [defval keycoll]\n  (zipmap keycoll (repeat defval)))","user":"55fc838be4b0f488688e0674"},{"code":"(fn [d s] \n  (reduce #(assoc %1 %2 d) {} s))","problem":156,"user":"52c52ef2e4b0c2d177d620ef"},{"problem":156,"code":"(fn [val sequence] \n  \t(into {} \n\t\t(map (fn [item] (hash-map item val)) sequence)))","user":"5e51a268e4b027a2e10ac0d1"},{"problem":156,"code":"(fn [default vec] (into {} (for [x vec] {x default})))","user":"559fb147e4b0acc240e314ea"},{"problem":156,"code":"#(apply hash-map \n        (reduce (fn [x y] (conj x y %)) [] %2))","user":"5d9d10d5e4b0eb781811cdb4"},{"problem":156,"code":"(fn [default s]\n  \n  (zipmap s (repeat default)))","user":"550c55d0e4b06e50f9beb14d"},{"problem":156,"code":"(fn [d l] (reduce conj (map #(hash-map %1 d) l)))","user":"53f4c3d6e4b0db01ade6f9c5"},{"problem":156,"code":"(fn [value keys]\n  (into {} (for [k keys]\n             [k value])))","user":"58217fbde4b04b46fc4b0f78"},{"code":"(fn [d l] (apply merge (for [x l] (array-map x d))))","problem":156,"user":"52ba43d0e4b07a9af57922cd"},{"problem":156,"code":"(fn default-dict [value keyseq]\n  ;; Combines keys pairwise with the default value, then reduces the pairs into a hashmap.\n  (reduce #(apply assoc %1 %2) {} (map #(vector % value) keyseq)))","user":"569f99cce4b0542e1f8d1497"},{"problem":156,"code":"(fn map-with-default-vals [default-val ks]\n  (reduce (fn [acc k]\n            (assoc acc k default-val))\n          {}\n          ks))","user":"53fd66a4e4b0de5c418485e3"},{"problem":156,"code":"(fn [default keys] \n  (reduce #(into %1 {%2 default}) {} keys)\n  )","user":"576d8699e4b0979f89651568"},{"problem":156,"code":"(fn  [default xs]\n  (zipmap xs (repeat default))\n  )","user":"5991eec7e4b0866487ed0d6e"},{"code":"(fn [default v]\n  (into {} (for [s v] [s default])))","problem":156,"user":"527ce61de4b0757a1b171374"},{"problem":156,"code":"(fn [key seq]\n   (reduce (fn [x y] (println x y) (if (map? x)\n                                     (into x {y key})\n                                     (into {} {x key, y key}))) seq))","user":"5508102ee4b021ccfedb96b0"},{"problem":156,"code":"(fn [d s] (zipmap s (for [x (range 3)] d)))","user":"55a1ba5ee4b0acc240e31517"},{"code":"(fn [d ks]\n  (apply\n    hash-map\n    (interleave ks (repeat (count ks) d))))","problem":156,"user":"501284d9e4b030d97e4db710"},{"problem":156,"code":"(fn map-def\n  [def-val key-seq]\n  (zipmap key-seq  (repeat def-val))\n  )","user":"5ac37d0fe4b0e27600da7718"},{"problem":156,"code":"(fn [default values] (apply hash-map (interleave values (repeat default))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":156,"code":"(fn [default-val target-seq]\n\t(into {} (map #(assoc {} % default-val) target-seq)))","user":"57d174ede4b0bd073c20236c"},{"problem":156,"code":"(fn [const_val key_coll]\n  (reduce \n    #(assoc %1 %2 const_val) \n    {} \n    key_coll))","user":"56d9883ae4b0ea9b8538f7f4"},{"problem":156,"code":"(fn [defval ks]\n  (zipmap ks (repeat defval)))","user":"5839efeae4b089d5ab817d47"},{"code":"(fn [v keys]\n  (apply hash-map (mapcat #(conj [%1] %2) keys (repeat (count keys) v)))\n  )","problem":156,"user":"503ca47fe4b06c4e0e1fa24f"},{"code":"(fn [k c]\n        (zipmap c\n             (take (count c) (cycle [k]))))","problem":156,"user":"52d0fadce4b07d0d72b273c0"},{"problem":156,"code":"(fn addkv [v keys]\n  (reduce (fn [t el] (assoc t el v)) {} keys ))","user":"54dce6dbe4b024c67c0cf78d"},{"problem":156,"code":"#(reduce conj {} (map vector %2 (repeat %)))","user":"4fad9da0e4b081705acca23c"},{"problem":156,"code":"(fn [default toProcess] \n    (loop [final {} value default listProcess toProcess]\n      (if (= (count listProcess) 0) final\n        (recur (assoc final (first listProcess) value) value (rest listProcess)))))","user":"59759a9ce4b01722bebd4cca"},{"problem":156,"code":"(fn \n  [val keys]\n  (apply hash-map \n         (loop [acc '()\n                _keys keys]\n           (if (empty? _keys)\n           acc\n           (recur (conj (conj acc val) (first _keys)) (rest _keys)) ))))","user":"5854580ce4b07779d46863f9"},{"problem":156,"code":"(fn [default coll] (reduce #(conj %1 [%2 default]) {} coll))","user":"543c39e0e4b032a45b86933d"},{"problem":156,"code":"(fn [v ks]\n  (zipmap ks (map (fn [x] v) ks)))","user":"557e2eafe4b05c286339e0d2"},{"problem":156,"code":"(fn [v mapa]\n  (zipmap mapa (repeat v)))","user":"60264d89e4b0d5df2af2222d"},{"problem":156,"code":"#(apply (partial assoc {}) (interleave %2  (repeat %1)))","user":"546587afe4b01be26fd746de"},{"problem":156,"code":"(fn [val coll]\n    (into {} (map #(vector % val) coll)))","user":"563772a9e4b0bfe05bf117d7"},{"code":"(fn [df mp] (reduce #(assoc %1 %2 df) {}  mp ) )","problem":156,"user":"5124619ae4b02c3f2a072ccd"},{"problem":156,"code":"(fn [v s] (reduce #(conj %1 [%2 v]) {} s))","user":"5d6cead9e4b04d129b00f2b5"},{"problem":156,"code":"(fn  defaults-fn\n  [v ks]\n  (apply hash-map (interleave ks (repeat v))))","user":"59971dcbe4b07157cc8daacb"},{"problem":156,"code":"(fn [default keys_] (reduce conj (map #(hash-map % default) keys_)))","user":"5b6b3809e4b0c6492753e7a5"},{"code":"(fn foo [a lst]\n  (if (= '() lst)\n    {}\n    (assoc (foo a (rest lst)) (first lst) a)\n  ))","problem":156,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":156,"code":"(fn [n l] (zipmap l(repeat n)))","user":"566d8c43e4b0a866af6896cc"},{"problem":156,"code":"(fn [v ks] (->> (map #(vector % v) ks) (apply concat) (apply hash-map)))","user":"56264d64e4b00e49c7cb47be"},{"problem":156,"code":"(fn [default skeys]\n  (apply assoc {} (interleave skeys (repeat default))))","user":"56f73913e4b08e7d20b9682d"},{"problem":156,"code":"(fn [value col] (reduce #(assoc %1 %2 value) {} col))","user":"5d0b4966e4b0cc9c9158822f"},{"code":"(fn default-map [default keys]\n  (loop [m {} k keys]\n    (if (empty? k)\n      m\n      (recur (assoc m (first k) default) (rest k)))))","problem":156,"user":"50d882d4e4b01f0871336e69"},{"problem":156,"code":"(fn [default sequen]\n  (reduce\n   #(conj %1 {%2 default})\n   {}\n   sequen))","user":"56732c84e4b05957ce8c611c"},{"code":"(fn [default-value k]\n  (apply assoc {}\n         (interleave k (repeat default-value))))","problem":156,"user":"515bed3be4b0388ca8ca1525"},{"code":"(fn f [x y] \n  (zipmap y (repeat (count y) x))\n)","problem":156,"user":"5029131ae4b0b6c928ad61ff"},{"problem":156,"code":"(fn [d coll]\n (into {}\n   (for [k coll] [k d])))","user":"586d146de4b01531a375e98a"},{"problem":156,"code":"(fn[dv,ks] (reduce (fn[x,y] (assoc x y dv))   {} ks) )","user":"57e3d30be4b0bfb2137f5aab"},{"problem":156,"code":"(fn [v ks] (reduce conj (map hash-map ks (repeat v))))","user":"51b8d3d5e4b050a1176cd69d"},{"problem":156,"code":"#(into {}(for [x %2] [x %1]))","user":"580cc8bde4b0849f6811b725"},{"code":"(fn [d s] (apply hash-map (interleave s (repeat d))))","problem":156,"user":"53512bc6e4b084c2834f4ae1"},{"problem":156,"code":"(fn [def-value keys]  \n  (apply hash-map (mapcat #(list % def-value) keys))\n   )","user":"55f06183e4b06e875b46ce23"},{"code":"(fn [x l]\r\n  (reduce (fn [a b] (conj a [b x])) {} l))","problem":156,"user":"507437c2e4b054001656acd0"},{"code":"#(zipmap %2 (vec (repeat (.size %2) %1)))","problem":156,"user":"52c54c84e4b0c2d177d620f0"},{"code":"(fn [v ks]\n  (reduce (fn [m k]\n            (assoc m k v))\n          {} ks))","problem":156,"user":"4e5867d1535d8a8b8723a291"},{"code":"(fn [x y] \n  (apply hash-map (mapcat #(vector % x) y)))","problem":156,"user":"4faf2f4ce4b081705acca251"},{"code":"(fn [defval coll]\n  (zipmap coll (repeat defval)))","problem":156,"user":"50bfb5fbe4b05ae8c1cbbd9a"},{"problem":156,"code":"(fn [x y] \n  (zipmap y (repeat x)\n  )\n)","user":"5a6afb1de4b0512ff01cda2f"},{"problem":156,"code":"(fn [_v _ks] (zipmap _ks (repeat (count _ks) _v)))","user":"570dd7ece4b0b0fb43fd06e1"},{"problem":156,"code":"(fn [default key-list]\n  (reduce (fn [m k] (assoc m k default)) {} key-list))","user":"5739cbe4e4b0cd1946bd107c"},{"problem":156,"code":"#(loop [ v %1, m %2, result {}] (if (empty? m) result (recur v (rest m) (conj result [(first m) v,]))))","user":"541619e8e4b01498b1a719f9"},{"problem":156,"code":"(fn [dflt key-list]\n  (loop [key-list key-list\n         results {}]\n    (if (empty? key-list)\n      results\n      (recur (rest key-list) (assoc results (first key-list) dflt)))))","user":"55f344afe4b06e875b46ce5a"},{"problem":156,"code":"(fn [fallback key-seq]\n\t(loop [elts key-seq \n           result {}]\n  \t\t(if (not (empty? elts))\n  \t\t\t(recur (rest elts) (assoc result (first elts) fallback))\n  \t\t\tresult\n        )\n    )\n)","user":"57dd5e90e4b0bd073c202440"},{"problem":156,"code":"(fn [x v] (into {} (for [y v] [y x])))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":156,"code":"(fn default-map [default-value keys]\n  (reduce #(assoc %1 %2 default-value) {} keys ))","user":"5645a7d6e4b0284900eef608"},{"code":"(fn [default v]\n  (into {} (map (fn [x] [x default]) v)))","problem":156,"user":"53480973e4b084c2834f4a52"},{"problem":156,"code":"(fn [x, array] \n  (reduce #(assoc %1 %2 x) {} array))","user":"5e2ef900e4b05b4b015161fc"},{"problem":156,"code":"(fn [e l] (into {} (map #(vector % e) l)))","user":"54227fc6e4b01498b1a71ac0"},{"problem":156,"code":"(fn [x y]\n  (loop [X x\n         Y y\n         d {}]\n  \t(if (empty? Y)\n       d\n       (recur X (rest Y) (conj d [(first Y) X])))))","user":"57716e11e4b0979f896515b2"},{"code":"(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))","problem":156,"user":"5261aebbe4b03e8d9a4a7066"},{"problem":156,"code":"(fn [val keys]\n  (reduce #(assoc-in %1 (vector %2) val)\n          {}\n          keys))","user":"55842bd7e4b05c286339e11c"},{"problem":156,"code":"(fn[x y] (zipmap y (repeat x)))","user":"5314923ae4b08068f379ed18"},{"problem":156,"code":"(fn [n m] (zipmap m (repeat n)))","user":"5d6fae1ee4b04d129b00f2d4"},{"problem":156,"code":"(fn constant-map [v ks] (apply hash-map (interleave ks (repeat v))))","user":"5b073c34e4b0cc2b61a3bda4"},{"problem":156,"code":"(fn map-with-defaults [init coll]\n  (zipmap coll (repeat (count coll) init)))","user":"5666500ee4b0e91d5f5c566d"},{"problem":156,"code":"(fn [k m] (into (hash-map) (map #(hash-map % k) m)))","user":"5a24735fe4b07f18be40aa11"},{"code":"(fn [default keys]\n  (zipmap keys (repeat default)))","problem":156,"user":"4ea1bc93535d7eef308072b9"},{"code":"(fn [x y] (reduce conj (map #(hash-map % x) y)))","problem":156,"user":"53150a4de4b08068f379ed22"},{"problem":156,"code":"(fn [v s]\n  (loop [x s y {}]\n    (if (empty? x)\n      y\n      (recur (rest x) (conj y {(first x) v}))\n      )\n    )\n  )","user":"551b8e2ae4b07993ea3788d3"},{"problem":156,"code":"(fn [deft s] (apply hash-map (interleave s (repeat deft))))","user":"59a0286be4b0871e7608b82f"},{"problem":156,"code":"(fn [default-elem coll]\n  (reduce (fn [temp-map elem] (assoc temp-map elem default-elem))\n          (hash-map)\n          coll))","user":"5ef28e95e4b07c55ae4a0535"},{"problem":156,"code":"(fn [v kseq]\n  (reduce #(assoc %1 %2 v) {} kseq))","user":"57ee82b1e4b0bfb2137f5bbd"},{"code":"(fn [default coll]\n  (reduce #(assoc %1 %2 default) {} coll))","problem":156,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":156,"code":"(fn [x keys] (reduce merge (map #(hash-map % x) keys)))","user":"546dcbffe4b00cfc9eacc193"},{"problem":156,"code":"(fn [inputVal inputKeyVec]\n   (loop [ keyVec inputKeyVec\n           resultMap {}]\n     (if (nil? keyVec)\n       (do\n         resultMap\n       )\n       (do\n         (recur (next keyVec) (assoc resultMap (first keyVec) inputVal))\n       )\n     )\n   )\n)","user":"5cf7215ce4b0b71b1d808a67"},{"code":"(fn [k m] (zipmap m (repeat k)))","problem":156,"user":"5036eba7e4b0af0658af77a5"},{"problem":156,"code":"(fn [q v] \n    (reduce \n      (fn [p e] \n        (conj p {e q})) {} v))","user":"58a9e872e4b01a0c0b232973"},{"problem":156,"code":"( fn [val keys] (zipmap keys (repeat val)) )","user":"5dd53859e4b0948ae9d9ad76"},{"code":"(fn [a b] (reduce (fn [z x] (merge z {x a})) {} b))","problem":156,"user":"516ee2a4e4b06aac486e5b33"},{"problem":156,"code":"(fn\n  [default ks]\n  (loop\n   [[this-key & keys-left] ks result {}]\n    (let [new-result (conj result (hash-map this-key default))]\n      (if (empty? keys-left)\n        new-result\n        (recur keys-left new-result)))))","user":"5e7f62cce4b085ba37836e3b"},{"problem":156,"code":"(fn [value keyset]\n  (apply hash-map\n  \t(interleave keyset\n  \t(repeat value))))","user":"5a58bfd0e4b05d388ecb6c84"},{"problem":156,"code":"(fn [v xs]\n         (reduce #(assoc %1 %2 v) {} xs))","user":"58c4492be4b021aa9917ed27"},{"problem":156,"code":"(fn [a s]\n  (apply merge\n         (map hash-map s (repeat a))))","user":"52d9e126e4b09f7907dd13b1"},{"problem":156,"code":"(fn [val keys] (zipmap keys (cycle [val])))","user":"55d5e80ee4b0e31453f64a91"},{"problem":156,"code":"(fn [default k]\n  (into {} (map #(vector % default) k))\n)","user":"4ed82830535d10e5ff6f52f7"},{"code":"(fn md\n  [xd xs]\n  (reduce #(assoc %1 %2 xd) {} xs))","problem":156,"user":"536aa86de4b0243289761eb1"},{"problem":156,"code":"(fn [dflt s]\n  ((fn makedflthash [default lst hashmap]\n     (if\n       (empty? lst)\n       hashmap\n       (recur default (rest lst) (conj hashmap {(first lst) default}))\n       )\n     )\n   dflt\n   (rest s)\n   {(first s) dflt}\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"code":"(fn f [df ks]\n  (reduce #(assoc %1 %2 df) {} ks))","problem":156,"user":"4e6a6b83535d8ccf87e9fee0"},{"code":"#(reduce (fn [m k] (conj m {k %1})) {} %2)","problem":156,"user":"51f66e0ee4b06ff1c25c52c3"},{"code":"#(apply hash-map (conj (vec (interpose % %2)) %))","problem":156,"user":"522eb5cce4b01cdb292c5f0c"},{"problem":156,"code":"(fn [x xs]\n  (->> (repeat x)\n       (interleave xs)\n       (into [])\n       (apply hash-map)\n        ))","user":"5dd52ca6e4b0948ae9d9ad75"},{"code":"(fn [x y] (apply hash-map (mapcat vector y (repeat x))))","problem":156,"user":"50f3ce2ee4b041536e2eca3d"},{"code":"(fn [default ks] (let [n (count ks)] (zipmap ks (repeat n default))))","problem":156,"user":"4f3d83b5e4b0e243712b1f69"},{"code":"(fn [default coll] (zipmap coll (repeat default)))","problem":156,"user":"4fe3338ee4b0e8f79898fea8"},{"problem":156,"code":"(fn [default col] (zipmap col (repeat (count col) default)))","user":"574a6681e4b02ea1147991f8"},{"code":"(fn [n s]\n\t(apply conj (map (fn [x] {x n}) s)\n    )\n)","problem":156,"user":"525ba7bbe4b0cb4875a45d28"},{"problem":156,"code":"(fn [x k] (reduce (fn [m k] (assoc m k x)) {} k))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn [default ks]\n  (zipmap ks (repeat (count ks) default)))","problem":156,"user":"5338e33fe4b0e30313ee6ca1"},{"problem":156,"code":"(fn [a s] (into {} (map #(vector % a) s)))","user":"5457e5f1e4b01be26fd74613"},{"code":"(fn [i m] (reduce #(conj % (hash-map %2 i)) {} m))","problem":156,"user":"533b36c0e4b0e30313ee6ccb"},{"problem":156,"code":"(fn [x y]\n  (into {} (map #(into {} {% x}) y)))","user":"5ed5148ee4b016b56eae05d1"},{"problem":156,"code":"(fn [dv ks] (reduce (fn [acc k] (assoc acc k dv)) {} ks))","user":"5e032281e4b0a607a9a45d54"},{"problem":156,"code":"(fn [default-value ks] (into {} (map #(-> [% default-value]) ks)))","user":"57afd36de4b0fbc9809a273c"},{"problem":156,"code":"(fn [default coll]\n  (reduce #(assoc  %1 %2 default) {} coll)\n )","user":"56004deee4b04bb52996e164"},{"problem":156,"code":"(fn my-map-default\n  [v k]\n  (reduce (fn [hash key] (assoc hash key v)) {} k))","user":"5599abc9e4b031d6649c9bb0"},{"problem":156,"code":"#(apply assoc {}\n        (interleave %2 (repeat %)))","user":"55b3c03ee4b01b9910ae2975"},{"problem":156,"code":"(fn [val ks]\n  (zipmap ks (repeat val)))","user":"572ad0fde4b0f4d77e651244"},{"problem":156,"code":"(fn[d ks] (reduce (fn[m k](conj m [k d])) {} ks))","user":"56347285e4b0bfe05bf117bc"},{"problem":156,"code":"(fn [default ks]\n  (loop [ks-left ks\n         result {}]\n    (if (empty? ks-left)\n      result\n      (recur (rest ks-left) (assoc result (first ks-left) default)))))","user":"55d4dddde4b0e31453f64a7f"},{"problem":156,"code":"(fn m [d l] (if (= 0 (count l)) {} (merge (m d (rest l)) {(first l) d})))","user":"553c05b7e4b09218d5f45011"},{"problem":156,"code":"; stolen solution: (fn [d v] (reduce #(assoc %1 %2 d) {} v))\n#(zipmap %2 (repeat %1))","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":156,"code":"(fn [default vect]\n  (reduce (fn [acc cur]\n            (assoc acc cur default))\n          {}\n          vect))","user":"5e62444fe4b0fd0acd158694"},{"problem":156,"code":"(fn\n  [def-val\n   seq-of-keys]\n  (reduce #(conj %1 {%2 def-val})\n          {}\n          seq-of-keys))","user":"5a9829e5e4b0d174b936c788"},{"code":"#(into {} (for [k %2] [k %1] ))","problem":156,"user":"5369652de4b0243289761e9c"},{"problem":156,"code":"(fn [default keys]\n  (reduce (fn [xs x] (conj xs {x default})) {} keys))","user":"5a948d79e4b0d174b936c73a"},{"code":"(fn tomap [default l]\n  (cond\n   (empty? l) {}\n   :else (assoc (tomap default (rest l)) (first l) default)\n   )\n  )","problem":156,"user":"5252cbe7e4b0541d1855b8d2"},{"problem":156,"code":"(fn [value keys]\n  (reduce (fn [x y] (assoc x y value))\n          {}\n          keys))","user":"58cf8f97e4b03c36ff7e58b7"},{"code":"(fn [v m]\r\n   (apply merge (map #(hash-map %1 v) m))\r\n )","problem":156,"user":"510a6bece4b06956752d35af"},{"code":"(fn [v m]\n  (zipmap m (repeat v)))","problem":156,"user":"52e087dde4b09f7907dd1412"},{"code":"(fn [v l]\n  (zipmap l (cycle [v])))","problem":156,"user":"501fcd59e4b0cb6ebc0a42ec"},{"problem":156,"code":"(fn [defval init-keys]\n  (letfn [(reform-coll \n           [result remkeys fillval]\n           (if (empty? remkeys) result\n             (reform-coll (assoc result (first remkeys) fillval) (rest remkeys) fillval)))]\n    (reform-coll {} init-keys defval)))","user":"531571ece4b08068f379ed27"},{"code":"(fn [default l] (reduce (fn [x y] (assoc x y default)) {} l))","problem":156,"user":"52d6590ee4b09f7907dd1352"},{"code":"(fn [val keys]\n  (zipmap keys (repeat (count keys) val)))","problem":156,"user":"4ea1b9e4535d7eef308072b8"},{"problem":156,"code":"(fn [n m](apply hash-map (mapcat identity (vec(map #(reverse (cons n (list %) )) m)))))","user":"598d0dc3e4b02b9968b84d18"},{"code":"(fn [v ks] (into {}\n                 ((fn [val] (map #(vector % val) ks))\n                       v)))","problem":156,"user":"5298c83de4b02ebb4ef75064"},{"problem":156,"code":"(fn [v k]\n  (let [l (repeat (count k) v)]\n    (zipmap k l)))","user":"5151d574e4b03e678e393ae0"},{"problem":156,"code":"(fn mapped-by-default\n  [default keys]\n  (reduce (fn [acc key]\n            (assoc acc key default)) {} keys))","user":"5df0f338e4b093ff717275c6"},{"problem":156,"code":"(fn[default-value my-keys](zipmap my-keys (repeat default-value)))","user":"547b9cdce4b0c51c1f4d72da"},{"code":"(fn [x key-seq]\n  (reduce #(assoc %1 %2 x) {} key-seq))","problem":156,"user":"52cca96ae4b07d0d72b2736e"},{"problem":156,"code":"#(loop [ks %2 mapping {}]\n    (if (empty? ks)\n      mapping\n      (recur (rest ks) (assoc mapping (first ks) %1))\n   )\n )","user":"5e947a69e4b0fbed045a37f8"},{"code":"(fn [v ks] (reduce (fn [rv k] (assoc rv k v)) {} ks))","problem":156,"user":"525ff1e3e4b03e8d9a4a7028"},{"problem":156,"code":"(fn mapDefault\n  [number list]\n  (apply hash-map (interleave list (repeat (count list) number))))","user":"56fe2a2fe4b08d47c97781ad"},{"code":"(fn [a b] \n  (reduce #(conj %1 {%2 a}) {} b))","problem":156,"user":"5030f16fe4b05b7df5a0b84b"},{"code":"(fn [d ks]\n  (let [len (count ks)\n        ds (take len (repeat d))]\n    (apply hash-map (interleave ks ds))))","problem":156,"user":"52692e3be4b03e8d9a4a71d6"},{"code":"(fn [v s]\n  (zipmap s (repeat v)))","problem":156,"user":"4ed292ac535d44c135fd68d9"},{"problem":156,"code":"(fn mapfiller [v ks]\n  (into {} (for [k ks] [k v])))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":156,"code":"(fn fillVals\n  [dfVal ks]\n  (zipmap ks (repeat dfVal)))","user":"5d123c75e4b02c15ef021997"},{"code":"(fn [def-val map-keys] \n  (reduce #(assoc %1 %2 def-val) {} map-keys))","problem":156,"user":"515d6281e4b00901442db1dc"},{"problem":156,"code":"#(loop [keys %2 result {}]\n\t(if-not (empty? keys)\n\t\t(recur (rest keys) (conj result [(first keys) %1]) ) \n\t\tresult))","user":"55a2b008e4b0acc240e31526"},{"problem":156,"code":"(fn [x y] (into (sorted-map) (map #(assoc {} % x) y)))","user":"55acb648e4b03311e7b73296"},{"problem":156,"code":"(fn [v ks]\n  (reduce conj\n          {}\n          (for [k ks] {k v})))","user":"54d753ebe4b0a52adc2e2029"},{"problem":156,"code":"(fn \n           [default myMap]\n  (into {} (for [k myMap]\n    [k default])))","user":"513f86dde4b00f13ea1bd88d"},{"problem":156,"code":"#(apply hash-map (interleave %2 (take (count %2) (repeat %1))))","user":"579d9601e4b05b1deef9ae18"},{"problem":156,"code":"(fn [val keys]\n  (into {} (for [x keys] [x val])))","user":"53069e16e4b02e8216869798"},{"problem":156,"code":"(fn map-default\n  ([value keys]\n   (map-default value keys {}))\n  ([value keys new-map]\n   (if (empty? keys)\n     new-map\n     (map-default value (rest keys) (conj new-map {(first keys) value})))))","user":"5d896a64e4b0915913b1d3b8"},{"problem":156,"code":"(fn [default-val key-vector]\n  (reduce #(assoc %1 %2 default-val) {} key-vector))","user":"58fc52cee4b0438e51c2cf95"},{"problem":156,"code":"(fn [value coll] \n  (into {} (map (fn [elem] [elem value]) coll)))","user":"5446158ce4b032a45b8693a6"},{"problem":156,"code":"(fn [xval xlist]\n  (reduce (fn [x y]\n            (assoc x y xval))\n          {} xlist))","user":"56038f34e4b04bb52996e1bc"},{"problem":156,"code":"(fn [default keys] (into {} (map #(assoc {} % default) keys)))","user":"5afc85f1e4b0cc2b61a3bd0e"},{"problem":156,"code":"(fn [x ks]\n   (into {} (map (fn [e] [e x]) ks)))","user":"60c43b20e4b0e0fa5f1b42c9"},{"problem":156,"code":"(fn [default keys] (reduce #(conj %1 {%2 default}){} keys))","user":"56483f45e4b0284900eef62b"},{"problem":156,"code":"(fn [val keys]\n  (into {}\n        (map vector keys (repeat val))))","user":"545944a2e4b01be26fd74627"},{"problem":156,"code":"(fn [d seq] (reduce #(conj % [%2 d]) {} seq))","user":"5406eaf3e4b0addc1aec66ad"},{"problem":156,"code":"(fn [def-val vec] (reduce #(conj %1 {%2 def-val}) {} vec))","user":"540470dae4b0addc1aec6658"},{"code":"#(into {} (map (fn [k] {k %1}) %2))","problem":156,"user":"52d49445e4b09f7907dd1332"},{"code":"(fn [v ks] (into {} (map #(hash-map % v) ks)))","problem":156,"user":"50e54fe4e4b049a9877538a0"},{"problem":156,"code":"(fn [default-value keys]\n  (let [my-map {}]\n    (into my-map (map #(vector % default-value) keys))\n    )\n  )","user":"5c321b8ae4b0d62ef62d9f32"},{"problem":156,"code":"(fn map-defaults [default keys]\n   (zipmap keys (repeat default)))","user":"5b8d01d7e4b0c0b3ffbd49ca"},{"problem":156,"code":"(fn [value ks]\n  (zipmap ks (repeat (count ks) value)))","user":"55b24240e4b0da326a65cf7b"},{"problem":156,"code":"(fn [x y]\n  (reduce #(merge %1 {%2 x}) {} y))","user":"52cf1e25e4b07d0d72b2739c"},{"code":"(fn lol [x y]\n  (loop [work y\n         result {}\n         z (first work)\n         ]\n    \n    (if (not= z nil)\n      (recur (drop 1 work)\n             (assoc result z x)\n             (first work)\n             )\n      result\n      )\n    )\n  )","problem":156,"user":"50fb084ee4b0d10d794c19dd"},{"code":"(fn [v m]\n (reduce \n  \t(fn\t[a x]\n      (assoc a x v))\n  \n  \t{}\t\n  \tm\n\t))","problem":156,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn def-val-map [key lat]\n  (if (= lat []) {}\n    (assoc (def-val-map key (rest lat)) (first lat) key)\n    )\n  )","problem":156,"user":"514cc029e4b019235f6c057c"},{"problem":156,"code":"(fn [v ks]\n              (->> (for [k ks]\n                     [k v])\n                   (into {})))","user":"53684a2fe4b0243289761e8c"},{"problem":156,"code":"(fn [a col]\n  (loop [n 0 maps {}]\n    (if (< n (count col))\n      (recur (inc n) (assoc maps (nth col n) a))\n      maps)))","user":"5db658ebe4b010eb3c36cd39"},{"problem":156,"code":"#(->> (repeat %1) (interleave %2) (apply assoc {}))","user":"60538924e4b04c8f2157d153"},{"code":"(fn [x coll] (reduce #(assoc % %2 x) {} coll))","problem":156,"user":"4f8ab084e4b02e764a0a5171"},{"problem":156,"code":"(fn [default list]\n  (into {} (map #(vector % default) list)))","user":"55183a11e4b06a49daca83ca"},{"problem":156,"code":"(fn map-builder\n  ([default ks] (map-builder default ks nil))\n  ([default ks acc]\n   (if (empty? ks)\n     acc\n     (map-builder default (rest ks) (assoc acc (first ks) default)))))","user":"54125eeee4b01498b1a719d3"},{"problem":156,"code":"(fn [default sequence]\n  (into {}  (map #(assoc {} % default) sequence)))","user":"587ee260e4b052da650a6353"},{"code":"(fn foobar [defaultValue keys] (zipmap keys (repeat (count keys) defaultValue)))","problem":156,"user":"530b8ce1e4b02e82168697cd"},{"problem":156,"code":"(fn [d ks]\n  (into {}\n         (map (fn [k] [k d])\n              ks)))","user":"51b1f2d4e4b02f8f128bb95f"},{"problem":156,"code":"(fn [default k] (into {} (map #(assoc {} % default) k)))","user":"5177097de4b085adf681d892"},{"problem":156,"code":"(fn [d vs] \n  (into {} \n    (for [x vs] \n    {x d})))","user":"517e9526e4b09104ecebe7e2"},{"problem":156,"code":"(fn [dv seq] (into {} (map (fn [k] (vec [k dv])) seq)))","user":"552e1c98e4b076ab5578f7ee"},{"problem":156,"code":"(fn [v keys-coll]\n  (reduce #(assoc %1 %2 v) {} keys-coll))","user":"5ff64845e4b06df49cee1495"},{"code":"(fn [v coll]\n  (reduce\n    #(assoc %1 %2 v) {} coll))","problem":156,"user":"4e705861535d5021c1a89635"},{"problem":156,"code":"(fn [d k] \n  (reduce \n   (fn [coll k] (assoc coll k d))\n   {} k))","user":"541c1e46e4b01498b1a71a70"},{"problem":156,"code":"(fn eval1 [m n] (reduce conj (for [y n x (vector m)] {y x})))","user":"5b69baf9e4b0c6492753e78f"},{"code":"(fn [default coll](reduce #(assoc %1 %2 default) {} coll))","problem":156,"user":"52c0b2b9e4b07a9af5792353"},{"code":"#(loop [m {}, s %2] \n   (if (empty? s)\n     m\n     (recur (conj m [(first s) %1]) (rest s))))","problem":156,"user":"52d340ebe4b099d49816f0c1"},{"problem":156,"code":"(fn[value key-lst]\n  (zipmap key-lst \n           (repeat (count key-lst) value)))","user":"57f81544e4b0d3187e900917"},{"code":"(fn [def-val keyz]\n  (reduce #(assoc %1 %2 def-val) {} keyz))","problem":156,"user":"51efd397e4b0249c592fbdeb"},{"code":"(fn [v ks]\n   (loop [m {}\n          kks ks]\n     (if (empty? kks)\n       m\n       (recur (assoc m (first kks) v) (rest kks)))))","problem":156,"user":"52e41c22e4b09f7907dd144b"},{"code":"(fn [default-value keys]\n  (zipmap keys (repeat default-value)))","problem":156,"user":"4f80a906e4b033992c121bf7"},{"problem":156,"code":"(fn [d ks]\n  (reduce\n   (fn [result k]\n     (assoc result k d))\n   {} ks))","user":"57958dace4b0e215f87e8484"},{"problem":156,"code":"(fn [dv ks]\n    (reduce #(merge %1 {%2 dv}) {} ks))","user":"55d073ece4b0e31453f64a3b"},{"problem":156,"code":"(fn [dv kys]\n  (zipmap kys (repeat dv)))","user":"5d917ef0e4b0915913b1d402"},{"problem":156,"code":"#(reduce (fn [prev item] (assoc prev item %1)) {} %2)","user":"56cd75bee4b0ea9b8538f74b"},{"problem":156,"code":"(fn [d l] (reduce (fn [col k] (conj col {k d})) {} l))","user":"52149e21e4b0961f15ac4d94"},{"problem":156,"code":"(fn [v ks]\n (reduce #(assoc %1 %2 v) {} ks))","user":"57c83afae4b05aa3c4741d17"},{"code":"(fn [x y] \n  (reduce conj {}(map (fn [z] {z x}) y)))","problem":156,"user":"529ac5d4e4b02ebb4ef7509b"},{"problem":156,"code":"(fn [v ks]\n  (into (sorted-map) (map #(vector % v) ks)))","user":"54a80855e4b09f271ff37c9e"},{"problem":156,"code":"(fn [d ks]\n  (into {}\n        (map (fn [k] [k d])\n             ks)))","user":"55fd0d19e4b0f488688e067a"},{"code":"(fn f [default items]\n  (loop [L items m {}]\n    (if (empty? L)\n      m\n      (recur (rest L) (assoc m (first L) default))\n    )\n  )\n)","problem":156,"user":"52bf936ee4b07a9af579233b"},{"code":"(fn [d xs] (reduce #(conj %1 (vector %2 d)) {} xs))","problem":156,"user":"4daec4a0edd6309eace4d15e"},{"problem":156,"code":"(fn [v s] (loop [d v k s m {}] (if (empty? k) m (recur d (rest k) (assoc m (first k) d)))))","user":"586d2f5be4b01531a375e98c"},{"code":"(fn map_initialiser [v k] (zipmap k(repeat (count k)v)))","problem":156,"user":"53901605e4b0b51d73faae95"},{"problem":156,"code":"#(into {} (map (fn [e] [e %1]) %2))","user":"4f29d9abe4b0d6649770a034"},{"problem":156,"code":"(fn [default map-keys] (zipmap map-keys (repeat default)))","user":"54db3d82e4b024c67c0cf75f"},{"problem":156,"code":"#(into {}\n\t    (map (fn [k] [k %1]) %2))","user":"530bae80e4b02e82168697d0"},{"problem":156,"code":"(fn [default coll] \n  (->> coll\n       (map #(vector % default))\n       (reduce conj {})))","user":"5a798ac5e4b03baeef9276c0"},{"problem":156,"code":"(fn [dv ks] (into {} (map (fn [k] [k dv]) ks)))","user":"53bd7080e4b0d9a98559a6d1"},{"code":"(fn [default s] \n  (zipmap s (repeat default)))","problem":156,"user":"4ec3b393535dcc7ae8597d59"},{"problem":156,"code":"#(into {} (map (juxt identity (fn [n] %1)) %2))","user":"547c2c6ce4b0c51c1f4d72e3"},{"code":"(fn [d s] (apply merge (map #(hash-map % d) s)))","problem":156,"user":"4eb13d60535d7eef3080733f"},{"code":"#(apply merge(for [x %2] (assoc {} x %1)))","problem":156,"user":"52e3912ee4b09f7907dd1446"},{"problem":156,"code":"(fn [d ks]\n  ((fn [d ks acc]\n     (if (= ks '())\n       acc\n       (recur d (rest ks) (assoc acc (first ks) d))))\n   d ks (hash-map)))","user":"53aaaf7ae4b047364c044444"},{"code":"(fn  [v ks] (apply hash-map (interleave ks (repeat v))))","problem":156,"user":"52ccc2bde4b07d0d72b27371"},{"problem":156,"code":"(fn [default chave] (into {} (for [valor chave] {valor default})))","user":"5d6b1d11e4b04d129b00f2a2"},{"code":"(fn [defval keyz]\n  (zipmap keyz (repeat (count keyz) defval))\n  )","problem":156,"user":"51ab734ee4b04e3dc0c27b34"},{"code":"(fn [x y] (zipmap y(repeat x)))","problem":156,"user":"5190772de4b09156e89b2a0a"},{"problem":156,"code":"(fn [v k]\n  (apply assoc {}\n    (interleave k (repeat v))))","user":"540c54a7e4b0addc1aec6700"},{"code":"(fn [val keys] (reduce conj {} (map #(hash-map % val) keys)))","problem":156,"user":"51aee76ce4b09397d5109796"},{"problem":156,"code":"(fn fill [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))","user":"569ab3e2e4b0542e1f8d144a"},{"problem":156,"code":"(fn [v ks]\n  (zipmap ks (repeat v)))\n\n;(fn [v ks]\n;  (reduce (fn [m k] (assoc m k v))\n;          {}\n;          ks))\n\n;(fn [v ks]\n;  (apply hash-map (interleave ks (repeat v))))\n\n;(fn [v ks]\n;  (into {} (map vec (partition 2 (interleave ks (repeat v))))))\n\n;(fn [v ks]\n;  (into {} (map vector ks (repeat v))))","user":"60794173e4b0a637ed78035d"},{"problem":156,"code":"(fn [dft keylist]\n  (->> keylist (map (fn [k] (assoc {} k dft))) (apply merge)))","user":"5a47423be4b05d388ecb6b52"},{"problem":156,"code":"#(into \n  {}\n  (for [x %2]\n    [x %]\n         )\n  )","user":"59c42426e4b0a024fb6ae4f5"},{"problem":156,"code":"(fn my-defaultmap\n  [x coll]\n  (into {} (map #(vector % x) coll)))","user":"59f44189e4b0966464fe6aab"},{"code":"(fn [v ks]\n  (reduce (fn [m k] (assoc m k v)) {} ks))","problem":156,"user":"4e95c771535dbda64a6f6b39"},{"code":"#(into {}\n  (map (fn [key] [key %1]) %2))","problem":156,"user":"4fb12b35e4b081705acca275"},{"problem":156,"code":"(fn -tester\n [default lst]\n (reduce #(assoc %1 %2 default) {} lst))","user":"546113ffe4b01be26fd74699"},{"code":"(fn [val keys] (reduce merge (map (fn [key] (assoc {} key val)) keys) ) )","problem":156,"user":"52d8e23ae4b09f7907dd139b"},{"problem":156,"code":"#(into {} (map vector %2 (repeat %) ))","user":"54926752e4b0b312c081ff44"},{"problem":156,"code":"(fn [value v]\n  (into {} (map (fn [va] [va value]) v)))","user":"57dd651ee4b0bd073c202441"},{"code":"(fn [default s]\n  (if (seq? default)\n    (zipmap s default)\n    (recur (take (count s) (repeat default)) s)))","problem":156,"user":"52ce4cafe4b07d0d72b2738e"},{"code":"(fn [default ks] (apply hash-map (mapcat #(list % default) ks)))","problem":156,"user":"509b89b3e4b03049c49bd678"},{"problem":156,"code":"(fn [defVal keys] (zipmap keys (repeat (count keys) defVal)))","user":"53a3e7c6e4b0f1fc7453883a"},{"code":"(fn rec [ x y ]\n  (zipmap y (repeat (count y) x))\n  )","problem":156,"user":"50291679e4b0b6c928ad6200"},{"problem":156,"code":"(fn [v k]\n  (zipmap k (take (count k) (cycle (list v)))))","user":"53d2afede4b00fb29b221321"},{"code":"(fn [x y] (zipmap y (take (count y) (repeat x))\n))","problem":156,"user":"512fba16e4b0a88bb1e00aae"},{"code":"(fn [value seq-of-keys]\r\n  (apply hash-map (lazy-seq \r\n    (mapcat (fn [item]\r\n           [item value])\r\n         seq-of-keys))))","problem":156,"user":"4e75edfe535d7a570dd295c7"},{"problem":156,"code":"(fn [dft arr] \n    (loop [res {} i 0]\n\t\t(if (= i (count arr))\n  \t\tres\n    \t(recur (conj res {(arr i) dft}) (inc i))\n    )\n  )\n)","user":"53f152bce4b0742d9025b0dc"},{"code":"(fn mydef [x coll]\n  (if-not (= () coll) \n    (assoc (mydef x (rest coll))\n           (first coll) x)))","problem":156,"user":"518a8c4be4b0df82f5685903"},{"problem":156,"code":"(fn [num keytable]\n   (zipmap keytable (conj [] num num num)))","user":"5795acb5e4b0e215f87e8486"},{"problem":156,"code":"(fn [x k] (reduce #(conj %1 [%2 x]) {} k))","user":"5799ff45e4b05b1deef9add1"},{"code":"(fn [default seq]\n  (apply \n    hash-map \n    (interleave seq (repeat default))))","problem":156,"user":"4f017b4e535dcb61093f6a37"},{"problem":156,"code":"(fn [x y] (apply conj (for [k y] {k x})))","user":"566bd453e4b0a866af6896b7"},{"problem":156,"code":"#(apply hash-map (interleave %2 (repeat 3 %1)))","user":"5412ef7ee4b01498b1a719da"},{"code":"(fn [val keys] (zipmap keys (take (count keys) (repeat val))))","problem":156,"user":"52f28593e4b05e3f0be25ef9"},{"problem":156,"code":"(fn [v coll]\n  (reduce \n   (fn [acc item]\n     (assoc acc item v))\n   {}\n   coll))","user":"56cf115de4b0ea9b8538f765"},{"code":"(fn [val keys]\n  (loop [k keys v val r {}]\n    (if (empty? k)\n      r\n      (recur (rest k) v (merge r {(first k) v})))))","problem":156,"user":"51aefceee4b09397d5109797"},{"code":"(fn [x lst]\n  (zipmap\n   lst\n   (repeat\n    x)))","problem":156,"user":"4ecfa05c535d44c135fd68b9"},{"problem":156,"code":"(fn [val keys] \n  (zipmap keys (repeat val)))","user":"553698fae4b09218d5f44fc0"},{"problem":156,"code":"(fn [default ks] (apply assoc {} (interleave ks (repeat (count ks) default))))","user":"6078ce29e4b0a637ed78035a"},{"code":"(fn [n ks]\n  (apply hash-map (interleave ks (repeatedly (constantly n)))))","problem":156,"user":"4e0febe6535d04ed9115e7be"},{"problem":156,"code":"(fn [default a-seq] \n  (into \n   {}\n   (map #(vec (list % default)) a-seq)))","user":"5235493ee4b05e80434a5064"},{"problem":156,"code":"(fn [v the_keys] (zipmap the_keys (repeat v)))","user":"5c5732c8e4b0fb8c5ffd9a3f"},{"problem":156,"code":"(fn [default-value key-sequence] (reduce merge (map (fn [key] {key default-value}) key-sequence)))","user":"56b8cf20e4b0f26550335929"},{"problem":156,"code":"(fn [v s] (into {} (map #(hash-map % v) s)))","user":"5509a176e4b06e50f9beb119"},{"problem":156,"code":"(fn myinsert [number coll] (let [x \n                               (repeat (count coll) number) ]\n                       (apply hash-map   (interleave coll x))\n                               ))","user":"56349008e4b0bfe05bf117bd"},{"problem":156,"code":"(fn r [v ks] (if-not (empty? ks) (conj (hash-map (first ks) v) (r v (rest ks))) {}))","user":"579c35fee4b05b1deef9ae04"},{"problem":156,"code":"(fn [default-value collection]\n  (into {} (for [element collection]\n                  [element default-value])))","user":"5422c959e4b01498b1a71ac7"},{"problem":156,"code":"(fn [d k] (apply merge (for [x k] {x d})))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"#(apply array-map (interleave %2 (repeat %1)))","problem":156,"user":"53712c03e4b0fc7073fd6ea9"},{"problem":156,"code":"(fn [x seq] (zipmap seq (repeat (count seq) x)))","user":"53e6550de4b036ad0777e471"},{"problem":156,"code":"(fn [v l] (into (hash-map) (map #(vector % v) l)))","user":"57c58ad6e4b05aa3c4741ce7"},{"code":"(fn moo [val key-list] \n     (if (empty? (rest key-list)) \n         {(first key-list) val}\n         (assoc (moo val (rest key-list)) (first key-list) val)))","problem":156,"user":"511d4a52e4b022853b0e07a1"},{"code":"(fn [v keys] (apply hash-map (interleave keys (repeat v))))","problem":156,"user":"51170b49e4b0063b4e3e16d9"},{"problem":156,"code":"(fn [v ks]\n  (loop [res {}\n         v v\n         ks ks]\n    (if (empty? ks)\n      res\n      (recur (assoc res (first ks) v) v (rest ks)))))","user":"59d9dcfbe4b0ef0a1e9b5c5d"},{"code":"(fn [v ls] (reduce #(conj % {%2 v}) {} ls))","problem":156,"user":"52379c46e4b0fae3832e99db"},{"code":"(fn [default-value my-keys] \n  (reduce \n    (fn [current-map current-key] \n      (assoc current-map current-key default-value) )\n    {} my-keys ))","problem":156,"user":"4eaf08ce535d7eef3080732d"},{"problem":156,"code":"(fn map-defaults [d ks]\n  (apply hash-map (interleave ks (repeat d))))","user":"557bcce4e4b05c286339e0b9"},{"code":"#(apply hash-map (concat (interpose %1 %2) [%1]))","problem":156,"user":"4dafa380edd6309eace4d17c"},{"problem":156,"code":"(fn cm ([x lst] (cm x lst {}))\n   ([x lst res]\n    (if (empty? lst)\n      res\n      (cm x (rest lst) (into res {(first lst) x}))\n      )\n    )\n)","user":"550fd845e4b06e50f9beb17c"},{"problem":156,"code":"(fn [default coll] \n(reduce (fn [new-coll key] (assoc new-coll key default)) {} coll))","user":"5ce6a0f4e4b0a17bb84e2b8d"},{"problem":156,"code":"#(reduce (fn [r v] (conj r [v %1])) {} %2)","user":"56372798e4b0bfe05bf117d0"},{"problem":156,"code":"(fn f [v ks] (into {} (map #(vector % v) ks)))","user":"5681afaae4b0945ebc182a87"},{"problem":156,"code":"(fn [dft xs]\n  (reduce #(assoc %1 %2 dft) {} xs))","user":"5ed4b1e8e4b016b56eae05ce"},{"problem":156,"code":"(fn defaulted-map [default-val keys] (into {} (map vector keys (repeat default-val))))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":156,"code":"(fn [thinga thingb] (into {} (map vector thingb (repeat thinga))))","user":"54a634abe4b09f271ff37c84"},{"problem":156,"code":";(fn[x y](zipmap y[x x x]))\n\n;#(zipmap %2 (repeat %))\n\n(fn[x y](zipmap y (repeat x)))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":156,"code":"(fn[a b] (into {} (map (fn[x] (vector x a)) b)))","user":"53ad28ede4b047364c044462"},{"problem":156,"code":"(fn [default items]\n  (reduce (fn [acc k] (into acc {k default}))\n          {}\n          items))","user":"5779556de4b0979f8965166e"},{"code":"#(loop [list-of-keys %2, new-map {}]\n   (if (empty? list-of-keys)\n     new-map\n     (recur (next list-of-keys) (assoc new-map (first list-of-keys) %))))","problem":156,"user":"512c0f84e4b03a42b6300232"},{"problem":156,"code":"(fn [n s] (reduce #(conj %1 {%2 n}) {} s))","user":"570459a9e4b0b0fb43fd0662"},{"code":"(fn [v m] (reduce #(conj % {%2 v}) {} m))","problem":156,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":156,"code":"(fn [default sequence] (into {} (flatten (map (fn [item] {item default}) sequence))))","user":"54fc75fce4b07d26eda61d2a"},{"code":"#(apply (partial assoc {}) (interleave %2 (repeat %1)))","problem":156,"user":"52c45ac8e4b0c2d177d620d9"},{"problem":156,"code":"(fn [default coll]\n  (reduce \n   (fn [acc el]\n     (into acc (vector(vector el default)))\n     )\n   {}\n   coll\n   )\n  )","user":"5776558ee4b0979f89651633"},{"problem":156,"code":"(fn [v ks] (into {} (map (fn [l] [l v]) ks)))","user":"56012afde4b04bb52996e17c"},{"problem":156,"code":"(fn [arg1 arg2]\n(cond\n(and true (= arg2 [:a :b :c])) {:a 0, :b 0, :c 0}\n(and true (= arg2 [1 2 3])) {1 \"x\", 2 \"x\", 3 \"x\"}\n(and true (= arg2 [:foo :bar])) {:foo [:a :b], :bar [:a :b]}\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":156,"code":"#(apply merge (for [x %2] {x %}))","user":"573678eae4b0cd1946bd1034"},{"problem":156,"code":"(fn [default coll] \n  (into {} (map #(conj [%] default) coll)))","user":"583166c1e4b051871117c025"},{"problem":156,"code":"(fn \n  [defa seq]\n  (into {}(for [x seq\n        :let [y [x defa]]]\n        y)))","user":"55fcaccfe4b0f488688e0679"},{"problem":156,"code":";(fn [default keys] (zipmap keys (repeat (count keys) default)))\n#(zipmap %2 (repeat (count %2) %1))","user":"553e3260e4b0a04f792994eb"},{"code":"(fn [init ks]\n  (zipmap\n    ks\n    (repeat init)))","problem":156,"user":"4fb1d907e4b081705acca282"},{"problem":156,"code":"(fn [default ks]\n  (loop [result {} cur-keys ks]\n        (if (empty? cur-keys)\n            result\n            (recur (assoc result (first cur-keys) default) (rest cur-keys)))))","user":"5a21d34ce4b0ff51aa4b32b9"},{"problem":156,"code":"(fn map-to-default [default keys]\n  (zipmap keys (repeat default)))","user":"5f8330b8e4b01aacbe7a270f"},{"problem":156,"code":"(fn [v coll]\n  (reduce #(assoc %1 %2 v) {} coll))","user":"585e6aabe4b0f14aab7c87b1"},{"problem":156,"code":"(fn [default xs]\n  \t(reduce (fn [v x] (into v [[x default]])) {} xs))","user":"5eec1001e4b07c55ae4a0502"},{"problem":156,"code":"(fn [default keys-given] \n  (loop [m {} k keys-given]\n    (if (empty? k)\n      m\n      (recur (assoc m (first k) default) (rest k)))))","user":"5668aad0e4b04acd4f672df5"},{"problem":156,"code":"(fn [n coll] (apply assoc {} (interleave coll (repeat n)) ))","user":"5dfa1c67e4b0a607a9a45cc5"},{"code":"(fn [val keys]\n  (reduce (fn([a b] (assoc a b val))) {} keys))","problem":156,"user":"5374adc3e4b06d7f452d9e27"},{"problem":156,"code":"(fn make-default-map [X Y] \n  \n  (if (empty? Y) Y \n  \t(merge {(first Y) X} (make-default-map \n                          X\n                          (rest Y)\n                         )\n           \n    )\n  )\n)","user":"5a05a807e4b01bb0ae8afdb8"},{"problem":156,"code":"(fn [defval keyz] (into {} (map #(hash-map % defval) keyz)))","user":"54a3ff07e4b09f271ff37c6a"},{"problem":156,"code":"(fn [v m] (apply assoc {} (interleave m (repeat v))))","user":"5c44ad48e4b0e06e1360a37a"},{"problem":156,"code":"(fn\n  [v k]\n  (reduce conj (map #(hash-map % v) k)))","user":"59c4d93fe4b0a024fb6ae507"},{"problem":156,"code":"(fn test [x y] (reduce #(assoc %1 %2 x) {} y))","user":"57752a2de4b0979f89651613"},{"problem":156,"code":"(fn [dval k]\n    (reduce\n      (fn [z h] (assoc z h dval))\n      {}\n      k))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":156,"code":"(fn spotmapwithdefaults [d ks]\n  (if (empty? ks)\n   {}\n   (assoc (spotmapwithdefaults d (rest ks)) (first ks) d)))","user":"60882700e4b0ae75613dcedf"},{"problem":156,"code":"(fn [v ks] (into (sorted-map) (for [x ks] (vec [x v]))))","user":"58eadeafe4b056aecfd47d28"},{"problem":156,"code":"(fn [default ks]\n  (apply assoc {} (interleave ks (repeat default))))","user":"54df2274e4b024c67c0cf7a8"},{"code":"(fn default-map\n  [default hashmap]\n  (apply hash-map (interleave hashmap (repeat default))))","problem":156,"user":"52d39acce4b099d49816f0c7"},{"problem":156,"code":"(fn [x z] (zipmap z (repeat x)))","user":"55cd95b4e4b0e31453f64a1e"},{"problem":156,"code":"(fn [default my-seq]\n  (loop [final-map {} n 0]\n    (if (= n (count my-seq))\n    \tfinal-map\n    \t(recur (assoc final-map (nth my-seq n) default) (inc n)))))","user":"55228c3ce4b0882d96d091a2"},{"problem":156,"code":"(fn dflt [d k] (if (empty? k) {} (assoc (dflt d (rest k)) (first k) d)))","user":"56800ba1e4b0966858e4d8e8"},{"code":"(fn [default container]    \n      (into {} (map (fn[x] (hash-map x default)) container))\n    )","problem":156,"user":"52737333e4b03e8d9a4a747f"},{"code":"(fn [k coll]\n  (reduce (fn [x y] (conj x [y k])) {} coll))","problem":156,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":156,"code":"(fn [v ks] (reduce (fn [y z] (assoc y z v)) {} ks))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":156,"code":"(fn [defval init-keys]\n(loop [res {}, key init-keys]\n(if (empty? key)\nres\n(recur\n(assoc res (first key) defval)\n(rest key))\n)))","user":"570cd4bde4b0b0fb43fd06cf"},{"problem":156,"code":"(fn aa[v k]\n  (into {} (map #(assoc {} %1 v) k)))","user":"548f3ed8e4b0e286459a1236"},{"code":"(fn [default-value key-vector]\n  (into\n  \t{}\n   \t(map #(vector % default-value) key-vector)\n   )\n  )","problem":156,"user":"51ca15bfe4b09ce160bef5b8"},{"problem":156,"code":"(fn mappy [init tab] (into {} (map #(-> {% init}) tab)))","user":"575aa61ae4b02ea11479934e"},{"code":"(fn [v s]\n  (apply conj (map #(hash-map % v) s)))","problem":156,"user":"52090654e4b0e152394d76ee"},{"problem":156,"code":";;(fn [v ks]\n;;  (into {}\n;;        (map #(vector % v) ks)))\n\n#(zipmap %2 (repeat %1))","user":"576aea4fe4b0a07e8fc18126"},{"problem":156,"code":"(fn \n  [d m] \n    (into {} (map #(conj [%] d ) m )) )","user":"542edb4ae4b0dad94371f2c8"},{"problem":156,"code":"(fn [k m] (zipmap m (cycle [k])))","user":"56af842de4b061e3ca319ad2"},{"problem":156,"code":"(fn\n  [defv lst] \n  (reduce (fn [a b] (conj a {b defv}))\n          {}\n          lst))","user":"5693383fe4b0dcc4269f4100"},{"code":"(fn[v, k] \n  (reduce #(assoc %1 %2 v) {} k)\n)","problem":156,"user":"52299d14e4b04c906c9c6a7e"},{"problem":156,"code":"(fn [d v]\n  (reduce \n   (fn [r k] (assoc r k d))\n   {}\n   v))","user":"56f53c61e4b046a417f9206d"},{"problem":156,"code":"(fn [defa k]\n  (zipmap k (repeat defa)))","user":"5f74de11e4b02876ed9fd0a5"},{"problem":156,"code":"(fn [d k]\n   (reduce (fn [m v] (assoc m v (or d 0))) {} k))","user":"5d41de31e4b05dd059a54379"},{"problem":156,"code":";;(fn [d k] (into {} (map #(vector % d) k)))\n(fn [d k] (reduce #(assoc %1 %2 d) {} k))","user":"59944e73e4b0b211ea3aaac2"},{"code":"(fn [ledef lemap] (reduce #(assoc %1 %2 ledef) {} lemap))","problem":156,"user":"5242d5c3e4b076204b44fa95"},{"code":"(fn [elem m] \n  (reduce #(assoc %1 %2 elem) {} m))","problem":156,"user":"527236d4e4b03e8d9a4a741f"},{"problem":156,"code":"#(apply hash-map (mapcat list %2 (replicate (count %2) %1)))","user":"5643ba10e4b0018b46ad8bff"},{"code":"(fn [i s] (zipmap s (repeat (count s) i)))","problem":156,"user":"4e7d2448535db169f9c796c8"},{"code":"(fn [v k] \n  (reduce #(conj %1 {%2 v}) {} k))","problem":156,"user":"52a3a7ebe4b04e0c58e87c02"},{"problem":156,"code":"(fn [dv arr]\n  (into {} (map #(reduce hash-map %) (map #(hash-map % dv) arr)))\n  )","user":"5b2229eee4b03cfeda66ed5b"},{"problem":156,"code":"(fn [default keys]\n      (into {}  (map #(vector  % default) keys)))","user":"552f6e8ee4b076ab5578f802"},{"code":"#(apply assoc {} (mapcat (fn [k] [k %1]) %2))","problem":156,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"problem":156,"code":"(fn [k col]\n  (into {} (for [x col] {x k})))","user":"58a35b1ee4b02bd94d917ef3"},{"problem":156,"code":"(fn [df mk] (reduce #(assoc %1 %2 df) {} mk))","user":"592883f1e4b072a2710fceea"},{"problem":156,"code":"(fn [default s]\n  (zipmap s (repeat default)))","user":"564b495de4b0284900eef667"},{"problem":156,"code":"(fn [d c] (reduce (fn [a b]\n            (conj a [b d])) {} c))","user":"59fd069ae4b01bb0ae8afcf4"},{"problem":156,"code":"(fn [d ks]\n  (reduce\n   (fn [m k] (assoc m k d))\n   {}\n   ks))","user":"5d1e19c4e4b02ea6f0fb69af"},{"code":"(fn [d c] (into {} (map #(vector % d) c)))","problem":156,"user":"4ebf11bc535dfed6da9c6d9c"},{"code":"#(apply hash-map (interleave %2 (vec (repeat (count %2) %1))))","problem":156,"user":"536f5900e4b0fc7073fd6e7b"},{"code":"(fn [default lista]\r\n  (zipmap lista \r\n          (repeat (count lista) \r\n                   default)))","problem":156,"user":"50576483e4b001218172198b"},{"code":"#(->> %2 (map (fn [x] [x %1])) (into {}))","problem":156,"user":"519b231ee4b0ac1b7dced6a2"},{"code":"(fn [d ks]\n  (let [v (take (count ks) (repeat d))] \n    (zipmap ks v)))","problem":156,"user":"538c6db7e4b0b51d73faae5a"},{"code":"(fn [v ks] (reduce merge (map #(hash-map % v) ks)))","problem":156,"user":"50782c80e4b0fc74642bff65"},{"problem":156,"code":"(fn [default keys] \n  (reduce #(assoc %1 %2 default) {} keys))","user":"5a12dea3e4b04bbd27e6da44"},{"code":"(fn [v coll] \n  (zipmap coll (repeat v)))","problem":156,"user":"539ad6b7e4b0b51d73faaf18"},{"problem":156,"code":"(fn [dfl coll] (into {} (for [t coll] {t dfl})))","user":"55f8b32ae4b03cbcff9738ba"},{"code":"(fn [xa xb]\n  (reduce #(assoc %1 %2 xa) {} xb))","problem":156,"user":"51da7e49e4b02ceefd947768"},{"problem":156,"code":"(fn [default vals] (apply hash-map (reduce (fn [acc x] (conj acc default x)) () vals)))","user":"58f49268e4b0438e51c2cec0"},{"code":"(fn [value coll] (apply merge (map #(assoc {} % value) coll)))","problem":156,"user":"50fe91c1e4b03cd852b4e84e"},{"problem":156,"code":"(fn [var col]\n  (apply merge (map hash-map col (repeat var))))","user":"541f89a5e4b01498b1a71a99"},{"problem":156,"code":"#(into {} (map (fn [v] {v %1}) %2))","user":"59adb1cee4b0e1f4e384c891"},{"problem":156,"code":"(fn defaultMap [defaultValue keys] \n  (reduce ( fn [coll, key] (assoc coll key defaultValue)) {} keys))","user":"521a6cdde4b0c4ef0be8300d"},{"problem":156,"code":"(fn [default ks] (reduce #(assoc % %2 default) {} ks))\n; This solution is nicer, but not mine:\n;#(zipmap %2 (repeat %))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":156,"code":"#(into {} (map (fn [k] (assoc {} k %)) %2))","user":"54cbe00ee4b057c6fda3a285"},{"problem":156,"code":"(fn [init vect] (reduce merge (map #(assoc {} %1 init) vect)))","user":"5398123ee4b0b51d73faaef3"},{"code":"(fn [x y]\n  ((fn df [a b c] \n     (if (empty? b) \n       c\n       (df a (rest b) (assoc c (first b) a))\n     ))\n     x y {}))","problem":156,"user":"535920b2e4b04ce2eb3ed294"},{"problem":156,"code":"(fn [v ks]\n  (reduce conj {} (for [k ks] {k v})))","user":"5c0e58bfe4b01240ff567140"},{"code":"(fn m-defaults [d ks]\n  (zipmap ks (repeat d)))","problem":156,"user":"521d709ae4b050d5da0427ef"},{"problem":156,"code":"#(zipmap %2(cycle[%]))","user":"4db2903f535df7e46ed9b6bf"},{"problem":156,"code":"(fn mMap [d x] (let [[k & ks] x] (if (= ks nil) {k d} (conj {k d} (mMap d ks)))))","user":"550e0373e4b06e50f9beb162"},{"problem":156,"code":"(fn [defaulValue sequenceOfKeys]\n  (zipmap sequenceOfKeys (repeat (count sequenceOfKeys) defaulValue) )\n)","user":"551acc5ae4b07993ea3788c4"},{"code":"(fn [val keys]\n   (loop [map {} \n          ks(seq (reverse keys))\n          ]\n     (if (and ks)\n       (recur (assoc map (first ks) val)\n              (next ks))\n       map)))","problem":156,"user":"52621a5ae4b03e8d9a4a7076"},{"problem":156,"code":"(fn [default someKeys]\n  (apply hash-map (interleave someKeys (repeat default))))","user":"573c57ace4b0cd1946bd10c0"},{"problem":156,"code":"(fn [default k] (apply hash-map \n                 (interleave \n                  \tk \n                  \t(repeat default))))","user":"5d45bd1de4b07c84aa5ae6a4"},{"problem":156,"code":"(fn\n  [v ks]\n  (reduce #(assoc % %2 v) {} ks))","user":"54d267e0e4b0e8a36923e5f3"},{"code":"#(loop [default %1\n        keys %2\n        result {}]\n  (if (not-empty keys)\n    (recur default \n          (rest keys)\n          (assoc result (first keys) default)\n    )\n    result\n  )\n)","problem":156,"user":"4fe610fde4b0e8f79898fece"},{"problem":156,"code":"(fn [def-val coll]\n  (into {} (map #(vector % def-val) coll)))","user":"57e79d8ee4b0bfb2137f5afe"},{"code":"(fn map-default [x k-vals]\n   (into {} (map #(hash-map % x) k-vals)))","problem":156,"user":"4f6845d2e4b07046d9f4ef74"},{"problem":156,"code":"; first-attempt\n;(fn defa\n;  [val [x & xs]]\n;  (if x\n;    (merge {x val} (defa val xs))\n;    {}))\n\n; second-attempt\n#(zipmap %2 (repeat %))","user":"550d9452e4b06e50f9beb15d"},{"problem":156,"code":"(fn [x y]\n  (reduce conj (for [z y] {z x}))\n)","user":"5be15f4de4b0ed4b8aab4c9b"},{"code":"(fn [d a]\n  (apply conj (map #(hash-map % d) a)))","problem":156,"user":"4fc93728e4b0ee37620e1844"},{"problem":156,"code":"(fn [value key-list]\n    (into {} (map #(-> [% value])\n                  key-list)))","user":"5b28cf92e4b063e2438bcc56"},{"problem":156,"code":"(fn [dfl ks] (zipmap ks (repeat dfl)))","user":"5622ac1de4b03f08ee9a922a"},{"problem":156,"code":"(fn [x array] (reduce merge (map (fn [y] {y x}) array)))","user":"5e839edde4b09a7a73c8bbba"},{"code":"(fn [value mapkeys] \n  (loop [keysleft mapkeys\n         themap {}]\n    (if (= 0 (count keysleft))\n      themap\n      (recur (rest keysleft) (assoc themap (first keysleft) value)))))","problem":156,"user":"52daf558e4b09f7907dd13c1"},{"problem":156,"code":"#(reduce (fn [ret curr] \n           (assoc ret curr %1)) {} %2)","user":"5883584ae4b0f1effa3b7674"},{"problem":156,"code":"(fn [default data] (reduce (fn [store cur] (conj store {cur default})) {} data))","user":"56a79421e4b07966d5a8a05c"},{"code":"(fn mapdefault [x ys]\n  (zipmap ys (repeat x)))","problem":156,"user":"4fb804f7e4b081705acca2d6"},{"problem":156,"code":"(fn [default keys]\n      (reduce (fn [map elem]\n                (assoc map elem default)) {} keys))","user":"56478a82e4b0284900eef61e"},{"problem":156,"code":"(fn [default ks] (into {} (map #(vector % default) ks)))","user":"4e68c434535d8ccf87e9fe89"},{"problem":156,"code":"(fn [v coll]\n  (->> (repeat v)\n       (interleave coll)\n       (apply hash-map)))","user":"550e0951e4b06e50f9beb163"},{"problem":156,"code":"(fn [default initial-keys] (zipmap initial-keys (repeat default)))","user":"5604bcf7e4b08b23635d315a"},{"code":"(fn [default-value collection ]\n  (zipmap collection (repeat default-value)))","problem":156,"user":"5144e4c1e4b021a5ff8301f8"},{"problem":156,"code":"(fn [v ks]\n  (into {}\n        (map vector ks (repeat v))))","user":"56b965d9e4b0f26550335931"},{"problem":156,"code":"(fn [d s] (reduce #(assoc % %2 d ) {} s) )","user":"54b45938e4b05787c3b1638f"},{"problem":156,"code":"(fn [default key-list]\n  (reduce (fn\n            [new-map key]\n          \t(assoc new-map key default)\n           )\n          {}\n          key-list\n  )\n)","user":"5dd25ca8e4b0948ae9d9ad55"},{"problem":156,"code":"(fn [v ks] (->> v repeat (interleave ks) (partition 2) (map vec) (into {})))","user":"59074b7ce4b047aa04b19951"},{"problem":156,"code":"(fn [e coll] (reduce #(into %1 {%2 e}) {} coll))","user":"53a1b5c8e4b0ca733b9744c1"},{"problem":156,"code":"(fn [default-value key-list]\n  (reduce #(conj %1 [%2 default-value]) {} key-list))","user":"55c313a0e4b0e31453f64986"},{"problem":156,"code":"(fn [default keys] (zipmap keys (take (count keys) (repeat default))))","user":"5dbf6016e4b0e59a23173d79"},{"code":"#(merge (zipmap %2 (repeat %1)))","problem":156,"user":"4fe97adde4b0547ebccb245e"},{"code":"(fn map-defaults\n  [default col]\n  (zipmap col (repeat (count col) default)))","problem":156,"user":"528e25b9e4b0239c8a67aed5"},{"problem":156,"code":"#(apply conj (map (fn [v] {v %1}) %2))","user":"5c30d90de4b0d62ef62d9f22"},{"problem":156,"code":"(fn [v col] (->> col (map #(vector % v)) (into {})))","user":"544b5b8de4b0e39780006963"},{"problem":156,"code":"(fn [default ks]\n  (loop [ks ks\n         m {}]\n    (if-let [k (first ks)]\n      (recur (rest ks) (assoc m k default))\n      m)))","user":"523578efe4b0a643f2dcb74c"},{"problem":156,"code":"(fn [v st] (zipmap st (repeat (count st) v)))","user":"573940e3e4b0cd1946bd106b"},{"code":"(fn\r\n  [default keys]\r\n  (reduce\r\n    (fn [result key] (assoc result key default))\r\n    {}\r\n    keys))","problem":156,"user":"4fbc068ae4b081705acca2f2"},{"problem":156,"code":"(fn [d ks] \n  (into \n   {} \n\t(map\n     #(vector % d)\n     ks)))","user":"53de7484e4b0d874e779ae35"},{"code":"(fn mapDefaults2 [x coll] (if (< 0 (count coll))\n                                 (conj (mapDefaults2 x (rest coll)) {(first coll) x})\n                                {}))","problem":156,"user":"5296aa9be4b02ebb4ef75034"},{"code":"(fn [default-value keyz]\n  (zipmap keyz (repeat default-value)))","problem":156,"user":"52be23dbe4b07a9af5792316"},{"code":"(fn [c s] (zipmap s (repeat c)))","problem":156,"user":"4edb4c7c535d10e5ff6f5318"},{"code":"(fn[a b](reduce #(assoc %1 %2 a) {} b))","problem":156,"user":"4e6a6d12535d8ccf87e9fee2"},{"problem":156,"code":"(fn [d c] (apply hash-map (apply concat (map #(vector % d) c))))","user":"57c3451fe4b05aa3c4741cbd"},{"code":"(fn [x coll] (loop [final {}\n                    remain coll]\n               (if (empty? remain)\n                 final\n                 (recur (assoc final (first remain) x) (into [] (next remain))))))","problem":156,"user":"507a33dee4b08327cd804a68"},{"problem":156,"code":"(fn [val coll] \n  (into {} (map (fn [key] (vector key val)) coll)))","user":"5800ab1ee4b0a837a8b30c41"},{"problem":156,"code":"(fn [defval keyl] (into {} (map #(vec (list %1 defval)) keyl)))","user":"54df3c94e4b024c67c0cf7aa"},{"code":"(fn [v k] (reduce #(assoc %1 %2 v) {} k))","problem":156,"user":"4fc0853ae4b081705acca327"},{"problem":156,"code":"(fn [v k] (zipmap  k (repeat (count k) v)))","user":"53bb4cb1e4b047364c044502"},{"problem":156,"code":"(fn [e s] \n (reduce \n  #(assoc %1 %2 e)\n  {}\n  s))","user":"5c22c861e4b07e362c230590"},{"problem":156,"code":"(fn [x col] (reduce merge (for [y col] (assoc {} y x))))","user":"59595f85e4b066ee0a44afa1"},{"code":"(fn [e v] (into {} (map #(vector % e) v)))","problem":156,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":156,"code":"(fn [d, a-seq] (zipmap a-seq (take (count a-seq) (iterate identity d))))","user":"54b972bbe4b0ed20f4ff6ead"},{"code":"#(into {} (mapcat (fn [x] (assoc {} x %1)) %2))","problem":156,"user":"5397ecf6e4b0b51d73faaef2"},{"code":"(fn [x col] (zipmap col (repeat (count col) x)))","problem":156,"user":"519c407ae4b0a1d87b003457"},{"code":"#(reduce conj (map (fn [x] {x %1}) %2))","problem":156,"user":"52160dbee4b0bf4bffd29cb3"},{"code":"(fn [dft coll]\n  (reduce #(conj {%2 dft} %1) {} coll))","problem":156,"user":"4edffe54535d10e5ff6f5347"},{"problem":156,"code":"(fn [d s] (into {} (for [i s] [i d])))","user":"5f58db95e4b0a0bc16850a9a"},{"problem":156,"code":"(fn [default keys]\n  (apply merge (map #(hash-map % default) keys)))","user":"5522cd9ae4b0882d96d091ab"},{"problem":156,"code":"(fn [dflt, keyList]\n  (reduce merge (map hash-map keyList (for [y keyList] dflt))))","user":"543b12cce4b032a45b86932a"},{"problem":156,"code":"(fn && \n  ([default ks-seq] \n    (&& default {} ks-seq))\n  ([default mp ks-seq]\n    (if (empty? ks-seq)\n      mp\n      (&& default (assoc mp (first ks-seq) default) (rest ks-seq)))))","user":"578fc3d2e4b0ebec4cfb759b"},{"problem":156,"code":"(fn [v xs] (apply hash-map (mapcat #(list % v) xs)))","user":"596539dce4b069c0a1a19783"},{"code":"#(apply hash-map (apply concat (for [k %2] [k %1])))","problem":156,"user":"53244c9de4b09d4e7a9b54db"},{"code":"(fn [n lst] (apply merge (map #(hash-map % n) lst)))","problem":156,"user":"4ee8092f535d93acb0a66875"},{"problem":156,"code":"(fn \n  [val keys]\n  (reduce (fn [acc curr] (assoc acc curr val)) {} keys))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":156,"code":"(fn map-defaults [val keys]\n  (loop [k keys  acc {}]\n    (cond (empty? k) acc\n          :else (recur (rest k) (conj acc [(first k) val])))))","user":"55dab5c8e4b0e31453f64ada"},{"problem":156,"code":"(fn [val keys]\n  (into {}\n        (map #(vector %1 val) keys)))","user":"56cb77e0e4b0ea9b8538f734"},{"code":"(fn [df sq] (apply conj (map #(assoc {} % df) sq)))","problem":156,"user":"5171f684e4b0d70c8bbbf248"},{"problem":156,"code":"#(into {} (map hash-map %2 (repeat %1)))","user":"52d84ea7e4b09f7907dd1390"},{"problem":156,"code":"(fn [d ks]\n  (reduce #(assoc %1 %2 d) {} ks)\n  )","user":"4f9e830ae4b0dcca54ed6d2c"},{"problem":156,"code":"(fn add-keys\n  [v ks]\n  (reduce conj\n   (for \n     [k ks]\n     {k v})))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":156,"code":"(fn [d k] (reduce (fn [a b] (assoc a b d)) {} k))","user":"56c6a3c3e4b05cc29241eeb3"},{"problem":156,"code":"#(apply hash-map (interleave  %2 (repeat %1) ))","user":"575d16f8e4b02ea114799377"},{"code":"(fn [v k]\n  (zipmap k (repeat (count k) v))\n  )","problem":156,"user":"51a5d967e4b051b01d55f454"},{"problem":156,"code":"(fn [x ks] (into {} (map (fn [k v] [k v]) ks (repeat x))))","user":"4f43b992e4b0d7d3c9f3fd2c"},{"problem":156,"code":"(fn make-map [default coll] (loop [result {} c coll] (if c (recur (conj result {(first c) default}) (next c)) result)))","user":"55f330dde4b06e875b46ce56"},{"code":"(fn [value keys] (zipmap keys (take (count keys) (repeat value))))","problem":156,"user":"520f46f9e4b0101e4be6fcee"},{"code":"#(loop [v %2\n        m {}]\n   (if (empty? v)\n     m\n     (recur (rest v) (assoc m (first v) %1))))","problem":156,"user":"51d360d1e4b099f3b6acddff"},{"problem":156,"code":"(fn [default_value vect] (reduce #(assoc %1 %2 default_value) {} vect))","user":"5cf53196e4b087f62be35a94"},{"problem":156,"code":"#(zipmap %2 (repeat %1))\n;(fn [d m] (reduce #(assoc %1 %2 d) {} m))","user":"54aec375e4b09f271ff37cf9"},{"problem":156,"code":"(fn [d ks]\n  (reduce conj\n           (map (fn [x] {x d}) ks)))","user":"55a1683ce4b0acc240e31513"},{"problem":156,"code":"(fn [value coll] (reduce #(assoc %1 %2 value) {} coll))","user":"57eb2576e4b0bfb2137f5b5c"},{"code":"#(zipmap %2 (cycle [%1]))","problem":156,"user":"4e823ed7535db62dc21a62c7"},{"code":"(fn [v s]\n  (reduce\n   #(assoc %1 %2 v)\n   {}\n   s))","problem":156,"user":"5201ada5e4b0b2e020a18f14"},{"code":"(fn [d k] (into {} (map #(vector % d) k)))","problem":156,"user":"5144c0a2e4b0d29bc9e5e33b"},{"problem":156,"code":"#(loop [[head & tail] %2\n         res {}]\n    (if (empty? tail)\n      (merge {head %1} res)\n      (recur tail (merge {head %1} res))))","user":"542ce413e4b0dad94371f2ae"},{"code":"(fn foo [default_value the_keys] (reduce (fn bar [the_map the_key] (assoc the_map the_key default_value)) (cons {} the_keys)) )","problem":156,"user":"4e8d5edd535d65386fec2134"},{"code":"(fn [d k]\n  ((fn [key dflt wip]\n    (if (empty? key)\n      wip\n      (recur (rest key) dflt (assoc wip (first key) dflt))))\n    k d {}\n  )\n)","problem":156,"user":"50293245e4b08353e5d459cf"},{"problem":156,"code":"(fn [x mylist] (into {} (for [y mylist] {y x})))","user":"568f2059e4b0dcc4269f40df"},{"code":"(fn [d m] (reduce #(assoc %1 %2 d) {} m))","problem":156,"user":"4f97d8f3e4b0dcca54ed6ced"},{"problem":156,"code":"(fn [x y] (into {} (map #(assoc {} % x) y)))","user":"5394c2dfe4b0b51d73faaed1"},{"problem":156,"code":"(fn [d ls] (reduce (fn [xs n] (conj xs {n d})) {} ls ))","user":"53f7f1dde4b0de5c41848567"},{"code":"(fn [x keys]\n     (apply merge (map #(array-map % x ) keys)))","problem":156,"user":"53664e3be4b0243289761e74"},{"code":"(fn [x xs] (into {} (for [s xs] [s x])))","problem":156,"user":"522454f4e4b01819a2de42d3"},{"problem":156,"code":"(fn [dflt sqnc]\n  (apply conj {} (map (fn [itm] {itm dflt}) sqnc)))","user":"566f3e18e4b0a866af6896e7"},{"code":"(fn default-map-vals [v ks]\n  (zipmap ks (repeat v)))","problem":156,"user":"4efa3d4b535dced4c769f270"},{"code":"(fn [df col] (zipmap col (repeat (count col) df)))","problem":156,"user":"520aaac2e4b01da9d47a99e6"},{"code":"(fn [df li]\n  (apply hash-map (interleave li (repeat df)))\n  )","problem":156,"user":"534c734de4b084c2834f4a93"},{"code":"(fn [d ks]\n    (zipmap ks (repeat d)))","problem":156,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":156,"code":"(fn \n  [a b]\n  (into {} (map #(hash-map % a) b)))","user":"5b3de9a7e4b02d533a91bbf4"},{"code":"(fn [default coll]\n  (reduce \n   (fn [map key] (assoc map key default))\n   {}\n   coll))","problem":156,"user":"4f6236abe4b0defedf855fcd"},{"problem":156,"code":"(fn xxy [i coll] \n  (zipmap coll (repeat (count coll) i)))","user":"5ac04101e4b073f177442737"},{"problem":156,"code":"(fn [val arr] (reduce #(assoc %1 %2 val) {} arr))","user":"5e0596d5e4b0a607a9a45d7d"},{"code":"(fn mkmap [v ks] \r\n          (if (empty? ks)\r\n              {}\r\n              (conj (mkmap v (rest ks)) [(first ks) v])))","problem":156,"user":"4f07ad89535dcb61093f6c2a"},{"problem":156,"code":"(fn [el kys] (into (hash-map) (for [x kys] [x el])))","user":"53f2370ee4b0742d9025b0e7"},{"code":"(fn [v k]\n  (loop [\n         retval {}\n         theKeys (seq k)]\n    (if (seq theKeys)\n      (recur (assoc retval (first theKeys) v) (next theKeys))\n      retval)))","problem":156,"user":"5020a3fbe4b0cb6ebc0a42f8"},{"problem":156,"code":"(fn [d k]  \n  (loop [ks k result {}]\n  \t(if ks       \n      (recur (next ks) (conj result [(first ks) d]))\n      result)))","user":"53c649d3e4b00fb29b221297"},{"problem":156,"code":"(fn [ d k ] (reduce #(conj %1 {%2 d}) {} k))","user":"5a536cf2e4b05d388ecb6c10"},{"problem":156,"code":"(fn [value coll] (into {} (for [x coll] {x value})))","user":"54094824e4b0addc1aec66da"},{"problem":156,"code":"(fn [deff values] \n  (reduce #(assoc %1 %2 deff) {} values))","user":"56b7c32ee4b0982f16b37e48"},{"problem":156,"code":"(fn [defv coll] (into {} (for [x coll] [x defv])))","user":"55ca4273e4b0e31453f649f9"},{"code":"#(reduce conj (map (fn [x] {x %}) (reverse %2)))","problem":156,"user":"511ac2ede4b0c87c59c9670f"},{"problem":156,"code":"(fn [d vals]                                                                                    \n     (let [bfn (fn [v m k] (assoc m k v))                                                          \n           bfnp (partial bfn d) ]                                                                  \n       (reduce bfnp {} vals)))","user":"549a1fede4b0f3d1d8e70f6a"},{"code":"(fn [d ks]\n  (zipmap ks\n          (repeat d)))","problem":156,"user":"519db0ede4b037b32803f9b9"},{"problem":156,"code":"(fn MapDefaults [lla sig]\n  (zipmap sig (repeat lla)))","user":"607508f3e4b069485764de54"},{"code":"(fn [default keyseq]\n  (apply hash-map (interleave keyseq (repeat (count keyseq) default))))","problem":156,"user":"4f1d1299535d64f603146487"},{"problem":156,"code":"#(into {} (for [ke %2] [ke %1]))","user":"5a9ac061e4b0d174b936c7c1"},{"code":"(fn [default keys] \n  (reduce conj {} (for [key keys] [key default])))","problem":156,"user":"4fe2501ae4b0dd6cd5ce3644"},{"problem":156,"code":"(fn [vals keys] (into {} (map #(hash-map % vals) (seq keys))))","user":"54ae9e13e4b09f271ff37cf4"},{"problem":156,"code":"(fn [x y]  (into {} (map #(assoc {} % x) y)))","user":"5a42d6a8e4b0447ef91cc5fb"},{"problem":156,"code":"(fn [v, ks]\n  (reduce (fn [acc, k]\n            (assoc acc k v))\n          {}\n          ks))","user":"53dd37aee4b0d874e779ae28"},{"code":"(fn [default keys] \n\t (reduce  #(assoc %1 %2 default ) {}  keys  ))","problem":156,"user":"518644bce4b0da5a5be3baca"},{"code":"(fn [d-val kys] (reduce #(conj %1 {%2 d-val}) {} kys))","problem":156,"user":"52dd4fb4e4b09f7907dd13df"},{"code":"(fn [v coll]\n  (reduce #(merge % (hash-map %2 v)) nil coll))","problem":156,"user":"4e6961f0535d8ccf87e9fe9b"},{"problem":156,"code":"(fn [d ks]\n  (apply sorted-map (conj (apply vector (interpose d ks)) d))\n  )","user":"5ce867fce4b0a17bb84e2baf"},{"problem":156,"code":"(fn [dflt vect] (into {} (map #(hash-map % dflt) vect)))","user":"5a0a3473e4b0eab8c0448941"},{"code":"(fn [default kkeys] (reduce merge (for [x kkeys] {x default})))","problem":156,"user":"52bdf6bde4b07a9af579230d"},{"problem":156,"code":"(fn func [n l] (if (empty? l) {} (assoc (func n (rest l)) (first l) n )))","user":"56cb483ee4b0ea9b8538f72d"},{"problem":156,"code":"#(loop [in %2\n        out {}]\n   (if (empty? in)\n       out\n       (recur (rest in) (assoc out (first in) %1))))","user":"559454f2e4b0c79f6e1db952"},{"code":"(fn [def_val lst] (apply merge (map #(hash-map % def_val) lst)))","problem":156,"user":"52570aeae4b0541d1855ba42"},{"problem":156,"code":"(fn [dv v] (into {} (map (fn [x] [x dv]) v)))","user":"5f8f1d18e4b0715f5002d779"},{"problem":156,"code":"(fn default-map-values [value keys]\n  (when-not (empty? keys)\n    (merge (assoc {} (first keys) value) (default-map-values value (rest keys))))\n  )","user":"55fb5b89e4b0f488688e0662"},{"code":"(fn [default keys]\n  (zipmap keys (repeatedly #(do default))))","problem":156,"user":"4fbc0011e4b081705acca2f0"},{"problem":156,"code":"(fn [def-value map-keys] (reduce merge (map (fn [current-key] {current-key def-value}) map-keys)))","user":"5887a686e4b0f1effa3b7702"},{"problem":156,"code":"(fn [v coll]\n  (into {} (for [z coll] {z v})))","user":"5594e0e3e4b0c79f6e1db95b"},{"code":"(fn [d l] (into {} \n                (map #(vector % d) l)))","problem":156,"user":"52be4347e4b07a9af579231b"},{"problem":156,"code":"(fn [defaultVal theKey] (zipmap theKey (repeat defaultVal)))","user":"56b41972e4b0982f16b37e1f"},{"problem":156,"code":"(fn defaults [val keys]\n  (zipmap keys (repeat val)))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":156,"code":"(fn [dval keylst] (into {} (for [kk keylst] (assoc nil kk dval))))","user":"53e92f82e4b036ad0777e49d"},{"problem":156,"code":"(fn [v col] (zipmap col (map (fn [v1] v) col)))","user":"5de8f7cee4b0986d99407f82"},{"code":"(fn map-defaults [default-value kz]\n  (let [f (first kz)]\n    (if (= 1 (count kz))\n      {f default-value}\n      (conj (map-defaults default-value (rest kz))\n         {f default-value}))))","problem":156,"user":"52d6889ae4b09f7907dd1361"},{"problem":156,"code":"(fn [default coll] (zipmap coll (iterate identity default)))","user":"55a0fd18e4b0acc240e31507"},{"code":"(fn [default key-list]\n  (let [default-value-list (repeat default)]\n    (zipmap key-list default-value-list)))","problem":156,"user":"52b94f15e4b07a9af57922ba"},{"problem":156,"code":"(fn [val keys]\n   (into {} (map (fn [key] [key val]) keys)))","user":"54bd9a60e4b0ed20f4ff6ee3"},{"problem":156,"code":"(fn destruct \n  [default keys]\n  (into {} (map (fn [value] {value default}) keys)))","user":"53e150e5e4b0d874e779ae53"},{"code":"(fn [d v]\n  (loop [m {} i 0]\n    (if (< i (count v))\n      (recur (assoc m (get v i) d) (inc i))\n      m)))","problem":156,"user":"53183c38e4b08068f379ed6b"},{"problem":156,"code":"(fn [p c] (reduce #(assoc % %2 p) {} c))","user":"5a6dbaf5e4b0512ff01cda63"},{"code":"(fn [d ks] (reduce #(conj % {%2 d}) {} ks))","problem":156,"user":"50bbdbb8e4b0594b91591c3a"},{"problem":156,"code":"(fn [d m] (into {} (map #(assoc {} % d) m)))","user":"54b54d1be4b05787c3b1639c"},{"code":"(fn [v m]\n  (zipmap m (repeat (count m) v)))","problem":156,"user":"4e949d18535dbda64a6f6b15"},{"problem":156,"code":"(fn foo\n  [val keys]\n  (reduce (fn [m k]  (assoc m k val)) {} keys))","user":"5d5950c1e4b02ba5928a6827"},{"problem":156,"code":"(fn [v k-list]\n  (zipmap k-list (repeat v)))","user":"60a42199e4b00e9e6653c454"},{"problem":156,"code":"(fn mapDef\n  [val x]\n  (into {} (map #(vector %1 val) x)))","user":"54f64e99e4b0f2f3c5226ea4"},{"code":"(fn default-map [d m]\n  (if (next m)\n    (conj (default-map d (next m)) {(first m) d})\n    (conj {} {(first m) d})))","problem":156,"user":"538557aee4b06839e8705f02"},{"code":"(fn [d v] (apply hash-map (interleave v (repeat d))))","problem":156,"user":"4ee77f15535d93acb0a66868"},{"problem":156,"code":"(fn[d l] (into {} (for [i l] {i d})))","user":"5bb33124e4b0a20761a2351c"},{"problem":156,"code":"(fn my-map\n  [x y]\n  (if (empty? (rest y))\n    (hash-map (first y) x)\n    (merge (hash-map (first y) x) (my-map x (rest y)))))","user":"543be8f0e4b032a45b869337"},{"problem":156,"code":"(fn [k m]\n  (zipmap m (repeat k))\n  )","user":"6074f5ede4b069485764de52"},{"problem":156,"code":"(fn [v coll]\n  (reduce merge (map #(hash-map % v) coll)))","user":"5db6cc4ae4b010eb3c36cd3b"},{"code":"(fn [d k](zipmap k (repeat (count k) d)))","problem":156,"user":"51424c61e4b0b50abeb46b33"},{"problem":156,"code":"(fn [x v]\n  (into {}\n        (map #(vector % x) v)))","user":"5549ff9ae4b0a04f7929956e"},{"problem":156,"code":"(fn [d s] (reduce conj `{} (map #(vector % d) s)))","user":"5526d0a9e4b0ffed3738f927"},{"code":"(fn [x y] (apply merge (map (fn [s] {s x}) y)))","problem":156,"user":"5034374de4b062bc5d7ae161"},{"code":"(fn [val keys]\n  (into {}\n    (for [x keys]\n      {x val})))","problem":156,"user":"4fc559eae4b0ee37620e17f3"},{"problem":156,"code":"(fn [value col]\n  (reduce (fn [obj item]\n            (assoc obj item value)) {} col))","user":"5c9da580e4b048ec896c5b12"},{"code":"(fn [dv sec]\n  (let [m {}]\n    (into {} (for [k sec] (assoc m k dv)))))","problem":156,"user":"509fa9b5e4b08df8156e9e3f"},{"code":"#(into '{} (map hash-map %2 (repeat %1)))","problem":156,"user":"52d809bde4b09f7907dd1384"},{"problem":156,"code":"(fn [d c] (apply hash-map (mapcat #(list % d) c)))","user":"54dd76c8e4b024c67c0cf794"},{"problem":156,"code":"(fn [x y] (into {} (mapcat #(hash-map %2 %) (repeat x) y)))","user":"55b107fee4b002ce9d5cbc2a"},{"code":"(fn [n coll] (apply assoc {} (interleave coll (repeat n))))","problem":156,"user":"500a0a11e4b03d00572d2d73"},{"problem":156,"code":"(fn [val coll]\n  (reduce into {} (map #(hash-map % val) coll)))","user":"5bfc7a06e4b0bdcf453d15ee"},{"problem":156,"code":"(fn [a lst]\n   ((fn [a lst acc]\n      (cond\n       (empty? lst) acc\n       :else (recur a (rest lst) (merge acc {(first lst) a}))\n       )\n      ) a lst {})\n   )","user":"531a0709e4b08068f379ed87"},{"problem":156,"code":"(fn [d ks] \n  (into {} \n        (for [k ks] [k d])))","user":"59497f51e4b07ddc2dafaddd"},{"problem":156,"code":"(fn [default coll] (into (sorted-map) (map #(hash-map % default) coll)))","user":"577aad81e4b0d3393e5deb04"},{"code":"(fn ms [d ks]\n  (into {} \n        (for [k ks]\n          [k d])))","problem":156,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn default-map [default keys]\n  (reduce (fn [map key]\n    (assoc map key default)) {} keys))","problem":156,"user":"4f9e3fd4e4b0dcca54ed6d2b"},{"code":"(fn criaMapa [x y]\r\n  (cond\r\n    (nil? (first y)) nil\r\n    :else (merge (criaMapa x (rest y)) {(first y) x})))","problem":156,"user":"50206641e4b0cb6ebc0a42f5"},{"problem":156,"code":"(fn [default-value init-keys]\n   (loop [res {}, key init-keys]\n     (if (empty? key)\n       res\n       (recur\n         (assoc res (first key) default-value)\n         (rest key)))))","user":"5d40f41ae4b05dd059a5436d"},{"problem":156,"code":"(fn [x y] (apply hash-map (interleave y (map (constantly x) y))))","user":"540479e7e4b0addc1aec665a"},{"code":"(fn [default ks]\n  (loop [m {} ks ks]\n    (if (empty? ks)\n      m\n      (recur\n       (assoc m (first ks) default)\n       (rest ks)))))","problem":156,"user":"51684318e4b03f62cda68cd6"},{"code":"(fn init-map-with4 [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))","problem":156,"user":"4ef6f5ea535dced4c769f250"},{"problem":156,"code":"(fn [default kys]\n  (reduce #(assoc %1 %2 default) {} kys))","user":"5628e9f4e4b00e49c7cb47f2"},{"problem":156,"code":"(fn [values keyz] (into {} (map (fn [k] {k values}) keyz)))","user":"5f4b6433e4b0102c75033953"},{"code":"(fn [v k]\n  (into {} (map #(vec [% v]) k)))","problem":156,"user":"50e5bca5e4b09ae9427b0e75"},{"code":"(fn[x s] \n  (reduce \n    (fn[m el] \n      (assoc m el x)) {} s))","problem":156,"user":"531dc21be4b08068f379edb1"},{"problem":156,"code":"(fn [v keys] (zipmap keys (repeat (count keys) v)))","user":"58e17578e4b005f69f193c7f"},{"code":"(fn [k l] (zipmap l (repeat k)))","problem":156,"user":"51370575e4b04059df19f2fe"},{"code":"(fn[a b](reduce #(assoc % (first (keys %2)) (first (vals %2))) (map #(hash-map % a) b)))","problem":156,"user":"4fb3dd1ee4b081705acca2a5"},{"code":"#(apply hash-map (apply concat (map list %2 (iterate identity %1))))","problem":156,"user":"50c9e5e3e4b0a409464667d7"},{"problem":156,"code":"#(apply (partial conj {}) (for [k %2] [k %1]))","user":"55ccd9d1e4b0e31453f64a17"},{"code":"(fn [default coll]\n\t(reduce #(assoc %1 %2 default) {} coll))","problem":156,"user":"532686e6e4b09d4e7a9b54ef"},{"problem":156,"code":"(fn map-defaults [x s] (reduce (fn [acc v] (assoc acc v x)) {} s))","user":"5d53a59ae4b0776584bd6f72"},{"problem":156,"code":"#(apply assoc {} (reverse (conj (reverse (interpose %1 %2)) %1)))","user":"55d354e0e4b0e31453f64a62"},{"problem":156,"code":"(fn [d s] (reduce #(conj %1 {%2 d}) {} s))","user":"54bff194e4b0ed20f4ff6f0d"},{"code":"#(if (= :bar (second %2))\n  (hash-map (first %2) %1 (second %2) %1)\n  (hash-map (first %2) %1 (second %2) %1 (last %2) %1))","problem":156,"user":"52f97c6ae4b047fd55836fea"},{"problem":156,"code":"#(zipmap (reverse %2) (repeat (count %2) %1))","user":"54296802e4b01498b1a71b38"},{"problem":156,"code":"#(into {}\n  (for [lis %2]\n   [lis %1]))","user":"5a9c7174e4b0d174b936c7d8"},{"code":"(fn [x L] (reduce conj {} (map (fn [k] {k x}) L)))","problem":156,"user":"5332f9e1e4b019098a6f8b79"},{"problem":156,"code":"(fn [v ks]\n  (into {}\n  \t(map (fn [k]\n     \t    [k v])\n       \t ks)))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":156,"code":"(fn \n  [x s]\n  ( into {} \n      (map (fn [k] [k x]) s) \n  )\n)","user":"4e6a5728535d8ccf87e9fecf"},{"problem":156,"code":"(fn [v k]\n  (into {} (map #(hash-map % v) (seq k))))","user":"55bf6dbce4b01b9910ae2a12"},{"problem":156,"code":"(fn [x y] (into {} (map #(hash-map % x) y) ))","user":"54078851e4b0addc1aec66bd"},{"problem":156,"code":"(fn [v ks]\n  (reduce #(conj %1 {%2 v}) {} ks))","user":"5601a32ee4b04bb52996e193"},{"problem":156,"code":"(fn [a b] (reduce conj (map #(hash-map %1 a) b)))","user":"5495b2dee4b0b312c081ff5f"},{"problem":156,"code":"(fn [default list] \n  (into {} \n        (zipmap list (repeat default))\n        )\n  )","user":"544e92b8e4b0e3978000698c"},{"problem":156,"code":"(fn [default-value ks] (into {} (map #(vec [% default-value]) ks)))","user":"56449e4de4b0284900eef5f9"},{"problem":156,"code":"(fn [x y] (apply hash-map ( interleave y (repeat (count y) x)  )))","user":"5953949be4b066ee0a44aeea"},{"problem":156,"code":"(fn [val keys] \n  (into\n   {}\n   (map (fn [k] {k val}) keys)))","user":"54d87b54e4b0a52adc2e2038"},{"code":"(fn [n l] (reduce #(conj % [%2 n]) {} l))","problem":156,"user":"5210ac52e4b080a8d9b9d63e"},{"code":"(fn [v s]\n   (apply array-map (mapcat (fn [x] [x v]) s))\n)","problem":156,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":156,"code":"#(reduce conj (map hash-map %2 (repeat %1)))","user":"5dc5982be4b02f9375f4e1c0"},{"problem":156,"code":"(fn [default ks]\n  (loop [m {}\n         ks ks]\n    (if (first ks)\n      (recur (assoc m (first ks) default)\n             (rest ks))\n      m)))","user":"55f43fe7e4b06e875b46ce6b"},{"problem":156,"code":"(fn[d keys] \n(apply hash-map\n(reduce ( fn[ac val] (conj ac val d) ) [] keys ) \n)\n)","user":"5a8d55a8e4b05369db4d2514"},{"code":"(fn [v ks]\n  (->> (mapcat #(list %1 %2) ks (repeat v))\n       (apply hash-map)))","problem":156,"user":"4feff3b6e4b0678c553fc31e"},{"problem":156,"code":"(fn [k sq]\n  (reduce \n   (fn [m i]\n     (assoc m i k)) {} sq))","user":"5e0ceca5e4b099d064962f91"},{"code":"(fn [v s] (into {} (for [k s] [k v])))","problem":156,"user":"4efd98fa535de96065cf5086"},{"problem":156,"code":"(fn [def_value sequence] (reduce (fn [current_map item] (assoc current_map item def_value)) {} sequence))","user":"5f184a46e4b091ba50b4dbd4"},{"code":"(fn [d ks]\n  (apply hash-map (interleave ks (repeat d))))","problem":156,"user":"525bcae9e4b0cb4875a45d30"},{"problem":156,"code":"(fn [x y] (into {} (for [i y]  {i x})))","user":"55d80befe4b0e31453f64aae"},{"problem":156,"code":"(fn map-default [default coll]\n  (if (empty? coll)\n    {}\n    (assoc (map-default default (rest coll))(first coll) default)))","user":"54e4e14ce4b024c67c0cf7f1"},{"problem":156,"code":"(fn [x coll]\n  (apply hash-map (interleave coll (repeat (count coll) x))))","user":"5785de78e4b0ebec4cfb74e8"},{"code":"(fn [v ass] (reduce (fn [coll k](assoc coll k v)) {} ass))","problem":156,"user":"511ac026e4b0c87c59c9670e"},{"code":"(fn [v ks] \n  (apply hash-map \n     (mapcat (fn [k] [k v]) ks)))","problem":156,"user":"4eca7a87535d6d7199dd3705"},{"problem":156,"code":"(fn [d ks]\n  (reduce (fn [acc k] (assoc acc k d)) (hash-map) ks))","user":"5d0e9931e4b0cc9c91588258"},{"code":"(fn [default keyses]\n  (reduce (fn [x y]\n            (conj x {y default})\n           )\n          {}\n          keyses))","problem":156,"user":"51b89503e4b050a1176cd69a"},{"code":"(fn [default-val map-keys]\n  (reduce conj {} (for [x map-keys] (vector x default-val))))","problem":156,"user":"50acbd15e4b071b89ef26234"},{"code":"#(apply array-map (conj (into [] (interpose %1 %2)) %1))","problem":156,"user":"50517ebfe4b0a561d07d8f06"},{"problem":156,"code":"(fn [default s]\n\t(zipmap s (repeat default))  \n  )","user":"56040e58e4b0c80df0ca2654"},{"problem":156,"code":"(fn [d vec]\n  (loop [result {} coll vec]\n    (if (empty? coll)\n      result\n      (recur (assoc result (first coll) d) (rest coll)))))","user":"5ee81beae4b029a2061bbeac"},{"code":"(fn [defval newkeys] (reduce #(assoc %1 %2 defval) {} newkeys))","problem":156,"user":"51d46747e4b013d740b70de3"},{"code":"#(apply merge (for [x %2] {x %1}))","problem":156,"user":"514721c6e4b0d520409ed392"},{"problem":156,"code":"(fn [value ks] (reduce (fn [res k] (conj res {k value})) {} ks))","user":"586c122ae4b01531a375e96f"},{"code":"(fn [s ks] (zipmap ks (replicate (count ks) s)))","problem":156,"user":"5102ef6be4b00c483ae176fc"},{"problem":156,"code":"(fn [defv keyz] (into {} (for [x keyz] [x defv])))","user":"533c2605e4b0e30313ee6cd7"},{"problem":156,"code":"(fn default [value ke] (apply hash-map (interleave ke (repeat value))))","user":"58866b4fe4b0f1effa3b76d4"},{"code":"(fn [default, coll] \n  (reduce (fn [sum elem] (assoc sum elem default)) {} coll))","problem":156,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":156,"code":"(fn [d k] (reduce #(conj %1 [%2 d]) {} k))","user":"55b2088ae4b0da326a65cf75"},{"code":"#(zipmap (reverse %2) (repeat (count %2) %))","problem":156,"user":"504e3aaae4b0f6ff3350c487"},{"code":"(fn\n   [n l]\n   (reduce (fn [a x] (assoc a x n)) {} l))","problem":156,"user":"52c00263e4b07a9af579233f"},{"code":"(fn [default-value coll]\n  (apply hash-map (interleave  coll (iterate identity default-value))))","problem":156,"user":"516933ece4b03f62cda68ce4"},{"code":"(fn [v l]\n        (loop [lv v ll l result {}]\n          (if (empty? ll)\n            result\n            (recur v (rest ll) (assoc result (first ll) v)))))","problem":156,"user":"527ae911e4b03e8d9a4a756b"},{"problem":156,"code":"(fn [default zeq] (into {} (for [elem zeq :let [res [elem default]]] res)))","user":"5ea97df7e4b00a66d4a951c8"},{"problem":156,"code":"(fn [default my-vec]\n    (loop [m {} v my-vec]\n      (if (empty? v)\n        m\n        (recur (assoc m (first v) default) (rest v)))))","user":"54cbd6bae4b057c6fda3a282"},{"code":"(fn [default keys]\n  (reduce #(assoc % %2 default) '{} keys))","problem":156,"user":"514e9a14e4b019235f6c0597"},{"problem":156,"code":"(fn [v lst]\n  (let [dup (repeat (count lst) v)]\n    (apply assoc {} (interleave lst dup))))","user":"5b58d012e4b02d533a91bd71"},{"code":"(fn [x y] (apply hash-map (interleave y (repeat (count y) x))))","problem":156,"user":"4fccdc75e4b0ee37620e186d"},{"problem":156,"code":"(fn [default mapkeys] (zipmap mapkeys (repeat (count mapkeys) default)))","user":"5564c113e4b0c656e3ff180d"},{"problem":156,"code":"(fn [dv keys]  (apply conj (for [item keys] (hash-map item dv))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":156,"code":"(fn [df keys]\n  (reduce\n   (fn [res k] (assoc res k df))\n   {}\n   keys))","user":"5455c2f3e4b080a794c2c87d"},{"code":"(fn [x y]\n  (apply hash-map (interleave y (repeat x))))","problem":156,"user":"4ddee37c535d08e6dec9fddc"},{"problem":156,"code":"(fn [default valuesToMapToDefault]\n\t(reduce #(conj % [%2 default]) {} valuesToMapToDefault))","user":"5455510fe4b0e397800069df"},{"problem":156,"code":"#(loop [e %2 dv %1 resmap {}] (if (<= (count e) 0) resmap (recur (rest e) dv (assoc resmap (first e) dv))))","user":"58d1c1b1e4b03c36ff7e58ef"},{"problem":156,"code":"(fn [v ks] (reduce (fn [acc k] (assoc acc k v))\n                   {}\n                   ks))","user":"5e6ba862e4b04a83ad7cd27d"},{"code":"(fn [default-value keys] \n  (let [n (count keys) \n        vals (take n (repeat default-value))] \n  (zipmap keys vals)))","problem":156,"user":"4fe9364be4b0547ebccb244e"},{"problem":156,"code":"(fn [d m]\n  (reduce (fn [x y] (assoc x y d)) nil m))","user":"57c3df67e4b05aa3c4741cc5"},{"problem":156,"code":"(fn [val [& keys]] (into {} (map #(assoc {} % val) keys)))","user":"59ef5280e4b0966464fe6a2b"},{"problem":156,"code":"(fn [x ys] (apply merge {} (map (fn [z] {z x}) ys)))","user":"580a4320e4b0a837a8b30d2f"},{"problem":156,"code":"(fn [valeur cles]\n  (loop [s cles, res {}]\n    (if (seq s)\n      (recur (rest s) (assoc res (first s) valeur))\n      res)))","user":"5a481e05e4b05d388ecb6b64"},{"code":"#(zipmap %2 (repeat %))","problem":156,"user":"4eb298c1535d7eef3080734b"},{"code":"(fn [v ks] (apply hash-map (apply concat (for [k ks] [k v]))))","problem":156,"user":"4ed45563535d10e5ff6f52c9"},{"problem":156,"code":"(fn [x l] \n  (loop [news {} tmpl l]\n    (if (empty? tmpl)\n      news\n      (recur (assoc news (first tmpl) x) (rest tmpl)))))","user":"59368ccae4b02506e01a297a"},{"code":"#(apply hash-map (interleave %2 (take (count %2) (repeat %))))","problem":156,"user":"5188c611e4b0bdff0e072d56"},{"code":"(fn [v ks]\n  (reduce #(assoc % %2 v) {} ks))","problem":156,"user":"4fc8769be4b0ee37620e1833"},{"problem":156,"code":"(fn [v lst] (reduce #(assoc %1 %2 v) {} lst))","user":"566e87cfe4b0a866af6896dc"},{"problem":156,"code":"(fn [val seq]\n  (reduce merge (map #(assoc {} % val) seq)))","user":"56c44c34e4b05cc29241ee96"},{"problem":156,"code":"(fn my-map-init [default-value keyz] (reduce (fn [mymap key] (assoc mymap key default-value)) {} keyz))","user":"5fc3850de4b0db0e95a5f3fd"},{"problem":156,"code":"(fn [v ks]\n  (let [vs (take (count ks) (repeat v))]\n    (apply hash-map (apply concat (map (fn [x y] [x y]) ks vs)))))","user":"55eb1410e4b0121d4835fdb8"},{"problem":156,"code":"(fn xxx [v ks]\n  (into {} (map #(into [] [% v]) ks)))","user":"59dec79ee4b01968742fed81"},{"code":"(fn [key col] (zipmap col (repeat (count col) key)))","problem":156,"user":"50b64b55e4b0a86f8358ca6b"},{"problem":156,"code":"(fn [defaultval keyseq]\n\n   (zipmap keyseq (vec (repeat (count keyseq) defaultval)))\n\n   )","user":"60630af9e4b069485764ddbc"},{"problem":156,"code":"(fn [v col] (zipmap col (repeat v)))","user":"5c481764e4b0e06e1360a3ba"},{"problem":156,"code":"(fn maker \n  ([df kys] (maker df kys {}))\n  ([df kys mpp] (if (empty? kys) mpp\n                    (maker df (rest kys) (conj mpp [(first kys) df])))))","user":"5a18f868e4b0ff51aa4b31f7"},{"problem":156,"code":"(fn [defy keyz]\n  (loop [zz keyz  maap {}]\n    (if (= () zz)\n      maap        \n      (recur (rest zz) (merge maap {(first zz) defy})))))","user":"5b102ab8e4b0cc2b61a3be19"},{"code":"#(zipmap %2 (vec (repeat (count %2) %)))","problem":156,"user":"502cd12fe4b0532a782a5e39"},{"code":"(fn [defval m] (reduce #(assoc %1 %2 defval) {} m))","problem":156,"user":"5235a902e4b0a643f2dcb750"},{"code":"(fn [df v]\n  (reduce (fn [om x] (assoc om x df)) {} v))","problem":156,"user":"52e44a22e4b09f7907dd144e"},{"problem":156,"code":"(fn [x coll] (into (hash-map) (mapv #(vector % \n                                           x) coll)))","user":"5a4e3166e4b05d388ecb6bbb"},{"code":"(fn [d l]\n  (apply array-map (interleave l (repeat d))))","problem":156,"user":"501dfd54e4b051153f3b5b80"},{"problem":156,"code":"#(zipmap %2 (into [] (repeat (count %2) %1)))","user":"51bfc1f0e4b0e49ef9037dd4"},{"problem":156,"code":"(fn cst\n  [v ks]\n  (into {} (map vector ks (repeat (count ks) v))))","user":"5b73e500e4b047b03b2036ba"},{"problem":156,"code":"(fn [default sq] (reduce (fn [a b] (into a [[b default]])) {} sq))\n\n;(fn [default sq] \n;  (loop [m {} ks sq] \n;    (if (empty? ks) \n;      m \n;      (recur (assoc m (first ks) default) (rest ks)))))\n\n\n; others\n;#(into {} (for [k %2] [k %]))\n\n;#(apply assoc {}\n;        (interleave %2 (repeat %1)))","user":"55e01f4ee4b050e68259b406"},{"problem":156,"code":"(fn [v kys] (reduce conj {} (map #(conj [] % v) kys)))","user":"5c05537fe4b0bdcf453d1692"},{"problem":156,"code":"(fn mapping\n  [default k]\n  (reduce #(assoc %1 %2 default) {} k))","user":"5f6adf5ee4b02876ed9fd049"},{"code":"(fn [default keys] \n  (apply merge (map (fn [key] {key default}) keys)))","problem":156,"user":"504e9e09e4b069badc5a33bc"},{"problem":156,"code":"(fn [x coll] (apply hash-map (interleave coll (for [k coll] x))))","user":"5797d4bae4b039eba2ecb107"},{"problem":156,"code":"(fn [rando-key rando-seq]\n  (loop [empty-map {}\n         x rando-seq]\n    (if (empty? x)\n      empty-map\n      (recur (assoc empty-map (first x) rando-key) (rest x)))))","user":"607d6bc1e4b03d835a6eaecc"},{"problem":156,"code":"#(loop [x %2 result {}]\n    (if (> (count x) 0) (recur (rest x) (conj result (vector (first x) %1))) result))","user":"575e71a2e4b0846ea39baf26"},{"code":"#(into {} (map (fn [i] [i %]) %2))","problem":156,"user":"5093a80be4b097f48cc38583"},{"code":"(fn [d s]\n (reduce (fn [c q]\n  (conj c {q d})) {} s))","problem":156,"user":"51f2851fe4b0210f90e7454b"},{"code":"(fn [v m] (reduce (fn [acc el] (conj acc {el v}) ) {} m) )","problem":156,"user":"531f0a26e4b08068f379edbf"},{"code":"(fn [d ks]\n  (loop [remain ks acc {}]\n    (if (empty? remain)\n      acc\n      (recur (rest remain) (conj acc {(first remain) d})))))","problem":156,"user":"50e3cf55e4b01912b3285c45"},{"problem":156,"code":"(fn [d s]\n  (reduce #(assoc %1 %2 d) {} s))","user":"59ee2b59e4b0966464fe6a10"},{"problem":156,"code":"(fn [value ks] \n  (reduce #(assoc %1 %2 value) {} ks))","user":"576d4791e4b0979f8965155f"},{"problem":156,"code":"(fn [default sqc]\n  (reduce #(assoc %1 %2 default) {} sqc))","user":"5a6a32b6e4b0512ff01cda22"},{"problem":156,"code":"(fn [init-val key-list]\n  (apply conj\n     (map (fn [current-key]\n        (assoc {} current-key init-val)) key-list)))","user":"53844970e4b06839e8705eef"},{"code":"(fn [default ks]\n  (apply assoc (cons {} (interleave ks (repeat default)))))","problem":156,"user":"4e72187b535d5021c1a8965b"},{"code":"(fn [d seq] (reduce #(assoc % %2 d) {} seq))","problem":156,"user":"504f2071e4b0e7ad84dbc4be"},{"code":"(fn [val keys]\n  (loop [keys keys, result {}]\n    (if (empty? keys)\n      result\n      (recur \n        (rest keys) \n        (conj result {(first keys) val}))\n    )\n  )\n)","problem":156,"user":"504e0136e4b078edc5f5938e"},{"code":"(fn f [a coll]\n  (loop [result {} coll coll]\n    (if (empty? coll)\n        result\n        (recur (assoc result (first coll) a) (rest coll)))))","problem":156,"user":"538c9144e4b0b51d73faae5d"},{"code":"(fn foo [acc value mykeys] \n  (if (empty? mykeys)\n    acc\n    ( foo (merge acc {(first mykeys) value}) value (rest mykeys))   \n   )\n) {}","problem":156,"user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn [default-value map-keys]\n      (reduce (fn [final-map map-key]\n               (assoc final-map map-key default-value)) {} map-keys))","problem":156,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":156,"code":"(fn [d c]                                                                                                                             \n  (apply merge (map #(hash-map %2 %1) (repeat d) c)))","user":"527bd988e4b03e8d9a4a759d"},{"code":"(fn sol2 [dv xs] \n  (reduce merge (for [x xs] \n    {x dv} ))\n)","problem":156,"user":"5360e12ce4b0243289761e3a"},{"problem":156,"code":"(fn [v k] (reduce (fn [x y] (assoc x y v)) {} k))","user":"5a04e923e4b01bb0ae8afda9"},{"problem":156,"code":"#(into {} (for [x %2]\n          (hash-map x %1)))","user":"57a4ffdce4b0a966079561f3"},{"problem":156,"code":"(fn\n  [default xs]\n  (apply hash-map (apply concat (map vector xs (repeat default)))))","user":"5461dc79e4b01be26fd746a8"},{"problem":156,"code":"(fn [d ks] (into {} (map #(vector %1 d) ks)))","user":"595fd721e4b066ee0a44b06e"},{"problem":156,"code":"(fn [defu k_vec] (reduce (fn [map1 key1] (assoc map1 key1 defu)) {} k_vec))","user":"5c76577ae4b0fca0c16227ea"},{"problem":156,"code":"(fn [default keys]\n  (apply assoc {} \n  \t(interleave keys \n      (take (count keys) (repeat default)))))","user":"575d22f5e4b02ea11479937a"},{"problem":156,"code":"(fn[v k] (zipmap k (repeat 3 v)))","user":"5f6a6b7fe4b02876ed9fd047"},{"problem":156,"code":"(fn [default key-list] (reduce (fn [acc current-key] (assoc acc current-key default))\n                               {}\n                               key-list\n                       )\n)","user":"5990fcb9e4b0866487ed0d5b"},{"code":"(fn [d l] (reduce #(assoc %1 %2 d) {} l))","problem":156,"user":"502cff22e4b0b2ab8d5c7e72"},{"code":"(fn [val keys]\n    (loop [m {}\n          ks (seq keys)]\n       (if (empty? ks)\n         m\n         (let [k (first ks)]\n           (recur (assoc m k val)\n                  (rest ks))))))","problem":156,"user":"506f1e12e4b09350ab4199f9"},{"code":"(fn [x s] (apply array-map (interleave s (repeat x))))","problem":156,"user":"4df9c598535d04ed9115e77a"},{"code":"(fn [default-value key-names] (zipmap key-names (repeat (count key-names) default-value)))","problem":156,"user":"531dfaf5e4b08068f379edb3"},{"problem":156,"code":"(fn [default myKeys] (apply merge (for [myKey myKeys] {myKey default})))","user":"5ba167bfe4b0a20761a233a0"},{"problem":156,"code":"(fn maps [key vector1]\n  (zipmap vector1 (into [] (repeat (count vector1) key)) ) )","user":"59636ec9e4b066ee0a44b0c8"},{"code":"(fn [v ks]\n  (let [vs (repeat (count ks) v)]\n    (into {} (map vector ks vs))))","problem":156,"user":"4e09392a535d04ed9115e7ae"},{"problem":156,"code":"(fn [v ks]\n  (->> (repeat (count ks) v)\n       (interleave ks)\n       (apply hash-map)))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":156,"code":"(fn foo [value my-seq]\n  (reduce\n    (fn [acc k]\n      (println \"acc:\" acc)\n      (assoc acc k value))\n    {}\n    my-seq))","user":"5ad76df9e4b0ea6055cfac18"},{"problem":156,"code":"(fn [default-value coll]\n        (apply merge (for [k coll]\n                       {k default-value})))","user":"4f046d70535dcb61093f6bc5"},{"problem":156,"code":"(fn [default ks]\n  (reduce #(conj %1 {%2 default})\n          {}\n          ks))","user":"5e862cd7e4b09a7a73c8bbde"},{"problem":156,"code":"(fn [x y] (into {} (map #(vector %1 x) y)))","user":"5642f094e4b08d4f616f5f1f"},{"problem":156,"code":"(fn [v l] (reduce (fn [c e] (assoc c e v)) {} l))","user":"525b142fe4b0cb4875a45d05"},{"problem":156,"code":"(fn [value args]\n  (zipmap args (repeat value))\n  )","user":"565b371fe4b068f2fe63dbff"},{"problem":156,"code":"(fn [d ks] (into {} (map (fn [k] [k d]) ks)))","user":"538ca203e4b0b51d73faae5f"},{"problem":156,"code":";(fn [init c] \n;  (into {} \n;        (for [i c]\n;          (hash-map i init))))\n\n(fn [i c]\n  (into {} (map hash-map c (repeat i))))","user":"5707abfce4b0b0fb43fd068d"},{"code":"(fn [n l] (apply merge (map #(hash-map % n) l)))","problem":156,"user":"52c49401e4b0c2d177d620de"},{"code":"(fn map-default [default key-sequence]\n  (into {} (map #(hash-map % default) key-sequence)))","problem":156,"user":"53713ed9e4b0fc7073fd6eaf"},{"problem":156,"code":"(fn [value keySet]\n  (reduce #(assoc %1 %2 value) {} keySet))","user":"598ff38ce4b0fcebec4de869"},{"problem":156,"code":"#(apply merge (for [v (list %), k %2] {k v}))","user":"54972b0ee4b0b312c081ff6e"},{"code":"(fn [default keylst] (apply hash-map \n                            (concat (interpose default keylst) (list default))))","problem":156,"user":"52f2b450e4b05e3f0be25efd"},{"problem":156,"code":"(fn [d s]\n\t(zipmap s (repeat d)\n\t)\n)","user":"598d746ae4b02b9968b84d23"},{"problem":156,"code":"(fn [val keys] (reduce (fn [h k]\n                         (assoc h k val)) {} keys))","user":"56018dd4e4b04bb52996e18f"},{"problem":156,"code":"(fn mcons\n  [defaultValue liste]\n  (if (empty? liste)\n    {}\n    (let [[head & tail] liste]\n      (into {}\n            (conj (mcons defaultValue tail) [head defaultValue])\n      )\n    )\n  )\n)","user":"54410a71e4b032a45b869367"},{"code":"(fn [v k]\n  (reduce (fn [acc e]\n            (assoc acc e v ))\n          {} k))","problem":156,"user":"52d6664be4b09f7907dd1359"},{"problem":156,"code":"(fn\n  [d keyz]\n  (zipmap keyz\n          (repeat (count keyz) d)))","user":"50a122a1e4b08df8156e9e54"},{"code":"(fn [v, k]\n  (reduce #(assoc %1 %2 v) {} k))","problem":156,"user":"50b47c46e4b0c464d223d1b8"},{"code":"(fn [x y]\n  ((fn mapd0 [a b c]\n     (if (empty? b) c\n         (mapd0 a (rest b) (assoc c (first b) a)))\n     ) x y {}  ))","problem":156,"user":"5099283ce4b0cae2931060af"},{"problem":156,"code":"(fn [v k]\n  (into {} (map #(identity [% v]) k)))","user":"576a972ce4b0a07e8fc1811a"},{"problem":156,"code":"(fn [def-val key-seq]\n  (loop [ks key-seq acc []]\n    (if (empty? ks)\n      (apply hash-map acc)\n      (recur (rest ks) (conj acc (first ks) def-val)))))","user":"58ca613de4b021aa9917edb7"},{"problem":156,"code":"(fn [dv sok] (zipmap sok [dv,dv,dv]))","user":"545d5c3be4b01be26fd7466d"},{"problem":156,"code":"(fn [ value keys]\n\n(reduce \n(fn [map key]\n  \n  (assoc map key value )\n  \n  ); f-tion\n  {} ; initial\n  keys; collection\n  );END:reduce  \n  \n    );END:fn","user":"56a358d0e4b0542e1f8d14c9"},{"code":"(fn [v ks]\n  (into {}\n        (for [k ks]\n          [k v])))","problem":156,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":156,"code":"#(apply hash-map (interleave %2 (repeat %1)))\n\n;;; aplicar hashmap, pasa cada elemento de 2 que es [ ] repetir 1","user":"6075c214e4b069485764de5b"},{"problem":156,"code":"(fn [value sec] (zipmap sec (repeat (count sec) value)))","user":"588906a9e4b0f1effa3b772a"},{"problem":156,"code":"(fn [default xs] (reduce #(assoc %1 %2 default) {} xs))","user":"54c8d4a8e4b045293a27f654"},{"problem":156,"code":"(fn[default, array]\n  (zipmap array (repeat (count array) default))\n  )","user":"55240916e4b0882d96d091b6"},{"code":"(fn [d coll]\n  (apply array-map\n         (mapcat (fn [x]\n                   (list x d))\n                 coll)))","problem":156,"user":"536102efe4b0243289761e3e"},{"problem":156,"code":"(fn [default, arr] (reduce (fn [old key] (assoc old key default)) (hash-map) arr))","user":"57ccedaae4b0c746388ab88e"},{"code":"(fn [val vec]\n  (into {} (map (fn [x] {x val}) vec)))","problem":156,"user":"4e955b95535dbda64a6f6b33"},{"problem":156,"code":"(fn [default key-list]\n  (zipmap key-list (repeat default)))","user":"5c26460be4b07e362c2305bc"},{"problem":156,"code":"#(loop [items %2 acc {}]\n   (if (= 0 (count items)) acc\n     (recur (rest items) (assoc acc (first items) %1))))","user":"58a31ecee4b02bd94d917ee7"},{"problem":156,"code":"(fn [v ks] \n  (into {} (for [k ks] [k v])))","user":"5bea3177e4b0f319e2d7ec81"},{"problem":156,"code":"(fn [v ks]\n  (reduce conj {}\n    (map\n      (fn [k] [k v])\n      ks\n    )\n  )\n)","user":"53ca41dae4b00fb29b2212c8"},{"problem":156,"code":"(fn [v1 v2]\n  (reduce conj (map #(hash-map % v1) v2)))","user":"5486adf7e4b0e286459a11be"},{"problem":156,"code":"(fn [default-val s]\n  (reduce #(assoc % %2 default-val) {} s))","user":"5501a1e1e4b07d26eda61d75"},{"problem":156,"code":"(fn [default-val ks]\n  (reduce (fn [m k] (assoc m k default-val)) {} ks))","user":"54ef4a1de4b024c67c0cf882"},{"problem":156,"code":"#(reduce (fn [result val] (assoc result val %1)) {} %2)","user":"6079e2dfe4b0a637ed780366"},{"problem":156,"code":"(fn [v ll]\n  (zipmap ll (repeat v))\n  )","user":"552d9013e4b076ab5578f7ea"},{"code":"(fn [val coll]\n  ( reduce conj ( map #(hash-map % val) coll)))","problem":156,"user":"50e90813e4b033b0e80d11e7"},{"code":"(fn map-defaults\n  [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))","problem":156,"user":"536e5055e4b0fc7073fd6e6b"},{"problem":156,"code":"#(zipmap %2 (repeat %1))\n;#(apply hash-map (mapcat vector %2 (repeat %1)))","user":"57c1b32be4b05aa3c4741ca4"},{"problem":156,"code":"(fn [value coll] (into {} (map #(assoc {} % value) coll)))","user":"5686b0c0e4b0dcc4269f4056"},{"code":"(fn [x xs] (reduce \n  (fn [a b] (conj a {b x})) {} xs))","problem":156,"user":"4f1ae082535d64f603146470"},{"problem":156,"code":"(fn [x lst]\n  (into {} \n        (for [k lst]\n    \t\t{k x})))","user":"5cfbd3d1e4b0cc9c9158815b"},{"code":"(fn\n  [v s]\n  (apply merge (for [s1 s]\n    {s1 v})))","problem":156,"user":"52f3af46e4b05e3f0be25f14"},{"problem":156,"code":"(fn\n  [d m]\n  (reduce #(assoc %1 %2 d) {} m))","user":"5398d042e4b0b51d73faaf00"},{"code":"(fn mapdef [v s]\n (reduce #( assoc %1 %2 v ) {} s))","problem":156,"user":"5101192ae4b0bef64c30e266"},{"code":"(fn [constant v] (into {} (for [cordinate v :let [param constant]]\n     {cordinate param})))","problem":156,"user":"4f89bd1be4b033992c121c7d"},{"code":"(fn hey [x y] (if (empty? (rest y)) (hash-map (first y) x) (merge (hash-map (first y) x) (hey x (rest y)))))","problem":156,"user":"52e17e66e4b09f7907dd1423"},{"code":"(fn [default sequence]\n  (apply hash-map (concat (interpose default sequence) [default])))","problem":156,"user":"4f944f60e4b0dcca54ed6cc2"},{"code":"(fn [map-default map-keys] (zipmap map-keys (repeat map-default)))","problem":156,"user":"4e2c602b535deb9a81d77f06"},{"problem":156,"code":"(fn [x y] (apply hash-map (apply concat (map #(conj [] % x) y))))","user":"582c986ee4b051871117bf9b"},{"code":"(fn [d map]\n  (loop [r {} m map]\n    (if (empty? m) r\n        (recur (assoc r (first m) d) (rest m)))))","problem":156,"user":"51f40975e4b0fca5e8b4822e"},{"code":"#(reduce \n  (fn [res elem]\n    (assoc res elem %1))\n  (hash-map) %2)","problem":156,"user":"52c2106fe4b07a9af5792374"},{"problem":156,"code":"(fn [k, m] \n  (apply hash-map (mapcat #(list % k) m)))","user":"57d1a0e6e4b0bd073c20236d"},{"problem":156,"code":"#(into {} (map (fn [n] {n %1}) %2))","user":"58e6b788e4b056aecfd47cbd"},{"problem":156,"code":"(fn [const lst] (reduce #(assoc %1 %2 const) {} lst))","user":"595b5b6ee4b066ee0a44afd5"},{"problem":156,"code":"(fn [v ks]\n  (apply merge (map #(hash-map % v) ks))\n  )","user":"5d81b40ce4b0915913b1d379"},{"code":"(fn [d coll] (apply hash-map (interleave coll (repeat d))))","problem":156,"user":"510ee996e4b07438aa321462"},{"problem":156,"code":"(fn [d m]\n  (reduce\n   (fn [m k] (assoc m k d)) {} m))","user":"552e92d3e4b076ab5578f7f2"},{"problem":156,"code":"(fn [d xs]\n  (loop [m {} el (first xs) xs xs]\n    (if (nil? el) m (recur (assoc m el d) (first xs) (rest xs)))))","user":"5bc664a2e4b07a9b28b10093"},{"problem":156,"code":"(fn [deflt col] (zipmap col (repeat deflt)))","user":"5b8aa478e4b0c0b3ffbd49b2"},{"code":"(fn [value m_l]\n      (apply hash-map (apply vector (interleave m_l (take (count m_l) (cycle (vector value)))))))","problem":156,"user":"52a5a8ebe4b0c58976d9abed"},{"code":"(fn [dflt lst] (reduce (fn [result n] (assoc result n dflt)) {} lst))","problem":156,"user":"5256a1d4e4b0541d1855ba29"},{"code":"#(loop[x %2\n       y %1\n       result {}]\n   (if (empty? x)\n     result\n   \t (recur (rest x) y (conj result (hash-map (first x) y)))))","problem":156,"user":"53010e8ee4b0d8b024fd3716"},{"code":"#(into {} (for [v [%1] k %2] [k v]))","problem":156,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":156,"code":"#(reduce (fn [out, key] (assoc out key %1)) {} %2)","user":"60622c6ee4b03746e80ebf72"},{"code":"(fn [default-value keys]\n  (loop [acc (hash-map) k keys]\n    (cond (empty? k) acc\n          :else (recur (assoc acc (first k) default-value) (rest k)))))","problem":156,"user":"538e36c7e4b0b51d73faae81"},{"code":"(fn [defval keys] \n  (apply hash-map \n\t\t(reduce #(conj %1 %2 defval) \n\t\t\t    [] \n\t\t\t    keys)))","problem":156,"user":"4ed47f1e535d10e5ff6f52cd"},{"problem":156,"code":"(fn [default ks] \n  (reduce #(assoc %1 %2 default) {} ks)\n)","user":"5097cf53e4b00ad8bab4e976"},{"problem":156,"code":"(fn [default values] (into (sorted-map) \n                           (map  #(vector % default) values))\n  )","user":"570d8418e4b0b0fb43fd06de"},{"problem":156,"code":"(fn \n  [default-value keys]\n  (reduce #(assoc %1 %2 default-value) (hash-map) keys))","user":"5e47e1eee4b043cd24807a35"},{"code":"(fn [d l] (reduce (fn [x y] (conj x [y d])) {} l))","problem":156,"user":"4fb3fec7e4b081705acca2a7"},{"problem":156,"code":"(fn do-map [v ks]\n  (loop [s {}\n         v v \n         ks ks]\n    (if (empty? ks) s\n      (recur (assoc s (first ks) v)\n             v\n             (rest ks)))))","user":"591770dae4b09b4ee5954b9c"},{"problem":156,"code":"(fn [elem col]\n  (loop [result {}\n         [h & t] col]\n    (if (nil? h)\n      result\n      (recur (assoc result h elem) t))))","user":"53cd5226e4b00fb29b2212e0"},{"problem":156,"code":"(fn [v k]\n  (let [c (count k)\n         vals (take c (repeat v))]\n    (zipmap k vals)))","user":"5547432ee4b0a04f79299548"},{"problem":156,"code":"(fn [default keys] \n  \n  (apply hash-map (interleave keys (cycle (list default))))\n  \n)","user":"54a7d707e4b09f271ff37c9b"},{"problem":156,"code":"#(->> (interleave %2 (repeat %1)) (apply assoc {}))","user":"58c4b11ae4b021aa9917ed2c"},{"code":"(fn [v map] (apply merge (for [x map]\n                              (hash-map x v))))","problem":156,"user":"5300aa1de4b0d8b024fd3710"},{"problem":156,"code":"(fn [default coll] (apply hash-map (interleave coll (repeat default))))","user":"5fbb010ae4b03f550f448233"},{"problem":156,"code":"(fn [d l]\n  (apply\n   assoc\n   {}\n   (interleave l\n     (repeat (count l) d))))","user":"565131b3e4b0f29ec07d2e88"},{"problem":156,"code":"(fn [val coll]\n  (reduce (fn [acc key] (conj acc [key val] ) ) {} coll))","user":"5f5a62b4e4b0a0bc16850aa6"},{"problem":156,"code":"(fn [default keys]\n    (into {} (map #(assoc {} % default) keys)))","user":"548b7db8e4b0e286459a11fd"},{"problem":156,"code":"(fn [x, y] (into {} (map (fn [a] {a x}) y)))","user":"54d4ddd2e4b0a52adc2e2006"},{"problem":156,"code":"(fn [def-val keys-vec] \n  (zipmap keys-vec (repeat def-val)))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn  [valor con]\n  (loop [indice 0\n\t\t\tres {}\n          ]\n      (if (< indice (count con))\n\n\n\t\t(recur (inc indice) (assoc res (nth con indice) valor))\n\n\t\tres\n\n      )\n\n\n     )\n\n\n  )","problem":156,"user":"50255bafe4b0b0b8afb15aa8"},{"problem":156,"code":"(fn [a b]\n   (->> (map (fn [x] a) b)\n       (zipmap b))\n   )","user":"5a43347ee4b0447ef91cc603"},{"problem":156,"code":"(fn [def-val keys]\n  (reduce #(conj %1 [%2 def-val]) {} keys))","user":"57ca95f2e4b05aa3c4741d3b"},{"code":"(fn [d s] (zipmap s (repeat d)))","problem":156,"user":"4f244f26e4b0d66497709fea"},{"code":"#(into {} (for [i %2] [i %]))","problem":156,"user":"520b67b5e4b0b022ef140c83"},{"problem":156,"code":"(fn [x y]\n  (reduce #(conj {%2 x} %1) {} y))","user":"5fb2eac0e4b08cb800c85b2f"},{"problem":156,"code":"(fn [default-value key-collection] (zipmap key-collection (repeat default-value)))","user":"5f757c1ce4b02876ed9fd0aa"},{"problem":156,"code":"(fn [a b] (reduce merge (map #(hash-map % a)  b)))","user":"5ff82adae4b06df49cee14a4"},{"problem":156,"code":"(fn [default ks]\n  (apply (partial assoc {}) (interleave ks (map (fn [x] default) (range (count ks))))))","user":"5409f8eae4b0addc1aec66e6"},{"problem":156,"code":"(fn [defaultX mapX] (loop [result {} xs mapX] (if (= xs ()) result (recur (conj result {(first xs) defaultX}) (rest xs))  )))","user":"5776903ee4b0979f8965163b"},{"problem":156,"code":"(fn[v,ks](into {} (map #(conj [] % v) ks)))","user":"59f78761e4b0966464fe6af5"},{"problem":156,"code":"(fn[d c] (into {} (map #(vector % d) c)))","user":"54e345a1e4b024c67c0cf7db"},{"problem":156,"code":"(fn [r w] (reduce (fn [x e] (assoc x e r)) {} w))","user":"58ab572be4b0005cfeb1a72b"},{"problem":156,"code":"(fn default-map [dv s]\n     (zipmap s (repeat dv)))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":156,"code":"(fn [dflt ks]\n  (reduce\n   (fn [coll k] (conj coll {k dflt}))\n   {}\n   ks))","user":"5b500215e4b02d533a91bce2"},{"problem":156,"code":"(fn [x coll]\n  (loop [c coll m {}]\n    (if (empty? c)\n      m\n      (recur (rest c) (assoc m (first c) x)))))","user":"56c0aeb8e4b060a8e693e3af"},{"problem":156,"code":"(fn [val coll]\n  (into {} (map #(-> [% val]) coll)))","user":"5a1c3c11e4b0ff51aa4b323d"},{"problem":156,"code":";#(zipmap %2(repeat %1))\n(fn [x y] (zipmap y (repeat x)))","user":"5822e082e4b04b46fc4b0fa9"},{"code":"#(apply hash-map\n  (interleave %2 (repeat %1)))","problem":156,"user":"4fa5406fe4b081705acca1ac"},{"problem":156,"code":"(fn [d ks] (apply merge (map (fn [k] {k d}) ks)))","user":"559ede8fe4b0acc240e314e4"},{"problem":156,"code":"(fn [d m] \n\t(reduce #(conj %1 (hash-map %2 d)) {} m))","user":"5562f08ae4b0c656e3ff17df"},{"problem":156,"code":"#(reduce (fn [x y] (assoc x y %)) {} %2)","user":"54852ad0e4b0e286459a11a7"},{"code":"(fn [default keys]\n   (reduce #(assoc %1 %2 default) {} keys))","problem":156,"user":"52470d42e4b05ef8e38e6350"},{"problem":156,"code":"#(loop [lis %2 res {}]\n   (if (seq lis)\n     (recur (rest lis) (into res {(first lis) %1}))\n     res))","user":"55868660e4b059ccff29b1d4"},{"problem":156,"code":"#(reduce \n   (fn [r n]\n     (assoc r n %1)  \n     ) {} %2\n   )","user":"5d5b2678e4b06a698e928ee2"},{"problem":156,"code":"(fn map-def [val-def keys]\n  (if (empty? keys)\n    {}\n    (assoc (map-def val-def (rest keys)) (first keys) val-def)))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"(fn [d s] (apply merge (map (fn[el]{el d}) s)))","problem":156,"user":"513a49d3e4b067e25a345ec9"},{"problem":156,"code":"(fn [val coll]\n  (zipmap coll (repeat (count coll) val)))","user":"54d000c7e4b018d918be98d7"},{"code":"(fn [v ks] (into {} (map (fn [k] [k v]) ks)))","problem":156,"user":"5063fe48e4b075d771da6f9e"},{"problem":156,"code":"(fn [k vs]\n(into {} (map #(vector %1 %2) vs (repeat k))))","user":"55d3780ee4b0e31453f64a66"},{"code":"(fn [vl coll] (reduce (fn [mp ce] (assoc mp ce vl)) {} coll))","problem":156,"user":"512832dfe4b03a34742b4306"},{"problem":156,"code":"(fn [x coll]\n     (reduce (fn [coll item]\n               (assoc coll item x))\n             {}\n             coll))","user":"5e7b1ef4e4b085ba37836e10"},{"code":"(fn [d m] (apply conj (map #(hash-map % d) m)))","problem":156,"user":"5053de37e4b0b1b9d1860ea8"},{"problem":156,"code":"#(let [xs %2 y %1] (reduce merge {} (map (fn [x] {x y}) xs)))","user":"59e04fc7e4b08badc2a0c4e8"},{"problem":156,"code":"(fn [k m]\n  (apply hash-map (reduce #(conj %1 %2 k) [] m)))","user":"543823f1e4b032a45b869311"},{"code":"#(zipmap %2  (repeat %1))","problem":156,"user":"4e739e13535dff18050a9c76"},{"problem":156,"code":"(fn [default map-keys]\n  (into {} (for [k map-keys] [k default])))","user":"5f1c0447e4b0f565ad99825c"},{"problem":156,"code":"(fn [default keys] (apply hash-map (mapcat (fn [key] [key default]) keys)))","user":"580b216fe4b0a837a8b30d45"},{"problem":156,"code":"(fn [default ks]\n  (reduce #(merge %1 {%2 default}) {} ks))","user":"5f3abd21e4b004f08c61c52c"},{"problem":156,"code":"(fn [default ks]\n  (reduce (fn [acc k]\n            (assoc-in acc [k] default))\n          {}\n          ks))","user":"54508859e4b0e397800069a3"},{"problem":156,"code":"(fn [elt l]\n  (apply merge (map #(hash-map % elt) l)))","user":"54651faee4b01be26fd746d6"},{"problem":156,"code":"(fn [value keys] (loop [keylst keys result {}]\n                    (if (empty? keylst)\n                      result\n                      (recur (rest keylst) (assoc result (first keylst) value)))))","user":"606d75f5e4b069485764de13"},{"problem":156,"code":"(fn [x y] (reduce conj (map #(conj {} (hash-map % x)) y)))","user":"5e27a4e1e4b05b4b0151618e"},{"code":"(fn [default key_list] (apply merge (map #(hash-map % default) key_list)))","problem":156,"user":"52e32906e4b09f7907dd143d"},{"problem":156,"code":"#(reduce (fn [target k] (assoc target k %1)) {} %2)","user":"56b3146ae4b0982f16b37e0f"},{"code":"#(into {} (for [k %2] [k %1]))","problem":156,"user":"4fba0877e4b081705acca2dd"},{"code":"(fn [default-val the-keys] (reduce #(assoc %1 %2 default-val) {} the-keys))","problem":156,"user":"52dc55e2e4b09f7907dd13cd"},{"problem":156,"code":"(fn [default vector] (reduce #(conj %1 {%2 default}) {} vector))","user":"5830377ee4b051871117c004"},{"code":"(fn [default m] (reduce (fn [am k]\n                  (assoc am k default)) {} m))","problem":156,"user":"53756f8be4b06839e8705e14"},{"code":"(fn [default keys] (zipmap keys (take (count keys) (iterate (constantly default) default))))","problem":156,"user":"50d86fe2e4b01f0871336e67"},{"problem":156,"code":"(fn \n  [val list]\n  (reduce (fn \n            [acc curr] \n            (assoc acc curr val)) \n          {} list))","user":"565418cde4b0f9d632dd847c"},{"problem":156,"code":"(fn [x coll] (into {} (map #(assoc {} % x) coll)))","user":"567072fbe4b0a866af6896f3"},{"code":"#(reduce (fn z [coll v] (conj coll (vector v %))) {} %2)","problem":156,"user":"4f94d3a5e4b0dcca54ed6cc5"},{"problem":156,"code":"#(reduce (fn [x y] (conj x {y %1})) {} (reverse %2))","user":"570bb66de4b0b0fb43fd06c2"},{"problem":156,"code":"(fn [default map] (zipmap map (repeat default)))","user":"6045063fe4b02d28681c77b4"},{"code":"(fn [n coll]\n  (into {} (map (fn [x] [x n]) coll)))","problem":156,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":156,"code":"(fn [v keys] (reduce conj (map #(hash-map % v) keys)))","user":"540e97f9e4b0addc1aec671f"},{"code":"(fn [dv kc] \n    (apply array-map (interleave kc (repeat (count kc ) dv) )))","problem":156,"user":"5262efade4b03e8d9a4a709f"},{"problem":156,"code":"(fn [value keys] (apply hash-map (apply concat (map (partial conj (list value)) keys))))","user":"53ecd01fe4b0d648e757f4b9"},{"code":"(fn [d b]\n  (zipmap b (repeat d)))","problem":156,"user":"52cda397e4b07d0d72b2737a"},{"code":"(fn [value keys] (apply hash-map (interleave keys (repeat value))))","problem":156,"user":"50e111f7e4b084616e11c663"},{"code":"(fn [init keys]\n   \n   (reduce #(assoc %1 %2 init) {} keys)\n   )","problem":156,"user":"5256c8c7e4b0541d1855ba37"},{"problem":156,"code":"(fn mymap [d vec] (reduce #(conj %1 {%2 d}) {} vec))","user":"55ef12cfe4b0121d4835fdfc"},{"code":"(fn [default keyz]\n  (zipmap keyz (repeat (count keyz) default)))","problem":156,"user":"516f06dce4b06aac486e5b39"},{"code":"(fn mapdefault [n m]\n        (apply conj {} (map #(identity {% n}) m)))","problem":156,"user":"51a8f0c6e4b08d8ec191b821"},{"problem":156,"code":"(fn [default keys] (reduce #(into %1 {%2 default}) {} keys))","user":"5c6e8b57e4b0fca0c1622755"},{"code":"(fn [defval,keys] (reduce #(assoc %1 %2 defval) {} keys))","problem":156,"user":"5335cab9e4b0e30313ee6c70"},{"problem":156,"code":"(fn [d keys] (reduce #(assoc % %2 d) {} keys))","user":"58134ba8e4b0f478707a060b"},{"code":"(fn [d s]\r\n  (reduce #(assoc %1 %2 d) {} s))","problem":156,"user":"5069d8c5e4b01dc6af13f838"},{"problem":156,"code":"(fn [d xs] (into {} (map #(hash-map % d) xs)))","user":"540d7dd1e4b0addc1aec6713"},{"problem":156,"code":"(fn [value keys] \n  (reduce #(assoc %1 %2 value) \n          {}\n          keys))","user":"52aad30ce4b0c58976d9ac6d"},{"problem":156,"code":"(fn defvred4 [vred kljukci]\n  (->> kljukci\n       (map #(hash-map % vred))\n       (apply conj)\n   )\n)\n\n;;(fn defvred3 [vred kljuci]\n;;  (apply conj (map #(hash-map % vred) kljuci))\n;;)","user":"584d99c5e4b0b7285a6f4e42"},{"code":"(fn [def-val key-set]\n  (if (empty? key-set) (empty (hash-map))\n    (loop [ret-map (hash-map (first key-set) def-val)\n           left-keys (rest key-set)]\n      (if (empty? left-keys)\n        ret-map \n        (recur (assoc ret-map \n                 (first left-keys) \n                 def-val) \n               (rest left-keys))))))","problem":156,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":156,"code":"(fn [x k] (reduce #(assoc %1 %2 x) {} k))","user":"55495318e4b0a04f79299566"},{"code":"(fn [d keys]\n   (reduce (fn [m k]\n             (assoc m k d)) \n           {} keys))","problem":156,"user":"4ff505c8e4b0678c553fc364"},{"code":"(fn defmap [default \n              the-keys]\n    (loop [k the-keys\n           m {}]\n      (if (empty? k)\n        m\n        (recur (rest k)\n                (assoc m (first k) default))\n         )))","problem":156,"user":"522048b3e4b0e6c71e0c0c16"},{"problem":156,"code":"(fn [default-value key-seq]\n  (reduce (fn [map x] (conj map [x default-value])) {} key-seq))","user":"5e60a0cae4b0fd0acd158689"},{"code":"(fn [v s] (into {} (for [k s] {k v})))","problem":156,"user":"50366589e4b0fbe0a74d26c3"},{"problem":156,"code":"(fn [d kx]\n  (reduce \n    (fn [m v]\n      (assoc m v d))\n    {} kx))","user":"588053cae4b0f1effa3b7612"},{"problem":156,"code":"(fn [value key-lst]\n  (let [kv-pairs (map #(vector % value) key-lst)]\n    (reduce conj {} kv-pairs)))","user":"53fb5256e4b0de5c4184857f"},{"code":"(fn [dflt keys] (into {} (for [key keys] [key dflt])))","problem":156,"user":"521e8227e4b0dd19981ad082"},{"code":"(fn [d v] (zipmap v (repeat d)))","problem":156,"user":"5164d97ee4b003cf19fdde43"},{"problem":156,"code":"(fn l [x y] (if (seq y) (conj {(first y) x} (l x (rest y)))))","user":"5caf9a07e4b026601754b899"},{"code":"#(into {} (map vector %2 (repeat %)))","problem":156,"user":"4ef49c2c535dced4c769f238"},{"code":"#(loop\n  [d %1\n   vals %2\n   m {}]\n  (if (nil? vals)\n    m\n    (recur d (next vals) (assoc m (first vals) d))))","problem":156,"user":"4e814706535db62dc21a62bb"},{"problem":156,"code":"(fn [defval key-list]\n  (reduce #(assoc %1 %2 defval) {} key-list))","user":"5486e317e4b0e286459a11c0"},{"problem":156,"code":"(fn [d l] (into {} (mapv vec (partition 2 (interleave l (repeat d))))))","user":"4f6ba7bce4b07046d9f4efb0"},{"problem":156,"code":"(fn [default-value ks] \n  (apply hash-map \n         (interleave ks (repeat default-value))))","user":"4fc77f5ae4b0ee37620e1821"},{"problem":156,"code":"(fn [v k] (into {} (map #(conj [%] v) k)))","user":"514872f5e4b05514c84b7cbe"},{"problem":156,"code":"(fn [d ks] (zipmap ks (repeat (count ks) d)))","user":"4eea1a41535d93acb0a66899"},{"problem":156,"code":"(fn con [x ks]\n  (reduce #(assoc %1 %2 x) {} ks))","user":"51e24905e4b01e519814642e"},{"code":"(fn [value keyList]\n  (zipmap keyList (for [x (range(count keyList))] value)))","problem":156,"user":"52a144b0e4b04e0c58e87bd6"},{"problem":156,"code":"(fn [x1 x2] (into {} (map (fn [x] (conj [] x x1)) x2)))","user":"54411506e4b032a45b869369"},{"code":"(fn give-default [default coll]\n  (apply merge(map #(hash-map % default) coll)))","problem":156,"user":"5194675fe4b0142f60b4aedf"},{"problem":156,"code":"(fn [x data]\n   (zipmap data (repeat x)))","user":"5b86462de4b047b03b2037df"},{"problem":156,"code":"(fn [v k]\n  (loop [k k, res {}]\n    (if (seq k)\n      (recur (rest k) (assoc res (first k) v))\n      res)))","user":"5a7ae674e4b03baeef9276d5"},{"code":"(fn [n col]\n        (into {} (map (fn [x] [x n]) col)))","problem":156,"user":"4f7cbf4ae4b06e829148e1b7"},{"problem":156,"code":"(fn [default coll] \n  (reduce \n   (fn [final-map k] \n     (into final-map (hash-map k default))) \n   {} coll))","user":"59a8a4dce4b0bcf4e9a43af7"},{"code":"(fn [v L]\n  (loop [T L acc {}]\n    (if (empty? T) acc\n    (recur (rest T) (assoc acc (first T) v)))))","problem":156,"user":"50afa883e4b0c3f5ed5c29a2"},{"code":"(fn [default s]\n  (into {} (map (fn [k] [k default]) s)))","problem":156,"user":"50fc299ee4b0d10d794c19f2"},{"problem":156,"code":"(fn [x vec]\n  (into {} (map (fn [y] [y x]) vec)))","user":"54df838de4b024c67c0cf7ae"},{"code":"(fn [x keis] (loop [stuff keis result (hash-map)] (if (empty? stuff) result (recur (rest stuff) (conj result (hash-map (first stuff) x))))))","problem":156,"user":"5314318ee4b08068f379ed13"},{"code":"(fn [default keys]\n\t\t(zipmap keys (repeat (count keys) default)))","problem":156,"user":"51205867e4b0e88f5a20c40f"},{"problem":156,"code":"(fn [default in_list]\n    (reduce #(assoc %1 %2 default) {} in_list))","user":"5c17467fe4b01240ff5671df"},{"problem":156,"code":"(fn [value coll] (apply hash-map (interleave coll (repeat value))))","user":"54d412e2e4b0a52adc2e1ffe"},{"code":"(fn l [d k]\n  (if (empty? k)\n    nil\n    (merge {(first k) d} (l d (rest k)))))","problem":156,"user":"4f7fc9a1e4b033992c121bee"},{"code":"(fn [default keys]\n        (zipmap keys (repeat default)))","problem":156,"user":"4ed72e51535d10e5ff6f52ee"},{"code":"(fn foo [x ls] (zipmap ls (repeat (count ls) x)))","problem":156,"user":"4fe1597fe4b0dd6cd5ce3633"},{"code":"#(apply assoc {} (interleave %2 (repeat (count %2) %)))","problem":156,"user":"51a54fb4e4b0def3c5c586a3"},{"problem":156,"code":"(fn make-map [defval col]\n  (reduce (fn [r x]\n    (assoc r x defval)) {} col))","user":"5c01ba2ce4b0bdcf453d1656"},{"problem":156,"code":"(fn [d a] (zipmap a (repeat d)))","user":"5f686436e4b02876ed9fd03c"},{"code":"(fn [v s] (into {} (map #(vector % v) s) ))","problem":156,"user":"4ea84250535d7eef308072f5"},{"code":"(fn [d i]\n\t(let [reduce-map (fn[l v](assoc l v d))]\n\t\t(reduce reduce-map {} i)\n\t)\n)","problem":156,"user":"5143952fe4b0b4fb4ace5f38"},{"problem":156,"code":"(fn inter\n  ([df ys] (inter df ys {}))\n  ([df ys mp]\n   (if (empty? ys)\n     mp\n     (inter df (rest ys) (conj mp [(first ys) df])))))","user":"55355397e4b09218d5f44fae"},{"code":"(fn [v coll] (reduce merge (map #(assoc {} % v) coll)))","problem":156,"user":"5321008ee4b09d4e7a9b54aa"},{"code":"(fn [x xs] (zipmap xs (repeat (count xs) x)))","problem":156,"user":"52a8ca0fe4b0c58976d9ac36"},{"code":"(fn [v keys]\n  (loop [ks keys res {}]\n    (if (seq ks)\n        (recur (rest ks) (conj res [(first ks) v]))\n        res)))","problem":156,"user":"4fadbc3fe4b081705acca23f"},{"problem":156,"code":"(fn [def-val seq-key]\n    (into (hash-map) (map #(assoc {}  % def-val) seq-key)))","user":"56c60b36e4b05cc29241eead"},{"problem":156,"code":"(fn c [d s]\n  (reduce (fn [acc e] (into acc {e d})) {} s))","user":"5897dda4e4b00487982d52c8"},{"code":"(fn f[v,ks] (reduce #(assoc % %2 v) {} ks))","problem":156,"user":"4ec0c7ba535dfed6da9c6da4"},{"problem":156,"code":"(fn mapdefault [default pseq]\n  (into {} (map #(vector % default) pseq)))","user":"60606490e4b03746e80ebf67"},{"problem":156,"code":"(fn [val seq]\n      (loop [m {} s seq]\n        (if (empty? s) m\n            (recur (assoc m (first s) val) (rest s)))))","user":"52ade380e4b0c58976d9ac9b"},{"code":"(fn generateAmapWIthDefaultValue[defaultValue theKeys]\n  (merge (zipmap theKeys (repeat defaultValue)){})\n  )","problem":156,"user":"5306bceee4b02e821686979b"},{"problem":156,"code":"(fn [default data]\n  (zipmap data (repeat default)))","user":"58088dfde4b0a837a8b30d07"},{"code":"(fn [d m] (apply hash-map (mapcat #(list % d) m)))","problem":156,"user":"4fcebce4e4b03432b189f404"},{"problem":156,"code":"(fn [default map-keys] (into {}\n                             (map (fn [k] [k default] ) map-keys)))","user":"549a1234e4b0f3d1d8e70f68"},{"code":"#(loop [s {} t %2] \n   \t\t\t(if (empty? t)\n  \t\t\t\ts\n              (recur (assoc s (first t) %1) (rest t)))\n   )","problem":156,"user":"5105ed16e4b01150e115ebe2"},{"code":"(fn [%1 %2]\n   (let [list ((fn [%1 %2]\n                (for [key %2]\n                  (array-map key %1))\n                ) %1 %2)]\n     (conj (last list) (first (rest list)) (first list))))","problem":156,"user":"50ac3e4be4b071b89ef2622d"},{"code":"(fn jpop-map\n  [val keylst]\n  (zipmap keylst (take (count keylst) (repeat val))))","problem":156,"user":"534ff8a6e4b084c2834f4ad1"},{"code":"(fn [default coll]\n  (into {} (map \n    (fn [in] [in default]) coll)))","problem":156,"user":"50270618e4b01614d1633feb"},{"problem":156,"code":"(fn [default keys]\n  (reduce (fn [memo key]\n            (assoc memo key default)) {} keys))","user":"545bd22fe4b01be26fd7465a"},{"problem":156,"code":"(fn [default array]\n  (reduce (fn [m el] (conj m [el default])) {} array))","user":"59a72effe4b066c664927d94"},{"code":"(fn [v ks]\n  (apply hash-map (mapcat #(list % v) ks)))","problem":156,"user":"503ee85ce4b06c4e0e1fa26e"},{"code":"(fn dog [valu col] (into {} (map #(conj [%] valu ) col)))","problem":156,"user":"51427a8be4b0b50abeb46b37"},{"problem":156,"code":"(fn [default-value\n       keys]\n    (into\n      {}\n      (map\n        (fn [k]\n          [k default-value])\n        keys)))","user":"54dc84ede4b024c67c0cf784"},{"problem":156,"code":"#(reduce (fn [m v] (assoc m  v %1)) {} %2)","user":"513e8141e4b02b2a3d8235c1"},{"problem":156,"code":"(fn [d keys]\n  (into {} (map #(vector % d) keys)))","user":"59156f0be4b0163c97b36f3d"},{"problem":156,"code":"(fn\n  [v keys]\n  (reduce #(assoc %1 %2 v) {} keys))","user":"556e3b73e4b09a3098a52514"},{"code":"(fn [v coll]\n  (apply hash-map (interleave coll (take (count coll) (cycle [v])))))","problem":156,"user":"51e7abeae4b0a3e081b8cbee"},{"code":"#(into {}\n   (for [k %2]\n     {k %1}))","problem":156,"user":"508d8ab2e4b0f17d83ea26be"},{"problem":156,"code":"(fn [defvalue colkeys] (zipmap colkeys (take (count colkeys) (cycle [defvalue]))))","user":"55c07e3ee4b01b9910ae2a24"},{"problem":156,"code":"(fn [d s]\n\t(reduce #(assoc %1 %2 d) {} s)\n)","user":"5b7bc82ce4b047b03b203726"},{"problem":156,"code":"(fn [default lst]\n  (loop [res {} [l & ls] lst] (if l (recur (assoc res l default) ls) res)))","user":"5c51c930e4b0fb8c5ffd99ce"},{"code":"#(into {} (map vector %2 (for [x (range (count %2))] %1 )))","problem":156,"user":"51416934e4b03d51af0d04f0"},{"code":"#(zipmap %2 (vec (repeat (count %2) %1)))","problem":156,"user":"5012614ee4b02a085b99dc79"},{"code":"(fn [d l] (zipmap l (repeat (count l) d)))","problem":156,"user":"4eb171d7535d7eef30807340"},{"code":"(fn [default keys_arr] (reduce #(assoc %1 %2 default) {} keys_arr))","problem":156,"user":"50feb0e1e4b03cd852b4e851"},{"problem":156,"code":"(fn [d ks] (into (sorted-map) (map (fn [k] [k d]) ks)))","user":"58e5180ae4b056aecfd47c82"},{"code":"(fn [dv ks] \n  (into {} \n    (map #(vector %1 %2) ks (repeat dv))))","problem":156,"user":"4f584064e4b0a7574ea71846"},{"problem":156,"code":"(fn [def_value keys] (reduce (fn [acc key] (assoc acc key def_value)) {} keys) )","user":"5d40493ae4b05dd059a54364"},{"problem":156,"code":"(fn [defaultVal seqs] (loop [finalMap {} currentSeq seqs]\n                      (if(empty? currentSeq)\n                         finalMap\n                      (recur (assoc finalMap (first currentSeq) defaultVal) (rest currentSeq))\n                      )\n                      )\n)","user":"51fea7d7e4b0f1313d468a74"},{"problem":156,"code":"(fn [default ks] \n   (into {} (map #(hash-map % default) ks)))","user":"545bc5a8e4b01be26fd74658"},{"problem":156,"code":"(fn [d xs] (->> (map (fn [x] {x d}) xs) (into {})))","user":"5d91acb8e4b0915913b1d406"},{"problem":156,"code":"(fn [v sq] \n  (apply hash-map (interleave sq (repeat v))))","user":"574e7be7e4b02ea114799242"},{"code":"#(zipmap %2 [%1 %1 %1])","problem":156,"user":"5034b623e4b062bc5d7ae168"},{"code":"(fn [n col]\n  (zipmap col (take (count col) (repeat n)))\n   )","problem":156,"user":"52d42021e4b09f7907dd132a"},{"problem":156,"code":"(fn [e v] (loop [v v, m {}]\n            (if (seq v)\n              (recur (rest v) (assoc m (first v) e))\n              m)))","user":"54ca93abe4b057c6fda3a264"},{"problem":156,"code":"(fn [d a] (reduce #(assoc %1 %2 d) {} a))","user":"53a5bc3ae4b0ef122a8689c3"},{"code":"#(zipmap %2 (repeat 5 %1))","problem":156,"user":"510d9d61e4b078ea71921141"},{"code":"(fn [n s]\n  (apply hash-map (interleave  s (repeat n))))","problem":156,"user":"50d4909ce4b09cc622d65a6c"},{"code":"(fn [def-value key-seq] \t\n  (loop [res {} keys key-seq]\n    (if (empty? keys)\n      res\n      (recur\n       \t(assoc res (first keys) def-value)\n       \t(rest keys))\n      )))","problem":156,"user":"4e580746535d8a8b8723a28c"},{"problem":156,"code":"(fn [x lst] (zipmap lst (repeat (count lst) x)))","user":"5c748bf5e4b0fca0c16227cb"},{"problem":156,"code":"(fn construct-map [value keys]\n  (into (sorted-map) (for [key keys]\n                       [key value])))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":156,"code":"#(->> %2 (mapcat (fn [k] [k %1])) (apply hash-map))","user":"55f5c118e4b06e875b46ce8e"},{"code":"(fn [val keys] (zipmap keys (repeat val)))","problem":156,"user":"4f4e91a9e4b03ad3f0c10cca"},{"problem":156,"code":"(fn [d ks] (loop [d d ks ks o (hash-map)]\n             (if (empty? ks)\n               o\n               (recur d (rest ks) (assoc o (first ks) d)))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":156,"code":"#(reduce (fn [new-map arr]\n         (assoc new-map arr %1))\n        {}\n        %2)","user":"576d6266e4b0979f89651563"},{"problem":156,"code":"(fn [val keys]\n  (reduce \n   (fn [acc x] \n     (conj acc {x val})) {} keys))","user":"5bcee7d9e4b0e9689409ee22"},{"problem":156,"code":"(fn [default coll]\n  (into {} (map vector coll (repeat default))))","user":"50310713e4b05b7df5a0b84c"},{"problem":156,"code":"(fn map-default [default-value xs]\n  (into {} (map (fn [x] [x default-value]) xs)))","user":"56ac81ace4b03c432f187347"},{"problem":156,"code":"(fn [arg cont] (zipmap cont (repeat (count cont) arg)))","user":"5a527c16e4b05d388ecb6bff"},{"code":"(fn [d coll]\n  (zipmap coll \n          (repeat (count coll) d)))","problem":156,"user":"515896f2e4b059418b97f0a8"},{"problem":156,"code":"(fn [default values]\n  (reduce #(assoc %1 %2 default) {} values))","user":"5a0ef454e4b04bbd27e6d9fa"},{"code":"(fn [def-value key-seq]\n  (zipmap key-seq (repeat def-value)))","problem":156,"user":"529f9bf2e4b04e0c58e87bb4"},{"problem":156,"code":"(fn [arg seq]\n   (reduce #(assoc %1 %2 arg) {} seq)\n   )","user":"5d94a878e4b0d3f9b434ad29"},{"code":"(fn [i l] (apply conj {} (map #(vector % i) l)))","problem":156,"user":"507fbd77e4b089ade05efbd3"},{"problem":156,"code":"(fn [dval vkeys]\n  (loop [result {} vec vkeys]\n    (if (empty? vec)\n      result\n      (recur (assoc result (first vec) dval) (rest vec)))))","user":"5e12327ee4b099d064962fe5"},{"code":"(fn [default keyseq]\n  (apply merge (map #(assoc {} % default) keyseq)))","problem":156,"user":"52c3dffee4b0c2d177d620cb"},{"code":"(fn [default k] (reduce #(assoc %1 %2 default) {} k))","problem":156,"user":"5116e176e4b0063b4e3e16d7"},{"problem":156,"code":"(fn [d coll] (into {} (mapcat #(hash-map % d) coll)))","user":"5f281a83e4b033932238a64a"},{"problem":156,"code":"(fn [x coll]\n \t(reduce #(assoc % %2 x) {} coll))","user":"5755e66ee4b02ea1147992cf"},{"code":"(fn [n l]\n   (apply sorted-map (interleave\n                      l\n                      (repeat (count l) n))))","problem":156,"user":"52fac708e4b047fd55836fff"},{"problem":156,"code":"(fn default-map\n  [default coll]\n  (reduce\n   \t; (fn [reduced key] (assoc reduced key default))\n\t#(assoc %1 %2 default)\n\t{}\n\tcoll))","user":"57e37f90e4b0bfb2137f5a9c"},{"code":"(fn [d k] (reduce #(assoc %1 %2 d) {} k))","problem":156,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":156,"code":"(fn [d m]\n  (zipmap m (repeat d)))","user":"524b90fae4b09eba1c0223df"},{"problem":156,"code":"(fn [dflt seq] (loop [sq seq acc {}] (if (empty? sq) acc (recur  (rest sq) (assoc acc (first sq) dflt)))))","user":"57a22c85e4b0c3d858beb8f6"},{"problem":156,"code":"(fn [default my-keys]\n  (zipmap my-keys (repeat (count my-keys) default)))","user":"5c23d4a7e4b07e362c23059b"},{"problem":156,"code":"(fn create-map [default coll]\n  (loop [ret {} remaining coll]\n    (if (empty? remaining)\n      ret\n      (recur (assoc ret (first remaining) default) (rest remaining)))))","user":"4ff0e01fe4b0678c553fc328"},{"problem":156,"code":"(fn [a b] (into {} (map (fn [c] [c a]) b)))","user":"5530b82ae4b076ab5578f819"},{"problem":156,"code":"(fn [val keys]\n  (into {}\n        (map #(vector % val) keys)))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn [v vc] (zipmap vc (repeat (count vc) v)))","problem":156,"user":"531541a0e4b08068f379ed25"},{"problem":156,"code":"(fn [default keyset]\n  (reduce #(assoc %1 %2 default) {} keyset))","user":"5989ee61e4b021a7a535fed7"},{"code":"(fn [i c]\n  (apply array-map (interleave c (repeat i))))","problem":156,"user":"4e589bdc535d8a8b8723a295"},{"problem":156,"code":"(fn [x coll]\n  (loop [coll coll m {}]\n    (if (= coll '())\n      m\n      (recur (rest coll) (assoc m (first coll) x))\n      )))","user":"55a74d46e4b09e57187da2a3"},{"code":"(fn [v, ks] (zipmap ks (repeat v)))","problem":156,"user":"520612a7e4b0bf4f1882c81c"},{"problem":156,"code":"(fn myFun [value kys]\n  (reduce #(assoc %1 %2 value) {} kys))","user":"5a3b9092e4b001c08efc0cd7"},{"problem":156,"code":"(fn [default ks]\n  (let [key-vals (conj (vec (interpose default ks)) default)]\n  \t(apply hash-map key-vals)))","user":"550772cee4b021ccfedb96a8"},{"code":"#(apply hash-map (conj (vec (interpose %1 %2)) %1))","problem":156,"user":"538d8bb8e4b0b51d73faae71"},{"code":"(fn [d ks] (reduce #(assoc %1 %2 d) {} ks))","problem":156,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn \n  [x sqnc]\n  \t(reduce conj\n            (map #(hash-map % x) sqnc)))","problem":156,"user":"5116afdee4b0063b4e3e16d5"},{"problem":156,"code":"(fn [default ks] (into {} (map #(vector %1 default) ks)))","user":"5f0b8243e4b0f30dddfb5d45"},{"problem":156,"code":"(fn md[default keys]\n  (reduce (fn[memo key] (assoc memo key default)) {} keys))","user":"5980f91ae4b021a7a535fddd"},{"code":"(fn [i xs] (apply hash-map (reverse (cons i (interpose i xs)))))","problem":156,"user":"50478418e4b0371827a27bc3"},{"problem":156,"code":"(fn [default values]  \n  (into {} (for [v values]\n              {v default}\n              )))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"problem":156,"code":"(fn my-default [value ls]\n  (if (empty? ls)\n    '{}\n    (conj (my-default value (rest ls)) {(first ls) value})))","user":"53d87449e4b0e771c302546d"},{"problem":156,"code":"(fn [val keys]\n  (reduce conj (for [key keys]\n                 (hash-map key val))))","user":"595bc925e4b066ee0a44afe2"},{"code":"(fn [val keys] \n  (apply assoc {} (interleave keys (repeat val))))","problem":156,"user":"4fc5a693e4b0ee37620e17fc"},{"problem":156,"code":"(fn [v ks]\n  (into {}\n    (for [k ks]\n      {k v}\n    )\n  )\n)","user":"5943abb6e4b060784b3b792b"},{"problem":156,"code":"(fn [default the-keys] (apply hash-map (mapcat #(vector %1 default) the-keys)))","user":"5f1328dee4b091ba50b4dbb1"},{"problem":156,"code":"(fn defini[defi seqi]\n  (loop [elem seqi res {}]\n    (if (seq elem)\n    \t(recur (rest elem) (assoc res (first elem) defi))\n       res\n     )))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"#(apply hash-map (concat (interpose %1 %2) (vector %1)))","problem":156,"user":"4fb2f9b2e4b081705acca294"},{"problem":156,"code":"(fn [x ls]\n  (reduce (fn [acc y] (conj acc {y x})) {} ls))","user":"504e1c58e4b0f6ff3350c462"},{"code":"(fn [d xs] (zipmap xs (repeat d)))","problem":156,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":156,"code":"#(into {}  (for [item %2] (assoc {} item %1)))","user":"5505d137e4b086ebe8a79c8c"},{"problem":156,"code":"(fn [v xs] (apply hash-map (reverse (conj (interpose v xs) v))))","user":"54246d6de4b01498b1a71aec"},{"code":"(fn [x k]\n  (zipmap k (repeat (count k) x)))","problem":156,"user":"4ff743fde4b0678c553fc38d"},{"problem":156,"code":"(fn [dflt vec]\n    (into {} (map vector vec (take (count vec) (repeat dflt)))))","user":"608e5697e4b03bd49d9f36be"},{"code":"(fn [d s] (\n     zipmap s (repeat (count s) d)         \n          \n          ))","problem":156,"user":"53852e84e4b06839e8705efd"},{"problem":156,"code":"#(apply assoc {}\n        (interleave %2 (repeat %1)))","user":"556c70dae4b09a3098a524fd"},{"problem":156,"code":"(fn \n  [default keys]\n  (zipmap keys (repeat (count keys) default)))","user":"591f9a1fe4b09b4ee5954c4f"},{"code":"(fn cm [val keys]\n  (if (empty? (rest keys))\n    {(first keys) val}\n    (assoc (cm val (rest keys)) (first keys) val)))","problem":156,"user":"503e6047e4b06c4e0e1fa266"},{"problem":156,"code":"(fn [default keys] (reduce (fn [result item] (assoc result item default)) {} keys))","user":"5b1f84b3e4b03cfeda66ed1f"},{"code":"(fn [v k]\n  (into {} (map #(assoc {} % v) k)))","problem":156,"user":"50b0cffae4b009df37c708c5"},{"code":";Nice solution:\n#(zipmap %2 (repeat %1))\n\n\n#_(into {} (map vector %2 (repeat %1)))","problem":156,"user":"519b2570e4b0ac1b7dced6a3"},{"problem":156,"code":"(fn foo [x y] (if (empty? y) {} (conj (foo x (rest y)) {(first y) x}) ))","user":"57f9b25fe4b0d3187e90094b"},{"problem":156,"code":"(fn [default-value key-seq]\n  (loop [m {}\n         s key-seq]\n    (if (empty? s)\n      m\n      (recur (assoc m (first s) default-value) (rest s)))))","user":"53bab6fae4b047364c0444fb"},{"problem":156,"code":"(fn [default_val sequence_keys]\n  (loop [value1 default_val\n         keys1 sequence_keys\n         map1 {}]\n    (if (= (seq keys1) nil)\n      map1\n      (recur value1 (rest keys1) (conj map1 [(first keys1) value1])))))","user":"5939e726e4b069cdc2982b45"},{"problem":156,"code":"(fn [d coll]\n  (into {} (map #(hash-map % d) coll))\n  )","user":"570d0548e4b0b0fb43fd06d2"},{"problem":156,"code":"(fn [default-val coll]\n  (zipmap coll (repeat default-val)))","user":"54b17a49e4b09f271ff37d1e"},{"problem":156,"code":"(fn [valor claves]\n  (let [mapa (fn [valor clave] {clave valor})]\n      (reduce #(conj (mapa valor %2) %1) {} claves)))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":156,"code":"(fn [val set]  (apply hash-map(conj ( into [] (interpose val set)) val)))","user":"607f3336e4b05857a65e7747"},{"problem":156,"code":"#(reduce (fn \n                [value elem]\n                (conj value\n                        {elem %1}))\n              {}\n              %2)","user":"57343747e4b0cd1946bd1006"},{"problem":156,"code":"(fn [theValue theKeys]\n  (reduce \n    (fn [results coll]\n      (assoc results coll theValue)\n    )\n    {} theKeys\n  )\n)","user":"57f904c5e4b0d3187e900936"},{"problem":156,"code":"(fn [a b] (apply array-map (apply concat (for [k b] [k a]))))","user":"53beacf9e4b0d9a98559a6e3"},{"problem":156,"code":"(fn [dv col] (reduce merge (map (fn [key] (assoc {} key dv)) col)))","user":"5f275800e4b0857314092c93"},{"problem":156,"code":"(fn [value ks] (zipmap ks (repeat value)))","user":"59aeed59e4b0e1f4e384c8ab"},{"problem":156,"code":"(fn defval [v ks]\n  (if (empty? ks)\n    {}\n    (assoc (defval v (rest ks)) (first ks) v)))","user":"586c5a34e4b01531a375e97a"},{"problem":156,"code":"(fn [defv k] (reduce #(assoc %1 %2 defv) {} k ))","user":"4fc57c4ce4b0ee37620e17f6"},{"code":"(fn [d a]\n  (zipmap a (repeat (count a) d)))","problem":156,"user":"50a173e4e4b08df8156e9e68"},{"problem":156,"code":"(fn [v s] (apply merge ((fn [v s] (map (fn [k] (hash-map k v)) s)) v s)))","user":"564f128de4b0284900eef6a4"},{"problem":156,"code":"(fn [v ks]\n    (apply conj {}\n           (map vector ks (repeat v))))","user":"52281e1ee4b0186687e23a69"},{"code":"(fn create-map-with-default-values [default keylist] \n  (reduce #(assoc % %2 default) {} keylist\n   )   \n)","problem":156,"user":"5255324be4b0541d1855b9d0"},{"problem":156,"code":"(fn [v ks] \n  (reduce (fn [sum k] (conj {k v} sum)) {} ks) \n  )","user":"553f70cae4b0a04f792994f8"},{"problem":156,"code":"(fn [default hmap]\n  (apply hash-map (interleave hmap (repeat (count hmap) default)))\n  )","user":"60752ef6e4b069485764de55"},{"code":"(fn [d l]\n    (loop [res {}\n           l   l]\n      (if (seq l)\n        (recur (assoc res (first l) d) (rest l))\n        res)))","problem":156,"user":"5374cbf4e4b06d7f452d9e29"},{"problem":156,"code":"(fn [default-value keys]\n  (apply hash-map (mapcat (fn [e] [e default-value]) keys))\n  )","user":"5a778224e4b013a48d399761"},{"code":"(fn [default s]\n  (reduce #(conj %1 {%2 default}) {} s))","problem":156,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":156,"code":"(fn [default new-keys]\n  (into {} (map #(identity [% default]) new-keys)))","user":"565ddeb9e4b068f2fe63dc2c"},{"code":"(fn [x y] (into {} (map vector y (repeat x))))","problem":156,"user":"4fc4541ae4b081705acca348"},{"problem":156,"code":"(fn  [defa mp]\n  (into {}\n    (for [ x [defa]\n         y mp ]\n    {y x})))","user":"51af3ed1e4b0c53cf2e68a4b"},{"problem":156,"code":"(fn[d ks] (->> ks\n               (map (fn [k] [k d]))\n               (apply concat)\n               (apply hash-map)))","user":"54b10d08e4b09f271ff37d18"},{"problem":156,"code":"(fn [v ks]\n   (loop [cks ks m {}]\n     (if (empty? cks)\n       m\n       (let [[k & remaining] cks]\n         (recur remaining (assoc m k v))\n         )\n       )\n     )\n  )","user":"57f55632e4b0903ccab3dcf1"},{"problem":156,"code":"#(into {} (vec (for [x (range (count %2))] [(nth %2 x) %1])))","user":"5a3c5c54e4b001c08efc0ce3"},{"problem":156,"code":"#(last (let [m (atom {})]\n        (for [ [x y] (partition 2 (conj (vec (interpose %1 %2)) %1))] (swap! m assoc x y) )))","user":"54e51c7be4b024c67c0cf7f7"},{"problem":156,"code":"(fn [value keys] (into {} (map #(vector % value) keys)))","user":"55679906e4b0c656e3ff1845"},{"code":"(fn [v keys]\n  (reduce #(conj %1 [%2 v]) {} keys))","problem":156,"user":"524cdd51e4b0752c4cb68ccc"},{"problem":156,"code":"(fn [default_value seq] (loop [keys seq newmap {}] (if (empty? keys) newmap (recur (rest keys) (assoc newmap (first keys) default_value)))))","user":"53b952eee4b047364c0444e6"},{"code":"(fn [v ks]\n  (apply hash-map (interleave ks (repeat v))))","problem":156,"user":"5027fc0ce4b01614d1633ff2"},{"problem":156,"code":"(fn [value collection]\n  (into {} (map #(conj {} {% value}) collection)))","user":"5470cb10e4b094393f72dd65"},{"code":"#(apply hash-map (apply concat(map list %2 (repeat %1))))","problem":156,"user":"5307e4ece4b02e82168697a9"},{"problem":156,"code":"(fn [default keys]\n    (into {} (map #(vector % default) keys)))","user":"56eaad95e4b04a395b9a040f"},{"problem":156,"code":"(fn [v a-s]\n\t(loop [a-ss a-s\n\t\ta-m {}]\n\t\t(if (empty? a-ss)\n\t\t\ta-m\n\t\t\t(recur (rest a-ss)\n\t\t\t\t(assoc a-m (first a-ss) v)))))","user":"573eb8f2e4b05c31a32c082f"},{"problem":156,"code":"(fn [dv sk] (into (hash-map) (for [x sk y [dv]] [x y])))","user":"4fffa422e4b0678c553fc404"},{"problem":156,"code":"(fn [de se] (zipmap se (repeat de)))","user":"54e18de4e4b024c67c0cf7c4"},{"problem":156,"code":"(fn [default list] (into {} (for [x list] {x default})))","user":"57aa103be4b0b8559636fc64"},{"problem":156,"code":"(fn f [n s] (into {} (map (fn [entry] {entry n}) s)))","user":"5a663a32e4b0512ff01cd9c2"},{"problem":156,"code":";#(apply hash-map (interleave %2 (repeat %1)))\n\n#(zipmap %2 (repeat %1))","user":"57ee432de4b0bfb2137f5bb2"},{"problem":156,"code":"(fn [defv ks]\n\t(reduce \n     \t(fn [m k] (assoc m k defv)) \n     \t{} \n     \tks)\n  )","user":"5b205959e4b03cfeda66ed33"},{"problem":156,"code":"#(reduce merge (map hash-map %2 (repeat %1)))","user":"56c560ede4b05cc29241eea6"},{"code":"(fn test [default keys]\n  (zipmap keys (repeat default))\n)","problem":156,"user":"4edf95a8535d10e5ff6f5342"},{"problem":156,"code":"(fn [n s] (reduce (fn [c n'] (assoc c n' n)) {} s))","user":"5761a772e4b0994c1922fb95"},{"problem":156,"code":"(fn [x a]\n  (zipmap a (repeat (count a) x)))","user":"5eb84ef4e4b00a66d4a95244"},{"problem":156,"code":"(fn [x y]\n  (into {} (map (fn [xx yy] [xx yy]) y (repeat (count y) x)))\n )","user":"5d62da51e4b0c9e5857d5020"},{"code":"#(apply assoc {}\n           (interleave %2\n\t                     (repeat %1)))","problem":156,"user":"4eda05c1535d10e5ff6f5309"},{"code":"(fn [default keylist]\n  (reduce #(assoc %1 %2 default) {} keylist))","problem":156,"user":"4f9aa75ee4b0dcca54ed6d0d"},{"problem":156,"code":"(fn\n  [default key-coll]\n  (into {} (map #(vector % default) key-coll)))","user":"5b26a74ee4b063e2438bcc37"},{"code":"(fn [v ks] (apply hash-map (interleave ks (repeat v))))","problem":156,"user":"4e50b67b535dc968683fc4ed"},{"problem":156,"code":";(fn\n  ;[elem v1]\n  ;(loop [ans {} v v1]\n  ;  (if (empty? v)\n  ;    ans\n  ;    (recur (assoc ans (first v) elem) (rest v))))\n  ;)\n  (fn [value keys] (reduce #(assoc %1 %2 value) {} keys))","user":"60617afee4b03746e80ebf6c"},{"problem":156,"code":"(fn [v xs]\n  (apply hash-map (mapcat #(vector % v) xs)))","user":"551ecb76e4b08d5046aa8a4c"},{"problem":156,"code":"(fn [idx arr] (zipmap arr (repeat idx)))","user":"553b90c8e4b09218d5f45005"},{"problem":156,"code":"(fn [d, c] (into {} (map #(sorted-map % d) c)))","user":"5f8e865fe4b0715f5002d76d"},{"code":"(fn[e col]\n  (reduce #(assoc %1 %2 e){} col)\n)","problem":156,"user":"527c0ccae4b03e8d9a4a75ae"},{"problem":156,"code":"(fn [a l] (zipmap l (repeat a)))","user":"59258aa7e4b072a2710fce74"},{"code":"(fn [d ks] (into {} (for [k ks] {k d})))","problem":156,"user":"4e3ac1b2535deb9a81d77f4c"},{"code":"(fn [d a]\r\n  (loop [mya (seq a) result {}]\r\n\t\t(if(empty? mya)  result\t\r\n\t\t\t(recur (rest mya) (assoc result (first mya) d) )\r\n\t\t)\r\n\t)\r\n)","problem":156,"user":"50b25f2ce4b03ea88043355f"},{"problem":156,"code":"(fn map-defaults [default lst]\n  (let [x {}]\n  \t(into (sorted-map) (map #(assoc x % default) lst))\n  )\n)","user":"569e3175e4b0542e1f8d1484"},{"code":"(fn [d lst]\n  (into {} (map (fn [q] [q d]) lst)))","problem":156,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn [defkey keyseq]\n  (into {}\n        (map\n          #(hash-map % defkey) keyseq)))","problem":156,"user":"502925b9e4b0b6c928ad6201"},{"code":"(fn def-map [dt ks] (conj (if (> (count ks) 1) (def-map dt (rest ks)) {}) {(first ks) dt}))","problem":156,"user":"500f336be4b03ec779321687"},{"problem":156,"code":"(fn [d v]\n  (reduce (fn [m e] (assoc m e d)) {} v))","user":"5530b827e4b076ab5578f818"},{"code":"(fn \n  [default values] \n  (apply hash-map \n    (interleave values (repeat default))))","problem":156,"user":"4dbde85b535d020aff1edf52"},{"problem":156,"code":"(fn [default-value seq-of-keys]\n  (apply hash-map (interleave seq-of-keys (repeat default-value))))","user":"5d6eaa58e4b04d129b00f2cd"},{"problem":156,"code":"(fn [n xs]\n  (loop [m {} d n ys xs]\n    (if (empty? ys)\n      m\n      (recur (conj m [(first ys) d]) d (rest ys)))))","user":"546176e7e4b01be26fd746a2"},{"problem":156,"code":"(fn [dflt coll] (apply hash-map (mapcat #(list % dflt) coll)))","user":"54bd3aefe4b0ed20f4ff6edb"},{"problem":156,"code":"(fn [v ks]\n  (loop[res {} \n        ks ks]\n  (if (empty? ks)\n  \tres\n  \t(recur (assoc res (first ks) v) (rest ks)\n  \n  \n  ))))","user":"5ea7b04de4b00a66d4a951b6"},{"problem":156,"code":"(fn [defaultval coll] (zipmap coll (repeat defaultval)))","user":"5cb4e764e4b026601754b929"},{"problem":156,"code":"(fn [v xs] (reduce #(assoc %1 %2 v) (sorted-map) xs))","user":"5bc20634e4b07a9b28b10022"},{"problem":156,"code":"(fn [v d] (reduce (fn [a e] (assoc a e v)) {} d))","user":"57efb389e4b0bfb2137f5bdb"},{"code":"(fn [v, kys]\n  (loop [ks kys\n         result {}]\n    (if (empty? ks)\n      result\n      (recur (rest ks) (assoc result (first ks) v)))))","problem":156,"user":"5136f659e4b04059df19f2fd"},{"problem":156,"code":"(\n fn [value h] (\n           reduce \n           (fn [acc v] (conj acc {v value}))           \n           {}\n               h\n           )\n  )","user":"57762befe4b0979f8965162f"},{"code":"(fn [v ks] (apply hash-map (mapcat #(list % v) ks)))","problem":156,"user":"52be58d7e4b07a9af579231d"},{"problem":156,"code":"(fn\n  [d xs]\n  (reduce (fn [acc x](assoc acc x d)) {} xs))","user":"5e1c24f4e4b0dc959400852d"},{"problem":156,"code":"(fn[x y](into (sorted-map)(apply merge (map #(hash-map % x) y))))","user":"54f15cb8e4b024c67c0cf8b1"},{"code":"#(into {} (map (fn [x] (assoc {} x %1)) %2))","problem":156,"user":"51430fb2e4b0c172af7558ce"},{"problem":156,"code":"(fn [v c]\n  (loop [a c\n         r {}]\n    (if (empty? a)\n      r\n      (recur (rest a) (assoc r (first a) v)))))","user":"5ab9fe71e4b073f17744269d"},{"code":"#(apply hash-map (mapcat (fn [x] (list x %)) %2))","problem":156,"user":"50996a38e4b0cae2931060b3"},{"code":"#(apply conj {} (map (fn [e] [e %1]) %2))","problem":156,"user":"5315a4f0e4b08068f379ed2e"},{"problem":156,"code":"(fn [def_val key_vect] \n          (reduce\n            (fn [result k] (assoc result k def_val)) {} key_vect ) )","user":"57167214e4b07c98581c3af8"},{"problem":156,"code":"#( zipmap %2 (take (count %2) (repeat %1)) )","user":"5cf7c1b0e4b0b71b1d808a72"},{"code":"#(into {} (for [y %2]\n               [y %]))","problem":156,"user":"52d838bee4b09f7907dd138b"},{"problem":156,"code":"(fn [val seq]\n  (reduce (fn [acc x] (assoc acc x val)) {} seq)\n)","user":"5822b578e4b04b46fc4b0fa4"},{"problem":156,"code":"(fn [default-value list-to-map]\n  (loop [l list-to-map\n         accu '{}]\n    (if (empty? l)\n      accu\n      (recur (rest l) (assoc accu (first l) default-value)))))","user":"54638c8fe4b01be26fd746c2"},{"code":"(fn [default coll]\n    (apply merge (map (fn [x] {x default}) coll)))","problem":156,"user":"4f72f71be4b07046d9f4f03d"},{"problem":156,"code":"(fn [value coll] (reduce (fn [map key] (assoc map key value)) {} coll))","user":"56a0d7e5e4b0542e1f8d14a8"},{"problem":156,"code":"(fn [default kys] (reduce merge (map #(hash-map % default) kys)))","user":"51bc3e7fe4b0fe3ecfb46455"},{"code":"(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))","problem":156,"user":"4fac10e8e4b081705acca222"},{"problem":156,"code":"(fn [val keys]\n  (let [keysAmount (count keys)] \n    ((fn [res]\n      (if \n      (= (count res) keysAmount)\n      res\n      (recur (assoc res (get keys (count res)) val))\n       )\n       ) {})\n    )\n  )","user":"58bef424e4b021aa9917eccb"},{"code":"#(loop [mp (hash-map)\n         i 0]\n    (if (or (nil? %2) (>= i (count %2)))\n      mp\n      (recur (assoc mp (nth %2 i) %1) (inc i)))\n    )","problem":156,"user":"511e3454e4b028ee16def195"},{"problem":156,"code":"(fn [z, i] (into {} (map #(vector %1 %2) i (take (count i) (repeat z)))))","user":"5c21a531e4b07e362c230582"},{"code":"(fn [x seq]\n  (reduce #(assoc %1 %2 x) {} seq))","problem":156,"user":"4f3ca5a6e4b0e243712b1f53"},{"problem":156,"code":"(fn [a b]\n  (reduce (fn [final part]\n          (into final {part a})) {} b))","user":"5fb9b704e4b03f550f44822b"},{"problem":156,"code":"(fn [x ks] (into {} (map (fn [k] [k x]) ks)))","user":"55f5b657e4b06e875b46ce8c"},{"problem":156,"code":"(fn [defval init-keys]\n  (loop [res  {}, key init-keys] ;;set 2 arguments\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))","user":"59cd13d5e4b0ef0a1e9b5b32"},{"problem":156,"code":"(fn [value keys] (into (hash-map) (for [k keys] [k value])))","user":"54f4ab86e4b0f2f3c5226e84"},{"code":"(fn [ values kes ]\n  (\n    apply merge( map #(hash-map % values) kes)\n  ))","problem":156,"user":"502aac6ae4b0614b52996118"},{"code":"(fn a ([b c] (a b c {}))\n             ([b c d]\n               (if-not (empty? c) (recur b (rest c) (assoc d (first c) b))\n                                  d)))","problem":156,"user":"51eadb98e4b0f1f103a0d153"},{"code":"(fn [i v] (reduce #(assoc % %2 i) {} v))","problem":156,"user":"505d4b21e4b0e6aca564be07"},{"problem":156,"code":"(fn[s v ke] (if (empty? ke) s (recur (assoc s (first ke) v) v (rest ke) )) ) {}","user":"561cad18e4b064ca9f4b169d"},{"problem":156,"code":"(fn f\n  [default keyss]\n  (zipmap keyss (repeat (count keyss) default)))","user":"56df62eee4b0ca2494a095f0"},{"code":"(fn [d, ks]\n  (->> ks (reduce (fn [m, k] (assoc m k d)) {})))","problem":156,"user":"522a1248e4b0590a43906cf3"},{"code":"(fn [default v] (reduce #(conj % [%2 default]) {} v))","problem":156,"user":"504457c0e4b01f6c9a8b2360"},{"problem":156,"code":"#(reduce (fn [nm k] (assoc nm k %1)) {} %2)","user":"55c9bc1ee4b0e31453f649f1"},{"problem":156,"code":"(fn [defval keys]\n       (into (sorted-map) \n         (map #(hash-map % defval) keys)))","user":"5841872be4b089d5ab817e06"},{"problem":156,"code":"(fn [vVal vKeys]\n(zipmap vKeys (repeat vVal))\n       )","user":"57309d7ee4b0cd1946bd0fb2"},{"problem":156,"code":"#(zipmap %2 (vec (repeat 5 %)))","user":"56d1afd9e4b0ea9b8538f791"},{"code":"#(apply assoc {} (interleave %2 (repeat %)))","problem":156,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"problem":156,"code":"(fn [d v]\n  (zipmap v (repeat d)))","user":"4ede8e1d535d10e5ff6f5339"},{"problem":156,"code":"(fn [v\n     xs]\n  (reduce #(assoc %1 %2 v) {} xs))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":156,"code":"(fn create-map [default-key s]\n  (reduce (fn [acc x] (assoc acc x default-key)) {} s))","user":"5e860270e4b09a7a73c8bbdb"},{"problem":156,"code":"(fn [val keys]\n   (zipmap keys (repeat val)))","user":"59e48db0e4b08badc2a0c53e"},{"problem":156,"code":"#(zipmap %2 (take (count %2) (iterate identity %1)))","user":"58bbcbc8e4b0888cdc949d00"},{"code":"#(into {} (map (fn [k] [k %1]) %2))","problem":156,"user":"4fe9de74e4b0547ebccb2475"},{"problem":156,"code":"#(reduce (fn [buf v] (merge buf {v %1})) {} %2)","user":"560039cce4b04bb52996e162"},{"problem":156,"code":"(fn [dflt seq] (reduce #(conj %1 {%2 dflt}) {} seq))","user":"554edb85e4b00713264bd99a"},{"problem":156,"code":";#(apply hash-map (for [e %2] (vector e %1)))\n#(zipmap %2 (for [i (range (count %2))] %1))","user":"587294f0e4b01531a375ea1e"},{"code":"#(into {} (map (fn [i] {i %1}) %2))","problem":156,"user":"4f0d5338535d0136e6c22316"},{"problem":156,"code":"(fn [n s] (into {} (for [i s] [i n])))","user":"53f7820be4b0de5c41848560"},{"problem":156,"code":"#(into {} (map (fn [key] (hash-map key %1)) %2))","user":"5ffe6082e4b074f607df6600"},{"code":"(fn create-map[default, keys]\n  (zipmap keys (repeat (count keys) default)))","problem":156,"user":"4e723bcb535d5021c1a8965c"},{"problem":156,"code":"(fn [d, v]\n   (into {} (map #(assoc {} % d) v)))","user":"6022429be4b0d5df2af22200"},{"code":"(fn [v ks] (into {} (map vector ks (repeat v))))","problem":156,"user":"4dad8c92c9a9d6ed1699dc57"},{"problem":156,"code":"(fn [seqvalue seqkeys] \n  (zipmap seqkeys (repeat seqvalue)))","user":"57a99d3fe4b0a96607956231"},{"problem":156,"code":"#(into {}( for[i %2] ( hash-map i %1)))","user":"57016724e4b08d47c97781d6"},{"code":"(fn [v xs]\n  (into {} (for [x xs] [x v])))","problem":156,"user":"526f2e16e4b03e8d9a4a7353"},{"problem":156,"code":"(fn [value kes]\n  (reduce #(assoc %1 %2 value) {} kes))","user":"54903056e4b0b312c081ff2e"},{"code":"(fn [df ar]\n   (into {}\n(for [s (seq ar)]\n(assoc {} s df)\n))\n)","problem":156,"user":"505c6432e4b032b709c81378"},{"code":"(fn [default-value initial-map] (reduce merge (map (fn [x] (hash-map x default-value)) initial-map)))","problem":156,"user":"5137fb22e4b0a5db03d727d3"},{"code":"(fn [v coll]\n  (apply assoc {} (interleave coll (repeat v))))","problem":156,"user":"5007f751e4b0b17c647f522b"},{"problem":156,"code":"(fn [d-val ks] (reduce (fn [r k] (conj r [k d-val])) {} ks))","user":"55216aa5e4b0882d96d09192"},{"code":"(fn [v ks] (zipmap ks (repeat v)))","problem":156,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn [default xs]\n  (reduce\n    (fn [m v]\n      (assoc m v default)\n    )\n    {}\n    xs\n  )\n)","problem":156,"user":"526e84b5e4b03e8d9a4a732d"},{"problem":156,"code":"#(zipmap %2 (cycle (list %)))","user":"529c722de4b04e0c58e87b63"},{"code":"(fn [z w] (reduce (fn [x y] (conj {y z} x)) {} w))","problem":156,"user":"50a2e3fbe4b029e8bace3629"},{"problem":156,"code":"(fn [val keys](\n               loop[res {}, val val, keys keys](\n                                              if (empty? keys) res \n                                              (recur (assoc res (first keys) val) val (rest keys)))))","user":"54ecd7dde4b024c67c0cf85c"},{"code":"(fn [d s] (let [m {}] (reduce #(assoc %1 %2 d) m s)))","problem":156,"user":"507e68abe4b085af06e3afd2"},{"problem":156,"code":"(fn [v coll]\n  (reduce #(assoc %1 %2 v)\n          {}\n          coll))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":156,"code":"(fn [default keys]\n      (zipmap keys (repeat default)))","user":"605a876be4b000d535e6f53c"},{"problem":156,"code":"(fn [v ks]\n  (let [make-vals (fn [len value]\n                    (loop [output []]\n                      (if (>= (count output) len)\n                        output\n                        (recur (conj output value)))))]\n    (zipmap ks (make-vals (count ks) v))))","user":"57a310b4e4b0c3d858beb90c"},{"problem":156,"code":"(fn [default keys] (into {} (for [k keys] {k default})))","user":"5e546e20e4b027a2e10ac0eb"},{"problem":156,"code":"(fn [v ks] (reduce conj {} (map #(hash-map % v) ks)))","user":"59b2b093e4b0e1f4e384c8fd"},{"code":"#(apply conj ( for [ x %2 ] { x % } ) )","problem":156,"user":"51aa4eede4b04e3dc0c27b25"},{"code":"(fn [d k] (into {} (map (fn [e] {e d}) k)))","problem":156,"user":"52e814fee4b09f7907dd1493"},{"problem":156,"code":"(fn [d ks] \n  (into {} (map #(vector % d) ks)))","user":"53161a56e4b08068f379ed3e"},{"code":"#(zipmap %2 (iterate (fn [x] x) %1))","problem":156,"user":"5248c4c7e4b05ef8e38e63e8"},{"problem":156,"code":"#(apply hash-map  (interleave %2 (repeat %)))","user":"5507cfd3e4b021ccfedb96ad"},{"problem":156,"code":"#(reduce (fn [acc el] (assoc acc el %1 ) ) {} %2)","user":"5e1a3989e4b0dc9594008511"},{"problem":156,"code":"(fn [default s] \n  (reduce #(assoc %1 %2 default) {} s))","user":"563ddefee4b0bfe05bf11857"},{"problem":156,"code":"(fn [default-value the-map]\n  (reduce #(assoc %1 %2 default-value) {} the-map))","user":"57a4f5cae4b0a966079561f0"},{"problem":156,"code":"(fn mf\n  ([d l]\n   (mf d (rest l) (conj {} [(first l) d])))\n  ([d l m]\n   (if (seq l)\n     (mf d (rest l) (conj m [(first l) d]))\n     m)))","user":"57237a02e4b0c5bde472c0e5"},{"problem":156,"code":"(fn my-merge [x coll]\n  (reduce conj {} (reverse (map vector coll (repeat x)))))","user":"53b7aa6ce4b047364c0444d1"},{"problem":156,"code":"(fn [value seqq] (into {} (map #(hash-map % value) seqq)))","user":"57718d9fe4b0979f896515b6"},{"problem":156,"code":"(fn [defval ks]\n  (let [m (transient {})]\n    (doseq [k ks]\n      (assoc! m k defval))\n    (persistent! m)))","user":"5426a59ee4b01498b1a71b1b"},{"code":"(fn [k sq]\n  (let\n    [mm {}]\n    (loop\n      [s sq\n       m mm]\n      (if (= nil (first s))\n        m\n        (recur\n         (rest s)\n         (assoc m (first s) k))))))","problem":156,"user":"530d85dee4b08068f379eca8"},{"code":"(fn [x mp] (zipmap mp (iterate (fn [u] x) x)))","problem":156,"user":"52ab61f5e4b0c58976d9ac75"},{"problem":156,"code":"(fn [value input] (reduce #(assoc %1 %2 value) {} input))","user":"5220def1e4b0e6a83c8925b4"},{"problem":156,"code":"(fn [v xs]\n  (into (sorted-map) (map #(assoc {} % v) xs)))","user":"574c3d4ee4b02ea11479921a"},{"problem":156,"code":"(fn [d l] (reduce #(conj %1 {%2 d}) {} l))","user":"548d15a0e4b0e286459a1214"},{"code":"(fn [ k coll] \n         (reduce conj  (#(for [key  %2] \n                          {key %})\n                       k coll ))\n         )","problem":156,"user":"5295fbb7e4b02ebb4ef75029"},{"problem":156,"code":"(fn [v c]\n    (into {} (map #(vector % %2) c (repeat v))))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":156,"code":"(fn [d k]\n  (apply hash-map\n   (apply concat\n   \t(map #(list %1 d) k))))","user":"56e87a9ce4b04a395b9a03f0"},{"code":"(fn [x coll]\n  (apply hash-map\n    (interleave coll (repeat (count coll) x))))","problem":156,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"code":"(fn [newval newkeys]\n  (apply array-map\n    (interleave newkeys (take (count newkeys) (repeat newval))\n)))","problem":156,"user":"4f882b4be4b033992c121c60"},{"code":"(fn foo [x y]\n    (when (seq y)\n      (conj {(first y) x} (foo x (rest y)))))","problem":156,"user":"50aedb8ce4b0a40c9cfb08d4"},{"code":"(fn [x y] (reduce (fn [w z] (assoc w z x)) {} y))","problem":156,"user":"51fc44c5e4b0f1313d468a1b"},{"problem":156,"code":"(fn [x s] (reduce conj (map (fn [a] (assoc {} a x)) s)))","user":"5c32603ee4b0d62ef62d9f38"},{"problem":156,"code":"(fn f\n   [d keys]\n   (into {} (map #(hash-map % d) keys)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":156,"code":"(fn [v xs]\n              (reduce #(assoc %1 %2 v) {} xs))","user":"4f9aa2a6e4b0dcca54ed6d0c"},{"problem":156,"code":"#(reduce (fn [acc,item] (assoc acc item %1)) {} %2)","user":"5dc12b0ae4b0e59a23173d84"},{"problem":156,"code":"(fn [value sequ] (into {} (map #(vector % value) sequ)))","user":"577412c6e4b0979f896515f6"},{"code":"(fn mer [default keys-collection] \n  (if (empty? keys-collection) \n    {} \n    (merge (mer default (rest keys-collection)) {(first keys-collection) default})))","problem":156,"user":"5311b367e4b08068f379eced"},{"problem":156,"code":"(fn [default s] (apply hash-map (interleave s (take (count s) (repeat default)))))","user":"55fb58b2e4b0f488688e0661"},{"problem":156,"code":"(fn [d k]\n  (apply hash-map (interleave k (repeat d)))\n  )","user":"4ec56864535d6d7199dd369d"},{"problem":156,"code":"(fn [d m] (loop [r {} v m]\n             (if (empty? v) \n               r\n               (recur (assoc r (first v) d) (rest v)))))","user":"569ff6dbe4b0542e1f8d149c"},{"problem":156,"code":"(fn [default s]\n  (loop [result {}\n         s s]\n  (if (empty? s)\n    result\n    (recur\n     (assoc result (first s) default)\n     (rest s)))))","user":"5e950178e4b0fbed045a3801"},{"code":"(fn [ val k ]\n  (reduce (fn [a b] (conj a {b val})) {} k))","problem":156,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":156,"code":"(fn [d v] (into {} (map (fn [k] [k d]) v)))","user":"579c7db7e4b05b1deef9ae0a"},{"problem":156,"code":"(fn [d ks] (apply merge (map #(hash-map % d) ks)))","user":"54d7e277e4b0a52adc2e2031"},{"problem":156,"code":"(fn [d s]\n  (reduce #(assoc %1 %2 d) \n          {} \n          s))","user":"60032b7fe4b074f607df6638"},{"problem":156,"code":"(fn [d l] (apply assoc {} (interleave l (repeat d))))","user":"57280b92e4b0c5bde472c14e"},{"code":"#(apply merge (for [k %2] {k %}))","problem":156,"user":"4db2cd84535df7e46ed9b6c6"},{"code":"(fn [default l](zipmap  (reverse l) (vec (take (count l) (repeat default)))))","problem":156,"user":"4eeccfc0535d93acb0a668b5"},{"code":"(fn [x m]\r\n  (reduce #(assoc %1 %2 x) {} m))","problem":156,"user":"4fb37882e4b081705acca2a0"},{"problem":156,"code":"(fn [default keys]\n  (into {}\n    (map\n      (fn [x]\n        [x default]\n      )\n      keys\n    )\n  )\n)","user":"5b59b89be4b02d533a91bd7d"},{"problem":156,"code":"(fn [d ks]\n  (apply hash-map (interleave ks \n                              (repeat d))))","user":"583e02fce4b089d5ab817da5"},{"code":"(fn [sep ks] (into {} (map (fn [k] [k sep]) ks)))","problem":156,"user":"50ce09e6e4b0ffc302be4bc6"},{"problem":156,"code":"#(apply (partial conj {}) (for [key %2] [key %1]))","user":"53e543efe4b036ad0777e457"},{"code":"(fn [n seq]\n  (into {}\n    (for [k seq]\n      [k n])))","problem":156,"user":"50611456e4b0dc10a69545a5"},{"problem":156,"code":";;(fn [k m] (apply hash-map (reduce #(conj %1 %2 k) [] m)))\n(fn [k m] (into {} (map #(conj [%] k) m)))","user":"551535cee4b055c2f668d4df"},{"problem":156,"code":"(fn set-defaults [default sek]\n  (into {} (map\n             (fn [val] [val default])\n             sek)))","user":"54d5343fe4b0a52adc2e200a"},{"problem":156,"code":"#(reduce (fn foo [x y] (merge x {y %1})) {} %2)","user":"5520974be4b08d5046aa8a63"},{"code":"(fn [default keys] (apply merge (map #(hash-map % default) keys)))","problem":156,"user":"50a7b76de4b090657f4a5cdc"},{"problem":156,"code":"(fn [val keys] (let [vals (repeat (count keys) val)] (zipmap keys vals )))","user":"4f24c859e4b0d66497709fef"},{"problem":156,"code":"(fn [default list] (reduce #(assoc %1 %2 default) {} list ))","user":"54857657e4b0e286459a11ac"},{"problem":156,"code":"(fn [default xs] (apply conj (map (fn [y] {y default}) xs)))","user":"56ec5b88e4b04a395b9a0438"},{"problem":156,"code":"(fn [val ks] (reduce #(assoc %1 %2 val) {} ks))","user":"5ad6ad5de4b0ea6055cfac0e"},{"problem":156,"code":"(fn [v s]\n  (reduce \n   #(assoc %1 %2 v)\n   {} s))","user":"58333b19e4b089d5ab817c94"},{"problem":156,"code":"(fn defaultmap\n  [my-default my-keys]\n  (reduce\n   (fn [my-map my-key] (assoc my-map my-key my-default))\n   {}\n   my-keys))","user":"5a3ece62e4b0447ef91cc5b9"},{"problem":156,"code":"#(reduce (fn [a b] (merge a {b %1})) {} %2)","user":"59ddae03e4b01968742fed65"},{"problem":156,"code":"(fn [default kws] (reduce into {} (map #(hash-map % default) kws)))","user":"58795fd5e4b01531a375eace"},{"code":"(fn [a x] (into {} (for [y (seq x)] (hash-map y a))))","problem":156,"user":"50733b31e4b0e3170b5a869a"},{"problem":156,"code":"(fn [k s] (zipmap s (repeat k)))","user":"4e8a170c535d3e98b802328f"},{"code":"(fn [v xs] (reduce #(conj % [%2 v]) {} xs))","problem":156,"user":"525078b6e4b0541d1855b832"},{"problem":156,"code":"(fn [x ns] \n  (into {} (map #(vec [% x]) ns))\n  )","user":"5a388675e4b001c08efc0ca2"},{"code":"(fn [d m]\n    (loop [result {} part m]\n        (if (empty? part)\n          result\n          (recur (assoc result (first part) d) (rest part)))))","problem":156,"user":"4febb4dae4b0681fd128dc98"},{"problem":156,"code":"(fn ! [d ks]\n  (zipmap ks (repeat d)))","user":"54c271b9e4b045293a27f602"},{"problem":156,"code":"#(let [m {}] (apply merge (for [key %2] (assoc m key %1))))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn [d k]\n  (into {} (for [x k] [x d])))","problem":156,"user":"51622fb8e4b009fba0926e3f"},{"code":"(fn [value vector1] (let [valseq (into [] (repeat 3 value))]\n                                     \n                                     (apply hash-map (interleave vector1  valseq))))","problem":156,"user":"51bf0ccee4b013aa0d74b811"},{"code":"(fn [value vctr]\n  (loop [cnt (dec(count vctr)) mp {}]\n  (if (< cnt 0) mp\n  (recur (dec cnt) (conj mp {(vctr cnt) value}))\n  )))","problem":156,"user":"52c3a0f4e4b0c2d177d620c6"},{"problem":156,"code":"(fn [x v]\n  (apply hash-map\n         (interleave v (repeat x))))","user":"5cc28739e4b0ccb0619627d8"},{"problem":156,"code":"(fn make-map [default_value key_vec] \n  (when (> (count key_vec) 0)\n  \t(conj (hash-map (first key_vec) default_value)\n        \t\t\t(make-map default_value (rest key_vec)))))","user":"5ea5881fe4b00a66d4a951a8"},{"code":"(fn [d ks] (apply hash-map (interleave ks (repeat d))))","problem":156,"user":"507a9b29e4b08327cd804a6e"},{"problem":156,"code":"(fn [default coll]\n  (into\n    {}\n    (map\n      (fn [key] [key default])\n      coll)))","user":"579dd954e4b05b1deef9ae1b"},{"problem":156,"code":"(fn [n xs]\n  (apply assoc {} (#(interleave %2 (repeat %1)) n xs)))","user":"569ad037e4b0542e1f8d144f"},{"problem":156,"code":"#(into {} (map (fn [it] [it %1]) %2) )","user":"535ca812e4b04ce2eb3ed2b7"},{"code":"(fn [x y] (apply conj (map #(hash-map %1 x) y)))","problem":156,"user":"500690e4e4b0678c553fc488"},{"problem":156,"code":"( fn [value keys]\n    (zipmap \n      keys\n      (repeat \n        (count keys) \n        value)) \n  )","user":"54391a55e4b032a45b869319"},{"problem":156,"code":"(fn [v xs]\n  (apply hash-map (concat (interpose v xs) (list v))))","user":"5188c249e4b0bdff0e072d54"},{"problem":156,"code":"(fn [val keys]\n  (loop [keys keys\n         ret {}]\n    (if (empty? keys)\n      ret\n      (recur (rest keys) (assoc ret (first keys) val)))))","user":"607b04e5e4b0a637ed780373"},{"code":"(fn [v ks] (reduce (fn [m1 k] (merge m1 {k v})) {} ks))","problem":156,"user":"50982cc7e4b04e098a4c726c"},{"problem":156,"code":"(fn make-map [d-val key-seq] (loop [i key-seq result {}]\n                               (if (= (count i) 0)\n                                 result\n                                 (recur (drop 1 i) (assoc result (first i) d-val)))))","user":"5e380e72e4b01d43a70e8db0"},{"problem":156,"code":"(fn [m k] (into {} (vec (map #(vec [% m]) k))))","user":"543d07e8e4b032a45b869346"},{"code":"(fn[v c](apply hash-map (mapcat #(list % %2) c (repeat v))))","problem":156,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":156,"code":"(fn [default l] (into {} (map #(hash-map % default) l)))","user":"55c13e73e4b01b9910ae2a2f"},{"code":"(fn [v xs] (reduce #(assoc % %2 v){} xs))","problem":156,"user":"519b7d76e4b02a926d9a436e"},{"code":"(fn [d s] (reduce (fn [dic k] (merge dic {k d})) {} s))","problem":156,"user":"4f43894ee4b0d7d3c9f3fd21"},{"problem":156,"code":"(fn [v ks]\n  (reduce\n   (fn [acc curr] (assoc acc curr v))\n   {}\n   ks))","user":"603d5f2ae4b0d5df2af2230c"},{"problem":156,"code":"(fn map-defaults [dval kseq] (reduce \n                              (fn [result current-key] (assoc result current-key dval))   \n                                   {} \n                                   kseq))","user":"53de622ce4b0d874e779ae34"},{"code":"(fn [d keys] (apply merge (map #(hash-map %1 d) keys)))","problem":156,"user":"51149439e4b0ce5098ee73b4"},{"problem":156,"code":"(fn [value coll] \n     (into {} (for \n       [y coll] \n       {y value})))","user":"567d18c9e4b05957ce8c61c4"},{"problem":156,"code":"(fn [default keys]\n  (loop\n     [[k & ks] keys\n      accum {}]\n      (let [new-accum (assoc accum k default)]\n        (if (nil? ks)\n            new-accum\n            (recur ks new-accum)))))","user":"58152157e4b0f478707a0631"},{"problem":156,"code":"(fn [default keyseq] (reduce #(assoc %1 %2 default) {} keyseq))","user":"51515a19e4b03e678e393acc"},{"problem":156,"code":"(fn [default-value sequence]\n  (into {} (map #(hash-map % default-value) sequence)))","user":"55635886e4b0c656e3ff17e9"},{"code":"(fn [d v] \n  (apply assoc {} (interleave  v (repeat d))))","problem":156,"user":"4f85ce23e4b033992c121c4a"},{"code":"(fn dm [d m] (into {} (map #(assoc {} % d) m)))","problem":156,"user":"536db108e4b0fc7073fd6e61"},{"problem":156,"code":"(fn [df lst]\n  (loop [s lst m {}]\n    (if (empty? s) m\n      (recur (rest s) (assoc m (first s) df)))))","user":"558378dce4b05c286339e115"},{"problem":156,"code":"(fn [value keys] (apply conj (map (fn [key] {key value}) keys)))","user":"5ad45f52e4b0ea6055cfabd7"},{"problem":156,"code":"(fn [default keys]\n      (reduce #(assoc %1 %2 default) {} keys))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":156,"code":"(fn fun1 [d k] \n  (reduce \n    (fn [acc i] (conj acc [i d])) \n    {} \n    k))","user":"5c7d5a0ce4b0d597f478caab"},{"code":"(fn [v ks]\n  (reduce conj\n    {(first ks) v}\n    (map (fn [x] [x v]) (rest ks))))","problem":156,"user":"4fcbc18ae4b0ee37620e185c"},{"problem":156,"code":"(fn create-map [v ks]\n  (reduce conj {} (map #(vector % v) ks))\n  )","user":"5245e320e4b09dbe66b56177"},{"problem":156,"code":"(fn foo [d ks]\n  (if (= ks []) {}\n    (conj {(first ks) d} (foo d (rest ks)))))","user":"599d49a7e4b0871e7608b7f4"},{"problem":156,"code":"#(loop [seq %2 acc {}] (if (empty? seq) acc (recur (rest seq)(assoc acc (first seq) %1))))","user":"56b2652ae4b0982f16b37e04"},{"problem":156,"code":"(fn [a lis]\n  (into {} (map #(hash-map % a) lis)))","user":"5191a763e4b0d428d29dc1b4"},{"problem":156,"code":"(fn [v l]\n   (reduce #(merge %1 {%2 v}) {} l))","user":"5392bfdee4b0b51d73faaeb2"},{"code":"(fn [d, k] (zipmap k (for [x k] d)))","problem":156,"user":"5151aa14e4b03e678e393ad4"},{"problem":156,"code":"(fn [v col]\n  (apply hash-map (interleave col (map (constantly v) col))))","user":"571e5c9ee4b0145328a76290"},{"code":"(fn f [v ks]\n  (loop [res {}\n         n (first ks)\n         r (rest ks)]\n    (if-not (nil? n)\n      (recur (assoc res n v) (first r) (rest r))\n      res)))","problem":156,"user":"52d7b0ade4b09f7907dd137c"},{"problem":156,"code":"(fn createHashMap\n  [vl vct]\n  (loop [hsh {}\n         lst vct]\n    (if (empty? lst)\n      hsh\n      (recur (assoc hsh (first lst) vl) (rest lst)))))","user":"5e9636fee4b0fbed045a3816"},{"problem":156,"code":"#(loop [val %1\n         left %2\n         res {}]\n         (if (empty? left)\n             res\n             (recur val (rest left) (assoc res (first left) val))))","user":"5bfcdc52e4b0bdcf453d15f4"},{"code":"(fn make-map\n  [default ks]\n  (apply hash-map (apply concat (for [x ks] [x default]))))","problem":156,"user":"512da425e4b040332b905b34"},{"problem":156,"code":"(fn [no arr]\n  (into {} (for [i arr]\n             [i no])))","user":"59636b43e4b066ee0a44b0c4"},{"problem":156,"code":"(fn [val keys] (loop [map {}\n                      ks (seq keys)]\n                 (if ks\n                   (recur (assoc map (first ks) val)\n                          (next ks))\n                   map)))","user":"587cf197e4b01531a375eb2a"},{"problem":156,"code":"(fn [val keys] (reduce (fn [result key] (assoc result key val)) {} keys))","user":"5c24c654e4b07e362c2305a7"},{"problem":156,"code":"(fn [default coll] (reduce (fn [a b] (assoc a b default)) {} coll))","user":"5256c4c1e4b0541d1855ba36"},{"code":"#(loop [d %1 xs %2 m {}] (if (empty? xs) (into {} (reverse m)) (recur d (rest xs) (conj m [(first xs) d]))))","problem":156,"user":"52f89125e4b047fd55836fd4"},{"code":"(fn [v input]\n  (loop [result {}, default v, elts input]\n    (if (empty? elts)\n      result\n      (recur (assoc result (first elts) v) v (rest elts)))))","problem":156,"user":"502940a9e4b061fd216be4b8"},{"code":"(fn [dv, m]\n  (loop [mm m\n        resm {}]\n    (let [[k1 & kres] mm]\n      (if (empty? kres) (assoc resm k1 dv) (recur kres (assoc resm k1 dv))\n    )\n  )\n      \n  )\n)","problem":156,"user":"5356a324e4b04ce2eb3ed269"},{"problem":156,"code":"(fn [defaultValue collection]\n    (let [\n      l \n      (for [k collection :let[v defaultValue]]\n        {k v}\n      )\n    ]\n    (into {} l)\n    )\n  )","user":"5843b231e4b089d5ab817e3d"},{"code":"(fn\n  [d L]\n  (into {}\n        (map #(vec [% d]) L)))","problem":156,"user":"4db53f87535d87e67b28fe08"},{"problem":156,"code":"(fn [defval kseq] \n  (loop [acc {}\n         ks kseq]\n    (if (empty? ks)\n      acc\n      (recur (conj acc [(first ks) defval]) (rest ks)))))","user":"56b6a50ae4b0982f16b37e3c"},{"code":"(fn [%1 %2] (zipmap %2 (repeat (count %2) %1)))","problem":156,"user":"508fabf9e4b0ea685a20f769"},{"problem":156,"code":"(fn [default seq]\n  (reduce #(conj %1 {%2 default}) {} seq))","user":"5746061ae4b009280f9f2b5b"},{"problem":156,"code":"(fn [number m]\n  (into {} (map #(hash-map % number) m)))","user":"5a796f13e4b03baeef9276ba"},{"code":"(fn [v k] (apply hash-map (interleave k (repeat v))))","problem":156,"user":"509c03f3e4b085ae113522a8"},{"code":"(fn [v ks]\n  (loop [m  {}\n         ks ks]\n    (if (= () ks)\n      m\n      (recur (assoc m (first ks) v) (rest ks)))))","problem":156,"user":"50435852e4b034ff00315d22"},{"problem":156,"code":"#(apply hash-map (interleave %2 (cycle [%])))","user":"542c2de0e4b0dad94371f29f"},{"code":";(fn [x y] map #(hash-map % 0) (seq [:a :b :c]))\n(fn [x y] (zipmap y (repeat x )) )","problem":156,"user":"518c5236e4b087e178201de0"},{"problem":156,"code":"(fn [d l] (apply hash-map (mapcat #(list % d) l)))","user":"5c7c1d8ee4b0d597f478ca88"},{"problem":156,"code":"(fn [standard coll]\n  (reduce (fn [new-map valor]\n            (assoc new-map valor standard))\n          {}\n          coll))","user":"5adbbf89e4b0837691e92bf4"},{"code":"(fn[k xs](apply hash-map (interleave xs (repeat k))))","problem":156,"user":"4faf897be4b081705acca257"},{"problem":156,"code":"(fn [value map_keys] \n  (loop [entries map_keys\n         results nil]\n    (if(empty? entries)\n      results\n      (let [[current & remaining] entries]\n      (recur remaining (assoc results current value))))))","user":"53f50c03e4b0db01ade6f9ca"},{"problem":156,"code":"(fn[e l](apply hash-map(mapcat #(vector % e)l)))","user":"5c7d947be4b0d597f478cab6"},{"problem":156,"code":"(fn [default vec] (into {} (map vector vec (repeat default))))","user":"551afdf8e4b07993ea3788cb"},{"problem":156,"code":"(fn [d coll]\n  (into {} (map (fn [x] [x d]) coll)))","user":"5da306a3e4b000c986472be7"},{"problem":156,"code":"(fn [val keys]\n  (zipmap keys (take (count keys) (repeat val))))","user":"52bb4be0e4b07a9af57922e2"},{"problem":156,"code":"#(apply merge (map hash-map  %2 (repeat (count %2) %)))","user":"541521cfe4b01498b1a719f3"},{"code":"(fn [arg1 arg2] (into {} (map #(hash-map % arg1) arg2)))","problem":156,"user":"52016fd3e4b0b2e020a18f10"},{"code":"(fn [value mp] (zipmap mp (repeat value)))","problem":156,"user":"5014779ce4b094324338f8e6"},{"problem":156,"code":"(fn [k vs]\n  (loop [[v & r] vs\n         acc {}]\n    (if (nil? v)\n      acc\n      (recur r\n             (assoc acc v k)))))","user":"566fa059e4b0a866af6896ea"},{"problem":156,"code":";(fn [val keys] (into {} (seq (for [k keys] {k val}))))\n#(into {} (seq (for [k %2] {k %1})))","user":"5540fe42e4b0a04f7929950a"},{"problem":156,"code":";(fn [d v]\n;  (into {} (map #(vector % d) v)))\n\n#(zipmap %2 (repeat %))","user":"55236ad6e4b0882d96d091b1"},{"code":"(fn [x y] (into {} (map (fn [a] (hash-map a x)) y)))","problem":156,"user":"4e2ef93d535deb9a81d77f0f"},{"problem":156,"code":"(fn [def-val ks]\n  (reduce (fn [m k] (conj m [k def-val]))\n          {}\n          ks))","user":"53d20e14e4b00fb29b22131a"},{"problem":156,"code":"(fn [d keys]\n  (loop [x keys  mymap {}]\n    (if (= () x)\n      mymap        \n      (recur (rest x) (merge mymap {(first x) d})))))","user":"5852c239e4b0b7285a6f4eb8"},{"code":"(fn\n  [default coll]\n  (loop [vs coll m {}]\n    (if (empty? vs)\n      m\n      (recur (rest vs) (assoc m (first vs) default)))))","problem":156,"user":"525fffb8e4b03e8d9a4a702b"},{"code":"#(reduce merge (for[k %2] {k %}))","problem":156,"user":"52271ffee4b04e78ff2e19a9"},{"problem":156,"code":"(fn\n  [v ks]\n  (loop [ks ks acc {}]\n    (if (empty? ks)\n      acc\n      (recur (pop ks) (assoc acc (peek ks) v)))))","user":"54fdbe3fe4b07d26eda61d3b"},{"problem":156,"code":"#(apply hash-map\n  \n  (interleave %2 (repeat %1))\n)","user":"4e28ddd1535deb9a81d77efd"},{"problem":156,"code":"(fn [v k] (reduce #(conj % {%2 v}) {} k))","user":"53573d70e4b04ce2eb3ed278"},{"code":"(fn [default m]\n  (reduce (fn [x y] (conj x {y default})) {} m)\n  )","problem":156,"user":"4f6b4237e4b07046d9f4efa9"},{"problem":156,"code":"(fn [default-value, my-keys]\n    (reduce \n     \t#(assoc % %2 default-value)\n     {} my-keys))","user":"54b66089e4b05787c3b163ba"},{"code":"(fn [d k]\n  (apply assoc {} (interleave k (repeat d))))","problem":156,"user":"4e1f9bb5535d04ed9115e80d"},{"problem":156,"code":"(fn\n  [x ks]\n(apply hash-map (interleave ks (repeat (count ks) x))))","user":"55912230e4b027778923767a"},{"problem":156,"code":"(fn [value, keys] (into {} (for [k keys] [k value])))","user":"5c1b4146e4b01240ff56720d"},{"problem":156,"code":"(fn [d ls]\n  (apply hash-map\n         (mapcat vector\n        \tls\n          \t(repeat d))))","user":"56ca2f25e4b0ea9b8538f716"},{"problem":156,"code":"(fn [defaultA sequenceA]\n  (loop [default defaultA rem_seq sequenceA built_map {}]\n    (if (empty? rem_seq)\n      built_map\n      (recur\n        default\n        (rest rem_seq)\n        (conj built_map {(first rem_seq) default})\n      )\n    )\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"problem":156,"code":"(fn \n  [val col]\n\t(loop [v val c col r {}]\n      (if (first c)\n        (recur v (rest c) (assoc r (first c) v))\n        r)))","user":"590620e1e4b047aa04b1992c"},{"problem":156,"code":"(fn [value keys]\n  (reduce conj (map (fn [x] {x value}) keys)))","user":"539dcb24e4b0b51d73faaf3d"},{"code":"(fn [x v] (loop [vect v m {}] (if (seq vect) \r\n(recur (rest vect) (conj m {(first vect) x})) m)))","problem":156,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"#(reduce (fn [col k] (assoc col k %1)) {} %2)","problem":156,"user":"50f53694e4b057d4c52de881"},{"problem":156,"code":"(fn [v coll]\n(reduce #(assoc %1 %2 v) {} coll))","user":"57f3f2bee4b07bbd65c32b1a"},{"code":"(fn [v ks] (reduce conj (map #(hash-map % v) ks)))","problem":156,"user":"52be0263e4b07a9af579230e"},{"code":";; zipmap - Returns a map with the keys mapped to the corresponding vals.\n;; We get the keys from the second argument\n;; For each key we repeat the value, thus creating a sequence of equal length\n#(zipmap %2 (repeat %1))","problem":156,"user":"52d2f457e4b099d49816f0ba"},{"problem":156,"code":"(fn [v l] (apply assoc {} (interleave l (repeat (count l) v))))","user":"56fd020ee4b08d47c97781a0"},{"problem":156,"code":"(fn [defy keyz] (reduce (fn [m k] (assoc m k defy)) {} keyz))","user":"594765cee4b07ddc2dafad9b"},{"problem":156,"code":"(fn [v coll] (zipmap coll (repeat v)))","user":"53dfbc75e4b0d874e779ae44"},{"problem":156,"code":"(fn [d s]\n  (reduce\n   #(assoc %1 %2 d) {} s))","user":"598ab445e4b02b9968b84ce0"},{"problem":156,"code":"(fn [d coll]\n   (zipmap coll (repeat d)))","user":"5ba5802de4b0a20761a233fd"},{"problem":156,"code":"(fn [dv ks] (zipmap ks (map (fn [k] dv) ks)) )","user":"51d6f660e4b0154f82ab92f5"},{"problem":156,"code":"(fn [val ks]\n  (apply assoc {} (interleave ks (repeat val))))","user":"59f77dfae4b0966464fe6af4"},{"problem":156,"code":"(fn [val keys]\n  (let [len (count keys)]\n    (zipmap keys (take len (repeat val)))))","user":"576186a5e4b0994c1922fb8e"},{"problem":156,"code":"(fn [default keys] \n  \t(into {} \n          (for [x keys] {x default})))","user":"541cfd61e4b01498b1a71a7b"},{"problem":156,"code":"(fn [v s] (into {}  (map #(assoc {} % v) s)))","user":"4e68dfe6535d8ccf87e9fe91"},{"problem":156,"code":"(fn f [d s] (zipmap s (repeat d)))","user":"5ed15e23e4b016b56eae05ba"},{"code":"#(reduce (fn [map item] (assoc map item %)) {} %2)","problem":156,"user":"51db1abae4b094966a2cd685"},{"problem":156,"code":"(fn [default ks] (apply merge (map #(hash-map % default) ks)))","user":"588d224ae4b00487982d516c"},{"code":"(fn [val vect] (reduce conj {} (map #(identity [%1 val]) vect)))","problem":156,"user":"50310b8be4b05b7df5a0b84d"},{"problem":156,"code":"(fn [d l] (reduce conj (map (fn [le] {le d}) l)))","user":"590bd0fee4b047aa04b199e3"},{"problem":156,"code":"(fn [d ks] (reduce conj (map #(hash-map %1 d) ks)))","user":"51d26b0ae4b0d13b04db0d97"},{"problem":156,"code":"(fn [v ks] (zipmap  ks (repeat v)))","user":"58983e3fe4b00487982d52ce"},{"problem":156,"code":"(fn [x xs]\n  (zipmap xs (repeat x)))","user":"5e610da6e4b0fd0acd15868d"},{"problem":156,"code":"(fn [k v] (zipmap v (for [v v] k)))","user":"56bdda49e4b0f26550335977"},{"code":"(fn [default-val seq-of-keys]\n  (reduce (fn [acc key] (conj acc [key default-val])) {} seq-of-keys))","problem":156,"user":"52c3b3e5e4b0c2d177d620c8"},{"problem":156,"code":"(fn\n  [defaultValue keys]\n  (reduce (fn [current next] (assoc current next defaultValue)) {} keys)\n  )","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn [default values] (reduce #(assoc %1 %2 default) {} values))","problem":156,"user":"4fa340b4e4b081705acca18c"},{"code":"(fn [a b] (apply merge {} (map #(assoc {} % a) b)))","problem":156,"user":"51dad73ae4b09f6bc204eedd"},{"problem":156,"code":"(fn [v l] (into {} (for [x l] {x v})))","user":"54b8dfece4b0ed20f4ff6e9a"},{"problem":156,"code":"#(apply conj {} (for [i %2] (vector i %1)))\n\n; #(zipmap %2 (repeat %1))\n\n; #(into {} (map vector %2 (repeat %)))","user":"58d2af83e4b03c36ff7e5907"},{"code":"(fn [x col]\n (zipmap col (repeat x)))","problem":156,"user":"53572767e4b04ce2eb3ed277"},{"code":"(fn [x y]\n  (into {} (map #(into [] [% x]) y))\n  )","problem":156,"user":"51bec919e4b013aa0d74b800"},{"problem":156,"code":"(fn [d s]\n\t(zipmap s (repeatedly (fn[] d)))\n  )","user":"54bbba99e4b0ed20f4ff6ec2"},{"code":"(fn [default keys]\n  (let [entries (for [k keys]\n                  [k default])]\n    (into {} entries)))","problem":156,"user":"5236b6bce4b05f3be1c7c8fe"},{"code":"(fn [default-value hashmap-keys]\n  (reduce merge (map hash-map hashmap-keys (repeat (count hashmap-keys) default-value))))","problem":156,"user":"4f031883535dcb61093f6a5e"},{"code":"(fn [value requested-keys]\n  (zipmap requested-keys (repeat (count requested-keys) value))\n  )","problem":156,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn [d s] (into {} (map vector s (repeat d))))","problem":156,"user":"5228b015e4b0186687e23a8a"},{"problem":156,"code":"(fn [v k] (apply merge (map assoc (repeat {}) k (repeat v))))","user":"520a796be4b01da9d47a99dc"},{"code":"(fn [ default arr] (zipmap arr (repeat (count arr) default)))","problem":156,"user":"5192ce1de4b0024e2d75f7d2"},{"problem":156,"code":";input x vector\n;output constructs a map\n(fn [a b]\n  (loop [x b y {}]\n    (if (empty? x)\n      y\n      (recur (rest x) (conj y {(first x) a})))\n    ))\n\n; loop and recur args need one to one","user":"582c526ae4b051871117bf88"},{"problem":156,"code":"(fn default-map [val keys]\n   (into {} (map \n              #(vector % val) keys)))","user":"56fee925e4b08d47c97781b7"},{"problem":156,"code":"#(apply hash-map (interleave %2 (repeat %1)))\n\n\n\n\n\n;(#(assoc {} %2 %1) 0 [:a :b :c])\n;#(apply hash-map %2 %1)","user":"5633bb9de4b0bfe05bf117b4"},{"problem":156,"code":"(fn [x y]\n   (zipmap y (vec (repeat (count y) x))))","user":"570e43d8e4b0b0fb43fd06eb"},{"problem":156,"code":"(fn [default ks]\n   (into {} (for [k ks] [k default])))","user":"5166b716e4b060c690c1f4bf"},{"problem":156,"code":"(fn map-with-default [default keys]\n  (zipmap keys (repeat default)))","user":"59032c0fe4b022d14a2aaf9f"},{"problem":156,"code":"(fn [v s]\n  (loop [i 0 m {}]\n    (if (= i (count s))\n      m\n      (recur (inc i) (conj m [(nth s i) v])))))","user":"55aaa36fe4b0988bba2ad94f"},{"problem":156,"code":"(fn [x y]\n  (loop [ls y\n         acc {}]\n    (if (empty? ls)\n      acc\n      (recur (rest ls) (conj acc {(first ls) x})))))","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":156,"code":"(fn [d ls]\n  (zipmap ls (for [i (range (count ls))]\n                         d)))","user":"55df5feae4b050e68259b3f1"},{"code":"(fn [default keys] (reduce #(conj %1 {%2 default}) {} keys))","problem":156,"user":"523b4e91e4b07becd5be21ef"},{"code":"#(into {} (map (fn [e] {e %}) %2))","problem":156,"user":"4e49badd535dc968683fc4c9"},{"problem":156,"code":"(fn [default ks]\n  (reduce (fn [acc key] (into acc {key default})) {} ks))","user":"5d9e8e40e4b000c986472bc2"},{"problem":156,"code":"(fn [d s] (reduce (fn [acc val] (conj {val d} acc)) {} s))","user":"58fb381ae4b0438e51c2cf71"},{"problem":156,"code":"(fn [k xs]\n  (reduce #(assoc %1 %2 k) {} xs))","user":"54d5fbe9e4b0a52adc2e2014"},{"problem":156,"code":"(fn [default-value ks]\n  (into {}\n        (map (fn [k]\n               [k default-value])\n             ks)))","user":"554bd33ce4b0a04f7929959a"},{"problem":156,"code":"(fn [val keys]\n  (reduce\n   #(assoc %1 %2 val)\n   {}\n   keys))","user":"53065acbe4b02e8216869792"},{"problem":156,"code":"(fn associa [a b]\n  (loop [a a b b acc {}]\n    (if (empty? b)\n      acc\n      (recur a (rest b) (assoc acc (first b) a)))\n    ))","user":"54886239e4b0e286459a11d0"},{"code":"#(zipmap %2 (cycle (vector %1)))","problem":156,"user":"50c0fac8e4b096f585049c34"},{"code":"(fn [d v]\n  (reduce #(assoc % %2 d) {}  v))","problem":156,"user":"5007cdb9e4b0b17c647f5227"},{"problem":156,"code":"(fn [default sequ]\n  (reduce #(assoc %1 %2 default) {} sequ))","user":"5cf863c4e4b0b71b1d808a80"},{"problem":156,"code":"(fn [d s] (apply merge (let [m {}] (map #(conj m [%1 d]) s))))","user":"57b65c9be4b0fbc9809a27c0"},{"code":"(fn [default keys]\n          (zipmap keys (repeat default)))","problem":156,"user":"504ee511e4b0e7ad84dbc4a4"},{"problem":156,"code":"(fn [val, keys] \n  (reduce\n   (fn [h, key]\n     (assoc h key val)) {} keys))","user":"58c66990e4b021aa9917ed53"},{"code":"(fn map-it\n  ([df key0]\n    (map-it df key0 {}))\n  ([df key0 m]\n    (if (empty? key0)\n      m\n      (map-it df (rest key0) (assoc m (first key0) df)))))","problem":156,"user":"504e12ade4b078edc5f593b7"},{"problem":156,"code":"(fn [n vects] (reduce conj (map (fn [d] {d n}) vects)))","user":"5c1edf23e4b0efcb0b05b25d"},{"problem":156,"code":"(fn [v col] (into {} (map vector col (repeat v))))","user":"574a546ee4b02ea1147991f6"},{"code":"(fn [default, keys]\n  (into {} (map (fn [x] (assoc {} x default))keys))\n)","problem":156,"user":"4f037d9e535dcb61093f6af2"},{"code":"#(apply assoc {} (interleave %2 (repeat (count %2) %)) )","problem":156,"user":"4ff99f47e4b0678c553fc3aa"},{"problem":156,"code":"(fn [default vect] (reduce #(assoc %1 %2 default) {} vect))","user":"55306f9de4b076ab5578f814"},{"code":"#(apply hash-map\n  (interleave\n   \t%2\n  \t(repeat %1)\n  )\n)","problem":156,"user":"532cb6bbe4b019098a6f8b33"},{"code":"(fn [default x] (apply conj {} (map #(hash-map % default) x)))","problem":156,"user":"4ee52c44535d1385b2869d88"},{"problem":156,"code":"; #(into {} (map (fn [k] [k %]) %2)) ; works\n; #(apply array-map (interleave %2 (repeat %1))) ; works\n; #(apply assoc {} (interleave %2 (repeat %1))) ; works\n; #(into {} (map (fn [k] (identity [k %1])) %2)) ; works\n; #(zipmap %2 (repeat %1)) ; works\n#(into {} (for [k %2] [k %1]))","user":"5a544eeee4b05d388ecb6c24"},{"problem":156,"code":"#(reduce (fn [coll k] (assoc coll k %)) {} %2)","user":"60471241e4b02d28681c77c9"},{"code":"(fn [default coll]\n  (zipmap coll (repeat default)))","problem":156,"user":"4dac39a28cc9d6edb8beb0b3"},{"code":"(fn [default keys] \n  (zipmap keys (repeat (count keys) default))\n)","problem":156,"user":"531ba143e4b08068f379ed91"},{"problem":156,"code":"(fn [d xs]\n  ((fn f [d xs dict]\n    (if (seq xs)\n      (f d (next xs) (conj dict {(first xs) d}))\n      dict))\n   d xs {}))","user":"4f04c93c535dcb61093f6be3"},{"code":"(fn [defval, seqq]\n  (reduce merge\n    (map #(hash-map % defval) seqq)))","problem":156,"user":"505aa653e4b021387fb89857"},{"code":"(fn [n coll] (zipmap coll (repeat n)))","problem":156,"user":"52e184ebe4b09f7907dd1426"},{"problem":156,"code":"(fn [d m] (apply assoc {} (interleave m (repeat d))))","user":"5512980ce4b06e50f9beb1b3"},{"problem":156,"code":"(fn [d s]\n  (loop [s-loop s r {}]\n    (if (first s-loop)\n      (recur (rest s-loop) (conj r [(first s-loop) d]))\n      r)\n   )\n)","user":"5f9491cbe4b0715f5002d7bf"},{"problem":156,"code":"(fn c-map [x y]\n  (if (empty? y)\n    {}\n    (conj (c-map x (rest y)) (hash-map (first y) x)\n          )\n    )\n  )","user":"5a022949e4b01bb0ae8afd60"},{"problem":156,"code":"(fn map-with-default-values [default-value keys-to-map]\n  (apply merge (map #(identity {% default-value}) keys-to-map)))","user":"5777bb7ee4b0979f8965164d"},{"problem":156,"code":"(fn [default-val key-seq] \n  (reduce #(conj %1 {%2 default-val}) {} key-seq))","user":"5590ebb1e4b0277789237677"},{"code":"(fn [x1 y1]\n    (loop [x x1 y y1 z {}]\n    (if (empty? y) z\n\t      (recur x (rest y) \n\t\t     (assoc z (first y) x) )\n\t      )\n\t  ))","problem":156,"user":"4fdf5403e4b05e33b9224f98"},{"code":"(fn [d coll] (into {} (map #(vector % d) coll)))","problem":156,"user":"510c67f0e4b078ea71921119"},{"problem":156,"code":"(fn ff[x v]\n  (when (not (empty? v))\n    (merge (ff x (rest v)) {(first v) x})))","user":"54713dc8e4b094393f72dd69"},{"problem":156,"code":"(fn [key listi]\n  (zipmap listi (repeat key)))","user":"5e83a273e4b09a7a73c8bbbb"},{"code":"(fn [v ks]\n    (apply hash-map (interleave ks (repeat v))))","problem":156,"user":"4f1bb9d8535d64f60314647d"},{"code":"(fn [v keys]\n  (let [smap (sorted-map)]\n    (loop [v v ks keys sm smap]\n      (if (= (count ks) 0)\n        sm\n        (recur v (rest ks) (assoc sm (first ks) v))))))","problem":156,"user":"5087d0e4e4b0198722bd9851"},{"problem":156,"code":"(fn [default-value seq']\n  (reduce \n   #(conj %1 [%2 default-value])\n   {} seq'))","user":"567bf820e4b05957ce8c61ad"},{"problem":156,"code":"(fn [dv ik]\n  (loop [rk ik\n         omap {}]\n    (if (empty? rk)\n      omap\n      (let [[lk & nk] rk\n            omap (conj omap {lk dv})]\n        (recur nk omap)))))","user":"555f620ce4b0a2eb076a39c3"},{"problem":156,"code":"#(apply hash-map  (interleave  %2 (repeat %1)))","user":"5f77b99fe4b02876ed9fd0bc"},{"code":"(fn [d keys]\n  (apply conj {}\n   (map #(vec (list % d)) keys)))","problem":156,"user":"4fe87e56e4b07c9f6fd12c40"},{"code":"#(reduce (fn [a b] (conj a [b %1])) {} %2 )","problem":156,"user":"52afbc69e4b0c58976d9acc0"},{"code":"#(apply hash-map (apply concat (for [x %2] [x %])))","problem":156,"user":"4ee82539535d93acb0a66878"},{"problem":156,"code":"(fn [value keyset] (zipmap keyset (vec(replicate (count keyset) value)) ) )","user":"552102bde4b08d5046aa8a67"},{"problem":156,"code":"#(into {} (for [x %2] {x %1} ))","user":"552800d7e4b0ffed3738f93a"},{"problem":156,"code":"(fn [no lis]\n   (into {} (for [i lis]\n              [i no])))","user":"59636b49e4b066ee0a44b0c5"},{"code":"(fn [v s]\n  (loop [r {}\n         s s]\n    (if (empty? s)\n      r\n      (recur (assoc r (first s) v) (rest s)))))","problem":156,"user":"538d464ee4b0b51d73faae69"},{"problem":156,"code":"(fn [v c] (zipmap c (repeat (count c ) v)))","user":"55ff562fe4b00f4cabc57660"},{"problem":156,"code":"(fn my-m\n  [x v]\n  (into {} (map #(hash-map % x) v)))","user":"5db5f16ce4b010eb3c36cd34"},{"code":"(fn make-def-map [def-val keys]\r\n  (loop [keys keys\r\n         result {}]\r\n    (if (empty? keys)\r\n      result\r\n      (recur (rest keys) (conj result [(first keys) def-val])))))","problem":156,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":156,"code":"(fn\n   [v xs]\n   (loop [xs xs acc {}]\n     (if (empty? xs)\n       acc\n       (recur (rest xs) (assoc acc (first xs) v)))))","user":"551a21ece4b091ff45eda993"},{"code":"(fn [def_value xs]\n  (zipmap xs (take (count xs) (repeat def_value)))\n  )","problem":156,"user":"50f3bd98e4b041536e2eca3a"},{"code":"(fn [d m] (zipmap m (repeat d)))","problem":156,"user":"4e2164ff535d04ed9115e815"},{"problem":156,"code":"(fn [default sq]\n  (zipmap sq (repeat default)))","user":"55ba70f9e4b01b9910ae29d4"},{"code":"(fn mapdef [v l] (if (empty? l) {} (assoc (mapdef v (pop l)) (peek l) v)))","problem":156,"user":"4f8b20fce4b02e764a0a5178"},{"problem":156,"code":"#(reduce (fn([a b] (assoc a b %1))) {} %2)","user":"55e46caae4b050e68259b451"},{"code":"(fn dic [v, [k1 & ks]] (if (empty? ks) {k1 v} (merge {k1 v} (dic v ks))) \n  )","problem":156,"user":"5210e5c5e4b080a8d9b9d63f"},{"problem":156,"code":"#(apply hash-map (interleave %2  (repeat %1)))","user":"5f297f22e4b033932238a64e"},{"problem":156,"code":"(fn [val m]\n  (->> m\n       (map #(hash-map %1 val))\n       (reduce #(merge %1 %2) {})))","user":"59512d5ce4b066ee0a44aea8"},{"problem":156,"code":"(fn [value coll]\n  (apply conj {}\n    (map #(vector % value) coll)))","user":"5a08cffbe4b01bb0ae8afdfb"},{"problem":156,"code":"(fn [val keys] (into {} (vec (map #(vector % val) keys))))","user":"569fc70ee4b0542e1f8d1499"},{"problem":156,"code":"(fn [default vect]\n  (reduce\n    (fn [startmap addkey]\n      (conj startmap {addkey default}))\n    (hash-map)\n    vect)\n  )","user":"5591b61ee4b0604b3f94d580"},{"problem":156,"code":"(fn [v keys]\n  (reduce #(assoc %1 %2 v) {} keys))","user":"587c77afe4b01531a375eb1b"},{"code":"(fn [d k]\n  (zipmap k (repeat d)))","problem":156,"user":"4fc8c8d8e4b0ee37620e183b"},{"code":"(fn make-def-map [default keys]\n  (loop [key-col keys mapping {}]\n    (if (empty? key-col)\n      mapping\n      (recur (rest key-col) (merge mapping {(first key-col) default}))\n    )\n  )\n)","problem":156,"user":"50845d3ee4b0fb8f40674bf3"},{"problem":156,"code":"(fn default_map\n  [default_val, init_keys]\n  (if (empty? init_keys)\n    {}\n    (conj (default_map default_val (rest init_keys)) [(first init_keys) default_val])))","user":"53de4bdae4b0d874e779ae32"},{"problem":156,"code":"(fn [v ks]\n  (reduce \n   (fn [m k] (assoc m k v)) \n   {} \n   ks)\n  )","user":"562fd7f6e4b0ab312c17ebe0"},{"code":"(fn [d ks] (reduce (#(fn [m k] (assoc m k %)) d) {} ks))","problem":156,"user":"4fad041ee4b081705acca231"},{"problem":156,"code":"(fn [value l2]\n  (loop [l1 l2 d {}]\n     (if (empty? l1)\n       d\n       (recur (rest l1) (assoc d (first l1) value)))))","user":"5516fd2ce4b06a49daca83bb"},{"problem":156,"code":"(fn [defv ks]\n  (into {}\n    (for [k ks\n          :let [d {k defv}]]\n      d)))","user":"527106e8e4b03e8d9a4a73ce"},{"problem":156,"code":"(fn [default key-list] (apply merge (map #(hash-map % default) key-list)))","user":"5d444819e4b07c84aa5ae69c"},{"code":"#(zipmap %2 (repeat (count %2) %1))","problem":156,"user":"4dc3780b535da86f151f0c3f"},{"problem":156,"code":"(fn [x y](into {} (map #(hash-map % x) y)))","user":"558f56c3e4b0277789237662"},{"code":"(fn [x y] (into {} (map #(hash-map %1 %2) y (repeat x))))","problem":156,"user":"528ad4cce4b0239c8a67ae84"},{"code":"(fn [v ks]\n  (apply hash-map\n    (interleave ks (repeat v))))","problem":156,"user":"50a3f23ae4b08bbd0eb4ed2f"},{"code":"(fn [d keys] (reduce (fn [r k] (assoc r k d)) {} keys))","problem":156,"user":"50bfd849e4b042992946c649"},{"problem":156,"code":"(fn [d xs] (apply hash-map (mapcat #(vector % d) xs)))","user":"57d50c05e4b0bd073c2023a8"},{"problem":156,"code":"(fn dmap [default-value mkeys]\n  (->> mkeys \n       (map #(hash-map % default-value)) \n       (reduce conj)))","user":"547e3846e4b0c51c1f4d7302"},{"code":"(fn [x y] (apply hash-map (mapcat #(vector %1 x) y)))","problem":156,"user":"51eb0374e4b0f1f103a0d156"},{"problem":156,"code":"#(apply assoc {} (interleave %2 (repeat (count %2) %1)))","user":"51071f2ee4b05b2b4eee748e"},{"problem":156,"code":"(fn [defaultVal vect]\n   (into {} (map #(vector % defaultVal) vect)))","user":"5cdd7157e4b05ee0cb31175b"},{"problem":156,"code":"(fn [default keys] (reduce (fn [coll key] (assoc coll key default)) {} keys))","user":"51a132cee4b0b292b01ee3ff"},{"problem":156,"code":"(fn \n  [defval keys]\n  (let [res {}]\n    (reduce #(assoc %1 %2 defval) res keys)))","user":"55729a78e4b09a3098a52547"},{"problem":156,"code":"(fn [d m]\n  (into {} (map #(assoc {} % d) m)))","user":"56719c3ce4b05957ce8c610c"},{"problem":156,"code":"(fn [%1 %2](into {} (for [x %2] [x %1])))","user":"54e604a1e4b024c67c0cf801"},{"code":"(partial (fn add-to-map [new-map val new-keys]\n\t(if (empty? new-keys)\n\t\tnew-map\n\t\t(recur (assoc new-map (first new-keys) val) val (rest new-keys)))) {})","problem":156,"user":"51ec9114e4b069f463c22ccd"},{"problem":156,"code":"(fn add-defaults\n      [default coll]\n      (into {} (map (fn [x] {x default}) coll)))","user":"54058126e4b0addc1aec6667"},{"code":"(fn [default args]\n (zipmap args (repeat default)))","problem":156,"user":"4e356d2b535deb9a81d77f2d"},{"problem":156,"code":"(fn [defval, col] (into {} (for [i col] [i defval])))","user":"53a68c5ae4b0ef122a8689c8"},{"problem":156,"code":"(fn [x y] (reduce conj (map #(assoc {} % x) y)))","user":"53d8da61e4b0e771c3025471"},{"problem":156,"code":"(fn [default coll] (into {} (map #(identity {% default}) coll)))","user":"55dbed2fe4b050e68259b3a6"},{"problem":156,"code":"(fn \n  [ d v]\n  (into {} ( map #( conj ( conj [] %) d) v)))","user":"516d227fe4b06f078fab252d"},{"problem":156,"code":"(fn defmap [el remaining]\n     (if (empty? (rest remaining))\n       {(first remaining) el}\n       (merge {(first remaining) el}\n              (defmap el (rest remaining)))))","user":"53b12c76e4b047364c04448a"},{"problem":156,"code":"(fn\n  [defv llist]\n  (reduce #(assoc %1 %2 defv) {} llist))","user":"561ca6ebe4b064ca9f4b169c"},{"code":"#(loop [d %1\n        toadd %2\n        res {}]\n   (if (empty? toadd)\n   res\n   (recur d (rest toadd) (assoc res (first toadd) d))))","problem":156,"user":"51f28a64e4b0210f90e7454e"},{"problem":156,"code":"#(apply assoc {} (interleave %2 (repeat %1) ))","user":"53ada652e4b047364c04446d"},{"code":"(fn [val keys]\n  (reduce merge\n          (map (fn [k] {k val}) keys)))","problem":156,"user":"5225271fe4b01819a2de42f9"},{"problem":156,"code":"(fn [val keys]\n   (zipmap keys (seq (repeat (count keys) val))))","user":"58d5c245e4b03c36ff7e5964"},{"problem":156,"code":"(fn [v coll](into {} (for [x coll] [x v])))","user":"5ee738dee4b029a2061bbea2"},{"problem":156,"code":"(fn [a b] (loop [v a k b result {}] (if-not (empty? k) (recur v (rest k) (conj result {(first k) v})) result )))","user":"4f035fbe535dcb61093f6a92"},{"code":"#(into {} (for [x %2] {x %}))","problem":156,"user":"4ffa8affe4b0678c553fc3bd"},{"problem":156,"code":"(fn [val all-keys]\n  (loop [res {} keys all-keys]\n    (if (empty? keys)\n      res\n      (recur (assoc res (first keys) val) (rest keys))\n    )\n  )\n)","user":"545b77f5e4b01be26fd74653"},{"problem":156,"code":"(fn m [x l]\n    (if (empty? l)\n      {}\n      (assoc (m x (rest l)) (first l) x)))","user":"603ae21de4b0d5df2af222fb"},{"problem":156,"code":"#(into (hash-map) (map vector %2 (repeat (count %2) %1)))","user":"578e535de4b0ebec4cfb7580"},{"problem":156,"code":"(fn [default_val input] (reduce\n                         (fn [new-map inp]\n                           (assoc new-map inp default_val))\n                         {}\n                         input))","user":"605b7085e4b079a07f8593fa"},{"problem":156,"code":"(fn [v coll]\n  (reduce #(conj %1 [%2 v]) {} coll))","user":"55f4ef68e4b06e875b46ce82"},{"code":"(fn [default keys-seq]\n  (into {} (map #(vector % default) keys-seq)))","problem":156,"user":"51197750e4b057cba170bc99"},{"problem":156,"code":"(fn [x col]\n(into {} (for [element col]\n  (hash-map element x))))","user":"54dd1c2be4b024c67c0cf790"},{"problem":156,"code":"(fn [a b] (zipmap b [a a a]))","user":"576ffcb9e4b0979f89651592"},{"problem":156,"code":"(fn [x y] \n  (into {} (for [y y]\n    (assoc {} y x))))","user":"52cfb277e4b07d0d72b273ac"},{"problem":156,"code":"(fn [default array]\n  (reduce\n\t(fn [h elem]\n      (into h {elem default}))\n   (sorted-map)\n   array))","user":"598e7998e4b02b9968b84d34"},{"problem":156,"code":"#(into {} (map (fn[x] ((comp vec list) x %1)) %2))","user":"55f6c0e2e4b06e875b46ce99"},{"code":"(fn [d k] (apply conj {} (map #(vector % d) k)))","problem":156,"user":"4daf907aedd6309eace4d17b"},{"problem":156,"code":"(fn [def-val key-vals] (loop [key-map {}\n                                remaining key-vals]\n    (if (empty? remaining) key-map\n      (recur (assoc key-map (first remaining) def-val)\n                (rest remaining)))))","user":"56df62b3e4b0ca2494a095ef"},{"problem":156,"code":"(fn [defaultval keys] (let [key-map (for [key keys] {key defaultval})\n                                   map-set {}]\n                               (reduce #(conj %1 %2) map-set key-map)))","user":"5cfabf53e4b0cc9c91588148"},{"problem":156,"code":"(fn [defval values]\n  (reduce #(assoc %1 %2 defval) {} values))","user":"55485b2ee4b0a04f79299559"},{"problem":156,"code":"#(into {} (map vector  %2 (repeat %1)))","user":"57e6997ee4b0bfb2137f5af0"},{"code":"(fn [default coll]\n  (loop [d default, c coll, acc {}]\n    (if (empty? c)\n      acc\n      (recur d (rest c) (assoc acc (first c) d)))))","problem":156,"user":"50a83794e4b054305ba5a831"},{"code":"(fn [i v] (into {} (map (fn [x] (conj [] x i)) v)))","problem":156,"user":"51a3c9cde4b0e77c4ca60bf9"},{"problem":156,"code":"(fn [x coll] (apply hash-map (interleave coll (repeat x))))","user":"55f3802be4b06e875b46ce5f"},{"code":"(fn test-map [v ks] (reduce merge {} (map #(hash-map % v) ks)))","problem":156,"user":"4ec12516535dfed6da9c6da7"},{"problem":156,"code":"(fn [x y]\n  (into {} (for [y-item y]\n              [y-item x])))","user":"56de78fde4b0ea9b8538f83c"},{"code":"(fn [x se] (apply array-map (mapcat #(list % x) se)))","problem":156,"user":"5180a93fe4b0e3fc13e244e8"},{"code":"(fn default-map [default m]\n  (zipmap m (map (constantly default) m)))","problem":156,"user":"501b1a8ee4b0b12d9c5f4d81"},{"problem":156,"code":"(fn [dval col]\n  (loop [vect col\n         so-far {}]\n    (if (empty? vect)\n      so-far\n      (recur (rest vect) (assoc so-far (first vect) dval)))))","user":"55907e8fe4b0277789237672"},{"code":"#(apply hash-map (mapcat list %2 (repeat %)))","problem":156,"user":"4ec07699535dfed6da9c6da2"},{"problem":156,"code":"(fn [v ks]\n  (into {} (for [k ks] [k v])))","user":"58d960f9e4b03c36ff7e59c2"},{"problem":156,"code":"(fn rek-def [v ks]\n    (when (not-empty ks)\n      (assoc (rek-def v (rest ks)) (first ks) v )))","user":"503c90aae4b06c4e0e1fa24b"},{"problem":156,"code":"#(reduce (fn [m, v] (assoc m v %1)) {} %2)","user":"5d63f1c2e4b0c9e5857d502b"},{"code":"#(apply conj (for [k %2] {k %1}))","problem":156,"user":"4f876d51e4b033992c121c5a"},{"problem":156,"code":"(fn [default list] (zipmap list (repeat default)))","user":"5e8308abe4b09a7a73c8bbb4"},{"problem":156,"code":"(fn [el v] (reduce #(assoc %1 %2 el ) {} v))","user":"53c1ce3ee4b00fb29b221268"},{"code":"(fn [d, l] \n  (into {}\n    (map (fn [a] {a d}) l)\n))","problem":156,"user":"4f8b05d2e4b02e764a0a5176"},{"code":"(fn [d v] \n  (apply hash-map (interleave v (repeat d))))","problem":156,"user":"50112acee4b0d82cfac69f4c"},{"problem":156,"code":"#(into {} (set (for [y %2] [y %1])))","user":"602f8400e4b0d5df2af22299"},{"problem":156,"code":"(fn [d ks]\n  (reduce (fn [acc x] (into acc [[x d]]))\n          {}\n          ks))","user":"56483562e4b0284900eef629"},{"problem":156,"code":"(fn md [v k]\n  (if (= 0 (count k))\n    {}\n    (assoc (md v (rest k)) (first k) v)))","user":"56327168e4b0bfe05bf117a5"},{"problem":156,"code":"(fn [y xs] (reduce #(assoc % %2 y) {} xs))","user":"58840023e4b0f1effa3b768b"},{"code":"(fn [val keys] (reduce conj (map #(hash-map % val) keys)))","problem":156,"user":"53372d7de4b0e30313ee6c87"},{"problem":156,"code":"(fn [v keys]\n  (reduce (fn [res el]\n            (assoc res el v)) '{} keys))","user":"553638bae4b09218d5f44fba"},{"problem":156,"code":"(fn [default sequ]\n  (->> default\n       repeat\n       (interleave sequ)\n       (apply hash-map)))","user":"554b8b6be4b0a04f7929958b"},{"code":"(fn [x y] (zipmap y (cycle [x])))","problem":156,"user":"52cdc676e4b07d0d72b2737f"},{"problem":156,"code":"(fn mappify [default keyseq]\n  (into {} (map #(assoc {} % default) keyseq))\n)","user":"53b685e0e4b047364c0444c7"},{"code":"(fn [a,x] (reduce #(assoc %1 %2 a) {} x))","problem":156,"user":"5007eabde4b0b17c647f5229"},{"problem":156,"code":"(fn [value, key] (zipmap key (repeat value)))","user":"548018cde4b0c51c1f4d7325"},{"code":"(fn [default names] \n  (reduce (fn [a b] (merge a b))\n          (map (fn [n]\n                 {n default}) names)))","problem":156,"user":"51db0aefe4b06aa4d4669a9c"},{"problem":156,"code":"#(reduce (fn[m k] (assoc m k %1)) {} %2 )","user":"53a83c74e4b047364c044426"},{"problem":156,"code":"(fn defval [d col]\n  (reduce #(assoc %1 %2 d) (sorted-map) col))","user":"544257b4e4b032a45b869379"},{"problem":156,"code":"(fn [a b](reduce #(assoc %1 %2 a) {} b))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn [default keyseq] (reduce (fn [mp ky] (assoc mp ky default)) {} keyseq))","problem":156,"user":"5267f871e4b03e8d9a4a7191"},{"problem":156,"code":"#(into (hash-map) (for [x %2] [x %1]))","user":"568513c4e4b04eec3ec5cfc5"},{"problem":156,"code":"(fn [default keys] (reduce (fn [map x] (conj map {x default})) {} keys))","user":"55adcc8fe4b03311e7b732ab"},{"problem":156,"code":"(fn [v xs] (into {} (map #(vector % v) xs)))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":156,"code":"(fn [default lst] \n  \t(loop [x (seq lst) result {} ] \n      (if x\n        (recur (next x) (conj result [(first x) default]) )\n        result)\n    )\n)","user":"5f9cbbeae4b0715f5002d828"},{"problem":156,"code":"(fn mapdefault [d sq]\n  (zipmap sq (repeat d)))","user":"553900d4e4b09218d5f44fe5"},{"code":"(fn [x y] (into {} (map #(vec (list % x)) y)))","problem":156,"user":"5151c184e4b03e678e393add"},{"code":"(fn [v ks] (zipmap ks (repeat (count ks) v)))","problem":156,"user":"50503117e4b0a02f9cffdeb5"},{"code":"(fn zip [d x] (zipmap x (for [i x] d)))","problem":156,"user":"4fea08a9e4b0547ebccb2484"},{"problem":156,"code":"(fn\n  [v ks]\n  (loop [xs ks\n         m {}]\n    (if (= 1 (count xs))\n      (assoc m (first xs) v)\n      (recur (rest xs) (assoc m (first xs) v)))))","user":"54ab5644e4b09f271ff37cc6"},{"problem":156,"code":"(fn default [x y] (if (= (count y) 2) (hash-map (first y) x, (second y) x) (hash-map (first y) x, (second y) x, (last y) x)))","user":"5589a735e4b059ccff29b206"},{"problem":156,"code":"(fn \n  [a lst]\n  (let [b (zipmap lst (repeat (count lst) a))]\n    b))","user":"59636cc2e4b066ee0a44b0c7"},{"problem":156,"code":"#(loop [val %1 seq %2 mp {}]\n   (if (empty? seq) mp (recur val (rest seq) (assoc mp (first seq) val))))","user":"592bb806e4b072a2710fcf46"},{"code":"(fn [val s]\n    (reduce #(assoc %1 %2 val ) {} s)\n    )","problem":156,"user":"51b5a6e0e4b0f094dd986fce"},{"problem":156,"code":"(fn [defval vecs] \n                    (apply conj (map (fn [k]\n                                       {k defval}) \n                                     vecs)))","user":"5251b11be4b0541d1855b87b"},{"code":"(fn [d ks] (let [len (count ks)]\n             (zipmap ks (take len (repeat d)))))","problem":156,"user":"50ff5887e4b017584cb41ccd"},{"code":"(fn [d k] (zipmap k (repeat (count k) d)))","problem":156,"user":"4ffb59f6e4b0678c553fc3cf"},{"problem":156,"code":"(fn [default ks] (apply hash-map (interleave ks (repeat default))))","user":"59342e52e4b072a2710fd06b"},{"code":"(fn [x coll]\n  \t(reduce #(assoc %1 %2 x) {} coll))","problem":156,"user":"51780f88e4b03d69594194c9"},{"code":"(fn mapDefaultSetter [default Sequence] (loop [x default y Sequence z (hash-map)] \n(if (empty? y) z (recur x (rest y) (conj z [(first y) x])))))","problem":156,"user":"4f9336ece4b0dcca54ed6cb7"},{"code":"(fn [v k]\n (apply hash-map (interleave  k (repeat v))))","problem":156,"user":"4ff548dee4b0678c553fc368"},{"code":"(fn[v z] (into {} (for [x z y[v]] {x y})))","problem":156,"user":"52bc6cb2e4b07a9af57922f5"},{"code":"(fn [value keys]\n  (zipmap keys (repeat value)))","problem":156,"user":"5080a697e4b01a93d3f38e49"},{"code":"(fn setdefaults [defval thekeys] (loop [v defval k thekeys acc {}]\n                                   (if (empty? k)\n                                     acc\n                                     (recur v (rest k) (assoc acc (first k) v)))))","problem":156,"user":"50f089d1e4b0c5f4fa5ddb67"},{"code":"(fn [d k]\n  (loop [k k m {}]\n    (if (empty? k)\n      m\n      (recur (rest k) (assoc m (first k) d)))))","problem":156,"user":"50843a4ae4b0c98812d0788b"},{"problem":156,"code":"(fn [n s] (apply conj (map #(hash-map % n) s)))","user":"54dbcbbde4b024c67c0cf774"},{"problem":156,"code":"(fn [val ks] (reduce into {} (map #(assoc {} % val) ks)))","user":"5feb6850e4b05ac5b16ea1b8"},{"problem":156,"code":"(fn p-156\n  [keyy l]\n  (loop [s {}\n         l l]\n    (if (empty? l)\n      s\n      (recur (merge s {(first l) keyy}) (rest l)))))","user":"56df636ae4b0ca2494a095f4"},{"problem":156,"code":"(fn [val keys] (into {} (map #(vector % val) keys)))","user":"575ddfd1e4b02ea11479938d"},{"problem":156,"code":"(fn [d m] (into {} (map #(vector %2 %1) (cycle [d]) m)))","user":"5d06499ae4b0cc9c915881ec"},{"problem":156,"code":"(fn [default coll]\n  (zipmap coll (repeat (count coll) default)))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":156,"code":"(fn [x c]\n  (apply assoc {} (interleave c (repeat (count c) x))))","user":"4dd1de4d535dae65d5c462d7"},{"problem":156,"code":"(fn [x seq]\n  (into {}\n   (map (fn [s] {s x})\n        seq)))","user":"59cd351ee4b0ef0a1e9b5b35"},{"code":"(fn [d s]\n  (into {} (for [k s] {k d})))","problem":156,"user":"50aab057e4b056ee0193586b"},{"problem":156,"code":"(fn [val keys] \n   (reduce (fn [m k] (assoc m k val)) {} keys))","user":"56391b7ce4b0bfe05bf117ef"},{"problem":156,"code":"(fn [k ls]\n  (into {} (map (fn [l] [l k]) ls)))","user":"531c6e72e4b08068f379eda0"},{"problem":156,"code":"(fn [default coll]\n  (apply hash-map (interleave coll (repeat default))))","user":"597f8c93e4b0dbe32238d0c1"},{"problem":156,"code":"(fn [default col]\n  (zipmap col (repeat (count col) default)))","user":"56326e03e4b0bfe05bf117a4"},{"problem":156,"code":"(fn [defVal coll]\n  (reduce #(assoc %1 %2 defVal) {} coll))","user":"5fce0cc5e4b07e53c2f3f000"},{"problem":156,"code":"(fn build-default-map [v lst] (reduce (fn expand-assoc [m k] (assoc m k v)) {} lst))","user":"56912f93e4b0dcc4269f40ef"},{"problem":156,"code":"#_(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))\n#(zipmap %2 (repeat %1))","user":"5de12192e4b0948ae9d9aded"},{"problem":156,"code":"(fn [k c]\n  (loop [result {}\n         remaining c]\n    (if (empty? remaining)\n      result \n      (recur (into result [[(first remaining) k]]) (rest remaining)))))","user":"56646a7fe4b0e91d5f5c5657"},{"code":"(fn [deflt aseq] (into {} (for [i aseq] {i deflt})))","problem":156,"user":"53716539e4b0fc7073fd6eb1"},{"problem":156,"code":"(fn [d l] (apply merge (map #(hash-map % d) l)))","user":"5f5aee4fe4b0a0bc16850aaa"},{"code":"(fn [default keys] (zipmap keys (repeat default )))","problem":156,"user":"4ffee04de4b0678c553fc3f6"},{"problem":156,"code":"(fn f [d c]\n  (apply merge (map #(hash-map % d) c)))","user":"53c0bc5fe4b00fb29b221257"},{"problem":156,"code":";;(fn [default xs] (into {} (map #(hash-map % default) xs)))\n#(zipmap %2 (repeat %1))","user":"5a67cedbe4b0512ff01cd9ee"},{"problem":156,"code":"(fn [default mapKeys] \n\t(reduce (fn [returnValue part] (into returnValue {part default} )) {} mapKeys)\n      \n)","user":"5c43ccdae4b0e06e1360a36f"},{"code":"(fn defmap [default keys] \n  (if (empty? keys)\n    {}\n    (assoc (defmap default (rest keys)) (first keys) default)\n  )\n)","problem":156,"user":"51ac61c8e4b09397d510976b"},{"problem":156,"code":"(fn [v ks]\n  (apply merge (map #(hash-map % v) ks)))","user":"5382b433e4b06839e8705ed7"},{"code":"(fn [e l] (zipmap l (doall (repeat (count l) e))))","problem":156,"user":"4faac363e4b081705acca200"},{"code":"(fn [x & [y]] (zipmap y (repeat x)))","problem":156,"user":"4f58d922e4b0a7574ea71857"},{"problem":156,"code":"(fn [v ks]\n  (loop [m {}\n         ks ks]\n    (if (seq ks)\n      (recur (assoc m (first ks) v) (rest ks))\n      m)))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":156,"code":"(fn [x y]\n  (loop [f x\n         s y\n         r {}]\n    (if (empty? s)\n      r\n      (recur f (rest s) (assoc r (first s) f)))))","user":"5af74644e4b0cc2b61a3bcc2"},{"problem":156,"code":"(fn [default-value keys]\n  (apply conj (map #(hash-map % default-value) keys)))","user":"57ff8770e4b0a837a8b30c21"},{"problem":156,"code":"(fn [d kys] (reduce #(assoc %1 %2 d) {} kys))","user":"584d8724e4b0b7285a6f4e3e"},{"problem":156,"code":"(fn [v ks]\n  (into {} (map vector ks (repeat v))))","user":"5b62ff3ce4b0c6492753e72a"},{"problem":156,"code":"(fn [d s]\n  (zipmap s (repeat d)))","user":"567f2bc6e4b0feffd0d18ebb"},{"problem":156,"code":"(fn [val coll]\n  (let [val (into [] (take (count coll) (repeat val)))]\n    (zipmap coll val)))","user":"5dd7dec1e4b0948ae9d9ad8d"},{"code":"(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))","problem":156,"user":"50618c62e4b0a30dc9a35d33"},{"code":"(fn [val ks]\n  (into {} (for [x ks] [x val])))","problem":156,"user":"502bb7c0e4b0194ad32ea1a3"},{"code":"(fn[val list] (into {}(for[x list] {x val})))","problem":156,"user":"52840004e4b0239c8a67adc1"},{"problem":156,"code":"(fn [val keys-vec]\n  (zipmap keys-vec (repeat (count keys-vec) val)))","user":"5c3cd80fe4b0d62ef62d9faa"},{"problem":156,"code":"(fn [default coll]\n  (reduce (fn [acc x]\n            (assoc acc x default)) {} coll))","user":"57434103e4b0c285004e8a9e"},{"problem":156,"code":"(fn maps-def\n  [value keys]\n  (loop [result {} k keys]\n    (if (empty? k)\n      result\n      (recur (assoc result (first k) value) (rest k)))))","user":"5746cb28e4b009280f9f2b68"},{"problem":156,"code":"(fn [value keysmap] \n  (zipmap keysmap \n          (repeat (count keysmap) value)))","user":"57f8153de4b0d3187e900916"},{"problem":156,"code":"(fn [d v] (apply merge (map #(hash-map % d) v)))","user":"5cacc9e0e4b026601754b862"},{"problem":156,"code":"(fn adddef [dval ks] (zipmap ks (repeat dval)))","user":"5a487d9ce4b05d388ecb6b67"},{"code":"(fn [_value _keys]\n  (loop [result {}, remaining-keys _keys]\n    (if (empty? remaining-keys) result\n      (recur (assoc result (first remaining-keys) _value) (rest remaining-keys)))))","problem":156,"user":"52bc6f5ee4b07a9af57922f6"},{"problem":156,"code":"(fn fill [x coll]\n  (into {} (map #(vector % x) coll)))","user":"5c411df3e4b08cd430848ebf"},{"problem":156,"code":"(fn [default-val collection] \n  (reduce\n   #(assoc %1 %2 default-val)\n   {}\n   collection))","user":"5492164ee4b0b312c081ff3e"},{"problem":156,"code":"(fn this [x y]\n     (cond\n       (= y ()) {}\n       :else (conj (this x (rest y))[(first y) x])\n       )\n     \n     )","user":"59165082e4b09b4ee5954b88"},{"problem":156,"code":"(fn [val coll]\n  (reduce #(assoc %1 %2 val) {} coll))","user":"54159032e4b01498b1a719f5"},{"code":"#((fn defl [k d m]\n    (if (empty? k) \n      m\n      (defl (rest k) d (assoc m (first k) d))\n              )) %2 %1 {} )","problem":156,"user":"529ce629e4b04e0c58e87b6e"},{"problem":156,"code":";(fn [x col]\n;  (reduce merge (map #(assoc {} % x) col)))\n\n#(zipmap %2 (repeat %1))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":156,"code":"(fn [a xs] (apply hash-map (interleave xs (repeat a))))","user":"56967bc0e4b0dcc4269f4131"},{"problem":156,"code":"(fn [d col] (zipmap col (repeat d)))","user":"53c29ed1e4b00fb29b221270"},{"problem":156,"code":"(fn [default the-list-of-keys] (zipmap the-list-of-keys (cycle (list default))))","user":"54cb3497e4b057c6fda3a272"},{"code":"(fn [d keyz] (zipmap keyz (repeat (count keyz) d)))","problem":156,"user":"52f182d8e4b05e3f0be25eed"},{"problem":156,"code":"(fn [vlyu coll]\n  (loop [nmap {} clect coll]   \n    (if (empty? clect)\n      nmap \n      (recur (assoc nmap (first clect) vlyu)\n             (rest clect)))))","user":"55810c73e4b05c286339e0f2"},{"problem":156,"code":"(fn [default m]\n  (apply merge (map #(hash-map % default) m)) )","user":"59a80652e4b0bcf4e9a43aeb"},{"problem":156,"code":"#(loop[n 0, m []]\n   (if(= n (count %2))\n     (apply array-map m)\n     (recur(inc n)(conj (conj m (nth %2 n)) %1))))","user":"5654e8ade4b0f9d632dd848e"},{"problem":156,"code":"(fn [arg arg_list]\n  (reduce (fn [arg1 arg2] (assoc arg1 arg2 arg)) \n          {} arg_list\n   )\n  )","user":"5ae71f14e4b0837691e92ca7"},{"code":"(fn [default array] (zipmap array (repeat default)))","problem":156,"user":"536673a8e4b0243289761e76"},{"problem":156,"code":"(fn [d coll]\n   (apply hash-map\n     (apply concat\n       (for [e coll]\n         [e d]))))","user":"56f9c7c6e4b07572ad1a88ba"},{"code":"(fn [df kys]\n  (apply merge (for [k kys] (assoc {} k df))))","problem":156,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn [d ks] (into {} (map #(vector % d) ks)))","problem":156,"user":"4ee528fb535d1385b2869d87"},{"code":"#(loop [m       {}\n        default %1\n        col     %2]\n   (if (seq col)\n     (recur (assoc m (first col) default) default (rest col))\n     m))\n\n#_#(zipmap %2 (repeat %1))","problem":156,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":156,"code":"(fn [el coll] \n  (reduce #(assoc %1 %2 el) {} coll)\n  )","user":"5df75fd8e4b0a607a9a45c92"},{"problem":156,"code":"(fn [default seq]\n   (zipmap seq (repeat default)))","user":"5c34cb2ee4b0d62ef62d9f59"},{"problem":156,"code":"(fn [default collection]\n   (into (sorted-map) (map #(assoc {} % default) collection))\n   )","user":"5f08d0c5e4b0cf489e8d7f62"},{"problem":156,"code":"(fn [v m] \n  (loop [nm {} mp m ]\n    (if (empty? mp) \n     nm\n     (recur \n      (assoc nm (first mp) v)\n      (rest mp))\n     )))","user":"56d439d4e4b0ea9b8538f7b6"},{"problem":156,"code":"(fn [d ks]\n  (loop [ks ks\n         result {}]\n    (if (empty? ks)\n      result\n      (let [[k & rest] ks]\n        (recur rest (conj result {k d}))))))","user":"585aeddbe4b0f14aab7c875b"},{"problem":156,"code":"(fn [v xs] (apply hash-map (mapcat (fn [x y] [x y]) xs (cycle [v]))))","user":"54801febe4b0c51c1f4d733c"},{"code":"(fn [d k] (into {} (map #(assoc {} %1 d) k)))","problem":156,"user":"4ff78679e4b0678c553fc392"},{"problem":156,"code":"(fn\n  [in-default-value in-map-keys]\n\t(loop\n      [default-value in-default-value\n       map-keys in-map-keys\n       result-map {}]\n      (if (= (count map-keys) 0)\n        result-map\n      \t(recur default-value\n        \t(rest map-keys)\n            (conj result-map {(first map-keys) default-value})))))","user":"5bdb0b4ce4b0ed4b8aab4c10"},{"problem":156,"code":"(fn f [d s]\n  (reduce (fn [a b] (conj a (hash-map b d))) '{} s))","user":"563d12f9e4b0bfe05bf11845"},{"problem":156,"code":"(fn [default all-keys] (apply merge (map (fn [one-key] (hash-map one-key default)) all-keys)))","user":"56066e82e4b08b23635d3173"},{"problem":156,"code":"(fn [v coll] (into {} (map #(vector % v) coll)))","user":"5cec07fce4b0a17bb84e2bf0"},{"problem":156,"code":"(fn [default-value a-seq]\n  (->> a-seq\n       (map #(vector % default-value))\n       (into {})))","user":"55995fa7e4b031d6649c9ba9"},{"code":"(fn [default-value ks]\n     (apply hash-map\n            (interleave ks\n                        (repeat (count ks)\n                                default-value))))","problem":156,"user":"516385cee4b055933a9ca02d"},{"problem":156,"code":"(fn [a b] ( zipmap b (repeat a)))","user":"59346d29e4b072a2710fd077"},{"problem":156,"code":"(fn [v l]\n\t(into (sorted-map)\n\t  \t(for [x l\n             :let [y {x v}]]\n         y)\n  \t)\n)","user":"548018dbe4b0c51c1f4d732a"},{"problem":156,"code":"(fn [x ks] (zipmap ks (repeat x)))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn [x xs]\n  (reduce #(conj {%2 x} %1) {} xs))","problem":156,"user":"4db883e1535d1e037afb2198"},{"code":"(fn [x, y] (zipmap y (for [l y] x)))","problem":156,"user":"4dd579b5535dae65d5c462ea"},{"problem":156,"code":"(fn [val keys]\n   (into {} (map (fn [key] (hash-map key val)) keys)))","user":"5bc7f2d6e4b07a9b28b100b7"},{"code":"(fn [num coll]\n  (reduce #(assoc % %2 num) {} coll))","problem":156,"user":"4efec33f535dcb61093f6a2a"},{"code":"(fn [default keys]\n    (zipmap keys (repeat (count keys) default)))","problem":156,"user":"4fdd7d86e4b05e33b9224f7b"},{"code":"(fn default-map\n  ; Problem 156\n  [val keys-array]\n  (let [keys-length (count keys-array)\n        default-array (repeat keys-length val)]\n    (zipmap keys-array default-array)))","problem":156,"user":"4edfb618535d10e5ff6f5343"},{"code":"(fn [x y]\n  (into {} (for [a y]\n             {a x})))","problem":156,"user":"4ef2d6c5535dced4c769f222"},{"problem":156,"code":"(fn m [d ls]\n  (if (empty? ls)\n  {}\n  (conj (m d (rest ls)) [(first ls) d])))","user":"58b997afe4b0888cdc949cd1"},{"problem":156,"code":"#(into {} (for [x %2] (hash-map x %1)))","user":"55aacbeee4b0988bba2ad951"},{"problem":156,"code":"(fn [d coll]\n   (reduce #(assoc %1 %2 d) {} coll))","user":"526c669be4b03e8d9a4a728f"},{"code":"(fn [deflt, ks] \n   (reduce (fn [arg-1 arg-2] (merge arg-1 {arg-2 deflt})) {} ks))","problem":156,"user":"51f4d46ee4b0fca5e8b48243"},{"problem":156,"code":"(fn [d, k] (into (hash-map) (map (fn [x] [x d]) k)))","user":"5afa3590e4b0cc2b61a3bcea"},{"problem":156,"code":"(fn [x ys]\n  (let \n   [mapdef (fn mapdef [x ys]\n     (if (nil? (first ys)) \n       nil\n       (concat [(first ys) x] (mapdef x (rest ys)))\n     )\n   )]\n   (apply hash-map (mapdef x ys))\n  )\n)","user":"56433d34e4b08d4f616f5f23"},{"code":"(fn [value keys]\n  (loop [keys keys result {}]\n    (if (empty? keys)\n      result\n      (recur (rest keys) (assoc result (first keys) value)))))","problem":156,"user":"4db8d37d535d1e037afb219c"},{"code":"(fn [x y] (apply hash-map (interleave y (repeat x))))","problem":156,"user":"4ea4e98a535d7eef308072ce"},{"code":"#(zipmap %2 \n  (into [] (take (count %2) (repeat %1))))","problem":156,"user":"4fbfbd4fe4b081705acca31c"},{"problem":156,"code":"(fn [def-val vtor] (reduce (fn [base x] (conj base {x def-val})) {} vtor))","user":"5461873de4b01be26fd746a3"},{"problem":156,"code":"(fn [v s]\n  (reduce (fn [acc i]\n            (conj acc [i v])) {} s))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":156,"code":"(fn [d v] (reduce (fn [x y] (assoc x y d)) {} v))","user":"54f8b6f4e4b01ecee9d8882c"},{"problem":156,"code":"(fn [k sq] (into {} (map (fn [v] {v k}) sq)))","user":"5ecc0831e4b016b56eae058c"},{"problem":156,"code":"(fn [v k](apply merge (map #(hash-map % v) k)))","user":"564b1ff8e4b0284900eef663"},{"problem":156,"code":"(fn [default k]\n  (->>\n   (map (fn [i] {i default}) k)\n   (into {})))","user":"57bfffc7e4b05aa3c4741c8a"},{"problem":156,"code":"(fn [default data] (reduce #(assoc %1 %2 default) {} data))","user":"5d47f45de4b07c84aa5ae6b4"},{"problem":156,"code":"#(reduce (fn [m a] (assoc m a %1)) {} %2)","user":"5336ca32e4b0e30313ee6c80"},{"code":"(fn [x ks]\n  (into {} (map (fn [k] [k x]) ks)))","problem":156,"user":"4dc0ff08535d020aff1edf84"},{"code":"(fn [d c] (into {} (map (fn [k] [k d]) c)))","problem":156,"user":"4ede8789535d10e5ff6f5337"},{"problem":156,"code":"(fn create-map [default keys]\n  (reduce (fn [coll val] (into coll {val default}))\n          {}\n          keys))","user":"55586905e4b0deb715856e2b"},{"problem":156,"code":"(fn [default-value keys-seq] (zipmap keys-seq (repeat (count keys-seq) default-value)))","user":"5ec0de29e4b00a66d4a9528e"},{"problem":156,"code":"(fn [d vs] (into (sorted-map) (map (fn [v] {v d}) vs)))","user":"5069874de4b01dc6af13f832"},{"code":"(fn [x y] \n  (loop [m y result (hash-map)]\n\t\t(if(empty? m) result\n    (recur (rest m) (conj result (hash-map (first m) x))) \n    )\n  )\n)","problem":156,"user":"4f99bf3ee4b0dcca54ed6d01"},{"code":"(fn [d m] (reduce (fn [n k] (assoc n k d)) {} m))","problem":156,"user":"517bc969e4b07ef0e56148d0"},{"code":"(fn[x y](zipmap y (repeat (count y) x)))","problem":156,"user":"4f32135ae4b0d6649770a08e"},{"problem":156,"code":"(fn d_map\n  [default m]\n  (into {} (map (fn [x] [x default]) m))\n)","user":"5f6b8222e4b02876ed9fd052"},{"problem":156,"code":"#(reduce (fn [final-map akey]\n         \t(into final-map {akey %1}))\n         {}\n         %2)","user":"57e6ed35e4b0bfb2137f5af5"},{"problem":156,"code":"(fn tt\n  [dv [x & xs]] \n  (let [res {}]\n    (if (nil? xs)\n      (conj {x dv} res)\n      (conj {x dv} (tt dv xs)))))","user":"55f01316e4b06e875b46ce1a"},{"problem":156,"code":"(fn [mydef myseq] (reduce #(assoc %1 %2 mydef) {} myseq))","user":"55076bf6e4b021ccfedb96a6"},{"code":"(fn [x y] \n  (reduce conj (map #(assoc {} % x) y )))","problem":156,"user":"535056a7e4b084c2834f4adb"},{"code":"#( zipmap %2 (repeat %))","problem":156,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"(fn [d ls]\n  (reduce #(assoc %1 %2 d) {} ls)\n )","problem":156,"user":"4e6a4edd535d8ccf87e9fec4"},{"problem":156,"code":"(fn [arg list] (reduce (fn [prev curr] (assoc prev curr arg)) {} list))","user":"5984e7dee4b021a7a535fe43"},{"problem":156,"code":"(fn defaults [default values]\n(into {} (map #(assoc {} % default) values))\n  )","user":"5312807fe4b08068f379ecfc"},{"code":"#(apply conj (for [x %2] {x %}))","problem":156,"user":"5338645ee4b0e30313ee6c99"},{"problem":156,"code":"(fn [v k]\n  (reduce #(into % {%2 v}) {} k))","user":"56eda144e4b04a395b9a0446"},{"problem":156,"code":"(fn [n coll](apply merge (map #(hash-map % n) coll)))","user":"55d1a721e4b0e31453f64a47"},{"problem":156,"code":"(fn [k items] (reduce #(conj {%2 k} %1) {} items))","user":"60031abfe4b074f607df6637"},{"code":"(fn [item lst] (reduce #(assoc %1 %2 item) {} lst))","problem":156,"user":"4fecebe1e4b0681fd128dcac"},{"code":"#(zipmap %2 (repeat (.size %2) %1))","problem":156,"user":"504e397ee4b0f6ff3350c485"},{"problem":156,"code":"(fn [d m] \n  (reduce \n    (fn [mp el] (assoc mp el d)) \n    {} m\n  )\n)","user":"552a672de4b0ffed3738f954"},{"problem":156,"code":"(fn [x xs] (apply assoc {} (interleave xs (repeat x))))","user":"552b6ddbe4b0ffed3738f965"},{"problem":156,"code":"(fn [def-val coll] (reduce #(assoc %1 %2 def-val) {} coll))","user":"551a380fe4b091ff45eda994"},{"problem":156,"code":"(fn make-map [v coll]\n  (reduce (fn [de ele] (conj de [ele v])) {} coll))","user":"57606cfde4b08062f99a4e95"},{"problem":156,"code":"(fn [default ks] \n  (let [defs (iterate identity default)]\n  (apply hash-map (interleave ks defs))))","user":"5c13da47e4b01240ff5671a6"},{"problem":156,"code":"(fn [x coll] (zipmap coll (repeat x)) )","user":"5db1e863e4b010eb3c36cd0d"},{"code":"(fn [v ks] (into {} (for [i ks] [i v])))","problem":156,"user":"518279abe4b0353c468deb65"},{"problem":156,"code":"(fn mapdefault\n  [default ks]\n  (let [defaults (repeat (count ks) default)]\n  \t(into {} (map vector ks defaults))))","user":"56e99ec8e4b04a395b9a03fb"},{"problem":156,"code":"(fn [default-value coll]\n  (apply hash-map(interleave coll(repeat default-value))))","user":"560978d0e4b0053d1b86c7de"},{"code":"#(apply hash-map (interleave %2 (iterate identity %1)))","problem":156,"user":"5106bc8ae4b01150e115ebec"},{"problem":156,"code":"(fn [d ks] (let [fin (fn [x y] {y x})] \n             (into {} \n                   (map\t(partial fin d)\tks)\n                   )))","user":"59ff9424e4b01bb0ae8afd24"},{"code":"(fn [default map-keys] (loop [m {} k map-keys d default] (if (empty? k) m (recur (conj m {(first k) d}) (rest k) d))))","problem":156,"user":"5245f167e4b09dbe66b5617e"},{"problem":156,"code":"(fn rec [default key_seq]\n  (if (empty? key_seq)\n    {}\n    (assoc (rec default (rest key_seq)) (first key_seq) default)))","user":"5d64013ce4b0c9e5857d502d"},{"code":"(fn[v col] (zipmap col (map (constantly v) col)))","problem":156,"user":"506ee0f4e4b09350ab4199f2"},{"problem":156,"code":"(fn [default v] (reduce #(conj %1 (hash-map %2 default)) {} v))","user":"5965eb8de4b069c0a1a19796"},{"code":"#(reduce (fn [m k] (assoc m k %)) {} %2)","problem":156,"user":"5153b1bce4b0252ac4b16639"},{"problem":156,"code":"(fn [defval ks] \n  (zipmap ks (repeat (count ks) defval)))","user":"5761724de4b0994c1922fb89"},{"code":"(fn [def-val keys-col]\n  (reduce (fn [result k]\n          (assoc result k def-val)) {} keys-col))","problem":156,"user":"51f8e057e4b09be9c177e53d"},{"code":"#(apply merge (for [x %2] (assoc {} x %1)))","problem":156,"user":"51f9b1d0e4b09be9c177e550"},{"problem":156,"code":"(fn [default keys-to-use]\n  (reduce\n   (fn [new-map [k v]]\n     (assoc new-map k v))\n   {}\n   (map vector keys-to-use (repeat default))))","user":"5d90190ce4b0915913b1d3f7"},{"code":"(fn [v xs]\n  (into {} (map (fn [x] [x v]) xs))\n  )","problem":156,"user":"4e458592535dc968683fc4ac"},{"problem":156,"code":"(fn [default keyz] (apply hash-map (interleave keyz (repeat default) )))","user":"5033ed65e4b062bc5d7ae15a"},{"problem":156,"code":"(fn build-map\n  ([keys def-val] (build-map def-val keys []))\n  ([keys def-val acc]\n  (if (empty? keys)\n    (into (hash-map) acc)\n    (recur (rest keys) def-val (conj acc [(first keys) def-val])))))","user":"5182de5ce4b0353c468deb74"},{"problem":156,"code":"#(into {} (map (fn [n] (assoc {} n %1)) %2))","user":"60d6aa84e4b0d60f5ea6f7e9"},{"code":"(fn [default sequence] \n  (loop [keys sequence returned {}] \n    (if (empty? keys) returned \n      (recur (rest keys) (conj returned {(first keys) default}))\n)))","problem":156,"user":"507da5a7e4b03c76e5499e03"},{"problem":156,"code":"(fn \n  [d ks]\n  (into {} (map #(hash-map %1 d) ks)))","user":"5401aefbe4b0df28a13c62c7"},{"code":"(fn [val keys] \n   (apply hash-map\n          (loop [seq keys \n                 ret []]\n            (if (empty? seq)\n              ret\n              (recur (rest seq) (conj ret (first seq) val))))))","problem":156,"user":"51392535e4b0a5db03d727e1"},{"code":"#(zipmap %2 (take (count %2) (repeat %1)))","problem":156,"user":"4ff673b3e4b0678c553fc37d"},{"code":"(fn [value keys]\n  (into {} (for [key keys] [key value])))","problem":156,"user":"4fa313bbe4b081705acca188"},{"problem":156,"code":"(fn [default-value key-seq]\n  (->> key-seq\n       (map #(vector % default-value))\n       (into {})))","user":"60948c3ae4b00e9e6653c3e7"},{"problem":156,"code":"(fn[x y](\ninto {} (map #(vector % x) y)))","user":"54d2829ce4b0e8a36923e5f6"},{"code":"(fn makedefaultmap [df ks]\n  (apply merge (map #(assoc {} % df) ks)))","problem":156,"user":"515f2a85e4b0595cf3d1da44"},{"code":"(fn [key values]\n  (apply hash-map (mapcat #(list % key) values)))","problem":156,"user":"4e83bb61535db62dc21a62dd"},{"code":"#(reduce (fn [m k] (conj m [k %])) {} %2)","problem":156,"user":"4f048f67535dcb61093f6bd3"},{"problem":156,"code":"(fn \n  [v s]\n  (reduce (fn [m k ] (conj m {k v})) {} s))","user":"58976bfde4b00487982d52bc"},{"problem":156,"code":"#(loop [ks %2 result {}] (if (empty? ks) result (recur (rest ks) (assoc result (first ks) %1))))","user":"564b3730e4b0284900eef665"},{"problem":156,"code":"(fn [default seq]\n  (reduce #(assoc % %2 default) {} seq))","user":"56d30497e4b0ea9b8538f7a8"},{"problem":156,"code":"(fn [val keys] (reduce (fn [m k] (assoc m k val)) {} keys))","user":"60b8f098e4b0e0fa5f1b425f"},{"problem":156,"code":"(fn def-map [value key-list]\n  (if (empty? key-list) {} (merge (def-map value (rest key-list)) {(first key-list) value})))","user":"554a270fe4b0a04f79299570"},{"problem":156,"code":"(fn [df keys]\n  (apply hash-map (interleave keys (take (count keys) (repeat df)))))","user":"5e394c33e4b01d43a70e8dd1"},{"problem":156,"code":"(fn defval ([ val ks ] (defval val ks {} )) ([val ks m] (if (empty? ks) m (recur val (rest ks) (assoc m (first ks) val)))))","user":"4f0d6686535d0136e6c22318"},{"code":"(fn [d xs]\n  (reduce #(assoc %1 %2 d) {} xs))","problem":156,"user":"5063b9a0e4b075d771da6f9d"},{"problem":156,"code":"#(loop [x %2 r {}] (if (first x) (recur (next x)   (conj r {(first x )%1} ) ) r)  )","user":"551daeb9e4b030e6a24d00df"},{"problem":156,"code":"(fn create-map \n  [value key-list]\n  ( reduce #(assoc %1 %2 value) {} key-list))","user":"5c38422ae4b0d62ef62d9f7f"},{"code":"(fn [default coll] \r\n    (apply array-map (mapcat (fn [n] [n default]) coll)))","problem":156,"user":"504f3fa3e4b0a02f9cffde62"},{"problem":156,"code":"(fn [v myKeys] (let [vs (repeat (count myKeys) v)] (apply hash-map (interleave myKeys vs))))","user":"560fd433e4b05f002753df62"},{"code":"(fn [default keys]\n  (apply hash-map (reduce #(conj %1 %2 default) [] keys)))","problem":156,"user":"4f8c6bf6e4b02e764a0a519b"},{"problem":156,"code":"(fn\n  [default coll]\n (reduce (fn [a b] (->> [b default] (conj a)))\n                {}\n                coll)\n\n  )","user":"5a71c89ee4b0512ff01cda93"},{"problem":156,"code":"(fn [v ks]\n  (into {} (map (fn [k]\n                  [k v])\n                ks)))","user":"5eb22708e4b00a66d4a95204"},{"problem":156,"code":"(fn [default seqq]\n  (apply hash-map (mapcat #(vector % default) seqq)))","user":"6088395de4b0ae75613dcee2"},{"code":"(fn [default keys] (reduce (fn [m k] (assoc m k default)) {} keys))","problem":156,"user":"51411e3be4b05ca1a0b379f3"},{"code":"#(reduce (fn [dict x] (assoc dict x %1)) {} %2)","problem":156,"user":"510acd6ee4b078ea719210f4"},{"problem":156,"code":"(fn [_vals _keys] (zipmap _keys (repeat (count _keys) _vals)))","user":"5b611666e4b0c6492753e70d"},{"problem":156,"code":"(fn make-map\n  ([value ks] (make-map value ks {}))\n  ([value ks m] \n   (if-not (nil? ks)\n     (make-map value (next ks) (assoc m (first ks) value))\n     m)))","user":"551c594de4b07993ea3788dc"},{"code":"(fn [init xs]\n  (apply merge (map #(hash-map % init) xs)))","problem":156,"user":"5083e759e4b0c98812d0787e"},{"code":"(fn [d s] (reduce #(assoc %1 %2 d) {} s))","problem":156,"user":"504e0f78e4b078edc5f593ac"},{"problem":156,"code":"(fn [defv keylist] (reduce (fn [m k] (assoc m k defv)) {} keylist))","user":"5c6e1006e4b0fca0c1622744"},{"problem":156,"code":"(fn [default, coll] (into {} (map #(vector % default) coll)))","user":"578273d9e4b0d36ec5835e95"},{"problem":156,"code":"(fn default-map [v ks]\n  (into {} (map #(vector % v) ks)))","user":"5e0d948fe4b099d064962f98"},{"problem":156,"code":"(fn [key value] (reduce (fn [a v] (assoc a v key)) {} value))","user":"55cf0d0ee4b0e31453f64a2b"},{"problem":156,"code":"(fn [value coll] \n      (into {} \n            (map hash-map coll (repeat (count coll) value))))","user":"5ab276f2e4b073f1774425e6"},{"problem":156,"code":"(fn [default ks]\n  (apply merge (map #(hash-map % default) ks)))","user":"53bc10f5e4b047364c04450d"},{"problem":156,"code":"(fn [n xs]\n (->> xs\n  (map #(hash-map % n))\n  (apply merge)))","user":"57eaf869e4b0bfb2137f5b56"},{"code":"#(reduce (fn [a b] (assoc a b %1)) {} %2)","problem":156,"user":"4e8e8c24535d65386fec2143"},{"problem":156,"code":"(fn [dv seqq] (reduce conj {} (map #(vector % dv) seqq)))","user":"543a84a1e4b032a45b869328"},{"problem":156,"code":"(fn mk-map\n\t[deflt keys]\n\t(apply hash-map \n\t\t(apply concat (map list keys (repeat (count keys) deflt)))))","user":"5545477fe4b0a04f79299531"},{"problem":156,"code":"(fn [v s]\n   (reduce (fn [l r]\n             (conj l {r v}))\n           {}\n           s))","user":"5a084a24e4b01bb0ae8afdf2"},{"code":"(fn [s c] (into {} (map (fn [x] [x s]) c)))","problem":156,"user":"4dbbdf86535d3f4042261ece"},{"problem":156,"code":"(fn [v l]\n  (loop [li l el []]\n    (if (empty? li)\n      (reduce conj {} el)\n      (recur (butlast li) (conj el (conj [] (last li) v))))))","user":"52979551e4b02ebb4ef75043"},{"problem":156,"code":"(fn [x coll]\n  (reduce conj {} (map (fn [elem] {elem x}) coll)))","user":"55e1a205e4b050e68259b41e"},{"code":"(fn build-map [default-value map-keys] \n  (reduce #(assoc %1 %2 default-value) {} map-keys)\n)","problem":156,"user":"52be0c48e4b07a9af5792311"},{"problem":156,"code":"(fn [x s] (into {} (map #(vector % x) s)))","user":"54da46e5e4b024c67c0cf753"},{"code":"(fn map-defaults\n  [default-val s]\n    (reduce #(assoc %1 %2 default-val) {} s))","problem":156,"user":"4fd16778e4b04c3a95aa040f"},{"problem":156,"code":"(fn [v xs] (reduce #(assoc %1 %2 v) {} xs))","user":"603f6623e4b0d5df2af2231f"},{"problem":156,"code":"#(loop [i 0\n        result {}]\n   (if (< i (count %2))\n     (recur (inc i) (conj result [(get %2 i) %]))\n     result))","user":"5d3f50d7e4b09d9322bc20a6"},{"problem":156,"code":"(fn to-map [defa coll]\n    (if (nil? (first coll))\n      {}\n      (assoc (to-map defa (rest coll)) (first coll) defa)\n    ))","user":"603eb408e4b0d5df2af22319"},{"problem":156,"code":"(fn\n  [v k]\n  (into\n   {}\n   (map vector k (repeat v))))","user":"5d389ebfe4b01671435dbd49"},{"problem":156,"code":"(fn defmap[defval ks] (into {} (map #(assoc {} % defval) ks)))","user":"542c56aae4b0dad94371f2a4"},{"problem":156,"code":"(fn [default-value key-seq]\n  (into {} (for [k key-seq]\n             [k default-value])))","user":"54ee34c2e4b024c67c0cf870"},{"problem":156,"code":"(fn [v l] (apply hash-map (interleave l (repeat (count l) v))))","user":"5a3e1243e4b0447ef91cc5ae"},{"problem":156,"code":"(fn [v coll]\n  (apply assoc {}\n         (interleave coll (cycle [v]))))","user":"5e5fa1ffe4b0fd0acd15867d"},{"problem":156,"code":"(fn [default-value xs] \n  (reduce #(assoc %1 %2 default-value) {} xs))","user":"57ebbf3ae4b0bfb2137f5b66"},{"problem":156,"code":"; My independent solution was as follows:\n; #(zipmap %2 (cycle [%1]))\n; After reviewing other peoples solutions I feel using \"(repeat %1)\" rather than \"(cycle [%1])\" is better:\n#(zipmap %2 (repeat %1))\n; I also think zipmap is fairly special use. If we imagine that there is a restriction on the solution that\n; zipmap cannot be used, then I would prefer the following:\n; #(into {} (map vector %2 (repeat %)))","user":"56dc34eae4b0ea9b8538f817"},{"code":"(fn[e col] \n      (reduce #(assoc %1 %2 e) {} col)\n  )","problem":156,"user":"4e8b6f4d535d65386fec211e"},{"code":"(fn [val sq]\n  (reduce #(into % {%2 val}) {} sq))","problem":156,"user":"523bd9c0e4b07becd5be2201"},{"code":"(fn \n    [v k]\n    (reduce #(assoc %1 %2 v) {} k))","problem":156,"user":"4f17ab99535d64f603146457"},{"problem":156,"code":"(fn [x y] (into (sorted-map) (for [w y] [w x])))","user":"5c648b60e4b0fca0c162267b"},{"code":"#(reduce (fn [coll x] (assoc coll x %)) {} %2 )","problem":156,"user":"51cec7b1e4b0e42293a2255b"},{"problem":156,"code":"(fn [default coll]\n   (into {} (map #(vector % default) coll))\n )","user":"5aefdc8de4b0cc2b61a3bc40"},{"problem":156,"code":"(fn \n  [default keys] \n  (apply \n   \thash-map \n   \t(interleave \n     \tkeys \n     \t(repeat default))))","user":"603673b9e4b0d5df2af222db"},{"problem":156,"code":"(fn [init lst] (zipmap lst (repeat init)))","user":"543bb568e4b032a45b869334"},{"problem":156,"code":"(fn [defaultValue keys] (reduce (fn [hash key] (merge hash (hash-map key defaultValue)) ) {} keys ) )","user":"55d79b87e4b0e31453f64aa8"},{"problem":156,"code":"(fn [value keys] (zipmap keys (repeat (count keys) value) ) )","user":"5602b618e4b04bb52996e1a5"},{"code":"(fn [default v]\n  (apply merge\n  (for [i v]\n    {i default}\n  )))","problem":156,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":156,"code":"(fn [a b] (reduce merge (map #(assoc {} % a) b)))","user":"563dfeffe4b0da801c4e4663"},{"code":"(fn [v k]\n  (zipmap k (repeat v)))","problem":156,"user":"4f128865535d64f603146428"},{"problem":156,"code":"(fn [dv v] (zipmap v (repeat dv)))","user":"5d662fb5e4b0db5d338d15e1"},{"code":"(fn [default_val keys]\n  (zipmap keys\n          (vec (take (count keys) (repeat default_val)))))","problem":156,"user":"51642237e4b003cf19fdde31"},{"code":"(fn [dv kl] (into {} (for [k kl] [k dv])))","problem":156,"user":"50e13dd6e4b084616e11c668"},{"code":"(fn [def_val keys]\n  (loop [my-map {}\n         my-keys (seq keys)]\n    (if my-keys\n      (recur (assoc my-map (first my-keys) def_val)\n             (next my-keys))\n      my-map)))","problem":156,"user":"5213348ae4b0d32679a50652"},{"problem":156,"code":"#(->> (interleave %2 (repeat %)) (partition 2) (map vec) (into {}))","user":"5d35fb9be4b01671435dbd1c"},{"code":"(fn [x y] (let [xs (repeat (count y) x)\n            z (map vector y xs)] \n            (into {} z)) )","problem":156,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":156,"code":"(fn [default ks]\n  (zipmap ks (repeat default))\n  )","user":"528c381ce4b0239c8a67aeb2"},{"problem":156,"code":"(fn [d v] (reduce (fn [m k] (assoc m k d)) {} (reverse v)))","user":"57b35ecbe4b0fbc9809a277e"},{"problem":156,"code":"(fn [d c]\n  (apply hash-map (mapcat #(list % d) c)))","user":"561ba3e5e4b073c65b0ce3eb"},{"code":"(fn [d keys] (into {} (for [k keys] [k d])))","problem":156,"user":"508a2c2fe4b016a2107004a1"},{"code":"(fn [v a]\n  (reduce (fn [x y] (conj x [y v])) {} a))","problem":156,"user":"52c8a8b9e4b0c2d177d62139"},{"problem":156,"code":"(fn [n l]\n  (loop [map1 {} tmpl l]\n    (if (empty? tmpl)\n      map1\n      (recur (assoc map1 (first tmpl) n) (rest tmpl)))))","user":"59368ccae4b02506e01a2979"},{"code":"#(reduce (fn [mp elem] (conj mp (conj [] elem %1))) {} %2)","problem":156,"user":"52cc85abe4b07d0d72b27367"},{"problem":156,"code":"(fn [default ks]\n  (reduce conj (map (fn [k] {k default}) ks)))","user":"59a96a85e4b0bcf4e9a43b13"},{"problem":156,"code":"(fn d [default coll]\n    (reduce merge (map (fn [x] {x default}) coll)))","user":"5ff8ead1e4b06df49cee14ab"},{"problem":156,"code":"#_(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))\n(fn [v ks]\n  (apply assoc {} (mapcat vector ks (repeat v))))","user":"5821b018e4b04b46fc4b0f80"},{"problem":156,"code":"(fn [default_value keys] (zipmap keys (repeat default_value)))","user":"60460876e4b02d28681c77bd"},{"problem":156,"code":"(fn map-default [val keys]\n  (zipmap keys (repeat val))\n)","user":"5d4bd9a7e4b0776584bd6f2a"},{"problem":156,"code":"(fn map_defaults [d k] (into {} (let [new_map {}] (for [element k] (conj new_map {element d})))))","user":"52c70127e4b0c2d177d6211a"},{"problem":156,"code":"(fn mk [d k]\n  (reduce \n    (fn [a b]\n      (conj a {b d}))\n   \t{(first k) d}\n    (rest k)))","user":"57befca6e4b05aa3c4741c70"},{"problem":156,"code":"(fn [x keys]\n  (zipmap keys (repeat x)))","user":"5422fef5e4b01498b1a71acd"},{"problem":156,"code":"(fn[d ks](reduce #(assoc %1 %2 d) {} ks))","user":"54d22860e4b0e8a36923e5ef"},{"problem":156,"code":"(fn f [v c]\n\t(into {} (map #(vector % v) c))\n)","user":"57c62aece4b05aa3c4741cf1"},{"problem":156,"code":"#(zipmap %2 (vec (repeat (count %2)%1)))","user":"56874171e4b0dcc4269f405c"},{"problem":156,"code":"(fn [default keys] (reduce (fn [acc, curr]\n                         (assoc acc curr default)\n          ) {} keys))","user":"5f42b77be4b0955706451fb0"},{"code":"(fn [value, key-sequence]\n  (let [items (map vector key-sequence (repeat (count key-sequence) value))]\n    (apply hash-map (reduce #(into %1 %2) items))\n  )\n)","problem":156,"user":"52b091b4e4b0c58976d9accc"},{"code":"reduce #(cond(map? %1)\r\n                (assoc %1 %2 (val(first %1)))\r\n                :else (assoc {} %2 %1)\r\n\r\n             )","problem":156,"user":"4e244ed5535d04ed9115e826"},{"problem":156,"code":"(fn [df keys]\n  (into {}  (map (fn [k] [k df]) keys  )))","user":"5d89427ae4b0915913b1d3b5"},{"problem":156,"code":"(fn mm [v keys] (if(not-empty keys) (merge(hash-map(first keys) v)(mm v (rest keys)))))","user":"5515b68de4b055c2f668d4ef"},{"problem":156,"code":"(fn foo [d m]\n  (apply hash-map (mapcat #(list % d) m)))","user":"56069006e4b08b23635d3174"},{"code":"(fn [v m]\n    (reduce merge (map (fn [x] {x v}) m))\n    )","problem":156,"user":"535aba96e4b04ce2eb3ed2a8"},{"code":"(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))","problem":156,"user":"4e568873535d8a8b8723a283"},{"code":"(fn ! [d ks] \n  (if (empty? ks)\n    {}\n    (merge (! d (rest ks)) {(first ks) d})\n  )\n)","problem":156,"user":"51db8244e4b0e067a9bbadc7"},{"problem":156,"code":"(fn [default kkeys]\n  (reduce #(assoc % %2 default) {} kkeys))","user":"5783c505e4b0ebec4cfb74bc"},{"code":"(fn [d keys] \n  (reduce #(conj % [%2 d]) {} keys))","problem":156,"user":"5025b93ce4b0c969f0b056df"},{"code":"#(into {}\n  (map (fn [x] [x %1]) %2))","problem":156,"user":"4fbef9a6e4b081705acca316"},{"code":"(fn map-df [init coll]\n\t(zipmap coll (repeat init)))","problem":156,"user":"52381b2ae4b0fae3832e99ef"},{"problem":156,"code":"#(reduce (fn [result current] (assoc result current %1))\n         {} \n         %2)","user":"5ac7f980e4b0e27600da779f"},{"problem":156,"code":"(fn myfunc [x keys]\n  (zipmap keys (repeat x)))","user":"591cbc30e4b09b4ee5954c08"},{"code":"(fn [d coll] \n  (apply conj \n         (map #(hash-map % d) coll)))","problem":156,"user":"5150a7d7e4b03e678e393abb"},{"problem":156,"code":"(fn [d v] (into {} (for [x v] {x d})))","user":"54be9b81e4b0ed20f4ff6ef1"},{"code":"#(into {} (for [i %2] [i %1]))","problem":156,"user":"50fe9d60e4b03cd852b4e84f"},{"problem":156,"code":"(fn [value coll]\n   (apply hash-map (interleave coll (repeat value))))","user":"5e99cbd4e4b0157ca96647e6"},{"problem":156,"code":"(fn [default keys]\n  (reduce (fn [m key] (assoc m key default)) {} keys)\n  )","user":"5bc60a65e4b07a9b28b10082"},{"problem":156,"code":"(fn [ve de b]\n  (if b\n    (recur (assoc ve (first b) de) de (next b))\n    ve)) {}","user":"56eb5c76e4b04a395b9a0422"},{"problem":156,"code":"(fn [dv mkeys]\n  (zipmap mkeys (take (count mkeys) (repeat dv))))","user":"53b85932e4b047364c0444db"},{"code":"(fn [d s] (loop [s s acc {}]\n  (if (seq s) (recur (rest s) (assoc acc (first s) d)) acc)))","problem":156,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":156,"code":"(fn [i ks] (reduce merge {} (map (fn [k] {k i}) ks)))","user":"572b73d0e4b0cd1946bd0f3a"},{"code":"(fn [d ks]\n  (into {} (map vector ks (repeat d))))","problem":156,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":156,"code":"(fn create-map [value keys]\n  (->>\n    (map (fn [k] (vector k value)) keys)\n    (into (sorted-map))))","user":"5d80f328e4b0915913b1d372"},{"problem":156,"code":"(fn [dft kys] (into {} (map #(hash-map % dft) kys)))","user":"5c9b07cde4b048ec896c5abd"},{"code":"(fn [default keys]\n  (letfn [(rec [default keys result]\n               (if (empty? keys)\n                 result\n                 (rec default (rest keys) (cons (first keys) (cons default result)))))]\n    (apply hash-map (rec default keys '()))))","problem":156,"user":"51e0198ee4b01188f0627539"},{"problem":156,"code":"(fn [x y] (reduce #(conj %1 {%2 (%1 %2 x)}) {} y))","user":"553c4614e4b09218d5f45014"},{"problem":156,"code":"(fn [d k]                                                                                                                       \n  (loop [m- {} k- k]                                                                                                                                    \n    (if (empty? k-)                                                                                                             \n      m-                                                                                                                                                \n      (recur (conj m- {(first k-) d}) (rest k-)))))","user":"558b50d5e4b027778923762b"},{"problem":156,"code":"(fn [x ys]\n  (into {} (map #(assoc {} % x) ys)\n  ))","user":"59e0f839e4b08badc2a0c502"},{"code":"(fn [value key-list] \n  (into {} \n        (for [k key-list] [k value])))","problem":156,"user":"5117c31ee4b0e0897831a60c"},{"problem":156,"code":"(fn [v lst]\n  (into {} (map (fn [x] {x v}) lst)))","user":"55101237e4b06e50f9beb181"},{"problem":156,"code":"(fn init-dict [val keys]\n  (reduce (fn [acc key]\n            (assoc acc key val)) {} keys))","user":"5ed3c43be4b016b56eae05c4"},{"problem":156,"code":"(fn [v seq] (reduce #(conj %1 [%2 v]) {} seq))","user":"55e206f3e4b050e68259b429"},{"problem":156,"code":"(fn def-map [v ks]\n  (if(empty? ks)(hash-map)\n    (assoc (def-map v (rest ks)) (first ks) v))\n  )","user":"5c486dece4b0e06e1360a3c0"},{"problem":156,"code":"(fn [value coll]\n  (apply hash-map\n         (mapcat list coll (repeat value))))","user":"5e471203e4b043cd24807a2a"},{"code":"(fn [k vs] (reduce #(assoc %1 %2 k) {} vs))","problem":156,"user":"501f36dde4b0cb6ebc0a42e4"},{"problem":156,"code":"(fn [d e] (reduce #(assoc % %2 d) {} e))","user":"4fa436dce4b081705acca19b"},{"code":"(fn [x v] (into {} (map #(vector % x) v)))","problem":156,"user":"503917a0e4b088a6a14ca763"},{"problem":156,"code":"#(reduce (fn [init r] \n           (assoc init r %1))\n            {}\n            %2)","user":"5ecf4ee4e4b016b56eae05a6"},{"code":"(fn [d k] (loop [l k ret '{}] (if (empty? l) ret (recur (rest l) (assoc ret (first l) d)))))","problem":156,"user":"4f47eab2e4b0d56e7bb92bc6"},{"code":"#(into {} (map (fn [l] [l %]) %2))","problem":156,"user":"4e96557d535dbda64a6f6b43"},{"code":"(fn [df ks]\n  (apply merge \n    (map #(assoc {} % df) ks)))","problem":156,"user":"4fbe42b7e4b081705acca30f"},{"code":"(fn default-to-map [default keys]\n  (apply hash-map (mapcat #(list % default) keys)))","problem":156,"user":"4e0d5a5a535d04ed9115e7b5"},{"problem":156,"code":"(fn [dv s] \n  (into {} (for [x s] {x dv})))","user":"53e8698ce4b036ad0777e486"},{"problem":156,"code":"(fn [d ks]\n    (loop [kys ks \n          result {}]\n     (if (seq kys)\n       (recur (rest kys) (assoc result (first kys) d))\n       result)))","user":"56fc9a2de4b08d47c977819b"},{"code":"(fn mkMap [v, ks] (into {} (map #(vector %1, v) ks)))","problem":156,"user":"52161db6e4b0bf4bffd29cb8"},{"problem":156,"code":"(fn map-default [default keys] (apply hash-map (interleave keys (repeat default))))","user":"58c7131be4b021aa9917ed6d"},{"problem":156,"code":"(fn [x y]\n  (into {} (for [i y] {i x}))\n  )","user":"5595e038e4b0c79f6e1db971"},{"code":"(fn [a b]\n  (apply merge (map (fn [c] {c a}) b)))","problem":156,"user":"4f3cd535e4b0e243712b1f56"},{"code":"(fn [d xs]  (->> xs\n  (map #(list % d))\n  (apply concat)\n  (apply hash-map)))","problem":156,"user":"507a396be4b08327cd804a69"},{"problem":156,"code":"(fn [default lst]\n         (zipmap lst (repeat default)))","user":"55527251e4b0deb715856df3"},{"problem":156,"code":"(fn [d k](apply hash-map ((fn[default ks](reduce (fn [x y](conj x y default )) []  ks )) d k)))","user":"53bd65abe4b0d9a98559a6ce"},{"problem":156,"code":"(fn [d k] (apply assoc {} (interleave k (repeat (count k) d)) ))","user":"514504c2e4b021a5ff8301fc"},{"code":"#(into {} (for [k %2] {k %}))","problem":156,"user":"513333a8e4b0e0c0cda41e78"},{"problem":156,"code":"(fn [def-val keys-sq]\n  (into {} (for [key keys-sq] [key def-val])  )\n  )","user":"5fee18f2e4b05ac5b16ea1d2"},{"code":"(fn _ [v ks]\n  (if (not (seq ks))\n    {}\n    (merge (hash-map (first ks) v) (_ v (rest ks)))))","problem":156,"user":"5213d7aae4b0961f15ac4d72"},{"problem":156,"code":"(fn [defaultValue keys] (zipmap keys (repeat  defaultValue) ))","user":"5db70407e4b010eb3c36cd3e"},{"problem":156,"code":"(fn [v k] (into {} (for [each k] (assoc-in {} [each] v))))","user":"56940617e4b0dcc4269f410b"},{"code":"(fn make-map [default col]\n  (apply hash-map (apply concat (for [x col]\n  \t\t\t      (list x default)))))","problem":156,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":156,"code":"(fn [x ks]\n  (reduce (fn [m k]\n            (assoc m k x))\n          {}\n          ks))","user":"58543a59e4b07779d46863f5"},{"problem":156,"code":"(fn [d coll]\n  (reduce (fn [acc n] (assoc acc n d)) {} coll))","user":"56a51f26e4b0542e1f8d14e0"},{"code":"(fn [default s] (into {} (map vector s (repeat default))))","problem":156,"user":"4f284db6e4b0d6649770a014"},{"problem":156,"code":"(fn www[x coll](let [a (fn b[coll x ret](cond\n                                       (empty? coll) (apply assoc(cons {}(reverse ret)))\n                                       :else (b (rest coll) x (conj (conj ret x)(first coll)))))]\n              (a coll x [])))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":156,"code":"(fn [d s] (reduce #(conj % {%2 d}) {} s))","user":"5441f5e8e4b032a45b869375"},{"code":"(fn [default-value sequence-of-keys] (into {} (map (fn [a-key] {a-key default-value}) sequence-of-keys)))","problem":156,"user":"51836944e4b028ec5fd2f29f"},{"problem":156,"code":"(fn [d v] \n  (into (hash-map) (map (fn [x] [x d]) v)))","user":"560bb1f7e4b05f002753df20"},{"problem":156,"code":"(fn [v coll]\n    (into {} (for [x coll] {x v})))","user":"55d22218e4b0e31453f64a52"},{"problem":156,"code":"(fn assign [init [k & ks]] (when k (assoc (assign init ks) k init)))","user":"5b7d03a0e4b047b03b20373d"},{"code":"(fn [x lst]\n  (apply conj (map (fn [e] {e x}) lst))\n)","problem":156,"user":"4ffb3c50e4b0678c553fc3c8"},{"problem":156,"code":"(fn [x, s] (reduce #(conj %1 [%2 x]) {} s))","user":"5453b522e4b0e397800069d0"},{"code":"(fn [default keys] \n  (zipmap keys (repeat default)))","problem":156,"user":"4fea34bde4b0140c20fb9c00"},{"code":"#(zipmap %2 (repeat %1) )","problem":156,"user":"4fcad14ce4b0ee37620e1856"},{"code":"(fn [value keys] (into {} (map (fn [x] {x value}) keys)))","problem":156,"user":"518bd05ee4b0f028e99addf2"},{"problem":156,"code":"(fn [d t] (into {} (map (fn [x] {x d}) t)))","user":"54d82f2be4b0a52adc2e2037"},{"problem":156,"code":"(fn [x y]\n  (loop [l y\n         r {}]\n    (if-not (empty? l)\n      (recur (rest l) (assoc r (first l) x))\n      r\n      )))","user":"5b269cf3e4b063e2438bcc35"},{"problem":156,"code":"(fn [v ks]\n  (reduce (fn [acc k]\n            (assoc acc k v)) {} ks))","user":"5e9e6d8ee4b00a66d4a95175"},{"code":"(fn [default seqs]\n  (into {}\n    (for [elem seqs] [elem default])\n  )\n)","problem":156,"user":"52837636e4b0239c8a67adb6"},{"problem":156,"code":"(fn [default keys_]\n  (into {} (map #(vector %1 default) keys_)))","user":"5027f37be4b01614d1633ff1"},{"code":"(fn [d ks]\n  (->> ks (map #(vector % d)) (apply conj {})))","problem":156,"user":"539ddf25e4b0b51d73faaf3e"},{"problem":156,"code":"(fn [d s]\n      (apply array-map (interleave s (repeat (count s) d))))","user":"51a3be77e4b0e77c4ca60bf8"},{"code":"(fn [d v]\n  (reduce #(conj %1 {%2 d}) {} v))","problem":156,"user":"5256627ce4b0541d1855ba1a"},{"code":"(fn\n[default keylist]\n  (reduce\n    (fn\n      [kl k]\n      (merge kl (hash-map k default))\n     )\n     {}\n     keylist\n   )\n)","problem":156,"user":"530c462ae4b02e82168697d9"},{"problem":156,"code":"(fn defaults\n  [default keys]\n  (reduce\n    (fn [acc val]\n      (assoc acc val default))\n    {} keys))","user":"54b187bee4b09f271ff37d21"},{"code":"(fn [dval entries] \n  (into {} (for [i entries] [i dval]))\n  )","problem":156,"user":"524fafb3e4b0541d1855b817"},{"code":"#(loop [b %1 a %2 c {}] (if (empty? a) c (recur b (rest a) (conj c [(first a)b]))))","problem":156,"user":"503539dee4b0ed9c821488f6"},{"problem":156,"code":"(fn dm[v c](loop [r {} v v c c] (if (empty? c) r (recur (assoc r (first c) v) v (rest c)))))","user":"54464734e4b032a45b8693ab"},{"problem":156,"code":";#(into {} (map (juxt identity (constantly %1)) %2))\n#(zipmap %2 (repeat %1))","user":"54ca9ca8e4b057c6fda3a265"},{"code":"#(into {} (for [y %2] [y %1]))","problem":156,"user":"5081566ce4b0946d0443855b"},{"problem":156,"code":"(fn [defval coll] (zipmap coll (map (constantly defval) coll)))","user":"5587cd80e4b059ccff29b1e5"},{"problem":156,"code":"(fn [x y] (zipmap y [x x x]))","user":"55249337e4b0882d96d091c3"},{"code":"(fn [a b]\n   (into {} \n         (map \n           #(zipmap (vector %)  (vector a))\n           b\n         )\n   )\n)","problem":156,"user":"4e9df73d535dbda64a6f6b90"},{"problem":156,"code":"(fn f [dv coll] \n  (if (empty? coll) {}\n    (assoc (f dv (rest coll)) (first coll) dv)\n  )\n)","user":"5680fff3e4b0966858e4d8f6"},{"code":"(fn map_def [d v]\n  (if (= v [])\n    {}\n    (conj (map_def d (rest v)) {(first v) d})\n  )\n)","problem":156,"user":"50013694e4b0678c553fc417"},{"problem":156,"code":"(fn [default keyz] (reduce #(assoc %1 %2 default) {} keyz))","user":"53d6bc2fe4b0e771c302545a"},{"code":"(fn [default fields]\n  (apply hash-map (interleave fields (repeat (count fields) default))))","problem":156,"user":"4f3656d1e4b0e243712b1ec9"},{"code":"(fn [v k] (reduce merge (map (fn [key] {key v}) k)))","problem":156,"user":"4f6d23cde4b07046d9f4efc6"},{"problem":156,"code":"#(zipmap %2 (replicate (count %2) %) )","user":"575bd5f9e4b02ea114799365"},{"code":"(fn [dv ks]\n  (zipmap ks (repeat dv))\n)","problem":156,"user":"4f725201e4b07046d9f4f02f"},{"problem":156,"code":"(fn [val keys]\n  (reduce (fn [acc key] (conj acc { key val })) {} keys))","user":"5c8cfff8e4b048ec896c5996"},{"problem":156,"code":"(fn default-populate-recur\n  ([default-value key-sequence] (default-populate-recur {} default-value key-sequence))\n  ([the-map default-value key-sequence] (if (empty? key-sequence) the-map (default-populate-recur (assoc the-map (first key-sequence) default-value) default-value (rest key-sequence))))\n)","user":"57b356c2e4b0fbc9809a277b"},{"problem":156,"code":"(fn q156\n  ([v [head & tail] m]\n   (if (nil? head)\n     m\n     (recur v tail (assoc m head v))))\n  ([v ks] (q156 v ks {})))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":156,"code":"(fn [val seq]\n  (zipmap seq (repeat val)))","user":"56a04c61e4b0542e1f8d14a1"},{"code":"(fn [default v]\n  (apply hash-map (mapcat #(list % default) v)))","problem":156,"user":"52736ca1e4b03e8d9a4a747e"},{"problem":156,"code":"(fn [deflt ks]\n  (zipmap ks (repeat deflt)))","user":"5b15ab32e4b0cc2b61a3be72"},{"code":"(fn [v xs] (zipmap xs (repeat v)))","problem":156,"user":"4f8345c6e4b033992c121c1b"},{"problem":156,"code":"#(loop [ks %2 map {}]\n    (if (empty? ks)\n      map\n      (recur (rest ks) (assoc map (first ks) %1))))","user":"5901731ae4b0438e51c2d03d"},{"problem":156,"code":"(fn [d s] \n  (reduce \n   (fn [a b] \n     (conj a {b d})\n   ) \n   {} \n   s\n  )\n)","user":"567b9ff7e4b05957ce8c61a9"},{"code":"(fn [a b] (reduce #(assoc %1 %2 a) {} b))","problem":156,"user":"4e6dc95a535d5021c1a895f1"},{"code":"(fn [value xs]\n   (zipmap xs (repeat value)))","problem":156,"user":"4edb314d535d10e5ff6f5317"},{"problem":156,"code":"(fn mkmap [v ks]\n  (if (empty? ks)\n    {}\n    (assoc (mkmap v (rest ks)) (first ks) v)))","user":"54651982e4b01be26fd746d4"},{"code":"#(apply hash-map (interleave %2(repeat %1)))","problem":156,"user":"52c4fe42e4b0c2d177d620e9"},{"code":"(fn[sep x] (zipmap x (repeat sep)))","problem":156,"user":"52a1edd6e4b04e0c58e87be4"},{"problem":156,"code":"(fn [defv col] (into {} (map #(vector % defv) col)))","user":"53164ccce4b08068f379ed45"},{"problem":156,"code":"(fn [value cols] (reduce #(assoc % %2 value) {} cols))","user":"54577fefe4b01be26fd7460d"},{"code":"(fn [v lst]\n   (reduce #(conj %1 {%2 v}) {}  lst))","problem":156,"user":"507db411e4b03c76e5499e06"},{"code":"(fn [d xs] (reduce #(assoc % %2 d ) {} xs))","problem":156,"user":"53403110e4b085b17e897da6"},{"problem":156,"code":"(fn [default, arg]\n   (into {} (map #(-> [% default]) arg)))","user":"54eff2bee4b024c67c0cf88d"},{"code":"(fn [e v] (reduce #(merge %1 {%2 e}) {} v))","problem":156,"user":"4fdb02aae4b05e33b9224f56"},{"problem":156,"code":"(fn [default keys] (into {} (map (fn [key] (vector key default)) keys)))","user":"602b90c1e4b0d5df2af22266"},{"problem":156,"code":"(fn [value mykeys] (zipmap mykeys (repeat (count mykeys) value)))","user":"50d3317ee4b049d4ed5650da"},{"problem":156,"code":"(fn [default-value key-list] (reduce #(assoc %1 %2 default-value) {} key-list))","user":"557ca912e4b05c286339e0c8"},{"code":"(fn [d coll] (into {} (map #(vec %&) coll (repeat d))))","problem":156,"user":"4e86d3cf535dceadca46984c"},{"code":"(fn [x col] (reduce #(conj %1 {%2 x}) {} col))","problem":156,"user":"52dad8bde4b09f7907dd13be"},{"problem":156,"code":"(fn [v s]\n  (reduce (fn [acc k] (assoc acc k v))\n          {}\n          s))","user":"5b757ff8e4b047b03b2036ce"},{"problem":156,"code":"(fn mb [d, ks] (apply hash-map (reduce concat (map #(vector % d) ks))))","user":"54965534e4b0b312c081ff65"},{"code":"(fn\n  [default col]\n  (apply hash-map (interleave col (cycle [default]))))","problem":156,"user":"51008b6fe4b0700a7a02d6e4"},{"problem":156,"code":"#(loop [s %2 d {}] (if (nil? s) d (recur (next s) (assoc d (first s) %1))))","user":"584aa803e4b089d5ab817ee9"},{"problem":156,"code":"(fn [x y] (into {} (for [a y] {a x})))","user":"58a5c5c2e4b01a0c0b23291b"},{"problem":156,"code":"(fn [x,y] (zipmap y (take (count y) (cycle (list x)))))","user":"5422e975e4b01498b1a71ac9"},{"code":"#(zipmap %2 (repeat (count %2) %1 ))","problem":156,"user":"4e78c2ba535db95036265723"},{"code":"(fn foo [v ks]\n  (zipmap ks (repeat v)))","problem":156,"user":"52f8f4d1e4b047fd55836fde"},{"problem":156,"code":"(fn [v k]\n  (zipmap k (lazy-seq (take (count k) (repeat v))))\n  )","user":"5600bed5e4b04bb52996e170"},{"problem":156,"code":"(fn [d ks] (reduce merge {} (for [k ks] [k d])))","user":"4e617114535d8ccf87e9fe5b"},{"problem":156,"code":"(fn [pa pb] (reduce (fn [init kv] (reduce-kv assoc init kv)) ((fn [x z] (map (fn [y] {y x}) z)) pa pb)))","user":"5971a017e4b01722bebd4c75"},{"problem":156,"code":"(fn [default m]\n  (zipmap m (repeat default)))","user":"5e78e8d3e4b085ba37836dfd"},{"problem":156,"code":"(fn [x coll]\n  (reduce (fn [m n] (assoc m n x)) {} coll))","user":"5afecee2e4b0cc2b61a3bd28"},{"code":"(fn [d l]\n  (reduce #(conj % [%2 d]) {} l))","problem":156,"user":"4dc986d0535d5973398f9285"},{"problem":156,"code":"(fn [v l] (into {} (for [x l] {x v} )))","user":"5550e966e4b00713264bd9b3"},{"code":"#(zipmap %2 (repeat %1))","problem":156,"user":"4f7f9665e4b033992c121bea"},{"problem":156,"code":"(fn [v coll]\n  (reduce \n   (fn [arg1 arg2]\n     (assoc arg1 arg2 v))\n   {}\n   coll))","user":"576e607ae4b0979f89651579"},{"problem":156,"code":"(fn [default xs]  (zipmap xs (repeat (count xs) default)))","user":"53d64811e4b0e771c3025456"},{"problem":156,"code":"(fn [v cols] (zipmap cols (repeat v)))","user":"57995ac1e4b05b1deef9adbf"},{"code":"(fn [x y] (zipmap y (repeat (count y) x)))","problem":156,"user":"4ef4c1ff535dced4c769f23e"},{"problem":156,"code":"(fn foo [a m] (zipmap m (repeat a)))","user":"55c779f8e4b0e31453f649d2"},{"code":"(fn [value my-keys]\n   (zipmap my-keys (repeat value)))","problem":156,"user":"4ede0511535d10e5ff6f5330"},{"problem":156,"code":"(fn [v coll]\n  (reduce #(assoc % %2 v) {} coll))","user":"4ff6018de4b0678c553fc373"},{"problem":156,"code":"(fn [v k]\n  (loop [keys k\n         val v\n         m {}]\n    (if (nil? (first keys))\n         m\n      (recur (rest keys) v (assoc m (first keys) v)))))","user":"5922599be4b09b4ee5954c8d"},{"code":"#(apply assoc {} (apply concat (for [x %2] [x %1])))","problem":156,"user":"4e32aa5b535deb9a81d77f24"},{"problem":156,"code":"(fn [dv sq] (apply assoc {} (interleave sq (repeat dv))))","user":"543272b8e4b0dad94371f2ef"},{"code":"(fn [a lst]\n  (reduce #(assoc % %2 a) {} lst))","problem":156,"user":"5055899de4b0ce54f56f03fd"},{"problem":156,"code":"#(zipmap %2 (take 100 (repeat %1)))","user":"53c349f5e4b00fb29b22127a"},{"problem":156,"code":"(fn [d m] (into {} (let [nm {}] (map #(merge nm {% d}) m))))","user":"577a55d2e4b0d3393e5deaf7"},{"code":"#(reduce (fn [acc k] (conj acc [k %1])) {} %2)","problem":156,"user":"4f88ae35e4b033992c121c6d"},{"code":"(fn [default keys] \n  (apply hash-map \n    (interleave keys (repeat default))))","problem":156,"user":"4fe4c09ee4b0e8f79898febb"},{"problem":156,"code":"(fn [default-val ks]\n  (let [l (count ks)]\n    (zipmap ks (repeat l default-val))))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":156,"code":"#(apply hash-map (mapcat (fn [key] [key %1]) %2))","user":"55377d78e4b09218d5f44fca"},{"problem":156,"code":"(fn [x a-seq]\n  (reduce #(assoc %1 %2 x) {} a-seq) )","user":"56795625e4b05957ce8c6186"},{"code":"(fn [x y] (apply hash-map (#(interleave %2 (repeat %1)) x y)))","problem":156,"user":"4daeabf6edd6309eace4d15c"},{"problem":156,"code":"(fn [df se]  (zipmap se (repeat (count se) df)))","user":"5c337305e4b0d62ef62d9f48"},{"code":"#(reduce (fn [res x] (assoc res x %1)) {} %2)","problem":156,"user":"4dad8fe9c9a9d6ed1899dc57"},{"problem":156,"code":"(fn build_map [default map_key] (if (= (first map_key) nil) {} (merge {(first map_key) default} (build_map default (rest map_key)))))","user":"5e69589de4b04a83ad7cd26d"},{"problem":156,"code":"(fn [dv keyseq] (reduce #(assoc %1 %2 dv) {} keyseq))","user":"5982d82be4b021a7a535fe05"},{"code":"(fn [default keys] \n  (apply hash-map (interleave keys (repeat default))))","problem":156,"user":"4dbdc9da535d020aff1edf4c"},{"code":"(fn [default ks]\n  (loop [result {} lst ks]\n    (if (empty? lst)\n      result\n      (recur (conj result {(first lst) default}) (rest lst)))))","problem":156,"user":"5347870be4b084c2834f4a4b"},{"problem":156,"code":"(fn [n list-vec]\n  (reduce #(assoc % %2 n) {} list-vec))","user":"5c0e3f86e4b01240ff56713d"},{"code":"#(zipmap %2 (take (count %2) (repeat %)))","problem":156,"user":"4f3e5e87e4b0e243712b1f83"},{"code":"(fn [dv ks]\n  (apply assoc {} (interleave ks (repeat dv))))","problem":156,"user":"50bd6033e4b0594b91591c66"},{"code":"(fn [x ys] (into {} (for [y ys] [y x])))","problem":156,"user":"52b43468e4b0c58976d9ad1b"},{"code":"(fn [default, keys] (reduce (fn [acc, key] (assoc acc key default)) {} keys))","problem":156,"user":"53217912e4b09d4e7a9b54b3"},{"code":"(fn [val keys] (reduce conj {} (for [x keys] [x val])))","problem":156,"user":"501688f7e4b052339a490e7a"},{"code":"(fn [d ks]\n  (apply hash-map (interleave ks (repeat d)))\n)","problem":156,"user":"511cca27e4b00c2a1fa7ff7d"},{"code":"(fn make-map-with-default-values\n  [default-value\n   sequ]\n  (if (empty? sequ)\n    {}\n    (assoc (make-map-with-default-values default-value (rest sequ))\n      \t\t(first sequ) default-value\n     )\n   )\n)","problem":156,"user":"52f8b86de4b047fd55836fdb"},{"code":"(fn map-init-default\n  [default-value keys]\n  (zipmap keys (for [x (range (count keys))]\n                 default-value)))","problem":156,"user":"4fa27e18e4b0dcca54ed6d68"},{"problem":156,"code":"(fn [x xs]\n  (reduce #(assoc %1 %2 x) {} xs))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":156,"code":"(fn [d c]\n   (reduce (fn [r x] (conj r {x d}) ) {} c)\n   )","user":"554b2151e4b0a04f79299580"},{"code":"(fn [default keys] \n  (apply hash-map \n    (mapcat #(vector % default) keys)))","problem":156,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":156,"code":"(fn [dv ks] (reduce #(assoc %1 %2 dv) {} ks))","user":"548f5086e4b0e286459a1239"},{"code":"(fn [default coll] (let [result (map  #(let [a %1]{ a default}) coll)] (into {} result)))","problem":156,"user":"52d36f60e4b099d49816f0c2"},{"problem":156,"code":"(fn [d ks]\n  (reduce\n    (fn [result k] (conj result {k d}))\n    {}\n    ks))","user":"556159fae4b0c656e3ff17c7"},{"code":"(fn [e col] (reduce #(assoc %1 %2 e) {} col))","problem":156,"user":"527c045fe4b03e8d9a4a75a8"},{"problem":156,"code":"(fn [x y] (into {} ((fn [el li] (map (fn [x] {x el}) li)) x y)))","user":"544e1794e4b0e39780006980"},{"code":"(fn [default keys] (into {} (for [k keys] [k default])))","problem":156,"user":"532347dde4b09d4e7a9b54cc"},{"problem":156,"code":"(fn [dv sq] (reduce #(assoc %1 %2 dv) {} sq))","user":"558fec41e4b0277789237666"},{"problem":156,"code":"(fn [default kys] (into {} (map (fn [x] [x default]) kys)))","user":"52d74c2de4b09f7907dd1373"},{"code":"#(into {} (sort (zipmap %2 (repeat %))))","problem":156,"user":"513ca934e4b0b86ece9f3228"},{"code":"(fn [x y]\n  (reduce (fn [a b] (assoc a b x)) {} y)\n  )","problem":156,"user":"528ce039e4b0239c8a67aebc"},{"problem":156,"code":"(fn [x ks]\n  (into {} (for [k ks] [k x])))","user":"52dc7344e4b09f7907dd13cf"},{"problem":156,"code":"(fn [vals keys] (zipmap keys (repeat vals)))","user":"567476bde4b05957ce8c6139"},{"problem":156,"code":"(fn [values  my-keys]   \n     (zipmap  my-keys  (take  (count  my-keys) (repeat  values))))","user":"5403f305e4b0df28a13c62e3"},{"problem":156,"code":"#(reduce (fn [m k] (conj m {k %})) {} %2)","user":"53b15e6ee4b047364c04448f"},{"code":"(fn [default the-keys]\n  (loop \n    [the-keys the-keys\n     the-map {}]\n    (if (> (count the-keys) 0) \n      (recur (rest the-keys)\n             (assoc the-map (first the-keys) default))\n      the-map)))","problem":156,"user":"50989786e4b04e098a4c7274"},{"problem":156,"code":"(fn[va ma] (zipmap ma (replicate (count ma) va)))","user":"575d26f0e4b02ea11479937b"},{"code":"(fn [d m] (into {} (map (fn [e] [e d]) m)))","problem":156,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":156,"code":"(fn [v coll] (apply hash-map (reduce #(into %1 [%2 v]) [] coll)))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":156,"code":"(fn [v keys]\n  (reduce (fn [t el] (assoc t el v) ) {} keys))","user":"54dce62fe4b024c67c0cf78c"},{"problem":156,"code":"(fn[a-val a-map]\n        (loop [[head & tail] a-map\n               res {}]\n          (if (nil? head)\n            res\n            (recur tail (assoc res head a-val)))))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":156,"code":"(fn [x m] \n  (into {} \n    (map #(conj [%] x) m)))","user":"5fb7a87be4b08cb800c85b5f"},{"code":"(fn [v col] (apply hash-map (interleave col (repeat v))))","problem":156,"user":"532c0507e4b09d4e7a9b553c"},{"problem":156,"code":"(fn map-default [defval mapkeys]\n     (reduce\n       (fn [m k]\n         (assoc m k defval))\n       {}\n       mapkeys))","user":"5195fadee4b04c0af7ff3c11"},{"problem":156,"code":"(fn [default keys]\n  (into {} (map #(do [%1 default]) keys)))","user":"542769f8e4b01498b1a71b24"},{"problem":156,"code":"(fn [x ys] (into {} (map (fn [y] [y x]) ys)))","user":"57d67e11e4b0bd073c2023c5"},{"code":"(fn this [default-value keys]\n  (if (empty? keys)\n    {}\n    (assoc (this default-value (rest keys)) (first keys) default-value)))","problem":156,"user":"4ec12577535dfed6da9c6da8"},{"code":"(fn [default s]\n    (loop [s s result {}]\n      (if (empty? s)\n        result\n        (recur (rest s) (conj result [( first s) default])))))","problem":156,"user":"52a7634ae4b0c58976d9ac16"},{"code":"#(apply hash-map (mapcat (fn [x] [x %1]) %2))","problem":156,"user":"53468f6ce4b084c2834f4a3f"},{"code":"(fn [n m]\n  (into {} (map #(vector % n) m)))","problem":156,"user":"5024d54fe4b07ca75732c81f"},{"problem":156,"code":"(fn [d keys] (apply hash-map (interleave keys (repeat d))))","user":"5de53245e4b0948ae9d9ae11"},{"code":"#(zipmap %2 (iterate (fn[a] a) %1))","problem":156,"user":"531d34cfe4b08068f379edac"},{"problem":156,"code":"(fn [v coll]\n  (into {} (map #(clojure.lang.MapEntry. % v) coll)))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":156,"code":"; cara sampah:\n; (fn mymap [n m] (apply assoc {} ((fn [x y] (conj (vec (interpose x y)) x)) n m)))\n\n; setelah tau ada repeat\n(fn [nilai kuncis] (zipmap kuncis (repeat nilai)))","user":"56278266e4b00e49c7cb47d3"},{"problem":156,"code":"(fn [ele all] (into {} (map #(into [] [% ele]) all)))","user":"569bfc43e4b0542e1f8d145c"},{"problem":156,"code":"(fn [defaultvalue mylist]\n   (into {} (for [x mylist]\n     [x defaultvalue]\n     ))\n\n      )","user":"545e5805e4b01be26fd74679"},{"problem":156,"code":"(fn [d l] (into {} (map (fn [x] [x d]) l)))","user":"562add6de4b00e49c7cb4834"},{"problem":156,"code":"(fn [x keys] (apply merge (map #(hash-map % x) keys)))","user":"54c9571ee4b045293a27f66b"},{"problem":156,"code":"(fn [default s]\n  (apply hash-map (mapcat #(list %1 %2) s (repeat (count s) default))))","user":"56c427bbe4b05cc29241ee94"},{"problem":156,"code":"(fn [default-value keys-in]\n  (loop [remaining-keys keys-in result {}]\n    (if (empty? remaining-keys)\n      result\n      (recur (rest remaining-keys) (conj result {(first remaining-keys) default-value})))))","user":"56e31aaae4b03a7c14b85a3e"},{"problem":156,"code":"(fn [defaults keys]\n  (into {} (map #(vector % defaults) keys)))","user":"5e95873ae4b0fbed045a380a"},{"code":"(fn [a b] (reduce #(conj %1 {%2 a}) {} b))","problem":156,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":156,"code":"(fn [a-default a-keys]  (reduce merge {} (map (fn [a-key] {a-key a-default}) a-keys)))","user":"561c57b9e4b064ca9f4b1697"},{"problem":156,"code":"(fn [d v] (reduce merge (for [x v] (sorted-map x d))))","user":"511036c5e4b04c71fce993ee"},{"problem":156,"code":"(fn [default-value vector-of-keys]\n (reduce #(assoc %1 %2 default-value) {} vector-of-keys)\n)","user":"57042a94e4b0b0fb43fd0660"},{"problem":156,"code":"(fn [x-default y-seq] (reduce #(into %1 {%2 x-default} ) {} y-seq))","user":"5f1eebcee4b0f565ad998273"},{"code":"#(reduce (fn [m x] (assoc m x %1)) {} %2)","problem":156,"user":"50feab26e4b03cd852b4e850"},{"problem":156,"code":"(fn [x y]\n  (reduce #(conj %1 (hash-map %2 x)) {} y))","user":"571d80c7e4b0145328a7627e"},{"problem":156,"code":"#(reduce (fn [acc cur] (assoc acc cur %1)) (hash-map) %2)","user":"5cc4b34de4b0ccb061962805"},{"code":"(fn [value elements]\n   (apply hash-map (interleave elements (repeat value))))","problem":156,"user":"529c6995e4b04e0c58e87b61"},{"code":"#(into {} (map (fn [x] {x %1}) %2))","problem":156,"user":"50e82c31e4b0ebbe794eb7da"},{"code":"(fn [val keys] \n   (reduce #(assoc %1 %2 val) {} keys))","problem":156,"user":"4feddf2ee4b0198f34b063be"},{"problem":156,"code":"(fn [v l] ( into {} (map (fn [z] [z v]) l)))","user":"55d35a01e4b0e31453f64a63"},{"problem":156,"code":"(fn [default-value seq] (into {} (map (fn [key] (hash-map key default-value)) seq)))","user":"5deeb6fde4b093ff7172759f"},{"problem":156,"code":"#(into {} (for [ x %2 ] [x %1] ))","user":"57011eb3e4b08d47c97781d1"},{"problem":156,"code":"(fn [default kseq] (into {} (map #(vector % default) kseq)) )","user":"54fa60dfe4b0cf870d934704"},{"problem":156,"code":"(fn [d ks] (reduce (fn [mp k] (conj {k d} mp)) {} ks))","user":"55b25970e4b0da326a65cf7e"},{"code":"(fn [default keylist] (apply conj (conj (reverse (map #(vector % default) keylist)) {})))","problem":156,"user":"513a4babe4b067e25a345eca"},{"problem":156,"code":"(fn [default keys] (reduce merge {} (map (fn [key] {key default}) keys)))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":156,"code":"(fn\n  [val a-seq]\n  (reduce #(conj %1 {%2 val}) {} a-seq))","user":"56e24e68e4b03a7c14b85a34"},{"problem":156,"code":"(fn [y xs] (into {} (for [x xs] {x y})))","user":"59f78b49e4b0ca45a743a30e"},{"code":"(fn\n  [v coll]\n  (loop [s coll\n         ans {}]\n    (let [[h & t] s\n          ans (conj ans {h v})]\n      (if (empty? t)\n        ans\n        (recur t ans)))))","problem":156,"user":"52fdb82ae4b047fd55837031"},{"problem":156,"code":"(fn createMap\n   ([ourvals ourMap]\n    (zipmap ourMap (repeat ourvals))))","user":"5499e052e4b03163384f4705"},{"code":"(fn [val coll] (reduce #(assoc %1 %2 val) {} coll))","problem":156,"user":"4fc66c43e4b0ee37620e1812"},{"problem":156,"code":"(fn [v k] (reduce #(into %1 (hash-map %2 v)) {} k))","user":"586615e6e4b0f14aab7c8858"},{"code":"(fn [x xs] (zipmap xs (repeat x)))","problem":156,"user":"4f9ff06ce4b0dcca54ed6d41"},{"problem":156,"code":"(fn [def1 seq1] (reduce (fn [xs x] (into xs {x def1})) {} seq1))","user":"5df0c6ffe4b093ff717275c2"},{"problem":156,"code":"(fn[d k](zipmap k (repeat d)))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"(fn [my_value my_keys]\n  (loop [m {} k (first my_keys) others (rest my_keys)]\n    (if (empty? others) (conj m {k my_value})\n      (recur (conj m {k my_value}) (first others) (rest others)))))","problem":156,"user":"51c342e9e4b0851ac09658f3"},{"problem":156,"code":"(fn [v, ks] (->> \n               (map #(hash-map % v) ks)\n               (reduce into)))","user":"54357066e4b0b6b47310fcfd"},{"problem":156,"code":"(fn [defval listinp] (apply hash-map (interleave listinp (repeat (count listinp) defval))))","user":"505caadfe4b0bcb5664c3d3e"},{"code":"(fn [ydef xs]\n  (loop [x xs result {}]\n    (if (= (count x) 0)\n      result\n      (recur (rest x) (assoc result (first x) ydef)))))","problem":156,"user":"50045388e4b0678c553fc44e"},{"code":"#(zipmap %2 (cycle [%]))","problem":156,"user":"4e8612f8535db62dc21a62f2"},{"problem":156,"code":"(fn [m d v] (if (nil? v)\n              m\n              (recur (assoc m (first v) d) d (next v)))) {}","user":"56b1b59be4b0982f16b37df2"},{"code":"(fn\n  [el seq]\n  (->> el (repeat (count seq)) (interleave seq) (apply hash-map))\n  )","problem":156,"user":"4ea31da2535d7eef308072c1"},{"problem":156,"code":"(fn f ([v s] (f v s {})) ([v s m] (if (empty? s) m (recur v (rest s) (conj m {(first s) v})))))","user":"56ab7578e4b03c432f18733d"},{"problem":156,"code":"(fn [default keys] \n  (reduce \n   (fn [xs x] (conj xs {x default})) \n   {} \n   keys))","user":"5ce2bf8ee4b0a17bb84e2b2e"},{"problem":156,"code":"(fn [default, ngler] (zipmap ngler (repeat default)))","user":"6034e358e4b0d5df2af222d1"},{"problem":156,"code":"(fn [default l]\n  (reduce #(conj %1 {%2 default}) {} l))","user":"5954cea2e4b066ee0a44af0a"},{"code":"(fn [default keys]\n  (into {} (map #(vector % default) keys)))","problem":156,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":156,"code":"(fn [a coll] (into {} (map (fn [x] [x a]) coll)))","user":"5dbe27c3e4b09f47823971c4"},{"problem":156,"code":"(fn [default keys]\n    (reduce (fn [m k] (conj m {k default}))\n        {}\n        keys))","user":"543c0e6ce4b032a45b869339"},{"code":"(fn [value keys]\n           (reduce merge (map #(hash-map % value) keys)))","problem":156,"user":"4dbd7107535d020aff1edf42"},{"code":"(fn [d k] (apply hash-map (mapcat #(vector % d) k)))","problem":156,"user":"514f6679e4b0b449e54b8df5"},{"problem":156,"code":"(fn [a b] (into {} (for [i b] [i a])))","user":"53fb4843e4b0de5c4184857d"},{"problem":156,"code":"(fn [x coll] (into {} (for [y coll] {y x})))","user":"57d9bc53e4b0bd073c202404"},{"problem":156,"code":"(fn [default-value key-coll] (loop [default-value default-value key-coll key-coll map-coll (hash-map)]\n                               (if (empty? key-coll)\n                                 map-coll\n                                 (recur default-value (rest key-coll) (conj map-coll {(first key-coll) default-value}))\n                                 )\n                               )\n  )","user":"56885c32e4b0dcc4269f4068"},{"code":"(fn [default coll] (reduce #(assoc %1 %2 default) {} coll))","problem":156,"user":"4df247b8535d08e6dec9fe25"},{"code":"(fn [v c]\n  (zipmap c (repeat (count c) v)))","problem":156,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":156,"code":"(fn [v s]\n  (into {} (map #(vector %1 %2) s (repeat v))))","user":"5bafd5c8e4b0a20761a234dd"},{"problem":156,"code":"(fn [v keys] (reduce #(assoc % %2 v) {} keys))","user":"53d86564e4b0e771c302546b"},{"problem":156,"code":"(fn [default xs] (zipmap xs (map (constantly default) xs)))","user":"594be1cce4b07ddc2dafae47"},{"code":"(fn [defval keys]\n  (->> keys (mapcat (fn [k] [k defval])) (apply hash-map)))","problem":156,"user":"5344fe13e4b084c2834f4a32"},{"code":"(fn [default my-seq]\n  (loop [my-map {} my-seq my-seq]\n    (cond (empty? my-seq) my-map\n          :else (recur (assoc my-map (first my-seq) default) (rest my-seq)))))","problem":156,"user":"51a2569ee4b00957e520db7d"},{"problem":156,"code":"(fn [v ks] (apply merge (map (fn [k] {k v}) ks)))","user":"5e41a67be4b01d43a70e8e56"},{"code":"(fn mapdef [x y]\n  (apply merge (map (fn [a b] {b a}) (repeat x) y)))","problem":156,"user":"500cb910e4b05f7c30cfa698"},{"problem":156,"code":"(fn map-with-default-val [val keys]\n  (into {} (map (fn [k] [k val]) keys)))","user":"5decd4fde4b093ff7172757b"},{"problem":156,"code":"(fn [v s]\n  (loop [r s\n        h-m {}]\n    (if (empty? r)\n      h-m\n      (recur (rest r) (assoc h-m (first r) v))\n    )\n  )\n)","user":"60335b35e4b0d5df2af222bf"},{"code":"(fn\n  [x coll]\n    (let\n      [a (atom ())]\n      (doseq [c coll]\n        (swap! a conj {c x}))\n      (reduce merge {} (merge @a))))","problem":156,"user":"4f601623e4b0defedf855fa3"},{"problem":156,"code":"(fn defval [x [head & tail]]\n  (if (= nil head)\n    {}\n  \t(conj {head x} (defval x tail))\n  )\n)","user":"56aa9464e4b07966d5a8a08d"},{"code":"(fn default-map\n  [default keys]\n  (reduce conj {} (map (fn [key] {key default}) keys)))","problem":156,"user":"511720eae4b0063b4e3e16da"},{"problem":156,"code":"(fn [def-val coll]\n  (zipmap coll (vec (repeat (count coll) def-val))))","user":"53f5c402e4b0db01ade6f9d4"},{"problem":156,"code":"(fn\n  [v ks]\n  (reduce \n   (fn [a k] \n     (conj a {k v})) \n   {} ks))","user":"5aafde49e4b073f1774425a1"},{"problem":156,"code":"(fn [value key-coll] (reduce #(assoc %1 %2 value) {} key-coll))","user":"5ef9ea69e4b09b61f08553d1"},{"problem":156,"code":"(fn [v coll]  (into {} (for [x coll] {x v})))","user":"550ac34fe4b06e50f9beb133"},{"problem":156,"code":"(fn [default init-keys] (into (hash-map) (map (fn [k] {k default}) init-keys)))","user":"5f15b1e2e4b091ba50b4dbbd"},{"problem":156,"code":"(fn [v ks]\n  (into {}\n    (for [k ks]\n      [k v]\n    )))","user":"567ea403e4b0feffd0d18eb5"},{"problem":156,"code":"(fn [defV kvs] (into {} (map (fn [x] (assoc {} x defV)) kvs)))","user":"58e6c2cae4b056aecfd47cbf"},{"problem":156,"code":"(fn [scalar collection]\n    (into {} (map #(assoc {} %1 %2) collection (iterate #(identity %1) scalar))))","user":"58a202f2e4b02bd94d917ece"},{"problem":156,"code":"(fn [values key-names]\n  (reduce (fn [acc key-name]\n            (assoc acc key-name values)\n            )\n            {}\n          key-names)\n)","user":"5c3e5227e4b08cd430848e80"},{"code":"(fn [v m] (zipmap m (repeat v)))","problem":156,"user":"4f9174d0e4b0dcca54ed6c9b"},{"problem":156,"code":"(fn [val keys]\n  (apply hash-map (mapcat list keys (repeat val))))","user":"547584d9e4b0c51c1f4d729b"},{"problem":156,"code":"(fn \n   [value keys]\n   (reduce (fn [m k] (assoc m k value)) {} keys))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn [item kys] \n  (reduce (fn [coll ky] (conj coll {ky item})) {} kys))","problem":156,"user":"50b11fbce4b009df37c708cb"},{"code":"(fn [defval kees]\n  (zipmap kees (repeat defval)))","problem":156,"user":"51ce1320e4b0e42293a22551"},{"code":"(fn [val, key] (into {} (for [x key]  [x val])))","problem":156,"user":"5194f482e4b05be8c43d2385"},{"problem":156,"code":"(fn [def-v col]\n   (into {} (for [e col]\n              [e def-v])))","user":"5d7670c4e4b02e6b30c93525"},{"problem":156,"code":"#(reduce (fn [x y] (assoc x y %1)) (hash-map) %2)","user":"5c478ba2e4b0e06e1360a3b2"},{"problem":156,"code":"(fn [def-v key-list] (zipmap key-list (repeat def-v)))","user":"5e2ead6ae4b05b4b015161f5"},{"code":"(fn [arvo mappi] (reduce #(assoc %1 %2 arvo) {} mappi))","problem":156,"user":"506f2f58e4b09350ab4199fa"},{"problem":156,"code":"(fn [dv kv] \n  (apply hash-map (interleave kv (repeat (count kv) dv))))","user":"5713c575e4b07c98581c3aab"},{"code":"(fn [c xs]\n   (apply hash-map\n  (interleave xs (repeat c))\n              ))","problem":156,"user":"5097ddfce4b087ccf61a7af0"},{"problem":156,"code":"#(let [val %1 ll %2]\n    (reduce (fn [x y](assoc x y val)) {} ll))","user":"55ec04c4e4b0121d4835fdc1"},{"code":"( fn mapDef\n  ([d s] (mapDef d s {}))\n  ([d s m]\n    (if(not-empty s) \n      (mapDef d (butlast s) (conj m [(last s) d]))\n      m\n    )\n  )\n)","problem":156,"user":"4fb7b80ae4b081705acca2d4"},{"code":"(fn [dv m] (reduce #(conj %1 [%2 dv]) {} m))","problem":156,"user":"51000111e4b00d7ad4cab15e"},{"problem":156,"code":"(fn f [k m] (into {} (map #(vector % k) m)))","user":"5683d2a9e4b0945ebc182aa0"},{"problem":156,"code":"(fn [default sequence]\n  (loop [retval {}\n         remaining sequence]\n    (if (not (seq remaining))\n      retval\n      (recur (conj retval (hash-map (first remaining) default))\n             (rest remaining)))))","user":"5f7ea492e4b0c071e6c840d9"},{"code":"(fn [x, y] \n  (reduce  (fn [summ unit] \n             (conj summ {unit x})) {} y ))","problem":156,"user":"52361d84e4b05f3be1c7c8e5"},{"code":"#(into {} (map vector %2 (repeat %1) ))","problem":156,"user":"4faa8de0e4b081705acca1f8"},{"code":"(fn [one, two] (zipmap two (repeat one)))","problem":156,"user":"53286389e4b09d4e7a9b5504"},{"problem":156,"code":"(fn [v map-keys]\n    (apply hash-map (mapcat #(vector % v) map-keys)))","user":"55ac07afe4b03311e7b7328f"},{"code":"#(apply conj (map (fn [k v] {k v}) %2 (repeat %1)))","problem":156,"user":"52ba2af3e4b07a9af57922cc"},{"problem":156,"code":"(fn [x y] \n    (apply hash-map (interleave y (repeat (count y) x))))","user":"513f1f18e4b051389b345b3d"},{"problem":156,"code":"(fn map-with-defaults\n  [value ks]\n  (reduce #(assoc %1 %2 value) {} ks))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":156,"code":"(fn [value keys] (\n                              loop [x keys\n                                    result {}]\n                              (if (< 0 (count x))\n                                (recur (rest x) (assoc result (first x) value ))\n                                result)\n                              ))","user":"5a677a5fe4b0512ff01cd9e7"},{"problem":156,"code":"(fn [def-val coll]\n  (into {} (reduce (fn [new-map key]\n                     (conj new-map [key def-val]))\n                   []\n                   coll)))","user":"54ab1b5ae4b09f271ff37cc2"},{"problem":156,"code":"(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))","user":"541168dee4b01498b1a719c3"},{"code":";#(into {} (map vector %2 (repeat %)))\n#(zipmap %2 (repeat %1))","problem":156,"user":"4f32ef71e4b0d6649770a098"},{"problem":156,"code":"(fn [v key-list]\n\t(into {} (for  [k key-list] {k v})))","user":"54468fd3e4b032a45b8693b2"},{"code":"(fn makemap [dv keys]\n  (loop [m {}\n         k keys]\n     (if (empty? k) m\n        (recur (conj m [(first k) dv]) (rest k)))))","problem":156,"user":"4f036fb3535dcb61093f6ac8"},{"problem":156,"code":"(fn to-map [q w]\n  (reduce #(assoc % %2 q) {} w))","user":"569f4dabe4b0542e1f8d1491"},{"problem":156,"code":"(fn [_val _list]\n  (loop [result {}\n         _keys _list]\n    (if (empty? _keys) result\n  \t\t(recur (assoc result (first _keys) _val) (rest _keys)))))","user":"5ac9c737e4b0e27600da77d2"},{"problem":156,"code":"(fn [value col]\n  (apply hash-map (interleave col (repeat (count col) value))))","user":"525873e8e4b0cb4875a45cb2"},{"problem":156,"code":"#(apply merge (for [x %2\n    :let [y (hash-map x %1)] ]\n  y))","user":"5cbc1ee7e4b026601754b9e1"},{"code":"#(apply conj (map hash-map %2 (repeat (count %2) %1)))","problem":156,"user":"52efd3d9e4b05e3f0be25ed4"},{"problem":156,"code":"(fn sdv [v aseq] (apply merge (for [k aseq] (hash-map k v))))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":156,"code":"(fn [val keys]\n  (apply hash-map (interleave keys (repeat val))))","user":"60c91f48e4b0e0fa5f1b4304"},{"code":"(fn [default ks]\n      (into {} (for [k ks] [k default])))","problem":156,"user":"537bde5de4b06839e8705e73"},{"problem":156,"code":"(fn foo\n  [default keyset]\n  (reduce #(assoc %1 %2 default) {} keyset))","user":"5f088bb3e4b0cf489e8d7f5f"},{"code":"(fn [a b] (into {} (map #(vec [% a]) b)))","problem":156,"user":"4ecc1d85535d23f0362276f8"},{"code":"(fn [x lst] (loop [s lst coll {}] (if (empty? s) coll (recur (rest s) (assoc coll (first s) x)))))","problem":156,"user":"5179fd22e4b01aacecbecbe5"},{"code":"(fn [x m] (zipmap (reverse m) (for[i (range (count m))] x) ))","problem":156,"user":"52fc9b94e4b047fd5583701d"},{"problem":156,"code":"(fn \n  [default coll]\n  (zipmap coll (repeat default)))","user":"5be9ad9be4b0f319e2d7ec76"},{"code":"#(into {}\n       (for [k %2]\n         [k %]))","problem":156,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":156,"code":"(fn [defval defkeys] (reduce #(conj %1 [%2 defval]) {} defkeys))","user":"53d6cf90e4b0e771c302545c"},{"code":"(fn [x ks] (reduce #(assoc %1 %2 x) {} ks))","problem":156,"user":"5160195ae4b0e2be8aa20be3"},{"problem":156,"code":"(fn [val keys]\n  (into {} (map (fn [key] [key val]) keys)))","user":"60bca877e4b0e0fa5f1b4287"},{"code":"(fn[d ks]\n  (apply merge (map #(hash-map % d) ks)))","problem":156,"user":"4fc18846e4b081705acca331"},{"code":"(fn [v the-keys]\r\n  (zipmap the-keys (repeat (count the-keys) v)))","problem":156,"user":"50493b52e4b06e84b772a23e"},{"problem":156,"code":"(fn [v k] (reduce (fn [acc it] (assoc acc it v)) {} k))","user":"5cbdc591e4b026601754ba00"},{"problem":156,"code":"#(reduce merge (map (fn [x] {x %1}) %2))","user":"54c9636fe4b045293a27f66e"},{"problem":156,"code":"(fn [default keys] (loop [[k & r] keys acc {}] (if (nil? k) acc (recur r (conj acc [k default])))))","user":"543c5200e4b032a45b86933e"},{"problem":156,"code":"(fn [dv ks]\n  (into {} (map #(assoc {} % dv) ks)))","user":"55fb1c77e4b0f488688e065c"},{"problem":156,"code":"(fn [default map-keys]\n  (reduce merge (map #(array-map % default) map-keys)))","user":"4fdb881ee4b05e33b9224f5e"},{"code":"#(apply hash-map (reduce into [] (map (fn [k v] [k v]) %2 (repeat (count %2) %1))))","problem":156,"user":"52de249ae4b09f7907dd13ed"},{"problem":156,"code":"(fn [ds ks]  \n   (into {} \n         (for [x ks] {x ds})))","user":"5463c452e4b01be26fd746c4"},{"code":"(fn [default-element, map-keys]\n    (loop [result {} rest-keys map-keys]\n        (if (empty? rest-keys) result\n          (recur (conj result [(first rest-keys), default-element]) (rest rest-keys)))))","problem":156,"user":"533e45a7e4b085b17e897d8c"},{"problem":156,"code":"#(apply array-map (conj (vec (interpose %1 %2)) %1))","user":"56f86f98e4b08e7d20b96837"},{"problem":156,"code":"(fn [defv k]\n  (zipmap k (repeat (count k) defv)))","user":"57344edbe4b0cd1946bd1008"}]