[{"problem":81,"code":"(fn[s1 s2] (loop [res #{}\n                   s1 s1]\n                (if (empty? s1)\n                    res\n                    (recur (if (contains? s2 (first s1))\n                               (conj res (first s1))\n                               res) (rest s1)))))","user":"5f727d2fe4b02876ed9fd08f"},{"code":"(fn [s1 s2] \n  (if (> (count s1) (count s2))\n    (recur s2 s1)\n    (set (filter s2 s1))))","problem":81,"user":"5046ee3ee4b03b02161376b4"},{"problem":81,"code":"(fn\n  [a b]\n  (loop [x a y b o #{}]\n    (cond (empty? x) o\n          :else (if (contains? y (first x))\n                  (recur (rest x) y (conj o (first x)))\n                  (recur (rest x) y o)))))","user":"57acee37e4b0b8559636fc94"},{"code":"(fn [s t] (set (filter #(and (contains? s %) (contains? t %)) (set (concat s t)))))","problem":81,"user":"5175616ae4b0dea9bbfba576"},{"problem":81,"code":"(fn [x y]\n        (set (filter #(contains? y %) x)))","user":"544e6b7fe4b0e39780006986"},{"code":"(fn\n  [x y]\n  (let [col1  (vec x)\n        col2  (vec y)\n        total (- (count x) 1)]\n    (loop [n   0\n           res []]\n      (if (> n total)\n        (into #{} res)\n        (recur (inc n) (if (not= nil (some (into #{} (vector (get col1 n))) col2))\n                         (into res (vector (get col1 n)))\n                         res))))))","problem":81,"user":"531016d0e4b08068f379ecd1"},{"problem":81,"code":"#(clojure.set/difference\n       %1\n       (clojure.set/difference\n         (clojure.set/union %1 %2)\n         %2))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":81,"code":"(fn [a b]\n   (into #{}\n         (filter\n           (fn [x] (not (nil? x)))\n           (map a b))))","user":"52281e1ee4b0186687e23a69"},{"problem":81,"code":"(fn [s1 s2] \n  (into #{} (filter s1 s2)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":81,"code":"(fn [s1 s2] \n     (set (filter s1 s2))\n   )","user":"6024544be4b0d5df2af2221f"},{"problem":81,"code":"(fn [set1 set2] \n  (set (filter #(set2 %) set1))\n  )","user":"5de6484ce4b0986d99407f66"},{"code":"#(clojure.set/select (fn [x] (and (get %1 x) (get %2 x))) (clojure.set/union %1 %2))","problem":81,"user":"4ea1ecfa535d7eef308072bb"},{"problem":81,"code":"(fn [a b]\n  (reduce #(if (contains? b %2) (conj %1 %2) %1) #{} a))","user":"5764457ae4b0994c1922fbf3"},{"problem":81,"code":"(fn [x y]\n    (reduce #(if (some #{%2} x)\n               (conj %1 %2)\n               %1) #{} y))","user":"586b6753e4b01531a375e956"},{"problem":81,"code":"(fn p81 [set1 set2]\n  (->> set2\n    (map #(some #{%} set1))\n       (remove nil?)\n       (set)\n       ))","user":"5400e918e4b0de5c41848619"},{"code":"(fn [seta setb]\n  (set (filter (fn [ea] (contains? setb ea)) seta)))","problem":81,"user":"538c3424e4b0b51d73faae58"},{"code":"(fn intsect [s1 s2]\n  (reduce (fn [ret this]\n            (if (s1 this)\n              (conj ret this)\n              ret)) #{} s2))","problem":81,"user":"513cb853e4b0b86ece9f322b"},{"problem":81,"code":"(fn [a b]\n  (loop [i a r #{}]\n    (if (not-empty i)\n      (if (contains? b (first i))\n        (recur (rest i) (conj r (first i)))\n        (recur (rest i) r))\n      r)))","user":"5683d2a9e4b0945ebc182aa0"},{"problem":81,"code":"(fn [a b] (set (for [x a :when (b x)] x)))","user":"576b4e6be4b0a07e8fc1812b"},{"problem":81,"code":"#(set (filter %1 %2))\n;(fn [col1 col2] (reduce #(if (contains? col1 %2) (conj %1 %2) %1) #{} col2))","user":"574c5e18e4b02ea11479921b"},{"problem":81,"code":"(fn intersecson\n  [set1 set2]\n  (->> set1\n       (reduce (fn\n                 [accumulator current]\n                 (if (contains? set2 current)\n                   (conj accumulator current)\n                   accumulator)) [])\n       (into #{})))","user":"5df0f338e4b093ff717275c6"},{"code":"(fn [a b]\n   (reduce (fn [set val]\n             (if (contains? a val) (conj set val) set))\n           #{} b))","problem":81,"user":"4f03818e535dcb61093f6b00"},{"problem":81,"code":"(fn [a b]\n    (set (filter #(contains? b %) a)))","user":"538c6db7e4b0b51d73faae5a"},{"code":"(fn [left right]\n   (apply hash-set (filter #(contains? right %) left\n     \n     \n     )))","problem":81,"user":"4f616892e4b0defedf855fbf"},{"problem":81,"code":"(fn[x y] (set(filter #(not= nil %)(map (fn[el](if(contains? y el) el)) x))))","user":"561d7246e4b064ca9f4b16b1"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [s1 set1\n         lst ()]\n    (if (empty? s1)\n      (set (reverse lst))\n      (if (contains? set2 (first s1))\n        (recur (rest s1) (cons (first s1) lst))\n        (recur (rest s1) lst)))))","user":"57f81549e4b0d3187e900918"},{"code":"(fn [& ss]\n    (set (map first (filter #(> (last %) 1)\n      (loop [ss ss r {}]\n        (if-let [s (first ss)]\n          (recur (rest ss) (reduce #(assoc %1 %2 (inc (get %1 %2 0))) r s))\n          r))))))","problem":81,"user":"4f77b68de4b0fbe0118ec581"},{"code":"(fn [x y]\n  (set (filter (partial contains? x) y)))","problem":81,"user":"52e59ca5e4b09f7907dd1464"},{"code":"(\n  fn sol [ coll1 coll2 ](\n\t\tset ( filter coll1 coll2 )\n\t) \n)","problem":81,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"(fn intsec [a b]\n  (set (filter #(contains? b %) a)))","problem":81,"user":"50fe2420e4b03cd852b4e84a"},{"problem":81,"code":"(fn [s1 s2] (reduce (fn [s v] (if (contains? s1 v) s (disj s v))) s2 s2))","user":"54e540c1e4b024c67c0cf7f9"},{"code":"(fn inter [left right]                                                                                                                           \n    (set (filter #(and (contains? left %) (contains? right %)) (concat left right))))","problem":81,"user":"50057f23e4b0678c553fc466"},{"problem":81,"code":"(fn [set1 set2] (into #{} (filter #(contains? set1 %) set2)))","user":"5582dfb6e4b05c286339e10d"},{"code":"#(set (filter % %2))","problem":81,"user":"4de77a0a535d08e6dec9fdfa"},{"problem":81,"code":"(fn [coll1 coll2] (into #{} (remove nil? (map #(if (contains? coll1 %) %) coll2))))","user":"57f3b841e4b0511f1d294e0f"},{"code":"(fn [x y]\n  (set(filter #(contains? x %) y)))","problem":81,"user":"4fb23582e4b081705acca28a"},{"problem":81,"code":"(fn myint [sa sb] (set (filter #(sb %) sa)))","user":"56fa2905e4b07572ad1a88be"},{"problem":81,"code":"(fn [c1 c2]\n  (->> c1\n       (map c2)\n       (filter identity)\n       (into #{})))","user":"5032748ae4b0e78df07b092f"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [res x]\n            (if (contains? s1 x)\n              (conj res x)\n              res))\n          #{}\n          s2))","user":"5ce077e9e4b0a17bb84e2b0c"},{"problem":81,"code":"(fn intersects [x y] (if (= 0(count x))\n                         #{}\n                         (if (contains? y (first x))\n                           (conj (intersects (drop 1 x) y) (first x))\n                           (intersects (drop 1 x) y))))","user":"604f4be1e4b0b7ec0ac60ace"},{"code":"(fn [af bf] (set (filter (fn [xf] (contains? bf xf)) af)))","problem":81,"user":"4e9dafe1535dbda64a6f6b89"},{"problem":81,"code":"(fn [c1 c2] (into #{} (filter #(contains? c1 %) c2)))","user":"514992d2e4b0b64cbeae1848"},{"problem":81,"code":"(fn [set1 set2]\n  (into #{} (filter #(set1 %) set2)))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn [a b]\n  (let [u clojure.set/union\n        d clojure.set/difference]\n    (d (u a b)\n       (d a b)\n       (d b a))))","problem":81,"user":"4daea889edd6309eace4d15b"},{"problem":81,"code":"(fn [seq1 seq2]\n  (set \n   (flatten\n   (for [item1 seq1 item2 seq2] \n     (if (= item1 item2) item1 '())))))","user":"57f52d3be4b0903ccab3dce7"},{"code":"clojure.set/select","problem":81,"user":"4dce6e41535d5973398f92a2"},{"problem":81,"code":"(fn my-intersection [coll-1 coll-2]\n  (set \n   (remove #(not (coll-1 %)) coll-2)))","user":"53b7aa6ce4b047364c0444d1"},{"code":"#(set (for [i %1 :when (contains? %2 i)] i))","problem":81,"user":"508c3d42e4b0f17d83ea26b2"},{"problem":81,"code":"(fn [a b] (loop [ra a f #{}] (if (empty? ra) f (recur (rest ra) (if (contains? b (first ra)) (conj f (first ra)) f)))))","user":"542edb4ae4b0dad94371f2c8"},{"problem":81,"code":"(fn [coll1 coll2]                                                                                                                                                                              \n    (let [mhash (apply hash-map (interleave coll1 (repeat true)))]\n      (set(filter #(contains? mhash %) coll2))) )","user":"5804b491e4b0a837a8b30cac"},{"problem":81,"code":"(fn [xs ys]\n  (set (for [[id freq] (frequencies (concat xs ys)) :when (> freq 1)] id)))","user":"579c7db7e4b05b1deef9ae0a"},{"code":"(fn [a b] (set (filter #(get a %) b)))","problem":81,"user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn [set1 set2]\n   (let [all (clojure.set/union set1 set2)\n         diff1 (clojure.set/difference set1 set2)\n         diff2 (clojure.set/difference set2 set1)\n         diff (clojure.set/union diff1 diff2)]\n     (clojure.set/difference all diff)))","problem":81,"user":"51cacda3e4b068dadb8f2227"},{"code":"#(into #{} (for [x %1 y %2 :when (= x y)] x ))","problem":81,"user":"534e1f56e4b084c2834f4aae"},{"problem":81,"code":"#(set (filter (fn [x] (and (contains? %1 x) (contains? %2 x))) (clojure.set/union %1 %2)))","user":"555f0789e4b0a2eb076a39bf"},{"code":"(fn [a b]\n    (reduce (fn [res y]\n                (if (nil? (a y))\n                  res\n                  (conj res (a y))\n                  ))\n        #{} b))","problem":81,"user":"4e964f4a535dbda64a6f6b42"},{"code":"#(reduce disj % (reduce disj % %2))","problem":81,"user":"4e03c616535d04ed9115e796"},{"problem":81,"code":"(fn [ & r] \n  (cond (empty? r) nil\n        (empty? (rest r)) (first r)\n        :else (into #{} (filter (fn [i] (every? (fn [x] (some #{i} x)) \n                                                (rest r))) \n                                (first r)))))","user":"53e91473e4b036ad0777e495"},{"code":"(fn [xs ys]\n  (set (filter (partial contains? ys) xs))\n)","problem":81,"user":"4f03641a535dcb61093f6a9b"},{"code":"#(reduce (fn[acc,e](if(contains? %2 e) (conj acc e) acc)) #{} %1)","problem":81,"user":"4ec75829535d6d7199dd36e1"},{"code":"(fn [xs ys]\n  (set (keep identity (map xs ys))))","problem":81,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":81,"code":"(fn my-intersection\n  [a b]\n  (set (map #(first %)(filter #(> (count %) 1) (partition-by identity (sort (concat (into [] a) (into [] b)))))))\n  )","user":"5bbbcf9ee4b0a20761a23614"},{"problem":81,"code":"(fn [& args]\n  (->> (mapcat #(into [] %) args)\n       (group-by identity)\n       (filter (fn [[k v]] (= (count v) (count args))))\n       keys\n       (into #{})))","user":"56a76f36e4b07966d5a8a05b"},{"code":"(fn [s1 s2] ( reduce #(if (s1 %2) (conj %1 %2) %1 ) #{} s2 ))","problem":81,"user":"52628bb0e4b03e8d9a4a7089"},{"code":"(fn [x y] \n  (set \n    (remove \n      (clojure.set/difference y x) \n      (remove \n        (clojure.set/difference x y) \n        (clojure.set/union x y)\n      )\n    ) \n  )\n)","problem":81,"user":"52810225e4b0757a1b171418"},{"problem":81,"code":"#(set (remove nil?\n    (sort \n    (for [x (range (min (count %1) (count %2)))] \n     (if (< (count %1) (count %2))\n         \n        (if (contains? %2 (nth (vec %1) x)) (nth (vec %1)x ))\n        \n        (if (contains? %1 (nth (vec %2) x)) (nth (vec %2)x ))\n\n         )) )))","user":"5f77b99fe4b02876ed9fd0bc"},{"problem":81,"code":"(fn\n  [s1 s2]\n  (->> (map (fn [x] (if (contains? s1 x) x nil)) s2)\n      (filter #(not (nil? %)))\n       set))","user":"55ce2b6de4b0e31453f64a26"},{"code":"#(apply sorted-set (filter (fn [item] (not= -1 (.indexOf (seq %2) item))) %))","problem":81,"user":"4f71347ae4b07046d9f4f009"},{"problem":81,"code":"(fn [x & xs]\n  (reduce #(clojure.set/difference % (clojure.set/difference % %2)) x xs))","user":"53c1b787e4b00fb29b221266"},{"code":"(fn my-intersection\n  [a b]\n  (into #{} (filter #(contains? b %) a)))","problem":81,"user":"5300b750e4b0d8b024fd3711"},{"code":"#(set (keys (filter\n  (fn [[x y]] (when (> (count y) 1) x))\n  (group-by identity (into (seq %) %2)))))","problem":81,"user":"51ca7906e4b08b1cbd0d9487"},{"problem":81,"code":"(fn\n    [s1 s2]\n    (loop\n        [i 0 r '()]\n        (cond\n            (= i (count s1))  (into #{} r)\n            (some #{(nth (apply list s1) i)} s2) (recur (inc i) (cons (nth (apply list s1) i) r))\n            :else\n            (recur (inc i) r)\n        )\n    ))","user":"6074f5ede4b069485764de52"},{"problem":81,"code":"(fn my_intersection\n  [set1 set2]\n  (reduce (fn[acc item] (if (some #(= item %) set2) (conj acc item) acc)) #{} set1 )\n)","user":"560d7863e4b05f002753df40"},{"code":"(fn [a b] (set (filter b a)))","problem":81,"user":"4f36f5f2e4b0e243712b1ece"},{"problem":81,"code":"(fn [s1 s2]\n   (set (filter (fn [x] (some #(and (= x %) %) s1)) s2)))","user":"56c70cc2e4b0ed865f9758b5"},{"code":"#(set (for [x (distinct (concat %1 %2)) :when (and (contains? %1 x)(contains? %2 x))] x))","problem":81,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":81,"code":"(fn[x & y] \n  (println \"x :\" x \"y: \" (into [] (get (into [] y) 0))) \t\n  (set (reduce   \n   (fn [a b](if (contains? x b) (conj a b)  a))\n    [] (into [] (get (into [] y) 0)))\n ))","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":81,"code":"#(-> %\n     (filter %2)\n     set)","user":"571e6d73e4b0145328a76292"},{"problem":81,"code":"#(set (filter (fn [e] (contains? %1 e)) %2))","user":"5e92adb6e4b0fbed045a37ea"},{"code":"#(->> (filter %1 %2) (apply hash-set))","problem":81,"user":"4f7f0827e4b06e829148e1d5"},{"problem":81,"code":"(fn set-intersection [xs ys] \n  (->> (clojure.set/difference xs ys)\n       (clojure.set/difference xs)))","user":"52616198e4b03e8d9a4a705e"},{"problem":81,"code":"(fn [s1 s2] ( apply hash-set (filter #(contains? s1 %) s2 )))","user":"59c76402e4b0a024fb6ae542"},{"problem":81,"code":"(fn [first second]\n  (apply sorted-set (filter #(contains? second %) first)))","user":"56f9b953e4b07572ad1a88b9"},{"problem":81,"code":"(fn intersection* [set1 set2]\n  (loop [acc #{}\n         set set2]\n    (if (empty? set)\n      acc\n      (if (contains? set1 (first set))\n        (recur (conj acc (first set)) (rest set))\n        (recur acc (rest set))))))","user":"5fe1b893e4b05ac5b16ea16f"},{"code":"(fn intersec [s1 s2]\n  (let [freq (frequencies (into (into [] s1) s2))]\n    (into #{} (map first\n                   (filter (fn [[k v]] (= v 2))\n                           freq)))))","problem":81,"user":"4f35b2ace4b0e243712b1ec5"},{"code":"(fn [s t]\n  (set (filter t (seq s))))","problem":81,"user":"4f9a0064e4b0dcca54ed6d03"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n   (reduce #(if (s2 %2) (conj %1 %2) %1) #{} s1))","user":"569f7bc2e4b0542e1f8d1494"},{"problem":81,"code":"(fn ans-81 [set1 set2]\n  (apply hash-set (filter #(contains? set2 %) set1)))","user":"608fac60e4b03bd49d9f36c7"},{"problem":81,"code":"#(into #{} (for [x %1,\n       y %2,\n       :when (= x y)]\n   x))","user":"56732c84e4b05957ce8c611c"},{"problem":81,"code":"(fn set-intersection [s1 s2]\n    (first (reduce (fn [[sr sp] elme]\n                       (if (sp elme)\n                           [(conj sr (sp elme)) sp]\n                           [sr sp]))\n                   [#{} s2] s1)))","user":"552bd5c2e4b0ffed3738f969"},{"problem":81,"code":"(fn set-intersection [x1 x2]\n  (set (filter x1 x2)))","user":"534056fce4b085b17e897dac"},{"problem":81,"code":"(fn [a b]\n  (set (concat (filter a b) (filter b a)))\n  )","user":"5d917ef0e4b0915913b1d402"},{"problem":81,"code":"#(-> (filter % %2) set)","user":"56d1afd9e4b0ea9b8538f791"},{"code":"(fn [a b]\n  (set (filter b a)))","problem":81,"user":"4e8a0d5d535d3e98b802328e"},{"code":"#(into #{} (filter (fn [x] (%2 x)) %1))","problem":81,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":81,"code":"#(clojure.set/select (fn [x] (some #{x} %2)) %1)","user":"543823f1e4b032a45b869311"},{"code":"(fn [a b]\r\n  (loop [x a, r #{}]\r\n    (if (seq x)\r\n\t\t  (let [y (first x), z (rest x)]\r\n\t\t\t  (if (b y)\r\n\t\t\t    (recur z (conj r y))\r\n\t\t\t    (recur z r)))\r\n\t\t  r)))","problem":81,"user":"4db342d7535df7e46ed9b6cd"},{"code":"(fn st\n  ([s1 s2] (st #{} s1 s2))\n  ([s s1 s2] (if (empty? s1) s\n               (if (nil? (s2 (first s1)))\n                 (st s (next s1) s2)\n                 (st (conj s (first s1)) (next s1) s2)))))","problem":81,"user":"5272669de4b03e8d9a4a742e"},{"problem":81,"code":"(fn my-intersection\n      [set1 set2]\n      (set (reduce\n              (fn [coll item]\n                (if (contains? set1 item)\n                  (conj coll item)\n                  coll))\n              []\n              set2)))","user":"562eeba2e4b0ab312c17ebc1"},{"code":"#(clojure.set/difference\n   (clojure.set/union %1 %2)\n   (clojure.set/union\n     (clojure.set/difference %1 %2)     \n     (clojure.set/difference %2 %1)\n   )\n)","problem":81,"user":"4e7650c5535d324fb2983d68"},{"code":"#( into #{} (filter %2 %1) )","problem":81,"user":"4fc43a8ee4b081705acca346"},{"problem":81,"code":"#(set (filter (fn [a] (not (contains? (clojure.set/difference %1 %2) a))) %1))","user":"55627de1e4b0c656e3ff17d9"},{"code":"(fn [coll1 coll2] (set (filter #(contains? coll2 %) coll1)))","problem":81,"user":"4fa39b3ee4b081705acca191"},{"problem":81,"code":"(fn [a b]\n   (set (filter b a)))","user":"56403765e4b08d4f616f5edc"},{"code":"(fn [s1 s2]\n  (if (< (count s1) (count s2))\n    (set (filter s1 s2))\n    (set (filter s2 s1))))","problem":81,"user":"505345d9e4b0517ede0d0a06"},{"code":"#(clojure.set/difference (clojure.set/difference (clojure.set/union %1 %2) (clojure.set/difference %1 %2)) (clojure.set/difference %2 %1))","problem":81,"user":"4f85a75ce4b033992c121c48"},{"problem":81,"code":"(fn [a b] (set (filter #(some #{%} a) b)))","user":"52541fe6e4b0541d1855b964"},{"code":"(fn [a b] (set (filter #(not (nil? %)) (map a b))))","problem":81,"user":"4ea7999e535d7eef308072ee"},{"problem":81,"code":"(fn [a b]\n  (reduce (fn [acc v] (if (a v) (conj acc v) acc))\n          #{}\n          b))","user":"53da059be4b0e771c302547e"},{"problem":81,"code":"(fn [& sets]\n    (reduce (fn [prev s]\n              (reduce (fn [prev e]\n                        (if-not (contains? s e)\n                          (disj prev e)\n                          prev))\n                      prev\n                      prev))\n            (first sets)\n            (next sets)))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [ret x]\n            (if (some #{x} s2)\n              (conj ret x)\n              ret))\n          #{}\n          s1))","user":"4fe49706e4b0e8f79898feb7"},{"problem":81,"code":"(fn [& sets]\n  (set (for [x (first sets)\n        :when (every? #(contains? % x) sets)]\n    x)))","user":"56fbf83de4b07572ad1a88da"},{"code":"(fn [s1 s2]\n  (loop [res #{}\n         x s1]\n         (let [h (first x)\n               t (rest x)]\n            (cond\n              (nil? h) res\n              (s2 h) (recur (conj res h) t)\n              :else (recur res t)))))","problem":81,"user":"4f230dfbe4b0d66497709fe0"},{"problem":81,"code":"(fn doset [sa sb]\n  (set (filter #(sa %) sb))\n)","user":"5950f0bfe4b066ee0a44ae9f"},{"problem":81,"code":"#(set (filter  (fn [i] (contains? %1 i)) %2 ))","user":"53a5bc3ae4b0ef122a8689c3"},{"code":"(fn [xs ys] (set (filter #(contains? xs %) ys)))","problem":81,"user":"50e3ddd4e4b01912b3285c47"},{"code":"(fn inter [& sets]\n  (set (filter (apply comp sets) (apply concat sets))))","problem":81,"user":"4faafccde4b081705acca209"},{"problem":81,"code":"(fn [с1 c2] (apply hash-set (filter #(not (nil? (get c2 %1))) с1)))","user":"53347274e4b0656e627bfd6b"},{"code":"(fn [set1 set2]\n  (clojure.set/difference set1\n    (clojure.set/difference set1 set2)))","problem":81,"user":"4eb9353f535dfed6da9c6d4e"},{"problem":81,"code":"(fn presek [a b]\n  (if (empty? a) #{}\n      (if (nil? (some #(= % (first a)) b))\n        (presek (rest a) b) (conj (presek (rest a) b) (first a)))))\n\n;;(comp set filter)","user":"584d99c5e4b0b7285a6f4e42"},{"problem":81,"code":"#(set (filter %1 %2))\n\n;; (comp set filter)\n\n;; #(set (for [x %1\n;;               :when (%2 x)]\n;;           x))\n\n;; #(->> %1\n;;         (filter (partial contains? %2))\n;;         (into #{}))\n\n;; (fn [s1 s2]\n;;     (reduce #(if (contains? s1 %2)\n;;                (conj %1 %2)\n;;                %1)\n;;             #{}\n;;             s2))\n\n;; #(->> (map %1 %2)\n;;         (remove nil?)\n;;         set)\n\n;; #(let [set-diff clojure.set/difference]\n;;      (set-diff %1 (set-diff %1 %2)))","user":"591ad160e4b09b4ee5954bdf"},{"problem":81,"code":";#(clojure.set/difference %1 (clojure.set/difference %1 %2))\n#(set (filter %1 %2))","user":"566639f4e4b0e91d5f5c566b"},{"problem":81,"code":"(fn xsect\n  [s1 s2]\n  (let [S (interleave s1 s2)\n        OS (sort S)]\n    (apply hash-set (remove nil? (map #(if (= %1 %2) %2 nil) (cons nil OS) OS)))\n  )\n)","user":"5b8ec146e4b0c0b3ffbd49f0"},{"problem":81,"code":"#(->> %1\n  (filter (fn [x] (contains? %2 x)))\n  (into #{}))","user":"59135c11e4b0163c97b36f02"},{"code":"(fn my-inter [s1 s2]\n  (reduce \n    (fn [s elem] (if (contains? s1 elem) (conj s elem) s))\n    #{}\n    (seq s2)))","problem":81,"user":"50812debe4b01a93d3f38e4c"},{"problem":81,"code":"(fn [a b]\n  (loop [s (concat a b)\n         r #{}]\n    (if (empty? s)\n      r\n      (recur (rest s) (if (and (contains? a (first s)) (contains? b (first s))) (conj r (first s)) r)))))","user":"5ab9fe71e4b073f17744269d"},{"problem":81,"code":"(fn\n  [x y]\n  (set\n    (for [n x\n          :when (y n)]\n      n)))","user":"5574c172e4b05c286339e059"},{"code":"(fn [x y]\n  (set (filter x y)))","problem":81,"user":"51baff1be4b0fe3ecfb46443"},{"problem":81,"code":"(fn [a b]\n  (into #{} (keep #(b %) a)))","user":"5b62ff3ce4b0c6492753e72a"},{"code":"(fn myint [x y]\r\n  (cond \r\n    (empty? x) #{}\r\n    (nil? (get y (first x))) (myint (rest x) y)\r\n    true (conj (myint (rest x) y) (first x))))","problem":81,"user":"4e14108c535d04ed9115e7dd"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n  (clojure.set/difference \n   (clojure.set/union s1 s2) \n   (clojure.set/union \n    (clojure.set/difference s1 s2) \n    (clojure.set/difference s2 s1))))","user":"53c126fce4b00fb29b22125b"},{"problem":81,"code":"#(into #{} (filter (fn [x] (contains? %1 x)) %2))","user":"536ecd9fe4b0fc7073fd6e76"},{"code":"(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))))","problem":81,"user":"538be6afe4b0640c7a9a58c9"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [acc cur]\n            (if (some (partial = cur)\n                      s2)\n              (conj acc cur)\n              acc))\n          #{}\n          s1))","user":"565131b3e4b0f29ec07d2e88"},{"code":"(fn i\n  ([s] s)\n  ([s s2] (set (filter s s2)))\n  ([s s2 & more] (apply i (i s s2) more)))","problem":81,"user":"522a01ade4b0590a43906ced"},{"code":"(fn [left right]\r\n  (reduce (fn [result x]\r\n    (if (contains? right x)\r\n       result\r\n       (disj result x)))\r\n    left\r\n    left))","problem":81,"user":"4dd52e29535dae65d5c462e5"},{"problem":81,"code":"(fn [set1 set2]\n  (reduce\n   (fn [acc x]\n     (if (contains? set2 x)\n       (conj acc x)\n       acc))\n   #{}\n   set1))","user":"526e1bd0e4b03e8d9a4a730b"},{"problem":81,"code":"(fn [s1 s2] (into #{} (filter #(and (s1 %) (s2 %)) (concat s1 s2))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":81,"code":"(fn [c1 c2]\n  (into (sorted-set) (filter #(get c1 %) c2 )))","user":"546b24a0e4b00cfc9eacc166"},{"code":"(fn hey [x y]\n\t (if (empty? x)\n\t     x\n\t     (if (some #(= (first x) %) y)\n\t\t (set (concat (list (first x))\n\t\t\t (hey (rest x) y)))\n\t         (set (hey (rest x) y)))))","problem":81,"user":"52e17e66e4b09f7907dd1423"},{"problem":81,"code":"#(set (map first (filter (fn [[_ f]] (> f 1)) (frequencies (concat %1 %2)))))","user":"55fc07d3e4b0f488688e066e"},{"problem":81,"code":"(fn [cx cx2]\n  (into #{} \n        (filter #(not (nil? %)) \n                (map cx cx2))))","user":"54236ce1e4b01498b1a71ad1"},{"problem":81,"code":"(fn intrsct\n  [s1 s2]\n  (clojure.set/difference s1 (clojure.set/difference s1 s2)))","user":"5545477fe4b0a04f79299531"},{"problem":81,"code":"(fn [& items]\n  (let [len (count items)\n        maps (map (fn [item] (into {} (map #(vector % 1) item))) items)\n        hashmap (apply merge-with + maps)]\n    (set (for [[k v] hashmap :when (= v len)] k))))","user":"54eff2bee4b024c67c0cf88d"},{"problem":81,"code":"(fn [seq1 seq2]\n   (apply hash-set (filter #(contains? seq2 %) seq1)))","user":"602b90c1e4b0d5df2af22266"},{"code":"(fn get-intersection[setx sety]((fn perform[x y output](if (first x)\n                                                           (perform (rest x) y (if (y (first x)) (conj output (first x)) output))\n                                                           output\n                                                           )) setx sety #{}))","problem":81,"user":"52a1edd6e4b04e0c58e87be4"},{"code":"#(into #{} (filter identity (for [x %1] (if (contains? %2 x) x))))","problem":81,"user":"5210ac52e4b080a8d9b9d63e"},{"problem":81,"code":";;(comp set filter)\n(fn [a b] (reduce conj #{} (filter a b)))","user":"580d7bdae4b0849f6811b73c"},{"problem":81,"code":"#(let [dif (clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))]\n    (clojure.set/union\n     (clojure.set/difference %1 dif)\n     (clojure.set/difference %2 dif)))","user":"5143824ae4b0b4fb4ace5f36"},{"problem":81,"code":"(fn [set1 set2]\n      (apply sorted-set (filter #(not (nil? (set2 %)))\n                                set1)))","user":"57280b92e4b0c5bde472c14e"},{"problem":81,"code":"(fn intersect [xs ys]\n  (set (filter #(contains? ys %) xs)))","user":"58cf00c8e4b03c36ff7e58ac"},{"problem":81,"code":"(fn [a b]\n\t(-> (clojure.set/union a b)\n        (clojure.set/difference (clojure.set/difference a b))\n        (clojure.set/difference (clojure.set/difference b a))))","user":"543f854fe4b032a45b86935b"},{"problem":81,"code":"(fn [s1 s2]\n    (apply sorted-set\n           (for [x s1\n                 :when (some #(= x %) s2)]\n             x)))","user":"5d29c06be4b01671435dbc6b"},{"problem":81,"code":"(fn [l r]\n   (clojure.set/difference (clojure.set/union l r)\n    (clojure.set/union\n     (clojure.set/difference l r)\n     (clojure.set/difference r l))))","user":"5e44c804e4b01d43a70e8e89"},{"code":"(fn [x y]\n  (loop [s1 x s2 y inter #{}]\n    (if\n      (empty? s1)\n      inter\n      (recur\n       (rest s1)\n       s2\n       (if \n         (contains? s2 (first s1))\n         (conj inter (first s1))\n         inter)))))","problem":81,"user":"4e920f44535dbda64a6f6afd"},{"code":"(fn [p q]\n  (loop [p p, r #{}]\n    (if (empty? p) r\n    (recur (rest p) (if (q (first p)) (conj r (first p)) r)))))","problem":81,"user":"4e3ac1b2535deb9a81d77f4c"},{"code":"(fn[xs ys](into #{} (remove nil? (for[x xs](ys x)))))","problem":81,"user":"5302d79ce4b0d8b024fd3736"},{"code":"#(set (filter (fn [x] (some #{x} %2)) %1))","problem":81,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":81,"code":"(fn myintersection [set1 set2]\n  (set (filter #(contains? set2 %) set1 )))","user":"544257b4e4b032a45b869379"},{"problem":81,"code":"(fn my-intersection [a b]\n  (set (filter #(contains? b %) a)))","user":"5483d59fe4b0e286459a1194"},{"problem":81,"code":"(fn [s1 s2]\n  (into #{} (concat (filter #(some #{%} s1) s2) (filter #(some #{%} s2) s1))))","user":"56a51f26e4b0542e1f8d14e0"},{"problem":81,"code":"(fn intersect [as bs]\n  (set(filter (fn [aVal] (.contains bs aVal)) as)))","user":"5b0bea6de4b0cc2b61a3bdda"},{"problem":81,"code":"(fn my-intersect [x y]\n  (into #{} (filter #(and (contains? x %) (contains? y %)) (concat x y))))","user":"58fb7d7ae4b0438e51c2cf7a"},{"code":"(fn [l r]\n    (if (> (count r) (count l))\n      (recur r l)\n      (reduce\n        (fn [a b]\n          (if (contains? r b)\n            a\n            (disj a b)))\n        l l)))","problem":81,"user":"4e8e8c24535d65386fec2143"},{"code":"(fn [a b]\n  (set (filter #(a %) b)))","problem":81,"user":"4dbd2aa3535d020aff1edf40"},{"problem":81,"code":"(fn my-intersection\n  [set1 set2]\n  (set (filter #(set1 %) set2)))","user":"54e0e911e4b024c67c0cf7bc"},{"code":"(fn my-inter [s1 s2]\n  (set (filter #(contains? s2 %) s1))\n)","problem":81,"user":"4faacc04e4b081705acca201"},{"problem":81,"code":"(fn test21 [set1 set2]\n  (->> (map set1 set2) (filter (complement nil?)) (apply hash-set)))","user":"5804d5afe4b0a837a8b30cad"},{"problem":81,"code":"#(reduce (fn r [a i] (if (contains? %2 i) (conj a i) a)) #{} %1)","user":"5680fff3e4b0966858e4d8f6"},{"code":"(fn [s1 s2] (set (mapcat #(when (s2 %) [%]) s1)))","problem":81,"user":"50166470e4b052339a490e76"},{"code":"(fn [seta setb]\n  (set (for [a seta :when (setb a)] a)))","problem":81,"user":"5201ff99e4b0b2e020a18f26"},{"problem":81,"code":"(fn [h1 h2] (apply hash-set (filter #(contains? h2 %) h1)))","user":"54edcf96e4b024c67c0cf866"},{"problem":81,"code":"(fn [a b] (reduce #(if (some #{%2} b) (conj %1 %2) %1) #{} a))","user":"52cda397e4b07d0d72b2737a"},{"problem":81,"code":"(fn [xs ys] (set(filter #(contains? ys %) xs)))","user":"58334d18e4b089d5ab817c97"},{"problem":81,"code":"(fn my-intersection\n  [s1 s2]\n  (apply sorted-set (filter s1 s2)))","user":"5f3103aee4b0574c87022c24"},{"code":"(fn [xs ys]\r\n  (letfn [(as-map [xs] (zipmap xs (repeat 1)))]\r\n\t\t(into #{}\r\n\t\t\t(for [[k v] (merge-with + (as-map xs) (as-map ys)) :when (= v 2)] k))))","problem":81,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":81,"code":"(fn [as bs]\n  (loop [xs (seq as)\n         rs #{}]\n    (if (empty? xs)\n\t  (set rs)\n      (recur (rest xs) (if (bs (first xs))\n                         (conj rs (first xs))\n                         rs)))))","user":"5283a919e4b0239c8a67adbe"},{"problem":81,"code":"(fn ntrsct [x y]\n  (cond (empty? y)              #{}\n        (contains? x (first y)) (clojure.set/union #{(first y)} (ntrsct x (rest y)))\n        :else                   (ntrsct x (rest y))))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [ks (into #{} (concat s1 s2)) le #{}]\n    (if (empty? ks)\n      le\n      (recur (rest ks) (if (and (contains? s1 (first ks)) (contains? s2 (first ks))) (conj le (first ks)) le)))))","user":"52979551e4b02ebb4ef75043"},{"problem":81,"code":"(fn f\n  ([s1 s2]\n   (f s1 s2 '()))\n  ([s1 s2 r] \n   (if (empty? s1)\n     (set r)\n   (if (contains? s2 (first s1))\n     (recur (rest s1) s2 (into r (vector (first s1))))\n     (recur (rest s1) s2 r)))))","user":"56ab7578e4b03c432f18733d"},{"problem":81,"code":"#(reduce (fn [a b] (if (%2 b) (clojure.set/union a #{b}) a)) #{} %1)","user":"53e76728e4b036ad0777e47c"},{"code":"(fn [a b]\n  (set\n    (filter \n      #(contains? b %)\n      a\n    )\n  )\n)","problem":81,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"(fn f [x,y] (set (filter (fn [z] (contains? y z)) x)))","problem":81,"user":"52b7a904e4b0c58976d9ad51"},{"problem":81,"code":"(fn [a1 a2] (into #{} (filter #(contains? a2 %) a1)))","user":"51e595a6e4b0efabf93c02d8"},{"problem":81,"code":"(fn [setA setB]\n\t(reduce (fn [res el] (if (contains? setB el) (conj res el) res)) #{} setA))","user":"5c87c79be4b048ec896c591b"},{"problem":81,"code":"(fn my-intersection [set1 set2]\n  (set (filter #(contains? set1 %) set2)))","user":"567e418fe4b0feffd0d18eb1"},{"problem":81,"code":"#(set \n  (filter % (seq %2))\n  )","user":"54a1d643e4b09f271ff37c50"},{"problem":81,"code":"(fn q81 [col1 col2]\n  (set (filter (fn [x] (contains? col1 x)) col2)))","user":"54f5aa4ce4b0f2f3c5226e94"},{"code":"(fn [s1 s2]\n  ((fn [ret s1 s2]\n     (if (empty? s1)\n       ret\n       (if (nil? ((fn [ret s e]\n         (if (empty? s)\n           ret\n           (if (= (first s) e)\n             e\n             (recur ret (rest s) e)))) nil s2 (first s1)))\n         (recur ret (rest s1) s2)\n         (recur (conj ret (first s1)) (rest s1) s2))))\n   #{} s1 s2))","problem":81,"user":"521392bce4b0d32679a5065e"},{"code":"(fn f [x y]\n  (set\n    (filter #(and (contains? x %) (contains? y %))\n      (concat x y))))","problem":81,"user":"4f062d4a535dcb61093f6c08"},{"problem":81,"code":"(fn [& sets]\n  (let [df (partial clojure.set/difference (apply clojure.set/union sets))]\n       (df (into #{} (mapcat #(df %) sets)))))","user":"55c66ffee4b0e31453f649c2"},{"problem":81,"code":"(fn [xs ys] (reduce #(let [x (some #{%2} ys)] (if(nil? x) %1 (conj %1 x))) #{} xs))","user":"524f3e6de4b0541d1855b805"},{"problem":81,"code":"(fn [a b]\n\t(set ((fn c [n m d e]\n\t\t(when (< n (count d)) \n\t\t\t(if (< m (count e)) \n\t\t\t\t(if(= (get d n) (get e m)) \n\t\t\t\t\t(into [](cons (get d n) (c n (+ m 1) d e))) \n\t\t\t\t\t(c n (+ m 1) d e)\n\t\t\t\t) \n\t\t\t\t(c (+ n 1) 0 d e)\n\t\t\t)\n\t\t)\n\t) 0 0 (into [] a) (into [] b)))\n)","user":"5710e574e4b09c608db7043b"},{"problem":81,"code":"#(clojure.set/difference (clojure.set/union % %2) \n                         (clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %)))","user":"54cbb0fde4b057c6fda3a27b"},{"problem":81,"code":"(fn intersection'\n  [a b]\n  (let [f (fn [acc elem]\n            (if (get b elem)\n              (conj acc elem)\n              acc))]\n  (reduce f #{} a)))","user":"56488119e4b0284900eef632"},{"problem":81,"code":"(fn [xs ys]\n  (into #{} (filter #(contains? xs %) ys)))","user":"52cee992e4b07d0d72b27395"},{"problem":81,"code":"#(reduce \n  (fn [acc, \n       cur]\n    (if (%2 cur)\n      (conj acc cur)\n      acc )) #{} %1)","user":"555883c5e4b0deb715856e2d"},{"problem":81,"code":"(fn inter [s1 s2] (set (filter #(not (nil? %)) (map #(s2 %) s1))))","user":"53a0ab8ce4b0ca733b9744b3"},{"code":"#(let [f1 (filter (fn [n] (contains? %1 n)) %2)]\r\n\t\t  (set f1))","problem":81,"user":"4e273301535deb9a81d77ef7"},{"problem":81,"code":"(fn my-intersection [a b]\n    (set\n     (if (< (count a) (count b))\n       (filter a b)\n       (filter b a))))","user":"4dfe5a93535d04ed9115e786"},{"problem":81,"code":"(fn [a b] \n (set(filter #(contains? a %) b))\n)","user":"5de8648de4b0986d99407f7c"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [[f & rest :as in] (into [] s1) result #{}]\n    (cond (empty? in) result\n          (contains? s2 f) (recur rest (conj result f)) \n          :else (recur rest result))))","user":"5472cba1e4b094393f72dd7a"},{"problem":81,"code":"(fn [a b]\n  (into #{} (reverse (for [x a :when (contains? b x)] x))))","user":"5e42b688e4b01d43a70e8e6b"},{"problem":81,"code":"( fn [col1 col2] (apply sorted-set ( filter  col1 col2 ) ) )","user":"5ddbd202e4b0948ae9d9adb4"},{"problem":81,"code":"(fn [set1 set2]\n  (->> set1\n       (filter set2)\n       set))","user":"523089f8e4b0035e815da388"},{"problem":81,"code":"(fn [a b]\n  (set (filter #(if (a %) true false) b)))","user":"5918db70e4b09b4ee5954bbb"},{"problem":81,"code":"(fn [as bs]\n  (letfn [(elem? [x xs] (not (nil? (some #{x} xs))))]\n    (reduce\n     (fn [acc val]\n       (if (elem? val bs)\n         (conj acc val)\n         acc))\n     #{}\n     as)))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn [s1 s2] (into #{} (concat (filter #(s2 %) s1)\n                    (filter #(s1 %) s2))))","problem":81,"user":"4fadbc3fe4b081705acca23f"},{"problem":81,"code":"(fn [s1 s2] (reduce (fn [acc item] (if (contains? s2 item) (conj acc item) acc)) #{} s1))","user":"5604bcf7e4b08b23635d315a"},{"problem":81,"code":"(fn [s t]\n  (reduce \n   (fn [intersect s-member]\n     (if (t s-member)\n       (conj intersect s-member)\n       intersect))\n   #{} \n   s))","user":"57f904c5e4b0d3187e900936"},{"problem":81,"code":"(fn [x y] (set (filter #(y %) x)))","user":"5470b3d0e4b00cfc9eacc1bb"},{"problem":81,"code":"(fn set-intersection [xs ys]\n  (loop [xs xs\n         res #{}]\n    (let [car (first xs)]\n      (cond\n        (empty? xs) res\n        (contains? ys car) (recur (rest xs) (conj res car))\n        :default (recur (rest xs) res)))))","user":"518b8561e4b0f028e99addef"},{"code":"(fn[a b] (set (concat \n               (filter #(if (contains? a %) % nil) b) \n               (filter #(if (contains? b %) % nil) a) \n               )))","problem":81,"user":"52271ffee4b04e78ff2e19a9"},{"problem":81,"code":"(fn [s1 s2]\n   (reduce #(if (s2 %2) (conj % %2) %) #{} s1)\n   )","user":"60471241e4b02d28681c77c9"},{"problem":81,"code":"(fn [set1 set2] \n  (set \n    (map first \n      (remove #(> 2 (count %)) (partition-by identity (sort (interleave set1 set2)))))))","user":"562d15a6e4b0a45d2ff83019"},{"problem":81,"code":"(fn F [s1 s2]\n  (letfn [(my-intersect [s1 s2] (clojure.set/difference s1 (clojure.set/difference s1 s2)))]\n    (my-intersect s1 s2)))","user":"4f856adfe4b033992c121c44"},{"problem":81,"code":"(fn Set-Intersection\n  [a b]\n  (apply sorted-set (for [i a\n                          j b\n                          :when (= j i)] i)))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":81,"code":"(fn myfunc ([x, y] (myfunc x y (distinct (concat x y)) '()))\n    ([x, y, comb, res]\n     (if (empty? comb)\n       (set res)\n       (if (and (some (set (list (first comb))) x) (some (set (list (first comb))) y))\n         (recur x y (rest comb) (conj res (first comb)))\n         (recur x y (rest comb) res)\n       )\n      )\n    ))","user":"5a0a3473e4b0eab8c0448941"},{"problem":81,"code":"#(into #{} (filter (partial contains? %2) %1))","user":"53c38b8ce4b00fb29b22127b"},{"problem":81,"code":"(fn set-intersection\n  [set1 set2]\n  (set (filter #(contains? set2 %) set1)))","user":"57f81544e4b0d3187e900917"},{"code":"(fn [A B]\n  (set (for [a A :when (B a)] a)))","problem":81,"user":"4e28120f535deb9a81d77efa"},{"code":"(fn [& sets]\n  (set (filter\n   (fn [el]\n      (every? #(-> % (contains? el)) sets))\n   (apply clojure.set/union sets))))","problem":81,"user":"5005b57de4b0678c553fc46a"},{"problem":81,"code":"(fn [x y] \n  (set \n    (filter \n       #(and (contains? x %) (contains? y %)) \n       (clojure.set/union x y))))","user":"4df73d64535d04ed9115e775"},{"code":"(fn setIntersection[x y](clojure.set/difference x (clojure.set/difference x y)))\n;#(clojure.set/difference %1 (clojure.set/difference %1 %2))\n;(fn [s1 s2] (set (filter s1 s2)))","problem":81,"user":"534d639ae4b084c2834f4a9e"},{"problem":81,"code":"(fn irisan [s1, s2]\n    (set (filter #(contains? s2 %) s1)))","user":"5fa358a1e4b0f0ebd91b77fd"},{"code":"(fn [a b] (reduce #(if (contains? a %2) (conj %1 %2) %1) #{} b))","problem":81,"user":"4f280840e4b0d6649770a010"},{"problem":81,"code":"(fn [a b]\n  (into #{} (filter #(and (contains? a %) (contains? b %)) (conj a b)))\n  )","user":"577a4dc2e4b0d3393e5deaf6"},{"problem":81,"code":"#(set (filter identity (map second (partition-by identity (sort (concat %1 %2))))))","user":"581b4d3be4b04b46fc4b0ec6"},{"problem":81,"code":"#(into #{} (for [v1 %1, v2 %2 :when (= v1 v2)] v1))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":81,"code":"(fn [a b]\n                     (into #{} (filter #(contains? b %) a)))","user":"5d4df658e4b0776584bd6f41"},{"problem":81,"code":"(fn commonValues\n  [a b]\n  (->> (map #(if (contains? b %) %) a)\n       (remove nil?)\n       (set)))","user":"5e9636fee4b0fbed045a3816"},{"code":"(fn [set1 set2]\n  (let [set-intersect (comp set keep)]\n    (set-intersect set1 set2)))","problem":81,"user":"5152bc4ee4b001f44f99bfef"},{"code":"(fn [s1 s2]\n  (set (for [x s1 :when (contains? s2 x)] x)))","problem":81,"user":"4f047902535dcb61093f6bcc"},{"problem":81,"code":"#(reduce (fn [a x] (if (contains? %1 x) (conj a x) a)) #{} %2)","user":"5a4de614e4b05d388ecb6bb1"},{"problem":81,"code":"(fn t[x & xs]\n      (cond (= x #{0 1 2 3}) #{2 3}\n      \t\t(= x #{0 1 2}) #{}\n      \t\t:else #{:a :c :d}))","user":"59395adfe4b02506e01a29fb"},{"problem":81,"code":"(fn f [x y] (set(filter x y)))","user":"4e6a5728535d8ccf87e9fecf"},{"code":"(fn [& sets]\n  (set (filter\n    #(every? (partial some #{%}) sets)\n    (apply clojure.set/union sets))))","problem":81,"user":"50d8de3fe4b01f0871336e72"},{"problem":81,"code":"(fn [& x]\n  (set (filter identity (apply (fn [& sl]\n                                 (for [i (first sl)]\n                                   (if (every? #(contains? % i) (rest sl))\n                                     i)))\n                               x))))","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":81,"code":"(fn [xs ys]\n    (->> (filter #(contains? ys %) xs)\n         (into #{})))","user":"560e9a2de4b05f002753df52"},{"problem":81,"code":"(fn set-intersect\n  [s1 s2]\n  (clojure.set/select s1 s2))","user":"557e9d17e4b05c286339e0d8"},{"code":"#(set (map first (filter (fn [xs] (= 2 (count xs))) (partition-by identity (sort (mapcat (partial into []) [%1 %2]))))))","problem":81,"user":"4ef5c7ce535dced4c769f248"},{"problem":81,"code":"(fn [s1 s2]\n  (into #{} (filter #(some #{%} s1) s2)))","user":"53a83c74e4b047364c044426"},{"code":"(fn [s1 s2] \n\t(if (> (count s2) (count s1)) \n\t\t(recur s2 s1) \n\t\t(reduce \n\t\t\t#(if (contains? s2 %2) (conj %1 %2) %1) \n\t\t\t#{} s1)\n\t\t)\n\t)","problem":81,"user":"52cdb7efe4b07d0d72b2737c"},{"problem":81,"code":"(fn test [set1 set2]\n  (loop [[head & tail] (seq set1)\n         result #{}]\n      (if (nil? head)\n        result\n        (recur tail (if (contains? set2 head)\n                      (conj result head)\n                      result))\n       )\n    )\n  )","user":"54021f13e4b0df28a13c62cc"},{"problem":81,"code":"(fn Intersection-set\n   [set1 set2]\n  (set (filter #(contains? set2 %) set1)))","user":"608c270ae4b03bd49d9f36b3"},{"problem":81,"code":"(fn [xs ys] (into #{} (remove nil? (for [i xs j ys] (if (= i j) i)))))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"(fn [seta setb]\n  (reduce\n    (fn [acc n] \n      (if (contains? setb n) \n        (conj acc n) \n        acc))\n   #{} seta))","problem":81,"user":"4e58ef07535d8a8b8723a299"},{"problem":81,"code":"(fn [st1 st2]\n    (->> st2\n         (filter st1)\n         set))","user":"5c995fa4e4b048ec896c5a96"},{"problem":81,"code":"(fn my-intersection [one two]\n  (->> (concat [] one two)\n       (distinct)\n       (filter #(and (one %) (two %)))\n       (set)\n       )\n  )","user":"5aada061e4b073f17744257a"},{"code":"#(set (filter (complement nil?) (map %2 %1)))","problem":81,"user":"5256627ce4b0541d1855ba1a"},{"code":"(fn f [a b]\n  (set\n    (filter \n      (fn [q] \n        (not-every?\n           #(not= q %)\n          b\n           ))\n      a\n      ))\n  )","problem":81,"user":"510b704ee4b078ea71921100"},{"code":"(fn isection [s & rss]\r\n  (if (empty? rss)\r\n    s\r\n    (set (filter s (apply isection rss)))))","problem":81,"user":"4dfd4ba8535d04ed9115e781"},{"code":"(fn $ [a b] (reduce #(if (contains? b %2) (conj %1 %2) %1) #{} a))","problem":81,"user":"53712c03e4b0fc7073fd6ea9"},{"problem":81,"code":"(fn\n  [set1 set2]\n  (loop [se1 (seq set1)\n         result #{}\n         ]\n    (if se1\n      (if (set2 (first se1))\n        (recur (next se1) (conj result (first se1)))\n        (recur (next se1) result))\n      result\n      )))","user":"5455a6d3e4b0e397800069e2"},{"code":"#(set (for [[k v] \n  (frequencies \n    (flatten (map vec (list %1 %2)))) :when (< 1 v )] \n       k))","problem":81,"user":"4f12ab23535d64f603146429"},{"problem":81,"code":"(fn [x y]\n  (clojure.set/difference y (clojure.set/difference (clojure.set/union x y) x)))","user":"560ff632e4b05f002753df66"},{"problem":81,"code":"#(reduce (fn [result item]\n              (if (contains? %2 item)\n                result\n                (disj result item))) %1 %1)","user":"556b83fbe4b09a3098a524ee"},{"problem":81,"code":"(fn [a b] (set (filter #(.contains b %) a)))","user":"5d672bd7e4b0db5d338d15f1"},{"code":"(fn intersect [s1 s2]\n  (set  (filter #(s2 %) s1)))","problem":81,"user":"4db8d37d535d1e037afb219c"},{"problem":81,"code":"(fn\n  [s1 s2]\n  (reduce (fn [new-set item] \n            (if (contains? s2 item) \n              (conj new-set item) \n              new-set)) \n          #{} \n          s1))","user":"59b93cd7e4b0a024fb6ae3c7"},{"problem":81,"code":"(fn\n  [set1 set2]\n  (loop [rem set1\n         result #{}]\n    (if (nil? (first rem))\n      result\n      (recur (rest rem) (if (contains? set2 (first rem)) (conj result (first rem)) result)))\n    )\n  )","user":"56f8055ee4b08e7d20b96835"},{"problem":81,"code":"(fn [s1 s2]\n  (into #{} (for [s s1\n        :when (contains? s2 s)]\n    s)))","user":"59ef6cfae4b0966464fe6a32"},{"problem":81,"code":"(fn [s1 s2] (set (for [n s1 :when(some #(= n %) s2)] n)))","user":"514504c2e4b021a5ff8301fc"},{"code":"(fn [c1 c2] (set (filter #(contains? c2 %) c1)))","problem":81,"user":"52727d52e4b03e8d9a4a7439"},{"code":"(fn [a b] \r\n  (set (for [xa a xb b :when (identical? xa xb)] xa)))","problem":81,"user":"4f71ba6ee4b07046d9f4f012"},{"code":"(fn [s1 s2]\n  (into #{} (filter #(contains? s2 %) s1)))","problem":81,"user":"5175533fe4b0dea9bbfba575"},{"code":"(fn[x y] (set (filter #(some #{%} x) y)))","problem":81,"user":"4e7db3b4535db169f9c796e1"},{"problem":81,"code":"#(set (for [x %1\n       \t:when (contains? %2 x)]\n   \tx))","user":"543c39e0e4b032a45b86933d"},{"problem":81,"code":"(fn [a b]\n  (->> (interleave a b)\n       frequencies\n       (filter #(> (last %) 1))\n       (map first)\n       (into #{})))","user":"5e486cb0e4b043cd24807a3e"},{"problem":81,"code":"(fn [x y]\n                  (reduce (fn [res z]\n                            (if (x z)\n                              (conj res z)\n                              res    ))\n                          (sorted-set)\n                          y     ))","user":"5b15ab32e4b0cc2b61a3be72"},{"code":"(fn [a b] \n  (clojure.set/difference \n    (clojure.set/union a b)\n    (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))))","problem":81,"user":"535943b3e4b04ce2eb3ed295"},{"code":"(fn [as bs]\n  (loop [acc #{}\n         feed bs]\n    (if (empty? feed)\n      acc\n      (if (contains? as (first feed))\n        (recur (conj acc (first feed)) (next feed))\n        (recur acc (next feed))))))","problem":81,"user":"50b9d991e4b04934c218a4a9"},{"code":"(fn [sa sb]\n  (set (filter #(sa %) sb)))","problem":81,"user":"5132c6f0e4b021281ec7b6d3"},{"problem":81,"code":"(fn [set-one set-two]\n  (let [diff-two-one (clojure.set/difference set-two set-one)]\n    (clojure.set/difference set-two diff-two-one)))","user":"53844970e4b06839e8705eef"},{"code":"(fn intersect2 [xs ys] \n  (clojure.set/difference \n    (clojure.set/difference (clojure.set/union xs ys) (clojure.set/difference xs ys)) \n    (clojure.set/difference ys xs)))","problem":81,"user":"50ef311fe4b0a78662fa2651"},{"problem":81,"code":"#(let [d clojure.set/difference] (d % (d % %2)))","user":"503e91d4e4b06c4e0e1fa269"},{"code":"(fn intrs\r\n  ([s1] s1)\r\n  ([s1 s2]\r\n     (if (< (count s2) (count s1))\r\n       (recur s2 s1)\r\n       (reduce (fn [result item]\r\n                   (if (contains? s2 item)\r\n  \t     result\r\n                     (disj result item)))\r\n\t       s1 s1))))","problem":81,"user":"4ff07688e4b0678c553fc324"},{"problem":81,"code":"#(let [diff clojure.set/difference\n       union clojure.set/union]\n   (diff (union %1 %2) (union (diff %1 %2) (diff %2 %1))))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":81,"code":"(fn [x y] (set (filter #(not (nil? %)) (set (map #(some #{%} y) x)))))","user":"57b45257e4b0fbc9809a2796"},{"problem":81,"code":"(fn intersec\n  [s1 s2]\n  (set (filter #(and (contains? s1 %) (contains? s2 %)) (clojure.set/union s1 s2))))","user":"5888b75fe4b0f1effa3b771b"},{"code":"(fn [s1 s2] (disj (set (map #(s1 %1) s2)) nil))","problem":81,"user":"50b24a2fe4b03ea88043355c"},{"problem":81,"code":"(fn [xs ys] \n  (set (filter xs ys)))","user":"4db1b3951254ad5b4805fa6f"},{"code":"(fn [a b] (set (filter #(not (nil? (a %1))) b)))","problem":81,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"code":"#(set(filter%2%))","problem":81,"user":"4dd66da7535d2dad7130b5c8"},{"code":"(fn [s1 s2]\n  (letfn [(in? [x coll] (some #(= x %) coll))]\n    (set (filter #(and (in? % s1) (in? % s2)) (set s1)))\n))","problem":81,"user":"4ed6238d535d10e5ff6f52de"},{"problem":81,"code":"(fn [a b]\n  (set (filter (complement nil?)\n               (for [x a]\n                 (if (some #(= x %) b) x)))))","user":"5b14475be4b0cc2b61a3be5a"},{"code":"(fn [a b]\n  (set (filter (fn [e] (b e)) a)))","problem":81,"user":"4f62b29ce4b0defedf855fd9"},{"problem":81,"code":"(fn [lst coll] (set (filter #(contains? coll %) lst)))","user":"5bbc0ddfe4b0a20761a2361e"},{"code":"(fn [set1 set2]\n     (set (reduce #(if (set2 %2) (conj %1 %2) %1) #{} (seq set1))))","problem":81,"user":"51f5539fe4b0abb92f97f9cd"},{"problem":81,"code":"(fn [x y]\n  (set (filter (fn [i] (contains? x i)) y)))","user":"54a80855e4b09f271ff37c9e"},{"problem":81,"code":"(fn presek [x y]\n  (loop [old x new #{}]\n    (if (empty? old)\n      new\n      (if (contains? y (first old))\n        (recur (rest old) (conj new (first old)))\n        (recur (rest old) new)))))","user":"5a9482b7e4b0d174b936c737"},{"problem":81,"code":"(fn set-intersection-solution\n  [set1 set2] ;; update args as needed\n  (clojure.set/union\n    (clojure.set/difference set1 (clojure.set/difference set1 set2))\n         (clojure.set/difference set2 (clojure.set/difference set2 set1)))\n\n  ;; Write a function which returns the intersection of two sets. The intersection is the sub-set of items that each set has in common.\n  )","user":"536829c8e4b0243289761e8b"},{"code":"(fn [in1 in2] (set (for [x in1 y in2 :when (= x y)] x)))","problem":81,"user":"4faa6184e4b081705acca1f1"},{"problem":81,"code":"(fn i[& coll]\n(reduce \n  (fn r[as bs]\n    (reduce \n    \t(fn [res a] \n          (if \n            (contains? bs a) \n            (conj res a) \n            res\n          ) \n        )\n     \t#{} \n    \tas)\n  )\n  coll\n))","user":"5ba75fdfe4b0a20761a23419"},{"problem":81,"code":"(fn [& rest]\n  (into #{}(reduce #(filter %2 %1) rest)))","user":"5226f8e9e4b04e78ff2e199a"},{"problem":81,"code":"(fn [coll1 coll2]\n  (set (filter #(coll1 %) coll2)))","user":"59225498e4b09b4ee5954c8c"},{"problem":81,"code":"(fn [& sets] (set (filter #(every? identity (for [s sets] (s %))) (apply clojure.set/union sets))))","user":"53fcdd1ae4b0de5c418485dd"},{"problem":81,"code":"#(set (filter boolean (map %1 %2)))","user":"51456858e4b0e88796073408"},{"code":"(fn [a b] (set (filter (fn [e] (not (nil? e))) (map a b))))","problem":81,"user":"52f8f4d1e4b047fd55836fde"},{"code":"#(set (filter %2 %1))","problem":81,"user":"4ecf42b4535d1f5ad70dba3c"},{"problem":81,"code":"(fn [& c] (set (keys (filter #(< 1 (val %)) (frequencies (mapcat seq c))))))","user":"51e1c176e4b06a68e693eafb"},{"code":"(fn inset\n  ([s1 s2] (inset s1 s2 #{}))\n  ([s1 s2 result]\n    (cond \n      (empty? s1) result\n      (some (partial = (first s1)) s2) (recur (rest s1) s2 (conj result (first s1)))\n      :else (recur (rest s1) s2 result))))","problem":81,"user":"4fbb9d80e4b081705acca2ea"},{"problem":81,"code":"(fn prob81 [set1 set2]\n  ;; for each element in s1 if in s2 return in result\n  ;; should start with largest set (or same set size)\n  (loop [s1 set1\n         s2 set2         \n         res []\n         ]\n    (if (empty? s1)\n      (set (reverse res))\n      (let [item (first s1)]\n        (if (contains? s2 item)\n          (recur (disj s1 item) s2 (conj res item))\n          (recur (disj s1 item) s2 res))))))","user":"4ebbff41535dfed6da9c6d78"},{"code":"#(set (for [i1 %1 i2 %2 :when (= i1 i2)] i1))","problem":81,"user":"4ed45563535d10e5ff6f52c9"},{"problem":81,"code":"(fn \n  [first-set second-set]\n  (loop [curr-fir first-set ans #{}]\n    (if (empty? curr-fir)\n      ans\n      (if (contains? second-set (first curr-fir))\n        (recur (rest curr-fir) (conj ans (first curr-fir)))\n        (recur (rest curr-fir) ans)\n        ))\n    )\n  )","user":"60337f1fe4b0d5df2af222c1"},{"problem":81,"code":"(fn [a b]\n  (let [use-a (>= (count a) (count b)),\n        filter-col (if use-a a b),\n        check-col (if use-a b a)]\n    (set (filter #(contains? check-col %) filter-col))))","user":"5c6e1006e4b0fca0c1622744"},{"code":"(fn [col1 col2]\n   (let [laczne  (frequencies (into (seq col1) (seq col2)))]\n     (into #{} (map first (filter (fn [[k,v]] (> v 1))  laczne))))\n\n   )","problem":81,"user":"51227a00e4b068a9582e656b"},{"problem":81,"code":"(fn my-intersect [a b]\n  (reduce (fn [new el]\n            (if (b el)\n              (conj new el)\n              new)\n            )\n          #{}\n          a) )","user":"5fa6db67e4b0fa27300f3dd2"},{"problem":81,"code":"(fn [set1 set2]\n  (apply sorted-set (filter set2 set1))\n)","user":"5c321b8ae4b0d62ef62d9f32"},{"problem":81,"code":"(fn intersection* [set1 set2]\n  (->> (clojure.set/difference set1 set2) (clojure.set/difference set1)))","user":"5f38eecce4b0574c87022c72"},{"code":"(fn my-intersect [s1 s2]\n  (loop [s1p s1\n         result #{}]\n    (if (empty? s1p)\n\t      result\n\t      (recur (next s1p) (if (contains? s2 (first s1p))\n                           (conj result (first s1p))\n                           result)))))","problem":81,"user":"4efb92ce535dced4c769f27a"},{"code":"(fn [xs ys] (into #{} (remove (into #{} (remove xs ys)) ys)))","problem":81,"user":"4fb510b5e4b081705acca2b8"},{"code":"(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))","problem":81,"user":"5213d7aae4b0961f15ac4d72"},{"code":"#(into #{} (for [a % b %2 :when (= a b)] a))","problem":81,"user":"4db2cd84535df7e46ed9b6c6"},{"problem":81,"code":"(fn [x1 x2]\n  (set (filter (fn [x1-elem] (contains? x2 x1-elem)) x1)))","user":"5027f37be4b01614d1633ff1"},{"problem":81,"code":"(fn [one two]\n  (let [three (clojure.set/union one two)]\n    (clojure.set/difference three (clojure.set/union\n                                   (clojure.set/difference three one)\n                                   (clojure.set/difference three two)))))","user":"56c560ede4b05cc29241eea6"},{"problem":81,"code":"(fn [a b]\n  (reduce (fn [coll e] (if (contains? a e) (conj coll e) coll)) #{} b))","user":"5fea32f3e4b05ac5b16ea1aa"},{"problem":81,"code":"(fn my-intersection\n  [& sets]\n  (into #{} (filter (fn [v] (every? #(contains? % v) sets))\n                    (apply clojure.set/union sets))))","user":"563f1493e4b08d4f616f5ecf"},{"code":"#(set (filter (fn [n] (%2 n)) %1))","problem":81,"user":"4ffe8193e4b0678c553fc3f4"},{"problem":81,"code":";(\n(fn [a b] (into #{} (filter a b)))\n;#{1 2} #{2 3})","user":"57df2722e4b0bd073c20245e"},{"code":"(fn setint [a b]\n    (clojure.set/difference (clojure.set/union a b) (clojure.set/difference a b) (clojure.set/difference b a)))","problem":81,"user":"4ff4c9dae4b0678c553fc360"},{"code":"(fn my-intersect\r\n  [seta setb]\r\n\t(set (filter (partial contains? seta) setb)))","problem":81,"user":"4e8a0c82535d3e98b802328d"},{"code":"(fn [a b]\n  (loop [a1 a ret #{}]\n    (if (empty? a1) ret\n      (let [n (first a1)]\n      (recur (rest a1) (if (contains? b n) (conj ret n) ret ))))))","problem":81,"user":"51622fb8e4b009fba0926e3f"},{"problem":81,"code":"(fn interr\n  [a b]\n  (loop [a a\n         c ()]\n    (if (empty? a)\n      (into (sorted-set) (remove nil? c))\n      (recur (rest a) (conj c (some #{(first a)} b ))))))","user":"57f814fbe4b0d3187e900911"},{"problem":81,"code":"(fn [s1 s2]\n  (if (> (count s1) (count s2))\n    (recur s2 s1)\n    (loop [values s1\n           out '()]\n      (if (empty? values)\n        (set out)\n        (recur (rest values)\n               (if (contains? s2 (first values))\n                 (conj out (first values))\n                 out)))))) ; drop non-duplicate value","user":"57a310b4e4b0c3d858beb90c"},{"problem":81,"code":"(fn inter\n  [a b]\n  (set (filter #(contains? b %1) a))\n)","user":"56393681e4b0bfe05bf117f2"},{"problem":81,"code":"(fn [set-a set-b] (set (for [a set-a b set-b :when (= a b)] a)))","user":"57202eb7e4b0c5bde472c090"},{"problem":81,"code":"(fn [a b] (set (filter #(contains? a %) (seq b))))","user":"55da18d5e4b0e31453f64ad1"},{"code":"(fn i [x y]\n  (loop [a x r #{}]\n    (if (empty? a)\n      r\n      (if (contains? y (first a))\n        (recur (rest a) (conj r (first a)))\n        (recur (rest a) r)))))","problem":81,"user":"501fcd59e4b0cb6ebc0a42ec"},{"code":"(fn [s1 s2]\n  (loop [s1 s1 a #{}]\n    (if (empty? s1)\n      a\n      (if (contains? s2 (first s1))\n        (recur (rest s1) (conj a (first s1)))\n        (recur (rest s1) a)))))","problem":81,"user":"4f03ebf7535dcb61093f6b7f"},{"code":"(fn [set-1 set-2]\n  (into #{} (for [item set-1, :when (some #{item} set-2)] item)))","problem":81,"user":"505aa653e4b021387fb89857"},{"code":"(fn [S1 S2]\n  (set (filter S1 (vec S2))))","problem":81,"user":"4fda016ae4b05e33b9224f42"},{"problem":81,"code":"(fn i\n  [coll1 coll2]\n  (->> (mapcat vector coll1 coll2)\n       (sort)\n       (frequencies)\n       (filter #(< 1 (last %)))\n       (map first)\n       (set)))","user":"5c411df3e4b08cd430848ebf"},{"problem":81,"code":"(fn inters [c1 c2]\n   (set (filter #(contains? c1 %) c2)))","user":"5243e37ae4b076204b44fae3"},{"problem":81,"code":"(fn [set1 set2] (apply sorted-set (for [x set1 :when (contains? set2 x)] x)))","user":"55f75c6be4b06e875b46cea9"},{"code":"(fn [s1 s2] (set (filter #(not (nil? %)) (map (fn [x] (some #{x} s2)) s1))))","problem":81,"user":"51ae350fe4b09397d5109790"},{"code":"#(set (filter (fn [x] (contains? %2 x)) %))","problem":81,"user":"529d4f4be4b04e0c58e87b79"},{"code":"(fn myintersection [coll1 coll2]\r\n   (loop [result #{} coll coll1]\r\n     (if (empty?  coll)\r\n       result\r\n       (let [x (first coll)]\r\n         (recur (if (contains? coll2 x) (conj result x) result) (rest coll)) ))))","problem":81,"user":"4fd170fce4b04c3a95aa0411"},{"problem":81,"code":"(fn [s1 s2]\n  (let [m1 (reduce #(assoc %1 %2 1) {} s1)]\n    (->> s2\n         (reduce #(assoc %1 %2 (inc (get %1 %2 0))) m1)\n         (filter #(= 2 (%1 1)))\n         (keys)\n         (set))\n    ))","user":"5eb1c786e4b00a66d4a95201"},{"code":"#(disj (set (for [i %] (if (%2 i) i nil))) nil)","problem":81,"user":"52c6a0abe4b0c2d177d62111"},{"problem":81,"code":"(fn [c1 c2]\n  (-> (for [x c1\n        :when (and (contains? c1 x) (contains? c2 x))] \n      x)\n    set))","user":"58fc52cee4b0438e51c2cf95"},{"problem":81,"code":"(fn [coll1 coll2]\n  (set (for [x coll1 y coll2 :when (= x y)]\n    x)))","user":"5896735fe4b00487982d529d"},{"problem":81,"code":"#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/union (clojure.set/difference (clojure.set/union %1 %2) %1) (clojure.set/difference (clojure.set/union %1 %2) %2)))","user":"5854d1c0e4b07779d468640a"},{"code":"(fn [s q]\n  (clojure.set/difference(clojure.set/union s q)\n             (clojure.set/union (clojure.set/difference s q) (clojure.set/difference q s))))","problem":81,"user":"52c42bc2e4b0c2d177d620d0"},{"code":"(fn [a,b]\n  (set (remove #(nil? (some b (set (list %)))) a))\n  )","problem":81,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn foo [x y]\n  (set (cond\n    (empty? x) '()\n    (contains? y (first x))\n       (concat (list (first x)) (foo (rest x) y))\n    :else (foo (rest x) y))\n))","problem":81,"user":"5078300de4b0fc74642bff66"},{"problem":81,"code":"(fn [s1 s2] (apply hash-set (filter #(contains? s2 %) s1)))","user":"54e7425ee4b024c67c0cf810"},{"code":"(fn [l1 l2]\n  (letfn [(contains-value? [v l] (some #{v} l))]\n    (into #{} (for [v (seq l1)\n          :when (contains-value? v l2)]\n      v))))","problem":81,"user":"517531c6e4b07031762f2eea"},{"problem":81,"code":"(fn [a b] (set (filter (partial contains? a) b)))","user":"4fdb0c0ae4b05e33b9224f57"},{"code":"#(set (filter \n        (fn [x] (and (% x) (%2 x)))\n        (clojure.set/union % %2)))","problem":81,"user":"4ed8b598535d10e5ff6f52fc"},{"code":"(fn [s1 s2]\n  (loop [v (vec s1)\n         s-out #{}]\n    (if (empty? v) \n      s-out\n      (if (get s2 (peek v))\n        (recur (pop v) (conj s-out (peek v)))\n        (recur (pop v) s-out)))))","problem":81,"user":"5060d137e4b0dc10a69545a0"},{"code":"#(->> (clojure.set/difference %1 %2) (clojure.set/difference %1))","problem":81,"user":"4fc0853ae4b081705acca327"},{"problem":81,"code":";#(let [s1 (clojure.set/union %1 %2)\n;       s2 (clojure.set/difference %1 %2)\n;       s3 (clojure.set/difference %2 %1)]\n;   (clojure.set/difference s1 (clojure.set/union s2 s3)))\n#(set (filter %1 %2))","user":"57615a22e4b0994c1922fb88"},{"code":"(fn [a b]\n  (set (map first \n    (filter #(> (second %) 1)  \n      (frequencies (concat a b))))))","problem":81,"user":"4f2582bae4b0d66497709ff6"},{"problem":81,"code":"(fn [& xs] \n (->> (apply concat xs)\n  (frequencies)\n  (filter #(> (val %) 1))\n  (keys)\n  (set)))","user":"57eaf869e4b0bfb2137f5b56"},{"problem":81,"code":"(fn [xs ys]\n  (->>\n   (for [x xs\n         y ys]\n     [x y])\n   (filter #(= (first %) (second %)))\n   (reduce (fn [init-set x] (conj init-set (first x))) #{})))","user":"591072e0e4b0163c97b36ebc"},{"problem":81,"code":"#(set (filter identity (for [x %1] (if (%2 x) x nil))))","user":"56a94562e4b07966d5a8a074"},{"problem":81,"code":"(fn [a b]\n (let [all (clojure.set/union a b)\n       c #(clojure.set/difference all %)]\n  (c (clojure.set/union (c a) (c b)))\n )\n)","user":"549a999be4b0f3d1d8e70f6f"},{"problem":81,"code":"(fn set-intersection [a b] (set (filter #(b %) a)))","user":"60849bd6e4b0736b099e42f2"},{"code":"(fn [a b]\n  (clojure.set/select a b))","problem":81,"user":"51eb3aace4b0f1f103a0d159"},{"code":"(fn [s1 s2] (set (filter #(s2 %) s1)))","problem":81,"user":"4ed55b5d535d10e5ff6f52d8"},{"problem":81,"code":"(fn [coll1\n     coll2]\n  (loop [[r & more :as all] (seq coll1)\n         acc '()]\n    (if all\n      (recur more (if (some #(= r %) coll2) (conj acc r) acc))\n      (apply sorted-set acc))))","user":"5c718e6ce4b0fca0c1622796"},{"problem":81,"code":"(fn [s1 s2]\n      (let [sum (into s1 s2)]\n        (into #{}  (filter #(and (s1 %) (s2 %)) sum))))","user":"53f891eee4b0de5c4184856d"},{"problem":81,"code":"(fn [c1 c2] (into #{} (filter #(contains? c2 %1) c1)))","user":"50385746e4b0803468ea2c6d"},{"problem":81,"code":"(fn [set1 set2] (into #{} (filter #(contains? set2 %) set1)))","user":"5da05bcce4b000c986472bd0"},{"problem":81,"code":"(fn [x y] (set (for [xi x yi y :when (= xi yi)] xi)))","user":"550e52dbe4b06e50f9beb165"},{"problem":81,"code":"(fn interset [lst1 lst2]\n  (set (filter #(lst1 %) lst2))\n  )","user":"59dd387ae4b0a0ac046f2501"},{"problem":81,"code":"(fn\n  [a b]\n  (set (filter identity (map #(when (contains? b %) %) a))))","user":"5af907e6e4b0cc2b61a3bcda"},{"code":"(fn [set-a set-b] (set (filter #(contains? set-b %) set-a)))","problem":81,"user":"50f2e5cee4b0ec8ee6fa8643"},{"problem":81,"code":"(fn [& s] (into #{} (filter (fn [val] (every? #(get % val) s))  (apply clojure.set/union s))))","user":"56018dd4e4b04bb52996e18f"},{"code":"(comp set filter) ;;Sets are functions that act like (#{1} 1) => true\n;; This then applys set to the collection to remove any duplicates. Genius.","problem":81,"user":"5008d149e4b0144d4f561e41"},{"problem":81,"code":"(fn [a b]\n  (let [ac (clojure.set/difference a b)\n        bc (clojure.set/difference b a)\n        ab (clojure.set/union a b)]\n    (clojure.set/difference ab bc ac)))","user":"5c1edf23e4b0efcb0b05b25d"},{"code":"(fn [col1 col2] (into #{} (filter #(contains? col1 %) col2)))","problem":81,"user":"534c1c64e4b084c2834f4a8a"},{"code":"#(set (\n  filter (fn [e] (contains? %2 e)) %\n))","problem":81,"user":"4ef48422535dced4c769f236"},{"problem":81,"code":"(fn [a b]\n   (apply hash-set (for [x a y b :when (= x y)] x)))","user":"54357066e4b0b6b47310fcfd"},{"code":"(fn intr [s1 s2]\n  (set (for [x s1\n        :when (not (nil? (s2 x)))]\n    x)))","problem":81,"user":"529ce629e4b04e0c58e87b6e"},{"problem":81,"code":"#(set (for [x  %1\n            y  %2\n           :when (= x y)]\n       x))","user":"58a34442e4b02bd94d917ef2"},{"problem":81,"code":"(fn [a b] (set (for [aa a :when (contains? b aa)] aa)))","user":"56f15eade4b04a395b9a048e"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [m i]\n            (if (contains? s2 i)\n              (conj m i)\n              m)\n            ) #{} s1))","user":"53ae16e2e4b047364c044472"},{"problem":81,"code":"(fn [a b] (into #{} (filter #(a %) b)))","user":"54d0e6c5e4b0e8a36923e5d4"},{"problem":81,"code":"(fn [a b] (into #{} (filter #((complement nil?) (get b %1)) a)))","user":"55c1eb52e4b0e31453f64970"},{"code":"(fn [x y] (set (filter #(not (nil? %)) (for [i x] (y i)))))","problem":81,"user":"4ee9d697535d93acb0a66895"},{"problem":81,"code":"(fn\n  [a b]\n  (set\n    (filter\n     (fn\n       [x]\n       (contains? b x)) a)))","user":"53ac4719e4b047364c04445c"},{"problem":81,"code":"(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (set (concat (remove a b) (remove b a)))))","user":"567b2f20e4b05957ce8c61a2"},{"problem":81,"code":"(fn my-intersect [s1 s2] (into #{} (filter #(contains? s2 %) s1)))","user":"5b421edce4b02d533a91bc2c"},{"problem":81,"code":"(fn [sa sb] (into #{} (filter #(contains? sb %) sa)))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":81,"code":"(fn intr [a b] (reduce (fn [result el] (if (contains? b el) (conj result el) result)) #{} a))","user":"59468de7e4b07ddc2dafad88"},{"code":"#(set (filter (fn [x] (contains? %1 x)) %2))","problem":81,"user":"4ed1f84f535d44c135fd68d3"},{"problem":81,"code":"(fn [left right]\n  (reduce (fn [result element]\n            (if (contains? right element)\n              (conj result element)\n              result))\n          #{}\n          left))","user":"537cb3ade4b06839e8705e7d"},{"problem":81,"code":"(fn \n  [a b]\n  (clojure.set/union (set (filter #(contains? a %) b)) (set (filter #(contains? b %) a)))\n )","user":"58eed4c5e4b056aecfd47db7"},{"problem":81,"code":"(fn set-intersection [s1 s2]\n  (set (filter s2 s1)))","user":"551bdefde4b07993ea3788d7"},{"code":"(fn [a b]\r\n  (set (filter a b)))","problem":81,"user":"4fdc067fe4b05e33b9224f69"},{"code":"(fn samething [s1 s2]\n  (if (< (count s2) (count s1))\n    (recur s2 s1)\n    (reduce (fn [r i]\n              (if (contains? s2 i)\n                r\n\t\t(disj r i)\n                )\n              )\n            s1 s1)))","problem":81,"user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [s3 curr] (if (contains? s1 curr) (conj s3 curr) s3)) #{} s2))","user":"5c76577ae4b0fca0c16227ea"},{"problem":81,"code":"(fn [set1 set2]\n    (clojure.set/select #(set2 %) set1))","user":"5f331015e4b0574c87022c37"},{"problem":81,"code":"(fn my-inter\n  [s1 s2]\n  (set (filter #(get s2 %) s1)))","user":"568bd448e4b0dcc4269f40a9"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [s1 set1\n         ans #{}]\n    (if (empty? s1)\n      ans \n      (recur (next s1) (if (contains? set2 (first s1))\n                         (conj ans (first s1))\n                         ans)))))","user":"56038f34e4b04bb52996e1bc"},{"code":"(fn [set1 set2] (set (filter #(contains? set1 %) set2)))","problem":81,"user":"521f24ebe4b0e6c71e0c0bcd"},{"problem":81,"code":"(fn [x y]\n  (set (filter x (filter y x))))","user":"55912230e4b027778923767a"},{"problem":81,"code":"#(reduce (fn [acc el] (if (%1 el) (conj acc el) acc)) #{} %2)","user":"57642916e4b0994c1922fbee"},{"code":"#(apply hash-set (filter (partial contains? %) %2))","problem":81,"user":"51beb32ae4b013aa0d74b7fd"},{"code":"(fn [sa sb]\n  (set (filter #(contains? sb %1) sa)))","problem":81,"user":"4eb59464535d7eef30807369"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n      (reduce #(if (s1 %2) (conj %1 %2) %1) #{} s2))","user":"558bdcefe4b0277789237633"},{"problem":81,"code":"(fn [s1 s2]   (into #{} (filter #(contains? s2 %) s1)))","user":"575ddfd1e4b02ea11479938d"},{"problem":81,"code":"(fn [s1 s2] (set(filter #(contains? s2 %) s1)))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"code":"(fn [s1 s2]\n  (loop [s1 (seq s1) acc #{}]\n    (cond\n      (empty? s1) acc\n      (contains? s2 (first s1)) (recur (rest s1) (conj acc (first s1)))\n      :else (recur (rest s1) acc))))","problem":81,"user":"4f038499535dcb61093f6b09"},{"problem":81,"code":"(fn [s t]\n  ;(set (filter #(and (contains? s %) (contains? t %)) (concat s t))))\n  (set (filter s t)))","user":"569ab3e2e4b0542e1f8d144a"},{"problem":81,"code":"(fn foo [xset yset]\n  (let [xlist (apply conj '() xset)\n        ylist (apply conj '() yset)\n        xylist (concat xlist ylist)\n        xyfreq (frequencies xylist)]\n    (set (for [kv xyfreq :when (> (second kv) 1)] (first kv)))))","user":"54d753ebe4b0a52adc2e2029"},{"code":"(fn [xs ys]\n  (clojure.set/difference \n   (clojure.set/union xs ys)\n   (clojure.set/difference ys xs)\n   (clojure.set/difference xs ys)))","problem":81,"user":"52a8ca0fe4b0c58976d9ac36"},{"problem":81,"code":"(fn [c1 c2](apply sorted-set (filter #(contains? c2 %) c1)))","user":"564348e1e4b08d4f616f5f26"},{"problem":81,"code":"(fn [s & ss]\n   (reduce (fn [int s]\n             (set (filter (partial contains? int) s)))\n           s\n           ss))","user":"5cdfe2aee4b0a17bb84e2b04"},{"code":"(fn intersect [x y]\n  (into #{} (filter #(y %) x)))","problem":81,"user":"531dfaf5e4b08068f379edb3"},{"problem":81,"code":"(fn my-set\n  [s1 s2]\n  (loop [s1 s1\n         r ()]\n       (cond\n         (empty? s1) (apply sorted-set  r)\n         (contains? s2 (first s1)) (recur (rest s1) (cons (first s1) r))\n         :else (recur (rest s1) r))))","user":"57fedf07e4b0d3187e9009dc"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [s3 x]\n            (if (s2 x)\n              (conj s3 x)\n              s3))\n          #{}\n          s1))","user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn [s1 s2]\n  (set (remove nil? (map s1 s2))))","problem":81,"user":"4fee04a0e4b0678c553fc308"},{"problem":81,"code":"#(clojure.set/difference  %1  (clojure.set/difference %1 %2))","user":"5794fd7be4b0e215f87e8476"},{"code":"(fn [x y] (into #{} (filter #(contains? x %) y)))","problem":81,"user":"4e8d5911535d65386fec2133"},{"problem":81,"code":"(fn [s1 s2]\n  (set (reduce #(if (contains? s1 %2) (cons %2 %1) %1) #{} s2)))","user":"5ec819b4e4b08d0ec38692e2"},{"problem":81,"code":"(fn [s1 s2] (set (filter #(contains? s2 %) (for [x s1] x))))","user":"5ee93720e4b029a2061bbeb7"},{"code":"#(set (filter (fn [x] (= (%2 x) x)) %1))","problem":81,"user":"538d8bb8e4b0b51d73faae71"},{"problem":81,"code":"#(reduce conj #{} (filter identity (map % %2)))","user":"52f8b86de4b047fd55836fdb"},{"problem":81,"code":"(fn [a b]\n  (set (filter (fn [v] (contains? b v)) a)))","user":"5188c249e4b0bdff0e072d54"},{"code":"(fn\n                           [xs ys]\n                           ; [x for x in xs if x in ys] # this line took five seconds to write\n                           (set (filter (fn [z] (contains? ys z)) xs)))","problem":81,"user":"4f07bc41535dcb61093f6c2c"},{"problem":81,"code":"(fn [set1 set2] \n  (set (filter #(contains? set2 %) set1)))","user":"55fc838be4b0f488688e0674"},{"problem":81,"code":"(fn [a b]\n  (loop [s a n #{}]\n    (cond\n     (empty? s) n\n     (contains? b (first s)) (recur (next s) (conj n (first s)))\n     :else (recur (next s) n))))","user":"574abbfbe4b02ea114799200"},{"problem":81,"code":"(fn f [s1 s2]\n  (set (filter #(some (hash-set %) s2) s1)))","user":"56795deae4b05957ce8c6187"},{"problem":81,"code":"(fn [a b]\n  (into #{} (filter #(and (contains? a %1) (contains? b %1)) a)))","user":"53fc88e7e4b0de5c418485be"},{"problem":81,"code":"(fn [s1 s2]\n  (into #{} (filter #(contains? s2 %1) s1)))","user":"5d231255e4b02ea6f0fb69fe"},{"code":"(fn [s t]\r\n  (set (filter identity (for [x s] (t x)))))","problem":81,"user":"5050b107e4b063148f524126"},{"problem":81,"code":"(fn [s1 s2] (reduce #(if (contains? s1 %2) (conj %1 %2) %1) #{} s2))","user":"547c2c6ce4b0c51c1f4d72e3"},{"code":"(fn [s1 & sets]\n  (letfn [ (pred [key] \n                 (every? true? (map #(contains? % key) sets)))]\n    (set (filter pred s1))))","problem":81,"user":"532418f3e4b09d4e7a9b54d8"},{"code":"(fn [sa sb]\n  (reduce (fn [result item]\n            (if (contains? sb item)\n              result\n              (disj result item)\n              )\n            ) sa sa))","problem":81,"user":"51da7e49e4b02ceefd947768"},{"code":"(fn [a b] (set (filter #(b %) a)))","problem":81,"user":"4daf907aedd6309eace4d17b"},{"code":"#(set (filter (fn [x] (contains? %2 x)) %1))","problem":81,"user":"4f039bbe535dcb61093f6b39"},{"problem":81,"code":"(fn [s1 s2] (set (filter (partial contains? s2) s1)))","user":"542d2385e4b0dad94371f2b2"},{"code":"(fn [a b]\n  (set (filter #(and (contains? a %) (contains? b %)) (clojure.set/union a b))))","problem":81,"user":"531619c1e4b08068f379ed3d"},{"problem":81,"code":"(fn [A B] (clojure.set/select (partial contains? A) B))","user":"56eb3f9de4b04a395b9a0420"},{"problem":81,"code":"(fn [s1 s2] (into #{} (filter #(contains? s2 %) s1) ))","user":"53e2ac1ae4b036ad0777e3f3"},{"code":"#(into #{} (remove nil? (map (fn [x] (%2 x) ) %1)))","problem":81,"user":"531bfb69e4b08068f379ed97"},{"code":"(fn [& sets]\n  (into #{} (filter (fn [k] (every? #(get % k) sets)) (mapcat seq sets))))","problem":81,"user":"4f49e869e4b0d56e7bb92c02"},{"code":"(fn [r s] (reduce #(if (contains? s %2) (conj % %2) %) #{} r))","problem":81,"user":"4f05ea25535dcb61093f6c02"},{"problem":81,"code":"(fn [xs ys]\n  (reduce (fn [acc y]\n            (if (xs y)\n              (conj acc y)\n              acc)) #{} ys))","user":"51bd78c3e4b0ff155d51d2b0"},{"problem":81,"code":"#(->> (clojure.set/union %1 %2)\n            (filter (fn[x] (contains? %1 x)))\n            (filter (fn[x] (contains? %2 x)))\n            set)","user":"5ed6030de4b016b56eae05db"},{"problem":81,"code":"(fn [s1 s2]\n (reduce \n   #(if (get s2 %2) (conj %1 %2) %1)\n   #{}\n   s1))","user":"5650082fe4b0284900eef6b7"},{"problem":81,"code":"(fn rick-intersection [& sets]\n  (let [U (reduce clojure.set/union sets)]\n    (clojure.set/difference U\n     (reduce clojure.set/union (map #(clojure.set/difference U %) sets)))))","user":"53703287e4b0fc7073fd6e8f"},{"code":"(fn [s1 s2] (apply hash-set \n  (keys (filter #(> (% 1) 1) \n(map identity (frequencies (concat s1 s2)))))))","problem":81,"user":"4e6b6294535d8ccf87e9ff11"},{"problem":81,"code":"(fn irisan [a b]\n  (set (map first (filter #(> (count %) 1) (partition-by identity (sort (concat (vec a) (vec b))))))))","user":"56278266e4b00e49c7cb47d3"},{"problem":81,"code":"#(apply sorted-set (filter (fn [x] (contains? %1 x)) %2))","user":"5410499de4b01498b1a719a6"},{"code":"(fn intersect [a b]\n  (let [\n        counts\n        (fn [x] (reduce #(assoc %1 %2 (inc (%1 %2 0))) {} x))\n       ]       (into #{} (map first (filter #(-> % val (= 2)) (counts (concat a b)))))))","problem":81,"user":"514cfa27e4b019235f6c057d"},{"problem":81,"code":"(fn [x y] \n  (set \n   (filter #(contains? y %) x)))","user":"5aa4b961e4b0d174b936c888"},{"problem":81,"code":"(fn [set1 set2] \n  (reduce \n   (fn [inter el] \n     (if (contains? set1 el) \n       (conj inter el) \n       inter)) \n   #{} \n   set2))","user":"588fd085e4b00487982d51c0"},{"problem":81,"code":"(fn [x y] (into #{} (filter x y)))","user":"567f034be4b0feffd0d18eba"},{"problem":81,"code":"#(set (keys (filter (fn [coll] (> (second coll) 1))\n                     (frequencies (flatten (conj (into [] %1) (into [] %2)))))))","user":"542c44f8e4b0dad94371f2a1"},{"problem":81,"code":"#(-> (fn [acc x]\n        (if (contains? % x)\n          (conj acc x)\n          acc))\n      (reduce #{} %2))","user":"5be79b5be4b0f319e2d7ec5a"},{"problem":81,"code":"(fn [x y] \n  (set (remove nil? (map #(x %) y))))","user":"54a11042e4b09f271ff37c49"},{"problem":81,"code":"(fn [a b] (clojure.set/select #(contains? a %) b))","user":"56b295f7e4b0982f16b37e08"},{"problem":81,"code":"(fn set-intersection [xs ys]\n  (set (filter #(and (xs %) (ys %)) (clojure.set/union xs ys))))","user":"569ad037e4b0542e1f8d144f"},{"problem":81,"code":"(fn [col1 col2]\n   (into #{} (filter #(contains? col2 %) col1)))","user":"5db98f39e4b010eb3c36cd53"},{"code":"(fn [a b]\r\n(set (filter #(not (nil? %))\r\n(map #(and (get a %) (get b %)) (conj a b)))))","problem":81,"user":"5376966ae4b06839e8705e27"},{"problem":81,"code":"(fn [s1 s2]\n  (into #{} (filter (partial contains? s1) s2)))","user":"530b8580e4b02e82168697cc"},{"problem":81,"code":"(fn [s1 s2] (into #{} (filter #(not (nil? (s1 %))) s2)))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":81,"code":"(fn [set1 set2]\n  (set (filter #(set1 %) set2))\n  )","user":"5c891afde4b048ec896c5935"},{"problem":81,"code":"(fn [set1 set2] (reduce #(if (contains? set2 %2) \n                           (conj %1 %2) \n                           %1) \n                        #{} \n                        set1))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":81,"code":";(fn [a b] (reduce #(if (a %2) (conj %1 %2) %1) #{} b))\n(comp set filter)","user":"54ca9ca8e4b057c6fda3a265"},{"problem":81,"code":"(fn intersect [setA setB]\n   (set (filter setA setB)))","user":"561eb82fe4b064ca9f4b16c7"},{"problem":81,"code":"(fn set-intersection\n  [s1 s2]\n  (disj (set (map #(get s1 %) s2)) nil))","user":"5aa00b7fe4b0d174b936c825"},{"problem":81,"code":"(fn [s1 s2] (set (reduce (fn [acc v] (if (contains? s2 v) (conj acc v) acc)) #{} s1)))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":81,"code":"(fn [a b] \n  (apply hash-set \n         (filter #(and (contains? a %) (contains? b %)) (clojure.set/union a b))))","user":"550ff2a3e4b06e50f9beb17f"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce #(if (contains? s1 %2) (conj %1 %2) %1) #{} s2))","user":"5ed52854e4b016b56eae05d2"},{"code":"#(clojure.set/difference % \n  (clojure.set/difference % %2))","problem":81,"user":"4ff9a200e4b0678c553fc3ab"},{"code":"#(set ( for [x % y %2 :when (= x y)] x ))","problem":81,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":81,"code":"(fn \n  [myset1 myset2]\n  (set  \n        (filter #(contains? myset1 %) myset2)\n        \n        ))","user":"55897fe2e4b059ccff29b205"},{"problem":81,"code":"(fn [a b]\n  (set (filter #(and (contains? a %) (contains? b %)) (set (concat a b)))))","user":"55fee5e4e4b00f4cabc5765a"},{"problem":81,"code":"(fn inters [x y] (loop [xs x buf []]\n                     (if (empty? xs)  (set buf)\n                     (if (contains? y (first xs)) (recur (rest xs) (conj buf (first xs))) (recur (rest xs) buf)))))","user":"5c7f7889e4b0d597f478cae0"},{"code":"#(->> (clojure.set/difference % %2) (clojure.set/difference %))","problem":81,"user":"4fe2501ae4b0dd6cd5ce3644"},{"code":"(fn it [& sets]\n  (set\n   (filter (fn [k] (every? #(contains? % k) sets))\n           (set (apply concat sets)))))","problem":81,"user":"532b43c3e4b09d4e7a9b5531"},{"code":"(fn [s1 s2]\n  (set (filter #(contains? s1 %1) s2)))","problem":81,"user":"4ff743fde4b0678c553fc38d"},{"problem":81,"code":"#(->> (seq %2)\n       (concat (seq %1))\n       sort\n       (partition-by identity)\n       (filter (fn [l] (> (count l) 1)))\n       (map first)\n       (set)\n      )","user":"5c435a9fe4b0e06e1360a367"},{"problem":81,"code":"(fn [l1 l2]\n             (reduce #(if (l2 %2) (conj %1 %2) %1) #{} l1))","user":"57ac7710e4b0b8559636fc88"},{"code":"(fn [s1 s2]\r\n  (apply hash-set((fn [s1 s2 res]\r\n     (if-not s1\r\n       res\r\n       (recur (next s1) s2 (if-let [xx (s2 (first s1))]\r\n                             (cons xx res)\r\n                             res)))) s1 s2 nil)))","problem":81,"user":"4f359c7ee4b0e243712b1ec4"},{"problem":81,"code":"#(into (into #{} (clojure.set/difference %1 (clojure.set/difference %1 %2))) (clojure.set/difference %2 (clojure.set/difference %2 %1)))","user":"5b23f306e4b08b1df1c36769"},{"code":"(fn [a b] (into #{} (filter #(b %) a)))","problem":81,"user":"4e43b0d9535dc968683fc4a3"},{"problem":81,"code":"(fn [arg1 arg2]\n(cond\n(and true (= arg2 #{4 3 2 5})) #{3 2}\n(and true (= arg2 #{4 3 5})) #{}\n(and true (= arg2 #{:e :c :d :f :a})) #{:c :d :a}\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":81,"code":"(fn f [a b]\n  (clojure.set/difference a\n  (clojure.set/difference a b)))","user":"56ebe773e4b04a395b9a042a"},{"problem":81,"code":"(fn [s1 s2]\n  (clojure.set/difference\n    (clojure.set/union s1 s1)\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)\n  ))","user":"58ca613de4b021aa9917edb7"},{"problem":81,"code":"(fn [s1 s2] (set (for [a s1 b s2 :when (= a b)] a)))","user":"55f09e7be4b06e875b46ce28"},{"problem":81,"code":"(fn [s & rest] (clojure.set/difference s (apply clojure.set/difference s rest)))","user":"54b5b3cce4b05787c3b163ab"},{"problem":81,"code":"(fn inter [a b] (set (filter #(contains? b %) a)))","user":"535f9a5ce4b04ce2eb3ed2de"},{"code":"(fn my-int\n  [sa sb]\n  (set (filter (fn [x] (some #{x} sb)) sa)))","problem":81,"user":"5235a902e4b0a643f2dcb750"},{"problem":81,"code":"(fn [X Y] \n  (clojure.set/select #(contains? Y %1) X))","user":"59a72effe4b066c664927d94"},{"code":"(fn [s1 s2] (apply hash-set (filter (fn [x] (contains? s1 x)) s2)))","problem":81,"user":"52bc6f5ee4b07a9af57922f6"},{"problem":81,"code":";(fn new-intersection\n;  [set1 set2]\n;  (loop [s1 set1 res []]\n;    (if (first s1)\n;      (if (contains? set2 (first s1))\n;        (recur (rest s1) (conj res (first s1)))\n;        (recur (rest s1) res))\n;      (set res))))\n\n\n(fn [s1 s2] (set (filter #(contains? s2 %) s1)))","user":"550d9452e4b06e50f9beb15d"},{"problem":81,"code":"(fn set-intersection [set1 set2]\n  (loop [main-set (if (> (count set1) (count set2)) set1 set2)\n         other-set (if (> (count set1) (count set2)) set2 set1)\n         sub-set #{}]\n    (if (or (empty? main-set))\n      sub-set\n      (recur (rest main-set) other-set (let [item (first main-set)]\n                                         (if (contains? other-set item)\n                                           (conj sub-set item)\n                                           sub-set))))))","user":"58daae01e4b0a4d5acaab664"},{"code":"#(clojure.set/difference %1 (clojure.set/difference %1 %2))","problem":81,"user":"4edab806535d10e5ff6f5311"},{"problem":81,"code":"#(into #{} (concat (filter %1 %2) (filter %2 %1)))","user":"4fb1d7ace4b081705acca281"},{"problem":81,"code":"(fn\n\t[set1 set2]\n\t\t(set (remove nil? (map #(if (contains? set2 %) %) set1))))","user":"53d6b266e4b0e771c3025459"},{"code":"(fn foo [s1 s2]\n  (reduce #(if (s2 %2) (conj %1 %2) %1) #{} s1))","problem":81,"user":"506755b3e4b03d366d7cb2bc"},{"code":"#(set(for [x %1\n   :when (contains? %2 x)]\n   x))","problem":81,"user":"52ac41fee4b0c58976d9ac85"},{"problem":81,"code":"(fn [s-a s-b]\n   (letfn [(the-diff [s1 s2] \n             (if (< (count s1) (count s2))\n               (reduce (fn [result item] \n                         (if (contains? s2 item) \n                           (disj result item) \n                           result))\n                       s1 s1)\n               (reduce disj s1 s2)))]\n     (let [s-a-minus-b (the-diff s-a s-b)]\n       (the-diff s-a s-a-minus-b))))","user":"54b817eee4b0ed20f4ff6e93"},{"code":"(fn [a b] (into #{} (for [x a, y b, :when (= x y)] x)))","problem":81,"user":"5084cb7de4b0fb8f40674bfb"},{"problem":81,"code":"(fn [a b] (set (remove nil? (map #(if (contains? a %) % nil) b))))","user":"565b2fa5e4b068f2fe63dbfe"},{"code":"(fn [a b]\n\t(reduce \n\t\t#(if (nil? (b %2)) % (conj % %2)) #{} a)\n\t)","problem":81,"user":"52bf6946e4b07a9af5792334"},{"code":"(fn [a b] \n  (into #{} (filter (fn [x] (some #{x} b)) a)))","problem":81,"user":"50052fd0e4b0678c553fc45d"},{"code":"(fn sd [x y] (into #{} (filter #(contains? y %) x)))","problem":81,"user":"4eeb8f68535d93acb0a668a9"},{"problem":81,"code":"(fn [sx sy]\n    (set (for [x sx :when (contains? sy x)] x))\n    )","user":"5351fca5e4b084c2834f4aec"},{"problem":81,"code":"(fn [s1 s2]\n  (into #{} \n        (remove nil? \n                (map #(if (contains? s2 %) \n                        % nil) \n                     s1))))","user":"50b63c5ee4b0a86f8358ca69"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter #(s1 %) s2)))","user":"55d2dd27e4b0e31453f64a5b"},{"problem":81,"code":"(fn my-inter [& sets]\n  (set\n    (reduce\n      (fn [s1 s2]\n            (filter (partial contains? s2) s1))\n      sets)))","user":"53f7820be4b0de5c41848560"},{"code":"(comp set filter)","problem":81,"user":"4dad8756c9a9d6ed1099dc57"},{"code":"(fn [coll1 coll2]\n  (set (filter #(coll2 %) coll1)))","problem":81,"user":"53322cece4b019098a6f8b73"},{"code":"(fn k-intersection [x y]\n  (set (filter #(contains? x %) y)))","problem":81,"user":"4db58ccb535d87e67b28fe10"},{"code":"(fn my-intersection [s1 s2]\r\n  (if (< (count s2) (count s1))\r\n    (recur s2 s1)\r\n    (reduce (fn [result item]\r\n        (if (contains? s2 item)\r\n\t\tresult\r\n\t\t(disj result item)))\r\n\t    s1 s1)))","problem":81,"user":"50436470e4b034ff00315d23"},{"problem":81,"code":"#(reduce (fn [para1 para2] (if (= 2 (second para2)) (conj para1 (first para2)) para1)) #{} (frequencies (concat %1 %2)))","user":"5ec5f7f2e4b08d0ec38692d1"},{"code":"(fn [a b] \n         (\n           (reduce \n             #(assoc %1 :p (if (= (get (%1 :a) %2) (get (%1 :b) %2)) (conj (%1 :p) %2) (%1 :p))) \n             {:a a :b b :p #{}} \n             (into a b)) \n           :p))","problem":81,"user":"50bfd849e4b042992946c649"},{"code":"(fn [s1 s2]\n  (reduce #(if (s1 %2) (conj %1 %2) %1) #{} s2))","problem":81,"user":"4ec132a0535dfed6da9c6da9"},{"code":"#(set (remove nil? (map (fn [n] (if (contains? %2 n)\n                                     n\n                                     nil)) %1)))","problem":81,"user":"511b810ce4b07ab9ec456182"},{"problem":81,"code":"(fn [a b] \n  (reduce \n     (fn [agg p]\n        (if (b p)\n           (conj agg p)\n           agg\n        )\n     )\n   #{} a)\n)","user":"59ac559ee4b00adcf69795d2"},{"code":"#(into #{} (filter %1 (seq %2)))","problem":81,"user":"500d1db4e4b05f7c30cfa69f"},{"problem":81,"code":"(fn [x y]\n  (let [c (for [b x] \n            (if (contains? y b)\n              b))]\n    (set (filter #(not= nil %) c))\n    )\n  )","user":"5ca2ca9fe4b048ec896c5b9c"},{"problem":81,"code":"(fn my-intersection\n  ([s1 s2] (my-intersection #{} s1 s2))\n  ([ans s1 s2]\n   (if (seq s1)\n     (if (contains? s2 (first s1)) \n       (recur (conj ans (first s1)) (rest s1) s2)\n       (recur ans (rest s1) s2))\n     ans)))","user":"5a962c09e4b0d174b936c765"},{"code":"#(->> [% %2] (mapcat seq) frequencies (filter (fn [el] (->> el val (= 2)))) (map first) set)","problem":81,"user":"52bdf6bde4b07a9af579230d"},{"code":"(fn\n  [s1 s2]\n  (set (filter #(not (nil? %)) (map s2 s1))))","problem":81,"user":"4fe89297e4b07c9f6fd12c4c"},{"problem":81,"code":"(fn [x y] (set (for [[id freq] (frequencies (concat x y))\n                 :when (> freq 1)]\n                 id)))","user":"593ab583e4b069cdc2982b57"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [sq x] (if (contains? s2 x) (conj sq x) sq)) #{} s1))","user":"51b920bfe4b0e871ca4958f9"},{"problem":81,"code":"(fn\n  [x y]\n  (into #{} (for [a x\n        b y\n        :when (= a b)]\n    a)))","user":"56a44067e4b0542e1f8d14da"},{"problem":81,"code":"#(set (remove (complement %) %2))","user":"52a23af1e4b04e0c58e87beb"},{"problem":81,"code":"#(set (apply concat (for [x %]\n  (if (contains? %2 x)\n    [x]\n    []))))","user":"565e0934e4b068f2fe63dc30"},{"code":"(fn f1\n  ([a b]\n    (f1 a b #{}))\n  ([a b t]\n    (if (empty? a)\n      t\n      (let [h (first a) r (drop 1 a)]\n        (if (contains? b h)\n          (recur r b (conj t h))\n          (recur r b t))))))","problem":81,"user":"50b8e9a4e4b0cba0e598b656"},{"problem":81,"code":"(fn [x y] (clojure.set/difference (clojure.set/difference (clojure.set/union x y) (clojure.set/difference x y)) (clojure.set/difference y x)))","user":"55d1aa33e4b0e31453f64a48"},{"problem":81,"code":"(fn [set1 set2] (reduce #(if (and (contains? set1 %2)\n                                   (not (contains? %1 %2)))\n                            (conj %1 %2) %1) #{} set2))","user":"54e4edcae4b024c67c0cf7f3"},{"problem":81,"code":"(fn [set1 set2]\n   (reduce (fn [res it]\n             (if (contains? set2 it)\n               (conj res it)\n               res)) #{} set1))","user":"590b3aeae4b047aa04b199d0"},{"problem":81,"code":";; (fn [s1 s2]\n;;   (let [u (clojure.set/union s1 s2)\n;;         d1 (clojure.set/difference s1 s2)\n;;         d2 (clojure.set/difference s2 s1)\n;;         diff (fn [d s] (->> s (remove d) set))]\n;;     (->> u\n;;          (diff d1)\n;;          (diff d2))))\n\n(fn [s1 s2] (-> s1 (filter s2) set))","user":"53e3f7a8e4b036ad0777e408"},{"problem":81,"code":"(fn [s1 s2]\n   (apply hash-set (filter identity (map s1 s2))))","user":"5073e7fde4b054001656accb"},{"problem":81,"code":"(fn [l1 l2]\n  (set \n    (filter #(contains? l2 %) l1)))","user":"5739cbe4e4b0cd1946bd107c"},{"problem":81,"code":"(fn[a b](set(remove nil? (for[i a] (some #(and (= i %) i) b)))))","user":"57bd960fe4b05aa3c4741c52"},{"problem":81,"code":"#(set (for [s1 %\n            s2 %2\n            :when (= s1 s2)]\n        s1))","user":"55bf6dbce4b01b9910ae2a12"},{"code":"(fn [& a] (reduce #(clojure.set/difference % (clojure.set/difference % %2)) (apply clojure.set/union a) a))","problem":81,"user":"536046a9e4b063bf7a5f8fe1"},{"problem":81,"code":"#(set (filter (fn[x] (contains? %1 x)) %2))","user":"548cd637e4b0e286459a1210"},{"problem":81,"code":"#(apply sorted-set\n        (filter\n         (fn [x]\n           (contains? %1 x))\n         %2))","user":"59251947e4b072a2710fce69"},{"problem":81,"code":"(fn [seta setb]\n  (set (filter seta setb)))","user":"53576356e4b04ce2eb3ed27a"},{"code":"#(set (for [x %1 :when (not= nil (get %2 x))] x))","problem":81,"user":"5017f840e4b02f523d7cc5e8"},{"code":"(fn [l m]\n  (into #{} \n        (remove (complement identity)\n                (map (fn [a] (l a)) m))))","problem":81,"user":"50e135f4e4b084616e11c667"},{"problem":81,"code":"(fn  [a b]\n  (reduce #(if (a %2) (conj % %2) %) #{} b))","user":"5628cb07e4b00e49c7cb47ef"},{"code":"(fn [set1 set2]\n  (loop [set2 set2 result #{}]\n    (if-not (seq set2)\n      result\n      (if (contains? set1 (first set2))\n        (recur (rest set2) (conj result (first set2)))\n        (recur (rest set2) result)\n      ))))","problem":81,"user":"52fcfeeee4b047fd55837027"},{"problem":81,"code":"(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x))))","user":"5441f5e8e4b032a45b869375"},{"problem":81,"code":"(fn [& r]\n (set\n  (reduce #(filter (fn [x] (%1 x)) %2)r)))","user":"58844d43e4b0f1effa3b7696"},{"code":"(fn [a b]\r\n  (set (filter #(some #{%} b) a)))","problem":81,"user":"4dbb1126535d1e037afb21b3"},{"problem":81,"code":"(fn my-intersection\n  [a b]\n  (set (filter #(contains? b %) a)))","user":"5b4b8cd6e4b02d533a91bc9f"},{"code":"(fn [l k] (set (filter #(not (nil? %)) (for [e l] (if (contains? k e) e)))))","problem":81,"user":"4f565bebe4b0a7574ea7181e"},{"problem":81,"code":"(fn [a b]\n  (clojure.set/select #(contains? a %) b))","user":"5338387de4b0e30313ee6c91"},{"problem":81,"code":"(fn [s1 s2] (reduce #(if (s1 %2) (conj % %2) %) #{} s2))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":81,"code":"(fn [s1 s2]\n  (clojure.set/difference \n    (clojure.set/union s1 s2)\n    (clojure.set/difference s2 s1)\n    (clojure.set/difference s1 s2)))","user":"54b13a40e4b09f271ff37d1b"},{"code":"(comp #(into #{} %) filter)","problem":81,"user":"4dad76588e77d6ed63f12a44"},{"code":"(fn [s1 s2] (set (filter #(not= nil (s1 %)) s2)))","problem":81,"user":"4e95f5a5535dbda64a6f6b3b"},{"code":"(fn is [set1 set2]\r\n  (loop [s set2\r\n         ret #{}]\r\n     (cond (empty? s) ret\r\n           (set1 (first s)) (recur (rest s) (conj ret (first s)))\r\n           :else (recur (rest s) ret))))","problem":81,"user":"4fcc6cb3e4b0ee37620e1861"},{"problem":81,"code":"(fn [set1 set2]\n  (into #{}\n    ((fn hi [set1 set2]\n        (cond (empty? set1) '()\n              :else (if-not (nil? (some #{(first set1)} set2)) (cons (first set1) (hi (rest set1) set2)) (hi (rest set1) set2)))) set1 set2)))","user":"5e663073e4b0fd0acd1586bc"},{"code":"(fn [coll1 coll2]                                                             \n    (letfn [(common [c1 c2]                                                     \n              (into '() (remove nil? (map #(if (contains? c2 %) %) c1))))]      \n    (set (common coll1 coll2))))","problem":81,"user":"526397f1e4b03e8d9a4a70b6"},{"problem":81,"code":"(fn [s1 s2]\n  (set (for [e s1 :when (contains? s2 e)] e)))","user":"54684c3be4b00cfc9eacc139"},{"problem":81,"code":"#(into #{} (keep identity (map %1 %2)))","user":"5a0ef454e4b04bbd27e6d9fa"},{"code":"(fn [a b] \r\n  (let [both (clojure.set/union a b)\r\n        bo-a (clojure.set/difference both a)\r\n        bo-b (clojure.set/difference both b)]\r\n     (clojure.set/difference both bo-a bo-b)))","problem":81,"user":"4db92654535d1e037afb21a0"},{"code":"(fn [s1 s2]\n   (set (filter #(contains? s1 %) s2)))","problem":81,"user":"4e59b02c535d8a8b8723a2a2"},{"code":"#(set (distinct \n  (flatten \n    (remove (fn [a] (> 2 (count a))) \n(partition-by identity (sort (concat %1 %2)))))))","problem":81,"user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":81,"code":"#(set (for [x %\n             :when (contains? %2 x)]\n        x))","user":"582290b5e4b04b46fc4b0fa0"},{"problem":81,"code":"(fn [s1 s2]\n  (clojure.set/select (partial contains? s1) s2))","user":"5ab276f2e4b073f1774425e6"},{"problem":81,"code":"(fn [x y]\n  (set\n    (filter #(contains? x %)\n            y)))","user":"57dd47f4e4b0bd073c20243e"},{"code":"(fn [b a]\n   (set (reduce (fn [acc x]\n             (if (nil? (get b x))\n               acc\n               (conj acc x)\n               )\n             ) [] (seq a)))\n   )","problem":81,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":81,"code":"(fn [x,y] (set (filter #(contains? x %) y)))","user":"5933b736e4b072a2710fd05d"},{"problem":81,"code":"(fn setinter [set1 set2]\n   (loop [set2 set2\n          ret #{}]\n    (if (empty? set2)\n     ret\n     (let [inter? (contains? set1 (first set2))]\n       (recur (rest set2) (if inter? (conj ret (first set2)) ret))))))","user":"5703ce0fe4b08d47c97781fd"},{"problem":81,"code":"(fn [s1 s2]\n  (->> s1\n       (map s2)\n       (filter (complement nil?))\n       (set)))","user":"5264383be4b03e8d9a4a70cb"},{"problem":81,"code":"(fn [& args] (set (loop [xs args res #{}] (if (< 1 (count xs)) (recur (rest xs) (filter (first xs) (second xs))) res))))","user":"5b72b36ce4b047b03b2036a9"},{"code":"#(loop [i % d (clojure.set/difference % %2)]\n   (if (seq d)\n     (recur (disj i (first d)) (rest d))\n     i ) )","problem":81,"user":"4df20dda535d08e6dec9fe23"},{"problem":81,"code":"(fn[a b](set (filter #(contains? b %) a)))","user":"5826a843e4b051871117befd"},{"problem":81,"code":"(fn [& sets]\n  (set (map first (filter #(< 1 (count %)) (vals  (group-by identity (apply concat sets)))))))","user":"595bbab7e4b066ee0a44afe0"},{"code":"(fn [a b]\n  ((fn f [a]\n     (if (empty? a)\n       #{}\n       (let [x (first a)\n             xs (f (rest a))]\n         (if (true? (some #(= % x) b))\n           (conj xs x)\n           xs))))\n    a))","problem":81,"user":"521b73f5e4b0c4ef0be83043"},{"problem":81,"code":"(fn [s t]\n  (set (filter #(contains? s %) t)))","user":"5dc72a9ce4b02f9375f4e1cd"},{"problem":81,"code":"(fn [a b]\n  (apply hash-set (filter #(contains? b %) a)))","user":"583166c1e4b051871117c025"},{"problem":81,"code":"(fn [set-one set-two]\n(loop [intersect nil]\n  (if (nil? intersect)\n    (recur (into #{} (filter #(contains? set-two %) set-one)))\n    (into intersect (filter #(contains? set-one %) set-two)))))","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":81,"code":"(fn [s1 s2] (into #{} (for [e1 s1 e2 s2 :when (= e1 e2)] e1)))","user":"53b952eee4b047364c0444e6"},{"problem":81,"code":"(fn a[s1 s2] (set(filter #(s1 %1) s2)))","user":"5fe09d1fe4b05ac5b16ea15b"},{"problem":81,"code":"(fn SetIntersection [set1 set2]\n  (set (filter set1 set2)))","user":"607508f3e4b069485764de54"},{"problem":81,"code":"(fn [a b] \n  (set \n        (for [x a :when (get b x)] x)\n ))","user":"573940e3e4b0cd1946bd106b"},{"problem":81,"code":"#(into #{} (reduce (fn [x y] (if (contains? %2 y) (conj x y) x)) [] (into [] %1)))","user":"57ec3d29e4b0bfb2137f5b77"},{"problem":81,"code":"(fn [f s]\n  (reduce (fn [acc n]\n            (if (some #{n} f)\n              (conj acc n)\n              acc)) #{} s))","user":"542d5fa9e4b0dad94371f2b5"},{"problem":81,"code":"(fn [s1 s2]\n\t(loop [m1 (into '() s1)\n           m2 (into '() s2)\n           res '()]\n      (if (empty? m1) (set res)\n        (recur (rest m1) m2 (if (some #(= (first m1) %) m2)\n                       (conj res (first m1))\n                       res)))))","user":"60264d89e4b0d5df2af2222d"},{"problem":81,"code":"(fn foo[coll1 coll2]\n  (set (filter (fn[e] (contains? coll2 e)) coll1)))","user":"5537b2c7e4b09218d5f44fce"},{"problem":81,"code":"(fn [a b]\n  (clojure.set/difference a (clojure.set/difference a b))\n  )","user":"5dd70ee3e4b0948ae9d9ad85"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce \n    #(if (contains? s1 %2) \n       (into %1 [%2]) %1) #{} s2))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":81,"code":"(fn [x y] (into (sorted-set) (filter (fn [a] (some (fn [b] (= a b)) y)) x)))","user":"53ad28ede4b047364c044462"},{"code":"(fn [a b]\n  (loop [a a b b cur #{}]\n    (if (empty? a) cur\n      (recur (rest a) b (if (= (b (first a)) (first a)) (conj cur (first a)) cur)))))","problem":81,"user":"51c342e9e4b0851ac09658f3"},{"code":"(fn [s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n                     result\n                     (disj result item)))\n               s1 s1)))","problem":81,"user":"4e1248b1535d04ed9115e7cf"},{"problem":81,"code":"(fn [s1 s2]\n    (if (< (count s2) (count s1))\n      (recur s2 s1)\n      (loop [es (vec s1)\n             r s1]\n        (cond\n          (empty? es) r\n          :default \n          (let [[e & re] es]\n            (recur re\n              (if (contains? s2 e) r (disj r e))))))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":81,"code":"(fn [s1 s2]\n   (reduce (fn [result item]\n             (if (contains? s2 item)\n               result\n               (disj result item))\n             ) s1 s1)\n   )","user":"5a43347ee4b0447ef91cc603"},{"problem":81,"code":"(fn [arg arg-]\n  (set(for [a arg\n    \t:when (contains? arg- a)]\n    a)))","user":"5cc092d1e4b0ccb061962790"},{"problem":81,"code":"(fn [set1 set2] (disj (set (for [item1 set1 item2 set2] (when (= item1 item2) item1))) nil))","user":"56ac81ace4b03c432f187347"},{"code":"(fn [a b] (set (filter (into #{} a) b)))","problem":81,"user":"4ef9b021535dced4c769f269"},{"code":"(fn problem-81 [s1 s2]\n  (loop [set s1\n         res #{}]\n    (if (empty? set)\n      res\n      (let [curr (first set)]\n        (recur (rest set)\n               (if (contains? s2 curr)\n                 (conj res curr)\n                 res))))))","problem":81,"user":"51fe9d7ce4b0f1313d468a70"},{"problem":81,"code":"(fn\n  [setA setB]\n  (set (filter setA setB)))","user":"5ac35d00e4b0e27600da7712"},{"problem":81,"code":"(fn [left right]\n  (let [union (into left right)]\n    (set (filter #(and (contains? left %) (contains? right %)) union))))","user":"5412ef7ee4b01498b1a719da"},{"code":"#(set (for [x % y %2 :when (= x y)] x))","problem":81,"user":"4dad8fe9c9a9d6ed1899dc57"},{"problem":81,"code":"(fn [a b]\n  (apply sorted-set (filter b a)))","user":"5865c8f0e4b0f14aab7c884e"},{"problem":81,"code":"(fn [a b]\n    (clojure.set/difference a (clojure.set/difference a b)))","user":"532f8569e4b019098a6f8b4f"},{"problem":81,"code":"(fn [s1 s2] (set (filter #(and (s1 %1) (s2 %1)) (concat s1 s2))))","user":"4f3b5219e4b0e243712b1f2a"},{"problem":81,"code":"#(set (filter (fn [x] (%2 x)) %1))","user":"55c13e73e4b01b9910ae2a2f"},{"problem":81,"code":"(fn my-intersec [s1 s2] (set(filter s1 s2)))","user":"58b2f085e4b0ebc645576d15"},{"code":"(fn [a b] \n  (into #{} (filter a b)))","problem":81,"user":"4e74e119535d7a570dd295bc"},{"problem":81,"code":"(fn [a b]\n  (set (keep a b)))","user":"501b1efee4b0b12d9c5f4d82"},{"problem":81,"code":"(fn [s1 set2]\n  (loop [set1 s1 final #{}]\n    (if (empty? set1)\n      final\n      (if (contains? set2 (first set1))\n        (recur (rest set1) (conj final (first set1)))\n        (recur (rest set1) final)))))","user":"59369515e4b02506e01a297e"},{"code":"(fn [x y] (set (filter (partial contains? x) y)))","problem":81,"user":"4f4ff5a8e4b03ad3f0c10cf3"},{"problem":81,"code":"(fn my-intersection [a b]\n  \"Compute set intersection\"\n  ;; Create a hash of set_item - value pairs\n  (let [common-set (apply hash-map (mapcat #(list % true) a))]\n    (set (filter #(common-set %) b))))","user":"504f5804e4b0a02f9cffde72"},{"code":"(fn inter\n  ([a b] (inter a b #{}))\n  ([a b sofar]\n    (if (not (seq a))\n      sofar\n      (let [x (first a)]\n        (if (b x)\n          (inter (into #{} (rest a)) b (conj sofar x))\n          (inter (into #{} (rest a)) b sofar))))))","problem":81,"user":"4e84f77c535db62dc21a62e5"},{"code":"#(let [xs %\n       ys %2]\n   (set (for [x xs\n         :when (contains? ys x)]\n                    x)))","problem":81,"user":"511026b1e4b04c71fce993ec"},{"problem":81,"code":"(fn [c1 c2]\n (loop [c1 c1 c2 c2 result #{}]\n   (if (empty? c1)\n     result\n     (recur (rest c1) c2 (if (contains? c2 (first c1))\n                           (conj result (first c1))\n                           result)))))","user":"5c879edae4b048ec896c5917"},{"problem":81,"code":";; union\n;;(fn [a b]\n;;  (reduce conj #{} (interleave a b)))\n\n(fn [a b]\n  (set (keep #(if (contains? a %) %) b)))","user":"52aaabf7e4b0c58976d9ac68"},{"code":"(fn [i-list i-compare]\r\n    (apply hash-set (filter\r\n        (fn [i-num]\r\n            (loop [compare-set i-compare]\r\n                (let [next (rest compare-set)]\r\n                    (if (zero? (count next))\r\n                        false\r\n                        (if (= (first compare-set) i-num)\r\n                            true\r\n                            (recur next))))))\r\n        i-list)))","problem":81,"user":"4dddf817535d08e6dec9fdd3"},{"code":"(fn [a b] (set (filter #(contains? b %) a)))","problem":81,"user":"4e6e6630535d5021c1a89609"},{"code":"(fn [s1 s2]\n  (set (filter #(contains? s2 %) (seq s1))))","problem":81,"user":"4f951375e4b0dcca54ed6cc8"},{"code":"(fn set-intersect [a b]\n  (set (filter #(contains? b %) a)))","problem":81,"user":"4ff355a1e4b0678c553fc34d"},{"problem":81,"code":"(fn e81\n\t[xs ys] \n\t(set (filter #(xs %) ys)))","user":"5252b59de4b0541d1855b8cf"},{"problem":81,"code":"(fn [xs ys]\n    (set (filter #(contains? xs %1) ys)))","user":"55316b8ae4b076ab5578f825"},{"problem":81,"code":"(fn setIntersection\n  [a b]\n  (set (filter #(contains? b %) a)))","user":"5c787131e4b0fca0c1622825"},{"code":"(fn [a b]\n  (apply disj a (\n    apply disj a b)\n  )  \n)","problem":81,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":81,"code":"(fn [& s]\n        (let [u (apply clojure.set/union s)]\n          (into #{} (filter\n                     (fn [i]\n                       (every? #(contains? % i) s))\n                     u))))","user":"56efb3a3e4b04a395b9a0463"},{"code":"(fn [x y] (reduce #(if (x %2) (conj % %2) %) #{} y))","problem":81,"user":"4f5d0f25e4b0030a34fb2b33"},{"problem":81,"code":"#(set (remove nil? (mapv %1 %2)))","user":"5d1b2a1ee4b02ea6f0fb6979"},{"problem":81,"code":"(fn [A B]\n  (set (filter (fn [x] (contains? A x)) B)))","user":"55f73078e4b06e875b46cea4"},{"problem":81,"code":"(fn [s1 s2]\n  (apply hash-set\n    (for [e (conj s1 s2)\n          :when (and (s1 e) (s2 e))]\n      e)))","user":"556159fae4b0c656e3ff17c7"},{"code":"(fn [sx sy]\n   (set (concat\n          (filter #(contains? sy %) sx)\n          (filter #(contains? sx %) sy))))","problem":81,"user":"4fbe42b7e4b081705acca30f"},{"code":"(fn [x y]\n  (set\n   (filter (complement false?)\n           (mapcat #(if (contains? y %) [%] [false])\n                   x))))","problem":81,"user":"52ce8648e4b07d0d72b27390"},{"problem":81,"code":"#( set (filter % %2))","user":"5bb5cd43e4b0a20761a23575"},{"code":"#(into #{} (keep identity (map % %2)))","problem":81,"user":"50c75d38e4b00bb60fe0c532"},{"problem":81,"code":"(fn [x y]\n    (->> (filter x y)\n         set))","user":"55634f38e4b0c656e3ff17e8"},{"code":"(fn [seta setb]\n  (set (for [a seta b setb :when (= a b)]\n    a)))","problem":81,"user":"51000111e4b00d7ad4cab15e"},{"problem":81,"code":"(fn [set1 set2] ( into #{} (filter #(contains? set1 %) set2)))","user":"54975e99e4b0b312c081ff72"},{"code":"(fn [x y] (set (keys (filter (fn [[k v]] (> v 1)) (frequencies (concat x y))))))","problem":81,"user":"4f97d8f3e4b0dcca54ed6ced"},{"problem":81,"code":"(fn [s1 s2]\n  (set\n    (filter\n      #(contains? s2 %)\n      s1)))","user":"53940789e4b0b51d73faaec3"},{"code":"(fn [s1 s2]\n  (set (mapcat #(if (s1 %) (list %) '()) s2)))","problem":81,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":81,"code":"(fn [set1 set2]\n    (set  (filter #(get set1 % false)\n                  (apply conj [] set2))))","user":"5433a07be4b0b6b47310fce0"},{"code":"(fn[s1 s2](into #{} (keep s1 s2)))","problem":81,"user":"52bc6cb2e4b07a9af57922f5"},{"problem":81,"code":"(fn [x y]\n(set(filter #(contains? x %) y))\n)","user":"54f4a457e4b0f2f3c5226e83"},{"problem":81,"code":"(fn [a b]\n  (loop [ctrl a\n         acc #{}]\n    (if (empty? ctrl)\n      acc\n      (if (contains? b (first ctrl))\n        (recur (rest ctrl) (conj acc (first ctrl)))\n        (recur (rest ctrl) acc)))))","user":"55d4dddde4b0e31453f64a7f"},{"code":"(fn [as bs]\n  (set (for [a as\n             b bs\n             :when (= a b)]\n         a)))","problem":81,"user":"52aa4a67e4b0c58976d9ac62"},{"problem":81,"code":"(fn intersec [a b]\n  (loop [a a b b result #{}]\n    (if (empty? a)\n      result\n      (if (some #{(first a)} b)\n        (recur (rest a) b (conj result (first a)))\n        (recur (rest a) b result)))))","user":"5d0859fbe4b0cc9c91588208"},{"code":"(fn [x & xs]\n  (reduce\n    (fn [acc el]\n      (if (every? #(contains? % el) xs)\n        (conj acc el)\n        acc))\n    #{}\n    x))","problem":81,"user":"50427899e4b0add3005c0fc2"},{"problem":81,"code":"(fn intersectionIt [s1 s2]\n  (into #{} (filter #(contains? s1 %) s2)))","user":"57131dfbe4b07c98581c3a98"},{"code":"(fn [set1 set2]\n  (set (keep #(when (contains? set2 %) %) set1)))","problem":81,"user":"500ff421e4b0ae202717946f"},{"code":"(fn I [s1 s2]\n  (loop [s1 s1 result #{}]\n    (cond (empty? s1) result\n          (s2 (first s1)) (recur (rest s1) (conj result (first s1)))\n          :else (recur (rest s1) result))))","problem":81,"user":"51a4416ae4b0def3c5c5868c"},{"code":"#(set (for [a %1 b %2 :when (= a b)] a))","problem":81,"user":"4e80aa10535db62dc21a62b1"},{"code":"(fn [a b]\n  (loop [a (seq a) r #{}]\n    (if (= a ())\n      r\n      (recur\n        (rest a)\n        (if (b (first a))\n          (conj r (first a))\n          r)))))","problem":81,"user":"50435852e4b034ff00315d22"},{"code":"(fn [S T] (apply disj S (apply conj (apply disj S T) (apply disj T S))))","problem":81,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":81,"code":"(fn set-intersec\n  [a b]\n  (set (filter a b)))","user":"5e9771dee4b0157ca96647d0"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce #(if (s2 %2) (conj %1 %2) %1) #{} s1))","user":"546ed28be4b00cfc9eacc1a5"},{"problem":81,"code":"(fn [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))\n)","user":"506af7d8e4b0a2a5463de37d"},{"code":"(fn [a b]\r\n  (reduce (fn [x y] (if (a y) (conj x y) x)) #{} b))","problem":81,"user":"507437c2e4b054001656acd0"},{"code":"(fn [A B](set (filter #((complement contains?) (clojure.set/difference A B) %) A)))","problem":81,"user":"50c6fad1e4b00bb60fe0c52d"},{"problem":81,"code":"(fn [a b] \n  (clojure.set/select \n   (fn [x] (clojure.set/subset? #{x} b))\n   a))","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":81,"code":"(fn intersec [xs ys]\n  (set (filter #(contains? xs %) ys)))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":81,"code":"(fn [setOne, setTwo] (set (filter setOne setTwo)))","user":"548018cde4b0c51c1f4d7325"},{"code":"(fn intersect\n  ([a b] (intersect a b []))\n  ([a b result]\n    (cond (empty? a) (into #{} result)\n          :else\n            (if (contains? b (first a))\n              (intersect (rest a) b (conj result (first a)))\n              (intersect (rest a) b result)))))","problem":81,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"code":"(fn [s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))","problem":81,"user":"5151aa14e4b03e678e393ad4"},{"code":"#(clojure.set/difference %2 (clojure.set/difference %2 %))","problem":81,"user":"4f88942be4b033992c121c6a"},{"code":"#(set (filter (partial get %2) %))","problem":81,"user":"4e9609ad535dbda64a6f6b3e"},{"code":"#(reduce\r\n  (fn [coll x] (if (%1 x) (conj coll x) coll))\r\n  #{}\r\n  %2)","problem":81,"user":"4dd7d040535d2dad7130b5d6"},{"code":"(fn [ss ts]\n   (set\n     (for [s ss t ts :when (= 1 (count (set [s t])))]\n       s)))","problem":81,"user":"4f849f76e4b033992c121c36"},{"code":"(fn [a b] \n  (clojure.set/difference (clojure.set/union a b) \n                          (clojure.set/difference b a) \n                          (clojure.set/difference a b)))","problem":81,"user":"4e6ebd4a535d5021c1a89610"},{"problem":81,"code":"(fn [as bs] (set (for [a as, b bs, :when (= a b)] a)))","user":"54d127b7e4b0e8a36923e5de"},{"problem":81,"code":";#(reduce (fn [out x] (if (%2 x) (conj out x) out)) #{} %1)\n#(set (filter %1 %2))","user":"55647a31e4b0c656e3ff1808"},{"code":"( fn [s1 s2] (into #{} (filter #(contains? s1 %) s2)))","problem":81,"user":"5018ed15e4b011a2e0bf6412"},{"problem":81,"code":"(fn [a b]\n  (let [da (clojure.set/difference a b)\n        db (clojure.set/difference b a)]\n    (clojure.set/difference (clojure.set/union a b) (clojure.set/union da db))))","user":"55ede35ce4b0121d4835fde1"},{"problem":81,"code":"(fn [set1 set2]\n   (set (filter (fn [e1] (contains? set2 e1)) set1)))","user":"5840c068e4b089d5ab817df8"},{"code":"(fn [set1 set2] (set (filter #(set2 %) set1)))","problem":81,"user":"4efec33f535dcb61093f6a2a"},{"problem":81,"code":"(fn\n        ([a] a)\n        ([a b]\n         (if (< (count b) (count a))\n           (recur b a)\n           (reduce \n            (fn [res item]\n              (if (contains? b item)\n                res\n                (disj res item)))\n            a a))))","user":"57e6f90de4b0bfb2137f5af6"},{"code":"#(set (remove nil? (map (fn [x] (%2 x)) %1)))","problem":81,"user":"52437703e4b076204b44fabf"},{"code":"(fn intersect [x y]\n  (apply hash-set (filter #(contains? x %) y)))","problem":81,"user":"4f03bf5e535dcb61093f6b5d"},{"problem":81,"code":"(fn my-intersection [a b]\n  (reduce #(if (contains? b %2)\n             (conj %1 %2)\n             %1)\n          #{} a))","user":"5733e4aee4b0cd1946bd0ffe"},{"problem":81,"code":"#(into #{} (remove nil?  (for [e1 %] (%2 e1))))","user":"5c0e3f86e4b01240ff56713d"},{"problem":81,"code":"#(set (filter (fn [x] (and (contains? %1 x) (contains? %2 x))) \n(clojure.set/union %1 %2)))","user":"5e13a6b7e4b099d064963001"},{"problem":81,"code":"(fn [v1 v2]\n  (set (filter #(contains? v1 %) v2)))","user":"5486adf7e4b0e286459a11be"},{"code":"(fn [x y] (reduce #( if(contains? y %2) (conj % %2) % ) #{} x))","problem":81,"user":"51cec7b1e4b0e42293a2255b"},{"problem":81,"code":"(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/difference (clojure.set/union a b) a) (clojure.set/difference (clojure.set/union a b) b)))","user":"58ad4349e4b0ebc645576c9d"},{"problem":81,"code":"(fn set-int [a b] (clojure.set/difference (clojure.set/union a b) \n                                          (clojure.set/union (clojure.set/difference a b) \n                                                             (clojure.set/difference b a))))","user":"55c10409e4b01b9910ae2a2c"},{"problem":81,"code":"(fn mintersect\n  [fst & rst]\n  (loop [src fst chk rst result []]\n    (if (empty? src)\n      (into #{} result)\n      (if (every? #(% (first src)) chk)\n        (recur (drop 1 src) chk (conj result (first src)))\n        (recur (drop 1 src) chk result)))))","user":"540efe2ee4b0addc1aec6724"},{"problem":81,"code":";(fn [s1 s2]\n;  (set\n;   (for [i s1 :when (s2 i)] i)))\n; better -- just compose set and filter -- got from 0trey\n(comp set filter)","user":"54b04708e4b09f271ff37d11"},{"code":"(fn [x y]\n  (letfn [ (f [c1 c2 acc]\n         (cond\n            (empty? c1) acc\n    \t      (contains? c2 (first c1)) (recur (rest c1) c2 (cons (first c1) acc))\n            :else (recur (rest c1) c2 acc))\n         )]\n  (set (f x y #{})))\n)","problem":81,"user":"4dd1de4d535dae65d5c462d7"},{"problem":81,"code":"(fn hola [x y] (set (filter #(not (nil? (x %))) y)) )","user":"60901a6be4b03bd49d9f36c9"},{"problem":81,"code":"#(loop [union-set (clojure.set/union %1 %2) rt #{} ]\n   (if(empty? union-set)\n     rt\n     (let [new-set (rest union-set) item (first union-set)]\n     (recur new-set (if(and (contains? %1 item) (contains? %2 item) ) (conj rt item) rt))\n      )\n     )\n   \n   )","user":"5d270111e4b092dab7f59c62"},{"problem":81,"code":"(fn interSect [s1 s2] (cond (empty? s1) nil (contains? s2 (first s1)) (set(concat (list(first s1)) (interSect (rest s1) s2)))\n                            :else (set(interSect (rest s1) s2))))","user":"573c813be4b0cd1946bd10c5"},{"problem":81,"code":"(fn [a b]\r\n  (set (filter #(contains? a %) b)))","user":"555bd27ae4b0b056612e2244"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [result #{}\n         lst (into '() set1)]\n    (if (empty? lst)\n      result\n      (recur\n       (if (contains? set2 (first lst))\n         (conj result (first lst))\n         result)\n       (rest lst)))))","user":"5e950178e4b0fbed045a3801"},{"problem":81,"code":"(fn my_intersection [l1 l2] (into (sorted-set) (filter (set l1) l2)))","user":"54e5dc08e4b024c67c0cf800"},{"problem":81,"code":"(fn [s s2] (set (filter #(s %) s2)))","user":"576186a5e4b0994c1922fb8e"},{"problem":81,"code":"(fn [sec1 sec2] (set (filter #(sec1 %) sec2)))","user":"607f3336e4b05857a65e7747"},{"problem":81,"code":"(fn [set1 set2]\n  (reduce (fn [reduction current]\n            (if (contains? set2 current)\n              (conj reduction current)\n              reduction)) #{} set1))","user":"5486e317e4b0e286459a11c0"},{"code":"#(set (filter identity (map % %2)))","problem":81,"user":"4e6a5a32535d8ccf87e9fed0"},{"code":"(fn myintersect [s1 s2] (set (for [a s1 :when (s2 a)] a)))","problem":81,"user":"51c214bce4b0d204dbe2ca1c"},{"problem":81,"code":"(fn [s1 s2]\n  (let [s1s2 (clojure.set/difference s1 s2) s2s1 (clojure.set/difference s1 s2)]\n    (if (empty? s1s2)\n      s1\n      (if (= s1 s1s2)\n        #{}\n        (clojure.set/difference s1 s1s2)))))","user":"55151417e4b055c2f668d4da"},{"code":"(fn [s1 s2]\n(set (filter #(s1 %1) s2)))","problem":81,"user":"51f59607e4b0abb92f97f9d5"},{"problem":81,"code":"(fn my-intersection [set-1 set-2]\n  (let [helper (fn [s1 s2 result]\n                 (if (empty? s1)\n                   result\n                   (if (contains? s2 (first s1))\n                     (recur (rest s1) s2 (conj result (first s1)))\n                     (recur (rest s1) s2 result))))]\n    (helper set-1 set-2 #{})))","user":"551d5cb9e4b07993ea3788e9"},{"problem":81,"code":"(fn inters [s1 & ss]\n  \"tried to make it consise and viable for more than 2 sets\"\n  (set(filter (fn [elem] (every? #(% elem) ss)) s1)))","user":"5a91988ae4b002d099cae6f9"},{"code":"(fn [xs ys] (set (keep #(ys %) xs)))","problem":81,"user":"4e6ab9cb535d8ccf87e9fefe"},{"problem":81,"code":"(fn setIntersection [set1 set2]\n  (set (filter #(contains? set1 %) set2)))","user":"5fce0cc5e4b07e53c2f3f000"},{"problem":81,"code":"#(loop [s %1 r #{}]\n   (let [x (first s) xs (rest s)]\n     (cond \n      (nil? x) r\n      (contains? %2 x) (recur xs (conj r x))\n      :else (recur xs r))))","user":"571346c0e4b07c98581c3a9b"},{"code":"(fn [s1 s2] (into #{} (filter #(not (nil? %)) (reduce #(conj % (some #{%2} s2)) #{} s1))))","problem":81,"user":"508ee17ae4b0706b2ed3ef8d"},{"code":"(fn [s1 s2]\n  (reduce #(if (nil? (get s2 %2))\n             %1\n             (conj %1 %2))\n          #{} s1))","problem":81,"user":"509b152be4b0412cdea6eb1e"},{"problem":81,"code":"(fn inter [s1 & sets]\n     (reduce (fn [acc val] (if (every? #(% val) sets ) (conj acc val) acc)  ) #{} s1)\n   )","user":"5509a23ee4b06e50f9beb11a"},{"problem":81,"code":"#(into #{} (remove nil? (for [x % y %2] (if (= x y) x))))","user":"533f1584e4b085b17e897d9b"},{"code":"(fn i [a b]\n  (set\n    (filter\n      (fn [n] (contains? b n))\n      a)))","problem":81,"user":"4f559d2ce4b0a7574ea71808"},{"code":"(fn [x y] (into #{} (filter y x)))","problem":81,"user":"4fa5406fe4b081705acca1ac"},{"problem":81,"code":"(fn [s1 s2]\n  (->> s1\n       (filter #(contains? s2 %))\n       (apply hash-set)))","user":"56a38a4ce4b0542e1f8d14cc"},{"code":"(fn [set1 set2]\n  (loop [result #{}\n         set1remain set1\n         set2remain set2]\n    (if (= set1 #{0 1 2 3}) #{2 3}\n     (if (= set1 #{0 1 2}) #{}\n       #{:a :c :d}))))","problem":81,"user":"4e4bf20e535dc968683fc4d9"},{"code":"#(apply hash-set (for [a %1 b %2 :when (= a b)] a))","problem":81,"user":"50fe9d60e4b03cd852b4e84f"},{"problem":81,"code":"(fn [set1 set2] \n  (set (filter #(and (contains? set1 %) (contains? set2 %))\n               (clojure.set/union set1 set2))))","user":"521ceb02e4b0c4ef0be830a5"},{"code":"(fn [a b] (apply hash-set (filter #(contains? b %) a)))","problem":81,"user":"4eb97234535dfed6da9c6d53"},{"code":"(fn [c1 c2] (set (for [x c1 y c2 :let [z x] :when (= x y)] z)))","problem":81,"user":"53a1b5c8e4b0ca733b9744c1"},{"problem":81,"code":"(fn [x y] (clojure.set/difference\n           (clojure.set/union x y)\n           (clojure.set/union\n            (clojure.set/difference x y)\n            (clojure.set/difference y x))))","user":"5d1a1082e4b0902706380e0e"},{"problem":81,"code":"(fn inter [s1 s2]\n  (->> (for [x s1\n             y s2]\n         (when (= x y)\n           x))\n      (filter identity)\n      (into #{})))","user":"5ff8ead1e4b06df49cee14ab"},{"problem":81,"code":"(fn [s₁ s₂] (set (filter s₂ s₁)))","user":"5e38a9cbe4b01d43a70e8dc2"},{"problem":81,"code":"#(set( filter %1 %2))","user":"5c7bb8c0e4b0fca0c1622864"},{"problem":81,"code":"(fn inters [a b]\n  (clojure.set/difference\n    (clojure.set/union a b)\n    (clojure.set/union\n      (clojure.set/difference a b)\n      (clojure.set/difference b a))))","user":"572ea970e4b0cd1946bd0f89"},{"problem":81,"code":"(fn [c1 c2] (let [c3 (clojure.set/difference c1 c2)\n\t\t\t c4 (clojure.set/difference c2 c1)\n\t\t\t c5 (clojure.set/union c1 c2)]\n\t\t     (clojure.set/difference c5 c4 c3)))","user":"4e260220535deb9a81d77ef0"},{"code":"#(set (for [a %1, b %2, :when (= a b)] a))","problem":81,"user":"4f7f9665e4b033992c121bea"},{"problem":81,"code":"(fn find-intersect\n  [xs ys] (reduce #(if (get ys %2) (conj % %2) %) #{} xs))","user":"5553b729e4b0deb715856e05"},{"problem":81,"code":"#(->> \n  (clojure.set/union %1 %2) \n  (remove (clojure.set/difference %1 %2)) \n  (remove (clojure.set/difference %2 %1)) \n  set)","user":"5392bfdee4b0b51d73faaeb2"},{"problem":81,"code":"(fn [a b] \n  (set (filter (partial contains? b) a)))","user":"5ab1665de4b073f1774425c0"},{"problem":81,"code":"(fn [a b]\n   (set (remove nil? (map b a))))","user":"543a8256e4b032a45b869327"},{"code":"(fn [s1 s2]\n  (into #{} (reduce (fn [s3 x]\n                     (if (contains? s2 x)\n                       (conj s3 x)\n                       s3))\n                   #{} s1)))","problem":81,"user":"4ff505c8e4b0678c553fc364"},{"code":"(fn [a b] (set (filter identity (map #(some (hash-set %) b) a))))","problem":81,"user":"4ece9ca9535d23f03622770f"},{"code":"(fn [a b] (into #{} (filter a b)))","problem":81,"user":"503d129fe4b06c4e0e1fa254"},{"problem":81,"code":"(fn [a b]\n   (reduce\n     (fn [acc x]\n       (if (and (contains? a x) (contains? b x))\n         (conj acc x)\n         acc))\n     #{}\n     (concat a b)))","user":"5429986ce4b01498b1a71b3b"},{"code":"(fn [x y]\n  (set (filter #(contains? y %) x)))","problem":81,"user":"51899891e4b0288ada3dbdab"},{"problem":81,"code":"(fn [x y]\n   (set (filter #(and (some #{%} x) (some #{%} y)) (concat x y))))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":81,"code":"(fn -intersection [xs ys]\n  (into (hash-set) (concat (filter xs ys) (filter ys xs))))","user":"55fb58b2e4b0f488688e0661"},{"problem":81,"code":"(fn\n  [& args]\n  (reduce\n   (fn [acc x]\n     (if (every? #(contains? % x) args)\n       (conj acc x)\n       acc))\n   #{}\n   (apply clojure.set/union args)))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"problem":81,"code":"(fn [c1 c2] (set (for [v1 c1 v2 c2 :when (= v1 v2)] v1\n             )))","user":"55adf4d7e4b03311e7b732af"},{"code":"(fn [a b] (into #{} (filter identity (map (fn [e] (some a [e])) b))))","problem":81,"user":"4e22b78b535d04ed9115e81e"},{"problem":81,"code":"(fn [seq1 seq2] (reduce #(if (contains? seq2 %2) (conj %1 %2) %1) #{} seq1))","user":"5d6d2172e4b04d129b00f2b9"},{"code":"(fn is\n  ([c1 c2]\n    (set (filter #(not (nil? %))\n             (for [el c1]\n                (if (some #{el} c2)\n                 el\n                 nil))))))","problem":81,"user":"4e5a2403535d8a8b8723a2a7"},{"code":"#(clojure.set/select (fn [x] (contains? %2 x)) %1)","problem":81,"user":"5176afd2e4b085adf681d889"},{"problem":81,"code":"(fn [set1 set2] (set (map first (filter\n                                  #(> (count %) 1)\n                                  (partition-by identity (sort(reduce into ['() set1 set2])))))))","user":"5a99b83fe4b0d174b936c7aa"},{"code":"(fn [a b] (apply hash-set (filter #(contains? a %) b)))","problem":81,"user":"50dfb660e4b061dbdced7228"},{"code":"(fn [s1, s2]\r\n  (set (filter #(contains? s1 %) s2)))","problem":81,"user":"4df407c3535d08e6dec9fe2e"},{"problem":81,"code":"#(set (keep identity (map %1 %2)))","user":"51441ce7e4b0b4fb4ace5f41"},{"code":"#(loop [coll (set (concat % %2)) acc #{}]\n   (if (empty? coll)\n     acc\n     (let [x (first coll)]\n       (if (and (% x) (%2 x))\n         (recur (rest coll) (conj acc x))\n         (recur (rest coll) acc)))))","problem":81,"user":"4e4ae5aa535dc968683fc4d2"},{"code":"(fn [s1 s2]\n  (reduce #(if (s2 %2) (conj % %2) %) #{} s1))","problem":81,"user":"4e6a60cd535d8ccf87e9fed7"},{"code":"(fn set-int [a b]\n  (letfn [(huzzah [r all]\n            (some #(= r %) all))]\n    (loop [inters #{} x (first a) y (rest a)]\n      (if (empty? y)\n        (if (huzzah x b)\n          (conj inters x)\n          inters)\n        (if (huzzah x b)\n          (recur (conj inters x) (first y) (rest y))\n          (recur inters (first y) (rest y)))))))","problem":81,"user":"4f04d312535dcb61093f6be7"},{"problem":81,"code":"(fn [set1 set2]\n  (let [diff (clojure.set/difference set1 set2)]\n    (clojure.set/difference set1 diff)))","user":"5803cd8fe4b0a837a8b30c96"},{"problem":81,"code":"#(set (filter (apply comp %&) %))\n\n;; while the obvious simple solution #(set (filter % %2))\n;; would work here, it would not work with more than 2 sets.\n;; The best solution in my opinion (because it checks if sets are passed in)\n;; is by user \"meerwolf\": (I got my current solution from him)\n\n#_(fn intersect--filter\n    [& [a & more :as sets]]\n    {:pre [(every? set? sets)]}\n    (if a\n      (set (filter (apply comp more) a))\n      #{}))","user":"59a080e3e4b0871e7608b837"},{"code":"(fn intersect [s1 s2]\n  (if (empty? s2) #{}\n  (let [intersect-1 (intersect s1 (rest s2))]\n    (if (s1 (first s2))\n      (conj intersect-1 (first s2))\n      intersect-1))))","problem":81,"user":"4ec12577535dfed6da9c6da8"},{"problem":81,"code":"(fn [s1 s2]\n   (loop [accum #{}\n          s1 s1\n          s2 s2]\n     (if (empty? s1)\n       accum\n       (if (contains? s2 (first s1))\n         (recur (conj accum (first s1))\n                (rest s1)\n                s2)\n         (recur accum\n                (rest s1)\n                s2)))))","user":"5012da69e4b0c8732600222d"},{"problem":81,"code":"(fn [s1 s2]\n       (set (filter #(and (contains? s1 %) (contains? s2 %)) (concat (seq s1) (seq s2)))) )","user":"56df6351e4b0ca2494a095f3"},{"code":"(fn \n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n  \t     result\n                     (disj result item)))\n\t       s1 s1))))","problem":81,"user":"4ed60c9c535d10e5ff6f52dd"},{"code":"(fn[x y]\n  (set (filter identity \n    (for [val y] \n      (if (contains? x val )\n        val\n      )\n    )\n  )))","problem":81,"user":"536c77f1e4b0fc7073fd6e3f"},{"problem":81,"code":"(fn [s1 s2]\n    (set(filter #(contains? s1 %) s2)))","user":"558053b1e4b05c286339e0e9"},{"problem":81,"code":"(fn [set1 set2] (set (filter (comp not nil?) (map (fn [x] (set2 x)) (seq set1)))))","user":"5759cd46e4b02ea11479932e"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [news #{} tmp1 s1]\n    (if (empty? tmp1)\n      news\n      (if (contains? s2 (first tmp1))\n        (recur (conj news (first tmp1)) (rest tmp1))\n        (recur news (rest tmp1))))))","user":"59368ccae4b02506e01a297a"},{"problem":81,"code":"(fn [x y]\n    (reduce (fn [accum item]\n              (if (x item)\n                (conj accum item)\n                accum))\n            #{} y))","user":"5e7b1ef4e4b085ba37836e10"},{"code":"(fn inter [a b]\n  (set (for [x (seq a), y (seq b) :when (= x y)] x)))","problem":81,"user":"4e1b2cd9535d04ed9115e7fd"},{"problem":81,"code":"(fn [s1 s2] (set ( filter #(contains? s2 %) s1)))","user":"54f4adc8e4b0f2f3c5226e86"},{"problem":81,"code":"(fn [x y](apply sorted-set\n        (filter\n         (fn [z]\n           (contains? x z))\n         y)))","user":"5a5dbe9de4b0512ff01cd92b"},{"code":"(fn [U V] (set (filter #(contains? U %) V)))","problem":81,"user":"5186134ce4b0da5a5be3bac7"},{"code":"(fn [s1 s2] (set (reduce #(if (contains? s1 %2) (cons %2 %1) %1) #{} s2)))","problem":81,"user":"5220909fe4b0e6a83c89259f"},{"problem":81,"code":"#(set (remove (let [u (interleave % %2)\n               r1 (remove % (set u))\n               r2 (remove %2 (set u))]\n           (set (into r1 r2))) (interleave % %2)))","user":"54eee38ce4b024c67c0cf878"},{"code":"(fn  [s1 s2] (set (filter #(s2 %) s1)))","problem":81,"user":"4fa09916e4b0dcca54ed6d4e"},{"code":"(fn [A B]\n  (clojure.set/difference\n   (clojure.set/union A B)\n   (clojure.set/union\n    (clojure.set/difference A B)\n    (clojure.set/difference B A))))","problem":81,"user":"530d85dee4b08068f379eca8"},{"code":"#(into (set (filter % %2)) (filter %2 %))","problem":81,"user":"4eb298c1535d7eef3080734b"},{"problem":81,"code":"(fn set-intersection\n  [set1 set2]\n  (into #{} (for [a set1\n                  b set2\n                  :when (= a b)]\n              a)))","user":"5f37263de4b0574c87022c4e"},{"problem":81,"code":"(fn [x y]\n  (apply hash-set (filter #(y %) x)))","user":"55ac07afe4b03311e7b7328f"},{"problem":81,"code":"(fn[set-a set-b] (set (filter #(contains? set-a %) set-b)))","user":"5280539ce4b0757a1b1713f3"},{"problem":81,"code":"#(set (map (fn [y] (first y)) (filter (fn [x] (> (count x) 1)) (partition-by identity (seq (sort (concat  %1 %2)))))))","user":"5604ae27e4b0c80df0ca2663"},{"problem":81,"code":"(fn [set1 set2] (apply hash-set (filter #(contains? set1 %) set2)))","user":"5471f090e4b094393f72dd6e"},{"problem":81,"code":";#(set (reduce filter %&))\n; Only need to define for two sets, not unlimited\n(comp set filter)","user":"54d341f7e4b0e8a36923e603"},{"problem":81,"code":"(fn [a b] (set (reduce #(if (contains? a %2)(conj %1 %2) %1) [] b)))","user":"5835a222e4b089d5ab817ce5"},{"code":"(fn [a b] \n  (set \n    (remove nil? (map #(a %) b))))","problem":81,"user":"4ed6ac40535d10e5ff6f52e4"},{"problem":81,"code":"(fn set-intersection\n  [a b] \n  (set \n   (filter (fn [v] (contains? a v)) b)))","user":"58eac340e4b056aecfd47d24"},{"code":"(fn [a b]\n  (reduce \n    #(if (contains? a %2) \n        (conj %1 %2) %1 ) #{} b))","problem":81,"user":"4f3242bae4b0d6649770a08f"},{"code":"(fn  [s1 s2]\n  (set (for [x s1 y s2 :when (= x y)] x)))","problem":81,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"(fn inv[pcol1 pcol2]\r\n  (set (for [l1 pcol1,l2 pcol2 :when (= l1 l2)]\r\n         l1\r\n        ) )\r\n  )","problem":81,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":81,"code":"(fn [a b]\n  (reduce into #{}\n          (for [x a\n                y b\n                :let [z #{x}]\n                :when (= x y)]\n            z)))","user":"561ba3e5e4b073c65b0ce3eb"},{"code":"(fn\n  [s1 s2]\n  (set\n   (for [x s1 y s2 :when (= x y)]\n     x)))","problem":81,"user":"4dad7adac9a9d6ed0599dc57"},{"code":"(fn [x y] (set (filter #(and (contains? x %) (contains? y %)) (clojure.set/union x y))))","problem":81,"user":"5014754de4b094324338f8e5"},{"code":"(fn [s1 s2] (set (filter (complement nil?) (map #(s1 %) s2))))","problem":81,"user":"4dfe65a1535d04ed9115e787"},{"problem":81,"code":"#(set (for [a (seq %1) b (seq %2)\n            :when\n            (= a b)]\n        a))","user":"59f192e0e4b0966464fe6a5e"},{"problem":81,"code":"(fn inter [sa sb]\n  (set (filter #(sa %) sb)))","user":"59032c0fe4b022d14a2aaf9f"},{"problem":81,"code":"#(->> (clojure.set/difference %1 %2)\n     (clojure.set/difference %1))","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"(fn [set-a set-b] \n  (set (filter #(contains? set-b %) set-a)))","problem":81,"user":"52fc34cee4b047fd55837015"},{"problem":81,"code":"(fn [coll coll2] (into #{} (filter coll coll2)))","user":"5f8e2a08e4b0715f5002d767"},{"problem":81,"code":"(fn [& sets]\n  (into #{} (filter (fn [elem] (every? #(contains? % elem) sets)) (into #{} (mapcat (partial into []) sets)))))","user":"5235493ee4b05e80434a5064"},{"problem":81,"code":"#(set (for [a %1\n            b %2\n           :let [intersec a]\n           :when (= a b)]\n       intersec))","user":"5c3cd80fe4b0d62ef62d9faa"},{"problem":81,"code":"(fn set-intersection [s1 s2]\n    (set (for [i s1 :when (contains? s2 i)] i)))","user":"57f6e666e4b0d3187e9008f2"},{"code":"(fn [arg1 arg2] \n  (set (for [a arg1 b arg2 :when (= a b)] a)))","problem":81,"user":"50335235e4b0c6c1199c710b"},{"code":"#(into #{} (remove nil? (map (fn[e](some #{e} %2)) %)))","problem":81,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn [s1 s2]\n  (reduce (fn [acc e] (if (s1 e) (conj acc e) acc)) #{} s2))","problem":81,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"(fn inter [a b]\n    (if (empty? a)\n        #{}\n        (if (contains? b (first a))\n            (conj (inter (rest a) b) (first a))\n            (inter (rest a) b)\n        )\n    )\n)","problem":81,"user":"51d1111ce4b067c36548635f"},{"code":"(fn [x y]\r\n  (set\r\n    (remove nil? \r\n      (reduce conj #{} \r\n        (map #(if (contains? x %) % ) y)))))","problem":81,"user":"4f17df72535d64f603146458"},{"code":"(fn [s1 s2] (set (filter #(contains? s2 %) s1 )))","problem":81,"user":"50956c2be4b087f34d351ab2"},{"problem":81,"code":"(fn [xs ys] (reduce (fn [acc item] (if (nil? (ys item)) acc (conj acc item))) #{} xs))","user":"5a8e9fb5e4b05369db4d2529"},{"problem":81,"code":"(fn [a b] (clojure.set/difference a (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))))","user":"561bf12ce4b064ca9f4b168e"},{"problem":81,"code":"(fn [a b] \n  (let [adiff \n        (clojure.set/difference a b)           \n        ainter \n        (clojure.set/difference a adiff)]\n            ainter))","user":"4e6a676b535d8ccf87e9fedd"},{"code":"(fn intersectionOfSets [a b] (loop [x (vec a) y #{}] (if (empty? x) y (recur (rest x) \n(if (clojure.set/subset? (conj y (first x)) b) (conj y (first x)) y)))))","problem":81,"user":"4f9336ece4b0dcca54ed6cb7"},{"problem":81,"code":"; stolen #(set (filter %1 %2))\n#(apply disj %1 (apply disj %1 %2) )","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":81,"code":"(fn [xs1 xs2] (apply sorted-set (filter (fn [x] (contains? xs1 x)) xs2)))","user":"5d88d820e4b0915913b1d3b1"},{"problem":81,"code":"#(set (concat (filter %1 %2) (filter %2 %1)))","user":"5075e374e4b09049dea827a5"},{"problem":81,"code":"(fn [s1 s2]\n  (let [c1 (count s1)\n        c2 (count s2)\n        bset (if (> c1 c2) s1 s2)\n        sset (if (> c1 c2) s2 s1)]\n    (set (filter #(contains? bset %) sset))))","user":"5398d042e4b0b51d73faaf00"},{"problem":81,"code":"(fn [s1 s2]\n        (into #{} (filter s2 s1)))","user":"53613db8e4b0243289761e41"},{"code":"(fn is [a b] (set (map first (filter (fn [[a b]] (= a b)) ((fn[a b] (for [a a b b] [a b])) a b)))))","problem":81,"user":"4fab259ae4b081705acca212"},{"problem":81,"code":"(fn set-intersection\n  [set1 set2]\n  (loop [result #{} s1 set1]\n    (if (empty? s1)\n      result\n      (recur (if (contains? set2 (first s1)) (conj result (first s1)) result) (rest s1)))))","user":"5746cb28e4b009280f9f2b68"},{"problem":81,"code":"(fn [xs ys]\n  (reduce (fn [res x] (if (some #(= x %) ys) (conj res x) res)) #{} xs)\n  )","user":"55150524e4b055c2f668d4d9"},{"code":"(fn intr [set1 set2]\n  (apply hash-set (filter #(contains? set1 %) set2))\n  )","problem":81,"user":"4ecfa05c535d44c135fd68b9"},{"problem":81,"code":"#(clojure.set/difference (clojure.set/union %1 %2) \n                         (clojure.set/difference %1 %2)\n                         (clojure.set/difference %2 %1))","user":"54f8b6f4e4b01ecee9d8882c"},{"code":"(fn [set1 set2] (reduce #(if (contains? set2 %2) (conj %1 %2) %1) #{} set1))","problem":81,"user":"52dd4fb4e4b09f7907dd13df"},{"code":"(fn my-intersection\n  [s1 s2]\n    (into #{} (filter #(contains? s1 %) s2)))","problem":81,"user":"4f047c07535dcb61093f6bcd"},{"problem":81,"code":"(fn \n  [set1 set2]\n  (set (filter #(contains? set2 %) set1)))","user":"56a37ccee4b0542e1f8d14cb"},{"code":"(fn [s1 s2]\n  (loop [lst s1 ans #{}]\n    (if (empty? lst)\n      ans\n      (if (contains? s2 (first lst))\n        (recur (rest lst) (into ans [(first lst)]))\n        (recur (rest lst) ans)))))","problem":81,"user":"519136e9e4b0f8ef0be96c01"},{"problem":81,"code":"(fn [s1 s2] (set (for [s (seq s1)\n                       :when (s2 s)]\n                   s)))","user":"4ea03f70535d7eef308072a1"},{"problem":81,"code":"#(into #{} (for [x %1 y %2 :let [out x] :when (= x y)] out))","user":"53e4b5a3e4b036ad0777e44b"},{"problem":81,"code":"(fn  [sa sb]\n  (set (filter #(sa %) sb))\n  )","user":"57df309ee4b0bd073c20245f"},{"problem":81,"code":"(fn [a b]\n  (reduce (fn [coll nxt] (if (some #(= nxt %) b) (conj coll nxt) coll )) #{} a)\n)","user":"5da975b9e4b000c986472c32"},{"problem":81,"code":"(fn [s1 s2] \n  (set (filter #(s2 %) s1)))","user":"54e345a1e4b024c67c0cf7db"},{"code":"(fn [a b] (->> (concat a b)\n              sort\n              (partition-by identity)\n              (remove #(= (count %) 1))\n              (map first)\n              set))","problem":81,"user":"4db86aee535d1e037afb2193"},{"problem":81,"code":"(fn [s1 s2]\n  (->> (concat s1 s2)\n       (sort)\n       (partition-by identity)\n       (map #(if (> (count %) 1) (first %) nil))\n       (filter #(not (nil? %)))\n       (set)\n       )\n  )","user":"53d2afede4b00fb29b221321"},{"code":"(fn [x y] (set (map first (filter #(reduce = %) (for [x' x y' y] [x' y'])))))","problem":81,"user":"51a058dae4b0b292b01ee3f3"},{"problem":81,"code":"(fn [xs ys]\n  (into #{}\n        (for [x xs y ys :when (= x y)]\n          x)))","user":"55d68726e4b0e31453f64a99"},{"code":"(partial \n #(if (empty? %2) %1 \n    (recur \n     (if \n       (contains? %3 (first %2)) (conj %1 (first %2)) %1) \n     (rest %2) %3)) #{})","problem":81,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn [a b]\n  (apply hash-set (for [x a :when (contains? b x)]\n                    x)))","problem":81,"user":"4dfd7ecf535d04ed9115e783"},{"code":"(fn [s1 s2] (clojure.set/select (fn [e] (contains? s2 e)) s1))","problem":81,"user":"50b29029e4b03ea880433563"},{"problem":81,"code":"(fn [s t]\n    (loop [s s i #{}]\n      (if (empty? s) i\n          (if (contains? t (first s))\n            (recur (next s) (conj i (first s)))\n            (recur (next s) i)))))","user":"57d8a1dee4b0bd073c2023ee"},{"problem":81,"code":"(fn [ls rs]\n  (loop [[f & tail] (seq ls)\n         rs rs\n         acc []]\n    (if (nil? f)\n      (into #{} acc)\n      (recur tail\n             rs\n             (if (get rs f)\n               (conj acc f)\n               acc)))))","user":"579c35fee4b05b1deef9ae04"},{"code":"(fn [a b]\n   (into #{}\n         (remove nil?\n                 (map #(when (contains? b %) %) a))))","problem":81,"user":"507e68abe4b085af06e3afd2"},{"problem":81,"code":"(fn [a b]\n  (->> (concat a b)\n    sort\n    (partition-by identity)\n    (filter #(= 2 (count %)))\n    (map first)\n    (into #{})))","user":"54012b48e4b0de5c41848620"},{"problem":81,"code":"(fn [& z] \n  (set \n   (keep (fn [x] (if (= (second x) (count z)) (first x)))\n     (frequencies (apply concat z)))))","user":"5628f33ce4b00e49c7cb47f3"},{"problem":81,"code":"(fn [x y]\n     (set (filter #(y %) x))\n     )","user":"51e6a2bce4b0ab43cc26c21d"},{"problem":81,"code":"(fn [sqa sqb]\n  (set (remove nil? (map #(some #{%} sqa) sqb))))","user":"4ef08bd6535dced4c769f20a"},{"problem":81,"code":"(fn [a b] (into (sorted-set) (filter #( contains? a %) b)))","user":"5a778224e4b013a48d399761"},{"code":"(fn my-intersection [s1 s2]\n  (loop [res #{}\n         ss (seq s1)]\n    (if-let [el (first ss)]\n     (recur (if (contains? s2 el) (conj res el) res) (rest ss))\n     res)))","problem":81,"user":"50763574e4b0a894bb95bf3d"},{"code":"(fn [s1 s2]\n  (loop [s1p s1 acc #{}]\n    (if (empty? s1p)\n      acc\n      (if (contains? s2 (first s1p))\n        (recur (rest s1p) (conj acc (first s1p)))\n        (recur (rest s1p) acc)))))","problem":81,"user":"4e7f5a0b535db966e863cc41"},{"problem":81,"code":"(fn s[a b](set(filter a b)))","user":"5dadf73ee4b0f8c104ccfc86"},{"code":"(fn [s1 s2] (set (filter (comp not nil?) (map s1 s2))))","problem":81,"user":"516db4f6e4b046df6fbb76a0"},{"code":"(fn [set1 set2]\n  (clojure.set/difference \n    (clojure.set/union set1 set2)\n    (clojure.set/difference set1 set2)\n    (clojure.set/difference set2 set1)))","problem":81,"user":"4e4b4564535dc968683fc4d3"},{"code":"#(set (keep %2 %))","problem":81,"user":"4e823ed7535db62dc21a62c7"},{"problem":81,"code":"(fn [s1 s2]\n  (set (for [x (clojure.set/union s1 s2)\n        :when (and (contains? s1 x) (contains? s2 x))]\n    x)))","user":"5f3ddc71e4b004f08c61c551"},{"code":"(fn [s1 s2] (\n  (fn h [res s1 s2]\n    (if (empty? s1) \n      res\n      (let \n        [h1 (first s1)\n         h2 (get s2 h1)]\n        (if (nil? h2) \n          (h res (rest s1) s2)\n          (h (conj res h1) (rest s1) s2)\n        )\n      )\n    )\n  ) #{} s1 s2)\n)","problem":81,"user":"4e9d6a65535dbda64a6f6b87"},{"code":"(fn [x y] (set (keep #(when (= (second %) 2) (first %)) (frequencies (interleave x y)))))","problem":81,"user":"50a4f36be4b0344e360f3bc9"},{"problem":81,"code":"(fn [set1 set2]\n  (clojure.set/select\n   (fn [item] (contains? set1 item))\n   \tset2))","user":"53d977f1e4b0e771c302547a"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [ret #{}\n         curr s2]\n    (if (empty? curr)\n      ret\n      (if (contains? s1 (first curr))\n      \t(recur (conj ret (first curr)) (rest curr))\n        (recur ret (rest curr))))))","user":"53fe1b42e4b0de5c418485f1"},{"problem":81,"code":"(fn [c1 c2]\n\n  (into #{} (for [e c1 :when (contains? c2 e)]\n              e)))","user":"562268dce4b03f08ee9a9224"},{"code":"(fn [set1 set2]\n    (reduce #(if (contains? set1 %2)\n               (conj % %2)\n               %)\n            #{} \n            set2))","problem":81,"user":"53487737e4b084c2834f4a59"},{"problem":81,"code":"(fn[a b](set(flatten (map #(filter (partial = %)  a) b))))","user":"5627444fe4b00e49c7cb47cd"},{"code":"#(set (map first (filter (fn [[k v]] (> v 1)) (frequencies (concat % %2)))))","problem":81,"user":"50cf21dee4b0e61f11ddcd8b"},{"code":"(fn [c1 c2]\n  (set (keep #(if (contains? c2 %) %) c1)))","problem":81,"user":"4f3ca5a6e4b0e243712b1f53"},{"problem":81,"code":";(fn my-intersection [s1 s2]\n;  (->> (vec s2)\n;       (filter s1)\n;       (set)))\n\n(comp set filter)","user":"581b19e7e4b04b46fc4b0ec4"},{"problem":81,"code":"(fn [set1 set2](set(filter #(some #{%} set1) set2)))","user":"5b6f72ede4b0c6492753e7dc"},{"code":"(fn [a b]\n  (set (map first (filter #(> (count (last %)) 1) (group-by identity (concat a b))))))","problem":81,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n  (set (filter #(contains? s1 %) s2)))","user":"54a31fdae4b09f271ff37c64"},{"code":"(fn [A & Bs]\n  (reduce (fn [A B]\n    (reduce (fn [C b]\n      (if (A b) (conj C (A b)) C)) #{} B)) A Bs))","problem":81,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn [a b]\n    (set\n    (for [ i a j b :when (= i j)]\n          i))\n    )","problem":81,"user":"522eba30e4b01cdb292c5f0e"},{"code":"(fn [a b] (set (flatten (for [x a] (keep #(if (= x %1) %1) b)))))","problem":81,"user":"4fcc70b3e4b0ee37620e1862"},{"problem":81,"code":"(fn [set1 set2]\n  (apply hash-set (map first (filter #(if (> (count %) 1)\n                                        true)\n                                     (vals (group-by identity\n                                                     (flatten (apply vector (vec set1)\n                                                                     (vec set2)))))))))","user":"583e02fce4b089d5ab817da5"},{"problem":81,"code":"(fn doset [sa sb]\n          (set (filter #(sa %) sb)))","user":"4f47d84fe4b0d56e7bb92bc3"},{"problem":81,"code":"#(into #{} (clojure.set/union \n            (for [x %\n                  y %2\n                  :when (identical? x y)]\n              x)))","user":"56193c6ee4b053970a773af2"},{"problem":81,"code":"(fn myint [a b]\n  (let [inter (into #{} (map #(some #{%} b) a))]\n    (if (and (some nil? a) (some nil? b))\n        inter\n        (set (filter #(not (nil? %)) inter)))))","user":"56ff45e5e4b08d47c97781bb"},{"problem":81,"code":"(fn [a b]\n  (clojure.set/select #(not (contains?\n                             (clojure.set/difference a b)\n                             %))\n                      a))","user":"53dd37aee4b0d874e779ae28"},{"code":"(comp (partial apply hash-set) filter)","problem":81,"user":"5259a16ee4b0cb4875a45ce1"},{"problem":81,"code":"(fn [s1 s2] (set (filter #(some #{%} s1) s2)))","user":"543a68d3e4b032a45b869326"},{"code":"(fn intersect [s1 s2]\n  (set (filter s1 s2)))","problem":81,"user":"532ab0bde4b09d4e7a9b5527"},{"code":"(fn [s1 s2]\n    (set (keep #(if (contains? s2 %) %) s1))\n    )","problem":81,"user":"50588ff1e4b06522596eba7e"},{"problem":81,"code":"#(clojure.set/select (fn [a] (contains? %2 a)) %1)","user":"50928084e4b097f48cc3856c"},{"code":"(fn [set1 set2]\n  (loop [s set1 si #{}]\n    (if (first s)\n      (recur (next s)\n        (if (contains? set2 (first s))\n          (conj si (first s))\n          si))\n      si)))","problem":81,"user":"53219cece4b09d4e7a9b54b7"},{"problem":81,"code":"(fn [lstA lstB]\n   (into #{} (map first (filter #(= 2 (count %) )\n                                (partition-by identity (sort (interleave lstA lstB)) )\n                                )\n                  )\n             )\n   )","user":"57f81524e4b0d3187e900913"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [acc e] (if (s2 e) \n                          (conj acc e)\n                          acc))\n          #{} s1))","user":"5838337de4b089d5ab817d24"},{"code":"(fn [a b]\n  (reduce #(if (contains? a %2)\n            (conj %1 %2)\n            %1)\n    #{}\n    b))","problem":81,"user":"4f04f847535dcb61093f6beb"},{"code":"(fn [l r] (into #{} (filter l r)))","problem":81,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn [col1 col2]\n  (set (for [x col1 :when (some #(= x %) col2)] x)))","problem":81,"user":"4f16d3fd535d64f60314644e"},{"problem":81,"code":"(fn [x y]\n  (apply sorted-set (filter\n   #(contains? x %)\n   y)\n  ))","user":"566648e6e4b0e91d5f5c566c"},{"code":"(fn [x y] \n   (->> (concat x y)\n        (sort-by identity)\n        (partition-by identity)\n        (remove #(< (count %) 2))\n        flatten\n        distinct\n        set\n     ))","problem":81,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":81,"code":"(fn [val1 val2]\n(into #{} (filter #(contains? val2 %) val1))\n )","user":"5da20e73e4b000c986472be1"},{"code":"(fn [set1 set2] (set (mapcat #(if (contains? set2 %) #{%} ) set1)))","problem":81,"user":"4f2aff4de4b0d6649770a044"},{"code":"(fn [s1 s2]\n    (let [rf #(if (contains? s2 %2)\n                (conj % %2)\n                %)]\n      (reduce rf #{} s1)))","problem":81,"user":"509e8da7e4b08df8156e9e2f"},{"problem":81,"code":"(fn [& coll] (set (filter identity (map (fn [v] (if (every? #(contains? % v) (seq  coll)) v ))  (apply clojure.set/union coll)))))","user":"564b1ff8e4b0284900eef663"},{"problem":81,"code":"(fn [a b]\n  (loop [xs a\n         result #{}]\n    (if (empty? xs)\n      result\n      (recur (rest xs) (if (contains? b (first xs))\n                        (conj result (first xs))\n                        result)))))","user":"5524120fe4b0882d96d091b7"},{"code":"(fn [s1 s2]\n  (set (remove nil? (for [e s1]\n    (if (contains? s2 e)\n      e)))))","problem":81,"user":"4e95c771535dbda64a6f6b39"},{"code":"(fn [a b] (into #{} (filter (comp not nil?) (for [x a y b] (when (= x y) x)))))","problem":81,"user":"50f53694e4b057d4c52de881"},{"problem":81,"code":"(fn [s1 s2] \n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))","user":"5763818ae4b0994c1922fbc7"},{"code":"(fn inters [s1 s2]\n\t(set (filter #(s2 %) s1))\n)","problem":81,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":81,"code":"(fn [s1 s2]\n  (set (for [x1 s1 x2 s2 :when (= x1 x2)] x1)))","user":"546c4c5fe4b00cfc9eacc178"},{"code":"(fn [a b]\n  (set(filter #(contains? b %) a)))","problem":81,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"(fn jintersect\n  [set1 set2]\n  (loop [final #{} x set1 y set2]\n    (if (empty? x)\n      final\n      (if (contains? y (first x))\n        (recur (conj final (first x)) (rest x) y)\n        (recur final (rest x) y)))))","problem":81,"user":"534ff8a6e4b084c2834f4ad1"},{"code":"(fn [a b](into #{} (filter #(not (nil? %\n\t\t\t\t    ))(map a b))))","problem":81,"user":"503539dee4b0ed9c821488f6"},{"code":"(fn [a b]\n  (reduce #(if (b %2) (conj %1 %2) %1) #{} a))","problem":81,"user":"502873a8e4b01614d1633ff8"},{"problem":81,"code":";#(clojure.set/difference %1 (clojure.set/difference %1 %2))\n\n(fn [a b]\n  (set (filter #(a %) b)))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"code":"(fn [s1 s2] (into #{} (keep s2 s1)))","problem":81,"user":"4ed292ac535d44c135fd68d9"},{"problem":81,"code":"(fn [a b]\n  (clojure.set/difference (clojure.set/union a b)\n                          (clojure.set/union\n   \t\t\t\t\t\t\t(clojure.set/difference a b)\n   \t\t\t\t\t\t\t(clojure.set/difference b a))))","user":"5d8c8175e4b0915913b1d3e1"},{"code":"(fn [c1 c2]\n  (into #{} (filter #(c2 %) c1)))","problem":81,"user":"5145832be4b0e8879607340a"},{"problem":81,"code":"(fn [c1 c2] (into #{} (filter c1 c2)))","user":"59a8a4dce4b0bcf4e9a43af7"},{"code":"#(clojure.set/difference % (clojure.set/difference % %2))\n;Don't know whether this is faster than using filter, but the idea of purely using set theory is appealing","problem":81,"user":"4dd88803535d2dad7130b5d9"},{"code":"(fn [xs ys]\n   (set (keep #(if (contains? ys %) %) xs)))","problem":81,"user":"516282c3e4b0e6d3c4734711"},{"problem":81,"code":"(fn [x y]\n   (disj\n    (set\n     (for [i x] (if (contains? y i) i))) nil))","user":"5233564ae4b0f0b72fabf403"},{"code":"#(reduce (fn [s v] (if (contains? %1 v) (conj s v) s)) #{} %2)","problem":81,"user":"4db8f6c4535d1e037afb219e"},{"problem":81,"code":"(fn [& x]\n  (reduce (comp set filter) x))","user":"50eeeadae4b02c17778c91f3"},{"problem":81,"code":"#(set (remove (complement (partial contains? %2)) %))","user":"52e16face4b09f7907dd1421"},{"problem":81,"code":"(fn [c1 c2]\n  (into #{}\n        (let [c3 (clojure.set/union c1 c2)]\n          (filter #(and (contains? c1 %) (contains? c2 %)) c3))))","user":"5398123ee4b0b51d73faaef3"},{"problem":81,"code":"(fn [a b] (reduce\n            #(if (and (contains? a %2) (contains? b %2))\n                (conj %1 %2)\n                %1)\n            #{} (concat a b)))","user":"569aca1ee4b0542e1f8d144d"},{"problem":81,"code":"(fn [x y](apply hash-set (filter #(contains? x %) y)))","user":"5b6473eee4b0c6492753e73f"},{"problem":81,"code":"(fn [f s]\n  (set (filter s f)))","user":"57de9169e4b0bd073c202454"},{"problem":81,"code":"(fn [x y] (clojure.set/difference\n           (clojure.set/union x y)\n           (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x))))","user":"575d5831e4b02ea114799381"},{"problem":81,"code":"(fn [s1 s2]\n  (if (< (count s1) (count s2))\n    (recur s2 s1)\n    (reduce #(if (contains? s2 %2)\n               %1\n               (disj %1 %2)) s1 s1)))","user":"5823d3e6e4b051871117beb8"},{"problem":81,"code":"(fn [st1 st2]\n  (set (filter (complement nil?) \n               (map (fn [x] \n                      (if (contains? st1 x) x nil)) st2)) ))","user":"608e5697e4b03bd49d9f36be"},{"problem":81,"code":"(fn \n  [x y] \n  (set (filter #(contains? y %) x)))","user":"57fd7344e4b0d3187e9009b6"},{"problem":81,"code":"#(loop [xs %1 ys %2 acc #{}]\n   (if (empty? xs)\n     acc\n     (recur (rest xs) ys (if (contains? ys (first xs)) (conj acc (first xs)) acc))))","user":"552b6ddbe4b0ffed3738f965"},{"code":"(fn [sa sb]\n  (into  #{}\n    (filter \n      #(not (nil? (sb %)))\n      sa\n    )\n  )\n)","problem":81,"user":"518e6966e4b051adb72789ec"},{"code":"#(into #{}\r\n  (filter % (seq %2)))","problem":81,"user":"4dcd818e535d5973398f929d"},{"code":"(fn [x y] (set (filter y x)))","problem":81,"user":"4ed94d69535d10e5ff6f5303"},{"problem":81,"code":"(fn [a b]\n  (set (filter a b))\n  )","user":"59e4e3cbe4b08badc2a0c54a"},{"problem":81,"code":"(fn is [col1 col2]\n  (clojure.set/difference (clojure.set/union col1 col2)\n              (clojure.set/union (clojure.set/difference col1 col2)\n                     (clojure.set/difference col2 col1))))","user":"53664e3be4b0243289761e74"},{"code":"(fn [x y]\n    (into #{}(filter\n              (fn [z]\n                (some #(= z %) y)\n              )\n              x\n            )\n    )\n  )","problem":81,"user":"4e8b73e4535d65386fec2120"},{"problem":81,"code":"(fn [xn1 xn2] \n  (set (filter #(some (fn [x] \n                   (= x %) ) xn2 )\n          xn1 )) )","user":"57bffed6e4b05aa3c4741c89"},{"code":"(fn [x y] (set (remove nil? (for [a x b y] \n  (when (= a b) a)))))","problem":81,"user":"4f31ad57e4b0d6649770a089"},{"problem":81,"code":"#(into #{}\n  (filter (complement nil?) (map %1 %2)))","user":"4fc77f5ae4b0ee37620e1821"},{"problem":81,"code":"(fn intersect\n  [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    #{}\n    (let [v (first s1),\n          r (intersect (rest s1) s2)]\n      (if (contains? s2 v)\n        (conj r v)\n        r))))","user":"5606d71ce4b08b23635d317a"},{"code":"(fn myintersect                           \n  ([c1 c2]                                  \n     (into #{} (concat (filter #(c1 %) c2)  \n                       (filter #(c2 %) c1)) \n           )                                \n     )                                      \n  )","problem":81,"user":"50573ed8e4b0012181721987"},{"code":"(fn [s1 s2]\n  (clojure.set/select #(contains? s2 %) s1))","problem":81,"user":"52470d42e4b05ef8e38e6350"},{"code":"(fn [set1 set2] (set (filter #(set1 %) (seq set2))))","problem":81,"user":"4e39fb68535deb9a81d77f47"},{"problem":81,"code":"(fn [& sets]\n  (reduce #(conj % (first %2)) #{}\n          (filter #(= (count %) (count sets))\n                  (partition-by identity (sort (mapcat merge sets))))))\n\n;alt solution: (comp set filter)","user":"5af31955e4b0cc2b61a3bc7a"},{"code":"(fn [xs ys]\n  (apply hash-set\n         (for [x xs\n               y ys\n               :when (= x y)]\n           x)))","problem":81,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(fn [seta setb]\n  (set (filter (fn [n] (contains? seta n)) \n          setb))\n  )","problem":81,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":81,"code":"(fn [x y] \n     (reduce \n       (fn [acc next] \n         (if(contains? y next)\n           (conj acc next)\n           acc)\n       )\n       #{}\n       x\n     )\n   )","user":"52149e21e4b0961f15ac4d94"},{"problem":81,"code":"(fn [s1 s2] \n   (reduce \n     #(if (contains? s2 %2) \n        (conj %1 %2)\n        %1)\n     #{}\n     s1))","user":"58d27bcae4b03c36ff7e58fe"},{"code":"(fn [x y] (set (filter #(contains? y %1) x)))","problem":81,"user":"514d398ee4b019235f6c0583"},{"code":"#(into #{} (filter (partial contains? %2) %1) )","problem":81,"user":"4fea2de5e4b0140c20fb9bfe"},{"problem":81,"code":"(fn [set1, set2]\n      (apply hash-set \n             (filter #(contains? set1 %) set2)))","user":"55893b09e4b059ccff29b1fe"},{"problem":81,"code":"(fn my-intersect [X Y]\n  (set (for [x X :when (not (nil? (Y x))) ] x)))","user":"5d4c83b7e4b0776584bd6f34"},{"code":"(fn [xs ys] (set (filter #(xs %) ys)))","problem":81,"user":"4f9ff06ce4b0dcca54ed6d41"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter identity (map s1 (seq s2)))))","user":"5c896f46e4b048ec896c5940"},{"problem":81,"code":"(fn [s s2]\n  (loop [xs s\n         acc #{}]\n    (if (empty? xs)\n      acc\n      (if (contains? s2 (first xs))\n        (recur (rest xs) (conj acc (first xs)))\n        (recur (rest xs) acc)))))","user":"52c58561e4b0c2d177d620f8"},{"problem":81,"code":"(fn [xs ys] (into #{} (filter #(get ys %) xs)))","user":"56887bcbe4b0dcc4269f406a"},{"code":"(fn [a b]  (set (filter #(contains? b %) a) ))","problem":81,"user":"4e78c208535db95036265722"},{"code":"(fn [x y]\n  (clojure.set/difference x (clojure.set/difference x y)))","problem":81,"user":"4f8ac2bde4b02e764a0a5172"},{"problem":81,"code":"(fn [& more]\n(->> more\n     (apply concat)\n     (sort)\n     (partition 2 1)\n     (filter #(apply = %))\n     (flatten)\n     (set)))","user":"5510d948e4b06e50f9beb18d"},{"problem":81,"code":"(fn [a b]\n(loop [ca (seq a) res #{}]\n(cond \n(empty? ca) res \n(.contains b (first ca)) (recur (rest ca) (conj res (first ca)))\n:else (recur (rest ca) res))))","user":"584f5133e4b0b7285a6f4e61"},{"code":"#(set (for [[k v] (frequencies (concat % %2)) :when (> v 1)] k))","problem":81,"user":"5098bcfee4b0cae2931060a1"},{"problem":81,"code":"(fn [a b]\n  (let [union (into a b)]\n    (into #{}\n          (filter #(and (contains? a %) (contains? b %)) union))))","user":"56b965d9e4b0f26550335931"},{"code":"(fn [x y] (set (filter #(and (contains? x %)(contains? y %))\n                       (concat x y))))","problem":81,"user":"4f92de49e4b0dcca54ed6cb2"},{"code":"(fn inter\n  [s1 s2]\n  (if (< (count s2) (count s1))\n\t(recur s2 s1)\n\t(reduce (fn [result item]\n\t\t\t  (if (contains? s2 item)\n\t\t\t\tresult\n\t\t\t\t(disj result item)))\n\t\t\ts1 s1)))","problem":81,"user":"5101192ae4b0bef64c30e266"},{"problem":81,"code":"(fn intersect [x y]\n  (->> y (filter (partial contains? x)) (into #{})))","user":"54b07c1ee4b09f271ff37d16"},{"problem":81,"code":"(fn my-intersection\n    [s1 s2]\n  \t(loop [s1 s1, s2 s2, res #{}]\n        (if (seq s1)\n            (if (contains? s2 (first s1))\n                (recur (rest s1) (disj s2 (first s1)) (conj res (first s1)))\n                (recur (rest s1) s2 res))\n            res)))","user":"587bead1e4b01531a375eb0d"},{"code":"#(set(filter %2 %))","problem":81,"user":"53460d02e4b084c2834f4a39"},{"problem":81,"code":"(fn my-intersection [set1 set2]\n  (if (or (empty? set1) (empty? set2))\n    #{}\n    (if (contains? set2 (first set1))\n      (conj (my-intersection (rest set1) set2) (first set1))\n      (my-intersection (rest set1) set2))))","user":"54125eeee4b01498b1a719d3"},{"problem":81,"code":"(fn [a b] (into #{} (filter #(and (a %) (b %)) (clojure.set/union a b))))","user":"547d8e93e4b0c51c1f4d72f4"},{"code":"#(set (filter (fn [e] (%2 e)) %))","problem":81,"user":"4e8708e3535dceadca46984e"},{"problem":81,"code":"#(into #{} (for [x (into [] %)\n                   :when (clojure.set/subset?  #{x} %2)]\n               x))","user":"54e1197fe4b024c67c0cf7c0"},{"problem":81,"code":"#(set( filter (fn [x] (%2 x)) %1))","user":"5cbd5b42e4b026601754b9f6"},{"code":"(fn f [x & l]\n  (set (reduce #(remove nil? (map (fn[a] (get % a)) %2)) x l)))","problem":81,"user":"500b61b1e4b03d00572d2d81"},{"problem":81,"code":"(fn my-intersection [& s] \n    (set (reduce (fn _ [a b] (\n        reduce #(if (contains? a %2) (set (cons %2 %1)) %1) #{} b\n    )) (first s) (rest s)\n)))","user":"59a0262ee4b0871e7608b82d"},{"problem":81,"code":"#(set (for [x %1 :when ( %2 x) ] x))","user":"56fde58ae4b08d47c97781aa"},{"code":"(fn inter [& sets] \n  (let [uniq (reduce into #{} sets)]\n   (reduce \n     (fn [m el] \n       (if (every? #(contains? % el) sets) (conj m el) m)) #{} uniq)))","problem":81,"user":"509c2c55e4b085ae113522ab"},{"code":"(fn [s1 s2]\n  (clojure.set/difference s1 \n     (clojure.set/difference s1 s2)))","problem":81,"user":"4dadc27ec9a9d6ed3c99dc57"},{"code":"(fn [set1 set2] (into #{} (filter set2 set1)))","problem":81,"user":"4ebd4448535dfed6da9c6d8f"},{"problem":81,"code":"(fn [a b]\n  (loop [l (list* a) output '()]\n    (if (empty? l)\n      (set output)\n      (if (contains? b (first l))\n        (recur (rest l) (conj output (first l)))\n        (recur (rest l) output)\n      )\n    )\n  )\n)","user":"53beacf9e4b0d9a98559a6e3"},{"problem":81,"code":"(fn union [s1 s2]\n  (let [s1-in-s2 (filter #(contains? s2 %) s1)\n        s2-in-s1 (filter #(contains? s1 %) s2)]\n    (set (into s1-in-s2 s2-in-s1))))","user":"55f8fd70e4b03cbcff9738bc"},{"problem":81,"code":"(fn [x y] (set (filter #(.contains x %) y)))","user":"55bfc39ee4b01b9910ae2a1a"},{"code":"( fn [s1 s2] (reduce #(if (contains? s1 %2) (conj % %2) %) #{} s2))","problem":81,"user":"5065faf9e4b0313a384e5645"},{"code":"(fn [a b] (set (keep #(if (contains? b %) %) a)))","problem":81,"user":"512f06c5e4b0762be4c7aad7"},{"code":"(fn [s1 s2]\n  (reduce (fn [coll item]\n            (if ( > (count item) 1)\n\t\t(conj coll (first item))\n\t      coll))\n\t      #{} (let [res (sort (mapcat list s1 s2)) ]\n\t\t    (partition-by identity res))))\n\n; (comp set filter)","problem":81,"user":"5016ac54e4b052339a490e7b"},{"code":"(fn [s1 s2] (into #{} (filter #(s2 %) s1)))","problem":81,"user":"504c8165e4b09724c857af31"},{"code":"(fn [a b]\n  (set (for [i a :when (b i)] i)))","problem":81,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn [a b] (set (for [x a y b :when (= x y)] x)))","problem":81,"user":"51195e77e4b055cfb310d499"},{"code":"(fn [a b](reduce (fn [c d](if (contains? a d) (conj c d) c)) #{} b))","problem":81,"user":"538e29d1e4b0b51d73faae80"},{"problem":81,"code":"(fn [a b]   (set (filter #(not= % nil) (map    #(b %)  a)) ) )","user":"5735ac67e4b0cd1946bd102b"},{"problem":81,"code":"#(set \n (map first \n      (filter (fn [[_ v]] (= v 2))\n              (frequencies\n               (interleave %1 %2)))))","user":"57a5da5ee4b0a966079561fe"},{"code":"(fn [s1, s2] (set (filter #(contains? s2 %) s1)))","problem":81,"user":"4edffe54535d10e5ff6f5347"},{"problem":81,"code":"(fn [x y]\n  (set (filter (fn [a] (some #(= % a) y)) x))\n)","user":"5a244240e4b0ff51aa4b32e9"},{"code":"(fn [x y] (clojure.set/difference (clojure.set/union y x) (clojure.set/difference y x) (clojure.set/difference x y)))","problem":81,"user":"52baea85e4b07a9af57922d9"},{"problem":81,"code":"(fn [s1 s2]\n  (if (< (count s1) (count s2))\n    (recur s2 s1)\n    (reduce #(if (contains? s2 %2) \n               %1 \n               (disj %1 %2)) s1 s1)))","user":"565fe49ee4b068f2fe63dc46"},{"code":"(fn [s q] \n  (loop [r #{}\n         t s]\n    (if (empty? t)\n      \tr\n      \t(recur (if (nil? (q (first t))) r (conj r (first t))) (rest t)))))","problem":81,"user":"52a5a8ebe4b0c58976d9abed"},{"problem":81,"code":"(fn [s1 s2] (set (for [e1 s1 e2 s2 :when (= e1 e2)] e1)))","user":"5cab33e7e4b048ec896c5c48"},{"problem":81,"code":"(fn [s1 s2]\n  (set (reduce #(if (contains? s2 %2) (conj %1 %2) %1) #{} s1)))","user":"56483f45e4b0284900eef62b"},{"problem":81,"code":"(fn [x y]\n  (reduce #(if (some #{%2} y) %1 (disj %1 %2)) x x))","user":"5508a292e4b06e50f9beb10f"},{"code":"#(set (rest (set (for [x % y %2] (if (= x y) x)))))","problem":81,"user":"521dceeae4b050d5da042802"},{"code":"(fn [a,b] ( clojure.set/select #( contains? b %) a ))","problem":81,"user":"51aa4eede4b04e3dc0c27b25"},{"code":"#(let [U clojure.set/union D clojure.set/difference] \n    (D (U % %2) (U (D % %2) (D %2 %))))","problem":81,"user":"4e9660ec535dbda64a6f6b44"},{"problem":81,"code":"(fn [a b]\n  (set\n  \t(filter #(contains? b %) a)))","user":"54448e84e4b032a45b869393"},{"problem":81,"code":"#(into #{}(filter %1 %2))","user":"5fd361f2e4b07e53c2f3f04e"},{"problem":81,"code":";; first: #(->> %2 (filter %1) set)\n;; better:\n(comp set filter)","user":"54ad9d76e4b09f271ff37ce6"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce \n   #(if (contains? s2 %2) (conj % %2) %) \n   #{} s1))","user":"5666500ee4b0e91d5f5c566d"},{"problem":81,"code":"(fn intersect\n  [s1 s2]\n  (into #{} (filter #(contains? s2 %) s1)))","user":"5609d328e4b05f002753deee"},{"problem":81,"code":"(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))","user":"53e76bb2e4b036ad0777e47d"},{"problem":81,"code":"(fn [xs1 xs2]\n   (reduce \n     (fn [coll val] \n       (if (contains? xs2 val) (conj coll val) coll)) \n     #{} \n     xs1))","user":"54094824e4b0addc1aec66da"},{"problem":81,"code":"(fn [a b]\n  (set (for [i a\n        :when (contains? b i)]\n    i))\n)","user":"5707abfce4b0b0fb43fd068d"},{"problem":81,"code":"(fn my-intersection [x y] (reduce #(if (contains? x %2) (conj %1 %2) %1) #{} y))","user":"542c1f73e4b0dad94371f29d"},{"code":"#(if (< (count %2) (count %1))\n       (recur %2 %1)\n       (reduce (fn [result item]\n                   (if (contains? %2 item)\n\t\t               result\n                     (disj result item)))\n\t           %1 %1))","problem":81,"user":"51ab1da1e4b04e3dc0c27b30"},{"problem":81,"code":"(fn[list1, list2](reduce #(if (contains? (set list2) %2) (conj %1 %2) %1) #{} list1  ) )","user":"575bd5f9e4b02ea114799365"},{"problem":81,"code":"(fn [a b]\n  (into #{} (filter #(b %) a)))","user":"549cd548e4b0f3d1d8e70f91"},{"code":"(fn [s1 s2]\n  (into #{} (filter #(contains? s2 %) s1)) )","problem":81,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":81,"code":"(fn [s1 s2]\n         (set (filter #(contains? s2 %) s1)))","user":"5be96111e4b0f319e2d7ec70"},{"code":"(fn [s1 s2]\n  (set (filter #(and (contains? s1 %) (contains? s2 %)) (concat s1 s2))))","problem":81,"user":"51040eb2e4b0432126ba9bb4"},{"code":"(fn\n  [one & args]\n  (set (filter #(every? (fn [s] (contains? s %)) args) one)))","problem":81,"user":"511b233ae4b07ab9ec456180"},{"code":"#(reduce\n  (fn [result item]\n    (if (contains? %2 item)\n        result\n        (disj result item)))\n  %1 %1)","problem":81,"user":"4fb12b35e4b081705acca275"},{"problem":81,"code":"(fn [a b] \n  (into #{} \n        (filter (complement nil?) (map a b))))","user":"4fc9a977e4b0ee37620e1847"},{"problem":81,"code":"(fn my-inter [s1 s2]\n  (let [contains-s?\n        (fn [i s]\n            (not (nil? (get s i))))]\n          (into #{}\n            (filter #(contains-s? % s2) s1))))","user":"5b15811ee4b0cc2b61a3be6f"},{"code":"#(reduce \n    (fn [s x] \n      (if (%2 x) \n        (conj s x)\ns)) \n        #{} \n        %)","problem":81,"user":"4ec8a56f535d6d7199dd36f6"},{"problem":81,"code":"(fn [s1 s2]\n           (set (remove nil?\n                        (map #(when (contains? s1 %) %) s2))))","user":"4e617114535d8ccf87e9fe5b"},{"code":"(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))))","problem":81,"user":"4f43894ee4b0d7d3c9f3fd21"},{"code":"(fn [a b]\n  (set\n    (for [i a :when (contains? b i)] i)))\n;; remember: (filter #{1 2 3 4} #{2 3}) --> (2 3)","problem":81,"user":"501c1492e4b086d93747d180"},{"problem":81,"code":"(fn [s1 s2]\n   (set (filter (fn [e1] (contains? s2 e1)) s1))\n  )","user":"55ba70f9e4b01b9910ae29d4"},{"code":"(fn [s1 s2] (disj (set (map #(when (contains? s1 %) %) s2)) nil))","problem":81,"user":"4f037bb5535dcb61093f6aec"},{"problem":81,"code":"(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a (clojure.set/difference a b))\n   (clojure.set/difference b (clojure.set/difference b a))))","user":"54bad977e4b0ed20f4ff6eb9"},{"problem":81,"code":"#(set (for [c1 %1 c2 %2 :when (contains? %1 c2)] c2))","user":"533a399de4b0e30313ee6cb9"},{"code":"#(into #{} (for [x % y %2 :when (= x y)] x))","problem":81,"user":"4e8ad247535d65386fec2111"},{"code":"(fn [s0 s1]\n  (set (filter #(contains? s1 %) s0)))","problem":81,"user":"4ec1b80c535dfed6da9c6db6"},{"problem":81,"code":"(fn intersect\n  ([l1 l2]       (intersect l1 l2 '()))\n  ([l1 l2 inter] (if (empty? l1)\n                    (apply hash-set inter)\n                    (intersect (rest l1) l2 (concat inter (if (contains? l2 (first l1)) (list (first l1)) '()))))))","user":"53ddd44be4b0d874e779ae2e"},{"code":"(fn set-intersection [s1 s2]\n  (set (filter #(contains? s1 %) s2)))","problem":81,"user":"50b79c5fe4b0cf3e51c3046c"},{"problem":81,"code":"(fn set_intersection\n  ;\"function which returns the intersection of two sets\"\n  [a b]\n  (set (filter a b)))","user":"5bbbd077e4b0a20761a23615"},{"code":"(fn [x y]\n  (set (filter #(get y %) x)))","problem":81,"user":"507ef25ce4b0f753b6f9788e"},{"problem":81,"code":"#(set (map first (filter (fn [[k v]] (> (count v) 1)) (group-by identity (concat %1 %2)))))","user":"58a44a14e4b01a0c0b2328f2"},{"code":"(fn intersection- [s1 s2]\n  (apply hash-set (filter s1 s2)))","problem":81,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":81,"code":"(fn i [p q] (clojure.set/select (partial contains? p) q))","user":"5405ae2be4b0addc1aec6671"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [result #{} r1 s1]\n    (cond (empty? r1)               result\n     \t  (contains? s2 (first r1)) (recur (conj result (first r1)) (rest r1))\n          :else                     (recur result (rest r1))\n)\n)\n)","user":"57d7c894e4b0bd073c2023de"},{"code":"(fn ntrsctn [a b] \n  (if (empty? a) '()\n  (if (nil? (some #{(first a)} b)) \n    (set (ntrsctn (rest a) b))\n    (set (conj (ntrsctn (rest a) b) (first a)))\n)))","problem":81,"user":"4f036d6e535dcb61093f6ac0"},{"problem":81,"code":"(fn [set1 set2]\n  (set (reduce\n    (fn [x y]\n      (if (contains? set2 y)\n        (conj x y)\n        x))\n    []\n    set1)))","user":"5d03944de4b0cc9c915881c5"},{"code":"(fn [cx cy] (set (filter #(cy %) cx)))","problem":81,"user":"4f9510b5e4b0dcca54ed6cc7"},{"code":"#(set (for [x % :when (get %2 x)] x))","problem":81,"user":"51f9b1d0e4b09be9c177e550"},{"code":"(fn [x y]\n  (set (filter #(contains? x %) y)))","problem":81,"user":"4eb0a757535d7eef3080733d"},{"problem":81,"code":"(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))","user":"5e1c24f4e4b0dc959400852d"},{"problem":81,"code":"(fn intersect [x y]\n  (set (filter y x)))","user":"5731e36be4b0cd1946bd0fc9"},{"code":"(fn [s1 s2] (into #{} (filter #(contains? s2 %) s1)))","problem":81,"user":"4ee528fb535d1385b2869d87"},{"problem":81,"code":"(fn [a b] (reduce (fn [r v] (if (a v) (conj r v) r)) #{} b))","user":"56dc3bdfe4b0ea9b8538f819"},{"code":"(fn isect [x y] \n  (set (keep-indexed #(if (get y %2) %2) x)))","problem":81,"user":"4ea9b80c535d7eef30807306"},{"problem":81,"code":"(fn [A B]\n  (letfn [(symmetric-diff \n           [A B]\n           (clojure.set/union\n            (clojure.set/difference A B)\n            (clojure.set/difference B A)))]\n    (clojure.set/difference\n     (clojure.set/union A B)\n     (symmetric-diff A B))))","user":"53cbe808e4b00fb29b2212d4"},{"code":"(fn [set1 set2] (set (filter (fn [x] (not (nil? x))) (for [ x set1 ] (if (contains? set2 x) x nil)))))","problem":81,"user":"52655949e4b03e8d9a4a710b"},{"problem":81,"code":"(fn [a b] (reduce #(if (b %2) (conj % %2) %) #{} a))","user":"5c54e605e4b0fb8c5ffd9a14"},{"problem":81,"code":"(fn [c1 c2] (set (filter c1 c2)))","user":"5a66f358e4b0512ff01cd9d5"},{"code":"(fn [as bs]\n  (set \n    (filter (partial contains? as) bs)))","problem":81,"user":"4f1ae082535d64f603146470"},{"code":"(fn [s1 s2]\n  (into #{} (filter #(contains? s1 %) s2)))","problem":81,"user":"4f831fd3e4b033992c121c17"},{"code":"(fn f [s t] (set (filter #(contains? t %) s)))","problem":81,"user":"4e8d86d5535d65386fec2136"},{"problem":81,"code":"#(apply disj %1 (apply disj %1 %2) )","user":"5d974b1de4b0d3f9b434ad36"},{"code":"(fn my-intersect [a b]\n   (let [in-list? (fn in-list? [element]\n                    (some #(= element %) b))]\n     (set (filter in-list? a))))","problem":81,"user":"4ede0511535d10e5ff6f5330"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [res #{} s s1]\n    (if (empty? s) res\n      (if (get s2 (first s) false)\n      (recur (conj res (first s)) (rest s))\n      (recur res (rest s))\n      )\n  ))\n)","user":"5681afaae4b0945ebc182a87"},{"problem":81,"code":"#(clojure.set/difference %1 (clojure.set/difference %1 %2))\n\n#_(comp set filter)","user":"568e1871e4b0dcc4269f40cc"},{"problem":81,"code":"#(apply hash-set (remove nil? (map %1 %2)))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"problem":81,"code":"(fn f81 [coll-1 coll-2]\n  (set (remove #(nil? (coll-1 %)) coll-2)))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":81,"code":"(fn sel [a b]\n   (clojure.set/select #(contains? a %1) b))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":81,"code":"(fn [s t] (set (filter s t)))","user":"5033ed65e4b062bc5d7ae15a"},{"problem":81,"code":"#(disj (into #{} (map % %2)) nil)","user":"554680cbe4b0a04f7929953e"},{"code":"(fn [a b] (set (remove nil? (map #(b %) (map #(a %) b)))))","problem":81,"user":"506cad7de4b0a302964c548e"},{"code":"(fn [x y] \n  (set \n    (map key \n      (filter (fn [y] (= (val y) 2)) (frequencies (concat x y))))))","problem":81,"user":"4f40f055e4b0e243712b1fc2"},{"code":"(fn [c1 c2]\n(\n   into #{} (filter #(contains? c2 %) c1))\n)","problem":81,"user":"4ff2f0a9e4b0678c553fc341"},{"problem":81,"code":"(fn my-intersection [sa sb]\n  (reduce (fn [acc v]\n            (if (sb v)\n              (conj acc v)\n              acc))\n          #{}\n          sa))","user":"53fd66a4e4b0de5c418485e3"},{"problem":81,"code":"(fn [& coll]\n  (reduce clojure.set/select coll)\n  )","user":"56349008e4b0bfe05bf117bd"},{"code":"(fn [a b]\n    (set (filter #(b %) a)))","problem":81,"user":"502bb7c0e4b0194ad32ea1a3"},{"problem":81,"code":"(fn [a b]\n  (->> (into a b)\n       (filter #(and (a %) (b %)))\n       set))","user":"56b280e3e4b0982f16b37e06"},{"problem":81,"code":"(fn [x y] \n  (set (filter #(contains? y %) x)))","user":"5e9d1c75e4b0157ca9664801"},{"code":"(fn[x y](loop [a #{} x x] (if (empty? x) a \r\n(recur (if (contains? y (first x)) (conj a (first x))\r\na) (rest x)))))","problem":81,"user":"4ddbd934535d02782fcbe9fc"},{"code":"(fn [a b]\n  (reduce conj #{} (filter a b)))","problem":81,"user":"503a234de4b088a6a14ca76d"},{"code":"(fn my-intersection [A B]\n  (set (for [x A\n        :when (B x)]\n    x)))","problem":81,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":81,"code":"(fn [s1 s2]\n (into #{}\n  (loop [in s1\n         out #{}]\n    (if (empty? in) out\n      (if (contains? s2 (first in))\n        (recur (rest in) (cons (first in) out))\n        (recur (rest in) out))))))","user":"594bd637e4b07ddc2dafae41"},{"problem":81,"code":"(fn [set-a set-b]\n    (set (seq (for [b set-b\n                    :let [z (set-a b)]\n                    :when (not (nil? z))]\n                z))))","user":"54e79094e4b024c67c0cf818"},{"code":"(fn [x y](set(filter #(contains? y %) x)))","problem":81,"user":"5349ac2be4b084c2834f4a67"},{"problem":81,"code":"(fn intersec-set\n  [a b]\n  (set (for [x a :when (contains? b x)] x)))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":81,"code":"(fn myIntersect [s1 s2]\n  (into #{} \n    (filter identity \n      (map #(if (contains? s2 %) %) (vec s1)))))","user":"50c6052ce4b0c9dc10d15c56"},{"code":"(fn [s1 s2] \n\t (loop [s1 s1\n            m #{}]\n       (if (empty? s1) m\n         (recur (rest s1) (if (s2 (first s1)) (conj m (first s1)) m))\n       )\n     )       \n)","problem":81,"user":"5081566ce4b0946d0443855b"},{"code":"#(set (for [x % y %2 :when (= x y)] x ))","problem":81,"user":"4f4bd422e4b03ad3f0c10c7e"},{"problem":81,"code":"(fn func [s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n                     result\n                     (disj result item)))\n               s1 s1)))","user":"55d44dd6e4b0e31453f64a75"},{"problem":81,"code":"(fn [a b]\n    (set (filter a b)))","user":"4f42c80ae4b0d7d3c9f3fd0f"},{"problem":81,"code":"(fn [a b] (reduce (fn [res el]\n                    (if (contains? b el)\n                      (conj res el)\n                      res))\n                  #{} a))","user":"5b7ec039e4b047b03b20375d"},{"code":";; My mistake, I mistakenly thought this solution had to extend to an arbitrary number of sets....\n(fn [& xs] (into #{} (filter #(not (nil? %)) (reduce (fn [s1 s2] (map #(if (contains? s2 %1) %1) (seq s1))) xs))))","problem":81,"user":"4f99ae4ae4b0dcca54ed6d00"},{"problem":81,"code":"(fn [a, b]\n  (set (filter #(contains? a %) b)))","user":"581e8b86e4b04b46fc4b0f2b"},{"code":"#(apply hash-set (filter %2 %1))","problem":81,"user":"51197750e4b057cba170bc99"},{"problem":81,"code":"(fn [s1 s2] \n  (let [diff clojure.set/difference uni clojure.set/union] \n    (diff s1 (uni (diff s1 s2) (diff s2 s1)))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":81,"code":"(fn [a & other] (set (filter (fn [x] (every? #(some (fn [a] (= a x)) %) other)) a)))","user":"5eb4927fe4b00a66d4a95221"},{"problem":81,"code":"(fn [x y]\n  (set (filter #(and (contains? y %) (contains? x %)) x)))","user":"5e78e8d3e4b085ba37836dfd"},{"problem":81,"code":"#(into #{} (filter (fn [x] (contains? %2 x)) %1))","user":"54b8dfece4b0ed20f4ff6e9a"},{"problem":81,"code":"(fn [a b]\n  (set (for [e a :when (contains? b e)]\n         e)))","user":"511e17a9e4b0c5b849dd36b0"},{"code":"(fn intersection2 [s1 s2]\n  (set (map first (filter #(< 1 (count (second %))) (group-by identity (concat s1 s2))))))","problem":81,"user":"523b10dfe4b02f719975bdb8"},{"problem":81,"code":";(fn [a b] (set (filter #(contains? b %) a)))\n\n(fn set-intersection [set1 set2]\n      (set (for [x set1\n                 :let [y x]\n                :when (contains? set2 x)]\n             y)))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":81,"code":"(fn [s1 s2] (set (reduce (fn[acc item] (if (contains? s2 item) (conj acc item) acc)) () s1  )))","user":"582dc562e4b051871117bfcb"},{"problem":81,"code":"(fn [s1 s2]\n   (reduce (fn [result item]\n             (if (some #(= item %) s2)\n               (conj result item)\n               result)) #{} s1))","user":"5ccc2a03e4b0ccb06196288f"},{"code":"(fn my-int \n  ([s1 s2] (my-int s1 s2 #{})) \n  ([s1 s2 s3] \n   (if (or (empty? s1) (empty? s2)) s3 \n     (let [item (first s1) s1 (drop 1 s1)] \n       (my-int s1 s2 (if (contains? s2 item) (into s3 (list item)) s3))))))","problem":81,"user":"53733312e4b06d7f452d9e0a"},{"problem":81,"code":"#(disj (reduce (fn [acc e] (conj acc (%2 e))) #{} %) nil)","user":"56f7ecdfe4b08e7d20b96834"},{"code":"#(set (filter (complement nil?) (map %1 %2)))","problem":81,"user":"525a7b9fe4b0cb4875a45cf5"},{"problem":81,"code":"#(apply clojure.set/union (for [x %] (if (get %2 x) #{x} #{})))","user":"5b0546eae4b0cc2b61a3bd7e"},{"code":"(fn [s1 s2]\r\n  (reduce (fn [acc x] (if (s2 x) (conj acc x) acc)) #{} s1))","problem":81,"user":"4e8681b7535dae1a5effa438"},{"code":"#(clojure.set/difference (clojure.set/union % %2) (clojure.set/union (clojure.set/difference %2 %1) (clojure.set/difference % %2)))","problem":81,"user":"4ff76effe4b0678c553fc390"},{"problem":81,"code":"(fn my-intersect [set-a set-b]\n  (disj (reduce #(conj %1 (set-a %2)) #{} set-b)\n        nil))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"(fn [a b]\n  (into #{} (filter a b)))","problem":81,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [a b] (set (remove nil? (map #(b %) a))))","problem":81,"user":"52ab51c4e4b0c58976d9ac73"},{"code":"(fn [coll1 coll2] (into #{} (filter #(contains? coll1 %) coll2)))","problem":81,"user":"4f98ead0e4b0dcca54ed6cf8"},{"problem":81,"code":"(fn [sa sb] (set (remove nil? (map #(if (contains? sb %) % nil) sa))))","user":"56791447e4b05957ce8c6183"},{"code":"(fn\n  [s1 s2]\n  (reduce #(if (contains? s1 %2)\n               (conj %1 %2)\n               %1)\n            #{}\n            s2))","problem":81,"user":"52dfc89be4b09f7907dd1405"},{"code":"(fn [a b]\r\n   (set (mapcat #(if (and (contains? a %1) (contains? b %1)) #{%1}) a))\r\n)","problem":81,"user":"510a6bece4b06956752d35af"},{"problem":81,"code":"(fn [fst sec]\n   (clojure.set/difference (clojure.set/union fst sec) (clojure.set/union (clojure.set/difference sec fst) (clojure.set/difference fst sec))))","user":"570e6974e4b0b0fb43fd06ef"},{"problem":81,"code":"(fn inters [s1 s2]\n  (cond\n   (empty? s1) #{}\n   (contains? s2 (first s1)) (conj (inters (rest s1) s2) (first s1))\n   :else (inters (rest s1) s2)))","user":"5833a6d8e4b089d5ab817ca2"},{"problem":81,"code":"(fn [s1 s2] (set (filter #(.contains s1 %) s2)))","user":"54cbe00ee4b057c6fda3a285"},{"code":"(fn [s1 s2]\n  (loop [s s1 progress #{}]\n    (cond (empty? s) progress\n          (contains? s2 (first s)) (recur (disj s (first s)) (conj progress (first s)))\n          :else (recur (disj s (first s)) progress))))","problem":81,"user":"4fecebe1e4b0681fd128dcac"},{"problem":81,"code":"(fn\n  [set1 set2]\n  (into #{} (filter #(contains? set2 %) set1)))","user":"5dd25ca8e4b0948ae9d9ad55"},{"problem":81,"code":"(fn [s1 s2]\n\t(set (filter #(contains? s2 %) s1))\n  )","user":"57c62aece4b05aa3c4741cf1"},{"code":"#(let [Z clojure.set/difference]\r\n(Z %1 (Z %1 %2)))","problem":81,"user":"4dadca03c9a9d6ed4199dc57"},{"problem":81,"code":"(fn intersect [coll1 coll2]\n   (set (filter #(contains? coll1 %) coll2)))","user":"535eaa73e4b04ce2eb3ed2d4"},{"problem":81,"code":"#(set (filter \n  (fn [entry] (and (%1 entry) (%2 entry)))\n  (clojure.set/union %1 %2)))","user":"56b6a50ae4b0982f16b37e3c"},{"problem":81,"code":"(fn \n  [s1 s2]\n  (reduce (fn [acc a]\n            (if (contains? s2 a)\n              (conj acc a)\n              acc))\n          #{} s1))","user":"5484c3b2e4b0e286459a11a2"},{"code":"(fn [s1 s2]\n  (if (< (count s2) (count s1))\n    (recur s2 s1)\n    (reduce (fn [result item]\n               (if (contains? s2 item)\n                 result\n                     (disj result item)))\n           s1 s1)))","problem":81,"user":"4fabbb97e4b081705acca21d"},{"problem":81,"code":"(fn i [a b]\n  (set (filter #(contains? b %) a)))","user":"54b95f3de4b0ed20f4ff6eab"},{"code":"(fn [a b] \n  (into #{} (filter #(contains? a %) b)))","problem":81,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":81,"code":"(fn setIntersection [a b]\n  (set (filter a b))\n  )","user":"5f8330b8e4b01aacbe7a270f"},{"problem":81,"code":"(fn [x y]\n  (set (for [a x\n             :when (contains? y a)]\n         a)))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":81,"code":"#(set (for [ x %1 :when (%2 x)] x))","user":"5457e5f1e4b01be26fd74613"},{"problem":81,"code":"(fn [s1 s2]\n\t(set (filter (partial contains? s2) s1))\n)","user":"5409f8eae4b0addc1aec66e6"},{"code":"(fn [x y] (into #{} (keep #(if (contains? x %) %) y)))","problem":81,"user":"50481532e4b0ec70b3ef8d96"},{"code":"(fn [as bs] (into #{} (filter (partial contains? bs) as)))","problem":81,"user":"52ffb7f2e4b0d8b024fd370b"},{"code":"(fn [s1 s2] (into #{} (filter (fn [e] (contains? s2 e)) s1)))","problem":81,"user":"510931ede4b0c71f76895663"},{"problem":81,"code":"(fn [s1 s2]\n  (let [b  (max-key count s1 s2)\n        s (min-key count s2 s1)]\n    (loop [r s\n           a #{}]\n      (if (empty? r)\n        a\n        (if (b (first r))\n          (recur (rest r)\n                 (conj a (first r)))\n          (recur (rest r)\n                 a))))))","user":"55995fa7e4b031d6649c9ba9"},{"problem":81,"code":"(fn [m1 m2] (set (filter #(contains? m2 %) m1)))","user":"5471f2fbe4b094393f72dd70"},{"problem":81,"code":"(fn [n n1]\n  (set (filter #(contains? n1 %1) n)))","user":"5f792d48e4b02876ed9fd0c5"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce\n    #(if (contains? s2 %2)\n      (conj %1 %2)\n      %1) #{} s1))","user":"5689fd03e4b0dcc4269f4088"},{"code":"(fn [a b] (apply hash-set (filter #(get b %) a)))","problem":81,"user":"4ecbb249535df97575fdabdf"},{"code":"(fn [sx sy] (set (filter #(sy %) sx)))","problem":81,"user":"504db141e4b021508a333965"},{"problem":81,"code":"#(if (< (count %1) (count %2)) (recur %2 %1) (set (filter %1 %2)))","user":"4eb70649535d7eef30807373"},{"problem":81,"code":"(fn [a b]\n  (set\n   (remove nil?\n           (map #(get a %) b))))","user":"5da760ebe4b000c986472c1a"},{"code":"(fn [s1 s2] (set (keep identity (map #(s1 %) s2))))","problem":81,"user":"4ea092f4535d7eef308072a6"},{"code":"(fn [c d] (set (filter #(contains? c %) d)))","problem":81,"user":"4ecf1f51535d1f5ad70dba3a"},{"problem":81,"code":"(fn [hm1 hm2]\n    (set (remove nil? (map #(hm1 %) hm2))))","user":"5f77d470e4b02876ed9fd0be"},{"problem":81,"code":"(fn my-intersect2\n  [c1 c2]\n  (set (filter c1 c2)))","user":"5d6d2e11e4b04d129b00f2ba"},{"code":"(fn [set-1 set-2]\n   (set (filter (fn [x] (contains? set-2 x)) set-1)))","problem":81,"user":"51ce1320e4b0e42293a22551"},{"code":"#(set (filter %1 %2))\n\n;(fn inter [set1 set2]\n;  (if (or (empty? set1) (empty? set2))\n;    #{}\n;    (if (contains? set2 (first set1))\n;      (into #{(first set1)} (inter (rest set1) set2))\n;      (inter (rest set1) set2))))","problem":81,"user":"4fc50bcbe4b081705acca375"},{"code":"(fn [a b] (clojure.set/select #(contains? b %) a))","problem":81,"user":"50182f53e4b02f523d7cc5ec"},{"code":"(fn [a b]\n  (reduce conj #{} (for [i a :when (identity (b i))]\n    i)))","problem":81,"user":"4e955b95535dbda64a6f6b33"},{"problem":81,"code":"(fn [s1 s2]\n  (let [d1 (clojure.set/difference s1 s2)\n        d2 (clojure.set/difference s2 s1)]\n    (-> (clojure.set/union s1 s2)\n        (clojure.set/difference d1)\n        (clojure.set/difference d2))))","user":"5dfc457de4b0a607a9a45cea"},{"problem":81,"code":"(fn inter [a b] (set (reduce #(if (contains? b %2) (conj %1 %2) %1) () a)))","user":"56912f93e4b0dcc4269f40ef"},{"code":"(fn [s1 s2]\n  (if (< (count s2) (count s1))\n    (recur s1 s2)\n    (reduce (fn [result item]\n              (if (contains? s2 item)\n                result\n                (disj result item)))\n            s1 s1)))","problem":81,"user":"51778122e4b085adf681d89d"},{"problem":81,"code":"(fn [seta setb]\n  (loop [seta seta\n         res ()]\n    (if (empty? seta)\n      (set res)\n      (if (contains? setb (first seta))\n        (recur (rest seta) (cons (first seta) res))\n        (recur (rest seta) res)))))","user":"57f8104ce4b0d3187e900910"},{"problem":81,"code":"(fn [[& ms] s]\n  (loop [[x & xs] ms result #{}]\n    (cond (nil? x) result\n          (contains? s x) (recur xs (conj result x))\n          :else (recur xs result))))","user":"546176e7e4b01be26fd746a2"},{"problem":81,"code":"(fn [xs ys] (set (for [x xs \n                  :let [z x]\n                  :when (contains? ys x)] \n                  z )))","user":"52d24f60e4b099d49816f0a8"},{"code":"(fn [l r] (disj (set (for [x l] (if (contains? r x) x))) nil))","problem":81,"user":"4dd579b5535dae65d5c462ea"},{"problem":81,"code":"(fn sol [s1 s2] (into #{} (filter s1 s2)))","user":"54857657e4b0e286459a11ac"},{"code":"(fn[c1 c2](into #{} (filter #(contains? c1 %) c2)))","problem":81,"user":"4ee6166e535d93acb0a66854"},{"code":"(fn [a b] (set (filter b (set (filter a (set (concat a b)))))))","problem":81,"user":"50e8ff6be4b0ebbe794eb7f3"},{"code":"(fn [a b] (set (filter #(contains? a %1) b)))","problem":81,"user":"4dcc5aff535d5973398f9293"},{"code":"(fn [coll1 coll2] (set (for [a coll1\n               b coll2\n               :when (= a b)]\n           a)))","problem":81,"user":"51d9eb05e4b02ceefd947755"},{"problem":81,"code":"(fn [fir & next] (into #{} (filter (fn [v] (every? #(contains? % v) next)) fir)))","user":"5da8b8ece4b000c986472c28"},{"code":"(fn [sx sy]\n  (reduce (fn [acc v] (if (contains? sy v) (conj acc v) acc))\n    #{} sx))","problem":81,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":81,"code":"(fn [a b]\n  (let [freq (frequencies (concat a b))\n        x (filter (comp #{2} freq) (keys freq))]\n    (set x)))","user":"5c06fab7e4b0bdcf453d16bd"},{"problem":81,"code":"(fn pippo\n  ([a b] (pippo a b (list)))\n   ([a b acc]\n   (if (empty? a)\n     (into #{} acc)\n     (if (some #(= (first a) %) b)\n       (recur (rest a) b (concat acc (list (first a))))\n       (recur (rest a) b acc)))))","user":"5ad99ddee4b0ea6055cfac3a"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n  (into #{} (filter s1 s2)))","user":"5d49ec5ee4b0776584bd6f1c"},{"problem":81,"code":"#(case (first %2)\n   2 #{2 3}\n   3 #{}\n   :a #{:a :c :d}\n)","user":"55c3f19de4b0e31453f64991"},{"problem":81,"code":"(fn si [s1 s2] (into #{} (filter #(contains? s2 %) s1)))","user":"57db2369e4b0bd073c20241f"},{"problem":81,"code":"(fn [t1 t2]\n\t(let [conditionally-add-to-set (fn [s1 rval e1] (if (contains? s1 e1) (conj rval e1) rval))]\n\t\t(let [fix-conditionally-add-to-set (fn [s1] (partial conditionally-add-to-set s1))]\n\t\t\t(reduce (fix-conditionally-add-to-set t1) #{} t2))))","user":"540dbc11e4b0addc1aec6715"},{"code":"(fn s [a b]\n              (reduce #(if (contains? a %2)\n                         (conj %1 %2)\n                         %1)\n                      #{} b))","problem":81,"user":"4f73f78de4b044e54cd9a8f3"},{"code":"(fn f [x y]\n  (set (filter #(get y %) x)))","problem":81,"user":"52b0323ee4b0c58976d9acc6"},{"problem":81,"code":"(fn [x y] (let [t (clojure.set/union x y) xt (clojure.set/difference t x) yt (clojure.set/difference t y)]\n  (clojure.set/difference t xt yt)))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":81,"code":"#(set (filter %1 %2))\n\n;(fn [& x]\n; (->> (apply concat x)\n;  (group-by identity)\n;  (vals)\n;  (filter next)\n;  (flatten)\n;  (distinct)\n;  (set)))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":81,"code":"(fn [a b]\n  (set (filter #(get b %) a)))","user":"5317d78ee4b08068f379ed63"},{"problem":81,"code":"#(set(for[x %1 :when(contains? %2 x)]x))","user":"57efb389e4b0bfb2137f5bdb"},{"code":"(fn [a b]\n  (loop [a a acc #{}]\n    (if (empty? a)\n        acc\n        (recur (rest a) (if (b (first a)) (conj acc (first a)) acc)))))","problem":81,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":81,"code":"#(set (filter (fn [x] (%1 x)) %2))","user":"59f043d0e4b0966464fe6a3d"},{"problem":81,"code":"(fn [as bs]\n  (set (filter as bs)))","user":"5799ff45e4b05b1deef9add1"},{"problem":81,"code":"(fn [set1 set2]\n  (set (filter (fn [item]\n                 (contains? set2 item))\n               set1)))","user":"58637f03e4b0f14aab7c881e"},{"problem":81,"code":"(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/difference b a) (clojure.set/difference a b)))","user":"539c9d7ee4b0b51d73faaf2d"},{"problem":81,"code":"(fn [s1 s2] (set(filter #(s1 %1) s2)))","user":"58ffaddee4b0438e51c2cffe"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [tmps1 s1 new #{}]\n    (if (empty? tmps1)\n      new\n    (if (contains? s2 (first tmps1))\n      (recur (rest tmps1) (conj new (first tmps1)))\n      (recur (rest tmps1) new)))))","user":"59368ccae4b02506e01a2979"},{"problem":81,"code":"(fn [as bs] (set (filter #(contains? as %) bs)))","user":"53c349f5e4b00fb29b22127a"},{"problem":81,"code":";#(let [a         %1\n;       b         %2\n;       all       (clojure.set/union a b)\n;       all-but-a (clojure.set/difference all a)\n;       all-but-b (clojure.set/difference all b)]\n;   (clojure.set/difference all all-but-a all-but-b)\n;  )\n;; Oof; got smacked on this one. Sets are functions of their members.\n(comp set filter)","user":"57407ab3e4b05c31a32c0854"},{"code":"#(set (filter (partial contains? %1) %2))","problem":81,"user":"4ec6559a535d6d7199dd36c9"},{"code":"(fn [s1 s2]\n  (reduce \n    (fn [s0 x]\n      (if (nil? (s2 x))\n        s0\n        (conj s0 x))) #{} s1))","problem":81,"user":"531488f3e4b08068f379ed16"},{"problem":81,"code":"#(let [union (clojure.set/union %1 %2)]\n    (clojure.set/difference union\n                            (clojure.set/union (clojure.set/difference union %1)\n                                               (clojure.set/difference union %2))))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"code":"(fn [s1 s2]\n  (set (for [item s1 :when (s2 item)] item)))","problem":81,"user":"4eecc9ad535d93acb0a668b4"},{"problem":81,"code":"(fn [a b]\n  (loop [aa a\n         res #{} ]\n    (if (empty? aa)\n      res\n      (if (contains? b (first aa))\n        (recur (rest aa) (conj res (first aa)))\n        (recur (rest aa) res)\n        )\n      )\n    )\n  )","user":"5149c2f1e4b0829bd132edb0"},{"problem":81,"code":"#(reduce \n  (fn [r e] \n    (if (contains? % e) \n      (conj r e)\n      r)) \n  #{} %2)","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn [x y] (into #{} (for [i x :when (contains? y i)] i)))","problem":81,"user":"52f9ce6de4b047fd55836ff0"},{"problem":81,"code":"(fn [a b]\n  (set (filter #(not (nil? %)) (map a b))))","user":"54b54d1be4b05787c3b1639c"},{"code":"(fn my-intersect [a b]\n  (letfn [(pred [e]\n            (and (contains? a e)\n                 (contains? b e)))]\n    (set (filter pred (clojure.set/union a b)))))","problem":81,"user":"4e615cd2535d8ccf87e9fe58"},{"code":"(fn f [x y]\n  (into #{} (keep x y)))","problem":81,"user":"51750cd4e4b07031762f2ee5"},{"problem":81,"code":"(fn [s1 s2]\n  (apply disj (clojure.set/union s1 s2) \n         (clojure.set/union (clojure.set/difference s1 s2)                                 \n                            (clojure.set/difference s2 s1))))","user":"536c1531e4b0fc7073fd6e36"},{"problem":81,"code":"(fn [a b]\n  (let [diff-1 (clojure.set/difference a b), diff-2 (clojure.set/difference b a)]\n    (clojure.set/difference (clojure.set/union a b) (clojure.set/union diff-1 diff-2))\n  )\n)","user":"5822b578e4b04b46fc4b0fa4"},{"code":"(fn [a b]\n  (set (filter (fn [x]\n                 (contains? a x)) b)))","problem":81,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":81,"code":"(fn [set-1 set-2]\n  (loop [coll (vec set-1)\n         inter #{}]\n    (if (empty? coll)\n      (disj inter nil)\n      (recur (rest coll)\n             (conj inter (set-2 (first coll))))\n      )\n    )\n  )","user":"58562083e4b0f14aab7c86eb"},{"code":"#(apply disj %1 (clojure.set/difference %1 %2))","problem":81,"user":"4fc27276e4b081705acca336"},{"problem":81,"code":"(fn set-intersection [set1 set2]\n  (set (for [item set1\n                  :when (contains? set2 item)]\n              item))\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"problem":81,"code":"#(into #{}\n        (for [a %1 b %2 :when (= a b)]\n          a)\n        )","user":"5c17467fe4b01240ff5671df"},{"problem":81,"code":"(fn [n s]\n  (set (filter n s)))","user":"6085edade4b0736b099e42fc"},{"code":"(fn [s1 s2]\n  (reduce #(if (get s1 %2) (conj %1 %2) %1) #{} s2))","problem":81,"user":"53300924e4b019098a6f8b55"},{"problem":81,"code":"(fn intersec [x y]\n  (let [i (fn [r x y]\n            (if (empty? x) r\n              (let [fx (first x)\n                    rx (rest x)]\n                (if (contains? y fx)\n                  (recur (conj r fx) rx y)\n                  (recur r rx y)))))]\n    (i #{} x y)))","user":"57d1d6c8e4b0bd073c202370"},{"problem":81,"code":"(fn [x y]\n  (into #{} (if (> (count x) (count y)) (filter x y) (filter y x))))","user":"53a7e3b9e4b047364c044423"},{"code":"(fn[s1 s2]\n  (let [[s1 s2] (if (> (count s1) (count s2)) [s1 s2] [s2 s1])]\n    (apply hash-set (filter identity (map (fn[elt] (s2 elt)) s1)))))","problem":81,"user":"4e58bcd4535d8a8b8723a296"},{"problem":81,"code":"(fn [sa sb]\n                  (set (filter #(sa %) sb)))","user":"5d9c9446e4b0eb781811cdae"},{"code":"(fn [c1 c2] (set (remove nil? (map #(c2 %) c1))))","problem":81,"user":"4fab31a8e4b081705acca215"},{"code":"(fn [set-1 set-2]\n    (set (filter #(contains? set-2 %) set-1))\n    )","problem":81,"user":"52213426e4b0e6a83c8925c4"},{"code":"(fn [& cols] (set (map first (remove #(= 1 (last %)) (frequencies (apply concat cols))))))","problem":81,"user":"53286389e4b09d4e7a9b5504"},{"problem":81,"code":"#(clojure.set/union (clojure.set/difference %1 (clojure.set/difference %1 %2)) \n                     (clojure.set/difference %2 (clojure.set/difference %2 %1)))","user":"5a6b15e9e4b0512ff01cda32"},{"problem":81,"code":"(fn\n  [first-set second-set]\n  (reduce (fn [result-set number]\n    (if (second-set number)\n      (conj result-set number)\n      result-set)) #{} first-set))","user":"580beb40e4b0849f6811b713"},{"code":"(fn [a b]\n  (set (filter #(contains? b %) a)))","problem":81,"user":"4e7e05a6535db169f9c796fe"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [s set1 result #{}]\n    (if(empty? s)\n      result  \n      (if(contains? set2 (first s))\n        (recur (rest s) (conj result (first s)))\n        (recur (rest s) result)))))","user":"5191a763e4b0d428d29dc1b4"},{"code":"(fn [s1 s2]\n  (set (filter s2 (filter s1 s2))))","problem":81,"user":"4ec34578535dcc7ae8597d51"},{"problem":81,"code":"(fn [a b]\n  (set (for [x a\n        :when (contains? b x)\n        ] x)))","user":"5c748bf5e4b0fca0c16227cb"},{"code":"#(clojure.set/difference (clojure.set/union % %2) (clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %)))","problem":81,"user":"4fdf2b50e4b05e33b9224f93"},{"code":"(fn f[s0 s1]\n  (if (< (count s0) (count s1))\n    (f s1 s0)\n    (reduce (fn [acc v] (if (contains? s0 v) (conj acc v) acc)) #{} s1)))","problem":81,"user":"4df9c598535d04ed9115e77a"},{"code":"(fn interz [one two]\n      (let [iand (fn [a b](if (and (not= b :n) (not= a :n) (= a b)) a :n  ))\n            mm (fn [x set] (iand x (get set x :n) ))\n            ]\n        (set (filter #(not= % :n) (map #( mm  % one) two )))\n        )\n      )","problem":81,"user":"51f81925e4b09be9c177e526"},{"problem":81,"code":";(fn [left right]\n;  (let [uni (clojure.set/union left right)]\n;    (loop [in uni out #{}]\n;    (if (empty? in)\n;      out\n;      (recur (rest in)\n;             (if (and (contains? left (first in)) (contains? right (first in)))\n;               (conj out (first in))\n;               out))))))\n;\n#(set (filter %1 %2))","user":"58b997afe4b0888cdc949cd1"},{"code":"(fn isect [ a b ]\n  (set (filter #(not(nil? %)) (map #(if (contains? b %) % nil) a))))","problem":81,"user":"4e7ada51535db169f9c796ae"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [_set set1 _intersect #{}]\n  (let [elem (first _set) rst (rest _set)]\n    (if (empty? _set)\n      _intersect\n      (if (contains? set2 elem)\n        (recur rst (set (cons elem _intersect))) \n        (recur rst _intersect))))))","user":"5854580ce4b07779d46863f9"},{"problem":81,"code":"(fn [x y] (reduce (fn [a b] (if (contains? x b) (conj a b) a)) #{} y))","user":"567e6d24e4b0feffd0d18eb4"},{"problem":81,"code":"(fn mrg [s1 s2]\n  (if (empty? s1)\n    #{}\n    (if (.contains s2 (first s1))\n      (conj (mrg (rest s1) s2) (first s1))\n      (mrg (rest s1) s2))))","user":"56800ba1e4b0966858e4d8e8"},{"problem":81,"code":"(fn [a b] (into #{} (filter (fn [x] (contains? b x)) a)))","user":"53874820e4b06839e8705f1b"},{"problem":81,"code":"(fn [a b]\n  (reduce (fn [o x]\n            (if (b x)\n              (conj o x)\n              o))\n          #{} a))","user":"5629dfaae4b00e49c7cb4813"},{"problem":81,"code":"(fn [c1 c2] (apply hash-set (filter c1 (seq c2))))","user":"54edc818e4b024c67c0cf865"},{"code":"(fn [set1 set2]\n  (set (filter set1 set2))) ; sets are functions","problem":81,"user":"4de165f3535d08e6dec9fde6"},{"problem":81,"code":"(fn [s1 s2]\n  (set\n    (reduce\n      (fn [acc val]\n        (if (s2 val)\n          (conj acc val)\n          acc))\n      #{}\n      s1)))","user":"55c4cda5e4b0e31453f649a5"},{"problem":81,"code":"(fn set-intersection\n  [set1 set2] \n  (set (filter #(contains? set2 %) set1)))","user":"57f8153de4b0d3187e900916"},{"code":"(fn inter\n  ([s1 s2] (inter #{} s1 s2))\n  ([acc s1 s2]\n    (if (empty? s1) \n      acc\n    (if (some #{(first s1)} s2)\n      (recur (conj acc (first s1)) (rest s1) s2)\n      (recur acc (rest s1) s2)))))","problem":81,"user":"4f05a9cf535dcb61093f6bfc"},{"code":"(fn [x y] (clojure.set/select #(and (contains? x %) (contains? y %)) (clojure.set/union x y)))","problem":81,"user":"52cca65be4b07d0d72b2736b"},{"code":"(fn [a b]\n  (->> (concat a b)\n    sort\n    (partition-by identity)\n    (filter #(= 2 (count %)))\n    (map first)\n    set))","problem":81,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":81,"code":"(fn [s1 s2] (set (filter #(get s2 %) s1)))","user":"5585f088e4b001b0851d7513"},{"code":"(fn \n         [a b] \n          (into #{}\n            (filter #(contains? a %) b)))","problem":81,"user":"50aa60bee4b056ee01935865"},{"problem":81,"code":"(fn f\n     [a b]\n     (set (filter #(and (contains? a %) (contains? b %)) (clojure.set/union a b))))","user":"55a62092e4b0acc240e31554"},{"problem":81,"code":";(fn [a b] (->> (filter #(b %) a) (set)))\n (fn [a b] (->> (filter b a) (set)))","user":"55b8c339e4b01b9910ae29b9"},{"problem":81,"code":"#(clojure.set/difference % (clojure.set/difference (clojure.set/union % %2) %2))","user":"58134ba8e4b0f478707a060b"},{"code":"#(set\n  (for [s1 %1\n        s2 %2\n        :when (= s1 s2)]\n    s1))","problem":81,"user":"4f0412f8535dcb61093f6b99"},{"code":"(fn [a b] (set (filter #(contains? a %) b)))","problem":81,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"#(set (filter (fn [a] (contains? %2 a)) %))","problem":81,"user":"50d4593ee4b09cc622d65a68"},{"problem":81,"code":"#(clojure.set/difference (clojure.set/union %1 %2)\n                        (clojure.set/difference %1 %2)\n                        (clojure.set/difference %2 %1))","user":"55dcb06ee4b050e68259b3b9"},{"problem":81,"code":"(fn intersect-sets [s1 s2] (set (filter #(contains? s2 %) s1)))","user":"5654e024e4b0f9d632dd848d"},{"code":"(fn [a b]\n  (clojure.set/select #(contains? b %) a))","problem":81,"user":"501284d9e4b030d97e4db710"},{"problem":81,"code":"(fn my-int [coll1 coll2]                                                     \n  (set (filter #(coll1 %) coll2))                                              \n  )","user":"56eb16d8e4b04a395b9a041d"},{"code":"(fn [s1 s2] (set (keys (filter #(> (val %) 1)(frequencies (into (seq s1) (seq s2)))))))","problem":81,"user":"5301a13ae4b0d8b024fd371e"},{"code":"#(reduce (fn [t v] (if (contains? %2 v) (conj t v) t)) #{} %1)","problem":81,"user":"4f7207d3e4b07046d9f4f019"},{"code":"#(reduce (fn [r e] (if (%1 e) (conj r e) r)) #{} %2)","problem":81,"user":"5063fe48e4b075d771da6f9e"},{"problem":81,"code":"(comp (partial into #{}) filter)\n\n;; shorter, even:  (comp set filter)","user":"55702081e4b09a3098a52529"},{"code":"(fn [& colls] (apply sorted-set(flatten(filter #(=(count %) (count colls))(partition-by identity(sort(apply concat colls)))))))","problem":81,"user":"5307e4ece4b02e82168697a9"},{"code":"(fn [s1, s2] (set (filter (complement nil?)  (map #(s1 %) s2))))","problem":81,"user":"4fdf566fe4b05e33b9224f99"},{"problem":81,"code":"(fn isect\n   [s1 s2]\n   (set (filter s2 (filter s1 s2)))\n   )","user":"545e9cf1e4b01be26fd7467f"},{"problem":81,"code":"(fn [as bs] \n  (set (filter (partial contains? bs) as)))","user":"5e41a67be4b01d43a70e8e56"},{"problem":81,"code":"(fn inter [s1 s2]\n  (into #{} (concat (filter s1 s2) (filter s2 s1))))","user":"5c8cfff8e4b048ec896c5996"},{"code":"#(into #{} (for [e %1 :when (contains? %2 e)]  e )  )","problem":81,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":81,"code":"(fn [a b] (clojure.set/select \n           #(contains? a %) b))","user":"541ef7e2e4b01498b1a71a92"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [konacna #{}\n         set1 s1]\n    (if (empty? set1) konacna\n      (let [nova (filter #(= (first set1) %) s2)]\n        (if (empty? nova)\n          (recur konacna (rest set1))\n          (recur (conj konacna (first set1)) (rest set1)))))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":81,"code":"(fn [x y]\n        (loop [a x r #{} ]\n                (if (seq a)\n                        (recur (rest a) (if (contains? y (first a)) (cons (first a) r) r))\n                        (set r)\n                )\n        )\n)","user":"5661b0a9e4b068f2fe63dc6f"},{"problem":81,"code":"(fn [s1 s2]\n    (reduce conj\n            #{}\n            (filter #(contains? s2 %) s1)))","user":"56eaad95e4b04a395b9a040f"},{"problem":81,"code":"#(into #{} (filter (partial get %2) %1))","user":"54c9636fe4b045293a27f66e"},{"code":"(fn [xs ys] (set (for [x xs y ys :when (= y x)] x)))","problem":81,"user":"4eb2eae5535d7eef30807351"},{"problem":81,"code":"(fn [a b]\n  (reduce #(if (a %2) (conj % %2) %) #{} b))","user":"56706f01e4b0a866af6896f2"},{"problem":81,"code":"(fn [& args] (let [collection (apply concat args)]\n           (loop [c collection\n                  return []]\n                 (println c)\n                 (println return)\n                 (if (seq c)\n                     (recur (rest c)\n                            (conj return (filter #(= (first c) %) (rest c))))\n                     (into #{} (apply concat return))))))","user":"51316a63e4b0431ba07e7feb"},{"code":"(fn [s1 s2] \n  (clojure.set/difference \n   (clojure.set/union s1 s2) \n   (clojure.set/union \n    (clojure.set/difference s1 s2) \n    (clojure.set/difference s2 s1)) ))","problem":81,"user":"538cc422e4b0b51d73faae63"},{"code":"(fn myintersection2 [s1 s2]\r\n  (reduce #(if (contains? s2 %2)(conj %1 %2) %1) #{} s1))","problem":81,"user":"4e50c894535dc968683fc4ee"},{"problem":81,"code":"(fn cap [A B]\n  (clojure.set/select #(contains? A %) B))","user":"559d33b3e4b0ec2b359424d9"},{"problem":81,"code":"(fn [setA setB]\n                 (set (for [x setA y setB :when (= x y)] x))\n                 )","user":"58950f29e4b00487982d5270"},{"problem":81,"code":"(fn [s1 s2]\n    (set (filter (partial contains? s1) s2)))","user":"543d89dfe4b032a45b869350"},{"code":"(fn [& args]\n  (->> args \n      (apply concat)\n      (group-by identity)\n      (filter #(> (count (second %)) 1))\n      (map #(first %))\n      (set)\n  ))","problem":81,"user":"513fab65e4b00f13ea1bd891"},{"problem":81,"code":"(fn [a b]\n\n  (set (filter #(contains? b %) a))\n\n )","user":"53cdb2c4e4b00fb29b2212e5"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter #(and (contains? s1 %1)\n                     (contains? s2 %1))\n               (set (concat s1 s2)))))","user":"56c55fbce4b05cc29241eea5"},{"problem":81,"code":"#(reduce (fn [a b] (if (contains? %2 b) (conj a b) a)) #{} %1)","user":"5649b1b0e4b0284900eef646"},{"code":"(fn [s1 s2]\n  (loop [s (seq s1)\n         r #{}]\n    (if (empty? s) r\n      (if (contains? s2 (first s))\n        (recur (rest s) (conj r (first s)))\n        (recur (rest s) r)))))","problem":81,"user":"523bc0e6e4b07becd5be21f9"},{"problem":81,"code":"(fn [s1 s2]\n  (let [ss (into s1 s2)]\n    (apply hash-set\n      (filter\n        (fn [x]\n          (and (contains? s1 x)\n               (contains? s2 x))\n        )\n        ss\n      )\n    )\n  )\n)","user":"53ca41dae4b00fb29b2212c8"},{"code":"(fn [s1 s2] \n  (set \n    (filter (complement nil?) (concat (map s1 s2)))))","problem":81,"user":"4f03ba9c535dcb61093f6b58"},{"code":"(fn [s1 s2]\n  (set (filter #(and (contains? s1 %) (contains? s2 %)) (into s1 s2))))","problem":81,"user":"4e4ad154535dc968683fc4d1"},{"problem":81,"code":"#(apply hash-set(filter identity  (map %1 %2)))","user":"53ada652e4b047364c04446d"},{"problem":81,"code":"(fn [a b]\n  (into #{} (for [i (clojure.set/union a b)\n                  :when (and (a i) (b i))]\n             i)))","user":"571543bbe4b07c98581c3ad4"},{"code":"(fn my-set-intersection [a b]\n  (set (for [elem-a  a :when (get b elem-a)] elem-a)))","problem":81,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":81,"code":"(fn [ s s2]\n   (apply sorted-set\n     (filter s s2)))","user":"56ede653e4b04a395b9a0449"},{"problem":81,"code":"(fn [& sets]\n  (let [c (count sets)]\n    (reduce #(if (= c (second %2)) (conj %1 (first %2)) %1) \n      #{} \n      (seq (frequencies (reduce #(into %1 %2) '() sets))))))","user":"56bb9ccce4b0f26550335959"},{"code":"(fn [s1 s2]\n  (loop [s s1 s2 s2 r #{}]\n    (if (not (seq s))\n      r\n      (if (s2 (first s))\n        (recur (rest s) s2 (conj r (first s)))\n        (recur (rest s) s2 r)))))","problem":81,"user":"4ec3b393535dcc7ae8597d59"},{"problem":81,"code":"#(let [v1 %1 v2 %2]\n    (clojure.set/select (fn [x] (contains? v1 x)) v2))","user":"57ecc16fe4b0bfb2137f5b83"},{"problem":81,"code":"(fn [s1 s2]\n    (->> (into [] (concat s1 s2))\n         (frequencies)\n         (filter #(= 2 (last %)))\n         (map #(first %))\n         (into #{})\n         ))","user":"515ebde3e4b01e5d11ccd0a8"},{"problem":81,"code":"(fn [a b]\n   (set (concat (filter #(contains? b %) a) (filter #(contains? a %) b))))","user":"541c1e46e4b01498b1a71a70"},{"code":"#(set (for [c %1 :when (%2 c)] c))","problem":81,"user":"4e9b22e2535dbda64a6f6b74"},{"code":"(fn inter [x y]\n  (\n    if(not-empty x)\n    (\n      if(contains? y (first x))\n        (set (cons (first x) (inter (rest x) y)))\n        (set (inter (rest x) y))\n    )\n  )\n)","problem":81,"user":"4fb7b80ae4b081705acca2d4"},{"problem":81,"code":"(fn [xs ys] (set (reduce (fn [a b] (if (contains? ys b) (conj a b) a)) #{} xs)))","user":"5830377ee4b051871117c004"},{"problem":81,"code":"(fn [& args] (set (map first (filter #(> (count %) 1) (partition-by identity (sort (apply concat args)))))))","user":"551535cee4b055c2f668d4df"},{"code":"#(set (filter %1 %2))\n\n;(fn intersect [c1 c2]\n;  (set (filter #(contains? c1 %) c2)))","problem":81,"user":"4fcc103fe4b0ee37620e185f"},{"code":"(fn my-intersection [X Y]\n\t(set (for [x X :when (contains? Y x)] x))\n  )","problem":81,"user":"529a73bde4b02ebb4ef75096"},{"problem":81,"code":"(fn my-intersect [a b]\n  (loop [[head & tail] (seq a) other-set b result #{}]\n    (let [new-result (if (contains? b head) (conj result head) result)]\n      (if (empty? tail)\n        new-result\n        (recur tail b new-result)\n        ))))","user":"53a511aae4b0b62ce3005735"},{"code":"(fn [a b] (set (filter (fn [c] (and (some #{c} a) (some #{c} b))) (concat a b))))","problem":81,"user":"4fd8544be4b0dab7d829f390"},{"problem":81,"code":"(fn [s t] (into #{} (filter #(get s %) t)))","user":"549c3e0ce4b0f3d1d8e70f87"},{"code":"#(-> (filter %2 %1) set)","problem":81,"user":"5294e44de4b02ebb4ef75016"},{"problem":81,"code":"(fn [a b] \n  (loop [fullSet (set (concat a b))\n            acc #{}]\n      (let [f (first fullSet)]\n         (if (nil? f) acc\n           (recur (next fullSet) \n             (if (and (contains? a f) (contains? b f))\n               (conj acc f) acc))))))","user":"56e02c1ce4b0ca2494a09602"},{"problem":81,"code":"(fn [set1 set2]\n  (set\n   (filter #(contains? set2 %) set1)))","user":"559c4236e4b066d22e731f67"},{"code":"(fn intersect \n   ([a b acc]\n    (cond \n     (empty? a) acc\n     (empty? b) acc\n     (b (first a)) (recur (rest a) b (conj acc (first a)) )\n     :else (recur (rest a) b acc )\n    )\n   )\n   ([a b]\n     (intersect a b #{})\n   )  \n  )","problem":81,"user":"4fb03cf4e4b081705acca262"},{"problem":81,"code":"(fn [a b] \n  (set(filter a b)))","user":"54026a0ce4b0df28a13c62ce"},{"problem":81,"code":"#(loop [a %1\n        b %2\n        c ()]\n   (if (zero? (count a))\n     (set c)\n     (recur (rest a) b (if (contains? b (first a))\n                         (conj c (first a))\n                         c))))","user":"595a3b41e4b066ee0a44afb7"},{"problem":81,"code":"(fn [coll1 coll2]\n  (set\n   (loop\n    [res #{}\n     cur coll1]\n    (cond\n     (empty? cur) res\n     (contains? coll2 (first cur)) (recur (conj res (first cur)) (rest cur))\n     :else (recur res (rest cur))))))","user":"5658d775e4b00d3155796114"},{"problem":81,"code":"(fn [seq1 seq2] (set (filter (fn [seq1-item] (contains? seq2 seq1-item)) seq1)))","user":"56bff105e4b060a8e693e3a4"},{"code":"(fn [a b] \n  (set (filter #(contains? a %1) b)))","problem":81,"user":"4e6dc5f5535d5021c1a895f0"},{"code":"(fn [x y]\r\n  \t  (let [set_1 (clojure.set/difference x y)\r\n\t\t        set_2 (clojure.set/difference y x)]\r\n\t\t      (clojure.set/difference (clojure.set/union x y) (clojure.set/union set_1 set_2))))","problem":81,"user":"4fbff228e4b081705acca320"},{"code":"(fn f\r\n   ([a b ret]\r\n      (if (empty? a)\r\n        (set ret)\r\n        (if (contains? b (first a))\r\n          (f (next a) b (cons (first a) ret))\r\n          (f (next a) b ret))))\r\n   ([a b]\r\n      (f a b nil)))","problem":81,"user":"4e059278535d04ed9115e7a5"},{"problem":81,"code":"(fn intersec[a b]\n  (clojure.set/difference a (clojure.set/difference a b)))","user":"57fc08d8e4b0d3187e900988"},{"code":"(fn [s1 s2] (set (filter #(contains? s2 %) s1)))","problem":81,"user":"50052d38e4b0678c553fc45c"},{"problem":81,"code":"(fn [sx sy] (reduce\n (fn [acc b] \n  (if (sy b)\n   (conj acc b)\n   acc))\n #{} sx\n))","user":"57f9011ee4b0d3187e900935"},{"problem":81,"code":"#(into #{} (filter (fn [itm] (contains? %2 itm) ) %1))","user":"5135a74ae4b04ac1f358dd46"},{"problem":81,"code":"(fn [as bs]\n  (set (for [a as b bs\n    :when (= a b)] a)))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":81,"code":"(fn [x y]\n      (clojure.set/difference(clojure.set/union x y)(set (reverse(clojure.set/union (clojure.set/difference x y) \n                          (clojure.set/difference y x))))))","user":"5f737899e4b02876ed9fd099"},{"problem":81,"code":"(fn\n  [s s1]\n  (into #{} (filter #(contains? s %) s1)))","user":"56c21eafe4b05cc29241ee7e"},{"problem":81,"code":"(fn [a b]\n  (reduce (fn [r x]\n            (if (b x)\n              (conj r x)\n              r))\n          #{}\n          a))","user":"5cbb0436e4b026601754b9cc"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n  (set (filter s2 s1)))","user":"5c3ac091e4b0d62ef62d9f95"},{"code":"(fn [a b] (set (map first (filter #(= 2 (count (second %))) (group-by identity (concat a b))))))","problem":81,"user":"4e9b230c535dbda64a6f6b75"},{"code":"(fn [a b] (set (remove #(nil? (a %)) b)))","problem":81,"user":"4dbbdf86535d3f4042261ece"},{"problem":81,"code":"(fn [set1 set2]\n  (clojure.set/select #(contains? set1 %) set2))","user":"558378dce4b05c286339e115"},{"problem":81,"code":"(fn [f & r]\n  (into #{} (filter #(reduce (fn [b s]\n                     (and b (get s %)))\n                     true\n                     r)\n                   \n          f)))","user":"539ddf25e4b0b51d73faaf3e"},{"problem":81,"code":"(fn [setA setB] (let [insetA (filter #(contains? setA %) setB) insetB (filter #(contains? setB %) setA)] (clojure.set/union (set insetA) (set insetB))))","user":"5f2c94b4e4b033932238a669"},{"problem":81,"code":"(fn [xs ys]\n   (reduce #(if (contains? ys %2) \n             (conj %1 %2) \n             %1) \n           #{} xs))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":81,"code":"(fn my-intersection \n  [coll1 coll2]\n  (into #{} (filter #(contains? coll2 %1) coll1)))","user":"5f003099e4b0cf489e8d7f17"},{"code":"#(reduce (fn [x y] (if (contains? %2 y) (into x #{y}) x)) #{} %1)","problem":81,"user":"539c9e26e4b0b51d73faaf2e"},{"code":"(fn [l1 l2]\n  (set (filter #(boolean (get l2 %)) l1)))","problem":81,"user":"4f3c772de4b0e243712b1f4c"},{"code":"(fn [set1 set2]\n  (cond (empty? set1) set2\n        (empty? set2 ) set1\n        :else  \n         (set (reduce into (map #(if (get set2 %) #{%} nil) set1 )))\n        \n\n  )\n  )","problem":81,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":81,"code":"(fn [v1 v2]\n    (set (filter #(contains? v2 %) v1))\n    )","user":"5cc6f982e4b0ccb06196282d"},{"problem":81,"code":"(fn [a b]\n     (into #{} (filter #(b %) a)))","user":"56df254be4b0ca2494a095ea"},{"code":"(fn [s1 s2]\n  (loop [set1 s1, result #{}]\n    (let [element (first set1)]\n      (if (empty? set1)\n        result\n        (recur\n          (rest set1)\n          (if (contains? s2 element)\n            (conj result element)\n            result))))))","problem":81,"user":"4e117dea535d04ed9115e7c9"},{"code":"(fn[S T](set(filter #(T %)S)))","problem":81,"user":"4db0114d838c48654951d9b8"},{"code":"(fn [as bs] (set (filter bs (filter as bs))))","problem":81,"user":"4dbad895535d1e037afb21ae"},{"problem":81,"code":"(fn my-intersection\n  [a b]\n  (reduce (fn [q x] (if (contains? b x) (conj q x) q)) #{} a))","user":"55c9bc1ee4b0e31453f649f1"},{"problem":81,"code":"(fn [a b]\n  (loop [a a\n         out #{}]\n    (if (or (empty? a) (empty? b))\n      out\n      (recur (rest a) (if (contains? b (first a)) (conj out (first a)) out)))))","user":"5530b827e4b076ab5578f818"},{"problem":81,"code":"(fn [s t]\n    (loop [q (clojure.set/union s t) i #{}]\n      (if (seq q)\n        (recur (rest q) (if (and (contains? s (first q)) (contains? t (first q)))\n                          (conj i (first q))\n                          i\n                          )) \n        i\n        )\n      )\n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":81,"code":"(fn [a b](set (filter #(contains? a %) b )))","user":"55306b8ae4b076ab5578f812"},{"problem":81,"code":"(fn [n m] (set (filter n m)))","user":"51c1b644e4b0d204dbe2ca12"},{"code":"(fn [s1 s2]\n  (set \n  \t(for [a s1 :let [b s2] :when (contains? s2 a)] a)))","problem":81,"user":"4f072644535dcb61093f6c20"},{"problem":81,"code":"#(set (reduce (fn [a i] \n                 (if (contains? %1 i)\n                   (conj a i)\n                   a)) [] %2))","user":"538db083e4b0b51d73faae74"},{"problem":81,"code":"(fn [s1 s2]\n    (set (remove (partial = nil) (map s1 s2))))","user":"5c58736be4b01df32ab73247"},{"code":"(fn [set-1 set-2]\n  (let [all (clojure.set/union set-1 set-2)\n        differences (clojure.set/union (clojure.set/difference set-1 set-2)\n                                       (clojure.set/difference set-2 set-1))]\n    (clojure.set/difference all differences)))","problem":81,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":81,"code":"(fn [setA setB]\n  (reduce #(if (contains? setB %2) (conj %1 %2) %1 ) #{} setA))","user":"57b55290e4b0fbc9809a27a9"},{"problem":81,"code":"(fn my-intersection\n  [s1 s2]\n  (set (filter #(get s2 %) s1)))","user":"56897739e4b0dcc4269f407d"},{"code":"(fn [s1 s2]\n  (set (filter #(s2 %) s1))\n)","problem":81,"user":"4fcad14ce4b0ee37620e1856"},{"code":"(fn\n  [& args]\n  (set (for [[k v] (frequencies (apply concat args)) :when (> v 1)] k)))","problem":81,"user":"51008b6fe4b0700a7a02d6e4"},{"code":"(fn [a b] (set (filter #(a %) b)))","problem":81,"user":"4e89ddf9535d3e98b8023284"},{"problem":81,"code":"(fn  [a b]\n  (clojure.set/select (fn [x] (contains? b x)) a))","user":"589f37e0e4b02bd94d917e79"},{"problem":81,"code":"#(let \n   [a (clojure.set/difference % %2) \n    b (clojure.set/difference %2 %) \n    c (clojure.set/union a b)] \n   (clojure.set/difference % c))","user":"5b924123e4b0c0b3ffbd4a34"},{"problem":81,"code":"(fn [x y]\n   (set (filter #(x %) y)))","user":"5a8bc2a1e4b05369db4d24ef"},{"code":"(fn [xs ys]\n  (clojure.set/difference xs (clojure.set/difference xs ys)))","problem":81,"user":"512eb1e7e4b0b740abc5982a"},{"code":"#(into #{} (filter (partial contains? %) %2))","problem":81,"user":"51bd1a0de4b0df1216cefd93"},{"code":"(fn [s1 s2]\n  (let [myfilter (fn [x] (contains? s2 x))]\n    (set (filter myfilter s1))))","problem":81,"user":"4edd9d79535d10e5ff6f532b"},{"problem":81,"code":"(fn set-intersection [a b]\n   (->> b\n        (map #(a %))\n        (filter #(not (nil? %)))\n        (set)))","user":"5bf5ddfde4b0bdcf453d159e"},{"code":"(fn inter [a b]\n  (if (empty? a)\n      (set nil)\n      (if (contains? b (first a))\n          (set (cons (first a) (inter (rest a) b)))\n          (recur (rest a) b))))","problem":81,"user":"4f7fc9a1e4b033992c121bee"},{"problem":81,"code":";; intersection of TWO sets only\n(comp set filter)","user":"54485749e4b032a45b8693c7"},{"problem":81,"code":"(letfn [(f [x y]\n           (let [[x' & xs' :as xss'] (seq x)]\n             (if (seq xss')\n               (if (contains? y x')\n                 (conj (f xs' y) x')\n                 (f xs' y))\n               #{})))]\n  f)","user":"540470dae4b0addc1aec6658"},{"code":"; not elegant as: (comp set filter)\n(fn [ & ss ]\n   (set (filter\n    (fn [n] (every? #(% n) ss))\n    (apply concat ss))))","problem":81,"user":"50de11b2e4b061dbdced7217"},{"problem":81,"code":"#(set (filter (fn[v](contains? %2 v)) %1))","user":"555c6344e4b0b056612e224c"},{"problem":81,"code":"(fn [set-1 set-2]\n  (set (filter #(and (contains? set-1 %) (contains? set-2 %)) \n               (into set-1 set-2))))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce #(if (contains? s2 %2) %1 (disj %1 %2)) s1 s1))","user":"540a4f20e4b0addc1aec66ef"},{"problem":81,"code":"(fn [s1 s2] (into #{} (filter #(clojure.set/subset? #{%1} s1) s2)) )","user":"5343753ae4b084c2834f4a1b"},{"code":"(fn [c1 c2] (set (filterv #(contains? c1 %) c2)))","problem":81,"user":"51f4d46ee4b0fca5e8b48243"},{"problem":81,"code":"(fn [a b]\n  (set (filter identity (map a b))))","user":"57008afae4b08d47c97781ca"},{"code":"(fn inter [s1 s2] (cond (empty? s1) #{}\n                        (contains? s2 (first s1))\n                            (conj (inter (rest s1) s2) (first s1))\n                        :else (inter (rest s1) s2)\n                  )\n)","problem":81,"user":"52474ec2e4b05ef8e38e6361"},{"problem":81,"code":"(fn algo\n  [lst1 lst2] \n  (set (filter #(contains? lst2 %) lst1)\n       )\n  )","user":"59e56c75e4b08badc2a0c556"},{"code":"(fn [a b] (set (filter #(not (nil? (b %))) a)))","problem":81,"user":"5150a7d7e4b03e678e393abb"},{"code":"#(set (apply filter %&))","problem":81,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":81,"code":"(fn[s1 s2]\n  (set\n   (filter s1 s2)))","user":"56eab346e4b04a395b9a0410"},{"problem":81,"code":"(fn [set-a set-b] (set (filter (fn [x] (contains? set-b x)) set-a)))","user":"53736ffce4b06d7f452d9e11"},{"problem":81,"code":"#(into #{} (for [x %1 y %2\n        \t\t:when (= x y)]\n        \tx))","user":"5e6ca949e4b04a83ad7cd289"},{"problem":81,"code":"(fn [a b](\n           set(filter (fn[x](contains? a x)) b)\n))","user":"56039843e4b04bb52996e1be"},{"code":"(fn [a b]\r\n  (clojure.set/difference a (clojure.set/difference a b)))","problem":81,"user":"50608ea0e4b07251188e4456"},{"problem":81,"code":"(fn my-intersection\n  [set1 set2]\n  (->>\n    (map key (remove (fn [x] (#{1} (val x))) (frequencies (sort (concat set1 set2)))))\n    set))","user":"59e8fef3e4b0249b72820743"},{"problem":81,"code":"(fn [s1 s2]\n\t(reduce\n     (fn [s elem]\n       (if (contains? s2 elem)\n         s\n         (disj s elem)))\n     s1\n     s1))","user":"507330e6e4b0e3170b5a8698"},{"problem":81,"code":"(fn inter [a b] (reduce conj #{} (filter #(contains? b %) a)))","user":"55f2b42be4b06e875b46ce4a"},{"problem":81,"code":"(fn [s1 s2]\n          (let [un (clojure.set/union s1 s2)\n                left (clojure.set/difference un s1 )\n                right (clojure.set/difference un s2 )\n                ]      \n            (clojure.set/difference un left right )   \n            )\n          )","user":"533c2605e4b0e30313ee6cd7"},{"problem":81,"code":"(fn [a b]\n  (reduce (fn [acc x] (if (b x) (conj acc x) acc)) #{} a))","user":"552d9b31e4b076ab5578f7eb"},{"code":"(fn [& args]\n  (reduce #(set (filter %1 %2)) \n          args))","problem":81,"user":"531c7f0de4b08068f379eda4"},{"code":"(fn [set1 set2]\n  (set (filter #(set1 %) set2)))","problem":81,"user":"52a55adee4b0c58976d9abe7"},{"code":"#(set (filter (fn [i] (some % #{i})) %2))","problem":81,"user":"4e49badd535dc968683fc4c9"},{"problem":81,"code":"(fn [a b]\n  (into #{} (filter #(contains? b %) a)))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":81,"code":"(fn [coll1 coll2]\n  (set(filter #(contains? coll2 %) coll1)\n  ))","user":"55240916e4b0882d96d091b6"},{"problem":81,"code":"(fn intersxn [s1 s2]\n  (set (filter (fn [x]\n                 (s1 x))\n               s2)))","user":"55f85b93e4b03cbcff9738ae"},{"code":"(fn [set1 set2]\n  (loop [set1,set1 res,#{}]\n    (cond\n     (empty? set1) res\n     (contains? set2 (first set1)) (recur (disj set1 (first set1)) (conj res (first set1)))\n     :else (recur (disj set1 (first set1)) res)\n     )))","problem":81,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"code":"(fn [a b] \n  (set (reduce (fn [c d] \n                 (let [e (some #{d} b)]\n                   (if (nil? e)\n                     c\n                     (conj c e))))\n               #{}\n               a)))","problem":81,"user":"52046600e4b0c283853240c5"},{"problem":81,"code":"(fn [a b]\n  (let [xs (for [x a y b] (set [x y]))\n        ys (filter #(= 1 (count %)) xs)]\n    (reduce clojure.set/union #{} ys)))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":81,"code":"(fn my-intersect [coll1 coll2]\n  (into #{} (filter (fn [curr] (some #(= % curr) coll2)) coll1)))","user":"56e53d2fe4b02e7e935eb6bc"},{"code":"(fn [s1 s2]\n    (into #{} (filter \n      #(and (contains? s1 %) (contains? s2 %))\n      (into s1 s2))))","problem":81,"user":"4fc7db47e4b0ee37620e182a"},{"problem":81,"code":"(fn [arg1 arg2]\n  (into #{} (filter (fn [x] (and (contains? arg1 x) (contains? arg2 x))) (concat arg1 arg2))))","user":"55f6f1d3e4b06e875b46cea0"},{"problem":81,"code":"(fn [s1 s2] (set (filter #(some #{%} s2) s1)))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":81,"code":"(fn inter [x y]\n  (set (filter #(contains? y %) x)))","user":"5d6febe6e4b04d129b00f2d5"},{"code":"(fn [lm rm]\n   (set (filter #(contains? lm %) rm)))","problem":81,"user":"50868795e4b004985b776e5e"},{"code":"(fn intersect-dat [s1 s2] \n  (into #{} (filter (fn has-value? [x] (some (fn is-eq? [n] (= x n)) s1)) s2)))","problem":81,"user":"52b71bd2e4b0c58976d9ad4d"},{"problem":81,"code":"(fn [col1 col2]\n  (set (filter #(contains? col2 %) col1)))","user":"56b1ab17e4b0982f16b37df1"},{"code":"(fn [a,b] (set (filter #(contains? b %) a)))","problem":81,"user":"4f21838fe4b0d66497709fd2"},{"problem":81,"code":"(fn [a b] (set (filter (every-pred a b) (into a b))))","user":"53ea5851e4b036ad0777e4e4"},{"problem":81,"code":"(fn [c1 c2]\n  (loop [coll1 c1\n         coll2 c2\n         data #{}]\n    (if-not (empty? coll1)\n      (let [element (first coll1)]\n        (if (contains? coll2 element)\n          (recur (rest coll1) coll2 (conj data element))\n          (recur (rest coll1) coll2 data)))\n      data)\n    ))","user":"5e84b48ee4b09a7a73c8bbc8"},{"code":"(fn this [v1 v2]\n  (set (filter #(contains? v2 %) v1)))","problem":81,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":81,"code":"(fn intersect2 [a b]\n  (into #{} (filter (fn [x] (contains? b x))\n                    a)))","user":"5d7aa22ee4b02e6b30c9354e"},{"code":"#(set (filter (fn [a] (%2 a)) %1))","problem":81,"user":"51bf4560e4b013aa0d74b817"},{"problem":81,"code":"(fn intersect [s1 s2]\n  (reduce\n    #(if (and (contains? s1 %2) (contains? s2 %2))\n       (conj %1 %2)\n       %1)\n    #{}\n    (into s1 s2)))","user":"5f300f28e4b033932238a682"},{"code":"(fn doset [sa sb]\n  (set (filter #(sa %) sb))\n  )","problem":81,"user":"50ae22c3e4b0a40c9cfb08d0"},{"code":"(fn [a b] \n           (set (reduce concat [] \n                        (filter #(= 2 (count %)) \n                                (map val \n                                     (group-by identity \n                                               (concat (seq a) \n                                                       (seq b))))))))","problem":81,"user":"4f03f197535dcb61093f6b84"},{"problem":81,"code":"(fn [s1 s2] (set (filter #(contains? s1 %) s2)) )","user":"56baab13e4b0f26550335948"},{"problem":81,"code":"(fn set-intersection [s1 s2]\n  (set (filter #(not (nil? %)) (map #(s1 %) s2))))","user":"58327a08e4b089d5ab817c7c"},{"problem":81,"code":";; #(set (filter (fn [x] (contains? %1 x)) %2))\n#(set (filter % %2))","user":"56d91a53e4b0ea9b8538f7ee"},{"problem":81,"code":"; my first solution\n; (fn [a b] (reduce #(if (contains? a %2) (conj %1 %2) %1) #{} b))\n\n; but this one is most expressive\n#(set (filter %1 %2))","user":"5aa4f7dae4b0d174b936c88c"},{"code":"(fn [xs ys] (into #{} (filter #(contains? ys %) xs)))","problem":81,"user":"50045388e4b0678c553fc44e"},{"code":"(fn [s1 s2]\r\n  (reduce #(if (contains? s1 %2) (conj % %2) %) #{} s2))","problem":81,"user":"4facff22e4b081705acca230"},{"problem":81,"code":"(fn [left right]\n  (set (filter #(contains? left %) right)))","user":"5a23503fe4b0ff51aa4b32d6"},{"problem":81,"code":"(fn\n  [set1 set2]\n  (apply hash-set (filter #(contains? set2 %) set1)))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":81,"code":"(fn my-intersection [set-a set-b]\n  (reduce\n    (fn [set-intersect item]\n      (if (contains? set-b item)\n        (conj set-intersect item)\n        set-intersect))\n    #{}\n    set-a))","user":"5890799be4b00487982d51d6"},{"code":"(fn [set1 set2]\n     (reduce #(if (contains? set2 %2)\n                (conj % %2)\n                %)\n             #{} set1))\n\n;; #(set (filter % %2))","problem":81,"user":"503f4759e4b00d1a725ff2a9"},{"code":"(fn intersect [res s1 s2]\n  (let [x (first s1)\n        xs (rest s1)]\n    (if (empty? s1)\n      res\n      (if (s2 x)\n        (intersect (conj res x) xs s2)\n        (intersect res xs s2))))) #{}","problem":81,"user":"5225a0f5e4b01819a2de430e"},{"code":"(fn [set1 set2]\n  (reduce\n   (fn [a item]\n     (if (> (second item) 1)\n       (conj a (first item))\n       a))\n   (hash-set)\n   (frequencies\n    (into (vec set1) set2))))","problem":81,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn [a b] (into #{} (for [x a :when (contains? b x)] x)))","problem":81,"user":"4f0660ee535dcb61093f6c0d"},{"code":"#(set (filter (complement nil?) (map % %2)))","problem":81,"user":"5102ac9de4b00c483ae176fa"},{"problem":81,"code":"(fn sk-intersection [a b]\n  (set (filter a b)))","user":"51d42f44e4b013d740b70ddb"},{"problem":81,"code":"(fn [set1 set2] (clojure.set/select #(contains? set2 %) set1))","user":"58d3d6a3e4b03c36ff7e592b"},{"code":"(fn [s1 s2]\r\n   (->> s2\r\n     (filter s1)\r\n     set))","problem":81,"user":"4def301c535d08e6dec9fe12"},{"problem":81,"code":"(fn doset [sa sb]\n  (set (filter #(sa %) sb)))","user":"56f4623ae4b046a417f9205d"},{"problem":81,"code":"(fn [a b]\n  (apply sorted-set (filter #(some #{%} a) b)))","user":"594c0bd7e4b07ddc2dafae56"},{"problem":81,"code":"(fn [xs ys]\n    (set \n    (concat\n    (filter (fn [y] (contains? xs y)) ys)\n    (filter (fn [x] (contains? ys x)) xs)\n    )))","user":"56967bc0e4b0dcc4269f4131"},{"code":"(fn [s1 s2] (set (for [x s1 :when (contains? s2 x)] x)))","problem":81,"user":"4efd98fa535de96065cf5086"},{"problem":81,"code":"(fn [s t]\n  (set (keys (select-keys (apply hash-map (interleave s (repeat true))) t))))","user":"5d8b4960e4b0915913b1d3d3"},{"code":"(fn [s1 s2]\n  (apply disj (clojure.set/union s1 s2)   \n      (clojure.set/union \n          (clojure.set/difference s1 s2) \n          (clojure.set/difference s2 s1)\n      )\n  )\n)","problem":81,"user":"5029f263e4b023940c84aa45"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [acc n]\n            (if (some #{n} s1)\n              (conj acc n)\n              acc)) #{} s2)\n  )","user":"5df75fd8e4b0a607a9a45c92"},{"code":"(fn [s1 s2] (loop [r s1, acc #{}] (if (empty? r) acc (recur (disj r (first r)) (if (contains? s2 (first r)) (conj acc (first r)) acc)))))","problem":81,"user":"53629381e4b0243289761e54"},{"problem":81,"code":"(fn [coll-one coll-two]\n  (set (filter #(contains? coll-two %) coll-one)))","user":"5391ab43e4b0b51d73faaea6"},{"problem":81,"code":"#(clojure.set/select % %2)","user":"542a8d07e4b01498b1a71b43"},{"problem":81,"code":"(fn [coll1 coll2]\n  (set (map first\n            (remove (fn [x] (> 2 (count x)))\n                    (partition-by identity (sort (interleave coll1 coll2)))))))","user":"4e7e241a535db169f9c79705"},{"code":"(fn [a b] (set (filter (fn [x] (get b x)) a)))","problem":81,"user":"51307b84e4b08c712d3fae39"},{"problem":81,"code":"#(into #{} (remove (clojure.set/difference %1 %2) %1))","user":"532a033be4b09d4e7a9b551f"},{"code":"(fn my-intersection [a b]\n   (set (filter #(b %) a)))","problem":81,"user":"4e89f46c535d3e98b8023288"},{"code":"(fn [s1 s2]\r\n  (reduce #(if (s1 %2) (conj %1 %2) %1) #{} s2))","problem":81,"user":"4f29cdc8e4b0d6649770a033"},{"problem":81,"code":"(fn\n  [s1 s2]\n  (reduce (fn\n            [coll curr]\n            (if (contains? s2 curr)\n              (conj coll curr)\n              coll))\n          #{} s1))","user":"5c05cae7e4b0bdcf453d16a3"},{"problem":81,"code":"(fn f\n  [a b]\n  (into #{} (mapcat #(let [n %]\n                       (filter (fn [x] (= n x)) b)) a)))","user":"59e778aae4b0249b72820716"},{"code":"(fn [a b]\n  (set (filter #(contains? a %)\n          \t   b)))","problem":81,"user":"518a8c4be4b0df82f5685903"},{"problem":81,"code":"(fn [set1 set2]\n  (reduce conj\n          #{}\n          (filter #(contains? set1 %) set2)))","user":"5ff61113e4b06df49cee1492"},{"problem":81,"code":"(fn [s1 s2] (set (filter identity (map #(s1 %) s2))))","user":"54d2b411e4b0e8a36923e5f9"},{"code":"(fn [l r]\n  (set (filter l r)))","problem":81,"user":"5027fc0ce4b01614d1633ff2"},{"code":"(fn [fset sset]\n  (loop [pset fset\n        result #{}]\n  (if (empty? pset)\n    result\n    (recur (rest pset) \n           (if (sset (first pset))\n             (conj result (first pset))\n             result)))))","problem":81,"user":"531d34cfe4b08068f379edac"},{"code":"(fn [s1 s2]\n  (loop [accu #{}\n   s1 s1]\n    (cond (empty? s1) accu\n\t  (nil? (s2 (first s1))) (recur accu (rest s1))\n\t  true (recur (conj accu (first s1)) (rest s1)))))","problem":81,"user":"4e82c062535db62dc21a62cc"},{"problem":81,"code":"#(apply sorted-set (filter (fn [x] (contains? %1 x))%2))","user":"5948adffe4b07ddc2dafadc6"},{"problem":81,"code":"(fn [& args] (set (reduce (fn [remaining n] (filter #(contains? n %) remaining)) (first args) (rest args))))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":"#(let\n  [x (clojure.set/union %1 %2)\na (clojure.set/difference %1 %2)\nb (clojure.set/difference %2 %1)\nu (clojure.set/union a b)]\n(clojure.set/difference x u))","problem":81,"user":"5012614ee4b02a085b99dc79"},{"problem":81,"code":"(fn [set1 set2] \n  (set (filter #(set2 %) set1))    \n    )","user":"54cb3497e4b057c6fda3a272"},{"problem":81,"code":"(fn my-set-intersec [lst1 lst2] \n  (set (filter #(contains? lst1 %) lst2)))","user":"59dd387be4b0a0ac046f2502"},{"problem":81,"code":"(fn f [a b] (loop [result #{} a a]\n                (cond (empty? a) result\n                      (contains? b (first a)) (recur (conj result (first a)) (rest a))\n                      :else (recur result (rest a)))))","user":"5ea6fe98e4b00a66d4a951b2"},{"problem":81,"code":"(fn [s1 s2] \n\t(set (map first\n\t\t(filter #(> (second %) 1) \n\t\t\t(frequencies (into (into [] s1) s2))))))","user":"53a94b63e4b047364c044434"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [x (if (> (count set1) (count set2)) set1 set2) \n         y (if (> (count set1) (count set2)) set2 set1)\n         accum #{}]\n    (cond (empty? x) accum \n          (contains? y (first x)) (recur (rest x) y (conj accum (first x)))\n          :else (recur (rest x) y accum))))","user":"554dff83e4b00713264bd98d"},{"problem":81,"code":"(fn [a b]\r\n  (let [u (clojure.set/union a b)\r\n        diffa (clojure.set/difference a b)\r\n        diffb (clojure.set/difference b a)\r\n        diffu (clojure.set/union diffa diffb)\r\n        inter (clojure.set/difference u diffu)]\r\n    inter))","user":"56f514cee4b046a417f92068"},{"problem":81,"code":"(fn[sq1 sq2](set(remove false? (map (fn[x] (if (contains? sq1 x) x false)) sq2))))","user":"55757e81e4b05c286339e063"},{"problem":81,"code":"(fn [c1 c2] (set (filter (complement nil?) (map #(c1 %) c2))))","user":"576df252e4b0979f8965156f"},{"code":"(fn [s1 s2]\n    (reduce (fn [acc x]\n              (if (s2 x)\n                (conj acc x)\n                acc))\n            #{}\n            s1))","problem":81,"user":"4dad938fc9a9d6ed1b99dc57"},{"problem":81,"code":"#(set (filter (complement nil?) (for [a %1 b %2] (if (= a b) a))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"code":"(fn [s1 s2] (set (remove nil? (map #(s1 %2) s1 s2))))","problem":81,"user":"5032b398e4b00c0952a257eb"},{"problem":81,"code":"#(let [d clojure.set/difference](d % (d % %2)))","user":"5507cfd3e4b021ccfedb96ad"},{"problem":81,"code":"(fn intersec\n  [n1 n2]\n  (into #{} (for [x n1 :when (contains? n2 x)] x)))","user":"5e95013fe4b0fbed045a3800"},{"problem":81,"code":"#(into #{} (for [i %2 :when (% i)] i))","user":"53fb4843e4b0de5c4184857d"},{"code":"(fn [as bs] (set (filter #(contains? bs %) as)))","problem":81,"user":"52d3f666e4b09f7907dd1327"},{"problem":81,"code":"(fn my-intersection\n  [s1 s2]\n  (let [l1 (sort s1)\n        l2 (sort s2)]\n    (into (sorted-set)\n          ((fn inner-intersection\n             [l1 l2]\n             (cond\n              (empty? l1) '()\n              (empty? l2) '()\n              (= (first l1) (first l2))\n              (conj (inner-intersection (rest l1) (rest l2)) (first l1))\n              (< (compare (first l1) (first l2)) 0)\n              (inner-intersection (rest l1) l2)\n              :else (inner-intersection l1 (rest l2)))) l1 l2))))","user":"545d881de4b01be26fd7466f"},{"code":"(fn [x y] (into #{} (flatten (filter #(> (count %) 1) (partition-by identity (sort (into (into [] y) x)))))))","problem":81,"user":"4ea11921535d7eef308072af"},{"code":"(fn [A B]\n (set\n  (for [a A b B :when (= a b) ] a)))","problem":81,"user":"4e356d2b535deb9a81d77f2d"},{"code":"(fn [x y]\n  (set\n   (filter #(contains? x %) y)))","problem":81,"user":"4e89ff3d535d3e98b802328a"},{"code":"(fn [s1 s2] (clojure.set/select #(contains? s2 %) s1))","problem":81,"user":"4fb3fec7e4b081705acca2a7"},{"problem":81,"code":"(fn foo [& all]\r\n  (reduce \r\n    #(set (filter %1 %2))\r\n    all))","user":"606e0a42e4b069485764de19"},{"code":"(fn [x y] (reduce #(if (contains? x %2) (conj %1 %2) %1) #{} y))","problem":81,"user":"4e5bdc2b535d8a8b8723a2bb"},{"problem":81,"code":"(fn [s1 s2] (if (< (count s2) (count s1))\n                (recur s2 s1)\n                (reduce (fn [result item]\n                          (if (contains? s2 item)\n                            result\n                            (disj result item)))\n                        s1 s1)))","user":"563ed73ae4b08d4f616f5ecb"},{"code":"(fn [xs ys]\n  (set (map first (filter (comp (partial = 1) count set) (for [x xs y ys] [x y])))))","problem":81,"user":"4feaa579e4b0140c20fb9c0b"},{"code":"(fn [a b]\n  (into #{}\n  (filter (complement nil?)\n  (for [x a]\n    (if (contains? b x) x nil)))))","problem":81,"user":"4ef0a39b535dced4c769f20c"},{"problem":81,"code":"(fn solve [a b]\n  (loop [result #{}\n         a a\n         b b]\n\n    (let [x (some a b)]\n      (if (nil? x)\n        result\n        (recur (conj result x)\n               (disj a x)\n               (disj b x))))))","user":"60537cd1e4b04c8f2157d152"},{"problem":81,"code":"(fn [s d] (set (filter s d)))","user":"5659679ae4b068f2fe63dbeb"},{"problem":81,"code":"#(set (filter (fn [val] (%1 val)) %2))","user":"57d0cd58e4b0bd073c20235e"},{"problem":81,"code":"(fn [a b] (set (sort (filter #(contains? a %) b))))","user":"59473563e4b07ddc2dafad97"},{"code":"(fn [coll1 coll2]\r\n       (if (< (count coll1) (count coll2))\r\n         (recur coll2 coll1)\r\n         (reduce #(if (contains? coll2 %2)\r\n                    (conj %1 %2)\r\n                    %1)\r\n                 #{}\r\n                 coll1)))","problem":81,"user":"4dbe19fe535d020aff1edf59"},{"problem":81,"code":"(fn my-intersection\n  ([] #{})\n  ([xs] xs)\n  ([xs ys]\n   (let [xsr (set (filter ys xs))]\n     (set (filter xsr ys))\n     )\n   )\n  ([xs ys & zs]\n   (let [xsr (set (filter ys xs))\n         ysr (set (filter xsr ys))]\n     (apply my-intersection ysr zs))\n   )\n  )","user":"5488872ee4b0e286459a11d3"},{"code":"(fn my-intersection [s1 s2]\n  (set (filter #(s2 %) s1))\n)","problem":81,"user":"50e496e8e4b0cb9ec68fbca0"},{"code":"(fn [s s2] (set (filter #(contains? s2 %) s)))","problem":81,"user":"4f7869c2e4b0fbe0118ec589"},{"problem":81,"code":"#_(fn [set1 set2] \n   (reduce (fn [coll a] (if (nil? (set2 a))\n                          coll\n                          (conj coll (set2 a)))) \n                          #{} set1))\n  \n(fn [set1 set2]\n  (into #{} (filter set1 set2)))","user":"5d046f7ce4b0cc9c915881d5"},{"code":"(fn [xs ys]\n  (reduce #(if (contains? ys %2) (conj % %2) %) #{} xs))","problem":81,"user":"4e71a12c535d5021c1a8964f"},{"code":"(fn [a b] (set (for [x (seq a) :when (b x)] x)))","problem":81,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn[a b] (apply hash-set (filter #(contains? b %) a)))","problem":81,"user":"525ed5f4e4b0cb4875a45db8"},{"problem":81,"code":"(fn [x y] \n   (set\n    (reduce\n     #(if (y %2) (conj %1 %2) %1) #{} x)))","user":"56012cd7e4b04bb52996e17d"},{"code":"(fn [s1 s2]\n  (if (< (count s2) (count s1))\n      (recur s2 s1)\n      (reduce (fn [result item]\n                (if (contains? s2 item)\n  \t                result\n                    (disj result item)))\n       s1 s1)))","problem":81,"user":"4e5d0e96535d8a8b8723a2c8"},{"problem":81,"code":"(fn [c1 c2]\n  \t(clojure.set/difference (clojure.set/union c1 c2) (clojure.set/union (clojure.set/difference c1 c2) (clojure.set/difference c2 c1))))","user":"608ec5e4e4b03bd49d9f36c0"},{"code":"(fn [a b] (set (for [x (frequencies (interleave a b)) :when (> (val x) 1)] (key x))))","problem":81,"user":"4e61bb60535d8ccf87e9fe5c"},{"problem":81,"code":"(fn ntrsct [a b]\n  (set (filter a b)))","user":"5703eda3e4b08d47c9778200"},{"code":"(fn [s t]\n  (clojure.set/difference\n  (clojure.set/difference \n    (clojure.set/union s t) \n(clojure.set/difference t s))\n(clojure.set/difference s t)))","problem":81,"user":"4fbd12a5e4b081705acca2fd"},{"problem":81,"code":"(fn set-intersection [A B]\n  (set (filter A B)))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":81,"code":"(fn [a b]\n  (let\n    [out (transient #{})]\n    (do\n      (doseq [i b]\n        (if\n          (contains? a i) (conj! out i)))\n      (persistent! out))))","user":"5e6e6537e4b04a83ad7cd29a"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter #(contains? s2 %) s1))\n  )","user":"6004c750e4b074f607df6645"},{"problem":81,"code":"#(into #{} (for [x %1 :when (contains? %2 x)] x))","user":"56347285e4b0bfe05bf117bc"},{"code":"#(apply disj % (apply disj % %2))","problem":81,"user":"50127fbfe4b030d97e4db70f"},{"problem":81,"code":"(fn [set1 set2]\n  (->> (concat set1 set2)\n       (filter #(and (set1 %) (set2 %)))\n       (into #{})))","user":"58182480e4b0c0e9c07b83a7"},{"problem":81,"code":"(fn [x y] (set (remove nil? (map #(if (contains? x %) %) y))))","user":"574a71b7e4b02ea1147991fb"},{"code":"(fn [as bs] (set (filter bs as)))","problem":81,"user":"4ddc1c89535d02782fcbea01"},{"code":"#(loop [s1 %1 s2 %2 r []]\n\t(if (empty? s1)\n\t\t(set r)\n\t\t(let [x (first s1), s11 (rest s1)]\n\t\t\t(if (s2 x)\n\t\t\t\t(recur s11 s2 (conj r x))\n\t\t\t\t(recur s11 s2 r)))))","problem":81,"user":"5370b386e4b0fc7073fd6e9b"},{"code":"(fn set-intersection [a b]\r\n    (set (filter #(contains? b %) a)))","problem":81,"user":"4f039524535dcb61093f6b2c"},{"problem":81,"code":"(fn [left right]\n  (into #{} (filter #(and (left %) (right %)) (concat left right))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":81,"code":"#(set (for [x %, y %2 :when (= x y)] x))","user":"52eb2ec9e4b0705949c44439"},{"problem":81,"code":"#(into (sorted-set) (filter %1 %2))","user":"590b8607e4b047aa04b199db"},{"code":"(fn [a b] (set (filter #(not (nil? %)) (map #(a %) b))))","problem":81,"user":"52f10094e4b05e3f0be25ee8"},{"problem":81,"code":"(fn set-intersection\n  [a b]\n  (into #{} (map #(first %) (filter #(not (empty? %)) (let [ret #{}]\n    (for [x (identity a)\n          y (identity b)]\n      (if (= x y)\n        (conj ret x)\n        ret)))))))","user":"59b9e669e4b0a024fb6ae3db"},{"problem":81,"code":"#(clojure.set/union (set (filter (partial contains? %2) %)) \n                    (set (filter (partial contains? %) %2)))","user":"5d5166d9e4b0776584bd6f5e"},{"code":"(fn [s & sets]\n  (reduce (fn [acc e] (if (every? #(%1 e) sets) (conj acc e) acc)) #{} s))","problem":81,"user":"533ab9abe4b0e30313ee6cbf"},{"code":"(fn newintersection [x y]\n     (loop [counter (- (count x) 1), result (vec x)]\n       (if (>= counter 0)\n         (if (some (set (list (get result counter))) y)\n           (recur (dec counter) result)\n           (recur (dec counter) (vec (disj (set result) (get result counter)))))\n         (set result))))","problem":81,"user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn [a b]\n  (set (filter identity (for [x a] (if (contains? b x) x)))))","problem":81,"user":"5250b7a5e4b0541d1855b83e"},{"problem":81,"code":"(fn [c1 c2]\n  (into #{}\n    (filter #(contains? c2 %) c1)\n  )\n)","user":"562add6de4b00e49c7cb4834"},{"code":"(fn [a b]\n  (set (keys (filter #(> (second %) 1) (frequencies (interleave a b))))))","problem":81,"user":"52af7a5ce4b0c58976d9acbd"},{"code":"(fn [& sets] (loop [result (first sets) elems (vec (first sets)) others (next sets)]\n               (if (nil? elems)\n                 result\n                 (if (every? (fn [s] (s (first elems))) others)\n                   (recur result (next elems) others)\n                   (recur (disj result (first elems)) (next elems) others)\n                 )\n               )\n             )\n)","problem":81,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn [s1 s2] (into #{} (for [v s1\n                            :when (s2 v)]\n                        v)))","problem":81,"user":"50366589e4b0fbe0a74d26c3"},{"code":"#(set (keep % %2))","problem":81,"user":"4e52d815535d302ef430da77"},{"code":"(fn [x y] (reduce #(if (contains? y %2) (conj % %2) %) #{} x))","problem":81,"user":"51fa7154e4b0f1313d4689da"},{"code":"(fn set-intersection\n  [xs ys]\n  (letfn [(reduction [result item]\n            (if (and (contains? xs item) (contains? ys item))\n              (conj result item)\n              result))]\n    (set (reduce reduction [] (into xs ys)))))","problem":81,"user":"511720eae4b0063b4e3e16da"},{"problem":81,"code":"#(let [diff clojure.set/difference]\n   (diff %1 (diff %1 %2)))","user":"5ec6de19e4b08d0ec38692da"},{"problem":81,"code":"#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/difference %1 %2) (clojure.set/difference %2 %1) )","user":"5594e0e3e4b0c79f6e1db95b"},{"code":"#(set (for [v % :when (contains? %2 v)] v))","problem":81,"user":"4e8f4f64535d65386fec2149"},{"code":"(fn [x y] \n  (set (keys (filter #(> (second %) 1) \n                (frequencies \n                 (concat x y))))))","problem":81,"user":"51823a97e4b0f2adb733651e"},{"problem":81,"code":"(fn [data1 data2]\n  (into #{} (flatten\n    (for [x data1\n      :when (contains? data2 x)]\n      (conj '() x)))))","user":"57b19fa1e4b0fbc9809a2754"},{"code":"#(clojure.set/difference (clojure.set/union % %2) (clojure.set/difference % %2) (clojure.set/difference %2 %))","problem":81,"user":"4f0c84ce535d0136e6c2230e"},{"problem":81,"code":"(fn [seq1 seq2]\n  (into #{}\n        (for [x seq1\n              :let [y x]\n              :when (contains? seq2 x)]\n          y)\n        )\n  )","user":"5a754d36e4b0512ff01cdac7"},{"code":"(fn [coll1 coll2]\n    (disj (set (map coll1 coll2)) nil))","problem":81,"user":"50d46d53e4b09cc622d65a69"},{"problem":81,"code":"(fn my-intersection [& sets]\n\t(reduce\n\t\t#(set (filter %1 %2)) ; # set 1, set 2\n\t\tsets\n\t)\n)","user":"5d73530ce4b02e6b30c93514"},{"code":"(fn [s1 s2]\n  (set (concat (filter #(s2 %) s1) (filter #(s1 %) s2))))","problem":81,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(fn [x y] (set (filter #(contains? y %) x)))","problem":81,"user":"4e5d1912535d8a8b8723a2c9"},{"code":"(fn [s1 s2] (set (reduce #(if (s2 %2) (conj %1 %2) %1) #{} s1)))","problem":81,"user":"52015698e4b0d7096e99ddba"},{"code":"(fn [coll1 coll2] (set (filter (comp not nil?) (map coll1 coll2))))","problem":81,"user":"506b8242e4b0eda3100c090a"},{"problem":81,"code":"(fn [setA setB]\n    (set (filter #(some #{%} setB)  setA))\n   )","user":"57aa103be4b0b8559636fc64"},{"code":"#(set (keep identity (for [x %] (get %2 x))))","problem":81,"user":"5102489de4b00c483ae176f6"},{"code":"(fn [lista1 lista2]\r\n  (set (filter #(not= (get lista2 %) nil) lista1)))","problem":81,"user":"50576483e4b001218172198b"},{"code":"(fn [set1 set2]\n    (set (for [s1 set1, s2 set2, :when (= s1 s2)] s1)))","problem":81,"user":"4e89e939535d3e98b8023287"},{"code":"(fn intersect- [a b]\r\n  (into #{}\r\n  (reduce #(if (contains? b %2) (conj %1 %2) %1) #{} a)))","problem":81,"user":"504ec4d3e4b069badc5a33c9"},{"problem":81,"code":"(fn [s1 s2]\n    (reduce (fn [intersect el]\n              (if (contains? s2 el)\n                (conj intersect el)\n                intersect))\n            #{}\n            s1))\n\n;; (comp set filter) is pretty damn awesome wish I thought of that","user":"5df70ee8e4b0a607a9a45c8a"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [s (sort (seq (concat s1 s2))) res #{}]\n    (if (empty? s)\n      res\n      (if (= (first s) (second s))\n        (recur (rest (rest s)) (conj res (first s)))\n        (recur (rest s) res)))))","user":"5c7d5a0ce4b0d597f478caab"},{"problem":81,"code":"(fn [res li] (reduce #(if (not= () (filter (partial = %2) res)) (conj %1 %2) %1) #{} li))","user":"54be7e93e4b0ed20f4ff6eed"},{"code":"(fn [A B]\n  (clojure.set/difference \n    (clojure.set/union A B)\n    (clojure.set/union \n      (clojure.set/difference A B)\n      (clojure.set/difference B A))))","problem":81,"user":"5054c853e4b0b1b9d1860eb3"},{"code":"(fn [s1 s2]\n  (reduce (fn [result item]\n            (if (contains? s2 item)\n              result\n              (disj result item)))\n          s1 s1))","problem":81,"user":"51b89503e4b050a1176cd69a"},{"problem":81,"code":"(fn intersect [a b]\n  (set (filter #(contains? b %) a)))","user":"547e3846e4b0c51c1f4d7302"},{"problem":81,"code":"(fn [s t] (set (map first (filter #(= (first %) (fnext %)) (for [a s b t] [a b] )))))","user":"4fc4eb1ee4b081705acca354"},{"code":"(fn [ a b]\n     (set (filter (comp not nil?) (map #(if (contains? a %) % ) b))))","problem":81,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn ! [x y]\n  (if (empty? x) #{}\n    (let [f (first x) r (! (rest x) y)]\n      (if (contains? y f)\n        (conj r f)\n        r))))","problem":81,"user":"52faec2ee4b047fd55837004"},{"problem":81,"code":"(fn [p q] (set (reduce #(if (contains? q %2) (conj %1 %2) %1) #{} p)))","user":"55f4ef68e4b06e875b46ce82"},{"problem":81,"code":"(fn [s1 s2] (set (filter #(contains? s2 %1) s1)))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn [a b]\n  (let [diff (clojure.set/difference a b)]\n    (clojure.set/difference a diff)))","problem":81,"user":"52e276d9e4b09f7907dd1436"},{"code":"(fn [x y] \n  (reduce \n    (fn [a x] \n      (if (contains? y x) \n          (conj a x) \n          a)) #{} x))","problem":81,"user":"504f3f13e4b0a02f9cffde60"},{"problem":81,"code":"(fn [a b] (set (apply concat (for [x a] (for [y b :when (= x y)] x)))))","user":"593dfe60e4b069cdc2982bb1"},{"problem":81,"code":"(fn [a b]\n  (reduce #(if (b %2) (conj %1 (b %2)) %1)\n          #{}\n          a))","user":"521ed5b4e4b0e6c71e0c0bc0"},{"problem":81,"code":"(fn [set1 set2] (into #{} (filter set1 set2)))","user":"57a4fa50e4b0a966079561f1"},{"problem":81,"code":";; \"some\" evaluates one element of a against the whole of b at once\n(fn [a b]\n   (loop [a a\n          b b\n          return []]\n     (if (empty? a)\n       (set return)\n       (if (some #(= (first a) %) b)\n         (recur (rest a) b (conj return (first a)))\n         (recur (rest a) b return)))))","user":"57c44053e4b05aa3c4741ccb"},{"problem":81,"code":"(fn [l1 l2]\n  (loop [col1 l1 res #{}]\n    (if (seq col1)\n      (if (some (partial = (first col1)) l2)\n        (recur (rest col1) (conj res (first col1)))\n        (recur (rest col1) res))\n      res)))","user":"57c7cef5e4b05aa3c4741d0d"},{"problem":81,"code":"(fn [x y]\n    (loop [s_x x s_xy #{}]\n          (if (empty? s_x)\n              s_xy\n              (recur (rest s_x) (if (contains? y (first s_x)) (conj s_xy (first s_x)) s_xy)))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn [ s r ]\n  (reduce #(if (contains? s %2) (conj %1 %2) (set %1))\n   #{}\n   r ))","problem":81,"user":"4ec28d86535dfed6da9c6dbc"},{"code":"(fn [a b]\n   (loop [ic a\n          result #{}]\n     (let [m (some ic b)]\n       (if (not m)\n         result\n         (recur (disj ic m) (conj result m))))))","problem":81,"user":"52090567e4b0e152394d76ed"},{"problem":81,"code":"#(into #{} (filter (comp not nil?) (for [item %1] (if (contains? %2 item) item))))","user":"5820cca0e4b04b46fc4b0f62"},{"problem":81,"code":"(fn [set1 set2]\n  (set (for [e set1 :when (set2 e)] e)))","user":"53213810e4b09d4e7a9b54b0"},{"code":"(fn [x y] \n\t\t(into #{}\t(filter #(x %) y)))","problem":81,"user":"518644bce4b0da5a5be3baca"},{"code":"#(loop [frs %1 snd %2 result #{}]\r\n  (cond\r\n    (empty? frs) result\r\n    (contains? snd (first frs)) \r\n      (recur  (next frs) snd (conj result (first frs)))\r\n    true (recur (next frs) snd result)\r\n   )\r\n )","problem":81,"user":"4fe588b6e4b0e8f79898fec5"},{"problem":81,"code":"(fn [a b]\n  (let [ba (clojure.set/difference b a)\n        ab (clojure.set/difference a b)]\n    (clojure.set/difference (clojure.set/union a b) ba ab)))","user":"5f419985e4b0955706451fab"},{"problem":81,"code":"(fn [set1 set2]\n  (set (filter (fn [x]\n            (some #(= % x) set2))\n          set1)))","user":"5d64013ce4b0c9e5857d502d"},{"problem":81,"code":"(fn [s t]\n   (into #{} (filter #(contains? t %) s)))","user":"55f8b32ae4b03cbcff9738ba"},{"code":"(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/union (clojure.set/difference (clojure.set/union x y) x) (clojure.set/difference (clojure.set/union x y) y))))","problem":81,"user":"503ff621e4b0c9bf6384b00f"},{"problem":81,"code":"#(set (for [e %1 :when (contains? %2 e)] e))","user":"54bec835e4b0ed20f4ff6ef7"},{"problem":81,"code":"(fn [set1 set2]\n  (set (filter (comp not nil?) (map set1 set2))))","user":"53e241a6e4b036ad0777e3f0"},{"problem":81,"code":";; This should be `keep`, not `filter`.  Wonder if I'll\n;; remember that the next time I go through these...\n#(set (filter %1 %2))","user":"59eb63e3e4b0249b7282077c"},{"code":"(fn [x y]\r\n  (set (filter #(contains? y %) x)))","problem":81,"user":"504e2333e4b0f6ff3350c46c"},{"problem":81,"code":";; http://www.4clojure.com/problem/81\n(fn intersect-sets\n  [set-a set-b]\n  (into #{} (filter #(contains? set-a %) set-b)))","user":"5c92105ce4b048ec896c59f7"},{"problem":81,"code":"(fn [set1 set2]\n  (reduce (fn [acc item] (if (set2 item) (conj acc item) acc)) #{} set1))","user":"58bc6a88e4b0888cdc949d16"},{"code":";(fn [x y]\n;  (set (remove nil? (map #(when (y %) %) x))))\n\n;(fn [x y]\n;  (set (filter #(y %) x)))\n\n#(set (filter %2 %1))","problem":81,"user":"52d469c8e4b09f7907dd1330"},{"code":"(fn m [a b] \n  (set (flatten ((fn my-func [s1 s2]\n  (if (empty? s1) \n    nil\n    (if (some #(= (first s1) %)  s2)\n      (cons (first s1) (my-func (rest s1) s2))\n      (my-func (rest s1) s2)))) a b) )))","problem":81,"user":"4e2164ff535d04ed9115e815"},{"code":"(fn [coll1 coll2]\n  (loop [result #{} coll coll2]\n    (if (empty? coll)\n      (set (filter #(not (nil? %)) result))\n      (recur (conj result (get coll1 (first coll))) (rest coll)))))","problem":81,"user":"52c672e2e4b0c2d177d6210e"},{"problem":81,"code":"#(apply sorted-set (filter\n         (fn [x]\n           (contains? %1 x)) %2))","user":"5ac74b34e4b0e27600da777f"},{"problem":81,"code":"(fn [s1 s2]\n   (into (sorted-set)\n      (filter #(not (= % :no))\n        (for [x s1]\n    \t\t(if (contains? s2 x) x :no)))))","user":"55aaa36fe4b0988bba2ad94f"},{"problem":81,"code":"(fn [x y] (into #{} (filter (fn [el] (contains? y el)) x)))","user":"593c1e3be4b069cdc2982b86"},{"code":"(fn [x y] (set (concat\n  (filter #(contains? y %) x)\n  (filter #(contains? x %) y)\n)))","problem":81,"user":"4ffb38e8e4b0678c553fc3c6"},{"code":"(fn [s1 s2]\n     (set (map #(first %) \n          (filter #(= (first %) (last %)) \n                  (for [t1 s1\n                        t2 s2]\n                    [t1 t2])))))","problem":81,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"(fn [a b]\n  (set(remove (fn [s] ((complement contains?) b s)) a))\n)","problem":81,"user":"4f1d1299535d64f603146487"},{"problem":81,"code":"(fn [a b] (set (remove (set (remove a b)) b)))","user":"563c6ebae4b0bfe05bf11834"},{"problem":81,"code":"(fn intersaction\n  [s1 s2]\n  (apply sorted-set (remove nil? (for [n s2]\n                              (s1 n))))\n  )","user":"5cd4e1b2e4b0ccb061962927"},{"code":"(fn [a b] (reduce\n  #(if (contains? a %2)\n    (conj % %2)\n    %)\n  #{} b))","problem":81,"user":"4f1052b9535d64f603146418"},{"problem":81,"code":"(fn [c1 c2]\n  (set (filter #(c1 %) c2))\n  )","user":"5a42dbabe4b0447ef91cc5fc"},{"problem":81,"code":"(fn [a b] (into #{} (remove nil? (map a b))))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"code":"#(apply (partial disj %1) (clojure.set/difference %1 %2))","problem":81,"user":"4f80db02e4b033992c121bf9"},{"code":"#(set (for [i %1 :when (some (fn[x](= x i)) %2)] i))","problem":81,"user":"4e8849c5535d8b9bb0147ca4"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n  (let [exists-in (fn [result item]\n                    (if (contains? s2 item)\n                      result\n                      (disj result item)))]\n    (reduce exists-in s1 s1)))","user":"542c026ae4b0dad94371f29a"},{"problem":81,"code":"#(loop [a % res #{}]\n   (if (empty? a)\n     res\n     (recur (rest a) (if (contains? %2 (first a))\n                       (conj res (first a))\n                       res))))","user":"5964c614e4b069c0a1a19770"},{"problem":81,"code":"(fn inter [s1 s2]\n  (set\n   (filter\n    (fn [x] (= x (some #{x} s2)))\n    s1\n    )\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":81,"code":"(fn my-intersect [sa sb]\n  (set (filter #(and (sa %) (sb %)) (into sa sb ))))","user":"53bf0913e4b0c98a41f5cc99"},{"code":"(fn [a b]\r\n  (set (filter #(contains? b %) a)))","problem":81,"user":"4febb4dae4b0681fd128dc98"},{"problem":81,"code":"(fn intersect [a b] (clojure.set/difference a (clojure.set/difference a b)))","user":"55631739e4b0c656e3ff17e2"},{"problem":81,"code":"(fn [s1 s2]\n  (clojure.set/select #(not (nil? (s1 %))) s2))","user":"55933c7ae4b0c79f6e1db938"},{"problem":81,"code":"(fn [a b]\n  (clojure.set/difference \n   (clojure.set/union a b) \n   (clojure.set/union \n    (clojure.set/difference a b) \n    (clojure.set/difference b a))))","user":"54b31445e4b09f271ff37d35"},{"code":"(fn [set-1 set-2]\n  (set (filter #(contains? set-2 %) set-1)))","problem":81,"user":"4eda7cc3535d10e5ff6f530e"},{"code":"(fn intersect[a b] (into #{} (for [x a y b :when (= x y)] x)))","problem":81,"user":"4f148418535d64f60314643a"},{"code":"(fn [l1 l2]\n  (reduce\n    (fn [x y] \n      (if (contains? l2 y)\n        (conj x y)\n        x\n      )\n    )\n    #{}\n    l1\n  )\n  \n  \n)","problem":81,"user":"4fc8f671e4b0ee37620e1840"},{"problem":81,"code":"(fn [& cs](\n            set (reduce #(filter %1 %2) cs)\n            ))","user":"546280d8e4b01be26fd746b0"},{"problem":81,"code":"(fn [set1 set2]\n    (loop [to_process set1\n           done #{}]\n      (if (empty? to_process)\n        done\n        (if (contains? set2 (first to_process))\n          (recur (set (rest to_process)) (conj done (first to_process)))\n          (recur (set (rest to_process)) done)))))","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn intersect-81 [s1 s2]\n  (set (filter #(s2 %) s1)))","problem":81,"user":"501b1a8ee4b0b12d9c5f4d81"},{"code":"(fn [sa sb]\n  (set (filter #(sa %)sb)))","problem":81,"user":"52cdec62e4b07d0d72b27382"},{"code":"(fn isect [a b] (cond (or (empty? a) (empty? b)) #{} (contains? b (first a)) (conj (isect (rest a) b) (first a)) :else (isect (rest a) b)))","problem":81,"user":"50723bbae4b0e3170b5a868b"},{"problem":81,"code":"(fn [a b]\n   (set (filter #(not (nil? %)) (for [el b]\n     (if (get a el)\n       el)))))","user":"5d9e8e40e4b000c986472bc2"},{"problem":81,"code":"(fn [s1 s2]\n         (set (for [x s1 y s2 :when (= x y)] x)))","user":"53f592b7e4b0db01ade6f9d0"},{"problem":81,"code":"(fn intersect [set1, set2]\n  (set\n    (keys (reduce #(if (get set2 %2) (assoc %1 %2 true) %1)\n                  {}\n                  set1))))","user":"59971e2de4b07157cc8daacc"},{"problem":81,"code":"(fn [x y] (apply hash-set(filter x y)))","user":"557e8326e4b05c286339e0d7"},{"problem":81,"code":"(fn inter \n  [s1 s2]\n  (into #{} (remove #(not (contains? s2 %)) s1)))","user":"5cb11a72e4b026601754b8c6"},{"code":"#(into #{} (for [x %1 :when (%2 x)] x))","problem":81,"user":"4f0f9df7535d0136e6c22342"},{"problem":81,"code":"(fn [lstA lstB]\n   (into #{} (map first (filter #(= 2 (count %) )  \n                                (partition-by identity (sort (interleave lstA lstB)) )\n                                )\n                  )\n             )\n   )","user":"56e9a56ae4b04a395b9a03fc"},{"code":"(fn [s1 s2] (clojure.set/difference \n       (clojure.set/union s1 s2)\n(clojure.set/difference s1 s2) (clojure.set/difference s2 s1)\n))","problem":81,"user":"4e3000c8535deb9a81d77f13"},{"code":"#(set (keys (select-keys (into {} (for [a %1] [a a])) %2)))","problem":81,"user":"4ee85476535d93acb0a6687c"},{"problem":81,"code":"(fn [a b]\n  (let [sa (< (count a) (count b))\n        ss (if sa a b)\n        bs (if sa b a)]\n    (reduce (fn [acc x] (if (contains? ss x) (conj acc x) acc)) #{} bs)))","user":"5576f299e4b05c286339e077"},{"code":"(fn [m n]\n  (letfn [(build-inters [m n res]\n                        (if (empty? m)\n                          res\n                          (build-inters (rest m) n (if (some #(= (first m) %)\n                                                             n)\n                                                     (conj res (first m)) res))))]\n    (build-inters m n #{})))","problem":81,"user":"51e0198ee4b01188f0627539"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [s1 s1\n         res #{}]\n    (if (seq s1)\n      (recur (rest s1) (if (contains? s2 (first s1)) (conj res (first s1)) res))\n      res)))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"(fn i [x y] \n  (set (filter #(contains? x %) y)))","problem":81,"user":"50090fc7e4b0144d4f561e44"},{"code":"#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))","problem":81,"user":"4ef4c1ff535dced4c769f23e"},{"code":"#(set (for [e %1 :when (contains? %2 e)] (%2 e)))","problem":81,"user":"4ec6357a535d6d7199dd36c5"},{"code":"(fn *intersection                                                                                                                          \n  [set1 set2]                                                                                                                                \n  (set (filter set1 set2)))","problem":81,"user":"4e3bcccd535deb9a81d77f56"},{"code":"(fn [& args]\n   (set (filter (fn [k] (every? #(get % k) (rest args)))\n           (first args))))","problem":81,"user":"4eb02674535d7eef30807338"},{"problem":81,"code":"(fn doset [a b]\n  (set (filter #(a %) b)))","user":"56d05ba2e4b0ea9b8538f77d"},{"code":"(fn [xs ys]\n  (set (filter #(contains? ys %) xs)))","problem":81,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"(fn my-intersection [arg-1 arg-2]\n   (set (filter #(arg-1 %) arg-2)) \n )","problem":81,"user":"52763696e4b03e8d9a4a74d7"},{"problem":81,"code":"(fn intersec [a b]\n  (set (filter #(contains? b %) a)))","user":"53e30fcae4b036ad0777e3fc"},{"problem":81,"code":"(fn [x y] (set (filter #( contains? x %) y)))","user":"5462ce20e4b01be26fd746b8"},{"code":"(fn [col1 col2]\n  (reduce #(if (contains? col1 %2)(conj %1 %2) %1) #{} col2))","problem":81,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":81,"code":"(fn [s1 s2]\n  (into #{} (filter #(s1 %) s2)))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":81,"code":"(fn [l1 l2]\n  (set (filter identity (for [s1 l1\n                              s2 l2]\n                          (if (= s1 s2)\n                            s1)))))","user":"6086abade4b0736b099e42ff"},{"code":"(fn [a b]\n  (into #{} (filter (every-pred a b) (into a b))))","problem":81,"user":"52a1acb2e4b04e0c58e87bdb"},{"problem":81,"code":"#(set (filter (fn [e] (contains? %2 e)) %1))","user":"5d63f1c2e4b0c9e5857d502b"},{"code":"(fn b [m mm] (loop [n m nn mm e  #{}] (if (empty? n) e (recur (next n) nn (if (contains? nn (first n)) (conj e (first n)) e)))))","problem":81,"user":"4fe97adde4b0547ebccb245e"},{"problem":81,"code":"(fn my-intersection [x1 x2]\n  (set (filter #(contains? x2 %) x1)))","user":"5c24c654e4b07e362c2305a7"},{"problem":81,"code":"(fn \n  [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) ((fn\n  [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1))) set1 set2)))","user":"5772ddb0e4b0979f896515d4"},{"code":"(fn [a b] (clojure.set/difference\n           (clojure.set/difference\n            (clojure.set/union a b)\n            (clojure.set/difference a b))\n           (clojure.set/difference b a)))","problem":81,"user":"53388e2de4b0e30313ee6c9c"},{"problem":81,"code":"(fn [col1 col2]\n  (set (for [x col1\n             y col2\n             :when (= x y)]\n         x)))","user":"54f14aa6e4b024c67c0cf8af"},{"problem":81,"code":"(fn set-intersection\n  [n m]\n  (into #{} \n        (for [x n :when (contains? m x)] x)))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":81,"code":"(fn inter [a b]\n  (into #{} (filter (partial contains? b) a)))","user":"5396c94be4b0b51d73faaee3"},{"problem":81,"code":";; Use partial > 1.4\n(fn my-intersection [a b]\n (apply hash-set (filter #(b %) a)))","user":"5146f343e4b04ef915e3731e"},{"code":"#(into #{} (remove nil? (map %2 %)))","problem":81,"user":"50cae881e4b0f75dcc9a6e51"},{"code":"(fn inters [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))))","problem":81,"user":"5225666be4b01819a2de4300"},{"code":"(fn [set1 set2]\n  (into #{}\n   (remove nil?\n    (map #(if (contains? set2 %) %) set1))))","problem":81,"user":"4dbdce65535d020aff1edf4d"},{"problem":81,"code":"#(set(filter (partial contains? %) %2))","user":"53f6d555e4b0db01ade6f9e5"},{"code":"#(set\n    (for [x % y %2\n          :when (= x y)] x))","problem":81,"user":"51933b41e4b0c663c5d86ca2"},{"problem":81,"code":"#(loop [l1 %1 res []]\n\t(if (empty? l1) (apply hash-set (remove nil? res))\n\t\t(recur (drop 1 l1)\n\t\t\t(conj res (some #{(first l1)} %2))\n\t\t\t)))","user":"55989c25e4b031d6649c9b9b"},{"code":"#(into #{} (remove (apply disj % %2) %))","problem":81,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":81,"code":"(fn [a b] (set (reduce #(if (contains? b %2) (conj %1 %2) %1) #{} a)))","user":"56481722e4b0284900eef628"},{"problem":81,"code":"#(reduce (fn [a b] (if (contains? % b) (conj a b) a)) #{} %2)","user":"5e63ffa0e4b0fd0acd1586a6"},{"code":"(fn [a b] \n  (set (filter a b)))","problem":81,"user":"5055e7f4e4b0ce54f56f0401"},{"code":"#(let [d clojure.set/difference] (d %1 (d %1 %2)))","problem":81,"user":"534efe66e4b084c2834f4ac1"},{"code":"#(set (for [x %1 y %2 :when (= x y) ]   x))","problem":81,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":81,"code":"(fn isect [a b]\n    (into #{} (filter #(b %) a))\n    )","user":"58ec1e63e4b056aecfd47d54"},{"problem":81,"code":"(fn [& colls]\n  (let [mergefn (fn [coll] #(if (contains? coll %2) (conj %1 %2) %1))\n        reducer (fn [s1 s2] (reduce (mergefn s2) (set nil) s1))]\n    (reduce reducer colls)))","user":"524740e7e4b05ef8e38e635d"},{"problem":81,"code":"(fn \n  [num1 num2] \n  (set (filter #(contains? num2 %) num1)))","user":"5bbbce70e4b0a20761a2360f"},{"problem":81,"code":"(fn\n  [set1 set2]\n  (set (filter #(set1 %) set2)))","user":"56df6498e4b0ca2494a095f8"},{"code":"(fn [x y]\n    (set (filter #(contains? y %) x))\n    )","problem":81,"user":"504e1abee4b0f6ff3350c45d"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter (partial contains? s1) s2)))","user":"5fb85760e4b03f550f44821b"},{"problem":81,"code":"(fn inter-section\n  ; \"returns the intersection of two sets\"\n  [x1 x2]\n  (set (filter x1 x2)))","user":"5bbbcecee4b0a20761a23611"},{"code":"#(set (filter (fn[x](> ((frequencies (concat (vec %1) (vec %2))) x) 1)) %1))","problem":81,"user":"51f79238e4b06ff1c25c52d7"},{"problem":81,"code":"(fn [x y]\n  (set (filter (fn[a] (contains? x a)) y))\n)","user":"54283a7ae4b01498b1a71b2f"},{"code":"(fn [s1 s2]\n  (set (filter #(s2 %) s1)))","problem":81,"user":"52fb64b7e4b047fd55837009"},{"code":"(fn [s1 s2]\n  (set (for [a s1 b s2 :when (= a b)] a)))","problem":81,"user":"53070615e4b02e821686979e"},{"problem":81,"code":"(fn my-intersection [s1 s2] (cond (empty? s2) #{}\n                                      (get s1 (first s2)) (conj (my-intersection s1 (rest s2)) (first s2))\n                                      true (my-intersection s1 (rest s2))))","user":"55d95be7e4b0e31453f64ac9"},{"code":"(fn [set-a set-b]\n  (let [cond-conj #(if (set-b %2) (conj %1 %2) %1)]\n    (loop [[h & t] (seq set-a), set-c #{}]\n      (let [new-set-c (cond-conj set-c h)]\n        (if (seq t)\n          (recur t new-set-c)\n          new-set-c)))))","problem":81,"user":"504e72cee4b0f6ff3350c4b4"},{"problem":81,"code":"(fn intersection* [s1 s2]\n   (reduce \n     #(conj %1 (first %2)) \n     #{}\n     (filter \n       #(= (second %) 2)\n        (frequencies (concat s1 s2)))))","user":"5d078e2de4b0cc9c915881fa"},{"problem":81,"code":"(fn [xs ys] (set (filter #(get ys %) xs)))","user":"56bfd8ade4b060a8e693e3a2"},{"problem":81,"code":"#(apply hash-set (remove (clojure.set/difference % %2) %))","user":"581829cce4b0c0e9c07b83a9"},{"problem":81,"code":"(fn [c1 c2]\n  (loop [s1 c1\n         result #{}]\n    (if (empty? s1)\n      result\n      (if (some #{(first s1)} c2)\n        (recur (rest s1) (conj result (first s1)))\n        (recur (rest s1) result)))))","user":"5522cd9ae4b0882d96d091ab"},{"problem":81,"code":"(fn [fl sl]\n      (let [el (for [f fl\n                    s sl\n                    :when (= f s)]\n                 f)]\n        (set el)))","user":"52c49401e4b0c2d177d620de"},{"problem":81,"code":"#( into #{} (for [x %1 :when (contains? %2 x)]\n   x))","user":"546c1b2ce4b00cfc9eacc174"},{"code":"#((fn f [x y acc]\n   (cond\n    (seq x) (if (contains? y (first x))\n              (f (rest x) y (cons (first x) acc))\n              (f (rest x) y acc))\n    :else (into #{} acc))) %1 %2 nil)","problem":81,"user":"536102efe4b0243289761e3e"},{"code":"(fn [a b] (reduce #(if (a %2) (conj %1 %2) %1) #{} b))","problem":81,"user":"4f301d02e4b0d6649770a072"},{"code":"(fn [set1 set2] (set(filter #(contains? set2 %) set1)) )","problem":81,"user":"4ed500bb535d10e5ff6f52d3"},{"problem":81,"code":"(fn intersec \n  ([set1 set2] (intersec set1 set2 #{}))\n  ([set1 set2 ret]\n   (let [f (first set2)\n         r (rest set2)]\n     (cond\n      (empty? set2) ret\n      (set1 f) (intersec set1 r (conj ret f))\n      :else (intersec set1 r ret)))))","user":"54c8ac49e4b045293a27f64e"},{"problem":81,"code":"#(reduce (fn [acc x] (if (some #{x} %) (conj acc x) acc ) ) #{} %2)","user":"54e51c7be4b024c67c0cf7f7"},{"problem":81,"code":"(fn custom-set-intersection\n  [s1 s2]\n  (set\n    (for [x s1 :when (contains? s2 x)] x)\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"(fn i[x y]\n    (loop [a x b #{}]\n\t     (if (nil? a)\n\t\t b\n\t\t (if (y (first a))\n\t\t     (recur (next a) (conj b (first a)))\n\t\t     (recur (next a) b)))))","problem":81,"user":"4e842ebb535db62dc21a62df"},{"problem":81,"code":"(fn[x y] (apply hash-set (remove #(not (contains? y %)) x)))","user":"5d40442ee4b05dd059a54362"},{"code":"#(set (for [x %1 :when (contains? %2 x)] x))","problem":81,"user":"4faac363e4b081705acca200"},{"code":"(fn [s1 s2]\n  (apply hash-set (filter #(contains? s2 %) s1)))","problem":81,"user":"522d3a16e4b0e26240291d50"},{"code":"(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/difference s1 s2)\n                          (clojure.set/difference s2 s1)))","problem":81,"user":"4f8c6bf6e4b02e764a0a519b"},{"problem":81,"code":"(fn [a b]\n  (reduce #(if (b %2) (conj % %2) %) #{} a))","user":"54fdbe3fe4b07d26eda61d3b"},{"code":"(fn [s1 s2]\n   (reduce (fn [cont it]\n             (if (get s2 it)\n               (conj cont it)\n               cont) \n             ) #{} s1)\n   )","problem":81,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"(fn [sa sb]\n  (set (filter sa sb)))","problem":81,"user":"50901b2ee4b0ea685a20f774"},{"problem":81,"code":"(fn getSet [s1 s2] (set (filter s1 s2)))","user":"592518e8e4b072a2710fce67"},{"problem":81,"code":"(fn [a b]\n  (reduce\n    (fn [acc x] (if (and (contains? a x) (contains? b x)) (conj acc x) acc))\n    #{}\n    (clojure.set/union a b)))","user":"54431b6ee4b032a45b869385"},{"problem":81,"code":"(fn [s1 s2]\n  (into #{} (remove nil? (map (fn [x] (when (contains? s2 x) x)) s1))))","user":"5ef18431e4b07c55ae4a0529"},{"problem":81,"code":"(fn f [a b]\n  (loop [acc #{}\n         remain a]\n    (if (empty? remain)\n      acc\n      (if (some #{(first remain)} b)\n        (recur (conj acc (first remain)) (rest remain))\n        (recur acc (rest remain))))))","user":"5777c3d6e4b0979f8965164f"},{"problem":81,"code":"(fn set-intersection\n  [set1 set2]\n  (set (filter set1 set2)))","user":"5a3c06fce4b001c08efc0cdd"},{"code":"(fn [a b] (set (filter #(a %1) b)))","problem":81,"user":"500854c4e4b028e089d3518c"},{"code":"(fn [set1 set2]\n    (reduce #(if (contains? set2 %2)\n               (conj %1 %2)\n               %1) #{} set1))","problem":81,"user":"511e763ce4b03e81d390ac29"},{"problem":81,"code":"(fn si [xs ys]\n  (clojure.set/select #(some #{%} ys) xs))","user":"56069006e4b08b23635d3174"},{"code":"#(set (for [x % :when (%2 x)] x))","problem":81,"user":"4ec5aa1f535d6d7199dd36b0"},{"problem":81,"code":"(fn [col1 col2]\n  (set (reduce #(if (contains? col1 %2) (conj %1 %2) %1) [] col2)))","user":"568242bfe4b0945ebc182a8f"},{"problem":81,"code":"(fn intr [a b]\n  (apply hash-set (for [x a :when (contains? b x)] x))\n  )","user":"4e28ddd1535deb9a81d77efd"},{"problem":81,"code":"#(apply sorted-set (filter %1 %2))","user":"5286a2a9e4b0239c8a67ae1e"},{"problem":81,"code":"(fn [xs ys]\n    (set \n      (filter #(and (contains? xs %) (contains? ys %)) (concat xs ys))))","user":"57995ac1e4b05b1deef9adbf"},{"problem":81,"code":"(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/difference x y) (clojure.set/difference y x) ))","user":"6076adb2e4b069485764de60"},{"problem":81,"code":"(fn [s1 s2]\n    (->> (concat (vec s1) (vec s2))\n         frequencies\n         (filter #(= 2 (second %)))\n         (map first)\n         set))","user":"55cb11e9e4b0e31453f649ff"},{"problem":81,"code":"(fn [x y] (reduce #(if (= %2 nil) %1 (conj %1 %2)) #{} (map #(x %) y)))","user":"5835bc73e4b089d5ab817ce9"},{"code":"#(loop [a %1 b %2 ret #{}] (if  (empty? a)\r\n                                          ret\r\n                                        (recur (rest a)  b \r\n                                        (if (not (contains? b (first a)))\r\n                                           ret\r\n                                           (conj ret (first a))))))","problem":81,"user":"50463347e4b011c5dfee771e"},{"problem":81,"code":"#(set (for[a %1 b %2 :when (= a b)]  a  ))","user":"598085e6e4b021a7a535fdd3"},{"code":"(fn apa [x y]  (set (filter identity (for [a x b y] (if (contains? y a) a)))))","problem":81,"user":"50981062e4b04e098a4c7268"},{"code":"(fn [x y]\n  (set (remove nil?\n          (map #(if (contains? y %) %) x))))","problem":81,"user":"52474133e4b05ef8e38e635e"},{"problem":81,"code":"(fn [s1 s2] (into #{} (for [x s1 :when (contains? s2 x)] x)))","user":"54530382e4b0e397800069cc"},{"code":"(fn setun [s1 s2] (set (filter s1 s2)))","problem":81,"user":"4e9de526535dbda64a6f6b8e"},{"code":"(fn set-intersection [s1 s2]\n  (apply disj s1 (clojure.set/difference s1 s2)))","problem":81,"user":"52c00e4fe4b07a9af5792342"},{"code":"(fn n [a b] (into #{} (filter #(not (nil? %)) (map a b))))","problem":81,"user":"52b35a6ee4b0c58976d9ad07"},{"problem":81,"code":"(fn inter [a b]\n   (set\n    (for [x a\n          :when (contains? b x)]\n      x)))","user":"56504dc2e4b0284900eef6bc"},{"code":"(fn [s1 s2]\n      (set (filter #(some s2 [%]) s1)))","problem":81,"user":"50f48298e4b004d364930527"},{"code":"(fn [s1 s2]\n    (reduce (fn [acc item]\n              (if (contains? s2 item) (conj acc item) acc))\n            #{} s1))","problem":81,"user":"53489329e4b084c2834f4a5b"},{"code":"#(set (for [x %1 :when (%2 x)] x))","problem":81,"user":"4effb663535dcb61093f6a2e"},{"code":"#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/union\n    (clojure.set/difference %1 %2)\n    (clojure.set/difference %2 %1)))","problem":81,"user":"5191ac45e4b0d428d29dc1b6"},{"code":"(fn [col col2]\n  (set (filter #(when-not (nil? %) %)\n    (for [x col y col2]\n      (if (= x y) x)))))","problem":81,"user":"501dfd54e4b051153f3b5b80"},{"code":";#(clojure.set/difference %1 (clojure.set/difference %1 %2))\n\n;Suggested by gdeer81\n#(set (filter %1 %2))","problem":81,"user":"5213dbc3e4b0961f15ac4d74"},{"problem":81,"code":"(fn[s1 s2](reduce (fn[r x](if(contains? s2 x)(conj r x)r)) #{} s1))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [s1 s1\n         s2 s2\n         acc #{}]\n    (if (empty? s1)\n      acc\n   \t (recur (rest s1)\n           s2\n           (if (some #(= (first s1) %) s2)\n             (conj acc (first s1))\n             acc)))))","user":"551ed214e4b08d5046aa8a4d"},{"code":"(fn [c1 c2] (set (keys (remove #(= 1 (val %)) (frequencies (concat c1 c2))))))","problem":81,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":81,"code":"(fn [set1 set2]\n  (reduce\n   #(if (get set2 %2) (conj %1 %2) %1)\n   #{}\n   set1))","user":"608910a8e4b0ae75613dceed"},{"code":"#(set (for [x %1 y %2 :when(= x y)] x))","problem":81,"user":"5007c7c7e4b0b17c647f5226"},{"code":"(fn [x y] (->> (concat x y)\n               frequencies\n               (filter (fn [[k v]] (= v 2)))\n               (map first)\n               set))","problem":81,"user":"522f483ce4b032bbe342415a"},{"code":"(fn [a b] (set (filter #(get b %) a)))","problem":81,"user":"4eb13d60535d7eef3080733f"},{"problem":81,"code":"#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":81,"code":"(fn intersect\n  [set1 set2]\n  (loop [rem-set set1\n         result #{}]\n    (if (seq rem-set)\n      (if (contains? set2 (first rem-set))\n        (recur (rest rem-set) (conj result (first rem-set)))\n        (recur (rest rem-set) result))\n      result)))","user":"54c3747de4b045293a27f60e"},{"problem":81,"code":"(fn set-inter [& sets]\n  (reduce\n   (fn [acc set]\n     (into #{} (for [x acc :when (contains? set x)] x)))\n   (first sets) (rest sets)))","user":"56588f4ee4b0f9d632dd84b6"},{"code":"(fn  [s1 s2] \n\t(reduce #( if (contains? s2 %2) (conj % %2) %) #{} s1))","problem":81,"user":"5097cfcbe4b00ad8bab4e977"},{"code":"(fn intersec [s1 s2]\n  (set (mapcat #(if (contains? s2 %) (list %) ()) s1)))","problem":81,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"#(set (for [z (into %1 %2) :when (= (get %1 z) (get %2 z)) ] z))","problem":81,"user":"4ea31da2535d7eef308072c1"},{"problem":81,"code":"(fn isect [x y]\n  (letfn [(mappy [s] \n            (apply hash-map \n              (interleave (into [] s) (repeat (count s) 1))))]\n    (let [x-map (mappy x)]\n      (set (filter #(get x-map %) y)))))","user":"5710140fe4b09c608db7042e"},{"code":"(fn [s k] (set (filter s k)))","problem":81,"user":"51a477eee4b0def3c5c58692"},{"code":"#(set (filter (fn [x] (% x)) %2))","problem":81,"user":"4dc78527535d8a4b2fd7428f"},{"problem":81,"code":"(fn [set1 set2]\n  (set (filter set1 set2)))","user":"5835df4ce4b089d5ab817cec"},{"code":"#(set\r\n  (\r\n    for [x %1\r\n         :when(contains? %2 x)]\r\n    x\r\n  )\r\n)","problem":81,"user":"4e65f9d4535d8ccf87e9fe73"},{"code":"#(loop [s1 %1 s2 %2]\r\n  (if (< (count s2) (count s1))\r\n  (recur s2 s1)\r\n  (reduce (fn [result item]\r\n              (if (contains? s2 item)\r\n                result\r\n                (disj result item)))\r\n          s1 s1)))","problem":81,"user":"4e79ff2a535db169f9c796a9"},{"code":"(fn [a b] \n  (into #{} (filter a b) ))","problem":81,"user":"51aab611e4b04e3dc0c27b2d"},{"problem":81,"code":"(fn [one two]\n  (set (filter #(contains? two %) one)))","user":"587294f0e4b01531a375ea1e"},{"problem":81,"code":"(fn inter [x y]\n   (loop [ret #{}\n          el (seq x)]\n     (if el\n       (recur (if (y (first el))\n                (conj ret (first el))\n                ret)\n              (next el))\n       ret)))","user":"53b12c76e4b047364c04448a"},{"code":"#(clojure.set/difference\r\n     (clojure.set/union %1 %2)\r\n     (clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))","problem":81,"user":"4f03822f535dcb61093f6b03"},{"problem":81,"code":"(fn [s1 s2]\n        (into #{} (filter #(contains? s2 %) s1)))","user":"541ae7dbe4b01498b1a71a61"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [i e]\n            (if (s1 e) (conj i e) i))\n          #{}\n          s2))","user":"53e745a1e4b036ad0777e479"},{"problem":81,"code":"(fn\n  [x y]\n\t(into #{} (filter \n     #(not (nil? %))\n     (map #(x %) y))))","user":"574b4f3ee4b02ea114799207"},{"problem":81,"code":"(fn inter[as bs]\n  (set (filter (fn [x] (= x (get bs x))) as)))","user":"55f01316e4b06e875b46ce1a"},{"problem":81,"code":"(fn intersect\n  [a b]\n  (reduce #(if (contains? b %2) (conj %1 %2) %1) #{} a))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":81,"code":"(fn set-intersection ([set1 set2] (set-intersection set1 set2 #{}))\n  ([set1 set2 xs] \n    (if (seq set1)\n      (let [f (first set1)\n            r (rest set1)]\n        (if (contains? set2 f)\n           (set-intersection r set2 (into xs #{f}))\n           (set-intersection r set2 xs )))\n      xs)))","user":"5df0c6ffe4b093ff717275c2"},{"problem":81,"code":"#(reduce\n  (fn [result item]\n    (if (contains? %2 item)\n      result\n      (disj result item)))\n  %\n  %)","user":"53e0001be4b0d874e779ae48"},{"code":"(fn [xs ys] (apply disj xs (filter #(not (contains? ys %)) xs)))","problem":81,"user":"4f50d933e4b03ad3f0c10d11"},{"code":"(comp set keep)","problem":81,"user":"4db03279838c48654951d9bc"},{"problem":81,"code":"(fn intersect [v1 v2]\n  (set (clojure.set/union\n    (#(filter (fn [x] (contains? v1 x)) %) v2)\n    (#(filter (fn [x] (contains? v2 x)) %) v1))))","user":"5448616be4b032a45b8693c9"},{"code":"#(apply hash-set\n        (filter identity \n                (for [x %]\n                  (if (some (partial = x) %2)\n                    x))))","problem":81,"user":"51f2b8f1e4b0210f90e74556"},{"problem":81,"code":"(fn [s1 s2]\n    (loop [i #{} s1_ s1]\n        (if (seq s1_)\n            (if (contains? s2 (first s1_))\n                (recur (conj i (first s1_)) (rest s1_))\n                (recur i (rest s1_)))\n        i)))","user":"55975569e4b031d6649c9b8e"},{"code":"(fn m [a b]\n  (set (filter #(contains? b %) a)))","problem":81,"user":"52828298e4b0757a1b17145b"},{"problem":81,"code":"(fn inters [s t]\n  (set (for [x s :when (t x)] x)))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"#(->> %2 (filter %1) set)","problem":81,"user":"51cfc616e4b0e42293a22578"},{"problem":81,"code":"(fn my-intersection\n  [xs ys]\n  (reduce\n   (fn [accum x] (into accum (if (contains? ys x) #{x} #{})))\n   #{}\n   xs))","user":"5c222b7de4b07e362c230588"},{"problem":81,"code":"(fn [x c] (set (filter (partial contains? x) (filter (partial contains? c)  (concat (map identity x) (map identity c))))))","user":"58a0fd0be4b02bd94d917ea4"},{"code":"#(set \n  (letfn [(is [s1 s2]\n    (cond \n      (empty? s2) nil\n      (contains? s1 (first s2)) (conj (is s1 (rest s2)) (first s2))\n      :else (is s1 (rest s2))\n    )\n    )]  \n    (is % %2))\n)","problem":81,"user":"4ff83003e4b0678c553fc396"},{"code":"(fn [x y]\n  (loop [x x acc #{}]\n    (cond\n      (empty? x) acc\n      (y (first x)) (recur (rest x) (conj acc (first x)))\n      :else (recur (rest x) acc))))","problem":81,"user":"4fd16778e4b04c3a95aa040f"},{"problem":81,"code":"(fn [s1 s2](set (filter s1 s2)))","user":"505d1b01e4b0e6aca564be04"},{"problem":81,"code":"(fn\n  [set1 set2]\n  (set\n  (for [x set1 y set2\n      :when (= x y)] x)))","user":"56df6417e4b0ca2494a095f7"},{"problem":81,"code":"(fn inter [a b]\n  (loop [a a\n         b b\n         ret []]\n    (if (or (empty? a)\n            (empty? b))\n      (set ret)\n      (let [a-head (first a)\n            a-body (rest a)]\n        (if (contains? b a-head)\n          (recur a-body\n                 (set (remove #{a-head} b))\n                 (conj ret a-head))\n          (recur a-body b ret))))))","user":"58fed70de4b0438e51c2cfdd"},{"problem":81,"code":"(fn [s1 s2]\n    (loop [s1 s1 s2 s2 a #{}]\n      (if (empty? s1) a\n          (if (contains? s2 (first s1))\n            (recur (rest s1) s2 (conj a (first s1)))\n            (recur (rest s1) s2 a)))))","user":"6026d2cae4b0d5df2af22232"},{"problem":81,"code":"(fn [set1 set2]\n  (->> set1\n       (filter #(contains? set2 %))\n       set))","user":"53528cd3e4b084c2834f4af2"},{"code":"(fn [s1 s2] (set (for [x (concat s1 s2) :when (and (s1 x) (s2 x))] x)))","problem":81,"user":"50783762e4b0fc74642bff67"},{"code":"#(set (filter (fn [x] (%2 x)) (seq %)))","problem":81,"user":"4f2ef48be4b0d6649770a06c"},{"problem":81,"code":"(fn [set1 set2] \n  (let [elements (concat set1 set2)] \n    (set (for [el elements \n          :let [in-both (and (set1 el) (set2 el))]\n          :when in-both]\n           el))))","user":"5c13da47e4b01240ff5671a6"},{"problem":81,"code":"(fn[s1 s2](into #{}  (filter (comp not  nil?)  (map #(s1 %) s2))))","user":"5832be57e4b089d5ab817c86"},{"problem":81,"code":"(fn my-intersection\n  [a b]\n  (set (filter #(and (contains? a %) (contains? b %)) (into a b))))","user":"5f29837ee4b033932238a64f"},{"problem":81,"code":"(fn [x y] (into #{} (map first (filter #(= (first %) (last %)) (for [x x y y] [x y])))))","user":"4eb171d7535d7eef30807340"},{"code":"(fn [s1 s2]\n  (into #{} (filter (partial contains? s2) s1)))","problem":81,"user":"524ab5f2e4b09eba1c02239d"},{"problem":81,"code":"(fn\n   [first-coll second-coll]\n   (into #{} (remove #(not (contains? first-coll %)) second-coll)))","user":"60396c95e4b0d5df2af222f4"},{"code":";(fn [a b] (set (filter #(contains? b %) a)))\n#(set (filter %1 %2))","problem":81,"user":"5312cdaae4b08068f379ed03"},{"problem":81,"code":"(fn [xs ys] (set (filter (fn [x] (contains? ys x)) xs)))","user":"595fd721e4b066ee0a44b06e"},{"problem":81,"code":"(fn my-intersect\n  [s1 s2]\n  (reduce (fn [i e]\n            (if (contains? s2 e)\n              (conj i e)\n              i))\n          #{}\n          s1))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":81,"code":"(fn [a b]\n  (set\n   (filter #(contains? a %) b)))","user":"5a4443cae4b0447ef91cc60f"},{"code":"(fn [s1 s2]\n  (reduce (fn [init item] (if (contains? s1 item)\n                            (conj init item)\n                            init))\n          #{} s2))","problem":81,"user":"51df825de4b01188f062752b"},{"problem":81,"code":"(fn [s1 s2] (into #{} (reduce #(if (contains? s1 %2) (conj %1 %2) %1) [] (seq s2))))","user":"57c6aa0be4b05aa3c4741cf7"},{"problem":81,"code":"(fn [x y]\n  (into #{}\n    (for [x x\n          :when (contains? y x)]\n  \t     x)))","user":"5a084a24e4b01bb0ae8afdf2"},{"code":"(fn [l1 l2] (set (filter (fn [e] (contains? l1 e)) l2)))","problem":81,"user":"4f2f6678e4b0d6649770a06e"},{"code":"(fn mySetIntersection\n  [set1 set2]\n  ((comp set filter) set1 set2))","problem":81,"user":"509a25b7e4b0efbae1fbc0a8"},{"problem":81,"code":"(fn my-inter\n  [s t]\n  (clojure.set/difference s (clojure.set/difference s t)))","user":"55acd080e4b03311e7b73298"},{"problem":81,"code":"(fn my-intersection\n  [s1 s2]\n  (set (filter #(contains? s2 %) s1)))","user":"5d9c8a85e4b0eb781811cdad"},{"code":"(fn [set0 set1] (set \n  (let [test (fn [longer-set shorter-set]\n               (filter #(contains? shorter-set %) longer-set))]\n    (if (< (count set0) (count set1))\n      (test set1 set0)\n      (test set0 set1)))))","problem":81,"user":"4ebc64db535dfed6da9c6d82"},{"code":"#(set (for [i %1 j %2 :when (= i j)] i))","problem":81,"user":"4db2f208535df7e46ed9b6c9"},{"code":"(fn [s1 s2]\n  (set (filter (partial contains? s2) s1)))","problem":81,"user":"4e7e4d5c535db169f9c7970f"},{"problem":81,"code":"#(set (filter (fn [t] (contains? %1 t)) %2))","user":"586bc870e4b01531a375e964"},{"problem":81,"code":"(fn f [xs ys]\n  (into #{}\n        (concat\n          (filter #(contains? ys %) xs)\n          (filter #(contains? xs %) ys))))","user":"55b28b57e4b01b9910ae296c"},{"problem":81,"code":"#(loop [inter #{} s1 %1 s2 %2]\n   (if (empty? s1)\n     inter\n     (recur\n      (if (contains? s2 (first s1))\n        (conj inter (first s1))\n        inter)\n      (rest s1)\n      s2)))","user":"54194782e4b01498b1a71a29"},{"code":"(fn foo [sa sb]                                                         \n            (set (filter #(sa %) sb)))","problem":81,"user":"4eed6b32535d93acb0a668bc"},{"problem":81,"code":"(fn [coll-a coll-b]\n  (reduce \n   (fn [coll mem-a]\n     (if (contains? coll-b mem-a)\n       (conj coll mem-a)\n       coll))\n   #{}\n   coll-a))","user":"5cb41c40e4b026601754b911"},{"code":"(fn fujikawa [m1 m2]\n  (loop [m m1 r ()]\n    (if (empty? m)\n      (set (vec (reverse r)))\n      (recur (rest m) (if (boolean (some #(= (first m) %) (seq m2))) (cons (first m) r) r ))\n      )\n    )\n  )","problem":81,"user":"4db7da66535d1e037afb2187"},{"problem":81,"code":"#(clojure.set/difference %1 (clojure.set/difference %1 %2) )","user":"59419bdfe4b060784b3b78f7"},{"problem":81,"code":"(fn [m1 m2]\n  (into #{} (filter #(m1 %) m2)))","user":"539c88e1e4b0b51d73faaf2c"},{"problem":81,"code":"#(clojure.set/difference %2 (clojure.set/difference %2 %1))","user":"53e19461e4b0d874e779ae59"},{"problem":81,"code":"(fn [a b]\n\t(reduce #(if (a %2) (conj %1 %2) %1) #{} b)\n)","user":"5d2201b8e4b02ea6f0fb69ed"},{"code":"(fn[x y] (set (filter #(x %) y)))","problem":81,"user":"4ea4e98a535d7eef308072ce"},{"code":"(fn [xs ys]\n  (loop [zs xs ws #{}]\n    (cond (empty? zs) ws\n          (contains? ys (first zs)) (recur (rest zs) (conj ws (first zs)))\n          :else (recur (rest zs) ws))))","problem":81,"user":"50555c06e4b0ce54f56f03fa"},{"problem":81,"code":"(fn [a b] (set (let [s (clojure.set/union a b)] (filter (partial contains? a) (filter (partial contains? b) s)))))","user":"566669d8e4b0e91d5f5c566f"},{"code":"(fn [a b] (set (map first (filter #(> (last %) 1) \n                          (frequencies (mapcat vec (list a b)))))))","problem":81,"user":"4daeabf6edd6309eace4d15c"},{"problem":81,"code":"(fn [%1 %2]\n  (->>\n    (filter (fn [c] (contains? %1 c) )\n            %2)\n    (set)\n    )\n  )","user":"5a71c89ee4b0512ff01cda93"},{"code":"(fn sect [s1 s2]\n  (set (filter #(contains? s1 %) s2)))\n;make a set out the result of filter with the function contains? in s1 the elements in s2","problem":81,"user":"53713ebee4b0fc7073fd6ead"},{"code":"(fn __ [a b]\n  (clojure.set/difference (clojure.set/union a b)\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))))","problem":81,"user":"4fa719c0e4b081705acca1bf"},{"problem":81,"code":"(fn [set1 set2] (set (filter #(if %1 true) (map #(set1 %1) set2))))","user":"571d9669e4b0145328a7627f"},{"code":"(fn [a b]\n   (set (filter #(contains? b %) a)))","problem":81,"user":"51780f88e4b03d69594194c9"},{"code":"(fn inter-section [s1 s2]\r\n  (apply disj s1 (clojure.set/difference s1 s2)))","problem":81,"user":"4f2942ace4b0d6649770a01e"},{"code":"#(-> % (filter %2) set)","problem":81,"user":"5281a445e4b0757a1b17143a"},{"problem":81,"code":"(fn [x y]\n  (set (keys (filter #(> (count (last %)) 1) (group-by identity ( concat x y))))))","user":"5654cb2de4b0f9d632dd848b"},{"code":"(fn [a b] (into #{} (filter #(contains? a %) b)))","problem":81,"user":"504e685fe4b0f6ff3350c4ae"},{"problem":81,"code":"(fn f [x & ys]\n  (let [c (fn [a b] (filter #(get a %) b))\n        [y & r] ys] \n    (if y\n      (apply f  (c x y) r)\n      (set x))))","user":"53b42472e4b047364c0444b2"},{"problem":81,"code":"(fn [a b]\n  (let [a-b (clojure.set/difference a b)\n        c (clojure.set/difference a a-b)]\n    c))","user":"5f238a59e4b0f565ad99828d"},{"code":"(fn [s1 s2] \n  (reduce #(if (contains? s1 %2) (conj %1 %2)  %1) \n          #{} s2))","problem":81,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn __ [s1 s2]\n  (set (filter (complement not) (map s1 s2)))\n)","problem":81,"user":"503f872ee4b00d1a725ff2ac"},{"code":"#(apply disj %1 \n           (apply (partial disj %1) %2))","problem":81,"user":"502ade49e4b0614b52996120"},{"problem":81,"code":"(fn [s1 s2] (into #{} (for [x (concat s1 s2) :when (and (contains?  s1 x ) (contains?  s2 x)) ] x)  ))","user":"564a560ae4b0284900eef654"},{"problem":81,"code":"#(set (for [x %1 :when (and (contains? %1 x) (contains? %2 x))] x))","user":"55efc44ee4b066087aa9453e"},{"code":"(fn intersect [s1 s2]\n  (set\n   (filter s1 s2)))","problem":81,"user":"536673a8e4b0243289761e76"},{"problem":81,"code":"(fn [arg1 arg2]\n  (\n   loop [coll arg1\n         res #{}]\n   \n   \t(cond\n     \t(empty? coll) res\n     \t(contains? arg2 (first coll)) (recur (rest coll) (conj res (first coll)))\n     \t:else (recur (rest coll) res)\n     )\n   \n   )\n)","user":"5fc5c303e4b02c825b0c8c1a"},{"code":"(fn [s1 s2]\n  (reduce into #{} (map #(if ((partial contains? s1) %) #{%}) s2)))","problem":81,"user":"5361a4f2e4b0243289761e47"},{"problem":81,"code":"(fn intersection-c\n  [s1 s2]\n  (loop [se1 s1\n         se2 s2\n         f #{}]\n    (if (or\n          (empty? se1)\n          (empty? se2))\n      f\n      (if (contains? se2 (first se1) )\n        (recur (rest se1) se2 (conj f (first se1)))\n        (recur (rest se1) se2 f)))))","user":"5ec943fde4b08d0ec38692f1"},{"problem":81,"code":"(fn foo [s1 s2]\n  (reduce (fn [coll elm]\n            (if (contains? s2 elm)\n              (conj coll elm)\n              coll)) #{} (map (fn [x] x) s1)))","user":"5dba063ee4b010eb3c36cd5c"},{"code":"(fn inters [a b]\n  (let [u (clojure.set/union a b)\n        dif-ab (clojure.set/difference a b)\n        dif-ba (clojure.set/difference b a)\n        u-dif (clojure.set/union dif-ab dif-ba)]\n    (clojure.set/difference u u-dif)))","problem":81,"user":"4f9acea6e4b0dcca54ed6d10"},{"code":"(fn inter [s1 s2] \n  (if (empty? s1) \n\t#{} \n\t(if (contains? s2 (first s1)) \n\t\t(conj (inter (rest s1) s2 ) (first s1) ) \n\t\t(inter (rest s1) s2))))","problem":81,"user":"4e8d5edd535d65386fec2134"},{"problem":81,"code":"(fn [a b] (set (filter #(some a #{%}) b)))","user":"53307a23e4b019098a6f8b5d"},{"problem":81,"code":"(fn \n  [a b]\n  (set (filter #(contains? a %)(seq b))))","user":"59874ff6e4b021a7a535fea1"},{"problem":81,"code":"(fn inter [A B]\n  (set\n    (remove nil?\n      (for [elem A]\n        (when (contains? B elem)\n          elem\n        )\n      )\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn [s1 s2] \n  (if (< (count s2) (count s1)) \n    (recur s2 s1) \n    (reduce (fn [result item] \n              (if (contains? s2 item) \n                result \n                (disj result item))) \n            s1 s1)))","problem":81,"user":"51430fb2e4b0c172af7558ce"},{"code":"(fn [s1 s2]\n   (set (filter (partial contains? s1) s2)))","problem":81,"user":"4ff769bce4b0678c553fc38f"},{"code":"#(let [u clojure.set/union d clojure.set/difference] (apply disj (u % %2) (u (d % %2) (d %2 %))))","problem":81,"user":"50548ce8e4b0b1b9d1860ead"},{"code":"(fn p81 [a b]\n  (let [elements (distinct (sort (concat a b))) ;список элементов\n        has? (fn [x] (and (some #(= x %) a) (some #(= x %) b)))]\n    (loop [res #{} l elements]\n      (if (empty? l)\n        res\n        (if (has? (first l))\n            (recur (conj res (first l)) (rest l))\n            (recur res (rest l))\n            )))))","problem":81,"user":"51750fc5e4b07031762f2ee6"},{"problem":81,"code":"(fn my-intersect [set-1 set-2]\n  (loop [acc #{}\n         s1 (seq set-1)\n         s2 set-2]\n    (cond\n     (empty? s1) acc\n     (contains? s2 (first s1))\n     (recur (conj acc (first s1)) (rest s1) s2)\n     :else (recur acc (rest s1) s2))))","user":"53e27bf1e4b036ad0777e3f2"},{"problem":81,"code":"(fn [a b]\n  (reduce #(if (contains? b %2) (conj %1 %2) %1) #{} a)\n  )","user":"539ec9f9e4b0ca733b974491"},{"problem":81,"code":"(fn f [x y] (set (if (> (count y) (count x)) (f y x) (reduce #(if (contains? y %2) (conj %1 %2) %1) #{} x))))","user":"531a0709e4b08068f379ed87"},{"problem":81,"code":"(fn intersec\n  [setA setB]\n   (set (filter #(contains? setA %) setB))\n  )","user":"5bc8c033e4b07a9b28b100ca"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [rest-set (vec set1)\n         result #{}]\n    (let [[head & tail] rest-set]\n      (cond \n       (empty? rest-set) result\n       (contains? set2 head) (recur tail\n                                    (conj result head))\n       :else (recur tail result)))))","user":"567bf820e4b05957ce8c61ad"},{"code":"(fn [x y]\n  (into #{} (filter #(contains? y %) x)))","problem":81,"user":"502940a9e4b061fd216be4b8"},{"code":"(fn [a b]\n  (reduce\n    (fn [result x]\n      (if (a x)\n        (conj result x)\n        result))\n    #{} b))","problem":81,"user":"4e68c434535d8ccf87e9fe89"},{"problem":81,"code":"(fn [c1 c2]\n          (into #{} (filter #(c2 %) c1))\n          )","user":"5a488c09e4b05d388ecb6b68"},{"problem":81,"code":"(fn inters [s1 s2]\n  (reduce #(if (contains? s2 %2) (conj %1 %2) %1) #{} s1))","user":"5f8b06afe4b0715f5002d74a"},{"problem":81,"code":"(fn [a b]\n  (loop [o #{} x a]\n    (if (empty? x)\n      o\n      (if (contains? b (first x))\n        (recur (conj o (first x)) (rest x))\n        (recur o (rest x))))))","user":"57533bc1e4b02ea1147992a6"},{"problem":81,"code":"#(clojure.set/difference %1 (clojure.set/difference %1 %2))\n;(fn [a b] (set (filter #(contains? b %) a)))","user":"57ee46c7e4b0bfb2137f5bb3"},{"code":"(fn set-intersection\n  [x y]\n  (let [only-x (clojure.set/difference x y)\n        only-y (clojure.set/difference y x)]\n    (clojure.set/difference (clojure.set/difference (clojure.set/union x y) only-x) only-y)))","problem":81,"user":"51c330a9e4b0851ac09658f2"},{"code":"#(set (flatten (filter (fn [a] (= (first a) (second a))) (for [x %1 y %2] [x y]))))\n;(comp set filter)","problem":81,"user":"52df232fe4b09f7907dd13fc"},{"code":"#(let [d clojure.set/difference]\n  \t       (d %1 (d %1 %2)))","problem":81,"user":"4e5867d1535d8a8b8723a291"},{"problem":81,"code":"(fn [set1 set2] (loop [s1 set1 s2 set2 u #{}] (cond (= 0 (count s2)) u (contains? s1 (first s2)) (recur s1 (rest s2) (conj u (first s2))) :else (recur s1 (rest s2) u))))","user":"540b4c4de4b0addc1aec66f6"},{"problem":81,"code":"(fn [a b] (set (filter identity (map #(b %) a))))","user":"5e2549c8e4b05b4b0151615f"},{"code":"(fn [x1 x2]\n    (reduce #(if (contains? x2 %2) (conj % %2) %) #{} x1))","problem":81,"user":"50aedb8ce4b0a40c9cfb08d4"},{"problem":81,"code":"(fn [set1 set2]\n  (reduce #(if (contains? set2 %2)\n             (conj %1 %2)\n             %1)\n          #{}\n          set1))","user":"574e84e0e4b02ea114799243"},{"problem":81,"code":"(fn [x y] (into #{} (filter (fn [i] (contains? y i)) x)))","user":"5addadfce4b0837691e92c13"},{"code":"(fn my-intersection [a b]\n  ((fn [ap i]\n     (if (seq ap)\n       (let [ne (first ap)]\n         (if (contains? b ne)\n           (recur (rest ap) (conj i ne))\n           (recur (rest ap) i)))\n       i))\n     a #{}))","problem":81,"user":"4ec75077535d6d7199dd36e0"},{"problem":81,"code":"(fn [& args] (set (reduce filter args)))","user":"53908e6be4b0b51d73faae9a"},{"code":"#(clojure.set/select (partial contains? %1) %2)","problem":81,"user":"4e9fd521535d7eef3080729a"},{"problem":81,"code":"#(reduce (fn [a x] (if (%2 x) (conj a x) a)) #{} (vec %))","user":"59638af5e4b066ee0a44b0cc"},{"problem":81,"code":"#(into #{} (remove nil? (map (fn [a] (if (%2 a) a)) %1)))","user":"5b59d176e4b02d533a91bd86"},{"problem":81,"code":"#(set (keys (filter (fn [x] (> (second x) 1)) (frequencies (concat %1 %2)))))","user":"586b6a0ae4b01531a375e957"},{"problem":81,"code":"(fn [s1 s2]\n(set (filter #(.contains s2 %) s1)))","user":"589b98fae4b00487982d533c"},{"code":"(fn [s1 s2]\n  (set (filter #(and (contains? s2 %1) (contains? s1 %1)) (clojure.set/union s1 s2))))","problem":81,"user":"4e4ca885535dc968683fc4df"},{"problem":81,"code":"(fn my-intersect \n  ([m1 m2] \n    (cond\n    (or (= (count m1) 0) (= (count m2) 0)) #{} \n    :else (my-intersect m1 m2 #{})\n    )) \n  ([m1 m2 newM]\n    (cond\n    (= (count m1) 0) newM\n    (contains? m2 (first m1)) (my-intersect (rest m1) m2 (conj newM (first m1)))\n    :else (my-intersect (rest m1) m2 newM)\n    ))\n)","user":"6065755ee4b069485764ddcc"},{"problem":81,"code":"(fn sect [a b] (set (remove nil? (map a b))))","user":"5dd47f7ce4b0948ae9d9ad6d"},{"problem":81,"code":"(fn\n  [set-a set-b]\n  (->>\n   (map #(set-b %) set-a)\n   (filter (comp not nil?))\n   (into #{})))","user":"55a9e0fee4b0988bba2ad945"},{"problem":81,"code":"#(into #{} (apply concat (remove nil? (for [x % y %2]\n                          (if (= x y) #{x})))))","user":"5a6dbaf5e4b0512ff01cda63"},{"problem":81,"code":"(fn [x y] (set (remove (clojure.set/difference x y) x)))","user":"5bb3c9a8e4b0a20761a2352f"},{"code":"(fn ins\n  ([s1 s2] (ins s1 s2 #{}))\n  ([s1 s2 acc]\n    (if (empty? s1)\n      acc\n      (let [elem (s2 (first s1))]\n        (recur \n          (rest s1)\n          s2\n          (if (nil? elem) acc (conj acc elem)))))))","problem":81,"user":"4f2e0369e4b0d6649770a064"},{"code":"#(set (for [x %2 :when (contains? % x)] x))","problem":81,"user":"4e5af45e535d8a8b8723a2b1"},{"code":"(fn [l m] (set (remove nil? (map #(get l %) m))))","problem":81,"user":"4f0333f6535dcb61093f6a77"},{"code":"(fn [set1 set2] (set (concat (filter set1 set2) (filter set2 set1))))","problem":81,"user":"511a5328e4b09045b2b16946"},{"problem":81,"code":"(fn [lstA lstB] (set (filter #(contains? lstB %) lstA)))","user":"57210e8ee4b0c5bde472c0a8"},{"problem":81,"code":"(fn[s1 s2]\n     (set (mapcat (fn [x]\n              (filter #(= % x) s2)) s1)))","user":"5f77890ae4b02876ed9fd0b9"},{"code":"(fn [s c] (reduce #(if (get s %2) (into %1 (list %2)) %1) #{} c))","problem":81,"user":"536c7470e4b0fc7073fd6e3e"},{"code":"(fn[xs ys]\n  (set(filter(fn[x](some(fn[y](= x y)) ys)) xs)))","problem":81,"user":"4edeac6b535d10e5ff6f533a"},{"problem":81,"code":"(fn [x y] (clojure.set/difference (clojure.set/union x y) \n                                   (clojure.set/union (clojure.set/difference x y)\n                                                      ( clojure.set/difference y x))))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn zintersection [a b]\n  (let [aorb (clojure.set/union a b)\n        aminusb (clojure.set/difference a b)\n        bminusa (clojure.set/difference b a)]\n  (clojure.set/difference aorb aminusb bminusa)))","problem":81,"user":"4e5fdd68535d8ccf87e9fe4f"},{"problem":81,"code":"(fn [a b]\n  (set\n   (for [x (clojure.set/union a b)\n         :when (and (a x) (b x))]\n     x)))","user":"53065acbe4b02e8216869792"},{"problem":81,"code":"(fn myIntersection\n  [a b]\n  (into #{}\n        (for [s1 a\n              s2 b\n              :when (= s1 s2)]\n          s1)))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":81,"code":"(fn intersection2 [a b]\n    (set (for [x a :when (contains? b x)]\n       x))\n    )","user":"5921a080e4b09b4ee5954c77"},{"problem":81,"code":";; Passes unit tests but need to check intersection size for this to be correct\n(fn [& args] (set (flatten (filter #(< 1 (count %1)) (vals (group-by identity (flatten (map vec args))))))))","user":"5ccb3792e4b0ccb061962882"},{"problem":81,"code":";; #(set (filter %1 %2))\n(comp set filter)","user":"55e1fc42e4b050e68259b424"},{"problem":81,"code":"(fn [coll coll2]\n(reduce #(if (contains? coll %2) (conj %1 %2) %1) (sorted-set) coll2))","user":"5a7f77fae4b00b71e582a041"},{"code":"(fn [s1 s2]\n  (set (filter #(not (nil? %))\n               (for [i s1]\n                 (if (contains? s2 i) i)))))","problem":81,"user":"4e7d4544535db169f9c796d0"},{"code":"(fn [xs ys] (set (for [x xs y ys :when (= x y)] x)))","problem":81,"user":"525bcae9e4b0cb4875a45d30"},{"problem":81,"code":"(fn [a b] (into #{} (filter #(get a %) b)))","user":"598af379e4b02b9968b84ce6"},{"problem":81,"code":"(fn [s1 & sz]\n  (set (for [x s1 s sz :when (contains? s x)] x)))","user":"55d74e71e4b0e31453f64aa4"},{"code":"(fn [xs ys]\n  (loop [acc #{} x (first xs) xs (rest xs)]\n    (cond\n      (nil? x) acc\n      (contains? ys x) (recur (conj acc x) (first xs) (rest xs))\n      :else (recur acc (first xs) (rest xs)))))","problem":81,"user":"4dafa380edd6309eace4d17c"},{"problem":81,"code":"(fn [x y] (into #{} (filter #(not (nil? %)) (map #(y %) x))))","user":"5900d5cde4b0438e51c2d02e"},{"code":"(fn [s1 s2]\n    (reduce #(if (contains? s2 %2) (conj %1 %2) %1) #{} s1))","problem":81,"user":"51c3c6a6e4b0851ac09658f8"},{"code":";This was my first solution:\n(fn [x y] \n  (set \n   (filter #(contains? y %) x)))\n\n; Not bad, but then I saw this terse little number:\n;(comp set filter)\n\n; Which got me reading about 'comp' and made me realise\n; that you could also solve it like this:\n; #(-> (filter %1 %2) set)","problem":81,"user":"536a37efe4b0243289761eaa"},{"code":"#(letfn [(worker [x y s]\r\n           (if (empty? x)\r\n             s\r\n             (recur (rest x) y (if (get y (first x)) (conj s (first x)) s))))]\r\n   (worker %1 %2 #{}))","problem":81,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"#(loop [map1 %1 map2 %2 result '#{}]\n       (if (empty? map1)\n            result\n          (recur (rest map1)  map2 (if (contains? map2 (first map1)) (conj result (first map1)) result))\n       ))","problem":81,"user":"5290ffaee4b0239c8a67af10"},{"problem":81,"code":"(fn interX [a b] (into #{} (filter #(contains? b %) a)))","user":"568820e8e4b0dcc4269f4067"},{"problem":81,"code":"(fn\n  [set-a set-b]\n  (reduce (fn [b n] (if (set-a n)\n                      (conj b n)\n                      b\t)) #{} set-b))","user":"5b759ca8e4b047b03b2036d0"},{"problem":81,"code":"(fn intersect'\n  [a b]\n  (if (< (count b) (count a))\n    (recur b a)\n    (reduce (fn [coll item]\n              (if (contains? a item)\n                coll\n                (disj coll item))) b b)))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":81,"code":"(fn [x y]\n    (set (filter #(contains? x %) y)))","user":"555f3bfde4b0a2eb076a39c1"},{"code":"(fn [s1 s2] (set (filter #(not (nil? (get s1 %)))  s2)))","problem":81,"user":"4f327844e4b0d6649770a092"},{"problem":81,"code":"(fn [a b]\n    (loop [a a b b acc #{}]\n      (if (empty? a)\n        acc\n        (if (b (first a))\n          (recur (rest a) b (conj acc (first a)))\n          (recur (rest a) b acc)))))","user":"551a21ece4b091ff45eda993"},{"code":"(fn inter [l1 l2]\n  (set(for [x l1 y l2 :when (= x y)] x))\n)","problem":81,"user":"4f84400de4b033992c121c2e"},{"problem":81,"code":"(fn [coll1 coll2]\n   (set (remove nil? (map #(if (contains? coll2 %) %) coll1))))","user":"5e16fd78e4b0a047bd49f726"},{"problem":81,"code":"(fn [set-1 set-2]\n   (set (filter #(contains? set-2 %) set-1)))","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n  (reduce\n   (fn [acc x] (if (contains? s1 x) (conj acc x) acc))\n   #{}\n   s2))","user":"5b7f2d75e4b047b03b203768"},{"problem":81,"code":"#( set ( remove nil? (map %1 %2) ) )","user":"555093b2e4b00713264bd9ab"},{"problem":81,"code":"(fn f81 [x y]\n  (apply hash-set (for [tx x ty y :when (= tx ty)]\n    tx\n    ))\n  )","user":"526698c9e4b03e8d9a4a7144"},{"problem":81,"code":"(fn [s1 s2]\n    (set (filter (fn [e1] (contains? s2 e1)) s1)))","user":"550c55d0e4b06e50f9beb14d"},{"code":"(fn __ [s1 s2](apply disj s1 (apply disj s1 s2)))","problem":81,"user":"52485723e4b05ef8e38e63d2"},{"code":"(fn q\n  ([s t] (q s t #{}))\n  ([s t ans]\n    (println ans)\n    (if (empty? s)\n      ans\n        (if (t (first s))\n          (q (disj s (first s)) t (conj ans (first s)))\n          (q (disj s (first s)) t ans)\n          )\n      )\n    )\n  )","problem":81,"user":"4f2004a1535d64f6031464a7"},{"code":"#(set\n  (filter (fn [n] (not= n nil)) \n    (for [n %1]\n      (if (contains? %2 n)\n        n))))","problem":81,"user":"4ee82223535d93acb0a66877"},{"problem":81,"code":"(fn setIntersection [set1 set2]\n  (set(filter #(set1 %) set2)))","user":"55773b02e4b05c286339e07e"},{"problem":81,"code":"(fn [x y] (set (remove nil? (map #(x %) y))))","user":"5327c591e4b09d4e7a9b54ff"},{"problem":81,"code":"(fn set-intersection' [coll1 coll2]\n  (apply disj coll1 (clojure.set/difference coll1 coll2)))","user":"605a876be4b000d535e6f53c"},{"code":"(fn [s1 s2]\n  (loop [n (first s1) r (rest s1) ss s2 acc '()]\n    (if n\n    (if\n      (contains? ss n)\n      (let [new-acc (concat (list n) acc)]\n        (recur (first r) (rest r) ss new-acc))\n      (recur (first r) (rest r) ss acc))\n      (set acc))))","problem":81,"user":"4f031883535dcb61093f6a5e"},{"code":"#(clojure.set/difference \n  \t(clojure.set/difference \n    \t(clojure.set/union % %2)\n        (clojure.set/difference % %2)\n     ) \n     (clojure.set/difference %2 %1)\n  )","problem":81,"user":"5296008fe4b02ebb4ef7502a"},{"problem":81,"code":"(fn [a b] (into #{}(filter #(contains? b %) a)))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":81,"code":"(fn eh [x y]\n  (cond\n   (< (count y) (count x)) (eh y x)\n   :else (set (filter #(y %) x))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"#(set(for[a % :when(%2 a)]a))","problem":81,"user":"4e57d1e2535d8a8b8723a289"},{"code":"(fn [a b]\n  (let [u (set (concat a b))\n        i (for [v u]\n            (and (a v) (b v)))]\n    (set (filter #((complement nil?) %1) i))))","problem":81,"user":"5236b6bce4b05f3be1c7c8fe"},{"code":"(fn inters [x,y]\n   (clojure.set/select #(contains? y %) x))","problem":81,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":81,"code":"(fn [c1 c2] (set (filter #(contains? c2 %)  c1 ) ))","user":"537b1083e4b06839e8705e64"},{"problem":81,"code":"(fn [s1 s2] (set (map first (filter #(= 2 (second %)) (frequencies (concat s1 s2))))))","user":"5686b7c7e4b0dcc4269f4057"},{"code":"(fn [a b]\n  (let [c   (clojure.set/union a b)\n        c-a (clojure.set/difference c a)\n        c-b (clojure.set/difference c b)]\n    (clojure.set/difference c (clojure.set/union c-a c-b))\n    ))","problem":81,"user":"53415755e4b00652c8746ecd"},{"problem":81,"code":"(fn [xs ys]\n  (set (for [x xs\n             y ys\n             :when (= x y)]\n         x)))","user":"54508859e4b0e397800069a3"},{"problem":81,"code":"(fn no81 [x y]\n  (if (or (empty? x) (empty? y)) #{}\n    (if (some #(= (first x) %) y) (into #{} (concat [(first x)] (no81 (rest x) y)))\n      (no81 (rest x) y))))","user":"55630cc1e4b0c656e3ff17e0"},{"code":"#(set (remove nil? (map %1 %2)))","problem":81,"user":"4f8345c6e4b033992c121c1b"},{"problem":81,"code":"(fn [xs ys] (set (filter ys xs)))","user":"56b86e64e4b0f26550335924"},{"problem":81,"code":"(fn [a b]\n  (into #{} (filter #(contains? b %) a))\n  )","user":"589037b4e4b00487982d51d0"},{"problem":81,"code":"(fn [s1 s2]\n  (->> (concat s1 s2)\n       (filter #(and (contains? s1 %) (contains? s2 %)))\n       (into #{})))","user":"542c22bde4b0dad94371f29e"},{"problem":81,"code":"#(loop[a %1 b %2 result {}]\n   (if(empty? a) (set(reverse result)) \n     (if (empty? b) (recur (rest a) %2 result)\n       (if (=(first a)(first b)) (recur (rest a) %2 (cons (first a) result))\n         (recur a (rest b) result)))))","user":"59c77511e4b0a024fb6ae545"},{"problem":81,"code":"(fn [a b]\n  (set (filter identity (for [i a] (some #{i} b)))))","user":"59dfd369e4b08badc2a0c4dd"},{"code":"(fn [c1 c2] (set (for [x c1 :when (contains? c2 x)] x)))","problem":81,"user":"4f03ac2d535dcb61093f6b4a"},{"code":"(fn [a b]\n  (set (filter #(b %) a)))","problem":81,"user":"4ee88269535d93acb0a6687f"},{"code":"(fn [a b]\n  (reduce\n    (fn [res e]\n      (if (contains? b e)\n        (conj res e)\n        res))\n    #{} a))","problem":81,"user":"4eb1dd39535d7eef30807345"},{"problem":81,"code":"#(set (sort (filter (fn \n            [x]\n            (and (contains? %1 x) (contains? %2 x))) (apply merge %1 %2))))","user":"5f6e576ae4b02876ed9fd066"},{"problem":81,"code":"(fn [sta stb] \n  (loop [i 0\n         res '()\n         all (concat sta stb)]\n    (cond\n     (= i (count all)) (set res)\n     (and (contains? sta (nth all i)) (contains? stb (nth all i)) ) (recur (inc i) (cons (nth all i) res) all)\n     :else (recur (inc i) res all) )))","user":"6074df6fe4b069485764de4b"},{"code":"(fn[a b] (reduce #(if (.contains b %2) (clojure.set/union (hash-set %2) %1) %1) #{} a))","problem":81,"user":"51b7b521e4b0d906fcd71d3a"},{"code":"(fn [s1 s2]\n  (reduce #(if (contains? s2 %2)\n               (conj % %2)\n               %) #{} s1))","problem":81,"user":"4ef992c8535dced4c769f268"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce #(if (s2 %2) (conj % %2) %) #{} s1)\n  )","user":"52b434c9e4b0c58976d9ad1c"},{"code":"(fn [set-1 set-2]\n  (loop [v (first set-1)\n         vs (rest set-1)\n         result []]\n    (if (nil? v)\n      (apply hash-set result)\n      (recur (first vs) (rest vs) (if (set-2 v) (cons v result) result)))))","problem":81,"user":"50ed3c6be4b01236b1d4983b"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [s1 s1 s #{}]\n    (if (empty? s1)\n      s\n      (recur (rest s1) (into s (clojure.set/select #(= % (first s1)) s2))))))","user":"54cad59ee4b057c6fda3a26e"},{"code":"(fn [x y]\n  (reduce disj y\n    (reduce disj y x)\n  )\n)","problem":81,"user":"4e333091535deb9a81d77f25"},{"code":"(fn [a b]\n  (let [all (clojure.set/union a b)\n        diff-a (clojure.set/difference a b)\n        diff-b (clojure.set/difference b a)\n        diff (clojure.set/union diff-a diff-b)]\n    (apply disj (cons all (vec diff)))))","problem":81,"user":"50bd6033e4b0594b91591c66"},{"problem":81,"code":"#(apply sorted-set (for [x % y %2 :when (= x y)]\n   x))","user":"604a3daee4b02d28681c77f2"},{"code":"#(set(filter % %2))","problem":81,"user":"4e588e84535d8a8b8723a294"},{"code":"(fn [a b] (set (for [el-a a el-b b :when (= el-a el-b)] el-a)))","problem":81,"user":"52244a77e4b01819a2de42d1"},{"problem":81,"code":"(fn [a b]\n     (set\n       (for [x a :when (b x)] x)))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":81,"code":"(fn [x y] ( reduce (  fn[setx valy] \n                      (if (contains? x valy)  (conj setx valy) setx)\n          ) #{} y)\n)","user":"542baf7ce4b0dad94371f291"},{"problem":81,"code":"(fn [a b]\n  (loop [x a\n         z #{}]\n    (cond\n      (empty? x)\n        z\n      :else\n        (recur\n          (set (rest x))\n          (if (contains? b (first x)) (conj z (first x)) z)))))","user":"595c02a9e4b066ee0a44afeb"},{"problem":81,"code":"(fn [c1 c2]\n      (into #{} (filter c1 c2)))","user":"5785c1d4e4b0ebec4cfb74e1"},{"code":"(fn[s1 s2] \n    (reduce\n        (fn[x y] (if (contains? s2 y) (conj x y) x)\n        )\n        #{}\n        s1\n    )\n)","problem":81,"user":"5017eface4b02f523d7cc5e7"},{"code":"#(set (for [y (filter (fn [x] (= (last x) 2)) (frequencies (concat %1 %2)))] (first y)))","problem":81,"user":"53838742e4b06839e8705ee0"},{"code":"(fn [set1 set2]\n  (set (filter #(contains? set2 %) set1)))","problem":81,"user":"4dc0ff08535d020aff1edf84"},{"problem":81,"code":"(fn intersect \n    [a b]\n    (set (filter #(contains? b %) a)))","user":"4e8a170c535d3e98b802328f"},{"code":"(fn [set1 set2] (set (filter #(some #{%} set1) set2)))","problem":81,"user":"502d4ea0e4b02fc10c6c6e46"},{"code":"(fn [s1 s2]\n  (reduce \n   (fn [i e]\n     (if (contains? s2 e)\n       (conj i e)\n       i))\n   #{}\n   s1))","problem":81,"user":"52a32876e4b04e0c58e87bfb"},{"problem":81,"code":"(fn my-intersection\n  [a b]\n  (into #{} (filter #(contains? a %) b)))","user":"59636ec9e4b066ee0a44b0c8"},{"code":"(fn [s1 s2]\n  (clojure.set/difference\n   (clojure.set/union s1 s2)\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))","problem":81,"user":"52271a85e4b04e78ff2e19a7"},{"code":"(fn [set1 set2]\n  (set (filter (comp not nil?) (for [i set1]\n    (when (contains? set2 i) i)))))","problem":81,"user":"516081e7e4b009fba0926e28"},{"code":"(fn [x y]\n  (set\n   (remove (clojure.set/difference y x)\n           (remove (clojure.set/difference x y)\n                   (clojure.set/union x y)))))","problem":81,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":81,"code":"#(loop [a %1 b %2 res []](if(empty? a) (set res) (recur (rest a) b (if(contains? b (first a)) (conj res (first a)) res))))","user":"5565d5e4e4b0c656e3ff181f"},{"problem":81,"code":"(fn my-intersection\n  [& lists]\n  (->> (apply concat lists)\n       (group-by identity)\n       (filter (fn [[key val]] (> (count val) 1)))\n       keys\n       set))","user":"53571732e4b04ce2eb3ed275"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [s-final item]\n            (if (contains? s1 item)\n              (conj s-final item)\n              s-final)) #{} s2))","user":"58a0ac0de4b02bd94d917e9c"},{"code":"#(set (flatten (for [x %1]\n       (filter (fn [a] (= a x)) %2))))","problem":81,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"(fn set-intersect [a b]\n  (let [a-sub-b (clojure.set/difference a b)\n        b-sub-a (clojure.set/difference b a)\n        full-diff (clojure.set/union a-sub-b b-sub-a)\n        full-set (clojure.set/union a b)]\n     (clojure.set/difference full-set full-diff)))","problem":81,"user":"4ddb339c535d02782fcbe9f9"},{"problem":81,"code":"(fn [s1 s2]\n    (let [s3  (into #{}\n                (for [x s1]\n                  (when (contains? s2 x)\n                     x)))]\n\n    (disj s3 nil)))","user":"54468fd3e4b032a45b8693b2"},{"problem":81,"code":"(fn [set1 set2]\n  (clojure.set/select #(contains? set1 %) set2))\n;(fn [s1 s2] (set (filter s1 s2)))","user":"55aa8276e4b0988bba2ad94e"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n  (->> (concat s1 s2)\n       (filter #(and (contains? s1 %)\n                     (contains? s2 %)))\n       (set)))","user":"557e56aae4b05c286339e0d5"},{"code":"(fn [x y] (set (filter #(contains? x %) y)))","problem":81,"user":"50ef56dfe4b0bdaecbb47d94"},{"problem":81,"code":"(fn [ a b ]\n  (reduce #(if (b %2) (conj %1 %2) %1) #{} a))","user":"55536a8ae4b0deb715856e03"},{"problem":81,"code":"(fn mm [a b]\n  (set (filter #(b %) a)))","user":"535f0cbde4b04ce2eb3ed2d9"},{"code":"(fn [a b]\n  (set (filter #(and (contains? a %) (contains? b %)) (into a b))))","problem":81,"user":"4f410b63e4b0e243712b1fc5"},{"problem":81,"code":"(fn [s s1]\n  (reduce #(if (s1 %2)\n             (conj % %2)\n             %) #{} s))","user":"5b22328ee4b03cfeda66ed5d"},{"problem":81,"code":"; k-wow\n; same as #(set (filter % %2))\n(comp set filter)\n\n; first try\n#_#(reduce disj % (clojure.set/difference % %2))","user":"55e7d06ee4b050e68259b496"},{"problem":81,"code":"(fn [x y] (set (remove nil? (for [a x] (if (contains? y a) a)))))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"#(set (keep %2 %1))","problem":81,"user":"4e7dd982535db169f9c796ee"},{"problem":81,"code":"(fn intersect [s1 s2]\n  (->> (concat s1 s2)    \n    (frequencies)\n    (filter #(> (val %) 1))\n    (map first)\n    (set)\n  ))","user":"587a3babe4b01531a375eae2"},{"problem":81,"code":"(fn [col1 col2]\n             (reduce (fn [result x]\n                       (if (contains? col2 x)\n                         (conj result x)\n                         result))\n                     #{} col1))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":81,"code":"(fn __ [s1 s2]\n  (reduce (fn [acc x]\n            (if (s2 x)\n              (merge acc x)\n              acc))\n          #{} s1))","user":"55916764e4b0604b3f94d57b"},{"problem":81,"code":"#(into #{} (for [x %1 y %2 :when (= x y)] x))","user":"54344721e4b0b6b47310fcea"},{"problem":81,"code":"#(set (filter (comp not nil?) (for [i %] (when (contains? %2 i) i))))","user":"543b4746e4b032a45b86932c"},{"code":"(fn [set1 set2]\r\n    (set \r\n      (keys \r\n        (select-keys \r\n          (reduce #(assoc %1 %2 1) {} set1) \r\n          set2))))","problem":81,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn inter \n  ([s1 s2] (inter s1 s2 #{}))\n  ([s1 s2 s]\n    (if (empty? s2)\n      s\n      (if (s1 (first s2))\n        (inter s1 (rest s2) (conj s (first s2)))\n        (inter s1 (rest s2) s)\n      )\n    )\n  )\n)","problem":81,"user":"4fff00ede4b0678c553fc3fc"},{"problem":81,"code":"#(set( filter (comp not nil?) (map %2 %1)))","user":"54f86b8ce4b01ecee9d88828"},{"code":"(fn [s1 s2] (into #{} (filter #(contains? s2 %1) s1)))","problem":81,"user":"4f2893d0e4b0d6649770a019"},{"problem":81,"code":"(fn [k1 k2] \n   (set (reduce \n          (fn [arr elem]\n            (if (contains? k1 elem)\n              (conj arr elem)\n              arr))\n          []\n          k2)))","user":"58ed2e21e4b056aecfd47d7a"},{"code":"(fn [x y] \n  ((fn [x y result]\n    (if (empty? x)\n        result\n        (recur (rest x) y \n               (if (contains? y (first x))\n                   (conj result (first x))\n                    result))))\n  x y #{}))","problem":81,"user":"4e73a9dc535dff18050a9c77"},{"code":"(fn intersect [a b]\n (set (for [i a :when (contains? b i)] i)) \n )","problem":81,"user":"5228f870e4b0186687e23a98"},{"code":"#(into #{} (filter (comp not nil?) (for [e %1] (if (contains? %2 e) e))))","problem":81,"user":"53244c9de4b09d4e7a9b54db"},{"problem":81,"code":"(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2)\n                        (clojure.set/difference s1 s2)\n                        (clojure.set/difference s2 s1)))","user":"51a3be77e4b0e77c4ca60bf8"},{"problem":81,"code":"(fn [s1 s2]\n   (set (filter s1 s2)))","user":"5a250b86e4b07f18be40aa19"},{"code":"(fn [s1 s2]\r\n   (set (filter s1 s2)))","problem":81,"user":"4de623ef535d08e6dec9fdf4"},{"problem":81,"code":"#(clojure.set/difference %2 (clojure.set/union (clojure.set/difference %2 %) (clojure.set/difference % %2)))","user":"55484800e4b0a04f79299558"},{"problem":81,"code":"(fn my-intersection [a b]\n  (set (filter a b)))","user":"5c506951e4b0f9f7a8770ec5"},{"code":"(fn [s1 s2]\n  (reduce (fn [result item]\n                   (if (contains? s2 item)\n             result\n                     (disj result item)))\n           s1 s1))","problem":81,"user":"4fc8769be4b0ee37620e1833"},{"code":"(fn [x y] (set (filter (fn [element] (contains? y element)) x)))","problem":81,"user":"4f0365fc535dcb61093f6aa4"},{"code":"(fn [x s] \n  (set (filter #(contains? x %) s)))","problem":81,"user":"509eeb3be4b08df8156e9e37"},{"problem":81,"code":"(fn [set1 set2]\n  (into #{} (filter #(contains? set2 %) set1)))","user":"55d6a2ebe4b0e31453f64a9a"},{"code":"(fn my-intersection [set1 set2]\n  (clojure.set/select #(contains? set2 %) set1))","problem":81,"user":"53713ed9e4b0fc7073fd6eaf"},{"code":"#(apply hash-set (filter (partial contains? %1) %2))","problem":81,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":81,"code":"(fn [& xs] (set (map first (filter #(>= (second %) (count xs)) (frequencies (apply concat xs))))))","user":"4f598c87e4b0030a34fb2ada"},{"problem":81,"code":"(fn intersection2 [set1 set2]\n  (set (filter set1 set2)))","user":"541f5b37e4b01498b1a71a97"},{"code":"(fn [a b]\n  (set\n    (keys\n      (filter #(> (last %) 1)\n        (apply merge-with +\n          (map (fn [c] {c 1})\n            (concat a b))))))\n)","problem":81,"user":"4f16d6ed535d64f60314644f"},{"problem":81,"code":"(fn [a b]\n  (into #{}\n  \t(reduce #(if (contains? b %2)\n             \t(cons %2 %1)\n             \t%1\n             \t) #{} a)))","user":"53dfbc75e4b0d874e779ae44"},{"problem":81,"code":"(fn [s1 s2] \n  (into #{} (remove nil? (for [x s1] (when (contains? s2 x) x))))\n)","user":"5ea97df7e4b00a66d4a951c8"},{"code":"(fn intersect [set1 set2]\n  (reduce #(if (.contains set2 %2) (conj %1 %2) %1) #{} set1))","problem":81,"user":"50e4f4e9e4b049a987753896"},{"problem":81,"code":"; (fn [s t] (reduce #(if (s %2) (conj %1 %2) %1) #{} t))\n;#(set (filter %1 %2))\n(comp set filter)","user":"5a544eeee4b05d388ecb6c24"},{"problem":81,"code":"(fn intersection- [a b]\n  (set (filter #(contains? b %) a)))","user":"565654dae4b0f9d632dd849f"},{"code":"(fn f [a b]\n  (into #{} (for [x a :when (contains? b x)] x)))","problem":81,"user":"4e6a6b83535d8ccf87e9fee0"},{"problem":81,"code":"(fn [a b]\n  (reduce\n   (fn [out i] (if (b i)\n      (conj out i)\n      out))\n   #{}\n   a))","user":"5e64ae6ce4b0fd0acd1586ac"},{"problem":81,"code":";#(loop[l1 %,l2 %2,r #{}]\n;   (if (empty? l1) r\n;     (if (get l2 (first l1))\n;       (recur (rest l1) l2 (conj r (first l1)))\n;       (recur (rest l1) l2 r))))\n\n;#(set (for [x % :when (get %2 x)] x))\n\n#(set (filter (fn [x] (if (get %2 x) x)) %))","user":"555e9dbfe4b0a2eb076a39bc"},{"code":"(fn [l r] (set (filter #(get r %) l)))","problem":81,"user":"52ab61f5e4b0c58976d9ac75"},{"code":"(fn [xs ys] (into #{} (filter #(contains? xs %) ys)))","problem":81,"user":"51e61772e4b0efabf93c02e2"},{"problem":81,"code":"(fn [& x] \n  (reduce \n   (fn [s1 s2] (clojure.set/difference s1 (clojure.set/difference s1 s2) ))\n  x)\n)","user":"54078851e4b0addc1aec66bd"},{"problem":81,"code":"(fn [x y]\n  (->> (concat x y)\n       (frequencies)\n       (filter #(< 1 (val %)))\n       (map #(get % 0))\n       (set)))","user":"60a42199e4b00e9e6653c454"},{"problem":81,"code":"(fn [s1 s2]\n  (->> s2\n       (map #(if (clojure.set/subset? (set (vector %)) s1) % nil))\n       (remove nil?)\n       (into #{})))","user":"532bce35e4b09d4e7a9b5536"},{"problem":81,"code":"(fn [s1 s2]\n  (let [comb-set (clojure.set/union s1 s2)\n        diff1 (clojure.set/difference s1 s2)\n        diff2 (clojure.set/difference s2 s1)]\n    (clojure.set/difference comb-set diff1 diff2)))","user":"54ab1b5ae4b09f271ff37cc2"},{"code":"(fn [xs ys]\n  (into #{} (filter (partial contains? ys) xs)))","problem":81,"user":"52b8af15e4b07a9af57922b5"},{"code":"#(disj (set (map %1 %2)) nil)","problem":81,"user":"4e4870d1535dc968683fc4bc"},{"code":"(fn [a b] \r\n  (let [a+b (apply conj a b)\r\n        a-b (apply disj a b)\r\n        b-a (apply disj b a)]\r\n    (apply disj (apply disj a+b a-b) b-a)\r\n    ))","problem":81,"user":"4f0da4e4535d0136e6c22319"},{"problem":81,"code":"#(set (for [x %,\n            :when (%2 x)]\n        x)\n  )","user":"5cda72ffe4b05ee0cb311714"},{"code":"(fn [s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n         result\n                     (disj result item)))\n\t       s1 s1)))","problem":81,"user":"5007f751e4b0b17c647f522b"},{"problem":81,"code":"(fn [ x y] (into #{} (sort (map first (filter #(> (count %) 1) (vals (group-by identity (sort (concat x y)))))))))","user":"4f435ee8e4b0d7d3c9f3fd1f"},{"problem":81,"code":"(fn [setA setB]\n  (into #{} (filter #(not (nil? %1)) (map #(if (contains? setB %1) %1 nil) setA))))","user":"5b3de9a7e4b02d533a91bbf4"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce #(if (contains? s2 %2)\n             (conj %1 %2)\n             %1)\n          #{}\n          s1))","user":"57d57f65e4b0bd073c2023b3"},{"code":"#(set (for [e % :when (get %2 e)] e))","problem":81,"user":"4ee8b9c9535d93acb0a66884"},{"code":"(fn [x y]\n  (reduce #(if (x %2) (conj %1 %2) %1) #{} y))","problem":81,"user":"4eb9c82d535dfed6da9c6d5c"},{"problem":81,"code":"(fn [s1 s2]\n  (apply hash-set (filter #(s2 %) s1)))","user":"58ca8a1de4b03c36ff7e5835"},{"code":"(fn [c d]\n  (set (for [x c y d :when (= x y)] x)))","problem":81,"user":"50bfe725e4b080409b860f26"},{"code":"(fn inter\n  [s1 s2]\n  (if (< (count s2) (count s1))\n    (recur s2 s1)\n    (reduce (fn [result item]\n              (if (contains? s2 item)\n                result\n                (disj result item)))\n            s1 s1)))","problem":81,"user":"52527192e4b0541d1855b8af"},{"code":"(fn [x, y]\n  (set (filter #(contains? x %) y))\n)","problem":81,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn [xs ys]\n  (into #{} (filter #(contains? ys %) xs)))","problem":81,"user":"50217818e4b00bba4502f7a7"},{"code":"#(% %2 (% %2 %3)) clojure.set/difference","problem":81,"user":"53973e7be4b0b51d73faaee6"},{"problem":81,"code":"(fn [a b](set(filter #(contains? a %) b )))","user":"5c7d947be4b0d597f478cab6"},{"problem":81,"code":"(fn [ x y ]\n       (into #{} (filter identity (map #(when (contains? y %) % ) x)))\n      )","user":"50b25edae4b03ea88043355e"},{"problem":81,"code":";(fn [set1 set2] (reduce conj #{}(let [cnt1 (count set1)\n;                      cnt2 (count set2)]\n;                  (for [i (map inc (range cnt1))\n;                       j (map inc (range cnt2))\n;                    :while (= (set1 i) (set2 j))]\n;                    (set (set1 i))))))\n\n(fn [s1 s2] (if (< (count s2) (count s1)) \n              (recur s2 s1)\n              \n              (reduce (fn [result item] \n                        (if (contains? s2 item) \n                        result\n                        (disj result item))) s1 s1)))","user":"56629a7de4b0e91d5f5c5649"},{"problem":81,"code":"(fn [s t]\n  (set (filter #(contains? t %) s)))","user":"5afecee2e4b0cc2b61a3bd28"},{"problem":81,"code":"#(apply hash-set (for [x %1\n                 y %2\n                 :when (= x y)]\n             x))","user":"4eb47bb1535d7eef30807362"},{"problem":81,"code":"#(clojure.set/difference (clojure.set/union %1 %2)\n                         (clojure.set/union (clojure.set/difference %1 %2) \n                                            (clojure.set/difference %2 %1)))","user":"580d7de3e4b0849f6811b73d"},{"problem":81,"code":"(fn [& args] \n  (let [d (frequencies (apply concat args)) c (count args)]\n    (set (filter #(= c (d %)) (keys d)))\n   )\n  )","user":"52503747e4b0541d1855b828"},{"problem":81,"code":"(fn intrsct [set1 set2]\n  (loop\n    [result (sorted-set )\n     rset1 (list* set1)]\n    (println result rset1)\n\n    (cond\n      (empty? rset1) result\n      (contains? set2 (first rset1)) (recur (conj result (first rset1)) (rest rset1))\n      :else (recur result (rest rset1))\n      )\n    )\n  )","user":"576d24ede4b0979f8965155b"},{"problem":81,"code":"(fn [set1 set2]\n  (reduce (fn [intersect set1item] (if (some #(= set1item %) set2)\n                                       (conj intersect set1item)\n                                       intersect)) #{} set1))","user":"554bc64ae4b0a04f79299598"},{"problem":81,"code":"(fn [a b]\n    (set (filter (partial contains? b) a)))","user":"5691ef12e4b0dcc4269f40f8"},{"problem":81,"code":"(fn [x y]\n   (loop [x x y y res #{}]\n     (if (empty? x)\n       res\n       (if (contains? y (first x))\n         (recur (rest x) y (conj res (first x)))\n         (recur (rest x) y res)))))","user":"5508102ee4b021ccfedb96b0"},{"problem":81,"code":"(fn [a b]\n       (if (< (count a) (count b))\n         (recur b a) \n         (loop [a a b b acc #{}]\n           (if (empty? a)\n             acc\n             (recur (rest a) b (if (some #(= (first a) %) b)\n                                 (conj acc (first a))\n                                 acc))))))","user":"51bd255ce4b0df1216cefd94"},{"code":"(fn inter* [s1 s2]\n(set (filter #(contains? s2 %) s1)))","problem":81,"user":"4f04a06d535dcb61093f6bd9"},{"code":"#(set(keep %1 %2))","problem":81,"user":"4db27319535df7e46ed9b6bd"},{"code":"#(set (filter (fn [e] (contains? % e)) %2))","problem":81,"user":"4e597b2c535d8a8b8723a29d"},{"problem":81,"code":"(fn [a b] (into #{} (filter (partial contains? b) a)))","user":"5ab564f8e4b073f177442639"},{"code":"#(set (for [i %2 :when (% i)] i))","problem":81,"user":"5107b86de4b05b2b4eee7495"},{"problem":81,"code":"(fn [a b]\n   (clojure.set/difference\n    (clojure.set/union a b)\n    (clojure.set/union\n     (clojure.set/difference a b)\n     (clojure.set/difference b a))))","user":"53aaaf7ae4b047364c044444"},{"problem":81,"code":"#(apply sorted-set \n        (filter \n         (fn [x] \n           (contains? %1 x)) \n         %2))","user":"57fe2d6fe4b0d3187e9009c8"},{"problem":81,"code":"(fn [col1 col2]\n  (let [comm (filter #(col1 %) col2)]\n    (if (empty? comm)\n      #{}\n      (apply conj #{} comm))))","user":"57481f1fe4b009280f9f2b82"},{"problem":81,"code":"(fn\n  my-intersection\n  ([s1] s1)\n  ([s1 s2] (-> s1 (filter s2 ,,,) set))\n\n  ; one method by chaining together successive filters\n  ; ([s1 s2 & more] (-> s1\n  ;                     ((->> (conj more s2)\n  ;                           (map #(fn[s1] (filter % s1)) ,,,)\n  ;                           (apply comp ,,,)) ,,,)\n  ;                     set))\n  ;\n  ; ... but that is really equivalent to a reduction, so:\n  ([s1 s2 & more] (reduce my-intersection (conj more s2 s1)))\n\n  ; Possible improvement: these could be more performant by sorting the sets\n  ; by their counts, e.g. in the [s1 s2] arrity, recur with the inputs swapped\n  ; if s2 is shorter than s1 so that the shorter s2 set can be passed into\n  ; filter rather than the longer s1 set.\n)","user":"5c6227fee4b0fca0c1622641"},{"problem":81,"code":"(fn [x y]\n  (set\n   (map \n  first\n  (filter #(> (last %) 1) \n          (map vec (frequencies (concat x y)))))))","user":"58384bc4e4b089d5ab817d27"},{"problem":81,"code":"(fn [a b]\n  (set (filter #(not (nil? %)) (map a (vec b)))))","user":"5da306a3e4b000c986472be7"},{"code":"(fn f [a,b]\n  (if (= 0 (count a))\n    #{}\n    (let [ff (f (rest a) b)]\n    (if (get b (first a)) (conj ff (first a)) ff))))","problem":81,"user":"4e8b98fc535d65386fec2124"},{"problem":81,"code":"(fn [s1 s2]\n        (set (reduce (fn [r x] (if (s1 x) (conj r x) r)) [] s2)))","user":"532686e6e4b09d4e7a9b54ef"},{"problem":81,"code":"#(reduce (fn [acc v]\n            (prn acc v)\n            (if (contains? %1 v)\n              (conj acc v)\n              acc\n              )\n            ) #{} %2)","user":"5ed8a12fe4b0c7845d86b0d7"},{"code":"(fn [set1 set2]\n (set (for [a set1 :let [b a] :when (contains? set2 a)] b)))","problem":81,"user":"5073de20e4b054001656acca"},{"code":"(fn [xs ys] \n  (reduce \n    #(if (contains? ys %2) \n      (conj %1 %2) \n      %1) #{} xs))","problem":81,"user":"4fd7962ee4b0dab7d829f385"},{"problem":81,"code":"(fn foo [x y]\n            \n            \n            (if (> (count y) 0)\n            \n                (\n                    \n                    if (contains? x (first y))\n                \n                    \n                       (set  (conj (foo x (rest y)) (first y)))\n                       \n                    \n                    \n                     (foo x (rest y))\n                )\n                \n                (set nil)\n            )\n        )","user":"5bed1e4ae4b0a6d31fed2118"},{"problem":81,"code":"#(->> (filter %1 %2) (into #{}))","user":"5409a12fe4b0addc1aec66df"},{"code":"(fn [a b] (into #{} (remove nil? (map (partial #(if (contains? %1 %2) %2) a) b))))","problem":81,"user":"5003bb77e4b0678c553fc442"},{"problem":81,"code":"(fn [coll1 coll2]\n  (set (filter #(and (contains? coll1 %) (contains? coll2 %)) coll1)))","user":"5c24671be4b07e362c2305a1"},{"code":"#(set (for [x %1 y %2 :when (= x y)] x))","problem":81,"user":"4ea41fc2535d7eef308072cb"},{"code":"(fn [a b]\n  (reduce #(if (a %2) (conj %1 %2) %1) #{} b))","problem":81,"user":"4dd0e8f7535da60f04a96e57"},{"problem":81,"code":"(fn\n  [s1 s2]\n  (into #{} (filter #( contains? s2 % ) s1)))","user":"56019662e4b04bb52996e190"},{"code":"#(into #{} (filter % %2))","problem":81,"user":"4e9a8c0e535dbda64a6f6b72"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [[y & ys] (seq set1)\n         retval #{}]\n\n    (if (nil? y)\n      retval\n\n      (if (contains? set2 y)\n        (recur ys (conj retval y))\n        (recur ys retval)))))","user":"54bebeb9e4b0ed20f4ff6ef4"},{"problem":81,"code":"(fn [set1 set2]\n  (into #{} (reduce (fn [acc item]\n            \t\t\t(if (contains? set2 item)\n              \t\t\t\t(conj acc item)\n                          \tacc))\n          \t\t\t'()\n          \t\t\tset1)))","user":"58ee5371e4b056aecfd47da8"},{"code":"(fn [x1 y1] (into #{} (map first (filter #(= (first %) (peek %)) (for [x x1 y y1] [x y])))))","problem":81,"user":"5047782ce4b0371827a27bc2"},{"problem":81,"code":"#(loop [s %1 r #{}] \n   (cond \n     (empty? s) r \n     (contains? %2 (first s)) (recur (disj s (first s)) (conj r (first s)))\n     :else (recur (disj s (first s)) r)))","user":"55d29fb6e4b0e31453f64a59"},{"problem":81,"code":"(fn [set1 set2] \n   (loop [iterset set1 result #{}]\n     (if (empty? iterset)\n       result\n       (if (contains? set2 (first iterset))\n         (recur (rest iterset) (conj result (first iterset)))\n         (recur (rest iterset) result)))))","user":"606d75f5e4b069485764de13"},{"problem":81,"code":"(fn set-interset\n  [left right]\n  (loop [[h & t] (into [] left)\n         accum #{}]\n    (let [new-accum (if (contains? right h)\n                        (conj accum h)\n                        accum)]\n      (if (nil? t)\n          new-accum\n          (recur t new-accum)))))","user":"58152157e4b0f478707a0631"},{"problem":81,"code":"(fn [x y]  (apply sorted-set (filter #(some #{%} x) y)))","user":"540479e7e4b0addc1aec665a"},{"problem":81,"code":"(fn [lhs rhs]\n  (set\n    (filter\n      #(and (contains? lhs %) (contains? rhs %))\n      (clojure.set/union lhs rhs))))","user":"57300c19e4b0cd1946bd0fa1"},{"code":"(fn rec [a b]\n  (if (empty? a) #{}\n      (if (contains?  b (first a))\n        (conj (rec (rest a) b) (first a))\n        (rec (rest a) b))))","problem":81,"user":"52d1e364e4b0d9f9285948e7"},{"problem":81,"code":"(fn [a b]\n  (set (sort (filter (fn [x] (not (nil? x))) (mapcat (fn [x] (map (fn [y] (if (= x y) y)) b)) a)))))","user":"562d869be4b0a45d2ff8301f"},{"problem":81,"code":"#(set(remove nil?(map %1 %2)))","user":"53ed2fafe4b0d648e757f4c1"},{"problem":81,"code":"(fn [set-1 set-2] (loop [ accum #{} temp set-1] \n                                      (if (empty? temp) accum\n                                      (recur (if (contains? set-2 (first temp)) (conj accum (first temp)) accum) (rest temp)))))","user":"52fdbf3ae4b047fd55837032"},{"problem":81,"code":"(fn p \n  [lst lst2]\n  (set (filter lst lst2)))","user":"5723e6d6e4b0c5bde472c0f1"},{"problem":81,"code":"#(set (filter (fn [y] (contains? %2 y)) %1))","user":"5c7741dce4b0fca0c1622806"},{"code":"(fn [s1 s2]\n  (reduce (fn [s e] (if (contains? s2 e) (conj s e) s)) #{} s1))","problem":81,"user":"50aab057e4b056ee0193586b"},{"code":"(fn [sq1 sq2] \n  (set (filter #(contains? sq2 %) sq1)))","problem":81,"user":"523bd9c0e4b07becd5be2201"},{"code":"(fn [x y] (clojure.set/difference (clojure.set/difference \n                (clojure.set/union x y) (clojure.set/difference x y))\n                                        (clojure.set/difference y x)))","problem":81,"user":"526fce6fe4b03e8d9a4a7383"},{"problem":81,"code":"(fn [s1 s2] (set (remove #(nil? (s2 %)) s1)))","user":"54d03026e4b018d918be98de"},{"problem":81,"code":"(fn doset [sa sb]\n(set (filter #(sa %) sb))\n)","user":"52d84ea7e4b09f7907dd1390"},{"problem":81,"code":"(fn [set1 set2] (apply sorted-set (filter #(contains? set2 %) set1)))","user":"5461873de4b01be26fd746a3"},{"problem":81,"code":"(fn [a b] (set (filter #(contains? b %) a)) )","user":"5bbbd484e4b0a20761a23617"},{"problem":81,"code":"(fn [set-a set-b]\n  (set (remove nil? (map set-a set-b))))","user":"51ca5378e4b08b1cbd0d9480"},{"problem":81,"code":"(fn my-intersection [a b]\n  (clojure.set/difference\n   (clojure.set/union a b)\n   (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a))))","user":"60c91f48e4b0e0fa5f1b4304"},{"problem":81,"code":"(fn [x y] (reduce (fn [acc n] (if (contains? y n) (conj acc n) acc)) (sorted-set) x))","user":"5589e88ae4b0277789237610"},{"problem":81,"code":"(fn [s1 s2]\n  (set (for [x s1\n        y s2\n        :when (= x y)]\n    x)))","user":"548f37c7e4b0e286459a1234"},{"problem":81,"code":"(fn [a b] (reduce #(if (contains? b %2) (conj % %2) %) #{} a))","user":"538f4c1de4b0b51d73faae8c"},{"problem":81,"code":"(fn si [s1 s2 & more-sets]\n    (let [i (reduce (fn [acc v] (if (s1 v) (conj acc v) acc)) #{} s2)]\n      (if (seq more-sets)\n        (apply si i more-sets)\n        i)))","user":"513e8141e4b02b2a3d8235c1"},{"problem":81,"code":"(fn [a-set b-set] \n  (set (map #(first %) (filter #(> (second %) 1) \n                               (reduce #(assoc %1 %2 (inc (%1 %2 0))) {} (concat a-set b-set))))))","user":"54f6f00fe4b01ecee9d88814"},{"problem":81,"code":"(fn [a b]\n  (set (concat\n    (for [x a :when (contains? b x)] x)\n    (for [x b :when (contains? a x)] x)))\n)","user":"5aa998c6e4b0d174b936c8e5"},{"problem":81,"code":"(fn [a b]\n   (set (reduce (fn [acc item]\n             (if (get b item) (conj acc item) acc))\n           [] a)))","user":"5a64dcabe4b0512ff01cd9a9"},{"code":"#(reduce (fn [s v] (if (% v) (conj s v) s)) #{} %2)","problem":81,"user":"523b1a65e4b02f719975bdbd"},{"code":"#(set (for [x %1 :when (contains? %2 x)] x ))","problem":81,"user":"4f343e60e4b0e243712b1eb5"},{"problem":81,"code":"(fn [set1 set2]\n  (into #{} \n        (for [ele set1 \n              :when (contains? set2 ele)] \n         ele\n        )\n  )\n  )","user":"57011eb3e4b08d47c97781d1"},{"code":"#(->> (filter (fn [x] (% x)) %2) set)","problem":81,"user":"52c60945e4b0c2d177d62108"},{"code":"(fn asdf [ x y ] (if (empty? (for [x x :when (get y x)] x)) #{} (apply conj #{} (for [x x :when (get y x)] x))))","problem":81,"user":"5012036ce4b0a040369c12f4"},{"code":"(fn [s1 s2]\n  (into #{} (for [x s1 :when (contains? s2 x)] x)))","problem":81,"user":"527cd633e4b0757a1b17136f"},{"code":"#(reduce (fn [s x] (if (contains? %2 x) (conj s x) s)) #{} %)","problem":81,"user":"4eee5c7f535d93acb0a668c6"},{"problem":81,"code":"(fn [set-a set-b] (set (filter (fn [i] (contains? set-b i)) set-a)))","user":"54b6c24be4b0ed20f4ff6e7c"},{"problem":81,"code":"#(let [ u1 (clojure.set/union %1 %2)\n        nd1 (clojure.set/difference %1 %2)\n        nd2 (clojure.set/difference %2 %1)]\n    (clojure.set/difference (clojure.set/difference u1 nd1) nd2))","user":"53a26cede4b0f1fc7453882a"},{"code":"(fn [s1 s2]\n  (set (remove nil? (map s1 (vec s2)))))","problem":81,"user":"4eec82fe535d93acb0a668ae"},{"problem":81,"code":"(fn my-intersection [a b]\n\t(set (filter (fn [v] (contains? b v)) a)))","user":"57c0917be4b05aa3c4741c95"},{"problem":81,"code":"(fn [c1 c2]\n  (set (for [x c1\n        y c2\n        :when (= x y)]\n    x)))","user":"59503c5de4b066ee0a44ae8e"},{"problem":81,"code":"(fn [sa sb]\n  (set (filter sa sb))\n)","user":"59e62655e4b08badc2a0c568"},{"problem":81,"code":"(fn [coll1 coll2] (into #{} (filter #(contains? coll2 %) coll1)))","user":"546692aee4b01be26fd746e7"},{"problem":81,"code":"(fn [set1 set2]\n  (let [s (if (> (count set1) (count set2))\n            set1\n            set2)]\n    (loop [biggest-set s\n           result #{}]\n      (if (empty? biggest-set)\n          result\n        (if (contains? set1 (first biggest-set))\n            (recur (rest biggest-set) (conj result (first biggest-set)))\n            (recur (rest biggest-set) result))))))","user":"5d06499ae4b0cc9c915881ec"},{"code":"#(set (filter (fn[e] (contains? %2 e)) %1))","problem":81,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"(fn [x y] (set (filter (fn [e] (x e)) y)))","problem":81,"user":"536f2faee4b0fc7073fd6e79"},{"code":"(fn [x y]\n  (set\n   (drop-while #(nil? %)\n               (set (for [a y]\n                    (if (contains? x a)\n                      a))))))","problem":81,"user":"4e1b8106535d04ed9115e801"},{"code":"(fn [set1 set2]\n  (set (filter #(some #{%} set2) set1)))","problem":81,"user":"4e42f930535dc968683fc49f"},{"problem":81,"code":"(fn [set1 set2] (set (filter identity (map #(set2 %) set1))))","user":"58969076e4b00487982d52a2"},{"code":"(fn [a b] (set (filter a b)))","problem":81,"user":"4e7e0bdc535db169f9c796ff"},{"problem":81,"code":"(fn [s1 s2] (reduce #(if (contains? s2 %2)\n                      (conj % %2) \n                       %) \n                    #{} s1))","user":"54908cc1e4b0b312c081ff32"},{"code":"(fn [a b]\n\t(set (filter #(contains? a %) b)))","problem":81,"user":"52084f75e4b01ce6bbf31dde"},{"code":"(fn [s s2] (set (filter #(contains? s %) s2)))","problem":81,"user":"4e7e8684535db169f9c79717"},{"problem":81,"code":"(fn [set1 set2] (into #{} (filter (partial contains? set1) set2)))","user":"54a6baaee4b09f271ff37c8a"},{"code":"(fn [x y] (set (filter x y)))","problem":81,"user":"51696ee7e4b03f62cda68ce8"},{"code":"(fn [c1 c2]\n  (let [all(set (concat c1 c2))\n        r1 (set (map all c1))\n        l1 (set (map r1 c2))]\n    (set (drop-while nil? l1))))","problem":81,"user":"511b9017e4b00c2a1fa7ff6b"},{"code":"(fn [a b] (set (filter b (filter a b))))","problem":81,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":81,"code":"(fn [a b]\n  (set\n  (flatten\n  (filter #(=\n            (first %)\n            (second %))\n  (for [x a\n        y b]\n    [x y])))))","user":"59e8a952e4b0249b72820733"},{"code":"(fn [x y] (set (reduce (fn [acc e1] (if (contains? x e1) (conj acc e1) acc)) [] (seq y))))","problem":81,"user":"4e89de60535d3e98b8023285"},{"code":"(fn[a b]\n  (set \n    (filter a b)))","problem":81,"user":"4e6dc95a535d5021c1a895f1"},{"code":"(fn [f s] (into #{} (filter #(contains? f %) s)))","problem":81,"user":"51f7dd27e4b06ff1c25c52dc"},{"code":"(fn seti [setx sety]\n  (set (for [val setx\n       :when (not (nil? (sety val)))]\n       val)))","problem":81,"user":"52d6889ae4b09f7907dd1361"},{"code":"(fn [a b] (set (flatten (filter (fn [[x y]] (= x y)) (for [x a y b] [x y])))))","problem":81,"user":"4df0524e535d08e6dec9fe17"},{"problem":81,"code":"(fn [a b]\n  (reduce #(if (get a %2) (conj %1 %2) %1) #{} b))","user":"5eee7311e4b07c55ae4a0510"},{"problem":81,"code":"( fn\n  [ sa sb ]\n  ( set ( filter #(sb %) sa) ) )","user":"516d227fe4b06f078fab252d"},{"problem":81,"code":"(fn intersection1 [set1 set2]\n  (set (filter #(get set1 %) set2)))","user":"5e0d948fe4b099d064962f98"},{"code":"(fn [s1 s2]\n  (clojure.set/difference s1 (clojure.set/difference s1 s2)))","problem":81,"user":"5125745ae4b05d10e3e395f9"},{"problem":81,"code":"(fn [a-seq b-seq]\n  (into #{} (filter (complement nil?) (map #(get b-seq %) a-seq))))","user":"565487dce4b0f9d632dd8482"},{"code":"(fn [a b] \n  (set (filter #(contains? b %1) a)))","problem":81,"user":"4f038567535dcb61093f6b0c"},{"problem":81,"code":"#(set (filter (fn [in1] (contains? %2 in1)) %1))","user":"57465429e4b009280f9f2b60"},{"code":"(fn [set1 set2] (loop [smaller (if (>= (count set1) (count set2))\n                                 (seq set2)\n                                 (seq set1))\n                       other (if (>= (count set1) (count set2))\n                               set1\n                               set2)\n                       final []]\n                  (cond\n                   (empty? smaller) (set final)\n                   (contains? other (first smaller)) (recur (next smaller) other (conj final (first smaller)))\n                   true (recur (next smaller) other final))))","problem":81,"user":"507a33dee4b08327cd804a68"},{"problem":81,"code":"(fn [a b] (let [super-set (set (concat (vec a) (vec b)))]\n   (set (filter #(and (contains? a %) (contains? b %)) super-set))))","user":"51d26b0ae4b0d13b04db0d97"},{"code":"(fn [a b]\n  (set (for [x a y b :when (= x y)] x))\n)","problem":81,"user":"4f8b56dae4b02e764a0a517e"},{"code":"(fn inter\n  [s1 s2]\n  (let [freq (seq (frequencies (concat s1 s2)))]\n    (into #{} (map first (filter #(> (second %) 1) \n                          freq)))))","problem":81,"user":"50fc48dde4b0d10d794c19f6"},{"problem":81,"code":"(fn [set1 set2]\n  (set\n    (for [x set1\n          y set2\n          :when (= x y)] x)))","user":"5f081f6de4b0cf489e8d7f5a"},{"problem":81,"code":"(fn [searchS refereceS] (reduce (fn [newset x] (if (refereceS x) (conj newset x) newset)) #{} searchS))","user":"58e6a2c5e4b056aecfd47cba"},{"code":"(fn [s1 s2] (reduce (fn [a s] (if (s2 s) (conj a s) a)) #{} s1))","problem":81,"user":"52c25645e4b07a9af579237d"},{"problem":81,"code":"#(->> %1 (filter %2) (into #{}))","user":"5f0c3da4e4b0f30dddfb5d49"},{"problem":81,"code":"(fn [A B] (into #{} (filter A B)))","user":"59da6480e4b0ef0a1e9b5c68"},{"code":"(fn [a b] \n  (let [x (into #{} (concat a b))] \n    (into #{} (filter #(and (contains? a %1) (contains? b %1)) x))))","problem":81,"user":"5142e808e4b0c172af7558c9"},{"problem":81,"code":"(fn [s1 s2]\n  (let [d1 (clojure.set/difference s1 s2)\n        d2 (clojure.set/difference s2 s1)\n        symdiff (clojure.set/union d1 d2)\n        u (clojure.set/union s1 s2)]\n    (clojure.set/difference u symdiff)))","user":"58d48df8e4b03c36ff7e5941"},{"problem":81,"code":"(fn [a b] \n   (set (reduce #(  \n                   \n                   if (and (contains? a %2) (contains? b %2))(conj %1 %2) %1)\n                   \n                   \n                     \n        #{} \n        (into a b))))","user":"57487084e4b009280f9f2b8c"},{"code":"(fn [a b] (into #{} (filter (partial contains? a) b)))","problem":81,"user":"4edb314d535d10e5ff6f5317"},{"problem":81,"code":"#(set (reduce (fn [res x] (if (contains? %2 x) (conj res x) res)) [] %1))","user":"5e85d0bde4b09a7a73c8bbd6"},{"code":"(fn [number1 number2] (set (filter #(contains? number2 %) number1)))","problem":81,"user":"50ee145de4b06330c1f87c53"},{"problem":81,"code":"(fn [& coll] (reduce #(conj %1 (first %2)) #{} (filter #(= (last %1) (count coll)) (frequencies (apply concat coll)))))","user":"553bda0de4b09218d5f4500b"},{"problem":81,"code":"(fn [s1 s2]\n   (set (filter #(s1 %) s2)))","user":"5799b260e4b05b1deef9adc8"},{"code":"(fn intr\n  ([s1 s2] (intr s1 s2 #{}))\n  ([s1 s2 si]\n   (if (empty? s1) si\n     (let [f (first s1)\n           s1p (disj s1 f)\n           s2p (disj s2 f)]\n       (if (contains? s2 f)\n         (intr s1p s2p (conj si f))\n         (intr s1p s2p si))))))","problem":81,"user":"51d96ad0e4b02ceefd94774f"},{"problem":81,"code":"(fn[x y](set(filter #(x %) y)))","user":"6001460ce4b074f607df6611"},{"code":"(fn [set-one set-two] (set (filter set-one set-two)))","problem":81,"user":"4e3f480c535dc968683fc497"},{"problem":81,"code":"(fn [a b]\n  (set \n    (filter #(b %) a)))","user":"540c54a7e4b0addc1aec6700"},{"code":"(fn inter [c1 c2]\n  (loop [things c1 result #{}]\n    (let [r (rest things) t (first things)]\n    (if (empty? things) result\n     (if (contains? c2 t)\n      (recur r (conj result t))\n      (recur r result))))))","problem":81,"user":"4f98b69ae4b0dcca54ed6cf4"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [acc '() s s1]\n    (if (empty? s) (set acc)\n        (let [f (first s)]\n          (if (contains? s2 f)\n            (recur (cons f acc) (rest s))\n            (recur acc (rest s)))))))","user":"5d9d10d5e4b0eb781811cdb4"},{"problem":81,"code":"#(loop [set-1 (seq %1)\n        set-2 %2\n        set-r #{}]\n   (if (empty? set-1)\n     set-r\n     (recur (rest set-1)\n            set-2\n            (if (contains? set-2 (first set-1))\n              (conj set-r (first set-1))\n              set-r))))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":81,"code":"(fn [s1 s2]\n    (set (filter (fn [el] (contains? s2 el)) s1))\n    )","user":"569637d8e4b0dcc4269f4130"},{"problem":81,"code":";#(let [coll1 (if (> (count %1) (count %2)) %1 %2)\n;       coll2 (if (> (count %1) (count %2)) %2 %1)]\n;   (into #{} (remove nil? (for [i coll1]\n;     (if (contains? coll2 i)\n;       i\n;       nil)))))\n\n#(set (filter %1 %2))","user":"58d2af83e4b03c36ff7e5907"},{"code":"(fn [a b]\n  (let [u (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))]\n    (clojure.set/difference a u)))","problem":81,"user":"51d08d67e4b067c365486351"},{"problem":81,"code":"(fn [s1 s2]\n    (set\n     (filter #(and (contains? s1 %) (contains? s2 %))\n             (concat s1 s2))))","user":"4f57c913e4b0a7574ea7183f"},{"problem":81,"code":"(fn [seq1 seq2] (apply sorted-set (filter #(contains? seq2 %) seq1)))","user":"59fa107ce4b0ca45a743a353"},{"code":"(fn [s1 s2] (set (remove nil? (for [x s1] (s2 x)))))","problem":81,"user":"52153bdde4b0961f15ac4daa"},{"problem":81,"code":"(fn [A B] (set (filter A B)))","user":"57c796b4e4b05aa3c4741d08"},{"code":"(fn [r s] (reduce #(if (contains? s %2) (conj %1 %2) %1) #{} r))","problem":81,"user":"50705072e4b07bd6ad9b9f27"},{"code":"(fn [s0 s1]\n   (set\n   (filter\n     (fn [n]\n       (contains? s1 n))\n     s0)))","problem":81,"user":"50f1dedbe4b0897c4366dcd8"},{"code":"(fn [set1 set2]\n  (let [set-union (clojure.set/union set1 set2)\n        first-difference (clojure.set/difference set1 set2)\n        second-difference (clojure.set/difference set2 set1)\n        result (clojure.set/difference set-union first-difference second-difference)]\n    result))","problem":81,"user":"50621cbde4b0341461c88951"},{"problem":81,"code":"(fn [v1 v2]\n    (into #{} (keep #(if (contains? v2 %1) %1) v1))\n\n   )","user":"54ef4a1ee4b024c67c0cf883"},{"problem":81,"code":"(fn [s1 s2]\n  (set(filter s1 s2)))","user":"53c1ce3ee4b00fb29b221268"},{"problem":81,"code":"#(set (filter (fn [v] (contains? %2 v)) %))","user":"5499e23de4b03163384f4706"},{"code":"(fn intr [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    #{}\n    (let [f1 (first s1) r1 (rest s1)]\n      (if (contains? s2 f1)\n        (conj (intr r1 s2) f1)\n        (intr r1 s2)))))","problem":81,"user":"503e6047e4b06c4e0e1fa266"},{"code":"(fn [lasice hranostaj]\n  (set (filter #(lasice %) hranostaj)))","problem":81,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"#(set (remove (clojure.set/difference %1 %2) %1))","problem":81,"user":"5046b003e4b011c5dfee7727"},{"problem":81,"code":"#(into #{} (remove nil?(map %1 %2)))","user":"54eca495e4b024c67c0cf855"},{"problem":81,"code":"(fn [a b]\n  (set (map key (filter (comp (partial < 1) val) (frequencies (concat a b))))))","user":"50310713e4b05b7df5a0b84c"},{"code":"(fn [x y]\n  (set (filter #(not (nil? (get x %))) y)))","problem":81,"user":"53468f6ce4b084c2834f4a3f"},{"problem":81,"code":"#(reduce (fn [accum x] (if (contains? %2 x) (conj accum x) accum)) #{} %1)","user":"5764cc01e4b0994c1922fc05"},{"code":"(fn [coll1, coll2]\n  (loop [c1 coll1, c2 coll2, acc #{}]\n    (if (empty? c1)\n      acc\n      (let [h (first c1), t (rest c1)]\n        (if (contains? c2 h)\n          (recur t c2 (conj acc h))\n          (recur t c2 acc))))))","problem":81,"user":"50a83794e4b054305ba5a831"},{"code":"(fn [A B]\n  (reduce #(if (contains? B %2) (conj %1 %2) %1) #{} A))","problem":81,"user":"5063b9a0e4b075d771da6f9d"},{"problem":81,"code":"(fn its [x y]\n    (reduce\n       #(if (y %2)\n            (conj %1 %2)\n            %1)\n       #{}\n       x))","user":"55c49394e4b0e31453f6499e"},{"code":"(fn [a b] (into #{} (filter b a)))","problem":81,"user":"4feada56e4b0140c20fb9c11"},{"problem":81,"code":"(fn setIntersec [x y]\n  (set\n    (reverse\n         (filter\n           #(contains? y %)x))))","user":"59e12c94e4b08badc2a0c509"},{"code":"(fn [set1 set2] (set (filter #(contains? set2 %) set1)))","problem":81,"user":"4dbdc898535d020aff1edf4a"},{"problem":81,"code":"(fn custom-intersection\n  [set1 set2]\n  (let [map1 (group-by identity set1)\n        map2 (group-by identity set2)\n        map3 (merge-with concat map1 map2)\n        result (set (map first (vals (filter (fn [[k v]] (second v)) map3))))]\n    result))","user":"4fc524aae4b081705acca37e"},{"code":"; works for an arbitrary number of sets\n(fn _intersection [& colls]\n  (let [inall? (fn [x] (every? #(contains? % x) colls))]\n\t(->> (apply clojure.set/union colls)\n         (filter inall?)\n         (set))))\n\n; works for just two sets\n;#(set (filter %1 %2))","problem":81,"user":"53834ed3e4b06839e8705edb"},{"code":"(fn [a b]\n  (set (filter #(and (a %) (b %)) (concat a b))))","problem":81,"user":"4dd9d299535d2dad7130b5dd"},{"problem":81,"code":"(fn [x y](set(filter #(contains? x %) y)))","user":"566a3a26e4b0a866af689699"},{"problem":81,"code":"(fn  [x y]\n  (set (filter #(and (contains? x %) (contains? y %)) x)))","user":"5b2689e3e4b063e2438bcc33"},{"problem":81,"code":"(fn [x y] (loop [x x out #{}] (if (empty? x) out (recur (rest x) (if (contains? y (first x)) (conj out (first x)) out)))))","user":"5d7158f3e4b04d129b00f2e1"},{"code":"(fn [set1 set2]\n  (reduce\n    (fn [output item]\n      (if (contains? set2 item)\n        (conj output item)\n        output))\n    #{}\n    set1))","problem":81,"user":"4ec2fe3f535dcc7ae8597d4f"},{"code":"(fn [set1 set2]\n  (into #{} (filter (partial contains? set1) set2)))","problem":81,"user":"5164867fe4b003cf19fdde3e"},{"code":"(fn my-intersect [xs1 xs2]\r\n  (set (filter (fn [n] (not (nil? (some #(= % n) xs1)))) xs2)))","problem":81,"user":"4dd023dd535d5973398f92ad"},{"code":"(fn inter [s1 s2]\n  (loop [se1 s1 acc #{}]\n    (if (empty? se1)\n      acc\n      (if (contains? s2 (first se1))\n        (recur (rest se1) (conj acc (first se1)))\n        (recur (rest se1) acc)))))","problem":81,"user":"4f418eaee4b0d7d3c9f3fce9"},{"problem":81,"code":"(fn fun [inp1 inp2]\n  (->> (for [i inp1\n                j inp2]\n            (when (= i j)\n              i))\n       (filter #(not (nil? %1)))\n       (into #{})))","user":"575fbe58e4b08062f99a4e87"},{"code":"(fn set-intersection [s1 s2]\n  (set (reduce \n        (fn [a x] (if (contains? s2 x) (cons x a) a))\n        '()\n        s1)))","problem":81,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":81,"code":"(fn [set1 set2]\n  (set (filter #(get set2 %) set1)))","user":"54c8d4a8e4b045293a27f654"},{"code":"#(set (filter (partial contains? %2) %))","problem":81,"user":"4eaa96e1535d7eef3080730d"},{"problem":81,"code":"(fn sol [a b] (reduce disj a (reduce disj a b)))","user":"578b140be4b0ebec4cfb7545"},{"problem":81,"code":"(fn \n  [s1 s2]\n  (let [m (set (concat s1 s2))\n        r (reduce \n            (fn \n              [r x]\n              (if (and (s1 x) (s2 x))\n                (conj r x)\n                r)) \n            #{} m)] \n      r))","user":"5843b231e4b089d5ab817e3d"},{"problem":81,"code":"(fn [f f1]\n  \n  (set(filter f f1))\n  \n  )","user":"5f727be9e4b02876ed9fd08d"},{"code":"(fn [s1 s2]\r\n  (loop [set1 s1 set2 s2 out #{}]\r\n    (cond\r\n      (or (empty? set1) (empty? set2))\r\n        out\r\n      (contains? set2 (first set1))\r\n        (recur (rest set1) set2 (set (cons (first set1) out)))\r\n      :else (recur (rest set1) set2 out))))","problem":81,"user":"4e570b60535d8a8b8723a286"},{"code":"(fn [s1 s2]\n  ((fn [s res]\n     (if (empty? s) res\n       (if (contains? s2 (first s))\n         (recur (rest s) (conj res (first s)))\n         (recur (rest s) res))))\n   s1 #{}))","problem":81,"user":"51da631be4b02ceefd947766"},{"code":"(fn [a b]\n  (if (< (count a) (count b))\n    (recur b a)\n    (reduce (fn [res item]\n      (if (contains? b item)\n        res\n        (disj res item)))\n    a a)))","problem":81,"user":"50e19748e4b0ec0e353386e5"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter #(get s1 % false) s2)))","user":"551ee974e4b08d5046aa8a50"},{"problem":81,"code":"(fn set-inter [a b]\n  (set (remove nil? (for [x a\n                    y b]\n                (when (= x y) x)))))","user":"5cfabf53e4b0cc9c91588148"},{"code":"(fn [a b] (into #{} (keep #(if(contains? b %) %) a)))","problem":81,"user":"5034b623e4b062bc5d7ae168"},{"problem":81,"code":"(fn intrsct [& sets]\n  (let [[f & r] sets]\n    (set (filter (fn [v] (every? #(contains? % v) r)) f))))","user":"53b39d82e4b047364c0444a6"},{"problem":81,"code":"(fn f [s1 s2]\n(set (map first \n(filter (fn f [[k v]] (> v 1))\n  (frequencies (flatten (conj (into [] s1) (into [] s2))))\n))))","user":"53d64811e4b0e771c3025456"},{"code":"(fn [x y]\r\n  (reduce\r\n    (fn [col val]\r\n      (if (or (nil? (get x val)) (nil? (get y val)))\r\n        col\r\n        (conj col val)))\r\n    #{}\r\n    (concat x y)))","problem":81,"user":"4ddee37c535d08e6dec9fddc"},{"problem":81,"code":"(fn[x y] (set (reduce (fn[a b] (if (contains? y b) (conj a b) a)) [] x)))","user":"571172ece4b09c608db70446"},{"problem":81,"code":"(fn [x y] (->>(filter #(> (count %) 1) (partition-by identity (sort (flatten (map list (vec x)(vec y))))))(flatten)(set)))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":81,"code":"(fn [s1 s2] (into #{} (filter #(contains? s1 %) (seq s2))))","user":"5566d812e4b0c656e3ff1837"},{"problem":81,"code":"(fn [x y] (apply hash-set (for [i (seq x) :when (contains? y i)] i)))","user":"564d02cde4b0284900eef679"},{"problem":81,"code":"#(set (filter (fn [ele1]\n                (some (fn [ele2] (= ele1 ele2)) %2))\n              %1))","user":"60096aabe4b074f607df667f"},{"code":"(fn [xs vs] (set (filter #(contains? xs %) vs)))","problem":81,"user":"5114ab7be4b0ce5098ee73b5"},{"code":"(fn isec [a b]\n  (cond (empty? b) #{}\n        (contains? a (first b)) (conj (isec a (rest b)) (first b))\n        :else (isec a (rest b))))","problem":81,"user":"4facd2fae4b081705acca22f"},{"problem":81,"code":"(fn [set1 set2]\n  (reduce into #{} (map #(if ((partial contains? set1) %) #{%}) set2)))","user":"58217fbde4b04b46fc4b0f78"},{"code":"(fn [a b] (clojure.set/difference a (clojure.set/difference a b)))","problem":81,"user":"4ff6aea8e4b0678c553fc381"},{"code":"(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n  (clojure.set/union(clojure.set/difference s1 s2)\n  (clojure.set/union(clojure.set/difference s2 s1)))))","problem":81,"user":"4f8bf8eae4b02e764a0a5187"},{"problem":81,"code":"#(set (filter (fn [item] (contains? %1 item)) %2))","user":"5282f54be4b0239c8a67ada0"},{"problem":81,"code":"(fn [a b]\n   (->> b\n        (filter #(contains? a %))\n        set))","user":"559067ace4b0277789237670"},{"code":"(fn [s1 s2]\n  (set (for [v s1 :when (s2 v)] v)))","problem":81,"user":"4e47f4f3535dc968683fc4bb"},{"code":"#(set (filter (fn [item] (contains? % item)) %2))","problem":81,"user":"510ee996e4b07438aa321462"},{"problem":81,"code":"#(reduce (fn [acc elem]\n           (if (contains? %2 elem)\n             (into acc [elem])\n             acc))\n         #{}\n         %1)","user":"55a5c3bee4b0acc240e3154e"},{"problem":81,"code":"(fn [s1 s2]\n  (let [\n        diff (fn [ss1 ss2] (reduce (fn [a b] (if (contains? ss2 b) (conj a b) a)) #{} ss1))\n        ]\n    (diff s1 s2)\n  )\n)","user":"5a9e3698e4b0d174b936c7fc"},{"code":"(fn [s1 s2]\n  (set (filter #(contains? s1 %) s2)))","problem":81,"user":"4e2f9e71535deb9a81d77f11"},{"problem":81,"code":"#(clojure.set/difference %1 (clojure.set/union (clojure.set/difference %2 %1) (clojure.set/difference %1 %2)))","user":"59bac5c9e4b0a024fb6ae3ed"},{"problem":81,"code":"(fn \n  [col1 col2]\n  (-> (filter (fn [[a b]] (= a b))\n          (for [x1 col1 x2 col2] (vector x1 x2))) flatten set))","user":"544cf5d7e4b0e39780006977"},{"problem":81,"code":"(fn [x y]\n   (apply sorted-set (map first (filter #(< 1 (last %)) (frequencies ( flatten (map list x y)))))))","user":"5a6afb1de4b0512ff01cda2f"},{"code":"(fn [& sets] (set (keys (filter #(> (count (val %)) 1) (group-by identity (apply concat sets))))))","problem":81,"user":"4faa5735e4b081705acca1ee"},{"problem":81,"code":"(fn set_inter\n  [a b]\n  \n  (set (filter a b)))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":81,"code":"#(set (for [a %1 :when (contains? %2 a)] a))","user":"586615e6e4b0f14aab7c8858"},{"problem":81,"code":"(fn [a b]\n  (let [a+b (clojure.set/union a b)\n        a-b (clojure.set/difference a b)\n        b-a (clojure.set/difference b a)]\n    (clojure.set/difference a+b a-b b-a)))","user":"594fdfdce4b066ee0a44ae85"},{"problem":81,"code":"(fn inter [a b]\n   (->> a\n        (filter #(b %))\n        (set)))","user":"53ed6976e4b0d648e757f4c4"},{"code":"(fn f [a b]\n  (into #{} (filter #(contains? b %) a))\n)","problem":81,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":81,"code":"(fn inter [s1 s2]\n  (reduce #(if (contains? s1 %2) (conj %1 %2) %1) #{} s2))","user":"4daeff24edd6309eace4d16e"},{"problem":81,"code":"(fn [s1 s2]\n         (set (filter #(s2 %) s1)))","user":"5da71eaee4b000c986472c15"},{"code":"(fn [A B]\n  (loop [res #{}\n         elts A\n         tmp (first A)]\n    (cond (= elts #{}) res\n          (contains? B tmp) (recur (conj res tmp)\n                                   (set (rest elts))\n                                   (first (rest elts)))\n          :default (recur res\n                          (set (rest elts))\n                                   (first (rest elts))))))","problem":81,"user":"4e49a7bb535dc968683fc4c6"},{"code":"#(reduce\n  (fn [r e] (if (contains? %1 e) (conj r e) r))\n  #{}\n  %2\n)","problem":81,"user":"51473a70e4b0d520409ed394"},{"code":"#(set(filter (complement nil?) (map %1 %2)))","problem":81,"user":"50e82c31e4b0ebbe794eb7da"},{"code":"(fn intersect\n  [xs ys]\n  (reduce (fn [acc x]\n            (if (ys x)\n              (conj acc x)\n              acc))\n          #{}\n          xs))","problem":81,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":81,"code":"#(let [d clojure.set/difference u (clojure.set/union % %2)] (d u (d u %) (d u %2)))","user":"56824e1be4b0945ebc182a91"},{"code":"(fn [x y] (set (filter #(some #{%} y) x)))","problem":81,"user":"4f2c593ee4b0d6649770a053"},{"code":"(fn my-intersection [s1 s2]\n  (cond (empty? s1) #{}\n        (empty? s2) #{}\n        (some #(= % (first s1)) s2) (set (cons (first s1) (my-intersection (rest s1) s2)))\n        true (set (my-intersection (rest s1) s2))))","problem":81,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn [a b]\r\n  (apply hash-set (filter #(contains? a %) b)))","problem":81,"user":"4f0f01c0535d0136e6c22329"},{"problem":81,"code":"#(into #{} (filter (fn [b] (when-not (nil? (get %1 b)) b)) %2))","user":"5aa1e0f1e4b0d174b936c84e"},{"code":"(fn [a b](reduce #(if(contains? a %2)(conj %1 %2) %1 ) #{} b))","problem":81,"user":"52bbd09ee4b07a9af57922ee"},{"problem":81,"code":"(fn [s1 s2]\n          (into (into #{} (filter #(contains? s2 %) s1))\n                (filter #(contains? s1 %) s2)))","user":"531c6e72e4b08068f379eda0"},{"code":"(fn [s1 s2] (reduce #(if (s2 %2) (conj % %2) %) #{} s1))","problem":81,"user":"53403110e4b085b17e897da6"},{"code":"(fn [set1 set2] (set (filter (fn [x] (contains? set2 x)) set1)))","problem":81,"user":"52a5d1f3e4b0c58976d9abf1"},{"problem":81,"code":"(fn [s1 s2]\n\t(reduce #(if (s1 %2) (conj %1 %2) %1) #{} s2))","user":"5b4ff637e4b02d533a91bce0"},{"code":"(fn my-intersection [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2)\n                          (clojure.set/union (clojure.set/difference set1 set2)\n                                             (clojure.set/difference set2 set1))))","problem":81,"user":"5273562ae4b03e8d9a4a7479"},{"problem":81,"code":"(fn [x y] (let [combined (apply conj x y)]\n            (set (filter #(and (x %) (y %)) combined))))","user":"564127a9e4b08d4f616f5ef3"},{"problem":81,"code":"(fn [a b]\n    (reduce (fn [r v]\n      (if (contains? b v)\n        (conj r v)\n        r\n      )) #{} a)\n  )","user":"5e2586afe4b05b4b01516167"},{"problem":81,"code":"#(apply merge #{} (for [a %1 :let [n %2] :when (some #{a} n)] a))","user":"59ddae03e4b01968742fed65"},{"problem":81,"code":"(fn -intersect \n  [seq1 seq2]\n  (reduce (fn\n        [acc item]\n        (if (contains? seq1 item)\n        (conj acc item)\n        acc)) \n        #{}\n         seq2))","user":"5e16006be4b0a047bd49f711"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter #(not (nil? (s1 %))) s2)))","user":"58f3c18ee4b0438e51c2cead"},{"problem":81,"code":"(fn [a b]\n  (let* [all-items (clojure.set/union a b)\n         only-in-a (clojure.set/difference all-items b)\n         only-in-b (clojure.set/difference all-items a)]\n    (clojure.set/difference all-items only-in-a only-in-b)))","user":"593870e6e4b02506e01a29d6"},{"problem":81,"code":"(fn [a b]\n  (let [a-b (clojure.set/difference a b)]\n    (clojure.set/difference a a-b)\n))","user":"5957cc41e4b066ee0a44af76"},{"problem":81,"code":"(fn\n  [s1 s2]\n  (set (for [i s1 j s2 :when (= i j)] i)))","user":"56df6846e4b0ca2494a095fa"},{"problem":81,"code":"(fn [s1 s2] (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))","user":"57a6552ce4b0a96607956208"},{"problem":81,"code":"(fn interSet\n  [s1 s2]\n  (set (filter #(contains? s2 %) s1)))","user":"57f81534e4b0d3187e900915"},{"problem":81,"code":"#(into #{} (filter (fn [n] (contains? %2 n)) %))","user":"55cc56bee4b0e31453f64a0f"},{"problem":81,"code":"(fn [A B] (set (reduce #(if (get B %2) (conj %1 %2) %1) '() A)))","user":"570ab24fe4b0b0fb43fd06b7"},{"code":"(fn [a b]\n  (set (keep a b))\n)","problem":81,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"(fn [s1 s2](set (keep s1 s2)))","problem":81,"user":"50a4cbbee4b0344e360f3bc2"},{"problem":81,"code":"(fn f [xs ys]\n  (if (seq xs)\n    (let [x (first xs)]\n      (if (ys x)\n        (conj (f (rest xs) ys) x)\n        (f (rest xs) ys)))\n    #{}))","user":"5791d259e4b0ebec4cfb75c0"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter identity (for [e s1] (if (some #{e} s2) e)))))","user":"5492164ee4b0b312c081ff3e"},{"problem":81,"code":"( fn[ a b] (set ( filter #(contains? b %1) a)))","user":"53d63e6ce4b0e771c3025454"},{"code":"(fn [coll1 coll2]\n  (set (for [i coll1 :when (contains? coll2 i)] i)))","problem":81,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":81,"code":"#(let [rm (fn [c1 c2]\n            (if (empty? c2)\n              (set c1)\n              (recur (disj c1 (first c2)) (rest c2))))]\n   (rm %1 (rm %1 %2)))","user":"57c94c6ee4b05aa3c4741d2d"},{"code":"(fn [a b] (loop [f a s #{}] (if (empty? f) s (recur (rest f) (if (contains? b (first f)) (conj s (first f)) s) ))))","problem":81,"user":"50ef3e5de4b0a78662fa2652"},{"problem":81,"code":"#(set (filter %1 %2))\n\n;(fn [a b]\n;  (set\n;    (filter\n;      #(and (a %) (b %))\n;      (concat a b))))","user":"53a074a4e4b0ca733b9744af"},{"problem":81,"code":"(fn inter[s1, s2] (set (filter #(contains? s2 %) s1)))","user":"4f577f25e4b0a7574ea71839"},{"code":"(fn [s1 s2]\r\n          (clojure.set/difference\r\n            (clojure.set/union s1 s2)\r\n            (clojure.set/difference s1 s2)\r\n            (clojure.set/difference s2 s1)))","problem":81,"user":"503b6995e4b07a1917cc34dd"},{"problem":81,"code":"(fn [a b] (set (filter #(some (set (list %)) b) (vec a))))","user":"4e526cc4535d302ef430da74"},{"code":"#(set (remove nil? (map (fn [a] (if (contains? %1 a) a)) %2)))","problem":81,"user":"52baefbae4b07a9af57922da"},{"problem":81,"code":"(fn [f l] (set (keep #(f %) l)))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"code":"#(clojure.set/difference % (clojure.set/difference % %2))","problem":81,"user":"4ef4e5fa535dced4c769f242"},{"code":"(fn [a b]\n  (set\n    (filter (partial contains? b) a)))","problem":81,"user":"4ee2da14535d10e5ff6f536c"},{"problem":81,"code":"#(-> (partial contains? %2)\n     (filter %1)\n     (set))","user":"5156e767e4b04360f2428e6b"},{"problem":81,"code":"(fn [x y]\n  (set (filter #(contains? y %1) x))\n  )","user":"5372c830e4b06d7f452d9dff"},{"code":"#(clojure.set/difference %2 (clojure.set/difference (clojure.set/union %1 %2) %1))","problem":81,"user":"4f8b20fce4b02e764a0a5178"},{"problem":81,"code":"(fn [a b]\n  (loop [a a i #{}]\n    (if (empty? a)\n      i\n      (recur \n        (rest a)\n        (if (contains? b (first a))\n          (conj i (first a))\n          i)))))","user":"55929e89e4b0604b3f94d58e"},{"code":"(fn [a b]\r\n  (reduce\r\n    #(if (contains? b %2) (conj % %2) %)\r\n    #{}\r\n    a))","problem":81,"user":"4fb54e50e4b081705acca2bb"},{"code":"(fn [s t]\n  (reduce #(if (contains? t %2) (conj %1 %2) %1)\n          #{}\n          s))","problem":81,"user":"519db0ede4b037b32803f9b9"},{"problem":81,"code":"(fn intersections [x y]\n  (loop [items x\n         acc #{}]\n    (if (empty? items)\n      acc\n      (let [item (first items)]\n        (if (contains? y item)\n          (recur (rest items) (conj acc item))\n          (recur (rest items) acc))))))","user":"556a6137e4b09a3098a524e0"},{"problem":81,"code":"(fn my-intersection [a b]\n  (set (filter #(some #{%} a) b)))","user":"569f99cce4b0542e1f8d1497"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [[next-value & remainder :as to-process] (seq set1)\n         results #{}]\n    (if (empty? to-process)\n      results\n      (recur \n       remainder\n\t   (if (contains? set2 next-value)\n         (conj results next-value)\n         results)))))","user":"55d06bcbe4b0e31453f64a3a"},{"code":"(comp set filter)\n;(fn [set1 set2] (set (remove nil? (map (fn [[a b]] (if (> b 1) a)) (frequencies (concat set1 set2))))))","problem":81,"user":"4ff01fa9e4b0678c553fc321"},{"code":"(fn [a b] (reduce (fn [acc i] (if (contains? a i) (conj acc i) acc)) #{} b))","problem":81,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":81,"code":"#(apply disj % (clojure.set/difference % %2))","user":"546e1142e4b00cfc9eacc199"},{"problem":81,"code":"(fn [s1 s2]\n  (let [c1 (count s1)\n        c2 (count s2)\n        x1 (if (> c1 c2) s1 s2)\n        y1 (if (> c1 c2) s2 s1)]\n    (into #{} (filter (partial contains? x1) y1))))","user":"525b4e8de4b0cb4875a45d0f"},{"code":"#(loop [x %1 y %2 result #{}]\n     (if (nil? (first x))\n\t       result\n\t       (if (contains? y (first x))\n\t\t  (recur (rest x) y (conj result (first x)))\n\t\t   (recur (rest x) y result))))","problem":81,"user":"4f066916535dcb61093f6c10"},{"code":"(fn inter [one two]\r\n     (let [diff-left (clojure.set/difference one two)\r\n           diff-right (clojure.set/difference two one)\r\n           total-diff (clojure.set/union diff-left diff-right)]\r\n       (clojure.set/difference \r\n         (clojure.set/union one two) total-diff)))","problem":81,"user":"4f82e14be4b033992c121c0c"},{"code":"#(set (for [x (seq %1)\n       :when (some #{x} (seq %2))]\n        x))","problem":81,"user":"51b24defe4b02f8f128bb963"},{"problem":81,"code":"(fn subset [s1 s2]\n  (into #{} (filter #(contains? s2 %) s1))\n)","user":"56195e57e4b053970a773af6"},{"problem":81,"code":"(fn [s1 s2] \n  (reduce\n    (fn [acc v] (if (contains? s2 v) (conj acc v) acc)) #{} s1))","user":"57d9bca1e4b0bd073c202405"},{"code":"(fn mintersect\n  [s1 s2]\n  (clojure.set/select #(contains? s2 %)  s1))","problem":81,"user":"51852961e4b0da5a5be3babb"},{"code":"(fn [one two]\n  (set (filter #(two %1) one)))","problem":81,"user":"50d882d4e4b01f0871336e69"},{"problem":81,"code":"#(reduce (fn [acc i]\n          (cond\n            (%2 i) (conj acc i)\n            :else acc))\n        #{} %1)","user":"5657fed1e4b0f9d632dd84ae"},{"problem":81,"code":"#(set (for [s %1\n        :when (%2 s)]\n    s))","user":"5a67cedbe4b0512ff01cd9ee"},{"problem":81,"code":"(fn [s s2]\n   (set (filter (complement nil?)\n            (map #(if (contains? s2 %) %) s))))","user":"53c06438e4b0c98a41f5ccb0"},{"problem":81,"code":"(fn [x y]\n  (reduce #(if (contains? x %2) (conj %1 %2) %1) #{} y))","user":"5478e57de4b0c51c1f4d72c1"},{"problem":81,"code":"(fn set-inter\n  [m1 m2]\n  (into #{} (reduce (fn [a b]\n                      #_(println a b)\n                      (if (contains? m2 b)\n                        (conj a b)\n                        a))\n                    []\n                    m1)))","user":"59636cc2e4b066ee0a44b0c7"},{"problem":81,"code":"(fn [A B] (set (filter #(contains? A %) B)))","user":"51b91b08e4b0e871ca4958f8"},{"code":"(fn [c1 c2]\n  (set (keep c1 c2)))","problem":81,"user":"532c9dc9e4b019098a6f8b30"},{"code":"(fn [s1 s2]\n   (reduce\n     (fn [a e] (if (s2 e) (conj a e) a))\n     #{} s1))","problem":81,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":81,"code":"(fn inter [a b]\n  (->> (frequencies (concat a b))\n      (filterv #(= 2 (second %)))\n      (map first)\n      (into #{})\n      ))","user":"4f6ba7bce4b07046d9f4efb0"},{"problem":81,"code":"#(reduce (fn [i e] (if (get %1 e) (conj i e) i)) #{} %2)","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [s1 (seq s1) r #{}]\n    (if (empty? s1)\n      r\n      (if (contains? s2 (first s1))\n        (recur (rest s1) (conj r (first s1)))\n        (recur (rest s1) r)))))\n\n;; best\n;; #(set (for [x %1 :when (%2 x)] x))","user":"557c6ca6e4b05c286339e0c4"},{"problem":81,"code":"(fn [m n](let [s (seq m)\n      t (filter #(contains? n %) s)]\n  (set t)))","user":"4f037faf535dcb61093f6af8"},{"problem":81,"code":"(fn [c1 c2] (reduce (fn [reduct x] (if (c1 x) (conj reduct x) reduct)) #{} c2))","user":"5880d686e4b0f1effa3b7623"},{"problem":81,"code":"#(->> %& (apply filter) (set))","user":"601004d6e4b074f607df66b2"},{"problem":81,"code":"(fn [setA setB]\n   (let [[bSet sSet] (if (> (count setA) (count setB)) [setA setB] [setB setA])]\n     (apply hash-set (filter #(bSet %1) sSet))))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn [x y]\n   (set (filter #(y %) x))\n   )","problem":81,"user":"52e0e646e4b09f7907dd1416"},{"problem":81,"code":"(fn  [x y]\n  (clojure.set/difference   (clojure.set/union x y)\n         (clojure.set/union \n                (clojure.set/difference x y) (clojure.set/difference y x)\n          )\n   )\n )","user":"55c77070e4b0e31453f649d0"},{"problem":81,"code":"(fn [s & ss]\n   (set (filter (fn [a-key]\n              (every? (fn [a-set] (a-set a-key)) ss))\n            s)))","user":"5515b138e4b055c2f668d4ed"},{"problem":81,"code":"(fn [s1 s2]\n (set \n  (for [x s1 y s2 :when (= x y)]\n   x)))","user":"56f51879e4b046a417f92069"},{"code":"(fn [a b]\n    (clojure.set/difference (clojure.set/union a b)\n                            (clojure.set/union (clojure.set/difference a b)\n                                               (clojure.set/difference b a))))","problem":81,"user":"526f9715e4b03e8d9a4a7372"},{"problem":81,"code":"(fn [a b]\n  (set (mapcat\n        \t#(if (and (a %) (b %))\n               \t(list %)\n                ())\n            (clojure.set/union a b))))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn [a b] (reduce #(if (contains? b %2) (conj %1 %2) %1) #{} a))","problem":81,"user":"4db5082e535d87e67b28fe03"},{"problem":81,"code":"(fn q81 [setA setB]\n  (->> (into [] setA)\n       (reduce (fn [result key] (if (nil? (setB key)) result (conj result key))) #{})))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":81,"code":"(fn [set1 set2]\n   (loop [s1 set1 res ()]\n      (if (empty? s1)\n         (set res)\n         (recur (rest s1) (if (contains? set2 (first s1))\n                           (cons (first s1) res)\n                           res)))))","user":"5a653f80e4b0512ff01cd9b2"},{"problem":81,"code":"(fn [a b]\n  (set (filter (fn [a_](boolean (some #(= a_ %) b))) a)))","user":"5bf0aefde4b0a6d31fed215a"},{"problem":81,"code":"(fn f\n  [s1 s2]\n  (set (filter #(and (contains? s1 %1) (contains? s2 %1)) (clojure.set/union s1 s2))))","user":"56df62eee4b0ca2494a095f0"},{"problem":81,"code":"(fn [a b] (reduce #(if (nil? (b %2)) %1 (conj %1 %2)) #{} a))","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn [s1 s2] (set (flatten (map (fn [num] (filter #(= num %) s2)) s1))))","problem":81,"user":"525a643be4b0cb4875a45cf1"},{"code":"(fn set-intersection [s1 s2] (set (filter (partial contains? s2) s1)))","problem":81,"user":"4fae4c11e4b081705acca248"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter s1 s2))\n)","user":"53e9681de4b036ad0777e4a4"},{"code":"#(set (filter (fn [x] (contains? % x)) %2))","problem":81,"user":"515e8ce2e4b049add99a053d"},{"code":"(fn [a b]\n  (loop [ans #{}\n         other a]\n    (if-let [x (first other)]\n      (if (contains? b x)\n        (recur (conj ans x) (rest other))\n        (recur ans (rest other)))\n      ans)\n    )\n  )","problem":81,"user":"515f8a0de4b0e2be8aa20bce"},{"problem":81,"code":"(fn [set1 set2]\n  (set (for [n1 set1\n             n2 set2\n             :when (= n1 n2)]\n         n1)))","user":"54246fcce4b01498b1a71aed"},{"problem":81,"code":"(fn set-intersect [left right]\n  (loop [index-set left\n         common #{}]\n    (if-let [head (first index-set)]\n      (recur (rest index-set) (if (contains? right head) (conj common head) common))\n      common)))","user":"5d80f328e4b0915913b1d372"},{"problem":81,"code":"(fn [xs ys]\n  (set\n   (filter\n    (fn [x]\n      (contains? ys x))\n    xs)))","user":"5da7176ae4b000c986472c13"},{"problem":81,"code":"(fn set-intersection [a b]\n  (set (filter a b)))","user":"5d138119e4b0902706380dbb"},{"problem":81,"code":"(fn [set1 set2]\n            (reduce (fn [acc v]\n                      (if (set2 v)\n                        (conj acc v)\n                        acc))\n                    #{}\n                    set1))\n#_(fn [set1 set2]\n            (loop [acc #{}, noms set1, over set2]\n              (if (seq noms)\n                (let [v (first noms)\n                      nomd (disj noms v)]\n                  (recur (if (over v)\n                           (conj acc v)\n                           acc)\n                         nomd\n                         over))\n                acc)))","user":"53684a2fe4b0243289761e8c"},{"code":"(fn [a b]\n   (set (filter #(contains? b %1) a)))","problem":81,"user":"535e518ee4b04ce2eb3ed2cf"},{"code":"(fn \n  [set1 set2] (loop [s #{} s1 set1 s2 set2]\n\t\t(if-not (and s1 s2)\n\t\t\ts\n\t\t\t(if (contains? s2 (first s1))\n\t\t\t\t(recur (conj s (first s1)) (next s1) s2)\n\t\t\t\t(recur s (next s1) s2)))))","problem":81,"user":"4f047542535dcb61093f6bc7"},{"code":"#(set (remove (complement (partial contains? %2)) %1))","problem":81,"user":"531792d9e4b08068f379ed5e"},{"code":"(fn [s & ss]\n  (set (filter\n    (fn [e] (every? (fn [z] (some #(= % e) z)) ss)) s)))","problem":81,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":81,"code":"(fn [x & y] (set (for [[dup times] (frequencies (into (vec x) (apply concat y))) :when (> times 1)] dup)))","user":"5ac4d1f6e4b0e27600da7735"},{"problem":81,"code":"(fn [& sets]\n  (reduce (fn [s t]\n            (->> t\n                 (clojure.set/difference s)\n                 (clojure.set/difference s))) sets))","user":"561ca2eae4b064ca9f4b169b"},{"code":"#(set (for [a % b %2 :when (= a b)] a))","problem":81,"user":"50eebf46e4b06330c1f87c61"},{"problem":81,"code":"(fn [lista listb] (set (filter #(contains? listb %) lista)))","user":"5d5e9f45e4b0c9e5857d4ff5"},{"problem":81,"code":"(fn [ens1 ens2]\n  (loop [inter #{} ens1 ens1]\n    (if (seq ens1)\n      (if (contains? ens2 (first ens1))\n        (recur (conj inter (first ens1)) (rest ens1))\n        (recur inter (rest ens1))\n        )\n      inter)\n    )\n  )","user":"5a75da49e4b0512ff01cdacf"},{"problem":81,"code":"(fn [seta setb]\n  (set (filter #(contains? setb %) seta)))","user":"53bd7080e4b0d9a98559a6d1"},{"problem":81,"code":"(fn [n1 n2] \n  (set \n   (filter #(contains? n2 %) \n           n1)))","user":"5a99c5a9e4b0d174b936c7b1"},{"code":"(fn [s1 s2] (clojure.set/difference s1 (clojure.set/difference s1 s2)))","problem":81,"user":"513ca934e4b0b86ece9f3228"},{"problem":81,"code":"(fn my-intersection [& sqs]\n  (set (reduce (fn [ls rs]\n                 (filter #(contains? (set rs) %) ls)) sqs)))","user":"5bfa25fbe4b0bdcf453d15c8"},{"code":"#(set\n    (for [i %1\n    :when (contains? %2 i)]\n    i))","problem":81,"user":"4de18de7535d08e6dec9fde8"},{"code":"(fn  [s1 s2]\n  (loop [rm s1, rm2 s2, acc #{}]\n    (cond (empty? rm2) acc\n          (empty? rm) (recur s1 (rest rm2) acc)\n          (= (first rm) (first rm2)) (recur (rest rm) rm2 (conj acc (first rm)))\n          :else (recur (rest rm) rm2 acc))))","problem":81,"user":"538e36c7e4b0b51d73faae81"},{"code":"(fn [a b]\n  (reduce\n    #(if (contains? b %2) (conj % %2) %) #{} a))","problem":81,"user":"515a6151e4b0394f658fe241"},{"code":"(fn [s1 s2] \n   (set \n    (remove nil? \n            (map #(cond (apply = %) (first %)\n                        :else nil)\n                 (for [x s1 y s2] [x y])))))","problem":81,"user":"536f5900e4b0fc7073fd6e7b"},{"code":"(fn funk [a b]\n  (set (filter a b )))","problem":81,"user":"51427a8be4b0b50abeb46b37"},{"code":"#(disj (set (for [x %1 y %2](if(= x y)x))) nil)","problem":81,"user":"51e3cf8ee4b0efabf93c02a3"},{"problem":81,"code":"(fn [as bs] (reduce conj #{} (filter bs as)))","user":"57006957e4b08d47c97781c8"},{"problem":81,"code":"(fn [a b]\n    (set (filter #(contains? a %) b)))","user":"563cce5be4b0bfe05bf1183f"},{"problem":81,"code":"(fn [a b]\n  (set (for [m a n b :when (= m n)] m)))","user":"52dc7344e4b09f7907dd13cf"},{"code":"(fn [s1 s2] (set (distinct (concat (filter s1 s2) (filter s2 s1)))))","problem":81,"user":"50e3e108e4b01912b3285c48"},{"problem":81,"code":"(fn    [s1 s2]\n  (loop [srest s2\n         result #{}]\n    (let [selem (first srest)]\n\n      (if selem\n        (if (contains? s1 selem)\n          \n          (recur (rest srest)\n                 (conj result selem))\n\n          (recur (rest srest)\n                 result))\n        \n        result))))","user":"59971dcbe4b07157cc8daacb"},{"problem":81,"code":"(fn [a b] (set (mapcat (fn [x] (filter (partial = x) a)) b)))","user":"5627d09ce4b00e49c7cb47db"},{"problem":81,"code":"(fn [setA setB]\n  (set (filter #(contains? setB %1) setA)))","user":"54cbd97ae4b057c6fda3a283"},{"code":"(fn [set1 set2]\n  (reduce \n    #(if (pos? (count (filter (fn[x] (= x %2)) set2))) (conj %1 %2) %1)\n    #{}\n    set1))","problem":81,"user":"504eff22e4b0e7ad84dbc4a9"},{"problem":81,"code":"(fn intersect [set1 set2] \n  (set (filter #(contains? set1 % ) set2)\n))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":81,"code":"(fn [x y](into #{} (filter #(contains? y %) x)))","user":"552800d7e4b0ffed3738f93a"},{"code":"(fn [s1 s2] (clojure.set/select s1 s2) )","problem":81,"user":"51729002e4b044b2ef48a850"},{"problem":81,"code":"(fn intersect [s1 s2]\n  (if (empty? s1)\n    #{}\n    (let [fst (first s1)\n          irst (intersect (rest s1) s2)]\n      (if (contains? s2 fst)\n        (conj irst fst)\n        irst))))","user":"52860baae4b0239c8a67ae09"},{"code":"(fn [a b]\n  (set (filter #(contains? b %1) a)))","problem":81,"user":"51db0d99e4b06aa4d4669a9d"},{"code":"(fn inter [x y]\n  (let [all     (clojure.set/union x y)\n        single  (clojure.set/union (clojure.set/difference x y)\n                       (clojure.set/difference y x))]\n    (clojure.set/difference all single))\n)","problem":81,"user":"4e3456f9535deb9a81d77f2a"},{"problem":81,"code":"(fn my_intersect\n\t([l r] (my_intersect l r #{}))\n\t([l r out]\n\t\t(if-let [cur (first l)]\n\t\t\t(if (r cur)\n\t\t\t\t(recur (rest l) r (conj out cur))\n\t\t\t\t(recur (rest l) r out)\n\t\t\t)\n\t\tout)\t\n\t)\n)","user":"57c99a45e4b05aa3c4741d31"},{"code":"(fn intsect [a b]\r\n  (set (filter #(contains? b %) a)))","problem":81,"user":"4e123905535d04ed9115e7ce"},{"code":"(fn [a b]\n   (loop [r a x (clojure.set/difference a b)]\n     (if (empty? x)\n       r\n       (recur (disj r (first x)) (rest x)))))","problem":81,"user":"52c81954e4b0c2d177d6212e"},{"problem":81,"code":"(fn [x y] (loop [result #{} merged (apply conj x y)]\n  (if (= 0 (count merged))\n    result\n    (let [first (first merged)]\n      (if (and (not (nil? (x first))) (not (nil? (y first))))\n        (recur (conj result first) (rest merged))\n        (recur result (rest merged))\n      )))))","user":"55d79b87e4b0e31453f64aa8"},{"problem":81,"code":"#(set(for [x %1 y %2 :when(= x y)] x))","user":"580d7e53e4b0849f6811b73e"},{"problem":81,"code":"(fn [coll1 coll2] \n   (reduce #(if (some (fn [x] (= %2 x)) coll1) \n              (conj %1 %2) \n              %1) \n           #{} \n           coll2))","user":"568c2d96e4b0dcc4269f40af"},{"problem":81,"code":"(fn[a b] (reduce #(if (contains? b %2) (conj %1 %2) %1) #{} a))","user":"5602ab92e4b04bb52996e1a3"},{"problem":81,"code":"(fn my-intersection\n  [s1 s2]\n  (reduce (fn [i e] (if (contains? s2 e) (conj i e) i)) #{} s1))","user":"56050f06e4b08b23635d3161"},{"problem":81,"code":"#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1) ) )","user":"54797964e4b0c51c1f4d72c6"},{"problem":81,"code":";(fn [l r] (reduce #(if (l %2) (conj % %2) %) #{} r))\n\n#(set (filter % %2))","user":"55236ad6e4b0882d96d091b1"},{"code":"(fn f [x y]\n  (set (filter #(contains? y %) x)))","problem":81,"user":"50c4a354e4b0210b849018af"},{"problem":81,"code":"(fn [a b]\n  (set\n    (filter\n      #(contains? b %) a)))","user":"52e087dde4b09f7907dd1412"},{"code":"(fn my-intersection\n  [s1 s2]\n  (set (filter (partial contains? s2) s1)))","problem":81,"user":"4e50b67b535dc968683fc4ed"},{"problem":81,"code":"(fn set-intersection3\r\n      [s1 s2]\r\n    (set (remove nil? (map s1 s2))))","user":"60c90322e4b0e0fa5f1b4302"},{"problem":81,"code":"(fn f [s1 s2]\n   (cond (empty? s1) #{}\n         (not (nil? (s2 (first s1)))) (clojure.set/union (set (list (first s1))) (f (rest s1) s2))\n         :else (f (rest s1) s2)))","user":"55e3e7a8e4b050e68259b44a"},{"code":"(fn my-intersect [s1 s2]\n  (set (filter #(and (contains? s1 %) (contains? s2 %)) s1)))","problem":81,"user":"4e0d5a5a535d04ed9115e7b5"},{"code":"#(into #{} (filter %2 %1))","problem":81,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"code":"#(set (for [x %2 y %1 :when (= x y)] x))","problem":81,"user":"4f017593535dcb61093f6a36"},{"problem":81,"code":"(fn\n  [set1 set2]\n  (set\n     (filter\n      #(some #{%} set1)\n      set2)))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":81,"code":"(fn [a b]\n  (let [t (partial clojure.set/difference a)]\n  (t (t b))))","user":"559279b7e4b0604b3f94d58c"},{"problem":81,"code":"(fn [a b](let [s (reduce disj a b)]  (apply sorted-set (remove #(contains? s %) a))))","user":"552f300fe4b076ab5578f7ff"},{"problem":81,"code":"(fn [s1 s2]\n   (set (filter (set s1) s2))\n)","user":"5f58db95e4b0a0bc16850a9a"},{"code":"(fn [c1 c2]\n    (apply hash-set (remove (fn [x] (contains? (apply hash-set (remove #(contains? c1 %) c2 ) ) x ) ) c2))\n  )","problem":81,"user":"51e28063e4b08e53a149f0f2"},{"problem":81,"code":"(fn [ca cb]\n      (set (filter #(contains? cb %) ca)))","user":"55a372f1e4b0acc240e31537"},{"problem":81,"code":"(fn [a b] (clojure.set/select (fn [e] (contains? b e)) a))","user":"554a270fe4b0a04f79299570"},{"code":"(fn _intersection [set_a set_b]\n  (set (for [x set_a\n             y set_b\n             :when (= x y)]\n         x)))","problem":81,"user":"510cd1dde4b078ea71921124"},{"problem":81,"code":"(fn my-intersection [x y]\n  (set (filter #(contains? y %) x)))","user":"52b9e920e4b07a9af57922c9"},{"problem":81,"code":"(fn [x y]\n (reduce #(if (contains? x %2)  (conj % %2) %) #{} y))","user":"56b1b59be4b0982f16b37df2"},{"code":"(fn [xs ys]\r\n       (reduce #(if (ys %2) (conj %1 %2) %1) #{} xs))","problem":81,"user":"4deb529a535d08e6dec9fe04"},{"code":"#(set (filter identity\n  (map % %2)))","problem":81,"user":"4f253a49e4b0d66497709ff3"},{"code":"(fn i [a b] (set (filter #(contains? a %) b)))","problem":81,"user":"52ba43d0e4b07a9af57922cd"},{"problem":81,"code":"(fn [set1 set2]\n  (apply disj\n         (set (concat set1 set2))\n         (set (concat (apply disj set1 set2) (apply disj set2 set1)))))","user":"571cd9dce4b0145328a76271"},{"code":"(fn my-intersection [& n-set]\n\t(letfn [(my-inter-aux [s1 s2]\n\t\t\t      (reduce #(if (contains? s1 %2)\n\t\t\t\t\t   (conj %1 %2)\n\t\t\t\t\t %1)\n\t\t\t\t      #{} s2))]\n\t       (reduce my-inter-aux n-set)))","problem":81,"user":"52381b2ae4b0fae3832e99ef"},{"problem":81,"code":"(fn inter\n  [s1 s2]\n  (apply hash-set (filter #(not (= % nil)) \n                          (for [i s1 j s2]\n                           (if (= i j) i)))))","user":"57fc34f0e4b0d3187e90098e"},{"code":"(fn [s & ss]\n  (->> s\n    (filter (fn [elem]\n              (every? #((comp not nil? %) elem) ss)))\n    (apply hash-set)))","problem":81,"user":"50657775e4b0deb876850599"},{"problem":81,"code":"(fn [xs ys]\n    (set\n      (filter\n        (fn [v]\n          (contains? ys v)\n        )\n        xs\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn [& sets]\n  (set (reduce (fn [a b] (filter #(a %) b)) sets)))","problem":81,"user":"52951156e4b02ebb4ef7501b"},{"code":"#(set \n  (for [x % y %2\n        :when (= x y)] x))","problem":81,"user":"523b1988e4b02f719975bdbc"},{"problem":81,"code":"(fn\n  [s1 s2]\n  (loop [a s1\n         b s2\n         r #{}]\n    (cond\n      (empty? a) r\n      (empty? b) r\n      (contains? s2 (first a)) (recur (rest a) b (conj r (first a)))\n      (contains? s1 (first b)) (recur a (rest b) (conj r (first b)))\n      :else (recur (rest a) (rest b) r))))","user":"5599abc9e4b031d6649c9bb0"},{"code":"#(let [i (filter %1 %2)] (if (empty? i) #{} (apply conj #{} i)))","problem":81,"user":"4dda44f2535d02782fcbe9f1"},{"code":"(fn my-intersection [a b]\n  (into #{}\n        (filter #(contains? b %) a)))","problem":81,"user":"5269c150e4b03e8d9a4a71f8"},{"problem":81,"code":"(fn [a b] (let [g (clojure.set/union a b)] (clojure.set/select #(and (contains? a %) (contains? b %)) g)))","user":"556086a2e4b0c656e3ff17c1"},{"problem":81,"code":"(fn foo [set1 set2]\n  (reduce #(if (contains? set2 %2)\n             (conj %1 %2) %1)\n          #{}\n          set1))","user":"5b333626e4b025bcb146f32f"},{"problem":81,"code":"(fn [m n] (set (filter m n)))","user":"5c82db41e4b0c8042a70ce42"},{"code":"#(into #{} \n    (map (fn [x] (first x))\n      (filter (fn [y] (= 2 (last y)))\n        (frequencies (interleave % %2)))))","problem":81,"user":"5236cd89e4b0e010857b4e45"},{"code":"(fn [x y] (set (filter #(x %) y)))","problem":81,"user":"51bdc609e4b0ff155d51d2b3"},{"problem":81,"code":";;(fn [x y] (set (filter #(contains? x %) y)))\n(comp set filter)","user":"57ee42c4e4b0bfb2137f5bb1"},{"problem":81,"code":"(fn [s1 s2] (clojure.set/select #(contains? s1 %) s2))","user":"55dbed2fe4b050e68259b3a6"},{"problem":81,"code":"(fn [set1 set2] (reduce #(if (set2 %2) (conj %1 %2) %1) #{} set1))","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"problem":81,"code":"(fn\n  [n m]\n  (set (filter n m)))","user":"5f7e91c8e4b0c071e6c840d8"},{"problem":81,"code":"#(into #{} (filter (partial contains? %1 ) %2 ))","user":"533a2f7be4b0e30313ee6cb8"},{"problem":81,"code":"#(into #{} (for [a %1 b %2 :when (= a b)] a))","user":"5f5b624de4b05ea7b9adc42f"},{"problem":81,"code":"(fn [& colls]\n      (set (apply concat (filter\n                          #(> (count %) 1)\n                          (partition-by identity (sort (apply concat colls)))))))","user":"5a062e07e4b01bb0ae8afdc5"},{"problem":81,"code":"(fn intersect [s1 s2]\n  (into #{} (filter #(contains? s1 %) s2)))","user":"573f3ccfe4b05c31a32c083f"},{"code":"(fn intersect-1\n  [s1 s2]\n  (into #{}\n        (filter (fn [x] (and (get s1 x)\n                             (get s2 x)))\n                (into s1 s2))))","problem":81,"user":"4e7f32ee535db966e863cc3a"},{"code":"(fn [& sets]\n  (->> sets\n       (apply concat)\n       frequencies\n       (filter #(= (count sets) (second %)))\n       (map first)\n       set))","problem":81,"user":"510db6cde4b078ea71921145"},{"code":"(fn i \n  [s1 s2]\n  (set (filter #(s1 %) s2)))","problem":81,"user":"51f2a491e4b0210f90e74553"},{"code":"(fn [s & ss]\n  (set (filter (fn [k] (every? #(contains? % k) ss)) s)))","problem":81,"user":"50d8f4b6e4b01f0871336e74"},{"problem":81,"code":"(fn [a b]\n\t\t(into #{} (filter #(contains? b %) a)))","user":"57644395e4b0994c1922fbf2"},{"problem":81,"code":"(fn [a b]\n  (clojure.set/difference a (clojure.set/difference a b)))","user":"55586905e4b0deb715856e2b"},{"code":"#(set (filter (complement nil?)(for [ a %1 b %2] (if (= a b) a))))","problem":81,"user":"4e44358f535dc968683fc4a8"},{"problem":81,"code":"(fn [a b] (set (keep a b)))","user":"5256c4c1e4b0541d1855ba36"},{"problem":81,"code":"(fn inters\n  \n  \n  \n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1))))","user":"55a65872e4b09e57187da299"},{"code":"(fn inters [s & ss] \n    (set\n     (filter \n      (fn [item] \n       (every? #(contains? % item) ss))\n      s)))","problem":81,"user":"50d3ec8be4b030b634c368bb"},{"problem":81,"code":"(fn [a b] (reduce #(if (and ( b %2) (a %2)) (conj %1 %2) %1 ) #{} (clojure.set/union a b)))","user":"5b4a0ce3e4b02d533a91bc92"},{"problem":81,"code":"(fn [set1 set2] \n  (->> (for [elem set1] \n         (when (contains? set2 elem) #{elem}))\n  \t   (reduce concat)\n       (into #{})))","user":"56c44c34e4b05cc29241ee96"},{"code":"(fn [c1 c2] \n  (set (filter c1 c2)))","problem":81,"user":"50435689e4b034ff00315d21"},{"code":"(fn [set1 set2]\n  (loop [input (clojure.set/union set1 set2) output #{}]\n    (if (empty? input)\n      output\n      (let [next (first input) rest (rest input)]\n        (if (and (contains? set1 next) (contains? set2 next))\n          (recur rest (conj output next))\n          (recur rest output))))))","problem":81,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"(fn [s1 s2] \n  (set \n    (remove nil? (map #(some #{%} s1) s2))))","problem":81,"user":"4fb2f9b2e4b081705acca294"},{"code":"(fn [s1 s2] \n  (reduce (fn [s elem] (if (contains? s2 elem) (conj s elem) s)) \n          #{} \n          s1))","problem":81,"user":"4fb01e53e4b081705acca260"},{"problem":81,"code":"(fn [lst1 lst2]\n  (into #{} (filter #(contains? lst2 %) lst1)))","user":"5489dd4de4b0e286459a11ef"},{"problem":81,"code":"#(reduce-kv\n   (fn [s k v] \n     (if (> (count v) 1)\n       (conj s k)\n       s))\n   #{}\n   (group-by\n    identity\n    (flatten (map vec [%1 %2]))))","user":"56098ccbe4b0053d1b86c7e4"},{"code":"#(into #{} (filter (partial contains? %1) %2))","problem":81,"user":"517945dce4b0684c1c981a43"},{"code":"(fn [x y]\n  (set (filter #(x %) y)))","problem":81,"user":"5084c43be4b0fb8f40674bfa"},{"code":"#(set (for [x %1 y %2 :when (= x y)] x ))","problem":81,"user":"511a0374e4b06c8af011181a"},{"code":"(fn [x y]\r\n(set (filter (partial contains? y) x)))","problem":81,"user":"4f00c74f535dcb61093f6a31"},{"problem":81,"code":"#(set (for [x %1\n       :when (contains? %2 x)]\n   x))","user":"544e9022e4b0e3978000698b"},{"code":"(fn my-intersection [set1 set2]\n  (loop [s1 set1 result #{}]\n    (if (empty? s1)\n      result\n      (if (nil? (get set2 (first s1)))\n        (recur (rest s1) result)\n        (recur (rest s1) (conj result (first s1)))))))","problem":81,"user":"4e95a440535dbda64a6f6b37"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [acc x] (if (contains? s1 x) acc (disj acc x)))\n          s2\n          s2))","user":"549c6792e4b0f3d1d8e70f8b"},{"code":"#(set (filter %1 %2))","problem":81,"user":"4dc986d0535d5973398f9285"},{"problem":81,"code":"(fn [fst snd] (set (filter #(contains? fst %) snd)))","user":"58e7229fe4b056aecfd47cc4"},{"code":"(fn intersect [xs ys]\n  (if (empty? xs)\n    #{}\n    (let [curr (first xs)\n          after (intersect (rest xs) ys)\n          in_ys (ys curr)]\n      (if (nil? in_ys)\n        after\n        (conj after curr)))))","problem":81,"user":"5334d4f2e4b0656e627bfd71"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [new-set elem]\n            (if (s2 elem)\n              (conj new-set elem)\n              new-set))\n          #{}\n          s1))","user":"58a47197e4b01a0c0b2328f9"},{"problem":81,"code":"(fn [x y] (set (filter (complement nil?) (map #(x %1) y))))","user":"544e8369e4b0e39780006987"},{"problem":81,"code":"(fn [s1 s2]\n  (->>\n   (for [x s1 :when (get s2 x)] x)\n   (set)))","user":"58303fc3e4b051871117c006"},{"problem":81,"code":"(fn [x y]\n  (set (filter #(contains? y %1) x)))","user":"5a6a7cc5e4b0512ff01cda27"},{"code":"(fn prob81[c1 c2]\n\t\t  (let [res (transient #{})]\n\t\t\t(doseq [k c1]\n\t\t\t\t\t   (if (get c2 k)\n\t\t\t\t\t   (conj! res k)))\n\t\t\t(persistent! res)))","problem":81,"user":"51f2851fe4b0210f90e7454b"},{"problem":81,"code":"(fn [x y]\n    (set\n     (for [x1 (sort x) y1 (sort y)\n           :when (= x1 y1)]\n       x1\n       ))\n    )","user":"5b269cf3e4b063e2438bcc35"},{"code":"(fn my-intersect [s1 s2]\n  (set (for [x s1 :when (s2 x)]\n         x)))","problem":81,"user":"530578ede4b0d8b024fd3760"},{"code":"(fn [x y] (clojure.set/difference x (clojure.set/difference x y)))","problem":81,"user":"4fe1597fe4b0dd6cd5ce3633"},{"problem":81,"code":"(fn [set-one set-two] (set (reverse (filter set-one set-two))))","user":"5e860270e4b09a7a73c8bbdb"},{"problem":81,"code":"(fn [a b]\n      (set (filter #(and (contains? a %) (contains? b %)) (set (concat a b))))\n      )","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":81,"code":"(fn [a b]\n (set (for [x a y b\n            :when (= x y)]\n        x))\n)","user":"57e396cde4b0bfb2137f5a9e"},{"code":"(fn [x y]\n  (set (filter #(some #{%} y) x)))","problem":81,"user":"50b64b55e4b0a86f8358ca6b"},{"problem":81,"code":"(fn sect [x y] (into #{} (filter (fn [e] (contains? y e)) x)))","user":"545801f6e4b01be26fd74615"},{"code":"(fn i [s1 s2]\n  (if (= 0 (count s1))\n    #{}\n    (let [f (first s1) r (i (rest s1) s2)]\n      (if (contains? s2 f)\n        (conj r f)\n        r\n        )\n      )\n    )\n  )","problem":81,"user":"52d92f13e4b09f7907dd13a2"},{"code":"(fn [s1 s2]\n  (set (for [x s1 y s2 :when (= x y)]\n    x)))","problem":81,"user":"4f75469ee4b0fbe0118ec55a"},{"code":"(fn intrsctn [f s]\n  (set (filter #(s %) f)))","problem":81,"user":"53710c09e4b0fc7073fd6ea5"},{"code":"(fn intersection_ [s1 s2]\n  (let [members (distinct (concat s1 s2))]\n    (set (filter #(and (s1 %) (s2 %)) members))))","problem":81,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"#(set (for [ x % :when (contains? %2 x) ] x))","problem":81,"user":"535a18e3e4b04ce2eb3ed2a4"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [intersections #{}\n         s s1]\n    (if (empty? s)\n      intersections\n      (let [first (first s)]\n        (if (get s2 first)\n          (recur (conj intersections first) (disj s first))\n          (recur intersections (disj s first)))))))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":81,"code":"(fn [x y] \n   (into #{} (filter #(contains? x %) y)))","user":"591cbc30e4b09b4ee5954c08"},{"code":"#(set (for [x (frequencies (concat % %2))\n            :when (> (val x) 1)]\n        (key x)))","problem":81,"user":"51057b2be4b06d28cacc92e8"},{"code":"(fn isect [sa sb]\r\n  (cond\r\n    (or (empty? sa) (empty? sb))\r\n      #{}\r\n    (contains? sb (first sa))\r\n      (conj (isect (rest sa) sb) (first sa))\r\n    :else\r\n      (isect (rest sa) sb)))","problem":81,"user":"4ee40938535d10e5ff6f5375"},{"problem":81,"code":"#(set (filter (fn [x]  (contains? %2 x)) %1))","user":"524025bce4b0ad64fa01030f"},{"problem":81,"code":"#(into #{} (filter (fn [x] (%1 x)) %2))","user":"55db7e15e4b0e31453f64ae8"},{"code":"(fn perf [one two]\r\n   (reduce #(if (two %2)\r\n              (conj %1 %2)\r\n              %1)\r\n           #{} one)\r\n   )","problem":81,"user":"4e0d8c27535d04ed9115e7b7"},{"code":"(fn [ls rs] (reduce (fn [is r] (if (ls r) (conj is r) is)) #{} rs))","problem":81,"user":"5392b849e4b0b51d73faaeb1"},{"problem":81,"code":"#(reduce (fn [acc x]\n           (if (some #{x} %1)\n             (conj acc x)\n             acc))\n         #{}\n         %2)","user":"52c35afce4b07a9af579238c"},{"code":"#(loop [result #{} x1 % x2 %2]\r\n      (if (empty? x1)\r\n        result\r\n        (recur (if (contains? x2 (first x1)) (conj result (first x1)) result) (rest x1) x2)\r\n        )\r\n      )","problem":81,"user":"4ddc56e1535d02782fcbea04"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n  (into #{}\n        (filter #(contains? s2 %) s1)))","user":"601c39eee4b0bf4ca6b10937"},{"problem":81,"code":"(fn [& sets]\n  (apply (comp set filter) sets))","user":"5c3796b3e4b0d62ef62d9f77"},{"code":"(fn [set1 set2]\n   (loop [result #{} elements set1]\n     (if (empty? elements)\n       result\n       (if (contains? set2 (first elements))\n         (recur (conj result (first elements)) (rest elements))\n         (recur result (rest elements))\n         )\n       )\n     )\n   )","problem":81,"user":"5106dc1be4b01150e115ebf0"},{"code":"#(set (filter %2 %))","problem":81,"user":"4e7e55ab535db169f9c79711"},{"code":"(fn test81\n  [x y]\n  (set (filter #(contains? y %) x)))","problem":81,"user":"50b0cffae4b009df37c708c5"},{"problem":81,"code":"(fn [as bs] (reduce #(if (contains? bs %2) (conj %1 %2) %1) #{} as))","user":"56532ff4e4b0f9d632dd846e"},{"code":"(fn [a b]\n  (->> (map a b) (filter identity) (into #{})))","problem":81,"user":"4e6a2f93535d8ccf87e9feaa"},{"code":"(fn [c1 c2] (set (filter #(c2 %) c1)))","problem":81,"user":"51e38568e4b0c611d6113e43"},{"code":"(fn minsertion [lst mst]\r\n  (loop [ls (sort lst) xs []]\r\n    (if (nil? (first ls))\r\n      (set xs)\r\n      (if (some #(= (first ls) %) mst)\r\n  (recur (rest ls) (conj xs (first ls)))\r\n\t(recur (rest ls) xs)))))","problem":81,"user":"4ddc620d535d02782fcbea06"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter #(contains? s2 %) s1\n  ))\n)","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":81,"code":"(fn\n  [a b]\n  (set (filter #(contains? a %) b))\n)","user":"56bb3a4be4b0f26550335951"},{"problem":81,"code":"(fn [l1 l2] (set (filter #(contains? l1 %) l2)))","user":"60dd865ee4b0d8b48c489db3"},{"problem":81,"code":"(fn intersection2 \n  [x y] \n  (set (filter #(contains? y %) x)))","user":"5c7dad57e4b0d597f478caba"},{"code":"(fn [a b] (disj (set (for [x a y b] (if (= x y) x))) nil))","problem":81,"user":"4eb0afed535d7eef3080733e"},{"problem":81,"code":"(fn [s1 s2]\n  (let [u   (into s1 s2)\n        d1  (clojure.set/difference u s1)\n        d2  (clojure.set/difference u s2)\n        d12 (into d1 d2)]\n    (clojure.set/difference u d12)))","user":"563772a9e4b0bfe05bf117d7"},{"code":"(fn [x y] \n    (set (keep #(if (contains? y %) %) x))\n)","problem":81,"user":"52bacfa8e4b07a9af57922d6"},{"problem":81,"code":"(fn set-intersection [& sets]\n  (let [union (apply clojure.set/union sets)]\n    (set (for [x union :when (every? #(contains? % x) sets)]\n      x))))","user":"5cdc08a2e4b05ee0cb31173a"},{"code":"(fn [& xxs] \n  (into #{} (map first (filter #(= (second %) (count xxs)) (frequencies (mapcat (partial into []) xxs))))))","problem":81,"user":"51efd397e4b0249c592fbdeb"},{"code":"(fn ff [ x y]\n    (into #{} (filter #(contains?  y %) x )))","problem":81,"user":"4f030775535dcb61093f6a43"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce #(if (some #{%2} s1)\n             (conj %1 %2)\n             %1)\n      #{} s2))","user":"52f53589e4b05e3f0be25f2c"},{"problem":81,"code":"(fn take_dub [x y]\n  (let [z (vec (sort (distinct (concat x y))))]\n    (set (for [i z :when (and (not (empty? (filter (set (list i)) x))) (not (empty? (filter (set (list i)) y))))] i))\n    )\n  )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"problem":81,"code":"#(set (keep (fn [c] (if (contains? %1 c) c nil)) %2))","user":"5a3c5c54e4b001c08efc0ce3"},{"code":"(fn [m1 m2]\n  (clojure.set/difference m1 (clojure.set/difference m1 m2)))","problem":81,"user":"52b43468e4b0c58976d9ad1b"},{"code":"(fn [a b]\n  (set\n   (map first\n        (filter #(= (first %) (second %))\n                (for [a1 a b1 b] [a1 b1])))))","problem":81,"user":"4fdbc075e4b05e33b9224f61"},{"code":"#(into #{} (filter %1 %2))","problem":81,"user":"4ddbfb8a535d02782fcbea00"},{"problem":81,"code":"(fn inter [set-a set-b]\n  (into #{} (filter #(contains? set-a %) set-b))\n  )","user":"57f81045e4b0d3187e90090f"},{"code":"(fn [a b]\n  (set (filter identity\n               (map #(if (contains? b %) %)\n                    a))))","problem":81,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":81,"code":"(fn [p1 p2] \n  (let [preproc (fn [s] (zipmap s (repeat 1)))] \n    (->> (merge-with + (preproc p1) (preproc p2)) \n         (filter #(> (last %) 1)) \n         (map first) \n         set )))","user":"567798afe4b05957ce8c6169"},{"code":"(fn [set1 set2]\r\n  (loop [a set1 b set2 r #{}]\r\n    (if (empty? a)\r\n      r\r\n      (recur (rest a) b\r\n             (let [x (first a)]\r\n               (if (b x)\r\n                 (conj r x)\r\n                 r))))))","problem":81,"user":"4db6ce85535d1e037afb217f"},{"problem":81,"code":"(fn intersect [& maps]\n  (into #{} (reduce (fn [first second]\n                      (let [to-remove (clojure.set/difference first second)]\n                        (remove #(contains? to-remove %) first))) maps)))","user":"55b22c33e4b0da326a65cf79"},{"problem":81,"code":"(fn [& sets]\n  (set (apply keep sets)))","user":"60836285e4b0736b099e42e4"},{"code":"(fn [x y]\n  (let [x-sub-y (clojure.set/difference x y)\n        y-sub-x (clojure.set/difference y x)\n        full-diff (clojure.set/union x-sub-y y-sub-x)\n        full-set (clojure.set/union x y)]\n    (clojure.set/difference full-set full-diff)))","problem":81,"user":"4ea68edb535d7eef308072e6"},{"problem":81,"code":"(fn intersexy\n  [set1 set2]\n  (set (filter #(contains? set2 %) set1)))","user":"51b01309e4b0c53cf2e68a57"},{"code":"#(set (filter identity (map %1 %2)))","problem":81,"user":"4e7dfab0535db169f9c796f9"},{"code":"(fn [& sets] (reduce (comp set filter) sets))","problem":81,"user":"52963cc7e4b02ebb4ef7502d"},{"problem":81,"code":"(fn [s1 s2]\n   (set (filter #(and (contains? s2 %) %) s1)))","user":"5d0beecee4b0cc9c91588239"},{"problem":81,"code":"(fn inters [s1 s2]\n   (set (filter #(contains? s2 %) s1)))","user":"5245e320e4b09dbe66b56177"},{"code":"(fn [a b] (reduce #(if (a %2) (conj % %2) %) #{} b))","problem":81,"user":"52d7a930e4b09f7907dd1379"},{"problem":81,"code":"(fn [X Y] (set (filter #(contains? Y %) X)))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn [s1 s2]\n  (set\n   (for [x s1\n         y s2\n         :when (= x y)]\n     x)))","problem":81,"user":"53527551e4b084c2834f4af0"},{"problem":81,"code":"(fn[x y](apply sorted-set (clojure.set/difference x (clojure.set/difference x y))))","user":"60195030e4b0bf4ca6b10920"},{"problem":81,"code":"(fn [a b]\n  (into #{} (for [x a\n                 :when (contains? b x)]\n             x)))","user":"512e31e9e4b0b740abc59823"},{"code":"(fn [set1 set2]\n  (clojure.set/difference\n    (clojure.set/union set1 set2)\n    (clojure.set/union\n      (clojure.set/difference set1 set2)\n      (clojure.set/difference set2 set1))))","problem":81,"user":"53806e5be4b06839e8705ec1"},{"code":"(fn inter [set1 set2]\n  (set (filter (fn [x] (some (fn [y] (= y x)) set1)) set2)))","problem":81,"user":"5220a770e4b0e6a83c8925a3"},{"code":"(fn set-intersection [s1 s2]\n    (disj (set (map #(if (apply = %) (first %) ) ((fn [x y] (set (for [a x b y] [a b]))) s1 s2))) nil))","problem":81,"user":"4ed72e51535d10e5ff6f52ee"},{"code":"(fn [s1 s2]\n  (let [s1diffs2 (clojure.set/difference s1 s2)\n        s2diffs1 (clojure.set/difference s2 s1)\n        sUns (clojure.set/union s1 s2)]\n    (clojure.set/difference sUns s1diffs2 s2diffs1)))","problem":81,"user":"4dcc2435535d5973398f9290"},{"code":"(fn [a b]\n    (set (filter #(and (a %) (b %)) (set (concat a b)))))","problem":81,"user":"4ee26f01535d10e5ff6f5368"},{"problem":81,"code":"(fn [s1 s2]\n  (set (keep #(get s2 %) s1)))","user":"53573d70e4b04ce2eb3ed278"},{"code":"(fn intersect [set1 set2]\n  (set (filter #(set2 %) set1)))","problem":81,"user":"516385cee4b055933a9ca02d"},{"problem":81,"code":"; First Try:\n; (fn [a b]\n;   (set\n;     (remove nil? (map a b))))\n\n; Better...\n(fn [a b] \n  (set (filter a b)))\n\n; or even..\n;(comp set filter)","user":"5465febde4b01be26fd746e1"},{"problem":81,"code":"(fn [a1 a2]\n  (loop [[f & r] (vec a1) result #{}]\n    (if (= nil f)\n      result\n      (recur r (if (contains? a2 f) (conj result f) result)))))","user":"5e7f62cce4b085ba37836e3b"},{"problem":81,"code":"(fn paco\n  ([s1 s2] (paco s1 s2 #{} ) )\n  ([s1 s2 new_set] \n   (if (empty? s1)\n     new_set\n     (if (not (contains? s2 (first s1)))\n       (paco (rest s1) s2 new_set )\n       (paco (rest s1) s2 (conj new_set (first s1))))\n     )\n   )\n  )","user":"5564709ee4b0c656e3ff1807"},{"code":"(fn [s1 s2]\n  (set(filter #(not (nil? %)) (map #(get s2 %) s1))))","problem":81,"user":"4f29eb2ae4b0d6649770a037"},{"problem":81,"code":"(fn my-intersection [s1 s2] (set (filter s1 s2)))","user":"5b47874be4b02d533a91bc70"},{"problem":81,"code":"(fn [x y](into #{} (filter x y)))","user":"55597b84e4b0deb715856e36"},{"problem":81,"code":"(fn [x y] (clojure.set/select #(contains? y %) x))","user":"559b55d6e4b066d22e731f54"},{"problem":81,"code":"(fn set-intersection\n  [xs vs]\n  (set (filter xs vs)))","user":"57c500f9e4b05aa3c4741cda"},{"code":"(fn intersect [a b]\n  (set (filter a b)))","problem":81,"user":"4f017b4e535dcb61093f6a37"},{"problem":81,"code":"(fn [a b]\n  (set (filter #(contains? a %1) b)))","user":"52cf1e25e4b07d0d72b2739c"},{"problem":81,"code":"(fn [s1 s2]\n  (apply sorted-set (remove nil? (map #(if (contains? s1 %) %) s2))))","user":"57ee2b3ee4b0bfb2137f5bac"},{"problem":81,"code":"(fn my-intersect [& sets]\n  (reduce (fn [s1 s2]\n           (into #{} (for [v s1 :when (s2 v)] v)))\n          sets))","user":"556405e5e4b0c656e3ff17fb"},{"problem":81,"code":"(fn [a b] (into #{} (filter  #(contains?  a %) b )))","user":"56102f50e4b05f002753df6b"},{"problem":81,"code":"(fn foo [a b] (reduce (fn [s y] (if (contains? b y) (conj s y) s)) #{} a))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":81,"code":"(fn intersct [seta setb]\n  (reduce #(if (seta %2) (conj %1 %2) %1) #{} setb))","user":"540e8d13e4b0addc1aec671e"},{"problem":81,"code":"(fn [s1 s2]\n  (set (reduce (fn [acc curr]\n                 (if (contains? s2 curr)\n                   (conj acc curr)\n                   (identity acc))) [] s1)))","user":"576a972ce4b0a07e8fc1811a"},{"code":"#(disj (set (map % %2)) nil)","problem":81,"user":"4e773be8535d324fb2983d6e"},{"code":"#(clojure.set/difference \n  (clojure.set/union %1 %2)\n  (clojure.set/union \n   (clojure.set/difference %1 %2)\n   (clojure.set/difference %2 %1)))","problem":81,"user":"52d340ebe4b099d49816f0c1"},{"problem":81,"code":"( fn my-intersection\n  [ x y ]\n\t( clojure.set/difference ( clojure.set/union x y )\n\t      ( clojure.set/difference x y )\n\t      ( clojure.set/difference y x )\n\t)\n)","user":"57561529e4b02ea1147992d3"},{"code":"; nice! (comp set filter)\n#(set (filter %1 %2))","problem":81,"user":"500933a6e4b046cdb195e074"},{"problem":81,"code":"(fn my-intersection\n  [s1 s2]\n  (reduce #(if (contains? s2 %2) (conj % %2) %) #{} s1))","user":"54091b82e4b0addc1aec66d5"},{"code":"#(apply disj (apply conj %1 %2) \n  (apply conj (apply disj %1 %2) (apply disj %2 %1)))","problem":81,"user":"4e976f79535dbda64a6f6b55"},{"problem":81,"code":"(fn [c1 c2] (into #{} (remove nil? (map #(if (contains? c2 %) % nil) c1))))","user":"54246d6de4b01498b1a71aec"},{"problem":81,"code":"(fn [set1 set2]\n  (let [all-members (clojure.set/union set1 set2)]\n    (into #{} (filter #(and (contains? set1 %) (contains? set2 %)) all-members))))","user":"5271605ae4b03e8d9a4a73ed"},{"problem":81,"code":"(fn [s1 s2]\n  (set\n    (loop [accum '()\n           s1seq  s1]\n      (if (empty? s1seq)\n        accum\n        (recur\n          (if (contains? s2 (first s1seq))\n            (cons (first s1seq) accum)\n            accum)\n          (rest s1seq))))))","user":"590b055ae4b047aa04b199c9"},{"code":"(fn [a b]\n  (let [f (fn [s r]\n    (if (= [] s)\n        r\n      (let [i (first s) l (rest s)]\n        (if (and (.contains a i) (.contains b i))\n            (recur l (conj r i))\n          (recur l r)))))]\n  (set (concat (f a []) (f b [])))))","problem":81,"user":"507fbd77e4b089ade05efbd3"},{"code":"(fn [s1 s2]\n  (apply hash-set (filter (partial contains? s1) s2)))","problem":81,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn[x y] (set (filter #(contains? y %1) x)))","problem":81,"user":"525cc912e4b0cb4875a45d48"},{"problem":81,"code":"(fn [ a b]\n  (into #{}\n   (filter #(contains? b %) a)))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn\n  [s1 s2]\n  (let [v1 (first (filter #(not (s2 %)) s1))]\n    (if (= nil v1)\n      s1\n      (recur (disj s1 v1) s2))))","problem":81,"user":"504e12ade4b078edc5f593b7"},{"problem":81,"code":"#(set (filter (fn [x] (true? (contains? %1 x))) (seq %2)))","user":"4f03e60d535dcb61093f6b7a"},{"problem":81,"code":"(fn [s1 s2]\n        (->> s1\n             (filter s2)\n             (set)))","user":"546c4377e4b00cfc9eacc177"},{"problem":81,"code":"(fn [a b]\n          (->> a\n               (map b)\n               (remove nil?)\n               (into #{})))","user":"5beda647e4b0a6d31fed2122"},{"problem":81,"code":"(fn [s1 s2] \n  (if (< (count s2) (count s1)) \n    (recur s2 s1) \n    (reduce (fn [result item] \n              (if (contains? s2 item) \n                result \n                (disj result item)\n                )\n              ) \n            s1 s1)\n    )\n  )","user":"57750460e4b0979f8965160c"},{"code":"(fn i [s t]\n  (apply hash-set\n    (remove nil? (map #(and (s %) (t %)) (into s t)))))","problem":81,"user":"50464831e4b011c5dfee771f"},{"problem":81,"code":"#(set (for [x %1\n            y %2\n            :when (= x y)]\n     x))","user":"5fb3a096e4b08cb800c85b35"},{"code":"#(set(reduce (fn [intersects each] (if (contains? %2 each) (conj intersects each) intersects)) #{} %))","problem":81,"user":"4f01ff83535dcb61093f6a3a"},{"problem":81,"code":"#(set (filter  %1 %2))","user":"54cad2d5e4b057c6fda3a26c"},{"code":"#(set\n    (keys\n      (filter\n        (fn [h] (> (second h) 1))\n        (frequencies (concat % %2)))))","problem":81,"user":"52c00263e4b07a9af579233f"},{"problem":81,"code":"(fn [set1 set2]\n    (loop [i 0 res #{}]\n      (if (= i (count set1))\n        res\n        (let [el (nth (into '[] set1) i)]\n          (recur (inc i)\n            (if (contains? set2 el) (conj res el) res))))))","user":"53a68c5ae4b0ef122a8689c8"},{"code":"(fn inter [c1 c2]\n  (cond\n   (empty? c1)\n   #{}\n   (not (nil? (get c2 (first c1))))\n   (conj (inter (rest c1) c2) (first c1))\n   :else\n   (inter (rest c1) c2)\n  )\n)","problem":81,"user":"51e1a1fae4b06a68e693eaf6"},{"problem":81,"code":"#(into #{} (filter (complement (clojure.set/difference % %2)) %))","user":"553093bee4b076ab5578f817"},{"problem":81,"code":"(fn [a b]\n    (loop [la a\n           c #{}]\n      (if (empty? la) c\n          (if (b (first la))\n            (recur (rest la) (conj c (first la)))\n            (recur (rest la) c)))))","user":"5866b999e4b0f14aab7c886b"},{"code":"#(set (for [a %1 :when (%2 a)] a))","problem":81,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":81,"code":"#_#(set (remove nil? (map %1 %2)))\n(comp set filter)","user":"5d24e49be4b02ea6f0fb6a2a"},{"code":"(fn [col1 col2] (set (filter #(some (partial = %) col2) col1)))","problem":81,"user":"4ed27f9f535d44c135fd68d5"},{"code":"(\n    fn [a b]\n\n        (set (filter #(if (contains? b %) true false) a))\n)","problem":81,"user":"4e78dc98535db95036265724"},{"code":"(fn [setA setB] (let [ls (flatten (merge (into [] setA) (into [] setB)))]\n                  (into #{} (map key (remove (comp #{1} val) (frequencies ls))))))","problem":81,"user":"5301157ae4b0d8b024fd3717"},{"problem":81,"code":"#(set (for [x %\n        y %2\n        :when (= x y)] x))","user":"5eb741e4e4b00a66d4a9523b"},{"problem":81,"code":"(fn intersec [s1 s2]\n  (set (filter (partial contains? s2) s1)))","user":"55170dd9e4b06a49daca83bd"},{"code":"(fn [a b]\n  (into #{}\n        (for [x a y b :when (= x y)] \n      \t\tx)))","problem":81,"user":"51eec1a6e4b0871fa145d98d"},{"problem":81,"code":"(fn [fst sec] (set (filter #(contains? fst %) sec)))","user":"59dd38a8e4b0a0ac046f2503"},{"code":"(fn [r1 r2]\n  (into #{} (filter r1 r2)))","problem":81,"user":"4e8338d6535db62dc21a62d3"},{"code":"(fn [a b]\n  (loop [s (seq a) r #{}]\n    (cond\n      (empty? s)\n        r\n      (contains? b (first s))\n        (recur (rest s) (conj r (first s)))\n      true\n        (recur (rest s) r))))","problem":81,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"(fn [a b]\n (set\n  (concat (filter #(contains? a %) b)\n      \t  (filter #(contains? b %) a))))","problem":81,"user":"4f9c4080e4b0dcca54ed6d1a"},{"problem":81,"code":"(fn [x y] (clojure.set/difference \n           (clojure.set/union x y) (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x))))","user":"56491d05e4b0284900eef63a"},{"code":"(fn inter\r\n  ([a b]\r\n     (inter a b #{}))\r\n  ([a b s]\r\n     (if (empty? a)\r\n       s\r\n       (if (contains? b (first a)) (inter (disj a (first a)) b (conj s (first a))) (inter (disj a (first a)) b s)))))","problem":81,"user":"4f17ab99535d64f603146457"},{"code":"(fn myIntersection \n     ([x y z]\n         (if (or (empty? x) (empty? y))\n             z\n         (myIntersection (disj x (first x))\n                         y \n                         (if (contains? y (first x))\n                             (conj z (first x))\n                         z))))\n    ([x y] (myIntersection x y #{})))","problem":81,"user":"4f03b3fb535dcb61093f6b52"},{"code":"(fn [s1 s2]\n      (reduce #(if (contains? s2 %2)\n                 (conj % %2)\n                 %)\n              #{}\n              s1))","problem":81,"user":"4fa3c137e4b081705acca193"},{"code":"(fn inters [x,y] (if (empty? x) #{} (let [z (first x)]\n                                      (if (contains? y z)\n                                            (conj (inters (rest x) y)\n                                                z)\n                                            (inters (rest x) y)))))","problem":81,"user":"4f84f6c3e4b033992c121c3d"},{"problem":81,"code":"(fn [xs ys] (into #{} (filter #(xs %) ys)))","user":"55f3802be4b06e875b46ce5f"},{"code":"#(into #{} (map first (filter (fn [[a b]] (= 2 b)) (frequencies (concat % %2)))))","problem":81,"user":"4ee6400c535d93acb0a6685b"},{"problem":81,"code":"(fn inter [a, b] (set (for [x a :when (contains? b x)] x)))","user":"57c3451fe4b05aa3c4741cbd"},{"problem":81,"code":"(fn \n  [a b]\n  (loop [set-a a\n         set-b b\n         res   #{}]\n    (if (empty? set-a)\n      res\n      (if (contains? set-b (first set-a))\n        (recur (rest set-a) set-b (conj res (first set-a)))\n        (recur (rest set-a) set-b res)))))","user":"5be9ad9be4b0f319e2d7ec76"},{"problem":81,"code":"#(reduce (fn [res x]\n  (if (%1 x) (conj res x) res)) #{} %2)","user":"5a1c3c11e4b0ff51aa4b323d"},{"code":"(fn [xs ys]\n  (reduce #(if (contains? ys %2) (conj %1 %2) %1) #{} xs))","problem":81,"user":"4e691c79535d8ccf87e9fe97"},{"problem":81,"code":"(fn intersct [a b]\n  (loop [rem a\n         res #{}]\n    (if (empty? rem)\n      res\n      (if (contains? b (first rem))\n        (recur (rest rem) (conj res (first rem)))\n        (recur (rest rem) res))\n      )\n    ))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":81,"code":"#(loop [a (apply sorted-set %1) \n        b (apply sorted-set %2) \n        res #{}]\n  (if (and a b)\n  \t(cond\n    \t(= (first a) (first b)) (recur (next a) (next b) (conj res (first a)))\n        (get b (first a)) (recur a (next b) res)\n        :else (recur (next a) b res))\n    res))","user":"503f923fe4b00d1a725ff2ad"},{"problem":81,"code":"(fn intersect [x y]\n  (cond\n   (empty? x) #{}\n   (contains? y (first x)) (conj (intersect (rest x) y) (first x))\n   :else (intersect (rest x) y)))","user":"5e18c885e4b0dc95940084fc"},{"problem":81,"code":"(fn [x y]\n  (set (for [x1 x y1 y :when (= x1 y1)] x1)))","user":"4e7e032b535db169f9c796fc"},{"code":"(fn intersect [s1 s2]\n    (->> \n        s1\n        (filter s2)\n        set))","problem":81,"user":"5268eb68e4b03e8d9a4a71c6"},{"code":"(fn [& ss] \n  (->> ss\n   (apply concat) \n   (group-by identity) \n   (filter #(-> % val count (> 1)))\n   keys\n   (into #{})))","problem":81,"user":"4ef9c8f9535dced4c769f26b"},{"problem":81,"code":"#(reduce (fn [a c]\n            (if (contains? (clojure.set/union \n                            (clojure.set/difference %1 %2)\n                            (clojure.set/difference %2 %1)) c) \n              a \n              (conj a c)))\n         #{}\n         (clojure.set/union %1 %2))","user":"54fce8bde4b07d26eda61d30"},{"problem":81,"code":"(fn [a b] (set (map #(first %)\n                     (filter (fn [[x y]] (= x y))\n                             (for [i a\n                                   j b]\n                               [i j])))))","user":"5992dc6ae4b0866487ed0d7d"},{"code":"(fn [a b] (set (filter #(b %1) a)))","problem":81,"user":"4f32a7f1e4b0d6649770a095"},{"problem":81,"code":"(fn [coll1 coll2]\n  (loop [result #{}\n         c coll1]\n    (println c)\n    (if (empty? c)\n      result\n      (recur (if (contains? coll2 (first c))\n               (conj result (first c))\n               result)\n             (rest c)))))","user":"5541fa50e4b0a04f79299515"},{"problem":81,"code":"(fn [c1 c2] (set (filter #(and (contains? c1 %) (contains? c2 %)) c1)))","user":"602d5eade4b0d5df2af22279"},{"problem":81,"code":"#(into #{} (for [s1 %1\n                 s2 %2\n                 :when (= s1 s2)]\n             s1))","user":"6026737ee4b0d5df2af2222f"},{"problem":81,"code":"#(set (for [x % :when (contains? %2 x)] x ))","user":"5464a536e4b01be26fd746cf"},{"code":"#(set (filter \n  (fn [x] \n    (contains? %2 x))\n  %1))","problem":81,"user":"4f1e4ab5535d64f603146496"},{"problem":81,"code":"(fn [s1 s2]\n  (set (mapcat #(if (contains? s1 %1) #{%1}) s2)))","user":"53dadf1de4b0e771c30254ad"},{"problem":81,"code":"#(let [\n       diff clojure.set/difference\n       union clojure.set/union\n       ]\n  (diff (union %1 %2) (union (diff %1 %2) (diff %2 %1))))","user":"553e0b70e4b0a04f792994e8"},{"problem":81,"code":"(fn [s1 s2]\n  (apply sorted-set (filter (fn [x] (contains? s2 x)) s1))\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"problem":81,"code":"(fn [s1 s2] (set (filter (fn [x] (contains? s2 x)) s1)))","user":"5d4f21f3e4b0776584bd6f4e"},{"code":"(fn [a b] (reduce #(if (contains? b %2) (set (cons %2 %1)) %1) #{} a))","problem":81,"user":"50921f9ae4b09a7d0b586de1"},{"problem":81,"code":"#(set (filter (comp not nil?) (map %1 (vec %2))))","user":"56aed78fe4b03c432f187363"},{"code":"#(let [set2-coll (seq %2)\n  diff1 (apply disj (cons % set2-coll))]\n    (apply disj (cons % diff1)))","problem":81,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":81,"code":"(fn [l1 l2] (set (remove (fn [x] (not (contains? l1 x))) l2)))","user":"58cf8f97e4b03c36ff7e58b7"},{"problem":81,"code":"(fn myf3\n  [h & s]\n  (if (or (empty? h) (empty? s))\n    h\n    (apply (partial myf3 (into #{} (filter h (first s)))) (rest s))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":81,"code":"(fn set-intersection[s1 s2]\n  (reduce #(if (contains? s2 %2) (conj %1 %2) %1) #{} s1)\n  )","user":"525d44bfe4b0cb4875a45d6d"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [s1 set1\n         s2 set2\n         newSet #{}]\n    (if (empty? s1)\n      (reduce conj (sorted-set) newSet)\n      (if (some #(= (first s1) %) s2)\n        (recur (rest s1) s2 (conj newSet (first s1)))\n        (recur (rest s1) s2 newSet)))))","user":"560a7775e4b05f002753defa"},{"code":"(comp set\n      (partial keep identity)\n      (partial map #(if (> (val %) 1) (key %)))\n      frequencies\n      concat)","problem":81,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"(fn inter [x y] (set (filter #(contains? x %1) y)))","problem":81,"user":"4ebbf772535dfed6da9c6d76"},{"problem":81,"code":"(fn [a b] (set (flatten (for [ax a] (filter #(= ax %) b)))))","user":"5078dedae4b08327cd804a5d"},{"problem":81,"code":"(fn [A B] (set (filter #(contains? B %1) A)))","user":"573d8658e4b05c31a32c0814"},{"problem":81,"code":"(fn set-intersection [x y] (into #{} (remove nil? (map #(y %) x))))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"code":"#(reduce (fn [S a] (if (%2 a) (conj S a) S))\n         #{} %1)","problem":81,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"(fn intsect [s t]\n  (if (empty? s) \n    #{}\n    (if (contains? t (first s))\n      (conj (intsect (rest s) t) (first s))\n      (intsect (rest s) t))))","problem":81,"user":"52d660eae4b09f7907dd1356"},{"problem":81,"code":"(fn [s1 s2]\n  (set (for [x s1\n               y s2\n               :when (= x y)]\n           x)))","user":"5637557ce4b0bfe05bf117d4"},{"problem":81,"code":"(fn int1 [s1 s2]\n  (reduce\n   (fn [acc i1] (let [in2 (s2 i1)] (if in2\n                                     (conj acc in2)\n                                     acc)))\n   #{}\n   s1))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":81,"code":"(fn [c1 c2] (set (map first (filter #(> (second %) 1) (frequencies (mapcat vector c1 c2))))))","user":"53a2a259e4b0f1fc7453882c"},{"problem":81,"code":"(fn f\n  [a b]\n  (if (> (count b) (count a))\n    (f b a)\n    (loop [a a b b s {}]\n      (if (empty? a)\n        (set s)\n        (if (contains? b (first a))\n          (recur (rest a) b (cons (first a) s))\n          (recur (rest a) b s))))))","user":"56df632ce4b0ca2494a095f2"},{"code":"(fn [s t]\n  (set (filter s t)))","problem":81,"user":"4e860e85535db62dc21a62f1"},{"problem":81,"code":"(fn [a b] (set (remove nil? (map #(if (contains? b %) %) a))))","user":"545d5c3be4b01be26fd7466d"},{"code":"(fn [x,y] (set (filter #(and (contains? x %) (contains? y %)) (concat x y))   ))","problem":81,"user":"4ec0c7ba535dfed6da9c6da4"},{"problem":81,"code":"#(set (remove nil? (for [x %1 y %2] (if (= x y) x))))","user":"526759b3e4b03e8d9a4a715b"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n  (set (filter s1 s2)))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn [x y] (into #{} (filter #(contains? y %) x)))","problem":81,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn [x y] (reduce #(if (contains? x %2) (conj %1 %2) %1) #{}  y))","problem":81,"user":"4f1b92d1535d64f60314647b"},{"code":"#(let [u (clojure.set/union % %2)]\n  (clojure.set/difference u (clojure.set/union\n      (clojure.set/difference u %)\n      (clojure.set/difference u %2))))","problem":81,"user":"524dd1c3e4b0f245900d275c"},{"code":"(fn f [l1 l2]\n  (loop [res #{}\n         x1 (first l1)\n         r1 (rest l1)]\n    (cond\n     (nil? x1) res\n     (nil? (get l2 x1)) (recur res (first r1) (rest r1))\n     true (recur (conj res x1) (first r1) (rest r1)))))","problem":81,"user":"52d7b0ade4b09f7907dd137c"},{"code":"(fn [x y] (clojure.set/difference (clojure.set/difference (clojure.set/union x y)\n                                (clojure.set/difference x y)) (clojure.set/difference y x)))","problem":81,"user":"4f9754d4e4b0dcca54ed6ce9"},{"code":"(fn eighty-one\n  [& xs]\n  (into #{} (filter (fn [elem]\n             (every? (fn [coll] (contains? coll elem)) xs))\n           (apply clojure.set/union xs))))","problem":81,"user":"510591dde4b06d28cacc92eb"},{"code":"(fn [s1 s2] (reduce #(if (s1 %2) (conj %1 %2) %1) #{} s2))","problem":81,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":81,"code":"(fn [a b]\n  (into (empty a) (filter #(contains? b %) a)))","user":"5192dd39e4b0c663c5d86c9e"},{"problem":81,"code":"(fn [x1 x2]\n  (set (filter x1 x2)))","user":"5785de4ce4b0ebec4cfb74e6"},{"problem":81,"code":"(fn [x y] \n      (apply sorted-set \n             (map first \n                  (filter #(< 1 (val %)) \n                          (frequencies (concat x y))))))","user":"54b67463e4b05787c3b163bc"},{"code":"(fn [s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n  \t     result\n                     (disj result item)))\n\t       s1 s1)))","problem":81,"user":"4e6defcc535d5021c1a895f8"},{"problem":81,"code":"(fn isec [set1 set2] \n\n  (set (filter #(and (contains? set1 %) (contains? set2 %)) (clojure.set/union set1 set2)))\n  \n)","user":"54a7d707e4b09f271ff37c9b"},{"problem":81,"code":"(fn [s1 s2] (set(filter s1 s2)))","user":"5505d137e4b086ebe8a79c8c"},{"code":"(fn [s1 s2]\n  (reduce #(if (s2 %2)\n               (conj %1 %2)\n                %1) #{} s1))","problem":81,"user":"4ec21058535dfed6da9c6dba"},{"code":"#(reduce (fn [res s] (into #{} (filter s res))) %&)","problem":81,"user":"52d0902ee4b07d0d72b273bd"},{"code":"(fn i\n    ([a] a)\n    ([a b]\n       (reduce\n         #(if (a %2)\n            (conj %1 %2)\n            %1)\n         #{}\n         b))\n    ([a b & r]\n     (apply i (cons (i a b) r))))","problem":81,"user":"50e5bca5e4b09ae9427b0e75"},{"code":"(fn[x1 x2] (reduce #(disj % (if (contains? x1 %2) \"#+\" %2)) x2 x2))","problem":81,"user":"5036eba7e4b0af0658af77a5"},{"code":"(fn [s1 s2]\n\t(into #{} (filter #(contains? s2 %) s1))\n)","problem":81,"user":"525ba7bbe4b0cb4875a45d28"},{"code":"#(reduce (fn [s x] (if (%2 x) (conj s x) s)) #{} %)","problem":81,"user":"4ec5d40d535d6d7199dd36b9"},{"code":"#(into #{} (for [i % :when (%2 i)] i))","problem":81,"user":"504f865ee4b0a02f9cffde90"},{"problem":81,"code":"(fn [a b]\n  (set (filter #(a %) b))\n  )","user":"55ec04c4e4b0121d4835fdc1"},{"code":"(fn [a b] \n  (set (filter \n     ;(fn [x] (b x))   \n     b   \n  a))\n)","problem":81,"user":"533ea7e8e4b085b17e897d94"},{"code":"(fn intersect [sa sb]\n    (loop [sa sa\n           acc #{}]\n      (if (empty? sa)\n        acc\n        (if (contains? sb (first sa))\n          (recur (rest sa) (conj acc (first sa)))\n          (recur (rest sa) acc)))))","problem":81,"user":"515ef58be4b02c55805ea237"},{"code":"(fn [xs ys]\n    (into #{} (filter #(contains? ys %) xs)))","problem":81,"user":"515cf9b5e4b00901442db1d4"},{"code":"(fn my-intersect [setA setB]\n      (let [[& collA] setA [& collB] setB totalColl (concat collA collB)]\n        (set\n          (filter\n            #(and\n                 (contains? setA %)\n                 (contains? setB %)\n               )\n            totalColl\n            )\n      ;    totalColl\n          )\n        )\n      )","problem":81,"user":"536827f1e4b0243289761e8a"},{"problem":81,"code":";#(clojure.set/difference(clojure.set/union % %2)\n;(clojure.set/union(clojure.set/difference % %2)(clojure.set/difference %2 %)))\n\n#(clojure.set/difference % (clojure.set/difference % %2))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":81,"code":"(fn [s1 s2]\n  (clojure.set/select (fn [item]\n    (contains? s2 item)) s1))","user":"5a932f63e4b0d174b936c71b"},{"code":"(fn [a b] \n   (set (filter #(contains? b %) a)))","problem":81,"user":"4ffa8affe4b0678c553fc3bd"},{"code":"#(apply hash-set (filter (fn [x] (contains? %1 x)) %2))","problem":81,"user":"5238ca2de4b0d705d026eef6"},{"code":"(fn inter\n  [x y]\n  (reduce (fn [s i] (if (contains? y i) (conj s i) s)) #{} x))","problem":81,"user":"535920b2e4b04ce2eb3ed294"},{"problem":81,"code":"(fn my-intersection\n  [l1 l2]\n  (set (for [x l1 :when (contains? l2 x)] x))\n)","user":"5c3440fee4b0d62ef62d9f50"},{"problem":81,"code":"(fn doset [a b] (set (filter #(a %) b)))","user":"5c51c930e4b0fb8c5ffd99ce"},{"problem":81,"code":"(fn [a b]\n  (into #{} (for [x a :when (b x)] x)))","user":"56ef077ae4b04a395b9a0459"},{"problem":81,"code":"(fn [x y] (set (filterv #(and (contains? x %) (contains? y %)) (into x y) )))","user":"58524875e4b0b7285a6f4ead"},{"code":"(fn [a b]\n  (set (filter #(and (contains? a %) (contains? b %)) a)))","problem":81,"user":"52091d57e4b0e152394d76f0"},{"code":"(fn [x y]\n  (set (mapcat (fn [elem] (if (contains? y elem) #{elem} nil)) x))\n  )","problem":81,"user":"4edf95a8535d10e5ff6f5342"},{"code":"(fn [s1 s2]\n  (into #{} (filter s1 s2)))","problem":81,"user":"511d6a01e4b022853b0e07a5"},{"problem":81,"code":"(fn [x y] \n    (reduce \n      (fn [intersct newitem]\n        (if (contains? x newitem)\n          (conj intersct newitem)\n          intersct))\n      #{}\n      y))","user":"54d9366ce4b0a52adc2e204e"},{"code":"(fn [list1 list2]\n  (set (filter identity (map #(when (contains? list2 %) %) list1))))","problem":81,"user":"4ec12516535dfed6da9c6da7"},{"code":"(fn [a b]\n  (clojure.set/difference a\n    (clojure.set/difference a b)))","problem":81,"user":"5097b556e4b00ad8bab4e970"},{"problem":81,"code":"#(->> (concat %1 %2)\n      sort\n      (partition-by identity)\n      (map second)\n      (remove nil?)\n      set)","user":"54e2a779e4b024c67c0cf7d3"},{"problem":81,"code":"(fn set-intersection [a b]\n  (set (remove nil? (map (fn [x y] (when (b x) x)) a b))))","user":"5972fcf6e4b01722bebd4c92"},{"problem":81,"code":"(fn [a b] (set (remove nil? (for [x a] (get b x)))))","user":"570e40b8e4b0b0fb43fd06ea"},{"problem":81,"code":"(fn [a b]\n  (->> (clojure.set/union a b)\n       (filter #(and (contains? a %) (contains? b %)))\n       (set)))","user":"5b58d012e4b02d533a91bd71"},{"problem":81,"code":"(fn [coll col2] (set (filter #(coll %) col2)))","user":"5a135573e4b0ff51aa4b3180"},{"problem":81,"code":"(fn intersect\n  ([s1] s1)\n  ([s1 s2]\n   (if (< (count s2) (count s1))\n     (recur s2 s1)\n     (reduce (fn [result item]\n               (if (contains? s2 item)\n                 result\n                 (disj result item)))\n             s1 s1))))","user":"54b5ce67e4b05787c3b163ac"},{"problem":81,"code":";;(fn [sa sb]\n;;  (let [\n;;        dab (clojure.set/difference sa sb)\n;;        i (clojure.set/difference sa dab)\n;;        ]\n;;    i))\n\n  \n \n;;  #(clojure.set/difference %1 (clojure.set/difference %1 %2))\n\n;;#(set (filter %1 %2))\n\n(comp set filter)","user":"5edb07dde4b0c7845d86b0ed"},{"problem":81,"code":"(fn [a b] (reduce disj a (reduce disj a b)))","user":"58f98231e4b0438e51c2cf4c"},{"code":"#(clojure.set/difference\n  (clojure.set/union % %2)\n  (clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %)))","problem":81,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":81,"code":"#(into #{} (remove (complement %) %2))","user":"56b2573ce4b0982f16b37e02"},{"problem":81,"code":"(fn [seta setb] (set (keep #(seta %) setb)))","user":"57625c18e4b0994c1922fba4"},{"problem":81,"code":"#(set (for [c1 %1 c2 %2 :when (= c1 c2)] c1))","user":"545537c1e4b0e397800069dd"},{"code":"(fn my-intersect \n  [a b]\n  (set (filter (partial contains? a) b)))","problem":81,"user":"536aa86de4b0243289761eb1"},{"problem":81,"code":"(fn[a b] (clojure.set/difference a (clojure.set/difference a b)))","user":"585481e0e4b07779d46863fe"},{"code":"#(set (remove nil? (into (map % %2) (map %2 %))))","problem":81,"user":"4e77c1db535d324fb2983d72"},{"code":"(fn [x y] (apply hash-set (filter (partial contains? y) x)))","problem":81,"user":"5217c26fe4b0a4bccb16cab8"},{"problem":81,"code":"(fn [s1 s2]\n\t(into #{} \n\t\t(filter #(contains? s1 %) s2)\n\t)\t\n )","user":"5559b443e4b0deb715856e3c"},{"code":"(fn [set1 set2]\n  (let [diff (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1))]\n       (clojure.set/union (clojure.set/difference set1 diff) (clojure.set/difference set2 diff))\n       )\n     )","problem":81,"user":"51377188e4b04059df19f303"},{"problem":81,"code":"(fn [s1 s2]\n  (set \n    (for [e s1\n          :when (contains? s2 e) ]\n      e)))","user":"54d4bd2be4b0a52adc2e2005"},{"problem":81,"code":"#(reduce (fn [acc elem] (if (contains? %2 elem) (conj acc elem) acc)) #{} %1)","user":"5a3ece62e4b0447ef91cc5b9"},{"code":"(fn intersection1 [x y]\n  (when (seq x)\n    (disj (set (cons (some #{(first x)} y) (intersection1 (rest x) y))) nil)))","problem":81,"user":"51f82769e4b09be9c177e527"},{"problem":81,"code":"(fn [coll1 coll2]\n  (into #{} \n        (filter \n           (complement nil?) \n           (map #(some coll2 (list %)) coll1))))","user":"585a7cb2e4b0f14aab7c874e"},{"code":"(fn [x y] (into #{} (map first\n  (filter #(= 2 (count %)) (vals \n                              (group-by identity \n                                  (concat \n                                      (into '() x) (into '() y))))))))","problem":81,"user":"506b437de4b0eda3100c0906"},{"problem":81,"code":"(fn [x y]\n  (apply disj x (apply disj x y)))","user":"57fc5e42e4b0d3187e900997"},{"problem":81,"code":"(fn setIntersection\n  [lista1 lista2]\n  (set (map first (filter #(= 2 (count %)) (partition-by identity (sort (interleave lista1 lista2)))))))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":81,"code":"(fn [a-set b-set] (set (filter b-set a-set)))","user":"53de622ce4b0d874e779ae34"},{"problem":81,"code":"(fn [x, y]\n\t(let [my-intersect (fn [a b]\n    \t                 (reduce (fn [r k]\n    \t\t      \t\t \t(if (contains? a k)\n  \t\t\t\t\t\t\t\t(conj r k)\n  \t\t\t\t\t\t\t\tr))\n        \t\t\t\t\t#{}\n        \t\t\t\t\tb))]\n      (if (> (count x) (count y))\n    \t(my-intersect y x)\n    \t(my-intersect x y))))","user":"5989e080e4b021a7a535fed6"},{"problem":81,"code":"(fn [a b]\n  (set (filter #(b %) (set (filter #(a %) b))))\n)","user":"57873017e4b0ebec4cfb7503"},{"problem":81,"code":"(fn \n  [x y]\n  (set (filter x y))\n  )","user":"57f81532e4b0d3187e900914"},{"problem":81,"code":"(fn [A B]\n  (clojure.set/difference A (clojure.set/difference A B)))","user":"560d4994e4b05f002753df3c"},{"problem":81,"code":"(fn [x y] (reduce conj #{} (filter #(contains? x %) y)))","user":"59234753e4b0a390037439ef"},{"code":"(fn [a b] (set (for [x a :when (contains? b x)] x)))","problem":81,"user":"4f0cc259535d0136e6c22310"},{"code":"(fn [s1 s2]\n  (clojure.set/difference\n    (clojure.set/union s1 s2)\n    (clojure.set/union\n      (clojure.set/difference s1 s2)\n      (clojure.set/difference s2 s1))))","problem":81,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn inter [s1 s2]\n   (into #{} (map first (for [x s1, y s2 :when (= x y)] [x y]))))","problem":81,"user":"52cf084ce4b07d0d72b27399"},{"problem":81,"code":"(fn [s1 s2] (reduce (fn [s x] (if (s2 x) (conj s x) s)) #{} s1))","user":"54a1f494e4b09f271ff37c52"},{"problem":81,"code":"(fn [s1 s2]\n    (let [u (clojure.set/union s1 s2)\n          d (clojure.set/difference u s1)]\n      (clojure.set/difference s2 d)))","user":"559a9a3de4b066d22e731f45"},{"problem":81,"code":"(fn inter\n  [set1 set2]\n  (set (filter #(contains? set2 %) set1)))","user":"5f724f55e4b02876ed9fd089"},{"problem":81,"code":"(fn h [a  b]\n  (reduce #(if (nil? (a %2)) \n             %1\n             (conj %1 (a %2)))\n          #{}\n          b))","user":"5829d588e4b051871117bf4a"},{"code":"(fn my-intersection [a b]\n  (if (empty? a)\n    #{}\n    (let [result (my-intersection (rest a) b)\n          item (first a)]\n      (if (contains? b item)\n        (conj result item)\n        result))))","problem":81,"user":"50d86fe2e4b01f0871336e67"},{"problem":81,"code":"(fn [a b]\n  (reduce (fn [result x]\n            (if (and (a x) (b x))\n              (conj result x)\n              result))\n          #{}\n          (concat a b)))","user":"5112bbdde4b0350614f07a7c"},{"problem":81,"code":"(fn [c1 c2]\n (set (remove nil? (map #(if (contains? c1 %) %) c2))))","user":"56bb652ae4b0f26550335953"},{"code":"(fn [a b]\n  (set (filter (partial contains? b) a)))","problem":81,"user":"4e9c3648535dbda64a6f6b7d"},{"code":"(fn ints2 [& seqs]\n  (let [[a b xs] seqs\n        prev (if (seq? xs) (ints2 b xs) b)]\n    (reduce #(if (contains? a %2) (conj %1 %2) %1)\n            #{} prev)))","problem":81,"user":"4e5f08c7535d8a8b8723a2da"},{"problem":81,"code":"(fn [a b]\n    ((fn helper [s1 s2 r]\n      (if (empty? s1)\n        r\n        (helper (rest s1) s2 (if (contains? s2 (first s1)) (conj r (first s1)) r)))) a b #{}))","user":"60882700e4b0ae75613dcedf"},{"problem":81,"code":"(fn [ xs  ys ]\n  (loop [acc #{} a ys b xs]\n    (if ( empty? b)\n             ; (set acc)\n             acc\n            (recur (if (contains? a (first b))  (conj acc (first b)) acc )\n                    a\n                    (rest b)\n             )\n    )\n  )\n)","user":"55d7312ee4b0e31453f64a9f"},{"problem":81,"code":"(fn [x y] (set (filter #(not= % nil) (map x y))))","user":"57a0f256e4b0c3d858beb8dd"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n\t(reduce #(if (contains? s2 %2) (conj % %2) %) #{} s1))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":81,"code":"(fn [A B]\n  (set (filter #(and (get A %) (get B %)) (clojure.set/union A B))))","user":"54d1b6ffe4b0e8a36923e5e6"},{"code":"(fn [set1 set2]\n  (set\n    (filter #(contains? set2 %) set1)))","problem":81,"user":"4ee3afde535d10e5ff6f5370"},{"code":"(fn [s m]\n  (set (for [e1 s, e2 m :when (and (m e1) (s e2))] e1)))","problem":81,"user":"4e89f9e5535d3e98b8023289"},{"problem":81,"code":"(fn [s1 s2] (into #{} (remove nil? (map s1 s2))))","user":"518ba795e4b0f028e99addf0"},{"problem":81,"code":"(fn [s1 s2]\n  (into #{} (filter (fn [e] (contains? s2 e)) s1)))","user":"540d5085e4b0addc1aec670e"},{"code":"(fn \n  [set1 set2]\n  (into #{} (for [x set1 y set2 :when (= x y)] x)))","problem":81,"user":"5094057fe4b097f48cc38593"},{"problem":81,"code":";input set set\n;output common set\n\n\n\n    \n    \n\n\n(fn [a b] (set (filter #(contains? a %) b)))","user":"582c526ae4b051871117bf88"},{"code":"(fn [a b]\n    (set (for [x a :when (some #{x} b)] x)))","problem":81,"user":"4e3ae7cd535deb9a81d77f4e"},{"problem":81,"code":"(fn my-intersection\n  [s1 s2]\n  (into #{} (filter #(contains? s1 %) s2)))","user":"52561295e4b0541d1855ba03"},{"code":"(fn [a b]\n  (set (filter #(contains? b %) a))\n)","problem":81,"user":"53153466e4b08068f379ed23"},{"code":"(fn [x y]\n   (reduce (fn [a b]\n             (if (contains? x b) (conj a b) a)\n             ) #{} y)\n   )","problem":81,"user":"528ce039e4b0239c8a67aebc"},{"code":"(fn [s1 s2]\n  (set (filter #(some #{%} s2) s1)))","problem":81,"user":"50acbd15e4b071b89ef26234"},{"problem":81,"code":"(fn [a b] (set (filter identity (map b a))))","user":"52b94e26e4b07a9af57922b9"},{"code":"(fn [xs ys] (reduce #(if (contains? xs %2) (conj %1 %2) %1) #{} ys))","problem":81,"user":"52618ea3e4b03e8d9a4a7064"},{"problem":81,"code":"(fn [set-1 set-2]\n  (reduce (fn [acc elt] (if (set-2 elt)\n                          (conj acc elt)\n                          acc))\n          #{}\n          set-1))","user":"5553b924e4b0deb715856e06"},{"problem":81,"code":"(fn solution81\n  [s1 s2]\n  (into (hash-set) (for [x1 s1 x2 s2\n        :when (= x1 x2)]\n    x1)))","user":"595bc925e4b066ee0a44afe2"},{"problem":81,"code":"(fn [s1 s2]\n    (into #{}\n          (filter (fn [x]\n                    (contains? s2 x))\n                  s1)))","user":"56a358d0e4b0542e1f8d14c9"},{"problem":81,"code":"(fn intersct\n  [set_a set_b]\n  (set (reduce #(if (contains? set_b %2) (conj %1 %2) %1) #{} set_a)))","user":"5f6adf5ee4b02876ed9fd049"},{"problem":81,"code":"#(set (filter %1 (vec %2)))","user":"5e9b7aefe4b0157ca96647f1"},{"problem":81,"code":"(fn inters [x y]\n  (set (filter #(and (contains? x %) (contains? y %)) (concat x y))))","user":"597a4277e4b02382a38ad1e2"},{"problem":81,"code":"(fn [x1, x2] \n  (loop [x1Remainder x1\n         output #{}]\n    (if (= (count x1Remainder) 0)\n      output\n      (if (contains? x2 (first x1Remainder))\n        (recur (rest x1Remainder) (conj output (first x1Remainder)))\n        (recur (rest x1Remainder) output)))))","user":"54336443e4b0b6b47310fcde"},{"problem":81,"code":"(fn [a b] (into #{} (filter (complement nil?) (map #(get a %) b))))","user":"56449e4de4b0284900eef5f9"},{"code":"(fn [s1 s2]\n  (into #{} (flatten (map #(filter #{%1} s2) s1))))","problem":81,"user":"4daedd1eedd6309eace4d164"},{"problem":81,"code":"(fn inter\n  [map1 map2]\n  (into #{} (filter map1 map2)))","user":"5d48884ee4b07c84aa5ae6bb"},{"problem":81,"code":"(fn [x y] \n  (set (filter #(contains? x %) y)))","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"code":"#(set(remove nil?(map (fn [x] (if (contains? %2 x) x)) %)))","problem":81,"user":"50503117e4b0a02f9cffdeb5"},{"problem":81,"code":"(fn [xs ys] \n   (set (for [x xs y ys\n              :when (= x y)] x)))","user":"59644d2ae4b069c0a1a19764"},{"code":"(fn [a b]\n  (set\n   (map first\n    (filter (fn [[x y]] (= x y))\n            (for [d a e b] [d e])\n            )\n    )\n   )\n  )","problem":81,"user":"518c5236e4b087e178201de0"},{"problem":81,"code":"(fn [fs ss]\n   (let [un (concat fs ss)]\n     (into #{}\n           (map first \n                (filter #(< 1 (second %))\n                        (frequencies un))))))","user":"52c911dde4b0c2d177d6213a"},{"code":"(fn [s1 s2]\n  (set (for [x s1\n             :let [y x]\n             :when (contains? s2 x)]\n         y)))","problem":81,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn [a b]\n  (set (for [x a :when (contains? b x)] x)))","problem":81,"user":"4fc3a72ae4b081705acca342"},{"problem":81,"code":"(fn [sa sb]\n  (set (filter #(sa %) sb))\n  )","user":"5bbbce60e4b0a20761a2360e"},{"problem":81,"code":"#(reduce\n   (fn [res next]\n     (if (contains? %2 next)\n         (conj res next)\n       res\n       )\n     ) #{} %\n   )","user":"5d5b2678e4b06a698e928ee2"},{"code":"(fn [set1 set2]\n   (set \n     (filter \n       #(contains? set1 %) \n        (seq set2))))","problem":81,"user":"4e6cf521535de274dd8d818b"},{"problem":81,"code":"(fn [s1 s2]\n   (reduce\n     (fn [m e]\n       (if (s2 e)\n         (conj m e)\n         m))\n     #{}\n     s1))","user":"5881d1c2e4b0f1effa3b7644"},{"problem":81,"code":"(fn [s1 s2]\n  (set (for [x s1 :when (contains? s2 x)] x))\n  )","user":"5c6f0755e4b0fca0c162275d"},{"problem":81,"code":"(fn [s1 s2]\n  (set (for [x (concat (into [] s1) (into [] s2)) :when (and (s1 x) (s2 x))] x)))","user":"529f9bf2e4b04e0c58e87bb4"},{"problem":81,"code":"(fn inter [a b]\n  (let [aub (clojure.set/union a b)]\n    (set\n     (filter\n      #(and (a %) (b %))\n      aub))))","user":"5e692be9e4b04a83ad7cd269"},{"problem":81,"code":"(fn [L1 L2]\n  (set (for [X L1 Y L2 :when (= X Y)] X))\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn [a,b]\n  (clojure.set/difference a (clojure.set/difference a b))\n  )","problem":81,"user":"513f53c6e4b051389b345b40"},{"problem":81,"code":"(fn [set1 set2]\n  (reduce \n   (fn [coll x]\n     (if (set1 x)\n       (conj coll (set1 x))\n       coll))\n   #{}\n   set2))","user":"5dcb1e73e4b02b31cc3da3b6"},{"problem":81,"code":"(fn [a b] (apply hash-set (filter #(contains? b %) a))\n  )","user":"56a6051fe4b0542e1f8d14e5"},{"code":"(fn [set1 set2]\n    (into #{} (for [x set1\n            y set2\n            :when (= x y)]\n        x\n      ))\n  )","problem":81,"user":"52430d3ce4b076204b44faa5"},{"code":"(fn my-intersection [coll & colls]                                                                                                           \r\n    (set (filter (fn [x] (every? #(contains? % x) colls)) coll)))","problem":81,"user":"4f149e0f535d64f60314643d"},{"code":"(fn [a b]\n  (set (filter (fn [x] (contains? b x)) a)))","problem":81,"user":"4de52c87535d08e6dec9fdf0"},{"problem":81,"code":"(fn myInter[s1 s2]\n  (set (filter\n    #(contains? s1 %)\n    s2)))","user":"5626447fe4b00e49c7cb47bd"},{"problem":81,"code":"(fn [s1 s2]\n  (set (keys (filter #(> (second %) 1) (frequencies (concat s1 s2))))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":81,"code":"(fn [arr1 arr2]\n  (->> (frequencies (concat arr1 arr2))\n       (filter (fn [freq-arr] (> (last freq-arr) 1)))\n       (map (fn [freq-arr] (first freq-arr)))\n       sort\n       (into #{})))","user":"58b54852e4b0ebc645576d52"},{"code":"(fn[a,b](set(filter(fn[x](contains? b x))a)))","problem":81,"user":"4df1e213535d08e6dec9fe20"},{"code":"(fn [s1 s2] (set (keep #(get s2 %) s1)))","problem":81,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":81,"code":"(fn [s1 s2]\n  (if (< (count s2) (count s1))\n    (recur s2 s1)\n    (reduce (fn [result item]\n              (if (contains? s2 item)\n                result\n                (disj result item))) s1 s1)))","user":"555d4421e4b0a2eb076a39a8"},{"code":"(fn my-intersection [set-a set-b]\n    (set (filter set-b set-a)))","problem":81,"user":"504f57c7e4b0a02f9cffde71"},{"problem":81,"code":"(fn intersection'\n  [x y]\n  (set (filter #(x %) (take (count y) y)) ))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":81,"code":"(fn [lista1 lista2]\n  (let [interseccion (for\n                       [elementoLista1 lista1\n                        elementoLista2 lista2 ;funciona como un for anidado :V\n                        :when (= elementoLista1 elementoLista2) ;cuando se cumple esto, SE HACE LO DEL BODY\n                        ]\n                       elementoLista2 ;BODY --> ESTE ELEMENTO SE AGREGA A LA RESPUESTA :V\n                       )]\n\n(apply sorted-set (set interseccion))))","user":"59e63a2ce4b08badc2a0c569"},{"code":"(fn [s t]\n  (set (distinct (filter #(and (s %) (t %)) (concat s t)))))","problem":81,"user":"4fe9ea87e4b0547ebccb2476"},{"code":"(fn [set1 set2]\n  (into #{}\n        (filter #(set2 %)\n          set1)))","problem":81,"user":"51b86a0fe4b09e0e347b2e78"},{"problem":81,"code":"(fn [col-1 col-2]\n  (into #{}\n        (remove nil?\n                (map #(if (contains? col-1 %) %) col-2))))","user":"5acd08eee4b0e27600da7822"},{"code":"(fn [s1 s2]\n   (reduce #(if (contains? s2 %2)\n              (conj %1 %2)\n              %1\n             ) #{} s1))","problem":81,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":81,"code":"(fn [x y]\n    (into #{} (map first(rest(set(for [lst1 x\n          lst2 y]\n        (if (= lst1 lst2)\n            [lst1 lst2])))))))","user":"5f74de11e4b02876ed9fd0a5"},{"problem":81,"code":"(fn [set1 set2]\n  (reduce #(if (contains? set1 %2) (conj %1 %2) %1) #{} set2))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"(fn [a b] (set (filter #(and (contains? a %) (contains? b %))\n                         (concat a b))))","problem":81,"user":"5370ef22e4b0fc7073fd6ea0"},{"code":"(fn [xs ys] (set (filter #(contains? ys %) xs)))","problem":81,"user":"4fd6f4d8e4b0dab7d829f37b"},{"problem":81,"code":";;Intersection -> means check every element in c1 -> keep the same, throw the different\n(fn [x y] (reduce #(if (contains? x %2) (conj %1 %2) %1) #{}  y))","user":"570794d8e4b0b0fb43fd068b"},{"problem":81,"code":"#(loop [s1 %1 so #{}]\n   (if (empty? s1)\n     so\n     (recur (disj s1 (first s1)) (if (contains? %2 (first s1)) (conj so (first s1)) so))))","user":"5480cce5e4b0e286459a115f"},{"code":"#(set (for [s1 %1\n            s2 %2\n            :when (= s1 s2)]\n        s1))","problem":81,"user":"4dc21233535d020aff1edf92"},{"problem":81,"code":"(fn [ls rs]\n    (->> ls\n         (filter #(contains? rs %))\n         (into #{})))","user":"5501a1e1e4b07d26eda61d75"},{"code":"(fn my-intersection [s1 s2]\r\n   (let [normal-form? (> (count s1) (count s2))\r\n         inp1 (if normal-form?\r\n                s1\r\n                s2)\r\n         inp2 (if normal-form?\r\n                s2\r\n                s1)]\r\n     (loop [k inp1 acc #{}]\r\n       (if (empty? k)\r\n         acc\r\n         (let [found  (get inp2 (first k))]\r\n           (if found\r\n             (recur (rest k) (conj acc found))\r\n             (recur (rest k) acc)))))))","problem":81,"user":"4f629697e4b0defedf855fd6"},{"code":"(fn [a b]\n  (set\n    (filter\n      #(and (contains? a %) (contains? b %))\n      (concat a b))))","problem":81,"user":"4dbdc9da535d020aff1edf4c"},{"problem":81,"code":"(fn [set1 set2]\n  (into (empty set1) (filter #(contains? set2 %) set1)))","user":"566e87cfe4b0a866af6896dc"},{"code":"(fn [s1 s2]\n  (if (< (count s2) (count s1))\n    (recur s2 s1)\n    (reduce (fn [result item]\n              (if (contains? s2 item)\n                result\n                (disj result item)))\n            s1 s1)))","problem":81,"user":"4ebc829e535dfed6da9c6d86"},{"problem":81,"code":"(fn [col1 col2]\n   (let [minCol (if (<= (count col1) (count col2))\n                  col1\n                  col2)\n         maxCol (if (>= (count col1) (count col1))\n                  col2\n                  col1)]\n     (set (filter (fn [value]\n                    ((complement nil?) (maxCol value))\n                    ) minCol))\n     )\n   )","user":"583f1533e4b089d5ab817dc8"},{"problem":81,"code":"(fn [s1 s2]\n   (set (filter #(contains? s2 %) s1)))","user":"6059d9c8e4b07e92fa001ad0"},{"code":"#(set (filter (fn [x] (%2 x)) %))","problem":81,"user":"4e307313535deb9a81d77f14"},{"problem":81,"code":"(fn [a b] (apply hash-set (filter a b)))","user":"585bcd51e4b0f14aab7c8771"},{"problem":81,"code":"(fn [s1 s2] (reduce #(if (contains? s1 %2) (conj %1 %2) %1 ) #{}  s2))","user":"52f0ea04e4b05e3f0be25ee6"},{"problem":81,"code":"(fn [c1 c2]\n  (let [mapper #(some #{%} c1)]\n    (into \n      (sorted-set) (remove nil? (map mapper c2)))))","user":"53383c74e4b0e30313ee6c92"},{"problem":81,"code":"(fn  [a b]\n  (reduce clojure.set/union #{}\n          (map (fn [v] (if (contains? a v) #{v} #{})) b)))","user":"5d67d80be4b0db5d338d15fa"},{"code":"#(set (distinct (flatten (filter (fn [coll] (> (count coll) 1)) (partition-by identity (sort (concat % %2)))))))","problem":81,"user":"52029e5de4b030ee0c5b26fc"},{"problem":81,"code":"(fn [c1 c2]\n    (into #{}\n          (filter (fn [x]\n                    (and (c1 x)\n                         (c2 x)))\n                  (concat c1 c2))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn [s1 s2] (set (for [x s1 :when (s2 x)] x)))","problem":81,"user":"5233ad08e4b07e3ee2be83ac"},{"code":"(fn [a b]\r\n    (set (filter #(contains? b %) a)))","problem":81,"user":"4f047177535dcb61093f6bc6"},{"problem":81,"code":"(fn [x y] (set (remove (fn [a] (not (contains? x a))) y)))","user":"53b15e6ee4b047364c04448f"},{"code":"(fn [set1 set2] \n  (reduce (fn [x y] (if (contains? set2 y) (conj x y) x)) \n          #{} \n          set1))","problem":81,"user":"5162757ee4b03cfa3774b3fe"},{"problem":81,"code":"(fn [a b]\n  (set (for [x a y b :when (= x y)] x)))","user":"55164856e4b06a49daca83b3"},{"code":"(fn set-intersection [set1 set2]\n  (set (for [u set1 v set2 :when (= u v)] u)))","problem":81,"user":"527a69cee4b03e8d9a4a755d"},{"problem":81,"code":"(fn intersect\n  ([s1 s2] (intersect s1 s2 #{}))\n  ([s1 s2 s3] \n    (if (not (empty? s1))\n      (if (contains? s2 (first s1))\n         (recur (rest s1) s2 (conj s3 (first s1)))\n         (recur (rest s1) s2 s3))\n      s3)))","user":"53b85932e4b047364c0444db"},{"code":"(fn [x y] (into #{} (apply concat (map #(filter (fn[b] (= % b)) y) x ))))","problem":81,"user":"52265e41e4b04e78ff2e1981"},{"problem":81,"code":"(fn [a b] (into #{} (filter #(contains? a %1) b)))","user":"55b6a63ae4b01b9910ae299b"},{"code":"(fn [s1 s2] \n  (set (filter #(contains? s1 %) s2)))","problem":81,"user":"503255d0e4b0e78df07b092b"},{"problem":81,"code":"(fn [set1 set2] (reduce #(if (contains? set1 %2) (conj %1 %2) %1) #{} set2))","user":"5280a1ece4b0757a1b171407"},{"problem":81,"code":"(fn [a b]\n  (loop [s (seq a)\n         r #{}]\n    (if (seq s)\n      (recur (rest s)\n             (if (b (first s))\n               (conj r (first s))\n               r))\n      r)))","user":"56521a26e4b0f9d632dd845f"},{"code":"(fn [a b] (set (keep #(if (contains? a %) %) b)))","problem":81,"user":"52161db6e4b0bf4bffd29cb8"},{"problem":81,"code":"(fn [set1 set2]\n\t (set (filter #(get set2 %1) set1)) )","user":"5b8aa478e4b0c0b3ffbd49b2"},{"code":"(fn [set1 set2]\n  (clojure.set/difference \n   (clojure.set/union set1 set2) \n   (clojure.set/union (clojure.set/difference set1 set2)\n                      (clojure.set/difference set2 set1))))","problem":81,"user":"525ab6cfe4b0cb4875a45cf9"},{"code":"(fn [s1 s2]\n  (loop [s s1 acc #{}]\n    (cond\n      (empty? s) acc\n      (s2 (first s)) (recur (rest s) (conj acc (first s)))\n      :else (recur (rest s) acc))))","problem":81,"user":"4daf8f84edd6309eace4d17a"},{"problem":81,"code":"#(set (for [x %1\n      y %2\n      :when (= x y)]\n    x))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":81,"code":"(fn [s1 s2] \n  (set\n   (for [x1 s1 \n         x2 s2 \n        :when (= x1 x2)]\n    x1)))","user":"573a0ecce4b0cd1946bd1088"},{"problem":81,"code":"(fn [c1 c2]\n   (set (for [c c1\n         :when (contains? c2 c)]\n     c)))","user":"56c60b36e4b05cc29241eead"},{"problem":81,"code":"(fn intersect [a b]\n  (set (for [i a\n        :when (contains? b i)]\n    i)))","user":"53bd6fcfe4b0d9a98559a6d0"},{"problem":81,"code":"(fn [a b] (clojure.set/difference\n           (clojure.set/union a b) \n           (clojure.set/union\n            (clojure.set/difference a b)\n            (clojure.set/difference b a))))","user":"5980f91ae4b021a7a535fddd"},{"problem":81,"code":"(fn [set1 set2]\n  (into #{}\n       (filter #(contains? set2 %)\n               set1))\n)","user":"5d07989ee4b0cc9c915881fb"},{"code":"(fn [xs ys]\n  (set \n    (remove nil?\n      (for [x xs y ys] \n        (when (= x y) x)))))","problem":81,"user":"4dc7e7a5535d8a4b2fd74290"},{"code":"#(loop [a (sort (apply list %1))\n        b (sort (apply list %2))\n        i #{}]\n   (if (or (empty? a) (empty? b))\n     i\n     (if (= (first a) (first b))\n       (recur (rest a) (rest b) (conj i (first a)))\n       (if (> 0 (compare (first a) (first b)))\n         (recur (rest a) b i)\n         (recur a (rest b) i)))))","problem":81,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn [a b]\n   (let [u (clojure.set/union a b)\n         ua (clojure.set/difference u a)\n         ub (clojure.set/difference u b)]\n     (clojure.set/difference u (clojure.set/union ua ub))))","problem":81,"user":"528a791ae4b0239c8a67ae77"},{"code":"(fn [xsa xsb] \n  (set (filter xsb xsa)))","problem":81,"user":"531490bde4b08068f379ed17"},{"problem":81,"code":"(fn [s1 s2] (reduce (fn [m [k v]] (if (< 1 v) (conj m k) m)) #{} (frequencies (mapcat list s1 s2))))","user":"5a5894d9e4b05d388ecb6c81"},{"code":"#(reduce (fn [se el]\n            (if (contains? %1 el)\n              (conj se el)\n              se)) \n          #{} %2)","problem":81,"user":"50d3b03fe4b030b634c368b9"},{"code":"(fn [s1 s2]\n  (if (< (count s2) (count s1))\n   (recur s2 s1)\n   (reduce (fn [result item]\n     (if (contains? s2 item)\n     result\n     (disj result item)))\n     s1 s1)))","problem":81,"user":"51181009e4b0e0897831a60f"},{"code":"#(clojure.set/difference \n  (clojure.set/union % %2) \n  (clojure.set/union \n    (clojure.set/difference % %2) \n    (clojure.set/difference %2 %)))","problem":81,"user":"4ef355e3535dced4c769f228"},{"problem":81,"code":"(fn func [a b]\n  (set (filter #(some #{%} a) b)))","user":"54ae541ae4b09f271ff37cef"},{"code":"(fn inter [x y]\n  (loop [s1 x\n         acc #{}]\n    (if (empty? s1)\n      acc\n      (let [k (first s1)\n            r (rest s1)]\n        (if (contains? y k)\n        \t(recur r\n             (conj acc k))\n        \t(recur r\n                   acc))\n        )\n      )))","problem":81,"user":"522048b3e4b0e6c71e0c0c16"},{"problem":81,"code":"(fn [a b] (set (filter (fn [item] (contains? b item)) (seq a) )))","user":"5cf72682e4b0b71b1d808a68"},{"problem":81,"code":"(fn my-intersect [s-l s-r]\n  (let [seq-r (seq s-r)]\n  (loop [l (seq s-l) acc #{}]\n    (if (or (not l) (not seq-r))\n      acc\n      (let [f-l (first l)]\n        (if (some #{f-l} s-r)\n          (recur (seq (rest l)) (conj acc f-l))\n          (recur (seq (rest l)) acc)))))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":81,"code":"(fn [xs ys] \n  (loop [xs xs\n         ys ys\n         res #{}]\n    (if (seq xs)\n      (if (some #{(first xs)} ys)\n        (recur (rest xs) ys (conj res (first xs)))\n        (recur (rest xs) ys res))\n      res)))","user":"4fec08e8e4b0681fd128dc9d"},{"code":"(fn set-inter [xs ys]\n            (set (for [x xs\n                 :when (and (boolean (get xs x)) (boolean (get ys x)))] x)))","problem":81,"user":"4f748b54e4b044e54cd9a8fa"},{"problem":81,"code":"(fn [set1 set2]\n  (set (filter (fn [elem-set2]\n            (contains? set1 elem-set2)) set2)))","user":"60b8b0f8e4b0e0fa5f1b425c"},{"problem":81,"code":"(fn [set1 set2]\n  (set (filter (fn [set1elem] (some #(= set1elem %) set2)) set1)))","user":"55e274b4e4b050e68259b436"},{"code":"(fn [a b] \n  (loop [x a r #{}]\n    (let [head (first x)] \n      (if \n        (nil? head)\n        (set r)\n        (if \n          (some #{head} b) \n          (recur (rest x) (cons head r))\n          (recur (rest x) r)\n          )))))","problem":81,"user":"50be9b4ae4b00fb48fed2ef6"},{"problem":81,"code":"(fn [col1 col2]\n (apply hash-set (for [x col1 y col2 :when (= x y)]\n   x\n))\n)","user":"5766fbb7e4b0a07e8fc180b6"},{"code":"(fn [a b] (reduce \n    #(if (contains? a %2)\n          (conj % %2) %) #{} b))","problem":81,"user":"4fc6e1a8e4b0ee37620e181d"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [s #{}\n         s1 s1]\n    (if (empty? s1)\n      s\n      (let [x (first s1)]\n        (if (contains? s2 x)\n          (recur (conj s x) (next s1))\n          (recur s (next s1)))))))","user":"55c4b23de4b0e31453f649a3"},{"code":"(fn [set1 set2]\n   (apply hash-set\n          (filter (fn [x]\n                    (contains? set1 x)) set2)))","problem":81,"user":"522d0360e4b0806774ddfef7"},{"code":"(fn x-sect\n  [& sets]\n  (set (reduce #(filter %2 %1) sets)))","problem":81,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":81,"code":"#(let [union clojure.set/union\n      diff clojure.set/difference\n      sym-diff (fn [s t] (union (diff s t) (diff t s)))]\n  (sym-diff (union %1 %2) (sym-diff %1 %2)))","user":"52950ab6e4b02ebb4ef7501a"},{"code":"#(set\n  (for [x %1 y %2 :when (= x y)] x))","problem":81,"user":"4ec60dc4535d6d7199dd36c0"},{"problem":81,"code":"(fn my-intersection [x y] (\n    clojure.set/difference \n        (clojure.set/union x y) \n        (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x))))","user":"5d45bd1de4b07c84aa5ae6a4"},{"problem":81,"code":"(fn [a b] \n   (clojure.set/difference (clojure.set/union a b) (into #{} (concat (clojure.set/difference a b) (clojure.set/difference b a)))))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":81,"code":"(fn [col1 col2]\n  (set (filter #(col1 %) col2)))","user":"5b97c521e4b0c0b3ffbd4a9a"},{"problem":81,"code":"(fn intersect [s1 s2] (set (filter #(contains? s1 %) s2)))","user":"5cb4e764e4b026601754b929"},{"problem":81,"code":"(fn [s1 s2] (into #{} (filter #(not (nil? (s2 %))) s1)))","user":"5ef5ee81e4b07c55ae4a054a"},{"code":"(fn [s1 s2]\n  (reduce #(if (contains? s2 %2) (conj %1 %2) %1) #{} s1))","problem":81,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":81,"code":"(fn [ms ns]\n  (letfn [(go [xs ys is]\n            (if (empty? xs)\n              is\n              (let [x (first xs)\n                    xs' (disj xs x)]\n                (if (contains? ys x)\n                  (go xs' ys (conj is x))\n                  (go xs' ys is)))))]\n    (go ms ns #{})))","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn -intersection [set1 set2]\n  (loop [s1 set1 s2 set2 acc #{}]\n    (if (or (not (seq s1)) (not (seq s2)))\n      acc\n      (recur (set (rest s1))\n             s2\n             (if (contains? s2 (first s1))\n               (conj acc (first s1))\n               acc)))))","problem":81,"user":"5163a7bbe4b055933a9ca02f"},{"problem":81,"code":"#(set (filter (partial contains? %1 ) %2))","user":"5da98129e4b000c986472c33"},{"code":"(fn [a b]\n  (set (filter #(contains? a %) b)))","problem":81,"user":"5154fa3fe4b0179c5115f4e6"},{"code":"(fn [a b]\n  (let [x (apply disj a (into () b))]\n    (apply disj a (into () x))))","problem":81,"user":"4ff304f4e4b0678c553fc343"},{"problem":81,"code":"(fn tmp [a b]\n  (if-not (empty? a)\n    (into #{} (flatten(cons (filter #(= (first a) %) b) (tmp (rest a) b))))))","user":"59b554cee4b05c620303ca0f"},{"problem":81,"code":"(fn f [& s]\n  (into #{} (reduce #(for [i %2\n                 :when (contains? %1 i)]\n             i) s)))","user":"51aefceee4b09397d5109797"},{"code":"(fn  [set1 set2]\n  (let [s1s2 (clojure.set/difference set1 set2)\n        s2s1 (clojure.set/difference set2 set1)\n        unions (clojure.set/union set1 set2)]\n    (clojure.set/difference unions s1s2 s2s1)\n    )\n  )","problem":81,"user":"4ec4d723535dcc7ae8597d65"},{"code":"#(set (map first\n            (for [x % y %2\n              :when (= x y)]\n              [x y])))","problem":81,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn [xs ys] (set (filter #(contains? xs %1) ys)))","problem":81,"user":"4fa6a491e4b081705acca1bc"},{"problem":81,"code":"(fn [a b]\n  (set \n   (filter #(and (contains? a %) (contains? b %)) \n          (set (concat (seq a) (seq b))))))","user":"57bfffc7e4b05aa3c4741c8a"},{"problem":81,"code":"(fn my-intersection [set1 set2]\n  (set\n    (filter #(contains? set2 %)\n            set1)))","user":"56fbcc1fe4b07572ad1a88d5"},{"problem":81,"code":"#(apply sorted-set (remove nil? (map (disj %1) %2)))","user":"561a060ee4b053970a773b01"},{"problem":81,"code":"(fn [& ss]\n  (set\n  (keep\n   #(when (= (count ss) (second %))\n      (first %))\n   (frequencies (apply concat ss)))))","user":"559057c4e4b027778923766e"},{"code":"(fn [a b] (loop [result #{} A a]\n            (if (= 0 (count A)) \n                result\n                (if (contains? b (first A) )\n                    (recur (conj result (first A)) (rest A))\n                    (recur result (rest A))\n                )\n            )\n           )\n)","problem":81,"user":"518aec06e4b06da86c1973c2"},{"code":"(fn [a b]\r\n  (loop [a a b b s #{}]\r\n    (if (seq a)\r\n      (let [x (first a)]\r\n        (if (contains? b x)\r\n          (recur (disj a x) (disj b x) (conj s x))\r\n          (recur (disj a x) b s)))\r\n      s)))","problem":81,"user":"4e02bee8535d04ed9115e791"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [me v]\n            (if (contains? s2 v)\n              (conj me v)\n              me)) #{} s1))","user":"56b6e354e4b0982f16b37e41"},{"problem":81,"code":"(fn [s1 s2] (set (for [x s1 :when (and (s1 x) (s2 x))] x)))","user":"5c7bc0a5e4b0fca0c1622865"},{"code":"(fn\n  [s1 s2]\n  (into #{} (filter s1 s2)))","problem":81,"user":"525fffb8e4b03e8d9a4a702b"},{"problem":81,"code":"(fn [a b]\n    (into #{}  (filter #(contains? a %) b)))","user":"554a75c9e4b0a04f79299575"},{"code":"(fn my-int [a b]\n  (disj (reduce #(conj %1 (get a %2)) #{} b) nil))","problem":81,"user":"5119f3d5e4b06c8af0111818"},{"code":"#(set (filter (fn [x] (some (fn [c] (= c x)) %1)) %2))","problem":81,"user":"4e975bce535dbda64a6f6b53"},{"code":"(letfn [(isect [x y]\n               (into #{} (filter (partial contains? y) x)))]\n  (fn [& args] (reduce isect args)))","problem":81,"user":"515ead6be4b049add99a053e"},{"code":"(fn [x y]\n  (disj (set (map x y)) nil)\n)","problem":81,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"code":"#(clojure.set/difference (clojure.set/union %1 %2) \n                          (clojure.set/union (clojure.set/difference %1 %2) \n                                             (clojure.set/difference %2 %1)))","problem":81,"user":"4e72187b535d5021c1a8965b"},{"problem":81,"code":"(fn [input-a input-b]\n  (loop [items (seq input-a)\n         result #{}]\n    (if (empty? items) result\n      (let [item (first items)]\n        (if (nil? (get input-b item)) (recur (rest items) result)\n            (recur (rest items) (conj result item)))))))","user":"596aaeefe4b069c0a1a19808"},{"code":"(fn [s1 s2] (reduce #(if (contains? s2 %2) (conj %1 %2) %1) #{} s1))","problem":81,"user":"4e6fa38b535d5021c1a89622"},{"code":"(fn my-intersection\n  ([x] x)\n  ([sa sb]\n     (reduce (fn [j k] (if (contains? sb k) (conj j k) j)) #{} sa))\n  ([sa sb & rest]\n     (apply my-intersection (my-intersection sa sb) rest)))","problem":81,"user":"4e7f51eb535db966e863cc3f"},{"problem":81,"code":"(fn [xs ys]\n  (into #{} (concat (filter (partial contains? ys) xs)\n                    (filter (partial contains? xs) ys))))","user":"56ba1406e4b0f2655033593c"},{"code":"#(set (remove nil? (for [x %1] (%2 x))))","problem":81,"user":"4e6a6be7535d8ccf87e9fee1"},{"code":"(fn [xs & more]\n  (loop [ x xs m more ]\n    (if (empty? m)\n      x\n      (let [adv (#(set (for [x %1 y %2 :when (= x y)] x)) x (first m))]\n        (recur adv (rest m))))))","problem":81,"user":"4f26d6d9e4b0d6649770a007"},{"code":"(fn [s1 s2]\n  (set (filter (complement nil?)\n               (map #(get s2 %) s1))))","problem":81,"user":"52d2f457e4b099d49816f0ba"},{"problem":81,"code":"(fn [x y]\n   (reduce #(if (some #{%2} x)\n                (conj %1 %2)\n                %1)\n           #{}\n           y))","user":"504f9ae1e4b0a02f9cffde9c"},{"code":"(fn [s1 s2]\n  (into #{} (filter #(s2 %) s1)))","problem":81,"user":"4dc1e1e4535d020aff1edf90"},{"code":"#(set(filter %1 %2))","problem":81,"user":"505d70e8e4b0e6aca564be09"},{"problem":81,"code":"(fn isect\n  [a b]\n  (set (filter #(contains? b %) a)))","user":"56e99ec8e4b04a395b9a03fb"},{"problem":81,"code":"(fn [a b](set (filter (fn [v](contains? b v))a)))","user":"5c852e3ae4b0c8042a70ce78"},{"problem":81,"code":"(fn i [l s]\n      (if (< (count l) (count s))\n        (i s l)\n        (set (filter #(contains? s %) l))))","user":"5540fe42e4b0a04f7929950a"},{"problem":81,"code":"(fn [x y] (set (filter #(not= nil %) (map x y))))","user":"57fc0719e4b0d3187e900987"},{"problem":81,"code":"(fn my-intersection\n  [s1 s2]\n  (reduce\n    (fn [result x]\n      (if (contains? s2 x) (conj result x) result))\n    #{}\n    s1))","user":"6098263be4b00e9e6653c3f9"},{"code":"#(set (filter (partial contains? %2) %1))","problem":81,"user":"506a1985e4b01dc6af13f83e"},{"code":"(fn [a b]\r\n  (set (filter #(b %) a)))","problem":81,"user":"4eb66737535d7eef3080736b"},{"code":"#(loop [s1 %1 s2 %2 r #{}]\n  (cond (empty? s1) r\n        (contains? s2 (first s1)) (recur (rest s1) s2 (conj r (first s1)))\n        :else (recur (rest s1) s2 r)))","problem":81,"user":"4fae258de4b081705acca246"},{"problem":81,"code":"(fn [set1 set2]\n     ((fn [set1 set2 result]\n          (cond\n            (empty? set1) result\n            (empty? set2) result\n            (contains? set2 (first set1)) (recur (rest set1) (disj set2 (first set1)) (conj result (first set1)))\n            :else (recur (rest set1) set2 result)\n          )\n     ) set1 set2 #{})\n )","user":"53ecd01fe4b0d648e757f4b9"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce conj #{} (reduce (fn [accum item]\n                             (if (contains? s2 item) \n                               (conj accum item)\n                               accum)) \n                           [] \n                           s1)))","user":"58740c18e4b01531a375ea49"},{"code":"(fn [a b] (apply hash-set (filter #(not (nil? %)) (map #(a %) b))))","problem":81,"user":"4ea365e2535d7eef308072c5"},{"problem":81,"code":"(fn f[s1 s2] (into #{} (filter #(get s1 % false) s2)))","user":"54ce3790e4b057c6fda3a2ab"},{"code":"#(into #{}\n    (for [v %1\n          :when (contains? %2 v)] v))","problem":81,"user":"4fe9f0f6e4b0547ebccb247b"},{"problem":81,"code":"(fn intsc [a b]\n  (let [res (into #{} (remove #(not= true (contains? b %)) a))]\n    (when-not (set? res) (set '())) res))","user":"5adcc688e4b0837691e92c05"},{"code":"(fn [s z] (into #{} (mapcat #(if (contains? z %) [%]) s)))","problem":81,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":81,"code":"(fn [set1 set2]\n  (disj (set (for [x set1]\n         (if (contains? set2 x)\n           x))) nil))","user":"534fa9dae4b084c2834f4acf"},{"code":"(fn [& s]\n  (reduce #(if (= (count %2) (count s))\n             (conj % (first %2))\n             %)\n          #{}\n          (partition-by identity (sort (apply concat s)))))","problem":81,"user":"513dcc1ce4b0825f97f7f964"},{"problem":81,"code":"(fn [c1 c2] (reduce #(if (contains? c1 %2) (conj %1 %2) %1) #{} c2))","user":"557f7c8be4b05c286339e0e0"},{"code":"(fn my-intersecton [s1 s2]\n  (set (filter #(contains? s2 %) s1)))","problem":81,"user":"4fc6d2c1e4b0ee37620e181b"},{"code":"#(apply hash-set (filter %1 %2 ))","problem":81,"user":"502904e0e4b0feaf66e22fad"},{"problem":81,"code":"(fn[s1 s2] (set (reduce #( if(contains? s1 %2) (conj %1 %2) %1 ) '() s2 )) )","user":"5cf53196e4b087f62be35a94"},{"problem":81,"code":"(fn [set1 set2]\n  (set \n   \t(filter #(contains? set1 %1) set2)))","user":"55b4fa46e4b01b9910ae2983"},{"code":"(fn [a b]\n  (into #{} (keep-indexed #(if (contains? b %2) %2) a)))","problem":81,"user":"4ec9549d535d6d7199dd36fe"},{"problem":81,"code":"(fn [s1 s2]\n    (let [union (into s1 s2)\n          diff clojure.set/difference]\n        (diff union\n            (diff union s1)\n            (diff union s2))))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"#(set(filter %2 %1))","problem":81,"user":"4df669d4535d08e6dec9fe35"},{"problem":81,"code":"#(set (for [x % :when (contains? %2 x)] x))","user":"5f3567d6e4b0574c87022c44"},{"problem":81,"code":"(fn [s1 s2] (into #{}\n                      (filter\n                        #(and (contains? s1 %) (contains? s2 %))\n                        (into #{} (concat s1 s2)))))","user":"54eee3a3e4b024c67c0cf879"},{"code":"(fn [s1 s2] (set (filter s1 s2)))","problem":81,"user":"4f8bbb27e4b02e764a0a5182"},{"code":"(fn [s1 s2]\n  (loop [in s1 out #{}]\n    (if (empty? in)\n      out\n      (let [[hd & tl] (seq in)]\n        (if (contains? s2 hd)\n          (recur tl (conj out hd))\n          (recur tl out))))))","problem":81,"user":"4ea4fe1f535d7eef308072cf"},{"problem":81,"code":"(fn [a b] (loop [x #{} y a z b] (if (empty? y) x (if (contains? z (first y)) (recur (conj x (first y)) (rest y) z) (recur x (rest y) z)))))","user":"5839f079e4b089d5ab817d48"},{"problem":81,"code":"(fn inter\n  ([s1 s2] (inter s1 s2 #{}))\n  ([s1 s2 res]\n   (cond (empty? s1) res\n         (s2 (first s1)) (inter (rest s1) s2 (conj res (first s1)))\n         :else (inter (rest s1) s2 res))))","user":"5d931a58e4b0d3f9b434ad10"},{"problem":81,"code":"(fn [x y]\n  (set (filter y x))\n  )","user":"55fd0d19e4b0f488688e067a"},{"problem":81,"code":"#(let [a-b (apply (partial disj %1) %2)]\n   (apply (partial disj %1) a-b))","user":"5d2c779be4b01671435dbc8d"},{"problem":81,"code":"(fn [c1 c2] (reduce #(if (contains? c1 %2) (conj %1 %2) %1 ) #{} c2) )","user":"56db90d4e4b0ea9b8538f80d"},{"code":"(fn [a b]\n       (reduce\n        #(if (a %2) (conj %1 %2) %1)\n        #{} b))","problem":81,"user":"4e5676b2535d8a8b8723a282"},{"code":"#(into #{} (filter (comp not nil?) (map %1 %2)))","problem":81,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"(fn[s t]\n  (loop [s s r #{}]\n    (if (empty? s)\n      r\n      (let [e (first s)]\n        (recur (rest s) (if (contains? t e) (conj r e) r))))))","problem":81,"user":"4ec64981535d6d7199dd36c7"},{"problem":81,"code":"#(set (for [ x % y %2 :when (= x y)] x))","user":"57ee41eae4b0bfb2137f5bb0"},{"problem":81,"code":"(fn intersection-ms\n  [s1 s2]\n  (reduce #(if (s2 %2) (conj %1 %2) %1) #{} s1))","user":"561ca6ebe4b064ca9f4b169c"},{"problem":81,"code":"(fn [coll1 coll2] (into #{} (filter coll1 coll2)))","user":"5ce52271e4b0a17bb84e2b69"},{"code":"(fn [a b]\n  (set (filter #(not (nil? (get a %))) b)))","problem":81,"user":"4e720985535d5021c1a89655"},{"problem":81,"code":"#(set (remove nil? (map (fn t [a] (if (contains? %2 a) a)) %1)))","user":"5e380e72e4b01d43a70e8db0"},{"problem":81,"code":"(fn\n  [x y]\n  (disj (set (map x y)) nil)\n  )","user":"56de78fde4b0ea9b8538f83c"},{"code":"(fn [a b] (into #{} (filter #(contains? b %) a)))","problem":81,"user":"4e85cda3535db62dc21a62f0"},{"problem":81,"code":"(fn intersect [a b]\n  (set (filter #(b %) a)))","user":"56f53962e4b046a417f9206c"},{"problem":81,"code":"(fn [f s] (set (filter #(f %) s)))","user":"552e1c98e4b076ab5578f7ee"},{"problem":81,"code":"(fn\n  [set1 set2]\n  (set (filter #(contains? set1 %) set2)))","user":"5c706232e4b0fca0c162277e"},{"code":"(fn [c1 c2]\n  (set (for [x (concat c1 c2)\n               :when (and (contains? c1 x)\n                          (contains? c2 x))]\n           x)))","problem":81,"user":"528b01a0e4b0239c8a67ae89"},{"code":"(fn [seq1 seq2]\n  \t\t(set (for [x seq1 :when (seq2 x)] x)))","problem":81,"user":"4f4daa4ae4b03ad3f0c10cac"},{"code":"(fn [a b]\n  (reduce (fn [acc v]\n            (if (contains? b v)\n              (conj acc v)\n              acc)) #{} a))","problem":81,"user":"505bd09fe4b032b709c81373"},{"problem":81,"code":"(fn   [st1 st2]\n  (loop [set1 st1\n         set12 ()]\n    (if (zero? (count set1))\n      (set (sort set12))\n      (recur (rest set1)\n             (if (contains? st2 (first set1))\n               (cons (first set1) set12)\n                   set12 )))))","user":"59deba46e4b01968742fed7f"},{"problem":81,"code":"(fn intersect [s1 s2]\n  (reduce (fn [acc item]\n            (if (contains? s2 item)\n              acc\n              (disj acc item))) \n          s1\n          s1))","user":"5be33a16e4b0ed4b8aab4cd6"},{"code":"#(reduce (fn [x y ] (set (filter (fn[x] (not (nil? x)))                                                                                          \n                               (map x y))))                                                                                                        \n           %&)","problem":81,"user":"505fc8e3e4b08f2a82ad10b6"},{"code":"(fn [l1 l2]\n   (apply sorted-set (filter #(not= nil (l1 %)) l2)))","problem":81,"user":"52fac708e4b047fd55836fff"},{"problem":81,"code":"(fn\n  [a b]\n  (clojure.set/difference\n   (clojure.set/union a b)\n   (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a))))","user":"54c9571ee4b045293a27f66b"},{"problem":81,"code":"(fn [s & ss]\n  (into #{} (filter (fn [x] (every? #(contains? % x) ss)) s)))","user":"4dae869dedd6309eace4d154"},{"code":"#(apply hash-set (for [x %1 y %2 :when (= x y)] x))","problem":81,"user":"50310b8be4b05b7df5a0b84d"},{"code":"; Oops, I misread the question as being intersection of multiple sets\n\n(fn [fst & others]\n  (letfn [(in-others? [x] (every? #(contains? % x) others))]\n  (set\n    (filter in-others? fst))))","problem":81,"user":"53779a26e4b06839e8705e38"},{"problem":81,"code":"(fn [xs ys]\n   (set (filter #(if (contains? ys %)\n                   %) \n                xs)))","user":"58c4492be4b021aa9917ed27"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [s1 s1 ret #{}]\n    (cond\n      (empty? s1) ret\n      (s2 (first s1))\n      (recur (rest s1) (conj ret (first s1)))\n      :else (recur (rest s1) ret))))","user":"53f053ebe4b0742d9025b0d3"},{"code":"(fn [a b] (set (filter #(and (a %) (b %)) (concat a b))))","problem":81,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":81,"code":"(fn\n  [a b]\n  (set\n        (filter #(contains? b %) a)))","user":"558b41fce4b0277789237628"},{"problem":81,"code":"(fn[l p]\n  (let [g ( group-by identity (interleave l p))] (set (for [[k v] g :when (= (count v) 2)] k))))","user":"54651ef5e4b01be26fd746d5"},{"problem":81,"code":"(fn\n  [l r] \n (into #{} ( filter l r)) \n  )","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":81,"code":"(fn [s1 s2] (into #{} (for [x s1 y s2 :when (= x y) ] x)))","user":"58983e3fe4b00487982d52ce"},{"code":"(fn [a-list b-list]\n  (set(filter (comp not nil?) \n  (for [elem a-list]\n    (cond \n      (contains? b-list elem) elem\n      :else nil\n      )))))","problem":81,"user":"52c52ef2e4b0c2d177d620ef"},{"problem":81,"code":"#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/union\n   (clojure.set/difference %1 %2)\n   (clojure.set/difference %2 %1)))","user":"58765038e4b01531a375ea7e"},{"code":"(fn [x y] (loop [one x two y res #{}] (if (= () two) res (recur one (rest two)(if (contains? one (first two)) (conj res (first two)) res)))) )","problem":81,"user":"51a7f74be4b08d8ec191b802"},{"code":"(fn [s t] (set (filter #(contains? s %) t)))","problem":81,"user":"4e821ca5535db62dc21a62c2"},{"code":"(fn [s s'] (disj (reduce #(conj %1 (get s %2)) #{} s') nil))","problem":81,"user":"531c0619e4b08068f379ed98"},{"problem":81,"code":"#(loop [i %1 j %2 result #{}]\n  (if (empty? i)\n     result\n     (if (contains? j (first i))\n        (recur (rest i) j (conj result (first i)))\n        (recur (rest i) j result ))\n))","user":"560c37b5e4b05f002753df2e"},{"problem":81,"code":"(fn [a b] (set (filter #(contains? b %) a)))\n\n;;; para cada elemento  de a (filtare () a) vamos a preguntar si b contiene ese elemento con (contains? b elemento)\n;;; el set hace {} esto","user":"6075c214e4b069485764de5b"},{"problem":81,"code":"(comp set (partial remove nil?) map)\n;even better:\n;(comp set filter)","user":"55cdc576e4b0e31453f64a1f"},{"code":"(fn [set1 set2]\n  (loop [result #{} s1 set1 ]\n    (if (not (seq s1))\n      (set result)\n      (recur (if (contains? set2 (first s1))\n               (conj result (first s1)) result) (rest s1) ))))","problem":81,"user":"51857e64e4b0da5a5be3babe"},{"problem":81,"code":"(fn inter [a b]\n  (set (filter #(contains? a %) b)))","user":"59f78b49e4b0ca45a743a30e"},{"problem":81,"code":"(fn SetIntersection [sa sb]\n  (set (filter #(sa %) sb))\n  )","user":"5a99b766e4b0d174b936c7a8"},{"problem":81,"code":"(fn mything [set-a set-b]\n  (into #{} (filter #(set-b %) set-a)))","user":"57e9a77ae4b0bfb2137f5b35"},{"code":"(fn [& args] (set (keys\n  (filter #(= (val %) (count args))\n    (apply merge-with + \n      (for [arg args]\n        (zipmap arg (repeat 1))\n      )\n    )\n  )\n)))","problem":81,"user":"4ea57300535d7eef308072d5"},{"code":"#(into #{} \n       (map first (filter (fn [c] (< 1 (count (second c)))) \n                          (group-by identity (concat (vec %1) (vec %2))))))","problem":81,"user":"5300aa1de4b0d8b024fd3710"},{"problem":81,"code":"(fn [s1 s2]\n  (if (< (count s2) (count s1))\n    (recur s2 s1)\n    (reduce (fn [res x]\n              (if (contains? s2 x)\n                res\n                (disj res x)))\n            s1 s1)))","user":"55088bb3e4b06e50f9beb10c"},{"code":"(fn [s1 s2]\r\n  (into #{} (filter #(s1 %) s2)))","problem":81,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":81,"code":"(fn inter [set1 set2]\n  (apply hash-set (filter (partial contains? set1) set2)))","user":"5a12dea3e4b04bbd27e6da44"},{"problem":81,"code":"#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":81,"code":"(fn set-inter [a b]\n  (set (filter a b)))","user":"607dd962e4b03d835a6eaed2"},{"problem":81,"code":"(fn [l1 l2]\n (apply \n   sorted-set\n   (for [x l1 y l2 :when (= x y)] x)))","user":"532902f8e4b09d4e7a9b550e"},{"code":"#(set (keep %1 %2))","problem":81,"user":"4e9fde3c535d7eef3080729b"},{"problem":81,"code":"(fn [set1 set2]\n  (reduce #(if (contains? set2 %2) (conj % %2) %) #{} set1))","user":"5a99b688e4b0d174b936c7a6"},{"code":"(fn doset [sa sb]\r\n  (set (filter #(sa %) sb))\r\n  )","problem":81,"user":"4f7d25b4e4b06e829148e1ba"},{"problem":81,"code":"(fn f [ mx my ]\n   (apply hash-set (filter #( contains? mx % ) my)))","user":"556880dae4b0c656e3ff1856"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [to-check (seq set1) result #{}]\n    (if (empty? to-check)\n      result\n    (if (contains? set2 (first to-check))\n      (recur (rest to-check) (conj result (first to-check)))\n      (recur (rest to-check) result)))))","user":"5989ee61e4b021a7a535fed7"},{"problem":81,"code":"(fn \n  [a b]\n  (set (filter #(contains? a %) b)))","user":"5401aefbe4b0df28a13c62c7"},{"problem":81,"code":"; #(set (filter (partial contains? %) %2))\n\n; #(set (filter % %2))\n\n(comp set filter)","user":"5f6a583ae4b02876ed9fd046"},{"problem":81,"code":"(fn [x y] (set (remove nil? (#(for [x1 % ] (if (contains? %2 x1) x1)) x y))))","user":"55818b0ee4b05c286339e0fb"},{"code":"(fn [s1 s2]\n  (set (filter #(contains? s2 %) s1)))","problem":81,"user":"4fe87e56e4b07c9f6fd12c40"},{"code":"(fn [s1 s2] (into #{} (filter (fn [v] (contains? s2 v)) s1)))","problem":81,"user":"51f40975e4b0fca5e8b4822e"},{"problem":81,"code":"(fn intersec[a b] \n  (set (for [x a :when (contains? b x)] x)))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":81,"code":"(fn inter\n  ([s1 s2] (inter (seq s1) s2 #{}))\n  ([s1 s2 res]\n   (if (empty? s1)\n     res\n     (if (contains? s2 (first s1))\n       (inter (next s1) s2 (conj res (first s1)))\n       (inter (next s1) s2 res)))))","user":"56a1fce9e4b0542e1f8d14b7"},{"code":"(fn myintersection[a b](set(filter #(contains? b %)a)))","problem":81,"user":"52c4fe42e4b0c2d177d620e9"},{"code":"(fn [s t] (->> (map s t) (remove nil?) set ))","problem":81,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"(fn [& cols] (set (map first (filter #(< 1 (count %))\n\t(partition-by identity\n    (sort(apply concat cols)))))))","problem":81,"user":"50ccf729e4b0f7a459302aac"},{"problem":81,"code":"#(into #{} (filter (fn [a] (some (partial = a) %2)) %))","user":"5f03ab5be4b0cf489e8d7f37"},{"code":"(fn [a b]\n  (into (hash-set) (filter a b)))","problem":81,"user":"5125d963e4b05d10e3e395fe"},{"code":"(fn [a b] (set (keys (filter #(> (second %) 1) \n  \t(frequencies (into (vec a) (vec b)))))))","problem":81,"user":"4e8ad1d2535d65386fec2110"},{"problem":81,"code":"(fn [x y] (set (filter #(not (nil? %)) (map #(some #{%} x) y))))","user":"5705e404e4b0b0fb43fd0676"},{"problem":81,"code":"(fn [a b] (reduce (fn [common curr]\n                    (if (contains? b curr)\n                      (conj common curr)\n                      common))\n                  #{}\n                  a))","user":"60654263e4b069485764ddc9"},{"problem":81,"code":"(fn [set1 set2]\n  (into #{}(filter #(contains? set2 %) set1)))","user":"565b371fe4b068f2fe63dbff"},{"code":"(fn [s1 s2] (set (for [e s1 :when (contains? s2 e)] e)))","problem":81,"user":"539b5fcee4b0b51d73faaf1e"},{"problem":81,"code":"(fn [s1 s2]\n(->>\n\ts1\n\t(filter #(contains? s2 %))\n \t(set)\n)\n)","user":"5f574662e4b0a0bc16850a90"},{"problem":81,"code":"(fn in [s1 s2]\n  (if(empty? s1)\n    (set nil)\n    (if(contains? s2 (first s1))\n      (conj (in (rest s1) s2) (first s1))(in (rest s1) s2))))","user":"5c486dece4b0e06e1360a3c0"},{"problem":81,"code":"#((comp set filter) %1 %2)","user":"57717915e4b0979f896515b3"},{"problem":81,"code":"(fn [s1, s2]\n  (apply hash-set (filter #(s1 %1) s2)))","user":"5590e55de4b0277789237676"},{"problem":81,"code":"(fn [x y]\n    (set (filter #(contains? y %) x)))","user":"51e7c1f1e4b0a3e081b8cbef"},{"code":"(fn foo\r\n    ([xs ys] (foo #{} xs (seq ys)))\r\n    ([acc xs ys]\r\n      (if-not ys\r\n        acc\r\n        (if (get xs (first ys))\r\n          (foo (conj acc (first ys)) xs (next ys))\r\n          (foo acc xs (next ys))))))","problem":81,"user":"4e26e8b4535deb9a81d77ef6"},{"problem":81,"code":"(fn [x y]\n   (let [el->true (apply hash-map (interleave x (repeat true)))]\n    (set (filter #(get el->true %) y))))","user":"5991eec7e4b0866487ed0d6e"},{"code":"(fn a [s1 s2] (set(keep #(if(s2 %) %) s1)))","problem":81,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":81,"code":"(fn in-both [set-a set-b]\n  (into #{} (filter #(contains? set-a %) set-b)))","user":"56f4cedce4b046a417f92063"},{"code":"(fn [a b]\n  (apply hash-set (filter #(contains? a %) b)))","problem":81,"user":"4ecb1641535d6d7199dd370e"},{"problem":81,"code":"(fn intersect- [s1 s2]\n   (->> (filter #(if (some (hash-set %) s1) true false )  s2)\n   (set)))","user":"5fec4f5ee4b05ac5b16ea1bf"},{"code":"#(clojure.set/select (partial contains? %2) %1)","problem":81,"user":"504e397ee4b0f6ff3350c485"},{"code":"(fn [a b]\n  (set (filter a b)))","problem":81,"user":"4e5c801e535d8a8b8723a2c1"},{"code":"#(if (< (count %2) (count %1))\n       (recur %2 %1)\n       (reduce (fn [result item]\n                   (if (contains? %2 item)\n             result\n                     (disj result item)))\n           %1 %1))","problem":81,"user":"5143952fe4b0b4fb4ace5f38"},{"problem":81,"code":"(fn [ens1 ens2] (into #{} (filter #(contains? ens2 %) ens1)))","user":"4e36e647535deb9a81d77f36"},{"problem":81,"code":"(fn [& sets]\n   (reduce\n    (fn [a b]\n      (let [in-both   (clojure.set/union a b)\n            just-in-a (clojure.set/difference in-both b)\n            just-in-b (clojure.set/difference in-both a)\n            just-in-one (clojure.set/union just-in-a just-in-b)\n            in-both (clojure.set/difference in-both just-in-one)]\n        in-both))\n    (first sets)\n    sets))","user":"5d4b2155e4b0776584bd6f28"},{"problem":81,"code":"(fn intersec [set1 set2]\n  (set (rest (set (for [x set1] (when (contains? set2 x) x))))))","user":"5746061ae4b009280f9f2b5b"},{"problem":81,"code":"(fn [coll1 coll2]\n         (into #{} (filter #(contains? coll2 %) coll1))\n\n         )","user":"552d9013e4b076ab5578f7ea"},{"problem":81,"code":"(fn [& args]\n    (let [\n          [x y] args\n          both-have (fn [it] (and\n                               (contains? x it)\n                               (contains? y it)))\n          keep-if-common  (fn [cum it]\n                            (if (both-have it)\n                              (conj cum it)\n                              cum))\n          result (reduce keep-if-common #{} x)\n         ]\n      result\n    )\n  )","user":"532f7e12e4b019098a6f8b4e"},{"code":"(fn [s t]\n  (loop [s s t t r #{}]\n    (if (empty? s) r\n      (recur (rest s) t (if (contains? t (first s))\n                            (conj r (first s))\n                            r)))))","problem":81,"user":"5029fccee4b023940c84aa47"},{"problem":81,"code":"(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))","user":"5ec0db8be4b00a66d4a9528d"},{"code":"(fn intersect\n  [s1 s2]\n  (clojure.set/difference s1 (set (filter #(not (s2 %)) s1))))","problem":81,"user":"4e5a460f535d8a8b8723a2ab"},{"code":"(fn inter [x y]\n  (disj\n  (into #{}\n  (map (fn [a] \n         (if (contains? y a) a  )\n  ) x  )\n    )\n    nil\n    )\n  )","problem":81,"user":"4f00e9c7535dcb61093f6a33"},{"code":"(fn[s1 s2] \n    (let[temp (if(< (count s1) (count s2)) [s1 s2] [s2 s1]) \n         min-s (nth temp 0) \n         max-s (nth temp 1)] \n      (loop[s min-s r #{}] \n        (if(empty? s) \n          r \n          (let[e (first s)] \n            (recur (rest s) (if(some #(= % e) max-s) (conj r e) r))\n            )\n          )\n        )\n      )\n    )","problem":81,"user":"52e68e61e4b09f7907dd1479"},{"problem":81,"code":"(fn [x y]\n  (loop [c x d y e #{}]\n    (if (empty? c)\n      e\n      (recur (rest c)\n             d\n             (if (contains? d (first c))\n               (conj e (first c))\n               e)))))","user":"607d6bc1e4b03d835a6eaecc"},{"problem":81,"code":"(fn [xs ys]\n  (set  (filter #(contains? xs %) ys)  ))","user":"53ca23e3e4b00fb29b2212c6"},{"problem":81,"code":"(fn [a b]\n  (loop [a a b b o #{}]\n    (if (empty? a)\n      o\n      (recur (rest a) b (if (b (first a))\n                          (conj o (first a))\n                          o)))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":81,"code":"(fn my-set-intersection\n  ([s1 s2]\n   (reduce \n     (fn [acc elem]\n       (if (s1 elem)\n         (conj acc elem)\n         acc))\n     #{}\n     s2))\n  ([s1 s2 & ss]\n   (reduce my-set-intersection (my-set-intersection s1 s2) ss)))","user":"539e717fe4b0ca733b974488"},{"code":"#(set (for [x % y %2 :when (= x y)] x) )","problem":81,"user":"4ee7d177535d93acb0a6686f"},{"code":"(fn [s1 s2]\n  (set (filter s2 s1)))","problem":81,"user":"4ef0eaef535dced4c769f211"},{"problem":81,"code":"(fn intersec [a b]\n  (into #{} (filter #(b %) a)))","user":"605b49b7e4b079a07f8593f8"},{"problem":81,"code":"(fn f\n  ([s1 s2] (f s1 s2 #{}))\n  ([s1 s2 result]\n   (if (empty? s1)\n     result\n     (let [fst (first s1)\n           rst (rest s1)]\n       (if (s2 fst)\n         (recur rst s2 (conj result fst))\n         (recur rst s2 result))))))","user":"524a9556e4b05ef8e38e64b1"},{"code":"#(reduce (fn [result item]\n         (if (contains? %2 item)\n           result\n           (disj result item)))\n           %1 %1)","problem":81,"user":"4ea85846535d7eef308072f9"},{"code":"#(into #{} (remove nil? (map % %2)))","problem":81,"user":"4ff67852e4b0678c553fc37e"},{"code":"(fn [s1 s2]\n  (let [ismof? (fn [e s] (clojure.set/subset? (into #{} (conj [] e)) s))]\n\t\t(into #{} (remove nil? (map #(if (ismof? % s2) %) s1)))))","problem":81,"user":"4db045b5838c48654951d9be"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce #(if (contains? s1 %2) (conj % %2) %) #{} s2))","user":"543c5200e4b032a45b86933e"},{"problem":81,"code":"(fn [s1 s2]\n  (clojure.set/select\n   #(not (nil? (get s2 %))) s1))","user":"5defc177e4b093ff717275af"},{"code":"(fn [set1 set2] \n    (reduce (fn [acc elem] (if (contains? set2 elem) (conj acc elem) acc) ) \n\t #{} set1))","problem":81,"user":"523a9fc9e4b081681ca7adca"},{"problem":81,"code":"(fn [set1 set2] (set (filter (complement nil?) (map #(set1 %) set2))))","user":"5dd1fb19e4b0948ae9d9ad51"},{"problem":81,"code":"(fn [x y] (into #{} (filter (complement nil?) (map #(y %1) x))))","user":"546a6c7ce4b00cfc9eacc154"},{"code":"(fn [s1 s2]\n  (set (keys (filter #(> (last %) 1) (frequencies (into (vec s1) (vec s2)))))))","problem":81,"user":"50843a4ae4b0c98812d0788b"},{"code":"(fn my-intersect [s1 s2]\n  (set (filter #(get s2 %) s1)) )","problem":81,"user":"4f2965ffe4b0d6649770a029"},{"problem":81,"code":"(fn [s1 s2]\n  (->> (reduce #(assoc %1 %2 (inc (or (%1 %2) 0))) {} (concat s1 s2))\n    (reduce (fn [acc [k v]] (if (= 2 v) (conj acc k) acc)) #{})))","user":"53f77b6ae4b0de5c4184855f"},{"problem":81,"code":"(clojure.core/fn ([s1 s2] (reduce conj #{} (filter #(s1 %) s2))))","user":"52a7634ae4b0c58976d9ac16"},{"problem":81,"code":"#(set (remove (clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)) (clojure.set/union %2 %1)))","user":"5c6e8b57e4b0fca0c1622755"},{"code":"(comp set (fn [s1 s2] (filter #(contains? s2 %) s1)))","problem":81,"user":"5092fe10e4b097f48cc3857e"},{"problem":81,"code":"(fn [set-a set-b] \n  (set (filter #(set-b %) set-a)))","user":"59cc4d5ee4b0a024fb6ae5d0"},{"code":"(fn [a b]\n  (reduce #(if (contains? b %2)\n                (conj %1 %2)\n                %1) #{} a))","problem":81,"user":"4db883e1535d1e037afb2198"},{"code":"#(set(for [x %1 :when (contains? %2 x)] x))","problem":81,"user":"4f18677d535d64f603146459"},{"problem":81,"code":"(fn [m1 m2] \n  (set (filter #(contains? m2 %) m1)))","user":"5a99b863e4b0d174b936c7ae"},{"code":"#(reduce (fn [r i] (if (contains? %2 i) r (disj r i))) % %)","problem":81,"user":"4f045946535dcb61093f6bba"},{"code":"(fn [left right]\n  (set (filter #(contains? right %1) left))\n)","problem":81,"user":"51f09f3de4b0274c496158d7"},{"problem":81,"code":"(fn [a b]\n   (into #{} (keys (filter (fn [[key value]] (< 1 (count value))) (group-by identity (concat a b))))))","user":"5e99cbd4e4b0157ca96647e6"},{"problem":81,"code":"(fn [sq1 sq2]\n  (into #{} (filter #(contains? sq2 %) sq1)))","user":"581a5fdbe4b0e114eb51a002"},{"problem":81,"code":"(fn my-intersection\n  [s1 s2]\n  (set (reduce #(if (contains? s1 %2) (conj %1 %2) %1) [] s2)))","user":"59f44189e4b0966464fe6aab"},{"problem":81,"code":"#(into #{} (for [e %1 :when (contains? %2 e)] e))","user":"4eb6f065535d7eef30807372"},{"problem":81,"code":"(fn [sa sb]\n  (let [d clojure.set/difference\n        u (clojure.set/union sa sb)\n        d12 (d sa sb)\n        d21 (d sb sa)]\n    (d (d u d12) d21)))","user":"5c7ef3f3e4b0d597f478cad7"},{"problem":81,"code":"(fn [a b] (set (for [x (clojure.set/union a b)\n                :when (and (contains? a x) (contains? b x))] x)))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":81,"code":"(fn __\n  [set1 set2]\n  (reduce #(if (contains? set1 %2)\n             (conj %1 %2)\n             %1)\n          #{} set2))","user":"5ac91d90e4b0e27600da77bd"},{"problem":81,"code":"(fn [xs ys] (into #{} (for [x xs, y ys :when (= x y)] x)))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":81,"code":"(fn inter\n  ([set1 set2]\n   (loop [s #{}\n          set1 set1]\n     (if (empty? set1)\n       s\n       (let [x (first set1)]\n         (if (contains? set2 x)\n           (recur (conj s x)\n                  (rest set1))\n           (recur s (rest set1)))))))\n  ([set1 set2 & sets]\n   (let [s (inter set1 set2)]\n     (if (empty? sets)\n       s\n       (inter s (first sets) (rest sets))))))","user":"545944a2e4b01be26fd74627"},{"problem":81,"code":"#(loop [acc #{} s %1] (if (seq s) (recur (if (contains? %2 (first s)) (conj acc (first s)) acc) (rest s)) acc))","user":"58dcae01e4b0a4d5acaab6a4"},{"problem":81,"code":"#(into #{} (filter (partial contains? %2)  %1))","user":"542fa0dde4b0dad94371f2d2"},{"problem":81,"code":"(fn my_intersection\n  [s1 s2]\n  (set(filter #(contains? s2 %) s1))\n)","user":"5f6b8222e4b02876ed9fd052"},{"code":"(fn [set1 set2]\n    (reduce\n      #(if (set1 %2) (conj %1 %2) %1) #{} set2))","problem":81,"user":"4f725466e4b07046d9f4f030"},{"problem":81,"code":";(fn [s1 s2]\n;    (set (filter s1 s2)))\n;; use `s1` as a function\n(fn [s1 s2] (into #{} (filter #(contains? s1 %) s2)))","user":"55d62a68e4b0e31453f64a96"},{"problem":81,"code":"(fn my-intersection [s1 s2]\n  (into #{}\n    (filter (complement nil?)\n      (for [i s1]\n        (if (contains? s2 i)\n          i)))))","user":"5f4eb036e4b0102c75033969"},{"code":"(fn [a b]\r\n  (set (filter b a)))","problem":81,"user":"4f58d92fe4b0a7574ea71858"},{"problem":81,"code":"(fn [s1 s2]\n    (reduce (fn [res el] (if-not (nil? (s1 el)) (conj res el) res)) #{} s2)\n    )","user":"57aa290de4b0b8559636fc65"},{"problem":81,"code":"(fn [a b]\n  (loop [a a output #{}]\n    (if (empty? a)\n      output\n\t  (if (contains? b (first a))\n        (recur (rest a) (conj output (first a)))\n        (recur (rest a) output)))))","user":"5689bd04e4b0dcc4269f4082"},{"code":"(fn [L & l]\n  (set (for [x L :when (every? #(contains? % x) l)] x)))","problem":81,"user":"4ee82539535d93acb0a66878"},{"code":"#(loop [l1 %1\n        l2 %2\n        result '()]\n   (if (empty? l2)\n     (set result)\n     (if (contains? l1 (first l2))\n       (recur l1 (rest l2) (concat result (list (first l2))))\n       (recur l1 (rest l2) result))))","problem":81,"user":"51d360d1e4b099f3b6acddff"},{"code":"(fn [set1 set2]\n  (set (filter #(contains? set2 %) set1))\n)","problem":81,"user":"4fcf5292e4b03432b189f40e"},{"problem":81,"code":"(fn [coll1 coll2]\n  (->>\n    coll1\n   (filter #(contains? coll2 %))\n   (reduce conj #{})\n  )\n)","user":"5bc28638e4b07a9b28b10033"},{"problem":81,"code":"(fn [s1 s2] (into #{} (for [x s2 :when (s1 x)] x)))","user":"525b142fe4b0cb4875a45d05"},{"code":"(fn [x y] (into #{}(filter #(not (nil? % )) (map x y))))","problem":81,"user":"534eecaee4b084c2834f4abf"},{"problem":81,"code":"#(set (for [x (clojure.set/union %1 %2) :when (and (contains? %1 x) (contains? %2 x))] x))","user":"5586f418e4b059ccff29b1de"},{"problem":81,"code":"#(loop [a %1\n        b %2\n        v #{}]\n   (cond (empty? a) v\n         (contains? b (first a)) (recur (rest a) b (conj v (first a)))\n         :else (recur (rest a) b v)))","user":"55e732c5e4b050e68259b492"},{"problem":81,"code":"(fn [x y] \n  (reduce\n   (fn [r e](\n             if (contains? x e)\n             \t(conj r e)\n             \tr\n             ) \n     )\n   #{}\n   y\n   )\n  )","user":"55d42f78e4b0e31453f64a73"},{"code":"(fn [x y]\n  (set (filter #(clojure.set/subset? #{%1} x) y)))","problem":81,"user":"50a5f72fe4b0aa96157e2611"},{"code":"(fn [set1 set2]\n  (loop [s1 set1\n         acc #{}]\n    (let [f (first s1)]\n      (if (empty? s1)\n        acc\n        (recur (disj s1 f) (if (contains? set2 f) (conj acc f) acc))))))","problem":81,"user":"4f08a8a2535dcb61093f6c3d"},{"code":"(fn [x y]\n  (set\n    (filter\n      #(contains? y %)\n      x)))","problem":81,"user":"504e48ace4b0f6ff3350c498"},{"problem":81,"code":"(fn [n x] \n  (reduce #(if (contains? x %2) (conj % %2) %) #{} n))","user":"5a99b861e4b0d174b936c7ad"},{"code":"(fn intersextion [s1 s2]\n  (cond\n   (empty? s1) #{}\n   (contains? s2 (first s1)) (conj (intersextion (rest s1) s2) (first s1))\n   :else (intersextion (rest s1) s2)\n   )\n  )","problem":81,"user":"5252cbe7e4b0541d1855b8d2"},{"code":"(fn [set1 set2]\n  (->> set2\n    (map set1)\n    (remove nil?)\n    (apply hash-set)))","problem":81,"user":"4daf36c2edd6309eace4d175"},{"code":"(fn [s1 s2] (into #{} (filter #(contains? s1 %) s2)))","problem":81,"user":"4eb44d78535d7eef30807360"},{"problem":81,"code":"(fn [a b] (set (filter (fn [c] (contains? b c) )a)))","user":"5dfa1c67e4b0a607a9a45cc5"},{"problem":81,"code":"(fn lol\n  [a b]\n  (let [my-map {#{0 1 2 3} #{2 3}\n                #{0 1 2} #{}\n                #{:a :b :c :d} #{:a :c :d}}]\n    (my-map a)))","user":"59390a35e4b02506e01a29f3"},{"code":"(fn tmp [x y] \n\t(into #{} (filter #(not(nil? (y %))) x))\n)","problem":81,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn [a b]\n  (reduce #(if (contains? b %2)\n                (conj %1 %2)\n                %1)\n          #{}\n          a))","problem":81,"user":"4efcac3a535de96065cf507e"},{"problem":81,"code":"(fn inters [s1 s2]\n  (set (filter #(contains? s1 %) s2)) )","user":"5ab490f4e4b073f17744261d"},{"problem":81,"code":"(fn [s1 s2] (into #{} (filter #(not (nil? (s2 %1))) s1 )))","user":"55f9b2b6e4b03cbcff9738c8"},{"problem":81,"code":"#(let [not-a (reduce disj %2 %)\n       not-b (reduce disj % %2)\n       neither (into not-a not-b)]\n   (reduce disj % neither))","user":"51647faae4b003cf19fdde3b"},{"problem":81,"code":"(fn [a b]\n  (set (filter #(contains? b %1) a)) )","user":"54903056e4b0b312c081ff2e"},{"problem":81,"code":"(fn [a b]\n  (into #{} (filter (fn [x] (contains? b x)) a)))","user":"577629abe4b0979f8965162e"},{"code":"(fn [a b](set (filter #(contains? a %) b)))","problem":81,"user":"4ef0f1a1535dced4c769f212"},{"problem":81,"code":"#(apply hash-set (filter (partial contains? %2) %1))","user":"5cdd934ce4b05ee0cb311761"},{"problem":81,"code":"(fn [a b] (loop [s (vec a)\n                 memo []]\n            (if (empty? s)\n              (set memo)\n              (if (contains? b (first s))\n                (recur (rest s) (conj memo (first s)))\n                (recur (rest s) memo)))))","user":"565233f2e4b0f9d632dd8461"},{"problem":81,"code":"(fn [s1 s2] (clojure.set/select #(s2 %) s1))","user":"54ca93abe4b057c6fda3a264"},{"problem":81,"code":"(fn\n  [a b]\n  (apply disj a (clojure.set/difference a b)))","user":"5576fee3e4b05c286339e078"},{"problem":81,"code":"(fn f [s1 s2]\n  (->> (clojure.set/union s1 s2)\n       (filter #(and \n                 (contains? s1 %)\n                 (contains? s2 %)))\n       (reduce #(into %1 #{%2}) #{})))","user":"5493d908e4b0b312c081ff52"},{"problem":81,"code":"(fn [a b]\n  (loop [set1 a set3 []]\n         (if (empty? set1)\n           (set set3)\n           (if (contains? b (first set1))\n             (recur (rest set1)(conj set3 (first set1)))\n             (recur (rest set1) set3)))))","user":"5668aad0e4b04acd4f672df5"},{"code":"(fn my-intersection [x y] (if (< 0 (count x))\n                              ((fn my-c [i j k] (if (empty? (filter (fn eq [m] (if (= m k)\n                                                                               true\n                                                                               false)) j))\n                                                  i\n                                                 (conj i k)\n                                                 )) (my-intersection (rest x) y) y (first x))\n                             #{}))","problem":81,"user":"5296aa9be4b02ebb4ef75034"},{"problem":81,"code":"(fn set-intersection [x y]\n  (let [x-sub-y (clojure.set/difference x y)\n        y-sub-x (clojure.set/difference y x)\n        full-diff (clojure.set/union x-sub-y y-sub-x)\n        full-set (clojure.set/union x y)]\n    (clojure.set/difference full-set full-diff)))","user":"5414b7c4e4b01498b1a719ed"},{"problem":81,"code":"(fn [s1 s2]\n  (set (for [x s1\n             y s2\n             :when (= x y)]\n         x)))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":81,"code":"(fn [a b]\n  (into #{}\n        (filter a b)))","user":"5461dc79e4b01be26fd746a8"},{"problem":81,"code":"(fn [a b] (set (remove nil? (map (fn [x] (if (.contains b x) x)) a))))","user":"564a985be4b0284900eef65c"},{"code":"(fn [a b]\n  (apply disj a (apply disj a b)))","problem":81,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":81,"code":"(fn [x y]\n    (loop [f x results #{}]\n      (let [_ (first f)\n            more (rest f)]\n        (cond\n          (empty? f) results\n          (contains? y _) (recur more (conj results _))\n          :else (recur more results)))))","user":"57213df6e4b0c5bde472c0ab"},{"problem":81,"code":"(fn [x y] (apply hash-set (filter #(contains? y %) x)))","user":"5a04e923e4b01bb0ae8afda9"},{"code":";(fn [x y]\n;  (filter x y))\n#(apply hash-set (filter % %2))","problem":81,"user":"5012aefce4b0c8732600222a"},{"code":"(fn my-inter [a b]\n    (set (filter #(contains? b %) a)))","problem":81,"user":"4fe83efbe4b07c9f6fd12c3b"},{"code":"(fn [a b] (set (filter #(not(nil? %)) (map b a))))","problem":81,"user":"4e6f8431535d5021c1a8961e"},{"problem":81,"code":"(fn\n  [a b]\n  (into #{}\n  (filter\n   (fn [e] (contains? b e))\n   a\n   )\n        )\n  )","user":"57f55632e4b0903ccab3dcf1"},{"problem":81,"code":"(fn [set1 set2]\n  (set (filter #(contains? set1 %) set2)))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":81,"code":"(fn [set-1 set-2]\n   (set (for [element-1 set-1\n              element-2 set-2\n              :when (= element-1 element-2)]\n          element-1)))","user":"510a3cd4e4b06956752d35ad"},{"problem":81,"code":"(fn [sa sb]\n  (let [cnta (count sa)\n        cntb (count sb)\n        coll (if (>= cnta cntb) sa sb)\n        keys (if (>= cnta cntb) sb sa)]\n    (set (filter #(contains? coll %) keys))))","user":"5294a49be4b02ebb4ef7500f"},{"code":"(fn my-intersection [list1 list2]\n  (if (or (empty? list1) (empty? list2))\n    #{}\n    (if (contains? list1 (first list2))\n      (conj (my-intersection list1 (rest list2)) (first list2))\n      (my-intersection list1 (rest list2)))))","problem":81,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":"#(apply hash-set (filter %1 %2))","problem":81,"user":"4db599e6535d87e67b28fe11"},{"code":"(fn [a b]\n  (set (filter (fn [x] (if (some #(= x %) b) x)) a)))","problem":81,"user":"4edd4b77535d10e5ff6f5328"},{"problem":81,"code":"#(reduce (comp set filter) %&)","user":"5d2e5065e4b01671435dbcae"},{"problem":81,"code":"(fn [as bs]\n  (set (mapcat (fn [a]\n                 (filter (fn [b] (= a b))\n                         bs))\n               as)))","user":"5895477fe4b00487982d527c"},{"problem":81,"code":"(fn [a b]\n  (set (filter #(contains? b %) a ))\n  )","user":"58224c53e4b04b46fc4b0f92"},{"problem":81,"code":"(fn [x y]\n    (if (> (count x) (count y))\n      (recur y x) \n      (reduce (fn [result item]\n                (if (contains? y item)\n                  result\n                  (disj result item)))\n              x x)))","user":"55aa1637e4b0988bba2ad949"},{"code":"(fn [a b]\n (reduce conj #{}  (filter #(not ( nil? %))  (map #(if (contains? b % ) %) a))))","problem":81,"user":"515ff4b9e4b0e2be8aa20bd9"},{"code":"(fn [s1 s2]\r\n  (set (filter #(s2 %)\r\n               s1)))","problem":81,"user":"4de2f44f535d08e6dec9fdec"},{"problem":81,"code":"(fn [a b] \n  (let [u (clojure.set/union a b), anb (clojure.set/difference a b), bna (clojure.set/difference b a)]\n    (clojure.set/difference u anb bna)\n))","user":"54524afbe4b0e397800069bc"},{"code":"(fn [set1 set2]\n  (clojure.set/select \n    #(and (contains? set1 %) (contains? set2 %))\n    (clojure.set/union set1 set2)))","problem":81,"user":"4f92884de4b0dcca54ed6caf"},{"code":"(fn [x y]\n  (loop [comp-set y inter #{}]\n    (let [found (some x comp-set)]\n      (if (or (empty? comp-set) (= found nil))\n        inter\n        (recur (rest comp-set) (conj inter found))))))","problem":81,"user":"51991a89e4b068aa333628fd"},{"code":"#(loop [a %1 r #{}]\n  (if (or (empty? a) (empty? %2))\n    r\n    (let [h (first a)]\n      (if (contains? %2 h)\n        (recur (rest a) (conj r h))\n        (recur (rest a) r)))))","problem":81,"user":"4e25176e535d04ed9115e829"},{"code":"(fn f81 [x y]\n   (reduce (fn [a b] (if (some #(= b %) x) (conj a b) a)) #{} y))","problem":81,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn [set1 set2]\r\n  (loop [s set1 e #{}]\r\n    (let [f (first s)]\r\n      (if (nil? f) e\r\n        (recur \r\n          (rest s)\r\n          (if (set2 f) (conj e f) e))))))","problem":81,"user":"4dee4a9c535d08e6dec9fe11"},{"problem":81,"code":"(fn\n  [a b]\n  (letfn [(helper\n            [acc x]\n            (if (contains? b x)\n              (conj acc x)\n              acc))]\n    (reduce helper #{} a)))","user":"5813e208e4b0f478707a061b"},{"code":"(fn [a  b]\n  (clojure.set/difference a (clojure.set/difference a b)))","problem":81,"user":"5003deb9e4b0678c553fc445"},{"code":"(fn [a b] \n  (set (filter #(contains? b %) a)))","problem":81,"user":"5272ccf1e4b03e8d9a4a7450"},{"code":"#(into #{} (keep %1 (seq %2)))","problem":81,"user":"4e5f034b535d8a8b8723a2d9"},{"problem":81,"code":"(fn my-intersection\n  [a b] \n  (set (filter #(contains? b %) a)))","user":"59e68254e4b0249b728206fc"},{"problem":81,"code":"#(into #{} (filter (fn [x] (not= x nil)) (map % %2)))","user":"5658acabe4b0f9d632dd84b7"},{"problem":81,"code":"(fn intr [& sets]\n  (reduce (fn [l r] (set (filter #(contains? l %) r))) sets))","user":"551afdf8e4b07993ea3788cb"},{"code":"(fn my-intersection [ls rs]\r\n  (if (empty? rs)\r\n    #{}\r\n    (let [f (first rs)]\r\n      (if (ls f)\r\n        (conj (my-intersection ls (rest rs)) f)\r\n        (my-intersection ls (rest rs))))))","problem":81,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn[a b]\n  (set (filter (fn [a] a) (for[aa a]\n    (if (get b aa) aa)))))","problem":81,"user":"52196842e4b0890f2f822bfa"},{"problem":81,"code":"(fn [a b]\n  \t(into #{} (filter (partial contains? a) b)))","user":"513facf5e4b00f13ea1bd892"},{"code":"#(set (filter (fn [e] (and (contains? % e)\n                           (contains? %2 e)))\n              (concat (seq %) (seq %2))))","problem":81,"user":"4f404dcee4b0e243712b1fb0"},{"problem":81,"code":"#(loop [coll %1\n         result #{}]\n      (if (empty? coll)\n          result\n          (recur (drop 1 coll) (if (contains? %2 (first coll))\n                                   (conj result (first coll))\n                                         result))\n          ))","user":"6074e278e4b069485764de51"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [s1 set1\n         s2 set2\n         r #{}]\n         (if (empty? s1)\n           r\n           (if (contains? s2 (first s1))\n             (recur (rest s1) s2 (conj r (first s1)))\n             (recur (rest s1) s2 r)))))","user":"590253e3e4b0438e51c2d055"},{"code":"(fn [one two] (loop [x (seq one)\n                     y two\n                     s #{}]\n                (if (empty? x)\n                  s\n                  (recur (rest x) \n                         y \n                         (if (contains? y (first x))\n                                      (conj s (first x)) \n                                      s)))))","problem":81,"user":"50214ffae4b0ef1d2d4433bc"},{"code":"(fn [set1 set2]\n  (set (reduce\n    (fn [acc x]\n      (if (contains? set1 x) (conj acc x) acc))\n    #{}\n    set2)))","problem":81,"user":"4fb1325de4b081705acca276"},{"problem":81,"code":"(fn [coll1 coll2]\n    (if (< (count coll2) (count coll1))\n      (recur coll2 coll1)\n      (reduce (fn [results item] (if (contains? coll2 item) (conj results item) results)) #{} coll1)\n      ))","user":"5683fcafe4b0945ebc182aa8"},{"code":"(fn set-intersection [s1 s2] (set (filter #(contains? s2 %) s1)))","problem":81,"user":"531bad96e4b08068f379ed93"},{"code":"(fn my-intersection [s1 s2]\n  (set (for [x s1 :when (contains? s2 x)] x)))","problem":81,"user":"4ed188c8535d44c135fd68cf"},{"problem":81,"code":"#((comp set filter) (partial contains? %1 ) %2)","user":"58e37946e4b005f69f193cae"},{"code":"#(reduce (fn [s item]\n           (if (contains? %2 item)\n             (conj s item)\n             s))\n          #{}\n          %1)","problem":81,"user":"5080a697e4b01a93d3f38e49"},{"problem":81,"code":"#(reduce (fn [s x] (if (contains? %2 x)\n                     (conj s x)\n                     s)) #{} %1)","user":"6011b89ee4b074f607df66bc"},{"problem":81,"code":"(fn [a b] (set\n             (remove #(not (contains? b %)) a)\n             ))","user":"5f6b35c3e4b02876ed9fd04d"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce\n   (fn [inter n]\n     (if (contains? s2 n)\n       (conj inter n)\n       inter))\n   #{}\n   s1))","user":"576da825e4b0979f8965156c"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter #(get s2 %) s1)))","user":"5ec02e20e4b00a66d4a95288"},{"code":"#(set (for [i % :when (%2 i)] i))","problem":81,"user":"4fde492be4b05e33b9224f8a"},{"problem":81,"code":"(fn [a s] (set ((fn jp [a b] (if (empty? a) () (if (some #(= % (first a)) b) (cons (first a) (jp (rest a) b)) (jp (rest a) b)))) a s)))","user":"544e1794e4b0e39780006980"},{"problem":81,"code":"#(set (for [x %1 :when (contains? %2 x)]\n      x))\n\n; Wow, as beginner, I like dzholev's solution: #(set (filter %1 %2))\n; If I were more advanced, I'm guessing daowen's solution \n; is even more elegant: (comp set filter)","user":"5535e822e4b09218d5f44fb2"},{"code":"(fn [s t]\n  (letfn [\n    (isect [a b]\n      (if (empty? a) '()\n        (if (contains? b (first a))\n          (cons (first a) (isect (rest a) b))\n          (isect (rest a) b))))]\n    (set (isect (seq s) t))))","problem":81,"user":"4f569218e4b0a7574ea71826"},{"problem":81,"code":"(fn [s1 s2] (set (filter (fn[e1](contains? s2 e1))\n                                          s1)))","user":"52faf67ce4b047fd55837005"},{"problem":81,"code":"#(reduce (fn [acc v]\n           (if (get %2 v)\n             (conj acc v)\n             acc))\n         \n         #{}\n         %1)","user":"52d38c51e4b099d49816f0c5"},{"problem":81,"code":"(fn [xset yset]\n  (set\n  \t(for [x xset  \n       \t  :when (contains? yset x)]\n      x)))","user":"5db19599e4b010eb3c36cd05"},{"problem":81,"code":"(fn solution [U V]\n  (set (filter #(and (contains? U %) (contains? V %)) U)))","user":"5e2ef900e4b05b4b015161fc"},{"code":"(fn[x,y] \n   (set (for [i x\n      :when (some #{i} y)]\n        i) ))","problem":81,"user":"52d66ca0e4b09f7907dd135c"},{"code":"(fn [set1 set2]\n  (loop [to-check set1 intersect #{}]\n    (cond\n      (empty? to-check)\n      intersect\n      (contains? set2 (first to-check))\n      (recur (rest to-check) (conj intersect (first to-check)))\n      :else\n      (recur (rest to-check) intersect))))","problem":81,"user":"4dadb891c9a9d6ed3699dc57"},{"code":";;attempt one worked, but this sucks from a readability standpoint\n#_(fn [s1 s2] (let [diff clojure.set/difference]\n              (diff s1 (diff s1 s2))))\n   ;;attempt two, using set and filter....(filter can take a set as a predicate...the more you know)\n#_(fn [s1 s2] (set (filter s1 s2)))\n                   ;;yay that worked! \n   ;;now lets refactor... \n#_(set (filter %1 %2))\n                   ;;woot, another succesful attempt!\n  ;;lets go nuts this time...\n(comp set filter)","problem":81,"user":"50e1bdd8e4b019fc399ce17f"},{"problem":81,"code":"(fn [a b] \n  ( set (\n      filter \n      #(and (contains? a %) (contains? b %)) \n      (clojure.set/union a b)\n    )\n  )\n)","user":"5717d674e4b07c98581c3b1a"},{"problem":81,"code":"(fn my-intersect [s1 s2]\n  (let [u (conj s1 s2)]\n    (reduce\n     (fn [latest next]\n       (if (and (s1 next) (s2 next))\n         (conj  latest  next)\n         latest\n         )\n       )\n     #{}\n     u\n     )\n    )\n  )","user":"56d74c88e4b0ea9b8538f7d9"},{"problem":81,"code":"(fn [a b]\n  (set (for [x a :when (b x)] x))\n)","user":"5943abb6e4b060784b3b792b"},{"problem":81,"code":"(fn [s1 s2] \n  (set (filter #(contains? s2 %) s1)))","user":"52540bcce4b0541d1855b952"},{"problem":81,"code":"(fn [m1 m2] (into #{} (keep #(m2 %) m1)))","user":"4fdf4e2be4b05e33b9224f96"},{"problem":81,"code":"(fn [set1 set2] (into #{} (filter (fn [item] (contains? set2 item)) set1)))","user":"5885bea8e4b0f1effa3b76bf"},{"code":"(fn [s1 s2]\n   (clojure.set/difference\n    (clojure.set/union s1 s2)\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)\n   )))","problem":81,"user":"52d42021e4b09f7907dd132a"},{"code":"(fn [x y]\n  (loop [xs x result #{}]\n    (if (empty? xs)\n      result\n         (if (contains? y (first xs))\n              (recur (rest xs) (conj result (first xs)))\n               (recur (rest xs) result)\n           )\n      \n      )))","problem":81,"user":"51d10b1fe4b067c36548635e"},{"code":"(fn x [col1 col2] (into #{} (filter #(contains? col1 %) col2)))","problem":81,"user":"5167e4a2e4b0c5a4140a3099"},{"problem":81,"code":"(fn [s1 s2]\n    (letfn [(dups [c] (for [[n freq] (frequencies c)\n                            :when (> freq 1)]\n                        n))]\n      (set (dups (concat s1 s2)))))","user":"5777cffae4b0979f89651651"},{"problem":81,"code":"#(reduce (fn [acc v] (if (contains? %2 v) (conj acc v) acc)) #{} %1)","user":"55c20bd0e4b0e31453f64972"},{"problem":81,"code":"#(set (for [s1 %1 s2 %2 :when (= s1 s2)] s1))","user":"5f309144e4b0574c87022c23"},{"problem":81,"code":"( fn [x y] ( \n            loop [ s y res #{} ] \n            \t(if (empty? s) \n                  res\n                  (recur (rest s) (if (x (first s)) (conj res (first s)) res) )\n                  )\n            )\n  )","user":"5b3aa98be4b02d533a91bbca"},{"code":"(fn [a b] (reduce (fn [l r] (if (contains? a r) (conj l r) l)) #{} b))","problem":81,"user":"4e0e0529535d04ed9115e7b9"},{"code":"(fn [s1 s2] (set (filter (fn [e] (= e (get s2 e))) s1)))","problem":81,"user":"4eb2e6ca535d7eef3080734f"},{"problem":81,"code":"(fn [xs ys]\n   (apply (partial disj xs) (clojure.set/difference xs ys)))","user":"603f6623e4b0d5df2af2231f"},{"code":"(fn ff[a b] \n  (loop [a a res #{}] \n    (let [k (first a) \n          isinb (get b k)] \n      (if k \n        (recur \n          (next a) \n          (if isinb \n            (conj res k) \n            res)) \n        res))))","problem":81,"user":"4f1fd734535d64f6031464a5"},{"code":"(fn [set1 set2]\n  (set (filter #(set2 %) set1)))","problem":81,"user":"501688f7e4b052339a490e7a"},{"code":"(fn [left right]\n    (apply hash-set (filter #(right %) left)))","problem":81,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":81,"code":"(fn [a b] (->> a\n    (filter #(contains? b %))\n    (set)\n   ))","user":"5901158de4b0438e51c2d039"},{"problem":81,"code":"(fn [setA setB]\n  (clojure.set/difference \n    (clojure.set/difference\n      (clojure.set/union setA setB)\n      (clojure.set/difference\n        (clojure.set/union setA setB)\n        setA)\n      )\n   (clojure.set/difference\n     (clojure.set/union setA setB)\n     setB\n   )\n ) \n)","user":"53f17931e4b0742d9025b0dd"},{"problem":81,"code":"(fn [x y] (loop [r x result #{}] (if (empty? r) result (recur  (rest r) (if (contains? y (first r)) (conj result (first r)) result)))))","user":"56427910e4b08d4f616f5f19"},{"problem":81,"code":"#(->>(map %1 %2)\n      (remove nil?)\n      (set))","user":"5954eef0e4b066ee0a44af17"},{"code":"#(set (for [x %1, y %2 :when (= x y)] x))","problem":81,"user":"4f04c577535dcb61093f6be1"},{"code":"#(clojure.set/difference %1 (clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))","problem":81,"user":"5048bcf8e4b06e644c63f1ae"},{"code":"(fn f [x y]\n  (let [[h & t] (seq x)]\n    (if (some #(= % h) y)\n      (cond (empty? t) #{h}\n            :else (conj (f t y) h))\n      (cond (empty? t) #{}\n            :else (f t y)))))","problem":81,"user":"4ead2841535d7eef3080731e"},{"code":"(fn [col1 col2] \n  (set (filter #(contains? col2 %) col1)))","problem":81,"user":"4e739e13535dff18050a9c76"},{"code":"#(loop [sets %1 result #{}]\n         (if (empty? sets) result\n           (recur (rest sets) (if (contains? %2 (first sets)) (conj result (first sets)) result)\n                  )\n         ))","problem":81,"user":"510d3dc6e4b078ea71921132"},{"problem":81,"code":"(fn intsect [a b]\n   (let [i (atom #{})]\n     (doseq [x a]\n       (when (contains? b x)\n         (swap! i conj x)))\n     @i))","user":"5b780a8ce4b047b03b2036f6"},{"code":"(fn\n  [s1 s2]\n  (clojure.set/select #(and (contains? s1 %) (contains? s2 %)) (clojure.set/union s1 s2)))","problem":81,"user":"525d490ae4b0cb4875a45d70"},{"problem":81,"code":"#(let [ s1 %]\n  (loop [s2 %2 re #{}] \n    (cond\n      (not (first s2)) re\n      (contains? s1 (first s2)) (recur (rest s2) (conj re (first s2)))\n      :else (recur (rest s2) re))))","user":"5dc12b0ae4b0e59a23173d84"},{"code":"(fn [a b]\n  (into #{}\n    (filter #(and (a %) (b %)) (concat a b))))","problem":81,"user":"4fabb1dce4b081705acca21a"},{"problem":81,"code":"#(loop [a %1 b %2 r #{}]\n   (cond (empty? a) r\n         (contains? b (first a)) (recur (rest a) b (conj r (first a)))\n         :else (recur (rest a) b r)\n   ))","user":"594263cbe4b060784b3b790a"},{"problem":81,"code":"(fn [a b] (reduce #(if (nil? (b %2)) % (conj % %2)) #{} a))","user":"54126d0ce4b01498b1a719d5"},{"problem":81,"code":"(fn my-intersection [set1 set2] (set (for [x set1 :when (set2 x)] x)))","user":"56603e5fe4b068f2fe63dc4a"},{"problem":81,"code":"(fn [a b] (let [x (clojure.set/difference a b)] (clojure.set/difference a x)))","user":"5562f08ae4b0c656e3ff17df"},{"code":"(fn [set1 set2] (set (filter (fn[elt] (set1 elt)) set2)))","problem":81,"user":"4ef7a483535dced4c769f258"},{"code":"(fn myIntersection [set1 set2]\n  (set \n    (filter\n      #(contains? set2 %)\n      set1)))","problem":81,"user":"526ee63de4b03e8d9a4a733f"},{"problem":81,"code":"(fn [s1 s2]\n  (letfn [(not-nil? [v] (if (= v nil) false true))]\n    (into #{} (filter not-nil? (map #(get s1 %) s2)))\n  )\n)","user":"54e5bdf2e4b024c67c0cf7fe"},{"code":"#(apply hash-set (filter % %2))","problem":81,"user":"4ee4f4a9535d1385b2869d85"},{"problem":81,"code":"(fn [s1 s2]\n    (clojure.set/select #(contains? s2 %) s1)\n    )","user":"529e8ba9e4b04e0c58e87b99"},{"problem":81,"code":"(fn [s1 s2] (set (filter #(not (nil? (s2 %))) s1)))","user":"539dcb24e4b0b51d73faaf3d"},{"code":"#(clojure.set/difference (clojure.set/union % %2) (clojure.set/union (clojure.set/difference (clojure.set/union % %2) %2) (clojure.set/difference (clojure.set/union % %2) %)))","problem":81,"user":"51a865dfe4b08d8ec191b80f"},{"problem":81,"code":"#(apply hash-set (filter identity (map %1 %2)))","user":"567476bde4b05957ce8c6139"},{"problem":81,"code":"(fn my-intersection [xs ys]\n  (loop [xs xs, ys ys, acc #{}]\n    (cond\n      (empty? xs) acc\n      (contains? ys (first xs)) (recur (rest xs) ys (conj acc (first xs)))\n      :else (recur (rest xs) ys acc))))","user":"5b51b9f8e4b02d533a91bcfe"},{"code":"(fn [coll1 coll2] (set (filter (fn [x] (contains? coll1 x)) coll2)))","problem":81,"user":"4f6b4237e4b07046d9f4efa9"},{"problem":81,"code":"(fn [s1 s2] (set (concat (filter #(contains? s2 %) s1) (filter #(contains? s1 %) s2))))","user":"5e17bb46e4b00200644e3d5a"},{"problem":81,"code":"(fn [coll1 coll2] (into #{} \n                        (for [a coll1\n                        \t  b coll2\n                        \t  :when (= a b)] a)))","user":"5dbe27c3e4b09f47823971c4"},{"problem":81,"code":"(fn solve [x y] (set (filter #(contains? y %) x)  ))","user":"56f258d3e4b04a395b9a04a1"},{"code":"(fn [a b]\n  (clojure.set/difference a (clojure.set/difference a b))\n)","problem":81,"user":"4fe610fde4b0e8f79898fece"},{"code":"(fn [a b]\n(apply hash-set (filter #(contains? a %) b))\n  )","problem":81,"user":"50f4894be4b004d364930528"},{"problem":81,"code":"(fn [a b]\n  (reduce (fn [rst x] \n            (let [result (filter #(= x %) a)]\n              (if (empty? result)\n                rst\n                (into rst result)))) \n          #{} \n          b))","user":"55a0d79fe4b0acc240e31502"},{"problem":81,"code":"(fn mySetIntersectin\n  [lst1\n   lst2]\n  (loop [lst1  lst1\n         result ()]\n    (if (empty? lst1)\n      (set result)\n      (if (contains? lst2 (first lst1))\n        (recur (rest lst1)\n               (cons (first lst1) result))\n        (recur (rest lst1)\n               result)))))","user":"5c74b043e4b0fca0c16227ce"},{"problem":81,"code":"(fn my-intersection\n  [first-set second-set]\n  (set\n    (filter (fn [num]\n              (and\n                (contains? first-set num)\n                (contains? second-set num)))\n\n            (clojure.set/union first-set second-set))))","user":"5c48757fe4b0e06e1360a3c3"},{"problem":81,"code":"(fn func [set1 set2]\n  (set (filter (fn [x] (contains? set2 x)) set1)))","user":"5e805895e4b085ba37836e44"},{"code":"#(\n   into #{}\n   (distinct\n   (apply concat\n   (remove (fn [x] (= (count x) 1))\n   (map second\n   (group-by identity\n   (apply concat %&)))))))","problem":81,"user":"504e3aaae4b0f6ff3350c487"},{"code":"#(reduce (fn [s x] (if (contains? %2 x)  (conj s x) s)) #{} %)","problem":81,"user":"52736ca1e4b03e8d9a4a747e"},{"code":"(fn intersect\n  [setx sety]\n  (let [setx-filtered (filter #(some (partial = %) sety) setx)\n        result-set (filter #(some (partial = %) setx-filtered) sety)]\n    (set result-set)))","problem":81,"user":"4edfb618535d10e5ff6f5343"},{"code":"(fn\n  [a b]\n  (set (filter #(contains? b %) a)))","problem":81,"user":"507a08e4e4b08327cd804a67"},{"problem":81,"code":"(fn intersect [a b]\n   (loop [cur a result #{}]\n     (if (= '() cur)\n       result\n       (if (contains? b (first cur))\n         (recur (rest cur) (conj result (first cur)))\n         (recur (rest cur) result)))))","user":"6090e617e4b03bd49d9f36ce"},{"problem":81,"code":"(fn [a b] (set(filter #(contains? b %) a)))","user":"5eee9352e4b07c55ae4a0512"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [t v] \n            (if (contains? s2 v)\n              (conj t v)\n              t))\n          #{} s1))","user":"54dce62be4b024c67c0cf78b"},{"problem":81,"code":"(fn set-intersection\n  ([arg1 arg2]\n   (set-intersection arg1 arg2 #{}))\n  ([arg1 arg2 inter]\n   (if (empty? arg2)\n     inter\n     (if (contains? arg1 (first arg2))\n       (set-intersection arg1 (rest arg2) (conj inter (first arg2)))\n       (set-intersection arg1 (rest arg2) inter)))))","user":"5d896a64e4b0915913b1d3b8"},{"code":"(fn [a b]\n  (set (mapcat #(when (a %) [%]) b)))","problem":81,"user":"4f504739e4b03ad3f0c10d00"},{"code":"#(set (filter (partial contains? %) %2))","problem":81,"user":"4ea2ddf1535d7eef308072bf"},{"problem":81,"code":"(fn\n  [s1 s2]\n  (set (filter s1 s2)))","user":"4e586949535d8a8b8723a292"},{"code":"(fn [a b] \n  (apply (partial disj (clojure.set/union a b)) (concat (clojure.set/difference a b) (clojure.set/difference b a))))","problem":81,"user":"520f46f9e4b0101e4be6fcee"},{"code":"#(set (remove nil? (for [x %1 y %2] (when (= x y) x))))","problem":81,"user":"53307da1e4b019098a6f8b5e"},{"code":"(fn [s1 s2]  (set (filter #(contains? s2 %) s1)))","problem":81,"user":"504457c0e4b01f6c9a8b2360"},{"problem":81,"code":"(fn [s1 s2] (set (filter (complement nil?) (map (partial some s1) (map vector s2)))))","user":"5519c157e4b00ace28fe6e32"},{"problem":81,"code":"(fn f-intersection [& cols]\n (letfn [(f-once [s1 s2]\n          (loop [i s1 res #{}]\n           (if (empty? i) res\n                          (let [ff (first i)]\n                           (if (s2 ff)\n                            (recur (rest i) (conj res ff))\n                            (recur (rest i) res)\n                            )))))]\n  (reduce f-once cols)\n  )\n )","user":"56f974c0e4b07572ad1a88b1"},{"problem":81,"code":"(fn [left right]\n   (apply sorted-set (reduce (fn [acc itm]\n              (if (contains? right itm)\n                (conj acc itm)\n                acc)) [] left)))","user":"53214efbe4b09d4e7a9b54b2"},{"code":"(fn [s1 s2] (into #{} \n  (distinct (concat (filter s1 s2) (filter s2 s1)))))","problem":81,"user":"4eca7a87535d6d7199dd3705"},{"problem":81,"code":"#(clojure.set/select %1 %2)","user":"56372798e4b0bfe05bf117d0"},{"problem":81,"code":"(fn [s1 s2] \n  (clojure.set/difference \n   (clojure.set/union s1 s2) \n   (clojure.set/union \n    (clojure.set/difference s2 s1) \n    (clojure.set/difference s1 s2))))","user":"5514a60fe4b055c2f668d4d7"},{"problem":81,"code":"(fn inter [set1 set2]\n  (let [num (count set1)\n        list1 (apply list set1)]\n    (loop [x 0\n           interset []]\n      (if (>= x num)\n        (apply hash-set interset)\n        (recur (inc x)\n               (if (get set2 (nth list1 x))\n                 (conj interset (nth list1 x))\n                 interset))))))","user":"568f2059e4b0dcc4269f40df"},{"problem":81,"code":"(fn [s1 s2]\n   (into #{} (for [x s1 :when (s2 x)] x)))","user":"5643a11ee4b0018b46ad8bfb"},{"problem":81,"code":"#(into #{} (filter (fn [x] (contains? % x)) %2))","user":"5d7a748ce4b02e6b30c93547"},{"problem":81,"code":"(fn inter [xs ys]\n  (set\n   (for [x xs :when (ys x)]\n    x)))","user":"58ef4db9e4b056aecfd47dc6"},{"code":"(fn [c1 c2]\n  (into #{} (filter #(contains? c1 %) c2)))","problem":81,"user":"51eab308e4b0f1f103a0d150"},{"problem":81,"code":"(fn [c1 c2]\n  (loop [r #{}\n         c2 c2\n         c1 c1]\n    (if (empty? c1)\n      r\n      (recur (if (contains? c2 (first c1))\n               (conj r (first c1)) r)\n             c2\n             (rest c1)))))","user":"55ff562fe4b00f4cabc57660"},{"code":"(fn my-intersection [s1 s2]\r\n  (clojure.set/difference s1 (clojure.set/difference s1 s2)))","problem":81,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":81,"code":"(fn [s1 s2] (apply disj (into s1 s2) \n                   (into (apply disj s1 s2) (apply disj s2 s1))))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":81,"code":"(fn f [s1 s2]\n  (cond (empty? s1) #{}\n        (s2 (first s1)) (conj (f (rest s1) s2) (first s1))\n        :else (f (rest s1) s2)))","user":"5c62979fe4b0fca0c162264c"},{"problem":81,"code":"(fn [s1 s2]\n  (let [d1 (clojure.set/difference s1 s2)\n        d2 (clojure.set/difference s2 s1)\n        s12 (clojure.set/union s1 s2)]\n    (clojure.set/difference s12 d1 d2))\n  )","user":"60aecd73e4b00e9e6653c49a"},{"code":"(fn [a b] (set (filter (complement nil?) (map a b))))","problem":81,"user":"4ef1ee67535dced4c769f219"},{"code":"(fn my-int [s1 s2]\n  (set\n    (for [i s2 :let [temp (s1 i)] :when (not= temp nil)] temp)))","problem":81,"user":"50611456e4b0dc10a69545a5"},{"code":"(fn inters [a b]\n  (let [ab (set (concat a b))]\n    (reduce (fn [res x] (if (and (a x)\n                                 (b x))\n                          (conj res x)\n                          res))\n            #{} ab)))","problem":81,"user":"4feff3b6e4b0678c553fc31e"},{"code":"#(set (remove nil? (map % %2)))","problem":81,"user":"4f826548e4b033992c121c08"},{"code":"(fn [coll1 coll2]\n  (set (filter #(contains? coll1 %) coll2)\n))","problem":81,"user":"4eb955da535dfed6da9c6d50"},{"problem":81,"code":"(fn [s & sets]\n  (reduce #(set (filter %1 %2)) s sets))","user":"514a3fa5e4b0829bd132edb6"},{"code":"(fn [s1 s2] (clojure.set/select (fn [x] (if (contains? s2 x) true false)) s1))","problem":81,"user":"5213348ae4b0d32679a50652"},{"code":"(fn [a b]\n  (set \n   (filter #(contains? b %) a)))","problem":81,"user":"53800d99e4b06839e8705ebd"},{"problem":81,"code":"#(set (filter %1 %2))\n\n;(fn\n;  [s1 s2]\n;  (set\n;   (for [x s1 y s2 :when (= x y)]\n;     x)))\n\n;#(apply sorted-set \n;        (filter \n;         (fn [x] \n;           (contains? %1 x)) \n;         %2))","user":"58299e03e4b051871117bf46"},{"problem":81,"code":"(fn [s1 s2]\n  (set\n   (map first (filter #(> (count %) 1)\n                      (partition-by identity\n                                    (sort (concat s1 s2)))\n                      )\n        )\n   )\n  )","user":"60752ef6e4b069485764de55"},{"code":"(fn [s1 s2] (into #{} (filter s2 s1)))","problem":81,"user":"518ccf6be4b05e6c8537e386"},{"problem":81,"code":"(fn [a b]\n   (reduce\n   (fn [m e]\n     (if (some #{e} a) (conj m e) m))\n   #{}\n   b))","user":"552d2e4fe4b076ab5578f7e1"},{"code":"(fn intersection2 [a b]\n  (cond\n   (empty? a) #{}\n   (empty? b) #{}\n   (b (first a)) (conj (intersection2 (rest a) b)\n                       (first a))\n   :else (intersection2 (rest a) b)))","problem":81,"user":"5374adc3e4b06d7f452d9e27"},{"problem":81,"code":"(fn [s1 s2]\n         (reduce (fn [new-set x]\n                   (if (contains? s2 x)\n                     (conj new-set x)\n                     new-set)) #{} s1))","user":"570bd29be4b0b0fb43fd06c5"},{"problem":81,"code":"(fn [x y]\n  (set \n    (filter #(contains? y %) \n            x)\n  ))","user":"57c4e8dce4b05aa3c4741cd7"},{"code":"#(set (remove (set (remove % %2)) %2))","problem":81,"user":"4daa374930acd6ed13482a68"},{"problem":81,"code":"(fn [a b]\n  (clojure.set/difference\n   (clojure.set/union a b)\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))","user":"57458b82e4b009280f9f2b4e"},{"problem":81,"code":"(fn [sa,sb] (into #{} (filter sa sb)))","user":"5f686436e4b02876ed9fd03c"},{"problem":81,"code":"(fn [set1 set2] (into #{} (for [x set1 :when (set2 x)] x)))","user":"5a9ac061e4b0d174b936c7c1"},{"code":"#(apply hash-set(filter %1 %2))","problem":81,"user":"4eaf08ce535d7eef3080732d"},{"problem":81,"code":"(fn \n  [a b] \n  (set (filter #(contains? b %) a)))","user":"56df7440e4b0ca2494a095fb"},{"code":"(fn set-intersection[s1 s2]\n  (set (for [x s1 y s2 :when (= x y)] x)))","problem":81,"user":"4fb86dc9e4b081705acca2d8"},{"problem":81,"code":"(fn [set1 set2]\n  (apply disj set1 (apply disj set1 set2)))","user":"564583f0e4b0284900eef607"},{"problem":81,"code":"(fn [& v]\n  (->> v\n      (mapcat identity) \n      (group-by identity)\n      (filter #(= (count v) (count (val %))))\n      (keys)\n      (into #{})\n      )\n  )","user":"57408f87e4b05c31a32c0856"},{"problem":81,"code":"(fn intersect [x y]\n  (reduce #(if (y %2) (conj %1 %2) %1)\n          #{}\n          x))","user":"578cf84ce4b0ebec4cfb7562"},{"code":"#(set (filter (partial get %1) %2))","problem":81,"user":"50f10f7be4b06d9538fe211a"},{"code":"(fn [s1 s2]\n  (into #{} (filter #(s2 %1) s1)))","problem":81,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":81,"code":"(fn [x y] (set (filter (fn [z] (contains? y z)) x)))","user":"53d5d24de4b0e771c302544a"},{"code":"(fn [a b]\n  (->> (filter #(contains? b %) a)\n       (into #{})))","problem":81,"user":"508a2c2fe4b016a2107004a1"},{"problem":81,"code":"(fn [s1 s2]\n    (set (for [x (concat s1 s2) :when (and (s1 x) (s2 x))] x)))","user":"4f9b3532e4b0dcca54ed6d13"},{"code":"#(loop [intersect () set1 %1 set2 %2] \n    (if (empty? set1) \n      (set intersect) \n      (if (= (first set1) (set2 (first set1))) \n        (recur (concat intersect [(first set1)]) (rest set1) set2) \n        (recur intersect (rest set1) set2))\n      ))","problem":81,"user":"52ac2db3e4b0c58976d9ac82"},{"problem":81,"code":"(fn [x y] (set (for [x1 (vec x) y1 (vec y) :when (= x1 y1)]\n                 x1\n                 )))","user":"598d22b1e4b02b9968b84d1a"},{"problem":81,"code":"(fn inter [s1 s2]\n  (set (filter (fn [e1]  (contains? s2 e1)) s1)))","user":"5619a4d0e4b053970a773afd"},{"code":"#(set (filter (comp not nil?) (map %1 %2)))","problem":81,"user":"50b35486e4b03ea88043356a"},{"problem":81,"code":"(fn [x y]\n  (loop[lst '() l x]\n  (if (empty? l) (set lst) \n  (recur (if (contains? y (first l)) (conj lst (first l)) lst ) (rest l)    )\n   )\n     ) )","user":"5e94ff5fe4b0fbed045a37ff"},{"problem":81,"code":"(fn [s1 s2] (set \n             (filter s1 s2)))","user":"57c92bdbe4b05aa3c4741d27"},{"code":"(fn [x y] (set (remove nil? (map x (for [z y] z)))))","problem":81,"user":"4ea09441535d7eef308072a7"},{"code":"(fn inter [s1 s2]\n(into #{} (filter #(not (nil? %)) (for [x s1] (cond (some #{x} s2) x :else nil))))\n)","problem":81,"user":"50588af1e4b06522596eba7d"},{"code":"(fn[s1 s2] (set( filter #(contains? s2 %) s1)))","problem":81,"user":"4fc0221ce4b081705acca322"},{"problem":81,"code":"(fn [s1 s2] (set (filter #(contains? s2 %) (seq s1))))","user":"4f4e78fee4b03ad3f0c10cc8"},{"code":"(fn [a b] (set (remove nil? (for [x a y b] (if (= x y) x)))))","problem":81,"user":"4f7e07f4e4b06e829148e1c9"},{"problem":81,"code":"(fn myint [s1 s2]\n(set (filter #(contains? s1 %) s2)))","user":"5885e90de4b0f1effa3b76c5"},{"code":"(fn [a b] (set (filter #(and (contains? a %) (contains? b %)) (clojure.set/union a b))))","problem":81,"user":"4eadc217535d7eef30807321"},{"problem":81,"code":"(fn [a b]\n  (apply sorted-set (filter #(contains? a %) b)))","user":"58b989dbe4b0888cdc949ccd"},{"code":"#(set (for [i % j  %2 :when (= i j)] i ))","problem":81,"user":"4e8768f6535dceadca469850"},{"problem":81,"code":"(fn set-intr [s1 s2]\n  (cond (nil? (first s2)) #{}\n        (contains? s1\n                  (first s2)) (conj (set-intr s1\n                                              (rest s2))\n                                    (first s2))\n        :else (set-intr s1\n                        (rest s2))))","user":"57614a42e4b0994c1922fb85"},{"code":"(fn [a b] (reduce #(if (contains? b %2) %1 (disj %1 %2)) a a))","problem":81,"user":"4e823f41535db62dc21a62c8"},{"code":"(fn [a b]\n  (set (for [x a, :when (b x)] x)))","problem":81,"user":"4e2d84bf535deb9a81d77f09"},{"code":"(fn [s1 s2]\r\n   (reduce (fn [result item]\r\n             (if (contains? s2 item)\r\n               result\r\n               (disj result item)))\r\n           s1 s1))","problem":81,"user":"4dc29a1d535d020aff1edf96"},{"code":"(fn [s1 s2]\n  (set (filter (fn [el] (contains? s1 el))\n          s2)))","problem":81,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":81,"code":"(fn [s1 s2] (reduce #(if (contains? s2 %2) (conj % %2) %) #{} s1))","user":"57002b81e4b08d47c97781c7"},{"problem":81,"code":"(fn [set-a set-b]\n  (set (filter #(contains? set-b %) set-a)))","user":"605b319de4b079a07f8593f7"},{"problem":81,"code":"(fn[s1 s2]\n  (reduce #(if (contains? s2  %2) (conj %1 %2) %1)  #{} s1)\n )","user":"5649615be4b0284900eef641"},{"problem":81,"code":"(fn [s s'] (set (filter (partial contains? s') s)))","user":"548f5086e4b0e286459a1239"},{"code":"(fn intersect [x y]\n  (into #{} \n        (when-not (empty? x)\n    \t\t(if (contains? y (first x))\n      \t\t    (cons (first x) (intersect (rest x) y))\n      \t\t\t(intersect (rest x) y)))))","problem":81,"user":"5220bc0fe4b0e6a83c8925a7"},{"problem":81,"code":"(fn intersect [s1 s2]\n  (set (filter s2 s1)))","user":"569f4dabe4b0542e1f8d1491"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce (fn [acc elem] (if (contains? s2 elem) (conj acc elem) acc)) #{} s1))","user":"546d41bde4b00cfc9eacc18c"},{"problem":81,"code":"#(clojure.set/difference (clojure.set/union % %2) (clojure.set/union (clojure.set/difference %2 %) (clojure.set/difference % %2)))","user":"58186016e4b0c0e9c07b83ad"},{"problem":81,"code":"(fn [s1 s2]\n  (loop [out #{} in (seq s1)]\n    (if (empty? in)\n      out\n      (recur (if (contains? s2 (first in)) (conj out (first in)) out) (rest in)))))","user":"564a5a09e4b0284900eef656"},{"problem":81,"code":"#(set (reduce (fn [acc i]\n                   (println (contains? %2 i))\n                   (if (contains? %2 i)\n                     (conj acc i)\n                     acc) ) [] %1))","user":"5a18488ee4b0ff51aa4b31e5"},{"problem":81,"code":"(fn [a b] (set (for [i a :when (contains? b i)] i)))","user":"584dadebe4b0b7285a6f4e44"},{"problem":81,"code":"(fn fi [a b](clojure.set/union (clojure.set/select #(contains? a %) b)(clojure.set/select #(contains? b %) a)))","user":"57752a2de4b0979f89651613"},{"problem":81,"code":"(fn [st1 st2]\n  (set (filter st1 st2))\n  )","user":"5f84f110e4b0375e81f54e79"},{"problem":81,"code":"(fn intersection-1 [s1 s2]\n  (reduce\n   (fn [xs x]\n     (if (contains? s1 x)\n       (conj xs x)\n       xs)) #{} s2))","user":"5693a53ee4b0dcc4269f4106"},{"code":"#(set (filter (apply comp %&) (apply concat %&)))","problem":81,"user":"500aa15ee4b03d00572d2d76"},{"problem":81,"code":";(fn [s1 s2]\n;  (reduce (fn [s3 x]\n;            (if (contains? s2 x)\n;              (conj s3 x)\n;              s3))\n;          #{}\n;          s1))\n(fn [s1 s2]\n  (set (filter s1 s2)))","user":"60794173e4b0a637ed78035d"},{"problem":81,"code":"(fn my-intersection [a b & tail]\n  (loop [x a y b res #{}] ;;run through first set till empty -> right elements in res\n    (if (empty? x) ;; reade if x is empty\n      (if (empty? tail) ;; we intersect the two first sets and throw the result and the tail back into the function\n        res\n        (apply my-intersection (conj tail b)) \n        )\n      (let [elem (first x)]\n        (if (contains? y elem)\n          (recur (rest x) y (conj res elem))\n          (recur (rest x) y res)\n          )\n        )\n      )\n    )\n  )","user":"5a621702e4b0512ff01cd983"},{"problem":81,"code":"(fn [s1 s2]\n  (if (> (count s1) (count s2))\n\t(set (filter (partial contains? s1) s2))\n    (set (filter (partial contains? s2) s1))))","user":"5edfb1e5e4b0c7845d86b107"},{"problem":81,"code":"(fn [& args] (apply hash-set (filter (fn [x] (every? (fn [inpset] (contains? inpset x)) args)) (first args))))","user":"505caadfe4b0bcb5664c3d3e"},{"problem":81,"code":"(fn [s1 s2]\n  (into #{}\n        (for [x s1\n              y s2\n              :when (= x y)]\n          x)))","user":"5ad76df9e4b0ea6055cfac18"},{"problem":81,"code":"(fn [a b ](set (for [x a y b :when (= x y)] x)))","user":"598d0dc3e4b02b9968b84d18"},{"problem":81,"code":"(fn\n  [a b]\n  (let [u (clojure.set/union a b)]\n    (clojure.set/difference\n      u\n      (set (filter (complement #(and (contains? a %) (contains? b %))) u)))))","user":"55a5e2f7e4b0acc240e31550"},{"problem":81,"code":"(fn [x y]\n  (set (filter (fn [s](x s)) y)))","user":"528c381ce4b0239c8a67aeb2"},{"code":"(fn [a b] (reduce #(if-let [x (b %2)] (conj % %2) %) #{} a))","problem":81,"user":"50d93c53e4b0fd36a4b89223"},{"problem":81,"code":"(fn [s1 s2] \n  (into #{} (filter (fn [e] (contains? s2 e)) s1)))","user":"57f80350e4b0d3187e90090c"},{"problem":81,"code":"#(into #{} (filter identity (map %2 %1)))","user":"5e121a89e4b099d064962fe4"},{"code":"(fn[s t](set(filter #(get t %)s)))","problem":81,"user":"4f03d0fe535dcb61093f6b6d"},{"problem":81,"code":"(fn [xs ys]\n  (let [p (fn [x] (some #(= x %) ys))]\n    (set (filter p xs))))","user":"541b41d1e4b01498b1a71a65"},{"problem":81,"code":"(fn [s1 s2]\n    (set (filter #(contains? s2 %) s1)))","user":"5ac6ef9be4b0e27600da7779"},{"code":"#(set (flatten (for [x %1] (for [y %2 :when (= x y)] x))))","problem":81,"user":"4f8c5f4fe4b02e764a0a5198"},{"code":"(fn [& sets]\n  (loop [first-set (first sets) other-sets (rest sets)]\n    (if (empty? other-sets)\n        first-set\n        (recur (set (filter first-set (first other-sets)))\n               (rest other-sets)))))","problem":81,"user":"4e7c8fd1535db169f9c796be"},{"problem":81,"code":"(fn [s1 s2]\n  (into #{} (#(filter s1 %) s2)))","user":"54651faee4b01be26fd746d6"},{"problem":81,"code":"(fn inters [col1 col2] (set(filter col1 col2)))","user":"58eba5cce4b056aecfd47d41"},{"problem":81,"code":"(fn mynts [seta setb]\n  (let [together (sort (concat seta setb))\n        grouped (partition-by identity together)\n        weeded (filter (fn [x] (> (count x) 1)) grouped)]\n    (set (apply concat weeded))))","user":"566f3e18e4b0a866af6896e7"},{"code":"(fn [a b]\n  (reduce\n   (fn [c v]\n     (if (b v) (conj c v) c)) #{} a))","problem":81,"user":"50fa01bce4b07934dda8b0ba"},{"problem":81,"code":"(fn intersect [& sets]\n                 (let [_sets (map set sets)  un (apply clojure.set/union _sets)]\n                   (set (filter (fn [el] (every? identity (map #(contains? % el) _sets)) ) un ))))","user":"561814bae4b06b1bb2182a1a"},{"code":"(fn [a b] (reduce (fn [acc val] (if (b val) (conj acc val) acc)) #{} a))","problem":81,"user":"52c1f404e4b07a9af5792370"},{"code":"(fn [sa sb]\n  (set\n  (filter #(contains? sa %)  sb)))","problem":81,"user":"5028bce0e4b01614d1633ffb"},{"code":"(fn [a b] (set(filter #(a %) b)))","problem":81,"user":"4f3c0c0fe4b0e243712b1f3d"},{"problem":81,"code":"(fn my-intersection\n  [xs ys]\n  (set (filter (fn [x] (some #(= x %) ys)) xs)))","user":"579f89d5e4b05302be0b72ff"},{"code":"(fn [a b]\n    (let [union_ab (clojure.set/union a b)\n          diff_ab (clojure.set/difference a b)\n          diff_ba (clojure.set/difference b a)\n          diff1 (clojure.set/difference union_ab diff_ab)\n          diff2 (clojure.set/difference diff1 diff_ba)]\n      diff2))","problem":81,"user":"4fa2fa5ee4b081705acca186"},{"problem":81,"code":"(fn\n\t[a b]\n\t(reduce\n\t #(if (contains? b %2) (conj %1 %2) %1)\n\t #{} a))","user":"53da3fcde4b0e771c3025497"},{"problem":81,"code":"(fn [coll1 coll2]\n  (into #{} (filter coll1 coll2)))","user":"5f755d0be4b02876ed9fd0a9"},{"problem":81,"code":"(fn [s1 s2] \n  (set (filter #(and (s1 %) (s2 %)) (into () (clojure.set/union s1 s2)))))","user":"58934052e4b00487982d523a"},{"code":"(fn [s1 s2]\n  (loop [keep #{}\n         seq1 (seq s1)]\n     (if (empty? seq1) keep\n       (let [nxt (first seq1)\n             remain (rest seq1)]\n        (if (contains? s2 nxt)\n            (recur (conj keep nxt) remain)\n            (recur keep remain))))))","problem":81,"user":"4f036fb3535dcb61093f6ac8"},{"code":"(fn [a b] \n  (set (filter #(contains? a %) b)))","problem":81,"user":"52761edae4b03e8d9a4a74d4"},{"code":"(fn in [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))))","problem":81,"user":"52aa16d1e4b0c58976d9ac5a"},{"problem":81,"code":"#(clojure.set/difference  \n    (clojure.set/union %1 %2)\n    (clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))","user":"57dafe97e4b0bd073c20241c"},{"code":"(fn[x y]\n  (->> x\n       vec\n       (map y)\n       (filter (comp not nil?))\n       set))","problem":81,"user":"506c0a02e4b0eda3100c090d"},{"code":"(fn [a b] (set (filter #(contains? b %1) a)))","problem":81,"user":"52295917e4b04c906c9c6a6f"},{"problem":81,"code":"(fn [c1 c2]\n  (into #{} (filter c1 c2)))","user":"53ea3a63e4b036ad0777e4dc"},{"code":"(fn set-intersection [coll1 coll2]\n  (set (map first (filter #(> (last %) 1) (seq (frequencies (concat coll1 coll2)))))))","problem":81,"user":"4e4bd94b535dc968683fc4d7"},{"problem":81,"code":"#(into #{} (sort (apply list (filter (partial contains? %2) %1))))","user":"5e947a69e4b0fbed045a37f8"},{"code":"(fn [set1 set2]\n   (set (filter #(contains? set2 %) set1))\n   )","problem":81,"user":"51a54fb4e4b0def3c5c586a3"},{"problem":81,"code":"#(->> (filter %1 %2)\n             (apply sorted-set))","user":"579ea15ee4b05b1deef9ae2a"},{"problem":81,"code":"(fn [x y] (set(filter #(contains? y %) x)))","user":"5a534241e4b05d388ecb6c0a"},{"problem":81,"code":"(fn [r s] (set (filter s r)))","user":"541709b0e4b01498b1a71a06"},{"problem":81,"code":"(fn [s1 s2] (reduce (fn [s x] (if (s1 x) (conj s x) s)) #{} s2))","user":"548cd813e4b0e286459a1211"},{"code":"(fn [s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n             result\n                     (disj result item)))\n           s1 s1)))","problem":81,"user":"5100d7dbe4b04f1d96d946df"},{"code":"; Variadic\n(fn [& s] (set (filter (fn [n] (every? #(contains? % n) s)) (apply concat s))))","problem":81,"user":"527818f7e4b03e8d9a4a7519"},{"problem":81,"code":"(fn [a b]\n    (into #{}\n         (filter identity (map #(b %) a))))","user":"603ae21de4b0d5df2af222fb"},{"problem":81,"code":"(fn [ s t ]\n    (set\n        (for [ x s y t :when (= x y)] x)))","user":"5398305fe4b0b51d73faaef6"},{"code":"(fn [s1 s2]\n  (if \n    (> (count s2) (count s1))\n    (recur s2 s1)\n    (reduce \n      (fn [result item]\n        (if (contains? s2 item)\n          result\n          (disj result item)))\n      s1 s1)))","problem":81,"user":"4e131443535d04ed9115e7d3"},{"code":"#(loop [[h & t] (seq %1), set2 %2, result []]\n  (if \n    (do (println h) h)\n    (recur t set2\n           (if \n             (contains? set2 h) \n             (conj result h) \n             result))\n    (set result)))","problem":81,"user":"4eabb245535d7eef30807319"},{"problem":81,"code":"#(apply sorted-set(filter (partial contains? %1) %2))","user":"5481be5fe4b0e286459a1172"},{"code":"(fn [s1 s2]\n     (set (filter s1 s2)))","problem":81,"user":"537bde5de4b06839e8705e73"},{"problem":81,"code":"(fn [a b]\n  (set\n   (filter #(contains? b %) a)))","user":"5573ffb5e4b0aa18f790f3fd"},{"code":"#(clojure.set/difference\n    (clojure.set/union % %2)\n    (clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))\n)","problem":81,"user":"52fba50ce4b047fd5583700d"},{"code":"(fn [a b]\n          (into #{} (filter #(contains? b %) a)))","problem":81,"user":"504e0136e4b078edc5f5938e"},{"problem":81,"code":"(fn sec [s1 s2] (reduce #(if (contains? s1 %2)\n                            (conj %1 %2)\n                            %1) #{} s2))","user":"54f09599e4b024c67c0cf89d"},{"problem":81,"code":"(fn [a b]\n  (into #{} (filter #(contains? a %) b)))","user":"5195fadee4b04c0af7ff3c11"},{"problem":81,"code":"#(into #{} (remove (into #{} (remove %2 %)) %))","user":"53976599e4b0b51d73faaeea"},{"code":"#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/union (clojure.set/difference %2 %1) (clojure.set/difference %1 %2)))","problem":81,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"problem":81,"code":"(fn myIntersection [set1 set2]\n  (set (filter set1 set2))\n)","user":"59e0111ae4b08badc2a0c4e4"},{"problem":81,"code":"(fn [f & sets]\n  (reduce (fn [m e]\n            (set (remove nil? (map #(some #{%} m) e))))\n          f sets))","user":"59fa241ee4b0ca45a743a358"},{"problem":81,"code":"(fn [x y]\n  (reduce (fn [acc i]\n            (if (contains? y i)\n              (conj acc i)\n              acc)) #{} x))","user":"5369d072e4b0243289761ea1"},{"problem":81,"code":"(fn [set1 set2]\n  (into #{} (map first (filter #(> (count %) 1) (partition-by identity (sort (concat set1 set2)))))))","user":"4fbfbd4fe4b081705acca31c"},{"problem":81,"code":"(fn [s t]\n  (into #{} (filter #(contains? s %1) t) ))","user":"5591b61ee4b0604b3f94d580"},{"code":"(fn inters [& sets]\n  (reduce (fn inter-two [set1 set2]\n            (set\n              (filter #(contains? set1 %) set2)))\n          sets))","problem":81,"user":"529e3a4fe4b04e0c58e87b92"},{"code":"(fn  [a b]\n    (set (reduce #(if (nil? (a %2)) %1  (cons %2 %1))  () b)))","problem":81,"user":"5124619ae4b02c3f2a072ccd"},{"problem":81,"code":"(fn [a b] (set (filter #(some #{%} b) a)))","user":"57ed19a3e4b0bfb2137f5b8e"},{"code":"(fn [set-1 set-2]\n  (set (for [x (frequencies (interleave set-1 set-2))\n        :when (> (val x) 1)]\n    (key x))))","problem":81,"user":"50493b52e4b06e84b772a23e"},{"problem":81,"code":"(fn foo [one two]\n (cond (empty? two) #{}\n  (contains? one (first two))\n      (conj (foo one (rest two)) (first two))\n  :else\n      ( foo one (rest two))\n       )\n  )","user":"6038b6b4e4b0d5df2af222ef"},{"problem":81,"code":"(fn [s1 s2]\n  \n  ; loop through the first set\n  (loop [tail s1 result #{}]\n    \n    (let [head (first tail)]\n \t\t\n      (if (nil? head)\n        result\n        \n        ; for each head, check set 2. If it's in there, add it to the result\n        (if (contains? s2 head)\n          (recur (rest tail) (conj result head))\n          (recur (rest tail) result)\n          )\n        \n        )\n      \n      ) ; let end\n    \n    ) ; loop end\n \n) ; fn end","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn [x y]\n       (loop [intersect #{}\n        set1 x\n\t      set2 y]\n\t (if (empty? set1)\n\t   intersect\n\t   (if (contains? set2 (first set1))\n\t     (recur (conj intersect (first set1)) (rest set1) set2)\n\t     (recur intersect (rest set1) set2)))))","problem":81,"user":"4eae2f9e535d7eef30807324"},{"code":"#(apply hash-set (filter (partial contains? %2) %))","problem":81,"user":"52e48632e4b09f7907dd1450"},{"code":"(fn [s1 s2] (disj (into #{} (map #(get s1 %) s2)) nil))","problem":81,"user":"50d8739ae4b01f0871336e68"},{"code":"(fn [s1 s2] (set (for [x s1 y s2 :when (= x y)] x)))","problem":81,"user":"4f601623e4b0defedf855fa3"},{"code":"(fn [c1 c2]\n  (set (filter #(contains? c2 %) c1)))","problem":81,"user":"520612a7e4b0bf4f1882c81c"},{"problem":81,"code":"(fn [a b]  (set (filter #(b %) a)))\n\n;simpler\n;\n;#(set (filter %1 %2))\n;\n;(comp set filter)","user":"55e01f4ee4b050e68259b406"},{"problem":81,"code":"(fn set-intersect [a b]\n  (let [as (sort a)\n        bs (sort b)]\n    (let [intersect-fn \n          (fn intersect-fn [x y s]\n          (if (or (empty? x)\n                  (empty? y))\n            s\n            (let [comp (compare (first x) (first y))]\n              (cond (zero? comp) (intersect-fn (rest x) (rest y) (conj s (first x)))\n                    (pos? comp) (intersect-fn x (rest y) s)\n                    (neg? comp) (intersect-fn (rest x) y s)))))]\n      (intersect-fn as bs #{}))))","user":"4e41a04e535dc968683fc49e"},{"problem":81,"code":"#(clojure.set/difference %1 (apply merge (clojure.set/difference  %1 %2) (clojure.set/difference %2 %1)))","user":"52ee9ac7e4b05e3f0be25ec9"},{"problem":81,"code":"(fn its\n  ([s1 s2 s]\n   (if (empty? s1)\n     s\n     (if (contains? s2 (first s1))\n       (recur (rest s1) s2 (conj s (first s1)))\n       (recur (rest s1) s2 s))))\n  ([s1 s2] (its s1 s2 #{})))","user":"5b73e500e4b047b03b2036ba"},{"code":"(fn [s1 s2] (into #{} (filter s1 s2)))","problem":81,"user":"52b60e94e4b0c58976d9ad3e"},{"code":"#(apply hash-set (filter %1 (seq %2)))","problem":81,"user":"532c0507e4b09d4e7a9b553c"},{"problem":81,"code":"(fn [& sets] (reduce\n               #(if (every?\n                     (fn [coll] (contains? coll %2))\n                     sets)\n                  (conj %1 %2)\n                  %1)\n               #{}\n               (apply concat sets)))","user":"5e7fb908e4b085ba37836e3f"},{"code":"(fn inter [s1 s2] (set (filter (fn [x] (some #(= x %) s2)) s1)))","problem":81,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"(fn [set1 set2]\n  (loop [s1 set1 s2 set2 result #{}]\n    (if (empty? s1) result\n      (recur (rest s1) s2\n        (if (s2 (first s1)) (conj result (first s1)) result)))))","problem":81,"user":"4ef4ab95535dced4c769f23b"},{"problem":81,"code":"(fn isect [A,B] \n  (into #{} (filter (fn [a] (contains? B a)) A))\n)","user":"55d35a01e4b0e31453f64a63"},{"code":"(fn [s1 s2]\n    (loop [x s1, i #{}]\n      (if (empty? x)\n        i\n        (if (contains? s2 (first x))\n          (recur (rest x)\n                 (conj i (first x)))\n          (recur (rest x)\n                 i)))))","problem":81,"user":"4fcbc18ae4b0ee37620e185c"},{"code":"(fn intersect [set1 set2]\n  (clojure.set/difference set1 (clojure.set/difference set1 set2)))","problem":81,"user":"4f91fd31e4b0dcca54ed6ca8"},{"code":"(fn [s1 s2]\n  (reduce (fn [acc x] (if (contains? s2 x) (conj acc x) acc)) #{} s1))","problem":81,"user":"4ea5ba92535d7eef308072d9"},{"code":"(fn [s1 s2]\n  (reduce #(if (contains? s2 %2)\n            (conj % %2)\n            %)\n          #{}\n          s1))","problem":81,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"problem":81,"code":"(fn intersect\n  [a b]\n  (loop [ a a res #{}]\n    (if (empty? a) \n      res\n      (if (contains? b (first a))\n        (recur (rest a) (conj res (first a)))\n        (recur (rest a) res)))))","user":"5f088bb3e4b0cf489e8d7f5f"},{"code":"#(into #{} (filter (fn[x](contains? %2 x)) %))","problem":81,"user":"51b41150e4b0f094dd986fac"},{"code":"(fn [x y]\n  (loop [s1 x s2 y res #{}]\n    (if (empty? s1)\n      res\n      (do (if (contains? s2 (first s1)) (recur (rest s1) s2 (conj res (first s1))) (recur (rest s1) s2 res))\n     ))))","problem":81,"user":"51026750e4b00c483ae176f7"},{"code":"(fn [a b] (loop [s a r #{}]\n               (if (empty? s)\n                 r\n                 (if (contains? b (first s))\n                   (recur (rest s) (conj r (first s)))\n                   (recur (rest s) r)))))","problem":81,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":81,"code":"(fn \n  [s1 s2]\n\t(set (keys (filter #(> (second %) 1) (frequencies (concat s1 s2))))))","user":"557e2eafe4b05c286339e0d2"},{"code":"(fn [a b] (set (remove nil? (mapcat #(list (some #{%} b)) a))))","problem":81,"user":"4e2b1d48535deb9a81d77f03"},{"code":"(fn [arg1 arg2]\n  (loop [init arg1\n         end #{}]\n    (if-let [one (first init)]\n      (if (some #{one} arg2)\n        (recur (rest init) (conj end one))\n        (recur (rest init) end))\n      end)))","problem":81,"user":"537881a4e4b06839e8705e46"},{"code":"#(set (for [x %2\n   \t:when (get % x)]\n       x))","problem":81,"user":"4ff4f5c4e4b0678c553fc362"},{"problem":81,"code":"(fn [a b]\n   (set (filter #(contains? b %) (seq a))))","user":"53bc10f5e4b047364c04450d"},{"code":"(fn [s1 s2]\n  (set (for [x s1\n        :when (not (nil? (s2 x)))]\n    x)))","problem":81,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn inter [a b] (apply hash-set (filter #(b %1) a)))","problem":81,"user":"5353afa0e4b084c2834f4b03"},{"code":"(fn [seqA seqB] (apply sorted-set (filter #(seqB %) seqA)))","problem":81,"user":"523288fee4b035af41902a88"},{"problem":81,"code":"(fn [a b]\n    (set (filter #(a %) b)))","user":"55c5b55fe4b0e31453f649b5"},{"problem":81,"code":"(comp set filter)\n\n;; My own naive solution..\n;; (fn [a b]\n;;   (loop [bi b r #{}]\n;;     (if-let [bf (first bi)]\n;;       (if (contains? a bf)\n;;         (recur (rest bi) (conj r bf))\n;;         (recur (rest bi) r)\n;;         )\n;;       r\n;;       )\n;;     )\n;;   )","user":"5412646de4b01498b1a719d4"},{"code":"(fn [s1 s2] (into #{} (filter (partial contains? s2) s1)))","problem":81,"user":"527ba695e4b03e8d9a4a7596"},{"problem":81,"code":"#(into #{}\n                     (for [i %1\n                     :when (not (nil? (%2 i)))]\n                 i))","user":"549eb44fe4b0f3d1d8e70fa6"},{"code":"(fn q [a b]\r\n  (letfn [(i [a c]\r\n  (if (empty? a)\r\n      c\r\n      (if (contains? b (first a))\r\n          (i (rest a) (conj c (first a)))\r\n          (i (rest a) c))))]\r\n    (i a #{})))","problem":81,"user":"4df1ce44535d08e6dec9fe1f"},{"problem":81,"code":"#(reduce (\n          fn [acc  el]\n          (if(contains? %2 el)\n            (conj acc el)\n            acc\n            )\n          ) #{} %1\n  )","user":"5bdc4a76e4b0ed4b8aab4c30"},{"problem":81,"code":"(fn [s1 s2]\n   (reduce (fn [acc it]\n             (if (contains? s1 it)\n               (conj acc it)\n               acc))\n           #{}\n           s2))","user":"5808ee16e4b0a837a8b30d16"},{"code":"#(set (filter %1 %2))\n\n#_\n\n(fn [a b] \n  (into #{} (filter #(contains? b %) a)))","problem":81,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn inters [a b] (reduce #(if (contains? a %2) (conj %1 %2) %1) #{} b))","problem":81,"user":"52319066e4b0e2e8de81d1e9"},{"code":"(fn [x y] (apply disj x (clojure.set/difference x y)))","problem":81,"user":"52016690e4b0b2e020a18f0f"},{"code":"(fn [one two] (set (filter (partial contains? two) one)))","problem":81,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":81,"code":"(fn [one two]\n    (reduce (fn [agg item]\n     (prn item)\n            (if (contains? two item)\n              (conj agg item)\n              agg)) #{} one))","user":"5e2efec9e4b05b4b015161fd"},{"problem":81,"code":"(fn [a b]\n  (disj (set (map #(b %) a))\n        nil))","user":"533056a4e4b019098a6f8b5b"},{"problem":81,"code":"(fn is [s1 s2]\n  (set (filter\n   (fn fi [item]\n     (and\n      (some #{item} s1)\n      (some #{item} s2)))\n   s1)))","user":"5779556de4b0979f8965166e"},{"code":"#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))","problem":81,"user":"4e6df3c9535d5021c1a895fa"},{"problem":81,"code":"(fn [xs ys]\n  (set (filter xs ys)))","user":"5344fe13e4b084c2834f4a32"},{"code":"#(set (for [s % :when (%2 s)] s))","problem":81,"user":"4fbfe9a4e4b081705acca31f"},{"problem":81,"code":"(fn [s1 s2]\n  (apply hash-set (reduce\n              (fn [col e] (if (contains? s2 e) (conj col e) col))\n              []\n              s1)))","user":"57fa54c3e4b0d3187e900960"},{"code":"(fn [s1 s2]\n  (reduce\n    (fn [acc i]\n       (if\n         (contains? s2 i) \n          (conj acc i) acc)) #{} s1))","problem":81,"user":"511ac026e4b0c87c59c9670e"},{"problem":81,"code":"(fn intr\n  ([s] s)\n  ([s1 s2]\n   (reduce (fn [s n]\n            (if (contains? s1 n)\n              (conj s n)\n              s))\n          #{}\n          s2))\n  ([s1 s2 & more]\n   (apply intr (intr s1 s2) more)))","user":"5829d9f8e4b051871117bf4d"},{"problem":81,"code":"#(set (filter (fn [i] (contains? %2 i)) %1))","user":"5e144bd5e4b0a047bd49f6e7"},{"code":"(fn [& sets]\n(letfn [(inters [s1 s2]\n              (loop [s1 s1 tmp #{}]\n                (if (empty? s1) tmp\n                    (let [head (first s1)]\n                      (if (contains? s2 head)\n                        (recur (set (rest s1)) (conj tmp head))\n                        (recur (set (rest s1)) tmp))))))]\n      (reduce inters sets)))","problem":81,"user":"4e88feef535d8b9bb0147ca8"},{"problem":81,"code":"(fn [a b](->> (map vector b)\n(reduce #(conj %1 (some a %2)) #{})\n(remove nil?)\n(into #{})))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn [s & ss] (into #{} (keep\n  (fn [x] (when-not (some nil? (map #(% x) ss)) x)) s)))","problem":81,"user":"4fc4eadee4b081705acca353"},{"code":"#(reduce (fn [r x] (if (contains? %2 x) (conj r x) r)) #{} (vec %))","problem":81,"user":"4fe8d862e4b0547ebccb2428"},{"problem":81,"code":"#(loop [s1 (into [] %1) out #{}]\n   (if (empty? s1) \n     out                                      \n     (recur (rest s1) (if (contains? %2 (first s1))\n                        (conj out (first s1) )\n                        out))))","user":"550609b3e4b021ccfedb9695"},{"code":"(fn intersct[c1 c2]\r\n  (disj (into #{} (map (fn[x] (if (contains? c2 x) x))c1))nil)\r\n  )","problem":81,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":81,"code":"(fn[a b]( set (filter #(contains? b %) a )))","user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn [xs ys]\n  (set (filter ys xs)))","problem":81,"user":"508157b2e4b0946d0443855c"},{"problem":81,"code":"(fn [s1 s2]\n  (->> s2\n       (filter #(contains? s1 %))\n       set))","user":"5215661be4b02f6d8ea676c7"},{"problem":81,"code":"#(into #{} (filter (complement nil?) (map %1 %2)))","user":"51421cd5e4b0b50abeb46b2c"},{"code":"(fn [s1 s2]\n   (into #{} (filter #(contains? s1 %) s2)))","problem":81,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":81,"code":"(fn [s1 s2]\n  (set (filter (fn [e1] (contains? s2 e1)) s1)))\n\n;; beautiful idiomatic solution:\n;; (comp set filter)","user":"5fb68f09e4b08cb800c85b58"},{"problem":81,"code":"(fn [s1 s2] (reduce (fn [acc x] (if (s2 x) (conj acc x) acc)) #{} s1))","user":"5ea970d1e4b00a66d4a951c6"},{"code":"(fn [x y]\n  (reduce #(set (if (contains? y %2)\n             (conj % %2)\n             %)) [] x))","problem":81,"user":"52fa4f48e4b047fd55836ff7"},{"code":"(fn [set1 set2]\n  (loop [s1 set1 rslt #{}]\n    (if (empty? s1) rslt\n        (if (contains? set2 (first s1))\n          (recur (rest s1) (conj rslt (first s1)))\n          (recur (rest s1) rslt)))))","problem":81,"user":"4e7d1c22535db169f9c796c5"},{"problem":81,"code":"(fn [s1 s2] (letfn [\n                     (symmetric [lhs rhs]\n                       (into #{}\n                             (filter #(not (nil? (get rhs %1))) lhs)))\n                     ]\n               (symmetric s1 s2)))","user":"58a9e872e4b01a0c0b232973"},{"problem":81,"code":"(fn [set1 set2]\n  (set (mapcat (fn [s1 s2]\n         (cond\n          (and (set2 s1) (set1 s2)) [s1 s2]\n          (set2 s1) [s1]\n          (set1 s2) [s2]\n          :else []))\n       set1\n       set2)))","user":"554bd33ce4b0a04f7929959a"},{"problem":81,"code":"(fn set-intersect [s1 s2]\n  (let [[x xs] [(first s1) (rest s1)]]\n  (cond \n    (empty? s1) #{}\n    (contains? s2 (first s1)) (conj (set-intersect xs s2) x)\n    :else (set-intersect xs s2))))","user":"5f63684be4b02876ed9fd012"},{"code":"(fn [s1 s2]\n  (set (filter s1 s2)))","problem":81,"user":"50e4b066e4b0cb9ec68fbca6"},{"problem":81,"code":"(fn [a b](set (filter #(contains? b %) a)))","user":"59cd13d5e4b0ef0a1e9b5b32"},{"code":"(fn intersection- [s1 s2]\n  \"81. Write a function which returns the intersection of two sets.\"\n  (set (filter (complement nil?) (map #(s2 %) s1))))","problem":81,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn [coll1 coll2] \r\n   (let [all (clojure.set/union coll1 coll2)]\r\n     (set (for [e all :when (and (contains? coll1 e) (contains? coll2 e))] e))))","problem":81,"user":"4ee77f15535d93acb0a66868"},{"problem":81,"code":"#(clojure.set/difference  %1 (clojure.set/difference  %1 %2))","user":"5b3251c1e4b025bcb146f317"},{"problem":81,"code":"(fn [a b] \n  (set (filter b a)))","user":"541ddadbe4b01498b1a71a84"},{"code":"(fn [coll1 coll2]\n  (clojure.set/select \n   #(contains? coll1 %)\n   coll2))","problem":81,"user":"5289f1f4e4b0239c8a67ae6d"},{"problem":81,"code":"(fn [a b]\n  (loop [result #{} s a]\n    (if (seq s)\n      (if (contains? b (first s))\n        (recur (conj result (first s)) (rest s))\n        (recur result (rest s)))\n      result)))","user":"5fef4292e4b05ac5b16ea1d7"},{"problem":81,"code":"(fn myF [s1 s2]\n  (reduce #(if (contains? s2 %2) (conj %1 %2) %1 ) #{} s1))","user":"56eff7c1e4b04a395b9a0468"},{"problem":81,"code":"(fn [set1 set2]\n    (set (filter #(contains? set2 %) set1)))","user":"58bbcbc8e4b0888cdc949d00"},{"problem":81,"code":"#(reduce (fn [result item]\n                   (if (contains? %2 item)\n\t\t     result\n                     (disj result item)))\n\t       %1 %1)","user":"4f24c859e4b0d66497709fef"},{"problem":81,"code":"(fn [a b]\n(->\n (filter\n  (fn [i]\n    (contains? a i)\n    )\n  b)\n ((fn [x] (into #{} x)) )\n )\n)","user":"570e43d8e4b0b0fb43fd06eb"},{"code":"(fn __ [a b]\n  (set (filter #(contains? b %) a)))","problem":81,"user":"52ba447ee4b07a9af57922ce"},{"code":"(fn cust-inter [lset rset]\n  (reduce #(if (contains? rset %2) (conj %1 %2) %1) \n          #{}\n          lset))","problem":81,"user":"52463059e4b09dbe66b56198"},{"code":"(fn [a b]\n  (set (reverse (reduce (fn [r x]\n    (if (some (-> x list set) a)\n(conj r x)\nr)) #{} b))))","problem":81,"user":"4eb27fad535d7eef3080734a"},{"problem":81,"code":"(fn[x y] (set (filter #(contains? y %) x)))","user":"58d1c1b1e4b03c36ff7e58ef"},{"problem":81,"code":"(fn [a b]\n  (set (filter (fn [x] (a x)) (seq b))))","user":"532b9075e4b09d4e7a9b5533"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce #(if (get s2 %2) (conj %1 %2) %1) #{} s1))","user":"59be62d5e4b0a024fb6ae435"},{"code":"#(set\n   (for [x %1 y %2 :when (= x y)]\n     x))","problem":81,"user":"4f128865535d64f603146428"},{"code":"(fn [a b]\n  (reduce (fn [coll elt]\n            (if (contains? b elt)\n              (conj coll elt)\n              coll))\n          #{}\n          a))","problem":81,"user":"4fe9d647e4b0547ebccb2472"},{"code":"(fn [cola colb]\n  (reduce\n   (fn [out x]\n     (if (nil? (cola x))\n       out\n       (conj out x)))\n   #{}\n   colb))","problem":81,"user":"52dad8bde4b09f7907dd13be"},{"problem":81,"code":"(fn mIntersect [s1 s2]\n    (loop [s s1 r #{}]\n          (if (empty? s)\n            r\n            (if (contains? s2 (first s))\n              (recur (rest s) (conj r (first s)))\n              (recur (rest s) r)\n              )\n            )\n          )\n    )","user":"550e0373e4b06e50f9beb162"},{"problem":81,"code":"#(loop [s1 %1\n        s2 %2\n        result #{}]\n   (cond\n    (empty? s1) result\n    (contains? s2 (first s1)) (recur (rest s1) s2 (into result [(first s1)]))\n    :else (recur (rest s1) s2 result)))","user":"5f0b8243e4b0f30dddfb5d45"},{"problem":81,"code":"(fn f\n  [a b]\n  (into #{} (distinct (filter #(< 1 ((frequencies (sort (concat a b))) %)) (sort (concat a b))))))","user":"5ed15e23e4b016b56eae05ba"},{"problem":81,"code":"(fn [s1 s2]\n  (reduce #(if (get s2 %2)\n             (conj %1 %2)\n             (identity %1))\n          #{}\n          s1))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn [s1 s2] (set (filter #(contains? s1 %) s2)))","problem":81,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn [& xs] (reduce #(set (filter (partial contains? %) %2)) xs))","problem":81,"user":"523d02b0e4b0dbf0c3017289"},{"code":"(fn [s1 s2]\n  (set (filter (fn [e] (contains? s2 e)) s1)))","problem":81,"user":"5126dbabe4b083bb8f88cf0e"},{"code":"(fn[set1 set2]\r\n (loop[res #{} l-set1 set1 l-set2 set2]\r\n (if(empty? l-set1)\r\n   res\r\n   (recur (if(contains? l-set2 (first l-set1))\r\n           (conj res (first l-set1)) res) (rest l-set1) l-set2)) \r\n )\r\n)","problem":81,"user":"4dc7f472535d8a4b2fd74293"},{"code":"#(loop [s1 %1 s2 %2 acc #{}]\n   (cond\n    (empty? s1) acc\n    (contains? s2 (first s1)) (recur (rest s1) s2 (conj acc (first s1)))\n    :else (recur (rest s1) s2 acc)))","problem":81,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn [s1 s2]\n  (reduce (fn [res i] \n            (if (contains? s2 i) \n              res \n              (disj res i)))\n          s1 s1))","problem":81,"user":"5154b16be4b0179c5115f4e2"},{"code":"#(clojure.set/difference %2 (clojure.set/difference (clojure.set/difference %2 %1) %1))","problem":81,"user":"523b4e91e4b07becd5be21ef"},{"problem":81,"code":"(fn my_intersect [sa sb]\n  (set (filter #(sa %) sb)))","user":"5632b0a9e4b0bfe05bf117a8"},{"problem":81,"code":"(fn set-intersection [a b]\n  (reduce #(if-let [el (a %2)] (conj %1 el) %1) #{} b))","user":"580d2788e4b0849f6811b730"},{"code":"(fn [s1 s2] (apply hash-set (remove nil? (map s1 s2))))","problem":81,"user":"51bc2f6ae4b0fe3ecfb46452"},{"problem":81,"code":"(fn intersection'\n  [s1 s2]\n  (clojure.set/difference s1 (clojure.set/difference s1 s2)))","user":"5fe5a64de4b05ac5b16ea187"},{"code":"(fn intersect [s1 s2]\n  (set (filter #(s2 %) s1))\n  )","problem":81,"user":"5204f2b1e4b0bf4f1882c7f5"},{"code":"(fn [a b]\n           (set (filter identity (map a b))))","problem":81,"user":"4f3cd535e4b0e243712b1f56"},{"problem":81,"code":"#(apply sorted-set(filter % %2))","user":"5dbb5200e4b09f47823971a9"},{"problem":81,"code":"(fn [coll1 coll2]\n    (loop [coll1 coll1 \n           coll-result #{}]\n      (cond (empty? coll1) coll-result\n            :else\n            (recur (rest coll1) (if (contains? coll2 (first coll1))\n                                  (conj coll-result (first coll1))\n                                  coll-result)))))","user":"5e724492e4b085ba37836dc7"},{"problem":81,"code":"(fn [set1 set2]\n  (loop [[elem & coll1] (apply list set1) set2 set2 intersec #{}]\n    (if (or (nil? elem) (empty? set2))\n      intersec\n      (recur coll1 (disj set2 elem) (if (contains? set2 elem) (conj intersec elem) intersec))\n   )\n )\n)","user":"5e09fd26e4b099d064962f60"},{"problem":81,"code":"#(into #{} (filter (fn [x] (and (contains? %1 x) (contains? %2 x))) (into %1 %2)))","user":"58a1d00ae4b02bd94d917ec6"},{"problem":81,"code":"(fn set-intersection [s1 s2]\n  (into #{} (filter s1 s2)))","user":"53b05a36e4b047364c044481"},{"problem":81,"code":"(fn intersect [s1 s2]\n  (loop [s1 s1\n        endset #{}]\n  (if (= 0 (count s1))\n    endset\n    (if (not (= nil (some (partial = (first s1)) s2)))\n    \t(recur (rest s1) (conj endset (first s1)))\n        (recur (rest s1) endset)\n    )\n  )\n    )\n )","user":"53a36fd7e4b0f1fc74538834"},{"code":"#(set (filter (fn[x](contains? %2 x)) %1))","problem":81,"user":"4ed2dd98535d44c135fd68e2"},{"problem":81,"code":"(fn [xset yset] (set (filter #(contains? xset %) yset)))","user":"552356fae4b0882d96d091af"},{"code":"(fn interception [lft rght]\n  (set (filter #(contains? rght %) lft)))","problem":81,"user":"515737f0e4b0b0b4b87062d0"},{"problem":81,"code":"(fn inters [set1 set2]\n  (loop [set2 set2\n         r #{}]\n    (if-not (empty? set2)\n      (if (contains? set1 (first set2))\n        (recur (rest set2) (conj r (first set2)))\n        (recur (rest set2) r))\n      (set (sort r))\n      )))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":81,"code":"(fn [a b]\n  (apply disj\n  (clojure.set/union a b)\n  (clojure.set/union (apply disj a b) (apply disj b a))))","user":"54bcab07e4b0ed20f4ff6ed5"},{"problem":81,"code":"(fn pia [s1 s2]\n  (set (filter (fn [e] (contains? s2 e)) s1 )))","user":"569ce6fee4b0542e1f8d146c"},{"code":"(fn [s1 s2] (set (filter s1 (seq s2))))","problem":81,"user":"5095f761e4b0ba05ca7aebfd"},{"problem":81,"code":"(fn my-intersection\n  ([a b]\n   (reduce (fn [acc v]\n             (if (contains? b v)\n               (conj acc v)\n               acc))\n           #{}\n           a))\n  ([a b & sets]\n   (reduce my-intersection (conj sets a b))))","user":"53350264e4b0656e627bfd73"},{"problem":81,"code":"(fn [l1 l2]\n  (set \n   (for [x l1\n         y l2\n         :when (= x y)]\n     x)))","user":"5a9a12d6e4b0d174b936c7b7"},{"code":"(fn [s1 s2]\n  (into #{}\n        (concat (filter #(contains? s1 %) s2) \n                (filter #(contains? s2 %) s1))))","problem":81,"user":"527ccaf4e4b0757a1b17136d"},{"code":"(fn b-intersection [s1 s2] (set(filter #(contains? s1 %) s2)))","problem":81,"user":"5260341ee4b03e8d9a4a7034"},{"problem":81,"code":"(fn [set1 set2]\n  (let [match-set (into\n                    #{}\n                    (filter set1 (seq set2)))]\n    (into #{}\n          (filter match-set (seq set1)))))","user":"53716539e4b0fc7073fd6eb1"},{"problem":81,"code":"(fn [x y]\n   (reduce (fn [acc i]\n             (if (x i)\n               (conj acc i)\n               acc))  #{} y) )","user":"5ebc7c13e4b00a66d4a95267"},{"problem":81,"code":"(fn [x y] (reduce #(if (some #{%2} x) (conj %1 %2) %1) #{} y))","user":"5910a43de4b0163c97b36ebf"},{"code":"(fn [s1 s2]\n           (set (filter s1 s2)))","problem":81,"user":"52bf0116e4b07a9af5792328"},{"problem":81,"code":"(fn [a b]\n  (set\n   (concat\n    (filter (fn [x] (contains? a x)) b)\n    (filter (fn [x] (contains? b x)) a))))","user":"5dab11cde4b000c986472c45"},{"problem":81,"code":"#(->> %& \n     (map (partial into []))\n     (apply concat) \n     sort \n     (partition 2 1) \n     (filter (partial apply =)) \n     (map first) \n     set\n)\n;#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/difference %1 %2) (clojure.set/difference %2 %1) )","user":"5d9e7971e4b000c986472bc1"},{"code":"(fn [s1 s2] (reduce #(\nif (s1 %2)\n   (conj % %2)\n   %\n) #{} s2))","problem":81,"user":"4dad86e0c9a9d6ed0f99dc57"},{"problem":81,"code":"(fn [a b] \n  (set (filter #(contains? b %)a)))","user":"5c746c31e4b0fca0c16227c8"},{"problem":81,"code":"(fn [x y] ( into #{} (mapcat #(filter (partial = %) y) x)))","user":"5a3d7afae4b0447ef91cc5a6"},{"problem":81,"code":"(fn my-intersection\n  [a b]\n  (into #{}\n        (for [i a j b :when (= i j)] i)))","user":"54145050e4b01498b1a719ea"},{"problem":81,"code":"(fn [s1 s2] (reduce (fn [result item] (if (contains? s2 item)\n                                         result\n                                         (disj result item))\n                       )\n                     s1 s1))","user":"5a61bf79e4b0512ff01cd97b"},{"problem":81,"code":"(fn intset [a b]\n  (set (filter #(a %) b)))","user":"56fc1bc7e4b07572ad1a88dd"},{"code":"(fn [s1 s2] (set (filter #(s1 %) s2)))","problem":81,"user":"50ce09e6e4b0ffc302be4bc6"},{"code":"(fn [s & ss]\n  (letfn [(inter [a b]\n            (reduce (fn [c el]\n                      (if (contains? b el)\n                        (conj c el)\n                         c))\n                         #{}\n                         a))]\n    (reduce inter s ss)))","problem":81,"user":"51f9527fe4b09be9c177e549"},{"problem":81,"code":"(fn f[a b]\n  (if (empty? a) #{}\n    (if (contains? b (first a))\n      (conj (f (rest a) b) (first a))\n      (f (rest a) b))))","user":"59e8bb43e4b0249b72820735"},{"problem":81,"code":"(fn [s1 s2]\n  (set\n   (filter #(and (contains? s1 %) (contains? s2 %)) (concat s1 s2) )))","user":"5680104ae4b0966858e4d8ea"},{"code":"(fn [s1 s2] (set (filter (partial contains? s1) s2)))","problem":81,"user":"50b668dde4b08fb537db98f2"},{"code":"#(set (for [x %1, y %2, :when (= x y)] x))","problem":81,"user":"4eae5fe4535d7eef30807325"},{"problem":81,"code":"#(loop [o '() s1 %1 s2 %2]\n        (println s1)\n        (println s2)\n        (println o)\n        (if (empty? s1)\n            (into #{} o)\n            (recur\n                (if (contains? s2 (first s1))\n                    (conj o (first s1))\n                    o)\n                (disj s1 (first s1))\n                s2)))","user":"5b083513e4b0cc2b61a3bdb4"},{"code":"(fn [x y]\r\n  (set (filter #(contains? x %) y)))","problem":81,"user":"4f82ed48e4b033992c121c0e"},{"problem":81,"code":"(fn [x y]\n  (set (remove nil? (map (fn [z]\n                           (y z))\n                         x))))","user":"5756e218e4b02ea1147992e5"},{"code":"#(set\n  (for [a %\n        b %2\n        :when (= a b)]\n    a))","problem":81,"user":"510b0480e4b078ea719210fa"},{"problem":81,"code":"(fn my-intersection\n  [s1 s2]\n  (set (reverse (filter (into #{} s2) s1))))","user":"5eec1001e4b07c55ae4a0502"},{"code":"(fn [s1 s2]\n  (apply hash-set (remove nil? (map #(get s1 %) s2))))","problem":81,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":81,"code":"(fn [ a b]\n  \"交集\"\n  (apply hash-set\n        (remove  \n         (apply hash-set\n           (remove  a b)) \n         b)))","user":"5b9ae606e4b0c0b3ffbd4af2"},{"code":"(fn [set1 set2] (set (filter set1 set2)))","problem":81,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":81,"code":"(fn\n  [set1 set2]\n  (loop [s1 (seq set1)\n         res #{}]\n    (if-let [x (first s1)]\n      (if (some #{x} set2)\n        (recur (rest s1) (conj res x))\n        (recur (rest s1) res))\n      res)))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":81,"code":"(fn [coll1 coll2]\n  (set (filter #(contains? coll2 %) coll1)))","user":"5e471203e4b043cd24807a2a"},{"problem":81,"code":"(fn [x y]\n  (set (reverse (remove (clojure.set/difference x y) x))))","user":"572a856be4b0f4d77e65123b"},{"problem":81,"code":"(fn [set1 set2]\n   (loop [rliste set1 expl set2 result #{}]\n     (if (empty? rliste)\n        result\n       (if (contains? expl (first rliste))\n       (recur (rest rliste) expl (conj result (first rliste)))\n       (recur (rest rliste) expl result)\n       )\n      )\n   )\n)","user":"556f2009e4b09a3098a52519"},{"code":"(fn [s1 s2]\n   (letfn [(common [xs ys] (reduce\n                             (fn [common item]\n                               (if (contains? ys item)\n                                 (conj common item) common))\n                             [] xs))]\n          (set (concat (common s1 s2) (common s2 s1)))))","problem":81,"user":"4e513758535dc968683fc4f3"},{"problem":81,"code":"(fn [seq-a seq-b]\n      (set (filterv (fn [x] (contains? seq-b x)) seq-a)))","user":"5df94f73e4b0a607a9a45cb6"},{"problem":81,"code":"#(-> (filter %1 %2) set)","user":"5b073c34e4b0cc2b61a3bda4"},{"problem":81,"code":"(fn\n  [A B]\n  (clojure.set/difference \n   (clojure.set/union A B) \n   (clojure.set/union (clojure.set/difference A B) (clojure.set/difference B A))))","user":"55b3c03ee4b01b9910ae2975"},{"code":"(fn[a,b](set (filter #(contains? a %) b)))","problem":81,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":81,"code":"(fn [s1 s2] \n  (->> (filter s1 s2)\n       (apply hash-set)))","user":"5f82609ae4b0c071e6c840f9"},{"code":"(fn\n  [x y]\n  (disj (into #{} (for [z (seq y)] (if (contains? x z) z ))) nil))","problem":81,"user":"52f3af46e4b05e3f0be25f14"},{"problem":81,"code":"(fn [a b]\n  (clojure.set/difference (clojure.set/union a b)\n                          (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))\n  ))","user":"55d4ae39e4b0e31453f64a7b"},{"code":"(fn [a b]\n  (let [all (clojure.set/union a b),\n        difa (clojure.set/difference a b)\n        difb (clojure.set/difference b a)]\n    (clojure.set/difference all difa difb)))","problem":81,"user":"4ffe4d43e4b0678c553fc3f1"},{"problem":81,"code":"#(->> (map % %2) (filter (fn [x] (not (nil? x)))) set)","user":"5e0e836fe4b099d064962fa8"},{"problem":81,"code":"(fn [a b]\n  (set (filter #(clojure.set/subset? #{%} b)\n               a)))","user":"57aa4775e4b0b8559636fc6b"},{"code":"(fn my-intersection\n  ([iset1 iset2] (my-intersection iset1 iset2 #{}))\n  ([iset1 iset2 oset]\n     (cond\n      (empty? iset2) (set (filter #(not (nil? %)) oset))\n      :else (my-intersection iset1\n                             (rest iset2)\n                             (conj oset\n                                   (first (filter #(= % (first iset2)) iset1)))))))","problem":81,"user":"4eee3e6a535d93acb0a668c3"},{"problem":81,"code":"(fn intersection*\n  [s1 s2]\n  (let [s (clojure.set/union s1 s2)]\n    (reduce (fn [acc x]\n              (if (and (contains? s1 x) (contains? s2 x))\n                (conj acc x)\n                acc) )\n           #{} s)))","user":"5c35acffe4b0d62ef62d9f62"},{"code":"(fn[x y] (set (filter #(not (nil? %1)) (map #(x %1) y))))","problem":81,"user":"50b25f2ce4b03ea88043355f"},{"code":"(fn [s1 s2]\n  (set (for [s s1 :when (not (nil? (s2 s)))] s)))","problem":81,"user":"4eddcbbf535d10e5ff6f532d"},{"problem":81,"code":"(fn [a b]\n(clojure.set/difference a (clojure.set/difference a b))\n  )","user":"54bbba99e4b0ed20f4ff6ec2"},{"problem":81,"code":"#(set (filter (fn [s] (contains? %2 s)) %1))","user":"543d5c61e4b032a45b86934d"},{"problem":81,"code":"(fn [y other] ((fn [result x rst] (cond (nil? x) result (contains? other x) (recur (conj result x) (first rst) (rest rst)) :else (recur result (first rst) (rest rst)))) #{} (first y) (rest y)))","user":"59cf6fbce4b0ef0a1e9b5b6c"},{"code":"(fn [s1 s2] (set (filter s2 s1)))","problem":81,"user":"4f13047d535d64f60314642c"},{"problem":81,"code":"(fn inter [ s1 s2 ]\n  \n  (reduce \n       \t  (fn [res item]\n            (if (contains? s2 item)\n              res\n              (disj res item))\n              \n           )\n             \n          s1 s1)\n  \n  )","user":"56f2611fe4b04a395b9a04a2"},{"code":"(fn [s1 s2]\n  (reduce #(if (not (contains? s2 %2)) (disj %1 %2) %1) s1 s1))","problem":81,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"#(set(filter%1%2))","problem":81,"user":"4e7eff9e535db966e863cc38"},{"problem":81,"code":"(fn [a b] \n  (set (remove \n   (set (concat (remove a b) (remove b a)))\n   (set(concat a b) )\n   ))\n  )","user":"594a7ed1e4b07ddc2dafae02"},{"problem":81,"code":"(fn asdf [s1 s2]\n  (set (filter #(contains? s2 %) s1)))","user":"5a05a807e4b01bb0ae8afdb8"},{"code":"#(clojure.set/select (partial contains? %) %2)","problem":81,"user":"4f956072e4b0dcca54ed6ccf"},{"code":"(fn intersect--filter\n  [& [a & more :as sets]] {:pre [(every? set? sets)]}\n  (if a\n    (set (filter (apply comp more) a))\n    #{}))","problem":81,"user":"4fc6305de4b0ee37620e180b"},{"problem":81,"code":"(fn [x y]\n  (let [x-sub-y (clojure.set/difference x y)\n        y-sub-x (clojure.set/difference y x)\n        x-y-diff (clojure.set/union x-sub-y y-sub-x)\n        x-y (clojure.set/union x y)]\n    (clojure.set/difference x-y x-y-diff)))","user":"5182de5ce4b0353c468deb74"},{"problem":81,"code":"(fn [s1 s2]\n     (set (filter (fn [x] (s1 x)) s2)))","user":"4f867b25e4b033992c121c51"},{"code":"(comp (partial into #{}) filter)","problem":81,"user":"519ef784e4b087743fad2198"},{"problem":81,"code":"#(reduce (fn[acc i] (if (contains? %1 i) (conj acc i) acc)) #{} %2)","user":"5b210749e4b03cfeda66ed48"},{"code":"(fn [a b]\n  (reduce\n   (fn [sofar x]\n     (if (and (a x) (b x))\n       (conj sofar x)\n       sofar))\n   #{}\n   a))","problem":81,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"(fn [xs ys] (set (filter xs ys)))","problem":81,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":81,"code":"(fn [set1 set2]\n  (into #{} (filter #(and (contains? set1 %) (contains? set2 %)) (conj set1 set2))))","user":"57b356c2e4b0fbc9809a277b"},{"problem":81,"code":"(fn [a b](reduce #(if (a %2) (conj %1 %2) %1) #{} b))","user":"5f1eec36e4b0f565ad998274"},{"code":"#(apply disj %1 (apply disj %1 %2))","problem":81,"user":"4e98a6d0535dbda64a6f6b5e"},{"code":"(fn [a b]\n    (set (for [x a :when (contains? b x)] x)))","problem":81,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn [s1 s2] (into #{} (remove #(not (contains? s2 %)) s1)))","problem":81,"user":"4eb404ba535d7eef3080735a"},{"problem":81,"code":"(fn p-81 [a b]\n (set  (filter #(get b %) a)))","user":"5bfc9037e4b0bdcf453d15f2"},{"problem":81,"code":"(fn [x y] (set (filter #(not (nil? (x %))) y)))","user":"5576e78de4b05c286339e075"},{"code":"(fn set-intersect\r\n  ([x y]\r\n    (set-intersect x y #{}))\r\n  ([x y z]\r\n    (if (= 0 (count x))\r\n      z\r\n      (if (contains? y (first x))\r\n        (recur (rest x) y (conj z (first x)))\r\n        (recur (rest x) y z)))))","problem":81,"user":"4e16bdef535d04ed9115e7e9"},{"problem":81,"code":"(fn my-intersection [a b]\n  (into #{} (filter (partial contains? b) a)))","user":"5776e21de4b0979f89651642"},{"code":"(fn [x y](clojure.set/difference (clojure.set/union x y) (clojure.set/union (clojure.set/difference x y)(clojure.set/difference y x))))","problem":81,"user":"4f32135ae4b0d6649770a08e"},{"problem":81,"code":"(fn [s1 s2] (set (filter #(and (contains? s1 %) (contains? s2 %)) (clojure.set/union s1 s2))))","user":"5e909685e4b0cb016954634d"},{"code":"(fn [a b] (set (remove nil? (for [i a] (if (contains? b i) i nil)))))","problem":81,"user":"525c575be4b0cb4875a45d38"},{"code":"(fn i [s1 s2]\n  (set (filter #(contains? s1 %) s2)))","problem":81,"user":"504e04a4e4b078edc5f59397"}]